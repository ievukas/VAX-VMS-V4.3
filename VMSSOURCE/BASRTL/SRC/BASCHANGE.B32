MODULE BAS$CHANGE (				!
		IDENT = '1-021'		! File: BASCHANGE.B32 EDIT: DG1021
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous
!
! ABSTRACT:
!
!	This module contains routines which change a character string
!	to a list of numbers and vice-versa.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 20-FEB-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 20-FEB-1979
! 1-002	- Track changes in the virtual array support code.  JBS 03-APR-1979
! 1-003	- Continue to track changes in the virtual array support
!	   code.  JBS 04-APR-1979
! 1-004	- Change OTS$S and LIB$S to STR$.  JBS 21-MAY-1979
! 1-005	- Change the index parameters to BAS$FETCH_BFA and BAS$STORE_BFA
!	   from by reference to by value.  JBS 01-JUN-1979
! 1-006	- Use BASLNK.  JBS 26-JUN-1979
! 1-007	- Change call to STR$COPY.  JBS 16-JUL-1979
! 1-008 - BAS$CHANGE_S_NA must apply the double precision scale
!	  to double precision arrays, and BAS$CHANGE_NA_S must
!	  descale before converting to a string.  PLL 22-May-1981
! 1-009 - BAS$CHANGE_S_NA was erroneously calling BAS$FETCH_BFA to store
!	  a value in a 2 dim. array.
!	  BAS$CHANGE_NA_S was not freeing it's dynamic string.
!	  Add support for new data types and dynamically mapped arrays.
!	  PLL 3-Mar-1982
! 1-010 - Add support for decimal arrays.  PLL 15-Mar-1982
! 1-011 - Correct arguments in CVTPL, CVTLP.  PLL 14-Apr-1982
! 1-012 - CVTPL should set scale to 0 and let FETCH_BFA do the scaling.
!	  PLL 16-Apr-82
! 1-013 - Clean up comments, etc from last edit.  PLL 21-Apr-82
! 1-014 - Add support for multiply dimensioned arrays.  PLL 24-May-82
! 1-015 - Fix bug in changing from string to integer arrays.  PLL 9-Jul-1982
! 1-016 - Fix bug in changing from integer to string.  PLL 26-Jul-1982
! 1-017 - Changing a string to a byte or word array does not store the value
!	  in the proper location.  Fix STORE.  PLL 13-Sep-1982
! 1-018 - Fix code which calculates the length for a virtual packed decimal
!	  array element.  (Must be power of 2.)  Also correct conversion
!	  of long to packed and vice versa.  Long must be converted to 10
!	  digit packed with 0 scale, and then to desired length and scale.
!	  While fixing miscellaneous bugs, also add some code to make
!	  dynamically mapped arrays work properly.  PLL 22-Sep-1982
! 1-019 - remove restriction of 255-byte destination character strings.
!	  dynamically allocate destination string based on length needed.
!	  MDL 14-Jun-1983
! 1-020 - Fixed: 1. if the string is longer than the numeric array, element 0 
!	  of the numeric array contains the string's length. 
!		 2. if string length > 255 and CHANGEing to byte array,
!	  integer error is signalled.  DG 4-Jan-1984
! 1-021 - Dynamic remapped decimal arrays no longer get "Data type error".
!	  At the same time, fixed the array length calculations for data
!	  types longer than 1 longword.  DG 9-Jan-1984
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:BASLNK';
REQUIRE 'RTLIN:BASFRAME';			! BSF symbols

LINKAGE 
    COPY_JSB = JSB (REGISTER = 0, REGISTER = 1) :
	NOTUSED (2,3,4,5,6,7,8,9,10,11);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$CHANGE_NA_S : NOVALUE,			! Change list to string
    BAS$CHANGE_S_NA : NOVALUE,			! Change string to list
    FETCH : NOVALUE,				! Fetch an array item
    STORE : NOVALUE;				! Store an array item

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System definitions

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$STOP : NOVALUE,			! signals fatal error
    BAS$SCALE_D_R1 : BAS$SCALE_LINK NOVALUE,    ! scale  a value    
    BAS$DSCALE_D_R1 : BAS$SCALE_LINK NOVALUE,   ! descale a value
    BAS$$COPY_D_R1 : COPY_JSB NOVALUE,		! copy a double number
    BAS$$VA_FETCH,				! fetch a virtual array element
    BAS$$VA_STORE,				! store a virtual array element
    STR$GET1_DX,				! allocate a string
    STR$FREE1_DX,				! free a string
    STR$COPY_DX;				! copy a string

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_MAXMEMEXC : UNSIGNED (8),		! Maximum memory exceeded
    BAS$K_PROLOSSOR : UNSIGNED (8),		! Program lost, sorry
    BAS$K_DATTYPERR : UNSIGNED (8),		! Data type error
    BAS$K_ARGDONMAT : UNSIGNED (8),		! Arguments don't match
    BAS$K_SUBOUTRAN : UNSIGNED (8),		! Subscript out of range
    BAS$K_INTERR    : UNSIGNED (8),		! Integer error
    BAS$K_NOTIMP : UNSIGNED (8);		! Not implemented


GLOBAL ROUTINE BAS$CHANGE_NA_S (		! Change list to string
	LIST_DESC, 				! Address of array descriptor
	STR_RESULT				! Result string
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Change the list of numbers to a string.  The first number is
!	the length of the string.
!
! FORMAL PARAMETERS:
!
!	LIST_DESC.rx.d	The list of numbers.  This may be word,
!			longword, floating or double.  It may be single-
!			or double-dimensioned.
!	STR_RESULT.wt.d	The descriptor for the string result.  It may
!			be dynamic or static.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

!+
! The FETCH routine will copy all numeric elements from LIST_DESC
! into the string buffer.
!-
    FETCH (.LIST_DESC, .STR_RESULT);

    RETURN;
    END;					! end of BAS$CHANGE_NA_S


GLOBAL ROUTINE BAS$CHANGE_S_NA (		! Change string to list
	STR_DESC, 				! String to change
	LIST_RESULT				! Where to put result
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Change the string to a list of numbers.  The first number is
!	the length of the string.
!
! FORMAL PARAMETERS:
!
!	STR_DESC.rt.d	The string to be converted to numbers.
!	LIST_RESULT.wx.a The array of numbers to store in.  The type
!			 may be word, longword, floating or double.
!			 it may have one or two dimensions.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    
    MAP       
	STR_DESC : REF BLOCK [8, BYTE];

!+
! Copy each character of the string to an element of the array.
!-
    STORE (.STR_DESC, .LIST_RESULT);
    RETURN;
    END;					! end of BAS$CHANGE_S_NA


ROUTINE FETCH (					! Fetch array values
	DESCRIP,				! Array descriptor
	STR_DESC				! Where to store values
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Fetch array values from an array or virtual array.  The array will
!	always be numeric.  The values are changed to a string.
!
! FORMAL PARAMETERS:
!
!	DESCRIP.rx.da	The descriptor of the array or virtual array
!	STR_DESC.wx.dx	The string buffer to hold the values
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!
!--

    BEGIN

    GLOBAL REGISTER
	BSF$A_MAJOR_STG = 11,
	BSF$A_MINOR_STG = 10,
	BSF$A_TEMP_STG = 9;

    BUILTIN
	ASHP,
	CVTFL,
	CVTDL,
	CVTGL,
	CVTHL,
	CVTPL;

    LOCAL
	TEMP_STR_DESC : BLOCK [8, BYTE],
	STR_STATUS,
	ARRAY_LEN,
	INDEX_VALUE,
	VALUE_LOCATION,
	MULTIPLIERS : REF VECTOR,
	BOUNDS : REF VECTOR,
	LOW_INDEX,
	HIGH_INDEX,
	INDEX_INCR,
	INDEX_NUMBER,
	VALUE_DESCR : BLOCK [12, BYTE],
	LENGTH,
	STR_BUF : REF VECTOR [, BYTE],
	STR_BUF_LONG,
	TEMP_LEN : VECTOR [4],
	TEMP_BUF : VECTOR [4];

    MAP
	DESCRIP : REF BLOCK [8, BYTE],
	STR_DESC : REF BLOCK [8, BYTE];

!+
! The coefficients and bounds must be present.
!-

    IF ( NOT (.DESCRIP [DSC$V_FL_COEFF] AND .DESCRIP [DSC$V_FL_BOUNDS])) THEN BAS$$STOP (BAS$K_ARGDONMAT);

    MULTIPLIERS = DESCRIP [DSC$L_M1];
    BOUNDS = DESCRIP [DSC$L_M1] + (%UPVAL*.DESCRIP [DSC$B_DIMCT]);
!+
! Compute the lower and upper index numbers based on how the array
! is stored.
!-

    IF (.DESCRIP [DSC$V_FL_COLUMN])
    THEN
	BEGIN
	LOW_INDEX = .DESCRIP [DSC$B_DIMCT];
	HIGH_INDEX = 1;
	INDEX_INCR = -1;
	END
    ELSE
	BEGIN
	LOW_INDEX = 1;
	HIGH_INDEX = .DESCRIP [DSC$B_DIMCT];
	INDEX_INCR = 1;
	END;

!+
! If this is a decimal array, the length is the number of 4 bit digits
! (not including the sign).  Convert this to the number of bytes.
! Decimal virtual arrays and record virtual arrays are stored with
! a length that is a multiple of 2 - check for that here also.
!-
    CASE .DESCRIP [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	SET
	
	[DSC$K_DTYPE_P]:		! decimal
	    BEGIN
	    LENGTH = (.DESCRIP [DSC$W_LENGTH]/2) + 1;
	    IF .DESCRIP [DSC$B_CLASS] EQL DSC$K_CLASS_BFA
	    THEN
		BEGIN

		LENGTH = ( INCR I FROM 1 TO 9 BY 1 DO
			       IF .LENGTH LSS (1 ^ .I)
			       THEN EXITLOOP (1 ^ .I) );
		END;
	    END;

	[INRANGE,OUTRANGE]:
	    LENGTH = .DESCRIP [DSC$W_LENGTH];
	TES;

!+
! The number of elements in the array is stored in element 0.
!-

    IF .DESCRIP [DSC$B_CLASS] EQL DSC$K_CLASS_BFA
    THEN
	BEGIN
	IF .DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
	THEN
	    BEGIN
	    LOCAL
		TEMP_DSC : BLOCK [12, BYTE];
	    TEMP_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_P;
	    TEMP_DSC [DSC$B_CLASS] = DSC$K_CLASS_SD;
	    TEMP_DSC [DSC$W_LENGTH] = .DESCRIP [DSC$W_LENGTH];
	    TEMP_DSC [DSC$A_POINTER] = TEMP_LEN [0];
	    TEMP_DSC [DSC$B_SCALE] = .DESCRIP [DSC$B_SCALE];
	    BAS$$VA_FETCH (.DESCRIP, 0, TEMP_DSC)
	    END
	ELSE
	    BAS$$VA_FETCH (.DESCRIP, 0, TEMP_LEN)
	END
    ELSE
	CASE .DESCRIP [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	SET
	    [DSC$K_DTYPE_B, DSC$K_DTYPE_W, DSC$K_DTYPE_L, DSC$K_DTYPE_F] :
		TEMP_LEN = .(.DESCRIP [DSC$A_POINTER]);

	    [DSC$K_DTYPE_D, DSC$K_DTYPE_G] :
		BEGIN

		TEMP_LEN[0] = .(.DESCRIP [DSC$A_POINTER]);
		TEMP_LEN[1] = .(.DESCRIP [DSC$A_POINTER] + 4);

		END;

	    [DSC$K_DTYPE_H] :
		BEGIN

		TEMP_LEN[0] = .(.DESCRIP [DSC$A_POINTER]);
		TEMP_LEN[1] = .(.DESCRIP [DSC$A_POINTER] + 4);
		TEMP_LEN[2] = .(.DESCRIP [DSC$A_POINTER] + 8);
		TEMP_LEN[3] = .(.DESCRIP [DSC$A_POINTER] + 12);

		END;

	    [DSC$K_DTYPE_P] :
		CH$MOVE ((.DESCRIP [DSC$W_LENGTH]/2) + 1, 
			 .DESCRIP [DSC$A_POINTER], TEMP_LEN);

	    [DSC$K_DTYPE_DSC] :
		;
	
	    [INRANGE,OUTRANGE] :
		BAS$$STOP (BAS$K_DATTYPERR);
	TES;

    CASE .DESCRIP [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
    SET
	[DSC$K_DTYPE_B] :
	    ARRAY_LEN = .BLOCK [TEMP_LEN, 0, 0, %BPUNIT, 1];

	[DSC$K_DTYPE_W] :
	    ARRAY_LEN = .BLOCK [TEMP_LEN, 0, 0, %BPVAL/2, 1];

	[DSC$K_DTYPE_L] :
	    ARRAY_LEN = .TEMP_LEN;

	[DSC$K_DTYPE_F] :
	    CVTFL (TEMP_LEN, ARRAY_LEN);

	[DSC$K_DTYPE_D] :
	    BEGIN
	    !+
	    ! A double value must be de-scaled before it can be used.
	    !-
	    LOCAL
		TEMP_DBL : VECTOR [2];
	    REGISTER
		R0 = 0,
		R1 = 1;
	    BAS$$COPY_D_R1 (TEMP_LEN, TEMP_DBL [0]);
	    BAS$DSCALE_D_R1 (.TEMP_DBL [0], .TEMP_DBL [1]);
	    TEMP_DBL [0] = .R0;
	    TEMP_DBL [1] = .R1;
	    CVTDL (TEMP_DBL [0], ARRAY_LEN);
	    END;

	[DSC$K_DTYPE_G] :
	    CVTGL (TEMP_LEN, ARRAY_LEN);

	[DSC$K_DTYPE_H] :
	    CVTHL (TEMP_LEN, ARRAY_LEN);

	[DSC$K_DTYPE_P] :
	    BEGIN
		LOCAL
		    TEMP_P : VECTOR [6,BYTE];
	    ASHP (DESCRIP [DSC$B_SCALE], DESCRIP [DSC$W_LENGTH],
		TEMP_LEN [0], %REF(0), %REF(10), TEMP_P [0]);
	    CVTPL (%REF(10), TEMP_P, ARRAY_LEN);
	    END;

	[DSC$K_DTYPE_DSC] :			! dynamically mapped array
	    BEGIN
	    LOCAL
		ELEM_DESC : REF BLOCK [8,BYTE];
	    
	    IF .DESCRIP [DSC$B_CLASS] EQL DSC$K_CLASS_BFA
	    THEN
		BAS$$STOP (BAS$K_NOTIMP);	! no virtual dyn mapped arrays

	    ELEM_DESC = .DESCRIP [DSC$A_POINTER];
	    CASE .ELEM_DESC [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	    SET
		[DSC$K_DTYPE_B] :
		    ARRAY_LEN = 
			.BLOCK [.ELEM_DESC [DSC$A_POINTER], 0, 0, %BPUNIT, 1];

		[DSC$K_DTYPE_W] :
		    ARRAY_LEN = 
			.BLOCK [.ELEM_DESC [DSC$A_POINTER], 0, 0, %BPVAL/2, 1]; 

		[DSC$K_DTYPE_L] :
		    ARRAY_LEN = .(.ELEM_DESC [DSC$A_POINTER]);
		
		[DSC$K_DTYPE_F] : 
		    CVTFL (.ELEM_DESC [DSC$A_POINTER], ARRAY_LEN);

		[DSC$K_DTYPE_D] :
		    BEGIN
		    LOCAL
			TEMP_DBL : VECTOR [2];
		    REGISTER
			R0 = 0,
			R1 = 1;
		    BAS$$COPY_D_R1 (.ELEM_DESC [DSC$A_POINTER], TEMP_DBL [0]);
		    BAS$DSCALE_D_R1 (.TEMP_DBL [0], .TEMP_DBL [1]);
		    TEMP_DBL [0] = .R0;
		    TEMP_DBL [1] = .R1;
		    CVTDL (TEMP_DBL [0], ARRAY_LEN);
		    END;

		[DSC$K_DTYPE_G] :
		    CVTGL  (.ELEM_DESC [DSC$A_POINTER], ARRAY_LEN);

		[DSC$K_DTYPE_H] :
		    CVTHL (.ELEM_DESC [DSC$A_POINTER], ARRAY_LEN);
	
		[DSC$K_DTYPE_P] :
		    BEGIN
			LOCAL
			    TEMP_P : VECTOR [6,BYTE];
		    ASHP (ELEM_DESC [DSC$B_SCALE], ELEM_DESC [DSC$W_LENGTH],
			.ELEM_DESC [DSC$A_POINTER], %REF(0), %REF(10), 
			TEMP_P [0]);
		    CVTPL (%REF(10), TEMP_P, ARRAY_LEN);
		    END;

		[INRANGE, OUTRANGE] :
		    BAS$$STOP (BAS$K_DATTYPERR);

		TES;
		END;

	[INRANGE, OUTRANGE] :
	    BAS$$STOP (BAS$K_DATTYPERR);
    TES;

!+
! Now that we know how long the array is, we can allocate a temporary string
! to CHANGE the array into.
!-
    TEMP_STR_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    TEMP_STR_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    TEMP_STR_DESC [DSC$W_LENGTH] = 0;
    TEMP_STR_DESC [DSC$A_POINTER] = 0;
    STR_STATUS = STR$GET1_DX (ARRAY_LEN, TEMP_STR_DESC);
    IF NOT .STR_STATUS
    THEN
	BAS$$STOP (.STR_STATUS);
    STR_BUF = .TEMP_STR_DESC [DSC$A_POINTER];

!+
! Compute linear index.  Note that all indicies will be zero except for one,
! since CHANGE operates only on row 0.  This code should accomodate FORTRAN
! arrays.
!-


    INCR INDEX FROM 1 TO .ARRAY_LEN DO
    BEGIN
	INDEX_NUMBER = .LOW_INDEX - .INDEX_INCR;
	INDEX_VALUE = .INDEX;
	VALUE_LOCATION = 0;

	WHILE ((INDEX_NUMBER = .INDEX_NUMBER + .INDEX_INCR) NEQ	(.HIGH_INDEX + .INDEX_INCR)) DO
	BEGIN
	IF ((.INDEX_VALUE LSS .BOUNDS [(.INDEX_NUMBER - 1)*2])
	    OR (.INDEX_VALUE GTR .BOUNDS [((.INDEX_NUMBER - 1)*2) + 1]))
	THEN
	    BEGIN
	    STR$FREE1_DX (TEMP_STR_DESC);
	    BAS$$STOP (BAS$K_SUBOUTRAN);
	    END;
        VALUE_LOCATION = (.VALUE_LOCATION*.MULTIPLIERS [.INDEX_NUMBER - 1]) + .INDEX_VALUE;
	INDEX_VALUE = 0;			! all indicies except 1st are zero
	END;

    VALUE_LOCATION = (.VALUE_LOCATION*.LENGTH) + .DESCRIP [DSC$A_A0];
   
!+
! Build a descriptor pointing to the value cell in the array.  If this
! is an array of descriptors, the descriptor is copied, otherwise it
! is constructed.
!-

    IF (.DESCRIP [DSC$B_DTYPE] EQLU DSC$K_DTYPE_DSC)
    THEN
	BEGIN

	MAP
	    VALUE_LOCATION : REF BLOCK [8, BYTE];

	VALUE_DESCR [DSC$W_LENGTH] = .VALUE_LOCATION [DSC$W_LENGTH];
	VALUE_DESCR [DSC$B_DTYPE] = .VALUE_LOCATION [DSC$B_DTYPE];
	VALUE_DESCR [DSC$B_CLASS] = (IF (.VALUE_LOCATION [DSC$B_CLASS] EQLU DSC$K_CLASS_D) THEN DSC$K_CLASS_S
	    ELSE .VALUE_LOCATION [DSC$B_CLASS]);
	VALUE_DESCR [DSC$A_POINTER] = .VALUE_LOCATION [DSC$A_POINTER];
	IF .VALUE_DESCR [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
	THEN
	    BEGIN
	    MAP
		VALUE_LOCATION : REF BLOCK [12,BYTE];
	    VALUE_DESCR [DSC$B_SCALE] = .VALUE_LOCATION [DSC$B_SCALE];
	    END;
	END
    ELSE
	BEGIN
	VALUE_DESCR [DSC$W_LENGTH] = .DESCRIP [DSC$W_LENGTH];
	VALUE_DESCR [DSC$B_DTYPE] = .DESCRIP [DSC$B_DTYPE];
	VALUE_DESCR [DSC$B_CLASS] = DSC$K_CLASS_S;
	VALUE_DESCR [DSC$A_POINTER] = .VALUE_LOCATION;
	IF .VALUE_DESCR [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
	THEN
	    BEGIN
	    MAP
		DESCRIP : REF BLOCK [12,BYTE];
	    VALUE_DESCR [DSC$B_SCALE] = .DESCRIP [DSC$B_SCALE];	
	    END;
	END;

!+
! Special handling if this is a virtual array.  
!-

    IF (.DESCRIP [DSC$B_CLASS] EQLU DSC$K_CLASS_BFA)
    THEN
	BEGIN

	IF (.DESCRIP [DSC$B_DTYPE] EQLU DSC$K_DTYPE_DSC) 
	THEN 
	    BEGIN
	    STR$FREE1_DX (TEMP_STR_DESC);
	    BAS$$STOP (BAS$K_NOTIMP);
	    END;

	IF .DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
	THEN
	    BEGIN
	    LOCAL
		TEMP_DSC : BLOCK [12, BYTE];
	    TEMP_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_P;
	    TEMP_DSC [DSC$B_CLASS] = DSC$K_CLASS_SD;
	    TEMP_DSC [DSC$W_LENGTH] = .DESCRIP [DSC$W_LENGTH];
	    TEMP_DSC [DSC$A_POINTER] = TEMP_BUF [0];
	    TEMP_DSC [DSC$B_SCALE] = .DESCRIP [DSC$B_SCALE];
	    BAS$$VA_FETCH (.DESCRIP, .VALUE_LOCATION, TEMP_DSC)
	    END
	ELSE
	    BAS$$VA_FETCH (.DESCRIP, .VALUE_LOCATION, TEMP_BUF [0]);

	VALUE_DESCR [DSC$A_POINTER] = TEMP_BUF [0];

	END
    ELSE

	IF (.DESCRIP [DSC$B_CLASS] NEQU DSC$K_CLASS_A) 
	THEN 
	    BEGIN
	    STR$FREE1_DX (TEMP_STR_DESC);
	    BAS$$STOP (BAS$K_NOTIMP);
	    END;

!+
! Data is converted to longword (to use BUILTINs) and then to byte.
!-

	CASE .VALUE_DESCR [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	    SET

	    [DSC$K_DTYPE_B, DSC$K_DTYPE_W, DSC$K_DTYPE_L] :
		STR_BUF [.INDEX - 1] = .(.VALUE_DESCR [DSC$A_POINTER]); 

	    [DSC$K_DTYPE_F] : 			! 32-bit floating point
		BEGIN
		CVTFL (.VALUE_DESCR [DSC$A_POINTER], STR_BUF_LONG);
		STR_BUF [.INDEX - 1] = .STR_BUF_LONG;
		END;

	    [DSC$K_DTYPE_D] : 			! 64-bit double floating
		BEGIN
		!+
		! Double values may need to be de-scaled.
		!-
		LOCAL
		    TEMP_DBL : VECTOR [2];
		REGISTER
		    R0 = 0,
		    R1 = 1;
		BAS$$COPY_D_R1 (.VALUE_DESCR [DSC$A_POINTER], TEMP_DBL [0]);
    		BAS$DSCALE_D_R1 (.TEMP_DBL [0], .TEMP_DBL [1]);
		TEMP_DBL [0] = .R0;
		TEMP_DBL [1] = .R1;
		CVTDL (TEMP_DBL [0], STR_BUF_LONG);
		STR_BUF [.INDEX - 1] = .STR_BUF_LONG;
		END;

	    [DSC$K_DTYPE_G] :			! G floating
		BEGIN
		CVTGL (.VALUE_DESCR [DSC$A_POINTER], STR_BUF_LONG);
		STR_BUF [.INDEX - 1] = .STR_BUF_LONG;
		END;

	    [DSC$K_DTYPE_H] :			! H floating
		BEGIN
		CVTHL (.VALUE_DESCR [DSC$A_POINTER], STR_BUF_LONG);
		STR_BUF [.INDEX - 1] = .STR_BUF_LONG;
		END;

	    [DSC$K_DTYPE_P] :			! decimal
		BEGIN
		LOCAL
		    TEMP_P : VECTOR [6,BYTE];
		ASHP (VALUE_DESCR [DSC$B_SCALE], VALUE_DESCR [DSC$W_LENGTH],
		    .VALUE_DESCR [DSC$A_POINTER], %REF(0), %REF(10),
		    TEMP_P);
		CVTPL (%REF(10), TEMP_P, STR_BUF_LONG);
		STR_BUF [.INDEX - 1] = .STR_BUF_LONG;
		END;

	    [DSC$K_DTYPE_DSC] :			! dynamically mapped array
	    	BEGIN

	    	IF .DESCRIP [DSC$B_CLASS] EQL DSC$K_CLASS_BFA
	    	THEN
		    BEGIN
		    STR$FREE1_DX (TEMP_STR_DESC);
		    BAS$$STOP (BAS$K_NOTIMP);	! no virtual dyn mapped arrays
		    END;

	    	CASE .VALUE_DESCR [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	    	SET
		    [DSC$K_DTYPE_B] :
		    	STR_BUF_LONG = 
			    .BLOCK [.VALUE_DESCR [DSC$A_POINTER], 0, 0, %BPUNIT, 1];

		    [DSC$K_DTYPE_W] :
		    	STR_BUF_LONG = 
			    .BLOCK [.VALUE_DESCR [DSC$A_POINTER], 0, 0, %BPVAL/2, 1]; 

		    [DSC$K_DTYPE_L] :
		    	STR_BUF_LONG = .(.VALUE_DESCR [DSC$A_POINTER]);
		
		    [DSC$K_DTYPE_F] : 
		    	CVTFL (.VALUE_DESCR [DSC$A_POINTER], STR_BUF_LONG);

		    [DSC$K_DTYPE_D] :
		    	BEGIN
		    	LOCAL
			    TEMP_DBL : VECTOR [2];
		    	REGISTER
			    R0 = 0,
			    R1 = 1;
		    	BAS$$COPY_D_R1 (.VALUE_DESCR [DSC$A_POINTER], TEMP_DBL [0]);
		    	BAS$DSCALE_D_R1 (.TEMP_DBL [0], .TEMP_DBL [1]);
		    	TEMP_DBL [0] = .R0;
		    	TEMP_DBL [1] = .R1;
		    	CVTDL (TEMP_DBL [0], STR_BUF_LONG);
		    	END;

		    [DSC$K_DTYPE_G] :
		    	CVTGL  (.VALUE_DESCR [DSC$A_POINTER], STR_BUF_LONG);

		    [DSC$K_DTYPE_H] :
		    	CVTHL (.VALUE_DESCR [DSC$A_POINTER], STR_BUF_LONG);
	
		    [DSC$K_DTYPE_P] :			! decimal
			BEGIN
			LOCAL
			    TEMP_P : VECTOR [6,BYTE];
			ASHP (VALUE_DESCR [DSC$B_SCALE], VALUE_DESCR [DSC$W_LENGTH],
			    .VALUE_DESCR [DSC$A_POINTER], %REF(0), %REF(10),
			    TEMP_P);
			CVTPL (%REF(10), TEMP_P, STR_BUF_LONG);
			STR_BUF [.INDEX - 1] = .STR_BUF_LONG;
			END;

		    [INRANGE, OUTRANGE] :
		        BEGIN
	    		STR$FREE1_DX (TEMP_STR_DESC);
		    	BAS$$STOP (BAS$K_DATTYPERR);
			END;

		    TES;
		    END;

	    [INRANGE, OUTRANGE] :
	        BEGIN
	        STR$FREE1_DX (TEMP_STR_DESC);
		BAS$$STOP (BAS$K_DATTYPERR);
		END;

	    TES;

    END;					! end of INCR loop

!+
! copy string back to caller
!-
    STR$COPY_DX (.STR_DESC, TEMP_STR_DESC);
!+
! free temporary string
!-
    STR$FREE1_DX (TEMP_STR_DESC);

    END;					! end of FETCH 


 ROUTINE STORE (					! Store string elements into array
	STR_DESC,				! Where to find the string
	DESCRIP 				! The array to store it in
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Store string elements into an array.  The array will be numeric.
!
! FORMAL PARAMETERS:
!
!	STR_DESC.rx.dx	The place from which to get the string values
!	DESCRIP.rx.da	The descriptor of the array or virtual array
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!
!--

    BEGIN

    GLOBAL REGISTER
	BSF$A_MAJOR_STG = 11,
	BSF$A_MINOR_STG = 10,
	BSF$A_TEMP_STG = 9;

    BUILTIN
	ASHP,
	CVTLF,
	CVTLD,
	CVTLG,
	CVTLH,
	CVTLP;

    LOCAL
	INDEX_VALUE,
	VALUE_LOCATION,
	MULTIPLIERS : REF VECTOR,
	BOUNDS : REF VECTOR,
	LOW_INDEX,
	HIGH_INDEX,
	INDEX_INCR,
	INDEX_NUMBER,
	INDEX_ERROR : INITIAL (0),
	VALUE_DESCR : BLOCK [12, BYTE],
	LENGTH,
	STR_BUF : REF VECTOR [255,BYTE],
	STR_BUF_LONG,
	TEMP_BUF : VECTOR [4];

    LABEL
	INCR_LOOP;

    MAP
	DESCRIP : REF BLOCK [8, BYTE],
	STR_DESC : REF BLOCK [8, BYTE];

    STR_BUF = .STR_DESC [DSC$A_POINTER];

!+
! The coefficients and bounds must be present.
!-

    IF ( NOT (.DESCRIP [DSC$V_FL_COEFF] AND .DESCRIP [DSC$V_FL_BOUNDS])) THEN BAS$$STOP (BAS$K_ARGDONMAT);

    MULTIPLIERS = DESCRIP [DSC$L_M1];
    BOUNDS = DESCRIP [DSC$L_M1] + (%UPVAL*.DESCRIP [DSC$B_DIMCT]);
!+
! Compute the lower and upper index numbers based on how the array
! is stored.
!-

    IF (.DESCRIP [DSC$V_FL_COLUMN])
    THEN
	BEGIN
	LOW_INDEX = .DESCRIP [DSC$B_DIMCT];
	HIGH_INDEX = 1;
	INDEX_INCR = -1;
	END
    ELSE
	BEGIN
	LOW_INDEX = 1;
	HIGH_INDEX = .DESCRIP [DSC$B_DIMCT];
	INDEX_INCR = 1;
	END;

!+
! If this is a decimal array, the length in the descriptor is the number of
! 4 bit digits (not including the sign).  Convert this length to the number
! of bytes.
! Also, if this is a virtual array, the size must be a multiple of 2.  This
! is true for arrays of records as well.
!-
    CASE .DESCRIP [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	SET

	[DSC$K_DTYPE_P] :		! decimal
	    BEGIN
	    LENGTH = (.DESCRIP [DSC$W_LENGTH]/2) + 1;
	    IF .DESCRIP [DSC$B_CLASS] EQL DSC$K_CLASS_BFA
	    THEN
		BEGIN

		LENGTH = ( INCR I FROM 1 TO 9 BY 1 DO
			       IF .LENGTH LSS (1 ^ .I)
			       THEN EXITLOOP (1 ^ .I) );
		END;
	    END;

	[INRANGE, OUTRANGE] :
	    LENGTH = .DESCRIP [DSC$W_LENGTH];
	TES;
	
!+
! Calculate the linear index.  CHANGE operates only on row 0, so all indicies
! except one will be zero.  This code should accomodate FORTRAN arrays.
!-

    INCR INDEX FROM 1 TO .STR_DESC [DSC$W_LENGTH] DO
    INCR_LOOP:
    BEGIN    
	    STR_BUF_LONG = .STR_BUF [.INDEX - 1];
	    INDEX_NUMBER = .LOW_INDEX - .INDEX_INCR;
    	    INDEX_VALUE = .INDEX;
	    VALUE_LOCATION = 0;

	    WHILE ((INDEX_NUMBER = .INDEX_NUMBER + .INDEX_INCR) NEQ (.HIGH_INDEX + .INDEX_INCR)) DO
	    BEGIN
	    IF ((.INDEX_VALUE LSS .BOUNDS [(.INDEX_NUMBER - 1)*2])	!
	        OR (.INDEX_VALUE GTR .BOUNDS [((.INDEX_NUMBER - 1)*2) + 1]))
	    THEN
	 	BEGIN
		
		INDEX_ERROR = .INDEX;
		LEAVE INCR_LOOP;

		END;

	    VALUE_LOCATION = (.VALUE_LOCATION*.MULTIPLIERS [.INDEX_NUMBER - 1]) + .INDEX_VALUE;
	    INDEX_VALUE = 0;				! all subsequent indicies zero
	    END;

    	VALUE_LOCATION = (.VALUE_LOCATION*.LENGTH) + .DESCRIP [DSC$A_A0];
!+
! Build a descriptor pointing to the value cell in the array.  If this
! is an array of descriptors, the descriptor is copied, otherwise it
! is constructed.
!-

    IF (.DESCRIP [DSC$B_DTYPE] EQLU DSC$K_DTYPE_DSC)
    THEN
	BEGIN

	MAP
	    VALUE_LOCATION : REF BLOCK [8, BYTE];

	VALUE_DESCR [DSC$W_LENGTH] = .VALUE_LOCATION [DSC$W_LENGTH];
	VALUE_DESCR [DSC$B_DTYPE] = .VALUE_LOCATION [DSC$B_DTYPE];
	VALUE_DESCR [DSC$B_CLASS] = (IF (.VALUE_LOCATION [DSC$B_CLASS] EQLU DSC$K_CLASS_D) THEN DSC$K_CLASS_S
	    ELSE .VALUE_LOCATION [DSC$B_CLASS]);
	VALUE_DESCR [DSC$A_POINTER] = .VALUE_LOCATION [DSC$A_POINTER];
	IF .VALUE_DESCR [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
	THEN
	    BEGIN
	    MAP
		VALUE_LOCATION : REF BLOCK [12,BYTE];
	    VALUE_DESCR [DSC$B_SCALE] = .VALUE_LOCATION [DSC$B_SCALE];
	    END;
	END
    ELSE
	BEGIN
	VALUE_DESCR [DSC$W_LENGTH] = .DESCRIP [DSC$W_LENGTH];
	VALUE_DESCR [DSC$B_DTYPE] = .DESCRIP [DSC$B_DTYPE];
	VALUE_DESCR [DSC$B_CLASS] = DSC$K_CLASS_S;
	VALUE_DESCR [DSC$A_POINTER] = .VALUE_LOCATION;
	IF (.VALUE_DESCR [DSC$B_DTYPE] EQL DSC$K_DTYPE_P)
	THEN
	    BEGIN
	    MAP
		DESCRIP : REF BLOCK [12,BYTE];
	    VALUE_DESCR [DSC$B_SCALE] = .DESCRIP [DSC$B_SCALE];
	    END;
	END;

    IF (.DESCRIP [DSC$B_CLASS] EQL DSC$K_CLASS_BFA)
    THEN
	VALUE_DESCR [DSC$A_POINTER] = TEMP_BUF [0];

!+
! Copy the string element to the array.  The longword element must stored as
! the data type of the array.  (Note that longword is used because the 
! instructions are BUILTINs.)
!-

	CASE .DESCRIP [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	    SET

	    [DSC$K_DTYPE_B] :
		BLOCK [.VALUE_DESCR [DSC$A_POINTER], 0, 0, %BPUNIT, 1]
		= .STR_BUF_LONG;

	    [DSC$K_DTYPE_W] :
		BLOCK [.VALUE_DESCR [DSC$A_POINTER], 0, 0, %BPVAL/2, 1]
		= .STR_BUF_LONG;

	    [DSC$K_DTYPE_L] :
		.VALUE_DESCR [DSC$A_POINTER] = .STR_BUF_LONG;

	    [DSC$K_DTYPE_F] : 			! 32-bit floating point
		CVTLF (STR_BUF_LONG, .VALUE_DESCR [DSC$A_POINTER]);

	    [DSC$K_DTYPE_D] : 			! 64-bit double floating
		BEGIN
		!+
		! Apply scale to double value.
		!-
		LOCAL
		    TEMP_DBL : VECTOR [2];
		REGISTER
		    R0 = 0,
		    R1 = 1;
		CVTLD (STR_BUF_LONG, TEMP_DBL);
		BAS$SCALE_D_R1 (.TEMP_DBL [0], .TEMP_DBL [1]);
		TEMP_DBL [0] = .R0;
		TEMP_DBL [1] = .R1;
		BAS$$COPY_D_R1 (TEMP_DBL [0], .VALUE_DESCR [DSC$A_POINTER]);
		END;	

	    [DSC$K_DTYPE_G] :			! G floating
		CVTLG (STR_BUF_LONG, .VALUE_DESCR [DSC$A_POINTER]);

	    [DSC$K_DTYPE_H] :			! H floating
		CVTLH (STR_BUF_LONG, .VALUE_DESCR [DSC$A_POINTER]);

	    [DSC$K_DTYPE_P] : 			! decimal
		BEGIN
		LOCAL
		    TEMP_P : VECTOR [6, BYTE];

		CVTLP (STR_BUF_LONG, %REF(10), TEMP_P);
		ASHP (%REF(-.VALUE_DESCR [DSC$B_SCALE]), %REF(10),
		    TEMP_P, %REF(0), VALUE_DESCR [DSC$W_LENGTH],
		    .VALUE_DESCR [DSC$A_POINTER]);
		END;

	    [DSC$K_DTYPE_DSC] :
		BEGIN

		IF .DESCRIP [DSC$B_CLASS] EQL DSC$K_CLASS_BFA
	 	THEN
		    BAS$$STOP (BAS$K_NOTIMP);	! no virtual dyn mapped arrays

		CASE .VALUE_DESCR [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
		SET
	    	    [DSC$K_DTYPE_B] :
		    	BLOCK [.VALUE_DESCR [DSC$A_POINTER], 0, 0, %BPUNIT, 1]
		    	= .STR_BUF_LONG;

	    	    [DSC$K_DTYPE_W] :
			BLOCK [.VALUE_DESCR [DSC$A_POINTER], 0, 0, %BPVAL/2, 1]
			= .STR_BUF_LONG;

	    	    [DSC$K_DTYPE_L] :
			.VALUE_DESCR [DSC$A_POINTER] = .STR_BUF_LONG;

	    	    [DSC$K_DTYPE_F] : 			! 32-bit floating point
			CVTLF (STR_BUF_LONG, .VALUE_DESCR [DSC$A_POINTER]);

	    	    [DSC$K_DTYPE_D] : 			! 64-bit double floating
			BEGIN
			!+
			! Apply scale to double value.
			!-
			LOCAL
		    	    TEMP_DBL : VECTOR [2];
			REGISTER
		    	    R0 = 0,
		    	    R1 = 1;
			CVTLD (STR_BUF_LONG, TEMP_DBL);
			BAS$SCALE_D_R1 (.TEMP_DBL [0], .TEMP_DBL [1]);
			TEMP_DBL [0] = .R0;
			TEMP_DBL [1] = .R1;
			BAS$$COPY_D_R1 (TEMP_DBL [0], .VALUE_DESCR [DSC$A_POINTER]);
			END;	

	    	    [DSC$K_DTYPE_G] :			! G floating
			CVTLG (STR_BUF_LONG, .VALUE_DESCR [DSC$A_POINTER]);

	    	    [DSC$K_DTYPE_H] :			! H floating
			CVTLH (STR_BUF_LONG, .VALUE_DESCR [DSC$A_POINTER]);

	    	    [DSC$K_DTYPE_P] : 			! decimal
			BEGIN
			LOCAL
		    	    TEMP_P : VECTOR [6, BYTE];

			CVTLP (STR_BUF_LONG, %REF(10), TEMP_P);
			ASHP (%REF(-.VALUE_DESCR [DSC$B_SCALE]), %REF(10),
		    	    TEMP_P, %REF(0), VALUE_DESCR [DSC$W_LENGTH],
		    	    .VALUE_DESCR [DSC$A_POINTER]);
			END;
	
		    [INRANGE, OUTRANGE] :
			BAS$$STOP (BAS$K_DATTYPERR);

	    	    TES;
	     	    END;

	    [INRANGE, OUTRANGE] :
		BAS$$STOP (BAS$K_DATTYPERR);

	    TES;

    IF (.DESCRIP [DSC$B_CLASS] EQL DSC$K_CLASS_BFA)
    THEN
	BEGIN
	
	IF (.DESCRIP [DSC$B_DTYPE] EQLU DSC$K_DTYPE_DSC) THEN BAS$$STOP (BAS$K_NOTIMP);

	IF .DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
	THEN
	    BEGIN
	    LOCAL
		TEMP_DSC : BLOCK [12, BYTE];
	    TEMP_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_P;
	    TEMP_DSC [DSC$B_CLASS] = DSC$K_CLASS_SD;
	    TEMP_DSC [DSC$W_LENGTH] = .DESCRIP [DSC$W_LENGTH];
	    TEMP_DSC [DSC$A_POINTER] = TEMP_BUF [0];
	    TEMP_DSC [DSC$B_SCALE] = .DESCRIP [DSC$B_SCALE];
	    BAS$$VA_STORE (.DESCRIP, .VALUE_LOCATION, TEMP_DSC)
	    END
	ELSE
	    BAS$$VA_STORE (.DESCRIP, .VALUE_LOCATION, TEMP_BUF [0]);
	
	END;

    END;					! end of INCR loop

!+
! Update the number of elements in element 0 of the array.
!-

    BEGIN
    LOCAL
	STR_LEN_LONG,
	PTR;

    STR_LEN_LONG = .STR_DESC [DSC$W_LENGTH];

    IF (.DESCRIP [DSC$B_CLASS] EQL DSC$K_CLASS_BFA)
    THEN
   	PTR = TEMP_BUF
    ELSE
	PTR = .DESCRIP [DSC$A_POINTER];

    CASE .DESCRIP [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	SET

	[DSC$K_DTYPE_B] :
	    BEGIN

	    IF .STR_LEN_LONG GTR 255
	    THEN
		BAS$$STOP(BAS$K_INTERR);

	    BLOCK [.PTR, 0, 0, %BPUNIT, 1] = .STR_DESC [DSC$W_LENGTH];

	    END;
	[DSC$K_DTYPE_W] :
	    BLOCK [.PTR, 0, 0, %BPVAL/2, 1] = .STR_DESC [DSC$W_LENGTH];

	[DSC$K_DTYPE_L] :
	    .PTR = .STR_DESC [DSC$W_LENGTH];

	[DSC$K_DTYPE_F] :
	    CVTLF (STR_LEN_LONG, .PTR);

	[DSC$K_DTYPE_D] :
	    BEGIN
	    !+
	    ! Apply scale even to this.
	    !-
	    LOCAL
		TEMP_DBL : VECTOR [2];
	    REGISTER
		R0 = 0,
		R1 = 1;
	    CVTLD (STR_LEN_LONG, TEMP_DBL);
	    BAS$SCALE_D_R1 (.TEMP_DBL [0], .TEMP_DBL [1]);
	    TEMP_DBL [0] = .R0;
	    TEMP_DBL [1] = .R1;
	    BAS$$COPY_D_R1 (TEMP_DBL [0], .PTR);
	    END;

	[DSC$K_DTYPE_G] :
	    CVTLG (STR_LEN_LONG, .PTR);

	[DSC$K_DTYPE_H] :
	    CVTLH (STR_LEN_LONG, .PTR);

	[DSC$K_DTYPE_P] :
	    BEGIN
	    LOCAL
		TEMP_P : VECTOR [6,BYTE];
	    
	    CVTLP (STR_LEN_LONG, %REF(10), TEMP_P);
	    ASHP (%REF(-.VALUE_DESCR [DSC$B_SCALE]), %REF(10), TEMP_P,
		%REF(0), VALUE_DESCR [DSC$W_LENGTH], .PTR);
	    END;

    	[DSC$K_DTYPE_DSC] :
	    BEGIN
	    LOCAL
		ELEM_DESC : REF BLOCK [8,BYTE];

	    IF .DESCRIP [DSC$B_CLASS] EQL DSC$K_CLASS_BFA
	    THEN
	    	BAS$$STOP (BAS$K_NOTIMP);	! no virtual dyn mapped arrays

	    ELEM_DESC = .DESCRIP [DSC$A_POINTER];
	    CASE .ELEM_DESC [DSC$B_DTYPE] FROM DSC$K_DTYPE_B TO DSC$K_DTYPE_H OF
	    SET
	        [DSC$K_DTYPE_B] :
		    BEGIN

		    IF .STR_LEN_LONG GTR 255
		    THEN
		    	BAS$$STOP(BAS$K_INTERR);

	    	    BLOCK [.ELEM_DESC [DSC$A_POINTER], 0, 0, %BPUNIT, 1]
		    	= .STR_DESC [DSC$W_LENGTH];

		    END;
	    	[DSC$K_DTYPE_W] :
	            BLOCK [.ELEM_DESC [DSC$A_POINTER], 0, 0, %BPVAL/2, 1]
			= .STR_DESC [DSC$W_LENGTH];

	    	[DSC$K_DTYPE_L] :
		    .ELEM_DESC [DSC$A_POINTER] = .STR_DESC [DSC$W_LENGTH];

	    	[DSC$K_DTYPE_F] : 			! 32-bit floating point
		    CVTLF (STR_LEN_LONG, .ELEM_DESC [DSC$A_POINTER]);

	    	[DSC$K_DTYPE_D] : 			! 64-bit double floating
		    BEGIN
		    !+
		    ! Apply scale to double value.
		    !-
		    LOCAL
		        TEMP_DBL : VECTOR [2];
		    REGISTER
		        R0 = 0,
		        R1 = 1;
		    CVTLD (STR_LEN_LONG, TEMP_DBL);
		    BAS$SCALE_D_R1 (.TEMP_DBL [0], .TEMP_DBL [1]);
		    TEMP_DBL [0] = .R0;
		    TEMP_DBL [1] = .R1;
		    BAS$$COPY_D_R1 (TEMP_DBL [0], .ELEM_DESC [DSC$A_POINTER]);
		    END;	

	    	[DSC$K_DTYPE_G] :			! G floating
		    CVTLG (STR_LEN_LONG, .ELEM_DESC [DSC$A_POINTER]);

	    	[DSC$K_DTYPE_H] :			! H floating
		    CVTLH (STR_LEN_LONG, .ELEM_DESC [DSC$A_POINTER]);

	    	[DSC$K_DTYPE_P] : 			! decimal
		    BEGIN
		    LOCAL
		        TEMP_P : VECTOR [6, BYTE];

		    CVTLP (STR_LEN_LONG, %REF(10), TEMP_P);
		    ASHP (%REF(-.ELEM_DESC [DSC$B_SCALE]), %REF(10),
		    	    TEMP_P, %REF(0), ELEM_DESC [DSC$W_LENGTH],
		    	    .ELEM_DESC [DSC$A_POINTER]);
		    END;
	
		[INRANGE, OUTRANGE] :
		    BAS$$STOP (BAS$K_DATTYPERR);

	    	TES;
	        END;

	[INRANGE, OUTRANGE] :
	    BAS$$STOP (BAS$K_DATTYPERR);

	TES;

    IF .INDEX_ERROR GTR 0
    THEN
	BAS$$STOP (BAS$K_SUBOUTRAN);

    IF (.DESCRIP [DSC$B_CLASS] EQL DSC$K_CLASS_BFA)
    THEN
	IF .DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
	THEN
	    BEGIN
	    LOCAL
		TEMP_DSC : BLOCK [12, BYTE];
	    TEMP_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_P;
	    TEMP_DSC [DSC$B_CLASS] = DSC$K_CLASS_SD;
	    TEMP_DSC [DSC$W_LENGTH] = .DESCRIP [DSC$W_LENGTH];
	    TEMP_DSC [DSC$A_POINTER] = .PTR;
	    TEMP_DSC [DSC$B_SCALE] = .DESCRIP [DSC$B_SCALE];
	    BAS$$VA_STORE (.DESCRIP, 0, TEMP_DSC)
	    END
	ELSE
	    BAS$$VA_STORE (.DESCRIP, 0, .PTR);

    END;

    END;					! end of STORE
END						! end of module BAS$CHANGE

ELUDOM
