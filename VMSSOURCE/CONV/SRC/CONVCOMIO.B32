%TITLE	'VAX-11 CONVERT'
MODULE	CONV$COMIO	( IDENT='V04-000',
			OPTLEVEL=3
			) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT
!
! Abstract:	Common Convert utilities I/O routines
!
! Contents:
!		READ_PROLOGUE
!		WRITE_PROLOGUE
!		SET_KEY_DESC
!		GET_NEXT_KEY
!		WRITE_KEY_DESC
!		WRITE_AREA_DESC
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Keith B Thompson	Creation date:        	March-1982
!
!
! Modified by:
!
!	V03-002	KBT0479		Keith B. Thompson	29-Jan-1983
!		Make key_desc_buf and key_desc_vbn global
!
!	V03-001	KBT0391		Keith B. Thompson	28-Oct-1982
!		Make things work
!
!****


PSECT
	OWN	= _CONV$OWN	(PIC),
	GLOBAL	= _CONV$GLOBAL	(PIC),
	PLIT	= _CONV$PLIT	(SHARE,PIC),
	CODE	= _CONV$CODE	(SHARE,PIC);

LIBRARY	'SYS$LIBRARY:LIB.L32';
LIBRARY	'SRC$:CONVERT';

DEFINE_ERROR_CODES;

LINKAGE
	CL$READ_BLOCK	= JSB ( REGISTER = 2, REGISTER = 3 ),
	CL$WRITE_BLOCK	= JSB ( REGISTER = 2, REGISTER = 3 ),
	CL$CHECKSUM	= JSB ( REGISTER = 2 );

EXTERNAL ROUTINE
	CONV$$GET_VM		: CL$GET_VM,
	CONV$$RMS_ERROR		: NOVALUE,
	CONV$$RMS_OPEN_ERROR	: NOVALUE,
	CONV$$RMS_READ_ERROR	: NOVALUE;

FORWARD ROUTINE
	CONV$$WRITE_AREA_DESC	: CL$WRITE_AREA_DESC	NOVALUE,
	CONV$$GET_NEXT_KEY	: CL$GET_NEXT_KEY,
	READ_BLOCK		: CL$READ_BLOCK		NOVALUE,
	WRITE_BLOCK		: CL$WRITE_BLOCK	NOVALUE,
	CHECKSUM		: CL$CHECKSUM;

EXTERNAL
	CONV$AB_FLAGS		: BLOCK [ ,BYTE ],
	CONV$AB_OUT_FAB		: $FAB_DECL,
	CONV$AB_OUT_RAB		: $RAB_DECL,
	CONV$AB_OUT_NAM		: $NAM_DECL,
	CONV$AB_OUT_XABSUM	: $XABSUM_DECL,
	CONV$GB_PROL_V1		: BYTE,
	CONV$GB_PROL_V2		: BYTE,
	CONV$GB_PROL_V3		: BYTE,
	CONV$AR_PROLOGUE	: REF BLOCK [ ,BYTE ],
	CONV$AR_AREA_BLOCK	: REF BLOCKVECTOR [ ,AREA$C_BLN,BYTE ];

GLOBAL
	CONV$GL_KEY_DESC_BUF,
	CONV$GL_KEY_DESC_VBN;

OWN
	AREA_BLOCKS;


%SBTTL	'READ_PROLOGUE'
GLOBAL ROUTINE	CONV$$READ_PROLOGUE : CL$READ_PROLOGUE NOVALUE =
!++
!
! Functional Description:
!
!	Reads the prologue blocks of the output file.  The first block (VBN=1)
!	is in the buffer pointed to by conv$ar_prologue. The area descriptors
!	are read into the buffer pointed to by conv$ar_area_block.  If there
!	are more then one key descriptor an extra block is allocated and it
!	is pointed to by key_desc_buf.
!
! Calling Sequence:
!
!	conv$$read_prologue()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	CONV$$GET_VM
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	TOTAL_BLOCKS;

    ! The buffer is allocated thus:
    !
    !				-------------------------
    !	conv$ar_prologue :	|			|
    !				|	512 Bytes	|
    !				|			|
    !				|-----------------------|
    !	conv$gl_key_desc_buf :	|			|
    !				|	512 Bytes	|
    !				|			|
    !				|-----------------------|
    !	conv$ar_area_block :	|			|
    !				|	512*No. of	|
    !				|-     Area Blocks     -|
    !				|	   .		|
    !				|	   .		|
    !				-------------------------
    !
    !
    ! Figure out the number of blocks for the prologue area desc.
    !
    AREA_BLOCKS = ( ( .CONV$AB_OUT_XABSUM [ XAB$B_NOA ] - 1 ) / 8 ) + 1;

    ! The total blocks is area blocks + prologue block + key desc buffer
    !
    TOTAL_BLOCKS = .AREA_BLOCKS + 1 + 1;

    ! Get the address space.
    !
    CONV$AR_PROLOGUE = CONV$$GET_VM( .TOTAL_BLOCKS * BLOCK_SIZE );

    ! The key block points just after the prologue block
    !
    CONV$GL_KEY_DESC_BUF = .CONV$AR_PROLOGUE + BLOCK_SIZE;

    ! The area descriptors is after everything
    !
    CONV$AR_AREA_BLOCK = .CONV$GL_KEY_DESC_BUF + BLOCK_SIZE;

    ! Read in the prologue block
    !
    READ_BLOCK( .CONV$AR_PROLOGUE,1 );

    ! Read each of the area blocks
    !
    INCR I FROM 0 TO .AREA_BLOCKS - 1
    DO
	READ_BLOCK( .CONV$AR_AREA_BLOCK + ( .I  * BLOCK_SIZE ),
			.CONV$AR_PROLOGUE [ PLG$B_AVBN ] + .I );

    ! Set the proper prologue version flag
    !
    SELECTONE .CONV$AR_PROLOGUE [ PLG$W_VER_NO ] OF
    SET
	[ PLG$C_VER_NO ]	: CONV$GB_PROL_V1 = _SET;
	[ PLG$C_VER_IDX ]	: CONV$GB_PROL_V2 = _SET;
	[ PLG$C_VER_3 ]		: CONV$GB_PROL_V3 = _SET;
	[ OTHERWISE ]		: SIGNAL_STOP( CONV$_PLV );
    TES;

    RETURN

    END;

%SBTTL	'WRITE_PROLOGUE'
GLOBAL ROUTINE	CONV$$WRITE_PROLOGUE : NOVALUE =
!++
!
! Functional Description:
!
!	Writes the prologue area blocks back to the output file
!
! Calling Sequence:
!
!	CONV$$WRITE_PROLOGUE()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	WRITE_BLOCK
!
! Side Effects:
!	none
!
!--

    BEGIN

    ! Write each of the area blocks
    !
    INCR I FROM 0 TO .AREA_BLOCKS - 1
    DO
	WRITE_BLOCK( .CONV$AR_AREA_BLOCK + ( .I  * BLOCK_SIZE ),
			.CONV$AR_PROLOGUE [ PLG$B_AVBN ] + .I );


    RETURN

    END;

%SBTTL	'SET_KEY_DESC'
GLOBAL ROUTINE	CONV$$SET_KEY_DESC ( KEY ) : CL$SET_KEY_DESC =
!++
!
! Functional Description:
!
!	Sets the key descriptor from the output files
!	prologue to the requested key of reference.
!	This routine WILL reread the key descriptor from
!	the file.
!
! Calling Sequence:
!
!	CONV$$SET_KEY_DESC( key )
!
! Input Parameters:
!
!	key	- Key of refrence to get
!
! Implicit Inputs:
!
!	CONV$GL_KEY_DESC_BUF
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!
!	KEY_DESC
!	CONV$GL_KEY_DESC_VBN
!
! Routine Value:
!
!	CONV$_SUCCESS or CONV$_NOKEY (from get_next_key)
!
! Routines Called:
!
!	CONV$$GET_NEXT_KEY
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_KEY_DESC;

    LOCAL	STATUS;

    STATUS = CONV$_SUCCESS;

    ! Reset to the primary key then search from there
    !
    KEY_DESC = .CONV$GL_KEY_DESC_BUF;

    CONV$GL_KEY_DESC_VBN = 1;

    ! Read the first key
    !
    READ_BLOCK( .KEY_DESC,.CONV$GL_KEY_DESC_VBN );

    ! Loop until you find the correct key
    !
    WHILE .STATUS AND ( .KEY NEQU .KEY_DESC [ KEY$B_KEYREF ] )
    DO

	! If there are no keys then what a bummer
	!
	STATUS = CONV$$GET_NEXT_KEY();

    RETURN .STATUS

    END;

%SBTTL	'GET_NEXT_KEY'
GLOBAL ROUTINE CONV$$GET_NEXT_KEY : CL$GET_NEXT_KEY =
!++
!
! Functional Description:
!
!	Sets the key descriptor from the output files
!	prologue to the next key of reference if any
!
! Calling Sequence:
!
!	CONV$$GET_NEXT_KEY()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	KEY_DESC
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!
!	KEY_DESC
!
! Routine Value:
!
!	CONV$_SUCCESS or CONV$_NOKEY
!
! Routines Called:
!
!	READ_BLOCK
!
! Side Effects:
!
!	Could read a new key desciptor into memory
!
!--

    BEGIN

    DEFINE_KEY_DESC;

    ! If the next key in the chain is not in this block
    ! then get the next block in the chain
    !
    IF .KEY_DESC [ KEY$L_IDXFL ] NEQ 0
    THEN
	BEGIN

	! Get the VBN of the next block
	!
	CONV$GL_KEY_DESC_VBN = .KEY_DESC [ KEY$L_IDXFL ];

	! Have key block point to the right place in the new block
	!
	KEY_DESC = .CONV$GL_KEY_DESC_BUF + .KEY_DESC [ KEY$W_NOFF ];

	! Read the block
	!
	READ_BLOCK( .CONV$GL_KEY_DESC_BUF,.CONV$GL_KEY_DESC_VBN )

	END
    ELSE

	! If the offset is 0 then there are no more keys
	!
	IF .KEY_DESC [ KEY$W_NOFF ] EQL 0
	THEN
	    RETURN CONV$_NOKEY
	ELSE

	    ! Point the key block to the next key descriptor
	    !
	    KEY_DESC = .CONV$GL_KEY_DESC_BUF + .KEY_DESC [ KEY$W_NOFF ];

    RETURN CONV$_SUCCESS

    END;

%SBTTL	'WRITE_KEY_DESC'
GLOBAL ROUTINE	CONV$$WRITE_KEY_DESC : CL$WRITE_KEY_DESC NOVALUE =
!++
!
! Functional Description:
!
!	Writes back to the output file the current key descriptor
!
! Calling Sequence:
!
!	CONV$$WRITE_KEY_DESC()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	CONV$GL_KEY_DESC_BUF
!	CONV$GL_KEY_DESC_VBN
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	WRITE_BLOCK
!
! Side Effects:
!	none
!
!--

    BEGIN

    WRITE_BLOCK( .CONV$GL_KEY_DESC_BUF,.CONV$GL_KEY_DESC_VBN );

    RETURN

    END;

%SBTTL	'WRITE_AREA_DESC'
GLOBAL ROUTINE	CONV$$WRITE_AREA_DESC ( AREA ) : CL$WRITE_AREA_DESC NOVALUE =
!++
!
! Functional Description:
!
!	Writes back to the output file the current key descriptor
!
! Calling Sequence:
!
!	CONV$$WRITE_AREA_DESC( AREA )
!
! Input Parameters:
!
!	AREA - Area number to write
!
! Implicit Inputs:
!
!	CONV$AR_AREA_BLOCK
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	WRITE_BLOCK
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	VBN,
	BUFFER;

    ! Determine what block the area descritor is in
    !
    VBN = .CONV$AR_PROLOGUE [ PLG$B_AVBN ] + ( ( .AREA - 1 ) / 8 );

    ! Where in the buffer is the area descriptor
    !
    BUFFER = .CONV$AR_AREA_BLOCK +
		( ( .VBN - .CONV$AR_PROLOGUE [ PLG$B_AVBN ] ) * BLOCK_SIZE );

    WRITE_BLOCK( .BUFFER,.VBN );

    RETURN

    END;

%SBTTL	'READ_BLOCK'
ROUTINE	READ_BLOCK ( BUFFER : REF VECTOR [ ,WORD ],VBN ) : CL$READ_BLOCK NOVALUE =
!++
!
! Functional Description:
!
!	Reads a block in the output files prologue and checks the
!	checksum value for it
!
! Calling Sequence:
!
!	READ_BLOCK( buffer,vbn )
!
! Input Parameters:
!
!	buffer	- Buffer to read the block into
!	vbn	- VBN in the prologue to read
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	CHECKSUM
!
! Side Effects:
!	none
!
!--

    BEGIN

    CONV$AB_OUT_RAB [ RAB$L_BKT ] = .VBN;
    CONV$AB_OUT_RAB [ RAB$L_UBF ] = .BUFFER;
    CONV$AB_OUT_RAB [ RAB$W_USZ ] = BLOCK_SIZE;

    $READ( RAB=CONV$AB_OUT_RAB,ERR=CONV$$RMS_READ_ERROR );

    IF .BUFFER [ 255 ] NEQU CHECKSUM( .BUFFER )
    THEN
	BEGIN

	LOCAL	    FILE_NAME : DESC_BLK;

	! The file is open so there should be a full name around
	!
	FILE_NAME [ DSC$W_LENGTH ] = .CONV$AB_OUT_NAM [ NAM$B_RSL ];
	FILE_NAME [ DSC$A_POINTER ] = .CONV$AB_OUT_NAM [ NAM$L_RSA ];

	SIGNAL_STOP( CONV$_READERR,1,FILE_NAME,CONV$_PROERR,1,.VBN )

	END;

    RETURN

    END;

%SBTTL	'WRITE_BLOCK'
ROUTINE WRITE_BLOCK ( BUFFER : REF VECTOR[,WORD ],VBN ) : CL$WRITE_BLOCK NOVALUE =
!++
!
! Functional Description:
!
!	Calculates a checksum for a block and writes the block to
!	the output files prologue
!
! Calling Sequence:
!
!	WRITE_BLOCK( buffer,vbn )
!
! Input Parameters:
!
!	buffer	- Buffer to write the block from
!	vbn	- VBN in the prologue to write
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	CHECKSUM
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUFFER [ 255 ] = CHECKSUM ( .BUFFER );

    CONV$AB_OUT_RAB [ RAB$L_BKT ] = .VBN;
    CONV$AB_OUT_RAB [ RAB$L_RBF ] = .BUFFER;
    CONV$AB_OUT_RAB [ RAB$W_RSZ ] = BLOCK_SIZE;

    ! It's ok to call rms_read_error it works for writes to
    !
    $WRITE( RAB=CONV$AB_OUT_RAB,ERR=CONV$$RMS_READ_ERROR );

    RETURN

    END;

%SBTTL	'CHECKSUM'
ROUTINE CHECKSUM ( BLOCK : REF VECTOR [ ,WORD ] ) : CL$CHECKSUM =
!++
!
! Functional Description:
!
!	Calculates a checksum for a block and writes the block to
!	the output files prologue
!
! Calling Sequence:
!
!	CHECKSUM( buffer )
!
! Input Parameters:
!
!	buffer	- 512 byte buffer to calculate the checksum for
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	R0	- Checksum
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    ! Calculate the checksum for this block
    !
    LOCAL    CHECKSUM : WORD;

    CHECKSUM = 0;

    INCR J FROM 0 TO 254 BY 1
    DO
	CHECKSUM = .CHECKSUM + .BLOCK [ .J ];

    RETURN .CHECKSUM

    END;

END	ELUDOM
