MODULE
FORMAT (IDENT = 'V04-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  ACC, Account file dumper
!
! ABSTRACT:
!
!	This module contains various output formatting routines used
!	by Accounting facility programs.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Greg Robert and Steve Forgey, January 1982
!
! Modified by:
!
!	V03-011	DAS0005		David Solomon		16-Jul-1984
!		Translate UIC from binary to alphanumeric only if we need to
!		display it.
!
!	V03-010	DAS0004		David Solomon		28-Jun-1984
!		Expand size of UIC field from 15 to 23 characters.
!
!	V03-009	DAS0003		David Solomon		13-Apr-1984
!		Fix minor bugs in /FULL output where certain numeric fields
!		weren't being space padded the full length of the field.
!
!	V03-008	DAS0002		David Solomon		23-Jan-1984
!		Rearrage /FULL output to accomodate 31 character queue names
!		and 39 character job names.
!
!	V03-007	DAS0001		David Solomon		12-Jan-1984
!		Get ACCDEF.REQ from SRC$, not MSRC$.
!
!	V03-006	LMP0140		L. Mark Pilant,		19-Aug-1983  11:37
!		Add support for alphanumeric UICs.
!
!	V03-005	SPF0120		Steve Forgey	15-Jul-1982
!		Remove informational messages from compile.
!
!	V03-004	SPF0115		Steve Forgey	21-Apr-1982
!		Use explicit field lengths in FAO control strings in the
!		/FULL display.
!
!	V03-003	SPF0111		Steve Forgey	10-Apr-1982
!		Display resource usage data for pre-Version 3 accounting files
!
!	V03-002	SPF0103		Steve Forgey	27-Mar-1982
!		On a /FULL display, update only those portions of the
!		screen that have changed.
!
!	V03-001	SPF0101		Steve Forgey	27-Mar-1982
!		Limit display buffer writes to 512 bytes.
!
!	V02-002	SPF0080		Steve Forgey	06-Feb-1982
!		Fix value errors in /FULL display.
!
!	V02-001	SPF0072		Steve Forgey
!		Enhance /FULL display.
!
!--

!-----------------------------------------------------------------------------+
!									      !
! 				INCLUDE  FILES				      !
!									      !
!-----------------------------------------------------------------------------+

REQUIRE 'SRC$:ACCDEF';		! Common ACC definitions

!-----------------------------------------------------------------------------+
!									      !
! 			TABLE  OF  CONTENTS				      !
!									      !
!-----------------------------------------------------------------------------+

UNDECLARE
	SHOW_RECORD;

FORWARD ROUTINE
	SHOW_RECORD,			! Dispatch to output routines
	SHOW_BRIEF,			! Write summary format
	SHOW_FULL;			! Write a FULL record format


EXTERNAL

	DATE_DESC_ADDR,			! Address of desc of date in record
	DATE_HEADER,			! Address of date-name descriptor



	QUAD_CPU_TIME:	VECTOR [2],	! Processor time in standard format
	ELAPSED_TIME:	VECTOR [2],	! Calculated elapsed time
	WAIT_TIME:	VECTOR [2],	! Calculated queue wait time

	VERSION,				! Record format version
	RECORD_TYPE,				! Record type
	RECORD_SUBTYPE,				! Record subtype (V3 format only)
	CUSTOMER,				! Customer type (V3 format only)
	RECORD_LENGTH,				! Record length

	ACCOUNT_DESC:		VECTOR [2],	! Describes account name
	ADDRESS_DESC:		VECTOR [2],	! Describes remote node address
	BUFFERED_IO_DESC:	VECTOR [2],	! Describes buffered I/O count
	CPU_TIME_DESC:		VECTOR [2],	! Describes cpu time
	DIRECT_IO_DESC:		VECTOR [2],	! Describes direct I/O count
	ENTRY_DESC:		VECTOR [2],	! Describes job id number
	EXECUTION_DESC:		VECTOR [2],	! Describes image execution count
	FILE_DESC:		VECTOR [2],	! Describes file name
	FINISH_TIME_DESC:	VECTOR [2],	! Describes finish time
	IDENT_DESC:		VECTOR [2],	! Describes process id (IDENT)
	IMAGE_FILE_DESC:	VECTOR [2],	! Describes image file spec
	IMAGE_DESC:		VECTOR [2],	! Describes image name
	JOB_DESC:		VECTOR [2],	! Describes job name
	NODE_DESC:		VECTOR [2],	! Describes remote node name
	OWNER_DESC:		VECTOR [2],	! Describes owner IDENT
	PAGE_FAULTS_DESC:	VECTOR [2],	! Describes page fault count
	PAGE_FILE_DESC:		VECTOR [2],	! Describes page file peak usage
	PAGE_READS_DESC:	VECTOR [2],	! Describes page read count
	PRIORITY_DESC:		VECTOR [2],	! Describes process/job priority
	PRIVILEGE_DESC:		VECTOR [2],	! Describes process privilege mask
	PROCESS_DESC:		VECTOR [2],	! Describes process type
	QUEUE_DESC:		VECTOR [2],	! Describes queue name
	QUEUE_TIME_DESC:	VECTOR [2],	! Describes queue time
	REMOTE_ID_DESC:		VECTOR [2],	! Describes remote id
	START_TIME_DESC:	VECTOR [2],	! Describes start time
	STATUS_DESC:		VECTOR [2],	! Describes final exit status code
	STATUS_TEXT_DESC:	VECTOR [2],	! Describes final exit status text
	SUBTYPE_DESC:		VECTOR [2],	! Describes record subtype
	SYM_GET_DESC:		VECTOR [2],	! Describes symbiont get count
	SYM_QIO_DESC:		VECTOR [2],	! Describes symbiont qio count
	SYM_PAGE_DESC:		VECTOR [2],	! Describes symbiont page count
	TERMINAL_DESC:		VECTOR [2],	! Describes terminal name
	TYPE_DESC:		VECTOR [2],	! Describes record type
	TYPE_TEXT_DESC:		VECTOR [2],	! Describes record type text
	UIC_DESC:		VECTOR [2],	! Describes translated UIC
	UIC_BINARY_DESC:	VECTOR [2],	! Describes binary UIC
	UIC_BUF:		VECTOR [67, BYTE], ! Process UIC (ASCII)
	USER_DATA_DESC:		VECTOR [2],	! Describes user data
	USER_DESC:		VECTOR [2],	! Describes user name
	VOLUMES_DESC:		VECTOR [2],	! Describes volume mount count
	WORKING_SET_DESC:	VECTOR [2];	! Describes working set peak


OWN
	LAST_DISPLAY_TYPE: initial (0);		! Type of last record

LITERAL
	RESOURCE_DISPLAY = 1,
	PRINT_DISPLAY = 2,
	USER_DISPLAY = 3,
	FILE_DISPLAY = 4;

GLOBAL ROUTINE SHOW_RECORD (BUFFER, RAB) =

!----
!
! Functional description
!
!	This routine is called to dispatch to the proper formatting
!	routines for various combinations of command line switches
!
! Input parameters
!
!	BUFFER = Address of a buffer containing the record to be detailed.
!		 The record can be any, standard format, record.
!
!	RAB =    Address of the output rab
!
! Output parameters
!
!	The appropriate formatting routines are called.
!	Any errors encountered are RETURNed immediately.
!	TRUE is returned on a normal exit.
!
!----

BEGIN

!
!DETERMINE OUTPUT TYPE --
!
!	If /SUMMARY has been specified then invoke the summarization
!	routine and exit. If /BINARY has been specified invoke the binary
!	output routine and exit.
!
!	If /FULL has been specified invoke the show full routine, else
!	invoke the show brief routine.
!

If PRESENT (SUMMARY)			! If /SUMMARY
then return summarize (.buffer);

If PRESENT (FULL) 			! If /FULL
then perform (show_full (.buffer))		!  call the SHOW_FULL  routine
else perform (show_brief (.buffer));		!  else call SHOW_BRIEF

Return (true);
END;

ROUTINE SHOW_BRIEF (BUFFER) =

!----
!
! Functional description
!
!	This routine is called to format a record from the system
!	accounting file.	
!
! Input parameters
!
!	BUFFER = Address of a buffer containing the record to be detailed.
!		 The record can be any, standard format, record.
!
! Output parameters
!
!	A brief representation is written.
!	Any errors encountered are RETURNed immediately.
!	TRUE is returned on a normal exit.
!
!----

BEGIN

MAP buffer:	ref bblock;			! Define buffer block format

BIND
   input_file_count	= .buffer - 8,
   record_number	= .buffer - 4;

OWN   first: byte initial (true);		! First time switch


!
! WRITE COLUMN HEADER
!	Check to see if a column header is required.  The column
!	header is written if this is the first time.
!

if .first then
   BEGIN
   first = false;				! Clear switch
   set_scroll (3, SCREEN (length));		! Scroll from line 3 to end
   erase_page ();				! Erase entire screen
   write_line (XFAO (				! Write header
	AD ('     Date / Time       Type     Subtype     Username  ',
	'    ID    Source  Status'),
	.date_header));
   write_line (XFAO (ad ('!80*-')));		! Underline it
   END;



!
!FORMAT AND WRITE BRIEF RECORD ---
!

Write_line (XFAO (
	ad ('!20%D !8AS !11AS !12AS !XL !6AS !XL'), ! FAO control
	.finish_time_desc[1],			!  -address of quadword time
	type_desc,				!  -record type descriptor
	subtype_desc,				!  -record subtype descriptor
	user_desc,				!  -user name descriptor
	if .ident_desc[0] neq 0			!  -process id
	then ..ident_desc[1]
	else 0,
	if .node_desc[0] neq 0			!  -source name
	then node_desc
	else terminal_desc,
	if .status_desc[0] neq 0		!  -final status
	then ..status_desc[1]
	else 0));

RETURN TRUE;
END;

ROUTINE SHOW_FULL (BUFFER) =

!++
!
! Functional Description:
!
!	This routine is called to print the FULL form of an accounting record.
!
! Input parameters
!
!	BUFFER = Address of a buffer containing the record to be detailed.
!
! Output parameters
!
!	The appropriate formatting routine is called.
!	Any errors encountered are RETURNed immediately.
!	TRUE is returned on a normal exit.
!
!----

BEGIN

MAP
   buffer:	ref bblock;			! Define buffer block format

OWN
	day,					! Day number
	post_midnight: vector [2],		! Time since last day boundary
	scrbuf: vector [512,byte],		! For screen buffering
	scrbufd: vector [2] initial (512, scrbuf),
	first_record	: LONG INITIAL (TRUE),
	form_feed	: INITDESC ('!^'),
	buf: bblock [40],
	buf_desc: vector [2] initial (80, buf),
	line: bblock [40] initial (byte (rep 40 of ('-'))),
	line_desc: vector [2] initial (40, line),
	space: initial (' '),
	fill: vector [2] initial (1,space);

LOCAL
	status:	bblock [long];			! Local "catch all" status

IF	SCREEN (flags) AND NOT (.first_record) 	! Screen oriented
THEN	BEGIN
	LOCAL temp;
	SET_CURSOR (SCREEN (LENGTH) -1, 1);
	GET_REPLY (buf_desc, ad ('Press RETURN for Next Record >'),temp);
	END;

SET_BUFFER (scrbufd);				! Establish buffer

if .first_record then ERASE_PAGE();

buf_desc [0] =	.subtype_desc [0] +
		(if .subtype_desc [0] neq 0 then 1 else 0) +
		.type_text_desc [0];
CH$COPY (
	.subtype_desc [0], .subtype_desc [1],
	(if .subtype_desc [0] neq 0 then 1 else 0), space,
	.type_text_desc [0], .type_text_desc [1],
	%C' ',
	.buf_desc [0], .buf_desc [1]);
erase_line (1, 1);
write_at (buf_desc, 1, 1, REVERSE);
erase_line (2, 1);
line_desc [0] = .buf_desc [0];
write_at (line_desc, 2, 1);
!
! Format ID portion of screen
!
if .first_record then
	BEGIN
	write_at (ad('Username:'),4,1);
	write_at (ad('UIC:'),4,38);
	write_at (ad('Account:'),5,1);
	write_at (ad('Finish time:'),5,38);
	write_at (ad('Process ID:'),6,1);
	write_at (ad('Start time:'),6,38);
	write_at (ad('Owner ID:'),7,1);
	write_at (ad('Elapsed time:'),7,38);
	write_at (ad('Terminal name:'),8,1);
	write_at (ad('Processor time:'),8,38);
	write_at (ad('Remote node addr:'),9,1);
	write_at (ad('Priority:'),9,38);
	write_at (ad('Remote node name:'),10,1);
	write_at (ad('Privilege <31-00>:'),10,38);
	write_at (ad('Remote ID:'),11,1);
	write_at (ad('Privilege <63-32>:'),11,38);
	write_at (ad('Queue entry:'),12,1);
	write_at (ad('Final status code:'),12,38);
	write_at (ad('Queue name:'),13,1);
	write_at (ad('Job name:'),14,1);
	write_at (ad('Final status text:'),15,1);
	set_scroll (17,SCREEN (LENGTH) - 2);
	END;

First_record = FALSE;				! Set flag to new value

if	.user_desc [0] neq 0
then	write_at (XFAO (ad ('!12AS'),user_desc),4,20)
else	write_at (XFAO (ad ('!12AS'),fill),4,20);
erase_line (4, 57);
if	.uic_binary_desc [0] neq 0
then
    begin
    uic_desc [0] = 67;
    uic_desc [1] = uic_buf;
    perform (lib$sys_fao (ad('!%I'),
		uic_desc [0],
		uic_desc [0],
		..uic_binary_desc[1]));
    write_at (XFAO (ad ('!23AS'),uic_desc),4,57)
    end
else	write_at (XFAO (ad ('!23AS'),fill),4,57);
if	.account_desc [0] neq 0
then	write_at (XFAO (ad ('!8AS'),account_desc),5,20)
else	write_at (XFAO (ad ('!8AS'),fill),5,20);
if	.finish_time_desc [0] neq 0
then	write_at (XFAO (ad ('!23<!%D!>'),.finish_time_desc [1]),5,57)
else	write_at (XFAO (ad ('!23AS'),fill),5,57);
if	.ident_desc [0] neq 0
then	write_at (XFAO (ad ('!8<!XL!>'),..ident_desc [1]),6,20)
else	write_at (XFAO (ad ('!8AS'),fill),6,20);
if	.start_time_desc [0] neq 0
then	write_at (XFAO (ad ('!%D'),.start_time_desc [1]),6,57)
else	BEGIN
	if	.queue_time_desc [0] neq 0
	then	write_at (XFAO (ad ('!23<!%D!>'),.queue_time_desc [1]),6,57)
	else	write_at (XFAO (ad ('!23AS'),fill),6,57);
	END;
if	.owner_desc [0] neq 0
then	write_at (XFAO (ad ('!8<!XL!>'),..owner_desc [1]),7,20)
else	write_at (XFAO (ad ('!8AS'),fill),7,20);
if	.start_time_desc [0] neq 0
then	BEGIN
	BUILTIN emul;
	lib$day (day, elapsed_time, post_midnight);
	emul (%ref(100000), post_midnight, %ref(0), post_midnight);
	write_at (XFAO (ad ('!3UL !%T'),.day,post_midnight),7,65)
	END
else	BEGIN
	if	.queue_time_desc [0] neq 0
	then
		BEGIN
		BUILTIN emul;
		lib$day (day, elapsed_time, post_midnight);
		emul (%ref(100000), post_midnight, %ref(0), post_midnight);
		write_at (XFAO (ad ('!3UL !%T'),.day,post_midnight),7,65)
		END
	else	write_at (XFAO (ad ('!15AS'),fill),7,65);
	END;
if	.terminal_desc [0] neq 0
then	write_at (XFAO (ad ('!7AS'),terminal_desc),8,20)
else	write_at (XFAO (ad ('!7AS'),fill),8,20);
if	.cpu_time_desc [0] neq 0
then	BEGIN
	BUILTIN emul;
	lib$day (day, quad_cpu_time, post_midnight);
	emul (%ref(100000), post_midnight, %ref(0), post_midnight);
	write_at (XFAO (ad ('!3UL !%T'),.day,post_midnight),8,65)
	END
else	write_at (XFAO (ad ('!15AS'),fill),8,65);
if	.address_desc [0] neq 0
then	write_at (XFAO (ad ('!5<!UL!>'),..address_desc [1]),9,20)
else	write_at (XFAO (ad ('!5AS'),fill),9,20);
if	.priority_desc [0] neq 0
then	write_at (XFAO (ad ('!2<!UB!>'),..priority_desc [1]),9,57)
else	write_at (XFAO (ad ('!2AS'),fill),9,57);
if	.node_desc [0] neq 0
then	write_at (XFAO (ad ('!6AS'),node_desc),10,20)
else	write_at (XFAO (ad ('!6AS'),fill),10,20);
if	.remote_id_desc [0] neq 0
then	write_at (XFAO (ad ('!16AS'),remote_id_desc),11,20)
else	write_at (XFAO (ad ('!16AS'),fill),11,20);
if	.privilege_desc [0] neq 0
then	BEGIN
	write_at (XFAO (ad ('!8XL'),..privilege_desc [1]),10,57);
	write_at (XFAO (ad ('!8XL'),.(.privilege_desc [1] + 4)),11,57);
	END
else	BEGIN
	write_at (XFAO (ad ('!8AS'),fill),10,57);
	write_at (XFAO (ad ('!8AS'),fill),11,57);
	END;
if	.entry_desc [0] neq 0
then	write_at (XFAO (ad ('!4<!UL!>'),..entry_desc [1]),12,20)
else	write_at (XFAO (ad ('!4AS'),fill),12,20);
if	.queue_desc [0] neq 0
then	write_at (XFAO (ad ('!31AS'),queue_desc),13,20)
else	write_at (XFAO (ad ('!31AS'),fill),13,20);
if	.job_desc [0] neq 0
then	write_at (XFAO (ad ('!39AS'),job_desc),14,20)
else	write_at (XFAO (ad ('!39AS'),fill),14,20);
ERASE_LINE (15,20);
if	.status_desc [0] neq 0
then	BEGIN
	write_at (XFAO (ad ('!8XL'), ..status_desc [1]),12,57);
	write_at (XFAO (ad ('!60AS'), status_text_desc),15,20);
	END
else	write_at (XFAO (ad ('!8AS'),fill),12,57);

!
! If process/resource usage info present, then format
!
if	.page_faults_desc [0] neq 0 then
	BEGIN
	if	.last_display_type neq resource_display
	then	BEGIN
		ERASE_PAGE(17);
		write_at (ad('Page faults:'),17,1);
		write_at (ad('Direct IO:'),17,38);
		write_at (ad('Page fault reads:'),18,1);
		write_at (ad('Buffered IO:'),18,38);
		write_at (ad('Peak working set:'),19,1);
		write_at (ad('Volumes mounted:'),19,38);
		write_at (ad('Peak page file:'),20,1);
		write_at (ad('Images executed:'),20,38);
		last_display_type = resource_display;
		END;
	if	.page_faults_desc [0] neq 0
	then	write_at (XFAO (ad('!10UL'),..page_faults_desc [1]),17,20);
	if	.direct_io_desc [0] neq 0
	then	write_at (XFAO (ad('!10UL'),..direct_io_desc [1]),17,57);
	if	.page_reads_desc [1] neq 0
	then	write_at (XFAO (ad ('!10UL'),..page_reads_desc [1]),18,20);
	if	.buffered_io_desc [0] neq 0
	then	write_at (XFAO (ad('!10UL'),..buffered_io_desc [1]),18,57);
	if	.working_set_desc [0] neq 0
	then	write_at (XFAO (ad ('!10UL'),..working_set_desc [1]),19,20);
	if	.volumes_desc [0] neq 0
	then	write_at (XFAO (ad('!10UL'),..volumes_desc [1]),19,57);
	if	.page_file_desc [0] neq 0
	then	write_at (XFAO (ad ('!10UL'),..page_file_desc [1]),20,20);
	if	.execution_desc [0] neq 0
	then	write_at (XFAO (ad('!10UL'),..execution_desc [1]),20,57);
	END;
!
! If symbiont resource information present, then format
!
if	.sym_qio_desc [0] neq 0
then	BEGIN
	if	.last_display_type neq print_display
	then	BEGIN
		ERASE_PAGE(17);
		write_at (ad('GETs from source:'),17,1);
		write_at (ad('QIOs to printer:'),18,1);
		write_at (ad('Pages printed:'),19,1);
		last_display_type = print_display;
		END;
	write_at (XFAO (ad('!10UL'),..sym_get_desc [1]),17,20);
	write_at (XFAO (ad('!10UL'),..sym_qio_desc [1]),18,20);
	write_at (XFAO (ad('!10UL'),..sym_page_desc [1]),19,20);
	END;

if	.image_file_desc [0] neq 0
then	BEGIN
	ERASE_PAGE(22);
	write_at (ad('Image name:'),22,1);
	write_at (XFAO (ad ('!60AS'),image_file_desc),22,13);
	END;
if	.file_desc [0] neq 0
then	BEGIN
	ERASE_PAGE(17);
	write_at (ad('File name:'),22,1);
	write_at (XFAO (ad ('!60AS'),file_desc),22,12);
	last_display_type = file_display;
	END;
if	.user_data_desc [0] neq 0
then	BEGIN
	OWN ptr;
	ERASE_PAGE(17);
	last_display_type = user_display;
	ptr = .user_data_desc [1];
	WHILE 	(.ptr LSSU (.user_data_desc [1] + .user_data_desc [0])) and
		(.ptr LSSU (.user_data_desc [1] + (6*16))) do
		BEGIN
		write_line (XFAO (ad ('!XL  !XL  !XL  !XL   !16AF   !XL'),
			.(.ptr+12), .(.ptr+8), .(.ptr+4), .(.ptr),
			%ref(16), .ptr, (.ptr - .user_data_desc [1])));
		ptr = .ptr + 16;
		END;

	PUT_BUFFER ();			! Flush buffer and turnoff buffering.

	WHILE 	.ptr LSSU (.user_data_desc [1] + .user_data_desc [0]) do
		BEGIN
		if	SCREEN (flags)
		then	BEGIN
			LOCAL temp;
			ERASE_LINE (SCREEN (length) - 1, 1);
			GET_REPLY (buf_desc,
				ad ('Press RETURN for more User Message > '),
				temp);
			SET_CURSOR (SCREEN (LENGTH) - 2, 1);
			END;
		write_line (XFAO (ad ('!XL  !XL  !XL  !XL   !16AF   !XL'),
			.(.ptr+12), .(.ptr+8), .(.ptr+4), .(.ptr),
			%ref(16), .ptr, (.ptr - .user_data_desc [1])));
		ptr = .ptr + 16;
		END;
	END
else	PUT_BUFFER ();			! Flush buffer and turnoff buffering

IF SCREEN (flags) then 
   BEGIN
   ERASE_LINE (SCREEN (length) - 1, 1);		! ERASE "Press return"
   END;

RETURN true;
END;

END
ELUDOM
