Module UNKN_DISP
(%TITLE 'Unknown Dispatcher'
IDENT = 'V04-000') =

Begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  ERF, Error Log Report Generator
!
! ABSTRACT:
!
! 	This module contains the dispatching routines for outputing
!	'unknown' entries.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, user mode.
!
! AUTHOR:  Sharon Reynolds,	CREATION DATE:	April 1983
!
! Modified By:
!
!	V03-003	EAD0190		Elliott A. Drayton		 6-Jul-1984
!		Obtain the value of LSTLUN from SYECOM.
!
!	V03-002	EAD0143		Elliott A. Drayton	12-Apr-1984
!		Remove reference to EMBETDEF.REQ.
!
!	V03-001	SAR0018		Sharon A. Reynolds,	22-Apr-1983
!		Changed references to valid_class,valid_cpu,valid_entry,
!		and valid_type so they would be accessed via SYECOM.
!
!--

!
! Require files
!
Require 'SRC$:RECSELDEF.REQ' ;		! EMB field definitions
Require 'SRC$:ERFDEF.REQ' ;		! ERF common definitions

Forward routine
    Unknown_dispatcher: NOVALUE ;


External routine
    Dumpreg,
    Header,
    Logger,
    Unknown1,
    Unknown2,
    Unknown3 ;    


External
    Input_rab:		$BBLOCK [],
    Syecom:		$BBLOCK PSECT (SYECOM);

Own
    Temp_buf:		PSECT(EMB),
    Emb_buf:		Initial (temp_buf) 
			REF $BBLOCK,
    Unknown_entry:	LONG,
    Unknown_device:	LONG,
    Unknown_cpu:	LONG;



Global Routine UNKNOWN_DISPATCHER: NOVALUE = 
Begin

!++
!
! Functional Description:
!
!    This routine dispatches to any module necessary for the output 
!    of 'unknown' entries.
!
! Calling Sequence:
!
!    Unknown_dispatcher ()
!
! Input Parameters:
!
!
! Output Parameters:
!
!    None
!
!--

!
! Record_size = Size (bytes) of the entry being processed
!
Bind record_size = input_rab[rab$w_rsz] ;

Unknown_entry = $descriptor('"UNKNOWN ENTRY"') ;
Unknown_device = $descriptor ('"UNKNOWN DEVICE" ENTRY') ;
Unknown_cpu = $descriptor ('"UNKNOWN CPU" ENTRY') ;

!
! Output the first two lines of the entry header.
!
HEADER (syecom[sye$l_lstlun]) ;

!
! Determine what message to output in the entry header.
!
If (.syecom[sye$b_valid_cpu] AND (NOT .syecom[sye$b_valid_entry]))
Then
    !
    ! Indicate that this is an unknown entry type.
    !
    LOGGER (syecom[sye$l_lstlun], .unknown_entry) 
Else
    Begin
    If (.syecom[sye$b_valid_cpu] AND 
	(.emb_buf[emb$w_hd_entry] EQL EMB$C_DE OR	! Device error 1
	.emb_buf[emb$w_hd_entry] EQL EMB$C_DT OR	! Device timeout 96 %x60
	.emb_buf[emb$w_hd_entry] EQL EMB$C_DA) OR	! Device attention 98 %x62
	(NOT .syecom[sye$b_valid_class]) OR 
	(NOT .syecom[sye$b_valid_type]))
    Then
	!
	! Indicate that this is an unknown device. 
	!
	LOGGER (syecom[sye$l_lstlun], .unknown_device)
    Else
	Begin
	If (NOT .syecom[sye$b_valid_cpu])
	Then
	    !
	    ! Indicate that this is an unknown cpu type.
	    !
	    LOGGER (syecom[sye$l_lstlun], .unknown_cpu) ;
	End ;
    End ;

!
! Output the contents of the header packet.
!
UNKNOWN1 (syecom[sye$l_lstlun]) ;

!
! Determine what else in the entry can be translated and call the
! appropriate routine to do so.
!
If (.emb_buf[emb$w_hd_entry] EQL EMB$C_DE) OR		! Device error 1
    (.emb_buf[emb$w_hd_entry] EQL EMB$C_DT)		! Device timeout 96 %x60
Then
    !
    !
    !
    UNKNOWN2 (syecom[sye$l_lstlun])
Else
    Begin
    If (.emb_buf[emb$w_hd_entry] EQL EMB$C_DA)		! Device attention 98 %x62
    Then
	!
	!
	!
	UNKNOWN3 (syecom[sye$l_lstlun])
    Else
	!
	! Nothing else can be translated, output the remainder of the
	! entry in a longword, hexadecimal format.
	!
	DUMPREG (syecom[sye$l_lstlun], %REF((((.record_size + 3)/4) - 4)),
		 emb_buf[16,0,0,0]) ;
    End ; 

Return 
End ;	! Routine

End	! Module
ELUDOM
