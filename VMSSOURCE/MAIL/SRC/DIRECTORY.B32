MODULE MAIL$DIRECTORY( %TITLE 'DISPLAY SUMMARY OF EACH MESSAGE'
		IDENT = 'V04-000' ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	VAX/VMS MAIL UTILITY
!
! ABSTRACT:	DISPLAY A SUMMARY OF EACH MESSAGE IN THE CURRENT FILE.
!
! ENVIRONMENT:	NATIVE/USER MODE
!
! AUTHOR: LEN KAWELL, CREATION DATE: 20-JUN-1979
!
! MODIFIED BY:
!
!	V03-006	ROP0011		Robert Posniak	20-JUN-1984
!		Correct extraction of sender node/username
!		while listing directory.
!
!	V03-005	BLS0255		Benn Schreiber	28-Dec-1983
!		Use new global flags. Issue message in dir/folder if
!		no folders found.
!
!	V03-004	BLS0225		Benn Schreiber	17-Jun-1983
!		Use common erase page routine
!
!	V03-003	BLS0222		Benn Schreiber	17-May-1983
!		If message is deleted, clear flags descriptor
!
!	V03-002	BLS0211		Benn Schreiber	13-Mar-1983
!		Add support for ISAM mail files, and DIR/FOLDER
!
!	V03-001	BLS0177		Benn Schreiber	20-Jun-1982
!		Use MAIL$G_OUTCHAR rather than INPCHAR.  Use MAIL$Q_MSG_FNM
!		to get message file filename, rather than user specified
!		name, which could be a logical.
!--

!
! TABLE OF CONTENTS:
!

!
! INCLUDE FILES:
!
	LIBRARY 'SYS$LIBRARY:STARLET';
	REQUIRE 'SRC$:MAILREQ';
	LIBRARY	'LIB$:MAILDEF';
!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!
OWN
	SENDER: DYN_DESC_DECL,			! Sender descriptor
	SUBJ:   DYN_DESC_DECL,			! Subject descriptor
	DATE:   DYN_DESC_DECL,			! Date descriptor
	FLAGS_DESC: DYN_DESC_DECL;		! Message flags
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	MAIL$CMD_ERASE,				! Erase the screen
	MAIL$INFO_FOLDER,			! Get info about next folder
	MAIL$FIND_I_MSG,			! Find next ISAM message
	MAIL$FIND_MSG,				! Find next message
	MAIL$GETMSG,				! Get message text
	MAIL$INFO_I_MSG,			! Get current ISAM msg info
	MAIL$INFO_MSG,				! Get current message info
	MAIL$PUT_OUTPUT,			! Put to SYS$OUTPUT
	STR$FREE1_DX;				! Deallocate dynamic string
EXTERNAL
	MAIL$GL_FLAGS : $BBLOCK,		! Control flags
	MAIL$L_CURMSG : REF $BBLOCK,		! Current message descriptor
	MAIL$Q_CURFOLDER : $BBLOCK,		! Descriptor of isam folder
	MAIL$Q_INPTRAN : $BBLOCK,		! Translation of SYS$INPUT
	MAIL$L_OUTLINES,			! Number of lines per page
	MAIL$Q_RD_DESC : $BBLOCK,		! Descriptor of filename
	MAIL$Q_MSG_FILE: BLOCK[,BYTE],		! Current message file name
	MAIL$Q_MSG_FNM:  BLOCK[,BYTE],		! Current message file filename
	MAIL$L_MSG_NUM:	 LONG;			! Current message number

ROUTINE ISAM_DIRECTORY (LINESPP,FULL_FLAG) : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	List a directory of an ISAM mail file
!
!--
BEGIN

LOCAL
    NUMLINES;

NUMLINES = .LINESPP;

DO BEGIN
    IF .MAIL$L_CURMSG NEQ 0
    THEN BEGIN
	IF NOT (IF .FULL_FLAG
		THEN MAIL$INFO_I_MSG(0,SUBJ,DATE,FLAGS_DESC,0,SENDER)
		ELSE MAIL$INFO_I_MSG(0,SUBJ,DATE,0,0,SENDER))
	    THEN RETURN;
	IF .FLAGS_DESC[DSC$W_LENGTH] NEQ 0
	    AND .NUMLINES LEQU 1
	    THEN (MAIL$PUT_OUTPUT(MAIL$GETMSG(MAIL$_MOREMSG),0); RETURN);
	!
	! Display summary information
	!
	MAIL$PUT_OUTPUT($DESCRIPTOR('!5UL !20AS !12AS !AF'),
			.MAIL$L_MSG_NUM,SENDER,
			DATE,
			MINU(.SUBJ[DSC$W_LENGTH],40),.SUBJ[DSC$A_POINTER]);
    END
    ELSE BEGIN
	MAIL$PUT_OUTPUT(MAIL$GETMSG(MAIL$_DIRDEL10),.MAIL$L_MSG_NUM);
	STR$FREE1_DX(FLAGS_DESC);
	END;
    IF .FULL_FLAG
	AND .FLAGS_DESC[DSC$W_LENGTH] NEQ 0
	THEN MAIL$PUT_OUTPUT(FLAGS_DESC);
    IF .MAIL$GL_FLAGS[MAIF_V_CTRLCFL]
	THEN RETURN;
    IF NOT MAIL$FIND_I_MSG(0,0,1)
	THEN RETURN;

    !
    ! If output is to a scope, count lines per page
    !
    IF .MAIL$GL_FLAGS[MAIF_V_SCOPE]
    THEN BEGIN
	NUMLINES = .NUMLINES - 1;
	IF .FULL_FLAG
	    AND .FLAGS_DESC[DSC$W_LENGTH] NEQ 0
	THEN NUMLINES = .NUMLINES - 1;
	END
    END
UNTIL .NUMLINES LEQ 0;

MAIL$PUT_OUTPUT(MAIL$GETMSG(MAIL$_MOREMSG),0);
RETURN
END;

GLOBAL ROUTINE MAIL$DIRECTORY(FULL_FLAG) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Displays a summary of each of the messages in the current
!	message file.
!
! INPUTS:
!
!	MAIL$W_MSG_RSIZ = Size of current message record.
!	MAIL$L_MSG_RADR = Address of current message record.
!
! OUTPUTS:
!
!	NONE
!
!--
BEGIN
LOCAL
	PTR,					! Pointer
	SENDER_SIZ,				! Sender size
	SENDER_PTR,				! Sender pointer
	LAST_SIZ,				! Last size found
	LAST_PTR,				! Last pointer
	NUMLINES;				! Number of lines left on page

!
! Erase the screen and get the number of lines per page/screen
!
MAIL$CMD_ERASE();
MAIL$PUT_OUTPUT(DESCRIPTOR('!#* !AS'),		! Display file or folder name
		80-(IF .MAIL$GL_FLAGS[MAIF_V_ISAM]
		    THEN .MAIL$Q_CURFOLDER[DSC$W_LENGTH]
		    ELSE .MAIL$Q_MSG_FNM[DSC$W_LENGTH]),
		(IF .MAIL$GL_FLAGS[MAIF_V_ISAM]
		    THEN MAIL$Q_CURFOLDER
		    ELSE MAIL$Q_MSG_FNM));
MAIL$PUT_OUTPUT(MAIL$GETMSG(MAIL$_DIRHD0));
MAIL$PUT_OUTPUT(DESCRIPTOR(' '));
NUMLINES = MAX(.MAIL$L_OUTLINES-7,1);

IF .MAIL$GL_FLAGS[MAIF_V_ISAM]
THEN BEGIN
    ISAM_DIRECTORY(.NUMLINES,.FULL_FLAG);
    RETURN
    END;
!
! Loop, displaying a summary of each message and getting the next one, 
! until the screen is filled or there aren't any more messages.
!
DO
	BEGIN
	IF NOT MAIL$INFO_MSG(SENDER,SUBJ,DATE)
	THEN
		RETURN;
	!
	! Strip all but the last node name from the sender's name
	!
	LAST_SIZ = SENDER_SIZ = .SENDER[DSC$W_LENGTH];
	LAST_PTR = SENDER_PTR = .SENDER[DSC$A_POINTER];
	WHILE NOT CH$FAIL(
		PTR = CH$FIND_SUB(.LAST_SIZ,.LAST_PTR,
	  			  %CHARCOUNT('::'),UPLIT('::')))
	DO	BEGIN
		SENDER_SIZ = .LAST_SIZ;
		SENDER_PTR = .LAST_PTR;
		LAST_SIZ = .LAST_SIZ - (.PTR + %CHARCOUNT('::') - .LAST_PTR);
		LAST_PTR = .PTR + %CHARCOUNT('::');
		END;
	!
	! Display the summary for this message
	!
	MAIL$PUT_OUTPUT(DESCRIPTOR('!5UL !20AD !12AS !AD'),
			.MAIL$L_MSG_NUM,
			.SENDER_SIZ,
			.SENDER_PTR,
			DATE,
			MIN(.SUBJ[DSC$W_LENGTH],40),
			.SUBJ[DSC$A_POINTER]);
	IF .MAIL$GL_FLAGS[MAIF_V_CTRLCFL]
	THEN
		RETURN;
	IF NOT MAIL$FIND_MSG(0)
	THEN
		RETURN;
	!
	! Check if output device is a scope terminal
	!
	IF .MAIL$GL_FLAGS[MAIF_V_SCOPE]
	THEN
		NUMLINES = .NUMLINES - 1;	! Decrement number lines page
	END
UNTIL .NUMLINES LEQ 0; 
MAIL$PUT_OUTPUT(MAIL$GETMSG(MAIL$_MOREMSG),0)	! Tell user there is more
END;

ROUTINE OUTPUT_HEADER : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Output the header for the dir/folder listing
!
!--
BEGIN

MAIL$PUT_OUTPUT(MAIL$GETMSG(MAIL$_DIRHD10),MAIL$Q_RD_DESC);
MAIL$PUT_OUTPUT (MAIL$GETMSG(MAIL$_DIRHD20));
RETURN;
END;

GLOBAL ROUTINE MAIL$DIR_FOLDER (START_DESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Display a listing of the folders in the current ISAM mail file
!
! INPUTS:
!
!	START_DESC is a descriptor of the starting folder name
!--
BEGIN
MAP
    START_DESC : REF $BBLOCK;

LOCAL
    SEARCH_MODE,
    LISTFLAG : WORD,
    HEAD_FLAG : WORD,
    FOLDERBUF : VECTOR[80,BYTE],
    BUFDESC : VECTOR[2,LONG],
    FOLDER_DESC : $BBLOCK[DSC$C_S_BLN];

FOLDER_DESC[DSC$W_LENGTH] = .START_DESC[DSC$W_LENGTH];
FOLDER_DESC[DSC$B_DTYPE] = 0;
FOLDER_DESC[DSC$B_CLASS] = 0;
FOLDER_DESC[DSC$A_POINTER] = .START_DESC[DSC$A_POINTER];
SEARCH_MODE = (.FOLDER_DESC[DSC$W_LENGTH] NEQ 0);
HEAD_FLAG = 0;
LISTFLAG = 0;
BUFDESC[0] = 0;
BUFDESC[1] = FOLDERBUF;
WHILE MAIL$INFO_FOLDER(FOLDER_DESC,.SEARCH_MODE)
DO BEGIN
    CH$COPY(.FOLDER_DESC[DSC$W_LENGTH],.FOLDER_DESC[DSC$A_POINTER],%C' ',
		(IF .LISTFLAG 
			THEN .FOLDER_DESC[DSC$W_LENGTH]
			ELSE MFR_S_FILEKEY+1),FOLDERBUF[.BUFDESC[0]]);
    BUFDESC[0] = .BUFDESC[0] + (IF .LISTFLAG
				    THEN .FOLDER_DESC[DSC$W_LENGTH]
				    ELSE MFR_S_FILEKEY+1);
    IF .LISTFLAG
    THEN BEGIN
	IF NOT .HEAD_FLAG
	THEN BEGIN
	    OUTPUT_HEADER();
	    HEAD_FLAG = TRUE;
	    END;
	MAIL$PUT_OUTPUT(BUFDESC);
	BUFDESC[0] = 0;
	END;
    LISTFLAG = .LISTFLAG XOR 1;
    IF .MAIL$GL_FLAGS[MAIF_V_CTRLCFL]
	THEN EXITLOOP;
    SEARCH_MODE = 0;
    END;

IF .MAIL$GL_FLAGS[MAIF_V_CTRLCFL]
    THEN RETURN TRUE;

IF .BUFDESC[0] NEQ 0
THEN BEGIN
    IF NOT .HEAD_FLAG
	THEN (OUTPUT_HEADER(); HEAD_FLAG = 1);
    MAIL$PUT_OUTPUT(BUFDESC);
    END;

IF NOT .HEAD_FLAG
    THEN IF (.FOLDER_DESC[DSC$W_LENGTH] EQL 0)
	THEN SIGNAL(MAIL$_FILEMPTY,1,MAIL$Q_RD_DESC)
	ELSE SIGNAL(MAIL$_NONEFOUND,2,MAIL$Q_RD_DESC,FOLDER_DESC);

RETURN TRUE
END;

END
ELUDOM
