%TITLE	'Show/List Parse States and Data'
MODULE NCPSTASHL (IDENT = 'V04-000', LIST(NOOBJECT)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Control Program (NCP)
!
! ABSTRACT:
!
!	States and data for the parsing of NCP show and list commands
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE: 14-September-79
!
! MODIFIED BY:
!
!	V03-009	PRD0061		Paul R. DeStefano	05-Feb-1984
!		Allow OBJECT parameter to accept both name and number.
!
!	V03-008	PRD0053		Paul R. DeStefano	05-Feb-1984
!		Complete addition of and enable X25-Access parsing.
!
!	V03-007	RPG0007		Bob Grosso		19-Feb-1983
!		Accept CIRCUIT circuit-id and KNOWN CIRCUITS after
!		LOOP NODES.
!
!	V03-006	RPG0006		Bob Grosso		15-Nov-1982
!		Accept all information types with SHOW ADJACENT...
!		Accept CIRCUIT circuit-id and KNOWN CIRCUITS after
!		ACTIVE NODES and KNOWN NODES.
!
!	V03-005	RPG0005		Bob Grosso		28-Sep-1982
!		Add Show AREA.
!		Show Module Configurator, Console, Loader, Looper.
!
!	V03-004	RPG0004		Bob Grosso		14-Sep-1982
!		Correct prompting. MODULE X-P is now a noiseword
!		when a DTE, or GROUP qualifier is present.
!		Fix SHOW X25-P DTE to prompt for DTE name.
!
!	V03-003	TMH0003		Tim Halvorsen		16-Aug-1982
!		Fix SHOW X25-TRACE so that the tracepoint name is
!		sent in the NICE message if it is specified.
!
!	V03-002	RPG0002		Bob Grosso		03-Aug-1982
!		Include prompting for X-P.
!		Include prompting for X-S.
!
!	V03-001	RPG0001		Bob Grosso		14-Jul-1982
!		Add show module X25-Trace, X29-Server.
!
!	V006	RPG0006		Bob Grosso		13-May-1982
!		Add show module X25-protocol and X25-server,
!		X25-Access.
!
!	V005	TMH0005		Tim Halvorsen		08-Nov-1981
!		Fix SHOW LOGGING when SUMMARY follows KNOWN SINKS
!		on the command line.
!
!	V004	TMH0004		Tim Halvorsen		25-Aug-1981
!		Add SHOW LINK nnn.
!
!	V003	TMH0003		Tim Halvorsen		05-Jul-1981
!		Add SHOW MODULE.
!
!	V002	TMH0002		Tim Halvorsen		20-Jul-1981
!		Remove special casing of "LIN" as a LINE entity
!		and require full spelling of "LINE" to distinguish
!		between lines and links.  This makes the ambiguity
!		rules consistent.
!
!	V001	TMH0001		Tim Halvorsen		17-Jun-1981
!		Indicate object & link as system-specific entity
!		types in their respective SDB's.
!		Add SHOW CIRCUIT.
!--


!
! INCLUDE FILES:
!

	LIBRARY 'OBJ$:NMALIBRY';
	LIBRARY 'OBJ$:NCPLIBRY';
	LIBRARY 'SYS$LIBRARY:TPAMAC';
	LIBRARY 'SYS$LIBRARY:STARLET';

!
! EXTERNAL REFERENCES:
!

	ACT_DFN				! External symbols for action routines

%SBTTL	'Parameter blocks'

!
! BIND DATA:
!

!
!	Parameter Blocks
!

!
!	For General Use
!

	BUILD_PCL

	(DUMMY,

	, END, , ,

	)

	BUILD_SDB
	(SAR, NMA$C_ENT_ARE, VRB_ENT, DUMMY)


	BUILD_SDB
	(SLI, NMA$C_ENT_LIN, VRB_ENT, DUMMY)



BIND	PDB$G_SCS_ENT =				! Module Console
	UPLIT BYTE(0, %ASCIC 'CONSOLE');

	BUILD_SDB
	(SCS, NMA$C_ENT_MOD, SCS_ENT, DUMMY)


BIND	PDB$G_SLD_ENT =				! Module Loader
	UPLIT BYTE(0, %ASCIC 'LOADER');

	BUILD_SDB
	(SLD, NMA$C_ENT_MOD, SLD_ENT, DUMMY)


BIND	PDB$G_SLP_ENT =				! Module Looper
	UPLIT BYTE(0, %ASCIC 'LOOPER');

	BUILD_SDB
	(SLP, NMA$C_ENT_MOD, SLP_ENT, DUMMY)



	BUILD_SDB
	(SOB, -NMA$C_SENT_OBJ, VRB_ENT, DUMMY)


	BUILD_PBK

	(SHL,

	ADJ, LITB, NMA$C_ENT_ADJ, VRB_ENT,
	ACT, LITB, NMA$C_ENT_ACT, VRB_ENT,
	KWN, LITB, NMA$C_ENT_KNO, VRB_ENT,
	LUP, LITB, NMA$C_ENT_LOO, VRB_ENT,

	ARE, AREA, , VRB_ENT,
	TKN, TKN, , VRB_ENT,
	NOD, NADR, , VRB_ENT,
	EXE, LITL, 0, VRB_ENT,
	INF, LITB, 0, ,

	)

	BUILD_PBK

	(INF,

	TO, TKN, , ,

	)

!
!	Show / List Node
!
	BUILD_PCL
	(SNO,

	CIR, TKN,	PCNO_DLI, ,

	, END, , ,
	)


	BUILD_PBK
	(SNO,

	KCI, LITB, NMA$C_ENT_KNO, SNO_CIR,
	CIR, TKN, 0, ,

	)

	BUILD_SDB
	(SNO, NMA$C_ENT_NOD, VRB_ENT, SNO)

!
!	Show / List Circuit
!

	BUILD_PCL

	(SCI,

	NOD, NADR,	PCCI_ADJ, ,
	, END, , ,
	)


	BUILD_PBK

	(SCI,

	NOD, NADR, , ,
	)


	BUILD_SDB
	(SCI, NMA$C_ENT_CIR, VRB_ENT, SCI)

!
!	Show List Logging
!

	BUILD_PCL

	(SLO,

	SNO, NADR,	PCLO_SIN, ,

	, END, , ,

	)

	BUILD_PBK

	(SLO,

	SKN, LITB, NMA$C_ENT_KNO, SLO_SNO,
	SEX, LITL, 0, 		  SLO_SNO,
	SNO, NADR, , ,

	)

	BUILD_SDB

	(SLO, NMA$C_ENT_LOG, VRB_ENT, SLO)

!
!	Show List Links by node
!

	BUILD_PCL

	(SLK,

	NOD, NADR,	PCLK_NID, ,

	, END, , ,

	)

	BUILD_PBK

	(SLK,

	ENT, NADR, , VRB_ENT,		! Link address, not a node name
					! (but using same format as NADR)
	NOD, NADR, , ,

	)

	BUILD_SDB

	(SLK, -NMA$C_SENT_LNK, VRB_ENT, SLK)

!
!	Show Module Configurator
!
	BUILD_PCL

	(SCF,

	CIR, TKN,	PCCN_CIR, ,

	, END, , ,
	)

	BUILD_PBK
	(SCF,

	KCI, LITB, NMA$C_ENT_KNO, SCF_CIR,
	CIR, TKN, 0, ,

	)

BIND	PDB$G_CNF_ENT =				! Module Configurator
	UPLIT BYTE(0, %ASCIC 'CONFIGURATOR');

	BUILD_SDB

	(SCF, NMA$C_ENT_MOD, CNF_ENT, SCF)


!
!	Show Module X25-Access
!
	BUILD_PCL

	(SAC,

	NET, TKN, PCXA_NET, ,

	, END, , ,
	)

	BUILD_PBK

	(SAC,

	NET, TKN, , ,
	KNT, LITB, NMA$C_ENT_KNO, SAC_NET,	! known networks
	)

BIND	PDB$G_SAC_ENT =			! Access entity name
	UPLIT BYTE(0, %ASCIC 'X25-ACCESS');

	BUILD_SDB

	(SAC, NMA$C_ENT_MOD, SAC_ENT, SAC)
	

!
!	Show Module X25-Protocol
!
	BUILD_PCL

	(SPR,

	DTE, TKN, PCXP_DTE, ,
	GRP, TKN, PCXP_GRP, ,

	, END, , ,
	)

	BUILD_PBK

	(SPR,

	DTE, TKN, , ,
	KDT, LITB, NMA$C_ENT_KNO, SPR_DTE,	! known DTEs
	GRP, TKN, , ,
	KGR, LITB, NMA$C_ENT_KNO, SPR_GRP,	! known Groups
	)

BIND	PDB$G_SPR_ENT =			! Protocol entity name
	UPLIT BYTE(0, %ASCIC 'X25-PROTOCOL');

	BUILD_SDB

	(SPR, NMA$C_ENT_MOD, SPR_ENT, SPR)

	
!
!	Show Module X25-Server
!
	BUILD_PCL

	(SSE,

	DST, TKN, PCXS_DST, ,

	, END, , ,
	)

	BUILD_PBK

	(SSE,

	DST, TKN, , ,
	KDS, LITB, NMA$C_ENT_KNO, SSE_DST,	! destinations
	)


BIND	PDB$G_SSE_ENT =			! Server entity name
	UPLIT BYTE(0, %ASCIC 'X25-SERVER');

	BUILD_SDB

	(SSE, NMA$C_ENT_MOD, SSE_ENT, SSE)

	
!
!	Show Module X29-Server
!

!
!	Use PCL and PKBs from X25-Server, only SDB and Entity PDB 
!	are different
!

BIND	PDB$G_S9S_ENT =			! Server entity name
	UPLIT BYTE(0, %ASCIC 'X29-SERVER');

	BUILD_SDB

	(S9S, NMA$C_ENT_MOD, S9S_ENT, SSE)


	
!
!	Show Module X25-Trace
!
	BUILD_PCL

	(STR,

	TPT, TKN,	PCXT_TPT, ,

	, END, , ,
	)


	BUILD_PBK

	(STR,

	TPT, TKN, , ,
	KTP, LITB, NMA$C_ENT_KNO, STR_TPT,	! known TRACEPOINTS
	)


BIND	PDB$G_STR_ENT =			! Trace entity name
	UPLIT BYTE(0, %ASCIC 'X25-TRACE');

	BUILD_SDB

	(STR, NMA$C_ENT_MOD, STR_ENT, STR)

%SBTTL	'Prompt strings'

!
!	Build prompt strings
!

BIND
	PROMPT_STRINGS
	(SHL,

	ACT, '(AREAS, CIRCUITS, LINES, LOGGING, NODES): ',
	ADJ, '(NODES): ',
	ENT, %STRING ('(ACTIVE, ADJACENT, AREA, CIRCUIT, EXECUTOR,',CRLF,
	     	      'KNOWN, LINE, LOGGING, LOOP, MODULE, NODE, OBJECT): '),
	KWN, '(AREAS, CIRCUITS, LINES, LINKS, LOGGING, NODES, OBJECTS): ',
	MOD, %STRING ('Module    (CONFIGURATOR, CONSOLE, LOADER,',CRLF,
		      '           LOOPER, X25-ACCESS, X25-PROTOCOL,',CRLF,
		      '           X25-SERVER, X25-TRACE, X29-SERVER): '),

	)
	,

	PROMPT_STRINGS
	(SAR,

	ENT, 'Area number	(integer): ',

	)
	,

	PROMPT_STRINGS
	(SCI,

	ENT, 'Circuit name (16 characters): ',

	),

	PROMPT_STRINGS
	(SLI,

	ENT, 'Line ID (dev-c-u.t): ',

	),

	PROMPT_STRINGS
	(SLK,

	ENT, 'Link address     (0-65535): ',

	)
	;


BIND
	PROMPT_STRINGS
	(SLO,

	ENT, 'Type of logging (CONSOLE, FILE, MONITOR): ',
	SNO, 'Sink node (node-id, EXECUTOR): ',

	)
	,

	PROMPT_STRINGS
	(SNO,

	ENT, 'Node ID (node-name, address): ',

	)
	,

	PROMPT_STRINGS
	(SOB,

	ENT, 'Object name (8 characters): ',

	),

	PROMPT_STRINGS
	(SCF,

	DAT, '(CIRCUIT, KNOWN CIRCUITS): ',
	CIR, 'CIRCUIT name (16 characters): ',

	),

	PROMPT_STRINGS
	(SAC,

	DAT, '(NETWORK name, KNOWN NETWORKS): ',
	NET, 'NETWORK name (16 Characters): ',

	),

	PROMPT_STRINGS
	(SPR,

	DAT, '(DTE, GROUP, KNOWN DTES, KNOWN GROUPS): ',
	DTE, '(DTE name): ',
	GRP, '(GROUP name): ',

	),

	PROMPT_STRINGS
	(SSE,

	DAT, '(DESTINATION, KNOWN DESTINATIONS): ',
	DST, '(DESTINATION name): ',

	),

	PROMPT_STRINGS
	(STR,

	DAT, '(TRACEPOINT, KNOWN TRACEPOINTS): ',
	TPT, '(TRACEPOINT name): ',

	),

	PROMPT_STRINGS
	(S9S,

	DAT, '(DESTINATION, KNOWN DESTINATIONS): ',
	DST, '(DESTINATION name): ',

	)
	;

%SBTTL	'State Table Entry'

$INIT_STATE (NCP$G_STTBL_SHL, NCP$G_KYTBL_SHL);

!
!	Show / Purge Commands
!

!
!	Dispatch to entity types and prompt if end of string
!

	COMMAND_PROMPT
	(SHL, ENT, NCP$_INVKEY,

	( (SE_INFO_TYPES), ST_SHL_ENT),
	('ACTIVE',	ST_SHL_ACT,	ACT$SAVPRM, , , PBK$G_SHL_ACT),
	('ADJACENT',	ST_SHL_ADJ,	ACT$SAVPRM, , , PBK$G_SHL_ADJ),
	('AREA',	ST_SAR_ENT),
	('CIRCUIT',	ST_SCI_ENT),
	('CONFIGURATOR',ST_SCF_DAT),
	('CONSOLE',	ST_SCS_ENT),
	('DTE',		ST_SPR_DTE, , NMA$C_ENT_MOD, NCP$GL_OPTION),
	('GROUP',	ST_SPR_GRP, , NMA$C_ENT_MOD, NCP$GL_OPTION),
	('EXECUTOR',	ST_SNO_GO,	ACT$SAVPRM, NMA$C_ENT_NOD, 
					NCP$GL_OPTION, PBK$G_SHL_EXE),
	('KNOWN',	ST_SHL_KWN,	ACT$SAVPRM, , , PBK$G_SHL_KWN),
	('LINE',	ST_SLI_ENT),
	('LINK',	ST_SLK_ENT),
	('LOADER',	ST_SLD_ENT),
	('LOGGING',	ST_SLO_ENT),
	('LOOP',	ST_SHL_LUP,	ACT$SAVPRM, , , PBK$G_SHL_LUP),
	('LOOPER',	ST_SLP_ENT),
	('MODULE',	ST_SHL_MOD),
	('NODE',	ST_SNO_ENT),
	('OBJECT',	ST_SOB_ENT),
	('TRACEPOINT',	ST_STR_TPT, , NMA$C_ENT_MOD, NCP$GL_OPTION),
	('X25',		ST_SHL_X25),
	('X29',		ST_SHL_X29)

	)

%SBTTL	'Active, Adjacent, Known and Loop Entities'

!
!	For each, dispatch or prompt if end of string
!

!
!	Active Entities
!

	COMMAND_PROMPT
	(SHL, ACT, NCP$_INVKEY,

	('AREAS',	ST_SAR_GO),
	('CIRCUITS',	ST_SCI_GO),
	('LINES',	ST_SLI_GO),
	('LOGGING',	ST_SLO_GO),
	('NODES',	ST_ADJ_NOD)	! Use same path for Active nodes as for Adjacent nodes

	)

!
!	Adjacent Entities
!

	COMMAND_PROMPT
	(SHL, ADJ, NCP$_INVKEY,

	('NODES', ST_ADJ_NOD)

	)

$STATE	(ST_ADJ_NOD,
	('CIRCUIT', ST_ADJ_CIR),
	('KNOWN', ST_ADJ_KCI),
	(TPA$_LAMBDA, ST_SNO_GO),
	(TPA$_EOS, ST_SNO_GO)
	);

$STATE	(ST_ADJ_CIR,
	( (SE_CIRC_ID), ST_SNO_GO, ACT$SAVPRM, , , PBK$G_SNO_CIR)
	);

$STATE	(ST_ADJ_KCI,
	('CIRCUITS', ST_SNO_GO, ACT$SAVPRM, , , PBK$G_SNO_KCI)
	);

!
!	Known Entities
!

	COMMAND_PROMPT
	(SHL, KWN, NCP$_INVKEY,

	('AREAS',	ST_SAR_GO),
	('CIRCUITS',	ST_SCI_GO),
	('DTES',	ST_SPR_DOIT, ACT$SAVPRM, NMA$C_ENT_MOD, NCP$GL_OPTION, PBK$G_SPR_KDT),
	('GROUPS',	ST_SPR_DOIT, ACT$SAVPRM, NMA$C_ENT_MOD, NCP$GL_OPTION, PBK$G_SPR_KGR),
	('LINES',	ST_SLI_GO),
	('LINKS',	ST_SLK_KWN),
	('LOGGING',	ST_SLO_GO),
	('NODES',	ST_ADJ_NOD), ! Use same path for KNOWN NODES as for ADJACENT NODES
	('OBJECTS',	ST_SOB_GO),
	('TRACEPOINTS',	ST_STR_DOIT, ACT$SAVPRM, NMA$C_ENT_MOD, NCP$GL_OPTION, PBK$G_STR_KTP)

	)

!
!	Loop Entities
!

$STATE	(ST_SHL_LUP,
	('NODES', ST_LUP_NOD),			! Ignore noise word
	(TPA$_LAMBDA, ST_SNO_GO)		! Nodes only are valid
	);

$STATE	(ST_LUP_NOD,
	('CIRCUIT', ST_LUP_CIR),
	('KNOWN', ST_LUP_KCI),
	(TPA$_LAMBDA, ST_SNO_GO),
	(TPA$_EOS, ST_SNO_GO)
	);

$STATE	(ST_LUP_CIR,
	( (SE_CIRC_ID), ST_SNO_GO, ACT$SAVPRM, , , PBK$G_SNO_CIR)
	);

$STATE	(ST_LUP_KCI,
	('CIRCUITS', ST_SNO_GO, ACT$SAVPRM, , , PBK$G_SNO_KCI)
	);

%SBTTL	'Show / List Area'

!
!	Show / List Area
!

!
!	Collect the Area number or prompt
!

	COMMAND_PROMPT
	(SAR, ENT, NCP$_INVVAL,

	( (SE_AREA_NUM), , ACT$SAVPRM, , , PBK$G_SHL_ARE)

	)

!
!	Collect the information type
!

$STATE	(ST_SAR_GO,
	( (ST_INF_TYPE2) )
	);

!
!	Perform the function
!

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_ENT_ARE, NCP$GL_OPTION, )
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SAR)
	);

%SBTTL	'Show / List Circuit'

!
!	Show / List Circuit
!

!
!	Collect the circuit name or prompt
!

	COMMAND_PROMPT
	(SCI, ENT, NCP$_INVVAL,

	( (SE_CIRC_ID), , ACT$SAVPRM, , , PBK$G_SHL_TKN)

	)

!
!	Collect the information type
!

$STATE	(ST_SCI_GO,
	( (ST_INF_TYPE2))
	);

$STATE	(,
	('ADJACENT'),
	(TPA$_LAMBDA, ST_SCI_GONE),
	);

$STATE	(,
	('NODE')
	);

$STATE	(,
	((SE_NODE_ID), , ACT$SAVPRM, , , PBK$G_SCI_NOD),
	);

$STATE	(,
	( (ST_INF_TYPE2) )
	);

!
!	Perform the function
!

$STATE	(ST_SCI_GONE,
	(TPA$_LAMBDA, , , NMA$C_ENT_CIR, NCP$GL_OPTION, )
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SCI)
	);

%SBTTL	'Show / List Line'

!
!	Show / List Line
!

!
!	Collect the line ID or prompt
!

	COMMAND_PROMPT
	(SLI, ENT, NCP$_INVVAL,

	( (SE_LINE_ID), , ACT$SAVPRM, , , PBK$G_SHL_TKN)

	)

!
!	Collect the information type
!

$STATE	(ST_SLI_GO,
	( (ST_INF_TYPE2) )
	);

!
!	Perform the function
!

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_ENT_LIN, NCP$GL_OPTION, )
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SLI)
	);

%SBTTL	'Show / List Links'

!
!	Show / List Links
!

!
!	Collect the Link address or prompt
!

	COMMAND_PROMPT
	(SLK, ENT, NCP$_INVVAL,

	((SE_LINK_ID),ST_SLK_GO, ACT$SAVPRM,,, PBK$G_SLK_ENT)
	)

!
!	Show known links (and optionally select only those with a given node)
!

$STATE	(ST_SLK_KWN,
	('WITH'),
	(TPA$_LAMBDA, ST_SLK_GO)
	);

$STATE	(,
	('NODE'),
	);

$STATE	(,
	((SE_NODE_ID), ST_SLK_GO, ACT$SAVPRM, , , PBK$G_SLK_NOD),
	)

!
!	Collect the information type
!

$STATE	(ST_SLK_GO,
	( (ST_INF_TYPE1) )
	);

!
!	Perform the function
!

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_SENT_LNK, NCP$GL_OPTION)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SLK)
	);


%SBTTL	'Show / List Logging'

!
!	Show / List Logging
!

!
!	Collect the logging type
!

	COMMAND_PROMPT
	(SLO, ENT, NCP$_INVVAL,

	( (SE_LOG_TYP) )

	)

!
!	Now the information type
!

$STATE	(ST_SLO_GO,
	( (ST_INF_TYPE3) )
	);

!
!	Now any remaining qualifiers
!

$STATE	(,
	('SINK',	ST_SLO_NOD),
	('KNOWN',	ST_SLO_SKN),
	(TPA$_LAMBDA,	ST_SLO_DOIT),
	);

!
!	Parse rest of SINK NODE xxx
!

$STATE	(ST_SLO_NOD,
	('NODE'),
	(TPA$_LAMBDA)
	);


!
!	The node id for the sink node
!

	COMMAND_PROMPT
	(SLO, SNO, NCP$_INVVAL,

	('EXECUTOR', ST_SLO_DOIT, ACT$SAVPRM, , , PBK$G_SLO_SEX),
	( (SE_NODE_ID), ST_SLO_DOIT, ACT$SAVPRM, , , PBK$G_SLO_SNO)

	)

!
!	Parse rest of KNOWN SINKS
!

$STATE	(ST_SLO_SKN,
	('SINKS'),
	(TPA$_LAMBDA)
	);

$STATE	(,
	(TPA$_LAMBDA, , ACT$SAVPRM, , , PBK$G_SLO_SKN)
	);

!
!	Perform the function
!

$STATE	(ST_SLO_DOIT,
	((ST_INF_TYPE3))		! Collect info type here too
	);

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_ENT_LOG, NCP$GL_OPTION)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SLO)
	);

%SBTTL	'Show / List Node'

!
!	Show / List Node
!

!
!	Obtain the node id
!

	COMMAND_PROMPT
	(SNO, ENT, NCP$_INVVAL,

	( (SE_NODE_ID), , ACT$SAVPRM, , , PBK$G_SHL_NOD)

	)

!
!	Now the information type
!

$STATE	(ST_SNO_GO,
	( (ST_INF_TYPE2) )
	);

!
!	Now perform the function
!

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_ENT_NOD, NCP$GL_OPTION, )
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SNO)
	);

%SBTTL	'Show / List Objects'

!
!	Show / List Objects
!

!
!	Obtain the object name/number or prompt
!

	COMMAND_PROMPT
	(SOB, ENT, NCP$_INVVAL,

	( (SE_OBJECT_ID), , ACT$SAVPRM, , , PBK$G_SHL_TKN)

	)

!
!	Obtain the information type desired
!

$STATE	(ST_SOB_GO,
	( (ST_INF_TYPE1) ),
	);

!
!	Perform the function
!

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_SENT_OBJ, NCP$GL_OPTION, )
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SOB)
	);


%SBTTL	'Show / List Configurator'

!
!	Show / List Configurator
!

!
!	Obtain the Configurator qualifier type or prompt
!

	COMMAND_PROMPT
	(SCF, DAT, NCP$_INVVAL,

	('KNOWN', ST_CNF_KWN),
	('CIRCUIT', ST_CNF_CIR)

	)

$STATE	(ST_CNF_KWN,
	('CIRCUITS', ST_SCF_GO, ACT$SAVPRM, , , PBK$G_SCF_KCI)
	);

$STATE	(ST_CNF_CIR,
	( (SE_CIRC_ID), , ACT$SAVPRM, , , PBK$G_SCF_CIR),
	(TPA$_EOS, ST_CNF_CIR, ACT$PRMPT, , , PMT$G_SCF_CIR)
	);

!
!	Obtain the information type desired
!

$STATE	(ST_SCF_GO,
	( (ST_INF_TYPE1) ),
	);

!
!	Perform the function
!

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_ENT_MOD, NCP$GL_OPTION, )
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SCF)
	);


%SBTTL	'Show / List Console'

!
!	Show / List Console
!

$STATE	(ST_SCS_ENT,		!	Obtain the information type desired
	( (ST_INF_TYPE1) ),
	);

!
!	Perform the function
!

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_ENT_MOD, NCP$GL_OPTION, )
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SCS)
	);


%SBTTL	'Show / List Loader'

!
!	Show / List Loader
!

$STATE	(ST_SLD_ENT,		!	Obtain the information type desired
	( (ST_INF_TYPE1) ),
	);

!
!	Perform the function
!

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_ENT_MOD, NCP$GL_OPTION, )
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SLD)
	);


%SBTTL	'Show / List Looper'

!
!	Show / List Looper
!

$STATE	(ST_SLP_ENT,		!	Obtain the information type desired
	( (ST_INF_TYPE1) ),
	);

!
!	Perform the function
!

$STATE	(,
	(TPA$_LAMBDA, , , NMA$C_ENT_MOD, NCP$GL_OPTION, )
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SLP)
	);


%SBTTL	'Show / List Module'

!
!	Show / List Module
!

!
!	Obtain the module name or prompt
!

	COMMAND_PROMPT
	(SHL, MOD, NCP$_INVVAL,

	('CONFIGURATOR',ST_SCF_DAT),
	('CONSOLE',	ST_SCS_ENT),
	('LOADER',	ST_SLD_ENT),
	('LOOPER',	ST_SLP_ENT),
	('X25', 	ST_SHL_X25),
	('X29', 	ST_SHL_X29)
	)

$STATE	(ST_SHL_X25,
	('-'));
$STATE	(,
	('ACCESS',	ST_SAC_GO,, NMA$C_ENT_MOD, NCP$GL_OPTION),
	('PROTOCOL',	ST_SPR_GO,, NMA$C_ENT_MOD, NCP$GL_OPTION),
	('SERVER',	ST_SSE_GO,, NMA$C_ENT_MOD, NCP$GL_OPTION),
	('TRACE',	ST_STR_GO,, NMA$C_ENT_MOD, NCP$GL_OPTION)
	);

$STATE	(ST_SHL_X29,
	('-'));
$STATE	(,
	('SERVER',	ST_S9S_GO,, NMA$C_ENT_MOD, NCP$GL_OPTION)
	);

!
!	SHOW MODULE X25-ACCESS
!

$STATE	(ST_SAC_GO,
	(TPA$_EOS, ST_SAC_PMT_DAT),
	(TPA$_LAMBDA, ST_SAC_DAT)
	);

$STATE	(ST_SAC_PMT_DAT,
	(TPA$_LAMBDA,,ACT$PRMPT,,,PMT$G_SAC_DAT));

$STATE	(ST_SAC_DAT,
	((ST_INF_TYPE1))
	);

$STATE	(,
	('KNOWN', ST_SAC_DAT_KNW),
	('NETWORK', ST_SAC_DAT_NET),
	);


$STATE	(ST_SAC_DAT_NET,
	(TPA$_LAMBDA));

!
!	Collect the NETWORK name or prompt
!

	COMMAND_PROMPT
	(SAC, NET, NCP$_INVVAL,

	((SE_NET_NAME),ST_SAC_DOIT, ACT$SAVPRM, , , PBK$G_SAC_NET),
	)


$STATE	(ST_SAC_DAT_KNW,
	(TPA$_EOS, TPA$_EXIT, ACT$SAVPRM, , , PBK$G_SAC_KNT),
	('NETWORKS', , ACT$SAVPRM, , , PBK$G_SAC_KNT),
	(TPA$_LAMBDA, ST_SAC_DOIT)
	);


$STATE	(ST_SAC_DOIT,
	((ST_INF_TYPE1))
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SAC)
	);


!
!	SHOW MODULE X25-PROTOCOL
!

$STATE	(ST_SPR_GO,
	(TPA$_EOS, ST_SPR_PMT_DAT),
	(TPA$_LAMBDA, ST_SPR_DAT)
	);

!
!	Obtain the database type or prompt
!

$STATE	(ST_SPR_PMT_DAT,
	(TPA$_LAMBDA,, ACT$PRMPT,,, PMT$G_SPR_DAT));

$STATE	(ST_SPR_DAT,
	((ST_INF_TYPE1))
	);

$STATE	(,
	('DTE', ST_SPR_DTE),
	('GROUP', ST_SPR_GRP),
	('KNOWN', ST_SPR_KNW),
	(TPA$_LAMBDA, ST_SPR_DOIT)
	);

$STATE	(ST_SPR_KNW,
	('DTES', ST_SPR_DOIT, ACT$SAVPRM, , , PBK$G_SPR_KDT),
	('GROUPS', ST_SPR_DOIT, ACT$SAVPRM, , , PBK$G_SPR_KGR),
	(TPA$_LAMBDA, ST_SPR_DOIT)
	);

!
!	Collect the DTE name or prompt
!
	COMMAND_PROMPT
	(SPR, DTE, NCP$_INVVAL,

	((SE_DTE_NUMBER), ST_SPR_DOIT, ACT$SAVPRM, , , PBK$G_SPR_DTE)
	)


!
!	Collect the GROUP name or prompt
!
	COMMAND_PROMPT
	(SPR, GRP, NCP$_INVVAL,

	((SE_GRP_NAME), ST_SPR_DOIT, ACT$SAVPRM, , , PBK$G_SPR_GRP)
	)

$STATE	(ST_SPR_DOIT,
	((ST_INF_TYPE1))
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SPR)
	);

!
!	SHOW MODULE X25-SERVER
!
$STATE	(ST_SSE_GO,
	(TPA$_EOS, ST_SSE_PMT_DAT),
	(TPA$_LAMBDA, ST_SSE_DAT)
	);

!
!	Obtain the database type or prompt
!

$STATE	(ST_SSE_PMT_DAT,
	(TPA$_LAMBDA,, ACT$PRMPT,,, PMT$G_SSE_DAT));

$STATE	(ST_SSE_DAT,
	((ST_INF_TYPE1))
	);

$STATE	(,
	('KNOWN', ST_SSE_KNW),
	('DESTINATION', ST_SSE_DST),
	(TPA$_LAMBDA, ST_SSE_DOIT)
	);

$STATE	(ST_SSE_KNW,
	('DESTINATIONS', ST_SSE_DOIT, ACT$SAVPRM, , , PBK$G_SSE_KDS),
	(TPA$_LAMBDA, ST_SSE_DOIT)
	);


!
!	Collect the DESTINATION name or prompt
!
	COMMAND_PROMPT
	(SSE, DST, NCP$_INVVAL,

	((SE_DEST_NAME), ST_SSE_DOIT, ACT$SAVPRM, , , PBK$G_SSE_DST)
	)

$STATE	(ST_SSE_DOIT,
	((ST_INF_TYPE1))
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_SSE)
	);

!
!	SHOW MODULE X25-TRACE
!

$STATE	(ST_STR_GO,
	((ST_INF_TYPE1))
	);

$STATE	(,
	('KNOWN', ST_STR_KNW),
	('TRACEPOINT', ST_STR_TPT),
	(TPA$_LAMBDA, ST_STR_DOIT)
	);

$STATE	(ST_STR_KNW,
	('TRACEPOINTS', ST_STR_DOIT, ACT$SAVPRM, , , PBK$G_STR_KTP),
	(TPA$_LAMBDA, ST_STR_DOIT)
	);

!
!	Collect the TRACEPOINT name or prompt
!
	COMMAND_PROMPT
	(STR, TPT, NCP$_INVVAL,

	((SE_TRCPNT_NAME), ST_STR_DOIT, ACT$SAVPRM, , , PBK$G_STR_TPT)
	)


$STATE	(ST_STR_DOIT,
	((ST_INF_TYPE1))
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_STR)
	);

!
!	SHOW MODULE X29-SERVER
!

$STATE	(ST_S9S_GO,
	(TPA$_EOS, ST_S9S_PMT_DAT),
	(TPA$_LAMBDA, ST_S9S_DAT)
	);

!
!	Obtain the database type or prompt
!

$STATE	(ST_S9S_PMT_DAT,
	(TPA$_LAMBDA,, ACT$PRMPT,,, PMT$G_S9S_DAT));

$STATE	(ST_S9S_DAT,
	((ST_INF_TYPE1))
	);

$STATE	(,
	('KNOWN', ST_S9S_KNW),
	('DESTINATION', ST_S9S_DST),
	(TPA$_LAMBDA, ST_S9S_DOIT)
	);

$STATE	(ST_S9S_KNW,
	('DESTINATIONS', ST_S9S_DOIT, ACT$SAVPRM, , , PBK$G_SSE_KDS),
	(TPA$_LAMBDA, ST_S9S_DOIT)
	);

!
!	Collect the DESTINATION name or prompt
!
	COMMAND_PROMPT
	(S9S, DST, NCP$_INVVAL,

	((SE_DEST_NAME), ST_S9S_DOIT, ACT$SAVPRM, , , PBK$G_SSE_DST)
	)

$STATE	(ST_S9S_DOIT,
	((ST_INF_TYPE1))
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_SHOLIS, , , SDB$G_S9S)
	);

%SBTTL	'Subexpressions'

!
!	Information type decoding
!

!
!	Type 1 is characteristics, status, summary and to
!

$STATE	(ST_INF_TYPE1,
	( (SE_INFO_TYPES), ST_INF_TYPE1),
	( (SE_INFO_TO), ST_INF_TYPE1),
	(TPA$_LAMBDA, TPA$_EXIT)
	);

!
!	Type 2 is characteristics, status, summary, counters and to
!

$STATE	(ST_INF_TYPE2,
	( (SE_INFO_TYPES), ST_INF_TYPE2),
	( (SE_INFO_TO), ST_INF_TYPE2),
	(TPA$_LAMBDA, TPA$_EXIT)
	);

!
!	Type 3 is characteristics, status, summary, events and to
!

$STATE	(ST_INF_TYPE3,
	( (SE_INFO_TYPES), ST_INF_TYPE3),
	( (SE_INFO_TO), ST_INF_TYPE3),
	(TPA$_LAMBDA, TPA$_EXIT)
	);


!
!	Common parsing of the common types
!

$STATE	(SE_INFO_TYPES,
	('CHARACTERISTICS',	TPA$_EXIT, ACT$SAVPRM,
			NMA$C_OPINF_CHA ^ $BITPOSITION(NMA$V_OPT_INF),
			NCP$GL_OPTION, PBK$G_SHL_INF),
	('STATUS',	TPA$_EXIT, ACT$SAVPRM,
			NMA$C_OPINF_STA ^ $BITPOSITION(NMA$V_OPT_INF),
			NCP$GL_OPTION, PBK$G_SHL_INF),
	('SUMMARY',	TPA$_EXIT, ACT$SAVPRM,
			NMA$C_OPINF_SUM ^ $BITPOSITION(NMA$V_OPT_INF),
			NCP$GL_OPTION, PBK$G_SHL_INF),
	('EVENTS', 		TPA$_EXIT, ACT$SAVPRM,
			NMA$C_OPINF_EVE ^ $BITPOSITION(NMA$V_OPT_INF),
			NCP$GL_OPTION, PBK$G_SHL_INF),
	('COUNTERS', 	TPA$_EXIT, ACT$SAVPRM,
			NMA$C_OPINF_COU ^ $BITPOSITION(NMA$V_OPT_INF),
			NCP$GL_OPTION, PBK$G_SHL_INF),
	);

!
!	Common handling of TO file-id
!

$STATE	(SE_INFO_TO,
	('TO'),
	);

$STATE	(,
	( (SE_FILE_ID), TPA$_EXIT, ACT$SAVPRM, , , PBK$G_INF_TO),
	);

%SBTTL	'Define Subexpressions from Library'

!
!	Define subexpressions from library
!	Any additions must have a macro defined in module NCPLIBRY.
!

	SEM_AREA_NUM		! Node area number
	SEM_FILE_ID		! File id strings
	SEM_LINE_ID		! Line id strings
	SEM_LOG_TYP		! Logging entity type
	SEM_NODE_ID		! Node id strings
	SEM_OBJECT_ID		! Object name/number
	SEM_CIRC_ID		! Circuit name
	SEM_LINK_ID		! Link address
	SEM_DTE_NUMBER		! DTE number
	SEM_GRP_NAME		! Group name
	SEM_DEST_NAME		! Destination name
	SEM_TRCPNT_NAME		! Tracepoint name
	SEM_NET_NAME		! Network name

%SBTTL	'Object Listing of Parse Table'

END				!End of module
ELUDOM
