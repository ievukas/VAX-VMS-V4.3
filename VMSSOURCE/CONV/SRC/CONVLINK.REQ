%TITLE	'VAX-11 CONVERT'

!
! Version:	'V04-000'
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT
!
! Abstract:	Linkage definitions for the convert utilities
!
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Keith B Thompson	Creation date:	May-1982
!
!
! Modified by:
!
!	V03-002	KBT0477		Keith B. Thompson	29-Jan-1983
!		Add init_fast_load, load_secondary, extend_area,
!		check_key and load_key linkage
!
!	V03-001	KBT0437		Keith B. Thompson	16-Dec-1982
!		Preserve R1 in get_vm and get_tmp_vm calls
!
!****


!	Linkages  NOTE: By only using reg. 2-11 a normal JSB or CALLx
!			link will preserve these registers.
!
!	Linkage naming convention:
!
!		General Convert linkage:	CL$linkage
!
!		Reclaim specific linkage:	RL$linkage
!
!		Add_key specific linkage:	AL$linkage
!
!		Specific Routine Linkage:	CL$routine_name,
!						RL$routine_name or
!						AL$routine_name
!
!	Registers:
!
!		_REG_11		11 - KEY_DESC
!
!		_REG_10		11 - KEY_DESC
!				10 - CTX
!
!		_REG_9		11 - KEY_DESC
!				10 - CTX
!				 9 - BUCKET
!
!		_REG_8		11 - KEY_DESC
!				10 - CTX
!				 9 - BUCKET
!				 8 - RECORD_CTRL (CL link)
!				     KEY_POINTER (RL link)
!
LINKAGE

	! Generic jsb link
	!
	CL$JSB_LINK		= JSB,

	CL$JSB_LINK_ARG1	= JSB ( REGISTER = 1 ),

	CL$JSB_LINK_ARG2	= JSB ( REGISTER = 1,REGISTER = 2 ),

	! Convert
	!
	CL$JSB_REG_11	= JSB : GLOBAL( KEY_DESC	= 11 ),

	CL$JSB_REG_10	= JSB : GLOBAL( CTX		= 10,
					KEY_DESC	= 11 ),

	CL$JSB_REG_9	= JSB : GLOBAL( BUCKET		= 9,
					CTX		= 10,
					KEY_DESC	= 11 ),

	CL$JSB_REG_8	= JSB : GLOBAL( RECORD_CTRL	= 8,
					BUCKET		= 9,
					CTX		= 10,
					KEY_DESC	= 11 ),

	! Reclaim linkages
	!
	RL$JSB_REG_9	= JSB : GLOBAL( BUCKET		= 9,
					CTX		= 10,
					KEY_DESC	= 11 ),

	RL$JSB_REG_8	= JSB : GLOBAL( KEY_POINTER	= 8,
					BUCKET		= 9,
					CTX		= 10,
					KEY_DESC	= 11 ),

	! Add_key linkages
	!
	AL$JSB_REG_11	= JSB : GLOBAL( KEY_DESC	= 11 ),


	! Routine specific links
	!
	CL$ALLOCATE_CTX		= JSB : GLOBAL( CTX	= 10 ),
	CL$COMPARE_KEY		= JSB ( REGISTER = 0,		! Segment type
					REGISTER = 1,		! Segment size
					REGISTER = 2,		! New key seq.
					REGISTER = 3 ),		! Old key seq.
	CL$CONVERT_VBN_ID	= JSB : GLOBAL( SORT_VBN = 6,SORT_ID = 7 ),
	CL$COPY_KEY		= JSB :	GLOBAL( RECORD_CTRL = 8,
						CTX	    = 10,
						KEY_DESC    = 11 ),
	CL$CVT_TO_ASC		= JSB,
	CL$EXTEND_AREA		= JSB,
	CL$FAST_LOAD		= JSB : GLOBAL( KEY_DESC = 11 ),
	CL$FREE_VM		= JSB,
	CL$FREE_TEMP_VM		= JSB,
	CL$GET_NEXT_KEY		= JSB : GLOBAL( KEY_DESC = 11 ),
	CL$GET_RECORD		= JSB,
	CL$GET_TEMP_VM		= JSB : PRESERVE ( 1 ),
	CL$GET_VM		= JSB : PRESERVE ( 1 ),
	CL$INIT_FAST_LOAD	= JSB : GLOBAL( BUCKET	 = 9,
						CTX	 = 10,
						KEY_DESC = 11 ),
	CL$LOAD_SECONDARY	= JSB : GLOBAL( BUCKET	 = 9,
						CTX	 = 10,
						KEY_DESC = 11 ),
	CL$LOAD_SIDR		= JSB : GLOBAL( CTX = 10 ),
	CL$READ_PROLOGUE	= JSB,
	CL$SET_KEY_DESC		= JSB : GLOBAL( KEY_DESC = 11 ),
	CL$SORT_PRIMARY		= JSB : GLOBAL( KEY_DESC = 11 ),
	CL$SORT_SECONDARY	= JSB : GLOBAL( KEY_DESC = 11 ),
	CL$WRITE_AREA_DESC	= JSB ( REGISTER = 1 ),
	CL$WRITE_KEY_DESC	= JSB : GLOBAL( KEY_DESC = 11 ),

	AL$CHECK_KEY		= JSB : GLOBAL( KEY_DESC = 11 ),
	AL$LOAD_KEY		= JSB : GLOBAL( KEY_DESC = 11 );

!	Global register definitions
!
MACRO

	! Global registers
	!
	DEFINE_KEY_DESC_GLOBAL	= GLOBAL REGISTER
					KEY_DESC	= 11 : REF BLOCK [ ,BYTE ]%,

	DEFINE_CTX_GLOBAL	= GLOBAL REGISTER
					CTX		= 10 : REF BLOCK [ ,BYTE ]%,

	DEFINE_BUCKET_GLOBAL	= GLOBAL REGISTER
					BUCKET		= 9 : REF BLOCK [ ,BYTE ]%,

	DEFINE_KEY_POINTER_GLOBAL=GLOBAL REGISTER
					KEY_POINTER	= 8%,

	DEFINE_RECORD_CTRL_GLOBAL=GLOBAL REGISTER
					RECORD_CTRL	= 8 : REF BLOCK [ ,BYTE ]%,

	DEFINE_VBN_ID_GLOBAL	= GLOBAL REGISTER
					SORT_VBN	= 6,
					SORT_ID		= 7%,

	DEFINE_CTX		= EXTERNAL REGISTER
					CTX		: REF BLOCK [ ,BYTE ]%,

	DEFINE_BUCKET		= EXTERNAL REGISTER
					BUCKET		: REF BLOCK [ ,BYTE ]%,

	DEFINE_KEY_DESC		= EXTERNAL REGISTER
					KEY_DESC	: REF BLOCK [ ,BYTE ]%,

	DEFINE_KEY_POINTER	= EXTERNAL REGISTER
					KEY_POINTER	: REF BLOCK [ ,BYTE ]%,

	DEFINE_RECORD_CTRL	= EXTERNAL REGISTER
					RECORD_CTRL	: REF BLOCK [ ,BYTE ]%;


