	$BEGIN	RMS0ENTER,000,RM$RMS,<ENTER FILE IN DIRECTORY>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: RMS32
;
; ABSTRACT:
;	This is the highest level routine to perform the $ENTER function
;
; ENVIRONMENT:
;	VAX/VMS
;
; AUTHOR:
;	Tim Halvorsen	Aug-1979
;
; MODIFIED BY:
;
;	V03-011	DGB0058		Donald G. Blair		25-Jun-1984
;		Fix RM$RECOVER_FWA so that rather than include the 
;		default directory spec for files on tape, it gives such
;		files a "[]" directory spec.
;
;	V03-010	RAS0295		Ron Schaefer		17-Apr-1984
;		Make RM$RECOVER_FWA setup the device as if it were
;		concealed using the NAM$T_DVI device id.
;		This makes sure that no translation of the name is needed.
;
;	V03-009	JEJ0026		J E Johnson		11-Apr-1984
;		Tie off invalid network operations.
;
;	V03-008	RAS0288		Ron Schaefer		 5-Apr-1984
;		Fix RM$RECOVER_FWA for explicit rooted directories.
;		Note that the filespec pattern passed to the ACP
;		is in the caller's address space.
;
;	V03-007	DGB0030		Donald G. Blair		19-Mar-1984
;		Implement the XAB$V_PROPAGATE bit.
;
;	V03-006	DGB0021		Donald G. Blair		06-Mar-1984
;		Use full-length fib in order to support access mode 
;		protected files.
;
;	V03-005	RAS0262		Ron Schaefer		 6-Mar-1984
;		Change magtape specs to include a null "[]" directory;
;		add symbol definitions.
;
;	V03-004	RAS0219		Ron Schaefer		 8-Dec-1983
;		Fix FWA constant and probe the NAM block correctly.
;
;	V03-003	KBT0584		Keith B. Thompson	12-Aug-1983
;		Clean up fwa constants
;
;	V03-002	KBT0564		Keith B. Thompson	25-Jul-1983
;		Make rm$recover_fwa work with new root directory format
;
;	V03-001	KBT0179		Keith B. Thompson	23-Aug-1982
;		Reorganize psects and rename entry point back to single '$'
;
;--

	.SBTTL	DEFINITIONS

;
;	SYMBOL DEFINITIONS
;

	$DEVDEF
	$FABDEF
	$FIBDEF
	$FSCBDEF
	$FWADEF
	$IFBDEF
	$IODEF
	$NAMDEF
	$RMSDEF
	$XABPRODEF

;
;	OWN STORAGE
;

RM$ENTXAB_ARGS::
	.BYTE	XAB$C_PRO,XAB$C_PROLEN_V3,XBC$C_ENTPRO
	.BYTE	0


	.SBTTL	RMS$ENTER, Enter File in Directory

;++
;	
; RMS$ENTER - Enter file name in directory
;
; INPUTS:
;
;	AP = address of user argument list
;	Expanded name string
;	DVI = DEVICE NAME
;	DID = DIRECTORY ID
;	FID = FILE ID to be entered into the directory
;
; OUTPUTS:
;
;	RESULT NAME STRING
;--

	$ENTRY	RMS$ENTER

	BSBW	RM$FSETI			; create IFAB
						; R9 = IFAB; R8 = FAB
	MOVL	FAB$L_NAM(R8),R7		; get NAM address
	BSBW	RM$CHKNAM			; check NAM validity
	BLBC	R0,90$				; branch if error

	BBS	#NAM$V_NODE,-			; If this is a network
		NAM$L_FNB(R7),-			; device proceed directly
		NTENTER				; to network specific code.

;
;	Recover FWA context from EXPANDED NAME STRING
;

	BSBB	RM$RECOVER_FWA			; recover FWA context
	BLBC	R0,90$				; branch if error

;
;	Call ACP to enter the file name
;

	MOVAB	RM$ENTXAB_ARGS,AP		; ap = argument for xab-scan
	BSBW	RM$XAB_SCAN			; handle pro xab
	BLBC	R0,90$
	MOVZWL	#FIB$C_LENGTH,FWA$Q_FIB(R10)	; setup FIB descriptor
	MOVAB	FWA$T_FIBBUF(R10),-
		FWA$Q_FIB+4(R10)
	CLRW	FIB$W_VERLIMIT+FWA$T_FIBBUF(R10); assure version limit = 0
	MOVZWL	#FWA$S_NAMEBUF+-
		FWA$S_TYPEBUF+FWA$S_VERBUF,-
		FWA$Q_NAME(R10)			; setup result descriptor
	CLRQ	-(SP)				; P5/P6 = 0
	PUSHAB	FWA$Q_NAME(R10)			; P4=addr. of rslt descriptor
	PUSHAB	IFB$L_RNS_LEN(R9)		; P3=longword for length
	PUSHAB	FWA$Q_RNS(R10)			; P2=file name string descript.
	MOVZWL	#IO$_CREATE,R0			; ACP function code
	BSBW	RM$FCPFNC			; call ACP and wait for reply
	BLBS	R0,40$				; branch if ok
	RMSERR	ENT,R1				; set default error
	BSBW	RM$MAPERR			; map STV status
	BRB	90$

;
;	Return the RESULT NAME STRING to the user buffer
;

40$:	BSBW	RM$COPY_RESULT			; copy RESULT NAME STRING
	BLBC	R0,90$				; branch if error

;
;	Return HIGHVER/LOWVER bits to caller in FNB
;

	ASSUME	FIB$V_HIGHVER	EQ	FIB$V_LOWVER+1

	EXTZV	#FIB$V_LOWVER,#2,-		; extract the 2 bits
		FWA$T_FIBBUF+FIB$W_NMCTL(R10),R0

	ASSUME	NAM$V_HIGHVER	EQ	NAM$V_LOWVER+1

	INSV	R0,#NAM$V_LOWVER,#2,-		; store into FNB
		NAM$L_FNB(R7)

	MOVL	#1,R0				; success
90$:	BRW	RM$CLSCU			; evaporate IFAB and cleanup

;
; Network specific $ENTER code
;

NTENTER:
	BSBW	NT$ENTER			; Do the $ENTER operation
	BRW	RM$CLSCU			; and clean up.

	.SBTTL	RM$RECOVER_FWA, Recover FWA from Expanded String

;++
;
; RM$RECOVER_FWA - This routine uses the EXPANDED NAME STRING in the NAM
;	           block to restore the state of the FWA so that ACP
;		   operations can be performed using the FWA.
;
;		   Note that it is assumed that this is not a network
;		   operation, since the context is always kept in RMS
;		   space for search sequences.
;
; Inputs:
;
;	NAM$L_ESA	- Address of EXPANDED STRING BUFFER
;	NAM$B_ESL	- Length of EXPANDED STRING
;	NAM$W_FID/DID	- FID and DID of previous file
;	NAM$L_RSA	- Address of previous RESULT STRING
;	NAM$B_RSL	- Length of previous RESULT STRING
;	NAM$T_DVI	- Device name string
;
; Outputs:
;
;	R10 = FWA address
;
;	FWA$Q_NODE 	- Is not altered.
;	FWA$Q_DEVICE	- Descriptor of device portion
;	FWA$Q_CDIR1	- Descriptor of entire root directory specification
;			   excluding the delimiters
;	FWA$B_ROOTERM	- Root directory terminator
;	FWA$Q_DIR1	- Descriptor of entire directory specification
;			   excluding the delimiters
;	FWA$B_DIRTERM	- Directory terminator
;	FWA$Q_RNS	- Descriptor of FILE NAME, TYPE and VERSION
;	FWA$B_DIRLEN	- Number of directory names present
;			  (needed for RM$COPY_RESULT)
;	FWA$Q_NAME+4	- Address of previous RESULT STRING
;	IFB$L_RNS_LEN	- Length of previous RESULT STRING
;
;	The FID and DID fields are copied into the FIB buffer
;	and a channel is assigned to the device.
;
;--

RM$RECOVER_FWA::

;
;	Allocate FWA and temporary FSCB buffer
;

	BSBW	RM$FWASET			; allocate FWA
	BLBC	R0,10$				; branch if error
	MOVZWL	#FSCB$C_BLN,R2			; get size of FSCB
	BSBW	RM$GETSPC1			; allocate it
	BLBC	R0,10$				; branch if success
	PUSHL	R11				; save impure area
	BSBB	RECOVER_FWA			; do the work
	MOVL	R11,R4				; get addr of buffer
	POPL	R11				; restore impure area
	PUSHL	R0				; save status
	MOVZWL	#FSCB$C_BLN,R2			; get size
	BSBW	RM$RETSPC1			; return the space
	POPL	R0				; restore status
10$:	RSB

;
;	Get descriptor of expanded name string from NAM block and probe it
;

RECOVER_FWA:
	MOVL	R1,R11				; get address of FSCB
	MOVZBL	NAM$B_ESL(R7),R6		; get length of expanded string
	BEQL	ERRESL				; error if none
	MOVL	NAM$L_ESA(R7),R7		; get addr. of expanded string
	IFNORD	R6,(R7),ERRESA			; error if cannot read buffer
	JSB	RM$SCAN_STRING			; parse the string
	MOVL	FAB$L_NAM(R8),R7		; restore name block
	BSBW	RM$CHKNAM			; still good?
	BLBC	R0,25$				; nope
	CMPB	NAM$B_ESL(R7),FSCB$Q_FILESPEC(R11); should be the same
	BNEQ	ERRESL

;
;	Copy device name to FWA.  If possible, get it from the expanded
;	name string rather than the DVI to preserve the logical device name.
;	Setup as concealed device however in order to use the DVI for the
;	actual device assignment.
;

	MOVAQ	FWA$Q_DEVICE(R10),R0		; get addr to setup
	BBC	#FSCB$V_DEVICE,(R11),10$	; if not present, use DVI
	SUBW3	#1,FSCB$Q_DEVICE(R11),(R0)	; strip colon and stuff after it
	CMPW	FWA$Q_DEVICE(R10),-	 	; name too long?
		#FWA$S_DEVICEBUF
	BGTRU	10$				; if too long, use DVI
	MOVC3	(R0),-				; copy to buffer
		@FSCB$Q_DEVICE+4(R11),@4(R0)
	MOVAQ	FWA$Q_CONCEAL_DEV(R10),R0	; get addr to setup
	SSB	#FWA$V_CONCEAL_DEV,(R10)	; mark concealed dev present

10$:	MOVZBL	NAM$T_DVI(R7),(R0)		; get length of name
	BEQL	ERRDVI				; error if null

	ASSUME	NAM$S_DVI  LE  FWA$S_DEVICEBUF

	MOVC3	(R0),-				; copy to buffer
		NAM$T_DVI+1(R7),@4(R0)
20$:	SSB	#FWA$V_DEVICE,(R10)		; mark device name present
	BSBW	RM$ASSIGN			; assign channel to device
	BLBS	R0,STUFF_FID			; branch if ok
25$:	RSB					; exit with error

ERRDVI:	RMSERR	DVI
	RSB

ERRESL:	RMSERR	ESL
	RSB

ERRESA:	RMSERR	ESA
	RSB

;
;	Move FID, DID and WCC to FIB buffer
;

	ASSUME	FIB$W_DID	EQ	FIB$W_FID+6
	ASSUME	FIB$L_WCC	EQ	FIB$W_DID+6
	ASSUME	NAM$W_DID	EQ	NAM$W_FID+6
	ASSUME	NAM$L_WCC	EQ	NAM$W_DID+6


STUFF_FID:
	MOVQ	NAM$W_FID(R7),FWA$T_FIBBUF+FIB$W_FID(R10)
	MOVQ	NAM$W_FID+8(R7),FWA$T_FIBBUF+FIB$W_FID+8(R10)

;
; check for a rooted directory
;

	BBC	#DEV$V_DIR,IFB$L_PRIM_DEV(R9),5$ ; if non-directory device
	BBC	#FSCB$V_ROOT,(R11),1$		; was there a root?
	MOVQ	FSCB$Q_ROOT(R11),R0		; get descriptor
	ADDB3	#2,(R1)+,FWA$B_ROOTERM(R10)	; save root directory terminator
	SUBL2	#3,R0				; remove directory terminators
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R9),1$; skip rooted directory if tape
	CMPW	R0,#FWA$C_MAXDIRLEN		; root too big?
	BGTRU	ERRESA				; error if too big
	MOVZWL	R0,FWA$Q_CDIR1(R10)		; save length of directory
	MOVC3	R0,(R1),@FWA$Q_CDIR1+4(R10)	;  and save root dir. in FWA
	SSB	#FWA$V_ROOT_DIR,(R10)		; signal it as being there
	SSB	#FWA$V_EXP_ROOT,(R10)		;  and that it was explicit

;
; Setup descriptor of the full directory spec
;

1$:	BBC	#FSCB$V_DIRECTORY,(R11),5$	; branch if not found
	MOVQ	FSCB$Q_DIRECTORY(R11),R0	; get descriptor
	ADDB3	#2,(R1)+,FWA$B_DIRTERM(R10)	; save directory terminator
	SUBW2	#2,R0				; remove directory terminator
	CMPW	R0,#FWA$C_MAXDIRLEN		; directory too big?
	BGTRU	9$				; error if too big
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R9),5$; if tape, br to skip dir spec
	MOVZWL	R0,FWA$Q_DIR1(R10)		; save length of directory
	MOVC3	R0,(R1),@FWA$Q_DIR1+4(R10)	; and save dir. in FWA
	SSB	#FWA$V_DIR,(R10)		; mark directory present
	MOVB	#1,FWA$B_DIRLEN(R10)		; indicate 1 dir. name present

5$:	MOVQ	FSCB$Q_NAME(R11),R0		; set descriptor of file name
	BNEQ	10$
	MOVQ	FSCB$Q_VERSION(R11),R0		; try file version
	BNEQ	20$
	MOVQ	FSCB$Q_TYPE(R11),R0		; how about type?
	BNEQ	30$
9$:	BRW	ERRESA				; must be a name (or something)
10$:	ADDW2	FSCB$Q_TYPE(R11),R0		; add the type field
20$:	ADDW2	FSCB$Q_VERSION(R11),R0		; and the version

;
;	Use the EXPANDED NAME STRING as the pattern that the ACP should
;	use for matching.   Note that this read-only buffer is actually
;	in the user's (caller's) address space and thus cannot be
;	written back by RMS or the ACP.
;

30$:	MOVW	R0,FWA$Q_RNS(R10)		; copy size (no flags)
	MOVL	R1,FWA$Q_RNS+4(R10)		; copy address

;
;	Use the RESULT NAME STRING from the previous operation
;	as input to the ACP so that it can recover its position
;	within the directory.
;

	CLRL	IFB$L_RNS_LEN(R9)		; preset length of prev. name
	MOVZBL	NAM$B_RSL(R7),R6		; get length of RESULT STRING
	BEQL	70$				; branch if none
	MOVL	NAM$L_RSA(R7),R7		; get address of RESULT STRING
	IFNORD	R6,(R7),ERRRSA			; error if cannot read buffer
	JSB	RM$SCAN_STRING			; parse the string
	MOVL	FAB$L_NAM(R8),R7		; restore name block
	BSBW	RM$CHKNAM			; still good?
	BLBC	R0,80$				; nope
	CMPB	NAM$B_RSL(R7),FSCB$Q_FILESPEC(R11); should be the same
	BNEQ	ERRRSA
	MOVQ	FSCB$Q_NAME(R11),R0		; get descriptor of file name
	BNEQ	40$				; add rest
	MOVQ	FSCB$Q_VERSION(R11),R0		; get descriptor of file name
	BNEQ	50$				; add rest
	MOVQ	FSCB$Q_TYPE(R11),R0		; get descriptor of file name
	BRB	60$				; copy name

40$:	ADDW2	FSCB$Q_TYPE(R11),R0		; add the type field
50$:	ADDW2	FSCB$Q_VERSION(R11),R0		; and the version
60$:	MOVZWL	R0,IFB$L_RNS_LEN(R9)		; length of prev. RESULT NAME
	MOVC3	R0,(R1),@FWA$Q_NAME+4(R10)	; copy previous RESULT NAME
70$:	MOVL	#1,R0				; success
80$:	RSB

ERRRSA:	RMSERR	RST
	RSB

	.END
