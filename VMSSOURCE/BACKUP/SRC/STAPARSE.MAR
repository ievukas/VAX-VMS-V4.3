	.TITLE	STAPARSE	Standalone $PARSE subroutines
	.IDENT	'V04-000'
;---
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:
;	Backup/Restore
;
; ABSTRACT:
;	This module contains the external subroutines and data required for
;	RMS PARSE and XPFN to operate.
;
; ENVIRONMENT:
;	VAX/VMS user mode.
;
;
;--
;
; AUTHOR: M. Jack, CREATION DATE: 27-Dec-1980
;
;
; MODIFIED BY:
;
;	V03-013	RAS0293		Ron Schaefer		15-Apr-1984
;		Add RM$RETPAG entry point and dummy entries for
;		RM$SLIST_ERR and RM$SLIST_ERR_CNT.
;
;	V03-012	DAS0001		David Solomon		29-Feb-1984
;		Add dummy entry point RM$FSET_ALT to track RMS0PARSE change.
;
;	V03-011	RAS0221		Ron Schaefer		 9-Dec-1983
;		Add dummy entry points:  RM$DEACCESS, RM$GET1PAG, RM$RET1PAG,
;		RM$GETBLK1 in order to track RMS.
;
;	V03-010	RAS0212		Ron Schaefer		16-Nov-1983
;		Fix version/implementation skew in RM$ASSIGN by moving it
;		to a conditionalized version of the RMS module RM0PRFLNM
;		for both RMS and stand-alone BACKUP.
;
;	V03-009	JWT0136		Jim Teague		19-Sep-1983
;		Be sure to clean out IFI between calls to FABCHK,
;		also can remove RM$FSETI entry point.
;
;	V03-008	KBT0529		Keith B. Thompson	31-May-1983
;		Change PSECT RM$RMS to PIC and add RM$GETBLK and RM$RETBLK
;
;	V03-007	ACG0332		Andrew C. Goldstein,	5-May-1983  15:30
;		Track changes in RMS testpoints
;
;	V03-006	RAS0127		Ron Schaefer	 4-Mar-1983
;		Add global symbol RM$RETSPC.
;
;	V03-005	RAS0125		Ron Schaefer	21-Feb-1983
;		Add global symbol RM$GETSPC.
;
;	V03-004	RAS0111		Ron Schaefer	22-Dec-1982
;		Change symbols:
;			FWA$T_SHRFILDEV  -> FWA$T_SHRFILBUF
;			IFB$W_DEVBUFSIZ  -> IFB$L_DEVBUFSIZ
;
;	V03-003	RAS0098		Ron Schaefer	16-Sep-1982
;		Change PSECT attributes of RM$RMS to match RMS.
;
;	V03-002	RAS0097		Ron Schaefer	14-Sep-1982
;		Track RMS changes:
;		1.  Change spelling of RMS$$PARSE to RMS$PARSE.
;		2.  Add RM$FSETI_ALT entry point.
;		3.  Change code PSECT to RM$RMS to prevent truncation errors.
;
;	V03-001	MLJ0082		Martin L. Jack,	15-Mar-1982  15:48
;		Set DEV$V_FOR and DEV$V_MNT to correct problem with mounting of
;		continuation tapes.  Initialize FWA$T_SHRFILDEV in RM$ASSIGN to
;		track RMS change.
;
;	V02-003	MLJ0079		Martin L. Jack,	17-Feb-1982  13:51
;		Set up R11 in RM$FABCHK to point to a dummy image I/O impure
;		page.  This is now used by $PARSE.
;
;	V02-002	MLJ0063		Martin L. Jack,	23-Dec-1981  1:58
;		Correct RM$ALDBUF to accept size in R5.
;
;	V02-001	MLJ0054		Martin L. Jack,	22-Nov-1981  22:51
;		Integrate GET_VM and FREE_VM jacket routines.
;
;**

	.PSECT	RM$RMS,PIC,EXE,NOWRT,GBL

	$BDBDEF
	$CCBDEF
	$DCDEF
	$DEVDEF
	$DIBDEF
	$FABDEF
	$FWADEF
	$IFBDEF
	$IODEF
	$PSLDEF
	$UCBDEF

	.ENTRY	SYS$PARSE,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	JMP	G^RMS$PARSE+2

NT$NWA_INIT::
	MOVL	#RMS$_SYN,R0		; set error code
	RSB				; return

RM$SLIST_ERRS::				; no search list errors
	.WORD	0			;  are appropriate
RM$SLIST_ERR_CNT == 0

RM$CLEANUP::
	RSB

RM$CLSCU::
	PUSHL	R0			; save error code
	BSBB	RM$CLEANUP		; cleanup ifab and stuff
	POPL	R0
	BRB	RM$EX_NOSTR		; and do structureless exit

RM$EXSUC::
	MOVL	#1,R0			; set success
RM$EX_NOSTR::
	BBSS	#16,R0,10$		; add rms facility code
10$:	MOVL	R0,FAB$L_STS(R8)	; and store in fab/rab
	RET				; exit rms

RM$FABCHK::
	MOVL	#PSL$C_USER,R7		; set previous mode user
	MOVAB	PIO$GW_IIOIMPA,R11	; point to fake image i/o impure area
	MOVL	4(AP),R8		; get fab address
	CLRQ	FAB$L_STS(R8)		; clear sts and stv
	CLRW	FAB$W_IFI(R8)		; clear ifi
	MOVZWL	FAB$W_IFI(R8),R9	; set r9 = ifi value
	RSB				; return

RM$FSETI_ALT::
	MOVZBL	#IFB$C_BLN_SEQ,R2	; block size for ifab
	BSBW	RM$GETSPC		; get ifab space
	MOVL	R1,R9			; save ifab address
	MOVB	#IFB$C_BID,IFB$B_BID(R9)	; block type for ifab
	MOVB	#IFB$C_BLN_SEQ,IFB$B_BLN(R9)	; block size for ifab
	MOVAB	IFB$L_BDB_FLNK(R9),R0	; set up bdb link pointers
	MOVL	R0,(R0)			;
	MOVL	R0,4(R0)		;
	MOVL	R9,IFAB_ADDRESS		; save ifab address
	MOVW	#1,FAB$W_IFI(R8)	; store ifi value
RM$FSET_ALT::
	MOVB	R7,IFB$B_MODE(R9)	; save caller's mode
	MOVL	AP,IFB$L_ARGLST(R9)	; save pointer to arglist
	MOVL	R9,R10			; copy ifab addr
	MOVL	R8,IFB$L_LAST_FAB(R9)	; save addr this fab
	RSB

RM$GETBLK::
RM$GETBLK1::
	PUSHL	R2			; save # of longwords
	ROTL	#2,R2,R2		; convert to bytes
	BSBB	RM$GETSPC		; get the space
	BLBC	R0,10$			; branch on error
	CVTLB	(SP)+,9(R1)		; store length
	RSB				; return
10$:	POPL	R1			; clean stack
	RSB

RM$GETSPC1::
RM$GETSPC::
	PUSHL	R2			; length desired
	CALLS	#1,G^GET_ZERO_VM	; allocate and clear memory	
	MOVL	R0,R1			; get address of memory
	MOVL	#1,R0			; set success return
	RSB

RM$GET1PAG::
	MOVZWL	#512,R2			; get page
RM$GETPAG::
	PUSHL	R2			; save input length
	BSBB	RM$GETSPC		; get the space
	MOVL	R1,R3			; return page address in r3
	MOVL	(SP)+,R2		; return length obtained
	RSB

RM$ALDBUF::
	PUSHL	R5			; save length to allocate
	MOVL	R5,R2			; copy to correct register
	BSBB	RM$GETSPC		; get the space
	MOVL	R1,R3			; return page buffer in r3
	MOVL	#BDB$C_BLN,R2		; length of BDB
	BSBB	RM$GETSPC		; get the space
	MOVL	R1,R4			; return bdb buffer in r4
	INSQUE	(R1),@IFB$L_BDB_BLNK(R10) ; insert into bdb queue at tail
	MOVL	R3,BDB$L_ADDR(R4)	; set address of buffer
	MOVL	(SP)+,R2		; restore length to allocate
	RSB

RM$RET1PAG::
	MOVZWL	#512,R2
	BRB	RM$RETSPC

RM$RETBLK::
RM$RETBLK1::
	MOVZBL	9(R4),R2		; get length from block
	ROTL	#2,R2,R2		; convert to bytes

RM$RETPAG::
RM$RETSPC1::
RM$RETSPC::
	PUSHL	R4			; address to free
	PUSHL	R2			; length to free
	CALLS	#2,G^FREE_VM		; free memory	
	MOVL	#1,R0			; set success return
	RSB				; return

RM$GTIADR::
	MOVL	IFAB_ADDRESS,R9		; get ifab address
	RSB

RM$DEACCESS::
RM$INIT_SWB:: 
RM$NEXTDIR::
	MOVL	#1,R0
	RSB

PIO$GT_DDSTRING::
	.ASCIC	"[SYSEXE]"		; default directory

	.PSECT	DATA,WRT,NOEXE
PIO$GW_IIOIMPA:
	.BLKB	512			; dummy image I/O impure area
PIO$A_TRACE::
	.BLKL				; dummy trace area
PIO$GW_STATUS::
	.BLKL				; global status word
IFAB_ADDRESS:
	.BLKL				; saves address of IFAB

TPT$L_PARSE==		0		; force all $TSTPT's to
TPT$L_NTXLATLOG==	0		; use the single longword
TPT$L_PARSES==		0		; at PIO$A_TRACE
TPT$L_XLATLOG==		0
TPT$L_XPFN==		0

	.END
