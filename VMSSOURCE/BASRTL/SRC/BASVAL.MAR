	.TITLE	BAS$VAL			; Convert text to numeric
	.IDENT	/2-004/			; File: BASVAL.MAR  Edit: MDL2004
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; FACILITY: RTL BASIC language support
;++
; ABSTRACT:
;
; Performs conversion of character strings containing numbers to
; floating datatypes.  
;
;--
;
; VERSION: 2
;
; HISTORY:
;
; AUTHOR: R. Will, CREATION DATE: 1-Mar-79
;
; MODIFIED BY:
; 
; R. Will, 1-Mar-79: VERSION 01
; 1-001	- original
; 1-002	- Change entry point name to BAS$VAL_L.  JBS 02-MAY-1979
; 1-003 - Add BASIC linkages for scaling.  RW  26-JUN-79
; 1-004 - Use new conversion routines.  RW 9-Jul-79
; 1-005	- Add an optional second argument to BAS$VAL_D.  JBS 30-JUL-1979
; 1-006 - Don't let conversion routine round for single precision. RW 20-Aug-79
; 1-007 - Change bit set for integer ignore tabs.  RW  30-Aug-79
; 1-008 - Rechange bit set for integer ignore tabs.  RW  31-Aug-79
; 1-009 - KLUDGE!!!! WORKAROUND OTSCVTTIL BUG.  CHANGE CALL BACK.  RW 7-SEPT-79
; 1-010 - Remove kludge of edit 9.  RW  11-Sept-79
; 1-011 - String cleanup, don't use $STR$ macros.  30-Oct-79
; 1-012	- Integerize after scaling.  JBS 18-DEC-1979
; 1-013	- Change MTH$DFLOOR to MTH$DINT.  JBS 20-DEC-1979
; 1-014 - Add support for g and h floating.  PLL 25-Sep-81
; 1-015 - Add support for packed decimal.  PLL 8-Feb-82
; 1-016 - Decimal entry point should check a flag in the frame before
; 	  calling the conversion routine.  PLL 30-Jun-1982
; 2-001 - Adapted from OTS$CVTTR, version 1-010, from OTS$CVTTIL, 
;	  version 1-007 and from BAS$VAL, version 1-007.
;	  MDL 15-Jul-1982
; 2-002 - use new routine OTS$$RET_A_CVT_TAB_R1 to get the address of the
;	  convert table.  make external ref's PIC.  MDL 23-Jun-1983
; 2-003 - minor bugfix in BAS$VAL_P.  MDL 25-Jul-1983
; 2-004 - BAS$VAL_D takes scale factor by VALUE, not by REF.  MDL 8-Feb-1984
;--

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL
	.EXTRN	BAS$HANDLER		; BASIC handler routine
	.EXTRN	BAS$K_ILLNUM		; illegal numeric input
	.EXTRN	OTS$$RET_A_CVT_TAB_R1	; Convert table address routine
	.EXTRN	BAS$CVT_T_P		; Convert text to packed routine
	.EXTRN	OTS$$CVT_MUL		; Conversion multiply routine
	.EXTRN	BAS$$STOP		; general purpose abort routine
	.EXTRN	BAS$$SCALE_L_R1		; generates scale value 
	.EXTRN	MTH$DINT		; intgerization routine

;
; MACROS:
;

;
; PSECT DECLARATIONS:
;

	.PSECT	_BAS$CODE	PIC, SHR, LONG, EXE, NOWRT

;
; EQUATED SYMBOLS:
;

;+
;  W A R N I N G  !!!!!!!!!!		W A R N I N G  !!!!!!!!!!
;
;  The following definitions are duplicated from the BLISS require
;  file BASFRAME.REQ.  If any changes are made, they MUST be duplicated
;  in both places!
;-
	BSF$A_SAVED_FP	= 12		; saved Frame Pointer
	BSF$W_FCD_FLAGS	= -26		; flags longword in caller's frame
	BSF$M_FCD_RND   = 9		; "round" bit (in flags longword)

;+
; argument pointer offsets
;-
	string		= 4

;+
; bits in flags longword passed to conversion routine
;-
	ignore_blanks	= 1
	ignore_tabs	= 16
	dont_round	= 8

;+
; entry masks
;-
	REGMASK		= ^M< R2, R3, R4, R5, R6, R7, R8, R9, R10, R11 >
	REGMASK_H	= ^M< R4, R5, R6, R7, R8, R9, R10, R11 >
					; register save mask
					; Note: integer overflow not enabled

;+
; The following symbols are used to indicate the bit position of the flag
; register.
;-

	V_NEGATIVE	= 31		; flag bit: 1 if negative sign
	V_DEC_POINT	= 30		; flag bit: 1 if decimal point is seen
	M_DEC_POINT	= 1@30		; mask for V_DEC_POINT
	V_NEG_DECEXP	= 29		; flag bit: 1 if exponent has negative sign
	M_NEG_DECEXP	= 1@29		; mask for V_NEG_DEXEXP
	V_DECEXP	= 28		; flag bit: 1 if exponent field exist
	M_DECEXP	= 1@28		; mask for V_DECEXP
	V_EXT_BITS	= 27		; flag bit: 1 if extension bits
					; wanted
	M_EXT_BITS	= 1@27		; mask for V_EXT_BITS

	V_DIGIT		= 16		; flag bit: 1 if digit is seen
	M_DIGIT		= 1@16		; mask for V_DIGIT
;+
; Literals for data types
;-
	K_DTYPE_D	= 0		; D-floating
	K_DTYPE_G	= 1		; G-floating
	K_DTYPE_H	= 2		; H-floating
	K_DTYPE_F	= 3		; floating

;+
; Temporary stack offsets
;-

	TEMP		= 0		; temporary storage during
					; 8 word shift
	FLAG		= 4		; flag storage
					; was R6 in FOR$CNV_IN_DEFG
	DIGITS		= 8		; digits to right of decimal
					; point (was R7)
	DECEXP		= 12		; Decimal exponent
	DTYPE		= 16		; Datatype code

;+
; Stack offsets for OTS$$CVT_MUL routine
;-
	BINNUM		= 20		; Binary fraction storage
	INT		= 36		; Overflow area for BINNUM
	BINEXP		= 40		; Binary exponent
	PRODF_4		= 44		; Multiply temporary
	PRODF		= 48		; Multiply temporary
	CRY		= 64		; Carry save area
	FRAME		= CRY + 16	; Stack frame size

;+
; Constants
;-

	L_2P31_DIV_10	= 214748364	; (2**31)/10


	.SBTTL	BAS$VAL_x - convert text to floating

;++
; FUNCTIONAL DESCRIPTION:
;
;	BAS$VAL_x converts a text string containing a representation
;	of a numeric value to a floating representation of that
;	value.  
;
;	The description of the text representation converted by
;	BAS$VAL_x is as follows:
;
;		<0 or more blanks>
;		<"+", "-" or nothing>
;		<0 or more decimal digits>
;		<"." or nothing>
;		<0 or more decimal digits>
;		<exponent or nothing, where exponent is:
;			<	<<"E", "e", "D", "d", "Q", "q">
;				<0 or more blanks>
;				<"+", "-" or nothing>>
;				or
;				<"+" or "-">>
;			<0 or more decimal digits>>
;		<end of string>
;
;		Notes:
;			   the only valid exponent letters are
;			   "E" and "e"; any others will be treated
;			   as an invalid character.
;
;			   tab and blank characters are ignored.
;
;			   exponent must start with a valid exponent letter.
;
;
; CALLING SEQUENCE:
;
;	value.wlc.v = BAS$VAL_x (in_str.rt.dx [, scale_factor.rl.v])
;
;	where "x" is the datatype of the floating value, either
;	F, D, G or H.
;
;
; INPUT PARAMETERS:
;
	in_str		= 4		; input string descriptor by 
					; reference.
	scale_val	= 8		; optional scale value

;
; IMPLICIT INPUTS:
;
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	value		= 8		; floating result by ref
	ext_bits	= 24		; If present, the value will
					; NOT be rounded and the first
					; n bits after truncation will
					; be returned in this argument.
					; For D-floating, the next 8 bits
					; are returned as a byte.
					; For G and H floating, 11 and 15
					; bits are returned, respectively,
					; as a word, left-adjusted.
					; These values are suitable for
					; use as the extension operand
					; in an EMOD instruction.
					; WARNING:  The bits returned for
					; H-floating may not be precise,
					; due to the fact that calculations
					; are only carried to 128 bits.
					; However, the error should be
					; small.  D and G datatypes
					; return guaranteed exact bits,
					; but they are not rounded.

;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	BAS$K_ILLNUM 	- Error if illegal character in input or
;			  overflow.
;	SS$_NORMAL 	- success
;
; SIDE EFFECTS:
;
;	NONE
;
;--



	.ENTRY	BAS$VAL_H, REGMASK_H
					; entry for BAS$VAL_H
	SUBL2	#FRAME, SP		; Create stack frame
	MOVL	#K_DTYPE_H, DTYPE(SP)	; Set datatype code
	BRB	COMMON			; Go to common code

	.ENTRY	BAS$VAL_G, REGMASK
					; entry for BAS$VAL_G
	SUBL2	#FRAME, SP		; Create stack frame
	MOVL	#K_DTYPE_G, DTYPE(SP)	; Set datatype code
	BRB	COMMON			; Go to common code

	.ENTRY	BAS$VAL_F, REGMASK
					; entry for BAS$VAL_F
	SUBL2	#FRAME, SP		; Create stack frame
	MOVL	#K_DTYPE_F, DTYPE(SP)	; Set datatype code
	BRB	COMMON			; Go to common code

	.ENTRY	BAS$VAL_D, REGMASK
					; entry for BAS$VAL_D
	SUBL2	#FRAME, SP		; Create stack frame
	MOVL	#K_DTYPE_D, DTYPE(SP)	; Set datatype code
	CMPB	(AP), #2		; Optional scale value present?
	BLSSU	MAKE_VALUE		; no, make one up
	MOVL	scale_val(AP), R10	; yes, get it
	BRB	COMMON

MAKE_VALUE:
	MOVL	BSF$A_SAVED_FP(FP), R0	; get scale factor from caller's frame
	JSB	G^BAS$$SCALE_L_R1	; determine scale value (place in R0)
	MOVL	R0, R10			; put it where it belongs
	BRB	COMMON

;+
;	Register usage and abbreviations:
;
;	R0 - Generally count of input characters remaining.
;	R1 - Generally pointer to input character.
;	R2 - Generally holds decimal exponent.
;	R3 - Used first to hold current character, then as
;	     extra precision bits for the fraction.
;	R4-R7 - The 128 bit binary fraction.
;	R8 - Count of digits seen after overflow.
;	R9 - Count of significant digits seen in fraction (number of
;	      digits currently held in R4:R7).
;	R10 - optional scale value.
;
;	FAC: Binary fraction, R4-R7.
;-

COMMON:
	CLRL	FLAG(SP)		; clear flags

5$:	MOVQ	@in_str(AP), R0		; R0 will get string length, the
					; CLASS and TYPE fields will go
					; away after the first SKPC.
					; R1 points to input string.
	CLRL	R2			; R2 = DECIMAL_EXPONENT = 0
	CLRQ	R4			; R4-R7 = FAC = 0
	CLRQ	R6
	CLRL	DIGITS(SP)		; digits in fraction

10$:	CLRQ	R8			; Clear digit counts (R8 & R9).


;+
; Find first non-blank.  If none, return zero.  Otherwise process
; character.
;-

20$:	SKPC	#^A/ /, R0, (R1)	; skip blanks
					; R0 = #CHAR_REMAINING
					; R1 = POINTER_TO_INPUT
					; Z bit is set if all blanks
	BGTR	30$			; non-blank found?
	BRW	ZERO			; if not, return zero
30$:	MOVZBL	(R1), R3		; R3 = ASCII(current_char)
	CMPL	R3, #9			; Is character a tab?
	BNEQ	35$			; No
	INCL	R1			; Yes, bump pointer
	SOBGTR	R0, 20$			; Decrement character count
	BRW	ZERO			; Value is zero
35$:	CMPB	R3, #^A/-/		; is current char a "-" sign?
	BNEQ	40$			; branch if not
	BBCS	#V_NEGATIVE, FLAG(SP), DIGIT_LOOP
					; set negative flag and continue
40$:	CMPB	R3, #^A/+/		; is current char a "+" sign?
	BEQL	DIGIT_LOOP		; yes, ignore and continue
	CMPB	R3, #^A/./		; is current char a "."?
	BNEQ	CHECK_DIGIT		; no, should be a digit
	BISL	#M_DEC_POINT, FLAG(SP)	; set decimal point encountered
	CLRL	DIGITS(SP)		; ignore digits_in_fract


;+
; Collect integer and fraction digits.  Blanks and tabs are ignored.
;-

DIGIT_LOOP:
	BSBW	RGET			; get a new character
	TSTL	R0			; check for end of string
	BGTR	CHECK_DIGIT		; continue if positive
	BRW	SCALE			; done if string empty
CHECK_DIGIT:
	SUBL	#^A/0/, R3		; convert to numeric
	CMPL	R3, #9			; is it a digit?
	BGTRU	NOT_DIGIT		; no
	BISL	#M_DIGIT, FLAG(SP)	; yes, set digit encountered
	CMPL	R7, #L_2P31_DIV_10	; check highest part of FAC to
					; see if it is too big to
					; multiply by 10.
	BLEQU	10$			; it's ok
	INCL	R8			; overflow, bump counter
	BRB	2$			; skip multiplication
10$:	BSBW	MUL10_R9		; Multiply FAC by 10 and add R3.
2$:	BBC	#V_DEC_POINT, FLAG(SP), DIGIT_LOOP
					; check to see if decimal
					; point has been seen
					; - continue if not.
	INCL	DIGITS(SP)		; bump DIGITS
	BRB	DIGIT_LOOP		; branch back to read more


;+
; A non-digit has been found.  Check for decimal point or exponent letter.
;-

NOT_DIGIT:
	CMPL	R3, #<^A/./-^A/0/>	; check if current char is a "."
	BEQL	DECIMAL_POINT		; branch to DECIMAL_POINT if yes
	CMPL	R3, #<^A/E/-^A/0/>	; "E"?
	BEQL	EXPON			; process exponent
	CMPL	R3, #<^A/e/-^A/0/>	; "e"?
	BEQL	EXPON			; process exponent
	BRW	ERROR			; none of the above => ERROR.

;+
; Decimal point has been found
;-

DECIMAL_POINT:
	BBSS	#V_DEC_POINT, FLAG(SP), 10$	; error if duplicate
	CLRL	DIGITS(SP)		; reset DIGITS
	BRW	DIGIT_LOOP		; get fraction digits
10$:	BRW	ERROR

;+
; we have an exponent.  see if we have gotten any digits yet; if we
; haven't, this is an error.
;-
EXPON:
	BBS	#V_DIGIT, FLAG(SP), EXPON_DIGITS
	BRW	ERROR			; if digit seen bit not set, error

;+
; Loop to collect digits, store the accumulated DECIMAL_EXPONENT in R2
;-
EXPON_DIGITS:
	DECL	R0			; skip over letter
	BLEQ	EXP_DONE		; done if string empty
	INCL	R1			; R1 points to next character
	SKPC	#^A/ /, R0, (R1)	; skip blanks
	BLEQ	EXP_DONE		; done if end of string
	MOVZBL	(R1), R3		; R3 = current char
	CMPL	R3, #9			; Is it a tab?
	BEQL	EXPON_DIGITS			; Yes, skip it
10$:	CMPL	R3, #^A/+/		; "+"?
	BEQL	EXP_LOOP		; yes, get digits
	CMPL	R3, #^A/-/		; "-"?
	BNEQ	EXP_CHECK		; no, go check digit
EXP_NEG:
	BISL	#M_NEG_DECEXP, FLAG(SP)	; exponent is negative
EXP_LOOP:
	BSBW	RGET			; get next character
	TSTL	R0			; is string empty?
	BLEQ	EXP_DONE		; done if true
EXP_CHECK:
	SUBL	#^A/0/, R3		; convert to numeric
	BLSS	ERROR			; If negative, illegal character
	CMPL	R3, #9			; is it a digit?
	BGTRU	ERROR			; branch to ERROR if not
	MULL	#10, R2			; add in new digit
	BVS	ERROR			; overflow?
	ADDL	R3, R2			; to exponent
	BVS	ERROR			; overflow?
	BRB	EXP_LOOP		; get more exponent digits

EXP_DONE:
	BBC	#V_NEG_DECEXP, FLAG(SP), 1$	; check for negative 
	MNEGL	R2, R2			; negate DECIMAL_EXPONENT
1$:	BISL	#M_DECEXP, FLAG(SP)	; exponent field exists



;+
; Done collecting input characters for digits and/or exponent
; If FAC=0, no scaling is necessary, just store 0.0 and return.
;-

SCALE:
	TSTL	R9			; Check FAC for zero.
	BNEQ	INIT_BINEXP		; Branch if not.

;+
; Value is zero.
;-

ZERO:
	CASEB	DTYPE(SP), #K_DTYPE_D, #K_DTYPE_F  ; Select on datatype
1$:	.WORD	D_NUM-1$
	.WORD	G_NUM-1$
	.WORD	H_NUM-1$
	.WORD	F_NUM-1$
D_NUM:
	CLRQ	R0
	BRB	ZERO_RET
G_NUM:
	CLRQ	R0
	BRB	ZERO_RET
H_NUM:
	CLRQ	R0			; zero out return value
	CLRQ	R2
	BRB	ZERO_RET
F_NUM:
	CLRL	R0
;	BRW	ZERO_RET

ZERO_RET:
	RET				; return.

;+
; ERROR return
;-

ERROR:
	MOVZBL	#BAS$K_ILLNUM, -(SP)	; 
	CALLS	#1, G^BAS$$STOP
	BRB	ZERO		; Set value to zero and exit

;+
; Set R1 to the binary exponent [exponent bias + 128 - 1].
; 128 is number of fraction bits and 1 is
; for the MSB fraction bit which will be hidden later.
; BINARY_EXPONENT will be modified during normalization process.
;-

INIT_BINEXP:
	CASEB	DTYPE(SP), #K_DTYPE_D, #K_DTYPE_F  ; Select on datatype
1$:	.WORD	D_EXP-1$
	.WORD	G_EXP-1$
	.WORD	H_EXP-1$
	.WORD	F_EXP-1$
D_EXP:	MOVZWL	#<^X80+^X7F>, R1	; D-Floating
	BRB	EXP_COMMON
G_EXP:	MOVZWL	#<^X400+^X7F>, R1	; G-Floating
	BRB	EXP_COMMON
H_EXP:	MOVZWL	#<^X4000+^X7F>, R1	; H-Floating
	BRB	EXP_COMMON
F_EXP:
	MOVZWL	#<^X80+^X7F>, R1
	BRB	EXP_COMMON

;+
; Find the true decimal exponent for the value expressed in FAC.
; True decimal exponent = Explicit exponent - [scale factor] -
; digits in fraction + number of overflows
;-

EXP_COMMON:
	MOVL	R2, R0			; R0 = DECIMAL_EXPONENT

	CMPB	(AP), #2		; optional scale factor present?
	BLSSU	20$			; no
	SUBL	R10, R0			; yes, adjust decimal exponent for
					; scale factor
20$:	SUBL	DIGITS(SP), R8		; adjust for digits in fraction

	ADDL3	R8, R0, DECEXP(SP)	; adjust decimal exponent for overflow
	BVS	ERROR			; If overflow, error


;+
; Normalization.  Shift the value left until bit 31 of R7 is on.
; Adjust the binary exponent appropriately.
;-

	CMPL	R9, #9			; Are there more than 9 digits?
	BLEQ	N1			; If not, use N1.
	CMPL	R9, #18			; Are there more than 18 digits?
	BLEQ	N2			; If not, use N2.
;+
; Process all four longwords, since there are more than 18 digits.
;-
N4:	BBS	#31, R7, REBASE		; Quit when R7<31> = 1.
	EXTZV	#31, #1, R5, TEMP(SP)	; Save bit lost in shift.
	ASHQ	#1, R4, R4		; Shift low part by one bit.
	ASHQ	#1, R6, R6		; Shift high part by one bit.
	INSV	TEMP(SP), #0, #1, R6	; Replace bit lost in shift.
	DECL	R1			; Adjust exponent by one.
	BRB	N4			; Go back and retest.
;+
; Process two low-order longwords only, since there are <= 18 digits.
;-
N2:	SUBL	#64, R1			; Adjust exponent by 64.
	MOVQ	R4, R6			; "Shift" by 64 bits.
10$:	DECL	R1			; Adjust exponent by one.
	ASHQ	#1, R6, R6		; Shift one bit.
	BGEQ	10$			; If R7<31> = 0, repeat.
	CLRQ	R4			; Clear low-order 64 bits.
	BRB	REBASE			; Continue with next phase.
;+
; Process only the low-order longword, since there are <= 9 digits.
;-
N1:	SUBL	#96, R1			; Adjust exponent by 96.
	MOVL	R4, R7			; "Shift" by 96 bits.
20$:	DECL	R1			; Adjust exponent.
	ASHL	#1, R7, R7		; Shift one bit.
	BGEQ	20$			; If R7<31> = 0, repeat.
	CLRL	R4			; Clear low-order longword.

;+
; Rebasing.  R4-R7 now contains a binary fraction normalized with
; the radix point to the left of bit 31 of R7.  R1 contains the
; current binary exponent and DECEXP(SP) contains the current decimal
; exponent.
;
; Therefore, the number can be represented as:
;	2**b * fraction * 10**d
; where b is the binary exponent and d is the decimal exponent.  We
; call OTS$$CVT_MUL to multiply the number by some power of 10 such
; that d goes to zero and b goes to the appropriate value.  When d is
; zero, b contains the proper binary exponent.
;-

REBASE:
	MOVAB	BINNUM(SP), R8		; R8 is used by subroutine as base
	MOVL	R1, BINEXP(SP)		; Store binary exponent
	MOVQ	R4, BINNUM+0(SP)	; Store fraction
	MOVQ	R6, BINNUM+8(SP)
	MOVL	#13, R7			; Highest bit number possibly
					; on in decimal exponent.
10$:	MOVL	#20, R2			; Initially, positive offset
	MOVL	DECEXP(SP), R0		; Get decimal exponent
	BEQL	FLOAT			; If zero, we're done
	BGTR	20$			; Positive?
	MNEGL	#20, R2			; No, use negative offset
	MNEGL	R0, R0			; Absolute value
20$:	CMPL	R0, #16			; Within linear table range?
	BLEQ	50$			; Yes
30$:	BBS	R7, R0, 40$		; Is the R7th bit of R0 on?
	SOBGEQ	R7, 30$			; No, try again.
					; This can never fall through.
40$:	ADDL3	#12, R7, R0		; Index is 12+bit position
					; because table is linear
					; from 0-16.
50$:	MULL2	R0, R2			; Get table offset
	JSB	G^OTS$$RET_A_CVT_TAB_R1	; get convert table address (in R0)
	ADDL2	R0, R2			; Table entry address
	MOVL	R7, TEMP(SP)		; Save hi bit position
	MOVAB	DECEXP+28(SP), R7	; This is "common convert routine"
					; table base.  The +28 offsets
					; the -28 location of DEC_EXP
					; referenced in OTS$$CVT_MUL.
	JSB	G^OTS$$CVT_MUL		; Do the multiplication
	SUBL3	#1, TEMP(SP), R7	; Get next bit position
	BGEQ	10$			; Loop back if more

;+
; If we fall through here, then there are no more bits to reduce.
; Test DECEXP to make sure.
;-

	TSTL	DECEXP(SP)		; Any bits still on?
	BEQL	FLOAT			; No, ok
	BLSS	UNDERFLOW		; Negative, underflow
	BRW	ERROR			; Yes, exponent too big

;+
; Create a floating number from the fraction in BINNUM and the
; binary exponent in R1.  Each datatype has a separate routine
; to do this.
;-


FLOAT:
	TSTL	BINEXP(SP)		; Underflow?
	BLSS	UNDERFLOW		; Yes
	CASEB	DTYPE(SP), #K_DTYPE_D, #K_DTYPE_F
10$:	.WORD	FLOAT_D-10$
	.WORD	FLOAT_G-10$
	.WORD	FLOAT_H-10$
	.WORD	FLOAT_F-10$

;+
; Value underflowed.  Set to zero.
;-

UNDERFLOW:
	BRW	ZERO


FLOAT_D:
	MOVQ	BINNUM+8(SP), R6	; Restore fraction
	ASHL	#23, BINEXP(SP), R1	; Put exponent in proper place
	BVS	ERROR_D			; Error if overflows
	MOVZBL	R6, R8			; Extract rounding bits
	ASHQ	#-8, R6, R6		; Shift fraction right 8 places
	BICL	#^XFF000000, R7		; clear possibly shifted bits
	ADDL	R1, R7			; Add in exponent
	BVS	ERROR_D			; overflow if hidden bit bumps
					; exponent too far
	BBC	#7, R8, 15$		; round bit is zero
	INCL	R6			; round
	ADWC	#0, R7
	BVS	ERROR_D			; Error?
15$:	BBC	#V_EXT_BITS, FLAG(SP), 17$
	MOVB	R8, @ext_bits(AP)
17$:	BBC	#V_NEGATIVE, FLAG(SP), 20$  ; Set sign bit
	BBCS	#31, R7, 20$		; insert sign bit to 1
20$:	
	ROTL	#16, R7, R0 		; rotate and store result
	ROTL	#16, R6, R1

	TSTL	R10 			; scale factor > 0 ?
	BEQL 	25$			; no, return raw result

	PUSHL	SP			; 
	CALLS	#1, G^MTH$DINT		; integerize the result
25$:	BRW	EXIT			; All done

ERROR_D:
	BRW	ERROR			; error return


FLOAT_G:
	MOVQ	BINNUM+8(SP), R6	; Restore fraction
	ASHL	#20, BINEXP(SP), R1	; Put exponent in proper place
	BVS	ERROR_G			; Error if overflows
	EXTZV	#0, #11, R6, R8		; Extract rounding bits
	ROTL	#5, R8, R8		; Left adjust
	ASHQ	#-11, R6, R6		; Shift fraction right 11 places
	BICL	#^XFFE00000, R7		; clear possibly shifted bits
	ADDL	R1, R7			; Add in exponent
	BVS	ERROR_G			; overflow if hidden bit bumps
					; exponent too far
15$:	BBC	#V_EXT_BITS, FLAG(SP), 17$
	MOVW	R8, @ext_bits(AP)
17$:	BBC	#V_NEGATIVE, FLAG(SP), 20$	; Set sign bit
	BBCS	#31, R7, 20$		; insert sign bit to 1
20$:	
	ROTL	#16, R7, R0		; rotate and store result
	ROTL	#16, R6, R1
	BRW	EXIT			; All done

ERROR_G:
	BRW	ERROR			; error return


FLOAT_H:
	MOVQ	BINNUM+0(SP), R4	; Restore fraction
	MOVQ	BINNUM+8(SP), R6
	ASHL	#16, BINEXP(SP), R1	; Step 1
	BVS	ERROR_H			; Error if overflows
	EXTZV	#0, #15, R4, R8		; Extract rounding bits
	ROTL	#1, R8, R8		; Left adjust
	EXTZV	#0, #15, R6, R0		; shift right 15 places
	ASHQ	#-15, R4, R4
	ASHQ	#-15, R6, R6
	INSV	R0, #17, #15, R5
	BICL	#^XFFFE0000, R7		; clear possibly shifted bits
	ADDL	R1, R7			; Step 3
	BVS	ERROR_H			; overflow if hidden bit bumps
					; exponent too far
15$:	BBC	#V_EXT_BITS, FLAG(SP), 17$
	MOVW	R8, @ext_bits(AP)
17$:	BBC	#V_NEGATIVE, FLAG(SP), 20$	; Step 4
	BBCS	#31, R7, 20$		; insert sign bit to 1
20$:	
	ROTL	#16, R7, R0		; rotate and store result
	ROTL	#16, R6, R1
	ROTL	#16, R5, R2
	ROTL	#16, R4, R3
	BRW	EXIT

ERROR_H:
	BRW	ERROR			; error return


FLOAT_F:
	MOVQ	BINNUM+8(SP), R6	; Restore fraction
	ASHL	#23, BINEXP(SP), R1	; Put exponent in proper place
	BVS	ERROR_F			; Error if overflows
	MOVZBL	R6, R8			; Extract rounding bits
	ASHQ	#-8, R6, R6		; Shift fraction right 8 places
	BICL	#^XFF000000, R7		; clear possibly shifted bits
	ADDL	R1, R7			; Add in exponent
	BVS	ERROR_F			; overflow if hidden bit bumps
					; exponent too far
15$:	BBC	#V_EXT_BITS, FLAG(SP), 17$
	MOVB	R8, @ext_bits(AP)
17$:	BBC	#V_NEGATIVE, FLAG(SP), 20$  ; Set sign bit
	BBCS	#31, R7, 20$		; insert sign bit to 1
20$:	
	ROTL	#16, R7, R0 		; rotate and store result
	ROTL	#16, R6, R1
	BRW	EXIT			; All done

ERROR_F:
	BRW	ERROR			; error return



;
; Success exit
;

EXIT:
	RET				; return 


	.SBTTL	RGET - get next character

;+
; Subroutine RGET
;	input:
;		R0 = number of characters remaining in string
;		R1 = address of current character
;	output:
;		R0 is decremented by 1.  If R0 is now non-positive,
;		RGET returns immediately, indicating that the end
;		of the string has been reached.
;		If there is string remaining, R1 now points to the
;		new current character, and R3 has that character.
;
;-

RGET:
	DECL	R0			; decrement length counter
	BLEQ	20$			; If string empty, return
	INCL	R1			; R1 points to new character
	MOVZBL	(R1), R3		; R3 gets character
	CMPL	R3, #9			; Is it a tab?
	BEQL	RGET			; Yes
10$:	CMPL	R3, #^A/ /		; is character a blank?
	BNEQ	20$			; return if not
	BRB	RGET			; yes
20$:	RSB				; return

	.SBTTL	MUL10_R9  -  multiply FAC by 10 and add digit in R3

;+
; Subroutine MUL10_R9
;	input:
;	R4-R7 - FAC
;	R9 - count of decimal digits currently held in FAC
;	output:
;	R4-R7 - FAC*10 + digit in R3
;	R9 - updated count
;-

MUL10_R9:
	AOBLEQ	#9, R9, M1		; If 9 or fewer digits, use M1.
	CMPL	R9, #18			; If 18 or fewer digits,
	BLEQ	M2			;  use M2.
;+
; Process entire octaword (four longwords), since there are > 18 digits.
;-
M4:	PUSHL	R0			; Free up a scratch register.
	EXTZV	#31, #1, R5, R0		; Save bit that will be lost.
	ASHQ	#1, R6, R6		; Multiply high part by 2.
	ADDL	R0, R6			; Replace bit lost in shift.
	ASHQ	#1, R4, R4		; Multiply low part by 2.
	EXTZV	#30, #2, R5, R0		; Save bits that will be lost.
	ASHQ	#2, R6, -(SP)		; Multiply high part by 4.
	ADDL	R0, (SP)		; Replace bits lost in shift.
	ASHQ	#2, R4, -(SP)		; Multiply low part by 4.
	ADDL	(SP)+, R4		; Add 8*FAC to 2*FAC.
	ADWC	(SP)+, R5		; ...
	ADWC	(SP)+, R6		; ...
	ADWC	(SP)+, R7		; ...
	ADDL	R3, R4			; Add digit in R3.
	BCC	20$			; If no carry, quit now.
	ADWC	#0, R5			; ...
	ADWC	#0, R6			; ...
	ADWC	#0, R7			; ...
20$:	MOVL	(SP)+, R0		; Restore scratch register.
	RSB				; Return to caller.
;+
; Process two low-order longwords only, since there are <= 18 digits.
;-
M2:	ASHQ	#1, R4, R4		; Multiply R4:R5 by 2.
	ASHQ	#2, R4, R6		; Multiply R4:R5 by 4.
	ADDL	R6, R4			; Add 8*FAC to 2*FAC (low).
	ADWC	R7, R5			; Add 8*FAC to 2*FAC (high).
	ADDL	R3, R4			; Add digit in R3.
	ADWC	#0, R5			; ...
	CLRQ	R6			; Restore R6:R7.
	RSB				; Return to caller.
;+
; Process low-order longword only, since there are 9 or fewer digits.
;-
M1:	MOVAL	(R4)[R4], R4		; Multiply R4 by 5.
	MOVAW	(R3)[R4], R4		; Multiply R4 by 2 and add R3.
	BNEQ	10$			; If nonzero, quit now.
	CLRL	R9			; Reset digit count, since digit
					;  was not significant.
10$:	RSB				; Return to caller.


	.SBTTL	BAS$VAL_L 	; convert text (integer) to longword

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	BAS$VAL_L converts an ASCII string containing a text
;	representation of a decimal number to internal binary form.
;
;	The text representation converted is:
;		<0 or more blanks>
;		<"+", "-" or nothing>
;		<0 or more ASCII digits from "0" through "9">
;		<end of string>
;
;	Notes:
;	  1.  Blanks and tabs are ignored.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = BAS$VAL_L (in_str.rt.dx )
;
; INPUT PARAMETERS:
;
	in_str	= 4			; Input string by descriptor
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;
; IMPLICIT OUTPUTS:
;
;	value in R0
;
; COMPLETION CODES:
;
;	SS$_NORMAL	- Successful completion
;	BAS$K_ILLNUM 	- There was an invalid character in the input
;			  string, the value overflowed the range allowed,
;			  or value_size was invalid.  The result "value" is
;			  set to zero, unless value_size is invalid, in which
;			  case "value" is unpredictable.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	BAS$VAL_L, REGMASK

	MOVQ	@in_str(AP), R0		; R0 = width of the input string
					; R1 = address of the input string
	CLRQ	R4			; R4/R5 = ACC = 0
	CLRL	R6			; clear flags 

;+
;-

5$:	SKPC	#^A/ /, R0, (R1)	; skip blanks
					; R0 = #CHAR_REMAINING
					; R1 = POINTER_TO_INPUT
					; Z bit is set if R0 = 0
	BEQL	DONE_L			; branch to DONE if no non-blank
	CMPB	(R1), #^X09		; is it a tab?
	BNEQ	7$			; If not, continue
	INCL	R1			; Bump pointer
	DECL	R0			; Decrement counter
	BRB	5$			; Look for more.
7$:	CMPB	(R1), #^A/-/		; is the current char a "-" sign?
	BNEQ	10$			; no, branch to 10$
	BBCS	#V_NEGATIVE, R6, DECIMAL_L
					; set negative flag and continue

10$:	CMPB	(R1), #^A/+/		; is current char a "+" sign?
	BNEQ	DIGIT_LOOP_L		; no, branch to check if it is a digit

;+
; skip over "-" or "+" sign
;-

DECIMAL_L:
	DECL	R0			; R0 = #CHAR_REMAINING
	INCL	R1			; R1 = POINTER_TO_INPUT

;+
; Loop to collect digits, treat blanks as zeroes, until the string is exhausted
; then branch to DONE
;-

DIGIT_LOOP_L:
	DECL	R0			; R0 = #CHAR_REMAINING
	BLSS	DONE_L			; branch to DONE if the string is exhausted

;+
; Get next character, ignoring blanks & tabs.
;-

	MOVZBL	(R1)+, R3		; get current char and adjust POINTER_TO_INPUT 
	CMPB	R3, #^A/ /		; compare char with blank
	BEQL	DIGIT_LOOP_L 		; yes, ignore it
	CMPB	R3, #^X09		; Tab?
	BEQL	DIGIT_LOOP_L		; Yes, ignore it
	BRB	CHECK_DIGIT_L		; Continue

;+
; Check if current char is a legal digit, accumulate it in ACC if yes and
; then branch to DIGIT_LOOP if no overflow. Otherwise fall into ERROR.
;-

CHECK_DIGIT_L:
	SUBL	#^A/0/,	R3		; R3 = ASCII(current_char) - ASCII("0")
	BLSS	ERROR_L			; Error if less than "0"
	CMPB	R3, #9			; Is it greater than "9"?
	BGTR	ERROR_L			; If so, error
	EMUL	#10, R4, R3, R4		; #10 = radix
					; R4 = LP(ACC), only LP(ACC) will be used in EMUL,
					; since R5 (=HP(ACC)) must be zero
					; R3 = current digit
					; R4/R5 = ACC = ACC * radix + current_digit
	TSTL	R5			; compare R5 with 0, since a non-zero value
					; in HP(ACC) meand overflow
	BEQL	DIGIT_LOOP_L		; if no overflow branch back to get more
					; character. Otherwise fall into ERROR

;+
; ERROR return
;-

ERROR_L:
	MOVZBL	#BAS$K_ILLNUM, -(SP)
	CALLS	#1, G^BAS$$STOP
	BRB	EXIT_L			; exit with zero and error

;+
; DONE
;-

DONE_L:	
	BBC	#V_NEGATIVE, R6, 10$	; branch if "-" wasn't seen
	CMPL	R4,#^X80000000		; is it 2**31?
	BEQL	EXIT_L			; yes, already correct!
	TSTL	R4			; test for overflow
	BLSS	ERROR_L			; if already negative, overflow
	MNEGL	R4, R4			; answer is -R4
	BRB	EXIT_L			; Store result
10$:	TSTL	R4			; Overflow?
	BLSS	ERROR_L			; If negative, yes
EXIT_L:	
	MOVL	R4, R0 			; Move longword result into R0
	RET


	.SBTTL	BAS$VAL_P - convert text to packed decimal

;++
; FUNCTIONAL DESCRIPTION:
; 
; 	This routine computes the packed decimal numeric value of an input string
; 	by calling an RTL conversion routine and returns the value in the
; 	destination descriptor.  If the input string doesn't contain a
; 	legitimate packed decimal number the routine will signal a
; 	noncontinuable error.
; 
; FORMAL PARAMETERS:
; 
; 	STRING.rt.dx		pointer to input string descriptor
; 	VALUE_DSC.wp.dsd	pointer to output packed decimal descriptor
; 
; IMPLICIT INPUTS:
; 
; 	NONE
; 
; IMPLICIT OUTPUTS:
; 
; 	NONE
; 
; ROUTINE VALUE:
; 
; 	NONE
; 
; SIDE EFFECTS:
; 
; 	This routine calls the conversion routine and therefore may signal any
; 	of its errors or have any of its side effects.  In particular the
; 	conversion routine calls STR$ routines and so may allocate or deallocate
; 	dynamic string space and write lock strings for a short time.  It
; 	may also signal BAS$K_ILLNUM if a non-numeric string is input.
; 
;--

;++
;	The following is the Bliss code that this routine was
;	generated from.
;
;	FMP = .FP;
;	DO
;		BEGIN					! search back for Basic frame
;		FMP = .FMP [BSF$A_SAVED_FP];
;		END
;	UNTIL (.FMP [BSF$A_HANDLER] EQLA BAS$HANDLER OR
;		   .FMP EQL 0);
;	
;	IF BAS$CVT_T_P (STRING [0, 0, 0, 0], 	! string to be converted
;		    VALUE_DSC [0, 0, 0, 0],		! place to put value
;		    ignore_blanks + ignore_tabs 
;		    + (IF  .FMP NEQ 0 AND (.FMP [BSF$W_FCD_FLAGS] AND BSF$M_FCD_RND) NEQ 0
;		       THEN 0
;		       ELSE dont_round))		! flags
;		NEQU SS$_NORMAL
;	THEN
;		BAS$$STOP (BAS$K_ILLNUM);		! input non-numeric, error
;		
;		
;	RETURN 					
;	END;					!End of BAS$VAL_P
;
;--

	  .ENTRY  BAS$VAL_P, REGMASK

;+
; begin by searching back for a BASIC frame.
;-
1$:	  MOVL    BSF$A_SAVED_FP(FP), R2	; get saved frame pointer
	  MOVAB   BAS$HANDLER, R3		; 
	  CMPL    (R2), R3			; do we have a BASIC frame?
	  BEQL    2$				; yes.
	  TSTL    R2				; no, have we run out of frames?
	  BNEQ    1$				; no, keep looking.

;+
; we arrive here when we either:
;	- found a BASIC frame, or 
;	- we ran out of frames.
;-
2$:	  TSTL    R2				; did we indeed run out of frames?
	  BEQL    3$				; yes.
	  BBC     #BSF$M_FCD_RND, BSF$W_FCD_FLAGS(R2), 3$	
						; no, was "round" bit-flag 
						; set in caller's frame?
						; if it wasn't, goto 3$

;+
; arrive here if:
;	- we found a BASIC frame, and the caller set the "round" bit-flag.
;-
	  CLRL    R0				; clear the "don't round" bit
						; in the flags longword that we
						; pass to the conversion routine
	  BRB     4$				; 

;+
; arrive here if we either:
;	- ran out of frames, or
;	- we found a BASIC frame, but the caller didn't set the "round" flag.
;-
3$:	  MOVL    #dont_round, R0		; set the "don't round" bit
						; in the flags longword that
						; we pass to the conversion
						; routine

;+
; call the routine BAS$CVT_T_P, which actually does the work.
;
; note: the "17" in the PUSHAB instruction that follows this is arrived at
; by adding the symbolic values for "ignore blanks" (1) and "ignore tabs" (16).
;-
4$:	  PUSHAB  17(R0)			; take whatever bits we have in
						; the flags longword, add the
						; "ignore blanks" and "ignore tabs"
						; bits to it, and put it
						; on the stack
	  MOVQ    string(AP), -(SP)		; put passed string descriptor 
						; on the stack
	  CALLS   #3, G^BAS$CVT_T_P		; call conversion routine
	  CMPL    R0, #1			; success?
	  BEQL    5$				; yes, return
	  MOVZBL  #BAS$K_ILLNUM, -(SP)		; no, set up to signal error
	  CALLS   #1, G^BAS$$STOP		; signal it

;+
; all done, return
;-
5$:	  RET     		


	.END
;
; end of module BAS$VAL
;
