	.TITLE	STR$MATCH_WILD		Match General Wild Card Specification
	.IDENT 	'V03-002'		; File: STRMATCH.MAR  Edit:LEB3002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; FACILITY:  General Utility Library
;
; ABSTRACT:
;
;	This routine performs the general embedded wild card matching
;	algorithm.
;
; ENVIRONMENT:
;
;	Runs at any access mode, AST Reentrant
;
; AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  10-Aug-1979  11:36
;
; MODIFIED BY:
;
;	V03-002 LEB		Linda Benson	15-Dec-1983
;		Change name from STR$MATCH_NAME to STR$MATCH_WILD
;		to more correctly match intent of this routine.
;		This marks version that has been incorporated into
;		the RTL.  Add EDIT field to module.
;
;	V03-001	BLS0178		Benn Schreiber	13-Mar-1982
;		Add interface to call as str$match_name
;
;	V02-001	MLJ0031		Martin L. Jack,	4-Aug-1981  6:32
;		Reorganize for simplicity and speed.
;
;**

;
; EXTERNAL DECLARATIONS:
;
; Prevent undeclared symbols from being automatically global.
;
	.DISABLE  GLOBAL
	.EXTERNAL STR$ANALYZE_SDESC_R1
	.EXTERNAL STR$_MATCH,STR$_NOMATCH
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _STR$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG

	.SBTTL	STR$MATCH_WILD, general wild card matching
;++
; Functional Description:
;	This routine performs the general embedded wild card matching
;	algorithm.
;
; Calling Sequence:
;	ret_status.wlc.v = STR$MATCH_WILD (CAND.rt.dx,PATRN.rt.dx)
;
; Formal Parameters:
;	CAND.rt.dx	Address of string descriptor for candidate string
;			 (The current item being looked at)
;	PATRN.rt.dx	Address of string descriptor for pattern string
;			 (The item looking for)
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routines Called:
;	STR$ANALYZE_SDESC_R1
;
; Routine Value:
;	STR$_MATCH   if the strings match.
;	STR$_NOMATCH if the strings don't match
;
; Signals:
;	Errors from STR$ANALYZE_SDESC
;
; Side Effects:
;	none
;
;--

	.ENTRY	str$match_wild,^M<R2,R3,R4,R5,R6,R7,R8,R9>

	MOVL	4(AP),R0		; get first descriptor address
	JSB	G^STR$ANALYZE_SDESC_R1	; extract string length and address
	MOVQ	R0,-(SP)		; save descriptor
	MOVL	8(AP),R0		; get second descriptor address
	JSB	G^STR$ANALYZE_SDESC_R1	; analyze second descriptor
	MOVQ	R0,R4			; set up for match algorithm
	MOVQ	(SP)+,R2		; retrieve first descriptor
	MOVL	#STR$_NOMATCH,R0	; Assume failure
	CLRL	R6			; Clear saved candidate count
;
; Main scanning loop.
;
10$:	DECL	R4			; Pattern exhausted?
	BLSS	30$			; Branch if yes
	MOVZBL	(R5)+,R1		; Get next character in pattern
	CMPB	R1,#^A'*'		; Pattern specifies wild string?
	BEQL	60$			; Branch if yes
	DECL	R2			; Candidate exhausted?
	BLSS	50$			; Branch if yes
	CMPB	R1,(R3)+		; Compare pattern to candidate
	BEQL	10$			; Branch if pattern equals candidate
	CMPB	R1,#^A'%'		; Pattern specifies wild character?
	BEQL	10$			; Branch if yes
;
; We have detected a mismatch, or we are out of pattern while there is
; candidate left.  Back up to the last '*', advance a candidate character,
; and try again.
;
20$:	DECL	R6			; Count a saved candidate character
	BLSS	50$			; Branch if no saved candidate
	INCL	R7			; Set to try next character
	MOVQ	R6,R2			; Restore descriptors to backup point
	MOVQ	R8,R4			;
	BRB	10$			; Continue testing
;
; Here when pattern is exhausted.
;
30$:	TSTL	R2			; Candidate exhausted?
	BNEQ	20$			; Branch if no
;
; Here to return.
;
40$:	MOVL	#STR$_MATCH,R0		; Set success return
50$:	RET				; Return
;
; We have detected a '*' in the pattern.  Save the pointers for backtracking.
;
60$:	TSTL	R4			; Pattern null after '*'?
	BEQL	40$			; Branch if yes
	MOVQ	R2,R6			; Save descriptors of both strings
	MOVQ	R4,R8			;
	BRB	10$			; Continue testing

	.END
