MODULE TRNLOG (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MOUNT Utility Structure Levels 1 & 2
!
! ABSTRACT:
!
!	This routine performs simple recursive logical name translation.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  9-Oct-1977  16:10
!
! MODIFIED BY:
!
!	V03-001	HH0041		Hai Huang		24-Jul-1984
!		Remove REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.B32'.
!
!	V02-001	ACG0167		Andrew C. Goldstein,	18-Apr-1980  13:39
!		Previous revision history moved to MOUNT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:MOUDEF.B32';

GLOBAL ROUTINE TRAN_LOGNAME (LOG_NAME, RESULT) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs simple recursive logical name translation.
!
!
! CALLING SEQUENCE:
!	TRAN_LOGNAME (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: descriptor of logical name to translate
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	ARG2: descriptor of result string buffer
!		(first word receives length of result)
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	LOG_NAME	: REF VECTOR,	! logical name descriptor
	RESULT		: REF VECTOR;	! result string descriptor

LOCAL
	NAME_DESC	: VECTOR [2],	! descriptor of current logical name string
	STATUS,				! system service status
	P;				! string search pointer

! We iterate on logical name translation until the service returns SS$_NOTRAN.
! Perform device name extraction by using only the part of the logical name to
! the left of the colon (if any), also checking for node names.
!

NAME_DESC[0] = .LOG_NAME[0];		! get initial logical name
NAME_DESC[1] = .RESULT[1];
CH$COPY (.LOG_NAME[0], .LOG_NAME[1], 0, .RESULT[0], .RESULT[1]);

IF BEGIN
DECR N FROM 10 TO 1 DO
    BEGIN
    P = CH$FIND_CH (.NAME_DESC[0], .NAME_DESC[1], ':');
    IF NOT CH$FAIL (.P)
    THEN
	BEGIN
	IF .P - .NAME_DESC[1] LSSU .NAME_DESC[0] - 1
	AND .(.P)<0,16> EQL '::'
	THEN ERR_EXIT (MOUN$_NONLOCAL);
	NAME_DESC[0] = .P - .NAME_DESC[1];
	END;

    IF CH$RCHAR (.NAME_DESC[1]) EQL '_'
    THEN EXITLOOP 0;

    STATUS = $TRNLOG (LOGNAM = NAME_DESC[0],
		      RSLLEN = NAME_DESC[0],
		      RSLBUF = RESULT[0]);
    IF .STATUS EQL SS$_NOTRAN THEN EXITLOOP 0;
    IF NOT .STATUS THEN ERR_EXIT (.STATUS);
    END
END
THEN ERR_EXIT (MOUN$_NOTRAN);

RESULT[0] = .NAME_DESC[0];

END;					! end of routine TRAN_LOGNAME

END
ELUDOM
