	$BEGIN	RMS0CLOSE,000,RM$RMS,<DISPATCH FOR CLOSE OPERATION>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility: rms32
;
; Abstract:
;		this module is the highest level control routine
;		to perform the $close function.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 1-MAR-1977
;
; Modified By:
;
;	V03-033	SHZ0010		Stephen H. Zalewski,	04-May-1984
;		Do not recreate address space in rm$unmap_gbl because
;		the space is now taken directly from P0 space.
;
;	V03-032	JEJ0011		J E Johnson		20-Mar-1984
;		Include global buffer quota accounting.
;
;	V03-031	JEJ0020		J E Johnson		28-Mar-1984
;		Correct multiple problems in RAS270.
;
;	V03-030	RAS0270		Ron Schaefer		14-Mar-1984
;		Remove the NAM block dependency for the SPL/SCF/DLT on
;		$CLOSE options.   Eliminate RM$CLOSE1.
;
;	V03-029	DGB0011		Donald G. Blair 	01-Mar-1984
;		Change the way the ACP is called as part of the restructuring
;		necessary for access mode protected files.
;
;	V03-028	JWT0160		Jim Teague		29-Feb-1984
;		Remove calls to RM$DEALLEFN.
;
;	V03-027	SHZ0009		Stephen H. Zalewski	12-Sep-1983
;		Change the sense of a branch so that the NWA DOES get 
;		deallocated during the close.
;
;	V03-026	SHZ0008		Stephen H. Zalewski	10-Aug-1983
;		Set a bit in the GBSB after we have decremented the accessor
;		count in the global buffer section (and possibly flushed the
;		cache as well) to prevent last chance
;		from decrementing the count again in the case where the
;		process gets stopped before we have completely cleaned up.
;
;	V03-025	SHZ0007		Stephen H. Zalewski	02-Aug-1983
;		If last accessor to a global buffer section, then zero
;		the global section size, and global buffer count fields
;		in the lock value block for the section.  This is to prevent
;		the case where the next accessor takes a lock before we
;		are done cleaning up, thus causing this subsequent accessor
;		to get incorrect data in the value block.
;
;	V03-024	KBT0567		Keith B. Thompson	28-Jul-1983
;		Check for the NWA pointer not the flag
;
;	V03-023	DAS0001		David Solomon		20-Jul-1983
;		IFB$V_JNL moved from IFB$B_JNLFLG to IFB$B_JNLFLG2.
;
;	V03-022	KPL0003		Peter Lieberwirth	20-Jun-1983
;		Correct commentary regarding AT journaling of $CLOSE.
;
;	V03-021	SHZ0006		Stephen H. Zalewski	20-Jun-1983
;		Add code for cluster global buffers.
;
;	V03-020	KPL0002		Peter Lieberwirth	31-May-1983
;		Write CLOSE mapping journal entry before buffers are
;		deallocated.
;
;	V03-019	KBT0520		Keith B. Thompson	23-May-1983
;		The routine RM$CHKNAMBLK no longer exist and remove
;		the RM$CLS_CHKNAM hack.
;
;	V03-018	KBT0509		Keith B. Thompson	5-May-1983
;		Use RM$DEALLOCATE_FWA
;
;	V03-017	KPL0001		Peter Lieberwirth	29-Apr-1983
;		Always look for IFAB journaling structures to deallocate.
;
;	V03-016	JWH0200		Jeffrey W. Horn		22-Mar-1983
;		Back out JWH0102, $CLOSE now allowed within an active
;		RU.
;
;	V03-015	KBT0457		Keith B. Thompson	10-Jan-1983
;		Deallocate fwa along with ifab.
;
;	V03-014	SHZ0005		Stephen H. Zalewski,	19-Oct-1982  16:32
;		Remove code that checks for corrupt gbd's in a global
;		buffer section.
;
;	V03-013	JWH0104		Jeffrey W. Horn		22-Sep-1982
;		Relocate calls to RM$MAPJNL, RM$DEAJNL to after deaccess.
;
;	V03-012	JWH0102		Jeffrey W. Horn		22-Sep-1982
;		If the file is in a recovery-unit then don't allow the user
;		to close the file.
;
;	V03-011	SHZ0004		Stephen H. Zalewski,	10-Sep-1982  17:04
;		Remove all references to SFD, SIFB and FRB as they no longer
;		exist.
;
;	V03-010	KBT0339		Keith B. Thompson	16-Sep-1982
;		Always try to deallocate the gbsb (i.e. take it out of unmap)
;
;	V03-009	SHZ0003		Stephen H. Zalewski,	7-Sep-1982  22:24
;		Add TEMPORARY code that checks for corruption of GBDs
;		in global buffer section.
;
;		Move dequeueing of global buffer section lock so that when
;		a global section is upmapped the lock is immediately dequeued.
;		This prevents a second process form initializing a new section
;		incorrectly.
;
;	V03-008	SHZ0002		Stephen H. Zalewski,	1-Sep-1982  15:37
;		If stream has global buffers, then dequeue the lock it
;		had on the global buffer section, and remove its GBSB.
;
;	V03-007	KBT0179		Keith B. Thompson	23-Aug-1982
;		Reorganize psects and rename entry point to single '$'
;
;	V03-006	KBT0110		Keith B. Thompson	16-Jul-1982
;		Deallocate the sfsb at a more appropiate time
;
;	V03-005	TMK0001		Todd M. katz		02-Jul-1982
;		Implement the RMS cluster solution for next record positioning.
;		As the next record context is now kept locally in the IRAB
;		instead of in individual NRP cells, there is no NRP list
;		to be returned.
;
;	V03-004	KDM0002		Kathleen D. Morse	28-Jun-1982
;		Added $PRDEF.
;
;	V03-003	JWH0002		Jeffrey W. Horn		19-May-1982
;		Add support for journaling;  Write out closing mapping entry
;		and then call RM$DEAJNL.
;
;	V03-002	SHZ0001		Stephen H. Zalewski,	8-Jun-1982  17:02
;		Remove instruction that cleared kernel mode flag after the
;		SIFAB was released (moved to RM0SHARE).
;
;--

	.SBTTL	DECLARATIONS

;
; Macros:
;

	$BDBDEF
	$BLBDEF				; bucket lock block defs
	$DEVDEF
	$FABDEF
	$FIBDEF
	$FWADEF
	$GBDDEF
	$GBHDEF
	$GBPBDEF
	$GBSBDEF
	$IFBDEF
	$IMPDEF
	$IODEF				; io definitions
	$IRBDEF
	$LCKDEF
	$NAMDEF
	$PSLDEF				; psl definitions
	$RABDEF
	$RLBDEF				; record lock block defintions
	$RLSDEF
	$RMSDEF
	$SJCDEF

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8
	BKP=IRB$L_BKPBITS*8

;
; Own Storage:
;

	MASK	= ^X1FF			; mask for getting to page boundary


	.SBTTL	RMS$CLOSE, $CLOSE Routine
;++
;
; RMS$$CLOSE - highest level file close routine
;
;  this routine performs the highest level $close processing.
;  its functions include:
;
;	1. common setup
;	2. check for all streams idle, exiting if not
;	3. force a disconnect for all streams
;	4. dispatch to organization-dependent code
;	5. if the dlt fop bit is set and neither spl nor scf is set,
;	   delete the file
;	6. return all bdb's and buffers
;	7. deaccess the file if accessed
;	8. return the asb and nwa (if any), the ifab, and all pages used for
;	   rms internal structures for this file
;	9. zero the ifab table pointer and fab$w_ifi
;	10. exit to the user, generating an ast if requested
;
;
; Calling sequence:
;
;	entered from exec as a result of user's calling sys$close
;	(e.g., by using the $close macro).
;
; Input Parameters:
;
;	ap	user's argument list addr
;
; Implicit Inputs:
;
;	the contents of the fab and possible related user interface
;	blocks.
;
; Output Parameters:
;
;	r0	status code
;	r1	destroyed
;
; Implicit Outputs:
;
;	the ifab and all related internal rms structures are vaporized.
;	fab$l_sts and fab$l_stv are output and fab$w_ifi is zeroed if the
;	close was successful.
;
;	a completion ast is queued if so specified by the user.
;
; Completion Codes:
;
;	standard rms
;
; Side Effects:
;
;	none
;
;--

	$ENTRY	RMS$CLOSE
	$TSTPT	CLOSE
	BSBW	RM$FSET			; do common setup
					; note: does not return on error

;++
;  force a disconnect on all streams
;

	PUSHL	#1			; status code to stack
	BRB	NXTIRAB			; go check if any irabs linked

;
;  do an effective bsb to the org-specific disconnect
;
;  note: this makes the fab look like a rab, but is of no consequence
;	since there are no rab inputs to the internal disconnect
;	and the only outputs are stv and isi (zeroed)
;

	ASSUME	RAB$L_STV EQ FAB$L_STV
	ASSUME	RAB$W_ISI EQ FAB$W_IFI
	ASSUME	RAB$C_BLN LE FAB$C_BLN	; (necessary for the re-probe on stall)

;
;  must clear the async operation bit to avoid arglist copy to asb, set busy,
;  and initialize ppf_image bit correctly
;--
;

NXTDISC:
	BICB	#<1@<IRB$V_ASYNC-BKP>>!<1@<IRB$V_PPF_IMAGE-BKP>>,-
		IRB$L_BKPBITS(R9)
	SSB	#IRB$V_BUSY,(R9)	; say rab busy
	MOVB	R7,IRB$B_MODE(R9)	; set mode into irab
	BBC	#IFB$V_PPF_IMAGE,(R10),10$ ; branch unless indirect ppf
	SSB	#IRB$V_PPF_IMAGE,(R9)	; say irab accessed indirectly
10$:	PUSHR	#^M<R7,R9>		; save mode and irab addr
	PUSHAB	B^NXTRTN		; return pc to stack
	CASE	TYPE=B, SRC=IFB$B_ORGCASE(R10),-
		DISPLIST=<RM$DISCONNECT1,RM$DISCOMMONSUC,RM$DISCONNECT3>
	BRW	RM$DISCOMMONSUC		; handle unknown org (blk i/o)
NXTRTN:	POPR	#^M<R7,R9>		; restore mode and (deallocated irab addr
					; (link still valid)
	BBC	#IFB$V_PPF_IMAGE,(R10),10$ ; branch unless indirect ppf
	CSB	#IRB$V_BUSY,(R9)	; say irab not busy anymore
10$:	BLBS	R0,NXTIRAB		; branch if no error
	MOVL	R0,(SP)			; replace status code

	ASSUME	IFB$L_IRAB_LNK	EQ	IRB$L_IRAB_LNK

NXTIRAB:
	MOVL	IRB$L_IRAB_LNK(R9),R9	; get next irab

;*****
;
; note: the next irab link must still be good even though previous irab
;	is deallocated, since nothing else could have re-used the space.
;
;****

	BNEQ	NXTDISC			; loop if more irabs
	MOVL	R10,R9			; restore ifab address

;++
;
;  get or of fab options that are input to either open/create or close
;
;--

	BBS	#IFB$V_PPF_IMAGE,(R9),10$ ; branch if indirect ppf

	ASSUME	FAB$V_RWC+1	EQ	FAB$V_DMO
	ASSUME	FAB$V_DMO+1	EQ	FAB$V_SPL
	ASSUME	FAB$V_SPL+1	EQ	FAB$V_SCF
	ASSUME	FAB$V_SCF+1	EQ	FAB$V_DLT

	EXTZV	#FAB$V_RWC+FOP,#5,(R8),R1 ; get option bits from fab

	ASSUME	IFB$V_RWC+1	EQ	IFB$V_DMO
	ASSUME	IFB$V_DMO+1	EQ	IFB$V_SPL
	ASSUME	IFB$V_SPL+1	EQ	IFB$V_SCF
	ASSUME	IFB$V_SCF+1	EQ	IFB$V_DLT

	EXTZV	#IFB$V_RWC,#5,(R9),R0	; get saved ifab copies from $open
	BISB2	R1,R0			; or them together
	INSV	R0,#IFB$V_RWC,#5,(R9)	; and restore in ifab flags

;++
;
;  dispatch to organization-dependent close code
;
;  register state for dispatch:
;
;	r11	impure area address
;	r10	ifab address
;	r9	ifab address
;	r8	fab address
;	(sp)	return address
;	4(sp)	status code
;
;--
;
;	PUSHAB	B^CLSDLT		; return pc to stack
;	CASE	TYPE=B,SRC=IFB$B_ORGCASE(R9),-
;	DISPLIST=<RM$NULL,RM$NULL,RM$CLOSE3> ; pick up correct routine
;	TSTL	(SP)+			; remove return pc for other orgs
;
;++
;
;  NOTE: Since there is only a special close routine for isam make life
;	 a little simpler.  If the above code is ever used the call to
;	 rm$close3 will have to be done through rm3face since the word
;	 branch of the case will not reach the real rm$close3
;
;--

10$:	CMPB	#IFB$C_IDX,IFB$B_ORGCASE(R9)	; Is this isam
	BNEQ	CLSDLT				; Branch if not
	JSB	RM$CLOSE3			; Do the close




;++
;
;  return here from organization-dependent close routines
;
;--
;
; check for dlt fop bit set.
; if set and the spl and scf bits are clear, delete the file.
;
;--

CLSDLT:	BBC	#IFB$V_DLT,(R9),CLSCU1	; branch if dlt not speced

;
; if this is a network operation, do not process dlt option; it will be
; handled by network code during deaccess.
;

	BBS	#DEV$V_NET,IFB$L_PRIM_DEV(R9),- ; branch if network operation
		CLSCU1

	ASSUME	IFB$V_SCF	EQ	IFB$V_SPL+1

	CMPZV	#IFB$V_SPL,#2,(R9),#0		; spl and scf both 0?
	BNEQ	CLSCU1				; branch if not
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R9),- ; ignore if not disk
		CLSCU1
	BBS	#DEV$V_FOR,IFB$L_PRIM_DEV(R9),- ; ignore if mntd foreign
		CLSCU1
	BBS	#IFB$V_PPF_IMAGE,(R9),CLSCU1	; ignore if indirect ppf

;
;	build fib for delete
;

BLDFIB:	MOVL	IFB$L_FWA_PTR(R9),R10	; get FWA addr
	MOVL	FWA$Q_FIB+4(R10),R1	; get FIB addr
	BBS	#IFB$V_TMP,(R9),DELETE	; branch if no directory entry
	SSB	#FIB$V_FINDFID,FIB$W_NMCTL(R1) ; indicate find via fid
					; (0 fid => current file)
DELETE:	MOVZWL	#<IO$_DELETE!IO$M_DELETE>,R0 ; set i/o func code
	CLRQ	-(SP)			; p6 = p5 = 0 for qio 
	CLRQ	-(SP)			; p4 = p3 = 0 for qio 
	CLRL	-(SP)			; p2 = 0 for qio 
	BSBW	RM$FCPFNC		; call acp to do the delete
	BLBS	R0,CLSCU1		; branch if okay
	RMSERR	MKD,(SP)		; replace error code
	MOVL	IFB$L_IOS(R9),FAB$L_STV(R8) ; return system error code
	BRB	CLSCU1			; return to common close


	.SBTTL	RM$CLSCU, Cleanup IFAB and Exit RMS

;++
; RM$CLSCU - clean part of close operation for error paths
;
;  entry point to clean up on aborted $open or $create
;  or successful $erase,$parse or other control routine
;
;--

RM$CLSCU::
	PUSHL	R0			; save error code

;
;  close of indirectly opened process permanent file.
;  need merely zero the ifi field.
;

CLSCU1:	BBC	#IFB$V_PPF_IMAGE,(R9),20$ ; branch if not indirect ppf
	CLRW	FAB$W_IFI(R8)
	POPL	R0			; restore status code
	BRW	RM$EXRMS		; all set

;
;	cleanup ifab and all associated structures
;

20$:	BSBB	RM$CLEANUP		; cleanup ifab and stuff
	BLBC	R0,CLS_EX		; branch if cleanup error
	POPL	R0
CLS_EX:	BRW	RM$EX_NOSTR		; and do structureless exit

	.SBTTL	RM$RETIFB, Return IFAB but Leave File Open

;++
;
;	RM$RETIFB - evaporate internal structures but leave accessed
;
;	Entry point to leave file open for user but remove all rms
;	knowledge of the file
;
; outputs:
;
;	r0 = status code
;
;--

RM$RETIFB::
	PUSHAB	B^CLS_EX		; return address from cleanup
	PUSHL	R0			; save status code
	BRW	CLNJNL			; only return ifab, etc.
					; by jumping into cleanup


	.SBTTL	RM$CLEANUP, Cleanup IFAB and Associated Storage

;++
;
;	RM$CLEANUP - deallocate internal structures
;
;	Cleanup the ifab and its associated structures (bdb's, etc.)
;	if an access has been done, a deaccess is performed.  any
;	outstanding channels are deassigned.  the ifi entry in the
;	ifab table is deleted.
;
; inputs:
;
;	r9 = ifab address
;	r11 = impure area
;
; outputs:
;
;	r0 = status code
;	r7 = caller's access mode
;	ap = restored argument list pointer
;
;	(r7,ap are used as inputs to rm$ex_nostr)
;--
;

RM$CLEANUP::

;
;  preset status to be returned to caller
;

	PUSHL	#1			; preset status to return

	BBC	#IFB$V_JNL,-		; branch if no journaling or if an
		IFB$B_JNLFLG2(R9),20$	;  error turned journaling off
	JSB	RM$MAPJNL		; write out $CLOSE mapping entries
	BLBS	R0,10$			; branch on success
	MOVL	R0,(SP)			; otherwise replace status code
10$:

;
;  return all buffers and bdb's
;

20$:	BSBW	RM$RELEASALL

;
;  deaccess the file
;

DEACCESS:
	BBCC	#IFB$V_ACCESSED,(R9),10$ ; branch if file not accessed
	BSBW	RM$DEACCESS		; do the deaccess
	BLBS	R0,5$			; branch on success
	MOVL	R0,(SP)			; save error code

;
; if this is a network operation, do not process scf and spl options by
; rm$close1; these will be handled by network code during deaccess.
;

5$:	BBS	#DEV$V_NET,IFB$L_PRIM_DEV(R9),10$ ; branch if network operation

	ASSUME	FAB$C_SEQ	EQ	0

	TSTB	IFB$B_ORGCASE(R9)	; sequential file org?
	BNEQ	10$			; branch if not
	CMPZV	#IFB$V_SPL,#2,(R9),#0	; spl and scf both 0?
	BEQL	10$			; branch if so
	BSBW	RM$SPL_SCF		; check for spool or submit
	BLBS	R0,10$			; branch on success
	MOVL	R0,(SP)			; save error code

10$:	BBS	#DEV$V_MBX,IFB$L_PRIM_DEV(R9),CLSMLBX ; branch if mailbox
	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),DEASSIGN ; branch if not magtape

;
;   foreign magtape - write end of tape if ifb$v_eof is set
;			rewind if rwc (rewind on close) is set
;

CLSMAGTAP:
	BBC	#DEV$V_FOR,IFB$L_PRIM_DEV(R9),DEASSIGN ; branch if not foreign
	BSBW	RM$WTTAPMARK		; write tape marks
	BLBC	R0,DEASSIGN_ALT		; go away if error

	BBC	#IFB$V_RWC,(R9),DEASSIGN ; branch if no rewind
	PUSHL	R10			; rewind wants ifab in r10
	MOVL	R9,R10			; r10 <- ifab
	BSBW	RM$REWIND_MT		; do rewind
	POPL	R10			; restore r10
	BRB	DEASSIGN_ALT		; join mainstream

;
;   mail box - write end of file if write access was allowed
;

CLSMLBX:
	BBC	#IFB$V_WRTACC,(R9),DEASSIGN ; branch if no write
	BSBW	RM$WRITEOF		; write end of file

DEASSIGN_ALT:
	MOVL	R0,(SP)			; save status

;
;  deassign i/o channel
;

DEASSIGN:
	$DASSGN_S	IFB$W_CHNL(R9)


;
;  clean up journaling
;

CLNJNL:
	JSB	RM$DEAJNL		; clean up journaling
	BLBS	R0,RETIFB		; branch on success
	BLBC	(SP),RETIFB		; branch if code already error
	MOVL	R0,(SP)			; otherwise replace status code

;
;	Return the ifab, sfsb, asb, fwa(s) and nwa if any
;

RETIFB:	
	MOVL	IFB$L_ARGLST(R9),AP	; restore arglist address
	MOVZBL	IFB$B_MODE(R9),R7	; and caller's mode
	BSBW	RM$RLS_SFSB		; clean up sfsb if any
	TSTL	IFB$L_NWA_PTR(R9)	; check for nwa
	BEQL	10$			; branch if nwa not present
	BSBW	NT$NWA_FREE		; deallocate nwa
10$:	MOVL	IFB$L_ASBADDR(R9),R4	; get asb addr
	BEQL	20$			; branch if none
	MOVL	R11,R3			; ifab asb came from imp. free space header
	BSBW	RM$RETBLK		; deallocate asb
	CLRL	IFB$L_ASBADDR(R9)	; clear pointer
20$:	BSBW	RM$DEALLOCATE_FWA	; deallocate fwa and related structures
	MOVQ	R9,R3			; ifab addr to right regs for retblk
	BSBW	RM$RETBLK		; deallocate ifab

;
;	Return the pages used for all internal structures
;

	SUBL2	#8,R10			; get start of page addr
	MOVL	(R10),R4		; get 1st hole (there must be
					; at least 1 hole for ifab)
40$:	MOVL	(R4),R6			; get next free space hole
	CMPL	8(R4),#504		; all holes should now be equal
					;  to one page in length
					; (less list head if page 1)
	BLSSU	ERRBUG			; branch if not
	BSBW	RM$RET1PAG		; return it
	MOVL	R6,R4			; get set to return next page
	CMPL	R6,R10			; all done?
	BNEQ	40$			; loop if not

;
;	Zero ifi and ifab table pointer
;

	BSBW	RM$ZAPIFI		; zero ifi and ifab table entry
	POPL	R0			; return status to caller
	RSB				; return to caller

;
;	Attempted to return an ifab-related page having some
;	non-deallocated block(s) in it
;

ERRBUG:	RMSTBUG	FTL$_DEALLERR


	.SBTTL	RM$SPL_SCF - $CLOSE routine for spool/submit options

;++
; RM$SPL_SCF - specific close code for the SPL and SCF FOP options
;
;  This routine performs the spl and scf options, and if set (either on
;  $open/$create or on $close), sends a message to the job controller to
;  queue the file to the sys$print or sys$batch queues respectively.
;  If both spl and scf are set, scf takes precedence.  The dlt fop sub-option
;  is passed on to the job controller.
;
;  The overall flow of the routine is as follows:
;
;	1. build the dvi, did and fid fields from the fwa onto the stack.
;	2. allocate a buffer on the stack to build the item list for the job
;	   controller.
;	3. fill the queue name in the appropriate item; the job controller will
;	   translate either SYS$PRINT or SYS$BATCH.
;	4. point an item at the dvi, did, fid copy on th stack
;	5. fill in the delete option if required.
;	6. send the message to the job controller with a function code of
;	   sjc$_queue.
;
; Calling sequence:
;
;	BSBW	RM$SPL_SCF
;
; Input Parameters:
;
;	r10	ifab address
;	r9	ifab address
;	r8	fab address
;
; Implicit Inputs:
;
;	the contents of the ifab (especially ifb$v_spc, scf, and dlt)
;	the contents of the fwa (especially fwa$q_shrfil and fwa$t_fibbuf)
;
; Output Parameters:
;
;	r1-r7	destroyed
;	r0	status code
;
; Implicit Outputs:
;
;	fab$l_stv is set to subsidiary error code on an error.
;
; Completion Codes:
;
;	standard rms, in particular, spl.
;
; Side Effects:
;
;	none
;
; Note: no need to check that PPF_IMAGE not set since can't get here if so.
;
; job controller item list is currently 10 longwords
; long - for three items and terminator
;
;--

;
; Own Storage:
;

SYSPRINT:	.ASCII	/SYS$PRINT/
SYSPRINT_LEN	=	.-SYSPRINT

SYSBATCH:	.ASCII	/SYS$BATCH/
SYSBATCH_LEN	=	.-SYSBATCH

ID_SIZE		= 16 + 6 + 6		; DVI + DID + FID

RM$SPL_SCF::

;
; Allocate DVI_DID_FID buffer on stack and fill it in.
;

	SUBL2	#<ID_SIZE>,SP	
	MOVL	IFB$L_FWA_PTR(R9),R7	; get FWA ptr
	MOVQ	FWA$Q_SHRFIL(R7),R0	; get DVI description
	MOVB	R0,(SP)			; make it ASCIC
	MOVC5	R0,(R1),#0,#15,1(SP)	; copy dvi and fill to 16 bytes

	ASSUME	FIB$W_FID+6 EQ FIB$W_DID

	MOVC3	#<6+6>,FWA$T_FIBBUF+FIB$W_FID(R7),(R3)
					; copy did and fid 
	MOVL	SP,R2			; remember addr of dvi_did_fid blk
					; R3 points to cleaned-off SP

;
; Build the job controller item list
;

	CLRL	-(SP)			; end-of-list flag
	BBC	#IFB$V_DLT,(R9),10$	; branch if no delete requested
	CLRQ	-(SP)			; no retlen or addr
	PUSHL	#SJC$_DELETE_FILE@16	; delete flag
					; and zero bufflen

;
; Now, point to the dvi_did_fid block to identify the file
;	

10$:	CLRL	-(SP)			; no retlen
	PUSHL	R2			; addr of block
	PUSHL	#<<SJC$_FILE_IDENTIFICATION@16>+ID_SIZE> ; item type
					; and fill in size of identification

;
; Fill in the initial item, which indicates to the job controller that a file is
; to be queued to either SYS$PRINT or SYS$BATCH.
;

	ASSUME	SYSPRINT_LEN	EQ	SYSBATCH_LEN

	CLRL	-(SP)			; no retlen
	BBS	#IFB$V_SCF,(R9),20$	; branch if submit command file
	PUSHAL	B^SYSPRINT		; point to queue name string
	BRB	30$			; do next item
20$:	PUSHAL	B^SYSBATCH		; point to queue name
30$:	PUSHL	#<<SJC$_QUEUE@16>+SYSPRINT_LEN>	; indicate function
					;  and fill in length of queue name

	MOVL	SP,R1			; addr of itemlist

;
; Call the job controller.
;

	$SNDJBC_S -
		EFN	= #IMP$C_ASYQIOEFN,-	; throw-away event flag
		FUNC	= #SJC$_ENTER_FILE,-	; function
		ITMLST	= (R1)		; item list

	MOVL	R3,SP			; clean stack
	BLBS	R0,40$			; exit on error
	MOVL	R0,FAB$L_STV(R8)	; save jobctl status
	RMSERR	SPL			; and report error
40$:	RSB


	.SBTTL	RM$RELEASALL, Release all BDB's

;++
; RM$RELEASALL - release bdb's and buffers
;
;  Subroutine to release all bdb's and their associated buffers.
;  Assumes dirty buffers will not be found.
;  Also return all BLB's.
;
;  inputs:
;	r11	impure area address
;	r9	ifab address
;	r8	fab address
;
;  outputs:
;	r10	ifab address
;	r0-r6	destroyed
;--
;
;  return all buffers and bdb's
;
;--

RM$RELEASALL::
	MOVL	R9,R10			; make sure r10 = ifab addr
	MOVAL	IFB$L_BDB_FLNK(R10),R6	; get bdb list head
10$:	MOVL	(R6),R4			; get 1st bdb in list
	CMPL	R4,R6			; back at list head?
	BEQL	30$			; branch if yes - all done
	BBS	#BDB$V_DRT, BDB$B_FLGS(R4), DRTBUG ; Don't expect to find dirt.
	TSTW	BDB$W_USERS(R4)		; use count nonzero?
	BNEQ	20$			; no, go release bdb
	INCW	BDB$W_USERS(R4)		; make it look accessed
20$:	BSBW	RM$RLNERR		; go release it and free buffer.

	ASSUME	BDB$B_BID	EQ	GBPB$B_BID
	ASSUME	<BDB$C_BID&1>	EQ	0
	ASSUME	<GBPB$C_BID&1>	EQ	1

	BLBS	BDB$B_BID(R4), 25$	; br if gbpb.
	BSBW	RM$RETBDB		; return the bdb
	BRB	10$			; keep going until all gone.
25$:	BSBW	RM$RETGBPB		; return gbpb.
	BRB	10$			; keep going

	ASSUME	IFB$W_AVGBPB	EQ	<IFB$W_AVLCL + 2>

30$:	CLRL	IFB$W_AVLCL(R10)	; Note all buffers gone.
	BBS	#IFB$V_NORECLK, (R10), RA_EX ; All done if no locking.
	MOVAL	IFB$L_BLBFLNK(R10), R6	; Get list head for BLB's.
40$:	MOVL	(R6), R4		; Get next BLB.
	CMPL	R4, R6			; Back at list head?
	BEQL	CHKGBL			; All done then.
	TSTL	BLB$L_LOCK_ID(R4)	; This one still locked?
	BEQL	45$			; EQL no lock, so just return it.
	BSBW	RM$RLNER1		; Release the lock first.
	MOVL	IFB$L_BLBBLNK(R10), R4	; Recover BLB address.
45$:	BSBW	RM$RETBLB		; Return the BLB.
	BRB	40$			; Go get next one.

CHKGBL:	TSTL	IFB$L_GBH_PTR(R10)	; Are global buffers present?
	BEQL	RA_EX			; No, we are done.
	BSBW	RM$RAISE_GBS_LOCK	; Get EX lock on global section.
	BSBB	RM$RELEASE_GBL_BUFFERS	; Release and cleanup global buffers.
	BSBB	RM$UNMAP_GBL		; Disassociate from section.
RA_EX:	BSBW	RM$RLS_GBSB		; Deallocate the GBSB if any (also release lock)
	RSB

DRTBUG:	RMSTBUG	FTL$_RLSDRT		;  A dirty buffer has been left
					;   behind by someone.


;++
;
; RM$RELEASE_GBL_BUFFERS
;
; This routine decrements the access count for the global buffer section.
; If the access count goes to zero, then all cached buffers are released by
; dequeuing the system lock for each buffer, and the system file lock is
; also released.
;
; As a part of releasing the system lock on a buffer, we also give back the
; quota used when that lock was first converted.  Notice that if this routine
; is called as part of a $CLOSE operation then there exists a non-closeable
; hole in which we can give back the quota and have the process deleted before
; dequeing the lock.  This will have the effect of increasing the global
; buffer quota by one.  The reverse can occur during conversion to the system
; lock in RM0RELEAS.
;
; Note: This routine assumes that an EX lock has already been taken on the
;       global section.
;
; Inputs:
;
; R10 - Address of ifab.
;
; Outputs:
;
; none
;
;--
RM$RELEASE_GBL_BUFFERS::
	MOVQ	R3,-(SP)		; Save registers.
	MOVL	IFB$L_GBH_PTR(R10),R4	; Get address of global section in R4.
	MOVL	IFB$L_GBSB_PTR(R10),R3	; Get gbsb address in R3.
	BBS	#GBSB$M_NOTACCESSED,-	; If set then access count is already decremented.
		GBSB$B_FLAGS(R3), 5$	;  go check access count (we are in last chance.)
	DECL	GBH$L_USECNT(R4)	; Decrement accessor count.
	BISB2	#GBSB$M_NOTACCESSED,-	; Set bit in GBSB saying accessor count
		GBSB$B_FLAGS(R3)	;  has been decremented (for last chance)
5$:	TSTL	GBH$L_USECNT(R4)	; Test accessor count.
	BNEQ	DONE			; Exit if not last accessor.

	MOVL	R4,R3			; Move address of section into R3.
10$:	ADDL2	(R3),R3			; Get address to next GBD element.
	CMPL	R3,R4			; Are we back at queue header?
	BEQL	RLS_FILE_LOCK		; Yes, go release system file lock.
	TSTL	GBD$L_LOCK_ID(R3)	; Is this buffer cached?
	BEQL	10$			; No, go to next GBD.
	ADAWI	#1,@#RMS$GW_GBLBUFQUO	; Give the buffer back to the quota ctr
	$DEQ_S	LKID = GBD$L_LOCK_ID(R3); DEQ the system lock on buffer.
	CLRL	GBD$L_LOCK_ID(R3)	; Mark this GBD as gone.
	BRB	10$			; Go to next GBD.

RLS_FILE_LOCK:
	$DEQ_S	LKID = GBH$L_LOCK_ID(R4); $DEQ system file lock.

	MOVL	IFB$L_GBSB_PTR(R10),R4	; Get address of GBSB.
	CLRL	GBSB$L_GS_SIZE(R4)	; Zero all fields in lock value
	CLRW	GBSB$W_GBC(R4)		; block.

DONE:	MOVQ	(SP)+,R3		; Restore registers.
	RSB


;++
;
; RM$UNMAP_GBL
;
; This routine deletes the specified address range for the purpose of 
; un-mapping from a global section that has been used for i/o buffers.
;
; Note: This routine assume an EX lock is already held on the global section.
;
; Inputs:
;
; R0 - start address of range. (alt. entry pt.)
; R1 - end address of range. (alt. entry pt.)
; R10 - ifab address
;
; Outputs:
;
; Destroys R0 - R2.
;
;--
RM$UNMAP_GBL::
	MOVL	IFB$L_GBH_PTR(R10),R0	; Put address of global section in R0.
	ADDL3	GBH$L_GS_SIZE(R0),R0,R1 ; End addr of sec + 1
	DECL	R1			; End addr of section.

RM$UNMAP_GBL_ALT::
	MOVQ	R0, -(SP)		; Save range on stack.
	MOVL	SP, R2			; Remember that address.
	$DELTVA_S INADR=(R2)		; Delete the VA.
	MOVQ	(SP)+, R0		; Return address array.
	RSB				; And return.

	.END
