$!	'F$VERIFY(0)
$	SAY = "WRITE SYS$OUTPUT"
$	SAY ""
$	SAY "Continuing with VAX/VMS V4.0 Upgrade Procedure."
$	SAY ""
$	SAY "		Upgrade Phase 5		''F$TIME()'"
$	SAY ""
$	@SYS$SYSTEM:STARTUP UPGRADE
$	RUN SYS$SYSTEM:SYSGEN
AUTOCONFIGURE ALL /SELECT=(PA)
$ !
$ ! Install only the protected shareable images that will be used.
$ !
$ RUN SYS$SYSTEM:INSTALL
SYS$SHARE:DISMNTSHR	/OPEN /SHARED /PROTECT /HEADER /NOPURGE
SYS$SHARE:MOUNTSHR	/OPEN /SHARED /PROTECT /HEADER
SYS$SHARE:SECURESHR	/OPEN /SHARED /PROTECT /HEADER
$	VERSION = "040"
$	DEFDIR = "SYSUPD.VMS''VERSION'"
$	SET CONTROL=T
$	SET ON
$	SET MESSAGE /FACILITY/SEVERITY/TEXT/IDENTIFICATION
$	ON ERROR THEN GOTO 7000
$	ON CONTROL_Y THEN GOTO 7000
$	T1 = F$SETPRV("CMKRNL,SYSPRV,LOG_IO,VOLPRO,BYPASS")
$	SET PROTECTION=(S:RWED,G:RWED,O:RWED,W:RE)/DEFAULT
$	SET DEFAULT SYS$SYSTEM
$	OPEN /READ DATAF UPGRADE.KIT
$	READ DATAF NEW_ROOT		!Kit device
$	READ DATAF OLD_ROOT_DOT		!Old topsys
$	READ DATAF NEW_ROOT		!Temp topsys
$	READ DATAF UPGSTART		!time...ignore
$	READ DATAF UPGSTART		!either V3UPGRADE or V4UPGRADE
$	READ DATAF L
$	READ DATAF SYSVER
$	READ DATAF LIB_DISK
$	CLOSE DATAF
$	T1 = F$LENGTH(L)
$	KIT_RL02 = F$LOC("A",L) .NE. T1
$	KIT_RC25 = F$LOC("B",L) .NE. T1
$	KIT_DOTLR = F$LOC("C",L) .NE. T1
$	KIT_ISTLR = F$LOC("D",L) .NE. T1
$	KIT_DOCROOT = F$LOC("E",L) .NE. T1
$	KIT_CROOT = F$LOC("F",L) .NE. T1
$	T2 = F$LOC("G=",L)
$	IF T2 .NE. T1 THEN NET$AREA_NUM == F$INTEGER(F$EXTRACT(T2+2,2,L))
$	OLD_ROOT = OLD_ROOT_DOT - "."
$	IF OLD_ROOT .NES. F$TRNLNM("SYS$TOPSYS") THEN GOTO 7500
$	TARGET = F$TRNLNM("SYS$SYSDEVICE")
$	TARGET_TOPSYS_DOT = NEW_ROOT + "."
$ !
$ ! Determine type of cpu
$ !
$	CPUTYPE = F$GETSYI("CPU")
$	IF (CPUTYPE .GT. 0) .AND. (CPUTYPE .LE. 3) THEN GOTO GOT_CPUTYPE
$	SAY "Upgrade procedure not supported for cpu type "'cputype'"."
$	GOTO 7000
$GOT_CPUTYPE:
$	SET DEFAULT SYS$SYSTEM
$	ON ERROR THEN GOTO 7000
$	SET NOON
$	SET UIC [1,4]
$	SAY ""
$ !	@'TARGET'['TARGET_TOPSYS_DOT''DEFDIR']DIRCLENUP 'TARGET' 1
$	STOP JOB_CONTROL
$	STOP OPCOM
$	STOP ERRFMT
$CONTINUE:
$	SET NOON
$	IF .NOT. KIT_DOTLR THEN GOTO NOT_TAILORED
$	IF F$GETDVI(LIB_DISK,"EXISTS") THEN GOTO MOUNT_LIB_DISK
$	T1 = LIB_DISK - "_"
$	OPEN/WRITE DATAF SYS$SYSTEM:GENDEVICE.COM
$	WRITE DATAF "$ RUN SYS$SYSTEM:SYSGEN"
$	WRITE DATAF "AUTOCONFIGURE ALL /SELECT=(''F$EXTRACT(0,3,T1)')"
$	CLOSE DATAF
$	@SYS$SYSTEM:GENDEVICE
$	DELETE SYS$SYSTEM:GENDEVICE.COM;*
$MOUNT_LIB_DISK:
$	@SYS$UPDATE:VMSTAILOR MOUNT 'LIB_DISK'
$NOT_TAILORED:
$	SAY ""
$	SAY "Removing ''NEW_ROOT' synonym directory entries."
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']SYSEXE.DIR;1,SYSLIB;1,SYSTEST;1
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']SYSMAINT.DIR;1,SYSMGR;1,SYSHLP;1
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']SYSUPD.DIR;1,SYSMSG;1,SYSERR;1
$	SET FILE /REMOVE 'TARGET'['NEW_ROOT']SYSCBI.DIR;1
$	CLROOT = OLD_ROOT
$	IF KIT_DOCROOT THEN CLROOT = "V4COMMON"
$	IF F$SEARCH("SYS$SYSDEVICE:[0,0]SYSEXEMIN.DIR") .NES. "" THEN -
		SET FILE /REMOVE SYS$SYSDEVICE:[0,0]SYSEXEMIN.DIR;
$	IF F$SEARCH("SYS$SYSDEVICE:[0,0]SYSEXE.DIR") .EQS. "" THEN -
		CREATE /DIR /OWN=[1,4] /PROT=(S:R,O:R,G,W) -
			SYS$SYSDEVICE:[SYSEXE]
$	IF F$SEARCH("SYS$SYSDEVICE:[SYSEXE]SYSBOOT.EXE") .EQS. "" THEN -
		SET FILE/ENTER=SYS$SYSDEVICE:[SYSEXE] -
			SYS$SYSDEVICE:['CLROOT'.SYSEXE]SYSBOOT.EXE
$	SET FILE /ENTER=SYS$SYSDEVICE:[0,0]SYSMAINT.DIR;1 -
		SYS$SYSDEVICE:['CLROOT']SYSMAINT.DIR;1
$	SAY "Cleaning up files used only during the upgrade."
$	DELETE 'TARGET'[0,0]'NEW_ROOT'.DIR;1
$	DELETE SYS$SYSROOT:['DEFDIR']*.*;*
$	DELETE SYS$SYSROOT:[SYSUPD]VMS'VERSION'.DIR;1
$	IF F$SEARCH("SYS$SYSROOT:[SYSUPD]VMIMARKER.OLD") .NES. "" -
		THEN DELETE SYS$SYSROOT:[SYSUPD]VMIMARKER.OLD;*
$	IF F$SEARCH("SYS$SYSROOT:[SYSUPD]VMIDEFER.COM") .NES. "" -
		THEN DELETE SYS$SYSROOT:[SYSUPD]VMIDEFER.COM;*
$	DELETE SYS$SYSROOT:[SYSEXE]STARTUP.UP2;*,.UP3;*,.UP4;*,.INS;*
$	IF .NOT. KIT_DOCROOT THEN GOTO CREATE_RIGHTS
$	IF F$SEARCH("SYS$COMMON:[SYSEXE]PAGEFILE.SYS") .NES. "" THEN -
			SET FILE/REMOVE SYS$COMMON:[SYSEXE]PAGEFILE.SYS;
$	IF F$SEARCH("SYS$COMMON:[SYSEXE]SWAPFILE.SYS") .NES. "" THEN -
			SET FILE/REMOVE SYS$COMMON:[SYSEXE]SWAPFILE.SYS;
$	IF F$SEARCH("SYS$COMMON:[SYSEXE]SYSDUMP.DMP") .NES. "" THEN -
			SET FILE/REMOVE SYS$COMMON:[SYSEXE]SYSDUMP.DMP;
$	IF F$SEARCH("SYS$COMMON:[SYSERR]ERRLOG.SYS") .NES. "" THEN -
			DELETE SYS$COMMON:[SYSERR]ERRLOG.SYS;*
$	IF F$SEARCH("SYS$COMMON:[SYSMGR]ACCOUNTNG.DAT") .NES. "" THEN -
			DELETE SYS$COMMON:[SYSMGR]ACCOUNTNG.DAT;*
$	IF F$SEARCH("SYS$COMMON:[SYSMGR]OPERATOR.LOG") .NES. "" THEN -
			DELETE SYS$COMMON:[SYSMGR]OPERATOR.LOG;*
$	IF F$SEARCH("SYS$COMMON:[SYSEXE]OLDSITE%.DAT") .NES. "" THEN -
		PURGE SYS$COMMON:[SYSEXE]OLDSITE%.DAT
$	IF F$SEARCH("SYS$COMMON:[SYSEXE]OLDSITE%.DAT") .NES. "" THEN -
		RENAME SYS$COMMON:[SYSEXE]OLDSITE%.DAT SYS$SPECIFIC:[SYSEXE]*.*
$	PURGE SYS$SPECIFIC:[SYSEXE]VAXVMSSYS.PAR
$ ! Set VAXVMSSYS in SYS$COMMON to default parameters
$	RUN SYS$SYSTEM:SYSGEN
USE DEFAULT
WRITE SYS$COMMON:[SYSEXE]VAXVMSSYS.PAR
$CREATE_RIGHTS:
$	SET PROT=(S=RWE,O=RWE,G=RWE,W) SYS$SYSTEM:SYSUAF.DAT;*
$	IF F$SEARCH(F$PARSE("RIGHTSLIST","SYS$SYSTEM:.DAT")) .NES. "" -
		THEN GOTO UPDATE_NETDB
$	SAY ""
$	SAY "Creating RIGHTS database file, SYS$SYSTEM:RIGHTSLIST.DAT"
$	SAY "Ignore any ""%SYSTEM-F-DUPIDENT, duplicate identifier"" errors."
$	IF KIT_DOCROOT THEN -
		DEFINE /SYSTEM/EXEC RIGHTSLIST SYS$COMMON:[SYSEXE]RIGHTSLIST
$	RUN SYS$SYSTEM:AUTHORIZE
CREATE/RIGHTS
ADD/ID/USER=*
$
$UPDATE_NETDB:
$	IF F$SEARCH("SYS$SYSTEM:NETNODE.DAT") .EQS. "" THEN GOTO NO_NET
$	SAY ""
$	SAY "Updating SYS$SYSTEM:NETNODE.DAT to new ISAM format. This will take"
$	SAY "between 1-20 minutes, depending on the size of your node database."
$	SAY " NOTE: This will not turn on the network, nor does it require"
$	SAY " that the license be installed."
$	NCP = "$NCP"
$	NCP LIST EXEC
$	IF F$SEARCH("SYS$SYSTEM:NETNODE.DAT;-1") .NES. "" THEN -
		RENAME SYS$SYSTEM:NETNODE.DAT;-1 SYS$SYSTEM:NETNODE_OLD.DAT
$	IF F$SEARCH("SYS$SYSTEM:TEMP_NETNODE.DAT") .NES. "" THEN -
		DELETE SYS$SYSTEM:TEMP_NETNODE.DAT;*
$NO_NET:
$ !
$ ! Set up SYSTEST_CLIG account
$ !
$ADD_SYSTEST:
$	SET DEFAULT SYS$SYSTEM
$	SET NOON
$	SAY ""
$	SAY "Adding account for SYSTEST_CLIG."
$	SAY ""
$	SAY "If you have removed the SYSTEST account you will receive a"
$	SAY """%UAF-W-BADUSR, username does not exist /SYSTEST/"" message"
$	SAY "which may be ignored.  However, it may impact your ability to"
$	SAY "run the UETP tests."
$	RUN SYS$SYSTEM:AUTHORIZE
COPY SYSTEST SYSTEST_CLIG/PASSWORD=""/PWDMIN=0
MODIFY SYSTEST_CLIG/PASSWORD=""/LGICMD=UETCLIG00/NOBATCH/FLAG=(DISCTLY,LOCKPWD,DEFCLI,CAPTIVE,DISUSER)
$
$	IF .NOT. KIT_DOTLR THEN GOTO DEL_SWAPFILE
$	@SYS$UPDATE:VMSTAILOR DISMOUNT 'LIB_DISK'
$	DELETE SYS$SYSTEM:AUTHORIZE.EXE;,SEARCH;,EXCHANGE; !Hand copied during 2
$DEL_SWAPFILE:
$	SET NOON
$	TYPE SYS$INPUT:

After the upgrade finishes, there are several files that you must manually edit
due to changes in the system, and other files that you may delete.  See the
Guide to VAX/VMS System Management and Daily Operations for complete
information. 

Among the things you should do:

- DECOMPRESS THE SYSTEM LIBRARIES - For space considerations, many of the system
libraries are shipped in a data compressed format.  If you have enough disk
space, you may decompress them for faster access. Use SYS$UPDATE:LIBDECOMP.COM
to data expand the libraries.  If you choose not to decompress these libraries
there will be a negative impact on the performance of the HELP and LINK
commands.

- Edit SYS$MANAGER:SYSTARTUP.COM - Your SYSTARTUP.COM will not be executed when
the system reboots.  It is still present in SYS$MANAGER, as the next lowest
version. 

- Edit SYS$MANAGER:SYSHUTDWN.COM - Your SYSHUTDWN.COM will not be executed when
the system shuts down. It is still present in SYS$MANAGER, as the next lowest
version. 

- The V3 versions of the following files have been left on your system
disk as lower versions of the V4 files:

	[SYSLIB]CDDSHR.EXE
	[SYSLIB]VMSRTL.EXE
	[SYSLIB]LBRSHR.EXE
	[SYSHLP]HELPLIB.HLB
	[SYSEXE]NETUAF.DAT
	[SYSMGR]RTTLOAD.COM
	[SYSMGR]SYSTARTUP.COM
	[SYSMGR]SYCONFIG.COM
	[SYSMGR]SYSHUTDWN.COM
	[SYSMGR]STARTNET.COM
	[SYSEXE]STARTUP.COM
	[SYSEXE]SHUTDOWN.COM
	[SYSEXE]SYSUAF.DAT

	You may wish to PURGE some or all of the above files.

- Delete SYS$SYSTEM:STARTUP.UP5 and UPGRADE.KIT - These files are left
by the upgrade should this phase fail for some reason.  You may delete
them when the upgrade has completed.

$	IF KIT_DOTLR THEN GOTO TELL_TLR
$	IF F$GETSYI("CPU") .EQ. 3 THEN GOTO MSGS_DONE	! 730's do not cluster
$	IF .NOT. F$GETDVI("PA","EXISTS") THEN GOTO MSGS_DONE	! No CI
$	TYPE SYS$INPUT

If this system is to be part of a VAXcluster, you will need to invoke
AUTOGEN with this command:

	@SYS$UPDATE:AUTOGEN SAVPARAMS REBOOT

$	GOTO MSGS_DONE
$TELL_TLR:	
$	TYPE SYS$INPUT
Your tailored system will require additional work.   The following
V3 files are in the system disk directory tree, while their corresponding
V4 equivalents are on the library disk:

SYS$SPECIFIC:[SYSMGR]RTTLOAD.COM
SYS$SPECIFIC:[SYSMGR]STARTNET.COM
SYS$SPECIFIC:[SYSHLP]HELPLIB.HLB

Once you have retrieved the necessary information from these files, you
should delete them.

	NOTE:	You must delete these three files before you attempt
		to install any optional software products.

Then, you must determine which files from the library disk you will need
on your system disk permanently, and tailor them using SYS$UPDATE:VMSTAILOR.COM.

Refer to the VAX/VMS Guide to System Management and Daily Operations for
complete information on tailoring. 

$MSGS_DONE:
$	IF F$SEARCH("SYS$SYSTEM:SWAPFILE.SYS") .NES. "" THEN -
		DELETE SYS$SYSTEM:SWAPFILE.SYS;*	!We booted w/swpfilcnt=0
$	T1 = "/WRITE"
$	IF F$SEARCH("SYS$SYSTEM:MODPARAMS.DAT") .NES. "" THEN T1 = "/APPEND"
$	OPEN 'T1' F1 SYS$SYSTEM:MODPARAMS.DAT
$	IF KIT_DOTLR THEN -
	WRITE F1 "TAILORED=1			!Generate tailored system"
$	WRITE F1 "SCSSYSTEMID=''F$GETSYI("SCSSYSTEMID")'"
$	IF .NOT. F$GETDVI("PA","EXISTS") THEN -
	WRITE F1 "VAXCLUSTER=0			!No non CI-based VAXclusters"
$	CLOSE F1
$	RUN SYS$SYSTEM:SYSGEN
AUTOCONFIGURE ALL
$	SAY ""
$	SAY "Now computing new SYSGEN parameters.  An attempt may"
$	SAY "be made to re-size the pagefile or swapfile.  If there is"
$	SAY "insufficient room on the disk, the recommended size is displayed"
$	SAY "with a message that the file should be created or extended"
$	SAY "manually by the system manager later on."
$	SAY ""
$	@SYS$UPDATE:AUTOGEN GETDATA REBOOT 'UPGSTART'
$	!
$	! On error, exit from the upgrade procedure here.
$	!
$7000:
$	ON ERROR THEN CONTINUE
$	SAY ""
$	SAY "Upgrade to VAX/VMS Version 4.0 incomplete."
$	SAY ""
$	SAY "Error exit from upgrade procedure."
$	SAY "Restart upgrade from last boot of system."
$	SAY ""
$	EXIT
$7500:
$	SAY ""
$	SAY "This system is not booted from the correct root directory."
$	SAY "It must be booted from ''OLD_ROOT', but is booted from ",F$TRNLNM("SYS$TOPSYS")
$	GOTO 7000
