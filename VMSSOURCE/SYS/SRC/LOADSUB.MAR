	.TITLE	LOADSUB - System Code Loading Subroutines
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility:	System Code Loader
;
; Abstract:	These routines performs operations to load code into
;		system address space.
;
; Environment:	Kernel Mode.
;
; Author:	Jeffrey W. Horn, 		Creation Date: 1-MAR-1983
;
; Modified by:
;
;	V03-007	WMC0007		Wayne Cardoza	12-Jan-1983
;		SYSWRTABL should make sections CRF.
;
;	V03-006	WMC0006		Wayne Cardoza	05-Jan-1984
;		Make sure SPTs released on error.
;
;	V03-005	WMC0005		Wayne Cardoza	09-Dec-1983
;		Enable all ISD checking.
;
;	V03-004	WMC0004		Wayne Cardoza	07-Sep-1983
;		Make sure we never use SYSGEN private copy of cells.
;
;	V03-003	WMC0003		Wayne Cardoza	29-Jul-1983
;		More of the same.
;
;	V03-002	WMC0002		Wayne Cardoza	24-Jun-1983
;		Fix assorted bugs after testing.
;
;	V03-001	WMC0001		Wayne Cardoza	24-May-1983
;		Complete it.
;
;--

	.SBTTL	DECLARATIONS

;
; Include files:
;

;
; Macros:
;

	$CCBDEF
	$DPTDEF
	$DYNDEF
	$IHDDEF
	$IODEF
	$IPLDEF
	$ISDDEF
	$PHDDEF
	$PFNDEF
	$PRTDEF
	$PTEDEF
	$SECDEF
	$SLVDEF
	$SSDEF	
	$VADEF
	$WCBDEF

;
; Equated Symbols:
;

;
; Own Storage
;

;	This table is used to map the page protection codes into
;	codes which allow at least Kernel Mode writeablity

KW_TBL:	.BYTE	PRT$C_NA		; NA => NA
	.BYTE	PRT$C_RESERVED		; RESERVED => RESERVED
	.BYTE	PRT$C_KW		; KW => KW
	.BYTE	PRT$C_KW		; KR => KW
	.BYTE	PRT$C_UW		; UW => UW
	.BYTE	PRT$C_EW		; EW => EW
	.BYTE	PRT$C_ERKW		; ERKW => ERKW
	.BYTE	PRT$C_ERKW		; ER => ERKW
	.BYTE	PRT$C_SW		; SW => SW
	.BYTE	PRT$C_SREW		; SREW => SREW
	.BYTE	PRT$C_SRKW		; SRKW => SRKW
	.BYTE	PRT$C_SRKW		; SR => SRKW
	.BYTE	PRT$C_URSW		; URSW => URSW
	.BYTE	PRT$C_UREW		; UREW => UREW
	.BYTE	PRT$C_URKW		; URKW => URKW
	.BYTE	PRT$C_URKW		; UR => URKW

STORAGE:
	.BLKB	^X408

	.SBTTL	EXE$LOAD_CODE - Perform Actual Code Load

;++
; EXE$LOAD_CODE - Perform Actual Code Load
;
;	This subroutine makes code resident in system space, either
;	as a new system section for pageable code, or read into
;	created system virtural address space for nonpageable code.
;
; Calling Sequence:
;
;	CALLS	#2,EXE$LOAD_CODE
;
; Input Parameters: (AP offset)
;
	CHAN	=	4			; channel file is accessed on
;
; Implicit Inputs:
;	Contents of the image file including Image Header and Prologue in 
;	first block of image.
;
; Output Parameters: (AP offset)
;
;	R0	=	Completion Status
	RETADR	=	8			; address to return starting VA
;
; Implicit Ouputs:
;	None.
;
; Side Effects:
;
;--

	.ENTRY	EXE$LOAD_CODE,^M<R2,R3,R4,R5,R6,R7>
	.ENABL	LSB
;	MOVAB	-<<2*^X200>+8>(SP),SP		; allocate scratch space
;	MOVL	SP,R3				; save scratch space address
	MOVAB	STORAGE,R3
;
;	Read in image header into buffer
;

	MOVAL	^X400(R3),R6			; save addr of IOSB

	$QIOW_S	EFN   = #1,-
		CHAN  = CHAN(AP),-
		FUNC  = #IO$_READVBLK,-
		IOSB  = (R6),-
		P1    = (R3),-
		P2    = #512,-
		P3    = #1
	BLBS	R0,20$			; get out on error
10$:	RET
20$:	MOVZWL	(R6),R0			; get IOSB status
	BLBC	R0,10$			; get out on error

;
;	Now read in first page of image
;

	MOVAL	^X200(R3),R4		; get addr of image buffer
	MOVZBL	IHD$B_HDRBLKCNT(R3),R1	; get number blocks in header
	INCL	R1			; one past is first block of image (P3)
	$QIOW_S	EFN   = #1,-
		CHAN  = CHAN(AP),-
		FUNC  = #IO$_READVBLK,-
		IOSB  = (R6),-
		P1    = (R4),-
		P2    = #512,-
		P3    = R1
	BLBC	R0,10$			; get out on error
	MOVZWL	(R6),R0			; get IOSB status
	BLBC	R0,10$			; get out on error

	MOVZWL	(R3),R0			; offset to ISD's
	ADDL3	R0,R3,R2

;
;	Allocate enough SPTEs for image
;

	MOVZWL	SLV$W_SIZE(R4),R6	; code size
	ADDL	#511,R6			; get a page count
	ASHL	#-9,R6,R6
	DSBINT	25$			; go to SYNCH and lock down code
	MOVAB	MMG$A_SYSPARAM,R5	; make sure we don't use SYSGEN private copy
	MOVL	BOO$GL_SPTFREL-EXE$A_SYSPARAM(R5),R7 ; first free SPT
	ADDL3	R7,R6,R0		; new free pointer
	CMPL	R0,BOO$GL_SPTFREH-EXE$A_SYSPARAM(R5)	; enought left?
	BGTR	NOSPT			; branch if not
	MOVL	R0,BOO$GL_SPTFREL-EXE$A_SYSPARAM(R5) ; record the allocation
	ENBINT
	BRB	26$

NOSPT:	ENBINT
	MOVZWL	#SS$_VASFULL,R0
	RET

25$:	.LONG	IPL$_SYNCH

ERRTYP:	MOVL	#SS$_BADPARAM,R0
	RET
26$:
	SUBW	ISD$W_PAGCNT(R2),R6	; SPT left after first ISD
	BGEQ	27$			; done here so driver load works
	BRW	BADHDR			; image header doesn't match SLV
27$:	ASHL 	#9,R7,@RETADR(AP)	; return address of loaded code
	BBSS	#VA$V_SYSTEM,@RETADR(AP),28$
28$:
;
;	Set up initial parameters for load routines
;
	PUSHL	R7			;	first SPT
	MOVZBL	#PRT$C_URKW,-(SP)	; 	driver protection
	MOVZWL	ISD$W_PAGCNT(R2),-(SP)	;	page count
	MOVZBL	IHD$B_HDRBLKCNT(R3),-(SP) ; 	start VBN = one past image header
	INCL	(SP)			;
	PUSHL	CHAN(AP)		;	channel		
	PUSHL	#5			;	argument count

;
;	Drivers get special treatment - single ISD
;
	
	CMPB	SLV$B_TYPE(R4),#DYN$C_DPT ; see if driver
	BNEQ	35$			; branch if not
	CALLG	(SP),EXE$LOAD_NONPAGD	; go load non paged code
	BLBS	R0,30$
	BRW	NONPAG_ERR
30$:	RET
	
35$:	CMPB	SLV$B_TYPE(R4),#DYN$C_LOADCODE ; see if loadable code
	BNEQ	ERRTYP			; error if not
40$:	BITL	#ISD$M_DZRO ! ISD$M_VECTOR -
		! ISD$M_GBL ! ISD$M_FIXUPVEC -
		! ISD$M_PROTECT ,ISD$L_FLAGS(R2)
	BNEQ	BADHDR			; illegal ISD types
;
;	Set up argument list for loader for next ISD
;
	MOVL	ISD$L_VBN(R2),STRTVBN(SP) ; starting image VBN
	MOVZWL	ISD$W_PAGCNT(R2),PAGECNT(SP) ; ISD pagecount
	BBS	#ISD$V_WRT,ISD$L_FLAGS(R2),50$ ; is it writeable
	MOVZBL	SLV$B_PROT_R(R4),B^PROT(SP) ; get read-only page protection
	BRB	60$
50$:	MOVZBL	SLV$B_PROT_W(R4),B^PROT(SP) ; get writeable page protection
;
;	Pick the correct loader routine
;
60$:	BBC	S^#EXE$V_SYSPAGING,@#EXE$GL_FLAGS, 70$ ; branch if not paging
	CMPB	SLV$B_SUBTYP(R4),#DYN$C_PAGED ; see if pageable	
	BEQL	80$			; branch if so	
	
70$:	CALLG	(SP),EXE$LOAD_NONPAGD	; go load non paged code
	BLBC	R0,NONPAG_ERR
	BRB	90$

80$:	CALLG	(SP),EXE$LOAD_PAGED	; go map paged code
	BLBC	R0,110$			; must be no STX, don't try to clean up mess
;
;	Next ISD
;
90$:	MOVZWL	ISD$W_SIZE(R2),R3
	ADDL	R3,R2			; next ISD
	TSTW	ISD$W_SIZE(R2)		; are we done
	BEQL	100$
	BLSS	BADHDR			; error - there can't be this many ISD's
	SUBW	ISD$W_PAGCNT(R2),R6
	BLSS	BADHDR			; too many pages in the image
	ADDL	PAGECNT(SP),SPT(SP)	; next SPT
	BRB	40$			; process next ISD

100$:	MOVZWL	#SS$_NORMAL,R0
110$:	RET	

	.DSABL	LSB

BADHDR:	MOVL	#SS$_BADIMGHDR,R0

NONPAG_ERR:
	BBC	S^#EXE$V_SYSPAGING,@#EXE$GL_FLAGS, 5$ ; branch if not paging
	CMPB	SLV$B_SUBTYP(R4),#DYN$C_PAGED ; see if pageable	
	BNEQ	5$			; branch if so	
	RET				; don't try to clean up if paged
5$:	PUSHL	R0			; save error status
	MOVZWL	SLV$W_SIZE(R4),R6	; code size
	ADDL	#511,R6			; get a page count
	ASHL	#-9,R6,R6
	ADDL3	R6,R7,R9		; save next SPT after ours
	DSBINT	50$			; go to SYNCH and lock down code
	MOVAL	@MMG$GL_SPTBASE[R7],R8	; SVAPTE of first SPT
10$:	EXTZV	#PTE$V_PFN,#PTE$S_PFN,(R8),R0 ; get the PFN
	BEQL	20$			; done
	CLRL	@PFN$AL_PTE[R0]		; clear back pointer
	DECW	@PFN$AW_REFCNT[R0]	; decrement the ref count
	BNEQ	30$			; some one knows about it - give up
	JSB	MMG$DALLOCPFN		; free PFN
	CLRL	(R8)+			; invalidate PTE
	INCL	PFN$GL_PHYPGCNT		; count the freed page
	SOBGTR	R6,10$
20$:	MOVAB	MMG$A_SYSPARAM,R0	; make sure we don't use SYSGEN private copy
	CMPL	R9,BOO$GL_SPTFREL-EXE$A_SYSPARAM(R0) ; can we give back the SPTs
	BNEQ	30$			; no - more have been allocated
	MOVL	R7,BOO$GL_SPTFREL-EXE$A_SYSPARAM(R0) ; reset free SPT pointer
30$:	ENBINT
	MOVL	(SP)+,R0
	RET
50$:	.LONG	IPL$_SYNCH	

	.SBTTL	EXE$LOAD_NONPAGD - Load code into non paged memory

;++
; LOAD_NON_PAGED - Load code into non paged memory
;
;	This routine loads code into non paged memory using the following
;	algorithm:
;
;			1.	For each SPT:
;				a.	Allocate a physical page
;				b.	Fill in PFN data-base
;				c.	Fill in SPT.
;			2.	Read in code into new address space
;			3.	Set page protection on new address space.
;
;	Page protection is the PROT(AP) value unless page is first page in
;	image or the WRITEABLESYS parameter is set, then the protection is
;	translated into one which allows at least kernel mode write.
;
; Calling Sequence:
;
;		CALLS	#5,EXE$LOAD_NONPAGD
;
; Input Parameters:  (AP offsets)
;	
		CHAN	=	4		; Channel file is access on
		STRTVBN	=	8		; image start VBN
		PAGECNT =	12		; number of pages to be loaded
		PROT	=	16		; protection to be applied	
		SPT	= 	20		; first SPT index
;
; Implicit Inputs:
;
; Output Parameters:
;
; Implicit Outputs:
;
; Completion Codes:
;
; Side Effects:
;
;--

	.ENTRY	EXE$LOAD_NONPAGD,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>

	ASHL	#9,SPT(AP),R4		; compute VA of assigned SPT
	BBSS	#VA$V_SYSTEM,R4,10$	; set system bit
;
;	Now fill in those PTEs
;

;	Set up loop

10$:	MOVL	SPT(AP),R7		; get initial SPT index
	MOVAL	@MMG$GL_SPTBASE[R7],R8	; get SVAPTE of first PTE
	SUBL3	#1,PAGECNT(AP),R9	; get ending index

;
;	For Each PTE:
;
;	Allocate a PFN

	DSBINT	40$			; go to SYNCH and lock down code
20$:
	JSB	@#MMG$ALLOCPFN		; attempt to allocate a PFN
	TSTL	R0			; check status
	BLSS	30$			; branch if no page allocated

;	Fill in PFN data base

	INCW	@PFN$AW_REFCNT[R0]	; set reference count
	MOVAL	(R8)[R9],@PFN$AL_PTE[R0]; set SVAPTE in PTE back pointer
	MOVB	#PFN$C_ACTIVE,@PFN$AB_STATE[R0] ; set state as active
	MOVB	#1,@PFN$AB_TYPE[R0]	; set type as system page
	DECL	@#PFN$GL_PHYPGCNT	; one less physical page
	BISL3	#<PTE$M_VALID!PTE$C_KW>, -
		R0,(R8)[R9]		; set  valid prot, PFN into PTE

;	Look at next PTE

	SOBGEQ	R9,20$
	INVALID
	ENBINT				; finished with memory man.
	BRB	READCOD

30$:	MOVZWL	#SS$_INSFMEM,R0
	INVALID
	ENBINT
	RET

40$:	.LONG	IPL$_SYNCH

;
;	Now read in actual code
;

READCOD:

	CLRQ	-(SP)			; allocate IOSB
	MOVL	SP,R2			; get IOSB address
	ASHL	#9,PAGECNT(AP),R0	; byte count (P2)
	$QIOW_S	EFN   = #1,-
		CHAN  = CHAN(AP),-
		FUNC  = #IO$_READVBLK,-
		IOSB  = (R2),-
		P1    = (R4),-
		P2    = R0,-
		P3    = STRTVBN(AP)
	BLBS	R0,6$
5$:	RET				; get out on error
6$:	MOVZWL	(R2),R0			; get iosb status
	BLBC	R0,5$

	ADDL	#8,SP			; deallocate IOSB
;
;	Now set the page protection on these pages
;

	DSBINT	20$			; get to SYNCH and lock down code
	SUBL3	#1,PAGECNT(AP),R9	; get index of last PTE
	MOVL	PROT(AP),R3		; get protection code
	BBC	S^#EXE$V_SYSWRTABL, -
		@#EXE$GL_FLAGS,10$	; branch if no WRITEABLESYS
	MOVZBL	KW_TBL[R3],R3		; change prot to at least kern write
10$:	MOVAL	(R8)[R9],R0		; get SVAPTE of page
	INSV	R3,#PTE$V_PROT, -
		#PTE$S_PROT,(R0)	; set page protection
	SOBGEQ	R9,10$

	INVALID
	ENBINT

	MOVL	#SS$_NORMAL,R0
	RET
20$:	.LONG	IPL$_SYNCH


	.SBTTL	EXE$LOAD_PAGED - Load code into paged memory

;++
; EXE$LOAD_PAGED - Load code into paged memory
;
;	This routine does not actually load the code into System Paged Memory
;	but instead sets up a System Section which can then be paged in.
;
;	Page protection is the PROT(AP) value unless page is first page in
;	image or the WRITEABLESYS parameter is set, then the protection is
;	translated into one which allows at least kernel mode write.
;
; Calling Sequence:
;
;	CALLS	#5,EXE$LOAD_PAGED
;
; Input Parameters: (AP offsets)
;
;		CHAN	=	4		; channel file is accessed on
						;  or WCB address
;		STRTVBN	=	8		; image start VBN
;		PAGECNT	=	12		; number of pages to be loaded
;		PROT	=	16		; protection to be applied
;		SPT	=	20		; index of first SPT
;
; Implicit Inputs:
;
; Output Parameters:
;
; Implicit Outputs:
;
; Completion Codes:
;
; Side Effects:
;
;--

ERRCHN:	MOVZWL	#SS$_IVCHNLSEC,R0
	RET

	.ENTRY	EXE$LOAD_PAGED,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
	MOVL	CHAN(AP),R0		; get channel number
	MOVL	R0,R4
	BLSS	20$
	JSB	@#IOC$VERIFYCHAN	; get CCB address
	BLBC	R0,ERRCHN
	MOVL	CCB$L_WIND(R1),R4	; get WCB adddress
10$:	BBSS	#WCB$V_SHRWCB,WCB$B_ACCESS(R4),20$ ; set share bit of WCB
					;		branch if already set

	ASSUME	WCB$W_REFCNT EQ WCB$L_PID+2

	ROTL	#16,#1,WCB$L_PID(R4)	; make PID invalid, refcount = 1

20$:	DSBINT	#IPL$_ASTDEL		; don't let process be deleted
	MOVL	@#MMG$GL_SYSPHD,R5	; get address of system heade
	JSB	@#MMG$ALCSTX		; allocate a system section
	BLBC	R0,60$			; get out on error
	ADDL3	PHD$L_PSTBASOFF(R5),R5,R8 ; base address of section table
	MOVAL	(R8)[R1],R8		; address of section table entry
	CLRL	SEC$L_CCB(R8)		; no channel control block address
	MOVL	R4,SEC$L_WINDOW(R8)	; set window control block address
	MOVL	STRTVBN(AP),SEC$L_VBN(R8) ; start VBN of section
	MOVL	SPT(AP),R7
	MOVL	R7,SEC$L_VPXPFC(R8)	; starting SPT index
	CLRW	SEC$W_FLAGS(R8)		; zero section flags
	MOVL	PAGECNT(AP),SEC$L_PAGCNT(R8) ; size of section in pages
	MOVL	PAGECNT(AP),SEC$L_REFCNT(R8) ; number of outstanding references
	CLRL	SEC$W_SECXFL(R8)	; no section indices

	MOVL	PROT(AP),R3		; get protection code
	BBC	S^#EXE$V_SYSWRTABL, -
		@#EXE$GL_FLAGS,30$	; branch if no WRITEABLESYS
	MOVZBL	KW_TBL[R3],R3		; change prot to at least kern write
	BISW	#SEC$M_CRF,SEC$W_FLAGS(R8) ; make it CRF
30$:	INSV	#<PTE$M_TYP1!PTE$M_TYP0>@-16, -
		#16,#16,R1		; form section type pte
	INSV	R3,#PTE$V_PROT,#PTE$S_PROT,R1 ; set prot code into pte
	MOVL	@#MMG$GL_SPTBASE,R8	; get SPT base address
	MOVAL	(R8)[R7],R8		; get SVAPTE of first PTE
	SUBL3	#1,PAGECNT(AP),R9	; get index of last PTE

40$:	MOVL	R1,(R8)[R9]		; set PTE contents
	SOBGEQ	R9,40$

	BBC	#WCB$V_SHRWCB,WCB$B_ACCESS(R4),50$ ; branch if not shared WCB
	INCW	WCB$W_REFCNT(R4)	; count another pointer to WCB	

50$:	INVALID
	MOVZBL	#SS$_NORMAL,R0

60$:	ENBINT
	RET

	.SBTTL	EXE$SYS_SECTION - Create a system section

;++
; EXE$SYS_SECTION - Create a system section
;
; 	This routine will create a system section.
;
;	Page protection is the PROT(AP) value unless page is first page in
;	image or the WRITEABLESYS parameter is set, then the protection is
;	translated into one which allows at least kernel mode write.
;
; Calling Sequence:
;
;		CALLS	#5,EXE$SYS_SECTION
;
; Input Parameters:  (AP offsets)
;	
		SECCHAN	=	4		; Channel file is access on
		SECSTRTVBN=	8		; image start VBN
		SECPAGECNT =	12		; number of pages to be loaded
		SECPROT	=	16		; protection to be applied	
;
; Implicit Inputs:
;
; Output Parameters:
		SECRETADR =	20		; address to return VA
;
; Implicit Outputs:
;
; Completion Codes:
;
; Side Effects:
;
;--

	.ENTRY	EXE$SYS_SECTION,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>
;
;	Allocate enough SPTEs for image
;

	MOVL	SECPAGECNT(AP),R6
	DSBINT	25$			; go to SYNCH and lock down code
	MOVAB	MMG$A_SYSPARAM,R5	; make sure we don't use SYSGEN private copy
	MOVL	BOO$GL_SPTFREL-EXE$A_SYSPARAM(R5),R7 ; first free SPT
	ADDL3	R7,R6,R0		; new free pointer
	CMPL	R0,BOO$GL_SPTFREH-EXE$A_SYSPARAM(R5) ; enought left?
	BGTR	20$			; branch if not
	MOVL	R0,BOO$GL_SPTFREL-EXE$A_SYSPARAM(R5) ; record the allocation
	ENBINT
	BRB	26$

20$:	ENBINT
	MOVZWL	#SS$_VASFULL,R0
	RET

25$:	.LONG	IPL$_SYNCH
26$:
	ASHL 	#9,R7,@SECRETADR(AP)	; return address of loaded code
	BBSS	#VA$V_SYSTEM,@SECRETADR(AP),28$
28$:
;
;	Set up parameters for load routines
;
	PUSHL	R7			;	first SPT
	MOVZBL	SECPROT(AP),-(SP)	; 	driver protection
	MOVL	SECPAGECNT(AP),-(SP)	;	page count
	MOVL	SECSTRTVBN(AP),-(SP) 	; 	start VBN 
	PUSHL	SECCHAN(AP)		;	channel		

	CALLS 	#5,EXE$LOAD_PAGED
	RET

	.END
