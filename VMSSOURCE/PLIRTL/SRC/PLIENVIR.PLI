/*							EDIT: HE2004
*****************************************************************************
**									    *
**  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
**  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
**  ALL RIGHTS RESERVED.						    *
** 									    *
**  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
**  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
**  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
**  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
**  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
**  TRANSFERRED.							    *
** 									    *
**  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
**  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
**  CORPORATION.							    *
** 									    *
**  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
**  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
** 									    *
**									    *
*****************************************************************************

facility:	VAX-11 PL/I Runtime Library.

abstract:	This routine is called to process the environment attributes
		for the PL/I open service.

author:		C. Spitz

date:		23-Jan-1980

Modifications:
    V1.4-02:	Bill Matthews	28-Sep-1981

		Fix to not maximize versions ever when an explicit version
		number is specified.

    V1.4-03:	Bill Matthews	08-Oct-1981

		Fix coding of protection utility to not rely on short circuit
		boolean optimization for correct execution of the program.
		
    V2.0-04: 	Hisham Elbasha  11-NOV-1982

		make the upi bit independent of the bio bit for shared_read
		and shared_write.
*/
/*
Local Commentary:
	The environment options for a file may be specified on the DECLARE
	statement for the file, on the OPEN statement, or on the CLOSE
	statement.  The environment options are represented as a list of
	elements, where each element is represented by its type code, and
	its value. The type code is one byte long; valid environments have
	values of 1 through num_envir_opts. The value of 0 is used to des-
	ignate the end of the environment list. Each environment option has
	a parameter, whose interpretation is dependant upon the option. The
	parameters data types are:
		immediate bit - represented as 1 byte, low bit = value
		immediate value - represented as 1 longword
		immediate character - represented as n bytes. the first
			2 bytes are the total length of the character
			string, the second 2 bytes are the current length
			of the character sting, and the remaining n-4 bytes
			are storage for the total length of the string. Note
			that both lengths do not include the length fields.
		address - represented as a 4 byte absolute address.
		quad value - represented as a 4 byte absolute address. */
	
pli$$envir: procedure(fcbpt,openv,open_blk) options(ident('1-004'))
		returns(fixed bin(31));

/* parameter declarations */
dcl	fcbpt			pointer, /* pointer to file control block */
	openv			pointer, /* pointer to open environment	  */
	open_blk		pointer; /* pointer to open block	  */

/* the following is a template for the macro open block */
dcl	1 opn			based(open_blk),
		2 status(0:31)	bit,
		2 create_date(0:1) fixed bin(31),
		2 expire_date(0:1) fixed bin(31),
		2 file_id_to_pt	pointer,
		2 fixed_control_to_pt pointer,
		2 prot(0:15)	bit,
		2 own_group	fixed bin(15),
		2 own_mem	fixed bin(15);
	/* bit offsets for status */
	%replace create_dat	by 0;
	%replace expire_dat	by 1;
	%replace fileid_to	by 2;
	%replace fixedctl_to	by 3;
	%replace protect	by 4;
	%replace uic		by 5;
	%replace close		by 6;
	/* bit offsets for protection */
	%replace no_read by 0;
	%replace no_write by 1;
	%replace no_execute by 2;
	%replace no_delete by 3;
	%replace system_prot by 0;
	%replace owner_prot by 4;
	%replace group_prot by 8;
	%replace world_prot by 12;
		
/* general constants */
%replace true			by '1'b;
%replace false			by '0'b;

/* global declarations */
%include envcodes; /* define environment codes and types  */
%include filedef; /* define file control block, fab, rab, nam*/

/* local data - static */
/* the following table contains the parameter type for each environment option*/
%replace bittyp			by 0;
%replace longtyp		by 1;
%replace quadtyp		by 2;
%replace stringtyp		by 3;
%replace addrtyp		by 4;
dcl	env_type(num_envir_opts) fixed bin(7) static readonly
		init(	bittyp,		/* append */
			bittyp,		/* batch */
			bittyp,		/* block_boundry */
			bittyp,		/* block_io */
			longtyp,	/* block_size */
			longtyp,	/* bucket_size */
			bittyp,		/* carriage */
			bittyp,		/* contiguous */
			bittyp,		/* contiguous_best_try */
			quadtyp,	/* creation_date */
			bittyp,		/* current_position */
			stringtyp,	/* default_file_name */
			bittyp,		/* defered_write */
			bittyp,		/* delete */
			quadtyp,	/* expiration_date */
			longtyp,	/* extension_size */
			addrtyp,	/* file_id */
			addrtyp,	/* file_id_to */
			longtyp,	/* file_size */
			longtyp,	/* fixed_control_size */
			addrtyp,	/* fixed_control_size_to */
			bittyp,		/* fixed_length_records */
			stringtyp,	/* group_protection */
			bittyp,		/* ignore_line_marks */
			bittyp,		/* indexed */
			bittyp,		/* indexed_fill */
			longtyp,	/* index_number */
			longtyp,	/* max_record_number */
			longtyp,	/* max_record_size */
			longtyp,	/* multiblock_count */
			longtyp,	/* multibuffer_count */
			bittyp,		/* no_share */
			longtyp,	/* owner_group */
			longtyp,	/* owner_member */
			stringtyp,	/* owner_protection */
			bittyp,		/* printer */
			bittyp,		/* read_ahead */
			bittyp,		/* read_check */
			bittyp,		/* record_id_access */
			longtyp,	/* retreityp_pointers */
			bittyp,		/* rewind_close */
			bittyp,		/* rewind_open */
			bittyp,		/* scalarvarying */
			bittyp,		/* shared_read */
			bittyp,		/* shared_write */
			bittyp,		/* spool */
			bittyp,		/* supersede */
			stringtyp,	/* system_protection */
			bittyp,		/* temporary */
			bittyp,		/* truncate */
			stringtyp,	/* world_protection */
			bittyp,		/* write_behind */
			bittyp);	/* write_check */

dcl	1 end_opt 		static readonly, /* end of environment list */
		2 env_number	fixed bin(7) init(unused_envir_opt);

dcl	default_name		char(4) static readonly init('.DAT');

/* local data - automatic */
dcl	fcb			pointer, /* local pointer to fcb (unaliased) */
	declared_environment	pointer,
	current_env_number	fixed bin(7),
	next_specified_env_number fixed bin(7),
	longtemp		fixed bin(31),
	point			pointer, /* utility pointer */
	error_code		fixed bin(31),
	carriage_specified_false bit aligned, /* true if carriage was specified
						as '0'b */
	specified		bit aligned; /* true if current_env_number was
						specified in an environment list */

/* the following are used to compare the declared and open environments, to
   ensure that they are the same. THEY ARE NOT AVAILABLE FOR USE AS TEMPS. */
dcl	bitval(0:1)		bit aligned,
	addrval(0:1)		pointer,
	longval(0:1)		fixed bin(31),
	quadval(0:1,0:1)	fixed bin(31);
/* 

/* based declarations */
/* the following declarations are templates for the various types of environment
	options. there is one template for each parameter type. */
dcl	1 optbit		based,
		2 env_number	fixed bin(7),
		2 bitt		bit,
		2 bitext(7)	bit,
		2 bitnext	fixed bin(7);
dcl	1 optlong		based,
		2 env_number	fixed bin(7),
		2 long		fixed bin(31),
		2 longnext	fixed bin(7);
dcl	1 optaddr		based,
		2 env_number	fixed bin(7),
		2 address	pointer,
		2 addrnext	fixed bin(7);
dcl	1 optstring		based,
		2 env_number	fixed bin(7),
		2 maxsize	fixed bin(15),
		2 string	char(128) var;
dcl	1 optstringnext		based,
		2 env_number	fixed bin(7),
		2 maxsize	fixed bin(15),
		2 cursize	fixed bin(15),
		2 stringnext(0:128) fixed bin(7);

/* the following are templates for moving values around */
dcl	value			fixed bin(31) based;
dcl	qvalue(0:1)		fixed bin(31) based;
dcl	byte			fixed bin(7) based(addr(longval));
dcl	word			fixed bin(15) based(addr(longval));
dcl	fileid			char(22) based(addrval(0));
dcl	bytetemp		fixed bin(7) based(addr(longtemp));
dcl	wordtemp		fixed bin(15) based(addr(longtemp));
dcl	buflen			fixed bin(15) based(
					addr(fcb->file_constant.buffer_end));
dcl	stringtemp		char(128) var based;
dcl	1 s			based,
		2 stringlen	fixed bin(15),
		2 stringval	char(128);

/* declarations of error messages and error routines */
dcl	pli$io_error		entry(fixed bin(31) value,
				fixed bin(31) value,pointer value);
dcl	pli$_undfile		globalref fixed bin(31) value;
dcl	pli$_envparm		globalref fixed bin(31) value;
dcl	pli$_invdfnam		globalref fixed bin(31) value;
dcl	pli$_conappsup		globalref fixed bin(31) value;
dcl	pli$_conblokio		globalref fixed bin(31) value;
dcl	pli$_invrtvptr		globalref fixed bin(31) value;
dcl	pli$_noshare		globalref fixed bin(31) value;
dcl	pli$_invprot		globalref fixed bin(31) value;
dcl	pli$_invmltblk		globalref fixed bin(31) value;
dcl	pli$_invmltbuf		globalref fixed bin(31) value;
dcl	pli$_confixlen		globalref fixed bin(31) value;
dcl	pli$_invindnum		globalref fixed bin(31) value;
dcl	pli$_invblksiz		globalref fixed bin(31) value;
dcl	pli$_invbktsiz		globalref fixed bin(31) value;
dcl	pli$_invextsiz		globalref fixed bin(31) value;
dcl	pli$_invfxcsiz		globalref fixed bin(31) value;
dcl	pli$_conenvopt		globalref fixed bin(31) value;
dcl	pli$_conprintcr		globalref fixed bin(31) value;
dcl	pli$_invowngrp		globalref fixed bin(31) value;
dcl	pli$_invownmem		globalref fixed bin(31) value;
dcl	pli$_conprtfrm		globalref fixed bin(31) value;
dcl	pli$_creindex		globalref fixed bin(31) value;
dcl	pli$_invmaxrec		globalref fixed bin(31) value;

/* initialization */
/* define general error condition handler */
on anycondition begin;
	error_code = pli$_envparm;
	goto opt_error;
	end;

fcb = fcbpt; /* copy fcb pointer to local storage */
declared_environment = addr(fcb -> fcb_end); /* point to declared environment */
if openv = null()
	then openv = addr(end_opt);
if fcb -> fcb_end = 0 | opn.status(close)
	then declared_environment = addr(end_opt);
next_specified_env_number = 0;

/* main loop */
do current_env_number = 0 to num_envir_opts;
	specified = (next_specified_env_number = current_env_number);
	if opn.status(close)
		then do;
			if current_env_number = batch |
					current_env_number = delete |
					current_env_number = rewind_close |
					current_env_number = spool |
					current_env_number = truncate
				then goto opt(current_env_number);
			end;
		else goto opt(current_env_number);
	goto next_opt;

/* error routine */

opt_error: 
	revert anycondition;
	call pli$io_error(pli$_undfile,error_code,fcb);
	return(pli$_undfile);

opt(0):
	goto next_opt;
opt(append):
	if specified & bitval(0)
		then do;
			fcb -> attr(atr_v_app) = true;
			fcb -> fab$l_fop(fab$v_mxv) = false;
			fcb -> fab$l_fop(fab$v_cif) = true;
			fcb -> fab$l_fop(fab$v_sup) = false;
			fcb -> fab$l_fop(fab$v_nef) = false;
			fcb -> rab$l_rop(rab$v_eof) = true;
			end;
		else fcb -> attr(atr_v_app) = false;
	goto next_opt;


opt(batch):
	fcb -> fab$l_fop(fab$v_scf) = specified & bitval(0);
	goto next_opt;


opt(block_boundry):
	fcb -> fab$b_rat(fab$v_blk) = specified & bitval(0); 
	goto next_opt;


opt(block_io):
	if specified & bitval(0) | fcb -> attr(atr_v_blockio)
		then do;
			if fcb -> fab$b_rat(fab$v_blk)
					| fcb -> attr(atr_v_stream)
				then do;
					error_code = pli$_conblokio;
					goto opt_error;
					end;
			fcb -> fab$b_fac(fab$v_bio) = true;
			fcb -> fab$b_rfm = fab$c_udf;
			end;
		else	fcb -> fab$b_fac(fab$v_bio) = false;
	fcb -> fab$b_shr(fab$v_upi) = false;
	goto next_opt;


opt(block_size):
	if specified
		then do;
			if longval(0) < 0 | longval(0) > 65535
				then do;
					error_code = pli$_invblksiz;
					goto opt_error;
					end;
			fcb -> fab$w_bls = word;
			end;
		else fcb -> fab$w_bls = 0;
	goto next_opt;


opt(bucket_size):
	if specified
		then do;
			if longval(0) < 0 | longval(0) > 32
				then do;
					error_code = pli$_invbktsiz;
					goto opt_error;
					end;
			fcb -> fab$b_bks = byte;
			end;
		else fcb -> fab$b_bks = 0;
	goto next_opt;


opt(carriage):
	if specified & bitval(0)
		then do;
			if fcb -> attr(atr_v_print)
				then do;
					error_code = pli$_conprintcr;
					goto opt_error;
					end;
			if fcb -> fab$b_fac(fab$v_bio)
				then do;
					error_code = pli$_conblokio;
					goto opt_error;
					end;
			fcb -> fab$b_rat(fab$v_cr) = true;
			end;
		else do;
			fcb -> fab$b_rat(fab$v_cr) = false;
			carriage_specified_false = specified;
			end;
	fcb -> fab$b_rat(fab$v_ftn) = false;
	goto next_opt;


opt(contiguous):
	fcb -> fab$l_fop(fab$v_ctg) = specified & bitval(0);
	goto next_opt;


opt(contiguous_best_try):
	fcb -> fab$l_fop(fab$v_cbt) = specified & bitval(0);
	goto next_opt;


opt(creation_date):
	if specified
		then do;
			create_date(0) = quadval(0,0);
			create_date(1) = quadval(0,1);
			opn.status(create_dat) = true;
			end;
	goto next_opt;


opt(current_position):
	fcb -> fab$l_fop(fab$v_pos) = specified & bitval(0);
	goto next_opt;


opt(default_file_name):
	if specified
		then do;
			if addrval(0) -> stringlen > 128
				then do;
					error_code = pli$_invdfnam;
					goto opt_error;
					end;
			fcb -> fab$l_dna = addr(addrval(0) -> stringval);
			longtemp = addrval(0) -> stringlen;
			fcb -> fab$b_dns = bytetemp;
			end;
		else do;
			fcb -> fab$l_dna = addr(default_name);
			fcb -> fab$b_dns = length(default_name);
	end;
	goto next_opt;


opt(defered_write):
	fcb -> fab$l_fop(fab$v_dfw) = specified & bitval(0);
	goto next_opt;


opt(delete):
	fcb -> fab$l_fop(fab$v_dlt) = specified & bitval(0);
	goto next_opt;


opt(expiration_date):
	if specified
		then do;
			expire_date(0) = quadval(0,0);
			expire_date(1) = quadval(0,1);
			opn.status(expire_dat) = true;
			end;
	goto next_opt;


opt(extension_size):
	if specified
		then do;
			if longval(0) < 0 | longval(0) > 65535
				then do;
					error_code = pli$_invextsiz;
					goto opt_error;
					end;
			fcb -> fab$w_deq = word;
			end;
		else fcb -> fab$w_deq = 0;
	goto next_opt;


opt(file_id):
	if specified
		then do;
			fcb -> nam$t_dvi = fileid;
			fcb -> nam$w_did = 0;
			fcb -> nam$w_did_seq = 0;
			fcb -> nam$w_did_rvn = 0;
			fcb -> fab$l_fop(fab$v_nam) = true;
			end;
		else fcb -> fab$l_fop(fab$v_nam) = false;
	goto next_opt;


opt(file_id_to):
	if specified
		then do;
			file_id_to_pt = addrval(0);
			opn.status(fileid_to) = true;
			end;
	goto next_opt;


opt(file_size):
	if specified
		then fcb -> fab$l_alq = longval(0);
		else fcb -> fab$l_alq = 0;
	goto next_opt;


opt(fixed_control_size):
	if specified
		then do;
			if fcb -> attr(atr_v_stream) |
					fcb -> attr(atr_v_update) |
					fcb -> fab$b_fac(fab$v_bio) |
					longval(0) < 0 | longval(0) > 255
				then do;
					error_code = pli$_invfxcsiz;
					goto opt_error;
					end;
			fcb -> fab$b_fsz = byte;
			fcb -> fab$b_rfm = fab$c_vfc;
			end;
		else do;
			if fcb -> attr(atr_v_print)
				then do;
					fcb -> fab$b_fsz = 2;
					fcb -> fab$b_rfm = fab$c_vfc;
					fcb -> fab$b_rat(fab$v_prn) = true;
					end;
				else fcb -> fab$b_fsz = 0;
			end;
	goto next_opt;


opt(fixed_control_size_to):
	if specified
		then do;
			fixed_control_to_pt = addrval(0);
			opn.status(fixedctl_to) = true;
			end;
	goto next_opt;


opt(fixed_length_records):
	if specified & bitval(0)
		then do;
			if (fcb -> attr(atr_v_stream) &
					fcb -> attr(atr_v_output)) |
					(fcb -> fab$b_rfm = fab$c_vfc) |
					(fcb -> fab$b_fac(fab$v_bio))
				then do;
					error_code = pli$_confixlen;
					goto opt_error;
					end;
			fcb -> fab$b_rfm = fab$c_fix;
			end;
	goto next_opt;


opt(group_protection):
	longtemp = group_prot;
	goto protection;


opt(ignore_line_marks):
	fcb -> attr(atr_v_app_comma) = ^(specified & bitval(0));
	goto next_opt;


opt(indexed):
	if specified & bitval(0)
		then do;
			if fcb -> attr(atr_v_output) & ^fcb -> attr(atr_v_app)
				then do;
					error_code = pli$_creindex;
					goto opt_error;
					end;
			fcb -> attr(atr_v_indexed) = true;
			fcb -> fab$b_org = fab$c_idx;
			end;
		else do;
			if fcb -> attr(atr_v_keyed) &
					^fcb -> fab$b_fac(fab$v_bio)
				then fcb -> fab$b_org = fab$c_rel;
				else fcb -> fab$b_org = fab$c_seq;
			end;
	goto next_opt;


opt(indexed_fill):
	fcb -> rab$l_rop(rab$v_loa) = specified & bitval(0);
	goto next_opt;


opt(index_number):
	if specified
		then do;
			if longval(0) > 255
				then do;
					error_code = pli$_invindnum;
					goto opt_error;
					end;
			fcb -> rab$b_krf = byte;
			end;
		else fcb -> rab$b_krf = 0;
	goto next_opt;


opt(max_record_number):
	if specified
		then fcb -> fab$l_mrn = longval(0);
		else fcb -> fab$l_mrn = 0;
	goto next_opt;


opt(max_record_size):
	wordtemp = 0;
	bytetemp = fcb -> fab$b_fsz;
	if fcb -> fab$b_org = fab$c_rel
		then buflen = 480 - wordtemp;
		else do;
			if fcb -> fab$b_rfm = fab$c_fix
				then buflen = 512;
				else buflen = 510 - wordtemp;
			end;
	if specified
		then do;
			if longval(0) < 0 | longval(0) > 32767
					| (fcb -> fab$b_org = fab$c_rel &
						longval(0) > 16383)
				then do;
					error_code = pli$_invmaxrec;
					goto opt_error;
					end;
			fcb -> fab$w_mrs = word;
			end;
		else fcb -> fab$w_mrs = buflen;
	buflen = max(buflen,fcb -> fab$w_mrs);
	goto next_opt;


opt(multiblock_count):
	if specified
		then do;
			if longval(0) < 0 | longval(0) > 127
				then do;
					error_code = pli$_invmltblk;
					goto opt_error;
					end;
			fcb -> rab$b_mbc = byte;
			end;
		else fcb -> rab$b_mbc = 0;
	goto next_opt;


opt(multibuffer_count):
	if specified
		then do;
			if longval(0) < 0 | longval(0) > 127
				then do;
					error_code = pli$_invmltbuf;
					goto opt_error;
					end;
			fcb -> rab$b_mbf = byte;
			end;
		else fcb -> rab$b_mbf = 0;
	goto next_opt;


opt(no_share):
	fcb -> fab$b_shr(fab$v_nil) = specified & bitval(0);
	goto next_opt;


opt(owner_group):
	if specified
		then do;
			if longval(0) < 0 | longval(0) > 255
				then do;
					error_code = pli$_invowngrp;
					goto opt_error;
					end;
			own_group = word;
			opn.status(uic) = true;
			end;
	goto next_opt;


opt(owner_member):
	if specified
		then do;
			if longval(0) < 0 | longval(0) > 255
				then do;
					error_code = pli$_invownmem;
					goto opt_error;
					end;
			own_mem = word;
			opn.status(uic) = true;
			end;
	goto next_opt;


opt(owner_protection):
	longtemp = owner_prot;
	goto protection;


opt(printer):
	if specified & bitval(0)
		then do;
			if fcb -> attr(atr_v_stream) |
					fcb -> fab$b_rfm = fab$c_fix |
					fcb -> fab$b_rat(fab$v_cr) |
					fcb -> fab$b_fac(fab$v_bio)
				then do;
					error_code = pli$_conprtfrm;
					goto opt_error;
					end;
			fcb -> fab$b_rat(fab$v_prn) = true;
			fcb -> fab$b_rfm = fab$c_vfc;
			end;
		else fcb -> fab$b_rat(fab$v_cr) = ^(fcb -> attr(atr_v_print) |
						carriage_specified_false);
	goto next_opt;


opt(read_ahead):
	fcb -> rab$l_rop(rab$v_rah) = true;
	if specified
		then fcb -> rab$l_rop(rab$v_rah) = bitval(0);
	goto next_opt;


opt(read_check):
	fcb -> fab$l_fop(fab$v_rck) = specified & bitval(0);
	goto next_opt;


opt(record_id_access):
	if specified & bitval(0) & fcb -> fab$b_fac(fab$v_bio)
		then do;
			error_code = pli$_conblokio;
			goto opt_error;
			end;
	fcb -> attr(atr_v_recidacc) = specified & bitval(0);
	goto next_opt;


opt(retreival_pointers):
	if specified
		then do;
			if longval(0) > 127 | longval(0) < -1
				then do;
					error_code = pli$_invrtvptr;
					goto opt_error;
					end;
			if longval(0) = -1
				then longval(0) = 255;
			fcb -> fab$b_rtv = byte;
			end;
		else fcb -> fab$b_rtv = 0;
	goto next_opt;


opt(rewind_close):
	fcb -> fab$l_fop(fab$v_rwc) = specified & bitval(0);
	goto next_opt;


opt(rewind_open):
	fcb -> fab$l_fop(fab$v_rwo) = specified & bitval(0);
	goto next_opt;


opt(scalarvarying):
	fcb -> attr(atr_v_scalvar) = specified & bitval(0);
	goto next_opt;


opt(shared_read):
	if specified & bitval(0)
		then do;
			if fcb -> fab$b_shr(fab$v_nil)
				then do;
					error_code = pli$_noshare;
					goto opt_error;
					end;
			fcb -> fab$b_shr(fab$v_get) = true;
			fcb -> fab$b_shr(fab$v_upi) = true;
			end;
		else fcb -> fab$b_shr(fab$v_get) = false;
	goto next_opt;


opt(shared_write):
	if specified & bitval(0)
		then do;
			if fcb -> fab$b_shr(fab$v_nil)
				then do;
					error_code = pli$_noshare;
					goto opt_error;
					end;
			fcb -> fab$b_shr(fab$v_put) = true;
			fcb -> fab$b_shr(fab$v_get) = true;
			fcb -> fab$b_shr(fab$v_del) = true;
			fcb -> fab$b_shr(fab$v_upd) = true;
			fcb -> fab$b_shr(fab$v_upi) = true;
			end;
		else do;
			fcb -> fab$b_shr(fab$v_put) = false;
			fcb -> fab$b_shr(fab$v_del) = false;
			fcb -> fab$b_shr(fab$v_upd) = false;
			end;
	goto next_opt;


opt(spool):
	fcb -> fab$l_fop(fab$v_spl) = specified & bitval(0);
	goto next_opt;


opt(supersede):
	if specified & bitval(0)
		then do;
			if fcb -> attr(atr_v_app)
				then do;
					error_code = pli$_conappsup;
					goto opt_error;
					end;
			fcb -> fab$l_fop(fab$v_mxv) = false;
			fcb -> fab$l_fop(fab$v_cif) = false;
			fcb -> fab$l_fop(fab$v_sup) = true;
			fcb -> fab$l_fop(fab$v_nef) = true;
			fcb -> rab$l_rop(rab$v_eof) = false;
			end;
		else do;
			if ^fcb -> attr(atr_v_app)
				then do;
					fcb -> fab$l_fop(fab$v_mxv) = false;
					fcb -> fab$l_fop(fab$v_cif) = false;
					fcb -> fab$l_fop(fab$v_sup) = false;
					fcb -> fab$l_fop(fab$v_nef) = false;
					fcb -> rab$l_rop(rab$v_eof) = false;
					end;
			end;
	goto next_opt;


opt(system_protection):
	longtemp = system_prot;
	goto protection;


opt(temporary):
	fcb -> fab$l_fop(fab$v_tmp) = specified & bitval(0);
	goto next_opt;


opt(truncate):
	fcb -> fab$l_fop(fab$v_tef) = specified & bitval(0);
	goto next_opt;


opt(world_protection):
	longtemp = world_prot;
	goto protection;


opt(write_behind):
	fcb -> rab$l_rop(rab$v_wbh) = specified & bitval(0);
	goto next_opt;


opt(write_check):
	fcb -> fab$l_fop(fab$v_wck) = specified & bitval(0);
	goto next_opt;


/* utility routines */
protection:
	if specified
	then
	    if verify(addrval(0) -> stringtemp,'rwedRWED') ^= 0
		then do;
			error_code = pli$_invprot;
			goto opt_error;
			end;
	if ^specified
	then do;
		prot(longtemp + no_read) = true;
		prot(longtemp + no_write) = true;
		prot(longtemp + no_execute) = true;
		prot(longtemp + no_delete) = true;
		end;
	else do;
		if (index(addrval(0) -> stringtemp,'r') = 0 &
			index(addrval(0) -> stringtemp,'R') = 0)
			then prot(longtemp + no_read) = true;
		if (index(addrval(0) -> stringtemp,'w') = 0 &
			index(addrval(0) -> stringtemp,'W') = 0)
			then prot(longtemp + no_write) = true;
		if (index(addrval(0) -> stringtemp,'e') = 0 &
			index(addrval(0) -> stringtemp,'E') = 0)
			then prot(longtemp + no_execute) = true;
		if (index(addrval(0) -> stringtemp,'d') = 0 &
			index(addrval(0) -> stringtemp,'D') = 0)
			then prot(longtemp + no_delete) = true;
		opn.status(protect) = true;
		end;
	goto next_opt;

/* bottom of loop */

next_opt: 
	if specified
	    then do;
		if openv -> optbit.env_number = 0
			then openv = addr(end_opt);
		if declared_environment -> optbit.env_number = 0
			then declared_environment = addr(end_opt);
		if openv -> optbit.env_number =
			declared_environment -> optbit.env_number
		    then do;
			call get_opt_val(openv,0);
			call get_opt_val(declared_environment,1);
			end;
		    else do;
			if openv -> optbit.env_number <
				declared_environment -> optbit.env_number
			    then call get_opt_val(openv,0);
			    else call get_opt_val(declared_environment,0);
			end;
		end;
	end;
	return(1);


get_opt_val: procedure(optpt,valnum);
/* parameter declarations */
dcl optpt		pointer;
dcl valnum		fixed bin(7);

next_specified_env_number = optpt -> optbit.env_number;
if next_specified_env_number = 0 | next_specified_env_number = unused_envir_opt
	then do;
		next_specified_env_number = unused_envir_opt;
		return;
		end;

goto	opt_typ(env_type(next_specified_env_number));

opt_typ(bittyp):
	bitval(valnum) = optpt -> optbit.bitt;
	optpt = addr(optpt -> bitnext);
	if valnum = 1 & bitval(0) ^= bitval(1)
		then goto con_opt_exit;
	return;

opt_typ(longtyp):
	longval(valnum) = optpt -> long;
	optpt = addr(optpt -> longnext);
	if valnum = 1 & longval(0) ^= longval(1)
		then goto con_opt_exit;
	return;

opt_typ(quadtyp):
	quadval(valnum,0) = optpt -> address -> qvalue(0);
	quadval(valnum,1) = optpt -> address -> qvalue(1);
	optpt = addr(optpt -> addrnext);
	if valnum = 1 & (quadval(0,0) ^= quadval(1,0) |
			quadval(0,1) ^= quadval(1,1))
		then goto con_opt_exit;
	return;

opt_typ(stringtyp):
	addrval(valnum) = addr(optpt -> string);
	optpt = addr(optpt -> stringnext(optpt -> optstringnext.maxsize));
	if valnum = 1 & addrval(0) -> stringtemp ^=
			addrval(1) -> stringtemp
		then goto con_opt_exit;
	return;

opt_typ(addrtyp):
	addrval(valnum) = optpt -> address;
	optpt = addr(optpt -> addrnext);
	if valnum = 1 & addrval(0) ^= addrval(1)
		then goto con_opt_exit;
	return;

con_opt_exit:
	error_code = pli$_conenvopt;
	goto opt_error;
	
end get_opt_val;

end pli$$envir;
