	.TITLE	REMLOCKDB - LOCK AND UNLOCK I/O DATA BASE
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; FACILITY:  REMACP - REMOTE I/O ACP
;
; ABSTRACT:
;
;	THESE ROUTINES LOCK AND UNLOCK THE I/O DATA BASE MUTEX.
;	NEEDLESS TO SAY, THEY MUST BE CALLED IN KERNEL MODE.
;
; ENVIRONMENT:
;
;	STARLET OPERATING SYSTEM, INCLUDING PRIVILEGED SYSTEM SERVICES
;	AND INTERNAL EXEC ROUTINE.
;
; AUTHOR:  Scott G. Davis, CREATION DATE:  20-Jul-1979  15:31
;
; MODIFIED BY:
;
;	V03-004	LMP0277		L. Mark Pilant,		12-Jul-1984  10:27
;		Copy protection from the template UCB to the cloned UCB.
;		(The protection in the cloned UCB is cleared in the
;		routine IOC$CLONE_UCB/IOC$COPY_UCB.)
;
;	V03-003	ROW0127		Ralph O. Weber		 5-OCT-1982
;		Make changes required to use new UCB creation and deletion 
;		routines in UCBCREDEL.  Rewrite REM$CREATE_UCB adding 
;		knowledge of CRB$W_REFC, number of UCB's on this CRB, and 
;		restructuring to take maximum advantage of new routines.  
;		Eliminate mailbox oriented parts of REM$KILL_UCB and change 
;		IOC$DELMBX to IOC$DELETE_UCB.
;
;	V03-002	KDM0002		Kathleen D. Morse	28-Jun-1982
;		Added $PCBDEF.
;

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES
;

	$AQBDEF
	$CCBDEF
	$CRBDEF
	$DEVDEF
	$IPLDEF
	$ORBDEF
	$PCBDEF
	$PRDEF
	$REMDEF
	$UCBDEF
	$VCBDEF
	$RTTUCBEXT

	.SBTTL	REM$LINK_AQB  - Link aqb into the aqb list
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine links an AQB into the AQB list.
;
; CALLING SEQUENCE:
;	BSBW	REM$LINK_AQB
;
; INPUT PARAMETERS:
;	R2 - AQB address
;
; SIDE EFFECTS:
;	None
;
	.PSECT	$LOCKEDC1$,NOWRT

;--
START_LOCK::				; LABEL FOR LKWSET SERVICE

REM$LINK_AQB::
	MOVL	R2,R8			; Save the AQB address
	BSBW	LOCK_IODB		; Lock the I/O database
	SETIPL	#IPL$_SYNCH		; Up IPL
	MOVL	PCB$L_PID(R4),AQB$L_ACPPID(R8) ; Stuff the PID
	MOVAB	G^IOC$GL_AQBLIST,R1	; Get address of list head
	MOVL	(R1),AQB$L_LINK(R8)	; Make forward link from AQB
	MOVL	R8,(R1)			; Make this AQB head of list
	BRW	UNLOCK_IODB		; Unlock the I/o database and return
.PAGE
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine finds the UCB associated with a device name.
;
; CALLING SEQUENCE:
;	BSBW	REM$FIND_UCB
;
; INPUT PARAMETERS:
;	R1 - Address of device name descriptor
;
; OUTPUT PARAMETERS:
;
;	R0 - lbc=>error; lbs=>UCB found
;	R1 - UCB address, if found
;
	.PSECT	$LOCKEDC1$,NOWRT

;--

REM$FIND_UCB::
	BSBB	LOCK_IODB		; LOCK THE I/O DATA BASE
	JSB	G^IOC$SEARCHDEV		; Find the UCB
	MOVQ	R0,-(SP)		; Save return info
	BSBB	UNLOCK_IODB		; Unlock the I/O data base
	MOVQ	(SP)+,R0		; Restore return info
	RSB				; Return
.PAGE
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine clones a UCB .
;
; CALLING SEQUENCE:
;	BSBW	REM$CREATE_UCB
;
; INPUT PARAMETERS:
;	R5 - address of UCB to be cloned
;
; OUTPUT PARAMETERS:
;
;	R0 - lbc=>error; lbs=>UCB found
;	R2 - Cloned UCB address
;
	.PSECT	$LOCKEDC1$,NOWRT

;--

REM$CREATE_UCB::
	CLRL	R0			; Assume too many RT devices already.
	MOVL	UCB$L_CRB(R5), R1	; Get CRB address.
	CMPW	CRB$W_REFC(R1), -	; Have the maximum number of links
		W^REM$GB_MAXLINKS	; already been established?
	BGEQU	90$			; Branch, error exit, if no free links.
	BSBB	LOCK_IODB		; Lock I/O database for write access.
	CLRW	UCB$W_UNIT_SEED(R5)	; Limit unit numbers to MAXLINKS.
	JSB	G^IOC$CLONE_UCB		; Clone the UCB.
	BLBC	R0, 80$			; Branch, error exit, if clone failed.
	CLRL	UCB$L_PID(R2)		; Insure no owner of cloned UCB.
	BBCC	#DEV$V_ALL, -		; Mark cloned UCB unallocated.
		UCB$L_DEVCHAR(R2), 80$
80$:	PUSHL	R0			; Save our two output registers.
	PUSHL	R2
	BSBB	UNLOCK_IODB		; Unlock the I/O database.
	POPL	R2			; Restore saved output registers.
	POPL	R0
90$:	RSB				; Return to caller.

	.SBTTL	LOCK_IODB  - Lock the IO database
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE LOCKS THE I/O DATA BASE MUTEX.
;
; CALLING SEQUENCE:
;	BSB LOCK_IODB
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	R4 - My PCB address
;
; IMPLICIT OUTPUTS:
;	NONE
;
; ROUTINE VALUE:
;	NONE
;
; SIDE EFFECTS:
;	I/O DATA BASE MUTEX LOCKED
;
;--

	.PSECT	$LOCKEDC1$,NOWRT

LOCK_IODB:
	MOVL	G^SCH$GL_CURPCB,R4	; GET OWN PCB ADDRESS
	JMP	G^SCH$IOLOCKW		; Lock the database and return

	.SBTTL	UNLOCK_IODB  - Unlock the io database
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE UNLOCKS THE I/O DATA BASE MUTEX.
;
; CALLING SEQUENCE:
;	BSB UNLOCK_IODB
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R4 - My PCB address
;
; IMPLICIT OUTPUTS:
;	NONE
;
; ROUTINE VALUE:
;	NONE
;
; SIDE EFFECTS:
;	I/O DATA BASE MUTEX UNLOCKED
;	IPL Set to 0
;
;--

	.PSECT	$LOCKEDC1$,NOWRT

UNLOCK_IODB:
	MOVL	G^SCH$GL_CURPCB,R4	; Get PCB address
	JSB	G^SCH$IOUNLOCK		; Unlock I/O database
	SETIPL	#0			; Bring down the IPL
	RSB

	.SBTTL	REM$KILL_UCB  - Deallocate a ucb
;++
;
; REM$KILL_UCB - Deallocate the UCB, maybe, and deassign the I/O channel
;
; INPUTS:
;
;	R11 -	device index
;
;--

REM$KILL_UCB::
	MOVL	@W^REM$GL_UCBVEC[R11],R5 ; Get the UCB address
	BEQL	KILL_NET_CHAN		; Branch if no UCB.
	BSBB	LOCK_IODB		; Lock I/O database for write access.
	BICL	#DEV$M_MNT, -		; Reset driver interlock.
		UCB$L_DEVCHAR(R5)
	TSTW	UCB$W_REFC(R5)		; Is the UCB ready to go bye bye.
	BNEQ	UNLOCK_IODB		; If not, just give up (for now).
	MOVL	UCB$L_VCB(R5), R0	; Get Volume Control Block address.
	DECW	VCB$W_MCOUNT(R0)	; Decrement its mounted volume count.
	BISL	#UCB$M_DELETEUCB, -	; Mark the UCB for deletion.
		UCB$L_STS(R5)
	JSB	G^IOC$DELETE_UCB	; Blow the UCB away.
	BSBB	UNLOCK_IODB		; Unlock the I/O database.

KILL_NET_CHAN:
	CLRL	@W^REM$GL_UCBVEC[R11]	; UCB is gone

	$DASSGN_S	@W^REM$GL_CHANVEC[R11] ; Deassign the channel
	CLRW	@W^REM$GL_CHANVEC[R11]	; Clear the channel vector slot
	RSB				; Done

	.SBTTL	REM$SET_UP_IN - Create a ucb and setup the net channel
;++
;
; REM$SET_UP_IN - Set up the I/O data base for inbound connects
;
; INPUTS:
;
;	NONE
;
; OUTPUTS:
;
;	R0 - LBC => couldn't do it; LBS => set up successful
;	R7 - channel number
;	R11 - device index
;
;--

REM$SET_UP_IN::
	MOVL	W^REM$GL_TEMPLATE,R5 	; Get address of UCB template
	BSBW	REM$CREATE_UCB		; Make a copy
	BLBC	R0,SET_UP_DONE		; If LBC no go
	BSBW	REM$XPORT_CHAN		; Get an I/O channel
	BLBC	R0,SET_UP_DONE		; If LBC error
	CLRW	UCB$W_REFC(R2)		; Reset the ref count - no channel yet
	BISL	#DEV$M_MNT,UCB$L_DEVCHAR(R2) ; Mark device mounted, to get
					; cancels in the acp and to show
					; that the VCB field of the ucb
					; is valid.
	MOVB	R11,UCB$B_ERTCNT(R2)	; Save the index for later
	MOVL	UCB$L_ORB(R5),R0	; Get template device ORB
	MOVL	UCB$L_ORB(R2),R1	; Get cloned device ORB

	ASSUME	ORB$L_OWN_PROT EQ ORB$L_SYS_PROT+4
	ASSUME	ORB$L_WOR_PROT EQ ORB$L_GRP_PROT+4

	MOVQ	ORB$L_SYS_PROT(R0),ORB$L_SYS_PROT(R1)	; Copy device
	MOVQ	ORB$L_GRP_PROT(R0),ORB$L_GRP_PROT(R1)	;  Protection

	MOVL	R2,@W^REM$GL_UCBVEC[R11] ; Save the UCB address
	MOVW	@W^REM$GL_CHANVEC[R11],R7 ; Get the I/O channel
	MOVL	R2,R5			; Move UCB address for call
	MOVZWL	R7,R0			; Move the channel
	JSB	G^IOC$VERIFYCHAN	; Obtain the CCB address
	MOVL	CCB$L_UCB(R1),-		; Obtain the UCB of the network
		UCB$L_RTT_NETUCB(R5)	; and save in the RTT UCB
	MOVAL	UCB$L_RTT_IRPFL(R5),-	; Init the IRP queue head
		UCB$L_RTT_IRPFL(R5)	;
	MOVAL	UCB$L_RTT_IRPFL(R5),-	;
		UCB$L_RTT_IRPBL(R5)	;
	CLRL	UCB$L_RTT_NETIRP(R5)	; No IRP for Net receive yet
	CLRL	UCB$L_RTT_NETWIND(R5)	; No window yet
	DSBINT	#IPL$_SYNCH		; Disable interrupts
	MOVL	UCB$L_VCB(R5),R1	; VCB address
	INCW	VCB$W_MCOUNT(R1)	; One more device mounted
	ENBINT				; Drop the ipl
SET_UP_DONE:
	RSB				; Done

	.SBTTL	REM$CHK_ACPDONE  - See if the acp can exit
	.SBTTL	REM$GO_AWAY  - Terminate the acp
;++
; FUNCTIONAL DESCRIPTION:
;
; REM$CHK_ACPDONE - See if the ACP can cease operation
; REM$GO_AWAY - Terminate operation. Called if ACP can't really get started.
;
; CALLING SEQUENCE:
;
;	BSB	REM$CHK_ACPDONE
;
; INPUT PARAMETERS:
;
;	R2 - AQB ADDRESS
;
; SIDE EFFECTS:
;
;	ACP MAY TERMINATE
;
;--
	.ENABLE LSB

REM$CHK_ACPDONE::
;
; The following code gets rid of all channels over which names were declared
; and forces closeouts (e.g., logouts) on all active remote devices.
; The cleanup is asynchronous, so a number of passes may be made through
; this code.
;
	CLRL	R6			; Reset active channel counter
	MOVZBL	W^REM$GB_MAXLINKS,R11	; Set up to loop
10$:
	TSTW	@W^REM$GL_CHANVEC[R11]	; Check the next channel
	BEQL	30$			; If EQL not active
	BLBC	@W^REM$GL_UCBVEC[R11],20$ ; If LBC remote device
	BSBW	KILL_NET_CHAN		; Get rid of this comm channel
	BRB	30$			; Loop
20$:
;*****
; If the following instruction is included, REMACP will blow away
; all remote terminal connections.  When it is not included, REMACP
; will not evaporate until all remote terminals are gone.
;
;	BSBW	REM$CLEAN_UP		; Pretend there was a disconnect
;
;*****
	INCL	R6			; This was an active channel
30$:
	SOBGTR	R11,10$			; Loop
	TSTL	R6			; Were there any active channels?
	BNEQ	50$			; If NEQ yes - wait
;
; Now see if there are any UCB's still active
;
	MOVZBL	W^REM$GB_MAXLINKS,R11	; Init count
40$:
	TSTL	@W^REM$GL_UCBVEC[R11]	; In use?
50$:	BNEQ	110$			; If NEQ yes - go away
	SOBGTR	R11,40$			; Loop
	$DASSGN_S	W^REM$GW_MBX_CHAN ; Kill the mailbox

REM$GO_AWAY::
;
; Everybody went away - now deallocate VCB
;
	MOVL	W^REM$GL_TEMPLATE,R4 	; Get UCB address
	BEQL	60$			; If EQL done
	MOVL	UCB$L_VCB(R4),R0	; Get the VCB address
	BEQL	60$			; If EQL none was allocated
	JSB	G^EXE$DEANONPAGED	; Deallocate it
	CLRL	UCB$L_VCB(R4)		; No VCB any more
60$:
	MOVL	W^REM$GL_Q_HEAD,R8	; Get the AQB address
	BSBW	LOCK_IODB		; LOCK THE I/O DATA BASE
	SETIPL	#IPL$_SYNCH		; Up IPL
	CMPL	AQB$L_ACPQFL(R8),R8	; ANY I/O IN QUEUE?
	BNEQ	100$			; IF NEQ YES - DON'T TERMINATE
;
; NO MORE I/O - NOW UNHOOK THE AQB FROM THE SYSTEM AQB LIST
;
	MOVAB	G^IOC$GL_AQBLIST,R1	; GET THE LIST ADDRESS
	MOVL	(R1),R0			; GET FIRST AQB POINTER
	CMPL	R8,R0			; IS IT THE FIRST?
	BNEQ	70$			; IF NEQ NO
	MOVL	AQB$L_LINK(R8),(R1)	; LINK IT IN
	BRB	90$			; DONE
70$:
	CMPL	AQB$L_LINK(R0),R8	; IS THIS IT?
	BEQL	80$			; IF EQL YES
	MOVL	AQB$L_LINK(R0),R0	; GET LINK
	BRB	70$			; LOOP
80$:
	MOVL	AQB$L_LINK(R8),AQB$L_LINK(R0) ; RELINK
90$:
	MOVL	R8,R0			; SET TO DEALLOCATE THE AQB
	JSB	G^EXE$DEANONPAGED	; DO IT
	BSBW	UNLOCK_IODB		; NOW UNLOCK THE I/O DATABASE
	$DELPRC_S			; SAYONARA!
100$:
	BRW	UNLOCK_IODB		; Now unlock the I/O database and return
110$:	RSB

	.DISABLE LSB

END_LOCK::

	.END
