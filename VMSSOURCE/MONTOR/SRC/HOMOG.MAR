	.TITLE	HOMOG	- MONITOR Homogeneous Class STATS Rtn
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:  VAX/VMS MONITOR Utility
;
; ABSTRACT:
;
;	This module fills all the STATS buffers for homogeneous
;	STANDARD classes of the MONITOR utility.
;
; ENVIRONMENT:
;
;	Unprivileged user mode, runs at AST level.
;
; AUTHOR: Thomas L. Cafarella, April, 1983
;
; MODIFIED BY:
;
;	V03-003	TLC1072		Thomas L. Cafarella	17-Apr-1984	11:00
;		Add volume name to DISK display.
;
;	V03-002	TLC1063		Thomas L. Cafarella	3-Apr-1984	13:00
;		Add check to ensure that a counter which is re-inited to
;		zero will not cause an **** to be displayed.
;
;	V03-001	TLC1061		Thomas L. Cafarella	18-Mar-1984	11:00
;		Identify dual-path disks by allocation class.
;
;	V03-001	TLC1060		Thomas L. Cafarella	12-Mar-1984	11:00
;		Make multi-file summary work for homogeneous classes.
;
;--

;
; MACROS:
;

;
; Local Macro Definitions
;

;
; ALLOC Macro - Dynamically allocate space on the stack.
;

	.MACRO	ALLOC	LENGTH,RSLDESC,RSLBUF
	SUBL	#<LENGTH+3>&<^C3>,SP
	.IF	NB,RSLBUF
	MOVL	SP,RSLBUF
	.ENDC
	PUSHL	SP
	PUSHL	#LENGTH
	MOVL	SP,RSLDESC
	.ENDM	ALLOC


	.SBTTL	DECLARATIONS
	.PSECT	MONDATA,QUAD,NOEXE
;
; INCLUDE FILES:
;

	$CDBDEF				; Define Class Descriptor Block
	$CDXDEF				; Define CDB Extension
	$IDBDEF				; define item descriptor block offsets
	$MBPDEF				; Define Monitor Buffer Pointers
	$MONDEF				; Monitor Recording File Definitions
	$SCBDEF				; Define STATS Control Block
	$TM1DEF				; Define temporary storage offsets

	.SBTTL	FILL_HOMOG_STATS - Fill STATS buffs for homogs
	.PSECT	$$MONCODE,NOWRT,EXE

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	FILL_HOMOG_STATS
;
;	This routine fills all the STATS buffers for the
;	class indicated by CDBPTR. The SCB (STATS Control
;	Block) Table and the Element ID Table are also
;	updated. These tables maintain information about
;	the elements of this homogeneous class. An "element"
;	is, for example, a particular disk in the DISK class.
;	There is a STATS buffer for each item defined for the
;	class. An "item" is, for example, operation count
;	for the DISK class.
;
; INPUTS:
;
;	 4(AP) - address of CURRENT collection buffer
;
;	 8(AP) - address of PREVIOUS collection buffer
;
; IMPLICIT INPUTS:
;
; OUTPUTS:
;
;	All STATS buffers for this homogeneous class filled.
;
; IMPLICIT OUTPUTS:
;
;	CDB$L_ECOUNT and CDX$W_CUMELCT established for the current interval.
;	Element ID Table and SCB (STATS Control Block) updated.
;
; ROUTINE VALUE:
;
;	R0 = SS$_NORMAL
;
; SIDE EFFECTS:
;
;	none
;
;--



.ENTRY	FILL_HOMOG_STATS, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	MOVL	CDBPTR,R6		; Load CDB addr
	MOVL	CDB$A_CDX(R6),R7	; Load CDX addr
	MOVL	4(AP),R8		; Load CURRENT coll buff addr
	ALLOC	TMP$K_SIZE,R0,R9	; Allocate local temp storage
	MOVZWL	CDX$W_CUMELCT(R7), -	; Load element count for display
		CDB$L_ECOUNT(R6)
	ADDL2	#MNR_CLS$K_HSIZE,R8	; Point to CURR coll buff prologue
	MOVL	MNR_HOM$L_ELTCT(R8), -	; Load current buffer data block count
		TMP$L_DBCT(R9)
	BNEQ	5$			; Br if have some
	BRW	UPDATE_SCB_FLAGS	; Else skip past ID Table update
5$:
	ADDL2	#MNR_HOM$K_PSIZE,R8	; Point to first data block
	MOVZWL	CDB$W_BLKLEN(R6), -	; Get data block length
		TMP$L_DBLEN(R9)
	MOVZWL	CDX$W_CUMELCT(R7), -	; Load number of ID Table elements
		TMP$L_ELIDCT(R9)
	MOVZBL	CDX$B_ELIDLEN(R7),R10	; Get element ID length


;
; Loop through all data blocks in the CURRENT collection buffer.
; For each element (represented by a data block), try to find
; a match in the element ID table. The ID table represents elements
; which have been monitored for this request. On the first time 
; through this routine, the table will be empty. The element ID table
; has several other associated tables, namely the STATS control
; block (SCB) table, and all the transformation buffers (STATS, MIN,
; MAX, SUM, PCSTATS, PCMIN, PCMAX and PCSUM). Each of these tables/
; buffers has one element for each monitored element (i.e., disk for
; the DISK class). The current number of elements in each of the tables
; is represented by CDX$W_CUMELCT.
;

	CLRL	TMP$L_DBIDX(R9)		; Clear data block index
10$:
	MOVL	CDX$A_ELIDTABLE(R7),R11	; Load Element ID Table addr
	CLRB	TMP$B_FOUND(R9)		; Clear "element found" indicator
	CLRL	R4			; Clear element ID table index
	MOVL	TMP$L_ELIDCT(R9),R5	; Load number of elements in ID table
	BEQL	40$			; Br if table is empty
	MOVL	R10,R7			; Borrow R7 to hold elt id length
	BBC	#CDB$V_DISKAC, -	; Branch if no allocation class in name
		CDB$L_FLAGS(R6),20$	; ...
	BSBW	SHORTEN_DISKNAM		; Shorten element name for DISK
20$:
	CMPC3	R7,(R8),(R11)		; Match current element in table ?
	BNEQU	30$			; Br if not
	MOVB	#1,TMP$B_FOUND(R9)	; Yes -- indicate so
	BRB	40$			; ... and terminate loop
30$:
	ADDL2	R10,R11			; Point to next element ID
	AOBLSS	R5,R4,20$		; Loop through element ID table

;
; At this point the entire element ID table has been scanned for a 
; match to the current element in the CURRENT collection buffer.
;

40$:
	MOVL	CDB$A_CDX(R6),R7	; Re-load CDX addr
	BLBS	TMP$B_FOUND(R9),50$	; Branch if element found in table
	MOVZWL	CDX$W_CUMELCT(R7),R4	; Get next available element index

;
; NOTE -- if R4 is greater than or equal to MAXELTS, issue warning msg
; and simply branch to look at next coll buff data block.
;

	BSBB	CHECK_TAB_SPACE		; Check if table space exhausted
					; NOTE -- if so, MONITOR request
					; ... is terminated

50$:
	MULL3	#SCB$K_SIZE,R4,R5	; Get SCB offset from index
	MOVAB	@CDX$A_SCBTABLE(R7)[R5],R5 ; Get SCB address

	BBSS	#SCB$V_CURRENT, -	; Set "current" bit indicating this
		SCB$B_FLAGS(R5),60$	; element in ID table was in CURR buff

60$:
	BLBS	TMP$B_FOUND(R9),70$	; Branch if element found in table

;
; Element in CURRENT buffer was NOT found in the element ID table.
; Add a new element to the table.
;

	BSBW	ADD_NEW_ELT		; Add elt to table
					; NOTE -- several registers altered
	BRB	80$			; Go look at next coll buff data block

;
; Element in CURRENT was found in the element ID table.
;

70$:

	MOVZWL	SCB$W_DBIDX(R5),R11	; Get data block index for prev buff
	MOVW	TMP$L_DBIDX(R9),SCB$W_DBIDX(R5) ; Save curr index for next int

	BBC	#SCB$V_ACTIVE, -	; Done with this elt if not active
		SCB$B_FLAGS(R5),80$

;
; This element is active. Call routine to actually fill the STATS buffers,
; given the element ID table index and the addresses of this element's
; data blocks for both CURRENT and PREVIOUS collection buffers.
;

	MULL2	TMP$L_DBLEN(R9),R11	; Get data block offset from index
	MOVL	8(AP),R2		; Get ptr to PREVIOUS coll buff
	MOVAB	<MNR_CLS$K_HSIZE+MNR_HOM$K_PSIZE>(R2)[R11],R11
					; Compute PREVIOUS data block addr

	BSBB	HOMOG_STATS		; Fill STATS buffs for all req'd items
					; NOTE -- this subrtn destroys
					; ... R0-R3 and R5

80$:

	ADDL2	TMP$L_DBLEN(R9),R8	; Point to next data block

	AOBLSS	TMP$L_DBCT(R9), -	; Loop once for each elt in CURR buff
		TMP$L_DBIDX(R9),10$



;
; Now go through entire SCB (STATS control block) Table, setting
; the SCB$V_ACTIVE bit for all elements which have SCB$V_CURRENT
; set. Clear all the SCB$V_CURRENT bits as you go to prepare for
; the next collection interval. The underlying assumption is that
; all elements which were in the current collection are "active."
; For elements with SCB$V_CURRENT not set, clear SCB$V_ACTIVE
; and, in addition, zero the STATS buffers if SCB$V_ACTIVE had
; been set (this is an element which has just gone inactive.)
;

UPDATE_SCB_FLAGS:

	MOVL	CDX$A_SCBTABLE(R7),R9	; Get SCB table addr
	MOVZWL	CDX$W_CUMELCT(R7),R10	; ... and no. of elements in it
	BEQL	FHS_RET			; Quit if empty
	CLRL	R4			; Init element number
10$:
	BBSC	#SCB$V_CURRENT, -	; Br if current set
		SCB$B_FLAGS(R9),20$	; ... Always clear current
	BBCC	#SCB$V_ACTIVE, -	; Br if active clear
		SCB$B_FLAGS(R9),30$	; ... Always clear active
	CLRL	R8			; Indicate "clear STATS buffers"
	BSBB	HOMOG_STATS		; Clear all STATS buffs for this elt
					; NOTE -- this subrtn destroys
					; ... R0-R3 and R5
	BRB	30$			; Go process next element
20$:
	BBSS	#SCB$V_ACTIVE, -	; Set active
		SCB$B_FLAGS(R9),30$
30$:
	ADDL2	#SCB$K_SIZE,R9		; Point to next SCB
	AOBLSS	R10,R4,10$		; Loop back for next element

FHS_RET:
	MOVL	#SS$_NORMAL,R0		; Normal status
	RET				; Return



CHECK_TAB_SPACE:

	CMPL	#MAXELTS,R4		; Have we run out of table space?
	BGTR	10$			; Br if not
	MOVL	#MNR$_TABLEFULL,R0	; Yes -- return error
	RET				; .......
10$:
	RSB				; Return to caller


ADD_NEW_ELT:				; Add new element to ELIDTABLE

	INCW	CDX$W_CUMELCT(R7)	; Count the new element

	MOVW	TMP$L_DBIDX(R9), -	; Set data block index ...
		SCB$W_DBIDX(R5)		; ... for use next interval
	MULL2	R10,R4			; Compute offset to new table entry
	MOVC3	R10,(R8),@CDX$A_ELIDTABLE(R7)[R4]
					; Move new element ID into the table
	RSB				; Return


SHORTEN_DISKNAM:			; Possibly shorten DISK element name

	BBC	#CDB$V_DISKVN, -	; Branch if no volume name in disk name
		CDB$L_FLAGS(R6),10$	; ...
	SUBL2	#12,R7			; Shorten length for compare so
					; ... volume name will not be compared
10$:
	TSTB	(R8)			; Allocation class zero ?
	BEQL	20$			; Br if so
	SUBL2	#8,R7			; Shorten length for compare so
					; ... node name will not be compared
20$:
	RSB				; Return

;
; HOMOG_STATS - Fill the STATS buffer for each requested data item
;		(e.g., disk operation count) for the current element
;		(e.g., DBA0).
;
;	Register Inputs:
;
;		R4  = element index of current element
;		R6  = CDB address
;		R7  = CDX address
;		R8  = address of data block for CURRENT coll buffer,
;		      OR 0, if STATS buffers are to be cleared.
;		R10 = element ID length (unused if R8 = 0)
;		R11 = address of data block for PREVIOUS coll buffer
;			(unused if R8 = 0)
;
;	Implicit Inputs:
;
;	Volatile registers: R0, R1, R2, R3, R5
;
;	Implicit outputs:
;
;		All STATS buffers updated.
;

HOMOG_STATS:

	PUSHR	#^M<R9,R10>		; Save regs
	TSTL	R8			; Data block ptr present?
	BNEQ	20$			; Br if yes
;
; Special case: clear STATS buffers for this element
;

	MOVZBL	CDX$B_IDISCT(R7),R0	; Get number of STATS buffers
	MOVL	CDB$A_BUFFERS(R6),R1	; Get addr of first MBP ptr
10$:
	MOVL	(R1)+,R2		; Get MBP pointer
	CLRL	@MBP$A_STATS(R2)[R4]	; Clear STATS for this item & element
	SOBGTR	R0,10$			; Loop back for next STATS buffer
	BRB	40$			; Go to common return

20$:
	ADDL3	R10,R8,R2		; Point to 1st item in CURR data block
	ADDL3	R10,R11,R3		; Point to 1st item in PREV data block
	CLRL	R5			; Init index to MBP pointers

;
; Use FFS instruction to scan the item number bits in the CDX
; When an item number is found, compute the STATS value for the item.
;

	MOVL	#CDX$S_IBITS,R1		; Init bit field size
	CLRL	R0			; Init start position
30$:
	FFS	R0,R1,CDX$W_IBITS(R7),R9 ; Search for next item number
					; R9 contains item number if found
	BEQL	40$			; Branch if none found

	BSBB	STORE_STATS		; Go store stats for item in R9
					; NOTE -- this subrtn destroys R10

	INCL	R5			; Index to next sequential MBP ptr

	ADDL3	#1,R9,R0		; Compute next starting ...
	SUBL3	R0,#CDX$S_IBITS,R1	; ... position and field size
	BRB	30$			; Go search rest of bit string
40$:

	POPR	#^M<R9,R10>		; Restore regs
	RSB				; Return


STORE_STATS:

	MOVZBL	@CDB$A_ITMSTR(R6)[R9],R10 ; Get IDB item number
	MULL2	#IDB$K_ILENGTH,R10	; Compute index into IDB table
	MOVAB	PERFTABLE[R10],R10	; Address of IDB for this item
	CMPW	IDB$W_TYPE(R10),#COUNT_TYPE ; Is this item a count?
	BNEQ	10$			; No -- assume level type
	MOVL	@CDB$A_BUFFERS(R6)[R5],R10 ; Get MBP pointer
	SUBL3	(R3)[R9],(R2)[R9], -	; Compute STATS for this count item
		@MBP$A_STATS(R10)[R4]
	BGEQ	30$			; Br if difference OK
	BRB	20$			; Ctr was re-init'ed; treat like level
10$:
	MOVL	@CDB$A_BUFFERS(R6)[R5],R10 ; Get MBP pointer
20$:
	MOVL	(R2)[R9],@MBP$A_STATS(R10)[R4] ; Store STATS for this level item
30$:
	RSB				; Return

.END
