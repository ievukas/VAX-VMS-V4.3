 	.title	pli$read - pl1 runtime read record
	.ident	/1-003/					; Edit WHM1003

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; facility:
;
;	VAX/VMS PL1 runtime library.
; abstract:
;
;	This module contains the pl1 runtime routines for reading a record
;	from a file.
;
; author: c. spitz 18-jul-79
;
; modified:
;
;	Bill Matthews 08-Jan-1981
;	V1.4-02:
;		Restore fcb_l_attr into r3 before calling pli$$keyto_r8.
;
;
;	1-003	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;--


;+
; external definitions
;-

	$deffcb				;define file control block offsets
	$defdat				;define operand node data types
	$defpl1rtcons			;define pl1 runtime constants
	$fabdef				;define fab offsets
	$rabdef				;define rab offsets
	$rmsdef				;define rms error codes

;+
; local definitions
;-
$offset	4,positive,<-			;define arguments
	<fcbaddr,4>,-			;addr of fcb
	<readtype,4>,-			;read type
	<intoaddr,4>,-			;addr of into or set
	<intolen,2>,-			;length of into
	<intotyp,2>,-			;data type of into
	<keyaddr,4>,-			;addr of key or keyto
	<keylen,4>,-			;length of key
	<keytyp,4>,-			;data type of key
	<keynum,4>,-			;addr of key number
	<matchgtr,4>,-			;addr of match greater
	<matchgeq,4>,-			;addr of match greater equal
	<recidfrom,4>,-			;addr of record id from
	<recidto,4>,-			;addr of record id to
	<fxcaddr,4>,-			;addr of fixed control
	<fxclen,2>,-			;length of fixed control
	<fxctyp,2>,-			;data type of fixed control
	>				;

	rtshare				;sharable

	.page

;++
; pli$read -- read a record from a file
;
; functional description:
;
; This routine reads a record from a pl1 file.
;
; inputs:
;	(ap) - number of argruments
;		7 if no options
;		14 if any options
;	4(ap) - addr of fcb
;	8(ap) - read type (bit 0 = 0 for into, 1 for set; bit 1 = 1 for key
;			bit 2 = 1 for keyto
;		0 - into, no key, no keyto
;		1 - set, no key, no keyto
;		2 - into, key, no keyto
;		3 - set, key, no keyto
;		4 - into, no key, keyto
;		5 - set, no key, keyto
;	12(ap) - addr of into or set
;	16(ap) - length of into 
;	 18(ap) - data type of into 
;	20(ap) - addr of key or keyto
;	24(ap) - size/prec of key or keyto
;	28(ap) - data type of key or keyto
;	32(ap) - addr of key number 
;	36(ap) - addr of match greater 
;	40(ap) - addr of match greater or equal 
;	44(ap) - addr of record id from 
;	48(ap) - addr of record id to 
;	52(ap) - addr of fixed control
;	56(ap) - length of fixed control
;	 58(ap) - data type of fixed control
;
; outputs: 
;	fcb_l_attr
;		atr_m_delete, atr_m_currec, atr_m_virgin and atr_m_write are
;			set to false
;	fcb_q_rfa is set to the rfa of the record read
;
; side effects:
;	if the file is closed, it is opened with the record, input and seql
;		attributes.
;	the record is read into the target.
;--

	.entry	pli$read,^m<r2,r3,r4,r5,r6,r7,r8>
;
; check arguments. the read type must be >= 0 and <= 5. there must be
; either 7 or 14 arguments.
;
	cmpl	(ap),#7			;if not enough arguments
	bgeq	10$			;then
	clrl	r0			;indicate not enough parms
	brw	fail			;and fail
10$:	movl	fcbaddr(ap),r2		;get address of fcb
	movl	readtype(ap),r5		;get read type
	bgeq	30$			;if read type < 0
20$:	movl	#pli$_readop,r0		;then set invalid read options
	brw	fail			;and fail
30$:	cmpl	r5,#5			;if read option > 5
	bgtr	20$			;then fail
;
; open the file if necessary. the file will be opened with the
; record attribute. if the file does not have the update attribute,
; from its declaration, input is also specified for the open. if
; the file is not opened after calling open, an error is signaled.
;
	movl	fcb_l_attr(r2),r3	;get files attributes
	bbs	#atr_v_opened,r3,50$	;if file not opened
	pushl	#atr_m_record		;then request record
	bbs	#atr_v_update,r3,40$	;if update not specified
	bisl	#atr_m_input,(sp)	;then also request input
40$:	pushl	r2			;push address of fcb
	calls	#2,g^pli$open		;open the file
	movl	fcb_l_attr(r2),r3	;get the new attributes
	bbs	#atr_v_opened,r3,50$	;if file still not opened
	movl	#pli$_open,r0		;then set open failure
	brw	fail			;and fail
;
; make sure file has proper attributes. file must have record. if key
; or keyto specified, file must have keyed. file must not have output
; or delete specified.
;
50$:	bbs	#atr_v_record,r3,60$	;if file doesn't have record
	movl	#pli$_notrec,r0		;then set not record file
	brw	fail			;and fail
60$:	bbc	#atr_v_output,r3,70$	;if file has output
	movl	#pli$_readout,r0	;then set can't read output file
	brw	fail			;and fail
70$:	cmpl	r5,#2			;if key or keyto specified
	blss	80$			;then
	bbs	#atr_v_keyed,r3,80$	;if file not keyed
	movl	#pli$_notkeyd,r0	;then set not keyed file
	brw	fail			;and fail
;
; 'deallocate' buffer, process options
;
80$:	bicl	#atr_m_bfall,fcb_l_attr(r2) ;set buffer not allocated
	movab	fcb_b_rab(r2),r4	;get address of rab
	bicl	#<rab$m_kge!rab$m_kgt>,rab$l_rop(r4) ;clear match_gtr(_eql)
	cmpl	(ap),#7			;options passed?
	beql	100$			;if eql, then no
	cmpl	(ap),#14		;enuf options passed?
	beql	90$			;if eql, then yes
	movl	#pli$_invnumopt,r0	;set invalid options
	brw	fail			;and fail
90$:	movl	keynum(ap),r0		;get addr of key number option
	extzv	#1,#1,r5,r1		;set presence of key in r1
	jsb	g^pli$$keynum		;process key number
	movl	matchgtr(ap),r0		;get addr of match greater option
	jsb	g^pli$$matchgtr		;process match greater
	movl	matchgeq(ap),r0		;get addr of match greater or equal
	jsb	g^pli$$matchgeq		;process match greater or equal
	movl	recidfrom(ap),r0	;get addr of record id from option
	jsb	g^pli$$recidfrom	;process record id from option
	movl	recidto(ap),r0		;get addr of rfa to option
	jsb	g^pli$$valrecidto	;validate record id to
;
; process into option. copy the buffer size and address to the rab.
;
100$:	blbs	r5,130$			;if into specified
	movl	intoaddr(ap),rab$l_ubf(r4) ;then set read buffer address in rab
	pushl	intolen(ap)		;push size and data type
	calls	#1,g^pli$$bytesize	;calculate byte size
	blbs	r0,110$			;if invalid data type
	brw	fail			;then fail
110$:	movw	r1,rab$w_usz(r4)	;set byte size in rab
	cmpw	#<dat_k_structure+64>,intotyp(ap) ;bit sized structure?
	bneq	115$			;if neq, no, cont
	subl	r1,sp			;get room for temp on stack
	movl	sp,rab$l_ubf(r4)	;set addr of temp in rab
115$:	cmpw	#dat_k_char_var,intotyp(ap) ;if data type = char var
	bneq	170$			;then
	clrw	@intoaddr(ap)		;clear its length
	bbs	#atr_v_scalvar,r3,120$	;if scalar varying, read it all
	addl	#2,rab$l_ubf(r4)	;skip length field in address
	brb	170$			;continue	
120$:	addw	#2,rab$w_usz(r4)	;update size to include length of vcha
	brb	170$			;cont
;
; process pointer set. allocate a buffer if necessary. to avoid excessive
; overhead, we allocate it once per file opening. we 'deallocate' it by
; clearing atr_m_bfall. we actually free the storage when the file is
; closed.  the buffer size is the maximum record size from the fab, or the
; default maximum record size.
;
130$:	clrl	@intoaddr(ap)		;for pointer set, set pointer to 0
	tstl	fcb_l_buf(r2)		;buffer already allocated?
	bneq	160$			;if neq, yes, cont
140$:	pushl	fcb_l_buf_end(r2)	;push size
	pushl	sp			;push address of temp
	pushal	4(sp)			;push address of size
	calls	#2,g^lib$get_vm		;allocate the buffer
	blbs	r0,150$			;if allocation failed
	movl	#pli$_novirmem,r0	;then set no virt. mem.
	brw	fail			;and fail
150$:	popl	fcb_l_buf(r2)		;copy buffer address to fcb
160$:	movl	fcb_l_buf(r2),rab$l_ubf(r4) ;copy buffer address to rab
	movw	fcb_l_buf_end(r2),rab$w_usz(r4) ;set size in rab
;
; process key option.
;
170$:	bbc	#1,r5,190$		;if key specified
	movl	keyaddr(ap),r0		;then set key buffer address in rab
	bneq	180$			;if neq, cont
	movl	#pli$_nokey,r0		;set no key specified
	brw	fail			;and fail
180$:	movab	keyaddr(ap),r0		;point to key descr
	jsb	g^pli$$readkey_r6	;process key
	brb	240$			;continue
;
; sequential access is required if a key was not specified, or if the keyto
; option is present. make sure file has seql, and specify sequential access
; in the rab.
;
190$:	cmpl	(ap),#7			;options passed?
	bleq	200$			;if leq, no
	tstl	recidfrom(ap)		;record id from specified?
	bneq	240$			;if neq, yes, continue
200$:	bbs	#atr_v_seql,r3,210$	;if file doesn't have seql
	movl	#pli$_notsql,r0		;then set not seql file
	brw	fail			;and fail
210$:	bbc	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),220$ ;if block io
	clrl	rab$l_bkt(r2)		;set for seql access
	brb	240$			;cont
220$:	bbc	#atr_v_write,r3,230$	;if last oper was a write
	movq	fcb_q_rfa(r2),rab$w_rfa(r4) ;set correct rfa in rab
	beql	230$			;if eql, its a term so cont
	movb	#rab$c_rfa,rab$b_rac(r4) ;set for rfa access in rab
	clrl	r3			;set no key specified
	bsbw	pli$$smallget		;point to the record written
230$:	movb	#rab$c_seq,rab$b_rac(r4) ;set for seq access in rab
;
; get the record
;
240$:	clrl	rab$l_rhb(r4)		;assume no fixed control to
	cmpl	(ap),#7			;options passed?
	beql	250$			;if eql, no
	movab	fxcaddr(ap),r0		;get addr of fixed control descr
	jsb	g^pli$$fxctlto_r6	;process fixed control
250$:	movab	keyaddr(ap),r3		;set addr of key
	bbc	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),270$ ;if block io
	$read	r4			;do a read
260$:	blbs	r0,290$			;if lbs, cont
	movl	#pli$_rmsr,r0		;set error code in rab
	brw	fail			;and fail
270$:	$get	r4			;get the record
280$:	brb	260$			;cont
;
; if into is bit sized structure, copy from temp to target
;
290$:	movzwl	rab$w_rsz(r4),fcb_l_buf_pt(r2) ;save size of record read
	blbs	readtype(ap),310$	;if read set, cont
	cmpw	#<dat_k_structure+64>,intotyp(ap) ;bit sized structure?
	bneq	295$			;if neq, no, cont
	pushr	#^m<r2,r3,r4,r5>	;save regs
	subw3	#1,rab$w_usz(r4),r0	;get number of whole bytes
	movc3	r0,@rab$l_ubf(r4),@intoaddr(ap) ;copy whole bytes
	bicb	#^c7,intolen(ap)	;get number of bits left
	insv	(r1),#0,intolen(ap),(r3) ;copy remaining bits
	popr	#^m<r2,r3,r4,r5>	;restore regs
;
; set size of record read if char var
; 
295$:	cmpw	#dat_k_char_var,intotyp(ap) ;reading char var?
	bneq	300$			;if neq, no, cont
	bbs	#atr_v_scalvar,fcb_l_attr(r2),300$ ;if scalvar, length field was
					;read, cont
	movw	rab$w_rsz(r4),@intoaddr(ap) ;plug size read in length field
	brb	310$			;cont
300$:	cmpw	rab$w_rsz(r4),rab$w_usz(r4) ;was record and target same size?
	beql	310$			;if eql, then yes, cont
	pushl	r2			;set fcb addr
	pushl	#pli$_record		;set record error
	pushl	#<pli$_error&^c7>	;set error condition(warning)
	calls	#3,g^pli$io_error	;signal the condition and continue
;
; if fixed control to is a bit sized structure, copy from temp to target
;
310$:	cmpl	(ap),#7			;options passed?
	beql	319$			;if eql, no, cont
	tstl	fxcaddr(ap)		;fixed control specified?
	beql	319$			;if eql, no, cont
	cmpw	#<dat_k_structure+64>,fxctyp(ap) ;is it a bit sized structure?
	bneq	319$			;if neq, no, cont
	movzbl	<fcb_b_fab+fab$b_fsz>(r2),r0 ;get fixed control size
	beql	319$			;if eql, none, cont
	pushr	#^m<r2,r3,r4,r5>	;save regs
	decl	r0			;get number of whole bytes to copy
	movc3	r0,@rab$l_rhb(r4),@fxcaddr(ap) ;copy whole bytes
	bicb	#^c7,fxclen(ap)		;get number of bits remaining
	insv	(r1),#0,fxclen(ap),(r3)	;copy remaining bits
	popr	#^m<r2,r3,r4,r5>	;restore regs
;
; process keyto option.
;
319$:	bbc	#2,readtype(ap),320$	;if keyto specified
	movab	keyaddr(ap),r0		;set addr of keyto descr
	movl	fcb_l_attr(r2),r3	;load the attributes into r3 for routine call
	jsb	g^pli$$keyto_r8		;process keyto
;
; process pointer set
;
320$:	blbc	readtype(ap),330$	;if pointer set specified
	bisl	#atr_m_bfall,fcb_l_attr(r2) ;then mark buffer allocated
	movl	fcb_l_buf(r2),@intoaddr(ap) ;and plug pointer set
;
; successful completion
;
330$:	cmpl	(ap),#7			;options passed?
	bleq	340$			;if leq, no
	movl	recidto(ap),r0		;get addr of record id to option
	beql	340$			;if eql, not specified
	movq	rab$w_rfa(r4),(r0)	;set record id to
340$:	bicl	#<atr_m_delete!atr_m_currec! - ;clear delete and indicate 
		atr_m_virgin!atr_m_write>,fcb_l_attr(r2) ;current record
					;correct, not virgin, not write
	movq	rab$w_rfa(r4),fcb_q_rfa(r2) ;set correct rfa in fcb
	ret				;return

	.page

fail:	bneq	10$			;if not enough parms
	movl	#pli$_parm,r0		;then specify not enough parameters
	clrl	r2			;assume no fcb specified
	cmpl	(ap),#1			;if fcb specified
	blss	40$			;then
	movl	fcbaddr(ap),r2		;get address of fcb
10$:	cmpl	#pli$_rmsr,r0		;if error code in rms rab
	bneq	40$			;and
	cmpl	#rms$_eof,rab$l_sts(r4)	;if end of file
	bneq	20$			;then
	pushl	r2			;set fcb addr
	pushl	r0			;set error code
	pushl	#pli$_endfile		;set endfile condition
	brb	50$			;else
20$:	jsb	g^pli$$chk_keycnd	;check for key condition
40$:	pushl	r2			;set fcb addr
	pushl	r0			;set error code
	pushl	#pli$_error		;set error condition
50$:	calls	#3,g^pli$io_error	;signal the condition
	ret				;and return

;++
;pli$$smallget
; this routine saves the current user buffer address in the rab, allocates
; a 4 byte buffer on the stack and issues a $get. if the get fails because
; of buffer too small, or if it succeeds, the routine returns successfully.
; otherwise, the pl/i error condition is signaled, with the appropriate
; subcode. This routine is used to correctly position rms for keyed access.
; A $get is required because the $find operation does not affect rms's next
; record.
;
; inputs:
;	r3 - address of key descr for onkey
;	r4 - address of rab
; outputs:
;	none
; side effects:
;	the file is positioned to the requested rfa
;--

pli$$smallget::
	assume	<rab$w_usz+2> eq rab$w_rsz
	pushl	rab$w_usz(r4)		;save buffer sizes
	pushl	rab$l_ubf(r4)		;save user buffer addr
	pushl	rab$l_rbf(r4)		;save record buffer addr
	moval	-(sp),rab$l_ubf(r4)	;set legal buffer addr
	movw	#4,rab$w_usz(r4)	;set length of zero
	$get	r4			;get the record
	blbs	r0,10$			;if lbs, cont
	cmpl	r0,#rms$_rtb		;record too big?
	beql	10$			;if eql, yes, treat as success
	movl	#pli$_rmsr,r0		;set rms rab error
	brw	fail			;and fail
10$:	movab	4(sp),sp		;clean stack
	popl	rab$l_rbf(r4)		;restore record buffer addr
	popl	rab$l_ubf(r4)		;restore user buffer addr
	popl	rab$w_usz(r4)		;restore buffer sizes
	rsb				;return

	.end
