MODULE termdefs ( IDENT = 'V04-000',
		ADDRESSING_MODE (EXTERNAL = GENERAL)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  SET and SHOW
!
! ABSTRACT:
!
!	This module defines initialized storaged used by both SET TERMINAL
!	and SHOW TERMINAL.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, user mode
!
! AUTHOR:  Gerry Smith				21-Mar-1983
!
! Modified by:
!
!	V03-010 EMB113		Ellen M. Batbouta	13-Aug-1984
!		Fix the characteristic, SET_SPEED, to be set correctly.
!
!	V03-009 PLL000		Pamela L. Levesque	6-Jul-1984
!		Change placeholder terminal names from UNKNOWN1 - 8
!		to DUMMY1 - 8 to avoid ambiguity with type UNKNOWN.
!
!	V03-008 EMD0067		Ellen M. Dusseault	23-Mar-1984
!		Clear deccrt2 for all terminals except VT200_Series
!		terminals.
!
!	V03-007 EMD0060		Ellen M. Dusseault	08-Mar-1984
!		Remove the terminal characteristic, line editing,
!	 	from the table of characteristics to set with each
!		device.  The decision of whether to turn line editing
!		on will be left up to the system manager.  But line
!		editing will be cleared if dec_crt is cleared.
!
!	V03-006 EMD0055		Ellen M. Dusseault	28-Feb-1984
!		Add new device name, PRO_Series, to table of devices
!		along with its permanent characteristics.  New terminal
!		characteristic, DEC_CRT2 , is available.
!
!	V03-005	MMD0235		Meg Dumont,	4-Feb-1984  14:45
!		Add descriptors for SET TERM/PROTOCOL qualifiers. Needed
!		for support of switching terminal ports to and from
!		asynch ddcmp lines.
!
!	V03-004	MIR0300		MICHAEL I. ROSENBLUM	02-FEB-1984
!		PUT IN TERMINAL TYPES LOST IN THE TRANSLATION
!		TO BLISS, MAKE NOLINE EDITING THE DEFAULT ON NON-ANSICRT
!		TERMINALS.  CHANGE MACRO TO ALLOW A NAME DIFFERENT FROM THE 
!		TT DEVICE CODE.
!
!	V03-003	MIR0083		Michael I. Rosenblum	23-Aug-1983
!		Add syspwd qualifier.  Add in CT inquire sequence for
!		Version 1.5 of POS.
!
!	V03-002	MIR0071		Michael I. Rosenblum	22-Jul-1983
!		Change VT200_series terminals to be 8-bit terminals
!		Make holdscreen a user preference feature in all but
!		the block mode terminals.
!
!	V03-001	MIR0035		Michael I. Rosenblum	27-Apr-1983
!		Add new devdepend bits, parity=none, and negated
!		second device dependant definitions.
!
!--

!
! This module creates a number of global data structures.  The structures
! are used by both SET TERMINAL and SHOW TERMINAL.  The resulting literals
! and structures are described as follows:
!
!	TERM$_NUM     -	a GLOBAL LITERAL, telling how many terminal types
!			are in the tables.
!	TERM$_TABLE   -	a BLOCKVECTOR of TERM$_NUM blocks.  Each block
!			contains the terminal type, the default page width,
!			page length, and bits to set/clear in the two terminal
!			characteristics longwords.  In addition, if the terminal
!			is capable of identifying itself, the number of possible
!			response strings is included, as well as the address of
!			a table of descriptors of those response strings.
!	TERM$_NAME    - a VECTOR of TERM$_NUM descriptor addresses.  For each
!			terminal type described in TERM$_TABLE, there is a
!			string containing the terminal's name.
!	TERM$_TT_NUM  - a GLOBAL LITERAL, the number of keywords/bits which
!			are described in the first characteristics longword
!	TERM$_TT_KEY  - a VECTOR of descriptor addresses.  These are the
!			names for the keywords which SET/SHOW terminal 
!			understand, which go in the first char longword
!	TERM$_TT_BIT  - a VECTOR of bitmasks which correspond to the keywords
!			described in TERM$_TT_KEY
!	TERM$_TT2_NUM -	a GLOBAL LITERAL, the number of keywords/bits which
!			are described in the second characteristics longword
!	TERM$_TT2_KEY -	a VECTOR of descriptor addresses.  These are the
!			names for the keywords which SET/SHOW terminal 
!			understand, which go in the second char longword
!	TERM$_TT2_BIT - a VECTOR of bitmasks which correspond to the keywords
!			described in TERM$_TT_KEY
!	TERM$_xxxx    - where "xxxx" is the terminaly type/name.  numerous
!			GLOBAL LITERALs whose value corresponds to their 
!			position (index?) into the terminal tables
!

LIBRARY 'SYS$LIBRARY:LIB';		! VAX/VMS system definitions


COMPILETIME
    index = 0,
    count = 0;

MACRO
    tt$_dummy1 = 0%,
    tt$_dummy2 = 0%,
    tt$_dummy3 = 0%,
    tt$_dummy4 = 0%,
    tt$_dummy5 = 0%,
    tt$_dummy6 = 0%,
    tt$_dummy7 = 0%,
    tt$_dummy8 = 0%;

!
! Auxiliary macros invoked by the keyword macros
!
MACRO
!
! Create a bitmask
!
    make_mask (prefix) [item] = %NAME(prefix, item)%,

!
! Create a table pointing to terminal names
!
    resp_desc [string] = %ASCID %STRING(string)%,

!
! Figure out how many strings in a macro
!
    count_strings [string] = %ASSIGN(count, count+1)%,

!
! Create a specific bitmask, given the prefix and name
!
    bitmask (prefix) [key,item] = %NAME(prefix, '$m_', item)%,

!
! Another descriptor macro
!
    make_keyword [key, item] = %ASCID %STRING(key)%,

!
! Make a table of CLI keywords, and their corresponding TT(2)$M_name
! bitmask.  This macro will produce:
!	TERM$_TT[CLR/SET]_NUM - count of 1st longword bits to clear or set
!	TERM$_TT[CLR/SET]_NUM - count of 2nd longword bits to clear or set
!	TERM$_TT(2)[CLR/SET]_KEY - table of ASCID keywords
!	TERM$_TT(2)[CLR/SET]_BIT - corresponding bits to set or clear
!
    bit_table (prefix, type) =
	GLOBAL LITERAL %NAME('term$_', prefix, ,type, '_num') = (%LENGTH - 2)/2;
	GLOBAL %NAME('term$_', prefix, ,type, '_key') : VECTOR[(%LENGTH-2)/2]
		INITIAL(make_keyword(%REMAINING));
	GLOBAL %NAME('term$_', prefix, ,type, '_bit') : VECTOR[(%LENGTH-2)/2]
		INITIAL(bitmask(%EXPAND prefix, %REMAINING));%,

!
! Make a table of terminal request strings.  These are strings which
! terminals respond to with identifying strings.
!
    request_table (request) =
    	GLOBAL LITERAL term$_reqnum = %LENGTH;
    	GLOBAL term$_reqblk : VECTOR[term$_reqnum]
    			INITIAL(resp_desc(%EXPAND request, %REMAINING));%


    ;



!
! The following keyword macros create various structures which are accessible 
!to both SET TERMINAL and SHOW TERMINAL.
!

!
! TERM_INDEX defines the literals which are used as an index to a
! bitvector, to define each terminal type.
!
KEYWORDMACRO
    term_index (type, ascnam, length, width, set1, clear1, set2, clear2, resp) =
    		GLOBAL LITERAL %NAME('term$_', type) = %NUMBER(index);
    		%ASSIGN(index, index+1)%;

!
! NAME_BLOCK creates a descriptor for the name of a terminal
!
KEYWORDMACRO
    name_block (type,
		ascnam, 
		length=0,
		width=0, 
		set1, 
		clear1, 
		set2, 
		clear2,
		resp) =
	%if %NULL(ascnam)
	%THEN %ASCID %STRING(type)
	%ELSE %ASCID %STRING(ascnam)
	%FI
	%;

!
! RESP_BLOCK creates a vector of terminal response code descriptors,
! as well as a literal that tells how many different codes there are,
! for a specified terminal.
!
KEYWORDMACRO 
    resp_block (type,
		ascnam, 
		length=0,
		width=0, 
		set1, 
		clear1, 
		set2, 
		clear2,
		resp) =

    %IF NOT %NULL(resp)
    %THEN
	%ASSIGN(count, 0)
    	count_strings(%REMOVE(resp))
	LITERAL %NAME(type, '_num') = count;
	OWN %NAME(type, '_block') : VECTOR[count]
				    INITIAL(resp_desc(%REMOVE(resp)));
    %FI
    %;

!
! TERM_BLOCK creates a blockvector table.  Each entry in the table consists
! of a block that looks like this :
!
!	____________________________________
!	|   page width   |  type  |        |
!	+----------------------------------+
!	| length | bits to set in 1st l.w. |
!	+----------------------------------+
!	|    bits to set in 2nd l.w.       |
!	+----------------------------------+
!	|     bits to clear in 1st l.w.    |
!	+----------------------------------+
!	|    bits to clear in 2nd l.w.     |
!	+----------------------------------+
!	|    number of response strings    |
!	+----------------------------------+
!	|     address of response string   |
!	------------------------------------
!
KEYWORDMACRO
    term_block (type,
		ascnam, 
		length=0,
		width=0, 
		set1, 
		clear1, 
		set2, 
		clear2,
		resp) =

    (width^16) OR %NAME('tt$_', type)^8,

    %IF %NULL(set1)
    %THEN length^24 OR tt$m_wrap or tt$m_ttsync
    %ELSE length^24 OR tt$m_wrap or tt$m_ttsync
    		    OR make_mask(tt$m_, %REMOVE(set1))
    %FI,

    %IF %NULL(set2)
    %THEN 0
    %ELSE 0 OR make_mask(tt2$m_, %REMOVE(set2))
    %FI,

    %IF %NULL(clear1)
    %THEN tt$m_lffill OR tt$m_scope OR tt$m_holdscreen OR 
       	  tt$m_readsync OR
    	  tt$m_notypeahd OR tt$m_mechtab OR tt$m_ttsync OR
    	  tt$m_wrap OR tt$m_mechform
    %ELSE tt$m_lffill OR tt$m_scope OR tt$m_holdscreen OR 
       	  tt$m_readsync OR
    	  tt$m_notypeahd OR tt$m_mechtab OR tt$m_ttsync OR
    	  tt$m_wrap OR tt$m_mechform OR 
    	  make_mask(tt$m_, %REMOVE(clear1))
    %FI,

    %IF %NULL(clear2)
    %THEN tt2$m_sixel OR tt2$m_printer OR tt2$m_drcs 
    %ELSE tt2$m_sixel OR tt2$m_printer OR tt2$m_drcs OR 
	  make_mask(tt2$m_, %REMOVE(clear2))
    %FI,

    %IF %NULL(resp)
    %THEN 0,0
    %ELSE %NAME(type, '_num'), %NAME(type, '_block')
    %FI
    %;

MACRO
!
! Process one terminal, making one NAME_BLOCK entry
!
    make_name_block [one_terminal] =
    	name_block(%REMOVE(one_terminal))%,

!
! Process one terminal, making one TERM_BLOCK block
!
    make_term_block [one_terminal] =
	term_block(%REMOVE(one_terminal))%,

!
! Process one terminal, making one TERM_INDEX literal
!
    make_term_index [one_terminal] =
    	term_index(%REMOVE(one_terminal))%,

!
! Process one terminal, making a response block
!
    make_resp_block [one_terminal] =
	resp_block(%REMOVE(one_terminal))%,

! 
! Here's the master macro, that calls all the other ones.
!
    define_types (list) =
    	%ASSIGN(index, 0)
    	make_term_index(%EXPAND list, %REMAINING)
	make_resp_block(%EXPAND list, %REMAINING)
	GLOBAL LITERAL term$_num = %LENGTH;
    	GLOBAL
	    term$_name : VECTOR[term$_num]
	    		INITIAL(make_name_block(%EXPAND list, %REMAINING)),
	    term$_table : BLOCKVECTOR[term$_num, 28, BYTE]
			INITIAL(make_term_block(%EXPAND list, %REMAINING)); % ;


!
! Define the terminal types.  NOTE THAT THE FIRST 15 TERMINAL TYPES ARE IN
! ORDER, AND SHOULD NOT BE CHANGED.
!
define_types(

	    (type = la36,	
	     width = 132,
	     length = 66,
	     set1 = lower,
	     clear2 = (deccrt2, deccrt, ansicrt, regis, block, avo, edit, editing)),

	    (type = la120,
	     width = 132,
	     length = 66,
	     set1 = (mechform, lower,  mechtab),
	     clear2 = (deccrt2, deccrt, ansicrt, regis, block, avo, edit, editing),
	     resp = '[?2;'),

	    (type = vt05,
	     width = 72,
	     length = 20,
	     set1 = (scope, lffill, mechtab),
	     clear1 = (holdscreen, lower),
	     clear2 = (deccrt2, deccrt, ansicrt, regis, block, avo, edit, editing)),

	    (type = vt52,
	     width = 80,
	     length = 24,
	     set1 = (lower, scope, mechtab),
	     clear1 = (holdscreen, mechform),
	     clear2 = (deccrt2, deccrt, ansicrt, regis, block, avo, edit, editing),
	     resp = ('/K', '/L', '/Z', '/A', '/H', '/J', '/B', '/J', '/M', '/Q', '/R', '/S', '/T')),

	    (type = vt55,
	     width = 80,
	     length = 24,
	     set1 = (mechtab,scope,lower),
	     clear1 =(holdscreen,mechform),
	     clear2 = (deccrt2, deccrt, ansicrt,regis,block,avo,edit, editing)),

	    (type = vt100,
	     width = 80,
	     length = 24,
	     set1 = (mechtab, scope, lower),
	     clear1 = (mechform),
	     set2 = (deccrt, ansicrt, avo),
	     clear2 = (deccrt2, regis, block, edit),
	     resp = '[?1;'),

	    (type = ft1),
	    (type = ft2),
	    (type = ft3),
	    (type = ft4),
	    (type = ft5),
	    (type = ft6),
	    (type = ft7),
	    (type = ft8),

	    (type = unknown,
	     clear2 = (deccrt2, deccrt,ansicrt,regis,block,avo,edit, editing)),

	    (type = la34,
	     width = 132,
	     length = 66,
	     set1 = (mechform, lower),
	     clear1 = mechtab,
	     clear2 = (deccrt2, deccrt, ansicrt, regis, block, avo, edit, editing),
	     resp = '[?3;'),

	    (type = la38,
	     width = 132,
	     length = 66,
	     set1 = (mechform, lower),
	     clear1 = mechtab,
	     clear2 = (deccrt2, deccrt, ansicrt, regis, block, avo, edit, editing)),

	    (type = la100,
	     width = 80,
	     length = 66,
	     set1 = (mechform, lower, mechtab),
	     clear2 = (deccrt2, deccrt, ansicrt, regis, block, avo, edit, editing),
	     resp = '[?10;'),

	    (type = la12,
	     width = 80,
	     length = 66,
	     set1 = (mechform, lower, mechtab),
	     clear2 = (deccrt2, deccrt, ansicrt, regis, block, avo, edit, editing),
	     resp = '[?15;'),

	    (type = la24,
	     width = 132,
	     length = 66,
	     set1 = (mechform, lower, mechtab),
	     clear2 = (deccrt2, deccrt, ansicrt, regis, block, avo, edit, editing)),

	    (type = TQ_BTS,
	     ascnam = BTS,
	     width = 80,
	     length = 23,
	     set1 = (mechform, lower),
	     clear2 = (deccrt2, deccrt, ansicrt, regis, block, avo, edit, editing)),

	    (type = lqp02,
	     width = 132,
	     length = 66,
	     set1 = (mechform, lower, mechtab),
	     clear2 = (deccrt2, deccrt, ansicrt, regis, block, avo, edit, editing),
	     resp = '[?13;'),

	    (type = vk100,
	     width = 84,
	     length = 24,
	     set1 = (mechtab, scope, lower),
	     clear1 = (mechform),
	     set2 = ansicrt,
	     clear2 = (deccrt2, block, deccrt, avo, edit, regis, editing),
	     resp = '[?5;'),

	    (type = vt101,
	     width = 80,
	     length = 24,
	     set1 = (mechtab, scope, lower),
	     clear1 = (mechform),
	     set2 = (deccrt, ansicrt),
	     clear2 = (deccrt2, regis, block, avo, edit),
	     resp = '[?1;'),

	    (type = vt102,
	     width = 80,
	     length = 24,
	     set1 = (mechtab, scope, lower),
	     clear1 = (mechform),
	     set2 = (deccrt, ansicrt, avo, edit, printer),
	     clear2 = (deccrt2, regis, block),
	     resp = ('[?6;','[?61;','?61;')),

	    (type = vt105,
	     width = 80,
	     length = 24,
	     set1 = (mechtab, scope, lower),
	     clear1 = (mechform),
	     set2 = (deccrt, ansicrt),
	     clear2 = (deccrt2, regis, block),
	     resp = '[?1;'),

	    (type = vt125,
	     width = 80,
	     length = 24,
	     set1 = (mechtab, scope, lower),
	     clear1 =(hostsync, mechform),
	     set2 = (deccrt, ansicrt, regis, avo, printer, sixel),
	     clear2 = (block, deccrt2, edit),
	     resp = '[?12;'),

	    (type = vt131,
	     width = 80,
	     length = 24,
	     set1 = (hostsync, mechtab, scope, lower),
	     clear1 = mechform, 
	     set2 = (deccrt, ansicrt, block, edit, avo),
	     clear2 = (deccrt2, regis),
	     resp = '[?7;'),

	    (type = vt132,
	     width = 80,
	     length = 24,
	     set1 = (hostsync, mechtab, scope, lower),
	     clear1 = mechform,
	     set2 = (deccrt, ansicrt, block, avo, edit),
	     clear2 = ( deccrt2, regis),
	     resp = '[?4;'),

	    (type = vt173,
	     width = 80,
	     length = 16,
	     set1 = (hostsync, mechtab, scope, lower),
	     clear1 = (mechform),
	     set2 = block,
	     clear2 = (deccrt2, deccrt, ansicrt, regis, editing),
	     resp = ';'),

	    (type = VT200_Series,
	     width = 80,
	     length = 24,
	     set1 = (mechtab, scope, lower, eightbit),
	     clear1 = (mechform),
	     set2 = (deccrt2, deccrt, ansicrt, avo, edit),
	     clear2 = (fallback, regis, block),
	     resp = ('[?62;','?62;')),

	    (type = PRO_Series,
	     width = 80,
	     length = 24,
	     set1 = (mechtab, scope, lower),
	     clear1 = (mechform),
	     set2 = (deccrt, ansicrt, avo, edit, printer),
	     clear2 = (deccrt2, fallback, block),
	     resp = ('231;','?23;','[?23;','[?22;','?22;')),

!
! Add some more dummy terminal types, in the event that other terminals
! must be supported between releases.
!
!
	    (type = dummy1),
	    (type = dummy2),
	    (type = dummy3),
	    (type = dummy4),
	    (type = dummy5),
	    (type = dummy6),
	    (type = dummy7),
	    (type = dummy8)
	    );


!
! Define the keywords and the corresponding bits in the
! two device-dependent longwords.
!
bit_table(tt, set,
	eight_bit,	eightbit,
	escape,		escape,
	form,		mechform,
	halfdup,	halfdup,
	hold_screen,	holdscreen,
	hostsync,	hostsync,
	lowercase,	lower,
	modem,		modem,
	passall,	passall,
	readsync,	readsync,
	scope,		scope,
	scribe,		script,
	tab,		mechtab,
	ttsync,		ttsync,
	wrap,		wrap);

bit_table(tt, clr,
	uppercase,	lower,			! qualifiers that have
	hardcopy,	scope,			!  duplicate sets should be
	interactive,	passall,		! in the beginning of this list
	fulldup,	halfdup,		! if you add 1 you must change the count
	broadcast,	nobrdcst,		! in LOG_RESULTS
	echo,		noecho,
	typeahead,	notypeahd
);

bit_table(tt2, set,
	advanced_video,	avo,
	altypeahd,	altypeahd,
	ansi_crt,	ansicrt,
	application_keypad,app_keypad,
	autobaud,	autobaud,
	block_mode,	block,
	brdcstmbx,	brdcstmbx,
	disconnect,	disconnect,
	dialup,		dialup,
	edit,		edit,
	fallback,	fallback,
	hangup,		hangup,
    	line_edit,	editing,
	insert_editing,	insert,
	local_echo,	localecho,
	printer_port,	printer,
	pasthru,	pasthru,
	regis,		regis,
	secure_server,	secure,
	sixel,		sixel,
	soft_characters,drcs,
	syspassword,	syspwd,
	xon,		xon,
    	dma,		dma) ;
bit_table(tt2, clr,			! SEE TT bit table for importaint information
	numeric_keypad,	app_keypad,
	overstrike,	insert,
    	set_speed,	setspeed);

!
! List all the request strings that terminals might respond to
! first is for vt52 style
! second is the VT100 style
! third is the vt200 style
!
request_table ('Z',
    	       '[c',
		'[0c');

!
! Create a table of all terminal speeds
!
GLOBAL LITERAL term$_spdnum = 17;
GLOBAL term$_spdblk : VECTOR[17]
    	INITIAL(%ASCID '0',    %ASCID '50',   %ASCID '75', 
    		%ASCID '110',  %ASCID '134',  %ASCID '150',
    		%ASCID '300',  %ASCID '600',  %ASCID '1200',
    		%ASCID '1800', %ASCID '2000', %ASCID '2400',
    		%ASCID '3600', %ASCID '4800', %ASCID '7200',
    		%ASCID '9600', %ASCID '19200'),
!
! Declare the even/odd Descriptors
!
    	term$_even : VECTOR[2]
		    INITIAL(%CHARCOUNT ('EVEN'),
		    	    UPLIT BYTE ('EVEN')),
    	term$_odd  : VECTOR[2]
		    INITIAL(%CHARCOUNT ('ODD'),
		    	    UPLIT BYTE ('ODD')),
    	term$_none : VECTOR[2]
		    INITIAL(%CHARCOUNT ('NONE'),
		    	    UPLIT BYTE ('NONE')),

! Declare the protocol descriptors

    	protocol$_none : VECTOR[2]
		    INITIAL(%CHARCOUNT ('NONE'),
		    	    UPLIT BYTE ('NONE')),
    	protocol$_ddcmp : VECTOR[2]
		    INITIAL(%CHARCOUNT ('DDCMP'),
		    	    UPLIT BYTE ('DDCMP'));

END 
ELUDOM
