MODULE create ( IDENT = 'V04-000',
    		ADDRESSING_MODE(EXTERNAL=GENERAL),
		MAIN = create) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  CREATE Command
!
! ABSTRACT:
!
!	This utility creates files and directories.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Greg Robert, Nov 1979
!
! Modified by:
!
!	V03-005	LMP0150		L. Mark Pilant,		12-Sep-1983  13:58
!		Obtain the protection of the newly created file to apply
!		the /PROTECTION qualifier value correctly.
!
!	V03-004	LMP0140		L. Mark Pilant,		19-Aug-1983  9:37
!		Allow handling of alphanumeric UICs
!
!	V03-003	LMP0133		L. Mark Pilant,		4-Aug-1983  15:10
!		Only set the protection if explicitly requested via the
!		/protection qualifier.
!
!	V03-002	SHZ0002		Stephen H. Zalewski	07-Jul-1983
!		Rewrote the way that the /PROTECTION parsing was done.
!
!	V03-001	SHZ0001		Stephen H. Zalewski	16-May-1983
!		Modified CREATE to use the new CLI.
!
!--

LIBRARY 'SYS$LIBRARY:STARLET.L32';	! VAX/VMS common definitions
LIBRARY 'SYS$LIBRARY:TPAMAC.L32';	! TPARSE macros


MACRO
!
!	Macro to signal a condition to the handler
!

    write_message(msg) =
	SIGNAL(msg			! Pass the message code
	%IF %LENGTH GTR 1		! and if more than 1 arg
	    %THEN ,%REMAINING %FI) %;	! then the rest too


!
!	Define message codes.
!

$shr_msgdef(msg,145,global,
	(openin,error),		! Unable to open or connect to SYS$INPUT
	(readerr,error),	! error while reading SYS$INPUT
	(closein,error),	! Unable to close SYS$INPUT
	(openout,error),	! Unable to create or connect to user named output file
	(writeerr,error),	! error while writing output file
	(closeout,error),	! Unable to close output file
	(created,info),		! File or directory created
	(exists,info),		! File or directory already exists
	(syntax,severe),	! Parse failure
	(dirnotcre,error),	! Directory not created
	(badvalue,error),	! Bad value given for /version or /volume
	);

!
!	EQUATED SYMBOLS
!

LITERAL
    TRUE	= 1,			! BOOLEAN TRUE
    FALSE	= 0;			! BOOLEAN FALSE



!
!	Define CLI qualifier bit flag numbers (see qualifier$flags)
!

LITERAL
    $EQULST (QUAL_,,0,1,
	(directory,),		! /DIRECTORY
	(owner_uic,),		! /OWNER_UIC
	(protection,),		! /PROTECTION
	(version_limit,),	! /VERSION_LIMIT
	(volume,),		! /VOLUME
	(log,));		! /LOG


!
! Table of contents
!

FORWARD ROUTINE
    create,				! Main create routine
    get_output_file,			! Get next output file
    create_dir,				! Create directory initialization
    create_file,			! Create file initialization
    copy_in_out,			! Copy SYS$INPUT to output file
    log_results,			! Inform user of results
    get_createqls,			! Get command qualifiers
    owner_uic_parse,			! Parse /OWNER_UIC value
    parse_class,			! Parse protection of one use class
    handler,				! Condition handler
    fab_error,				! FAB error handler
    rab_error,				! RAB error handler
    create_error,			! LIB$CREATE_DIR error handler
    vm_error;				! LIB$(GET or FREE)_VM err hdlr


EXTERNAL ROUTINE
    lib$tparse,				! Parses qualifier values
    lib$get_vm,				! Gets virtual memory
    lib$free_vm,			! Release virtual memory
    lib$create_dir,			! Creates directory entries
    lib$cvt_dtb,			! Convert decimal value to binary
    cli$get_value,			! Get qualifier from CLI
    cli$present,			! Determine if qualifier is present
    sys$setdfprot;			! Read/set default file protection


!
! Storage definitions
!

OWN
    qualifier$flags	: BITVECTOR[32] ! Qualifier presence bitmap
	INITIAL(0),			! Initially clear
    create$owner_uic	: INITIAL (0),	! Contains /OWNER_UIC value
    create$protection	: VECTOR[2,WORD]
			  INITIAL (0),	! Contains /PROTECTION value
    create$version_limit: INITIAL (0),	! Contains /VERSION_LIMIT value
    create$volume	: INITIAL (0),	! Contains /VOLUME value

    tparse_block	: $BBLOCK [tpa$k_length0]	! TPARSE
			  INITIAL (tpa$k_count0,	!  parameter
					tpa$m_blanks OR !  block
					tpa$m_abbrev),

    worst_error: $BBLOCK[4]		! Worst error encountered
		INITIAL(ss$_normal);	! Initially normal status

!
! Define RMS blocks
!

OWN
    input_nam_result:			! Resultant input name
	VECTOR [nam$c_maxrss,BYTE],

    input_nam_expanded:			! Expanded input name
	VECTOR [nam$c_maxrss,BYTE],

    input_nam:	$NAM(			! File name block
	ESA = input_nam_expanded,	! File name before open
	ESS = nam$c_maxrss,
	RSA = input_nam_result,		! File name after open
	RSS = nam$c_maxrss),

    input_fab:	$FAB(			! FAB for input
	CTX = msg$_openin,		! Initialize error message
	NAM = input_nam,		! Address of name block
	FNM = 'SYS$INPUT',		! File name
	FAC = GET),			! Open for input

    input_rab: $RAB(			! RAB for input
	CTX = msg$_readerr,		! Specify error message
	FAB = input_fab),

    output_nam_result:			! Resultant output name
	VECTOR [nam$c_maxrss,BYTE],

    output_nam_expanded:		! Expanded output name
	VECTOR [nam$c_maxrss,BYTE],

    output_rlf:	$NAM(			! Related file name block
	RSA = output_nam_expanded,	! File name of last parse
	RSS = nam$c_maxrss),

    output_nam:	$NAM(			! File name block
	RLF = output_rlf,		! Related file name block
	ESA = output_nam_expanded,	! File name before open
	ESS = nam$c_maxrss,
	RSA = output_nam_result,	! File name after open
	RSS = nam$c_maxrss),

    output_xabpro: $XABPRO(),		! XAB for protection and uic

    output_xaball: $XABALL(		! XAB for volume specification
	ALN = LBN,			! Allocate by logical block #
	AOP = HRD,			! Report allocation errors
	NXT = output_xabpro),		! Chain to next XAB

    output_fab:	$FAB(			! FAB for output
	CTX = msg$_openout,		! Initialize error message
	FOP = SQO,			! Sequential access only
	NAM = output_nam,		! Address of name block
	RAT = CR),			! Define file as line oriented

    output_rab: $RAB(			! RAB for output
	CTX = msg$_writeerr,		! Specify error message
	FAB = output_fab);


!
! Parse UIC string and store binary value.
!

$INIT_STATE (OWNER_UIC_STB, OWNER_UIC_KTB);

$STATE	(,
	('PARENT'),
	(TPA$_IDENT,,,,create$owner_uic)
	);

$STATE	(end_owner_uic,
	(TPA$_EOS, TPA$_EXIT)
	);

ROUTINE create =			! CREATE Main routine

!++
! Functional description
!
!	This is the main control routine for the create command.
!	It is called from the command language interpreter to 
!	create files and directories.
!
! Calling sequence
!
!	create() from the Command Language Interpreter
!
! Input parameters
!
!	None
!
! Output parameters
!
!	None
!
! Routine value
!
!	Worst error encountered during processing or SS$_NORMAL.
!
!----

BEGIN

LOCAL
    status;					! Status return


ENABLE handler;					! Set condition handler

get_createqls();				! Get command qualifiers


!
! Begin the main loop of the program. Process each file in the input list
!

WHILE get_output_file () DO			! For each output file
    BEGIN
    IF .qualifier$flags[qual_directory]		! If /DIRECTORY specified
	THEN status = create_dir ()		!    then create a directory
	ELSE status = create_file ();		!    else create a file.

    IF (.qualifier$flags[qual_log] AND		! If logging requested
	.status)				!    and status is ok
	THEN log_results (output_fab);		!    then call the logger.
    END;					! Loop until WHILE is false

RETURN .worst_error;				! Exit with worst error encountered
END;

ROUTINE create_dir =

!----
! Functional Description
!
!	Parse the file name and invoke the directory creation subroutine.
!
! Input Parameters
!
!	none
!
! Output Parameters
!
!	Results of action returned (already signaled).
!
!
!----

BEGIN

LOCAL
    p_owner_uic,			! Parameters to LIB$CREATE_DIR
    p_prot_enable,
    p_prot_value,
    p_max_versions,
    p_rvn,
    status,				! Catch all status return
    desc: VECTOR [2];			! Temporary work descriptor


!
! Parse the file name.  This is done to remove and passwords from
! the file name in case it is used in an error or logging message.
!

$PARSE (FAB=output_fab);	! Do RMS PARSE


!
! RMS parse's fail if the directory does not exists -- so instead
! of checking returned status look for an expanded name string.
! If name was so bad that no expansion resulted then inform the user.
!

IF .output_nam [nam$b_esl] EQL 0	! If no expanded name was obtained
THEN BEGIN
	fab_error (output_fab);		!    then report the error
	return (false);			!    and exit with status
     END;


!
! The parse results in a trailing ".;" which must be stripped
! off before calling LIB$CREATE_DIR.  But if the user supplied a
! filename, extension, or version then pass it on -- it will trigger
! an error when the directory create is attempted.
!

IF .output_nam [nam$b_name] NEQU 0	! If user supplied a filename
OR .output_nam [nam$b_type] GTRU 1	!    or a type
OR .output_nam [nam$b_ver] GTRU 1	!    or a version
THEN 0					! then just continue
ELSE					! else strip off trailin g".;"
   output_nam [nam$b_esl] = .output_nam [nam$b_esl] - 2;


!
! Create a temporary descriptor of the expanded name.
!

desc[0] =.output_nam[nam$b_esl];	! Create descriptor of parsed name
desc[1] =.output_nam[nam$l_esa];	!  using length and address from $NAM

!
! Invoke library create directory routine passing user supplied parameters.
!

p_owner_uic = p_prot_enable = p_prot_value = p_max_versions = p_rvn = 0;

IF .qualifier$flags[qual_owner_uic]
THEN
    p_owner_uic = create$owner_uic;

IF .qualifier$flags[qual_protection]
THEN
    BEGIN
    p_prot_enable = create$protection[1];
    p_prot_value = create$protection[0];
    END;

IF .qualifier$flags[qual_version_limit]
THEN
    p_max_versions = create$version_limit;

IF .qualifier$flags[qual_volume]
THEN
    p_rvn = create$volume;

status = lib$create_dir (		! Call library create/dir routine
	desc,				!  -directory name
	.p_owner_uic,			!  -owner UIC
	.p_prot_enable, .p_prot_value,	!  -directory protection
	.p_max_versions,		!  -default version limit
	.p_rvn);			!  -volume

IF NOT .status 				! Signal an error if necessary.
    THEN create_error (desc, .status);

!
! If directory already existed, print informational message and
! suppress logging.
!

IF .status EQL SS$_NORMAL		! If no directories created
THEN BEGIN
     write_message(msg$_exists,1,desc);	! Inform the user
     RETURN false;			! Suppress logging
     END;

RETURN .status;
END;

ROUTINE create_file =

!----
! Functional Description
!
!	Create the output file and invoke the copy subroutine.
!
! Input Parameters
!
!	none
!
! Output Parameters
!
!	Results of the operation are returned (already signaled).
!
!----

BEGIN

LOCAL
    default_prot:	WORD,		! Process default file protection
    status;				! Catch all status return


output_fab[fab$l_ctx] = msg$_openout;	! Reinitialize error message

!
! Load the XAB with any user specified values for file ownership
! ([group,member]) or protection (System,Group,Owner,World: R W E D),
! or volume (relative volume number).
!

output_xabpro[xab$l_uic] = .create$owner_uic;	! Load owner UIC

output_xabpro[xab$w_pro] = -1;			! Default protection

output_xaball[xab$w_vol] = .create$volume;	! Load volume
output_fab[fab$l_xab]	 = output_xaball;	! Link FAB to XAB


status = $CREATE (FAB=output_fab);		! Create the output file.

!
! If the $CREATE was successful, call copy_in_out to copy SYS$INPUT 
! to the user specified output file.
!

IF .status					! If create worked 
    THEN
	BEGIN
	status = $DISPLAY (FAB=output_fab);
	IF NOT .status THEN fab_error (output_fab);
	if .qualifier$flags[qual_protection]
	THEN output_xabpro[xab$w_pro] =
		 .output_xabpro[xab$w_pro] AND NOT .create$protection[1] OR
		 .create$protection[0] AND .create$protection[1];
	status = copy_in_out ();		!  then call copy
	END
    ELSE fab_error(output_fab);			!  else report an error.


RETURN .status;
END;


ROUTINE get_output_file =

!----
! Functional Description
!
!	Obtain the next file specification from the output file
!	list.
!
! Input Parameters
!
!	none
!
! Output Parameters
!
!	TRUE returned if file name was produced
!	FALSE returned if command line exhausted
!
!	output_fab = FAB initialized for current file name
!	output_nam = NAM block associated with FAB
!
!----

BEGIN

LOCAL
    output_desc : $BBLOCK[dsc$c_s_bln];

CH$FILL(0,dsc$c_s_bln,output_desc);		! Make descriptor dynamic
output_desc[dsc$b_class] = dsc$k_class_d;

IF NOT cli$get_value($descriptor('OUTPUT'), output_desc)
    THEN RETURN false;


!
!	Initialize the FAB for initial parsing
!

output_rlf[nam$b_rsl] = .output_nam[nam$b_esl];
output_fab[fab$l_fna] = .output_desc[dsc$a_pointer];
output_fab[fab$b_fns] = .output_desc[dsc$w_length];

RETURN true;
END;

ROUTINE copy_in_out: =

!----
!
! Functional description
!
!	This routine is called from the main loop to copy from
!	from SYS$INPUT to the created file
!
!
! Input parameters
!
!	None
!
! Output parameters
!
!	First error encountered, or success is RETURNed
!
!----

BEGIN

LOCAL
    bytes_needed,			! Buffer size needed
    status;				! Status return value

IF NOT (status =
$CONNECT (RAB=output_rab,ERR=rab_error)	!Connect to output file
) THEN return (.status);

input_fab[fab$l_ctx] = msg$_openin;	! Assign the error message

IF NOT (status =
$OPEN (FAB=input_fab,ERR=fab_error)	! Open SYS$INPUT
) THEN return (.status);

!
! Use the maximum record size (MRS) returned by the $OPEN to
! request a buffer from virtual memory and store the returned
! memory address directly in the input RAB.  If MRS = 0 (signifying
! an undefined record size) then use 512.
!

bytes_needed =				! Define the byte count
	(IF NOT				! (IF valid MRS was returned
		(.input_fab[fab$w_mrs] EQL 0)
	THEN .input_fab[fab$w_mrs]	!   then use it
	ELSE 512);			! Else use the default


!
! Now request 'bytes_needed' bytes from VMS.  Have VMS store the
! address of the granted memory directly in the 'user buffer'
! address field of the RAB
!

IF NOT
	(status = lib$get_vm (		! Request virtual memory of
		bytes_needed,		!  -this many bytes
		input_rab[rab$l_ubf]))	!  -beginning at this address
THEN
		BEGIN			! If allocation fails
		vm_error(.status);	!  signal the user
		return (.status);	! Return if not fatal
		END;

!
! Now define the size of the user buffer (usz) equal to
! bytes_needed
!

input_rab[rab$w_usz] = .bytes_needed;	! usz <-- bytes_needed

!
! Now that the necessary buffer space is available CONNECT to the
! input file
!

IF NOT (status =
$CONNECT (RAB=input_rab,ERR=rab_error)	! Connect to SYS$INPUT
) THEN return (.status);

!
! This is the main copy loop.  As long as $GET is successful (that
! is we read a record) issue $PUT's.  Use the buffer address and
! record size returned by the RMS GET call to fill in the buffer
! address and size fields of the RAB used for the $PUT.
!

WHILE status =
	$GET (RAB=input_rab,ERR=rab_error)	     ! Read a record
   DO BEGIN
      output_rab[rab$l_rbf] = .input_rab[rab$l_rbf]; ! Map input buffer
      output_rab[rab$w_rsz] = .input_rab[rab$w_rsz]; ! Map input size
      $PUT (RAB=output_rab,ERR=rab_error);	     ! Write a record
      END;

IF NOT (.status EQL rms$_eof)		! If any status other than
THEN	return (.status);		!  expected eof, return it

!
! The file is now copied.  Assign the appropriate error messages
! (which are passed to the error routines via the 'user context'
! field (CTX) of the FAB) and $CLOSE both files.
!

input_fab[fab$l_ctx] = msg$_closein;	! Assign the error message
output_fab[fab$l_ctx] = msg$_closeout;	! Assign the error message

IF NOT (status =
$CLOSE (FAB=input_fab,ERR=fab_error)	! Close SYS$INPUT
) THEN return (.status);

!
! NOTE: If a file is created with different UIC via the /OWNER qualifier
! and it is on an ODS-1 structure, then you cannot change the file's
! attributes if an "owner" protection violation would occur.  In other
! words, as soon as you "$CREATE" it, you relinquish control to it.
! Therefore we disable XAB processing since it may call for illegal
! protection changes or some other illegal activity
!

!output_fab[fab$l_xab] = 0;		! Delink attribute blocks

IF NOT (status =
$CLOSE (FAB=output_fab,ERR=fab_error)	! Close output file
) THEN return (.status);

!
! Now release the virtual memory acquired above
!

IF NOT
	(status = lib$free_vm (		! Release virtual memory of
		bytes_needed,		!  -this many bytes
		input_rab[rab$l_ubf]))	!  -beginning at this address
THEN
		BEGIN			! If deallocation failed
		vm_error(.status);	!  signal the user
		return (.status);	!  return if not fatal
		END;

return (true);

END;

ROUTINE log_results (fab): =

!----
!
! Functional description
!
!	This routine is called from the main loop whenever
!	logging is requested
!
! Input parameters
!
!	fab = Address of block describing the file
!	fab$l_nam = pointer to name block
!
! Output parameters
!
!	First error encountered, or TRUE is RETURNed
!
!----

BEGIN

MAP fab: REF $BBLOCK;			! Define fab block format
BIND nam = .fab[fab$l_nam]: $BBLOCK;	! Define name block

LOCAL desc: VECTOR[2];			! Temporary string descriptor

IF .nam[nam$b_rsl] NEQ 0		! IF result string nonblank,
THEN BEGIN
    desc[0] = .nam[nam$b_rsl];		! then display it
    desc[1] = .nam[nam$l_rsa];
    END
ELSE IF .nam[nam$b_esl] NEQ 0		! Or if expanded name nonblank
THEN BEGIN
    desc[0] = .nam[nam$b_esl];		! then display it
    desc[1] = .nam[nam$l_esa];
    END
ELSE BEGIN
    desc[0] = .fab[fab$b_fns];		! Otherwise, use original
    desc[1] = .fab[fab$l_fna];		! name string in FAB
    END;

write_message(msg$_created,1,DESC);	! Output an informational msg

RETURN (true);

END;

ROUTINE get_createqls =

!----
!
! Functional description
!
!	This routine calls CLI to obtain the command line and
!	then all command qualifiers.
!
! Input parameters
!
!	None
!
! Output parameters
!
!	qualifier$flags	= Bitmap marking which qualifiers are present
!	First error encountered, or TRUE is RETURNed
!
!----

BEGIN

LOCAL
    prot_value : WORD INITIAL(0),
    prot_mask : WORD INITIAL(0),
    status,
    value_desc : $BBLOCK[dsc$c_s_bln];


CH$FILL(0,dsc$c_s_bln,value_desc);		! Make descriptor dynamic.
value_desc[dsc$b_class] = dsc$k_class_d;

qualifier$flags[qual_directory]		= cli$present($descriptor('DIRECTORY'));
qualifier$flags[qual_owner_uic]		= cli$present($descriptor('OWNER_UIC'));
qualifier$flags[qual_protection]	= cli$present($descriptor('PROTECTION'));
qualifier$flags[qual_version_limit]	= cli$present($descriptor('VERSION_LIMIT'));
qualifier$flags[qual_volume]		= cli$present($descriptor('VOLUME'));
qualifier$flags[qual_log]		= cli$present($descriptor('LOG'));

IF .qualifier$flags[qual_owner_uic]
THEN
    BEGIN
    cli$get_value($descriptor('OWNER_UIC'),value_desc);
    IF NOT owner_uic_parse(value_desc)
	THEN RETURN false;
    END;


IF .qualifier$flags[qual_protection]
THEN
    BEGIN
    IF cli$present($descriptor('PROTECTION.SYSTEM'))
    THEN
        BEGIN
        prot_mask = .prot_mask OR %X'000F';
        IF cli$get_value($descriptor('PROTECTION.SYSTEM'),value_desc)
        THEN prot_value = parse_class(value_desc);
        END;
    IF cli$present($descriptor('PROTECTION.OWNER'))
    THEN
        BEGIN
        prot_mask = .prot_mask OR %X'00F0';
        IF cli$get_value($descriptor('PROTECTION.OWNER'),value_desc)
        THEN prot_value = .prot_value OR parse_class(value_desc)^4;
        END;
    IF cli$present($descriptor('PROTECTION.GROUP'))
    THEN
        BEGIN
        prot_mask = .prot_mask OR %X'0F00';
        IF cli$get_value($descriptor('PROTECTION.GROUP'),value_desc)
        THEN prot_value = .prot_value OR parse_class(value_desc)^8;
        END;
    IF cli$present($descriptor('PROTECTION.WORLD'))
    THEN
        BEGIN
        prot_mask = .prot_mask OR %X'F000';
        IF cli$get_value($descriptor('PROTECTION.WORLD'),value_desc)
        THEN prot_value = .prot_value OR parse_class(value_desc)^12;
        END;

!
! Complement the protection value since at this point, a bit set true 
! indicates that we want to ALLOW access, while the system convention
! is that a bit set true indicates that we want to DENY access.
!

    create$protection[0] = NOT .prot_value;
    create$protection[1] = .prot_mask;
    END;


IF .qualifier$flags[qual_version_limit]
THEN
    BEGIN
    cli$get_value($descriptor('VERSION_LIMIT'),value_desc);
    status = lib$cvt_dtb(.value_desc[dsc$w_length],
			 .value_desc[dsc$a_pointer],
			 create$version_limit);
    IF NOT .status
    THEN
	BEGIN
	write_message(msg$_badvalue,1,value_desc);
	RETURN false;
	END;
    END;


IF .qualifier$flags[qual_volume]
THEN
    BEGIN
    cli$get_value($descriptor('VOLUME'),value_desc);
    status = lib$cvt_dtb(.value_desc[dsc$w_length],
			 .value_desc[dsc$a_pointer],
			 create$volume);
    IF NOT .status
    THEN
	BEGIN
	write_message(msg$_badvalue,1,value_desc);
	RETURN false;
	END;
    END;

RETURN true;
END;

ROUTINE owner_uic_parse (qual_desc_block): =

!----
!
! Functional description
!
!	This routine is called from CLI to parse the value
!	associated with the /OWNER_UIC qualifier.
!
! Input parameters
!
!	qual_desc_block = Address of CLI request block
!
! Output parameters
!
!	create$_owner_uic = Value if /OWNER_UIC specified
!	First error encountered, or TRUE is RETURNed
!
!----

BEGIN

LOCAL
    status;

MAP qual_desc_block: REF $BBLOCK;	! Define block format

BIND
    uicvec = create$owner_uic : VECTOR [2,WORD];

!
! Move the descriptor returned by CLI into the TPARSE parameter block
!

tparse_block[tpa$l_stringcnt] = .qual_desc_block[dsc$w_length];
tparse_block[tpa$l_stringptr] = .qual_desc_block[dsc$a_pointer];

!
! Now call TPARSE using the appropriate STATE and KEYWORD tables.
! If successful TPARSE will load storage as follows:
!
!	owner_uic <-- converted UIC
!

IF NOT (status = lib$tparse	(		! Call TPARSE with
			tparse_block,		!  -parameter block
			owner_uic_stb,		!  -state table
			owner_uic_ktb))		!  -keyword table

   THEN	BEGIN					! If TPARSE fails
	write_message (				! Inform the user
			msg$_syntax,		!  -of SYNTAX error
			1,			!  -one FAO arguement
			.qual_desc_block,	!  -UIC string
			.status);		!  -plus original error
	return (.status);			! Only if non-fatal
	END;


return (true);

END;

ROUTINE parse_class (desc) =

!---
!
! This routine parses one class of user (e.g. SYSTEM, OWNER, GROUP, WORLD)
! to see what protection is allowed.  The value returned in the low 4 bits
! is the protection code, with the bits set to reflect that access is 
! requested.  Note that this is exactly the opposite of what the system wants.
!
! Inputs:
!
!	DESC -- a descriptor pointing to the ASCII representation of the
!		protection desired
!
!---

BEGIN

MAP desc : REF $BBLOCK;

LOCAL
    pointer,				! Pointer to string
    result : INITIAL(0);		! Resultant protection (default is no accesss)

!
! Scan for the occurrence of each keyletter, and, if it is there, set the
! appropriate bit.
!
pointer = .desc[dsc$a_pointer];
INCR index FROM 1 to .desc[dsc$w_length] DO
    BEGIN
    LOCAL char : BYTE;
    char = CH$RCHAR_A(pointer);
    IF .char EQL'R'
    THEN result = .result OR %X'1'
    ELSE IF .char EQL  'W'
    THEN result = .result OR %X'2'
    ELSE IF .char EQL 'E'
    	 OR .char EQL 'P'
    THEN result = .result OR %X'4'
    ELSE IF .char EQL 'D'
    	 OR .char EQL 'L'
    THEN result = .result OR %X'8'
    ELSE SIGNAL_STOP (msg$_syntax, 1, .desc);
    END;

RETURN .result;
END;


ROUTINE handler (signal_args, mechanism_args) =

!---
!
!	This condition handler gets control on any signalled
!	condition in order to save the highest severity error
!	to be returned by exit from the image.
!
! Inputs:
!
!	signal_args = Address of signal argument list
!	mechanism_args = Address of mechanism argument list
!
! Outputs:
!
!	worst_error is updated with highest severity error.
!
!---

BEGIN

MAP
    signal_args: REF $BBLOCK,			! Adr of signal arg list
    mechanism_args: REF $BBLOCK;			! Adr of mech. arg list

LOCAL
    code: $BBLOCK [LONG];			! Condition code (longword)

code = .signal_args [chf$l_sig_name];		! Get condition code

IF .code [sts$v_severity] GTR .worst_error [sts$v_severity]
THEN
    worst_error = .code OR sts$m_inhib_msg;	! Set new worst error

ss$_resignal					! Continue signalling

END;

ROUTINE fab_error (fab): =

!----
!
! Functional description
!
!	This routine is called from RMS whenever an error
!	occurs during an RMS file function call.
!
! Input parameters
!
!	fab = Address of block used in the RMS call.
!	fab$l_nam = pointer to name block
!	fab$l_ctx = error message to be used
!
! Output parameters
!
!	Expanded error messages to user
!	FAB status is RETURNed
!
!----

BEGIN

MAP fab: REF $BBLOCK;			! Define fab block format
BIND nam = .fab[fab$l_nam]: $BBLOCK;	! Define name block

LOCAL desc: VECTOR[2];			! Temporary string descriptor

IF .nam[nam$b_rsl] NEQ 0		! IF result string nonblank,
THEN BEGIN
    desc[0] = .nam[nam$b_rsl];		! then display it
    desc[1] = .nam[nam$l_rsa];
    END
ELSE IF .nam[nam$b_esl] NEQ 0		! Or if expanded name nonblank
THEN BEGIN
    desc[0] = .nam[nam$b_esl];		! then display it
    desc[1] = .nam[nam$l_esa];
    END
ELSE BEGIN
    desc[0] = .fab[fab$b_fns];		! Otherwise, use original
    desc[1] = .fab[fab$l_fna];		! name string in FAB
    END;

write_message(.fab[fab$l_ctx],1,DESC,	! Output an error message
		.fab[fab$l_sts],	! with fab error code
		.fab[fab$l_stv]);	! and secondary code

RETURN (.fab[fab$l_sts]);

END;

ROUTINE rab_error (rab): =

!----
!
! Functional description
!
!	This routine is called from RMS whenever an error
!	occurs during an RMS record function call.
!
! Input parameters
!
!	rab = Address of block used in the RMS call.
!	rab$l_ctx = error message to be used
!	rab$l_fab = pointer to fab block
!	fab$l_nam = pointer to name block
!
! Output parameters
!
!	Expanded error message to user
!	RAB status is RETURNed
!
!----

BEGIN

MAP rab: REF $BBLOCK;			! Define RMS block format
BIND
fab = .rab[rab$l_fab] : $BBLOCK,	! Define fab
nam = .fab[fab$l_nam] : $BBLOCK;	! Define nam

LOCAL desc: VECTOR[2];			! Temporary string descriptor

IF ((.rab [rab$l_sts] EQL rms$_eof)	! If error is end of file
   AND 					! and
   (.rab[rab$l_ctx] EQL msg$_readerr))	! this was a read call
THEN					! then
    RETURN (.rab[rab$l_sts]);		! don't bother to report it

IF .nam[nam$b_rsl] NEQ 0		! IF result string nonblank,
THEN BEGIN
    desc[0] = .nam[nam$b_rsl];		! then display it
    desc[1] = .nam[nam$l_rsa];
    END
ELSE IF .nam[nam$b_esl] NEQ 0		! Or if expanded name nonblank
THEN BEGIN
    desc[0] = .nam[nam$b_esl];		! then display it
    desc[1] = .nam[nam$l_esa];
    END
ELSE BEGIN
    desc[0] = .fab[fab$b_fns];		! Otherwise, use original
    desc[1] = .fab[fab$l_fna];		! name string in FAB
    END;

write_message(.rab[rab$l_ctx],1,DESC,	! Output an error message
		.rab[rab$l_sts],	! with RMS error code
		.rab[rab$l_stv]);	! and secondary code

RETURN (.rab[rab$l_sts]);

END;

ROUTINE create_error (string_desc,status): =

!----
!
! Functional description
!
!	This routine is called when an error is returned
!	by LIB$CREATE_DIR.
!
! Input parameters
!
!	string_desc = address of a string descriptor for the name
!	  of the directory being processed
!	status = error status passed by caller
!
! Output parameters
!
!	Expanded error message to user
!	Input status is RETURNed
!
!----

BEGIN

MAP string_desc: REF $BBLOCK;

write_message(msg$_dirnotcre,1,.string_desc,.status);

RETURN (.status);

END;

ROUTINE vm_error (status): =

!----
!
! Functional description
!
!	This routine is called when an error is returned 
!	by LIB$GET_VM or LIB$FREE_VM
!
! Input parameters
!
!	status = error status passed by caller
!
! Output parameters
!
!	Expanded error message to user
!	Input status is RETURNed
!
!----

BEGIN

write_message(.status);

RETURN (.status);

END;

END
ELUDOM
