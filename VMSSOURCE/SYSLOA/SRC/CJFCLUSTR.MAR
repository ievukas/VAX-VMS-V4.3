	.TITLE	CJFCLUSTR - Minimal Cluster CJF Support
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: EXECUTIVE, CLUSTER MANAGEMENT
;
; ABSTRACT: 
;	This module contains the minimal Common Journaling Facility support 
;	for a cluster environment.
;
; ENVIRONMENT: VAX/VMS
;
; AUTHOR: Ralph Weber,		 CREATION DATE: 31-March-1983
;
; MODIFIED BY:
;
;	
;--


	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$CDRPDEF			; CDRP offsets
	$CLSMSGDEF			; Cluster message offsets
	$CLUBDEF			; Cluster block
	$CSBDEF				; Cluster system block
	$IPLDEF				; Processor IPL definitions
	$PDTDEF				; Port descrpitor table
	$SSDEF				; System status codes

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;


;***********************************************************************
;
; NOTE:	The following assumptions are in effect for this entire module.
;
;************************************************************************

	ASSUME	IPL$_SYNCH  EQ  IPL$_SCS

	.DEFAULT	DISPLACEMENT,WORD

	.PSECT	$$$100,LONG

	.SBTTL	CJF$MIN_JOURNAL - Minimum Journal Message Processor

;++
;
; Functional Description:
;
;	When no real journal message dispatcher exists, this routine processes 
;	all incomming journaling messages.  If no response is required, the 
;	message is ignored.  If a response is required, a response with a 
;	status of SS$_NOSUCHNODE is returned.
;
; Inputs:
;
;	R2	Address of message
;	R3	Senders CSB
;	R4	Address of PDT
;	R5	Address of a CDRP (if response required)
;
; Outputs:
;
;	CJMSG$Q_STATUS(R2) = SS$_NOSUCHNODE in a response message
;--

CJF$MIN_JOURNAL::

	TSTL	CLSMSG$L_RSPID(R2)		; Is a response required?
	BEQL	70$				; Branch if no response.

	BSBW	CNX$INIT_CDRP			; Initialize supplied CDRP.
	MOVB	CLSMSG$B_FUNC(R2), -		; Save incomming function code
		CDRP$L_VAL1(R5)			; for the response.
	MOVAB	B^CJF$MIN_BUILD, -		; Set address of minimum build
		CDRP$L_MSGBLD(R5)		; message routine in CDRP.
	MOVL	CSB$L_CSID(R3), R3		; Get CSID from CSB.
	BSBW	CNX$SEND_MSG_RESP		; Send the response message.
	MOVL	R5, R0				; Setup CDRP for deallocation.
	JMP	G^EXE$DEANONPAGED		; Deallocate CDRP and return.

						; No response required.
70$:	BRW	CNX$DEALL_MSG_BUF_CSB		; Deallocate message buffer
						; and return to caller.

	.SBTTL	CJF$MIN_BUILD - Minimum CJF Message Build Routine

;++
;
; Functional Description:
;
;	This routine is called by the acknowledged message services to build a 
;	minimum CJF response message.  It is called as many times as needed to 
;	successfully transfer the message.
;
; Inputs:
;
;	R2	Address of message
;	R3	Address of CSB
;	R4	Address of PDT
;	R5	Address of CDRP
;
; Outputs:
;
;	Minimal CJF response message built in message buffer pointed to by R2.
;
;--

CJF$MIN_BUILD:

	MOVB	#<CLSMSG$M_RESPMSG -		; Build a response CJF facility
		! CLSMSG$K_FAC_CJF>, -		; code.
		CLSMSG$B_FACILITY(R2)
	MOVB	CDRP$L_VAL1(R5), -		; Return function code from 
		CLSMSG$B_FUNC(R2)		; incomming message.
	MOVZWL	#SS$_NOSUCHNODE, -		; Set error status which 
		CJMSG$Q_STATUS(R2)		; signals no journal driver 
	CLRL	CJMSG$Q_STATUS+4(R2)		; here.

	RSB					; Return.

	.SBTTL	CJF$DISPATCH - First Level CJF Dispatch Routine

;++
;
; Functional Description:
;
;	This routine is the target of the first level received-new-message 
;	dispatcher.  In turn, this routine dispatches through the CLUB to the 
;	second level dispatcher in the journal driver or to CJF$MIN_JOURNAL if 
;	the journal driver is not yet loaded.
;
; Inputs:
;
;	R2	Address of message
;	R3	Senders CSB
;	R4	Address of PDT
;
; Outputs:
;
;	R0	Destroyed
;	R2	Address of message (unchanged)
;	R3	Senders CSB (unchanged)
;	R4	Address of PDT (unchanged)
;
;--

CJF$DISPATCH::

	MOVL	G^CLU$GL_CLUB, R0		; Get CLUB address.
	JMP	@CLUB$L_JNL_DISPT(R0)		; Forward first level dispatch 
						; to journal driver or 
						; CJF$MIN_JOURNAL.

	.END
