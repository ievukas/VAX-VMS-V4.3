MODULE COB$POS_ERASE ( %TITLE 'Position and erase'
		IDENT = '1-003'		! File: COBPOSERA.B32 Edit: LGB1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	VAX-11 COBOL Support
!
! ABSTRACT:
!
!	Used with ACCEPT and DISPLAY, this routine provides direct cursor
!	positioning, relative cursor positioning, screen erasing, and
!	line erasing.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: P. Levesque, CREATION DATE: 27-Jan-1983
!
! MODIFIED BY:
!
! 1-001	- Original.  PLL 27-Jan-1983
! 1-002 - Put out sequence to make sure terminal is in VT100 or VT52 mode.
! 	  Put in kludge for erasing whole screen w/cursor positioning
!	  on a vt52.
! 	  After a screen erase on a vt52, always call the cursor
!	  positioning routine again, whether direct or indirect.  
!	  More code for COB$$AB_PREV to handle Version 3 ACCEPT statement
!	  with ADVANCING and with NO ADVANCING.
!	  Created two entry points, COB$POS_ACCEPT and COB$POS_DISPLAY.
!	  Created COB$ACC_TERM_TYPE for ACCEPT and left COB$TERM_TYPE for
!	  DISPLAY.
!	  Open both SYS$INPUT and SYS$OUTPUT for ACCEPT to be able to
!	  write to terminal.  SYS$INPUT is Read-only under VMS V4.
!	  Added second parameter for COB$$OPEN_IN and COB$$OPEN_OUT.
! 	  Use COBPROLOG.REQ				LGB 16-JAN-1984
! 1-003 - Create placeholder routine COB$POS_ERASE.	LGB 27-FEB-1984
!--


%SBTTL 'Declarations'
!
! PROLOGUE FILE
!

REQUIRE 'RTLIN:COBPROLOG' ;			! Switches, Psects, Include
						! files
!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    COB$POS_ACCEPT  :  NOVALUE,			! Open for ACCEPT
    COB$POS_DISPLAY :  NOVALUE,			! Open for DISPLAY
    COB$POS_ERASE   :  NOVALUE,			! Place-holder routine
    COB$$POS_ERASE ;				! Position and erase

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:COBLNK';				! Define linkages for Screen
						! routines
LITERAL
	DISP    = 0,				! Code for DISPLAY
	DNA     = 1,				! Code for DISPLAY No Advancing
	POS     = 2,				! Code for Positioning
	POS_DNA = 3,				! Code for Positioning No Adv
	ACC_ADV = 4,				! Code for Accept (V3)
	ACC_DNA = 5 ;				! Code for Accept No Adv (V3)
!
! MACROS:
!
    MACRO
	$OUTPUT_ESC_SEQ_BUF = 
	!+
	!  Output sequences.
	!-
	BEGIN
	RAB [RAB$L_RBF] = ESC_SEQ_BUF [0];
	RAB [RAB$W_RSZ] = MIN (.CUR_BUF_LEN, K_MAX_RMS_LEN);
	WHILE $PUT (RAB = .RAB) EQL RMS$_RSA DO $WAIT (RAB = .RAB);
    	IF NOT .RAB [RAB$L_STS]
    	THEN
	    LIB$STOP (COB$_ERRDURPOS, 1, .RAB + RAB$C_BLN,
			 .RAB [RAB$L_STS], .RAB [RAB$L_STV]);
 	CUR_BUF_LEN = 0;
	END;
    %;						! end macro $OUTPUT_ESC_SEQ_BUF

!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
!
! OWN STORAGE
!
GLOBAL
    COB$TERM_TYPE : INITIAL (0),		!  Terminal type for DISPLAY 
    COB$ACC_TERM_TYPE : INITIAL (0) ;		!  Terminal type for ACCEPT
OWN
    RAB	 :  REF $RAB_DECL ; 			!  RAB for output/input device
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    COB$$SETUP_TERM_TYPE,			! Setup terminal type
    COB$$ERASE_LINE_R2 : COB$$ESC_R2_LNK,	! Get the seq to erase a line
    COB$$ERASE_PAGE_R2 : COB$$ESC_R2_LNK,	! Get the seq to erase the screen
    COB$$SET_CURSOR_REL,			! Get seq for relative cursor 
						!  positioning 
    COB$$ERASE_WHOLE_PAGE_R2 : COB$$ESC_R2_LNK,	! Get seq to erase screen w/out
						!  changing cursor
    COB$$ERASE_WHOLE_LINE_R2 : COB$$ESC_R2_LNK,	! Get seq to erase line w/out
						!  changing cursor
    COB$$OPEN_IN,				! Create unit for input
    COB$$OPEN_OUT,				! Open unit for output
    LIB$STOP;					! Signal error

EXTERNAL LITERAL 				! Condition value symbols
    COB$_INVARG,				! Invalid argument
    COB$_ERRDURDIS,				! Error during DISPLAY
    COB$_ERRDURACC,				! Error during ACCEPT
    COB$_ERRDURPOS ;				! Error during Positioning

EXTERNAL
    COB$$AL_WRITE_RAB : VECTOR,			! Address of RAB
    COB$$AB_USPCODE : VECTOR [,BYTE],		! Prefix and Post Upspacing
    COB$$AB_PREV : VECTOR [,BYTE] ;		! History of Previous call

%SBTTL 'COB$POS_ACCEPT - Position and erase for ACCEPT'
GLOBAL ROUTINE COB$POS_ACCEPT (
				UNIT : VECTOR [2,BYTE],	! unit for input
				ERASE_FLAG,	! type of erasing
				LINE,		! line number
				COLUMN,		! column number
				LINE_PLUS,	! number of lines to advance
				COLUMN_PLUS	! number of cols to advance
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used with ACCEPT and DISPLAY.  Its purpose is to
!	open UNIT for input if necessary, then call COB$$POS_ERASE to
!	perform positioning and erasing.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = COB$POS_ERASE (UNIT.rbu.va,
!					  ERASE_FLAG.rl.v,
!					  LINE.rlu.v,
!					  COLUMN.rlu.v,
!					  LINE_PLUS.rlu.v,
!					  COLUMN_PLUS.rlu.v)			
!
! FORMAL PARAMETERS:
!
! 	UNIT.rbu.va		Byte integer unit number designating unit
!				from which string is to be read, followed
!				by byte flag indicating whether a routine
!				should abort or return status on RMS$_EOF.
!				(This second byte is not used here)
!	ERASE_FLAG.rl.v		type of erasing to be done
!					0 = no erasing
!					1 = erase whole screen
!					2 = erase whole line
!					3 = erase to end of screen
!					4 = erase to end of line
!	LINE.rlu.v		line number to which cursor should be moved
!				if zero, the current line is retained
!	COLUMN.rlu.v		column number to which cursor should be moved
!				if zero, the current column is retained
!	LINE_PLUS.rlu.v		number of lines to advance with line-feeds
!	COLUMN_PLUS.rlu.v	number of columns to advance
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	SS$_NORMAL	Normal successful completion
!	COB$_INVARG	Invalid argument
!	COB$_ERRDURACC  Error during ACCEPT
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
	LOCAL
	    TERM_TYPE,				! Parameter to COB$POS_ERASE
	    STATUS ;

!+
! Check to see if the unit has been opened.  The unit will be associated
! with either a COB$xxxx name or a SYS$xxxx name.  If not already open,
! call a routine to set up a RAB.
!-

    IF .UNIT[0] GTRU COB$K_UNIT_MAX
    THEN
	LIB$STOP (COB$_INVARG);

!+
!  Open SYS$INPUT for call to COB$$SETUP_TERM_TYPE to find out if we are
!  dealing with a file or not.
!-

    IF .COB$$AL_WRITE_RAB [.UNIT[0]] EQL 0
    THEN
	!+
	!  Second parameter signifies COB$$OPEN_IN called on behalf of VAX COBOL
	!-
	COB$$OPEN_IN (.UNIT[0], 0) ;

    RAB = .COB$$AL_WRITE_RAB [.UNIT[0]] ;

!+
! First determine the terminal type and save it for later use.
! Notice that COB$TERM_TYPE is set only once, on the first call.
! A descriptor for the resultant name and the name itself are stored
! after the RAB.
!-

    BEGIN					! find and store terminal type
	LOCAL
	    NAM_DSC : REF BLOCK [,BYTE];	! name dsc

    NAM_DSC = .RAB + RAB$C_BLN;			! point past RAB to name dsc

    IF .COB$ACC_TERM_TYPE EQL 0
    THEN
	IF NOT ( COB$$SETUP_TERM_TYPE (.NAM_DSC [DSC$A_POINTER], 
				       .NAM_DSC [DSC$W_LENGTH], 
			               COB$ACC_TERM_TYPE ) )
	THEN LIB$STOP (COB$_ERRDURACC);

    !+
    !  IF COB$ACC_TERM_TYPE is UNKNOWN, we can assume we are dealing with
    !  a file, therefore no need to go through the positioning routine.
    !  If not dealing with a file call COB$$POS_ERASE.
    !-

    IF .COB$ACC_TERM_TYPE NEQ UNKNOWN
    THEN
	BEGIN
	TERM_TYPE = .COB$ACC_TERM_TYPE ;
	IF .COB$$AL_WRITE_RAB [1] EQL 0
	THEN
	!+
	!  SYS$INPUT is read-only in VMS V3B.
	!  There is not need to open  SYS$INPUT (.UNIT[0] = 0) at this point,
	!  leave this for routine COB$ACC_SRC.
	!  For VMS V3B you have to $CREATE i.e. $OPEN SYS$OUTPUT in order to
	!  write the Escape Sequences to the terminal.  Use COB$$OPEN_OUT
	!  instead of COB$$OPEN_IN because we need the RHB (= COB$$AB_USPCODE)
	!  field of $RAB-INIT.  (SYS$OUTPUT is the second element in the 
	!  SYS_TABLE table, hence COB$$OPEN_OUT (1) ).
	!  Make sure that the RAB is pointing to SYS$OUTPUT for the macro
	!  $OUTPUT_ESC_SEQ_BUF.
	!  Second parameter signifies COB$$OPEN_OUT called on behalf of VAX COBOL
	!-
	COB$$OPEN_OUT (1, 0) ;
	RAB = .COB$$AL_WRITE_RAB [1] ;

        COB$$POS_ERASE ( .TERM_TYPE, .ERASE_FLAG, .LINE, .COLUMN, 
						.LINE_PLUS, .COLUMN_PLUS ) ;
	END ;
    END ;

    END ;					! End of COB$POS_ACCEPT

%SBTTL 'COB$POS_DISPLAY - Pos and erase for DISPLAY'
GLOBAL ROUTINE COB$POS_DISPLAY (
				UNIT,		! unit for output
				ERASE_FLAG,	! type of erasing
				LINE,		! line number
				COLUMN,		! column number
				LINE_PLUS,	! number of lines to advance
				COLUMN_PLUS	! number of cols to advance
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used with ACCEPT and DISPLAY.  Its purpose is to
!	open UNIT for input if necessary, then call COB$$POS_ERASE to
!	perform positioning and erasing.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = COB$POS_ERASE (UNIT.rlu.v,
!					  ERASE_FLAG.rl.v,
!					  LINE.rlu.v,
!					  COLUMN.rlu.v,
!					  LINE_PLUS.rlu.v,
!					  COLUMN_PLUS.rlu.v)			
!
! FORMAL PARAMETERS:
!
! 	UNIT.rlu.v		unit number of output device
!	ERASE_FLAG.rl.v		type of erasing to be done
!					0 = no erasing
!					1 = erase whole screen
!					2 = erase whole line
!					3 = erase to end of screen
!					4 = erase to end of line
!	LINE.rlu.v		line number to which cursor should be moved
!				if zero, the current line is retained
!	COLUMN.rlu.v		column number to which cursor should be moved
!				if zero, the current column is retained
!	LINE_PLUS.rlu.v		number of lines to advance with line-feeds
!	COLUMN_PLUS.rlu.v	number of columns to advance
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	SS$_NORMAL	Normal successful completion
!	COB$_INVARG	Invalid argument
!	COB$_ERRDURDIS  Error during DISPLAY
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
	LOCAL
	    TERM_TYPE,				! Parameter to COB$POS_ERASE
	    STATUS ;

!+
! Check to see if the unit has been opened.  The unit will be associated
! with either a COB$xxxx name or a SYS$xxxx name.  If not already open,
! call a routine to set up a RAB.
!-

    IF .UNIT GTRU COB$K_UNIT_MAX
    THEN
	LIB$STOP (COB$_INVARG);

    IF .COB$$AL_WRITE_RAB [.UNIT] EQL 0
    THEN
	!+
	!  Second parameter signifies COB$$OPEN_OUT called on behalf of VAX COBOL
	!-
	COB$$OPEN_OUT (.UNIT, 0);

    RAB = .COB$$AL_WRITE_RAB [.UNIT];

!+
! First determine the terminal type and save it for later use.
! Notice that COB$TERM_TYPE is set only once, on the first call.
! A descriptor for the resultant name and the name itself are stored
! after the RAB.
!-

    BEGIN					! find and store terminal type
	LOCAL
	    NAM_DSC : REF BLOCK [,BYTE];	! name dsc

    NAM_DSC = .RAB + RAB$C_BLN	;		! point past RAB to name dsc

    IF .COB$TERM_TYPE EQL 0
    THEN
	IF NOT ( COB$$SETUP_TERM_TYPE (.NAM_DSC [DSC$A_POINTER], 
				       .NAM_DSC [DSC$W_LENGTH], 
			               COB$TERM_TYPE ) )
	THEN LIB$STOP (COB$_ERRDURDIS);

    !+
    !  IF COB$ACC_TERM_TYPE is UNKNOWN, we can assume we are dealing with
    !  a file, therefore no need to go through the positioning routine.
    !  If not dealing with a file call COB$$POS_ERASE.
    !-

    IF .COB$TERM_TYPE NEQ UNKNOWN
    THEN
	BEGIN
	TERM_TYPE = .COB$TERM_TYPE ;
        COB$$POS_ERASE ( .TERM_TYPE, .ERASE_FLAG, .LINE, .COLUMN, 
						.LINE_PLUS, .COLUMN_PLUS ) ;
	END ;
    END ;
    END ;					! End of COB$POS_DISPLAY

%SBTTL 'COB$POS_ERASE - Position and erase'
GLOBAL ROUTINE COB$POS_ERASE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is a place-holder routine needed by COBVECTOR.MAR.
!
! CALLING SEQUENCE:
!
!	NONE
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    0;
    END ;

%SBTTL 'COB$$POS_ERASE'
ROUTINE COB$$POS_ERASE (
				TERM_TYPE,	! Terminal type 
				ERASE_FLAG,	! type of erasing
				LINE,		! line number
				COLUMN,		! column number
				LINE_PLUS,	! number of lines to advance
				COLUMN_PLUS	! number of cols to advance
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used with ACCEPT and DISPLAY.  Its purpose is to
!	set the cursor to the specified line and column, and to erase
!	a line or the whole screen if specified.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = COB$$POS_ERASE (TERM_TYPE.rlu.v,
!					  ERASE_FLAG.rl.v,
!					  LINE.rlu.v,
!					  COLUMN.rlu.v,
!					  LINE_PLUS.rlu.v,
!					  COLUMN_PLUS.rlu.v)			
!
! FORMAL PARAMETERS:
!
!	TERM_TYPE.rlu.v		input or output terminal type
!	ERASE_FLAG.rl.v		type of erasing to be done
!					0 = no erasing
!					1 = erase whole screen
!					2 = erase whole line
!					3 = erase to end of screen
!					4 = erase to end of line
!	LINE.rlu.v		line number to which cursor should be moved
!				if zero, the current line is retained
!	COLUMN.rlu.v		column number to which cursor should be moved
!				if zero, the current column is retained
!	LINE_PLUS.rlu.v		number of lines to advance with line-feeds
!	COLUMN_PLUS.rlu.v	number of columns to advance
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	SS$_NORMAL	Normal successful completion
!	COB$_INVARG	Invalid argument
!	COB$_ERRDURPOS  Error during Positioning
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	ESC_SEQ_BUF : VECTOR [255, BYTE],	! Buffer to store escape
						! sequences
	CUR_BUF_LEN : INITIAL (0),		! Current length of ESC_SEQ_BUF
	ABS_CURSOR_FLAG : INITIAL (0),		! Flag used w/vt52 erase
	TEMP_LINE_PLUS,				! Local for param LINE_PLUS
	STATUS;					! Return status from calls

    LITERAL
	K_MAX_RMS_LEN = 255,			! Max RMS output buffer size
	INIT_VALUE    = 9 ;			! Initial COB$$AB_PREV value

!+
!  If COB$$AB_PREV says a LINEFEED is necessary, perform the lf now,
!  then set COB$$AB_PREV to POS_DNA to signify that no further lf need be performed
!  in either COB$DISPLAY or COB$ACCEPT.
!  Move parameter LINE_PLUS to local TEMP_LINE_PLUS in case it will have to
!  be incremented.
!-

    TEMP_LINE_PLUS = .LINE_PLUS ;
    IF .COB$$AB_PREV [0] EQL DISP  OR  .COB$$AB_PREV [0] EQL ACC_ADV
    THEN
    !+
    !  Echo linefeed for advancing via TEMP_LINE_PLUS.
    !-
	IF .LINE EQL 0
	THEN
	    IF .TEMP_LINE_PLUS NEQ 0
	    THEN
		TEMP_LINE_PLUS = .TEMP_LINE_PLUS + 1
	    ELSE
		TEMP_LINE_PLUS = 1 ;

    !+
    !  If COB$$AB_PREV is in its initial state do no advancing and leave
    !  it in the initial state if no positioning was requested.
    !-
    IF (.COB$$AB_PREV [0] EQL INIT_VALUE)
			AND ( .LINE           EQL 0  AND  .COLUMN      EQL 0
			AND   .TEMP_LINE_PLUS EQL 0  AND  .COLUMN_PLUS EQL 0 )
    THEN
	COB$$AB_PREV [0] = INIT_VALUE
    ELSE
	COB$$AB_PREV [0] = POS_DNA ;

    COB$$AB_USPCODE [0] = 0;		! turn off prefix carriage control
    COB$$AB_USPCODE [1] = 0;		! turn off postfix carriage control

!+
! Put cursor positioning sequence in buffer.  The relative routine
! will do direct positioning if possible.
!-

    STATUS = COB$$SET_CURSOR_REL (.TERM_TYPE, ABS (.LINE), 
				  ABS (.COLUMN), ABS (.TEMP_LINE_PLUS), 
				  ABS (.COLUMN_PLUS), ESC_SEQ_BUF [0], 
				  CUR_BUF_LEN);
    IF (NOT .STATUS) THEN LIB$STOP (COB$_ERRDURPOS);

!+
! The relative cursor positioning routine may have been able to directly
! position the cursor.  This is significant only on a vt52 with whole
! screen erasing.
!-

    IF .LINE NEQ 0 AND
       .COLUMN NEQ 0
    THEN
	ABS_CURSOR_FLAG = 1;

!+
! It's possible for the buffer to be full already, particularly if 
! relative cursor positioning was requested.  Check for that now,
! to make sure that an erase sequence would fit.  (This also avoids
! splitting an escape sequence between two $PUTs.)
!-

    IF .CUR_BUF_LEN GEQ (K_MAX_RMS_LEN - 10)
    THEN
	$OUTPUT_ESC_SEQ_BUF;

!+
! The set cursor sequence, if needed, is now in ESC_SEQ_BUF.  Append
! in the erase sequence, if one is requested.
!-

    IF .ERASE_FLAG NEQ 0
    THEN
	BEGIN
	CASE .ERASE_FLAG FROM 1 TO 4 OF
	SET
	    [1]:				! Erase whole screen
		BEGIN
		!+
		! Kludge for VT52.  If we erase the whole page, we will
		! lose our cursor position.  So put out the cursor sequence
		! again to restore it.
		!-
		IF .TERM_TYPE EQL VT52
	 	THEN
		    BEGIN
		    IF .ABS_CURSOR_FLAG NEQ 0
		    THEN
			BEGIN			! abs cursor, erase whole screen
		        STATUS = COB$$ERASE_WHOLE_PAGE_R2 (.TERM_TYPE, 
							   ESC_SEQ_BUF [0],
						   	   CUR_BUF_LEN);
			COB$$SET_CURSOR_REL (.TERM_TYPE, ABS (.LINE), 
				      	     ABS (.COLUMN), ABS (.TEMP_LINE_PLUS), 
				      	     ABS (.COLUMN_PLUS), ESC_SEQ_BUF [0], 
				      	     CUR_BUF_LEN);
		  	END
		    ELSE
			BEGIN			! rel cursor, erase to end
			STATUS = COB$$ERASE_PAGE_R2 (.TERM_TYPE, ESC_SEQ_BUF [0],
						     CUR_BUF_LEN);
			END;
		    END
		ELSE
		    STATUS = COB$$ERASE_WHOLE_PAGE_R2 (.TERM_TYPE, ESC_SEQ_BUF [0],
							CUR_BUF_LEN);
		END;
	    [2]:				! Erase whole line
		STATUS = COB$$ERASE_WHOLE_LINE_R2 (.TERM_TYPE, ESC_SEQ_BUF [0],
						   CUR_BUF_LEN);

	    [3]:				! Erase from cursor to end of screen
	   	STATUS = COB$$ERASE_PAGE_R2 (.TERM_TYPE, ESC_SEQ_BUF [0],
					     CUR_BUF_LEN);

	    [4]:				! Erase from cursor to end of line
		STATUS = COB$$ERASE_LINE_R2 (.TERM_TYPE, ESC_SEQ_BUF [0],
					     CUR_BUF_LEN);
	   TES;

	IF NOT .STATUS 
        THEN LIB$STOP (COB$_ERRDURPOS);

	END;

!+
! ESC_SEQ_BUF now contains everything.  Put it out to the terminal.
!-

    IF .CUR_BUF_LEN EQL 0			! nothing to output 
    THEN 
	RETURN (SS$_NORMAL);

    $OUTPUT_ESC_SEQ_BUF;			! do RMS $PUT

    RETURN (SS$_NORMAL);

    END;					! End of routine COB$$POS_ERASE
END						! End of module COB$POS_ERASE
ELUDOM
