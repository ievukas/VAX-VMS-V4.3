MODULE PAS$FIND2 ( %TITLE 'FIND procedure'
		IDENT = '1-002'			! File: PASFIND2.B32 Edit: SBL1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains PAS$FIND2, which implements the
!	VAX-11 Pascal FIND procedure.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 16-December-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 16-December-1981
! 1-002 - Store record length in length word for FILE OF VARYING.
!	  SBL 20-Oct-1982
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$FIND2: NOVALUE;				! Do a FIND

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE

%SBTTL 'PAS$FIND2 - FIND procedure'
GLOBAL ROUTINE PAS$FIND2 (				! Do a FIND
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	COMPONENT : REF VECTOR [, LONG],		! Component number
	ERROR						! Unwind address if error
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAS$FIND2 implements the VAX-11 Pascal FIND procedure.  It
!	finds the specified file component and places its contents in
!	the file buffer.
!
! CALLING SEQUENCE:
!
!	CALL PAS$FIND2 (PFV.mr.r, COMPONENT.rlu.r [, ERROR.j.r])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	COMPONENT	- The number of the file component to read.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  if an error occurs.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Places file in Inspection mode
!
! SIGNALLED ERRORS:
!
!	FILNOTOPE - File not open
!	FILNOTDIR - File not opened for direct access
!	FAIGETLOC - Failed to GET locked record
!	ERRDURFIN - Error during FIND or FINDK
!	
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,		! File control block
	GET_STATUS,					! Status from $GET
	PFV_ADDR: VOLATILE,				! Enable argument
	UNWIND_ACT: VOLATILE,				! Unwind action
	ERROR_ADDR: VOLATILE;				! Enable argument

    BIND
	RAB = FCB: REF BLOCK [, BYTE];			! RMS RAB

    BUILTIN
	ACTUALCOUNT;

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);

    IF ACTUALCOUNT () GEQU 3
    THEN
	ERROR_ADDR = .ERROR;				! Set unwind address

    !+
    ! Set PFV address enable argument.
    !-

    PFV_ADDR = PFV [PFV$R_PFV];

    !+
    ! Validate and lock PFV
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Open file if it should be implicitly opened
    !-

    IF NOT .PFV [PFV$V_VALID]
    THEN
	PAS$$OPEN_IMPLICIT (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! Verify that the file is open.
    !-

    IF NOT .PFV [PFV$V_OPEN]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTOPE,0);

    !+
    ! Verify that the file is opened for direct access
    !-

    IF NOT .FCB [FCB$V_DIRECT]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTDIR,0);

    !+
    ! Assume that file buffer will be defined
    !-

    PFV [PFV$V_DFB] = 1;

    !+
    ! Get the record.
    !-

    RAB [RAB$B_RAC] = RAB$C_KEY;		! Set "keyed" (direct) access
    RAB [RAB$V_NLK] = 0;			! Turn off "no lock" bit
    FCB [FCB$L_COMPONENT] = .COMPONENT [0];	! Set component number
    GET_STATUS = $PAS$RMS_OP ($GET (RAB = RAB [0,0,0,0]));

    !+
    ! If varying, put component length in first word of user buffer.
    ! Do this before we check for errors!
    !-

    IF .FCB [FCB$V_VARYING]
    THEN
	(.PFV [PFV$A_BUFFER])<0,16,0> = .RAB [RAB$W_RSZ];

    !+
    ! Check for errors.
    !-

    IF NOT .GET_STATUS
    THEN
	BEGIN
	!+
	! $GET failed.  Determine if the error was "component not found"
	! or another error.   No error is signalled if component not found,
	! but buffer is undefined.
	!-

	PFV [PFV$V_DFB] = 0;	! Undefine file buffer
	IF .GET_STATUS EQL RMS$_RLK
	THEN
	    $PAS$IO_ERROR (PAS$_FAIGETLOC)	! Failed to GET locked record
	ELSE IF (.GET_STATUS NEQU RMS$_EOF) AND (.GET_STATUS NEQU RMS$_RNF)
	THEN
	    $PAS$IO_ERROR (PAS$_ERRDURFIN);	! Error during FIND
	END;

    !+
    ! Set Inspection mode
    ! Indicate not at EOF
    ! Cancel previous LOCATE
    ! Indicate successful completion
    ! Unlock the file
    !-

    FCB [FCB$V_INSPECTION] = 1;
    FCB [FCB$V_GENERATION] = 0;
    FCB [FCB$V_EOF] = 0;
    FCB [FCB$V_LOCATE] = 0;
    FCB [FCB$L_STATUS] = 0;
    PFV [PFV$V_LOCK] = 0;

    RETURN;

    END;					! End of routine PAS$FIND2

!<BLF/PAGE>

END						! End of module PAS$FIND2

ELUDOM
