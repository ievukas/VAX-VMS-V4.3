	$BEGIN	RM0ACCESS,001,RM$RMS0,<ACCESS/DEACCESS ROUTINES>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: rms32
;
; Abstract:
;	this module performs the file access and
;	de-access fcp functions.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 10-MAR-1977
;
; Modified By:
;
;	V04-001 JWT0196		Jim Teague		14-Sep-1984
;		Restore V3 behavior of ignoring UPI for relative
;		and ISAM files.
;
;	V03-043	RAS0326		Ron Schaefer		23-Jul1984
;		Fix RAS0309 to force GET access to be allowed internally
;		if a valid EXE access is requested.  This makes
;		execute-only command procedures work.
;
;	V03-042	JWT0188		Jim Teague		21-Jul-1984
;		Don't allow $OPEN with sharing on magtapes.  RMS
;		was letting this slip through for 512-byte fixed
;		sequential files.
;
;	V03-041	RAS0309		Ron Schaefer		15-Jun-1984
;		Add support for execute-only images and command files.
;
;	V03-040	JWT0179		Jim Teague		23-Apr-1984
;		Always check for an ATR work area before allocating
;		one.
;
;	V03-039	JWT0175		Jim Teague		12-Apr-1984
;		Finish access mode ATR implementation.
;
;	V03-038	SHZ0005		Stephen H. Zalewski	06-Apr-1984
;		Back out the second part of shz0004.  Two reasons, first,
;		global buffers is a connect time option, no open time option.
;		Second, we would be record locking read only isam files, and
;		we never did before.
;
;	V03-037	JWT0173		Jim Teague		 1-Apr-1984
;		Disable access mode ATRs for now.
;
;	V03-036	JWT0172		Jim Teague		28-Mar-1984
;		Keep exec mode byte at end of ATR work area.
;
;	V03-035	SHZ0004		Stephen H. Zalewski,	21-Mar-1984
;		Do not take out a file lock if UPI was specified in the
;		SHR field.
;
;		If file is READ ONLY, and global buffers specified, turn
;		on sharing so that global buffers can be used.  Old behavior
;		was to not use sharing since no locking was necessary, however
;		this prevented global buffering from being turned on.
;
;	V03-034	RAS0276		Ron Schaefer		20-Mar-1984
;		Prevent truncate-on-close (TEF FOP option) from being
;		honored for relative or indexed files.
;
;	V03-033	JWT0167		Jim Teague		15-Mar-1984
;		Allow write access with buffer offset as long as
;		BIO is set.  Also implement access-mode ATRs.
;
;	V03-032	DGB0012		Donald G. Blair		01-Mar-1984
;		Make changes related to ACP calls as part of the 
;		restructuring necessary to support access mode 
;		protected files.
;
;	V03-031	JWT0158		Jim Teague		27-Feb-1984
;		Adjustment to ANSI buffer offset stuff.  I had placed
;		the code to request the ATR$C_BUFFER_OFFSET attribute
;		in a common path for both $OPEN and $CREATE.  It 
;		should only have been in the $OPEN access path.
;		
;	V03-030	SHZ0003		Stephen H. Zalewski,	27-Feb-1984
;		Do not bump the available local buffer count in routine
;		RM$SETEBK as the local buffer it was trying to give back
;		(used for FWA) no longer exists.
;
;	V03-029	SHZ0002		Stephen H. Zalewski,	21-Feb-1984
;		If user opens file no-sharing, multi-streaming read only,
;		force locking to occur, otherwise no interlocking occurs,
;		and stream 2 could try to read from a bucket stream 1 is still
;		reading into cache.
;
;	V03-028	JWT0150		Jim Teague		01-Feb-1984
;		Implement ANSI buffer offset.
;
;	V03-027	JWT0148		Jim Teague		15-Dec-1983
;		Enforce ONLY_RU for $OPENs.
;
;	V03-026	RAS0218		Ron Schaefer		 5-Dec-1983
;		Make node names work as search list elements.
;	
;	V03-025	DAS0003		David Solomon		13-Sep-1983
;		Set RJB$V_OPEN before call to RM$MAPJNL.
;
;	V03-024	KBT0582		Keith B. Thompson	12-Aug-1983
;		Clean up some fwa constants
;
;	V03-023	DAS0002		David Solomon		20-Jul-1983
;		IFB$V_RUP moved from IFB$B_JNLFLG to IFB$B_JNLFLG2. Migrate
;		FAB$B_RCF recovery bits in RM$ACCESS (to catch both opens and
;		creates).
;
;	V03-022	KPL0012		Peter Lieberwirth	 1-Jul-1983
;		Fix bug introduced in V03-020 that caused the PCB address
;		to be returned as the status code.
;
;	V03-021	DAS0001		David Solomon		22-Jun-1983
;		If opening a file for RU recovery, use FIB$V_NOLOCK
;		(open regardless).
;
;	V03-020	KPL0013		Peter Lieberwirth	21-Jun-1983
;		Don't migrate FAB recovery bits unless we're in recovery.
;
;	V03-019	KPL0012		Peter Lieberwirth	17-Jun-1983
;		Delay writing AT mapjnl entry until OPEN/CREATE is
;		complete.
;
;	V03-018	TSK0001		Tamar Krichevsky	12-Jun-1983
;		Fix broken branches to journaling routines.
;
;	V03-017	RAS0148		Ron Schaefer		26-Apr-1983
;		Initial support for extended XABPRO.
;
;	V03-016	LJA0059		Laurie J. Anderson	16-Feb-1983
;		Check for Multi-streaming even if NIL is set in the FAB share
;		field.
;
;	V03-015	KBT0491		Keith B. Thompson	9-Feb-1983
;		Checking for "proper" sharing is now done in rm$init_sfsb
;
;	V03-014	TMK0001		Todd M. Katz		01-Feb-1983
;		Add support for Recovery Unit Journalling and RU ROLLBACK
;		Recovery of ISAM files. Under the following set of conditions
;		set the journalling state bit IFB$V_RU_RLK within IFB$B_JNLFLG:
;
;		1. The file is an ISAM file.
;		2. The file is Recovery Unit Journallable.
;		3. The file has been opened for exclusive access (no sharing).
;
;		Setting of this bit will enable pseudo record locking.
;
;	V03-013	LJA0054		Laurie J. Anderson	12-Jan-1983
;		Fill in SHR field in IFB from Users FAB in rm$creacc_set1
;
;	V03-012	KPL0011		Peter Lieberwirth	17-Jan-1983
;		Migrate FAB bits that indicate file is being opened for
;		recovery into the IFB.
;
;	V03-011	SHZ0001		Stephen H. Zalewski	16-Dec-1982
;		Keep disk-structured hbk and ebk in different places in
;		ifb than we keep the swapped hbk and ebk.
;
;	V03-010	ACG0306		Andrew C. Goldstein,	13-Dec-1982  14:55
;		Remove obsolete file header symbols
;
;	V03-009	KBT0412		Keith B. Thompson	30-Nov-1982
;		Change ifb$w_devbufsiz to ifb$l_devbufsiz
;
;	V03-008	JWH0103		Jeffrey W. Horn		20-Sep-1982
;		Move the journaling set-up to RM$SETEBK.
;
;	V03-007	KBT0335		Keith B. Thompson	10-Sep-1982
;		Remove all S0 sharing code
;
;	V03-006	JWH0003		Jeffrey W. Horn		31-Aug-1982
;		Put in support for recovery unit journals.
;
;	V03-005	KBT0198		Keith B. Thompson	23-Aug-1982
;		Reorganize psects
;
;	V03-004	KBT0120		Keith B. Thompson	6-Aug-1982
;		Remove ref. to set_sifb_adr and fix all of the version 3
;		rev. numbers
;
;	V03-003	JWH0002		Jeffrey W. Horn		06-Jul-1982
;		Add in call to RM$RTVJNL to get journal control bits and
;		journal names.
;
;	V03-002	KPL0010		Peter Liebrwirth	25-Jun-1982
;		Complete V02-048 by checking for execute-only access
;		whether or not UFO is set.  Previously, if UFO was not
;		set, the check for execute-only access was skipped.
;
;	V03-001	JWH0001		Jeffrey W. Horn		23-Mar-1982
;		Add in call to RM$ASSJNL to set up journaling on this
;		file.
;
;	V02-050	KEK0018		K. E. Kinnear		3-Feb-1982
;		Replace FWA$C_RNSBUFSIZ with the real total size
; 		of the concatenated NAME,TYPE, and VER buffer sizes.
;
;	V02-049	CDS0030		C Saether		20-Dec-1981
;		Allow deferred write for shared files.
;
;	V02-048	KPL0009		Peter Lieberwirth	17-Dec-1981
;		Provide support for execute only command files by having ACP
;		check for execute protection in SUPER mode as well as EXEC
;		and KERNEL.
;
;	V02-047	CDS0029		C Saether		16-Sep-1981
;		Allow BIO, BRO with MSE for rel, isam.  (same as pre 040).
;
;	V02-046	CDS0028		C Saether		14-Sep-1981
;		Clear NORECLK before UPI check.
;
;	V02-045	CDS0027		C Saether		 6-Sep-1981
;		Init BLB queue header when noreclk is cleared.
;
;	V02-044	CDS0026		C Saether		 4-Sep-1981
;		NORECLK now set by fseti - clear if locking.
;
;	V02-043	CDS0025		C Saether		31-Aug-1981
;		Always set noreclk.
;
;	V02-042	CDS0024		C Saether		23-Aug-1981
;		Init queue header and allocate a BLB if sharing.
;		Fix bug so that SFSB is allocated for 512 fix len.
;
;	V02-041	KPL0008		Peter Lieberwirth	15-Jul-1981
;		Allocate an SFSB in all cases, including sequential.
;
;	V02-040	KPL0007		Peter Lieberwirth	28-Apr-1981
;		Allocate an SFSB via RM$INIT_SFSB if necessary.
;
;	V02-039	CDS0023		C Saether	24-Feb-81	8:30
;		Check fixed length against RSIZ record attribute (ifb$w_lrl)
;		instead of max rec size (ifb$w_mrs).
;
;	V02-038	CDS0022		C Saether	23-Dec-80	15:10
;		Reverse order of attributes on stack so that rewriting
;		record attributes occurs before protection changes.
;
;	V02-037	REFORMAT	C Saether	30-Jul-80	20:20
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$ARMDEF
	$ATRDEF
	$BDBDEF
	$DEVDEF
	$FABDEF
	$FCHDEF
	$FIBDEF
	$FWADEF
	$IFBDEF
	$IMPDEF
	$IODEF
	$PCBDEF
	$PSLDEF
	$RJBDEF
	$RMSDEF
	$RUCBDEF
	$XABPRODEF
	$XABRDTDEF

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8

;
; Own Storage:
;


	.SBTTL	RM$ACCESS - PERFORM FCP ACCESS FUNCTION

;++
;
; RM$ACCESS - perform file access function
;
; This routine sets up the access control word of the fib
; from the various user specifications, builds the
; attribute list to read in the record attributes and
; statistics block, builds the qio parameter list on
; the stack using the filename descriptor, issues
; the qio to the acp to perform the access,
; and finally initializes the ebk and hbk fields of
; the ifab.
;
; Calling sequence:
;
;	BSBW	RM$ACCESS
;
; Input Parameters:
;
;	r11	impure area address
;	r10	fwa address
;	r9	ifab addresss
;	r8	fab address
;
; Implicit Inputs:
;
;	fwa$t_fibbuf (fid & did set as required, remainder zero)
;	ifb$v_wrtacc
;	ifb$b_fac
;	fab$l_fop
;	ifb$l_chnl
;	fwa$l_atrladr
;	fwa$q_name
;
; Output Parameters:
;
;	r0	status code
;	r1-r7,ap destroyed
;
;
; Implicit Outputs:
;
;	ifb$v_accessed set
;	the record attributes area of the ifab is initialized
;	the record string is set (fwa$q_rns) over-writing
;		the filename string
;	ifb$l_ios
;	fab$v_ctg set if file contiguous, else cleared
;	fab$l_stv set to system error code on failure
;
; Completion Codes:
;
;	standard rms including suc, fnf, rer, wer, flk, prv,
;	and acc.
;
; Side Effects:
;
;	may have switched to running at ast level.
;	all user structures except fab must be reprobed.
;--


RM$ACCESS::
	$TSTPT	ACCESS
	BBS	#DEV$V_DIR,IFB$L_PRIM_DEV(R9),RMACC ; branch if files-oriented
	BBS	#FWA$V_NODE,(R10),NTACC	; branch if network function
	RMSSUC				; show success
	RSB				; return to caller

;++
;
;  perform network access function
;
;--

NTACC:
	BBS	#IFB$V_DAP,(R9),10$	; branch if network file access
	BITL	#<<FAB$M_KFO>!-		; disallow kfo and ufo options
		<FAB$M_UFO>!-		;  if task-to-task (to prevent
		0>,FAB$L_FOP(R8)	;  '$run node::"task=abc"'
	BEQL	10$			; branch if neither bits set
	BRW	NT$SUP_FOP		; return to caller with rms$_sup
10$:	BSBW	NT$ACCESS		; establish logical link
	BLBS	R0,60$			
	BRW	ERRACCESS		; branch on failure
60$:	BBC	#FAB$V_SQO+FOP,(R8),20$	; branch if sqo not specified
	SSB	#IFB$V_SQO,(R9)		; and save bit in ifab
20$:	BBS	#IFB$V_NSP,(R9),30$	; branch if task-to-task oper.
	BSBW	NT$OPEN			; open file via remote fal
	BLBC	R0,RET			; branch on failure
30$:	SSB	#IFB$V_NORECLK,(R9)	; say no record locking needed
	RMSSUC				; show success

RET:	RSB				; return to caller

RMACC:

;
; Migrate FAB recovery bits to the IFB, (don't do so if this process is
; not entitled to do recovery).
;
	MOVL	@#CTL$GL_PCB,R1		; get PCB address	
	BBC	#PCB$V_RECOVER,-	; skip if not a recovery process
		PCB$L_STS(R1),30$	;
	TSTB	FAB$B_RCF(R8)		; any bits set?
	BEQL	30$			; if eql no
	BBC	#FAB$V_RU,-		; branch if not RU recovery
		FAB$B_RCF(R8),10$	;
	SSB	#IFB$V_RU_RECVR,-	; translate RU to IFB RU_RECVR
		IFB$B_RECVRFLGS(R9)	;
10$:	BBC	#FAB$V_AI,-		; branch if not roll forward
		FAB$B_RCF(R8),20$	;
	SSB	#IFB$V_AI_RECVR,-	; translate AI to IFB AI_RECVR
		IFB$B_RECVRFLGS(R9)	;
20$:	BBC	#FAB$V_BI,-		; branch if not roll back
		FAB$B_RCF(R8),30$	;
	SSB	#IFB$V_BI_RECVR,-	; translate BI to IFB BI_RECVR
		IFB$B_RECVRFLGS(R9)	;

;
; Set up for the access.
;

30$:	BSBW	RM$CREACC_SET1		; perform first part of setups
	BLBC	R0,RET			; quit on error

;
; put a user-mode ATR on the list first
;
	MOVW	#1,(R5)+		; length of access mode byte
	MOVW	#ATR$C_ACCESS_MODE,(R5)+ ; access mode attribute
	MOVAB	IFB$B_MODE(R9),(R5)+	; access mode for ACP to read

	BSBW	RM$OPEN_XAB		; go process rms open xabs
	BLBC	R0,RET			; continue on success

;
; now an exec-mode ATR
;

	MOVW	#1,(R5)+			; 1 byte length
	MOVW	#ATR$C_ACCESS_MODE,(R5)+ 	; access mode ATR
	ADDL3	#508,FWA$L_ATR_WORK(R10),(R5)+	; 1 byte signifying EXEC mode

	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R9),8$ ; branch if not disk

	JSB	RM$RTVJNL		; get journal bits, names

8$:	BSBW	RM$CREACC_SET2		; finish setups

;
; set the qio function code and go access the file
;

	MOVZBL	#IO$_ACCESS!IO$M_ACCESS,R0 ; function code

	BSBW	RM$FCPFNC		; do the access

	BLBS	R0,RM$SETHBK		; continue on RM$FCPFNC success
	BRW	ERRACCESS		; branch on failure

	.SBTTL	RM$SETHBK

;++
;
; RM$SETHBK - entry for "create if" that becomes an open
;
; check the file for contiguous and if so set the ctg bit in fop,
; then pick up highest allocated vbn from the statistics block
; and copy to ifab, overwriting the hi vbn field of
; the record attributes. note that the hi-and lo-order words of this vbn
; are reversed on disk and hence are read in reverse order.
; rearrange to give an understandable longword hi vbn. do same for
; eof vbn.
;
;  entry point for "create if" turned into an open.
;
;  set fop output bits according to file attributes.
;
;--

RM$SETHBK::
	EXTZV	#IFB$V_ORG,#IFB$S_ORG,-
		IFB$B_RFMORG(R9),R1 	; get org
	MOVB	R1,IFB$B_ORGCASE(R9)	; into separate ifab byte
	BICL2	#<FAB$M_CTG!FAB$M_CBT!FAB$M_RCK!FAB$M_WCK>,-
		FAB$L_FOP(R8)		; clear fop output bits
	BBC	#FCH$V_CONTIG,-
		FWA$W_UCHAR(R10),10$ 	; branch if file not ctg.
	SSB	#FAB$V_CTG+FOP,(R8)	; set the ctg bit
10$:	BBC	#FCH$V_CONTIGB,-
		FWA$W_UCHAR(R10),20$ 	; branch if not ctg best try
	SSB	#FAB$V_CBT+FOP,(R8)	; set ctg best try in fop
20$:	BBC	#FCH$V_READCHECK,-
		FWA$W_UCHAR(R10),30$ 	; branch if no read checking
	SSB	#FAB$V_RCK+FOP,(R8)	; set fop rck bit
30$:	BBC	#FCH$V_WRITCHECK,-
		FWA$W_UCHAR(R10),40$ 	; branch if no write checking
	SSB	#FAB$V_WCK+FOP,(R8)	; set fop wck bit
40$:
	MOVL	FWA$L_HBK(R10),IFB$L_HBK_DISK(R9)    ; move unswapped hbk to ifb
	ROTL	#16,IFB$L_HBK_DISK(R9),IFB$L_HBK(R9) ; swap words of hbk

	BBC	#FIB$V_EXECUTE,(R6),50$	; branch if not execute 
	BBC	#FIB$V_ALT_GRANTED,-
		FIB$L_STATUS(R6),50$	; branch if no read access
	BISB2	#FAB$M_GET,FAB$B_FAC(R8); flag read access also permitted
50$:
	BSBW	RM$OPEN_XAB1		; finish up xab processing


	.SBTTL	RM$SETEBK

;++
;
; RM$SETEBK - check for shared access
;
;  entry point to swap the words of eof block and set ifab bookeeping bit saying file accessed
;
;  set up journaling on the file
;
;  if this is not a sequential file, the shared ifab processing
;  is performed, if needed.
;
;  inputs:
;	r11	impure area address
;	r10	fwa address
;	r9	ifab address
;	r8	fab address
;
;  outputs:
;	r0		- status
;	r1-r7, ap 	- destroyed
;	ifb$v_accessed 	- set
;	ifb$l_ebk      	- filled with swapped ebk words form disk
;--

RM$SETEBK::
	SSB	#IFB$V_ACCESSED,(R9)		; declare file accessed
;
; Deallocate the ATR work area -- we're through with it now
;
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; Save regs
	MOVL	FWA$L_ATR_WORK(R10),R4	; Pass address of scratch page
	BSBW	RM$RET1PAG		; Return scratch page
	CLRL	FWA$L_ATR_WORK(R10)	; Indicate no work area now
	POPR	#^M<R0,R1,R2,R3,R4,R5>	; Restore regs

	ROTL	#16,IFB$L_EBK_DISK(R9),IFB$L_EBK(R9) ; swap words of ebk

;
; Make sure user doesn't intend to write access an ANSI
;	buffer offset (b. o.) tape unless BIO is set
;
	TSTW	IFB$W_BUFFER_OFFSET(R9)		; is there a non-0 b. o.?
	BEQLU	5$				; if 0, skip next two tests
	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),4$ ; if not a tape, error
	BBC 	#IFB$V_WRTACC,(R9),5$		; if no write access, we're cool
	BBS	#FAB$V_BIO,FAB$B_FAC(R8),5$	; write access is ok with BIO
4$:	RMSERR	IFF				;  otherwise no write access
	RSB					;     so cease and desist

;
; set up journaling on the file
;

5$:	BICB2	#IFB$M_NEVER_RU,IFB$B_JNLFLG(R9) ; Ignoring NEVER_RU, is
	TSTB	IFB$B_JNLFLG(R9)		; any journaling bit set?
	BEQL	SHRCHK				; branch if not
;
; Enforce RU bit settings, specifically ONLY_RU
;
	BITB	#IFB$M_RU!IFB$M_ONLY_RU,IFB$B_JNLFLG(R9) ; RU bits set?
	BEQL	20$				; If not, go on with jnl stuff
	MOVL	@#CTL$GL_RUF,R1			; RUF loaded?
	BEQL	10$				; No RUF, verify ONLY_RU clear
	BBS	#RUCB$V_ACTIVE,RUCB$B_CTRL(R1),20$ ; In RU? Then go set up
10$:
	BITB	#IFB$M_ONLY_RU,-		; If ONLY_RU clear (RU
		IFB$B_JNLFLG(R9)		;  must be set), and not
	BEQL	20$				;  in RU then that's ok
	RMSERR	NRU		; However, if ONLY_RU set and not in RU: error
	RSB
	
20$:
	JSB 	RM$ASSJNL			; set up journaling
	BLBC	R0,RETURN			; get out on error
	TSTB	IFB$B_JNLFLG(R9)		; ASSJNL can clear this
	BEQL	SHRCHK				; branch if now clear

;
; Turn off AT for this MAPJNL call so the AT info can be filled in
; during the operation and flushed later.
;
	MOVL	IFB$L_RJB(R9),R1		; get RJB address
	MOVW	RJB$W_FLAGS(R1),-(SP)		; save current flags
	CSB	#RJB$V_AT,RJB$W_FLAGS(R1)	; turn off AT for now
	BISW2	#RJB$M_OPEN,RJB$W_FLAGS(R1)	; set flag that this is an open
	JSB	RM$MAPJNL			; write out mapping entries
	MOVL	IFB$L_RJB(R9),R1		; get RJB address again
	MOVW	(SP)+,RJB$W_FLAGS(R1)		; restore original flags
	BLBC	R0,RETURN			; get out on error
	BBC	#IFB$V_RUP,IFB$B_JNLFLG2(R9),SHRCHK ; branch if not in RU
	JSB	RM$MAPJNL_RU			; write out RU mapping entry
	BLBC	R0,RETURN			; get out on error

SHRCHK:	BBC	#IFB$V_NORECLK,(R9),CHKSHR	; not set, then check sharing

;
; If this is a Recovery Unit Journalable ISAM file which is being
; opened for exclusive access then set the state bit IFB$V_RU_RLK to 
; enable pseudo record locking.
;

EXIT:	CMPB	#IFB$C_IDX,IFB$B_ORGCASE(R9)	; return if this is not an
	BNEQ	RETURN				; access of an index file

	BBC	#IFB$V_RU,IFB$B_JNLFLG(R9),-	; return if this ISAM file is
		RETURN				; not Recovery Unit journallable

	BITB	#FAB$M_SHRGET!FAB$M_SHRPUT-	; return if any form of sharing
		!FAB$M_SHRDEL!FAB$M_SHRUPD-	; is enabled (inter-process or
		!FAB$M_MSE,FAB$B_SHR(R8)	; inter-stream) - record locking
	BNEQ	RETURN				; will already be enabled

	SSB	#IFB$V_RU_RLK,IFB$B_JNLFLG2(R9)	; permit pseudo record locking

RETURN:	RSB


SETNORECLK:
	BBCS	#IFB$V_NORECLK,(R9),EXIT ; set NORECLK & exit (always clear)

CHKSHR:

;
; check whether sharing is required
;

	BBC	#FAB$V_NIL,FAB$B_SHR(R8),10$	; If nil spec'd, check MSE
	BBC	#FAB$V_MSE,FAB$B_SHR(R8),SETNORECLK	; No locking required

	ASSUME	FAB$C_SEQ	EQ	0

10$:	TSTB	IFB$B_ORGCASE(R9)	; is this sequential org?
	BEQL	CHKSEQSHR		; special checks for 512 fix len recs.

SHARE:
	BSBW	RM$INIT_SFSB		; get parent lock for record and
					; bucket locks.
	BLBC	R0,10$			; exit on error.
	PUSHL	R10			; Save FWA address.
	MOVL	R9,R10			; ALBLB wants ifab in r10.
	BSBW	RM$ALBLB		; allocate a BLB to go with BDB (FWA).
	POPL	R10			; Restore FWA address.
	BLBS	R0,EXIT			; finish up
10$:	RSB

UPIERR:	RMSERR	UPI
	RSB

CHKSEQSHR:

;
; want sharing on sequential file - make a few more checks
;
	BBS	#FAB$V_UPI,FAB$B_SHR(R8),SETNORECLK 	; Branch if UPI.
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R9),SHRERR	; Magtape?!? No way!
	BITB	#FAB$M_BIO!FAB$M_BRO,FAB$B_FAC(R8) 	; any form of block i/o?
	BNEQ	UPIERR			       ; UPI must be set for block i/o. 

	ASSUME	FAB$C_SEQ	EQ	0

	CMPB	IFB$B_RFMORG(R9),#FAB$C_FIX ; only for fixed length recs
	BNEQ	SHRERR			; neq sorry
	CMPW	IFB$W_LRL(R9),#512	; 512 byte records only
	BNEQ	SHRERR			; sorry, can't share
	MOVB	#1,IFB$B_BKS(R9)	; bucket size is one

	ASSUME	<IFB$C_SEQ + 1>	EQ	IFB$C_REL

	INCB	IFB$B_ORGCASE(R9)	; presto - now you're relative
	MOVL	#1,IFB$L_DVBN(R9)	; no prologue for seq file
	SSB	#IFB$V_SEQFIL,(R9)	; note this is really seq file
	BRW	SHARE			; finish shared open
SHRERR:
	RMSERR	SHR			; can't do that
	RSB				; get back

;++
;
;  handle access failure
;
;--

ERRACCESS:
	RMSERR	ACC,R1			; default error code
	BRW	RM$MAPERR		; go map error code to rms
					; and return to caller

	.SBTTL	RM$CREACC_SET1

;++
;
; RM$CREACC_SET1 - access, protection, datacheck options fib setup
;
;  this subroutine initializes the access control word of the fib from
;  the various fop options, sets the retrieval window size, and initializes
;  r5 to address at which to build a files attributes list
;
;  inputs:
;	r10	fwa address
;	r9	ifab address
;	r8	fab address
;
;  outputs:
;	r6	fib address
;	r5	address for next entry to be added to attribute's list
;	r0	success/fail status
;
;--

RM$CREACC_SET1::
	MOVAB	@FWA$Q_FIB+4(R10),R6	; get fib address

;
; initialize the access control word.  it is zero; set desired bits.
;

	ASSUME	FIB$L_ACCTL EQ 0
	BBC	#IFB$V_WRTACC,(R9),5$	; branch if read access only
	SSB	#FIB$V_WRITE,(R6)	; set write access bit

;
;  set sharing as desired and determine whether record locking required.
;
;  record locking will be required if there is any form of sharing (inter
;  or intra process) and there can be any writers of the file.
;

5$:	MOVB	FAB$B_SHR(R8),R0	; get shr field
	MOVB	R0,IFB$B_SHR(R9)	; Save share field in IFB
	BBC	#FAB$V_MSE,R0,10$	; branch if no multi-streams
	SSB	#IFB$V_MSE,(R9)		; set mse bit
10$:	BBS	#FAB$V_NIL,R0,20$	; branch if no sharing
	BITB	#FAB$M_PUT!FAB$M_UPD!FAB$M_DEL,R0 ; any form of write sharing?
	BNEQ	30$			; branch if yes
	BISB2	#FIB$M_NOWRITE,(R6)	; disallow other writers
					; at most "get" sharing
	BBC	#IFB$V_WRTACC,(R9),25$	; branch if not write accessed
	BBS	#FAB$V_GET,R0,30$	; branch if allowing other readers
					; default write accessor to nil
20$:	SSB	#FIB$V_NOREAD,(R6)	; disallow other readers
25$:	BBC	#FAB$V_MSE,R0,35$	; branch if no multi streams

;
;  record locking required - unless upi set.  require sharers to specify
;    rms locking.

30$:	CSB	#IFB$V_NORECLK, (R9)	; clear no locking flag.
	MOVAL	IFB$L_BLBFLNK(R9), IFB$L_BLBFLNK(R9) ; Init BLB queue header.
	MOVAL	IFB$L_BLBFLNK(R9), IFB$L_BLBBLNK(R9) ; Init BLB queue header.
	BBS	#FAB$V_UPI,R0,35$	;
	SSB	#FIB$V_RMSLOCK,(R6)	; set fib bit for locking

;
;  set deferred write ifab flag as required
;

35$:	BBC	#FAB$V_DFW+FOP,(R8),40$	; branch if deferred write not
					; specified
	SSB	#IFB$V_DFW,(R9)		; set deferred write flag

;
;  set read checking, write checking, and seq. operations only flags
;

40$:	BBC	#FAB$V_WCK+FOP,(R8),50$	; branch if no write-checking
	BISB2	#1@FIB$V_WRITECK,(R6)	; enable write-checking
	BISB2	#1@FCH$V_WRITCHECK,FWA$W_UCHAR(R10) ; & give file wck attribute
50$:	BBC	#FAB$V_RCK+FOP,(R8),60$	; branch if no read-checking
	SSB	#FIB$V_READCK,(R6)	; enable read-checking
	BISB2	#1@FCH$V_READCHECK,FWA$W_UCHAR(R10) ; & give file rck attribute
60$:	BBC	#FAB$V_SQO+FOP,(R8),70$	; branch if sqo not specified
	SSB	#FIB$V_SEQONLY,(R6)	; set sequential only bit
	SSB	#IFB$V_SQO,(R9)		; and save bit in ifab

;
; if magtape, check and set positioning flags (rwo, pos, nef)
;

70$:	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),80$ ; branch if not magtape
	SSB	#FIB$V_PRSRV_ATR,(R6)	; read rat bits as stored

;
; the rms fop bits for magtape positioning are in the same
; relative position to each other as the corresponding fib bits
; and additionally have the same polarity - use an extract
; and insert field to set them appropriately
; (note:  the wck bit is imbedded - so it gets set or cleared again)
;

	ASSUME	<FAB$V_RWO+1> EQ FAB$V_POS
	ASSUME	<FAB$V_POS+1> EQ FAB$V_WCK
	ASSUME	<FAB$V_WCK+1> EQ FAB$V_NEF
	ASSUME	<FIB$V_REWIND+1> EQ FIB$V_CURPOS
	ASSUME	<FIB$V_CURPOS+1> EQ FIB$V_WRITECK
	ASSUME	<FIB$V_WRITECK+1> EQ FIB$V_UPDATE
	EXTZV	#FAB$V_RWO+FOP,#4,(R8),R0; get the fop bits
	INSV	R0,#FIB$V_REWIND,#4,(R6)

;
;  if this is ufo set fib$v_notrunc unless trn bit set in fac
;

80$:	BBC	#FAB$V_UFO+FOP,(R8),90$ ; branch if not ufo
	BBS	#FAB$V_TRN,FAB$B_FAC(R8),90$ ; branch if trn set
	SSB	#FIB$V_NOTRUNC,(R6)	; don't allow truncates

;
;  check for execute protection
;

90$:	BBC	#FAB$V_EXE,FAB$B_FAC(R8),100$ ; branch if not execute access
	CMPB	IFB$B_MODE(R9),-	;
		#PSL$C_SUPER		; super (or exec or kernel) mode?
	BGTRU	100$			; branch if not (ignore)
	BISB2	#FAB$M_GET,IFB$B_FAC(R9); flag read access also permitted
	SSB	#FIB$V_EXECUTE,(R6)	; have acp check on execute access
	MOVL	#ARM$M_READ,-		; also ask if read access permitted
		FIB$L_ALT_ACCESS(R6)

;
; Set override exclusive access if opening a file for RU recovery.
;

100$:	BBC	#IFB$V_RU_RECVR,-	; skip if not RU recovery.
		IFB$B_RECVRFLGS(R9),-	;
		SETRTV			;
	BISL2	#FIB$M_NOLOCK,-		; set nolock (access regardless) flag.
		FIB$L_ACCTL(R6)		;
	BICL2	#FIB$M_NOREAD!FIB$M_NOWRITE,-
		FIB$L_ACCTL(R6)		; noread/nowrite must be clear.

;
; set the retrieval window size
;

SETRTV:	MOVB	FAB$B_RTV(R8),FIB$B_WSIZE(R6)

;
; the fib is now set up.
; set the attribute control list address into r5
;

	MOVL	FWA$L_ATR_WORK(R10),R5	; Do we need one?
	BNEQ	10$			; If not, don't ask for one

	PUSHR	#^M<R1,R2,R3>		; Save regs
	BSBW	RM$GET1PAG		; Grab a scratch page
	BLBC	R0,20$			; Die if none available
	MOVL	R3,FWA$L_ATR_WORK(R10)	; Save scratch page address
	MOVL	R3,R5			;  and put it in R5
	POPR	#^M<R1,R2,R3>		; Restore regs
10$:	MOVL	#PSL$C_EXEC,508(R5)	; Keep exec mode byte in last lword
	MOVL	#1,R0			; set success
20$:	RSB

	.SBTTL	RM$CREACC_SET2

;++
;
; RM$CREACC_SET2 - set up stat block, fall thru to creac_3
;
;  subroutine to finish fcp access & create setups started by rm$creacc_set1
;
;  if this is for an access it puts an entry on the attributes list
;  to cause the statistics block to be read
;
;  it then adds attribute list entries for rms record attributes,
;  user characteristics, and, if device is magtape, block size.
;  it then ends the attributes list and builds p6 thru p2 of the fcp's
;  qio parameter block and returns.
;
;  inputs:
;	r10	fwa address
;	r5	attributes list next entry address
;
;  outputs:
;	p6 thru p2 on stack
;	r0, r5 destroyed
;--
;
;  entry point to finish fcp access setups
;
;--

RM$CREACC_SET2::
	MOVW	#FWA$S_STATBLK,(R5)+	; specify # of bytes wanted
	MOVW	#ATR$C_STATBLK,(R5)+	; read statistics block
	MOVAB	FWA$T_STATBLK(R10),(R5)+ ; address for read

;
; If magtape, then inquire about buffer offset -- otherwise proceed to
;   CREACC_3.  Note that this inquiry is not made for $CREATE.
;

	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),-
		RM$CREACC_SET3			; magtape? 
	MOVW	#ATR$S_BUFFER_OFFSET,(R5)+ 	; size of b.o. field (2)
	MOVW	#ATR$C_BUFFER_OFFSET,(R5)+ 	; buffer offset item code
	MOVAW	IFB$W_BUFFER_OFFSET(R9),(R5)+ 	; directly to/from ifab

;++
;
; RM$CREACC_SET3 - set up for record attributes and user characteristics
;
;  entry point to finish create function setup without getting a statistics block
;
;	put in entries to cause record attributes and user characteristics
;	to be read/written
;
;--

RM$CREACC_SET3::
	POPL	R0				; save return pc
	MOVW	#<IFB$C_FHAEND-IFB$B_RFMORG>,(R5)+ ; # bytes rec attr to xfer
	MOVW	#ATR$C_RECATTR,(R5)+		; get rms record attributes
	MOVAL	IFB$B_RFMORG(R9),(R5)+		; xfer attr's directly to/from ifab
	MOVW	#ATR$S_UCHAR,(R5)+		; size of user characteristics
	MOVW	#ATR$C_UCHAR,(R5)+		; specify read/write of   "
	MOVAW	FWA$W_UCHAR(R10),(R5)+		; addr to read/write      "
	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),5$; branch if not magtape
	MOVW	#ATR$S_BLOCKSIZE,(R5)+		; specify blocksize size (2)
	MOVW	#ATR$C_BLOCKSIZE,(R5)+		; specify read/write of blksiz
	MOVAL	IFB$L_DEVBUFSIZ(R9),(R5)+ 	; xfer directly to/from ifab
5$:	CLRL	(R5)				; flag end of attribute list

;
; start building qio argument list on stack
;

	PUSHL	#0			; p6
	PUSHL	FWA$L_ATR_WORK(R10)	; p5 = attribute list address
P4_P2:	PUSHAQ	FWA$Q_RNS(R10)		; p4 = resultant name string descriptor
	PUSHAL	FWA$Q_NAME(R10)		; p3 = address of long word
					; to receive resultant string length
	MOVL	#FWA$S_NAMEBUF+FWA$S_TYPEBUF+FWA$S_VERBUF,-
		FWA$Q_RNS(R10) 		; length of rns buffer
	MOVAB	FWA$T_NAMEBUF(R10),FWA$Q_RNS+4(R10) ; overlay input filename
					; with resultant string
	PUSHAQ	FWA$Q_NAME(R10)		; p2 = filename string
	JMP	(R0)			; return to caller

;++
; RM$FCP_P4_P2 - push p4 thru p2 onto stack
;
;  entry point to push p4 through p2 onto stack for fcp argument list
;  build for the $erase function (delete file)
;--

RM$FCP_P4_P2::
	POPR	#^M<R0>			; save return pc
	BRB	P4_P2			; go do it

	.SBTTL	RM$DEACCESS - PERFORM FCP DEACCESS FUNCTION

;++
;
; RM$DEACCESS - perform file deaccess function
;
; This routine builds an attribute list to cause the record
; attributes in the ifab to be rewritten to the file
; header, if the file was write accessed, and
; calls rm$fcpfnc to perform the deaccess.
;
; Calling sequence:
;
;	BSBW	RM$DEACCESS
;
; Input Parameters:
;
;	r11	impure area address
;	r9	ifab address
;	r8	fab address
;
; Implicit Inputs:
;
;	ifb$l_chnl
;
; outputs:
;
;	r0	status code
;	r1-r6,ap destroyed
;
; Implicit Outputs:
;
;	ifb$l_ios
;
; Completion Codes:
;
;	standard rms, in particular, suc, dac, fno.
;
; Side Effects:
;
;	on return rms may be running at ast level
;	requiring a reprobe of any user structures except
;	the fab.
;--



;++
;
;  xab processing arguments for close
;
;--

CLS_XAB_ARGS:
	.BYTE	XAB$C_RDT,XAB$C_RDTLEN,XBC$C_CLSRDT ; handle rdt xab
	.BYTE	XAB$C_PRO,XAB$C_PROLEN_V3,XBC$C_CLSPRO ; handle pro xab
	.BYTE	0

;++
;
;  perform network deaccess function
;
;--

	ASSUME	IFB$V_DAP GE 56
	ASSUME	IFB$V_DAP LE 63
	ASSUME	IFB$V_NSP GE 56
	ASSUME	IFB$V_NSP LE 63
BKP3	= <56/8>				; byte offset to flags byte
NETMASK = <1@<IFB$V_DAP-56>> ! <1@<IFB$V_NSP-56>> ; network access-type flags

NTDAC:
	BBCC	#IFB$V_DAP_OPEN,(R9),10$ ; branch if close not necessary
	BBS	#IMP$V_IORUNDOWN,(R11),10$ ; branch if i/o rundown in progress
	BSBW	NT$CLOSE		; yes, close it there
	BLBC	R0,20$			; branch on failure
10$:	BSBW	NT$DEACCESS		; destroy logical link with partner
	BICB2	#NETMASK,BKP3(R9)	; clear network access-type flags
	BLBC	R0,30$			; branch on failure
	BSBW	NT$NWA_FREE		; discard nwa
	RMSSUC				; show success
20$:	RSB				; exit to caller
30$:	BRW	ERRDAC			; branch aid

;++
;
;  entry point for rm$deaccess
;
;--

RM$DEACCESS::
	$TSTPT	DEACCES
	BBS	#DEV$V_NET,IFB$L_PRIM_DEV(R9),NTDAC ; br if network device
	RMSSUC	SUC,R6			; indicate success

	PUSHL	#0			; signal end of attribute list
	MOVAB	CLS_XAB_ARGS,AP		; arg list addr for rm$xab_scan
	BSBW	RM$XAB_SCAN		; process xab chain
	MOVL	R0,R6			; save status
;
; build attribute list on stack to rewrite record attributes
;

	BBC	#IFB$V_WRTACC,(R9),10$	; branch if not write accessed
	BBC	#IFB$V_SEQFIL,(R9),5$	; skip next few lines if really rel
	ASSUME	<IFB$C_SEQ + 1> EQ IFB$C_REL
	DECB	IFB$B_ORGCASE(R9)	; turn back into sequential file
	CLRB	IFB$B_BKS(R9)		; make sure this clear also
5$:
	PUSHAL	IFB$B_RFMORG(R9)	; write attributes from ifab
	PUSHL	#<ATR$C_RECATTR@16>+<IFB$C_FHAEND-IFB$B_RFMORG>
					; length & record attriubtes code

;
;  put org back into rfmorg byte
;

	INSV	IFB$B_ORGCASE(R9),#IFB$V_ORG,#IFB$S_ORG,IFB$B_RFMORG(R9)

;
;  allocate a fib to handle various options
;

10$:	MOVZBL	#FIB$C_LENGTH,R2	; set size of fib
	BSBW	RM$GETSPC1		; allocate fib
					; build fib descriptor on stack
	PUSHL	R1			; addr of fib
	MOVZBL	#FIB$C_LENGTH,-(SP)	; and length of fib

;
;  handle "tef" option (truncate at end of file) if this is a write-accessed
;  disk file.
;

	TSTB	IFB$B_ORGCASE(R9)		; check for seq file
	BNEQ	20$				; don't do it if not seq
	TSTL	IFB$L_SFSB_PTR(R9)		; check for shared file
	BNEQ	20$				; bypass if shared file
	BBS	#IFB$V_TEF,(R9),15$		; branch if auto extend set flag
	BBC	#FAB$V_TEF+FOP,(R8),20$		; branch if option not speced
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R9),20$ ; or if not disk
	BBC	#IFB$V_WRTACC,(R9),20$		; or if not write accessed

	ASSUME	FIB$V_TRUNC	GE	8

15$:	BISB2	#<FIB$M_TRUNC @-8>,FIB$W_EXCTL+1(R1) ; ask for truncate
	MOVL	IFB$L_EBK(R9),FIB$L_EXVBN(R1)	; truncate at eof block
	TSTW	IFB$W_FFB(R9)			; any bytes used this block?
	BEQL	20$				; branch if none
	INCL	FIB$L_EXVBN(R1)			; yes - don't truncate block

;
;  check for magtape rewind
;

20$:	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),40$ ; branch if not magtape
	BBC	#IFB$V_RWC,(R9),40$	; branch if not speced
	BISB2	#FIB$M_REWIND,FIB$L_ACCTL(R1) ; cause rewind to happen

;
;  swap the words of ifb$l_hbk and ifb$l_ebk to match files-11
;  on-disk structure
;

40$:	ROTL	#16,IFB$L_HBK(R9),IFB$L_HBK_DISK(R9)
	ROTL	#16,IFB$L_EBK(R9),IFB$L_EBK_DISK(R9)

;
;  do the deaccess qio
;

	MOVZBL	#IO$_DEACCESS,R0	; deaccess function code
	PUSHL	#0			; p6 = 0 for qio
	PUSHAL	12(SP)			; p5 = address of attribute list
	BSBW	RM$FCPFNC_P4		; do the deaccess acp function
	POPR	#^M<R2,R4>		; get fib len & addr
50$:	TSTL	(SP)+			; remove attribute list from stack
	BNEQ	50$			;    "
	PUSHL	R0			; save status code
	BSBW	RM$RETSPC1		; deallocate the fib
	POPR	#^M<R0>			; restore the status code
	BLBC	R0,ERRDAC		; branch if error
	BLBS	R6,60$			; branch if no xab error
	MOVL	R6,R0			; report xab error
60$:	RSB

ERRDAC:
	RMSERR	DAC,R1			; default error code
	BRW	RM$MAPERR		; go handle error

	.END
