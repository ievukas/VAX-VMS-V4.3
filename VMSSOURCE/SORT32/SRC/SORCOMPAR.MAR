	.TITLE	SOR$COMPARE		Compare data fields
	.IDENT	'V04-000'		; File: SORCOMPAR.MAR  Edit: PDG022
	.SBTTL	Copyright Notice
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.PAGE
	.SBTTL	Program description
;++
;
; FACILITY:
;
;	Compare data fields
;
; ABSTRACT:
;
;	NONE
;
; ENVIRONMENT:
;
;	Native mode, User mode, AST reentrant
;
; AUTHOR:
;
;	Peter D Gilbert, September 1982
;
; MODIFIED BY:
;
;	T03-016	PDG016	1-Sep-1982
;		Original
;	T03-017	Added SOR$$CONVERT.  PDG 21-Dec-1982
;	T03-018	Handle collating sequences.  PDG 22-Dec-1982
;	T03-019	Fetch (and decrement) the source length after the MOVC3 for NR.
;		PDG 29-Dec-1982
;	T03-020	New interface for collating sequences.  PDG 26-Jan-1983
;	T03-021	Add COM$B_PAD.  PDG 8-Feb-1983
;	T03-022	Modify interface for collating sequences.  PDG 7-Mar-1983
;--

;+
; Note that, due to the way registers R0-R3 are used as parameters in the
; decimal instructions, LIB$FIXUP_DEC will be unable to repair the operands
; in the case of a reserved operand fault.
;
; Note that lengths of passed parameters are given as DSC lengths
; (i.e., number of bytes, except for packed decimal);
; The hardware instructions work in digits.
;-

	.DSABL	GLOBAL

	.EXTRN	COM$L_COLLATE	; Offset from R11 of COM_COLLATE
	.EXTRN	COM$B_PAD	; Offset from R11 of COM_PAD

	.EXTRN	SOR$_BAD_KEY
	.EXTRN	LIB$AB_CVTTP_O
	.EXTRN	LIB$AB_CVTTP_U
	.EXTRN	LIB$AB_CVTTP_Z
	.EXTRN	LIB$AB_CVTPT_O
	.EXTRN	LIB$AB_CVTPT_U
	.EXTRN	LIB$AB_CVTPT_Z
	.EXTRN	LIB$AB_CVT_U_O

	.PSECT	SOR$RO_CODE	NOVEC,NOWRT,RD,EXE,SHR,LCL,REL,CON,PIC,LONG


; Offsets from AP of the parameters
;
DTYPE	= 4			; Datatype of keys
FLD1	= 8			; Address of length/address of first field
FLD2	= 12			; Address of length/address of second field

	.ENTRY	SOR$$COMPARE, ^M<R2,R3,R4,R5>
	;
	; This routine compares two fields
	;
	; Fetch the descriptions into registers
	;
	MOVQ	@FLD1(AP), R0
	MOVQ	@FLD2(AP), R2
	;
	; Case on the datatype
	;
	CASEB	DTYPE(AP), #0, #<1$-0$-2>/2
0$:	.WORD	Z	- 0$	; 0
	.WORD	V	- 0$	; 1
	.WORD	BU	- 0$	; 2
	.WORD	WU	- 0$	; 3
	.WORD	LU	- 0$	; 4
	.WORD	QU	- 0$	; 5
	.WORD	B	- 0$	; 6
	.WORD	W	- 0$	; 7
	.WORD	L	- 0$	; 8
	.WORD	Q	- 0$	; 9
	.WORD	F	- 0$	; 10
	.WORD	D	- 0$	; 11
	.WORD	FC	- 0$	; 12
	.WORD	DC	- 0$	; 13
	.WORD	T	- 0$	; 14
	.WORD	NU	- 0$	; 15
	.WORD	NL	- 0$	; 16
	.WORD	NLO	- 0$	; 17
	.WORD	NR	- 0$	; 18
	.WORD	NRO	- 0$	; 19
	.WORD	NZ	- 0$	; 20
	.WORD	P	- 0$	; 21
	.WORD	ZI	- 0$	; 22
	.WORD	ZEM	- 0$	; 23
	.WORD	DSC	- 0$	; 24
	.WORD	OU	- 0$	; 25
	.WORD	O	- 0$	; 26
	.WORD	G	- 0$	; 27
	.WORD	H	- 0$	; 28
	.WORD	GC	- 0$	; 29
	.WORD	HC	- 0$	; 30
	.WORD	CIT	- 0$	; 31
	.WORD	BPV	- 0$	; 32
	.WORD	BLV	- 0$	; 33
	.WORD	1$	- 0$	; 34
	.WORD	ADT	- 0$	; 35
	.WORD	1$	- 0$	; 36
	.WORD	VT	- 0$	; 37
1$: V: FC: DC: ZI: ZEM: DSC: GC: HC: CIT: BPV: BLV: VT:
	MOVL	#SOR$_BAD_KEY, R0
	RET
T:	MOVL	COM$L_COLLATE(R11), R5
	BEQL	Z
	JSB	@0(R5)
	RET
Z:	CMPC5	R0, (R1), W^COM$B_PAD(R11), R2, (R3)
	BRB	CMPU
BU:	CMPB	(R1), (R3)
	BRB	CMPU
WU:	CMPW	(R1), (R3)
	BRB	CMPU
OU:	CMPL	12(R1), 12(R3)
	BNEQ	CMPU
	BRB	O_1
O:	CMPL	12(R1), 12(R3)
	BNEQ	CMPS
O_1:	CMPL	8(R1), 8(R3)
	BNEQ	CMPU
QU:	CMPL	4(R1), 4(R3)
	BEQL	LU
CMPS:	BLSS	M1
	BGTR	P1
	CLRL	R0
	RET
ADT: Q:	CMPL	4(R1), 4(R3)	; Note that ADT is considered to be signed
	BNEQ	CMPS
LU:	CMPL	(R1), (R3)
CMPU:	BLSSU	M1
	BGTRU	P1
	CLRL	R0
	RET
M1:	MNEGL	#1, R0
	RET
P1:	MOVL	#1, R0
	RET
B:	CMPB	(R1), (R3)
	BRB	CMPS
W:	CMPW	(R1), (R3)
	BRB	CMPS
L:	CMPL	(R1), (R3)
	BRB	CMPS
F:	CMPF	(R1), (R3)
	BRB	CMPS
D:	CMPD	(R1), (R3)
	BRB	CMPS
G:	CMPG	(R1), (R3)
	BRB	CMPS
H:	CMPH	(R1), (R3)
	BRB	CMPS
P:	CMPP4	R0, (R1), R2, (R3)
	BRB	CMPS
NLO:	MOVAB	-64(SP), SP			; Make room on the stack
	MOVZBL	(R1), R2			; Fetch the overpuched byte
	MOVB	G^LIB$AB_CVTTP_O[R2], -(SP)	; Translate to packed
	MOVB	#1, -(SP)			; Make packed number non-zero
	MOVC3	R0, (R1), 3(SP)			; Move the string
	CVTPS	#2, (SP), #2, 2(SP)		; Convert packed to separate
	ADDL2	#2, SP				; Pop the packed number
	CVTSP	@FLD1(AP), (SP), #31, 32+00(SP)	; Convert separate to packed
	MOVQ	@FLD2(AP), R0
	MOVZBL	(R1), R2			; Fetch the overpuched byte
	MOVB	G^LIB$AB_CVTTP_O[R2], -(SP)	; Translate to packed
	MOVB	#1, -(SP)			; Make packed number non-zero
	MOVC3	R0, (R1), 3(SP)			; Move the string
	CVTPS	#2, (SP), #2, 2(SP)		; Convert packed to separate
	ADDL2	#2, SP				; Pop the packed number
	CVTSP	@FLD2(AP), (SP), #31, 32+16(SP)	; Convert separate to packed
	ADDL2	#32, SP
	BRB	CMPP31
NR:	MOVAB	-64(SP), SP
	DECL	R0
	MOVB	(R1)[R0], (SP)
	MOVC3	R0, (R1), 1(SP)
	SUBW3	#1, @FLD1(AP), R0
	CVTSP	R0, (SP), #31, 32+00(SP)
	MOVQ	@FLD2(AP), R0
	DECL	R0
	MOVB	(R1)[R0], (SP)
	MOVC3	R0, (R1), 1(SP)
	SUBW3	#1, @FLD1(AP), R0
	CVTSP	R0, (SP), #31, 32+16(SP)
	ADDL2	#32, SP
;	BRB	CMPP31
CMPP31:	CMPP3	#31, (SP), 16(SP)
	BRW	CMPS
NU:	SUBL2	#32, SP
	CVTTP	R0, (R1), G^LIB$AB_CVTTP_U, #31, 00(SP)
	MOVQ	@FLD2(AP), R0
	CVTTP	R0, (R1), G^LIB$AB_CVTTP_U, #31, 16(SP)
	BRB	CMPP31
NL:	SUBL2	#32, SP
	DECL	R0
	CVTSP	R0, (R1), #31, 00(SP)
	MOVQ	@FLD2(AP), R0
	DECL	R0
	CVTSP	R0, (R1), #31, 16(SP)
	BRB	CMPP31
NRO:	SUBL2	#32, SP
	CVTTP	R0, (R1), G^LIB$AB_CVTTP_O, #31, 00(SP)
	MOVQ	@FLD2(AP), R0
	CVTTP	R0, (R1), G^LIB$AB_CVTTP_O, #31, 16(SP)
	BRB	CMPP31
NZ:	SUBL2	#32, SP
	CVTTP	R0, (R1), G^LIB$AB_CVTTP_Z, #31, 00(SP)
	MOVQ	@FLD2(AP), R0
	CVTTP	R0, (R1), G^LIB$AB_CVTTP_Z, #31, 16(SP)
	BRB	CMPP31


; Offsets from AP of the parameters
;
DTYPE	= 4			; Datatype of keys
FLD1	= 8			; Address of length/address of constant
FLD2	= 12			; Address of length/address of field

	.ENTRY	SOR$$CONVERT, ^M<R2,R3,R4,R5,R6>
	;
	; This routine converts a decimal string constant to an appropriate
	; datatype.
	;
	MOVQ	@FLD1(AP), R0
	SUBL2	#16, SP
	;
	; First, convert the number to packed
	;
	CVTTP	R0, (R1), G^LIB$AB_CVTTP_U, #31, (SP)
	;
	; Now case on the destination datatype
	;
	MOVQ	@FLD2(AP), R2
	CASEB	DTYPE(AP), #0, #<1$-0$-2>/2
0$:	.WORD	vZ	- 0$	; 0
	.WORD	vV	- 0$	; 1
	.WORD	vBU	- 0$	; 2
	.WORD	vWU	- 0$	; 3
	.WORD	vLU	- 0$	; 4
	.WORD	vQU	- 0$	; 5
	.WORD	vB	- 0$	; 6
	.WORD	vW	- 0$	; 7
	.WORD	vL	- 0$	; 8
	.WORD	vQ	- 0$	; 9
	.WORD	vF	- 0$	; 10
	.WORD	vD	- 0$	; 11
	.WORD	vFC	- 0$	; 12
	.WORD	vDC	- 0$	; 13
	.WORD	vvT	- 0$	; 14
	.WORD	vNU	- 0$	; 15
	.WORD	vNL	- 0$	; 16
	.WORD	vNLO	- 0$	; 17
	.WORD	vNR	- 0$	; 18
	.WORD	vNRO	- 0$	; 19
	.WORD	vNZ	- 0$	; 20
	.WORD	vP	- 0$	; 21
	.WORD	vZI	- 0$	; 22
	.WORD	vZEM	- 0$	; 23
	.WORD	vDSC	- 0$	; 24
	.WORD	vOU	- 0$	; 25
	.WORD	vO	- 0$	; 26
	.WORD	vG	- 0$	; 27
	.WORD	vH	- 0$	; 28
	.WORD	vGC	- 0$	; 29
	.WORD	vHC	- 0$	; 30
	.WORD	vCIT	- 0$	; 31
	.WORD	vBPV	- 0$	; 32
	.WORD	vBLV	- 0$	; 33
	.WORD	1$	- 0$	; 34
	.WORD	vADT	- 0$	; 35
	.WORD	1$	- 0$	; 36
	.WORD	vvVT	- 0$	; 37
1$: vV: vFC: vDC: vZI: vZEM: vDSC: vGC: vHC: vCIT: vBPV: vBLV: vvVT:
	MOVL	#SOR$_BAD_KEY, R0
	RET
TWO_32:	.PACKED	4294967296		; 2**32
vZ: vvT: vBU: vWU: vLU: vQU: vB: vW: vL: vQ: vOU: vO: vADT:
	SUBL2	#32, SP
	CLRL	R6
	BRB	20$
10$:	MOVL	FLD2(AP), R2
	ADDL3	4(R2), R6, R2
	MOVL	R0, -4(R2)
20$:	DIVP	#10, TWO_32, #31, 32(SP), #31, 16(SP)
	MULP	#10, TWO_32, #31, 16(SP), #31, 00(SP)
	SUBP4	#31, 00(SP), #31, 32(SP)
	CVTPL	#31, 32(SP), R0
	ACBW	@FLD2(AP), #4, R6, 10$
	MOVQ	@FLD2(AP), R2
	SUBW2	R6, R2
	ADDL2	#4, R2
	ASHL	#3, R2, R2
	INSV	R0, #0, R2, -4(R3)[R6]
	BRB	JOIN
vNU:	CVTPT   #31, (SP), G^LIB$AB_CVTPT_U, R2, (R3)
	BRB	JOIN
vNL:	DECL	R2
	CVTPS   #31, (SP), R2, (R3)
	BRB	JOIN
vNLO:	MOVAB   G^LIB$AB_CVT_U_O-^A/0/, R4
	CVTPT   #31, (SP), G^LIB$AB_CVTPT_U, R2, (R3)
	BGEQ    1$
	ADDL2   #10, R4
1$:	MOVZBL  (R3), R0
	MOVB    (R4)[R0], (R3)
	BRB	JOIN
vNR:	DECL	R2
	CVTPS   #31, (SP), R2, (R3)
	MOVQ	@FLD2(AP), R2
	SUBL3	#1, R2, R0
	MOVC5	R0, 1(R3), (R3), R2, (R3)
	BRB	JOIN
vNRO:	CVTPT   #31, (SP), G^LIB$AB_CVTPT_O, R2, (R3)
	BRB	JOIN
vNZ:	CVTPT   #31, (SP), G^LIB$AB_CVTPT_Z, R2, (R3)
	BRB	JOIN
vP:	ASHP	#0, #31, (SP), #0, R2, (R3)
;	BRB	JOIN
JOIN:	MOVL	#1, R0
	RET

	.MACRO	CVTPF	X
	CLRB	-(SP)
	CLR'X	(R4)
	MOVL	#3, R6
10$:	MOVB	4(SP), -(SP)
	CVTPL	#9, 1(SP), 1(SP)
	MOVB	(SP)+, 4(SP)
	CVTL'X	(SP)+, R0
	MUL'X'2	#100000000, (R4)	; Multiply by 10**8
	ADD'X'2	R0, (R4)
	SOBGEQ	R6, 10$	
	EXTZV	#0, #8, (SP), R0
	BBC	R0, I^#^B101000, 20$
	MNEG'X	(R4), (R4)
20$:	MOVL	#1, R0
	RET
	.ENDM

vF:	CVTPF	F
vD:	CVTPF	D
vG:	CVTPF	G
vH:	CVTPF	H

	.END
