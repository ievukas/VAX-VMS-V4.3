MODULE PAS$STATUS ( %TITLE 'Get status of last I/O operation'
		IDENT = '1-001'			! File: PASSTATUS.B32 Edit: SBL1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains a procedure which implements the
!	VAX-11 Pascal STATUS function.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$STATUS,					! Return file status
    STATUS_HANDLER;				! Local handler

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE

%SBTTL 'PAS$STATUS - Return file status'
GLOBAL ROUTINE PAS$STATUS (
	PFV: REF $PAS$PFV_FILE_VARIABLE 	! File variable
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure implements the VAX-11 Pascal STATUS function.
!	It returns an integer value which indicates the status of the
!	last operation on the specified file.  A negative result indicates
!	that the file is at EOF, but that no error has occurred.  A zero
!	result indicates that no error has occurredm and the file is not
!	at EOF.  A positive result indicates that the last operation
!	on the file caused an error, and the specific integer value
!	denotes which error occurred.
!
!	Symbols of the form PAS$K_xxx are defined that describe the
!	result of PAS$STATUS.  They are:
!		PAS$K_EOF	= -1
!		PAS$K_SUCCESS	= 0
!		PAS$K_abcmnoxyz = positive integer, where "abcmnoxyz"
!				  is the same as for the equivalent
!				  error condition code name.  For
!				  example, if the last error to occur
!				  on the file was PAS$_FAIGETLOC,
!				  PAS$STATUS will return PAS$K_FAIGETLOC.
!
! CALLING SEQUENCE:
!
!	Status.wl.v = PAS$STATUS (PFV.mr.r)
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	If lazy-lookahead is in progress, it is resolved.  If an error
!	occurs while resolving lazy-lookahead, PAS$STATUS returns the
!	status of that error.
!
! SIGNALLED ERRORS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,	! File Control Block
	STATUS,					! Function result
	PFV_ADDR: VOLATILE,			! Enable argument
	UNWIND_ACT: VOLATILE,			! Enable argument
	ERROR_ADDR: VOLATILE;			! Enable argument

    !+
    ! Enable our local error handler.
    !-

    ENABLE 
	STATUS_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);

    PFV_ADDR = PFV [PFV$R_PFV];	! Set enable argument

    !+
    ! Validate PFV and get FCB.
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;		! Unlock file on unwind

    !+
    ! Resolve lazy lookahead if necessary.  If an error occurs, our
    ! handler will return to our caller with the error code.
    !-

    IF NOT .PFV [PFV$V_VALID]
    THEN
	PAS$$LOOK_AHEAD (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! If file is not open, get the status from the FCB pointer in the PFV
    ! which has as a synonmym the field PFV$L_STATUS.
    ! It is stored there for errors which occur when the file is not
    ! open.
    !-

    IF NOT .PFV [PFV$V_OPEN]
    THEN
	STATUS = .PFV [PFV$L_STATUS]
    ELSE
	BEGIN

	!+
	! The file is open.  Look at the status in the FCB.  If zero and the
	! file is at EOF, return -1.  Otherwise, return the status from the FCB.
	!-
    
	STATUS = .FCB [FCB$L_STATUS];
	IF (.STATUS EQL 0) AND (.FCB [FCB$V_EOF])
	THEN
	    STATUS = -1;
	END;

    PFV [PFV$V_LOCK] = 0;			! Unlock file
    RETURN .STATUS;				! Return status value

    END;					! End of routine PAS$STATUS

!<BLF/PAGE>

%SBTTL 'STATUS_HANDLER - Local handler'
ROUTINE STATUS_HANDLER (
    	SIGNAL_ARGS: REF BLOCK [, BYTE], 	! Signal arguments array
    	MECH_ARGS: REF BLOCK [, BYTE],		! Mechanism arguments array
    	ENABLE_ARGS: REF VECTOR [, LONG]	! Enable arguments array
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the condition handler enabled PAS$STATUS.  If the current
!	signal is a Pascal error on the file our establisher was called
!	with, we unwind to the caller of PAS$STATUS with R0 being the
!	status code of the error.
!
!	Upon an unwind, the file variable is unlocked.
!
! CALLING SEQUENCE:
!
!	status.wlc.v = STATUS_HANDLER (SIGNAL_ARGS.rl.ra, MECH_ARGS.rl.ra,
!				       ENABLE_ARGS.rl.ra)
!
! FORMAL PARAMETERS:
!
!	SIGNAL_ARGS	- The signal argument list.
!
!	MECH_ARGS	- The mechanism argument list.
!
!	ENABLE_ARGS	- An array with the following
!			  format:
!
!				+----------------+
!				|   ENB_COUNT    |  <-- ENABLE_ARGS
!				+----------------+
!				|  ENB_PFV_ADDR  |
!				+----------------+
!				| ENB_UNWIND_ACT |
!				+----------------+
!				| ENB_ERROR_ADDR |
!				+----------------+
!
!			  ENB_COUNT is the count of following enable arguments.
!			  The count is always at least 2.
!
!			  ENB_PFV_ADDR - If non-zero, the address of a longword
!			  containing the PFV our establisher is operating on.
!
!			  ENB_UNWIND_ACT - Specifies the action
!			  to take on an unwind.  The values are:
!			   PAS$K_UNWIND_NOP - Do nothing
!			   PAS$K_UNWIND_UNLOCK - Unlock PFV
!
!			  ENB_ERROR_ADDR - Ignored here.
!
! IMPLICIT INPUTS:
!
!	The signaller's PFV placed as the first FAO argument in the primary
!	signalled message.
!
! IMPLICIT OUTPUTS:
!
!	May clear PFV$V_LOCK upon unwind.
!
! ROUTINE VALUE:
!
!	SS$_RESIGNAL
!
! SIDE EFFECTS:
!
!	May cause an unwind.
!
!--

    BEGIN

    LITERAL
	ENB_COUNT = 0,		! Count of enable arguments
	ENB_PFV_ADDR = 1,	! Address of address of PFV
	ENB_UNWIND_ACT= 2,	! Address of unwind action
	ENB_ERROR_ADDR = 3;	! Address of address of unwind PC

    !+
    ! Determine if this is an unwind.
    !-

    IF .SIGNAL_ARGS [CHF$L_SIG_NAME] EQLU SS$_UNWIND
    THEN
	BEGIN
	IF ..ENABLE_ARGS [ENB_UNWIND_ACT] NEQ PAS$K_UNWIND_NOP
	THEN
	    BEGIN

	    !+
	    ! Get our establisher's PFV.
	    !-

	    LOCAL
		PFV: REF $PAS$PFV_FILE_VARIABLE;
	    PFV = ..ENABLE_ARGS [ENB_PFV_ADDR];	! Get PFV address

	    PFV [PFV$V_LOCK] = 0;	! Unlock PFV
	    END;
	END

    ELSE

	BEGIN

	LOCAL
	    COND_NAME: BLOCK [4, BYTE],	! Primary condition name
	    COND_CODE;			! Sequence number of error

	!+
	! Get primary condition name.
	!-
    
	COND_NAME = .SIGNAL_ARGS [CHF$L_SIG_NAME];

	!+
	! Is this a PAS$ error?  If not, resignal.
	!-

	IF .COND_NAME [STS$V_FAC_NO] NEQU PAS$_FACILITY
	THEN
	    RETURN SS$_RESIGNAL;

	!+
	! See if the error message is one which is "trapped"
	! by ERROR:=CONTINUE.  This is done by comparing the
	! message number against a select range.  These are also
	! the messages which STATUS will work on.
	!-

	COND_CODE = .COND_NAME [STS$V_CODE];	! Get error number
	IF .COND_CODE GEQU PAS$$K_MSGCONTLO AND 	! Lowest number
	   .COND_CODE LEQU PAS$$K_MSGCONTHI	! Highest number
	THEN
	    BEGIN

	    !+
	    ! See if the PFVs match.  The signaller's PFV is the
	    ! first FAO parameter in the primary message.
	    !-

	    IF .SIGNAL_ARGS [12,0,32,0] EQLA ..ENABLE_ARGS [ENB_PFV_ADDR]
	    THEN
		!+
		! We want to return to the caller of PAS$STATUS with the
		! error number.
		!
		! Place it in the mechanism args list and do a default
		! unwind.
		!-

		BEGIN
		MECH_ARGS [CHF$L_MCH_SAVR0] = .COND_CODE - PAS$$K_MSGCONTLO;
		IF NOT $UNWIND ()
		THEN
		    $PAS$BUGCHECK (BUG_UNWINDFAIL);
		END;
	    END;
	END; 	
	
    RETURN SS$_RESIGNAL;			! Resignal error

    END;					! End of routine STATUS_HANDLER

!<BLF/PAGE>

END						! End of module PAS$STATUS

ELUDOM
