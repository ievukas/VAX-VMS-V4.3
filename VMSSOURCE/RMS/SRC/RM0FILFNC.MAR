	$BEGIN	RM0FILFNC,000,RM$RMS0,<FILE FUNCTIONS MODULE>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;	this module includes various routines to
;	perform files-11 primitive functions.
;
;
; Environment:
;		star processor running starlet exec.
;
; Author:	L F Laverdure,	 creation date: 11-march-77
;
; Modified By:
;
;	V03-042	RAS0279		Ron Schaefer		26-Mar-1984
;		Add additional system errors to RM$MAPERR:
;			SS$_IVDEVNAM --> RMS$_DEV
;			SS$_DEVALLOC --> RMS$_DNR
;
;	V03-041	DGB0019		Donald G. Blair		05-Mar-1984
;		Completely reorganize RM$FILFNC and its alternate
;		entry points as part of the restructuring necessary
;		to implement access mode protected files. 
;
;	V03-040	KBT0207		Keith B. Thompson	23-Aug-1982
;		Reorganize psects
;
;	V03-039	KPL0013		Peter Lieberwirth	 4-Feb-1982
;		Map DEADLOCK and EXENQLM system error messages.
;
;	V03-038	KPL0012		Peter Lieberwirth	19-Aug-1981
;		Special case some system error messages from the lock
;		manager in RM$MAPERR.  Also, reorder somewhat the entries
;		in the table, putting more likely errors in front.
;
;	V03-037	CDS0002		C Saether	18-Jun-1981
;		Add RMS error codes definitions.
;
;	V03-036	KPL0011		Peter Lieberwirth	 8-Jun-1981
;		Add $ENQ codes to maptable for RM$MAPERR.
;
;	V03-035	CDS0001		C Saether	29-Dec-1980	15:10
;		Remove code for ACT error (not referenced).
;
;	V034	REFORMAT	Ken Henderson	29-JUL-1980	16:18
;		code was reformatted
;
;	V033			Tim Halvorsen	18-SEP-1979
;		extracted rm$setdid into rm0setdid module.
;
;	V032	RAN0003		L F Laverdure	10-OCT-1978	13:40
;		file sharing code modifications
;
; Revision History:
;
;	L F Laverdure,      10-OCT-1978  13:40	; file sharing modifications
;
;	L F Laverdure,      11-AUG-1978  17:14	; add rm$fcpfnc_alt5 entry point
;
;	L F Laverdure,      10-JUL-1978  11:51
;		mod's for mbf support for seq files
;--
;


	.SBTTL	DECLARATIONS

;
; Macros:
;

	$IODEF
	$SSDEF
	$FABDEF
	$FWADEF
	$IFBDEF
	$IRBDEF
	$FIBDEF
	$QIODEF
	$RMSDEF

	.SBTTL	RM$FCPFNC - ROUTINE TO ISSUE A FILE FUNCTION QIO

;++
; RM$FCPFNC
; RM$FCPEXTEND
; RM$FCPFNC_P4
; RM$FCPFNC_NOFIB
;
; this routine completes the qio argument list,
; issues the qio, and awaits completion of
; the function.
;
; Calling sequence:
;
;	bsbw	rm$fcpfnc
;	bsbw	rm$fcpextend
;	bsbw	rm$fcpfnc_p4
;	bsbw	rm$fcpfnc_nofib
;
; Input Parameters:
;
;	r11	impure area address
;	r10	fwa address (input for rm$fcpfnc)
;	r9	ifab/irab address
;	r8	fab/rab address
;	r0	qio function code (not an input for rm$fcpextend)
;
; Implicit Inputs:
;
;	ifb$l_chnl	-  i/o channel
;	fwa$q_fib	-  fib descriptor (and buffer)
;			-  (note: input for entry at rm$fcpfnc only)
;	see also documentation preceding each entry point
;
; outputs:
;
;	r0	status code
;	r1-r4,ap destroyed
;
; Implicit Outputs:
;
;	ifb$l_ios	-  i/o status block filled in
;	( or irb$l_ios if r9 = irab )
;	fwa$q_fib	-  filled in with file function result
;
; Completion Codes:
;
;	qio status code.
;
; Side Effects:
;
;	on return rms will be running at ast level.
;
;--


;
; r0 contains qio function code
; p2-p6 already on stack.
; p1 will point to fib descriptor in fwa
;

RM$FCPFNC::
	$TSTPT	FCPFNC
	POPL	R4			; R4 = return pc 
	PUSHAQ	FWA$Q_FIB(R10)		; p1 = fib descriptor addr

;
; r0 contains qio function code
; p1 thru p<N> are on stack
; finish building qio argument list on stack
;

FCPCOM:	MOVL	(SP),R1			; r1 = fib descriptor address
	MOVL	4(R1),R1		; r1 = fib address
FCPCOM_NOFIB:
	ASSUME	QIO$_ASTPRM EQ <QIO$_P1 - 4>
	PUSHL	R9			; astprm = ifab addr
	ASSUME	QIO$_ASTADR EQ <QIO$_ASTPRM -4>
	PUSHAL	W^RM$STALLAST		; ast address
	ASSUME	QIO$_IOSB EQ <QIO$_ASTADR -4>
	PUSHAL	IFB$L_IOS(R9)		; i/o status block addr
	ASSUME	QIO$_FUNC EQ <QIO$_IOSB -4>
	PUSHL	R0			; qio function from caller
	ASSUME	QIO$_CHAN EQ <QIO$_FUNC - 4>
	MOVL	R9,R0			; set ifab/irab addr
	ASSUME	IFB$B_BID EQ IRB$B_BID
	ASSUME	IFB$C_BID&1 EQ 1
	ASSUME	IRB$C_BID&1 EQ 0
	BLBS	IFB$B_BID(R9),2$	; branch if ifab
	MOVL	IRB$L_IFAB_LNK(R9),R0	; get ifab addr
2$:	MOVZWL	IFB$W_CHNL(R0),-(SP)	; i/o channel
	TSTL	R1			; is there a fib?
	BEQL	5$			; branch if not
	MOVB	IFB$B_AGENT_MODE(R0),-	; move agent mode into fib
		FIB$B_AGENT_MODE(R1)
	ASSUME	QIO$_EFN EQ <QIO$_CHAN -4>
5$:	BSBW	RM$SETEFN		; set event flag to use
	ASSUME	QIO$_NARGS EQ 12
	CALLS	#12,@#SYS$QIO		; do the qio
	BLBC	R0,10$			; branch on error
	BSBW	RM$STALL		; await completion
10$:	JMP	(R4)			; return to caller

;
; common entry point to perform acp file extend.  
; (sp)  : return pc
; (sp)+4: fib descriptor (quadword)
;

RM$FCPEXTEND::
	$TSTPT	FCPEXT			; count file extends
	POPL	R4			; r4 = return pc
	MOVZBL	S^#IO$_MODIFY,R0	; set i/o function code
	CLRQ	-(SP)			; p6 = p5 = 0
	BRB	PUSH_P4			; br to push rest of qio arguments

;
; r0 contains qio function code
; (sp)  : return pc
; (sp)+4: p5
; (sp)+8: p6
; (sp)+C: fib descriptor (quadword)
;

RM$FCPFNC_P4::				; continue stack at p4
	POPL	R4			; r4 = return pc
PUSH_P4:CLRQ	-(SP)			; p4 = p3 = 0
	CLRL	-(SP)			; p2 = 0
	PUSHAB	20(SP)			; p1 = fib descriptor address
	BRB	FCPCOM			; push rest of qio arguments

;
; r0 contains qio function code
; p1 thru p<N> already on stack
;

RM$FCPFNC_NOFIB::
	POPL	R4			; r4 = return pc
	CLRL	R1			; clear fib address
	BRB	FCPCOM_NOFIB			; push rest of qio arguments



	.SBTTL	RM$MAPERR - ROUTINE TO MAP SYSTEM ERROR CODES TO RMS CODES

;++
; RM$MAPERR
;
; This routine maps the error code received in r0 to the equivalent rms error
; code.  If the code is not found the default code in r1 is used.  Some system
; errors are mapped to themselves since we don't need special RMS errors for
; them.
;
; Calling sequence:
;
;	brw	rm$maperr
;
; inputs:
;
;	r0	system error code
;	r1	default rms error code
;	r8	fab/rab address
;
; outputs:
;
;	fab$l_stv - set from r0
;	r0	set from mapped error code or r1 if none
;
; Side Effects:
;
;	exits with an rsb.
;--

	.MACRO	MAP SYSCOD, RMSCOD
	.WORD	SS$_'SYSCOD
	RMSERR_WORD	RMSCOD
	.ENDM

MAPTABLE:
	MAP	NOSUCHFILE, FNF
	MAP	NOPRIV, PRV
	MAP	NOSUCHDEV, DEV
	MAP	IVDEVNAM, DEV
	MAP	ENDOFFILE, EOF
	MAP	DEVALLOC, DNR
	MAP	DEVNOTMOUNT, DNR
	MAP	DEVOFFLINE, DNR
	MAP	DUPFILENAME, FEX
	MAP	FILNOTEXP, EXP
	MAP	FCPREADERR, ATR
	MAP	FCPWRITERR, ATW
	MAP	ACCONFLICT, FLK
	MAP	NOMOREFILES, NMF
	MAP	DEVICEFULL, FUL
	MAP	WRITLCK, WLK
	MAP	NOTQUEUED, RLK
	MAP	EXENQLM, EXENQLM
	MAP	DEADLOCK, DEADLOCK
	MAP	INSFMEM, DME
	.WORD	0,0			; end of table


RM$MAPERR::
	MOVL	R0,FAB$L_STV(R8)	; save system code in stv
	BITL	#^X0FFF0000,R0		; system error code?
	BNEQ	15$			; don't map if not
	MOVAW	MAPTABLE,R0		; address of mapping table
10$:	CMPW	(R0)+,FAB$L_STV(R8)	; match with system code?
	BEQL	20$			; branch if yes
	TSTW	(R0)+			; zero entry?
	BNEQ	10$			; branch if not

;
; reached end of table without finding a match
; use the default code in r1
;

15$:	MOVL	R1,R0
	RSB

;
; found matching code in table - use corresponding rms code
;

20$:	MOVZWL	(R0),R0
	RSB

	.END
