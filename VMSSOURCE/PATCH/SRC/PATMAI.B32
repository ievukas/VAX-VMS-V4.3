
MODULE PATMAIN ( MAIN = PAT$MAIN,			! DRIVER FOR PATCH
		%IF %VARIANT EQL 1
		%THEN
			ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  IMAGE FILE PATCH UTILITY, PATCH
!
! ABSTRACT:  THIS ROUTINE DRIVES PATCH.  IT PERFORMS THE COMMAND LINE
!	INTERFACE, THE FILE HANDLING, AND THE COMMAND PROCESSING LOOP.
!
! ENVIRONMENT:
!
! AUTHOR:  K.D. MORSE	, CREATION DATE:  29-SEP-77
!
! MODIFIED BY:
!
!	V03-012	MCN0180		Maria del C. Nasr	12-Jul-1984
!		Process qualifiers that take a value properly.  First
!		check if the qualifier is present, and if true, get the
!		value.  In that way, it will not process the value if the
!		qualifier has been negated.
!
!	V03-011	MCN0172		Maria del C. Nasr	12-Jun-1984
!		Set new version number and date displayed by PATCH.
!
!	V03-010	MCN0157		Maria del C. Nasr	20-Feb-1984
!		When we open the input file, save the channel, but
!		do not connect stream.  We are doing a user file open
!		now to use the image activator routines for image
!		processing.
!
!	V03-009	MTR0025		Mike Rhodes		 8-Aug-1983
!		Add /ABSOLUTE qualifier to allow patching ANY file
!		via absolute (virtual) addresses.  Restrictions:
!		The file's size may not grow (eg. default patch area
!		may NOT be created/expanded, etc.).  This is due to
!		our inability to determine if we'll end up breaking
!		an image or other such file which has internal size
!		declarations within its header.
!
!		Additionally, routine EXIT_HANDLER has been added,
!		which will be declared when the file is patched in
!		place (/ABSOLUTE /NONEW_VERSION).
!
!	V03-008	MTR0024		Mike Rhodes		24-Jul-1983
!		Correct default action of JOURNAL file processing.
!
!	V03-007	MTR0022		Mike Rhodes		22-Feb-1983
!		Fix command file processing (/COMMAND and CREATE).
!
!	V03-006	MTR0020		Mike Rhodes		 4-Feb-1983
!		Convert to the new CLI interface, advance PATCH's
!		welcome message to reflect this change.
!
!	V03-005	MTR0019		Mike Rhodes		 5-Jan-1983
!		Advance PATCH's ident to reflect inclusion of code to
!		handle Debug Module/psect Table (DMT) in PATWRT.B32.
!
!	V03-004	MTR0018		Mike Rhodes		15-Nov-1982
!		Bump PATCH's ident message.
!
!	V03-003	MTR0009		Mike Rhodes		08-Jul-1982
!		Advance PATCH's ID to reflect the inclusion of 2 operand
!		instruction alias support.
!
!	V03-002	MTR0007		Mike Rhodes		14-Jun-1982
!		Use shared system messages.  Affected modules include:
!		DYNMEM.B32, PATBAS.B32, PATCMD.B32, PATIHD.B32, PATINT.B32,
!		PATIO.B32, PATMAI.B32, PATMSG.MSG, PATWRT.B32, and PATSPA.B32.
!
!		The shared messages are defined by PATERR.B32 and we simply
!		link against these symbols.  They are declared as external
!		literals below.
!
!		Clock the welcome message ident to 3-01 15-Jun-1982.
!
!	V03-001	MTR0003		Mike Rhodes		19-Mar-1982
!		Modified routine OPEN_INPUT.  It passed the status value 
!		incorrectly from the RAB instead of the FAB.
!		Fixes QAR 734.
!
!	V03-000	MTR0002		Mike Rhodes		15-Mar-1982
!		Advance PATCH welcome message version number to
!		3-00 and the date to 15-Mar-1982.
!
!	V02-035	MTR0002		Mike Rhodes		01-Oct-1981
!		Change PATCH welcome message version number to
!		2.33 and the date to 01-Oct-1981.
!
!	V02-034	MTR0001		Mike Rhodes		17-Sep-1981
!		Change PATCH welcome message version number to 
!		2.32 and the date to 17-Sep-1981.
!
!	V02-033	KDM0052		Kathleen D. Morse	28-Apr-1981
!		Change PATCH version number to 2.31 and date to 28-Apr-1981.
!
!	V02-032	BLS0043		Benn Schreiber		10-Apr-1981
!		Get input file size from FHC XAB
!
!	V02-031	KDM0045		Kathleen D. Morse	04-Mar-1981
!		Change PATCH version number to 2.30 and date to 04-Mar-1981.
!
!	V02-030	KDM0044		Kathleen D. Morse	04-Mar-1981
!		Fix some comment lines.
!
!	V0229	PCG0001		Peter George		02-FEB-1981
!		Add require statement for LIB$:PATDEF.REQ
!
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	PROCESS_COMMAND : NOVALUE,				! Process the command line
	VOLUME_PARSE : NOVALUE,					! VOLUME qualifier action routine
	UPDATE_PARSE : NOVALUE,					! UPDATE qualifier action routine.
	OPEN_INPUT : NOVALUE,					! OPENS THE INPUT IMAGE FILE
	EXIT_HANDLER : NOVALUE,					! Handle exit conditions for patching in place.
	OPEN_OUTPUT : NOVALUE,					! INITIALIZES FOR FUTURE OUTPUT IMAGE FILE OPEN
	OPEN_JOURNAL : NOVALUE,					! OPENS THE JOURNAL FILE
	PAT$OPEN_COMFIL : NOVALUE;				! OPENS THE COMMAND FILE

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';				! SYSTEM STRUCTURE DEFINITIONS
LIBRARY 'SYS$LIBRARY:CLIMAC.L32';				! CLI STRUCTURE ALLOCATION
REQUIRE 'SRC$:PATPCT.REQ';					! DEFINE PSECTS
REQUIRE 'SRC$:PREFIX.REQ';					! UTILITY MACROS
REQUIRE 'SRC$:PATPRE.REQ';					! DEFINES PATCH LITERALS
REQUIRE 'LIB$:PATDEF.REQ';					! Defines literals
REQUIRE 'LIB$:PATMSG.REQ';					! DEFINES PATCH ERROR MESSAGE NUMBERS
REQUIRE 'SRC$:VXSMAC.REQ';					! DEFINE LITERALS
REQUIRE 'SRC$:SYSLIT.REQ';					! DEFINES SYSTEM LITERALS
REQUIRE 'SRC$:SYSSER.REQ';					! DEFINES FAL OUTPUT MACROS

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	CLI$PRESENT	: ADDRESSING_MODE (GENERAL),		! Check for an entities presence in the command line.
	CLI$GET_VALUE	: ADDRESSING_MODE (GENERAL),		! Obtain the value associated with a qualifier/parameter.
	LIB$CVT_DX_DX	: ADDRESSING_MODE (GENERAL),		! General conversion routine.
	PAT$FIND_DST,						! INITIALIZES SYMBOL TABLES
	pat$com_proc,						! PATCH COMMAND PROCESSOR
	PAT$FAO_PUT,						! FORMATS OUTPUT MESSAGE
	PAT$INIT,						! OPEN COMMUNICATION CHANNELS
	PAT$GET_IHD,						! PROCESS IMAGE HEADER INFORMATION
	PAT$CLOSEFILES,						! CLOSE ALL FILES
	PAT$WRITEFILE,						! OUTPUTS MESSAGE TO A FILE
	PAT$ERR_HANDLER,					! ERROR MESSAGE HANDLER
	GETFILDSC;						! Returns the address of a file name descriptor

EXTERNAL
	PAT$GB_EXEC_CMD : BYTE,					! INDICATOR WHETHER OR NOT TO EXECUTE PATCH COMMANDS
	PAT$CP_OUT_STR : REF VECTOR[,BYTE],			! POINTER TO OUTPUT BUFFER
	PAT$GL_BUF_SIZ,						! SIZE OF MESSAGE IN OUTPUT BUFFER
	PAT$GL_CHANUM,						! CHANNEL NUMBER
	PAT$GB_TAKE_CMD: BYTE,					! INDICATOR TO PROCESS COMMANDS
	PAT$GL_ERRCODE,						! ERROR CODE
	PAT$GL_HEAD_LST,					! HEAD OF PATCH COMMAND ARGUMENT LIST
	PAT$GL_IMGBLKS,						! NUMBER OF BLOCKS IN NEW IMAGE
	PAT$GW_IMGVOL : WORD,					! Relative Volume Number for new image
	PAT$GL_ECO_UPD,						! ECO LEVELS TO UPDATE
	PAT$GL_FLAGS : BITVECTOR [32],				! CLI PARSE FLAGS
	PAT$GL_OLDXABFH : BLOCK[,BYTE],				! INPUT IMAGE FILE FILE HEADER CHARS. XAB
	PAT$GL_OLDFAB : BLOCK[,BYTE],				! INPUT IMAGE FILE FAB
	PAT$GL_OLDRAB : BLOCK[,BYTE],				! INPUT IMAGE FILE RAB
	PAT$GL_OLDNBK : BLOCK[,BYTE],				! INPUT IMAGE FILE NAME BLOCK
	PAT$GL_NEWFAB : BLOCK[,BYTE],				! OUTPUT IMAGE FILE FAB
	PAT$GL_NEWRAB : BLOCK[,BYTE],				! OUTPUT IMAGE FILE RAB
	PAT$GL_NEWNBK : BLOCK[,BYTE],				! OUTPUT IMAGE FILE NAME BLOCK
	PAT$GL_NEWXABALL : BLOCK[,BYTE],			! Output image ALLocation XAB
	PAT$GL_JNLFAB : BLOCK[,BYTE],				! JOURNAL FILE FAB
	PAT$GL_JNLRAB : BLOCK[,BYTE],				! JOURNAL FILE RAB
	PAT$GL_JNLNBK : BLOCK[,BYTE],				! JOURNAL FILE NAME BLOCK
	PAT$GL_COMFAB : BLOCK[,BYTE],				! OUTPUT COMMAND FILE FAB
	PAT$GL_COMRAB : BLOCK[,BYTE],				! OUTPUT COMMAND FILE RAB
	PAT$GL_COMNBK : BLOCK[,BYTE],				! OUTPUT COMMAND FILE NAME BLOCK
	PAT$GB_OLDNAME,						! OLD IMAGE FILE NAME
	PAT$GB_NEWNAME,						! NEW IMAGE FILE NAME
	PAT$GB_JNLNAME,						! JOURNAL FILE NAME
	PAT$GB_COMNAME;						! COMMAND FILE NAME

EXTERNAL LITERAL
!
! Define shared message references.  (resolved @ link time)
!
	PAT$_CLOSEIN,						! Error closing input file.
	PAT$_CLOSEOUT,						! Error closing output file.
	PAT$_OPENIN,						! Error opening input file.
	PAT$_OPENOUT,						! Error opening output file.
	PAT$_OVERLAY,						! File is being overwritten.
	PAT$_READERR,						! Error reading from file.
	PAT$_SYSERROR,						! System Service error.
	PAT$_WRITEERR;						! Error writing to file.

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!
OWN
	exit_cb : VECTOR [4, LONG],		! EXIT Control Block.
	input_desc : $BBLOCK [dsc$c_s_bln];

BIND
!++
! Qualifier and Parameter name descriptors for command line parsing.
!--
	absolute= $descriptor ('ABSOLUTE'),			! /ABSOLUTE qualifier
	cmdline = $descriptor ('$LINE'),			! Command line identifier for CLI call back.
	command	= $descriptor ('COMMAND'),			! /COMMAND qualifier
	file	= $descriptor ('FILE'),				! Input file parameter (required).
	journal	= $descriptor ('JOURNAL'),			! /JOURNAL qualifier
	new_ver	= $descriptor ('NEW_VERSION'),			! /NEW_VERSION qualifier
	output	= $descriptor ('OUTPUT'),			! /OUTPUT qualifier
	update	= $descriptor ('UPDATE'),			! /UPDATE qualifier
	volume	= $descriptor ('VOLUME'),			! /VOLUME qualifier

!++
! FAO control string for output of command line to command file.
!--
	COM_STR		= UPLIT ( %ASCIC 'COMMAND FILE:			"!AD"'),
	COM_LINE_STR	= UPLIT (%ASCIC '!AS');

GLOBAL ROUTINE PAT$MAIN : NOVALUE =	! MAIN PATCH DRIVER

!++
! FUNCTIONAL DESCRIPTION:
!
! THIS MODULE IS THE DRIVER FOR THE IMAGE FILE PATCH UTILTIY.
! IT PERFORMS THE FOLLOWING:
!
!	1.  REPEATEDLY CALLS BACK THE CLI REQUESTING THE PIECES OF THE
!	    COMMAND LINE
!	2.  OPENS THE FILES FOR INPUT AND OUTPUT
!	3.  CALLS THE ROUTINE TO MAP THE INPUT IMAGE FILE
!	4.  LOOPS, CALLING APPROPRIATE ROUTINES TO HANDLE PATCH COMMANDS
!	5.  CLOSES ALL FILES
!
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	CLI HAS THE COMMAND LINE.
!	THE FABS AND RABS ARE INITIALIZED, SAVE FOR FILE NAMES.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	THE INPUT AND OUTPUT FILES ARE OPENED.  THE COMMAND LINE IS PROCESSED.
!	THE PATCH COMMANDS ARE EXECUTED.
!
!--

BEGIN
BIND
	NEW_IMG_STR	= UPLIT ( %ASCIC 'IMAGE FILE BEING PATCHED:	"!AD"'),
	JNL_STR		= UPLIT ( %ASCIC 'JOURNAL FILE:			"!AD"'),
	UPDATE_STR	= UPLIT ( %ASCIC 'UPDATE QUALIFIER VALUES:	'),
	UPD_VAL_STR	= UPLIT ( %ASCIC ' !UL,');

LOCAL
	BIT_NUMBER,						! ECO LEVEL BIT COUNTER
	OUT_BUFFER : VECTOR[TTY_OUT_WIDTH,BYTE];		! OUTPUT BUFFER FOR JOURNAL MESSAGES

ENABLE PAT$ERR_HANDLER;						! DECLARE ERROR HANDLER

!++
! OPEN COMMUNICATION CHANNELS AND INITIALIZE CONTEXT DATA,ETC.
!--
PAT$INIT();							! OPEN CHANNELS

!++
! PROCESS THE COMMAND LINE ET. AL.
!--
PROCESS_COMMAND ();

!++
! OUTPUT WELCOME MESSAGE.
!--
$FAO_TT_OUT('!/!/  PATCH  Version 4-00    15-Sep-1984!/');

!++
! OUTPUT COMMAND INFORMATION TO JOURNAL FILE.
!--
PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER, 0);
PAT$GL_BUF_SIZ = 0;
PAT$FAO_PUT(NEW_IMG_STR, .PAT$GL_OLDNBK[NAM$B_RSL], PAT$GB_OLDNAME);
PAT$WRITEFILE(.PAT$GL_BUF_SIZ, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);
PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER, 0);
PAT$GL_BUF_SIZ = 0;
PAT$FAO_PUT(JNL_STR, .PAT$GL_JNLNBK[NAM$B_RSL], PAT$GB_JNLNAME);
PAT$WRITEFILE(.PAT$GL_BUF_SIZ, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);
!IF (.PAT$GL_FLAGS AND PAT$M_COMMAND) NEQ 0
!THEN
!	BEGIN
!	PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER, 0);
!	PAT$GL_BUF_SIZ = 0;
!	PAT$FAO_PUT(COM_STR, .PAT$GL_COMNBK[NAM$B_RSL], PAT$GB_COMNAME);
!	PAT$WRITEFILE(.PAT$GL_BUF_SIZ, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);
!	END;

!++
! Attempt to write the input file spec to the output command file.  This
! places it in the appended patch command text buffer even if no output
! command file is being written.
!--
PAT$WRITEFILE(.PAT$GL_OLDFAB [FAB$B_FNS], .PAT$GL_OLDFAB [FAB$L_FNA], PAT$GL_COMRAB);
IF .PAT$GL_FLAGS [PAT$S_UPDATE]
THEN
	BEGIN
	PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER, 0);
	PAT$GL_BUF_SIZ = 0;
	PAT$FAO_PUT(UPDATE_STR);
	BIT_NUMBER = PAT$K_MIN_ECO;
	WHILE .BIT_NUMBER LEQ PAT$K_MAX_ECO
	DO
		BEGIN
		IF .PAT$GL_ECO_UPD<.BIT_NUMBER-1, 1>
		THEN
			PAT$FAO_PUT(UPD_VAL_STR, .BIT_NUMBER);
		BIT_NUMBER = .BIT_NUMBER + 1;
		END;
	PAT$WRITEFILE(.PAT$GL_BUF_SIZ-1, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);
	END;

!++
! READ THE IMAGE HEADER AND SET UP THE IMAGE SECTION TABLE.
!--
PAT$GET_IHD();							! GET INFO FROM IMAGE HEADER

!++
! INITALIZE SYMBOL TABLES FROM RST AND GST IN OLD IMAGE FILE.
!--
PAT$FIND_DST();

!++
! THIS IS THE LOOP WHICH CAUSES PATCH COMMANDS TO BE PROCESSED.
! AS LONG AS THERE ARE COMMANDS TO PROCESS, THE COMMAND FLAG IS ON.
! IT IS TURNED OFF WHEN EOF IS ENCOUNTERED.
!--
PAT$GB_TAKE_CMD = TRUE;						! PROCESS COMMANDS
WHILE .PAT$GB_TAKE_CMD DO

	PAT$COM_PROC();

!++
! CLOSE ALL FILES.
!--
PAT$CLOSEFILES();						! FINISH UP

END;	! END OF PAT$MAIN


ROUTINE PROCESS_COMMAND : NOVALUE =
!++
! Functional Description:
!
!	Call slave procedures to process specific portions
!	of the command line.
!
! Implicit Outputs:
!
!	The command line and its associated qualifiers
!	have been parsed and processed.
!
! Side Effects:
!
!	Errors will be SIGNALled by the CLI.
!
!--

BEGIN

CH$FILL (0, dsc$c_s_bln, input_desc);	! Initialize the input string descriptor.
input_desc [dsc$b_dtype]=dsc$k_dtype_t;	! Define the data type as text.
input_desc [dsc$b_class]=dsc$k_class_d;	! Define the descriptor as a dynamic string descriptor.

open_input ();				! Obtain the INPUT file spec and open the file, process /ABS and /NEW.
open_output ();				! Obtain the OUTPUT file spec and open the file.
open_journal ();			! Obtain the JOURNAL file spec and open the file.
volume_parse ();			! Process the /VOLUME qualifier.
update_parse ();			! Process the /UPDATE qualifier.
IF CLI$PRESENT (command)		! If /COMMAND has been specified...
THEN pat$open_comfil (1);		! obtain the COMMAND file spec and open the file (if any).

END;    ! of ROUTINE process_command


ROUTINE OPEN_INPUT : NOVALUE =		! ROUTINE TO OPEN INPUT FILE

!++
! FUNCTIONAL DESCRIPTION:
!
!	PROCESS THE INPUT FILE PARAMETER IN THE COMMAND LINE.
!	THE FAB IS SET UP AND THE INPUT IMAGE FILE OPENED.
!
! IMPLICIT INPUTS:
!
!	CLI HAS THE COMMAND LINE.
!	THE FABS AND RABS ARE INITIALIZED, SAVE FOR FILE NAMES.
!
! SIDE EFFECTS:
!
!	THE INPUT FILE IS OPENED, AND MAY BE CLOSED DUE
!	TO THE USER'S REQUEST TO PATCH THE FILE IN PLACE
!	VIA A COMBINATION OF THE COMMAND QUALIFIERS
!	/ABSOLUTE AND /NEW_VERSION.
!
!	ALSO, DECLARE AN EXIT HANDLER WHICH WILL WARN THE USER
!	THAT UPON IMAGE RUNDOWN THE FILE BEING PATCHED IS OVERWRITTEN.
!	THIS IS A DIRECT RESULT OF SECTION MAPPING, AND THE PATCH
!	UPDATE COMMAND IS MORE OF A CHECK POINT OPERATION (EG. WRITE
!	WHAT I'VE DONE SO FAR, BACK TO THE SECTION FILE) THAN ANYTHING
!	ELSE.
!
!--

BEGIN
PAT$GL_FLAGS [PAT$S_ABSOLUTE] = CLI$PRESENT (absolute); 	! See if we should patch via absolute (virtual) addresses.
PAT$GL_FLAGS [PAT$S_NEW_VERSION] = CLI$PRESENT (new_ver);	! See if a new version of the file should be created.
PAT$GL_FLAGS [PAT$S_INPUT] = CLI$GET_VALUE (file, input_desc);	! Get the INPUT file specification.
PAT$GL_OLDFAB[FAB$L_FNA]=.INPUT_DESC[DSC$A_POINTER];		! SET FILE NAME ADDRESS
PAT$GL_OLDFAB[FAB$B_FNS]=.INPUT_DESC[DSC$W_LENGTH];		! SET FILE NAME LENGTH
PAT$GL_ERRCODE=$OPEN(FAB=PAT$GL_OLDFAB);			! OPEN INPUT FILE
INPUT_DESC[DSC$A_POINTER] = 0;					! Force allocation of a new string buffer.
IF NOT .PAT$GL_ERRCODE						! SUCCESS ON OPEN?
THEN
	BEGIN
	PAT$GL_FLAGS [PAT$S_INPUT] = 0;				! SET FLAG FILE NOT OPEN
	SIGNAL(PAT$_OPENIN,1,GETFILDSC(PAT$GL_OLDFAB),.PAT$GL_OLDFAB[FAB$L_STS],.PAT$GL_OLDFAB[FAB$L_STV]); ! REPORT FAILURE
	END
ELSE
	BEGIN
	PAT$GL_CHANUM = .PAT$GL_OLDFAB [FAB$L_STV];		! Save channel number
	IF .PAT$GL_FLAGS [PAT$S_ABSOLUTE] AND NOT .PAT$GL_FLAGS [PAT$S_NEW_VERSION]
	THEN
		! Patching the file in place.  The mapping will take care of accessing the file and updating it.
		!
		BEGIN
		PAT$GL_ERRCODE = $DASSGN (CHAN=.PAT$GL_CHANUM);
		IF NOT .PAT$GL_ERRCODE
		THEN
		    SIGNAL ( PAT$_CLOSEIN, 1, GETFILDSC(PAT$GL_OLDFAB), .PAT$GL_ERRCODE, 0);
		PAT$GL_CHANUM = 0;				! No channel assigned anymore
		PAT$GL_FLAGS [PAT$S_INPUT] = 0;			! Set file not open flag.

		EXIT_CB [0] = 0;				! Forward link.
		EXIT_CB [1] = EXIT_HANDLER;			! Exit handler address.
		EXIT_CB [2] = 1;				! Argument count.
		EXIT_CB [3] = PAT$GL_ERRCODE;			! Address to store reason for exit (status longword address).
		
		IF NOT (PAT$GL_ERRCODE = $DCLEXH (DESBLK = EXIT_CB))	! Declare the EXIT handler.
		THEN
		    SIGNAL (PAT$_SYSERROR, 0, .PAT$GL_ERRCODE);
		END;
	END;

END;	! END OF OPEN_INPUT


ROUTINE EXIT_HANDLER (status_adr) : NOVALUE =
!++
!
! Functional Description:
!
!	Process exit conditions when patching a file in absolute mode
!	AND in place (/ABSOLUTE /NONEW_VERSION).  The only action for
!	this routine currently is to issue an informational message to
!	the user indicating that the file being pathed is being overwritten.
!	This is a direct result of the normal handling of mapped disk sections.
!
! Inputs:
!
!	status_adr	addr.rl		The address of the status longword
!					indicating the reason for image exit.
!					(NOTE: This value is ignored!)
!
! Side Effects:
!
!	The file being patched may have modified pages which are written
!	back to the section file file during image rundown.
!
!--
BEGIN

LOCAL
	OLD_FILE : $BBLOCK [DSC$C_S_BLN];

OLD_FILE [DSC$W_LENGTH] = .PAT$GL_OLDNBK [NAM$B_RSL];
OLD_FILE [DSC$A_POINTER] = PAT$GB_OLDNAME;
SIGNAL (PAT$_OVERLAY, 1, OLD_FILE);

END;    ! of ROUTINE exit_handler


ROUTINE OPEN_OUTPUT : NOVALUE =		! ROUTINE TO INIT FOR OUTPUT FILE OPEN

!++
! FUNCTIONAL DESCRIPTION:
!
!	OBTAIN THE OUTPUT FILE PARAMETER IN THE COMMAND LINE. 
!	THE FAB IS SET UP AND THE NUMBER OF IMAGE FILE BLOCKS IS INITIALIZED.
!	THE IMAGE FILE WILL BE OPENED JUST BEFORE IT IS WRITTEN AS THE NUMBER OF
!	BLOCKS THAT MUST BE ALLOCATED CONTIGUOUSLY, WILL NOT BE KNOWN UNTIL THEN.
!
! IMPLICIT INPUTS:
!
!	CLI HAS THE COMMAND LINE.
!	THE OUTPUT IMAGE FAB ARE INITIALIZED.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	THE NUMBER OF IMAGE BLOCKS IS INITIALIZED AS IS THE FILENAME IN THE FAB.
!
!--

BEGIN

IF CLI$PRESENT (output)
THEN
    CLI$GET_VALUE (output, input_desc);				! Get the OUTPUT file specification.

PAT$GL_IMGBLKS = .PAT$GL_OLDXABFH[XAB$L_EBK] +			! INITIALIZE NUMBER OF BLOCKS IN FILE
			(.PAT$GL_OLDXABFH[XAB$W_FFB] NEQ 0);
PAT$GL_NEWFAB[FAB$L_FNA]=.INPUT_DESC[DSC$A_POINTER];		! SET FILE NAME ADDRESS
PAT$GL_NEWFAB[FAB$B_FNS]=.INPUT_DESC[DSC$W_LENGTH];		! SET FILE NAME LENGTH
PAT$GL_FLAGS [PAT$S_OUTPUT] = 0;				! SET FLAG FILE NOT OPEN
INPUT_DESC [DSC$A_POINTER] = 0;					! Force allocation of a new buffer
								! to preserve the OUTPUT file spec.
END;	! END OF OPEN_OUTPUT


ROUTINE OPEN_JOURNAL : NOVALUE =		! ROUTINE TO OPEN JOURNAL FILE

!++
! FUNCTIONAL DESCRIPTION:
!
!	PROCESS THE JOURNAL FILE PARAMETER IN THE COMMAND LINE.
!	THE FAB IS SET UP AND THE JOURNAL FILE OPENED.
!
! IMPLICIT JOURNALS:
!
!	CLI HAS THE COMMAND LINE.
!	THE JOURNAL FAB AND RAB ARE INITIALIZED.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	THE JOURNAL FILE IS OPENED.
!
!--

BEGIN

! If the /JOURNAL qualifier is present, get the file specification.
!
IF CLI$PRESENT (journal)
THEN
    PAT$GL_FLAGS [PAT$S_JOURNAL] = CLI$GET_VALUE (journal, input_desc);

PAT$GL_JNLFAB[FAB$L_FNA]=.INPUT_DESC [DSC$A_POINTER];		! SET FILE NAME ADDRESS
PAT$GL_JNLFAB[FAB$B_FNS]=.INPUT_DESC [DSC$W_LENGTH];		! SET FILE NAME LENGTH
PAT$GL_ERRCODE=$CREATE(FAB=PAT$GL_JNLFAB);			! OPEN JOURNAL FILE
IF NOT .PAT$GL_ERRCODE						! SUCCESS ON OPEN?
THEN
	BEGIN
	PAT$GL_FLAGS [PAT$S_JOURNAL] = 0;			! SET FLAG FILE NOT OPEN
	SIGNAL(PAT$_OPENOUT,1,GETFILDSC(PAT$GL_JNLFAB),.PAT$GL_JNLFAB[FAB$L_STS],.PAT$GL_JNLRAB[RAB$L_STV]); ! REPORT FAILURE
	END
ELSE
	BEGIN
	PAT$GL_ERRCODE=$CONNECT(RAB=PAT$GL_JNLRAB);		! CONNECT JOURNAL FILE
	IF NOT .PAT$GL_ERRCODE					! SUCCESS ON CONNECT?
	THEN   	SIGNAL(PAT$_OPENOUT,1,GETFILDSC(PAT$GL_JNLFAB),.PAT$GL_JNLRAB[RAB$L_STS],.PAT$GL_JNLRAB[RAB$L_STV])
	ELSE    PAT$GL_FLAGS [PAT$S_JOURNAL] = 1;		! SET FILE OPEN FLAG, DATA STREAM ACTIVE.
	END;
END;	! END OF OPEN_JOURNAL


GLOBAL ROUTINE PAT$OPEN_COMFIL (COMMAND_LEVEL) : NOVALUE =	! ROUTINE TO OPEN COMMAND FILE

!++
! FUNCTIONAL DESCRIPTION:
!
!	PROCESS THE COMMAND FILE PARAMETER IN THE COMMAND LINE.
!	THE FAB IS SET UP AND THE COMMAND FILE OPENED.
!
!	IT IS ALSO SERVING TO OPEN THE COMMAND FILE BECAUSE OF THE "CREATE" COMMAND.
!	IN THIS CASE, THE INPUT PARAMETERS ARE ZEROS.  THERE SHOULD BE ONLY ONE "CREATE"
!	COMMAND PER PATCH SESSION.  THE "CREATE" COMMAND MAY OR MAY NOT HAVE ONE
!	ARGUMENT WHICH IS THE COMMAND FILE SPECIFICATION.
!
! FORMAL PARAMETERS:
!
!	command_level	val	0 Implies the PATCH CREATE command.
!				1 Indicates that we are processing the command line.
!
! IMPLICIT COMMANDS:
!
!	CLI HAS THE COMMAND LINE.
!	THE OUTPUT COMMAND FAB AND RAB ARE INITIALIZED.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	THE COMMAND FILE IS OPENED.
!
!--

BEGIN

LOCAL
	POINTER : REF VECTOR[,LONG],				! POINTER TO ADDRESS OFFILE NAME
	NAME_DSC : REF VECTOR[,BYTE],				! POINTER TO ASCIC FILE NAME
	OUT_BUFFER : VECTOR[TTY_OUT_WIDTH,BYTE];		! OUTPUT BUFFER FOR JOURNAL MESSAGES


IF .PAT$GL_FLAGS [PAT$S_COMMAND]				! Does a command file already exist?
THEN								! If so, signal an error indicating
	BEGIN							! one command file per session!
	SIGNAL(PAT$_DUPCOMFIL+MSG$K_WARN,2,.PAT$GL_COMNBK[NAM$B_RSL],PAT$GB_COMNAME);
	END;

POINTER = .PAT$GL_HEAD_LST;
IF (.POINTER NEQA 0)
THEN
	BEGIN
	NAME_DSC = .POINTER[1];					! GET ADDRESS OF FILE NAME
	PAT$GL_COMFAB[FAB$L_FNA]=NAME_DSC[1];			! SET FILE NAME ADDRESS
	PAT$GL_COMFAB[FAB$B_FNS]=.NAME_DSC[0];			! SET FILE NAME LENGTH
	END
ELSE
	BEGIN							! See if a file spec was given
	IF (PAT$GL_FLAGS [PAT$S_COMMAND] = CLI$GET_VALUE (command, input_desc))
	THEN
		BEGIN						! If it was...
		PAT$GL_COMFAB[FAB$L_FNA]=.input_desc [dsc$a_pointer];	! SET FILE NAME ADDRESS
		PAT$GL_COMFAB[FAB$B_FNS]=.input_desc [dsc$w_length];	! SET FILE NAME LENGTH
		END
	ELSE							! Otherwise use default...
		BEGIN						! file name from RFLNAM.
		PAT$GL_COMFAB[FAB$L_FNA]=0;			! SET FILE NAME ADDRESS
		PAT$GL_COMFAB[FAB$B_FNS]=0;			! SET FILE NAME LENGTH
		END;
	END;

PAT$GL_ERRCODE=$CREATE(FAB=PAT$GL_COMFAB);			! OPEN OUTPUT COMMAND FILE
IF NOT .PAT$GL_ERRCODE						! SUCCESS ON OPEN?
THEN
	BEGIN
	PAT$GL_FLAGS [PAT$S_COMMAND] = 0;			! SET FLAG FILE NOT OPEN
	SIGNAL(PAT$_OPENOUT,1,GETFILDSC(PAT$GL_COMFAB),.PAT$GL_COMFAB[FAB$L_STS],.PAT$GL_COMFAB[FAB$L_STV]); ! REPORT FAILURE
	END
ELSE
	BEGIN
	PAT$GL_ERRCODE=$CONNECT(RAB=PAT$GL_COMRAB);		! CONNECT COMMAND FILE
	IF NOT .PAT$GL_ERRCODE					! SUCCESS ON CONNECT?
	THEN
	SIGNAL(PAT$_OPENOUT,1,GETFILDSC(PAT$GL_COMFAB),.PAT$GL_COMRAB[RAB$L_STS],.PAT$GL_COMRAB[RAB$L_STV]) ! REPORT FAILURE
	ELSE
		BEGIN
		!++
		! Now set the flag indicating the file is open.  If the command
		! file was opened due to a CREATE command, then write out the
		! name of the command file to the journal file and write out
		! the DCL PATCH command line to the command file.
		!--
		PAT$GL_FLAGS [PAT$S_COMMAND] = 1;		! SET FILE OPEN BIT
		IF (.COMMAND_LEVEL EQL 0)
		THEN
			BEGIN
			PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER, 0);
			PAT$GL_BUF_SIZ = 0;
			PAT$FAO_PUT(COM_STR, .PAT$GL_COMNBK[NAM$B_RSL], PAT$GB_COMNAME);
			PAT$WRITEFILE(.PAT$GL_BUF_SIZ, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);
			PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER, 0);
			PAT$GL_BUF_SIZ = 0;
			PAT$GL_COMRAB[RAB$W_RSZ] = .PAT$GL_OLDFAB [FAB$B_FNS];
			PAT$GL_COMRAB[RAB$L_RBF] = .PAT$GL_OLDFAB [FAB$L_FNA];
			IF NOT (PAT$GL_ERRCODE = $PUT(RAB=PAT$GL_COMRAB))
			THEN
				SIGNAL(PAT$_WRITEERR,1,GETFILDSC(PAT$GL_COMFAB),
					.PAT$GL_COMRAB[RAB$L_STS],.PAT$GL_COMRAB[RAB$L_STV]);
			END;
		END;
	END;
END;	! END OF PAT$OPN_COMMAND


ROUTINE VOLUME_PARSE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Obtain a Relative Volume Number if specified on the command line,
!	or when the VOLUME qualifier is specified without a value, to
!	default the value from the old image.
!
! IMPLICIT INPUTS:
!
!	PAT$GW_IMGVOL	Relative Volume Number.
!
! IMPLICIT OUTPUTS:
!
!	PAT$GW_IMGVOL is loaded with the appropriate Relative Volume Number.
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
!--
BEGIN
LOCAL
	volume_desc : $BBLOCK [dsc$c_s_bln],			! Declare a local descriptor for converting
	volume_number : INITIAL (0);				! the volume number specified from the command line.

BIND
	OLD_FILE_ID = PAT$GL_OLDNBK[NAM$W_FID] : VECTOR [,WORD];

CH$FILL (0, dsc$c_s_bln, volume_desc);				! Initialize the descriptor.
volume_desc [dsc$b_dtype] = dsc$k_dtype_lu;			! Data type is Longword Unsigned.
volume_desc [dsc$b_class] = dsc$k_class_s;			! Scalar class.
volume_desc [dsc$a_pointer] = volume_number;			! Set address of scalar.

IF CLI$PRESENT (volume)
THEN
    IF (PAT$GL_FLAGS [PAT$S_VOLUME] = CLI$GET_VALUE (volume, input_desc))
    THEN
	BEGIN
	IF LIB$CVT_DX_DX (input_desc, volume_desc)		! Convert the volume number,
	THEN PAT$GW_IMGVOL = .volume_number			! If its ok, then load the user supplied number
	ELSE PAT$GW_IMGVOL = .OLD_FILE_ID[2];			! otherwise, default to the old Rel. Vol. No.
	END
    ELSE
	PAT$GW_IMGVOL = .OLD_FILE_ID[2];			! Default to the old Rel. Vol. No.

END;    ! of ROUTINE volume_parse


ROUTINE UPDATE_PARSE : NOVALUE =
!++
! Functional Description:
!
!	Obtain the values associated with the /UPDATE qualifier (if any).
!
! Implicit Inputs:
!
! Implicit Outputs:
!
! Side Effects:
!
!--
BEGIN
LOCAL
	eco_desc : $BBLOCK [dsc$c_s_bln],			! Declare a local descriptor for converting the
	eco_number : INITIAL (0),				! eco level(s) specified with the /UPDATE qualifier.
	status;							! Local status.

CH$FILL (0, dsc$c_s_bln, eco_desc);				! Initialize the descriptor.
eco_desc [dsc$b_dtype] = dsc$k_dtype_lu;			! Data type is Longword Unsigned.
eco_desc [dsc$b_class] = dsc$k_class_s;				! Scalar class.
eco_desc [dsc$a_pointer] = eco_number;				! Point to scalar.

PAT$GL_FLAGS [PAT$S_UPDATE] = status = CLI$PRESENT (update);	! Was /UPDATE specified?

IF .PAT$GL_FLAGS [PAT$S_UPDATE]					! If it was then don't process any commands until
THEN    PAT$GB_EXEC_CMD = FALSE					! we see the first SET ECO command.
ELSE	PAT$GB_EXEC_CMD = TRUE;					! Otherwise, process each command immediately.

WHILE .status DO						! While there are ECO level(s) still to process
    BEGIN							! get the eco number (ascii text) and convert it 
    IF (status = CLI$GET_VALUE (update, input_desc))		! convert it to its equivalent number.
    THEN							! Once this is done, set the bit in the ECO vector.
        BEGIN
        IF NOT (PAT$GL_ERRCODE = LIB$CVT_DX_DX (input_desc, eco_desc))
        THEN    SIGNAL (PAT$_NUMVAL, 1, .PAT$GL_ERRCODE);	! Numeric conversion errors are signalled.
        PAT$GL_ECO_UPD <.eco_number-1,1> = 1;
        END;
    END;

END;    ! of ROUTINE update_parse
		
END								! END OF MODULE
ELUDOM
