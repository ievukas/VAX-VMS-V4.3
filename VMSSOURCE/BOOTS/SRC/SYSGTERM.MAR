	.TITLE	SYSGTERM - SYSGEN TERMINAL commands
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; FACILITY:
;
;	SYSGEN
;
; ABSTRACT:
;
;	Process terminal driver customization commands.
;
;
; ENVIRONMENT:
;
;	VMS, Kernel mode.  Raised IPL.
;
;--
;
; AUTHOR: Jake VanNoy, CREATION DATE: 14-Jul-1983
;
; MODIFIED BY:
;
;	V03-001	JLV0383		Jake VanNoy		23-JUL-1984
;		Attempt to signal string that FAO fails on.
;		Add support for TTY$EXIT_STRING, a logical name
;		that the RTL uses for it's echoing.
;
;**


	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$DPTDEF				; Driver prologue table
	$DYNDEF				; pool tags
	$IPLDEF				; interrupt levels
	$IRPDEF				; IRP offsets
	$LNMDEF				; Logical name definitions
	$PSLDEF				; PSL definitions
	$STSDEF				; status definition
	$TTYVECDEF			; terminal driver symbols
;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

BYTES_TO_ALLOCATE = 1000
BUFFER_LEN = 100

;
; OWN STORAGE:
;
	.PSECT	NONPAGED_DATA

CRLF:		.ASCID	<13><10>	; carriage return/line feed
FAO_PRMLST:	.ADDRESS	CRLF	; list of parameters for FAOL
		.ADDRESS	CRLF	; 
		.ADDRESS	CRLF	; 
		.ADDRESS	CRLF	; 
		.ADDRESS	CRLF	; 
		.ADDRESS	CRLF	; 
		.ADDRESS	CRLF	; 
		.ADDRESS	CRLF	; 
		.ADDRESS	CRLF	; 
		.ADDRESS	CRLF	; 
		.ADDRESS	CRLF	; 

VEC_TABLE:	.LONG	0
STR_BLOCK:	.LONG	0
NUM_BYTES:	.LONG	BYTES_TO_ALLOCATE

OFFSET_TABLE:	.BLKL	20		; Number of longword vectors

MSGLEN:		.LONG	0
MSG_OUTADR:	.BYTE	0		; first byte of outadr
FAO_COUNT:	.BLKB	3		; fao_count is second byte

STR_DESC:	.LONG	BUFFER_LEN
		.LONG	0		; to be filled in 

BUFFER_DESC:	.LONG	BUFFER_LEN
		.LONG	BUFFER_ADDR	; 
BUFFER_ADDR:	.BLKB	BUFFER_LEN	; data goes here from $GETMSG

MSG_TABLE:	; list of message codes

		.LONG	0			; Break
		.LONG	SYSG_TT$_CTRLY		; standard ^Y
		.LONG	SYSG_TT$_CTRLC		; standard ^C
		.LONG	SYSG_TT$_CTRLY_REG	; ^Y for REGIS
		.LONG	SYSG_TT$_CTRLC_REG	; ^C for REGIS 
		.LONG	SYSG_TT$_CTRLY_DEC	; ^Y for DEC_CRT
		.LONG	SYSG_TT$_CTRLC_DEC	; ^C for DEC_CRT
		.LONG	SYSG_TT$_CTRLY_DECREG	; ^Y for DEC_CRT and REGIS
		.LONG	SYSG_TT$_CTRLC_DECREG	; ^C for DEC_CRT and REGIS
		.LONG	0			; Break in table

		.LONG	SYSG_TT$_CTRLZ		; Standard ^Z
		.LONG	SYSG_TT$_CTRLZ_DEC	; ^Z for DEC_CRT
		.LONG	0			; Break

		.LONG	SYSG_TT$_CTRLO		; output off
		.LONG	SYSG_TT$_CTRLO_DEC	; output off for DEC_CRT
		.LONG	SYSG_TT$_OUTON		; output on
		.LONG	SYSG_TT$_OUTON_DEC	; output on for DEC_CRT
		.LONG	0			; Break

		.LONG	0			; End of table

LNM_ITMLST:
LNM_CTRLZ_DEC:	.WORD	0
		.WORD	LNM$_STRING
		.LONG	0
		.LONG	0

LNM_CTRLZ:	.WORD	0
		.WORD	LNM$_STRING
		.LONG	0
		.LONG	0

		.LONG	0			; End of item list

LNM_SYSTEM:	.ASCID	/LNM$SYSTEM_TABLE/	; table to create name in
LNM_LOGNAM:	.ASCID	/TTY$EXIT_STRING/	; name of logical name


	.PSECT	NONPAGED_CODE

	.SBTTL	SYSG$LOAD_TT_STR - Load terminal driver echo strings

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Use $GETMSG to fetch message defintions, then load into non-page 
;	pool so that TTDRIVER echos them correctly.
;
;
; CALLING SEQUENCE:
;	
;	CALLS	#0,SYSG$LOAD_TT_STR
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;
;	SYSG_TT$_ message symbols
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL
;	error status from:
;	$GETMSG 
;	LIB$GET_VM
;	exec pool allocation
;
; SIDE EFFECTS:
;	
;	Non-paged pool is allocated and left with tables set up.
;	Pointer to tables is modified in TTDRIVER.
;
;--


	.ENTRY	SYSG$LOAD_TT_STR ,^M<R2,R3,R4,R5,R6,R7,R8,R9>
	;
	; Set tables up in P0 space first
	;
	PUSHAL	STR_BLOCK		; Block addres (returned)
	PUSHAL	NUM_BYTES		; Number of bytes (input)
	CALLS	#2,G^LIB$GET_VM		; Fetch memory
	BLBS	R0,10$			; Continue if ok
	RET				; Return with error
10$:
	PUSHAL	VEC_TABLE		; Block addres (returned)
	PUSHAL	NUM_BYTES		; Number of bytes (input)
	CALLS	#2,G^LIB$GET_VM		; Fetch memory
	BLBS	R0,15$			; Continue if ok
	RET				; Return with error
15$:
	MOVAB	MSG_TABLE,R2		; Message table
	MOVL	VEC_TABLE,R3		; address of memory for vectors
	MOVAB	OFFSET_TABLE,R4		; table of indirect pointers offsets
	MOVL	STR_BLOCK,R5		; where text goes
	;
	; Loop through MSG_TABLE, calling $GETMSG for strings
	;
20$:	
	MOVL	(R2)+,R6		; Get next message
	BNEQ	30$			; Zero marks break in table
	;
	; Save offset to table vector
	;
	MOVL	R3,(R4)			; record next pointer
	SUBL	VEC_TABLE,(R4)+		; minus base address

	MOVL	(R2)+,R6		; get real message
	BNEQ	30$			; If zero, then done
	BRW	100$			; exit loop
30$:
	MOVL	R5,(R3)			; set string address
	SUBL	STR_BLOCK,(R3)+		; minus base address

	MOVAB	BUFFER_DESC,R7		; address
	MOVZWL	#BUFFER_LEN,(R7)	; set length
	MOVAB	BUFFER_ADDR,4(R7)	; Set address

	$GETMSG_S -
		MSGID = R6,-		; message ID
		MSGLEN = (R7),-		; return message length
		BUFADR = (R7),-		; return message string
		FLAGS = #1,-		; text only
		OUTADR = MSG_OUTADR	; output counts
	BLBC	R0,35$			; check for error
	CMPL	#SS$_MSGNOTFND,R0	; continue if OK
	BNEQ	40$			; must be normal, exit if MSGNOTFND
35$:	BRW	90$
40$:
	MOVZWL	(R7),MSGLEN		; set length
	MOVZBL	FAO_COUNT,R1		; fao count for CRLF		
	BEQL	50$			; Branch if none
	;
	; Set up FAO to insert <CR><LF> pairs
	;
	MOVAB	STR_DESC,R8		; descriptor
	MOVZWL	#BUFFER_LEN,(R8)	; length
	MOVAB	1(R5),4(R8)		; address

	$FAOL_S CTRSTR = (R7),-		; control string
		OUTLEN = MSGLEN,-	; length of output
		OUTBUF = (R8),-		; descriptor
		PRMLST = FAO_PRMLST	; list of CR LF's
	BLBS	R0,50$			; branch if ok
	PUSHL	R6			; message that went bad
	PUSHL	R0			; error from FAO
	CALLS	#2,G^LIB$SIGNAL		; signal
	BRB	80$

50$:	MOVZBL	MSGLEN,R1		; Get message length
	MOVB	R1,(R5)			; set length
	INCL	R5			; add to address
	MOVL	R5,R9			; save address
	ADDL2	R1,R5			; add to address
	;
	; Build ^Z strings for TTY$EXIT_STRING logical name (for RTL use)
	;
	MOVAB	LNM_CTRLZ_DEC,R0	; assume DEC crt
	CMPL	R6,#SYSG_TT$_CTRLZ_DEC	; ^Z for DEC_CRT
	BEQL	60$			; br if equal
	MOVAB	LNM_CTRLZ,R0		; set regular
	CMPL	R6,#SYSG_TT$_CTRLZ	; Standard ^Z
	BNEQ	80$			; br if not
60$:
	MOVW	R1,(R0)			; set length
	MOVL	R9,4(R0)		; set address

80$:	BRW	20$			; Loop
	;
	; Error - exit
	;
85$:	
	INSV	#STS$K_SEVERE,-
		#STS$V_SEVERITY,-
		#STS$S_SEVERITY,R0	; make it fatal
90$:	RET				; return
	;
	; Table is complete, define logical name and set up in pool
	;
100$:
	$CRELNM_S -
		TABNAM = LNM_SYSTEM,-
		LOGNAM = LNM_LOGNAM,-
		ACMODE = #PSL$C_EXEC,-
		ITMLST = LNM_ITMLST
	BLBC	R0,110$

	$CMKRNL_S LOAD_TT_SYMS		; Do the loading in kernel mode
110$:	RET				; Return with status

LOAD_TT_SYMS:	.WORD	0

	SUBL3	VEC_TABLE,R3,R6		; length of VECTOR table
	SUBL3	STR_BLOCK,R5,R7		; length of text
	ADDL3	R6,R7,R1		; length of both

	ADDL	#12,R1			; pool overhead

	SETIPL	#IPL$_ASTDEL		; Prevent deletion
	JSB	G^EXE$ALONONPAGED	; Fetch Pool
	BLBC	R0,190$			; Branch on error

	MOVL	#^A/TTY /,(R2)		; flag pool with text
	MOVL	#^A/TEXT/,4(R2)		; just for grins
	MOVW	R1,IRP$W_SIZE(R2)	; size (IRP offset is as good as any)
	MOVZBW	#DYN$C_SPECIAL,-
		IRP$B_TYPE(R2)		; Set type ?
	;
	; Relocate offsets to these addresses
	;
	PUSHL	R2			; Save structure address
	MOVAB	12(R2),R8		; Base of vectors
	MOVC3	R6,@VEC_TABLE,(R8)	; copy data
	;
	; R3 is now where the string block will start
	; Vector offsets just loaded must be relocated relative to this
	;
30$:	ADDL2	R3,(R8)+		; add address to offset
	CMPL	R3,R8			; addresses the same?
	BNEQU	30$			; no, loop
	;
	; Now copy strings into block
	;
	MOVC3	R7,@STR_BLOCK,(R3)	; copy strings
	POPL	R2			; Restore structure address
	;
	; Block is now set-up, fix up pointers in TTDRIVER
	;
	MOVL	G^TTY$GL_DPT,R0		; Fetch TTDRIVER address
	MOVZWL	DPT$W_VECTOR(R0),R1	; offset to table
	ADDL2	R0,R1			; base + offset
	MOVL	CLASS_TABLES(R1),R0	; address of vectors
	MOVAB	OFFSET_TABLE,R4		; address of new vectors

	SETIPL	#IPL$_POWER		; block out interrupts

	MOVAB	12(R2),R8		; base address
	ADDL3	R8,(R4)+,(R0)+		; new interrupt echos
	ADDL3	R8,(R4)+,(R0)+		; new exit echos
	ADDL3	R8,(R4)+,(R0)+		; new ctrl O echos

	MOVL	#SS$_NORMAL,R0		; Set status
190$:
	SETIPL	#0
	RET

	.END
