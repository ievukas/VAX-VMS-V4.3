%TITLE 'RUNOFF termination and cleanup'
MODULE rterm (	IDENT = 'V04-000'
		%BLISS32 [, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					     NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	Routine for normal termination of a document.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	CREATION DATE:	April, 1978


%SBTTL 'Revision History'
! MODIFIED BY:
!
!	032	KFA00032	Ken Alden	21-Oct-1983
!		RNFIPF would still get output if the last page of the file
!		  was the one selected by the /PAGES qualifier. This has
!		  been corrected.
!
!	031	KFA00031	Ken Alden	06-Oct-1983
!		Added a warning message for users who said /PAGES but
!		  issued a page string that never matched any pages in the doc.
!
!	030	REM00030	Ray Marshall	10-Aug-1983
!		KWTRPN and OUTCREF were declared (but not used) when DSRPLUS
!		  was false.  This caused LINKer errors when building RUNOFF.
!
!	029	REM00029	Ray Marshall	22-Jul-1983
!		Defined TTYRES and DISPSI as NOVALUE to match the way they
!		  are coded.
!		Added BLISS36 ONLY logic at the end of routine RTERM to release
!		  the dynamic memory used for the cross-ref data structures
!		  back to the system. Then, we can clear the listhead (pointer)
!		  so that when the .BRN is read on another run, it doesn't
!		  have the old names lying around.  This was needed because
!		  in this environment, the image does not have to be reloaded
!		  for successive runs through DSR.  This is only a DSRPLUS
!		  addition.
!
!	028	KFA00028	Ken Alden	19-Jul-1983
!		Fixed the /pages bug with gca_page_cnt.
!
!	027	KFA00027	Ken Alden	14-Jul-1983
!		Suppresed CRU if /auto. 
!		Removed CR3.
!
!	026	KFA00026	Ken Alden	13-Jul-1983
!		Altered the output of cref info messages slightly.
!
!	025	KAD00025	Keith Dawson	10-Jun-1983
!		Cref-changed condition slould not increment /AUTO count in 
!		  first pass (already been incremented).
!
!	024	RER00024	Ron Randall	1-Jun-1983
!		Added code that checks for need to output deferred figures.
!
!	023	KAD00023	Keith Dawson	27-May-1983
!		Make sure Cref-changed condition increments /AUTO count.
!
!	022	KAD00022	Keith Dawson	3-May-1983
!		Suppress 'Cref-changed' messages on early /AUTO passes.
!
!	021	KAD00021	Keith Dawson	11-Apr-1983
!		Add new termination messages (RNFPC2, PC3, PC4, PC5) for 
!		  information written to the .BRN file (and for DSRPLUS 
!		  cross-referencing, also read from the input .BRN file).
!
!	020	RER00020	Ron Randall	17-Mar-1983
!		For DSRPLUS:  Added termination for topnotes.
!
!	019	REM00019	Ray Marshall	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!--


%SBTTL 'Module Level Declarations'
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
MACRO
    !
    ! Close a file on a given IOB, if it was open.
    !
    close_if_open (which_iob) =
	IF  .which_iob [IOB$V_OPEN]
	THEN
	    status = $XPO_CLOSE (IOB = which_iob)
    %;

MACRO
    !
    ! This macro makes certain that when blank lines 
    ! are skipped, change bars don't get output.
    !
    no_bar_skip (n) =
	BEGIN
	LOCAL
	    hold_bars;

	hold_bars = .tsf_bars;
	tsf_bars  = false;
	uskipl (n);
	tsf_bars  = .hold_bars;
	END %;
!
! EXTERNAL REFERENCES:
!
EXTERNAL
    fnct	: fnct_definition,
    fra		: FIXED_STRING,
    gca		: gca_definition,
    hct		: hct_definition,
%IF DSRPLUS %THEN
    kwtrpn,			! KeyWord Table for .Reference_Point Names
%FI
    phan	: phan_definition,
    tsf		: tsf_definition,
    brnoob	: $XPO_IOB (),
    tteiob	: $XPO_IOB (),
    ttiiob	: $XPO_IOB (),
    ttoiob	: $XPO_IOB (),
    tsiiob	: $XPO_IOB ();

%IF DSRPLUS %THEN
EXTERNAL
    topnot	: tn_definition,
    tniiob	: REF $XPO_IOB (),
    tnuiob	: REF $XPO_IOB ();

EXTERNAL LITERAL
    rnfpc4,
    rnfpc5,
    rnfcrc,
    rnfcro,
    rnfcru,
    rnfcr1,
    rnfcr2,
    rnfetd;

EXTERNAL ROUTINE
    tnfil,
    erms,
    tpnote;
%FI

EXTERNAL LITERAL
    rnfefd,
    rnferd,
    rnfile,
    rnfipf,
    rnfned,
    rnfpct,
    rnfpc2,
    rnfpc3;

EXTERNAL ROUTINE
    botpag,	clh,		cpageb,
    erm,	erml,		fn,		foobot,		fooout,
%IF DSRPLUS %THEN
    outcref,	
%FI
    outnj,		putmsg,		remneg,		remmrg,
    toppag,	tpr,		tsttfe,		uform,		uskipl;

%IF (%BLISS (BLISS36) AND DSRPLUS) %THEN
EXTERNAL ROUTINE
    dispsi : NOVALUE,	ttyres : NOVALUE,
    freref : NOVALUE;	! Free's C-REF data structure buffers.
%FI


%SBTTL 'RTERM - RUNOFF termination'
GLOBAL ROUTINE rterm : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	RUNOFF termination.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    LOCAL
	hold_phan_top_page,
	status;

    tsttfe (0);				! Check for too few ends.
    remneg ();				! Check for unreported bad backdents.
    remmrg ();				! Check for unreported bad margin settings.

    IF  .fnct_collecting		! Missing .END FOOTNOTE.
    THEN
	BEGIN	
	erml (rnfefd);			! Report the error.
	fn   (h_end_footnote);		! Terminate footnote activity.
	END;

%IF DSRPLUS %THEN
    !
    ! Missing .END TOPNOTE.
    !
    IF  .tn_collecting
    THEN
	BEGIN	
	erml   (rnfetd);		! Report the error.
	tpnote (h_end_topnote);		! Terminate topnote activity.

	!
	! If topnote file happens to be open, close it.
	!
	IF  .tnuiob [IOB$V_OPEN]
	THEN
	    BEGIN
	    tn_type = 0;
	    tnfil (tn_close);
	    END;

	IF  .tniiob [IOB$V_OPEN]
	THEN
	    BEGIN
	    tn_type = 1;
	    tnfil (tn_close);
	    END;

	END;

    !
    ! Delete both topnote files.
    !
    tn_type = 0;
    tnfil (tn_delete);
    tn_type = 1;
    tnfil (tn_delete);
%FI

    outnj ();
    hold_phan_top_page = .phan_top_page;	! Remember if the user said
						! .PAGE as the last thing in
						! his .RNO file.
%IF DSRPLUS %THEN
	! If any cross-reference information has not been written
	! to the .BRN file yet, write it now.
	!
	WHILE .tsf_cref_data NEQ 0 DO
	    BEGIN
    	    LOCAL current_block : REF VECTOR [0];
    	    current_block = .tsf_cref_data;
	    erms (rnfile, 
    		CH$PTR(current_block[5]), .current_block[4]);
	    outcref ()
    	    END;
%FI

    !
    ! Force out waiting footnotes, if any.
    !
    IF  .fnct_count NEQ 0
    THEN				! There are footnotes to be output.
	IF  NOT .phan_paging OR (.phan_llines GEQ (2 * .phan_slines))
	THEN
	    !
	    ! If not paging, just put out footnotes immediately.
	    ! Ditto, if the page is rather long.
	    !
	    BEGIN

	    !
	    ! Special case:  We're at the very top of the first page.
	    !
	    IF  .phan_top_first
	    THEN
		toppag ();

	    fooout (.fnct_count)	! Dump them all at once.
	    END
	ELSE
	    !
	    ! There's a whole pile of footnotes left over, and they
	    ! have to be output at the bottom of the page.  This may involve
	    ! spreading them out across several pages.
	    !
	    BEGIN

	    !
	    ! Special case:  We're at the very top of the first page.
	    !
	    IF  .phan_top_first
	    THEN
		toppag ();

	    !
	    ! Loop over all remaining footnotes
	    !
	    WHILE 1 DO
		BEGIN
		!
		! First get rid of as many footnotes as possible.
		!
		foobot ();

		!
		! Now see if there's any more to be output.  If not, we're at
		! the real end of the document (almost).
		!
		IF  .fnct_count GTR 0
		THEN
		    !
		    ! Because not all footnotes were output, we have to 
		    ! start a new page, so that successive iterations 
		    ! through this loop force out additional ones.
		    !
		    BEGIN
		    botpag ();		! First, finish the bottom of the page
		    toppag ();		! And now start the next page.
		    END
		ELSE
		    !
		    ! All footnotes have been output.  Termination of this
		    ! page is handled in a special way.
		    !
		    EXITLOOP

		END

	    END;

    !
    ! Force out FIGURE DEFERRED space, if any.
    !
    IF  .phan_figure NEQ 0
    THEN
	BEGIN

	!
	! Special case:  We're at the very top of the first page.
	!
	IF  .phan_top_first
	THEN
	    !
	    ! Automatically dumps out the space after starting a page.
	    !
	    toppag ()
	ELSE
	    !
	    ! Dump out the space.
	    !
	    no_bar_skip (.phan_figure);

	END;

    !
    ! If the page number is to be centered at the bottom of the
    ! page then position there and output it.
    !
    IF  .hct_layoutn NEQ 0
    THEN
	cpageb ();

    !
    ! If /PAUSE or /SIMULATE force next page before
    ! generating summary information.
    !
    IF  .phan_pause OR .phan_simulate
    THEN
	BEGIN

	!
	! Always force blank lines at end of document when in /SIMULATE mode.
	! If skipping output, phan_bottom has already been set by the last
	! page actually output.  If this is the "normal case", i.e., user didn't
	! specify /PAGES, then this is the time to update phan_bottom, since
	! NEWPAG won't get called to do it.
	!
	IF  NOT .gca_skip_out
	THEN
	    phan_bottom = .phan_lines_tp;	! UFORM expects phan_bottom set.
	
	!
	! Force on generation of output so blank lines get output
	!
	gca_skip_out = false;
	uform ();
	END
    ELSE

	!
	! Not /SIMULATE or /PAUSE
	!
	IF  .hold_phan_top_page AND (NOT .gca_cmd_quick)
	!
	! If user said /NOOUTPUT, don't call CLH.
	!
	THEN
	    !
	    ! User said .PAGE after all text was finished, intending
	    ! to generate a form-feed
	    !
	    BEGIN
	    fs_init (fra);
	    fs_wchar (fra, %O'14');	! Insert a form feed
	    clh (clh_out_nocrlf)
	    END;

%IF DSRPLUS %THEN
    IF	.gca_cref_changed	  ! Did one change on last run?
    THEN
	BEGIN

%IF %BLISS (BLISS32) %THEN
!+
! This logic increments the rerun count if necessary. It assures that the 
! file will be rerun only if the user said /AUTO. On Pass 1, if no previous 
! .BRN file existed, the rerun count has already been incremented (by DOOPTS),
! so we do not increment again.
!-
	IF  .gca_black_box
	   AND
	    (  (.gca_pass_count NEQ 1)
			OR
		.gca_old_brn_exists )
	THEN
	    gca_rerun_count = .gca_rerun_count + 1;

	IF .gca_pass_count EQL 4
	THEN
	    BEGIN
	    putmsg (rnfcro, 0, 0);	! Tell user cross-refs are oscillating,
	    putmsg (rnfcr1, 0, 0);	!  ... and how he can find out where.
	    END
	ELSE

	    IF .gca_pass_count GTR .gca_rerun_count
	    THEN
		BEGIN
%FI
		putmsg (rnfcrc, 0, 0);	! Tell user forward cross-refs changed,
		putmsg (rnfcr1, 0, 0);	!  ... and what he can do 
		putmsg (rnfcr2, 0, 0);	!  ... about it.

%IF %BLISS (BLISS32) %THEN
		END;
%FI

	END;

    IF .gca_cref_errcnt  GTR 0
    THEN
    	BEGIN
    	putmsg (rnfcru, .gca_cref_errcnt,  0); ! Unresolved refs	
    	IF NOT .gca_black_box
    	THEN
	    putmsg (rnfcr1, 0, 0);		!  ... and what he can do 
    	END;    	
%FI
    !
    ! If the user specified /PAGES but no pages were output then tell him so.
    !
    IF .gca_cmd_pages 
    	AND 
    (.phan_lines_tp EQL 0) 
	AND 
    (.gca_page_cnt EQL 0)
    THEN
        putmsg (rnfipf, 0, 0);

    IF  .gca_fehler
    THEN				! If any errors were detected,
	putmsg (rnferd, .gca_errcnt, 0)	! report # of lines of error messages.
    ELSE				! If no errors detected and

	IF  .termination_log
	THEN				! /LOG was specified,
	    putmsg (rnfned, 0, 0);	! then just identify version and
					! report 0 diagnostics.

    !
    ! The following IF supplies the following logic:  If /NOOUT was specified,
    ! this block isn't done.  If not, and either /LOG was specified or errors
    ! were encountered, then perform the block.
    !
    IF  (.termination_log OR .gca_fehler) 
    THEN				! If so, then report pages.
	!
	! This block determines whether or not there is currently a valid page
	! count. If not, it attempts to calculate one based on the number of
	! lines output.
	! 
	! Then it writes the second line of the termination message to the
	! log device. This line reports the number of pages output and
	! idintifies the output filename.
	!
	BEGIN

	!
	! If this is a document broken up into pages, then count logical pages.
	! Otherwise, (i.e. .NO PAGING) figure out # of spooled pages this is.
	!
	IF NOT .gca_cmd_quick
	THEN
	    BEGIN
	    IF  (NOT .phan_paging)
	    THEN
		!
		! Not a document organized into pages.
		! Assume output device spooler will break it up.
		!
		gca_page_cnt = .gca_page_cnt + 
			    (.phan_lines_tp + .phan_slines - 1) / .phan_slines
	    ELSE

		!
		! Not .NO PAGING, so bump count only if last page is not empty.
		!
		IF  (.phan_lines_tp GTR 0) 
    			AND 
    		    (NOT .gca_skip_out	OR .gca_page_cnt GTR 0)
		THEN
		    gca_page_cnt = .gca_page_cnt + 1;

	    !
	    ! Report how many pages generated and to what file.
	    !
	    putmsg (rnfpct, .gca_page_cnt, 0);
	    END;

	!
	! Report on what information, if any, was written to a .BRN file.
	! (This is reported whether or not Quick processing was in effect.)
	! If doing cross-referencing, also report how many cross-referencing
	! hits were read from the old (input) .BRN file.
	!
	SELECT true OF
	    SET
	    [.gca_index_cnt    GTR 0] : putmsg (rnfpc2, .gca_index_cnt,    0);
	    [.gca_contents_cnt GTR 0] : putmsg (rnfpc3, .gca_contents_cnt, 0);

%IF DSRPLUS %THEN
	    [.gca_new_cref_cnt GTR 0] : putmsg (rnfpc4, .gca_new_cref_cnt, 0);
	    [.gca_old_cref_cnt GTR 0] : putmsg (rnfpc5, .gca_old_cref_cnt, 0);
%FI

	    TES;

	END;

%IF (%BLISS (BLISS36) AND DSRPLUS) %THEN
    !+
    ! Call TTYRES to restore terminal to its original mode (don't pass
    ! escape sequences, and reset wrapping width). This call is made only 
    ! if the user said /DEC=VT100, which caused these terminal characteristics
    ! to be modified. In this case, the saved terminal width in GCA_TWIDTH_36
    ! will be different than its initialized value of -1.
    !-
    dispsi ();				! Disable the PSI CTRL/C interrupt.

    IF  .gca_twidth_36 NEQ -1
    THEN
	ttyres ();
%FI

    !
    ! Close all files.
    !
    close_if_open (brnoob);		! Close intermediate binary file.
    close_if_open (tteiob);
    close_if_open (ttiiob);
    close_if_open (ttoiob);
    close_if_open (tsiiob);

%IF (%BLISS (BLISS36) AND DSRPLUS) %THEN
    !+
    ! If there any entries in the cross-ref structure, make sure we release
    ! all of that dynamic memory and clear out the listhead's pointer.  This
    ! is necessary because of the interactive way DSR/PLUS is used on TOPS-20.
    ! i.e. when RUNOFF is reentered, we don't want the previous run's text
    ! lying around.    
    !-
	BEGIN
	LOCAL
	    current_entry : REF VECTOR[0],
	    desc : REF $STR_DESCRIPTOR( CLASS=DYNAMIC ), ! string desc.
	    temp_pointer;

	current_entry = .kwtrpn;

	WHILE current_entry[0] NEQ 0 DO
	    BEGIN
	    freref (.current_entry[2]);		    ! Release old c-ref bfrs,
	    desc = .current_entry[1];
	    $XPO_FREE_MEM (  STRING = (  .desc [str$h_length]  ! ref. name,
					,.desc [str$a_pointer] ) );
	    $XPO_FREE_MEM (  BINARY_DATA =( 2 ! descriptor for name,
					   ,.current_entry[1] ) );
	    temp_pointer = .current_entry[0];
	    $XPO_FREE_MEM (  BINARY_DATA =( 3 ! and keyword block
					    ,current_entry[0] ) );
	    current_entry = .temp_pointer
	    END;
	kwtrpn = 0		! initialize listhead
	END;
%FI
    RETURN;
    END;					! End of RTERM.

END						! End of module.
ELUDOM
