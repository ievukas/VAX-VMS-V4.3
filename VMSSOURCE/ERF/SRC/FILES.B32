MODULE 
FILES (IDENT = 'V04-000') = 
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  ACC, Account file dumper
!
! ABSTRACT:
!
!	This module contains the file manipulation code for
!	the accounting utilities.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Elliott A. Drayton, June 1983
!
! Modified by:
!
!	V04-008	EAD0196		Elliott A. Drayton		 23-Jul-1984
!		Made OUTPUT_NAM hold the address of the name block.
!
!	V04-007	EAD0187		Elliott A. Drayton		  6-Jul-1984
!		Removed LSTLUN. 
!
!	V04-006	EAD0161		Elliott A. Drayton		 20-Apr-1984
!		Removed related name for INPUT_NAM.
!
!	V04-005	EAD0132		Elliott A. Drayton		 9-Apr-1984
!		Added routine WRITE_MSG.
!
!	V04-004 EAD0030		Ell1ott A. Drayton		23-Aug-1983
!		Removed code to set up FORMS.
!
!
!--

!-----------------------------------------------------------------------------+
!									      !
! 				INCLUDE  FILES				      !
!									      !
!-----------------------------------------------------------------------------+

REQUIRE 'SRC$:ERFDEF.REQ';		! Common ERF definitions
REQUIRE 'SRC$:RECSELDEF.REQ';		! Defines syecom and emb fields.

!-----------------------------------------------------------------------------+
!									      !
! 			TABLE  OF  CONTENTS				      !
!									      !
!-----------------------------------------------------------------------------+
EXTERNAL ROUTINE
	LOG_FILENAME,
	OPEN_OUT_FILE,		! Fortran routine need to do I/O from DEVICE MOD
	PARSE_OUTPUT_FILES,
	WRITE_MSG;

!-----------------------------------------------------------------------------+
!									      !
! 			GENERAL  STORAGE  DEFINITIONS			      !
!									      !
!-----------------------------------------------------------------------------+

EXTERNAL
   LSTLUN_RAB_ADDRESS:		REF $BBLOCK [],
   SYS$OUTPUT_RAB_ADDRESS:	REF $BBLOCK [];

OWN

DATEXT:	INITIAL ('.DAT'),		! ".DAT" extension
LISEXT:	INITIAL ('.LIS'),		! ".LIS" extension

INPUT_NAM_RESULT:			! Resultant input name
	VECTOR [NAM$C_MAXRSS,BYTE],	!  -allocate storage

INPUT_NAM_EXPANDED:			! Expanded input name
	VECTOR [NAM$C_MAXRSS,BYTE],	!  -allocate storage

RELATED_NAM_RESULT:			! Resultant related name
	VECTOR [NAM$C_MAXRSS,BYTE],	!  -allocate storage

OUTPUT_NAM_RESULT:			! Resultant output name
	VECTOR [NAM$C_MAXRSS,BYTE],	!  -allocate storage

OUTPUT_NAM_EXPANDED:			! Expanded output name
	VECTOR [NAM$C_MAXRSS,BYTE],	!  -allocate storage

REJECTED_NAM_RESULT:			! Resultant rejected name
	VECTOR [NAM$C_MAXRSS,BYTE],	!  -allocate storage

REJECTED_NAM_EXPANDED:			! Expanded rejected name
	VECTOR [NAM$C_MAXRSS,BYTE];	!  -allocate storage


GLOBAL

RELATED_NAM:	$NAM(			! Related NAM block
	RSA = RELATED_NAM_RESULT,	!  -file name address after opening
	RSS = NAM$C_MAXRSS),		!  -(buffer size)

INPUT_NAM:	$NAM(			! Input NAM block
	ESA = INPUT_NAM_EXPANDED,	!  -file name address after parsing
	ESS = NAM$C_MAXRSS,		!  -(buffer size)
	RSA = INPUT_NAM_RESULT,		!  -file name address after opening
	RSS = NAM$C_MAXRSS),		!  -(buffer size)

OUTPUT_NAM_BLK:	$NAM(			! Output NAM block
	RLF = INPUT_NAM,		!  -get further defaults from input
	ESA = OUTPUT_NAM_EXPANDED,	!  -file name address after parsing
	ESS = NAM$C_MAXRSS,		!  -(buffer size)
	RSA = OUTPUT_NAM_RESULT,	!  -file name address after open
	RSS = NAM$C_MAXRSS),		!  -(buffer size)

REJECTED_NAM:	$NAM(			! Rejected NAM block
	RLF = INPUT_NAM,		!  -related file name
	ESA = REJECTED_NAM_EXPANDED,	!  -file name address after parsing
	ESS = NAM$C_MAXRSS,		!  -(buffer size)
	RSA = REJECTED_NAM_RESULT,	!  -file name address after open
	RSS = NAM$C_MAXRSS),		!  -(buffer size)

INPUT_XABFHC:	$XABFHC(),		! Input FHC XAB block

INPUT_FAB:	$FAB(			! Input FAB block
	XAB = INPUT_XABFHC,		!  -address of FHC XAB block
	FOP = (SQO),			!  -sequential operations only
	SHR = (PUT,UPI),		!  -allow un-interlocked, sharing
	NAM = INPUT_NAM,		!  -address of NAM block
	DNM = 'ERRLOG.SYS',		!  -default name
	FAC = GET),			!  -open for input

INPUT_RAB:	$RAB(			! Input RAB block
	USZ = 512,			!  -(buffer size)
	MBC = 16,			!  -multi-block count
	MBF = 2,			!  -multi-buffer count
	ROP = (RAH),			!  -read-ahead processing
	CTX = MSG$_READERR,		!  -error message value
	FAB = INPUT_FAB),		!  -address of FAB to be CONNECTed

OUTPUT_FAB:	$FAB(			! Output FAB block
	CTX = MSG$_OPENOUT,		!  -error message value
	FOP = (OFP, SQO),		!  -output file parse, sequential only
	NAM = OUTPUT_NAM_BLK,		!  -address of NAM block
	DNS = 4,			!  -default extension size
	DNA = DATEXT),			!  -default extension address

OUTPUT_RAB: $RAB(			! Output RAB block
	CTX = MSG$_WRITEERR,		!  -specify error message
	FAB = output_fab),		!  -address of FAB block

REJECTED_FAB:	$FAB(			! Rejected FAB block
	DNM = '.REJ',			!  -default extension
	CTX = MSG$_OPENOUT,		!  -error message value
	FOP = (OFP, SQO),		!  -output file parse, sequential only
	NAM = REJECTED_NAM),		!  -address of NAM block

REJECTED_RAB: $RAB(			! Rejected RAB block
	CTX = MSG$_WRITEERR,		!  -specify error message
	MBC = 16,			!  -multi-block count
	MBF = 2,			!  -multi-buffer count
	ROP = (WBH),			!  -write behind processing
	FAB = REJECTED_FAB),		!  -address of FAB block

OUTPUT_NAM:	LONG INITIAL (OUTPUT_NAM_BLK);

UNDECLARE LOG_FILENAME;

Global routine LOG_FILENAME (rms) =

!----
!
! Functional description
!
!	This routine is called to signal a message to
!	the user based on an error code and file name
!	that are imbedded in the passed parameter.
!
! Input parameters
!
!	RMS = Either a FAB or a RAB
!	RAB$L_FAB = pointer to fab block	(If input was a RAB)
!	FAB$L_NAM = pointer to name block
!	RAB$L_CTX = error message to be used	(If input was a RAB)
!	FAB$L_CTX = error message to be used	(If input was a FAB)
!	
!
! Output parameters
!
!	Expanded error messages to user
!	Status is RETURNed
!
!----

BEGIN

MAP
   rms:	 ref $bblock;				! Define block format


LOCAL
	fab: ref $bblock,		! Pointer to FAB block
	nam: ref $bblock,		! Pointer to NAM block
	rms_sts,			! Temporary primary status holder
	rms_stv,			! Temporary secondary status holder
	rms_ctx,			! Temporary user context holder
	status:	$bblock [long],		! Local "catch all" status return
	desc:	vector [2, long];	! Temporary string descriptor


!
!SET UP VALUES --
!	Fetch the primary and secondary status values and the user
!	context field from the RMS structure.  If a RAB was passed
!	then fetch the address of the associated FAB.
!

If .rms [rab$b_bid] eql rab$c_bid then	! If this is a rab
	BEGIN
	fab = .rms [rab$l_fab];
	rms_sts = .rms [rab$l_sts];
	rms_stv = .rms [rab$l_stv];
	rms_ctx = .rms [rab$l_ctx];
	END
   else BEGIN
	fab = .rms;
	rms_sts = .rms [fab$l_sts];
	rms_stv = .rms [fab$l_stv];
	rms_ctx = .rms [fab$l_ctx];
	END;

nam = .fab [fab$l_nam];			! Fetch address of NAM block



!
!CHECK FOR EOF --
!	End of file errors are not reported by this routine.
!

If  .rms [rab$b_bid] eql rab$c_bid	! If this is a rab
and .rms_sts eql rms$_eof		!  - and error is end of file
and .rms_ctx eql msg$_readerr		!  - and this was a read call
    then return rms$_eof;		! don't bother to report it



!
!FETCH FILE NAME --
!	Find the best filename available.  Start with the
!	resultant name; if not present try for the expanded
!	name; if also missing then settle for the original
!	file name.
!

If .nam[nam$b_rsl] neq 0 then		! IF result string nonblank,
    BEGIN
    desc[0] = .nam[nam$b_rsl];		! then display it
    desc[1] = .nam[nam$l_rsa];
    END

else if .nam[nam$b_esl] neq 0 then	! Or if expanded name nonblank
    BEGIN
    desc[0] = .nam[nam$b_esl];		! then display it
    desc[1] = .nam[nam$l_esa];
    END

else BEGIN
    desc[0] = .fab[fab$b_fns];		! Otherwise, use original
    desc[1] = .fab[fab$l_fna];		! name string in FAB
    END;



!
!NOTIFY THE USER --
!	Construct an error message using the user supplied context (CTX)
!	field and the RMS supplied primary (STS) and secondary (STV)
!	status fields.  Signal it to the user.
!

signal (.rms_ctx, 1 ,desc,		! Output an error message
		.rms_sts,		! with RMS error code
		.rms_stv);		! and secondary code


return .rms_sts;			! Pass on the status

END;

UNDECLARE PARSE_OUTPUT_FILES;

GLOBAL ROUTINE PARSE_OUTPUT_FILES =

!----
!
! Functional description
!
!	This routine is called to process output files.
!	If the files are binary (/BINARY or /REJECTED)
!	RMS is used, else fortran io is used.
!
! Input parameters
!
!	None
!
! Output parameters
!
!	Any errors encountered are RETURNed immediately.
!	TRUE is returned on a normal exit.
!
!----

BEGIN

LOCAL
	desc:	vector [2, long];	! Temporary string descriptor

OWN
	output_desc:	$bblock [dsc$k_d_bln]
			preset([dsc$b_class] = dsc$k_class_d),
	rejected_desc:	$bblock [dsc$k_d_bln]
			preset([dsc$b_class] = dsc$k_class_d);



!
!PARSE COMMAND LINE OUTPUTS ---
! Parse the /OUTPUT, /BINARY and /REJECTED qualifiers.  Store any output
! file names obtained in the FAB for future processing.
!

If GET_VALUE ( 'BINARY', output_desc )

then	BEGIN
	Output_fab [fab$b_fns] = .output_desc [dsc$w_length];
	Output_fab [fab$l_fna] = .output_desc [dsc$a_pointer];

	CALL_FUNCTION ($create (	! Call RMS with
		fab = output_fab,	!  -address of FAB
		err = log_filename));	!  -error action routine

	CALL_FUNCTION ($connect (	! Call RMS with
		rab = output_rab,	!  -address of RAB
		err = log_filename));	!  -error action routine
	END

else
	Begin
	GET_VALUE ('OUTPUT', output_desc);

	output_fab [fab$b_fns] = .output_desc [dsc$w_length];
	output_fab [fab$l_fna] = .output_desc [dsc$a_pointer];

	Open_out_file ( output_desc );
	End ;


If GET_VALUE ('REJECTED', rejected_desc) then! /REJECTED value
	BEGIN
	rejected_fab [fab$b_fns] = .rejected_desc [dsc$w_length];
	rejected_fab [fab$l_fna] = .rejected_desc [dsc$a_pointer];
	CALL_FUNCTION ($create (	! Call RMS with
		fab = rejected_fab,	!  -address of FAB
		err = log_filename));	!  -error action routine

	CALL_FUNCTION ($connect (	! Call RMS with
		rab = rejected_rab,	!  -address of RAB
		err = log_filename));	!  -error action routine
	END;

RETURN TRUE;
END;

UNDECLARE WRITE_MSG;

Global routine WRITE_MSG (msg_desc, output_flag : ref vector) =
!---
!
!	This routine writes a message to the output stream.
!
! Inputs:
!
!	msg_desc = Address of descriptor for the message
!    output_flag = Address of flag
!
! Outputs:
!
!
!---
Begin

Local
	Rab_address : REF BLOCK[,BYTE];

Map
	Msg_desc : REF BLOCK[,BYTE];

If .Lstlun_rab_address NEQ 0 then 
   Begin
   Lstlun_rab_address[rab$l_rbf] = .msg_desc[dsc$a_pointer];
   Lstlun_rab_address[rab$w_rsz] = .msg_desc[dsc$w_length];
   Rab_address = .lstlun_rab_address;
   End
else
   Begin
   If .output_flag EQLU 1 then return true;
   Sys$output_rab_address[rab$l_rbf] = .msg_desc[dsc$a_pointer];
   Sys$output_rab_address[rab$w_rsz] = .msg_desc[dsc$w_length];
   Rab_address = .sys$output_rab_address;
   End;

Rab_address[rab$l_ctx] = msg$_writeerr;
CALL_FUNCTION ($put (rab = .rab_address, err = log_filename));

Return true;
End;

END
ELUDOM
