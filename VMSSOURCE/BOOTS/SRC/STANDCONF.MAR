	.TITLE	STANDCONF - MAIN PROGRAM FOR STANDALONE CONFIGURE
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	STANDALONE CONFIGURE
;
; ABSTRACT:
;	THIS ROUTINE IS THE MAIN PROGRAM AND SUBROUTINES FOR STANDALONE 
;	CONFIGURE FOR STANDALONE VMS (I.E. STANDALONE BACKUP AND STANDALONE
;	BAD).
;	THIS PROCESS IS USED TO CONFIGURE ALL DISK AND PORT DRIVERS FROM
;	SYSINIT.  ALL MSCP- AND HSC-SERVED DEVICES ARE CONFIGURED.
;
; ENVIRONMENT:	USER, EXEC, AND KERNEL MODE
;
; AUTHOR:  MARYANN HINDEN,	CREATION DATE:	18-SEP-1979
;	   (ADAPTED FROM STASYSGEN)
;
; MODIFIED BY:
;
;	V03-006	CWH3006		CW Hobbs	8-Oct-1983
;		Properly handle the case of a null device type when displaying
;		configured devices.  Call them "unknown".
;
;	V03-005	CWH3005		CW Hobbs	24-Sep-1983
;		Add the display of configured devices so that a user has
;		a better idea of what is happening.
;
;	V03-004	CWH3004		CW Hobbs	13-Sep-1983
;		Borrow STACONFIG.MAR and produce a process suitable for
;		configuring HSC and MSCP-served devices in the environment
;		of standalone VMS.
;
;	V03-002	WMC0003		Wayne Cardoza	09-Aug-1983
;		Put D devices back.
;
;	V03-001	WMC0002		Wayne Cardoza	05-Aug-1983
;		Add lbr$output_help.
;		Disable autoconfigure of D devices until this module is made
;		to deal with noncontigous drivers.
;
;	V03-001	WMC0001		Wayne Cardoza	01-Aug-1983
;		Add B00$EXEOPEN, BOO$FILCLOSE, BOO$UFOOPEN, EXE$LOAD_CODE
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$ddbdef
	$dcdef
	$ipldef
	$sbdef
	$ucbdef

;
; MACROS:
;
	.macro	table_entry	entry_name
		table_counter = table_counter + 1
		assume	dt$_'entry_name' EQ table_counter
	.psect	stacfn_tbldat	exe,rd,nowrt
	td_'entry_name':	.ascic	 /entry_name/
	.psect	stacfn_tblptr	exe,rd,nowrt
				.address td_'entry_name'
	.endm

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

	.PSECT	BOO$SYSGEN,WRT

BOO$GL_CMDOPT::	.LONG 0			; Options longword

.psect	stacfn_data_rw	noexe,rd,wrt

msgdsc:		.long	0,0
msgbuf:		.blkb	80
ucb_vector:	.blkl	1024		; Remember 1000 ucb's
ucb_end:				; Marker for end of vector table

.psect	stacfn_data_ro	exe,rd,nowrt

BIN_TIME:	.LONG	-10*1000*1000*5,-1 ; Delta for 5 seconds
procnam:.ascid	"STANDCONF"
ctrstr:	.ascid	"Configured  !17<!AC$!AC!UL:!>device type !AC"
unknown:.ascic	"is not recognized"

table_counter = 0
.psect	stacfn_tblptr	exe,rd,nowrt
disk_table:
	.long	disk_count
	table_entry	RK06
	table_entry	RK07
	table_entry	RP04
	table_entry	RP05
	table_entry	RP06
	table_entry	RM03
	table_entry	RP07
	table_entry	RP07HT
	table_entry	RL01
	table_entry	RL02
	table_entry	RX02
	table_entry	RX04
	table_entry	RM80
	table_entry	TU58
	table_entry	RM05
	table_entry	RX01
	table_entry	ML11
	table_entry	RB02
	table_entry	RB80
	table_entry	RA80
	table_entry	RA81
	table_entry	RA60
	table_entry	RC25
	table_entry	RCF25
	table_entry	RD51
	table_entry	RX50
disk_count = table_counter

table_counter = 0
.psect	stacfn_tblptr	exe,rd,nowrt
tape_table:
	.long	tape_count
	table_entry	TE16
	table_entry	TU45
	table_entry	TU77
	table_entry	TS11
	table_entry	TU78
	table_entry	TA78
	table_entry	TU80
	table_entry	TU81
	table_entry	TA81
tape_count = table_counter

.psect	stacfn_code	exe,rd,nowrt

	.SBTTL	STANDCONF - main program
;++
; FUNCTIONAL DESCRIPTION:
;	This is the main program for standalone CONFIGURE.  It does the
;	following:
;
;		1)  Locks the entire image into the working set.
;		2)  Call BOO$CONFIGURE, which will configure all MSCP-
;		    and HSC-served devices.
;
; CALLING SEQUENCE:
;
;	Called by STASYSGEN (as SYSINIT) (via the $CREPRC directive)
;
; INPUT PARAMETERS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; ERROR INDICATIONS:
;
;	Various errors printed on the system console
;
;--

	.ENTRY	STANDCONF,^M<R2,R3>

;
; Load the entire image into the working set.  If running from the console device, we
; can not do any paging from the image, since the piece of media we loaded from might
; not be in the drive.
;
	$LKWSET_S INADR=BOO$GQ_LIMITS, RETADR=BOO$GQ_RETADR

;
; Change our process name to "STANDCONF".  SYSINIT (stasysgen) creates us with the
; process name of "STANDLOAD".  When SYSINIT sees our name change, it knows that we
; have been loaded and that it is OK to request a new piece of console media.
;
	$SETPRN_S	PRCNAM=PROCNAM

;
; Get current values for local copy of SYSPARAM
;
	CALLS	#0,BOO$USEACT

; 
; Set a timer for 5 seconds
;
	$SETIMR_S	efn    = #3,-
			daytim = BIN_TIME,-
			astadr = AST_REC

;
; Start threads which will configure MSCP- and HSC-served disks.
;
	CALLS	#0,BOO$CONFIGURE

;
; BOO$CONFIGURE will go into a hibernate state, so we should never get here
;
	RET

AST_REC:	.WORD ^M<R2>
;
; Go to kernel mode and print any devices configured from remote systems
;
	$cmkrnl_s routin=show_devices

;
; Reset the timer ast
;
	$SETIMR_S	efn    = #3,-		; Reset timer
			daytim = BIN_TIME,-
			astadr = AST_REC

	RET					; Dismiss AST

;
; Scan the io database and print names of devices served from remote systems
;
.entry SHOW_DEVICES,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

1$:	setipl	#ipl$_scs		; Block SCS interrupts while scanning
	movaq	g^scs$gq_config,r11	; Keep a pointer to the sb queue header
	movab	g^scs$ga_localsb,r10	; Keep a pointer to the local sb
	movl	(r11),r9		; Get a pointer to the first sb in the queue
10$:	cmpl	r9,r11			; Are we back at the sb queue header
	beql	60$			; Exit when done with sb's
	cmpl	r9,r10			; Is it our system?
	beql	50$			; Yes, we aren't interested
	movab	sb$t_nodename(r9),r8	; Now r8 points to the nodename
	movl	sb$l_ddb(r9),r7		; Get the pointer to the first ddb on the sb
20$:	beql	50$			; Done with ddb's, move to next sb
	movab	ddb$t_name(r7),r6	; Now r6 points to "DBA" or something similar
	movl	ddb$l_ucb(r7),r5	; Make r5 point to the first ucb on the ddb
30$:	beql	40$			; Done with ucb's, move to next ddb
	bsbb	display_ucb		; Display one ucb
	blbs	r0,1$			; If we did display, start over
	movl	ucb$l_link(r5),r5	; Move to the next ucb
	brb	30$
40$:	movl	ddb$l_link(r7),r7	; Move to the next ddb
	brb	20$
50$:	movl	sb$l_flink(r9),r9	; Move to the next sb
	brb	10$
60$:	setipl	#0			; Restore interrupts
	ret

;
; Display one ucb, first we check the ucb vector to see if this ucb address is
; in the vector.  If so, then we have already displayed this device.  If not,
; then put the ucb into the vector so that we won't display it again.
;
display_ucb:
	moval	ucb_vector,r0		; Point r0 at the vector
	moval	ucb_end,r1
1$:	cmpl	r0,r1			; At the end?
	beql	3$			; Ignore it
	cmpl	(r0),r5			; Already displayed this one?
	beql	3$			; Ignore it
	tstl	(r0)			; Have we found an empty slot?
	beql	5$			; Yes, then we must print this one
	addl2	#4,r0			; Move to the next ucb entry
	brb	1$
3$:	clrl	r0			; Let them know we did not print
	rsb
;
; Haven't displayed it yet.
;
5$:	movl	r5,(r0)			; Record this ucb as printed
	movb	ucb$b_devclass(r5),r4	; Grab the device class
	cmpb	#dc$_disk,r4		; Is it a disk?
	bneq	10$			; Not a disk, skip to check next
	moval	disk_table,r0		; Make r0 point at the disk table
	brb	20$
10$:	cmpb	#dc$_tape,r4		; Is it a tape?
	bneq	3$			; We only do tapes and disks
	moval	tape_table,r0		; Make r0 point at the tape table
20$:	movzbl	ucb$b_devtype(r5),r4	; Now get the device class
	beql	30$			; Null type?  Call it unknown.
	cmpl	r4,(r0)			; Check against number of entries in table
	bgtr	30$			; Too big?  Call it unknown.
	movl	(r0)[r4],r3		; Get the pointer to the name
	brb	40$
30$:	movab	unknown,r3		; Print the unknown device
40$:	movzwl	ucb$w_unit(r5),r4	; Grab the unit number
	movzbl	#80,msgdsc		; Set the full length of the buffer
	movab	msgbuf,msgdsc+4		; Move address to the descriptor
	$fao_s	ctrstr=ctrstr,outlen=msgdsc,outbuf=msgdsc,p1=r8,p2=r6,p3=r4,p4=r3
	setipl	#0			; Enable interrupts while printing
	$brdcst_s msgbuf=msgdsc		; Tell them about it
	movl	#1,r0			; Let them know we printed
	rsb

	.SBTTL	Dummy entry points

;
; These entry points are need to resolve references to routines
; not linked with the standalone version of CONFIG.
;

EXE$LOAD_CODE::
LBR$OUTPUT_HELP::
LIB$PUT_OUTPUT::
LIB$GET_INPUT::
	.WORD	0			; ENTRY MASK
	CLRL	R0
	RET

BOO$READPROMPT::
BOO$READFILE::
BOO$FILCLOSE::
BOO$UFOOPEN::
BOO$EXEOPEN::
RIO$OUTPUT_LINE::
PUTERROR::
	CLRL	R0
	RSB

RIO$GW_OUTLEN::
RIO$AB_BUFFER::
	.BLKB	1

	.END	STANDCONF
