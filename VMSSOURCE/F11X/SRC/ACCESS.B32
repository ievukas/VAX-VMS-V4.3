MODULE ACCESS (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This is the main processing routine for the ACCESS function.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  20-Dec-1976  15:43
!
! MODIFIED BY:
!
!	V03-023	CDS0004		Christian D. Saether	14-Aug-1984
!		Modify handling of extension fcbs.  Deal with stale
!		fcbs.
!
!	V03-022	ACG0438		Andrew C. Goldstein,	26-Jul-1984  13:41
!		Add interlock to special caches for write accessed
!		file structure files. Also move create-if handling to
!		the dispatcher.
!
!	V03-021	CDS0003		Christian D. Saether	20-Apr-1984
!		Access arbitration changes.
!
!	V03-020	ACG0412		Andrew C. Goldstein,	22-Mar-1984  18:15
!		Implement agent access mode support; add access mode to
!		check protection call
!
!	V03-019	CDS0002		Christian D. Saether	 6-Mar-1984
!		Add re-serialization logic for coming at extension
!		headers directly.
!
!	V03-018	CDS001		Christian D. Saether	 1-Mar-1984
!		Remove call to FLUSH_FID.
!
!	V03-017	CDS0009		Christian D. Saether	29-Dec-1983
!		Add L_NORM linkage to routine declarations.  Invoke
!		BASE_REGISTER and BIND_COMMON macros where needed.
!
!	V03-016	LMP0166		L. Mark Pilant,		28-Oct-1983  19:07
!		Correct a bug that caused execute access to grant write access
!		to a directory during a create-if.
!
!	V03-015	CDS0008		Christian D. Saether	23-Sep-1983
!		Modify interface to SERIAL_FILE routine.
!		Remove storing access lock ID in FIB.
!
!	V03-014	LMP0149		L. Mark Pilant,		16-Sep-1983  13:46
!		Fix potential buffer management problem that may occur in
!		READ_ATTRIB.
!
!	V03-013	ACG0354		Andrew C. Goldstein,	13-Sep-1983  16:11
!		Add alternate access validation mask
!
!	V03-012	CDS0007		Christian D. Saether	 3-May-1983
!		Move ACCESS_LOCK and LOCK_MODE routines to
!		separate module.
!		Add call to SERIAL_FILE sync routine.
!
!	V03-011	CDS0006		Christian D. Saether	28-Apr-1983
!		Clear DELAY_TRUNC in value block if writer.
!
!	V03-010	CDS0005		Christian D. Saether	19-Apr-1983
!		Don't charge quota for access lock.
!		Bug check on unexpected errors.
!
!	V03-009	CDS0004		Christian D. Saether	 6-Apr-1983
!		Further refinement of locking routine interfaces.
!		ACCESS_LOCK tests ACCLCK_ID for conversions.
!		ACCESS_LOCK tests CURRENT_UCB [UCB$L_PID] to see if shared.
!
!	V03-008	CDS0003		Christian D. Saether	17-Jan-1983
!		Redo the access locking routine interface.
!
!	V03-007	CDS0002		Christian D. Saether	 7-Jan-1983
!		Take out access lock in exec mode.  Return lock id in fib.
!
!	V03-006	LMP0059		L. Mark Pilant,		21-Dec-1982  11:05
!		Always create an FCB when a file header is accessed.  This
!		eliminates a lot of special casing in the FCB handling.
!
!	V03-005	CDS0001		Christian D. Saether	 6-Dec-1982
!		Changes to support lock manager based access control.
!
!	V03-004	LMP48917	L. Mark Pilant,		7-Oct-1982  12:45
!		Eliminate the explicit setting of the the access time if
!		write access is sought for a particular file.
!
!	V03-003	LMP0036		L. Mark Pilant,		30-Jun-1982  10:00
!		Add support for Access Control Lists.
!
!	V03-002	LMP0023		L. Mark Pilant,		 8-Apr-1982  10:40
!		If there is only one FCB, don't call REMAP_FILE but still
!		set COMPLETE in the window.
!
!	V03-001	LMP0016		L. Mark Pilant,		25-Mar-1982  13:15
!		Remove diddling of the COMPLETE bit in the window segments.
!
!	V02-009	ACG0258		Andrew C. Goldstein,	26-Jan-1982  16:54
!		Fix reference to RVN 1 in expiration date processing
!
!	V02-008	ACG0230		Andrew C. Goldstein,	23-Dec-1981  23:17
!		Add expiration date maintenance
!
!	V02-007	LMP0003		L. Mark Pilant,		 8-Dec-1981  10:15
!		Added byte limit quota check on window creation.
!
!	V02-006	ACG0225		Andrew C. Goldstein,	24-Nov-1981  17:18
!		Add NOLOCK support
!
!	V02-005	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:24
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

FORWARD ROUTINE
	ACCESS		: L_NORM,	! main access function processing
	SET_EXPIRE 	: L_NORM;	! enable expiration date recording

GLOBAL ROUTINE ACCESS : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This is the main processing routine for the ACCESS function.
!
! CALLING SEQUENCE:
!	ACCESS ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!	IO_PACKET: address of I/O request packet
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	PRIMARY_FCB: FCB of file
!	CURRENT_WINDOW: address of file window
!	USER_STATUS: I/O status block to return to user
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCB & window created
!
!--

BEGIN

BUILTIN
	CMPM,
	SUBM;

LABEL
	CHECK_EXPIRE;			! check file expiration date

LOCAL
	REALBASIS,
	STATUS,				! protection check status value
	FCB_CREATED,			! flag indicating new FCB created
	PACKET		: REF BBLOCK,	! address of I/O packet
	ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH],
					! buffer descriptors
	FIB		: REF BBLOCK,	! file identification block
	FCB		: REF BBLOCK,	! FCB address
	UCB		: REF BBLOCK,	! UCB of RVN 1
	PRIMARY_VCB	: REF BBLOCK,	! VCB of RVN 1
	HEADER		: REF BBLOCK,	! address of file header
	NEW_HEADER	: REF BBLOCK,	! address of extension header
	IDENT_AREA	: REF BBLOCK,	! address of header ident area
	DAY_TIME	: VECTOR [2],	! time of day
	FUNCTION	: BLOCK [1];	! function code qualifiers

EXTERNAL
	ACP$GB_WRITBACK	: BITVECTOR ADDRESSING_MODE (ABSOLUTE);
					! ACP cache writeback flags

BIND_COMMON;

EXTERNAL ROUTINE
	REBLD_PRIM_FCB	: L_NORM NOVALUE, ! rebuild primary fcb from header
	BUILD_EXT_FCBS	: L_NORM NOVALUE, ! construct extension fcbs, if nec.
	ARBITRATE_ACCESS : L_JSB_2ARGS,	! arbitrate file access
	CONV_ACCLOCK	: L_NORM,	! convert access lock.
	RELEASE_SERIAL_LOCK : L_NORM NOVALUE,
	SERIAL_FILE	: L_NORM,	! serialize file requests
	GET_FIB		: L_NORM,	! get FIB for operation
	FIND		: L_NORM,	! find file in directory
	CREATE		: L_NORM,	! create file
	SWITCH_VOLUME	: L_NORM,	! switch to correct volume
	SEARCH_FCB	: L_NORM,	! search FCB list
	READ_HEADER	: L_NORM,	! read file header
	CREATE_FCB	: L_NORM,	! create an FCB
	CHECK_PROTECT	: L_NORM,	! check file protection
	CREATE_WINDOW	: L_NORM,	! create a window
	MAKE_ACCESS	: L_NORM ADDRESSING_MODE (GENERAL), ! complete the access
	ALLOCATION_LOCK	: L_NORM,	! take volume allocation lock
	ALLOCATION_UNLOCK : L_NORM,	! release volume allocation lock
	RELEASE_LOCKBASIS : L_NORM,	! release buffers under lock
	DELETE_FID	: L_NORM,	! flush file ID cache
	PURGE_EXTENT	: L_NORM,	! flush extent cache
	FLUSH_QUO_CACHE	: L_NORM,	! flush quota cache
	CACHE_LOCK	: L_NORM,	! take out cache interlock
	CHECKSUM	: L_NORM,	! compute file header checksum
	MARK_DIRTY	: L_NORM,	! mark buffer for writeback
	READ_ATTRIB	: L_NORM,	! read file attributes
	REMAP_FILE	: L_NORM,	! remap the file completely
	MARK_COMPLETE;			! mark the file as complete

! Enable the deaccess cleanup if an access is taking place.
!

PACKET = .IO_PACKET;
FUNCTION = .PACKET[IRP$W_FUNC];
IF .FUNCTION[IO$V_ACCESS]
THEN
    BEGIN
    CLEANUP_FLAGS[CLF_ZCHANNEL] = 1;
    CLEANUP_FLAGS[CLF_DELWINDOW] = 1;
    END;

! Set up pointers to interesting control blocks.
!

					! pointer to buffer descriptors
ABD = .BBLOCK [.PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];
FIB = GET_FIB (.ABD);			! pointer to FIB
IF .FIB[FIB$L_ALT_ACCESS] NEQ 0
THEN FIB[FIB$V_ALT_GRANTED] = 1;	! assume access granted

! Look up the file in the directory if called for.
!

IF .CLEANUP_FLAGS[CLF_DIRECTORY]
THEN FIND (.ABD, .FIB, 0);

! If there is a file open on the channel, check the file ID returned by the
! FIND against the file ID that is open. If they are different, drop the FCB
! and window addresses on the floor.
!

IF .PRIMARY_FCB NEQ 0
THEN
    IF .PRIMARY_FCB[FCB$W_FID_NUM] NEQ .FIB[FIB$W_FID_NUM]
    OR .PRIMARY_FCB[FCB$W_FID_RVN] NEQ .FIB[FIB$W_FID_RVN]
    THEN
	BEGIN
	PRIMARY_FCB = 0;
	CURRENT_WINDOW = 0;
	END;

! If this is a find only, exit now to avoid an extraneous read of the
! file header.
!

IF NOT .FUNCTION[IO$V_ACCESS]		! if no access
AND .PACKET[IRP$W_BCNT] LEQ ABD$C_ATTRIB ! and no attribute list
THEN RETURN 1;				! all done

! Switch context to the volume of the specified RVN.
!

SWITCH_VOLUME (.FIB[FIB$W_FID_RVN]);

! Synchronize further processing on this file.
!

PRIM_LCKINDX = SERIAL_FILE (FIB [FIB$W_FID]);

! Find the FCB of the file, if one exists. then read the file
! header. If there is no FCB, create one.
!

FCB = SEARCH_FCB (FIB[FIB$W_FID]);
REALBASIS = 0;
HEADER = READ_HEADER (FIB[FIB$W_FID], .FCB, REALBASIS);

IF .REALBASIS NEQ 0
THEN
    BEGIN
    LOCAL
	FID : BBLOCK [6];

    FID [FID$W_NUM] = .REALBASIS<0,16>;
    FID [FID$B_NMX] = .REALBASIS<16,8>;
    FID [FID$B_RVN] = .REALBASIS<24,8>;

    SWITCH_VOLUME (.FID [FID$B_RVN]);

    RELEASE_SERIAL_LOCK (.PRIM_LCKINDX);

    PRIM_LCKINDX = SERIAL_FILE (FID);

    IF SEARCH_FCB (FID) EQL 0
    THEN
	ERR_EXIT (SS$_NOSUCHFILE);

    HEADER = READ_HEADER (FIB [FIB$W_FID], .FCB);
    END;

! If the file is marked for delete and is not accessed by this user, and
! the accessor is not the system, deny its existence.
!

IF .CURRENT_WINDOW EQL 0 AND .HEADER[FH2$V_MARKDEL]
AND NOT .BBLOCK [BBLOCK [.PACKET[IRP$L_ARB], ARB$Q_PRIV], PRV$V_BYPASS]
THEN ERR_EXIT (SS$_NOSUCHFILE);

FCB_CREATED = 0;
IF .FCB EQL 0
THEN
    BEGIN
    FCB_CREATED = 1;
    FCB = KERNEL_CALL (CREATE_FCB, .HEADER);
    END;
PRIMARY_FCB = .FCB;			! record FCB for external use

! If access is requested, check for conflicts and file protection.
! then create a window and link everything up.
!

IF .FUNCTION[IO$V_ACCESS]
THEN
    BEGIN
    IF (.HEADER[FH2$V_LOCKED])
    AND NOT .BBLOCK [BBLOCK [.PACKET[IRP$L_ARB], ARB$Q_PRIV], PRV$V_BYPASS]
    THEN ERR_EXIT (SS$_FILELOCKED);		! file is deaccess locked

	BEGIN
	LOCAL
	    PREV_MODE;

	PREV_MODE = .FCB [FCB$B_ACCLKMODE];

	IF NOT ARBITRATE_ACCESS (.FIB [FIB$L_ACCTL], .FCB)
	THEN ERR_EXIT (SS$_ACCONFLICT);

	CURRENT_WINDOW = CREATE_WINDOW (.FIB[FIB$L_ACCTL], .FIB[FIB$B_WSIZE],
				.HEADER, .PACKET[IRP$L_PID], .FCB);

	IF .CURRENT_WINDOW EQL 0
	THEN
	    BEGIN

	    IF .PREV_MODE<0,8> LSSU .FCB [FCB$B_ACCLKMODE]
	    THEN
		CONV_ACCLOCK (.PREV_MODE, .FCB);

	    ERR_EXIT (SS$_EXBYTLM);
	    END;

	MAKE_ACCESS (.FCB, .CURRENT_WINDOW, .ABD);

	IF .FCB [FCB$V_DELAYTRNC]
	    AND .FIB [FIB$V_WRITE]
	THEN
	    BEGIN
	    IF .FCB [FCB$B_ACCLKMODE] LSSU LCK$K_PWMODE
	    THEN
		IF NOT CONV_ACCLOCK (LCK$K_PWMODE, .FCB)
		THEN
		    BUG_CHECK (XQPERR, FATAL, 'Unexpected lock manager error');

	    FCB [FCB$V_DELAYTRNC] = 0;
	    FCB [FCB$L_TRUNCVBN] = 0;

	    CONV_ACCLOCK (.FCB [FCB$B_ACCLKMODE], .FCB);
	    END;

	END;

! If file expiration is enabled and the volume is writable, check
! the current expiration date. If it needs to be updated, note this for
! processing during deaccess. Note that we use the retention parameters
! from RVN 1 if this is a volume set.
!

    CHECK_EXPIRE: BEGIN
    PRIMARY_VCB = .CURRENT_VCB;
    UCB = .CURRENT_UCB;
    IF .PRIMARY_VCB[VCB$W_RVN] NEQ 0
    THEN
	BEGIN
	UCB = .VECTOR [CURRENT_RVT[RVT$L_UCBLST], 0];
	IF .UCB EQL 0
	THEN LEAVE CHECK_EXPIRE;
	PRIMARY_VCB = .UCB[UCB$L_VCB];
	END;

    IF NOT .BBLOCK [UCB[UCB$L_DEVCHAR], DEV$V_SWL]
    AND NOT .FIB[FIB$V_NORECORD]
    AND CMPM (2, PRIMARY_VCB[VCB$Q_RETAINMAX], UPLIT (0, 0)) NEQ 0
    AND .HEADER[FH2$B_MPOFFSET]-.HEADER[FH2$B_IDOFFSET]
	GEQU ($BYTEOFFSET (FI2$Q_EXPDATE) + FI2$S_EXPDATE) / 2
    THEN
	BEGIN
	IDENT_AREA = .HEADER + .HEADER[FH2$B_IDOFFSET]*2;
	$GETTIM (TIMADR = DAY_TIME);
	SUBQ (PRIMARY_VCB[VCB$Q_RETAINMIN], DAY_TIME);
	IF CMPM (2, IDENT_AREA[FI2$Q_EXPDATE], DAY_TIME) LSS 0
	THEN KERNEL_CALL (SET_EXPIRE);
	END;
    END;				! end of block CHECK_EXPIRE

    END;				! end of access processing

! If the file is multi-header, read the extension headers and create
! extension FCB's as necessary.
!

IF .FCB_CREATED
THEN
    BUILD_EXT_FCBS (.HEADER)
ELSE
    IF .FCB [FCB$V_STALE]
    THEN
	BEGIN

	REBLD_PRIM_FCB (.FCB, .HEADER);

	BUILD_EXT_FCBS (.HEADER);

	END;

!
! Finally make sure that access is allowed to the file.
!

IF .FUNCTION[IO$V_ACCESS]
THEN
    BEGIN
    STATUS = CHECK_PROTECT (IF .FIB[FIB$V_EXECUTE]
		    AND NOT .FIB[FIB$V_WRITE]
		    AND NOT .FIB[FIB$V_NOREAD]
		    AND .PACKET[IRP$V_MODE] LEQU 2
		    THEN EXEC_ACCESS
		    ELSE .FIB[FIB$V_WRITE] OR .FIB[FIB$V_NOREAD],
		    .HEADER,
		    .FCB,
		    MAXU (.PACKET[IRP$V_MODE], .FIB[FIB$B_AGENT_MODE]),
		    .FIB[FIB$L_ALT_ACCESS],
		    .FIB[FIB$V_ALT_REQ]);

    IF .STATUS EQL SS$_NOTALLPRIV
    THEN FIB[FIB$V_ALT_GRANTED] = 0;

! If this is a write access to the index file, the storage map, or the
! quota file, flush the appropriate cache. Also take out the cache lock
! if the volume is cluster accessible.
!

    IF .CURRENT_WINDOW[WCB$V_WRITE]
    AND ((.FIB[FIB$B_FID_NMX] EQL 0
	  AND .FIB[FIB$W_FID_NUM] LEQU FID$C_BITMAP)
	 OR .FCB EQL .CURRENT_VCB[VCB$L_QUOTAFCB])
    THEN
	BEGIN
	ALLOCATION_LOCK ();

	IF .FCB EQL .CURRENT_VCB[VCB$L_QUOTAFCB]
	THEN FLUSH_QUO_CACHE ()
	ELSE IF .FIB[FIB$W_FID_NUM] EQL FID$C_INDEXF
	THEN DELETE_FID (0)
	ELSE PURGE_EXTENT (0, 0);

	RELEASE_LOCKBASIS (-1);
	ALLOCATION_UNLOCK ();

	IF .BBLOCK [CURRENT_UCB[UCB$L_DEVCHAR2], DEV$V_CLU]
	AND .FCB[FCB$L_CACHELKID] EQL 0
	THEN
	    BEGIN
	    STATUS = CACHE_LOCK (.FCB[FCB$L_LOCKBASIS], FCB[FCB$L_CACHELKID], 2);
	    IF NOT .STATUS THEN ERR_EXIT (.STATUS);
	    END;
	END;
    END;

! Do read attributes if requested.
!

IF .PACKET[IRP$W_BCNT] GTR ABD$C_ATTRIB
THEN
    BEGIN
    IF .CURRENT_WINDOW EQL 0
    THEN STATUS = CHECK_PROTECT (RDATT_ACCESS, .HEADER, .FCB,
				 MAXU (.PACKET[IRP$V_MODE], .FIB[FIB$B_AGENT_MODE]),
				 .FIB[FIB$L_ALT_ACCESS], .FIB[FIB$V_ALT_REQ]);
    IF NOT KERNEL_CALL (READ_ATTRIB, .HEADER, .ABD) THEN ERR_EXIT ();
    HEADER = .FILE_HEADER;
    END;

IF .STATUS EQL SS$_NOTALLPRIV
THEN FIB[FIB$V_ALT_GRANTED] = 0;

! If necessary map the file completely.
!

IF .FUNCTION[IO$V_ACCESS]
THEN
    IF .CURRENT_WINDOW[WCB$V_CATHEDRAL]
    THEN
	IF .PRIMARY_FCB[FCB$L_EXFCB] NEQ 0
	THEN REMAP_FILE()
	ELSE KERNEL_CALL (MARK_COMPLETE, .CURRENT_WINDOW);

RETURN 1;

END;					! end of routine ACCESS

GLOBAL ROUTINE SET_EXPIRE : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the bit in a window marking the file for
!	expiration date recording when it is closed.
!
! CALLING SEQUENCE:
!	SET_EXPIRE ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_WINDOW: address of file window
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	expire bit set
!
!--

BEGIN

BIND_COMMON;

CURRENT_WINDOW[WCB$V_EXPIRE] = 1;

1
END;					! End of routine SET_EXPIRE

END
ELUDOM
