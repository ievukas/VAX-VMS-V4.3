%TITLE 'NDXTEX -- RUNOFF to TEX conversion'
MODULE NDXTEX (IDENT = 'V04-000'
		%BLISS32 [, ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!   DSR (Digital Standard RUNOFF) /DSRPLUS DSRINDEX/INDEX Utility
!
! ABSTRACT:
!   This module contains code to convert RUNOFF input text lines to
!   TEX text lines.
!
! ENVIRONMENT:	 Transportable
!
! AUTHOR:	 JPK
!
! CREATION DATE: March 1983
!
! MODIFIED BY:
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    RNOTEX : NOVALUE;			! Generate TEX output

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';

%IF %BLISS (BLISS32)
%THEN

REQUIRE 'REQ:NDXVMSREQ';

%FI

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

LITERAL
    TRUE = 1,
    FALSE = 0,
    BUFFER_SIZE = 2000;

LITERAL					! Names for various fonts.
    NORMAL_FONT	= 0,			! NOTE: code in RNOTES makes use of the
    BOLD_FONT	= 1,			! fact that NORMAL_FONT is zero and that
    ITALIC_FONT	= 2,			! (BOLD_FONT OR ITALIC_FONT) is equal to
    BOLD_ITALIC	= 3;			! BOLD_ITALIC.

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL
    TAB : UNSIGNED (8);

%SBTTL 'RNOTEX - Generate TEX Output from RUNOFF text'
GLOBAL ROUTINE RNOTEX (RNO_LEN, RNO_PTR, DSC) : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine converts RUNOFF input text to TEX input text
!
! FORMAL PARAMETERS:
!
!	RNO_LEN	- Length of input text
!	RNO_PTR - CH$PTR to input text
!	DSC	- Address of output string descriptor
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!--
    BEGIN

    LOCAL
	LINE : VECTOR [CH$ALLOCATION (BUFFER_SIZE + 50)],
	LEADING_BLANKS,
	I_PTR,					! Copy of input line pointer
	I_LEN,					! Copy of input line length
	L_PTR,					! Pointer to output line
	L_LEN,					! Length of output line
	CURRENT_FONT,				! Font currently in use
	NEXT_FONT,				! Font of next character
	CH;					! Current character

    L_LEN = 0;					! No characters in output string
    L_PTR = CH$PTR (LINE);			! Point to beginning of output string
    CURRENT_FONT = NORMAL_FONT;			! Font currently in use
    NEXT_FONT = NORMAL_FONT;			! Font of next character

    I_LEN = .RNO_LEN;
    I_PTR = CH$PLUS (.RNO_PTR, .RNO_LEN - 1);

    DECR I FROM .RNO_LEN - 1 TO 0 DO
	BEGIN
	!
	! Remove trailing whitespace
	!
	CH = CH$RCHAR (.I_PTR);

	IF (.CH NEQ %C' ') AND (.CH NEQ TAB) THEN EXITLOOP;

	I_LEN = .I;
	I_PTR = CH$PLUS (.I_PTR, -1);
	END;

    I_PTR = .RNO_PTR;
    LEADING_BLANKS = 0;

    DECR I FROM .I_LEN TO 1 DO
	!
	! Count the number of leading blanks
	!
	IF CH$RCHAR_A (I_PTR) EQL %C' '
	THEN
	    LEADING_BLANKS = .LEADING_BLANKS + 1
	ELSE
	    BEGIN
	    I_LEN = .I;
	    I_PTR = CH$PLUS (.I_PTR, -1);	! Back up to account for overshoot
	    EXITLOOP;
	    END;

    IF .LEADING_BLANKS
    THEN
	BEGIN
	!
	! Odd number of leading blanks
	!
	I_LEN = .I_LEN + 1;
	I_PTR = CH$PLUS (.I_PTR, -1);

	LEADING_BLANKS = .LEADING_BLANKS - 1;
	END;

    INCR I FROM 1 TO .LEADING_BLANKS / 2 DO
	BEGIN
	!
	! Insert indent sequence for each pair of leading blanks
	!
	CH$MOVE (8, CH$PTR (UPLIT ('\mspace ')), .L_PTR);
	L_PTR = CH$PLUS (.L_PTR, 8);
	L_LEN = .L_LEN + 8;
	END;

    !
    ! Process text portion of line
    !
    INCR I FROM 1 TO .I_LEN DO
	BEGIN
	IF .L_LEN GEQ BUFFER_SIZE
	THEN
	    BEGIN
	    !
	    ! String too long for buffer
	    !
%IF %BLISS (BLISS32)
%THEN						! Signal errors in BLISS32

	    SIGNAL (INDEX$_TRUNCATED, 0, INDEX$_TEXTD, 2, .L_LEN, CH$PTR (LINE));

%ELSE						! Use $XPO_PUT_MSG otherwise

	    $XPO_PUT_MSG (SEVERITY = WARNING,
		STRING = 'string too long - truncated',
		STRING = $STR_CONCAT ('entry text: ', (.L_LEN, CH$PTR (LINE))));

%FI

	    EXITLOOP;
	    END;

	CH = CH$RCHAR_A (I_PTR);		! Get next character

	SELECTONE .CH OF
	    SET

	    [%C'*']:
		!
		! Bold next character
		!
		NEXT_FONT = .NEXT_FONT OR BOLD_FONT;

	    [%C'&']:
		!
		! Next character is italic
		!
		NEXT_FONT = .NEXT_FONT OR ITALIC_FONT;

	    [%C'%']:
		BEGIN
		!
		! Overstrike previous character - ignored
		!
%IF %BLISS (BLISS32)
%THEN						! Signal errors for BLISS32

		SIGNAL (INDEX$_OVERSTRK, 0, INDEX$_TEXTD, 2, .RNO_LEN, .RNO_PTR);

%ELSE						! Use $XPO_PUT_MSG otherwise

		$XPO_PUT_MSG (SEVERITY = WARNING,
		    STRING = 'The following line contains an overstrike sequence',
		    STRING = $STR_CONCAT ('entry text: ', (.RNO_LEN, .RNO_PTR)));

%FI

		CH$RCHAR_A (I_PTR);		! Ignore next character
		I = .I + 1;
		END;

	    [OTHERWISE]:
		BEGIN
		!
		! A 'normal' character
		!
		IF .CH EQL %C'_'
		THEN
		    BEGIN
		    !
		    ! Character is quoted.
		    ! Get character.
		    !
		    CH = CH$RCHAR_A (I_PTR);
		    I = .I + 1;
		    END;

		IF  (.CURRENT_FONT NEQ .NEXT_FONT)
		AND (.CH NEQ %C' ')
		THEN
		    BEGIN
		    !
		    ! Next character is not of the same font and is non-blank.
		    !
		    IF .CURRENT_FONT NEQ NORMAL_FONT
		    THEN
			BEGIN
			!
			! Turn off old font.
			!
			CH$WCHAR_A (%C'}', L_PTR);
			L_LEN = .L_LEN + 1;
			END;

		    IF .NEXT_FONT NEQ NORMAL_FONT
		    THEN
			BEGIN
			!
			! Turn on new font.
			!
			CH$WCHAR_A (%C'{', L_PTR);
			CH$WCHAR_A (%C'\', L_PTR);

			SELECTONE .NEXT_FONT OF
			    SET

			    [BOLD_FONT]:
				BEGIN
				CH$WCHAR_A (%C'b', L_PTR);
				CH$WCHAR_A (%C'f', L_PTR);
				END;

			    [ITALIC_FONT]:
				BEGIN
				CH$WCHAR_A (%C'i', L_PTR);
				CH$WCHAR_A (%C't', L_PTR);
				END;

			    [BOLD_ITALIC]:
				BEGIN
				CH$WCHAR_A (%C'b', L_PTR);
				CH$WCHAR_A (%C'i', L_PTR);
				END;

			    TES;

			CH$WCHAR_A (%C' ', L_PTR);
			L_LEN = .L_LEN + 5;
			END;

		    CURRENT_FONT = .NEXT_FONT;
		    END;

		NEXT_FONT = NORMAL_FONT;

		IF (.CH LSS %C' ') OR (.CH GTR %O'176')
		THEN
		    BEGIN
		    !
		    ! Character is a control character which are not allowed
		    !
%IF %BLISS (BLISS32)
%THEN						! Signal errors in BLISS32

		    SIGNAL (INDEX$_CTRLCHAR, 0, INDEX$_TEXTD, 2, .RNO_LEN, .RNO_PTR);

%ELSE						! Use $XPO_PUT_MSG otherwise

		    $XPO_PUT_MSG (SEVERITY = WARNING,
			STRING = 'the following line contains control characters - ignored',
			STRING = $STR_CONCAT ('entry text: ', (.RNO_LEN, .RNO_PTR)));

%FI

		    END
		ELSE
		    BEGIN

		    SELECTONE .CH OF
			SET

			[%C'_']:
			    BEGIN
			    CH$MOVE (4, CH$PTR (UPLIT ('{\_}')), .L_PTR);
			    L_PTR = CH$PLUS (.L_PTR, 4);
			    L_LEN = .L_LEN + 4;
			    END;

			[%C'#']:
			    BEGIN
			    CH$MOVE (4, CH$PTR (UPLIT ('{\#}')), .L_PTR);
			    L_PTR = CH$PLUS (.L_PTR, 4);
			    L_LEN = .L_LEN + 4;
			    END;

			[%C'$']:
			    BEGIN
			    CH$MOVE (4, CH$PTR (UPLIT ('{\$}')), .L_PTR);
			    L_PTR = CH$PLUS (.L_PTR, 4);
			    L_LEN = .L_LEN + 4;
			    END;

			[%C'%']:
			    BEGIN
			    CH$MOVE (4, CH$PTR (UPLIT ('{\%}')), .L_PTR);
			    L_PTR = CH$PLUS (.L_PTR, 4);
			    L_LEN = .L_LEN + 4;
			    END;

			[%C'&']:
			    BEGIN
			    CH$MOVE (4, CH$PTR (UPLIT ('{\&}')), .L_PTR);
			    L_PTR = CH$PLUS (.L_PTR, 4);
			    L_LEN = .L_LEN + 4;
			    END;

			[%C'\']:
			    BEGIN
			    CH$MOVE (9, CH$PTR (UPLIT ('{\rslash}')), .L_PTR);
			    L_PTR = CH$PLUS (.L_PTR, 9);
			    L_LEN = .L_LEN + 9;
			    END;

			[%C'@']:
			    BEGIN
			    CH$MOVE (4, CH$PTR (UPLIT ('{\@}')), .L_PTR);
			    L_PTR = CH$PLUS (.L_PTR, 4);
			    L_LEN = .L_LEN + 4;
			    END;

			[%C'^']:
			    BEGIN
			    CH$MOVE (4, CH$PTR (UPLIT ('{\^}')), .L_PTR);
			    L_PTR = CH$PLUS (.L_PTR, 4);
			    L_LEN = .L_LEN + 4;
			    END;

			[%C'{']:
			    BEGIN
			    CH$WCHAR_A (%C'\', L_PTR);
			    CH$WCHAR_A (%C'{', L_PTR);
			    L_LEN = .L_LEN + 2;
			    END;

			[%C'}']:
			    BEGIN
			    CH$WCHAR_A (%C'\', L_PTR);
			    CH$WCHAR_A (%C'}', L_PTR);
			    L_LEN = .L_LEN + 2;
			    END;

			[OTHERWISE]:
			    BEGIN
			    !
			    ! A real normal character
			    !
			    CH$WCHAR_A (.CH, L_PTR);
			    L_LEN = .L_LEN + 1;
			    END;

			TES;

		    END;

		END;

	    TES;

	END;

    IF .CURRENT_FONT NEQ NORMAL_FONT
    THEN
	BEGIN
	!
	! Turn off bold and italics
	!
	CH$WCHAR_A (%C'}', L_PTR);
	L_LEN = .L_LEN + 1;
	END;

    !
    ! Copy line to output string
    !
    $STR_COPY (STRING = (.L_LEN, CH$PTR (LINE)), TARGET = .DSC);
    END;

END				! End of module
ELUDOM
