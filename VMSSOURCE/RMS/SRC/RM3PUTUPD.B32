MODULE RM3PUTUPD (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                Contains routines common to both put and update operations
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:        Christian Saether	     CREATION DATE:        	4-OCT-78  13:45
!
! Modified by:
!
!	V03-020	MCN0017		Maria del C. Nasr	04-Apr-1983
!		Change linkage of RM$NULLKEY to RL$JSB.
!
!	V03-019	TMK0012		Todd M. Katz		26-Mar-1983
!		Change the linkage for RM$RU_JOURNAL3 from RL$RABREG_467 to
!		RL$RABREG_67.
!
!	V03-018 MCN0016		Maria del C. Nasr	24-Mar-1983
!		More linkages reorganization.
!
!	V03-017	TMK0011		Todd M. Katz		16-Mar-1983
!		Change the linkage for RM$RU_JOURNAL3 from RL$RABREG_67 to
!		RL$RABREG_467.
!
!	V03-016	TMK0010		Todd M. Katz		16-Mar-1983
!		Change the symbol RMSR$_PUT to RJR$_PUT.
!
!	V03-015 MCN0015		Maria del C. Nasr	28-Feb-1983
!		Reorganize linkages
!
!	V03-014	TMK0009		Todd M. Katz		14-Jan-1983
!		Add support for Recovery Unit Journalling and RU ROLLBACK
!		Recovery of ISAM files. One modification will have to be made
!		to the routine RM$PUT_UPD_SPL. If the current operation causing
!		the primary data bucket split is a $PUT, then RU Journal the
!		operation before releasing the original bucket provided the file
!		is RU Journallable and the process is within a Recovery Unit.
!
!	V03-013	TMK0008		Todd M. Katz		29-Sep-1982
!		The $UPDATE RMS service has been completely re-written such
!		that it is no longer necessary to keep a copy of the old
!		version of the current primary data record (the record being
!		updated) in a scratch buffer or at the back end of the primary 
!		data bucket when there are old secondary keys to be deleted.
!		The old record now has its own record buffer to reside in. 
!		Therefore, it is no longer necessary to move the old record 
!		out of the back end of the old (or leftmost) primary data bucket
!		into the back end of the scratch buffer used to build the RRV 
!		table before the old primary data bucket is released.
!
!	V03-012	TMK0007		Todd M. Katz		09-Sep-1982
!		The field IRB$B_SRCHFLAGS has been changed to a word. Fix all
!		references to it.
!
!		The only time it in necessary to verify a packed decimal key
!		is when the key type is packed decimal. It is never necessary
!		to perform this verification when the key consists of more
!		than one segment and the file is a prologue 3 file. Also, the
!		packed decimal verification routine no longer requires 
!		parameters.
!
!	V03-011	KBT0230		Keith B. Thompson	23-Aug-1982
!		Reorganize psects
!
!	V03-010	TMK0006		Todd M. Katz		19-Jul-1982
!		The name of RM$CLEAN_SIDR has been changed to RM$PUTUPD_ERROR.
!		There is also no longer any need to place the address of the 
!		user record buffer (RAB$L_RBF) in the global register REC_ADDR 
!		before calling the routine RM$PUTUPD_ERROR since that is done 
!		by the routine itself.
!
!	V03-009	TMK0005		Todd M. Katz		02-Jul-1982
!		Implement the RMS cluster solution for next record positioning.
!		Since the NRP list has been eliminated and the next record
!		positioning context kept locally in the IRAB, there is no
!		need to update the NRP list when inserting (or re-inserting)
!		a record, and the RFA of the new/changed primary data record 
!		maybe retrieved from the IRAB.
!
!	V03-008	KBT0071		Keith B. Thompson	28-Jun-1982
!		Modify the update buffer processing
!
!	V03-007	MCN0014		Maria del C. Nasr	11-Jun-1982
!		Eliminate overhead at end of data bucket that was to be
!		used for duplicate continuation bucket processing.
!
!	V03-006	KBT0058		Keith B. Thompson	9-Jun-1982
!		Change rm$ins_all_sidr to use rm$get_next_key and remove
!		all ref. to the significance count
!
!	V03-005	TMK0004		Todd M. Katz		07-Jun-1982
!		Whenever we have decided to treat multi-bucket splits involving
!		continuation buckets as two-bucket splits, the rightmost bucket
!		is a continuation bucket, and an index update is required, set
!		IRB$L_VBN_RIGHT to zero. This is because whatever index update 
!		is done it will not involve the rightmost new bucket.
!
!	V03-004	TMK0003		Todd M. Katz		26-May-1982
!		Fix an assembly error that broke the build.
!
!	V03-003	TMK0002		Todd M. Katz		19-May-1982
!		There are several multi-bucket split cases involving 
!		continuation but not empty buckets where the decision is made 
!		to perform the index update as if a two-bucket data level 
!		split had taken place. Towards this end, the IRB$V_BIG_SPLIT 
!		flag is cleared. However, whenever an index update takes
!		place, there exists the possibility of an index bucket split,
!		and the two-pass index bucket split code for those cases not
!		involving empty buckets assumes that if some value is in 
!		IRB$L_VBN_MID then a multi-bucket split must have taken place 
!		on the level below. This is regardless of whether the 
!		IRB$V_BIG_SPLIT flag is or isn't set. To resolve this conflict
!		we must also clear IRB$L_VBN_MID in addition to IRB$V_BIG_SPLIT
!		whenever we have decided to handle the index update as if a 
!		two-bucket split has taken place, and whenever empty buckets 
!		are not involved. This fix will be included as a patch on the
!		V3.1 update floppy.
!
!	V03-002	RAS0085		Ron Schaefer		 8-Apr-1982
!		Correct DJD001 so that packed decimal keys get correctly
!		probed and checked.
!
!	V03-001	TMK0001		Todd M. Katz		24-March-1982
!		Change all references to the keybuffers, so that they use
!		the macro KEYBUF_ADDR.
!
!	V02-028	DJD0001		Darrell Duffy		1-March-1982
!		Fix probing of packed decimal key strings and
!		RM$PUT_UPD_CHKS.
!
!	V02-027	KBT0006		K B Thompson		15-Feb-1982
!		Add code to handle reclaimed bucket next-record-IDs and add
!		subtitles
!
!	V02-026	CDS0001		C Saether		30-Aug-1981
!		Update irb$l_curbdb after release with keep lock, as
!		it now represents the lock blb.
!
!	V02-025 MCN0013		Maria del C. Nasr	19-Aug-1981
!		Store the key in keybuffer3 to keybuffer5 when doing a big
!		split.
!
!	V02-024 MCN0012		Maria del C. Nasr	03-Aug-1981
!		Change calling sequence to RM$PCKDEC_CHECK to support
!		key type conversion.
!
!	V02-023	MCN0011		Maria del C. Nasr	27-May-1981
!		Modify RM$PUT_UPD_SPL to support bucket splitting in
!		$PUT for prologue 3 files.
!
!	V02-022	MCN0010		Maria del C. Nasr	15-May-1981
!		Change RM$PUT_UPD_CHCKS to include new overhead when
!		determining if prologue 3 records fit in bucket.
!
!	V02-021	MCN0006		Maria del C. Nasr	13-Mar-1981
!		Increase size of record identifier to a word in NRP.
!
!	V02-020	PSK0002		P S Knibbe	27-Aug-1980	17:00
!		If insert fails because secondary key is an invalid
!		packed decimal string, back out what has already been 
!		inserted.
!
!	V02-019	REFORMAT	C Saether	01-Aug-1980	22:05
!
!
! REVISION HISTORY:
!
!   Wendy Koenig, 	24-OCT-78  14:02
!   X0002 - MAKE CHANGES CAUSED BY SHARING CONVENTIONS
!
!   Christian Saether, 	24-OCT-78  17:41
!   X0003 - move original record (update only) out of CURBDB before calling
! UPDATE_RRV
!
!   Christian Saether, 	3-NOV-78  8:19
!   X0004 - fix incorrect use of BDB$W_SIZE to BDB$W_NUMB
!
!   Wendy Koenig, 	6-NOV-78  13:32
!   X0005 - CHANGE OK_RRV (CONDITIONAL SUCCESS) TO RVU ( ERROR)
!
!   Christian Saether, 	6-NOV-78  15:51
!   X0006 - fix bug masing BIG_SPLIT and EMPTY_BKT in SPL_BITS
!
!   Christian Saether, 	9-NOV-78  10:40
!   X0007 - back to MAKE_INDEX on INS_ALL_SIDR
!
!   Wendy Koenig, 	15-DEC-78  12:59
!   X0008 - FIX UP EMPTY BKT CASES FOR FOOL_UPD
!
!   Christian Saether, 	14-JAN-79  17:03
!   X0009 - do not set lockabove when root is at level 1 - causes deadlock
!
!   Wendy Koenig, 	15-JAN-79  12:09
!   X0010 - DELETE LINE OF CODE THAT SETS VALID AND DIRTY BITS FOR NO REASON
!
!   Christian Saether, 	15-JAN-79  17:54
!   X0011 - take LOCKABOVE decision out of INS_ALL_SIDR
!
!   Wendy Koenig, 	25-JAN-79  12:20
!   X0012 - FOOL UPDATE WHEN EMPTY BKT AND NOT BIG SPLIT
!
!   Wendy Koenig, 	26-JAN-79  9:14
!   X0013 - GET RID OF SETTING VALID
!
!   Wendy Koenig, 	9-FEB-79  14:30
!   X0014 - CLEAR UNLOCK_RP BIT WHEN UNLOCKING RECORD
!	   RETURN ERROR IF RRV BIT IS SET FROM UPDATE_RRV_2
!		SO WE DON'T HAVE TO CHECK BIT LATER
!
!   Christian Saether, 	11-FEB-79  19:43
!   X0015 - take record unlocking logic out of put_upd_fin (moved to rm3face)
!
!   Christian Saether,  1-july-79  11:20
!   X0016 - clear irb$v_dup in rm$put_upd_chks
!
!   Paulina Knibbe,	19-Dec-79  11:30
!   X0017 - check that packed decimal keys are legal
!
!   Christian Saether,  1-Jan-80  22:35
!   0018 - do bucket sort to recover id's if splitting due to lack of id's
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! define default psects for code
!
PSECT
    CODE = RM$RMS3(PSECT_ATTR),
    PLIT = RM$RMS3(PSECT_ATTR);

! Linkages
!
LINKAGE
    L_ERROR_LINK2,
    L_JSB,
    L_LINK_7_10_11,
    L_PRESERVE1,
    L_RABREG,
    L_RABREG_4567,
    L_RABREG_457,
    L_RABREG_567,
    L_RABREG_67,
    L_RABREG_7;
 
! External Routines
!
EXTERNAL ROUTINE
    RM$ALLOC_BKT	: RL$RABREG_7,
    RM$BKT_SORT		: RL$RABREG_7,
    RM$BKT_SPL		: RL$RABREG_67,
    RM$FOOLED_YUH	: RL$RABREG_7,
    RM$GETBKT		: RL$RABREG_457,
    RM$GET_NEXT_KEY	: RL$LINK_7_10_11,
    RM$INSERT_REC	: RL$RABREG_4567,
    RM$INSS_OR_IDX	: RL$RABREG_567,
    RM$KEY_DESC		: RL$RABREG_7,
    RM$MAKE_INDEX	: RL$RABREG_7,
    RM$MOVE		: RL$PRESERVE1,
    RM$NOREAD_LONG	: RL$JSB,
    RM$NULLKEY		: RL$JSB,
    RM$PCKDEC_CHECK	: RL$RABREG_7,
    RM$PUTUPD_ERROR	: RL$ERROR_LINK2,
    RM$RECORD_KEY	: RL$PRESERVE1,
    RM$RLSBKT		: RL$PRESERVE1,
    RM$RU_JOURNAL3	: RL$RABREG_67,
    RM$SPLIT_UDR	: RL$RABREG_4567 NOVALUE,
    RM$SPLIT_UDR_3	: RL$RABREG_4567 NOVALUE,
    RM$UPDATE_RRV	: RL$RABREG_67,
    RM$UPDATE_RRV_2	: RL$RABREG_4567;
    

%SBTTL	'RM$PUT_UPD_SPL'
GLOBAL ROUTINE RM$PUT_UPD_SPL(RECSZ) : RL$RABREG_4567 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Handles the UDR split code for $PUT and $UPDATE
!
! CALLING SEQUENCE:
!
!	BSBW RM$PUT_UPD()
!
! INPUT PARAMETERS:
!
!	RECSZ - record size of record to be inserted
!
! IMPLICIT INPUTS:
!
!	REC_ADDR -- position for insert
!	IDX_DFN -- index descriptor for primary key
!	RAB, IRAB, IFAB, IMPURE
!	in RAB -- RSZ, RBF
!	keybuffers
!	in IRAB -- UNLOCK_RP UPDATE bits, CURBDB describing bucket to insert in
!		-- if non-zero, LOCK BDB describes level above in case of idx upd
!		-- RSZ and RBF
!	in IFAB -- NORECLK RUP bits
!	BKT$B_NXTRECID = 0 in original bucket to signal that split was
!	due to lack of id's
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!
!	RBF, RSZ, DUP, any hard i/o errors
!	RVU -- some RRV(s) were not updated correctly
!	OK_DUP (dups seen) 
!
! SIDE EFFECTS:
!
!	if success of any type, the record has been put
!	if success then index has been updated
!	in any case, if UNLOCK_RP is set, the record is unlocked otherwise locked
!	note that it is locked throughout index and sidr updates
!	put has to unlock the record if there was an error, update is cool
!	no buckets are locked on exit in any case
!	IRAB [ UPDATE ] flag is set if index updating is required
!	If the current operation is a $PUT taking place on a RU Journallable 
!	    file within a Recovery Unit, then RU Journal the operation before
!	    releasing the original bucket.
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_IO_STR,
	COMMON_RAB_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    LABEL
	FOOL_UPD;

    ! initialize all the fields we're going to use
    !
    IRAB[IRB$W_SPLIT] = 0;
    IRAB[IRB$W_SPLIT_1] = 0;
    IRAB[IRB$W_SPLIT_2] = 0;
    IRAB[IRB$L_RFA_VBN] = 0;
    IRAB[IRB$L_VBN_LEFT] = 0;
    IRAB[IRB$L_VBN_RIGHT] = 0;
    IRAB[IRB$L_VBN_MID] = 0;

    ! calculate the kind of split that's neccessary
    !
    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	RM$SPLIT_UDR()
    ELSE
	RM$SPLIT_UDR_3(.RECSZ);
    IRAB[IRB$L_VBN_LEFT] = .BDB[BDB$L_VBN];
    IRAB[IRB$V_BKT_NO] = .IRAB[IRB$V_NEW_BKTS];

    ! Store the primary key in keybuffer5 when doing a big split, so that
    ! RM$BKT_SPL can save the significant count in keybuffer3 safely?
    !
    IF .IRAB[IRB$V_NEW_BKTS] GTRU 1
    THEN
	RM$MOVE ( .IDX_DFN[IDX$B_KEYSZ], KEYBUF_ADDR(3), KEYBUF_ADDR(5));

    ! for each new bucket that's needed, allocate it fill in the data and write
    ! it out
    !
    WHILE .IRAB[IRB$V_BKT_NO] NEQ 0
    DO
	BEGIN

	! allocate and format new bucket setting up nxtbdb to describe it
	! link to previous new bucket
	!
	RETURN_ON_ERROR (RM$ALLOC_BKT());

	! set up bdb and bkt_addr
	!
	BDB = .IRAB [ IRB$L_NXTBDB ];
	BKT_ADDR = .BDB [ BDB$L_ADDR ];

	! Store vbn and next record ID in appropriate place for safe-keeping
	! the vbn's are stored for future use, as such:
	!	the original bucket is always in vbn_left
	!	the rightmost bucket is always in vbn_right
	!	if there are 2 new buckets, the middle one is in vbn_mid
	!	if there are 3 new buckets, the left-middle one is in vbn_mid
	!		and the right-middle one is in rfa_vbn
	! the way split_udr is set up now, if it is a 3 or 4 bucket split
	! the new record is always in vbn_mid... but that of course is subject
	! to change
	!
	! For each bucket save the VBN and the next record ID.  NOTE: The next
	! record ID for prologue 1,2 files id always 1
	!
	IF .IRAB [ IRB$L_VBN_RIGHT ] EQL 0
	THEN
	    BEGIN

	    ! Save the VBN
	    !
	    IRAB [ IRB$L_VBN_RIGHT ] = .BDB [ BDB$L_VBN ];

	    ! Save the next record ID
	    !
	    IF .IFAB [ IFB$B_PLG_VER ] LSSU PLG$C_VER_3
	    THEN
		IRAB [ IRB$W_NID_RIGHT ] = 1
	    ELSE
		IRAB [ IRB$W_NID_RIGHT ] = .BBLOCK [ .BDB [ BDB$L_ADDR ],BKT$W_NXTRECID ]

	    END
	ELSE
	    BEGIN

	    ! If the MID is taken this must be the RFA bucket
	    !
	    IF .IRAB [ IRB$L_VBN_MID ] NEQ 0
	    THEN
		BEGIN

		! The old MID bucket becomes the RFA bucket
		!
		IRAB [ IRB$L_RFA_VBN ] = .IRAB [ IRB$L_VBN_MID ];
		IRAB [ IRB$W_RFA_NID ] = .IRAB [ IRB$W_NID_MID ]

		END;

	    ! Save the MID VBN
	    !
	    IRAB [ IRB$L_VBN_MID ] = .BDB [ BDB$L_VBN ];

	    ! Save the next record ID
	    !
	    IF .IFAB [ IFB$B_PLG_VER ] LSSU PLG$C_VER_3
	    THEN
		IRAB [ IRB$W_NID_MID ] = 1
	    ELSE
		IRAB [ IRB$W_NID_MID ] = .BBLOCK [ .BDB [ BDB$L_ADDR ],BKT$W_NXTRECID ]

	    END;

	! Check to be sure the user hasn't been toying w/ the record buffer
	! in less than prologue 3 files
	!
	IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
	THEN
	    RETURN_ON_ERROR (RM$FOOLED_YUH());

	! write out the data into the new bucket
	!
	RM$BKT_SPL(.RECSZ);				! no errors possible

	IRAB[IRB$L_NXTBDB] = 0;

	RETURN_ON_ERROR (RM$RLSBKT(RLS$M_WRT_THRU));

	END;	! { end of while there are still more buckets to take care of }


    ! update rrv's, building table for future updates.
    ! set up the free buffer to be a table in which to build rrv's.
    ! let nxtbdb point to it and curbdb still points to the original bucket.
    !
    IRAB[IRB$B_CACHEFLGS] = CSH$M_NOREAD;
    RM$GETBKT(0, .BDB[BDB$W_NUMB]);
    IRAB[IRB$L_NXTBDB] = .BDB;

    RM$UPDATE_RRV();

    ! Set up bdb and bkt_addr to correspond to original bucket. Do bucket sort
    ! to recover id's if nxtrecid = 0 before potentially inserting new record
    ! into original bucket.  Note that we may be doing bucket sort in a put
    ! situations where nxtrecid happened to be zero on normal lack of space
    ! split, but it seems harmless enough and probably saves the need to do one
    ! later and zeroing nxtrecid to signal split due to lack of id's in the
    ! first place saves code in rm$split_udr.  (Only for prologue 1 and 2 files).
    !
    BDB = .IRAB[IRB$L_CURBDB];
    BKT_ADDR = .BDB[BDB$L_ADDR];

    IF (NOT .IRAB[IRB$V_UPDATE]
	AND
	.BKT_ADDR[BKT$B_NXTRECID] EQL 0)
	AND .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	RM$BKT_SORT(.BKT_ADDR);

    ! if the new record belongs in the original bucket, put it there
    !

    IF .IRAB[IRB$W_POS_INS] LSSU .IRAB[IRB$W_SPLIT]
	OR
	(.IRAB[IRB$W_POS_INS] EQLU .IRAB[IRB$W_SPLIT]
	AND
	.IRAB[IRB$V_REC_W_LO])
    THEN
	BEGIN

	! check again to make sure the user hasn't changed the record buffer
	!

	IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
	THEN
	    RETURN_ON_ERROR (RM$FOOLED_YUH());

	REC_ADDR = .IRAB[IRB$W_POS_INS] + .BKT_ADDR;

	RM$INSERT_REC(.RECSZ);			! always returns succesful
	END;		! { end of record needs to go into original bucket }

    ! If this operation is a $PUT taking place on a RU Journallable file within
    ! a Recovery Unit, then RU Journal the operation before releasing the
    ! original primary data bucket.
    !
    IF  .IFAB[IFB$V_RUP]
	 AND
	NOT .IRAB[IRB$V_UPDATE]
    THEN
	BEGIN
	REC_ADDR = .IRAB[IRB$L_RBF];
	RETURN_ON_ERROR (RM$RU_JOURNAL3 (RJR$_PUT,
					 .IRAB[IRB$L_PUTUP_VBN],
					 .IRAB[IRB$W_PUTUP_ID],
					 .IRAB[IRB$W_RSZ]));
	END;

    ! Release the original bucket, keeping a lock on it
    !
    BDB[BDB$V_DRT] = 1;

    RETURN_ON_ERROR (RM$RLSBKT(RLS$M_WRT_THRU OR RLS$M_KEEP_LOCK));
    IRAB[IRB$L_CURBDB] = .BDB;

    RM$UPDATE_RRV_2();

    ! if RRV bit is set, there's been an error -- not much sense in going
    ! on, so to be consistent with other errors, let's clean up now
    !

    IF .IRAB[IRB$V_RRV_ERR]
    THEN
	RETURN RMSERR(RVU);

    ! if update needed then perform setup and flag update necessary. if update
    ! isn't needed, clear update flag since we still have curbdb locked
    ! and we have to know if we should release it
    !
FOOL_UPD :
    BEGIN
    IRAB[IRB$V_UPDATE] = 1;

    ! If it's a big split but both new buckets are continuation bkts, no index
    ! update is needed. However if the left-hand bucket is empty, RMS will have
    ! to swing the pointer to IRB$L_VBN_MID. As this effectively makes the 
    ! split a (one or two pass) two-bucket empty bucket split case, zero 
    ! IRB$L_VBN_RIGHT.
    !
    IF .IRAB[IRB$V_BIG_SPLIT]
	AND
	.IRAB[IRB$V_CONT_BKT]
	AND
	.IRAB[IRB$V_CONT_R]
    THEN
	BEGIN

	IF .IRAB[IRB$V_EMPTY_BKT]
	THEN
	    BEGIN
	    IRAB[IRB$V_BIG_SPLIT] = 0;
	    IRAB[IRB$L_VBN_RIGHT] = 0;
	    END
	ELSE
	    IRAB[IRB$V_UPDATE] = 0;

	LEAVE FOOL_UPD

	END;

    ! if it's not a big split and if the new bkt is a cont. bkt we don't have
    ! to upd. if it's not a big split and the original bkt is now empty,
    ! we have to update but we have to move vbn_mid into right and zero right.
    !
    IF NOT .IRAB[IRB$V_BIG_SPLIT]
    THEN
	BEGIN

	IF .IRAB[IRB$V_CONT_BKT]
	THEN
	    IRAB[IRB$V_UPDATE] = 0;

	IF .IRAB[IRB$V_EMPTY_BKT]
	THEN
	    BEGIN
	    IRAB[IRB$L_VBN_MID] = .IRAB[IRB$L_VBN_RIGHT];
	    IRAB[IRB$L_VBN_RIGHT] = 0;
	    END;

	LEAVE FOOL_UPD

	END;

    ! at this point, if it's not a big split and the above conditions weren't
    ! met we need to update, but there is nothing else we want to change, so
    ! get out
    !
    IF NOT .IRAB[IRB$V_BIG_SPLIT]
    THEN
	LEAVE FOOL_UPD;

    ! Now, we know it's a big split case... see if we can reduce it to a 2-bkt
    ! split if the original bkt is empty, and the rightmost is a cont bkt.
    ! To do so, turn off the big split indication, and set IRB$L_VBN_RIGHT
    ! to 0 (and just swing the ptr if possible).
    !
    IF .IRAB[IRB$V_EMPTY_BKT]
	AND
	.IRAB[IRB$V_CONT_R]
    THEN
	BEGIN
	IRAB[IRB$V_BIG_SPLIT] = 0;
	IRAB[IRB$L_VBN_RIGHT] = 0;
	LEAVE FOOL_UPD;
	END;

    ! if the original bucket is empty, we've changed all we can
    !
    IF .IRAB[IRB$V_EMPTY_BKT]
    THEN
	LEAVE FOOL_UPD;

    ! if the middle bucket is a continuation bucket, just make it a 2-bkt split
    !
    IF .IRAB[IRB$V_CONT_BKT]
    THEN
	IRAB[IRB$V_BIG_SPLIT] = 0;

    ! if the right bucket is a continuation bucket, make it a 2-bkt split
    ! and treat the middle bucket as the right bucket
    !
    IF .IRAB[IRB$V_CONT_R]
    THEN
	BEGIN
	IRAB[IRB$L_VBN_RIGHT] = .IRAB[IRB$L_VBN_MID];
	IRAB[IRB$V_BIG_SPLIT] = 0;
	END;

    ! If we have decided to treate the index update as if a two-bucket data
    ! level split had taken place, then we must also clear VBN_MID. The
    ! two-pass nonempty bucket index bucket split code assumes, regardless of 
    ! the status of IRB$V_BIG_SPLIT, that if this field has a value then the
    ! two-pass index bucket split should be handled as if a multi-bucket
    ! split had taken place.
    !
    IF NOT .IRAB[IRB$V_BIG_SPLIT]
    THEN
	IRAB[IRB$L_VBN_MID] = 0;

    END;					! { end of fool_upd }

    IRAB[IRB$B_SPL_BITS] = .IRAB[IRB$B_SPL_BITS] AND
		    (IRB$M_BIG_SPLIT OR IRB$M_EMPTY_BKT);
    RETURN RMSSUC(SUC);

    END;


%SBTTL	'RM$INS_ALL_SIDR'
GLOBAL ROUTINE RM$INS_ALL_SIDR : RL$RABREG_4567 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Loop through all alternate key values and insert key values from
!	the user data record.  If update mode then only those required.
!
! CALLING SEQUENCE:
!
!	RM$INS_ALL_SIDR()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	COMMON_IO_STR,
	R_REC_ADDR_STR,
	R_IDX_DFN_STR;

    LABEL
	LOOP;

    BUILTIN
	AP;

    ! Loop doing all of the keys NOTE:  This assumes that we are already
    ! looking at the key 0 descriptor
    !
    WHILE RM$GET_NEXT_KEY()
    DO

LOOP :	BEGIN

	REC_ADDR = .RAB [ RAB$L_RBF ];

	! Check for record size large enough to contain this key value
	!
	IF .RAB [ RAB$W_RSZ ] LSSU .IDX_DFN [ IDX$W_MINRECSZ ]
	THEN

	    ! If this key should have been updated but now record is not long
	    ! enough, the used has modified his record buffer while operating
	    ! asynchronously before the update operation is finished.
	    ! Otherwise, just leave loop so that this key value is not
	    ! inserted.
	    !
	    IF .IRAB [ IRB$V_UPDATE ]
		AND
		.BBLOCK [ .IRAB [ IRB$L_UPDBUF ] + .IDX_DFN [ IDX$B_DESC_NO ],
							    UPD$V_INS_NEW ]
	    THEN
		RETURN RMSERR( RSZ )
	    ELSE
		LEAVE LOOP
	ELSE

	    ! If the record fits and this is update but not marked for
	    ! insertion, then leave loop so that key is not inserted.
	    !
	    IF .IRAB [ IRB$V_UPDATE ]
		AND
		NOT .BBLOCK [ .IRAB [ IRB$L_UPDBUF ] + .IDX_DFN [ IDX$B_DESC_NO ],
							    UPD$V_INS_NEW ]
	    THEN
		LEAVE LOOP;

	! Check that user buffer can still be read, REC_ADDR contains address
	! of RBF
	!
	IF RM$NOREAD_LONG( .RAB[RAB$W_RSZ],.REC_ADDR,.IRAB [ IRB$B_MODE ] )
	THEN
	    RETURN RMSERR( RBF );

	! If not update, check for null key
	!
	IF NOT .IRAB [ IRB$V_UPDATE ]
	THEN
	    BEGIN
	    AP = 0;	! compare to data record, REC_ADDR points to RBF

	    IF NOT RM$NULLKEY( .REC_ADDR )
	    THEN
		LEAVE LOOP;

	    END;

	! Get key into key buffer 2
	!
	AP = 3;			! set up for RECORD_KEY - no overhead/expanded
	RM$RECORD_KEY( KEYBUF_ADDR( 2 ) );
	IRAB [ IRB$B_STOPLEVEL ] = 0;
	IRAB [ IRB$B_SPL_BITS ] = 0;
	IRAB [ IRB$W_SRCHFLAGS ] = IRB$M_POSINSERT;
	IRAB [ IRB$B_KEYSZ ] = .IDX_DFN [ IDX$B_KEYSZ ];

	! Define local block for status
	!
	BEGIN

	LOCAL
	    STATUS;

 	! If key is packed decimal - check that it's a legal packed string
	!
	IF .IDX_DFN[IDX$B_DATATYPE] EQL IDX$C_PACKED
	THEN
	    BEGIN
	    LOCAL
		RBF_ADDR;

	    RBF_ADDR = .RAB[RAB$L_RBF];

	    IF RM$NOREAD_LONG (.RAB[RAB$W_RSZ], .RBF_ADDR, .IRAB[IRB$B_MODE])
	    THEN
		STATUS = RMSERR( RBF )
	    ELSE
		STATUS = RM$PCKDEC_CHECK();

	    IF NOT .STATUS
	    THEN
		BEGIN
		RM$PUTUPD_ERROR();
		RETURN .STATUS
		END
	    END;

	! Insert SIDR record and do all index updates
	!
	STATUS = RM$INSS_OR_IDX();

	IF .STATUS<0, 16> EQL RMSERR( IDX )
	THEN

	    ! Got an index error attempting to insert record, so make the index
	    ! if error on that, clean up the alternate keys inserted so far
	    ! otherwise, try to insert again
	    !
	    BEGIN
	    STATUS = RM$MAKE_INDEX();

	    IF NOT .STATUS
	    THEN
		BEGIN
		RM$PUTUPD_ERROR();
		RETURN .STATUS;

		END
	    ELSE
		STATUS = RM$INSS_OR_IDX();

	    END;

	IF NOT .STATUS
	THEN

	    ! An error at level 0 is fatal, i.e., the record was not inserted
	    ! at all otherwise just signal in index update failure
	    !
	    IF .IRAB [ IRB$B_STOPLEVEL ] EQL 0
	    THEN
		BEGIN
		RM$PUTUPD_ERROR();
		RETURN .STATUS;

		END
	    ELSE
		BEGIN
		RAB [ RAB$L_STV ] = .STATUS;
		IRAB [ IRB$V_IDX_ERR ] = 1;
		END;

	END					! of block defining STATUS
	END;					! of block LOOP

    RETURN RMSSUC( SUC );

    END;


%SBTTL	'RM$PUT_UPD_CHKS'
GLOBAL ROUTINE RM$PUT_UPD_CHKS : RL$RABREG_7 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Perform common put/update checks on record size and buffer
!
! CALLING SEQUENCE:
!
!	RM$PUT_UPD_CHKS()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_IDX_DFN_STR;

    IRAB[IRB$L_NXTBDB] = 0;
    IRAB[IRB$V_IDX_ERR] = 0;
    IRAB[IRB$V_RRV_ERR] = 0;
    IRAB[IRB$V_DUP] = 0;
    IRAB [IRB$L_RBF] = .RAB [RAB$L_RBF] ;
    IRAB [IRB$W_RSZ] = .RAB [RAB$W_RSZ] ;

    ! make sure rsz isn't greater than the maximum record size allowed
    !
    IF .IFAB[IFB$B_RFMORG] EQL FAB$C_FIX
    THEN
	BEGIN

	IF .IRAB[IRB$W_RSZ] NEQU .IFAB[IFB$W_LRL]
	THEN
	    RETURN RMSERR(RSZ)
	END
    ELSE

	IF .IFAB[IFB$W_MRS] NEQ 0
	    AND
	    .IRAB[IRB$W_RSZ] GTRU .IFAB[IFB$W_MRS]
	THEN
	    RETURN RMSERR(RSZ);

    ! set up for the primary key
    !
    RETURN_ON_ERROR( RM$KEY_DESC(0) );

    ! make sure the record will fit in a bucket
    !
    BEGIN

    LOCAL
	BKT_SIZE	: WORD;

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BEGIN
	BKT_SIZE = (.IDX_DFN[IDX$B_DATBKTSZ]*512) - BKT$C_OVERHDSZ - 1 -
		IRC$C_FIXOVHDSZ;

	IF .IFAB[IFB$B_RFMORG] NEQ FAB$C_FIX
	THEN
	    BKT_SIZE = .BKT_SIZE - IRC$C_DATSZFLD;
	END
    ELSE
	BEGIN
	BKT_SIZE = (.IDX_DFN[IDX$B_DATBKTSZ]*512) - BKT$C_OVERHDSZ -
			BKT$C_DATBKTOVH - IRC$C_FIXOVHSZ3;

	IF .IFAB[IFB$B_RFMORG] NEQ FAB$C_FIX
	  OR (.IFAB[IFB$B_RFMORG] EQL FAB$C_FIX
		AND .IDX_DFN[IDX$B_DATBKTYP] NEQU IDX$C_NCMPNCMP)
	THEN
	    BKT_SIZE = .BKT_SIZE - IRC$C_DATSZFLD;

	IF .IDX_DFN[IDX$V_KEY_COMPR]
	THEN
	    BKT_SIZE = .BKT_SIZE - IRC$C_KEYCMPOVH;

	IF .IDX_DFN[IDX$V_REC_COMPR]
	THEN
	    BKT_SIZE = .BKT_SIZE - IRC$C_DATCMPOVH;

	END;

    IF .IRAB[IRB$W_RSZ] GTRU .BKT_SIZE
    THEN
	RETURN RMSERR(RSZ);

    END;

    ! make sure the record is large enough to contain the whole primary key
    !
    IF .IRAB[IRB$W_RSZ] LSSU .IDX_DFN[IDX$W_MINRECSZ]
    THEN
	RETURN RMSERR(RSZ);

    ! probe record buffer
    !
    IF RM$NOREAD_LONG(.IRAB[IRB$W_RSZ], .IRAB[IRB$L_RBF], .IRAB[IRB$B_MODE])
    THEN
	RETURN RMSERR(RBF);

    RETURN RMSSUC(SUC)

    END;


%SBTTL	'RM$PUT_UPD_FIN'
GLOBAL ROUTINE RM$PUT_UPD_FIN : RL$RABREG =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Perfrom common put/update successful completion operations
!
! CALLING SEQUENCE:
!	none
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR;

    ! All done, return information to user
    !
    RAB [ RAB$L_RFA0 ] = .IRAB[IRB$L_PUTUP_VBN];
    RAB [ RAB$W_RFA4 ] = .IRAB[IRB$W_PUTUP_ID];

    ! Return significant success codes
    !
    IF .IRAB [ IRB$V_IDX_ERR ]
    THEN
	RETURN RMSERR( OK_IDX );

    IF .IRAB [ IRB$V_DUP ]
    THEN
	RETURN RMSERR( OK_DUP );

    RETURN RMSSUC()

    END;

END

ELUDOM
