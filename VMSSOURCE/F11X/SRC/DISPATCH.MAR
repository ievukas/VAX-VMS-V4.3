	.TITLE	DISPATCH - XQP dispatch routine
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; FACILITY: F11B XQP
;
; ABSTRACT:
;	This module contains the initialization code for the XQP
;	and the dispatch routine which starts the thread
;	of execution for each XQP request.
;
;
; ENVIRONMENT: Kernel mode, AST level
;
;
;--
;
; AUTHOR: Christian Saether	, CREATION DATE: 30-July-1982
;
; MODIFIED BY:
;
;	V03-010	ACG0438		Andrew C. Goldstein,	2-Aug-1984  22:50
;		Don't clear caches when releasing blocking lock
;
;	V03-009	CDS0008		Christian D. Saether	15-Jul-1984
;		Also handle subfunction cpu and page faults which
;		CDS0007 neglected.
;
;	V03-008	CDS0007		Christian D. Saether	11-Apr-1984
;		Save and restore cpu and page fault info during
;		stalls.
;
;	V03-007	ACG0408		Andrew C. Goldstein,	23-Mar-1984  14:02
;		Make impure storage fully based
;
;	V03-006	CDS0006		Christian D. Saether	15-Dec-1983
;		Fix broken references to COMMON.
;		Load COMMON base register before calling DISPATCHER.
;		Play games with our CCB in the routines here.
;
;	V03-005	CDS0005		Christian D. Saether	17-Oct-1983
;		Last one out after requests are blocked needs
;		to invalidate FID and extent caches.
;
;	V03-004	CDS0004		Christian D. Saether	11-Oct-1983
;		Add routines to test for blocking of file system
;		activity.
;
;	V03-003	CDS0003		Christian D. Saether	11-Mar-1983
;		INSQUE the irp onto the xqp_queue here at kernel
;		ast level instead of in the ipl 2 exe$qxqppkt routine.
;		This avoids a problem where the irp is dequeued from
;		the xqp_queue before the ast is delivered.
;
;	V03-002	CDS0002		Christian D. Saether	31-Jan-1983
;		Save registers on initial call to DISPATCH.
;
;	V03-001	CDS0001		C Saether		21-Oct-1982
;		Add deletion deferral interlock using PCB$B_DPC.
;
;**

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$CCBDEF
	$IPLDEF
	$IRPDEF
	$PCBDEF
	$PHDDEF
	$RVTDEF
	$UCBDEF
	$VCADEF
	$VCBDEF

	.SBTTL	INITXQP

;++
;
; FUNCTIONAL DESCRIPTION
;	Call XQP one time initialization routine.  This must be the first
;	location in the XQP image as it is jumped to from the XQP loading
;	code.
;
; CALLING SEQUENCE
;
;	JMP	INITXQP
;
; SIDE EFFECTS
;
;	XQP is initialized.
;--

	.PSECT	$CODE$,NOWRT,EXE,LONG

INITXQP::
	$CMKRNL_S	ROUTIN = INIT_FCP ; Do initialization.
	RET				; Exit

	.SBTTL	DISPATCH

;++
;
; FUNCTIONAL DESCRIPTION:
;	Switch to XQP kernel stack, load impure context base address,
;	call main dispatch routine, reset stack on return.
;
;
; CALLING SEQUENCE:
;	BSB SCH$QAST	ASTADR = DISPATCH	ASTPRM = IRP
;
; INPUT PARAMETERS:
;	4(AP) - ast parameter is the address of the irp to be processed.
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	XQP request is processed
;
;--


	.ENTRY	DISPATCH, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	SUBL3	#XQP_QUEUE,@#CTL$GL_F11BXQP,R10	; Set up base register
	MOVL	4(AP), R0			; Pick up irp address.
	MOVAB	W^XQP_QUEUE+4(R10), R1		; Get address of work queue.
	INSQUE	IRP$L_IOQFL(R0), @(R1)		; Insert onto tail of queue.
	TSTL	W^IO_PACKET(R10)		; Is a request currently being
						; processed?
	BEQL	10$				; EQL no, so continue.
	RET					; Return.
						; DISPATCHER starts this request
						; when previous threads end.
10$:	MOVL	G^SCH$GL_CURPCB, R0		; Get our PCB address.
	INCB	PCB$B_DPC(R0)			; Disallow process deletion.

	MOVL	W^IO_CCB(R10), R0		; Get address of our CCB.
	MOVB	#1, CCB$B_AMOD (R0)		; Make it a kernel channel.
	MOVL	G^CTL$AL_STACK, W^PREV_STKLIM(R10) ; Save current stack base
	MOVL	G^CTL$AL_STACKLIM, W^PREV_STKLIM+4(R10) ; Save current stack limit
	MOVL	FP, W^PREV_FP(R10)		; Save current frame pointer
	MOVL	W^XQP_STKLIM(R10), G^CTL$AL_STACK ; Set new stack base
	MOVL	W^XQP_STKLIM+4(R10), G^CTL$AL_STACKLIM ; Set new stack limit
	MOVL	W^XQP_STKLIM(R10), SP		; Set new stack pointer

	CALLS	#0, DISPATCHER			; Call main dispatch routine

;
; Note that at this point the FP was restored from the first call
; frame on the private stack.  If this thread stalled for any reason
; that FP doesn't make any sense as it points back to a frame on the
; real stack that doesn't exist anymore.
;

	MOVL	W^PREV_STKLIM(R10), G^CTL$AL_STACK ; Restore stack base
	MOVL	W^PREV_STKLIM+4(R10), G^CTL$AL_STACKLIM ; Restore stack limit
	MOVL	W^PREV_FP(R10), FP		; Restore frame pointer

	MOVL	G^SCH$GL_CURPCB, R0		; Get our PCB address.
	DECB	PCB$B_DPC(R0)			; Allow deletion again.

	MOVL	W^IO_CCB(R10), R0		; Get our CCB address again.
	MNEGB	#1, CCB$B_AMOD (R0)		; Make it untouchable.

	RET					; Exit.


	.SBTTL	WAIT_FOR_AST - Exit current AST to await completion AST
;++
;
; FUNCTIONAL DESCRIPTION:
;	Switch back to the real kernel stack from our private stack
;	and execute a return to dismiss the current AST.
;	This is paired with the CONTINUE_THREAD routine which is specified
;	as the completion AST for the service awaited.
;
; CALLING SEQUENCE:
;	CALLS	#0, WAIT_FOR_AST
;
; IMPLICIT INPUTS:
;	PREV_STKLIM [2] - previous kernel stack limits
;	PREV_FP - previous kernel stack frame pointer
;	FP - current FP on private kernel stack
;
; IMPLICIT OUTPUTS:
;	XQP_SAVFP - current FP on private kernel stack
;	CTL$AL_STACK - kernel stack base
;	CTL$AL_STACKLIM - kernel stack limit
;
; NOTE: This routine expects to be currently operating on the private
;	XQP kernel stack and is called from kernel mode.
;
;--
	.ENTRY	WAIT_FOR_AST,^M<R2,R3,R4,R5,R6,R7,R8,R9,R11>
	MOVL	W^IO_CCB(R10), R0	; Get our CCB address.
	MNEGB	#1, CCB$B_AMOD (R0)	; Make it untouchable.
	MOVL	G^CTL$GL_PHD, R0	; Get process header.
	SUBL3	W^PMS_FNC_CPU(R10), PHD$L_CPUTIM(R0), W^PMS_FNC_CPU(R10)
					; Store cpu accumulated so far.
	SUBL3	W^PMS_FNC_PFA(R10), PHD$L_PAGEFLTS(R0), W^PMS_FNC_PFA(R10)
					; Store pagefaults so far.
	SUBL3	W^PMS_SUB_CPU(R10), PHD$L_CPUTIM(R0), W^PMS_SUB_CPU(R10)
					; Store cpu accumulated so far.
	SUBL3	W^PMS_SUB_PFA(R10), PHD$L_PAGEFLTS(R0), W^PMS_SUB_PFA(R10)
					; Store pagefaults so far.
	MOVL	FP, W^XQP_SAVFP(R10)	; Save current FP.
	MOVL	W^PREV_STKLIM(R10), G^CTL$AL_STACK ; Restore previous kernel stack base
	MOVL	W^PREV_STKLIM+4(R10), G^CTL$AL_STACKLIM ; Restore prev krn stack limit
	MOVL	W^PREV_FP(R10), FP	; Restore previous kernel FP.
	RET				; Exit from current AST.


	.SBTTL	CONTINUE_THREAD - Resume thread of execution from completion AST
;++
;
; FUNCTIONAL DESCRIPTION:
;	This routine complements the above WAIT_FOR_AST routine.  It is
;	specified as the completion AST for QIO or other services which
;	must wait for some event.  It resets the kernel stack limits to
;	the XQP private kernel stack and restores the saved frame pointer.
;	It then returns to resume execution of the request at the point
;	following the WAIT_FOR_AST call.
;
; CALLING SEQUENCE:
;	ASTADR = CONTINUE_THREAD
;
; IMPLICIT INPUTS:
;	CTL$AL_STACK - current kernel stack base
;	CTL$AL_STACKLIM - current kernel stack limit
;	XQP_STKLIM [2] - private kernel stack limits
;	XQP_SAVFP - saved frame pointer from private kernel stack
;	FP - current frame pointer on kernel stack
;
; IMPLICIT OUTPUTS:
;	PREV_STKLIM [2] - saved limits of kernel stack on entry
;	PREV_FP - saved kernel stack frame pointer on entry
;	CTL$AL_STACK - set to base of private kernel stack
;	CTL$AL_STACKLIM - set to private kernel stack limit
;	FP - set to saved FP on private kernel stack
;
;--

ASTPARAM = 4

	.ENTRY	CONTINUE_THREAD,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVL	ASTPARAM(AP),R10			; Set up impure area
	MOVL	G^CTL$AL_STACK, W^PREV_STKLIM(R10) ; Save current kernel stack base
	MOVL	G^CTL$AL_STACKLIM, W^PREV_STKLIM+4(R10) ; Save current kern stk limit
	MOVL	FP, W^PREV_FP(R10)	; Save current kernel stack frame ptr
	MOVL	W^XQP_STKLIM(R10), G^CTL$AL_STACK ; Set private kern stk base
	MOVL	W^XQP_STKLIM+4(R10), G^CTL$AL_STACKLIM ; Set private kern stk limit
	MOVL	W^XQP_SAVFP(R10), FP	; Restore private kern stack frame ptr
	MOVL	G^CTL$GL_PHD, R0	; Get process header.
	SUBL3	W^PMS_FNC_CPU(R10), PHD$L_CPUTIM(R0), W^PMS_FNC_CPU(R10)
					; Restore adjusted cpu time.
	SUBL3	W^PMS_FNC_PFA(R10), PHD$L_PAGEFLTS(R0), W^PMS_FNC_PFA(R10)
					; Restore adjusted page faults.
	SUBL3	W^PMS_SUB_CPU(R10), PHD$L_CPUTIM(R0), W^PMS_SUB_CPU(R10)
					; Restore adjusted cpu time.
	SUBL3	W^PMS_SUB_PFA(R10), PHD$L_PAGEFLTS(R0), W^PMS_SUB_PFA(R10)
					; Restore adjusted page faults.
	MOVL	W^IO_CCB(R10), R0	; Get our CCB address.
	MOVB	#1, CCB$B_AMOD (R0)	; Make it a useable kernel channel.
	RET				; Return to stalled thread

	.SBTTL	START_REQUEST - test for blocking and raise activity count
;++
;--
START_REQUEST::
	MOVL	W^CURRENT_VCB(R10), R0	; get vcb addr
	SETIPL	20$			; raise ipl to test activity
	TSTW	VCB$W_RVN (R0)		; is this volume set?
	BNEQ	10$			; NEQ it is a volume set.
	TSTL	VCB$L_BLOCKID (R0)	; is block lock already armed?
	BEQL	30$			; EQL it isn't
	BLBC	VCB$W_ACTIVITY (R0), 30$
	ADDW2	#2, VCB$W_ACTIVITY (R0)
5$:	SETIPL	#0
	RSB

;
; volume set
;

10$:	MOVL	VCB$L_RVT (R0), R0
	TSTL	RVT$L_BLOCKID (R0)
	BEQL	30$
	BLBC	RVT$W_ACTIVITY (R0), 30$
	ADDW2	#2, RVT$W_ACTIVITY (R0)
	BRB	5$

;
; wait for blocking lock to be granted and rearm if it isn't already.
;

30$:	SETIPL	#0
	CALLS	#0, BLOCK_WAIT
	BRB	START_REQUEST

20$:	.LONG	IPL$_SYNCH		; can't page at synch


	.SBTTL	FINISH_REQUEST - lower activity count, check activity allowed
;++
;--

FINISH_REQUEST::
	MOVL	W^CURRENT_VCB(R10), R1
	SETIPL	50$
	TSTW	VCB$W_RVN (R1)
	BNEQ	20$
	SUBW2	#2, VCB$W_ACTIVITY (R1)
	BLBC	VCB$W_ACTIVITY (R1), 40$
10$:	SETIPL	#0
	RSB

;
; volume set
;

20$:	MOVL	VCB$L_RVT (R1), R0
	SUBW2	#2, RVT$W_ACTIVITY (R0)
	BLBS	RVT$W_ACTIVITY (R0), 10$
	BEQL	110$

40$:	BNEQ	10$
	SETIPL	#0
	MOVAB	VCB$L_BLOCKID (R1), R0

;
; Only one process can see the count go to zero.
; R0 = address of either vcb or rvt blockid field.
;

100$:	MOVL	(R0), R1
	CLRL	(R0)
	PUSHL	R1
	CALLS	#1,W^DEQ_LOCK
	RSB

;
; This is a volume set.
; R0 = RVT.
;

110$:	SETIPL	#0
	MOVAB	RVT$L_BLOCKID (R0), R0
	BRB	100$

50$:	.LONG	IPL$_SYNCH


	.END
