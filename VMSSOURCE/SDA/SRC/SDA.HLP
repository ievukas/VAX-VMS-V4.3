!
!	DCL System Dump Analyzer help command.
!
1 HELP
    The System Dump Analyzer(SDA) allows you to inspect the contents of 
    memory as saved in the dump taken at crash time or as exists in a 
    running system.  You can use SDA interactively or in batch mode.  You 
    can send the output from SDA to a listing file.  You can use SDA to 
    perform the following operations:

    		 Assign a value to a symbol
    		 Examine memory of any process
    		 Format instructions and blocks of data
    		 Display device data structures
    		 Display memory management data structures
    		 Display a summary of all processes on the system
    		 Display the SDA symbol table
    		 Copy the system dump file
    		 Send output to a file or device
    		 Read global symbols from any object module
    		 Search memory for a given value

    You can obtain help on any of the following commands by typing HELP <name>:

	COPY		Execute_Command			SEARCH
	DEFINE		EXIT		HELP		SET
	EVALUATE	Expressions	READ		SHOW
	EXAMINE		FORMAT		REPEAT		VALIDATE

    For an overview of SDA, type HELP OPERATION.
2 OPERATION

    You execute the System Dump Analyzer program by means of directives.
    SDA obtains these directives from SYS$INPUT, which can be your terminal
    or a command file.  You can send the output to a file or to your terminal.

    Any of the following commands will invoke SDA:

	$ ANALYZE/CRASH_DUMP dump_file
	$ ANALYZE/SYSTEM
	$ RUN SYS$SYSTEM:SDA

    When a fatal BUGCHECK error causes the system to crash, the system
    writes the current state of the hardware registers and all physical memory
    to a contiguous file called SYSDUMP.DMP in the SYSEXE account on the 
    system disk.

    Note that pages currently in the paging file (paged out) are not saved
    because the paging file is too large.  Although these pages are lost 
    from the crash dump, the effect on debugging will be minimal because
    most pages relating to the crash are still in physical memory when 
    the crash occurs, and are thus saved in the dump file.

    It is recommended that the system manager set up the system-startup file
    so that SDA is always run during system startup.  When executed at this
    time, SDA first checks to see if the system has just crashed.  If so,
    SDA executes the SDA commands in the system's startup-command file.
    If the system has not just crashed, SDA exits.

    The following example shows the SDA commands typically included in the
    system's startup file.  The most important of these is the COPY
    command, which copies the dump file to another file.  This operation 
    is recommended because the system always overwrites this file in the event
    of a crash, and the record of the previous crash is lost unless another 
    copy exists.

	$ !
	$ !  Invoke the System Dump Analyzer if the system just crashed
	$ !
	$ ANALYZE/CRASH_DUMP SYS$SYSTEM:SYSDUMP
	COPY SYS$SYSTEM:SAVEDUMP.DMP	! Save dump file for later
	SET OUTPUT LPA0:SYSDUMP.LIS	! Make listing file
	SHOW CRASH			! Display crash information
	SHOW STACK			! Show current operating stack
	SHOW SUMMARY			! List all active processes
	SHOW PROCESS/PCB/PHD/REGISTERS	! Display current process
	SHOW SYMBOLS/ALL		! Print the system symbol table
	EXIT

    If you need more information on the crash, you can execute SDA
    interactively or add SDA commands to the startup file.
!
!	Program portion of SDA Help commands.
!

1 COPY 

    COPY output-file-spec

    Makes a copy of the system dump file currently being examined.
    Each time the system crashes, new dump information is written
    over the contents of SYSDUMP.DMP.  The COPY command allows you
    to preserve the contents of the dump file by copying it to
    another file.


1 DEFINE 

    DEFINE  symbol [=] expression [/qualifier...]

    Assigns a value of an expression to a symbol.  The symbol can be used 
    in expressions.  Each subsequent definition of the same symbol overrides 
    any previous definitions.  The symbol remains defined until you exit 
    from SDA.

2 /KEY
    
    Causes a key, rather than a symbol, to be defined.  If you use this
    qualifier, the symbol parameter must be the name of a key on your
    terminal keyboard, and the expression parameter must be the SDA
    command that is to be executed when the key, followed by a carriage
    return, is pressed.

    For example, use the command below to define the key, pf1, to 
    execute the SHOW STACK command.

    	SDA> DEFINE/KEY PF1 "SHOW STACK"

2 /SET_STATE

    Causes the key being defined to change a command state rather than
    to execute an SDA command.  The expression parameter must be the
    name of a state instead of the name of a terminal key.

2 /[NO]TERMINATE

    Causes the key definition to include termination of the command,
    which causes SDA to execute the command when the key is pressed.
    No carriage return is required.	

1 EVALUATE 

    EVALUATE expression

    Computes and displays the value of the specified expression in both
    hexadecimal and decimal.


2 /CONDITION_VALUE
    
    Displays the message the $GETMSG system service obtains for the value
    of the expression

1 EXAMINE 

    Displays the contents of the specified memory locations.
    The range can be a single address or a range of locations given as n:m
    (n through m inclusive) or "n;m" (m bytes, starting at n,  where n and m
    are arithmetic expressions.

    	Format:
    		EXAMINE [/qualifier[,...]] [range]


    Type HELP EXPRESSIONS for the syntax of SDA expressions.


2 /ALL
    
    Examines all the locations in the program and control regions
    and parts of the writeable system region, displaying the con-
    tents of memory in hexadecimal longwords.  Do not specify
    parameters when you use this qualifier.

2 /CONDITION_VALUE
    
    Examines the specified longword, displaying the message the $GETMSG
    system service obtains for the value in the longword.

2 /INSTRUCTION

    Translates the specified range of memory locations into VAX MACRO
    instruction format. If more than 16 bytes are specified in the range,
    some bytes at the beginning of the range may be skipped to ensure 
    that SDA is properly synchronized with the start of each instruction.
    This synchronization can be overridden by specifying the command,
    EXAMINE/INSTRUCTION/NOSKIP.

2 /NOSKIP

    Prevents SDA from skipping any bytes specified in the range 
    when used in conjunction with the /INSTRUCTION qualifier. 

2 /P0

    Displays the entire program region for the default process.  Do
    not specify parameters when you use this qualifier.

2 /P1

    Displays the entire control region for the default process.  Do
    not specify parameters when you use this qualifier.

2 /PSL
    
    Examines the specified longword, displaying its contents in the format
    of a processor status longword.

2 /SYSTEM

    Prints portions of the writeable system region.  Do not specify
    parameters when you use this qualifier.

2 /TIME

    Examines the specified quadword, displaying its contents in the
    format of a system-date-and-time quadword.


1 Execute_Command 

    @filespec

    Causes SDA to execute SDA commands contained in a file.  Use this command
    to execute a set of frequently used SDA commands.  This command is bound
    to the at sign (@) character.  The name of the file is a required
    argument.

1 EXIT

    Exits from the current display when typed at the screen
    overflow prompt, or exits from the program if at the SDA>
    prompt.

1 EXPRESSIONS

    Some SDA commands allow expressions as command parameters.
    To create expressions, you can use

    	  Radix operators
	  Arithmetic operators
	  Precedence operators
	  Symbols
	  Numerals

    Radix operators specify a given radix for the number that follows the
    operator.  SDA displays hexadecimal numbers with leading zeros and 
    displays decimal numbers with leading spaces.

	^X	Hexadecimal (default)
	^O	Octal
	^D	Decimal

    Unary operators

	+	Assigns positive value (default)
	-	Assigns negative value
	@	Uses contents of location
	G	Adds ^X80000000 to value (system space)
	H	Adds ^X7FFE0000 to value (control region)

    Binary operators

	+	Addition
	-	Subtraction
	*	Multiplication
	/	Division	
	@	Arithmetic shift

	Multiplication, division, and arithmetic shifting are performed
	before addition and subtraction.

    Precedence operators

	Parentheses control the evaluation of all operations.  Expressions
        enclosed in parentheses are evaluated first.  SDA evaluates nested
        parenthetical expressions from the innermost to the outermost pairs
        of parentheses.

    Symbols

	Symbols are composed of up to 31 letters and numbers, and
	can include the dollar sign and underscore characters.  When you
	invoke SDA, it copies the global symbols from SYS.STB, the system's
	symbol table.  You can add other symbols to SDA's symbol table by using
	the DEFINE and READ commands.  SDA also defines the following symbols:

	.	Current location
	G	^X80000000 (system space)
	H	^X7FFE0000 (control region)
	R0-R11	General registers
	AP	Argument pointer
	FP	Frame pointer
	SP	Stack pointer	
	PC	Program counter
	PSL	Processor status longword

1 FORMAT 

    FORMAT [/TYPE] location

    Displays the formatted contents of a VAX/VMS control block.  Most 
    blocks include a byte that indicates the block type. 

    Associated with each type of block is a set of symbols with a common
    prefix.  Each symbol's name describes a field within the block, and the
    value of the symbol represents the offset of the field within the block.

    If the block-type byte contains a valid block type (and/or subtype), 
    SDA retrieves the symbols associated with that type of block (see $DYNDEF)
    and uses their values to format the block.  If the block-type byte does 
    not contain a valid block type, you must use the /TYPE qualifier to format
    the block.

    For a given block type, all associated symbols have the form

	<block type>$<type>_<name>

    where type is one of the following:

	B	Byte
	W	Word
	L	Longword
	Q	Quadword
	T	Counted ASCII string (up to 31 characters)

    If SDA cannot find the symbols associated with the block type specified in
    the block-type byte or by the /TYPE qualifier, it issues this message:

	No <block type> symbols found to format this block

    Use the READ command to obtain additional symbol definitions.

2 /TYPE=block-type

    Indicates the symbolic prefix that corresponds to the type of block
    structure you want to format.  This qualifier accepts as parameters
    the prefix of any VAX/VMS control block.

1 READ 

    READ [/RELOCATE=expression]  filespec

    Copies global symbols from an object module to the SDA symbol table.
    The READ command lets you extract global symbols from any object
    module and insert the definitions into the SDA symbol table.  If you
    do not specify a file type, STB is used by default.

    The following MACRO program can be used to obtain symbols in addition
    to those in SYS.STB:

	.TITLE	GLOBALS
	$PHDDEF	GLOBAL		; Process header definitions
	$DDBDEF	GLOBAL		; Device data block
	$UCBDEF	GLOBAL		; Unit control block
	$VCBDEF	GLOBAL		; Volume control block
	$ACBDEF	GLOBAL		; AST control block
	$IRPDEF	GLOBAL		; I/O request packet
	; more can be inserted here
	.END

    Use the command below to generate an object module file containing 
    the globals defined in the program.

	$ MACRO GLOBALS+SYS$LIBRARY:LIB/LIBRARY /OBJECT=GLOBALS.STB


2 /RELOCATE=expression

    Change the relative addresses of the symbols to absolute addresses,
    by adding expression, the base value, to each relative address
    in the object module.  This qualifier changes those addresses 
    to absolute addresses in the address space into which the dump is 
    mapped.

1 REPEAT

    Repeats execution of the last command SDA executed.  This command can also
    be invoked by pressing the 0 key on your terminal's keypad (KP0).

    This command provides a convenient method of displaying a series of data
    structures in a linked list or examining a sequence of locations.  For
    example:

	FORMAT @IOC$GL_DEVLIST	! Start at first DDB in system
	FORMAT @.		! Skip to next entry in list
	<KP0>			! Repeat FORMAT @. command
	.
	.
    	.

1 SEARCH 

    SEARCH range[=]expression

    Scans a range of memory locations for a longword value.  SDA evaluates
    the expression and searches the range of memory for that value.  SDA only
    searches for values that are aligned on longword boundaries.

    Specify a range as a starting location and an ending location,
    separated by a colon (:), or as a location and a length, in bytes,
    separated by a semicolon (;).


1 SET

    This command is a nonprinting directive.  The following
    types of SET commands are available:

	SET LOG filespec
	SET OUTPUT filespec
	SET PROCESS name
    	SET RMS=optionspec

2 LOG filespec

    Sends a copy of all subsequent output to the file specified.
    In addition, all subsequent output continues to be sent to SYS$OUTPUT.
    This remains in effect until you issue a SET NOLOG command.

2 OUTPUT filespec

    Sends all subsequent output to the specified file.  None of the
    subsequent output is sent to SYS$OUTPUT.  This remains in effect
    until you issue another SET OUTPUT command.

2 PROCESS [name] [/qualifier]

    Selects a process to be used as the current process.  Subsequent
    commands display information on this new current process.

3 /INDEX=n

    Specifies the new current process by the index into the system's list 
    of software process control blocks(PCB).  Alternatively, this argument 
    can be the process identification (EPID or PID) longword, from which 
    SDA extracts the correct index.

3 /SYSTEM

    Specifies the new current process by the system process control block.  
    The system PCB and process header (PHD) are dummy structures that are 
    located in system space and contain the system working set, global 
    section table, global page table, and other system-wide data.

2 RMS = optionspec

    Allows specification of control blocks to be displayed by the 
    SHOW PROCESS/RMS command.  The optionspec has the form

    	option    or     (option1,option2,....optionn)

    where option may be

    		ALL [:ifi]	Display all control blocks (default)
    		[NO] ASB	Asynchronous Save Block
    		[NO] BDB	Buffer Descriptor Block
    		[NO] BDBSUM	BDB Summary Page
    		[NO] BLB	Buffer Lock Block
    		[NO] BLBSUM	BLB Summary Page
    		[NO] CCB	Channel Control Block
    		[NO] FCB	File Control Block
    		[NO] FWA	File Work Area
    		[NO] GBDSUM	GBD Summary Page
    		[NO] GBH	Global Buffer Header
    		[NO] IDX	Index Descriptor
    		[NO] IFAB [:ifi] Internal Fab
    		[NO] IFB [:ifi]	Internal Fab
    		[NO] IRAB	Internal Rab
    		[NO] IRB	Internal Rab
    		[NO] RLB	Record Lock Block
    		[NO] TRC	Global Buffer Trace Information
    		[NO] WCB	Window Control Block
    		[NO] *		Current (as opposed to "new") option
    				specification (includes ifi value)

	 ifi => expression      IFI value (internal file identifier)

	     All (default)      Use of this parameter restricts the
			        display to the selected control blocks
			        for only the file specified by the IFI
			        value.

1 SHOW

    Prints formatted data structures, other contents of memory, or RMS
    display options.  The following commands are available:

    	SHOW CLUSTER
    	SHOW CONNECTIONS
	SHOW CRASH
	SHOW DEVICE
    	SHOW HEADER
	SHOW LOCK
	SHOW PAGE_TABLE
	SHOW PFN_DATA
	SHOW POOL
    	SHOW PORTS
	SHOW PROCESS
	SHOW RESOURCES
	SHOW RMS
    	SHOW RSPID
	SHOW STACK
	SHOW SUMMARY
	SHOW SYMBOL


2 CLUSTER [/CSID=n] [/SCS] 

    Displays a view of the Vaxcluster, or the SCS cluster (with the 
    SCS qualifier).  The VAXcluster is composed of VAXprocessor nodes 
    actively participating in the management of shared resources.
    The SCS cluster (System Communication Services) is composed of
    all nodes participating in the Systems Communication Architec-
    ture (SCA) Protocol.  Generally, this is all nodes connected
    to a SCA bus, for example the CI.


3 /CSID=n

    Displays cluster information on a particular VAXcluster member node 
    which is specified by its cluster system id. 

3 /SCS

    Displays a view of the cluster as seen by the system communications
    services (SCS).

2 CONNECTIONS [/ADDRESS=n]

    Displays all active connection descriptor tables (CDTs). A CDT 
    describes the connection between two SCS processes.

3 /ADDRESS=n

    Displays a connection descriptor table (CDT) specified by its address.

2 DEVICE name

    Displays the I/O data structures associated with a device.
    The device name can be a generic name (DB for example), which shows all
    I/O structures associated with that device type; it can be a specific
    name (DBA1 for example), which shows all I/O structures associated with
    that particular device; or it can be omitted, which shows all the I/O
    structures for all devices in the system.

3 /ADDRESS=n

    Displays the I/O data structures associated with the device which
    is specified by its unit control block (UCB) address. 

2 HEADER

    Displays the header of the dump file.

2 LOCK [lockid] [/ALL]

    Displays lock data structures.  Specify the lockid to display
    the lock identified by particular lockid.

3 /ALL

    Displays all the lock data structures in the system.

2 PAGE_TABLE [range]

    Displays the contents of the system page table and the global page
    table.  You can display a range of page table entries or the entire
    system page table.  

    The range is a range of virtual addresses for which SDA is to display
    page table entries.  You can specify a range as two addresses separ-
    ated by a colon (:), or as an address and a length, in bytes, separ-
    ated by a semicolon (;).

3 /ALL

    Lists both the global and system page tables.  This is the default
    qualifier.

3 /GLOBAL

    Lists the global page table.

3 /SYSTEM

    Lists the system page table.

2 PFN_DATA [pfn]

    Displays a listing of the free, modified, and bad page
    lists as well as the entire PFN database.

    If the pfn is specified, SDA displays the information associated with 
    that page frame number.  

3 /ALL

    Displays the free page list, modified page list, and bad page list as
    as well as the entire PFN database.  This qualifier is the default.

3 /BAD

    Displays the bad page list.

3 /FREE

    Displays the free page list.

3 /MODIFIED

    Displays the modified page list.

3 /SYSTEM

    Displays the PFN database.  The information is ordered by page frame
    number, starting at PFN zero.

2 POOL [range]

    Displays the contents of the lookaside (SRP, IRP, and LRP)
    pools, the nonpaged dynamic storage pool, and the paged dynamic storage
    pool.  You can display part or all of each pool.

    The range is a range of virtual addresses within a pool that you want to 
    display. You can specify a range as two addresses separated by a colon 
    (:), or as an address and a length, in bytes, separated by a semicolon 
    (;).

3 /IRP

    Displays the contents of the IRP lookaside list

3 /NONPAGED

    Displays all the contents of nonpaged pool except the IRP list

3 /PAGED

    Displays the contents of paged pool

3 /ALL

    Displays the contents of all of memory; this is the default

3 /FREE

    Displays the lookaside,paged, and nonpaged pools and shows the blocks 
    that are currently available to the system

3 /HEADER

    Displays only the first 16 longwords of each block within pool

3 /LRP

    Displays the pool of long I/O request packets. Formats all blocks 
    currently allocated (in use) within this pool.

3 /SRP

    Displays the pool of short I/O request packets.  Formats all blocks 
    currently allocated (in use) within this pool.

3 /SUMMARY

    Displays a summary of the pools or portions of pool specified by the 
    above qualifiers.  This qualifier shows the different types of blocks 
    present, lists the total number of each, and shows, in decimal, the 
    number of bytes in each block.  

3 /TYPE=block-type

    Displays the blocks within pool that are of the specified type.

2 PORTS [/ADDRESS=n]

    Displays the port independent portion of the port descriptor table
    (PDT), particularly the list of system communication services
    (SCS) entry addresses.

3 /ADDRESS=n

    Displays the port descriptor table (PDT) specified by the address.

2 PROCESS [procname] [/qualifier...]

    Displays the software and hardware context of any process in the 
    balance set, and performs an implicit SET PROCESS command.

    If no options are given, the PCB of the current process is printed by
    default.  


3 /ALL

    Show information about all the processes that exist in the system.

3 /CHANNEL

    Displays the I/O channels assigned to the process, the address of the
    window control block associated with that channel, and the specifica-
    tion of the file or device associated with the channel.

3 /INDEX=n
    
    Displays the software and hardware context of the process which is
    specified by the index of the software PCB into the system's PCB
    vector.  Alternately,  this value could be the process identifica-
    tion ( PID or EPID ), from which SDA extracts the correct index.
    
3 /LOCK

    Displays the locks owned by the current process.  

3 /PAGE_TABLES [range]

    Displays the page tables of the program and control regions.  The
    range is a range of virtual addresses within a pool that you want to 
    display. You can specify a range as two addresses separated by a colon 
    (:), or as an address and a length, in bytes, separated by a semicolon 
    (;).

    An accepted abbreviation is /PPT.

3 /PCB

    Produces a list of the data contained in the software process control
    block(PCB).  This qualifier is the default.

3 /PHD

    Lists information included in the process header.  

3 /PROCESS_SECTION_TABLE 

    Lists the information contained in the process section table.  

    An accepted abbreviation is /PST.

3 /REGISTERS

    Lists the hardware context of the process.  

3 /RMS[=optionspec]

    Displays the RMS control blocks specified by the optionspec or by the 
    last SET RMS command.  If the optionspec is specified, it is valid for 
    only that command and has no effect on the options selected by the
    last SET RMS command.  See the SET RMS command for the format of the 
    optionspec. The default optionspec is to display all RMS structures.

3 /SYSTEM
    
    Displays the system process control block (PCB).

3 /WORKING_SET_LIST 

    Displays the working set list for the process.

    An accepted abbreviation is /WSL.
    
2 RESOURCES [qualifier] 

    Displays resource data structures. 

3 /ALL

    Displays all resources in the system.  

    This qualifier is the default.

3 /LOCKID=n

    Displays the resource data associated with the lock whose lockid
    is n.

2 RSPID [/CONNECTION=n]

    Displays all entries in the response-id descriptor table which are 
    in use.  The VMS System Communication Services (SCS) provide response-
    ids (RSPIDs) as a mechanism for matching request completion mes-
    sages to the original requests.  Generally, the original request
    is represented by a class driver request packet (CDRP).

3 /CONNECTION=n

    Displays all entries in the response-id descriptor table which 
    are associated with this connection descriptor table (CDT).

2 RMS

    Displays the RMS display options currently selected by the SET RMS
    command (only applies to the show process/rms command).

2 STACK [range]

    Displays the location and contents of the four process stacks and the
    system-wide interrupt stack.

    You can express the range of memory locations you want to display as two
    locations separated by a colon (:), or as a location and a length, in
    bytes, separated by a semicolon (;).

    If no options are specified, the current operating stack is displayed.

3 /ALL

    Displays the location and contents of the four process stacks and 
    the system-wide interrupt stack.

3 /EXECUTIVE

    Displays the executive mode stack for the current process.

3 /INTERRUPT

    Displays the interrupt mode stack for the system.

3 /KERNEL

    Displays the kernel mode stack for the current process.

3 /SUPERVISOR

    Displays the supervisor mode stack for the current process.

3 /USER

    Displays the user mode stack for the current process.

2 SUMMARY

    Displays a list of all processes in the system at the time of
    the system crash.

3 /IMAGE

    Displays the name of the image being run by each process, if 
    available.
    	
2 SYMBOL name

    Displays the value of the specified system symbol
    and the contents of that memory location (if possible).

3 /ALL

    Displays information on all the symbols that start with the
    string you specified in the command parameter and are defined 
    in the SDA symbol table.  

1 VALIDATE 

    VALIDATE QUEUE [address]

    Validates the integrity of the specified queue by checking the pointers in
    the queue.  The address is the address of an element of the queue.

