MODULE PAS$READ_REAL_G ( %TITLE 'Read a G_floating value'
		IDENT = '1-002'			! File: PASREAREG.B32 Edit: SBL1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains procedures which read a G_floating value
!	from a textfile or a string.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
! 1-002 - Use PAS$$END_READ.  SBL 26-May-1982
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$READ_REAL_G: CALL_VAL01 NOVALUE,	! Read from textfile
    PAS$READV_REAL_G: CALL_VAL01 NOVALUE;	! Read from string

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!

%SBTTL 'PAS$READ_REAL_G - Read a G_floating value from textfile'
GLOBAL ROUTINE PAS$READ_REAL_G (
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	ERROR;						! Error unwind address
	LO_RESULT,					! Low order part of result
	HI_RESULT					! High order part of result
    ) : CALL_VAL01 NOVALUE = 

!++
! FUNCTIONAL DESCRIPTION:
!
!	This function reads a G_floating value from the specified textfile
!	and returns it as the function value.
!
! CALLING SEQUENCE:
!
!	Double.wg.v = PAS$READ_REAL_G (PFV.mr.r [, ERROR.ja.r])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  in case of an error.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The G_floating value of the number read.
!
! SIDE EFFECTS:
!
!	If the file is the standard file INPUT or OUTPUT, it is implicitly opened.
!
! SIGNALLED ERRORS:
!
!	INVSYNREA - invalid syntax for real value
!	OUTRANTYP - "string" is outside the range of type "type"
!
!--

    BEGIN

    LOCAL
	RESULT: VECTOR [2, LONG],	! D_floating result value
	DESCR: BLOCK [8, BYTE],		! Descriptor for convert
	FCB: REF $PAS$FCB_CONTROL_BLOCK,! File Control block
	PFV_ADDR: VOLATILE,		! Enable argument
	UNWIND_ACT: VOLATILE,		! Enable argument
	ERROR_ADDR: VOLATILE;		! Enable argument

    BUILTIN
	ACTUALCOUNT;			! Count of arguments

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    !+
    ! Get ERROR parameter, if present.
    !-

    IF ACTUALCOUNT () GEQU 2
    THEN
	ERROR_ADDR = .ERROR;		! Set unwind address

    PFV_ADDR = PFV [PFV$R_PFV];		! Set PFV address

    !+
    ! Validate PFV and get PFV.
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Do common initialization.
    !-

    PAS$$INIT_READ (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! Set up string descriptor for convert call.
    !-

    DESCR [DSC$B_CLASS] = DSC$K_CLASS_S;
    DESCR [DSC$B_DTYPE] = DSC$K_DTYPE_T;

    !+
    ! Call utility routine to find a string that looks like an real.
    ! If we can't find one, signal an error.
    !-

    IF NOT PAS$$GET_REAL (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; 
	DESCR [DSC$A_POINTER], DESCR [DSC$W_LENGTH], FCB)
    THEN
	$PAS$IO_ERROR (PAS$_INVSYNREA,2,DESCR,.FCB [FCB$L_RECORD_NUMBER]);

    !+
    ! Call convert routine.  If it fails, signal an error.
    !-

    IF NOT OTS$CVT_T_G (DESCR, RESULT)
    THEN
	$PAS$IO_ERROR (PAS$_NOTVALTYP,3,DESCR,
	    UPLIT BYTE (%CHARCOUNT('DOUBLE'),'DOUBLE'),
	    .FCB [FCB$L_RECORD_NUMBER]);

    !+
    ! Do end-of-READ processing.
    !-

    PAS$$END_READ (PFV [PFV$R_PFV], FCB [FCB$R_FCB]);

    !+
    ! Return result.
    !-

    LO_RESULT = .RESULT [0];
    HI_RESULT = .RESULT [1];
    RETURN;

    END;					! End of routine PAS$READ_REAL_G

!<BLF/PAGE>

%SBTTL 'PAS$READV_REAL_G- Read a G_floating from string'
GLOBAL ROUTINE PAS$READV_REAL_G (
	LINE_DSC: REF VECTOR [, BYTE],			! Line descriptor
	ERROR;						! Error unwind address
	LO_RESULT,					! Low order part of result
	HI_RESULT					! High order part of result
    ) : CALL_VAL01 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This function reads a G_floating from the specified string
!	and returns it as the function value.
!
! CALLING SEQUENCE:
!
!	Double.wg.v = PAS$READV_REAL_G (LINE_DSC.mq.r [, ERROR.ja.r])
!
! FORMAL PARAMETERS:
!
!	LINE_DSC	- The string to read from, passed as a class S
!			  (assumed) descriptor.  The length and pointer
!			  are updated to reflect the unread string.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  in case of an error.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The value of the G_floating read.
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	PFV: $PAS$PFV_FILE_VARIABLE,	! Pascal File Variable
	ARG_LIST: VECTOR [2, LONG],	! Argument list
	PFV_ADDR: VOLATILE,		! Enable argument
	UNWIND_ACT: VOLATILE,		! Enable argument
	ERROR_ADDR: VOLATILE;		! Enable argument

    BUILTIN
	ACTUALCOUNT;			! Count of arguments

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    !+
    ! Get ERROR parameter, if present.
    !-

    IF ACTUALCOUNT () GEQU 2
    THEN
	ERROR_ADDR = .ERROR;		! Set unwind address

    PFV_ADDR = PFV [PFV$R_PFV];		! Set PFV address

    !+
    ! Set up ARG_LIST.  
    !-

    ARG_LIST [0] = 1;			! One argument
    ARG_LIST [1] = PFV [PFV$R_PFV];	! PFV address

    !+
    ! Call PAS$$DO_READV to do the work, giving it the address of
    ! PAS$READ_REAL_G to call.
    !-

    PAS$$DO_READV (PFV [PFV$R_PFV], LINE_DSC [0], ARG_LIST, PAS$READ_REAL_G; 
	LO_RESULT, HI_RESULT);

    RETURN;

    END;					! End of routine PAS$READV_REAL_G

!<BLF/PAGE>

END						! End of module PAS$READ_REAL_G

ELUDOM
