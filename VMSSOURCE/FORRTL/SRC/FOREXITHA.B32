MODULE FOR$$EXIT_HANDL (%TITLE 'FORTRAN exit handler'
		IDENT = '1-013'		! File: FOREXITHA.B32  Edit: STAN1013
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: FORTRAN support library - Exit handler
!
! ABSTRACT:
!
!	This module is used when the image exits to do
!	FORTRAN post processing.  It purges I/O buffers
!	and closes files with proper disposition.
!
! ENVIRONMENT: User access mode; mixture of AST level or not.
!
! Author:	John Sauter, Creation date: 23-JAN-1979
!
! MODIFIED BY:
!
! 1-001	- Original from FOROPEN.  JBS 23-JAN-1979
! 1-002	- Call OTS$$PURGE_IOBU to flush any "dirty" buffer.  JBS 24-JAN-1979
! 1-003 - Move call to OTS$$PURGE_IOBU to OTS$CLOSE_FILE.  JBS 24-JAN-1979
! 1-004	- Change linkage for OTS$PUSH_CCB to JSB_CB_PUSH and for
!	   OTS$POP_CCB to JSB_CB_POP.  JBS 25-JAN-1979
! 1-005	- Use two dollar signs for non-user entries.  JBS 26-JAN-1979
! 1-006	- Add OTS$$CLOSE_ALL.  JBS 04-JUN-1979
! 1-007	- Change to FORTRAN-specific exit handler.  JBS 16-AUG-1979
! 1-008 - Clear FOR$$L_XIT_LOCK when EXIT_HANDLER is called.  This
!	  allows exit handler I/O to be cleaned up properly.  SBL 29-Apr-1980
! 1-009 - Request page alignment for the OWN PSECT when invoking
!	  DECLARE_PSECTS, to ensure that EXIT_BLOCK will not occupy the
!	  same page as a user variable that is being WATCHed, and thus
!	  be unwriteable when $DCLEXH is called.  JAW 19-FEB-1981
! 1-010 - Declare LIB$STOP external.  SBL 30-Nov-1981
! 1-011 - Reflect changes of OTS$$ structures to FOR$$.  SBL 26-Oct-1982
! 1-012 - Reflect use of ISB$A_PREVIOUS_LUB instead of second longword in
!	  FOR$$AA_CUR_LUB.  SBL 2-Dec-1982
! 1-013 - Remove informational error. STAN 24-Jul-1984.
!--


!
! PROLOGUE FILE:
!

REQUIRE 'RTLIN:FORPROLOG';			! FOR$ definitions

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$$DECL_EXITH : NOVALUE,			! Declare EXIT handler
    EXIT_HANDLER : NOVALUE,			! Exit Handler
    FOR$$CLOSE_ALL : NOVALUE;			! Close all files

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!

GLOBAL
    FOR$$L_XIT_LOCK : INITIAL (0);		! Clear if no handler linked yet

!
! EXTERNAL REFERENCES:
!

!+
! The following structure is used for addressing FOR$$AA_LUB_TAB.
! It is similar to VECTOR, but offsets the index so that
! negative logical unit numbers can be used.
!-

STRUCTURE
    FOR$$LUB_TAB_ST [I; N, LB, UNIT = 4, EXT = 0] =
	[N*UNIT]
	(FOR$$LUB_TAB_ST + ((I - LB)*UNIT))<0, %BPUNIT*UNIT, EXT>;

EXTERNAL
    FOR$$AA_LUB_TAB : VOLATILE FOR$$LUB_TAB_ST 	! Table of LUB addresses
	[-LUB$K_ILUN_MIN + LUB$K_LUN_MAX + 1, LUB$K_ILUN_MIN],
    FOR$$A_CUR_LUB;				! Current LUB

EXTERNAL ROUTINE
    FOR$$CB_FETCH : NOVALUE,			! Load register CCB, no push
    FOR$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    FOR$$CB_POP : JSB_CB_POP NOVALUE,		! Done with register CCB
    FOR$$GET_VM,				! Get virtual memory
    FOR$$NEXT_LUN : NOVALUE,			! Get next LUN that might be open
    FOR$$CLOSE_FILE : CALL_CCB,			! Internal file closer
    FOR$$SIGNAL: NOVALUE;			! Signal non-fatal error


GLOBAL ROUTINE FOR$$DECL_EXITH 			! Declare VMS EXIT handler
    : NOVALUE = 				!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Declares VMS EXIT handler for FORTRAN.
!
! CALLING SEQUENCE:
!
!	IF (NOT .FOR$$L_XIT_LOCK) THEN FOR$$DECL_EXITH ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Declares VMS EXIT handler.
!--

    BEGIN


    !+
    ! Allocate and fill in the control descriptor block.
    !-

    LOCAL
	EXITH_CONTROL_BLOCK: REF VECTOR [, LONG];

    EXITH_CONTROL_BLOCK = FOR$$GET_VM (20); 	! 5 longwords
    EXITH_CONTROL_BLOCK [1] = EXIT_HANDLER;	! Routine address
    EXITH_CONTROL_BLOCK [2] = 1;		! 1 additional longword
    EXITH_CONTROL_BLOCK [3] = EXITH_CONTROL_BLOCK [4]; ! Reason for exit
    $DCLEXH (DESBLK=EXITH_CONTROL_BLOCK [0]);	! Assume success
    FOR$$L_XIT_LOCK = 1;			! Handler declared

    RETURN
    END;


ROUTINE EXIT_HANDLER (				! Exit Handler
	EXIT_REASON				! Reason
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the exit handler for FORTRAN.  Its only function is to
!	close all files.
!
!	Upon entering, it clears FOR$$L_XIT_LOCK.  This allows user
!	exit handlers to have their I/O cleaned up.
!
! FORMAL PARAMETERS:
!
!	EXIT_REASON.rl.r	not used
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	FOR$$L_XIT_LOCK is set to zero
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Closes all files by calling OTS$$CLOSE_ALL.
!--

    BEGIN
    FOR$$L_XIT_LOCK = 0;		! Clear exit handler interlock
    FOR$$CLOSE_ALL ();
    END;					! of routine EXIT_HANDLER

ROUTINE FOR$$CLOSE_ALL : NOVALUE = 		! Close all files

!++
! FUNCTIONAL DESCRIPTION:
!
!	Find every existing LUB (with a linear search through the LUB
!	table).  For each LUB, if the file is open, purge its I/O
!	buffers and close it.  If the file has been marked for PRINT
!	or DELETE, this will cause proper disposition of the file.
!	RMS will close all open files at image exit, but it doesn't know
!	about the above two DISPOSE conditions.  We couldn't set them at
!	OPEN time, since the user is allowed to specify a different
!	DISPOSE option at close time (with the CLOSE statement).
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Closes all files.
!	May signal FOR$_CLOERR.
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF $FOR$CCB_DECL;

    LOCAL
	AST_STATUS,	! Status from $SETAST
	FLAG,
	LUN;

    !+
    ! Disable ASTs.
    !-

    AST_STATUS = $SETAST (ENBFLG=0);

    !+
    ! Scan through the table of LUNs, looking for allocated CCBs.
    !-

    FLAG = 0;	! Initialize loop

    WHILE 1 DO
	BEGIN

	!+
	! Get next unit number that has an allocated CCB.
	!-

	FOR$$NEXT_LUN (FLAG, LUN);
	IF NOT .FLAG
	THEN
	    EXITLOOP;

	!+
	! Get the CCB address for this unit.
	!-

	CCB = 0;		! Make BLISS understand that CCB is set.
	FOR$$CB_FETCH (.LUN);
	FOR$$A_CUR_LUB = .CCB;	! Make this LUB the current one

	!+
	! We have an allocated CCB.  See if it has an open file.  If
	! so, try to close it.  If the close fails, signal "close error",
	! but with E severity so that execution continues.
	!-

	IF .CCB [LUB$V_OPENED]
	THEN
	    BEGIN
	    IF NOT FOR$$CLOSE_FILE ()
	    THEN
		BEGIN
		LOCAL
		    CLO_ERROR: BLOCK [4, BYTE];	! Condition to signal
		CLO_ERROR = FOR$_CLOERR;
		CLO_ERROR [STS$V_SEVERITY] = STS$K_ERROR;
		FOR$$SIGNAL (.CLO_ERROR);
		END;
	    END;

	!+
	! Zero the CCB address in the table of CCBs/LUBs.  This prevents
	! anything else from happening to this incarnation of the file.
	!-

	FOR$$AA_LUB_TAB [.LUN] = 0;
	END;

    !+
    ! If ASTs were previously enabled, re-enable them.
    !-

    IF .AST_STATUS EQL SS$_WASSET
    THEN
	$SETAST (ENBFLG=1);
	    
    RETURN;
    END;					! of routine FOR$$CLOSE_ALL
END						! End of FOR$$EXIT_HANDL module

ELUDOM
