	.title	pli$open - pl1 runtime open file
	.ident	/1-007/					; Edit BLS0294

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;


;++
; facility:
;
;	VAX/VMS PL1 runtime library.
; abstract:
;
;	This module contains the pl1 runtime routine for opening a file.
;
;
;
; author: c. spitz 18-jul-79
;
; modified:
;
;	Bill Matthews	20-apr-1982
;	V1.4-02:
;		Retry $open if $display comes back with $rms_sup or $rms_support
;
;	1-003	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;	1-004	Debess Grabazs 31-Oct-1983
;		Use LNM$C_NAMLENGTH for maximum size of equivalence string.
;
;	1-005	Debess Grabazs 6-Dec-1983
;		Include $LNMDEF.
;
;	1-006	Dave Blickstein 9-Feburary-1984		SPR 11-64002
;
;		Corrected the code that determines the setting of FAB$_SQO.
;		An offset literal was being used instead of a mask literal.
;		This was causing SQO errors when doing RFA access on file 
;		opened for READ.
;
;	1-007	Benn Schreiber	 6-APR-1984
;		Zero XABs as part of initializing them.
;--


;
; library macro calls:
;
	$lnmdef				; LNM$_ symbols

;
; external definitions
;

	$deffcb				;define file control block offsets
	$defpl1rtcons			;define pl1 run time constants
	$defdat				;define operand node data types
	$defkcb				;define key control block offsets
	$defenv				;define environment block offsets
	$rabdef				;define rab offsets
	$fabdef				;define fab offsets
	$devdef				;define device characteristics
	$namdef				;define nam offsets
	$xabdef				;define common xab offsets
	$xabsumdef			;define summary xab offsets
	$xabkeydef			;define key xab offsets
	$xabprodef			;define protection xab offsets
	$xabdatdef			;define date and time xab offsets
	$xabfhcdef			;define file header char. xab offsets

;
; local definitions
;

fcbarg		=	4		;define fcb offset from ap
attrarg		=	8		;define attr offset from ap
linesizearg	=	12		;define linesize offset from ap
pagesizearg	=	16		;define pagesize offset from ap
titlearg	=	20		;define title offset from ap
envirarg	=	24		;define environment block offset from ap

;
; local data
;

	rtshare				;sharable

sysprint: .ascii	/SYSPRINT/
sysin:	.ascii		/SYSIN/
sysinput: .ascii	/SYS$INPUT/
sysoutput: .ascii	/SYS$OUTPUT/


	.page

;++
; pli$open -- open a file
;
; functional description:
;
; This routine opens a pl1 file, with the attributes and options specified
; by the call and in the file declaration.  The FCB is updated to reflect
; the status of the file, and an RMS create or open is executed, followed
; by a connect.
;
; inputs:
;	(ap) = number of arguments (2-6)
;	4(ap) = address of the fcb for this file (required)
;	8(ap) = open time attributes of the file (required)
;	12(ap) = linesize (optional)
;	16(ap) = pagesize (optional)
;	20(ap) = address of title - char var (optional)
;	24(ap) = address of the open environment block (optional)
;
;	fcb input fields:
;		fcb_l_attr(atr_m_opened) = 1 if file opened already
;
;	NOTE: if the title argument is present, but the option is not wanted,
;	the length word or the address specified must be 0. the declared title
;	will be used if either is 0. 
;
; outputs:
;	successful open
;	fcb is updated:
;		fcb_l_next = address of the next open fcb
;		fcb_l_previous = address of the last open fcb
;		fcb_w_linesize = the linesize argument, or the default for
;				the device. (stream only)
;		fcb_w_pagesize = the pagesize argument, or the default for
;				the device. (stream only)
;		fcb_w_column = 1 if output (stream only)
;		fcb_w_line = 1 (stream only)
;		fcb_w_page = 1 (stream only)
;		fcb_l_attr = the attributes argument or'ed with the declared
;				attributes
;
;--	
	.entry	pli$open,^m<r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>
 
	cmpl	(ap),#1			;if not enough parameters
	bgtr	10$			;then
	clrl	r0			;signal not enough parameters
	brw	fail			;and fail
10$:	movl	fcbarg(ap),r6		;get address of fcb
	cmpw	fcb_w_revision(r6), -	;check revision of fcb
		#pli$c_version		;
	beql	20$			;if eql, cont
	movl	#pli$_badrtl,r0		;set bad version of file system
	brw	fail			;and fail
20$:	bbc	#atr_v_opened,fcb_l_attr(r6),30$ ;if file already opened,
	ret				;and just return
30$:	movl	attrarg(ap),r8		;get open attributes
	bisl	fcb_l_dttr(r6),r8	;and in declared attributes
;
; add implied and default attributes as follows:
;
;	direct implies record and keyed
;	keyed implies record
;	print implies stream and output
;	sequential implies record
;	update implies record
;	stream and output and pl1 identifier = "SYSPRINT" implies print
;
;	stream is the default for stream or record
;	input is the default for input or output or update
;	sequential is the default if record is specified
;
	bbc	#atr_v_direct,r8,40$	;if direct
	bisl	#<atr_m_record!atr_m_keyed>,r8 ;then imply record and keyed
40$:	bitl	#<atr_m_keyed! -	;keyed or
		atr_m_record! -		;record or
		atr_m_seql! -		;sequential or
		atr_m_update>,r8	;update
	beql	50$			;implies
	bisl	#atr_m_record,r8	;record
	bitl	#<atr_m_seql!atr_m_direct>,r8 ;if neither seql or direct
	bneq	50$			;specified, then 
	bisl	#atr_m_seql,r8		;default to sequential
50$:	bbc	#atr_v_print,r8,60$	;if print
	bisl	#<atr_m_stream!atr_m_output>,r8 ;then imply stream and output
60$:	bitl	#<atr_m_stream!atr_m_record>,r8 ;if neither stream or record
	bneq	70$			;specified, then
	bisl	#atr_m_stream,r8	;default to stream
70$:	bitl	#<atr_m_input! -	;if neither input or
		atr_m_output! -		;output or
		atr_m_update>,r8	;update 
	bneq	80$			;specified then
	bisl	#atr_m_input,r8		;default to input
80$:	bbc	#atr_v_output,r8,90$	;if output and
	bbc	#atr_v_stream,r8,90$	;stream specified
	cmpc5	#8,sysprint,#^x20,fcb_w_ident_len(r6),- ;and identifier =
		fcb_b_ident_nam(r6) 	;SYSPRINT
	bneq	90$			;then
	bisl	#atr_m_print,r8		;imply print
;
; check consistency of attributes
;
; the attributes are inconsistent if:
;	both record and stream are specified, or
;	more than one of input, output, or update is specified, or
;	both direct and sequential are specified
;
90$:	bbc	#atr_v_record,r8,100$	;if record and
	bbs	#atr_v_stream,r8,120$	;stream both set, fail
100$:	bbc	#atr_v_direct,r8,110$	;if direct and
	bbs	#atr_v_seql,r8,120$	;sequential both set, fail
	assume	atr_v_input eq <atr_v_output+1> ;make sure these bits are
	assume	atr_v_input eq <atr_v_update+2> ;where we think they are
110$:	extzv	#atr_v_update,#3,r8,r5	;get input, output and update bits
	case	type=b,r5,<120$,130$,130$,120$,130$> ;if inconsistent attributes
120$:	movl	#pli$_conattr,r0	;then set status
	brw	fail			;and fail
;
; set up stream parameters in fcb
;
; the line size and page size options are validated and stored in the fcb.
; the column position is set to 1.  the page number and line number are both
; set to 1.
;
	assume	<fcb_w_linesize+2> eq fcb_w_pagesize
	assume	<fcb_w_linesize+4> eq fcb_w_column
	assume	<fcb_w_column+2> eq fcb_w_line
	assume	<fcb_w_column+4> eq fcb_w_page
130$:	clrw	fcb_w_linesize(r6)	;clr linesize
	cmpl	(ap),#2			;linesize passed?
	bleq	170$			;if leq, then no
	movl	linesizearg(ap),r0	;get linesize arg
	beql	170$			;if eql, ignore it
	bgtr	150$			;if gtr, cont
140$:	movl	#pli$_linesize,r0	;set invalid linesize
	brw	fail			;and fail
150$:	bitl	#<atr_m_record!atr_m_input>,r8 ;record or input?
	bneq	140$			;if neq, yes, fail
	cmpl	r0,#32767		;too big?
	bgtr	140$			;if gtr, then yes, fail
	movw	r0,fcb_w_linesize(r6)	;set linesize in fcb
170$:	cmpl	(ap),#3			;pagesize passed?
	bleq	220$			;if leq, then no
	movl	pagesizearg(ap),r0	;get pagesize arg
	beql	220$			;if eql, ignore it
	bgtr	190$			;if gtr, cont
180$:	movl	#pli$_pagesize,r0	;set invalid pagesize
	brw	fail			;and fail
190$:	bitl	#<atr_m_record!atr_m_input>,r8 ;record or input?
	bneq	180$			;if neq, yes, fail
	bbc	#atr_v_print,r8,180$	;if not print, fail
	cmpl	r0,#32767		;too big
	bgtr	180$			;if gtr, yes, fail
210$:	movw	r0,fcb_w_pagesize(r6)	;set pagesize
220$:	bbc	#atr_v_print,r8,230$	;if not print, cont
	movw	#1,r0			;get initial line, page and prn
	movw	r0,fcb_w_line(r6)	;init line number
	movw	r0,fcb_w_page(r6)	;init page number
	movl	r0,fcb_l_prn(r6)	;init prn
	tstw	fcb_w_pagesize(r6)	;pagesize specified?
	bneq	230$			;if neq, yes
	calls	#0,g^lib$lp_lines	;get system default pagesize
	subw3	#6,r0,fcb_w_pagesize(r6) ;set default pagesize (-3 top, -3 bot)
230$:	clrw	fcb_w_column(r6)	;init column
	clrl	fcb_l_buf(r6)		;init buf addr
	clrl	fcb_l_buf_pt(r6)	;init buf pointer
	clrl	fcb_l_buf_end(r6)	;init buf end
;
;link the fab to the rab, the nam to the fab
;
240$:	movab	fcb_b_rab(r6),r10	;get address of rab
	movab	fcb_b_fab(r6),r7	;get address of fab
	movab	fcb_b_nam(r6),r11	;get address of nam
	movl	r7,rab$l_fab(r10)	;plug address of fab into rab
	movl	r11,fab$l_nam(r7)	;plug address of nam into fab
	movb	#fab$c_var,fab$b_rfm(r7); set record format default
	clrb	fab$b_rat(r7)		;set default record attributes
	movab	fcb_l_prn(r6),rab$l_rhb(r10) ;set address of prn in rab
;
; validate title and ident. if title specified, use it as file name.
; otherwise, use ident as file name.
;
	movw	fcb_w_ident_len(r6),r9	;get length of ident
	bgtr	260$			;if <= 0
250$:	movl	#pli$_fileident,r0	;then set invalid file identifier
	brw	fail			;and fail
260$:	cmpw	r9,#31			;if length > 31
	bgtr	250$			;then fail
	movab	fcb_b_ident_nam(r6),fab$l_fna(r7) ;default file name to ident
	movb	r9,fab$b_fns(r7)	;copy length to fab
	subl	#lnm$c_namlength,sp	;get room for translate temp
	pushl	sp			;set addr of dest
	pushl	#lnm$c_namlength	;set len of dest
	pushab	fcb_b_ident_nam(r6)	;set addr of src
	movzwl	fcb_w_ident_len(r6),-(sp) ;set len of src
	movl	sp,r0			;copy sp
	$trnlog_s (r0),,8(r0)		;translate the ident
	blbc	r0,250$			;if lbc, fail
	addl	#80,sp			;clean stack
	cmpl	r0,#ss$_notran		;did translation succeed?
	bneq	280$			;if neq, yes, use it
	cmpc5	#5,sysin,#^x20,fcb_w_ident_len(r6), - ;identifier = sysin?
		fcb_b_ident_nam(r6)	;
	bneq	270$			;if neq, then no
	movab	sysinput,fab$l_fna(r7)	;set filename to sys$input
	movb	#9,fab$b_fns(r7)	;set filename size to 9
	brb	280$			;continue
270$:	cmpc5	#8,sysprint,#^x20,fcb_w_ident_len(r6), -;identifier = sysprint?
		fcb_b_ident_nam(r6)	;
	bneq	280$			;if neq, then no
	movab	sysoutput,fab$l_fna(r7)	;set filename to sys$output
	movb	#10,fab$b_fns(r7)	;set filename size to 10
280$:	cmpl	(ap),#5			;if title specified
	blss	320$			;then
	movl	titlearg(ap),r2		;get address of title
	beql	320$			;if eql, then ignore it
	movw	(r2)+,r9		;get size of title
	bgeq	300$			;if size < 0
290$:	movl	#pli$_title,r0		;then set invalid title
	brw	fail			;and fail
300$:	cmpw	r9,#128			;if size > 128
	bgtr	290$			;then set invalid title and fail
	movb	r9,fab$b_fns(r7)	;set size in fab
	movl	r2,fab$l_fna(r7)	;set address in fab
;
; put address of extended string area and resultant string area
; into name block. assume no xabs needed
;
320$:	movab	fcb_b_esa(r6),nam$l_esa(r11) ;plug address of esa in nam
	movab	fcb_b_esa(r6),nam$l_rsa(r11) ;plug address of rsa in nam
	clrb	nam$b_esl(r11)		;set no esl, yet
	clrb	nam$b_rsl(r11)		;set no rsl, yet
	clrl	fab$l_xab(r7)		;set no xabs
;
; fill in file access field of fab
;
	bbc	#atr_v_input,r8,330$	;if input
	movb	#fab$m_get,fab$b_fac(r7) ;set get access in fac
	brb	350$			;else
330$:	bbc	#atr_v_output,r8,340$	;if output
	movb	#<fab$m_get!fab$m_put>,- ;set get and put access
		fab$b_fac(r7)		;in fac
	brb	350$			;else its update
340$:	movb	#<fab$m_get! -		;set get
		fab$m_put! -		;put,
		fab$m_del! -		;delete, and
		fab$m_upd>,fab$b_fac(r7) ;update in fac
;
; process environment options
;
350$:	subl	#env_k_len,sp		;get room for env block
	movl	sp,r9			;save addr of env block
	movc5	#0,(sp),#0,#env_k_len,(sp) ;zero it
	pushl	sp			;set addr of macro open block
	pushl	#0			;assume no open environment
	cmpl	(ap),#6			;open environment?
	blss	360$			;if lss, no
	movl	envirarg(ap),(sp)	;set addr of open environment
360$:	pushl	r6			;set addr of fcb
	pushab	8(sp)			;set addr of addr
	pushab	8(sp)			;set addr of addr
	pushab	8(sp)			;set addr of addr
	movl	r8,fcb_l_attr(r6)	;set current file attributes
	calls	#6,g^pli$$envir		;process environment	
	movl	fcb_l_attr(r6),r8	;get current file attributes
	blbs	r0,370$			;if lbs, cont
	ret				;error already signaled, just return
370$:	movl	env_l_status(r9),r11	;get env status
	beql	570$			;if eql, nothing to do, cont
	bitl	#<env_m_create_dat!env_m_expire_dat>,r11 ;do we need a date xab?
	beql	380$			;if eql, no, cont
	subl	#xab$k_datlen,sp	;get room for date xab
	movc5	#0,(sp),#0,#xab$k_datlen,(sp) ;zero the xab
	movb	#xab$c_dat,xab$b_cod(sp) ;set xab type
	movb	#xab$k_datlen,xab$b_bln(sp) ;set xab length
	movq	env_q_credate(r9),xab$q_cdt(sp) ;set creation date
	movq	env_q_expdate(r9),xab$q_edt(sp) ;set expiration date
	movl	fab$l_xab(r7),xab$l_nxt(sp) ;set pointer to next xab
	movl	sp,fab$l_xab(r7)	;set addr of xab in fab
380$:	bitl	#<env_m_protect!env_m_uic>,r11 ;do we need a protection xab?
	beql	570$			;if eql, no, cont
	subl	#xab$k_prolen,sp	;get room for protection xab
	movc5	#0,(sp),#0,#xab$k_prolen,(sp) ;zero it
	movb	#xab$c_pro,xab$b_cod(sp) ;set xab type
	movb	#xab$k_prolen,xab$b_bln(sp) ;set xab length
	movw	env_w_owngroup(r9),xab$w_grp(sp) ;set owners group
	movw	env_w_ownmem(r9),xab$w_mbm(sp) ;set owners member
	movw	env_w_prot(r9),xab$w_pro(sp) ;set protection
	movl	fab$l_xab(r7),xab$l_nxt(sp) ;set pointer to next xab
	movl	sp,fab$l_xab(r7)	;set addr of xab in fab
;
; if its a keyed file allocate a summary xab on the stack, fill it in and
; plug its address into the fab.
;
570$:	bisl	#fab$m_sqo,fab$l_fop(r7) ;set sqo
	bitl	#<atr_m_update!atr_m_direct! - ;update or direct or
		atr_m_keyed!atr_m_recidacc>,r8 ;keyed or record id access set?
	beql	575$			;if eql, no, sqo is ok
	bicl	#fab$m_sqo,fab$l_fop(r7) ;clr sqo
575$:	bbc	#atr_v_keyed,r8,580$	;if not keyed, cont
	subl	#xab$k_sumlen,sp	;allocate space for summary xab
	movc5	#0,(sp),#0,#xab$k_sumlen,(sp) ;zero it
	movb	#xab$c_sum,xab$b_cod(sp) ;set xab type
	movb	#xab$c_sumlen,xab$b_bln(sp) ;set block length
	movl	fab$l_xab(r7),xab$l_nxt(sp) ;set pointer to next xab
	movl	sp,fab$l_xab(r7)	;link summary xab to fab
;
; open the file if it is input or update, create it if it is output
;
580$:	bbs	#atr_v_output,r8,610$	;if input or update
585$:	subl	#xab$k_fhclen,sp	;get room for fhc xab
	movc5	#0,(sp),#0,#xab$k_fhclen,(sp) ;zero it
	movb	#xab$c_fhc,xab$b_cod(sp) ;set xab type
	movb	#xab$k_fhclen,xab$b_bln(sp) ;set block length
	movl	fab$l_xab(r7),xab$l_nxt(sp) ;set next xab pointer
	movl	sp,fab$l_xab(r7)	;link fhc xab to fab
	$open	r7			;then open the file
	blbc	r0,590$			;if lbc, error on open
	movw	xab$w_lrl(sp),r1	;get length of longest record
	movab	xab$k_fhclen(sp),sp	;clean stack
	cmpw	r1,fcb_l_buf_end(r6)	;lrl larger than user requested size?
	blss	620$			;if lss, no, cont
	movzwl	r1,fcb_l_buf_end(r6)	;use lrl for buffer size
	brb	620$			;cont
590$:	movl	#pli$_rmsf,r0		;then set rms fab error code
600$:	brw	fail			;and fail
610$:	$create	r7			;if output, create the file
	blbc	r0,590$			;if error on create, fail
;
; make sure file has desired attributes
;
620$:	bbs	#atr_v_keyed,r8,640$	;if not keyed
630$:	brw	780$			;cont
640$:	cmpb	#fab$c_idx,fab$b_org(r7) ;is it indexed org?
	bneq	630$			;if neq, no, cont
	movzbl	xab$b_nok(sp),r11	;get number of keys
	bisl	#atr_m_indexed,r8	;set indexed file
	movl	r9,sp			;clean stack, leaving env block
	mull3	#xab$c_keylen,r11,r5	;get size of key xabs required
	subl	r5,sp			;allocate room on the stack
	movc5	#0,(sp),#0,r5,(sp)	;zero it
	movl	sp,fab$l_xab(r7)	;set addr of xabs in fab
	movl	sp,r5			;copy addr of first xab
	clrl	r0			;set index to 0
	brb	670$			;cont in loop
660$:	addl	#xab$c_keylen,r5	;point to next key xab
	movl	r5,<xab$l_nxt-xab$c_keylen>(r5) ;point last key xab to this one
670$:	movb	#xab$c_key,xab$b_cod(r5) ;set xab type
	movb	#xab$c_keylen,xab$b_bln(r5) ;set xab length
	movb	r0,xab$b_ref(r5)	;set key number
	aoblss	r11,r0,660$		;loop
	clrl	xab$l_nxt(r5)		;terminate xab list
	$display r7			;get the key information
	blbs	r0,675$			;if lbs, cont
	cmpl	r0,#rms$_sup		;failure = not supported over net?
	beql	673$			;if eql, yes, cont
	cmpl	r0,#rms$_support	;failure = not supported over net?
	beql	673$			;if eql, yes, cont
672$:	movl	#pli$_rmsf,r0		;set rms fab error
	brw	fail			;and fail
673$:	$close	r7			;close the file
	blbc	r0,672$			;if lbc, fail
	$open	r7			;reopen file
	blbc	r0,672$			;if lbc, fail
675$:	mull3	#kcb_c_len,r11,-(sp)	;get size of key control blocks
	pushl	sp			;set addr of temp
	pushab	4(sp)			;set addr of size
	calls	#2,g^lib$get_vm		;get space for the kcbs
	blbs	r0,680$			;if lbs, cont
	movl	#pli$_novirmem,r0	;set no virtual memory
	brw	fail			;and fail
680$:	popl	r5			;get addr of kcbs
	movl	r5,fcb_l_kcb(r6)	;set addr of kcbs in fcb
	movb	r11,fcb_b_numkcbs(r6)	;set number of kcbs in fcb
690$:	movb	xab$b_dtp(sp),r0	;get data type of this key
	assume	xab$c_stg eq 0		;
	assume	xab$c_in2 eq 1		;
	assume	xab$c_bn2 eq 2		;
	assume	xab$c_in4 eq 3		;
	assume	xab$c_bn4 eq 4		;
	assume	xab$c_pac eq 5		;
	case	type=b,r0,< -		;case on rms data type
		700$, -			;string
		720$, -			;int 2
		720$, -			;bin 2
		740$, -			;int 4
		740$, -			;bin 4
		750$>			;pac
	movl	#pli$_inv_key,r0	;set invalid key type
	brw	fail			;and fail
700$:	clrl	r0			;clear total length
	movl	#dat_k_char,kcb_l_dtyp(r5) ;set char data type
	movab	kcb_w_pos0(r5),r1	;get addr of pos0 in kcb
	movab	xab$w_pos0(sp),r2	;get addr of pos0 in xab
	movab	xab$b_siz0(sp),r4	;get addr of siz0 in xab
	movl	#8,r7			;set max number of segments
710$:	movw	(r2)+,(r1)+		;set position in kcb
	movzbl	(r4)+,r10		;get size of segment
	addl	r10,r0			;add size into total size
	movw	r10,(r1)+		;set size in kcb
	sobgtr	r7,710$			;go again
	movl	r0,kcb_l_prec(r5)	;set precision in kcb
	clrl	kcb_l_zero(r5)		;set no more segments
	brb	760$			;cont
720$:	movl	#15,kcb_l_prec(r5)	;set prec of 15
730$:	movl	#dat_k_fix_bin,kcb_l_dtyp(r5) ;set fixb data type
	movw	xab$w_pos0(sp),kcb_w_pos0(r5) ;set position of key in kcb
	movzbw	xab$b_siz0(sp),kcb_w_len0(r5) ;set byte size of key in kcb
	brb	755$			;cont
740$:	movl	#31,kcb_l_prec(r5)	;set prec of 31
	brb	730$			;cont in common
750$:	movl	#dat_k_fix_dec,kcb_l_dtyp(r5) ;set fixd data type in kcb
	mulb3	#2,xab$b_siz0(sp),r0	;get prec of key
	decb	r0			;
	movzbl	r0,kcb_l_prec(r5)	;set prec in kcb
	movw	xab$w_pos0(sp),kcb_w_pos0(r5) ;set position of key in kcb
	movzbw	xab$b_siz0(sp),kcb_w_len0(r5) ;set byte size of key in kcb
755$:	clrl	kcb_w_pos1(r5)		;set no more segments
760$:	addl	#xab$c_keylen,sp	;remove this xab
	addl	#kcb_c_len,r5		;point to next kcb
	sobgtr	r11,770$		;go again
	movab	fcb_b_fab(r6),r7	;reset addr of fab
	movab	fcb_b_rab(r6),r10	;reset addr of rab
	brb	790$			;cont
770$:	brw	690$			;really go again

780$:	bbc	#atr_v_indexed,r8,782$	;if indexed required
	cmpb	#fab$c_idx,fab$b_org(r7) ;is it indexed org?
	beql	790$			;if eql, yes, cont
	movl	#pli$_notindexed,r0	;set not indexed file
	brw	fail			;and fail
782$:	bbc	#atr_v_keyed,r8,790$	;if not keyed, cont
	cmpb	#fab$c_rel,fab$b_org(r7) ;if keyed and file is relative
	beql	790$			;then cont
	bbc	#dev$v_rnd,fab$l_dev(r7),785$ ;if device not random access, fail
	bbs	#dev$v_sqd,fab$l_dev(r7),785$ ;if device seql block mode, fail
	cmpb	#fab$c_fix,fab$b_rfm(r7) ;if fixed length records
	beql	790$			;then continue
	bbs	#atr_v_recidacc,r8,790$	;if record id access, cont
	bbs	#fab$v_bio,fab$b_fac(r7),790$ ;if block io, cont
785$:	$close	r7			;close the file
	movl	#pli$_invforgkey,r0	;set invalid file organization
	brw	fail			;and fail
;
; connect to the file
;
790$:	clrl	fab$l_xab(r7)		;clear xab pointer
	$connect r10			;connect to the file
	blbs	r0,800$			;if error on connect
	$close	r7			;then close the file
	movl	#pli$_rmsr,r0		;set rms rab error code
	brw	fail			;and fail
;
; process fixed_control_size_to and file_id_to
;
800$:	movl	env_l_fileidto(r9),r0	;get addr of file_id_to
	beql	810$			;if eql, none
	movc3	#22,<fcb_b_nam+nam$t_dvi>(r6),(r0) ;set dvi and fid
810$:	movl	env_l_fxctlto(r9),r0	;get addr of fixed_control_size_to
	beql	820$			;if eql, none
	movzbl	fab$b_fsz(r7),(r0)	;set fixed_control_size_to
;
; set pagesize for terms and linesize/buffer size for all
;
820$:	bbc	#dev$v_trm,fab$l_dev(r7),8205$ ;if its a terminal, then
	cmpl	(ap),#3			;pagesize passed?
	bleq	8202$			;if leq, then no
	movl	pagesizearg(ap),r0	;get pagesize arg
	bneq	8205$			;if neq, then it was passed.
8202$:	clrw	fcb_w_pagesize(r6)	;default pagesize to 0 for terms
8205$:	tstw	fab$w_mrs(r7)		;mrs specified?
	beql	8210$			;if eql, no, use current buf size
	movw	fab$w_mrs(r7),fcb_l_buf_end(r6) ;use mrs as buf size
8210$:	bbc	#atr_v_stream,r8,822$	;if not stream, cont
	tstw	fcb_w_linesize(r6)	;linesize specified?
	bneq	822$			;if neq, yes, cont
	bbc	#dev$v_rec,fab$l_dev(r7),821$ ;if its a record device,
	movw	fab$w_bls(r7),fcb_w_linesize(r6) ;set actual linesize
	bneq	822$			;cont
821$:	movw	fcb_l_buf_end(r6),fcb_w_linesize(r6) ;default to buffer size
	bbc	#atr_v_print,r8,822$	;if not print file, cont
	movw	#132,fcb_w_linesize(r6)	;set default of 132
;
; link the file to the opened file list, and set its status to opened
;
822$:	jsb	g^pli$link_fcb		;link fcb onto exit control list
	movl	#^x9f160006,fcb_l_condit(r6) ;set up cnd hnd for i/o routines
	movab	g^pli$$stream_hnd,fcb_l_cndaddr(r6) ;set stream handler address
	bbs	#atr_v_stream,r8,830$	;if stream cont
	movab	g^pli$$key_hnd,fcb_l_cndaddr(r6) ;set key handler address
830$:	bisl	#<atr_m_currec!atr_m_opened!- ;set file opened, cur rec wrong
		atr_m_virgin>,r8	; and in just opened stat
	bicl3	#<atr_m_delete!atr_m_recur! - ;clear delete, recursion flag,
		atr_m_comma_exp!atr_m_eof! - ;comma_expected and eof
		atr_m_write>,r8,fcb_l_attr(r6)	;copy atr to fcb
	clrq	fcb_q_rfa(r6)		;clear saved rfa
	movl	#1,r0			;indicate success
	ret				;return

	.page

fail:	bneq	10$			;if not enough parms
	movl	#pli$_parm,r0		;then set not enough parameters
	clrl	r1			;assume no fcb specified
	cmpl	(ap),#1			;if fcb specified
	blss	20$			;then
	movl	fcbarg(ap),r6		;get fcb
10$:	movl	r0,fcb_l_error(r6)	;put error code in fcb
	movl	r6,r1			;put fcb address in r1
	tstb	<fcb_b_nam+nam$b_esl>(r1) ;anything in esl?
	bneq	20$			;if neq, yes, cont
	movb	<fcb_b_nam+nam$b_rsl>(r1),- ;copy rsl to esl
		<fcb_b_nam+nam$b_esl>(r1) ;
20$:	pushl	r1			;set fcb addr
	pushl	r0			;set error code
	pushl	#pli$_undfile		;set undefinedfile condition
	calls	#3,g^pli$io_error	;signal the condition
	ret				;return

	.end


