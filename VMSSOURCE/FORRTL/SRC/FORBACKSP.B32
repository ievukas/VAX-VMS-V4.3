MODULE FOR$BACKSPACE (%TITLE'FORTRAN BACKSPACE statement'
		IDENT = '1-010'		! File name: FORBACKSP.B32 Edit:SBL1010
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  FORTRAN Support Library
!
! ABSTRACT:
!
!	This module contains routine FOR$BACKSPACE (unit.rlu.v),
!	which implements the FORTRAN BACKSPACE statement.
!
! ENVIRONMENT:  User Mode - AST re-entrant
!
! AUTHOR:	Jonathan M. Taylor, CREATION DATE: 17-OCT-1977
!
! MODIFIED BY:
!
! [Previous edit history removed.  SBL 24-Sept-1982]
! 1-008	- Move BUILTIN ACTUALCOUNT into the routine.  The next version of the
!	  BLISS compiler will demand this.  JBS 20-Aug-1980
! 1-009 - Implement speedup for disk files.  SBL 3-Jun-1983
! 1-010 - Remove external literal declarations.  SBL 18-Jun-1983
!--


!
! PROLOGUE FILE:
!

REQUIRE 'RTLIN:FORPROLOG';			! FORTRAN declarations

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$BACKSPACE;				! FORTRAN BACKSPACE statement

!
! OWN STORAGE:
!
!    NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$SIGNAL_STO,				! convert error number and SIGNAL
    FOR$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Create LUB/ISB/RAB if needed
    FOR$$CB_POP : JSB_CB_POP NOVALUE,		! Return I/O system to previous state
    FOR$$IOSTAT_HND;				! Condition handler


GLOBAL ROUTINE FOR$BACKSPACE (%SBTTL'FORTRAN BACKSPACE statement'
	UNIT, 					! Logical unit
	ERR_EQL					! Error code (optional)
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Implements the FORTRAN BACKSPACE statement.
!
! FORMAL PARAMETERS:
!
!	UNIT.rl.v		logical unit to perform backspace
!	ERR_EQL.rl.v		If 0 or omitted, all errors are signalled.
!				If non-zero, errors unwind to the caller.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The returned value is always a correct IOSTAT small integer
!	FORTRAN error number.
!
! SIDE EFFECTS:
!
!	SIGNAL_STOPs FOR$_BACERR if RMS REWIND error or RMS $GET error.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF $FOR$CCB_DECL;

    BUILTIN
	ACTUALCOUNT;

    LOCAL
	FOUND,					! 1 if we have got the record
	L_UNWIND_ACTION : VOLATILE,		! UNWIND action code
	L_ERR_EQL_PRES : VOLATILE;		! 1 if ERR= present, 0 otherwise

    ENABLE
	FOR$$IOSTAT_HND (L_UNWIND_ACTION, L_ERR_EQL_PRES);	! LUB cleanup with ERR= and IOSTAT

    !+
    ! Determine if ERR= is present.
    !-

    IF ACTUALCOUNT () GTR 1 THEN L_ERR_EQL_PRES = .ERR_EQL ELSE L_ERR_EQL_PRES = 0;

    !+
    ! Unwind action is NO-OP (no LUB to pop).
    !-

    L_UNWIND_ACTION = FOR$K_UNWINDNOP;

    !-
    ! Get a LUB for this logical unit.
    ! On return, CCB points to the current control block.
    !-

    FOR$$CB_PUSH (.UNIT, LUB$K_LUN_MIN);

    !+
    ! Unwind action (in case error occurs) is to pop the LUB/RAB/ISB.
    !-

    L_UNWIND_ACTION = FOR$K_UNWINDPOP;

    !+
    ! Check the LUB.  If the file is not open, then this is a no-op.
    !-

    IF .CCB [LUB$V_OPENED]
    THEN
	BEGIN

	BIND
	    FAB = CCB: REF $FOR$FAB_CCB_STRUCT,
	    NAM = CCB: REF $FOR$NAM_CCB_STRUCT,
	    FAB_DEV = FAB [FAB$L_DEV]: BLOCK [4, BYTE];
	    
	!+
	! Ensure that the file is sequential organization and access.
	!-

	IF .CCB [LUB$V_NOTSEQORG] OR
	   .CCB [LUB$V_DIRECT] OR
	   .CCB [LUB$V_APPEND]
	THEN
	    RETURN FOR$$SIGNAL_STO (FOR$K_BACERR,0,
		FOR$_OPEREQSEQ); ! Operation requires sequential org. and access
	    
	!+
	! Ensure that this is a tape or disk file and is not a PPF.
	!-

	IF NOT (.FAB_DEV [DEV$V_SQD] OR .FAB_DEV [DEV$V_RND]) OR
	   .NAM [NAM$V_PPF]
	THEN
	    RETURN FOR$$SIGNAL_STO (FOR$K_BACERR,0,
		FOR$_OPEREQDIS); ! Operation requires disk or tape file
	
	!+
	! Indicate that we have not yet positioned to the record.
	!-

	FOUND = 0;

	!+
	! If we have read at least two records in the file, try to use a
	! fast method of finding the record.  However, we can't do the
	! fast method if FAB$V_SQO is set (set for DECnet files).
	!-

	IF .CCB [LUB$L_LOG_RECNO] GTRU 2 AND NOT .FAB [FAB$V_SQO]
	THEN
	    BEGIN
	    LOCAL
		DEST_RECNO;	! Destination record number.

	    !+
	    ! Compute the number of the record before the current one.  Note
	    ! that since LUB$L_LOG_RECNO contains the number of the NEXT record,
	    ! we must subtract 2.
	    !-

	    DEST_RECNO = .CCB [LUB$L_LOG_RECNO] - 2;

	    !+
	    ! Use direct-access positioning if fixed-length records.
	    !-

	    IF .CCB [LUB$V_FIXED]
	    THEN
		BEGIN
    
		!+
		! Set record number to previous record and do a $GET.
		! If it succeeds, then set FOUND to indicate we have
		! the record we want.  
		!-
    
		CCB [RAB$L_KBF] = DEST_RECNO;
		CCB [RAB$B_RAC] = RAB$C_KEY;
		IF $GET (RAB = .CCB)
		THEN
		    BEGIN
		    CCB [LUB$L_LOG_RECNO] = .CCB [LUB$L_LOG_RECNO] - 1;
		    FOUND = .FOUND + 1;
		    END;
		END;
    
	    !+
	    ! If RFA cacheing is in effect, look in the cache to see if we
	    ! have the desired record in the cache.  If so, do an RFA $GET of
	    ! it.  Note that RFA cacheing is not enabled for fixed-length
	    ! records, so we don't have the record yet.
	    !-

	    IF .CCB [LUB$V_RFA_CACHE_ENABLE]
	    THEN
		BEGIN
		LOCAL
		    RCE: REF RCE_R_RCE_STRUCT;	! RFA Cache Entry

		RCE = .CCB [LUB$A_RFA_CACHE_PTR];	! Get current entry

		!+
		! Look through cache for the right record number.
		!-

		DECRU I FROM RCE_K_CACHE_SIZE TO 1 DO
		    BEGIN
		    IF .RCE [RCE_L_LOG_RECNO] EQLU .DEST_RECNO
		    THEN
			BEGIN
			CCB [RAB$L_RFA0] = .RCE [RCE_L_RFA0];
			CCB [RAB$W_RFA4] = .RCE [RCE_W_RFA4];
			CCB [RAB$B_RAC] = RAB$C_RFA;
			IF $GET (RAB = .CCB)
			THEN
			    BEGIN
			    CCB [LUB$A_RFA_CACHE_PTR] = .RCE [RCE_A_NEXT];
			    CCB [LUB$L_LOG_RECNO] = .CCB [LUB$L_LOG_RECNO] - 1;
			    FOUND = .FOUND + 1;
			    END;
			EXITLOOP;
			END;
		    RCE = .RCE [RCE_A_PREV];	! Get next entry
		    END;
		END;
	    END;

	!+
	! If we haven't found the record yet, rewind and forward space.
	!-

	IF NOT .FOUND
	THEN
	    BEGIN

	    LOCAL
		RCE: REF RCE_R_RCE_STRUCT;	! RFA Cache entry

	    RCE = .CCB [LUB$A_RFA_CACHE_PTR];
	    CCB [RAB$B_RAC] = RAB$C_SEQ;

	    !+
	    ! If RMS can't rewind the file then fail.
	    !-

	    IF NOT $REWIND (RAB = .CCB) THEN 
		RETURN FOR$$SIGNAL_STO (FOR$K_BACERR);

	    !+
	    ! Now read records until we're positioned one record before
	    ! the last record read.
	    !-

	    IF .CCB [LUB$L_LOG_RECNO] GTRU 1	! i.e. we're sitting somewhere in the file
	    THEN
		BEGIN

		LOCAL
		    I;				! local temp for counting

		I = .CCB [LUB$L_LOG_RECNO] - 1;	! Point to previous record
		CCB [LUB$L_LOG_RECNO] = 1;

		WHILE .CCB [LUB$L_LOG_RECNO] LSSU .I DO
		    BEGIN

		    !+
		    ! Call RMS to get next record.
		    !-

		    IF NOT $GET (RAB = .CCB) 
		    THEN 
			RETURN FOR$$SIGNAL_STO (FOR$K_BACERR);

		    !+
		    ! Make entry in RFA cache if enabled.
		    !-
		
		    IF .CCB [LUB$V_RFA_CACHE_ENABLE]
		    THEN
			BEGIN
			RCE [RCE_L_LOG_RECNO] = .CCB [LUB$L_LOG_RECNO];
			$LIB$MOVQ (CCB [RAB$W_RFA], RCE [RCE_Q_RFA]);
			RCE = .RCE [RCE_A_NEXT];
			END;

		    !+
		    ! If segmented record control, check the validity
		    ! of the records and for end-of-file.  Read the
		    ! following segments of the segmented record until
		    ! last record control info is seen.
		    !-

		    IF .CCB [LUB$V_SEGMENTED]
		    THEN
			BEGIN
			UNTIL
			    BEGIN
			    IF ((.CCB [RAB$W_RSZ] EQL 0)
				OR ((.CCB [RAB$W_RSZ] GEQU 2) AND
				 (.(.CCB [RAB$L_RBF])<2, 14> NEQ 0)))
			    THEN
				RETURN FOR$$SIGNAL_STO (FOR$K_SEGRECFOR);
			    .(.CCB [RAB$L_RBF])<1, 1>
			    END
			DO
			    BEGIN
			    IF NOT $GET (RAB = .CCB) 
			    THEN 
				RETURN FOR$$SIGNAL_STO (FOR$K_BACERR);
			    END;
			END;

		    CCB [LUB$L_LOG_RECNO] = .CCB [LUB$L_LOG_RECNO] + 1;
		    END;
		END;
	    !+
	    ! Record found - set RFA cache entry pointer.
	    !-
    
	    CCB [LUB$A_RFA_CACHE_PTR] = .RCE;
	    END;

	END;

    !+
    ! Return I/O system to previous state.
    !-

    FOR$$CB_POP ();
    RETURN 0;					! Success IOSTAT value
    END;

END

ELUDOM
