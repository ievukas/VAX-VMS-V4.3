MODULE SERVICES (%TITLE 'Symbiont Services -- Shareable Routines'
		IDENT = 'V04-000',
		ADDRESSING_MODE (EXTERNAL = GENERAL)
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Symbiont Services
!
! ABSTRACT:
!	This module provides a set of shareable routines used by symbionts.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: Greg Robert, CREATION DATE: 26-Apr-1983
!
! MODIFIED BY:
!
!	V3-008	RRB0014		Rowland R. Bradley	09-Aug-1984
!		Change the allocation of the IOB from 512 to 1024.
!		Previous to this change long filenames would cause
!		the username and UIC to disappear.  The long filename
!		was passed by the job controller in a message of 1024.
!		The print symbionts largest message buffer (IOB) was 512.
!		This change increases the IOB to 1024.
!
!	V3-007  RRB0013		Rowland R. Bradley	20-Jul-1984
!		Change messages PSM$_NOMOREITEMS to SMB$_NOMOREITEMS,
!		PSM$_INVSTRLEV to SMB$_INVSTRLEV, PSM$_INVSTMNBR to 
!		SMB$_INVSTMSBR.
!
!	V3-006	GRR0012		Gregory R. Robert	21-Oct-1983
!		Disable user-allowed check in provide_service
!
!	V3-005	GRR0011		Gregory R. Robert	21-OCT-1983
!		Remove user argument optional parameter from provide_service.
!
!	V3-004	GRR0010		Gregory R. Robert	18-Oct-1983
!		Fix improper bind statement in provide_service
!
!	3B-003	GRR3003		Gregory R. Robert	23-Aug-1983
!		Bugfixes, page_setup_modules, form_setup_modules,
!		sheet_feed, symbiont initiated pause_task and stop_stream,
!		hangup code, read and write item services
!
!	3B-002	GRR3002		Gregory R. Robert	03-Aug-1983
!		Rewrite for new design.
!
!	3B-001	GRR4003		Gregory R. Robert	29-Jul-1983
!		Created new module.
!
!**


LIBRARY 'SYS$LIBRARY:LIB';
REQUIRE 'LIB$:SMBDEF';
REQUIRE	'SRC$:SMBREQ';

EXTERNAL ROUTINE
	PSM$ALLOCATE_DSB:		NOVALUE,
	PSM$ALLOCATE_IOB:		NOVALUE,
	PSM$DEALLOCATE_DSB:		NOVALUE
	;

EXTERNAL
	PSM$SRV	: BLOCKVECTOR[,SRV_S_SRV, BYTE]
	;


FORWARD ROUTINE
	SMB$CHECK_FOR_MESSAGE	,
	SMB$READ_MESSAGE_ITEM	,
	SMB$INITIALIZE		,
	SMB$READ_MESSAGE	,
	SMB$SEND_TO_JOBCTL	,

	PSM$REPLACE		,
	PSM$SCHEDULE_NON_AST	,
	PSM$WAIT_FOR_NON_AST	,

	READ_MAILBOX		: NOVALUE,
	READ_MAILBOX_AST	: NOVALUE,
	WRITE_MAILBOX		: NOVALUE
	;

OWN
	NON_AST_QUEUE:	VECTOR [2],		! Non-ast queue header
	MESSAGE_QUEUE:	VECTOR [2],		! Message queue header
	MESSAGE_AST_ROUTINE,			! User AST routine
	MAXIMUM_STREAMS,			! User specified stream limit
	IMBX_CHAN:	WORD,			! Input mailbox
	OMBX_CHAN:	WORD,			! Output mailbox channel
	OMBX_IOSB:	VECTOR [4, WORD]	! Output mailbox iosb
	;

GLOBAL ROUTINE SMB$CHECK_FOR_MESSAGE %SBTTL 'CHECK_FOR_MESSAGE'
	=
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!	Checks if the message queue is empty.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	<tbs>		- Message queue header.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_NORMAL	- A message is waiting.
!	<tbs>		- The message queue is empty.
!
! SIDE EFFECTS:
!	NONE
!
!--

IF .MESSAGE_QUEUE [0] EQL MESSAGE_QUEUE [0]
THEN
    RETURN 0
ELSE
    RETURN SS$_NORMAL;

END;

GLOBAL ROUTINE SMB$READ_MESSAGE_ITEM ( %SBTTL 'GET_NEXT_ITEM'
	MESSAGE	,
	CONTEXT	,
	ITEM	: REF $LONGWORD,
	BUFFER	,
	SIZE	: REF $WORD
	) =
BEGIN
	PARAMETER_INDEX_ (MESSAGE, CONTEXT, ITEM, BUFFER, SIZE);

!++
!
! FUNCTIONAL DESCRIPTION:
!	Parses and returns the next item in the message.
!
! INPUT PARAMETERS:
!	MESSAGE		- Descriptor of message buffer.
!	CONTEXT		- Longword context, next item pointer.
!	ITEM		- Longword to receive item code.
!	BUFFER		- Descriptor of buffer to receive item.
!	SIZE		- Word to receive item size.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_NORMAL	- Normal successful completion.
!	LIB$_INVARG	- Invalid argument.
!	SMB$_NOMOREITEMS- Item list exhausted.
!	...		- Any return from LIB$SCOPY_xxxx routines.
!
! SIDE EFFECTS:
!	Context field updated to point at next item or cleared to
!	zero when last item +1 is read.
!
!--

LOCAL
	MSG_ADDRESS,
	MSG_SIZE:	INITIAL (0)
	;

BIND
	I_PTR = .CONTEXT : REF $BBLOCK
	;


! Get the size and address of the message.
!
STR$ANALYZE_SDESC (.MESSAGE, MSG_SIZE, MSG_ADDRESS);


! Advance to next item, or first item if starting.
!
IF .I_PTR EQL 0
THEN
    I_PTR = .MSG_ADDRESS + SMBMSG$S_REQUEST_HEADER
ELSE
    I_PTR = .I_PTR +  .I_PTR[SMBMSG$W_ITEM_SIZE] + SMBMSG$S_ITEM_HEADER;


! If end of message (item code eql 0) or past end of message buffer
! then reset context and return no more items.
!
IF .I_PTR[SMBMSG$W_ITEM_CODE] EQL 0 OR .I_PTR GTRA (.MSG_ADDRESS + .MSG_SIZE)
THEN
    BEGIN
    I_PTR = 0;
    RETURN SMB$_NOMOREITEMS;
    END;


! Return item code and item size if requested.
!
ITEM[] = .I_PTR[SMBMSG$W_ITEM_CODE];
IF PARAMETER_PRESENT_ (SIZE)
THEN
    SIZE[] = .I_PTR[SMBMSG$W_ITEM_SIZE];


! Copy the item to the user buffer
!
COPY_R_DX_ (I_PTR[SMBMSG$W_ITEM_SIZE], .I_PTR + SMBMSG$S_ITEM_HEADER, .BUFFER);

SS$_NORMAL

END;

! Functional Description:
!		?desc
!
! Formal Parameters:
!		?desc
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$REPLACE ( %SBTTL 'PROVIDE_SERVICE'
	SERVICE_CODE	: REF $LONGWORD,
	RTNADR
	) =
BEGIN
BIND SERVICE = PSM$SRV [.SERVICE_CODE[], 0,0,0,0] : $BBLOCK;

! Validate the service code
!
IF .SERVICE_CODE[] EQL 0
OR .SERVICE_CODE[] GEQU PSM$K_MAX
THEN
    CODEERR_ ;


! Check that this service may be user supplied
!
!*!Allow any user supplied service for FT1
!*!
!*!IF NOT .SERVICE[SRV_V_USER_ALLOWED]
!*!THEN
!*!    CODEERR_ ;


! Update the table with the routine address
!
SERVICE[SRV_A_SERVICE] = .RTNADR;


! Mark the service as user supplied
!
SERVICE[SRV_V_USER_SUPPLIED] = 1;

SS$_NORMAL

END;

GLOBAL ROUTINE SMB$INITIALIZE ( %SBTTL 'INITIALIZE_SYMBIONT'
	STRUCTURE_LEVEL	: REF $LONGWORD,
	AST_ROUTINE	,
	STREAMS		: REF $LONGWORD
	) =
BEGIN
	PARAMETER_INDEX_ (STRUCTURE_LEVEL, AST_ROUTINE, STREAMS);

!++
!
! FUNCTIONAL DESCRIPTION:
!	Initializes the internal symbiont database and establishes
!	communications with the controlling process.
!
! INPUT PARAMETERS:
!	STRUCTURE_LEVEL	- Address of a longword containing structure level of caller.
!	AST_ROUTINE	- Address of the entry mask of an AST routine
!			  to be called when messages are received.
!	STREAMS		- Longword containing the maximum number of
!			  streams allowed for this symbiont, default 1.
!
! IMPLICIT INPUTS:
!	<tbs>		- Symbiont database.
!	SYS$INPUT	- Input mailbox from controlling process.
!	SYS$OUTPUT	- Output mailbox to controlling process.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_NORMAL	- Normal, successful completion.
!	LIB$_INVARG	- Invalid arguments.
!	...		- Any system service failure.
!
! SIDE EFFECTS:
!	Symbiont database initialized, mailbox channels assigned,
!	AST mailbox read posted.
!
!--

LOCAL
	IOB
	;

IF .STRUCTURE_LEVEL[] NEQ SMBMSG$K_STRUCTURE_LEVEL
THEN
    RETURN SMB$_INVSTRLEV;

RETURN_IF_ERROR_ ($ASSIGN (DEVNAM=$DESCRIPTOR ('SYS$INPUT'), CHAN=IMBX_CHAN));

RETURN_IF_ERROR_ ($ASSIGN (DEVNAM=$DESCRIPTOR ('SYS$OUTPUT'), CHAN=OMBX_CHAN));

INIT_QUEUE_HEADER_ (NON_AST_QUEUE[0]);
INIT_QUEUE_HEADER_ (MESSAGE_QUEUE[0]);

IF PARAMETER_PRESENT_ (AST_ROUTINE)
THEN
    MESSAGE_AST_ROUTINE = .AST_ROUTINE;

MAXIMUM_STREAMS = 1;
IF PARAMETER_PRESENT_ (STREAMS)
THEN
    MAXIMUM_STREAMS = .STREAMS[];

RETURN_IF_ERROR_ ($PURGWS (INADR=UPLIT (0, %X'7FFFFFFF')));

PSM$ALLOCATE_IOB (IOB, UPLIT (1024));
READ_MAILBOX (.IOB);

SS$_NORMAL

END;

GLOBAL ROUTINE SMB$READ_MESSAGE ( %SBTTL 'READ_MESSAGE'
	STREAM	: REF $LONGWORD,
	BUFFER	,
	REQUEST	: REF $LONGWORD,
	SIZE	: REF $WORD		!*! NOT REFERENCED !
	) =
BEGIN
	PARAMETER_INDEX_ (STREAM, BUFFER, REQUEST, SIZE);

!++
!
! FUNCTIONAL DESCRIPTION:
!	Copies the next message into the caller's buffer.
!
! INPUT PARAMETERS:
!	STREAM		- Address of longword to receive stream number.
!	BUFFER		- Descriptor of output buffer.
!	REQUEST		- Address of longword to receive message request code.
!	SIZE		- Address of word to receive size of message.
!
! IMPLICIT INPUTS:
!	<tbs>		- Message queue header.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_NORMAL	- Normal successful completion.
!	LIB$_INVARG	- Invalid argument.
!	...		- Any return from LIB$SCOPY_xxxx routines.
!
! SIDE EFFECTS:
!	The message is dequeued from the message queue.  If no message
!	is available the thread is blocked until one is received.
!
!--

LOCAL
	DSB:		REF $BBLOCK,
	MESSAGE:	REF $BBLOCK
	;

! Hibernate until there is work to do
!
WHILE REMOVE_HEAD_ (DSB, MESSAGE_QUEUE) DO $HIBER;
DSB = .DSB - $BYTEOFFSET (DSB_Q_QLINKS);

MESSAGE = .DESC_ADDR_ (DSB[DSB_Q_DESC]);

REQUEST[] = .MESSAGE[SMBMSG$W_REQUEST_CODE];
IF PARAMETER_PRESENT_ (SIZE)
THEN
    $BBLOCK [.SIZE,0,0,16,0] = .DESC_SIZE_ (DSB[DSB_Q_DESC]);

STREAM[] = .MESSAGE[SMBMSG$B_STREAM_INDEX];

COPY_DX_DX_ (DSB[DSB_Q_DESC], .BUFFER);

PSM$DEALLOCATE_DSB (.DSB);

SS$_NORMAL

END;

GLOBAL ROUTINE PSM$SCHEDULE_NON_AST ( %SBTTL 'SCHEDULE_NON_AST'
	PARAMETER
	) =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!	Schedules execution at non-ast level.
!
! INPUT PARAMETERS:
!	PARAMTER	- Descriptor of a paramter block to be queued to
!			  non-ast level.
!
! IMPLICIT INPUTS:
!	<tbs>		- Work queue header.
!	<tbs>		- Descriptor queue header.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_NORMAL	- Normal, successful completion.
!	...		- Any return from LIB$SCOPY_xxxx routines.
!
! SIDE EFFECTS:
!	The parameter block is copied to an internal buffer and placed in
!	the work queue.  A wakeup is scheduled if the queue was empty.
!
!--

LOCAL
	DSB : REF $BBLOCK
	;

PSM$ALLOCATE_DSB (DSB);

COPY_DX_DX_ (.PARAMETER, DSB[DSB_Q_DESC]);

IF INSERT_TAIL_ (DSB[DSB_Q_QLINKS], NON_AST_QUEUE)	! True if empty
THEN
    SIGNAL_IF_ERROR_ ($WAKE ());

SS$_NORMAL

END;

GLOBAL ROUTINE SMB$SEND_TO_JOBCTL ( %SBTTL 'SEND_RESPONSE'
	STREAM		: REF $LONGWORD,
	REQUEST		: REF $LONGWORD,
	ACCOUNTING,
	CHECKPOINT,
	DEVICE_STATUS	: REF $LONGWORD,
	ERROR		: REF VECTOR
	) =
BEGIN
	PARAMETER_INDEX_ (STREAM, REQUEST, ACCOUNTING, CHECKPOINT,
	    DEVICE_STATUS, ERROR);

!++
!
! FUNCTIONAL DESCRIPTION:
!	Sends a response to the controlling process
!
! INPUT PARAMETERS:
!	STREAM		- Stream number.
!	REQUEST		- [optional] Request being responded to.
!	ACCOUNTING	- [optional] Descriptor of accounting area.
!	CHECKPOINT	- [optional] Descriptor of checkpoint area.
!	DEVICE_STATUS	- [optional] Device status
!	ERROR		- [optional] Counted vector of condition codes.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_NORMAL	- Normal, successful completion.
!	LIB$_INVARG	- Invalid argument.
!
! SIDE EFFECTS:
!	A mailbox message is sent to the controlling process.
!
!--

LOCAL
	DSB		: REF $BBLOCK,
	MSG_SIZE,
	MSG_ADDR	: REF $BBLOCK,
	ACC_SIZE	: INITIAL (0),
	ACC_ADDR,
	CKP_SIZE	: INITIAL (0),
	CKP_ADDR,
	DEV_SIZE	: INITIAL (0),
	ERR_SIZE	: INITIAL (0),
	MAX_SIZE	: INITIAL (0),
	REQ_SIZE	: INITIAL (0)
	;

! Get size of request item
!
IF PARAMETER_PRESENT_ (REQUEST)
THEN
    BEGIN
    REQ_SIZE = 4;
    IF .REQUEST[] EQL SMBMSG$K_START_STREAM
    THEN
	MAX_SIZE = 4;
    END;


! Get size of accounting data.
!
IF PARAMETER_PRESENT_ (ACCOUNTING)
THEN
    STR$ANALYZE_SDESC (.ACCOUNTING, ACC_SIZE, ACC_ADDR);


! Get size of checkpoint data.
!
IF PARAMETER_PRESENT_ (CHECKPOINT)
THEN
    STR$ANALYZE_SDESC (.CHECKPOINT, CKP_SIZE, CKP_ADDR);


! Get size of device status item
!
IF PARAMETER_PRESENT_ (DEVICE_STATUS)
THEN
    DEV_SIZE = 4;


! Get size of error data
!
IF PARAMETER_PRESENT_ (ERROR)
THEN
    ERR_SIZE = .ERROR[0] * 4;


! Compute maximum message size
!
MSG_SIZE =	SMBMSG$S_REQUEST_HEADER		! - message header

		+ SMBMSG$S_ITEM_HEADER		! - request_response item header
		+ .REQ_SIZE			! - request_response size

		+ SMBMSG$S_ITEM_HEADER		! - accounting_data item header
		+ .ACC_SIZE			! - accounting_data size

		+ SMBMSG$S_ITEM_HEADER		! - checkpoint_data item header
		+ .CKP_SIZE			! - checkpoint_data size

		+ SMBMSG$S_ITEM_HEADER		! - device_status item header
		+ .DEV_SIZE			! - device_status size

		+ SMBMSG$S_ITEM_HEADER		! - condition vector item header
		+ .ERR_SIZE			! - condition vector size

		+ SMBMSG$S_ITEM_HEADER		! - maximum streams item header
		+ .MAX_SIZE			! - maximum streams size

		+ 4;				! - trailing 0 longword


! Allocate a DSB and reserve sufficient space for message
!
PSM$ALLOCATE_DSB (DSB, MSG_SIZE);
MSG_ADDR = .DESC_ADDR_ (DSB[DSB_Q_DESC]);


! Request header.
!
MSG_ADDR[SMBMSG$W_REQUEST_CODE] = MSG$_SMBINI;
MSG_ADDR[SMBMSG$B_STRUCTURE_LEVEL] = SMBMSG$K_STRUCTURE_LEVEL;
!*! MSG_ADDR[SMBMSG$B_STRUCTURE_LEVEL] = SMBMSG$K_LEVEL1;
MSG_ADDR[SMBMSG$B_STREAM_INDEX] = .STREAM[];
MSG_ADDR = .MSG_ADDR + SMBMSG$S_REQUEST_HEADER;


! Request status item.
!
IF .REQ_SIZE NEQ 0
THEN
    BEGIN
    MSG_ADDR[SMBMSG$W_ITEM_SIZE] = .REQ_SIZE;
    MSG_ADDR[SMBMSG$W_ITEM_CODE] = SMBMSG$K_REQUEST_RESPONSE;
    MSG_ADDR = .MSG_ADDR + SMBMSG$S_ITEM_HEADER;
    MSG_ADDR[PSM$L_] = .REQUEST[];
    MSG_ADDR = .MSG_ADDR + .REQ_SIZE;
    END;


! Accounting data item
!
IF .ACC_SIZE NEQ 0
THEN
    BEGIN
    MSG_ADDR[SMBMSG$W_ITEM_SIZE] = .ACC_SIZE;
    MSG_ADDR[SMBMSG$W_ITEM_CODE] = SMBMSG$K_ACCOUNTING_DATA;
    MSG_ADDR = .MSG_ADDR + SMBMSG$S_ITEM_HEADER;
    MSG_ADDR = CH$MOVE (.ACC_SIZE, .ACC_ADDR, .MSG_ADDR);
    END;


! Checkpoint data item
!
IF .CKP_SIZE NEQ 0
THEN
    BEGIN
    MSG_ADDR[SMBMSG$W_ITEM_SIZE] = .CKP_SIZE;
    MSG_ADDR[SMBMSG$W_ITEM_CODE] = SMBMSG$K_CHECKPOINT_DATA;
    MSG_ADDR = .MSG_ADDR + SMBMSG$S_ITEM_HEADER;
    MSG_ADDR = CH$MOVE (.CKP_SIZE, .CKP_ADDR, .MSG_ADDR);
    END;


! Device status item.
!
IF .DEV_SIZE NEQ 0
THEN
    BEGIN
    MSG_ADDR[SMBMSG$W_ITEM_SIZE] = .DEV_SIZE;
    MSG_ADDR[SMBMSG$W_ITEM_CODE] = SMBMSG$K_DEVICE_STATUS;
    MSG_ADDR = .MSG_ADDR + SMBMSG$S_ITEM_HEADER;
    MSG_ADDR[PSM$L_] = .DEVICE_STATUS[];
    MSG_ADDR = .MSG_ADDR + .DEV_SIZE;
    END;


! Condition vector item.
!
IF .ERR_SIZE NEQ 0
THEN
    BEGIN
    MSG_ADDR[SMBMSG$W_ITEM_SIZE] = .ERR_SIZE;
    MSG_ADDR[SMBMSG$W_ITEM_CODE] = SMBMSG$K_CONDITION_VECTOR;
    MSG_ADDR = .MSG_ADDR + SMBMSG$S_ITEM_HEADER;
    MSG_ADDR = CH$MOVE (.ERR_SIZE, ERROR[1], .MSG_ADDR);
    END;


! Maximum streams item.
!
IF .MAX_SIZE NEQ 0
THEN
    BEGIN
    MSG_ADDR[SMBMSG$W_ITEM_SIZE] = .MAX_SIZE;
    MSG_ADDR[SMBMSG$W_ITEM_CODE] = SMBMSG$K_MAXIMUM_STREAMS;
    MSG_ADDR = .MSG_ADDR + SMBMSG$S_ITEM_HEADER;
    MSG_ADDR[PSM$L_] = .MAXIMUM_STREAMS;
    MSG_ADDR = .MSG_ADDR + .MAX_SIZE;
    END;


! Trailing zero longword
!
.MSG_ADDR = 0;
MSG_ADDR = .MSG_ADDR + 4;


WRITE_MAILBOX (.DSB, .MSG_ADDR - .DESC_ADDR_ (DSB[DSB_Q_DESC]));

SS$_NORMAL

END;

GLOBAL ROUTINE PSM$WAIT_FOR_NON_AST ( %SBTTL 'WAIT_FOR_NON_AST'
	BUFFER,
	SIZE	: REF $WORD			!*! NOT REFERENCED ???
	) =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!	Waits for work scheduled by an ast-level routine.
!
! INPUT PARAMETERS:
!	BUFFER		- Descriptor of a buffer to receive the paramter block.
!	SIZE		- Word to receive the paramter block size.
!
! IMPLICIT INPUTS:
!	<tbs>		- Work queue header.
!	<tbs>		- Descriptor queue header.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_NORMAL	- Normal successful completion.
!	LIB$_INVARG	- Invalid argument.
!	...		- Any return from LIB$SCOPY_xxxx routines.
!
! SIDE EFFECTS:
!	NONE
!
!--

LOCAL
	DSB : REF $BBLOCK
	;

! Hibernate until there is work to do
!
WHILE REMOVE_HEAD_ (DSB, NON_AST_QUEUE) DO  $HIBER;
DSB = .DSB - $BYTEOFFSET (DSB_Q_QLINKS);

COPY_DX_DX_ (DSB[DSB_Q_DESC], .BUFFER);

PSM$DEALLOCATE_DSB (.DSB);

SS$_NORMAL

END;

ROUTINE READ_MAILBOX ( %SBTTL 'READ_MAILBOX'
	IOB	: REF $BBLOCK
	) : NOVALUE =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!	Queues an ast read to the input mailbox.
!
! INPUT PARAMETERS:
!	IOB		- Address of an Input/Output control block
!
! IMPLICIT INPUTS:
!	IMBX_CHAN	- Input mailbox channel.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_NORMAL	- Normal successful completion.
!	...		- Any QIO system service error.
!
! SIDE EFFECTS:
!	An read I/O is queued.
!
!--

SIGNAL_IF_ERROR_ ($QIO (
    FUNC=IO$_READVBLK,
    CHAN=.IMBX_CHAN,
    IOSB=IOB[IOB_Q_IOSB],
    ASTADR=READ_MAILBOX_AST,
    ASTPRM=.IOB,
    P1=.DESC_ADDR_ (IOB[IOB_Q_BUFFER]),
    P2=.DESC_SIZE_ (IOB[IOB_Q_BUFFER])
	));

SS$_NORMAL

END;

ROUTINE READ_MAILBOX_AST ( %SBTTL 'READ_MAILBOX_AST'
	IOB	: REF $BBLOCK
	) : NOVALUE =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!	Reads a message from the input mailbox and performs basic
!	validity checking.
!
! INPUT PARAMETERS:
!	IOB		- IO area structure, includes IOSB and buffer.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	The message is placed in the message queue.  If user level is
!	waiting for a message a wakeup is scheduled.
!
!--

LOCAL
	DSB:		REF $BBLOCK
	;

BIND
	BUFFER = .DESC_ADDR_ (IOB[IOB_Q_BUFFER]) : $BBLOCK
	;

! Abort if any errors
!
IF NOT .IOB[IOB_W_IO_STATUS]
THEN
    SIGNAL (.IOB[IOB_W_IO_STATUS]);

IF .BUFFER[SMBMSG$B_STREAM_INDEX] GEQU .MAXIMUM_STREAMS
THEN
    BEGIN
    SMB$SEND_TO_JOBCTL (
	%REF (.BUFFER[SMBMSG$B_STREAM_INDEX]),	! Stream number
	%REF (.BUFFER[SMBMSG$W_REQUEST_CODE]),	! Responding to ...
	0,					! No accounting
	0,					! No checkpoint
	0,					! No device status
	UPLIT (1, SMB$_INVSTMNBR)		! Condition vector
	);
    READ_MAILBOX (.IOB);
    RETURN;
    END;


! Copy the message to dynamic memory
!
PSM$ALLOCATE_DSB (DSB);
COPY_R_DX_ (IOB[IOB_W_IO_LENGTH], .DESC_ADDR_ (IOB[IOB_Q_BUFFER]),
		DSB[DSB_Q_DESC]);


! Place in message queue and wake up user if empty
!
IF INSERT_TAIL_ (DSB[DSB_Q_QLINKS], MESSAGE_QUEUE)	! True if empty
THEN
    SIGNAL_IF_ERROR_ ($WAKE ());


! Queue another read from the mailbox.
!
READ_MAILBOX (.IOB);


! Call user AST routine if any
!
IF .MESSAGE_AST_ROUTINE NEQ 0
THEN
    BLISS (.MESSAGE_AST_ROUTINE);

END;

ROUTINE WRITE_MAILBOX ( %SBTTL 'WRITE_MAILBOX'
	DSB	: REF $BBLOCK,
	SIZE
	) : NOVALUE =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!	Queues a message to the output mailbox.
!
! INPUT PARAMETERS:
!	DSB		- Dynamic string block containing the message.
!	SIZE		- True size of message (DSB gives buffer size)
!
! IMPLICIT INPUTS:
!	OMBX_CHAN	- Onput mailbox channel.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	A write I/O is queued.
!
!--


SIGNAL_IF_ERROR_ ($QIO (
    FUNC=IO$_WRITEVBLK,
    CHAN=.OMBX_CHAN,
    P1=.DESC_ADDR_ (DSB[DSB_Q_DESC]),
    P2=.SIZE));

END;

END
ELUDOM
