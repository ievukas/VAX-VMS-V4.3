	.TITLE	BAS$EXTEND_MULP - Extended precision packed decimal mutiply
	.IDENT	/1-003/			; File: BASEMULP.MAR Edit: LB1003

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: BASIC Language Support
;
; ABSTRACT:
;
;    This module accepts two scaled packed decimal values and returns the 
;    correctly rounded (when required) result.  This is done by computing
;    a 62 digit result and than extracting the appropriate digits.
;
; ENVIRONMENT: AST Reentrant
;
; AUTHOR: Bob Hanek, CREATION DATE: 19-JAN-1981
;
; MODIFIED BY:
;
; 1-001	- Original. RNH 01-JAN-1981
; 1-002 - Change name to BAS$EXTEND_MULP and change errors to
;	  Decimal Error.  PLL 12-Feb-1982
; 1-003 - Add code to check value of flags field within BASIC frame
;	  for decimal overflow detection, and feed that info into
;	  the PSW.  LB  14-May-1982
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL		; Force all external symbols to be declared
	.EXTRN	BAS$K_DECERR	; Decimal overflow 
	.EXTRN	BAS$$STOP	; Signal fatal errors
	.EXTRN	BAS$HANDLER	; BASIC condition handler
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
	LOW    = 16
	T1     = 32
	T2     = 48
	T3     = 64
	A1     = 80
	A0     = 92
	B1     = 100
	B10    = 101
	B0     = 112
	DVFLAG = 120
	TOT    = 124
	ONE    = ^X1C	; Packed decimal 1

;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _BAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	BAS$EXTEND_MULP - Extended precision packed multiply
;++
; FUNCTIONAL DESCRIPTION:
;
;    This module accepts two scaled packed decimal values and returns  the 
;    correctly  rounded (when required) result.  This is done by computing
;    a 62 digit result and than  extracting  the  appropriate  digits.  In 
;    particular,  given two packed decimal values A' and B' of know length
;    we extend them to two 31 digit values A and B.  Then let A = A1*10^15
;    + A0  and  B = B1*10^15 +  B0 = (B11*10^15 + B10)*10^15 + B0, where 0 
;    =< A0,  B0,  B10 =< 10^15 - 1,  0=< A1 =< 10^16 - 1  and 0=< B11 =< 9. 
;    Then
; 
;     A*B = (A1*10^15 + A0)*(B1*10^15 + B0)
;         = A1*B1*10^30 + (A1*B0 + A0*B1)*10^15 + A0*B0
;         = A1*(B11*10^15 + B10)*10^30 + (A1*B0 + A0*B1)*10^15 + A0*B0
;         = A1*B11*10^45 + A1*B10*10^30 + (A1*B0 + A0*B1)*10^15 + A0*B0.
;
;    Note that all of the products of the form  An*Bm  have  absolute  value 
;    less than 10^31, so that each product can be exactly computed by a MULP 
;    instruction.
;
;
;
; CALLING SEQUENCE:
;
;	CALL BAS$EXTEND_MULP(A.rp.dsd, B.rp.dsd, C.mp.dsd ,RND_TRUNC.rb.v)
;
; FORMAL PARAMETERS:
;
;	A and B are the scaled decimal source strings
;	C is the scaled decimal result string
;	RND_TRUNC is a flag indicating whether the final answer should be
;	   rounded or truncated.  RND_TRUNC = 5 gives rounded result and
;	   RND_TRUNC = 0 gives truncated result.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	Signals PACKED OVERFLOW	whenever the product is too large to fit in
;	the scaled decimal result operand
;
;--

	.ENTRY BAS$EXTEND_MULP, ^M<R2, R3, R4, R5, R6, R7, R8, R9>	
					; Entry point
;
; Move parameters to registers R6 through R9
;
	MOVQ	4(AP), R6		; Move first two parameters to R6/R7
	MOVQ	12(AP), R8		; Move next two parameter to R8/R9

; REGISTER USAGE:
;
;	R0 Through R5 are reserved for the packed decimal instruction
; 	R6: Pointer to A descripter
; 	R7: Pointer to B descripter
; 	R8: Pointer to C descripter
; 	R9: Round/trun flag
;

;
; Allocate stack storage and turn off decimal overflow reporting.
; Check the setting of the decimal overflow bit in the flags field
; within the BASIC frame.  Use that value to set the PSL decimal
; overflow trap setting (enable or disable).
; 
	SUBL	#TOT, SP		; Allocate 26 longwords on stack
	MOVL	12(FP),R4		; Fetch the saved frame pointer
	MOVAL	G^BAS$HANDLER,R5	; Fetch addr of BASIC handler
	CMPL	0(R4),R5		; Check if this is a BASIC frame
	BEQL	5$			; Branch if a BASIC frame
	BISPSW	#^X80			; Else, set DV bit in PSL
	BRB	15$
5$:	MOVW	-26(R4),R4		; Fetch the flags word
	BICW	#^XFBFF,R4		; Mask out all but DV bit
	TSTW	R4			; Check if DV was set in BASIC frame
	BEQL	10$			; Br if not enabled
	BISPSW	#^X80			; Set DV bit in PSL (logical OR)
	BRB	15$			; Continue as usual
10$:	BICPSW	#^X80			; Clear DV bit in PSL (logical AND)
15$:	MOVPSL	DVFLAG(SP)		; Save current PSL
	BICW	#^XFF7F, DVFLAG(SP)	; Save only decimal overflow bit
	BICPSW	#^X80			; Turn off decimal overflow reporting
;
; Break B into its high and low parts
;
	ASHP	#0, (R7), @4(R7), #0, #31, (SP)	; Extend B to 31 digits
	MOVQ	8(SP), B0(SP)			; Set B0 to low 15 digits of B
	ASHP	#-15, #31, (SP), #0, #16, B1(SP); Set B1 to high 16 digits of B
;
; Break A into its high and low parts
;
	ASHP	#0, (R6), @4(R6), #0, #31, (SP)	; Extend A to 31 digits
	MOVQ	8(SP), A0(SP)			; Set A0 to low 15 digits of A
	ASHP	#-15, #31, (SP), #0, #16, A1(SP); Set A1 to high 16 digits of A
;
; Compute A0*B0 and store in the low digits of the result.
;
 	MULP	#15, A0(SP), #15, B0(SP), #31, LOW(SP)
;
; Compute A0*B1 and store the results in a 31 digit temporary
; 
	MULP	#15, A0(SP), #16, B1(SP), #31,	T1(SP)
;
; Add low 16 digits of A0*B1 to low digits of the result and move the high
; 15 digits of A0*B1 to high digits of the result
;
	ASHP	#15, #31, T1(SP), #0, #31, T2(SP) ; T2 = Lo 16 digits of A0*B1
	ASHP	#-16, #31, T1(SP), #0, #31, (SP)  ; (SP) = Hi 15 digits of A0*B1
	ADDP	#31, T2(SP), #31, LOW(SP)	  ; Add lo 16 digits to lo 
	BVC	1$				  ;   digits of the result and
	ADDP	#1, #ONE, #31, (SP)		  ;   and propagate the carry
;
; Compute A1*B0
;
1$:	MULP	#16, A1(SP), #15, B0(SP), #31, T1(SP)
;
; Add low 16 digits of A1*B0 to low digits of the result and add the high
; 15 digits of A1*B0 to high digits of the result
;
	ASHP	#15, #31, T1(SP), #0, #31, T2(SP) ; T2 = lo 16 digits of A1*B0
	ASHP	#-16, #31, T1(SP), #0, #31, T3(SP); T3 = hi 15 digits of A1*B0
	ADDP	#31, T2(SP), #31, LOW(SP)	  ; Add lo digits to lo digits
	BVC	2$				  ; Branch if no carry 
	ADDP	#1, #ONE, #31, T3(SP)		  ; Propagate carry
2$:	ADDP	#31, T3(SP), #31, (SP)		  ; Add hi digits to hi digits
;
; Compute B11*10^15 and A1*B10
;
	MOVP	#15, B10(SP), T3(SP)		  ; T3 = B10
	SUBP	#15, T3(SP), #16, B1(SP)	  ; B1 = B11*10^15
	MULP	#15, T3(SP), #16, A1(SP), #31, T1(SP)	; T1 = A1*B10
;
; Add low digit of A1*B10 to low digits of result and add high 30 digits of
; A1*B10 to high digits of result.
;
	ASHP	#30, #31, T1(SP), #0, #31, T2(SP) ; T2 = lo digit of A1*B10
	ASHP	#-1, #31, T1(SP), #0, #31, T3(SP) ; T3 = hi 30 digits of A1*B10
	ADDP	#31, T2(SP), #31, LOW(SP)	  ; Add lo digit to lo digits
	BVC	3$				  ; Branch if no carry
	ADDP	#1, #ONE, #31, (SP)		  ; Propagate carry
3$:	ADDP	#31, T3(SP), #31, (SP)		  ; Add hi digits to hi digits
;
; Compute A1*B11*10^14 and add to high digits of result
;
	ASHP	#-1, #16, B1(SP), #0, #15, T3(SP) ; T3 = B11*10^14
	MULP	#15, T3(SP), #16, A1(SP), #31, T1(SP) ; T1 = A1*B11*10^14
	ADDP	#31, T1(SP), #31, (SP)		  ; Add to high digits
;
; Determine the number of place we need to shift the result.
;
	ADDB3	8(R6), 8(R7), R5	; R5 = total # of fraction digits
	SUBB	8(R8), R5		; R5 = # of extra fractional digits
;
; Shift the result the necessary number of digits, round if necessary, and 
; Store the result in the destination operand.
;
	ASHP	R5, #31, LOW(SP), R9, #31, T1(SP) ; T1 = final result lo digits
	ADDB	#31, R5				  ; R5 = shift for high digits
	ASHP	R5, #31, (SP), #0, #31, T2(SP)	  ; T2 = final result hi digits
	ADDP	#31, T1(SP), #31, T2(SP)	  ; T2 = Final result
	BVS	OVERFLOW			  ; Branch if overflow
	ASHP	#0, #31, T2(SP), #0, (R8), @4(R8) ; Store result in destination
	BVS	OVERFLOW			  ; Branch if overflow
RETURN:	BISPSW	DVFLAG(SP)			  ; Restore decimal overflow flag
	ADDL	#TOT, SP			  ; Deallocate stack storage
	RET					  ; Return
;
;
;
OVERFLOW:
	TSTW	DVFLAG(SP)		; Did caller enable Dec ovfl reporting?
	BEQL	RETURN			; Branch if reporting not enabled
	BISPSW	DVFLAG(SP)		; Restore decimal overflow flag
	ADDL	#TOT, SP		; Deallocate stack storage
	PUSHL	#BAS$K_DECERR		; Signal overflow
	CALLS	#1, G^BAS$$STOP		;	
	RET				;


	.END				; End of module BAS$EXTEND_MULP
