MODULE INITAP (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  INIT Utility Structure Level II
!
! ABSTRACT:
!
!	THIS MODULE HANDLES INITIALIZATION OF ANSI MAGNETIC TAPE
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  10-DEC-1977  18:10
!
! MODIFIED BY:
!
!	V03-011	MMD0269		Meg Dumont,	23-Mar-1984  9:19
!		Change the processing of the accessibility character fields
!		in the VOL1 and or HDR1 label to call the installation
!		specific accessibility routine. The return from this
!		routine determines the users access to the volume and/or file.
!
!	V03-009	MMD0237		Meg Dumont,	14-Feb-1984  11:16
!		Change all calls to CLEAR_VALID to a QIO IO$_AVAILABLE.
!		Delete any reference to SET_VALID.
!
!	V03-008 MCN0140		Maria del C. Nasr	30-Nov-1983
!		Define LABEL_STRING as BBLOCK descriptor and use
!		descriptor offsets to find length.
!
!	V03-007	MMD0180		Meg Dumont,	26-May-1983  15:15
!		Change VOL1 to indicate ANSI level 4 when writing a SYSTEM
!		CODE in the VOL1 label.
!
!	V03-006	STJ3091		Steven T. Jeffreys,	27-Apr-1983
!		Added support for /[NO]ERASE.
!
!	V03-005	MMD0133		Meg Dumont,	12-Apr-1983  17:20
!		Turn on support for writing the VOL1 OWNER IDENTIFIER
!		field so that it is now a nonVMS field. Add support
!		for the underscore as a valid character to tape.
!
!	V03-004	MMD0127		Meg Dumont,	1-Apr-1983  14:13
!		Fix to the temp fix
!
!	V03-003	MMD0126		Meg Dumont,	1-Apr-1983  13:28
!		Temp take out references to VOL_OWNER
!
!	V03-002	MMD0117		Meg Dumont,	29-Mar-1983  0:42
!		Add support for new VMS protection. Means writing a 
!		VOL2 label to the tape when a VMS protection is specified
!
!	V03-001	MMD0001		Meg Dumont,	13-Aug-1982  13:11
!		Change from call to SET_VALID to QIO IO$_PACKACK
!
!	V02-013 DMW0018		David Michael Walp	 2-Mar-1982
!		Another correction for the volume invalid problem
!
!	V02-012 DMW0016		David Michael Walp	18-Dec-1981
!		Increase Transtable size to 256
!
!	V02-011 DMW0011		David Michael Walp	21-Aug-1981
!		Correct override typo and new Tape_Own_Prot and 
!		/LABEL for /ANSI
!
!	V02-010 DMW0010		David Michael Walp	18-Jun-1981
!		Cleaned up defaulting of density.
!
!	V02-009 DMW0009		David Michael Walp	19-May-1981
!		Placed Volume Id into the File Set Id of the 'Dummy File'
!
!	V02-008 DMW0008		David Michael Walp	1-May-1981
!		Upcased Volume label and check for illegal ( non ANSI 'a'
!		characters )
!
!       V02-007 DMW0006		David Michael Walp	25-Apr-1981
!		Created routine SET_CHARACTER ( reset parity and
!		format )
!
!       V02-006 DMW0004		David Michael Walp	9-Apr-1981
!		Added switch '/ANSI=VOLUME_ACCESSIBILITY:"x"'
!		Fixed bugs with overide switches and error returns
!		Created FORMAT_VOL1 from old and new code
!		Reformated module
!
!       V02-005 DMW0001		David Michael Walp	10-Dec-1980
!		Replace Check_Prot procedure. Old procedure was
!		confused by the fact that init was installed with sysprv
!		for version 2.
!
!	V02-004	RLRDENS		Robert L. Rappaport	8-Oct-1980
!		At the same time that /DENSITY=1 and /DENSITY=2 support
!		is being added to INITIALIZE, we correct the problem
!		of INITIALIZE returning SS$_VOLINV when the INITIALIZE
!		follows a DISMOUNT/NOUNLOAD in a command procedure.
!
!	V02-003	MCN0001		Maria del C. Nasr,	20-Jun-1980  15:10
!		Change DECFILE112 to DECFILE11A in HDR1, and eliminate binary
!		data from HDR2.  This is part of the implementation of HDR3.
!
!	V0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  21:27
!		Previous revision history moved to [INIT.SRC]INIT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:INIDEF.B32';
REQUIRE 'LIBD$:[VMSLIB.OBJ]INITMSG.B32';

FORWARD ROUTINE
	CHECK_PROT,				! check volume protection
	DEFAULT_CHAR    : NOVALUE,		! set default characteristic
						!   of tape drive
	FORMAT_VOL1_VOL2,			! format the VOL1 and VOL2 label
	INIT_TAPE	: NOVALUE,		! main control for tape init
	READ_VOLLABELS	: NOVALUE,		! read & verify VOL1 & HDR1 
						!  ANSI labels
	SET_DENSITY	: NOVALUE;		! set the density of the drive

EXTERNAL ROUTINE
	CALDAYNO,				! calculate day number ( chop
						!  hour min sec from binary )
	CONVDATE_J2R,				! convert date ANSI tape JULIAN
						!  to VMS
	CONVDATE_R2J,				! convert VMS date to ANSI 
						!  JULIAN format on tape
	GET_CHANNELUCB,				! Given channel number get assoc UCB
	GET_RECORD,				! get current record drive is reading
!	WRITE_USER_UVL,				! write user volume labels
	FORMAT_VOLOWNER	: NOVALUE,		! format volume owner field
	LIB$CVT_OTB	: ADDRESSING_MODE(ABSOLUTE),
	PROCESS_VOL2_LABEL,			! process the VOL2 label
	TAPE_OWN_PROT;				! determine protection and
						!  owner of tape

EXTERNAL
	CHANNEL,				! channel of volume 
	CTL$GQ_PROCPRIV	: REF BBLOCK ADDRESSING_MODE(ABSOLUTE),
	INIT_OPTIONS	: BITVECTOR,		! init option bits
	LABEL_STRING	: BBLOCK [DSC$C_S_BLN],	! label descriptor 
	OWNER_UIC,				! value of owner switch
	PROCESS_UIC,				! process uic
	PROTECTION,				! value of protection switch
	VOL_ACC		: BYTE,			! value of label:volume switch
	VOL_OWNER	: VECTOR [14,BYTE];	! value of owner id field

BIND
	STARID = UPLIT ('DECFILE11A');		! Set the value for VOL1 syscode
OWN
	ANSI_LABEL	: BBLOCK [80],		! ANSI label
	IO_STATUS	: VECTOR [4,WORD],	! I/O status 
	PRIVILEGE_MASK	: REF BBLOCK,		! process privilege mask
	VOLUME_PROT,				! protection for tape
	VOLUME_UIC,				! owner of tape
	ACCESS,					! users's access to magnetic tape
	CURRENT_RECORD,				! Tape record before call to $MTACCESS
	LABEL_VER,				! ANSI label version decimal value
	UCB		: REF BBLOCK,		! UCB address
	CHAR		: VECTOR [4,BYTE],	! Char to output for tape accessibility
	VOL1		: BLOCK [80,BYTE]
			INITIAL(BYTE ( 'VOL1',	! VOL1 skeleton
			REP 75 OF BYTE(' '),
			'3')),

	VOL2		: BLOCK [80,BYTE]
			INITIAL(BYTE ( 'VOL2',	! VOL2 skeleton
			'D%C',
			REP 73 OF BYTE (' '))),
	
	HDR1		: BLOCK [80,BYTE]
			INITIAL (BYTE ('HDR1',	! HDR1 skeleton
			REP 23 OF BYTE (' '),
			REP 3 OF BYTE ('0'),
			'1',
			REP 7 OF BYTE ('0'),
			'100',
			REP 13 OF BYTE(' '),
			REP 6 OF BYTE('0'),
			'DECFILE11A  ',
			REP 8 OF BYTE(' '))),


	HDR2		: BLOCK[80,BYTE]
			INITIAL (BYTE('HDR2',	! HDR2 skeleton
			'F',
			REP 10 OF BYTE('0'),
			REP 35 OF BYTE(' '),
			'00',
			REP 28 OF BYTE(' ')));


GLOBAL ROUTINE INIT_TAPE : NOVALUE  =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is the main control for tape initialization.  If the
!	current tape is a valid files_11 ANSI tape, then the user must have
!	write privileges or be the owner of the tape.  If the first file has
! 	not expired, then the user must specify override expiration date and
!	have the privilege to do so.   On new tapes the user must specify 
!	to overide both the expiration date and accessilibity char in VOL1
!	and HDR1 and have VOLPRO priv to avoid the run away tape condition.
!
! CALLING SEQUENCE:
!	INIT_TAPE()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CLI parser database
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	FILES-11 structure level II ansi magnetic tape initialized
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--

BEGIN

LOCAL
	DESCR		: VECTOR [2],		! descriptor
	STATUS,					! system service status
	TODAY		: VECTOR [12,BYTE],	! buffer for today's date
	VMS_PROT;				! VMS protection was specified

EXTERNAL ROUTINE
	ERASE_BLOCKS;				! erase the tape

BIND
	SECONDS = UPLIT (-10000000,-1);		! 1 second in 100 nsec units


! The following note is left for historical reasons only!
!******************************************************************************
! Here we have inserted a single QIO (IO$_REWIND) which apparently is not
!  needed but which in fact is here to take care of an anomaly that
!  sometimes occurs when the INITIALIZE command appears in a command file
!  immediately following a DISMOUNT/NOUNLOAD command.
!
!  Under certain circumstances the INITIALIZE fails with a SS$_VOLINV status.
!  The problem is due to a complicated interaction involving QIO dispatching
!  logic, the MAGTAPE ACP, and the INITIALIZE command.  What occurs is the
!  following.
!
!  DISMOUNT, before finishing issues a $QIOW with an I/O function code of
!  IO$_ACPCONTROL!IO$M_DMOUNT.  This request is forwarded to the ACP and
!  DISMOUNT then has its image rundown.
!
!  The ACP then issues a $QIOW with a function code of IO$_REWIND!IO$M_NOWAIT,
!  while in parallel, INITIALIZE is starting up and it proceeds to set the
!  UCB$M_VALID bit in UCB$W_STS (which in this case was still on due to the
!  volume previously having been mounted) and then INITIALIZE issues its own
!  $QIOW with an IO$_REWIND funciton code.
!
!  In some instances, the ACP's REWIND QIO does not get as far as REQCOM
!  until after INITIALIZE's REWIND has been queued.  If this occurs, INIT's
!  queued REWIND is started up before the ACP actually regains control and
!  the driver has no trouble since it finds the UCB$M_VALID bit still on.
!  Unfortunately, as since as the ACP regains control, following the
!  driver's WFIKPCH, the ACP clears the UCB$M_VALID bit.  The next QIO
!  issued by INITIALIZE will fail due to the absence of the UCB$M_VALID
!  bit.
!
!  The solution (pronounced KLUDGE) herein implemented, simply inserts an extra
!  single $QIOW with IO$_REWIND function code, surrounded by explicit
!  settings of the UCB$M_VALID bit, before the real logic of INITIALIZE begins.
!  This $QIOW allows the above potential interaction to occur, and after it is
!  finished, we again set the UCB$M_VALID bit on.
!
!******************************************************************************
! 
! The above is no longer true; that is we have elimentated the race condition
! mentioned above by not doing issuing the rewind at dismount time
! but infact marking the drive available. The following IO's mark
! the volume valid then issue the rewind, which is neccesary because
! of the preMSCP drivers will not rewind on this function. The MSCP drivers
! will and the second IO here becomes an NOP.

STATUS = $QIOW(
	CHAN = .CHANNEL,
	FUNC = IO$_PACKACK,
	IOSB = IO_STATUS[0]);

STATUS = $QIOW(
	CHAN = .CHANNEL,
	FUNC = IO$_REWIND,
	IOSB = IO_STATUS[0]);

! wait 10 seconds before giving up

INCR J FROM 0 TO 9 DO
    BEGIN
    STATUS = $QIOW(
		CHAN = .CHANNEL,
		FUNC = IO$_PACKACK,
		IOSB = IO_STATUS[0]);
    STATUS = $QIOW(	CHAN = .CHANNEL,
			FUNC = IO$_REWIND,
			IOSB = IO_STATUS);
    IF .STATUS THEN STATUS = .IO_STATUS[0];
    IF .STATUS NEQ SS$_MEDOFL AND .STATUS NEQ SS$_VOLINV THEN EXITLOOP;
    IF $SETIMR( DAYTIM = SECONDS, EFN = 0)
    THEN $WAITFR( EFN = 0);
    END;

! all rewind errors reported to user

IF NOT .STATUS THEN ERR_EXIT(.STATUS);

! set the VMS default tape drive characteristics

DEFAULT_CHAR();

! check user access to rewrite ( DESTROY ) the tape

PRIVILEGE_MASK = CTL$GQ_PROCPRIV;		! process privilege mask

! Get the UCB associated with this channel

UCB = KERNEL_CALL(GET_CHANNELUCB,.CHANNEL);

! The following check is here so that the operators has the ability
! to bypass the first read to magnetic tape. This should be
! used only when the magnetic tape is a blank tape. Blank tapes
! are prone to run away conditions especially on some of the older
! tape drives.

IF NOT (.INIT_OPTIONS[OPT_OVR_EXP]       	! bypass all protection if
AND .INIT_OPTIONS[OPT_OVR_ACC]			! overide expiration and access
AND .INIT_OPTIONS[OPT_OVR_VOLO]			! characters, volume owner,
AND .PRIVILEGE_MASK[PRV$V_VOLPRO]		! and volpro 
AND .PRIVILEGE_MASK[PRV$V_OPER])		! and oper
THEN
    BEGIN
    READ_VOLLABELS();				! is it an ANSI tape

! If ACCESS is clear then we must give the user access to the tape
! regardless of what the VMS protection specifies.

    IF .ACCESS
	THEN
	   BEGIN
	    	IF (
		   (.INIT_OPTIONS[OPT_OVR_EXP]	    	! does user have privilege 
		   OR .INIT_OPTIONS[OPT_OVR_VOLO])	! or volume owner
		   AND NOT (.PRIVILEGE_MASK[PRV$V_VOLPRO] ! ( volpro priv or 
		   OR .VOLUME_UIC EQL .PROCESS_UIC)	! owner of the tape )
		   )
	         OR
		   (
		   NOT KERNEL_CALL (CHECK_PROT, .VOLUME_PROT, .VOLUME_UIC)
		    )					! does user have VMS write priv
	            THEN ERR_EXIT(SS$_NOPRIV);
	    END;
    END;


! set default version number to 3, and format the volume label. Please
! note that if we write a VMS protectionon this tape then the LABEL_VER
! is set to 4, inside FORMAT_VOL1_VOL2.

LABEL_VER = 3;
VMS_PROT = (FORMAT_VOL1_VOL2 ());


! default expiration and creation dates to today's date for HDR1

DESCR[0] = 11;
DESCR[1] = TODAY;
$ASCTIM(TIMBUF = DESCR);
CONVDATE_R2J(TODAY,HDR1[HD1$T_CREATEDT]);
CH$MOVE(HD1$S_CREATEDT,HDR1[HD1$T_CREATEDT],HDR1[HD1$T_EXPIREDT]);

! Call the accessibility system service to get the character to output.
! First keep the record that the UCB is reading. The accessibility 
! routine can not move the tape from under us! Thus we will compare
! this to the field after the call and if the tape was moved we punt
! the operation. 

CURRENT_RECORD = KERNEL_CALL(GET_RECORD,.UCB);

CHAR = $MTACCESS(LBLNAM = 0,
		 UIC = .PROCESS_UIC,
		 STD_VERSION = .LABEL_VER,
		 ACCESS_CHAR = 0,
		 ACCESS_SPEC = MTA$K_NOCHAR,
		 TYPE = MTA$K_OUTHDR1);

STATUS = KERNEL_CALL(GET_RECORD,.UCB);
IF .CURRENT_RECORD NEQ .STATUS
   THEN ERR_EXIT(SS$_TAPEPOSLOST);

HDR1[HD1$B_FILACCESS] = .CHAR[0];

! write the file set id from the volume label, the MOUNT will place it
!   in the MVL and the MTAACP will use it as the FILE SET ID
! move must be done after VOL1 has been set up, because Legal ANSI 'a'
!   character check is in FORMAT_VOL1_VOL2

CH$MOVE ( VL1$S_VOLLBL, VOL1[VL1$T_VOLLBL], HDR1[HD1$T_FILESETID] );

! rewind the tape

STATUS = $QIOW(
	CHAN = .CHANNEL,
	FUNC = IO$_REWIND,
	IOSB = IO_STATUS[0]);

IF .STATUS THEN STATUS = .IO_STATUS[0];	! report problems to user
IF NOT .STATUS THEN ERR_EXIT(.STATUS);


! set tape density if users has used /DENSITY qualifier

IF .INIT_OPTIONS [OPT_DENSITY] THEN SET_DENSITY ();


! If the user requested it, erase the tape.  This function is only valid
! for the TU78 and MSCP tapes drives.  All others will return SS$_ILLIOFUNC
! to indicate that the hardware feature is not supported.  Notify the user
! if the erase did not happen.  The operation of the erase is for the controller
! to scribble on the tape starting from the current position and continuing to
! the EOT mark, then rewinding to the BOT mark.

IF .INIT_OPTIONS [OPT_ERASE]
THEN
    BEGIN
    IF (STATUS = EXEC_CALL (ERASE_BLOCKS, 0, 1, .CHANNEL))
    THEN
	STATUS = .IO_STATUS[0];
    IF NOT .STATUS
    THEN
	ERR_MESSAGE (INIT$_ERASEFAIL, 0, .STATUS);
    END;


! now write VOL1 (UVL) HDR1 HDR2 ** EOF1 EOF2 **  in other words the volume 
! label and a dummy empty file ( so the label set are complete )

STATUS = $QIOW(
	CHAN = .CHANNEL,
	IOSB = IO_STATUS[0],
	FUNC = IO$_WRITELBLK,
	P1 = VOL1,
	P2 = 80);
IF .STATUS THEN STATUS = .IO_STATUS[0];
IF NOT .STATUS THEN ERR_EXIT(.STATUS);

! If this is not a tape for interchange and the user has requested VMS
! protection on the tape. Then write a VOL2 label after the VOL1 label.

IF NOT .INIT_OPTIONS[OPT_INTERCHG] AND .VMS_PROT NEQ 0
   THEN
   STATUS = $QIOW ( CHAN = .CHANNEL,
		    IOSB = IO_STATUS[0],
		    FUNC = IO$_WRITELBLK,
		    P1 = VOL2,
		    P2 = 80);
IF .STATUS THEN STATUS = .IO_STATUS;
IF NOT .STATUS THEN ERR_EXIT(.STATUS);


! Give the user the opportunity to write the user volume labels, the first
! 3 characters of which must be 'UVL'.  They should not be longer than 80 char-
! acters

!STATUS = WRITE_USER_UVL();
!IF NOT .STATUS THEN ERR_EXIT(.STATUS);

STATUS = $QIOW(					! HDR1
	CHAN = .CHANNEL,
	IOSB = IO_STATUS[0],
	FUNC = IO$_WRITELBLK,
	P1 = HDR1,
	P2 = 80);
IF .STATUS THEN STATUS = .IO_STATUS[0];
IF NOT .STATUS THEN ERR_EXIT(.STATUS);

STATUS = $QIOW(					! HDR2
	CHAN = .CHANNEL,
	IOSB = IO_STATUS[0],
	FUNC = IO$_WRITELBLK,
	P1 = HDR2,
	P2 = 80);
IF .STATUS THEN STATUS  = .IO_STATUS[0];
IF NOT .STATUS THEN ERR_EXIT(.STATUS);

STATUS = $QIOW(					! Tape Mark
	CHAN = .CHANNEL,
	IOSB = IO_STATUS[0],
	FUNC = IO$_WRITEOF);
IF .STATUS THEN STATUS = .IO_STATUS[0];
IF NOT .STATUS THEN ERR_EXIT(.STATUS);

STATUS = $QIOW(					! Tape Mark
	CHAN = .CHANNEL,
	IOSB = IO_STATUS[0],
	FUNC = IO$_WRITEOF);
IF .STATUS THEN STATUS = .IO_STATUS[0];
IF NOT .STATUS THEN ERR_EXIT(.STATUS);

HDR1[HD1$L_HD1LID] = 'EOF1';			! format trailers
HDR2[HD2$L_HD2LID] = 'EOF2';

STATUS = $QIOW(					! EOF1
	CHAN = .CHANNEL,
	IOSB = IO_STATUS[0],
	FUNC = IO$_WRITELBLK,
	P1 = HDR1,
	P2 = 80);
IF .STATUS THEN STATUS = .IO_STATUS[0];
IF NOT .STATUS THEN ERR_EXIT(.STATUS);
STATUS = $QIOW(					! EOF2
	CHAN = .CHANNEL,
	IOSB = IO_STATUS[0],
	FUNC = IO$_WRITELBLK,
	P1 = HDR2,
	P2 = 80);
IF .STATUS THEN STATUS = .IO_STATUS[0];
IF NOT .STATUS THEN ERR_EXIT(.STATUS);
STATUS = $QIOW(					! Tape Mark
	CHAN = .CHANNEL,
	IOSB = IO_STATUS,
	FUNC = IO$_WRITEOF);
IF .STATUS THEN STATUS = .IO_STATUS[0];
IF NOT .STATUS THEN ERR_EXIT(.STATUS);
STATUS = $QIOW(					! Tape Mark
	CHAN = .CHANNEL,
	IOSB = IO_STATUS,
	FUNC = IO$_WRITEOF);
IF .STATUS THEN STATUS = .IO_STATUS[0];
IF NOT .STATUS THEN ERR_EXIT(.STATUS);

STATUS = $QIOW(
	CHAN = .CHANNEL,
	IOSB = IO_STATUS,
	FUNC = IO$_REWIND);
IF .STATUS THEN STATUS = .IO_STATUS[0];
IF NOT .STATUS THEN ERR_EXIT(.STATUS);

STATUS = $QIOW(
	CHAN = .CHANNEL,
	FUNC = IO$_AVAILABLE,
	IOSB = IO_STATUS[0]);
RETURN 1;
END;						! end of routine INIT_TAPE

ROUTINE DEFAULT_CHAR : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the tape drive default characteristics.
!
! CALLING SEQUENCE:
!	DEFAULT_CHAR ();
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CHANNEL		- the I/O channel of the tape drive
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	IO_STATUS	- set to the return status of the QIO
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
! USER ERRORS:
!	NONE
!
!--

BEGIN

LITERAL
	ODD_PARITY	= 0;

LOCAL
	CHARACTERISTIC	: VECTOR [4,WORD],	! characteristics to set
	STATUS;

BIND
	!  Set up offsets into the characteristics buffer
	!
	FORMAT		= CHARACTERISTIC[2] : BBLOCK,
	PARITY		= CHARACTERISTIC[2] : BBLOCK,
	BUFFER_SIZE	= CHARACTERISTIC[1] : WORD,
	DENSITY		= CHARACTERISTIC[2] : BBLOCK;

CHARACTERISTIC[0]= CHARACTERISTIC[1]= CHARACTERISTIC[2]= CHARACTERISTIC[3]= 0;

! Now set density
!
DENSITY[MT$V_DENSITY] = MT$K_PE_1600;

! Parity set to odd, we only support 9-tracks and 9-tracks are always odd
!
PARITY [ MT$V_PARITY ] = ODD_PARITY;

! Reset Tape format to FILES-11 ( only supported format )
!
FORMAT [ MT$V_FORMAT ] = MT$K_NORMAL11;

! Set the buffer size to ANSI max ( VMS default )
!
BUFFER_SIZE = 2048;

! write the characteristics to the tape drive
!
STATUS = $QIOW (CHAN = .CHANNEL,
		IOSB = IO_STATUS,
		FUNC = IO$_SETMODE,
		P1 = CHARACTERISTIC);
IF .STATUS THEN STATUS = .IO_STATUS[0];
IF NOT .STATUS THEN ERR_EXIT (.STATUS);

END;					! end of routine DEFAULT_CHAR

ROUTINE SET_DENSITY : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the density of the tape drive.
!
! CALLING SEQUENCE:
!	SET_DENSITY ();
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CHANNEL		- the I/O channel of the tape drive
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	IO_STATUS	- set to the return status of the QIO
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
! USER ERRORS:
!	NONE
!
!--

BEGIN

LOCAL
	CHARACTERISTIC	: VECTOR [4,WORD],	! characteristics to set
	STATUS;

BIND
	!  Set up offsets into the characteristics buffer
	!
	BUFFER_SIZE	= CHARACTERISTIC[1] : WORD,
	DENSITY		= CHARACTERISTIC[2] : BBLOCK;


! read the characteristics of the tape drive 
!
STATUS = $QIOW (CHAN = .CHANNEL,
		IOSB = CHARACTERISTIC,
		FUNC = IO$_SENSEMODE);
IF .STATUS THEN STATUS = .CHARACTERISTIC[0];
IF NOT .STATUS THEN ERR_EXIT (.STATUS);

! Set up the buffer to hold the new characteristics.  Get the device
!  independent stuff from the 2nd long word of IO_STATUS, use the default
!  buffersize and zero the notused field
!
CHARACTERISTIC [ 0 ] = 0;
BUFFER_SIZE	     = 2048;

! Now set density to what the user specified.
!
IF .INIT_OPTIONS[OPT_DENS_800]
  THEN DENSITY[MT$V_DENSITY] = MT$K_NRZI_800
  ELSE
    IF .INIT_OPTIONS[OPT_DENS_1600]
      THEN DENSITY[MT$V_DENSITY] = MT$K_PE_1600
      ELSE DENSITY[MT$V_DENSITY] = MT$K_GCR_6250;

! write the characteristics to the tape drive
!
STATUS = $QIOW (CHAN = .CHANNEL,
		IOSB = IO_STATUS,
		FUNC = IO$_SETMODE,
		P1 = CHARACTERISTIC);
IF .STATUS THEN STATUS = .IO_STATUS[0];
IF NOT .STATUS THEN ERR_EXIT (.STATUS);

END;					! end of routine SET_DENSITY

ROUTINE READ_VOLLABELS : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	this routine reads the first block on the magnetic tape and
!	checks if it is an ANSI tape.  If it is, it then reads the
!	HDR1 record to determine if the first file on the tape has expired.
!
! CALLING SEQUENCE:
!	READ_VOLLABELS()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	channel - channel number assigned to device being initialized
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	VOLUME_UIC 	- owner of tape
!	VOLUME_PROT	- tape protection
!	ACCESS		- users' access to a magnetic tape volume is set
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--

BEGIN

LOCAL
	DATE		: VECTOR [2],		! binary date
	DESCR		: VECTOR [2],		! descriptor for today buffer
	REGDATE		: VECTOR [12,BYTE],	! buffer for date in format
						!  DD_MMM_YYYY
	STATUS,					! system service status
	TODAY		: VECTOR [12,BYTE],
	VMS_TAPE	: BITVECTOR [1];	! set if the VOL1 sys code is VMS

! read first block on tape and check status

STATUS = $QIOW(
	CHAN = .CHANNEL,
	FUNC = IO$_READLBLK,
	IOSB = IO_STATUS,
	P1 = ANSI_LABEL,
	P2 = 80);
IF .STATUS THEN STATUS = .IO_STATUS[0];

! set up default volume owner and protection, which is the current users UIC
!   and read write allowed.  This will be reset by TAPE_OWN_PROT if this is
!   a VAX/VMS tape

VOLUME_UIC  = .PROCESS_UIC;
VOLUME_PROT = 0;


! if first record is Tape Mark then not ANSI tape
! if label is more than 80 characters ignore those characters beyond 80

IF (NOT .STATUS) AND (.STATUS NEQ SS$_DATAOVERUN)
THEN
    BEGIN
   
    ! if this is a new tape, the default density may have been changed
    ! by the QIO failure

    IF .STATUS EQL SS$_OPINCOMPL 
    THEN
	BEGIN
	
	! tape must be at begining ( no reads to set density )

	STATUS = $QIOW(	CHAN = .CHANNEL,
			FUNC = IO$_REWIND,
			IOSB = IO_STATUS);
	IF .STATUS THEN STATUS = .IO_STATUS[0];
	IF NOT .STATUS THEN ERR_EXIT (.STATUS);

	DEFAULT_CHAR ();
	END;
	
    RETURN 1;
    END;

! now check if first block is VOL1, foreign

IF .ANSI_LABEL[VL1$L_VL1LID] NEQ 'VOL1' THEN RETURN 1;

! Get the ANSI standard version off the tape.

LABEL_VER = .ANSI_LABEL[VL1$B_LBLSTDVER] - '0';

! Call the accessibility system service to check the accessibility char
! on the VOL1 label.
! First keep the record that the UCB is reading. The accessibility 
! routine can not move the tape from under us! Thus we will compare
! this to the field after the call and if the tape was moved we punt
! the operation. 

CURRENT_RECORD = KERNEL_CALL(GET_RECORD,.UCB);

ACCESS = $MTACCESS(LBLNAM = ANSI_LABEL,
		 UIC = .PROCESS_UIC,
		 STD_VERSION = .LABEL_VER,
		 ACCESS_CHAR = 0,
		 ACCESS_SPEC = MTA$K_NOCHAR,
		 TYPE = MTA$K_INVOL1);

STATUS = KERNEL_CALL(GET_RECORD,.UCB);
IF .CURRENT_RECORD NEQ .STATUS
   THEN ERR_EXIT(SS$_TAPEPOSLOST);

! Now check the ACCESS returned from the service. For SS$_FILACCERR
! check to make sure /OVERRIDE=ACCESS was specified and the user
! has privilege then set to check VMS protection. 
! For SS$_NOFILACC, SS$_NOVOLACC return the code
! to the user. In this case the user has no access to the tape volume.
! For a 0 give the user all access. For SS$_NORMAL check the VMS
! protection.

IF .ACCESS EQL SS$_NOVOLACC
   OR .ACCESS EQL SS$_NOFILACC
	THEN ERR_EXIT(.ACCESS);

IF .ACCESS EQL SS$_FILACCERR
   THEN
	BEGIN
	   IF NOT .INIT_OPTIONS[OPT_OVR_ACC]
		THEN ERR_EXIT(.ACCESS);
	   IF NOT .PRIVILEGE_MASK[PRV$V_VOLPRO]
		THEN ERR_EXIT(.ACCESS);
	   ACCESS = SS$_NORMAL;
	END;


! Determine owner and VMS protection of the tape. If not VMS protected
! and pre ANSI version 4 and a DEC operating system wrote the tape
! then the user must override the owner id field.

STATUS = TAPE_OWN_PROT(VOLUME_UIC, VOLUME_PROT, .PROCESS_UIC, ANSI_LABEL);

! If ACCESS allows see if user has VMS privilege to init the volume.
! Also set the VOLUME_PROT accordingly.

IF .ACCESS 
   THEN
	BEGIN
	   IF NOT .STATUS AND NOT .INIT_OPTIONS[OPT_OVR_VOLO] 
	   THEN ERR_EXIT(SS$_VOLOERR);
	END
   ELSE
	VOLUME_PROT = 0;

! check to see if the VOL1 system code is VMS's if it isn't then we don't
! process the VOL2 label.

IF CH$EQL(10,STARID,10,ANSI_LABEL[VL1$T_SYSCODE],0)
   THEN VMS_TAPE = 1
   ELSE VMS_TAPE = 0;

! first record on tape is VOL1.  Now read HDR1 and determine if first
! file has expired.  User volume labels may intervene.

WHILE 1 DO
    BEGIN
    STATUS = $QIOW(
	CHAN = .CHANNEL,
	FUNC = IO$_READLBLK,
	IOSB = IO_STATUS[0],
	P1 = ANSI_LABEL,
	P2 = 80);
    IF .STATUS THEN STATUS = .IO_STATUS[0];
    IF NOT .STATUS THEN
	IF .STATUS NEQ SS$_DATAOVERUN THEN RETURN 0;	! ANSI tape, but can't 
							! read HDR1 
    ! If the sys code of the VOL1 label indicates that this is a VMS tape
    ! and we find a VOL2 label then process the label.

    IF .VMS_TAPE AND .ANSI_LABEL[VL2$L_VL2LID] EQL 'VOL2'
	THEN
	   BEGIN
		PROCESS_VOL2_LABEL (VOLUME_UIC, VOLUME_PROT, .PROCESS_UIC, 
				    ANSI_LABEL);
		IF NOT .ACCESS THEN VOLUME_PROT= 0;
	   END;
    IF .ANSI_LABEL[HD1$L_HD1LID] EQL 'HDR1' THEN EXITLOOP;
    END;

! test if the first file on the tape has expired
! convert the JULIAN date on the tape to a VMS date

IF CONVDATE_J2R(REGDATE,ANSI_LABEL[HD1$T_EXPIREDT]) 
THEN
    BEGIN
    DESCR[0] = 12;				! set up the descriptor
    DESCR[1] = REGDATE;
    REGDATE[11] = ' ';
    $BINTIM(TIMBUF = DESCR,TIMADR = DATE);	! convert from ASCII to binary
    $GETTIM(TIMADR = TODAY);			! get today's date in binary
    CALDAYNO(DATE,TODAY);			! chop off hours min and sec
    END
ELSE DATE = TODAY = 0; 				! when all else fails

IF (.DATE GTRU .TODAY) AND NOT (.INIT_OPTIONS[OPT_OVR_EXP])
    THEN ERR_EXIT (SS$_FILNOTEXP);

! Call the accessibility system service to check the accessibility char
! on the HDR1 label.
! First keep the record that the UCB is reading. The accessibility 
! routine can not move the tape from under us! Thus we will compare
! this to the field after the call and if the tape was moved we punt
! the operation. 

CURRENT_RECORD = KERNEL_CALL(GET_RECORD,.UCB);

ACCESS = $MTACCESS(LBLNAM = ANSI_LABEL,
		 UIC = .PROCESS_UIC,
		 STD_VERSION = .LABEL_VER,
		 ACCESS_CHAR = 0,
		 ACCESS_SPEC = MTA$K_NOCHAR,
		 TYPE = MTA$K_INHDR1);

STATUS = KERNEL_CALL(GET_RECORD,.UCB);
IF .CURRENT_RECORD NEQ .STATUS
   THEN ERR_EXIT(SS$_TAPEPOSLOST);

! Now check the ACCESS returned from the service. For SS$_FILACCERR
! check to make sure /OVERRIDE=ACCESS was specified and the user
! has privilege. For SS$_NOFILACC, SS$_NOVOLACC return the code
! to the user. In this case the user has no access to the tape volume.
! For a 0 give the user all access. For SS$_NORMAL check the VMS
! protection (whatever that means for files? maybe something in the 
! future).

IF .ACCESS EQL SS$_NOVOLACC
   OR .ACCESS EQL SS$_NOFILACC
	THEN ERR_EXIT(.ACCESS);

IF .ACCESS EQL SS$_FILACCERR
   THEN
	BEGIN
	   IF NOT .INIT_OPTIONS[OPT_OVR_ACC]
		THEN ERR_EXIT(.ACCESS);
	   IF NOT .PRIVILEGE_MASK[PRV$V_VOLPRO]
		THEN ERR_EXIT(.ACCESS);
	   ACCESS = SS$_NORMAL;
	END;


RETURN 0;				! valid to rewrite the ANSI TAPE
END;					! end of routine READ_VOLLABLES

ROUTINE CHECK_PROT(VOL_PROT,VOL_UIC)  =

!++
!
! FUNCTIONAL DESCRIPTION:
!	this routine check volume protection
!
! CALLING SEQUENCE:
!	CHECK_PROT(ARG1,ARG2)
!
! INPUT PARAMETERS:
!	ARG1 - volume protection
!	ARG2 - volume owner UIC
!
! IMPLICIT INPUTS:
!	PROCESS_UIC	- UIC of the current process
!	PRIVILEGE_MASK	- mask of privileges that the user has
!	INIT_OPTIONS	- init options bitvector
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	SS$NORMAL - if users has the needed priviledges
!       SS$NOPRIV - if users does not have the needed priviledges
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--

BEGIN

MAP
	PROCESS_UIC	: VECTOR [ 2, WORD ],  ! the process UIC
	VOL_PROT	: BITVECTOR,
	VOL_UIC		: VECTOR [ 2, WORD ];

EXTERNAL
	EXE$GL_SYSUIC	: REF BBLOCK ADDRESSING_MODE ( ABSOLUTE );

LITERAL
	NOT_GROUP_WRITE = 9,  ! the group write disable bit
	NOT_WORLD_WRITE = 13; ! the world write disable bit


!  check if the user has write access to the tape
!
IF ( .PRIVILEGE_MASK [ PRV$V_BYPASS ] ) OR        ! user has bypass priviledge

   ( .PRIVILEGE_MASK [ PRV$V_SYSPRV ] ) OR        ! user has sysprv priviledge

   ( .PRIVILEGE_MASK [ PRV$V_VOLPRO ] ) OR        ! user has volpro priviledge

   ( NOT .VOL_PROT [ NOT_WORLD_WRITE ] ) OR        ! the tape is world write

   ( .PROCESS_UIC [ 1 ] LEQ .EXE$GL_SYSUIC ) OR    ! the user's UIC has a
						   ! system group number

   (( .PROCESS_UIC [ 1 ] EQL .VOL_UIC [ 1 ] ) AND  ! (the user's and tape's 
    (( .PROCESS_UIC [ 0 ] EQL .VOL_UIC [ 0 ] ) OR  !  UIC matches) OR (tape's
     ( NOT .VOL_PROT [ NOT_GROUP_WRITE ] )))	   !  and user's group match
						   !  and tape is group write)
   THEN RETURN SS$_NORMAL;

!  user does not needed priviledges return error
!
RETURN SS$_NOPRIV;

END;


ROUTINE FORMAT_VOL1_VOL2 =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine formats the volume label one and two, if the user has
!	specified a protection, of an ANSI labeled tape.
!
! CALLING SEQUENCE:
!	FORMAT_VOL1_VOL2 ()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	Value of VOLUME_PROT
!
! SIDE EFFECTS:
!	The correct infomation gets stuffed into the VOL1 skeleton
!
! USER ERRORS:
!	none
!
!--

BEGIN

LOCAL
	SPEC,
	STATUS,
	VOLUME_PROT,	! protection for tape
	VOLUME_UIC;	! owner of tape

BIND
	! UPLIT was used instead of CH$TRANSTABLE here, the code
	!  produced is the same (ie the constant string generated).
	!  UPLIT was used because CH$TRANSTABLE generates a warning error
	!  because more then a single character at a time is specified
	!  in the %ASCII. ( BLISS KLUDGE )
	!
	! The table will upcase a..z and return '@' for any non ANSI
	!  'a' characters.

	TRANSLATION_TABLE = UPLIT BYTE (
		%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
		%ASCII ' !"@@%&''()*+,-./0123456789:;<=>?',
		%ASCII '@ABCDEFGHIJKLMNOPQRSTUVWXYZ@@@@_',
		%ASCII '@ABCDEFGHIJKLMNOPQRSTUVWXYZ@@@@@',
		%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
		%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
		%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@',
		%ASCII '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@');

!
! place the label in the new volume
!

! check length of label for volume

IF .LABEL_STRING [DSC$W_LENGTH] GTRU VL1$S_VOLLBL
THEN
    ERR_EXIT(SS$_MTLBLLONG);

! translate the label into upper case and put in '@' for any non-ANSI
!  a characters found, padded with space in case label from command is
!  less than six characters long

CH$TRANSLATE ( TRANSLATION_TABLE,
		.LABEL_STRING [DSC$W_LENGTH],
		.LABEL_STRING [DSC$A_POINTER],
		' ',
		VL1$S_VOLLBL,
		VOL1[VL1$T_VOLLBL] );

! check for non-ANSI 'a' characters

IF NOT CH$FAIL( CH$FIND_CH ( VL1$S_VOLLBL, VOL1[VL1$T_VOLLBL], '@'))
	THEN ERR_EXIT ( INIT$_BADVOLLBL );

! If the interchange switch is set do not put any VMS specific information on
! to the tape.

IF NOT .INIT_OPTIONS[OPT_INTERCHG]
  THEN
  BEGIN

	! determine owner and protection of new volume

	IF .INIT_OPTIONS[OPT_PROTECTION] 	! did user specify protection
	THEN VOLUME_PROT = .PROTECTION		! protection input by user
	ELSE VOLUME_PROT = 0;			! no protection is default

	IF .INIT_OPTIONS[OPT_OWNER_UIC] 	! did user specify owner UIC
	THEN VOLUME_UIC = .OWNER_UIC		! user input owner
	ELSE VOLUME_UIC = .PROCESS_UIC;		! use the user's process UIC

	! place the values in the label

	FORMAT_VOLOWNER(VOL2,.VOLUME_UIC,.VOLUME_PROT);
	IF .VOLUME_PROT NEQ 0
	   THEN 
	   BEGIN
		CH$MOVE(10,STARID,VOL1[VL1$T_SYSCODE]);
		VOL1[VL1$B_LBLSTDVER] = '4';
		LABEL_VER = 4;
	   END;
	END;

! put in the user specified VOL1 owner identifier 

IF .INIT_OPTIONS[OPT_VOL_OWNER]
   THEN CH$MOVE(VL1$S_OWNER_IDENT,VOL_OWNER,VOL1[VL1$T_OWNER_IDENT]);

IF .INIT_OPTIONS[OPT_LABEL_QUAL]
   THEN SPEC = MTA$K_CHARVALID
   ELSE SPEC = MTA$K_NOCHAR;

! Call the accessibility system service to get the accessibilty char for 
! the VOL1 label.
! First keep the record that the UCB is reading. The accessibility 
! routine can not move the tape from under us! Thus we will compare
! this to the field after the call and if the tape was moved we punt
! the operation. 

CURRENT_RECORD = KERNEL_CALL(GET_RECORD,.UCB);

CHAR = $MTACCESS(LBLNAM = 0,
		 UIC = .PROCESS_UIC,
		 STD_VERSION = .LABEL_VER,
		 ACCESS_CHAR = .VOL_ACC,
		 ACCESS_SPEC = .SPEC,
		 TYPE = MTA$K_OUTVOL1);

STATUS = KERNEL_CALL(GET_RECORD,.UCB);
IF .CURRENT_RECORD NEQ .STATUS
   THEN ERR_EXIT(SS$_TAPEPOSLOST);
VOL1[VL1$B_VOLACCESS] = .CHAR[0];

! Return the value of VOLUME_PROT to determine if a VMS protection was 
! specified

RETURN .VOLUME_PROT;

END;					! end of routine FORMAT_VOL1_VOL2

END
ELUDOM
