	.TITLE	RTPAD - REMOTE TERMINAL PROGRAM
	.IDENT	'V04-000'
	.PSECT	RTPAD,NOWRT

$DEBUGDEF

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY: REMOTE TERMINAL SUPPORT
;
; ABSTRACT:
;
;	THIS PROGRAM RUNS ON A LOCAL NODE TO ALLOW A TERMINAL TO APPEAR TO
;	BE LOCALLY CONNECTED TO A REMOTE NODE.
;
;
; ENVIRONMENT: VMS - USER MODE
;		
;
; AUTHOR: W M CARDOZA,	 CREATION DATE: 20-AUG-79
;
; MODIFIED BY:
;
;	V03-017	JLV0362		Jake VanNoy		11-JUL-1984
;		Add code to signal PC that QUOTA EXCEEDED occured at.
;
;	V03-016	JLV0353		Jake VanNoy		10-APR-1984
;		Add support for SET HOST/DTE ttcn:
;
;	V03-015	JLV0324		Jake VanNoy		10-JAN-1984
;		Fix bug in setting of vax to vax flag.
;
;	V03-014	JLV0315		Jake VanNoy		 7-DEC-1983
;		Add logical name RTPAD$LOG for debug purposes.
;		Used like FAL$LOG, etc.
;
;	V03-013	JLV0295		Jake VanNoy		28-JUL-1983
;		Add looping on non-zero WRITEQIO before exiting.
;		Add SET HOST/LOG[=filespec].
;
;	V03-012	MHB0093		Mark Bramhall		 7-Mar-1983
;		Moved MAXMSG to $RTPADDEF.
;		Reworked code to use dynamic descriptors.
;		Changed the CTERM detection algorithm.
;		Changed handling of PSTHRU messages.
;
;	V03-011	MHB0089		Mark Bramhall		11-Feb-1983
;		Changed LIB$NET_CONNECT to UNS$NET_CONNECT.
;
; 	V03-010	JLV0		Jake VanNoy		17-Jan-1983
;		Added hooks for CTERM protocol. Broke up into two modules -
;		RTPAD and VMSRT. VMSRT now holds all of the VMS specific
;		protocol. General cleanup of existing code and comments.
;		Add use of new CLI interface, results in loss of first 
;		command feature used by RSTSRT.
;
;	V03-009	WMC0068		Wayne Cardoza		5-Oct-1982
;		Fix the previous DCL fix.
;
;	V03-008	WMC0067		Wayne Cardoza		15-Oct-1982
;		Fix timing problem when link error arrives before the
;		mailbox message.
;		Work with new DCL keyword support.
;
;	V03-007	JLV0214		Jake VanNoy		 6-OCT-1982
;		Add Read Verify code as implemented (more or less)
;		by Steve Long.
;
;	V03-006	WMC0066		Wayne Cardoza		20-Aug-1982
;		Take care of errors on SENSE MODE.
;
;	V03-005	WMC0065		Wayne Cardoza		7-Jul-1982
;		Don't issue out of band set mode QIO if no change.
;
;	V03-004	WMC0064		Wayne Cardoza		9-Apr-1982
;		Don't try to disable ^T under MCR.
;
;	V03-003 WMC0063		Wayne Cardoza		1-Apr-1982
;		Zero the buffer before a SENSE.
;
;	V03-002 WMC0062		Wayne Cardoza		18-Mar-1982
;		Add TERMCHAR in DIB format back for RSX, etc.
;
;	V03-001 WMC0061		Wayne Cardoza		15-Mar-1982
;		Send extended characteristics in configuration message.
;
;**
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; DEFAULT ADDRESSING MODE
;
	.DEFAULT DISPLACEMENT WORD
;
; INCLUDE FILES:
;
	$DIBDEF		;DIB OFFSETS
	$DSCDEF		;DESCRIPTOR DEFINITIONS
	$DVIDEF		;GETDVI DEFINITIONS
	$IODEF		;I/O OP CODES & MODIFIERS
	$RDPDEF		;REMOTE DEVICE PROTOCOL
	$RTPADDEF	; *** NEW
	$TSADEF		; *** NEW *** tsadef
	$TTYDEFS	;TERMINAL DRIVER SYMBOLS
;
; EQUATED SYMBOLS:
;
;	AST CONTROL BLOCK
;
	AST$T_BUF = CTP$B_PRO_MSGTYPE	; DATA BUFFER STARTS HERE

REM$_FACILITY = 510 			; REM$_ code

.show me,MC,MD
$SHR_MSGDEF NAME=REM,CODE=REM$_FACILITY,SCOPE=LOCAL, -
	MSGCODES = <<ATPC,INFO>>
.noshow meb

;
;
	.PAGE
	.SBTTL RTPAD - MAIN ROUTINE
;++
; FUNCTIONAL DESCRIPTION:
;
;	MAIN ROUTINE
;
; CALLING SEQUENCE:
;
;	RUN FROM A TERMINAL
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	RETURNED IF A SYSTEM SERVICE HAS AN UNEXPECTED ERROR
;
; SIDE EFFECTS:
;
;	DECNET LINK SET UP WITH A REMOTE NODE
;
;--
RTPAD:
	.WORD	0

.if df debug
	BSBW	DEBUG_SETUP	; enable ^B
.endc

	;
	; INIT creates logical link and starts up protocol module,
	; everything after that is AST driven.
	;

	BSBW	INIT			; INIT & set up logical link

10$:	$HIBER_S			; Proceed asynchronous from now on
	TSTB	WAKEFLAG		; Time to exit if > 0
	BEQL	10$			; Spurious $WAKE

	BLBC	CTERM_FLAG,20$		; branch if not cterm
	TSTL	WRITEQIO		; must also be zero before exiting
	BEQL	20$			; yup, exit
	$SETAST_S	ENBFLG = #1	; Allow ast delivery (turned off by QUIT)
	BRB	10$			; loop
20$:
	;
	; Wakeflag is set, exit back to DCL
	;

	$SETAST_S	ENBFLG = #0	; Shut down ast delivery

	$CANCEL_S	CHAN = READCHAN
	$CANCEL_S	CHAN = TERMMBXCHAN
	$CANCEL_S	CHAN = MAILCHAN
	$CANCEL_S	CHAN = LINKCHAN

	$PUTMSG_S MSGVEC = EXITMSG	; Tell user why

	$QIO_S	CHAN = CNTRLCHAN -	; Get rid of the ^Y AST request
		FUNC = #IO$_SETMODE!IO$M_CTRLYAST

	;
	; Restore original out of band and resouce wait mode
	;
	CLRL	-(SP)
	PUSHAL	OLDCTRL			; Reenable cli out of band characters
	CALLS	#2,G^LIB$ENABLE_CTRL

	$SETRWM_S -			; Set resource wait mode
		WATFLG = OLDSETRWM	;  to whatever it was upon entry

	BSBW	CTERM$CLOSE_LOG		; Close log file if open

	MOVL	RETSTATUS,R0		; Get saved status
	CMPL	#SS$_EXQUOTA,R0		; Exceeded some quota?
	BNEQ	100$			; nope, exit

	PUSHL	QUIT_PC
	PUSHL	#1
	PUSHL	#REM$_ATPC
	PUSHL	R0
	CALLS	#4,G^LIB$SIGNAL		; signal error

	MOVL	RETSTATUS,R0		; Get saved status
100$:	RET				; Exit program

	.PAGE
	.SBTTL INIT - INITIALIZATION OF LINK, ETC.
;++
; FUNCTIONAL DESCRIPTION:
;
;	PERFORMS INITIALIZATION FUNCTIONS FOR RTPAD
;
; CALLING SEQUENCE:
;
;	JSB	INIT
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	CHANNEL NUMBERS, ETC.
;
; COMPLETION CODES:
;
;	WILL RETURN COMPLETION CODES OF SYSTEM SERVICES WITH UNEXPECTED ERRORS
;
; SIDE EFFECTS:
;
;	SETS UP DECNET LINK TO REMOTE NODE
;
;--

INIT:
	$TRNLOG_S -			; Translate a logical name
		LOGNAM = SYS$NODE, -	;  from SYS$NODE
		RSLBUF = NODENAME, -	;  to the ending message
		RSLLEN = NODENAME	;  setting the correct length
	ONERROR	RET			; Exit on error

	$TRNLOG_S -			; translate "RTPAD$LOG"
		LOGNAM = RTPAD_LOGNAM,-
		RSLLEN = RTLOG_DESC, -
		RSLBUF = RTLOG_DESC
	CMPW	R0,#SS$_NOTRAN		
	BEQL	5$			; continue if no definition
	BLBC	R0,5$			; or error
	;
	; translate hex byte string to binary value
	;
	PUSHAL	RTLOG_FLAGS		; flags
	PUSHAB	RTLOG_BUF		; string
	MOVZWL	RTLOG_DESC,-(SP)	; length
	CALLS	#3,G^LIB$CVT_HTB	; convert hex to binary
	BLBS	R0,5$			; go if ok
	CLRL	RTLOG_FLAGS		; otherwise zero

5$:	$GETDVI_S -			; Get the device characteristics
		DEVNAM = TTYDESC, -	;  of the translated SYS$INPUT
		ITMLST = DVILIST
	ONERROR	RET			; Die if any error

	$GETDEV_S -			; RSX, ETC. WANTS THIS
		DEVNAM = TTYDESC,-
		PRIBUF = TERMCHAR
	ONERROR RET

	MOVB	DEVCLASS_TEMP,DEVCLASS	; Pack the data correctly
	MOVB	DEVTYPE_TEMP,DEVTYPE
	MOVW	DEVBUFSIZ_TEMP,DEVBUFSIZ

	CMPB	DEVCLASS, #DC$_TERM 	; Is it a terminal?
	BEQL	10$			; Yes
	$PUTMSG_S -			; Output an error message
		MSGVEC = NOTTERM	;  saying SYS$COMMAND not a terminal
	RET
	
	;
	; Call RTL routine to assign channel and associate mailbox to terminal 
	;
10$:
	PUSHAW	TERMMBXCHAN		; Arg #5 is the terminal mailbox chan
	PUSHAW	READCHAN		; Arg #4 is the terminal input channel
	PUSHAL	MAXMSGSIZ		; Arg #3 is the message buffer quota
	PUSHAL	MAXMSGSIZ		; Arg #2 is the maximum message size
	PUSHAQ	TTYDESC			; Arg #1 is the terminal device name
	CALLS	#5, G^LIB$ASN_WTH_MBX	; Assign a channel w/ a mailbox
	ONERROR	RET			; Die if any error
	;
	; Assign a terminal write channel
	;
	$ASSIGN_S -			; Assign a channel
		DEVNAM = TTYDESC, -	;  to the terminal device
		CHAN = WRITECHAN	;  for terminal output
	ONERROR	RET			; Die if any error
	;
	; See if SYS$INPUT is a file
	;
	$OPEN	FAB = SYSINFAB		; Open SYS$INPUT
	ONERROR	RET
	BBS	#DEV$V_TRM,-
		SYSINFAB+FAB$L_DEV,20$	; Branch if terminal
	INCB	INDFLAG			; Indicate indirect file
	$CONNECT RAB = SYSINRAB		; Connect to input stream
	ONERROR RET
	BRB	30$

20$:	$CLOSE	FAB = SYSINFAB		; Won't use it
30$:
	;
	; Check for /LOG [=filespec]
	;
	
	PUSHAQ	LOG_DESC		; LOG label
	CALLS	#1, G^CLI$PRESENT	; See if present
	BLBC	R0, 62$			; branch if not present

	PUSHAQ	LOG_FILE_DESC		; return buffer
	PUSHAQ	LOG_DESC		; LOG label
	CALLS	#2,G^CLI$GET_VALUE	; get value
	BLBC	R0,61$			; continue if no error

	PUSHAQ	LOG_FILE_DESC		; use this file
	CALLS	#1,G^CTERM$OPEN_LOG	; Open log file
	BLBS	R0,62$			; Branch if ok
61$:	RET				; exit on error
62$:
	;
	; Get node name from CLI
	;
	PUSHAQ	NODE_NAME_DESC		; Return buffer
	PUSHAQ	NODEDESC		; Parameter name
	CALLS	#2, G^CLI$GET_VALUE	; Get node name
	ONERROR	RET			; Exit on error

	;
	; Check for /DTE
	;

	PUSHAQ	DTE_DESC		; DTE label
	CALLS	#1, G^CLI$PRESENT	; See if present
	BLBC	R0, NOT_DTE		; branch if not present

	;
	; Kludge NODENAME so CR,LF happen on exit
	;
	MOVZWL	NODENAME,R0		; length
	ADDL2	NODENAME+4,R0		; plus address
	ADDW	#2,NODENAME		; add to length
	MOVW	#^X0D0A,(R0)		; CR,LF

	MOVZWL	WRITECHAN,-(SP)		; command channel
	PUSHAQ	NODE_NAME_DESC		; value of P1
	CALLS	#2,G^TERM$EMULATE	; call terminal emulation code
	ONERROR	RET			; exit immediately on error
	RSB				; otherwise, return to hiber code

NOT_DTE:
	;
	; Assign a channel for ^C and ^Y handling
	;
	$ASSIGN_S -			; Assign a channel
		DEVNAM = TTYDESC, -	;  to the terminal device
		CHAN = CNTRLCHAN	;  for control (AST's)
	ONERROR	RET			; Die if any error

	;
	; Loop through node name to remove trailing :'s
	;

	MOVQ	NODE_NAME_DESC, R2	; Get node name length, address
	MOVZWL	R2, R2			;  and isolate its real length
	BEQL	50$			; No length??
40$:	CMPB	-1(R3)[R2], #^A':'	; A trailing colon?
	BNEQ	60$			; Nope
	SOBGTR	R2, 40$			; Yep, remove it from count and loop
50$:	MOVZWL	#SS$_NOSUCHNODE, R0	; Error
	RET				;  and exit

60$:	MOVQ	R2, REMOTENODE		; Save the node name descriptor

	;
	; Form the network connection string
	;

	PUSHAQ	OBJ_DESC		; Arg #3 is the right part (obj type)
	PUSHAQ	REMOTENODE		; Arg #2 is the left part (node name)
	PUSHAQ	CONNDESC		; Arg #1 is the resultant string
	CALLS	#3, G^STR$CONCAT	; Go concatenate for connection string
	ONERROR	RET			; Exit on error
	ADDL3	R2, CONNDESC+4, R8	; Address just beyond node name
	ADDL	S^#OBJ_C_PREFIX, R8	;  then offset to object number
	
;
; *** TEMPORARY CODE TO DETECT /OLD QUALIFIER
;
	pushaq	old_desc		; *** TEMP
	calls	#1, g^cli$present	; *** TEMP
	blbc	r0, 65$			; *** TEMP; /NOOLD, go try 42 first
	movw	#^A'23', (r8)		; *** TEMP; /OLD, change to 23
65$:					; *** TEMP

	;
	; Connect to the remote node by requesting a logical link
	;

70$:	PUSHAQ	PSTHRU_MSG		; Address the PSTHRU message desc
	CALLS	#1, G^STR$FREE1_DX	;  and free up anything in it
	ONERROR	RET			; Exit on error
	PUSHAW	MAXMSGSIZ		; Arg #7 is the maximum message size
	PUSHAB	180$			; Arg #6 is the message call routine
	PUSHAQ	FINALACS		; Arg #5 is the final ACS desc
	PUSHAQ	FINALPATH		; Arg #4 is the final path desc
	PUSHAW	MAILCHAN		; Arg #3 is the link mailbox channel
	PUSHAW	LINKCHAN		; Arg #2 is the link channel
	PUSHAQ	CONNDESC		; Arg #1 is the "device" desc
	CALLS	#7, G^UNS$NET_CONNECT	; Do the remote node connection
	BLBS	R0, 80$			; Continue if success completion

	;
	; If object type 42 failed then try object type 23
	;

	MOVW	(R8), R1		; Save the object type we just tried
	MOVW	#^A'23', (R8)		;  then replace it object type 23
	CMPW	R1, #^A'23'		; Did we just try object type 23?
	BNEQ	70$			; Nope, so go try object type 23
	BSBW	170$			; Go output any saved PSTHRU message(s)
	RET				;  then exit with the error

80$:	BSBW	170$			; Go output any saved PSTHRU message(s)

	;
	; Read initial message from HOST process, this is the
	; BIND message in TSA terminology.
	;

	MOVAB	FIRSTMSG, R5		; Address of area to receive message
	$QIOW_S -			; Read CONFIG message
		CHAN = LINKCHAN, -	;  on the link channel
		FUNC = #IO$_READVBLK, -	;  reading obviously
		IOSB = AST$Q_IOSB(R5), - ;  use an IOSB
		P1 = AST$T_BUF(R5), -	;  into this buffer
		P2 = #MAXMSG		;  which is this long
	BLBS	R0, 110$		; Branch if ok
100$:	PUSHL	R0			; Save error status
	$PUTMSG_S -			; Output an error message
		MSGVEC = DECNETERR	;  saying some sort of link error
	POPL	R0			; Restore the error status
	RET				;  and die

110$:	MOVZWL	AST$Q_IOSB(R5), R0	; Get the I/O completion code
	BLBC	R0, 100$		; Go die unless success completion

;		***** start temp old RSTS/E *****

	SUBW3	#1, AST$Q_IOSB+2(R5), R0
	CMPW	R0, AST$T_BUF+1(R5)
	BNEQ	FOO_RSTS_1
	MOVL	#1@8!1, AST$T_BUF(R5)
	MOVL	#1@0@16!2, AST$T_BUF+4(R5)
FOO_RSTS_1 = .

;		***** end temp old RSTS/E *****

	CMPB	AST$T_BUF(R5), #1	; Is it a CONFIG message?
	BNEQ	130$			; Nope
	CMPB	AST$T_BUF+1(R5), #1	; A CONFIG message for V1 or higher?
	BGEQ	140$			; Yep
130$:	$PUTMSG_S -			; Output an error message
		MSGVEC = NOTVMS		;  saying protocol not supported
	RET

	;
	; Use the support bit mask that was returned to determine which
	; of the protocol modules to call.
	;

140$:	MOVB	AST$T_BUF+2(R5),PROTO_ECO ; Save eco level
	MOVW	AST$T_BUF+4(R5),HOST_OPSYS ; Save host operating system

	MOVAB	PROTOTBL-4, R2		; Get (biased) pointer to protocols
150$:
	ADDL	#4, R2			; Index over address to bit number
	CMPL	R2, #ENDPROTO		; Are we out of protocols?
	BGEQU	130$			; Yep, protocol not supported
	BITW	AST$T_BUF+6(R5),(R2)+	; Not yet, does the bit match?
	BEQL	150$			; No match, loop for next protocol
	;
	; R2 is now address of protocol module routine
	;
	PUSHAL	OLDCTRL			; Arg #2 is returned out-of-band bits
	PUSHAL	OLDCTRL			; Arg #1 is out-of-band's to disable
	CALLS	#2, G^LIB$DISABLE_CTRL	; Get the currently enabled ones

	PUSHAL	OLDCTRL			; Arg #2 is returned out-of-band bits
	PUSHAL	OLDCTRL			; Arg #1 is out-of-band's to disable
	CALLS	#2, G^LIB$DISABLE_CTRL	; Go disable out-of-bound ASTs

	$SETRWM_S -			; Set resource wait mode
		WATFLG = #1		;  off so we never will hang
	CMPW	R0, #SS$_WASCLR		; Was it already off?
	BEQL	160$			; Nope, we'll turn it back on at exit
	INCL	OLDSETRWM		; Yep, we'll keep it off at exit

	;
	; Call the appropriate protocol module...
	;
160$:
	CALLS	#0, @(R2)		; Go start up selected protocol
	RSB				; Done

170$:	TSTW	PSTHRU_MSG		; Any saved PSTHRU message(s)?
	BEQL	175$			; Nope
	PUSHL	R0			; Yep, save the status code
	PUSHAQ	PSTHRU_MSG		; Address the saved message(s)
	CALLS	#1, G^LIB$PUT_OUTPUT	;  and go output them
	MOVL	(SP)+, R0		; Restore the status code
175$:	RSB				; Exit

180$:	.WORD	^M<>			; Message call back routine
	MOVW	#REM$_FACILITY, 4+2(AP)	; Replace facility code with ours
	$PUTMSG_S -			; Use $PUTMSG
		MSGVEC = (AP), -	;  with the supplied message vector
		ACTRTN = 190$		;  calling this action routine
	RET				; Return

190$:	.WORD	^M<>			; Action routine for $PUTMSG
	TSTW	PSTHRU_MSG		; Anything saved yet?
	BEQL	200$			; Nope
	PUSHAQ	PSTHRU_CRLF		; Arg #2 is the string to append
	PUSHAQ	PSTHRU_MSG		; Arg #1 is the string to append to
	CALLS	#2, G^STR$APPEND	; Go save message by appending
200$:	PUSHAQ	@4(AP)			; Arg #2 is the string to append
	PUSHAQ	PSTHRU_MSG		; Arg #1 is the string to append to
	CALLS	#2, G^STR$APPEND	; Go save message by appending
	CLRL	R0			; Say we don't want any output now
	RET				;  then return

CTERM_RT:				; CTERM protocol initialization
	.WORD	^M<>			; No register(s) to save

	INCB	CTERM_FLAG		; Indicate CTERM protocol

	movaq	infomsg1,R0		; assume not vax to vax
	CMPW	#7,HOST_OPSYS		; Talking to VMS?
	BNEQ	10$			; nope
	BISW	#FLG$M_VAXHOST,-
		CTERM_FLAG		; Set flag
	movaq	infomsg2,R0		; vax to vax
10$:
	BBC	#RTLOG$V_BANNER,-
		RTLOG_FLAGS,20$		; Branch if not requested
	pushl	R0			; 
	pushl	#1			; 
	pushl	#<shr$_text!sts$k_info>!<rem$_facility@16> ; 
	calls	#3,g^lib$signal		; 

20$:	CALLS	#0, VMSRT		; Go join the VMSRT protocol
	RET				;  then exit

.SBTTL RECORD_QUIT - snapshot QUIT info

RECORD_QUIT::

	MOVL	(SP),QUIT_PC		; save caller PC

	$GETJPIW_S -
		EFN = #5,-
		PIDADR = LOCAL_PID,-
		ITMLST = GETJPI_ITMLST,-
		IOSB = JPI_IOSB
	BLBC	R0,100$
	MOVZWL	JPI_IOSB,R0
	BLBC	R0,100$
100$:
	RSB


	.SBTTL	READ ONLY DATA	

SYS$NODE:	.ASCID	/SYS$NODE/
TTYDESC::	.ASCID /SYS$COMMAND/

infomsg1:	.ascid	/remote terminal is using CTERM protocol (non-vax)/ ; *** TEMP
infomsg2:	.ascid	/remote terminal is using CTERM protocol (vax-to-vax)/ ; *** TEMP

DVILIST:
    .WORD	4,DVI$_DEVCLASS		; Device class
    .ADDRESS	DEVCLASS_TEMP,0

    .WORD	4,DVI$_DEVTYPE		; Device type
    .ADDRESS	DEVTYPE_TEMP,0

    .WORD	4,DVI$_DEVBUFSIZ	; Device buffer size
    .ADDRESS	DEVBUFSIZ_TEMP,0

    .WORD	4,DVI$_DEVDEPEND	; Device dependant data (1)
    .ADDRESS	DEVDEPEND,0

    .WORD	4,DVI$_DEVDEPEND2	; Device dependant data (2)
    .ADDRESS	DEVDEPEND2,0

    .WORD	16,DVI$_DEVNAM		; Device name and length
    .ADDRESS	DEVNAM,DEVNAMLEN

    .WORD	4,DVI$_UNIT		; Device unit number
    .ADDRESS	TERMUNIT,0

    .LONG	0			;END OF LIST

	.PAGE
	.SBTTL	READ WRITE DATA
	.PSECT	_RTPAD,LONG

LOCAL_PID:	.LONG	0	; no pid
JPI_IOSB:	.BLKL	2	; iosb

GETJPI_ITMLST:
		.WORD	4,JPI$_ASTLM
		.LONG	ASTLM,LEN
		.WORD	4,JPI$_ASTCNT
		.LONG	ASTCNT,LEN
		.WORD	4,JPI$_BIOLM
		.LONG	BIOLM,LEN
		.WORD	4,JPI$_BIOCNT
		.LONG	BIOCNT,LEN

		.LONG	0	; end of list

ASTLM:	.LONG	0
ASTCNT:	.LONG	0
BIOLM:	.LONG	0
BIOCNT:	.LONG	0
LEN:	.LONG	0

;
; Returned data area for $GETDVI
;

DEVCLASS_TEMP:	.LONG	0		; Temp locations since getdvi wants longs
DEVTYPE_TEMP:	.LONG	0
DEVBUFSIZ_TEMP:	.LONG	0

CHAR_BLOCK::				; VMS characteristics
 DEVCLASS:  	.BLKB  1
 DEVTYPE:   	.BLKB  1
 DEVBUFSIZ: 	.BLKW  1
 DEVDEPEND: 	.BLKL  1
 DEVDEPEND2:	.BLKL  1

DEVNAMLEN::	.LONG	0		;

DEVNAM::	.BLKB  16		;

TERMUNIT::	.LONG   0		;

TERMCHAR::
	.LONG	DIB$K_LENGTH+16,1$	; Term characteristics for RSX, etc.
1$:	.BLKB	DIB$K_LENGTH+16

;
; Message vectors for $PUTMSG
;

DECNETERR::	.LONG	2,REM$_NETERR,0

NOTTERM:	.LONG	2,REM$_NOTERM,0

EXITMSG:	.LONG	3,REM$_END,1,NODENAME

NOTVMS:		.LONG	2,REM$_NOPROT,0

;
; Channels assigned in INIT and used by other modules
;

LINKCHAN::	.LONG	0	; DECnet link channel

MAILCHAN::	.LONG	0	; DECnet link mailbox channel

RDWRTCHAN::
READCHAN::	.LONG	0	; Terminal reads channel

WRITECHAN::	.LONG	0	; Terminal writes channel

CNTRLCHAN::	.LONG	0	; Terminal ^C and ^Y enables

TERMMBXCHAN::	.LONG	0	; Terminal Unsolicited data mailbox channel

.PAGE
;
; Cli interface storage
;
OLD_DESC:	.ASCID	/OLD/		; /OLD qualifier

LOG_DESC:	.ASCID	/LOG/		; /LOG qualifier

DTE_DESC:	.ASCID	/DTE/		; /DTE qualifier

NODEDESC:	.ASCID	/NODE/		; name of parameter

;
; Network names and descriptors
;

OBJ_DESC:				; Object type descriptor
		.LONG	20$-10$
		.LONG	10$

10$:		.ASCII	/::"/		; FINAL FORMAT: node_name::"nn="
OBJ_C_PREFIX = .-10$			; Offset to object number
		.ASCII	/42="/		; 42 is TSA, 23 is old remote terminal
20$:

NODE_NAME_DESC:				; Returned CLI node name parameter
		.LONG	DSC$K_CLASS_D@<DSC$B_CLASS*8>
		.LONG	0
LOG_FILE_DESC:				; Returned /LOG= file spec
		.LONG	DSC$K_CLASS_D@<DSC$B_CLASS*8>
		.LONG	0

CONNDESC:				; Network connection string
		.LONG	DSC$K_CLASS_D@<DSC$B_CLASS*8>
		.LONG	0

NODENAME::	.LONG	20$-10$		; Translation of SYS$NODE held here
		.LONG	10$

10$:		.BLKB	64
20$:

FINALPATH::				; Final path descriptor
		.LONG	DSC$K_CLASS_D@<DSC$B_CLASS*8>
		.LONG	0

FINALACS::				; Final ACS descriptor
		.LONG	DSC$K_CLASS_D@<DSC$B_CLASS*8>
		.LONG	0

PSTHRU_MSG:				; Saved PSTHRU message descriptor
		.LONG	DSC$K_CLASS_D@<DSC$B_CLASS*8>
		.LONG	0

PSTHRU_CRLF:	.ASCID	<13><10>	; <CR><LF> for PSTHRU messages

;
; RMS storage
;
	.ALIGN LONG

SYSINFAB::	$FAB	FAC=GET,FNM=<SYS$INPUT>	; To open SYS$INPUT

SYSINRAB::	$RAB	FAB=SYSINFAB

.PAGE

;
; Flags
;

INDFLAG::	.BYTE	0		; Indicate indirect command file

WAKEFLAG::	.BYTE	0		; Flag for legitimate $WAKE

CTERM_FLAG::	.LONG	0		; TSA/CTERM flags (see $RTPADDEF)

RTLOG_FLAGS::	.LONG	0		; value of RTPAD$LOG
;
; other misc. global storage
;

RTLOG_DESC:				; RTPAD$LOG value
		.LONG	16
		.LONG	RTLOG_BUF
RTLOG_BUF:	.BLKB	16

RTPAD_LOGNAM:
		.ASCID	/RTPAD$LOG/

RT$AB_ASTBLK::	.BLKB	AST$T_BUF	; Dummy AST block

RETSTATUS::	.LONG	0		; Save a system service status
QUIT_PC::	.LONG	0		; Save PC where error happened

FIRSTCMD::				; First command descriptor
		.LONG	DSC$K_CLASS_D@<DSC$B_CLASS*8>
		.LONG	0

PROTO_ECO::	.BYTE	0		; protocol eco level

HOST_OPSYS:	.WORD	0		; host system

;
; local storage
;

OLDCTRL:	.LONG	0		; CLI out of band enable flags

OLDSETRWM:	.LONG	0		; Original resource wait mode

FIRSTMSG:	.BLKB	AST$T_BUF+MAXMSG ; Buffer for BIND message

MAXMSGSIZ:	.LONG	MAXMSG		; Maximum message size

	.PAGE
	.SBTTL	PROTOCOL TABLE PSECTS
	.PSECT	PROTOTB,BYTE,NOEXE

PROTOTBL:

	.WORD	<1@4>			; <4> => CTERM protocol
	.LONG	CTERM_RT		; This is the initialization entry
	.WORD	<1@2>			; <2> => VMS remote terminal protocol
	.LONG	VMSRT			; This is the initialization entry

	.PSECT	PROTOTBL,BYTE,NOEXE

	.PSECT	PROTOTBL1,BYTE,NOEXE

ENDPROTO:

	.END	RTPAD
