MODULE RM3PUT (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
!
! FACILITY:	RMS32 Index Sequential File Organization
!
! ABSTRACT:
!                The high level $PUT code.
!
!
! ENVIRONMENT:
!
!		VAX/VMS Operating System
!
!--

!
! AUTHOR:        Todd M. Katz		RE-CREATION DATE:        09-Jan-83
!
! MODIFIED BY:
!
!	V03-022	DGB0071		Donald G. Blair		17-Jul-1984
!		Return STV correctly after disk-quota-exceeded error
!		during root bucket split.
!
!	V03-021	DAS0002		David Solomon		25-Mar-1984
!		Fix broken branches to RM$RU_JOURNAL3 and RM$RU_REFORMAT.
!
!	V03-020	DGB0032		Donald G. Blair		20-Mar-1984
!		Fix broken branch to RM$UNLOCK
!
!	V03-019	DAS0001		David Solomon		05-Mar-1984
!		Don't set IRB$V_UNLOCK_RP if ULK set (FT1 QAR 628).
!
!	V03-018	TSK0001		Tamar Krichevsky	22-Jun-1983
!		Fix broken branch to RM$LOCK.
!
!	V03-017	TMK0012		Todd M. Katz		26-Mar-1983
!		Change the linkage for RM$RU_JOURNAL3 from RL$RABREG_467 to
!		RL$RABREG_67.
!
!	V03-016 MCN0002		Maria del C. Nasr	24-Mar-1983
!		More linkages reorganization.
!
!	V03-015	TMK0011		Todd M. Katz		16-Mar-1983
!		Change the linkage for RM$RU_JOURNAL3 from RL$RABREG_67 to
!		RL$RABREG_467.
!
!	V03-014	TMK0010		Todd M. Katz		16-Mar-1983
!		Change the symbol RMSR$_PUT tp RJR$_PUT.
!
!	V03-013	TMK0009		Todd M. Katz		11-Mar-1983
!		Set the bit CSH$V_LOCK in the field IRB$B_CACHEFLGS before
!		calling RM$GET_BKT within RM$CONFIRM_EOF so that the bucket
!		retrieved will be exclusively locked.
!
!	V03-012 MCN0001		Maria del C. Nasr	28-Feb-1983
!		Reorganize linkages
!
!	V03-011	TMK0008		Todd M. Katz		19-Dec-1982
!		Re-write the routines within this module adding support for 
!		Recovery Unit Journalling of $PUT. 
!
!*****
!

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! Define default PSECTs for code.
!
PSECT
    CODE = RM$RMS3(PSECT_ATTR),
    PLIT = RM$RMS3(PSECT_ATTR);

! Linkages.
!
LINKAGE
    L_COMPARE_KEY,
    L_ERROR_LINK1,
    L_PRESERVE1,
    L_QUERY_AND_LOCK,
    L_RABREG,
    L_RABREG_4567,
    L_RABREG_457,
    L_RABREG_567,
    L_RABREG_67,
    L_RABREG_7,

    ! Local Routine Linkage
    !
    RL$LINKAGE = JSB () :
		    GLOBAL (COMMON_RABREG, R_IDX_DFN, R_REC_ADDR);

! Forward Routines.
!
FORWARD ROUTINE
    RM$UPDATE_IF	: RL$LINKAGE;

! External Routines.
!
EXTERNAL ROUTINE
    RM$BKT_SORT		: RL$RABREG_7,
    RM$CLEAN_BDB	: RL$ERROR_LINK1,
    RM$COMPARE_KEY	: RL$COMPARE_KEY,
    RM$CSEARCH_TREE	: RL$RABREG_67,
    RM$DELETE_UDR	: RL$RABREG_4567,
    RM$GETBKT		: RL$RABREG_457,
    RM$GETNEXT_REC	: RL$RABREG_67,
    RM$INS_ALL_SIDR	: RL$RABREG_4567,
    RM$INSERT_UDR	: RL$RABREG_4567,
    RM$INSS_OR_IDX	: RL$RABREG_567,
    RM$LOCK		: RL$QUERY_AND_LOCK ADDRESSING_MODE( LONG_RELATIVE ),
    RM$MAKE_INDEX	: RL$RABREG_7,
    RM$PACK_REC		: RL$RABREG_567,
    RM$PUT_UPD_CHKS	: RL$RABREG_7,
    RM$PUT_UPD_FIN	: RL$RABREG,
    RM$PUT_UPD_SPL	: RL$RABREG_4567,
    RM$RECORD_KEY	: RL$PRESERVE1,
    RM$RECORD_ID	: RL$RABREG_67,
    RM$RECORD_VBN	: RL$PRESERVE1,
    RM$RLSBKT		: RL$PRESERVE1,
    RM$RU_JOURNAL3	: RL$RABREG_67 ADDRESSING_MODE( LONG_RELATIVE ),
    RM$RU_REFORMAT	: RL$RABREG_567 ADDRESSING_MODE( LONG_RELATIVE ),
    RM$UNLOCK		: RL$QUERY_AND_LOCK ADDRESSING_MODE( LONG_RELATIVE ),
    RM$UPDATE3B		: RL$RABREG_67;

%SBTTL 'RM$CONFIRM_EOF'
ROUTINE RM$CONFIRM_EOF : RL$LINKAGE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	On position to EOF, while doing the first PUT, sequentially scan
!	the file to verify there are no non-deleted records following the
!	position of insert.
!
! CALLING SEQUENCE:
!	RM$CONFIRM_EOF()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	IDX_DFN			- address of the primary key descriptor
!	     IDX$B_DATBKTSZ	- size of the primary data bucket in blocks
!
!	IRAB			- address of IRAB
!	    IRB$V_ABOVELCKD	- if set, lockabove optimization is in effect
!	    IRB$L_CURBDB	- address of BDB for insertion bucket
!	    IRB$B_CUR_KREF	- current NRP key of reference
!	    IRB$L_LOCK_BDB	- address of BDB of above locked bucket
!	    IRB$L_MIDX_TMP3	- VBN of bucket containing insertion position
!
!	REC_ADDR		-  address of position of insertion
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	IRAB			- address of IRAB
!	    IRB$V_ABOVELCKD	- 0 
!	    IRB$L_CURBDB	- address of BDB for starting data bucket
!	    IRB$L_LOCK_BDB	- 0
!
!	REC_ADDR		- address of record to start re-positioning with
!
! ROUTINE VALUE:
!
!	ROP - if secondary key selected
!	SUC - if record is really EOF record
!	SEQ - is record isn't EOF record
!
! SIDE EFFECTS:
!
!	On all errors, all locked buckets are released.
!	Otherwise, RMS returns positioned to the first record in the original
!	    bucket.
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    GLOBAL REGISTER
	COMMON_IO_STR;

    ! Position to EOF not supported for secondary keys. Return the appropriate
    ! error.
    !
    IF .IRAB[IRB$B_CUR_KREF] NEQU 0
    THEN
	RETURN RMSERR(ROP);

    ! Release the level one index bucket if lock above optimization was 
    ! utilized.
    !
    IF TESTBITSC (IRAB[IRB$V_ABOVELCKD])
    THEN
	RELEASE (IRAB[IRB$L_LOCK_BDB]);

    ! Retrieve the the address of the primary data bucket.
    !
    BDB = .IRAB [IRB$L_CURBDB];
    BKT_ADDR = .BDB[BDB$L_ADDR];

    ! Scan this and subsequent primary data level buckets in the horizontal
    ! chain starting with the record following the point of insertion of the
    ! new record in order to prove that there are no records following the one 
    ! which will be inserted.
    !
    DO
	BEGIN

	LOCAL
	    END_OF_BUCKET,
	    NEXT_BUCKET;

	! If the current bucket is not a primary data bucket then signal a 
	! bugcheck.
	!
	IF .BKT_ADDR[BKT$B_LEVEL] NEQU 0
	THEN
	    BUG_CHECK;

	! Obtain the address of the end of the bucket.
	!
	END_OF_BUCKET = .BKT_ADDR + .BKT_ADDR[BKT$W_FREESPACE];

	! Determine whether there are any non-deleted records in this bucket.
	!
	WHILE .REC_ADDR LSSA .END_OF_BUCKET
	       AND
	      NOT .REC_ADDR[IRC$V_RRV]
	DO

	    ! If the current record is not deleted, then released all locked
	    ! buckets and return an error.
	    !
	    IF  NOT .REC_ADDR[IRC$V_DELETED]
		 AND
		NOT .REC_ADDR[IRC$V_RU_DELETE]
	    THEN
		BEGIN
		RM$CLEAN_BDB();
		RETURN RMSERR(SEQ);
		END

	    ! Otherwise, position to the next record in the bucket.
	    !
	    ELSE
		RM$GETNEXT_REC();

	! If this primary data bucket is the last bucket in the file, then
	! the record RMS is inserting is not followed by any non-deleted records
	! in the file, so return success.
	!
	IF .BKT_ADDR[BKT$V_LASTBKT]
	THEN
	    BEGIN

	    ! If RMS had to scan multiple buckets, then it no longer has 
	    ! accessed the bucket containing the point of insertion of the new
	    ! record. Release the current bucket, and reaccess this original 
	    ! bucket, so that RMS can start its re-positioning with the first
	    ! record in this bucket. 
	    !
	    IF .BDB[BDB$L_VBN] NEQU .IRAB[IRB$L_MIDX_TMP3]
	    THEN
		BEGIN
		IRAB[IRB$L_CURBDB] = 0;
		RM$RLSBKT(0);

		IRAB[IRB$B_CACHEFLGS] = CSH$M_LOCK;
		RETURN_ON_ERROR (RM$GETBKT (.IRAB[IRB$L_MIDX_TMP3],
					    .IDX_DFN[IDX$B_DATBKTSZ] * 512));
		IRAB[IRB$L_CURBDB] = .BDB;
		END;

	    ! RMS will re-position to the point of insertion of the new record
	    ! starting with the first record in the bucket.
	    !
	    REC_ADDR = .BKT_ADDR + BKT$C_OVERHDSZ;
	    RETURN RMSSUC(SUC);
	    END;

	! This current bucket is not the last bucket in the file; therefore,
	! save the VBN of the next primary data bucket in the horizontal chain,
	! release the current bucket, access the next bucket, and continue the
	! scan for non-deleted primary data records with the first record in
	! that bucket.
	!
	NEXT_BUCKET = .BKT_ADDR[BKT$L_NXTBKT];

	IRAB[IRB$L_CURBDB] = 0;
	RM$RLSBKT(0);

	IRAB[IRB$B_CACHEFLGS] = CSH$M_LOCK;
	RETURN_ON_ERROR (RM$GETBKT (.NEXT_BUCKET, 
				    .IDX_DFN[IDX$B_DATBKTSZ] * 512));

	IRAB[IRB$L_CURBDB] = .BDB;
	REC_ADDR = .BKT_ADDR + BKT$C_OVERHDSZ;
	END
    UNTIL 0;

    RETURN RMSSUC(SUC);
    END;

%SBTTL 'RM$PCKDEC_CHECK'
GLOBAL ROUTINE RM$PCKDEC_CHECK : RL$RABREG_7 =

!++
!
!   FUNCTIONAL DESCRIPTION:
!
!	This routine verifies that a packed decimal key is valid. The key to
!	be verified is always assumed to be in keybuffer 2. 
!
!   CALLING SEQUENCE:
!
!	BSBW RM$PCKDEC_CHECK()
!
!   INPUT PARAMETERS:
!	NONE
!
!   IMPLICIT INPUT:
!
!	IFAB			- address of IFAB
!	    IFB$W_KBUFSZ	- size of one contigious keybuffer
!
!	IRAB			- address of IRAB
!	    IRB$L_KEYBUF	- address of the contigious keybuffers
!	    IRB$B_KEYSZ		- size of key
!
!   OUTPUT PARAMETERS:
!	NONE
!
!   IMPLICIT OUTPUT:
!	NONE
!
!   ROUTINE_VALUE
!
!	SUC - string is a correct packed decimal string
!	KEY - string is not a packed decimal string
!
!   SIDE EFFECTS
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IFAB_STR,
	R_IRAB_STR;

    LOCAL
	KEYBUF	: REF BLOCK [, BYTE];

    MACRO
	LOW_MASK = 0,4,0 %,			! low nibble - digit (or sign)
	HIGH_MASK = 4,4,0 %;			! high nibble - digit

    KEYBUF = KEYBUF_ADDR(2);

    ! Check actual digits - each must be less than nine.
    !
    INCR I FROM 0 TO (.IRAB[IRB$B_KEYSZ] - 2) DO
	BEGIN

	IF (.KEYBUF[.I, HIGH_MASK] GTRU 9)
	    OR
	   (.KEYBUF[.I, LOW_MASK] GTRU 9)
	THEN
	    RETURN RMSERR(KEY);
	END;

    ! Check last byte : sign,digit.
    !
    IF  (.KEYBUF[(.IRAB[IRB$B_KEYSZ] - 1), HIGH_MASK] GTRU 9)
 	 OR
	(.KEYBUF[(.IRAB[IRB$B_KEYSZ] - 1), LOW_MASK] LEQU 9)
    THEN
	RETURN RMSERR(KEY);

    RETURN RMSSUC();

    END;

%SBTTL 'RM$PUT3B'
GLOBAL ROUTINE RM$PUT3B : RL$RABREG =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	The routine directs the insertion of a new record. The steps required
!	to insert a new record are as follows:
!
!	1. Perform some operation specific validations and initializations.
!
!	2. Position to the point of insertion of the new record primary data
!	   record. 
!
!	3. Convert the $PUT into an $UPDATE and perform the $UPDATE if duplicate
!	   primary keys are not allowed, the primary key of the new record is
!	   already represented within the file, update access is allowed, and 
!	   updates have been requested in this particular circumstance.
!
!	4. Insert the new record into the current bucket provided there is both
!	   available record IDs and sufficient free space in the bucket to
!	   accomidate the new record. If there is not sufficient space or 
!	   or record IDs, the primary data bucket is split, the new record is
!	   inserted where appropriate, and the primary index is updated as is
!	   necessary.
!
!	5. All alternate keys in the new record are inserted.
!
! CALLING SEQUENCE:
!
!	BSBW RM$PUT3B()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	IDX_DFN			- index descriptor for primary key
!	    IDX$B_DATATYPE	- data type of primary key
!	    IDX$B_DATBKTYP	- primary data bucket compression type
!	    IDX$V_DUPKEYS	- if set, duplicate primary keys are allowed
!	    IDX$B_KEYSZ		- size of the primary key
!
!	IFAB			- address of IFAB
!	    IFB$W_KBUFSZ	- size of a keybuffer
!	    IFB$B_PLG_VER	- prologue version of file
!	    IFB$B_RFMORG	- format of records
!
!	IRAB			- address of IRAB
!	    IRB$V_CON_EOF	- if set, make sure record is at end-of-file
!	    IRB$L_CURBDB	- address of BDB for primary data bucket
!	    IRB$V_DUP		- if set, new record is a duplicate
!	    IRB$V_DUPS_SEEN	- if set, duplicate of new primary key seen
!	    IRB$L_KEYBUF	- address of te contigious keybuffers
!	    IRB$V_PUTS_LAST	- if set, last operation was sequential $PUT
!	    IRB$W_PUTUP_ID	- RFA ID of new primary data record
!	    IRB$L_PUTUP_VBN	- RFA VBN of new primary data record
!	    IRB$L_RBF		- address of user record buffer
!	    IRB$W_RSZ		- size of new record
!	    IRB$W_UDR_ID	- RFA ID of current primary data record
!	    IRB$L_UDR_VBN	- RFA VBN of current primary data record
!	    IRB$V_UNLOCK_RP	- if set, there is a current record lock
!
!	RAB			- address of RAB
!	    RAB$B_RAC		- record access mode
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	IRAB
!	    IRB$V_CON_EOF	- 0
!	    IRB$V_IDX_ERR	- if set, error occurred updating index
!	    IRB$L_MIDX_TMP3	- VBN of insertion primary data bucket 
!	    IRB$W_POS_INS	- offset of position of insertion
!	    IRB$V_POSINSERT	- 1
!	    IRB$V_PUTS_LAST	- if set, current operation is sequential $PUT
!	    IRB$W_PUTUP_ID	- RFA ID of new primary data record
!	    IRB$L_PUTUP_VBN	- RFA VBN of new primary data record
!	    IRB$V_UNLOCK_RP	- if set, new record is locked
!
!	RAB			- address of RAB
!	    RAB$L_STV		- return value from RM$INSS_OR_IDX if error 
!				  occurred updating index
!
! ROUTINE VALUE:
!
!	RAC	- invalid record access mode
!	SEQ	- new records not inserted in ascending sequential order
!	SUC	- success
!
!	Also see return value from:
!
!	RM$CONFIRM_EOF
!	RM$CSEARCH_TREE
!	RM$INS_ALL_SIDR
!	RM$LOCK
!	RM$MAKE_INDEX
!	RM$PCKDEC_CHECK
!	RM$PUT_UPD_CHKS
!	RM$PUT_UPD_FIN
!	RM$PUT_UPD_SPL
!	RM$RLSBKT
!	RM$RU_JOURNAL3
!	RM$UPDATE_IF
!	RM$UPDATE3B
!
! SIDE EFFECTS:	
!
!	AP is trashed.
!	Keybuffer 2 and 3 will have been trashed.
!	If the current process is within a Recovery Unit, and the file is being 
!	     Recovery Unit Journalled, then the operation is RU Journalled
!	     before any permanent modification to the file takes place.
!	If the operation is a sequential $PUT, the keybuffer 6 will contain the 
!	     new record.
!	If the routine returns with success of any type then the new record has
!	    been inserted.
!	If the routine returns with success then any required index updating has
!	    taken place.
!	If the rotuine returns with a RVU error then the nwe record has been
!	    inserted and any required index updating has probably taken place,
!	    but some of the RRVs have probably not been correctly updated.
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR;

    GLOBAL REGISTER
	R_BDB,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    BUILTIN
	AP,
	TESTBITSC;

    ! Do some validity checks and initialization, and unlock the current 
    ! primary data record if there is one to unlock.
    !
    IRAB[IRB$V_UPDATE] = 0;

    IF TESTBITSC(IRAB[IRB$V_UNLOCK_RP])
    THEN
	RM$UNLOCK (.IRAB[IRB$L_UDR_VBN], .IRAB[IRB$W_UDR_ID]);

    RETURN_ON_ERROR (RM$PUT_UPD_CHKS());

    ! Make sure the record access is valid - only sequential and key access
    ! is allowed.
    !
    ASSUME_C(RAB$C_KEY, 1);

    IF .RAB[RAB$B_RAC] GTRU RAB$C_KEY
    THEN
	RETURN RMSERR(RAC);

    ! If the record access mode is sequential and the last operation performed 
    ! was also a sequential $PUT then make sure that the key of the new record 
    ! is greater-than or equal to the key of the previous record inserted.
    !
    ! Move the key into keybuffer 6 and set the state bit IRB$V_PUTS_LAST for
    ! the next operation in case it too is a sequential $PUT.
    !
    IF .RAB[RAB$B_RAC] EQLU RAB$C_SEQ
    THEN
	BEGIN

	IF .IRAB[IRB$V_PUTS_LAST]
	THEN
	    BEGIN

	    AP = 2;
	    IF  RM$COMPARE_KEY (.IRAB[IRB$L_RBF],
				KEYBUF_ADDR(6),
				.IDX_DFN[IDX$B_KEYSZ]) GTR 0    
	    THEN
		RETURN RMSERR(SEQ);
	    END;

	AP = 3;
	REC_ADDR = .IRAB[IRB$L_RBF];
	RM$RECORD_KEY (KEYBUF_ADDR(6));

	IRAB[IRB$V_PUTS_LAST] = 1;
	END
    ELSE
	IRAB[IRB$V_PUTS_LAST] = 0;

    ! Prepare to position to the point of insertion of the new record within the
    ! primary index.
    !
    IRAB[IRB$L_CURBDB] = 0;
    IRAB[IRB$B_STOPLEVEL] = 0;
    IRAB[IRB$B_KEYSZ] = .IDX_DFN[IDX$B_KEYSZ];
    IRAB[IRB$W_SRCHFLAGS] = IRB$M_POSINSERT;

    ! Move the record's key into keybuffer 2 and into keybuffer 3.
    !
    AP = 3;
    REC_ADDR = .IRAB[IRB$L_RBF];
    RM$RECORD_KEY (KEYBUF_ADDR(2));

    CH$MOVE (.IDX_DFN[IDX$B_KEYSZ], KEYBUF_ADDR(2), KEYBUF_ADDR(3));

    ! If the key is a packed decimal string, then call the packed decimal 
    ! validation routine.
    !
    IF .IDX_DFN[IDX$B_DATATYPE] EQLU IDX$C_PACKED
    THEN
	RETURN_ON_ERROR (RM$PCKDEC_CHECK());

    ! It is possible under a very restricted set of circumstances, that 
    ! multiple positionings to the point of insertion will be required. Towards
    ! this end place the positioning code within an infinite loop that can only
    ! be exited when it is firmly decided what to do with the new record. The
    ! set of circumstances under which multiple positions will be required is:
    !
    ! 1. The primary key of the new record already exists in the file.
    ! 2. The file does not allow duplicate primary keys.
    ! 3. The user has allowed updates to the file 
    ! 4. The user has requested an $UPDATE to be performed in such a case.
    ! 5. The stream must wait for the record lock on the record to be updated 
    !    to be granted before performing the $UPDATE. 
    !
    ! In such a situation RMS must re-position to the point of insertion to 
    ! determine whether it should still perform an $UPDATE, or whether that 
    ! record has been removed, and it need do only a $PUT of the new record.
    !
    WHILE 1
    DO
	BEGIN

	LOCAL
	    STATUS;

	! Position to the point of insertion of the new record.
	!
	IRAB[IRB$B_SPL_BITS] = 0;
	STATUS = RM$CSEARCH_TREE();

	! If no primary index exists then create one at this time and 
	! re-position.
	!
	IF .STATUS<0, 16> EQL RMSERR(IDX)
	THEN
	    BEGIN

	    RETURN_ON_ERROR (RM$MAKE_INDEX());

	    STATUS = RM$CSEARCH_TREE();
	    END;

	! Terminate the current operation if RMS could not position to the point
	! of insertion of the new record.
	!
	IF NOT .STATUS
	THEN
	    RETURN .STATUS;

	! If the IRB$V_CON_EOF state bit is set, verify that no record exists 
	! after the insert position which was just determined by 
	! RM$CSEARCH_TREE.  This will always be a best guess in a shared 
	! environment. This check is done by scanning the buckets along the
	! horizontal chain looking for non-deleted records until the end of the
	! chain is encountered. During this scan RMS must release the bucket 
	! containing the insertion point of the new record if it isn't the
	! last bucket. This is because an RRV update could keep a rightward 
	! bucket locked and be trying to access this bucket. This would be a
	! deadlock. If RMS is able to successful verify that there are no
	! un-deleted records following the insertion point, then RMS 
	! re-positions to the point of insertion of the new record and 
	! continues.
	!
	! Note: IRB$V_CON_EOF is turned off after the first $PUT or after any 
	! random $GET. Sequential $GETs will merely return RMS$_EOF until the 
	! IRB$V_CON_EOF bit is off.
	!
	IF .IRAB[IRB$V_CON_EOF]
	THEN
	    BEGIN

	    ! Save the VBN of the bucket containing the insert position. 
	    ! RM$CONFIRM_EOF will use this VBN to re-position to this bucket 
	    ! prior to returning if and only if there are no non-deleted records
	    ! following the current point of insertion.
	    !
	    IRAB[IRB$L_MIDX_TMP3] = .BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_VBN];

   	    ! Perform the check to see if there is a non-deleted record 
	    ! following the current position of insertion of the new record.
	    ! If there is, return an error; otherwise, reposition to the
	    ! point of insertion for the new record and clear the state bit.
	    !
	    RETURN_ON_ERROR (RM$CONFIRM_EOF());
	    RETURN_ON_ERROR (RM$CSEARCH_TREE());
	    IRAB[IRB$V_CON_EOF] = 0;
	    END;

	! Make sure that RMS didn't see any duplicates if duplicates aren't 
	! allowed. If RMS did see them and they are allowed, set the IRB$V_DUP 
	! bit.
	!
	IF .IRAB[IRB$V_DUPS_SEEN]
	THEN
	    IF NOT .IDX_DFN[IDX$V_DUPKEYS]
	    THEN
		BEGIN

		! Determine whether an $UPDATE maybe done in place of the $PUT.
		! If so, set up do it, otherwise return the appropriate error.
		!
		IF NOT (STATUS = RM$UPDATE_IF())
		THEN

		    ! If there is already a record in the file with the same
		    ! primary key as the new record, but that record has been
		    ! RU_DELETEd by either this very same process or a process
		    ! that has successfully completed its recovery unit then 
		    ! the new record is not a duplicate and a $PUT maybe done 
		    ! to insert it. In this case the positioning loop maybe 
		    ! left as the point of insertion of the new record has 
		    ! been located.
		    !
		    IF .STATUS EQLU 0
		    THEN
			EXITLOOP

		    ! Otherwise, some error has been encountered, so return 
		    ! the appropriate status.
		    !
		    ELSE
			RETURN .STATUS;

		! If RMS was able to lock the record to be updated without any
		! difficulties, and furthermore, found that it had not been
		! deleted within any recovery unit by this or any other process,
		! then go ahead and update it.
		!
		IF .STATUS<0,16> NEQU RMSSUC(OK_WAT)
		THEN
		    BEGIN		
	    	    IRAB[IRB$V_UPDATE_IF] = 1;
	      	    STATUS = RM$UPDATE3B();
	    	    IRAB[IRB$V_UPDATE_IF] = 0;
		    RETURN .STATUS;
		    END;

		! If RMS had to wait for a record lock to be granted on the
		! record which is to be updated, then while it waited it
		! released its lock on the primary data bucket. RMS must now
		! re-position back to the record, and the easiest way to do
		! this (taking into account that the record might have been
		! deleted and RMS would want to do a $PUT now) is to go through
		! the re-positioning loop one more time. The lock on the record
		! itself has already been released.
		!
		END

	    ! The positioning loop maybe left because the new record's primary
	    ! key has been found to be a duplicate, duplicates are allowed, and
	    ! thus the point of insertion of the new record has been located.
	    !
	    ELSE
		BEGIN
		IRAB[IRB$V_DUP] = 1;
		EXITLOOP;
		END

	! The positioning loop maybe left because the new record's primary key
	! is not represented in the file, and thus, the point of insertion of 
	! the new record has been located.
	!
	ELSE
	    EXITLOOP;

	END;

    ! Prepare to insert the primary data record.
    !
    BEGIN

    GLOBAL REGISTER
	COMMON_IO_STR;

    BDB = .IRAB[IRB$L_CURBDB];
    BKT_ADDR = .BDB[BDB$L_ADDR];

    ! Insert the primary data record. To do so the size of the primary data
    ! record is computed, and an attempt is made to insert it into the current
    ! primary data bucket at the point of insertion. If there is insufficient 
    ! freespace in the bucket or insufficient record IDs, then a primary data 
    ! bucket split is done, and the new record is inserted appropriately. 
    !
    BEGIN

    LOCAL
	ID_SPLIT,
	RECORD_SIZE;

    ID_SPLIT = 0;

    ! Determine the amount of space the new record will occupy in the bucket,
    ! and check for the availability of record IDs. If there are no record IDs
    ! available in the bucket then the primary data bucket will have to be
    ! split regardless of whether or not there is sufficient space in the
    ! bucket for the new record. Both of these determinations are prologue 
    ! dependent.
    !
    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BEGIN
	RECORD_SIZE = .IRAB[IRB$W_RSZ] + IRC$C_FIXOVHDSZ;

	IF .IFAB[IFB$B_RFMORG] NEQU FAB$C_FIX
	THEN
	    RECORD_SIZE = .RECORD_SIZE + IRC$C_DATSZFLD;

	! Check for the availability of record IDs. Because the file is a 
	! prologue 1 or 2 file there maybe some free record IDs within the
	! the bucket. Free IDs occur when records are moved out of a bucket as 
	! the result of a bucket split and the primary data bucket splitting 
	! was not their original bucket. If free IDs are found, they maybe used.
	!
	IF .BKT_ADDR[BKT$B_NXTRECID] EQLU 0
	     OR
	   .BKT_ADDR[BKT$B_NXTRECID] GTRU .BKT_ADDR[BKT$B_LSTRECID]
	THEN
	    IF NOT RM$BKT_SORT(.BKT_ADDR)
	    THEN
		BEGIN
		ID_SPLIT = 1;
		BKT_ADDR[BKT$B_NXTRECID] = 0;
		IRAB[IRB$W_POS_INS] = .REC_ADDR - .BKT_ADDR;
		END;
	END
    ELSE
	BEGIN
	RECORD_SIZE = RM$PACK_REC();
	RECORD_SIZE = .RECORD_SIZE + IRC$C_FIXOVHSZ3;

	! All version 3 files have a record size, except fixed length records
	! that have not been compressed.
	!
	IF .IFAB[IFB$B_RFMORG] NEQU FAB$C_FIX
	    OR 
	   (.IFAB[IFB$B_RFMORG] EQL FAB$C_FIX
			 AND 
			.IDX_DFN[IDX$B_DATBKTYP] NEQU IDX$C_NCMPNCMP)
	THEN
	    RECORD_SIZE = .RECORD_SIZE + IRC$C_DATSZFLD;

	! Check for the availability of record IDs. 
	! 
	IF .BKT_ADDR[BKT$W_NXTRECID] EQLU 0
	THEN
	    BEGIN
	    ID_SPLIT = 1;
	    IRAB[IRB$W_POS_INS] = .REC_ADDR - .BKT_ADDR;
	    END;
	END;

    ! If both record IDs and sufficient space are available in the bucket then
    ! insert the new record; otherwise, split the primary data record inserting
    ! the new record in the process.
    !
    IF  .ID_SPLIT
	 OR
	NOT RM$INSERT_UDR (RECORD_SIZE)
    THEN
	RETURN_ON_ERROR (RM$PUT_UPD_SPL (.RECORD_SIZE), BEGIN
							IRAB[IRB$V_UPDATE] = 0;
							RM$CLEAN_BDB()
							END)

    ! If RMS was able to insert the new record into the current bucket without
    ! splitting it and if the operation is taking place on a RU Journallable 
    ! file within a Recovery Unit, then RU Journal the operation at this time 
    ! before the modified primary data bucket is released.
    !
    ! NOTE: if a primary bucket data split was required, then the RU 
    !	    Journalling of this operation would have taken place within 
    !	    RM$PUT_UPD_SPL before the modified original bucket was released.
    !
    ELSE
	IF .IFAB[IFB$V_RUP]
	THEN
	    BEGIN
	    REC_ADDR = .IRAB[IRB$L_RBF];

	    RETURN_ON_ERROR (RM$RU_JOURNAL3 (RJR$_PUT,
					     .IRAB[IRB$L_PUTUP_VBN],
					     .IRAB[IRB$W_PUTUP_ID],
					     .IRAB[IRB$W_RSZ]),
			     RM$CLEAN_BDB());
	    END;
    END;

    ! The new record, having been inserted, is now locked.
    !
    RETURN_ON_ERROR (RM$LOCK (.IRAB[IRB$L_PUTUP_VBN], .IRAB[IRB$W_PUTUP_ID]),
	BEGIN
	IRAB[IRB$V_UPDATE] = 0;
	RM$CLEAN_BDB()
	END);

    IF NOT .RAB[RAB$V_ULK]
    THEN
	IRAB[IRB$V_UNLOCK_RP] = 1;

    ! If the primary data bucket has split, and the primary index must be 
    ! updated, then do so at this time.
    !
    IF TESTBITSC (IRAB[IRB$V_UPDATE])
    THEN
	BEGIN

	LOCAL
	    STATUS;

	IRAB[IRB$B_STOPLEVEL] = 1;
	IRAB[IRB$W_SRCHFLAGS] = IRB$M_POSINSERT;

	! If an error occurs and no previous error has been saved, save
	! the new error status.
	!
	IF NOT (STATUS = RM$INSS_OR_IDX())
	THEN
	    BEGIN
	    IF .RAB[RAB$L_STV] EQL 0 THEN
		RAB[RAB$L_STV] = .STATUS OR 1^16; ! 1^16 is RMS's facility code
	    IRAB[IRB$V_IDX_ERR] = 1;
	    END

	END

    ! If no index update is required, then release the primary data bucket
    ! and any level above that might have been locked during positioning.
    !
    ELSE
	BEGIN

	! Note that the original bucket may have been written with a keep lock
	! or may not have been released at all yet, depending on the path taken
	! to get here. This is assuming that we do not want to force a write of
	! the bucket if no split has taken place to take advantage of deferred
	! write. If this notion changes, so must this code.
	!
	BDB = .IRAB[IRB$L_CURBDB];
	IRAB[IRB$L_CURBDB] = 0;

	RETURN_ON_ERROR (RM$RLSBKT(0), RM$CLEAN_BDB());

	IF (BDB = .IRAB[IRB$L_LOCK_BDB]) NEQ 0
	THEN
	    BEGIN
	    RM$RLSBKT(0);
	    IRAB[IRB$L_LOCK_BDB] = 0;
	    END;
	END;

    ! Insert all of the alternate keys.
    !
    RETURN_ON_ERROR (RM$INS_ALL_SIDR(),	RM$CLEAN_BDB());

    ! Finish up the operation.
    !
    RETURN RM$PUT_UPD_FIN();

    END
    END;


%SBTTL 'RM$UPDATE_IF'
ROUTINE RM$UPDATE_IF : RL$LINKAGE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Perform all of the pre-processing necessary to convert a $PUT into
!	an $UPDATE. This includes:
!
!	1. Positioning to the record to be updated.
!	2. Locking the primary data record provided record locking has not been
!	   disabled.
!	3. Determining whether this record can be updated, or whether the new 
!	   record should still be inserted based upon: 
!
!	   a. The ease with which the record lock was obtained. 
!	   b. The RU_DELETE status of the record which has just been locked. 
!	   c. Whether updates are allowed at all on the file.
!	   d. Whether updates are allowed in this specific case.
!
! CALLING SEQUENCE:
!
!	BSBW RM$UPDATE_IF()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	IFAB			- address of IFAB
!	    IFB$V_NORECLK	- if set, record locking is disabled
!	    IFB$V_UPD		- if set, updates are allowed on this file
!	    IFB$B_RUP		- if set Recovery Unit is in progress
!	    IFB$V_RU_RLK	- if set, perform pseudo record locking
!
!	IRAB			- address of IRAB
!	    IRB$L_CURBDB	- address of buffer descriptor for UDR's bucket
!	    IRB$L_LST_REC	- address of last non-deleted record 
!
!	RAB			- address of user RAB control block
!	    RAB$V_UIF		- if set, a $PUT maybe converted into $UPDATE
!
!	REC_ADDR 		- address following record to be updated
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	IRAB			- address of IRAB
!	    IRB$W_PUTUPD_ID	- ID of primary data record to be updated
!	    IRB$L_PUTUPD_VBN	- VBN of primary data record to be updated
!	    IRB$V_UNLOCK_RP	- if set, release current record lock on errors
!
! ROUTINE VALUE:
!
!	0	- a $PUT is to be performed
!	RLK	- record to be updated is locked by another stream
!	DME 	- dynamic memory exhausted
!	SUC	- success
!	OK_WAT	- success, but had to wait for record lock
!	OK_ALK	- success, but this stream already had this record locked
!	OK_RULK	- success, but this stream had locked this record within a RU
!
! SIDE EFFECTS:
!
!	If a decision is made to perform an $UPDATE, then the record to be 
!	    updated is positioned to, made the current record, and locked 
!	    (the latter if record locking is not disabled). Under certain 
!	    circumstances, this record maybe reformated.
!	If a decision is made to perform a $PUT, then any record locks requested
!	    within this routine are released and this routine returns 0 with
!	    REC_ADDR pointing at where the new record is to be inserted. Under
!	    certain circumstances a record marked RU_DELETE might have been
!	    deleted from the file.
!	On any errors, or when RMS decides it must perform a re-positioning,
!	    any record locks granted within this routine are released.
!	On errors that terminate the current operation, this routine releases
!	    all bucket locks held by the stream.
!
!--

    BEGIN

    BUILTIN
	AP,
	TESTBITSC;

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    LOCAL
	ID,
	SAVE_REC_ADDR,
	STATUS,
	VBN;

    ! Position to the preceeding record, the record which is to be updated.
    !
    SAVE_REC_ADDR = .REC_ADDR;
    REC_ADDR = .IRAB[IRB$L_LST_REC];

    ! If record locking is enabled, lock the record RMS has positioned to,
    ! otherwise, assume success for the time being.
    !
    AP = 3;

    BEGIN

    GLOBAL REGISTER
	R_BDB;

    VBN = RM$RECORD_VBN();
    END;

    ID  = RM$RECORD_ID();

    IF  NOT .IFAB[IFB$V_NORECLK]
	 OR
	(.IFAB[IFB$V_RU_RLK]
		 AND
		.IFAB[IFB$V_RUP])
    THEN
	IF (STATUS = RM$LOCK (.VBN, .ID))
	    AND
	   .STATUS<0,16> NEQU RMSSUC(OK_ALK)
	THEN
	    IRAB[IRB$V_UNLOCK_RP] = 1
	ELSE
	    IRAB[IRB$V_UNLOCK_RP] = 0
    ELSE
	STATUS = RMSSUC();

    ! RMS is able to lock the record it has positioned to without waiting for 
    ! the lock to be granted, but finds that this record has been deleted within
    ! a recovery unit. In this case, RMS may proceed to insert the new record
    ! instead of converting the current operation into an $UPDATE. Furthermore,
    ! If the RU deleted record had been deleted within another process's
    ! recovery unit (which has since completed successfully), RMS may now delete
    ! this record. 
    !
    IF  .STATUS
	 AND
	.STATUS<0,16> NEQU RMSSUC(OK_WAT)
	 AND
	.REC_ADDR[IRC$V_RU_DELETE]
    THEN
	BEGIN

	! Unless this stream already had this record locked, release the lock 
	! that was granted above. In either case, clear the bit IRB$V_UNLOCK_RP
	! so no attempt will be made to release a record lock on any subsequent
	! errors.
	!
	IF TESTBITSC (IRAB[IRB$V_UNLOCK_RP])
	THEN
	    RM$UNLOCK (.VBN, .ID);

	! If the RU deleted record has been deleted within another process's 
	! recovery unit or within the current process's recovery unit and the
	! recovery unit has successfully completed, then delete the record for
	! good, and re-position to the new record's point of insertion.
	!
	IF NOT ((.STATUS<0,16> EQLU RMSSUC(OK_RULK))
		 OR
		(.STATUS<0,16> EQLU RMSSUC(OK_ALK)
			 AND
			.IFAB[IFB$V_RUP]))
	THEN
	    BEGIN

	    GLOBAL REGISTER
		R_BDB_STR,
		R_BKT_ADDR;

	    LOCAL
		SAVE_REC_ID;

	    SAVE_REC_ID = .REC_ADDR[IRC$W_ID];
	    REC_ADDR[IRC$V_RU_DELETE] = 0;
	    REC_ADDR[IRC$V_RU_UPDATE] = 0;

	    BDB = .IRAB[IRB$L_CURBDB];
	    RM$DELETE_UDR();
	    BDB[BDB$V_DRT] = 1;

	    ! If the ID of the record REC_ADDR points to is the same as the
	    ! ID of the record just deleted, then the record could not be
	    ! completed deleted; therefore, position past it to the point of 
	    ! insertion of the new record.
	    !
	    IF .SAVE_REC_ID EQLU .REC_ADDR[IRC$W_ID]
	    THEN
		RM$GETNEXT_REC();

	    END

	! If the record which has been locked was already locked by this process
	! (presumably within a recovery unit), then this record can not be 
	! deleted at this time. Just restore the address of the point of 
	! insertion of the new record.
	!
	ELSE
	    REC_ADDR = .SAVE_REC_ADDR;

	! Return a status of 0 to signal that a $PUT should still be done.
	!
	STATUS = 0;
	END

    ! RMS is able to lock the record it has positioned to without waiting for 
    ! the lock to be granted, and furthermore finds that this record has not 
    ! been deleted within a recovery unit; or, it encountered an error in its
    ! attempt to lock the record. In the former case, RMS may proceed to $UPDATE
    ! this record provided updates are allowed in this particular circumstance. 
    ! In the latter case, RMS will change the error to something more 
    ! appropriate if the record had been locked and updates would not have been 
    ! allowed. If this routine is to return an error, all locked buckets are
    ! released at this point.
    !
    ELSE
	IF .STATUS<0,16> NEQU RMSSUC(OK_WAT)
	THEN
	    BEGIN

	    ! Map the current status into the appropriate error status if the
	    ! file has not been opened for update access or updates are not
	    ! allowed in this particular circumstance (ie - a $PUT may not be
	    ! converted into an $UPDATE).
	    !
	    IF NOT .RAB[RAB$V_UIF]
	    THEN
		STATUS = RMSERR(DUP)
	    ELSE
		IF NOT .IFAB[IFB$V_UPD]
		THEN
		    STATUS = RMSERR(FAC);

	    ! If a $PUT maybe converted into an $UPDATE, then setup to do the
	    ! $UPDATE.
	    !
	    IF .STATUS
	    THEN
		BEGIN

		IRAB[IRB$L_PUTUP_VBN] = .VBN;
		IRAB[IRB$W_PUTUP_ID]  = .ID;

		! Under the following set of circumstances, reformat the record
		! which is to be updated:
		! 
		! 1. The record was put into a special format after a previous
		!    $UPDATEing within a recovery unit in order to preserve 
		!    space for the duration of the recovery unit which otherwise
		!    would have been lost.
		! 2. Either the current process is not in a recovery unit, or 
		!    the current stream was able to directly obtain the record
		!    indicating the completion of the recovery unit in which
		!    the previous $UPDATE had been done.
		!
		IF .REC_ADDR[IRC$V_RU_UPDATE]
		THEN
		    IF  NOT .IFAB[IFB$V_RUP]
			 OR
			.STATUS<0,16> EQLU RMSSUC()
		    THEN
			BEGIN

			GLOBAL REGISTER
			    R_BKT_ADDR;

			BKT_ADDR = .BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_ADDR];
			RM$RU_REFORMAT();
			END;
		END

	    ! If some error has been encountered in this routine whether in 
	    ! locking the record to be updated or in the conversion of the $PUT
	    ! into the $UPDATE, then release all bucket locks and any record 
	    ! locks that this routine has obtained before returning the error.
	    !
	    ELSE
		BEGIN

		IF TESTBITSC (IRAB[IRB$V_UNLOCK_RP])
		THEN
		    RM$UNLOCK (.VBN, .ID);

		RM$CLEAN_BDB();
		END;

	    END

	! If RMS had to wait for a record lock to be granted, then while it
	! was waiting it had to release the bucket containing the record it 
	! eventually was able to lock. Because anything might have happened
	! once this stream released the primary data bucket including the
	! deletion of the record RMS has locked, what RMS must do is force
	! a re-positioning so that it may re-determine whether it should
	! insert the new record or use it to update an existing record. 
	! Before returning so that the re-positioning maybe done, RMS releases
	! the record lock it had to wait for.
	!
	ELSE
	    BEGIN
	    IRAB[IRB$V_UNLOCK_RP] = 0;

	    IF (STATUS = RM$UNLOCK (.VBN, .ID))
	    THEN
		STATUS = RMSSUC(OK_WAT)
	    ELSE
		RM$CLEAN_BDB();
	    END;

    ! Return status.
    !
    RETURN .STATUS;
    
    END;
END

ELUDOM
