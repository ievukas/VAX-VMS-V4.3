	.TITLE	EXIT - EXIT DCLS COMMAND EXECUTION
	.IDENT	'V04-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; W. H. BROWN 25-JUN-1977
;
; EXIT COMMAND EXECUTION
;
; MODIFIED BY:
;
;	V03-006	HWS0076		Harold Schultz	29-Jun-1984
;		Always run down images when EXIT command executed,
;		regardless of the indirect level.
;
;	V03-005	HWS0038		Harold Schultz	26-Mar-1984
;		Correct error message output in DCL$WAIT.
;
;	V03-004	PCG0006		Peter George	29-Jun-1983
;		Add home brew $SETIMR interlock mechanism.
;
;	V03-003	PCG0005		Peter George	03-May-1983
;		Specify REQIDT in SETIMR and CANTIM.
;
;	V03-002	PCG0004		Peter George	17-Jan-1983
;		Preserve status across subroutine calls.
;
;	V03-001	PCG0003		Peter George	30-Dec-1982
;		Set status on batch exit.
;---

;
; MACRO LIBRARY CALLS
;
 
	PRCDEF				; DEFINE PROCESS WORK AREA
	WRKDEF				; DEFINE COMMAND WORK AREA
	$CLIMSGDEF			; DEFINE CLI RELATED ERROR MESSAGES
	$STSDEF				; DEFINE STATUS CODE FORMAT

	.PSECT	DCL$ZCODE,BYTE,RD,NOWRT

	.SBTTL	EXIT COMMAND 
;+
; DCL$EXIT - EXIT COMMAND
;
; THIS ROUTINE IS CALLED AS AN INTERNAL COMMAND TO EXECUTE THE EXIT DCLS COMMAND.
;
; INPUTS:
;
;	R10 = BASE ADDRESS OF COMMAND WORK AREA.
;	R11 = BASE ADDRESS OF PROCESS WORK AREA.
;
; OUTPUTS:
;
;	THE EXIT EXPRESSION IS EVALUATED
;
;	R0 LOW BIT CLEAR INDICATES EXPRESSION EVALUATION FAILURE.
;
;		R0 = DCL$_COMPLX - EXPRESSION TOO COMPLEX.
;		R0 = DCL$_EXPSYN - EXPRESSION SYNTAX ERROR.
;		R0 = DCL$_IVCHAR - INVALID CHARACTER IN NUMERIC STRING.
;		R0 = DCL$_IVOPER - INVALID EXPRESSION OPERATOR.
;		R0 = DCL$_UNDSYM - UNDEFINED SYMBOL.
;
;	IF THE EXPRESSION EVALUTES OK, THE INDIRECT LEVEL IS UNSTACKED
;	ONE LEVEL AND THE STATUS IS SET TO THE VALUE OF THE EXPRESSION,
;	OR IS LEFT AS THE ORIGINAL VALUE IF THE EXPRESSION WAS NULL.
;	R0 LOW BIT SET INDICATES SUCCESSFUL COMPLETION.
;
;		R0 = DCL$_NORMAL - NORMAL COMPLETION.
;-
 
DCL$EXIT::				; EXIT COMMAND
	BISL3	#STS$M_INHIB_MSG,-	; GET LAST STATUS WITH INHIBIT MSG
		PRC_L_LSTSTATUS(R11),R8 ;
	BSBW	DCL$SETNBLK		; FIND NON-BLANK CHARACTER
	BEQL	10$			; BR IF NONE-STATUS GETS SAVED
	BSBW	DCL$BINEXPR		; EVALUATE BINARY EXPRESSION
	BLBC	R0,40$			; BR IF ERROR EVALUATING EXPRESSION
	MOVL	R1,R8			; SET RESULT OF EXPRESSION EVALUATION
10$:	MOVL	R8,PRC_L_LSTSTATUS(R11)	; STORE STATUS
	BSBW	DCL$RUNDWNI		; RUN DOWN IMAGE BUT PRESERVE IND. LEVEL
	TSTL	PRC_L_INDEPTH(R11)	; INDIRECT LEVEL 0?
	BEQL	50$			; BR IF THERE IS NOTHING TO UNSTACK
	BSBW	DCL$UNSTACK		; REMOVE ONE LEVEL OF INDIRECT
20$:	MOVL	PRC_L_LSTSTATUS(R11),R0	; SET RESULTANT STATUS
	BISW	#WRK_M_COMMAND,-	; SET COMMAND IN EXECUTION
		WRK_W_FLAGS(R10) 	;
40$:	RSB				;
 
;
; AN EXIT COMMAND ISSUED FOR COMMAND LEVEL 0
; THIS IS A CALL EXIT HANDLER/FORCE EXIT FOR INTERACTIVE JOBS AND
; A LOGOUT FOR BATCH JOBS.
;
50$:	BBC	#PRC_V_MODE,-		; BRANCH IF INTERACTIVE(IMAGE ALREADY
		PRC_W_FLAGS(R11),20$ 	;      RUN DOWN)

	MOVL	PRC_L_LSTSTATUS(R11),R0	; SET STATUS
	BSBW	DCL$SAVE_STATUS		; SET $STATUS AND $SEVERITY
	BRW	DCL$ABORT		; FORCE LOGOUT

	.SBTTL	WAIT COMMAND 
;+
; DCL$WAIT - WAIT COMMAND
;
; THIS ROUTINE IS CALLED AS AN INTERNAL COMMAND TO EXECUTE THE WAIT COMMAND.
;
; INPUTS:
;
;	R10 = BASE ADDRESS OF COMMAND WORK AREA.
;	R11 = BASE ADDRESS OF PROCESS WORK AREA.
;
;	THE NEXT TOKEN ON THE COMMAND LINE MUST BE A VALID
;	EXPRESSION FOR DELTA TIME MINUS THE NUMBER OF DAYS FIELD.
;
; OUTPUTS:
;
;	THE COMMAND FILE EXECUTION IS WAITED FOR THE SPECIFIED TIME.
;-
DCL$WAIT::				;
	BSBW	DCL$MARK		; MARK CURRENT POSITION IN BUFFER
	MOVL	WRK_L_EXPANDPTR(R10),R2	; COPY START OF TIME FIELD
	MOVW	#^A/0 /,(R2)		; APPEND ZERO DAY COUNT FOR WAIT
	ADDL	#2,WRK_L_EXPANDPTR(R10)	; UPDATE EXPANSION POINTER
10$:	BSBW	DCL$MOVCHAR		; MOVE A CHARACTER TO PARSE BUFFER
	BNEQ	10$			; UNTIL END OF LINE
	BSBW	DCL$MARKEDTOKEN		; GET DESCRIPTOR OF TIME STRING
	DECL	R1			; DISCOUNT EOL CHARACTER
	PUSHR	#^M<R1,R2>		; BUILD DESCRIPTOR FOR TIME STRING
	MOVAW	PRC_W_WAITIOSB(R11),R7	; GET WAIT IOSB ADDRESS
	$CANTIM_S  REQIDT=R7		; CANCEL ANY PREVIOUS TIMERS
	MOVL	SP,R3			; SAVE ADDRESS OF QUAD WORD DESCRIPTOR
	$BINTIM_S  (R3),(R3)		; CONVERT TIME TO BINARY DELTA FORMAT
	BLBC	R0,30$			; BR IF ERROR IN TIME
	CLRW	(R7)			; CLEAR WAIT IOSB STATUS
	$SETIMR_S  EFN=#EXE$C_SYSEFN,-	; SET TIMER FOR SPECIFIED TIME
		DAYTIM=(R3),-		;
		ASTADR=WAIT_AST,-	;
		REQIDT=R7		;
	BLBC	R0,30$			; BR IF ERROR SETTING TIMER
	$SYNCH_S  IOSB=(R7),-		; WAIT THE SPECIFIED TIME
		EFN=#EXE$C_SYSEFN	;
	BRB	35$			; GOTO EXIT
30$:	STATUS	IVDTIME			; SET INVALID DELTA TIME.
35$:	CLRQ	(SP)+			; REMOVE SCRATCH QUAD WORD FROM STACK
	RSB

	.SBTTL	WAIT AST ROUTINE
;+
; WAIT_AST - WAIT AST ROUTINE
;
; THIS ROUTINE PROVIDES THE WAIT EVENT FLAG SYNCHRONIZATION.
;
; INPUTS:
;
;	NONE
;
; OUTPUTS:
;
;	R0 = SUCCESS
;-
 
WAIT_AST:					;FLUSH OUTPUT
	.WORD	^M<R7>				;
	MOVW	#1,@4(AP)			;SET THE STATUS IN THE WAIT IOSB
	STATUS	NORMAL				;SET SUCCESSFUL STATUS
	RET					;

	.END
