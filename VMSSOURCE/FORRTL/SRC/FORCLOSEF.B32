MODULE FOR$$CLOSE_FILE (%TITLE 'CLOSE FILE'
		IDENT = '1-002'		! File: FORCLOSEF.B32  Edit: SBL1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: FORTRAN Language Support
!
! ABSTRACT:
!
!	This module issues an RMS close to a file on a LUN.
!
! ENVIRONMENT: User access level; re-entrant, AST level or not.
!
! AUTHOR: Steven B. Lionel, 30-Sep-1982
!
! MODIFIED BY:
!
! 1-001 - Adapted from OTS$$CLOSE_FILE, version 1-012.  SBL 30-Sep-1982
! 1-002 - Use FAB and NAM in CCB.  SBL 20-Jan-1983
!--


!
! PROLOGUE FILE:
!

REQUIRE 'RTLIN:FORPROLOG';			! FORTRAN definitions

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$$CLOSE_FILE : CALL_CCB;			! Internal file close

!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	NONE
!


GLOBAL ROUTINE FOR$$CLOSE_FILE 			! Internal file closer
    : CALL_CCB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Do an RMS CLOSE or DISCONNECT of a LUN.  This includes handling
!	any of the disposition flags in the LUB, whether set by OPEN or CLOSE.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	Various fields from the LUB, pointed to by CCB.
!
! IMPLICIT OUTPUTS
!
!	Various fields in the LUB and RAB.
!
! ROUTINE VALUE:
!
!	The same as RMS CLOSE.  The caller generally only tests the
!	low-order bit of the completion code: if 1 the close succeeded,
!	if 0 it failed.
!
! SIDE EFFECTS:
!
!	CLOSEs the LUN, and marks it for deallocation.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF $FOR$CCB_DECL;

    LOCAL
	CLOSE_RESULT;				! RMS result of $CLOSE

    BIND
	FAB = CCB: REF $FOR$FAB_CCB_STRUCT,
	NAM = CCB: REF $FOR$NAM_CCB_STRUCT;

    !+
    ! If V_DELETE is on in the LUB, set the DLT bit in the FAB.
    !-

    IF .CCB [LUB$V_DELETE] THEN FAB [FAB$V_DLT] = 1;

    !+
    ! If V_PRINT is on in the LUB, set the SPL bit in the FAB.
    !-

    IF .CCB [LUB$V_PRINT] THEN FAB [FAB$V_SPL] = 1;
    
    !+
    ! If V_SUBMIT is on in the LUB, set the SCF bit in the FAB.
    !-

    IF .CCB [LUB$V_SUBMIT] THEN FAB [FAB$V_SCF] = 1;

    !+
    ! If the file was not successfully OPENed, zero the XAB chain pointer.
    !-

    IF NOT .CCB [LUB$V_OPENED]
    THEN
	FAB [FAB$L_XAB] = 0;

    !+
    ! Now do the RMS close if IFI is not zero.
    !-

    IF .FAB [FAB$W_IFI] NEQ 0
    THEN
	BEGIN

!+
! Do a $CLOSE and put the error codes into the RAB so that
! our caller has a better idea of what the error was.
!-

	CLOSE_RESULT = $CLOSE (FAB = FAB [0,0,0,0]);
	IF NOT .CLOSE_RESULT
	THEN
	    BEGIN
	    CCB [RAB$L_STS] = .CLOSE_RESULT;
	    CCB [RAB$L_STV] = .FAB [FAB$L_STV];
	    END;
	END
    ELSE
	CLOSE_RESULT = 1;

    !+
    ! Indicate that the LUN has been closed, so further I/O to it will
    ! fail.
    !-

    CCB [LUB$V_OPENED] = 0;

    !+
    ! Flag FOR$$CB_POP that it is to deallocate the virtual storage
    ! occupied by this LUN.  This bit also prevents OPEN from opening
    ! this LUN.  OPEN will only see it if FOR$$CB_POP does not deallocate
    ! the LUB, which will happen only if there is recursive I/O active on
    ! the LUN.  When all of the recursive I/O has failed then the LUN
    ! can be opened again.
    !-

    CCB [LUB$V_DEALLOC] = 1;

    !+
    ! Return the RMS status resulting from the CLOSE.
    !-

    RETURN (.CLOSE_RESULT);
    END;

END						! END of FOR$$CLOSE_FILE module

ELUDOM
