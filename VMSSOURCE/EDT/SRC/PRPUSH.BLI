%TITLE 'EDT$PRPUSH - new parse node'
MODULE EDT$PRPUSH (				! New parse node
		IDENT = 'V04-000'			! File: PRPUSH.BLI Edit: JBS1004
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Create a new parse node.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: December 12, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 25-Feb-1981.  This module was created by
!	extracting routine PUSH from module PARSER.
! 1-002	- Regularize headers.  JBS 12-Mar-1981
! 1-003	- Use new message codes.  JBS 04-Aug-1981
! 1-004	- Improve the appearance of the listing.  JBS 17-Jun-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$PA_NEW_NOD;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

REQUIRE 'EDTSRC:PARLITS';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$PA_NEW_NOD  - new parse node'

GLOBAL ROUTINE EDT$$PA_NEW_NOD (		! New parse node
    NT, 					! Stored in [NODE_TYPE]
    TYP						! Stored in [COM_NUM]
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Create a semantic node of the specified type and subtype.  If the
!	stack overflows, return a 0 otherwise, return the address of the new
!	node.
!
! FORMAL PARAMETERS:
!
!  NT			Stored in [NODE_TYPE]
!
!  TYP			Stored in [COM_NUM]
!
! IMPLICIT INPUTS:
!
!	EDT$$Z_PA_STK
!	EDT$$G_PA_SP
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_PA_ERRNO
!	EDT$$Z_PA_STK
!	EDT$$G_PA_SP
!
! ROUTINE VALUE:
!
!	0 = parse stack overflow
!	non-zero = address of new parse semantic node
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL
	EDT$$G_PA_ERRNO,			! Error number of parsing error.
	EDT$$Z_PA_STK : BLOCKVECTOR [NUM_NODES, NODE_SIZE, BYTE] FIELD (NODE_FIELDS),
	EDT$$G_PA_SP;

    MESSAGES ((PARSTKOVF));

    LOCAL
	NODE : REF NODE_BLOCK;

    EDT$$G_PA_SP = .EDT$$G_PA_SP + 1;

    IF (.EDT$$G_PA_SP GEQU NUM_NODES)
    THEN
	BEGIN
	EDT$$G_PA_ERRNO = EDT$_PARSTKOVF;
	RETURN (0);
	END;

    NODE = EDT$$Z_PA_STK [.EDT$$G_PA_SP, NODE_TYPE];
    CH$FILL (0, NODE_SIZE, .NODE);
    NODE [NODE_TYPE] = .NT;
    NODE [COM_NUM] = .TYP;
    RETURN (.NODE);
    END;					! of routine EDT$$PA_NEW_NOD

!<BLF/PAGE>

END						! of module EDT$PRPUSH

ELUDOM
