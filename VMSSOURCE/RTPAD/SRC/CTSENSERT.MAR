	.TITLE	CTSENSERT - RTPAD/CTERM SENSE CHARACTERISTICS
	.IDENT	'V04-000'
	.ENABLE	SUPPRESSION
	.DISABLE GLOBAL
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; FACILITY:
;
;	CTERM Remote terminal protocol driver
;
; ABSTRACT:
;
;	This module is called to map a characteristics item list received
;	from the net into VMS terminal characteristics.
;
; ENVIRONMENT:
;
;	
;
;--
;
; AUTHOR: Jake VanNoy, CREATION DATE: 23-Aug-1982
;
; MODIFIED BY:
;
;	V03-001	JLV0297		Jake VanNoy		28-JUL-1983
;		Change characteristics symbols.
;
;**


	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$DCDEF
	$SSDEF
	$TTDEF
	$TT2DEF
	$TSADEF

;
; MACROS:
;

.MACRO	CHAR	LABEL
	.WORD		char_type!char_count
	.WORD		LABEL-SENSE_ROUTINES
char_count = char_count + 1
.ENDM	CHAR

.MACRO	BAUDTAB	BPS
	.WORD	BPS
.ENDM	BAUDTAB

.MACRO	TERMTAB	TERM,VALUE
	.BYTE	VALUE
	.ASCIC	/TERM/
.ENDM	TERMTAB

.MACRO	SENSETAB CHAR
	.WORD		char_type!char
.ENDM	SENSETAB


;
; EQUATED SYMBOLS:
;

physical = ch$c_physical@8		; 0 leftshifted 1 byte
logical =  ch$c_logical@8		; 1 leftshifted 1 byte
cterm	=  ch$c_cterm@8			; 2 leftshifted 1 byte

TT_BUF 	 = 0
TT_CHAR1 = 4
TT_CHAR2 = 8
TT_IOSB  = 0

;
; OWN STORAGE:
;

	.PSECT RTPAD,NOWRT

SENSE_TABLE:

char_type = physical
char_count = 1
	CHAR	INPUT_SPEED		; 1
	CHAR	OUTPUT_SPEED		; 2
	CHAR	CHARACTER_SIZE		; 3
	CHAR	PARITY_ENABLE		; 4
	CHAR	PARITY_TYPE		; 5
	CHAR	MODEM_PRESENT		; 6
	CHAR	AUTOBAUD_DETECT		; 7
	CHAR	MANAGEMENT_GUARANTEED	; 8
	CHAR	SWITCH_CHAR_1		; 9
	CHAR	SWITCH_CHAR_2		; 10

char_type = logical
char_count = 1

	CHAR	MODE_WRITING_ALLOWED	; 1
	CHAR	TERMINAL_TYPE		; 2
	CHAR	TERMINAL_SUBTYPE	; 3
	CHAR	OUTPUT_FLOW_CONTROL	; 4
	CHAR	OUTPUT_PAGE_STOP	; 5
	CHAR	FLOW_CHAR_PASS_THRU	; 6
	CHAR	INPUT_FLOW_CONTROL	; 7
	CHAR	LOSS_NOTIFICATION	; 8
	CHAR	LINE_WIDTH		; 9
	CHAR	PAGE_LENGTH		; 10
	CHAR	STOP_LENGTH		; 11
	CHAR	CR_FILL			; 12
	CHAR	LF_FILL			; 13
	CHAR	WRAP			; 14
	CHAR	HORIZONTAL_TAB		; 15
	CHAR	VERTICAL_TAB		; 16
	CHAR	FORM_FEED		; 17

char_type = cterm
char_count = 1

	CHAR	IGNORE_INPUT		; 1
	CHAR	CHAR_ATTRIBUTES		; 2
	CHAR	CONTROL_O_PASS_THRU	; 3
	CHAR	RAISE_INPUT		; 4
	CHAR	NORMAL_ECHO		; 5
;***	CHAR	REQUEST_PROCESSING	; 6
	CHAR	INPUT_ESCAPE_ENABLE	; 7
	CHAR	OUTPUT_ESCAPE_ENABLE	; 8
	CHAR	INPUT_COUNT_STATE	; 9
	CHAR	AUTO_PROMPT		; 10
	CHAR	ERROR_PROCESSING	; 11

	.WORD	-1			; End of list (any negative number)

SENSE_BAUD:				; Table must be in ascending order
	BAUDTAB	0			; 0
	BAUDTAB	50			; 1
	BAUDTAB	75			; 2
	BAUDTAB	110			; 3
	BAUDTAB	134			; 4
	BAUDTAB	150			; 5
	BAUDTAB	300			; 6
	BAUDTAB	600			; 7
	BAUDTAB	1200			; 8
	BAUDTAB	1800			; 9
	BAUDTAB	2000			; 10
	BAUDTAB	2400			; 11
	BAUDTAB	3600			; 12
	BAUDTAB	4800			; 13
	BAUDTAB	7200			; 14
	BAUDTAB	9600			; 15
	BAUDTAB	19200			; 16

TERM_TABLE:				; Table is in order for most likely first
	TERMTAB	VT100,	TT$_VT100
	TERMTAB	VT101,	TT$_VT101
	TERMTAB	VT102,	TT$_VT102
	TERMTAB	VT105,	TT$_VT105
	TERMTAB	VT125,	TT$_VT125
	TERMTAB	VT131,	TT$_VT131
	TERMTAB	VT132,	TT$_VT132
	TERMTAB	VT52,	TT$_VT52
	TERMTAB	VT05,	TT$_VT05
	TERMTAB VK100,	TT$_VK100
	TERMTAB	VT173,	TT$_VT173
;	TERMTAB	TT$_FT1	
;	TERMTAB	TT$_FT2	
;	TERMTAB	TT$_FT3	
;	TERMTAB	TT$_FT4	
;	TERMTAB	TT$_FT5	
;	TERMTAB	TT$_FT6	
;	TERMTAB	TT$_FT7	
;	TERMTAB	TT$_FT8	
	TERMTAB	LA36,	TT$_LA36
	TERMTAB	LA12,	TT$_LA12
	TERMTAB	LA34,	TT$_LA34
	TERMTAB	LA38,	TT$_LA38
	TERMTAB	LA12,	TT$_LA12
	TERMTAB	LA100,	TT$_LA100
	TERMTAB	LA24,	TT$_LA24
	TERMTAB	LQP02,	TT$_LQP02
	TERMTAB	VT55,	TT$_VT55
	.BYTE	0

UNKNOWN_TT:	.ascic	/UNKNOWN/

.nlist meb

.SBTTL CTSENSECHAR - Map READ_CHAR into CHAR using VMS data

;
; Inputs:
;	R0 - CTP
;	R2 - address of requested characteristics buffer (READ_CHAR)
;	R3 - address of buffer to be written
;	R9 - address of 12 buffer of current characteristics
;	R10 - address of iosb from operation
;
; Outputs:
;	R1 is buffer length from start
;	buffer pointed to by R3 is complete
;	All registers destroyed
;
CTSENSECHAR::

	PUSHL	R3			; Save
	MOVZWL	CTP$W_MSGSIZE(R0),R1	; message size
	MOVAB	CTP$B_MSGTYPE(R0),R0	; base address
	ADDL3	R0,R1,R11		; add together for end of message address

10$:	
	MOVZWL	(R2)+,R6		; Get parameter
	CMPL	R2,R11			; past end? *** should be one up?
	BGTRU	25$			; Done, exit	
	MOVW	R6,(R3)+		; Move into table
	MOVAB	SENSE_TABLE,R7		; Get table address
20$:
	CMPW	R6,(R7)+		; Compare to table entry
	BEQL	30$			; Branch if match found
	TSTW	(R7)+			; Advance pointer past routine
	BGEQ	20$			; Loop if greater than or equal to zero

	; PANIC				; 'invalid sense mode returned'
25$:
	BRW	POST_SENSE_EXIT		; exit code

;
; Dispatch to routine
;
30$:
	MOVAB	SENSE_ROUTINES,R6	; Base
	MOVZWL	(R7),R7			; get routine address
	ADDL2	R6,R7			; Add offset to base for routine address
	JSB	(R7)			; jsb to routine
	BRB	10$			; Do next parameter

;
; All these routines have R0,R1,R4,R6-R8 as scratch
;


SENSE_ROUTINES:

; physical

INPUT_SPEED:				; physical 1
	MOVZBL	TT_IOSB+3(R10),R0	; Get speed
	BEQL	OUTPUT_SPEED		; If zero, then same as output speed
	BSBB	GET_SPEED		; map from TT$C_BAUD_xxxx
	MOVW	R0,(R3)+		; set receive speed
	RSB				; Return

OUTPUT_SPEED:				; physical 2
	MOVZBL	TT_IOSB+2(R10),R0	; set transmit speed
	BSBB	GET_SPEED		; map from TT$C_BAUD_xxxx
	MOVW	R0,(R3)+		; set tranmit speed
	RSB				; Return
;
; Local routine to map TT$C_BAUD rates into speed 
;
; Input: 
;	R0 - Baud rate in TT$C_BAUD_xxx terms
;
; Output:
;	R0 - baud rate in BPS
;
GET_SPEED:
	MOVAB	SENSE_BAUD,R1		; Get table
	MOVZWL	(R1)[R0],R0		; Index in and fetch value
	RSB				; Return

CHARACTER_SIZE:				; physical 3
	MOVB	#7,R0			; Character size
	BBC	#TT$V_EIGHTBIT,-
		TT_CHAR1(R9),10$	; check characteristic
	MOVB	#8,R0			; Character size
	
10$:	MOVZBW	R0,(R3)+		; Set value
	RSB				; Return

PARITY_ENABLE:				; physical 4
	CLRB	R0			; Set noparity
	BBC	#TT$V_PARITY,-
		TT_IOSB+6(R10),10$	; Check parity
	MOVB	#1,R0 			; Set parity enabled
10$:
	MOVB	R0,(R3)+
	RSB				; Return

PARITY_TYPE:				; physical 5
	MOVB	#1,R0			; Assume even
	BBC	#TT$V_ODD,-
		TT_IOSB+6(R10),10$	; branch if even
	MOVB	#2,R0			; Set odd
10$:
	MOVZBW	R0,(R3)+		; Set parity
	RSB				; Return

MODEM_PRESENT:				; physical 6
	CLRB	R0			; Get Boolean
	BBC	#TT$V_MODEM, -
		TT_CHAR1(R9),10$	; check modem bit
	MOVB	#1,R0
10$:
	MOVB	R0,(R3)+		; Set value
	RSB				; Return

AUTOBAUD_DETECT:			; physical 7
	CLRB	R0
	BBC	#TT2$V_AUTOBAUD,-
		TT_CHAR2(R9),10$	; Set autobaud
	MOVB	#1,R0
10$:
	MOVB	R0,(R3)+
	RSB				; Return

MANAGEMENT_GUARANTEED:			; physical 8
	CLRB	(R3)+			; clear
10$:	RSB				; Return

SWITCH_CHAR_1:				; physical 9
	BSBW	IGNORE_STRING		; Ignore this string data
	RSB				; Return

SWITCH_CHAR_2:				; physical 10
	BSBW	IGNORE_STRING		; Ignore this string data
	RSB				; Return


; logical 

MODE_WRITING_ALLOWED:			; logical 1
	CLRB	(r3)+
10$:	RSB				; Return

TERMINAL_TYPE:				; logical 2

; Bits are:
;	0 - known/unknown
;	1 - scope/hardcopy
;
	CLRL	R0
	ASSUME	TT$_UNKNOWN EQ 0	; assume unknown = 0
	TSTB	TT_BUF+1(R9)		; is it unknown?
	BEQL	10$			; Branch if unknown
	BISB	#CTP$M_CH_KNOWN,R0	; Set known bit
10$:
	BBC	#TT$V_SCOPE,-
		TT_CHAR1(R9),20$	; check for scope
	BISB	#CTP$M_CH_SCOPE,R0	; set scope
20$:
	MOVZBW	R0,(R3)+		; set value
	RSB				; Return

TERMINAL_SUBTYPE:			; logical 3

	MOVZBL	TT_BUF+1(R9),R0		; Fetch terminal type byte
	MOVAB	TERM_TABLE,R1		; Address of table
20$:	
	MOVZBL	(R1)+,R4		; Get terminal type from table
	BEQL	30$			; if zero, end of list => unknown
	CMPB	R0,R4			; Compare terminal types
	BEQL	40$			; Match, branch
	MOVZBL	(R1)+,R4		; get length of string
	ADDL	R4,R1			; Add to pointer
	BRB	20$			; Loop
30$:
	MOVAB	UNKNOWN_TT,R1		;  "unknown"
40$:
	PUSHR	#^M<R2,R4,R5>		; Save registers
	MOVZBL	(R1),R4			; Get length
	INCL	R4			; Include byte for count
	MOVC3	R4,(R1),(R3)		; Move to buffer, update R3
	POPR	#^M<R2,R4,R5>		; restore

	RSB				; Return

OUTPUT_FLOW_CONTROL:			; logical 4
	CLRB	R0			; assume no
	BBC	#TT$V_TTSYNC,-
		TT_CHAR1(R9),10$	; branch if not tt sync
	MOVB	#1,R0			; Set true
10$:
	MOVB	R0,(R3)+		; Set data
	RSB				; Return

OUTPUT_PAGE_STOP:			; logical 5
	CLRB	R0			; assume no
	BBC	#TT$V_HOLDSCREEN,-
		TT_CHAR1(R9),10$	; branch if not holdscreen
	MOVB	#1,R0			; Set true
10$:
	MOVB	R0,(R3)+		; Set data
	RSB				; Return

FLOW_CHAR_PASS_THRU:			; logical 6
	CLRB	(R3)+
10$:	RSB				; Return

INPUT_FLOW_CONTROL:			; logical 7
	CLRB	R0			; assume no
	BBC	#TT$V_HOSTSYNC,-
		TT_CHAR1(R9),10$	; branch if not host sync
	MOVB	#1,R0			; Set true
10$:
	MOVB	R0,(R3)+		; Set data
	RSB				; Return

LOSS_NOTIFICATION:			; logical 8
	CLRB	(R3)+			; ignore
10$:
	RSB		; Bell on loss data?

LINE_WIDTH:				; logical 9
	MOVW	TT_BUF+2(R9),(R3)+	; Line width
	RSB				; Return

PAGE_LENGTH:				; logical 10
	MOVZBW	TT_CHAR1+3(R9),(R3)+	; Page length
	RSB				; Return

STOP_LENGTH:				; logical 11
	CLRW	(R3)+			; ** ignore
	RSB				; Return

CR_FILL:				; logical 12
	CLRW	R0			; Assume no cr fill
	BBC	#TT$V_CRFILL,-
		TT_CHAR1(R9),10$	; branch if off
	MOVW	TT_IOSB+6(R10),R0	; set on
10$:
	MOVW	R0,(R3)+
	RSB				; Return

LF_FILL:				; logical 13
	CLRW	R0			; Assume no lf fill
	BBC	#TT$V_LFFILL,-
		TT_CHAR1(R9),10$	; branch if off
	MOVW	TT_IOSB+7(R10),R0	; set on
10$:
	MOVW	R0,(R3)+
	RSB				; Return

WRAP:					; logical 14
	MOVW	#1,R0			; assume no wrap
	BBC	#TT$V_WRAP,-
		TT_CHAR1(R9),10$	; branch if no wrap
	MOVW	#4,R0			; Set wrap
10$:
	MOVW	R0,(R3)+		; Set data
	RSB				; Return

HORIZONTAL_TAB:				; logical 15
	MOVW	#2,R0			; Assume no mechtab
	BBC	#TT$V_MECHTAB,-
		TT_CHAR1(R9),10$	; Set mechtab
	MOVW	#1,R0			; set mechtab
10$:
	MOVW	R0,(R3)+		; set data
	RSB				; Return

VERTICAL_TAB:				; logical 16
	CLRW	(R3)+			; ignore
	RSB				; Return

FORM_FEED:				; logical 17
	MOVW	#2,R0			; Assume no mechform
	BBC	#TT$V_MECHFORM,-
		TT_CHAR1(R9),10$	; Set mechform
	MOVW	#1,R0			; set mechform
10$:
	MOVW	R0,(R3)+		; set data
	RSB				; Return



; cterm 

IGNORE_INPUT:				; cterm 1
	CLRB	(R3)+			; Ignore
10$:	RSB				; Return	

CHAR_ATTRIBUTES:			; cterm 2


	RSB

CONTROL_O_PASS_THRU:			; cterm 3
	CLRB	(R3)+			; Ignore
10$:	RSB				; Return	

RAISE_INPUT:				; cterm 4
	CLRB	R0			; Assume lower case (i.e. NO RAISE)
	BBS	#TT$V_LOWER,-
		TT_CHAR1(R9),10$	; Branch if NO RAISE
	MOVB	#1,R0			; Set RAISE
10$:
	MOVB	R0,(R3)+		; set data
	RSB				; Return	

NORMAL_ECHO:				; cterm 5
	CLRB	R0			; (note opposite sense)
	BBS	#TT$V_NOECHO,-
		TT_CHAR1(R9),10$	; check noecho
	MOVB	#1,R0
10$:
	MOVB	R0,(R3)+		; set data
	RSB				; Return

;*** REQUEST_PROCESSING:			; cterm 6

INPUT_ESCAPE_ENABLE:			; cterm 7
OUTPUT_ESCAPE_ENABLE:			; cterm 8
	CLRB	R0
	BBC	#TT$V_ESCAPE,-
		TT_CHAR1(R9),10$
	MOVB	#1,R0			; Set escape
10$:
	MOVB	R0,(R3)+
	RSB				; Return	

INPUT_COUNT_STATE:			; cterm 9
	CLRW	(R3)+			; Ignore
	RSB

AUTO_PROMPT:				; cterm 10
	CLRB	(R3)+			; Ignore
10$:	RSB				; Return	

ERROR_PROCESSING:			; cterm 11
	CLRB	(R3)+			; Ignore
10$:	RSB				; Return	


IGNORE_STRING:
	CLRB	(R3)+
	RSB


POST_SENSE_EXIT:
	
	;
	; Return R1 as correct length of characteristics
	;
	POPL	R1			; start of buffer
	SUBL3	R1,R3,R1		; R1 = R3 - R1
	RSB

.end	
