MODULE BAS$TAB (			!
		IDENT = '1-007'		! File: BASTAB.B32 Edit: MDL1007
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous I/O
!
! ABSTRACT:
!
!	This module contains the BASIC TAB function,
!	which produces enough spaces to reach a specified position.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 01-MAY-1979
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Call BAS$$CB_GET, so this module does not have to be in the
!	   sharable library.  JBS 22-AUG-1979
! 1-003	- Convert BAS$STRING to STR$DUPL_CHAR.  JBS 08-NOV-1979
! 1-004 - Add BAS$ANSI_TAB entry point.  PLL 22-Jun-81
! 1-005 - BAS$ANSI_TAB should check for zero argument, and supply 1
!	  if necessary.  PLL 23-Jul-1982
! 1-006 - fix always tabbing 1 in BAS$ANSI_TAB.  Also, in ANSI tab, 
!	  the value passed is the column where we want to start the
!	  next print field, which implies that the amount we want to
!	  tab is one less than that.  MDL 18-Nov-1982
! 1-007 - correct a couple of minor ANSI tab semantic bugs.  MDL 27-Jun-1983
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$TAB,					! Produce spaces to reach a position
    BAS$ANSI_TAB;				! Same as BAS$TAB but conforms to Min ANSI

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:BASPAR';				! Intermodule BASIC parameters and constants

REQUIRE 'RTLML:OTSLUB';				! Get logical unit block definitions

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$CCPOS,					! Get current position
    STR$DUPL_CHAR,				! Produce spaces
    BAS$$CB_GET : JSB_CB_GET NOVALUE,		! Load current CCB
    BAS$$REC_WSL1 : JSB_REC_WSL1 NOVALUE,	! Write a record
    BAS$$SIGNAL : NOVALUE,			! Signal an error
    BAS$$STOP : NOVALUE;			! Signal fatal error

!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_SYNERR : UNSIGNED (8),		! Syntax error
    BAS$K_NEGZERTAB : UNSIGNED (8);		! Negative or zero TAB


GLOBAL ROUTINE BAS$TAB (			! Produce spaces to position
	RESULT, 				! Descriptor of resultant spaces
	POSITION				! Where to go
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Produce enough spaces that, if they were printed, we would
!	advance to the specified position.  If we are beyond the
!	specified position, return the null string.
!
!	Note that the compiler will convert calls to the TAB function
!	to calls to STR$DUPL_CHAR if the call is not lexicly inside
!	an I/O list, so this routine need only worry about the
!	"true" TAB function.  With the current structure of the RTL
!	only the compiler knows which kind of TAB function is being
!	used: consider a function call in an I/O list, with the
!	function calling TAB.
!
! FORMAL PARAMETERS:
!
!	RESULT.wt.dx	A string containing the number of spaces
!			required to reach the specified position.
!	POSITION.rl.v	The target position.
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB.ra	The LUB of the current I/O list
!				We get from it the current position.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	Same as STR$DUPL_CHAR
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!	BAS$K_SYNERR means that the TAB function has been called
!	not in an I/O list.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	CURRENT_POS;

!+
! Load register 11 so we can get the unit number.
!-
    BAS$$CB_GET ();

    IF (.CCB EQLA 0) THEN BAS$$STOP (BAS$K_SYNERR);

    CURRENT_POS = BAS$CCPOS ((IF (.CCB [LUB$V_UNIT_0]) THEN 0 ELSE .CCB [LUB$W_LUN]));

    IF (.CURRENT_POS GEQ .POSITION)
    THEN
	BEGIN
!+
! We have gone too far, return the null string.
!-
	RETURN (STR$DUPL_CHAR (.RESULT, %REF (0)));
	END
    ELSE
	BEGIN
!+
! Return enough spaces to get to the target position.
!-
	RETURN (STR$DUPL_CHAR (.RESULT, %REF (.POSITION - .CURRENT_POS)));
	END;
    END;					! end of BAS$TAB

GLOBAL ROUTINE BAS$ANSI_TAB (			! TAB by ANSI standards
	RESULT,					! Descriptor of resultant spaces
	POSITION				! Where to go
    ) = 

!++
! FUNCTIONAL DESCRIPTION:
!
!	Produce enough spaces that, if they were printed, we would
!	advance to the specified position.  Similar to BAS$TAB, 
!	but, to satisfy Minimal ANSI standards, includes extra
!	checks on the input argument POSITION.
!
! FORMAL PARAMETERS:
!
!	RESULT.wt.dx	A string containing the number of spaces
!			required to reach the specified position.
!	POSITION.rl.v	The target position
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB.ra	The LUB of the current I/O list
!				We get it from the current position.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	Same as STR$DUPL_CHAR
!
! SIDE EFFECTS:
!
!	Signals NEGZERTAB if POSITION arg is negative or zero
!	BAS$K_SYNERR means that the TAB function has been called
!	not in an I/O list.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	CURRENT_POS;

!+
! If a negative tab is requested, signal an info error and supply 1.
!-

    IF (.POSITION LEQ 0) 
    THEN 
	BEGIN
	BAS$$SIGNAL (BAS$K_NEGZERTAB);
	POSITION = 1;
	END;

!+
! adjust POSITION - for ANSI tab, a tab of 1 really means tab 0 and
! start printing in column 1, whereas with a regular tab it would
! mean tab 1 and start printing in column 2.
! (see comment for edit 1-006 in edit history).
!-
    POSITION = .POSITION - 1;

!+
! Load register 11 so we can get the unit number.
!-

    BAS$$CB_GET ();

    If (.CCB EQLA 0) THEN BAS$$STOP (BAS$K_SYNERR);

    CURRENT_POS = BAS$CCPOS ((IF (.CCB [LUB$V_UNIT_0]) THEN 0 ELSE .CCB [LUB$W_LUN]));

!+
! POSITION should be modulo margin.
!-

    POSITION = .POSITION MOD .CCB [LUB$W_R_MARGIN];

!+
! If we are already beyond the requested position, start a new line and space
! POSITION spaces.
!-

    IF (.CURRENT_POS GTR .POSITION) 
    THEN
	BEGIN
	BAS$$REC_WSL1 (BAS$K_MAR_EXC);
	CCB [LUB$V_FORM_CHAR] = 0;
	CCB [LUB$L_PRINT_POS] = 0;
        POSITION = MAX ( 0, .POSITION);
	CURRENT_POS = 0;
	END;

!+
! If the requested position equals the current position, do nothing.
!-

    IF (.CURRENT_POS EQL .POSITION) 
    THEN
	BEGIN
	RETURN (STR$DUPL_CHAR (.RESULT, %REF(0)));
	END
    ELSE
	BEGIN
!+
! Return enough spaces to get to the target position.
!-

	RETURN (STR$DUPL_CHAR (.RESULT, %REF (.POSITION - .CURRENT_POS)));
	END;

    END;					! end of BAS$ANSI_TAB

END						! end of module BAS$TAB

ELUDOM
