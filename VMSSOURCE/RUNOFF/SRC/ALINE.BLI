MODULE aline (	IDENT = 'V04-000'
		%BLISS32 [, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					     NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	Processes .CENTER, .RIGHT, .LEFT and .INDENT commands.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	 CREATION DATE:	June, 1978


%SBTTL 'Revision History'
! MODIFIED BY:
!
!	008	RER00008	Ron Randall	06-Jun-1983
!		Centering is now done between left and right text margins.
!
!	007	KFA00007	Ken Alden	16-Mar-1983
!		PUSH/POP_SCA now visible to dsr.
!
!	006	KFA00006	Ken Alden	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!--


%SBTTL 'Module Level Declarations'
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! EQUATED SYMBOLS:
!
EXTERNAL LITERAL
    rintes : UNSIGNED (8);
!
! OWN STORAGE:
!
OWN
    pp_sca : $h_r_sca_block;		! Used in PUSH_SCA, POP_SCA macros
!
! EXTERNAL REFERENCES:
!
EXTERNAL
    flgt	: flag_table,
    gca		: gca_definition,
    ira		: FIXED_STRING,
    khar,
    numprm	: numprm_define,
    pdt		: ref pdt_definition,
    sca		: sca_definition,
    tsf		: tsf_definition,
    ttable	: COUNTED_LIST;

EXTERNAL LITERAL
    rnfcjl,		! Can't justify line
    rnfcnf,		! Character string expected, not found: "<directive>"
    rnfinm;		! Illegal number value: "<directive>"

EXTERNAL ROUTINE
    endcmt,
    endwrd,
    erma,
    erml,
    guskip,
    outnj,
    rskips,
    scant;


GLOBAL ROUTINE aline (handler_code) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Processes .CENTER, .RIGHT, .LEFT and .INDENT commands.
!
! FORMAL PARAMETERS:
!
!	handler_code - Indicates which command is to be processed.
!
! IMPLICIT INPUTS:
!
!	numprm - Contains a number, as picked up by GETNUM.
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:	 	None
!--

    BEGIN
    LOCAL
	hold_tab_count,				! Tab count preserved here.
	text_width,				! Available text width.
	sca_hold : VECTOR [sca_size];		! SCA preserved here.

    !
    ! All these commands accept a number as a parameter.
    !
    IF 	NOT .num_result
    THEN
	!
	! Ignore the command if the number was bad.
	!
	RETURN;

    text_width = .sca_rm - .sca_lm;

    SELECT .handler_code OF
	SET

	[h_center] :
	    !
	    ! Validate number given in .CENTER command
	    !
	    BEGIN

	    !
	    ! Process signed number.
	    !
	    IF  .num_sign NEQ 0
	    THEN
		num_value = .num_value + .sca_rm
	    !
	    ! Process unsigned number.
	    !
	    ELSE

		IF  .num_length EQL 0
		THEN
		    !
		    ! Apply default text width.
		    !
		    num_value = .sca_rm;

	    !
	    ! Can't center to the left of 0 or beyond the
	    ! maximum right margin limit.
	    !
	    IF  (.num_value LEQ 0) OR (.num_value GTR 150)
	    THEN
		BEGIN
		erma (rnfinm, false);
		!
		! Fix up parameter so text gets centered anyway.
		!
		num_value = .sca_rm;
		END;

	    !
	    ! Adjust final value to account for later math.
	    !
	    num_value = .num_value + .sca_lm;

	    IF  (.num_sign EQL 0) AND (.num_length NEQ 0)
	    THEN
		num_value = .num_value - .sca_lm;

	    END;

	[h_right] :
	    BEGIN
	    !
	    ! Validate number given on .RIGHT command.
	    ! Always handle number as an adjustment to the right margin.
	    !
	    num_value = .sca_rm - .num_value;

	    IF  (.num_value LSS 0) OR (.num_value GTR 150)
	    THEN
		!
		! Can't back up to the left of 0 or adjust 
		! beyond the maximum right margin limit.
		!
		BEGIN
		erma (rnfinm, false);
		!
		! Fix up parameter so text goes as far right as allowed.
		!
		num_value = .sca_rm;
		END;

	    END;

	[h_center, h_right] :
	    BEGIN
	    !
	    ! Both .CENTER and .RIGHT can have a ';' or a comment after the 
	    ! number, or the text can be on the next line.
	    !
	    rskips (ira);			! Skip spaces after the number.

	    IF  (.khar EQL %C';') OR			! Just a semi-colon??
		(.flgt [com_flag, flag_enabled] AND	! A comment??
		(.khar EQL .flgt [com_flag, flag_character]))
	    THEN
		!
		! User said .CENTER/.RIGHT nnn;...
		! OR        .CENTER/RIGHT nnn!...
		!
		BEGIN
		endcmt ();			! Skip characters, stopping when
						! a ';' or RINTES is encountered.

		IF  .khar NEQ rintes
		THEN
		    !
		    ! Scan terminated on a ';', which indicates that
		    ! the text follows on the same line.  Skip the ';'
		    ! and verify that there is something there.
		    !
		    BEGIN
		    kcns ();			! Skip the ';'

		    IF  .khar EQL rintes
		    THEN
			BEGIN
			!
			! A ';' followed by end-of-record is a user error.
			! Since a ';' functions like an end-of-record, what
			! the user has done is give the command an empty record
			! to be .CENTERed or .RIGHTed.  The error message warns
			! him of this.  Then, processing merges with the normal
			! flow.  The result will be that when SCANT gets called
			! it will return a null string, and all the command
			! will do is generate a blank line in the output file.
			!
			erma (rnfcnf, false);
			END

		    END

		END
	    ELSE

		IF  .khar EQL rintes
		THEN
		    !
		    ! User said .CENTER/.RIGHT nnn<CR><LF>
		    !
		    BEGIN
		    !
		    ! Text is on the next record.
		    !
		    EXTERNAL ROUTINE
			clh;

		    clh (clh_read_input);
		    kcns ();
		    END
		ELSE
		    !
		    ! Illegal character after the number.
		    ! Returning lets DOCM issue the error message.
		    !
		    RETURN;

	    !
	    ! At this point it has been ascertained that the .CENTER
	    ! or .RIGHT command is syntatically correct.
	    ! Also, the start of the text argument has been located.
	    !
	    ! Preserve SCA used for normal text processing.
	    !
	    push_sca;				! Save special SCA save bits.

	    INCR I FROM 0 TO (sca_size - 1) DO
		sca_hold [.I] = .sca [.I];

	    !
	    ! Set up SCA so SCANT preserves white space, and there
	    ! is lots of room so that a new line doesn't get started
	    ! unless the user makes an error.
	    !
	    sca_fill    = false;
	    sca_justify = false;
	    sca_lm = 0;
	    sca_rm = 150;
	    !
	    ! Preserve tab count; temporarily set it to zero
	    ! so that tabs get replaced by spaces.
	    !
	    hold_tab_count = .ttable [cl_index];
	    ttable [cl_index] = 0;
	    rskips (ira);			! Skip leading spaces and tabs.
	    scant ();				! Scan one input line.

	    !
	    ! Trailing spaces are dropped, unless there is at least
	    ! one underlined space in the sequence.
	    ! Sca_wrd_cpend is not equal to RINTES iff the last character
	    ! has not yet been made part of the word that was interrupted
	    ! by the end of the line occurring; this can happen iff
	    ! trailing spaces/tabs did not force the end of word processing
	    ! to take place, i.e., there were no trailing spaces/tabs.
	    ! See SCANT to see how spaces/tabs get handled.
	    !
	    IF  .sca_wrd_cpend EQL rintes
	    THEN

		IF  .sca_wrd_lst_und EQL 0
		THEN
		    sca_wrd_lst_sp = 0;

	    !
	    ! The call on ENDWRD is made here, rather than letting
	    ! OUTNJ do it.  The reason it's done here is so that
	    ! Tsf_ext_hl gets updated, so that the length of the text
	    ! can be used.
	    !
	    endwrd (false, false, false);

	    !
	    ! Check to see that the text retrieved is not too long.
	    !
	    IF  .tsf_ext_hl GTR .text_width
	    THEN
		BEGIN
		!
		! Text is too long even before adjustment.
		!
		erml (rnfcjl);
		!
		! Fix up tsf_ext_hl.  However, the entire line
		! will still get printed.
		!
		tsf_ext_hl = 0;
		END;

	    END;

	[h_center] :
	    BEGIN
	    !
	    ! Compute number of spaces needed to center the line.
	    !
	    tsf_adjust = (.num_value - .tsf_ext_hl) / 2;
	    END;

	[h_right] :
	    BEGIN
	    !
	    ! Compute number of spaces needed to push the line the
	    ! specified amount to the right.
	    !
	    tsf_adjust = .num_value - .tsf_ext_hl;
	    END;

	[h_center, h_right] :
	    BEGIN

	    IF  .tsf_adjust LSS 0
	    THEN
		BEGIN
		!
		! It's not possible to adjust the line.
		!
		erml (rnfcjl);
		!
		! By setting tsf_adjust to zero, the line
		! will go out against the left edge of the page.
		!
		tsf_adjust = 0;
		END;

	    !
	    ! If, after going through all the above, it turns
	    ! out to be the case that no text was picked up,
	    ! skip a blank line, unconditionally.
	    !
	    IF  .tsf_int_hl EQL 0
	    THEN
		guskip (1);

	    outnj ();				! Force out line of text.
	    !
	    ! Restore tab count and SCA to previous status.
	    !
	    ttable [cl_index] = .hold_tab_count;

	    !
	    ! When restoring SCA note that case rules "play through".
	    !
	    INCR I FROM sca_case_size TO (sca_size - 1) DO
		sca [.I] = .sca_hold [.I];

	    pop_sca;			! Restore the special SCA bits.
	    sca_sect_empty = false;	! There's something in this section.
	    RETURN;
	    END;

	[h_left, h_indent] :
	    BEGIN

	    !
	    ! The specified indentation is just remembered.
	    ! It will be picked up by FCIMRA when the first character for the
	    ! next line has been picked up.
	    !
	    IF .num_length NEQ 0
	    THEN
		BEGIN				! A number was supplied.
		sca_indent = .num_value;
		END
	    ELSE
		BEGIN				! A number was not supplied.
                sca_indent = .pdt_indent;	! Use paragraph indentation
		END;

	    END;

	TES;

    END;					! End of ALINE

END						! End of module
ELUDOM
