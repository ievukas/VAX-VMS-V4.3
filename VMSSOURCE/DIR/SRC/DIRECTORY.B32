MODULE DIRECTORY (
		 LANGUAGE (BLISS32),
		 IDENT = 'V04-000',
		 MAIN = DIR$MAIN
		 ) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	DIRECTORY
!
! ABSTRACT:
!
!	This module contains the main processing routine for the directory
!	command.  It also contains various error reporting routines.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, unprivileged user mode utilities.
!
!--
!
! AUTHOR:	L. Mark Pilant		CREATION DATE:  3-Mar-1983
!
! MODIFIED BY:
!
!	V03-020	LMP0296		L. Mark Pilant,		6-Aug-1984  12:54
!		Note the hack to get /FULL to work with the magtape ACP.
!
!	V03-019	LMP0280		L. Mark Pilant,		19-Jul-1984  12:54
!		Give the correct text on the DIR$_SYNTAX error message.
!
!	V03-018	LMP0276		L. Mark Pilant,		11-Jul-1984  11:51
!		Some modifications:
!		  1)	Fix a bug in LMP0263 that caused extra headings to
!			come out.
!		  2)	Fix the handling of /OUTPUT and /NOOUTPUT.
!
!	V03-017	LMP0263		L. Mark Pilant,		26-Jun-1984  12:58
!		Clear out the version count and saved directory name for
!		each input spec.
!
!	V03-016	JEJ0017		J E Johnson		16-Apr-1984
!		Fix bug caused by V03-014 edit.
!
!	V03-018	BLS0300		Benn Schreiber		11-APR-1984
!		Do not link with SECURESHR to get the format_acl service.
!		Rather, only load it if /acl or /full.
!
!	V03-014	JEJ0017		J E Johnson		27-Mar-1984
!		Clean up the network $SEARCH XAB fill support to use the
!		NOP flag SRCHXABS.
!
!	V03-013	LMP0211		L. Mark Pilant,		10-Mar-1984  12:44
!		Fix some minor logic problems that occurred when the display
!		logic was changed.
!
!	V03-012	BLS0265		Benn Schreiber		25-Jan-1984
!		Use enhanced lib$file_scan features for stickyness
!
!	V03-011	LMP0182		L. Mark Pilant,		11-Jan-1984  12:43
!		Note the use of the /SELECT qualifier with an appropriate flag.
!
!	V03-010	LMP0180		L. Mark Pilant,		12-Dec-1983  9:42
!		Correct a bug in the formatting uncovered by the fix in
!		LMP0176.
!
!	V03-009	LMP0176		L. Mark Pilant,		6-Dec-1983  8:54
!		Correct an incorrect piece of logic used to determine the
!		number of columns able to be printed in a display.
!
!	V03-008	LMP0171		L. Mark Pilant,		23-Nov-1983  10:39
!		Correct a bug that caused the size selection item to be
!		dropped on the floor.
!
!	V03-007	LMP0157		L. Mark Pilant,		27-Sep-1983  10:45
!		Add support for a unique message file.
!
!	V03-006	LMP0132		L. Mark Pilant,		3-Aug-1983  10:19
!		Correct the qualifier keyword COLUMN to be COLUMNS to match
!		the documentation.
!
!	V03-005	LMP0119		L. Mark Pilant,		15-Jun-1983  9:29
!		Add support for identifiers.
!
!	V03-004	LMP0108		L. Mark Pilant,		28-Apr-1983  10:49
!		Issue a DIRECTORY message if no files are found, not an RMS
!		message.  Also, add support for RMS journaling.
!
!	V03-003	LMP0100		L. Mark Pilant,		14-Apr-1983  11:49
!		Misc fixups.
!
!	V03-002	LMP0096		L. Mark Pilant,		29-Mar-1983  10:01
!		Correctly handle locked files.
!
!	V03-001	LMP0092		L. Mark Pilant,		25-Mar-1983  12:24
!		Include the FHC XAB when /SIZE is specified.  Also fix
!		the handling of the final error status.
!
!**

LIBRARY 'SYS$LIBRARY:LIB';
REQUIRE 'SRC$:DIRECTDEF';

!			    HACKS WORTH NOTING...
!
!	There are several hacks used by DIRECTORY to improve performance
!	and to compensate for bugs elsewhere in the system.
!
!	The first is mechanism that allows the file information requested
!	in the RMS XAB blocks to be filled in while performing a $SEARCH
!	over the network.  If the NAM block attached to the FAB doing the
!	$SEARCH has the NOP bit NAM$V_SRCHXABS set, then any XABs
!	attached to the FAB will have the requested information filled in
!	if it is available.
!
!	The next is used by LIB$FILE_SCAN to improve performance.  Doing
!	a $SEARCH operation over the network involves a considerable
!	ammount of startup overhead (to make the connection).  Therefore,
!	LIB$FILE_SCAN will only do the network $SEARCH operation if there
!	are wildcard characters present (as determined by the previous
!	$PARSE).  This means that if there are XABs to be filled, and no
!	wildcards are present in the filespec, it is necessary to issue
!	an explicit $SEARCH (outside of LIB$FILE_SCAN).
!
!	Another hack used here is to not explicitly link with SECURESHR,
!	which contains the format_acl service.  Rather, we auto-load it
!	using lib$find_image_symbol only if /acl or /full is present.  This
!	gives a reduction in activation time in the case we don't need
!	to format any acls.
!
!	The last hack is to make /FULL work with the magtape ACP.  There is
!	a bug in the magtape ACP encountered when doing wildcarding and
!	accessing by file name to the same tape drive.  The access by name
!	causes the magtape ACP to loose the wildcard context, resulting in
!	an infinite loop.  This is corrected in DIRECTORY by accessing the
!	file by "file-ID" even when /FULL is specified, if the device is a
!	sequential device.
!

FORWARD ROUTINE
	DIR$MAIN,				! Main processing routine
	DIR$GET_FILE,				! Get a file spec to process
	DIR$INPUT_ERROR,			! Signal file scanning error
	DIR$FILE_ERROR,				! Signal file error
	DIR$OUTPUT;				! General output routine

OWN
	FORMAT_ACL_ADDR,			! Address of real SYS$FORMAT_ACL
	OUTPUT_FAB	: $FAB_DECL,		! Output file RMS structures

! OUTPUT_RAB is in DIRECTDEF.REQ because it is referenced by the SIGNAL macro
! to flush out the RMS buffers when an error occurs.

	OUTPUT_NAM	: $NAM_DECL,
	OUT_EXP_NAM	: $BBLOCK [NAM$C_MAXRSS],
	OUT_RES_NAM	: $BBLOCK [NAM$C_MAXRSS];

EXTERNAL ROUTINE
	CLI$GET_VALUE	: ADDRESSING_MODE (GENERAL),	! Get a qualifier value
	CLI$PRESENT	: ADDRESSING_MODE (GENERAL),	! See if qualifier present
	LIB$FILE_SCAN	: ADDRESSING_MODE (GENERAL),	! Search wildcard file spec
	LIB$FIND_IMAGE_SYMBOL : ADDRESSING_MODE(GENERAL),! Image activate

! Following are the common qualifier scanning routines

	LIB$QUAL_FILE_PARSE	: ADDRESSING_MODE (GENERAL);	! Set up select

ROUTINE DIR$MAIN =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the main processing routine for the DIRECTORY command.
!	It parses the qualifiers in the command line to determine what
!	information is to be displayed for the selected file or files.
!
! CALLING SEQUENCE:
!
!	DIR$MAIN ()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	The worst error encountered or SS$_NORMAL.
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

LOCAL
	STATUS,					! Local routine exit status
	CLI_STATUS,				! CLI parse status
	SCAN_CONTEXT,				! filescan context
	INPUT_FAB	: $FAB_DECL,		! Input file RMS structures
	INPUT_NAM	: $NAM_DECL,
	INP_EXP_NAM	: $BBLOCK [NAM$C_MAXRSS],
	INP_RES_NAM	: $BBLOCK [NAM$C_MAXRSS],
	FILE_DESC	: $BBLOCK [DSC$C_S_BLN],	! File name descr
	VALUE_DESC	: $BBLOCK [DSC$C_S_BLN],	! Qualifier value
	GETDVI_ARGS	: VECTOR [7],		! GETDVI argument list
	INDEV_CLASS,				! Input device class
	INDEV_BUFSIZ,				! Input device buffer size
	XAB_PTR		: REF $BBLOCK;		! Pointer to current XAB

EXTERNAL LITERAL
	CLI$_DEFAULTED,				! Value present by default
	CLI$_NEGATED;				! Qualifier negated

EXTERNAL ROUTINE
	DIR$GET_INFO,				! Get information about a file
	DIR$TOTAL,				! Type out per directory totals
	DIR$GRAND_TOTAL,			! Type out grand total info
	LIB$CVT_DTB	: ADDRESSING_MODE (GENERAL),	! Convert string to value
	LIB$GET_VM	: ADDRESSING_MODE (GENERAL);	! Allocate dynamic memory

! DIRECTORY error messages

EXTERNAL LITERAL
	DIR$_NOFILES;

! Initialize all variables

SCAN_CONTEXT = 0;
QUAL_FLAGS = 0;
WORST_ERROR = SS$_NORMAL;
CHANNEL = 0;
CH$FILL (0, NAM$C_DVI, DEVICE_NAME);
COLUMN_COUNT = COLUMN_INDEX = COLUMN_WIDTH = 0;
VERSION_COUNT = VERSION_INDEX = 0;
PREV_DIR_LEN = PREV_FILE_LEN = 0;
TOTAL_USED = TOTAL_ALLOC = TOTAL_FILES = 0;
GRAND_USED = GRAND_ALLOC = GRAND_FILES = GRAND_DIRS = 0;
COLUMN_WIDTH = 0;
INDEV_CLASS = INDEV_BUFSIZ = 0;
FIRST_XAB = XAB_PTR = 0;
CH$FILL (0, DSC$C_S_BLN, VALUE_DESC);
VALUE_DESC[DSC$B_CLASS] = DSC$K_CLASS_D;
CH$MOVE (DSC$C_S_BLN, VALUE_DESC, FILE_DESC);
CH$MOVE (DSC$C_S_BLN, VALUE_DESC, LINE_DESC);
LINE_DESC[DSC$A_POINTER] = LINE_BUFFER;

! Get the block of memory needed to hold the display information.

STATUS = LIB$GET_VM (%REF (DIR_C_LENGTH), DISPLAY_BLOCK);
IF NOT .STATUS
THEN
    BEGIN
    SIGNAL (.STATUS);
    RETURN .WORST_ERROR;
    END;

! Initialize all RMS data structures.

$FAB_INIT	(FAB = INPUT_FAB,		! Init input structures
		 DNA = UPLIT ('*.*;*'),
		 DNS = %CHARCOUNT ('*.*;*'),
		 NAM = INPUT_NAM);
$NAM_INIT	(NAM = INPUT_NAM,
		 ESA = INP_EXP_NAM,
		 ESS = NAM$C_MAXRSS,
		 RSA = INP_RES_NAM,
		 RSS = NAM$C_MAXRSS);

$FAB_INIT	(FAB = OUTPUT_FAB,		! Init output structures
		 DNA = UPLIT ('DIRECTORY.LIS'),
		 DNS = %CHARCOUNT ('DIRECTORY.LIS'),
		 FAC = PUT,
		 FOP = SQO,
		 NAM = OUTPUT_NAM,
		 RAT = CR);
$RAB_INIT	(RAB = OUTPUT_RAB,
		 FAB = OUTPUT_FAB);
$NAM_INIT	(NAM = OUTPUT_NAM,
		 ESA = OUT_EXP_NAM,
		 ESS = NAM$C_MAXRSS,
		 RSA = OUT_RES_NAM,
		 RSS = NAM$C_MAXRSS);

! Parse the various command qualifiers that may have been given on the
! command line.

! First check for any of the common qualifiers to determine what XABs
! may be needed.

IF CLI$PRESENT ($DESCRIPTOR ('BEFORE'))
OR CLI$PRESENT ($DESCRIPTOR ('SINCE'))
THEN
    BEGIN
    QUAL_FLAGS[DIR_V_NEED_DAT] = 1;		! DAT XAB required
    QUAL_FLAGS[DIR_V_COMM_QUAL] = 1;
    END;

IF CLI$PRESENT ($DESCRIPTOR ('BY_OWNER'))
THEN
    BEGIN
    QUAL_FLAGS[DIR_V_NEED_PRO] = 1;		! PRO XAB required
    QUAL_FLAGS[DIR_V_COMM_QUAL] = 1;
    END;

! Now check for all the display tayloring qualifiers

QUAL_FLAGS[DIR_V_QUAL_ACL] = CLI$PRESENT ($DESCRIPTOR ('ACL'));
QUAL_FLAGS[DIR_V_QUAL_BRIE] = CLI$PRESENT ($DESCRIPTOR ('BRIEF'));
IF (CLI_STATUS = QUAL_FLAGS[DIR_V_QUAL_COLU] = CLI$PRESENT ($DESCRIPTOR ('COLUMNS')))
THEN
    BEGIN
    CLI$GET_VALUE ($DESCRIPTOR ('COLUMNS'), VALUE_DESC);
    STATUS = LIB$CVT_DTB (.VALUE_DESC[DSC$W_LENGTH],
			  .VALUE_DESC[DSC$A_POINTER],
			  COLUMN_COUNT);
    IF NOT .STATUS OR .COLUMN_COUNT LSS 0
    THEN
	BEGIN
	SIGNAL (DIR$_SYNTAX, 1, VALUE_DESC);
	RETURN .WORST_ERROR;
	END;
    IF .COLUMN_COUNT EQL 0 THEN COLUMN_COUNT = 1;
    IF .CLI_STATUS EQL CLI$_DEFAULTED THEN QUAL_FLAGS[DIR_V_COLU_DEF] = 1;
    END;
IF (QUAL_FLAGS[DIR_V_QUAL_DATE] = CLI$PRESENT ($DESCRIPTOR ('DATE')))
THEN
    BEGIN
    QUAL_FLAGS[DIR_V_NEED_DAT] = 1;		! DAT XAB required
    IF CLI$PRESENT ($DESCRIPTOR ('DATE.ALL'))
    THEN
	BEGIN
	QUAL_FLAGS[DIR_V_DATE_CRE] = 1;
	QUAL_FLAGS[DIR_V_DATE_EXP] = 1;
	QUAL_FLAGS[DIR_V_DATE_MOD] = 1;
	QUAL_FLAGS[DIR_V_DATE_BAK] = 1;
	COLUMN_WIDTH = .COLUMN_WIDTH + 19 * 4;
	END
    ELSE
	BEGIN
	IF CLI$PRESENT ($DESCRIPTOR ('DATE.CREATED'))
	THEN
	    BEGIN
	    QUAL_FLAGS[DIR_V_DATE_CRE] = 1;
	    COLUMN_WIDTH = .COLUMN_WIDTH + 19;
	    END;
	IF CLI$PRESENT ($DESCRIPTOR ('DATE.EXPIRED'))
	THEN
	    BEGIN
	    QUAL_FLAGS[DIR_V_DATE_EXP] = 1;
	    COLUMN_WIDTH = .COLUMN_WIDTH + 19;
	    END;
	IF CLI$PRESENT ($DESCRIPTOR ('DATE.MODIFIED'))
	THEN
	    BEGIN
	    QUAL_FLAGS[DIR_V_DATE_MOD] = 1;
	    COLUMN_WIDTH = .COLUMN_WIDTH + 19;
	    END;
	IF CLI$PRESENT ($DESCRIPTOR ('DATE.BACKUP'))
	THEN
	    BEGIN
	    QUAL_FLAGS[DIR_V_DATE_BAK] = 1;
	    COLUMN_WIDTH = .COLUMN_WIDTH + 19;
	    END;
	END;
    END;
IF (QUAL_FLAGS[DIR_V_QUAL_FID] = CLI$PRESENT ($DESCRIPTOR ('FILE_ID')))
THEN COLUMN_WIDTH = .COLUMN_WIDTH + 21;
IF (QUAL_FLAGS[DIR_V_QUAL_FULL] = CLI$PRESENT ($DESCRIPTOR ('FULL')))
THEN
    BEGIN
    QUAL_FLAGS[DIR_V_NEED_FHC] = QUAL_FLAGS[DIR_V_NEED_DAT] = 1;
    QUAL_FLAGS[DIR_V_NEED_PRO] = QUAL_FLAGS[DIR_V_NEED_SUM] = 1;
    QUAL_FLAGS[DIR_V_NEED_JNL] = 1;
    END;
QUAL_FLAGS[DIR_V_QUAL_GRAN] = CLI$PRESENT ($DESCRIPTOR ('GRAND_TOTAL'));
QUAL_FLAGS[DIR_V_QUAL_HEAD] = CLI$PRESENT ($DESCRIPTOR ('HEADING'));

! /PRINTER is checked out of sequence because it may affect how /OUTPUT is
! handled.

IF (QUAL_FLAGS[DIR_V_QUAL_PRIN] = CLI$PRESENT ($DESCRIPTOR ('PRINTER')))
THEN
    BEGIN
    OUTPUT_FAB[FAB$V_SPL] = 1;			! Spool file when closed.
    OUTPUT_FAB[FAB$V_DLT] = 1;			! Delete file after printing
    END;
IF (CLI_STATUS = QUAL_FLAGS[DIR_V_QUAL_OUTP] = CLI$PRESENT ($DESCRIPTOR ('OUTPUT')))
THEN
    BEGIN
    CLI$GET_VALUE ($DESCRIPTOR ('OUTPUT'), FILE_DESC);
    OUTPUT_FAB[FAB$L_FNA] = .FILE_DESC[DSC$A_POINTER];
    IF (OUTPUT_FAB[FAB$B_FNS] = .FILE_DESC[DSC$W_LENGTH]) EQL 0
    AND NOT .QUAL_FLAGS[DIR_V_QUAL_PRIN]
    THEN
	BEGIN
	OUTPUT_FAB[FAB$L_FNA] = UPLIT ('SYS$OUTPUT:');
	OUTPUT_FAB[FAB$B_FNS] = %CHARCOUNT ('SYS$OUTPUT:');
	END;
    END
ELSE
    BEGIN
    IF .CLI_STATUS EQL CLI$_NEGATED
    THEN
	BEGIN
	OUTPUT_FAB[FAB$L_FNA] = UPLIT ('NL:');
	OUTPUT_FAB[FAB$B_FNS] = %CHARCOUNT ('NL:');
	OUTPUT_FAB[FAB$V_SPL] = 0;
	OUTPUT_FAB[FAB$V_DLT] = 0;
	END;
    END;
IF (QUAL_FLAGS[DIR_V_QUAL_OWNE] = CLI$PRESENT ($DESCRIPTOR ('OWNER')))
THEN
    BEGIN
    QUAL_FLAGS[DIR_V_NEED_PRO] = 1;
    QUAL_FLAGS[DIR_V_USE_ID] = CLI$PRESENT ($DESCRIPTOR ('OWNER.IDENTIFIER'));
    END;
IF (QUAL_FLAGS[DIR_V_QUAL_PROT] = CLI$PRESENT ($DESCRIPTOR ('PROTECTION')))
THEN
    BEGIN
    QUAL_FLAGS[DIR_V_NEED_PRO] = 1;
    COLUMN_WIDTH = .COLUMN_WIDTH + 23;
    END;
IF (QUAL_FLAGS[DIR_V_QUAL_SECU] = CLI$PRESENT ($DESCRIPTOR ('SECURITY')))
THEN
    BEGIN
    QUAL_FLAGS[DIR_V_NEED_PRO] = 1;
    QUAL_FLAGS[DIR_V_QUAL_ACL] = QUAL_FLAGS[DIR_V_QUAL_OWNE] =
				 QUAL_FLAGS[DIR_V_QUAL_PROT] = 1;
    COLUMN_WIDTH = .COLUMN_WIDTH + 23;
    END;
IF CLI$PRESENT ($DESCRIPTOR ('SELECT'))
THEN
    BEGIN
    MIN_BLOCK = 0;					!*****
    MAX_BLOCK = 1073741823;				!*****
    IF CLI$PRESENT ($DESCRIPTOR ('SELECT.SIZE.MINIMUM_SIZE'))
    THEN
	BEGIN
	QUAL_FLAGS[DIR_V_SELE_SIZE] = 1;
	CLI$GET_VALUE ($DESCRIPTOR ('SELECT.SIZE.MINIMUM_SIZE'), VALUE_DESC);
	STATUS = LIB$CVT_DTB (.VALUE_DESC[DSC$W_LENGTH],
			      .VALUE_DESC[DSC$A_POINTER],
			      MIN_BLOCK);
	IF NOT .STATUS OR .MIN_BLOCK LSS 0
	THEN
	    BEGIN
	    SIGNAL (DIR$_SYNTAX, 1, VALUE_DESC);
	    RETURN .WORST_ERROR;
	    END;
	QUAL_FLAGS[DIR_V_NEED_FHC] = 1;
	END;
    IF CLI$PRESENT ($DESCRIPTOR ('SELECT.SIZE.MAXIMUM_SIZE'))
    THEN
	BEGIN
	QUAL_FLAGS[DIR_V_SELE_SIZE] = 1;
	CLI$GET_VALUE ($DESCRIPTOR ('SELECT.SIZE.MAXIMUM_SIZE'), VALUE_DESC);
	STATUS = LIB$CVT_DTB (.VALUE_DESC[DSC$W_LENGTH],
			      .VALUE_DESC[DSC$A_POINTER],
			      MAX_BLOCK);
	IF NOT .STATUS OR .MAX_BLOCK LSS 0
	THEN
	    BEGIN
	    SIGNAL (DIR$_SYNTAX, 1, VALUE_DESC);
	    RETURN .WORST_ERROR;
	    END;
	QUAL_FLAGS[DIR_V_NEED_FHC] = 1;
	END;
    END;
IF (QUAL_FLAGS[DIR_V_QUAL_SIZE] = CLI$PRESENT ($DESCRIPTOR ('SIZE')))
THEN
    BEGIN
    QUAL_FLAGS[DIR_V_NEED_FHC] = 1;
    IF CLI$PRESENT ($DESCRIPTOR ('SIZE.ALL'))
    THEN QUAL_FLAGS[DIR_V_SIZE_ALL] = 1;
    IF CLI$PRESENT ($DESCRIPTOR ('SIZE.ALLOCATION'))
    THEN QUAL_FLAGS[DIR_V_SIZE_ALLO] = 1;
    IF CLI$PRESENT ($DESCRIPTOR ('SIZE.USED'))
    THEN QUAL_FLAGS[DIR_V_SIZE_USED] = 1;
    END;
QUAL_FLAGS[DIR_V_QUAL_TOTL] = CLI$PRESENT ($DESCRIPTOR ('TOTAL'));
QUAL_FLAGS[DIR_V_QUAL_TRAI] = CLI$PRESENT ($DESCRIPTOR ('TRAILING'));
IF (QUAL_FLAGS[DIR_V_QUAL_VERS] = CLI$PRESENT ($DESCRIPTOR ('VERSIONS')))
THEN
    BEGIN
    CLI$GET_VALUE ($DESCRIPTOR ('VERSIONS'), VALUE_DESC);
    STATUS = LIB$CVT_DTB (.VALUE_DESC[DSC$W_LENGTH],
			  .VALUE_DESC[DSC$A_POINTER],
			  VERSION_COUNT);
    IF NOT .STATUS OR .VERSION_COUNT LEQ 0
    THEN
	BEGIN
	SIGNAL (DIR$_SYNTAX, 1, VALUE_DESC);
	RETURN .WORST_ERROR;
	END;
    END;
IF (QUAL_FLAGS[DIR_V_QUAL_WIDT] = CLI$PRESENT ($DESCRIPTOR ('WIDTH')))
THEN
    BEGIN
    CLI$GET_VALUE ($DESCRIPTOR ('WIDTH.DISPLAY'), VALUE_DESC);
    STATUS = LIB$CVT_DTB (.VALUE_DESC[DSC$W_LENGTH],
			  .VALUE_DESC[DSC$A_POINTER],
			  DISPLAY_WIDTH);
    IF NOT .STATUS OR .DISPLAY_WIDTH LSS 0		!*****
    THEN
	BEGIN
	SIGNAL (DIR$_SYNTAX, 1, VALUE_DESC);
	RETURN .WORST_ERROR;
	END;
    CLI$GET_VALUE ($DESCRIPTOR ('WIDTH.FILENAME'), VALUE_DESC);
    STATUS = LIB$CVT_DTB (.VALUE_DESC[DSC$W_LENGTH],
			  .VALUE_DESC[DSC$A_POINTER],
			  FILENAME_WIDTH);
    IF NOT .STATUS OR .FILENAME_WIDTH LSS 0		!*****
    THEN
	BEGIN
	SIGNAL (DIR$_SYNTAX, 1, VALUE_DESC);
	RETURN .WORST_ERROR;
	END;
    IF .FILENAME_WIDTH EQL 0 THEN FILENAME_WIDTH = 19;	!*****
    CLI$GET_VALUE ($DESCRIPTOR ('WIDTH.OWNER'), VALUE_DESC);
    STATUS = LIB$CVT_DTB (.VALUE_DESC[DSC$W_LENGTH],
			  .VALUE_DESC[DSC$A_POINTER],
			  OWNER_WIDTH);
    IF NOT .STATUS OR .OWNER_WIDTH LSS 0		!*****
    THEN
	BEGIN
	SIGNAL (DIR$_SYNTAX, 1, VALUE_DESC);
	RETURN .WORST_ERROR;
	END;
    IF .OWNER_WIDTH EQL 0 THEN OWNER_WIDTH = 20;	!*****
    CLI$GET_VALUE ($DESCRIPTOR ('WIDTH.SIZE'), VALUE_DESC);
    STATUS = LIB$CVT_DTB (.VALUE_DESC[DSC$W_LENGTH],
			  .VALUE_DESC[DSC$A_POINTER],
			  SIZE_WIDTH);
    IF NOT .STATUS OR .SIZE_WIDTH LSS 0			!*****
    THEN
	BEGIN
	SIGNAL (DIR$_SYNTAX, 1, VALUE_DESC);
	RETURN .WORST_ERROR;
	END;
    IF .SIZE_WIDTH EQL 0 THEN SIZE_WIDTH = 6;		!*****
    END;

! Open the specified output file/device.

STATUS = $CREATE (FAB = OUTPUT_FAB);
IF NOT .STATUS
THEN
    BEGIN
    DIR$FILE_ERROR (DIR$_OPENOUT, OUTPUT_FAB);
    RETURN .WORST_ERROR;
    END;
STATUS = $CONNECT (RAB = OUTPUT_RAB);
IF NOT .STATUS
THEN
    BEGIN
    DIR$FILE_ERROR (DIR$_OPENOUT, OUTPUT_FAB);
    RETURN .WORST_ERROR;
    END;

! Determine the width of the output device.

IF .(OUTPUT_FAB[FAB$L_DEV])<$BITPOSITION (DEV$V_TRM), 1>
THEN
    BEGIN
    CH$FILL (0, 7*4, GETDVI_ARGS);
    GETDVI_ARGS[0] = DVI$_DEVCLASS^16 OR 4;
    GETDVI_ARGS[1] = INDEV_CLASS;
    GETDVI_ARGS[3] = DVI$_DEVBUFSIZ^16 OR 4;
    GETDVI_ARGS[4] = INDEV_BUFSIZ;

    STATUS = $GETDVI (DEVNAM = $DESCRIPTOR ('SYS$OUTPUT'),
		      ITMLST = GETDVI_ARGS);
    IF NOT .STATUS
    THEN
	BEGIN
	SIGNAL (.STATUS);
	RETURN .WORST_ERROR;
	END;
    END;
IF .DISPLAY_WIDTH EQL 0
THEN
    BEGIN
    IF .INDEV_CLASS NEQ DC$_TERM THEN INDEV_BUFSIZ = 132;
    DISPLAY_WIDTH = .INDEV_BUFSIZ;
    END;

! If the number of columns is defaulted and an information qualifier is
! specified, set the column count to 1.

IF (.QUAL_FLAGS[DIR_V_QUAL_DATE] OR .QUAL_FLAGS[DIR_V_QUAL_OWNE]
    OR .QUAL_FLAGS[DIR_V_QUAL_PROT] OR .QUAL_FLAGS[DIR_V_QUAL_SIZE]
    OR .QUAL_FLAGS[DIR_V_QUAL_FID] OR NOT .QUAL_FLAGS[DIR_V_QUAL_HEAD])
AND .QUAL_FLAGS[DIR_V_COLU_DEF]
THEN COLUMN_COUNT = 1;

! Check to see if XABs are needed to gather information.

IF .QUAL_FLAGS[DIR_V_NEED_FHC]
THEN
    BEGIN
    IF .FIRST_XAB EQL 0
    THEN FIRST_XAB = XAB_PTR = INFO_XABFHC
    ELSE (XAB_PTR[XAB$L_NXT] = INFO_XABFHC; XAB_PTR = INFO_XABFHC);
    END;
IF .QUAL_FLAGS[DIR_V_NEED_DAT]
THEN
    BEGIN
    IF .FIRST_XAB EQL 0
    THEN FIRST_XAB = XAB_PTR = INFO_XABDAT
    ELSE (XAB_PTR[XAB$L_NXT] = INFO_XABDAT; XAB_PTR = INFO_XABDAT);
    END;
IF .QUAL_FLAGS[DIR_V_NEED_PRO]
THEN
    BEGIN
    IF .FIRST_XAB EQL 0
    THEN FIRST_XAB = XAB_PTR = INFO_XABPRO
    ELSE (XAB_PTR[XAB$L_NXT] = INFO_XABPRO; XAB_PTR = INFO_XABPRO);
    END;
IF .QUAL_FLAGS[DIR_V_NEED_SUM]
THEN
    BEGIN
    IF .FIRST_XAB EQL 0
    THEN FIRST_XAB = XAB_PTR = INFO_XABSUM
    ELSE (XAB_PTR[XAB$L_NXT] = INFO_XABSUM; XAB_PTR = INFO_XABSUM);
    END;
IF .QUAL_FLAGS[DIR_V_NEED_JNL]
THEN
    BEGIN
    IF .FIRST_XAB EQL 0
    THEN FIRST_XAB = XAB_PTR = INFO_XABJNL
    ELSE (XAB_PTR[XAB$L_NXT] = INFO_XABJNL; XAB_PTR = INFO_XABJNL);
    INFO_XABJNL[XAB$L_AIA] = DISPLAY_BLOCK[DIR_T_AI_NAME];
    INFO_XABJNL[XAB$B_AIS] = XAB$C_MAXJNLNAM;
    INFO_XABJNL[XAB$L_BIA] = DISPLAY_BLOCK[DIR_T_BI_NAME];
    INFO_XABJNL[XAB$B_BIS] = XAB$C_MAXJNLNAM;
    INFO_XABJNL[XAB$L_ATA] = DISPLAY_BLOCK[DIR_T_AT_NAME];
    INFO_XABJNL[XAB$B_ATS] = XAB$C_MAXJNLNAM;
    END;

! At this point all of the qualifiers have been parsed.  Now determine the
! column width and the maximum number of columns that can be printed given
! specified (or default) display width.  This value is minimized with the
! value given on the /COLUMN qualifier.

COLUMN_WIDTH = .COLUMN_WIDTH + .FILENAME_WIDTH + 1;
IF .QUAL_FLAGS[DIR_V_QUAL_OWNE] THEN COLUMN_WIDTH = .COLUMN_WIDTH + .OWNER_WIDTH + 2;
IF .QUAL_FLAGS[DIR_V_QUAL_SIZE]
THEN
    BEGIN
    IF .QUAL_FLAGS[DIR_V_SIZE_ALL]
    THEN COLUMN_WIDTH = .COLUMN_WIDTH + .SIZE_WIDTH * 2 + 2
    ELSE COLUMN_WIDTH = .COLUMN_WIDTH + .SIZE_WIDTH + 2;
    END;
IF (.QUAL_FLAGS[DIR_V_DATE_CRE] OR .QUAL_FLAGS[DIR_V_DATE_MOD]
    OR .QUAL_FLAGS[DIR_V_DATE_EXP] OR .QUAL_FLAGS[DIR_V_DATE_BAK]
    OR .QUAL_FLAGS[DIR_V_QUAL_OWNE] OR .QUAL_FLAGS[DIR_V_QUAL_PROT]
    OR .QUAL_FLAGS[DIR_V_QUAL_SIZE] OR .QUAL_FLAGS[DIR_V_QUAL_FID])
THEN
    BEGIN
    COLUMN_WIDTH = .COLUMN_WIDTH + 4;
    COLUMN_COUNT = MINU (.COLUMN_COUNT, (.DISPLAY_WIDTH + 4) / .COLUMN_WIDTH);
    END
ELSE COLUMN_COUNT = MINU (.COLUMN_COUNT, .DISPLAY_WIDTH / .COLUMN_WIDTH);
IF .COLUMN_COUNT LEQ 0 OR .QUAL_FLAGS[DIR_V_QUAL_ACL] THEN COLUMN_COUNT = 1;

! LIB$QUAL_FILE_PARSE is going to parse the common qualifiers.  It sets up
! a data base which describes the results for LIB$QUAL_FILE_MATCH to use.

STATUS = LIB$QUAL_FILE_PARSE (%REF (LIB$M_CQF_BACKUP OR
				    LIB$M_CQF_BEFORE OR
				    LIB$M_CQF_CREATED OR
				    LIB$M_CQF_EXCLUDE OR
				    LIB$M_CQF_EXPIRED OR
				    LIB$M_CQF_MODIFIED OR
				    LIB$M_CQF_SINCE OR
				    LIB$M_CQF_BYOWNER
				    ), CMN_QUAL_CTX);
IF NOT .STATUS
THEN
    BEGIN
    SIGNAL (.STATUS);
    RETURN .WORST_ERROR;
    END;

CLI$GET_VALUE ($DESCRIPTOR ('INPUT'), FILE_DESC);
INPUT_FAB[FAB$L_FNA] = .FILE_DESC[DSC$A_POINTER];
INPUT_FAB[FAB$B_FNS] = .FILE_DESC[DSC$W_LENGTH];

!
! If /FULL or /ACL, then image activate SECURESHR, which contains
! the routine SYS$FORMAT_ACL.
!
IF .QUAL_FLAGS[DIR_V_QUAL_FULL]
    OR .QUAL_FLAGS[DIR_V_QUAL_ACL]
THEN BEGIN
    STATUS = LIB$FIND_IMAGE_SYMBOL($DESCRIPTOR('SECURESHR'),
				$DESCRIPTOR('SYS$FORMAT_ACL'),FORMAT_ACL_ADDR);
    IF NOT .STATUS
    THEN BEGIN
	SIGNAL (.STATUS);
	RETURN .WORST_ERROR;
	END;
    END;

! Process each file specification specified in the command line.

DO
    BEGIN

! The following is a KLUDGE to get the XAB information across the network.
! If the NOP field of the NAM block has the SRCHXABS flag set, then any
! XABs (supported by the DAP protocol) connected to the FAB are filled in.

    IF .QUAL_FLAGS[DIR_V_NEED_FHC] OR .QUAL_FLAGS[DIR_V_NEED_DAT]
    OR .QUAL_FLAGS[DIR_V_NEED_PRO] OR .QUAL_FLAGS[DIR_V_NEED_SUM]
    OR .QUAL_FLAGS[DIR_V_NEED_JNL]
    THEN
	BEGIN
	INPUT_NAM[NAM$V_SRCHXABS] = 1;
	INPUT_FAB[FAB$L_XAB] = .FIRST_XAB;
	END;

    LIB$FILE_SCAN (INPUT_FAB,
		   DIR$GET_INFO,		! File found action routine
		   DIR$INPUT_ERROR,		! Input error action routine
		   SCAN_CONTEXT);		! Context for stickyness
    END
UNTIL NOT DIR$GET_FILE(INPUT_FAB);

IF .LINE_DESC[DSC$W_LENGTH] GTR 0 THEN DIR$OUTPUT (0, LINE_DESC);
IF .TOTAL_FILES NEQ 0 THEN DIR$TOTAL ();
IF .GRAND_DIRS GTR 1
OR .QUAL_FLAGS[DIR_V_QUAL_GRAN]
THEN DIR$GRAND_TOTAL ();			! Display grand totals

! If no files have been selected, and no other errors have occurred, return
! a status of RMS$_FNF instead of success.

IF .WORST_ERROR AND NOT .QUAL_FLAGS[DIR_V_FILE_FOUND]
THEN
    BEGIN
    SIGNAL (DIR$_NOFILES);
    WORST_ERROR = (RMS$_FNF AND NOT STS$M_SEVERITY) OR STS$K_WARNING
						    OR STS$M_INHIB_MSG;
    END;

STATUS = $CLOSE (FAB = OUTPUT_FAB);
IF NOT .STATUS THEN DIR$FILE_ERROR (DIR$_CLOSEOUT, OUTPUT_FAB);

RETURN .WORST_ERROR;

END;						! End of routine DIR_MAIN

ROUTINE DIR$GET_FILE (FILE_FAB) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets the next file specification in the command line.
!	If there are no more files, the routine returns zero.  Otherwise,
!	the file specification is placed in the specified FAB for later
!	parsing and searching.
!
! CALLING SEQUENCE:
!	DIR$GET_FILE (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of the FAB into which the file spec is placed
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1 if a file specification was found
!	0 otherwise
!
! SIDE EFFECTS:
!	The retrieved file specification is placed into the specified
!	FAB for later parsing.
!
!--

BEGIN

MAP
	FILE_FAB	: REF $BBLOCK;			! FAB address

LOCAL
	FILE_DESC	: $BBLOCK [DSC$C_S_BLN],	! File name descr
	SCAN_FLAGS	: $BBLOCK [4];			! $FILESCAN flags

! Initialise needed variables.

CH$FILL (0, DSC$C_S_BLN, FILE_DESC);
FILE_DESC[DSC$B_CLASS] = DSC$K_CLASS_D;

! If there are no more file specifications, return with zero.

IF NOT CLI$GET_VALUE ($DESCRIPTOR ('INPUT'), FILE_DESC) THEN RETURN 0;

! Otherwise, fill in the appropriate fields in the FAB.

FILE_FAB[FAB$L_FNA] = .FILE_DESC[DSC$A_POINTER];
FILE_FAB[FAB$B_FNS] = .FILE_DESC[DSC$W_LENGTH];

! Determine whether or not the new spec is to get a new heading.

SCAN_FLAGS = 0;
$FILESCAN (SRCSTR = FILE_DESC, FLDFLAGS = SCAN_FLAGS);
IF .SCAN_FLAGS[FSCN$V_NODE] OR .SCAN_FLAGS[FSCN$V_DEVICE]
OR .SCAN_FLAGS[FSCN$V_ROOT] OR .SCAN_FLAGS[FSCN$V_DIRECTORY]
THEN
    BEGIN
    VERSION_INDEX = 0;
    PREV_DIR_LEN = PREV_FILE_LEN = 0;
    END;

RETURN 1;

END;						! End of routine DIR$GET_FILE

GLOBAL ROUTINE DIR$INPUT_ERROR (FILE_FAB) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used to signal errors received on the input file.
!
! CALLING SEQUENCE:
!	DIR$INPUT_ERROR (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of the FAB
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	The error is signaled by placing the appropriate message into
!	the output file.
!
!--

BEGIN

MAP
	FILE_FAB	: REF $BBLOCK;		! FAB address

IF .FILE_FAB[FAB$L_STS] NEQ RMS$_FNF
THEN DIR$FILE_ERROR (DIR$_OPENIN, .FILE_FAB);

RETURN 1;

END;						! End of routine DIR$INPUT_ERROR

GLOBAL ROUTINE DIR$FILE_ERROR (ERROR_CODE, FILE_FAB) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used to signal errors received on files.
!
! CALLING SEQUENCE:
!	DIR$FILE_ERROR (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: error code
!	ARG2: address of the FAB
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

MAP
	FILE_FAB	: REF $BBLOCK;		! FAB address

BIND
	FILE_NAM	= .FILE_FAB[FAB$L_NAM]	: $BBLOCK;	! NAMe block address

LOCAL
	FILE_NAME	: $BBLOCK [DSC$C_S_BLN];	! Local file name descr

CH$FILL (0, DSC$C_S_BLN, FILE_NAME);
IF .FILE_NAM[NAM$B_RSL] NEQ 0
THEN
    BEGIN
    FILE_NAME[DSC$W_LENGTH] = .FILE_NAM[NAM$B_RSL];
    FILE_NAME[DSC$A_POINTER] = .FILE_NAM[NAM$L_RSA];
    END
ELSE IF .FILE_NAM[NAM$B_ESL] NEQ 0
THEN
    BEGIN
    FILE_NAME[DSC$W_LENGTH] = .FILE_NAM[NAM$B_ESL];
    FILE_NAME[DSC$A_POINTER] = .FILE_NAM[NAM$L_ESA];
    END
ELSE
    BEGIN
    FILE_NAME[DSC$W_LENGTH] = .FILE_FAB[FAB$B_FNS];
    FILE_NAME[DSC$A_POINTER] = .FILE_FAB[FAB$L_FNA];
    END;

SIGNAL (.ERROR_CODE, 1, FILE_NAME, .FILE_FAB[FAB$L_STS],
				   .FILE_FAB[FAB$L_STV]);

IF .WORST_ERROR EQL (.ERROR_CODE OR STS$M_INHIB_MSG)
THEN WORST_ERROR = .FILE_FAB[FAB$L_STS] OR STS$M_INHIB_MSG;

RETURN 1;

END;						! End of routine DIR$FILE_ERROR

GLOBAL ROUTINE DIR$OUTPUT (MESSAGE_CODE, CONTROL_STRING, ARGS) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine accepts, as input, an $FAO control string and any
!	arguments to be formatted by the control string.  The formatted
!	line is then written to the desired output file.
!
! CALLING SEQUENCE:
!	DIR$OUTPUT (ARG1, ARG2, ..., ARGn)
!
! INPUT PARAMETERS:
!	ARG1: message code for the text to display
!	ARG2: address of the $FAO control string
!	ARG3 - ARGn: arguments to be formatted
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPTUS:
!	none
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

MAP
	CONTROL_STRING	: REF $BBLOCK;		! Address of the control string

LOCAL
	FAO_CTL_STRING	: REF $BBLOCK,		! Addr of $FAO control string
	MESSAGE_DESC	: $BBLOCK [DSC$C_S_BLN],	! Message text descr
	MESSAGE_TEXT	: VECTOR [256, BYTE],	! Message text
	STATUS;					! Local routien exit status

! If there is a message code present, get the message text via a $GETMSG.
! Otherwise, use the descriptor supplied.

IF .MESSAGE_CODE NEQ 0
THEN
    BEGIN
    CH$FILL (0, DSC$C_S_BLN, MESSAGE_DESC);
    MESSAGE_DESC[DSC$W_LENGTH] = 256;
    MESSAGE_DESC[DSC$A_POINTER] = MESSAGE_TEXT;
    $GETMSG (MSGID = .MESSAGE_CODE,
	     MSGLEN = MESSAGE_DESC[DSC$W_LENGTH],
	     BUFADR = MESSAGE_DESC,
	     FLAGS = 1);
    FAO_CTL_STRING = MESSAGE_DESC;
    END
ELSE FAO_CTL_STRING = .CONTROL_STRING;

! Format the line.

IF .FAO_CTL_STRING NEQA LINE_DESC
THEN
    BEGIN
    CH$FILL (0, DSC$C_S_BLN, LINE_DESC);
    LINE_DESC[DSC$W_LENGTH] = 1024;
    LINE_DESC[DSC$A_POINTER] = LINE_BUFFER;

    $FAOL (CTRSTR = .FAO_CTL_STRING,
	   OUTLEN = LINE_DESC,
	   OUTBUF = LINE_DESC,
	   PRMLST = ARGS);

    OUTPUT_RAB[RAB$L_RBF] = .LINE_DESC[DSC$A_POINTER];
    OUTPUT_RAB[RAB$W_RSZ] = .LINE_DESC[DSC$W_LENGTH];
    END
ELSE
    BEGIN
    OUTPUT_RAB[RAB$L_RBF] = .FAO_CTL_STRING[DSC$A_POINTER];
    OUTPUT_RAB[RAB$W_RSZ] = .FAO_CTL_STRING[DSC$W_LENGTH];
    END;

STATUS = $RMS_PUT (RAB = OUTPUT_RAB);
IF NOT .STATUS THEN DIR$FILE_ERROR (DIR$_WRITEERR, OUTPUT_RAB);

LINE_DESC[DSC$W_LENGTH] = 0;

RETURN 1;

END;						! End of routine DIR$OUTPUT

GLOBAL ROUTINE SYS$FORMAT_ACL =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This is a dummy routine to satisfy the global reference of
!	the $FORMAT_ACL macro.  It simply calls the real service,
!	which has been dynamically loaded.
!
! CALLING SEQUENCE:
!	via $FORMAT_ACL macro
!
! INPUT PARAMETERS:
!
! IMPLICIT INPUTS:
!	FORMAT_ACL_ADDR contains the loaded address of SYS$FORMAT_ACL
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPTUS:
!	none
!
! ROUTINE VALUE:
!	status returned from sys$format_acl service
!
! SIDE EFFECTS:
!	none
!
!--
BEGIN
BUILTIN
    CALLG,AP;

LOCAL
    STATUS;

RETURN CALLG(.AP,.FORMAT_ACL_ADDR)
END;

END
ELUDOM
