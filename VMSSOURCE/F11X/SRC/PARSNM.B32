MODULE PARSNM (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine parses a file name string.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  3-Jan-1978  18:30
!
! MODIFIED BY:
!
!	V03-003	CDS0002		Christian D. Saether	 2-Jan-1984
!		Force longword addressing on FIL$CVT_DTB.
!
!	V03-002	CDS0001		Christian D. Saether	6-Dec-1983
!		Change LIB$ references to FIL$.
!
!	V03-001	ACG0302		Andrew C. Goldstein,	3-Dec-1982  11:19
!		Add support for long file names and $ and _
!
!	V02-002	ACG0208		Andrew C. Goldstein,	31-Oct-1981  0:01
!		Allow negative version numbers; interface change for
!		string buffer
!
!	V02-001	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:27
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE PARSE_NAME (NAME_DESC, NAME_BUFFER, COUNT, STRING, FLAGS) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine parses a file name string.
!
!
! CALLING SEQUENCE:
!	PARSE_NAME (ARG1, ARG2, ARG3, ARG4, ARG5)
!
! INPUT PARAMETERS:
!	ARG3: character count of name string
!	ARG4: address of name string
!	ARG5: name control flag bits
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	ARG1: address of name descriptor block
!	ARG2: address of name string buffer to use
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	NAME_DESC	: REF BBLOCK,	! name descriptor block arg
	NAME_BUFFER	: REF VECTOR [,BYTE]; ! name string buffer arg

LOCAL
	DP		: REF BBLOCK,	! local pointer to descriptor
	WILD_BIT,			! copy of wild name and type bit
	J,				! character counter
	P1,				! pointer to scan string
	P2,				! pointer to build output string
	C		: BYTE,		! character in process
	CCOUNT,				! number of significant chars in string
	DOT_COUNT,			! count of "." encountered
	NEG;				! flag indicating negative version

EXTERNAL ROUTINE
	FIL$CVT_DTB	: ADDRESSING_MODE (GENERAL); ! convert decimal to binary


! Load a local pointer to the name descriptor block. Once the compiler
! learns how to address structures through formals, this code can be removed.
!

DP = .NAME_DESC;

! Iterate on the characters, copying alphanumerics in upper case.
! If a wild card is present if name or type, we leave that field null.
! Dots and semicolons delimit the name and type strings; once two have been
! seen, get the version number. Note that a semicolon seen without a dot is
! processed twice to produce a null type field. We stuff dots at the end
! if necessary to get the descriptors completed.
!

CH$FILL (0, FND_LENGTH, .DP);
DP[FND_FLAGS] = .FLAGS AND NOT $FIELDMASK (FIB$V_WILD);
WILD_BIT = .DP[FND_WILD_NAME];
J = .COUNT;
P1 = .STRING;
P2 = .NAME_BUFFER;
CCOUNT = 0;
DOT_COUNT = 0;
DP[FND_STRING] = .P2;

WHILE 1 DO
    BEGIN
    IF (J = .J - 1) GEQ 0
    THEN
	C = CH$RCHAR_A (P1)
    ELSE
	BEGIN
	C = '.';
	J = .J + 1;
	END;

    IF .P2 - .NAME_BUFFER GTRU FILENAME_LENGTH
    THEN ERR_EXIT (SS$_BADFILENAME);

    SELECTONEU .C OF
	SET

	['A' TO 'Z', '0' TO '9', '$', '_']:
		BEGIN
		CCOUNT = .CCOUNT + 1;
		IF NOT .WILD_BIT
		THEN CH$WCHAR_A (.C, P2);
		END;

	['a' TO 'z']:
		BEGIN
		C = .C AND NOT %X'20';
		CCOUNT = .CCOUNT + 1;
		IF NOT .WILD_BIT
		THEN CH$WCHAR_A (.C, P2);
		END;

	['.', ';']:
		BEGIN
		IF .CCOUNT GTRU 39
		THEN ERR_EXIT (SS$_BADFILENAME);
		IF NOT .DOT_COUNT
		THEN
		    BEGIN
		    IF .WILD_BIT
		    THEN
			BEGIN
			DP[FND_WILD] = 1;
			CH$WCHAR_A ('*', P2);
			END;
		    IF .C EQL ';'
		    THEN
			BEGIN
			P1 = .P1 - 1;
			J = .J + 1;
			END;
		    CH$WCHAR_A ('.', P2);
		    WILD_BIT = .DP[FND_WILD_TYPE];
		    CCOUNT = 0;
		    DOT_COUNT = .DOT_COUNT + 1;
		    END

		ELSE
		    BEGIN
		    IF .WILD_BIT
		    THEN
			BEGIN
			DP[FND_WILD] = 1;
			CH$WCHAR_A ('*', P2);
			END;
		    EXITLOOP;
		    END;
		END;

	['%']:	BEGIN
		DP[FND_WILD] = 1;
		CCOUNT = .CCOUNT + 1;
		IF NOT .WILD_BIT
		THEN CH$WCHAR_A (.C, P2);
		END;

	['*']:	BEGIN
		DP[FND_WILD] = 1;
		IF CH$RCHAR (.P1-2) NEQ '*'
		AND NOT .WILD_BIT
		THEN CH$WCHAR_A (.C, P2);
		END;


	[OTHERWISE]:
		ERR_EXIT (SS$_BADFILENAME);

	TES;

    END;				! end of character loop

! Record the length of the generated string. Then convert and check the
! version number.
!

DP[FND_COUNT] = .P2 - .DP[FND_STRING];
IF .J EQL 1
AND CH$RCHAR (.P1) EQL '*'
THEN DP[FND_WILD_VER] = 1;

NEG = 0;
IF NOT .DP[FND_WILD_VER]
THEN
    BEGIN
    IF .J GTR 0
    AND CH$RCHAR (.P1) EQL '-'
    THEN
	BEGIN
	NEG = 1;
	J = .J - 1;
	P1 = .P1 + 1;
	END;
    IF NOT FIL$CVT_DTB (.J, .P1, DP[FND_VERSION])
    THEN ERR_EXIT (SS$_BADFILEVER);
    END;

IF .(DP[FND_VERSION])<0,32> GTRU 32768
THEN ERR_EXIT (SS$_BADFILEVER);

IF .NEG
THEN
    BEGIN
    DP[FND_VERSION] = -.DP[FND_VERSION];
    IF .DP[FND_VERSION] EQL 0
    THEN DP[FND_VERSION] = -32768;
    END;

END;					! end of routine PARSE_NAME

END
ELUDOM
