MODULE PAS$PUT ( %TITLE 'PUT procedure'
		IDENT = '1-001'			! File: PASPUT.B32 Edit: SBL1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains PAS$PUT, which implements the
!	VAX-11 Pascal PUT procedure.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Linkages, externals, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$PUT: NOVALUE;				! Do a PUT

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE

%SBTTL 'PAS$PUT - PUT procedure'
GLOBAL ROUTINE PAS$PUT (				! Do a PUT
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	ERROR						! Error unwind address
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAS$PUT implements the VAX-11 Pascal PUT procedure.  It
!	writes the current file buffer component to the file.
!
! CALLING SEQUENCE:
!
!	CALL PAS$PUT (PFV.mr.r [, ERROR.j.r])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  in case of an error.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Opens standard files INPUT or OUTPUT if not already open.
!
! SIGNALLED ERRORS:
!
!	FILNOTGEN - file is not in Generation mode
!	LINTOOLON - line too long
!	LINVALEXC - LINELIMIT value exceeded
!	KEYDUPNOT - key field duplication is not allowed
!	ERRDURPUT - error during PUT
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,		! File control block
	PFV_ADDR: VOLATILE,				! Enable argument
	UNWIND_ACT: VOLATILE,				! Enable argument
	ERROR_ADDR: VOLATILE,				! Enable argument
	STATUS;						! Status from $PUT

    BIND
	RAB = FCB: REF BLOCK [, BYTE];			! RMS RAB

    BUILTIN
	ACTUALCOUNT,
	TESTBITSS;

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    IF ACTUALCOUNT () GEQU 2				! Was ERROR specified?
    THEN
	ERROR_ADDR = .ERROR;

    !+
    ! Set enable argument for PFV address.
    !-

    PFV_ADDR = PFV [PFV$R_PFV];

    !+
    ! Validate and lock PFV.
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Resolve lazy lookahead, if any.  Also may open INPUT or OUTPUT.
    !-

    IF NOT .PFV [PFV$V_VALID]
    THEN
	PAS$$LOOK_AHEAD (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! Verify that the file is open.
    !-

    IF NOT .PFV [PFV$V_OPEN]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTOPE,0);

    !+
    ! Verify that we are in Generation mode
    !-

    IF NOT .FCB [FCB$V_GENERATION] AND NOT .FCB [FCB$V_INDEXED]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTGEN,0);

    !+
    ! PUT from a textfile is different...
    !-

    IF .FCB [FCB$V_TEXT]
    THEN
	BEGIN

	!+
	! Are we already at the end-of-line?  If so, give an error.
	!-

	IF .FCB [FCB$A_RECORD_CUR] GEQA .FCB [FCB$A_RECORD_END]
	THEN
	    $PAS$IO_ERROR (PAS$_LINTOOLON,1,1)
	ELSE
	    BEGIN
	    !+
	    ! Move component to file and advance current position.
	    !-
	    CH$WCHAR_A (..PFV [PFV$A_BUFFER], FCB [FCB$A_RECORD_CUR]);
	    END;
	END
    ELSE
	BEGIN
	!+
	! Not a textfile, check and update the linelimit.
	! Then call RMS to write the record.
	!-
    
	IF .FCB [FCB$L_LINELIMIT] GEQ 0		! Limit in effect?
	THEN
	    IF .FCB [FCB$L_LINELIMIT] EQL 0	! Limit exceeded?
	    THEN
		$PAS$IO_ERROR (PAS$_LINVALEXC,0)
	    ELSE
		FCB [FCB$L_LINELIMIT] = .FCB [FCB$L_LINELIMIT] - 1;
	
	!+
	! Set RSZ appropriately.
	!-

	IF .FCB [FCB$V_VARYING]
	THEN
	    RAB [RAB$W_RSZ] = .(.PFV [PFV$A_BUFFER])<0,16,0>
	ELSE
	    RAB [RAB$W_RSZ] = .RAB [RAB$W_USZ];

	RAB [RAB$L_RBF] = .RAB [RAB$L_UBF];

	!+
	! If the file was opened ACCESS:=KEYED, or the last thing we did
	! was a LOCATE, set the access method to keyed, otherwise sequential.
	!-

	IF .FCB [FCB$V_KEYED] OR .FCB [FCB$V_LOCATE]
	THEN
	    BEGIN
	    RAB [RAB$B_RAC] = RAB$C_KEY;
	    FCB [FCB$V_LOCATE] = 0;	! Cancel locate
	    END
	ELSE
	    RAB [RAB$B_RAC] = RAB$C_SEQ;

	STATUS = $PAS$RMS_OP ($PUT (RAB=.RAB));
	IF NOT .STATUS
	THEN
	    BEGIN
	    IF .STATUS EQL RMS$_DUP
	    THEN
		$PAS$IO_ERROR (PAS$_KEYDUPNOT)	! Key field duplication not allowed
	    ELSE
		$PAS$IO_ERROR (PAS$_ERRDURPUT);	! Error during PUT
	    END;

	RAB [RAB$V_TPT] = 0;	! Clear "truncate-on-put" which may have been
				! set by a REWRITE.
	END;
    
    !+
    ! Undefine file buffer
    !-

    PFV [PFV$V_DFB] = 0;


    !+
    ! Indicate successful completion
    ! Unlock the file
    !-

    FCB [FCB$L_STATUS] = 0;
    PFV [PFV$V_LOCK] = 0;

    RETURN;

    END;					! End of routine PAS$PUT

!<BLF/PAGE>

END						! End of module PAS$PUT

ELUDOM
