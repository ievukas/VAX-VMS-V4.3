%TITLE 'Misc save/restore for nesting directives'
MODULE STKFRM (
		IDENT = 'V04-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Used by .NOTE, .LIST, .END NOTE and .END LIST to save/restore
!		various formatting information.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: June, 1978
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	002	REM00002	Ray Marshall	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FRMSTD,
    FRMSTK : FORM_STACK,
    GCA : GCA_DEFINITION,
    IRAC : IRAC_DEFINITION,
    SCA : SCA_DEFINITION;

EXTERNAL LITERAL 				!Error messages
    RNFNSF,
    RNFSTD,
    RNFUME;

EXTERNAL ROUTINE
    ERM,
    ERMA,
    PNTBAC;


%SBTTL 'STKFRM  --'
GLOBAL ROUTINE stkfrm (handler_code) : =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	Handler_code indicates which command requires formatting
!	information to be stacked or unstacked.
!	The value 0 means push without checking; the value -1
!	means pop without checking.  These two values are provided
!	for the indexing routines, which have to save this information.
!	Values -1 and 0 are also used for handling literals.
!	When FRMSTK is allocated, there will be one extra place allocated
!	so that at least one entry will remain, even when .NOTES
!	and .LISTS are nested to their limits.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if no errors were detected.  Returns FALSE
!	if the operation was not done.
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    SELECT .handler_code OF
	SET

	[h_note, h_list] :
	    BEGIN

	    IF  .frmstd EQL frmstk_limit  THEN
		BEGIN				!Ignore command because of stack overflow
		erma (rnfstd, false);
		RETURN false;
		END;

	    END;

	[0, h_note, h_list] :
	    BEGIN
	    !Save items on stack.
	    frmstd = .frmstd + 1;
	    frmstk [.frmstd, frmstk_fill]	= .sca_fill;
	    frmstk [.frmstd, frmstk_justify]	= .sca_justify;
	    frmstk [.frmstd, frmstk_crock]	= .sca_crock;
	    frmstk [.frmstd, frmstk_rm]		= .sca_rm;
	    frmstk [.frmstd, frmstk_lm]		= .sca_lm;
	    frmstk [.frmstd, frmstk_spacing]	= .sca_spacing;
	    frmstk [.frmstd, frmstk_command]	= .handler_code;
	    frmstk [.frmstd, frmstk_iseqn]	= .irac_iseqn;
	    frmstk [.frmstd, frmstk_ipagen]	= .irac_ipagen;
	    frmstk [.frmstd, frmstk_fspecp]	= .irac_fspecp;
	    frmstk [.frmstd, frmstk_fspecc]	= .irac_fspecc;
	    frmstk [.frmstd, frmstk_req_d]	= .gca_req_depth;
	    frmstk [.frmstd, frmstk_do_nbits]	= .sca_do_nbits;
	    frmstk [.frmstd, frmstk_ker]	= .sca_ker;
	    frmstk [.frmstd, frmstk_index]	= .sca_index;
	    RETURN true;
	    END;
!
	!Some general error checking before popping the stack

	[h_end_note, h_end_list] :
	    BEGIN

	    IF  .frmstd EQL 0  THEN
		BEGIN				!The stack is empty
		erma (rnfume, false);
		RETURN false;
		END;

	    END;

	[h_end_note] :
	    BEGIN

	    IF  .frmstk [.frmstd, frmstk_command] NEQ h_note  THEN
		BEGIN				!The entry was not made by a .NOTE command.
		erma (rnfume, false);
		pntbac ();
		RETURN false;
		END;

	    END;

	[h_end_list] :
	    BEGIN

	    IF  .frmstk [.frmstd, frmstk_command] NEQ h_list  THEN
		BEGIN				!The entry was not made by a .LIST command.
		erma (rnfume, false);
		pntbac ();
		RETURN false;
		END;

	    END;
!
	!Pop the stack.  Give a warning message if the .END command is not
	!in the same file as the command that started the list or note.

	[h_end_note, -1, h_end_list] :
	    BEGIN

	    IF  .frmstk [.frmstd, frmstk_req_d] NEQ .gca_req_depth  THEN
		BEGIN
		erma (rnfnsf, false);
		pntbac ();
		END;

	    !Restore items from stack.
	    sca_fill	= .frmstk [.frmstd, frmstk_fill];
	    sca_justify	= .frmstk [.frmstd, frmstk_justify];
	    sca_crock	= .frmstk [.frmstd, frmstk_crock];
	    sca_rm	= .frmstk [.frmstd, frmstk_rm];
	    sca_lm	= .frmstk [.frmstd, frmstk_lm];
	    sca_spacing	= .frmstk [.frmstd, frmstk_spacing];
	    sca_do_nbits= .frmstk [.frmstd, frmstk_do_nbits];
	    sca_ker	= .frmstk [.frmstd, frmstk_ker];
	    sca_index	= .frmstk [.frmstd, frmstk_index];
	    frmstd	= .frmstd - 1;
	    RETURN true;
	    END;
	TES;
	true
    END;					!End of STKFRM

END						!End of module
ELUDOM
