 	.TITLE	MSCP$SHOW - MSCP Server Information
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.PAGE
	.SBTTL	PROGRAM DESCRIPTION
;++
;   FACILITY
;
;	MSU  Utility
;
;   ABSTRACT
;
;       This module contains the routines to gather and pass 
;       information to SHOW$MSCP which displays this information
;	about the MSCP server.
;
;   ENVIRONMENT
;
;	NATIVE MODE, USER MODE
;
;   AUTHOR
;
;       Anne E. Warner,    10-Apr-1984
;
;   MODIFIED BY
;
;	V03-004 AEW0004		Anne E. Warner		02-Aug-1984
;		Change MSU$W_MIN_PKT to MSU$W_INI_PKT in GET_RESO to
;		correct mistake in the display
;
;	V03-003	AEW0003		Anne E. Warner		10-Jul-1984
;		Make changes within the routines for the reformat of
;		SHOW MSCP which is now SHOW DEVICE/SERVED.
;
;	V03-002 AEW0002		Anne E. Warner		24-May-1984
;		Change where the address of the 'DUMMY1' stack is moved
;		into R10 to avoid Access Violating on certain disks.  This
;		change is made in the module MSCP$GET_UNIT.
;
;	V03-001	AEW0001		Anne E. Warner		27-Apr-1984
;		Made bug fixes so that this code will work with
;		SHOW$MSCP.
;--
	.page
	.SBTTL	DECLARATIONS

;
;	SYMBOL DEFINTIONS
;

	.nocross
	$CDTDEF
	$IPLDEF
	$MSCPDEF
	$PBDEF
	$PRDEF
	$SBDEF
	$SSDEF
;
; MSCPDEF.MLB
;
	$HQBDEF
	$MSUDEF
	$UQBDEF
	.cross

	.DEFAULT DISPLACEMENT LONG

		
;
;	STORAGE DEFINITIONS
;

	.PSECT	SHOW$RWDATA,NOEXE,WRT,LONG

STATUS_ARY:
	.ASCII	/  ONLINE/		; ONLINE
	.ASCII	/        /
	.ASCII	/        /
	.ASCII	/ OFFLINE/		; OFFLINE
	.ASCII	/   AVAIL/		; AVAILABLE

NOWRT:	.ASCII	?/NOWRT?
NOWRT_LEN=.-NOWRT

TIME:	.BLKL	2
	.page
	.SBTTL	MSCP$GET_UNIT - Return information on units

	.PSECT	SHOW$CODE,EXE,WRT,LONG

	.ENABLE	LSB

	.ENTRY	MSCP$GET_UNIT ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>

	MOVZWL	#SS$_DEVOFFLINE,R0	; Set for failure to find MSCP
	MOVL	@#SCS$GL_MSCP,R8	; Pick up the pointer to MSCP area
	BLSS	10$			; All okay
	RET				; Return in disgrace

10$:	MOVZBL	#2*MSU$K_MAX_UNIT,@12(AP)
	MOVAB	DEVNAM,R9		; Save buffer address in non-volatile
	MOVL	8(AP),R6		; Grab unit slot number
20$:	MOVL	MSU$L_UNIT_VEC(R8)[R6],R7 ; UQB pointer
	BNEQ	21$			; Found one
	CLRL	R10
	BRW	60$			; None

21$:	SETIPL	70$			; Synch access
	BITW	#<MSCP$M_UF_WRTPS!-	; Check write protect status
		  MSCP$M_UF_WRTPH>,-
		 UQB$W_UNT_FLGS(R7)
	BEQL	22$			; Not write protected
;	PUSHAL	NOWRT			; Set up write protect message
;	PUSHL	#NOWRT_LEN
	BRB	23$

22$:	CLRQ	-(SP)			; Null message
;
; Process actual device name from UCB
;
23$:	MOVZWL	#16,R0			; Max device name size
	MOVL	R9,R1			; Use scratch area on stack
        MOVAL   W^DUMMY1,R10		; Set up register to mimic a stack
	CLRL	R4			; Want nodename$devname
	MOVL	UQB$L_UCB(R7),R5	; Point to UCB
	JSB	@#IOC$CVT_DEVNAM	; Do it
	MOVL	R1,R5			; Transfer length
	LOCC	#^A/$/,R5,(R9)		; Find the end of nodename
	BEQL	40$			; None
	MOVAB	1(R1),DEV_NAME		; Start of devname
	SUBL3	#2,R0,DEV_CNT		; Size
	BRB	50$

39$:	BRB	20$			; BRB cannot fully reach

40$:	MOVL    R9,DEV_NAME		; Start of name
	SUBL3	#1,R5,DEV_CNT		; Set length
;
; Set up rest of line
;
50$:	CVTBL	UQB$B_HOST_CNT(R7),R2	; Number of host online
	ADDL3	#1,R2,-(R10)            ; Correct for offset
	MOVZWL	UQB$W_MAX_QUE(R7),-(R10)	; Que parameters
	MOVZWL	UQB$W_NUM_QUE(R7),-(R10)	; Ditto
	MOVL	UQB$L_MAXBLOCK(R7),-(R10)	; Max block (size)
 	EXTZV	#MSCP$V_ST_MASK,#MSCP$S_ST_MASK,-
		UQB$W_STATUS(R7),R2	; Get the device status
	SETIPL	#0			; Drop IPL - finished with UQB
	MULL2	#2,R2			; Compute correct offset
	MOVAL	STATUS_ARY[R2],-(R10)	; ASCII text for status
	MOVL	#8,-(R10)		; Length of text
	MOVL	DEV_NAME,-(R10)		; Move stored device name to stack
	MOVL	DEV_CNT,-(R10)		; Move device name count to stack
60$:	MOVL	R10,@4(AP)		; Provide top of argument stack to calling routine
	MOVZWL	#SS$_NORMAL,R0
65$:	RET
;
; Argument list - placed here since it must be filled in at IPL 8.
;
	.ALIGN	LONG
	.BLKL  14
DUMMY1: .LONG  0
DEVNAM: .BLKB 	16
DEV_NAME:
	.LONG	0
DEV_CNT:.LONG   0

70$:	.LONG	IPL$_SCS		; End of locked down code

	.DISABLE LSB
        .PAGE
	.SBTTL	MSCP$GET_HOST - Return information on hosts

	.ENABLE	LSB

	.ENTRY	 MSCP$GET_HOST ^M<R2,R3,R4,R5,R8,R10>

	MOVZWL	#SS$_DEVOFFLINE,R0	; Set for failure to find MSCP
	MOVL	@#SCS$GL_MSCP,R8	; Pick up the pointer to MSCP area
	BLSS	10$			; All okay
	RET				; Return in disgrace

10$:	MOVZBL	#2*MSU$K_MAX_HOST,@12(AP) ; Return the maximum host count
	MOVL	8(AP),R5		; Pick up the host slot
20$:	MOVL	MSU$L_HOST_VEC(R8)[R5],R4 ; HQB pointer
	BNEQ	21$			; Found
	CLRL 	R10			; Show no host
	BRW	60$			; None

21$:	CLRQ	R1			; Set up
	SETIPL	70$			; Synch access
	MOVL	HQB$L_CDT(R4),R0	; Pick up CDT pointer
	BEQL	22$			; Ooops!
	MOVL	CDT$L_PB(R0),R0		; Pick up PB pointer
	BEQL	22$			; Ooops!
	MOVL	PB$L_SBLINK(R0),R0	; Pick up SB pointer
	BEQL	22$
	MOVO	SB$T_NODENAME(R0),NNAME	; Finally we get the host name
22$:	MOVL	HQB$L_UNIT_ONLN(R4),R3	; Bitmap of units
	SETIPL	#0			; Finished
        MOVAL   W^DUMMY2,R10		; Set up register to mimic stack
	CLRL	R0			; Set up
	MOVL	#31,R2
25$:	BLBC	R3,30$			; None
	INCL	R0
30$:	ROTL	#1,R3,R3		; Check next bit
	SOBGTR	R2,25$
	MOVL	R0,-(R10)		; number of devices on host
;
; At high IPL pick up the queue numbers
;
	SETIPL	B^70$			; Synch access
	MOVZWL	HQB$W_MAX_QUE(R4),-(R10); Pick up value from data block
	MOVZWL	HQB$W_NUM_QUE(R4),-(R10); Ditto		
	SETIPL	#0			; Finshed with block
	MOVQ	HQB$Q_TIME(R4),TIME	; Pick up host connect time
	MOVAB	TIME,-(R10)		; Get the time
	MOVAO	NNAME,-(R10)		; Move in the host name from above
60$:	MOVL	R10,@4(AP)		; Copy the arg list pointer
	MOVZWL	#SS$_NORMAL,R0
65$:	RET
;
; Argument list - placed here since it must be filled in at IPL 8.
;
	.ALIGN	LONG
	.BLKL	5
DUMMY2:	.LONG	0
NNAME:	.BLKL 	4
CDT:	.LONG	0
PB:	.LONG	0
SB:	.LONG	0

70$:	.LONG	IPL$_SCS

	.DISABLE LSB
        .PAGE
	.SBTTL	MSCP$GET_RESO - Return information on resources

	.ENABLE	LSB

	.ENTRY	MSCP$GET_RESO ^M<R3,R4,R5,R8,R10>

	MOVZWL	#SS$_DEVOFFLINE,R0	; Set for failure to find MSCP
	MOVL	@#SCS$GL_MSCP,R8	; Pick up the pointer to MSCP area
	BLSS	10$			; All okay
	RET				; Return in disgrace

10$:	MOVAL   W^DUMMY3,R10		; Set up register to mimic stack
	SETIPL	40$			; Synch access to data blocks
	MOVZWL	MSU$W_MAX_QUE(R8),-(R10); Grab statistics
	MOVZWL	MSU$W_NUM_QUE(R8),-(R10)
	MOVZWL	MSU$W_NUM_PKT(R8),-(R10)
	MOVZWL	MSU$W_INI_PKT(R8),-(R10)
        MOVL    MSU$L_FRACTION(R8),-(R10)
	DIVL2	#512,(R10)		; TEMP DIVIDE UNTIL SYSGEN PARAMS CHANGE
        MOVL    MSU$L_SMALL(R8),-(R10)
	DIVL2	#512,(R10)		; TEMP DIVIDE
	CLRQ	R3			; Zero temp accumulators
	MOVL	MSU$L_BUFF_HEAD(R8),R5	; Pick up head of buffer pool
	BEQL	30$			; None
20$:	ADDL	4(R5),R4		; Yes, add the size
	INCL	R3			; Incr number of buffers
	MOVL	(R5),R5			; Next block
	BNEQ	20$			; Okay, go one
30$:	MOVL	MSU$L_MAX_BUF(R8),R5	; Original size
	SETIPL	#0			; Finished with the data block
	SUBL3	R4,R5,-(R10)		; In use
	DIVL2	#512,(R10)		; TEMP DIVIDE
	MOVL	R4,-(R10)		; Free 
	DIVL2	#512,(R10)		; TEMP DIVIDE
	MOVL	R5,-(R10)		; Total
	DIVL2	#512,(R10)		; TEMP DIVIDE
	MOVL	R10,@4(AP)		; Pass back where start of info is
	MOVZWL	#SS$_NORMAL,R0	
	RET
;
; Argument list - placed here since it must be filled in at IPL 8.
;
	.ALIGN	LONG
	.BLKL  10
DUMMY3:

40$:	.LONG	IPL$_SCS

	.DISABLE LSB
	.PAGE
	.SBTTL	MSCP$GET_COU1 - Return information request counts

	.ENABLE	LSB

	.ENTRY	MSCP$GET_COU1 ^M<R4,R5,R6,R7,R9,R10>

	MOVZWL	#SS$_DEVOFFLINE,R0	; Set for failure to find MSCP
	MOVL	@#SCS$GL_MSCP,R9	; Pick up the pointer to MSCP area
	BLSS	10$			; All okay
	RET				; Return in disgrace

10$:	SETIPL	70$			; Synch access
	MOVAL	W^DUMMY4,R10		; Set up register to mimic stack
	CLRL	-(R10)
	CLRL	-(R10)			; Need two zeros on bottom of stack
	CLRL	(R10)			; for null arguments in display
	MOVAB	MSU$L_BLKCOUNT+512(R9),R9 ; Point to the count	
	MOVAB	REP_TBL,R5		; Point to table of repetitions
30$:	MOVZBL	(R5)+,R7
	BEQL	60$			; Ended	
	MOVZBL	(R5)+,R6
40$:	MOVL	R6,R4			; Copy
	CLRL	-(R10)			; Init counter
50$:	ADDL	-(R9),(R10)		; Tally up the counts
	SOBGTR	R4,50$			; Loop until done
	SOBGTR	R7,40$
	BRB	30$			; Look for next entry

60$:	SETIPL	#0			; Done
	MOVL	R10,@4(AP)		; Beginning of arglist needed for output
	MOVZWL	#SS$_NORMAL,R0
        RET
;
; Tables  & argument list - placed here since they must be accessed at IPL 8.
;
REP_TBL:
	.BYTE	1,24			; 105-127
	.BYTE	4,16			; 40-55,...88-104
	.BYTE	5,8			; 0-7,...32-39			
	.WORD	0

	.ALIGN	LONG
	.BLKL  14
DUMMY4: .LONG

70$:	.LONG	IPL$_SCS

	.DISABLE LSB
        .PAGE
	.SBTTL	MSCP$GET_COU2 - Return the count from MSCP operations

	.ENABLE	LSB

	.ENTRY	MSCP$GET_COU2 ^M<R8,R9,R10>

	MOVZWL	#SS$_DEVOFFLINE,R0	; Set for failure to find MSCP
	MOVL	@#SCS$GL_MSCP,R8	; Pick up the pointer to MSCP area
	BLSS	10$			; All okay
	RET				; Return in disgrace

10$:	MOVAB	MSU$L_OPCOUNT(R8),R9	; Point at counts
	BRB	21$

21$:	SETIPL	70$			; Synch access to data block
	MOVAL	DUMMY5,R10		; Set up register to mimic stack
;
;   Get all operations by category and build 'stack'
;
	MOVL	MSU$L_OPCOUNT(R8),-(R10); TOTAL
	MOVL	MSU$L_WRITE(R8),-(R10)	; WRITE
	MOVL	MSU$L_ONLINE(R8),-(R10) ; ONLINE
	MOVL	32*4(R9),-(R10)		; CMP HST DAT
	MOVL	MSU$L_SETUNIT(R8),-(R10); SET UNT CHR
	MOVL	MSU$L_GETUNIT(R8),-(R10); GET UNT STS
	MOVL	17*4(R9),-(R10)		; CMP CTL DAT
	MOVL	MSU$L_SETCTRL(R8),-(R10); SET CTL CHR
	MOVL	MSU$L_GETCMD(R8),-(R10) ; GET CMD STS
	MOVL	MSU$L_AVAIL(R8),-(R10)  ; AVAILABLE
	MOVL	20*4(R9),-(R10)         ; REPLACE
	MOVL	19*4(R9),-(R10)		; FLUSH
	MOVL	16*4(R9),-(R10)		; ACCESS
	MOVL	MSU$L_READ(R8),-(R10)	; READ
	MOVL	18*4(R9),-(R10)		; ERASE
	MOVL	MSU$L_ABORT(R8),-(R10)	; ABORT
	SETIPL	#0			; Finished with block
	MOVL	R10,@4(AP)
	MOVZWL	#SS$_NORMAL,R0
	RET
;
; Argument list - placed here since it must be filled in at IPL 8.
;
	.ALIGN	LONG
	.BLKL  16
DUMMY5:

70$:	.LONG	IPL$_SCS

	.DISABLE LSB

	.END	
