	.title	pli$write - pl1 runtime write file
	.ident	/1-003/					; Edit WHM1003

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;


;++
; facility:
;
;	VAX/VMS PL1 runtime library.
; abstract:
;
;	This module contains the pl1 runtime routine for writing a record to
;	a file.
;
; author: c. spitz 18-jul-79
;
; modified:
;
;	Bill Matthews 22-Sep-81
;
;		Fix to get attributes of a close file from the declared
;		attributes rather than the current attributes
;
;
;	1-003	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;--


;+
; external definitions
;-

	$deffcb				;define file control block offsets
	$defdat				;define operand node data types
	$rabdef				;define rab offsets
	$rmsdef				;define rms error codes
	$fabdef				;define fab offsets

;+
; local definitions
;-
$offset	4,positive,<-			;define arguments
	<fcbaddr,4>,-			;addr of fcb
	<fromaddr,4>,-			;addr of from
	<fromlen,2>,-			;length of from
	<fromtyp,2>,-			;data type of from
	<keyaddr,4>,-			;addr of keyfrom
	<keylen,4>,-			;length of keyfrom
	<keytyp,4>,-			;data type of keyfrom
	<fxcaddr,4>,-			;addr of fixed control
	<fxclen,2>,-			;len of fixed control
	<fxctyp,2>,-			;data type of fixed control
	<recidto,4>,-			;addr of record id to
	>				;

	rtshare				;sharable

	.page

;++
; pli$write -- write a record to a file
;
; functional description:
;
; This routine writes a record to a pl1 file.
;
; inputs:
;	(ap) = number of arguments
;		3 if no key, no options
;		6 if key, no options
;		9 if any options
;	4(ap) = address of the fcb for this file
;	8(ap) = address of the from reference
;	12(ap) = word containing the length of the from reference
;	 14(ap) = word containing the data type of the from reference
;	16(ap) = address of the key reference
;	20(ap) = size/prec of key
;	24(ap) = data type of key
;	28(ap) = addr of fixed control
;	32(ap) = word containing length of fixed control
;	 34(ap) = word containing data type of fixed control
;	36(ap) = addr of record id to
; 
; outputs:
;	fcb_l_attr
;		atr_m_delete and atr_m_virgin are set false
;		atr_m_write and atr_m_currec are set true
;	fcb_q_rfa is set to the rfa of the record that was written
;
; side effects:
;	the record is written to the file.
;
;--

	.entry	pli$write,^m<r2,r3,r4,r5,r6,r7,r8>
;
; check arguments.  at least 3 arguments must be present.
;
	cmpl	(ap),#3			;enough arguments?
	beql	10$			;if eql, yes
	cmpl	(ap),#6			;enuf args?
	beql	10$			;if eql, yes
	cmpl	(ap),#9			;enuf args?
	beql	10$			;if eql, yes
	clrl	r0			;indicate not enough parms
	brw	fail			;and fail
10$:	movl	fcbaddr(ap),r2		;get address of fcb
	movl	fcb_l_attr(r2),r3	;get attributes
;
; open the file if necessary. the open attributes will be record and
; if update was not specified in the file declaration, output. if the
; file is not opened after calling open, an error is signaled.
;
	bbs	#atr_v_opened,r3,30$	;if file not opened
	pushl	#atr_m_record		;then request record
	bbs	#atr_v_update, -
		fcb_l_dttr(r2),20$	;if update not specified
	bisl	#atr_m_output,(sp)	;then request output
20$:	pushl	r2			;push address of fcb
	calls	#2,g^pli$open		;open the file
	movl	fcb_l_attr(r2),r3	;get the new attributes
	bbs	#atr_v_opened,r3,30$	;if file still not opened
	movl	#pli$_open,r0		;then set open failure
	brw	fail			;and fail
;
; check file attributes. file must have record. file must not have
; input. if file has update, it must have direct.
;
30$:	bbs	#atr_v_record,r3,40$	;if file does not have record
	movl	#pli$_notrec,r0		;then set not record file
	brw	fail			;and fail
40$:	bbc	#atr_v_input,r3,50$	;if file has input
	movl	#pli$_writein,r0	;then set attempted write to input file
	brw	fail			;and fail
;
; process from reference. copy size and address of from to rab.
;
50$:	movab	fcb_b_rab(r2),r4	;get address of rab
	movl	fromaddr(ap),rab$l_rbf(r4) ;copy address of buffer
	pushl	fromlen(ap)		;push size and data type
	calls	#1,g^pli$$bytesize	;get byte size
	blbs	r0,55$			;if invalid data type
	brw	fail			;then fail
55$:	movw	r1,rab$w_rsz(r4)	;copy size of buffer
	cmpw	#dat_k_char_var,fromtyp(ap) ;if writing from char var
	bneq	56$			;then
	bbs	#atr_v_scalvar,r3,551$	;if scalar varying, write it all
	movw	@fromaddr(ap),rab$w_rsz(r4) ;copy current size to rab
	addl	#2,rab$l_rbf(r4)	;bump address so we don't write length
	brb	56$			;cont
551$:	addw	#2,rab$w_rsz(r4)	;include vcha len in write size
;
; process options
;
56$:	clrl	rab$l_rhb(r4)		;assume no fixed control from
	cmpl	(ap),#9			;options specified?
	bneq	59$			;if neq,  no
	movab	fxcaddr(ap),r0		;get addr of fixed control
	jsb	g^pli$$fxdctlfrom	;process fixed control
	movl	recidto(ap),r0		;get addr of record id to
	jsb	g^pli$$valrecidto	;validate record id to
;
; process keyfrom option. if keyfrom is specified, the file must be keyed.
; the keys size and address is copied to the rab. keyed access is set in
; the rab.
;
59$:	cmpl	(ap),#6			;keyfrom specified?
	blss	70$			;if lss, no
	movl	keyaddr(ap),r0		;copy address of key
	beql	70$			;if addr = 0 then no keyfrom
	bbs	#atr_v_keyed,r3,60$	;if file is not keyed
	movl	#pli$_notkeyd,r0	;then set not keyed file
	brw	fail			;and fail
60$:	clrb	rab$b_krf(r4)		;writes always go to primary index
	movab	keyaddr(ap),r0		;point to key descr
	jsb	g^pli$$writekey_r8	;process key
	brb	100$			;continue
;
; sequential write. make sure file has seql. set sequential access in rab.
; if delete set, find the deleted record.
;
70$:	bbs	#atr_v_seql,r3,80$	;if not seql file
	movl	#pli$_notsql,r0		;set not sequential file
	brw	fail			;and fail
80$:	bbc	#atr_v_keyed,r3,90$	;if file has keyed
	movl	#pli$_nokey,r0		;set no key specified
	brw	fail			;and fail
90$:	movb	#rab$c_seq,rab$b_rac(r4) ;set sequential access in rab
	bbc	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),105$ ;if block io
	clrl	rab$l_bkt(r4)		;set for seql access
;
; put the record
;
100$:	bbc	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),105$ ;if block io
	$write	r4			;do a write
	brb	107$			;cont
105$:	$put	r4			;put the record
107$:	blbs	r0,120$			;if put failed
110$:	movl	#pli$_rmsr,r0		;then set error code in rab
	brw	fail			;and fail
;
; successful completion
;
120$:	bicl	#<atr_m_delete!atr_m_virgin>, -	;clear delete, virgin
		fcb_l_attr(r2)			;in fcb
	bisl	#<atr_m_write!atr_m_currec>, - ;set write as last oper and
		fcb_l_attr(r2)	;current record incorrect
	movq	rab$w_rfa(r4),fcb_q_rfa(r2) ;set correct current record in fcb
	cmpl	(ap),#9			;options passed?
	blss	125$			;if lss, no
	movl	recidto(ap),r0		;get addr of recid to
	beql	125$			;if eql, not specified
	movq	rab$w_rfa(r4),(r0)	;set recid to
125$:	ret				;return

	.page

fail:	bneq	10$			;if not enough parms
	movl	#pli$_parm,r0		;then set not enough parms
	clrl	r2			;assume no fcb specified
	cmpl	(ap),#1			;if fcb specified
	blss	30$			;then
	movl	fcbaddr(ap),r2		;get address of fcb
10$:	cmpl	#pli$_rmsr,r0		;rms rab error code?
	bneq	30$			;if neq, no, cont
	cmpl	(ap),#3			;key specified?
	beql	30$			;if eql, no, cont
	movab	keyaddr(ap),r3		;set addr of key descr for onkey
	jsb	g^pli$$chk_keycnd	;check for key condition
30$:	pushl	r2			;set fcb addr
	pushl	r0			;set error code
	pushl	#pli$_error		;set error condition
40$:	calls	#3,g^pli$io_error	;signal the condition
	ret				;return


	.end

