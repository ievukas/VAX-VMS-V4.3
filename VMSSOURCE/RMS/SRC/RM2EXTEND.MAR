	$BEGIN	RM2EXTEND,000,RM$RMS2,<PROLOG LOCK AND UPDATE ROUTINES>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: RMS32
;
; Abstract:
;
;	This module provides two routines to handle the locking
;	and updating of file prologs on extends.
;
; Environment:
;		STAR PROCESSOR RUNNING STARLET EXEC.
;
;
; Author: L F Laverdure,	 Creation date: 1-DEC-1977
;
; Modified By:
;
;	V03-006	JEJ0050		J E Johnson		24-Jul-1984
;		Fix broken error paths in RM$LOCK_PROLOG to keep from
;		releasing the same BDB/BLB twice on an error exit.
;
;	V03-005	RAS0284		Ron Schaefer		30-Mar-1984
;		Fix STV value on error paths for RMS$_RPL and RMS$_WPL errors.
;
;	V03-004	KBT0333		Keith B. Thompson	10-Sep-1982
;		Remove $FRBDEF
;
;	V03-003	KBT0220		Keith B. Thompson	23-Aug-1982
;		Reorganize psects
;
;	V03-002	KBT0118		Keith B. Thompson	6-Aug-1982
;		Remove ref. to set_sifb_adr
;
;	V03-001	KBT0092		Keith B. Thompson	13-Jul-1982
;		Clean up psects
;
;	V02-010	CDS0003		C Saether		10-Dec-1981
;		Fix broken branch.
;
;	V02-009	CDS0002		C. Saether		28-Aug-1981
;		Modifications for new cache/release routines.
;		Use RM$RLNER1 entry point now.
;
;	V02-008	CDS0001		C. Saether		17-Apr-1981
;		Fix error path on prologue write errors to not release
;		bucket twice.
;
;	V02-007	REFORMAT	Maria del C. Nasr	2-Aug-1980
;
;	V006	CDS0049		C Saether		31-OCT-1979	19:45
;		Lock BDB allocated at connect time now.  Remove code to
;		allocate and deallocate on the fly.
;
;	V005	CDS0025		C Saether		27-jul-1979	5:30
;		interlock on vbn -1 if sharing sequential file
;
;	V004	CDS0001		C D Saether		16-Mar-1979	16:10
;		get bcb on extend when shared, don't release prologue
;		twice on error
;
;	V003	RAN0003		R A Newell		9-Nov-1978	10:36
;		file sharing code enhancements
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$BDBDEF
	$CSHDEF
	$FABDEF
	$IFBDEF
	$IRBDEF
	$PLGDEF
	$RLSDEF
	$RMSDEF

;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RM$LOCK_PROLOG - ROUTINE TO LOCK PROLOG AND CHECK FOR EXTEND O.K.

;++
; RM$LOCK_PROLOG
;
;  This routine causes the prolog (vbn 1) for a relative file
;  to be locked for an extend operation.
;  The prolog is read in, its checksum is verified, the noextend flag is checked
;  for being clear if this is a relative file, a lock bdb is allocated, and
;  the buffer for the prolog is released keeping vbn 1 locked.
;
; Calling sequence:
;
;	bsbw	rm$lock_prolog
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r9	ifab/irab address
;	r8	fab/rab address
;
; Implicit Inputs:
;
;	none
;
; Output Parameters:
;
;	r0		status code
;	r4		lock bdb address
;	r1-r3,r5,ap	destroyed
;
; Implicit Outputs:
;
;	none
;
; Completion Codes:
;
;	standard rms.
;
; Side Effects:
;
;	none
;
;--



;
;  This is not an entry point to this module.
;

SEQLCK:
	MNEGL	#1,R1			; -1 to r1
	CLRL	R2			; no size
	$CACHE	VBN=R1,SIZE=R2,-
		 FLAGS=<LOCK,NOREAD,NOBUFFER>
					; lock on vbn -1
	RSB				; and return

RM$LOCK_PROLOG::
	BBS	#IFB$V_SEQFIL,(R10),-
		 SEQLCK			; branch if sequential file
	$CACHE	VBN=#1,SIZE=#512,-
		 FLAGS=LOCK,ERR=ERRRPE	; read & lock prolog
	BSBW	RM$CHKSUM		; verify checksum
	BLBC	R0,ERROR
	ASSUME	PLG$V_NOEXTEND EQ 0
	BLBC	PLG$B_FLAGS(R5),10$	; extends allowed
	RMSERR	EXT			; extends not allowed
	BRB	ERROR			; and out
10$:
	MOVL	#RLS$M_KEEP_LOCK,R3	; specify flag for release
	BSBW	RM$RELEASE		; release buffer for vbn 1
	RSB

;
;  error reading prolog  -  change error code
;

ERRRPE:
	TSTL	FAB$L_STV(R8)		; do we have an stv?
	BNEQ	10$			; okay use it
	BISL3	#^X1000,R0,FAB$L_STV(R8); else set the RMS error there
10$:	RMSERR	RPL
	CLRL	R4			; don't release bdb/blb again in put.
	RSB

;
;  handle checksum error by releasing lock on prolog
;

ERROR:
	PUSHL	R0			; save status code
	BSBW	RM$RLNER1		; release lock
	POPL	R0			; restore status
	CLRL	R4			; don't release again in put
	RSB				; return to caller


	.SBTTL	RM$UPD_PROLOG2 - ROUTINE TO UPDATE AND REWRITE PROLOG

;++
;
; RM$UPD_PROLOG2
; RM$SETHEBK
; RM$RLSPLG
;
;  This routine causes the prolog (vbn 1) for a relative file to be updated
;  and rewritten to the file, releasing the lock on the prolog.
;  If the status code on entry to this routine indicates an error, the
;  noextend bit is set in the prolog indicating that the file cannot be extended.
;
; Calling sequence:
;
;	bsbw	rm$upd_prolog2
;
;  alternate entry at rm$rlsplg to merely release the prolog lock.
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r9	ifab/irab address
;	r8	fab/rab address
;	r6	new eof vbn (= high block + 1)
;	r0	status code
;
; Implicit Inputs:
;
;	It is assumed that the prolog is already locked.
;
; Output Parameters:
;
;	r0		status code
;	r1-r5,ap	destroyed
;
; Implicit Outputs:
;
;	IFB$L_HBK and IFB$L_EBK are set from (R6 - 1) and R6 respectively.
;	For sequential files being shared, IFB$L_EBK is updated from
;	IRB$L_CURVBN.
;	The lock BDB is deallocated.
;
; Completion Codes:
;
;	standard rms.
;
; Side Effects:
;
;	Any stream waiting on the prolog will be restarted.
;
;--


RM$UPD_PROLOG2::
	PUSHL	R0			; save status
	$CACHE	VBN=#1,SIZE=#512,-
		 FLAGS=LOCK,ERR=ERRRPL	; reread prolog blk 1
	BSBW	RM$CHKSUM		; verify checksum
	BLBC	R0,ERRRPL		; branch if bad
	BLBC	(SP),ERREXT		; branch if error on entry
	MOVL	R6,PLG$L_EOF(R5)	; set eof vbn
MAKSUM:	BSBW	RM$MAKSUM		; recompute checksum
	BISB2	#BDB$M_DRT!BDB$M_VAL,-
		 BDB$B_FLGS(R4)		; say buffer valid & dirty
	MOVL	#RLS$M_WRT_THRU!-
		 RLS$M_KEEP_LOCK,R3	; cause immediate write
	BSBW	RM$RELEASE		; write vbn 1
	BLBC	R0,ERRWPL		; branch if error

;
;  update eof vbn and highest allocated block
;

RM$SETHEBK::
	SUBL3	#1,R6,IFB$L_HBK(R10)		; update hi block
	BBS	#IFB$V_SEQFIL,(R10),SEQFL	; branch if really seq
	MOVL	R6,IFB$L_EBK(R10)		; update eof block

;
;  release lock on prolog
;

RLSPLG:	BSBW	RM$RLNER1		; free lock on prolog
	POPR	#^M<R0>			; restore status code
	RSB				; return to caller
SEQFL:
	PUSHL	R10			; save ifab addr for what i dont know
	BRB	RLSPLG			; go release vbn -1


;
;  Handle prolog read error
;  Prolog may still be locked.  Must release it.
;

ERRRPL:
	$CACHE	VBN=#1,SIZE=#0,-
		 FLAGS=NOREAD		; find prolog bdb
	BLBC	(SP),RLSPLG		; branch if already had error
	TSTL	FAB$L_STV(R8)		; do we have an stv?
	BNEQ	10$			; okay use it
	BISL3	#^X1000,(SP),FAB$L_STV(R8); else set the RMS error there
10$:	RMSERR	RPL,(SP)		; replace status code

;
;  Caller entered rm$upd_prolog2 with an error status.
;  This must have been due to a bucket format write failure.
;  Set the noextend bit in the prolog to prevent further attempts
;  to extend the file.
;

ERREXT:
	BISB2	#1@PLG$V_NOEXTEND,-
		 PLG$B_FLAGS(R5)	; set flag
	RMSERR	EXT,(SP)		; update error code
	MOVL	IFB$L_EBK(R10),R6	; cause ebk not to be updated
	BRB	MAKSUM			; go rewrite prolog

;
;  Error occurred trying to rewrite the prolog.
;  Update status code and return.  The bdb was already
;  released in release due to the error.
;

ERRWPL:
	BLBC	(SP),20$		; branch if already had error
	TSTL	FAB$L_STV(R8)		; do we have an stv?
	BNEQ	10$			; okay use it
	BISL3	#^X1000,(SP),FAB$L_STV(R8); else set the RMS error there
10$:	RMSERR	WPL,(SP)		; change status code
20$:	POPR	#^M<R0>			; pop status off stack
	RSB				; return

;++
;  Entry point to release the prolog.
;
;  inputs:
;	r4	bdb address
;	r0	status code
;
;  outputs:
;	R1-R5, AP destroyed
;
;--

RM$RLSPLG::
	PUSHL	R0			; push status
	BRB	RLSPLG			; go do release


	.END
