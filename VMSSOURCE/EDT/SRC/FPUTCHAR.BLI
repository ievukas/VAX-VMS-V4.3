%TITLE 'EDT$FPUTCHAR - store a character in the format buffer'
MODULE EDT$FPUTCHAR (				! Store a character in the format buffer
		IDENT = 'V04-000'			! File: FPUTCHAR.BLI Edit: JBS1004
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Store a character in the format buffer.  Write out the buffer
!	if it overflows.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: March 18, 1979
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 19-FEB-1981.  This module was created by
!	extracting routine EDT$$PUT_CH  from module FORMAT.
! 1-002	- Regularize headers.  JBS 05-Mar-1981
! 1-003	- Use EDT$$K_FMT_BUFLEN.  JBS 29-Sep-1982
! 1-004	- Fix a local symbol name.  JBS 04-Jan-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$STORE_FMTCH : NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$STORE_FMTCH  - store a character in the format buffer'

GLOBAL ROUTINE EDT$$STORE_FMTCH (		! Store a character in the format buffer
    C						! The character to store
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Place a character in the formatted output buffer.  If the pointer is at the
!	end of the buffer then write out the line and start over again.
!
! FORMAL PARAMETERS:
!
!  C			The character to put out.
!
! IMPLICIT INPUTS:
!
!	EDT$$T_FMT_BUF
!	EDT$$A_FMT_CUR
!	EDT$$G_FMT_LNPOS
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$OUT_FMTBUF;

    EXTERNAL
	EDT$$T_FMT_BUF : BLOCK [CH$ALLOCATION (EDT$$K_FMT_BUFLEN)],	! The formatted output buffer
	EDT$$A_FMT_CUR,				! Pointer to next character in above
	EDT$$G_FMT_LNPOS;			! The current column number

    LOCAL
	SAV_LNPOS;

    BIND
	END_BUF = CH$PTR (EDT$$T_FMT_BUF, EDT$$K_FMT_BUFLEN);	! Pointer to end of format buffer

!+
! Check for end of buffer.
!-

    IF CH$PTR_EQL (END_BUF, .EDT$$A_FMT_CUR)
    THEN
	BEGIN
	SAV_LNPOS = .EDT$$G_FMT_LNPOS;
	EDT$$OUT_FMTBUF ();
	EDT$$G_FMT_LNPOS = .SAV_LNPOS;
	END;

    CH$WCHAR_A (.C, EDT$$A_FMT_CUR);
    END;					! of routine EDT$$STORE_FMTCH

!<BLF/PAGE>

END						! of module EDT$FPUTCHAR

ELUDOM
