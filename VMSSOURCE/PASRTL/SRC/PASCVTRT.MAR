	.TITLE	PAS$CVTRT - Convert real to text
	.IDENT	/1-004/			; File: PASCVTRT.MAR  Edit: SBL1004

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Pascal Language Support Library
;
; ABSTRACT:
;
;	This module contains procedures to convert a floating point value
;	to a text representation using either exponential or fixed-point
;	notation.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: Steven B. Lionel, CREATION DATE: 12-March-1982
;

; Edit History:
;
; 1-001 - Adapted from FOR$CVTRT Edit 1-014.  SBL 12-March-1982
; 1-002 - Take advantage of new OTS$$CVT_F_T_R8 routine.  SBL 14-Mar-1983
; 1-003 - Whoops.  Forgot to fetch address of value for FIXED_POINT in 1-002.
;	  SBL 19-Apr-1983
; 1-004 - Move value address fetch in FIXED_POINT.  SBL 18-May-1983

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
;	NONE
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.
	.EXTRN	OTS$$CVT_D_T_R8			; Kernel convert routine
	.EXTRN	OTS$$CVT_F_T_R8			; For F floating
	.EXTRN	OTS$$CVT_G_T_R8			; For G floating
	.EXTRN	OTS$$CVT_H_T_R8			; For H floating

;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
	REGMASK = ^M<R2, R3, R4, R5, R6, R7, R8>

; Stack frame offsets from FP
;; Common frame for kernel convert routines
	PACKED = -8			; Temp for packed representation
	FLAGS = PACKED - 4		; Flags for outer and inner routines
	SIG_DIGITS = FLAGS - 4		; Significant digits
	STRING_ADDR = SIG_DIGITS - 4	; Address of temp string
	SIGN = STRING_ADDR - 4		; Sign
	DEC_EXP = SIGN - 4		; Decimal exponent
	OFFSET = DEC_EXP - 4		; Offset
	RT_RND = OFFSET - 4		; Right round point
	COMMON_FRAME = RT_RND		; Common frame size
;; Not-in-common stack frame
	EXP_LETTER = COMMON_FRAME - 4	; Exponent letter to use
	S_DI = EXP_LETTER - 4		; Saved digits in integer
	S_DE = S_DI - 4			; Saved digits in exponent
	S_DF = S_DE - 4			; Saved digits in fraction
	LEAD_DIGITS = S_DF - 4		; Number of leading digits
	LEAD_ZERO = LEAD_DIGITS - 4	; Number of zeroes after decimal pt.
	TRAIL_DIGITS = LEAD_ZERO - 4	; Number of trailing digits
	FRAME = TRAIL_DIGITS		; Frame size

	M_RT_ROUND = 1@25		; Flag to kernel routine


;
; PSECT DECLARATIONS:
;
	.PSECT _PAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG
;
; OWN STORAGE:
;

;+
; Define datatype codes and tables indexed by those codes.
;-

	DTP_F = 0
	DTP_D = 1
	DTP_G = 2
	DTP_H = 3

;+
; Table giving number of exponent digits in exponential format.
;-

EXP_DIG_TAB:
	.BYTE	2,2,3,4

;+
; Table giving bit position of exponent.
;-

POS_TAB:
	.LONG	7,7,4,0

;+
; Table giving size of exponent in bits.
;-

SIZE_TAB:
	.BYTE	8,8,11,15

;+
; Table giving exponent biases.  The table values are actually three
; lower than the actual bias so that when the unbiased exponent is divided
; by three (for fixes-point conversion), the result is what the true result
; would be rounded up to the next higher value.
;-

BIAS_TAB:
	.LONG	125,125,1021,16381

	.SBTTL	PAS$CVT_z_T - Convert real to text
;++
; FUNCTIONAL DESCRIPTION:
;
;	These procedures convert a floating point value to a text
;	representation, and store that representation in a result string.
;	The representation is exponential format if the frac_digits
;	argument is omitted, and fixed-point notation if it is present.
;
;	The minimum width of the string written is indicated by the
;	contents of the argument actual_width.  This argument is
;	modified by the procedure to contain the actual number of
;	characters used, which may be more than the minimum width.
;
;	If the width actually used is less than the minimum width,
;	leading blanks are stored.  If the maximum_width is less than
;	the width needed, a failure status is returned and the width
;	that would be sufficient is stored in actual_width.
;
;	The syntax of the text representation conforms to that specified
;	by VAX-11 Pascal for textfile output of real data.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = PAS$CVT_z_T (
;				    value.rz.r,
;				    dest.wt.r,
;				    actual_width.ml.r,
;				    max_width.rl.v
;				    ,[frac_digits.rl.v])
;
;   where "z" is the datatype (F, D, G or H)
;	
; FORMAL PARAMETERS:
;
	value 		= 4	; Value to be converted
	dest		= 8	; Destination string
	actual_width	= 12	; As input, the minimum width of the
				; destination.  As output, the width actually
				; used (or needed in case of error)
	max_width	= 16	; Maximum destination width
	frac_digits	= 20	; Number of fraction digits.  If omitted,
				; then the result is in exponential notation.
				; Otherwise it is in fixed-point notation with
				; the given number of fraction digits.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	1 - Success
;	0 - Failure - The value could not be represented in "max_width"
;	    characters.  "actual_width" gives the number of characters
;	    needed for the entire value.
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND if the value is a reserved operand.
;
;--

	.ENTRY	PAS$CVT_F_T, REGMASK
	MOVAB	G^OTS$$CVT_F_T_R8, R8	; Convert routine address
	MOVL	#DTP_F, R7		; Set datatype code
	BRB	COMMON

	.ENTRY	PAS$CVT_D_T, REGMASK
	MOVAB	G^OTS$$CVT_D_T_R8, R8	; Convert routine address
	MOVL	#DTP_D, R7		; Set datatype code
	BRB	COMMON

	.ENTRY	PAS$CVT_G_T, REGMASK
	MOVAB	G^OTS$$CVT_G_T_R8, R8	; Convert routine address
	MOVL	#DTP_G, R7		; Set datatype code
	BRB	COMMON

	.ENTRY	PAS$CVT_H_T, REGMASK
	MOVAB	G^OTS$$CVT_H_T_R8, R8	; Convert routine address
	MOVL	#DTP_H, R7		; Set datatype code
;	BRB	COMMON


COMMON:
	ADDL2	#FRAME, SP		; Create stack frame
	CMPB	(AP), #<frac_digits/4>	; Frac_digits argument present?
	BLSSU	10$			; If not, do exponential format
	BRW	FIXED_POINT		; Do fixed-point format

10$:	CLRL	FLAGS(FP)		; Clear flags
	MOVZBL	EXP_DIG_TAB[R7], S_DE(FP)  ; Get number of exponent digits

;+
; Determine the minimum width and increase actual_width to that if it is smaller.
; This is done by the rules of the Pascal standard.
;-

	ADDL3	#6, S_DE(FP), R1	; ActWidth := ExpDigits + 6
	CMPL	R1, @actual_width(AP)	; Compare with caller width
	BLEQ	20$			; Skip if less than or equal
	MOVL	R1, @actual_width(AP)	; Store increased width

;+
; Check for maximum width exceeded.
; Compute number of fraction digits which can be represented in this width,
; and get the number of significant digits.  Allocate the kernel convert
; routine's temporary string space and call it to do the convert.
;-

20$:	CMPL	@actual_width(AP), max_width(AP) ; Not enough characters?
	BGTR	ERROR_E			; Error if so
	DECL	R1			; Compute fraction digits
	SUBL3	R1, @actual_width(AP), S_DF(FP) ; DecPlaces := ActWidth - ExpDigits - 5
	ADDL3	#1, S_DF(FP), SIG_DIGITS(FP) ; Get number of significant digits
	ADDL3	#19, SIG_DIGITS(FP), R2	; Find temp_string length
	SUBL2	R2, SP			; Create string on stack
	MOVL	SP, STRING_ADDR(FP)	; Temp string address
	MOVL	FP, R1			; Local frame address
	MOVL	value(AP), R0		; Value address
	JSB	(R8)			; Call kernel conversion routine

;+
; Determine how many digits are in each field of the output string.
;-

	ADDL2	OFFSET(FP), STRING_ADDR(FP) ; Get first character pos.
	DECL	DEC_EXP(FP)		; Adjust for leading digit
	TSTL	SIGN(FP)		; Is value zero?
	BNEQ	30$			; No
	CLRL	DEC_EXP(FP)		; Yes, exponent is zero
30$:	MOVL	S_DF(FP), TRAIL_DIGITS(FP)
	MOVL	#1, LEAD_DIGITS(FP) 	; Number of leading digits
	CLRL	LEAD_ZERO(FP)		; No leading zeroes
	MOVL	@actual_width(AP), R1	; Get minimum field width
	ADDL3	#4, S_DE(FP), R0	; Get width of value
	ADDL2	S_DF(FP), R0		; Add in fraction digits
	TSTL	SIGN(FP)		; Is value negative?
	BGEQ	40$			; Skip if not
	INCL	R0			; Cause one less space to be output

;+
; Output the digits and exponent.
;-

40$:	BSBW	DIGITS_OUT		; Output digits
	MOVB	#^A/E/, (R3)+		; Move exponent letter
	MOVL	R3, R4			; Save pointer to exponent field
	CVTLP	DEC_EXP(FP), #5, PACKED(FP) ; Convert exponent
	CVTPS	#5, PACKED(FP), S_DE(FP), (R4)
	INCL	R0			; R0 was zeroed by CVTPS, make it 1
	RET				; Return success

;+
; Branch to ERROR_E if the minimum necessary width is wider than the
; maximum.  The necessary width is already stored in actual_width.
;-

ERROR_E:
	CLRL	R0			; Indicate failure
	RET				; return to caller

	.SBTTL	FIXED_POINT - Fixed point format

FIXED_POINT:

;+
; Estimate (liberally) how many significant digits we need.
; This is done by getting the unbiased exponent and dividing it
; by 3, which is slightly smaller than log2(10).  This will give
; us a value, perhaps slightly large (which is harmless), for the
; number of digits to the left of the decimal point.  Then add the
; number of fraction digits.
;
; Note:  The bias value in BIAS_TAB is actually three smaller than the
; true exponent bias.  This is so that the number of digits we need is
; rounded up to the next higher number.
;-

	MOVL	value(AP), R0		; Get value address
	EXTZV	POS_TAB[R7], SIZE_TAB[R7], (R0), R1 ; Extract exponent
	SUBL2	BIAS_TAB[R7], R1	; Unbias exponent
	DIVL2	#3, R1			; Get power of 10 (approximately)
	BGEQ	10$			; Skip if positive
	MOVL	#1, R1			; Get one digit

10$:	ADDL3	R1, frac_digits(AP), SIG_DIGITS(FP) ; Number of digits needed

;+
; Allocate the kernel convert routine's temporary string, specify the
; rounding position, and do the conversion.
;-

	ADDL3	#19, SIG_DIGITS(FP), R2	; Calculate temp string length
	SUBL2	R2, SP			; Create string on stack
	MOVL	SP, STRING_ADDR(FP)	; String address
	MOVL	#M_RT_ROUND, FLAGS(FP)	; Flag indicating right round
	MOVL	frac_digits(AP), RT_RND(FP)  ; Rounding position
	MOVL	FP, R1			; Local frame pointer
	JSB	(R8)			; Do the conversion

;+
; Get sizes of the various fields in the result string.
;-

	ADDL2	OFFSET(FP), STRING_ADDR(FP) ; Get first digit pos.
	TSTL	SIGN(FP)		; Is value zero?
	BNEQ	30$			; If zero
	CLRL	DEC_EXP(FP)		; Then exponent is zero
30$:	MOVL	DEC_EXP(FP), LEAD_DIGITS(FP)	; Number of leading digits
	BGEQ	40$			; If greater than 0
	CLRL	LEAD_DIGITS(FP)		; Else no leading digits
40$:	MNEGL	DEC_EXP(FP), LEAD_ZERO(FP)	; Number of zeroes after dec pt.
	BGEQ	50$			; If greater than 0
	CLRL	LEAD_ZERO(FP)		; Else no leading zeroes
50$:	SUBL3	LEAD_ZERO(FP), frac_digits(AP), TRAIL_DIGITS(FP)
	BGEQ	60$			; If not positive
	CLRL	TRAIL_DIGITS(FP)	; Then no trailing digits
	MOVL	frac_digits(AP), LEAD_ZERO(FP)
	TSTL	LEAD_DIGITS(FP)		; Any significant digits?
	BGTR	60$			; Yes
	CLRL	SIGN(FP)		; No, value is +0
60$:	ADDL3	LEAD_DIGITS(FP), LEAD_ZERO(FP), R0	; Compute characters needed
	ADDL2	TRAIL_DIGITS(FP), R0
	INCL	R0			; One for the decimal point
	TSTL	SIGN(FP)		; Is it negative?
	BGEQ	70$			; Skip if not
	INCL	R0			; One for the sign
70$:	TSTL	LEAD_DIGITS(FP)		; Leading zero required?
	BGTR	80$			; No
	INCL	R0			; One for the zero

;+
; Compare necessary width with maximum width.
;-

80$:	MOVL	@actual_width(AP), R1	; Get actual width
	CMPL	R0, R1			; Need to expand field?
	BLEQ	90$			; Skip if no
	MOVL	R0, R1			; Expand field
	MOVL	R0, @actual_width(AP)	; Store expanded field size
90$:	CMPL	R1, max_width(AP)	; Maximum width exceeded?
	BGTR	ERROR_F			; Error if so
	BSBW	DIGITS_OUT		; Format the digits
	MOVL	#1, R0			; Indicate success
	RET				; Return to caller

;+
; Branch to ERROR if the field would expand past max_width.
;-
ERROR_F:
	CLRL	R0			; Indicate failure
	RET				; Return to caller

	.SBTTL	DIGITS_OUT
;+
; Routine to format the digits in the output string.
;
;	On entry, R0 contains the number of characters actually needed
;	by the result string.  R1 contains the minimum field width
;
; The string will be constructed as follows:
;
;	n blanks (n is R1-R0)
;	LEAD_DIGITS digits
;	a decimal point
;	LEAD_ZERO zeroes
;	TRAIL_DIGITS digits
;
;	The sign is inserted where appropriate.  If LEAD_DIGITS is
;	zero, a leading zero is inserted.
;
;	Upon exit, R3 points to one byte past where the last character
;	was written.
;-
DIGITS_OUT:
	MOVL	STRING_ADDR(FP), R6		; Address of first digit
	MOVL	dest(AP), R3			; Get destination address
	SUBL2	R0, R1				; Get number of leading
						; blanks required
	BLEQ	20$				; No blanks needed?
10$:	MOVB	#^A/ /, (R3)+			; Insert leading blanks
	SOBGTR	R1, 10$				; Loop till done
20$:	TSTL	SIGN(FP)			; Negative?
	BGEQ	30$				; No
	MOVB	#^A/-/, (R3)+			; Minus sign
30$:	MOVL	LEAD_DIGITS(FP), R0		; Check for leading zero
	BGTR	40$				; Not necessary
	MOVB	#^A/0/, (R3)+			; Insert zero
	BRB	50$				; Skip leading digits
40$:	MOVB	(R6)+, (R3)+			; Move a digit
	SOBGTR	R0, 40$				; Loop till done
50$:	MOVB	#^A/./, (R3)+			; Move decimal point
	MOVL	LEAD_ZERO(FP), R0		; Insert leading zeroes
	BLEQ	70$				; Skip if none
60$:	MOVB	#^A/0/, (R3)+			; Move a zero
	SOBGTR	R0, 60$				; Loop till done
70$:	MOVL	TRAIL_DIGITS(FP), R0		; Move trailing digits
	BLEQ	90$				; Skip if none
80$:	MOVB	(R6)+, (R3)+			; Move trailing digit
	SOBGTR	R0, 80$				; Loop till done
90$:	RSB					; Return


	.END					; End of module PAS$CVTRT
