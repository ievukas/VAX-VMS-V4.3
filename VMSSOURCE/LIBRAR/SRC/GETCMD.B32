MODULE LIB_GETCMD (			! Get LIBRARIAN command line
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  Library command processor
!
! ABSTRACT:
!
!	The VAX/VMS librarian is invoked by DCL to process the LIBRARY
!	command.  It utilizes the librarian procedure set to perform
!	the actual modifications to the library.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Benn Schreiber,	 CREATION DATE:  11-June-1979
!
! MODIFIED BY:
!
! 	V03-007 GJA0085 	Greg Awdziewicz 	27-Jun-1984 
! 		- Don't overwrite lib$gl_type and default extensions 
! 		which were set because of a library-type qualifier just 
! 		because an extension was specified on the library file 
! 		specification.  (Important especially for inserting into 
! 		a shareable image library.) 
! 
! 	V03-006 GJA0075 	Greg Awdziewicz 	10-Feb-1984 
! 		- Use the new improved LIB$File_scan with multiple 
! 		sticky file and searchlist capability.  Remove uses 
! 		of related filename nameblock. 
! 
!	V03-005	MCN0145		Maria del C. Nasr	07-Feb-1984
!		Add qualifier /DATA with keywords REDUCE and EXPAND
!		to replace /COMPRESS=REDUCE.  We will share the same
!		flags, and routines originally used with /COMPRESS.
!
!	V03-004	JWT0115		Jim Teague		27-Apr-1983
!		Made /SQUEEZE default.
!
!	V03-003	JWT0103		Jim Teague		05-Apr-1983
!		New CLI interface.
!
!	V03-002	JWT0056		Jim Teague		16-Sep-1982
!		Implemented DCX interface for /COMPRESS=REDUCE
!
!	V03-001		RPG0301		Bob Grosso	27-Apr-1982
!		Add subtitles to listing and fix /QUAL="" so the
!		novalue error message has the name of the qualifier 
!		filled in.
!
!--

%SBTTL 'Declarations';

LIBRARY
	'SYS$LIBRARY:STARLET.L32';		!System data structure definitions
LIBRARY
	'SYS$LIBRARY:CLIMAC.L32';		!Command language data structure defs.
LIBRARY
	'SYS$LIBRARY:TPAMAC.L32';		!Table driven finite state parser macros
REQUIRE
	'PREFIX';				!Macro defs, etc.
REQUIRE
	'LIBDEF';				!Librarian command interface definitions

sd ( 'MODULES', 'BEFORE', 'COMPRESS', 'CREATE', 'CROSS_REFERENCE', 'DATA',
     'DELETE', 'EXTRACT', 'FULL', 'GLOBALS', 'HELP', 'HISTORY',
     'INSERT', 'LIST', 'LOG', 'MACRO', 'NAMES', 
     'OBJECT', 'ONLY', 'OUTPUT', 'REMOVE', 'REPLACE', 'SELECTIVE_SEARCH', 'SHARE',
     'SINCE', 'SQUEEZE', 'TEXT', 'WIDTH', 'P1', 'P2' );

LITERAL
    qualtabsiz = 24,
    fdbsize = fdb$c_size + nam$c_bln		!Define total size of an FDB
		+ (2 * nam$c_maxrss);

EXTERNAL ROUTINE
    lib$cvt_dtb : addressing_mode(general),
    cli$get_value,
    cli$present,
    getfilnamdesc,				!Return string descriptor for filename
    lib_get_mem,				!Allocate virtual memory
    lib$cvt_time : ADDRESSING_MODE (GENERAL),	!convert ascii time to binary
    lib$file_scan : ADDRESSING_MODE (GENERAL),	!Find wild-card files
    lib$tparse : ADDRESSING_MODE (GENERAL),	!Table driven parser
    lib$lookup_key : ADDRESSING_MODE (GENERAL), !Look up qualifier keyword
    lib_free_mem;				!Deallocate virtual memory

FORWARD ROUTINE
    clearsqueeze,				!Clear local squeeze bit
    setsqueeze,					!Set local squeeze bit
    selectcrosref,				!Select cross reference options
    scan_options,				!Scan create/compress/data options
    call_tparse,				!call lib$tparse
    syntaxerr,					!report tparse syntaxerr
    value_req,					!Set flag that a value is required on create/compress option.
    set_macro_type,				!/MACRO
    set_object_type,				!/OBJECT
    set_help_type,				!/HELP
    set_text_type,				!/TEXT
    set_shr_type,				!/SHARE
    set_lib_type,				!Does the work for set_xx_type
    listonlymods,				!/ONLY
    setmodulename,				!/MODULES
    compressfile,				!/COMPRESS
    createlib,					!/CREATE
    datareduce,					!/DATA
    extractfile,				!/EXTRACT
    deletemodules,				!/DELETE
    setlistfile,				!/LIST
    setlistwidth,				!/WIDTH
    removesymbols,				!/REMOVE
    outputfile,					!/OUTPUT processor
    input1file,					!Primary input file processor
    input2file,					!Secondary input file processor
    get_name_list,				!Extract args from qualifier
    filescantruact,				!Action routine for successful file scan
    filescanflsact,				!Action routine for unsuccessful scan
    initialize_fdb,				!Initialize an FDB
    date_parse,					!Parse date for /BEFORE and /SINCE
    since_date,
    before_date,
    allocate_fdb,				!Allocate file descriptor block
    clierror : novalue;				!Process CLI errors

EXTERNAL
    lib$before_date : BBLOCK,			!Date from /BEFORE
    lib$since_date : BBLOCK,			!Date from /SINCE
    lib$al_creopts : VECTOR [,LONG],		!Array of create option values
    lib$gl_cre8flags : BITVECTOR,		!Bit flags for specified create/compress options
    lib$gl_listwid,				!width of library list line
    lib$gl_type,				!Library type
    lib$gl_modlisl : VECTOR [2],		!Listhead for "list only" name list
    lib$gl_modxtrl : VECTOR [2],		!Listhead for module extraction
    lib$gl_modupdl : VECTOR [2],		!Listhead for library updates
    lib$gl_objsyrml : VECTOR [2],		!Listhead for object module symbol removal
    lib$gl_delmodl : VECTOR [2],		!Listhead for deleted module list
    lib$gl_ctlmsk : BLOCK [2],			!Control mask for Librarian
    lib$gl_libfdb : REF BBLOCK,			!FDB for library file
    lib$gl_outfdb : REF BBLOCK,			!FDB for output file
    lib$gl_lisfdb : REF BBLOCK,			!FDB for listing file
    lib$gl_tmpfdb : REF BBLOCK,			!FDB for temporary use
    lib$gl_inplist : REF BBLOCK,		!Listhead for input files list
    lib_mac_defext : BBLOCK,			!Default extension for macro source files
    lib_obj_defext : BBLOCK,			!...for object files
    lib_hlp_defext : BBLOCK,			!...for help files
    lib_txt_defext : BBLOCK,			!...for text files
    lib_shr_defext : BBLOCK;			!...for shr img stb libraries

GLOBAL
    lib$gl_tpindex,
    lib$gl_valreq,
    lib$gl_creflags : BLOCK [1];		!Cross reference flags

OWN

    qual_table : vector [ qualtabsiz, long ] initial
		( sd_before, sd_compress, sd_create, sd_cross_reference,
		  sd_data, sd_delete, sd_extract, sd_full,
		  sd_globals, sd_help, sd_history, sd_list, sd_log, sd_macro, sd_names, sd_object,
		  sd_only, sd_remove, sd_share, sd_since, sd_text, sd_replace, sd_insert, sd_squeeze ),

    bit_table : vector [ qualtabsiz, byte ] initial ( byte 
		( $bitposition(lib$v_before),$bitposition(lib$v_compress),
		  $bitposition(lib$v_create),$bitposition(lib$v_cross),
		  $bitposition(lib$v_data),$bitposition(lib$v_delete),$bitposition(lib$v_extract),
		  $bitposition(lib$v_full),$bitposition(lib$v_globals),$bitposition(lib$v_help),
		  $bitposition(lib$v_history),$bitposition(lib$v_list),$bitposition(lib$v_log),
		  $bitposition(lib$v_macro),$bitposition(lib$v_names),$bitposition(lib$v_object),
		  $bitposition(lib$v_only),$bitposition(lib$v_remove),$bitposition(lib$v_shrstb),
		  $bitposition(lib$v_since),$bitposition(lib$v_text),$bitposition(lib$v_replace),
		  $bitposition(lib$v_insert),$bitposition(lib$v_squeeze)   )),

    call_table : vector [ qualtabsiz, long ] initial 
		( before_date, compressfile, createlib, selectcrosref, 
		  datareduce, deletemodules, extractfile, 0, 0,
		  set_help_type, 0, setlistfile, 0, set_macro_type, 0, set_object_type, listonlymods,
		  removesymbols, set_shr_type, since_date, set_text_type, 0, 0, 0 ),

    crf_table : $lib_key_table (
		( SYMBOL, 0 ), ( VALUE, 1 ), ( MODULE, 2 ) ),
    opt_table : $lib_key_table (
		( ALL, 0 ), ( NONE, 1 ) ),
!
! Other OWN storage
!
    list_desc : dynamic_descriptor,
    squeeze_flag : INITIAL (1),				!Cleared if /NOSQUEEZE.
    def_lib_extn : BBLOCK [dsc$c_s_bln],		!Default extension for libraries
    def_fil_extn : BBLOCK [dsc$c_s_bln],		!Default extension for other files
    lastfdb : REF BBLOCK,				!Pointer to last FDB allocated
    prevfdb : REF BBLOCK,				!Pointer to previous of last
    sysoutputdesc : descriptor ('SYS$OUTPUT:'),		!String descriptor for SYS$OUTPUT
    modulenamedesc : dynamic_descriptor,		!String descriptor for /MODULES=
    cliworkptr,						!Pointer to cli work area
    filesnotfound,					!Count of not found files
    token_desc : dynamic_descriptor,
    crf_bysymbol : descriptor ('SYMBOL'),		!Cross reference by symbol
    crf_byvalue  : descriptor ('VALUE'),		!Cross reference by value
    crf_bymodule : descriptor ('MODULE'),		!Cross reference by module
    crf_bynone : LONG INITIAL (0),			!End of crf options
    all_options : descriptor ('ALL'),			!All of the options
    no_options : descriptor ('NONE'),			!None of the options
    end_options : LONG INITIAL (0),			!End of all/none

    tpa_block : BBLOCK [tpa$k_length0],			!tparse block
    tpa_desc : REF BBLOCK;				!pointer to current string descriptor


%SBTTL 'TPARSE tables';

!
!   TPARSE tables to parse /CREATE=() qualifier values.
!
$INIT_STATE (create_states, create_keys);

$STATE (,
	('BLOCKS',tpa$_exit,value_req,lib$c_opt_blks, lib$gl_tpindex,true),
	('GLOBALS',tpa$_exit,value_req,lib$c_opt_gbls, lib$gl_tpindex,true),
	('MODULES',tpa$_exit,value_req,lib$c_opt_mods, lib$gl_tpindex,true),
	('KEYSIZE',tpa$_exit,value_req,lib$c_opt_ksz, lib$gl_tpindex,true),
	('HISTORY',tpa$_exit,value_req,lib$c_opt_luhs, lib$gl_tpindex,true),
	('VERSION',tpa$_exit,value_req,lib$c_opt_ver, lib$gl_tpindex,true),
	(tpa$_lambda,tpa$_exit,syntaxerr, , ,lib$_badkey),
	);


$INIT_STATE (compress_states, compress_keys);

$STATE (,
	('BLOCKS',tpa$_exit,value_req,lib$c_opt_blks, lib$gl_tpindex,true),
	('GLOBALS',tpa$_exit,value_req,lib$c_opt_gbls, lib$gl_tpindex,true),
	('MODULES',tpa$_exit,value_req,lib$c_opt_mods, lib$gl_tpindex,true),
	('KEYSIZE',tpa$_exit,value_req,lib$c_opt_ksz, lib$gl_tpindex,true),
	('HISTORY',tpa$_exit,value_req,lib$c_opt_luhs, lib$gl_tpindex,true),
	('VERSION',tpa$_exit,value_req,lib$c_opt_ver, lib$gl_tpindex,true),
	('KEEP', tpa$_exit,value_req,1^lib$c_opt_keep, lib$gl_cre8flags,false),
	('REDUCE', tpa$_exit,value_req,1^lib$c_opt_dcx, lib$gl_cre8flags,false),
	(tpa$_lambda,tpa$_exit,syntaxerr,,, lib$_badkey),
	);
!
! TPARSE tables for /DATA qualifier options
!
$INIT_STATE (data_states, data_keys);

$STATE (,
	('REDUCE', tpa$_exit,value_req,1^lib$c_opt_dcx, lib$gl_cre8flags,false),
	('EXPAND', tpa$_exit,value_req,,,false),
	(tpa$_lambda,tpa$_exit,syntaxerr,,, lib$_badkey),
	);

%SBTTL 'LIB_GET_COMMAND';

GLOBAL ROUTINE lib_get_command  (arglist) =
BEGIN

!++
! This routine initializes the CLI result parser and then re-calls it for the
! processing of each command.
!
! Inputs:
!
!	arglist		pointer to the argument list that invoked the image
!
! Outputs:
!
!	the command is parsed, data structures filled in.
!
!--
MAP
	arglist : REF BBLOCK;
LOCAL
	status;

lastfdb = lib$gl_inplist;				!Init the last FDB pointer
prevfdb = lib$gl_inplist;				! and the prev. fdb pointer
lib$gl_inplist = 0;					!Init input FDB listhead

! Initialize the library type as "unknown" but set the default file 
! extensions as if the library type is "object", which will be the 
! default if no other mechanism changes it: 
! 
set_lib_type (lbr$c_typ_unk, lib_obj_defext); 

!
! Initialize the name list queue headers
!
lib$gl_modlisl [0] = lib$gl_modlisl;
lib$gl_modlisl [1] = lib$gl_modlisl;
lib$gl_modxtrl [0] = lib$gl_modxtrl;
lib$gl_modxtrl [1] = lib$gl_modxtrl;
lib$gl_modupdl [0] = lib$gl_modupdl;
lib$gl_modupdl [1] = lib$gl_modupdl;
lib$gl_objsyrml [0] = lib$gl_objsyrml;
lib$gl_objsyrml [1] = lib$gl_objsyrml;
lib$gl_delmodl [0] = lib$gl_delmodl;
lib$gl_delmodl [1] = lib$gl_delmodl;

!
! Loop through most qualifiers, setting the appropriate bit 
!
incr i to qualtabsiz - 1 do
    if (lib$gl_ctlmsk[0,.bit_table[.i],1,0] = cli$present( .qual_table[.i] ))
    then
	! 
	! If an address of a routine is supplied, call it.
	!
	if .call_table[.i] neq 0
	then	
	    (.call_table[.i])();

if .lib$gl_ctlmsk[lib$v_squeeze]
then
    setsqueeze()
else
    clearsqueeze();

if cli$present(sd_width)
then 
    setlistwidth();

!
! Get library file name
!
cli$get_value(sd_p1, token_desc);
input1file();

!
! Get output file name
!
cli$get_value(sd_output,token_desc);
outputfile();

filesnotfound = 0;

IF NOT (.lib$gl_ctlmsk [lib$v_compress] 			!Unless compress
	OR .lib$gl_ctlmsk [lib$v_data]				! or data
	OR .lib$gl_ctlmsk [lib$v_extract] 			! or extract
	OR .lib$gl_ctlmsk [lib$v_cross] )			!           or cross ref
THEN  
    WHILE cli$get_value(sd_p2, token_desc) DO
    BEGIN
    lib$gl_ctlmsk [lib$v_selective] = false;			!Clear selective bit
    if cli$present(sd_modules)
    then
	setmodulename();
    input2file(token_desc);
    IF .lib$gl_ctlmsk [lib$v_selective]				!If selective search was seen
    THEN lastfdb [fdb$v_setsel] = true;
    END;

IF .lib$gl_inplist EQL 0					!If all files specified
    AND .filesnotfound NEQ 0					! were not found
    THEN IF .lib$gl_ctlmsk [lib$v_create]			!If creating
	    THEN RETURN false					! then nothing to do
	    ELSE IF NOT .lib$gl_ctlmsk [lib$v_delete]		! otherwise, if no other function selected
				AND NOT .lib$gl_ctlmsk [lib$v_extract]
				AND NOT .lib$gl_ctlmsk [lib$v_list]
				AND NOT .lib$gl_ctlmsk [lib$v_remove] 
				AND NOT .lib$gl_ctlmsk [lib$v_data]
				AND NOT .lib$gl_ctlmsk [lib$v_compress]
				AND NOT .lib$gl_ctlmsk [lib$v_cross]
		THEN RETURN false;				!  then nothing to do

IF .lib$gl_inplist NEQ 0					!If input files are present
    AND NOT .lib$gl_ctlmsk [lib$v_insert]			! and did not say insert or replace
THEN lib$gl_ctlmsk [lib$v_replace] = lib$gl_ctlmsk [lib$v_insert] = true;	! then make sure this is a replace
!
! Terminate parse
!
CH$MOVE (dsc$c_s_bln, def_lib_extn, lib$gl_libfdb [fdb$l_defext]);
IF .lib$gl_ctlmsk [lib$v_insert] OR .lib$gl_ctlmsk [lib$v_delete] !If insert, remove
OR .lib$gl_ctlmsk [lib$v_remove]				!or delete
THEN allocate_fdb (lib$gl_tmpfdb);				!Allocate FDB in case
								!old format library
IF .lib$gl_creflags EQL 0					!If /CROSS=NONE
THEN lib$gl_ctlmsk [lib$v_cross] = false;			! then disable it
RETURN true
END;

%SBTTL 'input1file';

ROUTINE input1file  =
BEGIN
!++
! This routine is called by CLI when the library filename
! is processed.
!
! Implicit inputs:
!
!	token_desc	Address of the  descriptor
!
! Outputs:
!
!	An fdb is allocated for the library file and the information is filled
!	in.  If not creating the library, open the file to ensure it exists,
!	and determine the library type expected if an explicit extension was
!	specified.
!
!--
LOCAL
    status,
    openstatus,
    filenamestring,
    lfab : BBLOCK [fab$c_bln];

allocate_fdb (lib$gl_libfdb);				!Allocate a new FDB for library
lib_get_mem(.token_desc[dsc$w_length], filenamestring);
ch$move (.token_desc[dsc$w_length], .token_desc[dsc$a_pointer], .filenamestring);
lib$gl_libfdb[fdb$l_namdesc] = .token_desc[dsc$w_length];
lib$gl_libfdb[fdb$l_namdesc] + 4 = .filenamestring;
CH$MOVE (dsc$c_s_bln, def_lib_extn, lib$gl_libfdb [fdb$l_defext]);
IF NOT .lib$gl_ctlmsk [lib$v_create]			!Unless creating the library
THEN 
    BEGIN
    BIND
	filenamedesc = lib$gl_libfdb [fdb$l_namdesc] : BBLOCK,
	namblk = lib$gl_libfdb [fdb$t_nam] : BBLOCK;

    $FAB_INIT (FAB = lfab,
		FNS = .token_desc [dsc$w_length],
		FNA = .token_desc [dsc$a_pointer],
		NAM = namblk,
		DNS = .def_lib_extn [dsc$w_length],
		DNA = .def_lib_extn [dsc$a_pointer]);
    IF NOT (openstatus = $OPEN (FAB = lfab))
	AND .openstatus NEQ rms$_flk			!LBR will wait if locked
	THEN BEGIN
	    getfilnamdesc (lfab, filenamedesc);		!Get string descriptor for filename
	    SIGNAL_STOP (lib$_openin, 1, filenamedesc, .openstatus, .lfab [fab$l_stv]);
	    END;
    getfilnamdesc (lfab, filenamedesc);
    IF NOT (IF NOT .openstatus THEN true
		ELSE (status = $CLOSE (FAB = lfab)))
	THEN SIGNAL (lib$_closein, 1, lib$gl_libfdb [fdb$l_namdesc], .status,
			.lfab [fab$l_stv]);
    IF .namblk [nam$v_exp_type]				!If explicit extension given
	AND .namblk [nam$b_rsl] NEQ 0			! and resultant string exists
	AND .lib$gl_type EQL lbr$c_typ_unk 		! and library type was 
    THEN BEGIN 						! not set with a qualifier 
!
! Lookup the extension in the table. If its a known extension, change
! the library type to match the extension.
!
	LOCAL
	    ext_start,
	    ext_end;

	IF CH$FAIL(ext_start = CH$FIND_CH (.namblk [nam$b_rsl],	!Find end of directory
				.namblk [nam$l_rsa],
				%ASCII ']'))
	    THEN IF CH$FAIL(ext_start = CH$FIND_CH (.namblk [nam$b_rsl], !Find end of directory
				.namblk [nam$l_rsa],
				%ASCII '>'))
		    THEN ext_start = .namblk[nam$l_rsa];
	ext_start = CH$FIND_CH (.namblk [nam$b_rsl] - (.ext_start - .namblk [nam$l_rsa]),
				.ext_start, %ASCII '.'); !Find start of extension
	ext_end = CH$FIND_CH (.namblk [nam$b_rsl] - (.ext_start - .namblk [nam$l_rsa]),
				.ext_start, %ASCII ';');
	INCRU i FROM 0 TO lbr$c_typ_decmx - 1		!Look at all the extensions
	DO BEGIN
	    BIND
		curdesc = lib_obj_defext + .i*(2 * dsc$c_s_bln) : BBLOCK; !Name descriptor

	    IF CH$EQL (.ext_end - .ext_start, .ext_start,
			.curdesc [dsc$w_length], .curdesc [dsc$a_pointer])
		THEN BEGIN
		    set_lib_type (.i + 1, curdesc);	!Set the library type
		    EXITLOOP;				!and we are done
		    END;
	    END;    
	END;
    END;

! If the library type is still undefined at this point, default it to "object": 
! 
IF .lib$gl_type EQL lbr$c_typ_unk THEN lib$gl_type = lib$s_object; 
RETURN true
END;							!Of INPUT1FILE

%SBTTL 'input2file';

ROUTINE input2file (desc) =
BEGIN
!++
! This routine processes the secondary input file specifiers.
!
!
! Inputs:
!
!	desc	Address of the descriptor
!
! Outputs:
!
!	lib$file_scan is called for the file specifier to parse/search and
!	hence get all files included by the specification.  All files searched
!	successfully will be added to the input list.
!
!--

MAP
    desc : REF BBLOCK;
OWN 
    lnamesa : VECTOR [nam$c_maxrss, BYTE],
    lnamrsa : VECTOR [nam$c_maxrss, BYTE],
    lnam : $NAM ( 
	    ESA = lnamesa, 
	    ESS = nam$c_maxrss, 
	    RSA = lnamrsa, 
	    RSS = nam$c_maxrss), 
    lfab : $FAB ( 
	    NAM = lnam),
    sticky_context: INITIAL (0), 	! Argument for lib$file_scan. 
    status;

lib$gl_ctlmsk[lib$v_selective] = cli$present(sd_selective_search);

!
! Set up the FAB for current input file: 
!
lfab[fab$l_fna] = .desc [dsc$a_pointer]; 
lfab[fab$b_fns] = .desc [dsc$w_length]; 
lfab[fab$l_dna] = .def_fil_extn [dsc$a_pointer]; 
lfab[fab$b_dns] = .def_fil_extn [dsc$w_length]; 

status = lib$file_scan (lfab, filescantruact,		!Find all the files
				filescanflsact, sticky_context);
!
!   lib$file_scan signals any errors, and if no input files are opened, then
!   LIBRARIAN terminates, so no need to retain status.
RETURN true
END;							!Of input2file

%SBTTL 'filescantruact';

ROUTINE filescantruact (fab) =
BEGIN
!++
! This routine is called by lib$file_scan when a successful $search has
! been done.
!
!
! Inputs:
!
!	fab	Address of the fab
!
! Outputs:
!
!	a file descriptor block is allocated and the information is copied
!	into it so the file can be opened later.
!
!--

MAP
    fab : REF BBLOCK;
LOCAL
    module_string,
    saversa,
    namblk : REF BBLOCK,
    newnamdesc : REF BBLOCK,
    newfdb : REF BBLOCK;

BIND
    scaname = .fab [fab$l_nam] : BBLOCK;	!NAM block of winner

allocate_fdb (newfdb);				!Get a new fdb
newnamdesc = newfdb [fdb$l_namdesc];		!Point to filename descriptor
lastfdb [fdb$l_nxtfdb] = .newfdb;		!Link into the list
prevfdb = .lastfdb;
lastfdb = .newfdb;				!Set new last
namblk = newfdb [fdb$t_nam];			!Point to new nam block
saversa = .namblk [nam$l_rsa];			!Save over CH$MOVE
CH$MOVE (nam$c_bln, scaname, .namblk);	!Copy NAM
namblk [nam$l_esa] = namblk [nam$l_rsa] = .saversa; !Set ESA to RSA
namblk [nam$b_rsl] = .scaname [nam$b_rsl];
namblk [nam$b_esl] = .scaname [nam$b_rsl];
getfilnamdesc (.fab, .newnamdesc);		!Get string descriptor for file spec.
CH$MOVE (.namblk [nam$b_rsl], .scaname [nam$l_rsa], .namblk [nam$l_rsa]);
if .modulenamedesc[dsc$w_length] gtr 0
then 
    begin
    lib_get_mem(.modulenamedesc[dsc$w_length], module_string);
    ch$move(.modulenamedesc[dsc$w_length], .modulenamedesc[dsc$a_pointer], .module_string);
    newfdb[fdb$l_modnam] = .modulenamedesc[dsc$w_length];
    newfdb[fdb$l_modnam] + 4 = .module_string;
    end;

RETURN true
END;							!Of filescantruact

%SBTTL 'filescanflsact';

ROUTINE filescanflsact (fab) =
BEGIN
!++
! This routine is called by lib$file_scan when an unsuccessful $search has
! been done. Ignore it after issuing an error message
!
! Inputs:
!
!	fab	Address of the fab
!
! Outputs:
!
!	An error message is issued.
!
!--

MAP
    fab : REF BBLOCK;

LOCAL
    filedesc : BBLOCK [dsc$c_s_bln];			!String desc. for filename

!
! Get the filename string descriptor set up
!
getfilnamdesc (.fab, filedesc);
SIGNAL (lib$_openin, 1, filedesc, .fab [fab$l_sts], .fab [fab$l_stv]);
filesnotfound = .filesnotfound + 1;

RETURN true
END;							!Of filescanflsact

%SBTTL 'outputfile & setlistfile';

ROUTINE outputfile =
BEGIN
!
! This routine processes output files.
!
LOCAL
    filenamestring;

allocate_fdb (lib$gl_outfdb);				!Allocate FDB for output
lib_get_mem(.token_desc[dsc$w_length], filenamestring);
ch$move (.token_desc[dsc$w_length], .token_desc[dsc$a_pointer], .filenamestring);
lib$gl_outfdb[fdb$l_namdesc] = .token_desc[dsc$w_length];
lib$gl_outfdb[fdb$l_namdesc] + 4 = .filenamestring;
CH$MOVE (dsc$c_s_bln, def_fil_extn, lib$gl_outfdb [fdb$l_defext]); !set default extension
RETURN true						!That's all
END;
ROUTINE setlistfile  =
BEGIN
!
! This routine is called when the /LIST qualifier is parsed
!

allocate_fdb (lib$gl_lisfdb);			!Allocate FDB for list file
cli$get_value(sd_list, token_desc);
if .token_desc[dsc$w_length] NEQ 0		!If /LIST=string
THEN 
    BEGIN
    LOCAL
	filenamestring;
    lib_get_mem(.token_desc[dsc$w_length], filenamestring);
    ch$move (.token_desc[dsc$w_length], .token_desc[dsc$a_pointer], .filenamestring);
    lib$gl_lisfdb[fdb$l_namdesc] = .token_desc[dsc$w_length];
    lib$gl_lisfdb[fdb$l_namdesc] + 4 = .filenamestring;
    END
ELSE 
    CH$MOVE (dsc$c_s_bln, sysoutputdesc, lib$gl_lisfdb [fdb$l_namdesc]);
RETURN true
END;

%SBTTL 'setlistwidth';
ROUTINE setlistwidth  =
BEGIN
!
! set list for /list
!
cli$get_value(sd_width, token_desc);
lib$cvt_dtb(.token_desc[dsc$w_length], .token_desc[dsc$a_pointer], lib$gl_listwid);
RETURN true
END;

%SBTTL 'extractfile';
ROUTINE extractfile (desc) =
BEGIN
!
! This routine is called when the /EXTRACT qualifier is parsed
!
get_name_list (lib$gl_modxtrl, sd_extract);	!Get the list of modules to extract
RETURN true
END;

%SBTTL 'createlib';
ROUTINE createlib =
BEGIN
!
! Called by CLI when the /CREATE qualifier is seen. Scan the create options
!
scan_options (sd_create, create_states, create_keys, lib$al_creopts, lib$gl_cre8flags);
RETURN true
END;

%SBTTL 'compressfile';
ROUTINE compressfile  =
BEGIN
!
! This routine is called when the /COMPRESS qualifier is parsed
!
scan_options (sd_compress, compress_states, compress_keys, lib$al_creopts, lib$gl_cre8flags);
IF .lib$gl_cre8flags [lib$c_opt_keep] THEN lib$gl_ctlmsk [lib$v_keep] = true;
IF .lib$gl_cre8flags [lib$c_opt_dcx] THEN lib$gl_ctlmsk [lib$v_dcx] = true;
RETURN true
END;

%SBTTL 'datareduce';
ROUTINE datareduce =
BEGIN
!
! This routine is called when the /DATA qualifier is parsed
!
scan_options (sd_data, data_states, data_keys, lib$al_creopts, lib$gl_cre8flags);
IF .lib$gl_cre8flags [lib$c_opt_dcx] THEN lib$gl_ctlmsk [lib$v_dcx] = true;
RETURN true
END;

%SBTTL 'removesymbols';
ROUTINE removesymbols  =
BEGIN
!
! This routine is called when the /REMOVE qualifier is parsed
!
get_name_list (lib$gl_objsyrml,sd_remove);	!Get the list of symbols to remove
set_lib_type (lib$s_object, lib_obj_defext);		!Set object type
RETURN true
END;

%SBTTL 'deletemodules';
ROUTINE deletemodules  =
BEGIN
!
! This routine is called when the /DELETE qualifier is parsed
!
get_name_list (lib$gl_delmodl, sd_delete);	!Get module names to delete
RETURN true
END;

%SBTTL 'listonlymods';
ROUTINE listonlymods  =
BEGIN
!
! This routine is called when the /ONLY qualifier is parsed
!
get_name_list (lib$gl_modlisl, sd_only);
RETURN true
END;

%SBTTL 'setmodulename';

ROUTINE setmodulename  =
BEGIN
!
! This routine processes the /MODULES qualifier.  It is an input-file specific
! qualifier.
!

cli$get_value(sd_modules,modulenamedesc);
IF .modulenamedesc[dsc$w_length] EQL 0
THEN SIGNAL_STOP (lib$_novalue);
RETURN true
END;

%SBTTL 'scan_options';

ROUTINE scan_options ( qualifier_desc, tp_states, tp_keys, resultvector, resultflags) =
BEGIN
!
! This routine recalls CLI to get the options for 
! /CREATE=(BLOCKS=123,GLOBALS=456,MODULES=321,HISTORY=654,VERSION:2) and
! /COMPRESS = (BLO=123, GLOB=456, MOD=321, HIST=654, VERSION:2, KEEP)
!
MAP
    qualifier_desc : ref bblock,
    resultvector : REF VECTOR,
    resultflags : REF BITVECTOR;

LOCAL
    ptr,
    value_desc : bblock[dsc$c_s_bln],
    key_desc : bblock[dsc$c_s_bln],
    status;

! Recall CLI for the option name. then recall it again to get the string
! containing the value. convert the decimal value to binary.
!
WHILE cli$get_value(.qualifier_desc, token_desc)  DO		!While more to do
    BEGIN
    ch$move(dsc$c_s_bln, token_desc, key_desc);
    IF ch$fail( ptr=ch$find_ch(.token_desc[dsc$w_length],.token_desc[dsc$a_pointer],%c'='))
    THEN
	ptr = ch$find_ch(.token_desc[dsc$w_length],.token_desc[dsc$a_pointer],%c':');
    IF .ptr eql 0
    then
	value_desc[dsc$w_length] = 0
    else
	begin
	value_desc[dsc$a_pointer] = .ptr + 1 ;
	value_desc[dsc$w_length] = .token_desc[dsc$w_length] - (.ptr - .token_desc[dsc$a_pointer]) - 1;
	key_desc[dsc$w_length] = .token_desc[dsc$w_length] - .value_desc[dsc$w_length] - 1;
	end;
    !
    !   call tparse
    !
    lib$gl_tpindex = 0;
    lib$gl_valreq = 0;
    status = call_tparse (key_desc, .tp_states, .tp_keys);
    IF .lib$gl_valreq 
    THEN 
	begin
	if .value_desc[dsc$w_length] eql 0
	then
	    SIGNAL_STOP ( lib$_novalue, 1, token_desc [dsc$w_length])
	ELSE 
	    IF NOT lib$cvt_dtb(.value_desc[dsc$w_length], .value_desc[dsc$a_pointer], 
				resultvector[.lib$gl_tpindex])
	    THEN SIGNAL_STOP (lib$_badkey, 1, value_desc [dsc$w_length]);
	lib$gl_cre8flags = .lib$gl_cre8flags OR 1^.lib$gl_tpindex;
	END;
    END;
RETURN .status;
END;					!OF scan_options

%SBTTL 'call_tparse & value_req & syntaxerr';

ROUTINE call_tparse (str_desc, states, keys )=
BEGIN
MAP 
    str_desc : REF BBLOCK;
LOCAL
    status;

CH$FILL(0,tpa$k_length0,tpa_block);
tpa_block [tpa$l_count] = tpa$k_count0;    
tpa_block [tpa$l_options] = tpa$m_abbrev;
tpa_block [tpa$l_stringcnt] = .str_desc [dsc$w_length];
tpa_block [tpa$l_stringptr] = .str_desc [dsc$a_pointer];
tpa_desc = .str_desc;

status = lib$tparse (tpa_block, .states, .keys);
RETURN .status;
END;					!OF call_tparse

ROUTINE value_req =
BEGIN
lib$gl_valreq = .tpa_block [tpa$l_param];
RETURN true;
END;					! of value_req

ROUTINE syntaxerr =
BEGIN
!
!   This routine is called when TPARSE encounters an error
!
SIGNAL_STOP (.tpa_block [tpa$l_param], 1, .tpa_desc);
RETURN true;
END;

%SBTTL 'selectcrosref';

ROUTINE selectcrosref  =
BEGIN
!
! This routine processes the /CROSS qualifier.
!
LOCAL
    firstvalue,
    optionindex;
BIND
    crefbits = lib$gl_creflags : BITVECTOR;

firstvalue = true;
!
! There were some values, so get and check them
!
WHILE cli$get_value(sd_cross_reference, token_desc) DO 
    BEGIN
    IF NOT lib$lookup_key (token_desc, crf_table, !And look it up
				optionindex)
    THEN 
	BEGIN
	IF NOT lib$lookup_key (token_desc, opt_table, !See if all or none
				optionindex)
	THEN SIGNAL_STOP (					!and error if none of these
			lib$_badkey,1, token_desc [dsc$w_length])
	ELSE IF .optionindex EQL 0				!If /CROSS=ALL
		THEN lib$gl_creflags = -1			!then set all flags
		ELSE lib$gl_creflags = 0;
	 END
     ELSE crefbits [.optionindex] = true;			!Set the flag bit
    firstvalue = false;
    END;
IF .firstvalue
THEN 
    BEGIN
    lib$gl_creflags [lib$v_crfbysym] = true;		!/cross only, so give cref by symbol
    lib$gl_creflags [lib$v_crfbyval] = true;		! and cref by value
    RETURN true;
    END;
RETURN true
END;							!of selectcrosref

%SBTTL 'get_name_list';
ROUTINE get_name_list (list_head, qualifier_desc) =
BEGIN
!
! This routine recalls CLI to get the names of all the keys associated with
! a qualifier (i.e. /DELETE=module1:module2:...:moduleN).  If there are no
! keys, the image is stopped with an error.
!
! If the keys are there, they are extracted and put on a list.
!
MAP
	list_head : REF VECTOR [2];
BUILTIN
	INSQUE,
	NULLPARAMETER;
LOCAL
	firstvalue;
firstvalue = true;
WHILE cli$get_value(.qualifier_desc, token_desc)  DO  !While there are more values
    BEGIN
    LOCAL
	status,
	namblk : REF BBLOCK;
    IF NOT (status = lib_get_mem (lnb$c_fixedsize + .token_desc [dsc$w_length],
			 namblk))	!Allocate memory
    THEN SIGNAL_STOP (.status);
    INSQUE (.namblk, .list_head [1]);		!Insert in queue
    namblk [lnb$b_namlng] = .token_desc [dsc$w_length];	!Set size of name
    CH$MOVE (.namblk [lnb$b_namlng], .token_desc [dsc$a_pointer],
			namblk [lnb$t_name]);		!Copy the name
    firstvalue = false;
    END;
IF .firstvalue
THEN
    BEGIN
    IF .NULLPARAMETER(2)
    THEN SIGNAL_STOP ( lib$_novalue )
    ELSE SIGNAL_STOP ( lib$_novalue, 1, .qualifier_desc );
    END;
RETURN true
END;

%SBTTL 'clearsqueeze & setsqueeze';
ROUTINE clearsqueeze =
BEGIN
!
! Clear the local squeeze bit
!
squeeze_flag = 0;
RETURN true
END;
ROUTINE setsqueeze =
BEGIN
!
! Set local squeeze bit
!
squeeze_flag = 1;
RETURN true
END;

%SBTTL 'before_date';
ROUTINE before_date =
!
! This routine passes the address of lib$before_date
!	to date_parse to be set
!
BEGIN
cli$get_value(sd_before, token_desc);
date_parse( lib$before_date );
RETURN true;
END;
%SBTTL 'since_date';

ROUTINE since_date =
!
! This routine passes the address of lib$since_date
!	to date_parse to be set
!
BEGIN
cli$get_value(sd_since, token_desc);
date_parse( lib$since_date );
RETURN true;
END;
%SBTTL 'date_parse';
ROUTINE date_parse  ( date ) =
!----
!
! Functional description
!
!	This routine parses the value on the /SINCE and /BEFORE
!	qualifiers.  It converts the ASCII value of the qualifier
!	into 64-bit system date format.  The value can be a date
!	string (such as dd-mmm-yyyy hh:mm:ss.s) or the keywords
!	YESTERDAY or TODAY.
!
! Output parameters
!
!	lib$since_date = Date if /SINCE specified.
!	lib$before_date = Date if /BEFORE specified.
!
!----
BEGIN

BIND
    date_field = .date : ref bblock;
LOCAL
    status;				! Status return value

!
!	Convert the ASCII string into 64-bit system time format.
!
status = lib$cvt_time(token_desc, date_field);

IF NOT .status				! If error in conversion,
THEN
    SIGNAL_STOP(.status);		! then output error message

RETURN true;
END;

%SBTTL 'allocate_fbd & initialize_fdb';
ROUTINE allocate_fdb (fdbadr) =
BEGIN
!
! This routine allocates a file descriptor block and initializes it.
!
LOCAL
	status;

IF NOT (status = lib_get_mem (fdbsize, .fdbadr)) 	!Allocate the FDB
THEN SIGNAL_STOP (.status);
initialize_fdb (..fdbadr);				!and initialize it
RETURN true
END;
ROUTINE initialize_fdb (fdbadr) =
BEGIN
!
! This routine initializes a pre-allocated FDB
!
MAP
    fdbadr : REF BBLOCK;
LOCAL
	namblk : REF BBLOCK,				!Pointer to NAM block
	rsblk  : REF BBLOCK;				!Pointer to resultant name string area
namblk = fdbadr [fdb$t_nam];				!Point to NAM block part
rsblk = .namblk + nam$c_bln;				!Point to resultant string area
CH$FILL (0, fdbsize, .fdbadr);				!Zero the FDB
namblk [nam$l_rsa] = .rsblk;				!Store RSA address
namblk [nam$b_rss] = nam$c_maxrss;			!And its length
namblk [nam$l_esa] = .rsblk+nam$c_maxrss;		!Expanded name string goes
namblk [nam$b_ess] = nam$c_maxrss;			! in same place so errors
							! messages are correct.
namblk [nam$b_bid] = nam$c_bid;				!Identify it as a NAM
namblk [nam$b_bln] = nam$c_bln;				!...
RETURN true
END;

%SBTTL 'set_*_type';
ROUTINE set_lib_type (type, defext) =
BEGIN
!
! This routine sets the default library type and default extension
!
MAP
    defext : REF VECTOR [4];
lib$gl_type = .type;			!Set library type
CH$MOVE (dsc$c_s_bln, defext [0], def_lib_extn);
CH$MOVE (dsc$c_s_bln, defext [2], def_fil_extn);
RETURN true
END;
ROUTINE set_text_type =
!
! This routine is called when the /text qualifier is processed.
!
RETURN set_lib_type (lib$s_text, lib_txt_defext);
ROUTINE set_help_type =
!
! This routine is called when the /HELP qualifier is processed.
!
RETURN set_lib_type (lib$s_help, lib_hlp_defext);
ROUTINE set_macro_type =
!
! This routine is called when the /MACRO qualifier is processed.
!
RETURN set_lib_type (lib$s_macro, lib_mac_defext);
ROUTINE set_object_type =
!
! This routine is called when the /OBJECT qualifier is processed.
!
RETURN set_lib_type (lib$s_object, lib_obj_defext);
ROUTINE set_shr_type  =
!
! This routine is called when the /SHARE qualifier is processed.
!
RETURN set_lib_type (lib$s_shrstb, lib_shr_defext);


ROUTINE clierror ( errorcode ) : novalue =
BEGIN
!
!	This routine is called by the result parser if it detects any
!	error in the command.  REQUESTDESC is the address of the current
!	parameter descriptor and ERRORCODE is the encoded reason for
!	the error.
!
SIGNAL_STOP (.errorcode);				!Print error message and quit
RETURN;
END;
END					! Of module
ELUDOM
