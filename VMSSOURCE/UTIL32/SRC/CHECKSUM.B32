MODULE checksum_image (
			IDENT='V04-000',
			MAIN=checksum$main
			%TITLE	'Checksum the contents of a file'
			) =

BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:  Checksum VAX/VMS image file
!
! ABSTRACT:
!		Computes the checksum of a file or an image.  The
!		qualifiers on command are /OUTPUT, /FILE and /IMAGE.
!		The /FILE and /IMAGE are conflicting qualifiers.  If
!		specify /IMAGE, then the parts of the image header
!		that can change (Date/Time, etc) are not checksummed.
!		The parameter is the input file(s) to checksum.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Benn Schreiber,	 CREATION DATE:  17-Feb-1981
!
! MODIFIED BY:
!
!	V03-002	LJA0111	Laurie J. Anderson	16-Feb-1984
!		Change the image checksum to use the new EXEC image
!		header decode routines.  Change the parameters to
!		LIB$FIND_FILE to use the new related file parsing
!		arguments.  Also, add relevant comments so the
!		next person can figure out this mess.
!
!	V03-001	BLS0180	Benn Schreiber		13-Aug-1982
!		Support record by record checksum
!
!--

LIBRARY
	'SYS$LIBRARY:LIB.L32';		!System macro definitions
REQUIRE
	'SHRLIB$:IMGMSGDEF.R32';	!Image decode routine's messge literals

MACRO
!
! Macro to initialize a dynamic descriptor
!
    $init_ddesc(d) =			! Init dynamic string descriptor
		begin
		d[dsc$w_length] = 0;
		d[dsc$b_class] = dsc$k_class_d;
		d[dsc$b_dtype] = dsc$k_dtype_t;
		d[dsc$a_pointer] = 0;
		end%,
!
! Macro to generate a pointer to an ascic string
!
    cstring (string) = UPLIT(%ASCIC string)%,
!
! Macro to fao and output a string
!
    write (string) =
	cksm_output (fao_buffer (cstring(string)
	%IF %LENGTH GTR 1 %THEN ,%REMAINING %FI))%;

!
! Message codes from shared message definitions
!

$SHR_MSGDEF(cksm, 3 ,LOCAL,		!Facility code = 3 (CLI)
		(confqual, severe),	! Conflicting qualifiers
		(openin, error),	! error opening "x" as input
		(openout, severe),	! error opening "x" as output
		(closein, warning),	! error closing "x" as input
		(closeout, warning),	! error closing "x" as output
		(readerr, error),	! error reading "x"
		(writeerr, error),	! error writing "x" 
		(parsefail, warning));	! error parsing "x"

FORWARD ROUTINE
    read_header,				!Read and process image header
    checksum_section,				!Checksum an image section
    cksm_foreign,				!Checksum non-image file
    cksm_header,				!Checksum image header data
    read_blocks,				!Read next block of header
    fao_buffer,					!Call fao and return descriptor
    cksm_output,				!Output line to output file
    getfilename;				!Get string descriptor for file

EXTERNAL ROUTINE
    cli$get_value : ADDRESSING_MODE(GENERAL),	!Get qualifier value
    cli$present : ADDRESSING_MODE(GENERAL),	!Test if qualifier present
    img$decode_ihd : ADDRESSING_MODE(GENERAL),	!Decode image header
    img$get_next_isd : ADDRESSING_MODE(GENERAL), !Get all ISD's from image
    lib$get_vm : ADDRESSING_MODE(GENERAL),	!Allocate virtual memory
    lib$free_vm : ADDRESSING_MODE(GENERAL),	!Free virtual memory
    lib$find_file : ADDRESSING_MODE(GENERAL),	!Search for wild card files
    lib$set_symbol : ADDRESSING_MODE(GENERAL),	!Define local DCL symbol
    str$copy_dx : ADDRESSING_MODE(GENERAL),	!Copy a string
    str$upcase : ADDRESSING_MODE(GENERAL);	!Uppercase a string

EXTERNAL LITERAL
    cksm$_allischk,				!Checksum of all image sections
    cksm$_badimghdr,				!Bad image header format
    cksm$_file,					!Print the filename
    cksm$_ihdchksum,				!Image header checksum
    cksm$_isectchk,				!Checksum of one image section
    cksm$_nonimgchk;				!Non-image file checksum

OWN
    chan,					!Channel to input file if image
    find_context : REF $BBLOCK,			!Context for lib$find_file
    irab : $RAB_DECL,				!RAB for input
    orab : $RAB_DECL,				! and output
    ixabfhc : $XABFHC_DECL,			!XAB to get file header characteristics to get file size
    outfiledesc : $BBLOCK[dsc$c_s_bln],		!Output file descriptor
    find_result : $BBLOCK[dsc$c_s_bln],		!Current input file
    headerbuffer : REF $BBLOCK,			!Pointer to user record buffer
    databuffer : REF VECTOR[,LONG],		!and data buffer
    exitstatus : $BBLOCK[4];			!Most severe error status

LITERAL
    ihd$k_activoff = ihd$k_length,		!Offset to activation area
    ihd$k_symdbgoff = ihd$k_activoff + iha$k_length,
    ihd$k_imgidoff = ihd$k_symdbgoff + ihs$k_length,
    ihd$k_patchoff = ihd$k_imgidoff + ihi$k_length,
    ihd$k_maxlength = ihd$k_patchoff,
    maxbytes = 10*512,				!Maximum record to read
    false = 0,					!Logical 0
    true = 1;					! and 1

GLOBAL
    cksm$gl_ihdcksm,				!Image header checksum
    cksm$gl_chksum,				!Isect checksum
    cksm$gl_acucksm,				!Accumulated checksum
    cksm$gl_maxbyt;				!Maximum record to read

%sbttl 'allocate_ubf'
ROUTINE allocate_ubf (xab,rab) : NOVALUE =
BEGIN
!
! Allocate a buffer for records that cross block boundaries
!
MAP
    xab : REF $BBLOCK,
    rab : REF $BBLOCK;

LOCAL
    status,
    blocksize;

OWN
    ubf_size,		!Size of last UBF
    ubf_addr;		!Address of last UBF

!
! Calculate the max record size based on the longest record in the file.
! If there is a user buffer allocated and it is not big enough, deallocate
! it and get a new one.  If it's bigger than needed, then that's fine
!
blocksize = MAXU(MAXU(.xab[xab$w_lrl],.xab[xab$w_mrz]),512);
IF .blocksize GTRU .ubf_size
THEN BEGIN
    IF .ubf_size NEQ 0
	THEN lib$free_vm(ubf_size,ubf_addr);
    ubf_size = .blocksize;
    IF NOT (status = lib$get_vm(ubf_size,ubf_addr))
	THEN SIGNAL_STOP(.status);
    END;
!
! Set up rab with size and address of the buffer
!
rab[rab$w_usz] = .blocksize;
rab[rab$l_ubf] = .ubf_addr;

RETURN;
END;

%sbttl 'define DCL symbol'
ROUTINE define_sym (value) : NOVALUE =
BEGIN
!
! Define the symbol CHECKSUM$CHECKSUM with the given value
!
LOCAL
    status;

status = lib$set_symbol($descriptor('CHECKSUM$CHECKSUM'),
			fao_buffer(cstring('!UL'),.value));
IF NOT .status
    THEN SIGNAL(.status);

RETURN;
END;

%sbttl 'Process CHECKSUM/FILE'
ROUTINE checksum_file : NOVALUE =
BEGIN
!
! Checksum the contents of a file.  Open the file using RMS and simply read 
! it with $GET's and checksumming the records.  Close the file.
!
LOCAL
    checksum,
    n_longwords,
    n_bytes,
    status;

!
! Open the input file to checksum using RMS.
!
$XABFHC_INIT(xab=ixabfhc);			!Initialize XAB
$RAB_INIT(rab=irab,				!Initialize input rab
	fab=.find_context);

IF NOT (status = $open(fab=.find_context))	!Open the input file
THEN SIGNAL(cksm$_openin, 1, 
		find_result, .status,
		.find_context[fab$l_stv])

ELSE IF NOT (status=$connect(rab=irab))		!Connect record stream
THEN BEGIN 
    SIGNAL(cksm$_openin, 1,
		find_result, .status,
		.irab[rab$l_stv]);
    return;
    END;

allocate_ubf(ixabfhc,irab);			!Allocate the buffer to read into

!
! Checksum the contents.
!
checksum = 0;
WHILE (status = $GET(rab=irab)) NEQ rms$_eof
DO BEGIN
    BIND
	longbuffer = .irab[rab$l_rbf] : VECTOR[,LONG];

    IF NOT .status
	THEN SIGNAL(cksm$_readerr,1,find_result,
			.status,.irab[rab$l_stv]);
    !
    ! Compute number of full longwords and dangling bytes in record
    !
    n_longwords = (.irab[rab$w_rsz]/4);
    n_bytes = .irab[rab$w_rsz] AND 3;
    !
    ! Checksum the longwords by exclusive or.  Checksum the dangling
    ! bytes by simple addition
    !
    IF .n_longwords NEQ 0
	THEN INCRU i FROM 0 to .n_longwords - 1
	    DO checksum = .checksum XOR .longbuffer[.i];
    IF .n_bytes NEQ 0
    THEN BEGIN
	BIND
	    bytebuffer = longbuffer[.n_longwords] : VECTOR[,BYTE];

	INCRU i FROM 0 TO .n_bytes - 1
	    DO checksum = .checksum + .bytebuffer[.i];
	END;
    END;
!
! Define a DCL string symbol with the decimal value of the checksum
!
define_sym(.checksum);

!
! Disconnect the stream and close the input checksummed file.
!
IF NOT (status=$DISCONNECT(rab=irab))	!Disconnect and close output file
    THEN SIGNAL(cksm$_closein, 1, 
		find_result, .status,
		.irab[rab$l_stv]);

IF NOT (status=$CLOSE(fab=.find_context))
    THEN SIGNAL(cksm$_closein, 1, 
		find_result, .status,
		.find_context[fab$l_stv]);

RETURN;
END;

%sbttl 'signal handler'
ROUTINE signal_handler (sigargs, mechargs) =
BEGIN
!
! This routine is a condition handler called when ever a
! SIGNAL is done by cksm.  It merely remembers the
! most severe error for an exit status.
!
MAP
    sigargs : REF $BBLOCK,
    mechargs : REF $BBLOCK;

BIND
    signame = sigargs [chf$l_sig_name] : $BBLOCK;	!Name of signal

IF NOT .signame						!If its an error signal
    AND ((.signame [sts$v_severity]			! and severity is worse than it was
	GEQU .exitstatus [sts$v_severity])
	OR .exitstatus [sts$v_severity])		! or we haven't had any errors
    THEN exitstatus = .signame;				! then remember it for exiting

RETURN ss$_resignal;					!Resignal to get the error printed
END;							!Of signal_handler

%sbttl 'main routine of checksum'
ROUTINE checksum$main =
BEGIN
!
! This is the main program.  It gathers all the command inputs and calls
! appropiate routine to checksum either the file or image.
!
LOCAL
    status,
    file_sum,
    ofab : $BBLOCK[fab$c_bln],
    onam : $BBLOCK[nam$c_bln],
    orss : $BBLOCK[nam$c_maxrss],
    oess : $BBLOCK[nam$c_maxrss],
    indesc : $BBLOCK [dsc$c_s_bln];		!User's input file spec

ENABLE signal_handler;				!Enable the condition handler
exitstatus = ss$_normal;			!Preset success exit status

cksm$gl_maxbyt = maxbytes;
$init_ddesc(indesc);				!Initialize dynamic descriptor
CH$MOVE(dsc$c_s_bln,indesc,outfiledesc);
CH$MOVE(dsc$c_s_bln,indesc,find_result);

cli$get_value($descriptor('INPUT'),indesc);	!Get input file spec.
cli$get_value($descriptor('OUTPUT'),outfiledesc);!Get user output file spec

file_sum = cli$present($descriptor('FILE'));	!See if /FILE
status = cli$present($descriptor('IMAGE'));	!See if /IMAGE
IF NOT (.file_sum OR .status)			!If neither were specified
    THEN file_sum = true;			! then default to /FILE
IF .file_sum					!If both were specified
    AND .status
    THEN SIGNAL_STOP(cksm$_confqual);		! that's an error
!
! Create the output file
!
$FAB_INIT(fab=ofab,				!Initialize output fab
	nam=onam,
	fns=.outfiledesc[dsc$w_length],
	fna=.outfiledesc[dsc$a_pointer],
	rat=(cr),				!With carriage control
	fop=(ofp),				!Output file parse
	fac=(put));				!Will do put's to file

CH$FILL(0,nam$c_maxrss,orss);			!Zero resultant name string
CH$FILL(0,nam$c_maxrss,oess);			! and expanded name string
$NAM_INIT(nam=onam,				!Initialize output file nam block
	rss=nam$c_maxrss,
	rsa=orss,
	ess=nam$c_maxrss,
	esa=oess);

$RAB_INIT(rab=orab,				!Initialize output file rab
	fab=ofab);

status = $CREATE(fab=ofab);
CH$MOVE(dsc$c_s_bln,getfilename(ofab),		!Get the resulting filename
				outfiledesc);
IF NOT .status					!If error opening output file
    THEN SIGNAL_STOP(cksm$_openout,1,outfiledesc, ! then give up now
			.status,.ofab[fab$l_stv]);

IF NOT (status=$CONNECT(rab=orab))		!Connect the record stream
    THEN SIGNAL_STOP(cksm$_openout,1,outfiledesc,
			.status,.orab[rab$l_stv]);
!
! Loop, calling lib$find_file to get files matching the output spec
!
find_context = 0;				!Initial context is 0

WHILE (status = lib$find_file(indesc,find_result,find_context,
				(IF .file_sum
				    THEN $descriptor('.DAT')
				    ELSE $descriptor('.EXE')),
				0, 0, %REF(2)) ) NEQ rms$_nmf  
DO 
IF NOT .status				!Report error if find_file failure
	THEN SIGNAL(cksm$_parsefail,1,find_result,
			.find_context[fab$l_sts],.find_context[fab$l_stv])
ELSE BEGIN
    find_context[fab$v_get] = true;		!Initialize for GET's
    IF NOT .file_sum
	THEN find_context[fab$v_bio] = true;	! and block i/o

!
! Call the appropiate routine to do the checksumming of the file contents
! or image.
!
    IF .file_sum			!If /FILE then checksum the file
	THEN BEGIN			! by simply reading it
	    find_context[fab$l_xab] = ixabfhc;	!Set XAB address
	    checksum_file();		! Output is DCL symbol checksum$checksum
	    END
	ELSE BEGIN
	    IF NOT (status = lib$get_vm(cksm$gl_maxbyt,
					databuffer))
		THEN SIGNAL_STOP(.status);
	    find_context[fab$l_xab] = 0; !No need to use XAB
	    read_header();		!Process CHECKSUM/IMAGE
	    END;

    END;					!Of loop calling lib$find_file
! 
! Close the output file
!
IF NOT (status=$DISCONNECT(rab=orab))
    THEN SIGNAL(cksm$_closeout, 1, 
			outfiledesc, .status,
			.orab[rab$l_stv]);

IF NOT (status=$CLOSE(fab=ofab))
    THEN SIGNAL(cksm$_closeout, 1, 
			outfiledesc, .status,
			.ofab[fab$l_stv]);

RETURN (status = .exitstatus OR sts$m_inhib_msg); 	!Exit with no message
END;

%sbttl 'Catch signals'
ROUTINE catch_signals (sigargs,mechargs) =
BEGIN
!
! This condition handler is enabled when the image is being
! processed.  It catches info messages, and diverts them to
! the output file.  Any other errors are resignaled.
!
MAP
    sigargs : REF $BBLOCK,
    mechargs : REF $BBLOCK;

BIND
    signame = sigargs[chf$l_sig_name] : $BBLOCK;

LOCAL
    status,
    outadr : $BBLOCK[4],
    outbufdesc : $BBLOCK[dsc$c_s_bln],
    msgbufdesc : $BBLOCK[dsc$c_s_bln],
    msgbuf : $BBLOCK[256],
    outbuf : $BBLOCK[512];

IF NOT .signame						!If this is not an informational message
    THEN RETURN ss$_resignal;				! then we don't want it to go to output file
msgbufdesc[dsc$w_length] = 256;				!Initialize the descriptors
msgbufdesc[dsc$a_pointer] = msgbuf;
outbufdesc[dsc$w_length] = 512;
outbufdesc[dsc$a_pointer] = outbuf;
!
! Get the message and format the string
!
IF NOT (status = $GETMSG(msgid=.signame,msglen=msgbufdesc[dsc$w_length],
			bufadr=msgbufdesc,flags=1,outadr=outadr))
    THEN RETURN ss$_resignal						!Not found, so resignal
ELSE IF NOT (status =$faol(ctrstr=msgbufdesc,outlen=outbufdesc,		!Format the string
		outbuf=outbufdesc,prmlst=sigargs[chf$l_sig_arg1]+4))	! (skip the signal count longword)
    THEN RETURN ss$_resignal						!FAO error, so resignal
    ELSE cksm_output(outbufdesc);					!All is well, write string to output file

signame[sts$v_inhib_msg] = true;					!Inhibit further message printing
mechargs[chf$l_mch_savr0] = .signame[sts$v_inhib_msg];

RETURN ss$_continue

END;

%sbttl 'Process CHECKSUM/IMAGE'
ROUTINE read_header =
BEGIN
!
! Open the file using RMS with the UFO (User File Open) bit set.  The
! read the image header using the EXEC routines which do $QIO's given
! the channel from the RMS open., and checksum the image sections.  Ignore
! the parts of the image header that can always be different, (ex: date/time).
!
LOCAL	
	isdnum,					!isd number
	header : $BBLOCK[512],			!Buffer containing decoded header
	curhdrisd : $BBLOCK[512],		!current isd in header
	hdr_blk : $BBLOCK[512],			!buffer for image header -undecoded
	status,
	vbn,					!Used by header decode routines
	offset,					!Used by header decode routines
	hdrver,					!Used by header decode routines
	alias ;					!Used by header decode routines

ENABLE catch_signals;				!We want output to go to output file also
cksm$gl_ihdcksm = 0;				!Zero image header checksum
isdnum = 0;					!first isect is 1
cksm$gl_acucksm = 0;				!Zero accumulated checksum
SIGNAL(cksm$_file,1,find_result);		!Print the filename

!
! First, open the file using RMS with an UFO option.
!
find_context[fab$v_ufo] = true;			!User file open option
IF NOT (status = $open(fab=.find_context))	!Open the input file
THEN SIGNAL(cksm$_openin, 1, 
		find_result, .status,
		.find_context[fab$l_stv]);
find_context[fab$v_ufo] = false;		!clear the bit after open
chan = .find_context[fab$l_stv];		!Keep around the assigned channel

!
! Read the image header into a buffer decoded by the special EXEC routines
!
status = img$decode_ihd( .chan,hdr_blk,header,vbn,offset,hdrver,alias);
IF NOT .status
THEN
    SIGNAL( .status );				!signal any errors in image file

!
! The following checks are made on the image header fixed portion to see if legal
! Major header id must match.  The header fixed part must be less than a block and must
! contain patch area.  header block count is > 0.
!
IF .header[ihd$w_majorid] NEQ ihd$k_majorid			
    OR (.(header[ihd$w_minorid])<0,8,0> EQL (ihd$k_minorid and %x'ff')
	AND .(header[ihd$w_minorid])<8,8,0> GTRU (ihd$k_minorid and %x'ff00')/256)
    OR .header[ihd$w_size] GTRU MAXU((.header[ihd$w_patchoff] 	
			+ ihp$k_length),ihd$k_maxlength)	
    OR ( .header[ihd$b_hdrblkcnt] LEQ 0)		
    OR (header + .header[ihd$w_symdbgoff])			
			GEQU (header + .header[ihd$w_size])	
    THEN BEGIN
	SIGNAL(cksm$_badimghdr,1,find_result);	!any above not true, fatal image header error
	status = $dassgn(chan=.chan);		!deassign channel
	cksm_foreign();				!Checksum non-image file
	RETURN true
	END;

! Otherwise just checksum the contents of the fixed portion of the image 
! header
!
cksm_header(header);

!
! Now, checksum all the ISD's (Image Section Descriptors)
!
WHILE 1 
DO BEGIN
    status = img$get_next_isd(.chan,hdr_blk,header,vbn,offset,curhdrisd);
    IF .status EQLU IMG$_ENDOFHDR		! Until no more ISD's....
    THEN
	EXITLOOP;
    IF NOT .status
    THEN BEGIN
	SIGNAL(cksm$_badimghdr,1,find_result);	!signal error
	status = $dassgn(chan=.chan);		!deassign channel
	cksm_foreign();				!and checksum as foreign image
	RETURN true;
	END
    ELSE
	BEGIN
	isdnum = .isdnum + 1;
	checksum_section(curhdrisd);		!compute isect checksum
	IF .curhdrisd[isd$l_vbn] NEQ 0		!If section has disk file space
	    AND NOT .curhdrisd[isd$v_dzro]	! and is not demand zero
	THEN BEGIN
	    SIGNAL(cksm$_isectchk,2,.isdnum,.cksm$gl_chksum);	!Print isect checksum
	    cksm$gl_acucksm = .cksm$gl_acucksm XOR .cksm$gl_chksum;!Accumulate new improved checksum
	    END;
	END;
    END;					!end of isection loop

!
! Print checksum of image header and total checksum, and define a DCL
! symbol with the checksum value
!
SIGNAL(cksm$_ihdchksum,1,.cksm$gl_ihdcksm);
SIGNAL(cksm$_allischk,1,.cksm$gl_acucksm);
define_sym(.cksm$gl_acucksm);

IF NOT (status=$DASSGN(chan=.chan))
    THEN SIGNAL(cksm$_closein, 1, 
		find_result, .status);

RETURN true
END;

%sbttl 'Checksum image header contents'
ROUTINE cksm_header (imageheader) =
BEGIN
!
! Checksums the non-variable contents of the image header
!
! INPUTS:
!
!	Imageheader	points to the first block of image header in memory
!
! NOTE:
!
!	This routine expects the fixed part of the image header to be contained
!	in the first block of the image.
!
MAP
    imageheader : REF $BBLOCK;

BIND
    cksm = cksm$gl_ihdcksm,
    iha = .imageheader + .imageheader[ihd$w_activoff] : VECTOR[,LONG],
    ihs = .imageheader + .imageheader[ihd$w_symdbgoff] : VECTOR[,LONG],
    ihi = .imageheader + .imageheader[ihd$w_imgidoff] : $BBLOCK,
    ihp = .imageheader + .imageheader[ihd$w_patchoff] : VECTOR[,LONG];

cksm = .cksm XOR .imageheader[ihd$l_lnkflags];	!Include the link flags
!
! Checksum the activation data
!
INCRU i FROM 0 TO 2
DO IF .iha[.i] EQL 0
    THEN EXITLOOP
    ELSE cksm = .cksm XOR .iha[.i];
!
! Checksum the symbol table and debug data
!
IF .imageheader[ihd$w_symdbgoff] NEQ 0
THEN INCRU i FROM 0 TO ihs$c_length/4
    DO cksm = .cksm XOR .ihs[.i];
!
! Checksum the image header ident section data
!
! Not done, since it's all variable data
!

!
! Checksum the patch data
!
IF .imageheader[ihd$w_patchoff] NEQ 0
THEN INCRU i FROM 0 to (ihp$c_length-1)/4
    DO cksm = .cksm XOR .ihp[.i];

RETURN true

END;

%sbttl 'Read block'
ROUTINE read_blocks (nblocks,first_block) =
BEGIN

LOCAL
	iosb	: VECTOR[ 4, WORD ],
	readerror;

IF NOT (readerror = $qiow(		!Attempt to read file
		efn = 7,
		chan = .chan,
		func = io$_readvblk,	! Read a virtual block
		iosb = iosb,		! I/O Status block
		p1 = .databuffer,	! Buffer to read in to
		p2 = .nblocks*512,	! number of bytes to read
		p3 = .first_block	! starting VBN to read
	      ))
THEN SIGNAL(cksm$_readerr,1,find_result,.readerror);

RETURN .iosb[0];
END;

%sbttl 'Checksum image section descriptor'
ROUTINE checksum_section (isd) =
BEGIN
!
! Checksums the contents of an image section
!
! INPUTS:
!
!	isd	pointer to the image section descriptor for
!		an image section.
!
MAP
    isd : REF $BBLOCK;

BIND
    isdvecbyt = .isd : VECTOR[,LONG];

LOCAL
    maxblocks,
    tblocks,
    blockoff,
    iblocks;

!
! Add isd into image header checksum
!
INCRU i FROM 0 TO .isd[isd$w_size]-1
    DO cksm$gl_ihdcksm = .cksm$gl_ihdcksm XOR isdvecbyt[.i];

IF .isd[isd$v_dzro]				!Skip section if demand zero
    OR .isd[isd$l_vbn] EQL 0			! or no disk address assigned
    OR .isd[isd$w_pagcnt] EQL 0			! or no pages (should never happen)
THEN RETURN true;

cksm$gl_chksum = 0;				!Zero checksum for section
maxblocks = .cksm$gl_maxbyt/512;		!Figure max number of pages
iblocks = .isd[isd$w_pagcnt];			!Get size of image section
blockoff = 0;
WHILE .iblocks GTRU 0				!Do all blocks in the image section
DO BEGIN
    tblocks = MINU(.iblocks,.maxblocks);	!Compute size of this read
    IF read_blocks(.tblocks,.isd[isd$l_vbn]+.blockoff)
    THEN
	!
	! Checksum what we have read
	!
	INCRU i FROM 0 TO .tblocks*127
	    DO cksm$gl_chksum = .cksm$gl_chksum XOR .databuffer[.i];
    blockoff = .blockoff + .tblocks;		!Update block offset
    iblocks = .iblocks - .tblocks;		! and blocks to go
    END;

RETURN true
END;

%sbttl 'checksum foreign image files'
ROUTINE cksm_foreign =
BEGIN
!
! Open the file using RMS with a FHC XAB attached to get the End of File
! information.  Do a checksum of the non-image file.
!
LOCAL
    isectdesc : $BBLOCK[isd$k_lenpriv],
    status;

find_context[fab$l_xab] = ixabfhc;		!Set XAB address
$XABFHC_INIT(xab=ixabfhc);			!Initialize XAB
IF NOT (status = $open(fab=.find_context))	!Open the input file
THEN BEGIN
    SIGNAL(cksm$_openin, 1, 
	find_result, .status,
	.find_context[fab$l_stv]);
    RETURN false;
    END;

CH$FILL(0,isd$k_lenpriv,isectdesc);
isectdesc[isd$w_size] = isd$k_lenpriv;		!Make it look like an isd
isectdesc[isd$l_vbn] = 1;			!File starts with first block
isectdesc[isd$w_pagcnt] = .ixabfhc[xab$l_ebk] +	!Set length of file
			1*(.ixabfhc[xab$w_ffb] NEQ 0);
checksum_section(isectdesc);			!Checksum it
SIGNAL(cksm$_nonimgchk,1,.cksm$gl_chksum);

IF NOT (status=$CLOSE(fab=.find_context))
    THEN SIGNAL(cksm$_closein, 1, 
		find_result, .status,
		.find_context[fab$l_stv]);

RETURN true
END;

%sbttl 'Call FAOL'
ROUTINE fao_buffer (ctrstr,args) =
BEGIN
!
! Call FAOL
!
OWN
    desc :	$BBLOCK [dsc$c_s_bln],	!Result descriptor
    buf :	VECTOR [132, BYTE];	!Output buffer

MAP
    ctrstr :	REF VECTOR [,BYTE],
    args :	VECTOR [4];

LOCAL
    faodesc : $BBLOCK [dsc$c_s_bln];

faodesc [dsc$w_length] = .ctrstr [0];		!Set up descriptor for fao control string
faodesc [dsc$a_pointer] = ctrstr [1];
desc [dsc$w_length] = 132;			!Set up result descriptor
desc [dsc$a_pointer] = buf;
$faol (ctrstr=faodesc,outlen=desc,		!Format the string
		outbuf=desc,prmlst=args);

RETURN desc;					!Return value is address of resulting descriptor
END;

%sbttl 'Output checksum to output file'
ROUTINE cksm_output (desc) =
BEGIN
!
! Write record to output file
!
MAP
    desc : REF $BBLOCK;

LOCAL
    status;

orab[rab$w_rsz] = .desc[dsc$w_length];		!Set length of line
orab[rab$l_rbf] = .desc[dsc$a_pointer];		! and it's address
status = $PUT(RAB=orab);			!Write the line
IF NOT .status					!Report any error
    THEN SIGNAL(cksm$_writeerr,1,outfiledesc,
		.status,.orab[rab$l_stv]);

RETURN .status
END;

%sbttl 'Get file name'
GLOBAL ROUTINE getfilename (fab) =
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns a string descriptor for a file.
!
! Inputs:
!
!	fab		Address of the fab
!
! Outputs:
!
!	Routine value is address of string descriptor for file name
!
!--

MAP
    fab : REF $BBLOCK;

BIND
    nam = .fab [fab$l_nam] : $BBLOCK;

OWN
    filedesc : $BBLOCK[dsc$c_s_bln];

IF (filedesc [dsc$w_length] = .nam [nam$b_rsl]) NEQ 0	!If resultant name present
THEN filedesc [dsc$a_pointer] = .nam [nam$l_rsa]
ELSE IF (filedesc [dsc$w_length] = .nam [nam$b_esl]) NEQ 0 !If expanded name present
    THEN filedesc [dsc$a_pointer] = .nam [nam$l_esa]
    ELSE BEGIN
	filedesc [dsc$w_length] = .fab [fab$b_fns];	!Use filename string
	filedesc [dsc$a_pointer] = .fab [fab$l_fna];	! if all else fails
	END;

RETURN filedesc
END;							!Of getfilename

END
ELUDOM
