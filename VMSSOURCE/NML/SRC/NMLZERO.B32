%TITLE 'NML ZERO counters module'
MODULE NML$ZERO (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
! ABSTRACT:
!
!    These routines return volatile data base information in response to
!    an NCP ZERO command message.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Kathy Perko
!
! CREATION DATE:  30-Aug-1982
!
! MODIFIED BY:
!	V03-003	MKP0003		Kathy Perko		6-Jan-1983
!		Add dummy table entry for X25 Access Module entity.
!
!	V03-002	MKP0002		Kathy Perko		24-June-1983
!		Add dummy table entries for Service Adjacency entity and
!		NI Configurator entity.
!
!	V03-001	MKP0001		Kathy Perko		9-Oct-1982
!		Add Area entity, and null entries for adjacent node
!		entities (which are read only) to tables.
!
!--

%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$ZERO		: NOVALUE,
    NML_CALL_ZERO	: NOVALUE,
    NML_CALL_ZERO_NODE	: NOVALUE,
    NML_ZEROPLURAL	: NOVALUE,
    NML_ZERO_KNOWN	: NOVALUE,
    NML_ZEROKNONODES	: NOVALUE,
    NML_ZERO_ENTITY	: NOVALUE,
    NML_ZERO_NODE	: NOVALUE,
    NML_ZEROREMOTES	: NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! OWN STORAGE:
!

OWN
    NML$T_P2BUFFER : VECTOR [NML$K_P2BUFLEN];
BIND
    NML$Q_P2BFDSC = UPLIT (NML$K_P2BUFLEN, NML$T_P2BUFFER) : DESCRIPTOR;

OWN
    NML$T_ENTBUFFER : VECTOR [32],
    NML$Q_ENTBFDSC  : DESCRIPTOR
		      INITIAL (0, NML$T_ENTBUFFER);

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL ROUTINE
    LIB$ESTABLISH : ADDRESSING_MODE (GENERAL),
    LIB$REVERT    : ADDRESSING_MODE (GENERAL),
    NML$BLD_REPLY,
    NML$BLDP2,
    NML$ERROR_1,
    NML$ERROR_2,
    NML$GETEXEID,
    NML$GETINFTABS,
    NML$GET_ENTITY_IDS,
    NML$MAINHANDLER,
    NML$NETQIO,
    NML$SEND;


!
! Macro to build dispatch table for an entity.
!
MACRO $TAB (TAB,
    DISPATCH_RTN,
    ZERO_RTN,	    ZERO_KNO_RTN) =

	OWN TAB : BBLOCK [%LENGTH * 4] INITIAL (
	$PIC (DISPATCH_RTN, TAB),
	$PIC (ZERO_RTN, TAB),
	$PIC (ZERO_KNO_RTN,TAB))
		%,

    $PIC (ADDR,TAB) =
		%IF %IDENTICAL (ADDR, 0)
		%THEN	LONG (0)
		%ELSE LONG (%NAME (ADDR) - %NAME (TAB))
		%FI
		%;


!
! Dispatch tables.  There is one table for each internal NML entity (NML
! internal entities are broken down more that NICE entities).  The table
! specifies the following information about the entity:
!	The address of the dispatch routine in this module for the entity.
!		The dispatch routines vary depending on the different
!		formats the entities can have.
!	The addresses of the routines which perform the requested change:
!		- Zero single entity
!		- Zero known entities
!
$TAB (LINE_TAB,				! NML$C_LINE
    NML_CALL_ZERO,
    NML_ZERO_ENTITY,	NML_ZERO_KNOWN);

BIND LOGGING_TAB = UPLIT (0);

BIND SINK_TAB = UPLIT (0);

$TAB (NODE_TAB,				! NML$C_NODE
    NML_CALL_ZERO_NODE,
    NML_ZERO_NODE,	NML_ZEROKNONODES);

$TAB (NODEBYNAME_TAB,		! NML$C_NODEBYNAME
    NML_CALL_ZERO_NODE,
    NML_ZERO_NODE,	NML_ZEROKNONODES);

BIND LOOPNODE_TAB = UPLIT (0);

BIND ADJACENT_NODE_TAB = UPLIT (0);

$TAB (EXECUTOR_TAB,			! NML$C_EXECUTOR
    NML_CALL_ZERO_NODE,
    NML_ZERO_NODE,	NML_ZEROKNONODES);

BIND OBJECT_TAB = UPLIT (0);

$TAB (CIRCUIT_TAB,			! NML$C_CIRCUIT
    NML_CALL_ZERO,
    NML_ZERO_ENTITY,	NML_ZERO_KNOWN);

BIND CIRCUIT_ADJACENT_TAB = UPLIT (0);

BIND CIRCUIT_ADJ_SRV_TAB = UPLIT (0);

BIND AREA_TAB = UPLIT (0);

BIND X25_ACCESS_TAB = UPLIT (0);

BIND PROT_NET_TAB = UPLIT (0);

$TAB (PROT_DTE_TAB,			! NML$C_PROT_DTE
    NML_CALL_ZERO,
    NML_ZERO_ENTITY,	NML_ZERO_KNOWN);

BIND PROT_GRP_TAB = UPLIT (0);

$TAB (X25_SERV_TAB,			! NML$C_X25_SERV
    NML_CALL_ZERO,
    NML_ZERO_ENTITY,	0);

BIND X25_SERV_DEST_TAB = UPLIT (0);

BIND TRACE_TAB = UPLIT (0);

BIND TRACEPNT_TAB = UPLIT (0);

$TAB (X29_SERV_TAB,			! NML$C_X29_SERV
    NML_CALL_ZERO,
    NML_ZERO_ENTITY,	0);

BIND X29_SERV_DEST_TAB = UPLIT (0);

BIND NI_CONFIG_TAB = UPLIT (0);

BIND LINK_TAB = UPLIT (0);


!
! Table table.  Contains pointers to Dispatch tables for NML entities.
! Indexed by NML$C_entity definitions.
!
OWN TABLE_TAB : VECTOR [NML$C_MAXENTITY] INITIAL (
	$PIC (LINE_TAB, TABLE_TAB),
	$PIC (LOGGING_TAB,TABLE_TAB),
	$PIC (SINK_TAB,TABLE_TAB),
	$PIC (NODE_TAB,TABLE_TAB),
	$PIC (NODEBYNAME_TAB,TABLE_TAB),
	$PIC (LOOPNODE_TAB,TABLE_TAB),
	$PIC (ADJACENT_NODE_TAB,TABLE_TAB),
	$PIC (EXECUTOR_TAB,TABLE_TAB),
	$PIC (OBJECT_TAB,TABLE_TAB),
	$PIC (CIRCUIT_TAB,TABLE_TAB),
	$PIC (CIRCUIT_ADJACENT_TAB,TABLE_TAB),
	$PIC (CIRCUIT_ADJ_SRV_TAB,TABLE_TAB),
	$PIC (AREA_TAB,TABLE_TAB),
	$PIC (X25_ACCESS_TAB,TABLE_TAB),
	$PIC (PROT_NET_TAB,TABLE_TAB),
	$PIC (PROT_DTE_TAB,TABLE_TAB),
	$PIC (PROT_GRP_TAB,TABLE_TAB),
	$PIC (X25_SERV_TAB,TABLE_TAB),
	$PIC (X25_SERV_DEST_TAB,TABLE_TAB),
	$PIC (TRACE_TAB,TABLE_TAB),
	$PIC (TRACEPNT_TAB,TABLE_TAB),
	$PIC (X29_SERV_TAB,TABLE_TAB),
	$PIC (X29_SERV_DEST_TAB,TABLE_TAB),
	$PIC (NI_CONFIG_TAB,TABLE_TAB),
	$PIC (LINK_TAB,TABLE_TAB));

%SBTTL 'NML$ZERO  Zero counters main routine'
GLOBAL ROUTINE NML$ZERO : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dispatches the zero function to the proper routine
!	according to the entity type.
!
! IMPLICIT INPUTS:
!
!	NML$GB_OPTIONS contains the option byte parsed from the NICE message.
!	NML$GB_ENTITY_CODE contains the entity code.
!
!--

BEGIN

MAP
    NML$GB_ENTITY_FORMAT : BYTE SIGNED,
    NML$GB_OPTIONS : BBLOCK [1];

LOCAL
    ZERO_TABLE : REF BBLOCK,	! Dispatch table reference
    RTN_ADDR,			! Temporary routine address
    PARSE_TAB,			! Address of NICE message parsing
				!	table.
    ZERO_RTN;			! Address of routine to perform
				!	zero requested by NICE
				!	message.


!
! Get address of entity's dispatch table.  The addresses are stored as offsets
! to make NMLSHR PIC.  Change the offset into a useable address.
!
ZERO_TABLE = .TABLE_TAB [.NML$GL_NML_ENTITY] + TABLE_TAB;
IF .ZERO_TABLE NEQA 0 THEN
    BEGIN
    RTN_ADDR = .ZERO_TABLE [ZER$L_DISPATCH] + .ZERO_TABLE;
    !
    !  Go to dispatch table for the entity specified in the NICE message.
    !  Get the address of the routine which performs the type of change
    !  requested.
    !
    IF .RTN_ADDR NEQA .ZERO_TABLE THEN
	BEGIN
	!
	! Each function's portion of the entity's dispatch table contains
	! the addresses of two zero routines.  These routines do the
	! following:
	!	- Zero a single entity
	!	- Zero known entities
	!
	IF .NML$GB_ENTITY_FORMAT EQL NMA$C_ENT_KNO THEN
	    ZERO_RTN = .ZERO_TABLE [ZER$L_KNOWN]
	ELSE
	    ZERO_RTN = .ZERO_TABLE [ZER$L_ENTITY];
	!
	! The routine addresses are stored as offsets (to make NMLSHR PIC).
	! Make the offset into a callable routine address.
	!
	IF .ZERO_RTN NEQ 0 THEN
	    BEGIN
	    ZERO_RTN = .ZERO_RTN + .ZERO_TABLE;
	    !
	    ! Call change routine.
	    !
	    (.RTN_ADDR) (.NML$GL_NML_ENTITY,
		         .ZERO_RTN);
	    END
	ELSE
	    NML$ERROR_1 (NMA$C_STS_FUN);
	END
    ELSE
	NML$ERROR_1 (NMA$C_STS_FUN);
    END
ELSE
    NML$ERROR_1 (NMA$C_STS_FUN);
END;				! End of NML$ZERO

%SBTTL 'NML_CALL_ZERO	Zero volatile entity parameters'
ROUTINE NML_CALL_ZERO (ENTITY, ZERO_RTN): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dispatches to a routine to zero the specified
!	set of circuit counters based on the entity id format.
!
! FORMAL INPUTS:
!	ENTITY		Internal NML entity code of entity to zero.
!	ZERO_RTN	Address of routine to perform zero requested
!			by NICE message.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
!--

BEGIN

MAP
    NML$GB_ENTITY_FORMAT : BYTE SIGNED;

SELECTONEU .NML$GB_ENTITY_FORMAT OF
    SET
    [NMA$C_ENT_KNO]:		! Known
	NML_ZEROPLURAL (.ENTITY,	! Entity code
		        .ZERO_RTN,	! Zero routine
			0,		! Not used
			0);		! Not used

    [1 TO 16]:			! Entity name
	NML_ZEROPLURAL (.ENTITY,	! Entity code
			.ZERO_RTN,	! Zero routine
			.NML$GB_ENTITY_FORMAT,! Id string length
			NML$AB_ENTITY_ID);	! Id string address

    [OTHERWISE]:
	NML$ERROR_2 (NMA$C_STS_IDE, .NML$GB_ENTITY_CODE);	! Option error
    TES;

END;				! End of NML_CALL_ZERO

%SBTTL 'NML_CALL_ZERO_NODE  Zero node counters'
ROUTINE NML_CALL_ZERO_NODE (ENTITY, ZERO_RTN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dispatches to a routine to zero the specified set
!	of node counters based on the entity id format.
!
! FORMAL INPUTS:
!	ENTITY		Internal NML entity code of entity to zero.
!	ZERO_RTN	Address of routine to perform zero requested
!			by NICE message.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
!--

BEGIN

MAP
    NML$GB_ENTITY_FORMAT : BYTE SIGNED;

LOCAL
    EXEC_ADR;

EXEC_ADR = 0;		! Set exec address in case entity is NML$C_EXECUTOR.
SELECTONEU .NML$GB_ENTITY_FORMAT OF
    SET
    [NMA$C_ENT_KNO]:		! Known
	NML_ZEROPLURAL (.ENTITY,		! No entity
			NML_ZEROKNONODES,	! Routine name
			0,			! Not used
			0);			! Not used

    [NMA$C_ENT_ADD]:		! Node address
	BEGIN
	IF .ENTITY EQL NML$C_EXECUTOR THEN
	    NML_ZEROPLURAL (NML$C_EXECUTOR,	! entity = executor node
			    NML_ZERO_NODE,	! Routine name
			    2,			! Id string length
			    EXEC_ADR)		! Executor node address
	ELSE
	    NML_ZEROPLURAL (NML$C_NODE,		! Entity code
			    NML_ZERO_NODE,	! Routine address
			    2,			! Id string length
			    NML$AB_ENTITY_ID);	! Id (node address) address
	END;

    [1 TO 6]:			! Node name
	IF .NML$GL_NML_ENTITY EQL NML$C_EXECUTOR THEN
	    NML_ZEROPLURAL (NML$C_EXECUTOR,	! No entity
			    NML_ZERO_NODE,	! Routine address
			    2,			! Id string length
			    EXEC_ADR)		! Executor node address
	ELSE
	    NML_ZEROPLURAL (NML$C_NODEBYNAME,	! Entity code
			    NML_ZERO_NODE,	! Routine address
			    .NML$GB_ENTITY_FORMAT, ! Id (node name) length
			    NML$AB_ENTITY_ID);	! Id address

    [OTHERWISE]:
	NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_NOD); ! Option error
    TES;

END;				! End of NML_CALL_ZERO_NODE

%SBTTL 'NML_ZEROPLURAL  Zero plural entity counters'
ROUTINE NML_ZEROPLURAL (ENTITY, RTN, PRM1, PRM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine frames the response messages with 'more' and
!	'done' messages and calls the specified routine.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity Table index for the entity (NML$C_...)
!	RTN		Address of entity routine to be called.
!	PRM1		Routine parameter value.
!	PRM2		Routine parameter value.
!
! SIDE EFFECTS:
!
!	A 'more' message is sent and then a 'done' message is signalled
!	following a return or signal from the specified routine.
!
!--

BEGIN

LOCAL
    MSG_SIZE;

!
! Send success with multiple responses message.
!
NML$BLD_REPLY (UPLIT(0, NMA$C_STS_MOR), MSG_SIZE); ! Build message
NML$SEND (NML$AB_SNDBUFFER, .MSG_SIZE);	! Send it
!
! Enable condition handler to allow done message to be sent.
!
LIB$ESTABLISH (NML$MAINHANDLER);
!
! Call entity-specific routine.
!
(.RTN) (.ENTITY, .PRM1, .PRM2);
!
! Signal done message.
!
LIB$REVERT ();			! Disable condition handler
NML$ERROR_1 (NMA$C_STS_DON);	! Signal no more responses

END;				! End of NML_ZEROPLURAL


%SBTTL 'NML_ZERO_KNOWN   Zero known entity counters'
ROUTINE NML_ZERO_KNOWN (ENTITY, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine clears the counters in the volatile data base entries
!	for known entities of the type specified.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Index into Entity Table for entity (NML$C_...)
!	DUM1		Not used.
!	DUM2		Not used.
!
! SIDE EFFECTS:
!
!	Zero or more response messages will be sent.
!
!--

BEGIN

LOCAL
    BUFEND,
    DUMDSC : REF DESCRIPTOR,	! Dummy table descriptor
    ENTLEN,				! DNA line name length
    LENGTH,
    LISDSC : DESCRIPTOR,		! List buffer descriptor
    ENTPTR,				! Pointer to entity id for response
    MSGSIZE,			! Response message size
    NFBDSC : REF DESCRIPTOR,	! Descriptor for NFB
    P2DSC  : DESCRIPTOR,		! P2 buffer descriptor
    PTR,
    STATUS,
    STRTFLG;
!
! Get a list of all entities in the volatile data base.
!
STRTFLG = FALSE;

WHILE NML$GET_ENTITY_IDS (.ENTITY, NMA$C_ENT_KNO, 0, .STRTFLG, LISDSC) DO
    BEGIN
    STRTFLG = TRUE;
    !
    ! Zero counters for every entity in the list.
    !
    BUFEND = .LISDSC [DSC$A_POINTER] + .LISDSC [DSC$W_LENGTH];
    PTR = .LISDSC [DSC$A_POINTER];

    WHILE .PTR LSSA .BUFEND DO
	BEGIN
	LENGTH = .(.PTR)<0,16>;
	PTR = .PTR + 2;
	!
	! Get NFB and P2 buffer.
	!
	NML$GETINFTABS (.ENTITY, NML$C_ZERO, NFBDSC, DUMDSC, 0);
	NML$BLDP2 (.LENGTH, .PTR, -1, 0, NML$Q_P2BFDSC, P2DSC);
	!
	! Initialize message flags and status.
	!
	NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
	NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;
	!
	! Zero the counters for the specified entity.
	!
	NML$NETQIO (.NFBDSC, P2DSC, 0, 0);
	!
	! Move the entity ID into the entity buffer.
	!
	ENTPTR = .NML$Q_ENTBFDSC [DSC$A_POINTER];
	CH$WCHAR_A (.LENGTH, ENTPTR);
	CH$MOVE (.LENGTH, .PTR, .ENTPTR);
	NML$Q_ENTBFDSC [DSC$W_LENGTH] = .LENGTH + 1;
	!
	! Add line id to response message.
	!
	NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1;
	NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTBFDSC;
	!
	! Build and send the response message.
	!
	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
	NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

	PTR = .PTR + .LENGTH;	! Advance pointer
	END;
    END;

END;				! End of NML_ZERO_KNOWN

%SBTTL 'NML_ZEROKNONODES  Zero known node counters'
ROUTINE NML_ZEROKNONODES (DUM0, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine zeros counters for all nodes in the volatile data base.
!
! FORMAL PARAMETERS:
!
!	DUM0		Not used.
!	DUM1		Not used.
!	DUM2		Not used.
!
! SIDE EFFECTS:
!
!	Zero or more response messages will be sent as a result of
!	the routines that are called.
!
!--

BEGIN

LOCAL
    EXEC_ADR: WORD;
!
! Return executor node.
!
EXEC_ADR = 0;
NML_ZERO_NODE (NML$C_EXECUTOR,
	      2,		! Id string length
	      EXEC_ADR);	! Executor node address
!
! Return remote nodes.
!
NML_ZEROREMOTES ();

END;				! End of NML_ZEROKNONODES

%SBTTL 'NML_ZERO_ENTITY  Zero entity counters'
ROUTINE NML_ZERO_ENTITY (ENTITY, LEN, ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity Table index (NML$C_...)
!	LEN		Length of entity id string.
!	ADR		Address of entity id string.
!
! SIDE EFFECTS:
!
!	A response message will be sent.
!
!--

BEGIN

LOCAL
    DUMDSC : REF DESCRIPTOR,	! Dummy table descriptor
    MSGSIZE,			! Length of response message
    NEWLEN,				! Mapped (VMS) line name length
    NFBDSC : REF DESCRIPTOR,	! NFB descriptor
    P2DSC  : DESCRIPTOR;		! Descriptor for P2 buffer
!
! Get NFB and P2 buffer.
!
NML$GETINFTABS (.ENTITY, NML$C_ZERO, NFBDSC, DUMDSC, 0);
!
! X25 and X29 Server databases have only one entry.  So always do a
! wildcard zero of these databases.
!
IF .ENTITY EQL NML$C_X25_SERV OR
   .ENTITY EQL NML$C_X29_SERV THEN
    LEN = -1;
    
NML$BLDP2 (.LEN, .ADR, -1, 0, NML$Q_P2BFDSC, P2DSC);
!
! Initialize message flags and status.
!
NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;
!
! Zero the counters for the specified line.
!
NML$NETQIO (.NFBDSC, P2DSC, 0, 0);
!
! Build and send the response message.
!
NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

END;				! End of NML_ZERO_ENTITY

%SBTTL 'NML_ZERO_NODE  Zero node counters'
ROUTINE NML_ZERO_NODE (ENTITY, LEN, ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity Table index (NML$C...)
!	LEN		Length of entity id string.
!	ADR		Address of entity id string.
!
! SIDE EFFECTS:
!
!	A response message will be sent.
!
!--

BEGIN

LOCAL
    MSGSIZE,			! Response message size
    NFBDSC : REF DESCRIPTOR,	! NFB descriptor
    P2DSC  : DESCRIPTOR,		! P2 parameter descriptor
    DUMDSC : REF DESCRIPTOR;	! Dummy table descriptor

!
! Get the NFB and P2 buffer.
!
NML$GETINFTABS (.ENTITY, NML$C_ZERO, NFBDSC, DUMDSC, 0);
IF .ENTITY NEQ NML$C_NODEBYNAME THEN
    !
    ! Zero executor node or node specified by address in the NICE command.
    !
    NML$BLDP2 (0, .(.ADR)<0,16>, -1, 0, NML$Q_P2BFDSC, P2DSC)
ELSE
    !
    ! Zero node specified by name in the NICE command.
    !
    NML$BLDP2 (.LEN, .ADR, -1, 0, NML$Q_P2BFDSC, P2DSC);

!
! Initialize message flags and status.
!
NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;
!
! Zero the counters for the specified node.
!
NML$NETQIO (.NFBDSC, P2DSC, 0, 0);
!
! If zeroing the executor node's counters, then the excutor's entity ID
! must be returned in the NICE response message.  Add it to the message.
!
IF .ENTITY EQL NML$C_EXECUTOR THEN
    BEGIN
    !
    ! Add the executor id to the entity buffer.
    !
    NML$GETEXEID (NML$Q_ENTBFDSC, NML$Q_ENTBFDSC [DSC$W_LENGTH]);
    !
    ! Add the entity id to the message.
    !
    NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1;
    NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTBFDSC;
    END;
!
! Build and send the response message.
!
NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

END;				! End of NML_ZERO_NODE

%SBTTL 'NML_ZEROREMOTES  Zero known node counters'
ROUTINE NML_ZEROREMOTES: NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine zeros the counters for all remote nodes.
!
! SIDE EFFECTS:
!
!	Zero or more response messages will be sent.
!
!--

BEGIN

LOCAL
    BUFEND,
    DUMDSC : REF DESCRIPTOR,	! Dummy table descriptor
    ENTPTR,				! Pointer to node id in response
    LENGTH,
    LISDSC : DESCRIPTOR,
    MSGSIZE,
    NFBDSC : REF DESCRIPTOR,	! NFB descriptor
    P2DSC  : DESCRIPTOR,		! Descriptor for P2 buffer
    PTR,
    STATUS,
    STRTFLG;
!
! Get the list of known remote nodes.
!
STRTFLG = FALSE;

WHILE NML$GET_ENTITY_IDS (NML$C_NODE, NMA$C_ENT_KNO, 0, .STRTFLG, LISDSC) DO
    BEGIN

    STRTFLG = TRUE;
    !
    ! Zero counters for all nodes in the list.
    !
    PTR = .LISDSC [DSC$A_POINTER];
    BUFEND = .LISDSC [DSC$A_POINTER] + .LISDSC [DSC$W_LENGTH];
    LENGTH = 2;
    NML$GETINFTABS (NML$C_NODE, NML$C_ZERO, NFBDSC, DUMDSC, 0);

    WHILE .PTR LSSA .BUFEND DO
	BEGIN
	PTR = .PTR +4;		! Skip loopnode flag.
	NML$BLDP2 (0, .(.PTR)<0,16>, -1, 0, NML$Q_P2BFDSC, P2DSC);

	NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
	NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;

	NML$NETQIO (.NFBDSC, P2DSC, 0, 0);
	!
	! Move node address and name into entity id buffer and
	! advance pointer.
	!
	ENTPTR = CH$MOVE (2,
			.PTR,
			.NML$Q_ENTBFDSC [DSC$A_POINTER]);
	PTR = .PTR + 4;
	LENGTH = .(.PTR)<0,16>;
	CH$WCHAR_A (.LENGTH, ENTPTR);
	PTR = .PTR + 2;
	ENTPTR = CH$MOVE (.LENGTH, .PTR, .ENTPTR);
	PTR = .PTR + .LENGTH;
	!
	! Add node id to message.
	!
	NML$Q_ENTBFDSC [DSC$W_LENGTH] =
		.ENTPTR - .NML$Q_ENTBFDSC [DSC$A_POINTER];
	NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1;
	!
	! Build and send the response message.
	!
	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
	NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);
	END
    END;

END;				! End of NML_ZEROREMOTES

END					! End of module

ELUDOM
