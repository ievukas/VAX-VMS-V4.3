MODULE util$report_io_err(
		LANGUAGE (BLISS32),
		ADDRESSING_MODE(EXTERNAL=GENERAL,NONEXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
%TITLE	'Report I/O error on FAB or RAB';
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  Run time library
!
! ABSTRACT:
!
!	Signal an I/O error on either the FAB or the RAB
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Benn Schreiber
!
! CREATION DATE: 7-Feb-1983
!
! MODIFIED BY:
!
!--

%SBTTL	'Declarations';

LIBRARY
	'SYS$LIBRARY:STARLET';
!
! Define UTIL$ psects
!
PSECT
    CODE = _UTIL$CODE,
    GLOBAL = _UTIL$DATA,
    OWN = _UTIL$DATA,
    PLIT = _UTIL$CODE;

%SBTTL	'util$getfilename - Get descriptor of file spec from FAB';
GLOBAL ROUTINE util$getfilename (fab) =
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns a string descriptor for a file.
!
! Inputs:
!
!	fab		Address of the fab
!
! Outputs:
!
!	Routine value is address of string descriptor for file name
!
!--

MAP
    fab : REF $BBLOCK;

LOCAL
    nam : REF $BBLOCK;

OWN
    filedesc : $BBLOCK[dsc$c_s_bln];

nam = .fab[fab$l_nam];
IF (.nam EQL 0)
    OR (IF (filedesc [dsc$w_length] = .nam [nam$b_rsl]) NEQ 0
	    THEN filedesc [dsc$a_pointer] = .nam [nam$l_rsa]
	    ELSE IF (filedesc [dsc$w_length] = .nam [nam$b_esl]) NEQ 0
		THEN filedesc [dsc$a_pointer] = .nam [nam$l_esa];
	.filedesc[dsc$w_length] EQL 0)
THEN BEGIN
    filedesc [dsc$w_length] = .fab [fab$b_fns];	!Use filename string
    filedesc [dsc$a_pointer] = .fab [fab$l_fna];! if all else fails
    END;

RETURN filedesc
END;							!Of util$getfilename

%SBTTL	'util$report_io_error - Report I/O error on FAB or RAB';
GLOBAL ROUTINE util$report_io_error (frab) =
BEGIN
!+++
! FUNCTIONAL DESCRIPTION:
!
!	This routine signals an I/O error.
!
! Inputs:
!
!	frab		The FAB or the RAB which got the error
!			The $L_CTX field of the FAB/RAB must contain the
!			error code to signal
!			 (SHR$_OPENIN/OPENOUT/READERR/WRITEERR/CLOSEIN/CLOSEOUT)
!			If frab is a RAB, then RAB$L_FAB must point to the FAB
!			In either case, the FAB must point to a valid NAM block
!			 with both the expanded and resultant name strings in
!			 order for consistent error reporting
!
! Outputs:
!
!	The error is signalled.  RMS$_EOF is not signalled
!
! Routine value:
!
!	The $L_STS field of frab is returned
!
!---

MAP
    frab : REF $BBLOCK;

IF .frab[rab$l_sts] NEQ rms$_eof
    THEN SIGNAL(.frab[fab$l_ctx],1,
	util$getfilename((IF .frab[fab$b_bid] EQL fab$c_bid
			THEN .frab
			ELSE .frab[rab$l_fab])),
	.frab[fab$l_sts],.frab[fab$l_stv]);

RETURN .frab[fab$l_sts]
END;
END ELUDOM
