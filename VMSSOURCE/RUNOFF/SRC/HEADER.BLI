%TITLE 'HEADER -- handle headers (titles) for examples, figures, tables.'
MODULE header (	IDENT = 'V04-000'
		%BLISS32 [, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					     NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:
!
!	Handles headers (titles) for examples, figures, tables.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	Keith A. Dawson		CREATION DATE:	18-April-1982


%SBTTL 'Revision History'
! MODIFIED BY:
!
!	016	KFA00016	Ken Alden	04-Aug-1983
!		Added logic to prevent user from enabling a chapter
!		 or appendix if already in the type of page numbering
!		 scheme.
!		Added handling for disable appendix.
!
!	015	KFA00015	Ken Alden	04-Aug-1983
!		Because I replaced this module in CMS, this minor
!		 change makes it a new ident.  Basically all I did
!		 was make the enable feature bump the page counters
!		 as actually doing a chapter/appendix would have done.
!
!	014	KFA00014	Ken Alden	03-Aug-1983
!		Added the .DIS/ENABLE CHAPTER functionality.
!
!	013	RER00013	Ron Randall	7-Jul-1983
!		Fixed footnote outputting bug.
!
!	012	RER00012	Ron Randall	14-Jun-1983
!		Added logic to prevent HEADER from initiating a chapter
!		or appendix until all pending footnotes are output.
!
!	011	KFA00011	Ken Alden	9-Jun-1983
!		Fixed .NO CHAPTER bug by adding a RETURN statement.
!
!	010	KAD00010	Keith Dawson	18-May-1983
!		Added support for FLIP Phase 1. Existing FLIP books were 
!		  built using a DSRFLIP and BIND that have a 4-bit 
!		  ($TINY_INTEGER) field for TOCTXT_CODE. This field is too 
!		  small for new DSRPLUS table-of-contents data types. FLIP 
!		  Phase 2 support will have to use new, not-yet-defined fields 
!		  for these data types.
!
!	009	KFA00009	Ken Alden	3-May-1983
!		Added the external calls for pagen and npagen.
!
!	008	REM00008	Ray Marshall	April-1983
!		Made many changes to allow chapters and appendices to be
!		  controlled from the ECC data structures for DSR as they have
!		  been for some time now for DSRPLUS.  This was done to decouple
!		  these two forms of output from each other.
!
!	007	KFA00007	Ken Alden	28-Mar-1983
!		Testpage amounts have now been refigured and when
!		  the user says "TP = 0" that is what they will get!
!
!	006	RER00006	Ron Randall	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!--


%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    header	: NOVALUE,	!Generates calls to OUTHDR for headers 
				! (counters/captions) of header levels, 
				! examples, figures, and tables.
    set_ecc	: NOVALUE;	!Sets values of some (common) OUTHDR formals.
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! OWN STORAGE:
!
OWN
	lines_before,		lines_after,		test_page_amount,
	counter_major_type,	counter_minor_type,
	counter_value,		counter_display_code,	counter_spaces_after,
	counter_pre_string_length,	counter_pre_string_ptr,
	counter_post_string_length,	counter_post_string_ptr,
	caption_major_type,	caption_minor_type,	caption_case,
	caption_is_centered,	caption_is_flush_right,	caption_is_run_in,
	caption_is_bold,	caption_is_underlined,	put_into_mem_file,
	autosubtitle,		brn_open,		break_before_caption,
	lines_between,		new_page,		startodd,
	tocpage;
!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL
    rnfinm;

EXTERNAL
    ecc		: $ecc_blockvector,
    fnct	: fnct_definition,
    gca		: gca_definition,
    hct		: hct_definition,
    hlc		: hlc_definition,
    hllist	: counted_list,
    ira		: fixed_string,
    numprm	: numprm_define,

%IF dsrplus %THEN
    npagen	: page_definition,
    pagen	: page_definition,
%FI

    pdt		: ref pdt_definition,
    sca		: sca_definition;

EXTERNAL ROUTINE
    erma,
    outcha,
    outhdr,
    botpag,
    foobot,
    toppag,

%IF DSRPLUS %THEN
    puttpg,
%FI
    skpsep;


%SBTTL 'HEADER -- set up call to OUTHDR to generate (number and) header'
GLOBAL ROUTINE header (handler) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	HEADER sets up the formal arguments to call OUTHDR and generate a 
!	header (in the output and/or binary file) for .HEADER <any> commands, 
!	where <any> is LEVEL, EXAMPLE, FIGURE, or TABLE.
!
! FORMAL PARAMETERS:
!
!	handler - Defines which sort of header is to be generated.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    !
    ! Preset those OUTHDR formals that are common, 
    ! or that are not yet implemented.
    !
    counter_major_type = maj_runoff;
    caption_major_type = maj_runoff;
    put_into_mem_file  = true;		! NYI!!**DEBUG**!!
    brn_open = .gca_btc;

    SELECT .handler OF
	SET

	[h_header_level, h_set_level] :
	    !
	    ! Process the number given as a parameter on the .HL or 
	    !
	    BEGIN
	    !
	    ! .SET LEVEL command
	    !
	    IF  .num_sign NEQ 0
	    THEN
		!
		! Process a relative header level.
		!
		num_value = .hllist [cl_index] + .num_value
	    ELSE

		IF  .num_length EQL 0
		THEN
		    !
		    ! Continue on at same level.
		    !
		    num_value = .hllist [cl_index];

	    !
	    ! Validate resultant header level.
	    !
	    IF  (.num_value LEQ 0) OR 
		(.num_value GTR .hllist [cl_max_index])
	    THEN
		!
		! Illegal header number.
		!
		BEGIN
		erma (rnfinm, false);
		!
		! Stay at current level.
		!
		num_value = .hllist [cl_index];
		END;

	    END;

	[h_header_level] :
	    !
	    ! Bump counter at specified level.
	    !
	    BEGIN
	    hllist [.num_value] = .hllist [.num_value] + 1;

	    !
	    ! Zero all higher numbered counters.
	    !
	    INCR I FROM (.num_value + 1) TO .hllist [cl_max_index] DO
		hllist [.I] = 0;

	    END;

	[h_header_level, h_set_level] :
	    !
	    ! Set desired level.
	    !
	    hllist [cl_index] = .num_value;

	[h_set_level] : RETURN;

	[h_header_level] :
	    BEGIN
	    BIND
		style_block = ecc [hcoll_offset + .hllist [cl_index], 0,0,0,0]
				 : $ecc_block;

	    counter_minor_type = min_hl_inf;
	    caption_minor_type = 
		(IF  .style_block [ecc$v_unnumbered]
		 THEN
		     min_hl_txt_u
		 ELSE
		     min_hl_txt);

	    set_ecc (.handler, style_block);
	    END;

%IF DSRPLUS %THEN
	[h_header_exampl] : 
	    BEGIN
	    BIND
		style_block = ecc [examp_offset, 0,0,0,0] : $ecc_block;

	    counter_minor_type = min_examp_inf;
	    caption_minor_type = 
		(IF  .style_block [ecc$v_unnumbered]
		 THEN
		     min_examp_txt_u
		 ELSE
		     min_examp_txt);

	    set_ecc (.handler, style_block);
	    END;

	[h_header_figure] :
	    BEGIN
	    BIND
		style_block = ecc [figur_offset, 0,0,0,0] : $ecc_block;

	    counter_minor_type = min_figur_inf;
	    caption_minor_type =
		(IF  .style_block [ecc$v_unnumbered]
		 THEN
		     min_figur_txt_u
		 ELSE
		     min_figur_txt);

	    set_ecc (.handler, style_block);
	    END;

	[h_header_table] :
	    BEGIN
	    BIND
		style_block = ecc [table_offset, 0,0,0,0] : $ecc_block;

	    counter_minor_type = min_table_inf;
	    caption_minor_type =
		(IF  .style_block [ecc$v_unnumbered]
		 THEN
		     min_table_txt_u
		 ELSE
		     min_table_txt);

	    set_ecc (.handler, style_block);
	    END;
%FI

	[h_chapter] :
	    BEGIN
	    BIND
		style_block = ecc [chap_offset, 0,0,0,0] : $ecc_block;

	    counter_minor_type = min_chapt_inf;
	    caption_minor_type =
		(IF  .style_block [ecc$v_unnumbered]
		 THEN
		     min_chapt_txt_u
		 ELSE
		     min_chapt_txt);

! ** This code is needed for FLIP Phase 1 support. 
%IF FLIP %THEN
	    IF  (.gca_op_dev EQL op_dev_flip)
	    THEN
		caption_minor_type = min_chapt;
%FI
! **

	    set_ecc (.handler, style_block);
	    END;

%IF DSRPLUS %THEN
	[h_no_chapter, h_disable_chapt, h_disable_appen] :
	    BEGIN
	    gca_chapt        = false;	! Turn off chapter oriented-ness.
	    npagen [sct_typ] = 0;	! Normal page numbers
	    pagen  [sct_typ] = 0;	! Normal page numbers

	    IF .gca_btc 
	    THEN

%IF FLIP %THEN
		puttpg (pagen, flip$k_tocpag);
%ELSE
		puttpg (pagen, -1);
%FI

	    RETURN;
	    END;

	[h_enable_append] :
	    BEGIN
    	    IF .pagen [sct_typ] EQL sct_append ! Already in an Appendix
    	    THEN
    		RETURN;
	    gca_chapt        = true;	! Turn off chapter oriented-ness.
	    npagen [sct_typ] = sct_append;  ! Normal page numbers
	    pagen  [sct_typ] = sct_append;  	! Normal page numbers
    	    pagen  [sct_number] = .ecc [append_offset,ecc$h_counter] + 1;
    	    npagen  [sct_number] = .ecc [append_offset,ecc$h_counter] + 1;
	    IF .gca_btc 
	    THEN

%IF FLIP %THEN
		puttpg (pagen, flip$k_tocpag);
%ELSE
		puttpg (pagen, -1);
%FI

	    RETURN;
	    END;

	[h_enable_chapte] :
	    BEGIN
    	    IF .pagen [sct_typ] EQL sct_chapt ! Already in a Chapter
    	    THEN
    		RETURN;
	    gca_chapt        = true;	! Turn off chapter oriented-ness.
	    npagen [sct_typ] = sct_chapt;  ! Normal page numbers
	    pagen  [sct_typ] = sct_chapt;  	! Normal page numbers
    	    pagen  [sct_number] = .ecc [chap_offset,ecc$h_counter] + 1;
    	    npagen  [sct_number] = .ecc [chap_offset,ecc$h_counter] + 1;
	    IF .gca_btc 
	    THEN

%IF FLIP %THEN
		puttpg (pagen, flip$k_tocpag);
%ELSE
		puttpg (pagen, -1);
%FI

	    RETURN;
	    END;
%FI

	[h_appendix] :
	    BEGIN
	    BIND
		style_block = ecc [append_offset, 0,0,0,0] : $ecc_block;

	    counter_minor_type = min_append_inf;
	    caption_minor_type = 
		(IF  .style_block [ecc$v_unnumbered]
		 THEN
		     min_append_txt_u
		 ELSE
		     min_append_txt);

! ** This code is needed for FLIP Phase 1 support.
%IF FLIP %THEN
	    IF  (.gca_op_dev EQL op_dev_flip)
	    THEN
		caption_minor_type = min_append;
%FI
! **

	    set_ecc (.handler, style_block);
	    END;

	TES;

    !
    ! Skip any spaces, tabs, or commas in the input.
    !
    skpsep (ira);

    IF  (.handler EQL h_chapter) OR (.handler EQL h_appendix)
    THEN
	BEGIN
	!
	! Loop over all remaining footnotes.
	!
	WHILE .fnct_count GTR 0 DO
	    BEGIN
	    !
	    ! Get rid of as many footnotes as possible.
	    !
	    foobot ();
	    !
	    ! Finish the bottom of the page except for last one,
	    ! which is taken care of by OUTCHA.
	    !
	    IF .fnct_count GTR 0
	    THEN
		BEGIN
		botpag ();
		!
		! Because not all footnotes were output, we have to 
		! start a new page, and keep trying.
		!
		toppag ();
		END;

	    END;

	outcha (
	.lines_before,		.lines_after,		.test_page_amount,
	.counter_major_type,	.counter_minor_type,
	.counter_value,		.counter_display_code,	.counter_spaces_after,
	.counter_pre_string_length,	.counter_pre_string_ptr,
	.counter_post_string_length,	.counter_post_string_ptr,
	.caption_major_type,	.caption_minor_type,	.caption_case,
	.caption_is_centered,	.caption_is_flush_right,.caption_is_run_in,
	.caption_is_bold,	.caption_is_underlined,.put_into_mem_file,
	.autosubtitle,		.brn_open,		.break_before_caption,
	.lines_between,		.new_page,		.startodd,
	.tocpage
	);
	END
    ELSE
	BEGIN
	outhdr (
	.lines_before,		.lines_after,		.test_page_amount,
	.counter_major_type,	.counter_minor_type,
	.counter_value,		.counter_display_code,	.counter_spaces_after,
	.counter_pre_string_length,	.counter_pre_string_ptr,
	.counter_post_string_length,	.counter_post_string_ptr,
	.caption_major_type,	.caption_minor_type,	.caption_case,
	.caption_is_centered,	.caption_is_flush_right,.caption_is_run_in,
	.caption_is_bold,	.caption_is_underlined,.put_into_mem_file,
	.autosubtitle,		.brn_open,		.break_before_caption,
	.lines_between,		.new_page,		.startodd,
	.tocpage
	);
	END;

!+
! Post-processing after the header has been generated.
!-
    SELECT .handler OF
	SET

	[h_header_level] :
	    BEGIN
	    !
	    ! Turn fill on if AUTOJUST, else leave it the way it was.
	    !
	    sca_fill = (.gca_autojust OR .sca_fill);
	    !
	    ! Turn justify on if AUTOJUST, else leave it the way it was.
	    !
	    sca_justify = (.gca_autojust OR .sca_justify);
	    sca_crock   =  .gca_autojust;
	    END;

%IF DSRPLUS %THEN
	[h_header_exampl] : 0;
	[h_header_figure] : 0;
	[h_header_table]  : 0;
	[h_no_chapter]    : 0;
%FI	

	[h_appendix] : 0;
	[h_chapter]  : 0;

	TES;

    END;			! End of HEADER


%SBTTL 'SET_ECC -- set up OUTHDR formals from the ECC area'
ROUTINE set_ecc (handler, style_block) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	SET_ECC sets the values of the formal parameters in a call to OUTHDR:
!	the ones that are stored in the ECC (Entity Counter/Caption) area.
!
! FORMAL PARAMETERS:
!
!	handler -	Indicates what command is being processed.
!
!	style_block -	The address of that segment of the ECC blockvector
!			that will be used to update the OUTHDR formals.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:
!
!	The following module-level OWN variables, used as OUTHDR formals,
!	are updated:
!
!	lines_before,		lines_after,		test_page_amount,
!	counter_major_type,	counter_minor_type,
!	counter_value,		counter_display_code,	counter_spaces_after,
!	counter_pre_string_length,	counter_pre_string_ptr,
!	counter_post_string_length,	counter_post_string_ptr,
!	caption_major_type,	caption_minor_type,	caption_case,
!	caption_is_centered,	caption_is_flush_right,	caption_is_run_in,
!	caption_is_bold,	caption_is_underlined,	put_into_mem_file,
!	autosubtitle,		brn_open,		break_before_caption,
!	lines_between,		new_page,		startodd,
!	tocpage
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--
    
    BEGIN
    BIND
	sb = .style_block : $ecc_block;

    !
    ! Increment the entity counter.
    !
    sb [ecc$h_counter] = .sb [ecc$h_counter] + 1;
    lines_before =
       (IF  (.sb [ecc$h_before] GTR 0) AND (NOT .sca_sect_empty)
	THEN
	    (MAX (1, .sb [ecc$h_before] - (.sca_spacing - 1)))
	ELSE 0);

    lines_between = .sb [ecc$h_between];
    lines_after =
       (IF  .sb [ecc$h_after] GTR 0
	THEN
	    (MAX (1, .sb [ecc$h_after] - (.sca_spacing - 1)))
	ELSE 0);

    IF  (.handler EQL h_chapter) OR (.handler EQL h_appendix)
    THEN
	BEGIN
    	lines_before = .sb [ecc$h_before];
    	lines_after  = .sb [ecc$h_after];
	END;

    test_page_amount		= .sb [ecc$h_testpage];
    counter_value		= .sb [ecc$h_counter];
    counter_display_code	= .sb [ecc$h_display_desc];
    counter_spaces_after	= .sb [ecc$h_spaces];
    counter_pre_string_length	= .sb [ecc$h_pre_len];
    counter_pre_string_ptr	= .sb [ecc$a_pre_ptr];
    counter_post_string_length	= .sb [ecc$h_post_len];
    counter_post_string_ptr	= .sb [ecc$a_post_ptr];
    caption_case =
	(CASE .sb [ecc$h_case]
	 FROM ecc$k_leavecase TO ecc$k_allcap OF
	    SET
	    [ecc$k_leavecase] : leave_case;
	    [ecc$k_firstcap]  : first_caps;
	    [ecc$k_allcap]    : force_upper;
	    TES);

    caption_is_centered		= (.sb [ecc$h_position] eql ecc$k_center);
    caption_is_flush_right	= (.sb [ecc$h_position] eql ecc$k_right);
    break_before_caption	= .sb[ecc$v_break];
    tocpage			= .sb [ecc$v_tocpage];
    startodd			= .sb [ecc$v_startodd];
    new_page			= .sb [ecc$v_page];
    caption_is_run_in		= .sb [ecc$h_runin];
    caption_is_bold		= .sb [ecc$v_bold];
    caption_is_underlined	= .sb [ecc$v_underline];
    autosubtitle =
       (IF  .handler EQL h_header_level
	THEN
	    (.gca_autosubt GEQ .hllist [cl_index] AND .hct_subtitle)
	ELSE
	    FALSE);

    END;				! End of SET_ECC

END					! End of module
ELUDOM
