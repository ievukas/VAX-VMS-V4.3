	.TITLE	GET_KEY_NAME - Key translation utility procedures
	.IDENT	/V04-000/

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: DCL
;
; ABSTRACT:
;
;	Routines to:
;		Convert terminator sequences to key names
;		Validate a key name
;
; ENVIRONMENT: Runs at any access mode, AST Reentrant
;
; AUTHOR: Steven B. Lionel, CREATION DATE: 24-Feb-1983
;
; MODIFIED BY:
;
; 1-004 - HWS0079	Harold Schultz	05-Jul-1984
;	  Change order in KEY_NAME_LIST to fix HWS0060.
;
; 1-003 - HWS0060	Harold Schultz  18-Apr-1984
;	  Change the common key name for the left VT2xx key pad from
;	  FIND - NEXT_SCREEN to E1 - E6.	
;	
; 1-002 - SBL1002 	Steve Lionel	29-July-1983
;	  Add E1 - E6 as synonyms for editing keys.
;
; 1-001	- Original. SBL 24-Feb-1983
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
	$SMGDEF			; Get terminator codes
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL		; Force all external symbols to be declared
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;

	K_CTRLZ = 26
	K_ESC = 27
	K_SS3 = 143
	K_CSI = 155

;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;

	.PSECT _SMG$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	Terminator definitions

;+
; Define macros for table generation
;-

	.MACRO	TERM1 SEQ, NAME
	.ASCII	SEQ
	.BYTE	SMG$K_TRM_'NAME'-128
	.ENDM

	.MACRO	TERM2 SEQ, NAME
	.ASCII	SEQ
	.ASCII	"~"
	.BYTE	SMG$K_TRM_'NAME'-128
	.ENDM

	.MACRO	TERM3 SEQ, NAME
	.ASCII	SEQ
	.ASCII	"~"
	.BYTE	0
	.BYTE	SMG$K_TRM_'NAME'-128
	.ENDM

;+
; Terminators of the form <ESC>x
;-

ESC_1BYTE:
	TERM1	"A", UP
	TERM1	"B", DOWN
	TERM1	"C", RIGHT
	TERM1	"D", LEFT
	TERM1	"P", PF1
	TERM1	"Q", PF2
	TERM1	"R", PF3
	TERM1	"S", PF4
	.BYTE	0

;+
; Terminators of the form <CSI>x or <SS3>x
;-

CSI_1BYTE:
	TERM1	"A", UP
	TERM1	"B", DOWN
	TERM1	"C", RIGHT
	TERM1	"D", LEFT
	TERM1	"M", ENTER
	TERM1	"P", PF1
	TERM1	"Q", PF2
	TERM1	"R", PF3
	TERM1	"S", PF4
	TERM1	"l", COMMA
	TERM1	"m", MINUS
	TERM1	"n", PERIOD
	TERM1	"p", KP0
	TERM1	"q", KP1
	TERM1	"r", KP2
	TERM1	"s", KP3
	TERM1	"t", KP4
	TERM1	"u", KP5
	TERM1	"v", KP6
	TERM1	"w", KP7
	TERM1	"x", KP8
	TERM1	"y", KP9
	.BYTE	0

;+
; Terminators of the form <CSI>n~
;-

CSI_2BYTE:
	TERM2	"1", E1
	TERM2	"2", E2
	TERM2	"3", E3
	TERM2	"4", E4
	TERM2	"5", E5
	TERM2	"6", E6
	.WORD	0

;+
; Terminators of the form <CSI>nn~
;-

CSI_3BYTE:
	TERM3	"17", F6
	TERM3	"18", F7
	TERM3	"19", F8
	TERM3	"20", F9
	TERM3	"21", F10
	TERM3	"23", F11
	TERM3	"24", F12
	TERM3	"25", F13
	TERM3	"26", F14
	TERM3	"28", HELP
	TERM3	"29", DO
	TERM3	"31", F17
	TERM3	"32", F18
	TERM3	"33", F19
	TERM3	"34", F20
NULL:	.LONG	0		; End of list


	.SBTTL	GET_KEY_NAME - Translate terminator to key name
;++
; FUNCTIONAL DESCRIPTION:
;
;	GET_KEY_NAME translates a terminator sequence to a key name.
;
; CALLING SEQUENCE:
;
;	ret_status = GET_KEY_NAME (terminator.rt.r, term_length.rl.v,
;			key_name_addr.wa.r)
;
; FORMAL PARAMETERS:
;
	terminator = 4		; The terminator string, passed by reference.

	term_length = 8		; The length of the terminator string, passed
				; by immediate value.

	key_name_addr = 12	; A longword into which is placed the address
				; of a counted ASCII string containing the
				; key name.  If no key is found, a pointer
				; to an empty string is stored.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION STATUS: 
;
;	1 - Translation successful
;	0 - Translation unsuccessful
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	GET_KEY_NAME, ^M<R2,R3>

	MOVQ	terminator(AP), R2	; Get terminator address and length
					; into R2 and R3
	SUBL3	#2, R3, R0		; Is length within bounds?
	BLSS	NOTRANS			; If not, no translation
	CMPL	R0, #3			; Must be between 2 and 5 chars
	BGTRU	NOTRANS			; No translation

	MOVZBL	(R2)+, R1		; Get first character
	CMPB	R1, #K_ESC		; Is the first character <ESC>?
	BNEQ	NOT_ESC			; Skip if not
	DECL	R3			; Look at next character
	MOVZBL	(R2)+, R1		;
	CMPB	R1, #^A/[/		; <ESC>[ is the same as <CSI>
	BEQL	USE_CSI			; Skip if it is
	CMPB	R1, #^A/O/		; <ESC>O is the same as <SS3>
	BEQL	USE_SS3			; Skip if it is
	CMPB	R1, #^A/?/		; <ESC>? is <SS3> on VT52s
	BEQL	USE_SS3			; Skip if it is

;+
; We get here if the character following <ESC> does not make it <CSI>
; or <SS3>.  It must then be a single character to look up in ESC_1BYTE.
;-

	DECL	R3			; Look at next character
	BNEQ	NOTRANS			; If not now zero, no translation
	MOVAB	W^ESC_1BYTE, R0		; Get table address
	MOVL	R1, R2			; Load R2 with character
	BRB	SEARCH_1BYTE		; Skip to table search code

;+
; We get here if the first character was not <ESC>.  Check for <CSI> or <SS3>.
;-

NOT_ESC:
	CMPB	R1, #K_CSI		; Is it <CSI>?
	BEQL	USE_CSI			; Skip if it is
	CMPB	R1, #K_SS3		; Is it <SS3>?
	BEQL	USE_SS3			; Skip if it is

;+
; We get here if the terminator has no translation
;-

NOTRANS:
	MOVAB	B^NULL, @key_name_addr(AP) ; Return address of null string
	CLRL	R0			; Return failure
	RET				; 

;+
; The terminator starts with <SS3>.
;-

USE_SS3:
	CMPL	R3, #2			; There must be only 1 character
					; following <SS3>.
	BNEQ	NOTRANS			; No translation if not 1 character
	MOVAB	W^CSI_1BYTE, R0		; Use same table as <CSI>.
	MOVZBL	(R2), R2		; Load R2 with character
	BRB	SEARCH_1BYTE		; Use next byte only
	
;+
; The terminator starts with <CSI>.
;-

USE_CSI:
	CMPL	R3, #3			; Are there 1, 2 or >=3 characters
					; after <CSI>? 
	BGTR	SEARCH_3BYTE		; >=3 more bytes
	BEQL	SEARCH_2BYTE		; 2 more bytes
	MOVAB	W^CSI_1BYTE, R0		; 1 more byte
	MOVZBL	(R2), R2		; Load R2 with character

;+
; Use only the next byte to determine the key.  R0 has been loaded with the
; table address and R2 is the byte to look at.
;-

SEARCH_1BYTE:
	MOVZBL	(R0)+, R1		; Get byte to compare against
	BEQL	NOTRANS			; End of table?
	CMPB	R1, R2			; Compare character
	BEQL	FOUND			; End if found
	INCL	R0			; Skip over key code
	BRB	SEARCH_1BYTE		; Repeat until found or table end

;+
; Use the next two bytes to determine the key.  (R2) is the word to look at.
;-

SEARCH_2BYTE:
	MOVAB	W^CSI_2BYTE, R0		; Get table address
	MOVZWL	(R2), R2		; Get two bytes from terminator
10$:	MOVZWL	(R0)+, R1		; Get two bytes to compare against
	BEQL	NOTRANS			; End of table?
	CMPW	R1, R2			; Compare characters
	BEQL	FOUND			; End if found
	INCL	R0			; Skip over key code
	BRB	10$			; Repeat until found or table end

;+
; Use the next two bytes to determine the key.  (R2) starts the bytes
; to look at.  Note that table CSI_3BYTE uses longword entries with the
; high byte zero.
;-

SEARCH_3BYTE:
	CMPL	R3, #4			; More than 3 bytes after <CSI>?
	BGTR	NOTRANS			; No translation if so
	MOVAB	W^CSI_3BYTE, R0		; Get table address
	EXTZV	#0, #24, (R2), R2	; Get next three bytes
10$:	MOVL	(R0)+, R1		; Get four bytes to compare against
	BEQL	15$			; End of table?
	CMPL	R1, R2			; Compare characters
	BEQL	FOUND			; End if found
	INCL	R0			; Skip over key code
	BRB	10$			; Repeat until found or table end

15$:	BRW	NOTRANS

;+
; Translation found.  Find the name of this key and return success.
;-
	
FOUND:
	LOCC	(R0), #KEY_NAME_LIST_LEN, B^KEY_NAME_LIST ; Find key name
	MOVAB	1(R1), @key_name_addr(AP)	; Store key name address
	MOVL	#1, R0		; Return success
	RET

	.SBTTL	List of key names

;+
; KEY_NAME_LIST is a list of all possible key names whose codes are in
; the range 256-383.  This excludes control keys.
; The format of this list is:
;
;		key_code-128	- 1 byte
;		ASCIC key name  - n bytes
;
; This format depends on knowing that no key names with codes higher than
; 383 are defined, that no character between 128 and 255 can
; appear in key names, and that the maximum length of a key name is <32.
;
; This list is used in two ways:
;   1.  To look up a key name (either to see if it is valid or to
;	get the corresponding code), do a MATCHC of the ASCIC key name
;	into KEY_NAME_LIST.  The byte preceding the found entry is the
;	key code minus 128.
;
;   2.  To convert a key code into a name, do a LOCC of the key code into
;	KEY_NAME_LIST.  The ASCIC key name follows the found entry.
;-

;+
; Create macro to add an entry to the list.
;-

	.MACRO	KEY_ENTRY NAME
	.BYTE	<SMG$K_TRM_'NAME' - 128>
	.ASCIC	/NAME/
	.ENDM

KEY_NAME_LIST:
	KEY_ENTRY PF1
	KEY_ENTRY PF2
	KEY_ENTRY PF3
	KEY_ENTRY PF4
	KEY_ENTRY KP0
	KEY_ENTRY KP1
	KEY_ENTRY KP2
	KEY_ENTRY KP3
	KEY_ENTRY KP4
	KEY_ENTRY KP5
	KEY_ENTRY KP6
	KEY_ENTRY KP7
	KEY_ENTRY KP8
	KEY_ENTRY KP9
	KEY_ENTRY ENTER
	KEY_ENTRY MINUS
	KEY_ENTRY COMMA
	KEY_ENTRY PERIOD
	KEY_ENTRY UP
	KEY_ENTRY DOWN
	KEY_ENTRY LEFT
	KEY_ENTRY RIGHT
	KEY_ENTRY F6
	KEY_ENTRY F7
	KEY_ENTRY F8
	KEY_ENTRY F9
	KEY_ENTRY F10
	KEY_ENTRY F11
	KEY_ENTRY F12
	KEY_ENTRY F13
	KEY_ENTRY F14
	KEY_ENTRY HELP
	KEY_ENTRY DO
	KEY_ENTRY F17
	KEY_ENTRY F18
	KEY_ENTRY F19
	KEY_ENTRY F20
	KEY_ENTRY E1
	KEY_ENTRY E2
	KEY_ENTRY E3
	KEY_ENTRY E4
	KEY_ENTRY E5
	KEY_ENTRY E6
	KEY_ENTRY FIND
	KEY_ENTRY INSERT_HERE
	KEY_ENTRY REMOVE
	KEY_ENTRY SELECT
	KEY_ENTRY PREV_SCREEN
	KEY_ENTRY NEXT_SCREEN

KEY_NAME_LIST_LEN = .-KEY_NAME_LIST


	.SBTTL	VALIDATE_KEY_NAME - See if key name is valid
;++
; FUNCTIONAL DESCRIPTION:
;
;	VALIDATE_KEY_NAME verifies a key name to see if it is valid.
;
; CALLING SEQUENCE:
;
;	ret_status.wlc.v = VALIDATE_KEY_NAME (key_name.rt.ds)
;
;
; FORMAL PARAMETERS:
;
	key_name = 4	; The descriptor of a string
			; containing the name of the key to look up.  It
			; is assumed that the string has been upcased and
			; stripped of trailing blanks.

; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION STATUS: 
;
;	1 - Key found
;	0 - Key not found
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	VALIDATE_KEY_NAME , ^M<R2,R3,R4,R5>
	MOVQ	@key_name(AP), R0	; Get descriptor into R0-R1
	MOVZWL	R0, R0			; Make length a longword
	BEQL	10$			; Exit if zero length
	CMPL	R0, #31			; Exceeds maximum key name length?
	BGTRU	10$			; If so, exit woth failure
	SUBL2	R0, SP			; Create space for key name on stack
	MOVB	R0, -(SP)		; Move length
	MOVC3	R0, (R1), 1(SP)		; Move key name
	SUBL3	SP, FP, R0		; Get string length in R0
	MATCHC	R0, (SP), #KEY_NAME_LIST_LEN, W^KEY_NAME_LIST
					; Look up key name
	BNEQ	10$			; Skip if not found
	MOVL	#1, R0			; Return success
	RET
10$:	CLRL	R0			; Return failure
	RET

	.END				; End of module GET_KEY_NAME
