MODULE UNPUS (
		IDENT = 'V04-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Takes the contents of MRA as described by TSF and translates
!	    it into an equivalent .INDEX or .SEND TOC command.
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: February, 1979
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	006	KFA00006	Ken Alden	5-Apr-1983
!		Added support for SEND CONTENTS.
!
!	005	KAD00005	Keith Dawson	22-Mar-1983
!		Added support for non-STREAM output (for LN01, VT100) --
!		  call to macro OP_DEV_WRITE_OUTPUt_line instead of to
!		  clh (clh_write_output).
!
!	004	KAD00004	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!
EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!
EXTERNAL
    FLGT : FLAG_TABLE,
    FRA : FIXED_STRING,
    GCA : GCA_DEFINITION,
    MRA : REF FIXED_STRING,
    TSF : TSF_DEFINITION;

EXTERNAL ROUTINE
    CLH;

GLOBAL ROUTINE UNPUS (TOC) : NOVALUE =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	UNPUS untranslates the results of a .INDEX command or
!	INDEX flag, and puts the result into the output file.
!
! FORMAL PARAMETERS:
!
!	If TOC is true, what is to be regurgitated is a .SEND TOC 
!	or a .SEND CON(tents) command, depending on the TSF_MAJOR.
!	Otherwise, its an indexing command.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:	None
!
!--

    BEGIN
    LOCAL
	mark,
	ptr;

    fs_init (fra);				!Initialize FRA.

    ptr = .fs_start(mra);

    !Generate either .SEND TOC, or .INDEX / .ENTRY
    !or .XPLUS / .YPLUS.
    IF .toc
    THEN
    	BEGIN
    	IF .tsf_major EQL maj_send
    	THEN
    	    mark = CH$PTR ( UPLIT('.SEND TOC '))
%IF DSRPLUS %THEN
    	ELSE
    	    mark = CH$PTR ( UPLIT('.SEND CONT'))
%FI	;
    	END
    ELSE
	IF .tsf_first_xtn NEQ 0
	THEN
%IF DSRPLUS %THEN
	    IF .tsf_xyplus
	    THEN
		mark = CH$PTR ( UPLIT('.XPLUS    '))
	    ELSE
%FI
		mark = CH$PTR ( UPLIT('.INDEX    '))
	!
	ELSE
%IF DSRPLUS %THEN
	    IF .tsf_xyplus
	    THEN
		mark = CH$PTR ( UPLIT('.YPLUS    '))
	    ELSE
%FI
		mark = CH$PTR ( UPLIT('.ENTRY    '));

    INCR i FROM 1 TO 10 DO
	FS_WCHAR (fra, CH$RCHAR_A (mark) );
	FS_WCHAR (fra, %C' ');

    !Scan the text, untranslating escape codes, etc. back to RUNOFF flags.
    INCR i FROM 1 TO .tsf_int_hl DO
	BEGIN
	LOCAL
	    khar;

	khar = CH$RCHAR_A (ptr);

	IF .khar EQL rintes
	THEN
	!Untranslate special function
	    BEGIN
	    LOCAL
		function_code,
		operand;

	    function_code = CH$RCHAR_A (ptr);
	    operand = CH$RCHAR_A (ptr);
	    i = .i + 2;

	    SELECTONE .function_code OF
		SET
		[%C'B'] :
		    !Bolded character.
		    fs_wchar (fra, .flgt [bld_flag, flag_character]);

		[%C'U'] :
		    !Underlined character.
		    fs_wchar (fra, .flgt [und_flag, flag_character]);

		[%C'O'] :
		    BEGIN
		    !An overstruck character.
		    !NOTE: Order is the reverse of what user specified.
		    fs_wchar (fra, .operand);
		    fs_wchar (fra, .flgt [ovr_flag, flag_character]);
		    END;
		
		[%C'J'] :
		    !A word mark.  For indexing commands, this
		    !starts a new sub-indexing level.
		    fs_wchar (fra, .flgt [sbx_flag, flag_character]);

%IF DSRPLUS %THEN
		[%C'P'] :
		    !Non-permuted word.
		    fs_wchar (fra, .flgt [npx_flag, flag_character]);
%FI
		[OTHERWISE] :
		    !Unknown/unsupported special function
		    fs_wchar (fra, %c'?');

		TES;
	    END
	ELSE
	!Some normal character
	    BEGIN
	    !Normal characters go out as themselves.  Control characters
	    !are translated to something else.
	    IF (.khar GEQ %C' ')
		AND (.khar LEQ %O'176')
	    THEN
	    !Output a normal character
		fs_wchar (fra, .khar)
	    ELSE
	    !Translate and output a control character.
	    !NOTE: DEL (Octal 177) and NUL (Octal 0) have the same result.
		BEGIN
		fs_wchar (fra, %c'^');
		fs_wchar (fra, %c'@'+.khar);
		END;
	    END;
	END;

	op_dev_write_output_line;		!Write result to document.

    END;					!End of UNPUS

END						!End of module
ELUDOM
