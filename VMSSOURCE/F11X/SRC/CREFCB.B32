MODULE CREFCB (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	These routines create and initialize a file control block
!	from the given file header.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines. These routines must be called in
!	kernel mode.

!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  14-Dec-1976  16:48
!
! MODIFIED BY:
!
!	V03-008	CDS0004		Christian D. Saether	30-Aug-1984
!		Add optional PRIMFCB argument to CREATE_FCB routine.
!
!	V03-007	CDS0003		Christian D. Saether	14-Aug-1984
!		Have REBLD_PRIM_FCB routine mark windows incomplete.
!
!	V03-006	CDS0002		Christian D. Saether	 1-Aug-1984
!		Add REBLD_PRIM_FCB routine.
!
!	V03-005	LMP0275		L. Mark Pilant,		12-Jul-1984  14:42
!		Initialize the ACL info in the ORB to be a null descriptor
!		list rather than an empty queue.  This avoids the overhead
!		of locking and unlocking the ACL mutex, only to find out
!		that the ACL was empty.
!
!	V03-004	LMP0221		L. Mark Pilant,		3-Apr-1984  9:16
!		Add support for an ORB in the FCB.
!
!	V03-003	CDS0001		Christian D. Saether	29-Dec-1983
!		Use L_NORM linkage and BIND_COMMON macro.
!
!	V03-002	LMP0059		L. Mark Pilant,		27-Dec-1982  9:06
!		Make FCB handling consistant with file header existance.
!
!	V03-001	LMP0036		L. Mark Pilant,		29-Jul-1982  13:15
!		Set up the initial ACL segment queue.
!
!	V02-003	ACG0241		Andrew C. Goldstein,	11-Dec-1981  23:01
!		Use common code in INIFC2 to set up FCB
!
!	V02-002	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	CREATE_FCB	: L_NORM,	! create a file ontrol block
	UPDATE_FCB	: L_NORM NOVALUE; ! update contents of primary FCB

GLOBAL ROUTINE CREATE_FCB (HEADER, PRIMFCB) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine creates an FCB and initializes it according to
!	the given file header.
!
! CALLING SEQUENCE:
!	CREATE_FCB (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of file header
!	ARG2: optional arg to specify primary fcb
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	ADDRESS OF FCB
!
! SIDE EFFECTS:
!	FCB created and initialized
!
!--

BEGIN

MAP
	HEADER		: REF BBLOCK;	! file header argument

LOCAL
	FCB		: REF BBLOCK,	! address of FCB created
	FCB_ORB		: REF BBLOCK;	! address of ORB created

BIND_COMMON;

EXTERNAL ROUTINE
	ALLOCATE	: L_NORM,	! allocate dynamic memory
	INIT_FCB2	: L_NORM;	! initialize contents of FCB

! Allocate an FCB sized and typed block. Then use the common routine
! to init it.
!

FCB = ALLOCATE (FCB$C_LENGTH, FCB_TYPE);
FCB[FCB$L_WLFL] = FCB[FCB$L_WLFL];
FCB[FCB$L_WLBL] = FCB[FCB$L_WLFL];
FCB[FCB$L_STVBN] = 1;			! init start VBN to 1

! Now for the ORB initialzation.

FCB_ORB = FCB[FCB$R_ORB];
FCB_ORB[ORB$W_SIZE] = ORB$C_LENGTH;
FCB_ORB[ORB$B_TYPE] = DYN$C_ORB;

! Common initialization.

IF ACTUALCOUNT EQL 2
THEN
    INIT_FCB2 (.FCB, .HEADER, .PRIMFCB)
ELSE
    INIT_FCB2 (.FCB, .HEADER);

INSQUE (.FCB, .CURRENT_VCB[VCB$L_FCBBL]);	! Link into queue

RETURN .FCB;

END;					! end of routine CREATE_FCB

GLOBAL ROUTINE UPDATE_FCB (HEADER) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine updates the file attributes of the file's primary FCB,
!	if any, with the file attributes of the given header. The file size
!	is preserved.
!
!
! CALLING SEQUENCE:
!	UPDATE_FCB (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of file header
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	PRIMARY_FCB: address of file FCB or 0
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCB is updated if it exists
!
!--

BEGIN

MAP
	HEADER		: REF BBLOCK;	! file header arg

BIND_COMMON;

EXTERNAL ROUTINE
	FILL_FCB	: L_NORM;	! fill in FCB from header

! All we do is call the common routine for the primary FCB.
!

IF .PRIMARY_FCB NEQ 0
THEN
    BEGIN
    CLEANUP_FLAGS[CLF_NOBUILD] = 1;
    FILL_FCB (.PRIMARY_FCB, .HEADER);
    END;

END;					! end of routine UPDATE_FCB


GLOBAL ROUTINE REBLD_PRIM_FCB (PFCB, HEADER) : L_NORM NOVALUE =

!++
!
! Functional Description:
!
! This routines removes ACL's, if any, and deletes the extension
! FCB chain, if any.
! The access lock is rearmed if the fcb is stale.
! It then rebuilds the fcb from the header, if present.
!
!--

BEGIN

MAP
	PFCB	: REF BBLOCK,
	HEADER	: REF BBLOCK;

BIND_COMMON;

EXTERNAL ROUTINE
	ACL_DELETEACL,
	CONV_ACCLOCK	: L_NORM,
	DEL_EXTFCB	: L_NORM NOVALUE,
	INIT_FCB2	: L_NORM NOVALUE,
	MARK_INCOMPLETE	: L_NORM NOVALUE;

IF .BBLOCK [PFCB [FCB$R_ORB], ORB$V_ACL_QUEUE]
THEN
    ACL_DELETEACL (PFCB [FCB$L_ACLFL], 0);

DEL_EXTFCB (.PFCB);

IF TESTBITSC (PFCB [FCB$V_STALE])
THEN
    IF NOT CONV_ACCLOCK (.PFCB [FCB$B_ACCLKMODE], .PFCB)
    THEN
	BUG_CHECK (XQPERR, 'unexpected lock manager reaction');

IF .HEADER EQL 0
THEN
    RETURN;

INIT_FCB2 (.PFCB, .HEADER);

MARK_INCOMPLETE (.PFCB);

END;			! of routine REBLD_PRIM_FCB

END
ELUDOM
