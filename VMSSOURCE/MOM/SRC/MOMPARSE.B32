
%TITLE 'Maintenance Operations NPARSE action routines for parsing parameters'
MODULE MOMPARSE (
			LANGUAGE (BLISS32),
			ADDRESSING_MODE (NONEXTERNAL=GENERAL),
			ADDRESSING_MODE (EXTERNAL=GENERAL),
			IDENT = 'V04-000'
			) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
!
! ABSTRACT:
!    This module contains action routines called by NPARSE to parse and
!    store NICE entity parameters.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Kathy Perko
!
! CREATION DATE:  2-Jan-1983
!
! MODIFIED BY:
!	V03-005	MKP0005		Kathy Perko		13-July-1984
!		Change NODE SERVICE PASSWORD from an H-8 field to an HI-8
!		field.  The architecture conflicts with itself about it.
!
!	V03-004	MKP0004		Kathy Perko		6-June-1984
!		Don't apply area 1 fix to exec.
!
!	V03-003	MKP0003		Kathy Perko		1-May-1984
!		Check for correct loop assistant parameter ID in LOOP
!		CIRCUIT parameter consistency check.
!
!	V03-002	MKP0002		Kathy Perko		28-Mar-1984
!		Fix area 1 problem.
!
!	V03-001	MKP0001		Kathy Perko		29-Jan-1984
!		Do some cross checking on LOOP CIRCUIT parameters.
!		Add a routine to check for loopback assist request messages,
!		and a routine to use the MOP message software ID field as
!		a load file ID.
!
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    mom$parse_nice_entity,
    mom$parse_function,
    mom$parse_option,
    mom$parse_entity_id,
    mom$save_param,
    mom$save_node_id,
    mom$check_node_entity,
    mom$check_loop_params,
    mom$mop_chk_loop_assist,
    mom$save_mop_msg,
    mom$save_load_file_id,
    mom_fix_node_num:	NOVALUE,
    mom$parse_error:	NOVALUE,
    mom$prsmoperr;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:MOMLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EXTERNAL REFERENCES:
!

$mom_externals;			! Macro with common MOM externals.

EXTERNAL LITERAL
    mom$_badmopfct;

EXTERNAL
    mom$npa_init,		! Nparse table for NICE message entities.
    mom$ab_ncp_version;

EXTERNAL ROUTINE
    nma$nparse,
    mom$build_p2,
    mom$netacp_qio,
    mom$error;

%SBTTL 'mom$parse_nice_entity  Initial message parsing routine'
GLOBAL ROUTINE mom$parse_nice_entity =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine invokes the NPARSE facility to check the funcition,
!	option, and entity codes in a NICE request received from NCP.
!
! IMPLICIT OUTPUTS:
!
!	MOM$GB_FUNCTION contains the function code.
!	MOM$GB_OPTION_BYTE  contains the option codes.
!	MOM$GL_ENTITY_CODE  contains the entity code.
!	MOM$AB_NPARSE_BLK contains parsing information about the remainder
!		of the message.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	If the parse fails then the error is signalled, and a NICE error
!	response is built with the error specified by the parse state
!	table. Otherwise success is returned.
!
!--

BEGIN

LOCAL
    status;				! Temporary status
!
! Initialize message parsing data
!
mom$gl_service_flags = 0;		! Clear internal options flags
!
! Initialize the NPARSE argument block with the address and length
! of the NICE message to be parsed.  Then call the NPARSE facility
! to parse the function, option, and entity fields of the message.
!
mom$ab_nparse_blk [npa$l_msgptr] = mom$ab_nice_rcv_buf; 
mom$ab_nparse_blk [npa$l_msgcnt] = .mom$gl_nice_rcv_msg_len;

nma$nparse (mom$ab_nparse_blk, mom$npa_init);
!
! If control returns here, the message parsed correctly.  Otherwise,
! an error was signalled and an error response returned to NCP via
! NML.
!
RETURN success

END;				! End of MOM$PARSE_NICE_ENTITY

%SBTTL 'mom$parse_function  Store function code (action routine)'
GLOBAL ROUTINE mom$parse_function =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Parse and store the function code from the NICE command message.
!
! IMPLICIT OUTPUTS:
!
!	MOM$GB_FUNCTION contains the function code.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (SS$_NORMAL).
!
!--

BEGIN

$npa_argdef;			! Define NPARSE block reference

mom$gb_function = .nparse_block [npa$b_byte]; ! Set function

RETURN ss$_normal

END;				! End of MOM$PARSE_FUNCTION

%SBTTL 'mom$parse_option  Store NICE message option byte (action routine)'
GLOBAL ROUTINE mom$parse_option =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine is a NPARSE action routine that is called while
!	parsing a NICE message.  It saves the option byte in a global
!	field.
!
! IMPLICIT INPUTS:
!	NPARSE_BLOCK [NPA$B_BYTE] contains the option byte.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Success (SS$_NORMAL) is always returned.
!
!--

BEGIN

$npa_argdef;			! Define NPARSE block reference
!
! Save the entity code from the NPARSE argument block
!
mom$gb_option_byte = .nparse_block [npa$b_byte];

RETURN ss$_normal

END;				! End of MOM$PARSE_OPTION

%SBTTL 'mom$parse_entity_id  Parse the service id'
GLOBAL ROUTINE mom$parse_entity_id =
 
!++
! FUNCTIONAL DESCRIPTION:
!	Parse the service id code from the MOP message or NICE command.
!
! IMPLICIT INPUTS:
!	NPARSE_BLOCK [NPA$L_PARAM] contains the MOM internal entity code
!		(MOM$C_CIRCUIT, MOM$C_LINE, MOM$C_NODE, or MOM$C_NODEBYNAME).
!
! OUTPUTS:
!	MOM$AB_ENTITY_BUF contains the entity ID
!	MOM$GQ_ENTITY_BUF_DSC contains a descriptor of the entity ID in
!		MOM$AB_ENTITY_BUF.
!	MOM$GB_ENTITY_CODE contains the MOM internal code for the entity.
!--
 
BEGIN

$npa_argdef;

LOCAL
    adr,
    ent,
    len,
    svd_index;

ent = .nparse_block [npa$l_param];
!
! Select parse table according to entity code.
!
SELECTU .ent OF
    SET

    [mom$c_node]:
	BEGIN
	MAP
	    adr: REF BBLOCK;
	len = 2;
	adr = .nparse_block [npa$l_fldptr];
	svd_index = svd$gk_pcno_add;
	!
	! If the node area is 0 and it's not a Phase III (or less) NCP,
	! change to area 1.
	!
	mom_fix_node_num (.adr);
	END;

    [mom$c_line, mom$c_nodebyname]:
	BEGIN
	len = .(.nparse_block [npa$l_fldptr])<0,8>;
	adr = .nparse_block [npa$l_fldptr] + 1;
	IF .ent EQL mom$c_line THEN
	    svd_index = svd$gk_pcno_sli
	ELSE
	    svd_index = svd$gk_pcno_nna;
	END;

    [mom$c_circuit]:
	BEGIN
	len = .(.nparse_block [npa$l_fldptr])<0,8>;
	adr = .nparse_block [npa$l_fldptr] + 1;
	svd_index = svd$gk_pcno_sli;
	END;

    [ALWAYS]:
	BEGIN
	CH$MOVE (.len, .adr, mom$ab_entity_buf);
	mom$gq_entity_buf_dsc [0] = .len;
	!
	! Put the entity ID into the Service Data Table so it will
	! override the value returned from the volatile database.
	!
	mom$ab_service_data [.svd_index, svd$b_string_len] = .len;
	CH$MOVE (.len,
		 .adr,
		mom$ab_service_data [.svd_index, svd$t_string]);
	mom$ab_service_data [.svd_index, svd$v_msg_param] = true;
	END;

    TES;
!
! Save the entity code.
!
mom$gb_entity_code = .ent;

RETURN ss$_normal

END;				! End of mom$parse_entity_id


%SBTTL 'mom$save_param  Save NICE parameter value'
GLOBAL ROUTINE mom$save_param =

!++
! FUNCTIONAL DESCRIPTION:
!	This is an NPARSE action routine that is called while parsing
!	a NICE message from NCP or a MOP message from the target node.
!	It saves a parameter in the Service Data Table and sets a flag
!	to indicate that the parameter from the volatile database is
!	not to be used for this operation (since one was supplied in
!	the NICE or MOP message).
!
! IMPLICIT INPUTS:
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!	MOM$GL_SVD_INDEX contains the index into the Service Data table
!	    (MOM$AB_SERVICE_DATA).
!
! IMPLICIT OUTPUTS:
!	The parameter value or string is inserted into the Service Data Table.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Always returns SS$_NORMAL.
!
!--

BEGIN

$npa_argdef;			! Define NPARSE block reference

LOCAL
    svd_index,			! Index into this parameter's entry in
				!	the Service Data table.
    msgsize,			! Resultant message size
    len,
    ptr;			! Temporary parameter pointer
!
! Add descriptor entry for this parameter.
!
len = .nparse_block [npa$l_fldcnt];
ptr = .nparse_block [npa$l_fldptr];
!
! If the NPARSE tables specified a parameter, then it is the SVD (Service
! Data table) index.  This is true only when parsing MOP messages.  When
! parsing NICE messages, the SVD index must be saved when the parameter
! ID is parsed; this routine is not called until parsing reaches the
! parameter value.
!
IF .nparse_block [npa$l_param] NEQ 0 THEN
    svd_index = .nparse_block [npa$l_param]
ELSE
    svd_index = .mom$gl_svd_index;
!
! Save the parameter in the Service Data Table.
!
IF .mom$ab_service_data [.svd_index, svd$b_nice_type]
						EQL svd$k_string THEN
    BEGIN
    len = .len - 1;
    CH$MOVE (.len, (.ptr + 1), mom$ab_service_data [.svd_index, svd$t_string]);
    mom$ab_service_data [.svd_index, svd$b_string_len] = .len;
    mom$ab_service_data [.svd_index, svd$v_msg_param] = true;
    END
ELSE
    BEGIN
    !
    ! Save the parameter value.
    !
    CH$COPY (.len,
	     .ptr,
	     0,
	     4,
	     mom$ab_service_data [.svd_index, svd$l_param]);
    mom$ab_service_data [.svd_index, svd$v_msg_param] = true;
    END;
!
! Clear SVD index because the parsing routines think they are simply
! setting a bit when they put the index into this variable.
!
mom$gl_svd_index = 0;

RETURN ss$_normal

END;				! End of MOM$SAVE_PARAM

%SBTTL 'mom$save_node_id	Save node id'
GLOBAL ROUTINE mom$save_node_id =

!++
! FUNCTIONAL DESCRIPTION:
!	This is an NPARSE action that saves a node id passed in
!	a LOAD, TRIGGER, or LOOP command.
!
! IMPLICIT INPUTS:
!	NPARSE_BLOCK [NPA$L_FLDPTR] contains the pointer to the entity
!	    format code and id string.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Always returns success (SS$_NORMAL).
!
!--

BEGIN

$npa_argdef;			! Define NPARSE block reference

LOCAL
    node_addr_svd,
    node_name_svd,
    length,
    addr;
!
! The LOAD HOST parameter is a word rather than a node id (for which
! the node address is preceded by a byte of 0).
!
IF .nparse_block [npa$l_param] EQL mom$c_node_addr_param THEN
    BEGIN
    length = 0;
    addr = .nparse_block [npa$l_fldptr];
    END
ELSE
    BEGIN
    !
    ! Get length and address of node id string.
    !
    length = .(.nparse_block [npa$l_fldptr])<0,8>; ! Get length
    addr = .nparse_block [npa$l_fldptr] + 1;
    END;
SELECTONEU .mom$gl_svd_index OF
    SET
    [svd$gk_pcno_iho]:
	BEGIN
	node_addr_svd = svd$gk_pcno_iho;
	node_name_svd = svd$gk_pcno_$hna;
	END;
    [svd$gk_pcno_lpn]:
	BEGIN
	node_addr_svd = svd$gk_pcno_lpn;
	node_name_svd = svd$gk_pcno_$lna;
	END;
    [svd$gk_pcno_lan]:
	BEGIN
	node_addr_svd = svd$gk_pcno_lan;
	node_name_svd = svd$gk_pcno_$lnn;
	END;
    TES;
!
! If length is zero then id is a node address, otherwise it is a
! node name string.
!
IF .length EQL 0 THEN
    !
    ! Save the node address.
    !
    BEGIN
    BIND
	node_addr = mom$ab_service_data [.node_addr_svd, svd$l_param] :
		BBLOCK;
    mom$ab_service_data [.node_addr_svd, svd$l_param] = .(.addr)<0,16>;
    mom$ab_service_data [.node_addr_svd, svd$v_msg_param] = true;
    !
    ! If the node area is 0 and it's not a Phase III (or less) NCP,
    ! change to area 1.
    !
    mom_fix_node_num (node_addr);
    END
ELSE
    !
    ! If it's a node name, save it and get the node address from the
    ! volatile database.
    !
    BEGIN
    mom$ab_service_data [.node_name_svd, svd$b_string_len] = .length;
    CH$MOVE (.length, .addr,
	     mom$ab_service_data [.node_name_svd, svd$t_string]);
    mom$ab_service_data [.node_name_svd, svd$v_msg_param] = true;
    END;

mom$gl_svd_index = 0;			! Reset parameter code

RETURN ss$_normal

END;				! End of mom$save_node_id

%SBTTL	'mom$check_node_entity		Verify a node request'
GLOBAL ROUTINE	mom$check_node_entity =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an NPARSE action routine that verifies the requested
!	service request (LOAD/TRIGGER/DUMP) is a node request and
!	not a circuit request.  The routine is called whenever a
!	service request containing a service circuit is received.
!
! IMPLICIT INPUTS:
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter
!	data.
!
!	MOM$GB_ENTITY_CODE contains the entity code which indicates if a
!		circuit or node request.
!
! ROUTINE VALUE:
! COMPLETION CODE:
!	If request is a node request SUCCESS is returned.
!	Otherwise a parameter not applicable error (NMA$C_STS_PNA) will
!	be signalled.
!
! SIDE EFFECTS:
!	If error then message is signalled.
!
!--
BEGIN

$npa_argdef;			! Define NPARSE block reference
!
! Verify that request is not a circuit request (node request).
! Signal errror if circuit request.
!
IF .mom$gb_entity_code NEQ mom$c_node AND
   .mom$gb_entity_code NEQ mom$c_nodebyname THEN
    mom$error (nma$c_sts_pna,
		.(.nparse_block [npa$l_fldptr])<0,16>);

RETURN success
END;				! End MOM$CHECK_NODE_ENTITY  routine

%SBTTL	'mom$check_loop_params		Verify LOOP CIRCUIT parameters'
GLOBAL ROUTINE	mom$check_loop_params =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an NPARSE action routine that verifies the requested
!	LOOP CIRCUIT command does not contain contradictory or missing
!	parameters.
!
! IMPLICIT INPUTS:
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter
!	data.
!	The Service Data table (SVD)
!
! ROUTINE VALUE:
! COMPLETION CODE:
!	If request OK, SUCCESS is returned.
!	Otherwise a parameter missing error (NMA$C_STS_PMS) will
!	be signalled.
!
! SIDE EFFECTS:
!	If error then message is signalled.
!
!--
BEGIN

$npa_argdef;			! Define NPARSE block reference
!
! If the LOOP CIRCUIT command specifies loop with assist and/or help type,
! it must be an Ethernet circuit, and therefore a PHYSICAL ADDRESS or NODE
! parameter must be specified.
!
IF (.mom$gl_service_flags [mom$v_loop_w_assist] OR
    .mom$ab_service_data [svd$gk_pcno_lph, svd$v_msg_param]) AND
   NOT (.mom$ab_service_data [svd$gk_pcno_pha, svd$v_msg_param] OR
        .mom$ab_service_data [svd$gk_pcno_lan, svd$v_msg_param] OR
        .mom$ab_service_data [svd$gk_pcno_$lna, svd$v_msg_param]) THEN
    mom$error (nma$c_sts_pms,
		nma$c_pcno_pha);
!
! If the LOOP CIRCUIT command specifies LOOP HELP but no ASSISTANT
! PHYSICAL ADDRESS or NODE, return an error.
!
IF .mom$ab_service_data [svd$gk_pcno_lph, svd$v_msg_param] AND
   NOT .mom$gl_service_flags [mom$v_loop_w_assist] THEN
    mom$error (nma$c_sts_pms,
	       nma$c_pcno_lpa);

RETURN success
END;				! End MOM$CHECK_LOOP_PARAMS routine

%SBTTL	'mom$save_mop_msg		Save MOP message received from target'
GLOBAL ROUTINE	mom$save_mop_msg =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an NPARSE action routine that is called when certain
!	MOP messages are received from the target node.  These messages
!	must be saved because, if the target does not receive a response
!	within a certain time, the target retransmits them.  Therefore,
!	MOM must be prepared to skip over retransmissions of the same
!	message.  So, save the message here to do the comparison for
!	retransmissions against.
!
! IMPLICIT INPUTS:
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter
!	data.
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
! SIDE EFFECTS:
!	The MOP message and a descriptor of it are saved in MOM$AB_MOP_MSG
!	and MOM$GQ_MOP_MSG_DSC respectively.
!
!--
BEGIN

$npa_argdef;			! Define NPARSE block reference

mom$gq_mop_msg_dsc [0] = .mom$ab_nparse_blk [npa$l_msgcnt];
mom$gq_mop_msg_dsc [1] = mom$ab_mop_msg;
CH$MOVE (.mom$ab_nparse_blk [npa$l_msgcnt],
	 .mom$ab_nparse_blk [npa$l_msgptr],
	 mom$ab_mop_msg);
RETURN success
END;				! End mom$save_mop_msg  routine

%SBTTL	'mom$mop_chk_loop_assist	Check for MOP loop assist request'
GLOBAL ROUTINE	mom$mop_chk_loop_assist =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an NPARSE action routine that is called during autoservice
!	if a MOP messages is received which doesn't contain any of the
!	recognized MOP function codes.  In this case, it could be a
!	multicast request for loopback assistance on the Ethernet.  Check to
!	make sure the message was sent to the cross company Loopback Assistance
!	multicast address.  If so, return success so the volunteer assistance
!	will be sent.
!
! IMPLICIT INPUTS:
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter
!	data.
!
! ROUTINE VALUE:
! COMPLETION CODE:
!	Returns MOM$_SUC if the system sending the MOP message sent it
!	to the NI multicast loopback assistance address.
!
!--
BEGIN

LOCAL
    status;

BIND
    NI_loop_assis_mult = UPLIT (%X'000000CF', WORD (%X'0000'));

!
! Check to make sure the MOP message was sent to the multicast loopback
! assist address.  The destination address of the message was saved 
!
status = mom$_badmopfct;
IF .mom$gl_service_flags [mom$v_ni_circ] THEN
    BEGIN
    IF CH$EQL (mom$k_ni_addr_length, ni_loop_assis_mult,
	mom$k_ni_addr_length,
		mom$ab_service_data [svd$gk_pcno_$da, svd$t_string]) THEN
	status = success;
    END;
RETURN .status;
END;				! End mom$mop_chk_loop_assist routine

%SBTTL	'mom$save_load_file_id	  Save load file specification'
GLOBAL ROUTINE	mom$save_load_file_id =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an NPARSE action routine MOM calls if it receives a
!	MOP program load request which contains string in the software
!	id field of the message.  Append the logical name MOM$LOAD
!	to the string.  It will be translated by RMS when the load
!	file is opened.  The logical name is used as security to make
!	sure that only files in one directory can be loaded.
!	
!
! IMPLICIT INPUTS:
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter
!	data.
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
!--
BEGIN
$npa_argdef;			! Define NPARSE block reference

LOCAL
    file_svd,
    len,
    MOP_ptr,
    svd_ptr;

!
! The software type field precedes the software ID in the MOP message.
! This field determines which load file (secondary, tertiary, or operating
! system) to load.  Put the load file id in the correct load file entry
! of the Service Data Table (SVD).
!
file_svd = 
    (SELECTONEU .mom$ab_service_data [svd$gk_pcno_sty, svd$l_param] OF
	SET
	[nma$c_soft_terl]: svd$gk_pcno_tlo;	! Tertiary loader
	[nma$c_soft_osys]: svd$gk_pcno_loa;	! Operating system
	[OTHERWISE]: svd$gk_pcno_slo;		! Secondary loader
	TES);
!
! Concatenate the logical name, MOM$LOAD, with the file specification
! in the software ID field of the MOP message.
!
len = %CHARCOUNT ('MOM$LOAD:');
svd_ptr = mom$ab_service_data [.file_svd, svd$t_string];
svd_ptr = CH$MOVE (.len, UPLIT BYTE ('MOM$LOAD:'), .svd_ptr);
!
! Save the software id in the Service Data Table.
!
len = .len + .nparse_block [npa$l_fldcnt] - 1;
MOP_ptr = .nparse_block [npa$l_fldptr];
CH$MOVE (.len, (.MOP_ptr + 1), .svd_ptr);
mom$ab_service_data [.file_svd, svd$b_string_len] = .len;
mom$ab_service_data [.file_svd, svd$v_msg_param] = true;

RETURN success;
END;				! End mom$save_load_file_id routine

%SBTTL 'MOM_FIX_NODE_NUM    Fix node address parameter (action routine)'
ROUTINE MOM_FIX_NODE_NUM (NODE_ADDR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an parsing action routine that checks the node address.  If
!	the area number is 0 it can be one of two cases:
!		The NCP is a Phase IV NCP, and user did not specify an area
!		number in the NCP command.  In this case, assume the user
!		means area 1 (since 0 is an invalid area number).
!
!		the NCP is a Phase III NCP and therefore doesn't understand
!		area numbers.  In this case, assume the user means the
!		executor node's area.
!
! FORMAL PARAMETERS:
!	NODE_ADDR	Address of Node address to fix.
!
! IMPLICIT INPUTS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
!--

BEGIN

MAP
    node_addr	: REF BBLOCK [2];

LOCAL
    exec_addr	: BBLOCK [2];

!
! If the node address is 0, then it's the executor, so leave it that way.
! If the area number of the address is 0, then change it.
!
IF .node_addr [nma$v_addr] NEQ 0 AND
   .node_addr [nma$v_area] EQL 0 THEN
    BEGIN
    !
    ! If NCP is a Phase III NCP, use area 0 for the volatile database.
    ! NETACP will assume the executor's area number.  For permanent database,
    ! get the exec address from the permanent database and use it's area number.
    !
    IF CH$RCHAR (mom$ab_ncp_version) LEQ 3 then
	node_addr [nma$v_area] = 0
    ELSE
    !
    ! If NCP is a Phase IV NCP, use area 1.
    !
	node_addr [nma$v_area] = 1;
    END;
RETURN

END;				! End of MOM_FIX_NODE_NUM

%SBTTL 'mom$parse_error  Build and signal error (action routine)'
GLOBAL ROUTINE mom$parse_error : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This NPARSE action routine is called if an error is found when parsing
!	the parameters of a NICE command message.  It signals the error.
!
! FORMAL PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NPARSE argument block.
!		NPA$L_PARAM contains the error code.
!		NPA$L_FLDPTR points to the parameter in the message.
!
! SIDE EFFECTS:
!	Error message is signalled.
!
!--

BEGIN

$npa_argdef;				! Define NPARSE block reference

LOCAL
    err_code,				! Error code
    err_detail;				! Error detail

err_code = .nparse_block [npa$l_param]; ! Get error code
!
! Check for parameters to move in addition to error status.
!
err_detail = (
    SELECTONEU .err_code OF
	SET
	[nma$c_sts_pty,
	nma$c_sts_pva,
	nma$c_sts_pna]:
	    .(.nparse_block [npa$l_msgptr] - 2)<0,16,0>; ! Get detail code

	[OTHERWISE]:
	    -1;

	TES);

mom$error (.err_code, .err_detail);		! Signal error message

END;				! End of MOM$PARSE_ERROR

%SBTTL 'mom$prsmoperr  MOP parameter parsing error'
GLOBAL ROUTINE mom$prsmoperr =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets up response message information for errors
!	encountered in parsing MOP messages.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	The NPARSE argument block (NPA$L_PARAM) contains the code for
!	the optional text message to be signalled.
!
! IMPLICIT OUTPUTS:
!
!	MOM$AB_MSGBLOCK contains the response message information.
!
!--
 
BEGIN

$npa_argdef;

!
! Set up MOP protocol error with optional text message.
!
mom$ab_msgblock [msb$l_flags] = msb$m_msg_fld;
mom$ab_msgblock [msb$b_code]  = nma$c_sts_lpr;
mom$ab_msgblock [msb$l_text]  = .nparse_block [npa$l_param];

RETURN success

END;				! End of mom$prsmoperr



END					! End of module

ELUDOM
