%TITLE 'NML Network message builder module'
MODULE NML$BLDMSG (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
!
! ABSTRACT:
!
!	This module contains routines to build NICE response messages
!	and miscellaneous routines for debugging.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  28-Jan-1980
!
! MODIFIED BY:
!
!	V03-012	MKP0012		Kathy Perko		2-Jan-1984
!		Convert from old $TRNLOG system service to new $TRNLNM
!		system service for translating logical names.
!
!	V03-011	MKP0011		Kathy Perko		4-Aug-1983
!		Change format of node permanent database to use multiple ISAM
!		keys for better performance.  Also, give NML a message file.
!
!	V03-010	MKP0010		Kathy Perko		11-April-1982
!		Fix response message length for system messages.
!
!	V03-009	MKP0009		Kathy Perko		9-Nov-1982
!		Add code to log all NICE messages to NML$WATCHER
!		if the logical name is defined.
!		Add code to NML logging so that any information that is printed
!		which is past the end of the buffer is zeros.
!
!	V03-008	MKP0008		Kathy Perko		4-Oct-1982
!		Add X29 file dump to logging stuff.
!
!	V03-007	MKP0007		Kathy Perko		13-July-1982
!		Enhance NML$ADDMSGPRM to handle hex image fields.
!
!	V03-006	MKP0006		Kathy Perko		10-Jan-1982
!		Add a message parameter to NML$DEBUG_QIO so I can label
!		what kind of QIO is getting logged.
!
!	V03-005	MKP0005		Kathy Perko		20-Dec-1981
!		Change debug logging so that it can handle no NFB descriptor
!		address.  This allows NML to dump just the QIO status and
!		IOSB for MOP QIOs.
!
!	V03-004	MKP0004		Kathy Perko		03-Nov-1981
!		Add support for secondary (RMS) lines of message text in a
!		NICE reply message.
!
!	V03-003 MKP0003		Kathy Perko		20-Sept-1991
!		Fix logging so QIO info is dumped.
!
!	V03-002 MKP0002		Kathy Perko		26-July-1981
!		Enhance logging to dump contents of QIO buffers, and
!		dump buffers right to left with ASCII on the right.
!
!	V03-001 MKP0001		Kathy Perko		26-July-1981
!		Fix logging so permanent data base files aren't
!		opened and closed every time.
!--
 

%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$BLD_REPLY,
    NML$ADD_MSG_TXT,
    NML$ADDMSGPRM,
    NML$ADDMSGCOU,
    NML$ERROR_1		: NOVALUE,
    NML$ERROR_2		: NOVALUE,
    NML$DEBUG_TXT	: NOVALUE,
    NML$DEBUG_MSG	: NOVALUE,
    NML$DEBUG_QIO	: NOVALUE,
    NML$DUMP_QIO_BUFS   : NOVALUE,
    NML$LOGALLPDB	: NOVALUE,
    NML$FILEDMP		: NOVALUE,
    NML$LOGFILEOP	: NOVALUE,
    NML$LOGRECORDOP	: NOVALUE,
    NML$APPENDTXT	: NOVALUE,
    NML$TRNLOGNUM;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;
 
EXTERNAL
    NML$GQ_PROPRVMSK : BBLOCK [8],	! Process privilege mask
    NML$GW_WATCHER_CHAN: WORD;		! Channel assigned for NML$WATCHER.

EXTERNAL ROUTINE
    LIB$CVT_HTB		: ADDRESSING_MODE (GENERAL),
    LIB$PUT_OUTPUT	: ADDRESSING_MODE (GENERAL),
    NML$CLOSEFILE,
    NMA$OPENFILE,
    NMA$READREC;


%SBTTL 'NML$BLD_REPLY  Build NICE response message'
GLOBAL ROUTINE NML$BLD_REPLY (MSGBLK, MSGLEN) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds a NICE response message based on the
!	message segment block.
!
! FORMAL PARAMETERS:
!
!	MSGBLK		Address of the message segment block (MSB).
!	MSGLEN 		Address of longword to return the total size of
!			the message that was built.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NML$AB_SNDBUFFER contains the NICE reply message built as described in
!	the message segment block.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	The NICE response message is in NML$AB_SNDBUFFER.
!
!--
 
BEGIN
 
MAP
    msgblk : REF BBLOCK;
 
LOCAL
    bufcnt  : SIGNED,				! Message length counter
    len     : BYTE,				! Temporary string length
    msg_count_ptr,				! Error text length pointer
    in_ptr,					! Input text pointer
    out_ptr;					! Output message pointer
!
! The MSB longword mask determines the message fields that are
! described in the following longwords.  The status code is always
! required.
!
bufcnt = 0;					! Initialize buffer count
out_ptr = nml$ab_sndbuffer;			! Get output buffer pointer
CH$WCHAR_A (.msgblk [msb$b_code], out_ptr); 	! Add return code
bufcnt = .bufcnt + 1;				! Increment message count
!
! Check for detail field.
!
IF .msgblk [msb$v_det_fld] THEN
    BEGIN
    !
    ! Move the detail word into the message buffer.
    !
    (.out_ptr)<0,16> = .msgblk [msb$w_detail];
    out_ptr = .out_ptr + 2;
    END
ELSE
    BEGIN
    !
    ! No detail field is specified so add a minus one to the message.
    !
    (.out_ptr)<0,16> = -1;
    out_ptr = .out_ptr + 2;
    END;
bufcnt = .bufcnt + 2;			! Add detail length to count
!
! Check for message field if there is room in the buffer.
!
IF .bufcnt LSS nml$k_sndbflen THEN
    BEGIN
    !
    ! Initialize the message length field to zero.  Then save the address
    ! of the count so, if there's more than one message to add, the count
    ! field can be incremented.
    !
    msg_count_ptr = .out_ptr;
    CH$WCHAR_A (0, out_ptr);
    bufcnt = .bufcnt + 1;
    IF .msgblk [msb$v_msg_fld] THEN
	out_ptr = nml$add_msg_txt
			(.msgblk [msb$l_text],	! Message code
			 bufcnt,		! Bytes left in NCP response msg
			 .msg_count_ptr,	! Error msg count pointer
			 .out_ptr);		! Message end pointer
    !
    ! If a secondary status message is requested, then append a CR/LF and the
    ! second line of message text to the ASCIC text string in the NICE response.
    !
    IF .msgblk [msb$v_msg2_fld] THEN		! If secondary message supplied,
	out_ptr = nml$add_msg_txt
			(.msgblk [msb$l_text2],	! Message code
			 bufcnt,		! Bytes left in NCP response msg
			 .msg_count_ptr,	! Error msg count pointer
			 .out_ptr);		! Message end pointer
    END;
!
! If there is room in the buffer check for the entity field.
!
IF .bufcnt LSS nml$k_sndbflen THEN
    BEGIN
    IF .msgblk [msb$v_entd_fld]
    AND (.msgblk [msb$a_entity] NEQA 0) THEN
	BEGIN
	!
	! Entity field is ASCID string.
	!
	BIND
	    ent_dsc = msgblk [msb$a_entity] : REF DESCRIPTOR;
 
	in_ptr = .ent_dsc [dsc$a_pointer]; ! Get entity pointer
	len = .ent_dsc [dsc$w_length];	   ! Get length
	!
	! If message will not fit in the buffer move the maximum.
	!
	IF (.bufcnt + .len) GTR nml$k_sndbflen THEN
	    len = nml$k_sndbflen - .bufcnt;
	!
	! Move the count and the entity string into the buffer and add
	! the length to the total.
	!
	out_ptr = CH$MOVE (.len,
				.in_ptr,
				.out_ptr);
	bufcnt = .bufcnt + .len;
	END;
    END;
!
! If there is room in the buffer check for the data field.
!
IF .bufcnt LSS nml$k_sndbflen THEN
    BEGIN
    IF .msgblk [msb$v_data_fld]
    AND (.msgblk [msb$a_data] NEQA 0) THEN
	BEGIN
	!
	! Data field is ASCID string.
	!
	BIND
	    datadsc = msgblk [msb$a_data] : REF DESCRIPTOR;
 
	in_ptr = .datadsc [dsc$a_pointer]; ! Get data pointer
	len = .datadsc [dsc$w_length];	   ! Get length
	!
	! If message will not fit in the buffer move the maximum.
	!
	IF (.bufcnt + .len) LEQ nml$k_sndbflen THEN
	    BEGIN
	    !
	    ! Move the data string into the buffer and add length to total.
	    !
	    out_ptr = ch$move (.len,
				.in_ptr,
				.out_ptr);
	    bufcnt = .bufcnt + .len;
	    END;
	END;
    END; 
.msglen = .bufcnt;				! Return total message size
RETURN nml$_sts_suc				! Return success
END;					! End of NML$BLD_REPLY

%SBTTL 'NML$ADD_MSG_TXT 	Add message text to NCP response'
GLOBAL ROUTINE NML$ADD_MSG_TXT (CODE, NICE_BYTES,
				MSG_COUNT_PTR, MSG_PTR) =
 
!++
! FUNCTIONAL DESCRIPTION:
!	This routine performs a $GETMSG system service to retrieve the
!	NML or system message text for the specified status code.
!
! FORMAL PARAMETERS:
!
!	CODE		Message error code.
!	NICE_BYTES	Address of bytes in NICE response message so far.
!	MSG_COUNT_PTR	Pointer to message count field (if there's
!			more than one message, the count field must include
!			all messages.)
!	MSG_POINTER	Pointer to end of message.
!
! IMPLICIT OUTPUTS:
!	The message text is added to Error Message field of the NCP
!	response message.
!
!--
 
BEGIN

OWN
    msgbuf : BBLOCK [255];

LOCAL
    bufdsc : VECTOR [2],		! System message buffer descriptor
    reslen : WORD,			! Length of text
    crlf;

bufdsc [0] = 255;			! Initialize buffer descriptor
bufdsc [1] = msgbuf;
!
! Retrieve the NML or system message text for the specified error code.
!
$GETMSG (MSGID  = .code,
	MSGLEN = reslen,
	BUFADR = bufdsc);
!
! If message will not fit in the buffer move the maximum.  Just in case
! there is a <CR><LF>, leave room for it.
!
IF (..nice_bytes + .reslen + 2) GTR nml$k_sndbflen THEN
    reslen = nml$k_sndbflen - ..nice_bytes - 2;
!
! If there's already some error text in the message, add a <CR><LF> before
! adding the second error message.
!
crlf = 0;
IF .msg_count_ptr NEQ (.msg_ptr - 1) THEN
    BEGIN
    msg_ptr = CH$MOVE (2, UPLIT BYTE(13, 10), .msg_ptr);
    crlf = 2;
    END;
!
! Move the error message text into the NCP response message.
!
msg_ptr = CH$MOVE (.reslen, msgbuf, .msg_ptr);
.nice_bytes = ..nice_bytes + .reslen + .crlf;	! Increment buffer space used
(.msg_count_ptr)<0,8> = .(.msg_count_ptr)<0,8>	! Increment ASCIC string length
				 + .reslen +.crlf;
RETURN .msg_ptr;
END;					! End of NML$ADD_MSG_TXT

%SBTTL 'NML$ADDMSGPRM  Add data to NICE response message'
GLOBAL ROUTINE NML$ADDMSGPRM (BUFDSC, MSGSIZE, DATAID, DATATYPE, FLDSIZE, FLDADR) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds a NICE output parameter to the response message.
!	The data id, data type, and the value are added.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Address of message buffer descriptor.
!	MSGSIZE		Address of longword containing current (and 
!			resulting message size.
!	DATAID		Parameter code (word value).
!	DATATYPE	Automatic parsing data type (byte value).
!	FLDSIZE		Length of data.
!	FLDADR		Address of data string.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	Parameter and descriptive information is in buffer described by 
!	BUFDSC and the longword count pointed to by MSGSIZE is incremented
!	by the number of bytes moved.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the parameter will not fit in the buffer then an error
!	(NML$_STS_SIZ) is returned.  Otherwise, success (NML$_STS_SUC)
!	is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN
 
    MAP
	BUFDSC   : REF DESCRIPTOR,
	DATAID   : WORD,
	DATATYPE : BBLOCK [1];
 
    LOCAL
	CNT,			! Total parameter data byte count
	PTR;			! Output message pointer
!
! Data must fit in buffer.
! 
    CNT = .FLDSIZE + 3;
 
    IF .CNT GTRU (.BUFDSC [DSC$W_LENGTH] - ..MSGSIZE)
    THEN
	RETURN NML$_STS_SIZ;
!
! Move parameter code (id) and data type into buffer.
! 
    PTR = .BUFDSC [DSC$A_POINTER] + ..MSGSIZE;
    (.PTR)<0,16> = .DATAID;
    PTR = .PTR + 2;
    CH$WCHAR_A (.DATATYPE [0,0,8,0], PTR);
!
! If parameter value is an image field (ASCII or binary) then move the count
! into the buffer.
! 
    IF (NOT .DATATYPE [NMA$V_PTY_COD]) AND	! Not coded value and
       (.DATATYPE [NMA$V_PTY_ASC] OR		! Ascii or
	.DATATYPE [NMA$V_PTY_TYP] EQL NMA$C_PTY_HI) ! hex image
    THEN
	BEGIN
	CH$WCHAR_A (.FLDSIZE, PTR);
	CNT = .CNT + 1;
	END;
!
! Move the parameter value into the buffer.
! 
    CH$MOVE (.FLDSIZE, .FLDADR, .PTR);
    .MSGSIZE = ..MSGSIZE + .CNT;
 
    RETURN NML$_STS_SUC
 
    END;				! End of NML$ADDMSGPRM

%SBTTL 'NML$ADDMSGCOU  Add counter data to NICE response message'
GLOBAL ROUTINE NML$ADDMSGCOU (BUFDSC, MSGSIZE, FLDSIZE, FLDADR) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine moves the counter parameters into the NICE response 
!	message.  Since NETACP returns the counters already formatted for
!	the NICE message, it is just a matter of moving the string in
!	without a parameter type or length.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Address of message buffer descriptor.
!	MSGSIZE		Address of longword containing current (and resulting)
!			message length.
!	FLDSIZE		Byte count of counters string.
!	FLDADR		Address of counters string.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the counters will not fit in the output message buffer then an 
!	error (NML$_STS_SIZ) is returned.  Otherwise, success (NML$_STS_SUC)
!	is returned.
!
!--
 
BEGIN
 
MAP
	BUFDSC : REF DESCRIPTOR;
 
LOCAL
	CNT,			! Total counter data length
	PTR;			! Output message pointer
!
! Counters string must fit in the buffer.
!
CNT = .FLDSIZE;
 
IF (.CNT + 2) GTRU (.BUFDSC [DSC$W_LENGTH] - ..MSGSIZE)
THEN
	RETURN NML$_STS_SIZ;
!
! Move the counters string.
! 
PTR = .BUFDSC [DSC$A_POINTER] + ..MSGSIZE;
CH$MOVE (.FLDSIZE, .FLDADR, .PTR);
.MSGSIZE = ..MSGSIZE + .CNT;
 
RETURN NML$_STS_SUC
 
END;				! End of NML$ADDMSGCOU

%SBTTL 'NML$ERROR_1  Signal a single byte status message'
GLOBAL ROUTINE NML$ERROR_1 (ERR) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine moves an error or status code into the output buffer
!	and sends the message with length of one byte.
!
! FORMAL PARAMETERS:
!
!	ERR		NICE status code to be transmitted (NMA$C_STS_xxx).
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	An error message is signalled to be send by the condition handler.
!
!--
 
    BEGIN

    (NML$AB_SNDBUFFER)<0,8> = .ERR;	! Move status code into buffer

    $SIGNAL_MSG (NML$AB_SNDBUFFER, 1);	! Signal status message

    END;				! End of NML$ERROR_1

%SBTTL 'NML$ERROR_2  Signal an error message with detail field'
GLOBAL ROUTINE NML$ERROR_2 (ERR, DET) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine moves an error or status code into the output buffer
!	followed by the detail word.
!
! FORMAL PARAMETERS:
!
!	ERR 		NICE status code to be transmitted (NMA$C_STS_xxx).
!	DET		NICE error detail code.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	An error message is signalled to be sent by the condition handler.
!
!--
 
    BEGIN
!
! Move the error code and the detail code into the buffer.
! 
    (NML$AB_SNDBUFFER)<0,8> = .ERR;
    (NML$AB_SNDBUFFER + 1)<0,16> = .DET;
!
! Signal the message.
!
    $SIGNAL_MSG (NML$AB_SNDBUFFER, 3);

    END;				! End of NML$ERROR_2

%SBTTL 'NML$DEBUG_TXT  Print text message'
GLOBAL ROUTINE NML$DEBUG_TXT (BITNUM, TXTDSC) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine prints the specified message text to SYS$OUTPUT if
!	the appropriate logging flags are set.
!
! FORMAL PARAMETERS:
!
!	BITNUM		Bit number of the logging flag.
!	TXTDSC		Descriptor of ASCII text string.
!
! IMPLICIT INPUTS:
!
!	NML$GL_LOGMASK	Values of current logging flags.
!
!--
 
BEGIN

MAP
    TXTDSC : REF DESCRIPTOR;

LITERAL
    FAOSIZE = 132;

LOCAL
    FAOPRM,
    OUTDSC : VECTOR [2],
    FAOBUF : BBLOCK [FAOSIZE];

!
! If the correct logging flag is set then output the text string.
!
IF .NML$GL_LOGMASK [.BITNUM]
THEN
    BEGIN
    FAOPRM  = .TXTDSC;
    OUTDSC [0] = FAOSIZE;
    OUTDSC [1] = FAOBUF;
    $FAOL (CTRSTR = $ASCID ('!/*** !AS'),
	   OUTLEN = OUTDSC [0],
	   OUTBUF = OUTDSC,
	   PRMLST = FAOPRM);
    LIB$PUT_OUTPUT (OUTDSC);
    END;

END;				! End of NML$DEBUG_TXT

%SBTTL 'NML$DEBUG_MSG  Print binary message'
GLOBAL ROUTINE NML$DEBUG_MSG (BITNUM, BUFFER_ADR,
				BUFFER_LEN, TXTDSC) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dumps binary messages to SYS$OUTPUT.
!
! FORMAL PARAMETERS:
!
!	BITNUM		Number of the logging flag bit.
!	BUFFER_ADR	Address of the message buffer.
!	BUFFER_LEN	Length of the message in bytes.
!	TXTDSC		Descriptor of text string.
!
! IMPLICIT INPUTS:
!
!	NML$GL_LOGMASK	Values of current logging flags.
!
!--
 
BEGIN
 
MAP
    TXTDSC : REF DESCRIPTOR;

LITERAL
    FAOSIZ = 256,    			! The print buffer.
    FAOLST_SIZE = 10,			! Size of FAO parameter vector
    DUMP_BUFFER_SIZE = 2000;

LOCAL
    FAOBUF  : VECTOR [FAOSIZ, BYTE],! Print buffer
    FAOLST  : VECTOR [FAOLST_SIZE],	! List of args to $FAOL
    OUTDSC  : VECTOR [2],		! Descriptor of the output line
    BYTES,				! Counter for bytes written
    PTR:	REF BBLOCK,
    I,					! index
    BUFFER_END,				! Address of end of message buffer.
    DUMP_BUFFER : 			! Buffer from which the data is dumped.
	BBLOCK [DUMP_BUFFER_SIZE];

!
! If the watcher logical name was set, and the information being logged is
! a NICE message, write the NICE message to the watcher's mailbox.
!
IF .BITNUM EQL DBG$C_NETIO AND
   .NML$GW_WATCHER_CHAN NEQ 0 THEN
    BEGIN
    $SETRWM (WATFLG = 1);	! Don't wait if watcher's mailbox is full.
    $QIOW (FUNC = IO$_WRITEVBLK OR IO$M_NOW,
	   CHAN = .NML$GW_WATCHER_CHAN,
	   P1 = .BUFFER_ADR,
	   P2 = .BUFFER_LEN);
    $SETRWM (WATFLG = 0);	! Do wait for other resources.
    END;
!
! If the correct logging flag is not set then just return.
!
IF NOT .NML$GL_LOGMASK [.BITNUM] THEN
    RETURN;
!
! If the string length is nonzero then print it.
!
IF .TXTDSC NEQA 0 THEN
    BEGIN

    OUTDSC [0] = FAOSIZ;
    OUTDSC [1] = FAOBUF;

    FAOLST [0] = .TXTDSC [DSC$W_LENGTH];
    FAOLST [1] = .TXTDSC [DSC$A_POINTER];
    FAOLST [2] = .BUFFER_LEN;

    $FAOL (CTRSTR = $ASCID ('!/ !AD  (length = !UL bytes)!/'),
	       OUTLEN = OUTDSC [0],
	       OUTBUF = OUTDSC,
	       PRMLST = FAOLST);

    LIB$PUT_OUTPUT (OUTDSC);

    END;
!
! Dumping permanent data base records requires BYPASS privilege because the
! passwords are displayed.
!
IF (.BITNUM EQL DBG$C_FILEIO)
    AND (NOT .NML$GQ_PROPRVMSK [PRV$V_BYPASS])
    AND (NOT .NML$GQ_PROPRVMSK [PRV$V_READALL]) THEN
    RETURN;

!
! Move the data to be dumped into the dump buffer, filling it with zeros.
! This ensures that any information past the end of the buffer is printed
! as zeros.
!
CH$COPY (.BUFFER_LEN, .BUFFER_ADR, 0, DUMP_BUFFER_SIZE, DUMP_BUFFER);
!
! Dump the buffer contents in hex and ASCII.
!
OUTDSC [1] = FAOBUF;
PTR = DUMP_BUFFER;
BUFFER_END = DUMP_BUFFER + .BUFFER_LEN;
WHILE .PTR LSS .BUFFER_END DO
    BEGIN
    OUTDSC [0] = FAOSIZ;
    FAOLST [0] = .PTR [12,0,32,0];
    FAOLST [1] = .PTR [8,0,32,0];
    FAOLST [2] = .PTR [4,0,32,0];
    FAOLST [3] = .PTR [0,0,32,0];
    FAOLST [4] = 16;
    FAOLST [5] = .PTR;
    $FAOL (CTRSTR = $ASCID ('!XL !XL !XL !XL !_!AF'),
	   OUTLEN = OUTDSC [0],
	   OUTBUF = OUTDSC,
	   PRMLST = FAOLST);
    LIB$PUT_OUTPUT (OUTDSC);
    PTR = .PTR + 16;
    END;
!
! Add a new line.
!
$FAOL	(CTRSTR = $ASCID ('!/'),
	OUTLEN = OUTDSC [0],
	OUTBUF = OUTDSC,
	PRMLST = 0);
LIB$PUT_OUTPUT (OUTDSC);

END;					! End of NML$DEBUG_MSG

%SBTTL 'NML$DEBUG_QIO  Print NETACP QIO information'
GLOBAL ROUTINE NML$DEBUG_QIO (BITNUM, QIOS, IOSB, P1DSC,
				P2DSC, P3ADR, P4DSC, TXTDSC) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dumps NETACP QIO information to SYS$OUTPUT.
!
! FORMAL PARAMETERS:
!
!	BITNUM		Contains the number of the logging flag bit.
!	QIOS		Status of QIO (R0).
!	IOSB		Address of I/O status block.
!	P1DSC		Address of P1 descriptor.
!	P2DSC		Address of P2 descriptor.
!	P3ADR		Address of P3 word.
!	P4DSC		Address of P4 descriptor.
!	TXTDSC		Descriptor of text string.
!
! IMPLICIT INPUTS:
!
!	NML$GL_LOGMASK	Values of current logging flags.
!
!--
 
BEGIN
 
MAP
	IOSB   : REF $IOSB,
	P1DSC : REF DESCRIPTOR,
	P2DSC  : REF DESCRIPTOR,
	P4DSC  : REF DESCRIPTOR;

BIND
	FAOSTR = $ASCID ('!/R0=!XL IOSB=!XL/!XL NFB=!XW/!XL',
			 '!/P2=!XW/!XL P3=!XL (!XW) P4=!XW/!XL');

LITERAL
	FAOSIZ = 256;			! The print buffer

LOCAL
	FAOBUF : VECTOR [FAOSIZ, BYTE],	! Print buffer
	FAOLST : VECTOR [20],		! List of args to $FAOL
	OUTDSC : VECTOR [2],		! Descriptor of the output line
	BUFSIZ;
!
! If the correct logging flag is not enabled then just return.
!
IF NOT .NML$GL_LOGMASK [.BITNUM]
THEN
	RETURN;

!
! Print header message at beginning of QIO information.
!
IF .TXTDSC NEQ 0 THEN
    NML$DEBUG_TXT (.BITNUM, .TXTDSC);

OUTDSC [0] = FAOSIZ;
OUTDSC [1] = FAOBUF;
!
! Log the QIO completion status, IOSB, and the values of the QIO
! parameters.
!
FAOLST [0] = .QIOS;
FAOLST [1] = .IOSB [0,0,32,0];
FAOLST [2] = .IOSB [4,0,32,0];

IF .P1DSC NEQA 0 THEN
    BEGIN
    FAOLST [3] = .P1DSC [DSC$W_LENGTH];
    FAOLST [4] = .P1DSC [DSC$A_POINTER];
    END
ELSE
    BEGIN
    FAOLST [3] = 0;
    FAOLST [4] = 0;
    END;

IF .P2DSC NEQA 0
THEN
	BEGIN

	FAOLST [5] = .P2DSC [DSC$W_LENGTH];
	FAOLST [6] = .P2DSC [DSC$A_POINTER];

	END
ELSE
	BEGIN

	FAOLST [5] = 0;
	FAOLST [6] = 0;

	END;

FAOLST [7] = .P3ADR;
IF .P3ADR NEQA 0
THEN
	FAOLST [8] = .(.P3ADR)<0,16>
ELSE
	FAOLST [8] = 0;

IF .P4DSC NEQA 0
THEN
	BEGIN

	FAOLST [9] = .P4DSC [DSC$W_LENGTH];
	FAOLST [10] = .P4DSC [DSC$A_POINTER];

	END
ELSE
	BEGIN

	FAOLST [9] = 0;
	FAOLST [10] = 0;

	END;

$FAOL (CTRSTR = FAOSTR,
	   OUTLEN = OUTDSC [0],
	   OUTBUF = OUTDSC,
	   PRMLST = FAOLST);
 
LIB$PUT_OUTPUT (OUTDSC);		! Write to SYS$OUTPUT

OUTDSC [0] = 0;
OUTDSC [1] = FAOBUF;
BUFSIZ = FAOSIZ;
IF NOT .QIOS
THEN
	NML$ADD_MSG_TXT (.QIOS, BUFSIZ, OUTDSC [0], .OUTDSC [1])
ELSE
	NML$ADD_MSG_TXT (.IOSB [IOS$W_STATUS],
			BUFSIZ,
			OUTDSC [0],
			.OUTDSC [1]);

LIB$PUT_OUTPUT (OUTDSC);		! Write to SYS$OUTPUT

!
! Dump the contents of the NFB, the P2 (Key) buffer, and the P4 (Value) buffer.
!
NML$DUMP_QIO_BUFS (.BITNUM, .P1DSC, .P2DSC, .P4DSC, .P3ADR);

END;				! End of NML$DEBUG_QIO

 
%SBTTL 'NML$DUMP_QIO_BUFS  Dump QIO buffers'
GLOBAL ROUTINE NML$DUMP_QIO_BUFS (BITNUM, P1DSC, P2DSC, P4DSC, P3ADR) :
						NOVALUE =

BEGIN

LOCAL
	P4LEN;		! Length of P4 buffer

MAP
	P1DSC	: REF DESCRIPTOR,
	P2DSC	: REF DESCRIPTOR,
	P4DSC	: REF DESCRIPTOR;

IF .P1DSC NEQ 0 THEN
    NML$DEBUG_MSG ( .BITNUM,
		    .P1DSC [DSC$A_POINTER],
		    .P1DSC [DSC$W_LENGTH],
		    $ASCID('P1 buffer contents'));

IF .P2DSC NEQ 0
THEN
    NML$DEBUG_MSG ( .BITNUM,
		    .P2DSC [DSC$A_POINTER],
		    .P2DSC [DSC$W_LENGTH],
		    $ASCID ('P2 buffer contents'));

IF .P4DSC NEQ 0
THEN
    BEGIN
    !
    ! Figure out how much of the P4 buffer to dump.  If it's a
    ! show, the byte count was returned in P3.  If it's a set,
    ! the byte count is in the P4 buffer descriptor.
    !
    IF .P3ADR NEQ 0 THEN		
	IF .(.P3ADR)<0,16> GTR NML$K_QIOBFLEN THEN
	    P4LEN = 64
	ELSE
	    P4LEN = .(.P3ADR)<0,16>
    ELSE
	P4LEN = .P4DSC [DSC$W_LENGTH];
    NML$DEBUG_MSG ( .BITNUM,
		    .P4DSC [DSC$A_POINTER],
		    .P4LEN,
		    $ASCID ('P4 buffer contents'));
    END;
END;	! of  NML$DUMP_QIO_BUFS

%SBTTL 'NML$LOGALLPDB  Log contents of permanent data base files'
GLOBAL ROUTINE NML$LOGALLPDB : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine logs the contents of all permanent data base files
!	according to the setting of the logging bits.
!
!--
 
    BEGIN
 
    OWN
	TAB : VECTOR [NMA$C_OPN_MAX - NMA$C_OPN_MIN + 1]
	      INITIAL (DBG$C_DMPNOD,
		       DBG$C_DMPLIN,
		       DBG$C_DMPLOG,
		       DBG$C_DMPOBJ,
		       DBG$C_DMPCIR,
		       DBG$C_DMPX25,
		       DBG$C_DMPX29,
		       DBG$C_DMPCNF);

    INCR IDX FROM NMA$C_OPN_MIN TO NMA$C_OPN_MAX DO
	BEGIN

	IF .NML$GL_LOGMASK [.TAB[.IDX]] THEN
		BEGIN
		IF NMA$OPENFILE (.IDX, NMA$C_OPN_AC_RO) THEN
			BEGIN
			NML$FILEDMP (.TAB [.IDX], .IDX);
			NML$CLOSEFILE (.IDX);
			END;
		END;
	END;

    END;					! End of NML$LOGALLPDB

%SBTTL 'NML$FILEDMP  Dump all the records in the file'
GLOBAL ROUTINE NML$FILEDMP (BITNUM, FID) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS:
!
!	BITNUM		Logging flag bit number.
!	FID 		Permanent data base file identification code.
!
! IMPLICIT INPUTS:
!
!	NML$GL_LOGMASK	Values of current logging flags.
!
! IMPLICIT OUTPUTS:
!
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LITERAL
	FAOSIZ = 256;			! The print buffer

    LOCAL
	FAOBUF : VECTOR [FAOSIZ, BYTE],	! Print buffer
	FAOLST : VECTOR [100],		! List of args to $FAOL
	OUTDSC : DESCRIPTOR,		! Descriptor of the output line
	SAVEFLAG,			! Temporary file I/O logging flag
	KEY    : WORD,			! Temporary record key buffer
	RECDSC : DESCRIPTOR;		! Record descriptor
!
! If logging for this file is not enabled then just return.
!
    IF NOT .NML$GL_LOGMASK [.BITNUM]
    THEN
	RETURN;
!
! Output the header.
!
    OUTDSC [DSC$W_LENGTH] = FAOSIZ;
    OUTDSC [DSC$A_POINTER] = FAOBUF;

    NML$APPENDTXT (.FID,
		   $ASCID ('*****************************'),
		   $ASCID ('file dump *****************************'),
		   OUTDSC,
		   OUTDSC [DSC$W_LENGTH]);

    LIB$PUT_OUTPUT (OUTDSC);
!
! Save the value of the file I/O logging flag and set it to enable records
! to be logged.
!
    SAVEFLAG = .NML$GL_LOGMASK [DBG$C_FILEIO];
    NML$GL_LOGMASK [DBG$C_FILEIO] = 1;
!
! Read all records.
!
    KEY = 0;				! Initialize record key
    WHILE NMA$READREC (.FID, KEY, NML$GQ_RECBFDSC, RECDSC) DO
	BEGIN
 
	KEY = .KEY + 1;

	END;
!
! Output the trailer.
!
    OUTDSC [DSC$W_LENGTH] = FAOSIZ;
    OUTDSC [DSC$A_POINTER] = FAOBUF;

    NML$APPENDTXT (.FID,
		   $ASCID ('************************** End of'),
		   $ASCID ('file dump **************************'),
		   OUTDSC,
		   OUTDSC [DSC$W_LENGTH]);

    LIB$PUT_OUTPUT (OUTDSC);
!
! Restore the setting of the file I/O logging flag.
!
    NML$GL_LOGMASK [DBG$C_FILEIO] = .SAVEFLAG;

    END;					! End of NML$FILEDMP

   
%SBTTL 'NML$LOGFILEOP  Log a file operation'
GLOBAL ROUTINE NML$LOGFILEOP (BITNUM, FILEID, TXTDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine logs file operations such as open and close.
!
! FORMAL PARAMETERS:
!
!	BITNUM		Logging flag bit number.
!	FILEID		Value of the fileid parameter (NMA$C_OPN_xxxx)
!	TXTDSC		Descriptor of message text.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    
    LOCAL
	OUTBUF : VECTOR [255, BYTE],
	OUTDSC : DESCRIPTOR;

    OUTDSC [DSC$W_LENGTH] = 255;
    OUTDSC [DSC$A_POINTER] = OUTBUF;

    NML$APPENDTXT (.FILEID, 0, .TXTDSC, OUTDSC, OUTDSC [DSC$W_LENGTH]);

    NML$DEBUG_TXT (.BITNUM,
		   OUTDSC);
    END;

%SBTTL 'NML$LOGRECORDOP  Log a record access operation'
GLOBAL ROUTINE NML$LOGRECORDOP (BITNUM, FILEID, TXTDSC, DATDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine logs record access operations such as read, write,
!	and delete.
!
! FORMAL PARAMETERS:
!
!	BITNUM		Logging flag bit number.
!	FILEID		Value of the fileid parameter (NMA$C_OPN_xxxx).
!	TXTDSC		Descriptor of message text.
!	DATDSC		Descriptor of record data.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    
    MAP
	DATDSC : REF DESCRIPTOR;

    LOCAL
	OUTBUF : VECTOR [255, BYTE],
	OUTDSC : DESCRIPTOR;
!
! Initialize output buffer descriptor.
!
    OUTDSC [DSC$W_LENGTH] = 255;
    OUTDSC [DSC$A_POINTER] = OUTBUF;
!
! Append the file type to the message text.
!
    NML$APPENDTXT (.FILEID, 0, .TXTDSC, OUTDSC, OUTDSC [DSC$W_LENGTH]);
!
! Log the data.
!
    NML$DEBUG_MSG (.BITNUM,
		   .DATDSC [DSC$A_POINTER],
		   .DATDSC [DSC$W_LENGTH],
		   OUTDSC);

    END;

%SBTTL 'NML$APPENDTXT  Append file type to string'
GLOBAL ROUTINE NML$APPENDTXT (FILEID, PFXDSC, SFXDSC, OUTDSC, RESLEN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine appends the file type string to the beginning of a
!	text string.
!
! FORMAL PARAMETERS:
!
!	FILEID		Value of the fileid parameter (NMA$C_OPN_xxxx)
!	PFXDSC		Descriptor of prefix text.
!	SFXDSC		Descriptor of suffix text.
!	OUTDSC		Descriptor of output string buffer.
!	RESLEN		Length of resulting appended string.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    
    MAP
	PFXDSC : REF DESCRIPTOR,
	SFXDSC : REF DESCRIPTOR,
	OUTDSC : REF DESCRIPTOR;

    LOCAL
	CTLDSC : REF DESCRIPTOR,
	FAOLST : VECTOR [6],
	IDX,
	TYPDSC : REF DESCRIPTOR;
!
! Select file type string.
!
    CASE .FILEID FROM NMA$C_OPN_MIN TO NMA$C_OPN_MAX OF
	SET
	[NMA$C_OPN_NODE]:
	    TYPDSC = $ASCID ('Node');
	[NMA$C_OPN_LINE]:
	    TYPDSC = $ASCID ('Line');
	[NMA$C_OPN_LOG]:
	    TYPDSC = $ASCID ('Logging');
	[NMA$C_OPN_OBJ]:
	    TYPDSC = $ASCID ('Object');
	[NMA$C_OPN_CIR]:
	    TYPDSC = $ASCID ('Circuit');
	[NMA$C_OPN_X25]:
	    TYPDSC = $ASCID ('X25 Module');
	[NMA$C_OPN_X29]:
	    TYPDSC = $ASCID ('X29 Module');
	[NMA$C_OPN_CNF]:
	    TYPDSC = $ASCID ('Configurator Module');
	[INRANGE,
	 OUTRANGE]:
	    TYPDSC = $ASCID ('Unknown');
	TES;
!
! Set up FAO parameters.
!
    IDX = 0;

    IF .PFXDSC NEQA 0
    THEN
	BEGIN

	FAOLST [0] = .PFXDSC [DSC$W_LENGTH];
	FAOLST [1] = .PFXDSC [DSC$A_POINTER];
	IDX = 2;

	END;

    FAOLST [.IDX] = .TYPDSC [DSC$W_LENGTH];
    FAOLST [.IDX + 1] = .TYPDSC [DSC$A_POINTER];
    IDX = .IDX + 2;

    IF .SFXDSC NEQA 0
    THEN
	BEGIN

	FAOLST [.IDX] = .SFXDSC [DSC$W_LENGTH];
	FAOLST [.IDX + 1] = .SFXDSC [DSC$A_POINTER];
	IDX = .IDX + 2;

	END;

    IF .IDX GTR 4
    THEN
	CTLDSC = $ASCID ('!AD !AD !AD')
    ELSE
	CTLDSC = $ASCID ('!AD !AD');
!
! Append the name to the beginning of the text string.
!
    $FAOL (CTRSTR = .CTLDSC,
	   OUTLEN = .RESLEN,
	   OUTBUF = .OUTDSC,
	   PRMLST = FAOLST);
 
    END;

%SBTTL 'NML$TRNLOGNUM  Translate numeric logical name'
GLOBAL ROUTINE NML$TRNLOGNUM (LNMDSC, RESADR) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine translates a logical name and returns the numeric
!	representation of the ASCII hexadecimal number that results.
!
! FORMAL PARAMETERS:
!
!	LNMDSC		Descriptor of the logical name to be translated.
!	RESADR		Address of longword to contain the numeric value.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns error code if the logical name has no translation or the
!	translation is invalid.  The result longword will be set to zero.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN
 
    MAP
	LNMDSC : DESCRIPTOR;

    OWN
	ASCLEN : WORD,
	ASCNUM : VECTOR [8, BYTE];

    LOCAL
	STATUS;
 
    STATUS = $TRNLNM (ATTR = UPLIT (LNM$M_CASE_BLIND),
		      TABNAM = %ASCID 'LNM$PROCESS_TABLE',
		      LOGNAM = .LNMDSC,
		      ITMLST = UPLIT (WORD (8), WORD (LNM$_STRING),
		      		      LONG (ASCNUM),
				      LONG (ASCLEN),
				      LONG (0))
		      );

    IF .STATUS EQL SS$_NORMAL
    THEN
	STATUS = LIB$CVT_HTB (.ASCLEN, ASCNUM, .RESADR);

    RETURN .STATUS
 
    END;					! End of NML$TRNLOGNUM
 

END						! End of module
 
ELUDOM
 
