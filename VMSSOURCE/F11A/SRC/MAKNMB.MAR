	.TITLE	MAKNMB - Build the name block
	.IDENT	/V04-000/

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; FACILITY:	F11ACP Structure Level 1
;
; ABSTRACT:
;
;	This routine converts the specified file name string into the RAD-50
;	name block format.  It also saves the original pattern in case
;	character wildcarding is used.
;
; ENVIRONMENT:
;
;	VAX/VMS operating system, including privileged system services
;	and internal exec routines.
;
;--
;
; AUTHOR:	L. Mark Pilant,		CREATION DATE:	23-Apr-1984  10:00
;		(Original BLISS version by Andy Goldstein)
;
; MODIFIED BY:
;
;	V03-001	LMP0292		L. Mark Pilant,		2-Aug-1984  11:54
;		Fix a bug that caused digits in the file type field to be
;		garbled.
;
;**

;
; INCLUDE FILES:
;
;	FCPPRE.MAR

; Structure and offset definitions.

	$FIBDEF
	$NMBDEF

	.SBTTL	Local constants and flags

; Character type codes.  These are used to determine the action to take.
; (These constants are determined by the offsets into the type tables
; below.)

	PERCENT=	1			; Percent sign (%)
	STAR=		2			; Asterisk (*)
	DIGIT=		3			; Numeric digit
	LC_ALPHA=	4			; Lower case alphabetic
	UC_ALPHA=	5			; Upper case alphabetic
	DOT=		6			; Period (.)
	SEMI=		7			; Semi-colon (;)

; Tables used to determine the above offsets:

	.PSECT	$CODE$,NOWRT,2

LO_CHR_TABLE:
	.ASCII	<0>/%*0aA.;/
HI_CHR_TABLE:
	.ASCII	<0>/%*9zZ.;/

;				Special note:
;
;	Throughout the following routine, the following register
;	assignments are used:
;
;		R6 = the number of characters remaining in the string
;		R7 = the address of the next character

	.SBTTL	MAKE_NAMEBLOCK - Build RAD-50 name block

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine converts a file name string into the RAD-50 name block
;	format.
;
; CALLING SEQUENCE:
;	MAKE_NAMEBLOCK (ARG1, ARG2, ARG3, ARG4)
;
; INPUT PARAMETERS:
;	ARG1: address of FIB if pattern parse
;	      0 if resultant file string parse
;	ARG2: length of file name string
;	ARG3: address of file name string
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	ARG4: address of file name block
;
; IMPLICIT OUTPUTS:
;	NONE
;
; ROUTINE VALUE:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

	FIB=		4			; ARG list offsets
	LENGTH=		8
	STRING=		12
	NAME_BLOCK=	16

	.ENTRY	MAKE_NAMEBLOCK,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	MOVL	NAME_BLOCK(AP),R9		; Get address of name block
	MOVC5	#0,(SP),#0,#NMB$C_LENGTH,(R9)	; Clear out block
	MOVL	STRING(AP),R7			; Get address of first character
	LOCC	#^A/ /,LENGTH(AP),(R7)		; Find the end of the string
	SUBL3	R7,R1,R6			; Calculate size of the string

	MOVAB	NMB$W_NAME(R9),R10		; Where RAD-50 name goes
	MOVAB	NMB$T_ASCNAMTXT(R9),R11		; Where ASCII pattern goes
	PUSHL	R11				; Save current pattern pointer

; Build the file name field.  This consists of 3 words of 3 RAD-50 characters
; in each word.

	MOVL	#3,R3				; Number of words to do
	CLRL	R4				; Clear wildcard flag
10$:	MOVL	#3,R5				; Number of characters to pack
20$:	MULW2	#40,(R10)			; Make room for RAD-50 char
	MOVZBL	(R7),R1				; Get next source string char
	BSBW	TYPE				; Determine character class
30$:	CASEL	R0, #0, #7			; Dispatch on character class
40$:	.WORD	110$-40$			; End of the string
	.WORD	50$-40$				; Percent sign
	.WORD	50$-40$				; Asterisk
	.WORD	60$-40$				; Digit
	.WORD	70$-40$				; Lower case alphabetic
	.WORD	80$-40$				; Upper case alphabetic
	.WORD	110$-40$			; Period
	.WORD	110$-40$			; Semi-colon
50$:	ADDL2	R0,R4				; Else note the wildcard character
	BRB	100$				; Go get another character
60$:	SUBW3	#^A/0/-30,R1,R0			; Convert digit to RAD-50
	BRB	90$				; Go save RAD-50 character
70$:	SUBW2	#^X20,R1			; Convert lower to upper case
80$:	SUBW3	#^A/A/-1,R1,R0			; Convert ahplabetic to RAD-50
90$:	ADDW2	R0,(R10)			; Accumulate characters
100$:	MOVB	R1,(R11)+			; Save ASCII character
	DECL	R6				; One less character
	BLEQ	110$				; Xfer if no more
	INCL	R7				; Else update pointer also
110$:	SOBGTR	R5,20$				; Continue till word full
	TSTW	(R10)+				; Advance to next RAD-50 word
	SOBGTR	R3,10$				; Continue till all full

; Check for FIB$V_ALLNAM set and the first character of the file name string
; being a dot.  This hack is used by the compatability mode program PIP.

	MOVL	FIB(AP),R8			; Get the address of the FIB
	BEQL	120$				; Skip following if no FIB given
	BBC	#FIB$V_ALLNAM,FIB$W_NMCTL(R8),120$	; Xfer if file name present
	MOVL	(SP),R11			; Get saved pattern pointer
	MOVB	#^A/*/,(R11)+			; Save a wild name character
	BRB	125$				; Go note wildcard use

; Set any applicable wildcard flags.

120$:	ADDL3	#1,(SP)+,R0			; Clean stack & set up for below
	TSTL	R4				; Any wildcards at all?
	BEQL	140$				; Xfer if no wildcards at all
	CMPL	R4,#STAR			; Single asterisk?
	BNEQ	130$				; Xfer if not
	CMPL	R0,R11				; See if asterisk is alone
	BNEQ	130$				; Xfer if not alone
125$:	BISW2	#NMB$M_ALLNAM,NMB$W_FLAGS(R9)	; Else note wild field
130$:	BISW2	#NMB$M_WILD,NMB$W_FLAGS(R9)	; Note presence of wildcards

; Now that the file name field has been built, check the delimiting character.
; The only legal characters are period and semi-colon.

140$:	MOVZBL	(R7),R1				; Get the delimiting character
	BSBW	TYPE				; Get character class
	CASEL	R0, #0, #7			; Dispatch on character class
150$:	.WORD	170$-150$			; End of the string
	.WORD	BADFILENAME-150$		; Percent sign
	.WORD	BADFILENAME-150$		; Asterisk
	.WORD	BADFILENAME-150$		; Digit
	.WORD	BADFILENAME-150$		; Lower case alphabetic
	.WORD	BADFILENAME-150$		; Upper case alphabetic
	.WORD	160$-150$			; Period
	.WORD	170$-150$			; Semi-colon
160$:	MOVB	R1,(R11)+			; Else save ASCII character
	DECL	R6				; One less character
	INCL	R7				; Next position in the buffer
	BRB	180$				; Go check for PIP hack

; Make sure that the file name is properly delimited.

170$:	MOVB	#^A/./,(R11)+			; Else terminate file name properly

; Build the file type field.  This consists of 3 RAD-50 characters.

180$:	PUSHL	R11				; Save current pattern pointer
	CLRL	R4				; Clear wildcard flag
	MOVL	#3,R5				; Number of characters to pack
190$:	MULW2	#40,(R10)			; Make room for RAD-50 char
	MOVZBL	(R7),R1				; Get next source string char
	BSBW	TYPE				; Determine character class
200$:	CASEL	R0, #0, #7			; Dispatch on character class
210$:	.WORD	280$-210$			; End of the string
	.WORD	220$-210$			; Percent sign
	.WORD	220$-210$			; Asterisk
	.WORD	230$-210$			; Digit
	.WORD	240$-210$			; Lower case alphabetic
	.WORD	250$-210$			; Upper case alphabetic
	.WORD	280$-210$			; Period
	.WORD	280$-210$			; Semi-colon
220$:	ADDL2	R0,R4				; Else note the wildcard character
	BRB	270$				; Go get another character
230$:	SUBW3	#^A/0/-30,R1,R0			; Convert digit to RAD-50
	BRB	260$				; Go save RAD-50 character
240$:	SUBW2	#^X20,R1			; Convert lower to upper case
250$:	SUBW3	#^A/A/-1,R1,R0			; Convert ahplabetic to RAD-50
260$:	ADDW2	R0,(R10)			; Accumulate characters
270$:	MOVB	R1,(R11)+			; Save ASCII character
	DECL	R6				; One less character
	BLEQ	280$				; Xfer if no more
	INCL	R7				; Else update pointer also
280$:	SOBGTR	R5,190$				; Continue till word full

; Check for FIB$V_ALLTYP set and the first character of the file type
; string being a dot or a semi-colon.  This hack is used by the compatability
; mode program PIP.

	MOVL	FIB(AP),R8			; Get the address of the FIB
	BEQL	290$				; Skip following if no FIB given
	BBC	#FIB$V_ALLTYP,FIB$W_NMCTL(R8),290$	; Xfer if file name present
	MOVL	(SP),R11			; Get saved pattern pointer
	MOVB	#^A/*/,(R11)+			; Else save a wild type character
	BRB	300$				; Go note wildcard use

; Set any applicable wildcard flags.

290$:	ADDL3	#1,(SP)+,R0			; Clean stack & set up for below
	TSTL	R4				; Any wildcards at all?
	BEQL	320$				; Xfer if no wildcards at all
	CMPL	R4,#STAR			; Single asterisk?
	BNEQ	310$				; Xfer if not
	CMPL	R0,R11				; See if asterisk is alone
	BNEQ	310$				; Xfer if not alone
300$:	BISW2	#NMB$M_ALLTYP,NMB$W_FLAGS(R9)	; Else note wild field
310$:	BISW2	#NMB$M_WILD,NMB$W_FLAGS(R9)	; Note presence of wildcards

; Now set the size of the pattern string.

320$:	MOVAB	NMB$T_ASCNAMTXT(R9),R0		; Get base address
	SUBB3	R0,R11,NMB$B_ASCNAMSIZ(R9)	; Save size of pattern string

; Now that the file name field has been built, check the delimiting character.
; The only legal characters are period, semi-colon, and end of string.

	MOVZBL	(R7),R1				; Get the delimiting character
	BSBW	TYPE				; Get character class
	CASEL	R0, #0, #7			; Dispatch on character class
330$:	.WORD	380$-330$			; End of the string
	.WORD	BADFILENAME-330$		; Percent sign
	.WORD	BADFILENAME-330$		; Asterisk
	.WORD	BADFILENAME-330$		; Digit
	.WORD	BADFILENAME-330$		; Lower case alphabetic
	.WORD	BADFILENAME-330$		; Upper case alphabetic
	.WORD	340$-330$			; Period
	.WORD	340$-330$			; Semi-colon
340$:	DECL	R6				; One less character
	BLEQ	380$				; Xfer if nothing left to parse
	INCL	R7				; Next position in the buffer

; Now for the version.  If the version is not wild, and there are characters
; left to parse, try to get the binary version number.  If this fails, note
; the error.

360$:	CMPL	R6,#1				; Check for only one char
	BGTR	370$				; Xfer if more than one char
	CMPB	(R7),#^A/*/			; ELse check for a wildcard
	BNEQ	370$				; Xfer if not wild
	BISW2	#NMB$M_WILD!NMB$M_ALLVER,NMB$W_FLAGS(R9)	; Else note wild
	BRB	380$				; Go finish up
370$:	CLRL	-(SP)				; Storage for converted version
	MOVL	SP,-(SP)			; Save address of storage
	MOVQ	R6,-(SP)			; Save count and address
	CALLS	#3,G^LIB$CVT_DTB		; Convert to binary
	BLBC	R0,BADFILENAME			; Xfer if any errors
	CMPL	(SP),#32767			; Else range check
	BGTRU	BADFILEVER			; Xfer if bad version number
	CVTLW	(SP)+,NMB$W_VERSION(R9)		; Else save version number

; All is done.  Return to the caller.

380$:	RET

; Error returns.

BADFILENAME:
	ERR_EXIT	#SS$_BADFILENAME

BADFILEVER:
	ERR_EXIT	#SS$_BADFILEVER

	.SBTTL	TYPE - Determine character class

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine determines the type code of the current character
;	in the string.
;
; CALLING SEQUENCE:
;	TYPE ()
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	R6: number of characters left in string
;	R7: string pointer
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; ROUTINE VALUE:
;	type code of character:
;	0: end of string
;	1: percent
;	2: star
;	3: numeric
;	4: lower case alpha
;	5: upper case alpha
;	6: dot
;	7: semicolon
;
; SIDE EFFECTS:
;	NONE
;
;--

TYPE:	CLRL	R0				; Assume nothing left
	TSTL	R6				; Correct assumption?
	BLEQ	30$				; Xfer if so
	MOVL	#1,R0				; Set initial index
10$:	CMPB	(R7),LO_CHR_TABLE[R0]		; Within limits?
	BLSSU	20$				; Xfer if not
	CMPB	(R7),HI_CHR_TABLE[R0]
	BLEQU	30$
20$:	AOBLEQ	#7,R0,10$			; Continue till end
	BRW	BADFILENAME			; Illegal if off the end
30$:	RSB					; Return with class in R0

	.END
