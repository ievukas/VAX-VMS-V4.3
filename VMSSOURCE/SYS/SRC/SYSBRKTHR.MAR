	.TITLE	SYSBRKTHR - Write breakthru to terminals
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; FACILITY:
;
;	SYS
; 
; INCLUDES:
;	$BRKTHRU system service
;	$BRDCST system service
;
; ABSTRACT:
;
;	Write breakthru message to specified terminals and mailboxes.
;
; ENVIRONMENT:
;
;	Kernel Mode. IPL 0 and 2.
;
;--
;
; AUTHOR: Jake VanNoy, CREATION DATE: 3-Feb-1983
;
; MODIFIED BY:
;
;	V03-011	JLV0392		Jake VanNoy		26-JUL-1984
;		Make check for TRM and SPL at HAVE_UCB.
;		Do not write message to mailbox if class disabled.
;
;	V03-010	JLV0347		Jake VanNoy		 8-APR-1984
;		Skip terminal if NET is set.  Fix problem in
;		check for broadcast to same username.
;		Copy DEVNAME to SENDNAME so that cluster broadcast
;		to device will work.  Change MOVC of device name
;		fields to MOVQ's.  
;
;	V03-009	JLV0339		Jake VanNoy		 9-MAR-1984
;		Skip terminal if PASSALL is set.  Fix mailbox message
;		to have just DDC part of device name.  Force timeout
;		of a cluster breakthru request to 15 seconds on all
;		nodes except local.  Fix bug that used BRK$L_FLAGS as
;		scratch.
;
;	V03-008	ACG0385		Andrew C. Goldstein,	28-Dec-1983  15:27
;		Change UAF$S_USERNAME use to JIB$S_USERNAME, due to
;		pending UAF format changes
;
;	V03-007	JLV0308		Jake VanNoy		22-SEP-1983
;		Complete work started in JLV0307. Fix check against
;		username in GET_SENDTO.  Change parameter in call
;		to IOC$CVT_DEVNAM, since the interface to that routine
;		has changed.
;
;	V03-006	JLV0307		Jake VanNoy		 7-SEP-1983
;		Fix enhanced privilege bug. Wait until after cluster 
;		broadcast to deallocate BRK. Fix bug in defaulting of
;		carriage control in $BRDCST. Add use of EXE$SIGTORET
;		in $BRDCST.
;
;	V03-005	JLV0302		Jake VanNoy		22-AUG-1983
;		Add MOVC5 to zero entire BRK structure up to where text
;		is placed. This allowed removing separate CLRx instructions
;		in initialization. Save register around MOVC in GET_SENDTO.
;		Change exit path for SS$_NOOPER error code.
;
;	V03-004	JLV0300		Jake VanNoy		30-JUL-1983
;		Add OPER priv checks. Allow $BRKTHRU to same username
;		without priv.  Initialize mailbox prefix code. Remove
;		BRK$ symbols from here and move them to LIB. This
;		allows cluster broadcast code to use BRK structure.
;		Add IO$M_CANCTRLO to QIO.  Make use of IOC$CVT_DEVNAM.
;
;	V03-003	LJK0213		Lawrence J. Kenah	23-Jun-1983
;		Unlock data base before calling GET_NEXT_TERMINAL to make
;		sure that $GETJPI is not called at IPL 2.
;
;	V03-002	JLV0269		Jake VanNoy		27-MAY-1983
;		Fix bugs in SET_PRIV routine. Add code to use REQID.
;		Add code to call EXE$CSP_BRKTHRU, the cluster broadcast
;		routine.
;
;	V03-001	JLV0245		Jake VanNoy		29-APR-1983
;		First pass cleanup. Include code for EXE$BRDCST here, 
;		this obsoletes the old SYSBRDCST module.
;
;**


	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$BRKDEF				; Define BRKTHRU interface symbols
	$BRKTDEF			; Define BRK block
	$CCBDEF				; Define channel control block 
	$DDBDEF				; Define device data block 
	$DEVDEF				; Define device symbols
	$DVIDEF				; Define GETDVI symbols
	$IODEF				; Define I/O request symbols
	$IPLDEF				; Define IPL fields
	$JIBDEF				; Define Job Information Block
	$JPIDEF				; Define GETJPI symbols
	$PCBDEF				; Define process control block
	$PHDDEF				; Define process header
	$PRVDEF				; Define privilege names
	$PSLDEF				; Define PSL fields
	$SSDEF				; Define status codes
	$TTDEF				; Define tt devdepend symbols 
	$TT2DEF				; Define tt devdepnd2 symbols 
	$TTYUCBDEF			; terminal ucb extensions
	$UAFDEF				; Define user authorization symbols
	$UCBDEF				; Define UCB
;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

EFN	= 4
MSGBUF	= 8
SENDTO	= 12
SENDTYPE = 16
IOSB	= 20
CARCON	= 24
FLAGS	= 28
REQID	= 32		; 
TIMOUT	= 36
ASTADR	= 40		
ASTPRM	= 44

BRK_C_JPIEFN	= 31	; system efn
BRK_C_TIMEFN	= 31
BRK_C_QIOEFN	= 31
BRK_C_DVIEFN    = 31
BRK_C_BRDCSTEFN = 31
BRK_C_MINTIME	= 4	; minimum time in seconds
BRK_C_SIMULCAST = 4	; simultaneous QIO's
BRK_C_MAXLINES  = 24	; maximum number of lines allowed to clear in screen write
BRK_C_CLUTIMEOUT= 15	; forced timeout for cluster broadcast

PRV$M_BYPASS	= 1@PRV$V_BYPASS	; define mask
PRV$M_SHARE	= 1@PRV$V_SHARE		; define mask

; following assumes for MOVQ's of name buffer's

ASSUME DDB$S_NAME 	EQ 16
ASSUME BRK$S_DEVNAME 	EQ 16
ASSUME BRK$S_SENDNAME	EQ 16
ASSUME BRK$S_TRMNAME	EQ 16


;
; Local storage offsets for temporary stack allocation
;

; 
; getjpi stack items
;
	$DEFINI	STK
	
$DEF	STK$W_USERSIZ	.BLKW
$DEF	STK$W_USERJPI	.BLKW
$DEF	STK$L_USERNAME	.BLKL
$DEF	STK$L_USERLENR	.BLKL

$DEF	STK$W_TERMSIZ	.BLKW
$DEF	STK$W_TERMJPI	.BLKW
$DEF	STK$L_TERMNAME	.BLKL
$DEF	STK$L_TERMLENR	.BLKL

$DEF	STK$L_ENDLIST	.BLKL

$DEF	STK$W_USERLEN	.BLKW
$DEF	STK$T_USERNAME	.BLKB	JIB$S_USERNAME
$DEF	STK$W_TERMLEN	.BLKW

$DEF	STK$C_LEN

	$DEFEND STK
;
; OWN STORAGE:
;

.PSECT	Y$EXEPAGED

erase_pat:	.ascii	/[1A[0K/
assume .-erase_pat EQ 8			; so quadword access can be done

screen_ctrstr:	.ascid	/7[!UB;1H[K!AD!AD8/


	.SBTTL	EXE$BRKTHRU - Break though write

;++
;
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;	NONE
;
; INPUT PARAMETERS:
;
;	R4 - PCB
;	AP - argument list
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

	.ENTRY	EXE$BRKTHRU,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	;
	; Check parameters and do initialization needed
	;
	CLRL	R6			; no buffer yet
	;
	; Clear Event Flag
	;
	MOVZBL	EFN(AP),R3		; Fetch EFN
	JSB	SCH$CLREF		; Clear
	BLBC	R0,20$			; Exit on error
	;
	; Verify IOSB and clear it
	;
	MOVL	IOSB(AP),R11		; Get address of IOSB
	BEQL	10$			; Branch if none
	IFWRT	#8,(R11),5$		; Branch if ok
	BRW	ACCVIO_EXIT		; Error if not writeable
5$:	CLRQ	(R11)			; Clear
10$:
	MOVL	MSGBUF(AP),R1		; Message buffer descriptor
	JSB	G^EXE$PROBER_DSC	; Probe descriptor
	BLBC	R0,20$			; branch if error
	;
	; R1 and R2 have length and address, calculate size of buffer
	; needed for storage.
	;	
	MOVZWL	R1,R1			; clear top word
	MOVQ	R1,R9			; save both
	MOVZBL	#BRK$C_LENGTH,R3	; Size of basic block
	ADDL	R1,R3			; For normal data
	ADDL3	#16+<8*BRK_C_MAXLINES>,R1,R8	; screen overhead and message
	ADDL	R8,R3			; For screen data
	ADDL	#3,R3			; round of to longword by adding and...
	BICL	#3,R3			; 	clearing bits
	MOVL	R3,R7			; Save this length
	MULL3	#BRK_C_SIMULCAST,-
		#BRK2$C_LENGTH,R0	; Size of context area
	ADDL	R0,R3			; add to length
	;
	; Compute pages and allocate region
	;
	MOVL	R3,R1			; Number of bytes
	JSB	G^EXE$ALOP1IMAG		; Allocate memory
20$:	BLBC	R0,ERROR_EXIT		; exit on error
	;
	; Copy remaining paramters into allocated region
	;
	MOVL	R2,R6			; Copy Address of block
	PUSHR	#^M<R1,R2,R3,R4>	; Save
	MOVC5	#0,(SP),#0,-
		#BRK$C_LENGTH,(R2)	; Zero entire structure (up to text)
	POPR	#^M<R1,R2,R3,R4>	; Restore

	MOVW	R1,BRK$W_SIZE(R6)	; And size
	MOVAB	(R6)[R7],BRK$L_QIOCTX(R6) ; Qio context start address
	MOVL	R8,BRK$L_SCRMSGLEN(R6)	; init
	MOVL	R4,BRK$L_PCB(R6)	; Save PCB
	MOVL	R11,BRK$L_IOSB(R6)	; Set address
	;
	; Copy main message buffer
	;	
	MOVW	R9,BRK$W_MSGLEN(R6)	; Save length
	MOVC3	R9,(R10),-
		BRK$T_MSGBUF(R6)	; Copy message buffer
	MOVL	R3,BRK$L_SCRMSG(R6)	; next byte is where screen message starts
	;
	; Copy send type and "send to:" string (if required)
	;
	BSBW	GET_SENDTO		; handle SENDTO, SENDTYPE
	BLBC	R0,ERROR_EXIT		; check status
	;
	; Set up time quadword if timeout requested
	;
	MOVL	TIMOUT(AP),R0		; Timeout value
	BEQL	240$			; branch if none specified
	CMPL	#BRK_C_MINTIME,R0	; Compare to minimum number of seconds
	BGTR	BADPARAM_EXIT		; Exit if too small
	MNEGL	R0,R0			; Get negative value
	EMUL	#10*1000*1000,R0,#0,-
		BRK$Q_TIMEOUT(R6)	; Times ten million ticks per second
240$:	MOVW	#BRK_C_CLUTIMEOUT,-
		BRK$W_SECONDS(R6)	; set default timeout for cluster
	BRB	ALL_OK			; And continue

	;
	; An error has occured in initial processing...
	;
BADPARAM_EXIT:
	MOVZWL	#SS$_BADPARAM,R0	; set status
	BRB	ERROR_EXIT		; exit
ACCVIO_EXIT:
	MOVZWL	#SS$_ACCVIO,R0		; Set error
ERROR_EXIT:
	TSTL	R6			; Buffer to delete?
	BEQL	10$			; Branch if not
	BSBW	RETURN_MEMORY		; return memory
10$:
	RET				; exit 

	;
	; Copy remaining parameters...
	;
ALL_OK:
	MOVL	#<PRV$M_BYPASS!PRV$M_SHARE>,R0	; privileges required
	ASSUME  PHD$Q_PRIVMSK EQ 0		; for indirection
	MOVL	BRK$L_PCB(R6),R4		; Set PCB address
	BICL3	@PCB$L_PHD(R4),R0,BRK$Q_PRIVS(R6) ; Clear those already set

	ASSUME	BRK$W_EFN+2 EQ BRK$B_STS	; assumes so next instruction
	ASSUME	BRK$W_EFN+3 EQ BRK$B_PRVMODE	; can set efn and zero sts and prvmode
	MOVZWL	EFN(AP),BRK$W_EFN(R6)		; Copy event flag number
	MOVL	REQID(AP),R0			; Requestor ID
	CMPL	#63,R0				; Check legal (0-63 legal)
	BLSSU	BADPARAM_EXIT			; exit if not
	MOVL	R0,BRK$L_REQID(R6)		; Save Requestor ID
	MOVL	FLAGS(AP),BRK$L_FLAGS(R6)	; Flags
	MOVL	CARCON(AP),BRK$L_CARCON(R6)	; Set carriage control
	MOVL	ASTADR(AP),BRK$L_ASTADR(R6)	; Ast routine
	MOVL	ASTPRM(AP),BRK$L_ASTPRM(R6)	; Ast routine parameter
	;
	; Other misc. initialization
	;
	ASSUME	BRK$W_STATUS+2 EQ BRK$W_SUCCESSCNT
	ASSUME	BRK$W_STATUS+4 EQ BRK$W_TIMEOUTCNT
	ASSUME	BRK$W_STATUS+6 EQ BRK$W_REFUSEDCNT
	MOVZBW	#SS$_NORMAL,BRK$W_STATUS(R6)	; Assume final status
	MOVW	#MSG$_TRMBRDCST,BRK$W_TRMMSG(R6); set mailbox prefix code
	;
	; read PSL and save previous mode
	;
	MOVPSL	R0				; fetch PSL
	EXTZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,-	
		R0,R0				; extract previous mode
	MOVB	R0,BRK$B_PRVMODE(R6)		; save
	;
	; Set up search contexts
	;
	MNEGL	#1,BRK$L_PIDCTX(R6)		; wild card pid
	ASSUME	BRK$L_UCBCTX+4 EQ BRK$L_DDBCTX	; assume alignment
	;
	; Format screen message (if SCREEN requested)
	;
	MOVL	BRK$L_FLAGS(R6),R7	; Flags parameter
	BBC	#BRK$V_SCREEN,R7,100$	; Skip if not requested
	MOVZBL	R7,R0			; lines to clear
	CMPL	#BRK_C_MAXLINES,R0	; Greater than max?
	BLSSU	BADPARAM_EXIT		; Branch if yes
	MOVL	R0,R1			; copy
	MULL3	#8,R1,R2		; bytes of erase pattern
	;
	; Set up repeating erase line pattern on stack
	;
10$:	MOVQ	W^ERASE_PAT,-(SP)	; copy erase pattern
	SOBGTR	R0,10$			; one for each line
	MOVL	SP,R3			; address of erase pattern
	BBC	#BRK$V_BOTTOM,R7,20$	; Branch if message on top of screen
	MOVZBL	#132,R1			; Set "bottom" (note 132 >> 24)
20$:
	MOVZWL	BRK$W_MSGLEN(R6),R4	; Size
	MOVAB	BRK$T_MSGBUF(R6),R5	; address of data
	$FAO_S  CTRSTR = SCREEN_CTRSTR,-
		OUTLEN = BRK$L_SCRMSGLEN(R6),-
		OUTBUF = BRK$L_SCRMSGLEN(R6),-
    		P1 = R1,-		; position top/bottom
    		P2 = R2,-		; lines to erase * 8
    		P3 = R3,-		; erase pattern address
		P4 = R4,-		; size of msgbuf
		P5 = R5			; msgbuf address
	BLBS	R0,100$
	BRW	ERROR_EXIT		; blew it
100$:
	;
	; Start initial QIO's up. AST's are disabled first so that a
	; CPU limit exceeded ast cannot fire between assigning the
	; channel and setting the CCB$M_IMGTMP flag. Something that would cause
	; image exit to occur before the IMGTMP flag was set cannot be allowed.
	; Disabling AST makes synchronization of CHECK_COMPLETE easier as well.
	;
	$SETAST_S ENBFLG = #0		; Disable AST's
	;
	;(At this point, R6 points to BRK structure, all others are scratch)
	;
	MOVL	BRK$L_QIOCTX(R6),R7	; QIO context area
	MOVZWL	#BRK_C_SIMULCAST,R8	; Number to do at one time
300$:
	MOVL	R6,BRK2$L_COMMON(R7)	; Point back to common region
	BSBB	DO_WRITE		; Do the write
	BLBC	R0,350$			; exit on error
	MOVAB	BRK2$C_LENGTH(R7),R7	; Add size to qio context
	SOBGTR	R8,300$			; Continue
350$:
	PUSHL	R0			; Save status
	;
	; Before returning to user, see if there is a cluster to send to
	;
	BBC	#BRK$V_CLUSTER,-	;
		BRK$L_FLAGS(R6),360$	; Branch if "cluster" not requested
	IFNOCLSTR 360$			; or if not in cluster
	JSB	G^EXE$CSP_BRKTHRU	; send message
360$:
	BSBW	CHECK_COMPLETE		; done? Deallocate BRK if so
	$SETAST_S ENBFLG = #1		; Enable AST's
	POPL	R0			; Restore status
	CMPW	#SS$_NOOPER,R0		; no OPER priv?
	BNEQ	365$			; continue if not
	BRW	ERROR_EXIT		; take error exit
365$:
	MOVZBL	#SS$_NORMAL,R0		; Set success for everything else
370$:	RET				; Return to user


	.SBTTL	DO_WRITE - Queue a single write request
;++
;
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;	BSBW	DO_WRITE
;
; INPUT PARAMETERS:
;
;	R6 - BRK
;	R7 - QIO context area
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	R0 - status
;		
;		SS$_NORMAL - all ok or error set in STATUS
;		SS$_NOMOREPROC - done with all QIO's
;
; SIDE EFFECTS:
;
;	Destroys R1,R2,R3,R4,R5 
;
;--

UNLOCK_DB:
	BBCC	#BRK$V_LOCKED,-
		BRK$B_STS(R6),10$	; clear locked flag
	MOVL	BRK$L_PCB(R6),R4	; PCB
	JSB	G^SCH$IOUNLOCK		; unlock
	SETIPL	#0			; lower IPL
10$:	RSB				; Return

DO_WRITE:

10$:
	BSBB	UNLOCK_DB		; Unlock data base
	BSBW	GET_NEXT_TERMINAL	; Get next terminal
	;
	; returns with I/O database locked at IPL 2
	;
	BLBC	R0,UNLOCK_DB	; branch if done (no more processes)
	;
	; Test for broadcast to mailbox
	;
	MOVL	BRK$L_UCBCTX(R6),R5	; fetch UCB address
	BBC	#TT2$V_BRDCSTMBX,-
		UCB$L_DEVDEPND2(R5),40$ ; Branch if not allowed
	PUSHL	R5			; Save ucb address
	MOVL	UCB$L_AMB(R5),R5	; Get address of associated mailbox
	BEQL	30$			; Branch if none
	;
	; Send broadcast to assoicated mailbox
	;
	MOVZWL	BRK$W_MSGLEN(R6),R3	; Get length of message
	ADDL2	#<BRK$T_MSGBUF-BRK$W_TRMMSG>,R3 ; Add mailbox prefix overhead
	MOVAB	BRK$W_TRMMSG(R6),R4	; Set address of mailbox message
	JSB	G^EXE$WRTMAILBOX	; Send message
	BLBC	R0,30$			; branch if error sending to mailbox
	INCW	BRK$W_SUCCESSCNT(R6)	; One more successful completion
30$:
	POPL	R5			; Restore ucb address
40$:
	BITL	#<TT$M_NOBRDCST!TT$M_PASSALL>,-
		UCB$L_DEVDEPEND(R5)	; test for NOBROADCAST or PASSALL
	BNEQ	10$			; skip if either set
	BSBB	UNLOCK_DB		; unlock data base
	;
	; Assign channel (if possible)
	;
	TSTL	BRK$Q_PRIVS(R6)		; assumes no privs in high longword
	BEQL	42$			; privs required non-null
	$SETPRV_S -			; 
		ENBFLG = #1,-			; Enable privs
		PRVADR = BRK$Q_PRIVS(R6)	; Privs to set
42$:
	MOVAQ	-(SP),R2		; Allocate descriptor on stack
	MOVZBL	BRK$T_DEVNAME(R6),(R2)	; Length
	MOVAB	BRK$T_DEVNAME+1(R6),4(R2) ; address

	$ASSIGN_S -
		DEVNAM = (R2),-		; device name
		CHAN = BRK2$W_CHAN(R7)	; channel
	ADDL	#8,SP			; pop descriptor
	BLBS	R0,50$			; branch if ok
	INCW	BRK$W_REFUSEDCNT(R6)	; Refused
45$:	MOVW	R0,BRK$W_STATUS(R6)	; record status
	$SETPRV_S -			; 
		ENBFLG = #0,-			; Disable privs
		PRVADR = BRK$Q_PRIVS(R6) 	; Privs to disable
	BRW	10$			; Try another terminal
	;
	; modify the CCB so that the channel will be run down at image exit
	; 
50$:	
	$SETPRV_S -			; 
		ENBFLG = #0,-			; Disable privs
		PRVADR = BRK$Q_PRIVS(R6) 	; Privs to reset

	MOVZWL	BRK2$W_CHAN(R7),R0	; Channel number
	MNEGL	R0,R0			; Get negative
	MOVAB	@CTL$GL_CCBBASE[R0],R0	; Get CCB address
	BISB	#CCB$M_IMGTMP,-
		CCB$B_STS(R0)		; Set image temporary channel
	;
	; Do QIO
	;
	MOVAB	BRK$T_MSGBUF(R6),R1	; assume standard message
	MOVZWL	BRK$W_MSGLEN(R6),R2	; and length
	MOVL	BRK$L_CARCON(R6),R3	; and carriage control
	MOVZWL	#<IO$_WRITEVBLK!-
		IO$M_REFRESH!-
		IO$M_BREAKTHRU!-
		IO$M_CANCTRLO>,R4	; I/O function code
	BBC	#BRK$V_SCREEN,-
		BRK$L_FLAGS(R6),70$	; Branch if screen not requested
	BBC	#TT2$V_DECCRT,-
		UCB$L_DEVDEPND2(R5),70$	; or not dec crt
	MOVL	BRK$L_SCRMSG(R6),R1	; screen message
	MOVZWL	BRK$L_SCRMSGLEN(R6),R2	; and length
	CLRL	R3			; no carriage control
	BRB	75$			; force no refresh for screen write
70$:
	BBC	#BRK$V_NOREFRESH,-
		BRK$L_FLAGS(R6),77$	; Branch if not NO REFRESH
75$:	BICW	#IO$M_REFRESH,R4	; Clear refresh flag
77$:
	;
	; Do the QIO!
	;
	$QIO_S	CHAN = BRK2$W_CHAN(R7),-
		EFN  = #BRK_C_QIOEFN,-
		FUNC = R4,-
		IOSB = BRK2$Q_IOSB(R7),- 
		ASTADR = QIO_DONE,-
		ASTPRM = R7,-		; qio context
		P1 = (R1),-		; address
		P2 = R2,-		; and length
		P4 = R3			; Carriage control
	BLBC	R0,200$			; error from QIO?
	INCW	BRK$W_OUTCNT(R6)	; Increment outstanding count
	;
	; Set timer for timeout if requested
	;	
	MOVQ	BRK$Q_TIMEOUT(R6),-	; (Test quad)
		BRK$Q_TIMEOUT(R6)	; Time out requested? 
	BEQL	80$			; Branch if not

	$SETIMR_S -
		EFN    = #BRK_C_TIMEFN, -
		DAYTIM = BRK$Q_TIMEOUT(R6), -
		ASTADR = W^QIO_TIMEOUT, -
		REQIDT = R7

	BLBS	R0,80$			; branch if ok
	MOVW	R0,BRK$W_STATUS(R6)	; Set final status
80$:
	MOVZBL	#SS$_NORMAL,R0		; exit
100$:
	RSB
;
; Error during QIO
;
200$:
	MOVW	R0,BRK$W_STATUS(R6)	; Set final status
	$DASSGN_S CHAN = BRK2$W_CHAN(R7) ; Deassign channel
	BRW	10$			; Try again with this QIO context


	.SBTTL	GET_SENDTO - Handle SENDTO and SENDTYPE inputs
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Handle the SENDTYPE and SENDTO parameters and set up BRK.
;	Privilege is checked for all but BRK$C_DEVICE writes.
;	Writes to same username are allowed without privilege.
;
; CALLING SEQUENCE:
;
;	BSBW	GET_SENDTO
;
; INPUT PARAMETERS:
;
;	R6 - BRK
;	SENDTYPE(AP) - sendtype parameter
;	SENDTO(AP)   - sendto parameter
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;
;	R0 - success or failure
;
; SIDE EFFECTS:
;
;	R1-R5,R7 are destroyed.
;--

GET_SENDTO:

	MOVL	SENDTYPE(AP),R7		; fetch Send type
	CMPL	#BRK$C_MAXSENDTYPE,R7	; Compare to maximum
	BLSSU	5$			; branch if error

	MOVW	R7,BRK$W_SENDTYPE(R6)	; Save low order word
	CASE	R7,-			; Case on send type
		<5$,-			; Invalid
		10$,-			; send to device name
		10$,-			; send to username
		150$,-			; send to all users
		150$>,-			; send to all terminals
		TYPE = W		; word context
5$:	MOVZWL	#SS$_BADPARAM,R0	; Set status
7$:	RSB
	;
	; single device or username requested
	;
10$:	MOVL	SENDTO(AP),R1		; Get "send to" address
	JSB	G^EXE$PROBER_DSC	; test for read
	BLBC	R0,7$			; exit on error
	MOVZWL	R1,R1			; zero high word
	BEQL	5$			; Must be non-zero

	CMPB	#BRK$C_DEVICE,R7	; device
	BEQL	40$			; Branch if yes
	;
	; Must be Username
	;
	CMPW	#JIB$S_USERNAME,R1	; max user name length
	BLSSU	5$			; error if so
	MOVB	R1,BRK$T_SENDNAME(R6)	; simply copy username ascic string
	PUSHL	R1			; Save Length
	MOVC3	R1,(R2),-
		BRK$T_SENDNAME+1(R6)	; and copy string
	POPL	R1			; Restore Length
	MOVL	BRK$L_PCB(R6),R4	; Fetch PCB address
	MOVL	PCB$L_JIB(R4),R4	; Fetch JIB
	;
	; JIB$T_USERNAME is a 12 byte field, with NO BYTE COUNT!
	;
	CMPC5	#JIB$S_USERNAME,-
		JIB$T_USERNAME(R4),#^A/ /,-
		R1,BRK$T_SENDNAME+1(R6)	; compare strings, fill with blanks
	BNEQ	150$			; branch if not equal
	BRB	50$			; names are same, no priv required
	;
	; Device name, do a GETDVI to translate logical name
	;
40$:	
	MOVL	SP,R4			; Save SP
	MOVAL	-(SP),R5		; allocate scratch longword
	CLRL	-(SP)			; end of list
	PUSHL	R5			; just a longword for device name length
	PUSHAB	BRK$T_DEVNAME+1(R6)	; copy directly into device name area
	PUSHL	#<DVI$_DEVNAM@16>!-
		<BRK$S_DEVNAME-1>	; size and getdvi code
	MOVL	SP,R3			; save
	PUSHL	R2			; address (device descriptor)
	PUSHL	R1			; length
	MOVL	SP,R1			; save
	$GETDVIW_S -
		EFN = #BRK_C_DVIEFN,-	; event flag number
		DEVNAM = (R1),-		; get device name (and wait) 
		ITMLST = (R3)		; item list
	MOVB	(R5),BRK$T_DEVNAME(R6)	; Copy length
	MOVL	R4,SP			; Restore SP
	MOVQ	BRK$T_DEVNAME(R6),-
		BRK$T_SENDNAME(R6)	; copy in case of cluster broadcast
	MOVQ	BRK$T_DEVNAME+8(R6),-
		BRK$T_SENDNAME+8(R6)	; copy in case of cluster broadcast
	BLBC	R0,110$			; check status
	BISB	#BRK$M_CHKPRIV,-
		BRK$B_STS(R6)		; Set "check priv later" bit
50$:
	MOVZWL	#SS$_NORMAL,R0		; set ok
110$:	RSB
	;
	;  Check for OPER priv before allowing request
	;
150$:	MOVL	BRK$L_PCB(R6),R4	; Fetch PCB address
	IFPRIV	OPER,50$		; If priv ok, continue
	MOVZWL	#SS$_NOOPER,R0		; Set status
	RSB				; exit


	.SBTTL	GET_NEXT_TERMINAL - return next terminal
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Given context in BRK, determine next terminal to send message to.
;
; CALLING SEQUENCE:
;
;	BSBW	GET_NEXT_TERMINAL
;
; INPUT PARAMETERS:
;
;	R6 - BRK 
;	R7 - QIO context
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	If R0 = success, then BRK$T_DEVNAME is filled in,
;			  and BRK$L_UCBCTX has UCB address.
;
; COMPLETION CODES:
;
;	R0 -	SS$_NORMAL
;		SS$_NOMOREPROC
;	other errors returned in BRK$W_STATUS
;
; SIDE EFFECTS:
;
;	Destroys R1,R2,R3,R4,R5
;
;--

GET_NEXT_TERMINAL:

	MOVZWL	#SS$_NOMOREPROC,R0	; assume no more processes to send to
	BBC	#BRK$V_DONE,-
		BRK$B_STS(R6),5$	; If not done, lookup next terminal
	RSB				; Return all done once again
5$:
	CASE	BRK$W_SENDTYPE(R6),-	; Case on send type
		<10$,-			; Invalid
		100$,-			; send to device name
		200$,-			; send to username
		ALL_TERMS,-		; send to all users
		ALL_TERMS>,-		; send to all terminals 
		TYPE = W		; word context

10$:	MOVZWL	#SS$_BADPARAM,R0	; bad parameter
	BRW	NEXT_TERM_ERROR		; error

	;
	; Send to one device
	;
100$:	
	BISB	#BRK$M_DONE,BRK$B_STS(R6) ; set done 
	BRW	HAVE_NAME		  ; and go
	;
	; map username into terminal name
	;	
200$:
	SUBL2	#STK$C_LEN,SP		; Allocate some work space
	MOVL	SP,R2			; copy pointer
	;
	; Initialize area for GETJPI call
	;
210$:
	MOVL	R2,R1			; copy pointer

	MOVL	#<JPI$_USERNAME@16>!-
		<JIB$S_USERNAME>,(R1)+	; username size and code
	MOVAB	STK$T_USERNAME(R2),(R1)+; username address
	MOVAB	STK$W_USERLEN(R2),(R1)+	; username length to return

	MOVL	#<JPI$_TERMINAL@16>!-
		<BRK$S_DEVNAME-1>,(R1)+	; terminal name size
	MOVAB	BRK$T_DEVNAME+1(R6),(R1)+; terminal name address
	MOVAB	STK$W_TERMLEN(R2),(R1)+	; terminal name length to return
	CLRL	(R1)			; End of list

	$GETJPI_S -
		EFN    = #BRK_C_JPIEFN,-	; efn
		PIDADR = BRK$L_PIDCTX(R6),-	; pid context
		ITMLST = (R2)			; item list
	BLBS	R0,220$			; Branch if ok
	CMPW	#SS$_NOPRIV,R0		; no priv ?
	BEQL	210$			; yes, try again

	ADDL2	#STK$C_LEN,SP		; Deallocate work space
	CMPW	#SS$_NOMOREPROC,R0	; no more processes?
	BEQL	NO_MORE_TERM		; yes, done
	BRB	NEXT_TERM_ERROR		; No, unexpected error
220$:
	TSTW	STK$W_TERMLEN(R2)	; Interactive?
	BEQL	210$			; If zero, no, try again

	PUSHR	#^M<R2,R3>		; Save
	MOVZBL	BRK$T_SENDNAME(R6),R0	; length
	CMPC5	STK$W_USERLEN(R2),-	; length
		STK$T_USERNAME(R2),-	; address of name returned
		#^A/ /,R0,-		; fill and length
		BRK$T_SENDNAME+1(R6)	; requested name
	POPR	#^M<R2,R3>		; restore, (does not affect CC)
	BNEQ	210$			; not equal, loop
	MOVB	STK$W_TERMLEN(R2),-
		BRK$T_DEVNAME(R6)	; Length 
	ADDL2	#STK$C_LEN,SP		; Deallocate work space
	;
	; Username match found, scan device name for unit number
	;
	BRB	HAVE_NAME		; exit
	;
	; Send to all terminals/users
	;
ALL_TERMS:
	BSBW	LOCKDB			; lock database
	BSBW	FIND_NEXT_TERM		; Find next terminal
	BLBS	R0,HAVE_UCB		; Continue if OK
	BRB	TERM_DONE		; Return proper status

NEXT_TERM_ERROR:
	MOVW	R0,BRK$W_STATUS(R6)	; Set final status

TERM_DONE:
	MOVZWL	#SS$_NOMOREPROC,R0	; no more processes to send to

NO_MORE_TERM:
	BISB	#BRK$M_DONE,BRK$B_STS(R6) ; set done 
	RSB	

HAVE_NAME:

	BSBW	LOCKDB			; lock database
	;
	; Map name into UCB address of this terminal
	;
	PUSHAB	BRK$T_DEVNAME+1(R6)	; address of device name
	MOVZBL	BRK$T_DEVNAME(R6),-(SP)	; Length
	MOVL	SP,R1			; Address of descriptor
	MOVL	BRK$L_PCB(R6),R4	; Set PCB address
	
	JSB	G^IOC$SEARCHDEV		; find the UCB (puts addr in R1)
	ADDL	#8,SP			; pop descriptor
	BLBC	R0,NEXT_TERM_ERROR	; error
	MOVL	R1,R5			; UCB address

HAVE_UCB:
	;
	; Check availability, access and privilege
	;
	BBC	#DEV$V_TRM,-
		UCB$L_DEVCHAR(R5),3$	; skip if not terminal 
	BBC	#DEV$V_AVL,-
		UCB$L_DEVCHAR(R5),3$	; skip terminal if not available
	BITW	#<DEV$M_NET!DEV$M_SPL>,-
		UCB$L_DEVCHAR(R5)	; skip terminal if DECnet device
	BNEQ	3$			; or spooled
	BBS	#DEV$V_DET,-
		UCB$L_DEVCHAR2(R5),3$	; skip terminal if detached
	BBS	BRK$L_REQID(R6),-
		UCB$Q_TL_BRKTHRU(R5),3$	; Or specific class disabled
	BBS	#TT2$V_BRDCSTMBX,-
		UCB$L_DEVDEPND2(R5),5$ ; must try this term if BRDCSTMBX
	BITL	#<TT$M_NOBRDCST!TT$M_PASSALL>,-
		UCB$L_DEVDEPEND(R5)	; test for NOBROADCAST or PASSALL
	BEQL	5$			; try terminal if neither set
	;
	; For some reason, this device is not acceptable
	;
3$:	BRW	40$			; skip to next terminal

5$:	BBC	#BRK$V_CHKPRIV,-
		BRK$B_STS(R6),30$	; Branch if priv check not required
	;
	; Search up process tree to see if owner
	;
	MOVL	BRK$L_PCB(R6),R1	; PCB address
	MOVL	UCB$L_PID(R5),R2	; Owner PID
10$:	CMPL	PCB$L_PID(R1),R2	; compare PIDs
	BEQL	30$			; branch if OK
	MOVZWL	PCB$L_OWNER(R1),R1	; Get index of owner
	BEQL	20$			; If equal then none, must have priv
	MOVL	@L^SCH$GL_PCBVEC[R1],R1	; Get Owner PCB address
	BRB	10$			; Loop
20$:
	MOVL	BRK$L_PCB(R6),R4	; PCB address
	IFPRIV	OPER,30$		; If privilege, ok to send message
	MOVZWL	#SS$_NOOPER,R0		; set error
	RSB				; exit
	;
	; Set up name and unit number
	;
30$:
	PUSHL	R7			; Save R7
	MOVZBL	#BRK$S_DEVNAME-1,R0	; Size of buffer
	MOVAB	BRK$T_DEVNAME(R6),R7	; Address of buffer
	MOVAB	1(R7),R1		; Address past byte count
	MNEGL	#1,R4			; Standard device name
	JSB	G^IOC$CVT_DEVNAM	; convert to regular device name
	POPL	R7			; Restore R7
	BLBS	R0,50$			; skip this device if error
	;
	; This terminal failed, reset and loop
	;
40$:
	BSBW	UNLOCK_DB		; unlock database
	INCW	BRK$W_REFUSEDCNT(R6)	; Increment
	BRW	GET_NEXT_TERMINAL	; Loop
50$:
	MOVB	R1,BRK$T_DEVNAME(R6)	; Length of string
	MOVL	R5,BRK$L_UCBCTX(R6)	; save UCB address
	;
	; set up TRMNAME for mailbox message
	;
	MOVW	UCB$W_UNIT(R5),-
		BRK$W_TRMUNIT(R6)	; unit number
	MOVL	UCB$L_DDB(R5),R0	; Fetch DDB 
	MOVQ	DDB$T_NAME(R0),-
		BRK$T_TRMNAME(R6) 	; set TRMNAME (first half)
	MOVQ	DDB$T_NAME+8(R0),-
		BRK$T_TRMNAME+8(R6) 	; set TRMNAME (second half)
	MOVZBL	#SS$_NORMAL,R0		; set success
	RSB

LOCKDB:
	BBSS	#BRK$V_LOCKED,-
		BRK$B_STS(R6),10$ 	; set locked flag
	MOVL	BRK$L_PCB(R6),R4	; Set PCB address
	JSB	G^SCH$IOLOCKR		; lock I/O database for read access
10$:	RSB


	.SBTTL	FIND_NEXT_TERM - Search I/O database
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Given the UCB context of the last terminal, find the next
;	terminal that qualifies. Terminal must be online.
;
;	If looking for all terminals, an unowned terminal is skipped
;	if autobauding.	
;
; CALLING SEQUENCE:
;
;	BSBW	FIND_NEXT_TERM
;
; INPUT PARAMETERS:
;
;	R6 - BRK
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R5 - points to UCB
;
; COMPLETION CODES:
;
;	R0 = 1, R5 is UCB
;	R0 = 0, no more terminals
;
;	All other registers preserved.
;
; SIDE EFFECTS:
;	NONE
;
;--

FIND_NEXT_TERM:
	
	PUSHR	#^M<R10,R11>		; Save
	MOVQ	BRK$L_UCBCTX(R6),R10	; ucb and ddb pair

	BEQL	20$			; *** TEMP	
	CLRL	R0			; *** TEMP 
	CMPL	#-1,UCB$L_LINK(R10)	; *** TEMP until SCAN_IODB enhanced
	BEQL	40$			; *** TEMP  to handle missing UCBs	
20$:
	JSB	G^IOC$SCAN_IODB		; Fetch next UCB
	BLBC	R0,40$			; branch if done
;
; Have valid UCB, see if it's a terminal
;	
	BBC	#DEV$V_TRM,-
		UCB$L_DEVCHAR(R10),20$	; Get next if not terminal
	BBC	#UCB$V_ONLINE,-
		UCB$W_STS(R10),20$	; next ucb if offline
	TSTW	UCB$W_REFC(R10)		; terminal allocated?
	BNEQ	30$			; yes, do write
	CMPW	#BRK$C_ALLTERMS,-
		BRK$W_SENDTYPE(R6)	; for all terminals?
	BNEQ	20$			; no, try next
	BBC	#TT2$V_AUTOBAUD,-
		UCB$L_DEVDEPND2(R10),30$ ; branch if not autobaud
	INCW	BRK$W_REFUSEDCNT(R6)	; Refused due to autobaud
	BRB	20$			; try again

30$:	MOVL	R10,R5			; Set output
	MOVQ	R10,BRK$L_UCBCTX(R6)	; save ucb and ddb pair

40$:	POPR	#^M<R10,R11>		; Restore
	RSB				; Return (assumes R0 unmodified from 
					; 	  call above)



	.SBTTL	QIO_DONE - process qio completion

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Completion AST routine for QIO to terminal.
;
; CALLING SEQUENCE:
;	
;	CALLG (as an AST)
;
; INPUT PARAMETERS:
;
;	4(AP) - Address of per QIO context within BRK
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	
;	May result in another QIO being performed or 
;	completion of service.
;
;--

QIO_DONE:	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	MOVL	4(AP),R7		; QIO context
	MOVL	BRK2$L_COMMON(R7),R6	; BRK common area

	MOVQ	BRK$Q_TIMEOUT(R6),-
		BRK$Q_TIMEOUT(R6)	; Time out specified?
	BEQL	20$			; branch if no
	$CANTIM_S REQIDT = R7		; Cancel timer
20$:
	$DASSGN_S CHAN = BRK2$W_CHAN(R7) ; Deassign channel
	;
	; check IOSB
	;
	MOVZWL	BRK2$Q_IOSB(R7),R0	; Fetch status
	BLBS	R0,30$			; branch if no error
	CMPW	#SS$_CANCEL,R0		; Make sure it was cancel (from timeout)
	BEQL	40$			; 
	CMPW	#SS$_ABORT,R0		; Make sure it was cancel (from timeout)
	BEQL	40$			; 
	INCW	BRK$W_REFUSEDCNT(R6)	; One more non-successful completion
	BRB	40$			; continue
30$:
	INCW	BRK$W_SUCCESSCNT(R6)	; One more successful completion
40$:
	DECW	BRK$W_OUTCNT(R6)	; One less outstanding
	BSBW	DO_WRITE		; Do next write with this context
	BLBS	R0,100$			; branch if success

	BSBB	CHECK_COMPLETE		; check for completion
100$:	RET				; exit ast

	.SBTTL	CHECK_COMPLETE - Check completion criterion
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	See if service is done with all it's duties and
;	complete if so.
;
; CALLING SEQUENCE:
;
;	BSBW	CHECK_COMPLETE
;
; INPUT PARAMETERS:
;
;	R6 - BRK
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	
;	R0, R1 destroyed
;
;--

CHECK_COMPLETE:
	TSTW	BRK$W_OUTCNT(R6)	; I/O still outstanding?
	BEQL	10$			; branch if done
	RSB				; otherwise, exit
	;	
	; Return status and complete service
	;
10$:
	MOVL	BRK$L_IOSB(R6),R1	; return IOSB
	BEQL	30$			; Branch if none
	BLBC	BRK$W_STATUS(R6),20$	; Branch if other error occurred
	TSTW	BRK$W_SUCCESSCNT(R6)	; any messages sent?
	BNEQ	20$			; branch if yes
	MOVW	#SS$_DEVOFFLINE,-
		BRK$W_STATUS(R6)	; set device off line
20$:	MOVQ	BRK$W_STATUS(R6),(R1)	; Return status and counts
	;
	; Deliver AST if necessary
	;
30$:
	MOVL	BRK$L_ASTADR(R6),R1	; Fetch address
	BEQL	40$			; Branch if no AST
	MOVZBL	BRK$B_PRVMODE(R6),R0	; Set previous mode

; DESIGN NOTE: *** Should AST quota be taken at initiation of service?
;	If so - must use SCH$QAST here (to return quota).
;	Does this imply non-paged pool for ACB? Could be a problem.
;
	$DCLAST_S -
		ASTADR = (R1),-			; AST routine
		ASTPRM = BRK$L_ASTPRM(R6),-	; AST parameter
		ACMODE = R0		   	; access mode of caller
	;
	; Set Event Flag Number
	;
40$:
	MOVZWL	BRK$W_EFN(R6),R1	; Fetch number
	$SETEF_S EFN = R1		; Set efn
	;
	; Return storage
	;

; R6 - BRK

RETURN_MEMORY:

	PUSHL	R0			; Save
	MOVL	R6,R0			; Address of block
	MOVZWL	BRK$W_SIZE(R6),R1	; Size
	JSB	G^EXE$DEAP1		; Deallocate
	POPL	R0			; Restore
	RSB				; Return

	.SBTTL	QIO_TIMEOUT - process qio timeout

;++
;
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;	NONE
;
; INPUT PARAMETERS:
;
;	4(AP) - QIO context address
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

QIO_TIMEOUT:	.WORD	^M<R6>

	MOVL	4(AP),R0		; Fetch context
	MOVL	BRK2$L_COMMON(R0),R6	; fetch common area address
	INCW	BRK$W_TIMEOUTCNT(R6)	; increment time out count ???
	$CANCEL_S BRK2$W_CHAN(R0)	; Cancel I/O, wait for qio_done ast
	RET



	.ENTRY	EXE$BRDCST, ^M<R2,R3,R4,R5,R6>	; OLD SYS$BRDCST...

	MOVAB	G^EXE$SIGTORET,(FP)	; Set condition handler

	MOVL	4(AP),R1		; Get message address
	;
	; Figure out send type
	;	
	MOVZBL	#BRK$C_ALLTERMS,R3	; Assume all terminals
	MOVL	8(AP),R2		; Fetch descriptor address
	BEQL	20$			; Branch if all terminals
	MOVZBL	#BRK$C_ALLUSERS,R3	; Assume all users
	TSTL	(R2)			; Check length
	BEQL	20$			; Branch if zero
	MOVZBL	#BRK$C_DEVICE,R3	; Must be terminal name
20$:
	CLRL	R4			; Clear R4 - no flags
	MOVZBL	#^A/ /,R5		; Default carcon if only 2 parameters
	CMPL	#4,(AP)			; More parameters?
	BNEQ	30$			; Branch if no
	MOVQ	12(AP),R4		; Flags and carcon
30$:
	MOVAQ	-(SP),R6		; allocate IOSB on stack
	$BRKTHRUW_S	- 		; Call breakthru and wait
		EFN    = #BRK_C_BRDCSTEFN,-
		MSGBUF = (R1),-
		SENDTO = (R2),-
		SNDTYP = R3,-
		FLAGS  = R4,-
		CARCON = R5,-
		TIMOUT = #10,-		; *** SYSGEN PARAMETER ???
		IOSB   = (R6)
	BLBC	R0,60$			; Branch if error
	MOVZWL	(R6),R0			; Use IOSB status
60$:
	CMPL	#SS$_NOOPER,R0		; new status?
	BNEQU	70$			; nope, exit
	MOVZWL	#SS$_NOPRIV,R0		; set status
70$:	RET				; EXIT

.END
