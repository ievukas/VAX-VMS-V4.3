MODULE ACPCNTRL (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This module implements the ACP control I/O function.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  23-May-1979  17:07
!
! MODIFIED BY:
!
!	V03-020	CDS0010		Christian D. Saether	 4-Aug-1984
!		Fix a bug in lock_volume which can leave current_ucb
!		zero on incomplete volume sets.
!		Modify l_map_pointer linkage to declare notused registers.
!
!	V03-019	ACG0438		Andrew C. Goldstein,	18-Jul-1984  19:21
!		Add cache flush control function; use central routine
!		for all simple $DEQ's.
!
!	V03-018	CWH3018		CW Hobbs		 27-Jul-1984
!		Fix broken branch.
!
!	V03-017	CDS0009		Christian D. Saether	 8-May-1984
!		Set NOALLOC on lock_vol function to prevent the
! 		process that holds the lock from modifying the
! 		volume structure itself.
!
!	V03-016	CDS0008		Christian D. Saether	27-Dec-1983
!		Use BIND_COMMON macro.  Adjust routine and external
!		declarations.
!
!	V03-015	CDS0007		Christian D. Saether	18-Oct-1983
!		Clear NOALLOC on unlock to be more compatible with
!		previous behavior.
!
!	V03-014	CDS0006		Christian D. Saether	17-Oct-1983
!		Do request block checking here except for null
!		control function.
!		Also update volume free space in value block on
!		unlock function to correctly propagate through cluster.
!
!	V03-013	CDS0005		Christian D. Saether	14-Oct-1983
!		LOCK_VOL now blocks all volume modification activity
!		instead of setting NOALLOC flag.
!
!	V03-012	CDS0004		Christian D. Saether	 3-Oct-1983
!		Take out allocation lock prior to reading SCB.
!
!	V03-011	CDS0003		Christian D. Saether	14-Sep-1983
!		Modify interface to SERIAL_FILE.
!
!	V03-010	CDS0002		Christian D. Saether	 5-May-1983
!		Interlock processing on REMAP_FILE call with
!		SERIAL_FILE routine.
!
!	V03-009	CDS0001		Christian D. Saether	 6-Jan-1983
!		Changes to accomodate cluster dismount.  Decrement
!		write counter in the SCB.
!
!	V03-008	LMP0027		L. Mark Pilant,		18-May-1982  11:20
!		Rearrange some code sequences to avoid the possibility of
!		taking a page fault at an elevated IPL.
!
!	V03-007	ACG0285		Andrew C. Goldstein,	12-Apr-1982  17:24
!		Fix cathedral window logic for empty headers,
!		do not unlock volume if there is no storage map
!
!	V03-006	LMP0019		L. Mark Pilant,		 1-Apr-1982  14:20
!		Correct a boundary condition that would cause windows to
!		be corrupted.
!
!	V03-001	LMP0016		L. Mark Pilant,		25-Mar-1982  13:35
!		Remove diddling of the COMPLETE bit in the window segments.
!		Also, fix a bug that caused the system to crash if a remap
!		was forced on a file whose corresponding window did not start
!		with VBN 1.
!
!	V02-004	LMP0012		L. Mark Pilant,		15-Mar-1982  16:00
!		Add a routine to set WCB$M_COMPLETE in all the window
!		segments if the remap succeeds.
!
!	V02-003	LMP0003		L. Mark Pilant,		25-Nov-1981  11:40
!		Add routine to remap a file into multiple windows.
!
!	V02-002	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:24
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

!
! Range of control function codes recognized by this module.
!

LITERAL
	MIN_CNTRLFUNC	= MINU (FIB$C_LOCK_VOL,
				FIB$C_UNLK_VOL,
				FIB$C_ENA_QUOTA,
				FIB$C_ADD_QUOTA,
				FIB$C_EXA_QUOTA,
				FIB$C_MOD_QUOTA,
				FIB$C_REM_QUOTA,
				FIB$C_DSA_QUOTA,
				FIB$C_REMAP,
				FIB$C_FLUSH_CACHE
				),

	MAX_CNTRLFUNC	= MAXU (FIB$C_LOCK_VOL,
				FIB$C_UNLK_VOL,
				FIB$C_ENA_QUOTA,
				FIB$C_ADD_QUOTA,
				FIB$C_EXA_QUOTA,
				FIB$C_MOD_QUOTA,
				FIB$C_REM_QUOTA,
				FIB$C_DSA_QUOTA,
				FIB$C_REMAP,
				FIB$C_FLUSH_CACHE
				),

	MIN_CACHE_CODE	= MINU (FIB$C_FID_CACHE,
				FIB$C_EXTENT_CACHE,
				FIB$C_QUOTA_CACHE
				),

	MAX_CACHE_CODE	= MAXU (FIB$C_FID_CACHE,
				FIB$C_EXTENT_CACHE,
				FIB$C_QUOTA_CACHE
				);

FORWARD ROUTINE
	ACPCONTROL	: L_NORM,	! ACPCONTROL function routine
	DISMOUNT	: L_NORM,	! do volume dismount processing
	LOCK_VOLUME	: L_NORM,	! lock or unlock volume
	MARK_CATHEDRAL	: NOVALUE,	! flag window as being cathedral
	ADD_WINDOW	: NOVALUE,	! add a window to the queue
	REMOVE_WINDOW	: NOVALUE,	! remove and deallocate a window segment
	LAST_SEGMENT	: NOVALUE;	! set the window as the last segment

GLOBAL ROUTINE ACPCONTROL : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine implements the ACP control I/O function. It sets up
!	context and dispatches on the control function.
!
! CALLING SEQUENCE:
!	ACPCONTROL ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CLEANUP_FLAGS: cleanup action and status flags
!	IO_PACKET: address of I/O request packet
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	assorted status values
!
! SIDE EFFECTS:
!	control function executed
!
!--

BEGIN

LOCAL
	FIB		: REF BBLOCK,	! address of user FIB
	ABD		: REF BBLOCK,	! address of buffer descriptor
	STATUS;				! return status from called routine

BIND_COMMON;

EXTERNAL ROUTINE
	START_REQUEST	: L_JSB ADDRESSING_MODE (GENERAL), ! request blocking check
	SERIAL_FILE	: L_NORM,	! serialize file processing
	GET_FIB		: L_NORM,	! get user FIB
	REMAP_FILE	: L_NORM NOVALUE,! remap the file into segmented windows
	QUOTA_FILE_OP	: L_NORM,	! quota file maint operation
	CONN_QFILE	: L_NORM,	! connect quota file
	ALLOCATION_LOCK	: L_NORM,	! acquire volume allocation lock
	DELETE_FID	: L_NORM,	! free file ID or flush file ID cache
	PURGE_EXTENT	: L_NORM,	! purge out extent cache
	FLUSH_QUO_CACHE	: L_NORM;	! flush out quota cache


! Set up control block pointers. If there is no complex buffer packet, then
! this is an I/O kill call, which is a NOP.
!

IF NOT .IO_PACKET[IRP$V_COMPLX] THEN RETURN 1;

ABD = .BBLOCK [.IO_PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];
FIB = GET_FIB (.ABD);

IF .FIB[FIB$W_CNTRLFUNC] EQL 0
   AND NOT .BBLOCK [IO_PACKET[IRP$W_FUNC], IO$V_DMOUNT]
THEN RETURN 1;				! 0 is a NOP

! Case on the control function and stall for the volume blocking lock
! as necessary.
!

CASE .FIB[FIB$W_CNTRLFUNC] FROM MIN_CNTRLFUNC TO MAX_CNTRLFUNC OF
    SET

    [FIB$C_ADD_QUOTA]:	BEGIN
			IF .BLOCK_LOCKID EQL 0
			THEN
			    BEGIN
			    START_REQUEST ();
			    BLOCK_CHECK = 1;
			    END;
			END;

    [INRANGE, OUTRANGE]: 0;

    TES;

IF .BBLOCK [IO_PACKET[IRP$W_FUNC], IO$V_DMOUNT]
THEN RETURN DISMOUNT ();

! Dispatch on the control function.
!

CASE .FIB[FIB$W_CNTRLFUNC] FROM MIN_CNTRLFUNC TO MAX_CNTRLFUNC OF
    SET

    [FIB$C_REMAP]:	BEGIN
			LOCAL
			    FCB : REF BBLOCK;

			FCB = .CURRENT_WINDOW [WCB$L_FCB];

			PRIM_LCKINDX = SERIAL_FILE (FCB [FCB$W_FID]);

			REMAP_FILE ();
			END;

    [FIB$C_LOCK_VOL,
     FIB$C_UNLK_VOL]:	BEGIN
			IF NOT .CLEANUP_FLAGS[CLF_SYSPRV]
			THEN ERR_EXIT (SS$_NOPRIV);
			KERNEL_CALL (LOCK_VOLUME, .FIB[FIB$W_CNTRLFUNC]);
			END;

    [FIB$C_ENA_QUOTA]:	CONN_QFILE (.ABD, .FIB);

    [FIB$C_ADD_QUOTA,
     FIB$C_EXA_QUOTA,
     FIB$C_MOD_QUOTA,
     FIB$C_REM_QUOTA,
     FIB$C_DSA_QUOTA]:	QUOTA_FILE_OP (.ABD, .FIB);

    [FIB$C_FLUSH_CACHE]:
			BEGIN
			ALLOCATION_LOCK ();
			CASE .FIB[FIB$L_CNTRLVAL]
			FROM MIN_CACHE_CODE TO MAX_CACHE_CODE OF
			    SET

			    [FIB$C_FID_CACHE]:	DELETE_FID (0);

			    [FIB$C_EXTENT_CACHE]: PURGE_EXTENT (0,0);

			    [FIB$C_QUOTA_CACHE]: FLUSH_QUO_CACHE ();

			    [INRANGE,
			     OUTRANGE]:		ERR_EXIT (SS$_ILLIOFUNC);

			    TES;
			END;

    [INRANGE,
     OUTRANGE]:		ERR_EXIT (SS$_ILLIOFUNC);

    TES;

RETURN 1;

END;					! end of routine ACPCONTROL

ROUTINE DISMOUNT : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine handles the DISMOUNT subfunction of the ACPCONTROL
!	function. It reads the volume's storage control block, clears the
!	status bits, and rewrites the block to indicate that the volume
!	has been properly dismounted. (Once a volume is marked for dismount,
!	all deferred write cacheing, etc., is turned off.)
!	The file ID, extent, and quota caches are also flushed.
!
!
! CALLING SEQUENCE:
!	DISMOUNT ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!	CURRENT_UCB: UCB of volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 if success
!
! SIDE EFFECTS:
!	storage control block rewritten
!
!--

BEGIN

LOCAL
	SCB		: REF BBLOCK;	! buffer containing storage control block

BIND_COMMON;

EXTERNAL ROUTINE
	ALLOCATION_LOCK	: L_NORM,	! synchronize allocation/deallocation
	DELETE_FID	: L_NORM,	! free file ID or flush file ID cache
	PURGE_EXTENT	: L_NORM,	! purge out extent cache
	FLUSH_QUO_CACHE	: L_NORM,	! flush out quota cache
	READ_BLOCK	: L_NORM,	! read a disk block
	WRITE_BLOCK	: L_NORM,	! write a disk block
	CHECKSUM	: L_NORM;	! compute block checksum


! Flush the caches and clear the SCB flags if the volume is not write
! locked or allocation locked.
!

IF NOT (.CURRENT_VCB[VCB$V_NOALLOC]
	OR .BBLOCK [CURRENT_UCB[UCB$L_DEVCHAR], DEV$V_SWL])
THEN
    BEGIN
    ALLOCATION_LOCK ();
    DELETE_FID (0);
    PURGE_EXTENT (0, 0);
    FLUSH_QUO_CACHE ();

    SCB = READ_BLOCK (.CURRENT_VCB[VCB$L_SBMAPLBN] - 1, 1, BITMAP_TYPE);
    SCB [SCB$W_WRITECNT] = .SCB [SCB$W_WRITECNT] - 1;
    IF .SCB [SCB$W_WRITECNT] EQL 0
    THEN
	SCB[SCB$L_STATUS] = 0;
    CHECKSUM (.SCB);
    WRITE_BLOCK (.SCB);
    END;

1
END;					! end of routine DISMOUNT

GLOBAL ROUTINE REMAP_FILE : NOVALUE L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called when it becomes necessary to guarantee that
!	the entire file is mapped.  This is done by creating, if necessary,
!	multiple WCB's and linking them together.
!
! CALLING SEQUENCE:
!	REMAP_FILE ()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	PRIMARY_FCB: address of the current primary FCB
!	CURRENT_WINDOW: address of the current primary window segment
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	As many WCB's as are needed are allocated and linked to provide
!	mapping for the extire file.  Any errors are noted for the user.
!
!--

BEGIN

LINKAGE
	L_MAP_POINTER_A	= JSB:
		  GLOBAL (HEADER_COUNT = 6, HDR_LBN = 7, HEADER_POINTER = 8)
		  NOTUSED (2,3,4,5,9,10,11);

GLOBAL REGISTER
	HEADER_COUNT	= 6,		! retrieval pointer count
	HDR_LBN		= 7,		! retrieval pointer start LBN
	HEADER_POINTER	= 8 : REF BBLOCK;	! pointer into map area

LABEL
	HEADER_CHECK,			! loop to check window/header correspondence
	WINDOW_TRUNCATE;		! loop to match up last FCB with a window
LOCAL
	WINDOW_SEGMENT	: REF BBLOCK,	! address of the next window segment
	OLD_WINDOW	: REF BBLOCK,	! the original window
	NEW_WINDOW	: REF BBLOCK,	! the new window list
	FCB		: REF BBLOCK,	! address of the current FCB
	LAST_FCB	: REF BBLOCK,	! address of the last FCB
	HEADER		: REF BBLOCK,	! address of the header owned by an FCB
	HEADER_VBN,			! current VBN in the header
	NEXT_SEGMENT	: REF BBLOCK,	! address of the segment after the next
	WINDOW_POINTER	: REF BBLOCK,	! address of the window map area
	WINDOW_VBN,			! current VBN in the window
	WINDOW_ENDVBN;			! ending VBN of the window

BIND_COMMON;

EXTERNAL ROUTINE
	DEALLOCATE	: L_NORM,	! deallocate a block of memory
	READ_HEADER	: L_NORM,	! read a file header specified by FCB
	TURN_WINDOW	: L_NORM,	! map the file header specified
	MARK_COMPLETE	: L_NORM NOVALUE,! mark all windows as complete
	MARK_INCOMPLETE	: L_NORM;	! mark all window segments as incomplete

EXTERNAL ROUTINE
	GET_MAP_POINTER	: L_MAP_POINTER_A;	! get next pointer from header

! Make sure that a file is there.
!

IF .CURRENT_WINDOW EQL 0 THEN ERR_EXIT (SS$_FILNOTACC);

! Make sure it is actually necessary to do the remap operation.
!

IF .CURRENT_WINDOW[WCB$V_COMPLETE]
AND .CURRENT_WINDOW[WCB$V_CATHEDRAL]
THEN RETURN;

! If there is a file accessed, try to build any necessary window segments.
! There are three cases which can arise in trying to remap the entire file.
! 1) The window completely maps the file but it was not required to; in this
! case it is simply necessary to set WCB$V_CATHEDRAL. 2) The window was
! previously complete, but is no longer due to an extension of the file; in
! this case is is necessary to add the new window pointers to the last window
! segment (which may be the primary window). 3) The file was never completely
! mapped. In this case there are no special special conditions to consider.
! All that is necessary is to traverse the linked FCB's to build the window
! segments.
!

! First case; WCB$V_COMPLETE is set. Simply set WCB$V_CATHEDRAL and return.
!

IF .CURRENT_WINDOW[WCB$V_COMPLETE] AND NOT .CURRENT_WINDOW[WCB$V_CATHEDRAL]
THEN
    BEGIN
    KERNEL_CALL (MARK_CATHEDRAL, .CURRENT_WINDOW);
    RETURN;
    END;

! Second case; the file was previously mapped complete. Locate the FCB which
! corresponds to the last window segment and start adding from there.
!

IF .CURRENT_WINDOW[WCB$V_CATHEDRAL]
THEN
    BEGIN
    WINDOW_SEGMENT = .CURRENT_WINDOW;
    FCB = .PRIMARY_FCB;

    UNTIL .WINDOW_SEGMENT[WCB$L_LINK] EQL 0
    DO WINDOW_SEGMENT = .WINDOW_SEGMENT[WCB$L_LINK];
    NEW_WINDOW = .WINDOW_SEGMENT;		! remember current end point

    WINDOW_ENDVBN = .WINDOW_SEGMENT[WCB$L_STVBN];
    WINDOW_POINTER = .WINDOW_SEGMENT + WCB$C_MAP;
    DECR J FROM .WINDOW_SEGMENT[WCB$W_NMAP] TO 1 DO
	BEGIN
	WINDOW_ENDVBN = .WINDOW_ENDVBN + .WINDOW_POINTER[WCB$W_COUNT];
	WINDOW_POINTER = .WINDOW_POINTER + 6;
	END;

    HEADER_CHECK: BEGIN
    LAST_FCB = .FCB;				! in case only 1 FCB
    DO
	BEGIN
	IF .FCB[FCB$L_STVBN] GTR .WINDOW_ENDVBN THEN EXITLOOP 0;
	LAST_FCB = .FCB;
	FCB = .FCB[FCB$L_EXFCB];
	END
    UNTIL .FCB EQL 0;
    FCB = .LAST_FCB;
    HEADER = READ_HEADER (0, .FCB);
    HEADER_VBN = .FCB[FCB$L_STVBN];
    HEADER_POINTER = .HEADER + .HEADER[FH2$B_MPOFFSET]*2;
    IF .WINDOW_ENDVBN EQL .HEADER_VBN THEN LEAVE HEADER_CHECK;
    UNTIL .HEADER_POINTER GEQA .HEADER + (.HEADER[FH2$B_MPOFFSET] + .HEADER[FH2$B_MAP_INUSE]) * 2
    DO
	BEGIN
	GET_MAP_POINTER ();
	IF .WINDOW_ENDVBN GEQ .HEADER_VBN
	AND .WINDOW_ENDVBN LSS .HEADER_VBN + .HEADER_COUNT
	THEN LEAVE HEADER_CHECK;
	HEADER_VBN = .HEADER_VBN + .HEADER_COUNT;
	END;
    FCB = .FCB[FCB$L_EXFCB];

! The last VBN mapped does not have a corresponding FCB.  In this case it
! is necessary to locate the window segment that corresponds to the last
! FCB.
!

    WINDOW_SEGMENT = .CURRENT_WINDOW;
    WINDOW_TRUNCATE: BEGIN
    DO
	BEGIN
	WINDOW_VBN = .WINDOW_SEGMENT[WCB$L_STVBN];
	IF .WINDOW_VBN EQL .HEADER_VBN THEN LEAVE WINDOW_TRUNCATE;
	WINDOW_POINTER = .WINDOW_SEGMENT + WCB$C_MAP;
	DECR J FROM .WINDOW_SEGMENT[WCB$W_NMAP] TO 1 DO
	    BEGIN
	    WINDOW_VBN = .WINDOW_VBN + .WINDOW_POINTER[WCB$W_COUNT];
	    WINDOW_POINTER = .WINDOW_POINTER + 6;
	    IF .WINDOW_VBN EQL .HEADER_VBN THEN LEAVE WINDOW_TRUNCATE;
	    END;
	WINDOW_SEGMENT = .WINDOW_SEGMENT[WCB$L_LINK];
	END
    UNTIL .WINDOW_SEGMENT EQL 0;

    BUG_CHECK (WCBFCBMNG, FATAL 'WCB/FCB correspondence broken');

    END;				! end of block WINDOW_TRUNCATE

! The window which corresponds to the last FCB has been found.  Truncate the
! current window and remove any succeeding window segments.
!

    FCB = .LAST_FCB;
    NEXT_SEGMENT = .WINDOW_SEGMENT[WCB$L_LINK];
    KERNEL_CALL (LAST_SEGMENT, .WINDOW_SEGMENT);	! current segment is now the end
    UNTIL .NEXT_SEGMENT EQL 0
    DO
	BEGIN
	LOCAL	JUNK_SEGMENT	: REF BBLOCK;	! address of block to deallocate
	JUNK_SEGMENT = .NEXT_SEGMENT;
	NEXT_SEGMENT = .NEXT_SEGMENT[WCB$L_LINK];
	KERNEL_CALL (REMOVE_WINDOW, .JUNK_SEGMENT);
	END;

    END;				! end of block HEADER_CHECK

! Map any additional file headers or rebuild the last window if cleaning up
! from an extend operation.
!

    WHILE 1 DO
	BEGIN
	KERNEL_CALL (TURN_WINDOW, .WINDOW_SEGMENT, .HEADER, 1, .FCB[FCB$L_STVBN]);
	IF .CLEANUP_FLAGS[CLF_INCOMPLETE]
	THEN
	    BEGIN
	    KERNEL_CALL (MARK_INCOMPLETE, .CURRENT_WINDOW);
	    ERR_EXIT (SS$_EXBYTLM);
	    END;
	IF .FCB[FCB$L_EXFCB] EQL 0 THEN EXITLOOP 0;
	UNTIL .WINDOW_SEGMENT[WCB$L_LINK] EQL 0
	DO WINDOW_SEGMENT = .WINDOW_SEGMENT[WCB$L_LINK];
	FCB = .FCB[FCB$L_EXFCB];
	HEADER = READ_HEADER (0, .FCB);
	END;

    WINDOW_SEGMENT = .NEW_WINDOW[WCB$L_LINK];
    UNTIL .WINDOW_SEGMENT EQL 0
    DO
	BEGIN
	KERNEL_CALL (ADD_WINDOW, .WINDOW_SEGMENT, .PRIMARY_FCB[FCB$L_WLBL]);
	WINDOW_SEGMENT = .WINDOW_SEGMENT[WCB$L_LINK];
	END;

    KERNEL_CALL (MARK_COMPLETE, .CURRENT_WINDOW);
    RETURN;
    END;

! Third case; the file was never completely mapped. For this case no special
! precautions need to be taken. Simply loop through all the FCB's associated
! with the file, and create as many window segments as necessary.
!

FCB = .PRIMARY_FCB;
WINDOW_SEGMENT = .CURRENT_WINDOW;
KERNEL_CALL (MARK_CATHEDRAL, .WINDOW_SEGMENT);	!build cathedral windows

! Now build the new windows using the original primary window as the base
! for the new window segments.  This is necessary to aviod having to mung
! the primary window address which may reside in several places.  It also
! means that if an error occurs, the new window created will be valid, but
! it will not be the same as it started out.
!

UNTIL .FCB EQL 0
DO
    BEGIN
    HEADER = READ_HEADER (0, .FCB);
    UNTIL .WINDOW_SEGMENT[WCB$L_LINK] EQL 0
    DO WINDOW_SEGMENT = .WINDOW_SEGMENT[WCB$L_LINK];
    KERNEL_CALL (TURN_WINDOW, .WINDOW_SEGMENT, .HEADER, 1, .FCB[FCB$L_STVBN]);
    IF .CLEANUP_FLAGS[CLF_INCOMPLETE]
    THEN
	BEGIN
	KERNEL_CALL (MARK_INCOMPLETE, .CURRENT_WINDOW);
	ERR_EXIT (SS$_EXBYTLM);
	END;
    FCB = .FCB[FCB$L_EXFCB];
    END;

WINDOW_SEGMENT = .CURRENT_WINDOW[WCB$L_LINK];
UNTIL .WINDOW_SEGMENT EQL 0
DO
    BEGIN
    KERNEL_CALL (ADD_WINDOW, .WINDOW_SEGMENT, .PRIMARY_FCB[FCB$L_WLBL]);
    WINDOW_SEGMENT = .WINDOW_SEGMENT[WCB$L_LINK];
    END;

KERNEL_CALL (MARK_COMPLETE, .CURRENT_WINDOW);
RETURN;

END;					! end of routine REMAP_FILE

GLOBAL ROUTINE LOCK_VOLUME (FUNC) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine either locks or unlocks the current volume (or volume
!	set), as indicated by the function argument. This routine must be
!	called in kernel mode.
!
! CALLING SEQUENCE:
!	LOCK_VOLUME (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: ACPCONTROL subfunction code
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	lock bit in VCB either set or cleared
!
!--

BEGIN

BIND_COMMON;

EXTERNAL ROUTINE
	ALLOCATION_LOCK	: L_NORM,
	ALLOCATION_UNLOCK : L_NORM,
	DEQ_LOCK	: L_NORM,	! dequeue a lock
	TAKE_BLOCK_LOCK	: L_NORM;

LOCAL
	RVT	: REF BBLOCK;

IF .FUNC EQL FIB$C_LOCK_VOL
THEN
    BEGIN
    IF .BLOCK_LOCKID EQL 0
    THEN
	BEGIN
	TAKE_BLOCK_LOCK ();

	IF .CURRENT_VCB [VCB$W_RVN] EQL 0
	THEN
	    CURRENT_VCB [VCB$V_NOALLOC] = 1
	ELSE
	    BEGIN
	    RVT = .CURRENT_VCB [VCB$L_RVT];
	    INCR J FROM 1 TO .RVT [RVT$B_NVOLS]
	    DO
		BEGIN
		LOCAL
		    UCB	: REF BBLOCK;

		UCB = .VECTOR [RVT [RVT$L_UCBLST], .J-1];

		IF .UCB NEQ 0
		    AND .BBLOCK [UCB [UCB$L_DEVCHAR], DEV$V_MNT]
		THEN
		    BBLOCK [.UCB [UCB$L_VCB], VCB$V_NOALLOC] = 1;
		END;
	    END;
	END;
    END
ELSE
    BEGIN
    LOCAL
	FREE_SPACE;

    IF .CURRENT_VCB [VCB$W_RVN] EQL 0
    THEN
	BEGIN
	IF .CURRENT_VCB [VCB$L_SBMAPLBN] NEQ 0
	THEN
	    CURRENT_VCB [VCB$V_NOALLOC] = 0;
	IF .BLOCK_LOCKID NEQ 0
	THEN
	    BEGIN
	    FREE_SPACE = .CURRENT_VCB [VCB$L_FREE];
	    ALLOCATION_LOCK ();
	    CURRENT_VCB [VCB$L_FREE] = .FREE_SPACE;
	    ALLOCATION_UNLOCK ();

	    DEQ_LOCK (.BLOCK_LOCKID);
	    BLOCK_LOCKID = 0;
	    END
	END
    ELSE
	BEGIN
	RVT = .CURRENT_VCB [VCB$L_RVT];
	INCR J FROM 1 TO .RVT [RVT$B_NVOLS]
	DO
	    BEGIN
	    LOCAL
		UCB;

	    UCB = .VECTOR [RVT [RVT$L_UCBLST], .J-1];
	    IF .UCB NEQ 0
	    THEN
		BEGIN

		CURRENT_UCB = .UCB;
		CURRENT_VCB = .CURRENT_UCB [UCB$L_VCB];

		IF .CURRENT_VCB [VCB$L_SBMAPLBN] NEQ 0
		THEN
		    CURRENT_VCB [VCB$V_NOALLOC] = 0;

		IF .BLOCK_LOCKID NEQ 0
		THEN
		    BEGIN
		    FREE_SPACE = .CURRENT_VCB [VCB$L_FREE];
		    ALLOCATION_LOCK ();
		    CURRENT_VCB [VCB$L_FREE] = .FREE_SPACE;
		    ALLOCATION_UNLOCK ();
		    END;
		END;
	    END;

	IF .BLOCK_LOCKID NEQ 0
	THEN
	    DEQ_LOCK (.BLOCK_LOCKID);

	BLOCK_LOCKID = 0;

	END;

    END;

RETURN 1;

END;					! end of routine LOCK_VOLUME

! The remaining routines must be locked into the working set as they run
! at an elevated IPL.

LOCK_CODE;

ROUTINE MARK_CATHEDRAL (WINDOW) : NOVALUE =

!++
!
! ROUTINE DESCRITION:
!
!	This routine is used to mark the specified window as a Cathedral
!	window.  It must be execured in kernel mode.
!
! CALLING SEQUENCE:
!	MARK_CATHEDRAL (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of the window to mark
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

MAP
	WINDOW		: REF BBLOCK;		! address of the window to mark

LOCAL
	P		: REF BBLOCK;		! copy of the window address

P = .WINDOW;

SET_IPL (IPL$_SYNCH);

IF NOT .P[WCB$V_COMPLETE]
THEN
    BEGIN
    P[WCB$L_STVBN] = 1;
    P[WCB$W_NMAP] = 0;
    END;

P[WCB$V_CATHEDRAL] = 1;			! mark the window

SET_IPL (0);

RETURN;

END;						! end of routine MARK_CATHEDRAL

ROUTINE ADD_WINDOW (WINDOW, QUEUE_HEAD) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the window specified into the queue specified. This
!	routine must be called in kernel mode.
!
! CALLING SEQUENCE:
!	ADD_WINDOW (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of the window segement to add
!	ARG2: address of the queue head
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

MAP
	WINDOW		: REF BBLOCK,		! address of the window segment
	QUEUE_HEAD	: REF BBLOCK;		! address of the queue head

INSQUE (.WINDOW, .QUEUE_HEAD);

RETURN;

END;						! end of routinr ADD_WINDOW

ROUTINE REMOVE_WINDOW (WINDOW) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes the specifed window from the queue.  It then
!	proceeds to deallocate the window.  This routine must be called in
!	kernel mode.
!
! CALLING SEQUENCE:
!	REMOVE_WINDOW (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of the window to remove
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

MAP
	WINDOW		: REF BBLOCK;		! address of the window

LOCAL
	DUMMY;					! temp storage for queue entry address

EXTERNAL ROUTINE
	DEALLOCATE;				! deallocate system dynamic memory

REMQUE (.WINDOW, DUMMY);
DEALLOCATE (.WINDOW);

RETURN;

END;						! end of routine REMOVE_WINDOW

ROUTINE LAST_SEGMENT (WINDOW) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine zaps the link pointer of the specified window segment
!	therefore making it the last segment in the Cathedral window.
!
! CALLING SEQUENCE:
!	LAST_SEGMENT (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of the window segment
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

MAP
	WINDOW		: REF BBLOCK;		! address of the window segment

WINDOW[WCB$L_LINK] = 0;

RETURN;

END;						! end of routine LAST_SEGMENT

END
ELUDOM
