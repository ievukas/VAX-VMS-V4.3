MODULE	OPC$CLUSUTIL	(
			 LANGUAGE (BLISS32),
			 IDENT = 'V04-000'
			) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:
!
!	OPCOM
!
! ABSTRACT:
!
!	This module contains all the various and sundry general
!	purpose utility routines used by cluster functions within OPCOM.
!
! Environment:
!
!	VAX/VMS operating system.
!
! Author:
!
!	CW Hobbs
!
! Creation date:
!
!	8 July 1983
!
! Revision history:
!
!	V03-004	CWH3004		CW Hobbs			21-May-1984
!		Allow wildcard $GETSYI to return SS$_NOSUCHNODE, as it will
!		do this if a node disappears while $GETSYI is working on
!		getting the info.
!
!	V03-003	CWH3169		CW Hobbs			5-May-1984
!		Second pass for cluster-wide OPCOM:
!		 - Change CLUSUTIL_CONFIGURE to have a value - true if the
!		   configuration changed, false if not.
!		 - Do not request ACK's when a node appears, wait for it to
!		   ask us for the ACK.  This avoids sending a message to
!		   a node before it is ready to listen.
!		 - Remove a check for NET0: being around, not necessary
!		   now that CSP does not use decnet.
!
!	V03-002	CWH3002		CW Hobbs		16-Sep-1983
!		Change error message for cluster errors
!
!
!--

BEGIN						! Start of CLUSUTIL

LIBRARY	'SYS$LIBRARY:LIB.L32';
LIBRARY 'LIB$:OPCOMLIB';

FORWARD ROUTINE
	CLUSUTIL_CONFIGURE,			! Reconfigure cluster systems
	CLUSUTIL_FIND_NOD_BY_CSID,		! Find the NOD for a given CSID
	CLUSUTIL_FIND_NOD_BY_NAME,		! Find the NOD for a given nodename
	CLUSUTIL_FIND_NOD_BY_SYSTEMID,		! Find the NOD for a given SYSTEMID
	CLUSUTIL_INCR_SEQUENCE,			! Increment a sequence number, cluster unique
	CLUSUTIL_INIT		: NOVALUE,	! Perform initialization functions related to clusters
	CLUSUTIL_NEXT_SEQUENCE,			! Increment global NEXT_SEQUENCE number, cluster unique
	CLUSUTIL_NODE_ACTIVATE : NOVALUE,	! Activate a node which has responded to our acknowledge req
	CLUSUTIL_NODE_INACTIVATE : NOVALUE,	! Inactivate a node which has disappeared
	CLUSUTIL_NODE_MESSAGE	: NOVALUE,	! Tell cluster operators about node changes
	CLUSUTIL_NODE_START	: NOVALUE,	! Initialize a node to the START state
	CLUSUTIL_SYSTEMID_EQUAL	: JSB_R0R1;	! Compare SCS system ids, return equivalence

EXTERNAL ROUTINE
	ALLOCATE_DS,
	CLUSMSG_RQCB_SEND,			! Send an RQCB to remote nodes
	DEALLOCATE_DS,
	DEALLOCATE_RQCB	: NOVALUE,		! Dispose of an RQCB
	FORMAT_MESSAGE,				! Format a message
	LOG_MESSAGE,				! Log an event
	NOTIFY_LISTED_OPERATORS;		! Notify interested operators

EXTERNAL LITERAL
	RQCB_K_TYPE,				! RQCB structure type
	MIN_SCOPE,				! Minimum scope value
	MAX_SCOPE,				! Maximum scope value
	NOD_K_TYPE;

EXTERNAL
	OCD_VECTOR	: VECTOR,		! OCD list heads
	SEQ_WIDTH_DEF	: LONG,			! Width of node information when cluster is active
	SEQ_WIDTH	: LONG,			! Width of node information
	SEQ_SEED	: LONG,			! Some bits of local node info
	NEXT_SEQUENCE	: LONG,			! Next sequence number for data structures, etc
	GLOBAL_STATUS	: BITVECTOR [32],
	LCL_CSID	: LONG,
	LCL_NOD		: $ref_bblock,
	NOD_HEAD	: VECTOR [2, LONG];

BUILTIN
	INSQUE,
	REMQUE;

OWN
	NODE_CSID	: LONG,
	SYSTEMID	: VECTOR [6, BYTE],
	SWINCARN	: VECTOR [2, LONG],
	NAME_BUF	: VECTOR [16, BYTE],
	NAME_LEN	: LONG,
	CLUSTER_FLAG	: LONG,
	SYI_CSID	: VECTOR [4, LONG]	! GETSYI list to get CSID and MEMBER items only
			INITIAL	 ((SYI$_NODE_CSID^16 + 4),
				  NODE_CSID,
				  0,
				  0),
	SYI_NODE	: VECTOR [16, LONG]	! GETSYI list
			INITIAL  ((SYI$_NODE_CSID^16 + 4),
				  NODE_CSID,
				  0,
				  (SYI$_CLUSTER_MEMBER^16 OR 4),
				  CLUSTER_FLAG,
				  0,
				  (SYI$_NODE_SYSTEMID^16 + 6),
				  SYSTEMID,
				  0,
				  (SYI$_NODE_SWINCARN^16 + 8),
				  SWINCARN,
				  0,
				  (SYI$_NODENAME^16 + 16),
				  NAME_BUF,
				  NAME_LEN,
				  0);

GLOBAL ROUTINE CLUSUTIL_CONFIGURE =		%SBTTL 'clusutil_configure'

!++
! Functional description:
!
!	Compare cluster configuration database with reality, and make any adjustments
!	which are necessary.
!
! Input:
!	None.
!
! Implicit Input:
!	None.
!
! Output:
!	None.
!
! Implict output:
!	Global data may be altered
!
! Side effects:
!	Messages will be sent to cluster operators if there are any changes.
!
! Routine value:
!	True if change in configuration, false otherwise
!--

BEGIN						! Start of CLUSUTIL_CONFIGURE

ROUTINE REMOVE_NODE (SCS_ID : REF VECTOR [3, WORD], QUEUE : REF VECTOR [2,LONG]) =
BEGIN
BUILTIN
    REMQUE;
LOCAL
    PTR : $ref_bblock;
!
! Loop through all the nodes on the queue, remove an entry if it matches the SYSTEMID
!
PTR = .QUEUE [0];
WHILE .PTR NEQ QUEUE [0]
DO
    BEGIN
    IF CLUSUTIL_SYSTEMID_EQUAL (.SCS_ID, PTR [NOD_T_NODE_SYSTEMID])
    THEN
	BEGIN
	REMQUE (.PTR, PTR);
	RETURN .PTR;
	END;
    PTR = .PTR [NOD_L_FLINK];
    END;
RETURN 0;
END;

LOCAL
	CHANGE,
	NOD		: $ref_bblock,		! Local pointer
	WILD		: LONG,
	TEMP_Q		: VECTOR [2,LONG]
			INITIAL (TEMP_Q, TEMP_Q),
	STATUS		: LONG;

CHANGE = FALSE;					! Assume no change in the configuration
!
! If not in a cluster we are done.
!
IF (NOT .GLOBAL_STATUS [GBLSTS_K_IN_VAXcluster])
THEN
    RETURN .CHANGE;
!
! Move all the node entries to our temporary queue, making sure that the nodes are still active
!
WHILE NOT REMQUE (.NOD_HEAD [0], NOD)
DO
    BEGIN
    !
    ! Get cluster information for this node.  Looking for CSID is enough.
    !
    STATUS = $GETSYIW (CSIDADR=NOD [NOD_L_NODE_CSID], ITMLST=SYI_CSID);
    IF NOT .STATUS
    THEN
	BEGIN
	!
	! Place the node in the "departed" state, and all that that entails
	!
	CLUSUTIL_NODE_INACTIVATE (.NOD);
	CHANGE = TRUE;
	END;
    !
    ! Put it on the temporary queue
    !
    INSQUE (.NOD, TEMP_Q);
    END;
!
! Build a list of all the nodes in the cluster
!
WILD = -1;
WHILE TRUE
DO
    BEGIN
    !
    ! Get cluster information for wild nodes.  Loop until success, end, or
    ! serious failure.  $GETSYI will return NOSUCHNODE if a node happens to
    ! disappear while the $GETSYI call is processing the CSID.
    !
    WHILE TRUE
    DO
	BEGIN
	STATUS = $GETSYIW (CSIDADR=WILD, ITMLST=SYI_NODE);
	IF .STATUS EQL SS$_NOMORENODE		! Found the end
	  OR
	   .STATUS				! Found a live one
	THEN
	    EXITLOOP;
	IF NOT .STATUS				! Ooops
	THEN
	    IF .STATUS NEQ SS$_NOSUCHNODE	! NOSUCHNODE is ok, try next
	    THEN
		$signal_stop (.STATUS);
	END;
    IF .STATUS EQL SS$_NOMORENODE
    THEN
	EXITLOOP;
    !
    ! See if this node is in the temporary queue.  If so, it will be removed.
    ! Otherwise, 0 will be returned.
    !
    NOD = REMOVE_NODE (SYSTEMID, TEMP_Q);
    !
    ! If the node is 0, then we have a brand new node to add
    !
    IF .NOD EQL 0
    THEN
	BEGIN
	!
	! Allocate and start the NOD
	!
	IF NOT (STATUS = ALLOCATE_DS (NOD_K_TYPE, NOD))
	THEN
	    $signal_stop (.STATUS);
	NOD [NOD_B_STATE] = NOD_K_STATE_DEPARTED;	! Pass through "departed" state briefly, the next
	END;						!  clause will move us to "started"
    !
    ! If the node is present but "departed", then start the node
    !
    IF .NOD [NOD_B_STATE] EQL NOD_K_STATE_DEPARTED
    THEN
	BEGIN
	CLUSUTIL_NODE_START (.NOD);
	CLUSUTIL_NODE_MESSAGE (.NOD, OPC$_NODE_START, FALSE);
	CHANGE = TRUE;
	END;
    !
    ! Put it back on the real queue
    !
    INSQUE (.NOD, NOD_HEAD);
    END;

!
! OK, now if there are any nodes left on the temporary queue, that means that
! those nodes are no longer with us.  (They vaporized while we were in the loop.)
!
WHILE NOT REMQUE (.TEMP_Q [0], NOD)
DO
    BEGIN
    !
    ! Place the node in the "departed" state, and all that that entails
    !
    CLUSUTIL_NODE_INACTIVATE (.NOD);
    !
    ! Put it back on the real queue
    !
    INSQUE (.NOD, NOD_HEAD);
    CHANGE = TRUE;
    END;

RETURN .CHANGE;
END;						! End of CLUSUTIL_CONFIGURE

GLOBAL ROUTINE CLUSUTIL_FIND_NOD_BY_CSID (CSID) =		%SBTTL 'clusutil_find_nod_by_csid'

!++
! Functional description:
!
!	Find a cluster NOD block, given the CSID of the node.
!
! Input:
!
!	CSID - Longword csid of system desired
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	Address of node block, or 0 if not found
!--

BEGIN						! Start of CLUSUTIL_FIND_NOD_BY_CSID

LOCAL
    PTR : $ref_bblock;

!
! Loop through all the nodes on the queue, remove an entry if it matches the CSID
!
PTR = .NOD_HEAD [0];
WHILE .PTR NEQ NOD_HEAD [0]
DO
    BEGIN
    IF .PTR [NOD_L_NODE_CSID] EQL .CSID
    THEN
	RETURN .PTR;
    PTR = .PTR [NOD_L_FLINK];
    END;

RETURN 0;
END;						! End of CLUSUTIL_FIND_NOD_BY_CSID

GLOBAL ROUTINE CLUSUTIL_FIND_NOD_BY_NAME (NAME : $ref_bblock) =		%SBTTL 'clusutil_find_nod_by_name'

!++
! Functional description:
!
!	Find a cluster NOD block, given the nodename of the node.
!
! Input:
!
!	NAME - Pointer to name descriptor
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	Address of node block, or 0 if not found
!--

BEGIN						! Start of CLUSUTIL_FIND_NOD_BY_NAME

LOCAL
    PTR : $ref_bblock;

!
! Loop through all the nodes on the queue, remove an entry if it matches the NAME
!
PTR = .NOD_HEAD [0];
WHILE .PTR NEQ NOD_HEAD [0]
DO
    BEGIN
    IF CH$EQL (.NAME [DSC$W_LENGTH], .NAME [DSC$A_POINTER], 0,
	       .PTR [NOD_L_NAME_LEN], .PTR [NOD_L_NAME_PTR])
    THEN
	RETURN .PTR;
    PTR = .PTR [NOD_L_FLINK];
    END;

RETURN 0;
END;						! End of CLUSUTIL_FIND_NOD_BY_NAME

GLOBAL ROUTINE CLUSUTIL_FIND_NOD_BY_SYSTEMID (SYSTEMID : REF VECTOR [3,WORD]) =		%SBTTL 'clusutil_find_nod_by_SYSTEMID'

!++
! Functional description:
!
!	Find a cluster NOD block, given the SYSTEMID of the node.
!
! Input:
!
!	SYSTEMID - 48-bit id of system desired
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	Address of node block, or 0 if not found
!--

BEGIN						! Start of CLUSUTIL_FIND_NOD_BY_SYSTEMID

LOCAL
    PTR : $ref_bblock;

!
! Loop through all the nodes on the queue, remove an entry if it matches the SYSTEMID
!
PTR = .NOD_HEAD [0];
WHILE .PTR NEQ NOD_HEAD [0]
DO
    BEGIN
    IF CLUSUTIL_SYSTEMID_EQUAL (PTR [NOD_T_NODE_SYSTEMID], .SYSTEMID)
    THEN
	RETURN .PTR;
    PTR = .PTR [NOD_L_FLINK];
    END;

RETURN 0;
END;						! End of CLUSUTIL_FIND_NOD_BY_CSID

GLOBAL ROUTINE CLUSUTIL_INCR_SEQUENCE (OLD_SEQ) =

!++
! Functional description:
!
!	Take the number passed as input, return the number incremented with a cluster
!	unique sequence number.
!
! Input:
!
!	OLD_SEQ	: Longword sequence number to be incremented
!
! Implicit Input:
!
!	SEQ_WIDTH     : Width of node information field in sequence number
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	Incremented sequence number
!--

BEGIN						! Start of CLUSUTIL_INCR_SEQUENCE


REGISTER
	NEW_SEQ		: LONG;

!
! First, extract the cardinal number (high bits) from the sequence number.  Increment the value.
! (SEQ_WIDTH will be zero if not in a cluster)
!
NEW_SEQ = .OLD_SEQ<.SEQ_WIDTH,32-.SEQ_WIDTH,0> + 1;
!
! Now, move the cardinal number over to the left and stick the fixed node
! identifier into the low bits  (SEQ_WIDTH will be zero if not in a cluster)
NEW_SEQ = (.NEW_SEQ^.SEQ_WIDTH) + .SEQ_SEED;
!
! Return the updated value
!
RETURN .NEW_SEQ;
END;						! End of CLUSUTIL_INCR_SEQUENCE

GLOBAL ROUTINE CLUSUTIL_INIT : NOVALUE =		%SBTTL 'clusutil_init'

!++
! Functional description:
!
!	Perform process initialization activities related to cluster participation.
!
! Input:
!
!	None.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Global data is initialized.
!
! Side effects:
!
!	We will know if we are in a cluster, and if so, we will be ready to
!	participate in cluster activities.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of CLUSUTIL_INIT

LOCAL
	NOD 	: $ref_bblock,
	STATUS	: LONG;

!
! If we are already in a cluster, leave without doing any more
!
IF .GLOBAL_STATUS [GBLSTS_K_IN_VAXcluster]
THEN
    RETURN;
!
! Get system information to see if we are in a cluster.
! Failure is fatal (there is no system?).
!
IF NOT (STATUS = $GETSYIW (ITMLST=SYI_NODE))
THEN
    $signal_stop (.STATUS);
!
! Save the membership flag
!
IF NOT (GLOBAL_STATUS [GBLSTS_K_IN_VAXcluster] = .CLUSTER_FLAG)
THEN
    RETURN;
!
! Save the CSID and the sequence number seed before we allocate data
! structures.  The default sequence width is held by the global SEQ_WIDTH_DEF
! to make it possible to increase the size of the cluster supported with a simple
! PATCH.  This helps balance the friendliness of having small request numbers against
! the need to be able to support larger clusters in the future.
!
LCL_CSID = .NODE_CSID;
SEQ_WIDTH = .SEQ_WIDTH_DEF;
SEQ_SEED = ((.NODE_CSID<16,2,0>)^(.SEQ_WIDTH_DEF-2)) + .NODE_CSID<0,.SEQ_WIDTH_DEF-2,0>;
!
! Allocate and initialize the NOD, and add it to the list of nodes, also make
! it the local node
!
IF NOT (STATUS = ALLOCATE_DS (NOD_K_TYPE, NOD))
THEN
    $signal_stop (.STATUS);
CLUSUTIL_NODE_START (.NOD);
NOD [NOD_B_STATE] = NOD_K_STATE_LOCAL;
INSQUE (.NOD, NOD_HEAD);
LCL_NOD = .NOD;

RETURN;
END;						! End of CLUSUTIL_INIT

GLOBAL ROUTINE CLUSUTIL_NEXT_SEQUENCE =

!++
! Functional description:
!
!	Increment and return the global variable NEXT_SEQUENCE.
!
! Input:
!
!	None.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Global cell NEXT_SEQUENCE is incremented.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	Incremented sequence number
!--

BEGIN						! Start of CLUSUTIL_NEXT_SEQUENCE

REGISTER
    SEQ : LONG;
!
! Get, store and return the updated value
!
SEQ = CLUSUTIL_INCR_SEQUENCE (.NEXT_SEQUENCE);
NEXT_SEQUENCE = .SEQ;

RETURN .SEQ;
END;						! End of CLUSUTIL_NEXT_SEQUENCE

GLOBAL ROUTINE CLUSUTIL_NODE_ACTIVATE (NOD : $ref_bblock) : NOVALUE =		%SBTTL 'CLUSUTIL_NODE_activate'

!++
! Functional description:
!
!	Place a NOD into ACTIVE state.
!
! Input:
!
!	None.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Global data may be altered
!
! Side effects:
!
!	Messages will be sent to cluster operators if there are any changes.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of CLUSUTIL_NODE_ACTIVATE

!
! If the node is already active, return
!
IF .NOD [NOD_B_STATE] EQL NOD_K_STATE_ACTIVE
THEN
    RETURN;
!
! Set the state of the node to active
!
NOD [NOD_B_STATE] = NOD_K_STATE_ACTIVE;
NOD [NOD_V_ACK_PEND] = FALSE;
!
! Tell cluster operators that we have activated this node
!
CLUSUTIL_NODE_MESSAGE (.NOD, OPC$_NODE_ACTIVE, FALSE);

RETURN;
END;						! End of CLUSUTIL_NODE_ACTIVATE

GLOBAL ROUTINE CLUSUTIL_NODE_INACTIVATE (NOD : $ref_bblock) : NOVALUE =		%SBTTL 'CLUSUTIL_NODE_INactivate'

!++
! Functional description:
!
!	Place a NOD into "departed" state.
!
! Input:
!
!	None.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Global data may be altered
!
! Side effects:
!
!	Messages will be sent to cluster operators if there are any changes.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of CLUSUTIL_NODE_INACTIVATE

LOCAL
    OCD_INDEX,
    OCD_COUNT,
    OCD		: $ref_bblock,
    RQST_RQCB	: $ref_bblock;
!
! If the node is already "departed", return
!
IF .NOD [NOD_B_STATE] EQL NOD_K_STATE_DEPARTED
THEN
    RETURN;
!
! Set the state of the node to "departed"
!
NOD [NOD_B_STATE] = NOD_K_STATE_DEPARTED;
!
! Tell cluster operators that we have removed this node
!
CLUSUTIL_NODE_MESSAGE (.NOD, OPC$_NODE_DEPARTED, FALSE);
!
! Search the entire database for requests owned by the disappearing node.
!
OCD_INDEX = MAX_SCOPE;
WHILE .OCD_INDEX GEQ MIN_SCOPE
DO
    BEGIN
    !
    ! Scan the OCD list for each class of operator
    !
    OCD = .OCD_VECTOR [(.OCD_INDEX - 1) * 2];			! Get first OCD address
    OCD_COUNT = .OCD_VECTOR [(.OCD_INDEX - 1) * 2 + 1];		! Get # of OCDs in the list
    WHILE .OCD_COUNT GTR 0
    DO
	BEGIN
	!
	! Scan the request list for each OCD.
	!
	RQST_RQCB  = .OCD [OCD_L_RQSTFLINK];			! Get first RQST_RQCB address
	WHILE .RQST_RQCB NEQ OCD [OCD_L_RQSTFLINK]
	DO
	    BEGIN
	    !
	    ! If the ID matches the disappearing node, cancel the request
	    !
	    IF CLUSUTIL_SYSTEMID_EQUAL (RQST_RQCB [RQCB_T_SYSTEMID], NOD [NOD_T_NODE_SYSTEMID])
	    THEN
		BEGIN
		LOCAL
		    MESSAGE_VECTOR : VECTOR [3, LONG],
		    RQCB;
		!
		! Inform all interested operators that the request is canceled.
		! Log the cancelation notice, and remove the request from the data base.
		!
		MESSAGE_VECTOR [0] = OPC$_RQSTCAN;		! Set message code
		MESSAGE_VECTOR [1] = 0;				! Set # of message arguements
		MESSAGE_VECTOR [2] = .RQST_RQCB [RQCB_L_RQSTNUM];! Set message arguement
		REMQUE (.RQST_RQCB, RQST_RQCB);			! Remove the request from the database
		OCD [OCD_W_RQSTCOUNT] = .OCD [OCD_W_RQSTCOUNT] - 1;
		FORMAT_MESSAGE (.RQST_RQCB, MESSAGE_VECTOR);
		!
		! Inform all interested operators that the request is canceled.  Log the cancelation
		! notice.  No need to inform other nodes, they will be running in parallel with us.
		!
		NOTIFY_LISTED_OPERATORS (.RQST_RQCB);		! Notify the interested operators
		LOG_MESSAGE (.RQST_RQCB);			! Log the event
		RQCB = .RQST_RQCB;				! Save the RQCB
		RQST_RQCB = .RQST_RQCB [RQCB_L_FLINK];		! Get address of next RQCB
		DEALLOCATE_RQCB (.RQCB);			! Free the RQCB
		END
	    !
	    ! Request doesn't belong to disappearing node, move to next request
	    !
	    ELSE
		RQST_RQCB = .RQST_RQCB [RQCB_L_FLINK];		! Get address of next RQCB
	    END;
	OCD_COUNT = .OCD_COUNT - 1;				! Decrement OCD count
	OCD = .OCD [OCD_L_FLINK];				! Get address of next OCD
	END;
    OCD_INDEX = .OCD_INDEX - 1;					! Try next operator class
    END;

RETURN;
END;						! End of CLUSUTIL_NODE_INACTIVATE

GLOBAL ROUTINE CLUSUTIL_NODE_MESSAGE (NOD : $ref_bblock, CODE, WORLD) : NOVALUE =

!++
! Functional description:
!
!	This routine notifies operators that the cluster configuration
!	has changed.
!
!
! Input:
!
!	NOD	: Pointer to NOD data structure
!	CODE	: OPCOM message code for the transition
!	WORLD	: Flag - 1 send to rest of cluster, 0 to local node only
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	Operators are notified.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of CLUSUTIL_NODE_MESSAGE

LOCAL
	MESSAGE_VECTOR	: VECTOR [6,LONG],	! Message info
	RQCB		: $ref_bblock,		! RQCB data structure
	OCD		: $ref_bblock,		! OCD data structure
	OCD_COUNT	: LONG,			! Count of OCDs in OCD list
	OCD_INDEX	: LONG,			! Index into OCD_VECTOR
	OPER_COUNT	: LONG,			! Count of operators in operator list
	STATUS		: LONG;

!
! Nothing to do if not in a cluster.
!
IF NOT .GLOBAL_STATUS [GBLSTS_K_IN_VAXcluster]
THEN
    RETURN;
!
! If we have printed an error message since the last timestamp, don't do another.
!
SELECTONE .CODE OF
SET
    [OPC$_CLUSCOMM, OPC$_NODE_RETRY] :
			BEGIN
			IF .NOD [NOD_V_IOERR_DISPLAYED]		! Have we already done one this timestamp?
			THEN
			    RETURN;
			NOD [NOD_V_IOERR_DISPLAYED] = TRUE;	! Set the flag (cleared every timestamp)
			END;
    [OTHERWISE] :	;
TES;
!
! Allocate an RQCB.  This is necessary to format and later issue the message.
!
IF NOT ALLOCATE_DS (RQCB_K_TYPE, RQCB)
THEN
    RETURN;
!
! Set the operator interest mask to cluster
!
RQCB [RQCB_L_ATTNMASK1] = OPC$M_NM_CLUSTER;
!
! Format the message, log it, and send it to all interested operators.
! Every operator in the data base is a candidate for the message.
!
MESSAGE_VECTOR [0] = .CODE;			! Set the message according to the flag.
MESSAGE_VECTOR [1] = 0;				! Use current system time
MESSAGE_VECTOR [2] = LCL_NOD [NOD_Q_NAME_DESC];	! Use our name
MESSAGE_VECTOR [3] = NOD [NOD_Q_NAME_DESC];	! Set addr of node name descriptor
MESSAGE_VECTOR [4] = .NOD [NOD_L_NODE_CSID];	! Set node csid
MESSAGE_VECTOR [5] = .(NOD [NOD_T_NODE_SYSTEMID])<0,16,0>;	! Set node number

FORMAT_MESSAGE (.RQCB, MESSAGE_VECTOR);
LOG_MESSAGE (.RQCB);				! Log the message
!
! Send it to the world
!
IF .WORLD
THEN
    CLUSMSG_RQCB_SEND (-1, CLM__CLUSTER, .RQCB);
!
! Release the rqcb
!
DEALLOCATE_RQCB (.RQCB);
RETURN; 	

END;						! End of CLUSUTIL_NODE_MESSAGE

GLOBAL ROUTINE CLUSUTIL_NODE_START (NOD : $ref_bblock) : NOVALUE =		%SBTTL 'clusutil_node_start'

!++
! Functional description:
!
!	initialize a NOD block.
!
! Input:
!
!	None.
!
! Implicit Input:
!
!	Data in local storage from SYI call.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	NOD block allocated.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of CLUSUTIL_ADD_NOD

LOCAL
    STATUS;
!
! Fill in the data from the $GETSYI buffers
!
NOD [NOD_B_STATE] = NOD_K_STATE_START;		! Set to START state
NOD [NOD_V_IOERR_DISPLAYED] = FALSE;
NOD [NOD_V_NODE_LEAVING] = FALSE;
NOD [NOD_L_NODE_CSID] = .NODE_CSID;
NOD [NOD_L_NAME_LEN] = .NAME_LEN;
NOD [NOD_L_NAME_PTR] = NOD [NOD_T_NAME_BUF];
CH$MOVE (.NAME_LEN, NAME_BUF, NOD [NOD_T_NAME_BUF]);
CH$MOVE (8, SWINCARN, NOD [NOD_Q_SWINCARN]);
CH$MOVE (6, SYSTEMID, NOD [NOD_T_NODE_SYSTEMID]);
!
RETURN .NOD;
END;

GLOBAL ROUTINE CLUSUTIL_SYSTEMID_EQUAL (SYS_1 : $ref_bblock, SYS_2 : $ref_bblock) : JSB_R0R1 =

!++
! Functional description:
!
!	Compare two 48-bit SCS system ids for equivalence.
!
! Input:
!
!	SYS_1	: Pointer to a 48-bit SCS id
!	SYS_2	: Pointer to a 48-bit SCS id
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	True if IDs same, false if not
!--

BEGIN						! Start of CLUSUTIL_SYSTEMID_EQUAL

IF .SYS_1 [0,0,32,0] NEQ .SYS_2 [0,0,32,0]	! First 32 bits
  OR
   .SYS_1 [4,0,16,0] NEQ .SYS_2 [4,0,16,0]	! Next 16 bits
THEN
    RETURN FALSE;
   
RETURN TRUE;
END;						! End of CLUSUTIL_SYSTEMID_EQUAL

END						! End of CLUSUTIL
ELUDOM
