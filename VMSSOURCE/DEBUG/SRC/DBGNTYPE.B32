MODULE DBGNTYPE (IDENT = 'V04-000') =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!
!	DEBUG
!
! ABSTRACT:
!
!	This module contains the parse and execution networks for the TYPE
!	verb. The parsing method employed is that of ATN's.
!
! ENVIRONMENT:
!
!	VAX/VMS
!
! AUTHOR:
!
!	Richard Title
!
! CREATION DATE:
!
!	9-14-81
!
! VERSION:
!
!	V03.0-001
!
! MODIFIED BY:
!	V. Holt		May, 1982	
!
! REVISION HISTORY:
! 3.10	14-May-82	VJH	Added call to DBG$FLUSHBUF, eliminating need to
!				initialize local output buffer.
! 3.11   2-Jun-82	VJH	Removed all references to DBG$FAO_PUT and 
!				DBG$OUT_PUT, replacing them with calls to 
!				DBG$PRINT and DBG$NEWLINE, respectively.
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE	
	DBG$NPARSE_TYPE,		! Parse routine for TYPE
	DBG$NEXECUTE_TYPE,		! Execution routine for TYPE
    	DBG$NPARSE_EDIT,		! Parse routine for EDIT
    	DBG$NEXECUTE_EDIT;		! Execution routine for EDIT

!
! REQUIRE FILES:
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

LIBRARY 'LIB$:DBGGEN.L32';

EXTERNAL ROUTINE
    dbg$sta_getsourcemod,		! Gets module rst pointer
    dbg$sta_symname,			! Turns module rst pointer back
    					! into a string
    dbg$print:  NOVALUE,		! Formats ascii output into output buf
    dbg$flushbuf:  NOVALUE,		! Initializes new print line
    dbg$nnext_word,			! gets next word from input
    dbg$newline:  NOVALUE,		! outputs the output buffer 
    dbg$nmatch,				! Tries to match the next token
    dbg$get_tempmem,			! Allocates space
    dbg$nmake_arg_vect,			! Constructs error messages
    dbg$nsave_decimal_integer,		! Reads an integer from the 
    					! input string
    dbg$nsyntax_error, 			! Reports a syntax error
    
    dbg$scr_screen_normal: NOVALUE,	! Set screen to normal in screen mode
    dbg$src_line_to_rec,		! Translate line number to record num
    dbg$src_type_lnum_source,		! The routine in DBGSOURCE that
    					! actually outputs the source
    					! lines to the terminal
    lib$do_command,			! Execute DCL command
    lib$spawn,				! Execute DCL command
    smg$set_keypad_mode,		! Set terminal to numeric/application mode
    sys$fao;				! Formatted ASCII output

EXTERNAL
    DBG$GB_KEYPAD_INPUT: BYTE,		! Set if mode is KEYPAD
    DBG$GL_KEYBOARD_ID,			! Used by SMG$SET_KEYPAD_MODE
    DBG$GV_CONTROL: DBG$CONTROL_FLAGS,	! Global status flags
    DBG$GL_DEVELOPER: BITVECTOR[],	! Developer bits
    DBG$GL_SCREEN_SOURCE,		! Non-zero pointer if source is being
					!      directed to a screen display
    DBG$SRC_NEXT_MODRSTPTR,		! Contains module RST pointer
    					!      used by TYPE command
    DBG$SRC_NEXT_LNUM;			! Contains next line number to be
    					!      output in case of a TYPE command
    					!      with no argument

! These values can go in the VERB_COMPOSITE field of the EDIT verb
!
LITERAL
    EDIT_EXIT	= 1,	! EDIT/EXIT
    EDIT_NOEXIT = 2;	! EDIT/NOEXIT


GLOBAL ROUTINE DBG$NPARSE_TYPE(INPUT_DESC, VERB_NODE, MESSAGE_VECT) =
!
! Functional Description
!
!	ATN parse network for the TYPE verb.
!	This routine takes a verb node for the TYPE verb, and a string
!	descriptor for the remaining (unparsed) input.
!	It constructs a linked list of noun nodes, each of which
!	contains a module rst pointer and a line number range.
!
! Formal Parameters
!
!	INPUT_DESC	- A longword containing the address of the 
!			  command input descriptor.
!
!	VERB_NODE	- A longword containing the address of the verb node
!
!	MESSAGE_VECT	- The address of a longword to contain the address
!			  of a standard message argument vector.
!
! Implicit Inputs
!
!	None
!
! Implicit Outputs
!	
!	On success, the command execution tree is constructed.
!	On failure, a message argument vector is constructed or obtained.
!
! Routine value
!
!	STS$K_SUCCESS (1)	- Success. Command execution tree constructed.
!	STS$K_SEVERE  (4)	- Failure. Error encountered. Message argument
!				  constructed and returned.
!
! Side Effects
!
!	None
!

BEGIN

MAP
    input_desc  : REF dbg$stg_desc,
    verb_node	: REF dbg$verb_node;

BIND
    dbg$cs_colon	= UPLIT BYTE (1, dbg$k_colon),
    dbg$cs_slash	= UPLIT BYTE (1, dbg$k_slash),
    dbg$cs_comma	= UPLIT BYTE (1, dbg$k_comma),
    dbg$cs_cr		= UPLIT BYTE (1, dbg$k_car_return),
    dbg$cs_backslash	= UPLIT BYTE (1, dbg$k_backslash);

LOCAL
    modrstptr,
    noun_node	    : REF dbg$noun_node,
    prev_noun_node  : REF dbg$noun_node,
    low_lnum,
    high_lnum,
    first_flag;				! True if this is the first
    					! line number range in the list.


    ! Create and link a noun node
    noun_node = dbg$get_tempmem(dbg$k_noun_node_size);
    verb_node[dbg$l_verb_object_ptr] = .noun_node;

    first_flag = TRUE;
    modrstptr = 0;

    ! Check for TYPE <cr>

    IF dbg$nmatch(.input_desc, dbg$cs_cr, 1)
    THEN

    	BEGIN ! no argument supplied

    	! Try to get default module.

    	IF .dbg$src_next_modrstptr EQL 0
    	THEN
    	    BEGIN
    	    ! report an error
    	    .message_vect = dbg$nmake_arg_vect(dbg$_nonxtlin);
    	    RETURN sts$k_severe;
    	    END;
    	    
    	! The module rst pointer is placed in the adjective field of
    	! the noun node.

    	noun_node [dbg$l_adjective_ptr] = .dbg$src_next_modrstptr;

    	! Fill in the line numbers based on global info

    	noun_node [dbg$l_noun_value] = .dbg$src_next_lnum;
    	noun_node [dbg$l_noun_value2] = .dbg$src_next_lnum;

    	! The link field is zero
   
    	noun_node [dbg$l_noun_link] = 0;

    	END ! no argument supplied


    ELSE

    	WHILE TRUE DO

    	    BEGIN

    	    OWN
    		name_buf : VECTOR [81, BYTE]; ! Holds counted string with
    					      ! the module name
    	    
    	    LOCAL
    		string_ptr,
    		length,
    		char;

    	    ! Loop through the list of line number ranges.
    	    ! The most general form of the command is:

    	    ! TYPE mod1\l1:h1, mod2\l2:h2, ... , modn\ln:hn

    	    ! The user may omit the module, in which case it 
    	    ! defaults to a previously-specified module or
    	    ! to a module determined by the current scope.
    	    ! He may omit the high line num, in which case it
    	    ! is the same as the low line num.

    	    name_buf[0] = 0;
       	    string_ptr = .input_desc[dsc$a_pointer];
    	    length = .input_desc[dsc$w_length];

    	    ! read past leading blanks

    	    WHILE .length GTR 0 
    	    DO
    		BEGIN
    		char = ch$rchar_a(string_ptr);
    		length = .length - 1;
    		IF .char NEQ dbg$k_blank
    		THEN
    		    EXITLOOP;
    		END;

    	    ! If the length reaches zero then it is an error

    	    IF .length EQL 0 AND .char EQL dbg$k_blank 
    	    THEN
    		BEGIN
    		.message_vect = dbg$nmake_arg_vect(dbg$_needmore);
    		RETURN sts$k_severe;
    		END;

    	    ! Read until we reach a separating character.
    	    ! Place the characters into name_buf as we read them. 

    	    WHILE .length GTR 0 
    	    DO
    		BEGIN
    		IF .char EQL '\' OR .char EQL ',' 
    		OR .char EQL ':' OR .char EQL ' '
    		THEN
    		    EXITLOOP;
    		name_buf[0] = .name_buf[0] + 1;
    		name_buf[.name_buf[0]] = .char;
    		char = ch$rchar_a(string_ptr);
    		length = .length - 1;
    		END;

    	    IF .char EQL '\'  ! this signifies that we read a module name
    	    THEN
    		BEGIN

    		! Update the input descriptor
    		input_desc[dsc$a_pointer] = .string_ptr;
    		input_desc[dsc$w_length] = .length;
    	
    		! convert the name to an rst pointer and put it in the
    		! adjective field.

    		noun_node[dbg$l_adjective_ptr] = 
    		    dbg$sta_getsourcemod(name_buf);

    		! If the above routine returned zero then the user entered
    		! an invalid module.

    		IF .noun_node[dbg$l_adjective_ptr] EQL 0
    		THEN
    		    BEGIN
    		    .message_vect = dbg$nmake_arg_vect(
    			dbg$_nosuchmodu, 1, name_buf);
    		    RETURN sts$k_severe;
    		    END;

    		! fill in new value of modrstptr
    		modrstptr = .noun_node[dbg$l_adjective_ptr];

    		END ! pick up module name
    		
    	   ELSE

    		BEGIN ! fill in default module

    		IF .modrstptr NEQ 0
    		THEN
    		    ! use global default
    		    noun_node[dbg$l_adjective_ptr] = .modrstptr
    	
    		ELSE
    	
    		    BEGIN
    		    ! No default in modrstptr, so try to fill
    		    ! in a module based on current scope
    		
    		    modrstptr = dbg$sta_getsourcemod(0);
    		
    		    IF .modrstptr EQL 0
    		    THEN

    			BEGIN

    		        ! If this is still zero, then we have no scope with
       		        ! which to supply a module. Report an error.

    			.message_vect = dbg$nmake_arg_vect(
    			    dbg$_noscope, 1, .dbg$src_next_lnum);
    		 	RETURN sts$k_severe;

    			END

    		    ELSE
    			! we have found a module. 
    			! fill in the adjective field.
    			noun_node[dbg$l_adjective_ptr] = .modrstptr;

    		    END
    		END; ! Fill in default module

    	    ! read the low line num

    	    IF NOT dbg$nsave_decimal_integer(.input_desc, low_lnum,
    		.message_vect)
    	    THEN
    		RETURN sts$k_severe;    		
    	   
    	    ! Now look for colon which signifies that the user has also 
    	    ! specified a high line num.

    	    IF dbg$nmatch(.input_desc,dbg$cs_colon,1)
    	    THEN

    		BEGIN

    		! Get high line num

    		IF NOT dbg$nsave_decimal_integer(
    		    .input_desc, high_lnum, .message_vect)
    		THEN
    		    RETURN sts$k_severe;

    		END

    	    ELSE

    		! high line num same as low line num

    		high_lnum = .low_lnum;

    	    ! Fill in the fields of noun_node

    	    noun_node[dbg$l_noun_value] = .low_lnum;
    	    noun_node[dbg$l_noun_value2] = .high_lnum;

    	    ! Link in the noun node

    	    IF NOT .first_flag
    	    ! The first noun has already been linked to the verb
    	    THEN
    	
    		BEGIN

    		prev_noun_node[dbg$l_noun_link] = .noun_node;
    		noun_node[dbg$l_noun_link] = 0;

    		END;

    	    ! set up for next time around loop
    	    first_flag = FALSE;
    	    prev_noun_node = .noun_node;
    	
    	    ! Now look for comma or for end of line

    	    IF dbg$nmatch(.input_desc,dbg$cs_cr,1)
    	    THEN
    		EXITLOOP;

    	    ! If we did not see end of line, then the next character
    	    ! must be a comma.

    	    IF NOT dbg$nmatch(.input_desc,dbg$cs_comma,1)
    	    THEN
    		
    		BEGIN

    		.message_vect =
    		    dbg$nsyntax_error(dbg$nnext_word(.input_desc));
    		RETURN sts$k_severe;

    		END;

    	    ! Now create a new noun node for the next time around the loop.
    	    noun_node = dbg$get_tempmem(dbg$k_noun_node_size);
    	    END; ! While loop

    RETURN sts$k_success;

END; ! dbg$nparse_type



GLOBAL ROUTINE DBG$NEXECUTE_TYPE(VERB_NODE, MESSAGE_VECT) =
!
! Functional Description
!	
!	This routine performs the action associated with the TYPE
!	command.
!
! Formal Parameters
!
!	VERB_NODE	- A longword containing the address of the
!			  head (verb) node.
!
!	MESSAGE_VECT	- The address of a longword to contain the
!			  address of an error message vector
!
! Implicit Inputs
!
!	The command tree contains a verb node and a linked list
!	of one or more noun nodes.
!
! Implicit Outputs
!
!	This routine calls a routine in DBGSOURCE which displays the
!	source lines to the user.
!
! Routine Value
!
!	A completion code.
!
! Completion Codes
!
!	STS$K_SUCCESS (1) 	- Success. Command executed
!	STS$K_SEVERE (4)	- Failure. The command could not be
!				  executed. An error message is constructed.
!
! Side Effects
!
!	None
!

BEGIN

MAP 
    verb_node : REF dbg$verb_node;

LOCAL
    noun_node : REF dbg$noun_node,
    modnameptr;

    noun_node = .verb_node[dbg$l_verb_object_ptr];

    DO
    	BEGIN

    	! loop through linked list of noun nodes.

    	! First output the module name.

    	! Set up for FAO_PUT.
	!
	DBG$FLUSHBUF();


	! Get the module name and print it out.  Note that the printing of
	! the module name is suppressed if the source line output is being
	! directed to a source screen display.
	!
	IF .DBG$GL_SCREEN_SOURCE EQL 0
	THEN
	    BEGIN
	    DBG$STA_SYMNAME(.NOUN_NODE[DBG$L_ADJECTIVE_PTR], MODNAMEPTR);
	    DBG$PRINT(UPLIT BYTE(%ASCIC 'module !AC'), .MODNAMEPTR);
	    DBG$NEWLINE();
	    END;


	! Call the routine which actually displays the source lines.
	!
    	DBG$SRC_TYPE_LNUM_SOURCE(.NOUN_NODE[DBG$L_ADJECTIVE_PTR],
			.NOUN_NODE[DBG$L_NOUN_VALUE], 0,
			.NOUN_NODE[DBG$L_NOUN_VALUE2], 0,
			0, FALSE);
    	END
    
    UNTIL 0 EQL (NOUN_NODE = .NOUN_NODE[DBG$L_NOUN_LINK]);

    RETURN STS$K_SUCCESS

    END;

GLOBAL ROUTINE DBG$NPARSE_EDIT (INPUT_DESC, VERB_NODE, MESSAGE_VECT) =
!
! Functional Description
!
!	Parse routine for the EDIT command. EDIT is the DEBUG interface
!	to the EDITH editor.
!
!	The routine DBG$NPARSE_CMD in DBGNPARSE has already recognized
!	the "EDIT" verb and has called this routine to parse the
!	rest of the command. 
!
!	This routine takes a verb node for the EDIT verb, and a string
!	descriptor for the remaining (unparsed) input.
!
!	The rest of the command execution tree is constructed.
!
! Formal Parameters
!
!	INPUT_DESC	- A longword containing the address of the 
!			      command input descriptor.
!
!	VERB_NODE	- A longword containing the address of the verb node
!
!	MESSAGE_VECT	- The address of a longword to contain the address
!			      of a standard message argument vector.
!
! Implicit Inputs
!
!	None
!
! Implicit Outputs
!	
!	On success, the command execution tree is constructed.
!	On failure, a message argument vector is constructed or obtained.
!
! Routine value
!
!	STS$K_SUCCESS (1)	- Success. Command execution tree constructed.
!	STS$K_SEVERE  (4)	- Failure. Error encountered. Message argument
!				      constructed and returned.
!
! Side Effects
!
!	None
!

    BEGIN

    MAP
    	INPUT_DESC	: REF DBG$STG_DESC,
    	VERB_NODE	: REF DBG$VERB_NODE;

    BIND
    	DBG$CS_EXIT		= UPLIT BYTE (4, 'EXIT'),
    	DBG$CS_NOEXIT		= UPLIT BYTE (6, 'NOEXIT'),
    	DBG$CS_BACKSLASH	= UPLIT BYTE (1, DBG$K_BACKSLASH),
    	DBG$CS_CR		= UPLIT BYTE (1, DBG$K_CAR_RETURN),
    	DBG$CS_SLASH		= UPLIT BYTE (1, DBG$K_SLASH);

    LOCAL
    	CHAR,
    	DLINE_PTR: REF DBG$DLINE_ENTRY,
    	DROW,
    	LENGTH,
    	LINENO,
    	LINUM,
    	MODRSTPTR,				
    	NAME_BUF: VECTOR [81, BYTE],
    	NOUN_NODE: REF DBG$NOUN_NODE,
    	RBEG,
    	RLEN,
    	SRC_DISP: REF DBG$DISP_ENTRY,
    	STRING_PTR;


    ! Create and link a noun node.
    !
    NOUN_NODE = DBG$GET_TEMPMEM(DBG$K_NOUN_NODE_SIZE);
    VERB_NODE[DBG$L_VERB_OBJECT_PTR] = .NOUN_NODE;


    ! Pick up optional /EXIT or /NOEXIT. /NOEXIT is the default.
    !
    VERB_NODE[DBG$B_VERB_COMPOSITE] = EDIT_NOEXIT;
    WHILE DBG$NMATCH (.INPUT_DESC, DBG$CS_SLASH, 1) DO
    	BEGIN

    	SELECTONE TRUE OF
    	    SET

    	    [DBG$NMATCH (.INPUT_DESC, DBG$CS_EXIT, 1)]:
    		VERB_NODE[DBG$B_VERB_COMPOSITE] = EDIT_EXIT;

    	    [DBG$NMATCH (.INPUT_DESC, DBG$CS_NOEXIT, 1)]:
    		VERB_NODE[DBG$B_VERB_COMPOSITE] = EDIT_NOEXIT;

    	    [DBG$NMATCH (.INPUT_DESC, DBG$CS_CR, 1)]:
    		SIGNAL(DBG$_NEEDMORE);

    	    [OTHERWISE]:
    		SIGNAL(DBG$_CMDSYNERR, 1, DBG$NNEXT_WORD(.INPUT_DESC));
    	
    	    TES;
    	END;


    ! Initialize module and line number.
    !
    MODRSTPTR = 0;
    LINENO = 0;


    ! Check for EDIT <cr>
    !
    IF DBG$NMATCH(.INPUT_DESC, DBG$CS_CR, 1)
    THEN
    	BEGIN


    	! Try to get default module and line number. If screen mode is set, 
    	! then get this info from the source display on the screen. Otherwise,
    	! use defaulting rules based on the most recent TYPE command. If we
    	! are unable to default module name and line number then leave 
    	! zeros in the variables to indicate this.
    	!
    	SRC_DISP = .DBG$GL_SCREEN_SOURCE;
    	IF .SRC_DISP NEQ 0
    	THEN
    	    BEGIN
    	    MODRSTPTR = .SRC_DISP[DBG$L_DISP_MODPTR];


    	    ! Do the computation to figure out what line number is
    	    ! the center of the source display.
    	    !
    	    RBEG = .SRC_DISP[DBG$W_DISP_RBEG];
    	    RLEN = .SRC_DISP[DBG$W_DISP_RLEN];
    	    DROW = .SRC_DISP[DBG$W_DISP_DROW];
    	    DLINE_PTR = .SRC_DISP[DBG$L_DISP_START_LINE_PTR];
    	    LINUM = .DLINE_PTR[DBG$L_DLINE_LINUM];
    	    LINENO = (.DROW-.RBEG) + .RLEN/2 + .LINUM;
    	    END

    	ELSE IF .DBG$SRC_NEXT_MODRSTPTR NEQ 0
    	THEN
    	    BEGIN
    	    MODRSTPTR = .DBG$SRC_NEXT_MODRSTPTR;
    	    LINENO = .DBG$SRC_NEXT_LNUM - 1;
    	    END;
    	END


    ELSE
    	BEGIN


    	! Initialize the buffer which will hold the module name.
    	! Set up to scan the input.
    	!
    	name_buf[0] = 0;
       	string_ptr = .input_desc[dsc$a_pointer];
    	length = .input_desc[dsc$w_length];


    	! Read past leading blanks
    	!
    	WHILE .length GTR 0 DO
    	    BEGIN
    	    char = ch$rchar_a(string_ptr);
    	    length = .length - 1;
    	    IF .char NEQ dbg$k_blank
    	    THEN
    		EXITLOOP;
    	    END;


    	! If the length reaches zero then it is an error.
    	!
    	IF .length EQL 0
    	THEN
    	    $DBG_ERROR('DBGNTYPE\DBG$NPARSE_EDIT');


    	! Read until we reach a separating character.
    	! Place the characters into name_buf as we read them. 
    	!
    	WHILE .length GTR 0  DO
    	    BEGIN
    	    IF .char EQL '\' OR .char EQL ' ' 
    	    THEN
    		EXITLOOP;
    	    name_buf[0] = .name_buf[0] + 1;
    	    IF .name_buf[0] GTR 80
    	    THEN
    		SIGNAL(dbg$_cmdsynerr, 1, dbg$nnext_word(.input_desc));
            name_buf[.name_buf[0]] = .char;
    	    char = ch$rchar_a(string_ptr);
    	    length = .length - 1;
    	    END;


        ! Backslash signifies that we just read a module name.
    	!
    	IF .char EQL '\'
    	THEN
    	    BEGIN


    	    ! Update the input descriptor
    	    !
    	    input_desc[dsc$a_pointer] = .string_ptr;
    	    input_desc[dsc$w_length] = .length;
    	

    	    ! Convert the name to an rst pointer.
    	    !
    	    modrstptr =	dbg$sta_getsourcemod(name_buf);


    	    ! If the above routine returned zero then the user entered
    	    ! an invalid module.
    	    !
    	    IF .modrstptr EQL 0
    	    THEN
    		SIGNAL(dbg$_nosuchmodu, 1, name_buf);
    	    END
    		
    	ELSE
    	    BEGIN 


    	    ! No module was specified, so try to fill
    	    ! in a module based on (1) module in current
    	    ! source display, or (2) module given by previous
    	    ! TYPE command, or (3) current scope
    	    !	
    	    SRC_DISP = .DBG$GL_SCREEN_SOURCE;
    	    IF .SRC_DISP NEQ 0
    	    THEN
    	    	MODRSTPTR = .SRC_DISP[DBG$L_DISP_MODPTR]

    	    ELSE IF .DBG$SRC_NEXT_MODRSTPTR NEQ 0
    	    THEN
    	        MODRSTPTR = .DBG$SRC_NEXT_MODRSTPTR

    	    ELSE
    	        modrstptr = dbg$sta_getsourcemod(0);
    	    END;


        ! Read the line number.
        !
        IF NOT dbg$nsave_decimal_integer(.input_desc, lineno, .message_vect)
        THEN
            RETURN sts$k_severe;    		
    	END;


    ! Fill in the fields of the noun node with the module and
    ! line number.
    !
    NOUN_NODE[DBG$L_ADJECTIVE_PTR] = .MODRSTPTR;
    NOUN_NODE[DBG$L_NOUN_VALUE] = .LINENO;
    

    ! We have finished parsing the EDIT command. Return success.
    !
    RETURN STS$K_SUCCESS;
    END;

GLOBAL ROUTINE DBG$NEXECUTE_EDIT (VERB_NODE, MESSAGE_VECT) =
!
! Functional Description
!	
!	This routine performs the action associated with the EDIT
!	command. EDIT is the interface to the EDITH editor.
!
!	This routine constructs a DCL command line which invokes EDITH.
!	Either LIB$SPAWN or LIB$DO_COMMAND is called to execute the 
!	command line.
!
! Formal Parameters
!
!	VERB_NODE	- A longword containing the address of the
!			  verb node of the command execution tree.
!			  This tree has already been built by the
!			  DBG$NPARSE_EDIT routine.
!
!	MESSAGE_VECT	- The address of a longword to contain the
!			  address of an error message vector
!
! Implicit Inputs
!
!	The command tree contains a verb node and a noun node.
!
! Implicit Outputs
!
!	This routine constructs a command line and calls either
!	LIB$SPAWN or LIB$DO_COMMAND to execute the command line.
!
! Routine Value
!
!	A completion code.
!
! Completion Codes
!
!	STS$K_SUCCESS (1) 	- Success. Command executed
!	STS$K_SEVERE (4)	- Failure. The command could not be
!				      executed. An error message is constructed.
!
! Side Effects
!
!	If the EDIT/EXIT form of the command was given, the debugging
!	session is terminated.
!

    BEGIN

    MAP 
        VERB_NODE : REF DBG$VERB_NODE;

    LOCAL
    	COMMAND_LINE: VECTOR[132,BYTE],	! Command line to invoke EDITH
    	CTRLBUF,
    	CTRLDESC: DBG$STG_DESC,
    	FABPTR: REF $FAB_DECL,		! FAB for searching for newer file ver.
    	FAOBUF: VECTOR[80, BYTE],
    	FAODESC: DBG$STG_DESC,
    	FAOLEN,
    	LENGTH,				! Length of command line
    	LINENO,				! Line number given in EDIT command
    	MODRSTPTR,			! Module given in EDIT command
	NAMESA,				! Ptr to filename buff for $PARSE/$SEARCH
    	NAMPTR: REF $NAM_DECL,
	NAMRSA,				! Ptr to filename buff for $PARSE/$SEARCH
    	NOUN_NODE : REF DBG$NOUN_NODE,	! Noun node in execution tree
	OLDNAMPTR : REF $NAM_DECL,	! NAM block of current source file
    	PTR,
    	RECNO,				! Record number in file
    	STATUS,				! Return status temp.
    	STG_DESC: DBG$STG_DESC;		! String descriptor



    ! Recover the noun node. From this, obtain the module RST pointer and
    ! line number.
    !
    NOUN_NODE = .VERB_NODE[DBG$L_VERB_OBJECT_PTR];
    MODRSTPTR = .NOUN_NODE[DBG$L_ADJECTIVE_PTR];
    LINENO = .NOUN_NODE[DBG$L_NOUN_VALUE];


    ! Build the command line and the string descriptor
    ! with which we will invoke EDITH. We start by initializing
    ! the current length of the command line and a pointer into
    ! the command line.
    !
    LENGTH = 0;
    PTR = COMMAND_LINE;


    ! Append the LSEDIT command to the line.
    ! Note - the command name may change. We leave a few extra
    ! spaces so we can patch in whatever command name they choose,
    ! up to 15 characters.
    ! Additional note - it now appears that the command name will
    ! be EDIT/LSE. However, this change will not happen until at least
    ! version 4.1 of VMS.
    !
    LENGTH = .LENGTH + 15;
    PTR = CH$MOVE(15, UPLIT BYTE(%ASCII 'LSEDIT         '), .PTR);


    ! The following block is only executed when a source file is present.
    ! Translate the module and line number into a NAM block pointer and record
    ! number within the file. This is done by calling a routine in DBGSOURCE.
    ! Also, do the checking for a more recent version of the source file,
    ! and issue any appropriate messages.  After this is done, add the
    ! file name and the appropriate /START_POSITION qualifier.
    !
    IF .MODRSTPTR NEQ 0
    THEN
	BEGIN
    	DBG$SRC_LINE_TO_REC(.MODRSTPTR, .LINENO, OLDNAMPTR, RECNO);


	! Get memory for the FAB and NAM blocks.
	!
	FABPTR = DBG$GET_TEMPMEM((FAB$C_BLN+3)/4);
	NAMPTR = DBG$GET_TEMPMEM((NAM$C_BLN+3)/4);
	NAMESA = DBG$GET_TEMPMEM((NAM$C_MAXRSS+3)/4);
	NAMRSA = DBG$GET_TEMPMEM((NAM$C_MAXRSS+3)/4);


	! Initialize the FAB and NAM blocks for $PARSE and $SEARCH.
	!
	$FAB_INIT(FAB = .FABPTR,
		  NAM = .NAMPTR,
		  FNA = .OLDNAMPTR[NAM$L_ESA],
		  FNS = (.OLDNAMPTR[NAM$B_ESL] - .OLDNAMPTR[NAM$B_VER]) );

	$NAM_INIT(NAM = .NAMPTR,
		  ESS = NAM$C_MAXRSS,
		  ESA = .NAMESA,
		  RSS = NAM$C_MAXRSS,
		  RSA = .NAMRSA );

	! Parse the spec, and then search for the most recent version.
	! The PARSE should never fail, since we are using a string from a
	! previous file OPEN.  However, under very unusual circumstances,
	! the SEARCH mail fail (if a user spawned out from DEBUG and renamed
	! or deleted the file, for example).
	!
	STATUS = $PARSE(FAB = .FABPTR);
	IF NOT .STATUS
	THEN
	    $DBG_ERROR('DBGNTYPE\DBG$NEXECUTE_EDIT - RMS Parse error',.STATUS);

	STATUS = $SEARCH(FAB = .FABPTR);
	IF NOT .STATUS
	THEN
	    SIGNAL(DBG$_EDITNOFILE,2,
			.OLDNAMPTR[NAM$B_ESL],.OLDNAMPTR[NAM$L_ESA],.STATUS)
	ELSE

	    BEGIN
	    ! Issue a message about the file we are editing.
	    !
	    SIGNAL(DBG$_EDITFILE,2,.NAMPTR[NAM$B_RSL],.NAMPTR[NAM$L_RSA]);


	    ! Now compare the result of the SEARCH with the old filename, and
	    ! issue a pair of messages if the version differs.
	    !
	    IF CH$NEQ(.OLDNAMPTR[NAM$B_ESL], .OLDNAMPTR[NAM$L_ESA],
		      .NAMPTR[NAM$B_RSL],    .NAMPTR[NAM$L_RSA] )
	    THEN
		BEGIN
		SIGNAL(DBG$_EDITREVVER);
		SIGNAL(DBG$_EDITDISVER,2,.OLDNAMPTR[NAM$B_ESL],.OLDNAMPTR[NAM$L_ESA]);
		END;


	    ! Append the start position qualifier. Again, leave some
	    ! extra space for flexibiity.
	    !
	    LENGTH = .LENGTH + 21;
	    PTR = CH$MOVE(21, UPLIT BYTE(%ASCII '/START_POSITION   =  '), .PTR);


	    ! We need to call $FAO
	    ! to translate the record number that we have into a 
	    ! string.
	    ! 
	    CTRLBUF = UPLIT BYTE(%ASCII '(!UL,1) ');
	    CTRLDESC[DSC$B_CLASS] = DSC$K_CLASS_S;
	    CTRLDESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    CTRLDESC[DSC$W_LENGTH] = 8;
	    CTRLDESC[DSC$A_POINTER] = .CTRLBUF;
    	    FAOLEN = 0;
    	    FAODESC[DSC$B_CLASS] = DSC$K_CLASS_S;
    	    FAODESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
    	    FAODESC[DSC$W_LENGTH] = 80;
    	    FAODESC[DSC$A_POINTER] = FAOBUF;
    	    IF NOT SYS$FAO (CTRLDESC, FAOLEN, FAODESC, .RECNO)
    	    THEN
    		$DBG_ERROR('DBGNTYPE\DBG$NEXECUTE_EDIT $FAO failed');
    	    LENGTH = .LENGTH + .FAOLEN;
    	    IF .LENGTH GTR 132
    	    THEN
    		$DBG_ERROR('EDIT command: Command line buffer has overflowed');
    	    PTR = CH$MOVE(.FAOLEN, FAOBUF, .PTR);


    	    ! Append the file name to the command line.
    	    !
    	    LENGTH = .LENGTH + .NAMPTR[NAM$B_RSL];
    	    IF .LENGTH GTR 132
    	    THEN
    		$DBG_ERROR('EDIT command: Command line buffer has overflowed');
    	    PTR = CH$MOVE(.NAMPTR[NAM$B_RSL], .NAMPTR[NAM$L_RSA], .PTR);
    	    END

	    END

    ELSE
	SIGNAL(DBG$_EDITNOFILE);


    ! Now build a string descriptor with the command line.
    !
    STG_DESC[DSC$B_CLASS] = DSC$K_CLASS_S;
    STG_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
    STG_DESC[DSC$W_LENGTH] = .LENGTH;
    STG_DESC[DSC$A_POINTER] = COMMAND_LINE;


    ! Developer bit 1 causes us to print the result but not
    ! do the action - (for testing purposes).
    !
    IF .DBG$GL_DEVELOPER[1]
    THEN
    	BEGIN
        DBG$PRINT(UPLIT BYTE(%ASCIC '!AS'), STG_DESC);
        DBG$NEWLINE();
    	END

    ELSE
    	BEGIN

	! Set the screen back to normal
	!
	DBG$SCR_SCREEN_NORMAL();

        ! Invoke EDITH with either LIB$DO_COMMAND or LIB$SPAWN (depending
        ! on whether the /EXIT form of the command was used).
        !
        SELECTONE .VERB_NODE[DBG$B_VERB_COMPOSITE] OF
    	    SET

    	    [EDIT_EXIT]:
    		BEGIN
    		DBG$GV_CONTROL[DBG$V_CONTROL_EXIT] = TRUE;
    	        LIB$DO_COMMAND(STG_DESC);
    		END;

            [EDIT_NOEXIT]:
		BEGIN
		LOCAL
		    X;
    	        LIB$SPAWN(STG_DESC);
		IF .DBG$GB_KEYPAD_INPUT
		    THEN X = 1
		    ELSE X = 0;
		SMG$SET_KEYPAD_MODE(DBG$GL_KEYBOARD_ID, X);
		END;
    	
    	    [OTHERWISE]:
    	        $DBG_ERROR('DBGNTYPE\DBG$NEXECUTE_EDIT');
    	    TES;
    	END;


    ! We are all done. Return success.
    !
    RETURN STS$K_SUCCESS
    END;
END ELUDOM
