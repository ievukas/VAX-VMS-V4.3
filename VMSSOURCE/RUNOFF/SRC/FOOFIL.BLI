%TITLE 'File operations for footnote processing'
MODULE foofil (	IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					    NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:
!
!	Handle all file operations for .FOOTNOTE and .END FOOTNOTE 
!	commands.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	 CREATION DATE: September, 1978
!


%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	009	RER00009	Ron Randall	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--


%SBTTL 'Module Level Declarations'

!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    FOOFIL;

!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
MACRO
    erm_t (rnfcode, str_descr) =
	BEGIN
	BIND
	    temp = str_descr : $STR_DESCRIPTOR ();

	erme (rnfcode, .temp [STR$A_POINTER], .temp [STR$H_LENGTH], .semcod)
	END	%;

!
! EXTERNAL REFERENCES:
!
EXTERNAL
    FNCT : FNCT_DEFINITION,		! Overall footnote statistics.
    FNESIZ : FN_EXT_SIZE_DEFINITION,	! Size of each pending footnote.
    FNISIZ : FN_INT_SIZE_DEFINITION,	! Internal size of each pending
					!  footnote (number of TSF/MRA pairs)
    MRA : REF FIXED_STRING,
    TSF : TSF_DEFINITION;

EXTERNAL
    FO1IOB : $XPO_IOB (),		! Only the address is looked at.
    FOOIOB : REF  $XPO_IOB (),		! The primary footnote IOB.  Except for
					! FOO_CLEAN, all footnote operations
					! refer to this IOB.
    FOTIOB : REF  $XPO_IOB (),		! Used as a work file for footnotes.
    FFNAME : $STR_DESCRIPTOR (CLASS = DYNAMIC),	!Failure filename destination
    SEMCOD,				! Secondary error message code
    FOOREC : FOOREC_DEFINITION,		! Work area for pass-thru records.
    FOOMRA : FIXED_STRING,		! Substitute MRA.
    FOOTSF : VECTOR [TSF_SIZE];		! Substitute TSF area

EXTERNAL LITERAL 				!Error messages
    RNFCOF,
    RNFCRF,
    RNFCWF,
    RNFILE;

EXTERNAL ROUTINE
    ERM,
    ERME,
    ERMS,
    GRAB_RESULTANT;


%SBTTL 'body of routine'
GLOBAL ROUTINE foofil (operation) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Performs operations on the footnote file.
!
! FORMAL PARAMETERS:
!
!	OPERATION indicates what should be done.  See the file FFDEFS.REQ.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    LOCAL
	STATUS;

    CASE .OPERATION FROM 0 TO FFOO_OP OF
	SET

	[FOO_INIT] :			! Initialize footnote file.
	    BEGIN
	    ! When initializing the IOB make sure the associated file name is
	    ! correct.
	    IF  .FOOIOB EQLA FO1IOB
	    THEN
		$XPO_IOB_INIT ( IOB = .FOOIOB,
				FILE_SPEC = ('001RNO.TMP'),
				ATTRIBUTES = BINARY)
	    ELSE
		$XPO_IOB_INIT (	IOB = .FOOIOB,
				FILE_SPEC = ('002RNO.TMP'),
				ATTRIBUTES = BINARY);
	    RETURN FOO_NORMAL;
	    END;

	[FOO_OPIN] :			! Open footnote file for input.
	    BEGIN

	    IF  .FOOIOB [IOB$V_OPEN]	! Is the file open?
	    THEN
		IF  .FOOIOB [IOB$V_INPUT] ! Yes, but is it for input?
		THEN
		    RETURN FOO_NORMAL	! Yes again, so return.
		ELSE
		    ! NO, it's open for output.  We can't have that!  We must
		    ! close it and reopen it for input.
		    BEGIN
		    foofil (foo_clos);		! Always succeeds, so no status
						! check needed.

		    status = $XPO_OPEN ( IOB = .fooiob
					,OPTIONS = INPUT
					,FAILURE = grab_resultant
						);

		    IF  .status
		    THEN
			RETURN foo_normal
		    ELSE 				!Can't open footnote file for reading.
			BEGIN
			erm_t (rnfcof, ffname);
			RETURN foo_bad;
			END;

		    END
	    ELSE
		! The file is not open at all.  This indicates some serious
		! error, since the only reason the file could be closed is
		! either that the user has defined no footnotes, or all the
		! footnotes have already been output.  At any rate, output
		! an error message and return.
		BEGIN
		ERMS (RNFILE, CH$PTR (UPLIT ('FOO_OPIN')), 9);
		RETURN FOO_BAD
		END

	    END;

	[FOO_RHDR] :
	    ! Read a record header and copy the information into a safe place.
	    BEGIN
	    STATUS = $XPO_GET (IOB = .FOOIOB,
			       FAILURE = XPO$IO_FAILURE,
			       FULLWORDS = FOOREC_SIZE);

	    IF  NOT .STATUS	! Make sure the read went ok
	    THEN

		IF  .STATUS EQL XPO$_END_FILE
		THEN		! End of file is ok.  Just means there's
		    RETURN FOO_ENDFIL  ! nothing more to read.
		ELSE		! Couldn't read the record header.
		    BEGIN
		    ERM (RNFCRF, 0, 0);
		    RETURN (FOO_BAD)
		    END;

			! The record header has been read ok.  Now copy
	    BEGIN	! the information where it will be safe.
	    BIND
		RECORD_HEADER = FOOIOB [IOB$A_DATA] : REF VECTOR [FOOREC_SIZE];

	    INCR I FROM 0 TO (FOOREC_SIZE - 1) DO
		FOOREC [.I] = .RECORD_HEADER [.I];

	    END;

	    ! Signal successful completion to the user.
	    RETURN FOO_NORMAL

	    END;

	[FOO_OPOU] :
	    ! Open footnote file for output.
	    BEGIN

	    ! If the file is already opened for output just return.
	    IF  .FOOIOB [IOB$V_OPEN]
	    THEN	! The file is at least open.

		IF  .FOOIOB [IOB$V_OUTPUT]	! See if it's open for output.
		THEN	! The file is in exactly the state we want it in.
		    RETURN FOO_NORMAL
		ELSE	! The file is open for input, so we have to clean it up
		    RETURN FOOFIL (FOO_CLEAN);

	    ! The file is not open at all. So start anew.
	    ! Initialize the footnote IOB.
	    FOOFIL (FOO_INIT);

	    !Open file for output now.

	    status = $XPO_OPEN ( IOB = .fooiob
				,OPTIONS = OUTPUT
				,FAILURE = grab_resultant
					);

	    IF  .status
	    THEN
		RETURN foo_normal
	    ELSE 			! Can't open footnote file for output.
		BEGIN
		erm_t (rnfcof, ffname);
		RETURN foo_bad;
		END;

	    END;

	[FOO_READ] :
	    ! Read back a TSF/MRA pair.  A basic assumption is that the user
	    ! has already done a FOO_RHDR and found out that that is indeed
	    ! what's coming, and that FOOREC_RECORD_SIZE contains the length of
	    ! the TSF (which was fetched automatically by the FOO_RHDR
	    ! operation).  After the record header that was read, comes the
	    ! actual TSF.  Then comes a record header for the MRA, and them
	    ! comes the actual MRA.
	    BEGIN
	    !First, get the description of the text that has been saved.
	    STATUS = $XPO_GET ( IOB = .FOOIOB, 	!
				FAILURE = XPO$IO_FAILURE,
				FULLWORDS = .FOOREC_RECORD_SIZE);

	    IF  NOT .STATUS
	    THEN

		IF  .STATUS EQL XPO$_END_FILE
		THEN			! Reached the end of the footnote file.
		    RETURN FOO_ENDFIL
		ELSE 			! Couldn't read back footnote record.
		    BEGIN
		    ERM (RNFCRF, 0, 0);
		    RETURN FOO_BAD;
		    END;

	    ! The text descriptor (TSF) was read correctly.  Now move the
	    ! results into a waiting TSF.  The move is done because the next
	    ! read invalidates the current IOB pointers.
	    BEGIN

	    BIND
		FOOTSF = FOOIOB [IOB$A_DATA] : REF VECTOR;

	    ! Note that FOOREC_RECORD_SIZE amount of information is copied
	    ! instead of TSF_SIZE amount of information.  That allows other
	    ! routines to write only a part of a TSF, if desired.
	    INCR I FROM 0 TO .FOOREC_RECORD_SIZE - 1 DO
		TSF [.I] = .FOOTSF [.I];

	    END;

	    ! Get the record header for the MRA that must follow.
	    ! Note that this might be a good place to put a consistancy check.
	    FOOFIL (FOO_RHDR);

	    ! Now, get the actual saved text.  Note that FULLWORDS could be
	    ! computed as CH$ALLOCATION (.TSF_INT_HL + .TSF_INT_VL + 1) but
	    ! it's not, since that information is available in the record
	    ! header.  Also, that allows other code to write more or less
	    ! information, if desired.
	    STATUS = $XPO_GET ( IOB = .FOOIOB,
				FAILURE = XPO$IO_FAILURE,
				FULLWORDS = .FOOREC_RECORD_SIZE);

	    ! Make sure the read went ok.
	    IF  NOT .STATUS
	    THEN 				! Couldn't read back MRA.
		BEGIN
		ERM (RNFCRF, 0, 0);
		RETURN FOO_BAD;
		END;

	    ! Data was read, so make MRA look like a real FIXED string.
	    FS_START (MRA) = CH$PTR (.FOOIOB [IOB$A_DATA]);
	    FS_NEXT (MRA) = .FS_START (MRA);
	    FS_MAXSIZE (MRA) = .TSF_INT_HL + .TSF_INT_VL;
	    FS_LENGTH (MRA) = .TSF_INT_HL + .TSF_INT_VL;;
	    RETURN FOO_NORMAL;
	    END;

	[FOO_PREAD] :
	    ! Read a record that's by definition a "pass through" record.
	    ! Implicit in this processing is that the user has already read the
	    ! record header in FOOREC and determined that indeed, a "pass
	    ! through" record is to be read.  The "pass through" record is not
	    ! copied anywhere, but merely left in the buffer, where XPORT as
	    ! put it.  The address is returned in FOOREC_ADDRESS.
	    BEGIN
	    STATUS = $XPO_GET (IOB = .FOOIOB,
			       FAILURE = XPO$IO_FAILURE,
			       FULLWORDS = .FOOREC_RECORD_SIZE);

	    ! Make sure the read went ok.
	    IF  NOT .STATUS
	    THEN
		BEGIN
		ERM (RNFCRF, 0, 0);
		RETURN FOO_BAD
		END;

	    ! The read went ok.  Let the user know where the data is.
	    FOOREC_ADDRESS = .FOOIOB [IOB$A_DATA];

	    ! Tell the user everything went ok.
	    RETURN FOO_NORMAL
	    END;

	[FOO_WRIT] :
	    ! Write a footnote record.  A footnote record consists of a TSF
	    ! record and an MRA record. record header preceeds each record.
	    ! Note that this code leaves the minor record type (FOOREC_MINOR_CODE)
	    ! alone, so that the user can put whatever he wants into it.
	    BEGIN

	    ! First create the record header for the TSF
	    FOOREC_MAJOR_TYPE = FOOREC_MAJ_TSF;		! Major record type
	    FOOREC_RECORD_SIZE = TSF_SIZE;		! Length of the TSF

	    ! Now actually write out the record header
	    STATUS = $XPO_PUT (	IOB = .FOOIOB,
				FAILURE = XPO$IO_FAILURE,
				BINARY_DATA = (FOOREC_SIZE, FOOREC));

	    IF  NOT .STATUS 
	    THEN				! If we couldn't write the
		BEGIN				! record header, then
		ERM (RNFCWF, .STATUS, 0);	!   report the error
		RETURN FOO_BAD			!   and exit
		END;

	    STATUS = $XPO_PUT (	IOB = .FOOIOB,	! Write the real TSF
				FAILURE = XPO$IO_FAILURE,
				BINARY_DATA = (TSF_SIZE, .TSF) );

	    IF  NOT .STATUS 
	    THEN				! If we couldn't write the TSF,
		BEGIN				! then
		ERM (RNFCWF, .STATUS, 0);	!  report the error
		RETURN FOO_BAD;			!  and exit
		END;

	    ! Create the record header for the MRA
	    FOOREC_MAJOR_TYPE = FOOREC_MAJ_MRA;
	    FOOREC_RECORD_SIZE = CH$ALLOCATION ( .TSF_INT_HL +	! The number
						 .TSF_INT_VL +	! of fullwords
						 1  );		! (at least 1)

	    ! And write it out.
	    STATUS = $XPO_PUT ( IOB = .FOOIOB,
				FAILURE = XPO$IO_FAILURE,
				BINARY_DATA = (FOOREC_SIZE, FOOREC));

	    ! Make sure the write went ok.
	    IF 	NOT .STATUS
	    THEN
		BEGIN
		ERM (RNFCWF, .STATUS, 0);
		RETURN FOO_BAD
		END;

	    ! Write the MRA.  Always write at least 1 word.
	    STATUS = $XPO_PUT ( IOB = .FOOIOB,
				FAILURE = XPO$IO_FAILURE,
				BINARY_DATA = ( .FOOREC_RECORD_SIZE,
						MRA [5]) );

	    !Update current size of this footnote as it's being output.
	    FNESIZ [.FNCT_COUNT] = .FNESIZ [.FNCT_COUNT] + .TSF_LINES;

	    IF  .STATUS 
	    THEN		! If the above write went OK, update the
		BEGIN		! current internal size of this footnote
				! (number of TSF/MRA pairs)
		FNISIZ [.FNCT_COUNT] = .FNISIZ [.FNCT_COUNT] + 1;
		RETURN FOO_NORMAL;	!  and exit
		END
	    ELSE 			! If we couldn't write the MRA.
		BEGIN
		ERM (RNFCWF, .STATUS, 0);! report the error
		RETURN FOO_BAD;		 ! and exit
		END;

	    END;

	[FOO_PWRIT] :	! Write a "pass through" record to the footnote
	    BEGIN	!  temporary file:

	    ! We assume that FOOREC_MINOR_TYPE has already been set,
	    ! so we don't change it here.

	    FOOREC_MAJOR_TYPE = FOOREC_MAJ_PASS; ! Set the major record type.

	    STATUS = $XPO_PUT (IOB = .FOOIOB,	! Write the record header.
			       FAILURE = XPO$IO_FAILURE,
			       BINARY_DATA = (FOOREC_SIZE, FOOREC));

	    IF  NOT .STATUS 
	    THEN 				! If we couldn't write the
		BEGIN				! record header, then
		ERM (RNFCWF, .STATUS, 0);	!    report the error
		RETURN FOO_BAD;			!    and exit.
		END;

	    ! Now write the actual "pass through" record
	    STATUS = $XPO_PUT  (IOB = .FOOIOB,
				FAILURE = XPO$IO_FAILURE,
				BINARY_DATA = (.FOOREC_RECORD_SIZE, .FOOREC_ADDRESS));

	    IF  NOT .STATUS 
	    THEN	    			! If we Couldn't write the
		BEGIN				! "pass through" record,
		ERM (RNFCWF, .STATUS, 0);	!    then report the error
		RETURN FOO_BAD;			!    and exit.
		END;
	    
	    ! Update the record count for this footnote
	    FNISIZ [.FNCT_COUNT] = .FNISIZ [.FNCT_COUNT] + 1;
	    
	    ! Tell the user everything went ok.
	    RETURN FOO_NORMAL
	    END;

	[FOO_CLOS] :
	    BEGIN
	    $XPO_CLOSE (IOB = .FOOIOB,		! Close the footnote file, but
			OPTIONS = REMEMBER);	! remember file information,
						! so it can later be deleted.
	    RETURN FOO_NORMAL;
	    END;

	[FOO_DELE] :
	    
	    ! Delete the footnote file.
	    BEGIN
	    $XPO_DELETE (IOB = .FOOIOB, FAILURE = 0);
	    RETURN FOO_NORMAL;
	    END;

	[FOO_CLEAN] :
	    ! The footnote file is open for reading, but we want to put a new
	    ! footnote at the end of it.  Therefore, copy the remainder of the
	    ! footnote file into a new file, and leave it open for output, so
	    ! that stuff can be written to the end of the file.
	    BEGIN
	    $XPO_IOB_INIT (IOB = .fotiob);

	    ! Open the work file.  Note that its name depends on which IOB
	    ! FOTIOB refers to.
	    IF	.FOTIOB EQLA FO1IOB
	    THEN
		status = $XPO_OPEN ( IOB = .fotiob
				    ,OPTIONS = OUTPUT
				    ,ATTRIBUTES = BINARY
				    ,FILE_SPEC = ('001RNO.TMP')
				    ,FAILURE = grab_resultant
					)
	    ELSE
		status = $XPO_OPEN ( IOB = .fotiob
				    ,OPTIONS = OUTPUT
				    ,ATTRIBUTES = BINARY
				    ,FILE_SPEC = ('002RNO.TMP')
				    ,FAILURE = grab_resultant
					);

	    ! Verify that this work file could be opened.
	    IF  NOT .status
	    THEN
		! Something went wrong
		BEGIN
		erm_t (rnfcof, ffname);
		RETURN foo_bad
		END;

	    ! Now copy everything from the active footnote file into
	    ! the footnote work file.
	    STATUS = XPO$_NORMAL;
	    WHILE .STATUS NEQ XPO$_END_FILE DO
		BEGIN
		! First read the record header that describes each record
		STATUS = $XPO_GET (IOB = .FOOIOB,
				   FAILURE = XPO$IO_FAILURE,
				   FULLWORDS = FOOREC_SIZE);

		IF  NOT .STATUS
		THEN

		    ! Something's not quite right.  See what it is.
		    IF 	.STATUS EQL XPO$_END_FILE
		    THEN
			! Get out of this copy loop if nothing more to read.
			EXITLOOP
		    ELSE
			! Something serious.  Can't read back a footnote record.
			BEGIN
			ERM (RNFCRF, 0, 0);
			RETURN FOO_BAD
			END;

		! The read went correctly.  Now simply copy it to the work file.
		STATUS = $XPO_PUT (IOB = .FOTIOB, BINARY_DATA = FOOIOB [IOB$T_DATA]);

		! Check that it went ok.
		IF  NOT .STATUS
		THEN
		    ! Something happened.
		    BEGIN
		    ERM (RNFCWF, .STATUS, 0);
		    RETURN FOO_BAD
		    END;

		! Read the record that follows the record header.
		BEGIN
		BIND
		    FOOREC = FOOIOB [IOB$A_DATA] : REF FOOREC_DEFINITION;

		! Read precisely as much as the record header says was written.
		STATUS = $XPO_GET (IOB = .FOOIOB,
				   FAILURE = XPO$IO_FAILURE,
				   FULLWORDS = .FOOREC_RECORD_SIZE);

		! Make sure the read went ok.
		IF  NOT .STATUS
		THEN
		    ! Something went wrong.  End of file is not allowed here,
		    BEGIN 		!      so it must be an error.
		    ERM (RNFCRF, 0, 0);
		    RETURN (FOO_BAD)
		    END;

		! Now write this information to the work file.
		STATUS = $XPO_PUT (IOB = .FOTIOB,
				   BINARY_DATA = FOOIOB [IOB$T_DATA]);

		! Make sure the write went ok.
		IF  NOT .STATUS
		THEN
		     ! Something bad happened
		    BEGIN
		    ERM (RNFCWF, .STATUS, 0);
		    RETURN FOO_BAD
		    END;

		END;

		END;			! End of copying from FOOIOB to FOTIOB.

	    ! Get rid of the file that we just copied stuff from.
	    $XPO_CLOSE (IOB = .FOOIOB,		! Close the temp file, but
			OPTIONS = REMEMBER);	! remember its name.
	    $XPO_DELETE (IOB = .FOOIOB,		! Now, delete it, but don't
			 FAILURE = 0);		! barf if it isn't there.

	    ! Now switch IOB pointers because all the other FOOFIL operations
	    ! work only on FOOIOB.
	    BEGIN
	    LOCAL
		TEMP;

	    TEMP = .FOTIOB;
	    FOTIOB = .FOOIOB;
	    FOOIOB = .TEMP;
	    END;

	    !Update the footnote counting information
	    INCR I FROM 0 TO .FNCT_COUNT - 1 DO
		BEGIN
		FNESIZ [.I] = .FNESIZ [.I + .FNCT_OLD];
		FNISIZ [.I] = .FNISIZ [.I + .FNCT_OLD];
		END;

	    !And now forget there ever were any old footnotes.
	    FNCT_OLD = 0;

	    RETURN FOO_NORMAL
	    END;

	TES;

    END;					!End of FOOFIL

END						!End of module
ELUDOM
