	.title	pli$stringio - pl1 runtime get and put string
	.ident	/1-003/					; Edit CGN1003
							; Edit WHM1002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; facility:
;
;	VAX/VMS PL1 runtime library.
;
; abstract:
;
;	This module contains the pl1 runtime routine for initializing
;	the runtime system to perform a get or put string.
;
; author: c. spitz 4-oct-79
;
; modified:
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;	1-003	Chip Nylander	08-August-1983
;
;		Initialize the parent pointer with FP when stream block
;		allocated.
;
;--

;
; external definitions
;
	$deffcb				;define file control block
	$defstk				;define stack frame offsets
	$defstr				;define stream block offsets
	$defdat				;define operand node data types
	$defpl1rtcons			;define pl1 run time constants

;
; local definitions
;

	rtshare				;sharable
	.page
;++
; pli$getstrng_r6 -- get elements from a string
;
; functional description:
;
; This routine initializes the runtime system to perform a GET STRING
; statement.
;
; the get statement is compiled into code that sets up the parameters to
; this routine, and then jsb's to it. this routine creates a file control
; block for the string, and initializes the buffer pointers to point to the
; string. we then allocate and initialize a string control block.
; following the jsb in the inline code, the compiler has generated code
; that stores the address and size of the next element in r0 and r1. the
; inline code then jsb's to the routine in pli$getedi or pli$getlis modules
; that processes elements of that data type. 
;
;
; inputs:
;	(sp) - address of first element inline code
;	r0 - address of string (must be char var)
;	r1 - address of the compiled format(get edit), or 0 (get list)
; outputs:
;	ap - address of the file control block for this character string
;	r11 - address of the stream block for this get statement
; side effects:
;	r0-r6 are destroyed
;--

pli$getstrng_r6::
	movl	sp,r4			;set get indicator
	brb	stringcom		;cont in common
;++
; pli$putstrng_r6
;
; functional description:
;
; This routine initializes the runtime system to put elements to a string.
;
; the put statement is compiled into code that sets up the parameters to
; this routine and then jsb's to it. this routine creates a file control
; block for the string, and initializes the
; inputs:
;	(sp) - address of first element inline code
;	r0 - address of string (char or vcha)
;	r1 - address of the compiled format(get edit), or 0 (get list)
;	r2 - max size of dest
;	r3 - data type of dest
; outputs:
;	ap - address of the file control block for this character string
;	r11 - address of the stream block for this get statement
; side effects:
;	r0-r6 are destroyed
;--
pli$putstrng_r6::
	clrl	r4			;set put indicator
stringcom:
	popl	r6			;save return address
	subl	#fcb_c_strlen,sp	;get room for string file control block
;
; initialize file control block
;
	movl	sp,ap			;set file control block addr
	movq	#0,fcb_l_next(ap)	;clr link fields
	movl	#<atr_m_opened! -	;init file attributes
		atr_m_stream!atr_m_bfall! - ;
		atr_m_string>,fcb_l_attr(ap) ;
	tstl	r4			;get or put?
	beql	10$			;if eql, its put
	bisl	#atr_v_input,fcb_l_attr(ap) ;set input in fcb
	movzwl	(r0)+,r2		;get length of string
	brb	50$			;cont
10$:	bisl	#atr_v_output,fcb_l_attr(ap) ;set output in fcb
	bicl	#atr_m_vcha,fcb_l_attr(ap) ;assume not char var dest
	cmpl	#dat_k_char,r3		;char dest?
	beql	50$			;if eql, yes, cont
	bisl	#atr_m_vcha,fcb_l_attr(ap) ;set vcha dest
	tstw	(r0)+			;point past length of vcha
50$:	movl	r0,fcb_l_buf(ap)	;set buffer address
	movl	r0,fcb_l_buf_pt(ap)	;set buffer pointer
	addl3	r2,r0,fcb_l_buf_end(ap) ;set buffer end
	movq	#0,fcb_q_rfa(ap)	;set rfa to 0
	movw	#pli$c_version,fcb_w_revision(ap) ;set revision
	assume	<fcb_w_linesize+2> eq fcb_w_pagesize
	assume	<fcb_w_column+2> eq fcb_w_line
	movq	#0,fcb_w_linesize(ap)	;clr linesize, pagesize, col and line
	movw	r2,fcb_w_linesize(ap)	;set linesize to length of string
	clrw	fcb_w_page(ap)		;clr page
;
; allocate stream block
;
	subl	#str_c_len,sp		;alloc space for stream block
	movl	sp,r11			;set address of stream block
	movab	str_l_stack_end(r11),str_l_fld_end(r11) ;set end of field
;
; initialize format stack
;
	movl	fp,str_l_parent(r11)	;set default parent pointer
	movl	r1,str_l_fp(r11)	;set address of format pointer
	movl	r1,str_l_stack(r11)	;copy format pointer to stack
	movab	str_l_stack(r11),str_l_sp(r11) ;store format stack pointer
;
; return to inline code
;
	jmp	(r6)			;return

	.end
