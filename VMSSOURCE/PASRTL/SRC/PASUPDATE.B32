MODULE PAS$UPDATE ( %TITLE 'UPDATE procedure'
		IDENT = '1-004'		! File: PASUPDATE.B32 Edit: SBL1004
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains PAS$UPDATE, which implements the
!	VAX-11 Pascal UPDATE procedure.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 29-January-1982
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 29-January-1982
! 1-002 - Set RBF and RSZ before doing $UPDATE.  Check linelimit.
!	  SBL 28-Oct-1982
! 1-003 - Don't check linelimit, since a new record is not being added
!	  to the file.  SBL 8-Nov-1982
! 1-004 - Allow UPDATE of sequential organization files, as long as they
!	  are opened for direct access (fixed-length records).  SBL 24-Feb-1984
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$UPDATE: NOVALUE;			! Do an UPDATE

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE

%SBTTL 'PAS$UPDATE - UPDATE procedure'
GLOBAL ROUTINE PAS$UPDATE (
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	ERROR						! Unwind address if error
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAS$UPDATE implements the VAX-11 Pascal UPDATE procedure.  It
!	updates the current file component with the contents of the
!	file buffer.
!
! CALLING SEQUENCE:
!
!	CALL PAS$UPDATE (PFV.mr.r [, ERROR.j.r])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  if an error occurs.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	FILNOTOPE - File not open
!	FILNOTINS - File is not in Inspection mode
!	FILNOTDIR - file is not opened for direct access
!	FILNOTKEY - file is not opened for keyed access
!	CURCOMUND - current component is undefined
!	KEYCHANOT - key value change is not allowed
!	KEYDUPNOT - key value duplication is not allowed
!	ERRDURUPD - Error during UPDATE
!	
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,		! File Control Block
	FAB: REF BLOCK [, BYTE],			! RMS FAB
	STATUS,						! Status from $UPDATE
	PFV_ADDR: VOLATILE,				! Enable argument
	UNWIND_ACT: VOLATILE,				! Enable argument
	ERROR_ADDR: VOLATILE;				! Enable argument

    BIND
	RAB = FCB: REF BLOCK [, BYTE];			! RMS RAB

    BUILTIN
	ACTUALCOUNT;

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);

    IF ACTUALCOUNT () GEQU 2
    THEN
	ERROR_ADDR = .ERROR;				! Set unwind address

    !+
    ! Set PFV address enable argument.
    !-

    PFV_ADDR = PFV [PFV$R_PFV];

    !+
    ! Validate and lock PFV
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Open file if it should be implicitly opened.
    !-

    IF NOT .PFV [PFV$V_VALID]
    THEN
	PAS$$OPEN_IMPLICIT (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! Verify that the file is open.
    !-

    IF NOT .PFV [PFV$V_OPEN]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTOPE,0);

    !+
    ! Verify that the file is in Inspection mode.
    !-

    IF NOT .FCB [FCB$V_INSPECTION]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTINS,0);

    !+
    ! Verify that the file was opened either direct or keyed.
    !-

    FAB = .RAB [RAB$L_FAB];
    IF .FCB [FCB$V_SEQUENTIAL]	! Neither DIRECT nor KEYED
    THEN
	IF .FAB [FAB$B_ORG] NEQ FAB$C_IDX	! Not indexed?
	THEN
	    $PAS$IO_ERROR (PAS$_FILNOTDIR,0)
	ELSE 	! Must be INDEXED
	    $PAS$IO_ERROR (PAS$_FILNOTKEY,0);

    !+
    ! Set RSZ appropriately.
    !-

    IF .FCB [FCB$V_VARYING]
    THEN
	RAB [RAB$W_RSZ] = .(.PFV [PFV$A_BUFFER])<0,16,0>
    ELSE
	RAB [RAB$W_RSZ] = .RAB [RAB$W_USZ];

    RAB [RAB$L_RBF] = .RAB [RAB$L_UBF];

    !+
    ! Do the $UPDATE to update the current component.
    !-

    STATUS = $PAS$RMS_OP ($UPDATE (RAB=.RAB));
    IF NOT .STATUS
    THEN
	!+
	! $UPDATE failed.  Give specific or generic error as appropriate.
	!-

	SELECTONE .STATUS OF
	    SET

	    [RMS$_CUR]:
		$PAS$IO_ERROR (PAS$_CURCOMUND);	! Current component undefined

	    [RMS$_CHG]:
		$PAS$IO_ERROR (PAS$_KEYCHANOT);	! Key value change not allowed

	    [RMS$_DUP]:
		$PAS$IO_ERROR (PAS$_KEYDUPNOT);	! Key value duplication not allowed

	    [OTHERWISE]:
		$PAS$IO_ERROR (PAS$_ERRDURUPD);	! Error during UPDATE

	    TES;

    !+
    ! Undefine file buffer
    ! Cancel previous LOCATE
    ! Indicate successful operation
    ! Unlock the file
    !-

    FCB	[FCB$L_STATUS] = 0;
    FCB [FCB$V_LOCATE] = 0;
    PFV [PFV$V_DFB] = 0;
    PFV [PFV$V_LOCK] = 0;

    RETURN;

    END;					! End of routine PAS$UPDATE

!<BLF/PAGE>

END						! End of module PAS$UPDATE

ELUDOM
