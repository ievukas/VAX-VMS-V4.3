%TITLE 'EDT$LPRINT - PRINT line-mode command'
MODULE EDT$LPRINT (				! PRINT line-mode command
		IDENT = 'V04-000'			! File: LPRINT.BLI Edit: JBS1027
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module is called to produce a file containing
!	a specified range of text in a special format.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: February 3, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 30-JAN-81.  This module was created by
!	extracting the routines PRINT and EDT$$PRNT_CMD  from EXEC.BLI.
! 1-002	- Regularize headers.  JBS 20-Mar-1981
! 1-003	- Use new message codes.  JBS 04-Aug-1981
! 1-004 - Convert to fileio for reads and writes. STS 15-Jan-1982
! 1-005 - Pass RHB address to callfio. STS 21-Jan-1982
! 1-006 - Don't pass descriptors to close file. STS 10-Feb-1982
! 1-007 - Pass file name to edt$$fiopn_err. STS 25-Feb-1982
! 1-008 - Add literals for callable EDT. STS 08-Mar-1982
! 1-009	- Avoid infinitely recursive calls to PRINT.  JBS 11-Mar-1982
! 1-010	- Print a message on CLOSE errors.  JBS 12-Apr-1982
! 1-011 - Check for CNTRL/C.  SMB 14-Apr-1982
! 1-012 - Move conversion to UPCASE for PDP-11's to FILEIO.  SMB 21-Apr-1982
! 1-013	- Set a flag if control C actually aborts something.  JBS 24-May-1982
! 1-014 - Remove reference to SET_FMTWRRUT.  SMB 11-Jun-1982
! 1-015 - Save buffer position and restore after print. STS 14-Jun-1982
! 1-016	- Pass default file name in RHB parameter.  JBS 15-Jun-1982
! 1-017	- Remove EDT$$OPN_FI, EDT$$WR_OFI and EDT$$CLS_FI external references:
!	   they are unused.  JBS 15-Jun-1982
! 1-018 - Stop the working message before second CTRL/C check.  SMB 22-Jun-1982
! 1-019 - Stop processing on bad select range.  SMB 01-Jul-1982
! 1-020 - Errors on select must be caught at a higher level.  SMB 02-Jul-1982
! 1-021 - Change print file message names.  SMB 13-Jul-1982
! 1-022 - Make edt$$tst_eob in line. STS 22-Sep-1982
! 1-023 - Make EDT$$RNG_POSFRST in line. STS 11-Oct-1982
! 1-024	- Reject lines starting with ESC.  JBS 19-Oct-1982
! 1-025 - Don't use STR$COPY for puts. STS 10-Nov-1982
! 1-026	- Use LIB$LP_LINES to compute the number of lines per page on VMS.  JBS 29-Apr-1983
! 1-027	- Correct an error in a comment.  JBS 14-Jun-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    PRINT,					! Format write routine for PRINT command
    EDT$$PRNT_CMD : NOVALUE;			! Process the PRINT command

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

%IF %BLISS (BLISS32)
%THEN

REQUIRE 'EDTSRC:SYSSYM';

%FI

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    K_MAX_LINES = 66,				! Max lines per page for PDP-11 systems
    K_OVERHEAD_LINES = 6;			! Number of overhead lines

EXTERNAL LITERAL
    EDT$K_PUT,
    EDT$K_CLOSE,
    EDT$K_CLOSE_DEL,
    EDT$K_WRITE_FILE,
    EDT$K_OPEN_OUTPUT_NOSEQ;

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'PRINT - intercept formatted output'
ROUTINE PRINT (					! Intercept formatted output
    RECADDR, 					! Address of record
    RECLEN					! Length of record
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is made the format write routine when doing a PRINT
!	command.  Whenever the formatting routines are to output a record
!	this routine is called, which in turn writes the line to the file.
!
! FORMAL PARAMETERS:
!
!  RECADDR		Address of the record to write
!
!  RECLEN		Length of that record
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Same as EDT$$WR_OFI
!
! SIDE EFFECTS:
!
!	Changes the formatted write routine to EDT$$TI_WRLN during
!	I/O, then restores it before returning.
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$CALLFIO,
	EDT$$TI_WRLN;

    EXTERNAL
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,
	EDT$$A_FMT_WRRUT,
	EDT$$L_IO_VFCHD;

    LOCAL
	STATUS,
	LEN,
	ADDR,
	RHB_DESC : BLOCK [8, BYTE],
	FILE_DESC : BLOCK [8, BYTE];

%IF %BLISS (BLISS32)
%THEN
    RHB_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    RHB_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    FILE_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    FILE_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
%FI

    FILE_DESC [DSC$A_POINTER] = .RECADDR;
    FILE_DESC [DSC$W_LENGTH] = .RECLEN;
    RHB_DESC [DSC$A_POINTER] = EDT$$L_IO_VFCHD;
!+
! Just in case the I/O routines have an error and decide to
! print a message about it, set the format write routine
! back to EDT$$TI_WRLN for the duration of the I/O.
!-
    EDT$$A_FMT_WRRUT = EDT$$TI_WRLN;
!+
! Reject any lines that start with ESC.  This is because if we do a PRINT in
! change mode, EDT will try to put the text at the bottom of the screen, and
! will issue escape sequences to this effect.  Since we don't want these
! escape sequences to go into the file, reject them.
!-

    IF ((CH$RCHAR (.RECADDR) EQL ASC_K_ESC) AND .RECLEN NEQ 0)	!
    THEN
	STATUS = 1
    ELSE
	STATUS = EDT$$CALLFIO (EDT$K_PUT, EDT$K_WRITE_FILE, FILE_DESC, RHB_DESC);

!+
! Now restore this routine as the formatted write routine.
!-
    EDT$$A_FMT_WRRUT = PRINT;
    RETURN (.STATUS);
    END;					! of routine PRINT

%SBTTL 'EDT$$PRNT_CMD  - PRINT line-mode command'

GLOBAL ROUTINE EDT$$PRNT_CMD 			! PRINT line-mode command
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Command processing for PRINT.  First, attempt to open the file.
!	If it succeeds then set up the little routine above as the format
!	write routine and process the range.  A page skip is done after
!	60 lines, or when the first character of a line is a form feed,
!	whichever comes first.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$A_CUR_BUF
!	EDT$$G_TXT_ONSCR
!	EDT$$G_TI_WID
!	EDT$$Z_RNG_ORIGPOS
!	EDT$$A_WK_LN
!	EDT$$A_EXE_CURCMD
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_TXT_ONSCR
!	EDT$$G_CC_DONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	On exit from this routine, the formatting routine is set to EDT$$TI_WRLN.
!	While it is running, the formatting routine is usually in this module.
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$STOP_WKINGMSG,
	EDT$$CHK_CC,
	EDT$$CALLFIO,
	EDT$$OUT_FMTBUF,
	EDT$$FMT_MSG,
	EDT$$TI_WRLN,
	EDT$$NXT_LNRNG,
	EDT$$RNG_REPOS,
	EDT$$RD_CURLN,
	EDT$$FIOPN_ERR,
	EDT$$TY_CURLN;

%IF %BLISS (BLISS32)
%THEN

    EXTERNAL ROUTINE
	STR$FREE1_DX,				! needed for deallocation of dynamic descriptors
	LIB$LP_LINES;				! Compute number of lines per page

%FI

    EXTERNAL
	EDT$$G_EXT_MOD,				! Are we in EXT mode
	EDT$$A_FMT_WRRUT,			! Address of write routine
	EDT$$Z_RNG_SAVPOS,
	EDT$$A_FMT_CUR,
	EDT$$T_FMT_BUF,
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,
	EDT$$G_TXT_ONSCR,
	EDT$$G_TI_WID,
	EDT$$Z_RNG_ORIGPOS : POS_BLOCK,
	EDT$$Z_EOB_LN,
	EDT$$G_RNG_FRSTLN,
	EDT$$A_WK_LN : REF LIN_BLOCK,
	EDT$$A_EXE_CURCMD : REF NODE_BLOCK,	! Pointer to the current command.
	EDT$$G_CC_DONE;				! Set to 1 if control C actually aborted something

    MESSAGES ((NOFILSPC, PRIFILCRE, PRIFILCLO));

    LOCAL
	FORMAT_ROUTINE,				! Save the format routine entered with
	COUNT,					! Number of lines on this page
	FILE_DESC : BLOCK [8, BYTE],
	RHB_DESC : BLOCK [8, BYTE],
	SAV_BUF,
	STRLEN,
	STRADR,
	SAVE_WIDTH,				! Save the terminal width
	IFI,					! IFI of the output file.
	MAX_LINES;				! Number of lines par page

    BIND
	RAN = .EDT$$A_EXE_CURCMD [RANGE1] : NODE_BLOCK;

!+
! Make sure there is a file spec.
!-

    IF (.EDT$$A_EXE_CURCMD [FSPCLEN] EQL 0)
    THEN
	BEGIN
	EDT$$FMT_MSG (EDT$_NOFILSPC);
	RETURN;
	END;

!+
! If the range is null, then make it the whole buffer.
!-
    SAV_BUF = .EDT$$A_CUR_BUF;			! save original address

    IF (.RAN [RAN_TYPE] EQL RAN_NULL) THEN RAN [RAN_TYPE] = RAN_WHOLE;

!+
! Position to top of range.
!-
    EDT$$G_RNG_FRSTLN = 1;
    EDT$$CPY_MEM (POS_SIZE, .EDT$$A_CUR_BUF, EDT$$Z_RNG_ORIGPOS);

    IF ( NOT EDT$$RNG_REPOS (.EDT$$A_EXE_CURCMD [RANGE1])) THEN RETURN;

    FORMAT_ROUTINE = .EDT$$A_FMT_WRRUT;
!+
! Compute the number of lines per page.
!-

%IF %BLISS (BLISS32)
%THEN
    MAX_LINES = MAX (1, LIB$LP_LINES () - K_OVERHEAD_LINES);
%ELSE
    MAX_LINES = MAX (1, K_MAX_LINES - K_OVERHEAD_LINES);
%FI

!+
! Set up so a form feed will be output immediately.
!-
    COUNT = .MAX_LINES;
!+
! Open the file.
!-

%IF %BLISS (BLISS32)
%THEN
    FILE_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    FILE_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    RHB_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    RHB_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
%FI

    FILE_DESC [DSC$A_POINTER] = 0;
    FILE_DESC [DSC$W_LENGTH] = 0;
    RHB_DESC [DSC$A_POINTER] = 0;
    RHB_DESC [DSC$W_LENGTH] = 0;
    STRLEN = .EDT$$A_EXE_CURCMD [FSPCLEN];
    STRADR = .EDT$$A_EXE_CURCMD [FILSPEC];
    STRING_DESC (FILE_DESC, STRLEN, .STRADR);
    IFI = EDT$$CALLFIO (EDT$K_OPEN_OUTPUT_NOSEQ, EDT$K_WRITE_FILE, FILE_DESC, RHB_DESC);

    IF (.IFI NEQ 0)
    THEN
	BEGIN
!+
! Save the current terminal width and make it 132 characters for the printer.
!-
	SAVE_WIDTH = .EDT$$G_TI_WID;
	EDT$$G_TI_WID = 132;
!+
! Reset the format writing routine.
!-
	EDT$$A_FMT_WRRUT = PRINT;
!+
! Loop through the range.
!-

	WHILE (EDT$$NXT_LNRNG (0) AND ( NOT EDT$$CHK_CC ())) DO
	    BEGIN

	    IF (.EDT$$A_WK_LN NEQA EDT$$Z_EOB_LN)
	    THEN
		BEGIN
!+
! Look for form-feed in the record.
!-

		IF (CH$RCHAR (EDT$$A_WK_LN [LIN_TEXT]) EQL 12) THEN COUNT = .MAX_LINES;

!+
! Check for a page skip.
!-

		IF (.COUNT EQL .MAX_LINES)
		THEN
		    BEGIN
		    PRINT (UPLIT BYTE(12), 1);
!+
! now dump out two blank lines
! first make sure that the format buffer is empty
!-
		    EDT$$A_FMT_CUR = EDT$$T_FMT_BUF;
		    EDT$$OUT_FMTBUF ();
		    EDT$$OUT_FMTBUF ();
		    COUNT = 0;
		    END;

		COUNT = .COUNT + 1;
!+
! And print the line.
!-

		IF ( NOT EDT$$TY_CURLN ()) THEN EXITLOOP;

		END;

	    END;

	IF (.EDT$$G_EXT_MOD) THEN EDT$$STOP_WKINGMSG ();

!+
! Reposition to the first line of the range.
!-
	EDT$$CPY_MEM (POS_SIZE, EDT$$Z_RNG_SAVPOS, .EDT$$A_CUR_BUF);
	EDT$$RD_CURLN ();
!+
! Close the file.
!-

	IF EDT$$CHK_CC ()
	THEN
	    BEGIN

	    IF ( NOT EDT$$CALLFIO (EDT$K_CLOSE_DEL, EDT$K_WRITE_FILE, FILE_DESC, 0))
	    THEN
		EDT$$FIOPN_ERR (EDT$_PRIFILCRE, FILE_DESC);

	    EDT$$G_CC_DONE = 1;
	    END
	ELSE

	    IF ( NOT EDT$$CALLFIO (EDT$K_CLOSE, EDT$K_WRITE_FILE, FILE_DESC, 0))
	    THEN
		EDT$$FIOPN_ERR (EDT$_PRIFILCRE, FILE_DESC);

!+
! Restore the terminal width and the format write routine,
! and reposition to the original line.
!-
	EDT$$G_TI_WID = .SAVE_WIDTH;
	EDT$$A_FMT_WRRUT = EDT$$TI_WRLN;
	EDT$$A_CUR_BUF = .SAV_BUF;		! first get the buffer address
	EDT$$CPY_MEM (POS_SIZE, EDT$$Z_RNG_ORIGPOS, .EDT$$A_CUR_BUF);
	EDT$$RD_CURLN ();
	END
    ELSE
!+
! Here if file was not opened.
!-
	EDT$$FIOPN_ERR (EDT$_PRIFILCRE, FILE_DESC);

    EDT$$A_FMT_WRRUT = .FORMAT_ROUTINE;
!+
! On VMS deallocate dynamic descriptors
!-

%IF %BLISS (BLISS32)
%THEN
    STR$FREE1_DX (FILE_DESC);
    STR$FREE1_DX (RHB_DESC);
%FI

    END;					! of routine EDT$$PRNT_CMD

!<BLF/PAGE>

END						! of module EDT$LPRINT

ELUDOM
