	.TITLE	RMSRECOVR Recovery Routine
	.IDENT	/V04-000/
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;
;++
; Facility: RMS32 Recovery
;
; Abstract:
;
;		This routine is merged into the Recovery Control Process to
;		serve as the RMS recovery agent.  Roll-forward and
;		roll-backward for all supported RMS operations is coordinated
;		through this routine.
;
;
; Environment:
;
;		Star processor running Starlet exec.  This routine is to be
;		merged into the RCP (Recovery Control Process) to handle
;		RMS Recovery operations.  This routine never executes outside
;		the context of the RCP.
;
;		This routine must be PIC since it will be merged into the
;		address space of the RCP.
;
; Author: 	Peter Lieberwirth	 Creation Date: 29-Apr-1982
;
; Modified By:
;
;
;	V01-008	KPL0010		Peter Lieberwirth	23-Jan-1983
;		Move INIT_RFB and other RFB routines to RMSRECRFB.  Change
;		OPEN_RFB to OPEN_FILE.  Fix some recovery unit code.
;		Add code to BUG routine.
;
;	V01-007	KPL0009		Peter Lieberwirth	13-Jan-1983
;		First pass at better error handling.  Add BUG routine.
;		Improve mapping identification.  Misc. cleanups.  Ignore
;		CLOSE mapping entries on AI, and OPEN mapping entries
;		on BI.  Restructure START and PARTICIPATE.
;
;	V01-006	KPL0006		Peter Lieberwirth	 5-Jan-1983
;		Fix RFB "file as journaled" temporarily until RMS fills
;		in journal entry correctly.  Fix comments.  Turn off
;		ADD_JNL_FILTER, journal name must be specified in the
;		recover command.  FIND_RFB_BYNAME returns FAB, RAB
;		address.
;
;		Use better technique for identifying mapping entry.
;		Do more common connect functions in CONNECT_STREAM.
;
;	V01-005	KPL0005		Peter Lieberwirth	27-Dec-1982
;		Add recovery-unit recovery support.  Start cleaning up LOG
;		business.  Improve commentary since we know how RUJNL recovery
;		will work.  Put in support for correctly naming the device
;		upon which the recoverable file is to be opened.
;
;	V01-004	KPL0004		Peter Lieberwirth	23-Nov-1982
;		Fix bugs due to implementation of new RCP interface.
;		Separate CONNECT code from OPEN code because file org
;		not available at START time when file needs to be opened
;		to return journal name.  Fix register usage.  Save AP
;		at call in RRB.  Use improved GET_BUFF interface.  Fix
;		some problems with volume filters.
;
;	V01-003	KPL0003		Peter Lieberwirth	17-Nov-1982
;		Add $CJFDEF for rcparg and rcp codes.
;
;	V01-002	KPL0002		Peter Lieberwirth	14-Nov-1982
;		Changes for new RCP interface, new modules to contain
;		filters and miscelleneous subroutines, and general
;		cleanup.  Improve structure of START and PROCESS.
;
;	V01-001 KPL0001		Peter Lieberwirth	31-Oct-1982
;		Fix IDENT, make logging and translation of RECOVER$FILE
;		and RECOVER$VOLUME re-entrant.  Fix register initialization
;		bugs.
;--
.SUBTITLE Declarations

;
; Include Files
;

;
; Macros
;

	$JFCBDEF	; journal definitions, including filter types
	$CJFDEF		; common CJF definitions
	$WRFLGDEF	; CJF journal flags
	$ROFDEF		; RMS recovery filter
	$RRPDEF		; recovery control packet definitions
	$RODBDEF	; RCP recoverable object descriptor block definitions
	$JENDEF		; RCP journal entry offsets
	$RJRDEF		; RMS journal entry format
	$RIMPDEF	; RMS recovery impure storage definition
	$RMSRDEF	; RMS operations
	$RRBDEF		; rms recovery block
	$RFBDEF		; rms recovery file block
	$RVBDEF		; rms recovery volume block
	$RLOGDEF	; rms recovery logging
	$RFTLDEF	; rms recovery error messages
	$FABDEF		; fab definitions
	$RABDEF		; rab definitions

	$IMPDEF		; RMS impure area definitions
	
	$TMPOFFDEF	; definitions for argument offsets on CALL
;
; local constants - for time being
;
RMS$_UNSUPPORTED=0

RCP$K_START	 = 1
RCP$K_PROCESS	 = 2
RCP$K_END	 = 3
RCP$K_MAP_ENTRY	 = 4
RCP$K_LOCK_ENTRY = 5
RCP$K_ABORT	 = 6
RCP$K_NOPR_ENTRY = 7
RCP$K_LOG_OBJECT = 8

;++
;
; this psect is used for read-only data.
;
;--
	.PSECT	RD_DATA,RD,NOWRT,NOEXE

OVERHEAD_FAO::
.ASCID	*!/RMS Journaling Record:!/Common Overhead:!/!_Flags:!_!XL!/!_Vers:!_!XL!/!_Org:!_!XL!/!_Op:!_!XL!/!_Mapseq:!_!XL*

RECORD_FAO::
 .ASCID	*!/Record Information:!/!_Chksum:!_!XL!/!_RFA:!XL!XL!/!_Record Size:!_!ZL!/Record:!_!AF*

FILE_FAO::
 .ASCID *!/File Information:!/!_Volume Label:!_!AD!/!_File Name:!_!AD*

FILE::	.ASCID	/RECOVER$FILE/		; translates to the file to recover

VOLME::	.ASCID	/RECOVER$VOLUME/	; volume label of recoverable file

LOGFILE::
	.ASCII	/RECOVER$LOG/		; file spec for debug logging
LOGFILE_SIZE == .-LOGFILE

;++
;
; Note the lack of any transfer address. Also note that the PSECT 
; attributes for the transfer module ensure that it is linked first
; and should not be changed. The two are linked together as
;
;	$ LINK/SHARE RR + RRXFER
;
; That's all there is to it as far as linking goes. What goes inside the 
; recovery routine itself, and the calling sequence, is currently 
; up-to-date in SYS$PUBLIC:RCPSPEC.MEM.
;
;
;
; Process all command types as per RCPSPEC.MEM.
;
;--

;++
;
; Recovery Interface -
;
;	call	rr(command, RRP, jen, impure, astadr, callbak)
;
;		command - command type
;
;			rcp$k_start	- start recovery
;			rcp$k_object_id	- lock file objects for RU pass
;			rcp$k_process	- process a facility journal entry
;			rcp$k_nopr_entry- journal entry implies priv violation
;			rcp$k_lock_entry- lock record objects for RU pass
;			rcp$k_end	- end recovery
;			rcp$k_abort	- abnormaly end recovery
;			rcp$k_log_object- write a log message to identify object
;
;		RRP	- address of RRP
;
;		jen	- address of journal entry
;
;		impure	- address of impure area allocated by thread at start
;
;		astadr	- AST address to be used in any asynch call
;			  made by recovery routine
;
;		callbak	- address to call back RCP with one of following events:
;
;			wait	- address called by this routine when waiting
;				  for completion of asynch event
;
;			fadd	- address of longword to receive address of
;				  optional filter list to be added
;
;			fdel	- address of longword to receive address of
;				  optional filter list to be deleted
;
;			log	- address of longword to receive optional
;				  log message descriptor
;
;--

;++
;
; Register usage in this routine:
;
; if the recovery request is not PROCESS
;
;	R11 - points to impure storage area (RRB)
;	R10 - points to the RRP passed as the second argument
;	R9  - points to the RODB
;	R8  - points to RFB
;	R7  - points to FAB for OPEN
;	R6  - used to point to RODBAs
;
; if the recovery request is PROCESS
;
;	R11 - points to impure storage area (RRB)
;	R10 - points to the RRP passed as the second argument
;	R9  - points to the RMS journal entry (RJR)
;	R8  - points to the recoverable file block (RFB)
;	R7  - points to FAB which is in the RFB
;	R6  - points to RAB which is in the RFB (if its a record operation)
;
;--

	.PSECT	REC_CODE,EXE,NOWRT,PIC

	.ENTRY	RR_ENTRY,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	ASSUME	RCP$K_START	 EQ 1
	ASSUME	RCP$K_PROCESS	 EQ 2
	ASSUME	RCP$K_END	 EQ 3
	ASSUME	RCP$K_MAP_ENTRY	 EQ 4
	ASSUME	RCP$K_LOCK_ENTRY EQ 5
	ASSUME	RCP$K_ABORT	 EQ 6
	ASSUME	RCP$K_NOPR_ENTRY EQ 7
	ASSUME	RCP$K_LOG_OBJECT EQ 8

	CLRQ	R6			; protect this routine from RCP
	CLRQ	R8			;
	CLRQ	R10			;

	$CASE	RCPARG$_COMMAND(AP),TYPE=L-	; dispatch to action routine
		DISPL=< 10$,-			; illegal command value
			RM$RR_START,-		; start a recovery operation
			RM$RR_PROCESS,-		; process a journal entry
			RM$RR_END,-		; recovery completion
			RM$RR_MAP_ENTRY,- 	; process entry as OBJECT_ID
			RM$RR_LOCK_ENTRY,- 	; lock a journal entry
			RM$RR_ABORT,-		; abort a recovery operation
			RM$RR_NOPR_ENTRY,- 	; no priv on this entry
			RM$RR_LOG_OBJECT>  	; log a message on this object

10$:	MOVL	#RCP$_BADPARAM,R0	; indicate error to RCP
	RET				;

.SUBTITLE RM$RR_START	- START RECOVERY
;++
; 
; routine name:	RM$RR_START
;
;	This routine is called at the beginning of the recovery operation.
;	Its purpose is to decide whether RMS Recovery needs to participate
;	for this object, and if so, to allocate the initial piece of impure
;	storage, and to return a list of journal names needed for this
;	recovery.
;
;	These basic operations are implemented at this time:
;
;		1. impure storage is allocated
;		2. this routine determines if participation is necessary
;		3. filters are allocated and specified
;
;		Steps 2 and 3 are performed in subroutine PARTICIPATE
;
;		4. the impure RECOVERY flag is initialized.  This flag is
;		   used by RMS to turn off journaling for the object to
;		   be recovered during recovery.
;
;		   While recovery is under development, this flag is also
;		   used to enforce single stream recovery.
;
;		5. logging data structures are initialized (debug only)
;
;		6. the file is opened (if RMSFILE recovery) and the journal
;		   name is returned to the RCP
;
; Calling sequence:
;
;	BRW	RM$RR_START
;
; Input parameters:
;
;	AP points to argument list as described above.
;
; Output parameters:
;
;	R0 has completion status.
;
; Side effects:
;
;	Participation is determined.  If participation, then impure
;	storage is allocated and filters are declared to the RCP.
;
;	The IMPURE area IMP$V_RECOVERY flag is set.  This will prohibit
;	RMS from doing any journaling during recovery except for AT.
;
;--

RM$RR_START::				;
					;
	$CMEXEC_S ROUTIN = RECOVER_SET	; init impure recovery flag
	MOVL	RCPARG$_RRP(AP),R10	; initialize pointer to RRP
	MOVL	RRP$A_RODB(R10),R9	; get pointer to first RODB
					;
	BSBW	RM$RR_ALL_RRB		; allocate and init recovery impure
					; header (R11 will point to RRB)
					;
	MOVL	AP,RRB$L_SAVED_AP(R11)	; save the AP for internal routines
	BSBW	RM$RR_ALL_RLOG		; allocate and init a logging block
;++
;
; If RMS can recover any of the described objects, say so
; sets the PAR bit in the RRB if participation desired, else
; returns to RCP saying: "Nevermind!"
;
; For each RMSFILE RODB, the RFB filename and volume label fields
; are filled in.  While not strictly necessary for RMSFILE RODBs,
; RFBs describing files indirectly recovered via volume recovery
; must contain such fields.  (Otherwise, the filename in the
; RODBA could be used, but no filename RODBAs exist for volume
; recovery.)
;
; The filter list in the RRB is filled in with pointers to
; filter elements declared here.  The filter elements
; declared here are volume label and filename for each RMSFILE
; described in each RODB.
;
; Participation and filters for volume recovery are not defined
; yet.  Only filter is one describing volume label.
;
; It could be that object protection checks need to go here.
;
; R6 is used to point into the RRB's filter list
;
;--

	ASSUME RODB$K_RMSFILE	EQ 1
	ASSUME RODB$K_VOLUME	EQ 2
	ASSUME RODB$K_RU	EQ 3
;	ASSUME RODB$K_RUJNL	EQ 4
;	ASSUME RODB$K_RUNODE	EQ 5

;
; Count the number of RODBs.  This is necessary because the filter list that
; needs to be allocated needs one longword per RODB, at least.
;
	CLRL	R1			; keep count in R1
	MOVL	R9,R7			; copy pointer to RODBs
10$:	TSTL	(R7)			; is there an RODB here?
	BEQL	20$			; no, go get the filter
	INCL	R1			; yes, count it
	ADDL2	#RODB$C_LENGTH,R7	; point past this RODB
	BRB	10$			; go look for more RODBs

20$:	INCL	R1			; count one longword for zero terminator
					; of filter
	ASHL	#2,R1,R1		; turn longword count into byte count
	JSB	RM$RR_ALL_ROF		; go get a filter to contain filter list
	BLBS	R0,25$			; continue on success
	BRW	NODME			; ABORT on error
25$:	BBSS	#ROF$V_ID_FILE,-	; indicate what this filter is to be
		ROF$W_FLAGS(R2),30$	; used for
30$:					;
	MOVL	R2,RRB$L_FILTER(R11)	; point RRB at filter

;
; The filter list has been set up, now re-scan each RODB to see if RMS
; recovery needs to participate.
;

	MOVL	RRB$L_FILTER(R11),R6	; get pointer to filter
	ADDL2	#ROF$L_FILT_LIST,R6	; point to actual filter list
					;
TRY_RODB:				;
	$CASE	RODB$B_TYPE(R9),TYPE=B,-;
		DISPL=< 10$,-		; ignore invalid types
			RMSFILE,-	; RMSFILE
			VOLUME,-	; VOLUME
			RU,-		; RU
			RUJNL,-		; RUJNL
			RUNODE>		; RUNODE

10$:					; ignore invalid types


;
; get next recoverable object descriptor block
;
NEXT:	ADDL2	#RODB$C_LENGTH,R9	; point to next RODB
	TSTL	(R9)			; is there one?
	BEQL	5$			; no, finish up
					;
	BRB	TRY_RODB		; yes, go try it
					;
5$:	BBC	#RRB$V_PAR,-		; will RMS recovery particpate?
		RRB$W_FLAGS(R11),- 	; (branch if no)
		10$			;

; Declare filter list to RCP
;
	BBS	#RRB$V_RUJNL,-		; no filter needed if RU recovery
		RRB$W_FLAGS(R11),7$	;
	MOVL	RRB$L_FILTER(R11),R1	; address of ROF
	ADDL2	#ROF$L_FILT_LIST,R1	; point to actual filter list
	BSBW	ADD_FILTER		; declare filter to RCP
	BLBC	R0,20$			; handle error
7$:	MOVL	#RCP$_NORMAL,R0		; success
	RET				;
10$:					;
	MOVL	#RCP$_NOPART,R0		; tell the RCP we're not participating
	RET
20$:	MOVZWL	#RFTL$_ADDFLTERR,R1	; set error code
	BRW	RM$RR_BUG		;

.SUBTITLE RM$RR_MAP_ENTRY	- PROCESS OBJECT-ID ENTRY
;++
; 
; routine name:	RM$RR_MAP_ENTRY
;
;	This routine is called during recovery unit processing when a volume
;	is remounted that had active recovery units.  All RMS journal entries
;	marked WRFLG OBJECT_ID are passed to this routine.  These entries are
;	exactly mapping entries.  File locks can be asserted here, then record
;	locks can be asserted during the LOCK phase.  See the discussion of
;	LOCK below.  Note that a special RMS assert lock service will be
;	unnecessary if the objects can be accessed at this time.
;
;	Recovery unit recovery can work like so:
;
;	1. START is called with RUJNL if we're remounting a volume that had
;	   active recovery units.  START merely sets the RRB$V_RUJNL bit.
;	   I assume that if its not volume remount, then we're called at START
;	   with type RMSFILE.
;
;	2. For volume re-mount, every OBJECT_ID flagged entry is passed to this
;	   routine.  (Note we have already gone thru START.)  This routine
;	   should OPEN the files, for sharing, and connect the streams.  This
;	   will assert the file-level RMS lock.
;
;	3. For each entry flagged LOCK (all the record entries fall into this
;	   category) the LOCK_ENTRY routine will be called.  The LOCK_ENTRY
;	   routine will assert all the record locks by doing a $FIND with
;	   manual locking.
;
; Considerations:
;
;	Recovery unit recovery of sequential files is in question, because we
;	can't open the sucker shared and assert locks.  Merely accessing the
;	file should be sufficient, however.
;
; Calling sequence:
;
;	
;
; Input parameters:
;
;
;
;
;
; Output parameters:
;
;
;
;
; Side effects:
;
;--

RM$RR_MAP_ENTRY::			;

	BSBW	LOAD_PROC_REGS		; initialize registers
	BSBW	FIND_RFB_BYNAME		; look for RFB already initialized
	BLBS	R0,5$			; found it
	BSBW	INIT_RFB		; fill in RFB from RODBA fields
	BLBC	R0,10$			; skip on errors
	BSBW	OPEN_FILE		; open the file to apply entries to
	BLBC	R0,10$			; skip on errors
5$:	MOVL	#RCP$_NORMAL,R0		;
10$:	RET				;

.SUBTITLE RM$RR_NOPR_ENTRY- ENTRY HAS PRIVILEGE VIOLATION
;++
;
; routine name: RM$RR_NOPR_ENTRY
;
;	This routine recives a journal entry for recovery on an object
;	for which the user lacks access privileges.
;
; calling sequence:
;
;	brw	RM$RR_NOPR_ENTRY
;
; input parameters:
;
;	the usual
;
; output parameters:
;
;
; side effects:
;
;--

RM$RR_NOPR_ENTRY::

	BSBW	LOAD_PROC_REGS		; initialize registers
	MOVL	#RCP$_NORMAL,R0		;
	RET				;

.SUBTITLE RM$RR_PROCESS	- PROCESS JOURNAL ENTRY
;++
; 
; routine name: RM$RR_PROCESS
;
;	This routine receives an UPDATE entry from the RCP and dispatches off
;	to the code to handle the operation.
;
;	Sequential file operations are done in RMSRECSEQ
;	Relative file operations are done in RMSRECREL
;	Indexed file operations are done in RMSRECIDX
;	Common file operations are done in RMSRECFIL
;
;	The journal entry may be mapped or it may be a mapping entry.  A mapping
;	entry is marked via the RJR MAPPING flag.  This means the entry
;	describes a file being recovered and associates	a sequence number
;	with the subsequent entries used to restore the file.
;
;	If this flag is set, the entry is a mapping entry.  If MAPSEQ is zero,
;	it indicates an OPEN mapping entry, and the mapping sequence number
;	to be used as a filter is retrieved from the JEN field.  If MAPSEQ is
;	non-zero, it is a CLOSE	mapping entry, and the mapping sequence number
;	to be used as a filter is retrieved from the RJR MAPSEQ field.
;
;	Several operations need to take place when a mapping entry is
;	encountered.  These operations vary depending upon the type of recovery:
;
;	1. RMSFILE recovery
;
;	   If an RMSFILE (or a set of RMSFILEs) is being recovered, then an RFB
;	   is set up and initialized at START time.  This is possible because
;	   all the required information is available: file name, file name as
;	   journaled, etc...
;
;	   This routine finds the RFB set up at START time.  If there is none,
;	   an error occurs.  Then, the stream is connected, and a filter
;	   specifying the mapping sequence number to look for in subsequent
;	   entries is specified.  For more on filters, see module RMSRECFLT.
;
;	2. VOLUME RECOVERY
;
;	   RFBs cannot be set up at VOLUME START time because the file names
;	   are not known.  The file names only become available as this routine
;	   receives mapping entries.  Therefore, when this routine encounters
;	   mapping entries and its VOLUME recovery, its necessary to INIT_RFB,
;	   OPEN the file described by the RFB, and connect a stream.  It is
;	   also necessary to declare a filter specifying the mapping sequence
;	   number.
;
;	3. RUJNL RECOVERY
;
;	   If a recovery-unit is being recovered, START gets called with RUJNL.
;	   All START can do is set the RRB$V_RUJNL flag to indicate RUJNL
;	   recovery.  Then, this routine will encounter mapping entries.  This
;	   routine needs to do the same things for RUJNL as it does for VOLUME,
;	   except its not strictly necessary to declare a mapping sequence
;	   filter because the RCP will pass all entries for the appropriate
;	   device in any case.
;
; Calling sequence:
;
;	BRW	RM$RR_PROCESS
;
; Input parameters:
;
;
;
;
;
; Output parameters:
;
;
;
;
; Side effects:
;
;	Registers for the processing routines are set up.
;
;--

RM$RR_PROCESS::				;
					;
;
; dispatch to routine to process particular entry
;

	ASSUME	RJR$C_SEQ EQ 0
	ASSUME	RJR$C_REL EQ 1
	ASSUME	RJR$C_IDX EQ 2
	ASSUME	RJR$C_FILE EQ 3

	BSBW	LOAD_PROC_REGS		; initialize registers
					; (R11, R10, R9)
	BBS	#RJR$V_MAPPING,-	; is this a mapping entry?
		RJR$W_FLAGS(R9),40$	; yes, branch
					;
;
; This is not a mapping entry
;
	BSBW	FIND_RFB_BY_MAP		; find correct RFB
					; now: R8 = RFB, R7=FAB, R6=RAB
	BLBC	R0,5$			; can't find an RFB

; Now verify that file is open and stream is connected...
;
	BBS	#RFB$V_BAD,-		; has an error occurred?
		RFB$W_FLAGS(R8),35$	;

	$CASE	RJR$B_ORG(R9),TYPE=B,-	; dispatch to action routine
		DISPL=< RM$RR_SEQ,-	; sequential file recovery
			RM$RR_REL,-	; relative file recovery
			RM$RR_IDX,-	; indexed file recovery
			RM$RR_FILE,-	; common file operations recovery
		      >

	MOVZWL	#RFTL$_BADRJRORG,R1	; set error code
	BRB	80$			;
5$:	MOVZWL	#RFTL$_ERRNORFB,R1	; set error code
30$:	BRB	80$			; go handle error

35$:	BRW	57$			; go get out
40$:
;
; This is a mapping entry (MAPPED is clear)
;
	BSBW	FIND_RFB_BYNAME		; look for RFB set up at START time
					; set up R8 = RFB R7 = FAB, R6 = RAB
	BLBC	R0,50$			; branch if can't find one
	BRB	55$			; join common code
;
; Can't find an RFB allocated at START time, this is either volume or rujnl
; recovery or an error.  (Don't need to return journal name for file recovered
; as part of volume recovery.)
;

50$:	BBS	#RRB$V_RMSFILE,-	; branch if not VOLUME or RUJNL
		RRB$W_FLAGS(R11),60$	;
	BSBW	INIT_RFB		; allocate and init an RFB
	BLBC	R0,70$			; handle any errors
	BSBW	OPEN_FILE		; go open the file
	BLBC	R0,70$			; *** FIX THIS ERROR BRANCH ***
55$:	BSBW	CONNECT_STREAM		; go connect stream
	BLBC	R0,70$			; *** FIX THIS ERROR BRANCH ***
					; *** MUST CLOSE RFB AND OUT ***
	BBS	#RRB$V_RUJNL,-		; don't bother with filter if RUJNL
		RRB$W_FLAGS(R11),57$	;
	BSBW	INI_MAP_FILTER		; allocate and init a filter for mapseq
	BLBC	R0,70$			; handle any errors

57$:	MOVL	#RCP$_NORMAL,R0		; success
	RET				; to RCP

;
; No RFB and not volume recovery, error!
;

60$:	MOVZWL	#RFTL$_NORFBVOL,R1	; set error code
	BRB	80$
70$:	MOVZWL	#RFTL$_ENTINIERR,R1	; set error code
80$:	BRW	RM$RR_BUG		; go handle error

.SUBTITLE RM$RR_LOCK_ENTRY- LOCK JOURNAL ENTRY
;++
; 
; routine name:	RM$RR_LOCK_ENTRY
;
;	This routine is invoked on re-mount of a volume that had active recovery
;	units in order to re-assert record locks.  See MAP_ENTRY for more
;	discussion of its functions.
;
; Calling sequence:
;
;	BRW	RM$RR_LOCK_ENTRY
;
; Input parameters:
;
;	r9	- rjr
;	r8	- rfb
;	r7	- fab
;	r6	- rab
;
; Output parameters:
;
;	None.
;
; Side effects:
;
;	record described in RJR is locked!
;
;--

RM$RR_LOCK_ENTRY::			;

	BSBW	LOAD_PROC_REGS		; initialize registers
	BSBW	FIND_RFB_BY_MAP		; find the RFB
	BLBC	R0,10$			; out if error!
	BBS	#RFB$V_CONNECTED,-	; if stream already connected, continue
		RFB$W_FLAGS(R8),5$	;
	BBS	#RFB$V_BAD,-		; get out if RFB useless (OPEN failure)
		RFB$W_FLAGS(R8),10$	; ignore request
	BSBW	CONNECT_STREAM		; connect a stream
	BLBC	R0,10$			; get out on error
5$:	MOVB	#RAB$C_RFA,RAB$B_RAC(R6); indicate find by RFA
	MOVL	RJR$L_RFA0(R9),-	; init the RFA for find by RFA
		RAB$L_RFA0(R6)		; ...
	MOVW	RJR$W_RFA4(R9),-	; ...
		RAB$W_RFA4(R6)		; ...
	$FIND	RAB = (R6)		; lock the record using RMS
	BLBC	R0,10$			; need ASYNCH and better error handling
	MOVL	#RCP$_NORMAL,R0		;
	RET				;
10$:	MOVZWL	#RFTL$_NOLOCK,R1	; set error code
	BRW	RM$RR_BUG		; 

.SUBTITLE RM$RR_END	- END RECOVERY OPERATION
;++
; 
; routine name:	RM$RR_END
;
;	This routine is invoked when the recovery operation is complete.
;	Allocated storage is deallocated, and other resources are released.
;
; Calling sequence:
;
;	BRW	RM$RR_END
;
;	BRW	COM_CLNUP - this entry point is used to handle cleanup common
;			    to ABORT and END.
;
; Input parameters:
;
;
;	RCPARG$_IMPURE(AP) points to the RMS recovery impure area.
;
;
; Output parameters:
;
;
;	None.
;
; Side effects:
;
;	None.
;--

RM$RR_END::				;
COM_CLNUP::				; entry point from RM$RR_ABORT
	BSBW	LOAD_PROC_REGS		; initialize required registers
	BSBW	CLOSE_FILES		; close all open files
	JSB	RM$RR_FREE_POOL		; return virtual storage
	MOVL	#RCP$_NORMAL,R0		; success
	RET				;

.SUBTITLE RM$RR_ABORT	- ABORT RECOVERY OPERATION
;++
; 
; routine name:	RM$RR_ABORT
;
;	This routine is invoked when the recovery operation is to be aborted.
;	Allocated resources are deallocated.  This routine is CASE'd to via
;	the entry point to rms recovery.
;
; Calling sequence:
;
;	BRW	RM$RR_ABORT
;
; Input parameters:
;
;
;	RCPARG$_IMPURE(AP) points to rms recovery data area.
;
;
; Output parameters:
;
;	None.
;
;
; Side effects:
;
;	RMS recovery is aborted.
;--

RM$RR_ABORT::				;
	BRW	COM_CLNUP		; clean up allocated resources

.SUBTITLE RM$RR_BUG	- RMS RECOVERY ERROR
.SUBTITLE RM$RR_LOG	- LOG RECOVERY MESSAGE
;++
;
; routine name:	RM$RR_BUG
;		RM$RR_LOG
;
;	BUG: This routine handles errors detected by RMS recovery.
;	LOG: This routine logs messages for RMS recovery.
;
; inputs:
;
;	r1	- message code
;	r8	- rfb, if one exists
;	r11	- rrb to point to rlog
;
; implicit inputs:
;
;	rlog codes and parms filled in to identify message
;
; outputs:
;
;	None.
;
; side effects:
;
;	recovery may be aborted
;
;--
	.ENABLE	LSB

RM$RR_BUG::

	TSTL	R11			; has an RRB been allocated?
	BEQL	20$			; get out if no
	MOVL	RRB$L_LOG(R11),R6	; get address of RLOG block
	BEQL	20$			; if none, early DME error
	MOVL	R1,RLOG$T_PARMS(R6)	; set up parameter to display
	CLRL	-(SP)			; flag "abort recovery"
	BRB	10$			; join common code

RM$RR_LOG::
	
	MOVL	RRB$L_LOG(R11),R6	; get address of RLOG block
	BEQL	20$			; if none get right out
	MOVAL	RLOG$T_PARMS(R6),R2	; get address of parameter block
	MOVZWL	RFB$Q_FILE_DESC(R8),-	; fill in file info for fao
		(R2)+			;
	MOVL	RFB$Q_FILE_DESC+4(R8),-	;
		(R2)			;
	MOVZBL	#1,-(SP)		; flag "continue recovery"

10$:
	BSBW	MESSAGE			; construct message and pass to RCP
	POPR	#^M<R0>			; get abort flag
	BEQL	20$			; branch if recovery is to be aborted
	RSB				; return to caller
20$:					; abort recovery
	MOVL	#RCP$_ABORT,R0		;
	RET

	.DISABLE LSB

.SUBTITLE RM$RR_LOG_OBJECT- LOG RECOVERY OBJECT NAME
;++
;
; routine name:	RM$RR_LOG_OBJECT
;
;	This routine is invoked when the RCP needs to tell the user (Operator
;	for example) which objects are locked for a recovery unit re-mount.
;
; calling sequence:
;
;	BRW	RM$RR_LOG_OBJECT
;
; input parameters:
;
;	r9 - mapping journal entry
;
; output parameters:
;
;	None.
;
; side effects:
;
;	message recovery unit logged
;
;--

RM$RR_LOG_OBJECT::

	BSBW	LOAD_PROC_REGS		; get registers
;	
;	movzwl	rmsrec$_log,
;	BSBW	RM$RR_LOG		; go log the message
	MOVL	#RCP$_NORMAL,R0		; success
	RET				; to caller

.SUBTITLE Local Subroutines
.SUBTITLE -	LOAD_PROC_REGS

;++
;
; LOAD_PROC_REGS - This routine initializes the contents of the registers to
;		   be used for PROCESS.
;
;		FIND_RFB will be used to set up RFB, FAB, and RAB if
;		the journal entry is MAPPED.
;--

LOAD_PROC_REGS::			;

	MOVL	RCPARG$_IMPURE(AP),R11	; get impure area address
	BEQL	5$			; branch if none
	MOVL	AP,RRB$L_SAVED_AP(R11)	; save the AP at call
5$:	MOVL	RCPARG$_RRP(AP),R10	; pointer to RRP
	MOVL	RCPARG$_JEN(AP),R9	; get pointer to RMS journal entry
	BEQL	10$			; if END, no jnl entry
	MOVL	JEN$A_ENTRY(R9),R9	; ...
10$:	RSB

.SUBTITLE -	CLOSE_FILES

;++
;
; This routine closes all open files at either END or ABORT time.
;
;--

CLOSE_FILES::

	MOVL	RRB$L_RFB(R11),R8	; get RFB address
	BEQL	30$			; return if no files
10$:	BBC	#RFB$V_FILE_OPEN,-	; is this file open?
		RFB$W_FLAGS(R8),20$	; branch if no file open
	$DISCONNECT RAB=@RFB$L_RAB(R8)	; disconnect the stream, ignore errors
	$CLOSE	FAB=@RFB$L_FAB(R8)	; close the file, ignore errors
20$:	MOVL	RFB$L_NXT(R8),R8	; get next RFB
	BNEQ	10$			; got one, go look at it
30$:	MOVL	#1,R0			; this routine just can't fail!
	RSB				; return to caller

;++
; Abort recovery on dynamic memory allocation errors
;--
NODME::					;

	MOVZWL	#RFTL$_DME,R1		; no dynamic memory
	BRW	RM$RR_BUG		; handle error

;++
; recoverable object is an RMSFILE
;
;--
RMSFILE:				; RMSFILE
	SSB	#RRB$V_PAR,-		;  signify participation
		RRB$W_FLAGS(R11) 	;
	SSB	#RRB$V_RMSFILE,-	; say file recovery also
		RRB$W_FLAGS(R11)	;

	BSBW	INIT_RFB		; go allocate and init an RFB
	BLBC	R0,20$			; handle error

	BSBW	OPEN_FILE		; OPEN the file, get journal name
	BLBC	R0,20$			; handle error

	ASSUME	RFB$T_VOLNAME EQ RFB$L_VOL_ELEM+4
	ASSUME	RFB$T_FILE EQ RFB$L_FILE_ELEM+4
;
; allocate a buffer to contain the filter.
; (the filter list is a list of addresses of filters.  each
; filter points to one or more filter elements. each filter element
; contains the actual filter that the RCP will use to read the journal with.)
;
; the filter for RMSFILE is volume label/file name
;
	MOVZBL	#<8+8+8+4>,R1		; size of three filter elements and zero
					; terminator in bytes
	JSB	RM$RR_GET_BUFF		; get a buffer, address returned in r2
	MOVL	R2,R3			; save pointer to filter element

; *** R3 MUST BE PRESERVED ACROSS NEXT THREE CALLS ***
;
	BSBW	INI_RMS_FILTER		; RMS facility code filter

	BSBW	INI_VOL_FILTER		; init a volume filter
	BLBC	R0,20$			; handle error

	BSBW	INI_FILE_FILTER		; init a file filter
	BLBC	R0,20$			; handle error

	MOVL	R3,(R6)+		; address of filter in filter list

	BSBW	ADD_JNL_FILTER		; specify journal name to RCP
	BLBC	R0,20$			; handle error

	BRW	NEXT			; go look at next RODB

20$:					; error code
	MOVZWL	#RFTL$_FILINIERR,R1	; set error code
	BRW	RM$RR_BUG		; and handle it

;++
; recoverable object is a volume
;
;--
VOLUME:					; VOLUME
	SSB	#RRB$V_PAR,-		;  signify participation
		RRB$W_FLAGS(R11)	;
	SSB	#RRB$V_VOLUME,-		; say volume recovery also
		RRB$W_FLAGS(R11)	;

	JSB	RM$RR_ALL_RVB		; allocate recoverable volume block
	BLBC	R0,20$			; get out on error

	BSBW	INIT_RVB		; initialize the RVB
	BLBC	R0,20$			; get out on error

;
; allocate a buffer to contain the filter.
;
	MOVZBL	#<8+4>,R1		; size of a filter and zero terminator
	JSB	RM$RR_GET_BUFF		; get a buffer, address returned in r2
	MOVL	R2,R3			; save pointer to filter element

	BSBW	INI_RMS_FILTER		; RMS facility code filter

	BSBW	INI_VOL_FILTER		; get a volume filter
	BLBC	R0,20$			; get out on error

	MOVL	R3,(R6)+		; add filter to filter list
	BRW	NEXT			; get next RODB

20$:					;
	MOVZWL	#RFTL$_VOLINIERR,R1	; set error code
	BRW	RM$RR_BUG		; 

;++
; recoverable object is a recovery unit
;--
RU:					; RU
	BRW	NEXT			; get next RODB

;++
; recoverable object is a recovery unit journal
;--
RUJNL:					; RUJNL
	SSB	#RRB$V_RUJNL,-		; say volume recovery (participation
		RRB$W_FLAGS(R11)	; implicit)

	BBS	#RRB$V_VOLUME,-		;
		RRB$W_FLAGS(R11),20$	; error if VOLUME or RMSFILE also set
	BBS	#RRB$V_RMSFILE,-	;
		RRB$W_FLAGS(R11),20$	;
	BRW	NEXT			; get next RODB
20$:	MOVZWL	#RFTL$_HETERO,R1	; set error code
	BRW	RM$RR_BUG

;++
; recoverable object is a recovery unit node
;--
RUNODE:					; RUNODE
	BRW	NEXT			; get next RODB

.SUBTITLE -	INIT_RVB

;++
; INIT_RVB
;
;	Initialize an RVB by filling in the volume label fields such that
;	they can double as a filter.
;
; Inputs:
;
; Outputs:
;
; Side Effects:
;
;--

INIT_RVB::

	MOVL	#1,R0			; success
	RSB				; and return

.SUBTITLE -	CONNECT_STREAM

;++
; CONNECT_STREAM
;
;	This routine is called to connect a stream to the file being recovered.
;	This routine is called when a mapping entry is read on PROCESS, or on
;	START for volume recovery.  It may also be called at RUJNL OBJECT_ID
;	time.
;
; Input:
;	r8  - RFB
;	r9  - rms journaling entry
;	r11 - impure area
;
; Output:
;	r1,r2 destroyed
;	r0  - status
;--

CONNECT_STREAM::

; ***
; check if file is already open
; ***

	BBS	#RFB$V_CONNECTED,-	; don't open the file again
		RFB$W_FLAGS(R8),20$	;
	MOVL	RFB$L_FAB(R8),R7	; set up fab address
	MOVL	RFB$L_RAB(R8),R6	; set up rab address
	MOVL	R7,RAB$L_FAB(R6)	; tell the rab about the fab
;
; dispatch to organization dependent code to connect a stream
; the org-dependent CONNECT code must RSB to the caller of this routine

	ASSUME	RJR$C_SEQ EQ 0
	ASSUME	RJR$C_REL EQ 1
	ASSUME	RJR$C_IDX EQ 2
	ASSUME	RJR$C_FILE EQ 3

	$CASE	RJR$B_ORG(R9),TYPE=B,-	; branch to org-dependent code
		DISPL=< RR$SEQ_CONN,-	;  sequential files
			RR$REL_CONN,-	;  relative files
			RR$IDX_CONN,-	;  indexed files
			20$ >		;  ignore file operation journal entries
					; ignore undefined types
20$:	MOVL	#1,R0			; success
	RSB				; return to caller

.SUBTITLE -	OPEN_FILE

;++
; OPEN_FILE
;
;	This routine is called to OPEN a file described by an RFB.  The
;	OPEN occurs at START time if the type of recovery is RMSFILE.
;
;	The OPEN occurs at PROCESS time if volume recovery is taking place.
;
;	The OPEN occurs at OBJECT_ID time if recovery-unit recovery is
;	taking place.
;
;	The file to open is pointed to by the descriptor RFB$Q_FILE_DESC
;	in the RFB.
;
;	The stream is connected separately.
;
; Input:
;	r8  - RFB
;	r9  - rms journaling entry
;	r10 - RRP
;	r11 - impure area
;
; Output:
;	r6  - FAB
;	r5  - RAB
;	r1,r2 destroyed
;	r0  - status
;--

OPEN_FILE::

	MOVL	#1,R0			; anticipate success
	BBS	#RFB$V_FILE_OPEN,-	; don't open the file again
		RFB$W_FLAGS(R8),20$	;
;++
;
; OPEN the FILE
;
; first set up the file name string, device not currently implemented
; then, set other fab parameters, finally open the file.
;
; *** must set up parameters differently if RU file (share the sucker!)
;--
	MOVL	RFB$L_FAB(R8),R7	; get FAB address
	MOVL	RFB$L_JNLXAB(R8),-	; point FAB at jnl XAB
		FAB$L_XAB(R7)		;
	MOVL	RFB$Q_FILE_DESC+4(R8),-	; copy pointer to file name to open
		FAB$L_FNA(R7)		;
	MOVB	RFB$Q_FILE_DESC(R8),-	; get size of file name
		FAB$B_FNS(R7)		;
	MOVB	#<FAB$M_PUT!FAB$M_GET!FAB$M_DEL!FAB$M_UPD>,-
		FAB$B_FAC(R7)		; set up write access
	BBC	#RRB$V_RUJNL,-		; if RU, open for sharing
		RRB$W_FLAGS(R11),10$	;
	MOVB	#<FAB$M_SHRPUT!FAB$M_SHRGET!FAB$M_SHRDEL!FAB$M_SHRUPD>,-
		FAB$B_SHR(R7)		; set sharing
	MOVB	#FAB$M_RU,FAB$B_RCF(R7)	; RU recovery
	BRB	12$			; join common code
10$:					; set up RCF flags
	MOVB	#FAB$M_AI,FAB$B_RCF(R7)	; assume its AI
	BBS	#RRP$V_FORWARD,-	; branch if AI
		RRP$W_FLAGS(R10),12$	;
	MOVB	#FAB$M_BI,FAB$B_RCF(R7)	; must be BI
12$:					;
	$OPEN	FAB=(R7)		; open the file
	BLBC	R0,30$			; get out on error
	BBSS	#RFB$V_FILE_OPEN,-	; indicate the file is open
		RFB$W_FLAGS(R8),20$	;
20$:	RSB				; return to caller
30$:	BBSS	#RFB$V_BAD,-		; mark the RFB as bad
		RFB$W_FLAGS(R8),40$	;
40$:	RSB				;

.SUBTITLE -	FIND_RODBA

;++
; FIND_RODBA
;
;	This routine finds an RODBA of the type input in R1.
;
; input:
;	r10	rrp
;	r1	type (a JFCB$C_type code)
;	RODB count field
;
;	r3,r9	must be preserved
;
; output:
;	r6	contains RODBA address if success, else garbage
;	r0	1 if rodba found, else 0
;--

FIND_RODBA::

	MOVL	R9,-(SP)		; save RJR address (it may actually be
					; RODB in some cases)
	MOVL	RRP$A_RODB(R10),R9	; get pointer to RODB
	BEQL	15$			; branch if none
	MOVZBL	RODB$B_COUNT(R9),R5	; get count of attributes
					; (zero-terminated list not guaranteed
					; by RECOVER utility.
	MOVL	RODB$A_POINTER(R9),R6	; get address of RODBA list
	BEQL	15$			; get out if none
	MOVL	#1,R0			; anticipate success
10$:					;
	CMPB	R1,RODBA$B_TYPE(R6)	; is this it?
	BEQL	20$			; branch if answer is yes
	DECL	R5			; one less attribute
	BEQL	15$			; get out if none
	ADDL2	#RODBA$C_LENGTH,R6	; next RODBA
	TSTL	(R6)			; is there another RODBA?
	BNEQ	10$			; branch if answer is yes
15$:	CLRL	R0			; indicate error
20$:	MOVL	(SP)+,R9		; restore RJR address
	RSB				; and return

	.END
