	$BEGIN	RM0EXTEND,000,RM$RMS0,<COMMON EXTEND FILE ROUTINE>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: RMS32
;
; ABSTRACT:
;		Routine to perform common file extend processing for
;		all file organizations.
;
; ENVIRONMENT:
;		STAR processor running STARLET EXEC.
;
; AUTHOR: L F Laverdure,	 CREATION DATE: 2-Dec-1977
;
; MODIFIED BY:
;
;	V03-015	RAS0284		Ron Schaefer		29-Mar-1984
;		Fix error paths to put the area id in the STV.
;
;	V03-014	DGB0015		Donald G. Blair		02-Mar-1984
;		Allocate full-length FIB to support access mode protected
;		files.
;
;	V03-013	KPL0009		Peter Lieberwirth	25-Oct-1983
;		Automatic relative extends on $PUT are broken because
;		relative code puts ALQ in R6.  JNL_EXTEND thinks a non-zero
;		R6 contains an XAB address.  Fix by forcing relative file
;		automatic extend on $PUT journaling to just journal ALQ,
;		as if no XAB is ever present.  RMSREC will thereby use
;		the ALQ as used by the extension logic, which is fine.
;
;	V03-012	DAS0001		David Solomon		16-Sep-1983
;		Journal actual final ALQ (after extend).
;
;	V03-011	KPL0008		Peter Lieberwirth	27-Jul-1983
;		Add more information to the EXTEND RJR entry - include
;		fields specified in the XABALL if there is an XABALL.
;		Journal EXTENDs of all file organizations.
;
;	V03-010	KPL0007		Peter Lieberwirth	 7-Jun-1983
;		Fix error path on journal write after successful extend.
;
;	V03-008	KPL0006		Peter Lieberwirth	31-May-1983
;		Fill JNL type in extend MJB.
;
;	V03-007	KPL0005		Peter Lieberwirth	26-May-1983
;		Support new RJR format.
;
;	V03-006	KPL0004		Peter Lieberwirth	 1-May-1983
;		Add omitted definitions.
;
;	V03-005	KPL0003		Peter Lieberwirth	 1-May-1983
;		Fix branch out of range and typo.
;
;	V03-004	KPL0002		Peter Lieberwirth	30-Apr-1983
;		Oops!  Don't journal the extend unless we're journaling.
;
;	V03-004	KPL0001		Peter Lieberwirth	30-Apr-1983
;		After-image journal ISAM EXTENDs.
;
;	V03-003	KBT0331		Keith B. Thompson	10-Sep-1982
;		Remove $FRBDEF
;
;	V03-002	KBT0205		Keith B. Thompson	23-Aug-1982
;		Reorganize psects
;
;	V03-001	KBT0119		Keith B. Thompson	6-Aug-1982
;		Remove the ref. to set_sifb_adr
;
;	V02-012	JWH0001		Jeffrey W. Horn	2-Mar-1982
;		Get rid of hack put in durring reformat that left
;		a check for invalid ALN options inoperative.
;
;	V02-011	REFORMAT	Frederick E. Deen, Jr.	    25-Jul-1980
;		This code was reformatted to adhere to RMS standards
;
;	V010	CDS0070	C D Saether	19-Dec-1979
;		Force header write thru even if ACP optimazations are
;		turned on.  This affects RELATIVE, ISAM, and explicit
;		$EXTEND.
;
;	V009	RAN0003	R A Newell	9-Nov-1978
;		File sharing code enhancements
; REVISION HISTORY:
;
;	R A Newell,	  9-Nov-1978
;	L F Laverdure,   17-Feb-1978
; 	X0001	- File sharing code enhancements
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$RMSDEF
	$FIBDEF
	$FABDEF
	$IFBDEF
	$XABDEF
	$XABALLDEF
	$RJRDEF
	$MJBDEF
	$FWADEF
	$ACEDEF
	$CJFDEF

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8			; bit offset to file options longword

;
; Own Storage:
;


	.SBTTL	RM$EXTEND0 - COMMON FILE EXTEND ROUTINE

;++
; RM$EXTEND0 - Common file extend routine
;
;  This routine performs common file extension processing
;  including the following:
;
;	1. Allocates a FIB to build the file extension request.
;	2. Initializes the fields of the FIB based upon the type of extend.
;	3. Utilizes the placement information from the XAB, if provided.
;	4. Builds a descriptor for the FIB and calls RM$FCPEXTEND
;	   to perform the extend.
;	   Write thru is specified to force header write thru so that
;	   EOF data will match EOF in PROLOGUE for RELATIVE and ISAM.
;	6. Deallocates the FIB and returns
;
; CALLING SEQUENCE:
;
;	BSBW	RM$EXTEND0
;
;  Alternate entry at RM$EXTEND0_ALT to perform functions 4 & 5 only
;
;	the FIB must already have been allocated and the extend size
;	field filled in.  Address of FIB must be in R1 (R5 and R6 not inputs).
;
;
; INPUT PARAMETERS:
;
;	R11		IMPURE AREA address
;	R10		IFAB address
;	R9		IRAB/IFAB address (IFAB if entry at RM$EXTEND0)
;	R8		RAB/FAB address (FAB if entry at RM$EXTEND0)
;	R6		ALLOCATION XAB address, if any, else 0
;	R5		EXTEND size in blocks
;
; IMPLICIT INPUTS:
;
;	Contents of the FAB
;
; OUTPUT PARAMETERS:
;
;	R6		END VBN of extent + 1
;	R1		STARTING VBN of extent
;	R0		STATUS
;	R2-R5,AP	destroyed
;
; IMPLICIT OUTPUTS:
;
;	None
;
; COMPLETION CODES:
;
;	Standard RMS.
;
; SIDE EFFECTS:
;
;	May have switched to running at AST level.
;
;--


RM$EXTEND0::
	MOVZBL	#FIB$C_LENGTH,R2		; size of FIB
	BSBW	RM$GETSPC1			; allocate FIB
	BLBC	R0,EXIT				; get out on error
	MOVL	R5,FIB$L_EXSZ(R1)		; set extend size
	BNEQ	10$				; branch if non-zero
	MOVZWL	IFB$W_RTDEQ(R9),FIB$L_EXSZ(R1)	; use default extend size
	BNEQ	10$				; branch if non-zero
	BISB2	#FIB$M_ALDEF,FIB$W_EXCTL(R1)	; else use volume default
10$:

;
;  Handle ALLOCATION XAB placement control, if any
;

	TSTL	R6				; any allocation XAB?
	BEQL	15$				; branch if none
	BSBW	RM$SET_XABALL			; handle placement control
	BLBS	R0,EXTND			; branch if ok
	MOVL	R1,R4				; set up regs to return FIB
	MOVZBL	#FIB$C_LENGTH,R2		; 	"
	BRB	DEALL_FIB			; go deallocate FIB & get out

;
;  Set contiguous best try if specified in FOP
;

15$:	BBC	#FAB$V_CBT+FOP,(R8),20$		; branch if CBT bit off
	BBCS	#FIB$V_ALCONB,-			; ask primitive for best try
		FIB$W_EXCTL(R1),30$		;  and branch
20$:	BBC	#FAB$V_CTG+FOP,(R8),30$		; branch if CTG bit off
	BISB2	#FIB$M_ALCON,FIB$W_EXCTL(R1)	; ask for contiguous extend
	TSTL	IFB$L_HBK(R10)			; is this first allocation?
	BNEQ	30$				; branch if not
	BISB2	#FIB$M_FILCON,FIB$W_EXCTL(R1)	; yes - also mark file CTG
30$:						; fall thru to RM$EXTEND0_ALT


;++
; RM$EXTEND0_ALT -  Entry point for automatic EXTEND on $PUT.
;
;	R8, R9 have RAB and IRAB addresses respectively
;	FIB must already have been allocated and extend size set, addr in R1.
;--

RM$EXTEND0_ALT::
	MOVB	#FIB$C_VBN,FIB$B_ALALIGN(R1)	; specify placement near EOF
EXTND:	BISB2	#FIB$M_EXTEND,FIB$W_EXCTL(R1)	; flag this as an EXTEND
	ASSUME	FIB$L_ACCTL EQ 0
	SSB	#FIB$V_WRITETHRU,(R1)		; force header to write thru
	PUSHL	R1				; build FIB descriptor - addr
	MOVZBL	#FIB$C_LENGTH,-(SP)		;		       - length
	BSBW	RM$FCPEXTEND			; do the EXTEND
	POPR	#^M<R2,R4>			; clean STACK and get FIB len & addr
	BLBC	R0,ERREXT			; branch if EXTEND failed

;
;  EXTEND complete.
;
;  Write AI journal entry describing successful allocation.  If journal write
;  fails, back out the EXTEND with a truncate, and fail the EXTEND.  (If the
;  extend isn't backed out, subsequent recovery is in jeopardy because the
;  journaled file will not look like the file being recovered, particularly
;  because the default extend behavior in recovery could be different from
;  extends done here.)
;
;  Save NEW HIGH VBN + 1 in R6, START VBN in R1, and deallocate FIB
;

; 
; R2 (=size) and R4 (=addr) are input RM$JNL_EXTEND and RM$RETSPC1
;

	BBC	#IFB$V_AI,IFB$B_JNLFLG(R10),10$	; skip if not AI jnling
	JSB	RM$JNL_EXTEND			; journal the extend
	BLBC	R0,JNLERR			; branch on error

10$:	PUSHL	FIB$L_EXVBN(R4)			; save starting VBN of extent
	ADDL3	(SP),FIB$L_EXSZ(R4),R6		; and END VBN + 1
	BSBW	RM$RETSPC1			; deallocate FIB
	POPR	#^M<R1>				; restore STARTING VBN
	RMSSUC
EXIT:	RSB

;++
;
;  EXTEND failed.
;  Map error, deallocate FIB, and return.
;
;--

ERREXT:
	RMSERR	EXT,R1				; default status code
ERRMAP:	BSBW	RM$MAPERR			; map the error code
DEALL_FIB:
	PUSHL	R0				; save it
	BSBW	RM$RETSPC1			; deallocate FIB
	POPR	#^M<R0>				; restore status
	RSB

;++
;
; Writing journal entry to describe extend failed.  Just eat the extend.
; Recovery will notice on the next successful extend that the blocks 
; allocated are not the same as originally because this extent was eaten.
; It will recover by simply extending again.
;
;--

JNLERR:
	RMSERR	CJF,R1				; default error message
	BRB	ERRMAP				; deallocate FIB and return


;++
;  RM$SET_XABALL - Handle ALLOCATION XAB placement control,
; 		   setting up the FIB according to the XAB inputs.
;
;  INPUTS:
;
;	R6	XAB address
;	R1	FIB address
;
;  OUTPUTS:
;
;	R0	STATUS code
;	the placement control section of the FIB is initialized.
;
;  NOTE: No registers other than R0 are modified.
;
;--

RM$SET_XABALL::
	BBC	#XAB$V_CBT,XAB$B_AOP(R6),20$	; branch if CBT off
	BBCS	#FIB$V_ALCONB,-			; ask primitive for contig.
		FIB$W_EXCTL(R1),30$		; best try and branch


20$:	BBC	#XAB$V_CTG,XAB$B_AOP(R6),30$	; branch if CTG off
	BISB2	#FIB$M_ALCON,FIB$W_EXCTL(R1)	; ask for contig. extend
	TSTL	IFB$L_HBK(R9)			; is this first allocation?
	BNEQ	30$				; branch if not
	BISB2	#FIB$M_FILCON,FIB$W_EXCTL(R1)	; yes - also mark file CTG
30$:
	ASSUME	XAB$B_ALN EQ XAB$B_AOP+1
	ASSUME	FIB$B_ALALIGN EQ FIB$B_ALOPTS+1
	BICW3	#XAB$M_CBT!XAB$M_CTG,-		; set all. options &
		XAB$B_AOP(R6),FIB$B_ALOPTS(R1)	;  alignment type


	BITB	#^C<XAB$M_HRD!XAB$M_ONC>,-	; any unknown bits?
		FIB$B_ALOPTS(R1)
	BNEQ	ERRAOP				; branch if yes
	MOVW	XAB$W_VOL(R6),FIB$W_LOC_RVN(R1)	; set relative vol. #
	CMPB	XAB$B_ALN(R6),#XAB$C_RFI	; related file type alloc.?
	BLSSU	40$				; branch if less
	BGTRU	ERRALN				; branch if greater
	ASSUME	FIB$L_LOC_ADDR EQ FIB$W_LOC_FID+6
	MOVQ	XAB$W_RFI(R6),FIB$W_LOC_FID(R1)	; set related FILE ID
40$:	MOVL	XAB$L_LOC(R6),-			; set allocation location
		FIB$L_LOC_ADDR(R1)
	RMSSUC
	RSB

;++
;
;  Tell about unknown AOP or ALN values
;
;--

ERRAOP:
	RMSERR	AOP
	BRB	SETSTV

ERRALN:
	RMSERR	ALN
SETSTV:	MOVZBL	XAB$B_AID(R6),FAB$L_STV(R8)	; area id as STV value
	RSB

	.SBTTL RM$JNL_EXTEND - Journal extend operations

;++
; RM$JNL_EXTEND
;
;	This routine is used to journal extend operations.
;
; Calling Sequence:
;
;	BSBW	RM$JNL_EXTEND
;
; Input Parameters:
;
;	R2	size of FIB to journal
;	R4	address of FIB
;	R6	address of XABALL if its present
;
; Implicit Inputs:
;
;	R10	IFB address
;
; Output Parameters:
;
;	R0	status of operation
;	R5	destroyed
;
; Implicit Outputs:
;
;	extend journaled
;
; Side Effects:
;
;	None.
;
;--

RM$JNL_EXTEND:

	RMSSUC				; anticipate success
	MOVL	IFB$L_EXTJNLBUF(R10),R5	; get extend MJB address
	BEQL	15$			; branch if none
	PUSHR	#^M<R2,R3,R4,R6>	; save work registers
	MOVAL	MJB$T_RJR(R5),R3	; get RJR address
	BBC	#MJB$V_INIT,MJB$W_FLAGS(R5),20$	; go init RJR if required
10$:					;

;
; Set flags to write extend entry thru to journal and not to give file lock
; up during STALL.
;
	BISW2	#<MJB$M_FORCE!MJB$M_SYNCH_SHARE>,MJB$W_FLAGS(R5) ;

;
; Copy XABALL fields into RJR if XABALL is present
;
; These fields are assumed to be in the same order in the XAB and the RJR
; Do some ASSUMEs to insure this fact:
;
	ASSUME	XAB$B_ALN	EQ	XAB$B_AOP+1
	ASSUME	RJR$B_EXT_ALN	EQ	RJR$B_EXT_AOP+1

	ASSUME	XAB$W_VOL	EQ	XAB$B_ALN+1
	ASSUME	RJR$W_EXT_VOL	EQ	RJR$B_EXT_ALN+1

	ASSUME	XAB$L_LOC	EQ	XAB$W_VOL+2
	ASSUME	RJR$L_EXT_LOC	EQ	RJR$W_EXT_VOL+2

	ASSUME	XAB$L_ALQ	EQ	XAB$L_LOC+4
	ASSUME	RJR$L_EXT_ALQ	EQ	RJR$L_EXT_LOC+4

	ASSUME	XAB$W_DEQ	EQ	XAB$L_ALQ+4
	ASSUME	RJR$W_EXT_DEQ	EQ	RJR$L_EXT_ALQ+4

	ASSUME	XAB$B_AID	EQ	XAB$W_DEQ+3
	ASSUME	RJR$B_EXT_AID	EQ	RJR$W_EXT_DEQ+3

	ASSUME	XAB$W_RFI	EQ	XAB$B_AID+1
	ASSUME	RJR$W_EXT_RFI	EQ	RJR$B_EXT_AID+1

	CMPB	IFB$B_ORGCASE(R10),#IFB$C_REL ; relative file?
	BEQL	12$			; branch if so - ignore possible XAB
	TSTL	R6			; is there an XABALL?
	BEQL	12$			; if EQL no, no XABALL
	PUSHR	#^M<R1,R2,R3,R4,R5>	; save regs destroyed by MOVC3
	SSB	#RJR$V_EXT_USE_XAB,RJR$L_EXT_FLAGS(R3) ; say to use XAB
	MOVC3	#<RJR$T_EXT_ENDALL-RJR$B_EXT_AOP>,- ; size of info we want
		XAB$B_AOP(R6),RJR$B_EXT_AOP(R3) ; fill in RJR from XAB
	POPR	#^M<R1,R2,R3,R4,R5>	; restore regs destroyed by MOVC3
12$:	ADDL3	FIB$L_EXVBN(R4),-	; fill in real extend result + 1
		FIB$L_EXSZ(R4),-
		RJR$L_EXT_ALQ(R3)
	DECL	RJR$L_EXT_ALQ(R3)	; correct value to get real HBK
	JSB	RM$WRITE_MJB		; write the jnl entry
	CSB	#RJR$V_EXT_USE_XAB,RJR$L_EXT_FLAGS(R3) ; re-initialize
	POPR	#^M<R2,R3,R4,R6>	; restore work registers
15$:	RSB				; return status to caller

20$:

;
; Intialize the EXTEND MJB.
;
	MOVZBW	#RJR$C_EXTLEN,MJB$W_SIZE(R5)	; size of entry to write
	MOVB	#RJR$C_VER1,RJR$B_VERSION(R3)	; rms journaling version
	MOVB	#RJR$C_EXTEND,RJR$B_ENTRY_TYPE(R3) ; type is EXTEND
	MOVB	IFB$B_ORGCASE(R10),RJR$B_ORG(R3); file organization
	MOVB	#RJR$_EXTEND,RJR$B_OPER(R3)	; its an EXTEND - superfluous
	MOVL	IFB$L_FWA_PTR(R10),R1		; get FWA address
	PUSHR	#^M<R1,R2,R3,R4,R5>	; save regs destroyed by MOVC3
	MOVC3	#FWA$S_JNLID,FWA$T_JNLID(R1),RJR$T_JNLID(R3) ; set up JNLID
	POPR	#^M<R1,R2,R3,R4,R5>	; restore regs destroyed by MOVC3
	MOVB	#CJF$_AI,MJB$B_JNL(R5)		; set journal type
	SSB	#MJB$V_INIT,MJB$W_FLAGS(R5)	; indicate MJB initialized
	BRW	10$			; join common code

	.END
