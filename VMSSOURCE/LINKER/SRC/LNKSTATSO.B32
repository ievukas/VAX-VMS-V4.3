module lnk_statsout 				! LINKER STATISTICS ROUTINE
		(ident = 'V04-000'
		,addressing_mode 
			(external    = general
			,nonexternal = long_relative
			)
		) =
begin
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!++
! FACILITY:	LINKER
!
! ABSTRACT:	ROUTINE DOES ALL THE WORK OF GATHERING AND OUTPUTTING STATISTICS OF THE LINK
!
!
! ENVIRONMENT:	STARLET NATIVE MODE
!
! AUTHOR:	T.J. PORTER, CREATION DATE: 27-JUN-77
!
! MODIFIED BY:
!
!	V03-002	ADE0001		Alan D. Eldridge	14-Aug-1984
!		Only output the options file contents if a full map
!		is requested.
!
!	V03-001	JWT0099		Jim Teague		14-Mar-1983
!		New CLI interface.
!
!--
!
! TABLE OF CONTENTS:
!
forward routine
    lnk$statsout : novalue;			! OUTPUT THE STATISTICS
!
! INCLUDE FILES:
!
library 'LIBL32';				! GET PROCESS HEADER DEFINITIONS

require 'PREFIX';				! USEFUL MACROS AND VARIABLES

library 'DATBAS';				! LINKER DATA STRUCTURES

sd ('$LINE');
!
! MACROS:
!
macro
    textadr =  0,0,32,0%,
    fltsadr =  1,0,32,0%,
    cputadr =  2,0,32,0%,
    stimadr =  3,0,32,0%;
!
! EQUATED SYMBOLS:
!
literal
    bufferleng = 132;				! OUTPUT LINE BUFFER
!
! EXTERNAL REFERENCES:
!
external
    lnk$gl_optextp : ref block [, byte],	! POINTER TO OPTIONS TEXT
    lnk$gl_ctlmsk : block [, byte],		! LINK CONTROL FLAGS
    lnk$gl_minaddr,				! LOWEST ADDRESS ALLOCATED
    lnk$gl_memlhd,				! FREE MEMORY LISTHEAD
    lnk$gl_cpustim,				! CPU TIME AT START
    lnk$gl_futlsrch,				! NUMBER OF SYMBOLS SEARCHED FOR IN THE WRONG LIBRARY
    lnk$gl_librecs,				! NUMBER OF OBJ RECORDS READ FROM LIBRARIES
    lnk$gl_nmodsexp,				! NUMBER MODULES EXTRACTED EXPLICITLY
    lnk$gl_nmodsrch,				! NUMBER OF MODULES EXTRACTED TO RESOLVE SYMBOLS
    lnk$gl_objrecs,				! TWO PASS COUNT OF OBJECT RECORDS READ
    lnk$gw_dbgrecs : word,			! NUMBER OF DEBUG DATA RECORDS
    lnk$gl_dbgestim,				! NUMBER OF BYTES IN DEBUG RECORDS
    lnk$gw_dstvbn : word,			! VBN OF DEBUG SYMBOL TABLE
    lnk$gw_dstblks : word,			! NUMBER OF BLOCKS ALLOCATED
    lnk$gl_dstend,				! END ADDRESS IN THE DST
    lnk$gw_symrecs : word,		! NUMBER OF GLOBAL SYMBOL TABLE RECORDS WRITTEN TO SEPARATE FILE
    lnk$gw_gstrecs : word,			! NUMBER WRITTEN TO IMAGE FILE
    lnk$gq_startim,				! START TIME QUADWORD
    lnk$gq_endtim,				! END TIME QUADWORD
    lnk$gq_ps1stim,				! PASS 1 START TIME
    lnk$gq_alostim,				! ALLOCATION/RELOCATION START TIME
    lnk$gq_ps2stim,				! PASS 2 START TIME
    lnk$gq_mapstim,				! BULK OF MAP START TIME
    lnk$gq_stbstim,				! SYMBOL TABLE OUTPUT START TIME
    lnk$gl_ps1cput,				! CPU TIME AT START OF PASS 1
    lnk$gl_alocput,				! CPU TIME AT START OF ALLOCATION PHASE
    lnk$gl_ps2cput,				! CPU TIME AT START OF PASS 2
    lnk$gl_mapcput,				! CPU TIME AT START OF MAP OUTPUT
    lnk$gl_stbcput,				! CPU TIME AT START OF SYMBOL TABLE OUTPUT
    lnk$gl_ps1flts,				! PAGE FAULT COUNT AT START OF PASS 1
    lnk$gl_aloflts,				! PAGE FAULT COUNT AT START OF ALLOCATION PHASE
    lnk$gl_ps2flts,				! PAGE FAULT COUNT AT START OF PASS 2
    lnk$gl_mapflts,				! PAGE FAULT COUNT AT START OF MAP OUTPUT
    lnk$gl_stbflts,				! PAGE FAULT COUNT AT START OF SYMBOL TABLE OUTPUT
    lnk$gl_spagflts,				! PAGE FAULT COUNT AT START OF THE LINK
    lnk$gl_endflts,				! PAGE FAULT COUNT AT END
    lnk$gl_endcput;				! CPU TIME AT END

external routine
    cli$get_value,
    lnk$calcelaps,				! ROUTINE TO DO THE QUADWORD ARITHMETIC
    						! RETURNING ADDRESS OF THE NEGATIVE ("DELTA") ELAPSED TIME
    lnk$mapout;					! OUPUTS LINE TO MAP

external literal
    len$c_mapline : wordlit,			! LENGTH OF MAP LINE
    lnk$k_libblocks : short;			! NUMBER OF BLOCKS IN WINDOW OF A LIBRARY

literal
    phases = 9;					! NUMBER OF PHASES FOR WHICH THERE ARE STATISTICS

!
! MODULE OWN STORAGE:
!
own
    command_desc : dynamic_descriptor;
psect
    own = $plit$(nopic, concatenate, local, noshare, noexecute, nowrite);
own
    phastahd1 : descriptor ('!50<Performance Indicators!>Page Faults	CPU Time	Elapsed Time'),
    phastahd2 : descriptor ('!50<!22*-!>!11*-	!8*-	!12*-'),
    phastafmt : descriptor ('!50<!AS!>!11UL	!2ZL:!2ZL:!2ZL.!2ZL	!%T'),
    totaltim : descriptor ('Total run values:'),
    comandtim : descriptor ('    Command processing:'),
    pass1tim : descriptor ('    Pass 1:'),
    alloctim : descriptor ('    Allocation/Relocation:'),
    pass2tim : descriptor ('    Pass 2:'),
    maptim : descriptor ('    Map data after object module synopsis:'),
    stbtim : descriptor ('    Symbol table output:'),
    workset : descriptor (
	    'Using a working set limited to !UL pages and !UL pages of data storage (excluding image)'),
    objrecs : descriptor ('!50<Total number object records read (both passes):!>!UL'),
    librecs : descriptor (
	    '    of which !UL were in libraries and !UL were DEBUG data records containing !UL bytes'),
    dbgdata : descriptor ('!UL bytes of DEBUG data were written,starting at VBN !UW with !UW blocks allocated'
	),
    extrmods : descriptor ('!50<Number of modules extracted explicitly!> = !UL'),
    srchmods : descriptor ('    with !UL extracted to resolve undefined symbols'),
    futlsrch : descriptor ('!UL library searches were for symbols not in the library searched'),
    symrecs : descriptor ('A total of !UL global symbol table records was written'),
    phastatbl : blockvector [phases, 4] initial (
			0	,lnk$gl_spagflts,lnk$gl_cpustim,lnk$gq_startim,
			comandtim,lnk$gl_ps1flts,lnk$gl_ps1cput,lnk$gq_ps1stim,
			pass1tim,lnk$gl_aloflts,lnk$gl_alocput,lnk$gq_alostim,
			alloctim,lnk$gl_ps2flts,lnk$gl_ps2cput,lnk$gq_ps2stim,
			pass2tim,lnk$gl_mapflts,lnk$gl_mapcput,lnk$gq_mapstim,
			maptim,lnk$gl_stbflts,lnk$gl_stbcput,lnk$gq_stbstim,
			stbtim,lnk$gl_endflts,lnk$gl_endcput,lnk$gq_endtim,
			0	,lnk$gl_spagflts,lnk$gl_cpustim,lnk$gq_startim,
			totaltim,lnk$gl_endflts,lnk$gl_endcput,lnk$gq_endtim),
    cvt2secs : initial (100),
    cvtsecsmins : initial (60);


global routine lnk$statsout : novalue = 	! OUTPUT STATISTICS
    begin
!++
! FUNCTIONAL DESCRIPTION:
!
!	THIS MODULE COMPUTES AND OUTPUTS TO THE MAP A GAGGLE OF THE STATISTICS
!	ACCUMULATED BY THE LINKER AND THE SYSTEM DURING THE RUN
!
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    builtin
	ediv;

    local
	buffer : ch$sequence (bufferleng),	! OUTPUT LINE BUFFER
	outbufdesc : vector [2],		! ITS DESCRIPTOR
	pagefaults,
	cputime : vector [2],
	secfrac,
	cpusecs : vector [2],
	cpumins : vector [2],
	cpuhours,
	worksetlim,
	memused : ref vector,
	dbgbytes,
	outlineleng : word;			! LENGTH OF FORMATTED LINE RETURNED BY FAO

    outbufdesc [0] = bufferleng;		! INITIALIZE FAO'S BUFFER
    outbufdesc [1] = buffer;			! DESCRIPTOR
    cputime [1] = 0;
    cpusecs [1] = 0;
    cpumins [1] = 0;
    lnk$mapout (buffer, 0);
    $fao (phastahd1, outlineleng, outbufdesc);
    lnk$mapout (buffer, .outlineleng);
    $fao (phastahd2, outlineleng, outbufdesc);
    lnk$mapout (buffer, .outlineleng);

    incr i from 1 to phases - 1 do

	if .phastatbl [.i, textadr] neq 0
	then
	    begin
	    pagefaults = ..phastatbl [.i, fltsadr] - ..phastatbl [.i - 1, fltsadr];
	    cputime [0] = ..phastatbl [.i, cputadr] - ..phastatbl [.i - 1, cputadr];
	    ediv (cvt2secs, cputime [0], cpusecs [0], secfrac);
	    ediv (cvtsecsmins, cpusecs [0], cpumins [0], cpusecs [0]);
	    ediv (cvtsecsmins, cpumins [0], cpuhours, cpumins [0]);
	    $fao (phastafmt, outlineleng, outbufdesc, .phastatbl [.i, textadr], .pagefaults, .cpuhours,
		.cpumins [0], .cpusecs [0], .secfrac,
		lnk$calcelaps (.phastatbl [.i - 1, stimadr],
		    .phastatbl [.i, stimadr]));
	    lnk$mapout (buffer, .outlineleng);
	    end;

    $adjwsl (pagcnt = 0, wsetlm = worksetlim);
    memused = lnk$gl_memlhd;

    while .memused [0] neq 0 do
	memused = .memused [0];

    memused = (memused [0] - .lnk$gl_minaddr + 511)/512;
    lnk$mapout (buffer, 0);
    $fao (workset, outlineleng, outbufdesc, .worksetlim, .memused);
    lnk$mapout (buffer, .outlineleng);
    lnk$mapout (buffer, 0);
    $fao (objrecs, outlineleng, outbufdesc, .lnk$gl_objrecs);
    lnk$mapout (buffer, .outlineleng);
    $fao (librecs, outlineleng, outbufdesc, .lnk$gl_librecs, .lnk$gw_dbgrecs, .lnk$gl_dbgestim);
    lnk$mapout (buffer, .outlineleng);

    if (dbgbytes = .lnk$gl_dstend) neq 0 and (.lnk$gl_ctlmsk [lnk$v_dbg] or .lnk$gl_ctlmsk [lnk$v_trace])
    then
	begin
	$fao (dbgdata, outlineleng, outbufdesc, .dbgbytes, .lnk$gw_dstvbn, .lnk$gw_dstblks);
	lnk$mapout (buffer, .outlineleng);
	end;

    lnk$mapout (buffer, 0);
    $fao (extrmods, outlineleng, outbufdesc, .lnk$gl_nmodsexp);
    lnk$mapout (buffer, .outlineleng);
    $fao (srchmods, outlineleng, outbufdesc, .lnk$gl_nmodsrch);
    lnk$mapout (buffer, .outlineleng);
    lnk$mapout (buffer, 0);
    $fao (futlsrch, outlineleng, outbufdesc, .lnk$gl_futlsrch);
    lnk$mapout (buffer, .outlineleng);
    lnk$mapout (buffer, 0);
    $fao (symrecs, outlineleng, outbufdesc, (.lnk$gw_symrecs + .lnk$gw_gstrecs));
    lnk$mapout (buffer, .outlineleng);
    lnk$mapout (buffer, 0);			! SKIP A LINE
!
! PRINT THE COMMAND LINE
!
    begin
    local
	pchars,
	nchars,
	chars;

    pchars = 0;
    cli$get_value(sd_$line, command_desc);	! Get commmand line from CLI
    chars = .command_desc [dsc$w_length];

    while (.chars gtr 0) do
	begin
	nchars = min (.chars, len$c_mapline);
	lnk$mapout (.command_desc [dsc$a_pointer] + .pchars, .nchars);
	chars = .chars - .nchars;
	pchars = .pchars + .nchars;
	end;
!
! PRINT THE OPTION FILE (IF PRESENT) if "/FULL" MAP REQUESTED
!
    if .lnk$gl_ctlmsk [lnk$v_long]
    then while .lnk$gl_optextp neq 0 
	 do begin
	    lnk$mapout	(lnk$gl_optextp [oeb$t_text] 		!PRINT THE LINE
			,.lnk$gl_optextp [oeb$w_bytcnt]
			);
	    lnk$gl_optextp = .lnk$gl_optextp [oeb$l_nxtoeb];	!LINK TO NEXT LINE
	    end;

    end;
    return;
    end;					! End of LNK$STATSOUT

end
eludom
						!End of module
