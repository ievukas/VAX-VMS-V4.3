	.title	pli$getfile - pl1 runtime get file
	.ident	/1-003/					; Edit CGN1003
							; Edit WHM1002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;


;++
; facility:
;
;	VAX/VMS PL1 runtime library.
;
; abstract:
;
;	This module contains the pl1 runtime routine for initializing
;	the runtime system to perform a get from a pl1 stream file.
;
; author: c. spitz 4-oct-79
;
; modified:
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;	1-003	Chip Nylander	08-August-1983
;
;		Initialize the parent pointer with FP when stream block
;		allocated.
;
;--

;
; external definitions
;
	$deffcb				;define file control block
	$defstk				;define stack frame offsets
	$defstr				;define stream block offsets
	$defdat				;define operand node data types
	$rabdef				;define rms rab offsets
	$fabdef				;define rms fab offsets
	$rmsdef				;define rms error codes

;
; local definitions
;

	rtshare				;sharable
	.page
;++
; pli$getfile_r6 -- get elements from a stream file
;
; functional description:
;
; This routine initializes the runtime system to perform a GET statement.
; the get statement is compiled into code that sets up the parameters to
; this routine, and then jsb's to it. this routine opens the file if necessary,
; allocates a buffer for the file, allocates and initializes a stream block for
; the GET statement, processes any options specified in the GET statement and
; returns to the inline code.
; following the jsb in the inline code, the compiler has generated code
; that stores the address and size of the next element in r0 and r1. the
; inline code then jsb's to the routine in the pli$getedit or pli$getlist
; modules that processes elements of that data type. 
;
; inputs:
;	ap - address of file control block
;	(sp) - address of first element inline code
;	r0 - address of skip option (number of skips)
;	r1 - address of the compiled format (getedit) or 0 (getlist)
;	r2 - no_echo 0=off
;	r3 - no_filter 0=off
;	r4 - address of prompt
;	r5 - purge_type_ahead 0=off
; outputs:
;	r11 - address of the stream block for this get statement
; side effects:
;	ap is preserved
;	r0-r6 are destroyed
;--
	.enabl	lsb

pli$getfile_r6::
;
; open file if nec
;
	movq	r0,-(sp)		;save skip and format
	bbs	#atr_v_opened,fcb_l_attr(ap),10$ ;if file open, cont
	pushl	#<atr_m_stream+atr_m_input> ;request stream and input
	pushl	ap			;set fcb
	calls	#2,g^pli$open		;open the file
	bbs	#atr_v_opened,fcb_l_attr(ap),10$ ;if file opened, cont
	movl	#pli$_open,r0		;set open failure
	brw	fail			;and fail
;
; check file attributes
;
10$:	bbcs	#atr_v_recur,fcb_l_attr(ap),20$ ;if illegal recursion
	movl	#pli$_recursio,r0	;set recursive i/o
	brw	fail			;and fail
20$:	movab	fcb_l_condit(ap),(fp)	;set condition handler address
	bbs	#atr_v_input,fcb_l_attr(ap),40$ ;if input, cont
30$:	movl	#pli$_notinput,r0	;set not input file
	brw	fail			;and fail
40$:	bbs	#atr_v_stream,fcb_l_attr(ap),50$ ;if stream, cont
	movl	#pli$_notstream,r0	;set not stream file
	brw	fail			;and fail
;
; allocate buffer if needed 
;
50$:	tstl	fcb_l_buf(ap)		;buffer already allocated?
	bneq	80$			;if neq, yes, cont
	bbc	#atr_v_app_comma,fcb_l_attr(ap),60$ ;if append comma
	incw	fcb_w_linesize(ap)	;add 1 to buffer size
60$:	movzwl	fcb_w_linesize(ap),-(sp) ;get size of a line
	movw	(sp),<fcb_b_rab+rab$w_usz>(ap) ;set it in rab
	pushl	sp			;push addr of temp
	pushal	4(sp)			;push addr of size
	calls	#2,g^lib$get_vm		;get buffer
	blbs	r0,70$			;if lbs, then cont
	movl	#pli$_novirmem,r0	;set no virt mem
	brw	fail			;and fail
70$:	popl	r0			;get buffer addr
	movl	r0,fcb_l_buf(ap)	;store addr of buffer in fcb
	movl	r0,fcb_l_buf_pt(ap)	;init buf pointer
	movl	r0,fcb_l_buf_end(ap)	;init buf end
	movl	r0,<fcb_b_rab+rab$l_ubf>(ap) ;store in rab too.
;
; set locate mode if not app_comma
;
80$:	bicl	#rab$m_loc,<fcb_b_rab+rab$l_rop>(ap) ;clear locate mode
	bbc	#atr_v_app_comma,fcb_l_attr(ap),90$ ;if not app_comma, cont
	bisl	#rab$m_loc,<fcb_b_rab+rab$l_rop>(ap) ;set locate mode
;
;allocate a stream block
;
90$:	movq	(sp)+,r0		;restore skip and format
	popl	r6			;save return address
	subl	#str_c_len,sp		;alloc space for stream block
	movl	sp,r11			;set address of stream block
	movab	str_l_stack_end(r11),str_l_fld_end(r11) ;set end of field
;
; initialize format stack
;
	movl	fp,str_l_parent(r11)	;set default parent pointer
	movl	r1,str_l_fp(r11)	;set address of format pointer
	beql	95$			;if eql, cont
	bicl	#atr_m_comma_exp,fcb_l_attr(ap) ;clear comma expected if edit
95$:	movl	r1,str_l_stack(r11)	;copy format pointer to stack
	movab	str_l_stack(r11),str_l_sp(r11) ;store format stack pointer
	clrl	str_l_fs(r11)		;init status
;
; set all options except prompt and skip
;
	movab	<fcb_b_rab+rab$l_rop>(ap),r1 ;get addr of rop
	bicl	#^c<rab$m_cco!rab$m_eof! - ;clear unused bits in rop
		rab$m_pmt!rab$m_pta!rab$m_rah! - ;
		rab$m_rne!rab$m_rnf!rab$m_wbh>,(r1) ;
	insv	r2,#rab$v_rne,#1,(r1)	;set read no echo
	insv	r3,#rab$v_rnf,#1,(r1)	;set read no filter
	insv	r5,#rab$v_pta,#1,(r1)	;set purge type ahead
;
; process skip and prompt options. skips turn into a read with prompt where
; the prompt is a <cr><lf>. if a positive number, n, skips was specified, we
; will do n-1 skips before we do the user specified prompt (if any). this re-
; quires us to append the users prompt to the <cr><lf> for the last skip. if
; no skip was specified, but a prompt was specified, we will use the users
; prompt as is. note that prompting always forces a get, so that whatever is
; left in the buffer from the last get statement is lost. 
;

100$:	movl	#^x0a0d,str_b_field(r11) ;set to prompt with <cr><lf>
	movb	#2,<fcb_b_rab+rab$b_psz>(ap) ;set size in rab
	movab	str_b_field(r11),<fcb_b_rab+ - ;set prompt addr
		rab$l_pbf>(ap)		;in rab
	bisl	#rab$m_pmt,<fcb_b_rab+rab$l_rop>(ap) ;set to prompt in rab
	movl	r0,r2			;copy skip addr
	beql	115$			;if eql, then no skip
	cvtwl	(r2),r2			;get number to skip
	bgtr	110$			;if gtr, cont
	movl	#pli$_invskip,r0	;set invalid skip
	brw	fail			;and fail
110$:	bbc	#atr_v_virgin,fcb_l_attr(ap),115$ ;if virgin
	incl	r2			;do an extra skip to get first record
115$:	bicl	#atr_m_currec,fcb_l_attr(ap) ;clear currec in fcb to do skips
	tstl	r4			;prompt specified?
	beql	160$			;if eql, then not there, cont
	movzwl	(r4),r1			;get length
	beql	160$			;if eql, then ignore it
	cmpl	r1,#253			;is it too big?
	bleq	120$			;if leq, no, cont
	movl	#pli$_promptobig,r0	;set prompt too big
	brw	fail			;and fail
120$:	pushl	r2			;save number of skips
	movl	r1,str_l_fld_pt(r11)	;save size of prompt
	movc3	(r4)+,(r4),str_b_field+2(r11) ;copy prompt to field
	popl	r2			;restore number of skips
	bgtr	140$			;if gtr, do n-1 with our prompt
	movab	str_b_field+2(r11),<fcb_b_rab+ - ;no skips, so set his prompt
		rab$l_pbf>(ap)		;addr in rab
	movb	str_l_fld_pt(r11),<fcb_b_rab+ - ;set size of users prompt
		rab$b_psz>(ap)		;in  rab
	brb	150$			;do the prompt
130$:	bbs	#atr_v_eof,fcb_l_attr(ap),170$ ;if eof, signal endfile
	jsb	g^pli$$get_rec		;skip a record
140$:	sobgtr	r2,130$			;if skips left, do them
	addb	str_l_fld_pt(r11),<fcb_b_rab+ - ;add size of users prompt
		rab$b_psz>(ap)		;to prompt size in rab
150$:	bbs	#atr_v_eof,fcb_l_attr(ap),170$ ;if eof, signal endfile
	jsb	g^pli$$get_rec		;skip a record
160$:	sobgeq	r2,150$			;process skips
	bicl	#rab$m_pmt,<fcb_b_rab+rab$l_rop>(ap) ;clear prompt in rab
	bisl	#atr_m_currec,fcb_l_attr(ap) ;set currec to turn off skipping
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursive flag
;
; 'return' jump back to main line code
;
	jmp	(r6)			;return to user

170$:	pushl	ap			;set fcb addr
	pushl	#0			;set no error code
	pushl	#pli$_endfile		;set endfile condition
	brb	180$			;signal the condition
;
;failure routine
;

fail:	pushl	ap			;set fcb addr
	pushl	r0			;set error code
	pushl	#pli$_error		;set error condition
180$:	clrl	(fp)			;remove the handler in this frame
	bicw	#1@atr_v_recur,fcb_l_attr(ap);reset
	calls	#3,g^pli$io_error	;signal the error
	ret				;return

	.dsabl	lsb 
	.end
