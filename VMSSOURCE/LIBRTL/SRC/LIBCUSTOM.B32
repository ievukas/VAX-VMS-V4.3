MODULE LIB$CUSTOMIZE_OUTPUT (%TITLE 'Customize printed output'
	IDENT = '2-002'		! File: LIBCURREN.B32 Edit: DG2002
		    ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: General Purpose Library
!
! ABSTRACT:
!
!	This module contains the procedures LIB$CURRENCY, LIB$DIGIT_SEP
!	and LIB$RADIX_POINT.
!
! ENVIRONMENT: User mode - AST reentrant
!
! AUTHOR: John Sauter, CREATION DATE: 18-OCT-1979
!
! EDIT HISTORY:
!
! 1-001 - Original.
! 1-002	- Return signals as status.  JBS 08-JAN-1980
! 1-003	- Change STR$ codes to LIB$.  JBS 22-JAN-1980
! 1-004 - Enhance to recognize additional classes of string descriptors
!	  by invoking LIB$ANALYZE_SDESC_R3 to extract length and address
!	  of 1st data byte from descriptor.
!	  Change calls from STR$COPY_DX to LIB$SCOPY_DXDX6.
!			    STR$COPY_R  to LIB$SCOPY_R_DX.
!			    STR$FREE1_DX to LIB$SFREE1_DD.
!	  Eliminate need for handler and to convert STR$ statuses to
!	  LIB$ statuses.
!	  RKR 27-MAY-1981
! 1-005 - Add special-case code to process strings that "read" like 
!	  fixed strings.  RKR 7-OCT-1981.
! 1-006 - Redirect all jsb's from LIB$ANALYZE_SDESC_R3 to
!	  LIB$ANALYZE_SDESC_R2.  Do all copying with LIB$SCOPY_R_DX6.
!	  RKR 18-NOV-1981.
! 1-007 - Use $TRNLOG instead of LIB$SYS_TRNLOG.  Other minor improvements.
!	  SBL 8-Oct-1982
! 2-001 - Rewrite using common inner routine.  SBL 8-Feb-1983
! 2-002 - Use LNM$C_NAMLENGTH for maximum size of equivalence string.
!	  DG 31-Oct-1983

!
! PROLOGUE FILE:
!

REQUIRE 'RTLIN:LIBPROLOG';			! LIB$ definitions

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$CURRENCY,				! Get currency symbol
    LIB$DIGIT_SEP,				! Get digit separator
    LIB$RADIX_POINT,				! Get radix point
    GET_CUSTOM_SYMBOL;				! Inner routine

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2 : LIB$ANALYZE_SDESC_R2$LINKAGE,
						! Get length and address
    LIB$SCOPY_R_DX6 : LIB$SCOPY_R_DX6$LINKAGE;	! Copy a string by reference


GLOBAL ROUTINE LIB$CURRENCY (%SBTTL 'Get currency symbol'
	CURRENCY_STR: REF BLOCK [, BYTE],		! Where to put symbol
	OUT_LEN: REF VECTOR [, WORD]			! Optional length of symbol
			    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the system's currency symbol.  It should be
!	used before a number to indicate that the number represents 
!	money in the country the system is running in.  This routine 
!	works by translating the logical name SYS$CURRENCY.  If the 
!	translation fails, this routine returns "$", the US money 
!	symbol.  
!	If the translation succeeds the text produced is returned.  
!	Thus a system manager can define SYS$CURRENCY as a system-wide 
!	logical name to provide a default for all users, and an
!	individual user with a special need can define SYS$CURRENCY as 
!	a user logical name to override the default.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$CURRENCY (currency_str.wt.dx 
!					 [,out_len.ww.r])
!
!
! FORMAL PARAMETERS:
!
!	currency_str	String to receive the currency string
!	out_len		Optional length of the currency string.  
!			This is valuable if currency_str
!			is a fixed-length string, since it does not 
!			include the padding.
!
! IMPLICIT INPUTS:
!
!	System-wide (or user-defined) logical name SYS$CURRENCY
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! CONDITION CODES:
!
!	LIB$_INVSTRDES	Invalid string descriptor
!	LIB$_STRTRU	String truncated to fit into output
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT;

    !+
    ! Call GET_CUSTOM_SYMBOL to do the work.
    !-

    RETURN ( GET_CUSTOM_SYMBOL (
	CURRENCY_STR [0,0,0,0],
	(IF ACTUALCOUNT () GEQU 2 THEN OUT_LEN [0] ELSE 0),
	UPLIT BYTE (%ASCIC'SYS$CURRENCY'),
	%C'$'));

    END;				! End of routine LIB$CURRENCY

GLOBAL ROUTINE LIB$DIGIT_SEP (%SBTTL 'Get digit separator'
	DIGIT_SEP_STR: REF BLOCK [, BYTE],		! Where to put symbol
	OUT_LEN: REF VECTOR [, WORD]			! Optional length of symbol
			    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the system's digit separator symbol.  It 
!	should be used to separate groups of three digits in the 
!	integer part of a number, for readability, using the customary 
!	symbol.  This routine works by translating the logical name 
!	SYS$DIGIT_SEP.  If the translation fails, this routine returns 
!	",", the US digit separator.  If the translation succeeds the 
!	text produced is returned.  Thus a system manager can define
!	SYS$DIGIT_SEP as a system-wide logical name to provide a 
!	default for all users, and an individual user with a special 
!	need can define SYS$DIGIT_SEP as a user logical name to 
!	override the default.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$DIGIT_SEP (digit_sep_str.wt.dx 
!					  [,out_len.ww.r])
!
! FORMAL PARAMETERS:
!
!	digit_sep_str	String to receive the digit_sep string
!	out_len		Optional length of the digit separator string.
!			This is valuable if digit_sep_str is a 
!			fixed-length string, since it does not include
!			the padding.
!
! IMPLICIT INPUTS:
!
!	System-wide (or user-defined) logical name SYS$DIGIT_SEP
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! CONDITION CODES:
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_INVSTRDES	Invalid string descriptor
!	LIB$_STRTRU	Result did not fit in caller's string; 
!			truncated on right
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT;

    !+
    ! Call GET_CUSTOM_SYMBOL to do the work.
    !-

    RETURN ( GET_CUSTOM_SYMBOL (
	DIGIT_SEP_STR [0,0,0,0],
	(IF ACTUALCOUNT () GEQU 2 THEN OUT_LEN [0] ELSE 0),
	UPLIT BYTE (%ASCIC'SYS$DIGIT_SEP'),
	%C','));

    END;				! End of routine LIB$DIGIT_SEP

GLOBAL ROUTINE LIB$RADIX_POINT (%SBTTL 'Get radix point symbol'
	RADIX_POINT_STR: REF BLOCK [, BYTE],	! Where to put symbol
	OUT_LEN: REF VECTOR [, WORD]		! Optional length of symbol
			       ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the system's radix point symbol.  It 
!	should be used inside a digit string to divide the integer 
!	part from the fraction part, using the customary symbol.
!	This routine works by translating the logical name 
!	SYS$RADIX_POINT.  If the translation fails, this routine
!	returns ".", the US radix point symbol.  If the translation 
!	succeeds the text produced is returned.  Thus a system manager 
!	can define SYS$RADIX_POINT as a system-wide logical name to 
!	provide a default for all users, and an individual user with a 
!	special need can define SYS$RADIX_POINT as a user logical name 
!	to override the default.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$RADIX_POINT (radix_point_str.wt.dx 
!					    [,out_len.ww.r])
!
! FORMAL PARAMETERS:
!
!	radix_point_str	String to receive the radix point string
!	out_len		Optional length of the radix_point string.
!			This is valuable if radix_point_str
!			is a fixed-length string, since it does not 
!			include the padding.
!
! IMPLICIT INPUTS:
!
!	System-wide (or user-defined) logical name SYS$RADIX_POINT
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! CONDITION CODES:
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_INVSTRDES	Invalid string descriptor
!	LIB$_STRTRU	String Truncated
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT;

    !+
    ! Call GET_CUSTOM_SYMBOL to do the work.
    !-

    RETURN ( GET_CUSTOM_SYMBOL (
	RADIX_POINT_STR [0,0,0,0],
	(IF ACTUALCOUNT () GEQU 2 THEN OUT_LEN [0] ELSE 0),
	UPLIT BYTE (%ASCIC'SYS$RADIX_POINT'),
	%C'.'));

    END;				! End of routine LIB$RADIX_POINT

ROUTINE GET_CUSTOM_SYMBOL (%SBTTL 'Inner routine'
	OUT_STR: REF BLOCK [, BYTE],		! Where to put symbol
	OUT_LEN: REF VECTOR [, WORD],		! Optional length of symbol
        LOGNAM: REF VECTOR [, BYTE],		! ASCIC logical name
        DEFAULT_CHAR: BYTE			! Default translation character
			    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called by LIB$CURRENCY, LIB$DIGIT_SEP and
!	LIB$RADIX_POINT to do the actual translation and string copying.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = GET_CUSTOM_SYMBOL (out_str.wt.dx,
!					     [out_len.ww.r],
!					     lognam.rt.r,
!					     default_char.rbu.v)
!
!
! FORMAL PARAMETERS:
!
!	out_str		String to receive the currency string
!	out_len		Optional length of the currency string.  
!			This is valuable if currency_str
!			is a fixed-length string, since it does not 
!			include the padding.
!	lognam		The ASCIC string containing the logical name to
!			translate.
!	default_char	The default character to use if lognam doesn't translate.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! CONDITION CODES:
!
!	LIB$_INVSTRDES	Invalid string descriptor
!	LIB$_STRTRU	String truncated to fit into output
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	TRNLOG_STATUS,			! Status from $TRNLOG
	RET_STATUS,			! Return status
	EQUIV_LENGTH: WORD,		! Length of equivalence string
	LOGDES : BLOCK [8, BYTE],	! String descriptor for logical
					! name
	NUMDES : BLOCK [8, BYTE],	! String descriptor for 
					! translated string
	EQUIV_STRING: VECTOR [LNM$C_NAMLENGTH, BYTE];! Equivalence string

!+
! Initialize descriptors for logical name and translated string
!-
    LOGDES [DSC$B_CLASS] = DSC$K_CLASS_S;
    LOGDES [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    LOGDES [DSC$W_LENGTH] = .LOGNAM [0];
    LOGDES [DSC$A_POINTER] = LOGNAM [1];

    NUMDES [DSC$B_CLASS] = DSC$K_CLASS_S;
    NUMDES [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    NUMDES [DSC$W_LENGTH] = LNM$C_NAMLENGTH;
    NUMDES [DSC$A_POINTER] = EQUIV_STRING;

!+
! Translate and convert the logical name to determine
! the symbol.
!-
    TRNLOG_STATUS = $TRNLOG (
			     LOGNAM = LOGDES,
			     RSLLEN = EQUIV_LENGTH,
			     RSLBUF = NUMDES);

    IF (( NOT .TRNLOG_STATUS) OR (.TRNLOG_STATUS EQL SS$_NOTRAN))
    THEN
	BEGIN
	EQUIV_STRING [0] = .DEFAULT_CHAR;	! Use default
	EQUIV_LENGTH = 1;
	END;

!+
! EQUIV_STRING is now the string to return to the caller.
!-
    RET_STATUS = LIB$SCOPY_R_DX6 ( .EQUIV_LENGTH,
				   EQUIV_STRING,
				   .OUT_STR);

!+
! If caller supplied optional 2nd parameter (OUT_LEN), fill it in.
! No need to check status from LIB$ANALYZE_SDESC_R2.  If OUT_STR
! was bad, call to LIB$SCOPY_R_DX6 will have caught it.
!-
    IF ( OUT_LEN [0] NEQA 0)
    THEN
	BEGIN
	LOCAL
	    WRITTEN_LEN: WORD;
	LIB$ANALYZE_SDESC_R2 (.OUT_STR;
			      WRITTEN_LEN);
	IF .WRITTEN_LEN LSSU .EQUIV_LENGTH
	THEN
	    EQUIV_LENGTH = .WRITTEN_LEN;
	OUT_LEN [0] = .EQUIV_LENGTH;
	END;

    RETURN (.RET_STATUS);
    END;				! End of routine GET_CUSTOM_SYMBOL

END					! End of module LIB$CUSTOMIZE_OUTPUT

ELUDOM
