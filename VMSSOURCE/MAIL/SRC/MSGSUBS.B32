MODULE MAIL$MSGSUBS( %TITLE 'MAIL MESSAGE SUBROUTINES'
		IDENT = 'V04-000' ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	VAX/VMS MAIL UTILITY
!
! ABSTRACT:	Subroutines to read and write message files.
!
! ENVIRONMENT:	NATIVE/USER MODE
!
! AUTHOR: Len Kawell, CREATION DATE: 07-NOV-1979
!
! MODIFIED BY:
!
!	V03-018	BLS0263		Benn Schreiber		 5-FEB-1984
!		Make routines called by LIB$RENAME global.
!
!	V03-017	BLS0255		Benn Schreiber		28-Dec-1983
!		New global flags.
!
!	V03-016	BLS0250		Benn Schreiber		 9-Dec-1983
!		Don't allow multiple versions of MAIL.MAI to have
!		mixed file organizations.
!
!	V03-015	BLS0252		Benn Schreiber		 9-Dec-1983
!		Look at correct bit for noautopurge.
!
!	V03-014	BLS0246		Benn Schreiber		28-Nov-1983
!		Remove some own storage to shrink image
!
!	V03-013	BLS0229		Benn Schreiber		16-Jul-1983
!		Rename old mail file after conversion.
!
!	V03-012	BLS0227		Benn Schreiber		29-Jun-1983
!		Call MAIL$CLR_DIR_FLAG to clear directory display context
!		when closing mail file.
!
!	V03-011	BLS0225		Benn Schreiber		17-Jun-1983
!		Enable DFW if MAIL$B_DFW is set.  Use UTIL$GETFILENAME
!		for retrieving file specs from fabs.
!
!	V03-010	BLS0222		Benn Schreiber		15-May-1983
!		Small corrections.
!
!	V03-009	BLS0221		Benn Schreiber		 5-May-1983
!		Correct SYSPRV handling
!
!	V03-008	BLS0214		Benn Schreiber		27-Mar-1983
!		Modify new message handling.  Correct nam block
!		usage error in open_new_file
!
!	V03-007	BLS0211		Benn Schreiber		13-Mar-1983
!		Extensive rework for ISAM mail files
!
!	V03-006	BLS0197		Benn Schreiber		 9-Dec-1982
!		Implement SET PERSONAL_NAME command.
!
!	V03-005	BLS0191		Benn Schreiber		27-Oct-1982
!		Use system default MBC.  Check errors in MAIL$SEND_MSG
!		better.  Do not write <FF><From: name> from the message
!		text.  This is a new message marker.
!
!	V03-004	BLS0189		Benn Schreiber		19-Oct-1982
!		Clean up file data initialization.  Interlock the
!		DELETE mail function with the READ function, so that
!		a mail message that has not been read cannot be deleted.
!
!	V03-003	BLS0188		Benn Schreiber		 4-Oct-1982
!		Correct problem in directory listing with hyphenated
!		names
!
!	V03-002	BLS0184		Benn Schreiber		20-Aug-1982
!		Delete old MAIL.TMP's when starting up.  This prevents
!		aborting the sending of a message and having some old
!		garbage being sent.  Correct error in info_msg which
!		caused accvio if no date on "from" line.
!
!	V03-001	BLS0177		Benn Schreiber		21-Jun-1982
!		Add MAIL$Q_MSG_FNM descriptor which describes the
!		filename part of the message file file spec.
!--

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!
	LIBRARY 'SYS$LIBRARY:STARLET';
	REQUIRE 'SRC$:MAILREQ';
	LIBRARY 'LIB$:MAILDEF';

LITERAL
	LEAVE_SEQ = 0;				!0 >> convert to isam

FORWARD ROUTINE
	MAIL$CLOSE_FILE: NOVALUE,		! Close current message file
	MAIL$REWIND_MSG,			! Rewind current message
	OPEN_NEWFILE;				! Open new messages file
!
! MACROS:
!
MACRO
	RECSIZ(RECPTR) =			! Get message record size
		(RECPTR)<0,RECSIZ_SIZ * 8>%;

MACRO	MSGDELIM(RECPTR) =			! Check for message delimiter
		((.RECSIZ(RECPTR) EQL 1)
		AND (CH$RCHAR(RECPTR + RECSIZ_SIZ) EQL FF)
		AND (.RECSIZ(RECPTR + RECSIZ_SIZ + 1) GTRU %CHARCOUNT('From'))
		AND (.(RECPTR + 2*RECSIZ_SIZ + 1) EQL 'From'))%;

MACRO	NEWMSGFLAG(MSGPTR) =			! Get new message flag address
		(LOCAL	PTR;
		PTR = MSGPTR + RECSIZ_SIZ + .RECSIZ(MSGPTR); ! Skip delimiter
		.PTR + RECSIZ_SIZ + .RECSIZ(.PTR) - 1)%; ! Addr of last char

!
! EQUATED SYMBOLS:
!
LITERAL
	FROM_SIZ	= %CHARCOUNT('From: '),	! Size of from delimiter
	TO_SIZ		= %CHARCOUNT('To: '),	! Size of "to" delimeter
	MAXRECSIZ	= 255,			! Maximum message record size
	RECSIZ_SIZ	= 1,			! Message buffer record size
	SUBJ_SIZ	= %CHARCOUNT('Subj: ');	! Size of subject delimiter


MACRO
	DEFFILENAM	= 'MAIL'%,		! Default message file name
	DEFFILETYP	= '.MAI'%;		! Default message file type
!
! EXTERNAL REFERENCES:
!
EXTERNAL
	MAIL$GL_FLAGS : $BBLOCK,		! Mail control flags
	MAIL$SD_NEWMAIL : $BBLOCK,		! Descriptor for 'NEWMAIL'
	MAIL$L_CURMSG : REF $BBLOCK,		! Descriptor of current ISAM msg
	MAIL$L_SYSMAIBUF: REF $BBLOCK,		! Pointer to VMSMAIL record
	MAIL$L_USRSYSBUF : REF $BBLOCK,		! User's vmsmail record
	MAIL$B_DFW : BYTE,			! True if FOP=DFW
	MAIL$Q_TMPFILE_DESC: $BBLOCK,		! Descriptor for MAIL.TMP
	MAIL$Q_USERNAME:BLOCK[,BYTE],		! User's name descriptor
						!   descriptor
	MAIL$Q_MAILDEF : $BBLOCK;		! 'dev:[dir]mail.mai'

EXTERNAL ROUTINE
	MAIL$CLR_DIR_FLAG,			! Clear directory display flags
	MAIL$COPY_MSGS,				! Copy msgs into ISAM folder
	MAIL$DESELECT_MSGS,			! Delete in-memory index
	MAIL$EMPTY_WASTEBASKET,			! Delete msgs in wastebasket
	MAIL$GET_INPUT,				! Read from the terminal
	MAIL$GETMSG,				! Get message text
	MAIL$ISAM_INIT,				! Init ISAM data
	MAIL$UPDATE_I_MSG,			! Update ISAM message record
	MAIL$UP_PRIV,				! Raise privileges
	MAIL$DOWN_PRIV,				! lower privileges
	LIB$FILE_SCAN,				! Perform wild-card file scan
	LIB$FID_TO_NAME,			! Convert fid to name
	LIB$FREE_VM,				! Free virtual memory
	LIB$GET_VM,				! Get virtual memory
	LIB$RENAME_FILE,			! Rename a file
	STR$COPY_DX,				! String copy
	STR$FREE1_DX,				! Deallocate dynamic string
	OTS$SCOPY_R_DX,				! String copy
	UTIL$GETFILENAME,			! Get file spec for fab
	UTIL$REPORT_IO_ERROR;			! Report I/O error
!
! OWN STORAGE:
!
OWN
	EXITSTATUS:	LONG,			! Exit status
	EXITBLOCK:	VECTOR[4]		! Exit handler control block
			INITIAL(0,		!  Forward link
				MAIL$CLOSE_FILE,!  Routine address
				1,		!  Argument count
				EXITSTATUS),	!  Location to receive status
	MODIFIED:	LONG;			! Buffer modified flag

!
! Current message file being read RMS blocks
!
OWN
	DYN_DESC : DYN_DESC_DECL,		!Dynamic descriptor
	RD_RSNAM_BUF:   REF VECTOR[,BYTE],	! Resultant name string buf
	RD_ESNAM_BUF:	REF VECTOR[,BYTE],	! Expanded name string buffer
	RD_ESNAM_DESC:	DYN_DESC_DECL,		! Expanded name string desc
	RD_NAM:					! Name block
		$NAM_DECL,
	RD_FAB:					! File access block
		$FAB_DECL,
	RD_RAB:					! Record access block
		$RAB_DECL;

GLOBAL BIND
    MAIL$T_RD_RAB = RD_RAB,
    MAIL$Q_RD_DESC = RD_ESNAM_DESC;
!
! Current message buffer parameters
!
OWN
	MSG_BUF_ASIZ:	LONG,			! Message buffer size allocated
	MSG_BUF_ADR:	LONG,			! Message buffer address
	MSG_BUF_SIZ:	LONG,			! Message buffer size
	MSG_ADR:	LONG;			! Message address

GLOBAL BIND
	MAIL$L_MSGBUFSIZ = MSG_BUF_SIZ;		! Make available externally
GLOBAL 
	MAIL$L_RECBUF : REF $BBLOCK,		! Pointer to isam buffer
	MAIL$Q_MSG_FILE: DYN_DESC_DECL,		! Message file name desc
	MAIL$Q_MSG_FNM: BLOCK[8,BYTE],		! Message file filename descr.
	MAIL$L_MSG_STS:	LONG			! Message status
			INITIAL(MAIL$_NOTREADIN),
	MAIL$L_MSG_NUM:	LONG,			! Message number
	MAIL$W_MSG_RSIZ:WORD,			! Message record size
	MAIL$L_MSG_RADR:LONG;			! Message record address
!
! Send/File message RMS blocks
!
GLOBAL BIND
	MAIL$Q_MSGTYPE = DESCRIPTOR(DEFFILETYP),! Default mail message filetype
	MAIL$Q_MSGNAME = DESCRIPTOR(DEFFILENAM):! Default mail message filename
			 BLOCK[,BYTE];
!
! Define shared messages for MAIL
!
$SHR_MSGDEF(MAIL,126,LOCAL,
	(RENAMED,SUCCESS),
	(SEARCHFAIL,ERROR),
	(OPENIN,ERROR),
	(READERR,ERROR),
	(WRITEERR,ERROR),
	(CLOSEOUT,ERROR));

GLOBAL ROUTINE MAIL$FIND_MSG(MSGNUM,NEW_FILE) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine finds the specified message and sets the current message
!	pointers to describe it.
!
! INPUTS:
!
!	MSGNUM = Relative message number desired.
!	       = Zero if next message is desired.
!	NEW_FILE = true if new file just opened.  Need not be specified
!			if false.
!
! OUTPUTS:
!
!	MAIL$L_MSG_NUM = Current message number.
!	MAIL$L_MSG_ADR = Address of first record in message.
!	MAIL$L_MSG_STS = Status of current message.
!
!	All failures are signalled as well as returned.
!--
BEGIN
BUILTIN
    ACTUALCOUNT;

LOCAL
	SRCH_MSGNUM,				! Messge number to search for
	POINTER;				! Message buffer pointer

MAIL$GL_FLAGS[MAIF_V_READ_FL] = 0;
IF ACTUALCOUNT() GEQU 2
    THEN IF .NEW_FILE
	AND .MSGNUM EQL 0
    THEN BEGIN
	MAIL$L_MSG_STS = STS$K_SUCCESS;
	MAIL$REWIND_MSG();
	RETURN TRUE
	END;
!
! If specified message number is zero, then searching for next message,
! else, searching for specified message number.
!
SRCH_MSGNUM = (IF .MSGNUM EQL 0 THEN (.MAIL$L_MSG_NUM + 1) ELSE .MSGNUM);
IF .MAIL$L_MSG_NUM EQL 0
    THEN MAIL$L_MSG_NUM = 1;
!
! Check that a message file is open and there are messages in the file.
!
IF .MSG_BUF_ADR EQL 0
THEN
	(SIGNAL (MAIL$_NOTREADIN); RETURN MAIL$_NOTREADIN);
IF .MSG_BUF_SIZ EQL 0
THEN
	(SIGNAL (MAIL$_NOMOREMSG); RETURN MAIL$_NOMOREMSG);
!
! If the specified message number is less than the current message number
! or there is no current message, then set the message file pointers to 
! the beginning of the buffer, so the message search will start over again.
!
IF (.SRCH_MSGNUM LSSU .MAIL$L_MSG_NUM)		! If number less than current
OR (.MSG_ADR EQL 0)				! or, no current message
THEN	BEGIN
	MAIL$L_MSG_NUM = 1;			! Re-init current number
	MSG_ADR = .MSG_BUF_ADR;			! Re-init current pointer
	END;
!
! Search through the messages until the relative message number equals
! the specified message number or the end of the buffer is reached.
!
POINTER = .MSG_ADR;				! Start at current message
UNTIL (.MAIL$L_MSG_NUM GEQU .SRCH_MSGNUM)
OR    ((POINTER = .POINTER + .RECSIZ(.POINTER) + RECSIZ_SIZ)
       GEQU (.MSG_BUF_ADR + .MSG_BUF_SIZ))
DO	BEGIN
	IF MSGDELIM(.POINTER)			! If message delimiter
	THEN	BEGIN				! then, found new message
		MSG_ADR = .POINTER;	
		MAIL$L_MSG_NUM = .MAIL$L_MSG_NUM + 1;
		END;
	END;
!
! Set the current reccord context to the first text record in the message.
!
MAIL$L_MSG_RADR = .MSG_ADR + 2*RECSIZ_SIZ + .RECSIZ(.MSG_ADR); ! Skip delimiter
MAIL$W_MSG_RSIZ = .RECSIZ(.MAIL$L_MSG_RADR - RECSIZ_SIZ);
!
! If the next message was requested and no more were found, return "no more".
!
IF (.MSGNUM EQL 0) AND (.MAIL$L_MSG_NUM LSSU .SRCH_MSGNUM)
THEN
	MAIL$L_MSG_STS = MAIL$_NOMOREMSG
ELSE
	MAIL$L_MSG_STS = STS$K_SUCCESS;
RETURN .MAIL$L_MSG_STS
END;


GLOBAL ROUTINE MAIL$GET_MSG =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine finds the next record in the current message and sets
!	the size and address parameters to describe it.
!
! INPUTS:
!
!	MAIL$W_MSG_RSIZ = Current message record size.
!	MAIL$L_MSG_RADR = Current message record address.
!
! OUTPUTS:
!
!	MAIL$W_MSG_RSIZ = Next message record size.
!	MAIL$L_MSG_RADR = Next message record address.
!	MAIL$L_MSG_STS = STS$K_SUCCESS if another record exists.
!		       = Zero if no more records in message.
!--
BEGIN
!
! Set pointer and size to next record, unless next record is past
! the end of the buffer or is another message delimiter.
!
MAIL$L_MSG_RADR = .MAIL$L_MSG_RADR + .MAIL$W_MSG_RSIZ + RECSIZ_SIZ;
IF .MAIL$L_MSG_RADR GTRU (.MSG_BUF_ADR + .MSG_BUF_SIZ)
OR MSGDELIM(.MAIL$L_MSG_RADR - RECSIZ_SIZ)
THEN
	MAIL$L_MSG_STS = 0
ELSE	BEGIN
	MAIL$W_MSG_RSIZ = .RECSIZ(.MAIL$L_MSG_RADR - RECSIZ_SIZ);
	MAIL$L_MSG_STS = STS$K_SUCCESS;
	END;
RETURN .MAIL$L_MSG_STS
END;


GLOBAL ROUTINE MAIL$REWIND_MSG =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine "rewinds" the current message by resetting the current
!	record pointers to the first text record in the message.
!
! INPUTS:
!
!	MSG_ADR = Address of first record in current message.
!
! OUTPUTS:
!
!	MAIL$W_MSG_RSIZ = Size of first text record in current message.
!	MAIL$L_MSG_RADR = Address of first text record in current message.
!--
BEGIN
IF (NOT .MAIL$L_MSG_STS AND .MAIL$L_MSG_STS NEQ 0)
OR .MSG_ADR EQL 0
THEN
	RETURN MAIL$_NOTREADIN;
MAIL$L_MSG_RADR = .MSG_ADR + 2*RECSIZ_SIZ + .RECSIZ(.MSG_ADR); ! Skip delimiter
MAIL$W_MSG_RSIZ = .RECSIZ(.MAIL$L_MSG_RADR - RECSIZ_SIZ);
MAIL$L_MSG_STS = STS$K_SUCCESS;
RETURN TRUE;
END;


GLOBAL ROUTINE MAIL$INFO_MSG(SENDER,SUBJ,DATE,TO_DESC, MESSAGE_SIZE) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to get the sender, date/time, subject,
!	and size of the current message.
!
! INPUTS:
!
!	SENDER = Address of descriptor of buffer to receive message sender.
!	SUBJ = Address of descriptor of buffer to receive message subject.
!	DATE = Optional address of descriptor of buffer to receive date/time
!		of message.
!	TO_DESC = Optional address of descriptor for "to" list
!	MESSAGE_SIZE = Optional address of longword to return message size
!		(in bytes)
!
! OUTPUTS:
!
!	Message info copied to buffers.
!--
BEGIN
BUILTIN
	NULLPARAMETER,
	ACTUALCOUNT;					! Argument count
LOCAL
	MSGADDR,
	POINTER_1,					! String pointer
	POINTER_2,
	POINTER_3;

IF_ERR(	MAIL$REWIND_MSG();,				! Rewind the message
	RETURN .STATUS);
!
! Get the sender of the current message
!
POINTER_1 = 0;
IF .MAIL$W_MSG_RSIZ GTRU FROM_SIZ
THEN
	POINTER_1 = CH$FIND_CH(.MAIL$W_MSG_RSIZ - FROM_SIZ,  ! Find end of name
			     .MAIL$L_MSG_RADR + FROM_SIZ,
			     ' ');
	IF NOT CH$FAIL(.POINTER_1)
	THEN
		OTS$SCOPY_R_DX(	.POINTER_1 - (.MAIL$L_MSG_RADR + FROM_SIZ),
				.MAIL$L_MSG_RADR + FROM_SIZ,
				.SENDER)
	ELSE
		OTS$SCOPY_R_DX(	0,0,.SENDER);
!
! Get date of current message
!
IF NOT NULLPARAMETER(3)
THEN	BEGIN
	IF .POINTER_1 EQL 0
	    THEN POINTER_1 = .MAIL$L_MSG_RADR + .MAIL$W_MSG_RSIZ;
	POINTER_2 = CH$FIND_CH(				!Look for double quotes
			.MAIL$W_MSG_RSIZ-(.POINTER_1-.MAIL$L_MSG_RADR),
			.POINTER_1+1,'"');
	IF NOT CH$FAIL(.POINTER_2)
	THEN BEGIN
	    POINTER_3 = CH$FIND_CH(
			.MAIL$W_MSG_RSIZ-(.POINTER_2-.MAIL$L_MSG_RADR),
			.POINTER_2+1,'"');
	    IF NOT CH$FAIL(.POINTER_3)
		THEN POINTER_1 = .POINTER_3;
	    END;
	POINTER_2 = CH$FIND_CH(				! Find date
			.MAIL$W_MSG_RSIZ-(.POINTER_1-.MAIL$L_MSG_RADR),
		     	.POINTER_1 + 1,
		     	'-');
	IF NOT CH$FAIL(.POINTER_2)
	THEN
		OTS$SCOPY_R_DX(	.MAIL$W_MSG_RSIZ-
				(.POINTER_2 - .MAIL$L_MSG_RADR - 2),
				.POINTER_2 - 2,
				.DATE)
	ELSE
		OTS$SCOPY_R_DX(	0,0,.DATE);
	END;
!
! Get the "to" list
!
IF MAIL$GET_MSG()
    THEN IF NOT NULLPARAMETER(4)
	THEN OTS$SCOPY_R_DX(.MAIL$W_MSG_RSIZ - TO_SIZ,
			.MAIL$L_MSG_RADR + TO_SIZ,
			.TO_DESC);
!
! Get subject, if there is one, of the current message
!
IF MAIL$GET_MSG()
THEN
	IF .MAIL$W_MSG_RSIZ GTRU SUBJ_SIZ
	AND .(.MAIL$L_MSG_RADR) EQL 'Subj'
	THEN
		OTS$SCOPY_R_DX(	.MAIL$W_MSG_RSIZ - FROM_SIZ,
				.MAIL$L_MSG_RADR + FROM_SIZ,
				.SUBJ)
	ELSE
		OTS$SCOPY_R_DX(	0,0,.SUBJ);
!
! If requested, count bytes in message
!
IF NOT NULLPARAMETER(5)
THEN BEGIN
    MSGADDR = .MSG_ADR;
    MSGADDR = .MSGADDR + .RECSIZ(.MSGADDR) + RECSIZ_SIZ; !Skip From line
    WHILE (.MSGADDR LEQU (.MSG_BUF_ADR + .MSG_BUF_SIZ))
	AND NOT MSGDELIM(.MSGADDR)
	DO MSGADDR = .MSGADDR + .RECSIZ(.MSGADDR) + RECSIZ_SIZ;
    .MESSAGE_SIZE = .MSGADDR - .MSG_ADR;
    END;
RETURN TRUE
END;


GLOBAL ROUTINE MAIL$TEST_SUBJ =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine tests if the SUBJ: line of the message is present
!
! ROUTINE VALUE:
!
!	True if SUBJ: line present, false if not.
! 
!--
BEGIN

LOCAL
	STATUS,
	DESC_1 : $BBLOCK[8],
	DESC_2 : $BBLOCK[8];

INIT_DDESC(DESC_1);
INIT_DDESC(DESC_2);

MAIL$INFO_MSG(DESC_1,DESC_2);

STATUS = .DESC_2[DSC$W_LENGTH] NEQ 0;
STR$FREE1_DX(DESC_1);
STR$FREE1_DX(DESC_2);

MAIL$REWIND_MSG();

RETURN .STATUS
END;

GLOBAL ROUTINE MAIL$TEST_SEQ_NEW =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Test if the current sequential message is a new message
!--
BEGIN

IF CH$RCHAR(NEWMSGFLAG(.MSG_ADR)) EQL '*'
    THEN RETURN TRUE
    ELSE RETURN FALSE
END;

GLOBAL ROUTINE MAIL$NEW_MSG =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to test if the current message is a "new"
!	(previously unread) message.  If it is, the new flag in the message
!	is cleared.
!
! INPUTS:
!
!	MSG_ADR = Address of first record in current message.
!
! OUTPUTS:
!
!	STS$K_SUCCESS if message is new.
!	STS$K_ERROR if message is not new.
!--
BEGIN
LOCAL
	RECBUFFER : $BBLOCK[$BYTEOFFSET(MFR_T_DATA)+8],
	RECDESC : VECTOR[2,LONG],
	PTR;						! Buffer pointer

IF .MAIL$GL_FLAGS[MAIF_V_ISAM]
THEN BEGIN
    IF .MAIL$L_CURMSG[MMB_V_NEWMSG]
    THEN BEGIN
	!
	! Update record in file to show it's been read
	!
	BIND
	    RECDATIM = RECBUFFER[MFR_Q_DATIM] : VECTOR[2,LONG],
	    MFR = MAIL$L_CURMSG[MMB_T_HDREC] : $BBLOCK,
	    MMH = MFR + $BYTEOFFSET(MFR_T_DATA): $BBLOCK;

	MMH[MMH_V_NEWMSG] = FALSE;
	MAIL$L_CURMSG[MMB_V_NEWMSG] = FALSE;
	!
	! Only set key to MAIL if it was NEWMAIL
	!
	IF CH$EQL(.MFR[MFR_B_FILKEYLEN],MFR[MFR_T_FILEKEY],
			.MAIL$SD_NEWMAIL[DSC$W_LENGTH],
			.MAIL$SD_NEWMAIL[DSC$A_POINTER])
	THEN BEGIN
	    MFR[MFR_B_FILKEYLEN] = %CHARCOUNT('MAIL');
	    CH$COPY(%CHARCOUNT('MAIL'),UPLIT(%ASCII 'MAIL'),0,
			MFR_S_FILEKEY,MFR[MFR_T_FILEKEY]);
	    END;
	MAIL$UPDATE_I_MSG();
	RETURN TRUE
	END
    ELSE RETURN FALSE
    END
ELSE BEGIN
    IF CH$RCHAR(PTR = NEWMSGFLAG(.MSG_ADR)) EQL '*'		! If "new" flag
    THEN BEGIN
	CH$WCHAR(' ',.PTR);				! Clear text flag
	MODIFIED = 1;					! Set modified flag
	RETURN TRUE					! Return record is new
	END
    ELSE
	RETURN FALSE					! Return not "new"
    END;
END;


GLOBAL ROUTINE MAIL$DELETE_MSG =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to delete the current message from the message
!	buffer and, ultimately, from the message file.
!
! INPUTS:
!
!	MSG_ADR = Address of first record in current message.
!
! OUTPUTS:
!
!	Current message removed from the message buffer.
!--
BEGIN
LOCAL
	TEXT_LEFT,				! Size of text left
	FROM_PTR,				! Move from text pointer
	TO_PTR,					! Move to text pointer
	MOVE_SIZ;				! Size of text moving

IF_ERR(MAIL$REWIND_MSG();,RETURN .STATUS);	! Rewind the message
IF NOT .MAIL$GL_FLAGS[MAIF_V_READ_FL]
    THEN RETURN MAIL$_NOTREADIN;
MODIFIED = 1;					! Set modified flag
WHILE MAIL$GET_MSG() DO 1;			! Find end of message

TEXT_LEFT = (.MSG_BUF_ADR + .MSG_BUF_SIZ) - 	! Compute text left after msg
		(.MAIL$L_MSG_RADR - RECSIZ_SIZ);
FROM_PTR = .MAIL$L_MSG_RADR - RECSIZ_SIZ;	! Get address to move from
TO_PTR = .MSG_ADR;				! Get address to move to
DO	BEGIN
	MOVE_SIZ = MIN(.TEXT_LEFT,65535);	! Compute max that can be moved
	CH$MOVE(.MOVE_SIZ,.FROM_PTR,.TO_PTR);	! Move text
	TO_PTR = .TO_PTR + .MOVE_SIZ;		! Compute new to pointer
	FROM_PTR = .FROM_PTR + .MOVE_SIZ;	! Compute new from pointer
	TEXT_LEFT = .TEXT_LEFT - .MOVE_SIZ;	! Compute amount left now
	END
UNTIL .TEXT_LEFT EQL 0;				! Continue until all moved

MSG_BUF_SIZ = .MSG_BUF_SIZ - 			! Compute new size of text
		((.MAIL$L_MSG_RADR - RECSIZ_SIZ) - .MSG_ADR);

MAIL$GL_FLAGS[MAIF_V_READ_FL] = 0;
IF .MSG_ADR LSSU (.MSG_BUF_ADR + .MSG_BUF_SIZ)	! If not past end of buffer
THEN
	MAIL$REWIND_MSG()			! Rewind new current message
ELSE
	MSG_ADR = MAIL$L_MSG_STS = 0;		! Else, end of file
RETURN STS$K_SUCCESS
END;

ROUTINE TELL_CVTFILE (DESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Signal that a message file is being converted to an ISAM file
!
!--
SIGNAL(MAIL$_CVTFILE,2,MAIL$Q_RD_DESC,.DESC);

GLOBAL ROUTINE MAIL$CLOSE_FILE : NOVALUE =
!++
!  FUNCTIONAL DESCRIPTION:
!
!	This routine closes the current message file.  If any messages were
!	deleted, all the un-deleted messages are first copied, contiguously,
!	to the message file, thus truncating the file.  The message buffer
!	is then deallocated.
!
! INPUTS:
!
!	MSG_BUF_ASIZ = Size of allocated message buffer.
!	MSG_BUF_ADR = Starting address of message buffer.
!	MSG_BUF_SIZ = Size of messages in message buffer.
!
! OUTPUTS:
!
!	Messages copied to message file, message file truncated and closed,
!	message buffer deallocated, message file context initialized.
!
!	All failures are signalled.
!--
BEGIN
LOCAL
	PTR,					! Message buffer pointer
	SIZ,					! Message buffer size
	STATUS;					! Routine status
!
! If no file open, just return
!
IF .RD_FAB[FAB$W_IFI] EQL 0 THEN RETURN;

IF .MAIL$GL_FLAGS[MAIF_V_ISAM]
THEN BEGIN
    IF NOT .MAIL$L_USRSYSBUF[VMD_V_NOAUTOPURGE]
	THEN MAIL$EMPTY_WASTEBASKET();
    MAIL$DESELECT_MSGS();
    END
ELSE BEGIN
!
! If there are messages left, rewind the message file and copy the
! messages to it.  If none left, mark the file for deletion.
!
IF .MODIFIED THEN
IF .MSG_BUF_SIZ NEQ 0					! If text left
THEN	BEGIN
	$DCLEXH(DESBLK = EXITBLOCK);			! Re-declare if interrupted
	$WAIT(RAB = RD_RAB);				! Wait for all quiet
	STATUS = $REWIND(RAB = RD_RAB);
	PTR = .MSG_BUF_ADR;
	SIZ = .MSG_BUF_SIZ;
	WHILE .SIZ GTR 0 AND .STATUS
	DO	BEGIN
		RD_RAB[RAB$L_RBF] = .PTR + RECSIZ_SIZ;
		RD_RAB[RAB$W_RSZ] = .RECSIZ(.PTR);
		SIZ = .SIZ - .RECSIZ(.PTR)- RECSIZ_SIZ;
		PTR = .PTR + .RECSIZ(.PTR)+ RECSIZ_SIZ;
		STATUS = $PUT(RAB = RD_RAB,ERR=UTIL$REPORT_IO_ERROR);
		END;
	END
ELSE
	RD_FAB[FAB$V_DLT] = 1;				! Set to delete
LIB$FREE_VM(MSG_BUF_ASIZ,MSG_BUF_ADR);			! Deallocate buffer
END;
!
! Close the message file
!
MAIL$UP_PRIV(1^$BITPOSITION(PRV$V_SYSPRV),0);		! Enable system priv
IF_ERR($CLOSE(FAB = RD_FAB);,				! Close the file
	SIGNAL (.STATUS));				! possibly deleting it
MAIL$DOWN_PRIV();
$CANEXH(DESBLK = EXITBLOCK);				! Cancel exit handler
!
! Re-initialize all the message file context
!
MAIL$CLR_DIR_FLAG();				!Clear directory display flags
MODIFIED = 0;
MSG_BUF_ASIZ = 0;
MSG_BUF_SIZ = 0;
MSG_BUF_ADR = 0;
MSG_ADR = 0;
MAIL$L_MSG_NUM = 0;
MAIL$W_MSG_RSIZ = 0;
MAIL$L_MSG_RADR = 0;
MAIL$L_MSG_STS = MAIL$_NOTREADIN;
MAIL$GL_FLAGS[MAIF_V_ISAM] = 0;
MAIL$GL_FLAGS[MAIF_V_FILOPN] = 0;
MAIL$GL_FLAGS[MAIF_V_DFMSG] = 0;
END;

ROUTINE OPEN_MAIL_FILE (SIGNAL_FLAG,RE_OPEN) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine opens the mail file
!
! Assumes RD_FAB initialized to open the file
!--
BEGIN

LOCAL
    DESC : VECTOR[2,LONG],
    STATUS;

MAIL$GL_FLAGS[MAIF_V_ISAM] = 0;
DESC[0] = DESC[1] = 0;
STATUS = $OPEN(FAB = RD_FAB);
CH$MOVE(DSC$C_S_BLN,UTIL$GETFILENAME(RD_FAB),DESC);
STR$COPY_DX(RD_ESNAM_DESC,DESC);
IF NOT .STATUS
THEN BEGIN
    IF .STATUS EQL RMS$_SHR
    THEN BEGIN
	RD_FAB[FAB$B_FAC] = FAB$M_GET OR FAB$M_PUT OR FAB$M_TRN;
	RD_FAB[FAB$L_FOP] = FAB$M_TEF OR FAB$M_SQO;
	RD_FAB[FAB$B_SHR] = 0;
	RD_RAB[RAB$B_RAC] = RAB$C_SEQ;
	RD_RAB[RAB$L_ROP] = RAB$M_RAH OR RAB$M_WBH OR RAB$M_TPT;
	IF NOT .RE_OPEN
	    THEN RETURN TRUE;
	IF_ERR($OPEN(FAB=RD_FAB);,
		IF .SIGNAL_FLAG
		THEN UTIL$REPORT_IO_ERROR(RD_FAB);
		RETURN .STATUS);
	END
	ELSE RETURN UTIL$REPORT_IO_ERROR(RD_FAB);
    END;
IF .RD_FAB[FAB$B_ORG] EQL FAB$C_IDX
THEN BEGIN
    MAIL$GL_FLAGS[MAIF_V_ISAM] = 1;			!Flag ISAM file
    IF .MAIL$L_RECBUF EQL 0
	THEN IF_ERR(LIB$GET_VM(%REF(MFR_C_MAXLEN),MAIL$L_RECBUF);,
		IF .SIGNAL_FLAG THEN SIGNAL(.STATUS);
		RETURN .STATUS);

    RD_RAB[RAB$L_UBF] = .MAIL$L_RECBUF;
    END;

IF_ERR($CONNECT(RAB=RD_RAB);,
	IF .SIGNAL_FLAG
	    THEN UTIL$REPORT_IO_ERROR(RD_RAB);
	$CLOSE(FAB=RD_FAB);
	RETURN .STATUS);

IF .MAIL$GL_FLAGS[MAIF_V_ISAM]
    THEN MAIL$ISAM_INIT();

RETURN TRUE
END;

GLOBAL ROUTINE MAIL$RENAME_SUCCESS (OLD_SPEC,NEW_SPEC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called by LIB$RENAME_FILE on a successful RENAME
!--
BEGIN

MAP
    OLD_SPEC : REF $BBLOCK;

SIGNAL(MAIL$_RENAMED,2,.OLD_SPEC,.NEW_SPEC);

RETURN TRUE
END;

GLOBAL ROUTINE MAIL$RENAME_ERROR (OLD_SPEC,NEW_SPEC,RMSSTS,RMSSTV,ERROR_SOURCE) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Error routine called by LIB$RENAME_FILE on an error
!--
BEGIN
MAP
    RMSSTS : REF VECTOR[,LONG],
    RMSSTV : REF VECTOR[,LONG];

CASE .ERROR_SOURCE FROM 0 TO 2
OF SET

[0] :					!Error searching for old_file
!    IF .RMSSTS[0] EQL RMS$_FNF
!	THEN RETURN TRUE
!	ELSE 
	SIGNAL(MAIL$_SEARCHFAIL,1,.OLD_SPEC,
				.RMSSTS[0],.RMSSTV[0]);

[1,2] :					!Error parsing new file
    SIGNAL(MAIL$_SEARCHFAIL,1,.NEW_SPEC,.RMSSTS[0],.RMSSTV[0]);
TES;

RETURN TRUE
END;

GLOBAL ROUTINE MAIL$OPEN_FILE(FILE_DESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine opens the named message file and reads it into the
!	message buffer.
!
! INPUTS:
!
!	FILE_DESC = Descriptor of file to open. if 0, default mail file opened
!	MAIL$T_MAILDEF = User's default device/directory string
!
! OUTPUTS:
!
!	MSG_BUF_ASIZ = Size of allocated message buffer.
!	MSG_BUF_SIZ = Size of text in message buffer.
!	MSG_BUF_ADR = Address of text in message buffer.
!	MSG_ADR = Address of first new message in buffer.
!	MAIL$Q_MSG_FILE = Message file name desc.
!	MAIL$L_MSG_NUM = Current message number.
!
!	All failures are signalled as well as returned.
!--
BEGIN

MAP
	FILE_DESC : REF $BBLOCK;

LOCAL
	DESC : VECTOR[2,LONG],
	DESC_1 : VECTOR[2,LONG],
	NEW_FORMAT,				! File is ISAM
	PREV_REC,				! Previous record address
	SPACE_LEFT,				! Space left in buffer
	STATUS;					! Routine status

IF .RD_RSNAM_BUF EQL 0
    THEN IF_ERR(LIB$GET_VM(%REF(NAM$C_MAXRSS),RD_RSNAM_BUF);,
		RETURN SIGNAL(.STATUS));
IF .RD_ESNAM_BUF EQL 0
    THEN IF_ERR(LIB$GET_VM(%REF(NAM$C_MAXRSS),RD_ESNAM_BUF);,
		RETURN SIGNAL(.STATUS));
!
! Close any currently open file and zero all context.
!
MAIL$CLOSE_FILE();
!
! Initialize RMS data structures
!
$FAB_INIT(FAB=RD_FAB,
	FNS=.FILE_DESC[DSC$W_LENGTH],
	FNA=.FILE_DESC[DSC$A_POINTER],
	DNS = .MAIL$Q_MAILDEF[DSC$W_LENGTH],
	DNA = .MAIL$Q_MAILDEF[DSC$A_POINTER],
	CTX = MAIL$_OPENIN,
	FAC=(DEL,GET,PUT,UPD),
	SHR=(DEL,GET,PUT,UPD),
	NAM=RD_NAM);

RD_FAB[FAB$V_DFW] = .MAIL$B_DFW;

$NAM_INIT(NAM=RD_NAM,
	RSS=NAM$C_MAXRSS,
	RSA=.RD_RSNAM_BUF,
	ESS=NAM$C_MAXRSS,
	ESA=.RD_ESNAM_BUF);

$RAB_INIT(RAB=RD_RAB,
	FAB=RD_FAB,
	CTX=MAIL$_OPENIN,
	RAC=KEY,
	USZ=MFR_C_MAXLEN);

IF .FILE_DESC[DSC$W_LENGTH] EQL 0
    OR CH$EQL(.FILE_DESC[DSC$W_LENGTH],.FILE_DESC[DSC$A_POINTER],
		.MAIL$Q_MSGNAME[DSC$W_LENGTH],.MAIL$Q_MSGNAME[DSC$A_POINTER],0)
THEN BEGIN
!
! Open the new message file.  Call routine to concatenate new msgs together
! if sequential file.  if isam file, always just open.
!
	STR$COPY_DX(MAIL$Q_MSG_FILE,MAIL$Q_MSGNAME);
	RD_FAB[FAB$B_FNS] = .MAIL$Q_MSGNAME[DSC$W_LENGTH];
	RD_FAB[FAB$L_FNA] = .MAIL$Q_MSGNAME[DSC$A_POINTER];
	STATUS = OPEN_NEWFILE();
	IF .STATUS EQL RMS$_FNF				! If file not found
	THEN	BEGIN
		SIGNAL(MAIL$_NOMSGS); 			! Signal no messages
		RETURN MAIL$_NOMSGS 			! Return
		END
	ELSE IF NOT .STATUS
	    THEN RETURN .STATUS;
	MAIL$GL_FLAGS[MAIF_V_DFMSG] = 1;
	END
ELSE BEGIN
	STR$COPY_DX(MAIL$Q_MSG_FILE,.FILE_DESC);
	STATUS = OPEN_MAIL_FILE(1,1);
	IF NOT .STATUS THEN RETURN .STATUS;
	END;
MAIL$Q_MSG_FNM[DSC$W_LENGTH] = .RD_NAM[NAM$B_NAME];
MAIL$Q_MSG_FNM[DSC$A_POINTER] = .RD_NAM[NAM$L_NAME];

IF NOT .MAIL$GL_FLAGS[MAIF_V_ISAM]		!Isam handled differently, thanks
THEN BEGIN
!
! Allocate a buffer to read-in the message text
!
IF .RD_FAB[FAB$L_ALQ] EQL 0 				! Return if file empty
THEN
	(SIGNAL(MAIL$_NOMSGS); $CLOSE(FAB=RD_FAB); RETURN MAIL$_NOMSGS);
MSG_BUF_ASIZ = .RD_FAB[FAB$L_ALQ] * 512;		! Compute size in bytes
IF_ERR(	LIB$GET_VM(MSG_BUF_ASIZ,MSG_BUF_ADR);,
	SIGNAL(.STATUS);
	$CLOSE(FAB = RD_FAB);
	RETURN .STATUS);
!
! Read all the text records from the file into the message buffer
!
SPACE_LEFT = .MSG_BUF_ASIZ;
PREV_REC = .MSG_BUF_ADR; .PREV_REC = 0;
RD_RAB[RAB$L_UBF] = .MSG_BUF_ADR + RECSIZ_SIZ;
RD_RAB[RAB$W_USZ] = MIN(.SPACE_LEFT - RECSIZ_SIZ,MAXRECSIZ);
RD_RAB[RAB$L_CTX] = MAIL$_READERR;
WHILE (STATUS = $GET(RAB = RD_RAB,ERR=UTIL$REPORT_IO_ERROR))
AND   (.SPACE_LEFT GTR 0)
DO 	BEGIN
	RECSIZ(.RD_RAB[RAB$L_UBF] - RECSIZ_SIZ) = .RD_RAB[RAB$W_RSZ];
	!
	! If first new message, save address of message
	!
	IF MSGDELIM(.PREV_REC)
	THEN
		IF .MSG_ADR EQL 0
		THEN	BEGIN
			MAIL$L_MSG_NUM = .MAIL$L_MSG_NUM + 1;
			IF CH$RCHAR(NEWMSGFLAG(.PREV_REC)) EQL '*'
			THEN
				MSG_ADR = .PREV_REC;
			END;
	PREV_REC = .RD_RAB[RAB$L_RBF] - RECSIZ_SIZ;
	!
	! Compute space left and address for next record
	!
	SPACE_LEFT = .SPACE_LEFT - .RD_RAB[RAB$W_RSZ] - RECSIZ_SIZ;
	MSG_BUF_SIZ = .MSG_BUF_SIZ + .RD_RAB[RAB$W_RSZ] + RECSIZ_SIZ;
	RD_RAB[RAB$L_UBF] = .RD_RAB[RAB$L_UBF] + 
			    .RD_RAB[RAB$W_RSZ] + RECSIZ_SIZ;
	RD_RAB[RAB$W_USZ] = MIN(.SPACE_LEFT - RECSIZ_SIZ,MAXRECSIZ);
	END;
IF .STATUS NEQ RMS$_EOF
THEN	BEGIN
	MAIL$CLOSE_FILE();
	RETURN .STATUS;
	END;
!
! If no new messages found, set current message to first message.  Also, if
! this is the new message file, clear the user's new message flag.
!
IF .MSG_ADR EQL 0					! If no new messages,
THEN	BEGIN
	MSG_ADR = .MSG_BUF_ADR;				! Position to first one
	MAIL$L_MSG_NUM = 1;
	END;
%IF NOT LEAVE_SEQ
%THEN
	IF .MAIL$GL_FLAGS[MAIF_V_DFMSG]
	THEN BEGIN
	    DESC[0] = .RD_NAM[NAM$B_NAME];
	    DESC[1] = .RD_NAM[NAM$L_NAME];
	    DESC_1[0] = .RD_NAM[NAM$B_RSL] - .RD_NAM[NAM$B_VER];
	    DESC_1[1] = .RD_NAM[NAM$L_RSA];
	    MAIL$COPY_MSGS(DESC_1,DESC,(MCR_M_NIL OR MCR_M_ALL),TELL_CVTFILE);
	    MAIL$CLOSE_FILE();			!Close the sequential file
	    LIB$RENAME_FILE(MAIL$Q_RD_DESC,	!Rename the old sequential file
			$DESCRIPTOR('.OLD'),0,0,0,
			MAIL$RENAME_SUCCESS,MAIL$RENAME_ERROR);
	    MAIL$GET_INPUT(DYN_DESC,MAIL$GETMSG(MAIL$_RETCONT));
	    RETURN MAIL$OPEN_FILE(.FILE_DESC);	!and open the isam version
	    END;
%FI
END;								!Sequential mail file
MAIL$GL_FLAGS[MAIF_V_FILOPN] = 1;		!Flag file open for business
RETURN TRUE
END;


ROUTINE OPEN_NEWFILE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to open the new mail message file by first
!	concatenating all the new mail message files into one file.  This
!	is because there is no file sharing, and if the new mail message
!	file is in use, the mail that is being sent must be put in a different
!	file.  This routine copies all the extra files into one file.
!
! INPUTS:
!
!	RD_FAB[FAB$B_DNS] and RD_FAB[FAB$L_DNA] set to user's default
!	directory specification.
!
! OUTPUTS:
!
!	RD_FAB is open and RD_RAB is connected to the file.
!--
BEGIN
LITERAL
	FIDS = 64;					! Allow 64 file ID's
STRUCTURE
	FIDVECTOR[FIDNUM,FIDFIELD;N] =			! FID vector
		[N*6] (FIDVECTOR+((FIDNUM-1)*6)+(FIDFIELD*2)) <0,16,0>;
LOCAL
	STATUS,						! Routine status
	DESC:		VECTOR[2,LONG],
	FID:		FIDVECTOR[FIDS],		! Message file ID's
	CUR_FID:	LONG,				! Current ID
	FAB:		BLOCK[FAB$C_BLN,BYTE],		! Temporary FAB
	RAB:		BLOCK[RAB$C_BLN,BYTE],		! Temporary RAB
	NAM:		$BBLOCK[NAM$C_BLN],		! Temporary NAM
	NAMRSS: 	$BBLOCK[NAM$C_MAXRSS],
	NAMESS:		$BBLOCK[NAM$C_MAXRSS],
	BUFF:		BLOCK[MAIL$K_INBUFFSZ,BYTE];	! Temporary I/O buffer

STATUS = OPEN_MAIL_FILE(0,0);
IF NOT .STATUS
    THEN RETURN .STATUS;
IF .MAIL$GL_FLAGS[MAIF_V_ISAM]
    THEN RETURN TRUE;

$NAM_INIT(NAM=RD_NAM,
	RSS=NAM$C_MAXRSS,
	RSA=.RD_RSNAM_BUF,
	ESS=NAM$C_MAXRSS,
	ESA=.RD_ESNAM_BUF);

!
! Find all the newmail message files.
!
CUR_FID = 0;						! Init file ID index
RD_FAB[FAB$B_FNS] = %CHARCOUNT(DEFFILENAM,DEFFILETYP,';*');
RD_FAB[FAB$L_FNA] = UPLIT BYTE(DEFFILENAM,DEFFILETYP,';*');
IF_ERR(	$PARSE(FAB = RD_FAB);,RETURN .STATUS);	! Parse the file name
!
! Search for all the files and save the file IDs
!
WHILE (STATUS = $SEARCH(FAB = RD_FAB)) AND (.CUR_FID LSS FIDS)
DO	BEGIN
	STR$COPY_DX(MAIL$Q_RD_DESC,UTIL$GETFILENAME(RD_FAB)); !So we get oldest
	CUR_FID = .CUR_FID + 1;
	FID[.CUR_FID,0] = .RD_NAM[NAM$W_FID_NUM];
	FID[.CUR_FID,1] = .RD_NAM[NAM$W_FID_SEQ];
	FID[.CUR_FID,2] = .RD_NAM[NAM$W_FID_RVN];
	END;
IF NOT .STATUS AND (.STATUS NEQ RMS$_NMF) THEN RETURN .STATUS;
!
! Open the oldest file (the last one found).
!
RD_NAM[NAM$W_FID_NUM] = .FID[.CUR_FID,0]; 		! Set file ID
RD_NAM[NAM$W_FID_SEQ] = .FID[.CUR_FID,1];
RD_NAM[NAM$W_FID_RVN] = .FID[.CUR_FID,2];
RD_FAB[FAB$V_NAM] =  1;					! Open by file ID
STATUS = $OPEN(FAB = RD_FAB);				! Open file
RD_FAB[FAB$V_NAM] = 0;					! Clear open by file ID
IF NOT .STATUS THEN RETURN .STATUS;			! Check open status
IF .RD_FAB[FAB$B_ORG] NEQ FAB$C_SEQ
    THEN ($CLOSE(FAB=RD_FAB);
	  RETURN SIGNAL(MAIL$_FILECONFUSED,1,MAIL$Q_RD_DESC));
MAIL$GL_FLAGS[MAIF_V_FILOPN] = 1;
CUR_FID = .CUR_FID - 1;					! Decrement file ID count
RD_RAB[RAB$V_EOF] = 1;					! Set to end-of-file
STATUS = $CONNECT(RAB = RD_RAB);			! Connect stream
IF NOT .STATUS
    THEN ($CLOSE(FAB=RD_FAB); RETURN .STATUS);
RD_RAB[RAB$V_EOF] = 0;					! Clear EOF flag

!
! If there are any more files, open them and append their contents to the
! end of the last file.
!
IF .CUR_FID GTR 0
THEN	BEGIN
	$FAB_INIT(	FAB=FAB,			! Create a FAB
			FAC=GET,			!  GET access only
			FOP=<SQO,			!  Sequential only
			     NAM>,			!  Open by NAM block
			NAM=NAM);			!  NAM block addr
	$RAB_INIT(	RAB=RAB,			! Create a RAB
			FAB=FAB,			!  FAB address
			ROP=<RAH,			!  Read-ahead
			     LOC>,			!  Locate mode
			UBF=BUFF,			!  Record buffer addr
			USZ=MAIL$K_INBUFFSZ);		!  Record buffer size
	CH$MOVE(NAM$C_BLN,RD_NAM,NAM);
	NAM[NAM$L_RSA] = NAMRSS;
	NAM[NAM$L_ESA] = NAMESS;
	CH$MOVE(.RD_NAM[NAM$B_RSL],.RD_NAM[NAM$L_RSA],NAMRSS);
	CH$MOVE(.RD_NAM[NAM$B_ESL],.RD_NAM[NAM$L_ESA],NAMESS);
	!
	! Open the next file
	!
	DO	BEGIN
		NAM[NAM$W_FID_NUM] = .FID[.CUR_FID,0]; ! Set file ID
		NAM[NAM$W_FID_SEQ] = .FID[.CUR_FID,1];
		NAM[NAM$W_FID_RVN] = .FID[.CUR_FID,2];
		IF_ERR($OPEN(FAB = FAB);,$CLOSE(FAB = RD_FAB); RETURN .STATUS);
		IF .FAB[FAB$B_ORG] NEQ FAB$C_SEQ
		    THEN BEGIN
			  LOCAL DEV_DESC : VECTOR[2,LONG],
				FILE_DESC : DYN_DESC_DECL;

			  $CLOSE(FAB=FAB);
			  $CLOSE(FAB=RD_FAB);
			  DEV_DESC[0] = .NAM[NAM$B_DEV];
			  DEV_DESC[1] = .NAM[NAM$L_DEV];
			  LIB$FID_TO_NAME(DEV_DESC,FID[.CUR_FID,0],FILE_DESC);
			  SIGNAL(MAIL$_FILECONFUSED,1,
					(IF .FILE_DESC[DSC$W_LENGTH] NEQ 0
						THEN FILE_DESC
						ELSE UTIL$GETFILENAME(FAB)));
			  STR$FREE1_DX(FILE_DESC);
			  RETURN MAIL$_FILECONFUSED;
			  END;
		$CONNECT(RAB = RAB);
		RD_FAB[FAB$L_ALQ] = .FAB[FAB$L_ALQ] +	! Add file's size
					.RD_FAB[FAB$L_ALQ];
		!
		! Append all the records to the end of the file
		!
		WHILE STATUS = $GET(RAB = RAB)
		DO	BEGIN
			RD_RAB[RAB$W_RSZ] = .RAB[RAB$W_RSZ];
			RD_RAB[RAB$L_RBF] = .RAB[RAB$L_RBF];
			STATUS = $PUT(RAB = RD_RAB);
			IF NOT .STATUS THEN EXITLOOP;
			END;

		IF .STATUS NEQ RMS$_EOF			! Check for failure
		THEN ($CLOSE(FAB = FAB); $CLOSE(FAB = RD_FAB) ;RETURN .STATUS);
		$FLUSH(RAB = RD_RAB);			! Force disk update
		FAB[FAB$V_DLT] = 1;			! Delete other file
		MAIL$UP_PRIV(1^$BITPOSITION(PRV$V_SYSPRV),0); ! Enable system priv
		$CLOSE(FAB = FAB);			! Close and delete
		MAIL$DOWN_PRIV();			! Disable system uic
		FAB[FAB$V_DLT] = 0;
		END
	WHILE (CUR_FID = .CUR_FID - 1) GTR 0;		! Open all files
	END;
$REWIND(RAB = RD_RAB);					! Rewind message file
RETURN TRUE
END;

ROUTINE DELFILE (FAB) =
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!	This action routine is called by LIB$FILE_SCAN for each file which
!	satisfies the file specification match.  The file is deleted
!
!--
MAP
    FAB : REF $BBLOCK;

LOCAL
    STATUS;

STATUS = $ERASE(FAB=.FAB);

RETURN .STATUS
END;

GLOBAL ROUTINE MAIL$DEL_TMPF : NOVALUE =
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine deletes all the MAIL.TMP files that may be in
!	the user's login directory.  This is done to prevent inadventantly
!	sending an old message when a quit is done from the editor.
!
!--

LOCAL
    FAB : $FAB_DECL,
    NAM : $NAM_DECL,
    RSBUF : $BBLOCK[NAM$C_MAXRSS],
    ESBUF : $BBLOCK[NAM$C_MAXRSS];

$FAB_INIT(FAB=FAB,
	NAM=NAM,
	FNS=.MAIL$Q_TMPFILE_DESC[DSC$W_LENGTH],
	FNA=.MAIL$Q_TMPFILE_DESC[DSC$A_POINTER],
	DNS=%CHARCOUNT(';*'),
	DNA=UPLIT(%ASCII ';*'));

$NAM_INIT(NAM=NAM,
	ESS=NAM$C_MAXRSS,
	ESA=ESBUF,
	RSS=NAM$C_MAXRSS,
	RSA=RSBUF);

LIB$FILE_SCAN(FAB,DELFILE,0);
RETURN;
END;

END
ELUDOM
