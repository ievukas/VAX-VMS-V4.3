%TITLE 'NDXOUT -- Sort and store index entries'
MODULE NDXOUT (IDENT = 'V04-000'
		    %BLISS32 [, ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:
!   DSR (Digital Standard RUNOFF) /DSRPLUS DSRINDEX/INDEX Utility
!
! ABSTRACT:
!	The routines contained in this module sort and store
!	index entries.  This module is part of INDEX and was
!	adopted from the TCX module XOUT.
!
!
! ENVIRONMENT:  Transportable
!
! AUTHOR: 	JPK
!
! MODIFIED BY:
!
!	007	JPK00018	09-Mar-1983
!		Modified INDEX to handle new BRN format.
!		Modified NDXOUT to handle specifyable levels on SORT= string.
!		Modified NDXFMT to output new RUNOFF prologue.
!		Modified NDXPAG to output new TMS prologue and RUNOFF epilogue.
!
!	006	JPK00015	04-Feb-1983
!		Cleaned up module names, modified revision history to
!		conform with established standards. Updated copyright dates.
!
!	005	JPK00012	24-Jan-1983
!		Modified NDXVMSMSG.MSG to define error messages for both
!		DSRINDEX and INDEX.
!		Added require of NDXVMSREQ.R32 to NDXOUT, NDXFMT, NDXDAT,
!		INDEX, NDXMSG, NDXXTN, NDXTMS, NDXVMS and NDXPAG for BLISS32. 
!		Since this file defines the error message literals, 
!		the EXTERNAL REFERENCEs for the error message literals 
!		have been removed.
!
!	004	JPK00010	24-Jan-1983
!		Removed routines GETDAT and UPDDAT from NDXDAT - they 
!		performed no useful function. Removed references to these
!		routines from NDXOUT, NDXFMT, and NDXMSG.
!		Removed reference to XPOOL in NDXOUT - not used.
!
!	003	JPK00009	24-Jan-1983
!		Modified to enhance performance. The sort buckets have each
!		been divided into 27 sub-buckets; 1 for each letter and 1
!		for non-alphas. Removed reference to BUCKET from INDEX.
!		Definition of the structure was added to NDXPOL. References
!		to BUCKET were changed in modules NDXOUT, NDXINI, NDXFMT 
!		and NDXDAT.
!
!	002	JPK00004	24-Sep-1982
!		Modified NDXOUT, NDXMSG, NDXFMT, and NDXDAT for TOPS-20. 
!		Strings stored in the index pool use the first fullword 
!		for their length. References to these strings were incorrect.
!
!-

%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    XOUT	: NOVALUE,		! Put away index item
    SORT_AS	: NOVALUE,		! Build sort string
    FIND_POS	: NOVALUE,		! Locate position for insertion
    FIND_BUCKET,			! Locate bucket for insertion
    INSERT_INX	: NOVALUE,		! Insert index item into list
    INSERT_REF,				! Insert page reference into list
    ENTRY_CMP,				! Compare new entry with current entry
    STRG_CMP,				! Compare two strings
    CHRCMP	: NOVALUE;		! Compare two characters in internal format

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';

SWITCHES LIST (REQUIRE);

REQUIRE 'REQ:NDXCLI';

REQUIRE 'REQ:NDXXPL';

REQUIRE 'REQ:NDXPOL';

REQUIRE 'REQ:LETTER';

%IF %BLISS (BLISS32)
%THEN

REQUIRE 'REQ:NDXVMSREQ';

%FI

SWITCHES LIST (NOREQUIRE);

!
! MACROS:
!

MACRO
    REPEAT = WHILE 1 DO %;

!
! EQUATED SYMBOLS:
!

LITERAL
    TRUE = 1,
    FALSE = 0;

!
! OWN STORAGE:
!

OWN
    CELL	: $C_BLOCK,			! Current call characteristics
    SORT_STR	: VECTOR [CH$ALLOCATION (1200)], ! Build sort string here
    SORT_PTR,					! Pointer to sort string
    SORT_LEN,					! Length of sort string
    USER_SORT_LEN,				! Length of user specified sort string
    USER_SORT_PTR;				! Pointer to user specified sort string

!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    TAB    : UNSIGNED (8),		! TAB character
    RINTES : UNSIGNED (8);		! Special escape character

EXTERNAL
    CMDBLK : $NDXCMD,			! Command line information block
    XPLBLK : $XPL_BLOCK,		! Extended indexing information block
    BUCKET : $BUCKET_ARRAY [27, 27],	! Hashing buckets (first character of entry)
    BOOKID;				! Address of master index book ident string

EXTERNAL ROUTINE
    SAVDAT,				! Place data in work storage
    DMPENT : NOVALUE;

%SBTTL 'XOUT -- Put away index item'

GLOBAL ROUTINE XOUT (ENTRY_LENGTH, ENTRY_PTR, XTN, BAR_FLAG) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Place an index or sub-index item into the index master storage
!	list in alphabetical order.
!
! FORMAL PARAMETERS:
!
!	ENTRY_LENGTH 	- Length of index entry text
!	ENTRY_PTR	- CH$PTR to index entry text
!	XTN		- Transaction number
!	BAR_FLAG	- Change bar flag
!
! IMPLICIT INPUTS:
!
!	CMDBLK		- Command line information block
!	XPLBLK		- Extended indexing attributes block
!	CELL		- Information about current position in list
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Master index is built.
!
!--

    BEGIN

    LOCAL
	INT_HL,
	LAST_NB,
	STG_PTR,
	SUBX_STG,
	SUBX_CNT;

    !
    ! Is this trip necessary?
    !
    IF .ENTRY_LENGTH EQL 0 THEN RETURN;

    !
    ! Initialization
    !
    BEGIN
    MAP
	CELL : VECTOR [C$K_LENGTH];

    INCR I FROM 0 TO C$K_LENGTH - 1 DO CELL [.I] = 0;
    END;

    SUBX_STG = .ENTRY_PTR;			! Get address of index string
    INT_HL = .ENTRY_LENGTH;			! Get length of index string.

    STG_PTR = .SUBX_STG;
    LAST_NB = .SUBX_STG;
    SUBX_CNT = 0;

    IF .XPLBLK [XPL$V_VALID]
    THEN
	BEGIN
	!
	! Attributes block is valid. Initialize user specified sort parameters.
	!
	BIND
	    SORT_STR = XPLBLK [XPL$T_SORT] : $STR_DESCRIPTOR ();

	USER_SORT_LEN = .SORT_STR [STR$H_LENGTH];
	USER_SORT_PTR = .SORT_STR [STR$A_POINTER];
	END
    ELSE
	USER_SORT_LEN = 0;

    !
    ! Scan the entire character string
    !
    INCR I FROM 1 TO .INT_HL DO
	BEGIN

	LOCAL
	    CHARACTER;

	CHARACTER = CH$RCHAR_A (STG_PTR);

	!
	! Look for special handling
	!
	IF .CHARACTER EQL RINTES
	THEN
	    BEGIN
	    !
	    ! Interpret escape sequences.
	    !
	    CHARACTER = CH$RCHAR_A (STG_PTR);
	    I = .I + 1;

	    IF .CHARACTER EQL %C'J'
	    THEN
		BEGIN
		!
		! Set up sub-index
		!
		LOCAL
		    T_PTR : REF $XE_BLOCK;

		CH$RCHAR_A (STG_PTR);			! Skip null argument
		I = .I + 1;

		!
		! Set up sort string
		!
		SORT_AS (.SUBX_STG, CH$DIFF (.LAST_NB, .SUBX_STG), .SUBX_CNT);

		!
		! Look for entry
		!
		FIND_POS (.SUBX_STG, CH$DIFF (.LAST_NB, .SUBX_STG), .SUBX_CNT, FALSE, 0);

		!
		! Enter it if it is not already there
		!
		IF NOT .CELL[C$V_IDNS]
		THEN
		    INSERT_INX (.SUBX_STG, CH$DIFF (.LAST_NB, .SUBX_STG), .SUBX_CNT, 0, .BAR_FLAG, .ENTRY_LENGTH, .ENTRY_PTR);

		!
		! Clear out sort string
		!
		SORT_LEN = 0;
		SORT_PTR = 0;

		!
		! Skip over text
		!
		SUBX_STG = .STG_PTR;
		LAST_NB = .SUBX_STG;
		SUBX_CNT = .SUBX_CNT + 1;
		CELL [C$V_IDNS] = FALSE;

		!
		! Is there a sub-index list?
		!
		T_PTR = .CELL [C$A_CURR];
		IF .T_PTR [XE$A_SUBX] EQL 0
		THEN
		    !
		    ! Insert end of sub-index list
		    !
		    INSERT_INX (0, 0, .SUBX_CNT, 0, .BAR_FLAG, .ENTRY_LENGTH, .ENTRY_PTR)
		ELSE
		    BEGIN
		    !
		    ! Set pointer to head of sub list
		    !
		    CELL [C$A_PREV] = .CELL [C$A_CURR];
		    CELL [C$A_CURR] = .T_PTR [XE$A_SUBX]
		    END
		END
	    ELSE
		LAST_NB = .STG_PTR
	    END
	ELSE
	    IF .CHARACTER NEQ %C' ' THEN LAST_NB = .STG_PTR

	END;

    !
    ! End of line was reached
    !
    SORT_AS (.SUBX_STG, CH$DIFF (.LAST_NB, .SUBX_STG), .SUBX_CNT);
    FIND_POS (.SUBX_STG, CH$DIFF (.LAST_NB, .SUBX_STG), .SUBX_CNT, TRUE, .XTN);
    INSERT_INX (.SUBX_STG, CH$DIFF (.LAST_NB, .SUBX_STG), .SUBX_CNT, .XTN, .BAR_FLAG, .ENTRY_LENGTH, .ENTRY_PTR);

    END;			!End of XOUT

%SBTTL 'SORT_AS -- Build sort string'
ROUTINE SORT_AS (I_PTR, I_LEN, LEVEL) : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds the sort string used to position the index
!	entry in the index.
!
!	If the user specified a sort string then that string is used.
!
!	If /SORT=LETTER was specified on the command line, a sort string
!	is built from the input string.
!
!	If /SORT=NONALPHA=IGNORE was specified on the command line, a
!	sort string is built if the first character in the input string
!	is not alphabetic.
!
!	Otherwise no string is built and the entry is positioned 
!	according to the text of the entry.
!
! FORMAL PARAMETERS:
!
!	I_LEN	- Length of input string
!	I_PTR	- Pointer to input string
!	LEVEL	- Subindex level
!
! IMPLICIT INPUTS:
!
!	XPLBLK		- Extended index attributes block
!	CMDBLK		- Command line information block
!	USER_SORT_LEN	- Length of user specified sort string if any
!	USER_SORT_PTR	- Pointer to user specified sort string if any
!
! IMPLICIT OUTPUTS:
!
!	USER_SORT_LEN	- Length of remainder of user specified sort string if any
!	USER_SORT_PTR	- Pointer to remainder of user specified sort string if any
!	SORT_PTR 	- Points to the sort string if any
!	SORT_LEN 	- Is the length of the sort string
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!--
    BEGIN

    LOCAL
	LEN,
	PTR;

    SORT_LEN = 0;
    SORT_PTR = CH$PTR (SORT_STR);

    IF .USER_SORT_LEN NEQ 0
    THEN
	BEGIN
	!
	! User specified a sort string.
	! Get the next segment.
	!
	SORT_PTR = .USER_SORT_PTR;

	WHILE .USER_SORT_LEN GTR 0 DO
	    BEGIN

	    LOCAL
		CH;

	    CH = CH$RCHAR_A (USER_SORT_PTR);		! Get next character
	    USER_SORT_LEN = .USER_SORT_LEN - 1;		! One less character in string

	    IF .CH EQL RINTES
	    THEN
		BEGIN					! RUNOFF escape sequence

		CH = CH$RCHAR_A (USER_SORT_PTR);
		CH$RCHAR_A (USER_SORT_PTR);
		USER_SORT_LEN = .USER_SORT_LEN - 2;

		IF .CH EQL %C'J' THEN EXITLOOP;		! Subindex sequence signals end of string

		SORT_LEN = .SORT_LEN + 3;		! 3 more characters in sort string
		END
	    ELSE
		SORT_LEN = .SORT_LEN + 1;		! 1 more character in sort string

	    END;

	RETURN;
	END;

    LEN = .I_LEN;
    PTR = .I_PTR;

    SELECTONE .CMDBLK [NDX$H_NONALPHA] OF
    SET

    [IGNORE]:
	BEGIN
	!
	! Ignore leading non-alphas
	!
	LOCAL
	    SCAN_PTR,
	    FIRST_PTR,
	    FIRST_LEN;

	FIRST_PTR = .PTR;
	FIRST_LEN = 0;
	SCAN_PTR = .PTR;

	DECR I FROM .LEN TO 1 DO
	    BEGIN
	    LOCAL
		CH;

	    CH = CH$RCHAR_A (SCAN_PTR);

	    IF .CH EQL RINTES
	    THEN
		BEGIN
		!
		! RUNOFF escape sequence
		!
		IF .FIRST_LEN EQL 0
		THEN
		    BEGIN
		    !
		    ! Save pointer and length if first escape sequence seen
		    !
		    FIRST_LEN = .I;
		    FIRST_PTR = CH$PLUS (.SCAN_PTR, -1);
		    END;

		CH$RCHAR_A (SCAN_PTR);		! Skip rest of sequence
		CH$RCHAR_A (SCAN_PTR);
		I = .I - 2;			! Decrement length remaining
		END
	    ELSE
		BEGIN
		IF LETTER (.CH)
		THEN
		    BEGIN
		    !
		    ! Alphabetic character
		    !
		    IF .FIRST_LEN EQL 0
		    THEN
			BEGIN
			!
			! No RUNOFF escape sequence was seen.
			! Save pointer and length.
			!
			FIRST_LEN = .I;
			FIRST_PTR = CH$PLUS (.SCAN_PTR, -1);
			END;

		    EXITLOOP;
		    END
		ELSE
		    FIRST_LEN = 0;
		END;
	    END;

	IF .FIRST_LEN NEQ 0
	THEN
	    BEGIN
	    !
	    ! Found an alphabetic sequence
	    !
	    LEN = .FIRST_LEN;
	    PTR = .FIRST_PTR;
	    END;
	END;

    [AFTER]:
	BEGIN
	!
	! Put leading nonalphas after
	!
	IF .LEVEL NEQ 0
	THEN
	    BEGIN
	    !
	    ! Build a sort string for all but top level entries.
	    ! Top level entries are sorted after by examining the
	    ! nonalpha bucket last.
	    !
	    LOCAL
		SCAN_PTR;
	    
	    SCAN_PTR = .PTR;

	    INCR I FROM 1 TO .LEN DO
		BEGIN
		LOCAL
		    CH;

		CH = CH$RCHAR_A (SCAN_PTR);

		IF .CH EQL RINTES
		THEN
		    BEGIN
		    !
		    ! RUNOFF escape sequence - skip over it
		    !
		    CH$RCHAR_A (SCAN_PTR);
		    CH$RCHAR_A (SCAN_PTR);
		    I = .I + 2;
		    END
		ELSE
		    BEGIN
		    !
		    ! Have first character
		    !
		    IF NOT LETTER (.CH)
		    THEN
			BEGIN
			!
			! Leading nonalpha.
			! Make it sort after by building a sort string
			! which starts with 'zzzz'
			!
			CH$COPY (4, CH$PTR (UPLIT ('zzzz')), .LEN, .PTR, %C' ', .LEN + 4, CH$PTR (SORT_STR));

			LEN = .LEN + 4;
			PTR = CH$PTR (SORT_STR);
			END;

		    EXITLOOP;
		    END;
		END;
	    END;
	END;

    [BEFORE]:
	!
	! Sort nonalphas before.
	! Since this is the default, no action is required.
	!
	;

    TES;

    IF .LEN NEQ .I_LEN
    THEN
	BEGIN
	!
	! A sort string has been built.
	! Save pointer and length of resulting string
	!
	SORT_LEN = .LEN;
	SORT_PTR = .PTR;
	END;

    IF NOT .CMDBLK [NDX$V_WORD_SORT]
    THEN
	BEGIN
	!
	! Letter by letter sort - remove whitespace.
	!
	LOCAL
	    RINTES_PTR,
	    RINTES_LEN,
	    SCAN_PTR;

	RINTES_PTR = 0;
	RINTES_LEN = 0;
	SCAN_PTR = .PTR;

	SORT_PTR = CH$PTR (SORT_STR);
	SORT_LEN = 0;

	INCR I FROM 1 TO .LEN DO
	    BEGIN
	    LOCAL
		CH;

	    CH = CH$RCHAR_A (SCAN_PTR);

	    IF .CH EQL RINTES
	    THEN
		BEGIN
		!
		! RUNOFF escape sequence.
		!
		IF .RINTES_LEN EQL 0
		THEN
		    BEGIN
		    !
		    ! Not a multiple sequence.
		    ! Save pointer to beginning of output sequence.
		    !
		    RINTES_LEN = .SORT_LEN;
		    RINTES_PTR = .SORT_PTR;
		    END;

		CH$WCHAR_A (.CH, SORT_PTR);
		CH$WCHAR_A (CH$RCHAR_A (SCAN_PTR), SORT_PTR);
		CH$WCHAR_A (CH$RCHAR_A (SCAN_PTR), SORT_PTR);
		SORT_LEN = .SORT_LEN + 3;
		I = .I + 2;
		END
	    ELSE
		BEGIN
		IF (.CH EQL %C' ') OR (.CH EQL TAB) OR (.CH EQL %C'-')
		THEN
		    BEGIN
		    !
		    ! Whitespace.
		    !
		    IF .RINTES_PTR NEQ 0
		    THEN
			BEGIN
			!
			! Whitespace was emphasized. 
			! Remove emphasis from output string
			!
			SORT_PTR = .RINTES_PTR;
			SORT_LEN = .RINTES_LEN;

			RINTES_PTR = 0;
			RINTES_LEN = 0;
			END;
		    END
		ELSE
		    BEGIN
		    !
		    ! Some other character
		    !
		    CH$WCHAR_A (.CH, SORT_PTR);
		    SORT_LEN = .SORT_LEN + 1;

		    RINTES_PTR = 0;
		    RINTES_LEN = 0;
		    END;
		END;
	    END;

	SORT_PTR = CH$PTR (SORT_STR);
	END;

    END;

%SBTTL 'FIND_POS -- Locate position for insertion'

ROUTINE FIND_POS (STG_PTR, STG_LEN, SUB_CNT, LAST, XTN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Locate the proper position in the master list for placing a new
!	item.  Also make sure the item is not a complete duplicate of an
!	existing entry.
!
! FORMAL PARAMETERS:
!
!	STG_PTR	- Address of input text.
!	STG_LEN	- Length of input text.
!	SUB_CNT - Sub-index level (0 to n)
!	LAST	- TRUE if this is the last call to FIND_POS for this entry
!	XTN	- Transaction number if LAST = TRUE
!
! IMPLICIT INPUTS:
!
!	CELL		- Characteristics of current position in list
!	SORT_LEN	- Length of sort string if any
!	SORT_PTR	- Pointer to sort string if any
!
! IMPLICIT OUTPUTS:
!
!	CELL		- set up for insertion
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	LINE_PTR,
	LINE_LEN;

    IF .SORT_LEN NEQ 0
    THEN
	BEGIN
	!
	! Have a sort string to use
	!
	LINE_PTR = .SORT_PTR;
	LINE_LEN = .SORT_LEN;
	END
    ELSE
	BEGIN
	!
	! no sort string - use entry text
	!
	LINE_PTR = .STG_PTR;
	LINE_LEN = .STG_LEN;
	END;

    !
    ! Skip the bucket positioning for sub-indexes
    !
    IF .SUB_CNT EQL 0
    THEN
	BEGIN
	!
	! The first character that is not a special sequence determines 
	! the bucket number.
	!
	LOCAL
	    BUCKET_NUMBER,
	    SUB_BUCKET;

	BUCKET_NUMBER = FIND_BUCKET (LINE_LEN, LINE_PTR);

	IF  .BUCKET_NUMBER NEQ 0
	THEN 
	    !
	    ! Use the second character in the string to determine the 
	    ! sub-bucket number unless the first character in the string was a
	    ! nonalphabetic.
	    !
	    SUB_BUCKET = FIND_BUCKET (LINE_LEN, LINE_PTR) 
	ELSE
	    !
	    ! Nonalphabetic characters are always sorted using a single bucket
	    ! because the 'squared bucket' algorithm does not work for them.
	    !
	    SUB_BUCKET = 0;

	!
	! Now remember all of the information needed for future use.
	!
	CELL [C$A_HEAD] = BUCKET [.BUCKET_NUMBER, .SUB_BUCKET];
	CELL [C$A_CURR] = .BUCKET [.BUCKET_NUMBER, .SUB_BUCKET];
	CELL [C$A_PREV] = 0;
	CELL [C$V_IDNS] = FALSE;
	END;

    !
    ! Now find the proper position for insertion
    !
    REPEAT
	BEGIN

	LOCAL
	    CUR_CELL : REF $XE_BLOCK;

	!
	! Point to data in storage
	!
	CUR_CELL = .CELL [C$A_CURR];

	!
	! If this is the last item, return current position
	!
	IF (.CUR_CELL[XE$A_NEXT] EQL 0) AND (.SUB_CNT EQL .CUR_CELL [XE$H_SUBC]) THEN RETURN;

	!
	! See if we are at the correct position for an insertion
	!
	IF .SUB_CNT GTR .CUR_CELL [XE$H_SUBC] THEN RETURN;

	IF ENTRY_CMP (.STG_PTR, .STG_LEN, .LAST, .XTN, .SUB_CNT) THEN RETURN;

	!
	! Make sure we still point at original data
	!
	CUR_CELL = .CELL [C$A_CURR];

	!
	! Advance to next location
	!
	CELL [C$A_CURR] = .CUR_CELL [XE$A_NEXT];
	END;

    END;			!End of FIND_POS

%SBTTL 'FIND_BUCKET -- Get bucket number'
ROUTINE FIND_BUCKET (LEN_A, PTR_A) =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to determine the bucket number of the first
!	character in a string which is not a special sequence
!
! FORMAL PARAMETERS:
!
!	LEN_A	- Address of a variable which contains the length of the string
!		  The value is updated to reflect the number of unscanned
!		  characters in the string.
!	PTR_A	- Address of a variable which contains a CH$PTR to the string
!		  The value is updated to point to the first unscanned 
!		  character in the string.
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns a value from 0 to 26 indicating the bucket number.
!	(0 = nonalpha, 1 = A, ... 26 = Z)
!
! SIDE EFFECTS:
!
!	None
!--
    BEGIN

    LOCAL
	CH;

    BIND
	LEN = .LEN_A,
	PTR = .PTR_A;

    CH = 0;
    
    WHILE .LEN GTR 0 DO
	BEGIN
	!
	! Get the first character that is not a special sequence
	!
	CH = CH$RCHAR_A (PTR);
	LEN = .LEN - 1;

	IF .CH EQL RINTES
	THEN
	    BEGIN
	    !
	    ! Skip special sequence
	    !
	    CH$RCHAR_A (PTR);
	    CH$RCHAR_A (PTR);
	    LEN = .LEN - 2;
	    END
	ELSE
	    BEGIN
	    !
	    ! Some other character
	    !
	    IF LOWER_LETTER (.CH) THEN CH = UPPER_CASE (.CH);

	    EXITLOOP;
	    END;

	END;

    !
    ! Using the first non-special character, figure out which index
    ! bucket is the right one to look into. Buckets 1 through 26 are
    ! alphabetic, and all other characters belong in bucket 0.
    !
    RETURN (IF (.CH GEQ %C'A') AND (.CH LEQ %C'Z') THEN (.CH - %C'A' + 1) ELSE 0);
    END;

%SBTTL 'INSERT_INX -- Insert index item into list'

ROUTINE INSERT_INX (STRING, LNGTH, SUB_CNT, XTN, BAR, ENT_LEN, ENT_PTR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Insert an index item into the index list.
!
! FORMAL PARAMETERS:
!
!	STRING	- CH$PTR to the string associated with the item.
!		  (zero is allowed).
!	LNGTH	- Length of the passed string.
!	SUB_CNT	- Sub-index level of item (0 to n)
!	XTN	- Transaction number of the page associated with this
!		  index item.
!	BAR	- Change bar flag
!	ENT_LEN	- Length of whole index entry
!	ENT_PTR - CH$PTR to whole index entry string
!
! IMPLICIT INPUTS:
!
!	CELL	- Information table about current position in list.
!	BOOKID	- Master index book ident string address
!	SORT_LEN- Length of sort string if any
!	SORT_PTR- Pointer to sort string if any
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    LOCAL
	XMREF : $XM_BLOCK;

    !
    ! Build book reference entry
    !
    XMREF [XM$A_LINK] = 0;
    XMREF [XM$A_BOOK] = .BOOKID;

    !
    ! Check for existing entry
    !
    IF .CELL [C$V_IDNS]
    THEN
	BEGIN
	!
	! Identical string
	!
	LOCAL
	    XE_TEMP : REF $XE_BLOCK,
	    XM_TEMP : REF $XM_BLOCK;

	!
	! Get current cell
	!
	XE_TEMP = .CELL [C$A_CURR];

	!
	! Get first entry in book list chain
	!
	XM_TEMP = .XE_TEMP [XE$A_BOOK_LIST];

	REPEAT
	    BEGIN
	    !
	    ! Walk book list chain until we either find a reference to
	    ! the current book or until the end of chain
	    !
	    IF .XM_TEMP [XM$A_BOOK] EQL .BOOKID THEN EXITLOOP;

	    IF .XM_TEMP [XM$A_LINK] EQL 0
	    THEN
		BEGIN
		!
		! End of chain - insert a new book reference
		!
		XM_TEMP [XM$A_LINK] = SAVDAT (XMREF, DS_XM_ENTRY, XM$K_LENGTH);
		EXITLOOP;
		END
	    ELSE
		XM_TEMP = .XM_TEMP [XM$A_LINK];
	    END;

	IF .XTN NEQ 0
	THEN
	    BEGIN
	    !
	    ! There is a page pointer, so attach it.
	    !
	    LOCAL
		XX_TEMP : REF $XX_BLOCK;
	
	    IF .XE_TEMP [XE$A_REF] NEQ 0
	    THEN	
		BEGIN
		!
		! Entry has references
		!
		LOCAL
		    RANGE_BOOK,
		    RANGE_ACTIVE;

		RANGE_ACTIVE = FALSE;		! Have not seen a BEGIN yet
		RANGE_BOOK = 0;
		XX_TEMP = .XE_TEMP [XE$A_REF];	! Get the start of the chain
	
		REPEAT
		    BEGIN
		    !
		    ! Find the chain end
		    !
		    XX_TEMP = .XX_TEMP;
	
		    IF .XX_TEMP [XX$V_BEGIN]
		    THEN 
			BEGIN
			!
			! Beginning of page range
			! 
			RANGE_ACTIVE = TRUE;
			RANGE_BOOK = .XX_TEMP [XX$A_BOOK];	! Save book identifier.
			END;

		    IF .XX_TEMP [XX$V_END]
		    OR .XX_TEMP [XX$A_BOOK] NEQ .RANGE_BOOK
		    THEN
			!
			! A range ends when either an END is encountered
			! or when we switch books
			!
			RANGE_ACTIVE = FALSE;

		    !
		    ! Check for end of chain
		    !
		    IF  .XX_TEMP [XX$A_LINK] NEQ 0
		    THEN
			XX_TEMP = .XX_TEMP [XX$A_LINK]
		    ELSE
			EXITLOOP;
	
		    END;
	
		IF .RANGE_ACTIVE
		THEN
		    BEGIN
		    !
		    ! Saw a BEGIN with no END
		    !
		    IF .XPLBLK [XPL$V_VALID] AND .XPLBLK [XPL$V_BEGIN]
		    THEN
			BEGIN
			!
			! Have a BEGIN inside a BEGIN
			!
%IF %BLISS (BLISS32)
%THEN							! Signal errors for BLISS32

			SIGNAL (INDEX$_DUPBEGIN);

%ELSE							! Use $XPO_PUT_MSG otherwise

			$XPO_PUT_MSG (SEVERITY = WARNING,
			    STRING = 'duplicate .XPLUS (BEGIN) -- inserted as .XPLUS ()');

%FI

			DMPENT (.ENT_LEN, .ENT_PTR);
			XPLBLK [XPL$V_BEGIN] = FALSE;
			END;
		    END
		ELSE
		    !
		    ! Have no unmatched BEGIN's
		    !
		    IF .XPLBLK [XPL$V_VALID] AND .XPLBLK [XPL$V_END]
		    THEN
			BEGIN
			!
			! Have an END with no BEGIN
			!
%IF %BLISS (BLISS32)
%THEN							! Signal errors for BLISS32

			SIGNAL (INDEX$_NOBEGIN);

%ELSE							! Use $XPO_PUT_MSG otherwise

			$XPO_PUT_MSG (SEVERITY = WARNING,
			    STRING = '.XPLUS (END) with no .XPLUS (BEGIN) -- inserted as .XPLUS ()');

%FI

			DMPENT (.ENT_LEN, .ENT_PTR);
			XPLBLK [XPL$V_END] = FALSE;
			END;

		!
		! Add new pointer to entry and update it in memory
		!
		XX_TEMP [XX$A_LINK] = INSERT_REF (.XTN);
		END
	    ELSE
		BEGIN
		!
		! Entry has no references.
		!
		IF .XPLBLK [XPL$V_VALID] AND .XPLBLK [XPL$V_END]
		THEN
		    BEGIN
		    !
		    ! Have an END with no BEGIN
		    !
%IF %BLISS (BLISS32)
%THEN							! Signal errors for BLISS32

		    SIGNAL (INDEX$_NOBEGIN);

%ELSE							! Use $XPO_PUT_MSG otherwise

		    $XPO_PUT_MSG (SEVERITY = WARNING,
			STRING = '.XPLUS (END) with no .XPLUS (BEGIN) -- inserted as .XPLUS ()');

%FI

		    DMPENT (.ENT_LEN, .ENT_PTR);
		    XPLBLK [XPL$V_END] = FALSE;
		    END;

		!
		! Point entry to reference and update it in memory.
		!
		XE_TEMP [XE$A_REF] = INSERT_REF (.XTN);
		END;
	
	    END;
	END
    ELSE
	BEGIN
	!
	! String is different, insert new string
	!
	LOCAL
	    REF_PTR,
	    LAST_CELL,
	    NEXT_CELL,
	    TEMP      : REF $XE_BLOCK,
	    TEMP1,
	    TEMP_CELL : $XE_BLOCK;

	!
	! Get links to chain
	!
	TEMP = .CELL [C$A_CURR];

	IF .SUB_CNT EQL .TEMP [XE$H_SUBC]
	THEN
	    BEGIN
	    NEXT_CELL = .CELL [C$A_CURR];
	    LAST_CELL = .TEMP [XE$A_PREV]
	    END
	ELSE
	    BEGIN
	    NEXT_CELL = 0;
	    LAST_CELL = .CELL [C$A_CURR]
	    END;

	IF .XTN NEQ 0
	THEN
	    BEGIN
	    !
	    ! Have a page reference
	    !
	    IF .XPLBLK [XPL$V_VALID] AND .XPLBLK [XPL$V_END]
	    THEN
		BEGIN
		!
		! Have an END with no BEGIN
		!
%IF %BLISS (BLISS32)
%THEN							! Signal errors for BLISS32

		SIGNAL (INDEX$_NOBEGIN);

%ELSE							! Use $XPO_PUT_MSG otherwise

		$XPO_PUT_MSG (SEVERITY = WARNING,
		    STRING = '.XPLUS (END) with no .XPLUS (BEGIN) -- inserted as .XPLUS ()');

%FI

		DMPENT (.ENT_LEN, .ENT_PTR);
		XPLBLK [XPL$V_END] = FALSE;
		END;

	    REF_PTR = INSERT_REF (.XTN);
	    END
	ELSE
	    REF_PTR = 0;
	    
	!
	! Start to set up new entry
	!
	TEMP_CELL [XE$A_PREV] = .LAST_CELL;
	TEMP_CELL [XE$A_NEXT] = .NEXT_CELL;
	TEMP_CELL [XE$H_SUBC] = .SUB_CNT;
	TEMP_CELL [XE$V_BARS] = .BAR;
	TEMP_CELL [XE$A_REF] = .REF_PTR;
	TEMP_CELL [XE$A_SUBX] = 0;
	TEMP_CELL [XE$A_BOOK_LIST] = SAVDAT (XMREF, DS_XM_ENTRY, XM$K_LENGTH);

	!
	! Remember text string 
	!
	IF .STRING NEQ 0
	THEN
	    TEMP_CELL [XE$A_TEXT] = SAVDAT (.STRING, DS_X_STRING, .LNGTH)
	ELSE
	    TEMP_CELL [XE$A_TEXT] = 0;

	!
	! Save sort string if there is one
	!
	IF .SORT_LEN NEQ 0
	THEN
	    TEMP_CELL [XE$A_SORT_AS] = SAVDAT (.SORT_PTR, DS_X_STRING, .SORT_LEN)
	ELSE
	    TEMP_CELL [XE$A_SORT_AS] = 0;

	!
	! Now put away the entry proper
	!
	TEMP1 = SAVDAT (TEMP_CELL, DS_X_ENTRY, XE$K_LENGTH);

	!
	! Link to previous entry
	!
	IF .LAST_CELL NEQ 0
	THEN
	    BEGIN
	    TEMP = .LAST_CELL;

	    IF .SUB_CNT NEQ .TEMP [XE$H_SUBC]
	    THEN
		TEMP [XE$A_SUBX] = .TEMP1
	    ELSE
		TEMP [XE$A_NEXT] = .TEMP1;

	    END
	ELSE
	    !
	    ! Head of List
	    !
	    .CELL [C$A_HEAD] = .TEMP1;

	!
	! Link to the following cell
	!
	IF .NEXT_CELL NEQ 0
	THEN
	    BEGIN
	    TEMP = .NEXT_CELL;
	    TEMP [XE$A_PREV] = .TEMP1;
	    END;

	!
	! Remember where we left off
	!
	CELL [C$A_CURR] = .TEMP1;
	END

    END;			!End of INSERT_INX

%SBTTL 'INSERT_REF -- Insert page reference into list'
ROUTINE INSERT_REF (XTN) =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine inserts a page reference into the indexing pool
!
! FORMAL PARAMETERS:
!
!	XTN - Transaction number
!
! IMPLICIT INPUTS:
!
!	XPLBLK - Extended indexing attributes block
!	BOOKID - Master index book ident string address
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns the address of the saved page reference
!
! SIDE EFFECTS:
!
!	None
!--
    BEGIN

    LOCAL
	REF_CELL : $XX_BLOCK;

    REF_CELL [XX$A_LINK] = 0;
    REF_CELL [XX$A_BOOK] = .BOOKID;
    REF_CELL [XX$H_PAGE] = .XTN;
    REF_CELL [XX$V_FLAGS] = 0;
    REF_CELL [XX$A_APPEND] = 0;

    IF .XPLBLK [XPL$V_VALID]
    THEN
	BEGIN
	!
	! Have .XPLUS information
	!
	LOCAL
	    APPEND : REF $STR_DESCRIPTOR ();

	REF_CELL [XX$V_BOLD] = .XPLBLK [XPL$V_BOLD];
	REF_CELL [XX$V_UNDERLINE] = .XPLBLK [XPL$V_UNDERLINE];
	REF_CELL [XX$V_BEGIN] = .XPLBLK [XPL$V_BEGIN];
	REF_CELL [XX$V_END] = .XPLBLK [XPL$V_END];

	APPEND = XPLBLK [XPL$T_APPEND];
	IF .APPEND [STR$H_LENGTH] NEQ 0
	THEN
	    !
	    ! Have an append string
	    !
	    REF_CELL [XX$A_APPEND] = SAVDAT (.APPEND [STR$A_POINTER], DS_X_STRING, .APPEND [STR$H_LENGTH]);

	END;

    RETURN SAVDAT (REF_CELL, DS_XX_ENTRY, XX$K_LENGTH);
    END;

%SBTTL 'ENTRY_CMP -- Compare new entry with current entry'
ROUTINE ENTRY_CMP (NEW_PTR, NEW_LEN, LAST, XTN, LEVEL) =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine compares the new entry with the current entry.
!
!	For subindex entries (i.e. LEVEL NEQ 0) performs the following checks:
!
!	    If LAST is TRUE, checks to see if new entry is either
!	    a .ENTRY or .YPLUS. 
!
!	    If the new entry is a .Y or .YP, it checks to see if the
!	    current entry is either a .X (.XP) or if the current entry
!	    has subentries. If so, a value of TRUE is returned indicating
!	    that the new entry should be inserted before the current entry.
!
!	    If LAST is FALSE or the new entry is not a .Y (.YP) and the
!	    current entry is a .Y (.YP), a value of FALSE is returned
!	    indicating that the new entry should be inserted after the
!	    current entry.
!
!	Otherwise, calls STRG_CMP to see if the new entry should be
!	inserted here. If so, calls STRG_CMP again to see if the
!	new entry is identical to the current entry.
!
! FORMAL PARAMETERS:
!
!	NEW_PTR - Pointer to new entry text
!	NEW_LEN - Length of new entry
!	LAST	- TRUE if XTN should be compared to transaction number
!		  associated with CELL.
!	XTN	- Transaction number of new entry if LAST is TRUE
!	LEVEL	- Subindex level (0 to n)
!
! IMPLICIT INPUTS:
!
!	CELL	- contains pointers to the list item for comparison.
!	SORT_LEN- Length of sort string if any
!	SORT_PTR- pointer to sort string if any
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE if new entry should be inserted before the current entry,
!	FALSE otherwise.
!
! SIDE EFFECTS:
!
!	None
!--
    BEGIN
    LOCAL
	CEPTR : REF $XE_BLOCK,
	N_PTR,
	N_LEN,
	C_VEC : REF VECTOR,
	C_PTR,
	C_LEN;

    CEPTR = .CELL [C$A_CURR];

    IF .LEVEL NEQ 0
    THEN
	BEGIN
	!
	! Subindex entry.
	! Check to see if we should float a .Y
	!
	IF .LAST AND (.XTN EQL 0)			! If at bottom of new entry
	THEN						! and new entry is a .Y
	    BEGIN
	    IF (.CEPTR [XE$A_REF] NEQ 0) OR (.CEPTR [XE$A_SUBX] NEQ 0)
	    THEN
		!
		! Current entry is a .X or .XP or has subentries.
		!
		RETURN TRUE;				! New entry is before current entry

	    END
	ELSE
	    BEGIN
	    !
	    ! Not at bottom of entry or not .Y
	    !
	    IF (.CEPTR [XE$A_REF] EQL 0) AND (.CEPTR [XE$A_SUBX] EQL 0)
	    THEN
		!
		! Current entry is a .Y or .YP
		!
		RETURN FALSE;				! New entry is after current entry

	    END;
	END;

    IF .SORT_LEN NEQ 0
    THEN
	BEGIN
	!
	! New entry has a sort string. Use it.
	!
	N_PTR = .SORT_PTR;
	N_LEN = .SORT_LEN;
	END
    ELSE
	BEGIN
	!
	! no sort string is available. use text.
	!
	N_PTR = .NEW_PTR;
	N_LEN = .NEW_LEN;
	END;

    IF .CEPTR [XE$A_SORT_AS] NEQ 0
    THEN
	!
	! Current entry has a sort string. Use it.
	!
	C_VEC = .CEPTR [XE$A_SORT_AS]
    ELSE
	!
	! Current entry has no sort string. Use text of entry.
	!
	C_VEC = .CEPTR [XE$A_TEXT];

    !
    ! Get number of characters in internal sort string
    ! Length is stored as the first fullword of the string
    !
    C_LEN = .C_VEC [0];
    C_PTR = CH$PTR (C_VEC [1]);

    !
    ! Check to see if this is the proper insertion point
    !
    IF STRG_CMP (.N_LEN, .N_PTR, .C_LEN, .C_PTR)
    THEN
	BEGIN
	!
	! This is almost the spot. 
	! Check for identical sort strings.
	!
	IF .CELL [C$V_IDNS]
	THEN
	    BEGIN
	    !
	    ! Sort strings were identical.
	    ! Compare text strings to determine positioning.
	    !
	    CELL [C$V_IDNS] = FALSE;

	    C_VEC = .CEPTR [XE$A_TEXT];
	    C_LEN = .C_VEC [0];
	    C_PTR = CH$PTR (C_VEC [1]);

	    RETURN STRG_CMP (.NEW_LEN, .NEW_PTR, .C_LEN, .C_PTR);
	    END
	ELSE
	    !
	    ! Sort strings different.
	    ! This is the correct position for insertion.
	    !
	    RETURN TRUE;
	END
    ELSE
	RETURN FALSE;

    END;

%SBTTL 'STRG_CMP -- Compare two strings'

ROUTINE STRG_CMP (S1_LEN, S1_PTR, S2_LEN, S2_PTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to compare two strings.
!	It returns TRUE if string 1 should be before string 2.
!
!	It sets CELL [C$V_IDNS] if the strings are identical.
!
! FORMAL PARAMETERS:
!
!	S1_LEN - Length of string 1
!	S1_PTR - Pointer to string 1
!	S2_LEN - Length of string 2
!	S2_PTR - Pointer to string 2
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	CELL [C$V_IDNS] - set to true if strings are identical
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE	- String 1 is before string 2
!	FALSE	- Otherwise
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	CASECMP,
	CHARCMP,
	COLUMN,
	EMPHCMP,
	ICASE,
	IEMPH,
	OLDCASE,
	OLDEMPH,
	PTR_1,
	REM_1,
	PTR_2,
	REM_2;

    PTR_1 = .S1_PTR;
    REM_1 = .S1_LEN;
    PTR_2 = .S2_PTR;
    REM_2 = .S2_LEN;

    ICASE = 0;					! No differences in case yet
    IEMPH = 0;					! No differences in emphasis yet
    OLDCASE = 0;				! No differences in case yet
    OLDEMPH = 0;				! No differences in emphasis yet
    COLUMN = 0;					! No print positions scanned yet.

    !
    ! Loop until done with both strings
    !
    REPEAT
	BEGIN
	!
	! Update count of print columns, so positions of case and emphasis
	! differences can be remembered.
	!
	COLUMN = .COLUMN + 1;

	!
	! Make sure neither string has run out.  If one has, this is
	! the place for insertion.
	!
	IF (.REM_2 LEQ 0) OR (.REM_1 LEQ 0)
	THEN
	    BEGIN
	    !
	    ! Check for exact string before leaving
	    !
	    IF (.REM_2 LEQ 0) AND (.REM_1 LEQ 0)
	    THEN
		!
		! Both strings have run out.  They're identical if
		! there are no case or emphasis differences.
		!
		CELL [C$V_IDNS] = ((.ICASE EQL 0) AND (.IEMPH EQL 0))
	    ELSE
		!
		! Only one string has run out.  The longer of the two strings
		! is "greater" than the shorter string, or conversely, the
		! one that's run out is the "lesser" of the two.  Return TRUE
		! if the input string is the "lesser" of the two.
		!
		RETURN (.REM_1 LEQ 0);

	    IF .OLDEMPH NEQ 0 THEN RETURN (.OLDEMPH EQL 1);

	    IF .OLDCASE NEQ 0 THEN RETURN (.OLDCASE EQL -1);

	    RETURN TRUE;
	    END;

	CHRCMP (PTR_1, PTR_2, CASECMP, CHARCMP, EMPHCMP, REM_1, REM_2);

	IF .CHARCMP NEQ 0
	THEN
	    RETURN (.CHARCMP EQL -1)
	ELSE
	    BEGIN
	    !
	    ! Remember differences in the string so they can be
	    ! applied if the string runs out.
	    !
	    ! If there is a difference of cases, the very first place where
	    ! case differs is the significant case difference.  All other
	    ! positions are secondary.
	    !
	    IF (.ICASE EQL 0) AND (.CASECMP NEQ 0)
	    THEN
		BEGIN
		!
		! Remember column position where difference occurred
		! Remember what the case difference was.
		!
		ICASE = .COLUMN;
		OLDCASE = .CASECMP;
		END;

	    !
	    ! If there is a difference in emphasis, the very first place where
	    ! emphasis differs is the significant emphasis difference.
	    ! All other positions are secondary.
	    !
	    IF (.IEMPH EQL 0) AND (.EMPHCMP NEQ 0)
	    THEN
		BEGIN
		!
		! Remember column position where difference occurred.
		! Remember what the difference in emphasis was.
		!
		IEMPH = .COLUMN;
		OLDEMPH = .EMPHCMP;
		END;
	    END;

	END

    END;			!End of STRG_CMP

%SBTTL 'CHRCMP -- Compare two characters in internal format'

ROUTINE CHRCMP (XA, XB, CASECMP, CHARCMP, EMPHCMP, REMAINDER_A, REMAINDER_B) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	CHRCMP compares two characters in RUNOFF internal format (i.e,
!	as generated by SCANT). 
!
!	Basically, the comparison is done lexically, with the change
!	that the characters which are not letters are lexically smaller
!	than any letters. 
!
!	It takes overstriking, underlining, and bolding into account
!	when doing the comparison. If two characters are identical
!	except for their emphasis, the comparison is such that the
!	character with the most emphasis is lexically smallest. 
!
!	Bolding is considered to emphasize more than underlining, but
!	less than both underlining and bolding together. Underlining
!	emphasizes more than overstriking; but note that the
!	overstriking sequence is NOT taken into account in the
!	comparison. Upper case emphasizes more than lower case. Emphasis
!	is always less significant than "naked character" differences. 
!
! FORMAL PARAMETERS:
!
!	XA and XB are CH$PTRs to the characters to be compared.
!
!	CHARCMP - Returned as if computed by subtracting the internal
!		  representations of the characters, except that letters
!		  are "greater" than all other characters.
!
!	CASECMP - Returned as if computed by subtracting the
!		  "upper/lower caseness" of the characters.  Upper case
!		  has "value" 0, lower case 1.
!		  By definition, characters other than letters are in upper case.
!
!	EMPHCMP - Returned as SIGN(emphasis of A - emphasis of B) where
!		  each emphasis type requires one bit.  Overstriking has 
!		  the value 1, underlining has the value 2 and bolding 
!		  the value 4.
!
!	REMAINDER_A - the number of characters scanned in XA is subtracted from it.
!	REMAINDER_B - the number of characters scanned in XB in subtracted from it.
!
! IMPLICIT INPUTS:
!
!	The arrangement of the internal representation is implicit
!	in the algorithm.  Basically it assumes that the "naked"
!	character comes after the escape (=emphasis) sequences.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
! 	The result is returned as if it could be computed by
!	SIGN (.A - .B);
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BIND
	PTR_A = .XA,
	PTR_B = .XB;

    LOCAL
	CA,
	CB,
	RA,
	RB;

    RA = 0;				! Assume no emphasis for character A
    RB = 0;				! Assume no emphasis for character B
    .CASECMP = 0;			! Assume no case difference.
    .CHARCMP = 0;			! Assume characters identical.
    .EMPHCMP = 0;			! Assume no emphasis at all.

    REPEAT
	BEGIN
	CA = CH$RCHAR_A (PTR_A);
	.REMAINDER_A = ..REMAINDER_A - 1;	! Subtract off scanned character

	IF .CA EQL RINTES
	THEN
	    BEGIN
	    !
	    ! Interpret escape sequence.
	    !
	    CA = CH$RCHAR_A (PTR_A);
	    .REMAINDER_A = ..REMAINDER_A - 2;	! Subtract off scanned characters.

	    SELECTONE .CA OF
	    SET

	    [%C'B']:
		!
		! Emphasis value of bolding.
		!
		RA = .RA OR 4;

	    [%C'U']:
		!
		! Emphasis value for underlining.
		!
		RA = .RA OR 2;

	    [%C'O']:
		!
		! Emphasis value for overstriking.
		!
		RA = .RA OR 1;

	    [OTHERWISE]:
		!
		! Non-emphasis value (do nothing)
		!
		;

	    TES;

	    CH$RCHAR_A (PTR_A);
	    END
	ELSE
	    BEGIN

	    IF UPPER_LETTER (.CA)
	    THEN
		CA = LOWER_CASE (.CA)
	    ELSE
		.CASECMP = 1;
	    EXITLOOP
	    END
	END;

    !
    ! Scan second character.
    !
    REPEAT
	BEGIN
	CB = CH$RCHAR_A (PTR_B);
	.REMAINDER_B = ..REMAINDER_B - 1;	! Subtract off scanned character

	IF .CB EQL RINTES
	THEN
	    BEGIN
	    !
	    ! Interpret escape sequence.
	    !
	    CB = CH$RCHAR_A (PTR_B);
	    .REMAINDER_B = ..REMAINDER_B - 2;	! Subtract off scanned characters
	    SELECTONE .CB OF
	    SET

	    [%C'B']:
		!
		! Emphasis value for bolding.
		!
		RB = .RB OR 4;

	    [%C'U']:
		!
		! Emphasis value for underlining
		!
		RB = .RB OR 2;

	    [%C'O']:
		!
		! Emphasis value for overstriking
		!
		RB = .RB OR 1;

	    [OTHERWISE]:
		!
		! Non-emphasis value (do nothing)
		!
		;

	    TES;

	    CH$RCHAR_A (PTR_B);
	    END
	ELSE
	    BEGIN

	    IF UPPER_LETTER (.CB)
	    THEN
		CB = LOWER_CASE (.CB)
	    ELSE
		.CASECMP = ..CASECMP - 1;
	    EXITLOOP
	    END
	END;

    !
    ! At this point, the "naked" characters are in CA and CB.
    ! Decoded emphasis escape sequences are in RA and RB.
    !
    ! "Subtract" emphasis to get relationship.
    !
    .EMPHCMP = SIGN (.RA - .RB);

    !
    ! Compare the "naked" part of the characters and
    ! return the relationship.
    !
    IF LOWER_LETTER (.CA)
    THEN				! First character is lower case
	IF LOWER_LETTER (.CB)
	THEN				! Second character is lower case
	    .CHARCMP = SIGN (.CA - .CB)	! return relationship between characters
	ELSE				! Second character is upper case
	    .CHARCMP = 1		! hence second character is "largest".

    ELSE				! First character is upper case
	IF LOWER_LETTER (.CB)
	THEN				! Second character is lower case
	    .CHARCMP = -1		! hence first character is "largest"
	ELSE				! Second character is upper case
	    .CHARCMP = SIGN (.CA - .CB);! return relationship between characters

    END;			!End of CHRCMP
END				!End of module
ELUDOM
