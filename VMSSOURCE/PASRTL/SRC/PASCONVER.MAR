	.TITLE	PAS$CONVERT - Pascal-specific conversion routines
	.IDENT	/1-001/			; File: PASCONVER.MAR Edit: SBL1001

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Pascal Language Support
;
; ABSTRACT:
;
;	This module contains all Pascal-specific arithmetic conversion
;	routines.
;
; ENVIRONMENT: Runs at any access mode, AST Reentrant
;
; AUTHOR: Steven B. Lionel, CREATION DATE: 04-NOV-1980
;
; MODIFIED BY:
;
; 1-001	- Original. SBL 4-NOV-1980
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
	$SSDEF			; System error code definitions
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL		; Force all external symbols to be declared
	.EXTRN	LIB$SIGNAL	; Signal non-fatal error
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _PAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	PAS$CONVERT_L_BU - Convert signed longword to unsigned byte
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts a signed longword to an unsigned byte with possible
;	overflow.
;
; CALLING SEQUENCE:
;
;	Result.wbu.v = PAS$CONVERT_L_BU (long.rl.r)
;
; FORMAL PARAMETERS:
;
;	long	- signed longword argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The unsigned byte value of the argument
;
; SIDE EFFECTS:
;
;	SS$_INTOVF - If argument negative or greater than 255.  If continued,
;		     the low 8 bits are stored.
;
;--

	.ENTRY PAS$CONVERT_L_BU, ^M<IV>	; Entry point

	CMPL	@4(AP), #255		; Will value overflow?
	BLEQU	10$			; No
	MOVZWL	#SS$_INTOVF, -(SP)
	CALLS	#1, G^LIB$SIGNAL	; Signal integer overflow
10$:	MOVZBL	@4(AP), R0		; Convert
	RET				; End of routine PAS$CONVERT_L_BU

	.SBTTL	PAS$CONVERT_BU_L = Convert unsigned byte to signed longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts an unsigned byte to a signed longword.
;
; CALLING SEQUENCE:
;
;	Result.wl.v = PAS$CONVERT_BU_L (Byte.rbu.r)
;
; FORMAL PARAMETERS:
;
;	Byte	- Unsigned byte argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument zero-extended to a longword
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY PAS$CONVERT_BU_L, ^M<IV>	; Entry point

	MOVZBL	@4(AP), R0		; Convert
	RET				; End of routine PAS$CONVERT_BU_L

	.SBTTL	PAS$CONVERT_WU_L = Convert unsigned word to signed longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts an unsigned word to a signed longword.
;
; CALLING SEQUENCE:
;
;	Result.wl.v = PAS$CONVERT_WU_L (Word.rwu.r)
;
; FORMAL PARAMETERS:
;
;	Word	- Unsigned word argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument zero-extended to a longword
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY PAS$CONVERT_WU_L, ^M<IV>	; Entry point

	MOVZWL	@4(AP), R0		; Convert
	RET				; End of routine PAS$CONVERT_WU_L

	.SBTTL	PAS$CONVERT_L_L = Convert signed longword to signed longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts a signed longword to a signed longword.
;
; CALLING SEQUENCE:
;
;	Result.wl.v = PAS$CONVERT_L_L (Long.rl.r)
;
; FORMAL PARAMETERS:
;
;	Long	- Signed longword argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument sign-extended to a longword
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY PAS$CONVERT_L_L, ^M<IV>	; Entry point

	MOVL	@4(AP), R0		; Convert
	RET				; End of routine PAS$CONVERT_L_L

	.SBTTL	PAS$CONVERT_LU_L = Convert unsigned longword to signed longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts an unsigned longword to a signed longword with possible
;	overflow.
;
; CALLING SEQUENCE:
;
;	Result.wl.v = PAS$CONVERT_LU_L (Long.rlu.r)
;
; FORMAL PARAMETERS:
;
;	Long	- Unsigned longword argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument zero-extended to a longword
;
; SIDE EFFECTS:
;
;	SS$_INTOVF - If argument is greater than 2**31-1.  If continued,
;		     the argument is stored directly into the result.
;
;--

	.ENTRY PAS$CONVERT_LU_L, ^M<IV>	; Entry point

	MOVL	@4(AP), R0		; Fetch argument
	BGEQ	10$			; If not negative, ok
	MOVZWL	#SS$_INTOVF, -(SP)	; Signal integer overflow
	CALLS	#1, G^LIB$SIGNAL
10$:	RET				; End of routine PAS$CONVERT_LU_L

	.SBTTL	PAS$CONVERT_BOOL_L - Convert boolean to signed longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	Convert boolean to signed longword.
;
; CALLING SEQUENCE:
;
;	Result.wl.v = PAS$CONVERT_BOOL_L (Bool.rv.r)
;
; FORMAL PARAMETERS:
;
;	Bool	- Boolean argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The low bit of the argument zero-extended to a longword.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY PAS$CONVERT_BOOL_L, ^M<IV>	; Entry point

	MOVZBL	@4(AP), R0		; Get low byte
	BICB2	#^XFE, R0		; Convert
	RET				; End of routine PAS$CONVERT_BOOL_L

	.SBTTL	PAS$ROUND_F_LU - Round F_floating to unsigned longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	Round an F_floating to an unsigned longword, without overflow.
;
; CALLING SEQUENCE:
;
;	Result.wlu.v = PAS$ROUND_F_LU (Single.rf.r)
;
; FORMAL PARAMETERS:
;
;	Single	- F_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument rounded to the nearest integer modulus 2**32.
;
; SIDE EFFECTS:
;
;	NONE
;
;--
	.ENTRY	PAS$ROUND_F_LU, ^M<>	; IV must be disabled

	CVTRFL	@4(AP), R0		; Round
	RET				; End of routine PAS$ROUND_F_LU

	.SBTTL	PAS$ROUND_D_LU - Round D_floating to unsigned longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	Round a D_floating to an unsigned longword, without overflow.
;
; CALLING SEQUENCE:
;
;	Result.wlu.v = PAS$ROUND_D_LU (Double.rd.r)
;
; FORMAL PARAMETERS:
;
;	Double	- D_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument rounded to the nearest integer modulus 2**32.
;
; SIDE EFFECTS:
;
;	NONE
;
;--
	.ENTRY	PAS$ROUND_D_LU, ^M<>	; IV must be disabled

	CVTRDL	@4(AP), R0		; Round
	RET				; End of routine PAS$ROUND_D_LU

	.SBTTL	PAS$ROUND_G_LU - Round G_floating to unsigned longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	Round a G_floating to an unsigned longword, without overflow.
;
; CALLING SEQUENCE:
;
;	Result.wlu.v = PAS$ROUND_G_LU (Double.rg.r)
;
; FORMAL PARAMETERS:
;
;	Double	- G_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument rounded to the nearest integer modulus 2**32.
;
; SIDE EFFECTS:
;
;	NONE
;
;--
	.ENTRY	PAS$ROUND_G_LU, ^M<>	; IV must be disabled

	CVTRGL	@4(AP), R0		; Round
	RET				; End of routine PAS$ROUND_G_LU

	.SBTTL	PAS$ROUND_H_LU - Round H_floating to unsigned longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	Round an H_floating to an unsigned longword, without overflow.
;
; CALLING SEQUENCE:
;
;	Result.wlu.v = PAS$ROUND_H_LU (Quad.rh.r)
;
; FORMAL PARAMETERS:
;
;	Quad	- H_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument rounded to the nearest integer modulus 2**32.
;
; SIDE EFFECTS:
;
;	NONE
;
;--
	.ENTRY	PAS$ROUND_H_LU, ^M<>	; IV must be disabled

	CVTRHL	@4(AP), R0		; Round
	RET				; End of routine PAS$ROUND_H_LU

	.SBTTL	PAS$TRUNC_F_LU - Truncate F_floating to unsigned longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	Truncate an F_floating to an unsigned longword, without overflow.
;
; CALLING SEQUENCE:
;
;	Result.wlu.v = PAS$TRUNC_F_LU (Single.rf.r)
;
; FORMAL PARAMETERS:
;
;	Single	- F_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument truncated to the nearest integer modulus 2**32.
;
; SIDE EFFECTS:
;
;	NONE
;
;--
	.ENTRY	PAS$TRUNC_F_LU, ^M<>	; IV must be disabled

	CVTFL	@4(AP), R0		; Truncate
	RET				; End of routine PAS$TRUNC_F_LU

	.SBTTL	PAS$TRUNC_D_LU - Truncate D_floating to unsigned longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	Truncate a D_floating to an unsigned longword, without overflow.
;
; CALLING SEQUENCE:
;
;	Result.wlu.v = PAS$TRUNC_D_LU (Double.rd.r)
;
; FORMAL PARAMETERS:
;
;	Double	- D_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument truncated to the nearest integer modulus 2**32.
;
; SIDE EFFECTS:
;
;	NONE
;
;--
	.ENTRY	PAS$TRUNC_D_LU, ^M<>	; IV must be disabled

	CVTDL	@4(AP), R0		; Truncate
	RET				; End of routine PAS$TRUNC_D_LU

	.SBTTL	PAS$TRUNC_G_LU - TruncateG_floating to unsigned longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	Truncate a G_floating to an unsigned longword, without overflow.
;
; CALLING SEQUENCE:
;
;	Result.wlu.v = PAS$TRUNC_G_LU (Double.rg.r)
;
; FORMAL PARAMETERS:
;
;	Double	- G_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument truncated to the nearest integer modulus 2**32.
;
; SIDE EFFECTS:
;
;	NONE
;
;--
	.ENTRY	PAS$TRUNC_G_LU, ^M<>	; IV must be disabled

	CVTGL	@4(AP), R0		; Truncate
	RET				; End of routine PAS$TRUNC_G_LU

	.SBTTL	PAS$TRUNC_H_LU - Truncate H_floating to unsigned longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	Truncate an H_floating to an unsigned longword, without overflow.
;
; CALLING SEQUENCE:
;
;	Result.wlu.v = PAS$TRUNC_H_LU (Quad.rh.r)
;
; FORMAL PARAMETERS:
;
;	Quad	- H_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument truncated to the nearest integer modulus 2**32.
;
; SIDE EFFECTS:
;
;	NONE
;
;--
	.ENTRY	PAS$TRUNC_H_LU, ^M<>	; IV must be disabled

	CVTHL	@4(AP), R0		; Truncate
	RET				; End of routine PAS$TRUNC_H_LU

	.SBTTL	PAS$CONVERT_LU_F = Convert unsigned longword to F_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts an unsigned longword to an F_floating, rounded.
;
; CALLING SEQUENCE:
;
;	Result.wf.v = PAS$CONVERT_LU_F (Long.rlu.r)
;
; FORMAL PARAMETERS:
;
;	Long	- Unsigned longword argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument rounded to the nearest F_floating value.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY PAS$CONVERT_LU_F, ^M<IV>	; Entry point

	CVTLD	@4(AP), R0		; Convert to D_floating
	BGEQ	10$			; If not negative, don't compensate
	ADDD2	#^X5080, R0		; Add 2**32
10$:	CVTDF	R0, R0			; Round to F_floating
	RET				; End of routine PAS$CONVERT_LU_F

	.SBTTL	PAS$CONVERT_F_F = Convert F_floating to F_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts an F_floating to an F_floating.
;
; CALLING SEQUENCE:
;
;	Result.wf.v = PAS$CONVERT_F_F (Single.rf.r)
;
; FORMAL PARAMETERS:
;
;	Single	- F_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument converted to F_floating
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND - if the argument is a reserved operand
;
;--

	.ENTRY PAS$CONVERT_F_F, ^M<IV>	; Entry point

	MOVF	@4(AP), R0		; Convert
	RET				; End of routine PAS$CONVERT_F_F

	.SBTTL	PAS$CONVERT_H_F = Convert H_floating to F_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts an H_floating to an F_floating.
;
; CALLING SEQUENCE:
;
;	Result.wf.v = PAS$CONVERT_H_F (Quad.rh.r)
;
; FORMAL PARAMETERS:
;
;	Quad	- H_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument converted to F_floating
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND - if the argument is a reserved operand
;
;--

	.ENTRY PAS$CONVERT_H_F, ^M<IV>	; Entry point

	CVTHF	@4(AP), R0		; Convert
	RET				; End of routine PAS$CONVERT_H_F

	.SBTTL	PAS$CONVERT_LU_D = Convert unsigned longword to D_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts an unsigned longword to a D_floating.
;
; CALLING SEQUENCE:
;
;	Result.wd.v = PAS$CONVERT_LU_D (Long.rlu.r)
;
; FORMAL PARAMETERS:
;
;	Long	- Unsigned longword argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument converted to a D_floating value.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY PAS$CONVERT_LU_D, ^M<IV>	; Entry point

	CVTLD	@4(AP), R0		; Convert to D_floating
	BGEQ	10$			; If not negative, don't compensate
	ADDD2	#^X5080, R0		; Add 2**32
10$:	RET				; End of routine PAS$CONVERT_LU_D

	.SBTTL	PAS$CONVERT_D_D = Convert D_floating to D_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts an D_floating to a D_floating.
;
; CALLING SEQUENCE:
;
;	Result.wd.v = PAS$CONVERT_D_D (Double.rd.r)
;
; FORMAL PARAMETERS:
;
;	Double	- D_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument converted to D_floating
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND - if the argument is a reserved operand
;
;--

	.ENTRY PAS$CONVERT_D_D, ^M<IV>	; Entry point

	MOVD	@4(AP), R0		; Convert
	RET				; End of routine PAS$CONVERT_D_D

	.SBTTL	PAS$CONVERT_H_D = Convert H_floating to D_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts an H_floating to a D_floating.
;
; CALLING SEQUENCE:
;
;	Result.wd.v = PAS$CONVERT_H_D (Quad.rh.r)
;
; FORMAL PARAMETERS:
;
;	Quad	- H_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument converted to D_floating
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND - if the argument is a reserved operand
;
;--

	.ENTRY PAS$CONVERT_H_D, ^M<IV>	; Entry point

	CVTHD	@4(AP), R0		; Convert
	RET				; End of routine PAS$CONVERT_H_D

	.SBTTL	PAS$CONVERT_LU_G = Convert unsigned longword to G_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts an unsigned longword to a G_floating.
;
; CALLING SEQUENCE:
;
;	Result.wg.v = PAS$CONVERT_LU_G (Long.rlu.r)
;
; FORMAL PARAMETERS:
;
;	Long	- Unsigned longword argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument converted to a G_floating value.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY PAS$CONVERT_LU_G, ^M<IV>	; Entry point

	CVTLG	@4(AP), R0		; Convert to G_floating
	BGEQ	10$			; If not negative, don't compensate
	ADDG2	#^X4210, R0		; Add 2**32
10$:	RET				; End of routine PAS$CONVERT_LU_G

	.SBTTL	PAS$CONVERT_G_G = Convert G_floating to G_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts a G_floating to a G_floating.
;
; CALLING SEQUENCE:
;
;	Result.wg.v = PAS$CONVERT_G_G (Double.rg.r)
;
; FORMAL PARAMETERS:
;
;	Double	- G_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument converted to G_floating
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND - if the argument is a reserved operand
;
;--

	.ENTRY PAS$CONVERT_G_G, ^M<IV>	; Entry point

	MOVG	@4(AP), R0		; Convert
	RET				; End of routine PAS$CONVERT_G_G

	.SBTTL	PAS$CONVERT_H_G = Convert H_floating to G_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts an H_floating to a G_floating.
;
; CALLING SEQUENCE:
;
;	Result.wg.v = PAS$CONVERT_H_G (Quad.rh.r)
;
; FORMAL PARAMETERS:
;
;	Quad	- H_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The argument converted to G_floating
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND - if the argument is a reserved operand
;
;--

	.ENTRY PAS$CONVERT_H_G, ^M<IV>	; Entry point

	CVTHG	@4(AP), R0		; Convert
	RET				; End of routine PAS$CONVERT_H_G

	.SBTTL	PAS$CONVERT_L_H = Convert signed longword to H_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts a signed longword to an H_floating.
;
; CALLING SEQUENCE:
;
;	CALL PAS$CONVERT_L_H (Result.wh.r, Long.rl.r)
;
; FORMAL PARAMETERS:
;
;	Result	- H_floating result
;	Long	- Signed longword argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY PAS$CONVERT_L_H, ^M<IV>	; Entry point

	CVTLH	@8(AP), @4(AP)		; Convert
	RET				; End of routine PAS$CONVERT_L_H

	.SBTTL	PAS$CONVERT_LU_H = Convert unsigned longword to H_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts an unsigned longword to an H_floating.
;
; CALLING SEQUENCE:
;
;	CALL PAS$CONVERT_LU_H (Result.wh.t, Long.rlu.r)
;
; FORMAL PARAMETERS:
;
;	Result	- H_floating result
;	Long	- Unsigned longword argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY PAS$CONVERT_LU_H, ^M<IV>	; Entry point

	CVTLH	@8(AP), @4(AP)		; Convert to H_floating
	BGEQ	10$			; If not negative, don't compensate
	ADDH2	#^X4021, @4(AP)		; Add 2**32
10$:	RET				; End of routine PAS$CONVERT_LU_H

	.SBTTL	PAS$CONVERT_F_H = Convert F_floating to H_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts an F_floating to an H_floating.
;
; CALLING SEQUENCE:
;
;	CALL PAS$CONVERT_F_H (Result.wh.r, Single.rf.r)
;
; FORMAL PARAMETERS:
;
;	Result	- H_floating result
;	Single	- F_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	NONE
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND - if the argument is a reserved operand
;
;--

	.ENTRY PAS$CONVERT_F_H, ^M<IV>	; Entry point

	CVTFH	@8(AP), @4(AP)		; Convert
	RET				; End of routine PAS$CONVERT_F_H

	.SBTTL	PAS$CONVERT_D_H = Convert D_floating to H_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts a D_floating to an H_floating.
;
; CALLING SEQUENCE:
;
;	CALL PAS$CONVERT_D_H (Result.wh.r, Double.rd.r)
;
; FORMAL PARAMETERS:
;
;	Result	- H_floating result
;	Double	- D_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	NONE
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND - if the argument is a reserved operand
;
;--

	.ENTRY PAS$CONVERT_D_H, ^M<IV>	; Entry point

	CVTDH	@8(AP), @4(AP)		; Convert
	RET				; End of routine PAS$CONVERT_D_H

	.SBTTL	PAS$CONVERT_G_H = Convert G_floating to H_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts a G_floating to an H_floating.
;
; CALLING SEQUENCE:
;
;	CALL PAS$CONVERT_G_H (Result.wh.r, Double.rg.r)
;
; FORMAL PARAMETERS:
;
;	Result	- H_floating result
;	Double	- G_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	NONE
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND - if the argument is a reserved operand
;
;--

	.ENTRY PAS$CONVERT_G_H, ^M<IV>	; Entry point

	CVTGH	@8(AP), @4(AP)		; Convert
	RET				; End of routine PAS$CONVERT_G_H

	.SBTTL	PAS$CONVERT_H_H = Convert H_floating to H_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	Converts an H_floating to an H_floating.
;
; CALLING SEQUENCE:
;
;	CALL PAS$CONVERT_H_H (Result.wh.r, Quad.rh.r)
;
; FORMAL PARAMETERS:
;
;	Result	- H_floating result
;	Quad	- H_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	NONE
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND - if the argument is a reserved operand
;
;--

	.ENTRY PAS$CONVERT_H_H, ^M<IV>	; Entry point

	MOVH	@8(AP), @4(AP)		; Convert
	RET				; End of routine PAS$CONVERT_H_H

	.END				; End of module PAS$CONVERT
