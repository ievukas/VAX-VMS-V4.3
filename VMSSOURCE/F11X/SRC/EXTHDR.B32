MODULE EXTHDR (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine creates an extension file header for the given file
!	header.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  27-Jul-1977  10:15
!
! MODIFIED BY:
!
!	V03-006	CDS0003		Christian D. Saether	14-Aug-1984
!		Modify creation of extension fcbs.
!
!	V03-005	LMP0286		L. Mark Pilant,		26-Jul-1984  13:24
!		Correct a broken CALL offset.
!
!	V03-004	ACG0415		Andrew C. Goldstein,	6-Apr-1984  20:59
!		Set CLF_NOBUILD in FCB initialization, since ACL is
!		already there.
!
!	V03-003	ACG0408		Andrew C. Goldstein,	21-Mar-1984  11:40
!		Make APPLY_RVN and DEFAULT_RVN macros; also fix handling
!		of RVN in back link.
!
!	V03-002	CDS0002		Christian D. Saether	18-Jan-1984
!		Modify interface to DEFAULT_RVN.
!
!	V03-001	CDS0001		Christian D. Saether	30-Dec-1983
!		Use L_NORM linkage and BIND_COMMON macro.
!
!	V02-007	LMP0003		L. Mark Pilant,		11-Dec-1981  14:00
!		Add suppport for cathedral windows.
!
!	V02-006	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:26
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE EXTEND_HEADER (FIB, OLD_HEADER, FCB, NEW_VOLUME, BLOCKS_NEEDED) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine creates an extension file header for the given file
!	header.
!
!
! CALLING SEQUENCE:
!	EXTEND_HEADER (ARG1, ARG2, ARG3, ARG4, ARG5)
!
! INPUT PARAMETERS:
!	ARG1: address of user FIB
!	ARG2: address of present last file header
!	ARG3: address of present last FCB or 0
!	ARG4: if not present, stay on present volume
!	      if present:
!		if non-zero, force switch to given volume
!		if zero, switch to any other volume
!	ARG5: number of blocks needed on new volume
!
! IMPLICIT INPUTS:
!	CURRENT_WINDOW: address of file window or 0
!	PRIMARY_FCB: primary FCB of file
!	CURRENT_VCB: address of VCB of volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	address of new file header
!
! SIDE EFFECTS:
!	file header created, window turned, FCB created
!
!--

BEGIN

MAP
	FIB		: REF BBLOCK,	! user FIB arg
	OLD_HEADER	: REF BBLOCK,	! file header arg
	FCB		: REF BBLOCK;	! FCB arg

LOCAL
	OLD_FID		: BBLOCK [FID$C_LENGTH], ! file ID of old header
	EXT_FID		: BBLOCK [FID$C_LENGTH], ! file ID of new header
	VBN,				! index file VBN of new header
	LBN,				! LBN of new header
	HEADER		: REF BBLOCK,	! buffer address of current file header
	NEW_HEADER	: REF BBLOCK;	! address of new file header

BIND_COMMON;

EXTERNAL ROUTINE
	INIT_FCB2	: L_NORM,	! initialize FCB
	TURN_WINDOW	: L_NORM ADDRESSING_MODE (GENERAL),	! update window
	CHECKSUM	: L_NORM,	! checksum file header
	SELECT_VOLUME	: L_NORM,	! select new volume for use
	MARK_DIRTY	: L_NORM,	! mark header for writeback
	CHARGE_QUOTA	: L_NORM,	! charge user's disk quota
	CREATE_HEADER	: L_NORM,	! create a new file ID and header
	SWITCH_VOLUME	: L_NORM,	! switch context to desired volume
	READ_HEADER	: L_NORM,	! read file header
	CREATE_FCB	: L_NORM;	! create an fcb.


! Save the file ID of the current last header. If the file is accessed, fix
! up the FCB if it is not the primary and turn the window to include blocks
! from the header if possible. Then prepare the old header for write-back.
!

CH$MOVE (FID$C_LENGTH, OLD_HEADER[FH2$W_FID], OLD_FID);
OLD_FID[FID$W_RVN] = .OLD_FID[FID$W_RVN] + .CURRENT_RVN;

IF .FCB NEQ 0 AND .FCB NEQ .PRIMARY_FCB
THEN
    BEGIN
    CLEANUP_FLAGS[CLF_NOBUILD] = 1;
    KERNEL_CALL (INIT_FCB2, .FCB, .OLD_HEADER);
    END;

IF .CURRENT_WINDOW NEQ 0
THEN IF NOT .CURRENT_WINDOW[WCB$V_CATHEDRAL]
THEN KERNEL_CALL (TURN_WINDOW, .CURRENT_WINDOW, .OLD_HEADER, .PRIMARY_FCB[FCB$L_FILESIZE], .FCB[FCB$L_STVBN]);

CHECKSUM (.OLD_HEADER);

! Now create the new file ID. Map and read the corresponding block in the
! index file to extract the file sequence number; then punt the buffer.
!

IF ACTUALCOUNT GEQU 4
THEN
    BEGIN
    IF .NEW_VOLUME NEQ 0
    AND .FIB[FIB$V_EXACT]
    THEN
	SWITCH_VOLUME (.NEW_VOLUME)
    ELSE
	SELECT_VOLUME (.FIB, .BLOCKS_NEEDED);
    END;

NEW_HEADER = CREATE_HEADER (EXT_FID);
LBN = .HEADER_LBN;

! Get back the old file header, which may or may not have been written out
! due to buffer pool thrashing. Check the segment number for overflow.
! Plug in the header extension linkage and write it.
!

HEADER = READ_HEADER (OLD_FID, .FCB);
IF .HEADER[FH2$W_SEG_NUM] GEQU 65535
THEN ERR_EXIT (SS$_HEADERFULL);
CH$MOVE (FID$C_LENGTH, EXT_FID, HEADER[FH2$W_EXT_FID]);

CHECKSUM (.HEADER);
MARK_DIRTY (.HEADER);
IF ACTUALCOUNT GEQU 4
THEN
    BEGIN
    SWITCH_VOLUME (.NEW_FID_RVN);
    END;

! We now fabricate a buffer and copy the old header into it, thus
! keeping the attributes. Note that we truncate the Ident area to only the
! file name, to gain map pointer space.
!

CH$MOVE (512, .HEADER, .NEW_HEADER);
HEADER_LBN = .LBN;
FILE_HEADER = .NEW_HEADER;

CH$MOVE (FID$C_LENGTH, EXT_FID, NEW_HEADER[FH2$W_FID]);
NEW_HEADER[FH2$B_FID_RVN] = 0;

! If this is the first extension header of the file, copy the file ID
! of the primary into the back link. Once there, it will propagate to
! succeeding extension headers.
!

IF .NEW_HEADER[FH2$W_SEG_NUM] EQL 0
THEN
    BEGIN
    CH$MOVE (FID$C_LENGTH, OLD_FID, NEW_HEADER[FH2$W_BACKLINK]);
    DEFAULT_RVN (NEW_HEADER[FH2$W_BK_FIDRVN], .CURRENT_RVN);
    END

! If we're already in an extension header, the RVN may have to be fixed
! up, if the new extension header is on a different volume.
!

ELSE
    BEGIN
    APPLY_RVN (NEW_HEADER[FH2$W_BK_FIDRVN], .OLD_FID[FID$B_RVN]);
    DEFAULT_RVN (NEW_HEADER[FH2$W_BK_FIDRVN], .CURRENT_RVN);
    END;
NEW_FID = 0;				! header extension is complete

NEW_HEADER[FH2$W_SEG_NUM] = .NEW_HEADER[FH2$W_SEG_NUM] + 1;
CH$FILL (0, FID$C_LENGTH, NEW_HEADER[FH2$W_EXT_FID]);
NEW_HEADER[FH2$B_MAP_INUSE] = 0;
NEW_HEADER[FH2$V_CONTIG] = 0;
NEW_HEADER[FH2$V_LOCKED] = 0;
NEW_HEADER[FH2$B_MPOFFSET] = .NEW_HEADER[FH2$B_IDOFFSET] +
			     ($BYTEOFFSET (FI2$W_REVISION)) / 2;
NEW_HEADER[FH2$B_ACOFFSET] = ($BYTEOFFSET (FH2$W_CHECKSUM)) / 2;
NEW_HEADER[FH2$B_RSOFFSET] = ($BYTEOFFSET (FH2$W_CHECKSUM)) / 2;

CH$FILL (0, 512 - .NEW_HEADER[FH2$B_MPOFFSET]*2, .NEW_HEADER + .NEW_HEADER[FH2$B_MPOFFSET]*2);

! Now charge the user for the new extension header.
!

CHARGE_QUOTA (.NEW_HEADER[FH2$L_FILEOWNER], 1, BITLIST (QUOTA_CHECK, QUOTA_CHARGE));

! Finally create an extension FCB if the file is accessed.
!

IF .FCB NEQ 0
THEN
    BEGIN
    LOCAL
	NEWFCB	: REF BBLOCK;

    NEWFCB = CREATE_FCB (.NEW_HEADER);

    NEWFCB [FCB$L_LOCKBASIS] = .PRIMARY_FCB [FCB$L_LOCKBASIS];
    FCB [FCB$L_EXFCB] = .NEWFCB;
    CURRENT_VCB [VCB$W_TRANS] = .CURRENT_VCB [VCB$W_TRANS] + 1;
    END;

RETURN (.NEW_HEADER);

END;					! end of routine EXTEND_HEADER

END
ELUDOM
