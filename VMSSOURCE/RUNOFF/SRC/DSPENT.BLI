%TITLE 'Processes the several .DISPLAY <item> directives'
MODULE dspent (	IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					    NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:
!
!	Processes .DISPLAY EXAMPLE, .DISPLAY FIGURE, .DISPLAY TABLE,
!	.DISPLAY APPENDIX, and .DISPLAY CHAPTER directives.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	Keith Dawson	 CREATION DATE: April 1982


%SBTTL 'Revision History'
! MODIFIED BY:
!
!	008	KFA00008	Ken Alden	01-Aug-1983
!		Fixed bug:  .DISPLAY APPENDIX never got added during work
!		  of #007.
!
!	007	KAD00007	Keith Dawson	09-May-1983
!		Fixed bug: .DISPLAY {anything} was overwriting the NPAGEN 
!		  value of the (chapter) display code. Missing BEGIN-END.
!
!	006	REM00006	Ray Marshall	27-April-1983
!		Conditionalized this module so that it can be compiled for DSR
!		  without trying to bring in unneeded logic or use symbols
!		  unavailable to DSR.  DSR now uses this module to process the
!		  .DISPLAY APPENDIX and .DISPLAY CHAPTER directives.
!
!	005	RER00005	Ron Randall	19-Apr-1983
!		Fixed bug in capturing pre/poststrings on entities.
!
!	004	KFA00004	Ken Alden	30-Mar-1983
!		Fixed bug in displaying chapter page numbers
!
!	003	KFA00003	Ken Alden	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!--


%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    DSPENT : NOVALUE;
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! OWN STORAGE:
!
OWN
    fs_allocate (e_pre_string,  10),
    fs_allocate (e_post_string, 10),
    fs_allocate (f_pre_string,  10),
    fs_allocate (f_post_string, 10),
    fs_allocate (t_pre_string,  10),
    fs_allocate (t_post_string, 10);
!
! EXTERNAL REFERENCES:
!
EXTERNAL
    ecc		: $ecc_blockvector,
    pagen	: page_definition,
    npagen	: page_definition,
    hllist	: counted_list,
    ira		: fixed_string;

EXTERNAL LITERAL
    rnfqst;

EXTERNAL ROUTINE
    erms,
    getdd,
    getqs,
    rskips,
    skpsep;


%SBTTL 'DSPENT -- main routine'
GLOBAL ROUTINE dspent (HANDLER) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Processes .DISPLAY EXAMPLE, FIGURE, TABLE, CHAPTER, and APPENDIX 
!	directives.
!
! FORMAL PARAMETERS:
!
!	HANDLER - Indicates which command is to be processed.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:
!
!	Updates the appropriate field in the ECC blockvector structure.
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    LOCAL
	getdd_result,
	get_pre_result,
	get_post_result,
	display_code,
	offset;

    offset = (SELECTONE .handler OF
		SET
%IF dsrplus %THEN
		[h_display_examp] : examp_offset;
		[h_display_figur] : figur_offset;
		[h_display_table] : table_offset;
%FI
		[h_display_chapt] : chap_offset;
		[h_display_appen] : append_offset;
%IF dsrplus %THEN
		[h_display_head]  : hcoll_offset + .hllist [cl_index];
%FI
		TES);

    fs_init (e_pre_string);
    fs_init (e_post_string);
    fs_init (f_pre_string);
    fs_init (f_post_string);
    fs_init (t_pre_string);
    fs_init (t_post_string);

%IF dsrplus %THEN
    ! Skip spaces and tabs before the optional quoted string.
    rskips (ira);

    ! Try to get a quoted string.
    get_pre_result = (SELECTONE .handler OF
			SET
			[h_display_examp] : getqs (e_pre_string);
			[h_display_figur] : getqs (f_pre_string);
			[h_display_table] : getqs (t_pre_string);
			TES);

    ! Report error if specified string exceeded 5 characters.
    IF  .get_pre_result EQL getqs_too_long
    THEN
	BEGIN

	SELECTONE .HANDLER OF
	    SET
	    [h_display_examp] :
	    erms (rnfqst, .fs_start (e_pre_string), .fs_length (e_pre_string));

	    [h_display_figur] :
	    erms (rnfqst, .fs_start (f_pre_string), .fs_length (f_pre_string));

	    [h_display_table] :
	    erms (rnfqst, .fs_start (t_pre_string), .fs_length (t_pre_string));

	    TES;
	END;

%FI
    ! Skip a comma, spaces and tabs before the display descriptor.
    skpsep (ira);

    ! Get the display discriptor.
    getdd_result = getdd (display_code);

    ! Distinguish between missing display code and one that is given.
    IF  .getdd_result EQL 0
    ! No display code supplied. Use the standard display as default.
    THEN
	display_code = tconvrt_dec_noz;

%IF dsrplus %THEN
    ! Skip a comma, spaces and tabs before the second optional quoted string.
    skpsep (ira);

    ! Try to get a quoted string.
    get_post_result = (SELECTONE .handler OF
			SET
			[h_display_examp] : getqs (e_post_string);
			[h_display_figur] : getqs (f_post_string);
			[h_display_table] : getqs (t_post_string);
			TES);

    ! Report error if specified string exceeded 5 characters.
    IF  .get_post_result EQL getqs_too_long
    THEN
	BEGIN
	SELECTONE .handler OF
	    SET
	    [h_display_examp] :
	    erms (rnfqst, .fs_start (e_post_string), .fs_length (e_post_string));

	    [h_display_figur] :
	    erms (rnfqst, .fs_start (f_post_string), .fs_length (f_post_string));

	    [h_display_table] :
	    erms (rnfqst, .fs_start (t_post_string), .fs_length (t_post_string));

	    TES;
	END;
!+
! Store the string(s) and descriptor gotten, if any.
!-
    IF	(.get_pre_result EQL getqs_normal) OR
	(.get_pre_result EQL getqs_too_long)
    THEN
	BEGIN
	SELECTONE .handler OF
	    SET

	    [h_display_examp] :
		BEGIN
		ecc [.offset, ecc$a_pre_ptr] = .fs_start  (e_pre_string);
		ecc [.offset, ecc$h_pre_len] = .fs_length (e_pre_string);
		END;

	    [h_display_figur] :
		BEGIN
		ecc [.offset, ecc$a_pre_ptr] = .fs_start  (f_pre_string);
		ecc [.offset, ecc$h_pre_len] = .fs_length (f_pre_string);
		END;

	    [h_display_table] :
		BEGIN
		ecc [.offset, ecc$a_pre_ptr] = .fs_start  (t_pre_string);
		ecc [.offset, ecc$h_pre_len] = .fs_length (t_pre_string);
		END;
	    TES;
	END;
%FI
    IF .getdd_result EQL 1
    THEN
	BEGIN
	ecc [.offset, ecc$h_display_desc] = .display_code;

	IF  .offset EQL chap_offset
	THEN
	    BEGIN
	    pagen  [sct_chapt_d] = .display_code;
	    npagen [sct_chapt_d] = .display_code;
	    END;

	IF  .offset EQL append_offset
	THEN
	    BEGIN
	    pagen  [sct_appen_d] = .display_code;
	    npagen [sct_appen_d] = .display_code;
	    END;
	END;

%IF dsrplus %THEN
    IF	(.get_post_result EQL getqs_normal) OR
	(.get_post_result EQL getqs_too_long)
    THEN
	BEGIN
	SELECTONE .handler OF
	    SET

	    [h_display_examp] :
		BEGIN
		ecc [.offset, ecc$a_post_ptr] = .fs_start  (e_post_string);
		ecc [.offset, ecc$h_post_len] = .fs_length (e_post_string);
		END;

	    [h_display_figur] :
		BEGIN
		ecc [.offset, ecc$a_post_ptr] = .fs_start  (f_post_string);
		ecc [.offset, ecc$h_post_len] = .fs_length (f_post_string);
		END;

	    [h_display_table] :
		BEGIN
		ecc [.offset, ecc$a_post_ptr] = .fs_start  (t_post_string);
		ecc [.offset, ecc$h_post_len] = .fs_length (t_post_string);
		END;
	    TES;
	END;
%FI
    END;					! End of DSPENT

END						! End of module
ELUDOM
