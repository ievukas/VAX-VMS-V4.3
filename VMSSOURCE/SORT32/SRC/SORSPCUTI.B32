MODULE SOR$SPEC_UTIL (
		IDENT = 'V04-000'	! File: SORSPCUTI.B32 Edit: PDG3024
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
!
! FACILITY:	VAX-11 SORT/MERGE
!
! ABSTRACT:
!
!	This module contains support routines for specification file features.
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: Peter D Gilbert, CREATION DATE: 25-Aug-1982
!
! MODIFIED BY:
!
!	T03-015		Original
!	T03-016	Put linkages on SOR$$COMPARE.  Rework the way TDT entries are
!		processed.  Return 0 if no tie-breaking and the strings collate
!		as equal.  PDG 13-Dec-1982
!	T03-017	Some fixes in SOR$$COLL_CMP and GET_COLL.  PDG 28-Dec-1982
!	T03-018	Add checks for short records in SOR$$TDT and SOR$$REFORM.
!		PDG 3-Jan-1983
!	T03-019	Remove collating sequence stuff (from this module).
!		PDG 26-Jan-1983
!	T03-020	Change CH$COPY to use a pad character.  PDG 8-Feb-1983
!	T03-021	Use KFT_NDE_SIZ for length in internal node.  PDG 12-Feb-1983
!	T03-022	Check the KFT_BUILD flag in SOR$$REFORM.  PDG 10-May-1983
!	T03-023	Make CFT_CON_ADR relative.  PDG 25-Jan-1984
!	T03-024	WHILE_FAIL_ is now defined in SRTSPC.REQ.  PDG 1-Feb-1984
!--

!	Require files
!
%IF %BLISS(BLISS32) %THEN
REQUIRE 'SRC$:COM';		! Common definitions for VAX-11 SORT/MERGE
%FI
LIBRARY	'SRC$:SRTSPC';		! Define symbols for spec file processing

!	Linkage declarations
!
LITERAL
    PT_REG = %BLISS16(4) %BLISS32(4),
    ST_REG = %BLISS16(3) %BLISS32(3),
    XX_REG = 2;				! Parameter register

!	Routine declarations
!
FORWARD ROUTINE
    SOR$$TDT:		CA_LINKAGE,	! Evaluate a test
    SOR$$RDT:		CA_LINKAGE,	! Determine record type
    SOR$$REFORM:	CA_LINKAGE;	! Reformat a record

!	Macro declarations
!
%IF NOT %DECLARED(%QUOTE BASE_)
%THEN
MACRO
    BASE_ =	0, 0, 0, 0 %;
%FI

GLOBAL ROUTINE SOR$$TDT
	(
	INPREC:	REF VECTOR[2],		! Length/address of input record
	TDTPTR:	REF TDT_TAB[]		! Test definitions
%IF %BLISS(BLISS16)
%THEN	,
	COMP:	REF VECTOR[,BYTE],	! Addr of routine to do simple compares
	FDT:	REF FDT_TAB[],		! Field definition table
	CFT:	REF CFT_TAB[]		! Constant definition table
%FI
	):	CA_LINKAGE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine evaluates a test.
!
! FORMAL PARAMETERS:
!
!	As described above.
!
!	Note that COMP, FDT, and CFT could be bound to the locations
!	in the context area that hold the addresses.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	0	indicates test failed
!	1	indicates test passed
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN
    LOCAL
	TDT:	REF TDT_TAB[],	! Local pointer to test descriptions
	RES;			! Running total/result

    CA_AREA_(CA);

    BEGIN
%IF %BLISS(BLISS32)
%THEN
    BIND
	FDT = CA[CA_FDT_ADR]: REF FDT_TAB[],	! Field definition table
	CFT = CA[CA_CFT_ADR]: REF CFT_TAB[];	! Constant definition table
    EXTERNAL ROUTINE
	SOR$$COMPARE:	CA_LINKAGE;
    BIND
	COMP = SOR$$COMPARE: VECTOR[,BYTE];	! Addr of comparison routine
%FI

    !+
    ! The test definition table consists of simple comparisons, and a flag
    ! indicating whether the result of this comparison should be ANDed or
    ! ORed with the running total/result.  Another flag indicates whether
    ! this is the last simple comparison (there is always at least one).
    !
    ! For example, the following:
    !
    ! CONTINUE	CMP1 XXX
    ! CONTINUE	CMP2 OP2
    ! 		CMP3 OP3
    !
    ! corresponds to the condition: ((CMP1 OP2 CMP2) OP3 CMP3)
    !-


    ! Get the address of the first test entry
    !
    TDT = TDTPTR[0, BASE_];

    WHILE 1 DO
	BEGIN
	LOCAL
	    FDT_IX,		! Index into FDT (or CFT) table
	    TYPE,		! Data type of the operands
	    FLD1: VECTOR[2],	! Length/address of first operand
	    FLD2: VECTOR[2];	! Length/address of first operand

	IF .TDT[0,TDT_TRUE] THEN RETURN 1;

	!+
	! Find the datatypes, lengths, and addresses of the fields/data
	! to be compared.
	!-

	! The first field is always a field (not a constant)
	!
	FDT_IX = .TDT[0,TDT_FLD_ONE];
	TYPE = .FDT[.FDT_IX, FDT_TYPE];
	FLD1[0] = .FDT[.FDT_IX, FDT_FLD_SIZ];
	FLD1[1] = .FDT[.FDT_IX, FDT_FLD_POS];
	IF .FLD1[0] + .FLD1[1] GTRU .INPREC[0]
	THEN
	    BEGIN
	    !
	    ! If this is not a text field, it's an error
	    !
	    IF .TYPE NEQ DT_T THEN RETURN 0;
	    FLD1[0] = .INPREC[0] - .FLD1[1];
	    IF .FLD1[0] LSS 0 THEN FLD1[0] = 0;
	    END;
	FLD1[1] = .FLD1[1] + .INPREC[1];

	! The second field may be a field or a constant
	!
	FDT_IX = .TDT[0,TDT_FLD_TWO];
	IF .TDT[0,TDT_CONSTANT]
	THEN
	    BEGIN
	    FLD2[0] = .CFT[.FDT_IX, CFT_CON_LEN];
	    FLD2[1] = .CFT[.FDT_IX, CFT_CON_ADR] + CFT[0, BASE_];
	    END
	ELSE
	    BEGIN
	    FLD2[0] = .FDT[.FDT_IX, FDT_FLD_SIZ];
	    FLD2[1] = .FDT[.FDT_IX, FDT_FLD_POS];
	    IF .FLD2[0] + .FLD2[1] GTRU .INPREC[0]
	    THEN
		BEGIN
		!
		! If this is not a text field, it's an error
		!
		IF .FDT[.FDT_IX, FDT_TYPE] NEQ DT_T THEN RETURN 0;
		FLD2[0] = .INPREC[0] - .FLD2[1];
		IF .FLD2[0] LSS 0 THEN FLD2[0] = 0;
		END;
	    FLD2[1] = .FLD2[1] + .INPREC[1];
	    END;

	IF
	    BEGIN
	    LOCAL CMP;

	    CMP = CA_LINKAGE(COMP[0], .TYPE, FLD1[0], FLD2[0]);

	    SELECTONE .CMP OF
		SET
		[0]:	.TDT[0,TDT_EQL];
		[+1]:	.TDT[0,TDT_GTR];
		[-1]:	.TDT[0,TDT_LSS];
		[OTHERWISE]:	RETURN .CMP;	! Unexpected
		TES
	    END
	THEN
	    BEGIN
	    LOCAL X;
	    X = .TDT[0,TDT_GOTO];
	    IF .X EQL 0 THEN RETURN 0;
	    TDT = TDT[.X, BASE_];	! Goto new test item
	    END
	ELSE
	    TDT = TDT[1, BASE_];	! Advance to next test

	END;

    RETURN 0;
    END;
    END;

GLOBAL ROUTINE SOR$$RDT
	(
	INPREC:	REF VECTOR[2],		! Length/address of input record
%IF %BLISS(BLISS16)
%THEN
	RDT:	REF RDT_TAB[],		! Record definition table
	COMP:	REF VECTOR[,BYTE],	! Addr of routine to do simple compares
	TDT:	REF TDT_TAB[],		! Test definition table
	FDT:	REF FDT_TAB[],		! Field definition table
	CFT:	REF CFT_TAB[],		! Constant definition table
%FI
	RDTPTR:	REF VECTOR[1]		! Pointer to RDT entry (output)
	):	CA_LINKAGE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine determines whether a record should be omitted or
!	included.  If included, it returns the address of the RDT entry.
!
! FORMAL PARAMETERS:
!
!	As described above.
!
!	Note that RDT, COMP, TDT, FDT, and CFT could be bound to the locations
!	in the context area that hold the addresses.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	0	indicates the record is to be omitted
!	1	indicates the record is to be included
!		RDTPTR is set to the address of the appropriate RDT table entry
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN
    LOCAL
	RDT_PTR: REF RDT_TAB[];		! Local pointer to record definitions

    CA_AREA_(CA);

    BEGIN
%IF %BLISS(BLISS32)
%THEN
    BIND
	RDT = CA[CA_RDT_ADR]: REF RDT_TAB[],	! Record definition table
	TDT = CA[CA_TDT_ADR]: REF TDT_TAB[],	! Test definition table
	FDT = CA[CA_FDT_ADR]: REF FDT_TAB[],	! Field definition table
	CFT = CA[CA_CFT_ADR]: REF CFT_TAB[];	! Constant definition table
    EXTERNAL ROUTINE
	SOR$$COMPARE:	CA_LINKAGE;
    BIND
	COMP = SOR$$COMPARE: VECTOR[,BYTE];	! Addr of comparison routine
%FI
    ! Get a local pointer to the record definition table
    !
    RDT_PTR = RDT[0,BASE_];

    ! Advance RDT_PTR until we find a test that passes
    !
    WHILE_FAIL_('RDT');

    ! Now determine whether we should omit or include this thing.
    !
    IF .RDT_PTR[0, RDT_INCLUDE]
    THEN
	BEGIN
	!
	! Include the record, so store the address of the RDT table entry
	!
	RDTPTR[0] = RDT_PTR[0, BASE_];
	RETURN 1;
	END
    ELSE
	BEGIN
	!
	! Omit the record
	!
	RETURN 0;
	END;

    END;
    END;

GLOBAL ROUTINE SOR$$REFORM
	(
	INPREC:	REF VECTOR[2],		! Length/address of input record
	KFTPTR:	REF KFT_TAB[],
%IF %BLISS(BLISS16)
%THEN
	RDT:	REF RDT_TAB[],		! Record definition table
	COMP:	REF VECTOR[,BYTE],	! Addr of routine to do simple compares
	TDT:	REF TDT_TAB[],		! Test definition table
	FDT:	REF FDT_TAB[],		! Field definition table
	CFT:	REF CFT_TAB[],		! Constant definition table
%FI
	RESULT:	REF VECTOR[,BYTE],	! Address of output area
	RECLEN:	REF VECTOR[1,WORD]	! Output format record length
	):	CA_LINKAGE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine reformats a record into a result area.
!
! FORMAL PARAMETERS:
!
!	As described above.
!
!	Note that RDT, COMP, TDT, FDT, and CFT could be bound to the locations
!	in the context area that hold the addresses.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	1	indicates everything went okay.
!
! SIDE EFFECTS:
!
!	NONE
!
! NOTES:
!
!	The protocol for using this routine is as follows:
!
!	Z = SOR$$RDT( INPREC, ..., RDTPTR )
!	SELECTONE .Z OF
!		SET
!		[0]:	...omit the record...;
!		[1]:	BEGIN
!			KFT_IX = .RDTPTR[0, RDT_KFT_IDX];
!			Z = SOR$$REFORM( INPREC, KFT[.KFT_IX,BASE_], ... );
!			IF .Z NEQ 1 THEN ...error from comparison...;
!			END;
!		[OTHERWISE]: ...error from comparison...;
!		TES;
!--
    BEGIN
    LOCAL
	KFT_PTR: REF KFT_TAB[],		! Local pointer to KFT table
	FIRSTDATA:	WORD;		! Offset to first data field

    CA_AREA_(CA);

    BEGIN
%IF %BLISS(BLISS32)
%THEN
    BIND
	RDT = CA[CA_RDT_ADR]: REF RDT_TAB[],	! Record definition table
	TDT = CA[CA_TDT_ADR]: REF TDT_TAB[],	! Test definition table
	FDT = CA[CA_FDT_ADR]: REF FDT_TAB[],	! Field definition table
	CFT = CA[CA_CFT_ADR]: REF CFT_TAB[];	! Constant definition table
    EXTERNAL ROUTINE
	SOR$$COMPARE:	CA_LINKAGE;
    BIND
	COMP = SOR$$COMPARE: VECTOR[,BYTE];	! Addr of comparison routine
%FI

    !+
    ! The key/data field definition table consists of field definitions,
    ! which define the fields in a record; some of these may be conditional
    ! data fields.  As an example, the following specification file:
    !
    !	/DATA=FLD1
    !	/DATA=(	IF COND1 THEN CONST1
    !		IF COND2 THEN CONST2
    !		ELSE CONST3 )
    !	/DATA=FLD3
    !	/DATA=FLD4
    !
    ! corresponds to the following field definition table entries:
    !
    ! CONTINUE	FLD1
    ! CONTINUE	CONST1	COND	COND1
    ! CONTINUE	CONST2	COND	COND2
    ! CONTINUE	CONST3
    ! CONTINUE	FLD3
    !		FLD4
    !
    ! Note that the ELSE part of the conditional data definition does not
    ! have the COND flag set.
    !-


    ! Initialize the local pointer to the KFT table
    ! Initialize the output format record length
    !
    KFT_PTR = KFTPTR[0,BASE_];
    RECLEN[0] = 0;
    FIRSTDATA = -1;


    ! While there are more fields
    !
    WHILE 1 DO
	BEGIN
	LOCAL
	    FLD: VECTOR[2],	! Length/address of field or constant
	    FDT_IX;		! Index into FDT (or CFT) table

	! Advance KFT_PTR until we find a test that passes
	!
	WHILE_FAIL_('KFT');

	! Determine whether we should grab the field from the record
	! or from the constant table.
	!
	FDT_IX = .KFT_PTR[0,KFT_FDT_IDX];
	IF .KFT_PTR[0,KFT_CONSTANT]
	THEN
	    BEGIN
	    FLD[0] = .CFT[.FDT_IX, CFT_CON_LEN];
	    FLD[1] = .CFT[.FDT_IX, CFT_CON_ADR] + CFT[0, BASE_];
	    END
	ELSE
	    BEGIN
	    FLD[0] = KFT_UNITS_(KFT_PTR);	! Get size in bytes
	    FLD[1] = .FDT[.FDT_IX, FDT_FLD_POS];
	    IF .FLD[0] + .FLD[1] GTRU .INPREC[0]
	    THEN
		BEGIN
		!
		! If this is not a text field, it's an error
		!
		IF .FDT[.FDT_IX, FDT_TYPE] NEQ DT_T THEN RETURN 0;
		FLD[0] = .INPREC[0] - .FLD[1];
		IF .FLD[0] LSS 0 THEN FLD[0] = 0;
		END;
	    FLD[1] = .FLD[1] + .INPREC[1];
	    END;

	%IF MAX(TYP_K_RECORD,TYP_K_TAG) GEQ MIN(TYP_K_INDEX,TYP_K_ADDRESS)
	%THEN
	    %ERROR('The following test won''t work') %FI

	! Copy the field to its place in the internal format record
	!
	IF .KFT_PTR[0,KFT_BUILD]
	THEN
	    BEGIN
	    CH$COPY(.FLD[0], .FLD[1], .CA[CA_PAD],
		.KFT_PTR[0,KFT_NDE_SIZ], RESULT[.KFT_PTR[0,KFT_NDE_POS]]);
	    IF .KFT_PTR[0,KFT_DATA]
		OR .CA[CA_PROCESS] GEQ MIN(TYP_K_INDEX,TYP_K_ADDRESS)
	    THEN
		BEGIN
		RECLEN[0] = MAXU(.RECLEN[0], .KFT_PTR[0,KFT_NDE_POS]+.FLD[0]);
		FIRSTDATA = MINU(.FIRSTDATA, .KFT_PTR[0,KFT_NDE_POS]);
		END;
	    END;

	! If we were in a conditional part of the record definition,
	! advance KFT_PTR to the end of the conditional entries.
	!
	WHILE .KFT_PTR[0,KFT_CONDX] DO KFT_PTR = KFT_PTR[1,BASE_];

	! See whether this record definition is continued
	!
	IF NOT .KFT_PTR[0,KFT_CONTINUE] THEN EXITLOOP;

	! Advance KFT_PTR to the next entry
	!
	KFT_PTR = KFT_PTR[1,BASE_];

	END;

    RECLEN[0] = .RECLEN[0] - .FIRSTDATA;
    IF .CA[CA_PROCESS] GEQ MIN(TYP_K_INDEX,TYP_K_ADDRESS)
    THEN
	RECLEN[0] = .RECLEN[0] + 6;	! Add 6 bytes for the RFA

    RETURN 1;
    END;
    END;

END
ELUDOM
