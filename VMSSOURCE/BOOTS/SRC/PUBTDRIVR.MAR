	.TITLE	PUBTDRIVR - UDA50 BOOT DRIVER
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	BOOTS
;
; ABSTRACT:
;	This module contains the bootstrap device driver for the
;	UDA 50 disks.
;
; ENVIRONMENT:	IPL 31, kernel mode, code must be PIC
;
; AUTHOR:  Kerbey T. Altmann,	CREATION DATE:  20-Nov-1981
;
; MODIFIED BY:
;
;	V03-006	KTA3110		Kerbey T. Altmann	12-Mar-1984
;		Set controller timeout to max for GEN booting.
;
;	V03-005	KDM0073		Kathleen D. Morse	23-Aug-1983
;		Added $BQODEF for use by new version of TIMEDWAIT macro.
;
;	V03-004	KDM0059		Kathleen D. Morse	13-Jul-1983
;		Replace time-wait loops that use IPR TODR with the
;		new TIMEDWAIT macro.
;
;	V03-003	KTA3064		Kerbey T. Altmann	03-Jul-1983
;		Fix page boundary problem.
;
;	V03-002	KTA3059		Kerbey T. Altmann	23-Jun-1983
;		Add support for the boot device name.
;
;	V03-001	KTA3007		Kerbey T. Altmann	09-Oct-1982
;		Fix problem with setting VMB$V_SCS.
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$BQODEF				; Boot qio offset definitions
	$BTDDEF				; Boot device types
	$IODEF				; I/O function codes
	$MSCPDEF			; MSCP definitions
	$PRDEF				; Processor registers
	$PTEDEF				; Page table entries
	$RPBDEF				; RPB offsets
	$SSDEF				; Status codes
	$UBADEF				; UBA definitions
	$UBIDEF				; 11/750 UBA definitions
	$VADEF				; Virtual addresses
	$VMBARGDEF			; VMB argument list offsets

;
; EQUATED SYMBOLS:
;

	UDAIP	= 0
	UDASA	= 2
	GO	= 1
	OWN	= 1@15
	S1	= 11
	S4	= 14
	UMR	= 494		; Last-1 UNIBUS Mapping Register
 
;
; OWN STORAGE:
;

;
; Boot driver table entry
;

	$BOOT_DRIVER	DEVTYPE = BTD$K_UDA,-	; Device type (UDA50)
			SIZE = UD_DRVSIZ,-	; Driver size
			ADDR = START,-		; Driver starting address
			ENTRY = UD_DRIVER,-	; Driver entry point
			UNIT_INIT = UD_INIT,-	; Driver unit init entry
			UNIT_DISC = UD_DISC,-	; Driver disconnect entry
			DRIVRNAME = DSKDRVNAME,-; Driver disk name
			AUXDRNAME = PRTDRVNAME,-; Driver port name
			DEVNAME = DEVNAME	; Boot device name

START:
DSKDRVNAME:
	.ASCIC	/DUDRIVER.EXE/		; Disk class driver filename
PRTDRVNAME:
	.ASCIC	/PUDRIVER.EXE/		; Port driver filename
DEVNAME:.ASCII	/DU/			; Boot device name

	.SBTTL	UDA50 Bootstrap device initialization

;++
;
; Inputs:
;
;	R9 -->	RPB
;	AP -->	VMB argument list
;
; Outputs:
;
;	R0 - status code
;
;--

UD_INIT:
	.ENABLE LSB
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8>

	MFPR	#PR$_MAPEN, R0		; Get the mapping status
	BLBS	R0,10$			; If virtual, skip some set up
;
; Set up the SYSTEMID for the local UDA.
;
	MOVL	RPB$L_IOVEC(R9),R1	; Point to iovec
	CLRB	B^<BOO$GB_UMR_DP-BOO$AL_VECTOR>(R1) ; Set for Direct Data Path
	ASSUME	VMB$V_LOAD_SCS EQ 0
	MOVL	#1,VMB$L_FLAGS(AP)	; Set a flag to load SCS code
	MOVL	RPB$L_BOOTR2(R9),-
		VMB$B_SYSTEMID(AP)	; Low 32 bits is CSR of UDA
	MOVW	RPB$L_BOOTR1(R9),-
		VMB$B_SYSTEMID+4(AP)	; Hi 16 bits is TR of UBA
	BBSS	#47,VMB$B_SYSTEMID(AP),10$ ; Set bit 47
;
; Set up an interrupt vector.
;
10$:	MOVW	#<127*4>,RPB$W_R0UBVEC(R9) ; Use the highest possible
;
; Set up a UNIBUS mapping register(s) to cover the ring and buffers.
; To make things easy, we will grab the last two register (494 & 495).
; These registers are necessary since the ring area will be accessed by
; the controller which is a UNIBUS device that does not do any mapping.
;
	MOVAB	W^INTTBL,R2		; Get the address of the ring
	BICL3	#^C<^X1FF>,R2,R1	; Get the byte offset in page
	BISL3	#<UMR@9>,R1,2(R2)	; Set in the UNIBUS addr
	ADDL	S^#<RING-INTTBL>,2(R2)	; Make it the ring address
	EXTZV	#VA$V_VPN,#VA$S_VPN,R2,R2 ; Get the page frame
	ASSUME	RPB$L_ADPVIR EQ RPB$L_ADPPHY+4
	MOVL	RPB$L_ADPPHY(R9)[R0],R3	; Get correct pointer to UBA reg
	ASSUME	RPB$L_CSRVIR EQ RPB$L_CSRPHY+4
	MOVL	RPB$L_CSRPHY(R9)[R0],R7	; Get correct address of device CSR
	BLBC	R0,20$			; If clr, then physical
	MOVL	@RPB$L_SVASPT(R9)[R2],R2; Virtual, get physical
	BICL	#^C<PTE$M_PFN>,R2	; Now a physical PFN
20$:	MOVAL	UBA$L_MAP+<UMR*4>(R3),R4; Get the last two UMR's
	BISL3	VALID,R2,(R4)+		; Set as valid w/PFN
	INCL	R2			; Set next page just in case
	BISL3	VALID,R2,(R4)		; Set as valid w/PFN
;
; Now go thru the ridiculously complicated startup sequence.  This is a
; fugue in four parts.
;
	MOVL	#2,R8			; Make two tries at this
RETRY:	MOVAB	W^INTTBL, R3
	MOVL	#S1, R2			; Step flag
	CLRW	UDAIP(R7)		; Poke the controller's CSR
;
; Wait 100 microseconds.
;
TIME:	TIMEDWAIT TIME=#1000*1000,-	; Wait for 10 seconds
		INS1=<MOVW	UDASA(R7),R4>,-	; Check the status register
		INS2=<BLSS	25$>,- ; Bit 15 set is the error indicator
		INS3=<BBS	R2,R4,25$>,- ; Done with this step?
		DONELBL=25$		; Label for exiting wait loop
	BLBS	R0,26$			; Br if not timed out

ERROR:	SOBGTR	R8,RETRY		; Try once again
	MOVZWL	#SS$_CTRLERR,R0		; Set failure status
	RET

VALID:	.LONG	^X80000000		; Sign bit set

26$:	TSTW	R4			; Check status register for error
	BLSS	ERROR			; Br if error

30$:	MOVW	(R3)+,UDASA(R7)		; Send the controller the next step
	AOBLEQ	#S4,R2,TIME		; Set for next step
;
; Initialization complete.  Write the packet address in the ring.
; Writing the addresses must be deffered until this point because the
; hardware zeroes the entire ring as a memory write check.
;
	ADDL3	#<RSPPKT-RING>,-
		 B^INTTBL+2,B^RD	; Response packet
	ADDL3	S^#<CMDPKT-RING>,-
		 B^INTTBL+2,B^CD	; Command packet
;
; Set the controller timeout to be the maximum
;
	MOVAB	B^CMDPKT,r5		; Get the address of command packet
	MOVL	#1,(R5)+		; Set command ref number
	CLRL	(R5)+			; Reserved field
	MOVZBL	#MSCP$K_OP_STCON,(R5)+	; Set opcode to SET CTRL CHAR
	CLRL	(R5)+			; Version and flags
	MOVZBL	#255,(R5)+		; Set timeout to 255 seconds
	CLRQ	(R5)+			; Clear time & date
	CLRL	(R5)			; Clear controller depend parameters
	BSBW	IO			; Send it out
;
; Now bring the device on-line
;
	MOVAB	B^CMDPKT,r5		; Get the address of command packet
	MOVL	#1,(R5)+		; Set command ref number
	MOVZBL	RPB$W_UNIT(R9),(R5)+	; Put unit number in cmd packet field
	MOVZBL	#MSCP$K_OP_ONLIN,(R5)+	; Set opcode to bring drive online
	CLRQ	(R5)+			; Clear byte count, buff desc
	CLRQ	(R5)			;  buff desc and LBN
	BSBW	IO			; Send it out
	EXTZV	#MSCP$V_MTYP_D1,-
		 #MSCP$S_MTYP_D1,-
		 W^RSPPKT+ -
		 MSCP$L_MEDIA_ID,R1	; Pull out 2nd device character
	ASHL	#8,R1,R1		; Stick it in high byte
	EXTZV	#MSCP$V_MTYP_D0,-
		 #MSCP$S_MTYP_D0,-
		 B^RSPPKT+ -
		 MSCP$L_MEDIA_ID,R2	; Pull out 1st device character
	BISW	#^X4040,R1		; Make ASCII characters
	BISW3	R1,R2,DEVNAME		; Set into driver name
	RET


	.DISABLE LSB
	.=<.+1>&-2
;
; RINGS
;
;
INTTBL:	.WORD	OWN		; Step 1 pattern
	.LONG	0		; Step 2 & 3 pattern
	.WORD	GO

	.WORD	0,0		; Reserved
CMDINT:	.WORD	0		; Command status word
RSPINT:	.WORD	0		; Response status word
RING:
RD:	.LONG	0		; UNIBUS address of response ring
CD:	.LONG	0		; UNIBUS address of command ring
;
	.WORD	48		; Length of message
	.WORD	1		; ID
CMDPKT:	.WORD	1
	.BLKW	23		; Full envelope
;
	.BLKW	2
RSPPKT:	.BLKW	24

	.SBTTL	UDA50 Bootstrap driver QIO

;++
;
; Inputs:
;
;	R3	- base address of adapter's register space
;	R5	- lbn for current piece of transfer
;	R6	- contains 0
;	R7	- address of the device's CSR
;	R8	- size of transfer in bytes
;	R9	- address of the RPB
;	R10	- starting address of transfer (byte offset in first
;		  page ORed with starting map register number)
;	R11	- LBN at start of transfer
;
;	FUNC(AP)- I/O operation (IO$_READLBLK or IO$_WRITELBLK only)
;	SIZE(AP)- Size of transfer in bytes
;	MODE(AP)- Address interpretation mode (0 = physical, 1 = virtual)
;
; Implicit inputs:
;
;	RPB$W_UNIT	- RPB field containing boot device unit number
;
; Outputs:
;
;	R0 - status code
;
;		SS$_NORMAL	- successful transfer
;		SS$_NOSUCHDEV	- unsupported device
;		SS$_CTRLERR	- fatal controller error
;
;	R3 - must be preserved
;
;
;--

FUNC = 16
MODE = 20

UD_DRIVER:				; UDA50 device driver.

;
; Translate the I/O function code into a device-dependent function
; code for this disk.
;

	MOVB	#MSCP$K_OP_READ, -	; Assume read
		CMDPKT+MSCP$B_OPCODE
	CMPL	FUNC(AP),#IO$_WRITELBLK	; Check for write function
	BNEQ	20$			; No, do read
	MOVB	#MSCP$K_OP_WRITE, -	; Set write function code
		CMDPKT+MSCP$B_OPCODE
20$:	MOVL	R5,CMDPKT+MSCP$L_LBN	; Set the logical block number
	MOVL	R8,CMDPKT+MSCP$L_BYTE_CNT ; Set the byte count
	MOVL	R10,CMDPKT+MSCP$B_BUFFER; Set the UNIBUS map register
IO:	MOVW	UDASA(R7),R4		; Controller offline?
	BNEQ	ERROR1			; Yep, error out
	BISW	#OWN, CD+2		; Set controller ownership
	BISW	#OWN, RD+2		; Ditto
	MOVW	UDAIP(R7),R4		; Tell controller to read
	MOVW	UDASA(R7),R4		; Any problems?
	BNEQ	ERROR1			; Yes
30$:	TSTW	RD+2			; Any response back?
	BLSS	30$			; No, spin until there is
	TSTW	RSPPKT+MSCP$W_STATUS	; Any drive errors?
	BNEQ	ERROR1			; Yes
	BISW	#OWN, RD+2		; No, set controller ownship
;
; Transfer is complete. Return with success status code.
;
	MOVZWL	#SS$_NORMAL,R0		; SET COMPLETION CODE
	RSB				; AND RETURN
;
; Error occured during transfer.  Return and retry.
;

ERROR1:
	MOVZWL	#SS$_CTRLERR,R0		; Set failure status
	RSB				; Return to BOOTDRIVR

	.SBTTL	UDA50 Bootstrap device disconnect

;++
; This routine disconnect the boot device after a bugcheck dump.
; It sends an AVAIL packet to the controller, in effect doing a
; dismount of the system device.  It is designed to be called
; only from BUGCHECK immediately after the dump has finished.
; It assumes virtual mapping turned on.
;
; Inputs:
;
;	R9 -->	RPB
;
; Outputs:
;
;	R0 - status code
;
;--

UD_DISC:
	.ENABLE LSB
	.WORD	^M<R4,R7>

	MOVZBL	#MSCP$K_OP_AVAIL,-	; Make drive AVAILable
		 CMDPKT+MSCP$B_OPCODE
	MOVL	RPB$L_CSRVIR(R9),R7	; Get correct address of device CSR
	BSBB	IO			; Send it out
	RET

UD_DRVSIZ=.-START

	.END
