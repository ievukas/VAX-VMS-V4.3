1 EDIT

  The EDIT commands perform the following functions:

  o  Invoke the Access Control List Editor  to  create  or  modify  an
     access control list for a file (see /ACL).

  o  Invoke the EDT screen-oriented editor (see /EDT).

  o  Invoke the FDL  editor  to  create  and  modify  File  Definition
     Language files (see /FDL).

  o  Inovke the SUMSLP batch-oriented editor to update a single  input
     file with multiple files of edit commands (see /SUM).
2 /ACL
  Invokes the Access Control List (ACL) Editor to create or modify  an
  access  control  list  for  a  specified  object.   For  a  complete
  description of the Access Control List Editor, including information
  about  the  EDIT/ACL  command  and  its  qualifiers, see the VAX/VMS
  Utilities Reference Volume.

  The /ACL qualifier is required.

  Format:

    EDIT/ACL file-spec
3 Parameters

 object-spec

  Specifies the object whose access control list is to be  created  or
  edited  using  the  ACL editor.  If the access control list does not
  exist, it is created.   The  object  specified  may  be  a  file,  a
  directory, or a device.

  If the object is a file, the ACL editor does not provide  a  default
  file  type.   If  you omit the file type, it is presumed to be null.
  The specified file must be a disk file on a Files-11 Structure Level
  2  formatted  volume.   If the object is a directory, specify a file
  specification with the file type of DIR.  If the object  type  is  a
  device, you must specify the /OBJECT=DEVICE qualifer.

  No wildcard characters are allowed in the object specification.
3 Command_Qualifiers

/JOURNAL

 /JOURNAL[=file-spec]
 /NOJOURNAL

  Controls whether a journal file is created for the editing  session.
  By default, the ACL editor keeps a journal file that contains a copy
  of the ACL editor keypad actions made during  the  editing  session.
  The  /JOURNAL  qualifier controls the creation of a journal file for
  the editing session.  If you specify /NOJOURNAL, no journal file  is
  generated.  If you omit the qualifier or specify /JOURNAL, a journal
  file is created.  If you omit  the  journal  file-specification,  by
  default, the journal file is named input-file-spec.JOU.

  No  wildcard  characters   are   allowed   in   the   journal   file
  specification.

  If your editing session ends abnormally,  you  can  invoke  the  ACL
  editor again and recover the changes made during the aborted session
  by simply specifying  the  /RECOVER  qualifier  and,  if  necessary,
  providing  the  name  of the journal file, should it differ from the
  default name.

/KEEP

 /KEEP=(option[,...])

 Controls whether or  not  the  session's  journal  file  or  recovery
  journal file will be deleted.  By default the session's journal file
  is deleted once an ACL editing session ends  normally;  by  default,
  the recovery journal file is deleted once the ACL editing session is
  successfully restored.  The  /KEEP  qualifier  allows  you  to  save
  either  the  journal  or the recovery journal file.  You can specify
  one or both of the following options:

  JOURNAL       Specifies that the journal file for  this  session  is
                not  to be deleted when the editing session terminates
                normally.

  RECOVER       Specifies that the journal file used for  recovery  is
                not  to  be  deleted when the editing session has been
                successfully restored.

/MODE

 /MODE=option

 Specifies the level of  prompting  to  be  used  during  the  editing
  session.   By  default,  the  ACL editor selects the prompting mode.
  Use the /MODE qualifier to specify one of these prompt options:

  PROMPT        Specifies  that  where  possible  the  selected  field
                within the ACE is initially filled with the first of a
                list of items that may apply to the field.

  NOPROMPT      Specifies that no prompting is used by the ACL editor.

/OBJECT

 /OBJECT=type
 /OBJECT=FILE

  Specifies the type of the object whose  ACL  is  being  edited.   By
  default,  the  ACL editor assumes that the object whose ACL is being
  edited is a file.  If the object is a device, the /OBJECT  qualifier
  is required.  The keywords that may be specified with /OBJECT are:

  FILE    Specifies that the object type is  a  file  or  a  directory
          file.

  DEVICE  Specifies that the object type is a device.

/RECOVER

 /RECOVER[=file-spec]
 /NORECOVER

  Determines whether or not the ACL editor  restores  the  file's  ACL
  from  a  journal  file  prior  to starting the editing session.  The
  /RECOVER qualifier specifies that the ACL editor should restore  the
  ACL  from  the  journal file specified by input-file-spec.JOU.  This
  operation restores the ACL to the state it was in  when  a  previous
  ACL editing session ended abnormally.

  If the journal file has a file name other than  input-file-spec.JOU,
  specify it with the /RECOVER qualifier.

3 Examples

  1.   $ EDIT/ACL/JOURNAL=SAVEACL MYFILE.DAT
          .
          .
          .
       User creates ACL until system crashes 
          .
          .
          .
       $ EDIT/ACL/JOURNAL=SAVEACL/RECOVER=SAVEACL MYFILE.DAT
          .
          .
          .
       ACL is restored and user proceeds with editing until done 
          .
          .
          .
         ^Z
       $

  The user initiates the ACL editing session by  specifying  that  the
  journal  file  SAVEACL.JOU  be saved if the session ends abnormally.
  The session proceeds until aborted by a system  crash.   To  recover
  from  the  aborted  editing  session,  and  continue with additional
  edits, the user issues the second EDIT/ACL  command.   This  session
  begins  by restoring the session with the journal SAVEACL.JOU.  Once
  the editing session proceeds to a normal completion (with a CTRL/Z),
  the journal file SAVEACL.JOU is deleted.

  2.   $ EDIT/ACL MYFILE.DAT
       (IDENTIFIER=[360,7],ACCESS=NONE)
       (IDENTIFIER=[360,*],ACCESS=READ+WRITE)
          .
          .
          .
       User edits the ACL.
          .
          .
          .
         ^Z
       $ 

  In this example the owner of the file MYFILE.DAT wants to modify the
  file's  access  control  list.   A journal file called MYFILE.JOU is
  automatically created to record the  ACL.   By  default  the  editor
  enters  prompt  mode.   The system displays the two existing ACEs in
  this ACL.

  The user wants to change the UIC from [360,7]  to  [360,17].   After
  the user makes the correction, presses ENTER on the keypad, and then
  exits with CTRL/Z.  Since this is a normal exit,  the  journal  file
  MYFILE.JOU is automatically deleted.
2 /EDT
  Invokes the EDT interactive text editor.  The /EDT qualifier is  not
  required, because EDT is the VAX/VMS default editor.

  Format:

    EDIT file-spec
3 Parameters

 file-spec

  Specifies the file to be created or edited using the EDT editor.  If
  the file does not exist, it is created by EDT.

  The EDT editor does not provide a default file  type  when  creating
  files; if you do not include a file type, it is null.  The file must
  be a disk file on a Files-11 formatted volume.

  No wildcard characters are allowed in the file specification.
3 Command_Qualifiers

/COMMAND

 /COMMAND[=file-spec]
 /NOCOMMAND

  Determines whether or not EDT uses  a  startup  command  file.   The
  /COMMAND  file qualifier should be followed by an equal sign and the
  specification of the  command  file.   The  default  file  type  for
  command files is EDT.

  The following command line invokes EDT to edit a file named MEMO.DAT
  and specifies that EDT use a startup command file named XEDTINI.EDT:

       $ EDIT/COMMAND=XEDTINI.EDT MEMO.DAT

  If you do not include the /COMMAND=command file qualifier, EDT looks
  for  the  EDTSYS logical name assignment.  If EDTSYS is not defined,
  EDT    processes    the    system-wide    startup    command    file
  SYS$LIBRARY:EDTSYS.EDT.   If this file does not exist, EDT looks for
  the EDTINI logical name assignment.  If EDTINI is not  defined,  EDT
  looks  for  the file named EDTINI.EDT in your default directory.  If
  none of these files exists, EDT begins your editing session  in  the
  default state.

  To prevent  EDT  from  processing  either  the  system-wide  startup
  command  file  or the EDTINI.EDT file in your default directory, use
  the /NOCOMMAND qualifier as follows:

       $ EDIT/NOCOMMAND MEMO.DAT

  No wildcard characters are allowed in the file specification.

/CREATE

 /CREATE
 /NOCREATE

  Controls whether EDT creates a new file  when  the  specified  input
  file  is  not  found.  Normally, EDT creates a new file to match the
  input file specification if it cannot find the requested  file  name
  in  the  specified  directory.   When  you  use /NOCREATE in the EDT
  command line and type a specification  for  a  file  that  does  not
  exist,  EDT  prints  an  error  message  and  returns you to the DCL
  command level as follows:

       $ EDIT/NOCREATE NEWFILE.DAT
       Input file does not exist
       $

/JOURNAL

 /JOURNAL[=journal-file]
 /NOJOURNAL

  Determines whether EDT keeps a  journal  file  during  your  editing
  session.   The default file name for the journal file is the same as
  the input file name.  The default file type is  JOU.   The  /JOURNAL
  qualifier  enables you to use a different file specification for the
  journal file.

  The following command line invokes EDT to edit a file named MEMO.DAT
  and specifies the name SAVE.JOU for the journal file:

       $ EDIT/JOURNAL=SAVE MEMO.DAT

  If you are editing a  file  from  another  directory  and  want  the
  journal  file  to  be  located  in  that directory, you must use the
  /JOURNAL qualifier with  a  file  specification  that  includes  the
  directory  name.   Otherwise,  EDT  creates  the journal file in the
  default directory.

  The directory that is to contain the  journal  file  should  not  be
  write protected.

  To prevent EDT from keeping a record of your  editing  session,  use
  the /NOJOURNAL qualifier in the EDT command line as follows:

       $ EDIT/NOJOURNAL MEMO.DAT

  Once you have created a journal file, use the /RECOVER qualifier  to
  have EDT process the commands contained in the journal file.

  No wildcard characters are allowed in the file specification.

/OUTPUT

 /OUTPUT=output-file
 /NOOUTPUT

  Determines whether EDT creates an output file at  the  end  of  your
  editing  session.  The default file specification for both the input
  file and the output file is the same.  Use the /OUTPUT qualifier  to
  give  the  output file a different file specification from the input
  file.

  The following command line invokes EDT to edit a file named MEMO.DAT
  and gives the resulting output file the name OUTMEM.DAT:

       $ EDIT/OUTPUT=OUTMEM.DAT MEMO.DAT

  You can include directory information as part of  your  output  file
  specification to send output to another directory as follows:

       $ EDIT/OUTPUT=[BARRETT.MAIL]MEMO.DAT MEMO.DAT

  The /NOOUTPUT qualifier suppresses the creation of an  output  file,
  but  not  the  creation  of a journal file.  If you are testing some
  edits and are not  sure  you  want  an  output  file,  you  can  use
  /NOOUTPUT as follows:

       $ EDIT/NOOUTPUT MEMO.DAT

  A system interruption will not  prevent  you  from  recreating  your
  editing  session  because  a journal file is still being maintained.
  If you decide you want to save your editing session, you can do  so,
  even  though you specified /NOOUTPUT, by using the line mode command
  WRITE to put the text  in  an  external  file  before  you  end  the
  session.

  No wildcard characters are allowed in the file specification.

/READ_ONLY

 /READ_ONLY
 /NOREAD_ONLY

  Determines whether EDT keeps a journal file and  creates  an  output
  file.  With the default /NOREAD_ONLY, EDT maintains the journal file
  and creates an output file when it processes the line  mode  command
  EXIT.   Using  the  /READ_ONLY  qualifier  is  like  using  both the
  /NOJOURNAL and /NOOUTPUT qualifiers.

  The following  command  line  invokes  EDT  to  edit  a  file  named
  CALENDAR.DAT, but does not create a journal file or an output file:

       $ EDIT/READ_ONLY CALENDAR.DAT

  Use /READ_ONLY when you are searching a file.  If you then  want  to
  modify  the  file,  use  the  line  mode  command WRITE to save your
  changes.  Remember, however, that you have no journal file.

/RECOVER

 /RECOVER
 /NORECOVER

  Determines whether or not EDT reads a journal file at the  start  of
  the editing session.  The default is /NORECOVER.

  When you use the  /RECOVER  qualifier,  EDT  reads  the  appropriate
  journal  file  and  processes  whatever  commands  it contains.  The
  appropriate syntax follows:

       $ EDIT/RECOVER MEMO.DAT

  If the journal file type is not JOU or the file name is not the same
  as the input file name, you must include both the /JOURNAL qualifier
  and the /RECOVER qualifier as follows:

       $ EDIT/RECOVER/JOURNAL=SAVE.XXX MEMO.DAT

  Because /NORECOVER is the default  for  EDT,  you  do  not  need  to
  specify it in a command line.

3 Examples

  1.   $ EDIT/OUTPUT=NEWFILE.TXT OLDFILE.TXT
           1       This is the first line of the file OLDFILE.TXT.
       *

  This  EDIT  command  invokes  the  EDT  editor  to  edit  the   file
  OLDFILE.TXT.   EDT looks for the EDTSYS logical name assignment.  If
  EDTSYS is not defined, EDT processes the system-wide startup command
  file SYS$LIBRARY:EDTSYS.EDT.  If this file does not exist, EDT looks
  for the EDTINI logical name assignment.  If EDTINI is  not  defined,
  EDT  looks  for the file named EDTINI.EDT in your default directory.
  If none of these files exists, EDT begins your  editing  session  in
  the  default  state.  When the session ends, the edited file has the
  name NEWFILE.TXT.

  2.   $ EDIT/RECOVER OLDFILE.TXT

  This EDIT command invokes the EDT editor to recover from an abnormal
  exit  during  a  previous  editing  session.   EDT  opens  the  file
  OLDFILE.TXT, and then processes the journal file OLDFILE.JOU.   Once
  the  journal  file  has  been  processed, you can resume interactive
  editing.
2 /FDL
  Invokes  the  FDL  Editor  (EDIT/FDL)  to  create  and  modify  File
  Definition  Language  (FDL)  files.  The /FDL qualifier is required.
  For a complete description of the Edit/FDL Utility,  including  more
  information  about  the EDIT/FDL command and its qualifiers, see the
  FDL Facility in the VAX/VMS Utilities Reference Volume.

  Format:

    EDIT/FDL file-spec
3 Parameters

 file-spec

  Specifies the FDL file to be created, modified, or optimized by  the
  editing session.  The default file type is FDL.
3 Command_Qualifiers

/ANALYSIS

 /ANALYSIS=fdl-file-spec

 Specifies the FDL file (generated by the Analyze/RMS_File Utility) to
  be used in the optimize script.

/CREATE

 /CREATE

 Allows you to create an output FDL file that does not  exist  without
  receiving  a  message  from  EDIT/FDL  stating that the file will be
  created.

/DISPLAY

 /DISPLAY=graph-option

 Specifies the type of graph you want displayed.  Legal graph  options
  are:

  LINE    Produces a graph of bucket size  versus  index  depth  as  a
          two-dimensional plot.

  FILL    Produces a graph of bucket size  versus  load  fill  percent
          versus index depth.

  KEY     Produces a graph of bucket size  versus  key  length  versus
          index depth.

  RECORD  Produces a graph of bucket size versus  record  size  versus
          index depth.

  INIT    Produces a graph of bucket size versus initial  load  record
          count versus index depth.

  ADD     Produces a graph of bucket  size  versus  additional  record
          count versus index depth.

  LINE is the default.

/EMPHASIS

 /EMPHASIS=tuning-bias

 Allows you to choose  between  smaller  buffers  and  flatter  files.
  Legal options for the tuning-bias parameter are:

  FLATTER_FILES    Generally increases bucket size.  The bucket  size,
                   in turn, controls the number of levels in the index
                   structure.  If a larger bucket size eliminates  one
                   level,  then  you  should use this option.  At some
                   point, however, the benefit of having fewer  levels
                   will  be offset by the cost of scanning through the
                   larger buckets.

  SMALLER_BUFFERS  Generally decreases the amount of memory  you  have
                   to  use.  Sequential files usually require only two
                   buffers.

  FLATTER_FILES is the default.

/GRANULARITY

 /GRANULARITY=n

 Allows you to divide an indexed  file  into  a  specified  number  of
  areas.  The default is three areas.

/NOINTERACTIVE

 /NOINTERACTIVE

 Causes EDIT/FDL to execute the Optimize  script  without  a  terminal
  dialog.   You  must  have previously issued the ANALYZE/RMS_FILE/FDL
  command, specifying your existing RMS data file as the target  file.
  If data is missing, EDIT/FDL uses the defaults.

/NUMBER_KEYS

 /NUMBER_KEYS=n

 Allows you to specify the number of keys in your indexed  file.   You
  can define up to 255 keys.  The default is one key.

/OUTPUT

 /OUTPUT=fdl-file-spec

 Identifies an output file for storing the  results  of  the  EDIT/FDL
  session.   If  you  omit  the /OUTPUT qualifier, the output FDL file
  will have the same name and file type  as  the  input  file  with  a
  version  number  one higher than the highest existing version of the
  file.

  The default file type is FDL.

/PROMPTING

 /PROMPTING=prompt-option

 Specifies the level of menu prompting to be used during the  terminal
  session.  The valid prompt options are:

  BRIEF  Selects a terse level of prompting.

  FULL   Provides more detailed information about each menu question.

  By  default,  EDIT/FDL  chooses  either  BRIEF  or  FULL   prompting
  depending  on  the  terminal class and line speed.  High-speed video
  terminals will get FULL,  while  nonscope  terminals  and  terminals
  operating at less than 2400 baud get BRIEF.

/RESPONSES

 /RESPONSES=response-option

 Allows you to select how you want to  respond  to  script  questions.
  Legal options include:

  AUTOMATIC  Indicates that you automatically want all script  default
             responses to be used.  If you select this option, you can
             use the /NOINTERACTIVE qualifier to cause EDIT/FDL to  be
             executed automatically.

  MANUAL     Indicates that you want to provide all script  responses.
             No default responses are automatically used.

  The default is AUTOMATIC.

/SCRIPT

 /SCRIPT=script-title
 /NOSCRIPT

  Controls whether to select a logically grouped sequence of questions
  for EDIT/FDL to ask.  Valid script titles are:

  ADD_KEY     Allows you to model or add to the attributes  of  a  new
              index.

  DELETE_KEY  Allows you to remove attributes from the  highest  index
              of your file.

  INDEXED     Begins  a  dialog  in  which  you   are   prompted   for
              information  about  the  indexed data file to be created
              from the FDL file.  EDIT/FDL supplies values for certain
              attributes.

  OPTIMIZE    Requires that you use the analysis information  from  an
              FDL  file  that  was  created  with the Analyze/RMS_File
              Utility.  The FDL file itself is one of  the  inputs  to
              the  Edit/FDL Utility.  In other words, you may tune the
              parameters of all your indexes using the file statistics
              from ANALYZE/RMS_FILE.

  RELATIVE    Begins  a  dialog  in  which  you   are   prompted   for
              information  about  the relative data file to be created
              from the FDL file.  EDIT/FDL supplies values for certain
              attributes.

  SEQUENTIAL  Begins  a  dialog  in  which  you   are   prompted   for
              information about the sequential data file to be created
              from the FDL file.  EDIT/FDL supplies values for certain
              attributes.

  TOUCHUP     Begins  a  dialog  in  which  you   are   prompted   for
              information  about  the  changes  you wish to make to an
              existing index.

  The default is /NOSCRIPT.

3 Examples

  1.   $ EDIT/FDL INDEX

  This command creates or modifies an FDL file named INDEX.FDL.

  2.   $ EDIT/FDL/OUTPUT=NEWINDEX INDEX

  This command begins a session in which the contents of INDEX.FDL are
  read  into  the  FDL  editor and can then be modified.  A file named
  NEWINDEX.FDL is created, and INDEX.FDL is not changed.
2 /TECO
  Invokes the TECO interactive text editor.  The  /TECO  qualifier  is
  required.

  Format:

    EDIT/TECO [file-spec] EDIT/TECO/EXECUTE=command-file [argument]
3 Parameters

 file-spec

  Specifies the file to be created or edited using  the  TECO  editor.
  If  the  file  does  not  exist,  it  is created by TECO, unless you
  specify /NOCREATE.  No wildcard characters are allowed in  the  file
  specification.

  If you do not enter a file  specification  and  you  have  specified
  /MEMORY (the default), TECO edits the file identified by the logical
  name TEC$MEMORY.  If there is no equivalence string for  TEC$MEMORY,
  or  if you have specified /NOMEMORY, TECO starts in command mode and
  does not edit an existing file.

  If you enter a file specification and have  specified  /MEMORY,  the
  file specification is equated to the logical name TEC$MEMORY.
3 Command_Qualifiers

/COMMAND

 /COMMAND[=file-spec]
 /NOCOMMAND

  Determines whether or not TECO uses a  startup  command  file.   The
  /COMMAND  file  qualifier  may  be followed by an equal sign and the
  specification of the  command  file.   The  default  file  type  for
  command files is TEC.

  The following command  line  invokes  TECO  to  edit  a  file  named
  MEMO.DAT  and  specifies  that TECO use a startup command file named
  XTECOINI.TEC:

       $ EDIT/TECO/COMMAND=XTECOINI.TEC MEMO.DAT

  If you do not include  the  /COMMAND  qualifier,  or  if  you  enter
  /COMMAND  without  specifying  a  command  file,  TECO looks for the
  TEC$INIT logical name assignment.  If TEC$INIT is  not  defined,  no
  startup commands are executed.

  The logical name TEC$INIT can equate either  to  a  string  of  TECO
  commands  or  to a dollar sign followed by a file specification.  If
  TEC$INIT translates to a string of  TECO  commands,  the  string  is
  executed;  if  it  translates  to  a  dollar sign followed by a file
  specification, the contents of the  file  are  executed  as  a  TECO
  command string.  For further information, see the PDP-11 TECO Editor
  Reference Manual.

  To prevent TECO  from  using  any  startup  command  file,  use  the
  /NOCOMMAND qualifier as follows:

       $ EDIT/TECO/NOCOMMAND MEMO.DAT

  If you enter  a  file  specification,  no  wildcard  characters  are
  allowed.

/CREATE

 /CREATE
 /NOCREATE

  Controls whether TECO creates a new file when  it  cannot  find  the
  specified  input  file  or,  if no input file is specified, the file
  specified by the logical name TEC$MEMORY, if any and if  /MEMORY  is
  specified.   Normally,  TECO  creates  a new file to match the input
  file specification if it cannot find the requested file name in  the
  specified  directory.   When  you  use /NOCREATE in the TECO command
  line and type a specification for a file that does not  exist,  TECO
  prints an error message and returns you to the DCL command level.

  If you specify the /EXECUTE qualifier,  the  /CREATE  and  /NOCREATE
  qualifiers are ignored.

/EXECUTE

 /EXECUTE=command-file [argument]

 Causes TECO to be invoked to execute a TECO macro.  The command  file
  contains the TECO macro to be executed.  The argument, if specified,
  appears in the text buffer when  macro  execution  starts.   If  the
  argument  contains blanks or special characters, it must be enclosed
  in quotes.

  For detailed information on the use of TECO macros, see  the  PDP-11
  TECO Editor Reference Manual.

  If you specify the  /EXECUTE  qualifier,  the  /CREATE  and  /MEMORY
  qualifiers are ignored.

/MEMORY

 /MEMORY
 /NOMEMORY

  Specifies  whether  the  last  file  that  you  edited  with   TECO,
  identified  by  the  logical  name TEC$MEMORY, will be edited if you
  omit the file specification on the EDIT/TECO command.   The  default
  is /MEMORY; that is, TEC$MEMORY is used.

/OUTPUT

 /OUTPUT=output-file
 /NOOUTPUT

  Determines the specification of the output file at the end  of  your
  editing session.  The default is /NOOUTPUT; that is, the output file
  specification is the same as for the input  file,  but  the  version
  number  is  increased  by  1.  Use the /OUTPUT qualifier to give the
  output file a different file specification from the input file.

  The following command  line  invokes  TECO  to  edit  a  file  named
  MEMO.DAT and gives the resulting output file the name OUTMEM.DAT:

       $ EDIT/TECO/OUTPUT=OUTMEM.DAT MEMO.DAT

  You can include directory information as part of  your  output  file
  specification to send output to another directory as follows:

       $ EDIT/TECO/OUTPUT=[BARRETT.MAIL]MEMO.DAT MEMO.DAT


  No wildcard characters are allowed in the file specification.

/READ_ONLY

 /READ_ONLY
 /NOREAD_ONLY

  Controls  whether  an  output  file  is  written.   If  you  specify
  /READ_ONLY, no output file is written.

  The default is /NOREAD_ONLY; that is, an output file is written.

3 Examples

  1.   $ EDIT/TECO/OUTPUT=NEWFILE.TXT OLDFILE.TXT

  This  EDIT  command  invokes  the  TECO  editor  to  edit  the  file
  OLDFILE.TXT.   TECO  looks for the TEC$INIT logical name assignment.
  If TEC$INIT is not defined, TECO begins the editing session  without
  using  a  command  file.  When the session ends, the edited file has
  the name NEWFILE.TXT.

  2.   $ EDIT/TECO/EXECUTE=FIND_DUPS "TEMP, ARGS, BLANK"

  The /EXECUTE qualifier causes the TECO macro contained in  the  file
  FIND_DUPS.TEC  to be executed, with the argument string "TEMP, ARGS,
  BLANK" located in the text buffer.
2 /SUM
  Invokes the SUMSLP batch-oriented editor, to update a  single  input
  file  with  multiple  files of edit commands.  The /SUM qualifier is
  required.

  For  a  complete  description  of  the  SUMSLP   editor,   including
  information  about  the EDIT/SUM command and its qualifiers, see the
  VAX/VMS Utilities Reference Volume manual.

  Format:

    EDIT/SUM input-file
3 Parameters

 input-file

  The file specification for the source file to be edited.
3 Command_Qualifiers

/HEADER

 /HEADER

 Produces a VFC-formated sequential output file  when  used  with  the
  /OUTPUT  qualifier.   The output file contains a fixed Record Header
  Block (RHB) that includes the line insert  number  and  audit  trail
  information.

/LISTING

 /LISTING[=file-spec]

 Requests a line-numbered listing file.  The listing  file  shows  the
  original lines, the inserted lines, and an audit trail.  By default,
  there is no listing file.  If you specify /LISTING  without  a  file
  specification, by default the listing file has the same file name as
  the input file.  The default file type is LIS.

  No wild card characters are allowed in the file specification.

/OUTPUT

 /OUTPUT[=file-spec]
 /NOOUTPUT

  Controls whether an output file is created for the editing  session.
  If  you do not specify /OUTPUT, by default an output file is created
  with the same file name and file type  as  the  input  file,  and  a
  version  number  one  higher  than the highest existing file version
  number.

  You can suppress the creation  of  the  output  file  by  specifying
  /NOOUTPUT.   This could be useful if all you need is a line-numbered
  listing file.

  No wild card characters are allowed in the file specification.
3 Positional_Qualifier

/UPDATE

 /UPDATE[=(update-file-spec[,...])]

 Provides the file specification of one or more files  containing  the
  editing commands and changes to be applied to the input source file.

  All update files must be disk files on a Files-11 formatted volume.

  If you omit  the  /UPDATE  file  specification,  by  default  SUMSLP
  updates  from a file with the same name as the input file and a file
  type of UPD.   If  you  omit  the  /UPDATE  qualifier  entirely,  no
  updating occurs; however, if you specify only /LISTING, you obtain a
  numbered listing.

  If you specify multiple update files, separate them  by  commas  and
  enclose  the  list  in parentheses.  Note that if you omit fields in
  the file specifications in the list, the default value is taken from
  the  immediately  preceding  file  specification.   When you specify
  multiple updates files, the files are combined  according  to  rules
  described in the VAX/VMS Utilities Reference Volume manual.

  No wild card characters are allowed in the file specification.

3 Examples

  1.   $ EDIT/SUM/LISTING=FILE1 FILE1.MAR/UPDATE

  The input source file FILE1.MAR is updated from the SUM update  file
  FILE1.UPD,  creating  a  line-numbered listing file, FILE1.LIS.  The
  resultant output file FILE1.MAR is created with a version one higher
  than that of the currently existing file.
