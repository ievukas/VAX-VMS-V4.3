MODULE SMG$DISPLAY_DRAW ( %TITLE 'Display line drawing'
		IDENT = '1-004'		! File: SMGDISDRW.B32 Edit: PLL1004
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1984 BY					    	    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Screen Management
!
! ABSTRACT:
!
!	This module contains routines that draw lines in a virtual display
!	using the line drawing character set.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: P. Levesque, CREATION DATE: 21-Sep-1983
!
! MODIFIED BY:
!
! 1-001	- Original.  PLL 21-Sep-1983
! 1-002 - Fix to $INSERT_LINE_CHAR to set proper rendition when ORing
!	  line drawing characters.  PLL 13-Apr-1984
! 1-003 - Fix bug preventing drawing of one character lines. STAN 3-Jun-1984.
! 1-004 - Don't pass SMG$C_PUT_CHARS as the function code to check_for_output_db
!	  - this makes output believe the change is confined to 1 line.  PLL 6-Sep-1984
!--

%SBTTL 'Declarations'
!
! SWITCHES:
!

REQUIRE 'RTLIN:SMGPROLOG';

REQUIRE 'RTLIN:STRLNK';		! JSB linkage for string routines
!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	SMG$DRAW_LINE,
	SMG$DRAW_RECTANGLE;

!
! INCLUDE FILES:
!


!
! MACROS:
!
!+
! The following macro inserts a line drawing character into the text
! buffer and checks to see if the previous character was a line drawing
! character.  If it was, it ORs in the new character so that intersecting
! lines will appear correctly on the screen.  Notice that although border
! elements are line drawing characters, we ignore those here - we only want
! proper intersections with other lines the user drew.
!-
    MACRO 
	$INSERT_LINE_CHAR (CHAR) =
	BEGIN
	IF .(ATTR_BUF [.POS])<ATTR_V_USER_GRAPHIC, 1>
	THEN
	    BEGIN
	    TEXT_BUF [.POS] = .TEXT_BUF [.POS] OR CHAR;
	    ATTR_BUF [.POS] = .ATTR_BUF [.POS] AND
		(NOT (SMG$M_BLINK+SMG$M_BOLD+SMG$M_REVERSE+SMG$M_UNDERLINE))
		OR .REND_CODE;
	    END
	ELSE
	    BEGIN
	    TEXT_BUF [.POS] = CHAR;
	    ATTR_BUF [.POS] = ATTR_M_USER_GRAPHIC OR .REND_CODE;
	    END;
	END%;

!+
! This macro resets a line to single wide/high.  The line must be
! blanked first.
!-
    MACRO
	$RESET_LINE  (LINE_NO) =
	BEGIN			! reset/blank line
	LOCAL
	    START_INDEX;
	START_INDEX = $SMG$LINEAR (LINE_NO, .DCB [DCB_W_COL_START]);
	$SMG$BLANK_FILL_DCB (.DCB [DCB_W_NO_COLS], .START_INDEX);
	LINE_CHAR [LINE_NO] = 0;
	END%;			! reset/blank line

!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	SMG$$CHECK_FOR_OUTPUT_DCB;	! check if time to repaint display

EXTERNAL LITERAL
	SMG$_INVDIS_ID,			! Invalid display id
	SMG$_INVARG,			! Invalid argument
	SMG$_INVCOL,			! Invalid column number
	SMG$_INVROW,			! Invalid row number
	SMG$_DIALINNOT,			! Diagonal line not allowed
	SMG$_WRONUMARG;			! Wrong number of arguments

%SBTTL 'SMG$DRAW_LINE - Draw a line in a virtual display'
GLOBAL ROUTINE SMG$DRAW_LINE (
					DISPLAY_ID,
					START_ROW,
					START_COL,
				 	END_ROW,
					END_COL,
					RENDITION_SET,
					RENDITION_COMPLEMENT
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine draws a line from START_ROW, START_COL to END_ROW, END_COL.
!	Device independent codes are moved to the display text and
!	attributes buffers - output later figures out what characters
!	to use based on the type of terminal.
!
!	The internal cursor position is not changed.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v  =   SMG$DRAW_LINE   (DISPLAY_ID.rl.r,
!					       START_ROW.rl.r, START_COL.rl.r,
!					       END_ROW.rl.r, END_COL.rl.r
!					       [,RENDITION_SET.rl.r]
!					       [,RENDITION_COMPLEMENT.rl.r])
!
! FORMAL PARAMETERS:
!
!	DISPLAY_ID.rl.r		Display id of virtual display
!
!	START_ROW.rl.r		Address of row number at which
!				to start line.  
!
!	START_COL.rl.r		Address of column number at which
!				to start line.  
!
!	END_ROW.rl.r		Address of row number at which
!				to end line.  
!
!	END_COL.rl.r		Address of column number at which
!				to end line.  
!
!	RENDITION_SET.rl.r	Optional.  Each 1 bit in this parameter
!				causes the corresponding attribute to be
!				set in the display.  (See below for list
!				of settable attributes.)
!
!	RENDITION_COMPLEMENT.rl.r Optional.  Each 1 bit attribute in this
!				  parameter causes the corresponding attribute
!				  to be complemented in the display.  (See
!				  below for list of complementable attributes.)
!
!	If the same bit is specified in both the RENDITION_SET parameter
!	and in the RENDITION_COMPLEMENT parameter, the application is
!	RENDITION_SET followed by RENDITION complement.  Using these two
!	parameters together the caller can exercise arbitrary and
!	independent control over each attribute on a single call.  On an
!	attribute by attribute basis he can cause the following
!	transformations:
!
!		SET	COMPLEMENT	Action
!		---	__________	______
!		0	0		Attribute unchanged.
!		1	0		Attribute set to "on"
!		0	1		Attribute set to complement of
!					current setting.
!		1	1		Attribute set to "off".
!
!
!	Attributes which can be manipulated in this manner are:
!
!	SMG$M_BLINK  displays characters blinking.
!	SMG$M_BOLD  displays characters in higher-than-normal 
!		      intensity.
!	SMG$M_REVERSE  displays characters in reverse video -- that is, 
!		      using the opposite default rendition of the 
!		      virtual display.
!	SMG$M_UNDERLINE  displays characters underlined.
!
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	SS$_NORMAL	Normal successful completion
!	SMG$_INVCOL	Invalid column number
!	SMG$_INVROW	Invalid row number
!	SMG$_DIALINNOT  Diagonal line not allowed
!	SMG$_WRONUMARG  Wrong number of arguments
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	WORK_S_ROW,			! local temporaries
	WORK_S_COL,			!   "
	WORK_E_ROW,			!   "
	WORK_E_COL,			!   "
	TEXT_BUF : REF VECTOR [,BYTE],	! ptr to dcb text buffer
	ATTR_BUF : REF VECTOR [,BYTE],	! ptr to dcb attr buffer
	DIR : INITIAL (0),		! direction of line
	REND_CODE,			! rendition code to use
	DCB : REF BLOCK [,BYTE];	! addr of display control block

    LITERAL
	K_SET_ARG = 6,			! arg number of rend set
	K_COMP_ARG = 7,			! arg number of rend complement
	K_HORIZ = 1;			! line is horizontal


    $SMG$GET_DCB (.DISPLAY_ID, DCB);	! get addr of virtual display
					! control block
    TEXT_BUF = .DCB [DCB_A_TEXT_BUF];
    ATTR_BUF = .DCB [DCB_A_ATTR_BUF];

!+
! Validate arguments passed.  Check for optionals.
!-

    $SMG$VALIDATE_ARGCOUNT (5, 7);

    $SMG$VALIDATE_ROW_COL (..START_ROW, ..START_COL);

    $SMG$VALIDATE_ROW_COL (..END_ROW, ..END_COL);

    $SMG$SET_REND_CODE (K_SET_ARG, K_COMP_ARG);
					! macro to use caller's args if present

!+
! Use local temporary storage for start and end points.  We don't know
! the order in which the points will be passed, but our code assumes
! left to right order for horizontal lines, and up to down order for vertical
! lines.
!-

    IF ..START_ROW EQL ..END_ROW
    THEN
	DIR = K_HORIZ
    ELSE
	IF ..START_COL NEQ ..END_COL
	THEN
	    RETURN (SMG$_DIALINNOT);

    IF .DIR EQL K_HORIZ
    THEN
	BEGIN
    	IF ..START_COL LSS ..END_COL
    	THEN
	    BEGIN
	    WORK_S_COL = ..START_COL;
	    WORK_S_ROW = ..START_ROW;
	    WORK_E_COL = ..END_COL;
	    WORK_E_ROW = ..END_ROW;
	    END
    	ELSE
	    BEGIN
	    WORK_S_COL = ..END_COL;
	    WORK_S_ROW = ..END_ROW;
	    WORK_E_COL = ..START_COL;
	    WORK_E_ROW = ..START_ROW;
	    END;
    	END
    ELSE				! vertical line
	IF ..START_ROW LSS ..END_ROW
	THEN
	    BEGIN
	    WORK_S_COL = ..START_COL;
	    WORK_S_ROW = ..START_ROW;
	    WORK_E_COL = ..END_COL;
	    WORK_E_ROW = ..END_ROW;
	    END
	ELSE
	    BEGIN
	    WORK_S_COL = ..END_COL;
	    WORK_S_ROW = ..END_ROW;
	    WORK_E_COL = ..START_COL;
	    WORK_E_ROW = ..START_ROW;
	    END;

!+
! Reset the line characteristics vector in case there was previously
! some double high or double wide text.
!
! We may be dealing with a vertical or horizontal line.  A vertical line
! will require re-setting multiple entries in the vector.
!-

    BEGIN
    BIND
	LINE_CHAR = .DCB [DCB_A_LINE_CHAR];
    MAP
	LINE_CHAR : VECTOR [,BYTE];
	
    IF .DIR EQL K_HORIZ			! horiz line - reset 1 ele of vector
    THEN
	BEGIN
	IF .LINE_CHAR [.WORK_S_ROW] NEQ 0
	THEN
	    $RESET_LINE (.WORK_S_ROW);
	END
    ELSE
	BEGIN				! vert line - reset multi elements
	INCR ROW FROM .WORK_S_ROW TO .WORK_E_ROW DO
	    BEGIN
	    IF .LINE_CHAR [.ROW] NEQ 0	
	    THEN
		$RESET_LINE (.ROW);
	    END;
	END;				
    
    END;

!+
! Insert the generic text byte for line drawing into the text buffer.
! (Notice that there are different representations for horizontal, vertical,
! corners, etc.)  Set a bit in the attribute byte so the output routines
! will re-interpret the generic text into the device specific character.
!
! We move one character at a time since it may be necessary to OR elements
! (see description of macro above).
!-

    BEGIN
    LOCAL
	POS,				! linear index into text buffer
	LENGTH;				! calc length of line

    POS = $SMG$LINEAR (.WORK_S_ROW, .WORK_S_COL);
    
    IF .DIR EQL K_HORIZ			! horizontal line
    THEN
	BEGIN
	LENGTH = .WORK_E_COL - .WORK_S_COL + 1;

	$INSERT_LINE_CHAR (BORD_M_RIGHT);
	POS = .POS + 1;

	INCR NUM_CHAR FROM 2 TO (.LENGTH - 1) DO
 	    BEGIN
	    $INSERT_LINE_CHAR (BORD_M_HORIZ);
	    POS = .POS + 1;
	    END;

	IF .LENGTH GTR 1
	THEN
	    $INSERT_LINE_CHAR (BORD_M_LEFT);

	END
    ELSE
	BEGIN				! vertical line
	LENGTH = .WORK_E_ROW - .WORK_S_ROW + 1;

	$INSERT_LINE_CHAR (BORD_M_DOWN);
	POS = .POS + .DCB [DCB_W_NO_COLS];

	INCR ROW FROM 2 TO (.LENGTH - 1) DO
	    BEGIN
	    $INSERT_LINE_CHAR (BORD_M_VERT);
	    POS = .POS + .DCB [DCB_W_NO_COLS];
	    END;

	IF .LENGTH GTR 1
	THEN
	    $INSERT_LINE_CHAR (BORD_M_UP);

	END;

    END;

!+
! See if this change should be reflected on the screen immediately.
!-

    RETURN (SMG$$CHECK_FOR_OUTPUT_DCB (.DCB,
				       0,
				       .WORK_S_ROW));
    

    END;				! End of routine SMG$DRAW_LINE

%SBTTL 'SMG$DRAW_RECTANGLE - Draw a rectangle in a virtual display'
GLOBAL ROUTINE SMG$DRAW_RECTANGLE   (
					DISPLAY_ID,
					TOP_LEFT_ROW,
					TOP_LEFT_COL,
					BOTTOM_RIGHT_ROW,
					BOTTOM_RIGHT_COL,
					RENDITION_SET,
					RENDITION_COMPLEMENT
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine draws a rectangle in a virtual display.  Given
!	two points in opposite corners of the rectangle, it determines
!	the desired width and height.
!
! Top left row, col *------------------------
!		    |			    |
!		    |			    |
!		    |		 	    |
!		    |			    |
!		    ------------------------* Bottom right row, col
!
!	Device independent codes are placed in the display text and
!	attribute buffers.  Output decides which line drawing characters
!	to use based on the type of terminal.
!
!	The internal cursor position is not changed.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SMG$DRAW_RECTANGLE (DISPLAY_ID.rl.r,
!				               TOP_LEFT_ROW.rl.r, 
!					       TOP_LEFT_COL.rl.r,
!				               BOTTOM_RIGHT_ROW.rl.r, 
!					       BOTTOM_RIGHT_COL.rl.r,
!					       [,RENDITION_SET.rl.r]
!					       [,RENDITION_COMPLEMENT.rl.r]
!
! FORMAL PARAMETERS:
!
!	DISPLAY_ID.rl.r		Display id of virtual display
!
!	TOP_LEFT_ROW.rl.r	Address of the row number of the top left
!				hand corner of the rectangle.
!
!	TOP_LEFT_COL.rl.r	Address of the column number of the top
!				left hand corner of the rectangle.
!
!	BOTTOM_RIGHT_ROW.rl.r	Address of the row number of the bottom right
!				hand corner of the rectangle.
!
!	BOTTOM_RIGHT_COL.rl.r	Address of the column number of the bottom
!				right hand corner of the rectangle.
!
!	RENDITION_SET.rl.r	Optional.  Each 1 bit in this parameter
!				causes the corresponding attribute to be
!				set in the display.  (See below for list
!				of settable attributes.)
!
!	RENDITION_COMPLEMENT.rl.r Optional.  Each 1 bit attribute in this
!				  parameter causes the corresponding attribute
!				  to be complemented in the display.  (See
!				  below for list of complementable attributes.)
!
!
!	If the same bit is specified in both the RENDITION_SET parameter
!	and in the RENDITION_COMPLEMENT parameter, the application is
!	RENDITION_SET followed by RENDITION complement.  Using these two
!	parameters together the caller can exercise arbitrary and
!	independent control over each attribute on a single call.  On an
!	attribute by attribute basis he can cause the following
!	transformations:
!
!		SET	COMPLEMENT	Action
!		---	__________	______
!		0	0		Attribute unchanged.
!		1	0		Attribute set to "on"
!		0	1		Attribute set to complement of
!					current setting.
!		1	1		Attribute set to "off".
!
!
!	Attributes which can be manipulated in this manner are:
!
!	SMG$M_BLINK  displays characters blinking.
!	SMG$M_BOLD  displays characters in higher-than-normal 
!		      intensity.
!	SMG$M_REVERSE  displays characters in reverse video -- that is, 
!		      using the opposite default rendition of the 
!		      virtual display.
!	SMG$M_UNDERLINE  displays characters underlined.
!
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	SS$_NORMAL	Normal successful completion
!	SMG$_INVCOL	Invalid column number
!	SMG$_INVROW	Invalid row number
!	SMG$_WRONUMARG  Wrong number of arguments
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	BLROW,				! bottom left row
	BLCOL,				! bottom left column
	TRROW,				! top right row
	TRCOL,				! top right column
	POS,				! linear index into buffers
	LENGTH,				! length of line to draw
	TEXT_BUF : REF VECTOR [,BYTE],	! ptr to dcb text buffer
	ATTR_BUF : REF VECTOR [,BYTE],	! ptr to dcb attr buffer
	REND_CODE,			! rendition code to use
	DCB : REF BLOCK [,BYTE];	! addr of display control block

    BIND
	BRROW = .BOTTOM_RIGHT_ROW,
	BRCOL = .BOTTOM_RIGHT_COL,
	TLROW = .TOP_LEFT_ROW,
	TLCOL = .TOP_LEFT_COL;

    LITERAL
	K_SET_ARG = 6,			! arg number of rend set
	K_COMP_ARG = 7;			! arg number of rend complement


    $SMG$GET_DCB (.DISPLAY_ID, DCB);	! get addr of virtual display
					! control block
    TEXT_BUF = .DCB [DCB_A_TEXT_BUF];
    ATTR_BUF = .DCB [DCB_A_ATTR_BUF];

!+
! Validate arguments passed.  Check for optionals.
!-

    $SMG$VALIDATE_ARGCOUNT (5, 7);

    $SMG$VALIDATE_ROW_COL (.TLROW, .TLCOL);

    $SMG$VALIDATE_ROW_COL (.BRROW, .BRCOL);

    $SMG$SET_REND_CODE (K_SET_ARG, K_COMP_ARG);
					! macro to use caller's args if present

!+
! The caller passed us two of four points needed to construct a rectangle.
! Compute the other two and make sure they are within the display.
!-

    BLROW = .BRROW;
    BLCOL = .TLCOL;
    TRROW = .TLROW;
    TRCOL = .BRCOL;

    $SMG$VALIDATE_ROW_COL (.BLROW, .BLCOL);
    $SMG$VALIDATE_ROW_COL (.TRROW, .TRCOL);

!+
! We need to draw 4 lines, 2 horizontal and 2 vertical.  
!
! Draw the top.
!-

    BEGIN
    BIND
	LINE_CHAR = .DCB [DCB_A_LINE_CHAR];
    MAP
	LINE_CHAR : VECTOR [,BYTE];

    !+
    ! Reset the line characteristics vector if there was previously
    ! some double high or double wide text.
    !-

    IF .LINE_CHAR [.TLROW] NEQ 0
    THEN
	$RESET_LINE (.TLROW);

    !+
    ! Move horizontal characters to text buffer.  Horizontal chars consist
    ! of a left & right segment - the left end of the line needs only a right
    ! segment, the right end of the line needs a left segment, and all the
    ! positions in between need both.  Corners will automatically form the
    ! correct characters by ORing the up/down and right/left elements.
    !-

    POS = $SMG$LINEAR (.TLROW, .TLCOL);
    LENGTH = .TRCOL - .TLCOL + 1;

    $INSERT_LINE_CHAR (BORD_M_RIGHT);
    POS = .POS + 1;

    INCR NUM_CHAR FROM 2 TO (.LENGTH - 1) DO
    BEGIN
	$INSERT_LINE_CHAR (BORD_M_HORIZ);
	POS = .POS + 1;
    END;
    
    $INSERT_LINE_CHAR (BORD_M_LEFT);

!+
! Draw the bottom.
!-

    IF .LINE_CHAR [.BLROW] NEQ 0
    THEN
	$RESET_LINE (.BLROW);		! reset if prev. dbl hi/wide

    POS = $SMG$LINEAR (.BLROW, .BLCOL);
    LENGTH = .BRCOL - .BLCOL + 1;

    $INSERT_LINE_CHAR (BORD_M_RIGHT);	! left end of line
    POS = .POS + 1;

    INCR NUM_CHAR FROM 2 TO (.LENGTH - 1) DO  ! middle of line
    BEGIN
	$INSERT_LINE_CHAR (BORD_M_HORIZ);
	POS = .POS + 1;
    END;

    $INSERT_LINE_CHAR (BORD_M_LEFT);	! right end of line

!+
! Draw the right.
!-

    !+
    ! A vertical line requires resetting multi elements in
    ! the line characteristics vector.
    !-

    INCR ROW FROM .TRROW TO .BRROW DO
    BEGIN
	IF .LINE_CHAR [.ROW] NEQ 0	
	THEN
	    $RESET_LINE (.ROW);
    END;

    POS = $SMG$LINEAR (.TRROW, .TRCOL);
    LENGTH = .BRROW - .TRROW + 1;

    $INSERT_LINE_CHAR (BORD_M_DOWN);
    POS = .POS + .DCB [DCB_W_NO_COLS];

    INCR ROW FROM 2 TO (.LENGTH - 1) DO	
    BEGIN
	$INSERT_LINE_CHAR (BORD_M_VERT);
	POS = .POS + .DCB [DCB_W_NO_COLS];
    END;

    $INSERT_LINE_CHAR (BORD_M_UP);

!+
! Draw the left.
!-

    INCR ROW FROM .TLROW TO .BLROW DO
    BEGIN
	IF .LINE_CHAR [.ROW] NEQ 0	
	THEN
	    $RESET_LINE (.ROW);
    END;

    POS = $SMG$LINEAR (.TLROW, .TLCOL);
    LENGTH = .BLROW - .TLROW + 1;

    $INSERT_LINE_CHAR (BORD_M_DOWN);
    POS = .POS + .DCB [DCB_W_NO_COLS];

    INCR ROW FROM 2 TO (.LENGTH - 1) DO	
    BEGIN
	$INSERT_LINE_CHAR (BORD_M_VERT);
	POS = .POS + .DCB [DCB_W_NO_COLS];
    END;

    $INSERT_LINE_CHAR (BORD_M_UP);

    END;


!+
! See if this change should be reflected on the screen immediately.
!-

    RETURN (SMG$$CHECK_FOR_OUTPUT_DCB (.DCB,
				       0,	! no function code for this
				       .TLROW));
    

    END;				! End of routine SMG$DRAW_RECTANGLE
!<BLF/PAGE>

END					! End of module SMG$DISPLAY_DRAW

ELUDOM
