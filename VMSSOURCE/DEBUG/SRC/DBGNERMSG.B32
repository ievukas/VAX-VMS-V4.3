MODULE DBGNERMSG (IDENT = 'V04-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DEBUG
!
! ABSTRACT:
!
!	Version 3 debugger error output routines are contained in this module. In
!	contrast to the version 2 debugger, error messages are not handled by the
!	exception handling mechanism. That is, error messages are not SIGNALed. The
!	routines in this module call SYS$PUTMSG to recover and format the DEBUG
!	messages from the system message file. The address of the version 2 debugger
!	routine dbg$out_message is suppied as an action routine. It is this routine
!	which actually outputs the message. SYS$PUTMSG is used instead of SYS$GETMSG
!	because the parameters to SYS$PUTMSG resemble the the vector of longwords
!	formed by a SIGNAL, a format which dbg$out_message expects.
!
! ENVIRONMENT:	VAX/VMS
!
! AUTHOR:	David Plummer, CREATION DATE:	4/10/80
!
! MODIFIED BY:
!		David Plummer, 10-Jul-80, DLP
!
!
! 2.2-001	10-Jul-80	DLP	Added check for a null message vector ptr
!
!
!	R. Title	Feb 1983	Added parse and execute of DUMP
!					command to this module (for lack
!					of a better place to put it).
!					This command is used by developers
!					to dump DEBUG internals.

! VERSION:	V02.2-002
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    	DBG$NPARSE_DUMP,		! Parse DUMP command
    	DBG$NEXECUTE_DUMP,		! Execute DUMP command
	DBG$NOUT_INFO,			! Outputs an informational message
	DBG$NMAKE_ARG_VECT,		! Constructs a standard message argument vector
	DBG$NOUT_ARG_VECT : NOVALUE,	! Outputs a message argument vector
	DBG$NSYNTAX_ERROR;		! Constructs a syntax error message vect

!
! REQUIRE FILES:
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
    	DBG$ANALYZE_HASH: NOVALUE,		     ! Dump info about hash chains
    	DBG$DUMP_GLOBAL: NOVALUE,		     ! Dump info about GST
    	DBG$DUMP_SAT: NOVALUE,			     ! Dump info about SAT
	DBG$GET_TEMPMEM,			     ! Allocates listed dynamic storage
    	DBG$NMATCH,				     ! Match input string
    	DBG$NNEXT_WORD,				     ! Get next word in input
	DBG$OUT_MESSAGE : NOVALUE, 		     ! Called as an action routine by SYS$PUTMSG to
					   	     ! output the error message.
	SYS$PUTMSG      : ADDRESSING_MODE (GENERAL); ! System message output routine

EXTERNAL
    	DBG$GL_DEVELOPER: BITVECTOR[];		     ! Developer flags

!
! LITERALS
!
! Used for communication between PARSE_DUMP and EXECUTE_DUMP.
!
LITERAL
    	DUMP_MIN  = 0,
    	DUMP_HASH = 0,
    	DUMP_SAT  = 1,
    	DUMP_GST  = 2,
    	DUMP_MAX  = 2;

GLOBAL ROUTINE DBG$NPARSE_DUMP (INPUT_DESC, VERB_NODE, MESSAGE_VECT) =
!
! FUNCTION
!	This routine parses the DUMP command. This command dumps internal
!	DEBUG data structures. The command is only available to developers.
!
! INPUTS
!	INPUT_DESC	- The remaining command string.
!	VERB_NODE	- Pointer to partially constructed parse tree
!	MESSAGE_VECT	- Error message vector
!
! OUTPUTS
!	Information is printed at the terminal.
!	The input string is updated to point beyond what we picked up.
!	A return status is returned.
!
    BEGIN
    MAP
    	INPUT_DESC: REF DBG$STG_DESC,
    	VERB_NODE: REF DBG$VERB_NODE;

    BIND
    	DBG$CS_CR	= UPLIT BYTE (1, DBG$K_CAR_RETURN),
    	DBG$CS_GST	= UPLIT BYTE (3, 'GST'),
    	DBG$CS_HASH	= UPLIT BYTE (4, 'HASH'),
    	DBG$CS_SAT	= UPLIT BYTE (3, 'SAT');

    ! Check developer flag 0. This enables the DUMP command.
    !
    IF NOT .DBG$GL_DEVELOPER[0]
    THEN
    	BEGIN
    	.MESSAGE_VECT = DBG$NSYNTAX_ERROR(UPLIT BYTE(%ASCIC 'DUMP'));
    	RETURN STS$K_SEVERE;
    	END; 

    ! Pick up the keyword. At the moment, we only support DUMP HASH,
    ! but more keywords may be added later.
    !
    SELECTONE TRUE OF
    	SET
    	
    	! DUMP GST
    	!
    	[DBG$NMATCH (.INPUT_DESC, DBG$CS_GST, 1)]:
    	    BEGIN
    	    VERB_NODE[DBG$L_VERB_OBJECT_PTR] = DUMP_GST;
    	    END;

    	! DUMP HASH.
    	!
    	[DBG$NMATCH (.INPUT_DESC, DBG$CS_HASH, 1)]:
    	    BEGIN
    	    VERB_NODE[DBG$L_VERB_OBJECT_PTR] = DUMP_HASH;
    	    END;

    	! DUMP SAT.
    	!
    	[DBG$NMATCH (.INPUT_DESC, DBG$CS_SAT, 1)]:
    	    BEGIN
    	    VERB_NODE[DBG$L_VERB_OBJECT_PTR] = DUMP_SAT;
    	    END;

    	! Any other DUMP argument is a syntax error.
    	!
    	[OTHERWISE]:
    	    BEGIN
    	    .MESSAGE_VECT = (
    		IF DBG$NMATCH(.INPUT_DESC, DBG$CS_CR, 1)
    		THEN
    		    DBG$NMAKE_ARG_VECT(DBG$_NEEDMORE)
    		ELSE
    		    DBG$NSYNTAX_ERROR(DBG$NNEXT_WORD(.INPUT_DESC)));
    	    RETURN STS$K_SEVERE;
    	    END;
    	TES;
    RETURN STS$K_SUCCESS;
    END;

GLOBAL ROUTINE DBG$NEXECUTE_DUMP (VERB_NODE, MESSAGE_VECT) =
! 
! FUNCTION
!	Performs the action associated with the DUMP command.
!
! INPUTS
!	VERB_NODE	- A pointer to the command tree
!	MESSAGE_VECT	- Error message vector
!
! OUTPUTS
!	Information about internal DEBUG data structures will be printed
!	at the terminal. A status code is returned.
!
    BEGIN
    MAP
    	VERB_NODE: REF DBG$VERB_NODE;

    ! Case on the DUMP keyword. DUMP HASH is the only one we currently
    ! support.
    !
    CASE .VERB_NODE[DBG$L_VERB_OBJECT_PTR] FROM DUMP_MIN TO DUMP_MAX OF
    	SET

    	[DUMP_GST]:
    	    DBG$DUMP_GLOBAL();

    	[DUMP_HASH]:
    	    DBG$ANALYZE_HASH();

    	[DUMP_SAT]:
    	    DBG$DUMP_SAT();

    	[INRANGE, OUTRANGE]:
    	    $DBG_ERROR('DBGNERMSG\DBG$NEXECUTE_DUMP');

    	TES;
    RETURN STS$K_SUCCESS;
    END;

GLOBAL ROUTINE DBG$NOUT_INFO (ERROR_CODE) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine outputs an informational message to the user's terminal and/or
!	log file.
!
!	This routine will not output message that do not have an informational
!	level of severity.
!
! FORMAL PARAMETERS:
!
!	error_code	- A longword containing an integer value corresponding
!			  to a DEBUG info message code
!
!	[fao_count]	- A longword containing the number of fao arguments supplied
!			  in conjunction with the first message code. This optional
!			  parameter MUST be supplied if ANY fao arguments are supplied.
!
!	[fao_first, ...] - A longword containing an fao argument to be incorperated
!			  into the info message text
!
!	[next_code, next_count, next_fao, ...]
!
!			- The next message code, fao_count, fao_argument sequence.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	sts$k_success (1) - Success. Informational message output.
!
!	sts$k_severe  (4) - Failure. Message not an info and not output.
!
! SIDE EFFECTS:
!
!	Outputs an informational message(s) to the user's terminal and/or log file.
!
!--
    BEGIN

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER;

    LOCAL
	NUM_ACTUALS,		! Number of actual parameters
	I,				! Loop counter
	ERROR_VECT,			! Message vector
	ARG_VECT : REF VECTOR;	! The message argument vector


    ! Make sure that the message code corresponds to an info
    !
    IF .error_code <0, 3, 0> NEQ sts$k_info
    THEN 
	RETURN sts$k_severe;


    ! Make the argument vector
    !
    num_actuals = actualcount ();

    arg_vect = dbg$get_tempmem(.num_actuals + 1);
    arg_vect [0] = .num_actuals;

    INCR i FROM 1 TO .num_actuals 
    DO
	arg_vect [.i] = actualparameter (.i);


    ! Output the message
    !
    dbg$nout_arg_vect (.arg_vect);

    RETURN sts$k_success;
  
    END;	! End of dbg$nout_info


GLOBAL ROUTINE DBG$NMAKE_ARG_VECT (ERROR_CODE) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Creates a message argument vector as described on page 4-119 of
!	the VAX/VMS system reference, volume 1A.
!
!	This routine ALWAYS returns the address of a message argument vector.
!
! FORMAL PARAMETERS:
!
!	error_code	- A longword containing an integer corresponding to a
!			  DEBUG message code
!
!	[fao_count]	- A longword containing the number of fao arguments supplied
!			  in conjunction with error_code. This optional parameter
!			  MUST be supplied if ANY fao arguments are supplied.
!
!	[fao_first, ...] - A longword containing an FAO argument to be inserted
!			  into the text of a DEBUG message
!
!		Note that the above sequence may be repeated to construct an argument
!		vector for concatenated messages.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	An unsigned integer longword corresponding to the address of a message 
!	argument vector.
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER;

    LOCAL
	    NUM_ACTUALS,		! Number of actual parameters
	    I,				! Loop counter
	    ERROR_VECT,			! Error vector pointer
	    ARG_VECT : REF VECTOR;	! Messagr argument vector


    ! Make the argument vector
    !	
    num_actuals = actualcount ();

    arg_vect = dbg$get_tempmem(.num_actuals + 1);
    arg_vect [0] = .num_actuals;

    INCR i FROM 1 TO .num_actuals
    DO
	arg_vect [.i] = actualparameter (.i);

    RETURN .arg_vect;

    END;	! End of dbg$nmake_arg_vect


GLOBAL ROUTINE DBG$NOUT_ARG_VECT (ARGUMENT_VECT) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Outputs the DEBUG error message corresponding to the input message
!	argument vector to the user's terminal and/or log file.
!
!	This routine should be invoked directly only by the DEBUG CLI.
!
! FORMAL PARAMETERS:
!
!	argument_vect	- A longword containing the address of a message argument
!			  vector as described on page 4-119 of the VAX/VMS system
!			  reference, volume 1A
!
! IMPLICIT INPUTS:
!
!	The parameter argument_vect is set to 0 after the output
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Writes a DEBUG error message to the user's terminal and/or log file.
!
!	This routine signals a debugbug if there is no message to output.
!
!--
    BEGIN


    ! Check for no error message to output. 
    !
    IF .argument_vect EQLA 0
    THEN
    	$DBG_ERROR('DBGNERMSG\DBG$NOUT_ARG_VECT');

    ! Output the message.
    !
    SYS$PUTMSG (.argument_vect, dbg$out_message, 0);

    RETURN;

    END;	! End of dbg$nout_arg_vect


GLOBAL ROUTINE DBG$NSYNTAX_ERROR (WORD_STRING) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Called as a result of the detection of a syntax error. Constructs a
!	syntax error message argument vector.
!
! FORMAL PARAMETERS:
!
!	word_string - 		The word corresponding to the syntax error
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The message argument vector associated with the syntax error. This includes
!	an ascii string descriiptor which points to the syntax error string.
!
! ROUTINE VALUE:	
!
!	The beginning address of the message argument vector
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN

    MAP
	WORD_STRING : REF VECTOR [,BYTE];

    LOCAL
	ERROR_VECT,			! Error message pointer
	STRING_DESC : REF dbg$stg_desc;	! String descriptor for error message


    ! Get storage for the string descriptor
    !
    string_desc = dbg$get_tempmem(2);


    ! make the string descriptor
    !
    string_desc [dsc$w_length] = .word_string [0];
    string_desc [dsc$a_pointer] = word_string [1];


    ! Construct the vector and return it.
    !
    error_vect = dbg$nmake_arg_vect (dbg$_syntax, 1, .string_desc);

    RETURN .error_vect;

    END;	! End of dbg$nsyntax_error


END
ELUDOM
