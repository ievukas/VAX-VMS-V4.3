MODULE PAS$LOOK_AHEAD ( %TITLE 'Resolve lazy-lookahead'
		IDENT = '1-002'		! File: PASLOOKAH.B32 Edit: SBL1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This procedure is called by the compiled code when a textfile
!	file buffer is undefined.  If lazy-lookahead is in progress
!	for that file, it gets the next record and returns.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
! 1-002 - Look at the new FCB$V_INITIATE_PROMPT to see if PAS$$PROMPT_ALL
!	  should be called.  SBL 15-Dec-1982
!--

%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$LOOK_AHEAD: CALL_SAVEALL NOVALUE,	! Resolve lazy-lookahead
    PAS$$LOOK_AHEAD: JSB_LOOK_AHEAD NOVALUE;	! Internally callable

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!

%SBTTL 'PAS$LOOK_AHEAD - Resolve lazy lookahead'
GLOBAL ROUTINE PAS$LOOK_AHEAD (			! Resolve lazy lookahead
	PFV: REF $PAS$PFV_FILE_VARIABLE 	! File variable
    ): CALL_SAVEALL NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAS$LOOKAHEAD is to be called if a textfile file buffer is
!	undefined (PFV$V_DFB clear) and the caller wishes to access
!	the file buffer.  See PAS$$LOOK_AHEAD for more information.
!
! CALLING SEQUENCE:
!
!	CALL PAS$LOOK_AHEAD (PFV.mr.r)
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	See PAS$$LOOK_AHEAD
!
! SIGNALLED ERRORS:
!
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,		! File control block
	PFV_ADDR: VOLATILE,				! Enable argument
	UNWIND_ACT: VOLATILE;				! Enable argument

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT);

    !+
    ! Set enable argument for PFV address.
    !-

    PFV_ADDR = PFV [PFV$R_PFV];		! Set PFV address

    !+
    ! Validate and lock PFV
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Call PAS$$LOOK_AHEAD to do the work.
    !-

    PAS$$LOOK_AHEAD (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! Unlock file and return.
    !-

    PFV [PFV$V_LOCK] = 0;

    RETURN;

    END;					! End of routine PAS$LOOK_AHEAD

!<BLF/PAGE>

%SBTTL 'PAS$$LOOK_AHEAD - Internally callable procedure'
GLOBAL ROUTINE PAS$$LOOK_AHEAD (		! Resolve lazy lookahead
	PFV: REF $PAS$PFV_FILE_VARIABLE, 	! File variable
	IN_FCB: REF $PAS$FCB_CONTROL_BLOCK;	! Control block
	FCB: REF $PAS$FCB_CONTROL_BLOCK		! Output FCB
    ): JSB_LOOK_AHEAD NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAS$$LOOK_AHEAD is to be called if a textfile file buffer is
!	undefined (PFV$V_DFB clear) and the caller wishes to access
!	the file buffer.  The following steps are taken.
!
!		1.  If the file is open, and FCB$V_LAZY is clear,
!		    return.
!		2.  If the file is not open and is not INPUT or OUTPUT,
!		    return.
!		3.  If the file is not open, and is INPUT or OUTPUT,
!		    open it.
!		4.  If FCB$V_LAZY is set, then:
!			- If file is enabled for prompting, output
!			  partial lines on all enabled files.
!			- Do the $GET from the file.
!			- Clear FCB$V_LAZY, set PFV$V_EOLN, PFV$V_EOF_DEFINED, 
!			  PFV$V_DFB, PFV$V_VALID as appropriate.
!
! CALLING SEQUENCE:
!
!	JSB_LOOK_AHEAD PAS$$LOOK_AHEAD (PFV.mr.r, IN_FCB.mr.r; 
!				        FCB.mr.r)
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) for the file.
!
!	IN_FCB		- The File Control Block (FCB) for the file.
!
!	FCB		- The result FCB for the file.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the caller has verified the PFV and has locked
!	it.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!
!--

    BEGIN

    LOCAL
	STATUS;

    BIND
	RAB = FCB: REF BLOCK [, BYTE];		! RAB is also FCB address

    BUILTIN
	TESTBITSC;

    FCB = IN_FCB [FCB$R_FCB];			! Set output FCB

    !+
    ! See if the file is open.  If not, but is INPUT or OUTPUT, open it.
    ! Otherwise, return.
    !-

    IF NOT .PFV [PFV$V_OPEN] ! Not open
    THEN
	BEGIN
	PAS$$OPEN_IMPLICIT (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);
	IF NOT .PFV [PFV$V_OPEN]	! Still not open?
	THEN
	    RETURN;
	END;

    !+
    ! Indicate that buffer access is valid.
    !-

    PFV [PFV$V_EOF_DEFINED] = 1;
    PFV [PFV$V_VALID] = 1;

    !+
    ! Is lazy lookahead in progress on this file?
    !-

    IF TESTBITSC (FCB [FCB$V_LAZY])
    THEN
	BEGIN

	!+
	! If EOF is true or if this is a string file (READV), 
	! signal "GET after end-of-file".
	!-

	IF .FCB [FCB$V_EOF] OR .FCB [FCB$V_STRING]
	THEN
	    $PAS$IO_ERROR (PAS$_GETAFTEOF,0);

	!+
	! Lazy lookahead is in progress. 
	! If this file can initiate prompting, prompt on all enabled files.
        ! Then do the $GET.
	!-
    
	IF .FCB [FCB$V_INITIATE_PROMPT]
	THEN
	    PAS$$PROMPT_ALL ();

	STATUS = $PAS$RMS_OP ($GET (RAB=.RAB));

	!+
	! Set up record pointers and move first character to user's
	! file buffer.  Do this before we check for errors.
	!-

	FCB [FCB$A_RECORD_BEG] = .RAB [RAB$L_RBF];
	FCB [FCB$A_RECORD_CUR] = .FCB [FCB$A_RECORD_BEG];
	FCB [FCB$L_RECORD_LEN] = .RAB [RAB$W_RSZ];
	FCB [FCB$A_RECORD_END] = .FCB [FCB$A_RECORD_BEG] + .FCB [FCB$L_RECORD_LEN];
	IF .RAB [RAB$W_RSZ] EQL 0
	THEN
	    BEGIN
	    PFV [PFV$V_EOLN] = 1;
	    CH$WCHAR (%C' ', .PFV [PFV$A_BUFFER]);
	    END
	ELSE
	    BEGIN
	    PFV [PFV$V_EOLN] = 0;
	    CH$WCHAR (..FCB [FCB$A_RECORD_CUR], .PFV [PFV$A_BUFFER]);
	    END;

	IF NOT .STATUS
	THEN
	    BEGIN
	    !+
	    ! $GET failed.  If RMS$_EOF, simply set EOF.  Otherwise
	    ! signal an error.
	    !-
	    IF .RAB [RAB$L_STS] NEQ RMS$_EOF
	    THEN
		$PAS$IO_ERROR (PAS$_ERRDURGET);	! Error during GET
	    FCB [FCB$V_EOF] = 1;
	    PFV [PFV$V_DFB] = 0;
	    PFV [PFV$V_EOLN] = 0;
	    END
	ELSE
	    BEGIN
	    FCB [FCB$V_EOF] = 0;
	    PFV [PFV$V_DFB] = 1;
	    FCB [FCB$L_RECORD_NUMBER] = .FCB [FCB$L_RECORD_NUMBER] + 1;
	    END;

	END;


    RETURN;

    END;					! End of routine PAS$$LOOK_AHEAD

!<BLF/PAGE>
END						! End of module PAS$LOOK_AHEAD

ELUDOM
