%TITLE 'SAVRES -- Save & Restore'
MODULE SAVRES	(IDENT = 'V04-000'
    		%BLISS32[, ADDRESSING_MODE(EXTERNAL	= LONG_RELATIVE,
    					   NONEXTERNAL	= LONG_RELATIVE)]
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:   SAVE & RESTORE handling and initialization routines
!
! ENVIRONMENT:   Transportable
!
! AUTHOR: Ken Alden  CREATION DATE: January, 1983
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	010	REM00010	Ray Marshall	16-November-1983
!		Changed numeric offsets used in routine SAVINI to using macros
!		  so that future changes to GCA, HCT, PHDEF, and/or SCA will
!		  have less chance of resulting in failures of the SAVE/RESTORE
!		  directives.
!
!	009	KFA00009	Ken Alden	30-Sep-1983
!		Moved some the the variables from save all to save and
!		  vice versa.
!
!	008	KFA00008	Ken Alden	27-Jul-1983
!		Modified SAVINI with the addition of gca_flag_cmd.
!
!	007	KFA00007	Ken Alden	5-Jul-1983
!		Modified SAVINI with the addition of sca_flags.
!
!	006	KAD00006	Keith Dawson	12-May-1983
!		Modified SAVINI slightly -- having adjusted some of the
!		  storage locations in GCA.REQ. 
!
!	005	KFA00005	Ken Alden	3-May-1983
!		Added conditional for debugging so XPO_PUTs will only
!		  be put if the output file if open.
!
!	004	KFA00004	Ken Alden	25-Apr-1983
!		Added support for /DEBUG=SAVE.
!
!	003	KFA00003	Ken Alden	25-Apr-1983
!		Fixed the block_copy macro so it will pick up the first
!		word in the save block properly.
!
!	002	REM00002	Ray Marshall	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
  MACRO
    block_copy (in_adr, length, out_adr)
     =
	BEGIN
	BIND FOO = in_adr : vector;
	BIND BAR = out_adr :vector;

	INCR I FROM 0 to (length - 1) DO
	   BAR [.I] = .FOO [.I];

	END
	%;	

! EQUATED SYMBOLS:
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL
   rnfloc,
   rnftms,
   rnfwfr,
   rnfncs;

EXTERNAL
   rnoiob : REF $XPO_IOB(),
   irac : irac_definition,
   savstk : savstack,
   flgt : flgt_definition,
   sca : sca_definition,
   hct : hct_definition,
   gca : gca_definition,
   phan : phan_definition,
   save : $save_block,	
   saveall : $saveall_block;

 EXTERNAL ROUTINE
    	erm,
	erma;

%SBTTL 'SAVRES -- Save & restore handler module'
GLOBAL ROUTINE savres (handler_code,internal_code) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs the SAVEs and RESTOREs. 
!	This routine will perform up to 20 save/save alls and after that it
!	will remember ten more if the user happened to accidently try a .SAVE
!	The reason for remembering is to more informative to the user by 
!	pointing back to where the illegal save occured.  After ten illegal
!	SAVEs, this routine will just ignore the whole command. This of course
!	will skew the restores but we figured, who cares at that point?
!
!	One additional item I would like to point out is that the maximum
!	number of saves(20) is SAVSTK_SIZE.
!
!	The maiximum number of recorded save commands(30) is STKSAV_SAVE.
!
! FORMAL PARAMETERS:
!
!	HANDLER_CODE indicates which command is to be processed.
!	INTERNAL_CODE indicates where this routine was called: utilities(-1), 
!	RSDERM (-2), DOCM(1).
!
! IMPLICIT INPUTS:	none
!
! IMPLICIT OUTPUTS:	none
!
! ROUTINE VALUE and
! COMPLETION CODES:	none
!
! SIDE EFFECTS: 	none discovered yet
!
!--

    BEGIN
    OWN
	x,					!Just a copy of the SAVSTACK depth
	savptr;

    SELECT .handler_code OF
  	SET

	[h_save] :
	   BEGIN
	   !a .SAVE command has been hit.
	   !This section will save all the necessary values of items the utility
	   !programs may alter.  Tab stops have also been saved since it was thought
	   !they may be saved often without the need for .SAVE ALL.

	   !Let's check to see if there is any more room for one more save.
	    x = .savstk [0, savstk_depth] + 1;

	    IF 	.x  GTR  savstk_size
	    THEN
	       erma (rnftms, false);!Already at maximum save depth, ignore and issue error.
	
	    !Remember how the .SAVE was started.(even if we're 'ignoring' it)
	    !Only if the number of SAVEs is fewer than 30(STKSAV_SIZE).
	    IF .x GTR stksav_size
	    THEN
		RETURN;						!Forget this command, user has really extended limit.
    	    !
    	    ! Show whether this is a save or save_all and output the nesting
    	    ! level if user asked for /debug=save.
    	    !
    	    IF .gca_debug_save and NOT .gca_skip_out
    	    THEN
    		BEGIN
	    	$XPO_PUT ( IOB    = .rnoiob
		      ,STRING = $STR_CONCAT( '.SAVE '
    					     ,'(' 
    			    		     ,$STR_ASCII(.x)
    					     ,')' 
					    ));
    	        END;

	    savstk [0, savstk_depth] = .x;			!Save new stack depth.
	    savstk [.x, savstk_source] = .handler_code;		!Remember command.
	    savstk [.x, savstk_req_d] = .gca_req_depth;		!Remember .REQUIRE depth.
	    savstk [.x, savstk_ipagen] = .irac_ipagen;		!Remember input page number.
	    savstk [.x, savstk_iseqn] = .irac_iseqn;		!Remember input line number.
	    savstk [.x, savstk_fspecp] = .irac_fspecp;		!Remember file spec.
	    savstk [.x, savstk_fspecc] = .irac_fspecc;		!File spec length

	    IF 	.x GTR  savstk_size
	    THEN
	       RETURN; ! We've make a record of the save but don't do anything.
	
	   !Now, get some memory to store the save values.
	   $XPO_GET_MEM( FULLWORDS = save_length, RESULT = savptr);
	    savstk [.x, savstk_address] = .savptr;		!Save pointer to starting address of save block.

	   !Finally, we perform the save by copying the SAVEALL storage area to our dynamic stack.
	   block_copy (flgt, save_length, .savptr);

	   END;

	[h_save_all] :
	   BEGIN
	   !a Save All command has been hit.
	   !A .SAVE ALL saves all that a .SAVE command saves in addition to several
	   !other flags and action bits.

	   !Let's check to see if there is any more room for one more save all.
	    x = .savstk [0, savstk_depth] + 1;

	    IF 	.x GTR  savstk_size  THEN
	       erma (rnftms, false);!Already at maximum save depth, ignore and issue error.
	
	    !Remember how the .SAVE ALL was started.
	    !Only if the number of SAVE ALLs is fewer than 30(STKSAV_SIZE).
    	    !
	    IF .x GTR stksav_size  THEN
		RETURN;						!Forget this command, user has really extended limit.
    	    !
    	    ! Show whether this is a save or save_all and output the nesting
    	    ! level if user asked for /debug=save.
    	    !
    	    IF .gca_debug_save and NOT .gca_skip_out
    	    THEN
    		BEGIN
	    	$XPO_PUT ( IOB    = .rnoiob
		      ,STRING = $STR_CONCAT( '.SAVE ALL '
    					     ,'(' 
    			    		     ,$STR_ASCII(.x)
    					     ,')' 
					    ));
    	        END;

	    savstk [0, savstk_depth] = .x;			!Save new stack depth.
	    savstk [.x, savstk_source] = .handler_code;		!Remember command.
	    savstk [.x, savstk_req_d] = .gca_req_depth;		!Remember .REQUIRE depth.
	    savstk [.x, savstk_ipagen] = .irac_ipagen;		!Remember input page number.
	    savstk [.x, savstk_iseqn] = .irac_iseqn;		!Remember input line number.
	    savstk [.x, savstk_fspecp] = .irac_fspecp;		!Remember file spec.
	    savstk [.x, savstk_fspecc] = .irac_fspecc;		!File spec length

	    IF 	.x GTR  savstk_size  THEN
	       RETURN; ! We've make a record of the save but don't do anything.
	
	   !Now, get some memory to store the save values.
	   $XPO_GET_MEM( FULLWORDS = saveall_length, RESULT = savptr);
	    savstk [.x, savstk_address] = .savptr;		!Save pointer to starting address of save block.

	   !Finally, we perform the save by copying the SAVEALL storage area to our dynamic stack.
	   block_copy (flgt, saveall_length, .savptr);

	   END;

	[h_restore] :
	   BEGIN
	   !a Restore command has been hit. There may have been some save commands
	   !that were ignored because of too many saves.  Checking for that..

	   x = .savstk [0, savstk_depth];	!What's the current stack depth?

	   IF .x GTR savstk_size
	   THEN	!User has asked for more saves than possible.
	      BEGIN
	      savstk [0, savstk_depth] = .savstk [0, savstk_depth] - 1;!Ignore this save.
	      IF .internal_code EQL 1		!User requested this restore, issue warning. 
	      THEN				!Otherwise do it silently.
	        erma (rnftms, false);
	      RETURN;
	      END;
    	   !
    	   ! Show that a restore is being done and output the nesting
    	   ! level if user asked for /debug=save.
    	   !
    	   IF .gca_debug_save and NOT .gca_skip_out
    	   THEN
    	       BEGIN
	       $XPO_PUT ( IOB    = .rnoiob
		  ,STRING = $STR_CONCAT( '.RESTORE  '
    					,'(' 
    		    		        ,$STR_ASCII(.x)
    				        ,')' 
				        ));
    	       IF .savstk [.x, savstk_source] EQL h_save
    	       THEN
	           $XPO_PUT ( IOB    = .rnoiob
		  	,STRING = $STR_CONCAT( 'Corresponds to SAVE on line '
    				        ,$STR_ASCII(.savstk [.x, savstk_iseqn])
    					,' page ' 
    				        ,$STR_ASCII(.savstk [.x, savstk_ipagen])
				        ,' of input file '
    					,(.savstk [.x, savstk_fspecc]
    					,.savstk [.x, savstk_fspecp])
    					 ))
    		ELSE
	       	    $XPO_PUT ( IOB    = .rnoiob
		  	,STRING = $STR_CONCAT( 'Corresponds to SAVE ALL on line '
    				        ,$STR_ASCII(.savstk [.x, savstk_iseqn])
    					,' page ' 
    				        ,$STR_ASCII(.savstk [.x, savstk_ipagen])
				        ,' of input file '
    					,(.savstk [.x, savstk_fspecc]
    					,.savstk [.x, savstk_fspecp])
    					 ));

    	       END;

	   !Now stored in the SAVSTKis the list of all the saves.  Each
	   !item is the type of save (SAVE or SAVE ALL). So below we..
	   SELECT .savstk [.x, savstk_source] OF
	     SET		!Determine what to restore. (if anything)

	     [h_save] :
		BEGIN
		!The last SAVE was just the small save.

		!Is this restore in same file as corresponding SAVE/SAVEALL?
	 	IF  .SAVSTK [.X, SAVSTK_REQ_D] NEQ .GCA_REQ_DEPTH
	 	THEN
		   BEGIN
		   ERMA (RNFWFR, FALSE);		!Wrong File for Restore
		   RETURN;
		   END;

		!Update the address counted-list with a starting address of zero for debugging.
		SAVPTR = .SAVSTK [.X, SAVSTK_ADDRESS]; 
		SAVSTK [.X, SAVSTK_ADDRESS] = 0;

		!We may now copy the SAVEd block over to their 'active' area.
		block_copy (.SAVPTR, SAVE_LENGTH, FLGT);
	
		!Return the memory since we don't need it any more
		$XPO_FREE_MEM( BINARY_DATA = (SAVE_LENGTH, .SAVPTR ));
		   
                !And finally decrement the number of SAVEs by one.
		SAVSTK [0, SAVSTK_DEPTH] = .SAVSTK [0, SAVSTK_DEPTH] - 1;
		END;

	     [h_save_all] :
		BEGIN
		!This restore is for a Save All.
		!The code in this section is just a reverse of the .SAVE ALL area.
	     
	        !Is this restore in same file as corresponding SAVE/SAVEALL?
	        IF  .SAVSTK [.X, SAVSTK_REQ_D] NEQ .GCA_REQ_DEPTH
	 	THEN
		   BEGIN
		   ERMA (RNFWFR, FALSE);		!Wrong File for Restore
		   RETURN;
		   END;

		!Update the address counted-list with a starting address of zero for debugging.
		SAVPTR = .SAVSTK [.X, SAVSTK_ADDRESS]; 
		SAVSTK [.X, SAVSTK_ADDRESS] = 0;
	
		!We may now copy the SAVEd block over to their 'active' area.
		block_copy (.SAVPTR, SAVEALL_LENGTH, FLGT);
	
		!Return the memory since we don't need it any more
		$XPO_FREE_MEM( BINARY_DATA = (SAVEALL_LENGTH, .SAVPTR ));

                !And finally decrement the number of SAVEs by one.
		SAVSTK [0, SAVSTK_DEPTH] = .SAVSTK [0, SAVSTK_DEPTH] - 1;

		END;

	     [OTHERWISE] :
	        BEGIN
	        !Nothing more has been 'SAVEd' in this file; issue error and return.
	  	ERMA (RNFNCS, FALSE);		!No corresponding saves.
	  	RETURN;
	        END;

	     TES;			!End of RESTORE set.    
	END;			!End of RESTORE

	TES;			!End of SAVRES set.
    END;			! end of routine SAVRES

%SBTTL 'SAVRES -- Save & restore handler module'
GLOBAL ROUTINE savini : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called from RINIT and changes the storage locations of several variables
!	that need to be SAVEd but were previously stored in other block data areas.
!
! FORMAL PARAMETERS:	none
!
! IMPLICIT INPUTS:	none
!
! IMPLICIT OUTPUTS:	none
!
! ROUTINE VALUE and
! COMPLETION CODES:	none
!
! SIDE EFFECTS: 	none discovered yet
!
!--

    BEGIN

    BIND
    s = save : $save_block,
    sa = saveall : $saveall_block;

!We now reassign the storage locations for the following variables so that
!they wil all be stored in the save or saveall block memory.

	sca_f_justify	= s  [save$g_sca_justify];
	sca_f_fill	= s  [save$g_sca_fill];
	sca_f_cc_ok	= sa [saveall$g_sca_cc_ok];
	sca_f_crock	= s  [save$g_sca_crock];
	sca_f_lm	= s  [save$g_sca_lm];
	sca_f_rm	= s  [save$g_sca_rm];
	sca_f_spacing	= s  [save$g_sca_spacing];
	sca_f_period	= sa [saveall$g_sca_period];
	sca_f_ker	= s  [save$g_sca_ker];
	sca_f_bar_char	= sa [saveall$g_sca_bar_char];
	sca_f_autotitle	= s  [save$g_sca_autotitle];
	sca_f_flags	= s  [save$g_sca_flags];

	gca_f_autopara	= sa [saveall$g_gca_autopara];
	gca_f_autosubt	= sa [saveall$g_gca_autosubt];
	gca_f_autotabl	= sa [saveall$g_gca_autotabl];
	gca_f_autojust	= sa [saveall$g_gca_autojust];
	gca_f_xcase	= sa [saveall$g_gca_xcase];
	gca_f_case	= sa [saveall$g_gca_case];
	gca_f_flag_cmd	= s  [save$g_gca_flag_cmd];
	gca_f_lwidth	= s  [save$g_gca_width];
	gca_f_keep	= s  [save$g_gca_keep];
	
	phan_f_llines	= s  [save$g_phan_llines];
	phan_f_header	= sa [saveall$g_phan_header];
	phan_f_paging	= sa [saveall$g_phan_paging];

	hct_f_date	= s  [save$g_hct_date];
	hct_f_headers	= s  [save$g_hct_headers];
	hct_f_number_page= s  [save$g_hct_number_pag];
	hct_f_hd_case	= s  [save$g_hct_hd_case];
	hct_f_subtitle	= s  [save$g_hct_subtitle];
	hct_f_nmpg_np	= s  [save$g_hct_nmpg_np];

    END;			! End of SAVINI
END				! End of module
ELUDOM
