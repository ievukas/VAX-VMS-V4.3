	.TITLE	SYSADJWSL - SYSTEM SERVICE ADJUST WORKING SET LIMIT
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	EXECUTIVE, MEMORY MANAGEMENT SERVICE
;
; ABSTRACT:	SYSADJWSL IMPLEMENTS THE ADJUST WORKING SET LIMIT
;	SYSTEM SERVICE.
;
; ENVIRONMENT:
;
; AUTHOR: PETER H. LIPMAN	, CREATION DATE: 10-DEC-76
;
; MODIFIED BY:
;
;	V03-005	WMC0003		Wayne Cardoza		05-MAY-1983
;		Change ESTRADYNWS calculation to account for locked page
;		tables in the dynamic portion of the working set.
;
;	V03-004	TCM0001		Trudy C. Matthews	1-Apr-1983
;		Change references to working set fields in PHD so that
;		they are used as unsigned words.
;
;	V03-003	WMC0002		Wayne Cardoza		22-Dec-1982
;		Expansion of process header for new working set entries must
;		be iterative process.  Don't request more than can currently 
;		be locked in working set.
;
;	V03-002	WMC0001		Wayne Cardoza		04-Oct-1982
;		EXTRADYNS changed to use minimum of quota and size.
;
;	V03-001	HRJ0062		Herb Jacobs		05-Apr-1982
;		Fix EXTRADYNWS calculation.  This could cause IPL 2 loops
;		by being too leniant.
;
;--
	.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$ACMDEF				;ACCOUNTING MESSAGE DEFINITIONS
	$IPLDEF				;PROCESSOR PRIORITY LEVELS
	$PCBDEF				;PROCESS CONTROL BLOCK DEFINITIONS
	$PHDDEF				;PROCESS HEADER DEFINTIONS
	$PRDEF				;PROCESSOR REGISTER DEFINITIONS
	$PTEDEF				;PAGE TABLE ENTRY DEFINITIONS
	$SECDEF				;SECTION TABLE OFFSET DEFINTIONS
	$SSDEF				;SYSTEM SERVICE DEFINITIONS
;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
; OFFSETS FROM AP
;
	PAGCNT	=	4		;NUMBER OF PAGES TO ADD OR SUBTRACT
	WSETLM	=	8		;ADDRESS TO RETURN NEW WORKING SET LIMIT
;
; OWN STORAGE:
;

	.SBTTL	ADD TO WORKING SET SERVICE
;++
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;
;	CALL	ARGLIST,SYS$ADJWSL
;
; INPUT PARAMETERS:
;
;	PAGCNT(AP)	= NUMBER OF PAGES TO ADD IF POSITIVE
;			= NUMBER OF PAGES TO SUBTRACT IF NEGATIVE
;	WSETLM(AP)	= ADDRESS OF LONG WORD TO RETURN NEW WORKING SET LIMIT
;	R4		= PROCESS CONTROL BLOCK ADDRESS
;			  SET UP BY THE CHANGE MODE TO KERNEL DISPATCHER
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0 = SYSTEM STATUS CODE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--
;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MAY BE PAGED *****************
;
	.PSECT	Y$EXEPAGED
;
; **********************************************************************

EXE$ADJWSL::
	.WORD	^M<R2,R3,R4,R5>
	SETIPL	#IPL$_ASTDEL		;NO AST'S WHILE MODIFYING PHD
	MOVL	G^CTL$GL_PHD,R5		;PROCESS HEADER ADDRESS (P1 SPACE)
	MOVL	PAGCNT(AP),R1		;NO. OF PAGES TO ADD TO WORKING SET
					;***** REFERENCE COULD PAGE FAULT
	BGEQ	30$			;BRANCH IF GROW WORKING SET
	JSB	SHRINK			;SHRINK THE WORKING SET
	BRW	60$			;EXIT SYSTEM SERVICE
;
; MINIMUM OF R1 AND R2 TO R1
;
10$:	CMPL	R1,R2			;USE THE SMALLER
	BLEQ	20$			;BRANCH IF R1 IS THE SMALLER
	MOVL	R2,R1			;USE R2 INSTEAD
20$:	RSB

30$:	MOVL	L^SGN$GL_MAXWSCNT,R2	;MAXIMUM SYSTEM WIDE WORKING SET SIZE
	MOVZWL	PHD$W_WSSIZE(R5),R0	;CURRENT WORKING SET SIZE
	MOVZWL	PHD$W_WSLIST(R5),R3	;GET START OF WSL ENTRIES
	DECL	R3			;ADJUST TO GET COUNT WHEN SUBTRACTED
	SUBL	R0,R2			;PAGES THAT POTENTIALLY MAY BE ADDED
	BSBB	10$			;USE SMALLER OF REQUEST AND MAX
	MOVZWL	PHD$W_WSEXTENT(R5),R2	;GET POINTER TO END OF MAX SIZE
	SUBL	R3,R2			;GET MAXIMUM ALLOWED SIZE
	SUBL	R0,R2			;REDUCE BY WHAT'S IN USE
	BSBB	10$			;USE SMALLER OF REQUEST AND PROCESS MAX
	SUBL3	SCH$GL_FREELIM,-	;MAX PHYSICAL NUMBER OF PAGES
		PFN$GL_PHYPGCNT,R2	;IS UPPER BOUND ON WORKING SET SIZE
	SUBL	R0,R2			;MAXIMUM NUMBER OF ADDITIONAL PAGES
	BSBB	10$			;USE SMALLER
	MOVZWL	PHD$W_WSLAST(R5),R2	;GET POINTER TO END OF CURRENT SIZE
	SUBL	R3,R2			;NUMBER OF POTENTIAL PAGES
	SUBL	R0,R2			;GET NUMBER OF UNUSED WSLE IN WSL
	CMPL	R1,R2			;IS REQUEST FOR LESS THAN UNUSED ONES?
	BGEQ	40$			;BRANCH IF NOT
	MOVL	R1,R2			;USE ONLY REQUEST SIZE
40$:	ADDW	R2,PHD$W_WSSIZE(R5)	;ADD IN THE FREE EXPANSION AMOUNT
	SUBL	R2,R1			;NUMBER OF ADDITIONAL PAGES BEYOND WSLAST
	BLEQ	60$			;BRANCH IF DONE
42$:	PUSHL	R1			;SAVE THE REQUEST SIZE
	MOVZWL	PHD$W_EXTDYNWS(R5),R0	;EXTRA WORKING SET ENTRIES
	INCL	R0			;THERE IS ALWAYS AT LEAST ONE MORE THAN EXTRADYN
	ASHL	#7,R0,R0		;LONGWORDS OF PROCESS HEADER THIS CAN LOCK
	CMPL	R1,R0			;CAN WE LOCK ENTIRE REQUEST
	BLEQ	45$			;NO PROBLEM
	MOVL	R0,R1			;REQUEST LESS
45$:	JSB	MMG$ALCPHD		;GET ENOUGH SPACE FOR SPECIFIED # OF WSLE'S
	MOVL	(SP)+,R3		;GET BACK THE REQUEST SIZE
;
; R1 IS RETURNED AS THE MINIMUM OF WHAT WAS REQUESTED AND WHAT WAS AVAILABLE
; NOTE THAT THE FOLLOWING CODE MUST WORK CORRECTLY IF NO NEW ENTRIES ARE ADDED
;
	MOVL	R1,R2			;SAVE COUNT FOR AFTER LOOP
	BEQL	60$			;BRANCH IF HEADER COULDN'T BE EXPANDED
	MOVZWL	PHD$W_WSLAST(R5),R0	;GET INDEX TO CURRENT END
	MOVW	R0,PHD$W_WSNEXT(R5)	;UPDATE NEXT POINTER TO NEW FREE AREA
	MOVAL	4(R5)[R0],R0		;GET POINTER TO NEW FIRST FREE ONE
50$:	CLRL	(R0)+			;MARK ENTRY FREE
	SOBGTR	R1,50$			;ONCE FOR EACH NEW WORKING SET ENTRY
	ADDW	R2,PHD$W_WSLAST(R5)	;UPDATE TO NEW WSLAST
	ADDW	R2,PHD$W_WSSIZE(R5)	;UPDATE TO NEW WORKING SET SIZE
	CMPL	R2,R3			;DO WE HAVE ALL WE NEEDED
	BGEQ	60$			;YES
	JSB	MMG$EXTRADYNWS		;RECOMPUTE EXTRA DYNAMIC WSLE COUNT
	SUBL3	R2,R3,R1		;AMOUNT WE STILL NEED
	BRB	42$			;GO TRY AGAIN
60$:	JSB	MMG$EXTRADYNWS		;RECOMPUTE EXTRA DYNAMIC WSLE COUNT
	BSBB	MMG$WSPEAKCHK		;ENABLE WORKING SET PEAK CHECK
					;RETURN WORKING SET SIZE IN R1
	MOVL	WSETLM(AP),R2		;ADDRESS TO RETURN NEW WORKING SET LIMIT
					;***** COULD FAULT THIS REFERENCE
	BEQL	80$			;BRANCH IF NONE SPECIFIED
	MOVZWL	#SS$_ACCVIO,R0		;RETURN CODE FOR ACCESS  VIOLATION
	IFNOWRT	#4,(R2),90$		;IF NOT WRITABLE
	MOVZWL	R1,(R2)			;OTHERWISE RETURN THE NEW SIZE
					;***** COULD FAULT THIS REFERENCE
80$:	MOVZWL	#SS$_NORMAL,R0		;INDICATE SUCCESSFUL COMPLETION
90$:	RET				;AND RETURN

	.SBTTL	WSPEAKCHK - ENABLE OR DISABLE WORKING SET PEAK CHECKING

;
; CALLING SEQUENCE:
;
;	BSBW	MMG$WSPEAKCHK
;
; INPUTS:
;
;	R5 = PROCESS HEADER ADDRESS (P1 SPACE OK)
;
; OUTPUTS:
;
;	R1 = WORKING SET SIZE
;		IF THE CURRENT PEAK IS LESS THAN THE CURRENT WORKING SET 
;	SIZE, THE WORKING SET PEAK CHECK IS ENABLED.
;		IF THE CURRENT PEAK IS GREATER THAN OR EQUAL TO THE
;	CURRENT WORKING SET SIZE, THE WORKING SET PEAK CHECK IS DISABLED.
;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MAY BE PAGED *****************
;
	.PSECT	Y$EXEPAGED
;
; **********************************************************************
;
MMG$WSPEAKCHK::
	BICW	#<PHD$M_WSPEAKCHK!PHD$M_IWSPEAKCK>, -
			PHD$W_FLAGS(R5) ;DISABLE WORKING SET PEAK CHECK
	MOVZWL	PHD$W_WSSIZE(R5),R1	;RETURN WSSIZE IN R1
	CMPW	R1,G^CTL$GL_WSPEAK	;POSSIBLE TO EXCEED CURRENT PEAK?
	BLSSU	10$			;BRANCH IF NOT
	BISW	#PHD$M_WSPEAKCHK,PHD$W_FLAGS(R5) ;YES, ENABLE THE CHECK
10$:	BBC	#ACM$V_IMAGE,EXE$GL_ACMFLAGS,20$; IMAGE ACNT. ENABLED ?
	CMPW	R1,G^CTL$GL_IWSPEAK	;POSSIBLE TO EXCEED CURRENT PEAK?
	BLSSU	20$			;BRANCH IF NOT
	BISW	#PHD$M_IWSPEAKCK,PHD$W_FLAGS(R5) ;YES, ENABLE THE CHECK
20$:	RSB

	.SBTTL	SHRINK WORKING SET
;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MUST BE RESIDENT *****************
;
	.PSECT	$MMGCOD
;
; **********************************************************************
;
; ADJUST THE WORKING SET POINTERS TO REFLECT THE NEW SIZE OF THE WORKING SET
;
; CALLING SEQUENCE:
;
;	BSB/JSB	MMG$SHRINKWS
;
; INPUTS:
;
;	R1  = NEGATIVE NUMBER OF PAGES TO DELETE FROM WORKING SET
;
;
; REDUCE THE SIZE OF THE WORKING SET
;
SHRINK:
	SETIPL	#IPL$_SYNCH		;DISABLE SWAPPER
	MOVZWL	PHD$W_WSLAST(R5),-(SP)	;SAVE IN CASE FREWSLE SHRINKS THIS
	MOVZWL	PHD$W_WSSIZE(R5),-(SP)	;SAVE IN CASE RESOURCEWAIT NEEDED
	BSBB	MMG$SHRINKWS		;SHRINK THE WORKING SET
	POPR	#^M<R2,R3>		;GET BACK ORIGINAL WSSIZE AND WSLAST
	BNEQ	10$			;BRANCH IF NON SUCCESSFUL
	SETIPL	#IPL$_ASTDEL		;SWAPPABLE AGAIN
	RSB
;
; MUST WAIT FOR A RESOURCE
; IPL = SYNCH, R1 = RESOURCE TO WAIT FOR
; R4 = PROCESS CONTROL BLOCK ADDRESS
;
10$:	MOVW	R2,PHD$W_WSSIZE(R5)	;RESET ORIGINAL WS SIZE FOR RETRY
	MOVW	R3,PHD$W_WSLAST(R5)	;RESET WSLAST, ENTRIES ARE KNOWN ZEROED
	PUSHR	#^M<R1>			;SAVE RESOURCE WAIT CODE
	BSBW	MMG$EXTRADYNWS		;RESET EXTRA DYNAMIC WORKING SET COUNT
	POPR	#^M<R1>			;RESTORE RESOURCE WAIT NUMBER
	MOVL	R1,PCB$L_EFWM(R4)	;SET RESOURCE TO WAIT FOR
	BBSSI	R1,W^SCH$GL_RESMASK,20$ ;NOTE SOMEONE WAITING
20$:	MOVAQ	W^SCH$GQ_MWAIT,R2	;WAIT ON MUTEXT WAIT QUEUE
	MOVL	FP,SP			;RESET FP, AP UNTOUCHED
	BRW	SCH$WAIT		;WAIT AS CALLER

MMG$SHRINKWS::
	PUSHL	#0			;SET DEFAULT RETURN STATUS
	PUSHL	R2			;GET A SCRATCH REGISTER
	MOVZWL	PHD$W_WSSIZE(R5),R2	;KEEP WORKING SET SIZE IN R2
	MNEGL	R1,R3			;MAKE THE DESIRED PAGE COUNT POSITIVE
;
; CALCULATE THE MAXIMUM AMOUNT THE WORKING SET CAN BE REDUCED
;
	SUBW3	PHD$W_WSLIST(R5),PHD$W_WSDYN(R5),R0 ;GET SIZE OF LOCKED WS
	MOVZWL	R0,R0			;GET IT IN A LONGWORD
	SUBL3	R0,R2,R0		;GET SIZE OF UNLOCKED WS (WSSIZE-LOCKED)
	MOVZWL	W^SGN$GW_MINWSCNT,R1	;GET MINIMUM WS SIZE
	SUBL	R1,R0			;ALLOW CUSHION PAGES
	DECL	R0			;IN CASE CUSHION IS 0
;
; R0 = NUMBER OF PAGES WHICH COULD BE TAKEN AWAY WITHOUT REDUCING
; THE WORKING SET SIZE BELOW THE MINIMUM.
; NOW CALCULATE AMOUNT IT CAN BE REDUCED WITHOUT DEPLETING EXTRADYNS
;
	SUBW3	PHD$W_WSLIST(R5),PHD$W_WSQUOTA(R5),R1
	INCW	R1			;QUOTA
	MOVZWL	R1,R1			;GET IT IN A LONGWORD
	SUBL3	R1,R2,R1		;AMOUNT SIZE EXCEEDS QUOTA
	BLEQ	5$			;SIZE SMALLER - USE EXTRADYNS
	ADDW	PHD$W_EXTDYNWS(R5),R1	;ADD IN THE EXCESS DYNAMIC ENTRIES
	BRB	7$
5$:	MOVZWL	PHD$W_EXTDYNWS(R5),R1	;EXCESS DYNAMIC WORKING SET LIST ENTRIES
	BEQL	60$			;BRANCH IF NONE LEFT TO TAKE AWAY
;
; R1 = NUMBER OF EXTRA DYNAMIC WORKING SET LIST ENTRIES ABOVE
; THE MINIMUM REQUIRED BY WSFLUID.
;
;
; USE THE SMALLER OF R0 AND R1 AS THE MOST PAGES THAT CAN BE TAKEN
; AWAY FROM THE WORKING SET LEAVING THE RESULT IN R0
;
7$:	CMPL	R0,R1
	BLEQ	10$
	MOVL	R1,R0
10$:
;
; R0 IS THE MAXIMUM NUMBER OF PAGES THAT CAN BE TAKEN OUT OF THE WORKING SET
; REDUCE THE WORKING SET SIZE BY THE SMALLER OF R0 AND R3.
;
	CMPL	R3,R0			;REDUCE BY THE DESIRED AMOUNT?
	BLEQ	20$			;BRANCH IF YES
	MOVL	R0,R3			;MUST REDUCE BY LESS
	BLEQ	60$			;BRANCH IF NO SHRINKING POSSIBLE
;
; NOW WE KNOW NUMBER OF PAGES WE CAN FREE, FIRST ATTEMPT TO RECOVER THE
; PAGES BY JUST REMOVING THE UNUSED GROWTH PAGES FROM THE WORKING SET.
; AFTER THIS PAGES WILL BE FREED BY USING THE NORMAL PAGEFAULT REPLACMENT
; ALGORITHM.
;
20$:	ADDW3	PCB$W_PPGCNT(R4),PCB$W_GPGCNT(R4),R0 ;PAGE COUNT CURRENTLY IN USE
	MOVZWL	R0,R0			;GET IT IN A LONGWORD
	SUBL3	R0,R2,R1		;NUMBER OF PAGES IMMEDIATELY RECLAIMABLE
	BLEQ	40$			;BRANCH IF NONE
	CMPL	R1,R3			;ARE WE GOING TO GET BACK TOO MANY?
	BLEQ	30$			;BRANCH IF NOT
	MOVL	R3,R1			;TAKE BACK ONLY WHAT WAS ASKED
30$:	SUBW	R1,PHD$W_WSSIZE(R5)	;ADJUST WORKING SET DOWN BY EMPTIES
	SUBL	R1,R3			;ADJUST COUNT OF PAGES TO STILL FREE
	BLEQ	60$			;BRANCH IF DONE
40$:
	MOVL	R3,4(SP)		;SAVE COUNT OF PAGES TO FREE
50$:
	BSBW	MMG$FREWSLE		;GET A FREE WORKING SET LIST ENTRY
	BLBC	R0,60$			;BRANCH TO RETURN WITH NON ZERO COUNT
	DECW	PHD$W_WSSIZE(R5)	;ACCOUNT FOR NEWLY FREED PAGE
	SOBGTR	4(SP),50$		;REPEAT FOR EACH SLOT TO BE DELETED
60$:	MOVL	(SP)+,R2		;RESTORE R2
	MOVL	(SP)+,R0		;SET RETURN STATUS- NON-ZERO=FAILURE
	RSB				;RETURN

	.SBTTL	EXTRADYNWS - CALCULATE EXTRA DYNAMIC WORKING SET COUNT

;
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE CALCULATES THE EXTRA NUMBER OF DYNAMIC WORKING SET
; ENTRIES AVAILABLE BEYOND THE NUMBER GUARANTEED BY WSFLUID
;
; CALLING SEQUENCE:
;
;	BSBW	MMG$EXTRADYNWS
;
; INPUTS:
;
;	R5 = PROCESS HEADER ADDRESS
;	IPL = AT LEAST ASTDEL
;
; OUTPUTS:
;
;	R1 = EXTRA DYNAMIC WORKING SET COUNT
;	R0,R2,R3 PRESERVED
;	PHD$W_EXTDYNWS = EXTRA DYNAMIC WORKING SET COUNT
;
;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MUST BE RESIDENT *****************
;
	.PSECT	$MMGCOD
;
; **********************************************************************
;

MMG$EXTRADYNWS::
	PUSHL	R2
	SUBW3	PHD$W_PTCNTLCK(R5),PHD$W_PTCNTMAX(R5),R1 ;COUNT OF PAGE TABLES
					;WHICH ARE NOT LOCKED DOWN
	CMPW	R1,PHD$W_WSFLUID(R5)	;MINIMIZE WITH FLUID COUNT
	BLEQU	10$			;BRANCH IF SMALLER
	MOVZWL	PHD$W_WSFLUID(R5),R1	;USE FLUID, IT IS SMALLER
10$:	ADDW	PHD$W_WSFLUID(R5),R1	;ADD IN FLUID FOR DATA & I STREAM PAGES
	ADDW	PHD$W_PTCNTLCK(R5),R1	;ADD IN LOCKED PAGE TABLE PAGES
	MOVZWL	R1,R1			;GET IT IN A LONGWORD
;
; We now have count of WSLE's that must be reserved in dynamic portion of WSL
;
	SUBW3	PHD$W_WSLIST(R5),PHD$W_WSQUOTA(R5),R2
	INCW	R2			;CALCULATE QUOTA
	CMPW	R2,PHD$W_WSSIZE(R5)	;MINIMIZE WITH SIZE
	BLEQU	20$
	MOVW	PHD$W_WSSIZE(R5),R2
20$:	MOVZWL	R2,R2			;GET IT IN A LONGWORD
	SUBL3	R1,R2,R1		;TAKE AWAY THE RESERVED ONES
;
; Remove non-dynamic portion of WSL from count
;
	SUBW3	PHD$W_WSLIST(R5),PHD$W_WSDYN(R5),R2 ;GET COUNT OF LOCKED WS ENTRIES
	MOVZWL	R2,R2			;GET IT IN A LONGWORD
	SUBL	R2,R1			;GET COUNT OF UNLOCKED ENTRIES
	BGTR	30$			;BRANCH IF POSITIVE
	CLRL	R1			;DON'T ALLOW A NEGATIVE EXTDYNWS COUNT
30$:	MOVW	R1,PHD$W_EXTDYNWS(R5)	;SAVE IT IN PROCESS HEADER
	MOVL	(SP)+,R2
	RSB

	.END
