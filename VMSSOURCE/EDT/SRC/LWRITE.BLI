%TITLE 'EDT$LWRITE - write to a file'
MODULE EDT$LWRITE (				! Write to a file
		IDENT = 'V04-000'			! File: LWRITE.BLI Edit: JBS1058
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module executes the line mode EXIT and WRITE commands.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: February 3, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 30-JAN-1981.  This module was created by
!	extracting the routines WRITE_FILE, EDT$$EXI_CMD , and EDT$$WR_CMD
!	from the module EXEC.BLI.
! 1-002	- Regularize headers.  JBS 23-Mar-1981
! 1-003	- Change WRITE_COM to EDT$$WR_CMD .  JBS 30-Mar-1981
! 1-004	- Use the new message codes.  JBS 04-Aug-1981
! 1-005 - Don't write out summary when flag clear. STS 05-Oct-1981
! 1-006 - Convert open output file to use EDT$FILEIO. STS 13-Jan-1982
! 1-007 - Remove division from line number calculatons.  SMB 15-Jan-1982
! 1-008 - Convert reads and writes to use EDT$FILEIO. STS 15-Jan-1982
! 1-009 - Add capability for 15 digit line numbers.  SMB 19-Jan-1982
! 1-010 - pass sequence numbers by descriptors. STS 20-Jan-1981
! 1-011 - Change the checking of sequence/nosequence. STS 21-Jan-1982
! 1-012 - Fix size bugs related to 15 digit sequences & increments.  SMB 26-Jan-1982
! 1-013 - Remove original line numbers.  SMB 28-Jan-1982
! 1-014 - Fix bug in writing with /SEQ.  SMB 30-Jan-1982
! 1-015 - Add range checking on seq.# and incr.  SMB 5-Feb-1982
! 1-016 - Take out call to edt$$get_fnam. STS 10-Feb-1982
! 1-017 - Change line number division to a routine call.  SMB 11-Feb-1982
! 1-018 - Format filename for output. STS 12-Feb-1982
! 1-019 - Pass filename to edt$$fiopn_err. STS 26-Feb-1982
! 1-020 - Add literals for callable EDT. STS 08-Mar-1982
! 1-021	- Use the input file name as the output name, if permitted and
!	   there is no output file name.  JBS 25-Mar-1982
! 1-022	- The file I/O routines return a status.  JBS 26-Mar-1982
! 1-023	- Correct a typo in edit 1-022.  JBS 27-Mar-1982
! 1-024 - Minor edits, plus remove code that doesn't seem to be executed.  SMB 30-Mar-1982
! 1-025 - Rearrange where file name is stored so we get "real" name instead
!	  of "temp" filename.  SMB 31-Mar-1982
! 1-026 - Add code for CONTROL_C check during record writing.  SMB 08-Apr-1982
! 1-027	- Print messages on CLOSE errors.  JBS 12-Apr-1982
! 1-028 - Convert PDP-11 command file names to uppercase.  SMB 13-Apr-1982
! 1-029	- Clear PREV_RANGE when creating a range block for EXIT.  JBS 15-Apr-1982
! 1-030 - Don't set up any message for nosummary. STS 16-Apr-1982
! 1-031 - Change NO FILE error message and processing for WRITE.  SMB 21-Apr-1982
! 1-032 - Save original buffer address. STS 10-May-1982
! 1-033 - Make minor modifications based on code review input.  SMB 24-May-1982
! 1-034	- Set a flag if control C actually aborts something.  JBS 24-May-1982
! 1-035 - Fix bug with explicit file names.  SMB 25-May-1982
! 1-036	- Pass default file name using RHB parameter.  JBS 15-Jun-1982
! 1-037 - Stop working message before printing messages to screen.  SMB 22-Jun-1982
! 1-038 - Stop processing if bad select range.  SMB 01-Jul-1982
! 1-039	- Use EDT$$FMT_CRLF instead of EDT$$OUT_FMTBUF.  JBS 05-Jul-1982
! 1-040 - Change write file messages.  SMB 13-Jul-1982
! 1-041 - Give message for write errors. STS 21-Jul-1982
! 1-042 - Don't put out error messages on 11's STS 22-Jul-1982
! 1-043 - Restore screen width before displaying file name on EXIT.  SMB 29-Jul-1982
! 1-044 - Check the abort write flag after reads. STS 05-Aug-1982
! 1-045 - Make use of the bit masks for the options word. STS 17-Aug-1982
! 1-046	- Fix up the references to the EDT$M_ symbols.  JBS 23-Aug-1982
! 1-047 - Put EDT$$TST_EOB in line. STS 22-Sep-1982
! 1-048 - Change to use new addline/subline macro. STS 1-Oct-1982
! 1-049 - Put code for edt$$rng_posfrst in line. STS 11-Oct-1982
! 1-050 - Modify to use new compare macro. STS 10-Oct-1982
! 1-051 - Avoid str$copy where possible to increase efficiency. STS 10-Nov-1982
! 1-052	- Add conditional for WPS support.  JBS 10-Feb-1983
! 1-053 - Only set screen width if it has changed from original.  SMB 17-Feb-1983
! 1-054	- Give a message if requested to do so.  JBS 24-Mar-1983
! 1-055	- Set a flag if control C actually aborts something.  JBS 08-Apr-1983
! 1-056	- Delete the output file if we fail to write a record.  JBS 02-May-1983
! 1-057	- Rearrange the delete output file logic to make this module smaller
!	   on PDP-11s, and to always give the "no output file created" message
!	   when we delete the output file.  JBS 02-May-1983
! 1-058	- Because of search lists on VMS, don't use the input file name.  JBS 29-Jul-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    WRITE_FILE,					! Write an output file
    EDT$$EXI_CMD : NOVALUE,			! Process the EXIT command
    EDT$$WR_CMD : NOVALUE;			! Process the WRITE command

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

%IF %BLISS (BLISS32)
%THEN

REQUIRE 'EDTSRC:SYSSYM';

%FI

LIBRARY 'EDTSRC:SUPPORTS';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    EDT$M_NOOUTPUT,
    EDT$K_WRITE_FILE,
    EDT$K_OUTPUT_FILE,
    EDT$K_OPEN_OUTPUT_SEQ,
    EDT$K_OPEN_OUTPUT_NOSEQ,
    EDT$K_PUT,
    EDT$K_CLOSE,
    EDT$K_CLOSE_DEL;

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routines

%SBTTL 'WRITE_FILE - write on a file'
ROUTINE WRITE_FILE (				! Write on a file
    RANGE, 					! Range to write
    CHECK					! Do consistency checking and file name defaulting
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used by the WRITE and EXIT commands to write
!	an output file.  The /SEQ switch determines whether sequence
!	numbers should be written.
!
! FORMAL PARAMETERS:
!
!  RANGE 		the range block for the range to be written.
!
!  CHECK 		a flag indicating that the consistency check should be done
!			(set if we are exiting, clear otherwise).  Also permits defaulting
!			of the file name to the output or input file name.
!
! IMPLICIT INPUTS:
!
!	EDT$$G_OUT_NAMLEN
!	EDT$$A_OUT_NAM
!	EDT$$G_INP_NAMLEN
!	EDT$$A_INP_NAM
!	EDT$$V_OPTIONS
!	EDT$$A_CUR_BUF
!	EDT$$L_IO_VFCHD
!	EDT$$L_LNO_ZERO
!	EDT$$L_LNO0
!	EDT$$A_FMT_CUR
!	EDT$$T_FMT_BUF
!	EDT$$G_FMT_LNPOS
!	EDT$$L_LNO_VFCMAX
!	EDT$$A_WK_LN
!	EDT$$A_SUMRY
!	EDT$$A_EXE_CURCMD
!	EDT$$G_EXE_SBITS
!	EDT$$Z_EXE_SBLK
!	EDT$$G_WRITE_MSG
!	EDT$$G_ABT_WRITE
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_EXE_SBITS
!	EDT$$G_CC_DONE
!	EDT$$G_WRITE_MSG
!	EDT$$G_ABT_WRITE
!
! ROUTINE VALUE:
!
!	0 = no write took place
!	1 = file written successfully
!
! SIDE EFFECTS:
!
!	Types an error message if the file is not properly written.
!	If the consistency check fails, arranges to save the journal file.
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$SC_SETWID,				! Reset terminal width
	EDT$$SC_POSCSIF,			! Absolute cursor positioning
	EDT$$STOP_WKINGMSG,			! Stop working message
	EDT$$CHK_CC,				! check for CONTROL/C typed
	EDT$$LDIV,
	EDT$$CALLFIO,				! sets up handler and calls general file routine
	EDT$$FMT_CH,				! Put a character in the format buffer
	EDT$$FMT_STRCNT : NOVALUE,
	EDT$$FMT_CRLF,				! Terminate an output line
	EDT$$FMT_MSG,				! Put a message in the format buffer
	EDT$$NXT_LNRNG,
	EDT$$RNG_REPOS,
	EDT$$FIOPN_ERR;				! Print a file I/O error

%IF %BLISS (BLISS32)
%THEN

    EXTERNAL ROUTINE
	EDT$$FMT_STR,
	STR$FREE1_DX;				! deallocates dynamic descriptors

%ELSE

    EXTERNAL ROUTINE
	EDT$$GET_FNAM;

    EXTERNAL
	EDT$$G_INP_NAMLEN,			! Length of input file name
	EDT$$A_INP_NAM;				! Address of input file name

%FI

    EXTERNAL
	EDT$$G_TI_WID,				! Terminal's width
	EDT$$G_ABT_WRITE,			! 1 = abort output
	EDT$$G_SAV_TIWID,
	EDT$$G_MESSAGE_LINE,
	EDT$$A_IO_FNAM,
	EDT$$G_EXT_MOD,
	EDT$$G_OUT_NAMLEN,			! Length of output file name
	EDT$$A_OUT_NAM,				! Address of output file name
	EDT$$G_RNG_FRSTLN,
	EDT$$Z_RNG_ORIGPOS : POS_BLOCK,
	EDT$$V_OPTIONS : BITVECTOR [32],	! bit 3 = /NOOUTPUT
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,
	EDT$$L_IO_VFCHD : WORD,
	EDT$$L_LNO_ZERO,
	EDT$$L_LNO_VFCMAX : LN_BLOCK,		! Value 6.5535 * (10**9)
	EDT$$L_LNO0 : LNOVECTOR [14],		! powers of ten
	EDT$$A_FMT_CUR,				! current position in format buffer
	EDT$$G_FMT_LNPOS,
	EDT$$T_FMT_BUF,				! address of format buffer

%IF SUPPORT_WPS
%THEN
	EDT$$G_SUMRY,				! flag indicating whether to type out summary
%FI

	EDT$$Z_EOB_LN,
	EDT$$A_WK_LN : REF LIN_BLOCK,
	EDT$$A_EXE_CURCMD : REF NODE_BLOCK,	! Pointer to the current command.
	EDT$$G_EXE_SBITS,			! The options switches.
	EDT$$Z_EXE_SBLK : REF NODE_BLOCK,	! The option switch value block.
	EDT$$G_CC_DONE,				! Set to 1 if control C actually aborts something
	EDT$$G_WRITE_MSG;			! Message to print; 1 = no message

    MESSAGES ((NOFILSPC, NOFILWRT, CONCHKFLD, ERROUTFIL, WRIFILCRE, OUTFILCRE, SEQNUMOV, SEQINCROV, OUTFILCLO,
	WRIFILCLO));

    LOCAL
	CLOSEMSG,				! File close message
	OPNMSG,					! File open message
	FILECODE,				! code for what kind of open
	FILESTRM,				! code for which kind of file
	FILE_DESC : BLOCK [8, BYTE],		! descriptor for file name
	RHB_DESC : BLOCK [8, BYTE],		! descriptor for header info
	STAT_DESC : BLOCK [8, BYTE],		! descriptor for puts
	STATUS,					! Status of open or close attempt
	L_COUNT : LN_BLOCK,			! Number of lines written.
	C_COUNT,				! Number of characters written
	NAME,					! File name string pointer
	NAME_LEN,				! File name string length
	DIGIT,					! Holds integer result from division
	LINNO : LN_BLOCK,			! 48-bit line number
	SEQ,					! Flag indicating sequenced
	SEQ_NUM,				! Current sequence number
	SEQ_INCR;				! Sequence number increment

%IF %BLISS (BLISS32)
%THEN
    RHB_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    RHB_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    STAT_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    STAT_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    FILE_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    FILE_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
%FI

    RHB_DESC [DSC$A_POINTER] = 0;
    RHB_DESC [DSC$W_LENGTH] = 0;
    FILE_DESC [DSC$A_POINTER] = 0;
    FILE_DESC [DSC$W_LENGTH] = 0;
!
    NAME_LEN = 0;
!+
! Position to the front of the range.
!-
    EDT$$G_RNG_FRSTLN = 1;
    EDT$$CPY_MEM (POS_SIZE, .EDT$$A_CUR_BUF, EDT$$Z_RNG_ORIGPOS);

    IF ( NOT EDT$$RNG_REPOS (.RANGE)) THEN RETURN (0);

!+
! Check for an explicit file specification.
!-

    IF (.EDT$$A_EXE_CURCMD [FSPCLEN] NEQ 0)
    THEN
	BEGIN
	NAME = .EDT$$A_EXE_CURCMD [FILSPEC];
	NAME_LEN = .EDT$$A_EXE_CURCMD [FSPCLEN];
	END;

!+
! If no file name is specified and this is EXIT, use the output file name.
!-

    IF ((.CHECK NEQ 0) AND (.NAME_LEN EQL 0))
    THEN
	BEGIN
	NAME = .EDT$$A_OUT_NAM;
	NAME_LEN = .EDT$$G_OUT_NAMLEN;
	END;

!+
! On VMS, because of search lists, it is possible for an input open to resolve
! to a different directory than an output open with the same file name.  Therefore,
! if we want the output file to be returned to the same directory as the input file
! we must depend on using the resultant file name from the input open to specify
! where to put the output file, rather than being able to just re-use the input
! file name.
! At this point we reject the file specification only if it is empty and either
! this is a WRITE command or /NOOUTPUT has been specified (or implied by /READ_ONLY).
!-

    IF ((.NAME_LEN EQL 0) AND ((.CHECK EQL 0) OR ((.EDT$$V_OPTIONS AND EDT$M_NOOUTPUT) NEQ 0)))
    THEN
	BEGIN
	EDT$$FMT_MSG (EDT$_NOFILSPC);
	RETURN (0);
	END;

!+
! PDP-11 systems do not have search lists, so we can use the input file name if the
! output name is empty.  Doing this simplifys the process of constructing the printable
! form of the name for the summary message.
!-

%IF ( NOT %BLISS (BLISS32))
%THEN

    IF (.NAME_LEN EQL 0)
    THEN
	BEGIN
	NAME = .EDT$$A_INP_NAM;
	NAME_LEN = .EDT$$G_INP_NAMLEN;
	END;

%FI

!+
! Check for the /SEQ option.
!-

    IF (SEQ = .EDT$$G_EXE_SBITS<OPB_SEQ>)
    THEN
	BEGIN
!+
! Determine the actual sequence start and increment by reducing them by 10**5
!-
	SEQ_NUM = 0;
	SEQ_INCR = 0;
	MOVELINE (EDT$$Z_EXE_SBLK [SW_VAL1], LINNO);	! Starting Value
!+
! Error checks for sequence number and increment (must be less than 65536)
!-

	IF (CMPLNO (LINNO, EDT$$L_LNO_VFCMAX) GTR 0)
	THEN
	    BEGIN
	    EDT$$FMT_MSG (EDT$_SEQNUMOV);
	    RETURN (0)
	    END;

	DECR I FROM 9 TO 5 DO
	    BEGIN
	    SEQ_NUM = .SEQ_NUM*10;
	    EDT$$LDIV (LINNO, DIGIT, .I);
	    SEQ_NUM = .SEQ_NUM + .DIGIT;
	    END;

	MOVELINE (EDT$$Z_EXE_SBLK [SW_VAL2], LINNO);	! Increment

	IF (CMPLNO (LINNO, EDT$$L_LNO_VFCMAX) GTR 0)
	THEN
	    BEGIN
	    EDT$$FMT_MSG (EDT$_SEQINCROV);
	    RETURN (0)
	    END;

	DECR I FROM 9 TO 5 DO
	    BEGIN
	    SEQ_INCR = .SEQ_INCR*10;
	    EDT$$LDIV (LINNO, DIGIT, .I);
	    SEQ_INCR = .SEQ_INCR + .DIGIT;
	    END

	END;

!+
! Try to open the file and set up file specific messages
!-

    IF (.CHECK EQL 0)
    THEN
	BEGIN
	FILESTRM = EDT$K_WRITE_FILE;
	CLOSEMSG = EDT$_WRIFILCLO;
	OPNMSG = EDT$_WRIFILCRE;
	END
    ELSE
	BEGIN
	FILESTRM = EDT$K_OUTPUT_FILE;
	CLOSEMSG = EDT$_OUTFILCLO;
	OPNMSG = EDT$_OUTFILCRE;
	END;

    IF (.SEQ NEQ 0) THEN FILECODE = EDT$K_OPEN_OUTPUT_SEQ ELSE FILECODE = EDT$K_OPEN_OUTPUT_NOSEQ;

    STRING_DESC (FILE_DESC, NAME_LEN, .NAME);
    STATUS = EDT$$CALLFIO (.FILECODE, .FILESTRM, FILE_DESC, RHB_DESC);

    IF .STATUS
    THEN
	BEGIN
	MOVELINE (EDT$$L_LNO_ZERO, L_COUNT);
	C_COUNT = 0;
	EDT$$G_ABT_WRITE = 0;

	WHILE (EDT$$NXT_LNRNG (0) AND (.EDT$$A_WK_LN NEQA EDT$$Z_EOB_LN) AND ( NOT .EDT$$G_ABT_WRITE)) DO
	    BEGIN
!+
! Check for a CONTROL/C.  If one has been typed abort the write operation.
!-

	    IF EDT$$CHK_CC ()
	    THEN
		BEGIN
		EDT$$G_CC_DONE = 1;
		EDT$$G_ABT_WRITE = 1;
		END
	    ELSE
		BEGIN
!+
! Set up the RHB if /SEQ was used.
!-

		IF (.SEQ NEQ 0)
		THEN

		    IF (.EDT$$Z_EXE_SBLK [SEQ_VAL] EQL 0)	!
		    THEN
!+
! If no sequence start was given, then use the buffer's current line
! numbers in the VFC field (/SEQ )
!-
			BEGIN
			MOVELINE (EDT$$A_WK_LN [LIN_NUM], LINNO);

			DECR I FROM 14 TO 10 DO

			    WHILE (CMPLNO (LINNO, EDT$$L_LNO0 [.I]) GEQ 0) DO
				SUBLINE (EDT$$L_LNO0 [.I], LINNO);

			IF (CMPLNO (LINNO, EDT$$L_LNO_VFCMAX) GEQ 0)
			THEN
			    EDT$$L_IO_VFCHD = 65535
			ELSE
			    BEGIN
!+
! Set up sequence numbers, but first divide by 10**5
!-
			    EDT$$L_IO_VFCHD = 0;

			    DECR I FROM 9 TO 5 DO
				BEGIN
				EDT$$L_IO_VFCHD = .EDT$$L_IO_VFCHD*10;
				EDT$$LDIV (LINNO, DIGIT, .I);
				EDT$$L_IO_VFCHD = .EDT$$L_IO_VFCHD + .DIGIT;
				END

			    END

			END
		    ELSE
!+
! Otherwise, use the given sequence start and increment (/SEQ:st:inc)
!-
			BEGIN
			EDT$$L_IO_VFCHD = .SEQ_NUM;
			SEQ_NUM = .SEQ_NUM + .SEQ_INCR;

			IF (.SEQ_NUM EQL 65535) THEN SEQ_INCR = 0;

			END;

!+
! Write a line to the file.
!-
		RHB_DESC [DSC$W_LENGTH] = 2;
		RHB_DESC [DSC$A_POINTER] = EDT$$L_IO_VFCHD;
		STAT_DESC [DSC$W_LENGTH] = .EDT$$A_WK_LN [LIN_LENGTH];
		STAT_DESC [DSC$A_POINTER] = EDT$$A_WK_LN [LIN_TEXT];
		STATUS = EDT$$CALLFIO (EDT$K_PUT, .FILESTRM, STAT_DESC, RHB_DESC);

		IF ( NOT .STATUS)
		THEN
		    BEGIN

%IF %BLISS (BLISS32)
%THEN
		    EDT$$FIOPN_ERR (EDT$_ERROUTFIL, .EDT$$A_IO_FNAM);
%FI

		    EDT$$G_ABT_WRITE = 1;
		    END
		ELSE
		    BEGIN
!+
! Count lines and characters for consistency check.
!-
		    ADDLINE (NUMBER_ONE, L_COUNT);
		    C_COUNT = .C_COUNT + .EDT$$A_WK_LN [LIN_LENGTH];
		    END;

		END;

	    END;

!+
! Watch for the write abort flag, which can be set if we have an error on the input file,
! by control C or by an error writing the output file.
!-

	IF .EDT$$G_ABT_WRITE
	THEN
	    BEGIN
	    STATUS = EDT$$CALLFIO (EDT$K_CLOSE_DEL, .FILESTRM, FILE_DESC, 0);

	    IF ( NOT .STATUS) THEN EDT$$FIOPN_ERR (.CLOSEMSG, FILE_DESC);

	    EDT$$FMT_MSG (EDT$_NOFILWRT);

%IF %BLISS (BLISS32)
%THEN
	    STR$FREE1_DX (FILE_DESC);
%FI

	    RETURN (0);
	    END;

!+
! Do the consistency check.
!-

	IF (.CHECK NEQ 0)
	THEN

	    IF ( NOT (LINNOEQL (L_COUNT, EDT$$A_CUR_BUF [TBCB_LINE_COUNT])) OR 	!
		(.C_COUNT NEQ .EDT$$A_CUR_BUF [TBCB_CHAR_COUNT]))
	    THEN
		BEGIN
		EDT$$FMT_MSG (EDT$_CONCHKFLD);
		EDT$$G_EXE_SBITS = (.EDT$$G_EXE_SBITS OR OPT_SAVE);
		END;

!+
! Close the output file and print a message giving number of lines written
! to the file.
!-

	IF (.EDT$$G_EXT_MOD) THEN EDT$$STOP_WKINGMSG ();

	STATUS = EDT$$CALLFIO (EDT$K_CLOSE, .FILESTRM, FILE_DESC, 0);

	IF .STATUS
	THEN
	    BEGIN
!+
! Reset the screen width on EXIT if necessary.  If the screen was reset, then
! reposition the cursor at the bottom of the screen.
!-

	    IF (.CHECK NEQ 0)
	    THEN

		IF (.EDT$$G_TI_WID NEQ .EDT$$G_SAV_TIWID)
		THEN
		    BEGIN
		    EDT$$SC_SETWID (.EDT$$G_SAV_TIWID);
		    EDT$$SC_POSCSIF (.EDT$$G_MESSAGE_LINE, 0);
		    END;

!+
! Print a message if one is requested.  This will be the 'input file does not have standard format'
! message deferred because we thought the user was never going to write the buffer.
!-

	    IF (.EDT$$G_WRITE_MSG NEQ 1)
	    THEN
		BEGIN
		EDT$$FMT_MSG (.EDT$$G_WRITE_MSG);
		EDT$$G_WRITE_MSG = 1;
		END;

%IF SUPPORT_WPS
%THEN

	    IF .EDT$$G_SUMRY
	    THEN
%FI

		BEGIN
!+
! Extract the resultant filename of the opened file and format
! it to write out if the summary flag is set.
!-

%IF %BLISS (BLISS32)
%THEN
		EDT$$FMT_STR (.FILE_DESC [DSC$A_POINTER], .FILE_DESC [DSC$W_LENGTH]);
%ELSE
		EDT$$GET_FNAM ();
%FI

		EDT$$FMT_CH (' ');
		EDT$$FMT_STRCNT (L_COUNT, UPLIT (' line'), 5);
		EDT$$FMT_CRLF ()
		END;

!+
! On VMS deallocate all dynamic descriptors used
!-

%IF %BLISS (BLISS32)
%THEN
	    STR$FREE1_DX (FILE_DESC);
%FI

	    RETURN (1);
	    END
	ELSE
	    BEGIN
!+
! File was not closed, output error message.
!-
	    EDT$$FIOPN_ERR (.CLOSEMSG, FILE_DESC);
!+
! On VMS deallocate all dynamic descriptors used
!-

%IF %BLISS (BLISS32)
%THEN
	    STR$FREE1_DX (FILE_DESC);
%FI

	    RETURN (0);
	    END

	END
    ELSE
	BEGIN
!+
! File was not created, output error message.
!-
	EDT$$FIOPN_ERR (.OPNMSG, FILE_DESC);
!+
! On VMS deallocate all dynamic descriptors used
!-

%IF %BLISS (BLISS32)
%THEN
	STR$FREE1_DX (FILE_DESC);
%FI

	RETURN (0);
	END

    END;					! of routine WRITE_FILE

%SBTTL 'EDT$$EXI_CMD  - EXIT line-mode command'

GLOBAL ROUTINE EDT$$EXI_CMD 			! EXIT line-mode command
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Command processing routine for exit.  Switch to the main buffer,
!	write the output file and set the EDT$$G_EXITD  flag
!	if it succeeded.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$G_RCOV_MOD
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_EXITD
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$FND_BUF;

    EXTERNAL
	EDT$$G_EXITD,
	EDT$$G_RCOV_MOD;

    LOCAL
	RANGE : NODE_BLOCK;

!+
! Ignore the EXIT command encountered during recovery.
!-

    IF .EDT$$G_RCOV_MOD THEN RETURN;

!+
! Setup the range as WHOLE.
!-
    RANGE [NODE_TYPE] = RANGE_NODE;
    RANGE [RAN_TYPE] = RAN_WHOLE;
    RANGE [PREV_RANGE] = 0;
!+
! Position into the MAIN buffer.
!-
    EDT$$FND_BUF (UPLIT (%STRING ('MAIN')), 4);
!+
! Attempt to write the file, and set the EXITED flag if it succeeds.
!-
    EDT$$G_EXITD = WRITE_FILE (RANGE, 1);
    END;					! of routine EDT$$EXI_CMD


%SBTTL 'EDT$$WR_CMD  - WRITE line-mode command'

GLOBAL ROUTINE EDT$$WR_CMD 			! WRITE line-mode command
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Command processing routine for the write command.  Look at the current range;
!	if it is null, use the whole buffer.  Then write the file.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$Z_RNG_ORIGPOS
!	EDT$$A_EXE_CURCMD
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_CUR_BUF
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$RD_CURLN;

    EXTERNAL
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,
	EDT$$Z_RNG_ORIGPOS : POS_BLOCK,
	EDT$$A_EXE_CURCMD : REF NODE_BLOCK;	! Pointer to the current command.

    LOCAL
	SAV_BUF,				! address of original buffer
	RANGE : REF NODE_BLOCK;

    SAV_BUF = .EDT$$A_CUR_BUF;			! save original address
    RANGE = .EDT$$A_EXE_CURCMD [RANGE1];

    IF (.RANGE [RAN_TYPE] EQL RAN_NULL) THEN RANGE [RAN_TYPE] = RAN_WHOLE;

    WRITE_FILE (.RANGE, 0);
!+
! Reposition to the original line.
!-
    EDT$$A_CUR_BUF = .SAV_BUF;			! first get the buffer address
    EDT$$CPY_MEM (POS_SIZE, EDT$$Z_RNG_ORIGPOS, .EDT$$A_CUR_BUF);
    EDT$$RD_CURLN ();				! do the positioning
    END;					! of routine EDT$$WR_CMD

!<BLF/PAGE>

END						! of module EDT$LWRITE

ELUDOM
