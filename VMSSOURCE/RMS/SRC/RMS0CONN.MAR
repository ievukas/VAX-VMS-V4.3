	$BEGIN	RMS0CONN,000,RM$RMS,<DISPATCH ROUTINE FOR CONNECT>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: rms32
;
; Abstract:
;		this routine is the highest level control
;		routine to perform the $connect function.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F LAVERDURE,	 Creation Date: 5-JAN-1977
;
; Modified By:
;
;	V03-009	KPL0001		Peter Lieberwirth	20-Jun-1983
;		Change some references to JNLFLG to JNLFLG2.
;
;	V03-008	TSK0001		Tamar Krichevsky	12-Jun-1983
;		Fix broken branch to journaling psect.
;
;	V03-007	RAS0151		Ron Schaefer		29-Apr-1983
;		Fix broken branches to RM$CONNECT_BIO and RM$CONNECTx.
;
;	V03-006	KBT0363		Keith B. Thompson	11-Oct-1982
;		Allocate the asb as a seperate structure
;
;	V03-005 LJA0026		Laurie J. Anderson	11-Oct-1982
;		No longer need R0 passed to RM$GTSLT, makes the call cleaner
;
;	V03-004	JWH0002		Jeffrey W. Horn		10-Sep-1982
;		Fill IRB$L_IDENT with a unique identifier for each
;		IRB connected throughout the life of a process.
;
;	V03-003 LJA0019		Laurie J. Anderson	03-Sep-1982
;		Check to see if this is a restart connect operation by looking
;		for a context XAB (XABCXR) and whether the restart option is set
;
;	V03-002	KBT0301		Keith B. Thompson	28-Aug-1982
;		Reorganize psects and rename entry point to single '$'
;
;	V03-001	JWH0001		Jeffrey W. Horn		18-May-1982
;		Add call to RM$CONJNL if journaling.
;
;	V02-017	KDM0037		Kathleen D. Morse	12-Feb-1980
;		Change non-kernel references to SCH$GL_CURPCB to
;		CTL$GL_PCB instead.
;
;	V016	REFORMAT	D M WALP	25-JUL-1980
;
;	V015	RAN0003		R A NEWELL	20-DEC-1978	1:30
;		fixed pid bug
;
;	V014	RAN0002		R A NEWELL	1-SEP-1978	12:00
;		rms32 isam modification.  redefinition of entry point to
;		resolve out of range branches.
;
;
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$FABDEF
	$RABDEF
	$IMPDEF
	$PIODEF
	$IFBDEF
	$IRBDEF
	$PCBDEF
	$ASBDEF
	$RMSDEF

;
; Equated Symbols:
;

	ROP=RAB$L_ROP*8			; bit offset to rop field

;
; Own Storage:
;

IRAB_SIZE_TBL:
	.BYTE	<IRB$C_BLN_SEQ>/4
	.BYTE	<IRB$C_BLN_REL>/4
	.BYTE	<IRB$C_BLN_IDX>/4
ASB_SIZE_TBL:
	.WORD	<ASB$C_BLN_SEQ>/4
	.WORD	<ASB$C_BLN_REL>/4
	.WORD	<ASB$C_BLN_IDX>/4


	.SBTTL	RMS$CONNECT - $CONNECT ROUTINE

;++
;  RM$CONNECT
;
;	RM$CONNECT-
;
;	this routine performs the highest level $connect
;	processing.  its functions include:
;
;	1. allocate and init an irab along with its asb
;	2. perform common setup
;	3. dipatch to organization-dependent routine
;
;
;
; Calling sequence:
;
;	entered from exec as a result of user's calling sys$connect
;	(e.g., by using the $connect macro).
;
; Input Parameters:
;
;	ap	user's argument list address
;
; Implicit Inputs:
;
;	the contents of the rab and the ifi field of the fab.
;
; Output Parameters:
;
;	r0	status code
;	r1	destroyed
;
; Implicit Outputs:
;
;	various fields of the rab are filled in to reflect
;	the status of the connected stream.  (see rms functional
;	spec for a complete list.)
;
;	an irab is initialized to reflect the connected stream.
;
;	a completion ast is queued if so specified by the user.
;
; Completion Codes:
;
;	standard rms (see functional spec for list).
;
; Side Effects:
;
;	none
;
;--


	$ENTRY	RMS$CONNECT
	$TSTPT	CONNECT

;
;  perform common rab function setup, validating the
;  argument list and basic rab, and setting regs as
;  follows:  r11=impure area addr,  r9=isi, r8=rab addr, r7=caller's mode
;

	BSBW	RM$RABCHK		; return from setup only if aok

;
;  get ifab address via the fab
;
	MOVL	RAB$L_FAB(R8),R10	; get fab addr
	IFNORD	#FAB$C_BLN,(R10),ERRFAB	; must be able to access
	ASSUME	FAB$B_BID EQ 0
	CMPB	(R10),#FAB$C_BID	; is it a fab?
	BNEQ	ERRFAB			; branch if not
	CMPB	FAB$B_BLN(R10),#FAB$C_BLN
					; long enough?
	BLSS	ERRBLN
	MOVZWL	FAB$W_IFI(R10),R9	; get ifi
	MOVL	#IMP$L_IFABTBL/4,R0	; ifab table offset/4
	BSBW	RM$GTIADR		; get ifab addr (r9)
	BEQL	ERRIFI			; error if none
	.IF	NE $$RMSTEST&$$RMS_TBUGCHK
	ASSUME	IFB$B_BID EQ IFB$B_BLN-1
	CMPW	IFB$B_BID(R9),-
		#IFB$C_BID+<<IFB$C_BLN/4>*256>
	BNEQ	ERRBUG			; branch if not a valid ifab
	.ENDC
	BBS	#IFB$V_BUSY,(R9),ERRACT	; branch if ifab already in use
	BBS	#FAB$V_PPF_IND+<FAB$W_IFI*8>,-
		(R10),PPF_IND		; branch if indirect ppf
	MOVL	R9,R10			; save ifab addr in r10

;
;  check for only 1 irab unless multi-streams enabled
;

	MOVZBL	IFB$B_ORGCASE(R10),R5	; get file org index
	ASSUME	IFB$C_SEQ EQ 0
	BEQL	10$			; branch if sequential
					; (no multi streaming)
	CMPB	R5,#IFB$C_MAXORG	; is this a known file org?
	BLEQ	5$			; branch if yes
	CLRL	R5			; no - allocate seq. len irab
	BRB	10$			; check no multi-streams
5$:	BBS	#IFB$V_MSE,(R10),20$	; omit check if multi-streams enabled
10$:	TSTL	IFB$L_IRAB_LNK(R10)	; already got an irab?
	BNEQ	ERRCCR			; branch if yes (error)
20$:

;
; Allocate irab and asb.  Both structures are variable in
; size depending on organization.
;

	MOVZBL	IRAB_SIZE_TBL[R5],R2		; get irab size in longwords
	MOVL	R10,R1				; page having free space header
	BSBW	RM$GETBLK			; allocate irab
	BLBC	R0,EX_NOSTR			; branch if none
	MOVL	R1,R9				; stuff irab
	MOVZWL	ASB_SIZE_TBL[R5],R2		; get asb size in longwords
	MOVL	R10,R1				; restore page having header
	BSBW	RM$GETBLK			; allocate asb
	BLBC	R0,ERRASB			; branch if none
	MOVB	#ASB$C_BID,ASB$B_BID(R1)	; make it a real one

	ASSUME	ASB$W_STKLEN	EQ	0

	SUBW3	#<ASB$C_BLN_FIX/4>,-		; calculate the size of the
		ASB_SIZE_TBL[R5],(R1)		;  stack save space in longwords
	MULW2	#4,(R1)				; convert it to bytes
	MOVL	R1,IRB$L_ASBADDR(R9)		; save address of asb
	BRB	INIT_IRAB			; finish irab initialization



;
;  error handling
;

ERRACT:
	BSBB	ERROR
	RMSERR_WORD	ACT		; fab function already active

ERRIFI:
	BSBB	ERROR
	RMSERR_WORD	IFI		; invalid ifi value in fab

ERRFAB:
	BSBB	ERROR
	RMSERR_WORD	FAB		; invalid fab

ERRBLN:
	BSBB	ERROR
	RMSERR_WORD	BLN		; invalid block length

ERRCCR:
	BSBB	ERROR			; can't connect rab
	RMSERR_WORD	CCR

ERROR:
	MOVZWL	@(SP)+,R0		; in-line error code to r0
	BRW	RM$EX_NOSTR		; report error

ERRBUG:	RMSTBUG	FTL$_BADIFAB		; invalid ifab table pointer


;
;  this is an indirect connect for a process permanent file
;
;  perform various checks to see if allowed
;

PPF_IND:
	MOVW	FAB$W_IFI(R10),-
		RAB$W_ISI(R8)		; save rat value in isi
	MOVL	R9,R10			; get ifab addr to right reg
	MOVL	IFB$L_IRAB_LNK(R9),R9	; get irab addr
	BEQL	ERRCCR			; branch if none
	BBS	#IRB$V_BUSY,(R9),ERRACT	; branch if busy

;
;  do miscellaneous context cleanups
;

	CLRW	IRB$W_CSIZ(R9)		; say no current record

;
;  return the isi value to the rab and do a structureless exit
;

20$:	INSV	IRB$B_PPF_ISI(R9),-
		#RAB$W_ISI*8,-
		#RAB$V_PPF_RAT,(R8)	; set table index into isi
	RMSSUC
EX_NOSTR:
	BRW	RM$EX_NOSTR		; do structureless exit

;
;  irab was allocated but no irab table slot or error allocating asb -
;  deallocate the irab and return an error
;

ERRNOSLT:
ERRASB:
	PUSHL	R0			; Save the error code.
	MOVL	R10,R3			; page addr of free space hdr
	MOVL	IRB$L_ASBADDR(R9),R4	; get addr of asb
	BEQL	10$			; skip if none
	BSBW	RM$RETBLK		; give it back
	MOVL	R10,R3			; restore page addr of free space hdr
10$:	MOVL	R9,R4			; get addr of irab
	BSBW	RM$RETBLK		; give it back
	POPL	R0			; Restore error code
	BRW	RM$EX_NOSTR		; Exit to user without internal structure


;
;  set irab bid, bln
;

INIT_IRAB:
	MOVB	#IRB$C_BID,IRB$B_BID(R9)

;
; Check to see if this is a restart connect operation by looking for
; a context XAB and whether the restart option bit is set.
;
	PUSHL	AP			; Save argument pointer.
	BSBW	RM$CONNXAB		; Look for Context XAB - calls XAB_SCAN
	POPL	AP			; Restore AP
	BLBC	R0,ERRNOSLT		; error: return, after returning IRB pg
	BBC	#IRB$V_RESTART,(R9),5$	; If not restart operation, continue
	MOVZWL	RAB$W_ISI(R8),R6	; Set up ISI value for get slot.

;
;  allocate and initialize a slot in the irab table
;

5$:	MOVL	IMP$L_IRABTBL(R11),R5	; set table addr
	BSBW	RM$GTSLT		; and get a slot
	BLBC	R0,ERRNOSLT		; branch if none
	MOVW	R6,RAB$W_ISI(R8)	; store isi value
	MOVW	R6,IRB$W_OWN_ISI(R9)	; save isi value
	MOVL	@#CTL$GL_PCB,R0		; get addr of pcb for process
	MOVW	PCB$L_PID(R0),-
		IRB$W_OWN_ID(R9)	; get process id index

;
;  give the irab a unique identifier
;

	INCL	@#PIO$GL_NXTIRBSEQ	; up next IRB sequence number
	MOVL	@#PIO$GL_NXTIRBSEQ,IRB$L_IDENT(R9) ; move into IRB

;
;  link the irab into the ifab's chain (at start)
;

	MOVL	R10,IRB$L_IFAB_LNK(R9)	; set ifab ptr
	MOVL	IFB$L_IRAB_LNK(R10),IRB$L_IRAB_LNK(R9)
	MOVL	R9,IFB$L_IRAB_LNK(R10)

;
;  if this file is being journaled, call RM$CONJNL
;

	BBC	#IFB$V_JNL,IFB$B_JNLFLG2(R10),10$; branch if not journaling
	JSB	RM$CONJNL		; get journaling BDB and buffer
	BLBS	R0,10$			; continue if ok
	BRW	ERRORG			; get out on error
;
;  set stream busy and call rm$rset_alt to perform various other setups
;

10$:	SSB	#IRB$V_BUSY,(R9)	; set stream busy
	BSBW	RM$RSET_ALT		; no error possible
	.BYTE	0			; no in-line checks

;
;  dispatch to organization-dependent routine
;

	CASE	TYPE=B,-		; pickup correct routine
		SRC=IFB$B_ORGCASE(R10),-
		DISPLIST=<100$,200$,300$> ; seq, rel, idx orgs
					
;++
;
;  connect for unknown org.  verify that only block i/o will be done,
;  giving error otherwise.
;
;--

	RMSERR	ORG			; anticipate error
	BBC	#RAB$V_BIO+ROP,(R8),20$	; branch if bio rop option clear
	BBCC	#FAB$V_BRO,IFB$B_FAC(R10),20$
					; branch if fac not bro
	BISB2	#FAB$M_BIO,IFB$B_FAC(R10)
					; switch bro to bio
20$:	BBC	#FAB$V_BIO,IFB$B_FAC(R10),-
		ERRORG			; error if not block i/o
	JMP	RM$CONNECT_BIO		; connect for block i/o

100$:	JMP	RM$CONNECT1
200$:	JMP	RM$CONNECT2
300$:	JMP	RM$CONNECT3


ERRORG:	BSBW	RM$CCLN1		; deallocate irab
	BRW	RM$EX_NOSTR		; and get out

	.END
