	.TITLE	RMSRECRFB RFB Maintenance Routines
	.IDENT	/V04-000/
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;
;++
; Facility: RMS32 Recovery
;
; Abstract:
;
;		This module contains routines that understand the Recoverable
;		File Block (RFB) of RMS recovery.
;
;
; Environment:
;
;		These routines are linked as part of RMSRECOVR, which is merged
;		as a recovery routine into the Recovery Control Process.
;
;		This routine must be PIC since it will be merged into the
;		address space of the RCP.
;
; Author: 	Peter Lieberwirth	 Creation Date: 23-Jan-1983
;
; Modified By:
;
;--

.SUBTITLE Declarations

;
; Include Files
;

;
; Macros
;

	$CJFDEF		; RCP argument definitions
	$JFCBDEF	; journal definitions, including filter types
	$ROFDEF		; RMS recovery filter
	$RRPDEF		; recovery control packet definitions
	$RODBDEF	; RCP recoverable object descriptor block definitions
	$JENDEF		; RCP journal entry offsets
	$RJRDEF		; RMS journal entry format
	$RIMPDEF	; RMS recovery impure storage definition
	$RMSRDEF	; RMS operations
	$RRBDEF		; rms recovery block
	$RFBDEF		; rms recovery file block
	$RLOGDEF	; rms recovery logging

	$FABDEF		; fab definitions
	$RABDEF		; rab definitions
	$NAMDEF		; nam definitions

	$IMPDEF		; RMS impure area definitions
	
	$TMPOFFDEF	; definitions for argument offsets on CALL

	.PSECT	REC_CODE,EXE,NOWRT,PIC

.SUBTITLE RFB Routines
.SUBTITLE -	INIT_RFB

;++
; INIT_RFB
;
;	Allocate and initialize a Recoverable File Block
;
;	The RFB needs to contain two filenames.  One filename is the name
;	of the file as it was journaled.  The other filename is used to
;	open a file to recover.  Only RMSFILE recovery allows these names
;	to be different.  In the other cases, only the one filename will
;	be present.
;
;	The file name as journaled is described in the fields FILE_ELEM and
;	FILE.  The file to OPEN is described in the FILE_DESC field.
;
;	1. RMSFILE
;
;	   - file name as journaled comes from RODBA: JFILNAM
;	   - file to open comes from RODBAs: either BFILNAM or RFILNAM
;	     ASSUMPTION: BFILNAM and/or RFILNAM have device spec as
;	     well as file name spec.
;
;	   Sample Recover Command:
;
; $recover/forward/journal=rmsai/label=payroll/file=testai.rel -
; dma0:[jnl]backup.rel
;
;	   The RFB is initialized with a file name as journaled and a volume
;	   label as journaled.  These are used to declare filters, so that
;	   subsequent journal accesses read only the required entries.
;
;	2. VOLUME
;
;	   - file name as journaled: unnecessary
;	   - file to open come from RODBAs or journal entry:
;		device:	BDEVICE or disk$'JVOLUME'
;		file:	mapping entry
;
;	     Note: disk$'JVOLUME' not supported yet
;
;	3. RUJNL
;
;	   - file name as journaled: unnecessary
;	   - file to open comes from RODBA: RUJDEVNAM, and mapping entry
;
; This routine operates in two steps.  First, the target filename is set
; up.  A parse_file is then done, so defaults from this filename can be used
; for other fields where necessary.
;
; Inputs:
;	r10 - points to RRP
;	r9  - journaling entry if VOLUME or RUJNL, else RODB
;
; Outputs:
;	r8 - points to RFB
;
;--

INIT_RFB::

	MOVL	R6,-(SP)		; save R6
	BSBW	RM$RR_ALL_RFB		; allocate an RFB
	BLBC	R0,10$			; branch on error
	MOVL	R2,R8			; R8 has RFB address

;
; set up the file name fields needed to open the target to apply journal entries
; to.
;
	BSBW	SETUP_TARGET		; set up RFB file to open name fields
	BLBC	R0,10$			; get out on error

;
; Now set up the information required for mapping entries.  This can be done
; locally.
;
	BSBW	SETUP_MAPPING		; set up required info for mapping
					; pass status to caller
10$:	MOVL	(SP)+,R6		; restore R6
	RSB

.SUBTITLE -	FIND_RFB_BY_MAP

;++
; FIND_RFB_BY_MAP
;
; find RFB data structure containing the same sequence number as the one
; in the current journal entry.  Each ROF (filter descriptor) must be searched
; until the matching MAPSEQ is found.  Since several streams may have written
; entries to the journal using different MAPSEQ numbers, each filter describes
; one MAPSEQ.
;
; input
;	r11 - impure area
;	r9  - rms journal entry
;
; output
;	r8  - address of RFB if success
;	r7  - FAB in RFB
;	r6  - RAB in RFB
;	r5  - destroyed
;
;	if not success r8 is destroyed
;	r0  - status
;
;--

FIND_RFB_BY_MAP::

	MOVZWL	#1,R0			; anticipate success
	MOVL	RRB$L_RFB(R11),R8	; point to 1st RFB
	BEQL	50$			; branch if no RFB has been allocated
					;
10$:	MOVL	RFB$L_FILTERS(R8),R5	; get filter address
	BEQL	40$			; branch if no filters
					;
20$:	CMPL	ROF$L_MAPSEQ(R5),-	; does this entry correspond to
		RJR$L_MAPSEQ(R9)	; this RFB?
	BEQL	30$			; yes, branch
	MOVL	ROF$L_NXT(R5),R5	; get address of the next filter
	BNEQ	20$			; we found another filter
	BRB	40$			; go get the next RFB
30$:					; found the sucker
	BBC	#RFB$V_FILE_OPEN,-	; error if the OPEN failed...
		RFB$W_FLAGS(R8),50$	;
	MOVL	RFB$L_FAB(R8),R7	; get address of FAB
	MOVL	RFB$L_RAB(R8),R6	; get address of RAB
	RSB				; return to caller
					;
40$:	MOVL	RFB$L_NXT(R8),R8	; point to the next RFB
	BNEQ	10$			; branch if there is another RFB
50$:					;
	CLRL	R0			; failure
	RSB				; return to caller

.SUBTITLE -	FIND_RFB_BYNAME

;++
; FIND_RFB_BYNAME
;
;	Find the RFB using the volume label and file name in the journal
;	entry.  This routine is called when a mapping entry is encountered.
;	RMS recovery looks thru all the RFBs for the one this mapping
;	entry corresponds to.
;
;	CLOSE mapping entries on AI are ignored.  OPEN mapping entries on
;	BI are ignored.  Eventually, we can delete filters at this time.
;
; Inputs:
;	AP - get pointer to JEN
;	R9 - RMS journal record
; 
; Outputs:
;	R8 - rfb
;	R7 - fab
;	R6 - rab
;	R0 - status
;
; Side effects:
;	None.
;--

FIND_RFB_BYNAME::

; ignore boring mapping entries
;
	BBC	#RRP$V_BACK,-		; is this AI?
		RRP$W_FLAGS(R10),20$	;  branch if yes
	BBS	#RRP$V_BACK,-		; is this BI?
		RRP$W_FLAGS(R10),30$	;  branch if yes
	BRW	40$			; undefined, ignore
10$:					;
	MOVL	#RCP$_NORMAL,R0		; ignore these mapping entries
	RET				;
20$:					; AI, ignore CLOSE
	CMPB	#RMSR$_CLOSE,RJR$B_OP(R9); is it close?
	BEQL	10$			;  yes, ignore
	BRB	40$			; join common code
30$:					; BI, ignore OPEN
	CMPB	#RMSR$_OPEN,RJR$B_OP(R9); is it open?
	BEQL	10$			;  yes, ignore
40$:					;		
	
;
; Loop thru all the RFBs looking for the RFB corresponding to the file
; described by this mapping entry
;
	MOVL	RRB$L_RFB(R11),R8	; get address of RFB
50$:	MOVL	RFB$L_RODB(R8),R7	; get address of RODB
	brw	80$			; skip next until filename goes in RJR
					; can't be more than 1 stream in jnl
					; anyway
;
; compare volume label contained in journal entry with volume label in RFB
;
	MOVZBL	RJR$B_VOL_LEN(R9),R1	; get size for compare instruction
	CMPC3	R1,-			; size of volume label in mapping entry
		RJR$T_VOLNAME(R9),-	; volume label in mapping entry
		RFB$T_VOLNAME(R8)	; volume label in RFB
	BNEQ	60$			; branch if not this RFB
;
; compare file name contained in journal entry with file name in RFB
;
	MOVZWL	RJR$W_FILE_LEN(R9),R1	; size of file name
	CMPC3	R1,-			; size of file name in mapping entry
		RJR$T_FILE(R9),-	; file name in mapping entry
		RFB$T_FILE(R8)		; file name in RFB
	BEQL	80$			; found the sucker
60$:					;
	MOVL	RFB$L_NXT(R8),R8	; get the address of the next RFB
	BNEQ	50$			; if NEQ we found one, go look at it
70$:	CLRL	R0			; not found
	RSB
80$:	MOVL	#1,R0			; success
	BBC	#RFB$V_FILE_OPEN,-	; error if the OPEN failed...
		RFB$W_FLAGS(R8),70$	;
	MOVL	RFB$L_FAB(R8),R7	; get address of FAB
	MOVL	RFB$L_RAB(R8),R6	; get address of RAB
	RSB				; return to caller

.SUBTITLE Set up description of file to open
.SUBTITLE -	SETUP_TARGET
;++
;
;	This routine sets up the RFB FILE_DESC fields to point to
;	a file to open to apply the journal entries to.
;
; Inputs:
;
;	r8 - RFB
;	r9 - either RODB or RJR
;
; Outputs:
;
;	r0 - success or failure
;
; Side Effects:
;
;	If success, RFB FILE_DESC set up.
;
;--

SETUP_TARGET::

	MOVL	RRP$A_RODB(R10),R3	; get RODB address for sure
	CLRL	R0			; anticipate failure
	MOVL	RFB$L_FAB(R8),R7	; set up FAB address
	PUSHAB	B^SET_TAR_RTN		; return address

	$CASE	RODB$B_TYPE(R3),TYPE=B,-;
		DISPL=< 10$,-			; INVALID
			RMSFILE_TARGET,-	; RMSFILE
			VOLUME_TARGET,-		; VOLUME
			RU_TARGET,-		; RU
			RUJNL_TARGET,-		; RUJNL
			RUNODE_TARGET-		; RUNODE
		      >
10$:
SET_TAR_RTN:
	BLBC	R0,10$			; get out on error

	BSBW	PARSE_FILE		; parse the file spec
10$:	RSB				; return to caller

.SUBTITLE -	RMSFILE_TARGET
;++
;	This routine fills in the file name and device of the target file
;	to open and apply journal entries to.
;
; Inputs:
;
;	R8 - RFB
;
; Outputs:
;
;	r0 - success or failure
;	
;--

RMSFILE_TARGET::

;
; Set up the TARGET - the file to open.
;
	MOVZBL	#RODBA$K_BFILNAM,R1	; look for base file name
	BSBW	FIND_RODBA		; go get it
	BLBS	R0,10$			; found the sucker
	MOVZBL	#RODBA$K_RFILNAM,R1	; look for result file name if no base
	BSBW	FIND_RODBA		; go get it
	BLBC	R0,20$			; get out on error

;
; Found the right RODBA, now set up the descriptor
;
10$:	MOVZWL	RODBA$W_SIZE(R6),-	; set up size
		RFB$Q_FILE_DESC(R8)	;
	MOVL	RODBA$A_POINTER(R6),-	; set up address of string
		RFB$Q_FILE_DESC+4(R8)	;
					;
	MOVL	#1,R0			; success
20$:	RSB				; to caller

.SUBTITLE -	VOLUME_TARGET
;++
;
;	This routine sets up the target in the RFB for VOLUME recovery.
;
; Inputs:
;
;
; Outputs:
;
;
; Side Effects:
;
;
;--

VOLUME_TARGET::

	BSBW	SETUP_FILNAM		; get filename from RJR
	BLBC	R0,20$			; get out on error

	MOVZWL	#RODBA$K_BDEVICE,R1	; look for base device
	BSBW	FIND_RODBA		; go find it
	BLBC	R0,10$			; give up if its not here

;
; Point DNA, DNS at device name
;
	MOVB	RODBA$W_SIZE(R6),-	; size of device string
		FAB$B_DNS(R7)		;
	MOVL	RODBA$A_POINTER(R6),-	; copy pointer to device string
		FAB$L_DNA(R7)		;
	BRB	15$			; get out

; if BDEVICE is not here, we can try DISK$ 'VOLUME LABEL' from RJR
;
10$:	BSBW	DEVICE_FROM_RJR		; construct a device name (logical name)
					; from RJR if alll else fails
	BLBC	R0,20$			; get out on error

15$:	MOVL	#1,R0			; success
20$:	RSB				; to caller

.SUBTITLE -	RU_TARGET,RUNODE_TARGET
;++
;	This routine sets up the target for both RU and RUNODE.
;
; Inputs:
;
;	
; Outputs:
;
;
; Side Effects:
;
;--

RU_TARGET::
RUNODE_TARGET::

	BSBW	SETUP_FILNAM		; get file name from RJR
	BLBC	R0,10$			; get out on error
	BSBW	DEVICE_FROM_RJR		; construct device name from RJR volume
					; label
10$:	RSB				; return status to caller

.SUBTITLE -	RUJNL_TARGET

;++
; 	This routine sets up the target in the RFB for RUJNL recovery.
;
; Inputs:
;
; Outputs:
;
; Side Effects:
;
;--

RUJNL_TARGET::

	BSBW	SETUP_FILNAM		; get file name from RJR
	BLBC	R0,20$			; get out on error

	MOVZBL	#RODBA$K_RUJDEVNAM,R1	; look for device name of RU journal
	BSBW	FIND_RODBA		; look for it
	BLBC	R0,20$			; get out on error, must be present

;
; Point DNA, DNS at device name
;
	MOVB	RODBA$W_SIZE(R6),-	; size of device string
		FAB$B_DNS(R7)		;
	MOVL	RODBA$A_POINTER(R6),-	; copy pointer to device string
		FAB$L_DNA(R7)		;

	MOVL	#1,R0			; success
20$:	RSB				; return to caller

.SUBTITLE Set up mapping information.
.SUBTITLE -	SETUP_MAPPING
;++
;
;	This routine sets up the fields in the RFB  with the correct mapping
;	information.
;
; Inputs:
;
;	r8 - RFB
;	r9 - either RODB or RJR
;
; Outputs:
;
;	r0 - success or failure
;
; Side Effects:
;
;	If success, RFB mapping info set up.
;
;--

SETUP_MAPPING::

	MOVL	RRP$A_RODB(R10),R3	; get RODB address for sure
	$CASE	RODB$B_TYPE(R3),TYPE=B,-	;
		DISPL=<	10$,-			; INVALID
			RMSFILE_MAPPING,-	; RMSFILE
			VOLUME_MAPPING,-	; VOLUME
			RU_MAPPING,-		; RU
			RUJNL_MAPPING,-		; RUJNL
			RUNODE_MAPPING-		; RUNODE
		      >
10$:	CLRL	R0			; indicate error
	RSB				; return to caller

.SUBTITLE -	RMSFILE_MAPPING

;++
;	This routine sets up volume label and file name mapping information for
;	RMS files.
;
; Inputs:
;
; Outputs:
;
; Side Effects:
;
;--

RMSFILE_MAPPING::

;
; First, set up file name to map by.
;

	MOVZBL	#RODBA$K_JFILNAM,R1	; find file name as journaled
	BSBW	FIND_RODBA		; find RODBA
	BLBS	R0,50$			; continue if JFILNAM specifed

;
; file name as journaled not specified, calculate it from the BFILNAM specifier.
; (assume PARSE_FILE has been done, and NAM block has been filled in)
;
	MOVL	RFB$L_NAM(R8),R4	; get NAM block address
	MOVZBL	NAM$B_DIR(R4),R1	; get size of directory string
	ADDB3	NAM$B_NAME(R4),-	; add in length of filename and type
		NAM$B_TYPE(R4),R1	; 
	MOVW	#RJR$T_FILE,-		; offset into journal entry of
		RFB$W_FIL_OFF(R8)	; file name field
	MOVC3	R1,-			; move file name from NAM to RFB
		@NAM$L_DIR(R4),-	; from NAM
		RFB$T_FILE(R8)		; to RFB
	BRB	60$			; go do volume label
	
50$:					;

; now fill in RFB with file name
; 
; (assume disk specifier is in file name, eg DMA0:[X]Y.DAT)
;
;*** The following code will be used when RMS fills in the journal entry
;***
;	MOVW	RODBA$W_SIZE(R6),-	; size of file name
;		RFB$W_FIL_SIZ(R8)	; into RFB
	MOVW	#RJR$T_FILE,-		; offset into journal entry of
		RFB$W_FIL_OFF(R8)	; file name field
;	MOVC3	RODBA$W_SIZE(R6),-	; move file name from RODBA to RFB
;		@RODBA$A_POINTER(R6),-	; from RODBA
;		RFB$T_FILE(R8)		; to RFB

	movw	#1,rfb$w_fil_siz(r8)	; *** temp code (everything maps to 0)
	clrb	rfb$t_file(r8)		; ***

;
; Now fill in the volume label field to map by
;
60$:	MOVZBL	#RODBA$K_VOLUME,R1	; looking for type = VOLUME
	BSBW	FIND_RODBA		; go look for the sucker
	BLBC	R0,70$			; no such RODBA

;
; put volume label in RFB
;
; *** The following code will be used when RMS fills in the journal entry
; ***
;	MOVW	RODBA$W_SIZE(R6),-	; size of volume label
;		RFB$W_VOL_SIZ(R8)	; in RFB
	MOVW	#RJR$T_VOLNAME,-	; offset in journal entry of volume
		RFB$W_VOL_OFF(R8)	; label
;	MOVC3	RODBA$W_SIZE(R6),-	; move volume label from RODBA to RFB
;		@RODBA$A_POINTER(R6),-	; from RODBA
;		RFB$T_VOLNAME(R8)	; to RFB

	movw	#1,rfb$w_vol_siz(r8)	; *** temp code (everything maps to 0)
	clrb	rfb$t_volname(r8)	; ***
	BRB	90$			; all done

70$:					; find volume name from GETDVI on device
	BSBW	GET_VOL_LABEL		;
	BLBC	R0,100$			; out on failure	
					; exit
90$:	MOVL	#1,R0			; success
100$:	RSB

.SUBTITLE -	VOLUME_MAPPING

;++
;	This routine sets up the RFB mapping info if volume recovery.
;	No volume label is needed because its volume recovery anyway.
;
; Inputs:
;
; Outputs:
;
; Side Effects:
;
;--

VOLUME_MAPPING::

;
; Get filename to map by from RJR
;

	BSBW	SETUP_MAPNAM		; get RJR filename
	RSB				; return with status to caller

.SUBTITLE -	RECOVERY UNIT MAPPING

;++
;	These null routines set up RFB mapping info for RU recovery of any
;	kind.  No mapping is required, since no filters can be declared for
;	RU recovery.
;
;--

RU_MAPPING::
RUJNL_MAPPING::
RUNODE_MAPPING::

	MOVL	#1,R0			; null success
	RSB				; and return to caller

.SUBTITLE Local Subroutines
.SUBTITLE - 	DEVICE_FROM_RJR

;++
; DEVICE_FROM_RJR
;	
;	This routine constructs a device name from "DISK$" concatenated with
;	the volume label from the RJR in an attempt to make a device name.
;
; Inputs:
;
;	R9 - RJR
;	R8 - RFB
;	R7 - FAB
;
; Outputs:
;
;	R0 - STATUS
;
; Side Effects:
;
;	FAB$B_DNA, DNS filled in to point to DISK$'rjr volume label'
;
;--
	.PSECT	RD_DATA,RD,NOWRT,NOEXE

DISK:	.ASCII	/DISK$:/
DISKLEN=.-DISK

	.PSECT	REC_CODE,EXE,NOWRT,PIC

DEVICE_FROM_RJR::

	MOVZWL	#64,R1			; size of buffer to contain constructed
					; device name
	JSB	RM$RR_GET_BUFF		; get buffer
	BLBC	R0,20$			; get out on error
	MOVL	R2,FAB$L_DNA(R7)	; fill in pointer to buffer

	MOVZBL	#DISKLEN,R1		; get length of string to move
	MOVC3	R1,DISK,(R2)		; move in DISK$
					;  from ascii string
					;  to buffer

	MOVL	FAB$L_DNA(R7),R2	; recalculate pointer for rest of move
	ADDL	#DISKLEN,R2		; point past part already moved in
	MOVZBL	RJR$B_VOL_LEN(R9),R1	; length of label string in RJR
	MOVC3	R1,RJR$T_VOLNAME(R9),-	; move in volume label from RJR
		(R2)			;

	MOVB	RJR$B_VOL_LEN(R9),-	; get length of volume label
		FAB$B_DNS(R7)		;
	ADDB2	#DISKLEN,FAB$B_DNS(R7)	; calculate length of new device 
					;  name string
		
	MOVL	#1,R0			; success		
20$:	RSB				; to caller

.SUBTITLE -	SETUP_MAPNAM

;++
; SETUP_MAPNAM
;
;	This routine fills in the RFB file mapping fields from the RJR.
;
; Inputs:
;
; Outputs:
;
; Side Effects:
;
;--

SETUP_MAPNAM::

	MOVB	RJR$W_FILE_LEN(R9),-	; get length of filename
		RFB$W_FIL_SIZ(R8)	; into RFB

	MOVW	#RJR$T_FILE,-		; offset into journal entry of
		RFB$W_FIL_OFF(R8)	; file name field

	MOVC3	RJR$W_FILE_LEN(R9),-	; copy file name string to RFB (size)
		RJR$T_FILE(R9),-	; (target)
		RFB$T_FILE(R8)		; (destination)

	MOVL	#1,R0			; success
	RSB				; and return to caller

.SUBTITLE -	GET_VOL_LABEL

;++
; GET_VOL_LABEL
;
;	This routine gets the device name from the NAM block and uses
;	GETDVI to get a volume label to put in the RFB.
;
; Inputs:
;
; Outputs:
;
; Side Effects:
;
;--

GET_VOL_LABEL::

	CLRL	R0		; not implemented yet
	RSB			; to caller

.SUBTITLE -	SETUP_FILNAM

;++
; SETUP_FILNAM
;
;	This routine sets up the filename in the RFB from the filename in the
;	RJR.  If the RJR is empty, then the logical name RECOVER$FILE is
;	defaulted in.
;
; Inputs:
;	r9 - rjr
;	r8 - rfb
;	r7 - fab
;
;--

	.PSECT	RD_DATA,RD,NOWRT,NOEXE

RFILE:	.ASCII	/RECOVER$FILE:/
RFLEN=.-RFILE

	.PSECT	REC_CODE,EXE,NOWRT,PIC

SETUP_FILNAM::

	MOVB	RJR$W_FILE_LEN(R9),-	; get length of filename
		FAB$B_FNS(R7)		;
	beql	10$			; temp code if no RJR field
	MOVAL	RFB$T_FILE(R8),-	; get address of filename string to be
		FAB$L_FNA(R7)		;
	MOVC3	RJR$W_FILE_LEN(R9),-	; copy file name string to RFB (size)
		RJR$T_FILE(R9),-	; (target)
		RFB$T_FILE(R8)		; (destination)
;
; set up FILE_DESC in RFB
;
	MOVZWL	RJR$W_FILE_LEN(R9),-	; get length in 1st lw of descriptor
		RFB$Q_FILE_DESC(R8)	;
5$:	MOVAL	RFB$T_FILE(R8),-	; get address in 2nd lw of descriptor
		RFB$Q_FILE_DESC+4(R8)	;

	MOVL	#1,R0			; success
	RSB				; to caller

10$:					; temp debugging code
	movzbl	#rflen,r1		; get length of string to move
	movb	r1,fab$b_fns(r7)	; get length of filename in FAB

	movc3	r1,-			; length of string to move
		rfile,-			;  from: local descriptor
		rfb$t_file(r8)		;  to: field in RFB
	movzbl	#rflen,-		; get length in 1st lw of descriptor
		rfb$q_file_desc(r8)	;
	brb	5$			; join common code	

.SUBTITLE -	PARSE_FILE

;++
; PARSE_FILE
;
;	This routine parses the object file specification.  The parsed
;	file parts are useful in creating filters and setting up other
;	defaults.
;
; Inputs:
;
;	r8	- RFB
;
; Outputs:
;
;	r0	- success or failure
;	R7 	- FAB address.
;	FAB$L_FOP NAM bit set if success.  OPEN_FILE will then do a OPEN by
;		  name
;
; Side effects:
;
;	NAM block fields filled in.
;
;--

PARSE_FILE::

	MOVL	RFB$L_FAB(R8),R7	; get FAB address
	MOVL	RFB$Q_FILE_DESC+4(R8),-	; point FAB at file name
		FAB$L_FNA(R7)		;
	MOVB	RFB$Q_FILE_DESC(R8),-	; and file name size
		FAB$B_FNS(R7)		;
	MOVL	RFB$L_NAM(R8),FAB$L_NAM(R7) ; point FAB at NAM block
	$PARSE	FAB = (R7)		; parse the sucker
	BLBC	R0,10$			; skip on error
	SSB	#FAB$V_NAM,FAB$L_FOP(R7); set the open by NAM bit for OPEN_FILE
10$:	RSB				; return PARSE status to caller

	.END
