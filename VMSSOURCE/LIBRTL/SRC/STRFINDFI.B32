MODULE STR$FIND_FIRST (	! Find first character in or not in set

		IDENT = '1-002'	! File: STRFINDFI.B32  Edit: RKR1002

		   ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT: This module contains procedures to find the first character
!	in a set or not in a set.
!
! ENVIRONMENT: User mode, AST reeentrant
!
! AUTHOR: R. Reichert, CREATION DATE: 26-July-1982
!
! MODIFIED BY:
!
! 1-001	- Original. RKR 19-APR-1982.
! 1-002 - Code improvements.  RKR 24-Nov-1982.
!--
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!
REQUIRE 'RTLIN:STRLNK';		! Linkage to STR$ANALYZE_SDESC_R1
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$FIND_FIRST_IN_SET,	! Find first occurence of character
				! in a set of characters
    STR$FIND_FIRST_NOT_IN_SET ;	! Find first occurence of a character
				! not in a set of characters.

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECTS code
REQUIRE 'RTLIN:STRMACROS';	! use string macros to write code
LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbols

!
! MACROS: NONE
!

!
! EQUATED SYMBOLS: NONE
!

!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (STR);

!
! OWN STORAGE: NONE
!

!
! EXTERNAL REFERENCES
!
!	NONE

GLOBAL ROUTINE STR$FIND_FIRST_IN_SET ( ! Find first character in string
				       ! that occurs in set
	    STRING,	  ! pointer to string descriptor
	    SET_OF_CHARS  ! pointer to string descriptor which contains 
			  ! set of characters

			   ) : =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine searches STRING character by character, left to
!	right, comparing each character selected to every character in
!	SET_OF_CHARS.  When a match is found, the process stops and 
!	INDEX is set to the position in STRING where the match was 
!	found.  If no match is found, 0 is returned.
!	If either STRING or SET_OF_CHARS is of zero length, index
!	returned will be 0.
!
! CALLING SEQUENCE:
!
!	INDEX.wl.v = STR$FIND_FIRST_IN_SET ( STRING1.rt.dx, 
!					     SET_OF_CHARS.rt.dx )
!
! FORMAL PARAMETERS:
!
!	STRING1.rt.dx		pointer to string descriptor
!
!	SET_OF_CHARS.rt.dx	pointer to a string of characters which
!				constitutes the set of characters of
!				interest.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	INDEX.wl.v		Position in STRING where a match was
!				found, else 0.
!
! SIDE EFFECTS:
!
!	May signal STR$_ILLSTRCLA on bad string class
!
!--
    BEGIN

    MAP STRING       : REF BLOCK [ ,BYTE ],
	SET_OF_CHARS : REF BLOCK [ ,BYTE ];

    BUILTIN
	SCANC;

    LOCAL
	ONE : INITIAL (1),	! Constant
	BYTES_REMAINING,	! After SCANC
	MATCH_BYTE,		! After SCANC
	SCAN_TABLE : VECTOR [256, BYTE],  ! Table for SCANC operation
	STR_LEN : WORD,		! length of STRING
	STR_ADDR,		! address of string
	SET_LEN : WORD,		! length of SET_OF_CHARS
	SET_ADDR : REF VECTOR [, BYTE];	! address of SET_OF_CHARS

!+
! Initialize SCAN_TABLE to zeroes.
!-
    CH$FILL (0, 256, SCAN_TABLE);

!+
! Extract the length and starting address of STRING and SET_OF_CHARS.
! Special-case zero length strings.
!-
    $STR$GET_LEN_ADDR ( STRING, STR_LEN, STR_ADDR ) ;
    $STR$GET_LEN_ADDR ( SET_OF_CHARS, SET_LEN, SET_ADDR ) ;

    IF .STR_LEN EQL 0 OR
       .SET_LEN EQL 0		THEN RETURN 0 ;

!+
! Set a 1 bit in each character position in SCAN_TABLE that corresponds
! to a character in SET_OF_CHARS.
!-
    DECR I FROM .SET_LEN - 1 TO 0
    DO
	SCAN_TABLE [ .SET_ADDR [ .I] ] = 1 ;
!+
! Find out if one of the characters in SET_OF_CHARS appears in
! STRING.
!-
    SCANC ( STR_LEN, .STR_ADDR, SCAN_TABLE, ONE ; BYTES_REMAINING,
						  MATCH_BYTE );

    IF .BYTES_REMAINING NEQ 0	! If scanc ran off end of string
    THEN
	RETURN (.MATCH_BYTE - .STR_ADDR + 1);

    RETURN 0;
    END ; 		! Procedure STR$FIND_FIRST_IN_SET

GLOBAL ROUTINE STR$FIND_FIRST_NOT_IN_SET ( ! Find first character in 
					   ! string that does not occur
					   ! in set
	    STRING,	! pointer to string descriptor
	    SET_OF_CHARS  ! pointer to string descriptor which contains 
			  ! set of characters

			   ) : =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine searches STRING character by character, left to
!	right, comparing each character selected to every character in
!	SET_OF_CHARS.  When a selected character is not found in 
!	SET_OF_CHARS, the process stops and INDEX is set to the position
!	in STRING where the non-match was found.  If all characters in 
!	STRING match some character in SET_OF_CHARS, 0 is returned.
!
!	If STRING is if zero length, index will be 1 since anything
!	in set (particularly 1st element) will not be found in STRING.
!	If length of SET_OF_CHARS is zero, index will be zero since
!	"nothing" can always be found in STRING.
!
! CALLING SEQUENCE:
!
!	INDEX.wl.v = STR$FIND_FIRST_NOT_IN_SET ( STRING.rt.dx, 
!					         SET_OF_CHARS.rt.dx )
!
! FORMAL PARAMETERS:
!
!	STRING.rt.dx		pointer to string descriptor
!
!	SET_OF_CHARS.rt.dx	pointer to a string of characters which
!				constitutes the set of characters of
!				interest.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	INDEX.wl.v		Position in STRING where a non-match was
!				found, else 0.
!
! SIDE EFFECTS:
!
!	May signal STR$_ILLSTRCLA on bad string class
!
!--
    BEGIN

    MAP STRING       : REF BLOCK [ ,BYTE ],
	SET_OF_CHARS : REF BLOCK [ ,BYTE ];

    BUILTIN
	SPANC;

    LOCAL
	ONE : INITIAL (1),	! Constant
	BYTES_REMAINING,	! After SPANC
	NON_MATCH_BYTE,		! After SPANC
	SPAN_TABLE : VECTOR [256, BYTE],  ! Table for SPANC operation
	STR_LEN : WORD,		! length of STRING
	STR_ADDR ,		! address of string
	SET_LEN : WORD,		! length of SET_OF_CHARS
	SET_ADDR : REF VECTOR [,BYTE];	! address of SET_OF_CHARS

!+
! Initialize SPAN_TABLE to zeroes.
!-
    CH$FILL (0, 256, SPAN_TABLE);

!+
! Extract the length and starting address of STRING and SET_OF_CHARS.
! Special case zero length strings.
!-
    $STR$GET_LEN_ADDR ( STRING, STR_LEN, STR_ADDR ) ;
    $STR$GET_LEN_ADDR ( SET_OF_CHARS, SET_LEN, SET_ADDR ) ;

    IF .SET_LEN EQL 0 THEN RETURN 0 ;
    IF .STR_LEN EQL 0 THEN RETURN 1 ;

!+
! Set a 1 bit in each character position in SPAN_TABLE that corresponds
! to a character in SET_OF_CHARS.
!-
    DECR I FROM .SET_LEN - 1 TO 0
    DO
	SPAN_TABLE [ .SET_ADDR [ .I] ] = 1 ;
!+
! Find out if one of the characters in SET_OF_CHARS does not appear in
! STRING.
!-
    SPANC ( STR_LEN, .STR_ADDR, SPAN_TABLE, ONE ; BYTES_REMAINING,
						  NON_MATCH_BYTE );

    IF .BYTES_REMAINING NEQ 0	! If span ran off end of string
    THEN
	RETURN (.NON_MATCH_BYTE - .STR_ADDR + 1);

    RETURN 0;
    END ;			! Procedure STR$FIND_FIRST_NOT_IN_SET

END				!End of module
ELUDOM
