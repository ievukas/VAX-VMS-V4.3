MODULE SMG$NUMERIC_TABLES( %TITLE 'TPARSE tables for numeric capabilities'
		IDENT = '1-003'		! File: SMGNUMTAB.B32 Edit: PLL1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Screen Management 
!
! ABSTRACT:
!
!	This module contains the LIB$TPARSE state tables used to parse
!	numeric capabilities in an ascii TERMTABLE.TXT file.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: P. Levesque CREATION DATE: 30-Jan-1984
!
! MODIFIED BY:
!
! 1-001	- Original.  PLL 30-Jan-1984
! 1-002 - Allow comments on lines not terminated by comma.  PLL 15-Mar-1984
! 1-003 - Add frame capability.  PLL 29-Mar-1984
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	CONVERT_NUMERIC,		! convert ascii to binary integer
	NOT_NUMERIC;			! signal an unknown capability name

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:SMGPROLOG';		! Defines psects, macros, etc.

LIBRARY 'RTLML:SMGTPALIB';		! Definitions and macros used
					! to create TERMTABLE.EXE
LIBRARY 'RTLTPAMAC';			! TPARSE library of macros

!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!

!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
	OTS$CVT_TI_L,			! convert ascii digits to integer
	SMG$$BLANKS_OFF,		! turn off flag to process blanks
	SMG$$FLUSH_NUMERIC,		! flush numeric value to data area
	SMG$$MISSING_END,		! signal error
	SMG$$NEXT_RECORD,		! get next record from TERMTABLE.TXT
	SMG$$SAVE_TOKEN_STRING,		! store ptr & count for token
	SMG$$STORE_CAP_MASK,		! remember capability number
	SMG$$SYNTAX_ERROR;		! signal syntax error

EXTERNAL
	SMG$_ERRAT_LIN,			! error in line n at or near 'x'
	SMG$_MISTERNAM,			! missing terminal name
	SMG$_NOTNUMCAP,			! not a numeric capability
	SMG$_SYNERR;			! syntax error

EXTERNAL
	SMG$$MASK_ADR,			! used by TPARSE action routines
	SMG$$CURRENT_LINE;		! current input line - maintained
					! for error messages
!
! OWN STORAGE:
!
!	NONE

%SBTTL 'SMG$$NUMERIC_TABLES - TPARSE tables for numeric capabilities'
!++
! FUNCTIONAL DESCRIPTION:
!
!	The following are the state tables used to parse numeric
!	capabilities in a terminal definition.
!
!--

$INIT_STATE (SMG$$A_NUMERIC_STATES, SMG$$A_NUMERIC_KEYWDS);
				! set up state tables, key words

!+
! Begin scanning loop.  Look for the start of a capability.
! Skip over blanks and comments.
!-

$STATE (BEGIN_SCAN,
    ((END_OF_LINE), BEGIN_SCAN, SMG$$NEXT_RECORD),
    ('!', BEGIN_SCAN, SMG$$NEXT_RECORD),
    ((CAPABILITY), BEGIN_SCAN, SMG$$BLANKS_OFF),
    (TPA$_LAMBDA, TPA$_EXIT)
    );

!+
! This state indicates the end of a line.  A comment also signals the
! end of a line.
!-

$STATE (END_OF_LINE,
    (TPA$_EOS, TPA$_EXIT),
    ('!', TPA$_EXIT),
    (TPA$_LAMBDA, TPA$_FAIL)
    );

!+
! Find the capability name and determine if it's one that we expect.
! The string up to the '=' sign should be the capability name.  
!-

$STATE (CAPABILITY,
    ((NUMERIC_NAME), EQUALS_NUMERIC, SMG$$BLANKS_OFF),
    ('END', TPA$_FAIL),
    ('BOOLEAN', TPA$_FAIL),
    ('NUMERIC', BEGIN_SCAN),
    ('STRING', TPA$_FAIL),
    ('REQUIRE', TPA$_FAIL, SMG$$MISSING_END),
    ('NAME', TPA$_FAIL, SMG$$MISSING_END),
    (TPA$_SYMBOL, , NOT_NUMERIC)
    );

!+
! Check for a numeric name here.
!-

$STATE (NUMERIC_NAME,
    ('COLUMNS', TPA$_EXIT, , SMG$K_COLUMNS, SMG$$MASK_ADR),
    ('CR_FILL', TPA$_EXIT, , SMG$K_CR_FILL, SMG$$MASK_ADR),
    ('FRAME', TPA$_EXIT, , SMG$K_FRAME, SMG$$MASK_ADR),
    ('LF_FILL', TPA$_EXIT, , SMG$K_LF_FILL, SMG$$MASK_ADR),
    ('NUMBER_FN_KEYS', TPA$_EXIT, , SMG$K_NUMBER_FN_KEYS, SMG$$MASK_ADR),
    ('ROWS', TPA$_EXIT, , SMG$K_ROWS, SMG$$MASK_ADR),
    ('WIDE_SCREEN_COLUMNS', TPA$_EXIT, , SMG$K_WIDE_SCREEN_COLUMNS, SMG$$MASK_ADR),
    ('PRIVATE_NUM_1', TPA$_EXIT, , SMG$K_PRIVATE_NUM_1, SMG$$MASK_ADR),
    ('PRIVATE_NUM_2', TPA$_EXIT, , SMG$K_PRIVATE_NUM_2, SMG$$MASK_ADR),
    ('PRIVATE_NUM_3', TPA$_EXIT, , SMG$K_PRIVATE_NUM_3, SMG$$MASK_ADR),
    ('PRIVATE_NUM_4', TPA$_EXIT, , SMG$K_PRIVATE_NUM_4, SMG$$MASK_ADR),
    ('PRIVATE_NUM_5', TPA$_EXIT, , SMG$K_PRIVATE_NUM_5, SMG$$MASK_ADR),
    ('PRIVATE_NUM_6', TPA$_EXIT, , SMG$K_PRIVATE_NUM_6, SMG$$MASK_ADR),
    ('PRIVATE_NUM_7', TPA$_EXIT, , SMG$K_PRIVATE_NUM_7, SMG$$MASK_ADR),
    ('PRIVATE_NUM_8', TPA$_EXIT, , SMG$K_PRIVATE_NUM_8, SMG$$MASK_ADR),
    ('PRIVATE_NUM_9', TPA$_EXIT, , SMG$K_PRIVATE_NUM_9, SMG$$MASK_ADR),
    ('PRIVATE_NUM_10', TPA$_EXIT, , SMG$K_PRIVATE_NUM_10, SMG$$MASK_ADR),
    (TPA$_LAMBDA, TPA$_FAIL)
    );

!+
! Skip over intervening equals sign.
!-

$STATE (EQUALS_NUMERIC,
    ((END_OF_LINE), EQUALS_NUMERIC, SMG$$NEXT_RECORD),
    ('=', NUMERIC_CAP_VALUE, SMG$$STORE_CAP_MASK),
    (TPA$_SYMBOL, , SMG$$SYNTAX_ERROR),
    (TPA$_ANY, , SMG$$SYNTAX_ERROR)
    );

!+
! Get the numeric capability value.
!-

$STATE (NUMERIC_CAP_VALUE,
    ((END_OF_LINE), NUMERIC_CAP_VALUE, SMG$$NEXT_RECORD),
    ((NUMERIC_CAP), BEGIN_SCAN),
    (TPA$_SYMBOL, , SMG$$SYNTAX_ERROR),
    (TPA$_ANY, , SMG$$SYNTAX_ERROR)
    );

!+
! This is a numeric capability.  Convert ascii to binary and store it
! in TERMTABLE.EXE.
!-

$STATE (NUMERIC_CAP,
    (TPA$_DIGIT, NUMERIC_CAP, SMG$$SAVE_TOKEN_STRING),
    ((COMMA), TPA$_EXIT, CONVERT_NUMERIC),
    ((END_OF_LINE), NEW_RECORD, CONVERT_NUMERIC),
    (TPA$_ANY, , SMG$$SYNTAX_ERROR)
    );

$STATE (COMMA,
    (',', TPA$_EXIT, SMG$$BLANKS_OFF),
    (TPA$_BLANK, COMMA, SMG$$BLANKS_OFF),
    (TPA$_LAMBDA, TPA$_FAIL)
    );

$STATE (NEW_RECORD,
    (TPA$_LAMBDA, TPA$_EXIT, SMG$$NEXT_RECORD)
    );


%SBTTL 'CONVERT_NUMERIC - Convert ascii to binary integer'
ROUTINE CONVERT_NUMERIC =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Converts an ascii string to binary integer.  The integer is
!	stored in the location of the current capability data in 
!	TERMTABLE.EXE.
!
! CALLING SEQUENCE:
!
! 	status = CONVERT_NUMERIC ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

BEGIN

    BUILTIN
	CALLG,
	AP;
    MAP
	AP : REF BLOCK [,BYTE];

!+
! If we didn't find any digits, then there is nothing to convert.
!-

    IF .AP [PARAM_L_SAVED_TOKENCNT] EQL 0
    THEN
	RETURN (SS$_NORMAL);

!+
! If this is not the NAME capability and we have no pointers set up
! for the terminal definition, then NAME was not the first capability
! in the definition.  Complain.
!-

    BEGIN
    BIND
	CAP_PTRS = .AP [PARAM_L_CUR_TERM_DEF] : VECTOR [,WORD];

    IF CAP_PTRS EQL 0
    THEN
	SIGNAL_STOP (SMG$_MISTERNAM);

!+
! Move the capability data.  The byte count is in the first byte and
! the actual data follows.
!
! We must convert the ascii digits to binary.
!-

    BEGIN
    LOCAL
	STATUS,
	INPUT_STRING_DESC : BLOCK [8,BYTE];
	
    INPUT_STRING_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    INPUT_STRING_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    INPUT_STRING_DESC [DSC$W_LENGTH] = .AP [PARAM_L_SAVED_TOKENCNT];
    INPUT_STRING_DESC [DSC$A_POINTER] = .AP [PARAM_L_SAVED_TOKENSTR];

    IF NOT (STATUS = OTS$CVT_TI_L (INPUT_STRING_DESC, AP [TPA$L_NUMBER]))
    THEN
	SIGNAL_STOP (SMG$_ERRAT_LIN,
		     3, .SMG$$CURRENT_LINE,
		     .AP [PARAM_L_SAVED_TOKENCNT],
		     .AP [PARAM_L_SAVED_TOKENSTR],
		     .STATUS);

    CALLG (.AP, SMG$$FLUSH_NUMERIC);	! move value to data area

    END;


    END;				! end of BINDs scope

!+
! Re-initialize capability string.
!-

    AP [PARAM_L_SAVED_TOKENCNT] = 0;
    AP [PARAM_L_SAVED_TOKENSTR] = 0;

    RETURN (SS$_NORMAL);

END;					! end of routine CONVERT_NUMERIC

%SBTTL 'NOT_NUMERIC - signal an unknown capability name'
ROUTINE NOT_NUMERIC =

!++
! FUNCTIONAL DESCRIPTION:
!
!	We just found an unknown capability name.  It could be a misspelling
!	or it could be a name misplaced under the wrong heading.  Signal an
!	error.
!
! CALLING SEQUENCE:
!
! 	status = NOT_NUMERIC ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN
    BUILTIN
	AP;
    MAP
	AP : REF BLOCK [,BYTE];

    SIGNAL_STOP (SMG$_ERRAT_LIN,
		 3, .SMG$$CURRENT_LINE,
		 .AP [TPA$L_TOKENCNT],
	 	 .AP [TPA$L_TOKENPTR],
		 SMG$_NOTNUMCAP)

    END;			! end of routine NOT_NUMERIC
!<BLF/PAGE>

END					! End of module SMG$TPARSE_TABLES

ELUDOM
