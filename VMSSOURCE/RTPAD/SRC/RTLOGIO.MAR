	.TITLE RTLOGIO - CTERM LOG IO
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; FACILITY:	RTPAD, SET HOST
;
; ABSTRACT:
;
;	This module provides the support for doing logging of an interactive
;	terminal session.
;
; ENVIRONMENT:
;
;	user mode.
;
;--
;
; AUTHOR: Jake VanNoy, CREATION DATE: 5-Jun-1983
;
; MODIFIED BY:
;
;	V03-003	JLV0352		Jake VanNoy		10-APR-1984
;		Add CALL entry point for DTE code.
;
;	V03-002	JLV0333		Jake VanNoy		28-FEB-1984
;		Add minor amount of code that is only used for debug
;		purposes.  Outputs trace to RTPAD$TRACE.
;
;	V03-001	JLV0323		Jake VanNoy		10-JAN-1984
;		Fix up error handling.  Add write behind to options to reduce
;		overhead of /LOG.
;
;**


	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$RTPADDEF		; Miscellaneous symbols
	$TSADEF			; CTERM packet defintion

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

.PSECT	_RTPAD,LONG	; READ/WRITE DATA

.ALIGN LONG

cterm_fab:	$FAB	DNM = <SETHOST.LOG>,-
			FAC = PUT,-
			RAT = CR,-
			FOP = SQO,-		; sequential only
			ORG = SEQ,-		; sequential 
			RFM = VAR,-		; variable
			NAM = cterm_nam

cterm_rab:	$RAB	FAB = cterm_fab,-
			RAC = SEQ,-
			ROP = WBH			; write behind for performance

cterm_nam:	$NAM	ESA = file_str,-
			ESS = nam$c_maxrss

filespec:	.long		0
		.address	file_str
file_str:	.blkb		nam$c_maxrss

LOG_A_EXT:	.ascii	/.LOG/
LOG_S_EXT = .-LOG_A_EXT


	.SBTTL	CTERM$LOG_IO - LOG I/O
	.PSECT	RTPAD,nowrt
;++
;
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;	
;	BSBW	CTERM$LOG_IO
;
; INPUT PARAMETERS:
;
;	R1 - address of string
;	R2 - length
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	An error writing the output file may turn off logging.
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

CTERM$LOG_IO::

	PUSHR	#^M<R0,R1,R2,R4>
	MOVAB	W^CTERM_RAB,R4		; address of rab

	CMPL	#2,R2			; Must be at least 2 bytes long
	BGEQU	10$			; or skip cr,lf check
	
	CMPW	#^X0A0D,(R1)		; CR, LF at start of record?
	BNEQ	10$			; if not, branch
	ADDL	#2,R1			; Add
	SUBL	#2,R2			; Subtract
10$:
	MOVL	R1,RAB$L_RBF(R4) 	; set buffer address
	MOVW	R2,RAB$W_RSZ(R4)	; and size

	$PUT	RAB = R4		; output line
	BLBC	R0,250$			; signal error
200$:
	POPR	#^M<R0,R1,R2,R4>	; restore
    	RSB				; return
250$:

	; signal error and turn off logging

	PUSHL	#SS$_MUSTCLOSEFL	; closing file
	PUSHL	R0			; real status
	PUSHAB	FILESPEC		; file spec
	PUSHL	#1			; FAO arg count
	PUSHL	#SHR$_WRITEERR!<REM$_FACILITY@16> ; logging error
	CALLS	#5,G^LIB$SIGNAL		; Signal error

	BSBW	CTERM$CLOSE_LOG		; close file

	BRB	200$			; exit


	.SBTTL	CTERM$OPEN_LOG - OPEN LOG FILE
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Opens log file and turns on logging flag if successful.
;
; CALLING SEQUENCE:
;	
;	CALLS	#1,CTERM$OPEN_LOG
;
; INPUT PARAMETERS:
;
;	4(AP)	- Descriptor of log file to open (zero if none specified)
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	If no errors, FLG$M_LOGGING will be set in CTERM_FLAG
;
; COMPLETION CODES:
;
;	RMS codes from CREATE and CONNECT
;
; SIDE EFFECTS:
;
;
;--

.ENTRY	CTERM$OPEN_LOG,	^M<R2,R3>

	MOVAB	CTERM_FAB,R2		; address of FAB
	MOVL	4(AP),R3		; Fetch descriptor
	BEQL	20$			; If none, then use default

	MOVB	(R3),FAB$B_FNS(R2)	; size of file spec
	MOVL	4(R3),FAB$L_FNA(R2)	; address of file spec
	MOVB	#LOG_S_EXT,FAB$B_DNS(R2); size of default extension	
	MOVAB	LOG_A_EXT,FAB$L_DNA(R2)	; Address of default extension	
20$:
	MOVL	#SHR$_OPENOUT!<REM$_FACILITY@16>,FAB$L_CTX(R2) ; In case of error
	$CREATE	FAB = (R2)		; Create file
	BLBC	R0,50$			; Branch on error

	MOVAB	W^CTERM_NAM,R2		; address of nam
	MOVZBW	NAM$B_ESL(R2),FILESPEC	; length
	
	MOVAB	CTERM_RAB,R2		; address of rab
	MOVL	#SHR$_OPENOUT!<REM$_FACILITY@16>,RAB$L_CTX(R2) ; In case of error
	$CONNECT RAB = (R2)		; Connect to file
	BLBC	R0,50$			; Branch on error

	BISW	#FLG$M_LOGGING,-
		CTERM_FLAG		; set logging flag
	RET				; exit
;
; Error has occured
;
50$:	
	PUSHL	R2			; address of RMS context block
	CALLS	#1,G^UTIL$REPORT_IO_ERROR ; Signal error
	MOVL	#1,R0			; set success
	RET				; exit

	.SBTTL	CTERM$CLOSE_LOG - CLOSE LOG FILE IF OPEN
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Opens log file and turns on logging flag if successful.
;
; CALLING SEQUENCE:
;	
;	BSBW	CTERM$CLOSE_LOG
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;
;	CTERM_FLAG
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	FLG$M_LOGGING will be cleared
;
; COMPLETION CODES:
;
; SIDE EFFECTS:
;
;--


CTERM$CLOSE_LOG::

	BBCC	#FLG$V_LOGGING,CTERM_FLAG,100$	; branch if not logging, clear bit
	MOVAB	CTERM_FAB,R0		; FAB address
	$CLOSE	FAB=R0			; close
100$:
	RSB

.SBTTL	RTLOG$WRITE_STRING - write string to log file


; 4(AP) - address
; 8(AP) - byte count

.entry	rtlog$write_string,^M<R2>

	MOVL	4(AP),R1
	MOVL	8(AP),R2
	bsbw	cterm$log_io
	RET



; DEBUG CODE FOR RTPAD/CTERMRT

.psect	RTPAD,nowrt	; READ ONLY DATA

DEBUG_MSG:	.ascid	/%REM-I-DEBUGAST, ^\ enabled/
DEBUG_MASK:	.long	0
		.long	1@28

DBG$L_zeros:	.ascii	/"                /

DBG$LINKRECV::	.ascic	/Message received from net:/
DBG$LINKWRITE::	.ascic	/Message written to net:   /
GOTVM::		.ascic	/Event: RTPAD calling LIB$GET_VM/

header_ctr:	.ascid	.!/!AC  (!AC!ACLength = !XL.
mem_ctr:	.ascid	/   !XL !XL !XL !XL   !AF  (!XL)/
logctr:		.ascid	.%REM-I-TRACING, logging trace output to !AS.

message_table:	.long	300$,10$,20$,30$,40$,50$,60$,70$,80$,90$,100$,110$,120$
		.long	130$,140$,150$,160$,170$,300$,300$,300$,300$

10$:	.ascic	/INIT)			/
20$:	.ascic	/START READ)		/
30$:	.ascic	/READ DATA)		/
40$:	.ascic	/OUT OF BAND)		/
50$:	.ascic	/UNREAD)		/
60$:	.ascic	/CLEAR INPUT)		/
70$:	.ascic	/WRITE)			/
80$:	.ascic	/WRITE COMPLETION)	/
90$:	.ascic	/DISCARD OUTPUT)	/
100$:	.ascic	/READ CHARACTERISTICS)	/
110$:	.ascic	/CHARACTERISTICS)	/
120$:	.ascic	/CHECK INPUT)		/
130$:	.ascic	/INPUT COUNT)		/
140$:	.ascic	/INPUT STATE CHANGE)	/
150$:	.ascic	/VMS QIO)		/
160$:	.ascic	/UPLINE BROADCAST)	/
170$:	.ascic	/READ VERIFY)		/
300$:	.ascic	/*** illegal/

null_line:	.ascic /.../

msg_type_table:	.long	150$,10$,20$,30$,40$,50$,60$,70$,80$,90$,100$,150$,150$
		.long	150$,150$,150$

10$:	.ascic	/Bind/
20$:	.ascic	/Unbind/
30$:	.ascic	/Rebind/
40$:	.ascic	/Bind Accept/
50$:	.ascic	/Enter Mode/
60$:	.ascic	/Exit Mode/
70$:	.ascic	/Confirm Mode/
80$:	.ascic	/No Mode/
90$:	.ascic	/Cterm - /
100$:	.ascic	/Mode - /
150$:	.ascic	/illegal/



.psect	_RTPAD,LONG	; READ/WRITE DATA

.ALIGN LONG

DEBUG_CHAN:	.word	0
DEBUG_BUF:	.long	0
trace_flag:	.word	0

v_open = 0
m_open = 1
v_error = 1
m_error = 2

save_log:	.long	0

.Align	LONG

Logio_fab:	$FAB	FAC=PUT,RAT=CR
logio_rab:	$RAB	FAB=logio_fab
rtpad_dbg:	.ascid	/RTPAD$TRACE/

dbg$outbuf:	.long	100
		.long	10$
10$:		.blkb	100

file_name:	.long	132
		.long	1$
1$:		.blkb	132

;
; RTPAD TRACE FACILITY (DEBUG CODE)
;
.PSECT	RTPAD,nowrt

open_trace:

	BBCS	#v_open,trace_flag,5$	; Branch if we've been here before
	rsb

5$:	PUSHR	#^M<R2,R3>
	movab	rtpad_dbg,R0		; address of logical name
	movl	#132,file_name
	movl	r0,save_log

	$TRNLOG_S LOGNAM = (R0),-	; Only trace if logical name defined
		  RSLBUF = file_name,-
		  RSLLEN = file_name
	cmpl	#SS$_NORMAL,R0
	BEQL	10$
	CLRL	R0
	BRW	50$

10$:	$FAO_S	CTRSTR = LOGCTR -
		outbuf = dbg$outbuf,-
		outlen = dbg$outbuf,- ; length
		P1 = #file_name		; logging to...

	PUSHAL	DBG$OUTBUF
	CALLS	#1,G^LIB$PUT_OUTPUT
		
	movl	#100,dbg$outbuf		; reset length
	movab	logio_fab,R2		; fab address
	movab	logio_rab,R3		; rab address
	movb	file_name,fab$b_fns(r2)
	movl	file_name+4,fab$l_fna(R2)

	$CREATE	FAB = (R2)
	blbc	r0,50$

	$CONNECT RAB = (R3)
	blbs	r0,100$
50$:
	bisl	#m_error,trace_flag	; Set error	
100$:	POPR	#^M<R2,R3>
	RSB

DEBUG_SETUP::				; Enable ^\ to take image dump...
	TSTW	DEBUG_CHAN
	BNEQ	10$
	
	$ASSIGN_S CHAN = DEBUG_CHAN,-
		DEVNAM = TTYDESC
	BLBC	R0,99$			; error
10$:
	MOVAB	DEBUG_MASK,R0		; Address of mask
	$QIO_S	CHAN = DEBUG_CHAN,-
		FUNC = #IO$_SETMODE!IO$M_OUTBAND -
		P1 = DEBUG_AST -
		P2 = R0
	BLBC	R0,99$

	PUSHAL	DEBUG_MSG		; SAY WE SET IT UP... 
	CALLS	#1,G^LIB$PUT_OUTPUT
99$:
	RSB

.ENTRY	DEBUG_AST,0

	MOVPSL	-(SP)
	PUSHL	DEBUG_BUF
	PUSHL	#2
	PUSHL	#SS$_BREAK!<REM$_FACILITY@16>	
	CALLS	#4,G^LIB$SIGNAL		; wake up Debug
	RET



protype = CTP$B_PRO_MSGTYPE - CTP$B_PRO_MSGTYPE
msgtype = CTP$B_MSGTYPE - CTP$B_PRO_MSGTYPE 


DBG$TRACE_IO::

; R0 - scratch
; R1 - length
; R2 - address
; R3 - header string
; R4 - scratch
; R5 - scratch

	BBC	#v_error,trace_flag,10$
	RSB
10$:
	ADDL3	R1,R2,R0		; Address at end of buffer
	CMPL	#^X09000,R0		; make sure it was an allocated message ***
	BGEQ	11$
	PUSHR	#^M<R1,R2,R3,R4,R5>
	MOVC3	#16,dbg$l_zeros,(r0)	; zero
	POPR	#^M<R1,R2,R3,R4,R5>
11$:
	MOVL	R1,R5			; save length
	bsbw	open_trace		; check for open log file
;
; Output header
;

100$:
	MOVAB	logio_rab,R4		; address of rab
	MOVAB	dbg$outbuf+8,rab$l_rbf(R4) ; set buffer address

	blbc	cterm_flag,111$		; branch if VAX

	movzbl	protype(R2),R0		; type
	movab	msg_type_table,R1	; table
	PUSHL	(R1)[R0]		; type
	movab	null_line,R0
	cmpb	protype(r2),#pro$c_data	; cterm data?
	bneq	105$	

	movzbl	msgtype(r2),R0		; byte of message type
	movab	message_table,R1	; table of message types
	movl	(r1)[r0],R0		; address of message type string
105$:
	POPL	R1
	BRB	115$

111$:	movab	null_line,R0
	movab	null_line,R1

115$:	$FAO_S	ctrstr = header_ctr,-
		outbuf = dbg$outbuf,-
		outlen = rab$w_rsz(R4),- ; length
		P1 = R3,-		; to/from net
		P2 = R1,-		; foundation type
		P3 = R0,-		; message type if cterm
		P4 = R5			; Length
	BLBC	r0,250$

	$PUT	rab = r4
	blbc	r0,250$			; exit on error
;
; output buffer
;
110$:
	$FAO_S 	Ctrstr = mem_ctr,-
		outbuf = dbg$outbuf,-
		outlen = rab$w_rsz(R4),- ; length
		p1 = 12(R2),-		; contents	!XL
		P2 = 8(R2),-
		p3 = 4(R2),-
		p4 = (R2),-
		p5 = #16,-		; length	!AF, PART 1
		p6 = R2,-		; address	!AF, PART 2
		P7 = R2			; address (addr)
	BLBC	R0,250$			; ERROR?

	$PUT	rab = logio_rab
	blbc	r0,250$
	
	MOVAB	16(R2),R2		; bump address by longword
	subl2	#16,R5			; sutract from length
	bgtr	110$			; loop if more
200$:
	RSB
250$:
	QUIT
    	brb	200$

LOG_ASCIC::

; R0 -> points to ascic string to write to log

	BBC	#v_error,trace_flag,10$
	RSB
10$:
	bsbw	open_trace		; open file if needed
	pushl	R1			; save
	movab	logio_rab,r1		; rab
	movzbw	(r0)+,rab$w_rsz(R1)	; size
	movl	r0,rab$l_rbf(R1)	; address
	$put	rab=(R1)		; put output
	popl	R1			; restore
	rsb				; exit

.end
