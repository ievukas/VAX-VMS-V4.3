MODULE DBGSTEPGO (IDENT = 'V04-000') =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!
!	DEBUG
!
! ABSTRACT:
!
!	This module contains the command parse and execution networks to support
!	the STEP and the GO commands. 
!	Parsing is done by means of ATN's. During parsing, a
!	linked list known as the command execution tree is constructed. This
!	tree contains components which represent keywords and operands of the
!	user's input command. The command execution tree is passed to the command
!	execution network as input.
!
! ENVIRONMENT:
!
!	VAX/VMS
!
! AUTHOR:
!
!	David Plummer
!
! CREATION DATE:
!
!	9-Jul-80
!
! VERSION:
!
!	V02.2-001
!
! MODIFIED BY:
!
!	Richard Title 	15 SEP 1981
!
! REVISION HISTORY:
!
! 3.01	15-SEP-81	RT	Modified the STEP command to allow
!				STEP/SOURCE and STEP/NOSOURCE
! 3.02	21-Dec-81	RT	Disallowed STEP from an exception break.
!--

!
! TABLE OF CONTENTS:
!
!
! REQUIRE FILES:
!
REQUIRE 'SRC$:DBGPROLOG.REQ';
LIBRARY 'LIB$:DBGGEN.L32';


FORWARD ROUTINE
	DBG$NPARSE_STEP,		! STEP parse network
	DBG$NEXECUTE_STEP,		! STEP execution network
	DBG$NPARSE_GO,			! Parse network for GO
	DBG$NEXECUTE_GO;		! Execution network for GO

! EQUATED SYMBOLS:
!
LITERAL

	! Legal verb composites
	!
	GO_NOADDR = 1,
	GO_ADDR = 2,


	! Legal adverb literals
	!
	ADVERB_LITERAL_LINE 	= 1,
	ADVERB_LITERAL_OVER 	= 2,
	ADVERB_LITERAL_NOSYSTEM = 3,
    	ADVERB_LITERAL_SOURCE	= 4;


! EXTERNAL REFERNECES
!
EXTERNAL ROUTINE
	DBG$EVENT_SEMANTICS,		! Event semantics
	DBG$EVENT_SYNTAX,		! Event syntax (parser)
	DBG$GET_TEMPMEM,		! Allocates listed dynamic storage
	DBG$IS_IT_ENTRY,		! Checks for address = entry point
	DBG$NGET_ADDRESS,		! Obtains an address value from an addr exp desc
	DBG$NMAKE_ARG_VECT,		! Constructs a message argument vector
	DBG$NMATCH,			! Matches counted strings to input
	DBG$NNEXT_WORD,			! Obtains next word of input string
	DBG$NPARSE_ADDRESS,		! Interface to Address Expression Interpreter
	DBG$NSAVE_DECIMAL_INTEGER,	! Converts ascii input into an integer
	DBG$NSYNTAX_ERROR,		! Formats a syntax error
	DBG$SET_STP_LVL,		! Sets step structure pointer
	DBG$THREAD_RET;			! Address threaded breakpoints return to

EXTERNAL
        DBG$GB_UNHANDLED_EXC: BYTE,		! Unhandled exception in user
    						!    program was just encountered
    	DBG$GB_EXC_BRE_FLAG: BYTE,		! TRUE during an exception break.
    	DBG$GB_GO_ARG_FLAG: BYTE,		! Flag saying whether GO has
    						! an argument 
	DBG$GB_STP_PTR :    REF EVENT$STEPPING_DESCRIPTOR, ! current stepping
	DBG$GB_TAKE_CMD : BYTE,			! Flag for taking commands
	DBG$GL_CONTEXT  : BITVECTOR,		! Context word
	DBG$GL_STEP_NUM,			! Holds step number
	DBG$RUNFRAME : BLOCK [,BYTE];		! Current runframe



GLOBAL ROUTINE DBG$NPARSE_STEP (INPUT_DESC, VERB_NODE, MESSAGE_VECT) =
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine comprises the ATN parse network for the STEP command.
!	During processing, other routines are invoked to capture operands.
!	This routine recognizes keywords and constructs a command execution tree
!	to be used as input to the command execution network. Upon detection of
!	errors, a message argument vector is constructed and returned.
!
! FORMAL PARAMETERS:
!
!	INPUT_DESC	- A longword containing the address of a standard ascii
!			  string descriptor representing the user's input
!
!	VERB_NODE	- A longword containing the address of the verb (head)
!			  node of the command execution tree. The string corresponding
!			  to the verb has already been processed upon entry.
!
!	MESSAGE_VECT	- The address of a longword to contain the address of a
!			  message argument vector on errors
!			  
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	On success, the entire command execution tree corresponding to the parsed
!	STEP command is constructed.
!
!	On error, a message argument vector is constructed and returned.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1)	- Success. Input parsed and execution tree constructed.
!
!	STS$K_SEVERE  (4)	- Failure. Error detected and message argument
!				  vector constructed.
!
! SIDE EFFECTS:
!
!	NONE
!
!
    BEGIN
    MAP
	VERB_NODE : REF DBG$VERB_NODE;
    VERB_NODE [DBG$B_VERB_COMPOSITE] = EVENT$K_STEP;
    RETURN DBG$EVENT_SYNTAX (.INPUT_DESC,
			     .VERB_NODE,
			     .MESSAGE_VECT
			    );
    END;

GLOBAL ROUTINE DBG$NEXECUTE_STEP (VERB_NODE, MESSAGE_VECT) =
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine accepts as input the command execution tree constructed
!	by the parse network and performs semantic actions corresponding to the
!	parsed input STEP command. If the action cannot be performed, a message
!	argument vector is constructed and returned. Actual stepping is NOT
!	performed in this network. This is handled by the DEBUG monitor.
!
!	This routine manipulates the dbg$gb_def_stp structure, as well as the
!	step level pointer.
!
! FORMAL PARAMETERS:
!
!	VERB_NODE	- A longword containing the address of the verb (head)
!			  node of the command execution tree
!
!	MESSAGE_VECT	- The address of a longword to contain the address of
!			  a standard message argument vector upon detection of
!			  of errors
!
! IMPLICIT INPUTS:
!
!	The entire linked list command execution tree as pointed to by the
!	verb node.
!
! IMPLICIT OUTPUTS:
!
!	On error, a message argument vector is constructed and returned.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1)	- Success. A STEP will be performed.
!
!	STS$K_SEVERE  (4)	- Failure. The STEP will not be performed.
!				  Message argument vector returned.
!
! SIDE EFFECTS:
!
!	The DEBUG monitor will be informed to perform a step.
!
!--
    BEGIN


    ! If we are continuing from an unhandled exception, signal an
    ! informational message to that effect.
    !
    IF .DBG$GB_UNHANDLED_EXC
    THEN
    	BEGIN
    	SIGNAL(DBG$_CONFROMEXC);
    	DBG$GB_UNHANDLED_EXC = 0;
    	END;

    ! Call the event semantics routine.
    !
    RETURN DBG$EVENT_SEMANTICS (.VERB_NODE, .MESSAGE_VECT);

    END;

GLOBAL ROUTINE DBG$NPARSE_GO (INPUT_DESC, VERB_NODE, MESSAGE_VECT) =
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine comprises the ATN parse network for the GO verb. During
!	processing of the input command, a command execution tree containing the
!	keywords and operands of the input command is constructed. On a non-
!	successful parse, a message argument vector is constructed and returned.
!
! FORMAL PARAMETERS:
!
!	INPUT_DESC	- A longword containing the address of a standard ascii
!			  string descriptor representing the user's input command
!
!	VERB_NODE	- A longword containing the address of the verb (head)
!			  node of the command execution tree.
!
!	MESSAGE_VECT	- The address of a longword to contain the address of a
!			  message argument vector for errors
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	On success, the command execution tree is constructed.
!
!	On failure, a message argument vector is constructed and returned.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1)	- Success. Input parsed and execution tree constructed.
!
!	STS$K_SEVERE  (4)	- Failure. Error detected. Message argument vector
!				  constructed and returned.
!
! SIDE EFFECTS:
!
!	NONE
!

    BEGIN

    MAP
	VERB_NODE : REF dbg$verb_node;

    BIND
	DBG$CS_CR = UPLIT BYTE (1, dbg$k_car_return);

    LOCAL
	STATUS,					! Holds return status
	NOUN_NODE : REF dbg$noun_node;		! Will contain GO address, if any given


    ! The GO has already been accepted. Check for GO <CR>.
    !
    IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
    THEN
	BEGIN

	! Nothing left. Set the appropriate verb composite and return
	!
	verb_node [dbg$b_verb_composite] = go_noaddr;
	RETURN sts$k_success;
	END;


    ! There is some input left.  Try to parse the address expression.
    !
    noun_node = dbg$get_tempmem(dbg$k_noun_node_size);
    VERB_NODE [DBG$L_VERB_OBJECT_PTR] = .NOUN_NODE;
    IF NOT (STATUS = DBG$NPARSE_ADDRESS(.INPUT_DESC,
			NOUN_NODE [DBG$L_NOUN_VALUE], DBG$K_DEFAULT,
			TOKEN$K_TERM_NONE, .MESSAGE_VECT))
    THEN
	BEGIN


	! We are responsible for syntax error on STS$K_WARNING.
	!
	IF .status EQL sts$k_warning
	THEN
	    .message_vect = dbg$nsyntax_error (dbg$nnext_word (.input_desc));

	RETURN sts$k_severe;
	END;


    ! Set the correct verb composite
    !
    verb_node [dbg$b_verb_composite] = go_addr;

    RETURN sts$k_success;

    END;

GLOBAL ROUTINE DBG$NEXECUTE_GO (VERB_NODE, MESSAGE_VECT) =
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine accepts the command execution tree constructed by the parse
!	network and performs the semantic actions associated with the parsed
!	GO command as given by the user. The actual GO is not performed by this
!	routine. Rather the DEBUG monitor is informed to perform a GO.
!
! FORMAL PARAMETERS:
!
!	VERB_NODE	- A longword containing the address of the verb (head)
!			 node of the command execution tree
!
!	MESSAGE_VECT	- The address of a longword to contain the address of a
!			  standard message argument vector upon detection of
!			  errors.
!
! IMPLICIT INPUTS:
!
!	The entire command execution tree linked list pointed to by the verb node.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1)	- Success. The GO command will be executed.
!
!	STS$K_SEVERE  (4)	- Failure. THE GO will not executed. Message argument
!				  vector constructed and returned.
!
! SIDE EFFECTS:
!
!	Semantic actions coresponding to the execution of the GO command are taken.
!
!

    BEGIN

    MAP
	VERB_NODE 	: REF dbg$verb_node;

    BUILTIN
	PROBER;					! Probes read access

    LOCAL
	OLD_PC 		: REF VECTOR [, WORD],	! Used to access instruction
	NEW_PC,					! Starting PC value
	NOUN_NODE 	: REF dbg$noun_node,	! Noun node
	ADDRESS 	: VECTOR [2],		! Address contained by addr exp desc
	TYPE;					! Types of object described by addr exp desc

    ! Set up to do the go depending on whether there is a specified start address or not
    !
    IF .verb_node [dbg$b_verb_composite] EQL go_addr
    THEN
	BEGIN

	! Recover the noun node and obtain a PC value
	!
	noun_node = .verb_node [dbg$l_verb_object_ptr];
	IF NOT dbg$nget_address (.noun_node [dbg$l_noun_value], address [0],
				 type, false, .message_vect)
	THEN
	    RETURN sts$k_severe;


	! The GO address is now contained in address [0]. We don't care about the type.
	!
	new_pc = .address [0];


	! Check for an entry mask
	!
	IF dbg$is_it_entry (.new_pc)
	THEN
	    new_pc = .new_pc + 2;


	! Check for read access before we load the address into the user's PC
	!
	IF NOT PROBER (%REF (0), %REF (1), .new_pc)
	THEN
	    BEGIN
	    .message_vect = dbg$nmake_arg_vect (dbg$_badstartpc, 1, .new_pc);
	    RETURN sts$k_severe;
	    END;


	! For GO xxx, we load the new PC into the runframe and clear the FPD bit
	! in the PSL. We must also check for threaded code.
	!
	old_pc = .dbg$runframe [dbg$l_user_pc];

	IF .dbg$gl_context [dbg$k_thread]	! Threaded code
	THEN
	    BEGIN
	    IF .old_pc [0] EQL %X'9B17'	! JMP @(R11)+
			OR
	       .old_pc EQL DBG$THREAD_RET ! Address of returns from threaded BPTs
	    THEN
		dbg$runframe [dbg$l_user_r11] = .new_pc
	    ELSE
		BEGIN
		.message_vect = dbg$nmake_arg_vect (dbg$_notlinbnd);
		RETURN sts$k_severe;
		END;
	    END
	ELSE
	    dbg$runframe [dbg$l_user_pc] = .new_pc;


	! Clear the FPD bit in the PSL
	!
	dbg$runframe [dbg$l_user_psl] = .dbg$runframe [dbg$l_user_psl]
						        AND
					   	    %X'F7FFFFFF';
	END;


    ! Check PC for read access
    !
    new_pc = .dbg$runframe [dbg$l_user_pc];

    IF NOT PROBER (%REF (0), %REF (1), .new_pc)
    THEN
	BEGIN
	.message_vect = dbg$nmake_arg_vect (dbg$_badstartpc, 1, .new_pc);
	RETURN sts$k_severe;
	END;


    ! Inform the monitor to start the user program
    !
    DBG$GB_TAKE_CMD = FALSE;


    ! Set the global flag saying whether GO has an argument.
    !
    IF .VERB_NODE[DBG$B_VERB_COMPOSITE] EQL GO_ADDR
    THEN
    	DBG$GB_GO_ARG_FLAG = TRUE
    ELSE
    	DBG$GB_GO_ARG_FLAG = FALSE;


    ! If we are continuing from an unhandled exception, signal an
    ! informational message to that effect.
    !
    IF .DBG$GB_UNHANDLED_EXC
    THEN
    	BEGIN
    	SIGNAL(DBG$_CONFROMEXC);
    	DBG$GB_UNHANDLED_EXC = 0;
    	END;

    RETURN STS$K_SUCCESS;

    END;
    
END ELUDOM
