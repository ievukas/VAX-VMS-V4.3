MODULE	OPC$CANCEL	(
			 LANGUAGE (BLISS32),
			 IDENT = 'V04-000'
			) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:
!
!	OPCOM
!
! ABSTRACT:
!
!	This module contains the specialized logic to service
!	a particular type of request sent by a user to OPCOM.
!
! Environment:
!
!	VAX/VMS operating system.
!
! Author:
!
!	Steven T. Jeffreys
!
! Creation date:
!
!	March 10, 1981
!
! Revision history:
!
!	V03-001	CWH3001		CW Hobbs			30-Jul-1983
!		Various and sundry things to make OPCOM distributed
!		across the cluster.
!
!	V02-002	STJ0117		Steven T. Jeffreys	05-Sep-1981
!		Added support for alternate cancellation message.
!		This message indicates that the request was satisfied,
!		and canceled by the requestor.
!
!
!--

BEGIN						! Start of CANCEL

LIBRARY	'SYS$LIBRARY:LIB.L32';
LIBRARY 'LIB$:OPCOMLIB';

FORWARD ROUTINE
	CANCEL_HANDLER		: NOVALUE,
	CANCEL_CLM_HANDLER	: NOVALUE;

BUILTIN
	INSQUE,					! Insert entry onto a queue
	REMQUE;					! Remove entry from a queue

EXTERNAL ROUTINE
	CHECK_REQUEST,				! Common sanity checks
	CLUSMSG_CONV_CLM_RQCB,			! Convert cluster message to RQCB
	CLUSMSG_RQCB_SEND,			! Send RQCB to remote nodes
	DEALLOCATE_RQCB	: NOVALUE,		! Dispose of an RQCB
	DUMP_LOG_FILE,				! Format the message into the log file
	FORMAT_MESSAGE,				! Format a message
	LOG_MESSAGE,				! Write a message to a logfile
	NOTIFY_LISTED_OPERATORS,		! Just like it says
	SEND_REPLY;				! Send a reply to the requestor

EXTERNAL
	OCD_VECTOR	: VECTOR;		! OCD list headers

EXTERNAL LITERAL
	MAX_SCOPE,				! Maximum scope value
	MIN_SCOPE;				! Minimum scope value

GLOBAL ROUTINE CANCEL_HANDLER (BUFFER_DESC) : NOVALUE =

!++
! Functional description:
!
!	This routine is the handler for all CANCEL messages received by OPCOM.
!
!
! Input:
!
!	BUFFER_DESC : The address of a quadword buffer descriptor that
!		      describes the buffer containing the message.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Some accounting data will be updated 
!	to reflect the receipt of the message.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of CANCEL_HANDLER

MAP
	BUFFER_DESC	: $ref_bblock;

LOCAL

	MESSAGE_VECTOR	: VECTOR [5,LONG],	! Message info
	RQCB		: $ref_bblock,		! RQCB data structure
	MCB		: $ref_bblock,		! MCB data structure
	OCD		: $ref_bblock,		! OCD data structure
	RQST_RQCB	: $ref_bblock,		! Request RQCB
	OCD_COUNT	: LONG,			! Count of OCD in an OCD list
	OCD_INDEX	: LONG,			! Index into OCD_VECTOR
	RQST_COUNT	: LONG,			! Count of requests in a list
	MESSAGE		: LONG,			! Message code
	FOUND		: LONG,			! Boolean
	STATUS		: LONG;

!
! Check request for minimum amount of data.
!
IF .BUFFER_DESC [DSC$W_LENGTH] LSS (OPC$K_COMHDRSIZ + OPC$K_CANCEL_MIN_SIZE)
THEN
    RETURN;
!
! Do some sanity checking.
!
IF NOT CHECK_REQUEST (.BUFFER_DESC, RQCB)
THEN
    RETURN;
!
! Check for a reply mailbox.  If none specified, then ignore the
! cancelation message, as it would be impossible to locate the correct
! request without it.
!
IF .RQCB [RQCB_W_REPLYMBX] EQL 0
THEN
    RETURN;
!
! See if the requestor is issuing this request on another's behalf.
! If so, and the requestor does not have the privilege to do so,
! then dismiss the request.
!
IF .RQCB [RQCB_L_SENDERUIC] NEQ .RQCB [RQCB_L_UIC]
THEN
    IF  (NOT .$bblock [RQCB [RQCB_L_PRIVMASK1], PRV$V_OPER])
    THEN
	IF NOT ((.$bblock [RQCB [RQCB_L_SENDERUIC], 2,0,16,0] EQL .$bblock [RQCB [RQCB_L_UIC], 2,0,16,0]) AND
	        (.$bblock [RQCB [RQCB_L_PRIVMASK1], PRV$V_GROUP]))
	THEN
	    BEGIN
	    MESSAGE_VECTOR [0] = OPC$_ILLRQST;
	    MESSAGE_VECTOR [1] = 0;
	    FORMAT_MESSAGE (.RQCB, MESSAGE_VECTOR);
	    SEND_REPLY (.RQCB);
	    DEALLOCATE_RQCB (.RQCB);
	    RETURN;
	    END;
!
! Locate the request in the database.  The entire database must be
! searched, as the responsiblitly for the request may have been bounced
! around by the operators, and the request may not be in an obvious place.
! When the search is done, RQST_RQCB will contain the address  of the
! original request RQCB if it was found.
!
FOUND = FALSE;
OCD_INDEX = MAX_SCOPE;
WHILE (NOT .FOUND) AND (.OCD_INDEX GEQ MIN_SCOPE) DO
    BEGIN
    !
    ! Scan the OCD list for each class of operator
    !
    OCD = .OCD_VECTOR [(.OCD_INDEX - 1) * 2];			! Get first OCD address
    OCD_COUNT = .OCD_VECTOR [(.OCD_INDEX - 1) * 2 + 1];		! Get # of OCDs in the list
    WHILE (NOT .FOUND) AND (.OCD_COUNT GTR 0) DO
	BEGIN
	!
	! Scan the request list for each OCD.
	!
	RQST_COUNT = .OCD [OCD_W_RQSTCOUNT];			! Get # of requests in list
	RQST_RQCB  = .OCD [OCD_L_RQSTFLINK];			! Get first RQST_RQCB address
	WHILE (NOT .FOUND) AND (.RQST_COUNT GTR 0) DO
	    BEGIN
	    !
	    ! Check the reply mailbox and the requestid for equality.
	    !
	    IF  (.RQCB [RQCB_W_REPLYMBX] EQL .RQST_RQCB [RQCB_W_REPLYMBX])
	    AND (.RQCB [RQCB_L_RQSTID] EQL .RQST_RQCB [RQCB_L_RQSTID])
	    THEN
		BEGIN						! This is it.
		FOUND = TRUE;					! Note that we found it
		RQCB [RQCB_L_OCD] = .OCD;			! Save OCD address
		END
	    ELSE
		BEGIN						! Not found.  Try the next RQCB
		RQST_COUNT = .RQST_COUNT - 1;			! Decrement request count
		RQST_RQCB = .RQST_RQCB [RQCB_L_FLINK];		! Get address of next RQCB
		END;
	    END;
	OCD_COUNT = .OCD_COUNT - 1;				! Decrement OCD count
	OCD = .OCD [OCD_L_FLINK];				! Get address of next OCD
	END;
    OCD_INDEX = .OCD_INDEX - 1;					! Try next operator class
    END;
!
! Finish up.
!
IF NOT .FOUND
THEN
    BEGIN
    !
    ! Get set to tell the requestor the bad news.
    !
    MESSAGE_VECTOR [0] = OPC$_NOSUCHRQST;
    MESSAGE_VECTOR [1] = 0;
    FORMAT_MESSAGE (.RQCB, MESSAGE_VECTOR);
    END
ELSE
    BEGIN
    !
    ! Inform all interested operators that the request is canceled.
    ! Log the cancelation notice, and remove the request from the data base.
    !
    MESSAGE_VECTOR [0] = OPC$_RQSTCAN;		! Set message code
    IF .$bblock [RQCB [RQCB_L_RQ_OPTIONS], OPC$V_RQSTDONE]
    THEN
	MESSAGE_VECTOR [0] = OPC$_RQSTDONE;	! Set alternate status code
    MESSAGE_VECTOR [1] = 0;			! Set # of message arguements
    MESSAGE_VECTOR [2] = .RQST_RQCB [RQCB_L_RQSTNUM];! Set message arguement
    DEALLOCATE_RQCB (.RQCB);			! Dispose of the request control block
    REMQUE (.RQST_RQCB, RQCB);			! Remove the request from the database
    OCD = .RQST_RQCB [RQCB_L_OCD];		! Get the OCD address
    OCD [OCD_W_RQSTCOUNT] = .OCD [OCD_W_RQSTCOUNT] - 1;
    FORMAT_MESSAGE (.RQCB, MESSAGE_VECTOR);
    !
    ! Send it to everyone else in the cluster.  Inform all interested operators that the
    ! request is canceled.  Log the cancelation notice.
    !
    CLUSMSG_RQCB_SEND (-1, CLM__CANCEL, .RQCB);
    NOTIFY_LISTED_OPERATORS (.RQCB);		! Notify the interested operators
    LOG_MESSAGE (.RQCB);			! Log the event
    END;
!
! Send the message to the requestor.
!
SEND_REPLY (.RQCB);
DEALLOCATE_RQCB (.RQCB);
    
END;						! End of CANCEL_HANDLER

GLOBAL ROUTINE CANCEL_CLM_HANDLER (BUFFER_DESC : $ref_bblock, CLM : $ref_bblock, LEN) : NOVALUE =

!++
! Functional description:
!
!	This routine is the handler for all CANCEL messages received by OPCOM from other nodes.
!
!
! Input:
!
!	BUFFER_DESC -	pointer to message from remote node, including $SNDOPR header
!	CLM -		pointer to CLMRQCB structure
!	LEN -		length of LEN
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Some accounting data will be updated 
!	to reflect the receipt of the message.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of CANCEL_CLM_HANDLER

LOCAL
	RQCB		: $ref_bblock,		! RQCB data structure
	MCB		: $ref_bblock,		! MCB data structure
	OCD		: $ref_bblock,		! OCD data structure
	RQST_RQCB	: $ref_bblock,		! Request RQCB
	OCD_COUNT	: LONG,			! Count of OCD in an OCD list
	OCD_INDEX	: LONG,			! Index into OCD_VECTOR
	RQST_COUNT	: LONG,			! Count of requests in a list
	MESSAGE		: LONG,			! Message code
	FOUND		: LONG,			! Boolean
	STATUS		: LONG;

!
! Check the version number of the message.  If the message is from any other version,
! simply ignore it.
!
IF .CLM [CLM_B_DS_VERSION] NEQ CLMRQCB_K_DS_VERSION
THEN
    RETURN DUMP_LOG_FILE (.BUFFER_DESC, %ASCID 'CLM__CANCEL mismatch');
!
! Allocate an RQCB and convert the message RQCB into the new RQCB
!
IF NOT CLUSMSG_CONV_CLM_RQCB (.CLM, RQCB)
THEN
    RETURN DUMP_LOG_FILE (.BUFFER_DESC, ascid_INVALIDRQCB);
!
! Locate the request in the database.  The entire database must be
! searched, as the responsiblitly for the request may have been bounced
! around by the operators, and the request may not be in an obvious place.
! When the search is done, RQST_RQCB will contain the address  of the
! original request RQCB if it was found.
!
FOUND = FALSE;
OCD_INDEX = MAX_SCOPE;
WHILE (NOT .FOUND) AND (.OCD_INDEX GEQ MIN_SCOPE) DO
    BEGIN
    !
    ! Scan the OCD list for each class of operator
    !
    OCD = .OCD_VECTOR [(.OCD_INDEX - 1) * 2];			! Get first OCD address
    OCD_COUNT = .OCD_VECTOR [(.OCD_INDEX - 1) * 2 + 1];		! Get # of OCDs in the list
    WHILE (NOT .FOUND) AND (.OCD_COUNT GTR 0) DO
	BEGIN
	!
	! Scan the request list for each OCD.
	!
	RQST_COUNT = .OCD [OCD_W_RQSTCOUNT];			! Get # of requests in list
	RQST_RQCB  = .OCD [OCD_L_RQSTFLINK];			! Get first RQST_RQCB address
	WHILE (NOT .FOUND) AND (.RQST_COUNT GTR 0) DO
	    BEGIN
	    !
	    ! Check the reply mailbox and the requestid for equality.
	    !
	    IF  (.RQCB [RQCB_W_REPLYMBX] EQL .RQST_RQCB [RQCB_W_REPLYMBX])
	    AND (.RQCB [RQCB_L_RQSTID] EQL .RQST_RQCB [RQCB_L_RQSTID])
	    THEN
		BEGIN						! This is it.
		FOUND = TRUE;					! Note that we found it
		RQCB [RQCB_L_OCD] = .OCD;			! Save OCD address
		END
	    ELSE
		BEGIN						! Not found.  Try the next RQCB
		RQST_COUNT = .RQST_COUNT - 1;			! Decrement request count
		RQST_RQCB = .RQST_RQCB [RQCB_L_FLINK];		! Get address of next RQCB
		END;
	    END;
	OCD_COUNT = .OCD_COUNT - 1;				! Decrement OCD count
	OCD = .OCD [OCD_L_FLINK];				! Get address of next OCD
	END;
    OCD_INDEX = .OCD_INDEX - 1;					! Try next operator class
    END;
!
! Finish up.
!
IF NOT .FOUND
THEN
    BEGIN
    !
    ! Should not be here
    !
    DUMP_LOG_FILE (.BUFFER_DESC, %ASCID 'request to cancel not found');
    END
ELSE
    BEGIN
    !
    ! Inform all interested operators that the request is canceled.
    ! Log the cancelation notice, and release the RQCB from the remote node.
    !
    NOTIFY_LISTED_OPERATORS (.RQCB);		! Notify the interested operators
    LOG_MESSAGE (.RQCB);			! Log the event
    DEALLOCATE_RQCB (.RQCB);
    !
    ! Remove the request from the data base.
    !
    REMQUE (.RQST_RQCB, RQCB);			! Remove the request from the database
    OCD = .RQST_RQCB [RQCB_L_OCD];		! Get the OCD address
    OCD [OCD_W_RQSTCOUNT] = .OCD [OCD_W_RQSTCOUNT] - 1;
    END;
!
! Get rid of the RQCB
!
DEALLOCATE_RQCB (.RQCB);
    
END;						! End of CANCEL_CLM_HANDLER

END
ELUDOM						! End of CANCEL
