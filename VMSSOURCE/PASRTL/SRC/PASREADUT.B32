MODULE PAS$$READ_UTIL ( %TITLE 'Utility routines used by READ'
		IDENT = '1-001'			! File: PASREADUT.B32 Edit: SBL1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains utility procedures used by 
!	the numeric READ procedures.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$$GET_UNSIGNED: JSB_READ_UTIL,		! Get an unsigned string
    PAS$$GET_INTEGER: JSB_READ_UTIL,		! Get an integer string
    PAS$$GET_REAL: JSB_READ_UTIL,		! Get a real string
    PAS$$GET_ENUMERATED: JSB_READ_UTIL,		! Get an enumerated value string

    FIND_NON_BLANK: JSB_FIND_NON_BLANK;		! Find next non-blank character

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    !+
    ! Character class codes used below for CLASSTAB.
    !-

    iv = 0,	! Invalid character
    BT = 1,	! Blank or Tab
    DG = 2,	! Digit
    DP = 3,	! Decimal Point
    SI = 4,	! Sign 
    EL = 5,	! Exponent letter
    LT = 6,	! Other letter, dollar and underscore

    !+
    ! Aliases for class codes for use in routines.
    !-

    CLASS_IV = iv,
    CLASS_BT = BT,
    CLASS_DG = DG,
    CLASS_DP = DP,
    CLASS_SI = SI,
    CLASS_EL = EL,
    CLASS_LT = LT;

!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!

OWN

    !+
    ! The following table is used for determining the class of a particular
    ! character.  Each of the first 128 characters is assigned a class code
    ! as listed above in the LITERAL section.
    !-


    CLASSTAB: VECTOR [128, BYTE] PSECT (_PAS$CODE) INITIAL (BYTE(

	iv,iv,iv,iv,iv,iv,iv,iv,iv,BT,iv,iv,iv,iv,iv,iv,	! 00-0F
	iv,iv,iv,iv,iv,iv,iv,iv,iv,iv,iv,iv,iv,iv,iv,iv,	! 10-1F
	BT,iv,iv,iv,LT,iv,iv,iv,iv,iv,iv,SI,iv,SI,DP,iv,	! 20-2F
	DG,DG,DG,DG,DG,DG,DG,DG,DG,DG,iv,iv,iv,iv,iv,iv,	! 30-3F
	iv,LT,LT,LT,EL,EL,LT,LT,LT,LT,LT,LT,LT,LT,LT,LT,	! 40-4F
	LT,EL,LT,LT,LT,LT,LT,LT,LT,LT,LT,iv,iv,iv,iv,LT,	! 50-5F
	iv,LT,LT,LT,EL,EL,LT,LT,LT,LT,LT,LT,LT,LT,LT,LT,	! 60-6F
	LT,EL,LT,LT,LT,LT,LT,LT,LT,LT,LT,iv,iv,iv,iv,iv));	! 70-7F


%SBTTL 'PAS$$GET_UNSIGNED - Find an unsigned number string'
GLOBAL ROUTINE PAS$$GET_UNSIGNED (		! Get unsigned number string
	PFV: REF $PAS$PFV_FILE_VARIABLE,	! Pascal File Variable
	IN_FCB: REF $PAS$FCB_CONTROL_BLOCK;	! File control block
	STRING_ADDR,				! Output string address
	STRING_LEN,				! Output string length
	FCB: REF $PAS$FCB_CONTROL_BLOCK		! File control block
    ) : JSB_READ_UTIL =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure advances the textfile referenced by FCB until it
!	locates a string that satisfies the Pascal UNSIGNED datatype
!	syntax.  The address and length of that string are returned as
!	output parameters.
!
! CALLING SEQUENCE:
!
!	Valid.wc.v = JSB_READ_UTIL PAS$$GET_UNSIGNED (PFV.mr.r, IN_FCB.mr.r; 
!			STRING_ADDR.wl.v, STRING_LEN.wl.v, FCB.mr.r)
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable of the file.
!
!	IN_FCB		- The File Control Block of the file being scanned.
!			  It is assumed to be a textfile.
!
!	STRING_ADDR	- Output register parameter which is set to the
!			  address of the first byte of the string.
!
!	STRING_LEN	- Output register parameter which is set to the
!			  length of the string in bytes.
!
!	FCB		- Output register parameter which is the same as IN_FCB.
!
! IMPLICIT INPUTS:
!
!	It is assumed that lazy-lookahead is not in progress.
!
! IMPLICIT OUTPUTS:
!
!	FCB$A_RECORD_CUR points to the next character after the string, or
!	EOL.
!
! ROUTINE VALUE:
!
!	1 if string is a valid unsigned, 0 otherwise
!	If 0 is returned, the pointer and length include the first bad character.
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	CHAR;			! Character read

    !+
    ! Declare CHAR_BYTE which is the same as CHAR except that we can
    ! test it as a signed byte.  We want to leave CHAR as a longword
    ! so that it can be used efficiently as an index.
    !-

    BIND 
	CHAR_BYTE = CHAR: BYTE SIGNED;

    !+
    ! Find first character that is not a blank or a tab, possibly skipping
    ! records.
    !-

    CHAR = FIND_NON_BLANK (PFV [PFV$R_PFV], IN_FCB [FCB$R_FCB]; FCB);

    !+
    ! At this point, CHAR contains the first character which is not a blank
    ! or a tab.  Initialize STRING_ADDR.
    !-

    STRING_ADDR = .FCB [FCB$A_RECORD_CUR];

    !+
    ! In a loop, classify the characters until end-of-line or an invalid
    ! character is found.
    !-

    WHILE 1 DO
	BEGIN

	!+
	! Screen out characters 128-255, which are not in CLASSTAB, by
	! doing a signed byte test for a negative value.
	!-

	IF .CHAR_BYTE LSS 0
	THEN
	    EXITLOOP;

	!+
	! If the character is not a digit, exit.
	!-

	IF .CLASSTAB [.CHAR] NEQU CLASS_DG
	THEN
	    EXITLOOP;

	!+
	! Get another character if not at end-of-line.
	!-

	FCB [FCB$A_RECORD_CUR] = .FCB [FCB$A_RECORD_CUR] + 1;
	IF .FCB [FCB$A_RECORD_CUR] LSSA .FCB [FCB$A_RECORD_END]
	THEN
	    CHAR = CH$RCHAR (.FCB [FCB$A_RECORD_CUR])
	ELSE
	    EXITLOOP;

	END;	! Of WHILE loop

    !+
    ! Set STRING_LEN to length of string and return success or failure
    ! depending on whether or not string is a valid unsigned.
    !-

    STRING_LEN = .FCB [FCB$A_RECORD_CUR] - .STRING_ADDR;
    IF .STRING_LEN NEQ 0
    THEN
	RETURN 1;

    STRING_LEN = 1;	! Include first erroneous character
    RETURN 0;		! Return failure

    END;					! End of routine PAS$$GET_UNSIGNED

!<BLF/PAGE>

%SBTTL 'PAS$$GET_INTEGER - Find a signed number string'
GLOBAL ROUTINE PAS$$GET_INTEGER (		! Get signed number string
	PFV: REF $PAS$PFV_FILE_VARIABLE,	! Pascal File Variable
	IN_FCB: REF $PAS$FCB_CONTROL_BLOCK;	! File control block
	STRING_ADDR,				! Output string address
	STRING_LEN,				! Output string length
	FCB: REF $PAS$FCB_CONTROL_BLOCK		! File control block
    ) : JSB_READ_UTIL =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure advances the textfile referenced by FCB until it
!	locates a string that satisfies the Pascal INTEGER datatype
!	syntax.  The address and length of that string are returned as
!	output parameters.
!
! CALLING SEQUENCE:
!
!	Valid.wc.v = JSB PAS$$GET_INTEGER (PFV.mr.r, IN_FCB.mr.r;
!			STRING_ADDR.wl.v, STRING_LEN.wl.v, FCB.mr.r)
!
! FORMAL PARAMETERS:
!
!	PFV		- Pascal File Variable of the file.
!
!	IN_FCB		- The File Control Block of the file being scanned.
!			  It is assumed to be a textfile.
!
!	STRING_ADDR	- Output register parameter which is set to the
!			  address of the first byte of the string.
!
!	STRING_LEN	- Output register parameter which is set to the
!			  length of the string in bytes.
!
!	FCB		- Output register parameter which is the same as IN_FCB.
!
! IMPLICIT INPUTS:
!
!	It is assumed that lazy-lookahead is not in progress.
!
! IMPLICIT OUTPUTS:
!
!	FCB$A_RECORD_CUR points to the next character after the string, or
!	EOL.
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	1 if string is a valid integer, 0 otherwise.
!	If failure is returned, STRING_LEN includes the first bad character.
!
! SIGNALLED ERRORS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	CHAR,			! Character read
	VALID;			! 1 if string a valid unsigned.

    !+
    ! Declare CHAR_BYTE which is the same as CHAR except that we can
    ! test it as a signed byte.  We want to leave CHAR as a longword
    ! so that it can be used efficiently as an index.
    !-

    BIND 
	CHAR_BYTE = CHAR: BYTE SIGNED;

    !+
    ! Find first character that is not a blank or a tab, possibly skipping
    ! records.
    !-

    CHAR = FIND_NON_BLANK (PFV [PFV$R_PFV], IN_FCB [FCB$R_FCB]; FCB);

    !+
    ! Initially, string is invalid.
    !-

    VALID = 0;

    !+
    ! At this point, CHAR contains the first character which is not a blank
    ! or a tab.  Initialize STRING_ADDR.
    !-

    STRING_ADDR = .FCB [FCB$A_RECORD_CUR];

    !+
    ! If first character is a sign, advance pointer.
    !-

    IF .CHAR_BYTE GEQ 0
    THEN
	IF .CLASSTAB [.CHAR] EQLU CLASS_SI
	THEN
	    BEGIN
	    FCB [FCB$A_RECORD_CUR] = .FCB [FCB$A_RECORD_CUR] + 1;
	    IF .FCB [FCB$A_RECORD_CUR] LSSA .FCB [FCB$A_RECORD_END]
	    THEN
		CHAR = CH$RCHAR (.FCB [FCB$A_RECORD_CUR])
	    ELSE
		CHAR = %C' ';	! End of line
	    END;

    !+
    ! In a loop, classify the characters until end-of-line or an invalid
    ! character is found.
    !-

    WHILE 1 DO
	BEGIN

	!+
	! If the character's value is greater than or equal to 128,
	! it can't possibly be valid, so exit.  Do this by a test for
	! negative on CHAR_BYTE.
	!-

	IF .CHAR_BYTE LSS 0
	THEN
	    EXITLOOP;

	!+
	! If the character is not a digit, exit.
	!-

	IF .CLASSTAB [.CHAR] NEQU CLASS_DG
	THEN
	    EXITLOOP;

	!+
	! At least one digit seen, so indicate string valid.
	!-

	VALID = 1;

	!+
	! Get another character if not at end-of-line.
	!-

	FCB [FCB$A_RECORD_CUR] = .FCB [FCB$A_RECORD_CUR] + 1;
	IF .FCB [FCB$A_RECORD_CUR] LSSA .FCB [FCB$A_RECORD_END]
	THEN
	    CHAR = CH$RCHAR (.FCB [FCB$A_RECORD_CUR])
	ELSE
	    EXITLOOP;

	END;	! Of WHILE loop

    !+
    ! Set STRING_LEN to length of string and return.
    !-

    STRING_LEN = .FCB [FCB$A_RECORD_CUR] - .STRING_ADDR;
    IF .STRING_LEN EQL 0	! If so, VALID must be zero
    THEN
	STRING_LEN = 1;
    RETURN (.VALID);

    END;					! End of routine PAS$$GET_INTEGER

!<BLF/PAGE>

%SBTTL 'PAS$$GET_REAL - Find a real number string'
GLOBAL ROUTINE PAS$$GET_REAL (			! Get real number string
	PFV: REF $PAS$PFV_FILE_VARIABLE,	! Pascal File Variable
	IN_FCB: REF $PAS$FCB_CONTROL_BLOCK;	! File control block
	STRING_ADDR,				! Output string address
	STRING_LEN,				! Output string length
	FCB: REF $PAS$FCB_CONTROL_BLOCK		! File control block
    ) : JSB_READ_UTIL =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure advances the textfile referenced by FCB until it
!	locates a string that satisfies the Pascal REAL datatype
!	syntax.  The address and length of that string are returned as
!	output parameters.
!
! CALLING SEQUENCE:
!
!	Valid.wc.v = JSB PAS$$GET_REAL (PFV.mr.r, IN_FCB.mr.r;
!			STRING_ADDR.wl.v, STRING_LEN.wl.v, FCB.mr.r)
!
! FORMAL PARAMETERS:
!
!	PFV		- Pascal File Variable for the file.
!
!	IN_FCB		- The File Control Block of the file being scanned.
!			  It is assumed to be a textfile.
!
!	STRING_ADDR	- Output register parameter which is set to the
!			  address of the first byte of the string.
!
!	STRING_LEN	- Output register parameter which is set to the
!			  length of the string in bytes.
!
!	FCB		- Output register parameter which is the same as IN_FCB.
!
! IMPLICIT INPUTS:
!
!	It is assumed that lazy-lookahead is not in progress.
!
! IMPLICIT OUTPUTS:
!
!	FCB$A_RECORD_CUR points to the next character after the string, or
!	EOL.
!
! ROUTINE VALUE:
!
!	1 if string is a valid real, 0 otherwise.
!	If failure is returned, STRING_LEN includes the first bad character
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	CHAR,				! Character read
	FLAGS: BITVECTOR [5];		! Indicate value fields seen

    !+
    ! Declare CHAR_BYTE which is the same as CHAR except that we can
    ! test it as a signed byte.  We want to leave CHAR as a longword
    ! so that it can be used efficiently as an index.
    !-

    BIND 
	CHAR_BYTE = CHAR: BYTE SIGNED;

    LITERAL
	FLAGS_EXPLT = 0,		! Exponent letter seen
	FLAGS_POINT = 1,		! Decimal point seen
	FLAGS_FRADG = 2,		! Fraction digit seen
	FLAGS_EXPDG = 3,		! Exponent digit seen
	FLAGS_EXPSI = 4;		! Exponent sign seen

    !+
    ! Find first character that is not a blank or a tab, possibly skipping
    ! records.
    !-

    CHAR = FIND_NON_BLANK (PFV [PFV$R_PFV], IN_FCB [FCB$R_FCB]; FCB);

    !+
    ! Initialize local flags.
    !-

    FLAGS = 0;

    !+
    ! At this point, CHAR contains the first character which is not a blank
    ! or a tab.  Initialize STRING_ADDR.
    !-

    STRING_ADDR = .FCB [FCB$A_RECORD_CUR];

    !+
    ! If first character is a sign, advance pointer.
    !-

    IF .CHAR_BYTE GEQ 0
    THEN
	IF .CLASSTAB [.CHAR] EQLU CLASS_SI
	THEN
	    BEGIN
	    FCB [FCB$A_RECORD_CUR] = .FCB [FCB$A_RECORD_CUR] + 1;
	    IF .FCB [FCB$A_RECORD_CUR] LSSA .FCB [FCB$A_RECORD_END]
	    THEN
		CHAR = CH$RCHAR (.FCB [FCB$A_RECORD_CUR])
	    ELSE
		CHAR = %C' ';	! End of line
	    END;

    !+
    ! In a loop, classify the characters until end-of-line or an invalid
    ! character is found.
    !-

    WHILE 1 DO
	BEGIN

	!+
	! If the character's value is greater than or equal to 128,
	! it can't possibly be valid, so exit.  Do this with a signed test
	! on CHAR_BYTE.
	!-

	IF .CHAR_BYTE LSS 0
	THEN
	    EXITLOOP;

	!+
	! Select action based on character class.
	!-

	CASE .CLASSTAB [.CHAR] FROM CLASS_IV TO CLASS_LT OF

	    SET

	    [CLASS_DG]:		! Digit, always valid
		BEGIN
		IF .FLAGS [FLAGS_EXPLT]		! Exponent letter already seen?
		THEN
		    BEGIN
		    FLAGS [FLAGS_EXPSI] = 1;	! Prohibit future signs
		    FLAGS [FLAGS_EXPDG] = 1;	! Mark exponent digit seen
		    END
		ELSE
		    FLAGS [FLAGS_FRADG] = 1;	! Mark fraction digit seen
		END;

	    [CLASS_SI]:		! Sign character
		BEGIN
		IF NOT .FLAGS [FLAGS_EXPLT]	! Exponent letter not seen?
		THEN
		    EXITLOOP;			! If so, invalid
		IF .FLAGS [FLAGS_EXPSI]		! Exponent sign seen?
		THEN
		    EXITLOOP;			! If so, invalid
		FLAGS [FLAGS_EXPSI] = 1;	! Indicate exponent sign seen
		END;

	    [CLASS_EL]:		! Exponent letter
		BEGIN
		IF .FLAGS [FLAGS_EXPLT]		! Exponent letter already seen?
		THEN
		    EXITLOOP;			! If so, invalid
		IF NOT .FLAGS [FLAGS_FRADG]	! Fraction digit seen?
		THEN
		    EXITLOOP;			! If not, invalid
		FLAGS [FLAGS_EXPLT] = 1;	! Mark exponent letter seen
		FLAGS [FLAGS_POINT] = 1;	! Prohibit future decimal point
		END;

	    [CLASS_DP]:		! Decimal point
		BEGIN
		IF .FLAGS [FLAGS_POINT]		! Decimal point already seen?
		THEN
		    EXITLOOP;			! If so, invalid
		FLAGS [FLAGS_POINT] = 1;	! Mark decimal point seen
		END;

	    [INRANGE, OUTRANGE]:
		EXITLOOP;	! Invalid

	    TES;

	!+
	! Get another character if not at end-of-line.
	!-

	FCB [FCB$A_RECORD_CUR] = .FCB [FCB$A_RECORD_CUR] + 1;
	IF .FCB [FCB$A_RECORD_CUR] LSSA .FCB [FCB$A_RECORD_END]
	THEN
	    CHAR = CH$RCHAR (.FCB [FCB$A_RECORD_CUR])
	ELSE
	    EXITLOOP;

	END;	! Of WHILE loop

    !+
    ! Set STRING_LEN to length of string and return function value indicating
    ! whether or not string is valid.
    !-

    STRING_LEN = .FCB [FCB$A_RECORD_CUR] - .STRING_ADDR;
    IF .STRING_LEN EQL 0	! If so, string is invalid
    THEN
	STRING_LEN = 1;
    RETURN (
	IF .FLAGS [FLAGS_FRADG] AND				! Fraction digit required
	   ((NOT .FLAGS [FLAGS_EXPLT]) OR .FLAGS [FLAGS_EXPDG])	! If exponent, must have digits
	THEN
	    1	! Valid
	ELSE
	    0	! Invalid
	   );

    END;					! End of routine PAS$$GET_REAL

!<BLF/PAGE>

%SBTTL 'PAS$$GET_ENUMERATED - Find an enumerated value string'
GLOBAL ROUTINE PAS$$GET_ENUMERATED (		! Get enumerated value string
	PFV: REF $PAS$PFV_FILE_VARIABLE,	! Pascal File Variable
	IN_FCB: REF $PAS$FCB_CONTROL_BLOCK;	! File control block
	STRING_ADDR,				! Output string address
	STRING_LEN,				! Output string length
	FCB: REF $PAS$FCB_CONTROL_BLOCK		! File control block
    ) : JSB_READ_UTIL =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure advances the textfile referenced by FCB until it
!	locates a string that satisfies the Pascal enumerated type value
!	syntax.  The address and length of that string are returned as
!	output parameters.
!
! CALLING SEQUENCE:
!
!	Valid.wc.v = JSB PAS$$GET_ENUMERATED (PFV.mr.r, IN_FCB.mr.r;
!			STRING_ADDR.wl.v, STRING_LEN.wl.v, FCB.mr.r)
!
! FORMAL PARAMETERS:
!
!	PFV		- Pascal File Variable for the file.
!
!	IN_FCB		- The File Control Block of the file being scanned.
!			  It is assumed to be a textfile.
!
!	STRING_ADDR	- Output register parameter which is set to the
!			  address of the first byte of the string.
!
!	STRING_LEN	- Output register parameter which is set to the
!			  length of the string in bytes.
!
!	FCB		- Output register parameter which is the same as IN_FCB.
!
! IMPLICIT INPUTS:
!
!	It is assumed that lazy-lookahead is not in progress.
!
! IMPLICIT OUTPUTS:
!
!	FCB$A_RECORD_CUR points to the next character after the string, or
!	EOL.
!
! ROUTINE VALUE:
!
!	1 if string is a valid enumerated value, 0 otherwise
!	If failure is returned, STRING_LEN includes the first bad character
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	CHAR,					! Character read
	VALID_CHAR_MASK: BITVECTOR [32];	! Bit is set if associated
	    					! character class is valid
	    					! at this point.

    !+
    ! Declare CHAR_BYTE which is the same as CHAR except that we can
    ! test it as a signed byte.  We want to leave CHAR as a longword
    ! so that it can be used efficiently as an index.
    !-

    BIND 
	CHAR_BYTE = CHAR: BYTE SIGNED;

    !+
    ! Find first character that is not a blank or a tab, possibly skipping
    ! records.
    !-

    CHAR = FIND_NON_BLANK (PFV [PFV$R_PFV], IN_FCB [FCB$R_FCB]; FCB);

    !+
    ! At this point, CHAR contains the first character which is not a blank
    ! or a tab.  Initialize STRING_ADDR.
    !-

    STRING_ADDR = .FCB [FCB$A_RECORD_CUR];


    !+
    ! First character must be a letter. (Class LT excludes exponent
    ! letters, so add class EL).
    !-

    VALID_CHAR_MASK = (1^CLASS_LT)+(1^CLASS_EL);
    
    !+
    ! In a loop, classify the characters until end-of-line or an invalid
    ! character is found.
    !-

    WHILE 1 DO
	BEGIN

	!+
	! If the character's value is greater than or equal to 128,
	! it can't possibly be valid, so exit.  Do this with a signed test
	! on CHAR_BYTE.
	!-

	IF .CHAR_BYTE LSS 0
	THEN
	    EXITLOOP;

	!+
	! Get the class of the character from CLASSTAB and test its
	! corresponding bit in VALID_CHAR_MASK.  If it is not set, that
	! character is not acceptable.
	!-

	IF NOT .VALID_CHAR_MASK [.CLASSTAB [.CHAR]]
	THEN
	    EXITLOOP;

	!+
	! Allow digits to appear from now on.
	!-

	VALID_CHAR_MASK [CLASS_DG] = 1;

	!+
	! Get another character if not at end-of-line.
	!-

	FCB [FCB$A_RECORD_CUR] = .FCB [FCB$A_RECORD_CUR] + 1;
	IF .FCB [FCB$A_RECORD_CUR] LSSA .FCB [FCB$A_RECORD_END]
	THEN
	    CHAR = CH$RCHAR (.FCB [FCB$A_RECORD_CUR])
	ELSE
	    EXITLOOP;

	END;	! Of WHILE loop


    !+
    ! Set STRING_LEN to length of string and return function value indicating
    ! whether or not string is valid.
    !-

    STRING_LEN = .FCB [FCB$A_RECORD_CUR] - .STRING_ADDR;
    IF .STRING_LEN NEQ 0
    THEN
	RETURN 1;

    STRING_LEN = 1;	! Include first bad character
    RETURN 0;		! Failure

    END;					! End of routine PAS$$GET_ENUMERATED

!<BLF/PAGE>

%SBTTL 'FIND_NON_BLANK - Find first non-blank'
ROUTINE FIND_NON_BLANK (			! Get first non-blank
	PFV: REF $PAS$PFV_FILE_VARIABLE,	! Pascal File Variable
	IN_FCB: REF $PAS$FCB_CONTROL_BLOCK;	! File control block
	FCB: REF $PAS$FCB_CONTROL_BLOCK		! File control block
    ) : JSB_FIND_NON_BLANK =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure advances the textfile referenced by FCB until it
!	locates the first character which is not a blank or a tab.  It
!	returns that character as its function value.
!
! CALLING SEQUENCE:
!
!	CHAR.wt.v = JSB FIND_NON_BLANK (PFV.mr.r, IN_FCB.mr.r; FCB.mr.r)
!
! FORMAL PARAMETERS:
!
!	PFV		- Pascal File Variable for the file.
!
!	IN_FCB		- The File Control Block of the file being scanned.
!			  It is assumed to be a textfile.
!
!	FCB		- Output register parameter which is the same as IN_FCB.
!
! IMPLICIT INPUTS:
!
!	It is assumed that lazy-lookahead is not in progress.
!
! IMPLICIT OUTPUTS:
!
!	FCB$A_RECORD_CUR points to the found character.
!
! ROUTINE VALUE:
!
!	The character found which is not a blank or a tab.
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	GETAFTEOF - GET after end-of-file
!
!--

    BEGIN

    LOCAL
	CHAR;					! Character read

    !+
    ! Declare CHAR_BYTE which is the same as CHAR except that we can
    ! test it as a signed byte.  We want to leave CHAR as a longword
    ! so that it can be used efficiently as an index.
    !-

    BIND 
	CHAR_BYTE = CHAR: BYTE SIGNED;

    FCB = .IN_FCB;

    !+
    ! Find first character that is not a blank or a tab, possibly skipping
    ! records.
    !-

    WHILE 1 DO
	BEGIN
	!+
	! If we are at end-of-line, get another record.  This is done by
	! setting lazy-lookahed and then calling PAS$$LOOK_AHEAD.
	!-

	IF .FCB [FCB$A_RECORD_CUR] GEQA .FCB [FCB$A_RECORD_END]
	THEN
	    BEGIN
	    FCB [FCB$V_LAZY] = 1;	! Set lazy lookahead
	    PAS$$LOOK_AHEAD (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);
	    END
	ELSE
	    BEGIN
	    !+
	    ! Get next character, advancing pointer, and check class for blank
	    ! or tab.
	    !-
	    CHAR = CH$RCHAR_A (FCB [FCB$A_RECORD_CUR]);
	    IF (.CHAR_BYTE LSS 0) OR (.CLASSTAB [.CHAR] NEQ CLASS_BT)
	    THEN
		BEGIN
		!+
		! Non blank/tab found.  Reset record pointer to point
		! to character and exit loop.
		!-
		FCB [FCB$A_RECORD_CUR] = .FCB [FCB$A_RECORD_CUR] - 1;
		EXITLOOP;
		END;
	    END;

	END;	! Of WHILE loop

    RETURN .CHAR;				! Return found character

    END;					! End of routine FIND_NON_BLANK

!<BLF/PAGE>

END						! End of module PAS$$READ_UTIL

ELUDOM
