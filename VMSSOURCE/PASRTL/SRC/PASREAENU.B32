MODULE PAS$READ_ENUMERATED ( %TITLE 'Read an enumerated value'
		IDENT = '1-002'			! File: PASREAENU.B32 Edit: SBL1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains procedures which read an enumerated value
!	from a textfile or a string.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
! 1-002 - Use PAS$$END_READ.  SBL 26-May-1982
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$READ_ENUMERATED,				! Read from textfile
    PAS$READV_ENUMERATED;				! Read from string

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!

%SBTTL 'PAS$READ_ENUMERATED - Read an enumerated value from textfile'
GLOBAL ROUTINE PAS$READ_ENUMERATED (
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	PETD: REF VECTOR [, LONG],			! Enumerated type descriptor
	ERROR						! Error unwind address
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This function reads an enumerated value from the specified textfile
!	and returns it as the function value.
!
! CALLING SEQUENCE:
!
!	Enumerated.wlu.v = PAS$READ_ENUMERATED (PFV.mr.r , PETD.r.r [, ERROR.ja.r])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	PETD		- Pascal Enumerated Type Descriptor, passed by reference.
!			  The structure of a PETD is as follows:
!
!			  +-------------------------------+
!			  |   offset of ASCIC type name   |   <-- PETD
!			  +-------------------------------+
!			  | count of possible values (n)  |
!			  +-------------------------------+
!			  | offset of ASCIC value name 0  |
!			  +-------------------------------+
!			  | offset of ASCIC value name 1  |
!			  +- - - - - - - - - - - - - - - -+
!		             	  	...
!			  +- - - - - - - - - - - - - - - -+
!			  | offset of ASCIC value name n-1|
!			  +-------------------------------+
!
!			  The offsets are relative to the address
!			  of the descriptor (PETD).  The names are
!			  counted strings with 1-byte counts. It
!			  is assumed that the compiler has upcased
!			  all of the strings. 
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  in case of an error.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The value of the enumerated value read.
!
! SIDE EFFECTS:
!
!	If the file is the standard file INPUT or OUTPUT, it is implicitly opened.
!
! SIGNALLED ERRORS:
!
!	INVSYNENU - invalid syntax for enumerated value
!	AMBVALENU - "string" is an ambiguous value for enumerated type "type"
!	NOTVALTYP - "string" is not a value of type "type"
!
!--

    BEGIN

    LOCAL
	RESULT,				! Result value
	STRING: REF VECTOR [, BYTE],	! Field in line read
	STRING_LENGTH,			! Length of STRING
	MATCH_COUNT,			! Count of values matched
	FCB: REF $PAS$FCB_CONTROL_BLOCK,! File Control block
	PFV_ADDR: VOLATILE,		! Enable argument
	UNWIND_ACT: VOLATILE,		! Enable argument
	ERROR_ADDR: VOLATILE;		! Enable argument

    BUILTIN
	ACTUALCOUNT;			! Count of arguments

    BIND
	TYPE_ENUMERATED = UPLIT BYTE (%CHARCOUNT('-enumerated-'),'-enumerated-');

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    !+
    ! Get ERROR parameter, if present.
    !-

    IF ACTUALCOUNT () GEQU 3
    THEN
	ERROR_ADDR = .ERROR;		! Set unwind address

    PFV_ADDR = PFV [PFV$R_PFV];		! Set PFV address

    !+
    ! Validate PFV and get PFV.
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Do common initialization.
    !-

    PAS$$INIT_READ (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    RESULT = 0;		! Indicate no value found yet.

    !+
    ! Call utility routine to find a string that looks like an enumerated value.
    ! If we can't find one, signal an error.
    !-

    IF NOT PAS$$GET_ENUMERATED (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; 
	STRING, STRING_LENGTH, FCB)
    THEN
	$PAS$IO_ERROR (PAS$_INVSYNENU,3,.STRING_LENGTH,
	    STRING [0], .FCB [FCB$L_RECORD_NUMBER]);	! Invalid syntax

    !+
    ! Maximum length of user string that we look at is 31 characters.
    !-

    IF .STRING_LENGTH GTRU 31
    THEN
	STRING_LENGTH = 31;
    STRING = .STRING - 1;	! Offset so that same index can be used for
				! type-value and user string.

    !+
    ! Scan through the PETD and look for matches.  Upcase user's input and
    ! check for ambiguous values.  
    !-

    MATCH_COUNT = 0;
    INCR IDX FROM 1 TO .PETD [1] DO
	BEGIN
	LOCAL
	    TYPE_VAL: REF VECTOR [, BYTE],	! Type value
	    VAL_LEN;				! Length of value string
	TYPE_VAL = .PETD + .PETD [.IDX+1];	! Get next value string
	VAL_LEN = .TYPE_VAL [0];		! Get length.

	!+
	! If user string length is longer than this value, skip this
	! value.  Otherwise, see if they match.
	!-

	IF .STRING_LENGTH LEQU .VAL_LEN
	THEN	
	    BEGIN
	    IF (INCR POS FROM 1 TO .STRING_LENGTH DO
		BEGIN
		IF .TYPE_VAL [.POS] NEQ
		    (
		    IF (.STRING [.POS] GEQ %C'a') AND 
		       (.STRING [.POS] LEQ %C'z')
		    THEN
			.STRING [.POS] - (%C'a' - %C'A')
		    ELSE
			.STRING [.POS]
		    )
		THEN
		    EXITLOOP 0;	! Mismatch found
		END) NEQ 0
	    THEN
		BEGIN
		!+
		! Match found.  If exact match, set RESULT, reset
		! MATCH_COUNT to 1 and exit the loop.  If it is a partial
		! match, set RESULT, increment MATCH_COUNT, and continue.
		!-

		IF .STRING_LENGTH EQL .VAL_LEN
		THEN
		    BEGIN
		    !+
		    ! Exact match
		    !-
		    RESULT = .IDX;
		    MATCH_COUNT = 1;
		    EXITLOOP;
		    END;
		RESULT = .IDX;		! Set this result
		MATCH_COUNT = .MATCH_COUNT + 1;	! Increment count of matches
		END;
	    END;

	END;	! Of INCR loop

    !+
    ! Check for no matches (MATCH_COUNT LSS 1) or ambiguous match 
    ! (MATCH_COUNT GTR 1).
    !+

    IF .MATCH_COUNT NEQ 1	! Not exactly one match?
    THEN
	BEGIN
	LOCAL
	    DESCR: BLOCK [8, BYTE];
	DESCR [DSC$W_LENGTH] = .STRING_LENGTH;
	DESCR [DSC$B_CLASS] = 0;
	DESCR [DSC$B_DTYPE] = 0;
	DESCR [DSC$A_POINTER] = STRING [1];
	IF .MATCH_COUNT EQL 0
	THEN
	    $PAS$IO_ERROR (PAS$_NOTVALTYP,3,DESCR,
		(IF .PETD [0] EQL 0
		THEN
		    TYPE_ENUMERATED
		ELSE
		    .PETD + .PETD [0]),
		.FCB [FCB$L_RECORD_NUMBER])	! Not a value of type
	ELSE
	    $PAS$IO_ERROR (PAS$_AMBVALENU,3,DESCR,
		(IF .PETD [0] EQL 0
		THEN
		    TYPE_ENUMERATED
		ELSE
		    .PETD + .PETD [0]),
		.FCB [FCB$L_RECORD_NUMBER]);	! Ambiguous value
	END;

    !+
    ! Do end-of-READ processing.
    !-

    PAS$$END_READ (PFV [PFV$R_PFV], FCB [FCB$R_FCB]);

    RETURN .RESULT - 1;	! Compensate for loop starting at 1

    END;					! End of routine PAS$READ_ENUMERATED

!<BLF/PAGE>

%SBTTL 'PAS$READV_ENUMERATED - Read an enumerated value from string'
GLOBAL ROUTINE PAS$READV_ENUMERATED (
	STRING: REF BLOCK [, BYTE],			! String descriptor
	PETD: REF VECTOR [, LONG],			! Enumerated type descriptor
	ERROR						! Error unwind address
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This function reads an enumerated value from the specified string
!	and returns it as the function value.
!
! CALLING SEQUENCE:
!
!	Enumerated.wl.v = PAS$READV_ENUMERATED (STRING.mt.ds , PETD.rr.r [, ERROR.ja.r])
!
! FORMAL PARAMETERS:
!
!	STRING		- The string to read from, passed as a class S
!			  (assumed) descriptor.  The length and pointer
!			  are updated to reflect the unread string.
!
!	PETD		- Pascal Enumerated Type Descriptor, passed by reference.
!			  The structure of a PETD is as follows:
!
!			  +-------------------------------+
!			  |   offset of ASCIC type name   |   <-- PETD
!			  +-------------------------------+
!			  | count of possible values (n)  |
!			  +-------------------------------+
!			  | offset of ASCIC value name 0  |
!			  +-------------------------------+
!			  | offset of ASCIC value name 1  |
!			  +- - - - - - - - - - - - - - - -+
!		             	  	...
!			  +- - - - - - - - - - - - - - - -+
!			  | offset of ASCIC value name n-1|
!			  +-------------------------------+
!
!			  The offsets are relative to the address
!			  of the descriptor (PETD).  The names are
!			  counted strings with 1-byte counts. It
!			  is assumed that the compiler has upcased
!			  all of the strings. 
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  in case of an error.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The value of the enumerated value read.
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	PFV: $PAS$PFV_FILE_VARIABLE,	! Pascal File Variable
	RESULT,				! Result value
	ARG_LIST: VECTOR [3, LONG],	! Argument list
	PFV_ADDR: VOLATILE,		! Enable argument
	UNWIND_ACT: VOLATILE,		! Enable argument
	ERROR_ADDR: VOLATILE;		! Enable argument

    BUILTIN
	ACTUALCOUNT;			! Count of arguments

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    !+
    ! Get ERROR parameter, if present.
    !-

    IF ACTUALCOUNT () GEQU 3
    THEN
	ERROR_ADDR = .ERROR;		! Set unwind address

    PFV_ADDR = PFV [PFV$R_PFV];		! Set PFV address

    !+
    ! Set up ARG_LIST.
    !-

    ARG_LIST [0] = 2;			! Two arguments
    ARG_LIST [1] = PFV [PFV$R_PFV];	! PFV address
    ARG_LIST [2] = PETD [0];		! Enumerated type descriptor

    !+
    ! Call PAS$$DO_READV to do the work, giving it the address of
    ! PAS$READ_ENUMERATED to call.
    !-

    PAS$$DO_READV (PFV [PFV$R_PFV], .STRING, ARG_LIST, PAS$READ_ENUMERATED; 
	RESULT);

    RETURN .RESULT;

    END;					! End of routine PAS$READV_ENUMERATED

!<BLF/PAGE>

END						! End of module PAS$READ_ENUMERATED

ELUDOM
