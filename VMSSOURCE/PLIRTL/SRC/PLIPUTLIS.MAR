	.title	pli$putlistitem
	.ident	/1-002/					; Edit WHM1002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; facility:
;
;	VAX/VMS PL1 runtime library
;
; abstract:
;
;	This module contains the pl1 runtime routines to put items to a
;	pl1 stream file under list directed i/o.
;
;
; author: c. spitz 28-nov-79
;
; modified:
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;--

;
; external definitions
;
	$deffcb				;define file control block
	$defstk				;define stack frame offsets
	$defstr				;define stream block offsets
	$defdat				;define operand node data types
	$defgetopt			;define get options block
	$rabdef				;define rms rab offsets
	$rmsdef				;define rms error codes
	$ssdef				;define system status codes

; 
; local data
;

	rtshare			;sharable

;++
; pli$putl****
; 
; the pli$putl**** routines are called by the compiled code to put items
; to a stream output file under list directed transmission. each routine
; converts the source item to a character string based on the source data
; type, and puts then puts the string to the file by jumping to
; pli$$putnlis_r6.
;--


;pli$putlchar_r6
; inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
; outputs:
;	none
; side effects:
;	r0-r6 are destroyed

pli$putlchar_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	addl	r0,r1			;get ending address of source
	movab	<str_b_field+2>(r11),r2	;get starting addr in field
	movl	r2,r4			;copy it
	movl	str_l_fld_end(r11),r3	;get end addr of field
	bbs	#atr_v_print,fcb_l_attr(ap),5$ ;skip lead quote if print
	movb	#^x27,(r2)+		;insert the leading quote
5$:	cmpl	r0,r1			;nothing in source?
	beql	60$			;if eql, then yes
10$:	cmpb	(r0),#^x27		;next char a quote?
	bneq	20$			;if neq, then no
	bbs	#atr_v_print,fcb_l_attr(ap),20$ ;if print file, don't change
	movw	#^x2727,(r2)+		;insert 2 quotes
	brb	50$			;continue
20$:	movb	(r0),(r2)+		;copy to field
50$:	aoblss	r1,r0,55$		;if not end of source, cont
	brb	60$			;finish it off
55$:	cmpl	r2,r3			;field overflow?
	blss	10$			;if lss, then no, cont
	movl	#pli$_strovfl,r0	;set field overflow
	brw	fail			;and fail
60$:	bbs	#atr_v_print,fcb_l_attr(ap),70$ ;if print, don't add trail quote
	movb	#^x27,(r2)+		;insert trailing quote
70$:	subl	r4,r2			;get length
	movw	r2,-(r4)		;set length in field
	jsb	g^pli$$putnlis_r6	;put in buffer
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	rsb				;return

;pli$putlvcha_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$putlvcha_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	movzwl	(r0)+,r1		;get length of source
	brw	pli$putlchar_r6		;continue in common



;pli$putlbit_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r2 - offset to starting bit
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$putlbit_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	movl	r2,r5			;copy offset
	movab	str_b_field(r11),r2	;get field addr
	addw3	r1,#3,(r2)+		;set size
	movb	#^x27,(r2)+		;insert a quote
	movl	r1,r3			;get size	
	cmpl	r3,#1000		;field overflow?
	bleq	10$			;if leq, then no
	movl	#pli$_strovfl,r0	;set field over flow
	brw	fail			;and fail
10$:	addl3	r1,r2,r4		;get addr of end of string
	movw	#^x4227,(r4)		;plug in trailing quote and B
	calls	#0,g^pli$bitchar_r6	;convert bits
	jsb	g^pli$$putnlis_r6	;put in buffer
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	rsb				;return


;pli$putlabit_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$putlabit_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	clrl	r2			;set offset to 0
	brb	pli$putlbit_r6		;join common code

;pli$putlfixb_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$putlfixb_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	movab	str_b_field(r11),r2	;set field addr
	movl	#1000,r3		;set size
	calls	#0,g^pli$fixbvcha_r6	;convert it	
	jsb	g^pli$$putnlis_r6	;put in buffer
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	rsb				;return


;pli$putlfixd_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$putlfixd_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	movab	str_b_field(r11),r2	;set field addr
	movl	#1000,r3		;set size
	calls	#0,g^pli$fixdvcha_r6	;convert it	
	jsb	g^pli$$putnlis_r6	;put in buffer
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	rsb				;return


;pli$putlfltb_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$putlfltb_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	movab	str_b_field(r11),r2	;set field addr
	movl	#1000,r3		;set field width
	calls	#0,g^pli$fltbvcha_r6	;convert it	
	jsb	g^pli$$putnlis_r6	;put in buffer
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	rsb				;return


;pli$putlfltd_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$putlfltd_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	movab	str_b_field(r11),r2	;set field addr
	movl	#1000,r3		;set field width
	calls	#0,g^pli$fltdvcha_r6	;convert it	
	jsb	g^pli$$putnlis_r6	;put in buffer
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	rsb				;return


;pli$putlpic_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed

pli$putlpic_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	movab	str_b_field(r11),r2	;set field addr
	movl	#1000,r3		;set size
	calls	#0,g^pli$picvcha_r6	;convert it	
	jsb	g^pli$$putnlis_r6	;put in buffer
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	rsb				;return

fail:	movl	r0,fcb_l_error(ap)	;set error in fcb
	pushl	ap			;set fcb address
	pushl	r0			;set error code
	pushl	#pli$_error		;set error condition
	calls	#3,g^pli$io_error	;signal error condition
	ret				;return

	.end

