MODULE MOMDAT (IDENT = 'V04-000') =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Maintenanc Operations Module
!
!
! ABSTRACT:
!	This module contains all global data referenced by the
!	Maintenance Operations Module (MOM).
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Kathy Perko
!
! CREATION DATE:  17-Dec-1982
!
! MODIFIED BY:
!	V03-004	MKP0004		Kathy Perko		21-July-1984
!		Use MOM$K_MAX_MOP_MSG_LEN instead of literals in descriptors.
!		This falls out as part of fix for LOOP CIRC on point-to-point
!		lines.
!
!	V03-003	MKP0003		Kathy Perko		20-May-1984
!		Add QNA device to table used to construct secondary and
!		tertiary load file names which are not suppied in the node
!		database.
!
!	V03-002	MKP0002		Kathy Perko		11-April-1984
!		Add buffer for Network Management version checking.
!
!	V03-001	MKP0001		Kathy Perko		20-Jan-1984
!		Add SERVICE NODE VERSION parameter.
!
!--

%SBTTL 'Global data declarations'

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:MOMLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

PSECT GLOBAL = $GLOBAL$;

!
! OWN STORAGE:
!
GLOBAL
    MOM$GQ_PROPRVMSK : BBLOCK [8],		! Process privilege mask
    MOM$GW_ACP_CHAN;				! ACP control channel

!
! Debugging log mask.  The bit mask is set up at service initialization
! by translating the logical name MOM$LOG.  The resulting ASCII hex number
! is converted to binary to provide the appropriate mask bit settings.
!
! The values for MOM$LOG are defined as follows:
!
!	    1	NICE message network I/O.
!	    4	NPARSE state transitions.
!	    8	Test (node loopback) message network I/O.
!	   10	Volatile data base I/O (NETACP QIOs).
!	   20	MOP direct line I/O.
!	   40	Trace service operation.
!	   80	Raw event data.
!
GLOBAL
    MOM$GL_LOGMASK   : BLOCK [1] INITIAL (0);	! Internal logging mask



%SBTTL 'Data for service operations'
!
! The following data is used to store information needed for maintenance
! operations such as LOAD, DUMP, TRIGGER, and line loop.
!

GLOBAL BIND
!
! Network device name - used to assign a channel to NETACP for getting
! information from the volatile database.
!
    MOM$GQ_NETNAMDSC = $ASCID ('_NET:'),
!
! Service device name - used to assign a channel to the device.  QIOs to
! this device will send MOP messages to the target node and receive the
! response MOP messages.
!
    MOM$GQ_DLE_NAMDSC = $ASCID ('_ND:'),
!
! PSI device name - used to assign a channel to PSI for issuing loop
! line QIOs.
!
    MOM$GQ_PSINAMDSC = $ASCID ('_NW:');

!
! The following fields are used for parsing NICE commands requesting
! service operations.
!
GLOBAL
    MOM$GL_SVD_INDEX,			! Index for parameter's entry in the
					!	Service Data Table.
    MOM$GB_FUNCTION:	BYTE,		! NICE message function code.
    MOM$GB_OPTION_BYTE:	BYTE;		! NICE message option byte.

!
! NPARSE argument block - this block is used during parsing of NICE messages
! to keep track of how far into the message the parsing is, and the value and
! length of the field currently being parsed.
!
GLOBAL
    MOM$AB_NPARSE_BLK:	$NPA_BLKDEF;

GLOBAL
!
! The maintenance entity code can be any one of the following values:
!
!	MOM$C_LINE
!	MOM$C_CIRCUIT
!	MOM$C_NODE
!	MOM$C_NODEBYNAME
!
    MOM$GB_ENTITY_CODE : BYTE,		! Maintenance entity code (key)
!
! The entity id string is the data used as the key into the volatile data
! base to get information for the maintenance operation.  The contents of the
! buffer are determined by the value of the entity id code.
!
!    MOM$C_LINE		contains line name.
!    MOM$C_CIRCUIT	contains circuit name.
!    MOM$C_NODE		contains node address (always a word).
!    MOM$C_NODEBYNAME 	contains node name.
!
    MOM$AB_ENTITY_BUF	: BBLOCK [32],	! Entity id string buffer
!
! The service id descriptor describes the extent of the entity id in
! the service id buffer.
!
    MOM$GQ_ENTITY_BUF_DSC : VECTOR [2]	! Maintenance id descriptor
			  INITIAL (0, MOM$AB_ENTITY_BUF);

!
! Service flags.  These flags are set to indicate various options in
! use by the current service operation.  The options bits are described
! in MOMDEF.MDL.
!
GLOBAL
    MOM$GL_SERVICE_FLAGS;

!
! For autoservice functions, MOM logs events to indicate the status
! of the operation.  This serves the same function as the NICE response
! message for operator service functions.  The event to logged is kept
! in the following fields, and when completion (successful or not) is
! signalled, the event is logged by the condition handler.
!
! Three different events can be logged:
!
!	Automatic line service		0.3
!	Aborted service request		0.7
!	Passive loopback		0.6
!
GLOBAL
    MOM$GB_EVT_POPR : BYTE,		! Passive loopback operation code
    MOM$GB_EVT_PRSN : BYTE,		! Aborted service request reason code
    MOM$GB_EVT_PSER : BYTE,		! Automatic line service request code
    MOM$GW_EVT_CODE : WORD;		! Event code



!*************************************************************************
!   Buffers for communicating with other components of DECnet:
!	NICE message buffers
!	MOP message buffers
!	NETACP QIO buffers
!*************************************************************************

!
! Network I/O buffers used for sending and receiving NICE messages from
! NCP via the Network Management Listener (NML).
!
GLOBAL LITERAL
    MOM$K_NML_MBX_BUF_LEN = MOM$K_NICE_BUF_LEN + 3;

GLOBAL
    MOM$AB_NML_MAILBOX_BUFFER: BBLOCK [MOM$K_NML_MBX_BUF_LEN];
GLOBAL BIND
    MOM$AB_NCP_VERSION = MOM$AB_NML_MAILBOX_BUFFER :	BBLOCK [3],
    MOM$AB_NICE_RCV_BUF = MOM$AB_NML_MAILBOX_BUFFER + 3 :
					BBLOCK [MOM$K_NICE_BUF_LEN];
GLOBAL
    MOM$GL_NICE_RCV_MSG_LEN,
    MOM$AB_NICE_XMIT_BUF:BBLOCK [MOM$K_NICE_BUF_LEN];

GLOBAL BIND
    MOM$GQ_NICE_RCV_BUF_DSC =
	UPLIT (MOM$K_NICE_BUF_LEN, MOM$AB_NICE_RCV_BUF),
    MOM$GQ_NICE_XMIT_BUF_DSC =
	UPLIT (MOM$K_NICE_BUF_LEN, MOM$AB_NICE_XMIT_BUF);

!
! P4 QIO buffer used to get the target's service parameters from NETACPs
! volatile database.  NETACP returns the parameters in this buffer.
!
GLOBAL
    MOM$AB_ACPQIO_BUFFER:	BBLOCK [MOM$K_QIO_BUF_LEN];
GLOBAL BIND
    MOM$GQ_ACPQIO_BUF_DSC =
	UPLIT (MOM$K_QIO_BUF_LEN, MOM$AB_ACPQIO_BUFFER);


!
! MOP I/O Channel Information Blocks (CIBs), buffers, and descriptors.
!
GLOBAL
    MOM$GQ_TIMEOUT:	VECTOR [2]		! Timer set on all MOP QIOs
			INITIAL (0, -1),	! to target (delta).
    MOM$AB_CIB : BBLOCK [CIB$C_CIBLEN],
    MOM$AB_LOOP_CIB : BBLOCK [CIB$C_CIBLEN];

GLOBAL BIND
    MOM$AB_TRIGGER_CIB = MOM$AB_LOOP_CIB : BBLOCK;

GLOBAL
    MOM$AB_MOP_XMIT_BUF: BBLOCK [MOM$K_MAX_MOP_MSG_LEN], ! Transmit buffer
    MOM$AB_MOP_RCV_BUF : BBLOCK [MOM$K_MAX_MOP_MSG_LEN], ! Receive buffer
    MOM$AB_MOP_MSG     : BBLOCK [MOM$K_MAX_MOP_MSG_LEN], ! Received MOP
					!	message buffer.
    MOM$GQ_MOP_MSG_DSC : VECTOR [2];	! Received MOP message descriptor.

GLOBAL BIND
    MOM$GQ_MOP_XMIT_BUF_DSC  =
			UPLIT (MOM$K_MAX_MOP_MSG_LEN, MOM$AB_MOP_XMIT_BUF)
			: VECTOR [2],
    MOM$GQ_MOP_RCV_BUF_DSC  =
			UPLIT (MOM$K_MAX_MOP_MSG_LEN, MOM$AB_MOP_RCV_BUF)
			: VECTOR [2];

!
! The following structure is used for accumulating the information
! to be put into the NICE response message returned to NCP.
! MOM$BLD_REPLY is called with this block as input.  MOM$BLD_REPLY
! then constructs the response message.
!
GLOBAL
    MOM$AB_MSGBLOCK :BBLOCK [MSB$K_LENGTH];

!+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
!
!   Service Data Table
!	For any MOP maintenance operation, certain node and circuit
!   parameters are need.  These parameters are retrieved from the
!   volatile database saved in this table.  Then, if there is a NICE
!   command, any parameters specified there overwrite the ones from the
!   volatile database.  These parameters are then used to perform the
!   requested service function.
!
!   Each parameter's entry in the Service Data Table contains the following
!   information:
!	SVD$L_NFB_ID - The NFB field ID (used to identify the parameter to
!			NETACP).
!	SVD$W_NICE_ID - The NICE parameter ID (used to identify the parameter
!			in the command from NCP).
!	SVD$B_NICE_TYPE - The parameter's type (byte, word, longword, or 
!			string) in the NICE message.
!	SVD$B_FLAGS -   There's only one flag, SVD$M_MSG_PARAM, which is set
!			if the parameter value in this entry was obtained from
!			the NICE or MOP message specifying parameters for the
!			current operation.
!	SDV$B_STRING_LEN - Byte length of the parameter if it's a string.
!	SDV$L_PARAM - The parameter value.
!	SVD$T_STRING - The string.
!
!-------------------------------------------------------------------------

!
! Macro to generate an entry for a parameter in the Service Data Table.
!
MACRO SERVICE_TAB (ENTITY) [PARAM_ID, NFB_DATABASE, PARAM_TYPE] =

	[SVD_INDEX, SVD$L_NFB_ID] = 
			%IF %NULL (NFB_DATABASE)
			%THEN 0
			%ELSE %NAME ('NFB$C_',NFB_DATABASE,'_',PARAM_ID)
			%FI,
	[SVD_INDEX, SVD$W_NICE_ID] = %NAME ('NMA$C_',ENTITY,'_',PARAM_ID),
	[SVD_INDEX, SVD$B_NICE_TYPE] = %NAME ('SVD$K_', PARAM_TYPE)

	%ASSIGN (SVD_INDEX, SVD_INDEX+1)

	%;

!
! Generate the Service Data Table indices used by the NPARSE tables.
!
MACRO SVD_INDEX_GEN (ENTITY) [PARAM_ID, NFB_DATABASE, PARAM_TYPE] =

    GLOBAL LITERAL
	%NAME ('SVD$GK_',ENTITY,'_',PARAM_ID) = SVD_INDEX;
    %ASSIGN (SVD_INDEX, SVD_INDEX+1)

    %;

COMPILETIME
    SVD_INDEX = 0;
	

!
! Some of the entries in the Service Data table do not have convenient entries
! in the volatile database or in the NICE protocol.  They are useful pieces of
! information to keep around during the maintenance operation.  So pseudo
! names are used for their entries in the SVD.
!
! The values all have bit 15 set, indicating a counter value, to avoid
! conflicts with other network management parameter codes.
!
GLOBAL LITERAL
    NMA$C_PCNO_$HNA = 1 ^ 15 OR 0,	! Host node name
    NMA$C_PCNO_$FTY = 1 ^ 14 OR 0,	! Load file type (operating system
					!	or diagnostics).
    NMA$C_PCNO_$HHW = 1 ^ 13 OR 0,	! NI Hardware address from volatile
					!	database, used for loop circuit
					!	commands
    NMA$C_PCNO_$LNA = 1 ^ 12 OR 0,	! Loop circuit node name.
    NMA$C_PCNO_$LNH = 1 ^ 11 OR 0,	! Loop circuit node hardware address.
    NMA$C_PCNO_$LNN = 1 ^ 10 OR 0,	! Loop circuit assistant node name.
    NMA$C_PCNO_$LAH = 1 ^ 9 OR 0,	! Loop circuit assistant node hardware
					!		address.
    NMA$C_PCNO_$DA = 1 ^ 8 OR 0;	! Destination Address on MOP message
					!    initiating an autoservice function.


MACRO	NDI_SERVICE_DATA =
!
!		NFB
!    Param ID  Database	 Param type
!    --------  --------	 ----------
	ADD,	NDI,	   WORD,	! Target's node address
	SDV,	NDI,	   BYTE,	! Service device type
	CPU,	NDI,	   BYTE,	! Target's CPU type
	STY,	NDI,	   BYTE,	! Software type to start load with
	DAD,	NDI,	   LONG,	! Address to start dump from
	DCT,	NDI,	   LONG,	! Dump byte count
	IHO,	NDI,	   WORD,	! Host node address
	NNA,	NDI,	   STRING,	! Target's node name
	SLI,	NDI,	   STRING,	! Service circuit ID
	SPA,	NDI,	   STRING,	! Service password
	HWA,	NDI,	   STRING,	! NI hardware address
	SNV,	NDI,	   BYTE,	! Target's service node version
	LOA,	NDI,	   STRING,	! Load file ID
	SLO,	NDI,	   STRING,	! Secondary loader file ID
	TLO,	NDI,	   STRING,	! Tertiary loader file ID
	DFL,	NDI,	   STRING,	! Diagnostics file ID
	SID,	NDI,	   STRING,	! Software ID
	DUM,	NDI,	   STRING,	! Dump file ID
	SDU,	NDI,	   STRING,	! Secondary dump file ID
	$HNA,	,	   STRING,	! Host node name
	$HHW,	,	   STRING,	! Host NI hardware address
	$FTY,	,	   BYTE,	! Load file type (Operating system or
					!	diagnostics).
	PHA,   ,	   STRING,	! Physical address (from NICE command or
					!	NI header).
	$DA,	,	   STRING,	! Destination address of MOP message
					! 	which initiated autoservice on
					! 	the NI.

	LPC,	LNI,	   WORD,	! Loop count
	LPL,	LNI,	   WORD,	! Loop length
	LPD,	LNI,	   BYTE,	! Loop data type
	LPH,	LNI,	   BYTE,	! Loop help type (xmit, rcv, or full)
	LPA,	,	   STRING,	! Loop assist NI address
	LPN,	,	   WORD,	! Loop circuit node address.
	$LNA,	,	   STRING,	! Loop circuit node name.
	$LNH,	,	   STRING,	! Loop circuit node hardware address.
	LAN,	,	   WORD,	! Loop circuit assistant node address.
	$LNN,	,	   STRING,	! Loop circuit assistant node name.
	$LAH,	,	   STRING	! Loop circuit assistant node hardware
					!			address.

	%,

    PLI_SERVICE_DATA =
!
!		NFB
!    Param ID  Database	 Param type
!    --------  --------	 ----------
	STI,	PLI,	   WORD,	! Line service timer

	%;


!
! Generate the Service Data Table entry count and the indices for each
! parameter.
! 
SVD_INDEX_GEN (PCNO, NDI_SERVICE_DATA);
SVD_INDEX_GEN (PCLI, PLI_SERVICE_DATA);

GLOBAL LITERAL
    SVD$C_ENTRY_COUNT = SVD_INDEX;

%ASSIGN (SVD_INDEX, 0)

!
! Generate the Service Data Table.
!
GLOBAL
    MOM$AB_SERVICE_DATA: BBLOCKVECTOR [SVD$C_ENTRY_COUNT, SVD$C_ENTRY_LEN]
			PRESET (SERVICE_TAB (PCNO, NDI_SERVICE_DATA),
				SERVICE_TAB (PCLI, PLI_SERVICE_DATA));


%SBTTL 'MOP Device Table'
!
! MOP device table symbol and macro definitions.
!
MACRO
    $MOPDEV (SYM, NAM) =
	SWITCHES UNAMES;
	PSECT OWN = MOM$MOPDEVNAMES;
	OWN
	    STR : VECTOR [%CHARCOUNT (%ASCIC NAM), BYTE]
		  INITIAL (BYTE (%ASCIC NAM))
		  ALIGN (0);
	PSECT OWN = MOM$MOPDEVTABLE;
	OWN
	    IND : VECTOR [MDT$K_ENTRYLEN, BYTE]
		  INITIAL (BYTE (SYM), LONG (STR))
		  ALIGN (0);
	UNDECLARE STR, IND;
	SWITCHES NOUNAMES;
	%ASSIGN (MOPDEVCNT, MOPDEVCNT + 1);
	PSECT OWN = $OWN$;
    %;
!
! Initialize MOP device table and psects.
!
PSECT
    GLOBAL = MOM$MOPDEVTABLE (NOWRITE, ALIGN (0));

GLOBAL
    MOM$AB_MOPDEVICES : BBLOCKVECTOR [0, MDT$K_ENTRYLEN];

PSECT
    GLOBAL = MOM$MOPDEVNAMES (NOWRITE, ALIGN (0));

GLOBAL
    MOM$AB_MOPDEVNAMES : VECTOR [0, BYTE];

PSECT
    GLOBAL = $GLOBAL$;

COMPILETIME
    MOPDEVCNT = 0;
!
! This table contains the ASCII device name strings associated with a
! given MOP device code.
!
$MOPDEV (NMA$C_SOFD_DMC, 'DMC');
$MOPDEV (NMA$C_SOFD_UNA, 'UNA');
$MOPDEV (NMA$C_SOFD_UNA, 'QNA');
$MOPDEV (NMA$C_SOFD_DUP, 'DUP');
$MOPDEV (NMA$C_SOFD_DU,  'DU');
$MOPDEV (NMA$C_SOFD_DP,  'DP');
$MOPDEV (NMA$C_SOFD_DQ,  'DQ');
$MOPDEV (NMA$C_SOFD_DL,  'DL');
$MOPDEV (NMA$C_SOFD_DA,  'DA');
$MOPDEV (NMA$C_SOFD_DTE, 'DTE');
$MOPDEV (NMA$C_SOFD_KL8, 'KL');
$MOPDEV (NMA$C_SOFD_DMP, 'DMP');
$MOPDEV (NMA$C_SOFD_DMV, 'DMV');
$MOPDEV (NMA$C_SOFD_DPV, 'DPV');
$MOPDEV (NMA$C_SOFD_DMF, 'DMF');


GLOBAL LITERAL
    MDT$GK_MOPDEVCNT = MOPDEVCNT;

!
! Clean up.
!
UNDECLARE
    %QUOTE $MOPDEV;

END						! End of module

ELUDOM

