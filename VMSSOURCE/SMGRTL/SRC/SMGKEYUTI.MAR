	.TITLE	SMG$$KEY_UTIL - Key translation utility procedures
	.IDENT	/1-004/		; File: SMGKEYUTI.MAR Edit: STAN1004

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Run-Time Library Screen Management
;
; ABSTRACT:
;
;	This module contains routines which convert:
;		Terminator sequences to key codes
;		Key names to key codes
;		Key codes to key names
;
; ENVIRONMENT: Runs at any access mode, AST Reentrant
;
; AUTHOR: Steven B. Lionel, CREATION DATE: 24-Feb-1983
;
; MODIFIED BY:
;
; 1-001	- Original. SBL 24-Feb-1983
; 1-002 - Add E1 - E6 as synonyms for editing keys.  SBL 29-Jul-1983
; 1-003 - Add routine to convert codes to names.  SBL 17-Aug-1983
; 1-004 - Make En the main names. STAN 8-Jul-1984.
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
	$SMGDEF			; Get terminator codes
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL		; Force all external symbols to be declared
	.EXTRN	SMG$_INVKEYNAM	; Invalid key name
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;

	K_CTRLZ = 26
	K_ESC = 27
	K_SS3 = 143
	K_CSI = 155

;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;

	.PSECT _SMG$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	Terminator definitions

;+
; Define macros for table generation
;-

	.MACRO	TERM1 SEQ, NAME
	.ASCII	SEQ
	.WORD	SMG$K_TRM_'NAME'
	.ENDM

	.MACRO	TERM2 SEQ, NAME
	.ASCII	SEQ
	.ASCII	"~"
	.WORD	SMG$K_TRM_'NAME'
	.ENDM

	.MACRO	TERM3 SEQ, NAME
	.ASCII	SEQ
	.ASCII	"~"
	.BYTE	0
	.WORD	SMG$K_TRM_'NAME'
	.ENDM

;+
; Terminators of the form <ESC>x
;-

ESC_1BYTE:
	TERM1	"A", UP
	TERM1	"B", DOWN
	TERM1	"C", RIGHT
	TERM1	"D", LEFT
	TERM1	"P", PF1
	TERM1	"Q", PF2
	TERM1	"R", PF3
	TERM1	"S", PF4
	.BYTE	0

;+
; Terminators of the form <CSI>x or <SS3>x
;-

CSI_1BYTE:
	TERM1	"A", UP
	TERM1	"B", DOWN
	TERM1	"C", RIGHT
	TERM1	"D", LEFT
	TERM1	"M", ENTER
	TERM1	"P", PF1
	TERM1	"Q", PF2
	TERM1	"R", PF3
	TERM1	"S", PF4
	TERM1	"l", COMMA
	TERM1	"m", MINUS
	TERM1	"n", PERIOD
	TERM1	"p", KP0
	TERM1	"q", KP1
	TERM1	"r", KP2
	TERM1	"s", KP3
	TERM1	"t", KP4
	TERM1	"u", KP5
	TERM1	"v", KP6
	TERM1	"w", KP7
	TERM1	"x", KP8
	TERM1	"y", KP9
	.BYTE	0

;+
; Terminators of the form <CSI>n~
;-

CSI_2BYTE:
	TERM2	"1", FIND
	TERM2	"2", INSERT_HERE
	TERM2	"3", REMOVE
	TERM2	"4", SELECT
	TERM2	"5", PREV_SCREEN
	TERM2	"6", NEXT_SCREEN
	.WORD	0

;+
; Terminators of the form <CSI>nn~
;-

CSI_3BYTE:
	TERM3	"17", F6
	TERM3	"18", F7
	TERM3	"19", F8
	TERM3	"20", F9
	TERM3	"21", F10
	TERM3	"23", F11
	TERM3	"24", F12
	TERM3	"25", F13
	TERM3	"26", F14
	TERM3	"28", HELP
	TERM3	"29", DO
	TERM3	"31", F17
	TERM3	"32", F18
	TERM3	"33", F19
	TERM3	"34", F20
	.LONG	0		; End of list


	.SBTTL	SMG$$TERM_TO_KEYCODE - Translate terminator to key code
;++
; FUNCTIONAL DESCRIPTION:
;
;	SMG$$TERM_TO_KEYCODE translates a terminator character sequence
;	to a key code.
;
; CALLING SEQUENCE:
;
;	key_code.wl.v = SMG$$TERM_TO_KEYCODE (terminator.rt.r, term_length.rl.v)
;
;
; FORMAL PARAMETERS:
;
	terminator = 4		; The terminator string, passed by reference.

	term_length = 8		; The length of the terminator string, passed
				; by immediate value.

;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION STATUS: 
;
;	The code number of the terminator key, if any.
;	SMG$K_TRM_BUFFER_FULL if terminator length is zero
;	SMG$K_TRM_UNKNOWN if terminator is unrecognized
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	SMG$$TERM_TO_KEYCODE, ^M<R2,R3>

	MOVQ	terminator(AP), R2	; Get terminator address and length
					; into R2 and R3
	SUBL3	#2, R3, R0		; Is length within bounds?
	BLSS	CHECK_SINGLE		; May be a single character
	CMPL	R0, #3			; Must be between 2 and 5 chars
	BGTRU	NOTRANS			; No translation

	MOVZBL	(R2)+, R1		; Get first character
	CMPB	R1, #K_ESC		; Is the first character <ESC>?
	BNEQ	NOT_ESC			; Skip if not
	DECL	R3			; Look at next character
	MOVZBL	(R2)+, R1		;
	CMPB	R1, #^A/[/		; <ESC>[ is the same as <CSI>
	BEQL	USE_CSI			; Skip if it is
	CMPB	R1, #^A/O/		; <ESC>O is the same as <SS3>
	BEQL	USE_SS3			; Skip if it is
	CMPB	R1, #^A/?/		; <ESC>? is <SS3> on VT52s
	BEQL	USE_SS3			; Skip if it is

;+
; We get here if the character following <ESC> does not make it <CSI>
; or <SS3>.  It must then be a single character to look up in ESC_1BYTE.
;-

	DECL	R3			; Look at next character
	BNEQ	NOTRANS			; If not now zero, no translation
	MOVAB	W^ESC_1BYTE, R0		; Get table address
	MOVL	R1, R2			; Load R2 with character
	BRB	SEARCH_1BYTE		; Skip to table search code

;+
; We get here if the first character was not <ESC>.  Check for <CSI> or <SS3>.
;-

NOT_ESC:
	CMPB	R1, #K_CSI		; Is it <CSI>?
	BEQL	USE_CSI			; Skip if it is
	CMPB	R1, #K_SS3		; Is it <SS3>?
	BEQL	USE_SS3			; Skip if it is

;+
; We get here if the terminator has no translation
;-

NOTRANS:
	MOVZWL	#SMG$K_TRM_UNKNOWN, R0	; Unknown terminator
	RET				; Return terminator code

;+
; We get here if the terminator is 0 or 1 characters.
CHECK_SINGLE:
	INCL	R0			; Check for length of 1
	BNEQ	BUFFER_FULL		; If original count was zero, full buffer
	MOVZBL	(R2), R0		; Get terminator byte
	RET				; Return with terminator code
BUFFER_FULL:
	MOVZWL	#SMG$K_TRM_BUFFER_FULL, R0 ; Return buffer full code
	RET

;+
; The terminator starts with <SS3>.
;-

USE_SS3:
	CMPL	R3, #2			; There must be only 1 character
					; following <SS3>.
	BNEQ	NOTRANS			; No translation if not 1 character
	MOVAB	W^CSI_1BYTE, R0		; Use same table as <CSI>.
	MOVZBL	(R2), R2		; Load R2 with character
	BRB	SEARCH_1BYTE		; Use next byte only
	
;+
; The terminator starts with <CSI>.
;-

USE_CSI:
	CMPL	R3, #3			; Are there 1, 2 or >=3 characters
					; after <CSI>? 
	BGTR	SEARCH_3BYTE		; >=3 more bytes
	BEQL	SEARCH_2BYTE		; 2 more bytes
	MOVAB	W^CSI_1BYTE, R0		; 1 more byte
	MOVZBL	(R2), R2		; Load R2 with character

;+
; Use only the next byte to determine the key.  R0 has been loaded with the
; table address and R2 is the byte to look at.
;-

SEARCH_1BYTE:
	MOVZBL	(R0)+, R1		; Get byte to compare against
	BEQL	NOTRANS			; End of table?
	CMPB	R1, R2			; Compare character
	BEQL	FOUND			; End if found
	ADDL2	#2, R0			; Skip over key code
	BRB	SEARCH_1BYTE		; Repeat until found or table end

;+
; Use the next two bytes to determine the key.  (R2) is the word to look at.
;-

SEARCH_2BYTE:
	MOVAB	W^CSI_2BYTE, R0		; Get table address
	MOVZWL	(R2), R2		; Get two bytes from terminator
10$:	MOVZWL	(R0)+, R1		; Get two bytes to compare against
	BEQL	NOTRANS			; End of table?
	CMPW	R1, R2			; Compare characters
	BEQL	FOUND			; End if found
	ADDL2	#2, R0			; Skip over key code
	BRB	10$			; Repeat until found or table end

;+
; Use the next two bytes to determine the key.  (R2) starts the bytes
; to look at.  Note that table CSI_3BYTE uses longword entries with the
; high byte zero.
;-

SEARCH_3BYTE:
	CMPL	R3, #4			; More than 3 bytes after <CSI>?
	BGTR	NOTRANS			; No translation if so
	MOVAB	W^CSI_3BYTE, R0		; Get table address
	EXTZV	#0, #24, (R2), R2	; Get next three bytes
10$:	MOVL	(R0)+, R1		; Get four bytes to compare against
	BEQL	15$			; End of table?
	CMPL	R1, R2			; Compare characters
	BEQL	FOUND			; End if found
	ADDL2	#2, R0			; Skip over key code
	BRB	10$			; Repeat until found or table end

15$:	BRW	NOTRANS

;+
; Translation found.  Store the key code which is in the word addressed by R0
;-
	
FOUND:
	MOVZWL	(R0), R0		; Get key code
	RET

	.SBTTL	List of key names

;+
; KEY_NAME_LIST is a list of all possible key names whose codes are in
; the range 256-383.  This excludes control keys.
; The format of this list is:
;
;		key_code-128	- 1 byte
;		ASCIC key name  - n bytes
;
; This format depends on knowing that no key names with codes higher than
; 383 are defined, that no character between 128 and 255 can
; appear in key names, and that the maximum length of a key name is <32.
;
; This list is used in two ways:
;   1.  To look up a key name (either to see if it is valid or to
;	get the corresponding code), do a MATCHC of the ASCIC key name
;	into KEY_NAME_LIST.  The byte preceding the found entry is the
;	key code minus 128.
;
;   2.  To convert a key code into a name, do a LOCC of the key code into
;	KEY_NAME_LIST.  The ASCIC key name follows the found entry.
;-

;+
; Create macro to add an entry to the list.
;-

	.MACRO	KEY_ENTRY NAME
	.BYTE	<SMG$K_TRM_'NAME' - 128>
	.ASCIC	/NAME/
	.ENDM

KEY_NAME_LIST:
	KEY_ENTRY PF1
	KEY_ENTRY PF2
	KEY_ENTRY PF3
	KEY_ENTRY PF4
	KEY_ENTRY KP0
	KEY_ENTRY KP1
	KEY_ENTRY KP2
	KEY_ENTRY KP3
	KEY_ENTRY KP4
	KEY_ENTRY KP5
	KEY_ENTRY KP6
	KEY_ENTRY KP7
	KEY_ENTRY KP8
	KEY_ENTRY KP9
	KEY_ENTRY ENTER
	KEY_ENTRY MINUS
	KEY_ENTRY COMMA
	KEY_ENTRY PERIOD
	KEY_ENTRY UP
	KEY_ENTRY DOWN
	KEY_ENTRY LEFT
	KEY_ENTRY RIGHT
	KEY_ENTRY F6
	KEY_ENTRY F7
	KEY_ENTRY F8
	KEY_ENTRY F9
	KEY_ENTRY F10
	KEY_ENTRY F11
	KEY_ENTRY F12
	KEY_ENTRY F13
	KEY_ENTRY F14
	KEY_ENTRY HELP
	KEY_ENTRY DO
	KEY_ENTRY F17
	KEY_ENTRY F18
	KEY_ENTRY F19
	KEY_ENTRY F20
	KEY_ENTRY E1
	KEY_ENTRY E2
	KEY_ENTRY E3
	KEY_ENTRY E4
	KEY_ENTRY E5
	KEY_ENTRY E6
	KEY_ENTRY FIND
	KEY_ENTRY INSERT_HERE
	KEY_ENTRY REMOVE
	KEY_ENTRY SELECT
	KEY_ENTRY PREV_SCREEN
	KEY_ENTRY NEXT_SCREEN

KEY_NAME_LIST_LEN = .-KEY_NAME_LIST


	.SBTTL	SMG$$NAME_TO_KEYCODE - Translate key name to key code
;++
; FUNCTIONAL DESCRIPTION:
;
;	SMG$$NAME_TO_KEYCODE translates a key name
;	to a key code.
;
; CALLING SEQUENCE:
;
;	ret_status.wlc.v = SMG$$NAME_TO_KEYCODE (key_name.rt.r, key_code.wl.r)
;
;
; FORMAL PARAMETERS:
;
	key_name = 4	; The address of a counted string (byte count) 
			; containing the name of the key to look up.  It
			; is assumed that the string has been upcased and
			; stripped of trailing blanks.

	key_code = 8	; A longword into which is stored the key code.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION STATUS: 
;
;	1 - Key found
;	0 - Key not found
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	SMG$$NAME_TO_KEYCODE, ^M<R2,R3,R4,R5>
	MOVL	key_name(AP), R4	; Get pointer to ASCIC key name
	MOVZBL	(R4), R5		; Get length in R5, data in (R4)
	INCL	R5			; Add one for the count
	BEQL	10$			; Exit if zero length
	CMPL	R5, #6			; Could it be CTRLx?
	BNEQ	20$			; Skip if not
	CMPL	1(R4), #^A/CTRL/	; Does it start with CTRL?
	BNEQ	20$			; Skip if not
	SUBB3	#^X40, 5(R4), R0	; Convert 5th character to code?
	BLEQ	10$			; Skip if LSS "A'
	CMPL	R0, #K_CTRLZ		; LEQ CTRLZ?
	BLEQU	30$			; Skip if not
10$:	MOVL	#SMG$_INVKEYNAM, R0	; Indicate invalid key name
	RET

20$:	MATCHC	R5, (R4), #KEY_NAME_LIST_LEN, W^KEY_NAME_LIST
					; Look up key name
	BNEQ	10$			; Skip if not found
	SUBL2	R5, R3			; Get back to first name byte
	MOVZBL	-1(R3), R0		; Get code (minus 128)
	ADDL2	#128, R0		; Re-bias code
30$:	MOVL	R0, @key_code(AP)	; Store key code
	MOVL	#1, R0			; Return success
	RET


	.SBTTL	SMG$$KEYCODE_TO_NAME - Translate key code to key name
;++
; FUNCTIONAL DESCRIPTION:
;
;	SMG$$KEYCODE_TO_NAME translates a key code
;	to a key name.
;
; CALLING SEQUENCE:
;
;	ret_status.wlc.v = SMG$$KEYCODE_TO_NAME (key_code.rl.v,
;				key_name_ptr.wa.r)
;
;
; FORMAL PARAMETERS:
;
	key_code = 4	; A longword containing the key code to be converted.

	key_name_ptr = 8; Address of an area to store an ASCIC key name.

;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION STATUS: 
;
;	1 - Key found
;	0 - Key not found
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	SMG$$KEYCODE_TO_NAME, ^M<R2,R3,R4,R5>
	MOVL	key_code(AP), R4	; Get key code
	BEQL	15$			; Not a known code
	CMPL	R4, #26			; Is it CTRLA through CTRLZ?
	BGTRU	10$			; Skip if not
	ADDB3	#^X40, R4, -(SP)	; Build CTRLx on stack (x=A-Z)
	PUSHL	#^A/CTRL/
	MOVB	#5, -(SP)		; Push count
	MOVL	SP, R1			; Put pointer to name in R1
	BRB	CODE_FOUND		; Join common code
10$:	CMPL	R4, #256		; Is it a keypad code?
	BGEQU	20$			; Skip if so
15$:	CLRL	R0			; Key code not found
	RET
20$:	SUBL2	#128, R4		; Compensate for bias in table
	CMPL	R4, #256		; Not a valid code?
	BGEQU	15$			; Skip if not
	LOCC	R4, #KEY_NAME_LIST_LEN, W^KEY_NAME_LIST ; Look for code
	BEQL	15$
	INCL	R1			; R1 now points to key name
CODE_FOUND:
	MOVZBL	(R1), R0		; Get length of string
	INCL	R0			; Add one for count
	MOVC3	R0, (R1), @key_name_ptr(AP) ; Move key name
	MOVL	#1, R0			; Success
	RET


	.END				; End of module SMG$$KEY_UTIL
