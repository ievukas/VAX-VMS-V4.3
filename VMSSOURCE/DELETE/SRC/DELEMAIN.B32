MODULE delemain (	! STARLET Native File Deletion Utility
                        IDENT = 'V04-000',
                        MAIN = del$main,
			ADDRESSING_MODE(EXTERNAL=GENERAL)
                        ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  DELETE
!
! ABSTRACT:
!
!	This utility program deletes one or more user-specified files.
!
! ENVIRONMENT:  
!
!	VAX/VMS operating system, unprivileged user mode utility,
!	operates at non-AST level.
!
! AUTHOR:  Stephen H. Zalewski,		CREATION DATE:  10-Aug-1982
!
! Modified by:
!
!	V03-011	SHZ0014		Stephen H. Zalewski,	15-Mar-1984
!		Modify $PARSE call to parse with no I/O.  Move all wild card
!		defaulting for PURGE into this module.
!
!	V03-010	SHZ0013		Stephen H. Zalewski,	20-Feb-1984
!		Add support for sticky searchlists.
!
!	V03-009	SHZ0012		Stephen H. Zalewski, 	27-Dec-1983
!		Move the defaulting of file name and type for $PURGE into
!		module PURGE.  Make all RMS structures LOCAL instead of GLOBAL.
!
!	V03-008	SHZ0011		Stephen H. Zalewski,	31-Oct-1983
!		Do not modify pointer to new related name related name block.  
!		This is now done in lib$file_scan.
!
!	V03-007	SHZ0010		Stephen H. Zalewski,	25-Feb-1983
!		If user issued a PURGE command with the /LOG qualifier,
!		and no files were purged, issue a message to the user
!		reporting this.
!
!	V03-006	SHZ0009		Stephen H. Zalewski,	11-Feb-1983
!		Changed lib$v_cqf_uic to lib$v_cqf_byowner.
!
!	V03-005	SHZ0008		Stephen H. Zalewski,	29-Oct-1982  20:46
!		Placed all routines formerly residing in DELSPECS.B32 into
!		this module.  Modified delete to use the common qualifier
!		library package.  Use lib$file_scan to do all wildcard
!		processing.
!
!	V03-004	SHZ0007		Stephen H. Zalewski,	6-Sep-1982  18:53
!		Fix bug that incorrectly reported block size of a file.
!
!	V03-003	SHZ0006		Stephen H. Zalewski,	26-Aug-1982  22:23
!		Backout defaulting of version number for DELETE.  Fix bug
!		introduced in SHZ0005 than prevented dangling directory
!		entries from being deleted if the DELETE command was
!		issued with /LOG qualifier.  Finally, if a file is opened
!		because of /SINCE, /BEFORE or /LOG qualifiers being present,
!		leave it open until we actually delete it to optimize
!		the number of FAL jobs necessary to do the job in case
!		we are doing this over the net.
!
!	V03-002	SHZ0005		Stephen H. Zalewski,	10-Aug-1982  21:04
!		Extensive rewrite to use new CLI.  Wild card specs are now
!		supported for /ERASE qualifer.  Info messages for /LOG
!		now contain block size of file and total files deleted/purged
!		are now printed.  Rewrote the way /CONFIRM is done.  Rewrote
!		condition handler.  Explicit version number is no longer
!		needed for DELETE (default is now ";0").  Rewrote error
!		handling routine(s).
!
!	V03-001	SHZ0004		Stephen H. Zalewski,	23-Mar-1982  14:30
!		Have correct version number displayed when /CONFIRM is
!		used and version number is negative or zero.
!
!--

LIBRARY 'SYS$LIBRARY:STARLET.L32';			! VAX/VMS common definitions
REQUIRE	'SRC$:DELETE.REQ';				! COPY literal definitions and macros


FORWARD ROUTINE
    del$main,						! Main DELETE control routine
    delete_file		: NOVALUE,			! Deletes one file
    del$get_cmdqual	: NOVALUE,			! Get command line and parse it
    del$get_file,					! Obtains the input file specification and parses it
    del$search_error:	NOVALUE,			! Error searching for a file.
    condit_handler,					! Condition handler for errors and messages
    del$file_error	: NOVALUE;			! Handles errors on RMS file functions


EXTERNAL ROUTINE
    purge_files,					! Purges files related to one file specification
    purge_ods1_directory,				! Purge an ODS-1 directory lost.
    cli$get_value,					! Get qualifier value
    cli$present,					! Determine if qualifier is present
    lib$cvt_dtb,					! Converts an ASCII string to an integer value.
    lib$file_scan,					! Search wildcard specifications.
    lib$qual_file_match,				! Check to see if a file should be deleted
    lib$qual_file_parse,				! Get common command qualifiers
    lib$set_erase;					! Mark a file for erase-on-delete


EXTERNAL
    version_list,
    lib$_filfaimat,					! File failed to meet criteria
    lib$_quipro;					! Quit processing


GLOBAL
    scan_context	: INITIAL(0),
    del$context,					! Context parameter for RTL routines.
    del$cli_status	: $BBLOCK [4] INITIAL (0),	! DELETE status word used by CLI interface
    del$keepver_val	: INITIAL (1),			! Number of versions to keep during a PURGE.
    del$files_deleted	: INITIAL (0),			! Total number of files purged or deleted
    del$blocks_deleted,					! Total number of blocks deleted
    del$file_size,					! Block size of file being deleted
    del$exit_status	: $BBLOCK [4]			! Holds most severe error code
                          INITIAL (ss$_normal),
    infile_desc		: $BBLOCK [dsc$c_s_bln];	! CLI input file descriptor block



ROUTINE del$main =

!++
! Functional description
!
!	This routine is the central control routine for the DELETE utility.
!	It determines the basic logical flow and calls support routines
!	that perform each logical function in deleting and purging files.
!
! Calling sequence
!
!	del$main ()
!
! Input parameters
!
!	none
!
! Implicit inputs
!
!	none
!
! Output parameters
!
!	none
!
! Implicit outputs
!
!	del$exit_status	- set whenever an error occurs
!
! Routine value
!
!	Most severe error encountered during processing or SS$_NORMAL
!
! Side effects
!
!	The specified files are deleted.
!
!--

BEGIN

LOCAL
    infile_name		: VECTOR [nam$c_maxrss, BYTE],	! File name after open
    infile_xname	: VECTOR [nam$c_maxrss, BYTE],	! File name before open
    infile_fab		: $FAB_DECL,			! Space for the file FAB
    infile_nam_blk	: $NAM (			! File name block:
                                RSA = infile_name,	!    Address and length of the 
                                RSS = nam$c_maxrss,	!       file name after open
                                ESA = infile_xname,	!    Address and length of the 
                                ESS = nam$c_maxrss),	!       file name before open
    infile_xabdat	: $XABDAT (),			!    Date/time XAB
    infile_xabpro	: $XABPRO (NXT = infile_xabdat),!    Protection XAB (date/time XAB chained to this XAB)
    status;						! General routine return code

LABEL
    process_loop;					! Label for file processing loop


ENABLE condit_handler;					! Enable a local handler.

    del$get_cmdqual ();					! Get the command qualifiers.

!
! The remainder of this routine is executed for each
! file specification supplied by the user.
!

    WHILE true DO					! Beginning of repeat loop
process_loop:
	BEGIN
        status = del$get_file (	infile_fab,		! Get a file spec.  Pass the fab,
                                infile_nam_blk,		!    the address of the NAM block,
                                infile_xabpro);		!    and the address of the XAB chain.
        IF .status EQL no_more_files			! If there are no more file specs,
            THEN EXITLOOP;				!    then exit the file spec processing loop.
	IF .status EQL bad_version			! If bad version specified
	    THEN EXITLOOP;				!    then quit.
        IF NOT .status					! If the file specification wasn't okay,
            THEN LEAVE process_loop;			!    then go get the next one.

!
! Perform DELETE or PURGE processing for this file specification.
!

        IF .del$cli_status [del$v_purge_cmd]		! If this is a PURGE command
            THEN  lib$file_scan(infile_fab,		!  then call purge routine with addresses of the FAB and NAM
				purge_files,
				del$search_error,
				scan_context)
            ELSE  lib$file_scan(infile_fab,		!  otherwise delete the files.
				delete_file,
				del$search_error,
				scan_context);

        IF .del$cli_status [del$v_cntrl_z_stop]		! If the user said <control-Z> to a delete confirmation message,
            THEN EXITLOOP;				! then, stop

	IF .version_list NEQ 0				! Make sure all ODS-1 files are purged.
	    THEN purge_ods1_directory(version_list); 	! Delete old versions

	END;						! End of "WHILE 1 DO" file spec processing loop.

!
!  If this was a PURGE, no files were purge, and the user said /LOG, then 
!  notify the user.
!

    IF .del$cli_status[del$v_purge_cmd] AND		! If this was a PURGE command
       (.del$files_deleted EQL 0) AND			!  and no files purged for this file spec,
       .del$cli_status[del$v_log_msg]			!  and /LOG was set
    THEN						!  then
    	put_message(msg$_nofilpurg,1,$descriptor('?'));	!  output message saying so


!
!  If more than one file was DELETED or PURGED, and the user said /LOG, then
!  notify the user of the number of files deleted/purged.
!
    IF .del$cli_status [del$v_log_msg] AND		! If /LOG qualifier present
 	(.del$files_deleted GTR 1)			!  and more thant one file deleted,
    THEN
	put_message (msg$_total,2,.del$files_deleted,	!  then print total number of files deleted.
		 .del$blocks_deleted);


RETURN .del$exit_status OR sts$m_inhib_msg;		! EXIT with no message
END;


ROUTINE delete_file (fab_block) : NOVALUE =

!++
! Functional description
!
!	This routine deletes one file. 
!
!	If the user specified the /CONFIRM qualifier, the name of the file is output to
!	SYS$OUTPUT and the user can advise whether the file is to be deleted or not.
!
! Calling sequence
!
!	delete_file (fab_block.ra.v)
!
! Input parameters
!
!	fab_block	- The FAB block for the file specification
!
! Implicit inputs
!
!	Bits are tested in the status word:
!
!		LOG_MSG		- whether each deletion is to be logged on SYS$OUTPUT.
!
!	Fields in the NAM block are used to log the deletion:
!
!		RSA	- address of the resultant name string
!		RSL	- length of the resultant name string
!
! Output parameters
!
!	none
!
! Implicit outputs
!
!	none
!
! Routine value
!
!	novalue
!
! Side effects
!
!	Errors are signaled.  Files are deleted. 
!
!--
    BEGIN

    MAP
        fab_block	: REF $BBLOCK;

    BIND
        nam_block = .fab_block [fab$l_nam]  : $BBLOCK;	! Associated NAM block address.
                
    LOCAL
        prompt_desc : VECTOR [2],			! String descriptor for prompt args.
	name_desc : VECTOR [2],				! String descriptor for file name.
        status;						! Holds RMS status codes.


    IF .del$cli_status [del$v_cntrl_z_stop]		! If user has responed to /CONFIRM prompt with
	THEN RETURN;					!  CTRL/Z at some point don't delete any more files.
!
! If the /LOG bit is set or OPEN_FILE bit is set, then open the current file to get
! the block size of the file.  An error
! code of RMS-FNF at this point means that we have a dangling directory
! entry "no such file", and we want to delete these if possible.
!

    IF .del$cli_status [del$v_log_msg] OR		! IF /LOG qualifier was given
       .del$cli_status [del$v_open_file]		! or OPEN_FILE bit is set, then open file.
    THEN
	BEGIN
	fab_block [fab$l_alq] = 0;			! Init block size of file to 0 in case $OPEN fails.
        $OPEN (FAB = .fab_block);			! Open the file.
	del$file_size = .fab_block [fab$l_alq];		! Get block size of file (0 if $OPEN failed).
        END;

!
! If the /CONFIRM qualifier was specified, ask the user whether this file
! should be deleted. If the user says no, then just go process the next file.
! Also, if user answers CONTROL/Z stop all processing.
!

    name_desc[0] = .nam_block[nam$b_rsl];		! Make descriptor pointing to related
    name_desc[1] = .nam_block[nam$l_rsa];		!  file name in case /CONFIRM requested.
    prompt_desc[0] = name_desc;
    status = lib$qual_file_match( del$context,		! Context pointer.
				  .fab_block,		! Fab pointer.
				  0,			! No file name.
				  $descriptor('!AS, delete? [N]:'),	! Prompt string.
				  prompt_desc,		! Prompt arguments.
				  0);			! No prompt routine.

    IF NOT .status
    THEN
	BEGIN
    	IF .status EQL lib$_quipro		! If user said CNTRL/Z
    	THEN					!  then stop processing.
	    del$cli_status [del$v_cntrl_z_stop] = TRUE;
    	IF (.status NEQ lib$_quipro) AND	! If user said CNTRL/Z
	   (.status NEQ lib$_filfaimat)		!  or file did not meet criteria
	THEN					!  then do not report an error.
	    del$file_error(msg$_filnotacc,.fab_block);
        $CLOSE ( FAB = .fab_block);		! Ask RMS to close the file.
	RETURN;
	END;

!
! Delete the current file. If /ERASE is requested, mark the file for erase first.
! If the file is open because the /LOG qualifier was requested, just close it
! with the delete bit set. Otherwise simply call RMS to perform the erase function.
! If the erase or delete doesn't work, just return. The calling routine
! will go on to process the next file.
!

    IF .del$cli_status [del$v_erase]			! If erase requested
    THEN 
	BEGIN
	$CLOSE (FAB = .fab_block);			! close the file so we can do it.
	status = lib$set_erase (name_desc);		! do it.
	fab_block[fab$l_sts] = .status;
	fab_block[fab$l_stv] = 0;
	END;

    IF .status
    THEN
	BEGIN
	IF .fab_block [fab$w_ifi] NEQ 0			! If the file is open,
	THEN
	    BEGIN
	    fab_block [fab$v_dlt] = TRUE;		!  then set the deletion bit,
	    status = $CLOSE ( FAB = .fab_block);	!  and ask RMS to close and delete the file.
	    fab_block [fab$v_dlt] = FALSE;		! Turn off the delete bit to avoide side effects.
	    END
	ELSE
	    status = $ERASE ( FAB = .fab_block);	! Erase the file.
	END;

    IF NOT .status					! If the ERASE function fails
    THEN
	BEGIN
        del$file_error ( msg$_filnotdel, .fab_block);	!  then report an error to the user,
	$CLOSE (FAB=.fab_block);			!  close the file quietly
	RETURN;						!  and return.
	END;

!
! If the /LOG qualifier was given, report the deletion.
!

    IF .del$cli_status [del$v_log_msg]
    THEN						! If successful deletion and logging going on,
        BEGIN						!    then report the deletion.
	del$blocks_deleted = .del$blocks_deleted + .del$file_size; ! Keep running total of blocks deleted
	del$files_deleted = .del$files_deleted + 1;	! Increment "number of files deleted" counter
        put_message (					! and output the message.
                        msg$_fildel,			!    This is the message number,
                        2,				!    two arguments coming, which are
                        name_desc,			!    the file name descriptor and
			.del$file_size);		!  the block size of the file.
        END;

    END;


ROUTINE del$get_cmdqual :  NOVALUE =

!++
! Functional description:
!
!	This routine calls the CLI to obtain the command line. Then the routine
!	obtains the command-level qualifiers (i.e., options) from the
!	Command Language Interpreter.
!
! Calling sequence:
!
!	del$get_cmdqual ()
!
! Input parameters
!
!	none
!
! Output parameters
!
!	none
!
! Implicit outputs
!
!	DEL$CLI_STATUS	- Relevant command and qualifier indicators set by CLI.
!			  PURGE_CMD flag set if this was a PURGE command.
!
! Routine value
!
!	novalue
!
!--

BEGIN

LOCAL
    bitmap,						! Contains map of qualifiers requested
    status,
    char;						! Holds one character

CH$FILL(0, dsc$c_s_bln, infile_desc);			! Make descriptor dynamic
infile_desc[dsc$b_class] = dsc$k_class_d;

!
! Determine whether this is a DELETE or a PURGE command and get qualifers.
!

cli$get_value($descriptor('$VERB'),infile_desc);	! Get command
IF (CH$RCHAR(.infile_desc [dsc$a_pointer]) EQL 'P')	! If first letter is P
THEN
    BEGIN
    del$cli_status[del$v_purge_cmd] = true;		! Note that this is a PURGE command
    del$cli_status[del$v_keep] = 	cli$present($descriptor('KEEP'));
    END;

del$cli_status[del$v_erase] =		cli$present($descriptor('ERASE'));
del$cli_status[del$v_log_msg] =		cli$present($descriptor('LOG'));
del$cli_status[del$v_conf_prompt] =	cli$present($descriptor('CONFIRM'));


IF .del$cli_status [del$v_keep]			! /KEEP present, so get its value
THEN
    BEGIN
    cli$get_value($descriptor('KEEP'), infile_desc); 
    status = lib$cvt_dtb(.infile_desc [dsc$w_length],	! Move value into Global variable
		.infile_desc [dsc$a_pointer], del$keepver_val);
    IF NOT .status OR (.del$keepver_val LEQ 0)	! If value is LEQ 0 then
    THEN					!  report an error.
	SIGNAL (msg$_badvalue,1,infile_desc);
    END;


bitmap= lib$m_cqf_confirm  OR  lib$m_cqf_exclude  OR	! Bitmap of qualifiers
     	lib$m_cqf_before   OR  lib$m_cqf_since    OR	!  that the common qualifier
     	lib$m_cqf_created  OR  lib$m_cqf_modified OR	!  package is to check for.
     	lib$m_cqf_expired  OR  lib$m_cqf_backup   OR
     	lib$m_cqf_byowner;

IF NOT (status = lib$qual_file_parse(bitmap,del$context))	! Get common qualifiers
THEN
    SIGNAL_STOP(.status);

!
! If any of the following qualifers were specified, then always open the file
! when we process it.  This is an optimization to cut down on the number of
! $OPEN's and $CLOSE's that must be done to delete or purge a file.
!
IF  cli$present($descriptor('BEFORE')) OR cli$present($descriptor('EXCLUDE'))
 OR cli$present($descriptor('SINCE'))  OR cli$present($descriptor('BY_OWNER'))
THEN del$cli_status[del$v_open_file] = TRUE;

END;


ROUTINE del$get_file (fab_block, nam_block, xab_chain) =

!++
! Functional description:
!
!	This routine gets an file specification and all
!	related qualifiers from the Command Language Interpreter. Then
!	the file specification is parsed.
!
!	If no more input specifications are available, this routine just
!	returns successfully.
!
! Input parameters:
!
!	fab_block	- the FAB to use for this specification
!	nam_block	- the NAM to use for this specification
!	xab_chain	- the appropriate XAB block's
!
! Implicit inputs:
!
!	infile_desc	- CLI block for file specifications
!
! Output parameters:
!
!	none
!
! Implicit outputs:
!
!	The fields of the FAB and the NAM block are filled in according
!	to the CLI call and the $PARSE function call.
!
! Routine value:
!
!	TRUE		- success
!	NO_MORE_FILES	- success, no more file specifications
!	NO_FILE		- failure
!
!--

    BEGIN

    MAP
 	fab_block	: REF $BBLOCK,			! FAB to use with file
        nam_block	: REF $BBLOCK;			! NAM to use with file

    LOCAL
	status;

!
! Get a file specification from the Command Language Interpreter.
!

    IF NOT cli$get_value($descriptor('INPUT'), infile_desc)	! If no more file specs are coming,
    THEN							!  then return successfully, without a file.
	RETURN no_more_files;

    $FAB_INIT (						! Setup the file FAB as follows:
                FAB = .fab_block,			!    FAB address is the input parameter.
                FAC = <GET>,				!    Input file.
		DNS = 0,				!    No default file specification.
	    	FNA = .infile_desc [dsc$a_pointer],	!    Move the file name address
    		FNS = .infile_desc [dsc$w_length],	!     and length into the file FAB block.
                FOP = <NAM>,				!    Open by name block.
                NAM = .nam_block,			!    NAM block address.
                XAB = .xab_chain);			!    XAB block address.

!
! Call RMS $PARSE function to parse the file specification. This resolves logical names and
! determines if there are wildcards present, or explicit named fields present.
!

    nam_block[nam$v_synchk] = true;
    status = $PARSE ( FAB = .fab_block);		! Call the RMS file-spec parsing routine,
    nam_block[nam$v_synchk] = false;
    IF NOT .status
    THEN
 	BEGIN						! If unsuccessful then
	del$file_error (msg$_filnotdel, .fab_block);	!  signal an error and
	RETURN no_file;					! Return an error to the caller.
	END;


!
! Don't allow version number specification for a PURGE command.  If the file
! name and file type were not specified on the PURGE command, default to 
! "*.*".  In any case, always add a version ';*'.  A DELETE command,
! to the contrary, requires an explicit or wildcard version number. 
!

    IF .del$cli_status [del$v_purge_cmd]		! If this is a PURGE command,
    THEN
        BEGIN
        IF .nam_block [nam$v_wild_ver] OR		!   then look for version number
            .nam_block [nam$v_exp_ver]			!   specification.
        THEN
            BEGIN
            put_message (msg$_purgever);		! If present, signal an error,
            RETURN bad_version;				!   and return an error status code.
            END;

	IF  NOT .nam_block[nam$v_exp_name]		! If file name missing
	AND NOT .nam_block[nam$v_wild_name]
	AND NOT .nam_block[nam$v_exp_type]		! and file type missing
	AND NOT .nam_block[nam$v_wild_type]
	THEN
	    BEGIN					! THEN
	    fab_block[fab$l_dna] =			! Substitute defaults
		UPLIT BYTE (%ASCII '*.*;*');
	    fab_block[fab$b_dns] = 5;
	    END
	ELSE
	    BEGIN
	    fab_block [fab$l_dna] = UPLIT(';*');	! Set default name string to ';*'
	    fab_block [fab$b_dns] = 2;
	    END;
        END
    ELSE
        BEGIN						! However, is this is a DELETE command
        IF  NOT  .nam_block [nam$v_wild_ver] AND	!   and an explicit or wildcard version
            NOT  .nam_block [nam$v_exp_ver] AND		!   number is not present,
            NOT (.nam_block [nam$v_quoted] AND		!   and the file specification
	         .nam_block [nam$v_node])		!   is not a network quoted filespec
        THEN
            BEGIN
            put_message (msg$_delver);			!   then signal an error,
            RETURN bad_version;				!   and return an error status code.
            END;
        END;

    RETURN true;					! Return a success code
    END;



GLOBAL ROUTINE del$search_error (fab_block) : NOVALUE =

!++
! Functional description:
!
!	This routine reports an error as a result of searching for the
!	next file to be deleted.
!
! Calling sequence:
!
!	delete_error (fab_block.ra.v)
!
! Input parameters:
!
!	fab_block	- the FAB associated with the file
!
! Implicit inputs:
!
!	none
!
! Output parameters:
!
!	none
!
! Implicit outputs:
!
!	none
!
! Routine value:
!
!	none
!
! Side effects:
!
!	none
!
!--

    BEGIN

    del$file_error(msg$_searchfail,.fab_block);		! Report specified RMS error.

    END;


GLOBAL ROUTINE del$file_error (message_id, fab_block) : NOVALUE =

!++
! Functional description
!
!	This RMS error action routine sends an error message to the user.
!
! Calling sequence
!
!	del$file_error (message_id.rv, fab_block.ra.v)
!
! Input parameters
!
!	message_id	- The message code for the message to send.
!	fab_block	- Address of the FAB block of the file for which the error occurred
!
! Implicit inputs
!
!	The associated NAM block.
!
!	INFILE_DESC	- the CLI data block for the parameter
!
! Output parameters
!
!	none
!
! Implicit outputs
!
!	none
!
! Routine value
!
!	novalue
!
! Side effects
!
!	none
!
!--

    BEGIN

    MAP
        fab_block	: REF $BBLOCK;

    BIND
        nam_block = .fab_block [fab$l_nam]  : $BBLOCK;	! Associated NAM block address

    LOCAL
        name_desc	: VECTOR [2];			! String descriptor for the file name

!
! Fill in the file name descriptor with the most complete name possible.
!

    IF .nam_block [nam$b_rsl] NEQ 0			! If a resultant name string exists,
    THEN						!
	BEGIN						!
	name_desc [0] = .nam_block [nam$b_rsl];		! then fill in the resultant name length
	name_desc [1] = .nam_block [nam$l_rsa];		! and address.
	END
    ELSE
	IF .nam_block [nam$b_esl] NEQ 0			! If RMS created an expanded string
	THEN						! but couldn't open the file,
	    BEGIN					!
	    name_desc [0] = .nam_block [nam$b_esl];	! then fill in the expanded name length
	    name_desc [1] = .nam_block [nam$l_esa];	! and address.
	    END
	ELSE						! Otherwise, no RMS name information is available.
	    BEGIN
	    name_desc [0] = .infile_desc [dsc$w_length];! So use the file name length
	    name_desc [1] = .infile_desc [dsc$a_pointer];! and length passed by the CLI.
	    END;

!
! Signal the error condition.
!

    SIGNAL (						! Signal error with the following arguments:
            .message_id,				!    the message identifier,
            1,						!    the number of message arguments,
            name_desc,					!    the address of input name descriptor,
            .fab_block [fab$l_sts],			!    the primary RMS completion code,
            .fab_block [fab$l_stv]);			!    and the scondary RMS completion code.


    END;


ROUTINE condit_handler (signal_array, mechan_array) =

!++
! Functional description
!
!	This routine is the condition handler for the main routine.  It
!	saves the most severe condition as the exit status.
!
! Calling sequence
!
!	condit_handler (signal_array.ra.v, mechan_array.ra.v)
!
! Input parameters
!
!	signal_array	- the address of the signal array for the condition
!	mechan_array	- the address of the mechanism array for the condition
!
! Implicit inputs
!
!	The PURGE_CMD flag in DEL$CLI_STATUS tells whether a DELETE or a PURGE command
!		caused this error.
!
! Output parameters
!
!	none
!
! Implicit outputs
!
!	DEL$EXIT_STATUS	-  Contains the most severe status encountered.
!
! Routine value
!
!	SS$_RESIGNAL
!
! Side effects
!
!	none
!
!--

BEGIN

MAP
    signal_array	: REF $BBLOCK;

BIND
    signame = signal_array [chf$l_sig_name] : $BBLOCK;	! Get the condition name


!
! Update the "most severe error" if the current error is more severe.
!

IF
    NOT .signame					! If an error signal
    AND ((.signame[sts$v_severity]			! and severity is worse
	GTRU .del$exit_status[sts$v_severity])
	OR .del$exit_status[sts$v_severity])		! or no errors yet
THEN
    del$exit_status = .signame;				! then save it for exit

!
! If facility number is not that of DELETE (147), then this is a system message, so just resignal.
! If this is a PURGE command, then signal with the PURGE facility number
! instead of the DELETE facility number (DELETE is the default prefix).
!

IF .signame [sts$v_fac_no] EQL 147			! If facility code says DELETE,
  AND .del$cli_status [del$v_purge_cmd]			!  but this is a PURGE command,
THEN
    signame [sts$v_fac_no] = 148;			!  then signal with PURGE instead of DELETE facility number

RETURN SS$_RESIGNAL;					! Resignal to get message
END;


END
ELUDOM
