	$BEGIN	RM0IFISI,000,RM$RMS0,<IFAB AND IRAB INDEX TABLE ROUTINES>,-
						<NOWRT,QUAD>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS32
;
; Abstract:
;		This module contains the routines to allocate
;		ifab and irab index table slots and to return
;		the ifab or irab address from an ifi or isi
;		value respectively.
;
; Environment:
;		Star processor running Starlet exec.
;
; Author: L. F. Laverdure	Creation Date: 3-JAN-1977
;
; Modified By:
;
;	V03-005	LJA0050		Laurie J. Anderson	12-Jan-1983
;		Fill in IFI/ISI field in IFB/IRB upon finding slot in
;		table.
;		Move popping of R6 (on restart) in rm$gtslt.  If error, on
;		restart, R6 was not restored.
;
;	V03-004	LJA0024		Laurie Anderson		05-Oct-1982
;		Fix some problems with restarting when the IFI/ISI is large
;		enough to cause the allocation of a chain of index tables.
;
;	V03-003	LJA0018		Laurie Anderson		03-Sep-1982
;		To enable the restart to re-open/re-connect to same IFI/ISI,
;		modify RM$GTSLT.  If provided with an IFI/ISI on input, then
;		use that one rather than the next available empty slot.
;		If that slot can not be provided, then return an error.
;
;	V03-002	KBT0305		Keith B. Thompson	28-Aug-1982
;		Reorganize psects
;
;	V03-001	KBT0102		Keith B. Thompson	13-Jul-1982
;		Clean up psects
;
;	V02-013	CDS0001		C Saether		10-Dec-1981
;		Rename psect.
;
;	V02-012	REFORMAT	K. E. Kinnear		31-Jul-1980	8:51
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$FABDEF
	$RABDEF
	$IFBDEF
	$IRBDEF
	$IMPDEF
	$PSLDEF
	$RMSDEF

;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RM$GTIADR - INDEX TO TABLE ADDRESS CONVERSION ROUTINE

;++
; RM$GTIADR -- Index to Table Address Conversion Routine.
;
;  This subroutine converts an ifi or isi table index value
;  into the address of the related ifab or irab respectively.
;
; Calling sequence:
;
;	BSBW	RM$GTIADR
;
; Input Parameters:
;
;	R11	image impure area address
;	R9	index value (ifi or isi)
;	R7	mode of caller (only if ifi or isi indicates direct
;				access to a process permanent file)
;	R0	IFAB or IRAB index table offset / 4
;
; Implicit Inputs:
;
;	none
;
; Output Parameters:
;
;	R9	IFAB or IRAB address
;	R0	destroyed
;
;    if ifi or isi < 0 and not user mode:
;
;	R11	process i/o impure area addr
;
; Implicit Outputs:
;
;	none
;
; Completion Codes:
;
;	Z-bit set if invalid ifi or isi, clear otherwise.
;
; Side Effects:
;
;	none
;
;--

RM$GTIADR::
	TSTW	R9			; non-standard ifi/isi?
	BLEQ	50$			; branch if ppf format or zero
5$:	MOVL	(R11)[R0],R0		; get table addr
10$:	CMPW	R9,IMP$W_ENTPERSEG(R11)	; in this table segment?
	BGTRU	30$			; branch if not
	MOVL	(R0)[R9],R9		; set ifab/irab addr
					;  note: may be zero.
	RSB

;
;  The input ifi/isi value does not map to this segment
;  of the index table  -  try the next segment.
;

30$:	SUBW2	IMP$W_ENTPERSEG(R11),R9	; reduce the index value
	MOVL	(R0),R0			; get link to next table seg
	BNEQ	10$			; and keep trying, if any more
40$:	RSB				; return with z-bit set

;
;  A negative isi or ifi has been input.
;
;  2 valid cases exist, depending upon the state of bit 14:
;	- (bit 14=0) - a non-user mode caller desires to operate
;		       on the ppf directly
;	- (bit 14=1) - a caller desires to operate on the ppf indirectly
;
;  If access allowed switch to the process permanent files ifab or
;  irab table in the process i/o segment.
;

50$:	BEQL	40$			; branch if zero ifi/isi (error)
	BBS	#FAB$V_PPF_IND,R9,55$	; branch if indirect access
	CMPB	R7,#PSL$C_USER		; direct access attempt from user mode?
	BEQL	60$			; error if user
55$:	MOVAL	@#PIO$GW_PIOIMPA,R11	; switch impure pointers
	BICW2	#<<1@RAB$V_PPF_RAT>-1> \ <<1@16>-1>,R9; clear all but table index
	BNEQ	5$			; and continue if non-zero

;
;  User attempting direct access to a process permanent file
;  or has a bad isi value.
;

60$:	CLRL	R9			; it's a no-no
	RSB

	.SBTTL	RM$GTSLT - INDEX TABLE SLOT ALLOCATION ROUTINE

;++
; RM$GTSLT -- Index Table Slot Allocation Routine.
;
;  This routine scans the ifab or irab index table for
;  an empty slot and if found sets the slot to the associated
;  ifab or irab address, returning the index value of the slot.
;
;  If an IFI/ISI is provided on input, this routine will attempt to
;  allocate that slot in the IFAB/IRAB index table.  If that slot is
;  not available (due to DME or slot already in use), then an error is
;  returned.
;
;  Calling Sequence:
;
;	BSBW	RM$GTSLT
;
;  Input Parameters:
;
;	R11	process or image impure area address
;	R9	IFAB or IRAB address
;	R5	IFAB or IRAB index table start address
;
;  If this is a restart operation, the following additional inputs:
;	R6	IFI/ISI (the desired particular slot)
;
;  Implicit Inputs:
;
;	none
;
;  Output Parameters:
;
;	R6	table index value (i.e., ifi or isi)
;	R0	status code
;	R1,R2,R3,R4,R5 destroyed
;
;  Implicit Outputs:
;
;	The allocated table slot is set to the contents of r9.
;
;  Completion Codes:
;
;	Standard RMS, in particular, success or dme.
;
;  Side Effects:
;
;	none
;
;--

RM$GTSLT::
	ASSUME	IFB$V_RESTART EQ IRB$V_RESTART
	BBS	#IFB$V_RESTART,(R9),23$	; Branch if restart operation
	CLRL	R6			; build index value here
10$:	ADDL3	#4,R5,R1		; R1 points to first table entry,
					;  while saving R5 - pointing to link
	MOVZWL	IMP$W_ENTPERSEG(R11),R0	; # entries per table segment
20$:	INCL	R6			; bump index
	TSTL	(R1)+			; zero slot?
	BEQL	50$			; branch if yes - go use it
	SOBGTR	R0,20$			; keep scanning segment

;
;  No free slots this table segment  -  try next if any.
;

	TSTL	(R5)			; another segment?
	BEQL	30$			; branch if none
	MOVL	(R5),R5			; update link
	BRB	10$
;
;  If this is a restart operation, attempt to allocate the same slot in the
;  index table.
;

23$:	PUSHL	R6			; Save the desired IFI/ISI
	ADDL3	#4,R5,R1		; R1 points to first table entry,
					;  while saving R5 - pointing to link
25$:	CMPW	R6,IMP$W_ENTPERSEG(R11)	; Is this IFI/ISI in this table segment?
	BGTRU	30$			; Branch if not in this segment
	TSTL	(R5)[R6]		; Is this slot already being used?
	BNEQ	ERRRST			; Used - return error
	MOVL	R9,(R5)[R6]		; Put IFAB/IRAB address in table slot
	INCW	IMP$W_NUM_IFABS(R11)	; count # ifabs in use
	BRB	60$			; Return success
;
; Had to allocate more table segment space.  See if index maps into this segment
;

27$:	SUBW2	IMP$W_ENTPERSEG(R11),R6	; reduce the index value
	MOVL	(R5),R5			; Update the index table links
	BRB	25$			; try next table segment



;
;  No free slots in existing segments.
;  If process i/o segment, return an error, otherwise
;  add a segment to the table.
;

	ASSUME	IMP$W_RMSSTATUS EQ 0
	ASSUME	IMP$V_IIOS EQ 0

30$:	BLBC	(R11),ERRDME		; branch if pio segment
	MOVAL	@#PIO$GL_IIOFSPLH,R1	; impure area addr
	MOVZWL	IMP$W_ENTPERSEG(R11),R2	; # entries
	INCL	R2			; +1 = # longwords
	ASHL	#2,R2,R2		; = # bytes required
	BSBW	RM$GETSPC_ALT		; get this much space
	BLBC	R0,RETURN		; branch if no space

;
;  Link in the new segment (address of space returned in R1 by get_spc)
;  and go back and use it.
;

	MOVL	R1,(R5)			; update the old link 
	ADDL2	#4,R1			; and point R1 to the table
	BBS	#IFB$V_RESTART,(R9),27$	; Branch if restart
	BRB	20$			; and go use it

;
;  Found a free slot.
;  Store the IFAB or IRAB address in the slot and return.
;  Store the IFI/ISI value into the IFAB/IRAB
;

50$:	MOVL	R9,-(R1)		; store structure address
	INCW	IMP$W_NUM_IFABS(R11)	; count # ifabs in use

;
;  Flag the ifi or isi value if this is the process i/o segment.
;

	ASSUME	IMP$W_RMSSTATUS EQ 0
	ASSUME	IMP$V_IIOS EQ 0

	BLBS	(R11),60$		; branch if image i/o segment
	SSB	#15,R6			; set pio segment flag
60$:	
	ASSUME	IFB$W_IFI EQ IRB$W_ISI
	RMSSUC
RETURN:
	BBC	#IFB$V_RESTART,(R9),80$	; If not restarting, do not pop
	POPL	R6			; Restore the IFI/ISI
80$:	MOVB	R6,IFB$W_IFI(R9)	; Fill in IFI/ISI value into IFAB/IRAB
	TSTL	R0			; Set condition code for return
	RSB

;
;  Couldn't allocate another page for new IRAB or IFAB
;  table segment because in process i/o segment.
;

ERRDME:
	RMSERR	DME
	BRB	RETURN			; return - restore R7 first

;
; Indicate that the index table slot has already been used.
;
ERRRST:
	ASSUME	<IFB$C_BID&1> EQ 1		;  in case it's really irab
	ASSUME	<IRB$C_BID&1> EQ 0
	ASSUME	IFB$B_BID EQ IRB$B_BID
	BLBS	IFB$B_BID(R9),100$		; Do we have a ifab or irab
	RMSERR	ISI				; IRAB - Indicate ISI error
	BRB	RETURN				; return - restore R7 first
100$:	RMSERR	IFI				; IFAB - Indicate IFI error
	BRB	RETURN				; return - restore R7 first

	.END
