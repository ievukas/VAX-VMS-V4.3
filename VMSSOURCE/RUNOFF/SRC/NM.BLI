%TITLE 'Processes the various .NUMBER directives.'
MODULE nm     (	IDENT = 'V04-000'
		%BLISS32[,ADDRESSING_MODE (EXTERNAL    = long_relative,
					   NONEXTERNAL = long_relative)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Processes .NUMBER PAGE,	.NUMBER SUBPAGE,
!		      .NUMBER INDEX,	.NUMBER CHAPTER,
!		      .NUMBER APPENDIX, .NUMBER LIST, and
!		      .NUMBER LEVEL commands.
!
!	    Also, for DSRPLUS:
!		      .NUMBER EXAMPLE,	.NUMBER FIGURE, and
!		      .NUMBER TABLE.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	CREATION DATE:	June, 1978
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	014	REM00014	Ray Marshall	27-April-1983
!		Almost complete redesign of the logic that processes the
!		  .NUMBER APPENDIX and .NUMBER CHAPTER directives.  This was
!		  done to decouple these directives from the .APPENDIX and
!		  .CHAPTER directives.  The result herein was a significant
!		  reduction in code.
!
!	013	KAD00013	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! EXTERNAL REFERENCES:
!
EXTERNAL

    ECC		: $ECC_BLOCKVECTOR,
    FS01	: FIXED_STRING,
%IF DSRPLUS %THEN
    FLGT	: FLGT_DEFINITION,
%FI
    GCA		: GCA_DEFINITION,
    HCT		: HCT_DEFINITION,
    HLLIST	: COUNTED_LIST,
    IRA		: FIXED_STRING,
%IF DSRPLUS %THEN
    khar,
%FI
    LSTCNT	: REF COUNTED_LIST,
    NMLST	: NUMBER_LIST,
    NPAGEN	: PAGE_DEFINITION,
    NUMPRM	: NUMPRM_DEFINE,
    PAGEN	: PAGE_DEFINITION,
    PHAN	: PHAN_DEFINITION;

EXTERNAL LITERAL 				! Error messages
    RNFILC,
    RNFINM;

EXTERNAL ROUTINE
%IF DSRPLUS %THEN
    GETSUB,
%FI
    GETLET,
    CONVLB,
    ERMA,
    GLNM,
    GSLU,
    RSKIPS;


%SBTTL 'NM -- main routine'
GLOBAL ROUTINE nm (HANDLER_CODE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See the ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	HANDLER_CODE - Indicates which command is to processed.
!
! IMPLICIT INPUTS:
!
!	NUMPRM - Contains a number, as processed by GETNUM.
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN

    ! Except for .NUMBER LIST, .NUMBER LEVEL, and .NUMBER RUNNING, all these
    ! directives turn on page numbering on the next page, at the latest.

    IF  (.HANDLER_CODE NEQ H_NUMBER_LIST)  AND
	(.HANDLER_CODE NEQ H_NUMBER_LEVEL) AND
	(.HANDLER_CODE NEQ H_NUMBER_RUNNIN)
    THEN
	BEGIN
	HCT_NMPG_NP = TRUE;

	! At the top of the first page, or in the middle of a page
	! turn on page numbering immediately.

	IF .PHAN_TOP_FIRST OR NOT .PHAN_TOP_PAGE
	THEN
	    HCT_NUMBER_PAGE = TRUE;
	END;

    ! Process the specified command.
    SELECTONE .HANDLER_CODE OF
	SET

	[H_NUMBER_APPEND, H_NUMBER_CHAPTE] :
	    BEGIN

	    LOCAL
		section_number;

	    ! Ignore command if an illegal number was given.
	    IF NOT .num_result
	    THEN
		RETURN;

	    section_number = 0;

	    ! Try to get a string of letters if the user didn't supply a number.
	    IF .num_length EQL 0
	    THEN
    		BEGIN
%IF DSRPLUS %THEN
    		IF (.khar EQL .flgt [sub_flag, flag_character]) AND 
    		   .flgt [sub_flag, flag_enabled]
    		THEN
    		    getsub (ira, num_value, num_length, true)
    		ELSE
%FI
    		    getlet(ira, num_value, num_length);
    		END;

	    section_number = .num_value;

	    IF (.section_number EQL 0) AND
		(.num_length EQL 0)
	    THEN
		! User said .NUMBER APPENDIX or .NUMBER CHAPTER and he didn't
		! specify a number.  So he's effectivally said nothing new,
		! so return.
		RETURN;

	    ! Distinguish between an absolute setting and an adjustment.
	    IF .NUM_SIGN
	    THEN
		BEGIN		! User gave an adjustment.
		IF .handler_code EQL h_number_append THEN
		    section_number = ecc [append_offset, ecc$h_counter] + .section_number
		ELSE
		    section_number = ecc [chap_offset, ecc$h_counter] + .section_number;
		IF .section_number LSS 0 THEN section_number = 0
		END;


	    IF .handler_code EQL h_number_append
	    THEN
		ecc [append_offset, ecc$h_counter] = .section_number - 1
	    ELSE
		ecc [chap_offset, ecc$h_counter] = .section_number - 1;

	    END;

	[H_NUMBER_INDEX] :
	    BEGIN
	    ! NOTE:  It is sufficient to set SCT_TYP as shown to get the
	    !	     page numbering to be done correctly.  However, SCT_NUMBER
	    !	     must be cleared if PAGEQL is not to screw up later.

	    IF .PHAN_TOP_FIRST
	    THEN
		! At top of first page this takes effect immediately.
		BEGIN
		PAGEN [SCT_NUMBER] = 0;
		PAGEN [SCT_TYP]    = SCT_INDEX;
		END;

	    NPAGEN [SCT_NUMBER] = 0;
	    NPAGEN [SCT_TYP]    = SCT_INDEX;
	    END;

	[H_NUMBER_LEVEL] :
	    BEGIN
	    ! Get no more numbers than there are header levels.
	    GLNM (.HLLIST [CL_MAX_INDEX]);

	    INCR I FROM 1 TO .NMLST_COUNT DO
		BEGIN
		HLLIST [CL_INDEX] = .I;

		CASE .NMLST_DESCR (.I) FROM 0 TO 4 OF
		    SET

		    [NM_BAD] :
			0;

		    [NM_UNSIGNED] :
			HLLIST [.I] = .NMLST_VALUE (.I);

		    [NM_NULL] :
			0;

		    [NM_PLUS, NM_MINUS] :

			IF HLLIST [.I] + .NMLST_VALUE (.I) GEQ 0
			THEN
			    HLLIST [.I] = .HLLIST [.I] + .NMLST_VALUE (.I)
			ELSE
			    ERMA (RNFINM, FALSE);

		    TES;

		END;

	    HLLIST [.HLLIST [CL_INDEX]] = .HLLIST [.HLLIST [CL_INDEX]] - 1;
	    END;

	[H_NUMBER_LIST] :
	    BEGIN
	    LOCAL
		LIST_DEPTH;
	    ! Set up defaults.  It's ok to have no numbers,
	    ! so that will never get checked for.
	    NMLST_DESCR (1) = NM_NULL;
	    NMLST_DESCR (2) = NM_NULL;
	    GLNM (2);				! Now get parameters

	    ! Sort out the following command formats:
	    ! .NMLS
	    ! .NMLS 1,2
	    ! .NMLS foobar
	    ! .NMLS 2
	    ! .NMLS ,foobar
	    ! .NMLS 1,foobar
	    ! .NMLS 1 foobar
	    ! All the various formats will be put into the "two parameter" format.

	    ! This code checks to see if the GLNM scan stopped at character string foobar.
	    ! The reason for this is that the number list scanning stops when it doesn't find a number.
	    ! We want to allow the user to specify a letter string as a counter in this command.

	    IF (.NMLST_COUNT EQL 0)  OR	! Found absolutely nothing resembling a number. MIGHT be .NMLS foobar
		(.NMLST_COUNT EQL 1)  OR	! Might be .NMLS 1 foobar i.e., missing comma.
		((.NMLST_COUNT EQL 2) AND	! There were two arguments given, but
		(.NMLST_DESCR (2) EQL NM_NULL))	! couldn't locate the second number. Might be .NMLS 1, foobar
	    THEN
		! Check to see if the reason nothing was found is that
		! a string of letters was given as a counter, instead of just a number.
		BEGIN
		FS_INIT (FS01);			! Initialize temporary fixed string.

		! Now, try to get a string of letters

		IF GSLU (IRA, FS01) EQL GSLU_NORMAL
		THEN
		    ! Guessed right!  The user gave a string of letters as a counter.
		    ! Now convert to their numerical equivalent.
		    BEGIN
		    NMLST_VALUE (2) = CONVLB (.FS_START (FS01), .FS_LENGTH (FS01));
		    ! Fake out the following code by telling it two arguments were given.
		    NMLST_DESCR (2) = NM_UNSIGNED;
		    NMLST_COUNT     = 2;
		    END;

		END;

	    ! At this point we've sorted out the following .NMLS dialects
	    ! .NMLS (no arguments)
	    ! .NMLS ,(no arguments)
	    ! .NMLS foobar
	    ! .NMLS ,foobar
	    ! .NMLS 1,foobar
	    ! .NMLS 1 foobar
	    ! .NMLS 1,2
	    ! For all those cases, the value the next .LE command is to generate, if given,
	    ! is in NMLST_VALUE (2), and the list depth is in NMLST_VALUE (1).

	    ! Check for just a single number, nothing following.

	    IF .NMLST_COUNT EQL 1
	    THEN
		! Move the counter to the second position.
		BEGIN
		NMLST_VALUE (2) = .NMLST_VALUE (1);
		NMLST_DESCR (2) = .NMLST_DESCR (1);
		NMLST_DESCR (1) = NM_NULL;		! Cause the following code to ignore first argument.
		END;

	    ! At this point all the valid variations of .NMLS have been sorted out
	    ! and the arguments have been put in NMLST_VALUE (1) and NMLST_VALUE (2).
	    ! From this point on, RUNOFF thinks the user said .NMLS n,m.

	    ! Process first parameter, that indicates which
	    ! list element counter is being set.
	    CASE .NMLST_DESCR (1) FROM 0 TO 4 OF
		SET

		[NM_BAD] :
		    RETURN;

		[NM_PLUS, NM_MINUS] :
		    NMLST_VALUE (1) = .NMLST_VALUE (1) + .LSTCNT [CL_INDEX];

		[NM_NULL] :
		    NMLST_VALUE (1) = .LSTCNT [CL_INDEX];

		[NM_UNSIGNED] :
		    0;

		TES;

	    IF .NMLST_VALUE (1) LEQ 0 OR
		.NMLST_VALUE (1) GTR .LSTCNT [CL_MAX_INDEX]
	    THEN
		BEGIN
		ERMA (RNFINM, FALSE);
		RETURN;
		END;

	    LIST_DEPTH = .NMLST_VALUE (1);

	    ! Process second parameter, that sets up the
	    ! list element counter value.
	    CASE .NMLST_DESCR (2) FROM 0 TO 4 OF
		SET

		[NM_BAD] :
		    RETURN;

		[NM_NULL] :
		    NMLST_VALUE (2) = .LSTCNT [.LIST_DEPTH] + 1;	! Add 1 to offset the -1 later.

		[NM_PLUS, NM_MINUS] :
		    NMLST_VALUE (2) = .NMLST_VALUE (2) + .LSTCNT [.LIST_DEPTH];

		[NM_UNSIGNED] :
		    0;

		TES;

	    IF .NMLST_VALUE (2) LSS 0
	    THEN
		BEGIN
		ERMA (RNFINM, FALSE);
		RETURN;
		END;

	    ! When assigning the value, subtract one
	    ! to anticipate the .LIST ELEMENT
	    ! command that will increment it.
	    LSTCNT [.LIST_DEPTH] = .NMLST_VALUE (2) - 1;
	    END;

	[H_NUMBER_SUBPAG, H_NUMBER_PAGE, H_NUMBER_RUNNIN] :
	    BEGIN

	    LOCAL
		X;				! Copy of page/subpage/running-page to be updated

	    ! Copy the counter which is to be updated.

	    IF .PHAN_TOP_FIRST
	    THEN

		! Start with this page
		IF .HANDLER_CODE EQL H_NUMBER_SUBPAG
		THEN
		     ! Copy subpage counter from current page
		     X = .PAGEN [SCT_SUB_PAGE]
		ELSE

		    IF .HANDLER_CODE EQL H_NUMBER_RUNNIN
		    THEN
			! Copy running page number for current page
			X = .PAGEN [SCT_RUN_PAGE]
		    ELSE
			 ! Copy page counter from current page
			 X = .PAGEN [SCT_PAGE]
	    ELSE

		! Start it on next page
		IF .HANDLER_CODE EQL H_NUMBER_SUBPAG
		THEN
		    ! Get subpage counter from next page
		    X = .NPAGEN [SCT_SUB_PAGE]
		ELSE

		    IF .HANDLER_CODE EQL H_NUMBER_RUNNIN
		    THEN
			! Get running page counter from next page
			X = .NPAGEN [SCT_RUN_PAGE]
		    ELSE
			! Get page counter from next page
			X = .NPAGEN [SCT_PAGE];

	    IF .NUM_RESULT
	    THEN
		BEGIN

		IF .NUM_SIGN NEQ 0
		THEN
		    X = .X + .NUM_VALUE
		ELSE

		    IF .NUM_LENGTH NEQ 0
		    THEN
			X = .NUM_VALUE
		    ELSE
			! No number was given.  Try for letters.
			BEGIN
			FS_INIT (FS01);		! Initialize the temporary fixed string.

			! Now try to get a string of letters
			IF GSLU (IRA, FS01) EQL GSLU_NONE
			THEN
			    ! It's okay to say .NUMBER PAGE and not give a page number.
			    ! The net result is that all that happens is that page numbering
			    ! is turned on again.  (This happens as the result of the line of code
			    ! just before the SELECT statement, above).  However, for
			    ! subpages, a number must be given, since 0 is the same as no
			    ! subpage specified.  In this case the program supplies a
			    ! default value of 1.
			    BEGIN

			    IF .HANDLER_CODE EQL H_NUMBER_SUBPAG
			    THEN
				X = 1
			    END
			ELSE
			    ! Convert letters to the binary internal form.
			    X = CONVLB (.FS_START (FS01), .FS_LENGTH (FS01))
			END
		END;
	    
	    ! Validate the tentative page/subpage number

	    IF ((.HANDLER_CODE EQL H_NUMBER_SUBPAG) AND	! ZERO is illegal only for .NUMBER SUBPAGE
		 (.X EQL 0)) OR
		 (.X LSS 0)				! LSS 0 is always illegal
	    THEN
		BEGIN
		ERMA (RNFINM, TRUE);
		RETURN
		END;

	    ! At this point X contains a valid counter.
	    ! Now we need to put it where it will be picked up.
	    IF .HANDLER_CODE EQL H_NUMBER_SUBPAG
	    THEN
		BEGIN

		! Page numbers don't change while subpaging. However, check
		! to see if the user has said .NUMBER PAGE in the interim.
		IF .NPAGEN [SCT_PAGE] - .PAGEN [SCT_PAGE] EQL 1
		THEN
		    NPAGEN [SCT_PAGE] = .PAGEN [SCT_PAGE];

		! Save subpage counter
		IF .PHAN_TOP_FIRST
		THEN
		    ! Subpage number takes effect immediately
		    BEGIN
		    PAGEN  [SCT_SUB_PAGE] = .X;
		    NPAGEN [SCT_SUB_PAGE] = .X + 1;
		    END
		ELSE
		    ! Subpage takes effect on next page
		    NPAGEN [SCT_SUB_PAGE] = .X;
		END
	    ELSE

		IF .HANDLER_CODE EQL H_NUMBER_RUNNIN
		THEN

		    ! User said .NUMBER RUNNING
		    IF .PHAN_TOP_FIRST
		    THEN
			! The running page number takes effect immediately
			BEGIN
			PAGEN  [SCT_RUN_PAGE] = .X;
			NPAGEN [SCT_RUN_PAGE] = .X + 1;
			END
		    ELSE
			! The running page number takes effect on the next page
			NPAGEN [SCT_RUN_PAGE] = .X

		ELSE
		    ! User said .NUMBER PAGE, not .NUMBER SUBPAGE or .NUMBER RUNNING
		    BEGIN
		    HCT_ODD_EVEN = NOT (.X MOD 2);	! Set odd/even page number flag appropriately.

		    IF .PHAN_TOP_FIRST
		    THEN
			! Page number takes effect immediately
			BEGIN
			PAGEN  [SCT_PAGE] = .X;
			NPAGEN [SCT_PAGE] = .X + 1;
			END
		    ELSE
			! Page number takes effect on the next page
			NPAGEN [SCT_PAGE] = .X;

		    END;
	    END;

%IF DSRPLUS %THEN
	[H_NUMBER_EXAMPL, H_NUMBER_FIGURE, H_NUMBER_TABLE] : 
	    BEGIN

	    LOCAL
		ENTITY_NUMBER,
		OFFSET;

	    ! Ignore command if an illegal number was given.
	    IF NOT .NUM_RESULT
	    THEN
		RETURN;

	    ! Assume user gives neither a number or a letter.
	    ENTITY_NUMBER = 0;

	    ! Try to get a string of letters if the user didn't supply a number.
	    IF .NUM_LENGTH EQL 0
	    THEN
		BEGIN

		LOCAL
		    GSLU_RESULT;

		! Initialize the fixed string where the result is returned.
		FS_INIT (FS01);

		! Now try to get a name specified as a string of letters.
		GSLU_RESULT = GSLU (IRA, FS01);

		! Convert to binary representation.
		IF .GSLU_RESULT NEQ GSLU_NONE
		THEN
		    ENTITY_NUMBER = CONVLB (.FS_START (FS01), .FS_LENGTH (FS01));

		END
	    ELSE
		ENTITY_NUMBER = .NUM_VALUE;

	    ! Decide where to store the number.
	    OFFSET = (SELECTONE .HANDLER_CODE OF
			SET
			[H_NUMBER_EXAMPL] : EXAMP_OFFSET;
			[H_NUMBER_FIGURE] : FIGUR_OFFSET;
			[H_NUMBER_TABLE]  : TABLE_OFFSET;
			TES);

	    ! The "-1" in the statements below exists because HEADER.BLI
	    ! increments before putting out the next entity caption.
	    !
	    IF .NUM_SIGN EQL 0
	    THEN
		! Unsigned number: just store it.
		!
		ECC [.OFFSET, ECC$H_COUNTER] = .ENTITY_NUMBER - 1
	    ELSE
		! +n or -n: add it.
		!
		ECC [.OFFSET, ECC$H_COUNTER] =
		    .ECC [.OFFSET, ECC$H_COUNTER] + .ENTITY_NUMBER - 1;


	    IF .ECC [.OFFSET, ECC$H_COUNTER] LSS 0	! Defensive check.
	    THEN
		ECC [.OFFSET, ECC$H_COUNTER] = 0;

	    END;
%FI

	TES;

    END;					! End of NM

END						! End of module
ELUDOM
