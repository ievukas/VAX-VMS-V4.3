MODULE ERFSUMMARY
(%TITLE 'Summary dispatcher'
IDENT = 'V04-000') =
	
BEGIN
	
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  ERF, Error Log Report Generator
!
! ABSTRACT:
!
!    This module handles the update and output of summary information.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, user mode.
!
! AUTHOR:  Sharon Reynolds,	CREATION DATE:	12-Apr-1983
!
! Modified by:
!
!	V03-003	EAD0141		Elliott A. Drayton	12-Apr-1984
!		Removed reference to EMBETDEF.REQ.
!
!	V03-002	SAR0192		Sharon A. Reynolds	15-Feb-1984
!		Removed references to parserdat.
!
!	V03-001 JMG0003		Joel M. Gringorten	29-Dec-1983
!		Added dispatch clauses for histogram support.
!		- output
!		- update
!
!--

Require 'src$:erfdef.req' ;		! ERF definitions
Require 'src$:recseldef.req' ;		! SYECOM field definitions

!
! Table of contents
!
Forward routine
    Summary_dispatcher: NOVALUE ;

External routine
    Display_rollup,
    Entry_summary_output,
    Entry_summary_update,
    Label_out,
    Memory_display,
    Rollup,
    Processed_entries_histo_update,
    Processed_entries_histo_output ;

Own
    Temp_emb:		PSECT (EMB),
    Emb_buf:		Initial (temp_emb) 
			REF $BBLOCK,

    Temp_syecom:	PSECT (SYECOM),
    Syecom_buf:		Initial (temp_syecom)
			REF $BBLOCK,
    Name_desc:		$BBLOCK [dsc$k_d_bln]
			Preset ([dsc$b_class] = dsc$k_class_d) ;


Global Routine SUMMARY_DISPATCHER (lstlun, function): NOVALUE = 

Begin

!++
!
! Functional Description:
!
!
! Calling Sequence:
!
!    Summary_dispatcher (lstlun,function)
!
! Input Parameters:
!
!    Lstlun  = contains the address of the output logical unit number.
!    Function = contains the address of the function code.
!
! Output Parameters:
!
!    None
!
!--
Selectone ..function of
    Set
    [Histo_summ_upd]:
	Begin
	!
	! Update the histogram summary information (count of selected entries).
	!
	PROCESSED_ENTRIES_HISTO_UPDATE () ;
	End ;

    [Entry_summ_upd]:
	Begin
	!
	! Update the entry summary information (count of all entries).
	!
	ENTRY_SUMMARY_UPDATE (syecom_buf[sye$b_valid_cpu],
				syecom_buf[sye$b_valid_entry],
				syecom_buf[sye$b_valid_class],
				syecom_buf[sye$b_valid_type]) ;
	End ;

    [Dev_summ_upd]:
	Begin
	!
	! Ensure that this is either a 'device error', 'device timeout',
	! or a 'device attention' entry and call the summary update 
	! routine, passing the appropriate EMB fields.
	!
	If ((.emb_buf[emb$w_hd_entry] EQLU EMB$C_DE) OR
	    (.emb_buf[emb$w_hd_entry] EQLU EMB$C_DT) OR
	    (.emb_buf[emb$w_hd_entry] EQLU EMB$C_DA))
	Then
	    Begin
	    Name_desc[dsc$a_pointer] = emb_buf[emb$t_dv_name] + 1 ;

	    ROLLUP (emb_buf[emb$t_dv_name],name_desc,
		    emb_buf[emb$w_dv_unit],emb_buf[emb$q_dv_iosb],
		    emb_buf[emb$l_dv_opcnt],emb_buf[emb$w_dv_errcnt]) ;
	    End
	Else
	    Begin
	    !
	    ! Ensure that this is a 'log status' entry and call the
	    ! summary update routine, passing the appropriate EMB fields.
	    !
	    If (.emb_buf[emb$w_hd_entry] EQLU EMB$C_SP)
	    Then
		Begin
		Name_desc[dsc$a_pointer] = emb_buf[emb$t_sp_devnam] + 1 ;

		ROLLUP (emb_buf[emb$t_sp_devnam],
			name_desc,
			emb_buf[emb$w_sp_unit],%REF(-1),
			emb_buf[emb$l_sp_opcnt],
			emb_buf[emb$w_sp_errcnt]) ;
		End ;
	    End ;

	!
	! Ensure this is 'log message' entry and call the summary update 
	! routine, passing the appropriate EMB fields.
	!
	If (.emb_buf[emb$w_hd_entry] EQLU EMB$C_LM)
	Then
	    Begin
	    !
	    ! Ensure the message type for this entry is useful for
	    ! updating the summary information.
	    !
	    Selectoneu .emb_buf[emb$w_lm_msgtyp] of
		Set
		[1,2,3,4,6,7]:
		    Begin
		    Name_desc[dsc$a_pointer] = emb_buf[emb$t_lm_devnam] + 1 ;

		    ROLLUP (emb_buf[emb$t_lm_devnam],
			    name_desc,
			    emb_buf[emb$w_lm_unit],%REF(+1),
			    %REF(-1),%REF(-1)) ;
		    End ;
		Tes ;
	    End ;
	End ;

    [Dev_summ_out]:
	Begin
	!
	! Display the device summary information (device rollup).
	!
	DISPLAY_ROLLUP (.lstlun) ;
	End ;

    [Volume_summ_out]:
	Begin
 	!
	! Display the volume summary information (volume label information).
	! (Volume summary information is updated from the call to 
	! 'mnt_dismnt_disp' which in turn calls the appropriate routine for
	! updating the mount or dismount summary information).
	!
	LABEL_OUT (.lstlun) ;
	End ;

    [Memory_summ_out]:
	Begin
	!
	! Display the memory summary information. (Memory summary information
	! is updated in the 'memorys.for' module.)
	!
	MEMORY_DISPLAY (.lstlun) ;
	End ;

    [Entry_summ_out]:
	Begin
	!
	! Display the entry summary information.
	!
	ENTRY_SUMMARY_OUTPUT (.lstlun) ;
	End ;

    [Histo_summ_out]:
	Begin
	!
	! Display the Histogram summary information.
	!
	PROCESSED_ENTRIES_HISTO_OUTPUT (.lstlun) ;
	End ;

    [All_summ_out]:
	Begin
	!
	! Output the all of the summary information.
	!
	DISPLAY_ROLLUP (.lstlun) ;
	LABEL_OUT (.lstlun) ;
	MEMORY_DISPLAY (.lstlun) ;
	ENTRY_SUMMARY_OUTPUT (.lstlun);
	PROCESSED_ENTRIES_HISTO_OUTPUT (.lstlun) ;
	End ;

    [Otherwise]:
	Return ;

    Tes ;

Return ;
End ;	! Routine

End	! Module
ELUDOM
