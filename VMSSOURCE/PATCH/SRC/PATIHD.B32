MODULE PATIHD (%IF %VARIANT EQL 1				! ROUTINES TO HANDLE IMAGE HEADER AND SECTIONS
		%THEN
					ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE,
						 NONEXTERNAL = LONG_RELATIVE),
		%FI
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: PATCH
!
! ABSTRACT: ROUTINES TO HANDLE IMAGE HEADER DATA AND CREATE AND MAP IMAGE SECTIONS.
!
! ENVIRONMENT: PART OF IMAGE FILE PATCH UTILITY
!
! AUTHOR: K.D. MORSE	, CREATION DATE: 11-OCT-77
!
! MODIFIED BY:
!
!	V03-005	MCN0157		Maria del C. Nasr	22-Feb-1984
!		Use image activation routines to get image header and
!		image section descriptors, instead of reading blocks
!		directly.
!
!	V03-004	MCN0148		Maria del C. Nasr	 6-Feb-1984
!		Supply channel number address to LIB$_CREMAPSEC when
!		doing a PATCH/ABSOLUTE/NONEW_VERSION.  In that way,
!		the file is only opened once.
!
!	V03-003	MTR0025		Mike Rhodes		 8-Aug-1983
!		Add new routine BUILD_IHD to support the /ABSOLUTE feature.
!		The /ABSOLUTE feature allows a user to patch ANY file via
!		absolute (virtual) location values.
!
!	V03-002	MTR0016		Mike Rhodes		29-Oct-1982
!		Modify PAT$GET_IHD to save the image type identifier word
!		in the global scalar PAT$GW_IMGTYP (later restored by
!		PAT$WRTIMG).
!
!	V03-001	MTR0007		Mike Rhodes		14-Jun-1982
!		Use shared system messages.  Affected modules include:
!		DYNMEM.B32, PATBAS.B32, PATCMD.B32, PATIHD.B32, PATINT.B32,
!		PATIO.B32, PATMAI.B32, PATMSG.MSG, PATWRT.B32, and PATSPA.B32.
!
!		The shared messages are defined by DYNMEM.B32's invocation of
!		SHRMSG.REQ and we simply link against these symbols.  They are
!		declared as external literals below.
!
!	V02-008	MTR0001		Mike Rhodes		14-Oct-1981
!		Modify routine PAT$CREMAP to allow the create and map
!		section system service to do expand region mapping
!		within P0 space.  This eliminates PATCH's trying to
!		remember the last mapped address and getting errors
!		due to stepping on RMS buffers in P0.
!
!	V02-007	KDM0044		Kathleen D. Morse	03-MAR-1981
!		Reformat some comment lines.
!
!	V02-006	PCG0001		Peter George		02-FEB-1981
!		Add require statement for LIB$:PATDEF.REQ
!
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	PAT$GET_IHD: NOVALUE,					! READS AND PROCESSES IMAGE HEADER
	PAT$CREMAP: NOVALUE,					! CREATES AND MAPS IMAGE SECTIONS
	BUILD_IHD: NOVALUE;					! BUILDS A PHONY IMAGE HEADER AND ISE LIST.

!
! INCLUDE FILES:
!

LIBRARY	'SYS$LIBRARY:LIB.L32';					! SYSTEM STRUCTURE DEFINITIONS
REQUIRE 'SRC$:PATPCT.REQ';					! DEFINES PSECTS
REQUIRE 'SRC$:PREFIX.REQ';					! DEFINES STRUCTURE MACROS
REQUIRE 'SRC$:PATPRE.REQ';					! DEFINES PATCH STRUCTURES
REQUIRE 'LIB$:PATDEF.REQ';					! Defines literals
REQUIRE 'LIB$:PATMSG.REQ';					! DEFINE ERROR CODES
REQUIRE 'SRC$:PATGEN.REQ';					! DEFINE QUADWORD SIZE
REQUIRE 'SRC$:SYSLIT.REQ';					! DEFINE TTY_OUT_WIDTH
REQUIRE 'IMGMSGDEF';						! IMAGE ACTIVATOR DEF

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

LITERAL
	START_OFF = 0,						! OFFSET TO STARTING ADDRESS
	END_OFF = 1,						! OFFSET TO ENDING ADDRESS
	IDENT_SIZE = 2;						! SIZE OF IDENT FIELD

!
! EXTERNAL REFERENCES:
!

EXTERNAL
	PAT$GL_IHPPTR: REF BLOCK[,BYTE],			! POINTER TO IMAGE HEADER
	PAT$CP_OUT_STR,						! POINTER TO OUTPUT BUFFER
	PAT$GL_BUF_SIZ,						! SIZE OF MESSAGE IN OUTPUT BUFFER
	PAT$GL_CHANUM,						! CHANNEL NUMBER
	PAT$GL_EXPANDVA,					! FIRST EXPAND VA ADDRESS
	PAT$GL_PATAREA,						! POINTER TO PATCH AREA DESCRIPTOR
	PAT$GL_ERRCODE,						! GLOBAL ERROR CODE
	PAT$GL_FLAGS : BITVECTOR [32],				! CLI RESULTANT PARSE FLAGS
	PAT$GL_ISVADDR: VECTOR[,LONG],				! LAST MAPPED ADDRESS PAIR
	PAT$GB_INPBUF,						! INPUT BUFFER FOR IMAGE FILE
	PAT$GL_IMGHDR: REF BLOCK[,BYTE],			! IMAGE HEADER DATA ADDRESS
	PAT$GL_ISELHD,						! IMAGE SECTION TABLE LIST HEAD
	PAT$GL_ISETAIL : REF BLOCK[,BYTE],			! LAST ENTRY IN IMAGE SECTION TABLE
	PAT$GL_NEWVPNMX,					! MAX VPN IN IMAGE FILE
	PAT$GL_NEWVBNMX,					! MAX VBN IN IMAGE FILE
	PAT$GL_OLDVBNMX,					! OLD IMAGE FILE MAX ISD VBN
	PAT$GB_OLDNAME,						! OLD IMAGE FILE NAME
	PAT$GL_OLDFAB: BLOCK[,BYTE],				! FAB FOR INPUT IMAGE FILE
	PAT$GL_OLDNBK: BLOCK[,BYTE],				! NAME BLOCK FOR INPUT IMAGE FILE
	PAT$GL_OLDRAB: BLOCK[,BYTE],				! RAB FOR INPUT IMAGE FILE
	PAT$GL_JNLRAB: BLOCK[,BYTE],				! RAB FOR JOURNAL FILE
	PAT$GW_IMGTYP: WORD;					! IMAGE TYPE IDENTIFIER

EXTERNAL ROUTINE
	PAT$ADD_PAL,						! ADD PATCH AREA TO LIST
	PAT$BUILD_ISE,						! BUILD AN IMAGE SECTION ENTRY AND ASSOC. ISD
	PAT$FAO_PUT,						! FORMATS OUTPUT MESSAGE
	PAT$WRITEFILE,						! WRITES OUTPUT MESSAGE TO A FILE
	PAT$ALLOBLK,						! ALLOCATES BLOCK OF FREE MEMORY
	GETFILDSC,						! Returns the address of a file name descriptor
	IMG$DECODE_IHD   : ADDRESSING_MODE (GENERAL),		! Gets image header
	IMG$GET_NEXT_ISD : ADDRESSING_MODE (GENERAL),		! Gets image section desc
	LIB$_CREMAPSEC;						! CREATES AND MAPS SECTIONS

EXTERNAL LITERAL
!
! Define shared message references.  (resolved @ link time)
!
	PAT$_CLOSEIN,						! Error closing input file.
	PAT$_CLOSEOUT,						! Error closing output file.
	PAT$_OPENIN,						! Error opening input file.
	PAT$_OPENOUT,						! Error opening output file.
	PAT$_READERR,						! Error reading from file.
	PAT$_SYSERROR,						! System Service error.
	PAT$_WRITEERR;						! Error writing to file.

!
! OWN STORAGE:
!

OWN
	BLKBUF: BLOCK [512,BYTE],				! Buffer where image blocks are read into
	CURISD: REF BLOCK[,BYTE],				! Current image section descriptor (ISD)
	INPBUF: REF BLOCK[,BYTE] INITIAL(PAT$GB_INPBUF);	! Input buffer (used by IHD and ISD)

BIND
	MAJOR_IDENT= UPLIT (%ASCII'02'),			! VALUE OF MAJOR IDENT ABLE TO PATCH
	MINOR_IDENT= UPLIT (%ASCII'01');			! MINIMUM VALUE OF MINOR IDENT ABLE TO PATCH

GLOBAL ROUTINE PAT$GET_IHD :NOVALUE =				! READS AND PROCESSES THE IMAGE HEADER

!++
! FUNCTIONAL DESCRIPTION:
!
!	THIS ROUTINE READS THE IMAGE HEADER AND STORES THE DATA.
!	IT THEN PROCESSES EACH IMAGE SECTION, BUILDING THE IMAGE SECTION TABLE.
!	THE IMAGE SECTION ENTRIES CONSIST OF:
!
!		1. LINK TO NEXT IMAGE SECTION ENTRY (ISE)
!		2. STARTING MAPPED VIRTUAL ADDRESS
!		3. ENDING MAPPED VIRTUAL ADDRESS
!		4. STARTING IMAGE VIRTUAL ADDRESS WITHIN IMAGE SECTION
!		5. ENDING IMAGE VIRTUAL ADDRESS WITHIN IMAGE SECTION
!		6. IMAGE SECTION DESCRIPTOR AS READ FROM IMAGE HEADER
!
!	THE MAPPED ADDRESSES ARE INITIALIZED TO ZERO.  WHEN THE PAGES
!	ARE ACCESSED BY A PATCH COMMAND, THE IMAGE SECTION IS MAPPED
!	AND THE MAPPED ADDRESSES SET.
!
!	THE BEGINNING ADDRESS INTO WHICH THE IMAGE SECTIONS ARE TO
!	BE MAPPED IS ALSO INITIALIZED.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	THE OLD IMAGE FILE HAS BEEN SET UP FOR INPUT.
!
! IMPLICIT OUTPUTS:
!
!	THE IMAGE SECTION TABLE IS SET UP AND THE IMAGE HEADER DATA STORED.
!
! ROUTINE VALUE:
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN
BIND
	TIME_STR = UPLIT (%ASCIC 'DATE/TIME OF PATCH:		!%D'),
	ECO_MSG_STR = UPLIT (%ASCIC 'ECO LEVELS SET:		'),
	ECO_LVL_STR = UPLIT (%ASCIC '!UL, ');


LITERAL
	NO_MORE_ISE = 65535;					! CODE FOR NO MORE ISE'S ON THIS PAGE

MAP
	PAT$GL_IMGHDR : REF BLOCK[,BYTE];			! REFERENCE IMAGE HEADER AS A BLOCK

LOCAL
	ALIAS_ADR,
	ALLOCSIZE,						! SIZE OF IMAGE HEADER TO ALLOCATE
	DESPTR,							! DESTINATION STRING POINTER
	ECO_PTR : REF BITVECTOR,				! POINTER TO ECO LEVEL BITS
	ECO_BIT,						! ECO BIT LEVEL COUNTER
	HDRVER_ADR,
	ISD_ADR,						! ADDR OF DECODED ISD
	ISEADR: REF BLOCK[,BYTE],				! CONTAINS ADDRESS OF IMAGE SECTION ENTRY
	NXTPTR,							! STRING POINTER TO NEXT PART OF RECORD
	OUT_BUFFER : VECTOR[TTY_OUT_WIDTH,BYTE],		! OUTPUT MESSAGE BUFFER
	SRCPTR,							! SOURCE STRING POINTER
	VBN_ADR;						! Image header VBN

!++
! INITIALIZE THE IMAGE SECTION TABLE LIST HEAD.
!--
PAT$GL_ISELHD=0;						! SET END OF TABLE
PAT$GL_ISETAIL=0;						! SET TAIL OF TABLE

!++
! INITIALIZE MAXIMUM NEW FILE VIRTUAL PAGE AND BLOCK NUMBERS.
!--
PAT$GL_NEWVBNMX = 0;
PAT$GL_NEWVPNMX = 0;

! Read the first block of the image header and store the data.  If we are
! patching the file in absolute mode, create a phony image header and ISD's
! for mapping.  Otherwise, get the real image header.
!

IF .PAT$GL_FLAGS [PAT$S_ABSOLUTE]
THEN
    BUILD_IHD (.INPBUF)
ELSE
    IF NOT (PAT$GL_ERRCODE = IMG$DECODE_IHD ( .PAT$GL_CHANUM,
						BLKBUF,
						PAT$GB_INPBUF,
						VBN_ADR,
						NXTPTR,
						HDRVER_ADR,
						ALIAS_ADR ))
    THEN
	SIGNAL(PAT$_READERR,1,GETFILDSC(PAT$GL_OLDFAB),.PAT$GL_ERRCODE,0);

!++
! CHECK THAT THE PATCH UTILITY UNDERSTANDS THIS TYPE OF IMAGE HEADER.
!--
IF .INPBUF[IHD$W_MAJORID] NEQU .MAJOR_IDENT
THEN
	SIGNAL(PAT$_BADIDENT,2,IDENT_SIZE,INPBUF[IHD$W_MAJORID]);
IF .INPBUF[IHD$W_MINORID] LSSU .MINOR_IDENT
THEN
	SIGNAL(PAT$_BADIDENT,2,IDENT_SIZE,INPBUF[IHD$W_MINORID]);

! Store the image header for future use.  The buffer will be pointed to
! by PAT$GL_IMGHDR. 
!
! If there is no patch section in the header, then enlarge it to include one.
!
ALLOCSIZE=.INPBUF[IHD$W_SIZE];					! ASSUME HEADER IS CORRECT SIZE
IF .INPBUF[IHD$W_PATCHOFF] EQL 0
THEN				
	ALLOCSIZE=.ALLOCSIZE + IHP$K_LENGTH;

PAT$ALLOBLK(.ALLOCSIZE,PAT$GL_IMGHDR);				! ALLOCATE STORAGE FOR IMAGE HEADER
SRCPTR=CH$PTR(.INPBUF,0);					! SET POINTER TO INPUT DATA
DESPTR=CH$PTR(.PAT$GL_IMGHDR,0);				! SET POINTER TO HEADER STORAGE
CH$MOVE(.INPBUF[IHD$W_SIZE],.SRCPTR,.DESPTR);			! STORE HEADER DATA
PAT$GW_IMGTYP = .ALIAS_ADR;					! SAVE THE IMAGE TYPE IDENTIFIER

IF .PAT$GL_IMGHDR[IHD$W_PATCHOFF] EQL 0				! IF THERE WAS NO PATCH SECTION
THEN								! THEN
	BEGIN
	PAT$GL_IMGHDR[IHD$W_PATCHOFF]=.PAT$GL_IMGHDR[IHD$W_SIZE]; ! SET OFFSET TO PATCH SECTION
	PAT$GL_IMGHDR[IHD$W_SIZE]=.PAT$GL_IMGHDR[IHD$W_SIZE] + IHP$K_LENGTH; ! INCREMENT SIZE OF HEADER
	PAT$GL_IHPPTR=CH$PTR(.PAT$GL_IMGHDR, .PAT$GL_IMGHDR[IHD$W_PATCHOFF]);
	PAT$GL_IHPPTR[IHP$L_ECO1]=0;				! ZERO THE ECO LEVEL BITS
	PAT$GL_IHPPTR[IHP$L_ECO2]=0;				! ZERO THE ECO LEVEL BITS
	PAT$GL_IHPPTR[IHP$L_ECO3]=0;				! ZERO THE ECO LEVEL BITS
	PAT$GL_IHPPTR[IHP$L_ECO4]=0;				! ZERO THE ECO LEVEL BITS
	PAT$GL_IHPPTR[IHP$L_RW_PATADR]=0;			! SET NO READ-WRITE PATCH AREA
	PAT$GL_IHPPTR[IHP$L_RW_PATSIZ]=0;			! SET NO READ-WRITE PATCH AREA
	PAT$GL_IHPPTR[IHP$L_RO_PATADR]=0;			! SET NO READ-ONLY PATCH AREA
	PAT$GL_IHPPTR[IHP$L_RO_PATSIZ]=0;			! SET NO READ-ONLY PATCH AREA
	PAT$GL_IHPPTR[IHP$L_PATCOMTXT]=0;			! SET NO PATCH COMMAND TEXT
	END
ELSE
	PAT$GL_IHPPTR=CH$PTR(.PAT$GL_IMGHDR, .PAT$GL_IMGHDR[IHD$W_PATCHOFF]);

PAT$GL_PATAREA = CH$PTR(PAT$GL_IHPPTR[IHP$L_RW_PATSIZ] ,0);	! SET POINTER TO PATCH AREA DESCRIPTOR
PAT$GL_ERRCODE=$GETTIM(TIMADR=PAT$GL_IHPPTR[IHP$Q_PATDATE]);	! SET LATEST PATCH DATE
IF NOT .PAT$GL_ERRCODE
THEN
	SIGNAL(PAT$_SYSERROR,0,.PAT$GL_ERRCODE);			! REPORT ERROR

!++
! WRITE OUT PATCH TIME TO JOURNAL FILE.
!--
PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER,0);
PAT$GL_BUF_SIZ = 0;
PAT$FAO_PUT(TIME_STR, PAT$GL_IHPPTR[IHP$Q_PATDATE]);
PAT$WRITEFILE(.PAT$GL_BUF_SIZ, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);

!++
! NOW OUTPUT THE ECO LEVELS SET TO THE JOURNAL FILE.
!--
ECO_PTR = CH$PTR(PAT$GL_IHPPTR[IHP$L_ECO1], 0);
PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER,0);
PAT$GL_BUF_SIZ = 0;
INCR ECO_BIT FROM PAT$K_MIN_ECO-1 TO PAT$K_MAX_ECO-1 BY 1
DO
	BEGIN
	IF .ECO_PTR[.ECO_BIT]
	THEN
		BEGIN
		IF .PAT$GL_BUF_SIZ GEQ TTY_OUT_WIDTH-6
		THEN
			BEGIN
			PAT$WRITEFILE(.PAT$GL_BUF_SIZ-2, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);
			PAT$CP_OUT_STR = CH$PTR(OUT_BUFFER,0);
			PAT$GL_BUF_SIZ = 0;
			END;
		IF .PAT$GL_BUF_SIZ EQL 0
		THEN
			PAT$FAO_PUT(ECO_MSG_STR);
		PAT$FAO_PUT(ECO_LVL_STR, .ECO_BIT+1);
		END;
	END;
IF .PAT$GL_BUF_SIZ NEQ 0
THEN
	PAT$WRITEFILE(.PAT$GL_BUF_SIZ-2, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);
PAT$WRITEFILE(0, CH$PTR(OUT_BUFFER, 0), PAT$GL_JNLRAB);		! OUTPUT BLANK LINE

!++
! NOW PLACE THE DEFAULT PATCH AREA AS THE FIRST ENTRY ON THE PATCH AREA LIST.
!--
PAT$ADD_PAL(.PAT$GL_IHPPTR[IHP$L_RW_PATADR],
	    .PAT$GL_IHPPTR[IHP$L_RW_PATADR]+.PAT$GL_IHPPTR[IHP$L_RW_PATSIZ],
	    PAL$K_ADD_PAREA);

!++
! FIND THE BOTTOM OF THE PATCH CODE AND INITIALIZE THE CURRENT ISD ADDRESS IN
! THE IMAGE HEADER RECORD TO GET READY FOR IMAGE SECTION PROCESSING.
!--
PAT$GL_ERRCODE=$EXPREG(	  PAGCNT=1
			, RETADR=PAT$GL_ISVADDR);		! FIND BOTTOM OF PATCH CODE
IF NOT .PAT$GL_ERRCODE
THEN
	SIGNAL(PAT$_SYSERROR,0,.PAT$GL_ERRCODE);			! REPORT ERROR
PAT$GL_EXPANDVA = .PAT$GL_ISVADDR[START_OFF];			! REMEMBER FIRST EXPAND ADDRESS
PAT$GL_ISVADDR[END_OFF]=.PAT$GL_ISVADDR[START_OFF] - 1;		! SET NEXT ADDRESS FOR CREMAP TO MAP OVER

!++
! Now process every image section descriptor from the image header when
! not in absolute mode.
!--
IF NOT .PAT$GL_FLAGS [PAT$S_ABSOLUTE]
THEN
    BEGIN

    LOCAL
        ALLOC_SIZE;					! SIZE OF ISE TO ALLOCATE

    WHILE 1 DO
	BEGIN

	PAT$GL_ERRCODE = IMG$GET_NEXT_ISD ( .PAT$GL_CHANUM,
					    BLKBUF,
					    .PAT$GL_IMGHDR,
					    VBN_ADR,
					    NXTPTR,
					    PAT$GB_INPBUF,
					    HDRVER_ADR );

	IF NOT .PAT$GL_ERRCODE
	THEN
	    IF .PAT$GL_ERRCODE EQL IMG$_ENDOFHDR
	    THEN
		EXITLOOP
	    ELSE
		SIGNAL(PAT$_READERR,1,GETFILDSC(PAT$GL_OLDFAB),.PAT$GL_ERRCODE,0);

	CURISD=.INPBUF;						! SET CURRENT ISD ADDRESS
	ALLOC_SIZE = .CURISD[ISD$W_SIZE] + ISE$C_SIZE;		! SET SIZE OF ISE

	IF .CURISD[ISD$V_DZRO]
	THEN
		ALLOC_SIZE = .ALLOC_SIZE + A_QUADWORD;		! ADD IN EXTRA SPACE FOR VBN AND IDENT
	!++
	! ****** THIS CHECK IS A FUTURE FEATURE WHICH WILL INSURE SPACE FOR AN IDENT
	! ****** LONGWORD IN ANY PROCESS PRIVATE IMAGE SECTION DESCRIPTOR.
	! ****** THIS WILL ENABLE PATCH TO CREATE AN IDENT FOR A PROCESS
	! ****** PRIVATE IMAGE SECTION, WHICH WILL PROBABLY BE NECESSARY WHEN
	! ****** GLOBAL SECTIONS ARE PATCHED AND BECOME PRIVATE SECTIONS.
	!--
	IF PAT$K_LENPRIV NEQ ISD$K_LENPRIV			! CHECK IF LENGTH INCLUDES IDENT
	THEN
		IF .CURISD[ISD$W_SIZE] EQL ISD$K_LENPRIV	! CHECK IF THIS IS PROCESS PRIVATE ISD
		THEN
			ALLOC_SIZE = .ALLOC_SIZE + A_LONGWORD;	! ADD IN IDENT LENGTH
	PAT$ALLOBLK(.ALLOC_SIZE,ISEADR);			! GET IMAGE SECTION ENTRY
	DESPTR=CH$PTR(.ISEADR,ISE$C_SIZE);			! SET DESTINATION POINTER
	CH$MOVE(.CURISD[ISD$W_SIZE],.INPBUF,.DESPTR);		! MOVE IN ISD

	IF .PAT$GL_ISETAIL EQLA 0				! IF FIRST ENTRY
	THEN
		BEGIN
		PAT$GL_ISELHD=CH$PTR(.ISEADR, 0);		! SET TABLE LIST HEAD
		PAT$GL_ISETAIL=CH$PTR(.ISEADR, 0);		! SET TABLE TAIL
		END
	ELSE
		BEGIN
		PAT$GL_ISETAIL[ISE$L_NXTISE]=CH$PTR(.ISEADR, 0); ! SET LINK TO THIS ISE
		PAT$GL_ISETAIL=CH$PTR(.ISEADR, 0);		! SET NEW TAIL OF TABLE
		END;
	ISEADR[ISE$L_NXTISE]=0;					! SET FORWARD LINK
	ISEADR[ISE$L_IMGVST]=.CURISD[ISD$V_VPG]^9;		! SET STARTING IMAGE VIRTUAL ADDRESS
	ISEADR[ISE$L_IMGVEND]=(.CURISD[ISD$V_VPG]+.CURISD[ISD$W_PAGCNT])^9 - 1; ! SET ENDING IMAGE VIRTUAL ADDRESS
	ISEADR[ISE$L_MAPVST]=0;					! SET NO START MAPPED ADDRESS
	ISEADR[ISE$L_MAPVEND]=0;				! SET NO ENDING MAPPED ADDRESS
	IF .CURISD[ISD$B_TYPE] NEQ ISD$K_USRSTACK
	THEN
		IF .PAT$GL_NEWVPNMX LSSU .CURISD[ISD$V_VPG]	! SEE IF LARGER VPN
		THEN
			PAT$GL_NEWVPNMX = .CURISD[ISD$V_VPG] +.CURISD[ISD$W_PAGCNT] - 1;
	IF NOT .CURISD[ISD$V_DZRO]				! IF NOT DEMAND ZERO
	THEN							! THEN CHECK IF LARGER VBN
		IF .PAT$GL_NEWVBNMX LSS .CURISD[ISD$L_VBN]
		THEN
			PAT$GL_NEWVBNMX = .CURISD[ISD$L_VBN] + .CURISD[ISD$W_PAGCNT] - 1;
	END;
    END;
PAT$GL_OLDVBNMX = .PAT$GL_NEWVBNMX;				! REMEMBER OLD FILE MAX ISD VBN USED
END;								! END OF PAT$GET_IHD


%SBTTL	'build_ihd -- Build a phony image header for the input file'
ROUTINE	build_ihd (header_addr) : NOVALUE =
!++
!
! Functional Description:
!
!	This routine will build a phony image header for the input file
!	being patched.  Thus allowing PATCH to map the input file as if
!	it were an image.  The side effect of this will be that almost
!	all PATCH commands will function as usual and the entry and
!	display modes will operate normally.
!
!	We compute the number of ISDs required to map the input file and
!	build the ISDs pointing to the various sections of the file.
!	This is done by calling $GETJPI to determine how many PTEs are
!	available for mapping the input file, adjusting by a fudge factor
!	(the ISE/ISDs take up VM too), and finally arriving at our result
!	by dividing the file size by the number of available PTEs.
!
! Inputs:
!
!	header_addr	addr.rl	The address of the buffer to write the
!				phony 'image' header.
!
! Implicit Inputs:
!
!	pat$gl_iselhd	addr.ml	The address of the image section entry
!	pat$gl_isetail	addr.ml	list head and tail (both 0 on entry!).
!	pat$gl_oldfab	addr.rl	The address of the input files FAB.
!
!	The image header offsets and associted 'default' values.
!	The fill character used to pad out the remainder of the image
!	header.
!
! Outputs:
!
!	The header will be written into the output buffer.
!	The ISDs have been created and written following the header.
!
! Implicit Outputs:
!
!	pat$gl_iselhd	addr.ml	The addresses of the first and last
!	pat$gl_isetail	addr.ml	entries in the image section list.
!
!	The fields in the phony image header will be adjusted as we
!	create the necessary mapping information in the ISE list.
!
! Routine Value:
!
!	None, yet.
!
! Side Effects:
!
!	None, yet.
!
!--
BEGIN

BIND
    block_count = pat$gl_oldfab [fab$l_alq];		! Number of blocks in the input file.

LITERAL
    false = 0, true = 1,				! Boolean operands.
    fill = %X'FF';					! Fill value for the remainder of the header block.

LOCAL
    current_ise : REF $bblock,				! Pointer to current ISE/ISD block.
    current_isd : REF $bblock,				! The address of the ISD we are currently working on.
    freptecnt : INITIAL (0),				! Number of PTEs available for mapping VM in this process.
    page_count,						! Number of pages mapped by each ISD.
    status,						! Local status scalar.
    jpilist :	$bblock [12] INITIAL (			! The item list for the $GETJPI system service.
		WORD (4, jpi$_freptecnt),		! Buffer size and item code (free pte count)
		LONG (freptecnt, 0));			! The buffer and return addresses.

MAP
    header_addr : REF $bblock;

IF NOT (status = $GETJPI (ITMLST = jpilist))		! Get the number of free PTEs for mapping the input file.
THEN    SIGNAL (pat$_syserror, 0, .status);		! Signal system service errors.

freptecnt = .freptecnt / 2;				! Reduce available page count by 50%.
page_count = MINU (.block_count, .freptecnt);		! Determine the number of pages mapped by each ISD.

CH$FILL (fill, a_page, .header_addr);			! Initialize the contents of the header.
header_addr [ihd$w_size] =	a_page;			! Size of 'image' header in bytes.
header_addr [ihd$w_activoff] =	0;			! Offset to the 'image' activation data.
header_addr [ihd$w_symdbgoff] =	0;			! Offset to the debug symbol table data.
header_addr [ihd$w_imgidoff] =	0;			! Offset to the ident data.
header_addr [ihd$w_patchoff] =	0;			! Offset to the patch data.
header_addr [ihd$w_majorid] =	ihd$k_majorid;		! Major identification.
header_addr [ihd$w_minorid] =	ihd$k_minorid;		! Minor identification.
header_addr [ihd$b_hdrblkcnt] =	1;			! Number of blocks making up the 'image' header.
header_addr [ihd$b_imgtype] =	ihd$k_exe;		! Image type.
header_addr [ihd$w_iochancnt] =	0;			! # of requested IO channels (0 is default).
header_addr [ihd$w_imgiocnt] =	0;			! # of pages of image IO section requested (0 is default).
header_addr [ihd$l_lnkflags] =	0;			! Linker produced image flags (defaulted).
header_addr [ihd$l_ident] =	0;			! Global section ident for linkable images.
header_addr [ihd$l_sysver] =	0;			! System Version (0 default NOT linked with exec).
header_addr [ihd$l_iafva] =	0;			! Relative virtual address of image activator fixup info.

!+
! We will always need at least one ISE/ISD.  It is created here to initialize the ISE list
! thus allowing routine pat$build_ise to perform the routine task of creating normal image
! section descriptors.  It will be called iteratively below to create enough ISDs to map
! the input file.
!-
pat$alloblk (ise$c_size+isd$k_lenpriv, current_ise);	! Allocate a block of storage for the ISE/ISD.
current_ise [ise$l_nxtise] = 	0;			! Address of the next ISE list entry.
current_ise [ise$l_imgvst] =	0;			! Starting virtual address of the section.
current_ise [ise$l_imgvend] =	(.page_count*a_page)-1;	! Ending virtual address of the section.
current_ise [ise$l_mapvst] =	0;			! Mapped starting address of this section.
current_ise [ise$l_mapvend] =	0;			! Mapped ending address of this section.
current_isd = .current_ise + ise$c_size;		! Compute starting address of the ISD for this ISE.
current_isd [isd$w_size] =	isd$k_lenpriv;		! Size of the ISD in bytes for a GLOBAL ISD.
current_isd [isd$w_pagcnt] =	.page_count;		! # pages described by this ISD.
current_isd [isd$l_vpnpfc] =	0;			! VPN and PFC fields.
current_isd [isd$l_flags] =	0;			! Flags and ISD Type.
current_isd [isd$v_crf] =	true;			! Copy on Reference.
current_isd [isd$v_wrt] =	true;			! Writable section..
current_isd [isd$v_matchctl] =	isd$k_matnev;		! Match control.
current_isd [isd$b_type] =	isd$k_normal;		! Normal image section.
current_isd [isd$l_vbn] =	1;			! Base virtual block number.

IF .pat$gl_iselhd EQL 0					! If this is the first entry in the list, make
THEN    pat$gl_iselhd = pat$gl_isetail = .current_ise;	! it appear at the head and tail of the list.

!+
! Now iteratively create enough ISE/ISDs to map the entire input file.
!-
INCR current_vpn FROM .page_count TO .block_count - 1 BY .page_count
DO  BEGIN
    pat$build_ise (current_ise, .current_vpn, .current_vpn + 1, .page_count);
    current_ise [ise$l_imgvst] = .current_vpn * a_page;			! Set the starting and ending virtual addresses
    current_ise [ise$l_imgvend] = .current_ise [ise$l_imgvst] +	(.page_count * a_page) - 1;	! for the section.
    pat$gl_newvpnmx = .current_vpn;					! Update the max VPN processed.
    pat$gl_newvbnmx = .current_vpn + 1;					! Likewise with the VBN.
    END;    ! of INCR

pat$gl_oldvbnmx = .pat$gl_newvbnmx;					! Set the highest VBN for the old file too.

END;    ! of ROUTINE build_ihd


%SBTTL	'PAT$CREMAP -- MAP SECTIONS'
GLOBAL ROUTINE PAT$CREMAP(ISEADR) :NOVALUE =			! CREATES AND MAPS AN IMAGE SECTION

!++
! FUNCTIONAL DESCRIPTION:
!
!	THIS ROUTINE CREATES AND MAPS IMAGE SECTIONS.  ALL SECTIONS
!	ARE MAPPED WRITABLE.  GLOBAL SECTIONS WHICH MUST ALWAYS BE 
!	OBTAINED EXTERNALLY, WILL NOT BE MAPPED (AS PATCH HAS NO WAY TO
!	OBTAIN THEM) AND INSTEAD, AN ERROR IS REPORTED.  IF THERE
!	IS A LOCAL COPY OF THE GLOBAL SECTION, THEN THAT WILL BE PATCHED
!	NO MATTER WHAT THE MATCH CONTROL FIELD CONTAINS.
!
!	THE IMAGE SECTION DESCRIBING THE STACK MAY NOT BE PATCHED.
!
!	THE IMAGE SECTION ENTRY IS UPDATED TO CONTAIN THE MAPPED VIRTUAL ADDRESSES.
!
!	THE SECTION IS MAPPED INTO THE FIRST AVAILABLE ADDRESSES IN P0 SPACE.
!
! FORMAL PARAMETERS:
!
!	CURISE - ADDRESS OF IMAGE SECTION ENTRY TO BE MAPPED
!
! IMPLICIT INPUTS:
!
!	THE OLD IMAGE FILE HAS BEEN SET UP FOR INPUT.
!
! IMPLICIT OUTPUTS:
!
!	THE IMAGE SECTION IS MAPPED AND THE IMAGE SECTION ENTRY UPDATED.
!
! ROUTINE VALUE:
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	ERROR MESSAGE IS REPORTED IF UNABLE TO MAP OR MAP FAILS.
!	IMAGE SECTION IS MAPPED.
!
!--

BEGIN

LOCAL
	IMG_FIL_DESC: VECTOR[2,LONG],				! TEMPORARY IMAGE FILE NAME DESCRIPTOR
	CURISD: REF BLOCK[,BYTE];				! CONTAINS ADDRESS OF ISD PART OF ISE
MAP
	ISEADR: REF BLOCK[,BYTE];				! CONTAINS ADDRESS OF IMAGE SECTION ENTRY

!++
! SET UP THE VIRTUAL PAGES TO MAP IMAGE SECTION TO.
!--
CURISD=.ISEADR + ISE$C_SIZE;					! SET ADDRESS OF ISD PART OF ISE
PAT$GL_ISVADDR[START_OFF]= 200;					! START MAPPING AT FISRT AVAILABLE ADDRESS IN P0.
PAT$GL_ISVADDR[END_OFF]= 200;					! MAP AS MUCH AS NEEDED (.CURISD[ISD$W_PAGCNT]).

IMG_FIL_DESC[0]=.PAT$GL_OLDNBK[NAM$B_RSL];			! SET LENGTH OF NAME
IMG_FIL_DESC[1]=PAT$GB_OLDNAME;					! SET ADDRESS OF NAME

!++
! CHECK FOR STACK IMAGE SECTION DESCRIPTOR.
!--
IF .CURISD[ISD$B_TYPE] EQL ISD$K_USRSTACK
THEN
	SIGNAL(PAT$_NOACCESS);					! REPORT ERROR

!++
! CHECK FOR DEMAND ZERO IMAGE SECTIONS.
!--
IF .CURISD[ISD$V_DZRO]
THEN
	BEGIN
!	PAT$GL_ERRCODE=$CRMPSC(	  INADR=PAT$GL_ISVADDR		! CREATE AND MAP IMAGE SECTION
!				, RETADR=ISEADR[ISE$L_MAPVST]	! RETURNED MAP START AND END ADDRESSES
!				, FLAGS=(SEC$M_DZRO OR SEC$M_WRT OR SEC$M_CRF OR SEC$M_EXPREG) ! READ/WRITE AND DEMAND ZERO
!				, CHAN=.PAT$GL_OLDFAB[FAB$L_STV] ! CHANNEL NUMBER
!				, PAGCNT=.CURISD[ISD$W_PAGCNT]); ! NUMBER OF PAGES TO MAP
	PAT$GL_ERRCODE=LIB$_CREMAPSEC(	PAT$GL_ISVADDR
					, ISEADR[ISE$L_MAPVST]
					, (SEC$M_DZRO OR SEC$M_WRT OR SEC$M_CRF OR SEC$M_EXPREG)
					, 0
					, 0
					, IMG_FIL_DESC
					, .CURISD[ISD$W_PAGCNT]
					, 0);
	IF NOT .PAT$GL_ERRCODE
	THEN
		SIGNAL(PAT$_SYSERROR,0,.PAT$GL_ERRCODE);		! REPORT ERROR
	END

!++
! IF NOT DEMAND ZERO, THEN CHECK FOR A GLOBAL SECTION THAT HAS NO LOCAL COPY.
!--
ELSE
	BEGIN
	IF .CURISD[ISD$V_GBL]					! IF IT IS GLOBAL
	THEN
		IF (.CURISD[ISD$L_VBN] EQL 0)			! AND DOES NOT HAVE A LOCAL COPY
		THEN
			SIGNAL(PAT$_GBLONLY,1,CURISD[ISD$T_GBLNAM]); ! THEN REPORT ERROR AND UNWIND/EXIT
!	PAT$GL_ERRCODE=$CRMPSC(	  INADR=PAT$GL_ISVADDR		! CREATE AND MAP IMAGE SECTION
!				, RETADR=ISEADR[ISE$L_MAPVST]	! RETURNED MAP STAR AND END ADDRESSES
!				, VBN=.CURISD[ISD$L_VBN]	! BLOCK ADDRESS OF FIRST BLOCK TO MAP
!				, FLAGS=(SEC$M_WRT OR SEC$M_CRF OR SEC$M_EXPREG)	! READ/WRITE
!				, CHAN=.PAT$GL_OLDFAB[FAB$L_STV] ! CHANNEL NUMBER
!				, PAGCNT=.CURISD[ISD$W_PAGCNT]); ! NUMBER OF PAGES TO MAP

	PAT$GL_ERRCODE=LIB$_CREMAPSEC(	PAT$GL_ISVADDR,
				ISEADR[ISE$L_MAPVST],
				IF .PAT$GL_FLAGS [PAT$S_ABSOLUTE] AND NOT .PAT$GL_FLAGS [PAT$S_NEW_VERSION]
				 THEN (SEC$M_WRT OR SEC$M_EXPREG)
				 ELSE (SEC$M_WRT OR SEC$M_CRF OR SEC$M_EXPREG),
				0,
				0,
				IMG_FIL_DESC,
				.CURISD[ISD$W_PAGCNT],
				.CURISD[ISD$L_VBN],
				0,
				IF .PAT$GL_FLAGS [PAT$S_ABSOLUTE] AND NOT .PAT$GL_FLAGS [PAT$S_NEW_VERSION]
				 THEN  PAT$GL_CHANUM);


	IF NOT .PAT$GL_ERRCODE
	THEN
		SIGNAL(PAT$_SYSERROR,0,.PAT$GL_ERRCODE);	! REPORT ERROR
	RETURN							! RETURN ALWAYS SUCCESSFULLY
	END;

!++
! UPDATE THE LAST MAPPED ADDRESSES IN P0.
!--
	PAT$GL_ISVADDR [START_OFF] = .ISEADR [ISE$L_MAPVST];
	PAT$GL_ISVADDR [END_OFF] = .ISEADR [ISE$L_MAPVEND];	

END;								! END OF PATMAP

END								! END OF MODULE
ELUDOM
