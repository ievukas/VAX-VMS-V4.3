MODULE parse2		(IDENT='V04-000',
			ADDRESSING_MODE(EXTERNAL=GENERAL))
= BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! Facility:	Command Definition Utility, CLD Parser Module 2
!
! Abstract:	This module is one of a few modules that implements the
!		parser for CLD files.  This parser translates the CLD source
!		language into an intermediate representation composed of
!		nodes linked in a directed graph.
!
! Environment:	Standard CDU environment.
!
! Author:	Paul C. Anagnostopoulos
! Creation:	6 December 1982
!
! Modifications:
!--


library 'sys$library:lib';
require 'clitabdef';
require 'cdureq';

!	T A B L E   O F   C O N T E N T S
!	---------   ---   ---------------

forward routine
	cdu$param_clause,
	cdu$qual_clause,
	cdu$type_clause,
	cdu$keyword_clause,
	cdu$common_clause,
	cdu$value_clause,
	cdu$builtin_type,
	cdu$cli_flag;


!	E X T E R N A L   R E F E R E N C E S
!	---------------   -------------------

external routine
	cdu$check_for_children,
	cdu$create_node,
	cdu$get_next_token,
	cdu$lookup_child,
	cdu$report_syntax_error,
	cdu$token_must_be;

external
	cdu$gl_token_class: long,
	cdu$gq_token: descriptor;

!++
! Description:	This syntax routine recognizes the "param-clause" construct,
!		which is used to define the characteristics of a parameter.
!
! Parameters:	parent		By reference, parent node of this construct.
!
! Returns:	The top-level node representing the parameter clause,
!		or zero if there aren't any more.
!		
!
! Notes:
!--

GLOBAL ROUTINE cdu$param_clause(parent: ref node)
= BEGIN

local
	clause: ref node;


! Determine which kind of clause we have.

if token_is(tkn_k_symbol,'PROMPT') then (

	! We have an PROMPT clause.  It conflicts with any existing clause.

	if cdu$check_for_children(.parent,node_k_prompt) then
		cdu$report_syntax_error(msg(cdu$_dupprompt));

	! Bypass any optional equal sign.

	cdu$get_next_token();
	skip_optional_token(tkn_k_equal);

	! Now we have a symbol or string which is the prompt.  Store the
	! prompt in a node.

	clause = cdu$create_node(node_k_prompt,.cdu$gq_token[len],.cdu$gq_token[ptr]);
	if token_is(tkn_k_symbol) then
		cdu$get_next_token()
	else
		cdu$token_must_be(tkn_k_string);
	return .clause;
);

! We either have a common clause now, or we've run out of clauses.

return cdu$common_clause(.parent);

END;

!++
! Description:	This syntax routine parses the "qual-clause" construct,
!		which is used to describe the characteristics of a qualifier.
!
! Parameters:	parent		By reference, parent node of this construct.
!
! Returns:	The top-level node representing the qualifier clause,
!		or zero if there aren't any more.
!
! Notes:
!--

GLOBAL ROUTINE cdu$qual_clause(parent: ref node)
= BEGIN

local
	clause: ref node;


! Determine which kind of clause we have.

if token_is(tkn_k_symbol,'BATCH') then (

	! We have a BATCH clause.  It is represented by a node.

	cdu$get_next_token();
	return cdu$create_node(node_k_batch);
);

if token_is(tkn_k_symbol,'NEGATABLE') then (

	! We have a NEGATABLE clause.  It is represented by a node.
	! This clause conflicts with any existing NONNEGATABLE clause.

	if cdu$check_for_children(.parent,node_k_nonnegatable) then
		cdu$report_syntax_error(msg(cdu$_confnonneg));

	cdu$get_next_token();
	return cdu$create_node(node_k_negatable);
);

if token_is(tkn_k_symbol,'NONNEGATABLE') then (

	! We have a NONNEGATABLE clause.  It is represented by a node.
	! This clause conflicts with any existing NEGATABLE clause.

	if cdu$check_for_children(.parent,node_k_negatable) then
		cdu$report_syntax_error(msg(cdu$_confneg));

	cdu$get_next_token();
	return cdu$create_node(node_k_nonnegatable);
);

if token_is(tkn_k_symbol,'PLACEMENT') then (

	! We have an PLACEMENT clause.  It conflicts with any existing clause.

	if cdu$check_for_children(.parent,node_k_placement) then
		cdu$report_syntax_error(msg(cdu$_dupplace));

	! Bypass any optional equal sign.

	cdu$get_next_token();
	skip_optional_token(tkn_k_equal);

	! Now we have a symbol which tell us where the qualifier can appear
	! on the command line.  Create a node with the symbol

	if not token_is(tkn_k_symbol,'GLOBAL') and
	   not token_is(tkn_k_symbol,'LOCAL') and
	   not token_is(tkn_k_symbol,'POSITIONAL') then
		cdu$report_syntax_error(msg(cdu$_invplace));
	clause = cdu$create_node(node_k_placement,.cdu$gq_token[len],.cdu$gq_token[ptr]);
	cdu$token_must_be(tkn_k_symbol);
	return .clause;
);

! We either have a common clause now, or we've run out of clauses.

return cdu$common_clause(.parent);

END;

!++
! Description:	This syntax routine recognizes the "type-clause" construct,
!		used to define the characteristics of a data type.
!
! Parameters:	parent		By reference, parent node of this construct.
!
! Returns:	The top-level node representing the type clause, or zero
!		if there aren't any more.
!
! Notes:
!--

GLOBAL ROUTINE cdu$type_clause(parent: ref node)
= BEGIN

local
	clause: ref node,
	item: ref node,
	last_item: ref node;


! Determine which type of clause we have.

if token_is(tkn_k_symbol,'KEYWORD') then (

	! We have a KEYWORD definition.  The first thing must be the
	! keyword name.  Create a node for it.

	cdu$get_next_token();
	clause = cdu$create_node(node_k_keyword,.cdu$gq_token[len],.cdu$gq_token[ptr]);

	! This clause conflicts with any existing KEYWORD clause with the same
	! name.

	if cdu$lookup_child(.parent,node_k_keyword,
			    .clause[node_b_text_length],clause[node_t_text]) neqa 0 then
		cdu$report_syntax_error(msg(cdu$_dupkey),1,clause[node_b_text_length]);
	cdu$token_must_be(tkn_k_symbol);

	! We have a list of keyword definition clauses.  Each is optionally
	! preceded by a comma.  All of the items are chained as children of the
	! main qualifier clause.

	loop (
		skip_optional_token(tkn_k_comma);
		item = cdu$keyword_clause(.clause);
		if .item eqla 0 then exitloop;
		link_parent_to_child(clause,item,last_item);
	);

	return .clause;
);

if token_is(tkn_k_symbol,'PREFIX') then (

	! We have an PREFIX clause.  It conflicts with any existing clause.

	if cdu$check_for_children(.parent,node_k_prefix) then
		cdu$report_syntax_error(msg(cdu$_dupprefix));

	! Bypass any optional equal sign.

	cdu$get_next_token();
	skip_optional_token(tkn_k_equal);

	! Now we have a symbol which is the prefix.  Store it in a node.

	clause = cdu$create_node(node_k_prefix,.cdu$gq_token[len],.cdu$gq_token[ptr]);
	cdu$token_must_be(tkn_k_symbol);
	return .clause;
);

! There are no more type clauses.

return 0;

END;

!++
! Description:	This syntax routine recognizes the "keyword-clause", which
!		is used to define the characteristics of a data type keyword.
!
! Parameters:	parent		By reference, parent node of this construct.
!
! Returns:	The top-level node representing the clause, or zero if
!		there aren't any more.
!
! Notes:
!--

GLOBAL ROUTINE cdu$keyword_clause(parent: ref node)
= BEGIN

local
	clause: ref node;


! Determine which kind of clause we have.

if token_is(tkn_k_symbol,'NEGATABLE') then (

	! We have a NEGATABLE clause.  It is represented by a node.
	! This clause conflicts with any existing NONNEGATABLE clause.

	if cdu$check_for_children(.parent,node_k_nonnegatable) then
		cdu$report_syntax_error(msg(cdu$_confnonneg));

	cdu$get_next_token();
	return cdu$create_node(node_k_negatable);
);

if token_is(tkn_k_symbol,'NONNEGATABLE') then (

	! We have a NONNEGATABLE clause.  It is represented by a node.
	! This clause conflicts with any existing NEGATABLE clause.

	if cdu$check_for_children(.parent,node_k_negatable) then
		cdu$report_syntax_error(msg(cdu$_confneg));

	cdu$get_next_token();
	return cdu$create_node(node_k_nonnegatable);
);

! We either have a common clause now, or we've run out of clauses.

return cdu$common_clause(.parent);

END;

!++
! Description:	This syntax routine recognizes the "common-clause" construct,
!		which is used to define the characteristics of parameters,
!		qualifiers, and keywords.
!
! Parameters:	None
!
! Returns:	The top-level node representing the clause, or zero if
!		there aren't any more.
!
! Notes:
!--

GLOBAL ROUTINE cdu$common_clause(parent: ref node)
= BEGIN

local
	clause: ref node,
	item: ref node,
	last_item: ref node;


! Determine which kind of clause we have.

if token_is(tkn_k_symbol,'CLIFLAGS') then (

	! We have a CLIFLAGS clause.  Create a parent node for the flags.

	clause = cdu$create_node(node_k_cliflags);
	cdu$get_next_token();

	! We have a parenthesized list of CLI flags.
	! Eat the open parenthesis.  Then sit in a loop which recognizes at
	! least one item, along with any others separated by commas.  Finally,
	! eat the close parenthesis.  All of the items are chained as children
	! of the clause.

	cdu$token_must_be(tkn_k_open_paren);
	loop (
		item = cdu$cli_flag();
		link_parent_to_child(clause,item,last_item);
		if not token_is(tkn_k_comma) then exitloop;
		cdu$get_next_token();
	);
	cdu$token_must_be(tkn_k_close_paren);
	return .clause;
);

if token_is(tkn_k_symbol,'DEFAULT') then (

	! We have a DEFAULT clause.  It is represented by a node.

	cdu$get_next_token();
	return cdu$create_node(node_k_default);
);

if token_is(tkn_k_symbol,'LABEL') then (

	! We have an LABEL clause.  It conflicts with any existing clause.

	if cdu$check_for_children(.parent,node_k_label) then
		cdu$report_syntax_error(msg(cdu$_duplabel));

	! Bypass any optional equal sign.

	cdu$get_next_token();
	skip_optional_token(tkn_k_equal);

	! Finally we have a symbol which is the label.  Make a node for it.

	clause = cdu$create_node(node_k_label,.cdu$gq_token[len],.cdu$gq_token[ptr]);
	cdu$token_must_be(tkn_k_symbol);
	return .clause;
);

if token_is(tkn_k_symbol,'SYNTAX') then (

	! We have an SYNTAX clause.  It conflicts with any existing clause.

	if cdu$check_for_children(.parent,node_k_syntax) then
		cdu$report_syntax_error(msg(cdu$_dupsyntax));

	! Bypass any optional equal sign.

	cdu$get_next_token();
	skip_optional_token(tkn_k_equal);

	! Finally we have a symbol which is the name of the syntax definition.
	! Make a node for it.

	clause = cdu$create_node(node_k_syntax,.cdu$gq_token[len],.cdu$gq_token[ptr]);
	cdu$token_must_be(tkn_k_symbol);
	return .clause;
);

if token_is(tkn_k_symbol,'VALUE') then (

	! We have a VALUE clause.  It conflicts with any existing clause.

	if cdu$check_for_children(.parent,node_k_value) then
		cdu$report_syntax_error(msg(cdu$_dupvalue));

	! Create a node to represent the clause.

	clause = cdu$create_node(node_k_value);
	cdu$get_next_token();

	! We have an optional parenthesized list of subclauses.
	! Eat the open parenthesis.  Then sit in a loop which recognizes at
	! least one item, along with any others separated by commas.  Finally,
	! eat the close parenthesis.  All of the items are chained as children
	! of the clause.

	if token_is(tkn_k_open_paren) then (
		cdu$get_next_token();
		loop (
			item = cdu$value_clause(.clause);
			link_parent_to_child(clause,item,last_item);
			if not token_is(tkn_k_comma) then exitloop;
			cdu$get_next_token();
		);
		cdu$token_must_be(tkn_k_close_paren);
	);

	return .clause;
);

! We don't have any more common clauses.

return 0;

END;

!++
! Description:	This syntax routine recognizes a "value-clause" contruct,
!		which is used to define the characteristics of a value.
!
! Parameters:	parent		By reference, parent node of this construct.
!
! Returns:	The top-level node for the value clause.
!
! Notes:
!--

GLOBAL ROUTINE cdu$value_clause(parent: ref node)
= BEGIN

local
	clause: ref node;


! Determine which kind of clause we have.

if token_is(tkn_k_symbol,'CONCATENATE') then (

	! We have a CONCATENATE clause.  It conflicts with any existing
	! NOCONCATENATE clause.

	if cdu$check_for_children(.parent,node_k_noconcatenate) then
		cdu$report_syntax_error(msg(cdu$_confnocon));

	! Represent the clause with a node.

	cdu$get_next_token();
	return cdu$create_node(node_k_concatenate);
);

if token_is(tkn_k_symbol,'NOCONCATENATE') then (

	! We have a NOCONCATENATE clause.  It conflicts with any existing
	! CONCATENATE clause.

	if cdu$check_for_children(.parent,node_k_concatenate) then
		cdu$report_syntax_error(msg(cdu$_confcon));

	! Represent the clause with a node.

	cdu$get_next_token();
	return cdu$create_node(node_k_noconcatenate);
);

if token_is(tkn_k_symbol,'DEFAULT') then (

	! We have a DEFAULT clause.  It conflicts with any existing DEFAULT
	! or REQUIRED clause.

	if cdu$check_for_children(.parent,node_k_default,node_k_required) then
		cdu$report_syntax_error(msg(cdu$_confdefreq));

	! Bypass any optional equal sign.

	cdu$get_next_token(tkn_k_h_string);
	skip_optional_token(tkn_k_equal,tkn_k_h_string);

	! The next token is either the default value, or an open
	! parenthesis to start a list of values.  We need a buffer to
	! accumulate the values.

	with_dbuffer(values,tkn_k_max_length,

		! Clear the buffer.

		values[len] = 0;

		if not token_is(tkn_k_open_paren) then (

			! It is not an open parenthesis, so it must be the
			! default value.  Add it to our buffer as an ASCIC
			! string.

			ch$wchar(.cdu$gq_token[len], .values[ptr]);
			ch$move(.cdu$gq_token[len],.cdu$gq_token[ptr], .values[ptr]+1);
			values[len] = 1 + .cdu$gq_token[len];
			cdu$token_must_be(tkn_k_string);

		) else (

			! We have a parenthesized list of default values.
			! Eat the open parenthesis.  Then sit in a loop which
			! recognizes at least one value, along with any others
			! separated by commas.  Finally, eat the close paren.
			! All of the names go in the buffer as ASCIC strings.

			cdu$get_next_token();
			loop (
				ch$wchar(.cdu$gq_token[len], .values[ptr]+.values[len]);
				ch$move(.cdu$gq_token[len],.cdu$gq_token[ptr],
					.values[ptr]+.values[len]+1);
				values[len] = .values[len] + 1 + .cdu$gq_token[len];
				cdu$token_must_be(tkn_k_string);
				if not token_is(tkn_k_comma) then exitloop;
				cdu$get_next_token();
			);
			cdu$token_must_be(tkn_k_close_paren);
		);

		! Create a node to represent the defaults, and put the values
		! in it.

		clause = cdu$create_node(node_k_default,.values[len],.values[ptr]);
	);

	! Check the length of the default values..

	if .clause[node_b_text_length] gtru ent_k_max_defval-1 then
		cdu$report_syntax_error(msg(cdu$_defaultlen),1,ent_k_max_defval-2);

	return .clause;
);

if token_is(tkn_k_symbol,'IMPCAT') then (

	! We have an IMPCAT clause.  It is represented by a node.

	cdu$get_next_token();
	return cdu$create_node(node_k_impcat);
);

if token_is(tkn_k_symbol,'LIST') then (

	! We have a LIST clause.  It is represented by a node.

	cdu$get_next_token();
	return cdu$create_node(node_k_list);
);

if token_is(tkn_k_symbol,'REQUIRED') then (

	! We have a REQUIRED clause.  It is represented by a node.
	! This clause conflicts with any existing DEFAULT clause.

	if cdu$check_for_children(.parent,node_k_default) then
		cdu$report_syntax_error(msg(cdu$_confdefreq));

	cdu$get_next_token();
	return cdu$create_node(node_k_required);
);

if token_is(tkn_k_symbol,'TYPE') then (

	! We have a TYPE clause.  It conflicts with any existing clause.

	if cdu$check_for_children(.parent,node_k_type_builtin,node_k_type_user) then
		cdu$report_syntax_error(msg(cdu$_duptype));

	! Bypass any optional equal sign.

	cdu$get_next_token();
	skip_optional_token(tkn_k_equal);

	! Now we have a symbol which is the name of the desired type.
	! If it begins with a dollar sign, then it's a builtin type and
	! we create a node with the type code.  Otherwise it's a
	! user-defined type and we create a node with the symbol.

	if ch$rchar(.cdu$gq_token[ptr]) eqlu '$' then (
		local
			type_code: byte;

		type_code = cdu$builtin_type();
		clause = cdu$create_node(node_k_type_builtin,1,type_code);
	) else
		clause = cdu$create_node(node_k_type_user,.cdu$gq_token[len],.cdu$gq_token[ptr]);

	cdu$token_must_be(tkn_k_symbol);
	return .clause;
);

! Oops, it isn't one of the above clauses.  Tell the user and return
! an error node.

cdu$report_syntax_error(msg(cdu$_invvalclause));
return cdu$create_node(node_k_error);

END;

!++
! Description:	This syntax routine recognizes a builtin type symbol,
!		which can be specified in a TYPE clause.
!
! Parameters:	None.
!
! Returns:	By value, the corresponding numeric code.  Zero is returned
!		if the name is invalid.
!
! Notes:
!--

ROUTINE cdu$builtin_type
= BEGIN

own
	type_names: vector[ent_k_max_valtype+1,long] initial(
			ctext(''),
			ctext('$INFILE'),
			ctext('$OUTFILE'),
			ctext('$NUMBER'),
			ctext('$PRIVILEGE'),
			ctext('$DATETIME'),
			ctext('$PROTECTION'),
			ctext('$PROCESS'),
			ctext('$INLOG'),
			ctext('$OUTLOG'),
			ctext('$INSYM'),
			ctext('$OUTSYM'),
			ctext('$NODE'),
			ctext('$DEVICE'),
			ctext('$DIRECTORY'),
			ctext('$UIC'),
			ctext('$REST_OF_LINE'),
			ctext('$PARENTHESIZED_VALUE'),
			ctext('$DELTATIME'),
			ctext('$QUOTED_STRING'),
			ctext('$FILE'),
			ctext('$EXPRESSION'),
			ctext('$$TEST1'),
			ctext('$$TEST2'),
			ctext('$$TEST3'),
			ctext('$ACL')
			),

	type_codes: vector[ent_k_max_valtype+1,byte] initial(byte(
			0,
			ent_k_infile,
			ent_k_outfile,
			ent_k_number,
			ent_k_privilege,
			ent_k_datetime,
			ent_k_protection,
			ent_k_process,
			ent_k_inlog,
			ent_k_outlog,
			ent_k_insym,
			ent_k_outsym,
			ent_k_node,
			ent_k_device,
			ent_k_dir,
			ent_k_uic,
			ent_k_restofline,
			ent_k_parenvalue,
			ent_k_deltatime,
			ent_k_quotedstring,
			ent_k_file,
			ent_k_expression,
			ent_k_test1,
			ent_k_test2,
			ent_k_test3,
			ent_k_acl
			));


! Sit in a loop searching the table of type names for the symbol in the
! token buffer.  If a match is found, return its corresponding number.

incru i from 1 to ent_k_max_valtype do (
	bind
		name = .type_names[.i]: vector[,byte];

	if ch$eql(.cdu$gq_token[len],.cdu$gq_token[ptr], .name[0],name[1],' ') then
		return .type_codes[.i];
);

! The user specified an invalid builtin type.

cdu$report_syntax_error(msg(cdu$_invtype),1,cdu$gq_token);
return 0;

END;

!++
! Description:	This syntax routine recognizes the "cli-flag" construct,
!		which is simply one of the allowable CLI flags.
!
! Parameters:	parent		By reference, parent node of this construct.
!
! Returns:	A node representing the flag.
!
! Notes:
!--

GLOBAL ROUTINE cdu$cli_flag(parent: ref node)
= BEGIN

local
	flag: ref node;


! Determine which CLI flag we have.

flag =	(if token_is(tkn_k_symbol,'ABBREVIATE') then
		cdu$create_node(node_k_abbrev)
	else if token_is(tkn_k_symbol,'FOREIGN') then
		cdu$create_node(node_k_foreign)
	else if token_is(tkn_k_symbol,'IMMEDIATE') then
		cdu$create_node(node_k_immed)
	else if token_is(tkn_k_symbol,'MCRIGNORE') then
		cdu$create_node(node_k_mcrignore)
	else if token_is(tkn_k_symbol,'MCROPTDELIM') then
		cdu$create_node(node_k_mcroptdelim)
	else if token_is(tkn_k_symbol,'MCRPARSE') then
		cdu$create_node(node_k_mcrparse)
	else if token_is(tkn_k_symbol,'NOSTATUS') then
		cdu$create_node(node_k_nostat)
	else
		cdu$create_node(node_k_error)
	);

! If we didn't find one, that's an error.  Go on to the next token.

if .flag[node_w_type] eqlu node_k_error then
	cdu$report_syntax_error(msg(cdu$_invcliflag),1,cdu$gq_token);
cdu$token_must_be(tkn_k_symbol);
return .flag;
	
END;
END
ELUDOM
