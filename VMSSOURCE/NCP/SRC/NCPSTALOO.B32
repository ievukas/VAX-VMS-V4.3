%TITLE	'Loop Parse States and Data'
MODULE NCPSTALOO	(	!
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Control Program (NCP)
!
! ABSTRACT:
!
!	States and data for the parsing of NCP loop commands
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE: 25-September-79
!
! MODIFIED BY:
!
!	V03-004	RPG0004		Bob Grosso		17-May-1983
!		Change XMIT help type to TRANSMIT.
!
!	V03-003	RPG0003		Bob Grosso		22-Mar-1983
!		Add Loop circuit node LPN, and Loop circuit assis node, LAN.
!
!	V03-002	RPG0002		Bob Grosso		09-Mar-1983
!		Add LOOP CIR cir PHYSICAL ADDRESS.  (PHA)
!
!	V03-001	RPG0001		Bob Grosso		13-Jul-1982
!		Add LPA, and LPH.
!
!	V001	TMH0001		Tim Halvorsen	22-Jun-1981
!		Change BUILD_SDB reference to use full entity type field.
!		Change to loop via circuit as well as line and node.
!--

%SBTTL	'Definitions'

!
! INCLUDE FILES:
!

	LIBRARY 'LIB$:NMALIBRY';
	LIBRARY 'LIB$:NCPLIBRY';
	LIBRARY 'SYS$LIBRARY:TPAMAC';

!
! EXTERNAL REFERENCES:
!

	ACT_DFN				! External symbols for action routines

%SBTTL	'Parameter blocks'

!
! BIND DATA:
!

!
!	Parameter Blocks
!

	BUILD_PCL

	(LOO,

	CNT, NUMW,	PCNO_LPC, ,
	LEN, NUMW,	PCNO_LPL, ,
	WTH, NUMB,	PCNO_LPD, ,
	PHA, NIADR,	PCNO_PHA, ,
	LPA, NIADR,	PCNO_LPA, ,
	LPH, NUMB,	PCNO_LPH, ,
	LPN, NADR,	PCNO_LPN, ,
	LAN, NADR,	PCNO_LAN, ,

	, END, , ,

	)

	BUILD_PBK

	(LOO,

	EXE, LITL, 0, VRB_ENT,
	LIN, TKN, , VRB_ENT,
	NOD, NADR, , VRB_ENT,
	CIR, TKN, , VRB_ENT,
	CNT, NUMW, , ,
	LEN, NUMW, , ,
	MIX, LITB, NMA$C_LOOP_MIX, LOO_WTH,
	ONE, LITB, NMA$C_LOOP_ONE, LOO_WTH,
	ZER, LITB, NMA$C_LOOP_ZER, LOO_WTH,
	PHA, NIADR, , ,
	LPA, NIADR, , ,
	XMT, LITB, NMA$C_LOOP_XMIT, LOO_LPH,
	RCV, LITB, NMA$C_LOOP_RECV, LOO_LPH,
	FUL, LITB, NMA$C_LOOP_FULL, LOO_LPH,
	LPN, NADR, , ,
	LAN, NADR, , ,

	ACC, TKNQ, , ,			! Access control does not appear
	PSW, TKNQ, , ,			! in PCL.  It is built into message
	USR, TKNQ, , ,			! by hand.

	)

	BUILD_SDB

	(LOO, NMA$C_ENT_NOD, VRB_ENT, LOO)

%SBTTL	'Prompt strings'

!
!	Build prompt strings
!

BIND

	PROMPT_STRINGS
	(LOO,

	ENT, %STRING('      (EXECUTOR, CIRCUIT circuit-name,', CRLF,
		'           LINE line-id, NODE node-id): '),
	LIN, 'Line to test               (dev-c-u.t): ',
	CIR, 'Circuit to test         (circuit-name): ',
	NOD, 'Node to loop to   (node-name, address): ',
	LPH, 'Help type to use  (TRANSMIT, RECEIVED, FULL): ',
	WTH, 'Data type to use  (ONES, MIXED, ZEROS): ',

	)
	;

%SBTTL	'State Table Entry'

$INIT_STATE (NCP$G_STTBL_LOO, NCP$G_KYTBL_LOO);

!
!	Loop Command
!

!
!	Dispatch to entity types and prompt if end of string
!

	COMMAND_PROMPT
	(LOO, ENT, NCP$_INVKEY,

	('CIRCUIT',	ST_LOO_CIR),
	('EXECUTOR',	ST_LOO_EXE),
	('LINE', 	ST_LOO_LIN),
	('NODE', 	ST_LOO_NOD)

	)


!
!	Obtain the circuit name
!

	COMMAND_PROMPT
	(LOO, CIR, NCP$_INVVAL,

	( (SE_CIRC_ID), ST_LOO_PRM, ACT$SAVPRM, NMA$C_ENT_CIR,
					NCP$GL_OPTION, PBK$G_LOO_CIR)

	)

!
!	Obtain the line id
!

	COMMAND_PROMPT
	(LOO, LIN, NCP$_INVVAL,

	( (SE_LINE_ID), ST_LOO_PRM, ACT$SAVPRM, NMA$C_ENT_LIN,
					NCP$GL_OPTION, PBK$G_LOO_LIN)

	)

!
!	Obtain the node id
!

	COMMAND_PROMPT
	(LOO, NOD, NCP$_INVVAL,

	( (SE_NODE_ID), ST_LOO_PRM, ACT$SAVPRM, NMA$C_ENT_NOD,
					NCP$GL_OPTION, PBK$G_LOO_NOD)

	)

!
!	Loop to the executor
!

$STATE	(ST_LOO_EXE,
	(TPA$_LAMBDA, ST_LOO_PRM, ACT$SAVPRM, , , PBK$G_LOO_EXE)
	);

%SBTTL	'Loop Parameters'

!
!	Loop Parameters
!

!
!	Process parameters or prompt
!

$STATE	(ST_LOO_PRM,
	(TPA$_EOS, , ACT$PMT_ON),
	(TPA$_LAMBDA, ST_LOO_PRC, ACT$PMT_OFF)
	);

!
!	Perform the function
!

$STATE	(ST_LOO_DOIT,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_LOOP, , , SDB$G_LOO)
	);

%SBTTL	'Dispatch States'

!
!	Dispatch States
!

$STATE	(ST_LOO_PRC,

	DISPATCH_STATES
	(LOO,

	ACC, 'ACCOUNT',
	ASS, 'ASSISTANT',
	CNT, 'COUNT',
	LPH, 'HELP',
	LEN, 'LENGTH',
	LPN, 'NODE',
	PSW, 'PASSWORD',
	PHA, 'PHYSICAL',
	USR, 'USER',
	WTH, 'WITH',

	)
	,( (SE_LOO_WTH), ST_LOO_PRC),
	(TPA$_LAMBDA, ST_LOO_DOIT)
	);

!
!	Parse LOOP ASSISTANT PHYSICAL ADDRESS
!	LOOP ASSISTANT NODE
!

$STATE	(ST_LOO_PRC_ASS,
	('PHYSICAL', ST_LOO_PRC_LPA),
	('NODE', ST_LOO_PRC_LAN)
	);


%SBTTL	'Process States'

!
!	Process States
!

	PROCESS_STATES
	(LOO,

	ACC, ,
	LPA, 'ADDRESS',
	LAN, ,
	CNT, ,
	LPH, ,
	LEN, ,
	LPN, ,
	PSW, ,
	PHA, 'ADDRESS',
	USR, ,
	WTH, ,

	)


%SBTTL	'Subexpressions'

!
!	Subexpressions
!

	SUB_EXPRESSIONS
	(LOO,

	ACC, (SE_LOO_ACC),
	LPA, (SE_NI_ADR),
	LAN, (SE_NODE_ID),
	CNT, TPA$_DECIMAL,
	LEN, TPA$_DECIMAL,
	LPN, (SE_NODE_ID),
	PSW, (SE_LOO_PSW),
	PHA, (SE_NI_ADR),
	USR, (SE_LOO_USR),

	)

!
!	Subexpression to accept the data type
!

	COMMAND_PROMPT
	(LOO, LPH, NCP$_INVKEY,

	( (SE_LOO_LPH), TPA$_EXIT)

	)

!
!	Subexpression with no prompting
!

$STATE	(SE_LOO_LPH,

	KEYWORD_STATE
	(LOO,

	XMT, 'TRANSMIT',
	RCV, 'RECEIVED',
	FUL, 'FULL',

	)
	);

!
!	Subexpression to accept the data type
!

	COMMAND_PROMPT
	(LOO, WTH, NCP$_INVKEY,

	( (SE_LOO_WTH), TPA$_EXIT)

	)

!
!	Subexpression with no prompting
!

$STATE	(SE_LOO_WTH,

	KEYWORD_STATE
	(LOO,

	MIX, 'MIXED',
	ONE, 'ONES',
	ZER, 'ZEROES',

	)
	);

!
!	Subexpressions for access control
!


$STATE	(SE_LOO_ACC,
	( (SE_ACC_ACC), ST_LOO_SETACC)
	);
$STATE	(SE_LOO_PSW,
	( (SE_ACC_PSW), ST_LOO_SETACC)
	);
$STATE	(SE_LOO_USR,
	( (SE_ACC_USR), ST_LOO_SETACC)
	);

$STATE	(ST_LOO_SETACC,		! Set option bit for access control present
	(TPA$_LAMBDA, TPA$_EXIT, , NMA$M_OPT_ACC, NCP$GL_OPTION, )
	);


%SBTTL	'Define Subexpressions from Library'

!
!	Define subexpressions from library
!

	SEM_QUOT_STR		! Quoted strings
	SEM_ACCESS		! Access control parsing
	SEM_NODE_ID		! Node id strings
	SEM_NI_ADR		! NI address
	SEM_LINE_ID		! Line id strings
	SEM_CIRC_ID		! Circuit name string

%SBTTL	'Object Listing of Parse Table'

END				!End of module
ELUDOM
