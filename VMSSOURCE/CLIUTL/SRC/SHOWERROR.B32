MODULE showerror (IDENT = 'V04-000',
		  ADDRESSING_MODE (EXTERNAL = GENERAL)) =

BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:  SHOW utility
!
! ABSTRACT:
!	This module contains the routines for the SHOW ERROR command.
!
! ENVIRONMENT:
!	VAX native, user and kernel mode
!
! AUTHOR:  Gerry Smith		 CREATION DATE:  28-Jul-1982
!
! MODIFIED BY:
!
!	V03-002	GAS0149		Gerry Smith		29-Jun-1983
!		Use IOC$CVT_DEVNAM to get the device name.
!
!	V03-001	GAS0117		Gerry Smith		12-Apr-1983
!		Change display to work with long device names.
!
!--


!
! Include files
!

LIBRARY 'SYS$LIBRARY:LIB';		! VAX/VMS system definitions
REQUIRE 'SRC$:SHOWDEF';			! SHOW common definitions

!
! Define the linkage for the routines to lock and unlock the I/O database,
! scan the databse, and fabricate the device name.
!
LINKAGE
    IOLOCK = JSB (REGISTER = 4),
    IOSCAN = JSB (REGISTER = 11,		! Call with DDB,
	    	  REGISTER = 10;		! UCB,
		  REGISTER = 11,		! Return with DDB,
		  REGISTER = 10),		! UCB
    CVTDEV = JSB (REGISTER = 0,			! Length of output buffer,
		  REGISTER = 1,			! Address of output buffer
		  REGISTER = 4,			! Format of device name
		  REGISTER = 5;			! Address of UCB
		  REGISTER = 1);		! Length of final name



!
! Define the flags longword bits.
!
MACRO
    SHOW$V_BRIEF	=	0, 0, 1, 0%,		! /BRIEF
    SHOW$V_FULL		=	0, 1, 1, 0%;		! /ALL


!
! Define macros to describe the fields in the scratch area.
!
MACRO
    d_l_devlen 	=  0, 0, 32, 0%,		! Device name length
    d_a_ptr	=  4, 0, 32, 0%,		! Pointer to device name
    d_l_errcnt  =  8, 0, 32, 0%,		! Error count
    d_t_name    = 12, 0,  8, 0%;		! Device name
LITERAL d_k_length = $BYTEOFFSET(d_t_name) + 21;

EXTERNAL LITERAL
    show$_noerrors;				! No device errors found


!
! Table of contents
!

FORWARD ROUTINE
    show$errors : NOVALUE,
    get_data,
    print_data : NOVALUE;

EXTERNAL
    scs$ga_localsb,
    exe$gl_mchkerrs,
    exe$gl_memerrs,
    ioc$gl_devlist,
    sch$gl_curpcb;

EXTERNAL ROUTINE
    cli$present,
    lib$get_vm,
    show$write_line : NOVALUE,
    ioc$scan_iodb : IOSCAN,
    ioc$cvt_devnam : CVTDEV,
    sch$iolockr : IOLOCK,
    sch$iounlock : IOLOCK;

GLOBAL ROUTINE show$errors : NOVALUE =
BEGIN

LOCAL
    status,				! General status return
    flags : $BBLOCK[4],			! Flags longword
    arglst : VECTOR[3],			! Argument list for $CMKRNL call
    data : VECTOR[2];			! Address limits of scratch area

!
! Obtain any qualifiers, if present.
!
flags[show$v_brief] = cli$present(%ASCID 'BRIEF');
flags[show$v_full]  = cli$present(%ASCID 'FULL');

!
! Allocate a scratch area in which to put data about the errors.
! The beginning and ending addresses of the area will be returned in DATA.
!
IF NOT (status = lib$get_vm(%REF(64*512),	! Request 64 pages
			    data))		! Put address limits here
THEN SIGNAL_STOP(show$_insvirmem, 0, .status);	! Stop if error.
data[1] = .data[0] + 64*512 - 1;		! Compute end of area
!
! Call the data-gathering routine in kernel mode, passing the address of the 
! address limits as an argument.  Save the status.
!
arglst[0] = 2;
arglst[1] = data;
arglst[2] = flags;
IF NOT (status = $CMKRNL(ROUTIN = get_data,
		         ARGLST = arglst))
THEN
    BEGIN
    IF .status NEQU ss$_vasfull
    THEN
	BEGIN
	SIGNAL(.status);
	RETURN;
	END;
    END;

!
! Format and print the data.
!
print_data(data, flags);

!
! If the status return from $CMKRNL is not 1, then signal that error at this 
! time.  Otherwise, simply return.
!
IF .status NEQ 1
THEN SIGNAL(.status);

RETURN;
END;						! End of show$error

ROUTINE get_data (data, flags) =
BEGIN

LOCAL
    status,					! Status return
    limit,					! End-of-address limit
    scratch : REF $BBLOCK,			! Pointer to scratch area
    ucb : REF $BBLOCK,				! UCB pointer
    ddb : REF $BBLOCK;				! DDB pointer

MAP
    data : REF VECTOR,				! The passed argument is two longwords
    flags : REF $BBLOCK;			! Flags longword
!
! Set up the scratch area so that is can be addressed easily.  Also, calculate
! a limit toward the end of the scratch area, so that we don't write beyond the 
! area.  Finally, set up STATUS as 1, to show that we still have room in the
! scratch area to store more data.
!
scratch = .data[0];				! Point to beginning of scratch area
limit = .data[1] - 256;				! Set the limit to be halfway in to
    						! the last page of the scratch area.

! 
! Lock the I/O data base.  Upon return from the call to SCH$IOLOCKR, the 
! IPL will be 2, so that pagefaults are still allowed.
!
SCH$IOLOCKR(.sch$gl_curpcb);			! Lock the I/O database

!
! For each DDB, examine each UCB associated with it, and see if the error
! count is non-zero.  If so, or if all devices were requested, then store
! the pertinent data into the scratch area.  If the scratch area is exhausted,
! then indicate this by setting STATUS = SS$_VASFULL.
!
status = IOC$SCAN_IODB(0, 0; ddb, ucb);		! Get to first UCB
WHILE .status DO				! Loop thru all UCB's
    BEGIN
    IF NOT .$BBLOCK[ucb[ucb$l_devchar], dev$v_mbx]	! Ignore mailboxes
    AND NOT .ucb[ucb$v_template]			! and template devices
    AND (.flags[show$v_full] OR			! If all desired, or
         .ucb[ucb$w_errcnt] NEQ 0)		! this one has errors
    THEN					! then get information
	BEGIN
	IF .scratch GEQA .limit
	THEN
	    BEGIN
	    status = ss$_vasfull; 
	    EXITLOOP
	    END;
	ioc$cvt_devnam(20,			! Get device name, max this long
		       scratch[d_t_name],	! put it here,
		       -1,			! in standard display format
		       .ucb;			! UCB is here
		       scratch[d_l_devlen]);	! final length here

	scratch[d_l_errcnt] = .ucb[ucb$w_errcnt];
	scratch = .scratch + d_k_length;	! Get to next data block
	END;
    status = IOC$SCAN_IODB(.ddb, .ucb; ddb, ucb);
    END;

!
! Now to clean up.  Unlock the I/O database, then lower the IPL
! to zero.
!
SCH$IOUNLOCK(.sch$gl_curpcb);			! Unlock I/O database
SET_IPL(0);					! Lower IPL

!
! If status = 0, then the entire database has been scanned.
!
IF .status EQL 0
THEN status = 1;

RETURN .status;					! Return with status
END;						! End of GET_DATA

ROUTINE print_data (data, flags) : NOVALUE =
BEGIN

MAP
    data : REF VECTOR,
    flags : REF $BBLOCK;

LOCAL
    scratch : REF $BBLOCK;			! Pointer to scratch area

!
! Set up the scratch area.  
!
scratch = .data[0];				! Scratch area begins here.

!
! Check to see if there are any errors.  If not, go away.  Otherwise,
! print a nice little heading.
!
IF NOT .flags[show$v_full]		! If not a /FULL request
AND .scratch[d_t_name] EQL 0		! and no device errors
AND .exe$gl_mchkerrs EQL 0		! and no CPU errors
AND .exe$gl_memerrs EQL 0		! and no memory errors
THEN
    BEGIN
    SIGNAL(show$_noerrors);
    RETURN;
    END;


show$write_line(%ASCID 'Device               Error Count', 0);

!
! Print CPU or memory errors, if there are any.
!
IF .exe$gl_mchkerrs NEQ 0
OR .flags[show$v_full]
THEN show$write_line(%ASCID '!21<CPU!>   !6UW', %REF(.exe$gl_mchkerrs));

IF .exe$gl_memerrs NEQ 0
OR .flags[show$v_full]
THEN show$write_line(%ASCID '!21<MEMORY!>   !6UW', %REF(.exe$gl_memerrs));

!
! Loop thru the scratch area, taking the data off in the same way it was
! stored.  This will continue until a segment is found which contains a
! device name length of 0.
!
WHILE .scratch[d_l_devlen] NEQ 0
DO
    BEGIN
    scratch[d_l_devlen] = .scratch[d_l_devlen] - 1;
    scratch[d_a_ptr] = scratch[d_t_name] + 1;
    show$write_line(%ASCID '!21<!AF!>   !6UW',
		   .scratch);
    scratch = .scratch + d_k_length;
    END;

RETURN;
END;						! End of PRINT_DATA

END
ELUDOM
