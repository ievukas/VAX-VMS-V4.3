MODULE RM0RCLCK2(
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:
!
!	VAX-11 RMS
!
! ABSTRACT:
!
!	This module contains record locking related routines, specifically
!	timeout on record lock support.
!
! ENVIRONMENT:
!
!	VAX/VMS Operating System, executive mode
!--
!
! AUTHOR: David Solomon, CREATION DATE: 16-Feb-1983
!
! MODIFIED BY:
!
!	V03-004	DAS0001		David Solomon			28-Feb-1984
!		Use ISAM BUG_CHECK macro for bugcheck. Also, remove unnecessary
!		code to set and clear PIO$V_INHAST.
!
!	V03-003	SHZ0002		Stephen H. Zalewski		26-Apr-1983
!		Change PSECT attributes for this module.
!
!	V03-002	MCN0001		Maria del C. Nasr		22-Mar-1983
!		Reorganize linkages
!
!	V03-001	SHZ0001		Stephen H. Zalewski		24-Feb-1983
!		Changed name of module from rm0reclck2 to rm0rclck2 so that
!		when linking we pick up the correct module name.
!
!--

!
! INCLUDE FILES:
!

LIBRARY
    'RMSLIB:RMSINTDEF'
    ;

LIBRARY
    'SYS$LIBRARY:STARLET'
    ;

SWITCHES
    ADDRESSING_MODE( EXTERNAL = GENERAL )
    ;

PSECT
    CODE = RM$RMS0(PSECT_ATTR),
    PLIT = RM$RMS0(PSECT_ATTR)
    ;

!
! MACROS:
!

MACRO
    R_RLB =				! RLB address register declaration.
	RLB = 3 %
    ,R_RLB_STR =			! RLB structure declaration.
	R_RLB : REF BBLOCK %
    ,L_SET_LOCK_TMO =			! Linkage to RM$SET_LOCK_TMO.
	RL$SET_LOCK_TMO =
	JSB:
	GLOBAL( COMMON_RABREG, RLB = 3 )
	PRESERVE( 1, 2 )		! RM$LOCK needs R1 and R2.
	%
    ;

LINKAGE
    L_SET_LOCK_TMO,
    L_JSB;

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    RM$SET_LOCK_TMO: RL$SET_LOCK_TMO	! Set up timer AST for wait on lock.
    ,RM$LOCK_TMO_AST: NOVALUE		! AST routine for lock timeout.
    ;

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    RM$CHKAST_ANY: RL$JSB ADDRESSING_MODE( WORD_RELATIVE )
					! Check for ASTs inhibited.
    ;

%SBTTL 'RM$SET_LOCK_TMO'
GLOBAL ROUTINE RM$SET_LOCK_TMO: RL$SET_LOCK_TMO =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets up a timer as a result of a record lock wait. It is
!	called by RM0RECLCK\DO_ENQ if the user specified ROP bits WAT and TMO.
!
! CALLING SEQUENCE:
!
!	ret-status.wlc.v = RM$SET_LOCK_TMO()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	R3		Address of RLB.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Return status from $SETIMR.
!
! SIDE EFFECTS:
!
!	A timer AST is declared.
!--

BEGIN

LOCAL
    TIMEOUT: VECTOR[2, LONG]		! 64-bit delta time
    ,STATUS				! Holds $SETIMR status.
    ;

EXTERNAL REGISTER
    R_RLB_STR				! RLB.
    ;

!+
! Convert timeout value from seconds to a 64-bit delta time.
!
! Details: delta times are negative, hence the upper longword is %XFFFFFFFF.
! The short cut used to convert the seconds to 100-nanosecond units is
! acceptable here because the number of 100-nanosecond units one can express
! in a longword (429 seconds) is greater than the number of 100-nanosecond units
! one can express in the number of seconds that will fit in a byte (255).
!-

IF .RLB[RLB$B_TMO] NEQU 0		! If the timeout value is non-zero,
THEN					! then convert to delta time.
    BEGIN

    TIMEOUT[0] = .RLB[RLB$B_TMO] * -10000000;
					! Convert seconds to 100-nanoseconds.

    TIMEOUT[1] = -1;			! Upper longword is negative.

    END
ELSE					! Else special case zero timeout.
    BEGIN

    TIMEOUT[0] = 0;

    TIMEOUT[1] = 0;

    END;

!+
! Setup timer request.
!-

STATUS = $SETIMR(			! Value of routine is $SETIMR status.
		DAYTIM = TIMEOUT	! Address of 64-bit delta time.
		,ASTADR = RM$LOCK_TMO_AST
					! Address of AST routine for timeout.
		,REQIDT = .RLB		! ASTPRM (address of RLB).
		);

IF .STATUS				! If successful,
THEN					! then
    RLB[RLB$V_TIMER_INPROG] = 1;	! set timeout in progress flag.

RETURN .STATUS;				! Return $SETIMR status.

END;					! End of routine RM$SET_LOCK_TMO

%SBTTL 'RM$LOCK_TMO_AST'
GLOBAL ROUTINE RM$LOCK_TMO_AST( RLB: REF BBLOCK ): NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This is the AST routine that fires when the timer for a lock
!	request expires. It is declared by a $SETIMR in RM$SET_LOCK_TMO.
!
! CALLING SEQUENCE:
!
!	ret-status.wlc.v = RM$LOCK_TMO_AST( astprm.rlu.v )
!
! FORMAL PARAMETERS:
!
!	ASTPRM		RLB address.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Lock request is dequeued.
!--

BEGIN

BUILTIN
    TESTBITSC
    ;

!+
! Validate ASTPRM (RLB structure).
!-

!** should we probe RLB?
!** should we check RLB BID/BLN?
IF ( .RLB[RLB$B_BID] NEQU RLB$C_BID ) OR ( .RLB[RLB$B_BLN] NEQU RLB$K_BLN/4 )
THEN
    BUG_CHECK;

!+
! Check if ASTs should be inhibited; if so, requeue this AST and do a RET
! (e.g. the routine won't return). If ASTs are not inhibited, simply RSB
! back here.
!-

RM$CHKAST_ANY();			! Check PIO$V_INHAST.

!+
! If the $ENQ hasn't completed, then clear the timer in progress flag and
! dequeue (cancel) the lock request.
!
! If the timer fired immediately after the $ENQ completion, but before the
! timer could be cancelled, then simply return; we have nothing to do.
!-

IF TESTBITSC( RLB[RLB$V_TIMER_INPROG] )	! If the $ENQ hasn't completed,
THEN					! then dequeue the lock request.
    BEGIN

    LOCAL
	STATUS
	;

    STATUS = $DEQ( LKID = .RLB[RLB$L_LOCK_ID] );
					! Dequeue (cancel) the request.

    !+
    ! The only acceptable failure status from $DEQ should be SS$_IVLOCKID;
    ! this could only happen if the timer fired immediately after the $ENQ
    ! completed, but before the RLB$V_TIMER_INPROG bit could be cleared by
    ! routine RM0RECLCK\DO_ENQ.
    !-

    IF ( NOT .STATUS ) AND ( .STATUS NEQ SS$_IVLOCKID )
					! If the $DEQ failed for other than
    THEN				! an invalid lock id, then
	BUG_CHECK;			! bugcheck.

    END;

END;					! End of routine RM$LOCK_TMO_AST

END
ELUDOM					! End of module RM0RCLCK2
