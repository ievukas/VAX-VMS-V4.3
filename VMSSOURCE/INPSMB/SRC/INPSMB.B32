MODULE INPSMB	(%TITLE	'Input symbiont'
		MAIN = INPSMB,
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Input symbiont.
!
! ABSTRACT:
!	This is it.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 30-Apr-1982
!
! MODIFIED BY:
!
!	V03-003	MLJ0115		Martin L. Jack,	29-Jul-1983  13:14
!		Update for $SNDJBC file interface change.
!
!	V03-002	MLJ0113		Martin L. Jack,	26-May-1983  10:21
!		Complete implementation.
!
!	V03-001	MLJ0112		Martin L. Jack,	29-Apr-1983  0:02
!		Track SUBMIT enhancements and SJC name changes.
!
!**

LIBRARY 'SYS$LIBRARY:LIB';
LIBRARY 'SYS$LIBRARY:TPAMAC';
REQUIRE 'SHRLIB$:JBCPRSDEF';


LITERAL
	TRUE=		1,
	FALSE=		0;


STRUCTURE
	BBLOCK[O,P,S,E;N]=
	    [N]
	    (BBLOCK + O)<P,S,E>;


PSECT
	CODE=		CODE,
	PLIT=		CODE,
	OWN=		DATA,
	GLOBAL=		DATA;


FORWARD ROUTINE
	INPSMB,
	PROCESSING_LOOP_HANDLER,
	PROCESSING_LOOP,
	GET_RECORD,
	IDENTIFY_COMMAND_VERB,
	GET_LINE_CONTINUATION,
	TIMER_AST:		NOVALUE,
	FILE_ERROR:		NOVALUE,
	MAIN_HANDLER_ACTION,
	MAIN_HANDLER;


EXTERNAL ROUTINE
	CLI$DCL_PARSE:	ADDRESSING_MODE(GENERAL),
	CLI$GET_VALUE:	ADDRESSING_MODE(GENERAL),
	CLI$PRESENT:	ADDRESSING_MODE(GENERAL),
	LGI$VALIDATE:	ADDRESSING_MODE(GENERAL),
	LIB$SFREE1_DD:	ADDRESSING_MODE(GENERAL),
	LIB$SIGNAL:	ADDRESSING_MODE(GENERAL),
	LIB$TPARSE:	ADDRESSING_MODE(GENERAL);


EXTERNAL
	LIB$AB_UPCASE:	ADDRESSING_MODE(GENERAL),
	INPSMBCLD;		! Command tables


EXTERNAL LITERAL
	INPSMB$_FACILITY,
	INPSMB$_ENTFIL,
	INPSMB$_INVCONT,
	INPSMB$_INVLOGFIL,
	INPSMB$_INVPASS,
	INPSMB$_INVUSER,
	INPSMB$_JOBCARD,
	INPSMB$_MISSPASS,
	INPSMB$_OPENUAF,
	INPSMB$_USERVAL;


OWN
	CARD_CHANNEL:	WORD,			! Channel to card reader
	INPUT_FAB:	$FAB_DECL,		! FAB for input
	INPUT_RAB:	$RAB_DECL,		! RAB for input
	INPUT_NAM:	$NAM_DECL,		! NAM block for input
	INPUT_RSA:	VECTOR[NAM$C_MAXRSS,BYTE], ! Resultant string for input
	INPUT_UBF:	VECTOR[160,BYTE],	! Record buffers
	OUTPUT_FAB:	$FAB_DECL,		! FAB for output
	OUTPUT_RAB:	$RAB_DECL,		! RAB for output
	OUTPUT_NAM:	$NAM_DECL,		! NAM block for output
	OUTPUT_XAB:	$XABPRO_DECL,		! Protection XAB for output
	OUTPUT_RSA:	VECTOR[NAM$C_MAXRSS,BYTE], ! Resultant string for output
	JOB_LENGTH,				! Length of JOB command
	JOB_BUFFER:	VECTOR[80,BYTE],	! JOB command buffer
	PUTMSG_ACTION_ROUTINE,			! Action routine for OPCOM or 0
	FLAGS:		BBLOCK[4],		! General flags
	INPUT_COMPLETIONS,			! Cards since timer expired
	CARD_IOSB_A:	VECTOR[4,WORD],		! First card IOSB
	CARD_IOSB_B:	VECTOR[4,WORD],		! Second card IOSB
	VALUE_DESC:	BBLOCK[DSC$C_D_BLN],	! Qualifier value
	LOG_FILE_DESC:	BBLOCK[DSC$C_D_BLN],	! /LOG_FILE descriptor
	NAME_DESC:	BBLOCK[DSC$C_D_BLN],	! /NAME descriptor
	USERNAME_DESC:	BBLOCK[DSC$C_D_BLN],	! Username descriptor
	PASSWORD_DESC:	BBLOCK[DSC$C_D_BLN],	! Password descriptor
	CURRENT_COMMAND;			! Current command


LITERAL
	K_NONE=		0,			! No significant command
	K_JOB=		1,			! JOB command
	K_EOJ=		3,			! EOJ command
	K_PASSWORD=	5;			! PASSWORD command


LITERAL
	K_EFN_A=	1,			! EFN for first buffer
	K_EFN_B=	2;			! EFN for second buffer


MACRO
	V_NO_LOG_FILE=		0,0,1,0 %,	! /NOLOG specified
	V_SECOND_BUFFER=	0,1,1,0 %,	! Second buffer has the read
	V_TRAILING_BLANKS=	0,2,1,0 %;	! Leave trailing blanks


BIND
	PERIODIC_INTERVAL = UPLIT(-150000000, -1);	! 15 seconds


FORWARD
	DOLLAR_STATES:		VECTOR[0],
	DOLLAR_KEYS:		VECTOR[0],
	JOB_STATES:		VECTOR[0],
	JOB_KEYS:		VECTOR[0],
	EOJ_STATES:		VECTOR[0],
	EOJ_KEYS:		VECTOR[0],
	PASSWORD_STATES:	VECTOR[0],
	PASSWORD_KEYS:		VECTOR[0];


MACRO
	SD[A]=
	    BIND %NAME('D_', A) = $DESCRIPTOR(A) %;


SD(
	'P1',
	'AFTER',
	'CHARACTERISTICS',
	'CLI',
	'CPUTIME',
	'DELETE',
	'HOLD',
	'KEEP',
	'LOG_FILE',
	'NAME',
	'NOTIFY',
	'PARAMETERS',
	'PRINTER',
	'PRIORITY',
	'QUEUE',
	'RESTART',
	'TRAILING_BLANKS',
	'WSDEFAULT',
	'WSEXTENT',
	'WSQUOTA');


BUILTIN
	MOVTC,
	TESTBITCC;

ROUTINE INPSMB=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is the main entry point for the input symbiont.
!
! INPUT PARAMETERS:
!	Standard activation parameters (not used).
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	DEVCLASS,				! Device class
	RSA_DESC:	VECTOR[2],		! Descriptor for RSA
	DVI_DESC:	VECTOR[2],		! Descriptor for DVI
	GETDVI_LIST:	BBLOCK[28],		! $GETDVI item list
	IOSB:		VECTOR[4,WORD],		! I/O status block
	STATUS_1,				! Status return
	STATUS_2,				! Status return
	STATUS_3;				! Status return
BIND
	DEVICE_NAME = $DESCRIPTOR('SYS$INPUT:'): BBLOCK;
BUILTIN
	FP;


! Establish the condition handler.
!
.FP = MAIN_HANDLER;


! Initialize RMS structures for the input stream.
!
$FAB_INIT(FAB=INPUT_FAB,
    FAC=GET,
    FNA=UPLIT BYTE('SYS$INPUT:'),
    FNS=%CHARCOUNT('SYS$INPUT:'),
    FOP=SQO,
    NAM=INPUT_NAM);
$RAB_INIT(RAB=INPUT_RAB,
    FAB=INPUT_FAB,
    ROP=RAH,
    UBF=INPUT_UBF,
    USZ=80);
$NAM_INIT(NAM=INPUT_NAM,
    ESA=INPUT_RSA,
    ESS=NAM$C_MAXRSS,
    RSA=INPUT_RSA,
    RSS=NAM$C_MAXRSS);


! Get the physical device name of the input device.
!
$PARSE(FAB=INPUT_FAB);
DVI_DESC[0] = CH$RCHAR(INPUT_NAM[NAM$T_DVI]);
DVI_DESC[1] = INPUT_NAM[NAM$T_DVI]+1;
RSA_DESC[0] = 0;
RSA_DESC[1] = INPUT_RSA;


! Execute a $GETDVI on the physical device.
!
GETDVI_LIST[0,0,16,0] = 4;
GETDVI_LIST[2,0,16,0] = DVI$_DEVCLASS;
GETDVI_LIST[4,0,32,0] = DEVCLASS;
GETDVI_LIST[8,0,32,0] = 0;
GETDVI_LIST[12,0,16,0] = NAM$C_MAXRSS;
GETDVI_LIST[14,0,16,0] = DVI$_DEVNAM;
GETDVI_LIST[16,0,32,0] = INPUT_RSA;
GETDVI_LIST[20,0,32,0] = RSA_DESC;
GETDVI_LIST[24,0,32,0] = 0;
STATUS_1 = $GETDVIW(
    IOSB=IOSB,
    DEVNAM=DVI_DESC,
    ITMLST=GETDVI_LIST);
IF NOT .STATUS_1 THEN RETURN .STATUS_1;


! Open the input stream.
!
IF .DEVCLASS EQL DC$_CARD
THEN
    BEGIN

    ! Set up to issue signalled messages to the card operator.
    !
    PUTMSG_ACTION_ROUTINE = MAIN_HANDLER_ACTION;


    ! Open the card reader.
    !
    STATUS_2 = $ASSIGN(DEVNAM=DEVICE_NAME, CHAN=CARD_CHANNEL);
    IF NOT .STATUS_2
    THEN
	SIGNAL(
	    INPSMB$_FACILITY^16 + SHR$_OPENIN + STS$K_SEVERE,
	    1, RSA_DESC,
	    .STATUS_2);
    INPUT_NAM[NAM$B_RSL] = .RSA_DESC[0];


    ! Set up the periodic timer.
    !
    $SETIMR(DAYTIM=PERIODIC_INTERVAL, ASTADR=TIMER_AST);


    ! Start a read in the first buffer.
    !
    STATUS_3 = $QIO(
	EFN=K_EFN_A,
	FUNC=IO$_READLBLK,
	CHAN=.CARD_CHANNEL,
	IOSB=CARD_IOSB_A,
	P1=INPUT_UBF,
	P2=80);
    IF NOT .STATUS_3
    THEN
	FILE_ERROR(
	    INPSMB$_FACILITY^16 + SHR$_READERR + STS$K_SEVERE,
	    INPUT_FAB,
	    .STATUS_3);
    END
ELSE
    BEGIN

    ! Access the file with RMS.
    !
    IF NOT $OPEN(FAB=INPUT_FAB)
    THEN
	FILE_ERROR(
	    INPSMB$_FACILITY^16 + SHR$_OPENIN + STS$K_SEVERE,
	    INPUT_FAB,
	    .INPUT_FAB[FAB$L_STS], .INPUT_FAB[FAB$L_STV]);


    IF NOT $CONNECT(RAB=INPUT_RAB)
    THEN
	FILE_ERROR(
	    INPSMB$_FACILITY^16 + SHR$_OPENIN + STS$K_SEVERE,
	    INPUT_FAB,
	    .INPUT_RAB[RAB$L_STS], .INPUT_RAB[RAB$L_STV]);
    END;


! Initialize descriptors for dynamic strings.
!
VALUE_DESC[DSC$B_CLASS] = DSC$K_CLASS_D;
VALUE_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
VALUE_DESC[DSC$W_LENGTH] = 0;
VALUE_DESC[DSC$A_POINTER] = 0;

LOG_FILE_DESC[DSC$B_CLASS] = DSC$K_CLASS_D;
LOG_FILE_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
LOG_FILE_DESC[DSC$W_LENGTH] = 0;
LOG_FILE_DESC[DSC$A_POINTER] = 0;

NAME_DESC[DSC$B_CLASS] = DSC$K_CLASS_D;
NAME_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
NAME_DESC[DSC$W_LENGTH] = 0;
NAME_DESC[DSC$A_POINTER] = 0;

USERNAME_DESC[DSC$B_CLASS] = DSC$K_CLASS_D;
USERNAME_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
USERNAME_DESC[DSC$W_LENGTH] = 0;
USERNAME_DESC[DSC$A_POINTER] = 0;

PASSWORD_DESC[DSC$B_CLASS] = DSC$K_CLASS_D;
PASSWORD_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
PASSWORD_DESC[DSC$W_LENGTH] = 0;
PASSWORD_DESC[DSC$A_POINTER] = 0;


! Loop to process all jobs in the input stream.
!
UNTIL PROCESSING_LOOP() DO 0;


! Close the input stream.
!
IF .CARD_CHANNEL EQL 0
THEN
    IF NOT $CLOSE(FAB=INPUT_FAB)
    THEN
	FILE_ERROR(
	    INPSMB$_FACILITY^16 + SHR$_CLOSEIN + STS$K_SEVERE,
	    INPUT_FAB,
	    .INPUT_FAB[FAB$L_STS], .INPUT_FAB[FAB$L_STV]);


! Exit the symbiont.
!
SS$_NORMAL
END;

ROUTINE PROCESSING_LOOP_HANDLER(SIG,MCH)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This is a condition handler for routine PROCESSING_LOOP.
!
! INPUT PARAMETERS:
!	Standard VMS condition handler parameters.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	SIG:		REF BBLOCK,	! Signal parameters
	MCH:		REF BBLOCK;	! Mechanism parameters
LOCAL
	COND:		BBLOCK[4];	! Status value
BUILTIN
	AP,
	CALLG;


! Get the condition that was signalled.
!
COND = .SIG[CHF$L_SIG_NAME];


IF .COND NEQ SS$_UNWIND
THEN
    BEGIN

    ! Downgrade the severity of any message issued to error.
    !
    IF .COND[STS$V_SEVERITY] EQL STS$K_SEVERE
    THEN
	BBLOCK[SIG[CHF$L_SIG_NAME], STS$V_SEVERITY] = STS$K_ERROR;


    ! Call the main handler to issue the message.
    !
    CALLG(.AP, MAIN_HANDLER);


    ! If the message is an error status, clean up the current job.
    !
    IF NOT .COND
    THEN
	BEGIN

	! Close and delete the command procedure file if it is open.
	!
	IF .OUTPUT_FAB[FAB$W_IFI] NEQ 0
	THEN
	    BEGIN
	    OUTPUT_FAB[FAB$V_DLT] = TRUE;
	    $CLOSE(FAB=OUTPUT_FAB);
	    END;


	! Unwind to the caller of PROCESSING_LOOP with a false value.
	!
	MCH[CHF$L_MCH_SAVR0] = FALSE;
	$UNWIND();
	END;
    END;


SS$_CONTINUE
END;

ROUTINE PROCESSING_LOOP=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine implements the main control sequencing for the input
!	symbiont.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
PARSE_GLOBAL_REGISTERS;
LOCAL
	ITEM_BUFFER:	BBLOCK[2048],		! $SNDJBC item buffer
	DATA_BUFFER:	BBLOCK[2048],		! $SNDJBC data buffer
	UAF_BUFFER:	BBLOCK[UAF$C_LENGTH],	! UAF record for user
	UAF_DESC:	VECTOR[2],		! Descriptor for UAF buffer
	DNA_BUFFER:	VECTOR[NAM$C_MAXRSS,BYTE], ! Default filename
	DNA_DESC:	VECTOR[2],		! Descriptor for DNA buffer
	IOSB:		VECTOR[4,WORD],		! $SNDJBC status block
	LINE_DESC:	BBLOCK[DSC$C_S_BLN],	! Descriptor for command
	STATUS_1,				! Status return
	STATUS_2;				! Status return
BUILTIN
	FP;


! Establish the condition handler.
!
.FP = PROCESSING_LOOP_HANDLER;


! Initialize for command parsing utilities.
!
PARSE_GLOBAL_INIT(
    ICURSOR=	ITEM_BUFFER,
    DCURSOR=	DATA_BUFFER,
    MESSAGE=	INPSMB$_FACILITY^16 OR SHR$_BADQNAME OR STS$K_SEVERE,
    VALUE_DESC=	VALUE_DESC);


! Read the input stream searching for a JOB command.
!
UNTIL .CURRENT_COMMAND EQL K_JOB DO
    BEGIN
    IF NOT GET_RECORD() THEN RETURN TRUE;
    CURRENT_COMMAND = IDENTIFY_COMMAND_VERB(FALSE, LINE_DESC);
    END;


! Save the JOB command for error messages.
!
JOB_LENGTH = .INPUT_RAB[RAB$W_RSZ];
CH$MOVE(.JOB_LENGTH, .INPUT_RAB[RAB$L_RBF], JOB_BUFFER);


! Parse the JOB command.
!
CURRENT_COMMAND = K_NONE;
CLI$DCL_PARSE(LINE_DESC, INPSMBCLD, 0, GET_LINE_CONTINUATION);


! Free dynamic strings to ensure that jobs do not interfere with one another.
!
LIB$SFREE1_DD(VALUE_DESC);
LIB$SFREE1_DD(LOG_FILE_DESC);
LIB$SFREE1_DD(NAME_DESC);
LIB$SFREE1_DD(USERNAME_DESC);
LIB$SFREE1_DD(PASSWORD_DESC);


! Get the parameter, which is the username.
!
CLI$GET_VALUE(D_P1, USERNAME_DESC);
IF .USERNAME_DESC[DSC$W_LENGTH] GTRU 12
THEN
    SIGNAL(INPSMB$_INVUSER, 1, USERNAME_DESC);


! Get the /QUEUE qualifier.
!
PARSE_CALL(QUEUE, D_QUEUE, SJC$_QUEUE, $DESCRIPTOR('SYS$BATCH'));
Q_MESSAGE = INPSMB$_FACILITY^16 + SHR$_INVQUAVAL + STS$K_SEVERE;


! Get the /AFTER qualifier.
!
PARSE_CALL(AFTER, D_AFTER);


! Get the /CHARACTERISTICS qualifier.
!
PARSE_CALL(CHARACTERISTICS, D_CHARACTERISTICS);


! Get the /CLI qualifier.
!
PARSE_CALL(FILENAME, D_CLI, SJC$_CLI, SJC$_NO_CLI);


! Get the /CPUTIME qualifier.
!
PARSE_CALL(CPUTIME, D_CPUTIME, SJC$_CPU_LIMIT, SJC$_NO_CPU_LIMIT);


! Get the /DELETE qualifier.
!
PARSE_CALL(IF_TRUE, D_DELETE, SJC$_DELETE_FILE);


! Get the /HOLD qualifier.
!
PARSE_CALL(IF_TRUE, D_HOLD, SJC$_HOLD);


! Get the /KEEP qualifier.
!
PARSE_CALL(IF_TRUE, D_KEEP, SJC$_NO_LOG_DELETE);


! Get the /LOG_FILE qualifier.
!
Q_VALUE_DESC = LOG_FILE_DESC;
FLAGS[V_NO_LOG_FILE] = PARSE_CALL_VALUE(LOG_FILE, D_LOG_FILE);


! Get the /NAME qualifier.
!
Q_VALUE_DESC = NAME_DESC;
PARSE_CALL(NAME, D_NAME);
Q_VALUE_DESC = VALUE_DESC;


! Get the /NOTIFY qualifier.
!
PARSE_CALL(IF_TRUE, D_NOTIFY, SJC$_NOTIFY);


! Get the /PARAMETERS qualifier.
!
PARSE_CALL(PARAMETERS, D_PARAMETERS);


! Get the /PRINTER qualifier.
!
PARSE_CALL(PRINTER, D_PRINTER);


! Get the /PRIORITY qualifier.
!
PARSE_CALL(PRIORITY, D_PRIORITY);


! Get the /RESTART qualifier.
!
PARSE_CALL(IF_TRUE, D_RESTART, SJC$_RESTART);


! Get the /TRAILING_BLANKS qualifier.
!
FLAGS[V_TRAILING_BLANKS] = CLI$PRESENT(D_TRAILING_BLANKS);


! Get the /WSDEFAULT qualifier.
!
PARSE_CALL(WORKING_SET, D_WSDEFAULT, SJC$_WSDEFAULT, SJC$_NO_WSDEFAULT);


! Get the /WSEXTENT qualifier.
!
PARSE_CALL(WORKING_SET, D_WSEXTENT, SJC$_WSEXTENT, SJC$_NO_WSEXTENT);


! Get the /WSQUOTA qualifier.
!
PARSE_CALL(WORKING_SET, D_WSQUOTA, SJC$_WSQUOTA, SJC$_NO_WSQUOTA);


! Read the input stream for a PASSWORD command.
!
IF NOT GET_RECORD() THEN RETURN TRUE;
CURRENT_COMMAND = IDENTIFY_COMMAND_VERB(TRUE, LINE_DESC);
IF .CURRENT_COMMAND NEQ K_PASSWORD THEN SIGNAL(INPSMB$_MISSPASS);


! Parse the PASSWORD command.
!
CLI$DCL_PARSE(LINE_DESC, INPSMBCLD, 0, GET_LINE_CONTINUATION);


! Get the parameter, which is the password.
!
CLI$GET_VALUE(D_P1, PASSWORD_DESC);
IF .PASSWORD_DESC[DSC$W_LENGTH] GTRU 31
THEN
    SIGNAL(INPSMB$_INVPASS, 1, PASSWORD_DESC);


! Validate access to the specified username and password.
!
UAF_DESC[0] = %ALLOCATION(UAF_BUFFER);
UAF_DESC[1] = UAF_BUFFER;
STATUS_1 = LGI$VALIDATE(USERNAME_DESC, PASSWORD_DESC, UAF_DESC);
IF NOT .STATUS_1
THEN
    IF .STATUS_1 GEQ 0
	THEN SIGNAL(INPSMB$_OPENUAF, 0, .STATUS_1)
	ELSE SIGNAL(INPSMB$_USERVAL);


IF NOT .FLAGS[V_NO_LOG_FILE]
THEN
    BEGIN

    ! Compute the log file default name string.
    !
    DNA_DESC[0] = %ALLOCATION(DNA_BUFFER);
    DNA_DESC[1] = DNA_BUFFER;
    $FAO(
	$DESCRIPTOR('!AC!AC.LOG'),
	DNA_DESC,
	DNA_DESC,
	UAF_BUFFER[UAF$T_DEFDEV],
	UAF_BUFFER[UAF$T_DEFDIR]);


    ! Compute the log file specification.
    !
    PARSE_CALL(NAME_AND_LOG_FILE,
	NAME_DESC, LOG_FILE_DESC,
	DNA_DESC, INPSMB$_INVLOGFIL);
    END;


! Compute the command file default name string.
!
DNA_DESC[0] = %ALLOCATION(DNA_BUFFER);
DNA_DESC[1] = DNA_BUFFER;
$FAO(
    $DESCRIPTOR('!AC!ACINPBATCH.COM'),
    DNA_DESC,
    DNA_DESC,
    UAF_BUFFER[UAF$T_DEFDEV],
    UAF_BUFFER[UAF$T_DEFDIR]);


! Create the output command file.
!
$FAB_INIT(FAB=OUTPUT_FAB,
    DNA=.DNA_DESC[1],
    DNS=.DNA_DESC[0],
    FAC=PUT,
    FNA=.NAME_DESC[DSC$A_POINTER],
    FNS=.NAME_DESC[DSC$W_LENGTH],
    FOP=SQO,
    NAM=OUTPUT_NAM,
    ORG=SEQ,
    RAT=CR,
    RFM=VAR,
    XAB=OUTPUT_XAB);
$RAB_INIT(RAB=OUTPUT_RAB,
    FAB=OUTPUT_FAB,
    ROP=WBH);
$NAM_INIT(NAM=OUTPUT_NAM,
    ESA=OUTPUT_RSA,
    ESS=NAM$C_MAXRSS,
    RSA=OUTPUT_RSA,
    RSS=NAM$C_MAXRSS);
$XABPRO_INIT(XAB=OUTPUT_XAB,
    PRO=<RWED,RWED,,>);
OUTPUT_XAB[XAB$L_UIC] = .UAF_BUFFER[UAF$L_UIC];


IF NOT $CREATE(FAB=OUTPUT_FAB)
THEN
    FILE_ERROR(
	INPSMB$_FACILITY^16 + SHR$_OPENOUT + STS$K_ERROR,
	OUTPUT_FAB,
	.OUTPUT_FAB[FAB$L_STS], .OUTPUT_FAB[FAB$L_STV]);


IF NOT $CONNECT(RAB=OUTPUT_RAB)
THEN
    FILE_ERROR(
	INPSMB$_FACILITY^16 + SHR$_OPENOUT + STS$K_ERROR,
	OUTPUT_FAB,
	.OUTPUT_RAB[RAB$L_STS], .OUTPUT_RAB[RAB$L_STV]);


! Read the input stream into the command file until a JOB or EOJ command.
!
WHILE TRUE DO
    BEGIN
    LOCAL
	RECORD_LENGTH;			! Input record length


    ! Get the next record.  If it is JOB or EOJ, we are finished.
    !
    IF NOT GET_RECORD() THEN EXITLOOP;
    CURRENT_COMMAND = IDENTIFY_COMMAND_VERB(FALSE, LINE_DESC);
    IF .CURRENT_COMMAND EQL K_JOB OR .CURRENT_COMMAND EQL K_EOJ THEN EXITLOOP;


    ! Trim trailing blanks if requested.
    !
    RECORD_LENGTH = .INPUT_RAB[RAB$W_RSZ];
    IF NOT .FLAGS[V_TRAILING_BLANKS]
    THEN
	BEGIN
	WHILE .RECORD_LENGTH GTR 0 DO
	    BEGIN
	    IF CH$RCHAR(.INPUT_RAB[RAB$L_RBF] + .RECORD_LENGTH - 1) NEQ %C' '
	    THEN EXITLOOP;
	    RECORD_LENGTH = .RECORD_LENGTH - 1;
	    END;
	END;


    ! Copy the record to the output command file.
    !
    OUTPUT_RAB[RAB$W_RSZ] = .RECORD_LENGTH;
    OUTPUT_RAB[RAB$L_RBF] = .INPUT_RAB[RAB$L_RBF];
    IF NOT $PUT(RAB=OUTPUT_RAB)
    THEN
	FILE_ERROR(
	    INPSMB$_FACILITY^16 + SHR$_WRITEERR + STS$K_ERROR,
	    OUTPUT_FAB,
	    .OUTPUT_RAB[RAB$L_STS], .OUTPUT_RAB[RAB$L_STV]);
    END;


! Close the output command file.
!
IF NOT $CLOSE(FAB=OUTPUT_FAB)
THEN
    FILE_ERROR(
	INPSMB$_FACILITY^16 + SHR$_CLOSEOUT + STS$K_ERROR,
	OUTPUT_FAB,
	.OUTPUT_FAB[FAB$L_STS], .OUTPUT_FAB[FAB$L_STV]);


! Set up the user identification item.
!
Q_DCURSOR[0,0,32,0] = .UAF_BUFFER[UAF$L_UIC];
CH$MOVE(
    UAF$S_USERNAME,
    UAF_BUFFER[UAF$T_USERNAME],
    Q_DCURSOR[4,0,0,0]);
CH$MOVE(
    UAF$S_ACCOUNT,
    UAF_BUFFER[UAF$T_ACCOUNT],
    Q_DCURSOR[16,0,0,0]);
Q_DCURSOR[24,0,8,0] = .UAF_BUFFER[UAF$B_PRI];


! Add the remaining items and finish the list.
!
Q_ICURSOR[0,0,16,0] = NAM$S_DVI + FID$C_LENGTH + FID$C_LENGTH;
Q_ICURSOR[2,0,16,0] = SJC$_FILE_IDENTIFICATION;
Q_ICURSOR[4,0,32,0] = OUTPUT_NAM[NAM$T_DVI];
Q_ICURSOR[8,0,32,0] = 0;

Q_ICURSOR[12,0,16,0] = 25;
Q_ICURSOR[14,0,16,0] = SJC$_USER_IDENTIFICATION;
Q_ICURSOR[16,0,32,0] = .Q_DCURSOR;
Q_ICURSOR[20,0,32,0] = 0;

Q_ICURSOR[24,0,32,0] = 0;


! Submit the output command file.
!
STATUS_2 = $SNDJBCW(
    FUNC=SJC$_ENTER_FILE,
    IOSB=IOSB,
    ITMLST=ITEM_BUFFER);
IF .STATUS_2 THEN STATUS_2 = .IOSB;
IF NOT .STATUS_2
THEN
    SIGNAL(INPSMB$_ENTFIL, 0, .STATUS_2);


! Terminate if this was end of file.
!
IF NOT .INPUT_RAB[RAB$L_STS] THEN RETURN TRUE;
FALSE
END;

ROUTINE GET_RECORD=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine gets the next record from the input stream.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
IF .CARD_CHANNEL NEQ 0
THEN
    BEGIN
    LOCAL
	STATUS;


    IF .FLAGS[V_SECOND_BUFFER]
    THEN
	BEGIN

	! The second buffer had the pending read.  Wait for it to complete
	! and examine the IOSB for status.  Logically translate an EOF card
	! to an EOJ command.
	!
	$WAITFR(EFN=K_EFN_B);
	IF .CARD_IOSB_B[0] EQL SS$_ENDOFFILE
	THEN
	    BEGIN
	    INPUT_RAB[RAB$L_STS] = SS$_NORMAL;
	    INPUT_RAB[RAB$W_RSZ] = %CHARCOUNT('$ EOJ');
	    INPUT_RAB[RAB$L_RBF] = UPLIT BYTE('$ EOJ');
	    END
	ELSE IF NOT .CARD_IOSB_B[0]
	THEN
	    FILE_ERROR(
		INPSMB$_FACILITY^16 + SHR$_READERR + STS$K_SEVERE,
		INPUT_FAB,
		.CARD_IOSB_B[0])
	ELSE
	    BEGIN
	    INPUT_RAB[RAB$L_STS] = .CARD_IOSB_B[0];
	    INPUT_RAB[RAB$W_RSZ] = .CARD_IOSB_B[1];
	    INPUT_RAB[RAB$L_RBF] = INPUT_UBF + 80;
	    END;


	! Start a read in the first buffer.
	!
	STATUS = $QIO(
	    EFN=K_EFN_A,
	    FUNC=IO$_READLBLK,
	    CHAN=.CARD_CHANNEL,
	    IOSB=CARD_IOSB_A,
	    P1=INPUT_UBF,
	    P2=80);
	FLAGS[V_SECOND_BUFFER] = FALSE;
	END
    ELSE
	BEGIN

	! The first buffer had the pending read.  Wait for it to complete
	! and examine the IOSB for status.  Logically translate an EOF card
	! to an EOJ command.
	!
	$WAITFR(EFN=K_EFN_A);
	IF .CARD_IOSB_A[0] EQL SS$_ENDOFFILE
	THEN
	    BEGIN
	    INPUT_RAB[RAB$L_STS] = SS$_NORMAL;
	    INPUT_RAB[RAB$W_RSZ] = %CHARCOUNT('$ EOJ');
	    INPUT_RAB[RAB$L_RBF] = UPLIT BYTE('$ EOJ');
	    END
	ELSE IF NOT .CARD_IOSB_A[0]
	THEN
	    FILE_ERROR(
		INPSMB$_FACILITY^16 + SHR$_READERR + STS$K_SEVERE,
		INPUT_FAB,
		.CARD_IOSB_A[0])
	ELSE
	    BEGIN	
	    INPUT_RAB[RAB$L_STS] = .CARD_IOSB_A[0];
	    INPUT_RAB[RAB$W_RSZ] = .CARD_IOSB_A[1];
	    INPUT_RAB[RAB$L_RBF] = INPUT_UBF;
	    END;


	! Start a read in the second buffer.
	!
	STATUS = $QIO(
	    EFN=K_EFN_B,
	    FUNC=IO$_READLBLK,
	    CHAN=.CARD_CHANNEL,
	    IOSB=CARD_IOSB_B,
	    P1=INPUT_UBF + 80,
	    P2=80);
	FLAGS[V_SECOND_BUFFER] = TRUE;
	END;


    ! Check status of the $QIO.
    !
    IF NOT .STATUS
    THEN
	FILE_ERROR(
	    INPSMB$_FACILITY^16 + SHR$_READERR + STS$K_SEVERE,
	    INPUT_FAB,
	    .STATUS);


    ! Note that an input operation has completed, for the periodic timer.
    !
    INPUT_COMPLETIONS = .INPUT_COMPLETIONS + 1;
    END
ELSE
    BEGIN
    IF NOT $GET(RAB=INPUT_RAB)
    THEN
	IF .INPUT_RAB[RAB$L_STS] NEQ RMS$_EOF
	THEN
	    FILE_ERROR(
		INPSMB$_FACILITY^16 + SHR$_READERR + STS$K_SEVERE,
		INPUT_FAB,
		.INPUT_RAB[RAB$L_STS], .INPUT_RAB[RAB$L_STV]);
    END;


.INPUT_RAB[RAB$L_STS]
END;

ROUTINE IDENTIFY_COMMAND_VERB(PASSWORD,LINE_DESC)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine identifies a record that contains a valid JOB, EOJ, or
!	PASSWORD command verb.
!
! INPUT PARAMETERS:
!	PASSWORD	- True if a PASSWORD command is valid.
!	LINE_DESC	- Address of a quadword that receives a descriptor for
!			  the portion of the record following the dollar sign,
!			  if the routine value is true.
!
! IMPLICIT INPUTS:
!	INPUT_RAB	- Describes the current record.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	K_NONE if no significant verb (false value).
!	K_JOB, K_EOJ, K_PASSWORD if recognized (true value).
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	LINE_DESC:	REF BBLOCK;		! Pointer to line descriptor
LOCAL
	TPA_PARAM:	BBLOCK[TPA$K_LENGTH0],	! TPARSE parameter block
	UPCASE_BUFFER:	BBLOCK[%ALLOCATION(INPUT_UBF)];


! Initialize TPARSE parameter block.
!
CH$FILL(0, %ALLOCATION(TPA_PARAM), TPA_PARAM);
TPA_PARAM[TPA$L_COUNT] = TPA$K_COUNT0;
TPA_PARAM[TPA$L_STRINGCNT] = .INPUT_RAB[RAB$W_RSZ];
TPA_PARAM[TPA$L_STRINGPTR] = .INPUT_RAB[RAB$L_RBF];


! Scan the line for a leading dollar sign.
!
IF LIB$TPARSE(TPA_PARAM, DOLLAR_STATES, DOLLAR_KEYS)
THEN
    BEGIN

    ! Initialize the line descriptor to describe the portion of the line 
    ! following the leading dollar sign.
    !
    LINE_DESC[DSC$W_LENGTH] = .TPA_PARAM[TPA$L_STRINGCNT];
    LINE_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
    LINE_DESC[DSC$B_CLASS] = DSC$K_CLASS_S;
    LINE_DESC[DSC$A_POINTER] = .TPA_PARAM[TPA$L_STRINGPTR];


    ! Upcase the remaining portion of the line into the temporary buffer.
    !
    MOVTC(
	TPA_PARAM[TPA$L_STRINGCNT], .TPA_PARAM[TPA$L_STRINGPTR],
	%REF(0),
	LIB$AB_UPCASE,
	TPA_PARAM[TPA$L_STRINGCNT], UPCASE_BUFFER);
    TPA_PARAM[TPA$L_STRINGPTR] = UPCASE_BUFFER;


    ! Scan the line for an unabbreviated 'JOB'.
    !
    IF LIB$TPARSE(TPA_PARAM, JOB_STATES, JOB_KEYS)
    THEN
	RETURN K_JOB;


    ! Scan the line for an unabbreviated 'EOJ'.
    !
    IF LIB$TPARSE(TPA_PARAM, EOJ_STATES, EOJ_KEYS)
    THEN
	RETURN K_EOJ;


    ! If a PASSWORD command is valid, scan the line for a possibly abbreviated
    ! 'PASSWORD'.
    !
    IF .PASSWORD
    THEN
	BEGIN
	TPA_PARAM[TPA$V_ABBREV] = TRUE;
	IF LIB$TPARSE(TPA_PARAM, PASSWORD_STATES, PASSWORD_KEYS)
	THEN
	    RETURN K_PASSWORD;
	END;
    END;


K_NONE
END;

ROUTINE GET_LINE_CONTINUATION(GET_STR,PROMPT_STR,OUT_LEN)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is the continuation routine for the CLI$DCL_PARSE calls.
!
! INPUT PARAMETERS:
!	As for LIB$GET_INPUT.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	As for LIB$GET_INPUT.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	GET_STR:	REF BBLOCK;		! Pointer to descriptor
LOCAL
	LINE_DESC:	BBLOCK[DSC$C_S_BLN],	! Scratch descriptor for line
	STATUS;					! Status return


! Get the next input line, propagating errors to CLI$DCL_PARSE.
!
STATUS = GET_RECORD();
IF NOT .STATUS THEN RETURN .STATUS;


! Ensure that the continuation line is not a JOB command, so that an error in
! a previous line cannot result in skipping a job.
!
CURRENT_COMMAND = IDENTIFY_COMMAND_VERB(FALSE, LINE_DESC);
IF .CURRENT_COMMAND EQL K_JOB THEN RETURN INPSMB$_INVCONT;


! Copy the record back to DCL and set the return length.  This routine makes
! the simplifying assumptions that DCL passes a static string and always
! passes three parameters.
!
CH$COPY(
    .INPUT_RAB[RAB$W_RSZ], .INPUT_RAB[RAB$L_RBF],
    %C' ',
    .GET_STR[DSC$W_LENGTH], .GET_STR[DSC$A_POINTER]);
(.OUT_LEN)<0,16> = .INPUT_RAB[RAB$W_RSZ];


! Return success.
!
SS$_NORMAL
END;

ROUTINE TIMER_AST: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is entered on the expiration of the periodic timer to
!	determine if any input operations have completed in that interval,
!	and to exit the symbiont if appropriate.
!
! INPUT PARAMETERS:
!	Standard AST routine parameters (not used).
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

! If there have been no input completions since the last expiration of the timer
! and we are not processing a job, exit the symbiont.
!
IF .INPUT_COMPLETIONS EQL 0 AND .OUTPUT_FAB[FAB$W_IFI] EQL 0
THEN
    $EXIT(CODE=SS$_NORMAL);


! Set up the next interval.
!
INPUT_COMPLETIONS = 0;
$SETIMR(DAYTIM=PERIODIC_INTERVAL, ASTADR=TIMER_AST);
END;

ROUTINE FILE_ERROR(MESSAGE,FAB,EXTRA1,EXTRA2): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine signals a file-related message.
!
! INPUT PARAMETERS:
!	MESSAGE		- Message code for first message
!	FAB		- Pointer to FAB, from which file name
!			  will be obtained
!	Up to two additional input parameters are additional messages.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	The messages are signalled.
!
!--

BEGIN
MAP
	FAB:		REF BBLOCK;	! Pointer to FAB
LOCAL
	NAM:		REF BBLOCK,	! Pointer to NAM block
	DESC:		VECTOR[2],	! Descriptor for file name
	PARAM:		VECTOR[6];	! Signal parameter list
BUILTIN
	ACTUALCOUNT,
	CALLG;


! Establish the file name to be printed.  The resultant string, expanded
! string, and filename string are examined in that order, and the first
! one that is not null is used.
!
NAM = .FAB[FAB$L_NAM];
IF .NAM[NAM$B_RSL] NEQ 0
THEN
    BEGIN
    DESC[0] = .NAM[NAM$B_RSL];
    DESC[1] = .NAM[NAM$L_RSA];
    END
ELSE IF .NAM[NAM$B_ESL] NEQ 0
THEN
    BEGIN
    DESC[0] = .NAM[NAM$B_ESL];
    DESC[1] = .NAM[NAM$L_ESA];
    END
ELSE
    BEGIN
    DESC[0] = .FAB[FAB$B_FNS];
    DESC[1] = .FAB[FAB$L_FNA];
    END;


! Initialize the signal parameter list.
!
PARAM[0] = 3;				! Parameter count
PARAM[1] = .MESSAGE;			! First message code
PARAM[2] = 1;				! FAO argument count
PARAM[3] = DESC;			! Filename descriptor
IF ACTUALCOUNT() GEQ 3
THEN
    BEGIN
    PARAM[0] = .PARAM[0] + 1;		! Increment parameter count
    PARAM[4] = .EXTRA1;			! Next message code
    END;
IF ACTUALCOUNT() GEQ 4
THEN
    BEGIN
    PARAM[0] = .PARAM[0] + 1;		! Increment parameter count
    PARAM[5] = .EXTRA2;			! Next message code
    END;


! Finally, signal the messages.
!
CALLG(PARAM, LIB$SIGNAL);
END;

ROUTINE MAIN_HANDLER_ACTION(MSG_DESC)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This is an action routine for the $PUTMSG that issues a signalled
!	message to the system console.  It writes the record to the operator
!	via OPCOM or via broadcast.
!
! INPUT PARAMETERS:
!	MSG_DESC	- Descriptor for message.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	FALSE, to signal $PUTMSG not to write the message.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	MSG_DESC:	REF BBLOCK;	! Descriptor for message text
LOCAL
	LENGTH:		WORD,		! Length of message, minimized
	OPC_BUFFER:	BBLOCK[$BYTEOFFSET(OPC$L_MS_TEXT) + 132],
					! Buffer for OPCOM message
	OPC_DESC:	VECTOR[2],	! Descriptor for message buffer
	STATUS;				! Status return


! Set up the OPCOM message buffer.
!
OPC_BUFFER[OPC$B_MS_TYPE] = OPC$_RQ_RQST;
OPC_BUFFER[OPC$B_MS_TARGET] = OPC$M_NM_CARDS;
OPC_BUFFER[OPC$W_MS_STATUS] = 0;
OPC_BUFFER[OPC$L_MS_RQSTID] = 0;
LENGTH = .MSG_DESC[DSC$W_LENGTH];
IF .LENGTH GTRU 132 THEN LENGTH = 132;
CH$MOVE(.LENGTH, .MSG_DESC[DSC$A_POINTER], OPC_BUFFER[OPC$L_MS_TEXT]);
OPC_DESC[0] = $BYTEOFFSET(OPC$L_MS_TEXT) + .LENGTH;
OPC_DESC[1] = OPC_BUFFER;


! Try to send the message by OPCOM.  If this fails, send a broadcast to the
! system console.
!
STATUS = $SNDOPR(MSGBUF=OPC_DESC);
IF NOT .STATUS OR .STATUS EQL OPC$_NOPERATOR
THEN
    $BRDCST(MSGBUF=.MSG_DESC, DEVNAM=$DESCRIPTOR('_OPA0:'));


! Return FALSE, to signal $PUTMSG not to write the message.
!
FALSE
END;

ROUTINE MAIN_HANDLER(SIG,MCH)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is the condition handler for the main routine.  It
!	intercepts signals and writes the message to the operator.
!
! INPUT PARAMETERS:
!	Standard VMS condition handler parameters.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_CONTINUE
!
! SIDE EFFECTS:
!	If the condition is fatal, the image exits.
!
!--

BEGIN
MAP
	SIG:		REF BBLOCK,	! Signal parameters
	MCH:		REF BBLOCK;	! Mechanism parameters
LOCAL
	DESC:		VECTOR[2],	! Descriptor for JOB command
	MSGVEC:		VECTOR[4];	! $PUTMSG parameter vector


! Print the JOB command that incurred the error, if any.
!
IF .JOB_LENGTH NEQ 0
THEN
    BEGIN
    DESC[0] = .JOB_LENGTH;
    DESC[1] = JOB_BUFFER;
    WHILE .DESC[0] GTR 0 DO
	BEGIN
	IF CH$RCHAR(.DESC[1] + .DESC[0] - 1) NEQ %C' ' THEN EXITLOOP;
	DESC[0] = .DESC[0] - 1;
	END;
    MSGVEC[0] = 3;
    MSGVEC[1] = INPSMB$_JOBCARD;
    MSGVEC[2] = 1;
    MSGVEC[3] = DESC;
    $PUTMSG(MSGVEC=MSGVEC, ACTRTN=.PUTMSG_ACTION_ROUTINE);
    END;


! Adjust the signal parameter count to remove the PC and PSL, and call $PUTMSG
! to issue the message.
!
SIG[CHF$L_SIG_ARGS] = .SIG[CHF$L_SIG_ARGS] - 2;
$PUTMSG(MSGVEC=.SIG, ACTRTN=.PUTMSG_ACTION_ROUTINE);


! If the exception was fatal, exit the image.  Otherwise, continue.
!
IF .BBLOCK[SIG[CHF$L_SIG_NAME], STS$V_SEVERITY] EQL STS$K_SEVERE
THEN
    $EXIT(CODE=.SIG[CHF$L_SIG_NAME] OR STS$M_INHIB_MSG);


SS$_CONTINUE
END;

$INIT_STATE(DOLLAR_STATES, DOLLAR_KEYS);
$STATE( ,
    ('$', TPA$_EXIT));


$INIT_STATE(JOB_STATES, JOB_KEYS);
$STATE( ,
    ('JOB', TPA$_EXIT));


$INIT_STATE(EOJ_STATES, EOJ_KEYS);
$STATE( ,
    ('EOJ', TPA$_EXIT));


$INIT_STATE(PASSWORD_STATES, PASSWORD_KEYS);
$STATE( ,
    ('PASSWORD', TPA$_EXIT));

END
ELUDOM
