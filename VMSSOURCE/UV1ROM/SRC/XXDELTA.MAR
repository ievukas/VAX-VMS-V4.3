	.title	seaweed - kernel debugger
	.ident	/x01/

;
;****************************************************************************
;*									    *
;*  Copyright (c) 1983							    *
;*  by DIGITAL Equipment Corporation, Maynard, Mass.			    *
;* 									    *
;*  This software is furnished under a license and may be used and  copied  *
;*  only  in  accordance  with  the  terms  of  such  license and with the  *
;*  inclusion of the above copyright notice.  This software or  any  other  *
;*  copies  thereof may not be provided or otherwise made available to any  *
;*  other person.  No title to and ownership of  the  software  is  hereby  *
;*  transferred.							    *
;* 									    *
;*  The information in this software is subject to change  without  notice  *
;*  and  should  not  be  construed  as  a commitment by DIGITAL Equipment  *
;*  Corporation.							    *
;* 									    *
;*  DIGITAL assumes no responsibility for the use or  reliability  of  its  *
;*  software on equipment which is not supplied by DIGITAL.		    *
;*									    *
;****************************************************************************
;
; Author:
;
;	D. N. Cutler 1-Jan-82
;
; Abstract:
;
;	This debugger is a modified version of the VMS debugger XDELTA. It
;	intended for use in debugging the kernel. The debugger runs
;	standalone, in kernel mode, and at ipl 31. The original author was
;	R. I. Hustvedt.
;
; macro library references
;

	$prdef				;define processor registers
	$psldef				;define processor status longword

;
; symbol definitions
;

v_f1=8					;field 1 present flag
v_f2=9					;field 2 present flag
v_f3=10					;field 3 present flag
v_f4=11					;field 4 present flag
v_f5=12					;field 5 present flag

v_open=0				;open cell flag
v_ascii=1				;ascii
v_infield=2				;field in progress
v_tbit=3				;enable tbit
v_atbrk=4				;at breakpoint
v_tbitok=5				;tbit expected
v_rub=6					;rubout in progress
v_negate=7				;negate bit
v_prmode=15				;processor register mode
v_preg=31				;processor register flag

rdcr=0					;read csr
rdbuf=2					;read buffer
outcr=4					;output csr
outb=6					;output buffer

bslsh=92				;back slash code
cr=13					;carriage return
lf=10					;line feed
quot=39					;quote
rubout=127				;rubout code
slsh=47					;slash code

;
; debugger static data
;

	.psect	seaweed,long
context:				;
	.long	0			;buffer padding
inbuf:	.blkb	48			;input buffer
status:	.long	0			;status flags
f1:	.long	0			;fields 1-5
f2:	.long	0			;
f3:	.long	0			;
f4:	.long	0			;
f5:	.long	0			;
fctr:	.byte	0			;field counter
dtype:	.byte	2			;data type
curtype:.byte	2			;current type
oper:	.byte	0			;operator
b:					;base of data area(center)
curdot:	.long	0			;current location
quan:	.long	0			;quantity (;q)
outbuf:	.blkl	4			;output buffer
savreg:					;register save area
	.blkl	1			;r0
	.blkl	1			;r1
savr2:	.blkl	1			;r2
	.blkl	1			;r3
	.blkl	1			;r4
	.blkl	1			;r5
	.blkl	1			;r6
	.blkl	1			;r7
	.blkl	1			;r8
	.blkl	1			;r9
	.blkl	1			;r10
	.blkl	1			;r11
savap:	.blkl	1			;ap
	.blkl	1			;(fp)
savsp:	.blkl	1			;sp
savpc:	.blkl	1			;pc
savpsl:	.blkl	1			;psl
savocr:	.blkl	1			;output csr save
savrcr:	.blkl	1			;input csr save

;
; break point data
;

brkadr=.-4
xdt$initial_break::			;initial breakpoint address
	.long	0			;address of initial kernel breakpoint
	.blkl	7			;other break point addresses
nbrk=<.-4-brkadr>/4			;number of breakpoints
brkop=.-1				;saved opcode
	nop				;initial opcode
	.blkb	7			;remaining opcodes

brkdsp=.-4
	.blkl	8			;display location start
brkcom=.-4
	.blkl	8			;command start

xregv:	.blkl	16			;x register vector
vector:	.blkl	4			;saved vector contents

;
; primary character list
;

primary:				;
	.ascii	/0123456789ABCDEF/	;decimal and hex chars
	.ascii	/./			;dot - current location
	.ascii	/,/			;comma - field separator
operbas=.-primary			;operators
	.ascii	/+/			;plus - add
	.ascii	/ /			;blank - same as plus
	.ascii	/@/			;shift operator
	.ascii	/*/			;multiply operator
	.ascii	/%/			;divide operator
	.ascii	/-/			;minus - subtract operator
	.ascii	/[/			;lbracket - left bracket
term:					;base of terminator list
	.ascii	<9>			;tab - indirect
	.ascii	<10>			;linefeed -
	.ascii	<cr>			;return -
	.ascii	'/'			;slash - open for display
	.ascii	'"'			;double quote - open for ascii display
	.ascii	/=/			;equals - display
	.ascii	<27>			;escape - previous location
	.ascii	/S/			;step
nterm=.-term				;number of terminators
	.ascii	<59>			;semi - initiate secondary
	.ascii	/P/			;p - processor register prefix
	.ascii	/Q/			;q - last quantity
	.ascii	/'/			;quote - begin char string
	.ascii	/R/			;register prefix
	.ascii	/G/			;g - global prefix
	.ascii	/H/			;h - high, p1 space prefix
	.ascii	/X/			;x register prefix
nprim=.-primary				;number of primary commands

;
; command scanner
;

outer:	.asciz	<lf><cr>/eh?/<lf><cr>
dcom:	.word	0			;perform debugger commands
	brb	scanp			;
error:	movab	outer,r4		;set addr of control string
	bsbw	outzstring		;output asciz string
superst:movl	fp,sp			;reset stack
	movab	inbuf-b(r11),r9		;reset string address
	clrb	(r9)			;and force read
	bsbw	reset			;reset scanner
scanp:	bsbb	nextp			;scan input
	brb	scanp			;scan it all
nextp:	bsbw	getchar			;process next primary character
	locc	r8,#nprim,primary	;check it
	beql	error			;not found, error
	subl3	r0,#nprim,r0		;rationalize index
	case	r0,limit=#16,<-		;
		dot,-			;dot - current location
		comma,-			;comma - field separator
		operator,-		;plus - add operator
		operator,-		;blank - add operator
		operator,-		;@ - shift operator
		operator,-		;* - multiply operator
		operator,-		;% - divide operator
		negate,-		;minus - subtract/negate
		lbracket,-		;left bracket - mode select
		tab,-			;tab - indirect
		linefeed,-		;line feed - next location
		return,-		;return - close open cell
		slash,-			;slash - open for display
		dquote,-		;double quote - open for ascii display
		equals,-		;equals - display value
		escap,-			;escape - previous location
		step,-			;'s' - single step
		semi,-			;semi colon - secondary command
		preg,-			;'p' - processor register
		quant,-			;'q' - last quantity
		quote,-			;quote - begin ascii string
		register,-		;general register
		globl,-			;g - global prefix
		high,-			;h - p1 space prefix
		xreg,-			;x register
		>			;
	cmpw	r0,#16			;is number > radix
	bgeq	error			;yes
	mull	#16,r6			;scale by radix
	addl	r0,r6			;and add new digit
infld:	bisl	#<1@v_infield>,(r10)	;note field input
	rsb				;

globl:	rotl	#31,#1,r4		;generate system space prefix
	brb	pre1			;merge with common
high:	movl	#^x7ffe0000,r4		;p1 space base address
pre1:	bsbb	endexpr			;end expression
	movl	r4,r6			;set into accum
	pushab	infld			;return through infld

;
; end of expression term, compute result
;

endexpr:				;
	bbcc	#v_negate,(r10),5$	;skip if not negate
	mnegl	r6,r6			;negate accumulator
5$:	bsbb	10$			;perform operation
	clrl	r6			;clear accumulator
	clrb	oper-b(r11)		;init operator
	rsb				;
10$:	case	oper-b(r11),type=b,<-	;do operation
		add,-			;add, plus
		add,-			;blank, plus
		shft,-			;shift, @
		mul,-			;multiply, *
		div,-			;divide, %
		>			;
shft:	ashl	r6,r7,r7		;shift
	rsb				;
mul:	mull	r6,r7			;multiply
	rsb				;
div:	divl	r6,r7			;divide
	rsb				;
add:	addl	r6,r7			;add
	rsb				;
 
;
; open specified cell and disply in acsii or hexdecimal
;
 
dquote:	bisb	#<1@v_ascii>,(r10)	;set ascii flag
	brb	open			;
slash:	bicb	#<1@v_ascii>,(r10)	;clear ascii display mode
open:	bsbb	endfield		;terminate field
	bbs	#v_f1,(r10),5$		;address specified?
	movl	quan-b(r11),curdot-b(r11) ;no, go indirect
	brb	10$			;and display content
5$:	movl	f1-b(r11),curdot-b(r11)	;set new dot
10$:	extzv	#v_prmode,#1,(r10),r0	;get processor register mode flag
	insv	r0,#v_preg,#1,(r10)	;and move to semi-permanent copy
	bsbw	locout			;output and open
	bbc	#v_f2,(r10),rset	;range specified?
15$:	cmpl	f2-b(r11),curdot-b(r11)	;check for end
	bleq	rset			;yes
	bsbb	nextloc			;increment to next dot
	brb	15$			;and continue
err4:	brw	error			;declare error

;
; close current open cell
;

	.enabl	lsb
return:	bsbb	endfield		;terminate current field
	bbcc	#v_open,(r10),10$	;skip if none open
	bbc	#v_f1,(r10),rset	;skip if nothing to store
	bsbw	deposit			;deposit
rset:	brw	reset			;reset scanner
10$:	bbc	#v_f1,(r10),rset	;done if no input
	brw	eql1			;otherwise output
	.dsabl	lsb			;

;
; comma terminate current field
;
 
comma:	bsbw	infld			;zero if null field
 
;
; terminate current field
;
 
endfield:				;
	bbcc	#v_infield,(r10),10$	;clear pending field
	bsbw	endexpr			;end expression
	movzbl	fctr-b(r11),r0		;get field pointer
	bbss	r0,1(r10),err4		;error if too many fields
	movl	r7,f1-b(r11)[r0]	;store field value
	incb	fctr-b(r11)		;increment field counter
	clrq	r6			;clear accumulators
10$:	rsb				;

;
; fetch specified data
;
 
fetch:	bbs	#v_preg,(r10),40$	;br if processor register
	case	curtype-b(r11),type=b,<- ;operate on type
		10$,-			;byte
		20$,-			;word
		30$,-			;long
		>			;
10$:	movzbl	@curdot-b(r11),quan-b(r11) ;get byte
	rsb				;
20$:	movzwl	@curdot-b(r11),quan-b(r11) ;get word
	rsb				;
30$:	movl	@curdot-b(r11),quan-b(r11) ;get longword
	rsb				;
40$:	mfpr	curdot-b(r11),quan-b(r11) ;get processor register
	rsb				;

;
; increment to next location
;
 
nextdot:				;
	movl	#1,r1			;assume unit increment
	tstl	(r10)			;check for preg
	blss	10$			;yes, use unit increment
	rotl	curtype-b(r11),r1,r1	;form increment
10$:	addl	r1,curdot-b(r11)	;and add to dot
	rsb				;

;
; output content
;
 
outbb:	.byte	4,12,28			;starting digit list
 
linefeed:				;
	bsbw	return			;close open cell
nextloc:				;prompt with next location
	bsbb	nextdot			;increment location
locprompt:				;display addr/content
	bsbb	outputa			;output address
locout:	bsbb	fetch			;fetch content
	bisl	#<1@v_open>,(r10)	;indicate open cell
output:	movzbl	curtype-b(r11),r1	;get type
	movzbl	outbb[r1],r2		;init digit selector
	movl	quan-b(r11),r3		;get quantity to display
	bbs	#v_ascii,(r10),10$	;check for ascii out
	bsbb	outcom			;output number in hex
	brb	20$			;
10$:	movl	r3,outbuf-b(r11)	;put string in buffer
	ashl	r1,#1,r2		;get count
	clrb	outbuf-b(r11)[r2]	;mark end of string
	bsbb	outzbuf			;outbut asciiz buffer
20$:	brb	outspace		;

;
; output address
;
 
outputa:				;output address
	bsbb	crlf			;output cr/lf
	movab	savreg-b(r11),r3	;base of register area
	subl3	r3,curdot-b(r11),r3	;compute offset into register area
	blss	5$			;not general register
	divl	#4,r3			;scale to longword number
	cmpl	r3,#15			;check for max reg number
	bgtr	5$			;gtr, not a register
	movzbl	#^a'r',r0		;output prefix
	bsbb	outchar			;of 'r'
	clrl	r2			;and set for one digit of output
	brb	10$			;
5$:	movl	curdot-b(r11),r3	;get address
	movl	#28,r2			;assume longword output
	tstl	(r10)			;check for processor register
	bgeq	10$			;no, just a longword
	movzbl	#^a'p',r0		;precede with a 'p'
	bsbb	outchar			;output p
	movl	#4,r2			;set field to 2 digits
10$:	bsbb	outcom			;common output
	movzbl	#slsh,r0		;output slash
	brb	outchar			;return through outchar
outdigit:				;output one digit
	clrl	r2			;zap digit selector
	brb	outcom			;and merge with common
outlong:				;output longword
	movl	#28,r2			;set digit selector
outcom:	movab	outbuf-b(r11),r4	;get address of output buffer
10$:	extzv	r2,#4,r3,r1		;get digit
	movb	primary[r1],(r4)+	;buffer it
	subl	#4,r2			;next digit
	bgeq	10$			;do all requested
	clrb	(r4)			;mark end of buffer
outzbuf:movab	outbuf-b(r11),r4	;get start of buffer
outzstring:				;output asciz string
	movzbl	(r4)+,r0		;get a char
	beql	10$			;br if done
	bsbb	outchar			;output char
	brb	outzstring		;continue
10$:	rsb				;
outbslsh:				;output back slash
	movzbl	#bslsh,r0		;set character code
	brb	outchar			;and output it
outr8:	movzbl	r8,r0			;get char to output
outchar:				;output char in r0
	mfpr	#pr$_txcs,r1		;get console transmit status
	bbc	#7,r1,outchar		;wait for ready
	mtpr	r0,#pr$_txdb		;send character to console
	rsb				;
outspace:				;
	movzbl	#32,r0			;set code for space
	brb	outchar			;and send it
crlf:	movzbl	#cr,r0			;return
	bsbb	outchar			;send it
	movzbl	#lf,r0			;line feed
	brb	outchar			;send it

;
; get input character
;
;output:
;	r8 - input character
;	r9 - buffer pointer updated (buffer in asciz format)
;

getchar:				;
	movzbl	(r9)+,r8		;get next character
	beql	10$			;read if none avail
	rsb				;
10$:	movab	inbuf-b(r11),r9		;set address of input buffer
20$:	mfpr	#pr$_rxcs,r0		;get console status
	bbc	#7,r0,20$		;wait for ready
	mfpr	#pr$_rxdb,r8		;get console character
	bicb	#^x80,r8		;strip parity
	cmpb	r8,#rubout		;check for rubout
	bneq	90$			;no
	bbss	#v_rub,(r10),70$	;set start of rubout sequence
	bsbb	outbslsh		;output back slash
70$:	movzbl	-(r9),r8		;get rubbed out char
	beql	10$			;if eql front of buffer
	bsbb	outr8			;output rubbed out char
	brb	20$			;and get another
90$:	bbcc	#v_rub,(r10),100$	;terminate rubout sequence
	bsbb	outbslsh		;output back slash
100$:	bbc	#6,r8,110$		;br if not alpha
	bicb	#32,r8			;set to upper case
110$:	bsbb	outr8			;echo character
	movb	r8,(r9)+		;buffer new char
	locc	r8,#nterm,term		;check for terminator
	beql	20$			;not a terminator
	cmpb	#cr,r8			;is char = return
	bneq	120$			;no,
	bsbb	crlf			;yes, send cr/lf
120$:	clrb	(r9)			;mark end of buffer
	movab	inbuf-b(r11),r9		;restore buffer base
	brb	getchar			;and try again
 
;
; plus/minus operators
;
 
blank:					;same as plus
operator:				;
	bsbw	endexpr			;end expression
	subb3	#operbas,r0,oper-b(r11)	;set operator
	rsb				;
 
;
; monadic minus - negate
;
 
negate:	tstl	r6			;test accumulator
	beql	5$			;empty
	bsbw	endexpr			;otherwise perform operation
5$:	xorb	#<1@v_negate>,(r10)	;toggle negate flag
10$:	rsb				;

;
; indirect display (tab)
;
 
tab:	movl	quan-b(r11),curdot-b(r11) ;go indirect
	extzv	#v_prmode,#1,(r10),r0	;get processor register mode
	insv	r0,#v_preg,#1,(r10)	;and copy to semi-permanent flag
	brb	locp			;and display it

;
; escape - display previous location
;

escap:	movl	#1,r1			;assume unit increment
	tstl	(r10)			;check for processor register
	blss	10$			;yes, use unit increment
	rotl	curtype-b(r11),r1,r1	;form increment
10$:	subl	r1,curdot-b(r11)	;and subtract from dot
locp:	brw	locprompt		;prompt with content
 
;
; equals - value display
;
	.enabl	lsb			;
equals:	bsbw	endfield		;terminate field
	bbc	#v_f1,(r10),10$		;ignore if field blank
eql1:	movl	f1-b(r11),quan-b(r11)	;set quantity
10$:	bsbw	output			;output it
	.dsabl	lsb			;

;
; reset
;

reset:	bicl	#^x0ffff80,(r10)	;clear field and negate flags
	clrb	fctr-b(r11)		;clear field counter
	clrq	r6			;reset accumulators
	rsb				;
 
;
; semi - secondary command
;

second:	.ascii	/X/			;x register set/display
	.ascii	/P/			;p - proceed
	.ascii	/I/			;i - program counter
	.ascii	/G/			;g - go, start
	.ascii	/E/			;e - execute string
	.ascii	/B/			;b - set/clr breakpoint
nsec=.-second				;number of secondary commands

semi:					;
	bicb	#<1@v_open>,(r10)	;clear open flag
	bsbw	endfield		;terminate field
	bsbw	getchar			;get secondary command char
	locc	r8,#nsec,second		;locate secondary command
10$:	case	r0,limit=#1,<-		;switch on type
		brkpoint,-		;set breakpoint
		execute,-		;execute string
		go,-			;semi-g, go
		progctr,-		;semi-i, instruction conter
		proced,-		;semi-p, proceed
		xset,-			;set xregister
		>			;
err2:	brw	error			;error
 
;
; left bracket
;
 
modes:	.ascii	/C/			;character
	.ascii	/L/			;long, hex
	.ascii	/W/			;word, hex
	.ascii	/B/			;byte, hex
nmodes=.-modes				;number of mode characters

lbracket:				;mode selection
	bsbw	getchar			;get mode char
	locc	r8,#nmodes,modes	;convert to index
	beql	err2			;not found, error
	bbs	#2,r0,10$		;check for 'c'
	subb3	#1,r0,curtype-b(r11)	;set mode
	bicb	#<1@v_ascii>,(r10)	;clear char mode
	rsb				;
10$:	bisb	#<1@v_ascii>,(r10)	;set character mode
	rsb				;
 
;
; step
;
 
step:	insv	#1,#v_tbit,#2,(r10)	;clr v_atbrk, set v_tbit
	bbcc	#v_prmode,(r10),20$	;clear processor register display mode
20$:	ret				;
 
;
; breakpoint
;
 
brkpoint:				;
	bbc	#v_f1,(r10),shobrk	;display breakpoints
	bbs	#v_f2,(r10),20$		;yes, it was specified
	movl	#1,r2			;init index
10$:	tstl	brkadr[r2]		;find free slot
	beql	30$			;yes, got one
	aobleq	#nbrk,r2,10$		;any more to check?
	brb	err2			;error
20$:	movl	f2-b(r11),r2		;get brkpoint number
	beql	10$			;null field, scan for slot
	cmpl	#nbrk,r2		;check for legal
	blss	err2			;out of range
30$:	clrl	brkdsp[r2]		;clear display
	clrl	brkcom[r2]		;clear command address
	movl	f1-b(r11),r0		;get breakpoint address
	beql	35$			;allow clear of breakpoint
	movb	(r0),(r0)		;test writability of address
35$:	bbc	#v_f3,(r10),40$		;display specified?
	movl	f3-b(r11),brkdsp[r2]	;set display start
	beql	40$			;skip test if null
	tstl	@f3-b(r11)		;check readability
40$:	bbc	#v_f4,(r10),45$		;skip if no command address
	movl	f4-b(r11),brkcom[r2]	;set command string
45$:	movl	r0,brkadr[r2]		;save breakpoint address
	brw	reset			;reset scanner and return
 
;
; show breakpoint
;
 
shobrk:	movl	#1,r5			;init index for loop
10$:	movl	brkadr[r5],r8		;get breakpoint address
	beql	20$			;skip if null
	movl	r5,r3			;breakpoint number
	bsbw	crlf			;new line
	bsbw	outdigit		;bpt number
	bsbw	outspace		;space
	movl	r8,r3			;address of bpt
	bsbw	outlong			;output address
	bsbw	outspace		;space over
	movl	brkdsp[r5],r3		;get display start
	beql	15$			;none
	bsbw	outlong			;output display start
15$:	movl	brkcom[r5],r3		;get command string address
	beql	20$			;none
	bsbw	outspace		;space another
	bsbw	outlong			;and output a longword
20$:	aobleq	#nbrk,r5,10$		;any more to check?
	brw	crlf			;and exit through crlf
 
;
; go command
;
 
go:	bbc	#v_f1,(r10),proced	;just proceed if no value
	movl	f1-b(r11),savpc-b(r11)	;set new pc
 
;
; proceed
;
 
proced:	ret				;
 
;
; semi-i
;
 
dot:	moval	curdot-b(r11),r1	;set address of dot
	bbc	#v_preg,(r10),valr	;was it processor register?
	bbss	#v_prmode,(r10),valr	;yes, set processor register mode
	brb	valr			;read value
quant:	moval	quan-b(r11),r1		;set quantity address
	brb	valr			;read value
progctr:				;
	moval	savpc-b(r11),r1		;set pc address
value:	bbc	#v_f1,(r10),valr	;skip if no value
	movl	f1-b(r11),(r1)		;set new value for pc
valr:	movl	(r1),r6			;and get value
vali:	brw	infld			;set field in progress
register:				;
	moval	savreg-b(r11),r5	;set base of register area
	bsbb	regcom			;fetch address
	brb	vali			;and use it
regcom:	bsbw	getchar			;get second char
	locc	r8,#16,primary		;translate to hex
	beql	err3			;error, not hex
10$:	subl3	r0,#16,r0		;invert
	moval	(r5)[r0],r6		;accumulate
	rsb				;
xset:	bbc	#v_f2,(r10),err3	;error if not two fields
	extzv	#0,#4,f2-b(r11),r1	;get register number
	moval	xregv[r1],r1		;and compute register address
	brb	value			;process value
xreg:					;x-register value
	moval	xregv,r5		;set address of register vector
	bsbb	regcom			;address to r6
	movl	(r6),r6			;get value
	brb	vali			;and note input in field
 
;
; access violation, machine check handler
;
 
	.align	long
xdt$fault:				;
	mtpr	#^xf,#pr$_mcesr		;set 1 to clear mcheck error summary
err3:	brw	error			;and declare error

;
; save - save target registers, pc, psl
;
 
save:	setipl	#31			;disable interrupts
	movq	r0,savreg		;save r0,r1
	movab	savr2,r1		;setup base for remaining regs
	movq	r2,(r1)+		;save r2,r3
	movq	r4,(r1)+		;save r4,r5
	movq	r6,(r1)+		;save r6,r7
	movq	r8,(r1)+		;save r8,r9
	movq	r10,(r1)+		;save r10,r11
	movq	ap,(r1)+		;save ap,fp
	movab	12(sp),(r1)+		;assume kernel stack
	movq	4(sp),(r1)+		;save pc,psl
	mfpr	#pr$_txcs,(r1)+		;save console transmit status
	mfpr	#pr$_rxcs,(r1)+		;save console recvr status
	mtpr	#0,#pr$_txcs		;clear interrupt enable
	mtpr	#0,#pr$_rxcs		;for both transmit and receive
	movab	b,r11			;and data base address
	movab	status-b(r11),r10	;set status base
	movab	inbuf-b(r11),r9		;point to input buffer
	clrb	(r9)			;make buffer empty
	mfpr	#pr$_scbb,r0		;get base address of scb
	movab	vector,r1		;get address to save vectors
	movl	4(r0),(r1)+		;save machine check vector
	movab	xdt$fault,4(r0)		;set machine check vector
	movl	^x18(r0),(r1)+		;save reserved operand vector
	movab	xdt$fault,^x18(r0)	;set reserved operand vector
	movl	^x20(r0),(r1)+		;save access violation vector
	movab	xdt$fault,^x20(r0)	;set access violation vector
	movl	^x24(r0),(r1)+		;save page fault vector
	movab	xdt$fault,^x24(r0)	;set page fault vector
	brw	reset			;reset scanner

;
; restore - restore target registers
;
 
restore:movq	savpc-b(r11),4(sp)	;set pc,psl
restorr:				;restore registers only
	mfpr	#pr$_scbb,r0		;get base address of scb
	movab	vector,r1		;get address of saved vectors
	movl	(r1)+,4(r0)		;restore machine check vector
	movl	(r1)+,^x18(r0)		;restore reserved operand vector
	movl	(r1)+,^x20(r0)		;restore access violation vector
	movl	(r1)+,^x24(r0)		;restore page fault vector
	mtpr	savocr-b(r11),#pr$_txcs ;restore initial tx status
	mtpr	savrcr-b(r11),#pr$_rxcs ;and initial receiver state
	movab	savr2-b(r11),r1		;set base for restore
	movq	(r1)+,r2		;restore r2,r3
	movq	(r1)+,r4		;restore r4,r5
	movq	(r1)+,r6		;restore r6,r7
	movq	(r1)+,r8		;restore r8,r9
	movq	(r1)+,r10		;restore r10,r11
	movq	(r1)+,ap		;restore ap,fp
	movq	savreg,r0		;restore r0,r1
	rsb				;
 
;
; handle breakpoint traps
;
 
bmsg:	.asciz	/ brk at /		;break point message
	.align	long
xdt$breakpoint::			;breakpoint vector address
	bsbw	save			;save regs and disable
	bsbw	getbptx			;get index of bpt
	tstl	r3			;check for match
	beql	30$			;if eql no
	bisb	#<<1@v_tbit>!<1@v_atbrk>>,(r10)	;set status
30$:	bsbw	unbrk			;restore opcodes
	bbs	#psl$v_tbit,savpsl-b(r11),proceed ;proceed if bpt and tbit
	movl	r3,r5			;save bpt number
	bsbw	crlf			;output cr/lf pair
	bsbw	outdigit		;output bpt number
	movab	bmsg,r4			;msg address
	bsbw	outzstring		;output asciiz
	movl	savpc-b(r11),r3		;output pc
	bsbw	outlong			;output hex longword
	bsbw	outspace		;send space
	movl	brkdsp[r5],r1		;get address to display
	beql	40$			;none
	movl	r1,curdot-b(r11)	;set as current dot
	bsbw	locprompt		;and display
40$:	movl	brkcom[r5],r1		;get command string address
	beql	getcmd			;none get command
	movl	r1,r9			;set to scan stored command
getcmd:	callg	(ap),dcom		;perform debugger commands
proceed:				;proceed
	bsbb	setbrk			;set breakpoints
	bbcc	#v_tbit,(r10),50$	;test and clr trace flag
30$:	bbss	#psl$v_tbit,savpsl-b(r11),45$	;set tbit
45$:	bbss	#v_tbitok,(r10),50$	;set tbit expected
50$:	bsbw	restore			;restore everything
	rei				;

;
; handler for tbit exception
;
 
	.align	long
xdt$trace_trap::			;
	bsbw	save			;save and disable
	bbcc	#v_tbitok,(r10),xdeldbg	;br if tbit expected
	bicl	#<1@psl$v_tbit>,savpsl-b(r11) ;clear tbit in psl
xdeldbg:				;common with debug exception
	bsbb	unbrk			;replace opcodes
	bbsc	#v_atbrk,(r10),proceed	;check for proceed
 
;
; output step message
;
 
	movl	savpc-b(r11),curdot-b(r11) ;set address
	bsbw	locprompt		;prompt with address/content
	brb	getcmd			;go get commands

;
; restore opcodes for breakpoints
;
 
unbrk:	movl	#nbrk,r1		;init loop
10$:	movl	brkadr[r1],r0		;get breakpoint address
	beql	20$			;skip if not enabled
	movb	brkop[r1],(r0)		;restore opcode
20$:	sobgtr	r1,10$			;do them all
	rsb				;

;
; set breakpoint instructions
;
 
setbrk:	movl	#nbrk,r1		;init loop
10$:	movl	brkadr[r1],r0		;get address
	beql	20$			;skip if not enabled
	movb	(r0),brkop[r1]		;save opcode
	bitb	#<<1@v_tbit>!<1@v_atbrk>>,(r10)	;check for trace
	beql	15$			;no trace, set anyway
	cmpl	r0,savpc-b(r11)		;check for at bpt
	beql	20$			;yes, dont set it
15$:	movb	#3,(r0)			;set breakpoint opcode
20$:	sobgtr	r1,10$			;do them all
	rsb				;

;
; get breakpoint index
;
 
getbptx:				;
	movl	#nbrk,r3		;init loop
10$:	cmpl	savpc-b(r11),brkadr[r3]	;is this a bpt?
	beql	20$			;yes
	sobgtr	r3,10$			;no, continue
20$:	rsb				;
 
;
; quote - start character string input
;
 
quote:	movl	curdot-b(r11),r5	;point to string buffer
5$:	bsbw	getchar			;get character
	cmpb	#quot,r8		;check for quote
	beql	10$			;yes, end of string
	movb	r8,(r5)+		;insert in buffer
	brb	5$			;and continue
10$:	movl	r5,curdot-b(r11)	;save new dot
	rsb				;
 
;
; deposit data
;
 
deposit:				;
	bbs	#v_preg,(r10),40$	;br if processor register
	case	curtype-b(r11),type=b,<-	;switch on type
		10$,-			;byte
		20$,-			;word
		30$,-			;long
		>			;
10$:	movb	f1-b(r11),@curdot-b(r11);store byte
	rsb				;
20$:	movw	f1-b(r11),@curdot-b(r11);store word
	rsb				;
30$:	movl	f1-b(r11),@curdot-b(r11);store long
	rsb				;
40$:	mtpr	f1-b(r11),curdot-b(r11)	;set value in processor register
	rsb
 
;
; execute command
;
 
execute:				;
	bbc	#v_f1,(r10),10$		;exit if no address
	movl	f1-b(r11),r9		;set char string
	bneq	10$			;not null
	brw	superst			;super reset
10$:	rsb				;

;
; set processor register mode
;
 
preg:					;processor register mode
	bbss	#v_prmode,(r10),10$	;set processor reg flag
10$:	rsb				;

	.end
