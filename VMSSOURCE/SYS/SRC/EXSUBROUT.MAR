	.TITLE	EXSUBROUT - EXECUTIVE SUPPORT SUBROUTINES
	.IDENT	'V04-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; Abstract:
;
;	EXECUTIVE SUPPORT SUBROUTINES
;
; Author:
;
;	D. N. CUTLER 17-AUG-76
;
; MODIFIED BY:
;
;	V03-012	TMK0001		Todd M. Katz		11-Apr-1984  
;		Add the routine EXE$CLEANUP_ORB. This routine cleans up all
;		structures referenced by an ORB. Also, change all occurrances
;		of BSBWs to EXE$CHKPRO_ALT in the EXE$CHKxxxACCES routines to 
;		EXE$CHKPRO_INT since LMP0221 missed a couple of them.
;
;	V03-011	LMP0221		L. Mark Pilant,		7-Apr-1984  11:10
;		Move EXE$CHKPRO_ALT to SYSCHKPRO.MAR, also change the name
;		to EXE$CHKPRO_INT as it is now the real thing.  Modify the
;		EXE$CHKxxxACCES routine to use the ORB from the UCB.
;
;	V03-010	LMP0214		L. Mark Pilant,		24-Mar-1984  10:54
;		Add support for the new EXE$CHKPRO_INT interface.  This
;		includes adding the temporary routine EXE$CHKPRO_ALT so
;		as not to totally eliminate the old interface.
;
;	V03-009	ACG0408		Andrew C. Goldstein,	20-Mar-1984  17:08
;		Remove obsolete EXE$GETACCESS
;
;	V03-008	LMP0190		L. Mark Pilant,		6-Feb-1984  9:07
;		Remove the assumption that a CHIP block has 16 byte granularity.
;
;	V03-007	LMP0185		L. Mark Pilant,		19-Jan-1984  15:25
;		Modify the interface to the EXE$CHKxxxACCES routines to allow
;		additional protection information to be checked.
;
;	V03-006	RSH0083		R. Scott Hanna		22-Nov-1983
;		Modify return status in EXE$VAL_IDNAME from SS$_NOSUCHID
;		to SS$_IVIDENT.
;
;	V03-005	RSH0044		R. Scott Hanna		12-Jul-1983
;		Complete EXE$VAL_IDNAME
;
;	V03-004	RSH0042		R. Scott Hanna		22-Jun-1983
;		Add EXE$VAL_IDNAME
;
;	V03-003	WMC0001		Wayne Cardoza		18-Apr-1983
;		Add EXE$CHKEXEACCES.
;	
;	V03-002	KDM0002		Kathleen D. Morse	28-Jun-1982
;		Add $PRVDEF and $VADEF.
;
;--

	.SBTTL	Declarations

;
; MACRO LIBRARY CALLS
;
 
	$ACBDEF				;DEFINE ACB OFFSETS
	$ACEDEF				;DEFINE ACE TYPES & OFFSETS
	$ACLDEF				;DEFINE ACCESS CONTROL LIST BLOCK
	$ARBDEF				;DEFINE ACCESS RIGHTS BLOCK
	$ARMDEF				;DEFINE ACCESS RIGHTS MASK
	$CHPDEF				;DEFINE PROTECTION CHECK CODES
	$CHPCTLDEF			;$CHKPRO CONTROL BLOCK OFFSETS
	$CHPRETDEF			;$CHKPRO RETURN ARG BLOCK OFFSETS
	$DSCDEF				;DEFINE CHARACTER DESCRIPTOR BLOCK
	$IPLDEF				;DEFINE PRIORITY LEVELS
	$JIBDEF				;DEFINE JOB INFORMATION BLOCK
	$KGBDEF				;DEFINE KEY GRANT BLOCK
	$ORBDEF				;OBJECTS RIGHTS BLOCK OFFSETS
	$PCBDEF				;DEFINE PCB OFFSETS
	$PRDEF				;DEFINE PROCESSOR REGISTERS
	$PRVDEF				;DEFINE PRIVILEGES
	$PSLDEF				;DEFINE PROCESSOR STATUS FIELDS
	$RSNDEF				;DEFINE RESOURCE WAIT NUMBERS
	$SSDEF				;DEFINE SYSTEM STATUS VALUES
	$TQEDEF				;DEFINE TQE OFFSETS
	$UCBDEF				;DEFINE UNIT CONTROL BLOCK
	$VADEF				;DEFINE VIRTUAL ADDRESS FIELDS

	.SBTTL	Local Macro Definitions and storage
;	
;	This macro is used to define masks for the scan table. It defines
;	local symbols for the mask bit position, mask longword, and symbols
;	used to build the scan table with the TABLE_BLD macro. Each invocation
;	of the macro allocates successive bits to be used in the table. The
;	macro is invoked as follows:
;
;		MASK_DEF name,<<range>,...>
;
;		Where range is a single decimal number or two numbers
;		separated by a comma. These numbers specify a single or
;		contiguous range of byte offsets in the scan table for
;		which the scan bit is to be set.
;
;	Example:
;
;		MASK_DEF ID_NAME,<<65,90>,<97,122>,<48,57>,<36>,<95>>
;
;		This would define the symbols MASK_V_ID_NAME and
;		MASK_M_ID_NAME. It will also cause the bit MASK_V_ID_NAME
;		to be set in the scan table at offsets which correspond to
;		the characters A-Z, a-z, $, and _.
;
	.MACRO	MASK_DEF MASK_NAME,LIST

	.MACRO	MASK_DEF_2 RANGE_LOW,RANGE_HIGH
	.IF	B	<RANGE_HIGH>
	$$ = 1
	.IFF
	$$ = RANGE_HIGH-RANGE_LOW+1
	.ENDC
	CHAR = RANGE_LOW
	.REPEAT	$$
	MASK_DEF_3 \CHAR
	CHAR = CHAR + 1
	.ENDR
	.ENDM

	.MACRO	MASK_DEF_3 $$$
	.IF	NDF	CHAR'$$$
	CHAR'$$$ = 1@MASK_K_NUM
	.IFF
	CHAR'$$$ = CHAR'$$$ ! <1@MASK_K_NUM>
	.ENDC
	.ENDM

	.IF	NDF	MASK_K_NUM
	MASK_K_NUM = 0
	.ENDC
	MASK_V_'MASK_NAME = MASK_K_NUM
	MASK_M_'MASK_NAME = 1@MASK_K_NUM
	.IRP	CLASS,<LIST>
	MASK_DEF_2 CLASS
	.ENDR
	MASK_K_NUM = MASK_K_NUM + 1
	.ENDM


;
;	This macro uses symbols defined by the MASK_DEF macro to build
;	the scan table.
;

	.MACRO	TABLE_BLD

	.MACRO	TABLE_BLD_2 $$
	.IF	NDF	CHAR'$$
	.BYTE	0
	.IFF
	.BYTE	CHAR'$$
	.ENDC
	.ENDM

	CHAR = 0
	.REPEAT	256
	TABLE_BLD_2 \CHAR
	CHAR = CHAR + 1
	.ENDR
	.ENDM

;
;	Define the scan table mask bits
;
	MASK_DEF	NUMBER,<<48,57>>				;0-9
	MASK_DEF	ID_NAME,<<65,90>,<97,122>,<48,57>,<36>,<95>>	;A-Z, a-z, 0-9, $, _

;
;	Build the scan table
;

	.PSECT	Y$EXEPAGED

SCAN_TABLE:
	TABLE_BLD

	.SBTTL	CHECK PROCESS RESOURCE REQUEST
 
	.ENABL	LSB
;+
; EXE$BUFFRQUOTA - CHECK BUFFER BYTE COUNT QUOTA AND CONDITIONALLY WAIT
; EXE$BUFQUOPRC - CHECK PROCESS BUFFER QUOTA ONLY AND CONDITIONALLY WAIT
; EXE$MULTIQUOTA - CHECK MULTI-UNIT RESOURCE REQUEST AND CONDITIONALLY WAIT
; EXE$SNGLEQUOTA - CHECK SINGLE-UNIT RESOURCE REQUEST AND CONDITIONALLY WAIT
;
; THESE ROUTINES ARE CALLED TO CHECK IF A PROCESS HAS SUFFICIENT RESIDUAL
; QUOTA TO GRANT A RESOURCE. IF SUFFICIENT QUOTA IS NOT AVAILABLE AND THE
; PROCESS IS ENABLED FOR IMPLIED RESOURCE WAIT, THEN THE PROCESS IS ENTERED
; IN A WAIT STATE TO WAIT FOR SUFFICIENT QUOTA TO BECOME AVAILABLE.
;
; INPUTS:
;
;	R4 = CURRENT PROCESS PCB ADDRESS.
;
; IF ENTRY AT EXE$BUFFRQUOTA, EXE$BUFQUOPRC, OR EXE$MULTIQUOTA, THEN
;
;	R1 = NUMBER OF UNITS OF RESOURCE REQUESTED.
;
; IF ENTRY AT EXE$MULTIQUOTA OR EXE$SNGLEQUOTA, THEN
;
;	R2 = ADDRESS OF QUOTA WORD CONTAINING REMAINING UNITS FOR SPECIFIED
;		RESOURCE.
;
;	NOTICE: EXE$MULTIQUOTA and EXE$SNGLEQUOTA cannot be used to check 
;		Buffered I/O Byte Count Quota, since these quota and count 
;		values 	are stored in longwords.  EXE$BUFFRQUOTA or 
;		EXE$BUFQUOPRC must be use to check Buffered I/O Byte Count 
;		Quota.
;
; OUTPUTS:
;
;	R0 LOW BIT CLEAR INDICATES CHECK FAILURE WITH CALLING IPL PRESERVED.
;
;		R0 = SS$_EXQUOTA = QUOTA EXCEEDED OR REQUEST GREATER THAN
;			MAXIMUM PROCESS OR SYSTEM QUOTA.
;
;	R0 LOW BIT SET INDICATES SUCCESS WITH IPL SET TO AST DELIVERY
;		LEVEL.
;
;		R0 = SS$_NORMAL = NORMAL COMPLETION.
;
;	The following table shows how the various routines treat R1 - R3.
;
;	Routine		R1	R2	R3
;	EXE$BUFFRQUOTA	 P	 D	 D
;	EXE$BUFQUOPRC	 P	 D	 D	P ==> Preserved
;	EXE$MULTIQUOTA	 P	 P	 D	D ==> Destroyed
;	EXE$SNGLEQUOTA	 D	 P	 D
;-
 
	.PSECT	AEXENONPAGED
EXE$BUFFRQUOTA::			;CHECK BUFFER BYTE COUNT QUOTA
	MOVZWL	IOC$GW_MAXBUF,R0	; Get max system buffer size.
	CMPL	R1,R0			;REQUEST GREATER THAN SYSTEM MAXIMUM?
	BGTRU	10$			;IF GTRU YES
EXE$BUFQUOPRC::				;CHECK PROCESS BUFFER QUOTA ONLY
	MOVL	PCB$L_JIB(R4),R0	;GET ADDRESS OF JOB INFORMATION BLOCK
	MOVAB	JIB$L_BYTCNT(R0),R2	;SET ADDRESS OF BYTE COUNT QUOTA
	MOVL	#32, R3			;ESTABLISH LONGWORD QUOTA CHECKING.
	CMPL	R1,JIB$L_BYTLM(R0)	;REQUEST GREATER THAN PROCESS MAXIMUM?
	BLEQU	15$			;IF LEQU NO
10$:	MOVZWL	#SS$_EXQUOTA,R0		;SET QUOTA EXCEEDED
	RSB				;
EXE$SNGLEQUOTA::			;CHECK SINGLE-UNIT RESOURCE REQUEST
	MOVL	#1,R1			;SET NUMBER OF UNITS OF RESOURCE REQUESTED
EXE$MULTIQUOTA::			;CHECK MULTI-UNIT RESOURCE REQUEST
	MOVL	#16, R3			;Establish word length quota checking.
15$:	MOVPSL	-(SP)			;Save PSL for possible resource wait.
	DSBINT	#IPL$_SYNCH		;Synchronize system data base access,
					;and save current IPL on stack.
	CMPZV	#0, R3, (R2), R1	;Compare either word or longword
					;using number of bits value in R3.
	BLSSU	30$			;Branch if insufficent resourse left.
	MOVZWL	#SS$_NORMAL,R0		;Enough quota left; normal completion.
	MOVL	#IPL$_ASTDEL,(SP)	;Insure exit IPL is 2, so that checked
					;resource is protected from AST's.
					;SS$_NORMAL & SS$_EXQUOTA common exit
20$:	ENBINT				;Restore IPL as appropriate.
	MOVAB	4(SP),SP		;Remove saved PSL from stack.
	RSB				;Return to caller.

30$:	MOVZWL	#SS$_EXQUOTA, R0	;Setup possible exceeded quota return 
	BBS	#PCB$V_SSRWAIT, -	;code, and branch if resource wait 
		PCB$L_STS(R4), 20$	;mode is disabled.  (NB: restored IPL 
					;will be that of our caller.)
	MOVZWL	#RSN$_ASTWAIT, R0	;Set AST wait resource number.
	MOVAB	4(SP), SP		;Strip saved caller's IPL from stack.
	BSBW	SCH$RWAIT		;Wait; adding PC stacked caller's PSL.
	BRB	15$			;Then try again.
	.DSABL	LSB

	.SBTTL CHECK ACCESS PROTECTION
;+
; EXE$CHKCREACCES - CHECK CREATE ACCESS
; EXE$CHKDELACCES - CHECK DELETE ACCESS
; EXE$CHKLOGACCES - CHECK LOGICAL I/O FUNCTION ACCESS
; EXE$CHKPHYACCES - CHECK PHYSICAL I/O FUNCTION ACCESS
; EXE$CHKRDACCES - CHECK READ ACCESS
; EXE$CHKWRTACCES - CHECK WRITE ACCESS
; EXE$CHKEXEACCES - CHECK EXECUTE ACCESS (IMPLIED BY READ ACCESS)
;
; THESE ROUTINES RETURN A TRUE OR FALSE VALUE ON THE PROTECTION
; INFORMATION SUPPLIED.
;
; INPUTS:
;
;	R0 = ADDRESS OF THE AGENT'S RIGHTS BLOCK
;	R1 = ADDRESS OF THE OBJECT'S RIGHTS BLOCK
;	R5 = 0
;
;		OR
;
;	R4 = ADDRESS OF THE ACCESSOR'S PCB
;	R5 = ADDRESS OF THE OBJECT'S UCB
;
; OUTPUTS:
;
;	R0 = SS$_NORMAL FOR ACCESS ALLOWED
;	R0 = SS$_NOPRIV FOR ACCESS DENIED
;
;	R2, R3, AND R4 ARE PRESERVED ACROSS CALL.
;-

; FOLLOWING ARE THE VERIOUS OFFSETS FOR LOCAL STORAGE.

	.PSECT	Y$EXEPAGED

	.ENABL	LSB
EXE$CHKDELACCES::			;CHECK DELETE ACCESS
EXE$CHKLOGACCES::			;CHECK LOGICAL I/O FUNCTION ACCESS
	MOVZWL	#ARM$M_DELETE,-(SP)	;SET NEEDED ACCESS
	BRB	10$			;
EXE$CHKCREACCES::			;CHECK CREATE ACCESS
EXE$CHKPHYACCES::			;CHECK PHYSICAL I/O FUNCTION ACCESS
	MOVZWL	#ARM$M_EXECUTE,-(SP)	;SET NEEDED ACCESS
	BRB	10$			;
EXE$CHKRDACCES::			;CHECK READ ACCESS
	MOVZWL	#ARM$M_READ,-(SP)	;SET NEEDED ACCESS
	BRB	10$			;
EXE$CHKEXEACCES::			;CHECK EXECUTE (IMPLIED BY READ) ACCESS
	MOVZWL	#ARM$M_READ!ARM$M_EXECUTE,-(SP)	;SET NEEDED ACCESS
	BRB	10$			;
EXE$CHKWRTACCES::			;CHECK WRITE ACCESS
	MOVZWL	#ARM$M_WRITE,-(SP)	;SET NEEDED ACCESS

; NOW FOR THE FUN.  IN THE NORMAL CASE, THE INFORMATION IS SIMPLY PASSED
; THROUGH TO EXE$CHKPRO_INT.  HOWEVER, TO SUPPORT THE OLD INTERFACE, IT
; WILL BE NECESSARY BUILD THE CHKPRO CONTROL BLOCK AND DETERMINE THE ARB
; AND ORB ADDRESSES.  IN EITHER CASE, EXE$CHKPRI_INT RETURNS SS$_NORMAL IF
; ACCESS IS ALLOWED OT SS$_NOPRIV IF ACCESS IS DENIED.

10$:	PUSHR	#^M<R1,R2,R3,R4>	;PRESERVE NEEDED REGISTERS

; IF THIS IS THE OLD INTERFACE, DETERMINE THE ARB AND ORB ADDRESSES.  THEN
; FABRICATE THE CHPCTL BLOCK ON THE STACK.  IF THIS IS THE NEW INTERFACE,
; SIMPLY PASS THE REGISTERS ON THROUGH.  IN EITHER CASE, THE CONTROL BLOCK
; MUST BE BUILT NOW.

	ASSUME	CHPCTL$C_LENGTH EQ 12

	CLRQ	-(SP)			;BUILD CONTROL BLOCK ON THE STACK
	CLRL	-(SP)
	MOVL	SP,R2			;SAVE THE ADDRESS FOR LATER
	CLRL	R3			;NO RETURN ARG BLOCK

	ASSUME	CHP$M_READ EQ CHPCTL$M_READ
	ASSUME	CHP$M_USEREADALL EQ CHPCTL$M_USEREADALL
	ASSUME	CHP$M_WRITE EQ CHPCTL$M_WRITE

	MOVL	28(SP),CHPCTL$L_ACCESS(R2)	;SET THE ACCESS DESIRED
	MOVL	#CHP$M_READ!CHP$M_USEREADALL,CHPCTL$L_FLAGS(R2)	;SET FOR READ
	BITB	#^C<ARM$M_READ!ARM$M_EXECUTE>,CHPCTL$L_ACCESS(R2)
	BEQL	20$			;XFER IF ONLY READING
	XORB	#CHP$M_WRITE!CHP$M_USEREADALL,CHPCTL$L_FLAGS(R2)	;ELSE SET WRITE
					;AND NO READALL

20$:	TSTL	R5			;ANY UCB GIVEN?
	BEQL	30$			;XFER IF NOT, REGISTERS ALL SET
	MOVL	PCB$L_ARB(R4),R0	;NOTE THE ARB ADDRESS
	MOVL	UCB$L_ORB(R5),R1	;  AND THE ORB ADDRESS
	BRB	40$			;GO DO THE PROTECTION CHECK

; NOW DO THE PROTECTION CHECK.

30$:	TSTL	R0			;WAS AN ARB GIVEN?
	BNEQ	40$			;XFER IF SO
	MOVL	CTL$GL_PCB,R4		;ELSE GET THE PROCESS DEFAULT
	MOVL	PCB$L_ARB(R4),R0	;  AGENT'S RIGHTS BLOCK
40$:	JSB	EXE$CHKPRO_INT		;DO THE PROTECTION CHECK

; FINALLY, RETURN WITH THE STATUS POSTED IN R0.

	ADDL2	#CHPCTL$C_LENGTH,SP	;CLEAN OFF THE TEMP CONTROL BLOCK
	POPR	#^M<R1,R2,R3,R4>	;RESTORE SAVED RESISTERS
	TSTL	(SP)+			;POP OFF ACCESS MASK
	RSB				;RETURN TO CALLER
	.DSABL	LSB

	.SBTTL	CLEANUP AN OBJECT RIGHTS BLOCK
;+
; EXE$CLEANUP_ORB - DELETE ALL STRUCTURES REFERENCED BY AN OBJECT RIGHTS BLOCK
;
; THIS ROUTINE IS CALLED TO DELETE ALL STRUCTURES REFERENCED BY AN OBJECT RIGHTS
; BLOCK.  THIS ROUTINE DOES NOT DELETE THE ORB ITSELF.  THE ASSUMPTION IS MADE
; THAT ALL STRUCTURES TO BE DELETED RESIDE IN PAGED-POOL.  BEFORE EACH STRUCTURE
; IS DEALLOCATED, ACCESS TO IS IS SYNCHRONIZED BY WHATEVER METHOD IS REQUIRED. 
; THE LIST OF ORB REFERENCED STRUCTURES WHICH THIS ROUTINE DISPOSES OF IS:
;
; 1. LIST OF ACLS ASSOCIATED WITH THIS OBJECT RIGHTS BLOCK.
;
; INPUTS:
;
;	R1 = ADDRESS OF OBJECT RIGHTS BLOCK.
;
; OUTPUTS:
;
;	R0-R3 ARE DESTROYED.
;	ALL OTHER REGISTERS ARE PRESERVED.
;	ALL STRUCTURES REFERENCED BY THE ORB ARE DEALLOCATED TO PAGED POOL.
;-
 
EXE$CLEANUP_ORB::			;DELETE ALL ORB REFERENCED STRUCTURES
	MOVQ	R4,-(SP)		;SAVE REGISTERS
	SAVIPL				;SAVE IPL ON ENTRY
	MOVL	R1,R5			;MOVE ORB ADDRESS INTO R5
	MOVL	CTL$GL_PCB,R4		;RETRIEVE PCB ADDRESS

;
; DELETE THE ACLS WHICH ARE ASSOCIATED WITH THIS OBJECT RIGHTS BLOCK.  ACCESS
; TO THE ACLS IS CONTROLLED BY A MUTEX RESIDING WITHIN THE ORB ITSELF.  THIS
; MUTEX IS LOCKED FOR WRITING BEFORE REFERENCING THE ACL LISTHEAD.  IF THE ACLS 
; ARE NOT IN A QUEUE FORMAT BUT ARE IN A DESCRIPTOR STYLE FORMAT, THEN THEIR 
; DELETION IS BYPASSED.
;

	BBC	#ORB$V_ACL_QUEUE,-	;SKIP ACL QUEUE DELETION IF THE ACLS
		ORB$B_FLAGS(R5),30$	;ARE IN A DESCRIPTOR STYLE FORMAT

	MOVAB	ORB$L_ACL_MUTEX(R5),R0	;RETRIEVE ADDRESS OF ACL MUTEX
	BSBW	SCH$LOCKW		;LOCK ACL MUTEX FOR WRITING

10$:	REMQUE	@ORB$L_ACLFL(R5),R0	;REMOVE NEXT ACL FROM QUEUE
	BVS	20$			;DONE IF QUEUE IS EMPTY
	MOVZWL	ACL$W_SIZE(R0),R1	;RETRIEVE SIZE OF ACL
	BSBW	EXE$DEAPGDSIZ		;DELETE THE ACL
	BRB	10$			;CONTINUE UNTIL ACL QUEUE IS EMPTY

20$:	MOVAB	ORB$L_ACL_MUTEX(R5),R0	;RETRIEVE ADDRESS OF ACL MUTEX
	BSBW	SCH$UNLOCK		;UNLOCK ACL MUTEX

;
; RESTORE THE ENVIRONMENT TO WHAT IT WAS ON ROUTINE ENTRY AND EXIT.
;

30$:	ENBINT				;RESTORE IPL
	MOVQ	(SP)+,R4		;RESTORE REGISTERS
	RSB				;RETURN

	.SBTTL	INSERT ENTRY IN TIME DEPENDENT SCHEDULER QUEUE
;+
; EXE$INSTIMQ - INSERT ENTRY IN TIME DEPENDENT SCHEDULER QUEUE
;
; THIS ROUTINE IS CALLED TO INSERT AN ENTRY IN THE TIME DEPENDENT SCHEDULER
; QUEUE. THE ENTRY IS THREADED INTO THE QUEUE ACCORDING TO ITS DUE TIME.
; THE QUEUE IS ORDERED SUCH THAT THE MOST IMMINENT ENTRIES ARE AT THE FRONT
; OF THE QUEUE.
;
; INPUTS:
;
;	R0 = LOW ORDER PART OF EXPIRATION TIME.
;	R1 = HIGH ORDER PART OF EXPIRATION TIME.
;	R5 = ADDRESS OF ENTRY TO INSERT IN TIME QUEUE.
;
;	IPL MUST BE IPL$_TIMER.
;
; OUTPUTS:
;
;	SPECIFIED ENTRY IS INSERTED INTO THE TIME DEPENDENT SCHEDULER QUEUE
;	ACCORDING TO ITS DUE TIME.
;-
 
	.PSECT
EXE$INSTIMQ::				;INSERT ENTRY IN TIME QUEUE
	MOVQ	R0,TQE$Q_TIME(R5)	;SET ABSOLUTE DUE TIME
	MOVAL	W^EXE$GL_TQFL,R3	;GET ADDRESS OF TIME QUEUE LISTHEAD
	MOVL	R3,R2			;COPY ADDRESS OF TIME QUEUE LISTHEAD
10$:	MOVL	TQE$L_TQBL(R2),R2	;GET ADDRESS OF NEXT ENTRY
	CMPL	R3,R2			;END OF QUEUE?
	BEQL	20$			;IF EQL YES
	CMPL	R1,TQE$Q_TIME+4(R2)	;COMPARE HIGH ORDER PARTS OF TIME
	BLSSU	10$			;IF LSSU NEW ENTRY MORE IMMINENT
	BGTRU	20$			;IF GTRU NEW ENTRY LESS IMMINENT
	CMPL	R0,TQE$Q_TIME(R2)	;COMPARE LOW ORDER PART OF TIME
	BLSSU	10$			;IF LSSU NEW ENTRY MORE IMMINENT
20$:	INSQUE	TQE$L_TQFL(R5),TQE$L_TQFL(R2) ;INSERT NEW ENTRY IN TIME QUEUE
	RSB				;

	.SBTTL	MAXIMIZE ACCESS MODE
;+
; EXE$MAXACMODE - MAXIMIZE ACCESS MODE
;
; THIS ROUTINE IS CALLED TO MAXIMIZE A SPECIFIED ACCESS MODE WITH THE PREVIOUS
; MODE FIELD OF THE CURRENT PSL.
;
; INPUTS:
;
;	R0 = ACCESS MODE TO MAXIMIZE WITH PREVIOUS MODE FIELD OF PSL.
;
; OUTPUTS:
;
;	THE SPECIFIED ACCESS MODE IS MAXIMIZED WITH THE PREVIOUS MODE FIELD
;	OF THE CURRENT PSL AND RETURNED IN REGISTER R0.
;
;	REGISTERS R2 AND R3 ARE PRESERVED ACROSS CALL.
;-
 
	.PSECT	Y$EXEPAGED
EXE$MAXACMODE::				;MAXIMIZE ACCESS MODE
	MOVPSL	R1			;READ CURRENT PSL
	CMPZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,R1,R0 ;COMPARE WITH PREVIOUS MODE
	BLEQ	10$			;IF LEQ SPECIFIED ACCESS MODE LESS PRIVILEGED
	EXTZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,R1,R0 ;EXTRACT PREVIOUS MODE FIELD
10$:	RSB				;

	.SBTTL	REMOVE ENTRY FROM TIME DEPENDENT SCHEDULER QUEUE
;+
; EXE$RMVTIMQ - REMOVE ENTRY FROM TIME DEPENDENT SCHEDULER QUEUE
;
; THIS ROUTINE IS CALLED TO REMOVE ONE OR MORE ENTRIES FROM THE TIME
; DEPENDENT SCHEDULER QUEUE. ENTRIES ARE REMOVED BY TYPE, ACCESS MODE,
; REQUEST IDENTIFICATION, AND PROCESS ID.
;
; INPUTS:
;
;	R2 = ACCESS MODE (ALL EQUAL AND HIGHER ACCESS MODES).
;	R3 = REQUEST IDENTIFICATION (ZERO IMPLIES ALL).
;	R4 = TYPE OF ENTRY TO REMOVE (ALL SINGLE AND REPEAT ENTRIES).
;	R5 = PROCESS ID OF PROCESS TO REMOVE ENTRIES FOR.
;
;	IPL MUST BE IPL$_TIMER OR ABOVE.
;
;	IF SYSTEM SUBROUTINE OR WAKE REQUESTS ARE BEING REMOVED, THEN ACCESS
;	MODE AND REQUEST IDENTIFICATION ARE NOT USED AND NEED NOT BE SUPPLIED
;	IN THE CALLING SEQUENCE.
;
; OUTPUTS:
;
;	ALL ENTRIES OF THE SPECIFIED TYPE ARE REMOVED FROM THE TIME 
;	DEPENDENT SCHEDULER QUEUE.
;-
 
	.PSECT
EXE$RMVTIMQ::				;REMOVE ENTRY FROM TIME QUEUE
10$:	MOVAL	W^EXE$GL_TQFL,R0	;GET ADDRESS OF TIMER QUEUE LISTHEAD
	MOVL	R0,R1			;COPY LISTHEAD ADDRESS
20$:	MOVL	TQE$L_TQFL(R1),R1	;GET ADDRESS OF NEXT ENTRY
	CMPL	R1,R0			;END OF QUEUE?
	BEQL	80$			;IF EQL YES
	CMPZV	#0,#2,TQE$B_RQTYPE(R1),R4 ;REQUEST TYPE MATCH?
	BNEQ	20$			;IF NEQ NO
	CMPL	R5,TQE$L_PID(R1) 	;PROCESS ID MATCH?
	BNEQ	20$			;IF NEQ NO
	CMPB	#TQE$C_TMSNGL,R4	;SYSTEM SUBROUTINE OR CANCEL WAKE?
	BNEQ	40$			;IF NEQ YES - SKIP ID-ACCESS TEST
	TSTL	R3			;ALL REQUEST ID'S MATCH?
	BEQL	30$			;IF EQL YES
	CMPL	R3,TQE$L_ASTPRM(R1)	;REQUEST IDENTIFICATION MATCH?
	BNEQ	20$			;IF NEQ NO
30$:	CMPZV	#0,#2,TQE$B_RMOD(R1),R2	;REQUEST MODE LESS THAN SPECIFIED MODE?
	BLSS	20$			;IF LSS YES
40$:	PUSHR	#^M<R2,R3>		;SAVE REGISTERS R2 AND R3
	PUSHL	TQE$L_TQBL(R1)		;SAVE BACKWARD LINK OF ENTRY
	PUSHL	R0			;SAVE REGISTER R0
	REMQUE	TQE$L_TQFL(R1),R0	;REMOVE ENTRY FROM QUEUE
	CMPB	#TQE$C_SSSNGL,R4	;CANCEL SYSTEM SUBROUTINE?
	BEQL	70$			;IF EQL YES
	MOVZWL	TQE$L_RQPID(R0),R1	;GET PROCESS INDEX
	MOVL	@W^SCH$GL_PCBVEC[R1],R1	;GET ADDRESS OF PROCESS PCB
	CMPL	TQE$L_RQPID(R0),PCB$L_PID(R1) ;PROCESS ID MATCH?
	BNEQ	60$			;IF NEQ NO
	CMPB	#TQE$C_WKSNGL,R4	;CANCEL WAKE UP REQUEST?
	BEQL	50$			;IF EQL YES
	MOVL	PCB$L_JIB(R1),R2	;GET JIB ADDRESS
	INCW	JIB$W_TQCNT(R2)		;UPDATE AVAILABLE TIME QUEUE ENTRIES
	BBC	#ACB$V_QUOTA,TQE$B_RMOD(R0),60$ ;IF CLR, NO AST SPECIFIED
50$:	INCW	PCB$W_ASTCNT(R1)	;UPDATE AVAILABLE AST QUEUE ENTRIES
60$:	BSBW	EXE$DEANONPAGED		;DEALLOCATE TIME QUEUE ENTRY
70$:	POPR	#^M<R0,R1,R2,R3>	;RESTORE REGISTERS R0, R1, R2, AND R3
	BRB	20$			;
80$:	RSB				;
 
	.PAGE
	.SBTTL	EXE$PROBER - Check read accessibility of user buffer

;++	
;		
; FUNCTIONAL DESCRIPTION:
;	
;	This routine performs a series of PROBEs to check the read 
;	accessibility of the user-supplied buffer. Multiple PROBEs
;	must be done because the PROBE instruction only checks the
;	first and last pages while the user buffer may span several pages.
;
; CALLING SEQUENCE:	
;
;	JSB/BSB	EXE$PROBER
;
; INPUTS:
;
;	R0	Buffer address to be probed
;	R1	Buffer length
;	R3	Access mode to maximize with PSL<PRVMOD>
;
; SIDE EFFECTS:
;
;	R0 through R2 are destroyed
;
; ROUTINE VALUE:
;
;	R0 low bit set => successful return (SS$_NORMAL)
;	R0 low bit clear => portion of buffer is inaccessible (SS$_ACCVIO)
;
;--

	.PSECT	AEXENONPAGED

EXE$PROBER::
	ADDL	R0,R1			; Ending address of buffer
	BICW	#VA$M_BYTE,R0		; Truncate to start of page
	SUBL	R0,R1			; Calculate length of buffer to probe
	CVTWL	#-^X200,R2		; Set address adjustment constant
10$:	CVTLW	R1,R1			; Greater than 32K?
	BVS	30$			; If VS, yes; check by chunks
20$:
	IFNORD	R1,(R0),ACCVIO,R3	; Can ends of user's buffer be read?
	SUBL	R2,R0			; Calculate VA of next page
	MOVAW	(R1)[R2],R1		; Calculate new length
	BGTR	20$			; If GTR then more to test
	MOVZWL	#SS$_NORMAL,R0		; Indicate success
	RSB				;  and return

30$:	
	MOVQ	R0,-(SP)		; Save current values on stack
	MOVZWL	#^X7E00,R1		; Size of chunk used stepping thru buf.
					;  (32K - 1 page)
	ADDL	R1,(SP)			; Advance address by this amount
	SUBL	R1,4(SP)		; Decrease count
	BSBB	20$			; Probe chunk
	BLBC	R0,ACCVIO1		; If LBC, no access
	MOVQ	(SP)+,R0		; Pop pre-adjusted values off stack
	BRB	10$			; See if length now LT 32K.

ACCVIO1:
	ADDL	#8,SP			; Clean off stack
	RSB
ACCVIO:
	MOVZWL	S^#SS$_ACCVIO,R0	; Indicate access violation
	RSB	

	.PAGE
	.SBTTL	EXE$PROBEW - Check write accessibility of user buffer

;++	
;		
; FUNCTIONAL DESCRIPTION:
;	
;	This routine performs a series of PROBEs to check the write 
;	accessibility of the user-supplied buffer. Multiple PROBEs
;	must be done because the PROBE instruction only checks the
;	first and last pages while the user buffer may span several pages.
;
; CALLING SEQUENCE:	
;
;	JSB/BSB	EXE$PROBEW
;
; INPUTS:
;
;	R0	Buffer address to be probed
;	R1	Buffer length
;	R3	Access mode to maximize with PSL<PRVMOD>
;
; SIDE EFFECTS:
;
;	R0 through R2 are destroyed
;
; ROUTINE VALUE:
;
;	R0 low bit set => successful return (SS$_NORMAL)
;	R0 low bit clear => portion of buffer is inaccessible (SS$_ACCVIO)
;
;--

	.PSECT	AEXENONPAGED

EXE$PROBEW::
	ADDL	R0,R1			; Ending address of buffer
	BICW	#VA$M_BYTE,R0		; Truncate to start of page
	SUBL	R0,R1			; Calculate length of buffer to probe
	CVTWL	#-^X200,R2		; Set address adjustment constant
10$:	CVTLW	R1,R1			; Greater than 32K?
	BVS	30$			; If VS, yes; check by chunks

20$:
	IFNOWRT	R1,(R0),ACCVIO,R3	; Can ends of user's buffer be written?
	SUBL	R2,R0			; Calculate VA of next page
	MOVAW	(R1)[R2],R1		; Calculate new length
	BGTR	20$			; If GTR then more to test
	MOVZWL	#SS$_NORMAL,R0		; Indicate success
	RSB				;  and return

30$:	
	MOVQ	R0,-(SP)		; Save current values on stack
	MOVZWL	#^X7E00,R1		; Size of chunk used stepping thru buf.
					;  (32K - 1 page)
	ADDL	R1,(SP)			; Advance address by this amount
	SUBL	R1,4(SP)		; Decrease count
	BSBB	20$			; Probe chunk
	BLBC	R0,ACCVIO1		; If LBC, no access
	MOVQ	(SP)+,R0		; Pop pre-adjusted values off stack
	BRB	10$			; See if length now LT 32K.

	.PAGE
	.SBTTL	EXE$PROBER_DSC, EXE$PROBEW_DSC - Check buffer accessibility

;++	
;		
; FUNCTIONAL DESCRIPTION:
;	
;	Given the address of a buffer descriptor, this routine checks
;	the accessibility of the buffer descriptor and the specified
;	accessibility of the buffer.
;
;	***** NOTE WELL *****
;
;	If the buffer is accessible as desired, the buffer descriptor
;	information is returned in R1 and R2 including the high 16 bits
;	of the first long word.  The caller MUST NOT fetch the
;	descriptor again as that would open a protection hole.  Rather,
;	he/she should store R1,R2 for later use in local storage.
;	storage.
;
; CALLING SEQUENCE:	
;
;	JSB/BSB	EXE$PROBER_DSC
;	JSB/BSB	EXE$PROBEW_DSC
;
; INPUTS:
;
;	R1	Address of a buffer descriptor
;
; SIDE EFFECTS:
;
;	R3 is destroyed
;
; ROUTINE VALUE:
;
;	R0 low bit set => successful return (SS$_NORMAL)
;		R1<0:15>  = size of buffer in bytes
;		R1<16:31> = contents of the high word of the descriptor
;		R2 = Buffer address
;	R0 low bit clear => portion of buffer is inaccessible (SS$_ACCVIO)
;		R1 and R2 destroyed
;
;--
	.PSECT	Y$EXEPAGED		; This code can page
	.ENABL	LSB

EXE$PROBER_DSC::
	CLRL	R3			; Flag to indicate read probe
	BRB	10$
EXE$PROBEW_DSC::
	MOVL	#1,R3			; Flag to indicate write probe
10$:	IFNORD	#8,(R1),NOACCESS	; Error if can't read descriptor
	MOVL	#SS$_NORMAL,R0		; Assume buffer is accessible
	MOVQ	(R1),R1			; R1<0:15> = size of buf, R2 = adr
					; R1<16:31> = undefined, 
					; but must be returned to caller.
	CMPW	R1,#512			; Will one probe cover the buffer?
	BGTRU	50$			; Branch if not, need a probe loop
	BLBS	R3,30$			; Branch if checking for write access
	PROBER	#0,R1,(R2)		; See if buffer can be read by caller
	BNEQ	80$			; Branch if buffer can be read
					; otherwise, flow through the PROBEW
					; and return SS$_ACCVIO
30$:	PROBEW	#0,R1,(R2)		; See if buffer can be written by caller
	BNEQ	80$			; Branch if write access is allowed
	BRB	NOACCESS		; Buffer cannot be accessed
;
; Need to use a PROBE loop to check this buffer for the desired access.
;
50$:	PUSHR	#^M<R1,R2>		; Save contents of buffer descriptor
					; Caller must not refetch these
	PUSHAB	W^EXE$PROBER		; Assume checking for read access
	BBCC	#0,R3,60$		; Br if checking read access
					; and set R3 = 0
	MOVAB	W^EXE$PROBEW,(SP)	; Check for write access
60$:	MOVL	R2,R0			; Buffer address
	MOVZWL	R1,R1			; Size of buffer in bytes
	JSB	@(SP)+			; Call PROBER/W
	POPR	#^M<R1,R2>		; Recover contents of buf descriptor
80$:	RSB				; Return with R0 = status
NOACCESS:
	MOVZWL	S^#SS$_ACCVIO,R0
	RSB

	.DSABL	LSB

	.SBTTL	EXE$VAL_IDNAME - Validate ID name
;++	
;
; EXE$VAL_IDNAME - Validate ID name
;		
; FUNCTIONAL DESCRIPTION:
;	
;	This routine checks the accessibility of the ID name descriptor
;	and the name buffer. It then validates the ID name. Identifier
;	names are 1 to 32 characters in length, consist of alpha, numeric,
;	$, or _ characters, and must contain at least one non-numeric
;	character. 
;
;	***** NOTE WELL *****
;
;	If the buffer is accessible as desired, the buffer descriptor
;	information is returned in R1 and R2. The caller MUST NOT fetch
;	the descriptor again as that would open a protection hole.  Rather,
;	he/she should store R1,R2 for later use in local storage.
;
; CALLING SEQUENCE:	
;
;	JSB/BSB	EXE$VAL_IDNAME
;
; INPUTS:
;
;	R1	Address of an ID name buffer descriptor
;
; SIDE EFFECTS:
;
;	R3 	destroyed
;
; ROUTINE VALUE:
;
;	R0 low bit set => successful return (SS$_NORMAL)
;		R1 = size of buffer in bytes
;		R2 = Buffer address
;	R0 low bit clear => portion of buffer is inaccessible or an
;		invalid name was specified. R1 and R2 destroyed
;
;--
	.PSECT	Y$EXEPAGED
EXE$VAL_IDNAME::
	BSBW	EXE$PROBER_DSC		; Check ID name buffer accessibility
	BLBC	R0,3$			; Br if no access
	BICL	#^XFFFF0000,R1		; R1 = Id name size
	PUSHR	#^M<R1,R2>		; Save size and address
	CMPL	R1,#KGB$S_NAME		; Invalid name size?
	BGTRU	1$			; Br if yes
	SPANC	R1,(R2),SCAN_TABLE,#MASK_M_NUMBER ; Span the numeric characters
	BEQLU	1$			; Z bit set means id name has numerics
					; only. (The entire string was scanned)
	SPANC	R0,(R1),(R3),#MASK_M_ID_NAME ; Span valid characters
	BNEQU	1$			; Br if we found an invalid character
	MOVL	#SS$_NORMAL,R0		; Return success
	BRB	2$
1$:	MOVL	#SS$_IVIDENT,R0		; Return error
2$:	POPR	#^M<R1,R2>		; Restore size and address
3$:	RSB

	.END
