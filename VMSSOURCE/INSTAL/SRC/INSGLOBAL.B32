MODULE INSGLOBAL (				! List Global Sections
			IDENT = 'V04-000',
			ADDRESSING_MODE(EXTERNAL = GENERAL)
		 ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  Install
!
! ABSTRACT:
!
!	This module controls listing.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system.
!
! AUTHOR:  Bob Grosso, September 1981
!
! Modified by:
!
!	V03-007	MSH0035		Michael S. Harvey	20-Apr-1984
!		Correctly scan shared memory GSD cache so that all
!		shared memories are included in the /GLOBAL display.
!		Also, print out the global section summary for each
!		shared memory instead of only the last shared memory
!		displayed. Also, print out only the relevant shared
!		memory global sections when a specific known file was
!		specified. Also, prevent global section summary message
!		from wrapping around the screen.
!
!	V03-006	MSH0020		Michael S. Harvey	8-Mar-1984
!		Use correct length when extracting shared memory name
!		from the common data page.
!
!	V03-005	MSH0019		Michael S. Harvey	8-Mar-1984
!		Access KFE from EXEC mode instead of USER mode to
!		avoid an ACCVIO.
!
!	V03-004	MSH0004		Michael S. Harvey	26-Jan-1984
!		Add support for lengthened global section names in GSDs.
!
!	V03-003	BLS0256		Benn Schreiber		27-Dec-1983
!		Cleanup.  Allocate buffers once in main routine.
!
!	V03-002	RPG0002		Bob Grosso		21-Aug-1983
!		Restrict header printing in no sections to report.
!
!	V03-001	RPG0001		Bob Grosso		July 20, 1983
!		Print global sections by KFE if requested.
!		Extensive cleaning up of code.
!
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:LIB.L32';		! VAX/VMS system definitions

REQUIRE
	'SRC$:INSPREFIX.REQ';
REQUIRE
	'LIB$:INSDEF.R32';


%SBTTL  'Declarations';
!
! Table of contents
!

LINKAGE
    CALL_S_4 = CALL (STANDARD, REGISTER=4),	! for calling copy routines which execute in kernel mode
    JSB_0_4 = JSB (REGISTER=0, REGISTER=4) :	! For mutex handling routines
		NOPRESERVE (1,2,3);

LINKAGE
    JSB_4_5_G6_10 = JSB (REGISTER = 4, REGISTER = 5, REGISTER = 10) : 
			GLOBAL (GSD_PTR = 6) NOPRESERVE (2,3);

!
! External routines
!

EXTERNAL ROUTINE
    LIB$GET_VM,				! Allocate buffer in virtual memory
    LIB$FREE_VM,			! Deallocate buffer in virtual memory
    LIB$PUT_OUTPUT,			! Print contents of formatted buffer
    MMG$GETNXTGSD : JSB_4_5_G6_10,	! get address of next used GSD in memory
    MMG$VALIDATEGSD : JSB_4_5_G6_10,	! Check if GSD is in use
    SCH$LOCKR	: JSB_0_4,		! Lock a Mutex for read access
    SCH$UNLOCK	: JSB_0_4,		! Unlock a Mutex
    SYS$FAOL : ADDRESSING_MODE (GENERAL); ! Format ASCII output

EXTERNAL
    EXE$GL_GSDDELFL,			! delete pending list
    EXE$GL_GSDGRPFL,			! group list
    EXE$GL_GSDSYSFL,			! system list
    EXE$GL_SHBLIST,			! SHB listhead
    EXE$GL_GSDMTX,			! Global Section Descriptor Mutex
    INS$FAOOUTBUF,			! address of output buffer
    INS$FAOBUFDESC : BBLOCK [DSC$C_S_BLN],
    INS$G_OUTRAB : BBLOCK,		! Output record access block
    MMG$GL_SYSPHD,			! address of system process header
    SGN$GL_MAXGPGCT;			! Maximum global page count

FORWARD ROUTINE
    COPY_LISTS,				! Kernel mode routine dispatcher 
    COPY_GSD_LISTS : CALL_S_4,  	! Copy Global Section Descriptors to user buffer
    LIST_GSDS,				! list Global Section Descriptors
    COPY_SHM_LISTS : CALL_S_4,		! Copy shared memory lists to user buffer
    LIST_SHMS,				! list shared memory lists
    DECODE_FLAGS,			! Decode flags and buffer their ASCII symbols
    EXEC_MODE_NAME_CHK,			! KFE and GSD name comparison routine
    INS$FAOL,				! Format ASCII output line
    INS$OUTPUT_FAOBUF,			! Print contents of formatted buffer
    INS$FAO_AND_OUT;			! Format and output ascii line

OWN
    KFE,				! KFE address of shared file for which
					!  global sections are to be listed
    INS$A_BUFFER : VECTOR [2,LONG],	! User buffer for copying GSD's to while in kernel mode
					! so the information can be formatted later while in user mode
    INS$L_BUFSIZ,			! Last size tried for buffer.
    GSD$W_SIZE2 : WORD INITIAL ($BYTEOFFSET(GSD$W_SIZE) + 2),
    MODEADDR : BYTE INITIAL (0);

EXTERNAL LITERAL
    INS$C_FAOBUFLEN;			! Size of the output print buffer

LITERAL
    INS$C_BUFSIZ = 8,			! size for first attempt to buffer kfi list
    INS$C_CTLFLGSTR = 6,		! Number of entries in flags string array
    INS$C_NUMGSDLSTS = 4;		! Four lists; system, group, delete pending and multiported memory

BUILTIN
    PROBEW;				! Check that buffer is writeable so we don't take an access violation in kernel mode

BIND
    !
    !	FAO control strings to format the data
    !
    FAO_SYSTEM		= $DESCRIPTOR ('    '),
    FAO_GROUP		= $DESCRIPTOR ('=!OB'),
    FAO_PAGCNT		= $DESCRIPTOR (' Pagcnt/Refcnt=!UL/!UL'),
    FAO_PAGPFN		= $DESCRIPTOR (' Pagcnt/Basepfn=!UL/!XL'),
    FAO_SUMMARY		= $DESCRIPTOR ('!/    !UL Global Section!%S Used,  !UL/!UL Global Pages Used/Unused'),
    FAO_SYSTITLE	= $DESCRIPTOR (' !/!_System Global Sections!/'),
    FAO_GRPTITLE	= $DESCRIPTOR (' !/!_Group Global Sections!/'),
    FAO_DELTITLE	= $DESCRIPTOR (' !/!_Delete Pending Global Sections!/');



%SBTTL  'INS$GLOBAL';

GLOBAL ROUTINE INS$GLOBAL ( GLOBAL_KFE ) =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!
!	Process the qualifier /GLOBAL by printing the system, group, delete
!	pending and multiport memory global section lists.  Enter kernel mode
!	to access the lists, copying them to a user buffer, which can then be
!	formatted for output.  Print the output to sys$output.
!
!  INPUT:
!
!	none
!
!  IMPLICITS INPUT:
!
!	An output channel to sys$output has been opened and ins$g_outrab
!	locates the record access block.
!
!  OUTPUT:
!
!	The formatted global section lists to sys$output.
!
!  ROUTINE VALUE:
!
!	Success or a service error.
!---
BUILTIN
    NULLPARAMETER;			! Check if parameter was included 

LOCAL
    STATUS;

IF NOT NULLPARAMETER (1) 
THEN KFE = .GLOBAL_KFE
ELSE KFE = 0;

STATUS = COPY_LISTS (COPY_GSD_LISTS);	! Copy the system, group and delete pending global section lists from system
					! space to the user buffer.
IF NOT .STATUS THEN RETURN .STATUS;

!
!   Initialize the buffer and its descriptor
!
CH$FILL (%C' ',INS$C_FAOBUFLEN, .INS$FAOOUTBUF);
INS$FAOBUFDESC [DSC$W_LENGTH] = INS$C_FAOBUFLEN;
INS$FAOBUFDESC [DSC$A_POINTER] = .INS$FAOOUTBUF;
INS$G_OUTRAB [RAB$L_RBF] = .INS$FAOOUTBUF;


STATUS = LIST_GSDS (.INS$A_BUFFER);	! Format the info in the user buffer and print it out.
IF NOT .STATUS 
THEN 
    RETURN .STATUS;



!
!	Print Shared Memory Sections
!
STATUS = COPY_LISTS (COPY_SHM_LISTS);	! Copy the multiport memory global section lists to user buffer.
IF NOT .STATUS 
THEN 
    RETURN .STATUS;

!
!   Initialize the buffer and its descriptor
!
CH$FILL (%C' ',INS$C_FAOBUFLEN, .INS$FAOOUTBUF);
INS$FAOBUFDESC [DSC$W_LENGTH] = INS$C_FAOBUFLEN;
INS$FAOBUFDESC [DSC$A_POINTER] = .INS$FAOOUTBUF;
INS$G_OUTRAB [RAB$L_RBF] = .INS$FAOOUTBUF;

STATUS = LIST_SHMS (.INS$A_BUFFER);	! Format the info in the user buffer and print it out.

RETURN .STATUS;
END;	! routine  INS$GLOBAL


%SBTTL  'copy_lists';

ROUTINE COPY_LISTS ( COPY__ROUTINE ) =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!	Set up the arguement list for the call to change mode dispatcher.
!
!  INPUT:
!	copy__routine =	Name of routine which will execute in kernel mode.
!
!---
BIND ROUTINE
    COPY_ROUTINE = .COPY__ROUTINE : call_s_4;

LOCAL
    CMK_ARGLST : VECTOR [2,LONG],
    CMK_STATUS;						! status from $CMKRNL call

!
!   copy the GSD data base to user buffer so that it need not be processed in kernal mode
!
CMK_ARGLST [0] = 1;
INS$L_BUFSIZ = INS$C_BUFSIZ;					! BUFFER SIZE FOR FIRST COPY ATTEMPT
REPORT ( $EXPREG ( PAGCNT = INS$C_BUFSIZ, RETADR = INS$A_BUFFER));
CMK_ARGLST [1] = .INS$A_BUFFER;

WHILE (CMK_STATUS = 
	$CMKRNL (ROUTIN = COPY_ROUTINE, ARGLST = CMK_ARGLST)
      )	EQL SS$_ACCVIO DO					! If buffer too small
    BEGIN							! double the size of the buffer and try again
    REPORT ($DELTVA ( INADR = INS$A_BUFFER ) );	! return the buffer
    INS$L_BUFSIZ = 2 * .INS$L_BUFSIZ;				! double the allocation size
    REPORT ($EXPREG ( PAGCNT = .INS$L_BUFSIZ, RETADR = INS$A_BUFFER));
    CMK_ARGLST [1] = .INS$A_BUFFER;
    END;

IF NOT .CMK_STATUS THEN RETURN .CMK_STATUS;
RETURN TRUE;
END;	! routine  copy_lists


%SBTTL  'copy_gsd_lists';

ROUTINE COPY_GSD_LISTS (BUF, PCB_ADR) : CALL_S_4 =
!+++
!
!  FUNCTIONAL DESCRIPTION:
!	Execute in Kernal mode to copy GSD data base to user buffer.
!
!  INPUT:
!	buf	= address of user buffer to copy GSD data to
!	pcb_adr	= address of process control block, courtesy of the change mode
!		  dispatcher
!
!  ROUTINE VALUE:
!	ss$_accvio :	user buffer was too small
!	success	:	lists were copied to buffer
!--
BEGIN

LABEL 
    LOCKED;		! Exit block with error status so mutex can be unlocked

!
!   Table of pointers to the GSD lists
!
OWN
    GSD_LISTS :	VECTOR [INS$C_NUMGSDLSTS] INITIAL (
		EXE$GL_GSDSYSFL,
		EXE$GL_GSDGRPFL,
		EXE$GL_GSDDELFL,
		0);

LOCAL
    GBLSEC_TAB : REF VECTOR [,LONG],		! global section table
    PROBE_LEN : WORD,				! length for PROBEW
    STATUS;

MAP 
    MMG$GL_SYSPHD : REF BBLOCK;			! System process header

SCH$LOCKR (EXE$GL_GSDMTX, .PCB_ADR);		! Lock the mutex

LOCKED:
BEGIN				! block LOCKED: permits unlocking of mutex on error exit
STATUS = SS$_NORMAL;		! preset success status

GBLSEC_TAB = .MMG$GL_SYSPHD  + .MMG$GL_SYSPHD [PHD$L_PSTBASOFF];  ! Base address of global section table

INCR I FROM 0 TO INS$C_NUMGSDLSTS-2 BY 1 DO	! For each global section list
    BEGIN
    LOCAL
	GSD_ENTRY : REF BBLOCK,			! Global section descriptor entry
	GSD_LSTHEAD;				! GSD listhead

    GSD_LSTHEAD = .GSD_LISTS [.I];

    IF PROBEW ( MODEADDR, GSD$W_SIZE2, .BUF)	! room in the buffer for list marker?
    THEN
	BUF = CH$FILL( -1, .GSD$W_SIZE2, .BUF)	! Mark beginning of new list
    ELSE
	LEAVE LOCKED WITH (STATUS = SS$_ACCVIO);

    GSD_ENTRY = ..GSD_LSTHEAD;			! first entry in list
    WHILE .GSD_ENTRY NEQ .GSD_LSTHEAD DO	! follow list until back to listhead
	BEGIN
	IF .GSD_ENTRY [GSD$B_TYPE] eql DYN$C_EXTGSD 	! Is this an extended GSD?
	THEN
	    BEGIN
	    !
	    !	Extended GSD
	    !
	    PROBE_LEN = .GSD_ENTRY [GSD$W_SIZE] + 4;		! size of GSD and longword for section table index value
	    IF PROBEW ( MODEADDR, PROBE_LEN, .BUF)
	    THEN
		BUF = CH$COPY (.GSD_ENTRY [GSD$W_SIZE], .GSD_ENTRY, 0, ! copy the entry and fill last longword with 0's
				.PROBE_LEN, .BUF)
	    ELSE
		LEAVE LOCKED WITH (STATUS = SS$_ACCVIO);
	    END				! extended GSD
	ELSE
	    !
	    !   Not an extended GSD
	    !
	    BEGIN
	    LOCAL
		GST_ENTRY_ADR,
		GST_INDEX;

	    PROBE_LEN = .GSD_ENTRY [GSD$W_SIZE] + 4 + SEC$C_LENGTH;	! Check if there is room for GSD, global section table entry
	    IF NOT PROBEW ( MODEADDR, PROBE_LEN, .BUF)		!   address, and global section table entry
	    THEN LEAVE LOCKED WITH (STATUS = SS$_ACCVIO);
	    BUF = CH$MOVE (.GSD_ENTRY [GSD$W_SIZE], .GSD_ENTRY, .BUF);

	    !
	    !   Get Global Section Table Index
	    ! 	WORD must be sign extended
	    !
	    GST_INDEX = .(GSD_ENTRY [GSD$W_GSTX])<0,16,1>; 

	    GST_ENTRY_ADR = GBLSEC_TAB [.GST_INDEX];		! address of global section table entry
	    .BUF = .GST_ENTRY_ADR;				! buffer address of GST entry
	    BUF = .BUF + 4;					! skip over storage of GST entry address

	    BUF = CH$MOVE (SEC$C_LENGTH, .GST_ENTRY_ADR, .BUF);	! copy the GST entry
	    END;	! non extended GSD
	GSD_ENTRY = ..GSD_ENTRY;
	END;		! WHILE traversing list
    END;		! INCRementing through list heads

    !
    !	Check if there is room in the buffer to pad the end with zeros
    !	to mark end of lists.
    !
    IF PROBEW ( MODEADDR, GSD$W_SIZE2, .BUF)
    THEN
	BUF = CH$FILL( 0, .GSD$W_SIZE2, .BUF)
    ELSE
	LEAVE LOCKED WITH (STATUS = SS$_ACCVIO);

END;	! block LOCKED:

SCH$UNLOCK (EXE$GL_GSDMTX, .PCB_ADR);	! Unlock the mutex

RETURN .STATUS;
END;	! routine copy_gsd_lists


%SBTTL 'list_gsds';

ROUTINE LIST_GSDS (GSD_BUFFER) =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!	format the Global section information in the user buffer and
!	print it to sys$output.
!
!  INPUT:
!	gsd_buffer =	address of user buffer which contains GSD info.
!
!  OUTPUT:
!	Format and put to sys$output the system, group and delete pending
!	global section lists.
!
!---

OWN
    !
    !	Table of control strings to print the list name
    !
    TITLE_DESCS :	VECTOR [3] INITIAL (
		FAO_SYSTITLE,
		FAO_GRPTITLE,
		FAO_DELTITLE);

LOCAL
    BUFFER : REF BBLOCK,
    GPT_ENTRIES,	! Number of GPT entries used in a list
    GPT_UNUSED,		! Number of GPT entries unused in a list
    MATCHES,		! boolean
    PRINT_TITLE,	! boolean to record if title should be printed
    SECTIONS,		! Count of global sections
    STATUS,
    TITLE;		! Index of which title to use


BUFFER = .GSD_BUFFER;

!
!    Initialize counters
!
SECTIONS = 0;
GPT_ENTRIES = 0;
TITLE = -1;

!
!   Zeros in the size field signal the end of the buffered data.
!   Minus ones signal the start of a new list.
!
UNTIL .BUFFER [GSD$W_SIZE] EQL 0 DO
    BEGIN

    BUFFER = .BUFFER + $BYTEOFFSET (GSD$W_SIZE) + 2;	! Skip over minus ones
    !
    !	Setup to output appropriate title
    !
    PRINT_TITLE = TRUE;
    TITLE = .TITLE + 1;					! Increment title to index next title descriptor

    MATCHES = FALSE;

    WHILE .(BUFFER [GSD$W_SIZE])<0,16,1> GTR 0 DO	! For each entry in this list
	BEGIN
	LOCAL
	    GSTE_ADR : REF BBLOCK,			! address in buffer of Global section table entry
	    PAGES;
	MAP
	    KFE : REF $BBLOCK;

	IF .KFE EQL 0					! If printing all
	THEN MATCHES = TRUE
	ELSE
	    BEGIN
	    LOCAL
		CME_ARGLIST : VECTOR [3,LONG];

	    CME_ARGLIST [0] = 2;
	    CME_ARGLIST [1] = .KFE;			! Pass KFE address
	    CME_ARGLIST [2] = .BUFFER;			! Pass GSD address

	    MATCHES = $CMEXEC (ROUTIN=EXEC_MODE_NAME_CHK, ARGLST=CME_ARGLIST);
	    END;

	IF .MATCHES					! If this is one to print
	THEN
	    BEGIN
	    IF .PRINT_TITLE				! Title hasn't already been printed
	    THEN
		BEGIN
		BIND
	    	    TITLE_DESC = TITLE_DESCS [.TITLE];

		INS$FAO_AND_OUT ( .TITLE_DESC);	! Load title into output buffer
		PRINT_TITLE = FALSE;
		END;

	    SECTIONS = .SECTIONS + 1;			! Count the global sections

	    DECODE_FLAGS (.BUFFER);			! Format the ASCII symbols for the flags

	    INS$FAOL (					! print either SYS or GRP
		( IF (.BUFFER [GSD$W_FLAGS] AND SEC$M_SYSGBL) NEQ 0
			THEN FAO_SYSTEM	
			ELSE FAO_GROUP )
		, .BUFFER [GSD$W_PCBGRP]);

	    END;	
	IF .BUFFER [GSD$B_TYPE] EQL DYN$C_EXTGSD	! Extended GSD?
	THEN
	    BEGIN	! Extended GSD
	    PAGES = .BUFFER [GSD$L_PAGES];		! Pages in section
	    GPT_ENTRIES = .GPT_ENTRIES + ((.PAGES + 3) AND NOT 1); 	! Count 2 zero GPT entries and round up to an
									!  even number of longwords.
	    IF .MATCHES					! If this is one to print
	    THEN
	        INS$FAO_AND_OUT( FAO_PAGPFN, .PAGES, .BUFFER [GSD$L_BASEPFN]);

	    BUFFER = .BUFFER [GSD$W_SIZE] + .BUFFER + 4;	! skip 4 bytes for the empty Section Table entry address
	    END
	ELSE
	    BEGIN	! non-extended
	    GSTE_ADR = .BUFFER [GSD$W_SIZE] + .BUFFER + 4;
	    PAGES = .GSTE_ADR [SEC$L_PAGCNT];
	    GPT_ENTRIES = .GPT_ENTRIES + ((.PAGES + 3) AND NOT 1);	! Count 2 zero GPT entries and round up to an
	 								!  even number of longwords.
	    IF .MATCHES					! If this is one to print
	    THEN
	        INS$FAO_AND_OUT( FAO_PAGCNT, .PAGES, .GSTE_ADR [SEC$L_REFCNT]);
	    BUFFER = .BUFFER [GSD$W_SIZE] + .BUFFER + 4 + SEC$C_LENGTH;
	    END;

	MATCHES = FALSE;
	END;		! While entries in this list

    END;

!
!   Print the summary lines
!
IF .KFE EQL 0
THEN
    BEGIN
    GPT_UNUSED = .SGN$GL_MAXGPGCT - .GPT_ENTRIES;			! Number of unused = max available - count of those used
    INS$FAO_AND_OUT( FAO_SUMMARY, .SECTIONS, .GPT_ENTRIES, .GPT_UNUSED);
    END
ELSE
    INS$OUTPUT_FAOBUF ();

RETURN TRUE;
END;		! routine  list_gsds


%SBTTL	'exec_mode_name_chk';

ROUTINE EXEC_MODE_NAME_CHK (KFE, BUFFER) =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!	Execute in Executive mode to compare the name string in the
!	supplied KFE to the global section name string in the
!	supplied GSD.
!
!  INPUT:
!	KFE = Address of KFE
!	BUFFER = Address of GSD
!
!  OUTPUT:
!	Routine value = TRUE if the KFE file name matches the global section name - the suffix
!		      = FALSE if otherwise
!
!---
MAP
    KFE : REF $BBLOCK,
    BUFFER : REF BBLOCK;

LOCAL
    MATCHES;

MATCHES = FALSE;				! Assume that the names are different

IF .BUFFER [GSD$B_TYPE] NEQ DYN$C_EXTGSD
THEN
    !
    ! Compare the KFE's name string with the global section name less the installed suffix
    !
    (IF CH$COMPARE ( .KFE [KFE$B_FILNAMLEN], KFE [KFE$T_FILNAM],
      .(BUFFER [GSD$T_GSDNAM]) <0,8,0> - 4, BUFFER [GSD$T_GSDNAM] + 1) EQL 0
    THEN
        MATCHES = TRUE);

RETURN .MATCHES;
END;		! routine exec_mode_name_chk

%SBTTL  'copy_shm_lists';

ROUTINE COPY_SHM_LISTS (BUF, PCB_ADR) : CALL_S_4 =
!+++
!
!  FUNCTIONAL DESCRIPTION:
!	Execute in Kernal mode to copy SHM data base to user buffer.
!
!  INPUT:
!	buf	= address of user buffer to copy GSD data to
!	pcb_adr	= address of process control block, courtesy of the change mode
!		  dispatcher
!
!  ROUTINE VALUE:
!	ss$_accvio :	user buffer was too small
!	success	:	lists were copied to buffer
!--
BEGIN

GLOBAL REGISTER
    GSD_PTR = 6 : REF BBLOCK;

LOCAL
    COM_DATA_PAGE : REF BBLOCK,		! store commom data page address
    NAME,
    PROBE_LEN : WORD,			! length for PROBEW
    SHM_CTLBLK : REF BBLOCK,		! shared memory control block
    STATUS;

SHM_CTLBLK = EXE$GL_SHBLIST;

!
!   Loop thru all the shared memories
!
WHILE ((SHM_CTLBLK = ..SHM_CTLBLK) NEQ 0) DO
    BEGIN

    !
    !	Check if enough room in buffer and mark start of new list by
    !	filling size field with minus ones.
    !
    IF PROBEW ( MODEADDR, GSD$W_SIZE2, .BUF)
    THEN
	BUF = CH$FILL (-1, .GSD$W_SIZE2, .BUF)
    ELSE
	RETURN SS$_ACCVIO;

    !
    !    If this shared memory is not connected, then skip it
    !
    IF (SHB$M_CONNECT AND .SHM_CTLBLK [SHB$B_FLAGS]) NEQ 0
    THEN
	BEGIN		! shared memory is connected

	!
	!    Check if there is room in the buffer for
	!	longword for port number
	!	longword for number of global pages
	!	longword for maximum number of GSD's in this list
	!	16 bytes for the ASCIC name of the shared memory
	!    and move them in.
	!
	PROBE_LEN = 4 + 4 + 4 + 16;
	IF NOT PROBEW ( MODEADDR, PROBE_LEN, .BUF)
	THEN RETURN SS$_ACCVIO;

	.BUF = .SHM_CTLBLK [SHB$B_PORT];
	BUF = .BUF + 4;

	COM_DATA_PAGE = .SHM_CTLBLK [SHB$L_DATAPAGE];

	.BUF = .COM_DATA_PAGE [SHD$L_GSPAGCNT];
	BUF = .BUF + 4;

	.BUF = .COM_DATA_PAGE [SHD$W_GSDMAX];
	BUF = .BUF + 4;

	NAME = .COM_DATA_PAGE + $BYTEOFFSET (SHD$T_NAME);
	BUF = CH$MOVE (16, .NAME, .BUF);

	!
	!   Get address of first gsd in this shared memory
	!   and check if it is in use.
	!
	GSD_PTR = .COM_DATA_PAGE [SHD$L_GSDPTR] + .COM_DATA_PAGE;
	STATUS = MMG$VALIDATEGSD ( .SHM_CTLBLK, .COM_DATA_PAGE, .NAME);

	!
	!   For all the used GSDs
	!
	WHILE (.GSD_PTR NEQ 0) DO
	    BEGIN
	    !
	    !	get info on each gsd
	    !

	    PROBE_LEN = .GSD_PTR [GSD$W_SIZE];
	    IF NOT PROBEW ( MODEADDR, PROBE_LEN, .BUF)
	    THEN RETURN SS$_ACCVIO;

	    BUF = CH$MOVE (.PROBE_LEN, .GSD_PTR, .BUF);	! Copy the GSD

	    !
	    !	Get the address of the next used GSD in shared memory
	    !
	    STATUS = MMG$GETNXTGSD ( .SHM_CTLBLK, .COM_DATA_PAGE, .NAME);
	    END;
	!
	!   Mark end of GSDs for this port
	!
	IF NOT PROBEW ( MODEADDR, GSD$W_SIZE2, .BUF)
	THEN RETURN SS$_ACCVIO;
	BUF = CH$FILL (0, .GSD$W_SIZE2, .BUF);

	END;	! IF connected
    END;	! While there are more Shared Memory Control Blocks

!
!   Fill size field with zeros to mark the end of the buffer
!
IF NOT PROBEW ( MODEADDR, GSD$W_SIZE2, .BUF)
THEN RETURN SS$_ACCVIO;
BUF = CH$FILL (0, .GSD$W_SIZE2, .BUF);

RETURN SS$_NORMAL;
END;	! routine copy_shm_lists


%SBTTL  'lists_shms';

ROUTINE LIST_SHMS (SHM_BUFFER) =
!+++
!
!  FUNCTIONAL DESCRIPTION:
!	Format and display to sys$output the shared memory GSD's
!
!  INPUT:
!	shm_buffer =	buffer containing copies of shared memory GSD list
!
!---
BEGIN
OWN
    SPACES : LONG INITIAL (CSTRING ('        ')),
    DELPEND : LONG INITIAL (CSTRING (' DELPEND'));

LOCAL
    BUFFER : REF BBLOCK,
    GPT_ENTRIES,
    GSD_MAX,
    GSP_UNUSED,		! Count of pages for global sections
    MATCHES,		! Boolean used in controlling display
    PORT_NUMBER,	! Number of memory port
    PRINT_TITLE,	! Boolean used in controlling title
    SECTIONS,		! Number of global sections
    STATUS;

BIND
    FAO_SHMTITLE	= $DESCRIPTOR (' !/!_Global Sections in Multiport Memory "!AC"!/'),
    FAO_CRPORT		= $DESCRIPTOR (' !AC Creator Port=!UB'),
    FAO_BASEPFN		= $DESCRIPTOR ('!_Basepfn/Pagcnt=!XL/!UL'),
    FAO_PROCCNT		= $DESCRIPTOR ('!_Port !UB PTE Refcnt=!UL'),
    FAO_SUMMARY1	= $DESCRIPTOR ('!/    !UL Global Page!%S Used,  !UL Global Page!%S Unused'),
    FAO_SUMMARY2	= $DESCRIPTOR ('    !UL Global Section!%S Used,  !UL Global Section!%S Unused');


BUFFER = .SHM_BUFFER;

!
!   If there were no shared memories then return success
!
IF .(BUFFER [GSD$W_SIZE])<0,16,1> EQL 0 THEN RETURN TRUE;

!
!   For each shared memory
!
UNTIL .(BUFFER [GSD$W_SIZE])<0,16,1> EQL 0 DO	! <0,16,1> Ensures signed compare
    BEGIN
    LOCAL
	TBUF : BBLOCK [16];				! Title buffer

    PRINT_TITLE = TRUE;					! Initialize title control indicator

    BUFFER = .BUFFER + $BYTEOFFSET (GSD$W_SIZE) + 2;	! skip over -1's

    SECTIONS = 0;
    GPT_ENTRIES = 0;

    PORT_NUMBER = ..BUFFER;
    BUFFER = .BUFFER + 4;

    GSP_UNUSED = ..BUFFER;
    BUFFER = .BUFFER + 4;

    GSD_MAX = ..BUFFER;
    BUFFER = .BUFFER + 4;

    CH$MOVE(16, .BUFFER, TBUF);				! Copy shared memory name
    BUFFER = .BUFFER + 16;

    UNTIL .(BUFFER [GSD$W_SIZE])<0,16,1>  EQL 0 DO	! loop through all GSD's
	BEGIN
	LOCAL
	    BASPFNADR,
	    PORT,
	    PROC_REF_CNTS,
	    PTECNTADR;

	MAP
	    KFE : REF $BBLOCK;

	IF .KFE EQL 0
	THEN MATCHES = TRUE
	ELSE
	    BEGIN
	    !
	    ! See if the KFE and GSD have matching names, less suffix
	    !
	    LOCAL
		CME_ARGLIST : VECTOR [3,LONG];

	    CME_ARGLIST [0] = 2;
	    CME_ARGLIST [1] = .KFE;
	    CME_ARGLIST [2] = .BUFFER;

	    MATCHES = $CMEXEC (ROUTIN=EXEC_MODE_NAME_CHK, ARGLST=CME_ARGLIST);

	    END;

	IF .MATCHES
	THEN
	    BEGIN
	    IF .PRINT_TITLE
	    THEN
		BEGIN				! Print title if not already done
		INS$FAO_AND_OUT (FAO_SHMTITLE, TBUF);
		PRINT_TITLE = FALSE;
		END;

	    SECTIONS = .SECTIONS + 1;
	    DECODE_FLAGS (.BUFFER);
	    INS$FAO_AND_OUT(FAO_CRPORT, 
		(IF .BUFFER [GSD$V_DELPEND]
		THEN .DELPEND
		ELSE .SPACES ),
		.BUFFER [GSD$B_CREATPORT]);

	    BASPFNADR = BUFFER [GSD$L_BASPFN1];		! Address of first PFN base
	    INCR I FROM 0 TO GSD$C_PFNBASMAX - 1 DO	! For the maximum number of PFN bases allowed
	        BEGIN
	        BIND
		    PFN_BASE = .BASPFNADR,		! PFN base
		    BASE_CNT = .BASPFNADR + 4;		! count of pages at this base

	        IF .BASE_CNT  EQL 0 THEN EXITLOOP;
	        GPT_ENTRIES = .GPT_ENTRIES + .BASE_CNT;	! count of global section pages used
	        INS$FAO_AND_OUT(FAO_BASEPFN, .PFN_BASE, .BASE_CNT);
	        BASPFNADR = .BASPFNADR + 8;		! skip over count to next PFN base
	        END;

	    PROC_REF_CNTS = .BUFFER [GSD$B_PROCCNT];	! Processor reference counts
	    PTECNTADR = BUFFER [GSD$L_PTECNT1];		! Address of first reference count
	    PORT = 0;
	    WHILE (PROC_REF_CNTS = .PROC_REF_CNTS - 1) GEQ 0 DO	! For all active ports
	        BEGIN
	        LOCAL
		    PTE_CNT;

	        PTE_CNT = ..PTECNTADR;			! get processor reference count
	        IF .PORT EQL .PORT_NUMBER		! Is this the port for this processor ?
	        THEN PTE_CNT = .PTE_CNT - 1;		!   Then subtract one for the GSD lock
	        IF .PTE_CNT GTR 0			! skip if none mapped to section
	        THEN
		    INS$FAO_AND_OUT(FAO_PROCCNT, .PORT, .PTE_CNT);

	        PTECNTADR = .PTECNTADR + 4;		! Go to address of next processor reference count
	        PORT = .PORT + 1;			! Do for all active ports
	        END;
	    END;				

	BUFFER = .BUFFER + .BUFFER [GSD$W_SIZE];

	END;						! Until no more GSDs

    IF .KFE EQL 0
    THEN
	BEGIN
	!
	!   Print title if not already done
	!
	IF .PRINT_TITLE
	THEN
	    INS$FAO_AND_OUT (FAO_SHMTITLE, TBUF);
        !
        !   Print summary lines
        !
        GSP_UNUSED = .GSP_UNUSED - .GPT_ENTRIES;
        INS$FAO_AND_OUT( FAO_SUMMARY1, .GPT_ENTRIES, .GSP_UNUSED);
        INS$FAO_AND_OUT( FAO_SUMMARY2, .SECTIONS, (.GSD_MAX - .SECTIONS));
	END;

    BUFFER = .BUFFER + .GSD$W_SIZE2			! skip over zeros
    END;

RETURN TRUE;
END;	! Routine  list_shms


%SBTTL  'Decode_flags';

ROUTINE DECODE_FLAGS ( GSD ) =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!	Format the ASCII symbols in the output buffer 
!	for the gsd flags that are set.
!
!  INPUT:
!	gsd = address in buffer of GSD flags word
!
!---
MAP 
    GSD : REF BBLOCK;

!
!   Indices to ctlflg_array
!
LITERAL
    SEC_I_WRT = 0,
    SEC_I_CRF = 2,
    SEC_I_DZRO = 4,
    SEC_I_PRM = 6,
    SEC_I_TMP = 7,
    SEC_I_SYS = 8,
    SEC_I_GRP = 9;

OWN

    !
    !   Table of counted ASCII strings, one string to be output
    !	if flag is set, another if it is not set
    !
    CTLFLAG_ARRAY : VECTOR [2 * INS$C_CTLFLGSTR]  INITIAL (
		CSTRING ('WRT'), CSTRING ('   '),
		CSTRING ('CRF'), CSTRING ('   '),
		CSTRING ('DZRO'), CSTRING ('    '),
		CSTRING ('PRM'), CSTRING ('TMP'),
		CSTRING ('SYS'), CSTRING ('GRP')
		),
    PFN_CSTR : LONG INITIAL( CSTRING ('PFN '));

BIND
 FAO_GBLNAM   = $DESCRIPTOR ('!#AC(!XL) !AC !AC !AC !AC !AC'),
 FAO_GBLNAM_L = $DESCRIPTOR ('!#AC!/               (!XL) !AC !AC !AC !AC !AC');
!
!   Place the correct ASCII symbols in the output buffer.
!
INS$FAOL (
	(IF .GSD [GSD$B_TYPE] EQL DYN$C_EXTGSD
		then
		(IF .(GSD [GSD$T_PFNGSDNAM]) <0,8,0> LEQ 15
			then FAO_GBLNAM
			else FAO_GBLNAM_L)
		else
		(IF .(GSD [GSD$T_GSDNAM]) <0,8,0> LEQ 15
			then FAO_GBLNAM
			else FAO_GBLNAM_L) ),
	(IF .GSD [GSD$B_TYPE] EQL DYN$C_EXTGSD
		then
		(IF .(GSD [GSD$T_PFNGSDNAM]) <0,8,0> LEQ 15
			then 15
			else .(GSD [GSD$T_PFNGSDNAM]) <0,8,0>)
		else
		(IF .(GSD [GSD$T_GSDNAM]) <0,8,0> LEQ 15
			then 15
			else .(GSD [GSD$T_GSDNAM]) <0,8,0>) ),
	(IF .GSD [GSD$B_TYPE] EQL DYN$C_EXTGSD
		then GSD [GSD$T_PFNGSDNAM]
		else GSD [GSD$T_GSDNAM]),
	.GSD [GSD$L_IDENT],
	(IF (.GSD [GSD$W_FLAGS] AND SEC$M_WRT) NEQ 0 
		then .CTLFLAG_ARRAY [SEC_I_WRT]
		else .CTLFLAG_ARRAY [SEC_I_WRT + 1]),
	(IF (.GSD [GSD$W_FLAGS] AND SEC$M_CRF) NEQ 0 
		then .CTLFLAG_ARRAY [SEC_I_CRF]
		else .CTLFLAG_ARRAY [SEC_I_CRF + 1]),
	(IF (.GSD [GSD$W_FLAGS] AND SEC$M_DZRO) NEQ 0 
		THEN
		    BEGIN
		    IF .GSD [GSD$B_TYPE] EQL DYN$C_EXTGSD
		    THEN .PFN_CSTR
		    ELSE .CTLFLAG_ARRAY [SEC_I_DZRO]
		    END
		ELSE .CTLFLAG_ARRAY [SEC_I_DZRO + 1]),
	(IF (.GSD [GSD$W_FLAGS] AND SEC$M_PERM) NEQ 0 
		THEN .CTLFLAG_ARRAY [SEC_I_PRM]
		ELSE .CTLFLAG_ARRAY [SEC_I_TMP]),
	(IF (.GSD [GSD$W_FLAGS] AND SEC$M_SYSGBL) NEQ 0 
		THEN .CTLFLAG_ARRAY [SEC_I_SYS]
		ELSE .CTLFLAG_ARRAY [SEC_I_GRP])	);

RETURN TRUE;
END;


%SBTTL  'output routines ';

GLOBAL ROUTINE INS$FAOL (FAO_STRING, PARAMETER_LIST) =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!	Format an ASCII string and stuff it into the output buffer.
!	Update the buffer pointers to reflect the new stuff in the
!	buffer.
!
!  INPUT:
!	fao_string =	Formatted Ascii Output control string for FAO
!	parameter_list= List of stuff to have formatted into buffer.
!
!  IMPLICIT INPUT:
!	Output buffer has been allocated and ins$faobufdesc is the
!	descriptor for it.
!
!  OUTPUT:
!	none
!
!  ROUTINE VALUE
!	Success, or error status from SYS$FAOL
!---
LOCAL
    OUTLEN : WORD;

EXECUTE ( SYS$FAOL (.FAO_STRING, OUTLEN, INS$FAOBUFDESC, PARAMETER_LIST));	! Format the buffer
INS$FAOBUFDESC [DSC$W_LENGTH] = .INS$FAOBUFDESC [DSC$W_LENGTH] - .OUTLEN;	! decrement space left in buffer
INS$FAOBUFDESC [DSC$A_POINTER] = .INS$FAOBUFDESC [DSC$A_POINTER] + .OUTLEN;	! Point to unused space left in buffer
RETURN TRUE;
END;		! global routine  INS$FAOL


GLOBAL ROUTINE INS$OUTPUT_FAOBUF =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!	Print the contents of the output buffer to sys$output and re-initialize
!	the descriptor of the buffer, and zero the buffer.
!
!  INPUT:
!	none
!
!  IMPLICIT INPUT:
!	Output buffer has been allocated and ins$faobufdesc is the
!	descriptor for it.
!
!  OUTPUT:
!	Output the contents of ins$faooutbuf to sys$output
!
!  ROUTINE VALUE
!	status from $PUT
!---

LOCAL
    STATUS;

INS$G_OUTRAB [RAB$W_RSZ] = INS$C_FAOBUFLEN - .INS$FAOBUFDESC [DSC$W_LENGTH];
STATUS = $PUT (RAB = INS$G_OUTRAB);
INS$FAOBUFDESC [DSC$W_LENGTH] = INS$C_FAOBUFLEN;
INS$FAOBUFDESC [DSC$A_POINTER] = .INS$FAOOUTBUF;
CH$FILL (%C' ', INS$C_FAOBUFLEN, .INS$FAOOUTBUF);
RETURN .STATUS;
END;		! Global Routine  INS$OUTPUT_FAOBUF

ROUTINE INS$FAO_AND_OUT(FAO_STRING, PARAMETER_LIST) =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!	Format and output an ASCII string and stuff it into the output buffer.
!	Update the buffer pointers to reflect the new stuff in the
!	buffer.
!
!  INPUT:
!	fao_string =	Formatted Ascii Output control string for FAO
!	parameter_list= List of stuff to have formatted into buffer.
!
!  IMPLICIT INPUT:
!	Output buffer has been allocated and ins$faobufdesc is the
!	descriptor for it.
!
!  OUTPUT:
!	none
!
!  ROUTINE VALUE
!	Success, or error status from SYS$FAOL
!---
BUILTIN
    AP,
    CALLG;

EXECUTE(CALLG(.AP,INS$FAOL));
RETURN INS$OUTPUT_FAOBUF()
END;
END
ELUDOM		! INSGLOBAL
