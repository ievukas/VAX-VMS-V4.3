	.TITLE	CLUMESSAG - Cluster Event Message Routines
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: EXECUTIVE, CLUSTER MANAGEMENT
;
; ABSTRACT: 
;	This module produces operator and console messages when the status
;	of the cluster changes.  A primitive version of the code was
;	carved out of the CNXMAN.MAR module.
;
; ENVIRONMENT: VAX/VMS
;
; AUTHOR: David W. Thiel	 CREATION DATE: 30-Aug-1983
;
; MODIFIED BY:
;
;	V03-004	WMC0001		Wayne Cardoza		17-Jul-1984
;		Add a quorum disk writelocked error.
;
;	V03-003	DWT0214		David W. Thiel		09-Apr-1984
;		Add and delete some messages.  Change defaults.
;
;	V03-002	DWT0198		David W. Thiel		23-Mar-1983
;		Add messages for quorum adjustment.
;
;	V03-001	DWT0131		David W. Thiel		23-Sep-1983
;		Remove debugging tool that forces all messages to be
;		broadcast to OPA0.  Stop outputting messages about
;		sending or receiving status and when CSB is deleted.
;		Use correct length instruction to fill in
;		CLUMBX$B_DS_VERSION field.  Add MEMREQ_MSG message
;		to complement REQJOIN_MSG message.
;
;--


	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$CLUBDEF			; CLUster Block offsets
	$CLUMBXDEF			; Cluster mailbox message format
	$CSBDEF				; CSB Offsets
	$IPLDEF				; IPL definitions
	$MSGDEF				; Mailbox message type codes
	$SBDEF				; SB Offsets

;
; MACROS:
;
	.MACRO	CNX_MSG	MSGCODE,BRDFLG,LCLFLG,CLSFLG,TEXT
	.SHOW	BINARY
	.IF NOT_BLANK	MSGCODE
	.WORD	CLUMBX$K_'MSGCODE
	.IF_FALSE
	.WORD	0
	.ENDC
$$$XX=	FLG_M_ERROR
	.IRP	X,BRDFLG
$$$XX=	$$$XX ! FLG_M_'X
	.ENDR
	.BYTE	$$$XX
$$$XX=	0
	.IRP	X,CLSFLG
$$$XX=	$$$XX ! FLG_M_'X
	.ENDR
	.BYTE	$$$XX			; Cluster-wide OPCOM broadcast flag
$$$YY=	0
	.IRP	X,LCLFLG
$$$YY=	$$$YY ! FLG_M_'X
	.ENDR
	.BYTE	$$$YY ! $$$XX		; OPCOM message flags
	.ASCIC	@TEXT@
	.NOSHOW	BINARY
	.ENDM	CNX_MSG

;
; EQUATED SYMBOLS:
;

MB_W_CODE=	0			; Mailbox message code
MB_B_BRD=	2			; OPA0 broadcast flags byte
MB_B_CLS=	3			; OPCOM cluster message flags byte
MB_B_LCL=	4			; OPCOM local message flags byte
MB_T_MSG=	5			; OPA0 broadcast message text

FLG_V_NONMEMBER=	1		; Do if local node is not a VAXcluster member
FLG_M_NONMEMBER=	1@FLG_V_NONMEMBER
FLG_V_QUORUM=	2			; Do if local cluster has a dynamic quorum
FLG_M_QUORUM=	1@FLG_V_QUORUM
FLG_V_NOQUORUM=	3			; Do if local cluster does not have a dynamic quorum
FLG_M_NOQUORUM=	1@FLG_V_NOQUORUM
FLG_V_ERROR=	4			; Do after failing to put message in OPCOM mailbox
FLG_M_ERROR=	1@FLG_V_ERROR
FLG_M_ALWAYS=	FLG_M_NONMEMBER ! FLG_M_QUORUM ! FLG_M_NOQUORUM
FLG_M_MEMBER=	FLG_M_QUORUM ! FLG_M_NOQUORUM

BELL = 7				; ASCII code for bell
CR = ^XD				; ASCII code for carriage return
LF = ^XA				; ASCII code for line feed

;
; OWN STORAGE:
;

	.PSECT	$$$060,LONG		; R/O Data PSECT

;
;	Common message prefix
;
PREFIX:	.ASCII	<BELL><LF>"%CNXMAN,  "	; Text to prefix each message
PREFIX_SIZ=	.-PREFIX		; Length of prefix text

;
;	Message control blocks
;

CSB_MSG::	CNX_MSG	ST_NEWSYS, <NONMEMBER,NOQUORUM,QUORUM>, , <MEMBER>, <Discovered system>
ACCPT_MSG::
CNCT_MSG::	CNX_MSG ST_CNX, <NONMEMBER,NOQUORUM,QUORUM>, , <MEMBER>, <Established connection to system>
REACCPT_MSG::
RECNCT_MSG::	CNX_MSG ST_RECNX, <NONMEMBER,NOQUORUM,QUORUM>, , <MEMBER>, <Re-established connection to system>
CNXERROR_MSG::	CNX_MSG ST_LOSTCNX, <NONMEMBER, NOQUORUM,QUORUM>, , <MEMBER>, <Lost connection to system>
FAILIO_MSG::	CNX_MSG ST_TIMCNX, <NONMEMBER,NOQUORUM,QUORUM>, , <MEMBER>, <Timed-out lost connection to system>
DEAD_MSG::	CNX_MSG	, <NONMEMBER,NOQUORUM,QUORUM>, , , <Deleting CSB for system>
TRYFORM_MSG::	CNX_MSG ST_INIFORM, <ALWAYS>, <ALWAYS>, , <Proposing formation of a VAXcluster>
REQJOIN_MSG::	CNX_MSG	, <ALWAYS>, , , <Sending VAXcluster membership request to system>
MEMREQ_MSG::	CNX_MSG	ST_MEMREQ, <NONMEMBER,NOQUORUM,QUORUM>, , <ALWAYS>, <Received VAXcluster membership request from system>
RECONFIG_MSG::	CNX_MSG	ST_INIRECNFIG, <NONMEMBER,NOQUORUM,QUORUM>, , <ALWAYS>, <Proposing reconfiguration of the VAXcluster>
QUORUM_MSG::	CNX_MSG	ST_QUORUM, <NONMEMBER,NOQUORUM,QUORUM>, , <ALWAYS>, -
			<Proposing modification of quorum or quorum disk membership>
JOIN_MSG::	CNX_MSG	ST_INIADD, <NONMEMBER,NOQUORUM,QUORUM>, , <ALWAYS>, <Proposing addition of system>
UNLOCK_MSG::	CNX_MSG ST_ABORT, <NONMEMBER,NOQUORUM,QUORUM>, , <ALWAYS>, <Aborting VAXcluster state transition>
COMPLETE_MSG::	CNX_MSG	ST_COMPLETE, <NONMEMBER,NOQUORUM,QUORUM>, , <ALWAYS>, <Completing VAXcluster state transition>
FAILOVER_MSG::	CNX_MSG	ST_DROPNODE, <NONMEMBER,NOQUORUM,QUORUM>, <ALWAYS>, , <Removed from VAXcluster system>
ADDNODE_MSG::	CNX_MSG	ST_ADD, <NONMEMBER,NOQUORUM,QUORUM>, , <ALWAYS>, <Now a VAXcluster member -- system>
SNDSTS_MSG::	CNX_MSG	, , , , <Sending status to system>
RCVSTS_MSG::	CNX_MSG	, , , , <Received status from system>
FORCLUS_MSG::	CNX_MSG	ST_FORNCLUS, <NONMEMBER,NOQUORUM,QUORUM>, , <ALWAYS>, <Detected member of another VAXcluster -- system>
LOSEQUORUM_MSG::
		CNX_MSG	ST_NOQUORUM, <ALWAYS>, <ALWAYS>, , <Quorum lost, blocking activity>
GAINQUORUM_MSG::
		CNX_MSG	ST_INQUORUM, <ALWAYS>, <ALWAYS>, , <Quorum regained, resuming activity>
QDCON_MSG::	CNX_MSG ST_GAINDISK, <NONMEMBER,NOQUORUM,QUORUM>, , <MEMBER>, <Established "connection" to quorum disk>
QDDISCON_MSG::	CNX_MSG	ST_LOSTDISK, <NONMEMBER,NOQUORUM,QUORUM>, , <MEMBER>, <Lost "connection" to quorum disk>
QDRDERROR_MSG::	CNX_MSG	ST_DISKRDERR, <NONMEMBER,NOQUORUM,QUORUM>, , <MEMBER>, <Error reading quorum disk>
QDWRERROR_MSG::	CNX_MSG	ST_DISKWRERR, <NONMEMBER,NOQUORUM,QUORUM>, , <MEMBER>, <Error writing quorum disk>
QDWRLERROR_MSG:: CNX_MSG ST_DISKWRERR, <NONMEMBER,NOQUORUM,QUORUM>, , <MEMBER>, <Quorum disk write-locked>
QDINVDAT_MSG::	CNX_MSG	ST_DISKINVDAT, <NONMEMBER,NOQUORUM,QUORUM>, , <MEMBER>, <Read invalid data from quorum disk>
QDFORCLUS_MSG::	CNX_MSG	ST_FORNDISK, <NONMEMBER,NOQUORUM,QUORUM>, , <ALWAYS>, <Detected another VAXcluster via the quorum disk>
QDTIMOUT_MSG::	CNX_MSG	ST_DISKTIMEOUT, <NONMEMBER,NOQUORUM,QUORUM>, , <MEMBER>, <Timed-out I/O operation to quorum disk>
; LOSTMSG_MSG::	CNX_MSG	ST_LOSTMSG, <ALWAYS>, <ALWAYS>, , <Lost VAXcluster message>

;***********************************************************************
;
; NOTE:	The following assumptions are in effect for this entire module.
;
;************************************************************************

	ASSUME	IPL$_SYNCH  EQ  IPL$_SCS
	ASSUME	IPL$_SYNCH  EQ  IPL$_TIMER

	.PSECT	$$$100,LONG		; PSECT for code

	.DEFAULT	DISPLACEMENT,WORD

	.SBTTL	CNX$CONFIG_CHANGE - Log configuration change
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine records cluster configuration changes.
;	Currently it simply broadcasts a message to OPA0.
;
; INPUT PARAMETERS:
;
;	R0	Address of .ASCIC message string
;	R5	Address of CSB  or 0
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	All registers (other than R0) are preserved.
;--

CNX$CONFIG_CHANGE::
	PUSHR	#^M<R1,R2,R3,R4,R5,R6,R7,R8,R9>	; Save registers
	MOVL	R0,R8			; Message control block address
	MOVL	R5,R9			; Remote node CSB address
	MOVL	G^CLU$GL_CLUB,R4	; Address of CLUB
	CLRL	R7			; Status flags mask
	BBS	#CLUB$V_CLUSTER, -	; Branch if cluster member
		CLUB$L_FLAGS(R4),10$
	BBCS	#FLG_V_NONMEMBER,R7,30$	; Set non-member flag and branch

10$:	BBS	#CLUB$V_QUORUM, -	; Branch if quorum is present
		CLUB$L_FLAGS(R4),20$
	BBCS	#FLG_V_NOQUORUM,R7,30$	; Set quorum absent flag and branch

20$:	BISL2	#FLG_M_QUORUM,R7	; Set quorum present flag
30$:	BITB	R7,MB_B_LCL(R8)		; Send OPCOM a message?
	BNEQ	40$			; Branch to send OPCOM a message
	BRW	100$			; Skip message to OPCOM

40$:	SUBL2	#<CLUMBX$K_LENGTH+3>&^C3,SP ; Allocate mailbox message buffer
	PUSHL	R4			; Save CLUB address
	MOVC5	#0,(SP),#0, -		; Zero allocated space
		#CLUMBX$K_LENGTH,4(SP)
	POPR	#^M<R4>			; Restore CLUB address
	MOVW	#MSG$_CLUMBX, -		; Message ID
		CLUMBX$W_MSGTYPE(SP) 
	MOVW	MB_W_CODE(R8), -	; Message subtype
		CLUMBX$W_SUBTYPE(SP)
	MOVB	#CLUMBX$K_DS_VERSION, -	; Message structure version
		CLUMBX$B_DS_VERSION(SP)
	BITB	R7,MB_B_CLS(R8)		; Broadcast to cluster?
	BEQL	50$			; Branch if no
	MOVB	#CLUMBX$M_BRDCST, -	; Set broadcast bit
		CLUMBX$B_FLAGS(SP)
50$:	MOVZBW	#CLUMBX$K_LENGTH, -	; Message length
		CLUMBX$W_LENGTH(SP)
	MOVL	CLUB$L_LOCAL_CSB(R4),R3	; Local CSB address
	BBC	#CLUB$V_CLUSTER, -	; Branch if not a cluster member
		CLUB$L_FLAGS(R4),60$
	MOVL	CSB$L_CSID(R3), -	; Store local node CSID
		CLUMBX$L_CSID_L(SP)
60$:	MOVL	CSB$L_SB(R3),R6		; Address of local node system block
	MOVC3	#CLUMBX$S_SYSTEMID_L, -	; Store local system id
		SB$B_SYSTEMID(R6), -
		CLUMBX$B_SYSTEMID_L(SP)
	MOVC3	#CLUMBX$S_NODENAME_L, -	; Store local system name
		SB$T_NODENAME(R6), -
		CLUMBX$T_NODENAME_L(SP)
	TSTL	R9			; Remote node specified?
	BEQL	80$			; Branch if not and skip remote node data
	BBC	#CSB$V_MEMBER, -	; Branch if not a cluster member
		CSB$L_STATUS(R9),70$
	MOVL	CSB$L_CSID(R9), -	; Store remote node CSID
		CLUMBX$L_CSID_R(SP)
70$:	MOVL	CSB$L_SB(R9),R6		; Address of remote node system block
	MOVC3	#CLUMBX$S_SYSTEMID_R, -	; Store remote system id
		SB$B_SYSTEMID(R6), -
		CLUMBX$B_SYSTEMID_R(SP)
	MOVC3	#CLUMBX$S_NODENAME_R, -	; Store remote system name
		SB$T_NODENAME(R6), -
		CLUMBX$T_NODENAME_R(SP)
80$:	MOVQ	G^EXE$GQ_SYSTIME, -	; Store current time
		CLUMBX$Q_TIME(SP)
	MOVZWL	CLUMBX$W_LENGTH(SP),R3	; Message size
	MOVAB	(SP),R4			; Message address
	MOVAB	G^SYS$GL_OPRMBX,R5	; OPCOM mailbox UCB address
;
; R3 is message length
; R4 is message address
; R5 is mailbox UCB address
;
	JSB	G^EXE$WRTMAILBOX	; Send message to OPCOM
	BLBS	R0,90$			; Branch on success
	BISL2	#FLG_M_ERROR,R7		; Set OPCOM message error flag
90$:	ADDL2	#<CLUMBX$K_LENGTH+3>&^C3,SP ; Deallocate mailbox message buffer

100$:	BITB	R7,MB_B_BRD(R8)		; Check for OPA0 broadcast
	BEQL	120$			; Branch if no OPA0 broadcast
	MOVZBL	MB_T_MSG(R8),R1		; ; Get length of message
	ADDL2	#PREFIX_SIZ+SB$S_NODENAME+2+3,R1 ; Add prefix, space+CR and
	BICL2	#3,R1			;  round to even number of longwords
	MOVL	SP,R6			; Address to restore SP
	SUBL2	R1,SP			; Allocate message construction buffer
	MOVC3	#PREFIX_SIZ,W^PREFIX, -	; Copy prefix into message buffer
		(SP)
	MOVZBL	MB_T_MSG(R8),R1		; Initial message text size
	MOVC3	R1,MB_T_MSG+1(R8),(R3)	; Copy message text to stack
	TSTL	R9			; Was CSB address specified?
	BEQL	110$			; Branch if no CSB
	MOVB	#^A/ /,(R3)+		; Store a space
	MOVL	CSB$L_SB(R9),R5		; System Block address
	MOVAB	SB$T_NODENAME(R5),R5	; Address of counted node name
	MOVZBL	(R5)+,R4		; Length of node name
	MOVC3	R4,(R5),(R3)		; Fill in node name
110$:	MOVB	#CR,(R3)+		; Insert and count final carriage return
	MOVAB	(SP),R2			; Message address
	SUBL3	R2,R3,R1		; Message length
	MOVAL	G^OPA$UCB0,R5		; Get address of OPA0 UCB
;
; R1 is message length
; R2 is message address
; R5 is OPA0 UCB address
;
	JSB	G^IOC$BROADCAST		; Broadcast it
	MOVL	R6,SP			; Deallocate message text buffer
120$:	POPR	#^M<R1,R2,R3,R4,R5,R6,R7,R8,R9>	; Restore registers
	RSB

	.SBTTL	SEND_JBCMSG - Send message to Job Controller

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine sends a message to the Job controller when a system
;	is removed from the cluster.
;
; INPUT PARAMETERS:
;
;	R5	Address of CSB
;
; OUTPUT PARAMETERS:
;
;	None
;
; SIDE EFFECTS:
;
;	All registers (other than R0) are preserved.
;--

JBCMSGSIZ=	2+SB$S_SYSTEMID+SB$S_NODENAME		; Length of job contoller message
SEND_JBCMSG::
	PUSHR	#^M<R1,R2,R3,R4,R5,R6>	; Save registers
	SUBL2	#<JBCMSGSIZ+3>&^C3,SP	; Allocate message buffer
	MOVAB	(SP),R3			; Message buffer address
	MOVW	#MSG$_SMBDON,(R3)+	; Message type
	MOVL	CSB$L_SB(R5),R6		; Address of System Block
	MOVC3	#SB$S_SYSTEMID, -	; Copy system ID into message
		SB$B_SYSTEMID(R6),(R3)
	MOVC3	#SB$S_NODENAME, -	; Copy node name --
		SB$T_NODENAME(R6),(R3)	;    R3 set by previous MOVC3
	MOVL	#JBCMSGSIZ,R3		; Set size of message
	MOVAB	(SP),R4			; Set address of message
	MOVAB	G^SYS$GL_JOBCTLMB,R5	; Set addr. of Job controller's mailbox
	JSB	G^EXE$WRTMAILBOX	; Write it to mailbox (ignore errors)
	ADDL2	#<JBCMSGSIZ+3>&^C3,SP	; Restore stack
	POPR	#^M<R1,R2,R3,R4,R5,R6>	; Restore all registers
	RSB				; Return


	.END
