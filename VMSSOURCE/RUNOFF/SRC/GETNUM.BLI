%TITLE 'Get a number and convert it to binary.'
MODULE getnum (	IDENT = 'V04-000'
		%BLISS32 [, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					     NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	Get a number and convert it to binary.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W. Friday 	 CREATION DATE: May, 1978/Revised July, 1983

! MODIFIED BY:
!
!	011	KFA00011 	Ken Alden	23-Sep-1983
!		Made call in GETLET to gslu now call gname.
!		  This will allow user to mix letters and numbers in number
!		  strings.
!
!	010	REM00010	Ray Marshall	22-Jul-1983
!		Changed TEMP_MRA_SIZE to TEMP_SIZE_MRA so that it will be
!		  unique within the first 6 characters for the TOPS-20 linker.
!
!	009	KFA00009	Ken Alden	06-Jul-1983
!		Fixed the newsub problems in dealing with alphanumeric strings
!		Added two new routines to handles $$entities & strings.
!
!	008	KFA00008	Ken Alden	23-Jun-1983
!		Added call to ENDWRD to flush out the last character
!		  that NEWSUB put into the mra.(DSRPLUS)
!
!	007	KFA00007	Ken Alden	15-Jun-1983
!		For DSRPLUS:  Conditionalized call to kcns if this
!		  routine had called NEWSUB for the number.
!
!	006	RER00006	Ron Randall	9-Jun-1983
!		For DSRPLUS:
!		Improved resolution of entities by setting/resetting a
!		flag causing ENDCHR not to be called by NEWSUB while
!		entities are being resolved.
!
!	005	RER00005	Ron Randall	16-May-1983
!		Fixed a bug related to leading zeros.
!
!	004	RER00004	Ron Randall	11-May-1983
!		For DSRPLUS:
!		Allow GETNUM to resolve numerical $ and $$ entities.
!
!	003	RER00003	Ron Randall	7-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!--

!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
	LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
	LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

FORWARD ROUTINE
GETNUM,				! Get a number
%IF DSRPLUS %THEN
GETSUB,				! Get a number from a $$entity
%FI			
GETLET : NOVALUE;		! Get a number from a string of letters

!
! EXTERNAL REFERENCES:
!
EXTERNAL
	FS01	: FIXED_STRING,
	rnoiob : REF $XPO_IOB (),	! Output file (document being built)
	khar;

EXTERNAL LITERAL
	rnfmfn;

EXTERNAL ROUTINE
	convlb,
    	gname,
	erma,
	rskips;

%IF DSRPLUS %THEN
EXTERNAL LITERAL
	rintes	: UNSIGNED (8),
	temp_size_mra;					! Allocated size for temporary mra.

EXTERNAL
	entity_in_footnote,			! Flag used by FCIMRA.
	processing_entity,			! Flag used by NEWSUB.
	flgt	: flgt_definition,	! Flag characters.
	fnct	: fnct_definition,	! Footnote control table.
	hold_mra,				! Holds mra address.
	hold_tsf,				! Holds tsf address.
	mra		: REF fixed_string,
	sca		: sca_definition,	! Flag for justification.
	temp_mra	: fixed_string,		! Substitute mra.
	temp_tsf	: VECTOR [tsf_size],	! Substitute tsf.
	tsf		: tsf_definition;

EXTERNAL ROUTINE

	endwrd,				! Flushes last character into mra.
	gtoken,				! Handles tokens.
	newsub;				! Resolves entity value.
	%FI

OWN
	sign_convert;		! Either +1 or -1; used in multiplying
					! to get the right sign.




GLOBAL ROUTINE getnum (input_string, number_value, number_sign, number_length) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Beginning with khar, getnum skips spaces and tabs until it
!	finds something that is neither.  From that point on, it processes
!	characters until it encounters what cannot be part of a number;
!	though a + or - sign will be accepted.
!
!	If GETNUM encounters a "number" that is incorrect (too long or not
!	numeric), it returns FALSE; otherwise, it returns TRUE.
!
! FORMAL PARAMETERS:
!
!	input_string	- The string containing the value sought.
!	number_value	- Contains the binary equivalent of the original input.
!	number_sign	- Contains the value 1 if a + sign was encountered,
!			  -1 if a minus sign was encountered,
!			  or 0 if no sign was encountered.
!	number_length	- Contains the number of digits that were processed.
!			  If number_length is zero on return, no number was
!			  found.  In such a case, all other parameters will 
!			  also have a zero value.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if a valid number was found, else FALSE.
!
! SIDE EFFECTS:
!
!	Issues an error message in the case of an invalid number.
!--

BEGIN
BIND
    ira = input_string : REF FIXED_STRING,
    nv  = .number_value,
    ns  = .number_sign,
    nl  = .number_length;

LOCAL
	leading_zeros;			! TRUE if leading zeros were found.

    nv = 0;
    ns = 0;
    nl = 0;
!
! Ignore leading spaces and tabs.
!
rskips (.input_string);
!
! Check for leading sign.
!
IF  (.khar EQL %C'+') OR (.khar EQL %C'-')
THEN
	BEGIN
	ns = (IF .khar EQL %C'+' THEN 1 ELSE -1);
	kcns ();
	END;

sign_convert  = (IF .ns GEQ 0 THEN 1 ELSE -1);
leading_zeros = .khar EQL %C'0';
!
! Skip leading zeros.
!
WHILE .khar EQL %C'0' DO
	kcns ();

!
! Detect special cases.
!
IF  NOT digit (.khar)
THEN
    BEGIN
    !
    ! Sign alone, or + or - zero.
    !
    IF  .ns NEQ 0
    THEN
    	BEGIN
%IF DSRPLUS %THEN
	IF (.flgt [sub_flag, flag_character] EQL .khar) AND 
	    .flgt [sub_flag, flag_enabled]
	THEN
	    RETURN (getsub(ira, nv, nl, false))
	ELSE
%FI
	    BEGIN
	    erma (rnfmfn, false);
	    RETURN false;
	    END;
	END
    ELSE
    	BEGIN
	!
	! Set number length to 1 (arbitrarily) for any string of zeros.
	!
	IF  .leading_zeros
	THEN
	    nl = 1;

%IF DSRPLUS %THEN
	IF (.flgt [sub_flag, flag_character] EQL .khar) AND 
		.flgt [sub_flag, flag_enabled]
	THEN
    	    BEGIN
    	    LOCAL
    		status;
    	
	    status = getsub(ira, nv, nl, false);
    	    IF .status
    	    THEN
    	        kcns ();
    	    RETURN true;
    	    END;
%ELSE
    	RETURN true;
%FI
    	END;

    END;

WHILE digit (.khar) DO
    BEGIN
    LOCAL
    	converted_digit;

    IF  .nl EQL most_digits_9
    THEN
    	BEGIN
	!
	! Skip overflow.
	!
	WHILE digit (.khar) DO
	    kcns ();

	erma (rnfmfn, false);
	RETURN false;
	END;
    !
    ! Convert characters to decimal number.
    !
    converted_digit = .khar - %C'0';
    nv = (.nv * 10) + (.converted_digit * .sign_convert);
    nl = .nl + 1;
    !
    ! Get next character.
    !
    kcns ();
    END;

RETURN true;
END;					! End of GETNUM.


%IF DSRPLUS %THEN
GLOBAL ROUTINE getsub (input_string, number_value, number_length, expand_string) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Khar is assumed to be the substitute flag and must be to
!	to get processed through this routine.  GETSUB will call NEWSUB
!	to pick up the $entity and if expand_string is true, then GETLET
!	will be called. 
!
! FORMAL PARAMETERS:
!
!	input_string	- The string containing the value sought.
!	number_value	- Contains the binary equivalent of the original input.
!	number_length	- Contains the number of digits that were processed.
!			  If number_length is zero on return, no number was
!			  found.  In such a case, all other parameters will 
!			  also have a zero value.
!	expand_string	- If true, then any string 'number' will be expanded
!			  and converted into a 'number'.
!	
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if a valid number was found, else FALSE.
!
! SIDE EFFECTS:
!
!	Issues an error message in the case of an invalid number.
!--

BEGIN
OWN
    value,
    length,
    token_desc : $STR_DESCRIPTOR (CLASS = DYNAMIC),
    status   : $gtoken_status,	! Status returned by GTOKEN.
    entity_value;			! Value returned by GTOKEN.

BIND
    ira = .input_string : REF FIXED_STRING,
    nv  = .number_value,
    nl  = .number_length;

!
! Check to make sure khar is the substitute flag.
!
IF .khar NEQ .flgt [sub_flag, flag_character] AND 
	.flgt [sub_flag, flag_enabled]
THEN
	RETURN false;

!
! Knowing that khar is the subs flag, we can hand the input string off
! to NEWSUB.
! 
    BEGIN
    LOCAL
    	hold_temp_mra_length,
	hold_khar,
	hold_ira_next,
	hold_ira_length;

    length = 0;
    value = 0;

    !
    ! Remember location of current tsf and ira.
    !
    hold_khar = .khar;    
    hold_ira_next = .fs_next(ira);
    hold_ira_length	= .fs_length(ira);
    hold_tsf = .tsf;
    !
    ! Set up new (temporary) tsf.
    !
    tsf = temp_tsf;

    INCR I FROM 0 TO (tsf_size - 1) DO
    tsf [.I] = 0;

    !
    ! Remember location of current mra.
    !
    hold_mra = .mra;
    !
    ! Set up new (temporary) mra.
    !
    fs_maxsize (temp_mra) = temp_size_mra;
    fs_init    (temp_mra);
    mra = temp_mra;
    !
    ! Set a flag to indicate that we are within a footnote.
    ! The flag is used by FCIMRA to avoid writing into the new mra.
    !
    IF  .fnct_collecting
    THEN
    	entity_in_footnote = true;
    !
    ! Set a flag to indicate that we are processing an entity.
    ! The flag is used by NEWSUB to avoid calling ENDCHR.
    ! It also tells GETNUM that NEWSUB has already called kcns.
    !
    processing_entity = true;
    !
    ! Get the string (expected to be digits) referred to by the entity.
    ! Place it in the current mra.
    !
    newsub ();
    processing_entity = false;
    !
    ! Flush out last character into the mra.
    !
    endwrd (false, false, false);
    !
    ! Reset one flag; job is done.
    !
    entity_in_footnote = false;
    !
    ! Reset next character pointer to the start of the mra.
    !
    hold_temp_mra_length = .fs_length (mra);
    fs_next (mra) = .fs_start (mra);
    !
    ! Convert substitute string in the temp. mra to a value 
    ! and get statistics about it.
    !
    status = gtoken (.mra, 0, token_desc, entity_value, 0);
    !
    IF .status [gt$v_numeric]
    THEN
    	BEGIN
    	!
	! User supplied a valid numeric number.
	! Apply sign to returned value.
	!
	nv = (.entity_value * .sign_convert);
	!
	! Get length of returned value.
	!
	nl = .token_desc [str$h_length];
	!
	! Restore original mra.
	!
	mra = .hold_mra;
	!
	! Restore original tsf.
	!
	tsf = .hold_tsf;
	RETURN true;
	END;
    !
    ! If we picked up something but it wasn't a number then check to see
    ! if we are allowed to go further and use the string as a 'number'.
    !
    IF  .status [gt$v_token] AND NOT .status [gt$v_numeric]
    THEN 
    	BEGIN
	IF .expand_string AND (.token_desc [str$h_length] GTR 0)
	THEN
	    BEGIN
    	    !
    	    ! Take a picture of the mra and ira for restoring when finished.
	    !
    	    hold_ira_next 	= .fs_next(ira);
    	    hold_ira_length	= .fs_length(ira);
	    fs_next (mra) 	= .fs_start (mra);
    	    fs_length (mra) 	= .hold_temp_mra_length;
	    !
	    ! Reset next character pointer 
    	    !
    	    fs_rchar (mra, khar);
    	    !
    	    ! Go convert the string into a 'number'
    	    !
	    getlet(.mra, value, length);
    	    !
    	    nv = .value;
    	    nl = .length;
	    !
	    ! Restore original mra and ira.
	    !
	    mra = .hold_mra;
	    fs_next(ira) = .hold_ira_next;
	    fs_length(ira) = .hold_ira_length;
	    !
	    ! Restore original tsf.
	    !
	    tsf = .hold_tsf;
	    RETURN true;
            END
	ELSE
	    BEGIN
	    !
	    ! Restore original mra.
	    !
	    mra = .hold_mra;
	    !
	    ! Restore original tsf and put the IRA back into shape.
	    !
	    tsf = .hold_tsf;
	    !
	    khar = .hold_khar;
	    fs_next(ira) = .hold_ira_next;
	    fs_length(ira) = .hold_ira_length;
	    RETURN false;
    END;
END;
END;
RETURN true;				! to make BLISS happy.
END;					! End of GETSUB.

%FI

GLOBAL ROUTINE getlet (input_string, number_value, number_length) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	
!	GETLET is called from GETSUB or NM in order to resolve a string that
!	will be turned into a 'number'.
!
! FORMAL PARAMETERS:
!
!	input_string	- The string containing the value sought.
!	number_value	- Contains the binary equivalent of the original input.
!	number_length	- Contains the number of digits that were processed.
!			  If number_length is zero on return, no number was
!			  found.  In such a case, all other parameters will 
!			  also have a zero value.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if a valid number was found, else FALSE.
!
! SIDE EFFECTS:
!
!	none
!--

BEGIN
BIND
    ira = .input_string :  REF FIXED_STRING,
    nv  = .number_value,
    nl  = .number_length;

LOCAL
    gname_result;

! Initialize the temporary fixed string where the result is returned.
fs_init (fs01);
!
! The routine GNAME uses khar in doing its processing.  Therefore we must
! update khar so everthing works correctly.
!
!!	$XPO_PUT ( IOB    = .rnoiob
!!		  ,STRING = $STR_CONCAT( ' *****  Value of khar: '
!!					,$STR_ASCII (.khar)
!!					));
!!	$XPO_PUT ( IOB    = .rnoiob
!!		  ,STRING = $STR_CONCAT( ' length of "ira": '
!!					,$STR_ASCII (.fs_length(ira))
!!					));
!
! Now try to get an appendix name specified as a string of letters.
gname_result = gname (ira, fs01);

! If the user specified a string of letters convert to binary representation.
IF .gname_result NEQ gname_no_name
THEN
	BEGIN		    
	nl = .fs_length (fs01);
	nv = convlb (.fs_start (fs01), .fs_length (fs01));
	END;
END;		! End of GETLET.

END
ELUDOM
