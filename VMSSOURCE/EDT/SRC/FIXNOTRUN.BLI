%TITLE 'EDT$FIXNOTRUN - Fix screen data base in NOTRUNCATE mode'
MODULE EDT$FIXNOTRUN (				! Fix screen data base in NOTRUNCATE mode
		IDENT = 'V04-000'			! File: FIXNOTRUN.BLI Edit: JBS1018
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module fixes up the screen data base if we are in NOTRUNCATE mode.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: John Sauter, CREATION DATE: November 1, 1983
!
! MODIFIED BY:
!
! 1-001	- Original.  This is a stub which always forces the data base to be rebuilt.
!	   JBS 01-Nov-1982
! 1-002	- Enable this routine.  JBS 02-Nov-1982
! 1-003	- Fix a problem in counting records.  JBS 09-Nov-1982
! 1-004 - Fix backwards search bug.  SMB 23-Nov-1982
! 1-005	- Worry about deleted lines when scanning backwards.  JBS 25-Nov-1982
! 1-006	- Revise handling of EDT$$G_SHF.  JBS 14-Dec-1982
! 1-007	- Fix tabbing at the end of a line.  JBS 15-Dec-1982
! 1-008	- Remove the edit buffer.  JBS 27-Dec-1982
! 1-009	- Fix a bug in finding the current screen pointer which caused excessive rebuilding.  JBS 30-Dec-1982
! 1-010	- Support EDT$$G_ANY_CHANGES.  JBS 05-Apr-1983
! 1-011	- Remove EDT$$G_ANY_CHANGES; this routine is only called if there have been changes.
!	   Also, allocate and deallocate lines in the screen data base in simple cases, to
!	   avoid some rebuilds of the screen data base.  JBS 19-Apr-1983
! 1-012	- Don't recompute the length of a deleted line.  JBS 23-May-1983
! 1-013	- When reclaiming a deleted screen pointer, mark it no longer deleted.  JBS 25-May-1983
! 1-014	- Fix an error in edit 1-013.  JBS 26-May-1983
! 1-015	- Don't change an inserted line to a deleted line.  JBS 27-May-1983
! 1-016	- If we undelete the current line, adjust the record number of the current line.  JBS 03-Jun-1983
! 1-017	- Fix breaking a line at its wrap point.  JBS 23-Jun-1983
! 1-018	- Rather than failing if the screen data base is bad, just rebuild it.  JBS 22-Jul-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$FIX_NOTRUNC : NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$FIX_NOTRUNC - fix screen data base in NOTRUNCATE mode'

GLOBAL ROUTINE EDT$$FIX_NOTRUNC 		! Fix screen data base in NOTRUNCATE mode
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Fix the screen data base if we are in NOTRUNCATE mode.  If a character is
!	inserted on a line, or deleted from a line, or even replaced (since characters
!	have different widths), the limits of this line must be recomputed.  If this line's
!	limits change the limits of the next line may also change.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$A_LN_PTR
!	EDT$$T_LN_BUF
!	EDT$$A_CUR_SCRPTR
!	EDT$$A_FST_SCRPTR
!	EDT$$A_FST_AVLN
!	EDT$$L_CUR_SCRLN
!	EDT$$A_SCR_BUF
!	EDT$$A_CUR_BUF
!	EDT$$L_CS_LN
!	EDT$$L_CUR_SCRLN
!	EDT$$A_CSR_SCRPTR
!	EDT$$A_WK_LN
!	EDT$$G_MEM_CNT
!	EDT$$G_SHF
!	EDT$$G_TI_WID
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_SCR_REBUILD
!	EDT$$A_FST_AVLN
!	EDT$$G_RECS_INSERTED
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	MANY
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$SC_MOVTOLN,		! Move to a record in the work file relative to the current record
	EDT$$FMT_CHWID,				! Compute the width of a character
	EDT$$SC_FNDREC;				! Find the screen pointer for the current record

    EXTERNAL
	EDT$$A_LN_PTR,				! Current line character position
	EDT$$T_LN_BUF,				! Current line buffer
	EDT$$G_SCR_REBUILD,			! Rebuild the screen data base
	EDT$$A_FST_SCRPTR : REF SCREEN_LINE,	! First screen line info address
	EDT$$A_FST_AVLN : REF SCREEN_LINE,	! List of available lines
	EDT$$L_LNO_EMPTY : REF LN_BLOCK,
	EDT$$L_CUR_SCRLN : REF LN_BLOCK,
	EDT$$A_SCR_BUF : REF TBCB_BLOCK,
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,
	EDT$$L_CS_LN : REF LN_BLOCK,
	EDT$$A_CSR_SCRPTR : REF SCREEN_LINE,
	EDT$$A_WK_LN : REF LIN_BLOCK,
	EDT$$G_MEM_CNT,
	EDT$$G_SHF,				! Number of columns shifted
	EDT$$G_TI_WID,				! Screen width
	EDT$$G_RECS_INSERTED;			! Count of records (lines) inserted and deleted.

    LOCAL
	SCRPTR : REF SCREEN_LINE,		! Address of a current screen line buffer
	NXT_SCRPTR : REF SCREEN_LINE,		! Address of next screen line buffer
	REC_NO,					! Current relative reocrd number
	FST_RECNO,			! Relative record number of first line in the screen data base
	UPDATE_DONE,
	ANOTHER_PASS,
	WIDTH,
	DISP,
	COL,
	LEFT,
	RIGHT,
	DIR,
	TXT,
	CHAR,
	LEN;

!+
! If we are already going to rebuild the screen data base, just return.
!-

    IF .EDT$$G_SCR_REBUILD THEN RETURN;

!+
! Compute the direction of motion.
!-

    IF (LINNOEQL (EDT$$L_LNO_EMPTY, EDT$$L_CUR_SCRLN)) OR (.EDT$$A_SCR_BUF NEQA .EDT$$A_CUR_BUF)
    THEN
	DIR = 1
    ELSE
	DIR = CMPLNO (EDT$$L_CS_LN, EDT$$L_CUR_SCRLN);

!+
! Find the relative record number of the old cursor line.
! We must be careful of deleted lines.  The convention is that a deleted line
! has the record number of the next lower line.  This prevents deleted
! lines before record zero from having negative absolute record numbers.
!-
    SCRPTR = EDT$$SC_FNDREC (.EDT$$A_LN_PTR - EDT$$T_LN_BUF, DISP);

    IF (.SCRPTR EQLA 0)
    THEN
	BEGIN
	EDT$$G_SCR_REBUILD = 1;
	RETURN;
	END;

    REC_NO = 0;

    CASE .DIR FROM -1 TO 1 OF
	SET

	[1] :
	    BEGIN
!+
! The new line is after the old.  We must move back in the work file.
!-

	    DO
		BEGIN

		IF ((.SCRPTR [SCR_LINE_IDX] EQL 0) OR ((.SCRPTR [SCR_EDIT_FLAGS] AND SCR_EDIT_DELLN) NEQ 0))
		THEN
		    BEGIN

		    LOCAL
			PREV_SCRPTR : REF SCREEN_LINE;

		    PREV_SCRPTR = .SCRPTR [SCR_PRV_LINE];

		    IF (.PREV_SCRPTR NEQA 0)
		    THEN
			BEGIN

			IF ((.PREV_SCRPTR [SCR_EDIT_FLAGS] AND SCR_EDIT_DELLN) EQL 0)
			THEN
			    REC_NO = .REC_NO - 1;

			END;

		    END;

		SCRPTR = .SCRPTR [SCR_PRV_LINE];
		END
	    UNTIL ((.SCRPTR EQLA .EDT$$A_CSR_SCRPTR) OR (.SCRPTR EQLA 0));

	    END;

	[0] :
	    BEGIN
!+
! We are positioned correctly in the work file.
!-
	    SCRPTR = .EDT$$A_CSR_SCRPTR;
	    END;

	[-1] :
	    BEGIN
!+
! The new line is before the old.  We must move forward in the work file.
!-

	    DO
		BEGIN

		LOCAL
		    NEXT_SCRPTR : REF SCREEN_LINE;

		NEXT_SCRPTR = .SCRPTR [SCR_NXT_LINE];

		IF (.NEXT_SCRPTR NEQA 0)
		THEN
		    BEGIN

		    IF (((.SCRPTR [SCR_EDIT_FLAGS] AND SCR_EDIT_DELLN) EQL 0) AND 	!
			((.NEXT_SCRPTR [SCR_LINE_IDX] EQL 0) OR 	!
			((.NEXT_SCRPTR [SCR_EDIT_FLAGS] AND SCR_EDIT_DELLN) NEQ 0)))
		    THEN
			REC_NO = .REC_NO + 1;

		    END;

		SCRPTR = .SCRPTR [SCR_NXT_LINE];
		END
	    UNTIL ((.SCRPTR EQLA .EDT$$A_CSR_SCRPTR) OR (.SCRPTR EQLA 0));

	    END;

	[OUTRANGE] :
	    ASSERT (0);
	TES;

!+
! If we couldn't find it, rebuild the screen data base.
!-

    IF (.SCRPTR NEQA .EDT$$A_CSR_SCRPTR)
    THEN
	BEGIN
	EDT$$G_SCR_REBUILD = 1;
	RETURN;
	END;

!+
! Now work backwards to the first line.
!-

    WHILE ((.SCRPTR NEQA .EDT$$A_FST_SCRPTR) AND (.SCRPTR NEQA 0)) DO
	BEGIN

	IF ((.SCRPTR [SCR_LINE_IDX] EQL 0) OR ((.SCRPTR [SCR_EDIT_FLAGS] AND SCR_EDIT_DELLN) NEQ 0))
	THEN
	    BEGIN

	    LOCAL
		PREV_SCRPTR : REF SCREEN_LINE;

	    PREV_SCRPTR = .SCRPTR [SCR_PRV_LINE];

	    IF (.PREV_SCRPTR NEQA 0)
	    THEN
		BEGIN

		IF ((.PREV_SCRPTR [SCR_EDIT_FLAGS] AND SCR_EDIT_DELLN) EQL 0) THEN REC_NO = .REC_NO - 1;

		END;

	    END;

	SCRPTR = .SCRPTR [SCR_PRV_LINE];
	END;

    FST_RECNO = .REC_NO;
!+
! If we didn't find it, rebuild the screen data base.
!-

    IF (.SCRPTR NEQA .EDT$$A_FST_SCRPTR)
    THEN
	BEGIN
	EDT$$G_SCR_REBUILD = 1;
	RETURN;
	END;

!+
! Recompute the end points of any lines which have changed.
!-

    DO
	BEGIN
	ANOTHER_PASS = 0;
	REC_NO = .FST_RECNO;
	SCRPTR = .EDT$$A_FST_SCRPTR;

	DO
	    BEGIN
	    UPDATE_DONE = 0;

	    IF (((.SCRPTR [SCR_EDIT_FLAGS] AND (SCR_EDIT_MODIFY OR SCR_EDIT_INSLN)) NEQ 0) AND 	!
		((.SCRPTR [SCR_EDIT_FLAGS] AND SCR_EDIT_DELLN) EQL 0))
	    THEN
		BEGIN
!+
! Compute the width of the current line.
!-
		LEFT = .SCRPTR [SCR_CHR_FROM];

		IF (.LEFT EQL 0)
		THEN
		    BEGIN
		    WIDTH = .EDT$$G_TI_WID + .EDT$$G_SHF;
		    COL = 0;
		    END
		ELSE
		    BEGIN
		    WIDTH = .EDT$$G_TI_WID + .EDT$$G_SHF;
		    COL = .EDT$$G_SHF + 2;
		    END;

!+
! We must compute the width of each character to see how many will fit.
!-

		IF ( NOT EDT$$SC_MOVTOLN (.REC_NO))
		THEN
		    BEGIN
!+
! Something appears to be wrong with the screen data base.  Rebuild it.
!-
		    EDT$$SC_MOVTOLN (0);
		    EDT$$G_SCR_REBUILD = 1;
		    RETURN;
		    END;

		LEN = .EDT$$A_WK_LN [LIN_LENGTH] - .LEFT;
		TXT = CH$PLUS (EDT$$A_WK_LN [LIN_TEXT], .LEFT);
		RIGHT = .LEFT - 1;
		CHAR = CH$RCHAR_A (TXT);

		WHILE ((.LEN GTR 0) AND ((.COL + EDT$$FMT_CHWID (.CHAR, .COL)) LEQ .WIDTH)) DO
		    BEGIN
		    LEN = .LEN - 1;
		    RIGHT = .RIGHT + 1;
		    COL = .COL + EDT$$FMT_CHWID (.CHAR, .COL);
		    CHAR = CH$RCHAR_A (TXT);
		    END;

		IF (.LEN EQL 0) THEN RIGHT = 255;

		IF (.SCRPTR [SCR_CHR_TO] NEQ .RIGHT)
		THEN
		    BEGIN
!+
! This line's width has changed.  Store the new width and
! arrange to recompute the width of the next line.
!-
		    SCRPTR [SCR_CHR_TO] = .RIGHT;

		    IF (.RIGHT NEQ 255)
		    THEN
			BEGIN

			LOCAL
			    NEED_NEW_SCRPTR;

			NEED_NEW_SCRPTR = 0;
			NXT_SCRPTR = .SCRPTR [SCR_NXT_LINE];

			IF (.NXT_SCRPTR EQLA 0)
			THEN
			    NEED_NEW_SCRPTR = 1
			ELSE

			    IF ((.NXT_SCRPTR [SCR_CHR_FROM] EQL 0) AND 	!
				((.NXT_SCRPTR [SCR_EDIT_FLAGS] AND SCR_EDIT_DELLN) EQL 0))
			    THEN
				NEED_NEW_SCRPTR = 1;

			IF .NEED_NEW_SCRPTR
			THEN
			    BEGIN
!+
! We need a new screen pointer.  If we can get one easily, do so.
! Otherwise rebuild the screen data base.
!-

			    LOCAL
				TMP_SCRPTR : REF SCREEN_LINE;

			    NXT_SCRPTR = .EDT$$A_FST_AVLN;

			    IF (.NXT_SCRPTR EQLA 0)
			    THEN
				BEGIN
				EDT$$SC_MOVTOLN (0);
				EDT$$G_SCR_REBUILD = 1;
				RETURN;
				END;

			    EDT$$G_MEM_CNT = .EDT$$G_MEM_CNT + 1;
			    EDT$$G_RECS_INSERTED = .EDT$$G_RECS_INSERTED + 1;
			    EDT$$A_FST_AVLN = .NXT_SCRPTR [SCR_NXT_LINE];
			    NXT_SCRPTR [SCR_PRV_LINE] = .SCRPTR;
			    TMP_SCRPTR = .SCRPTR [SCR_NXT_LINE];
			    NXT_SCRPTR [SCR_NXT_LINE] = .TMP_SCRPTR;
			    SCRPTR [SCR_NXT_LINE] = .NXT_SCRPTR;

			    IF (.TMP_SCRPTR NEQA 0) THEN TMP_SCRPTR [SCR_PRV_LINE] = .NXT_SCRPTR;

			    NXT_SCRPTR [SCR_EDIT_FLAGS] = SCR_EDIT_INSLN;
			    END;

			NXT_SCRPTR [SCR_LINE_IDX] = .SCRPTR [SCR_LINE_IDX] + 1;

			IF (.NXT_SCRPTR [SCR_LINE_IDX] EQL 0)
			THEN
			    BEGIN
			    EDT$$SC_MOVTOLN (0);
			    EDT$$G_SCR_REBUILD = 1;
			    RETURN;
			    END;

!+
! If we are undeleting the current line, adjust the record number of the current line.
!-

			IF (((.NXT_SCRPTR [SCR_EDIT_FLAGS] AND SCR_EDIT_DELLN) NEQ 0) AND 	!
			    (.NXT_SCRPTR EQLA .EDT$$A_CSR_SCRPTR))
			THEN
			    SUBLINE (NUMBER_ONE, EDT$$L_CUR_SCRLN);

			NXT_SCRPTR [SCR_CHR_FROM] = .RIGHT + 1;
			NXT_SCRPTR [SCR_CHR_TO] = 255;
			NXT_SCRPTR [SCR_EDIT_MINPOS] = 0;
			NXT_SCRPTR [SCR_EDIT_MAXPOS] = 255;
			NXT_SCRPTR [SCR_EDIT_FLAGS] = (.NXT_SCRPTR [SCR_EDIT_FLAGS] OR SCR_EDIT_MODIFY);
			NXT_SCRPTR [SCR_EDIT_FLAGS] = .NXT_SCRPTR [SCR_EDIT_FLAGS] AND ( NOT SCR_EDIT_DELLN);
			END
		    ELSE
			BEGIN
!+
! We have reached the end of the record, make sure there aren't any more lines allocated for it.
!-

			LOCAL
			    RECORD_DONE;

			DO
			    BEGIN
			    NXT_SCRPTR = .SCRPTR [SCR_NXT_LINE];

			    IF (.NXT_SCRPTR NEQA 0)
			    THEN
				BEGIN

				IF (.NXT_SCRPTR [SCR_CHR_FROM] NEQ 0)
				THEN
				    BEGIN
!+
! If the next line is marked as insert, then we have a strange state: the line
! was apparently inserted long and then truncated before we had a chance to
! update the screen.  Rather than trying to handle this case correctly just
! rebuild the screen data base.
!-

				    IF ((.NXT_SCRPTR [SCR_EDIT_FLAGS] AND SCR_EDIT_INSLN) NEQ 0)
				    THEN
					BEGIN
					EDT$$SC_MOVTOLN (0);
					EDT$$G_SCR_REBUILD = 1;
					RETURN;
					END;

!+
! Mark this as an independent, deleted line.  The block will be discarded by the time
! the screen updater completes.
!-
				    NXT_SCRPTR [SCR_EDIT_FLAGS] = SCR_EDIT_DELLN;
				    NXT_SCRPTR [SCR_LINE_IDX] = 0;
				    NXT_SCRPTR [SCR_CHR_FROM] = 0;
				    NXT_SCRPTR [SCR_CHR_TO] = 255;
!+
! Since a deleted line has the number of the next following non-deleted line,
! if we are deleting the current line add one to its line number.
!-

				    IF (.NXT_SCRPTR EQLA .EDT$$A_CSR_SCRPTR)	!
				    THEN
					ADDLINE (NUMBER_ONE, EDT$$L_CUR_SCRLN);

				    EDT$$G_RECS_INSERTED = .EDT$$G_RECS_INSERTED + 1;
				    SCRPTR = .NXT_SCRPTR;
				    RECORD_DONE = 0;
				    END
				ELSE
				    RECORD_DONE = 1;

				END
			    ELSE
				RECORD_DONE = 1;

			    END
			UNTIL .RECORD_DONE;

			END;

		    END;

		END;

	    IF ( NOT .UPDATE_DONE)
	    THEN
		BEGIN

		IF (.SCRPTR [SCR_NXT_LINE] EQLA 0)
		THEN
		    UPDATE_DONE = 1
		ELSE
		    BEGIN

		    LOCAL
			NEXT_SCRPTR : REF SCREEN_LINE;

		    NEXT_SCRPTR = .SCRPTR [SCR_NXT_LINE];

		    IF (((.SCRPTR [SCR_EDIT_FLAGS] AND SCR_EDIT_DELLN) EQL 0) AND 	!
			((.NEXT_SCRPTR [SCR_LINE_IDX] EQL 0) OR 	!
			((.NEXT_SCRPTR [SCR_EDIT_FLAGS] AND SCR_EDIT_DELLN) NEQ 0)))
		    THEN
			REC_NO = .REC_NO + 1;

		    SCRPTR = .SCRPTR [SCR_NXT_LINE];
		    END;

		END;

	    END
	UNTIL .UPDATE_DONE;

	END
    UNTIL ( NOT .ANOTHER_PASS);

    EDT$$SC_MOVTOLN (0);
    END;					! of routine EDT$$FIX_NOTRUNC

!<BLF/PAGE>

END						! of module EDT$FIXNOTRUN

ELUDOM
