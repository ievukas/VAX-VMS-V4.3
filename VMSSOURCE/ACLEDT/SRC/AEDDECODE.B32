MODULE AED$DECODE (
		  LANGUAGE (BLISS32),
		  IDENT = 'V04-000'
		  ) =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	Miscellaneous utilities
!
! ABSTRACT:
!
!	This module contains the routines necessary to read the action
!	definition file and decode the users input based upon the action
!	definitions.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, user mode utilities.
!
!--
!
!
! AUTHOR:	L. Mark Pilant		CREATION DATE:	15-Sep-1982  15:30
!
! MODIFIED BY:
!
!	V03-005	LMP0213		L. Mark Pilant,		24-Mar-1984  12:23
!		Add support for locking and unlocking the object's ACL.
!
!	V03-004	LMP0193		L. Mark Pilant,		14-Feb-1984  10:04
!		Add support for additional edition actions: delete BOL,
!		session reset, and quit session.
!
!	V03-003	LMP0172		L. Mark Pilant,		28-Nov-1983  12:11
!		Numerous bug fixes, support for VT2xx terminals, and a
!		session keystroke logger.
!
!	V03-002	LMP0142		L. Mark Pilant,		24-Aug-1983  3:17
!		Change references to ACLEDIT$INI to be ACLEDIT$INIT.
!
!	V03-001	LMP0103		L. Mark Pilant,		21-Apr-1983  12:44
!		Add support for HIDDEN and PROTECTED ACEs.
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';
LIBRARY 'SYS$LIBRARY:TPAMAC.L32';
REQUIRE 'SRC$:ACLEDTDEF';

FORWARD ROUTINE
	AED_GETKEYINI,				! Check for & read definition file
	AED_DECODEKEY,				! Decode input given definitions
	AED_FLUSHKEY,				! Flush session buffer & close file

! TPARSE action routine.

	SET_RUBOUT,				! Set rubout as the string definition
	SET_DEFINITION;				! Define a key

EXTERNAL ROUTINE
	AED_FILERROR	: NOVALUE,		! RMS file error reporting
	AED_PUTOUTPUT,				! General purpose output routine
	AED_SET_CURSOR;				! Set cursor position & remember

EXTERNAL
	KEY_TABLE	: $BBLOCK [8];		! Key definition table listhead

! Storage for TPARSE usage.

OWN
	KEY_BLOCK	: $BBLOCK [KEY_C_LENGTH],	! Key definition block
	KEY_STRING	: $BBLOCK [DSC$C_S_BLN];	! Key string descriptor

BIND
	KEY_ACTION	= KEY_BLOCK[KEY_B_ACTION] : BYTE,	! Action code
	KEY_FLAGS	= KEY_BLOCK[KEY_B_FLAGS] : BYTE;	! Needed flags

! TPARSE state tables to parse the action definition file.

$INIT_STATE	(KEYDEF_STATE, KEYDEF_KEY);

$STATE	(SWALLOW_1,
	(TPA$_BLANK,SWALLOW_1),
	('DEFINE')
	);

$STATE	(SWALLOW_2,
	(TPA$_BLANK,SWALLOW_2),
	('GOLD',,,KEY_C_GOLD,KEY_ACTION),
	('HELP',,,KEY_C_HELP,KEY_ACTION),
	('HELP_FORMAT',,,KEY_C_HELPFMT,KEY_ACTION),
	('LOCATE_STRING',,,KEY_C_FIND_STR,KEY_ACTION),
	('LOCATE_NEXT',,,KEY_C_FIND_NXT,KEY_ACTION),
	('DELETE_ACE',,,KEY_C_DEL_ACE,KEY_ACTION),
	('UNDELETE_ACE',,,KEY_C_UNDEL_ACE,KEY_ACTION),
	('SELECT_FIELD',,,KEY_C_SEL_FIELD,KEY_ACTION),
	('ADVANCE_FIELD',,,KEY_C_ADV_FIELD,KEY_ACTION),
	('DELETE_WORD',,,KEY_C_DEL_WRD,KEY_ACTION),
	('UNDELETE_WORD',,,KEY_C_UNDEL_WRD,KEY_ACTION),
	('ADVANCE_POSITION',,,KEY_C_ADVANCE,KEY_ACTION),
	('BACKUP_POSITION',,,KEY_C_BACKUP,KEY_ACTION),
	('DELETE_CHARACTER',,,KEY_C_DEL_CHR,KEY_ACTION),
	('UNDELETE_CHARACTER',,,KEY_C_UNDEL_CHR,KEY_ACTION),
	('MOVE_WORD',,,KEY_C_MOVE_WRD,KEY_ACTION),
	('MOVE_ACE',,,KEY_C_MOVE_ACE,KEY_ACTION),
	('MOVE_EOL',,,KEY_C_MOVE_EOL,KEY_ACTION),
	('DELETE_EOL',,,KEY_C_DEL_EOL,KEY_ACTION),
	('INSERT_ACE',,,KEY_C_INSERT,KEY_ACTION),
	('SELECT_ITEM',,,KEY_C_SEL_ITEM,KEY_ACTION),
	('ENTER_ACE',,,KEY_C_ENTER,KEY_ACTION),
	('PREVIOUS_SCREEN',,,KEY_C_PREV_SCREEN,KEY_ACTION),
	('NEXT_SCREEN',,,KEY_C_NEXT_SCREEN,KEY_ACTION),
	('UP_ARROW',,,KEY_C_UP,KEY_ACTION),
	('DOWN_ARROW',,,KEY_C_DOWN,KEY_ACTION),
	('RIGHT_ARROW',,,KEY_C_RIGHT,KEY_ACTION),
	('LEFT_ARROW',,,KEY_C_LEFT,KEY_ACTION),
	('INSERT_OVERSTRIKE',,,KEY_C_OVERSTRIKE,KEY_ACTION),
	('MOVE_BOL',,,KEY_C_MOVE_BOL,KEY_ACTION),
	('RUBOUT_WORD',,,KEY_C_RUB_WRD,KEY_ACTION),
	('SCREEN_REFRESH',,,KEY_C_REFRESH,KEY_ACTION),
	('SESSION_RESET',,,KEY_C_RESET,KEY_ACTION),
	('RUBOUT_BOL',,,KEY_C_RUB_BOL,KEY_ACTION),
	('UNDELETE_LINE',,,KEY_C_UNDEL_LIN,KEY_ACTION),
	('EXIT',,,KEY_C_EXIT,KEY_ACTION),
	('QUIT_SESSION',,,KEY_C_QUIT,KEY_ACTION),
	('RUBOUT_CHARACTER',,,KEY_C_RUB_CHR,KEY_ACTION)
	);

$STATE	(SWALLOW_3,
	(TPA$_BLANK,SWALLOW_3),
	('AS')
	);

$STATE	(KEY_DEFINE,
	(TPA$_BLANK,KEY_DEFINE),
	('GOLD',,,KEY_M_GOLDREQ,KEY_FLAGS),
	('CONTROL',GET_TEXT,,KEY_M_CTRLCHAR,KEY_FLAGS),
	('ESCAPE',GET_TEXT,,KEY_M_ESCSEQ,KEY_FLAGS),
	('CSI',GET_TEXT,,KEY_M_CSI,KEY_FLAGS),
	('SS3',GET_TEXT,,KEY_M_SS3,KEY_FLAGS),
	('RUBOUT',,SET_RUBOUT),
	(TPA$_EOS,TPA$_FAIL),
	);
$STATE	(CHECK_END,
	(TPA$_BLANK,CHECK_END),
	(',',KEY_DEFINE),
	('OR',KEY_DEFINE,SET_DEFINITION),
	(TPA$_EOS,TPA$_EXIT,SET_DEFINITION)
	);

$STATE	(GET_TEXT,
	(TPA$_BLANK,GET_TEXT),
	(',')
	);
$STATE	(SWALLOW_4,
	(TPA$_BLANK,SWALLOW_4),
	((GET_STRING),CHECK_END,,,KEY_STRING)
	);

$STATE	(GET_STRING,
	((CHECK_DELIM),GET_STRING),
	(TPA$_LAMBDA,TPA$_EXIT)
	);
$STATE	(CHECK_DELIM,
	(',',TPA$_FAIL),
	(' ',TPA$_FAIL),
	(TPA$_EOS,TPA$_FAIL),
	(TPA$_ANY,TPA$_EXIT)
	);

GLOBAL ROUTINE AED_GETKEYINI =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine attempts to open the action definition file pointed
!	to by the logical name ACLEDIT$INIT.  If the logical name does not
!	exist a success return is given.  If the logical name exists, but
!	the file it points to does not, a warning message is given, and a
!	success return is given.  If any errors occur while reading the
!	definition file, the appropriate error message is given.
!
! CALLING SEQUENCE:
!	AED_GETKEYINI ()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1 if successful, logical name does not exist, or file does not exist
!	error code otherwise
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

LOCAL
	KEYINI_FAB	: $FAB_DECL,		! Key definition file FAB
	KEYINI_RAB	: $RAB_DECL,		! Key definition file RAB
	KEYINI_NAM	: $NAM_DECL,		! Key definition file NAM block
	KEYINI_EXP_NAM	: $BBLOCK [NAM$C_MAXRSS],	! Expanded name storage
	KEYINI_RES_NAM	: $BBLOCK [NAM$C_MAXRSS],	! Resultant name storage
	DEFINE_LINE	: VECTOR [512,BYTE],	! Line from definition file
	TPARSE_BLOCK	: $BBLOCK [TPA$K_LENGTH0],	! Parser context block
	LINE_INDEX,				! Index into line read in
	LOCAL_STATUS;				! Local error status

! Initialize the necessary RMS data structures.

$FAB_INIT (FAB = KEYINI_FAB,
	   FAC = GET,
	   FNA = UPLIT ('ACLEDIT$INIT:'),
	   FNS = %CHARCOUNT ('ACLEDIT$INIT:'),
	   FOP = SQO,
	   NAM = KEYINI_NAM,
	   ORG = SEQ,
	   RFM = VAR);
$NAM_INIT (NAM = KEYINI_NAM,
	   ESA = KEYINI_EXP_NAM,
	   ESS = NAM$C_MAXRSS,
	   RSA = KEYINI_RES_NAM,
	   RSS = NAM$C_MAXRSS);
$RAB_INIT (RAB = KEYINI_RAB,
	   FAB = KEYINI_FAB,
	   RAC = SEQ);

! Open the action definition file.  If the open results in the RMS$_DEV error,
! it is assumed that the logical name does not exist, and success is returned.
! If the open results in the RMS$_FNF error, a warning message is issued, and
! success is returned.  Any other error results in the approprate error message
! being signaled, and the editing session terminated.

IF NOT $OPEN (FAB = KEYINI_FAB)
THEN
    BEGIN
    IF .KEYINI_FAB[FAB$L_STS] EQL RMS$_DEV THEN RETURN 1;
    AED_FILERROR (AED$_INIOPENIN, KEYINI_FAB, .KEYINI_FAB[FAB$L_STS],
					      .KEYINI_FAB[FAB$L_STV]);
    IF .KEYINI_FAB[FAB$L_STS] EQL RMS$_FNF THEN RETURN 1;
    RETURN .AED_L_WORSTERR;
    END;
IF NOT $CONNECT (RAB = KEYINI_RAB)
THEN
    BEGIN
    AED_FILERROR (AED$_INIOPENIN, KEYINI_FAB, .KEYINI_RAB[RAB$L_STS],
					      .KEYINI_RAB[RAB$L_STV]);
    RETURN .AED_L_WORSTERR;
    END;

! Loop reading the action definition file, replacing any default definition
! with those from the definition file.

WHILE 1
DO
    BEGIN
    KEYINI_RAB[RAB$L_UBF] = DEFINE_LINE;
    KEYINI_RAB[RAB$W_USZ] = 512;
    IF NOT $GET (RAB = KEYINI_RAB)
    THEN
	BEGIN
	IF .KEYINI_RAB[RAB$L_STS] EQL RMS$_EOF THEN EXITLOOP;
	AED_FILERROR (AED$_INIREADERR, KEYINI_FAB, .KEYINI_RAB[RAB$L_STS],
						   .KEYINI_RAB[RAB$L_STV]);
	RETURN .AED_L_WORSTERR;
	END;
    KEY_ACTION = 0;
    KEY_FLAGS = 0;
    KEY_STRING[DSC$W_LENGTH] = 0;

    IF .DEFINE_LINE[0] NEQ '!'
    THEN
	BEGIN
	LINE_INDEX = 0;
	UNTIL .LINE_INDEX GEQ .KEYINI_RAB[RAB$W_RSZ]
	DO
	    BEGIN
	    IF .DEFINE_LINE[.LINE_INDEX] EQL '<'
	    THEN
		BEGIN
		DO
		    BEGIN
		    LINE_INDEX = .LINE_INDEX + 1;
		    IF .DEFINE_LINE[.LINE_INDEX] EQL '>' THEN EXITLOOP;
		    IF .LINE_INDEX GEQ .KEYINI_RAB[RAB$W_RSZ]
		    THEN
			BEGIN
			SIGNAL (AED$_DEFSYNTAX, 2, .KEYINI_RAB[RAB$W_RSZ],
						   DEFINE_LINE);
			RETURN AED$_DEFSYNTAX;
			END;
		    END
		UNTIL .LINE_INDEX GEQ .KEYINI_RAB[RAB$W_RSZ];
		END;
	    IF .DEFINE_LINE[.LINE_INDEX] GEQ 'a'
	    AND .DEFINE_LINE[.LINE_INDEX] LEQ 'z'
	    THEN DEFINE_LINE[.LINE_INDEX] = .DEFINE_LINE[.LINE_INDEX] - 32;
	    LINE_INDEX = .LINE_INDEX + 1;
	    END;
	TPARSE_BLOCK[TPA$L_COUNT] = TPA$K_COUNT0;
	TPARSE_BLOCK[TPA$V_ABBREV] = 1;
	TPARSE_BLOCK[TPA$V_BLANKS] = 1;
	TPARSE_BLOCK[TPA$L_STRINGCNT] = .KEYINI_RAB[RAB$W_RSZ];
	TPARSE_BLOCK[TPA$L_STRINGPTR] = DEFINE_LINE;

	LOCAL_STATUS = LIB$TPARSE (TPARSE_BLOCK, KEYDEF_STATE, KEYDEF_KEY);
	IF NOT .LOCAL_STATUS
	THEN
	    BEGIN
	    SIGNAL (AED$_DEFSYNTAX, 2, .TPARSE_BLOCK[TPA$L_STRINGCNT],
				       .TPARSE_BLOCK[TPA$L_STRINGPTR]);
	    RETURN AED$_DEFSYNTAX;
	    END;
	END;
    END;

RETURN 1;

END;						! End of routine AED_GETKEYINI

ROUTINE SET_RUBOUT =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets up the string descriptor to point to a single
!	rubout character.
!
! CALLING SEQUENCE:
!	SET_RUBOUT ()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	KEY_STRING: descriptor to action defining string
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

KEY_STRING[DSC$W_LENGTH] = 1;
KEY_STRING[DSC$A_POINTER] = UPLIT BYTE (%CHAR (%X'7F'));

RETURN 1;

END;						! End of routine SET_RUBOUT

ROUTINE SET_DEFINITION =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine replaces a default definition with one from the
!	action definition file.
!
! CALLING SEQUENCE:
!	SET_DEFINITION ()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	KEY_ACTION: ACL editor action code
!	KEY_FLAGS: flags associated with the key definition
!	KEY_STRING: descriptor of the string that defines a key
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	The definition table is updated to reflect the new key definition.
!
!--

BEGIN

LITERAL
	CHAR_CSI	= %X'9B',		! C1 CSI character
	CHAR_CSI_1	= %X'1B',		! C0 CSI
	CHAR_CSI_2	= %X'5B',		!    equivalent
	CHAR_SS3	= %X'8F',		! C1 SS3 character
	CHAR_SS3_1	= %X'1B',		! C0 SS3
	CHAR_SS3_2	= %X'4F';		!    equivalent

LOCAL
	LOCAL_STATUS,				! Local error status
	NEW_KEY		: REF $BBLOCK,		! Address of new definition storage
	NEXT_DEF	: REF $BBLOCK,		! Address of next key definition
	KEY_INSERTED,				! Flag to indicate key inserted
	TERM_OFFSET;				! Size of overhead sequence

! Check for angle bracket delimiters.  If present, there must be a matched pair.

IF .KEY_STRING[DSC$W_LENGTH] GTR 1
THEN
    BEGIN
    IF .VECTOR[.KEY_STRING[DSC$A_POINTER], 0; ,BYTE] EQL '<'
    THEN
	BEGIN
	KEY_STRING[DSC$A_POINTER] = .KEY_STRING[DSC$A_POINTER] + 1;
	KEY_STRING[DSC$W_LENGTH] = .KEY_STRING[DSC$W_LENGTH] - 2;
	IF .VECTOR[.KEY_STRING[DSC$A_POINTER], .KEY_STRING[DSC$W_LENGTH]; ,BYTE] NEQ '>'
	THEN RETURN 0;
	END;
    END;

! Check for conflicting type definitions.

IF (.KEY_BLOCK[KEY_V_CTRLCHAR] AND .KEY_BLOCK[KEY_V_ESCSEQ])
OR (.KEY_BLOCK[KEY_V_CTRLCHAR] AND .KEY_STRING[DSC$W_LENGTH] NEQ 1)
THEN RETURN 0;

! If this is a C1 type definition, loop twice (once for the C1 definition
! and once for the C0 equivalent definition).  Otherwise, only go through
! once.

INCR J FROM 1 TO (IF .KEY_BLOCK[KEY_V_CSI] OR .KEY_BLOCK[KEY_V_SS3]
		  THEN 2 ELSE 1)
DO
    BEGIN

! Determine the size of the overhead area.

    TERM_OFFSET = (IF .KEY_BLOCK[KEY_V_CSI] OR .KEY_BLOCK[KEY_V_SS3]
		   THEN .J
		   ELSE IF .KEY_BLOCK[KEY_V_ESCSEQ]
			THEN 1
			ELSE 0);

! Allocate storage for the key definition block.

    AED_L_WORSTERR = ALLOCATE (.KEY_STRING[DSC$W_LENGTH] + KEY_C_LENGTH +
							 + .TERM_OFFSET, NEW_KEY);
    IF NOT .AED_L_WORSTERR THEN RETURN 0;

! Save the needed information in the key definition block.

    NEW_KEY[KEY_B_ACTION] = .KEY_ACTION;
    NEW_KEY[KEY_B_SIZE] = .KEY_STRING[DSC$W_LENGTH] + .TERM_OFFSET;
    NEW_KEY[KEY_B_FLAGS] = .KEY_FLAGS OR KEY_M_USERDEF;

! Set up the overhead area for the key text definition.

    IF .KEY_BLOCK[KEY_V_CSI] OR .KEY_BLOCK[KEY_V_SS3]
    THEN
	BEGIN
	IF .J EQL 1
	THEN NEW_KEY[KEY_T_TEXT] = (IF .KEY_BLOCK[KEY_V_CSI]
				    THEN CHAR_CSI ELSE CHAR_SS3)
	ELSE
	    BEGIN
	    NEW_KEY[KEY_T_TEXT] = (IF .KEY_BLOCK[KEY_V_CSI]
				   THEN CHAR_CSI_1 ELSE CHAR_SS3_1);
	    (NEW_KEY[KEY_T_TEXT]) + 1 = (IF .KEY_BLOCK[KEY_V_CSI]
					 THEN CHAR_CSI_2 ELSE CHAR_SS3_2);
	    END;
	END
    ELSE IF .KEY_BLOCK[KEY_V_ESCSEQ]
	 THEN NEW_KEY[KEY_T_TEXT] = %X'1B'
	 ELSE IF .KEY_BLOCK[KEY_V_CTRLCHAR]
	      THEN .KEY_STRING[DSC$A_POINTER] = ..KEY_STRING[DSC$A_POINTER] - %X'40';

! Move over the key definition text.

    CH$MOVE (.KEY_STRING[DSC$W_LENGTH], .KEY_STRING[DSC$A_POINTER],
	     NEW_KEY[KEY_T_TEXT] + .TERM_OFFSET);

! Check for and remove any default definitions that this new definition
! replaces.

    NEXT_DEF = .KEY_TABLE[KEY_L_FLINK];
    KEY_INSERTED = 0;
    UNTIL .NEXT_DEF EQLA KEY_TABLE[KEY_L_FLINK]
    DO
	BEGIN
	IF .NEXT_DEF[KEY_B_ACTION] EQL .KEY_ACTION
	THEN
	    BEGIN
	    IF .KEY_INSERTED EQL 0
	    THEN
		BEGIN
		INSQUE (NEW_KEY[KEY_L_FLINK], NEXT_DEF[KEY_L_FLINK]);
		KEY_INSERTED = 1;
		END;
	    IF NOT .NEXT_DEF[KEY_V_USERDEF]
	    THEN
		BEGIN
		NEW_KEY = .NEXT_DEF[KEY_L_BLINK];
		REMQUE (NEXT_DEF[KEY_L_FLINK], KEY_INSERTED);
		NEXT_DEF = .NEW_KEY;
		END;
	    END;
	NEXT_DEF = .NEXT_DEF[KEY_L_FLINK];
	END;					! End of C1 loop
    END;
KEY_FLAGS = 0;
RETURN 1;

END;						! End of routine SET_DEFINITION

GLOBAL ROUTINE AED_DECODEKEY =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine accepts input from the input channel and decodes it
!	according to the definitions from the action definition file (or
!	the default definitions).
!
! CALLING SEQUENCE:
!	AED_DECODEKEY ()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	0 if a fatal error occurs,
!	Action code value if special (AED_V_ACTION also set)
!	ASCII character value
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

MACRO
	TERM_CHAR	= AED_W_IOSB[2] %,
	TERM_SIZE	= AED_W_IOSB[3] %,
	TERM_STRING	= INPUT_BUFFER[.AED_W_IOSB[1]] %;

LABEL
	DECODE_KEY;

LOCAL
	LOCAL_STATUS,				! Local routine return status
	INPUT_BUFFER	: VECTOR [10,BYTE],	! Storage for input characters
	TERM_DESC	: $BBLOCK [DSC$C_S_BLN],	! Term table descr
	TERM_TABLE	: VECTOR [8]		! Terminator table
			  INITIAL (REP 8 OF (-1)),	! All are terminators
	NEXT_DEF	: REF $BBLOCK,		! Address of next key definition
	KEY_WITHOUT_GLD	: REF $BBLOCK,		! Address of key definition without gold required
	RETURN_CHAR;				! Character/code to return

! If this is a recovery, get a word (16 bits) from the recovery record.  This
! contains a character if the high byte is zero, or an editor action if not.

IF .AED_B_OPTIONS[AED_V_RECOVER]
THEN
    BEGIN
    IF .RECOVER_RAB[RAB$W_RSZ] LEQ 0
    THEN
	BEGIN
	IF NOT (LOCAL_STATUS = $GET (RAB = RECOVER_RAB))
	THEN
	    BEGIN
	    IF .LOCAL_STATUS NEQ RMS$_EOF
	    THEN
		BEGIN
		AED_FILERROR (AED$_RECREADERR, RECOVER_FAB,
			      .RECOVER_RAB[RAB$L_STS], .RECOVER_RAB[RAB$L_STV]);
		AED_B_OPTIONS[AED_V_RECOVER] = 0;
		END;
	    $CLOSE (FAB = RECOVER_FAB);
	    AED_B_OPTIONS[AED_V_RECOVER] = 0;
	    RETURN 1;
	    END;
	RECOVER_INDEX = 0;
	END;
    RETURN_CHAR = .RECOVER_BUFFER[.RECOVER_INDEX];
    RECOVER_INDEX = .RECOVER_INDEX + 1;
    AED_L_FLAGS[AED_V_ACTIONKEY] = .RECOVER_BUFFER[.RECOVER_INDEX];
    RECOVER_INDEX = .RECOVER_INDEX + 1;
    RECOVER_RAB[RAB$W_RSZ] = .RECOVER_RAB[RAB$W_RSZ] - 2;
    END
ELSE

! Get a character typed (or escape sequence) by the user.

DECODE_KEY: BEGIN
    TERM_DESC[DSC$W_LENGTH] = 8*4;
    TERM_DESC[DSC$A_POINTER] = TERM_TABLE;
    AED_L_STATUS = $QIOW (CHAN = .AED_W_TERMIN,	! Get character
			  FUNC = IO$_READVBLK OR IO$M_ESCAPE
					      OR IO$M_NOFILTR
					      OR IO$M_TRMNOECHO,
			  IOSB = AED_W_IOSB,
			  P1 = INPUT_BUFFER,
			  P2 = 10,
			  P4 = TERM_DESC);
    IF .AED_L_STATUS THEN AED_L_STATUS = .AED_W_IOSB[0];
    IF NOT .AED_L_STATUS
    THEN
	BEGIN
	IF .AED_L_STATUS EQL SS$_BADESCAPE
	THEN
	    BEGIN
	    AED_L_STATUS = 1;
	    RETURN_CHAR = AED_C_CHAR_ESC;
	    LEAVE DECODE_KEY;
	    END;
	SIGNAL (.AED_L_STATUS);
	RETURN 0;
	END;

! If the character is nothing special, simply return with the character.

    AED_L_FLAGS[AED_V_ACTIONKEY] = 0;
    IF .TERM_CHAR GEQ ' ' AND .TERM_CHAR NEQ %X'7F'
    THEN
	BEGIN
	RETURN_CHAR = .TERM_CHAR;
	LEAVE DECODE_KEY;
	END;

! Otherwise, it will be necessary to search the action definition table to
! determine whether or not the character (or characters) defines an ACL
! editor action.

    KEY_WITHOUT_GLD = 0;
    NEXT_DEF = .KEY_TABLE[KEY_L_FLINK];
    UNTIL .NEXT_DEF EQLA KEY_TABLE[KEY_L_FLINK]
    DO
	BEGIN
	IF CH$EQL (.NEXT_DEF[KEY_B_SIZE], NEXT_DEF[KEY_T_TEXT],
		   .TERM_SIZE, TERM_STRING, 0)
	THEN
	    BEGIN
	    IF .NEXT_DEF[KEY_V_GOLDREQ] EQL .AED_L_FLAGS[AED_V_GOLDKEY]
	    THEN
		BEGIN
		AED_L_FLAGS[AED_V_ACTIONKEY] = 1;
		RETURN_CHAR = .NEXT_DEF[KEY_B_ACTION];
		LEAVE DECODE_KEY;
		END;
	    IF NOT .NEXT_DEF[KEY_V_GOLDREQ] THEN KEY_WITHOUT_GLD = .NEXT_DEF;
	    END;
	NEXT_DEF = .NEXT_DEF[KEY_L_FLINK];
	END;

! Nothing has been found in the definition table.  Check to see if there
! was a key defined except that the gold key was hit but not required.
! If this is the case, clear the GOLDKEY flag and return the appropriate
! action code.  Otherwise simply return the terminating character.

    IF .KEY_WITHOUT_GLD NEQ 0
    THEN
	BEGIN
	AED_L_FLAGS[AED_V_GOLDKEY] = 0;
	AED_L_FLAGS[AED_V_ACTIONKEY] = 1;
	RETURN_CHAR =  .KEY_WITHOUT_GLD[KEY_B_ACTION];
	LEAVE DECODE_KEY;
	END;
    RETURN_CHAR = .TERM_CHAR;
    END;					! End of DECODE_KEY block

! If the action cannot be logged (EXIT or QUIT), simply return now.

IF .AED_L_FLAGS[AED_V_ACTIONKEY]
AND (.RETURN_CHAR EQL KEY_C_EXIT OR .RETURN_CHAR EQL KEY_C_QUIT)
THEN RETURN .RETURN_CHAR;

! If necessary, put the character or code into the journal buffer.  If
! the buffer fills up, write it out.

IF .AED_B_OPTIONS[AED_V_JOURNAL]
THEN
    BEGIN
    IF .JOURNAL_INDEX GEQ 10
    THEN
	BEGIN	
	IF NOT $PUT (RAB = JOURNAL_RAB) THEN AED_B_OPTIONS[AED_V_JOURNAL] = 0;
	CH$FILL (0, 10, JOURNAL_BUFFER);
	JOURNAL_INDEX = 0;
	END;
    JOURNAL_BUFFER[.JOURNAL_INDEX] = .RETURN_CHAR;
    JOURNAL_INDEX = .JOURNAL_INDEX + 1;
    IF .AED_L_FLAGS[AED_V_ACTIONKEY]
    THEN JOURNAL_BUFFER[.JOURNAL_INDEX] = 1
    ELSE JOURNAL_BUFFER[.JOURNAL_INDEX] = 0;
    JOURNAL_INDEX = .JOURNAL_INDEX + 1;
    END;

RETURN .RETURN_CHAR;

END;						! End of routine AED_DECODEKEY

GLOBAL ROUTINE AED_FLUSHKEY =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine flushes the journal buffer and closes the journal file.
!
! CALLING SEQUENCE:
!	AED_FLUSHKEY ()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	OWN storage
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

! If not writing a journal file, simply return now.

IF NOT .AED_B_OPTIONS[AED_V_JOURNAL] THEN RETURN 1;

IF .JOURNAL_INDEX GTR 0
THEN
    BEGIN
    JOURNAL_RAB[RAB$W_RSZ] = .JOURNAL_INDEX * 2;
    $PUT (RAB = JOURNAL_RAB);
    END;

JOURNAL_FAB[FAB$V_DLT] = NOT .AED_B_OPTIONS[AED_V_KEEPJNL];
$CLOSE (FAB = JOURNAL_FAB);

RETURN 1;

END;						! End of routine AED_FLUSHKEY

END
ELUDOM
