	.TITLE	TTYDRVDAT - Terminal driver data base module
	.IDENT	'V04-001'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY:
;
;	VAX/VMS TERMINAL DRIVER
;
; ABSTRACT:
;
;	TERMINAL DRIVER DATA BASE
;
; AUTHOR:
;
;	R.HEINEN 14-JUN-1977
;
; Enhancement Revision history:
;
;	V04-001	MIR1100		Michael I. Rosenblum	7-Sep-1984
;		The multinational set in the Type table did not conform
;		to that specified in the VT200 series terminals.
;		This was fixed.
;
;	V03-022	LMP0275		L. Mark Pilant,		12-Jul-1984  21:03
;		Initialize the ACL info in the ORB to be a null descriptor
;		list rather than an empty queue.  This avoids the overhead
;		of locking and unlocking the ACL mutex, only to find out
;		that the ACL was empty.
;
;	V03-021	MIR0450		Michael I. Rosenblum		27-Jun-1984
;		Make the read verify array correspond with that in FMS and
;		TDMS as far as multinational is concerned.
;
;	V03-020 EMD0098		Ellen M. Dusseault	14-May-1984
;		Add dev$m_nnm characteristic to DEVCHAR2 so that these
;		devices will have the "node$" prefix.
;
;	V03-019	LMP0221		L. Mark Pilant,		7-Apr-1984  13:38
;		Change UCB$L_OWNUIC to ORB$L_OWNER and UCB$W_VPROT to
;		ORB$W_PROT.
;
;	V03-018 RKS0018		RICK SPITZ			05-MAR-1984
;		Do not set template bit it VTA0 UCB to prevent 
;		assign from creating new UCBs when it is referenced.
;
;	V03-017	MIR0310		Michael I. Rosenblum		09-Feb-1984
;		Put a turn off attributes sequence in the DECcrt commands
;		To allow terminals that don't correctly handle Save and
;		Restore to be able to use the new strings.
;
;	V03-016	MIR0300		Michael I. Rosenblum		30-Jan-1984
;		add input fallback table to tables
;		remove recall key.
;
;	V03-015	MIR0080		Michael I. Rosenblum		15-Jul-1983
;		Restructure module and add 8bit support to read verify
;		table.
;
;	V03-014	MIR0051		Michael I. Rosenblum		23-Jun-1983
;		Change defalut lk201 key definitions.
;		Make fallback table smaller and remove the multi character
;		expansions.  Move fallback table into terminal driver generic
;		tables.
;
;	V03-013	RKS0013		RICK SPITZ			4-JUN-1983
;		Add support for detached terminal template UCB
;
;	V03-012	JLV0256		Jake VanNoy			23-MAY-1983
;		Add extra pointers to allow table-driven multiecho.
;
;	V03-011	MIR0049		Michael I. Rosenblum		06-May-1983
;		Add fallback presentation table macro.
;
;	V03-010	MIR0030		Michael I. Rosenblum		30-Mar-1983
;		Add Verification array for read verification.   Add eight
;		bit support and common escape escape seqeunce optomization
;		tables.  Also change messages for the echoing control characters
;		to reflect the new lk201 definitions, add dec crt messages
;		and regis messages.  Put in alternate echo string support.
;
;
;	V03-009	MIR0029		Michael I. Rosenblum		21-Mar-1983
;		Add code to handle overstrike mode and non-termination
;		on unusual terminators.
;
;	V03-008	MIR4026		Michael I. Rosenblum		09-Mar-1983
;		Remove character input restriction from the TAB key.
;
;	V03-007	MIR0026		Michael I. Rosenblum		15-Feb-1983
;		Add data to handle the new type of reads.  This includes
;		enhancements to the input character dispatcher.
;
;	V03-006	MIR0017		Michael I. Rosenblum		05-Jan-1983
;		Add CLASS_POWERFAIL entry point.
;
;	V03-005	MIR0015		Michael I. Rosenblum		20-Dec-1982
;		Add CLASS_FORK and CLASS_DISCONNECT class entry points.
;
;	V03-004 MIR0013		Michael I. Rosenblum		16-Dec-1982
;		Fix up refferences to new ucb structure
;
;	V03-003	MIR0011		Michael I. Rosenblum		18-Nov-1982
;		Change all strings to be counted strings.
;		Remove all strings for holdscreen.
;		Add TTY$A_ANSI_DEOL which contains the ANSI escape sequence
;		that will go to the beginning of the line and clear to the end
;		of the line.
;
;	V03-002	KDM0002		Kathleen D. Morse	28-Jun-1982
;		Added $DYNDEF.
;
;--

	.SBTTL	Declarations

;
; EXTERNAL DEFINITIONS
;
	$DDBDEF				; DEFINE DDB OFFSETS
	$DYNDEF				; DEFINE DYNAMIC DATA STRUCTURE TYPES
	$IODEF				; DEFINE I/O FUNCTION CODES
	$ORBDEF				; DEFINE OBJECT'S RIGHTS BLOCK OFFSETS
	$TTYDEF				; DEFINE TERMINAL DRIVER SYMBOLS
	$TTDEF				; DEFINE TERMINAL CHARACTERISTICS
	$UCBDEF				; DEFINE UCB
	$VECDEF				; DEFINE VECTOR FOR CRB
	$TTYDEFS			; DEFINE TERMINAL DEFINITIONS
	.PSECT	$$$115_DRIVER,LONG

	.sbttl	autobaud tables

TTY$AB_9600::				; Table for samples taken at 9600

	.BYTE	^X7F,TT$C_BAUD_19200
	.BYTE	^X7A,TT$C_BAUD_19200
	.BYTE	^X72,TT$C_BAUD_19200
	.BYTE	^X7E,TT$C_BAUD_19200
	.BYTE	^X0D,TT$C_BAUD_9600
	.BYTE	^X66,TT$C_BAUD_4800
	.BYTE	^X0C,TT$C_BAUD_3600
	.BYTE	^X78,TT$C_BAUD_2400
	.BYTE	^X70,TT$C_BAUD_1800
	.BYTE	^X00,TT$C_BAUD_1200
	.BYTE	-1,-1			; End of list
	.BLKB	16			; Patch space

TTY$AB_600::				; Table for samples taken at 600

	.BYTE	^X7E,TT$C_BAUD_1200
	.BYTE	^X72,TT$C_BAUD_1200
	.BYTE	^X0D,TT$C_BAUD_600
	.BYTE	^X66,TT$C_BAUD_300
	.BYTE	^X78,TT$C_BAUD_150
	.BYTE	^X60,TT$C_BAUD_110
	.BYTE	^X70,TT$C_BAUD_110
	.BYTE	-1,-1			; End of list
	.BLKB	16			; Patch space


	.SBTTL	CHARACTER DISPATCH TABLE - MACROS 
;++
; $DISINI
;
; DESCRIPTION:
;	SETS UP A 256 BYTE TABLE TO ALLOW A QUICK DISPATCH ON INPUT CHARACTERS
;
; INPUTS:
;	NONE
;--

	.MACRO	$DISINI
$$$=.
.REPEAT	32
	.BYTE	TTY$K_ET_UNUSED
.ENDR
	.BLKB	256-32
$$$$=.
	.ENDM	$DISINI

;++
; $DIS
;
; DESCRIPTION:
;	GIVEN A LIST OF CHARACTERS WILL FILL EACH OF THEIR BYTES WITH 
; THE CHARACTER DISPATCH TOKEN THAT THIS CHARACTER TRANSLATES TO.
;
; INPUTS:
;	CHARLIST = A LIST OF CHARACTERS TO FILL WITH THIS TOKEN
;	TOKEN = THE TOKEN CHARACTER.  ONE OF THE FOLLOWING:
;			1	CONTROL-U
;			2	CONTROL-R
;			3	DEL
;			4	ESCAPE CHARACTER
;			5	BACKWARD 1 CHAR
;			6	FORWARD 1 CHAR
;			7	END OF LINE
;			8	BEGINNING OF LINE
;			9	DELETE WORD LEFT
;--
	.MACRO	$DIS	CHARLIST,TOKEN
.IRP	CHAR,CHARLIST
	.=$$$+CHAR
	.BYTE	TOKEN
.ENDR
	.ENDM	$DIS

;++
; $DISEND
;
; DESCRIPTIONS
;	PUTS THE END ON THE CHARACTER DISPATCH TABLE
;--
	.MACRO	$DISEND
	.=$$$$
	.ENDM	$DISEND

	.SBTTL	CHARACTER DISPATCH TABLE
TTY$C_SS2=^X8E
TTY$C_SS3=^X8F
TTY$A_CCLIST::
	$DISINI
	$DIS	TTY$C_CTRLU,TTY$K_ET_CTRLU
	$DIS	TTY$C_CTRLR,TTY$K_ET_CTRLR
	$DIS	TTY$C_DELETE,TTY$K_ET_DELEFT
	$DIS	<TTY$C_CSI,TTY$C_ESCAPE,TTY$C_LOWESC1,TTY$C_LOWESC2>,TTY$K_ET_ESCAPE
	$DIS	<TTY$C_SS2,TTY$C_SS3>,TTY$K_ET_ESCAPE
	$DIS	TTY$C_CTRLD,TTY$K_ET_BACK_CHAR
	$DIS	TTY$C_CTRLF,TTY$K_ET_FORWARD_CHAR
	$DIS	TTY$C_CTRLE,TTY$K_ET_MOVE_EOL
	$DIS	TTY$C_BS,TTY$K_ET_MOVE_BOL
	$DIS	TTY$C_CTRLV,TTY$K_ET_QUOTING
	$DIS	TTY$C_LF,TTY$K_ET_DELETE_WORD
	$DIS	TTY$C_CTRLB,TTY$K_ET_RECALL
	$DIS	TTY$C_TAB,0		; ALLOW TAB EVEN IF NOT A TERMINATOR
	$DIS	<TTY$C_CR,TTY$C_CTRLZ>,TTY$K_ET_TERMINATE; TERMIANATE THE READ
	$DIS	TTY$C_CTRLA,TTY$K_ET_TOGGEL	; TOGGEL INSERT/OVERSTRIKE MODE
	$DISEND

	.SBTTL	CHARACTER TYPE TABLE MACRO
;++
; TYPE - TYPE TABLE MACRO GENERATOR
;
; Description:
;
;	The type table is used by the character output routines to determine
; several things, whether the character is a spaceing or non spaceing character,
; If this character needs specail attention pre or post typeahead, and if
; this character is lower case.
;
;	The table is a table of bytes.  The lower nibble is a count of
; the occurance of this type of entry, and the high order nibbel is a set
; of flags.
;
; Inputs:
;	Type - one of SPEC, CONTROL, CTRL2, CTRL3, LOWER
;--
	.MACRO	TYPE	TYP
	Y=0
	.IF	NB	TYP
	Y=XY'TYP
	XY'TYP=1+XY'TYP
	.IF	IDN	CONTROL,TYP
	Y=Y!<TTY$M_CH_CTRL>
	.ENDC
	.IF	IDN	SPEC,TYP
	Y=Y!<TTY$M_CH_SPEC>
	.ENDC
	.IF	IDN	CTRL2,TYP
	Y=Y!<TTY$M_CH_CTRL2>
	.ENDC
	.IF	IDN	CTRL3,TYP
	Y=<TTY$M_CH_CTRL3>
	.ENDC
	.IF	IDN	LOWER,TYP
	Y=<TTY$M_CH_LOWER>
	.ENDC
	.ENDC
	.IF	GE	CHAR-97
	.IF	LE	CHAR-97-25
	Y=<TTY$M_CH_LOWER>
	.ENDC
	.ENDC
	.BYTE	Y
	CHAR=CHAR+1
	.ENDM
;
; INITIALIZE COUNTS
;
CHAR=0
XYSPEC=0
XYCONTROL=0
XYCTRL2=0
XYCTRL3=0
XYLOWER=0

	.SBTTL	CHARACTER TYPE TABLE

TTY$A_TYPE::
	TYPE	CTRL3			; NULL
	TYPE	CTRL3			; CONTROL A
	TYPE	CTRL3			; CONTROL B
	TYPE	CONTROL			; CONTROL C
	TYPE	CTRL3			; CONTROL D
	TYPE	CTRL3			; CONTROL E
	TYPE	CTRL3			; CONTROL F
	TYPE	CTRL3			; BELL CONTROL G
	TYPE	SPEC			; BACKSPACE
	TYPE	SPEC			; TAB
	TYPE	SPEC			; LINE FEED
	TYPE	SPEC			; VERTICLE TAB
	TYPE	SPEC			; FORM FEED
	TYPE	SPEC			; CARRIAGE RETURN
	TYPE	CTRL3			; CONTROL N
	TYPE	CONTROL			; CONTROL O
	TYPE	CTRL3			; CONTROL P
	TYPE	CONTROL			; CONTROL Q
	TYPE	CTRL2			; CONTROL R
	TYPE	CONTROL			; CONTROL S
	TYPE	CTRL3			; CONTROL T
	TYPE	CTRL2			; CONTROL U
	TYPE	CTRL3			; CONTROL V
	TYPE	CTRL3			; CONTROL W
	TYPE	CONTROL			; CONTROL X
	TYPE	CONTROL			; CONTROL Y
	TYPE	SPEC			; CONTROL Z
	TYPE	CONTROL			; ESCAPE
	TYPE	CTRL3			;
	TYPE	CTRL3			;
	TYPE	CTRL3			;
	TYPE	CTRL3			;
	TYPE				; SPACE
	TYPE				; !
	TYPE				; "
	TYPE				; #
	TYPE				; $
	TYPE				; %
	TYPE				; &
	TYPE				; '
	TYPE				; (
	TYPE				; )
	TYPE				; *
	TYPE				; +
	TYPE				; ,
	TYPE				; -
	TYPE				; .
	TYPE				; /
	TYPE				; 0
	TYPE				; 1
	TYPE				; 2
	TYPE				; 3
	TYPE				; 4
	TYPE				; 5
	TYPE				; 6
	TYPE				; 7
	TYPE				; 8
	TYPE				; 9
	TYPE				; :
	TYPE				; ; 
	TYPE				; <
 	TYPE				; =
	TYPE				; >
	TYPE				; ?
	TYPE				; @
	TYPE				; A
	TYPE				; B
	TYPE				; C
	TYPE				; D
	TYPE				; E
	TYPE				; F
	TYPE				; G
	TYPE				; H
	TYPE				; I
	TYPE				; J
	TYPE				; K
	TYPE				; L
	TYPE				; M
	TYPE				; N
	TYPE				; O
	TYPE				; P
	TYPE				; Q
	TYPE				; R
	TYPE				; S
	TYPE				; T
	TYPE				; U
	TYPE				; V
	TYPE				; W
	TYPE				; X
	TYPE				; Y
	TYPE				; Z
	TYPE				; [
	TYPE				; \
	TYPE				; ]
	TYPE				; ^
	TYPE				; _
	TYPE				; ELISPE
	TYPE				; LOWER A
	TYPE				; LOWER B
	TYPE				; LOWER C
	TYPE				; LOWER D
	TYPE				; LOWER E
	TYPE				; LOWER F
	TYPE				; LOWER G
	TYPE				; LOWER H
	TYPE				; LOWER I
	TYPE				; LOWER J
	TYPE				; LOWER K
	TYPE				; LOWER L
	TYPE				; LOWER M
	TYPE				; LOWER N
	TYPE				; LOWER O
	TYPE				; LOWER P
	TYPE				; LOWER Q
	TYPE				; LOWER R
	TYPE				; LOWER S
	TYPE				; LOWER T
	TYPE				; LOWER U
	TYPE				; LOWER V
	TYPE				; LOWER W
	TYPE				; LOWER X
	TYPE				; LOWER Y
	TYPE				; LOWER Z
	TYPE				; CURRLY LEFT
	TYPE				; UP LINE
	TYPE				; CURRLY RIGHT
	TYPE				; WIGGLE
	TYPE	CTRL2			; DELETE


;
; 8 BIT CHARACTERS
;

	TYPE	CTRL3			; RESERVED
	TYPE	CTRL3			; RESERVED
	TYPE	CTRL3			; RESERVED
	TYPE	CTRL3			; RESERVED
	TYPE	CTRL3			; IND
	TYPE	CTRL3			; NEL
	TYPE	CTRL3			; SSA
	TYPE	CTRL3			; ESA
	TYPE	CTRL3			; HTS
	TYPE	CTRL3			; HTJ
	TYPE	CTRL3			; VTS
	TYPE	CTRL3			; PLD
	TYPE	CTRL3			; PLU
	TYPE	CTRL3			; RI
	TYPE	CTRL3			; SS2
	TYPE	CTRL3			; SS3
	TYPE	CTRL3			; DCS
	TYPE	CTRL3			; PU1
	TYPE	CTRL3			; PU2
	TYPE	CTRL3			; STS
	TYPE	CTRL3			; CCH
	TYPE	CTRL3			; MW
	TYPE	CTRL3			; SPA
	TYPE	CTRL3			; EPA
	TYPE	CTRL3			; RESERVED
	TYPE	CTRL3			; RESERVED
	TYPE	CTRL3			; RESERVED
	TYPE	CONTROL			; CSI IS A CONTROL
	TYPE	CTRL3			; ST
	TYPE	CTRL3			; OSC
	TYPE	CTRL3			; PM
	TYPE	CTRL3			; APC
	TYPE				; RESERVED
	TYPE				; INVERTED EXCLAATION
	TYPE				; CENT
	TYPE				; POUND
	TYPE				; RESERVED
	TYPE				; YEN
	TYPE				; RESERVED
	TYPE				; SECTION
	TYPE				; CURRENCY
	TYPE				; COPYRIGHT
	TYPE				; FEMINANE ORDINAL
	TYPE				; LEFT ANGLE QUOTE
	TYPE				; RESERVED
	TYPE				; RESERVED
	TYPE				; RESERVED
	TYPE				; RESERVED
	TYPE				; DEGREE
	TYPE				; PLUS/MINUS
	TYPE				; SUPER 2
	TYPE				; SUPER 3
	TYPE				; RESERVED
	TYPE				; MICRO
	TYPE				; PARAGRAPH
	TYPE				; MIDDLE DOT
	TYPE				; RESERVED
	TYPE				; SUPER 1
	TYPE				; MASCULINE ORDINAL
	TYPE				; ALGLE QUOTE RIGHT
	TYPE				; 1/4
 	TYPE				; 1/2
	TYPE				; RESERVED
	TYPE				; INVERTED ?
	TYPE				; CAP A GRAVE
	TYPE				; CAP A ACUTE
	TYPE				; CAP A CERC
	TYPE				; CAP A TILDE
	TYPE				; CAP A DIAERESSIS OR UMLAUT
	TYPE				; CAP A WITH RING
	TYPE				; AE DIPTHONG
	TYPE				; C CEDILLA
	TYPE				; CAP E GRAVE
	TYPE				; CAP E ACUTE
	TYPE				; CAP E CERC
	TYPE				; CAP E DIAERESSIS OR UMLAUT
	TYPE				; I GRAVE
	TYPE				; I ACCUTE
	TYPE				; I CIRC
	TYPE				; I UMLAUT
	TYPE				;  RESERVED
	TYPE				; N TILDE
	TYPE				; CAP O GRAVE
	TYPE				; CAP O ACUTE
	TYPE				; CAP O CERC
	TYPE				; CAP O TILDE
	TYPE				; CAP O DIAERESSIS OR UMLAUT
	TYPE				; OE
	TYPE				; O WITH SLASH
	TYPE				; U GRAVE
	TYPE				; U ACCUTE
	TYPE				; U CIRC
	TYPE				; U UMLAUT
	TYPE				; Y WITH DIAERESIS OR UMLAUT
	TYPE				;  RESREVED
	TYPE				; SMALL SHARP S
;
; LOWER CASE EIGHT BIT CHARACTERS
;
	TYPE	LOWER			; LOWER A GRAVE
	TYPE	LOWER			; LOWER A ACUTE
	TYPE	LOWER			; LOWER A CERC
	TYPE	LOWER			; LOWER A TILDE
	TYPE	LOWER			; LOWER A DIAERESSIS OR UMLAUT
	TYPE	LOWER			; LOWER A WITH RING
	TYPE	LOWER			; AE DIPTHONG
	TYPE	LOWER			; C CEDILLA
	TYPE	LOWER			; e GRAVE
	TYPE	LOWER			; e ACCUTE
	TYPE	LOWER			; e CIRC
	TYPE	LOWER			; e UMLAUT
	TYPE	LOWER			; I GRAVE
	TYPE	LOWER			; I ACCUTE
	TYPE	LOWER			; I CIRC
	TYPE	LOWER			; I UMLAUT
	TYPE				;  RESERVED
	TYPE	LOWER			; N TILDE
	TYPE	LOWER			; LOWER O GRAVE
	TYPE	LOWER			; LOWER O ACUTE
	TYPE	LOWER			; LOWER O CERC
	TYPE	LOWER			; LOWER O TILDE
	TYPE	LOWER			; LOWER O DIAERESSIS OR UMLAUT
	TYPE	LOWER			; OE
	TYPE	LOWER			; O WITH SLASH
	TYPE	LOWER			; U GRAVE
	TYPE	LOWER			; U ACCUTE
	TYPE	LOWER			; U CIRC
	TYPE	LOWER			; U UMLAUT
	TYPE	LOWER			; Y WITH DIAERESIS OR UMLAUT
	TYPE				;  RESREVED
	TYPE				;  RESERVED


	.SBTTL	ESCAPE SEQUENCE TO TOKEN TRANSLATION TABLE
interrupt_key::
	.ASCII	<TTY$C_ESCAPE>/[17~/	; OS interupt key
interrupt_key_len==.-interrupt_key

TTY$A_FCNTKN::
	.BLKB	18			; 0 - 18 AREN'T DEFINED
	.BYTE	TTY$K_ET_UNUSED		; 18
	.BYTE	TTY$K_ET_UNUSED		; 19
	.BYTE	TTY$K_ET_UNUSED		; 20
	.BYTE	0               	; 21 EXIT KEY
	.BYTE	0			; 22 IS UNDEFINED
	.BYTE	TTY$K_ET_UNUSED      	; 23
	.BYTE	TTY$K_ET_MOVE_BOL	; 24
	.BYTE	TTY$K_ET_DELETE_WORD	; 25
	.BYTE	TTY$K_ET_TOGGEL		; 26
TTY$K_MAXESCTKN==.-TTY$A_FCNTKN

	.SBTTL	ESCAPE SYNTAX TABLE
;
; ESCAPE SYNTAX TABLE
;
TTY$A_ESCAPE::				; ESCAPE SYNTAX TABLE
;
; ESCAPE SEQUENCE <ESC><;><32:47>....<48:126>
;
	.ASCII	/;;/			; ";"
	.BYTE	10$-TTY$A_ESCAPE	;
;
; ESCAPE SEQUENCE <ESC><?><32:47>....<48:126>
;
	.ASCII	/??/			; "?"
	.BYTE	10$-TTY$A_ESCAPE	;
;
; ESCAPE SEQUENCE <ESC><O><32:47>....<64:126>
;
	.ASCII	/OO/			; "O"
	.BYTE	20$-TTY$A_ESCAPE	;
;
; ESCAPE SEQUENCE <ESC><Y><32:126><32:126>
;
	.ASCII	/YY/			; "Y"
	.BYTE	30$-TTY$A_ESCAPE	;
;
; ANSI CONTROL SEQUENCES <ESC><[><48:63>...<32:47>...<64:126>
;
	.ASCII	/[[/			; "["
	.BYTE	15$-TTY$A_ESCAPE

;
; ESCAPE SEQUENCE <ESC><32:47>....<48:126>
;
TTY$K_SS2==.-TTY$A_ESCAPE
10$:	.ASCII	! /!			; SPACE TO "/"
	.BYTE	10$-TTY$A_ESCAPE	; INTERMEDIATE CHARACTER
	.ASCII	/0/<126>		; "0" TO END
	.BYTE	0			; FINAL
TTY$K_CSI==.-TTY$A_ESCAPE		; CSI PREFEXES THE FOLLOWING
15$:	.ASCII	/0?/			; "0" TO "?"
	.BYTE	15$-TTY$A_ESCAPE
TTY$K_SS3==.-TTY$A_ESCAPE
20$:	.ASCII	! /!			; SPACE TO "/"
	.BYTE	20$-TTY$A_ESCAPE
	.ASCII	/@/<126>		; "@" TO END
	.BYTE	0			; END OF ESC O.
30$:	.ASCII	! !<126>		; SPACE TO END
	.BYTE	40$-TTY$A_ESCAPE
40$:	.ASCII	! !<126>		;
	.BYTE	0			;
;
; ESCAPE SEQUENCES WITH MEANING FOR OUTPUT
;
; THERE IS A CORRELATION BETWEEN THIS TABLE AND CODE!
;
TTY$A_ESC_OUT::
	.ASCIC	/ABCDHIYFGKZ>=\[/		;

;
; 8bit C1 input code to C0 code trantion table
;
TTY$A_8BITESC::
	.BLKB	13			; MOVE TO SS2
	.BYTE	^A/N/			; SS2
	.BYTE	^A/O/			; SS3
	.BLKB	12			; MOVE TO CSI
	.BYTE	^A/[/			; CSI
	.BLKB	4			; FILL OUT THE TABLE

;
; ESCAPE SEQUENCE RULE INITIALIZATION TABLE
;
TTY$A_ESCINIT::
	.BLKB	13			; MOVE TO SS2
	.BYTE	TTY$K_SS2		; SS2
	.BYTE	TTY$K_SS3		; SS3
	.BLKB	12			; MOVE TO CSI
	.BYTE	TTY$K_CSI		; CSI
	.BLKB	4			; FILL OUT THE TABLE

	.SBTTL	FALLBACK - table that will create fallback presentation
;++
;FALLBACK - TABLE TO ALLOW THE TERMINAL TO DO FALLBACK PRESENTATION OF
;           8BIT CHARACTERS on 7 bit terminals
;
; Description:
;	The following macros generate 3 tables.  The first is a 256 byte
; table with the single character fallback representation of all the
; characters that can be represented by a single character, those with
; no fallback presentation at all are represented by the _ character,
; those with multiple character representation have a 0 in there position.
; The second table is a list of counted strings containing the characters
; for all the characters that have multiple character fallback representation.
; The third table is a 96 byte table that contains the offsets into the
; second table of the counted string for the given character.  The base
; of the third table is the first 8 bit printing character
;
;--
	.macro	$fallini
$$=0
.repeat	256
.IF LE $$-<^X9F>	; EVERYTHING BUT THE MULTINATIONAL SET SHOULD
			; ECHO AS ITSELF.
	.byte $$
.IFF
	.BYTE ^A/_/
.ENDC
$$=$$+1
.endr
$$$=.
.SAVE
	.PSECT	$$$115_TTDRVR_EXPTAB
EXPTAB:
.REPEAT	96
	.BYTE	0
.ENDR
TT_END=.
	.PSECT	$$$115_TTDRVR_EXPAN
EXPAN:
.RESTORE

	.endm 	$fallini

;++
; $FALL - generates the table entry for a given character
;
; Inputs:
;
;	CHARH - COLUMN IN THE ASCII TABLE.
;	CHARL - ROW IN THE ASCII TABLE.
;	FALLBACK - String that is the fallback representation
;	COUNT - Number of times to repeat this character
;--
	.MACRO	$FALL	CHARH,CHARL,FALLBACK,COUNT=1
.=FALLTAB+<CHARH*16>+CHARL
.REPEAT	COUNT
.NCHR	SLEN,^\FALLBACK\
.IF EQ	SLEN-1
	.BYTE	^A/FALLBACK/
.IFF
	.BYTE	255
.SAVE
	.PSECT	$$$115_TTDRVR_EXPAN
$$EXP=.-EXPAN
	.ASCIC	!FALLBACK!
	.PSECT	$$$115_TTDRVR_EXPTAB
.=EXPTAB+<CHARH*16>+CHARL-150
	.BYTE	$$EXP
.RESTORE
.ENDC
.ENDR
	.ENDM	$FALL

;++
; $FALLEND - GENERATES END CONDITIONS FOR THE FALLBACK TABLE
;
; Description:
;
;	Resets the . to the end of the fallback table
;
; Inputs:
;
;	None
;--
	.MACRO	$FALLEND
.=$$$
	.ENDM	$FALLEND


FALLTAB:
	$FALLINI
	$FALL	10,1,!
	$FALL	10,2,c
	$FALL	10,3,L
	$FALL	10,5,Y
;	$FALL	10,7,Sc
	$FALL	10,8,O
;	$FALL	10,9,(C)
	$FALL	10,10,a
;	$FALL	10,11,^!<<!
	$FALL	11,0,o
	$FALL	11,1,+
	$FALL	11,2,2
	$FALL	11,3,3
	$FALL	11,5,u
;	$FALL	11,6,Pr
	$FALL	11,7,.
	$FALL	11,9,1
	$FALL	11,10,o
;	$FALL	11,11,^!>>!
;	$FALL	11,12,<1/4>
;	$FALL	11,13,<1/2>
	$FALL	11,15,?
	$FALL	12,0,A,6
;	$FALL	12,6,AE
	$FALL	12,7,C
	$FALL	12,8,E,4
	$FALL	12,12,I,4
	$FALL	13,1,N
	$FALL	13,2,O,5
;	$FALL	13,7,OE
	$FALL	13,8,O
	$FALL	13,9,U,4
	$FALL	13,13,Y
;	$FALL	13,15,ss
	$FALL	14,0,a,6
;	$FALL	14,6,ae
	$FALL	14,7,c
	$FALL	14,8,e,4
	$FALL	14,12,i,4
	$FALL	15,1,n
	$FALL	15,2,o,5
;	$FALL	15,7,oe
	$FALL	15,8,o
	$FALL	15,9,u,4
	$FALL	15,13,y
	$FALLEND




	.SBTTL	TERMINATOR BITMASK FOR STANDARD SET
;
;
;
TTY$A_STANDARD::				;
		.LONG	^X0FFFFE0FF		; BS,TAB,LF,VT,FORM NOT TERMS
		.LONG	0,0,^X80000000		; AND DELETE
		.LONG	^X0FFFFE0FF		;
		.LONG	0,0,^X80000000	

	.SBTTL	WORD TERMINATOR BIT MASK MACRO AND TABLE
;
; This is the default word terminator bitmask, this table is used
; by the delete word routine to determine when a word ends.
;
TTY$A_WORDTERM::
	.LONG	-1			; ALL THE CONTROL CHARACTERS
	.LONG	^B11111100000000001111101111011111; ALL THE SPECAILS EXCEPT THE DIGITS
	.LONG	^B00111000000000000000000000000001; THE UPPER CASE LETTERS AREN'T TERMINATORS
	.LONG	^B10111000000000000000000000000001; THE LOWER CASE LETTERS AREN'T EITHER
; duplicate for the eight bit set
	.LONG	-1			; ALL THE CONTROL CHARACTERS
	.LONG	^B11111100000000001111111111111111; ALL THE SPECAILS EXCEPT THE DIGITS
	.LONG	^B00111000000000000000000000000001; THE UPPER CASE LETTERS AREN'T TERMINATORS
	.LONG	^B10111000000000000000000000000001; THE LOWER CASE LETTERS AREN'T EITHER
;
; There are certain characters which are  to be considered words on there
; own (characters like the = which are delimeters) this table contains
; the bits for those characters.
;
TTY$A_PREFIX::
	.LONG	0			; ALL THE CONTROL CHARACTERS
	.LONG	^B00010000000000001000001000001000;
	.LONG	^B00001000000000000000000000000001; THE UPPER CASE LETTERS AREN'T TERMINATORS
	.LONG	^B00001000000000000000000000000000; THE LOWER CASE LETTERS AREN'T EITHER
; duplicate for the eight bit set
	.LONG	0			; ALL THE CONTROL CHARACTERS
	.LONG	0
	.LONG	0
	.LONG	0

	.SBTTL	VERIFY_ARRAY - Array of definitions for Read verifictaion
;
;	VERIFICATION ARRAY
;

ALPHA_UPPER = 1
ALPHA_LOWER = 2
NUM09 = 4
PLUS_MINUS = 8
PRINTABLE = 16
CHAR_ALL = 32
;
;
VERIFY_ARRAY::
	.REPEAT	32
.BYTE	CHAR_ALL
	.ENDR
.BYTE	CHAR_ALL!PRINTABLE!ALPHA_UPPER!ALPHA_LOWER		
	.REPEAT 10						
.BYTE	CHAR_ALL!PRINTABLE
	.ENDR
.BYTE	CHAR_ALL!PRINTABLE!PLUS_MINUS
.BYTE	CHAR_ALL!PRINTABLE
.BYTE	CHAR_ALL!PRINTABLE!PLUS_MINUS
.BYTE	CHAR_ALL!PRINTABLE!PLUS_MINUS				
.BYTE	CHAR_ALL!PRINTABLE
	.REPEAT 10
.BYTE	CHAR_ALL!PRINTABLE!NUM09
	.ENDR
	.REPEAT 7
.BYTE	CHAR_ALL!PRINTABLE
	.ENDR
	.REPEAT	26
.BYTE	CHAR_ALL!PRINTABLE!ALPHA_UPPER
	.ENDR
	.REPEAT 6
.BYTE	CHAR_ALL!PRINTABLE
	.ENDR
	.REPEAT	26
.BYTE	CHAR_ALL!PRINTABLE!ALPHA_LOWER
	.ENDR
	.REPEAT 4
.BYTE	CHAR_ALL!PRINTABLE
	.ENDR
.BYTE	CHAR_ALL
	.REPEAT 32
.BYTE	CHAR_ALL
	.ENDR
.BYTE	CHAR_ALL
	.REPEAT 3
.BYTE	CHAR_ALL!PRINTABLE
	.ENDR
.BYTE	CHAR_ALL
.BYTE	CHAR_ALL!PRINTABLE
.BYTE	CHAR_ALL
	.REPEAT 5
.BYTE	CHAR_ALL!PRINTABLE
	.ENDR
	.REPEAT	4
.BYTE	CHAR_ALL
	.ENDR
	.REPEAT 4
.BYTE	CHAR_ALL!PRINTABLE
	.ENDR
.BYTE	CHAR_ALL
	.REPEAT 3
.BYTE	CHAR_ALL!PRINTABLE
	.ENDR
.BYTE	CHAR_ALL
	.REPEAT	5
.BYTE	CHAR_ALL!PRINTABLE
	.ENDR
.BYTE	CHAR_ALL
.BYTE	CHAR_ALL!PRINTABLE
	.REPEAT 16
.BYTE	CHAR_ALL!PRINTABLE!ALPHA_UPPER
	.ENDR
.BYTE	CHAR_ALL
	.REPEAT 13
.BYTE	CHAR_ALL!PRINTABLE!ALPHA_UPPER
	.ENDR
.BYTE	CHAR_ALL
.BYTE	CHAR_ALL!PRINTABLE
	.REPEAT 16
.BYTE	CHAR_ALL!PRINTABLE!ALPHA_LOWER
	.ENDR
.BYTE	CHAR_ALL
	.REPEAT 13
.BYTE	CHAR_ALL!PRINTABLE!ALPHA_LOWER
	.ENDR
.BYTE	CHAR_ALL
.BYTE	CHAR_ALL

	.SBTTL	SPECIAL STRINGS
;
; MULTI ECHO STRINGS
;
;****************************************************************************
; ALL OF THE SPECAIL STRINGS MUST BE COUNTED STRINGS (1 BYTE LENGTH COUNT
;  FOLLOWED BY DATA
;****************************************************************************
;
; TAB STRINGS
;
TTY$A_TAB::		.ASCIC	/        /
;
; BACKSPACE STRING
;
TTY$A_DELCRTTAB::	.BYTE	7,TTY$C_BS,TTY$C_BS,TTY$C_BS,TTY$C_BS,TTY$C_BS,-
				TTY$C_BS,TTY$C_BS
TTY$A_BACKSPACE::	.BYTE	3,TTY$C_BS,TTY$C_BLANK,TTY$C_BS
TTY$A_SPACEBACK::	.BYTE	2,TTY$C_BLANK,TTY$C_BS
;
; UTILITY STRINGS
;
; THE ORGANIZATION OF THIS TABLE IS CRITICAL
;
;
TTY$A_CTRLU::	.ASCIC	<TTY$C_CR>
TTY$A_CTRLR::	.ASCIC	<TTY$C_CR>
TTY$A_CTRLZ::	.ASCIC	/*EXIT*/<TTY$C_CR>
		.BLKB	32-<.-TTY$A_CTRLZ>
TTY$A_CTRLY:	.ASCIC	<13><10>/*INTERRUPT*/<13><10>
		.BLKB	32-<.-TTY$A_CTRLY>
TTY$A_CTRLC:	.ASCIC	<13><10>/*CANCEL*/<13><10>
		.BLKB	32-<.-TTY$A_CTRLC>
TTY$A_CTRLO:	.ASCIC	<13><10>/*OUTPUT OFF*/<13><10>
		.BLKB	32-<.-TTY$A_CTRLO>
TTY$A_OUTON:	.ASCIC	/*OUTPUT ON*/<TTY$C_CR>
		.BLKB	32-<.-TTY$A_OUTON>

;
;DEC CRT ECHO STRINGS
;
; SAVE THE ATTRIBUTES GO INTO REVERSE VIDEO, PRINT THE MESSAGE THEN
; 	RESTORE THE ATTRIBUTES.
;
TTY$A_CTRLZ_DEC::
	.ASCIC	<TTY$C_ESCAPE>/7/<TTY$C_ESCAPE>/[7m Exit /-
			<TTY$C_ESCAPE>/[m/ -
			<TTY$C_ESCAPE>/8/<TTY$C_CR>
		.BLKB	40-<.-TTY$A_CTRLZ_DEC>
TTY$A_CTRLY_DEC:
	.ASCIC	<13><10><TTY$C_ESCAPE>/7/<TTY$C_ESCAPE>/[7m Interrupt /-
			<TTY$C_ESCAPE>/[m/ -
			<TTY$C_ESCAPE>/8/<13><10>
		.BLKB	40-<.-TTY$A_CTRLY_DEC>
TTY$A_CTRLC_DEC:
	.ASCIC	<13><10><TTY$C_ESCAPE>/7/<TTY$C_ESCAPE>/[7m Cancel /-
			<TTY$C_ESCAPE>/[m/ -
			<TTY$C_ESCAPE>/8/<13><10>
		.BLKB	40-<.-TTY$A_CTRLC_DEC>
TTY$A_CTRLO_DEC:
	.ASCIC	<13><10><TTY$C_ESCAPE>/7/<TTY$C_ESCAPE>/[7m Output off /-
			<TTY$C_ESCAPE>/[m/ -
			<TTY$C_ESCAPE>/8/<13><10>
		.BLKB	40-<.-TTY$A_CTRLO_DEC>
TTY$A_OUTON_DEC:
	.ASCIC	<TTY$C_ESCAPE>/7/<TTY$C_ESCAPE>/[7m Output on /-
			<TTY$C_ESCAPE>/[m/ -
			<TTY$C_ESCAPE>/8/<TTY$C_CR>
		.BLKB	40-<.-TTY$A_OUTON_DEC>
;
; SEQUENCES FOR TERMINALS THAT SUPPORT REGIS
;
; EXIT REGIS THEN PRINT DEC CRT CODES
;
TTY$A_CTRLY_REG:
	.ASCIC	<TTY$C_ESCAPE>/\/-
			<13><10><TTY$C_ESCAPE>/7/<TTY$C_ESCAPE>/[7m Interrupt /-
			<TTY$C_ESCAPE>/[m/ -
			<TTY$C_ESCAPE>/8/<13><10>
		.BLKB	40-<.-TTY$A_CTRLY_REG>
TTY$A_CTRLC_REG:
	.ASCIC	<TTY$C_ESCAPE>/\/-
			<13><10><TTY$C_ESCAPE>/7/<TTY$C_ESCAPE>/[7m Cancel /-
			<TTY$C_ESCAPE>/[m/ -
			<TTY$C_ESCAPE>/8/<13><10>
		.BLKB	40-<.-TTY$A_CTRLC_REG>
TTY$A_DEOL::
		.ASCIC	<TTY$C_CR>/                    /-
			<TTY$C_CR>
TTY$A_ANSI_UPCEL::
		.ASCIC	<TTY$C_CR><TTY$C_ESCAPE>/[A/<TTY$C_ESCAPE>/[K/
TTY$A_ANSI_DEOL::
		.ASCIC	<TTY$C_CR><TTY$C_ESCAPE>/[K/
TTY$A_ANSIBACKUP::
		.ASCIC	<TTY$C_ESCAPE>/[000D/
TTY$A_ANSICEL::
		.ASCIC	<TTY$C_ESCAPE>/[K/
;
; VTAB AND FORM
;
TTY$A_VTAB::		.BYTE	4,TTY$C_LF,TTY$C_LF,TTY$C_LF,TTY$C_LF
TTY$A_MECHFORM::	.BYTE	0
TTY$A_FORM::		.BYTE	5,TTY$C_CR,TTY$C_LF,TTY$C_LF,TTY$C_LF,TTY$C_LF
TTY$A_LONGFORM::	.BYTE	5,TTY$C_LF,TTY$C_LF,TTY$C_LF,TTY$C_LF,TTY$C_FF
;
; MAXIMUM POSSIBLE ABSOLUTE SYSTEM TIME.  USED TO KEEP EXE$TIMEOUT
; FROM TIMING OUT READS WITH ZERO SECOND TIMEOUT.
;
TTY$A_MAXTIME::	.LONG	^X7FFFFFFF
;


	.SBTTL	TERMINAL CLASS DRIVER PROLOGUE TABLE
	.PSECT	$$$105_PROLOGUE

;
; CLASS DRIVER DPT
;

TT$DPT::				; DRIVER START
	DPTAB	-			; DRIVER PROLOGUE TABLE
		END=TT_END,-		; END OF CLASS DRIVER
		FLAGS=DPT$M_NOUNLOAD,-	; UNLOAD NOT ALLOWED
		UCBSIZE=UCB$C_TL_LENGTH,- ; SIZE OF UCB
		ADAPTER=NULL,-		; ADAPTER TYPE
		NAME=TTDRIVER,-		; NAME OF DRIVER
		VECTOR=CLASS_VECTOR	; CLASS VECTOR TABLE

	DPT_STORE INIT
	DPT_STORE UCB,UCB$B_FIPL,B,8	; FORK IPL
	DPT_STORE UCB,UCB$L_DEVCHAR,L,<-; CHARACTERISTICS
			DEV$M_REC!-	;
			DEV$M_AVL!-	;
			DEV$M_IDV!-	;
			DEV$M_ODV!-	;
			DEV$M_TRM!-	;
			DEV$M_CCL>
    	DPT_STORE UCB,UCB$L_DEVCHAR2,L,<-; DEVICE CHARACTERISTICS
    			DEV$M_NNM>	; PREFIX WITH "NODE$"
	DPT_STORE UCB,UCB$B_DEVCLASS,B,DC$_TERM;
	DPT_STORE UCB,UCB$B_DEVTYPE,B,TT$_UNKNOWN	; TYPE
	DPT_STORE UCB,UCB$W_DEVBUFSIZ,@W,TTY$GW_DEFBUF	; BUFFER SIZE
	DPT_STORE UCB,UCB$L_DEVDEPEND,@L,TTY$GL_DEFCHAR	; DEFAULT CHARACTERS
	DPT_STORE UCB,UCB$L_DEVDEPND2,@L,TTY$GL_DEFCHAR2; DEFAULT CHARACTERS
	DPT_STORE UCB,UCB$B_DIPL,B,21			; DEVICE IPL
	DPT_STORE ORB,ORB$B_FLAGS,B,-		; Protection block flags
			   <ORB$M_PROT_16>	; SOGW protection word
	DPT_STORE ORB,ORB$W_PROT,@W,TTY$GW_PROT ; Default allocation protection
	DPT_STORE ORB,ORB$L_OWNER,@L,TTY$GL_OWNUIC ; Default owner UIC
	DPT_STORE DDB,DDB$L_DDT,D,TT$DDT

	DPT_STORE REINIT
	DPT_STORE CRB,CRB$L_INTD+VEC$L_INITIAL,D,VT$INITIAL  ; CONTROLLER INIT
	DPT_STORE CRB,CRB$L_INTD+VEC$L_UNITINIT,D,VT$INITLINE; UNIT INIT
	DPT_STORE END




	.SBTTL	DRIVER DISPATCH TABLE AND FUNCTION DECISION TABLE
;
; DRIVER DISPATCH TABLE
;
	DDTAB	TT,-			; DRIVER DISPATCH TABLE
		TTY$STARTIO,-		; START IO OPERATION
		0,-			; UNEXPECTED INTERRUPT
		FUNCTION,-		; FUNCTION DECISION TABLE
		TTY$CANCELIO,-		; CANCEL I/O
		0,-			; REGISTER DUMP ROUTINE
		0,-			; SIZE OF DIAGNOSTIC BUFFER
		0,-			; SIZE OF ERROR LOG BUFFER
		0,-			; Unit initialization routine
		TTY$WRTSTARTIO		; Alternate START I/O

;
; FUNCTION DECISION TABLE FOR ALL TERMINALS
;
FUNCTION:
	FUNCTAB	,-			; LEGAL FUNCTIONS
		<READLBLK,-
		WRITELBLK,-
		READVBLK,-
		WRITEVBLK,-
		READPBLK,-
		WRITEPBLK,-
		READPROMPT,-
		TTYREADALL,-
		TTYREADPALL,-
		SETMODE,-
		SETCHAR,-
		SENSEMODE,-
		SENSECHAR,-
		>
	FUNCTAB	,-			; BUFFERED I/O FUNCTIONS
		<READLBLK,-
		WRITELBLK,-
		READVBLK,-
		WRITEVBLK-
		READPBLK,-
		READPROMPT,-
		TTYREADALL,-
		TTYREADPALL,-
		WRITEPBLK,-
		>
	FUNCTAB	TTY$FDTREAD,<READLBLK,READVBLK,READPBLK,READPROMPT,-
				TTYREADALL,TTYREADPALL>
	FUNCTAB	TTY$FDTWRITE,<WRITELBLK,WRITEVBLK,WRITEPBLK>
	FUNCTAB TTY$FDTSETM,<SETMODE>
	FUNCTAB	TTY$FDTSETC,<SETCHAR>
	FUNCTAB TTY$FDTSENSEM,<SENSEMODE>
	FUNCTAB	TTY$FDTSENSEC,<SENSECHAR>

	.PAGE

;	THIS TABLE IS USED FOR COMMUNICATION WITH THE TERMINAL CLASS DRIVER.
;	IT INITIALLY CONTAINS RELATIVE OFFSETS TO VARIOUS ROUTINES AND
;	DATA STRUCTURES NEEDED BY TERMINAL PORT DRIVERS. AT DRIVER LOAD
;	THE RELATIVE OFFSETS ARE RELOCATED TO ACTUAL VIRTUAL ADDRESSES.
;	THE LIST IS TERMINATED BY A 0 LONGWORD TO SIGNAL THE RELOCATION
;	ROUTINE WHERE THE LIST TERMINATES.

CLASS_VECTOR:
	.LONG	TTY$GETNEXTCHAR - 	TT$DPT	; GET NEXT STRING
	.LONG	TTY$PUTNEXTCHAR -	TT$DPT	; PUT NEXT STRING
	.LONG	TTY$SETUP_UCB -		TT$DPT	; ROUTINE TO INIT UCB
	.LONG	PORT_TRANSITION -	TT$DPT	; ROUTINE TO HANDLE MODEM TRANSITIONS
	.LONG	TT$DDT -		TT$DPT	; CLASS DRIVER DDT
	.LONG	TTY$READERROR -		TT$DPT	; 
	.LONG	TTY$CLASS_DISCONNECT -	TT$DPT	; CLASS DISCONNECT ROUTINE
	.LONG	TTY$CLASS_FORK -	TT$DPT	; CLASS FORK ROUTINE
	.LONG	TTY$POWERACTION -	TT$DPT	; CLASS POWERFAIL ACTION ROUTINE
;
; A pointer to tables is included here so that changes to the
; tables can be made from code external to the driver.
;	
	.LONG	TTY$A_TABLES - 		TT$DPT	; MISCELLANEOUS TABLES
;
; 	THIS MARKS THE END OF THE CLASS DRIVER VECTORS.
;	THE VECTORS AFTER THIS ARE USED FOR OTHER PURPOSES WITHIN THE
;	DRIVER. THEY ARE INCLUDED HERE TO TAKE ADVANTAGE OF THE AUTOMATIC
;	RELOCATION THAT TAKES PLACE AT BOOT TIME. BY REPLACING ANY OF
;	THESE FOLLOWING VECTORS, THE TABLES THAT THEY POINT TO CAN BE 
;	"SWITCHED" WITHOUT MODIFIATION OF THE DRIVER.
;
TTY$A_TABLES:
TTY$A_INTECHO::
	.LONG	INTECHO - 		TT$DPT	; INTERRUPT ECHOS
TTY$A_EXITECHO::
	.LONG	EXITECHO -		TT$DPT	; EXIT ECHOS 	
TTY$A_CTRLOECHO::
	.LONG	CTRLOECHO - 		TT$DPT	; CTRLO ECHOS
TTY$A_INPFALL::	
	.LONG	NOFALL -		TT$DPT	; INPUT FALLBACK TABLE
TTY$A_FALLTAB::
	.LONG	FALLTAB -		TT$DPT	; FALLBACK TRANSLATION
TTY$A_EXPAN::
	.LONG	EXPAN - 		TT$DPT	; EXPANSION LIST FOR BREAK CHARACTEEEEERS
TTY$A_EXPTAB::
	.LONG	EXPTAB -		TT$DPT	; FALLBACK BREAK CHARACTER LIST

;	HERE ARE THE DEFAULT TABLES PROVIDED BY TTDRIVER.
;
INTECHO:
	.LONG	TTY$A_CTRLY -		TT$DPT	; 0
	.LONG	TTY$A_CTRLC -		TT$DPT	; 1
	.LONG	TTY$A_CTRLY_REG -	TT$DPT	; 2 (ASSUMES DECCRT)
	.LONG	TTY$A_CTRLC_REG -	TT$DPT	; 3 (ASSUMES DECCRT)
	.LONG	TTY$A_CTRLY_DEC -	TT$DPT	; 4
	.LONG	TTY$A_CTRLC_DEC -	TT$DPT	; 5
	.LONG	TTY$A_CTRLY_REG -	TT$DPT	; 6
	.LONG	TTY$A_CTRLC_REG -	TT$DPT	; 7
EXITECHO:
	.LONG	TTY$A_CTRLZ - 		TT$DPT	;
	.LONG	TTY$A_CTRLZ_DEC	-	TT$DPT	;
CTRLOECHO:
	.LONG	TTY$A_CTRLO -		TT$DPT	;  
	.LONG	TTY$A_CTRLO_DEC -	TT$DPT	; 
	.LONG	TTY$A_OUTON -		TT$DPT	; 
	.LONG	TTY$A_OUTON_DEC -	TT$DPT	; 

	.LONG	0				; END OF LIST

NOFALL:
	.LONG	0	
	.PAGE

	.SBTTL	LOGICAL UCB INIT ROUTINES
;
;	THESE ROUTINES SERVE AS THE CONTROLLER AND UNIT INIT
;	ROUTINES WHEN THE TEMPLATE UCB IS CONNECTED VIA SYSGEN.
;	THEY SAVE THE ADDRESS OF THE TEMPLATE DDB AND UCB FOR
;	CLONEING FUTURE LOGICAL TERMINAL UCBS
;

VT$INITIAL:					; CONTROLLER INIT
	TSTL	VT$DDB				; SKIP IF ALREADY SET UP
	BNEQ	10$
	MOVL	R6,VT$DDB			; SAVE ADDRESS OF DDB
10$:	RSB

VT$INITLINE:					; UNIT INIT
	TSTL	VT$UCB				; SKIP IF ALREADY SET UP
	BNEQ	10$
	MOVL	R5,VT$UCB			; SAVE TEMPLATE UCB ADDRESS
10$:	RSB

VT$DDB::
	.LONG	0
VT$UCB::
	.LONG	0


	.END
