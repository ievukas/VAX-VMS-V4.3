%TITLE 'EDT$HELP - process the HELP commands'
MODULE EDT$HELP (				! Process the HELP commands
		IDENT = 'V04-000'			! File: HELP.B32 Edit: JBS2015
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Process the HELP commands.
!
! ENVIRONMENT: VAX/VMS only
!
! AUTHOR: Bob Kushlis, CREATION DATE: 13-OCT-1979
!
! MODIFIED BY:
!
! 2-005	- Regularized headers and made PIC.  JBS 24-Feb-1981
! 2-006	- Fix module name.  JBS 05-Mar-1981
! 2-007	- Use new message codes.  JBS 04-Aug-1981
! 2-008 - Add new message for no help on a key.  SMB 19-Nov-1981
! 2-009 - Add new global for help file name and default. SMB 17-Dec-1981
! 2-010	- Print a message on close errors.  JBS 12-Apr-1982
! 2-011	- Return a value from setting the help file name.  JBS 04-May-1982
! 2-012 - Change default processing for SET HELP.  SMB 25-May-1982
! 2-013	- Maximum terminal width for the librarian is 132.  JBS 18-Aug-1982
! 2-014 - Add some code for OUTPUT_HELP but comment it out  until VMS
!         gives more support (.i.e. SET HELP command, more parameters...).  SMB 01-Mar-1983
! 2-015	- Improve the appearance of the listing.  JBS 14-Jun-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$OUT_HLP : NOVALUE,
    GET_HELP,					! Print help using LBR$GET_HELP
    EDT$$SET_HLPFNAM;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

REQUIRE 'EDTSRC:SYSSYM';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!

OWN
    KEY_COUNT,					! Count of the key number we're on
    LINE_HELP;					! 1= use line mode help format

						! 0= use keypad mode help format
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    EDT$$FIOPN_ERR,
    EDT$$CNV_UPC,
    EDT$$OUT_FMTBUF,
    EDT$$FMT_STR,
    EDT$$FMT_LIT,
    EDT$$FMT_CRLF,
    EDT$$FMT_MSG,
    EDT$$MSG_TOSTR,
    LBR$INI_CONTROL,
    LBR$OPEN,
    LIB$GET_INPUT,
    LIB$PUT_OUTPUT,
    LBR$OUTPUT_HELP,
    LBR$GET_HELP,
    LBR$CLOSE;

EXTERNAL
    EDT$$Z_LBR_INDEX,				! LBR control table index.
    EDT$$T_HDEF_NAM,				! Help file default specs
    EDT$$T_HDEF_FILE,				! Help file default file name
    EDT$$T_HELP_NAM,
    EDT$$G_HELP_NAMLEN,
    EDT$$G_HELP_SET,
    EDT$$A_FMT_CUR,
    EDT$$T_FMT_BUF,
    EDT$$G_TI_WID;

MESSAGES ((NOHLPAVL, HLPFILCLO, FILNAM, NOKEYHLP, NOHLPINI, INVSTR));

%SBTTL 'EDT$$OUT_HLP  - HELP command'

GLOBAL ROUTINE EDT$$OUT_HLP (			! HELP command
    STRING, 					! Address of HELP command arguments
    LENG, 					! Length of those arguments
    ADDITIONAL					! 1 = print key names and additional help
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Process the HELP commands.
!
! FORMAL PARAMETERS:
!
!  STRING		Address of the text string that contains the HELP arguments
!
!  LENG			Length of that string
!
!  ADDITIONAL		1 = print key names and additional help
!
! IMPLICIT INPUTS:
!
!	EDT$$G_HELP_SET
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Calls EDT$$SET_HLPFNAM  if it has not already been called.
!
!--

    BEGIN

    LOCAL
	HELP_DESC : BLOCK [8, BYTE]		! String descriptor for help file name
	    PRESET ( [DSC$B_DTYPE] = DSC$K_DTYPE_T,
		     [DSC$B_CLASS] = DSC$K_CLASS_S),
	LINE_DESC : BLOCK [8, BYTE]		! Output string descriptor for LBR$OUTPUT_HELP
	    PRESET ( [DSC$B_DTYPE] = DSC$K_DTYPE_T,
		     [DSC$B_CLASS] = DSC$K_CLASS_S),
	HELP_FLAGS,				! Flags for LBR$OUTPUT_HELP
	OPEN_STATUS,				! Has the Help File been opened
	LENGTH_POINTER,				! Pointer to the length of help file name
	POINTER,
	E_POINT,
	TOPICS : BLOCKVECTOR [5, 8, BYTE],	! Topic descriptors.
	GET_HELP_ARGS : VECTOR [10],
	NUM_TOPICS,
	GET_HELP_STATUS;

!+
! If we are using line mode help format then we want additional information
! to be printed.  If we are using keypad help format then we don't want the
! additional topics to be displayed.
!-
    LINE_HELP = .ADDITIONAL;
!+
! The following will have code to be used for LBR$OUTPUT_HELP turned off by
! use of comments until VMS implements the SET HELP/PROMPT command.
!
!    IF (.LINE_HELP EQL 0)
!    THEN
!    	BEGIN
!+
! We cannot use LBR$OUTPUT_HELP so we must initialize the file, open it
! and parse the help topics to prepare them for LBR$GET_HELP.
!-
!+
! If EDT$$G_HELP_SET then the help file has already been opened, so
! set OPEN_STATUS
!-

    IF ( NOT .EDT$$G_HELP_SET)
    THEN
	OPEN_STATUS = EDT$$SET_HLPFNAM (CH$PTR (EDT$$T_HELP_NAM),
	    .EDT$$G_HELP_NAMLEN)
    ELSE
	OPEN_STATUS = 1;

    IF (.OPEN_STATUS)
    THEN
	BEGIN
!+
! Isolate all the topic strings in the command.
!-
	POINTER = .STRING;
	E_POINT = CH$PTR (.POINTER, .LENG);
	EDT$$CNV_UPC (.POINTER, .LENG);

	INCR I FROM 0 TO 4 DO
	    BEGIN
	    TOPICS [.I, DSC$W_LENGTH] = 0;
	    TOPICS [.I, DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    TOPICS [.I, DSC$B_CLASS] = DSC$K_CLASS_S;
	    TOPICS [.I, DSC$A_POINTER] = 0;
	    END;

	INCR I FROM 0 TO 4 DO
	    BEGIN

	    WHILE ((CH$DIFF (.POINTER, .E_POINT) LSS 0) AND 	!
		(CH$RCHAR (.POINTER) EQL %C' ') OR 	!
		(CH$RCHAR (.POINTER) EQL ASC_K_TAB)) DO
		POINTER = CH$PLUS (.POINTER, 1);

	    IF CH$DIFF (.POINTER, .E_POINT) EQL 0
	    THEN
		BEGIN
		NUM_TOPICS = .I;
		EXITLOOP;
		END;

	    TOPICS [.I, DSC$A_POINTER] = .POINTER;

	    IF (CH$RCHAR (.POINTER) EQL %C'/') THEN POINTER = CH$PLUS (.POINTER, 1);

	    WHILE ((CH$DIFF (.POINTER, .E_POINT) LSS 0) AND 	!
		(CH$RCHAR (.POINTER) NEQ %C' ') AND 	!
		(CH$RCHAR (.POINTER) NEQ ASC_K_TAB) AND 	!
		(CH$RCHAR (.POINTER) NEQ %C'/')) DO
		POINTER = CH$PLUS (.POINTER, 1);

	    TOPICS [.I, DSC$W_LENGTH] = CH$DIFF (.POINTER, .TOPICS [.I, DSC$A_POINTER]);
	    END;

!+
! If no topics are found, then default to help.
!-

	IF (.NUM_TOPICS EQL 0)
	THEN
	    BEGIN
	    NUM_TOPICS = 1;
	    TOPICS [0, DSC$W_LENGTH] = 4;
	    TOPICS [0, DSC$A_POINTER] = UPLIT BYTE('HELP');
	    END;

!+
! Now, ask for help!
!-
	KEY_COUNT = 0;
	GET_HELP_STATUS = LBR$GET_HELP (EDT$$Z_LBR_INDEX, %REF (MIN (132, .EDT$$G_TI_WID)), GET_HELP,
	    LINE_HELP, TOPICS [0, 0, 0, 0, 0], TOPICS [1, 0, 0, 0, 0], TOPICS [2, 0, 0, 0, 0], 	!
	    TOPICS [3, 0, 0, 0, 0], TOPICS [4, 0, 0, 0, 0]);

	IF ( NOT .GET_HELP_STATUS) THEN SIGNAL_STOP (.GET_HELP_STATUS);

!+
! And output any remaining characters.
!-

	IF (.EDT$$A_FMT_CUR NEQA EDT$$T_FMT_BUF) THEN EDT$$OUT_FMTBUF ();

	END;

!+
! Code specific to the use of LBR$OUTPUT_HELP.  WE don't have to parse
! the help line in this case so we skip the above code.  Note also that
! LBR$OUTPUT_HELP does its own initialization and opening of the help
! file.
!-
!	END
!    ELSE
!	BEGIN
!	HELP_FLAGS = HLP$M_PROCESS + HLP$M_GROUP + HLP$M_SYSTEM; ! Use HLP$M_PROMPT for ?[Sub]Topic prompting
!	HELP_DESC [DSC$W_LENGTH] = .EDT$$G_HELP_NAMLEN;
!	HELP_DESC [DSC$A_POINTER] = CH$PTR(EDT$$T_HELP_NAM);
!	POINTER = .STRING;
!	LINE_DESC [DSC$A_POINTER] = .POINTER;
!	LINE_DESC [DSC$W_LENGTH] = .LENG;
!+
! For the call to LBR$OUTPUT_HELP we may want to use our own output routine
! in place of LIB$PUT_OUTPUT, although this seems to be adequate when tested.
!
! If the prompting bit is on, then we must supply our own input routine in place
! of LIB$GET_INPUT because prompt responses may be coming from a journal or
! initialization file.  We cannot turn this bit on until VMS provides a SET
! HELP/[NO]PROMPT command for compatibility reasons.
!
! Without HLP$M_PROMPT set, the only thing we buy with this code is the ability
! to say "HELP @newhelpfile command".  Without resorting to LBR$OUTPUT_HELP you
! could get help from another help file by simply typing "SET HELP newhelpfile
! and then "HELP command".  When you want to set help back to the default
! help file you simply type "SET HELP".
!-

!   	GET_HELP_STATUS = LBR$OUTPUT_HELP (LIB$PUT_OUTPUT, %REF ((MIN (132, .EDT$$G_TI_WID))), LINE_DESC, HELP_DESC,
!      	    HELP_FLAGS, LIB$GET_INPUT);
!
!	IF ( NOT .GET_HELP_STATUS) THEN SIGNAL_STOP (.GET_HELP_STATUS);
!
!
!	IF (.EDT$$A_FMT_CUR NEQA EDT$$T_FMT_BUF) THEN EDT$$OUT_FMTBUF ();
!
!	END;
    END;					! of routine EDT$$OUT_HLP


%SBTTL 'GET_HELP - output HELP text'
ROUTINE GET_HELP (				! Output HELP text
    DESC, 					! The text to be output
    FLAGS, 					! Flag bits
    ADDITIONAL, 				! Data argument to LBR$HELP
    CUR_KEY_LEVEL				! Current key level
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Output a line of help text.  This routine is called from LBR$HELP.
!
! FORMAL PARAMETERS:
!
!  DESC			The text to be output
!
!  FLAGS		Flag bits
!
!  ADDITIONAL		Data argument to LBR$HELP
!
!  CUR_KEY_LEVEL	Current key level
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	1
!
! SIDE EFFECTS:
!
!	Calls EDT$$FMT_LIT  and EDT$$FMT_CRLF .
!
!--

    BEGIN

    MAP
	DESC : REF BLOCK [8, BYTE];

    IF ((..ADDITIONAL NEQ 0) OR (..FLAGS EQL 0))
    THEN
	BEGIN
	EDT$$FMT_LIT (.DESC [DSC$A_POINTER], .DESC [DSC$W_LENGTH]);
	EDT$$FMT_CRLF ();
	END
    ELSE

	IF (..FLAGS EQL HLP$M_NOHLPTXT)
	THEN
!+
! So the message won't get printed twice
!-

	    IF (.KEY_COUNT EQL 0)
	    THEN
		BEGIN
		EDT$$MSG_TOSTR (EDT$_NOKEYHLP);
		EDT$$FMT_CRLF ();
		KEY_COUNT = .KEY_COUNT + 1;
		END;

    RETURN (1);
    END;					! of routine GET_HELP

%SBTTL 'EDT$$SET_HLPFNAM  - set help library name'

GLOBAL ROUTINE EDT$$SET_HLPFNAM (		! Set help library name
    ADDR, 					! Address of new HELP library name
    LEN						! Length of that name
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Set the name of the help library.  Attempt an open to force a
! 	parse of the name and return an error if no help available.
!
! FORMAL PARAMETERS:
!
!  ADDR			Address of new HELP library name
!
!  LEN			Length of that name
!
! IMPLICIT INPUTS:
!
!	EDT$$T_HELP_NAM
!	EDT$$G_HELP_NAMLEN
!	EDT$$G_HELP_SET
!	EDT$$Z_LBR_INDEX
!
! IMPLICIT OUTPUTS:
!
!	EDT$$T_HELP_NAM
!	EDT$$G_HELP_NAMLEN
!	EDT$$G_HELP_SET
!	EDT$$Z_LBR_INDEX
!
! ROUTINE VALUE:
!
!	1 = success
!	0 = invalid string
!
! SIZE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	RESULT_LEN,				! Length of resultant name
	PARSE_HNAM : BLOCK [NAM$C_MAXRSS, BYTE],	! Help file name after OPEN
	HELP_DESC : BLOCK [8, BYTE]		! Descriptor for help name
	    PRESET ( [DSC$B_DTYPE] = DSC$K_DTYPE_T,
		  [DSC$B_CLASS] = DSC$K_CLASS_S),
	RESULT_DESC : BLOCK [8, BYTE]		! Resultant help file name
	    PRESET ( [DSC$B_DTYPE] = DSC$K_DTYPE_T,
		  [DSC$B_CLASS] = DSC$K_CLASS_S),
	HELP_DEFAULT_FILE_NAME_DESC : BLOCK [8, BYTE]	! Help default file name
	    PRESET ( [DSC$B_DTYPE] = DSC$K_DTYPE_T,
		  [DSC$B_CLASS] = DSC$K_CLASS_S);

    IF (.LEN GTR NAM$C_MAXRSS)
    THEN
	BEGIN
	EDT$$FMT_MSG (EDT$_INVSTR);
	RETURN (0);				! File name too long
	END;

    IF (.LEN NEQ 0)
    THEN
	BEGIN
	HELP_DESC [DSC$W_LENGTH] = .LEN;
	HELP_DESC [DSC$A_POINTER] = CH$PTR (.ADDR);
	END
    ELSE
!+
! No file name was given, so restore it to the default help file
!-
	BEGIN
	HELP_DESC [DSC$W_LENGTH] = CH$RCHAR (EDT$$T_HDEF_FILE);
	HELP_DESC [DSC$A_POINTER] = CH$PTR (EDT$$T_HDEF_FILE, 1);
	END;

    IF (.EDT$$G_HELP_SET)
    THEN
!+
! Close the old help library because we are opening a new one
!-

	IF ( NOT LBR$CLOSE (EDT$$Z_LBR_INDEX))
	THEN
	    BEGIN
	    EDT$$FMT_MSG (EDT$_HLPFILCLO);
	    RETURN (0)
	    END;

!+
! Attempt to initialize the help library.  Do this whenever Help is SET.
!-

    IF ( NOT LBR$INI_CONTROL (EDT$$Z_LBR_INDEX, %REF (LBR$C_READ), %REF (LBR$C_TYP_HLP)))
    THEN
	BEGIN
	EDT$$FMT_MSG (EDT$_NOHLPINI);
	RETURN (0);
	END;

!+
! Set up the default help file name descriptor
!-
    HELP_DEFAULT_FILE_NAME_DESC [DSC$W_LENGTH] = CH$RCHAR (EDT$$T_HDEF_NAM);
    HELP_DEFAULT_FILE_NAME_DESC [DSC$A_POINTER] = CH$PTR (EDT$$T_HDEF_NAM, 1);
!+
! Set up the resultant help file name descriptor
!-
    RESULT_DESC [DSC$W_LENGTH] = NAM$C_MAXRSS;
    RESULT_DESC [DSC$A_POINTER] = CH$PTR (PARSE_HNAM);
    RESULT_LEN = 0;
!+
! Attempt to open the help library.
!-

    IF ( NOT LBR$OPEN (EDT$$Z_LBR_INDEX, HELP_DESC, 0, HELP_DEFAULT_FILE_NAME_DESC, 0, RESULT_DESC,
	    RESULT_LEN))
    THEN
	BEGIN
	EDT$$G_HELP_SET = 0;			! Next time re-open the old help file
	EDT$$FMT_MSG (EDT$_NOHLPAVL);
	EDT$$MSG_TOSTR (EDT$_FILNAM);

	IF (.RESULT_LEN EQL 0)
	THEN
	    EDT$$FMT_STR (.HELP_DESC [DSC$A_POINTER], .HELP_DESC [DSC$W_LENGTH])
	ELSE
	    EDT$$FMT_STR (.RESULT_DESC [DSC$A_POINTER], .RESULT_LEN);

	EDT$$OUT_FMTBUF ();
	RETURN (0);
	END;

    EDT$$G_HELP_SET = 1;			! Means that SET_HELP was successful in opening a help file
!+
! Store the new Help File name and name length in the globals
!-
    EDT$$CPY_MEM (.RESULT_LEN, CH$PTR (PARSE_HNAM), CH$PTR (EDT$$T_HELP_NAM));
    EDT$$G_HELP_NAMLEN = .RESULT_LEN;
    RETURN (1);
    END;					! of routine EDT$$SET_HLPFNAM

!<BLF/PAGE>

END						! of module EDT$HELP

ELUDOM
