%TITLE 'EDT$MAIN - main entry point'
MODULE EDT$MAIN (				! Main entry point for callable EDT
		IDENT = 'V04-000'			! File: MAIN.BLI Edit: JBS1049
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module contains the main entry point for callable EDT.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: 6-AUG-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 18-FEB-1981.  This module was created by
!	extracting routine EDT from module EDTCTR.
! 1-002	- Regularize headers, change from IO_STS to EDT$$G_IOFI_NFND ,
!	   and from SY_EXIT to EDT$$FATAL_IOERR .  JBS 19-Feb-1981
! 1-003	- Fix module name and file name.  JBS 04-Mar-1981
! 1-004	- Change entry point name from EDT to EDT$$MAIN_ENTRY .  JBS 26-Mar-1981
! 1-005	- Change E_VERSION to EDT$$T_VERSION.  JBS 30-Mar-1981
! 1-006	- Change EDT$$T_VERSION to EDT$$T_VER .  JBS 30-Mar-1981
! 1-007	- Correct a spelling error in EDT$$OPN_IFIDEF .  JBS 02-Apr-1981
! 1-008	- Use the new message codes.  JBS 04-Aug-1981
! 1-009	- Fix reading startup file.  JBS 16-Aug-1981
! 1-010	- Implement SET NOFNF.  TMV 11-Sep-1981
! 1-011	- Correct edit history.  JBS 01-Oct-1981
! 1-012- make major changes to create sharable image.  STS 17-Nov-1981
! 1-013 - Put L_LINE back TMV  7-Dec-81
! 1-014 - Fix up DSC$ macros and add comments.  STS 7-Dec-1981
! 1-015 - Change the defaulting of the journal filename. STS 17-Dec-1981
! 1-016 - Change all i/o calls for command file to use EDT$FILEIO. STS 25-Dec-1981
! 1-017 - Change call to edt$fileio to use callfio. STS 07-Jan-1982
! 1-018 - Convert open output file to use callfio. STS 13-Jan-1982
! 1-019 - Deallocate dynamic strings. STS 10-Feb-1982
! 1-020 - Take out unused rhb descriptor. STS 19-Feb-1982
! 1-021 - Pass filename to edt$$fiopn_err. STS 26-Feb-1982
! 1-022 - Add callable literals. STS 08-Mar-1982
! 1-023 - Enable a handler. STS 09-Mar-1982
! 1-024	- Remove the version number to a require file.  JBS 09-Mar-1982
! 1-025 - Check and set re-entry flag. STS 11-Mar-1982
! 1-026	- Change EDT$$G_CMD and EDT$$G_JOU to EDT$$V_OPTIONS.  JBS 24-Mar-1982
! 1-027	- File I/O routines return status.  JBS 26-Mar-1982
! 1-028	- Add return value of 2 from EDT$$INIT.  JBS 26-Mar-1982
! 1-029	- Copy the formal strings, in case they have an unusual format.
!	   JBS 26-Mar-1982
! 1-030	- Fix a typo in edit 1-027.  JBS 27-Mar-1982
! 1-031 - Set up command file open flag. STS 07-Apr-1982
! 1-032	- Give messages on CLOSE errors.  JBS 12-Apr-1982
! 1-033	- Add chaining between command files using SET COMMAND.  JBS 04-May-1982
! 1-034	- Avoid double error printouts on the PDP-11.  JBS 28-May-1982
! 1-035 - Conditionalize out variable set up for 11's. STS 01-Jun-1982
! 1-036	- Remove L_LINE and L_CHANGE.  JBS 03-Jun-1982
! 1-037	- Remove command file looping.  JBS 03-Jun-1982
! 1-038	- Allow a new return code from EDT$$INIT.  JBS 03-Jun-1982
! 1-039	- Revise the interface to command files.  JBS 07-Jun-1982
! 1-040	- Be sure the command name is blank after the startup file is read.  JBS 11-Jun-1982
! 1-041	- Pass the default file name in the RHB parameter.  JBS 15-Jun-1982
! 1-042 - Default the passed parameters if none passed. STS 13-Jul-1982
! 1-043 - Don't allow defaulting of the main input file. STS 22-Jul-1982
! 1-044	- Don't print the initial warning messages if we will enter change
!	   mode, but do leave it for change mode to show.  JBS 23-Jul-1982
! 1-045	- Check the status returned by EDT$$EXE_CMD.  JBS 28-Jul-1982
! 1-046 - Add XLATE routine. STS 13-Aug-1982
! 1-047 - Make use of the literals for the options word masks. STS 17-Aug-1982
! 1-048	- Change the interface to EDT$$SET_COMFNAM.  JBS 23-Aug-1982
! 1-049	- Fix up references to EDT$M_ bits.  JBS 23-Aug-1982
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$EDIT;					! main entry point for callable EDT

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

%IF %BLISS (BLISS32)
%THEN

REQUIRE 'EDTSRC:SYSSYM';

%FI

!
! MACROS:
!
!+
! Macro for the default name of the journal file.  This is defined as
! a macro so we can use %CHARCOUNT to pass the length of the string.
!-
!<BLF/NOFORMAT>

MACRO
    JOU_DEFLT = %STRING ('.JOU;') % ;	! File type of .JOU, latest version.

!<BLF/FORMAT>
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    EDT$M_NOCREATE,
    EDT$M_NOJOURNAL,
    EDT$M_COMMAND,
    EDT$M_NOCOMMAND,
    EDT$K_OPEN_IN_OUT,
    EDT$K_OPEN_INPUT,
    EDT$K_INPUT_FILE,
    EDT$K_JOURNAL_FILE,
    EDT$K_OPEN_OUTPUT_NOSEQ,
    EDT$K_COMMAND_FILE,
    EDT$K_CLOSE;

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
! Inside the routine.
!-

%SBTTL 'EDT$EDIT  - Main entry point'

GLOBAL ROUTINE EDT$EDIT 			! Main entry point

%IF %BLISS (BLISS32)
%THEN
    (INP_DESC, 					! Name of the input file
    OUT_DESC, 					! Name of the output file
    CMD_DESC, 					! Name of the command file
    JOU_DESC, 					! Name of the journal file
    OPTIONS_WRD, 				! Options bits
    FILE_ROUT, 					! File I/O routine
    WORK_ROUT, 					! Work file I/O routine
    XLATE_ROUT					! XLATE command routine
    )
%FI

    =

!++
! FUNCTIONAL DESCRIPTION:
!
!	The main entry point for the editor.
!
! FORMAL PARAMETERS:
!
!+
! passed variables are set up in global data on the 11's in order to
! save stack space.
!-
!	INP_DESC - input file descriptor
!	OUT_DESC - output file descriptor
!	CMD_DESC - command file descriptor
!	JOU_DESC - journal file descriptor
!	OPTIONS_WRD
!		bit 0 = /RECOVER
!		bit 1 = /COMMAND
!		bit 2 = /NOJOURNAL
!		bit 3 = /NOOUTPUT
!		bit 4 = /NOCOMMAND
! 		bit 5 = /NOCREATE
!	FILE_ROUT - address of file i/o routine to use
!	WORK_ROUT - address of work file routine to use
!	XLATE_ROUT - address for translation routine
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_INP_NAM
!	EDT$$A_OUT_NAM
!	EDT$$A_CMD_NAM
!	EDT$$A_COM_NAM
!	EDT$$A_JOU_NAM
!	EDT$$G_INP_NAMLEN
!	EDT$$G_OUT_NAMLEN
!	EDT$$G_CMD_NAMLEN
!	EDT$$G_JOU_NAMLEN
!	EDT$$G_LASTMSG
!	EDT$$A_CMD_BUF
!	EDT$$A_CMD_END
!
! ROUTINE VALUE:
!
!	Normally 1 or EDT$_EDITORABO
!
! SIDE EFFECTS:
!
!	Performs an edit.
!
!--

    BEGIN

%IF %BLISS (BLISS32)
%THEN

    BUILTIN
	ACTUALCOUNT;

    MAP
	FILE_ROUT : REF VECTOR [2],
	WORK_ROUT : REF VECTOR [2],		! Contains address of work i/o routine and environment
	XLATE_ROUT : REF VECTOR [2],
	CMD_DESC : REF BLOCK [8, BYTE],
	JOU_DESC : REF BLOCK [8, BYTE],
	OUT_DESC : REF BLOCK [8, BYTE],
	INP_DESC : REF BLOCK [8, BYTE],
	OPTIONS_WRD : REF BITVECTOR [32];

%FI

    EXTERNAL ROUTINE
	EDT$$CALLFIO,				! sets up handler and calls file handling routine
	EDT$$EXE_CMD,				! Execute commands
	EDT$$TERMIN_RCOVMOD : NOVALUE,		! Handle end of journal file during /RECOVER
	EDT$$INIT,				! Do the initial processing
	EDT$$TERMIN,				! Do the final processing
	EDT$$FIOPN_ERR : NOVALUE,		! Print a message about a file error, with file name
	EDT$$TY_CURLN,				! Type out the current line
	EDT$$FMT_MSG : NOVALUE,			! Format and print a message
	EDT$$SET_COMFNAM;			! Open and close command files

%IF %BLISS (BLISS32)
%THEN

    EXTERNAL ROUTINE
	EDT$XLATE,
	EDT$FILEIO,
	EDT$WORKIO,
	EDT$$HANDLER,
	STR$COPY_DX,				! for copying all kinds of strings
	STR$FREE1_DX;				! for dynamic descriptor deallocation

%FI

    EXTERNAL
	EDT$$G_REENTRY,				! flag signifying re-entry
	EDT$$A_COM_NAM,				! User-specified command file name
	EDT$$A_CMD_NAM,				! Command file name
	EDT$$G_CMD_NAMLEN,			! Command file name length
	EDT$$T_CMD_NAM_DEF1 : VECTOR [, BYTE],	! First default command file name (counted ASCII string)
	EDT$$T_CMD_NAM_DEF2 : VECTOR [, BYTE],
					! First default command file default name (counted ASCII string)
	EDT$$T_CMD_NAM_DEF3 : VECTOR [, BYTE],	! Second default command file name (counted ASCII string)
	EDT$$T_CMD_NAM_DEF4 : VECTOR [, BYTE],
					! Second default command file default name (counted ASCII string)
	EDT$$G_EXITD,				! Did we exit with the last command?
	EDT$$A_JOU_NAM,				! Name of journal file
	EDT$$G_JOU_NAMLEN,			! length of journal file name
	EDT$$G_RCOV_MOD,			! do a recovery flag
	EDT$$G_EDIT_MOD,			! Current editing mode
	EDT$$G_EDIT_DFLTMOD,			! Default editing mode
	EDT$$A_INP_NAM,				! input file name
	EDT$$G_INP_NAMLEN,			! length of above name
	EDT$$G_FNF_MSGFLG,			! File not found message flag
	EDT$$A_OUT_NAM,				! Output file name
	EDT$$G_OUT_NAMLEN,			! Output file name length
	EDT$$G_IOFI_NFND,			! 1 = open failed due to file not found
	EDT$$V_OPTIONS : BITVECTOR [32],	! Options bits
	EDT$$G_LASTMSG,				! Message for change mode to print
	EDT$$A_CMD_BUF,				! Pointer to current location in command buffer
	EDT$$T_CMD_BUF,				! Command buffer
	EDT$$A_CMD_END,				! Pointer to end of command buffer
	EDT$$G_CC_DONE;				! 1 = control C actually aborted something

%IF %BLISS (BLISS32)
%THEN

    EXTERNAL
	EDT$$A_FILE_ROUT,			! address of fileio routine to use
	EDT$$G_FILE_ENV,			! environment word to pass fileio routine
	EDT$$A_XLATE_ROUT,			! address of translation routine
	EDT$$G_XLATE_ENV,			! environment word to pass xlate
	EDT$$A_WORK_ROUT,			! address of work i/o routine
	EDT$$G_WORK_ENV;			! environment word to pass work routine

%FI

    MESSAGES ((COMFILNEX, REENTRY, COMFILNOP, COMFILCLO, NOJNLFIL, INPFILNEX, NONSTDFIL, EDITORABO, ABOBYCC,
	CTRC__IGN));

%IF %BLISS (BLISS32)
%THEN

    ENABLE
	EDT$$HANDLER ();			! on VAX enable a handler for error processing

%FI

    LOCAL
	STATUS,
	FILE_DESC : BLOCK [8, BYTE],
	RHB_DESC : BLOCK [8, BYTE],

%IF %BLISS (BLISS32)
%THEN
	L_INP_DESC : BLOCK [8, BYTE],
	L_OUT_DESC : BLOCK [8, BYTE],
	L_CMD_DESC : BLOCK [8, BYTE],
	L_JOU_DESC : BLOCK [8, BYTE],
%FI

	PRIMARY_FILE_CONDITION,
	STRING_LENGTH;

!+
! Check the re-entry flag, so that the caller cannot
! re-enter EDT. A code of 67 indicates the everything
! o.k., a code of 68 means this process has already
! entered EDT. -Return an error message
!-

    IF (.EDT$$G_REENTRY EQL 67) THEN EDT$$G_REENTRY = 68 ELSE RETURN (EDT$_REENTRY);

    EDT$$G_EXITD = 0;
!+
! On VAX/VMS we have fields defined for descriptors.
! Fill them in.
!-

%IF %BLISS (BLISS32)
%THEN
    FILE_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    FILE_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    FILE_DESC [DSC$A_POINTER] = 0;
    FILE_DESC [DSC$W_LENGTH] = 0;
    RHB_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    RHB_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    RHB_DESC [DSC$A_POINTER] = 0;
    RHB_DESC [DSC$W_LENGTH] = 0;

    IF (ACTUALCOUNT () GTR 5) AND (.FILE_ROUT NEQ 0)
    THEN
	BEGIN
	EDT$$A_FILE_ROUT = .FILE_ROUT [0];	! get address for fileio routine passed
	EDT$$G_FILE_ENV = .FILE_ROUT [1];	! and environment word
	END
    ELSE
	BEGIN
	EDT$$A_FILE_ROUT = EDT$FILEIO;
	EDT$$G_FILE_ENV = 0;
	END;

    IF (ACTUALCOUNT () GTR 6) AND (.WORK_ROUT NEQ 0)
    THEN
	BEGIN
	EDT$$A_WORK_ROUT = .WORK_ROUT [0];
	EDT$$G_WORK_ENV = .FILE_ROUT [1];
	END
    ELSE
	BEGIN
	EDT$$A_WORK_ROUT = EDT$WORKIO;
	EDT$$G_WORK_ENV = 0;
	END;

    IF (ACTUALCOUNT () GTR 7) AND (.XLATE_ROUT NEQ 0)
    THEN
	BEGIN
	EDT$$A_XLATE_ROUT = .XLATE_ROUT [0];
	EDT$$G_XLATE_ENV = .XLATE_ROUT [1];
	END
    ELSE
	BEGIN
	EDT$$A_XLATE_ROUT = EDT$XLATE;
	EDT$$G_WORK_ENV = 0;
	END;

!+
! Get all the filenames and the name lengths out of the descriptor
! in which they were passed and into global variables.  On VMS we must
! first copy the formal to a local string, to be sure that the length
! and address fields mean what we think they do.
!-
    L_INP_DESC [DSC$W_LENGTH] = 0;
    L_INP_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    L_INP_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    L_INP_DESC [DSC$A_POINTER] = 0;
    STR$COPY_DX (L_INP_DESC, .INP_DESC);
    EDT$$A_INP_NAM = .L_INP_DESC [DSC$A_POINTER];
    EDT$$G_INP_NAMLEN = .L_INP_DESC [DSC$W_LENGTH];
    L_OUT_DESC [DSC$W_LENGTH] = 0;
    L_OUT_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    L_OUT_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    L_OUT_DESC [DSC$A_POINTER] = 0;

    IF (ACTUALCOUNT () GTR 1) AND (.OUT_DESC NEQ 0) THEN STR$COPY_DX (L_OUT_DESC, .OUT_DESC);

    EDT$$A_OUT_NAM = .L_OUT_DESC [DSC$A_POINTER];
    EDT$$G_OUT_NAMLEN = .L_OUT_DESC [DSC$W_LENGTH];
    L_CMD_DESC [DSC$W_LENGTH] = 0;
    L_CMD_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    L_CMD_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    L_CMD_DESC [DSC$A_POINTER] = 0;

    IF (ACTUALCOUNT () GTR 2) AND (.CMD_DESC NEQ 0) THEN STR$COPY_DX (L_CMD_DESC, .CMD_DESC);

    EDT$$A_CMD_NAM = .L_CMD_DESC [DSC$A_POINTER];
    EDT$$G_CMD_NAMLEN = .L_CMD_DESC [DSC$W_LENGTH];
    L_JOU_DESC [DSC$W_LENGTH] = 0;
    L_JOU_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    L_JOU_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    L_JOU_DESC [DSC$A_POINTER] = 0;

    IF (ACTUALCOUNT () GTR 3) AND (.JOU_DESC NEQ 0) THEN STR$COPY_DX (L_JOU_DESC, .JOU_DESC);

    EDT$$A_JOU_NAM = .L_JOU_DESC [DSC$A_POINTER];
    EDT$$G_JOU_NAMLEN = .L_JOU_DESC [DSC$W_LENGTH];
!+
! Copy the options word into global storage so the rest of EDT can test it.
!-

    IF (ACTUALCOUNT () GTR 4) AND (.OPTIONS_WRD NEQ 0)
    THEN
	EDT$$V_OPTIONS = ..OPTIONS_WRD
    ELSE
	EDT$$V_OPTIONS = 0;

%FI

!+
! Do the initial processing.
!-
    PRIMARY_FILE_CONDITION = EDT$$INIT ();
!+
! If initialization failed, abort right now.
!-

    IF (.PRIMARY_FILE_CONDITION EQL 3) THEN RETURN (EDT$_EDITORABO);

!+
! If /NOCREATE was specified then exit if file was not found
!-

    IF ((.PRIMARY_FILE_CONDITION EQL 0) AND ((.EDT$$V_OPTIONS AND EDT$M_NOCREATE) NEQ 0))
    THEN
	BEGIN

	IF .EDT$$G_FNF_MSGFLG THEN EDT$$FMT_MSG (EDT$_INPFILNEX);

%IF %BLISS (BLISS32)
%THEN
	STR$FREE1_DX (FILE_DESC);
	STR$FREE1_DX (RHB_DESC);
	STR$FREE1_DX (L_INP_DESC);
	STR$FREE1_DX (L_OUT_DESC);
	STR$FREE1_DX (L_CMD_DESC);
	STR$FREE1_DX (L_JOU_DESC);
%FI

	EDT$$G_REENTRY = 67;			! set up reentry flag so we can call EDT again
	RETURN (1);
	END;

!+
! Open the journal file.  If recovery was specified, open it so we can read
! from it.
!-
    BEGIN

    LOCAL
	RHB_LEN;

    RHB_LEN = %CHARCOUNT (JOU_DEFLT);
    STRING_DESC (RHB_DESC, RHB_LEN, CH$PTR (UPLIT (JOU_DEFLT)));
    END;

    IF .EDT$$G_RCOV_MOD
    THEN
	BEGIN
	STRING_DESC (FILE_DESC, EDT$$G_JOU_NAMLEN, .EDT$$A_JOU_NAM);
	STATUS = EDT$$CALLFIO (EDT$K_OPEN_IN_OUT, EDT$K_JOURNAL_FILE, FILE_DESC, RHB_DESC);

	IF ( NOT .STATUS)
	THEN
	    BEGIN
	    EDT$$FIOPN_ERR (EDT$_NOJNLFIL, FILE_DESC);
	    RETURN (EDT$_EDITORABO);
	    END;

	END
    ELSE
!+
! We are not in recovery mode; just open the journal file for write.
!-

	IF ((.EDT$$V_OPTIONS AND EDT$M_NOJOURNAL) EQL 0)	! NOT /NOJOURNAL
	THEN
	    BEGIN
	    STRING_DESC (FILE_DESC, EDT$$G_JOU_NAMLEN, .EDT$$A_JOU_NAM);
	    STATUS = EDT$$CALLFIO (EDT$K_OPEN_OUTPUT_NOSEQ, EDT$K_JOURNAL_FILE, FILE_DESC, RHB_DESC);
	    END;

!+
! Make sure the journal file was opened.
!-

    IF (( NOT .STATUS) AND (.EDT$$V_OPTIONS AND EDT$M_NOJOURNAL) EQL 0)
    THEN
	BEGIN
	EDT$$FIOPN_ERR (EDT$_NOJNLFIL, FILE_DESC);
	RETURN (EDT$_EDITORABO);
	END;

!+
! Execute the startup file, if one was provided.  The startup file is always executed
! in line mode.
!-
    EDT$$G_EDIT_MOD = LINE_MODE;

    IF ((.EDT$$V_OPTIONS AND EDT$M_NOCOMMAND) EQL 0)
    THEN
	BEGIN

	IF (.EDT$$G_CMD_NAMLEN EQL 0)
	THEN
	    BEGIN
!+
! No command file name was provided, use the default.  Note that there are
! two default names; if the first is not found we try the second.
!-
	    STATUS = EDT$$SET_COMFNAM (		!
		CH$PTR (EDT$$T_CMD_NAM_DEF1, 1), 	! Name
		CH$RCHAR (EDT$$T_CMD_NAM_DEF1), 	! Length of name
		CH$PTR (EDT$$T_CMD_NAM_DEF2, 1), 	! Default name
		CH$RCHAR (EDT$$T_CMD_NAM_DEF2)	! Default name length
	    );

	    IF ( NOT .STATUS)			!
	    THEN
		STATUS = EDT$$SET_COMFNAM (	!
		    CH$PTR (EDT$$T_CMD_NAM_DEF3, 1), 	! Name
		    CH$RCHAR (EDT$$T_CMD_NAM_DEF3), 	! Length of name
		    CH$PTR (EDT$$T_CMD_NAM_DEF4, 1), 	! Default name
		    CH$RCHAR (EDT$$T_CMD_NAM_DEF4)	! Default name length
		);

	    END
	ELSE
	    STATUS = EDT$$SET_COMFNAM (.EDT$$A_CMD_NAM, .EDT$$G_CMD_NAMLEN, CH$PTR (EDT$$T_CMD_NAM_DEF4, 1),
		CH$RCHAR (EDT$$T_CMD_NAM_DEF4));

	IF .STATUS
	THEN
	    BEGIN

	    IF (EDT$$EXE_CMD (INP_COMMAND) EQL 2)
	    THEN
		BEGIN
!+
! The startup file was terminated by control C.
!-

		IF .EDT$$G_CC_DONE THEN EDT$$FMT_MSG (EDT$_ABOBYCC) ELSE EDT$$FMT_MSG (EDT$_CTRC__IGN);

		EDT$$A_CMD_BUF = EDT$$T_CMD_BUF;
		EDT$$A_CMD_END = .EDT$$A_CMD_BUF;
		CH$WCHAR (%C'!', .EDT$$A_CMD_END);
!+
! Make sure we stay in line mode so the message is visible.
!-
		EDT$$G_EDIT_DFLTMOD = LINE_MODE;
		END;

	    END
	ELSE

	    IF ((.EDT$$V_OPTIONS AND EDT$M_COMMAND) NEQ 0)
	    THEN
		BEGIN
		STRING_DESC (FILE_DESC, EDT$$G_CMD_NAMLEN, .EDT$$A_CMD_NAM);
		EDT$$FIOPN_ERR (

		    IF .EDT$$G_IOFI_NFND THEN EDT$_COMFILNEX ELSE EDT$_COMFILNOP, FILE_DESC);

		RETURN (EDT$_EDITORABO);
		END;

	END;

!+
! Make sure the command file is closed, and the name is null.
!-
    STATUS = EDT$$SET_COMFNAM (0, 0, 0, 0);	! Close the command file

    IF ( NOT .STATUS) THEN RETURN (EDT$_EDITORABO);

!+
! Use the default mode setting.
!-
    EDT$$G_EDIT_MOD = .EDT$$G_EDIT_DFLTMOD;
!+
! Give an error message if the primary file was not found or does not have standard format,
! unless we are about to enter change mode, in which case defer the message.
!-

    CASE .PRIMARY_FILE_CONDITION FROM 0 TO 2 OF
	SET

	[0] :

	    IF (.EDT$$G_EDIT_MOD EQL LINE_MODE)
	    THEN
		BEGIN

		IF .EDT$$G_FNF_MSGFLG THEN EDT$$FMT_MSG (EDT$_INPFILNEX);

		END
	    ELSE

		IF .EDT$$G_FNF_MSGFLG THEN EDT$$G_LASTMSG = EDT$_INPFILNEX;

	[1] :
	    BEGIN
	    0
	    END;

	[2] :

	    IF (.EDT$$G_EDIT_MOD EQL LINE_MODE)
	    THEN
		EDT$$FMT_MSG (EDT$_NONSTDFIL)
	    ELSE
		EDT$$G_LASTMSG = EDT$_NONSTDFIL;

	TES;

!+
! If we are in recovery mode, execute the remainder of the journal file.
! (Part of the journal file may have been used to respond to SUBSTITUTE/QUERY
! commands in the startup file.)
!-

    IF (.EDT$$G_RCOV_MOD)
    THEN
	BEGIN

	IF (EDT$$EXE_CMD (INP_JOURNAL) EQL 2)
	THEN
	    BEGIN
!+
! The recovery process was interrupted by a control C.  Bail out.
!-

	    IF .EDT$$G_CC_DONE THEN RETURN (EDT$_ABOBYCC) ELSE RETURN (EDT$_CTRC__IGN);

	    END;

	EDT$$TERMIN_RCOVMOD ();
	END;

!+
! If we are in line mode, then print the current line.
!-

    IF (.EDT$$G_EDIT_MOD EQL LINE_MODE)
    THEN
	BEGIN
	EDT$$TY_CURLN ();
	END;

!+
! And execute the main stream of commands.
!-
    EDT$$EXE_CMD (INP_TERM);
!+
! Do the finalization processing.
!-
    EDT$$TERMIN ();
!+
! On the VAX we need to deallocate the dynamic descriptors
!-

%IF %BLISS (BLISS32)
%THEN
    STR$FREE1_DX (FILE_DESC);
    STR$FREE1_DX (RHB_DESC);
    STR$FREE1_DX (L_INP_DESC);
    STR$FREE1_DX (L_OUT_DESC);
    STR$FREE1_DX (L_CMD_DESC);
    STR$FREE1_DX (L_JOU_DESC);
%FI

    EDT$$G_REENTRY = 67;			! set up reentry flag so we can call EDT again
    RETURN (1);
    END;					! of routine EDT$EDIT

!<BLF/PAGE>

END						! of module EDT$MAIN

ELUDOM
