%TITLE 'Process flags'
MODULE DOFLG ( IDENT = 'V04-000'
    	       %BLISS32 [ , ADDRESSING_MODE ( EXTERNAL =    LONG_RELATIVE,
    					      NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Flag processing
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday
!
! CREATION DATE: April 1978
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	020	REM00020	Ray Marshall	17-November-1983
!		Added supporting logic for the case rules for the DEC multi-
!		  national character set.
!
! 	019	KFA00019	Ken Alden	06-Oct-1983
!		For DSRPLUS: Removed call to endwrd during pass-through
!
!	018	KFA00018	Ken Alden	13-Sep-1983
!		For DSRPLUS: Added sca_wrd_pass for ENDWRD cooperation.
!
!	017	KFA00017	Ken Alden	11-Jun-1983
!		Fixed the bolded, underline TAB bug.
!
!	016	KFA00016	Ken Alden	21-Mar-1983
!		Removed error message RNFIPF.
!
!	015	KFA00015	Ken Alden	21-Mar-1983
!		Eliminate the Passthrough flag, functionality now works
!		with accept flag
!
!	014	KAD00014	Keith Dawson	20-Mar-1983
!		Fixed bug: passthrough was visible to DSR.
!
!	013	KFA00013	Ken Alden 	15-Mar-1983
!		For DSRPLUS: added recognition of passthrough flag
!
!	012	KAD00012	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    SUBXR : NOVALUE,				!Used by .SUBINDEX and .ENTRY commands
    XR : NOVALUE;				!Used for processing Index flag

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

EXTERNAL
    FLGT : FLAG_TABLE [FLAG_COUNT],
    IRA : FIXED_STRING,
    KHAR,
    MRA : REF FIXED_STRING,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION,
    XMRA : FIXED_STRING,
    XTSF : VECTOR;
!
EXTERNAL LITERAL 				! Error messages
    RNFFEL,
    RNFFNA,
    RNFLOC,
    RNFLTC,
    RNFSTR;

EXTERNAL ROUTINE
    endchr,
    endwrd,
    erm,
    erms,
    fndflg,
    outlin,
    outxph,
%IF dsrplus %THEN
    newsub,
%ELSE
    subst,
%FI
    rskips,
    setcas;

GLOBAL ROUTINE DOFLG : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!
! FORMAL PARAMETERS: None
!
! IMPLICIT INPUTS:
!
!	KHAR contains the character (flag) to be processed.
!
! IMPLICIT OUTPUTS: None
!
! ROUTINE VALUE:
! COMPLETION CODES: None
!
! SIDE EFFECTS: None
!
!--

    BEGIN

    OWN
	SCA_DO_HOLD,
	SCA_WRD_CHOLD;

    LOCAL
	WHICH_FLAG;

    WHICH_FLAG = FNDFLG (.KHAR);		!Identify the flag to be processed.

    CASE .WHICH_FLAG FROM 0 TO FLAG_COUNT - 1 OF
	SET

	[SUB_FLAG] :
	    BEGIN
	    !Substitute flag
%IF dsrplus %THEN
    	    newsub ();
%ELSE
	    SUBST ();
%FI
	    RETURN;
	    END;

	[QUO_FLAG] :
	    BEGIN
	    !Quote flag
	    KCNS ();				!Get next character.

	    IF .KHAR EQL RINTES
	    THEN
		BEGIN
		ERM (RNFFEL, CH$PTR (UPLIT ('ACCEPT')), 6);
		ERMS  (RNFSTR, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)));
		RETURN;				! Ignore a Quote flag at the end of the line.
		END
	    ELSE 				!
		BEGIN
		SCA_FRC_CHR = TRUE;		!Don't translate this character.
		ENDCHR (.KHAR);			!Output character as is.
		KCNS ();			!Get next character.
		RETURN;
		END;

	    END;

	[UPP_FLAG] :
	    BEGIN
	    !Uppercase flag
	    KCNS ();				!Get next character.

	    IF .KHAR EQL .FLGT [UPP_FLAG, FLAG_CHARACTER]
	    THEN
		BEGIN				!Doubled Uppercase flags
		SETCAS (LEAVE_CASE);
		SCA_FRC_CASE = TRUE;
		KCNS ();
		RETURN;
		END;

	    IF (.KHAR EQL .FLGT [CAP_FLAG, FLAG_CHARACTER])
		AND .FLGT [CAP_FLAG, FLAG_ENABLED]
	    THEN
	    !Uppercase flag followed by Capitalize flag (i.e., ^<)
		BEGIN
		SETCAS (FORCE_UPPER);
		SCA_FRC_CASE = TRUE;
		KCNS ();
		RETURN
		END;

	    IF (.KHAR EQL .FLGT [UND_FLAG, FLAG_CHARACTER])
		AND .FLGT [UND_FLAG, FLAG_ENABLED]
	    THEN
	    !Uppercase flag followed by Underline flag (i.e., ^&)
		BEGIN				!Turn on global underlining
		SCA_UND = TRUE;
		SCA_WRD_C_UND = .SCA_DO_UND;
		KCNS ();
		RETURN;
		END;

	    IF (.KHAR EQL .FLGT [BLD_FLAG, FLAG_CHARACTER])
		AND .FLGT [BLD_FLAG, FLAG_ENABLED]
	    THEN
	    !Uppercase flag followed by Bold flag (i.e., ^*)
		BEGIN				!Turn on global bolding
		SCA_BLD = TRUE;
		SCA_WRD_C_BLD = .SCA_DO_BLD;
		KCNS ();
		RETURN;
		END;

%IF DSRPLUS %THEN
	    IF (.KHAR EQL .FLGT [QUO_FLAG, FLAG_CHARACTER])
		AND .FLGT [QUO_FLAG, FLAG_ENABLED]
	    THEN
	    !Uppercase flag followed by Accept flag (i.e., ^_)
		BEGIN				!Turn on global accept
		sca_pass = true;		!Now passing through (ENDCHR)
		sca_wrd_pass = true;		!This 'word' is a passthr. (ENDWRD)
		sca_do_hold = .sca_do_nbits;	!Save status of bold/under
		sca_wrd_chold = .sca_wrd_cnbits;!
		sca_do_nbits = false;		!and turn it temp. off.
		sca_wrd_cnbits = false;		!
		KCNS ();
		RETURN;
		END;

%FI
	    !This gets done for an Uppercase flag standing alone.
	    SCA_FRC_CHR = TRUE;
	    SCA_WRD_FC_LT = %C'A' - %C'a';
	    SCA_WRD_OC_LT = %C'A' - %C'a';
	    SCA_WRD_FC_UT = 0;
	    SCA_WRD_OC_UT = 0;

	    SCA_MNWRD_FC_LT = %DECIMAL'192' - %DECIMAL'224';
	    SCA_MNWRD_OC_LT = %DECIMAL'192' - %DECIMAL'224';
	    SCA_MNWRD_FC_UT = 0;
	    SCA_MNWRD_OC_UT = 0;
	    RETURN
	    END;

	[LOW_FLAG] :
	    BEGIN
	    !Lowercase flag
	    KCNS ();				!Get next character.

	    IF .KHAR EQL .FLGT [LOW_FLAG, FLAG_CHARACTER]
	    THEN
		BEGIN				! Doubled Lowercase flags
		SETCAS (FORCE_LOWER);
		SCA_FRC_CASE = TRUE;
		KCNS ();
		RETURN;
		END;

	    IF (.KHAR EQL .FLGT [UND_FLAG, FLAG_CHARACTER])
		AND .FLGT [UND_FLAG, FLAG_ENABLED]
	    THEN
	    !Lowercase flag followed by Underline flag (i.e., \&)
		BEGIN				!Turn off global underlining
		SCA_UND = FALSE;
		SCA_WRD_C_UND = FALSE;
		KCNS ();
		RETURN;
		END;

	    IF (.KHAR EQL .FLGT [BLD_FLAG, FLAG_CHARACTER])
		AND .FLGT [BLD_FLAG, FLAG_ENABLED]
	    THEN
	    !Lowercase flag followed by Bold flag (i.e., \*)
		BEGIN				!Turn off global bolding
		SCA_BLD = FALSE;
		SCA_WRD_C_BLD = FALSE;
		KCNS ();
		RETURN;
		END;

%IF DSRPLUS %THEN
	    IF (.KHAR EQL .FLGT [QUO_FLAG, FLAG_CHARACTER])
		AND .FLGT [QUO_FLAG, FLAG_ENABLED]
	    THEN
	    !Lowercase flag followed by Accept flag (i.e., \_)
		BEGIN				!Turn off global Accept
		IF .SCA_PASS EQL TRUE
		THEN
		    BEGIN
		    SCA_DO_NBITS = .SCA_DO_HOLD;	!Restore status of bold/under
		    SCA_WRD_CNBITS = .SCA_WRD_CHOLD;	!
		    END;
		SCA_PASS = FALSE;
		KCNS ();
		RETURN;
		END;
%FI
	    !Lowercase flag standing alone
	    SCA_FRC_CHR = TRUE;
	    SCA_WRD_FC_UT = %C'a' - %C'A';
	    SCA_WRD_OC_UT = %C'a' - %C'A';
	    SCA_WRD_FC_LT = 0;
	    SCA_WRD_OC_LT = 0;

	    SCA_MNWRD_FC_UT = %DECIMAL'224' - %DECIMAL'192';
	    SCA_MNWRD_OC_UT = %DECIMAL'224' - %DECIMAL'192';
	    SCA_MNWRD_FC_LT = 0;
	    SCA_MNWRD_OC_LT = 0;
	    RETURN
	    END;

	[PER_FLAG] :
	    BEGIN
	    !Capitalize flag
	    SCA_WRD_LC_PNCT = .SCA_FILL;	!Double space only if .FILL.
	    KCNS ();				!Discard the flag.
	    END;

	[BRK_FLAG] :
	    BEGIN
	    !Break flag
	
	    KCNS ();				!Skip over flag.
 
	    IF (.SCA_WRD_CPEND EQL RINTES)	!
		OR (.KHAR EQL %C' ')		!Space?
		OR (.KHAR EQL %O'011')		!TAB??
	    THEN
		!'|' Before/after a space/tab or starting a line
		ERMS  (RNFFNA, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)))
	    ELSE

		IF .KHAR EQL RINTES
		THEN
		    BEGIN
		    ERM (RNFFEL, CH$PTR (UPLIT ('BREAK')), 5);
		    ERMS  (RNFSTR, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)));
		    END
		ELSE
		    !'|' after some text is ok.
		    BEGIN
		    ENDWRD (FALSE,FALSE, FALSE);	!End word with no spacing or justification.
		    SCA_FC_CASE = FALSE;		!Do not cap next character.
		    END;
	    END;

	[CAP_FLAG] :
	    BEGIN
	    !Capitalize flag

	    IF .SCA_WORD_SET
	    THEN
	    !A Capitalize flag is already in effect.
	    !Turn it off.  I.e. "<" is a flip-flop.
		BEGIN				!Restore global case rules
		SCA_WORD_SET = FALSE;
		SCA_FC_UT = .SCA_FCBE_UT;
		SCA_OC_UT = .SCA_OCBE_UT;
		SCA_FC_LT = .SCA_FCBE_LT;
		SCA_OC_LT = .SCA_OCBE_LT;
		SCA_WRD_FC_UT = .SCA_FCBE_UT;
		SCA_WRD_OC_UT = .SCA_OCBE_UT;
		SCA_WRD_FC_LT = .SCA_FCBE_LT;
		SCA_WRD_OC_LT = .SCA_OCBE_LT;

		SCA_MNFC_UT = .SCA_MNFCBE_UT;
		SCA_MNOC_UT = .SCA_MNOCBE_UT;
		SCA_MNFC_LT = .SCA_MNFCBE_LT;
		SCA_MNOC_LT = .SCA_MNOCBE_LT;
		SCA_MNWRD_FC_UT = .SCA_MNFCBE_UT;
		SCA_MNWRD_OC_UT = .SCA_MNOCBE_UT;
		SCA_MNWRD_FC_LT = .SCA_MNFCBE_LT;
		SCA_MNWRD_OC_LT = .SCA_MNOCBE_LT
		END
	    ELSE 				!
		BEGIN
		SCA_WORD_SET = TRUE;
		SCA_FCBE_UT = .SCA_FC_UT;
		SCA_FCBE_LT = .SCA_FC_LT;
		SCA_OCBE_UT = .SCA_OC_UT;
		SCA_OCBE_LT = .SCA_OC_LT;

		SCA_MNFCBE_UT = .SCA_MNFC_UT;
		SCA_MNFCBE_LT = .SCA_MNFC_LT;
		SCA_MNOCBE_UT = .SCA_MNOC_UT;
		SCA_MNOCBE_LT = .SCA_MNOC_LT;

		! Establish new case rules for this word.
		SCA_WRD_FC_LT = %C'A' - %C'a';
		SCA_WRD_OC_LT = %C'A' - %C'a';
		SCA_WRD_FC_UT = 0;
		SCA_WRD_OC_UT = 0;
		SCA_FC_LT = %C'A' - %C'a';
		SCA_OC_LT = %C'A' - %C'a';
		SCA_FC_UT = 0;
		SCA_OC_UT = 0;

		SCA_MNWRD_FC_LT = %DECIMAL'192' - %DECIMAL'224';
		SCA_MNWRD_OC_LT = %DECIMAL'192' - %DECIMAL'224';
		SCA_MNWRD_FC_UT = 0;
		SCA_MNWRD_OC_UT = 0;
		SCA_MNFC_LT = %DECIMAL'192' - %DECIMAL'224';
		SCA_MNFC_UT = 0;
		SCA_MNOC_LT = %DECIMAL'192' - %DECIMAL'224';
		SCA_MNOC_UT = 0
		END;

	    KCNS ();
	    RETURN;
	    END;

	[UND_FLAG] :
	    BEGIN
	    !Underline flag alone.
	    KCNS ();
    	    IF .KHAR NEQ %O'011'		!Next character a TAB?
    	    THEN
    		BEGIN
	    	SCA_WRD_AC_UND = .SCA_DO_UND;	! Underline a single character
    		END;

	    RETURN;
	    END;

	[BLD_FLAG] :
	    BEGIN
	    !Bold flag alone.
	    KCNS ();
    	    IF .KHAR NEQ %O'011'		!Next character a TAB?
    	    THEN
    		BEGIN
    		SCA_WRD_AC_BLD = .SCA_DO_BLD;	! Bold a single character
		END;
	    
	    RETURN;
	    END;

	[SPA_FLAG] :
	    BEGIN
	    !Space flag

	    IF .SCA_X_FLAG
	    THEN
	    !A Space flag completes a sequence started by the Index flag.
		XR ();

	    IF .SCA_WORD_SET
	    THEN
	    !A Space flag terminates a sequence started by
	    !the Capitalize flag.
		BEGIN				!Restore global case rules
		SCA_WORD_SET = FALSE;
		SCA_FC_UT = .SCA_FCBE_UT;
		SCA_OC_UT = .SCA_OCBE_UT;
		SCA_FC_LT = .SCA_FCBE_LT;
		SCA_OC_LT = .SCA_OCBE_LT;
		SCA_WRD_FC_UT = .SCA_FCBE_UT;
		SCA_WRD_OC_UT = .SCA_OCBE_UT;
		SCA_WRD_FC_LT = .SCA_FCBE_LT;
		SCA_WRD_OC_LT = .SCA_OCBE_LT;

		SCA_MNFC_UT = .SCA_MNFCBE_UT;
		SCA_MNOC_UT = .SCA_MNOCBE_UT;
		SCA_MNFC_LT = .SCA_MNFCBE_LT;
		SCA_MNOC_LT = .SCA_MNOCBE_LT;
		SCA_MNWRD_FC_UT = .SCA_MNFCBE_UT;
		SCA_MNWRD_OC_UT = .SCA_MNOCBE_UT;
		SCA_MNWRD_FC_LT = .SCA_MNFCBE_LT;
		SCA_MNWRD_OC_LT = .SCA_MNOCBE_LT

		END;

	    SCA_WRD_C_UND = FALSE;		!Do not underline this type of space unless forced.
	    ENDCHR (%C' ');			!Output a space
	    SCA_FRC_CASE = FALSE;
	    SCA_FC_CASE = TRUE;			!Handle case as if a new word.
	    KCNS ();
	    RETURN;
	    END;

	[IND_FLAG] :
	    BEGIN
	    !Index flag
	    IF .SCA_XROUTINE
	    THEN
		SUBXR ()
	    ELSE
		XR ();
	    RETURN;
	    END;

	[HYP_FLAG] :
	    BEGIN
	    !Hyphenation flag
	    KCNS ();				!Skip flag.
	    IF (.SCA_WRD_CPEND EQL RINTES)	!
		OR (.KHAR EQL %C' ')		!Space?
		OR (.KHAR EQL %O'011')		!TAB??
	    THEN
		!Hyphenate before/after a space/tab or starting a line
		ERMS  (RNFFNA, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)))
	    ELSE

		IF .KHAR EQL RINTES
		THEN
		    BEGIN
		    ERM (RNFFEL, CH$PTR (UPLIT ('HYPHENATE')), 9);
		    ERMS  (RNFSTR, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)));
		    END
		ELSE
		    !Hyphenation between some text is ok.
		    IF .SCA_DO_HYP
		    THEN
			!Hyphenation is only done if user said
			!to do it (.HYPHENATION).  Otherwise it's ignored.
			BEGIN
			ENDWRD (FALSE,FALSE, TRUE);	!End word with hyphenation.
			SCA_FC_CASE = FALSE;		!Do not cap next character.
			END;
	    RETURN;
	    END;

	[OVR_FLAG] :
	    BEGIN
	    !Overstrike flag
	    KCNS ();

	    IF .KHAR EQL RINTES
	    THEN
		BEGIN
		ERM (RNFFEL, CH$PTR (UPLIT ('OVERSTRIKE')), 10);
		ERMS  (RNFSTR, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)));
		RETURN;		! Ignore Overstrike flag at the end of a line.
		END;

	    IF .SCA_WRD_CPEND EQL RINTES
	    THEN
		BEGIN
		!OVERSTRIKE flag standing alone
		ERMS  (RNFFNA, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)));
		END
	    ELSE
		IF .SCA_DO_OVR
		THEN
		    !User did not say .NO OVERSTRIKING, so really overstrike.
		    BEGIN
		    IF (.FS_MAXSIZE (MRA) - .FS_LENGTH (MRA)) LSS 3
		    THEN	!No room for overstriking code
			ERMS (RNFLTC, .FS_NEXT (IRA), .FS_LENGTH (IRA))
		    ELSE 
			!Generate overstriking code.
			BEGIN
			FS_WCHAR (MRA, RINTES);
			FS_WCHAR (MRA, %C'O');
			FS_WCHAR (MRA, .KHAR);
			SCA_WRD_INT_L = .SCA_WRD_INT_L + 3;
			SCA_WRD_OVR = TRUE
			END;
		    END;

	    KCNS ();				! Get next character.
	    RETURN;
	    END;

%IF DSRPLUS %THEN
	[NPX_FLAG] :
	    BEGIN
	    !
	    !If not an indexing command, then treat the Nopermute flag 
	    !as an ordinary character.
	    IF NOT .TSF_INDEX
	    THEN
		BEGIN
		ENDCHR (.KHAR);		!Output character as-is.
		KCNS ();
		RETURN;
		END;

	    KCNS ();			!Position past the flag.

	    IF .TSF_XYPLUS		!Do no more unless this was an .XP/.YP command.
	    THEN
		BEGIN
		IF (.SCA_WRD_CPEND NEQ RINTES)
		    OR (.KHAR EQL %C' ')		!Space?
		    OR (.KHAR EQL %O'011')		!Tab?
		THEN
		    BEGIN
		    !Nopermute before a space/tab or in the middle of a word
		    ERMS (RNFFNA, .FS_START(IRA), CH$DIFF (.FS_NEXT(IRA), .FS_START(IRA)));
		    RETURN;
		    END;

		IF .KHAR EQL RINTES
		THEN
		    BEGIN
		    ERM (RNFFEL, CH$PTR (UPLIT ('NOPERMUTE')), 9);
		    ERMS  (RNFSTR, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)));
		    RETURN;
		    END;

		IF (.FS_MAXSIZE (MRA) - .FS_LENGTH (MRA)) LSS 3
		THEN
		    BEGIN			!No room for nopermute code.
		    ERMS (RNFLTC, .FS_NEXT (IRA), .FS_LENGTH (IRA));
		    RETURN;
		    END;

		!Now generate the no-permute escape sequence.
		FS_WCHAR (MRA, RINTES);
		FS_WCHAR (MRA, %C'P');
		FS_WCHAR (MRA, %C' ');
		SCA_WRD_INT_L = .SCA_WRD_INT_L + 3;
		END;
	    END;
%FI
	[INRANGE] :
	    BEGIN
	    KCNS ();
	    RETURN;
	    END;

	[OUTRANGE] :
	    BEGIN
	    KCNS ();
	    RETURN;
	    END;
	TES;

    RETURN;
    END;					!End of DOFLG

GLOBAL ROUTINE SUBXR : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called when RUNOFF is processing a .SUBINDEX or
!	.ENTRY command, and a Subindex flag is encountered. The character
!	sequence that the previous Subindex flag started is terminated, and the
!	next one is set up. 
!
! FORMAL PARAMETERS:  None
!
! IMPLICIT INPUTS: None
!
! IMPLICIT OUTPUTS: None
!
! ROUTINE VALUE:
! COMPLETION CODES: None
!
! SIDE EFFECTS: None
!
!--

    BEGIN
    !Always position past the Subindex flag
    KCNS ();
    !Skip spaces/tabs preceeding the next item.
    RSKIPS (IRA);

    !Make sure user didn't put the Subindex flag at the end of
    !the line.
    IF .KHAR EQL RINTES			!End of line?
    THEN
	BEGIN
	ERM (RNFFEL, CH$PTR (UPLIT ('SUBINDEX')), 8);
	ERMS  (RNFSTR, .FS_START (IRA), CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)) - 1);
	RETURN
	END;

    !Make sure user didn't put the Subindex flag at the start of the line.
    !The check for the start of the line is done by seeing if there
    !is anything in the index output buffer yet, as would be the case
    !if the two pointers are indeed equal.  On top of that, it's
    !important to take account of single-character entires.  Remember
    !that ENDCHR won't put a character into the MRA until the next
    !character forces it out.  So checking for it being the first character 
    !detects the one-character-entry case.
    IF .SCA_FC					!First character?
	AND (.FS_START (MRA) EQL .FS_NEXT (MRA))!Start of line?
    THEN
	BEGIN
	ERMS (RNFFNA,
	     .FS_START (IRA),
	     CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)) - 1);
	RETURN
	END;

    !Detect ">>" and complain.
    !The check is done by looking back at what's been generated to see if
    !all there is is a justification mark, to separate words.  Similarily,
    !the case of a one-character entry is taken into account.
    BEGIN
    LOCAL
	TEMP_PTR;
    TEMP_PTR = CH$PLUS(.FS_NEXT (MRA), -3);	!Point to start of a sequence.
    IF (CH$RCHAR_A (TEMP_PTR) EQL RINTES)	!
	AND (CH$RCHAR (.TEMP_PTR) EQL %C'J')	!
	AND .SCA_FC
    THEN
	BEGIN
	ERMS (RNFFNA,
	     .FS_START (IRA),
	     CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)) - 1);
	RETURN
	END
    END;

    IF .SCA_WRD_CPEND NEQ RINTES
    THEN
	ENDWRD (FALSE, FALSE, FALSE)
    ELSE
    !Dump trailing spaces
	BEGIN
	LOCAL
	    TEMP_PTR;

	FS_NEXT (MRA) = CH$PLUS (.FS_NEXT (MRA), -.SCA_WRD_LST_SP);
	FS_LENGTH (MRA) = .FS_LENGTH (MRA) - .SCA_WRD_LST_SP;
	SCA_WRD_LST_SP = 0;

	!Check for wierd things like .X ^^(spaces only), or .X a>^^(spaces)>etc
	TEMP_PTR = CH$PLUS(.FS_NEXT (MRA), -3);	!Point to start of a sequence.
	IF ((CH$RCHAR_A (TEMP_PTR) EQL RINTES)		!
	    AND (CH$RCHAR (.TEMP_PTR) EQL %C'J'))	!Catches .X whatever>^^(spaces)>whatever
	    OR (.FS_START(MRA) EQL .FS_NEXT(MRA))	!Catches .X^^(spaces)>whatever
	THEN
	    BEGIN
	    ERMS (RNFFNA,
		 .FS_START (IRA),
		 CH$DIFF (.FS_NEXT (IRA), .FS_START (IRA)) - 1);
	    RETURN
	    END
	END;

    !An end of word marker separates character sequences.
    FS_WCHAR (MRA, RINTES);
    FS_WCHAR (MRA, %C'J');
    FS_WCHAR (MRA, %C' ');
    TSF_INT_HL = .TSF_INT_HL + 3;
    TSF_JUS_CNT = .TSF_JUS_CNT + 1;
    SCA_WRD_PNTR = .FS_NEXT (MRA)
    END;					!End of SUBXR

GLOBAL ROUTINE XR : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called when an Index flag is seen. It is also
!	called when a space is seen at the end of a word, and that word is
!	to be entered into the index. 
!
! FORMAL PARAMETERS: None
!
! IMPLICIT INPUTS: None
!
! IMPLICIT OUTPUTS: None
!
! ROUTINE VALUE:
! COMPLETION CODES: None
!
! SIDE EFFECTS: None
!
!--

    BEGIN

    IF .KHAR EQL .FLGT [IND_FLAG, FLAG_CHARACTER]
    THEN 
	KCNS ();				!Position past Index flag

    !If indexing is already on, terminate current phrase and enter
    !it into the idex.

    IF .SCA_X_FLAG
    THEN 
	BEGIN
	OUTXPH ();				!Output word to index.
	RETURN;
	END
    ELSE
    !Turn on indexing if indexing is wanted.
	SCA_X_FLAG = .SCA_DO_IND;

    IF .SCA_X_FLAG
    THEN
    !The index flag has just been turned on.  Initialize the
    !work areas for the Index flag.
	BEGIN
	FS_INIT (XMRA);

	INCR I FROM 0 TO TSF_SIZE - 1 DO
	    XTSF [.I] = 0;

	END;

    END;					!End of XR

END						!End of module
ELUDOM
