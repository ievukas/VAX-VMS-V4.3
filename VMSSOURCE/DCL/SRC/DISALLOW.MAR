	.TITLE	DISALLOW - Evaluate Disallow Expressions
	.IDENT	'V04-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; AUTHOR:	Peter George 01-MAR-83
;
; ABSTRACT:	These routines are called to evaluate the disallow expression
;		for a command that has just been successfully parsed.
;
; MODIFICATIONS:
;
;	V03-006	HWS0098		Harold Schultz		02-Aug-1984
;		Treat all qualifiers as global for purposes of the
;		disallow expression. Disregard notion of a "local"
;		qualifier for the present. (the question of local
;		qualifiers will be addressed in a future version)
;
;	V03-005	HWS0089		Harold Schultz		22-Jul-1984
;		Fix checking for presence of local qualifiers.
;
;	V03-004	PCG0004		Peter George		03-May-1984
;		Allowing checking of keywords on negated qualifiers.
;
;	V03-003	PCG0003		Peter George		06-Dec-1983
;		Add NEG operator.
;
;	V03-002	PCG0002		Peter George		11-May-1983
;		Make path list search independent of token sorting.
;
;	V03-001	PCG0001		Peter George		30-Apr-1983
;		Make the expression evaluation more robust.
;---


;
; Macro library calls
;
	$$CLITABDEF			; Define table structures
	PRCDEF				; Define process work area
	WRKDEF				; Define command work area
	PTRDEF				; Define result parse descriptor

	.PSECT	DCL$ZCODE,BYTE,RD,NOWRT

	.SBTTL	Evaluate Disallow Expression
;---
; DCL$EVAL_DISALLOW - Evaluate disallow expression
;
; This routine is called after the command verb has been parsed, to detect
; qualifier and parameter conflicts.
;
; INPUTS:
;
;	R10 =	Address of command work area (WRK)
;
; OUTPUTS:
;
;	R0 =	Value of disallow expression - true or false
;
; REGISTERS USED GLOBALLY IN EXPRESSION EVALUATION:
;
;	R1 =	Address of expression block
;	R7 =	Address of ENT block associated with last
;		conflicting entity
;	R8 =	Address of PTR block associated with last
;		conflicting entity
;	R9 =	The number of the parameter providing the qualifier context
;
;+++

DCL$EVAL_DISALLOW::

;
; Check for conflicts on a per-parameter basis.
;
;	CLRL	R9				; Assume there are no parameters
;	TSTB	WRK_B_PARMSUM(R10)		; Are there?
;	BEQL	10$				; No, then skip
;	INCL	R9				; Yes, then start with first
	MOVB	WRK_B_PARMSUM(R10),R9		; Get total # of parameters
10$:	MOVL	WRK_L_DISALLOW(R10),R1		; Is there a disallow expression?
	BEQL	95$				; No, then skip
	BSBW	DISPATCH			; Yes, evaluate it
	BLBS	R0,80$				; If success, then signal error
;	INCL	R9				; Set for next parameter
;	CMPB	R9,WRK_B_PARMSUM(R10)		; Are there more parameters?
;	BLEQU	10$				; Yes, then continue
95$:	STATUS	NORMAL				; Set normal return status
	RSB					; Return

;
; Set up the conflict error message.  Use actually command string if available.
; Otherwise, use "NO" + the entity name.
;
80$:	TSTL	R8				; Was entity explicitly present?	
	BEQL	85$				; No, then use entity block
	EXTZV	#PTR_V_VALUE,#PTR_S_VALUE,-	; Get length of name
		PTR_L_DESCR(R8),R6		; 
	EXTZV	#PTR_V_OFFSET,#PTR_S_OFFSET,-	; Get address of name
		PTR_L_DESCR(R8),R7		;
	MOVAB	WRK_G_BUFFER(R10)[R7],R7	;
	BRB	90$				;

85$:	MOVL	R7,R8				; Get address of ENT block
	CVTWL	ENT_W_NAME(R8),R0		; Get offset to ascic name
	MOVAB	(R8)[R0],R7			; Get address of ascic name
	MOVZBL	(R7)+,R6			; Get name length/address
	MOVW	#^A/NO/,WRK_G_BUFFER(R10)	; Preface the name with "NO"
	MOVC3	R6,(R7),WRK_G_BUFFER+2(R10)	; Move string into the buffer
	MOVAB	WRK_G_BUFFER(R10),R7		; Set address of string
	ADDL	#2,R6				; Add in length of "NO"

90$:	MOVL	R7,WRK_L_MARKPTR(R10)		; Set start of string
	ADDL3	R6,R7,WRK_L_EXPANDPTR(R10)	; Set end of string
	MOVL	#CLI$_CONFLICT,R0		; Set conflicting entity status
	RSB					; Return

	.SBTTL	Dispatch to Disallow Expression Evaluator
;---
; DISPATCH - Dispatch to disallow expression evaluator
;
; This routine is called to invoke the appropriate routines for evaluating
; a disallow expression.
;
; INPUTS:
;
;	R1 =	Address of expression block
;	R10 =	Address of command work area (WRK)
;
; OUTPUTS:
;
;	R0 =	Value of disallow expression - true or false
;
;+++

DISPATCH:

	CASEB	EXP_B_SUBTYPE(R1),-		; Dispatch to action routine
		#EXP_K_PATH,#EXP_K_NEG		;
10$:	.WORD	PATH-10$			; Action routines
	.WORD	NOT-10$				;
	.WORD	ANY2-10$			;
	.WORD	AND-10$				;
	.WORD	OR-10$				;
	.WORD	XOR-10$				;
	.WORD	NEG-10$				;
	CLRL	R0				; Clear value if error
	RSB					; Return


	.SBTTL	Evaluate Path Expression
;---
; PATH  - Evaluate path expression
;
; This routine is called to evaluate a path expression.
;
; INPUTS:
;
;	R1 =	Address of expression block
;	R9 =	Number of parameter to conduct local qualifier search at
;	R10 =	Address of command work area (WRK)
;
; OUTPUTS:
;
;	R0 =	Value of expression - true or false
;	R5,R6 are trashed
;	R7 =	Address of ENT block associated with last
;		conflicting entity
;	R8 =	Address of PTR block associated with last
;		conflicting entity
;	R9 =	The number of the parameter providing the qualifier context
;
;+++

;
; Init state for the search.
;
PATH:	MOVQ	R2,-(SP)				; Save R2,R3
	MOVL	#1,R2					; Init value level
	MOVZWL	EXP_W_TRO_COUNT(R1),R3			; Get operand count
	MOVAB	WRK_G_RESULT-PTR_K_LENGTH(R10),R8	; Get addr of PTR blocks
	MOVAB	EXP_L_OPERAND_LIST-4(R1),R5		; Get addr of entity block list

;
; If the path specifies a parameter, find the first parameter value that
; we could possibly be a value of the specified parameter.
;
	ADDL3	WRK_L_TAB_VEC(R10),(R5)[R2],R7		; Get entity block address
	CMPB	#ENT_K_QUALIFIER,ENT_B_SUBTYPE(R7)	; Is it a qualifier?
	BEQL	7$					; Yes, then process it
	MOVZBL	ENT_B_NUMBER(R7),R6			; Get parameter number

5$:	ADDL	#PTR_K_LENGTH,R8			; Get next PTR block
	CMPZV	#PTR_V_TYPE,#PTR_S_TYPE,(R8),-		; End of line?
		#PTR_K_ENDLINE				;
	BEQL	85$					; Yes, return false
	CMPZV	#PTR_V_TYPE,#PTR_S_TYPE,(R8),-		; Parameter?
		#PTR_K_PARAMETR				;
	BNEQ	5$					; No, skip it
	CMPB	PTR_B_PARMCNT(R8),R6			; Is is the one we want?
	BNEQ	5$					; No, get next PTR
;
; We are processing and have found a parameter specification.  If we are
; not looking for a specific keyword, return success now.  If we are, then
; set up the index and ptr block starting address for the search.
;
	CMPL	#1,R3					; Only one entity address?
	BEQL	80$					; Yes, return true
	DECL	R3					; Put in synch with level
	ADDL	#4,R5					; Shift the table address
	SUBL	#PTR_K_LENGTH,R8			; Start with this token
	BRB	10$					; Process keywords

;
; Process qualifier.
;
7$:	BSBB	QUAL					; Process qualifier
	BLBC	R0,95$					; Return false if not found
	CMPL	#1,R3					; Only one entity address?
	BEQL	97$					; Yes, return 
	INCL	R2					; Incr the value level
	MOVL	#8,R6					; Set parameter count

;
; Find the specified keyword entities.
;
10$:	ADDL3	WRK_L_TAB_VEC(R10),(R5)[R2],R7		; Get entity block address
20$:	ADDL	#PTR_K_LENGTH,R8			; Get next PTR block
	CMPZV	#PTR_V_TYPE,#PTR_S_TYPE,(R8),-		; End of line?
		#PTR_K_ENDLINE				;
	BEQL	85$					; Yes, return false
	CMPB	PTR_B_PARMCNT(R8),R6			; Right parameter count?
	BGTR	85$					; No, return false
	CMPB	PTR_B_LEVEL(R8),R2			; Value depth too shallow?
	BLSSU	85$					; Yes, return false
	BNEQ	20$					; Skip if not exact
	CMPL	PTR_L_ENTITY(R8),R7			; Is is the one we want?
	BNEQ	20$					; No, get next PTR
	AOBLEQ	R3,R2,10$				; Yes, get next entity
	BBS	#PTR_V_NEGATE,(R8),90$			; If negated, return false

;
; Clean up and return
;
80$:	MOVL	#1,R0					; Return true
	BRB	95$					;

85$:	CLRL	R8					; Mark entity not found
90$:	CLRL	R0					; Return false
95$:	MOVQ	(SP)+,R2				; Restore R2,R3
	RSB						; Return

97$:	BBC	#PTR_V_NEGATE,(R8),80$			; If not negated, return true
	BRB	85$					; Else, return false

;++
; QUAL - Find qualifier on command line.
; 
; Outputs:
;
;	R0 = true/false status
;	R8 = PTR block address
;--

QUAL:
	CLRL	R6					; Assume qual not found
;	BBC	#ENT_V_PARM,ENT_W_FLAGS(R7),50$		; Skip local search if unneccessary

;
; Find local parameter context. 
; (We are temporarily treating all qualifiers as global. Therefore, the following
; checks all of the local qualifiers on the command line for presence)
;
;	TSTL	R9					; Are there any parameters?
;	BEQL	50$					; No, then skip
;	MOVAB	WRK_G_RESULT-PTR_K_LENGTH(R10),R8	; Get addr of PTR blocks
;	CLRL	R0					; Init parameter count
;40$:	ADDL	#PTR_K_LENGTH,R8			; Get next PTR block
;	CMPZV	#PTR_V_TYPE,#PTR_S_TYPE,(R8),-		; Parameter value?
;		#PTR_K_PARAMETR				; 
;	BNEQ	40$					; No, get next PTR
;	INCL	R0					; Incr param count
;	CMPL	R0,R9					; Are we there yet?
;	BNEQ	40$					; No, get next PTR
;
;
; Check for local qualifiers.
;
;45$:	ADDL	#PTR_K_LENGTH,R8			; Get next PTR block
;	CMPZV	#PTR_V_TYPE,#PTR_S_TYPE,(R8),-		; End of line or next
;		#PTR_K_PARAMETR				;   parameter value?
;	BGEQU	50$					; Yes, then done
;	CMPL	PTR_L_ENTITY(R8),R7			; Is is the one we want?
;	BNEQ	45$					; No, get next PTR
;	MOVL	R8,R6					; Yes, save PTR
;	BRB	45$					; Get next PTR



;
; Check for global qualifiers.
;
50$:	BBC	#ENT_V_VERB,ENT_W_FLAGS(R7),40$		; Skip global search if unneccessary
;	TSTL	R6					; Was qual found
;	BNEQ	40$					; Yes, then skip
	MOVAB	WRK_G_RESULT-PTR_K_LENGTH(R10),R8	; Get addr of PTR blocks
55$:	ADDL	#PTR_K_LENGTH,R8			; Get next PTR block
	CMPZV	#PTR_V_TYPE,#PTR_S_TYPE,(R8),-		; End of line?
		#PTR_K_ENDLINE				;
	BEQL	40$					; Yes, then done
	CMPZV	#PTR_V_TYPE,#PTR_S_TYPE,(R8),-		; Command qualifier?
		#PTR_K_COMDQUAL				;
	BNEQ	55$					; No, get next PTR
	CMPL	PTR_L_ENTITY(R8),R7			; Is is the one we want?
	BNEQ	55$					; No, get next PTR
	MOVL	R8,R6					; Yes, save PTR
	BRB	55$					; Get next PTR
;
; Look at all the local qualifiers on the command line.
; (Checked after global qualifiers to establish a defined order)
;
40$:	BBC	#ENT_V_PARM,ENT_W_FLAGS(R7),60$		; Skip local search if unneccessary
	TSTL	R9					; Are there any parameters?
	BEQL	60$					; No, then skip
	MOVAB	WRK_G_RESULT-PTR_K_LENGTH(R10),R8	; Get addr of PTR blocks
45$:	ADDL	#PTR_K_LENGTH,R8			; Get next PTR block
	CMPZV	#PTR_V_TYPE,#PTR_S_TYPE,(R8),-		; End of line?
		#PTR_K_ENDLINE				;
	BEQL	60$					; Yes, then done
	CMPZV	#PTR_V_TYPE,#PTR_S_TYPE,(R8),-		; Parameter qualifier?
		#PTR_K_PARMQUAL				;
	BNEQ	45$					; No, get next PTR
	CMPL	PTR_L_ENTITY(R8),R7			; Is is the one we want?
	BNEQ	45$					; No, get next PTR
	MOVL	R8,R6					; Yes, save PTR
	BRB	45$					; Get next PTR

;
; Set up registers and return.
;
60$:	CLRL	R0					; Assume not found
	MOVL	R6,R8					; Save found PTR address
	BEQL	90$					; Branch if none found	
	MOVL	#1,R0					; Set present
90$:	RSB						; Return

	.SBTTL	Evaluate Not Expression
;---
; NOT - Evaluate not expression
;
; This routine is called to evaluate a not expression.
;
; INPUTS:
;
;	R1 =	Address of expression block
;	R10 =	Address of command work area (WRK)
;
; OUTPUTS:
;
;	R0 =	Value of expression - true or false
;
;+++

NOT:
	ADDL3	WRK_L_TAB_VEC(R10),-			; Get subexpression address
		EXP_L_OPERAND_LIST(R1),R1		;
	BSBW	DISPATCH				; Evaluate the subexpression
	INCL	R0					; Toggle the result
	RSB						; Return


	.SBTTL	Evaluate Any2 Expression
;---
; ANY2 - Evaluate any2 expression
;
; This routine is called to evaluate a any2 expression.
;
; INPUTS:
;
;	R1 =	Address of expression block
;	R10 =	Address of command work area (WRK)
;
; OUTPUTS:
;
;	R0 =	Value of expression - true or false
;
;+++

ANY2:
	MOVQ	R2,-(SP)				; Save R2,R3
	CLRL	-(SP)					; Assume false
	MOVL	R1,R3					; Copy expression block address
	MOVZWL	EXP_W_TRO_COUNT(R3),R2			; Get operand count
10$:	ADDL3	WRK_L_TAB_VEC(R10),-			; Get subexpression address
		EXP_L_OPERAND_LIST-4(R3)[R2],R1		;
	BSBW	DISPATCH				; Evaluate the subexpression
	BLBC	R0,20$					; Branch if false
	BBSS	#0,(SP),30$				; Branch if second true
20$:	SOBGTR	R2,10$					; Loop until done
	CLRL	R0					; Return false
30$:	TSTL	(SP)+					; Pop state
	MOVQ	(SP)+,R2				; Restore R2,R3
	RSB						; Return


	.SBTTL	Evaluate And Expression
;---
; AND - Evaluate and expression
;
; This routine is called to evaluate a and expression.
;
; INPUTS:
;
;	R1 =	Address of expression block
;	R10 =	Address of command work area (WRK)
;
; OUTPUTS:
;
;	R0 =	Value of expression - true or false
;
;+++

AND:
	MOVQ	R2,-(SP)				; Save R2,R3
	MOVL	R1,R3					; Copy expression block address
	MOVZWL	EXP_W_TRO_COUNT(R3),R2			; Get operand count
10$:	ADDL3	WRK_L_TAB_VEC(R10),-			; Get subexpression address
		EXP_L_OPERAND_LIST-4(R3)[R2],R1		;
	BSBW	DISPATCH				; Evaluate the subexpression
	BLBC	R0,30$					; Branch if false
	SOBGTR	R2,10$					; Loop until done
	MOVL	#1,R0					; Return true
30$:	MOVQ	(SP)+,R2				; Restore R2,R3
	RSB						; Return


	.SBTTL	Evaluate Or Expression
;---
; OR - Evaluate or expression
;
; This routine is called to evaluate a or expression.
;
; INPUTS:
;
;	R1 =	Address of expression block
;	R10 =	Address of command work area (WRK)
;
; OUTPUTS:
;
;	R0 =	Value of expression - true or false
;
;+++

OR:
	MOVQ	R2,-(SP)				; Save R2,R3
	MOVL	R1,R3					; Copy expression block address
	MOVZWL	EXP_W_TRO_COUNT(R1),R2			; Get operand count
10$:	ADDL3	WRK_L_TAB_VEC(R10),-			; Get subexpression address
		EXP_L_OPERAND_LIST-4(R3)[R2],R1		;
	BSBW	DISPATCH				; Evaluate the subexpression
	BLBS	R0,30$					; Branch if false
	SOBGTR	R2,10$					; Loop until done
	CLRL	R0					; Return false
30$:	MOVQ	(SP)+,R2				; Restore R2,R3
	RSB						; Return


	.SBTTL	Evaluate Xor Expression
;---
; XOR - Evaluate xor expression
;
; This routine is called to evaluate a xor expression.
;
; INPUTS:
;
;	R1 =	Address of expression block
;	R10 =	Address of command work area (WRK)
;
; OUTPUTS:
;
;	R0 =	Value of expression - true or false
;
;+++

XOR:
	MOVQ	R2,-(SP)				; Save R2,R3
	CLRL	-(SP)					; Assume false
	MOVL	R1,R3					; Copy expression block address
	MOVZWL	EXP_W_TRO_COUNT(R3),R2			; Get operand count
10$:	ADDL3	WRK_L_TAB_VEC(R10),-			; Get subexpression address
		EXP_L_OPERAND_LIST-4(R3)[R2],R1		;
	BSBW	DISPATCH				; Evaluate the subexpression
	BLBC	R0,20$					; Branch if false
	CLRL	R0					; Set false
	BBSS	#0,(SP),30$				; Branch if second true
20$:	SOBGTR	R2,10$					; Loop until done
	MOVL	(SP),R0					; Return value
30$:	TSTL	(SP)+					; Pop state
	MOVQ	(SP)+,R2				; Restore R2,R3
	RSB						; Return


	.SBTTL	Evaluate Neg Path Expression
;---
; NEG - Evaluate neg path expression
;
; This routine is called to evaluate a neg path expression.
;
; INPUTS:
;
;	R1 =	Address of expression block
;	R9 =	Number of parameter to conduct local qualifier search at
;	R10 =	Address of command work area (WRK)
;
; OUTPUTS:
;
;	R0 =	Value of expression - true or false
;	R5,R6 are trashed
;	R7 =	Address of ENT block associated with last
;		conflicting entity
;	R8 =	Address of PTR block associated with last
;		conflicting entity
;	R9 =	The number of the parameter providing the qualifier context
;
;+++

;
; Init state for the search.
;
NEG:	ADDL3	WRK_L_TAB_VEC(R10),-			; Get subexpression address
		EXP_L_OPERAND_LIST(R1),R1		;
	MOVQ	R2,-(SP)				; Save R2,R3
	MOVL	#1,R2					; Init value level
	MOVZWL	EXP_W_TRO_COUNT(R1),R3			; Get operand count
	MOVAB	WRK_G_RESULT-PTR_K_LENGTH(R10),R8	; Get addr of PTR blocks
	MOVAB	EXP_L_OPERAND_LIST-4(R1),R5		; Get addr of entity block list

;
; If the path specifies a parameter, find the first parameter value that
; could possibly be a value of the specified parameter.
;
	ADDL3	WRK_L_TAB_VEC(R10),(R5)[R2],R7		; Get entity block address
	CMPB	#ENT_K_QUALIFIER,ENT_B_SUBTYPE(R7)	; Is it a qualifier?
	BEQL	7$					; Yes, then process it
	MOVZBL	ENT_B_NUMBER(R7),R6			; Get parameter number

5$:	ADDL	#PTR_K_LENGTH,R8			; Get next PTR block
	CMPZV	#PTR_V_TYPE,#PTR_S_TYPE,(R8),-		; End of line?
		#PTR_K_ENDLINE				;
	BEQL	85$					; Yes, return false
	CMPZV	#PTR_V_TYPE,#PTR_S_TYPE,(R8),-		; Parameter?
		#PTR_K_PARAMETR				;
	BNEQ	5$					; No, skip it
	CMPB	PTR_B_PARMCNT(R8),R6			; Is is the one we want?
	BNEQ	5$					; No, get next PTR

;
; We are processing and have found a parameter specification.  If we are
; not looking for a specific keyword, return failure now.  If we are, then
; set up the index and ptr block starting address for the search.
;
	CMPL	#1,R3					; Only one entity address?
	BEQL	85$					; Yes, return false
	DECL	R3					; Put in synch with level
	ADDL	#4,R5					; Shift the table address
	SUBL	#PTR_K_LENGTH,R8			; Start with this token
	BRB	10$					; Process keywords

;
; Process qualifier.
;
7$:	BSBW	QUAL					; Process qualifier
	BLBC	R0,95$					; Return false if not found
	CMPL	#1,R3					; Only one entity address?
	BEQL	97$					; Yes, return 
	INCL	R2					; Incr the value level
	MOVL	#8,R6					; Set parameter count

;
; Find the specified keyword entities.
;
10$:	ADDL3	WRK_L_TAB_VEC(R10),(R5)[R2],R7		; Get entity block address
20$:	ADDL	#PTR_K_LENGTH,R8			; Get next PTR block
	CMPZV	#PTR_V_TYPE,#PTR_S_TYPE,(R8),-		; End of line?
		#PTR_K_ENDLINE				;
	BEQL	85$					; Yes, return false
	CMPB	PTR_B_PARMCNT(R8),R6			; Right parameter count?
	BGTR	85$					; No, return false
	CMPB	PTR_B_LEVEL(R8),R2			; Value depth too shallow?
	BLSSU	85$					; Yes, return false
	BNEQ	20$					; Skip if not exact
	CMPL	PTR_L_ENTITY(R8),R7			; Is is the one we want?
	BNEQ	20$					; No, get next PTR
	AOBLEQ	R3,R2,10$				; Yes, get next entity
	BBC	#PTR_V_NEGATE,(R8),90$			; If not negated, return false

;
; Clean up and return
;
80$:	MOVL	#1,R0					; Return true
	BRB	95$					;

85$:	CLRL	R8					; Mark entity not found
90$:	CLRL	R0					; Return false
95$:	MOVQ	(SP)+,R2				; Restore R2,R3
	RSB						; Return

97$:	BBS	#PTR_V_NEGATE,(R8),80$			; If negated, return true
	BRB	85$					; Else, return false

	.END
