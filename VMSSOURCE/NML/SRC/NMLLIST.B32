%TITLE 'NML LIST permanent parameter module'
MODULE NML$LIST (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines for processing the NCP LIST command.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-DEC-1979
!
! MODIFIED BY:
!
!	V03-004	MKP0005		Kathy Perko	4-Aug-1983
!		Enhance access time to the node permanent database by using
!		multiple ISAM keys to speed up access.
!
!	V03-003	MKP0004		Kathy Perko	26-April-1983
!		Make GETTABLE a global routine for SET MODULE CONFIGURATOR
!		ALL command processing.
!
!	V03-002	MKP0003		Kathy Perko	5-July-1982
!		Add support to list X25-Protocol Group entity (a single
!		entity show is essentially a multiple show command because
!		there can be more than one DTE per group.)
!		Add X29 Server and Trace Modules.
!
!	V03-001	MKP0002		Kathy Perko	16-June-1982
!		Add handling for entity qualifiers.
!
!	V02-001	MKP0001		Kathy Perko	23-July-1981
!		Add circuit entity and multidrop lines.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$LISTKNOWN	: NOVALUE,
    NML$LIST_KNOWN_NODES: NOVALUE,
    NML$LISTENTITY	: NOVALUE,
    NML_LISTENTITY,
    NML$LIST_TYPE_NODES: NOVALUE,
    NML$GETTABLE 	: NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

!
! Entity buffer and descriptor.
!
OWN
    NML$T_ENTITYBUF : BBLOCK [NML$K_ENTBUFLEN],
    NML$Q_ENTITYDSC : DESCRIPTOR;

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL ROUTINE
    NML$OPENFILE,
    NML$BLD_REPLY,
    NML$ERROR_1,
    NML$ERROR_2,
    NML$GETRECOWNER,
    NML$MATCHRECORD,
    NML$READPARLIST,
    NML$READRECORD,
    NML$READ_KNOWN_NODE_REC,
    NML$SEND;


%SBTTL 'NML$LISTKNOWN  List known entity parameters'
GLOBAL ROUTINE NML$LISTKNOWN (ENTITY, INF, ENTITY_LEN, ENTITY_ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine lists entries for all entities of the specified type
!	in the permanent data base.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	INF		Information type code.
!	ENTITY_LEN	Byte count of entity id string (used only if there
!			is a qualifier in the command, in which case it is
!			essentially a multiple LIST command.)
!	ENTITY_ADR	Address of entity id string (used only if there is
!			a qualifier in the command, in which case it is
!			essentially a multiple LIST command.)
!
!--

    BEGIN

    LOCAL
	FID,				! File id code
	KEY,				! Temporary record key buffer
	OWNER,				! Data base search key
	RECDSC : DESCRIPTOR,		! Record descriptor
	TABDSC : REF DESCRIPTOR;

!
! Set up entity-specific information.
!
    SELECTONEU .ENTITY OF
	SET

	[NML$C_CIRCUIT]:
	    BEGIN
!
! Open node file to get loop node name.
! (If open fails, return other information anyway.)
!
	    NML$OPENFILE (NMA$C_OPN_NODE, NMA$C_OPN_AC_RO);

	    END;

	TES;
!
! Get entity information.
!
    FID = .NML$AB_ENTITYDATA [.ENTITY, EIT$B_FILEID]; ! Get file id
    OWNER = .NML$AB_ENTITYDATA [.ENTITY, EIT$W_KEY];  ! Get search key
!
! Get table.
!
    NML$GETTABLE (.ENTITY, .INF, TABDSC);
!
! Try to match record in file.
!
    KEY = 0;				! Initialize record key
    WHILE NML$MATCHRECORD (.FID, NML$GQ_RECBFDSC, KEY, .OWNER,
				.ENTITY_LEN, .ENTITY_ADR,
				0, 0, 0, RECDSC) DO
	BEGIN
	NML_LISTENTITY (.ENTITY, RECDSC, .TABDSC);
	KEY = .KEY + 1;
	END;

    END;				! End of NML$LISTKNOWN


%SBTTL 'NML$LIST_KNOWN_NODES  List known nodes'
GLOBAL ROUTINE NML$LIST_KNOWN_NODES (ENTITY, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine lists all entries for nodes that are in the permanent
!	data base.  The executor node is listed first.  Remote nodes are
!	then listed.  Loop nodes are listed last.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN
!
! Return executor node.
!
nml$list_type_nodes (nml$c_executor, .inf, 0, 0);
!
! Return remote nodes.
!
nml$list_type_nodes (nml$c_node, .inf, 0, 0);
!
! Return loop nodes.
!
nml$list_type_nodes (nml$c_loopnode, .inf, 0, 0);

END;				! End of NML$LIST_KNOWN_NODES


%SBTTL 'NML$LISTENTITY  List entity parameters'
GLOBAL ROUTINE NML$LISTENTITY (ENTITY, INF, ENTITY_LEN, ENTITY_ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine lists permanent data base information for the specified
!	entity.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	INF		Information type code.
!	ENTITY_LEN	Byte count of entity id string.
!	ENTITY_ADR	Address of entity id string.
!
!--

BEGIN

LOCAL
    fid,				! File id code
    key,				! Temporary record key buffer
    key_value_dsc: VECTOR [2],
    detail,				! Error detail
    owner,				! Data base search key
    recdsc : DESCRIPTOR,		! Record descriptor
    tabdsc : REF DESCRIPTOR,
    status,
    node_type;

!
! If LISTing a circuit, open node file in case there's a loop node set up
! on the circuit.  In that case I must get loop node name to add to the
! NCP response message.  (If open fails, return other information anyway.)
!
!
IF .entity EQL nml$c_circuit THEN
    nml$openfile (nma$c_opn_node, nma$c_opn_ac_ro);
!
! Get entity information.
!
fid = .nml$ab_entitydata [.entity, eit$b_fileid];    ! Get file id
owner = .nml$ab_entitydata [.entity, eit$w_key];     ! Search key
detail = .nml$ab_entitydata [.entity, eit$w_detail]; ! Error detail
!
! Try to get the entity's record from the permanent database file.
! The node database organization is different from the others (it uses
! 3 ISAM keys instead of one) to make it more efficient.  This is
! necessary because of it's size.
!
node_type = 0;
IF .fid EQL nma$c_opn_node THEN
    BEGIN
    IF .entity EQL nml$c_executor THEN
	BEGIN
	key_value_dsc [0] = nmn$c_typ_key_len;
	key_value_dsc [1] = UPLIT (nml$c_executor);
	END
    ELSE
	BEGIN
	key_value_dsc [0] = .entity_len;
	key_value_dsc [1] = .entity_adr;
	END;
    status = nml$readrecord (.fid,		! Node DB file ID
				owner,		! ISAM key type to use.
				key_value_dsc,	! Entity ID descriptor address
				nml$gq_recbfdsc,! Read buffer.
				recdsc,		! Return data descriptor.
				node_type);	! Not used for list.
    END
ELSE
    BEGIN
    key = 0;				! Initialize record key
    status = nml$matchrecord (.fid, nml$gq_recbfdsc, key, .owner,
				.entity_len, .entity_adr,
				0, 0, 0, recdsc);
    END;
IF .status THEN
    BEGIN
    !
    ! If the entity read was a node that turned out to be the executor,
    ! make sure the LIST information returned to NCP is for the executor.
    !
    IF .node_type EQL nml$c_executor THEN
	entity = nml$c_executor;
    !
    ! Get table of parameters to include in LIST type (STATUS, SUMMARY, or CHAR).
    !
    nml$gettable (.entity, .inf, tabdsc);
    nml_listentity (.entity, recdsc, .tabdsc);
    END
ELSE
    nml$error_2 (nma$c_sts_cmp, .detail); ! Signal error message

END;				! End of NML$LISTENTITY

%SBTTL 'NML_LISTENTITY  List known entity parameters'
ROUTINE NML_LISTENTITY (ENTITY, RECDSC, TABDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs common list function for both singular and
!	plural entity operations.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	RECDSC		Address of permanent data base record descriptor.
!	TABDSC		Address of parameter list table descriptor.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	MSG_SIZE;			! Message size

!
! Get the record owner.
!
    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;
    NML$Q_ENTITYDSC [DSC$W_LENGTH] = NML$K_ENTBUFLEN; ! Initialize entity descriptor
    NML$Q_ENTITYDSC [DSC$A_POINTER] = NML$T_ENTITYBUF;

    IF NML$GETRECOWNER (.RECDSC,
			.ENTITY,
			NML$Q_ENTITYDSC,
			NML$Q_ENTITYDSC [DSC$W_LENGTH])
    THEN
	BEGIN
	NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_ENTD_FLD; ! Set entity descriptor flag
	NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTITYDSC; ! Add entity descriptor pointer
	END;

    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSG_SIZE); ! Build message

    NML$READPARLIST (NML$GQ_SNDBFDSC, MSG_SIZE, .TABDSC, .RECDSC);

    NML$SEND (NML$AB_SNDBUFFER, .MSG_SIZE); ! Send message

    RETURN NML$_STS_SUC

    END;				! End of NML_LISTENTITY

%SBTTL 'NML$LIST_TYPE_NODES  List known node parameters'
GLOBAL ROUTINE NML$LIST_TYPE_NODES (ENTITY, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine lists permanent data base information for known remote
!	nodes or loopnodes.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code (always NML$C_NODE).
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
!--

BEGIN

LOCAL
    recdsc : DESCRIPTOR,		! Record descriptor
    tabdsc : REF DESCRIPTOR,		! Table descriptor
    rewind_flag;

!
! Get entity information.
!
nml$gettable (.entity, .inf, tabdsc);	! Get information table
!
! Read all records that have a node type key (remote or loopnode) that
! matches the entity type parameter.
!
rewind_flag = true;
WHILE nml$read_known_node_rec (.entity,
				nml$gq_recbfdsc,
				recdsc,
				.rewind_flag) DO
    BEGIN
    rewind_flag = false;
    nml_listentity (.entity, recdsc, .tabdsc);
    END;
END;				! End of nml$list_type_nodes

%SBTTL 'NML$GETTABLE  Get table descriptor'
GLOBAL ROUTINE NML$GETTABLE (ENTITY, INF, TABDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine selects the parameter table for processing permanent
!	data base information based on the entity type and the information
!	type.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity id code.
!	INF		Information type code.
!	TABDSC		Address of table descriptor.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	ENTTAB : REF VECTOR;

!
! Get the address of this entity's vector of information tables.
!
    ENTTAB = .NML$AL_PERMINFTAB [.ENTITY];
!
! Select the table according to the information type.
!
    .TABDSC = .ENTTAB [.INF];
!
! If the table descriptor address is equal to zero then the requested
! information type is not supported for this entity.  Signal an error
! indicating invalid function or option.
!
    IF ..TABDSC EQLA 0
    THEN
	NML$ERROR_1 (NMA$C_STS_FUN);

    RETURN NML$_STS_SUC

    END;				! End of NML$GETTABLE


END					! End of module

ELUDOM
