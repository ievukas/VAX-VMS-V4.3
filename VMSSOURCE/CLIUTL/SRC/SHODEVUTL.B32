MODULE shodevutl(IDENT = 'V04-000',
		  ADDRESSING_MODE (EXTERNAL = GENERAL)) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  SHOW utility
!
! ABSTRACT:
!	This module contains the routines for the SHOW DEVICES command.
!
! ENVIRONMENT:
!	VAX native, user and kernel mode
!
! AUTHOR:  Gerry Smith		 CREATION DATE:  28-Jul-1982
!
! MODIFIED BY:
!
!	V03-018	CWH3018			CW Hobbs		 24-Jul-1984
!		Add orb flags, max block, and ACP extent info to items
!		which are collected.
!
!	V03-017	LMP0221		L. Mark Pilant,		12-Apr-1984  15:01
!		Change UCB$L_OWNUIC to ORB$L_OWNER and UCB$W_VPROT to
!		ORB$W_PROT.
!
!	V03-016	CWH3016			CW Hobbs		 12-Apr-1984
!		Move test for /MOUNT and /ALLOC to SHODEVPRT, make the routine
!		suspicious of the PID in the UCB.
!
!	V03-015	CWH3015			CW Hobbs		 3-Mar-1984
!		Fix dual-path logic so that when getting data the "ddb"
!		parameter is always the primary ddb.  Also support allocation
!		class device names for file-oriented devices and sorted
!		device displays.
!
!	V03-014	CWH3014			CW Hobbs		 29-Feb-1984
!		Remove reference to D_L_VOLLKID, used during trial builds but
!		not needed after EXE$DVI_FREEBLOCKS is built into the system.
!
!	V03-013	CWH3013			CW Hobbs		 27-Feb-1984
!		Collect more information for remote and dual-path devices.
!		Fix linkages for calls to the exec, and add a handler to
!		trap and dismiss kernel mode access violations.
!
!	V03-012	TCM0001			Trudy C. Matthews	 10-Oct-1983
!		If there are two paths to the same device, find the name of
!		the alternate path (i.e. the device's alias).
!
!	V03-011	GAS0178			Gerry Smith		 7-Sep-1983
!		Fix quota caching for ODS2 disks.  The quota cache size was
!		being taken from the wrong cell.
!
!	V03-010	GAS0167			Gerry Smith		22-Aug-1983
!		Fix the journal device name: get rid of the underscore that
!		ioc$cvt_devnam returns, and make the device name into an 
!		ASCIC string.
!
!	V03-009	GAS0160			Gerry Smith		27-Jul-1983
!		Show template devices by default.
!
!	V03-008	GAS0149			Gerry Smith		28-Jun-1983
!		Use IOC$CVT_DEVNAM to obtain the device name.
!
!	V03-007	GAS0133			Gerry Smith		14-May-1983
!		Add retention period, default extend quantity, default file
!		protection.
!
!	V03-006	GAS0114			Gerry Smith		 1-Apr-1983
!		Modify the cluster_device logic so that less checking and
!		testing is done in kernel mode.
!
!	V03-005	GAS0110			Gerry Smith		28-Feb-1983
!		Add support for cluster devices.
!
!	V03-004	GAS0107			Gerry Smith		 3-Feb-1983
!		Add support for journals.
!
!	V03-003	GAS0106			Gerry Smith		24-Jan-1983
!		In the case of multivolume sets, check to make sure that
!		the volume is mounted.  Also tighten up the bounds checking.
!
!	V03-002	GAS00104		Gerry Smith		17-Jan-1983
!		Fix the logic path for /ALLOCATED and /MOUNTED
!
!	V03-001	GAS00101		Gerry Smith		13-Jan-1983
!		Only check for an RVN if the device is file-oriented.
!
!--


!
! Include files
!

LIBRARY 'SYS$LIBRARY:LIB';		! VAX/VMS system definitions
REQUIRE 'SRC$:SHOWDEF';			! SHOW common definitions
REQUIRE 'SRC$:SHODEVDEF';		! SHOW DEVICES common definitions
REQUIRE 'SHRLIB$:JNLDEFINT';		! Journal definitions

!
! Define the linkage for the routines to lock and unlock the I/O database,
! scan the I/O database, and obtain the device name.
!
LINKAGE
    IOLOCK = JSB (REGISTER = 4)
		: NOPRESERVE(0,1,2,3,4,5) PRESERVE(6,7,8,9,10,11),
    CVTDEV = JSB (REGISTER = 0,			! Length of output buffer,
		  REGISTER = 1,			! Address of output buffer
		  REGISTER = 4,			! Format of device name
		  REGISTER = 5;			! Address of UCB
		  REGISTER = 1)			! Length of final name
		: PRESERVE(0,2,3,4,5,6,7,8,9,10,11),
    IOSCAN = JSB (REGISTER = 11,		! Call with DDB,
	    	  REGISTER = 10;		! UCB,
		  REGISTER = 11,		! Return with DDB,
		  REGISTER = 10)		! UCB
		: NOPRESERVE(0,10,11) PRESERVE(1,2,3,4,5,6,7,8,9);

!
! The following macro makes it easier to copy stuff to the scratch area.
!
MACRO copy_data (source, dest) [item] =
    dest[%NAME('d_', item)] = .source[%NAME(source, '$', item)]%;


FORWARD ROUTINE
	kernel_handler;		! Turn kernel mode signals to returns

FORWARD ROUTINE
    io_scan,
    utl_get_data;

EXTERNAL ROUTINE
    show$write_line : NOVALUE,
    exe$dvi_freeblocks,
    sch$iolockr : IOLOCK,
    sch$iounlock : IOLOCK,
    ioc$cvt_devnam : CVTDEV,
    ioc$scan_iodb_2p : IOSCAN;

EXTERNAL
    scs$gq_config,
    scs$ga_localsb,
    sch$gl_maxpix,
    sch$gl_pcbvec : REF VECTOR,
    sch$gl_curpcb,
    ioc$gl_devlist;

GLOBAL
    kernel_accvio : VECTOR [4, LONG] ADDRESSING_MODE (GENERAL);


GLOBAL ROUTINE kernel_handler (sig : REF BLOCK[,BYTE], mech : REF BLOCK[,BYTE]) =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine intercepts kernel mode signals.  
!
! INPUTS:
!
!	sig  - signal argument list
!	mech - mechanism argument list
!
! SIDE EFFECTS:
!
!	A return is made to user mode code.
!--

EXTERNAL ROUTINE
    LIB$SIG_TO_RET : ADDRESSING_MODE (GENERAL);

! If the signal name is an accvio, then clean up
!
IF .sig [chf$l_sig_name] EQL ss$_accvio		! Is it an accvio?
THEN
    BEGIN
    SCH$IOUNLOCK(.sch$gl_curpcb);		! Unlock I/O database
    SET_IPL(0);					! Lower IPL
    CH$MOVE (4*4, sig[chf$l_sig_arg1], kernel_accvio[0]);
    RETURN LIB$SIG_TO_RET (.sig, .mech);	! Convert signal to return
    END;

RETURN ss$_resignal;
END;

GLOBAL ROUTINE io_scan (node, device, unit, flags, data) =
BEGIN

!---
!
! This routine is called in KERNEL mode to scan the device data base and
! determine which devices to collect information about.  Once a likely
! candidate for data collection is determined, control is passed to
! another routine, UTL_GET_DATA, where, based on the type of device and
! the qualifiers selected, device-specific data is stuffed into the scratch
! area.  This continues until either the end of the device database is 
! reached, or an error status (STATUS low bit clear) is obtained.  Typical
! reasons for an error status are running out of scratch area, or having
! obtained all the data that is required of the caller. 
!
! Inputs
!	NODE     - address of ASCIC of node part of device name, or allocation
!		   class if FLAGS[DEVI$V_ALLOCLS]
!	DEVICE   - address of ASCIC of device part of device name
!	UNIT     - address of unit number. (-1 => no unit number)
!	FLAGS    - address of options longword
!	DATA     - address of scratch area.
!
! Outputs
!	DATA    - is full of all sorts of useful data about devices
!
!---

MAP
    data : REF VECTOR,
    node : REF VECTOR[,BYTE],
    device : REF VECTOR[,BYTE],
    flags : REF $BBLOCK;

LOCAL
    status,
    limit,
    ptr : REF VECTOR[,BYTE],			! Data area pointer
    scratch : REF $BBLOCK,			! Scratch pointer
    ucb : REF $BBLOCK,				! UCB pointer
    ddb : REF $BBLOCK,				! DDB pointer
    sb : REF $BBLOCK;				! System block pointer

!
! Trap anything weird, and turn it into a return
!
ENABLE
    kernel_handler;

!
! Set up the scratch area so that is can be addressed easily.  Also, calculate
! a limit toward the end of the scratch area, so that we don't write beyond the 
! area.  
!
scratch = data[1];				! Point to beginning of scratch area
limit = .data[0] + data[0] - d_k_length;	! Set the limit 

! 
! Lock the I/O data base.  Upon return from the call to SCH$IOLOCKR, the 
! IPL will be 2, so that pagefaults are still allowed.
!
SCH$IOLOCKR(.sch$gl_curpcb);			! Lock the I/O database

!
! Start at the beginning of the I/O database and initiate the I/O scan.
!
status = IOC$SCAN_IODB_2P(0, 0; ddb, ucb);

!
! For each UCB in the I/O database, determine if it might contain devices of 
! interest.  If so, then call the data-gathering dispatch routine.  Upon 
! return from the data-gathering, STATUS must be checked, to see if any
! further scan is necessary.  If not, then exit the DDB/UCB loops.
!
WHILE .status DO				! As long as the scan returns
    BEGIN					! a success, stay in the loop.
    IF						! For each device found, make
	BEGIN					! some checks.
	IF .flags[devi$v_allocls]		! If an allocation class is desired
	THEN
	    BEGIN
	    IF .ddb[ddb$l_allocls] EQL .(node[0])! If the allocation class matches
	    THEN true				! then the device is ok, otherwise
	    ELSE ucb = 0			! go to the next DDB.
	    END
	ELSE
	    BEGIN
	    IF .node[0] EQL 0			! If no node specified, then
	    THEN true				! continue.
	    ELSE				! Otherwise check to see if
		BEGIN				! this node is one we want.
		IF (sb = .ddb[ddb$l_sb]) EQL 0	! If no node, go to
		THEN ucb = 0			! next DDB.
		ELSE
		    BEGIN
		    IF CH$EQL(.node[0], node[1],
			      .(sb[sb$t_nodename])<0,8>, sb[sb$t_nodename] + 1)
		    THEN true			! If nodenames match, good
		    ELSE ucb = 0		! Else get next DDB
		    END
		END
	    END
	END
    AND
	BEGIN
	IF .device[0] EQL 0			! If no device specified, then
	THEN
	    BEGIN					! Don't display mailbox
	    IF .$BBLOCK[ucb[ucb$l_devchar], dev$v_mbx]  ! UCB's, and get to
	    THEN ucb = 0				! next DDB
	    ELSE true
	    END	
	ELSE						! If a device was 
	    BEGIN					! specified, check for
	    IF CH$EQL(.device[0], device[1],		! a match.
		      .device[0], ddb[ddb$t_name] + 1)
	    THEN true					! If a match, good
	    ELSE ucb = 0				! Otherwise, go to
	    END						! next DDB
	END
    AND
	BEGIN						! If a unit specified,
	IF .unit NEQ -1					! check for a match
	THEN (.unit EQL .ucb[ucb$w_unit])
	ELSE true					! If no unit, ok
	END
    THEN
	BEGIN
	IF .scratch GEQA .limit		! Before getting data, check
	THEN				! that there is room.
	    BEGIN			! If no room, set status to 
	    status = SS$_VASFULL;	! appropriate error
	    EXITLOOP			! and get out.
	    END;

!
! Determine how much data to get.  If no complete device was specified,
! return just information about this device.  However, if a complete device
! was specified, check to see if this is perhaps a multi-volume set.  If so,
! then return data about the entire set.
!
! So, if no explicit device was given, or if the device is not file-oriented,
! or there's no VCB, or there is no Relative Volume Table, then
! collect data on one device.  Otherwise, rip thru the UCB list associated
! with the RVT, and get data about each device in the set.
!
	IF .unit EQL -1					! If not explicit 
	OR NOT .$BBLOCK[ucb[ucb$l_devchar], dev$v_fod]	! or not Files-11
	OR
	    BEGIN
	    BIND vcb = ucb[ucb$l_vcb] : REF $BBLOCK;
	    IF .vcb EQL 0				! or no VCB
	    THEN true
	    ELSE
		BEGIN
		IF .vcb[vcb$w_rvn] EQL 0		! or not an RVN
		THEN true				! then do one
		ELSE false
		END
	    END
	THEN
	    BEGIN
	    status = utl_get_data(.ucb, .ddb, .flags, .scratch, .data);
							! Get device data
	    IF .status					! If we got data,
	    THEN 					! update the pointer
		BEGIN
		IF .scratch[d_b_devclass] EQLU dc$_journal
		THEN scratch = .scratch+d_k_length;	! Skip an extra
		scratch = .scratch + d_k_length;	! block if journal
		END
	    ELSE status = 1;				! The only time FALSE
							! is returned is if
							! /MOUNTED or /ALLOCATED
							! was specified and 
							! the device wasn't either
	    IF .unit NEQ -1				! If explicit device
	    AND .status					! (don't mask error)
	    THEN ucb = 0;				! then we're done with
	    END						! this DDB.
	ELSE
	    BEGIN
	    LOCAL
		vcb : REF $BBLOCK,
		rvt : REF $BBLOCK,
		ucblist : REF VECTOR;

	    vcb = .ucb[ucb$l_vcb];
	    rvt = .vcb[vcb$l_rvt];
	    ucblist = rvt[rvt$l_ucblst];

	    INCR index FROM 0 TO .rvt[rvt$b_nvols] - 1 DO
		BEGIN
		IF .scratch GEQA .limit			! Check limit
		THEN (status = SS$_VASFULL; EXITLOOP)
		ELSE IF .ucblist[.index] NEQ 0		! If volume mounted,
		THEN					! get data
		    BEGIN
		    status = utl_get_data(.ucblist[.index], .ddb, .flags, .scratch, .data);
		    IF .status
		    THEN
			BEGIN
			IF .scratch[d_b_devclass] EQLU dc$_journal
			THEN scratch = .scratch + d_k_length;
			scratch = .scratch + d_k_length;
			END;
		    END;
		END;
	    status = 0;			! To indicate finished with
	    END;			! this volume set
	IF NOT .status THEN EXITLOOP;	! Go away?
	END;
    status = IOC$SCAN_IODB_2P(.ddb, .ucb; ddb, ucb);
    END;
	
scratch[d_t_device] = 0;			! To show end of list

!
! Now to clean up.  Unlock the I/O database, then lower the IPL
! to zero.
!
SCH$IOUNLOCK(.sch$gl_curpcb);			! Unlock I/O database
SET_IPL(0);					! Lower IPL

IF .scratch EQLA data[1]			! If no data,
THEN status = SS$_NOSUCHDEV			! return an error
ELSE status = true;

RETURN .status;					! Return with status
END;

GLOBAL ROUTINE utl_get_data (in_ucb, in_ddb, flags, scratch, data) =
BEGIN

!---
!
! This routine executes in KERNEL mode, and is called by IO_SCAN to dispatch
! to specific data-gathering routines, based on the qualifiers and the type of 
! device.
!
! Inputs
!	IN_UCB 	     - address of the UCB of the device of interest
!	IN_DDB	     - address of the DDB whose UCB chain we are following
!	FLAGS	     - pointer to flags longword
!	SCRATCH      - location of scratch area where data can be stored
!	DATA	     - pointer to start of scratch area
!
! Outputs
!	SCRATCH - has data possibly stored into it.  Also, the value of 
!		  SCRATCH will have changed, to show the next place where
!		  data can be stored.
!
!---

MAP
    data : REF VECTOR,
    scratch : REF $BBLOCK,
    flags : REF $BBLOCK;

LOCAL
    status,
    aqb : REF $BBLOCK,
    ddb : REF $BBLOCK,
    scr : REF $BBLOCK,
    ucb : REF $BBLOCK,
    orb : REF $BBLOCK,
    vcb : REF $BBLOCK;

!
! Move the input parameters to the local pointers.  Check if the ucb is marked as the class driver
! copy, used for dual-pathed massbus disks.  If so, substitute the primary UCB and DDB for the
! input parameters.
!
ucb = .in_ucb;
IF .$BBLOCK[ucb[ucb$l_devchar2], dev$v_cdp]	! Is it the class driver path?
THEN ucb = .ucb[ucb$l_2p_altucb];		! Get the "real" ucb address
orb = .ucb[ucb$l_orb];				! Save a pointer to the object's rights block
ddb = .ucb[ucb$l_ddb];				! Always use the ddb hanging from the ucb we are actually using
vcb = .ucb[ucb$l_vcb];				! Save a pointer to the volume control block

!
! Collect data about this device.  Initialize the SHOW DEVICE
! control areas in the scratch cell.
!
scratch[d_w_bits] = 0;				! Clear all the bits
scratch[d_l_ucb]  = .ucb;			! Save the ucb address

!
! First, determine if an alternate path to the device exists.  If so, 
! next check that the UCB for the device is not already in the scratch
! area.  If it is, return without saving this device.  If not, get the
! secondary host information
!
IF .$BBLOCK[ucb[ucb$l_devchar2], dev$v_2p]	! If device is dual-pathed
THEN
    BEGIN
    REGISTER
	l,
	scr : REF $BBLOCK;
    scr = data[1];				! Start at the front of the data
    WHILE .scr LSSA .scratch			! Look up to the current pointer
    DO
	BEGIN
	IF .scr[d_l_ucb] EQLA .ucb		! The UCB is already there,
	THEN RETURN false;			! so we can simply exit now.
	IF .scr[d_b_devclass] EQLU dc$_journal	! If the device is a journal
	THEN scr = .scr + d_k_length;		! skip over the journal's device
	scr = .scr + d_k_length;		! Skip to the next device
	END;
    !
    ! First time we've seen this UCB, start stashing some info away.
    !
    scr = .ucb[ucb$l_2p_ddb];			! Get the ddb for the second path
    scr = .scr[ddb$l_sb];			! Get the sb for the second host
    !
    ! Copy the node name and length
    !
    CH$MOVE (sb$s_nodename, scr[sb$t_nodename], scratch[d_t_host2_name]);
    !
    ! Copy the node type, a blank-padded string sitting in a long-word
    !
    scratch[d_l_host2_type] = .scr[sb$t_hwtype];
    !
    ! Tell if the host is available, i.e. if an SCS connection exists
    !
    scratch[d_v_host2_avail] = (IF .$BBLOCK[ucb[ucb$l_devchar2], dev$v_mscp]
				THEN 
				    BEGIN
				    scr = .ucb[ucb$l_2p_cddb];	! Move the pointer to the CDDB for the device
				    (NOT .scr[cddb$v_noconn])
				    END
				ELSE 0);
    END; 					! of code for dual-pathed devices

!
! Save host info for the primary host.  We don't need to save the nodename, since that will be
! part of the device name we return.
!
scr = .ddb[ddb$l_sb];				! Get the sb for the host
scratch[d_v_remote_device] = (.scr NEQ scs$ga_localsb);
CH$MOVE (sb$s_nodename, scr[sb$t_nodename], scratch[d_t_host_name]);
scratch[d_l_host_type] = .scr[sb$t_hwtype];	! Copy the node type, a blank-padded string
scratch[d_v_host_avail] =  1;			! Assume that a connection exists (local node alway true)

!
! Check out some things only valid for MSCP devices
!
IF .$BBLOCK[ucb[ucb$l_devchar2], dev$v_mscp]
THEN
    BEGIN
    scratch[d_v_shadow_master] = (.ucb[ucb$w_mscpunit] LSS 0);	! Shadow masters have negative unit #s
    scr = .ucb[ucb$l_cddb];					! Move the pointer to the CDDB for the device
    scratch[d_v_host_avail] = (NOT .scr[cddb$v_noconn]);	! Does a connection really exist?
    END;

!
! Now get the device name.
!
ioc$cvt_devnam(20,				! Get device name, max this long
 	       scratch[d_t_device],		! put it here,
	       (IF .$BBLOCK[ucb[ucb$l_devchar], dev$v_fod] ! If file-oriented
		THEN 0				! then try for "$n$ddcu" format
		ELSE -1),			! else select "node$ddcu" display format
	       .ucb;				! UCB is here
	       scratch[d_b_devlen]);		! final length here

!
! Copy standard cells from the UCB to the scratch area
!
copy_data (ucb, scratch, l_pid,			! Copy all the necessary 
			 l_devchar,		! information from the UCB.
			 l_devchar2,
			 b_devclass,
			 b_devtype,
			 w_unit,
			 w_devbufsiz,
			 l_devdepend,
			 l_devdepnd2,
			 w_refc,
			 l_sts,
			 w_devsts,
			 l_opcnt,
			 w_errcnt);

!
! Copy ORB information to the scratch area
!
IF .orb[orb$v_prot_16]
THEN scratch[d_w_vprot] = .orb[orb$w_prot]
ELSE
    BEGIN
    (scratch[d_w_vprot])<0,4> = .(orb[orb$l_sys_prot])<0,4>;
    (scratch[d_w_vprot])<4,4> = .(orb[orb$l_own_prot])<0,4>;
    (scratch[d_w_vprot])<8,4> = .(orb[orb$l_grp_prot])<0,4>;
    (scratch[d_w_vprot])<12,4> = .(orb[orb$l_wor_prot])<0,4>;
    END;
scratch[d_l_ownuic] = .orb[orb$l_owner];
scratch[d_b_orb_flags] = .orb[orb$b_flags];

!
! Remember whether or not an ACL exists on the device
!
scratch[d_v_acl_present] = (IF .orb[orb$v_acl_queue]
			    THEN (.orb[orb$l_aclfl] NEQ orb[orb$l_aclfl])
			    ELSE 0);		! Someday maybe (.orb[orb$l_acl_count] NEQ 0)

!
! Copy standard cells from the DDB to the scratch area
!
copy_data (ddb, scratch, l_allocls);

!
! If the device is owned, get the process name
!
IF .ucb[ucb$l_pid] NEQ 0
THEN
    BEGIN
    LOCAL
	pix,
	pcb : REF $BBLOCK;
    pix = .(ucb[ucb$l_pid])<0,16>;
    IF .pix LEQU .sch$gl_maxpix
    THEN
	BEGIN
	pcb = .sch$gl_pcbvec[.pix];
	CH$MOVE(pcb$s_lname,
		pcb[pcb$t_lname],
		scratch[d_t_prcnam]);
	IF .pcb[pcb$l_pid] NEQ .ucb[ucb$l_pid]	! Consistency check: do PIDs
	THEN scratch[d_t_prcnam] = 0;		! Still match?  If no, don't
	END;					! print the procname.
    END;

!
! For journals, get journal-specific information.
!
IF .ucb[ucb$b_devclass] EQLU dc$_journal
THEN
    BEGIN
    copy_data (ucb, scratch, l_jnl_mask,
			     l_jnl_seqno,
			     l_jnl_asid,
			     l_jnl_quot,
			     l_jnl_refc,
			     l_jnl_trefc,
			     w_jnl_id,
			     w_devsts,
			     b_amod);
    IF NOT .ucb[ucb$v_jnl_slv]		! If not a slave UCB
    AND .vcb NEQ 0			! and there's a VCB
    THEN
	BEGIN
	LOCAL
	    first_jmt,
	    jmt : REF $BBLOCK;
	copy_data(vcb, scratch, l_jnl_char,
				w_jnl_cop);
	IF (first_jmt = jmt = .vcb[vcb$l_jnl_jmtfl]) NEQ 0
	THEN
	    BEGIN
	    LOCAL
		pointer : REF VECTOR[,BYTE],
    		wcb : REF $BBLOCK,
		jnlucb : REF $BBLOCK,
		jnlddb : REF $BBLOCK;
	    CH$MOVE(.(jmt[jmt$t_grpnam])<0,8> + 1,
		     jmt[jmt$t_grpnam],
		     scratch[d_t_grpnam]);
	    scratch[d_l_fil_mxvbn] = .jmt[jmt$l_fil_mxvbn];
	    scratch[d_b_jnl_spl] = .jmt[jmt$v_spooled];
	    pointer = .scratch + d_k_length;
	    scratch[d_b_jnl_avl] = 0;
	    DO
		BEGIN
		IF .jmt[jmt$v_avl] 
		THEN scratch[d_b_jnl_avl] = .scratch[d_b_jnl_avl] + 1;
		IF (wcb = .jmt[jmt$l_fil_wcb]) NEQ 0
		THEN
		    BEGIN
		    IF (jnlucb = .jmt[jmt$l_fil_ucb]) NEQ 0
		    THEN IF (jnlddb = .jnlucb[ucb$l_ddb]) NEQ 0
		    THEN
			BEGIN
			LOCAL
			    count;
			ioc$cvt_devnam(20,
				       pointer[0],
				       -1,
				       .jnlucb;
				       count);
			pointer[0] = .count - 1;
			pointer = pointer[.count];
			END;
		    END;
		jmt = .jmt[jmt$l_forjnllnk];
		END
	    UNTIL (.jmt EQL .first_jmt) OR (.jmt EQL 0);
	    END;
	END;
    END;

!
! If this is a disk, get the maxblock value
!
IF .ucb[ucb$b_devclass] EQLU dc$_disk
THEN
    scratch[d_l_maxblock] = .ucb[ucb$l_maxblock];

!
! If this is a disk, tape, or journal, collect common information in the VCB.
!
IF .ucb[ucb$b_devclass] EQLU dc$_disk
OR .ucb[ucb$b_devclass] EQLU dc$_tape
OR .ucb[ucb$b_devclass] EQLU dc$_journal
THEN
    BEGIN
    IF .vcb EQL 0
    THEN (scratch[d_b_cont] = 0; RETURN true);	! If no VCB, go away.
    scratch[d_b_cont] = 1;			! Say there's more
    copy_data (vcb, scratch, b_status,		! Copy VCB stuff
			     w_rvn,
			     w_mcount,
			     w_trans);
    IF .ucb[ucb$b_devclass] NEQ dc$_journal
    THEN CH$MOVE(vcb$s_volname,			! Get the volume label
	         vcb[vcb$t_volname],
	         scratch[d_t_volnam])
    ELSE CH$MOVE(ucb$s_jnl_nam,
    		 ucb[ucb$b_jnl_nam],
    		 scratch[d_t_volnam]);

    scratch[d_b_aqbtype] = scratch[d_t_acpnam] = 0;	! Assume no AQB, therefore no ACP name
    IF (aqb = .vcb[vcb$l_aqb]) EQL 0			! If no AQB, then no more
    THEN RETURN true;					! Go away

    scratch[d_b_aqbtype] = .aqb[aqb$b_acptype];		! Stash the ACP type
    IF .aqb[aqb$l_acppid] NEQ 0				! If the pid checks pass, get the ACP process name
    THEN
	BEGIN
	LOCAL
	    pcb : REF $BBLOCK;
	pcb = .sch$gl_pcbvec[.(aqb[aqb$l_acppid])<0,16>];
	IF .pcb[pcb$l_pid] EQL .aqb[aqb$l_acppid]
	THEN
	    CH$MOVE(pcb$s_lname,
		    pcb[pcb$t_lname],
		    scratch[d_t_acpnam]);
	END;

!
! If a magtape, get magtape-specific data from the Magtape Volume List (MVL).
! This is rather involved, since there is no direct link between the MVL and
! the UCB in question.  Instead, the list of UCB's in the Relative Volume 
! Table are scanned in index order, until this UCB is found.  The mounted tape 
! in the MVL with the same index is then found.
!
    IF .aqb[aqb$b_acptype] EQL aqb$k_mta
    THEN
	BEGIN
	BIND
	    rvt = vcb[vcb$l_rvt] : REF $BBLOCK,
	    ucblst = rvt[rvt$l_ucblst] : VECTOR;
	LOCAL
	    index;
	index = -1;
	INCR i FROM 0 TO .rvt[rvt$b_nvols] -1 DO
	(IF .ucblst[.i] EQL .ucb
	 THEN (index = .i; EXITLOOP));
	IF .index EQL -1
	THEN
	    BEGIN
	    scratch[d_t_volnam] = 0;
	    scratch[d_w_rvn] = 0;
	    END
	ELSE
	    BEGIN
	    LOCAL
		limit,
		mvl : REF $BBLOCK;
	    mvl = .vcb[vcb$l_mvl] + mvl$k_fixlen;
	    limit = .mvl[mvl$b_nvols] - 1;
	    INCR mvli FROM 0 TO .limit DO		! Find an entry with
		BEGIN					! the same RVN and
		IF .mvl[mvl$b_rvn] EQL .index		! that is mounted
		AND .mvl[mvl$b_status]			! (low bit set -> mounted)
		THEN
		    BEGIN
		    scratch[d_w_rvn] = .mvli + 1;	! Because RVN's start at 1
		    CH$MOVE(mvl$s_vollbl,		! Get the volume label
			    mvl[mvl$t_vollbl],
			    scratch[d_t_volnam]);
		    EXITLOOP				! Skip the rest of the MVL
		    END
		ELSE mvl = .mvl + mvl$k_length;		! Otherwise, go to next 
		END;					! MVL entry
	    END;
	scratch[d_w_recordsz] = .vcb[vcb$w_recordsz];	! Get record size
	RETURN true;					! Go away.
	END;
!
! If this is a disk, collect disk-specific information
!
    IF .aqb[aqb$b_acptype] EQL aqb$k_f11v1
    OR .aqb[aqb$b_acptype] EQL aqb$k_f11v2
    THEN 
	BEGIN
	copy_data (vcb, scratch, w_cluster,
				 w_extend,
				 l_free,
				 l_maxfiles,
				 b_window,
				 b_lru_lim);
	END;

!
! For ODS-2 disks, there is more information to collect, namely the retention
! periods and caching parameters.
!
    IF .aqb[aqb$b_acptype] EQL aqb$k_f11v2
    THEN
	BEGIN
	LOCAL vca : REF $BBLOCK;
	!
	! For ODS-2 disks, get the correct free blocks from the value block associated with
	! the volume lock.  We call an internal routine in GETDVI which will use $GETLKI to
	! grab the value from the XQP's lock value block.  This routine expects to be called
	! at IPL = IPL$_ASTDEL.
	!
	exe$dvi_freeblocks (.vcb[vcb$l_vollkid], scratch[d_l_free]);
	copy_data (vcb, scratch, b_status2);
	CH$MOVE(vcb$s_retainmin + vcb$s_retainmax,
		vcb[vcb$q_retainmin],
		scratch[d_q_retainmin]);
	scratch[d_w_fidsize] = scratch[d_w_quosize]
			     = scratch[d_w_extsize]
			     = 0;
	IF (vca = .vcb[vcb$l_cache]) NEQ 0		! If fid/ext cache
	THEN						! present, get those
	    BEGIN
	    LOCAL cache : REF $BBLOCK;
	    IF (cache = .vca[vca$l_fidcache]) NEQ 0
	    THEN scratch[d_w_fidsize] = .cache[vca$w_fidsize];
	    IF (cache = .vca[vca$l_extcache]) NEQ 0
	    THEN
		BEGIN
		scratch[d_w_extsize] = .cache[vca$w_extsize];
		scratch[d_w_extlimit] = .cache[vca$w_extlimit];
		scratch[d_l_exttotal] = .cache[vca$l_exttotal];
		END;
	    END;
	IF (vca = .vcb[vcb$l_quocache]) NEQ 0		! If quota cache,
	THEN scratch[d_w_quosize] = .vca[vca$w_quosize];! get quota size.
	$ASSUME (d_s_acpnam, GEQ, f11bc$s_cachename);	! Make sure it is large enough
	IF  ((vca = .aqb[aqb$l_bufcache]) NEQ 0)	! If buffer cache exists get the cache name
	  AND
	    (.aqb[aqb$l_acppid] EQL 0)			! if the acp didn't have a name
	THEN
	    BEGIN
	    scratch[d_v_cachename] = 1;			! Remember that it is cache name and not ACP name
	    CH$MOVE (f11bc$s_cachename, 
		     vca[f11bc$t_cachename],
		     scratch[d_t_acpnam]);
	    scratch[d_w_bfrcnt] = .vca[f11bc$w_bfrcnt];	! Number of buffer cache blocks
	    END;
	END;
    END;

!
! In the event that that the device is spooled, the VCB field actually
! points to a block containing the name of the queue to which this device
! is spooled, and UCB$L_AMB contains the address of the UCB of the 
! intermediate device.
!
IF .$BBLOCK[ucb[ucb$l_devchar], dev$v_spl]
THEN
    BEGIN
    BIND
	int_ucb = ucb[ucb$l_amb] : REF $BBLOCK,
	int_ddb = int_ucb[ucb$l_ddb] : REF $BBLOCK;
    ioc$cvt_devnam(20,					! Get device name, max this long
		   scratch[d_t_intdev],			! put it here,
		   -1,					! in standard display format
		   .int_ucb;				! UCB is here
		   scratch[d_l_intlen]);		! final length here
    IF .vcb NEQ 0
    THEN CH$MOVE(.vcb[vcb$b_qnamecnt] + 1,
		 vcb[vcb$b_qnamecnt],
		 scratch[d_t_qname])
    ELSE scratch[d_t_qname] = 0;
    RETURN true;
    END;

RETURN true;
END;

END
ELUDOM
