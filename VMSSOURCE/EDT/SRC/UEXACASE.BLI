%TITLE 'EDT$UEXACASE - match strings of equal length'
MODULE EDT$UEXACASE (				! Match strings of equal length
		IDENT = 'V04-000'			! File: UEXACASE.BLI Edit: JBS1005
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Exact case matching.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: February 7, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 19-FEB-1981.  This module was created by
!	extracting routine EDT$$STR_CMP  from module UTIL.
! 1-002	- Regularize headers.  JBS 11-Mar-1981
! 1-003	- Add a parameter, to eliminate the other string compare routines,
!	   and add two new search types.  This amounts to support of the
!	   DEC Multinational character set.  JBS 20-Jul-1982
! 1-004	- Put VT220 support under a conditional.  JBS 10-Feb-1983
! 1-005	- Make unimplemented searches = general.  JBS 14-Feb-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$STR_CMP;				! Compare two strings, of equal length

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

LIBRARY 'EDTSRC:TRANSLATE';

LIBRARY 'EDTSRC:SUPPORTS';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$STR_CMP  - compare two strings of equal length'

GLOBAL ROUTINE EDT$$STR_CMP (			! Compare two strings of equal length
    SOURCE, 					! Pointer to source string
    OBJECT, 					! Pointer to object string
    OBJ_LEN, 					! Length of both strings
    MATCH					! Type of match
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine compares two strings of equal length.  There are several
!	types of comparison that can be done.
!
! FORMAL PARAMETERS:
!
!  SOURCE		Pointer to the source string.
!
!  OBJECT		Pointer to the object string.
!
!  OBJ_LEN		Length of both strings.
!
!  MATCH		The type of matching: 0 = general, 1 = exact, 2 = WPS,
!			 3 = case_insensitive, 4 = diacritical_insensitive
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Returns one if the strings match, zero if not.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

%IF SUPPORT_VT220
%THEN

    EXTERNAL
	EDT$$B_CHAR_INFO : BLOCKVECTOR [256, 1, BYTE];	! Information about characters

    BIND
	GENERAL_TABLE = UPLIT (BYTE (CHAR_GENERAL)) : VECTOR [256, BYTE];

    BIND
	CI_TABLE = UPLIT (BYTE (CHAR_CI)) : VECTOR [256, BYTE];

    BIND
	DI_TABLE = UPLIT (BYTE (CHAR_DI)) : VECTOR [256, BYTE];

%FI

    CASE .MATCH FROM 0 TO 4 OF
	SET

	[0

%IF ( NOT SUPPORT_VT220)
%THEN
	, 3, 4
%FI

	] : 				! General: disregard both the case of letters and diacritical marks
	    BEGIN

	    LOCAL
		SP,
		OP;

	    OP = .OBJECT;
	    SP = .SOURCE;
	    ASSERT ((.SP NEQA 0) AND (.OP NEQA 0));

	    DECR I FROM .OBJ_LEN - 1 TO 0 DO
		BEGIN

%IF SUPPORT_VT220
%THEN

		IF (.GENERAL_TABLE [CH$RCHAR_A (SP)] NEQ .GENERAL_TABLE [CH$RCHAR_A (OP)]) THEN RETURN (0);

%ELSE

		LOCAL
		    SC,
		    OC;

		SC = CH$RCHAR_A (SP);
		OC = CH$RCHAR_A (OP);

		IF ((.SC GEQ %C'a') AND (.SC LEQ %C'z')) THEN SC = .SC - %C'a' + %C'A';

		IF ((.OC GEQ %C'a') AND (.OC LEQ %C'z')) THEN OC = .OC - %C'a' + %C'A';

		IF (.SC NEQ .OC) THEN RETURN (0);

%FI

		END;

	    END;

	[1] : 					! Exact match

	    IF ( NOT CH$EQL (.OBJ_LEN, .SOURCE, .OBJ_LEN, .OBJECT)) THEN RETURN (0);

	[2] :
!+
! WPS matching: if the object (model) character is a lower case letter,
! the source character may be either upper or lower case.
! Otherwise, an exact match is required.
!-
	    BEGIN

	    LOCAL
		SP,
		OP,
		OC;

%IF (SUPPORT_WPS AND SUPPORT_VT220)
%THEN
	    OP = .OBJECT;
	    SP = .SOURCE;
	    ASSERT ((.SP NEQA 0) AND (.OP NEQA 0));

	    DECR I FROM .OBJ_LEN - 1 TO 0 DO
		BEGIN
		OC = CH$RCHAR_A (OP);

		IF .EDT$$B_CHAR_INFO [.OC, 0, 0, 1, 0]	! If OC is lower case
		THEN
		    BEGIN

		    IF (.CI_TABLE [.OC] NEQ .CI_TABLE [CH$RCHAR_A (SP)]) THEN RETURN (0);

		    END
		ELSE
		    BEGIN

		    IF (.OC NEQ CH$RCHAR_A (SP)) THEN RETURN (0);

		    END;

		END;

%ELSE
	    0
%FI

	    END;

%IF SUPPORT_VT220
%THEN

	[3] : 					! Case-insensitive matching
	    BEGIN

	    LOCAL
		SP,
		OP;

	    OP = .OBJECT;
	    SP = .SOURCE;
	    ASSERT ((.SP NEQA 0) AND (.OP NEQA 0));

	    DECR I FROM .OBJ_LEN - 1 TO 0 DO
		BEGIN

		IF (.CI_TABLE [CH$RCHAR_A (SP)] NEQ .CI_TABLE [CH$RCHAR_A (OP)]) THEN RETURN (0);

		END;

	    END;

	[4] : 					! Diacritical-insensitive matching
	    BEGIN

	    LOCAL
		SP,
		OP;

	    OP = .OBJECT;
	    SP = .SOURCE;
	    ASSERT ((.SP NEQA 0) AND (.OP NEQA 0));

	    DECR I FROM .OBJ_LEN - 1 TO 0 DO
		BEGIN

		IF (.DI_TABLE [CH$RCHAR_A (SP)] NEQ .DI_TABLE [CH$RCHAR_A (OP)]) THEN RETURN (0);

		END;

	    END;
%FI

	[OUTRANGE] :
	    ASSERT (0);
	TES;

    RETURN (1);
    END;					! of routine EDT$$STR_CMP

!<BLF/PAGE>

END						! of module EDT$UEXACASE

ELUDOM
