MODULE RM3JOURNL (LANGUAGE (BLISS32) ,
		  IDENT = 'V04-000'
		 ) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:	This module contains routine specific for Recovery Unit 
!		Journaling and RU rollback recovery of RMS32 ISAM files.
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:	Todd M. Katz		CREATION DATE:		08-Jan-82
!
! MODIFIED BY:
!
!	V03-011	DAS0002		David Solomon		25-Mar-1984
!		Fix broken branches.
!
!	V03-010	DAS0001		David Solomon		01-Jul-1983
!		Fill in correct value for RJR$B_ENTRY_TYPE.
!
!	V03-009 TSK0001		Tamar Krichevsky	 7-Jun-1983
!		Move module to RM$RMS_JOURNAL psect.  Replace JNLDEF.R32
!		with RMSINTDEF.L32.  Change addressing mode of RM$RU_RECLAIM
!		to long relative.
!
!	V03-008	KPL0001		Peter Lieberwirth	26-May-1983
!		New format of RJR.
!
!	V03-007	TMK0003		Todd M. Katz		03-Apr-1983
!		Whenever refering to the actual bucket contents being journalled
!		in RM$AI_AND_BI_3, refer to the bucket in the journalling buffer
!		and not to the bucket controlled by the arguement BDB. Note that
!		in the case of AI Journalling, these two buckets will be the 
!		same, but this will not be so in the case of BI Journalling.
!
!	V03-006	TMK0003		Todd M. Katz		27-Mar-1983
!
!		1. Change the linkage of RM$RU_JOURNAL3 to RL$RABREG_67.
!		2. Change the linkage of RM$WRTJNL to RL$RABREG_4.
!		3. Change the routine RM$RU_JOURNAL3 to reflect the linkage
!		   changes.
!		4. Add the routine RM$AI_AND_BI_3 to direct the construction
!		   and journalling of entries to AI and BI Journals for ISAM
!		   files.
!		5. Modify RM$RU_RECOVER so that the RFA field within the RAB
!		   is not zeroed when the operation being recovered is a $FIND.
!
!	V03-005 MCN0002		Maria del C. Nasr	24-Mar-1983
!		More linkages reorganization.
!
!	V03-004	TMK0002		Todd M. Katz		17-Mar-1983
!		Change RJR$_DELET to RJR$_DELETE and RJR$_UPDAT to RJR$_UPDATE.
!		Also, fix up the External Register Linkages in RM$RU_JOURNL3.
!
!	V03-003	TMK0002		Todd M. Katz		16-Mar-1983
!
!		1. Change all RMSR$_ symbols to be RJR$_ symbols.
!		2. Change RJR$B_OP RJR$B_ORG to RJR$B_OPER and RJR$B_ENTRY_TYPE
!		   respectively.
!		3. Change the linkage to RM$RU_JOURNAL3 so that the BDB is an
!		   external register.
!		4. The interface to RM$WRTJNL has changed. Reflect this change
!		   within RM$RU_JOURNAL3.
!
!	V03-002	TMK0001		Todd M. Katz		11-Mar-1983
!		If the primary data bucket has not been exclusively locked,
!		then RM$RU_RECLAIM returns 0 indicating that the record/RRV
!		could not be reclaimed.
!
!	V03-001	MCN0001		Maria del C. Nasr	24-Feb-1983
!		Reorganize linkages
!
!*****

LIBRARY 'RMSLIB:RMSINTDEF';

LIBRARY 'SYS$LIBRARY:LIB';

REQUIRE 'RMSSRC:RMSIDXDEF';

! Define default PSECTs for code.
!
PSECT
    CODE = RM$RMS_JOURNAL(PSECT_ATTR),
    PLIT = RM$RMS_JOURNAL(PSECT_ATTR);

! Linkages.
!
LINKAGE
    L_JSB,
    L_PRESERVE1,
    L_QUERY_AND_LOCK,
    L_RABREG,
    L_RABREG_4,
    L_RABREG_4567,
    L_RABREG_457,
    L_RABREG_567,
    L_RABREG_67,
    L_RABREG_7,
    L_REC_OVHD;


! External Routines.
!
EXTERNAL ROUTINE
    RM$DELETE3B		: RL$RABREG ADDRESSING_MODE (LONG_RELATIVE),
    RM$DELETE_UDR	: RL$RABREG_4567 ADDRESSING_MODE (LONG_RELATIVE),
    RM$KEY_DESC		: RL$RABREG_7 ADDRESSING_MODE (LONG_RELATIVE),
    RM$LOCK		: RL$QUERY_AND_LOCK ADDRESSING_MODE (LONG_RELATIVE),
    RM$MOVE		: RL$PRESERVE1 ADDRESSING_MODE (LONG_RELATIVE),
    RM$NOREAD_LONG	: RL$JSB ADDRESSING_MODE (LONG_RELATIVE),
    RM$QUERY_PROC	: RL$QUERY_AND_LOCK ADDRESSING_MODE (LONG_RELATIVE),
    RM$RECORD_ID	: RL$RABREG_67 ADDRESSING_MODE (LONG_RELATIVE),
    RM$RECORD_KEY	: RL$PRESERVE1 ADDRESSING_MODE (LONG_RELATIVE),
    RM$RECORD_VBN	: RL$PRESERVE1 ADDRESSING_MODE (LONG_RELATIVE),
    RM$REC_OVHD		: RL$REC_OVHD ADDRESSING_MODE (LONG_RELATIVE),
    RM$UPDATE3B		: RL$RABREG_67 ADDRESSING_MODE (LONG_RELATIVE),
    RM$WRTJNL		: RL$RABREG_4 ADDRESSING_MODE (LONG_RELATIVE);

! Forward Routines.
!
FORWARD ROUTINE
    RM$RU_REFORMAT	: RL$RABREG_567 NOVALUE;

%SBTTL 'RM$AI_AND_BI_3'
GLOBAL ROUTINE RM$AI_AND_BI_3 (JOURNAL) : RL$RABREG_4 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	The purpose of this routine is to construct all AI and BI Journal 
!	entries for ISAM files, and to oversee their writing.
!
! CALLING SEQUENCE:
!
!	RM$AI_AND_BI_3()
!
! INPUT PARAMETERS:
!
!	JOURNAL			- type of journalling being done (AI or BI)
!
! IMPLICIT INPUT:
!
!	BDB			- address of BDB for bucket to be Journalled
!	    BDB$L_ADDR		- address of buffer
!	    BDB$L_AI_BDB	- address of AI Journalling BDB
!	    BDB$L_BI_BDB	- address of BI Journalling BDB
!	    BDB$W_NUMB		- number of bytes of buffer in use
!	    BDB$L_VBN		- VBN of bucket
!	
! OUTPUT PARAMETER:
!	NONE
!
! IMPLICIT OUTPUT:
!	NONE
!	
! ROUTINE VALUE:
!
!	Whatever value is returned from the call to RM$WRTJNL.
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_BDB_STR;

    GLOBAL REGISTER
	RJR_ADDR = 5	: REF BBLOCK;

    LOCAL
	JNL_BDB		: REF BBLOCK,
	RJR_BUCKET	: REF BBLOCK;

    ! Retrieve the address of the appropriate journalling BDB, and then the
    ! appropriate journalling buffer from the journalling BDB.
    !
    IF .JOURNAL EQLU CJF$_AI
    THEN
	JNL_BDB = .BDB[BDB$L_AI_BDB]
    ELSE
	JNL_BDB = .BDB[BDB$L_BI_BDB];

    RJR_ADDR	= .JNL_BDB[BDB$L_ADDR];
    RJR_BUCKET	= .RJR_ADDR + RJR$C_BKTLEN;

    ! Construct the AI/BI Journal Entry for the current Journalled operation.
    ! If the bucket is a single block in size, or is an index bucket, then the 
    ! entire bucket is journalled; otherwise, just the contents of the bucket 
    ! up to the freespace pointer is journalled.
    !
    RJR_ADDR[RJR$B_ORG] 	= RJR$C_IDX;
    RJR_ADDR[RJR$B_ENTRY_TYPE]	= RJR$C_BUCKET;
    RJR_ADDR[RJR$B_OPER]	= RJR$_BUCKET;
    RJR_ADDR[RJR$L_BKT_VBN]	= .BDB[BDB$L_VBN];
    RJR_ADDR[RJR$W_BKT_SIZE]	= .BDB[BDB$W_NUMB];

    IF  .BDB[BDB$W_NUMB] EQLU 512
	 OR
	.RJR_BUCKET[BKT$B_LEVEL] GTRU 0
    THEN
	RJR_ADDR[RJR$W_JBKT_SIZE] = .BDB[BDB$W_NUMB]
    ELSE
	RJR_ADDR[RJR$W_JBKT_SIZE] = .RJR_BUCKET[BKT$W_FREESPACE];

    JNL_BDB[BDB$W_NUMB] = RJR$C_BKTLEN + .RJR_ADDR[RJR$W_JBKT_SIZE];

    ! Write out the AI/BI Journal Entry, and return the success or status of 
    ! the journal operation.
    !
    RETURN RM$WRTJNL (.JOURNAL, .JNL_BDB);

    END;

%SBTTL 'RM$RU_JOURNAL3'
GLOBAL ROUTINE RM$RU_JOURNAL3 (OPERATION, VBN, ID, SIZE) : RL$RABREG_67 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	The purpose of this routine is to construct all RU Journal entries
!	for ISAM files, and to oversee their writing.
!
! CALLING SEQUENCE:
!
!	RM$RU_JOURNAL3()
!
! INPUT PARAMETERS:
!
!	OPERATION		- operation being RU Journalled
!	VBN			- VBN of RU Journalled record's RFA
!	ID			- ID of RU Journalled record's RFA
!	SIZE			- size of record image to be journalled
!
! IMPLICIT INPUT:
!
!	IRAB			- address of IRAB
!	    IRB$L_CURBDB	- address of BDB for primary data bucket
!	    IRB$L_JNLBDB	- address of BDB for journal entry buffer
!
!	REC_ADDR		- address of record image to be journalled
!	
! OUTPUT PARAMETER:
!	NONE
!
! IMPLICIT OUTPUT:
!	NONE
!	
! ROUTINE VALUE:
!
!	whatever value is returned from the call to RM$WRTJNL.
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_REC_ADDR;

    GLOBAL REGISTER
	RJR_ADDR = 5	: REF BBLOCK;

    LOCAL
	JNL_BDB		: REF BBLOCK;

    ! Retrieve the address of the RU Journal Entry buffer.
    !
    JNL_BDB = .IRAB[IRB$L_JNLBDB];
    RJR_ADDR = .JNL_BDB[BDB$L_ADDR];

    ! Construct the RU Journal Entry for the current RU Journalled operation.
    !
    RJR_ADDR[RJR$B_ENTRY_TYPE]	= RJR$C_RECORD;
    RJR_ADDR[RJR$B_ORG]		= RJR$C_IDX;
    RJR_ADDR[RJR$B_OPER]  	= .OPERATION;
    RJR_ADDR[RJR$L_RFA0]	= .VBN;
    RJR_ADDR[RJR$W_RFA4]	= .ID;
    RJR_ADDR[RJR$W_RSIZE]	= .SIZE;

    BEGIN

    GLOBAL REGISTER
	R_BDB,
	R_IDX_DFN;

    JNL_BDB[BDB$W_NUMB] = RM$MOVE (.SIZE, .REC_ADDR, RJR_ADDR[RJR$T_RIMAGE]) 
				- .RJR_ADDR;
    END;

    ! Write out the RU Journal Entry, and return the success or status of the 
    ! journal operation.
    !
    BEGIN

    GLOBAL REGISTER
	R_BDB;

    BDB = .IRAB[IRB$L_CURBDB];

    RETURN RM$WRTJNL (CJF$_RU, .JNL_BDB);
    END;

    END;

%SBTTL 'RM$RU_RECLAIM'
GLOBAL ROUTINE RM$RU_RECLAIM : RL$RABREG_67 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	The purpose of this routine is to try and reclaim space from the current
!	record which has been previously modified within a Recovery Unit. Such
!	reclamation can only take place if the Recovery Unit in which the 
!	current record was modified has successfully terminated, the file
!	has been opened for write access, and the primary data bucket containing
!	the record has been exclusively locked.
!
!	If the current record was updated within a Recovery Unit that has since
!	terminated, then at this time the record maybe re-formatted. This 
!	involves placing the record into the normal format from the special 
!	format it is put in to reserve space during a Recovery Unit, and 
!	reclamating any unused space.
!
!	If the current record was deleted within a Recovery Unit that has since
!	terminated, then at this time the record is deleted for good according
!	to the normal rules of primary data record or RRV deletion. 
!
!	Note that if the record had both been deleted and updated within a 
!	Recovery Unit, then the deletion takes precedence over the updating.
!
!	This routine returns success whenever it has modified the current
!	primary data record regardless of whether or not any space was actually
!	reclaimed through doing do.
!
! CALLING SEQUENCE:
!
!	RM$RU_RECLAIM()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUT:
!
!	IFAB			- address of IFAB
!	    IFB$V_RUP		- if set, Recovery Unit is in progress
!	    IFB$V_WRTACC	- if set, file is opened for write access
!
!	IRAB			- address of IRAB
!	    IRB$L_CURBDB	- address of BDB for primary data bucket
!
!	REC_ADDR		- address of current primary data record
!
! OUTPUT PARAMETER:
!	NONE
!
! IMPLICIT OUTPUT:
!	NONE
!
! ROUTINE VALUE:
!
!	0	- reclamation of the record was not possible.
!	1	- reclamation of the record was possible.
!	RLK	- reclamation of the record was not possible because it could 
!		  not be locked
!
! SIDE EFFECTS:
!
!	If the current record had been updated within a Recovery Unit,
!	    then it might have been re-formatted.
!	If the current record had been deleted within a Recovery Unit,
!	    then it might have been deleted for good and its space partially
!	    or totally reclaimed.
!	If any reclamation took place, the BDB for the primary data bucket is
!	    marked dirty.
!
!--

    BEGIN

    BUILTIN
	AP;

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    GLOBAL REGISTER
	R_BDB;

    LABEL
	RECLAIM;

    LOCAL
	STATUS;

    ! Determine the lock status of the record which has been modified
    ! with a Recovery Unit but do not wait for the lock to be released if
    ! another stream has the record locked.
    !
    AP  = 3;
    IRAB[IRB$V_NO_Q_WAIT] = 1;
    STATUS = RM$QUERY_PROC (RM$RECORD_VBN(), RM$RECORD_ID());

    ! If and only if the Recovery Unit in which the current primary data record
    ! was modified has completed and the file was opened for write access can 
    ! this record be subject to special processing. If the query lock indicates 
    ! that the current record is not locked by any stream, or if the current 
    ! stream already has the record locked but it is not in a Recovery Unit, 
    ! then RMS may conclude that the Recovery Unit in which the current record 
    ! was modified has concluded, and subject the record to special processing.
    !
    IF  .IFAB[IFB$V_WRTACC]
	 AND
	(.STATUS<0,16> EQLU RMSSUC()
	 	 OR
		(NOT .IFAB[IFB$V_RUP]
			 AND
			.STATUS<0,16> EQLU RMSSUC(OK_ALK)))
    THEN
RECLAIM:
	BEGIN

	GLOBAL REGISTER
	    COMMON_IO_STR;

	! If the primary data bucket containing the record has not been 
	! exclusively locked, then no space reclamation can take place.
	!
	BDB = .IRAB[IRB$L_CURBDB];

	IF NOT .BBLOCK[.BDB[BDB$L_BLB_PTR], BLB$V_LOCK]
	THEN
	    BEGIN
	    STATUS = 0;
	    LEAVE RECLAIM;
	    END;

	! Retrieve the address of the primary data bucket.
	!
	BKT_ADDR = .BDB[BDB$L_ADDR];

	! A 1 will be returned as the value of this routine indicating that
	! reclamation was possible. This will be regardless of whether any
	! space will actually be reclaimed. Also, mark the primary data bucket's
	! BDB as dirty.
	!
	STATUS = 1;
	BDB[BDB$V_DRT] = 1;

	! If the current record had been deleted within a Recovery Unit then 
	! it maybe truely deleted at this time, and the space it occupies 
	! reclaimed according to the normal rules for the deletion of primary 
	! data or RRV records.
	!
	IF .REC_ADDR[IRC$V_RU_DELETE]
	THEN
	    BEGIN

	    ! Clear the RU_DELETE and the RU_UPDATE bit within the current 
	    ! record's control byte.
	    !
	    REC_ADDR[IRC$V_RU_DELETE] = 0;
	    REC_ADDR[IRC$V_RU_UPDATE] = 0;

	    ! Delete the current record (RRV or primary data record).
	    !
	    IF NOT .REC_ADDR[IRC$V_RRV]
	    THEN
		RM$DELETE_UDR()
	    ELSE
		BEGIN

		LOCAL
		    LENGTH;

		LENGTH = (.BKT_ADDR + .BKT_ADDR[BKT$W_FREESPACE]) 
				    - (.REC_ADDR + IRC$C_FIXOVHSZ3);
	
		IF .LENGTH GTR 0
		THEN
		    RM$MOVE (.LENGTH, .REC_ADDR + IRC$C_FIXOVHSZ3, .REC_ADDR);

		BKT_ADDR[BKT$W_FREESPACE] = .BKT_ADDR[BKT$W_FREESPACE] 
						- IRC$C_FIXOVHSZ3;
		END;
	    END

	! If the current record had been updated within a Recovery Unit
	! then it maybe reformated at this time.
	!
	ELSE
	    RM$RU_REFORMAT();
	END

    ! If RMS is unable to lock the current primary data record, or if the
    ! stream itself has it locked and the current process is within a Recovery
    ! Unit then RMS concludes that the Recovery Unit in which the record was
    ! modified has not successfully concluded. In these cases, and also when
    ! the file was not opned for write access the routine will return a status 
    ! indicating that no reclamation was possible. RLK will be returned if RMS 
    ! could not lock the record; otherwise, a status of 0 is returned.
    !
    ELSE
	IF .STATUS<0,16> NEQU RMSERR(RLK)
	THEN
	    STATUS = 0;

    ! Return whether or not any reclamation of the current primary data record
    ! was possible.
    !
    RETURN .STATUS;
    END;

%SBTTL 'RM$RU_RECOVER'
GLOBAL ROUTINE RM$RU_RECOVER (OPERATION) : RL$RABREG =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	The purpose of this routine is to oversee the RU ROLLBACK Recovery
!	operations. Whenever one of these operations are initiated on an ISAM
!	file, it is intercepted by the appropriate routine in the module
!	RM3FACE, and control is transfered here. This routine then performs a 
!	number of checks, sets up the internal environment common to all RU
!	ROLLBACK operations, and then dispatches to the code which actually
!	directs each of the individual RU ROLLBACK Recovery operations.
!
! CALLING SEQUENCE:
!
!	RM$RU_RECOVER()
!
! INPUT PARAMETERS:
!
!	OPERATION		- the operation to be RU ROLLBACK Recovered
!
! IMPLICIT INPUT:
!
!	IDX_DFN			- address of the primary key index descriptor
!	    IDX$B_DATBKTSZ	- size of a primary data bucket in blocks
!	    IDX$B_DATBKTYP	- primary data bucket type
!	    IDX$V_DUPKEYS	- if set, duplicate primary keys are allowed
!	    IDX$V_KEY_COMPR	- if set, primary key compression is enabled
!	    IDX$B_KEYSZ		- size of primary key
!	    IDX$W_MINRECSZ	- minimum size of record to contain primary key
!	    IDX$V_REC_COMPR	- if set, record compression is enabled
!
!	IFAB			- address of IFAB
!	    IFB$W_KBUFSZ	- size of an internal keybuffer
!	    IFB$L_LRL		- longest record length
!	    IFB$W_MRS		- maximum record size
!	    IFB$B_RFMORG	- record format
!
!	IRAB			- address of IRAB
!	    IRB$L_KEYBUF	- address of the contigious keybuffers
!	    IRB$B_MODE		- access mode of the user operaion
! 
!	RAB			- address of the RAB
!	    RAB$L_RBF		- address of the user record buffer
!	    RAB$L_RFA0		- RFA VBN of the record to be RU Recovered
!	    RAB$W_RFA4		- RFA ID of the record to be RU Recovered
!	    RAB$W_RSZ		- size of the user record
!
! OUTPUT PARAMETER:
!	NONE
!
! IMPLICIT OUTPUT:
!
!	IRAB			- address of the IRAB
!	    IRB$B_CUR_KREF	- 0
!	    IRB$L_RBF		- address of the user record buffer
!	    IRB$B_RP_KREF	- 0
!	    IRB$W_RSZ		- size of the user record
!	    IRB$W_POS_ID	- RFA ID of the record to be RU Recovered
!	    IRB$L_POS_VBN	- RFA VBN of the record to be RU Recovered
!	    IRB$W_UDR_ID	- RFA ID of the record to be RU Recovered
!	    IRB$L_UDR_VBN	- RFA VBN of the record to be RU Recovered
!
!	RAB			- address of user RAB
!	    RAB$L_RFA0		- 0 (Unless the operation is a $FIND Recovery)
!	    RAB$W_RFA4		- 0 (Unless the operation is a $FIND Recovery)
!
! ROUTINE VALUE:
!
!	CUR - there is no current record to be RU ROLLBACK Recovered.
!	RBF - unable to read user's record buffer.
!	RSZ - user record size is bad
!	SUC - successful RU ROLLBACK Recovery operatio.
!
!	Various Routine values from the following routines:
!
!	RM$DELETE3B
!	RM$LOCK
!	RM$UPDATE3B
!
! SIDE EFFECTS:
!
!	On success, the RU operation will have been successfully recovered.
!	On failures, the RU operation might have been successfully recovered
!	     depending on where the failure occurred and what the failure was.
!
!	AP is trashed.
!	The primary key of the record will be placed into keybuffers 1 and 2.
!	Several parts of the NRP context will be initialized with information
!	    about the record that is to be recovered.
!	The RAB's RFA field will be zeroed (Unless the operation is a 
!	    $FIND Recovery).
!	
!
!--

    BEGIN

    BUILTIN
	AP;

    EXTERNAL REGISTER
	COMMON_RAB_STR;

    LABEL
	INITIALIZE;

    ! Perform the initilizations and checks common to all RU ROLLBACK Recovery
    ! operations.
    !
INITIALIZE:
    BEGIN

    GLOBAL REGISTER
	R_IDX_DFN_STR;

    ! Make sure there is a record to be recovered.
    !    
    IF  .RAB[RAB$L_RFA0] EQLU 0
	 OR
	.RAB[RAB$W_RFA4] EQLU 0
    THEN
	RETURN RMSERR(CUR);

    ! If this is a $FIND RU ROLLBACK Recovery operation than all the required
    ! initializations and checks have been performed.
    !
    IF .OPERATION EQLU RJR$_FIND
    THEN
	LEAVE INITIALIZE;

    ! Save the size of the record and the address of the record buffer.
    ! 
    IRAB[IRB$L_RBF] = .RAB[RAB$L_RBF];
    IRAB[IRB$W_RSZ] = .RAB[RAB$W_RSZ];

    ! Make sure the size of the record isn't greater than the maximum record 
    ! size allowed.
    !
    IF .IFAB[IFB$B_RFMORG] EQL FAB$C_FIX
    THEN
	BEGIN

	IF .IRAB[IRB$W_RSZ] NEQU .IFAB[IFB$W_LRL]
	THEN
	    RETURN RMSERR(RSZ);
	END
    ELSE
	IF .IFAB[IFB$W_MRS] NEQ 0
	    AND
	   .IRAB[IRB$W_RSZ] GTRU .IFAB[IFB$W_MRS]
	THEN
	    RETURN RMSERR(RSZ);

    ! Make sure the record will fit in a primary data bucket. This is done
    ! by taking the size of the bucket less bucket overhead, subtracting the
    ! maximum overhead which maybe associated with a record in this file
    ! including possible key and record compression overhead, and comparing this
    ! value with the size of the record.
    !
    BEGIN

    LOCAL
	BUCKET_SIZE	: WORD;

    ! Retrieve the index descriptor for the primary key of reference.
    !
    RETURN_ON_ERROR (RM$KEY_DESC(0));

    BUCKET_SIZE = (.IDX_DFN[IDX$B_DATBKTSZ] * 512) - BKT$C_OVERHDSZ
						   - BKT$C_DATBKTOVH 
					           - IRC$C_FIXOVHSZ3;

    IF .IDX_DFN[IDX$V_DUPKEYS]
    THEN
	BUCKET_SIZE = .BUCKET_SIZE - BKT$C_DUPBKTOVH;

    IF  .IFAB[IFB$B_RFMORG] NEQU FAB$C_FIX
	 OR 
	(.IFAB[IFB$B_RFMORG] EQLU FAB$C_FIX
		 AND 
		.IDX_DFN[IDX$B_DATBKTYP] NEQU IDX$C_NCMPNCMP)
    THEN
	BUCKET_SIZE = .BUCKET_SIZE - IRC$C_DATSZFLD;

    IF .IDX_DFN[IDX$V_KEY_COMPR]
    THEN
	BUCKET_SIZE = .BUCKET_SIZE - IRC$C_KEYCMPOVH;

    IF .IDX_DFN[IDX$V_REC_COMPR]
    THEN
	BUCKET_SIZE = .BUCKET_SIZE - IRC$C_DATCMPOVH;

    IF .IRAB[IRB$W_RSZ] GTRU .BUCKET_SIZE
    THEN
	RETURN RMSERR(RSZ);
    END;

    ! Verify that the record is large enough to contain the whole primary key.
    !
    IF .IRAB[IRB$W_RSZ] LSSU .IDX_DFN[IDX$W_MINRECSZ]
    THEN
	RETURN RMSERR(RSZ);

    ! Probe the record buffer.
    !
    IF RM$NOREAD_LONG (.IRAB[IRB$W_RSZ], .IRAB[IRB$L_RBF], .IRAB[IRB$B_MODE])
    THEN
	RETURN RMSERR(RBF);

    ! Extract the primary key of the record into keybuffers 1 and 2.
    !
    BEGIN

    GLOBAL REGISTER
	R_BDB,
	R_REC_ADDR;

    AP = 3;
    REC_ADDR = .IRAB[IRB$L_RBF];
    RM$RECORD_KEY (KEYBUF_ADDR(1));

    RM$MOVE (.IDX_DFN[IDX$B_KEYSZ], KEYBUF_ADDR(1), KEYBUF_ADDR(2));
    END;

    ! Initialize the fields in the NRP such that the record being recovered
    ! becomes the current primary data record.
    !
    IRAB[IRB$B_CUR_KREF] = 0;
    IRAB[IRB$B_RP_KREF]  = 0;

    IRAB[IRB$L_UDR_VBN]  = .RAB[RAB$L_RFA0];
    IRAB[IRB$W_UDR_ID]   = .RAB[RAB$W_RFA4];
    IRAB[IRB$L_POS_VBN]  = .IRAB[IRB$L_UDR_VBN];
    IRAB[IRB$W_POS_ID]   = .IRAB[IRB$W_UDR_ID];
    END;

    ! Dispatch to the RU ROLLBACK Recovery Code Which is Specific for each
    ! type of operation to be recovered.
    !
    BEGIN

    LOCAL
	STATUS;

    SELECTONEU .OPERATION OF
	SET

	! The RU ROLLBACK operation requested is a $FIND. This just consists of
	! locking the record with the indicated RFA.
	!
	[RJR$_FIND]:	STATUS = RM$LOCK (.RAB[RAB$L_RFA0], .RAB[RAB$W_RFA4]);

	! The RU ROLLBACK operation requested is a $DELETE. This Recovery 
	! operation consists of un-deleting each part of the current record that
	! had been deleted within the Recovery Unit being rolled back.
	!
	[RJR$_DELETE]:  BEGIN
			IRAB[IRB$V_RU_UNDEL] = 1;
			STATUS = RM$DELETE3B();
			IRAB[IRB$V_RU_UNDEL] = 0;
			END;

	! The RU ROLLBACK operation requested is a $PUT. This Recovery operation
	! consists of deleting each and every part of the current record that 
	! was inserted as a new record within the Recovery Unit being rolled 
	! back.
	!
	[RJR$_PUT]:	STATUS = RM$DELETE3B();

	! The RU ROLLBACK operation requested is a $UPDATE. This Recovery 
	! operation consists of replacing a newer version of a record with an
	! older version of the same record which had been replaced within the 
	! Recovery Unit being rolled back.
	!
	[RJR$_UPDATE]:	BEGIN

			GLOBAL REGISTER
			    R_IDX_DFN,
			    R_REC_ADDR;

			IRAB[IRB$V_UPDATE] = 1;
			STATUS = RM$UPDATE3B();
			IRAB[IRB$V_UPDATE] = 1;
			END;
	TES;

    ! Zero in the user's RAB the RFA of the record which has been RU ROLLBACK 
    ! Recovered unless the operation being recovered is a $FIND.
    !
    IF .OPERATION NEQU RJR$_FIND
    THEN
	BEGIN
	RAB[RAB$W_RFA4] = 0;
	RAB[RAB$L_RFA0] = 0;
	END;

    ! Return the status of the RU ROLLBACK Recovery operation.
    !
    RETURN .STATUS;
    END;
    END;

%SBTTL 'RM$RU_REFORMAT'
GLOBAL ROUTINE RM$RU_REFORMAT : RL$RABREG_567 NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine's responsibility is to reformat primary data records which
!	have decreased in size during an $UPDATE within a recovery unit and 
!	consequently were placed in a special format to reserve the space that 
!	would otherwise have been freed. Such records have the control bit
!	IRC$V_RU_UPDATE set. 
!
!	These records are in a special format in that two record sizes are
!	associated with them. The number of bytes the primary data record
!	reserves in the bucket (not including the record overhead) is stored
!	in the record size field in the record overhead. The true size of the
!	record is stored in the last two bytes of the primary data record.
!	
!	This routine reformats the primary data record by:
!
!	1. Clearing the IRC$V_RU_UPDATE control bit.
!	2. Moving the true record size into the record size field of the record
!	   overhead.
!	3. Eliminating the space reserved by the record by shifting over the
!	   primary data records that follow it in the primary data bucket, so 
!	   that this reserved space is freed.
!	4. Adjusting the bucket's freespace offset pointer to reflect the bytes
!	   which have been freed through the reformating of the record.
!
! CALLING SEQUENCE:
!
!	RM$RU_REFORMAT()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUT:
!
!	BKT_ADDR		- address of the primary data bucket
!	    BKT$W_FREESPACE	- bucket's freespace offset pointer
!
!	REC_ADDR		- address of the record to be reformated
!	
! OUTPUT PARAMETER:
!	NONE
!
! IMPLICIT OUTPUT:
!
!	BKT_ADDR		- address of the primary data bucket
!	    BKT$W_FREESPACE	- bucket's freespace offset pointer
!	
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!
!	The record is reformatted, and the bucket's freespace offset pointer
!	is updated to reflect the bytes which have been freed.
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_BKT_ADDR_STR,
	COMMON_RAB_STR,
	R_IDX_DFN,
	R_REC_ADDR_STR;

    LOCAL
	FAKE_SIZE,
	LENGTH,
	SAVE_REC_ADDR,
	TRUE_SIZE;

    ! Clear the special record format bit in the record's control byte.
    !
    REC_ADDR[IRC$V_RU_UPDATE] = 0;

    ! Place the true size of the record in the record size field of the record
    ! overhead. This size maybe found in the last two bytes of the record proper
    ! as it currently exists in the primary data bucket.
    !
    BEGIN

    LOCAL
	REC_SIZE;

    SAVE_REC_ADDR	= .REC_ADDR;
    REC_ADDR		= .REC_ADDR + RM$REC_OVHD(0; REC_SIZE);
    FAKE_SIZE 		= .REC_SIZE;
    END;

    TRUE_SIZE = .(.REC_ADDR + .FAKE_SIZE - IRC$C_DATSZFLD)<0,16>;

    (.REC_ADDR - IRC$C_DATSZFLD)<0,16> = .TRUE_SIZE;

    ! If there are any records following the current record, shift them down
    ! in the primary data bucket so that the space, formerly reserved by this
    ! special record, is now utilized, and the corresponding amount of space
    ! is made available.
    !
    LENGTH = .BKT_ADDR[BKT$W_FREESPACE] - (.REC_ADDR + .FAKE_SIZE - .BKT_ADDR);

    IF .LENGTH GTRU 0
    THEN
	BEGIN

	GLOBAL REGISTER
	    R_BDB;

	RM$MOVE (.LENGTH, (.REC_ADDR + .FAKE_SIZE), (.REC_ADDR + .TRUE_SIZE));
	END;

    ! Adjust the bucket's freespace offset pointer to reflect the amount of 
    ! space which has become available through reformatting of the current 
    ! record.
    !
    BKT_ADDR[BKT$W_FREESPACE] = .BKT_ADDR[BKT$W_FREESPACE] 
				- (.FAKE_SIZE - .TRUE_SIZE);
    REC_ADDR = .SAVE_REC_ADDR;
    END;

END
ELUDOM
