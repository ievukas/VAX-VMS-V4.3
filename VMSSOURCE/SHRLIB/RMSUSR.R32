! 
! ****************************************************************************
! *									    *
! *  Copyright (c) 1982, 1983		                                    *
! *  by DIGITAL Equipment Corporation, Maynard, Mass.			    *
! * 									    *
! *  This software is furnished under a license and may be used and  copied  *
! *  only  in  accordance  with  the  terms  of  such  license and with the  *
! *  inclusion of the above copyright notice.  This software or  any  other  *
! *  copies  thereof may not be provided or otherwise made available to any  *
! *  other person.  No title to and ownership of  the  software  is  hereby  *
! *  transferred.							    *
! * 									    *
! *  The information in this software is subject to change  without  notice  *
! *  and  should  not  be  construed  as  a commitment by DIGITAL Equipment  *
! *  Corporation.							    *
! * 									    *
! *  DIGITAL assumes no responsibility for the use or  reliability  of  its  *
! *  software on equipment which is not supplied by DIGITAL.		    *
! *									    *
! ****************************************************************************
! *********************************************************************************************************************************
!  Created 15-SEP-1984 22:55:02  by  VAX-11 SDL V2.0       Source: 15-SEP-1984 22:49:39 _$255$DUA28:[RMS.SRC]RMSUSR.SDL;1          
! *********************************************************************************************************************************
 
 
!*** MODULE $FABDEF ***
! +++++*****
!    the fields thru ctx must not be modified due to
!    commonality between fab/rab/xab
literal FAB$C_BID = 3;                  !  code for fab 
literal FAB$M_PPF_RAT = 16320;
literal FAB$M_PPF_IND = 16384;
literal FAB$M_MXV = 2;
literal FAB$M_SUP = 4;
literal FAB$M_TMP = 8;
literal FAB$M_TMD = 16;
literal FAB$M_DFW = 32;
literal FAB$M_SQO = 64;
literal FAB$M_RWO = 128;
literal FAB$M_POS = 256;
literal FAB$M_WCK = 512;
literal FAB$M_NEF = 1024;
literal FAB$M_RWC = 2048;
literal FAB$M_DMO = 4096;
literal FAB$M_SPL = 8192;
literal FAB$M_SCF = 16384;
literal FAB$M_DLT = 32768;
literal FAB$M_NFS = 65536;
literal FAB$M_UFO = 131072;
literal FAB$M_PPF = 262144;
literal FAB$M_INP = 524288;
literal FAB$M_CTG = 1048576;
literal FAB$M_CBT = 2097152;
literal FAB$M_RCK = 8388608;
literal FAB$M_NAM = 16777216;
literal FAB$M_CIF = 33554432;
literal FAB$M_ESC = 134217728;
literal FAB$M_TEF = 268435456;
literal FAB$M_OFP = 536870912;
literal FAB$M_KFO = 1073741824;
literal FAB$M_PUT = 1;
literal FAB$M_GET = 2;
literal FAB$M_DEL = 4;
literal FAB$M_UPD = 8;
literal FAB$M_TRN = 16;
literal FAB$M_BIO = 32;
literal FAB$M_BRO = 64;
literal FAB$M_EXE = 128;
literal FAB$M_SHRPUT = 1;
literal FAB$M_SHRGET = 2;
literal FAB$M_SHRDEL = 4;
literal FAB$M_SHRUPD = 8;
literal FAB$M_MSE = 16;
literal FAB$M_NIL = 32;
literal FAB$M_UPI = 64;
literal FAB$C_SEQ = 0;                  !  sequential 
literal FAB$C_REL = 16;                 !  relative 
literal FAB$C_IDX = 32;                 !  indexed 
literal FAB$C_HSH = 48;                 !  hashed 
literal FAB$M_FTN = 1;
literal FAB$M_CR = 2;
literal FAB$M_PRN = 4;
literal FAB$M_BLK = 8;
literal FAB$C_RFM_DFLT = 2;             !  var len is default 
literal FAB$C_UDF = 0;                  !  undefined (also stream binary) 
literal FAB$C_FIX = 1;                  !  fixed length records 
literal FAB$C_VAR = 2;                  !  variable length records 
literal FAB$C_VFC = 3;                  !  variable fixed control 
literal FAB$C_STM = 4;                  !  RMS-11 stream (valid only for sequential org) 
literal FAB$C_STMLF = 5;                !  LF stream (valid only for sequential org) 
literal FAB$C_STMCR = 6;                !  CR stream (valid only for sequential org) 
literal FAB$C_MAXRFM = 6;               !  maximum rfm supported 
literal FAB$M_RU = 1;
literal FAB$M_AI = 2;
literal FAB$M_BI = 4;
literal FAB$K_BLN = 80;                 !  length of fab 
literal FAB$C_BLN = 80;                 !  length of fab 
literal FAB$S_FABDEF = 80;
macro FAB$B_BID = 0,0,8,0 %;            !  block id 
macro FAB$B_BLN = 1,0,8,0 %;            !  block len 
macro FAB$R_IFI_OVERLAY = 2,0,16,0 %;
macro FAB$W_IFI = 2,0,16,0 %;           !  internal file index 
macro FAB$R_IFI_BITS = 2,0,16,0 %;
macro FAB$V_PPF_RAT = 2,6,8,0 %;
literal FAB$S_PPF_RAT = 8;              !  rat value for process-permanent files 
macro FAB$V_PPF_IND = 2,14,1,0 %;       !  indirect access to process-permanent file 
!  (i.e., restricted operations)
macro FAB$R_FOP_OVERLAY = 4,0,32,0 %;
macro FAB$L_FOP = 4,0,32,0 %;           !  file options 
macro FAB$R_FOP_BITS = 4,0,32,0 %;
macro FAB$V_MXV = 4,1,1,0 %;            !  maximize version number 
macro FAB$V_SUP = 4,2,1,0 %;            !  supersede existing file 
macro FAB$V_TMP = 4,3,1,0 %;            !  create temporary file 
macro FAB$V_TMD = 4,4,1,0 %;            !  create temp file marked for delete 
macro FAB$V_DFW = 4,5,1,0 %;            !  deferred write (rel and idx) 
macro FAB$V_SQO = 4,6,1,0 %;            !  sequential access only 
macro FAB$V_RWO = 4,7,1,0 %;            !  rewind mt on open 
macro FAB$V_POS = 4,8,1,0 %;            !  use next magtape position 
macro FAB$V_WCK = 4,9,1,0 %;            !  write checking 
macro FAB$V_NEF = 4,10,1,0 %;           !  inhibit end of file positioning 
macro FAB$V_RWC = 4,11,1,0 %;           !  rewind mt on close 
macro FAB$V_DMO = 4,12,1,0 %;           !  dismount mt on close (not implemented) 
macro FAB$V_SPL = 4,13,1,0 %;           !  spool file on close 
macro FAB$V_SCF = 4,14,1,0 %;           !  submit command file on close 
macro FAB$V_DLT = 4,15,1,0 %;           !  delete sub-option 
macro FAB$V_NFS = 4,16,1,0 %;           !  non-file structured operation 
macro FAB$V_UFO = 4,17,1,0 %;           !  user file open - no rms operations 
macro FAB$V_PPF = 4,18,1,0 %;           !  process permanent file (pio segment) 
macro FAB$V_INP = 4,19,1,0 %;           !  process-permanent file is 'input' 
macro FAB$V_CTG = 4,20,1,0 %;           !  contiguous extension 
macro FAB$V_CBT = 4,21,1,0 %;           !  contiguous best try 
macro FAB$V_RCK = 4,23,1,0 %;           !  read checking 
macro FAB$V_NAM = 4,24,1,0 %;           !  use name block dvi, did, and/or fid fields for open 
macro FAB$V_CIF = 4,25,1,0 %;           !  create if non-existent 
macro FAB$V_ESC = 4,27,1,0 %;           !  'escape' to non-standard function ($modify) 
macro FAB$V_TEF = 4,28,1,0 %;           !  truncate at eof on close (write-accessed seq. disk file only) 
macro FAB$V_OFP = 4,29,1,0 %;           !  output file parse (only name type sticky) 
macro FAB$V_KFO = 4,30,1,0 %;           !  known file open (image activator only release 1) 
macro FAB$L_STS = 8,0,32,0 %;           !  status 
macro FAB$L_STV = 12,0,32,0 %;          !  status value 
macro FAB$L_ALQ = 16,0,32,0 %;          !  allocation quantity 
macro FAB$W_DEQ = 20,0,16,0 %;          !  default allocation quantity 
macro FAB$R_FAC_OVERLAY = 22,0,8,0 %;
macro FAB$B_FAC = 22,0,8,0 %;           !  file access 
macro FAB$R_FAC_BITS = 22,0,8,0 %;
macro FAB$V_PUT = 22,0,1,0 %;           !  put access 
macro FAB$V_GET = 22,1,1,0 %;           !  get access 
macro FAB$V_DEL = 22,2,1,0 %;           !  delete access 
macro FAB$V_UPD = 22,3,1,0 %;           !  update access 
macro FAB$V_TRN = 22,4,1,0 %;           !  truncate access 
macro FAB$V_BIO = 22,5,1,0 %;           !  block i/o access 
macro FAB$V_BRO = 22,6,1,0 %;           !  block and record i/o access 
macro FAB$V_EXE = 22,7,1,0 %;           !  execute access (caller must be exec or kernel mode, 
!   ufo must also be set)
macro FAB$R_SHR_OVERLAY = 23,0,8,0 %;
macro FAB$B_SHR = 23,0,8,0 %;           !  file sharing 
macro FAB$R_SHR_BITS = 23,0,8,0 %;
macro FAB$V_SHRPUT = 23,0,1,0 %;        !  put access 
macro FAB$V_SHRGET = 23,1,1,0 %;        !  get access 
macro FAB$V_SHRDEL = 23,2,1,0 %;        !  delete access 
macro FAB$V_SHRUPD = 23,3,1,0 %;        !  update access 
macro FAB$V_MSE = 23,4,1,0 %;           !  multi-stream connects enabled 
macro FAB$V_NIL = 23,5,1,0 %;           !  no sharing 
macro FAB$V_UPI = 23,6,1,0 %;           !  user provided interlocking (allows multiple 
!   writers to seq. files)
macro FAB$L_CTX = 24,0,32,0 %;          !  user context 
! -----*****
macro FAB$B_RTV = 28,0,8,1 %;           !  retrieval window size 
macro FAB$R_ORG_OVERLAY = 29,0,8,0 %;
macro FAB$B_ORG = 29,0,8,0 %;           !  file organization 
macro FAB$R_ORG_BITS = 29,0,8,0 %;
macro FAB$V_ORG = 29,4,4,0 %;
literal FAB$S_ORG = 4;
macro FAB$R_RAT_OVERLAY = 30,0,8,0 %;
macro FAB$B_RAT = 30,0,8,0 %;           !  record format 
macro FAB$R_RAT_BITS = 30,0,8,0 %;
macro FAB$V_FTN = 30,0,1,0 %;           !  fortran carriage-ctl 
macro FAB$V_CR = 30,1,1,0 %;            !  lf-record-cr carriage ctl 
macro FAB$V_PRN = 30,2,1,0 %;           !  print-file carriage ctl 
macro FAB$V_BLK = 30,3,1,0 %;           !  records don't cross block boundaries 
macro FAB$B_RFM = 31,0,8,0 %;           !  record format 
macro FAB$L_JNL = 32,0,32,0 %;          !  lcb address 
macro FAB$L_XAB = 36,0,32,0 %;          !  xab address 
macro FAB$L_NAM = 40,0,32,0 %;          !  nam block address 
macro FAB$L_FNA = 44,0,32,0 %;          !  file name string address 
macro FAB$L_DNA = 48,0,32,0 %;          !  default file name string addr 
macro FAB$B_FNS = 52,0,8,0 %;           !  file name string size 
macro FAB$B_DNS = 53,0,8,0 %;           !  default name string size 
macro FAB$W_MRS = 54,0,16,0 %;          !  maximum record size 
macro FAB$L_MRN = 56,0,32,0 %;          !  maximum record number 
macro FAB$W_BLS = 60,0,16,0 %;          !  blocksize for tape 
macro FAB$B_BKS = 62,0,8,0 %;           !  bucket size 
macro FAB$B_FSZ = 63,0,8,0 %;           !  fixed header size 
macro FAB$L_DEV = 64,0,32,0 %;          !  device characteristics 
macro FAB$L_SDC = 68,0,32,0 %;          !  spooling device characteristics 
macro FAB$W_GBC = 72,0,16,0 %;          !  Global buffer count 
macro FAB$R_ACMODES_OVERLAY = 74,0,8,0 %;
macro FAB$B_ACMODES = 74,0,8,0 %;       !  agent access modes
macro FAB$R_ACMODES_BITS = 74,0,8,0 %;
macro FAB$V_LNM_MODE = 74,0,2,0 %;
literal FAB$S_LNM_MODE = 2;             !  ACMODE for log nams
macro FAB$V_CHAN_MODE = 74,2,2,0 %;
literal FAB$S_CHAN_MODE = 2;            !  ACMODE for channel
macro FAB$V_FILE_MODE = 74,4,2,0 %;
literal FAB$S_FILE_MODE = 2;            !  ACMODE to use for determining file accessibility
macro FAB$R_RCF_OVERLAY = 75,0,8,0 %;   !  recovery control flags
macro FAB$B_RCF = 75,0,8,0 %;
macro FAB$R_RCF_BITS = 75,0,8,0 %;
macro FAB$V_RU = 75,0,1,0 %;            !  recovery unit recovery
macro FAB$V_AI = 75,1,1,0 %;            !  after image recovery
macro FAB$V_BI = 75,2,1,0 %;            !  before image recovery
 
!*** MODULE $RABDEF ***
! 
!          record access block (rab) definitions
! 
!   there is one rab per connected stream
!   it is used for all communications between the user
!   and rms concerning operations on the stream
! 
! +++++*****
!   the fields thru ctx cannot be changed due to commonality
!   with the fab
! 
literal RAB$C_BID = 1;                  !  code for rab 
literal RAB$M_PPF_RAT = 16320;
literal RAB$M_PPF_IND = 16384;
literal RAB$M_ASY = 1;
literal RAB$M_TPT = 2;
literal RAB$M_REA = 4;
literal RAB$M_RRL = 8;
literal RAB$M_UIF = 16;
literal RAB$M_MAS = 32;
literal RAB$M_FDL = 64;
literal RAB$M_HSH = 128;
literal RAB$M_EOF = 256;
literal RAB$M_RAH = 512;
literal RAB$M_WBH = 1024;
literal RAB$M_BIO = 2048;
literal RAB$M_LV2 = 4096;
literal RAB$M_LOA = 8192;
literal RAB$M_LIM = 16384;
literal RAB$M_LOC = 65536;
literal RAB$M_WAT = 131072;
literal RAB$M_ULK = 262144;
literal RAB$M_RLK = 524288;
literal RAB$M_NLK = 1048576;
literal RAB$M_KGE = 2097152;
literal RAB$M_KGT = 4194304;
literal RAB$M_NXR = 8388608;
literal RAB$M_RNE = 16777216;
literal RAB$M_TMO = 33554432;
literal RAB$M_CVT = 67108864;
literal RAB$M_RNF = 134217728;
literal RAB$M_ETO = 268435456;
literal RAB$M_PTA = 536870912;
literal RAB$M_PMT = 1073741824;
literal RAB$M_CCO = -2147483648;
literal RAB$C_SEQ = 0;                  !  sequential access 
literal RAB$C_KEY = 1;                  !  keyed access 
literal RAB$C_RFA = 2;                  !  rfa access 
literal RAB$C_STM = 3;                  !  stream access (valid only for sequential org) 
literal RAB$K_BLN = 68;                 !  length of rab 
literal RAB$C_BLN = 68;                 !  length of rab 
literal RAB$S_RABDEF = 68;
macro RAB$B_BID = 0,0,8,0 %;            !  block id 
macro RAB$B_BLN = 1,0,8,0 %;            !  block length 
macro RAB$R_ISI_OVERLAY = 2,0,16,0 %;
macro RAB$W_ISI = 2,0,16,0 %;           !  internal stream index 
!  (ifi in fab)
macro RAB$R_ISI_BITS = 2,0,16,0 %;
macro RAB$V_PPF_RAT = 2,6,8,0 %;
literal RAB$S_PPF_RAT = 8;              !  rat value for process-permanent files 
macro RAB$V_PPF_IND = 2,14,1,0 %;       !  indirect access to process-permanent file 
!  (i.e., restricted operations)
macro RAB$R_ROP_OVERLAY = 4,0,32,0 %;
macro RAB$L_ROP = 4,0,32,0 %;           !  record options 
macro RAB$R_ROP_BITS0 = 4,0,32,0 %;
macro RAB$V_ASY = 4,0,1,0 %;            !  asynchronous operations 
macro RAB$V_TPT = 4,1,1,0 %;            !  truncate put - allow sequential put not at 
macro RAB$V_REA = 4,2,1,0 %;            !  lock record for read only, allow other readers 
macro RAB$V_RRL = 4,3,1,0 %;            !  read record regardless of lock 
macro RAB$V_UIF = 4,4,1,0 %;            !  update if existent 
macro RAB$V_MAS = 4,5,1,0 %;            !  mass-insert mode 
macro RAB$V_FDL = 4,6,1,0 %;            !  fast record deletion 
macro RAB$V_HSH = 4,7,1,0 %;            !  use hash code in bkt 
macro RAB$V_EOF = 4,8,1,0 %;            !  connect to eof 
macro RAB$V_RAH = 4,9,1,0 %;            !  read ahead 
macro RAB$V_WBH = 4,10,1,0 %;           !  write behind 
macro RAB$V_BIO = 4,11,1,0 %;           !  connect for bio only 
macro RAB$V_LV2 = 4,12,1,0 %;           !  level 2 RU lock consistancy
macro RAB$V_LOA = 4,13,1,0 %;           !  use bucket fill percentage 
macro RAB$V_LIM = 4,14,1,0 %;           !  compare for key limit reached on $get/$find seq. (idx only) 
! 
!  the following bits are input to
!  $find or $get, (see above also REA and RRL)
!  (separate byte)
! 
macro RAB$V_LOC = 4,16,1,0 %;           !  use locate mode 
macro RAB$V_WAT = 4,17,1,0 %;           !  wait if record not available 
macro RAB$V_ULK = 4,18,1,0 %;           !  manual unlocking 
macro RAB$V_RLK = 4,19,1,0 %;           !  allow readers for this locked record 
macro RAB$V_NLK = 4,20,1,0 %;           !  do not lock record 
macro RAB$V_KGE = 4,21,1,0 %;           !  key > or = 
macro RAB$V_KGT = 4,22,1,0 %;           !  key greater than 
macro RAB$V_NXR = 4,23,1,0 %;           !  get non-existent record 
macro RAB$V_RNE = 4,24,1,0 %;           !  read no echo 
macro RAB$V_TMO = 4,25,1,0 %;           !  use time-out period 
macro RAB$V_CVT = 4,26,1,0 %;           !  convert to upper case 
macro RAB$V_RNF = 4,27,1,0 %;           !  read no filter 
macro RAB$V_ETO = 4,28,1,0 %;           !  extended terminal operation
macro RAB$V_PTA = 4,29,1,0 %;           !  purge type ahead 
macro RAB$V_PMT = 4,30,1,0 %;           !  use prompt buffer 
macro RAB$V_CCO = 4,31,1,0 %;           !  cancel control o on output 
! 
!   the following bits are terminal qualifiers only
!   (separate byte)
! 
! 
! 
!    eof, thus truncating file (seq. org only)
! 
!  these next two should be in the byte for bits
!  input to $find or $get, but there is no room there
! 
!  the following bits may be
!  input to various rab-related
!  operations
! 
macro RAB$R_ROP_FIELDS = 4,0,32,0 %;
macro RAB$B_ROP1 = 5,0,8,0 %;           !  various options 
macro RAB$B_ROP2 = 6,0,8,0 %;           !  get/find options (use of this field discouraged 
!  due to REA and RRL being in a different byte)
macro RAB$B_ROP3 = 7,0,8,0 %;           !  terminal read options 
! 
macro RAB$L_STS = 8,0,32,0 %;           !  status 
macro RAB$R_STV_OVERLAY = 12,0,32,0 %;
macro RAB$L_STV = 12,0,32,0 %;          !  status value 
macro RAB$R_STV_FIELDS = 12,0,32,0 %;
macro RAB$W_STV0 = 12,0,16,0 %;         !  low word of stv 
macro RAB$W_STV2 = 14,0,16,0 %;         !  high word of stv 
macro RAB$R_RFA_OVERLAY = 16,0,0,0 %;
macro RAB$W_RFA = 16,0,0,0 %;
literal RAB$S_RFA = 6;                  !  record's file address 
macro RAB$R_RFA_FIELDS = 16,0,0,0 %;
macro RAB$L_RFA0 = 16,0,32,0 %;
macro RAB$W_RFA4 = 20,0,16,0 %;
!   to the rfa field to be a move quad, overwriting
!   this reserved word)
macro RAB$L_CTX = 24,0,32,0 %;          !  user context 
! -----*****
macro RAB$B_RAC = 30,0,8,0 %;           !  record access 
macro RAB$B_TMO = 31,0,8,0 %;           !  time-out period 
macro RAB$W_USZ = 32,0,16,0 %;          !  user buffer size 
macro RAB$W_RSZ = 34,0,16,0 %;          !  record buffer size 
macro RAB$L_UBF = 36,0,32,0 %;          !  user buffer address 
macro RAB$L_RBF = 40,0,32,0 %;          !  record buffer address 
macro RAB$L_RHB = 44,0,32,0 %;          !  record header buffer addr 
macro RAB$R_KBF_OVERLAY = 48,0,32,0 %;
macro RAB$L_KBF = 48,0,32,0 %;          !  key buffer address 
macro RAB$L_PBF = 48,0,32,0 %;          !  prompt buffer addr 
macro RAB$R_KSZ_OVERLAY = 52,0,8,0 %;
macro RAB$B_KSZ = 52,0,8,0 %;           !  key buffer size 
macro RAB$B_PSZ = 52,0,8,0 %;           !  prompt buffer size 
macro RAB$B_KRF = 53,0,8,0 %;           !  key of reference 
macro RAB$B_MBF = 54,0,8,1 %;           !  multi-buffer count 
macro RAB$B_MBC = 55,0,8,0 %;           !  multi-block count 
macro RAB$R_BKT_OVERLAY = 56,0,32,0 %;
macro RAB$L_BKT = 56,0,32,0 %;          !  bucket hash code, vbn, or rrn 
macro RAB$L_DCT = 56,0,32,0 %;          !  duplicates count on key accessed on alternate key 
macro RAB$L_FAB = 60,0,32,0 %;          !  related fab for connect 
macro RAB$L_XAB = 64,0,32,0 %;          !  XAB address 
 
!*** MODULE $NAMDEF ***
! 
!          name block field definitions
! 
!   the nam block is used to communicate optional
!   filename-related information
! 
literal NAM$C_BID = 2;                  !  code for nam block 
literal NAM$C_MAXRSS = 255;             !  maximum resultant name string size (network) 
literal NAM$C_MAXRSSLCL = 255;          !  maximum resultant name string size (local) 
literal NAM$M_PWD = 1;
literal NAM$M_FILL_1 = 2;
literal NAM$M_FILL_2 = 4;
literal NAM$M_SYNCHK = 8;
literal NAM$M_NOCONCEAL = 16;
literal NAM$M_SLPARSE = 32;
literal NAM$M_SRCHXABS = 64;
literal NAM$C_UFS = 0;                  !  Unknown file system for remote file access or 
!   not applicable for local file access or
!   not applicable for task-to-task operation
literal NAM$C_RMS11 = 1;                !  RMS-11 
literal NAM$C_RMS20 = 2;                !  RMS-20 
literal NAM$C_RMS32 = 3;                !  RMS-32 
literal NAM$C_FCS11 = 4;                !  FCS-11 
literal NAM$C_RT11FS = 5;               !  RT-11 file system 
literal NAM$C_TOPS20FS = 7;             !  TOPS-20 file system 
literal NAM$C_TOPS10FS = 8;             !  TOPS-10 file system 
literal NAM$C_RMS32S = 10;              !  RMS-32 subset (e.g., VAXELAN)
! +++++++++++++++++++++++
!   the following 3 fields must not be rearranged relative to each other
! 
literal NAM$C_DVI = 16;                 !  length of dvi field 
! +++++*****
!   the location of the following fields must not
!   be changed due to their commonality with the fib
literal NAM$M_IFI = 65536;
literal NAM$M_SRCHNMF = 1073741824;
literal NAM$M_SVCTX = -2147483648;
literal NAM$K_BLN_V2 = 56;              !  Version 2 name block length 
literal NAM$C_BLN_V2 = 56;              !  Version 2 name block length 
literal NAM$M_EXP_VER = 1;
literal NAM$M_EXP_TYPE = 2;
literal NAM$M_EXP_NAME = 4;
literal NAM$M_WILD_VER = 8;
literal NAM$M_WILD_TYPE = 16;
literal NAM$M_WILD_NAME = 32;
literal NAM$M_EXP_DIR = 64;
literal NAM$M_EXP_DEV = 128;
literal NAM$M_WILDCARD = 256;
literal NAM$M_SEARCH_LIST = 2048;
literal NAM$M_CNCL_DEV = 4096;
literal NAM$M_ROOT_DIR = 8192;
literal NAM$M_LOWVER = 16384;
literal NAM$M_HIGHVER = 32768;
literal NAM$M_PPF = 65536;
literal NAM$M_NODE = 131072;
literal NAM$M_QUOTED = 262144;
literal NAM$M_GRP_MBR = 524288;
literal NAM$M_WILD_DIR = 1048576;
literal NAM$M_DIR_LVLS = 14680064;
literal NAM$M_WILD_UFD = 16777216;
literal NAM$M_WILD_SFD1 = 33554432;
literal NAM$M_WILD_SFD2 = 67108864;
literal NAM$M_WILD_SFD3 = 134217728;
literal NAM$M_WILD_SFD4 = 268435456;
literal NAM$M_WILD_SFD5 = 536870912;
literal NAM$M_WILD_SFD6 = 1073741824;
literal NAM$M_WILD_SFD7 = -2147483648;
literal NAM$M_WILD_GRP = 16777216;
literal NAM$M_WILD_MBR = 33554432;
literal NAM$K_BLN_DIRWC = 96;           !  Not documented optional length 
literal NAM$C_BLN_DIRWC = 96;           !  Not documented optional length 
literal NAM$K_BLN = 96;                 !  Name block length 
literal NAM$C_BLN = 96;                 !  Name block length 
literal NAM$S_NAMDEF = 96;
macro NAM$B_BID = 0,0,8,0 %;            !  block id 
macro NAM$B_BLN = 1,0,8,0 %;            !  block length 
! +++++++++++++++++++++++
!   the following 3 fields must not be rearranged relative to each other
! 
macro NAM$B_RSS = 2,0,8,0 %;            !  resultant string area size 
macro NAM$B_RSL = 3,0,8,0 %;            !  resultant string length 
macro NAM$L_RSA = 4,0,32,0 %;           !  resultant string area address 
! -----------------------
macro NAM$R_NOP_OVERLAY = 8,0,8,0 %;
macro NAM$B_NOP = 8,0,8,0 %;            !  Name options
macro NAM$R_NOP_BITS = 8,0,8,0 %;
macro NAM$V_PWD = 8,0,1,0 %;            !  Return password if present in nodespec string and any
macro NAM$V_FILL_1 = 8,1,1,0 %;         !  unused.  (used to be undocumented ROD)
macro NAM$V_FILL_2 = 8,2,1,0 %;         !  unused.  (used to be undocumented SOD)
macro NAM$V_SYNCHK = 8,3,1,0 %;         !  Only do syntax check on $parse operation
macro NAM$V_NOCONCEAL = 8,4,1,0 %;      !  Do not conceal device/root directory
macro NAM$V_SLPARSE = 8,5,1,0 %;        !  Parse search list (not documented) -- used by BACKUP.
macro NAM$V_SRCHXABS = 8,6,1,0 %;       !  Fill in attached XABS on $SEARCH operations over the
!   network (not documented) -- used by directory.
!  other task-specific data of the form /netacp_data"
!   (default is to mask out password from expanded and
!   resultant name strings and to create a logical name
!   whose equivalence string is the unaltered nodespec)
macro NAM$B_RFS = 9,0,8,0 %;            !  Remote file system type (currently not documented) 
!  Note: This field is reserved for use by Digital
macro NAM$B_ESS = 10,0,8,0 %;           !  espanded string area size 
macro NAM$B_ESL = 11,0,8,0 %;           !  expanded string length 
macro NAM$L_ESA = 12,0,32,0 %;          !  expanded string area address 
! -----------------------
macro NAM$L_RLF = 16,0,32,0 %;          !  related file nam block addr 
macro NAM$T_DVI = 20,0,0,0 %;
literal NAM$S_DVI = 16;                 !  device id 
macro NAM$R_FID_OVERLAY = 36,0,0,0 %;
macro NAM$W_FID = 36,0,0,0 %;
literal NAM$S_FID = 6;                  !  file id 
macro NAM$R_FID_FIELDS = 36,0,0,0 %;
macro NAM$W_FID_NUM = 36,0,16,0 %;      !  file number 
macro NAM$W_FID_SEQ = 38,0,16,0 %;      !  sequence number 
macro NAM$R_FID_RVN_OVERLAY = 40,0,16,0 %;
macro NAM$W_FID_RVN = 40,0,16,0 %;      !  relative volume number 
macro NAM$R_FID_RVN_FIELDS = 40,0,16,0 %;
macro NAM$B_FID_RVN = 40,0,8,0 %;       !  alternate format RVN 
macro NAM$B_FID_NMX = 41,0,8,0 %;       !  alternate format file number extension 
macro NAM$R_DID_OVERLAY = 42,0,0,0 %;
macro NAM$W_DID = 42,0,0,0 %;
literal NAM$S_DID = 6;                  !  directory id 
macro NAM$R_DID_FIELDS = 42,0,0,0 %;
macro NAM$W_DID_NUM = 42,0,16,0 %;      !  file number 
macro NAM$W_DID_SEQ = 44,0,16,0 %;      !  sequence number 
macro NAM$R_DID_RVN_OVERLAY = 46,0,16,0 %;
macro NAM$W_DID_RVN = 46,0,16,0 %;      !  relative volume number 
macro NAM$R_DID_RVN_FIELDS = 46,0,16,0 %;
macro NAM$B_DID_RVN = 46,0,8,0 %;       !  alternate format RVN 
macro NAM$B_DID_NMX = 47,0,8,0 %;       !  alternate format file number extension 
macro NAM$R_WCC_OVERLAY = 48,0,32,0 %;
macro NAM$L_WCC = 48,0,32,0 %;          !  wild card context 
macro NAM$R_WCC_BITS = 48,0,32,0 %;
macro NAM$V_IFI = 48,16,1,0 %;          !  the first word contains an IFI 
macro NAM$V_SRCHNMF = 48,30,1,0 %;      !  no-more-files has been encountered on a search 
macro NAM$V_SVCTX = 48,31,1,0 %;        !  save context across search calls 
macro NAM$R_FNB_OVERLAY = 52,0,32,0 %;
macro NAM$L_FNB = 52,0,32,0 %;          !  file name status bits 
macro NAM$R_FNB_BITS0 = 52,0,24,0 %;
macro NAM$V_EXP_VER = 52,0,1,0 %;       !  version was explicit 
macro NAM$V_EXP_TYPE = 52,1,1,0 %;      !  type was explicit 
macro NAM$V_EXP_NAME = 52,2,1,0 %;      !  name was explicit 
macro NAM$V_WILD_VER = 52,3,1,0 %;      !  version contained a wild card 
macro NAM$V_WILD_TYPE = 52,4,1,0 %;     !  type contained a wild card 
macro NAM$V_WILD_NAME = 52,5,1,0 %;     !  name contained a wild card 
macro NAM$V_EXP_DIR = 52,6,1,0 %;       !  directory was explicit 
macro NAM$V_EXP_DEV = 52,7,1,0 %;       !  device was explicit 
macro NAM$V_WILDCARD = 52,8,1,0 %;      !  filename string included a wild card 
macro NAM$V_SEARCH_LIST = 52,11,1,0 %;  !  search list present 
macro NAM$V_CNCL_DEV = 52,12,1,0 %;     !  concealed device present 
macro NAM$V_ROOT_DIR = 52,13,1,0 %;     !  root directory present 
macro NAM$V_LOWVER = 52,14,1,0 %;       !  lower numbered version(s) of file exist(s) 
macro NAM$V_HIGHVER = 52,15,1,0 %;      !  higher " 
macro NAM$V_PPF = 52,16,1,0 %;          !  process-permanent file referenced indirectly 
macro NAM$V_NODE = 52,17,1,0 %;         !  filename specification included a nodename 
macro NAM$V_QUOTED = 52,18,1,0 %;       !  filename spec included a quoted string 
macro NAM$V_GRP_MBR = 52,19,1,0 %;      !  directory spec was of group-member format 
macro NAM$V_WILD_DIR = 52,20,1,0 %;     !  directory spec included a wild card 
macro NAM$V_DIR_LVLS = 52,21,3,0 %;
literal NAM$S_DIR_LVLS = 3;             !  number of directory levels (0=ufd only) 
! 
!  (inclusive or of other wild card bits)
macro NAM$R_FNB_BITS1 = 52,0,32,0 %;
macro NAM$V_WILD_UFD = 52,24,1,0 %;     !  ufd included a wild card 
macro NAM$V_WILD_SFD1 = 52,25,1,0 %;    !  sfd1 included a wild card 
macro NAM$V_WILD_SFD2 = 52,26,1,0 %;    !  sfd2 included a wild card 
macro NAM$V_WILD_SFD3 = 52,27,1,0 %;    !  sfd3 included a wild card 
macro NAM$V_WILD_SFD4 = 52,28,1,0 %;    !  sfd4 included a wild card 
macro NAM$V_WILD_SFD5 = 52,29,1,0 %;    !  sfd5 included a wild card 
macro NAM$V_WILD_SFD6 = 52,30,1,0 %;    !  sfd6 included a wild card 
macro NAM$V_WILD_SFD7 = 52,31,1,0 %;    !  sfd7 included a wild card 
macro NAM$R_FNB_BITS2 = 52,0,32,0 %;
macro NAM$V_WILD_GRP = 52,24,1,0 %;     !  group contained a wild card 
macro NAM$V_WILD_MBR = 52,25,1,0 %;     !  member contained a wild card 
! -----*****
!  (prior to 40 byte extension)
! 
!  Extend the NAM block by 40 bytes.
! 
macro NAM$B_NODE = 56,0,8,0 %;          !  Nodespec length 
macro NAM$B_DEV = 57,0,8,0 %;           !  Device length 
macro NAM$B_DIR = 58,0,8,0 %;           !  Directory length 
macro NAM$B_NAME = 59,0,8,0 %;          !  Filename length 
macro NAM$B_TYPE = 60,0,8,0 %;          !  Filetype length 
macro NAM$B_VER = 61,0,8,0 %;           !  Version number length 
macro NAM$L_NODE = 64,0,32,0 %;         !  Nodespec address 
macro NAM$L_DEV = 68,0,32,0 %;          !  Device address 
macro NAM$L_DIR = 72,0,32,0 %;          !  Directory address 
macro NAM$L_NAME = 76,0,32,0 %;         !  Filename address 
macro NAM$L_TYPE = 80,0,32,0 %;         !  Filetype address 
macro NAM$L_VER = 84,0,32,0 %;          !  Version number address 
 
!*** MODULE $XABDEF ***
! 
!          definitions for all xabs
!                 $xabdef
! 
! 
! 
!   the first four fields are shared in common between all xabs
!   and hence are defined only once
!   (the only exception is that the spare word may be used by some xabs)
! 
literal XAB$S_XABDEF = 20;
macro XAB$B_COD = 0,0,8,0 %;            !  xab id code 
macro XAB$B_BLN = 1,0,8,0 %;            !  block length 
macro XAB$L_NXT = 4,0,32,0 %;           !  xab chain link 
! WITH POSSIBLE EXCEPTION OF SPARE FIELD
macro XAB$W_RVN = 8,0,16,0 %;
macro XAB$R_RDT_OVERLAY = 12,0,0,0 %;
macro XAB$Q_RDT = 12,0,0,0 %;
literal XAB$S_RDT = 8;
macro XAB$R_RDT_FIELDS = 12,0,0,0 %;
macro XAB$L_RDT0 = 12,0,32,0 %;
macro XAB$L_RDT4 = 16,0,32,1 %;
! COMMON AMONG DAT AND RDT XABS
literal XAB$S_XABDEF1 = 23;
macro XAB$B_BKZ = 22,0,8,0 %;           ! COMMON TO FHC AND ALQ XABS 
literal XAB$C_CXT_VER1 = 1;             !  RMS Context Extraction version 1
 
!*** MODULE $XABFHCDEF ***
! ++
!         file header characteristics xab definitions
!                 $xabfhcdef
! 
! +++++*****
!   the fields of this xab cannot be rearranged since
!   they correspond to an on-disk structure
! 
literal XAB$C_FHC = 29;                 !  xabfhc id code 
literal XAB$K_FHCLEN = 44;              !  length of xabfhc 
literal XAB$C_FHCLEN = 44;              !  length of xabfhc 
literal XAB$S_XABFHCDEF = 44;
! THESE 4 FIELDS ARE COMMON TO ALL XABS AND
! HAVE BEEN DEFINED BY $XABDEF
macro XAB$B_RFO = 8,0,8,0 %;            !  record format and file org 
macro XAB$B_ATR = 9,0,8,0 %;            !  record attributes 
macro XAB$W_LRL = 10,0,16,0 %;          !  longest record's length 
macro XAB$R_HBK_OVERLAY = 12,0,32,0 %;
macro XAB$L_HBK = 12,0,32,0 %;          !  hi vbn allocated 
!  (n.b. reversed on disk!)
macro XAB$R_HBK_FIELDS = 12,0,32,0 %;
macro XAB$W_HBK0 = 12,0,16,0 %;
macro XAB$W_HBK2 = 14,0,16,0 %;
macro XAB$R_EBK_OVERLAY = 16,0,32,0 %;
macro XAB$L_EBK = 16,0,32,0 %;          !  eof vbn 
!  (n.b. reversed on disk)
macro XAB$R_EBK_FIELDS = 16,0,32,0 %;
macro XAB$W_EBK0 = 16,0,16,0 %;
macro XAB$W_EBK2 = 18,0,16,0 %;
macro XAB$W_FFB = 20,0,16,0 %;          !  first free byte in eof block 
!  defined above in $xabdef, since it is shared
!  by the all xab)
macro XAB$B_HSZ = 23,0,8,0 %;           !  header size for vfc 
macro XAB$W_MRZ = 24,0,16,0 %;          !  max record size 
macro XAB$W_DXQ = 26,0,16,0 %;          !  default extend quantity 
macro XAB$W_GBC = 28,0,16,0 %;          !  global buffer count 
macro XAB$W_VERLIMIT = 38,0,16,0 %;     !  version limit for file. 
! -----*****
macro XAB$L_SBN = 40,0,32,0 %;          !  starting lbn if contiguous 
 
!*** MODULE $XABALLDEF ***
! --
! ++
! 
!         allocation xab definitions
!                 $xaballdef
! 
! 
! +++++*****
!   the fields thru bkz cannot be rearranged due to
!   their commonality with fab
literal XAB$C_ALL = 20;                 !  xaball id code 
literal XAB$M_HRD = 1;
literal XAB$M_ONC = 2;
literal XAB$M_CBT = 32;
literal XAB$M_CTG = 128;
literal XAB$C_ANY = 0;                  !  any allocation o.k. 
literal XAB$C_CYL = 1;                  !  cylinder boundary 
literal XAB$C_LBN = 2;                  !  allocate at specified lbn 
literal XAB$C_VBN = 3;                  !  allocate near specified vbn 
literal XAB$C_RFI = 4;                  !  allocate near related file 
literal XAB$K_ALLLEN = 32;              !  length of xaball 
literal XAB$C_ALLLEN = 32;              !  length of xaball 
literal XAB$S_XABALLDEF = 32;
! THESE 4 FIELDS ARE COMMON TO ALL XABS AND
! HAVE BEEN DEFINED BY $XABDEF
macro XAB$R_AOP_OVERLAY = 8,0,8,0 %;
macro XAB$B_AOP = 8,0,8,0 %;            !  allocation options 
macro XAB$R_AOP_BITS = 8,0,8,0 %;
macro XAB$V_HRD = 8,0,1,0 %;            !  fail if requested alignment impossible 
macro XAB$V_ONC = 8,1,1,0 %;            !  locate allocated space within a cylinder 
macro XAB$V_CBT = 8,5,1,0 %;            !  contiguous alllocation, best try 
macro XAB$V_CTG = 8,7,1,0 %;            !  contiguous allocation 
macro XAB$B_ALN = 9,0,8,0 %;            !  alignment type 
macro XAB$W_VOL = 10,0,16,0 %;          !  relative volume no. for allocation 
!  (not applicable if aln = vbn or rfi)
macro XAB$L_LOC = 12,0,32,0 %;          !  allocation location 
macro XAB$L_ALQ = 16,0,32,0 %;          !  allocation quantity 
macro XAB$W_DEQ = 20,0,16,0 %;          !  default allocation quantity 
!  defined above in $xabdef,since it is shared by the fhc
!  xab and has the same offset, of course)
! -----*****
macro XAB$B_AID = 23,0,8,0 %;           !  area id number 
macro XAB$R_RFI_OVERLAY = 24,0,0,0 %;
macro XAB$W_RFI = 24,0,0,0 %;
literal XAB$S_RFI = 6;                  !  related file id 
macro XAB$R_RFI_FIELDS = 24,0,0,0 %;
macro XAB$W_RFI0 = 24,0,16,0 %;         !  file number 
macro XAB$W_RFI2 = 26,0,16,0 %;         !  seq number 
macro XAB$W_RFI4 = 28,0,16,0 %;         !  rev number 
 
!*** MODULE $XABDATDEF ***
! --
! ++
! 
!         date/time xab definitions
!                 $xabdatdef
! 
literal XAB$C_DAT = 18;                 !  xabdat id code 
literal XAB$K_DATLEN_V2 = 36;           !  Version 2 XABDAT length 
literal XAB$C_DATLEN_V2 = 36;           !  Version 2 XABDAT length 
literal XAB$K_DATLEN = 44;              !  length of XABDAT 
literal XAB$C_DATLEN = 44;              !  length of XABDAT 
literal XAB$S_XABDATDEF = 44;
! THESE 4 FIELDS ARE COMMON TO ALL XABS AND
! HAVE BEEN DEFINED BY $XABDEF
macro XAB$R_CDT_OVERLAY = 20,0,0,0 %;
macro XAB$Q_CDT = 20,0,0,0 %;
literal XAB$S_CDT = 8;                  !  creation date & time 
macro XAB$R_CDT_FIELDS = 20,0,0,0 %;
macro XAB$L_CDT0 = 20,0,32,0 %;
macro XAB$L_CDT4 = 24,0,32,1 %;
macro XAB$R_EDT_OVERLAY = 28,0,0,0 %;
macro XAB$Q_EDT = 28,0,0,0 %;
literal XAB$S_EDT = 8;                  !  expiration date & time 
macro XAB$R_EDT_FIELDS = 28,0,0,0 %;
macro XAB$L_EDT0 = 28,0,32,0 %;
macro XAB$L_EDT4 = 32,0,32,1 %;
macro XAB$R_BDT_OVERLAY = 36,0,0,0 %;
macro XAB$Q_BDT = 36,0,0,0 %;
literal XAB$S_BDT = 8;                  !  backup date and time 
macro XAB$R_BDT_FIELDS = 36,0,0,0 %;
macro XAB$L_BDT0 = 36,0,32,0 %;
macro XAB$L_BDT4 = 40,0,32,1 %;
 
!*** MODULE $XABRDTDEF ***
! --
! ++
! 
!         revision date/time xab definitions
!                 $xabrdtdef
literal XAB$C_RDT = 30;                 !  xabrdt id code 
literal XAB$K_RDTLEN = 20;              !  length of rdt xab 
literal XAB$C_RDTLEN = 20;              !  length of rdt xab 
literal XAB$S_XABRDTDEF = 20;
! THESE 4 FIELDS ARE COMMON TO ALL XABS AND
! HAVE BEEN DEFINED BY $XABDEF
 
!*** MODULE $XABPRODEF ***
! --
! ++
! 
!         protection xab field definitions
!                 $xabprodef
! 
! 
literal XAB$C_PRO = 19;                 !  xabpro id code 
literal XAB$M_NOREAD = 1;
literal XAB$M_NOWRITE = 2;
literal XAB$M_NOEXE = 4;
literal XAB$M_NODEL = 8;
literal XAB$S_XABPRODEF = 1;
macro XAB$R_XABPRODEF_BITS = 0,0,8,0 %;
macro XAB$V_NOREAD = 0,0,1,0 %;         !  deny read access 
macro XAB$V_NOWRITE = 0,1,1,0 %;        !  deny write access 
macro XAB$V_NOEXE = 0,2,1,0 %;          !  deny execution access 
macro XAB$V_NODEL = 0,3,1,0 %;          !  deny delete access 
literal XAB$M_PROPAGATE = 1;
literal XAB$K_PROLEN_V3 = 16;           !  V3a xabpro length 
literal XAB$C_PROLEN_V3 = 16;           !  V3a xabpro length 
literal XAB$K_PROLEN = 88;              !  xabpro length 
literal XAB$C_PROLEN = 88;              !  xabpro length 
literal XAB$S_XABPRODEF1 = 88;
! THESE 4 FIELDS ARE COMMON TO ALL XABS AND
! HAVE BEEN DEFINED BY $XABDEF
macro XAB$R_PRO_OVERLAY = 8,0,16,0 %;
macro XAB$W_PRO = 8,0,16,0 %;           !  protection mask 
macro XAB$R_PRO_BITS = 8,0,16,0 %;
macro XAB$V_SYS = 8,0,4,0 %;
literal XAB$S_SYS = 4;                  !  system 
macro XAB$V_OWN = 8,4,4,0 %;
literal XAB$S_OWN = 4;                  !  owner 
macro XAB$V_GRP = 8,8,4,0 %;
literal XAB$S_GRP = 4;                  !  group 
macro XAB$V_WLD = 8,12,4,0 %;
literal XAB$S_WLD = 4;                  !  world 
macro XAB$B_MTACC = 10,0,8,0 %;         !  Magtape access control char. 
macro XAB$R_PROT_OPT_OVERLAY = 11,0,8,0 %;
macro XAB$B_PROT_OPT = 11,0,8,0 %;      !  XABPRO options field
macro XAB$R_PROT_OPT_FIELDS = 11,0,8,0 %;
macro XAB$V_PROPAGATE = 11,0,1,0 %;     !  Propagate security attributes on $ENTER and $RENAME
macro XAB$R_UIC_OVERLAY = 12,0,32,0 %;
macro XAB$L_UIC = 12,0,32,0 %;          !  uic code 
macro XAB$R_UIC_FIELDS = 12,0,32,0 %;
macro XAB$W_MBM = 12,0,16,0 %;          !  member code 
macro XAB$W_GRP = 14,0,16,0 %;          !  group code 
macro XAB$R_PROT_MODE_OVERLAY = 16,0,0,0 %; !  RWED/mode protection for file
macro XAB$Q_PROT_MODE = 16,0,0,0 %;
literal XAB$S_PROT_MODE = 8;            !  eventually may be a quadword
macro XAB$R_PROT_MODE_FIELDS = 16,0,8,0 %;
macro XAB$B_PROT_MODE = 16,0,8,0 %;     !  but currently only a byte
macro XAB$L_ACLBUF = 24,0,32,0 %;       !  address of user's ACL buffer
macro XAB$W_ACLSIZ = 28,0,16,0 %;       !  size of user's ACL buffer
macro XAB$W_ACLLEN = 30,0,16,0 %;       !  return length of entire ACL
macro XAB$L_ACLCTX = 32,0,32,0 %;       !  ACL context field
macro XAB$L_ACLSTS = 36,0,32,0 %;       !  ACL return err status
 
!*** MODULE $XABTRMDEF ***
! --
! ++
! 
!         terminal control xab field definitions
!                 $xabtrmdef
! 
! 
! 
literal XAB$C_TRM = 31;                 ! XABTRM ID CODE 
literal XAB$K_TRMLEN = 36;              !  length of xab of type terminal control 
literal XAB$C_TRMLEN = 36;              !  length of xab of type terminal control 
literal XAB$S_XABTRMDEF = 36;
! THESE 4 FIELDS ARE COMMON TO ALL XABS AND
! HAVE BEEN DEFINED BY $XABDEF
macro XAB$L_ITMLST = 8,0,32,0 %;        !  item list address
macro XAB$W_ITMLST_LEN = 12,0,16,0 %;   !  item list length
 
!*** MODULE $XABSUMDEF ***
! --
! ++
! 
!         summary xab field definitions
!                 $xabsumdef
! 
! 
literal XAB$C_SUM = 22;                 !  xabsum id code 
literal XAB$K_SUMLEN = 12;              !  xabsum length 
literal XAB$C_SUMLEN = 12;              !  xabsum length 
literal XAB$S_XABSUMDEF = 12;
! THESE 4 FIELDS ARE COMMON TO ALL XABS AND
! HAVE BEEN DEFINED BY $XABDEF
macro XAB$B_NOA = 8,0,8,0 %;            !  number of defined areas for index file 
macro XAB$B_NOK = 9,0,8,0 %;            !  number of defined keys for index file 
macro XAB$W_PVN = 10,0,16,0 %;          !  prologue version number (relative and index files) 
 
!*** MODULE $XABKEYDEF ***
! --
! ++
! 
!         key definition xab field definitions
!                 $xabkeydef
! 
! 
literal XAB$C_KEY = 21;                 !  xabkey id code 
literal XAB$M_DUP = 1;
literal XAB$M_CHG = 2;
literal XAB$M_NUL = 4;
literal XAB$M_IDX_NCMPR = 8;
literal XAB$M_KEY_NCMPR = 64;
literal XAB$M_DAT_NCMPR = 128;
literal XAB$C_STG = 0;                  !  string 
literal XAB$C_IN2 = 1;                  !  signed 15 bit integer (2 bytes) 
literal XAB$C_BN2 = 2;                  !  2 byte binary 
literal XAB$C_IN4 = 3;                  !  signed 31 bit integer (4 bytes) 
literal XAB$C_BN4 = 4;                  !  4 byte binary 
literal XAB$C_PAC = 5;                  !  packed decimal (1-16 bytes) 
literal XAB$C_IN8 = 6;                  !  signed 63 bit integer (4 bytes) 
literal XAB$C_BN8 = 7;                  !  8 byte binary 
literal XAB$C_MAXDTP = 7;               !  max. legal data type 
literal XAB$K_KEYLEN_V2 = 64;           !  old xabkey length 
literal XAB$C_KEYLEN_V2 = 64;           !  old xabkey length 
! 
!  Additions for prologue 3 files
! 
literal XAB$C_PRG3 = 3;                 !  Prologue version three 
literal XAB$C_PRG2 = 2;                 !  Prologue version two 
literal XAB$C_PRG1 = 1;                 !  Prologue versoin one 
literal XAB$K_KEYLEN = 76;              !  xabkey length 
literal XAB$C_KEYLEN = 76;              !  xabkey length 
! --
! ++
literal XAB$S_XABKEYDEF = 76;
! THESE 4 FIELDS ARE COMMON TO ALL XABS AND
! HAVE BEEN DEFINED BY $XABDEF
! 
!  the field layout of the key xab is such that it matchs as
!  closely as possible the layout of a key decriptor in the
!  index file prologue. this is so the contents may be moved
!  between the two structures as efficiently as possible.
! 
macro XAB$B_IAN = 8,0,8,0 %;            !  index level area number 
macro XAB$B_LAN = 9,0,8,0 %;            !  lowest index level area number 
macro XAB$B_DAN = 10,0,8,0 %;           !  data level area number 
macro XAB$B_LVL = 11,0,8,0 %;           !  level of root bucket 
macro XAB$B_IBS = 12,0,8,0 %;           !  size of index buckets in virtual blocks 
macro XAB$B_DBS = 13,0,8,0 %;           !  size of data buckets in virtual blocks 
macro XAB$L_RVB = 14,0,32,0 %;          !  root bucket start vbn 
macro XAB$R_FLG_OVERLAY = 18,0,8,0 %;
macro XAB$B_FLG = 18,0,8,0 %;           !  key option flags 
macro XAB$R_FLG_BITS0 = 18,0,8,0 %;
macro XAB$V_DUP = 18,0,1,0 %;           !  duplicate key values allowed 
macro XAB$V_CHG = 18,1,1,0 %;           !  alt key only --key field may change on update 
macro XAB$V_NUL = 18,2,1,0 %;           !  alt key only --null key value enable 
macro XAB$V_IDX_NCMPR = 18,3,1,0 %;     !  indicate index records for given key are not compressed 
macro XAB$V_KEY_NCMPR = 18,6,1,0 %;     !  indicates key is not compressed in data record 
macro XAB$R_FLG_BITS1 = 18,0,8,0 %;
macro XAB$V_DAT_NCMPR = 18,7,1,0 %;     !  data record is not compressed 
macro XAB$B_DTP = 19,0,8,0 %;           !  key field data type 
macro XAB$B_NSG = 20,0,8,0 %;           !  number of key segments 
macro XAB$B_NUL = 21,0,8,0 %;           !  nul key character 
macro XAB$B_TKS = 22,0,8,0 %;           !  total key field size (bytes) 
macro XAB$B_REF = 23,0,8,0 %;           !  key of reference (0=prim key, 
!  1-254 = alternate keys)
macro XAB$W_MRL = 24,0,16,0 %;          !  minimun record length to contain key field 
macro XAB$W_IFL = 26,0,16,0 %;          !  index bucket fill size (bytes) 
macro XAB$W_DFL = 28,0,16,0 %;          !  data bucket fil size (bytes) 
macro XAB$R_POS_OVERLAY = 30,0,0,0 %;
macro XAB$W_POS = 30,0,0,0 %;
literal XAB$S_POS = 16;                 !  key field record offset positions 
macro XAB$R_POS_FIELDS = 30,0,0,0 %;
macro XAB$W_POS0 = 30,0,16,0 %;         !  segment 0 
macro XAB$W_POS1 = 32,0,16,0 %;         !  segment 1 
macro XAB$W_POS2 = 34,0,16,0 %;         !  segment 2 
macro XAB$W_POS3 = 36,0,16,0 %;         !  segment 3 
macro XAB$W_POS4 = 38,0,16,0 %;         !  segment 4 
macro XAB$W_POS5 = 40,0,16,0 %;         !  segment 5 
macro XAB$W_POS6 = 42,0,16,0 %;         !  segment 6 
macro XAB$W_POS7 = 44,0,16,0 %;         !  segment 7 
macro XAB$R_SIZ_OVERLAY = 46,0,0,0 %;
macro XAB$B_SIZ = 46,0,0,0 %;
literal XAB$S_SIZ = 8;                  !  key field segment sizes 
macro XAB$R_SIZ_FIELDS = 46,0,0,0 %;
macro XAB$B_SIZ0 = 46,0,8,0 %;          !  segment 0 
macro XAB$B_SIZ1 = 47,0,8,0 %;          !  segment 1 
macro XAB$B_SIZ2 = 48,0,8,0 %;          !  segment 2 
macro XAB$B_SIZ3 = 49,0,8,0 %;          !  segment 3 
macro XAB$B_SIZ4 = 50,0,8,0 %;          !  segment 4 
macro XAB$B_SIZ5 = 51,0,8,0 %;          !  segment 5 
macro XAB$B_SIZ6 = 52,0,8,0 %;          !  segment 6 
macro XAB$B_SIZ7 = 53,0,8,0 %;          !  segment 7 
! 
!  the positions of the above fields are dictated by the key descriptor
!  record layout in the index file prologue.
! 
macro XAB$L_KNM = 56,0,32,0 %;          !  pointer to 32 character key name buffer 
macro XAB$L_DVB = 60,0,32,0 %;          !  first data bucket start vbn 
macro XAB$R_TYP_OVERLAY = 64,0,0,0 %;
macro XAB$B_TYP = 64,0,0,0 %;
literal XAB$S_TYP = 8;                  !  key field segment types 
macro XAB$R_TYP_FIELDS = 64,0,0,0 %;
macro XAB$B_TYP0 = 64,0,8,0 %;          !  segment 0 
macro XAB$B_TYP1 = 65,0,8,0 %;          !  segment 1 
macro XAB$B_TYP2 = 66,0,8,0 %;          !  segment 2 
macro XAB$B_TYP3 = 67,0,8,0 %;          !  segment 3 
macro XAB$B_TYP4 = 68,0,8,0 %;          !  segment 4 
macro XAB$B_TYP5 = 69,0,8,0 %;          !  segment 5 
macro XAB$B_TYP6 = 70,0,8,0 %;          !  segment 6 
macro XAB$B_TYP7 = 71,0,8,0 %;          !  segment 7 
macro XAB$B_PROLOG = 72,0,8,0 %;        !  indicate prologue version desired (primary key only) 
 
!*** MODULE $XABCXFDEF ***
! 
!         RMS Context XAB associated with the FAB
!                 $xabcxfdef
! 
! 
literal XAB$C_CXF = 32;                 !  XABCXF id code 
literal XAB$M_CXFRST = 1;
literal XAB$K_CXFLEN = 60;              !  length of xab type CXF 
literal XAB$C_CXFLEN = 60;              !  length of xab type CXF 
literal XAB$S_XABCXFDEF = 60;
!  UP TILL NOW COMMON AMONG ALL XABS
! 
!         Following in common with the CXR block, too.
!         Do not rearrange without changing both.
! 
macro XAB$L_CXFSTS = 8,0,32,0 %;        !  Status of the last file operation. 
macro XAB$L_CXFSTV = 12,0,32,0 %;       !  Status Value of the last file operation. 
! 
!  Top four bits of the options longword are reserved for the XABCXR.  These 
!  bits describe the version of the key buffer.  
! 
macro XAB$R_CXFCOP_OVERLAY = 16,0,32,0 %;
macro XAB$L_CXFCOP = 16,0,32,0 %;       !  Context Options. 
macro XAB$R_CXFCOP_BITS = 16,0,8,0 %;
macro XAB$V_CXFRST = 16,0,1,0 %;        !  Restore file state - use context blk as input. 
macro XAB$L_CXFBKP = 20,0,32,0 %;       !  Bookkeeping bits 
macro XAB$W_CXFIFI = 24,0,16,0 %;       !  Internal File Identifier 
macro XAB$B_CXFVER = 26,0,8,0 %;        !  prologue version num
! 
!         Up Till now in common with XABCXR, too.
! 
!         The following fields correspond to those in the FAB or IFB
!         They should not be rearranged as their order is assumed for
!         purposes of moving large chunks of data rather than a byte
!         or word at a time.  Note: ASSUME is used in the actual code
! 
macro XAB$W_CXFDEQ = 32,0,16,0 %;       !  Default extention quantity 
macro XAB$B_CXFFAC = 34,0,8,0 %;        !  File access 
macro XAB$B_CXFSHR = 35,0,8,0 %;        !  File Sharing 
macro XAB$W_CXFRTE = 36,0,16,0 %;       !  (Not used)
macro XAB$B_CXFORG = 39,0,8,0 %;        !  file organization 
macro XAB$W_CXFGBC = 40,0,16,0 %;       !  global buffer count
macro XAB$B_CXFRTV = 42,0,8,0 %;        !  retrieval window
 
!*** MODULE $XABCXRDEF ***
! 
!         RMS Context XAB associated with the RAB
!                 $xabcxrdef
! 
! 
literal XAB$C_CXR = 33;                 !  XABCXR id code 
literal XAB$M_CXRRST = 1;
literal XAB$C_CXB_VER1 = 1;
literal XAB$C_CXRBLEN = 512;            !  Length of CXRBUF (bytes)
literal XAB$K_CXRLEN = 84;              !  Length of XAB type CXR 
literal XAB$C_CXRLEN = 84;              !  Length of XAB type CXR 
literal XAB$S_XABCXRDEF = 84;
!  UP TILL NOW COMMON AMONG ALL XABS
! 
!         Following in common with the CXF block, too.
!         Do not rearrange without changing it.
! 
macro XAB$L_CXRSTS = 8,0,32,0 %;        !  Status of the last record operation. 
macro XAB$L_CXRSTV = 12,0,32,0 %;       !  Status Value of the last record operation. 
macro XAB$R_CXRCOP_OVERLAY = 16,0,32,0 %;
macro XAB$L_CXRCOP = 16,0,32,0 %;       !  Context Options. 
macro XAB$R_CXRCOP_BITS = 16,0,32,0 %;
macro XAB$V_CXRRST = 16,0,1,0 %;        !  Restore file/record state - use context blk as input. 
macro XAB$V_CXRBVER = 16,28,4,0 %;
literal XAB$S_CXRBVER = 4;              !  Version of Key buffer
macro XAB$L_CXRBKP = 20,0,32,0 %;       !  Bookkeeping bits 
macro XAB$W_CXRISI = 24,0,16,0 %;       !  Internal Record Identifier 
macro XAB$B_CXRVER = 26,0,8,0 %;        !  prologue version num.
! 
!         Up Till now in common with XABCXF, too.
! 
! 
!         The following elements are arranged such that large amounts of
!         data can be moved at a time rather than words or bytes.  Do not
!         rearrange them without this consideration in mind.
! 
! 	  The following elements are stream dependent regardless of file org.
! 
macro XAB$B_CXRMBF = 32,0,8,0 %;        !  Multibuffer count
macro XAB$B_CXRMBC = 33,0,8,0 %;        !  Multiblock count
macro XAB$W_CXRBFZ = 34,0,16,0 %;       !  sz in byte of CXRBUF
! 
! 	The following elements are necessary for saving the NRP context for
! 	Sequential and Relative files.
! 
macro XAB$L_CXRVBN = 36,0,32,0 %;       !  NRP VBN
macro XAB$W_CXROFF = 40,0,16,0 %;       !  NRP offset in VBN
macro XAB$W_FILL_8 = 42,0,16,0 %;       !  mbz - longword align
! 
! 	The following elements are necessary for saving the NRP context for
! 	ISAM files.
! 
macro XAB$L_CXRPOS0 = 44,0,32,0 %;      !  Primary Positioning RFA
macro XAB$W_CXRPOS4 = 48,0,16,0 %;
macro XAB$L_CXRCUR0 = 52,0,32,0 %;      !  Current Positioning RFA
macro XAB$W_CXRCUR4 = 56,0,16,0 %;
macro XAB$L_CXRSID0 = 60,0,32,0 %;      !  SIDR positioning RFA
macro XAB$W_CXRSID4 = 64,0,16,0 %;
macro XAB$W_CXRCNT = 68,0,16,0 %;       !  SIDR array count
macro XAB$B_CXRKREF = 70,0,8,0 %;       !  Cur Key of Reference
macro XAB$B_CXRKLEN = 71,0,8,0 %;       !  Length of key
macro XAB$L_CXRBUF = 72,0,32,0 %;       !  address of key buf
 
!*** MODULE $XABJNLDEF ***
! ++
! 
!         Journal XAB definitions
!                 $xabjnldef
! 
! 
literal XAB$C_JNL = 34;                 !  xabjnl id code 
literal XAB$M_ONLY_RU = 1;
literal XAB$M_RU = 2;
literal XAB$M_BI = 4;
literal XAB$M_AI = 8;
literal XAB$M_AT = 16;
literal XAB$M_NEVER_RU = 32;
literal XAB$K_MAXJNLNAM = 16;           !  max size of ascii string journal name
literal XAB$C_MAXJNLNAM = 16;           !  max size of ascii string journal name
literal XAB$K_JNLLEN = 60;
literal XAB$C_JNLLEN = 60;
literal XAB$S_XABJNLDEF = 60;
! THESE 4 FIELDS ARE COMMON TO ALL XABS AND
! HAVE BEEN DEFINED BY $XABDEF
macro XAB$R_JOP_OVERLAY = 8,0,16,0 %;
macro XAB$W_JOP = 8,0,16,0 %;           !  journaling flags 
macro XAB$R_JOP_BITS = 8,0,8,0 %;
macro XAB$V_ONLY_RU = 8,0,1,0 %;        !  Recovery-unit only access 
macro XAB$V_RU = 8,1,1,0 %;             !  Recovery unit 
macro XAB$V_BI = 8,2,1,0 %;             !  Before Image 
macro XAB$V_AI = 8,3,1,0 %;             !  After Image 
macro XAB$V_AT = 8,4,1,0 %;             !  Audit Trail 
macro XAB$V_NEVER_RU = 8,5,1,0 %;       !  Never journal in Recovery-unit
macro XAB$B_BIS = 12,0,8,0 %;           !  BI journal name buffer size 
macro XAB$B_BIL = 13,0,8,0 %;           !  BI journal name return size
macro XAB$L_BIA = 16,0,32,0 %;          !  BI journal name buffer address 
macro XAB$B_AIS = 20,0,8,0 %;           !  AI journal name buffer size 
macro XAB$B_AIL = 21,0,8,0 %;           !  AI journal name return size
macro XAB$L_AIA = 24,0,32,0 %;          !  AI journal name buffer address 
macro XAB$B_ATS = 28,0,8,0 %;           !  AT journal name buffer size 
macro XAB$B_ATL = 29,0,8,0 %;           !  AT journal name return size
macro XAB$L_ATA = 32,0,32,0 %;          !  AT journal name buffer address 
 
!*** MODULE $FSCNDEF ***
! ++
! 
!         Descriptor codes for SYS$FILESCAN
! 
! 
literal FSCN$M_NODE = 1;
literal FSCN$M_DEVICE = 2;
literal FSCN$M_ROOT = 4;
literal FSCN$M_DIRECTORY = 8;
literal FSCN$M_NAME = 16;
literal FSCN$M_TYPE = 32;
literal FSCN$M_VERSION = 64;
literal FSCN$S_FLDFLAGS = 1;
macro FSCN$V_NODE = 0,0,1,0 %;          !  Node name present
macro FSCN$V_DEVICE = 0,1,1,0 %;        !  Device name present
macro FSCN$V_ROOT = 0,2,1,0 %;          !  Root directory present
macro FSCN$V_DIRECTORY = 0,3,1,0 %;     !  Directory present
macro FSCN$V_NAME = 0,4,1,0 %;          !  File name present
macro FSCN$V_TYPE = 0,5,1,0 %;          !  File type present
macro FSCN$V_VERSION = 0,6,1,0 %;       !  File version present
literal FSCN$_FILESPEC = 1;             !  complete filespec
literal FSCN$_NODE = 2;                 !  node:: field
literal FSCN$_DEVICE = 3;               !  device: field
literal FSCN$_ROOT = 4;                 !  [root.] field
literal FSCN$_DIRECTORY = 5;            !  [directory] field
literal FSCN$_NAME = 6;                 !  name field
literal FSCN$_TYPE = 7;                 !  .typ field
literal FSCN$_VERSION = 8;              !  ;version field
literal FSCN$S_ITEM_LEN = 8;
literal FSCN$S_FSCNDEF = 8;
macro FSCN$W_LENGTH = 0,0,16,0 %;       !  return length word
macro FSCN$W_ITEM_CODE = 2,0,16,0 %;    !  item code value
macro FSCN$L_ADDR = 4,0,32,0 %;         !  return length pointer
 
!*** MODULE $RMEDEF ***
! 
!                 rms escape definitions
! 
!   the following values identify various requests for non-standard rms
!   functions.  they are currently input to the $modify function in the
!   ctx field of the fab only if the esc bit is set in fop.  incorrect
!   use of these capabilties could cause rms to fail, hence great caution
!   should be exercised in their use.
! 
literal RME$C_SETRFM = 1;               !  change rfm, mrs, and fsz (if vfc) in ifab only 
literal RME$C_PPFECHO = 2;              !  enable echo of SYS$INPUT to SYS$OUTPUT
