	$BEGIN	RM0RABCHK,000,RM$RMS0,<COMMON RAB CHECKING>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: rms32
;
; Abstract:
;		this routine performs common rab call argument
;		list and rab validation.
;
; Environment:
;		star processor running starlet exec.
;
; Author: l f laverdure,	 creation date: 4-JAN-1977
;
; Modified By:
;
;
;	V03-004	DGB0042		Donald G. Blair		02-May-1984
;		If the PIO$V_INHAST bit is set when we start an
;		RMS operation, we conclude that the caller must be 
;		at exec AST level or higher and that he would break 
;		RMS synchronization rules if allowed to continue.  
;		Return Error.
;
;	V03-003	RAS0171		Ron Schaefer		19-Jul-1983
;		Change RAS0162 to a new specific structure-less
;		error.
;
;	V03-002	RAS0162		Ron Schaefer		17-Jun-1983
;		Detect and report the AST/non-AST caller's mode
;		wait hang condition, by checking the low bit of the
;		RAB's BLN field.
;
;	V03-001	KBT0213		Keith B. Thompson	23-Aug-1982
;		Reorganize psects
;
;	V02-010	CDS0001		C Saether		10-Dec-1981
;		Rename psect.
;
;	V02-009	REFORMAT	Maria del C. Nasr	24-Jul-1980
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$PIODEF
	$PSLDEF
	$RABDEF
	$RMSDEF
	
;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RM$RABCHK - COMMON ARGLIST AND RAB VALIDATION ROUTINE

;++
;
; RM$RABCHK
; RM$NULL
; RM$BASIC_ERR
;
;  This routine performs the following functions:
;
;	1. setup r11 to point to the image i/o impure area
;	   (may be changed by rms0conn or rm0ifisi)
;	2. check argument list for accessibility and validity
;	3. check rab for accessibility and validity
;	4. set r8 to address of rab
;	5. inhibit rms internal asts
;	6. set r9 to the value of isi
;
;
;
; Calling sequence:
;
;	bsbw	rm$rabchk
;
; Input Parameters:
;
;	ap	arglist addr
;
; Implicit Inputs:
;
;	the contents of the arglist and the bid, bln, and isi fields
;	of the rab.
;
; Output Parameters:
;
;	r11	impure area address
;	r9	isi value
;	r8	rab address
;	r7	mode of caller
;
; Implicit Outputs:
;
;	none
;
; Completion Codes:
;
;	z-bit set if isi = zero, else clear.
;	if any errors, the rms error code is set into r0
;	and return is made to the user (not caller).
;
; Side Effects:
;
;	rms internal asts are inhibited.
;
;--



;++
;
;  set up pointer to image i/o impure area and set r7 to the mode of the caller
;
;--

RM$RABCHK::
	MOVPSL	R11			; get psl
	EXTZV	#PSL$V_PRVMOD,-
		#PSL$S_PRVMOD,R11,R7	; extract the previous mode

	MOVAL	@#PIO$GW_IIOIMPA,R11	; image io impure area addr

;++
;
;  perform accessibility checks
;
;--

	MOVL	4(AP),R8		; get rab address
	IFNOWRT	#RAB$C_BLN,(R8),ERRRAB	; rab writeable?
	ASSUME	RAB$B_BID EQ 0
	ASSUME	RAB$B_BLN EQ 1
	CMPW	(R8),#RAB$C_BID+<RAB$C_BLN@8>; rab block id & length?
	BNEQ	CHKRAB			; branch if perhaps not

;++
;
;  Disable AST's.  If the PIO$V_INHAST bit is already set, we
;  conclude that the caller must be at exec ast level or higher
;  (otherwise, he could not have kicked off an RMS operation
;  while RMS was already in progress) and would break RMS 
;  synchronization rules if allowed to continue.  Return RMS$_BUSY
;  status when this happens.
;
;--

INHAST:	BBSS	#PIO$V_INHAST,-		; disable asts
		W^<PIO$GW_STATUS-PIO$GW_IIOIMPA>(R11),ERRBUSY


	MOVZWL	RAB$W_ISI(R8),R9	; set r9 = isi value

;++
;
;  dummy routine to simply return via an rsb
;
;--

RM$NULL::
	RSB

;++
;
;  make longer version of rab validity check
;
;--

CHKRAB:	CMPB	(R8),#RAB$C_BID		; is it a rab?
	BNEQ	ERRRAB
	CMPB	RAB$B_BLN(R8),#RAB$C_BLN; is it long enough?
	BLSSU	ERRBLN			; nope, report error
	BLBC	RAB$B_BLN(R8),INHAST	; is this RAB busy?
					; continue if not

;++
;
;  an error has occurred in validating the argument list or rab
;
;  Since an error code cannot be safely stored in the rab,
;  no attempt to generate an err= ast will be made.
;  R0 will be set to the appropriate error code and an
;  exception, if enabled, will be generated upon ret.
;
;--

ERRBUSY:
	RMSERR	BUSY			; synchronization problem
	BRB	BASIC_ERR

ERRBLN:
	RMSERR	BLN			; invalid block length
	BRB	BASIC_ERR

ERRRAB:
	RMSERR	RAB			; invalid rab
 
BASIC_ERR:
	SSB	#16,R0			; prefix the facility code
					; ... to the error code

	RET				; and return to caller

	.END
