MODULE showmain (IDENT='V04-000',
	MAIN=show$start,
	ADDRESSING_MODE(EXTERNAL=GENERAL,
		NONEXTERNAL=LONG_RELATIVE)
	) =
BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:  SHOW utility
!
! ABSTRACT:
!	This module contains the command processing and dispatch routines.
!
! ENVIRONMENT:
!	VAX native, user mode.
!
! AUTHOR:  Gerry Smith		 CREATION DATE:  25-Jun-1982
!
! MODIFIED BY:
!
!	V03-005 AEW0002		Anne E. Warner		10-Jul-1984
!		Remove the qualifier MSCP as this module is now called
!		from SHOW$DEVICES as SHOW DEVICES/SERVED
!
!	V03-004 AEW0001		Anne E. Warner		12-Apr-1984
!		Add the qualifier MSCP which enables the branch to
!		the module SHOW$MSCP which shows information on mass
!		served devices.
!
!	V03-003	MCN0147		Maria del C. Nasr	04-Feb-1984
!		Take out reference to external routine FILE_ERROR, since
!		it is not used.
!
!	V03-002	GAS0174		Gerry Smith		25-Aug-1983
!		Split the I/O routines into a different module, SHOWIO.  
!		Also added SHOW BROADCAST.
!
!	V03-001	GAS0154		Gerry Smith		 7-Jul-1983
!		Add SHOW AUDIT.
!
!--

LIBRARY 'SYS$LIBRARY:STARLET';		! VAX/VMS common definitions
REQUIRE 'SRC$:SHOWDEF';			! SHOW common definitions


!
! Macro to set up two associated tables.  The first table is a list of
! descriptor addresses.  These descriptors contain the option names.
! The second table is a corresponding list of addresses of option routines.
!
! If a new option is added to SET or SHOW, all that is required in this 
! module is to add one line of code, the option name, e.g. WORKING_SET.
! Then, the name of the global routine that is dispatched to from this 
! routine will be named SHOW$WORKING_SET.
!
MACRO

    option_name [option] = %EXACTSTRING(4, 0, option)%,

    option_address [option] = %NAME(%STRING('show$',%STRING(option)))%,

    make_table (name) = 
	LITERAL %NAME(%STRING(name,'_table_length')) = %LENGTH - 1;
	EXTERNAL ROUTINE option_address(%REMAINING);
	OWN
	    %NAME(%STRING(name,'_option')) : VECTOR[%LENGTH - 1]
	    INITIAL (option_name(%REMAINING)),

	    %NAME(%STRING(name,'_routine')) : VECTOR[%LENGTH - 1]
	    INITIAL (option_address(%REMAINING));%;


FORWARD ROUTINE
    show$start,				! Main routine for SHOW
    handler;				! Condition handler for SHOW

EXTERNAL ROUTINE
    open_output : NOVALUE,		! Open output file
    show$write_line : NOVALUE,		! Write a line to output file
    show$print_line : NOVALUE,		! Print an already-formatted line
    cli$get_value,			! Get qualifier value
    cli$present;			! Test if qualifier present

GLOBAL show$exit_status : $BBLOCK[4]
			  INITIAL(1);

!
! Set up a table of all options, and another table pointing to the address
! of the routine for each option.
!

make_table (show,
		accounting,
    		audit,
    		broadcast,
		devices,
		errors,
		logical,
		magtape,
	        memory,
		network,
		printer,
		process,
		rms_default,
		system,
		terminal,
		users,
		working_set);



ROUTINE show$start =
BEGIN

!---
!
! This is the main program.  It gathers all the command inputs, and then
! dispatches to the appropriate routines.
!
!---

LOCAL
    status,
    option : $BBLOCK[dsc$c_s_bln];

ENABLE handler;					! Enable the condition handler

!
! Open and connect to the output file.
!
open_output();


!
! Interrogate the CLI to determine which option one was requested, and
! dispatch to the appropriate routine.
!
$init_dyndesc(option);

IF NOT (status = cli$get_value(%ASCID 'OPTION', option))
THEN SIGNAL_STOP(.status);

option[dsc$w_length] = MINU (.option[dsc$w_length], 4);

INCR index FROM 0 TO show_table_length - 1 DO
    BEGIN
    IF CH$EQL(.option[dsc$w_length], .option[dsc$a_pointer],
	      .option[dsc$w_length], show_option[.index])
    THEN
	BEGIN
	(.show_routine[.index])();
	EXITLOOP
	END;
    END;

RETURN .show$exit_status OR sts$m_inhib_msg;		! Exit with no message
END;

ROUTINE handler (sigargs, mechargs) =
BEGIN

!---
!
! This routine is a condition handler established by the main
! routine.  It saves the most severe condition for the exit status.
!
!---

MAP
    sigargs : REF $BBLOCK,
    mechargs : REF $BBLOCK;
BIND
    signame = sigargs[chf$l_sig_name] : $BBLOCK;	! Name of signal


IF .show$exit_status EQL 1			! If no errors yet, use
THEN show$exit_status = .signame;		! this one.

IF NOT .signame					! If an error signal
AND .signame[sts$v_severity]			! and severity is worse
GTRU .$BBLOCK[show$exit_status, sts$v_severity] ! than current saved severity
THEN show$exit_status = .signame;		! then save it for exit

RETURN ss$_resignal;				! Resignal to get message
END;

END
ELUDOM
