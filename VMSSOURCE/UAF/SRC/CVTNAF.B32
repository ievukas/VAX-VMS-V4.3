MODULE CVTNAF (	%TITLE	'Convert Network Proxy File'
		MAIN = MAIN,
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Convert User Authorization File
!
! ABSTRACT:	Converts a Release 3 compatible NETNAF.DAT to Release 4 format.
!		The new NETNAF.DAT offsets are assumed.  The old offsets have
!		been renamed to ONF$etc...
!
! ENVIRONMENT:	Release 3 to Release 4 conversion procedures
!
! AUTHOR:	Chris Hume, CREATION DATE: 22-May-1979
!
! MODIFIED BY:
!
!	V03-002	ACG0385		Andrew C. Goldstein,	11-Jan-1984  21:34
!		Move ONFDEF to LIB$
!
!	V03-001	ACG0385		Andrew C. Goldstein,	5-Jan-1984  19:43
!		Crib from CVTUAF utility.
!
!--

LIBRARY 'SYS$LIBRARY:LIB';
REQUIRE 'LIB$:ONFDEF';

MACRO
    RETURN_IF_ERROR[] =
	BEGIN
	LOCAL RMSERR;
	(IF NOT (RMSERR = %REMAINING) THEN RETURN .RMSERR)
	END
	%;

LITERAL
    TRUE = 1;

MACRO
	COPY_PADDED (NAME) =
		COPY_PADDED1 (%EXPLODE (NAME))
		%,

	COPY_PADDED1 (C1, C2, C3, C4, C5) =
		COPY_PADDED2 (%STRING ('ONF$S', %REMAINING),
			      %STRING ('ONF$', C5, %REMAINING),
			      %STRING ('NAF$S', %REMAINING),
			      %STRING ('NAF$', C5, %REMAINING))
		%,

	COPY_PADDED2 (OLENGTH, ONAME, NLENGTH, NNAME) =
		CH$COPY (%NAME (OLENGTH), ONFBUF[%NAME (ONAME)],
			 ' ',
			 %NAME (NLENGTH), NAFBUF[%NAME (NNAME)])
		%,

	COPY_COUNTED (NAME) =
		COPY_COUNTED1 (%EXPLODE (NAME))
		%,

	COPY_COUNTED1 (C1, C2, C3, C4, C5) =
		COPY_COUNTED2 (%STRING ('ONF$S', %REMAINING),
			      %STRING ('ONF$', C5, %REMAINING),
			      %STRING ('NAF$S', %REMAINING),
			      %STRING ('NAF$', C5, %REMAINING))
		%,

	COPY_COUNTED2 (OLENGTH, ONAME, NLENGTH, NNAME) =
		CH$COPY (.VECTOR [ONFBUF[%NAME (ONAME)], 0;, BYTE]+1, ONFBUF[%NAME (ONAME)],
			 ' ',
			 %NAME (NLENGTH), NAFBUF[%NAME (NNAME)])
		%,
	PADDED_TO_COUNTED (NAME) =
		PADDED_TO_COUNTED1 (%EXPLODE (NAME))
		%,

	PADDED_TO_COUNTED1 (C1, C2, C3, C4, C5) =
		PADDED_TO_COUNTED2 (%STRING ('ONF$S', %REMAINING),
			      %STRING ('ONF$', C5, %REMAINING),
			      %STRING ('NAF$S', %REMAINING),
			      %STRING ('NAF$', C5, %REMAINING))
		%,

	PADDED_TO_COUNTED2 (OLENGTH, ONAME, NLENGTH, NNAME) =
		BEGIN
		LOCAL COUNT, P : REF VECTOR [,BYTE];
		P = ONFBUF[%NAME (ONAME)] + %NAME (OLENGTH);
		UNTIL .P[-1] NEQ ' '
		OR .P LEQA ONFBUF[%NAME (ONAME)]
		DO P = .P - 1;
		COUNT = .P - ONFBUF[%NAME (ONAME)];
		VECTOR [NAFBUF[%NAME (NNAME)], 0; , BYTE] = .COUNT;
		CH$COPY (.COUNT, ONFBUF[%NAME (ONAME)],
			 ' ',
			 %NAME (NLENGTH)-1, NAFBUF[%NAME (NNAME)]+1)
		END
		%;

EXTERNAL ROUTINE
	LIB$PUT_OUTPUT	: ADDRESSING_MODE (GENERAL);

OWN
    NAFBUF: BLOCK[NAF$C_LENGTH, BYTE],
    ONFBUF: BLOCK[ONF$C_LENGTH, BYTE],

    NAFKEY1: $XABKEY (			! XAB for UIC key
	KREF = 1,			! alternate key
	POS0 = $BYTEOFFSET (NAF$T_LOCALUSER),
	SIZ0 = NAF$S_LOCALUSER,
	FLG  = (CHG, DUP),
	KNM  = UPLIT BYTE ('Local Username                  ')
	),

    NAFKEY0: $XABKEY (			! XAB for USERNAME key
	KREF = 0,			! primary key
	POS0 = $BYTEOFFSET (NAF$T_REMNAME),
	SIZ0 = NAF$S_REMNAME,
	KNM  = UPLIT BYTE ('Remote Node Name and Username   '),
	NXT  = NAFKEY1
	),

    NAFALL: $XABALL (			! XAB for NAF allocation
	AOP  = CBT,
	BKZ  = 4,
	NXT  = NAFKEY0
	),

    NAFPRO: $XABPRO (			! XAB for file protection
	PRO  = (RWED, RWED, RWE,),	! deny world access
	NXT  = NAFALL
	),

    NAFFAB: $FAB (			! FAB for work file
	FAC = PUT,			! access types
	FNM = 'NEWNAF',			! temporary file name
	DNM = '.DAT',
	SHR = NIL,
	ORG = IDX,			! indexed operations
	RFM = FIX,
	MRS = NAF$C_LENGTH,		! maximum record size
	XAB = NAFPRO			! file protection XAB
	),

    NAFRAB: $RAB (			! RAB for temporary file
	RSZ = NAF$C_LENGTH,
	RBF = NAFBUF,
	FAB = NAFFAB
	),

    ONFKEY1: $XABKEY (			! XAB to read old NAF key
	KREF = 1
	),

    ONFKEY0: $XABKEY (			! XAB to read old NAF key
	KREF = 0,
	NXT  = ONFKEY1
	),

    ONFFAB: $FAB (			! FAB for old NAF file
	FAC = GET,			! read only
	FNM = 'OLDNAF',
	DNM = '.DAT',
	XAB = ONFKEY0
	),

    ONFRAB: $RAB (			! RAB for old NAF
	RAC = SEQ,
	KRF = 0,			! key of reference
	UBF = ONFBUF,
	USZ = ONF$C_LENGTH,
	FAB = ONFFAB
	);

ROUTINE MAIN =
BEGIN

LOCAL
	RMSERR;

!
! Open the old NAF for input
!
RETURN_IF_ERROR ($OPEN (FAB = ONFFAB));
RETURN_IF_ERROR ($CONNECT (RAB = ONFRAB));
!
! Validate the keys of the NAF, checking if it is a new format,
! and then for old format validity.
!
IF  .ONFKEY0[XAB$W_POS0] EQL $BYTEOFFSET (NAF$T_REMNAME)
AND .ONFKEY0[XAB$B_SIZ0] EQL NAF$S_REMNAME
AND .ONFKEY1[XAB$W_POS0] EQL $BYTEOFFSET (NAF$T_LOCALUSER)
AND .ONFKEY1[XAB$B_SIZ0] EQL NAF$S_LOCALUSER
THEN
    BEGIN
    LIB$PUT_OUTPUT ($DESCRIPTOR ('Proxy file is already converted'));
    RETURN STS$M_INHIB_MSG;
    END;
IF  .ONFKEY0[XAB$W_POS0] NEQ $BYTEOFFSET (ONF$T_REMNAME)
OR  .ONFKEY0[XAB$B_SIZ0] NEQ ONF$S_REMNAME
OR  .ONFKEY1[XAB$W_POS0] NEQ $BYTEOFFSET (ONF$T_LOCALUSER)
OR  .ONFKEY1[XAB$B_SIZ0] NEQ ONF$S_LOCALUSER
THEN
    BEGIN
    LIB$PUT_OUTPUT ($DESCRIPTOR ('Proxy file has invalid format'));
    RETURN STS$M_INHIB_MSG;
    END;
!
! Create the new NAF.
!
NAFALL[XAB$L_ALQ] = .ONFFAB[FAB$L_ALQ] / 2 + .ONFFAB[FAB$L_ALQ];
RETURN_IF_ERROR ($CREATE (FAB = NAFFAB));
RETURN_IF_ERROR ($CONNECT (RAB = NAFRAB));

WHILE (RMSERR = $GET (RAB = ONFRAB))
DO
    BEGIN
    CH$FILL (0, NAF$C_LENGTH, NAFBUF);
    COPY_PADDED ('NAF$T_NODE');
    COPY_PADDED ('NAF$T_REMUSER');
    COPY_PADDED ('NAF$T_LOCALUSER');
    RETURN_IF_ERROR ($PUT (RAB = NAFRAB));
    END;
IF .RMSERR NEQ RMS$_EOF THEN RETURN .RMSERR;
RETURN_IF_ERROR ($CLOSE (FAB = NAFFAB));
$CLOSE (FAB = ONFFAB)
END;

END
ELUDOM
