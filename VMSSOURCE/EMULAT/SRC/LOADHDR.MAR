	.NLIST	CND
	.IF	DF,FP_EMUL
	.TITLE	FP$LOAD - HEADER FOR LOADABLE FLOATING POINT EMULATION
	.IFF
	.TITLE	VAX$LOAD - HEADER FOR LOADABLE CHAR/DECIMAL EMULATION
	.ENDC
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; Facility:
;
;	Instruction Emulator
;
; Abstract: 
;
;	This module defines the data structures required for a piece
;	of loadable code.  This includes the pool header and the code
;	needed to hook into the rest of the system.  For the instruction
;	emulation code, the hooks are vectors in the SCB.
;
; Environment: MODE=Kernel 
;
; Author:  Kathleen D. Morse, Creation date:  04-May-1983
;
; Modified by:
;
;	V03-004	LJK0028		Lawrence J. Kenah	10-Apr-1984
;		Store base address of emulator image in cell in SYS.EXE
;		set aside for that purpose.
;
;	V03-003	LJK0027		Lawrence J. Kenah	21-Mar-1984
;		Store address of access violation handler into EXE$GL_VAXEXCVEC
;		when loading decimal/string emulator.
;
;	V03-002	LJK0017		Lawrence J. Kenah	17-Jan-1984
;		Make table entries for SCB entries position independent.
;		Change PSECT attributes.
;
;	V03-001	WMC0001		Wayne Cardoza		23-Jun-1983
;		Fix SLVTAB.
;
;--

;
; INCLUDE FILES:
;

	$PRTDEF				; Define protection codes
	$PTEDEF				; Define page table entry fields
	$VADEF				; Define virtual address fields

; This must be the first program section in the image file.

	.PSECT	$$$$$$BEGIN	PAGE,PIC,USR,CON,REL,GBL,SHR,NOWRT 

	.ENABLE		LOCAL_BLOCK

10$:

	.IF	DF,FP_EMUL
FP$BEGIN::				; Beginning of floating point emulator
	SLVTAB	END=FP$END , -		; Size of floating point emulator
		INITRTN=FP$INIT , -	; Address of initialization routine
		SUBTYP=DYN$C_NON_PAGED, - ; Sub-type for data structure
		PROT_W=PRT$C_URKW , -	; Protection on loadable code pages
		FACILITY=FPEMUL.EXE	; Name of image loaded

	.IFF
VAX$BEGIN::				; Beginning of string/decimal emulator
	SLVTAB	END=VAX$END , -		; Size of string/decimal ins emulator
		INITRTN=VAX$INIT , -	; Address of initialization routine
		SUBTYP=DYN$C_NON_PAGED, - ; Sub-type for data structure
		PROT_W=PRT$C_URKW , -	; Protection on loadable code pages
		FACILITY=VAXEMUL.EXE	; Name of image loaded
	.ENDC


	.IF	DF,FP_EMUL
SCB_OPCDEC:					; Hook for SCB OPCDEC except
	.LONG	^X10				;  Offset into SCB
	.LONG	VAX$OPCDEC - FP$BEGIN_UR	;  Offset to emulator entry pt
	.LONG	0				; Empty hook ends table

	.IFF
SCB_UVAX:					; Hook for SCB uVAX except
	.LONG	^XC8				;  Offset into SCB
	.LONG	VAX$EMULATE - VAX$BEGIN_UR	;  Offset to emulator entry pt
SCB_UVAX_FPD:					; Hook for SCB uVAX FPD except
	.LONG	^XCC				;  Offset into SCB
	.LONG	VAX$EMULATE_FPD - VAX$BEGIN_UR	;  Offset to emulator entry pt
	.LONG	0				; Empty hook ends table
	.ENDC

...SIZE... = .-10$

; Insure at least one page before real code begins

SPACE_FILLER1:					; This prevents UR access to
	.BLKB	<511 - ...SIZE...>		;  the pool fragments on either
						;  side of the emulation code.
	.DISABLE	LOCAL_BLOCK

	.IF	DF,FP_EMUL
FP$BEGIN_UR::					; Starting VA to protect UR
	.IFF
VAX$BEGIN_UR::					; Starting VA to protect UR
	.ENDC

	.IF	DF,FP_EMUL
	.SBTTL	FP$INIT - Initialization routine to hook into SCB
	.IFF
	.SBTTL	VAX$INIT - Initialization routine to hook into SCB
	.ENDC
	
;++
; Functional Description:
;
	.IF	DF,FP_EMUL
;	FP$INIT is linked together with all of the code required for
	.IFF
;	VAX$INIT is linked together with all of the code required for
	.ENDC
;	the instruction emulator.  The necessary amount of non-paged pool
;	is allocated and rounded up to page boundary.  Code is then
;	moved into this block of pool.  All of this code must be PIC.
;	This code is then re-protected so that it can be executed from
;	user mode.  A page is allocated on either side of the emulator
;	to serve as buffers, because the code is not loaded on a page
;	boundary and pool cannot be protected UR for security reasons.
;
	.IF	DF,FP_EMUL
;	The vector for opcode reserved to DIGITAL is then connected to
;	the emulation code.
	.IFF
;	The vectors for instruction emulation and instruction emulation
;	first-part-done are then connected to the emulation code.
	.ENDC
;
; Calling Sequence:
;
	.IF	DF,FP_EMUL
;	JSB	FP$INIT
	.IFF
;	JSB	VAX$INIT
	.ENDC
;
; Input Parameters:
;
;	None
;
;--

; This PSECT holds the init routines.

	.PSECT	____INITHK	BYTE,PIC,USR,CON,REL,GBL,SHR,NOWRT 

	.ENABLE		LOCAL_BLOCK

10$:
	.IF	DF,FP_EMUL
FP$INIT::				; Hook in emulation code
FP$END_UR::				; Also ending VA to protect UR
	.IFF
VAX$INIT::				; Hook in emulation code
VAX$END_UR::				; Also ending VA to protect UR
	.ENDC
	MOVQ	R0,-(SP)		; Save registers
	MOVQ	R2,-(SP)		; Save registers

;
; Now reset the protection on the non-paged pool to be
; user-read, so that the emulation code can be accessed from
; all modes.  Make it kernel-write so that breakpoints can be
; set in the emulation code with XDELTA.
;
	.IF	DF,FP_EMUL
	MOVAB	W^FP$BEGIN_UR,R1	; Get starting VA to protect URKW
	.IFF
	MOVAB	W^VAX$BEGIN_UR,R1	; Get starting VA to protect URKW
	.ENDC
	EXTZV	#VA$V_VPN,#VA$S_VPN,R1,R1 ; Make address into VPN
	ASHL	#2,R1,R1		; Make into byte index into SPT
	.IF	DF,FP_EMUL
	MOVAB	W^FP$END_UR,R2		; Get ending address to protect URKW
	.IFF
	MOVAB	W^VAX$END_UR,R2		; Get ending address to protect URKW
	.ENDC
	EXTZV	#VA$V_VPN,#VA$S_VPN,R2,R2  ; Make address into VPN
	ASHL	#2,R2,R2		; Make into byte index into SPT
	MOVZBL	#PRT$C_URKW,R0		; New protection for emulation code
	MOVAB	G^MMG$GL_SPTBASE,R3	; Get address of system page table
20$:
	INSV	R0,#PTE$V_PROT,#PTE$S_PROT,@(R3)[R1] ; Set new
	ACBL	R2,#4,R1,20$		; protection for each page
	INVALID				; Invalidate the translation buffer

;
; Now connect the emulation code to the system control block.
;
	MOVL	G^EXE$GL_SCB,R3		; Base address of SCB
	.IF	DF,FP_EMUL
	MOVAB	W^VAX$OPCDEC,^X10(R3)	; Set SCB to point to emulator code
	MOVAB	W^FP$BEGIN,-
		G^MMG$GL_FPEMUL_BASE	   ; Store base address of image
	.IFF
	MOVAB	W^VAX$EMULATE,^XC8(R3)	   ; Set SCB to point to emulator code
	MOVAB	W^VAX$EMULATE_FPD,^XCC(R3) ; Set SCB to point to emulator code
	MOVAB	W^VAX$MODIFY_EXCEPTION,-   ; Store address of access violation
		G^EXE$GL_VAXEXCVEC	   ;  handler
	MOVAB	W^VAX$BEGIN,-
		G^MMG$GL_VAXEMUL_BASE	   ; Store base address of image
	.ENDC
	MOVQ	(SP)+,R2		; Restore registers
	MOVQ	(SP)+,R0		; Restore registers
	RSB				; and return

...INIT_SIZE... = .-10$

	.DISABLE	LOCAL_BLOCK

; This must be the last program section in the image

	.PSECT	______END	BYTE,PIC,USR,CON,REL,GBL,SHR,NOWRT 

; Insure at least one page at the end of the image, too

SPACE_FILLER2:					; This prevents UR access to
	.BLKB	<511 - ...INIT_SIZE...>		;  the pool fragments on either
						;  side of the emulation code.
	.IF	DF,FP_EMUL
FP$END::
	.IFF
VAX$END::				;
	.ENDC

	.END
