%TITLE 'NML DEFINE permanent parameter module'
MODULE NML$DEFINE (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines to handle the NCP DEFINE command.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-DEC-1979
!
! MODIFIED BY:
!
!	V03-010	MKP0013		Kathy Perko	20-April-1984
!		If DEF NODE nnn NAME mmm supplies a duplicate name, fix
!		the error message so it indicates whether the duplicate is
!		the exec or a remote.
!
!	V03-009	MKP0012		Kathy Perko	9-April-1984
!		If talking to a Phase III NCP, return those nodes in the
!		executor's area with a zero area number.  This will make
!		them intelligble on the Phase III system.  Node numbers
!		outside the executor's area are returned as is.  This means
!		they will be large, not easily understood numbers, but at
!		least they will be unique.
!
!	V03-008	MKP0011		Kathy Perko	17-Feb-1984
!		Fix bug in DEFINE KNOWN NODES - NML$GETRECOWNER is being
!		passed a descriptor incorrectly.
!
!	V03-007	MKP0010		Kathy Perko	9-Jan-1984
!		Add X25-Access Module entity.
!
!	V03-006	MKP0009		Kathy Perko	4-Aug-1983
!		Converting node database to use multiple ISAM keys.  Make
!		changes necessary in this module.
!
!	V03-005	MKP0008		Kathy Perko	25-April-1983
!		Add configurator module permanent database operations.
!
!	V03-004	MKP0007		Kathy Perko	14-Sept-1982
!		If a logging sink node is the executor node, save it in
!		the permanent data base with an address of zero.  This allows
!		the database to be transported to another node, and still log
!		the events to the local node.
!		Fix DEFINE KNOWN so that it uses a record owner to determine
!		what records to modify.  This allows for X25 and X29 which
!		combine several databases in a single permanent database file.
!
!	V03-003	MKP0006		Kathy Perko	9-Sept-1982
!		Fix entity returned in NICE messages for X29-Server so
!		that a length is included.
!
!	V03-002	MKP0005		Kathy Perko	28-June-1982
!		Redo qualifier handling to use the qualifier's index into
!		the Parameter Semantic Table (PST) instead of the qualifier's
!		Network Management parameter ID.
!		Add X29-Server entity.
!
!	V03-001	MKP0004		Kathy Perko	3-May-1982
!		Add qualifier matching to permanent data base operations.
!
!	V02-003	MKP0003		Kathy Perko	16-Nov-1981
!		Undo the previous fix.  It's wrong.
!
!	V02-002	MKP0002		Kathy Perko	17-Sept-1981
!		Fix NML$SAVEVENTS so that a status of NML$_STS_PMS
!		is returned if there are no events.
!
!	V02-001	MKP0001		Kathy Perko	23-July-1981
!		Add circuit entity and multidrop lines
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    nml$defineknown	: NOVALUE,
    nml$defentity	: NOVALUE,
    nml_defentity	: NOVALUE,
    nml$define_known_nodes: NOVALUE,
    nml$define_node	: NOVALUE,
    nml_define_node	: NOVALUE,
    nml$defknownlog	: NOVALUE,
    nml$deflogging	: NOVALUE,
    nml_deflogging	: NOVALUE,
    nml$addevents,
    nml$savevents,
    nml$getrecowner;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

!
! Entity buffer and descriptor.
!
OWN
    NML$T_ENTBUFFER : BBLOCK [NML$K_ENTBUFLEN],
    NML$Q_ENTBFDSC  : DESCRIPTOR;

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL
    nml$gb_ncp_version,
    nml$gw_perm_exec_addr: BBLOCK [2];

EXTERNAL LITERAL
    nml$_badevtupd,
    nml$_intevtovf,
    nml$_recadded,
    nml$_norecown;

EXTERNAL ROUTINE
    nma$insertfld,
    nml$matchrecord,
    nma$searchfld,
    nml$add_fields,
    nml$addfilters,
    nml$getnxtsnk,
    nml$bld_reply,
    nml$error_1,
    nml$openfile,
    nml$read_known_node_rec,
    nml$readrecord,
    nml$writerecord,
    nml$send;


%SBTTL 'NML$DEFINEKNOWN  Define parameters for known entities'
GLOBAL ROUTINE NML$DEFINEKNOWN (ENTITY, DUM1, DUM2,
				DUM3, DUM4, DUM5) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine defines a set of parameters in the permanent
!	data base entry for each entity of the specified type.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	DUM1-DUM5	Not used.
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS Message parsing flags.
!
! SIDE EFFECTS:
!
!	Signals errors.
!
!--

BEGIN

LOCAL
    fid,			! File id code
    param_to_find,		! Parameter to match in permanent database
				!	record.
    msgsize,			! Message size
    key,			! Temporary record key buffer
    recdsc  : DESCRIPTOR;	! Record descriptor

fid = .nml$ab_entitydata [.entity, eit$b_fileid];
param_to_find = .nml$ab_entitydata [.entity, eit$w_key];
!
! Some of the permanent database files have more than one entity in them.
! For example, NETX25.DAT has all X25 entities (Access, Protocol, and Server).
! Add parameters to every record in the file which contains a parameter
! matching PARAM_TO_FIND.
!
key = 0;
WHILE nml$matchrecord (.fid, nml$gq_recbfdsc, key,
		      .param_to_find, 0, 0,
		      0, 0, 0,
		      recdsc) DO
    BEGIN
    nml$ab_msgblock [msb$l_flags] = 0; ! Initialize message flags
    !
    ! Add the parameters to the entity's record, and write the updated record
    ! back to the permanent database file.
    !
    nml_defentity (.entity, recdsc, key);
    !
    ! Build and send the NICE response message.
    !
    nml$bld_reply (nml$ab_msgblock, msgsize);
    nml$send (nml$ab_sndbuffer, .msgsize);
    key = .key + 1;
    END;
END;				! End of NML$DEFINEKNOWN

%SBTTL 'NML$DEFENTITY  Define entity parameters'
GLOBAL ROUTINE NML$DEFENTITY (ENTITY, ENTITY_LEN, ENTITY_ADR,
				QUAL_PST, QUAL_LEN, QUAL_ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Add parameters to the permanent data base entry for the specified
!	entity.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	ENTITY_LEN	Byte count of entity id string.
!	ENTITY_ADR	Address of entity id string.
!	QUAL_PST	Qualifier PST entry address
!	QUAL_LEN	Qualifier ID byte count.
!	QUAL_ADR	Address of qualifier id string.
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS Message parsing flags.
!
!--

BEGIN

LOCAL
    fid,				! File id code
    fldadr,
    fldsize,
    loop,
    msgsize,				! Message size
    key,				! Temporary record key buffer
    owner,				! Search key
    recdsc  : DESCRIPTOR,		! Record descriptor
    status;

nml$ab_msgblock [msb$l_flags] = 0;	! Initialize message flags
!
! Add parameters to every record in the file.
!
fid = .nml$ab_entitydata [.entity, eit$b_fileid]; ! Get file id
owner = .nml$ab_entitydata [.entity, eit$w_key];  ! Get search key

key = 0;					  ! Initialize record key
status = nml$matchrecord (.fid,
			      nml$gq_recbfdsc,
			      key,
			      .owner, .entity_len, .entity_adr,
			      .qual_pst, .qual_len, .qual_adr,
			      recdsc);
IF NOT .status THEN
    BEGIN
    !
    ! Initialize record descriptor and add entity ID field to record buffer.
    !
    recdsc [dsc$w_length] = 0;
    recdsc [dsc$a_pointer] = .nml$gq_recbfdsc [dsc$a_pointer] + 2;
    nma$insertfld (nml$k_max_rec_data,
			.owner, .entity_len, .entity_adr, recdsc);
    !
    ! If there's a qualifier associated with this entity, add that to
    ! the record as well.
    !
    IF .nml$gl_prs_flgs [nml$v_prs_qualifier] THEN
	BEGIN
	MAP qual_pst: REF BBLOCK;
	nma$insertfld (nml$k_max_rec_data,
			.qual_pst [pst$w_dataid], .qual_len, .qual_adr,
			recdsc);
	END;
     status = nml$_sts_suc;
     END;
!
! If everything is all right then add the parameters.
!
IF .status THEN
    nml_defentity (.entity, recdsc, key);
!
! Build and send the response message.
!
nml$bld_reply (nml$ab_msgblock, msgsize);
nml$send (nml$ab_sndbuffer, .msgsize);

END;				! End of NML$DEFENTITY

%SBTTL 'NML_DEFENTITY  Define entity parameters'
ROUTINE NML_DEFENTITY (ENTITY, RECDSC, KEY) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs common DEFINE functions for both singular
!	and plural requests.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	RECDSC		Address of current record descriptor.
!	KEY		Address of current record key.
!
!--

BEGIN

MAP
    recdsc : REF DESCRIPTOR;	! Record descriptor

LOCAL
    fid;				! File id code

fid = .nml$ab_entitydata [.entity, eit$b_fileid]; ! Get file id
!
! Add the NICE command parameter fields to the permanent database record.
!
IF nml$add_fields (nml$k_max_rec_data, .recdsc) THEN
    BEGIN
    nml$writerecord (.fid, .entity, .key, .recdsc, 0);
    nml$ab_msgblock [msb$b_code] = nma$c_sts_suc;
    END;
!
! Build response message.
!
nml$q_entbfdsc [dsc$w_length] = nml$k_entbuflen; ! Initialize entity descriptor
nml$q_entbfdsc [dsc$a_pointer] = nml$t_entbuffer;

nml$getrecowner (.recdsc,
		 .entity,
		 nml$q_entbfdsc,
		 nml$q_entbfdsc [dsc$w_length]);

nml$ab_msgblock [msb$v_entd_fld] = 1; 		 ! Set entity descriptor flag
nml$ab_msgblock [msb$a_entity] = nml$q_entbfdsc; ! Add entity descriptor pointer

END;					! End of NML_DEFENTITY

%SBTTL 'NML$DEFINE_KNOWN_NODES  Define parameters for known entities'
GLOBAL ROUTINE NML$DEFINE_KNOWN_NODES (ENTITY, DUM1, DUM2,
				DUM3, DUM4, DUM5) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine defines a set of parameters in the permanent
!	data base entry for each entity in the node database.  The
!	nodes updated in this case are the executor and the remotes.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	DUM1-DUM5	Not used.
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS Message parsing flags.
!
! SIDE EFFECTS:
!
!	Signals errors.
!
!--

BEGIN

LOCAL
    node_type,
    recdsc:	DESCRIPTOR,
    rewind_flag,
    msgsize;

!
! Loopnodes can only have the parameter CIRCUIT, which must be unique.  So
! DEFINE KNOWN never applies to loopnodes.  Apply the DEFINE to the executor
! first, and then to the remote nodes.
!
nml$define_node (nml$c_executor, 2, 0);
rewind_flag = true;
WHILE nml$read_known_node_rec (nml$c_node,
				nml$gq_recbfdsc,
				recdsc,
				.rewind_flag) DO
    BEGIN
    rewind_flag = false;
    nml$ab_msgblock [msb$l_flags] = 0;
    !
    ! Add the parameters to the node's record, and write the updated
    ! record back to the node permanent database file.
    !
    nml_define_node (.entity, recdsc, nmn$c_update_rec);
    !
    ! Set up the NICE message block so that the modified node's id is
    ! included in the NICE response message.  This is done because the
    ! architecture requires that, for KNOWN entity operations, the entitie IDs
    ! of the modified entities be returned in the NICE responses.
    !
    nml$q_entbfdsc [dsc$w_length] = nml$k_entbuflen;
    nml$q_entbfdsc [dsc$a_pointer] = nml$t_entbuffer;
    nml$getrecowner (recdsc,
		     .entity,
		     nml$q_entbfdsc,
		     nml$q_entbfdsc [dsc$w_length]);
    nml$ab_msgblock [msb$v_entd_fld] = 1;
    nml$ab_msgblock [msb$a_entity] = nml$q_entbfdsc;
    !
    ! Build and send NICE response message - one for each node updated.
    !
    nml$bld_reply (nml$ab_msgblock, msgsize);
    nml$send (nml$ab_sndbuffer, .msgsize);
    END;
END;				! End of NML$DEFINE_KNOWN_NODES

%SBTTL 'NML$DEFINE_NODE  Define entity parameters'
GLOBAL ROUTINE NML$DEFINE_NODE (ENTITY, ENTITY_LEN, ENTITY_ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	Add a node's parameters to the permanent data base entry for the
!	specified node.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	ENTITY_LEN	Byte count of entity id string.
!	ENTITY_ADR	Address of entity id string.
!
! IMPLICIT INPUTS:
!	NML$GL_PRS_FLGS Message parsing flags.
!
!--

BEGIN

LOCAL
    fid,			! Node permanent database file ID
    msgsize,			! Message size
    key,			! Record key buffer
    key_value_dsc_addr,		! Address of node's key value descriptor
    node_type,			! Record's node type (remote, loopnode, or
				!	executor).
    write_type,			! Indicates whether updating an already existing
				!	node record, or creating a new one.
    recdsc  : DESCRIPTOR,		! Record descriptor
    status;

!
! Try to get the permanent database record for the node in question.
!
key = .nml$ab_entitydata [.entity, eit$w_key];	  ! Get search key
fid = .nml$ab_entitydata [.entity, eit$b_fileid]; ! Get file id
!
! Set up the key value.
!
IF .entity EQL nml$c_executor THEN
    key_value_dsc_addr = UPLIT (nmn$c_typ_key_len, UPLIT (nml$c_executor))
ELSE
    key_value_dsc_addr = entity_len;
status = nml$readrecord (.fid,			! Node DB file ID
			 key,			! Key of reference ID
			 .key_value_dsc_addr,	! Key value of node
			 nml$gq_recbfdsc,	! Read buffer descriptor
			 recdsc,		! Return data descriptor
			 node_type);		! Entity type of node read
IF .status THEN
    BEGIN
    write_type = nmn$c_update_rec;
    !
    ! If this is not a loop node but the parameter group is for loop nodes
    ! then return a parameter not applicable error for the line parameter.
    ! (This assumes that the line parameter is the only one applicable to
    ! loop nodes.)
    !
    IF .node_type NEQ nml$c_loopnode AND .nml$gl_prs_flgs [nml$v_prs_loopg] THEN
	BEGIN
	nml$ab_msgblock [msb$l_flags]  = msb$m_det_fld;
	nml$ab_msgblock [msb$b_code]   = nma$c_sts_pna;
	nml$ab_msgblock [msb$w_detail] = nma$c_pcno_nli;
	status = nml$_sts_pna;
	END;
    !
    ! If the node is a loop node but the parameter group is not for loop nodes
    ! then return an unrecgnized component error.  (There must be something
    ! better!)
    !
    IF .node_type EQL nml$c_loopnode AND NOT .nml$gl_prs_flgs [nml$v_prs_loopg]
	    THEN
	BEGIN
	nml$ab_msgblock [msb$l_flags]  = msb$m_det_fld;
	nml$ab_msgblock [msb$b_code]   = nma$c_sts_cmp;
	nml$ab_msgblock [msb$w_detail] = nma$c_ent_nod;
	status = nml$_sts_cmp;
	END;
    END
ELSE
    BEGIN
    write_type = nmn$c_put_rec;
    !
    ! Initialize record descriptor, leaving room for the ISAM keys at the
    ! beginning of the record, and add entity ID field to record buffer.
    !
    recdsc [dsc$w_length] = 0;
    recdsc [dsc$a_pointer] = .nml$gq_recbfdsc [dsc$a_pointer] +
						 nmn$c_node_keys_len;
    IF .entity NEQ nml$c_executor THEN
	nma$insertfld (nml$k_max_rec_data,
			.key, .entity_len, .entity_adr, recdsc);
    !
    ! All nodes are in the same permanent database file.
    ! Loop nodes are uniquely identifyable because they have a circuit
    ! (NMA$C_PCNO_NLI) parameter and nothing else.  If the NICE command
    ! is defining a loop node, set the entity type accordingly, so the
    ! loopnode will be written to the file with the correct node type key.
    !
    IF .nml$gl_prs_flgs [nml$v_prs_loopg] THEN
	entity = nml$c_loopnode;
    status = nml$_sts_suc;
    END;
!
! If everything is all right then add the parameters.
!
IF .status THEN
    BEGIN
    nml$ab_msgblock [msb$l_flags] = 0;
    nml_define_node (.entity, recdsc, .write_type);
    END;
!
! Build and send the response message.
!
nml$bld_reply (nml$ab_msgblock, msgsize);
nml$send (nml$ab_sndbuffer, .msgsize);

END;				! End of NML$DEFINE_NODE

%SBTTL 'NML_DEFINE_NODE  Define entity parameters'
ROUTINE NML_DEFINE_NODE (ENTITY, RECDSC, WRITE_TYPE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine performs DEFINE NODE functions for both singular
!	and plural requests.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	RECDSC		Address of current record descriptor.
!	WRITE_TYPE	Indicates whether updating an already existing node
!			record, or if creating a new one.
!
!--

BEGIN

MAP
    recdsc : REF DESCRIPTOR;	! Record descriptor

LOCAL
    fid,
    fldsize,
    fldadr,
    node_name_dsc	: VECTOR [2],
    node_type,
    original_rec	: BBLOCK [nml$k_recbflen],
    original_rec_dsc	: VECTOR [2],
    status;

!
! Save the original contents of the node's database record so that, if the
! record hasn't been modified after the changes have been applied, it isn't
! written back to disk.  This should improve performance of command procedures
! that are reapplied after only a few changes (as is commonly done to update
! the node database).
!
original_rec_dsc [0] = .recdsc [dsc$w_length];
original_rec_dsc [1] = original_rec;
CH$MOVE (.recdsc [dsc$w_length], .recdsc [dsc$a_pointer], original_rec);
!
! Add new parameter fields to the permanent database record for the node
! being DEFINEd.
!
IF nml$add_fields (nml$k_max_rec_data, .recdsc) THEN
    BEGIN
    !
    ! Node must have either address or line parameter specified.
    !
    status = nml$_sts_suc;
    fldadr = 0;
    IF NOT (nma$searchfld (	.recdsc,
				nma$c_pcno_nli,
				fldsize,
				fldadr)
	    OR nma$searchfld (	.recdsc,
				nma$c_pcno_add,
				fldsize,
				fldadr)
	    OR .entity EQL nml$c_executor) THEN
	BEGIN
	nml$ab_msgblock [msb$l_flags]  = msb$m_det_fld;
	nml$ab_msgblock [msb$b_code]   = nma$c_sts_pms;
	nml$ab_msgblock [msb$w_detail] = nma$c_pcno_add;
	status = nml$_sts_pms;
	END;
    !
    ! DEFINE fields added to the node's permanent database record, check
    ! to see if the record has changed at all.  If it has, write the record
    ! back to file.
    !
    IF .status THEN
	BEGIN
	IF CH$NEQ (.recdsc [dsc$w_length], .recdsc [dsc$a_pointer],
		   .original_rec_dsc [0], .original_rec_dsc [1], 0) THEN
	    BEGIN
	    fid = .nml$ab_entitydata [.entity, eit$b_fileid]; ! Get file id
	    status = nml$writerecord (.fid, .entity, 0, .recdsc, .write_type);
	    END;
	IF .status EQL rms$_dup THEN
	    BEGIN
	    !
	    ! Node name is not unique.  (Address was checked in
	    ! NML$DEF_NODE_ADDR since the address key to the node
	    ! database allows duplicates).  So, the DEFINE cannot be
	    ! performed.
	    !
	    node_name_dsc [1] = 0;
	    !
	    ! Get the duplicated node name from node record that the NICE
	    ! command is attempting to modify.
	    !
	    nma$searchfld (.recdsc, nma$c_pcno_nna,
				node_name_dsc [0],
				node_name_dsc [1]);
	    !
	    ! Read in the record for the duplicated node so that it's ID is
	    ! returned in the NICE error response.
	    !
	    nml$readrecord (.fid,			! File ID
				UPLIT (nma$c_pcno_nna),	! Key type
				node_name_dsc,		! Key value = node name
				nml$gq_recbfdsc,	! Read buffer descriptor
				.recdsc,		! Return record descriptor
				node_type);		! Node type
	    nml$ab_msgblock [msb$l_flags] = msb$m_det_fld;
	    nml$ab_msgblock [msb$b_code] = nma$c_sts_pva;
	    nml$ab_msgblock [msb$w_detail] = nma$c_pcno_nna;
	    !
	    ! Set up the NICE message block so that the duplicate node id
	    ! is included in the NICE response message.
	    !
	    nml$q_entbfdsc [dsc$w_length] = nml$k_entbuflen;
	    nml$q_entbfdsc [dsc$a_pointer] = nml$t_entbuffer;
	    nml$getrecowner (.recdsc,
				.node_type,
				 nml$q_entbfdsc,
				 nml$q_entbfdsc [dsc$w_length]);
	    nml$ab_msgblock [msb$v_entd_fld] = 1;
	    nml$ab_msgblock [msb$a_entity] = nml$q_entbfdsc;
	    END
	ELSE
	    nml$ab_msgblock [msb$b_code] = nma$c_sts_suc;
	END;
    END;
END;					! End of NML_DEFINE_NODE

%SBTTL 'NML$DEFKNOWNLOG  Define parameters for known logging entities'
GLOBAL ROUTINE NML$DEFKNOWNLOG (ENTITY, DUM1, DUM2,
				DUM3, DUM4, DUM5) : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!	This routine defines a set of parameters in the permanent
!	data base entry for each logging entity.
!
! FORMAL PARAMETERS:
!	ENTITY		Entity type code.
!	DUM1-DUM5	Not used.
!
! IMPLICIT INPUTS:
!	NML$GL_PRS_FLGS Message parsing flags.
!
! SIDE EFFECTS:
!	Signals errors.
!
!--

BEGIN

LOCAL
    fid,			! File id code
    key,			! Index key into logging file.
    exec_addr,			! Address of executor node.
    recdsc : DESCRIPTOR,	! Descriptor of logging database record.
    source_blkdsc: DESCRIPTOR,	! Descriptor for event source block.
    source_ptr;			! Pointer to event source block.


fid = .nml$ab_entitydata [.entity, eit$b_fileid];
!
! Add logging parameters only for sinks that currently exist, or
! for sinks that are logging events at the executor node.
!
INCR snk FROM nma$c_snk_con TO nma$c_snk_mon DO
    BEGIN
    IF .nml$gl_prs_flgs [nml$v_prs_esipg] THEN
	BEGIN
	key = 0;
	!
	! If the sink already has an entry in the sink (ESI) permanent
	! database, modify it.
	!
	IF nml$matchrecord (.fid, nml$gq_recbfdsc, key,
			    nml$c_key_sink, 1, snk,
			    0, 0, 0,	! No qualifier
			    recdsc) THEN
	    nml$deflogging (.entity, .snk, 0)
	ELSE
	    !
	    ! If the filter database (EFI) specifies events to be
	    ! logged to this sink on the executor node, modify the
	    ! sink (ESI) database.
	    !
	    BEGIN
	    exec_addr = 0;
	    key = 0;
	    !
	    ! Get the event filters for the executor node from the EFI
	    ! database.  Then search through the source blocks (which
	    ! specify the sink type, source, if any, and filters) to see
	    ! if any of the events are specified for the sink currently
	    ! being processed.  If so, do the define in the ESI database
	    ! for this sink.
	    !
	    IF nml$matchrecord (.fid, nml$gq_recbfdsc, key,
				nma$c_pclo_sin, 2, exec_addr,
				0, 0, 0,	! No qualifier
				recdsc) THEN
		BEGIN
		!
		! Find the events in the permanent database record, and check
		! to see if any of them are being logged to the sink, SNK.  If
		! so, update the permanent database.
		!
		source_blkdsc [dsc$a_pointer] = 0;
		IF nma$searchfld (recdsc,
				  nma$c_pclo_eve,
				  source_blkdsc [dsc$w_length],
				  source_blkdsc [dsc$a_pointer]) THEN
		    BEGIN
		    source_ptr = 0;
		    IF nml$getnxtsnk (source_blkdsc, .snk, source_ptr) THEN
	        	nml$deflogging (.entity, .snk, 0);
		    END;
		END;
	    END;
	END;
    END;
END;				! End of NML$DEFKNOWNLOG

%SBTTL 'NML$DEFLOGGING  Define logging parameters'
GLOBAL ROUTINE NML$DEFLOGGING (ENTITY, SNK, DUM2,
				DUM3, DUM4, DUM5) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Add parameters to the permanent data base entry for the specified
!	logging entity.
!
! FORMAL PARAMETERS:
!
!	ENTITY		Entity type code.
!	SNK		Logging sink type.
!	DUM2-DUM5	Not used.
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS Message parsing flags.
!	NML$GW_EVTSNKADR Sink node address.
!
!--

BEGIN

LOCAL
    sink_node_addr,			! Address of node where events get
					!	logged.
    fid,				! File id code
    msgsize,				! Message size
    key,				! Temporary record key buffer
    owner,				! Search key
    recdsc  : DESCRIPTOR;		! Record descriptor

!
! Decide if the parameter group is for filters (EFI) or sinks (ESI).
!
IF .nml$gl_prs_flgs [nml$v_prs_esipg] THEN
    BEGIN
    nml$defentity (nml$c_sink, 1, snk,
		   0, 0, 0);		! No qualifier for logging.
    RETURN
    END;

nml$ab_msgblock [msb$l_flags] = 0;		! Initialize message flags
fid = .nml$ab_entitydata [nml$c_logging, eit$b_fileid]; ! Get file id
owner = .nml$ab_entitydata [nml$c_logging, eit$w_key];  ! Get search key
!
! If the sink node (node to log the events at) is the executor node,
! store the node's address as zero in the permanent database.
!
IF .nml$gl_prs_flgs [nml$v_prs_exesnk] THEN
    sink_node_addr = 0
ELSE
    sink_node_addr = .nml$gw_evtsnkadr;

key = 0;					   ! Initialize record key
!
! If there is already a record in the event filter (EFI) database for
! this sink node, read it in and modify it.  Otherwise, create a new
! record in the logging database for the sink node.
!
IF NOT nml$matchrecord (.fid,
			nml$gq_recbfdsc,
			key,
			.owner, 2, sink_node_addr,
			0, 0, 0,		! No qualifier.
			recdsc) THEN
    BEGIN
    !
    ! Record not found so create a new one by adding the record owner field.
    ! In the case of the EFI database, the sink node address is the owner
    ! field.
    !
    recdsc [dsc$w_length] = 0;	! Initial descriptor
    recdsc [dsc$a_pointer] = .nml$gq_recbfdsc [dsc$a_pointer] + 2;
    nma$insertfld (nml$k_max_rec_data, .owner, 2, sink_node_addr, recdsc);

    nml$ab_msgblock [msb$l_flags] = msb$m_msg_fld;
    nml$ab_msgblock [msb$l_text] = nml$_recadded;
    END;

!
! Add the event filters to the record.
!
nml_deflogging (.snk, .sink_node_addr, recdsc, key);
!
! Add entity id (sink type code) to entity buffer for NICE response message.
!
nml$q_entbfdsc [dsc$w_length] = 1;
nml$q_entbfdsc [dsc$a_pointer] = nml$t_entbuffer;
nml$t_entbuffer<0,8> = .snk;
!
! Set up NICE response message information to add the entity to the NICE
! response message.
!
nml$ab_msgblock [msb$v_entd_fld] = 1;
nml$ab_msgblock [msb$a_entity] = nml$q_entbfdsc;
!
! Build and send the NICE response message.
!
nml$bld_reply (nml$ab_msgblock, msgsize);
nml$send (nml$ab_sndbuffer, .msgsize);
END;				! End of NML$DEFLOGGING

%SBTTL 'NML_DEFLOGGING  Define entity parameters'
ROUTINE NML_DEFLOGGING (SNK, SNKADR, RECDSC, KEY) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs common DEFINE functions for both singular
!	and plural requests.
!
! FORMAL PARAMETERS:
!
!	SNK		Logging sink type.
!	SNKADR		Sink node address.
!	RECDSC		Address of current record descriptor.
!	KEY		Address of current record key.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

MAP
    snkadr : WORD,
    recdsc : REF DESCRIPTOR;

LOCAL
    fid,				! File id code
    fldsize,
    fldadr,
    status,
    updflg;

fid = .nml$ab_entitydata [nml$c_logging, eit$b_fileid]; ! Get file id
!
! Add event to record.
!
status = nml$addevents (true, .recdsc, .snk, .snkadr, updflg);
IF NOT .status THEN
    RETURN;

IF NOT .updflg THEN
    BEGIN
    nml$ab_msgblock [msb$l_flags] = msb$m_msg_fld;
    nml$ab_msgblock [msb$b_code]  = nma$c_sts_mpr;
    nml$ab_msgblock [msb$l_text]  = nml$_badevtupd;
    RETURN
    END;
!
! If event field was added successfully, then write the record back to file.
!
nml$writerecord (.fid, .snk, .key, .recdsc, 0);
nml$ab_msgblock [msb$b_code] = nma$c_sts_suc;

END;				! End of NML_DEFLOGGING

%SBTTL 'NML$ADDEVENTS  Add events to the volatile data base'
GLOBAL ROUTINE NML$ADDEVENTS (FCT, RECDSC, SNK, SNKADR, UPDFLG) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the filters specified in the SET command
!	to the volatile data base entry for the specified sink node
!	and sink type.  If an entry does not exist then a new one
!	is created.
!
! FORMAL PARAMETERS:
!
!	FCT		Function code. (TRUE=>set, FALSE=>clear).
!	RECDSC		Descriptor of temporary data base record
!			containing event filters to be added.
!	SNK		Logging sink type.
!	SNKADR		Sink node address.
!	UPDFLG		Address of update flag.  (TRUE=>add,
!			FALSE=>delete).
!
! IMPLICIT INPUTS:
!
!	NML$GB_EVTSRCTYP Event source type code.
!	NML$GQ_EVTSRCDSC Descriptor of event source id string.
!	NML$GQ_EVTMSKDSC Descriptor of event filter mask.
!	NML$GW_EVTCLASS	Event class code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

MAP
    recdsc : REF DESCRIPTOR,
    snkadr : WORD;

OWN
    evtbuf : VECTOR [nml$k_recbflen, BYTE];
BIND
    evtdsc = UPLIT (nml$k_recbflen, evtbuf) : DESCRIPTOR;

LOCAL
    fldadr,
    fldsize,
    prmdsc : DESCRIPTOR,
    status;
!
! Get the event field from the record.  If one does not exist then create
! a new one.
!
fldadr = 0;
status = nma$searchfld (.recdsc,
			    nma$c_pclo_eve,
			    fldsize,
			    fldadr);
IF .status THEN
    BEGIN
    CH$MOVE (.fldsize, .fldadr, .evtdsc [dsc$a_pointer]);
    prmdsc [dsc$w_length] = .fldsize;
    prmdsc [dsc$a_pointer] = .evtdsc [dsc$a_pointer];
    END
ELSE
    BEGIN
    prmdsc [dsc$w_length] = 0;
    prmdsc [dsc$a_pointer] = .evtdsc [dsc$a_pointer];
    END;
!
! Add the filters to those found in the temporary data base record.
!
status = nml$addfilters (.fct,
			     evtdsc,
			     .snk,
			     .nml$gb_evtsrctyp,
			     nml$gq_evtsrcdsc,
			     .nml$gw_evtclass,
			     .nml$gq_evtmskdsc [dsc$w_length],
			     .nml$gq_evtmskdsc [dsc$a_pointer],
			     prmdsc);

IF NOT .status THEN
    BEGIN
    nml$ab_msgblock [msb$l_flags] = msb$m_msg_fld;
    nml$ab_msgblock [msb$b_code]  = nma$c_sts_mpr;
    nml$ab_msgblock [msb$l_text]  = nml$_badevtupd;
    RETURN .status;
    END;
!
! If the filters were successfully added then replace the temporary
! data base entry with the modified one.
!
status = nml$savevents (nml$k_max_rec_data,
			    .prmdsc [dsc$w_length],
			    .prmdsc [dsc$a_pointer],
			    .recdsc);
IF NOT .status THEN
    RETURN .status;
!
! If there are still filters remaining then indicate that they should be 
! replaced in the data base.
!
IF .prmdsc [dsc$w_length] NEQ 0 THEN
    .updflg = TRUE
ELSE
    .updflg = FALSE;

RETURN nml$_sts_suc

END;				! End of NML$ADDEVENTS

%SBTTL 'NML$SAVEVENTS  Save events'
GLOBAL ROUTINE NML$SAVEVENTS (BUFSIZE, LEN, ADR, RTNDSC) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine stores events in a structure resembling a permanent 
!	data base record.  It is used for both volatile and permanent
!	event filter modifications.
!
! FORMAL PARAMETERS:
!
!	BUFSIZE		Maximum size of buffer.
!	LEN		Length of events parameter.
!	ADR		Address of events parameter string.
!	RTNDSC		Descriptor of resulting data.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

MAP
    rtndsc : REF DESCRIPTOR;

LOCAL
    status;

status = nma$insertfld (.bufsize,
			    nma$c_pclo_eve,
			    .len,
			    .adr,
			    .rtndsc);
IF NOT .status THEN
    BEGIN
    nml$ab_msgblock [msb$l_flags] = msb$m_msg_fld;
    nml$ab_msgblock [msb$b_code]  = nma$c_sts_mpr;
    nml$ab_msgblock [msb$l_text]  = nml$_intevtovf;
    END;

RETURN .status

END;				! End of NML$SAVEVENTS

%SBTTL 'NML$GETRECOWNER  Get record owner string'
GLOBAL ROUTINE NML$GETRECOWNER (RECDSC, ENTITY, BUFDSC, RESLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the entity id string based on information supplied
!	by the current permanent data base record.
!
! FORMAL PARAMETERS:
!
!	RECDSC		Address of the record descriptor.
!	ENTITY		Entity type code.
!	BUFDSC 		Address of owner string buffer descriptor.
!	RESLEN 		Address of the resulting string length.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The buffer descriptor pointed to by BUFDSC describes the record
!	owner string.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If no owner field is present for the record then an error
!	indicating invalid file contents (NML$_STS_FCO) is returned
!	otherwise success (NML$_STS_SUC) is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

MAP
    recdsc : REF DESCRIPTOR,	! Descriptor of record data
    bufdsc : REF DESCRIPTOR;	! Descriptor of entity buffer

LOCAL
    code     : WORD,		! Entity id parameter code
    fldsize,			! Temporary record owner string length
    fldadr,			! Temporary record owner string pointer
    ptr,			! Output string pointer
    msgsize;			! Message size

ptr = .bufdsc [dsc$a_pointer];
!
! Get entity information.
!
code = .nml$ab_entitydata [.entity, eit$w_key]; ! Permanent database key

SELECTONEU .entity OF
    SET
    [nml$c_node,
     nml$c_nodebyname,
     nml$c_executor]:
	BEGIN
	fldadr = 0;			! Search all fields
	IF nma$searchfld (.recdsc,
			      nma$c_pcno_add,
			      fldsize,
			      fldadr) THEN
	    BEGIN
	    !
	    ! If talking to a Phase III node, clear area numbers that match
	    ! the executors, so they are displayed intelligebly on the Phase
	    ! III system.  Node numbers outside the executor's area will
	    ! not look sensible, but they will be unique.
	    !
	    IF CH$RCHAR (nml$gb_ncp_version) LEQ 3 THEN
		BEGIN
		BIND node_addr = fldadr: REF BBLOCK;

		IF .node_addr [nma$v_area] EQL
			.nml$gw_perm_exec_addr [nma$v_area] THEN
		    node_addr [nma$v_area] = 0;
		END;
	    ptr = CH$MOVE (2, .fldadr, .ptr);
	    END
	ELSE
	    BEGIN
	    (.ptr)<0,16> = 0;		! Zero node address
	    ptr = .ptr + 2;		! Advance pointer
	    END;
	code = nma$c_pcno_nna;		! Look for name
	END;

    [nml$c_loopnode]:
	BEGIN
	code = nma$c_pcno_nna;		! Look for name
	(.ptr)<0,16> = 0;		! Loop node address is zero
	ptr = .ptr + 2;			! Advance pointer
	END;
    TES;

fldadr = 0;				! Search all fields
IF nma$searchfld (.recdsc, .code, fldsize, fldadr) THEN
    BEGIN
    SELECTONEU .entity OF
	SET
	[nml$c_node,
	 nml$c_nodebyname,
	 nml$c_loopnode,
	 nml$c_line,
	 nml$c_circuit,
	 nml$c_object,
	 nml$c_x25_serv,
	 nml$c_trace,
	 nml$c_x29_serv]:
	    CH$WCHAR_A (.fldsize, ptr); ! Add count

	[nml$c_executor]:
	    CH$WCHAR_A (.fldsize OR nma$m_ent_exe, ptr);

	[nml$c_x25_access]:
	    BEGIN
	    $MOVE_ASCIC ('X25-ACCESS', ptr);
	    ptr = CH$MOVE (2, UPLIT (nma$c_pcxa_net), .ptr);
	    CH$WCHAR_A (nma$m_pty_asc, ptr);
	    CH$WCHAR_A (.fldsize, ptr); ! Add count
	    END;

	[nml$c_prot_net,
	 nml$c_prot_dte,
	 nml$c_prot_grp]:
	    BEGIN
	    $MOVE_ASCIC ('X25-PROTOCOL', ptr);
	    ptr = CH$MOVE (2, code, .ptr);
	    CH$WCHAR_A (nma$m_pty_asc, ptr);
	    CH$WCHAR_A (.fldsize, ptr); ! Add count
	    END;

	[nml$c_x25_serv_dest,
	 nml$c_tracepnt,
	 nml$c_x29_serv_dest,
	 nml$c_ni_config]:
	    BEGIN
	    SELECTONEU .ENTITY OF
		SET
		[nml$c_x25_serv_dest]: $MOVE_ASCIC ('X25-SERVER', ptr);
		[nml$c_tracepnt]:      $MOVE_ASCIC ('X25-TRACE', ptr);
		[nml$c_x29_serv_dest]: $MOVE_ASCIC ('X29-SERVER', ptr);
		[nml$c_ni_config]: $MOVE_ASCIC ('CONFIGURATOR', ptr);
		TES;
	    ptr = CH$MOVE (2, code, .ptr);
	    CH$WCHAR_A (nma$m_pty_asc, ptr);
	    CH$WCHAR_A (.fldsize, ptr); ! Add count
	    END;
	TES;

    !
    ! If it will fit, move the entity string into the buffer for the
    ! record owner.  The contents of this buffer are later used as
    ! the entity ID in the NICE response message.
    !
    IF .bufdsc [dsc$w_length] GEQU
		(.fldsize + (.ptr - .bufdsc [dsc$a_pointer])) THEN
	ptr = CH$MOVE (.fldsize, .fldadr, .ptr);

    END
ELSE
   SELECTONEU .entity OF
	SET
	[nml$c_node,
	 nml$c_nodebyname]:
	    CH$WCHAR_A (0, ptr);

	[nml$c_executor]:
	    ch$wchar_A (nma$m_ent_exe, ptr);

	[OTHERWISE] :
	    BEGIN
	    nml$ab_msgblock [msb$l_flags] =
		    msb$m_det_fld OR msb$m_msg_fld; ! Set message flags
	    nml$ab_msgblock [msb$b_code] = nma$c_sts_fco;
	    nml$ab_msgblock [msb$w_detail] = nma$c_fopdtl_pdb;
	    nml$ab_msgblock [msb$l_text] = nml$_norecown;
	    nml$bld_reply (nml$ab_msgblock, msgsize); ! Build message
	    $SIGNAL_MSG (nml$ab_sndbuffer, .msgsize); ! Signal it
	    END;
	TES;

.reslen = .ptr - .bufdsc [dsc$a_pointer];
RETURN nml$_sts_suc
END;				! End of NML$GETRECOWNER

END					! End of module

ELUDOM
