MODULE LIB$GETJPI ( %TITLE 'Get Job/Process Information'
		IDENT = '1-003'		! File: LIBGETJPI.B32 Edit: SBL1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library
!
! ABSTRACT:
!
!	LIB$GETJPI obtains a specified item of Job/Process information
!	and formats it in an appropriate manner.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 11-Jan-1983
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 11-Jan-1983
! 1-002 - Change format code names to LIB$K_FMT_.  SBL 11-Mar-1983
! 1-003 - Change string length to 512.  SBL 11-Mar-1983
!--


%SBTTL 'Declarations'
!
! PROLOGUE FILE:
!

REQUIRE 'RTLIN:LIBPROLOG';			! Switches, PSECTS, macros

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$GETJPI;					! Get Job/Process Information

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNALS:
!

EXTERNAL ROUTINE
    LIB$$GETJPI,				! Internal routine
    LIB$ANALYZE_SDESC_R2: LIB$ANALYZE_SDESC_R2$LINKAGE,	! Get length and pointer
    LIB$GET_EF,					! Allocate event flag number
    LIB$FREE_EF: NOVALUE,			! Free event flag number
    LIB$SCOPY_R_DX6: LIB$SCOPY_R_DX6$LINKAGE;	! Copy string by reference.

EXTERNAL LITERAL
    LIB$_INVARG,				! Invalid argument
    LIB$_STRTRU;				! String truncated

%SBTTL 'LIB$GETJPI - Get Job/Process Information'
GLOBAL ROUTINE LIB$GETJPI (
    ITEM_CODE: REF VECTOR [, WORD],	! Code of desired item
    PROCESS_ID: REF VECTOR [, LONG],	! Process identification
    PROCESS_NAME: REF BLOCK [, BYTE],	! Process name descriptor
    OUT_VALUE: REF VECTOR [, LONG],	! Output numeric value
    OUT_STRING: REF BLOCK [, BYTE],	! Output string descriptor
    OUT_LEN: REF VECTOR [, WORD]	! Output string length
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	LIB$GETJPI provides a simplified interface to the $GETJPI system
!	service. It provides accounting, status and identification
!	information about a specified process. 
!
!	LIB$GETJPI provides the following features in addition to those
!	provided by the $GETJPI system service: 
!
!	    Instead of a list of item descriptors, which may be
!	    difficult to construct in high-level languages, the single
!	    item desired is specified as an integer code which is passed
!	    by reference.  Results are written to separate arguments. 
!
!	    For items which return numeric values, LIB$GETJPI can
!	    optionally provide a formatted string interpretation of the
!	    value.  For example, if the process UIC is requested,
!	    LIB$GETJPI can return the UIC formatted as "[g,m]". 
!
!	    For string arguments, all string classes supported by the
!	    Run-Time Library are understood. 
!
!	    Calls to LIB$GETJPI are synchronous.  LIB$GETJPI calls
!	    LIB$GET_EF to allocate a local event flag number for
!	    synchronization. 
!
!	LIB$GETJPI does not provide the ability to obtain more than one
!	item of information in a single call.  See the description of the
!	$GETJPI system service for more information. 
!
! CALLING SEQUENCE:
!
!	ret-status.wlc.v = LIB$GETJPI (
!		item-code.rw.r,
!		[process-id.mlu.r],
!		[process-name.rt.dx],
!		[out-value.wz.r]
!		[, [out-string.wt.dx]
!		[, [out-len.ww.r] ]])
!
! FORMAL PARAMETERS:
!
!  item-code
!	A longword integer item identifier code that specifies which item
!	of information you are requesting.  All valid $GETJPI item codes,
!	whose names begin with JPI$_, are accepted.
!
!  process-id
!	A longword specifying the process identification of the
!	process for which information is to be returned.  If not
!	specified, process-name is used. The longword is updated to
!	contain the process identification actually used, which may
!	be different than what was originally specified if
!	process-name is specified or if "wild card process
!	searching" is used. 
!
!  process-name
!	A string specifying the name of the process for which
!	information is to be returned.  If not specified, process-id
!	is used.  If neither process-name or process-id are
!	specified, the caller's process is used.  See the
!	description of the process-id argument for more information.
!
!  out-value
!	A longword or quadword into which is placed the numeric
!	value of the information requested. If an item only returns
!	a string value, this parameter is ignored. 
!
!  out-string
!	A string into which is placed the string representation of
!	the information requested. If out-string is not specified,
!	and the value returned has only a string representation, the
!	error status LIB$_INVARG is returned. 
!
!  out-len
!	A word integer into which is placed the number of significant
!	characters written to out-string, not including blank padding
!	or truncated characters.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_STRTRU	String truncated.  This is an alternate success status.
!	LIB$_INSEF	Insufficient event flags
!	LIB$_INVSTRDES	Invalid string descriptor
!	LIB$_WRONUMARG	Wrong number of arguments
!	LIB$_xxx	Any error status from LIB$SCOPY_R_DX
!	SS$_BADPARAM	The item code is not recognized as valid.
!	SS$_xxx		Any error status from $GETJPI
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	RET_STRING: VECTOR [512, BYTE],		! Local string for value
	RET_LENGTH: WORD,			! Length of RET_STRING
	RET_NUMBER: VECTOR [2, LONG],		! Local quadword for value
	RET_TYPE,				! Returned type code
	LCL_PRCNAM_DSC: BLOCK [8, BYTE],	! Local descriptor for PRCNAM
	PRCNAM_DSC_ADR,				! Address of PRCNAM descriptor
	EVENT_FLAG,				! Event flag number
	STR_STATUS, EF_STATUS, JPI_STATUS, COPY_STATUS;	! Return statuses

    BUILTIN
	NULLPARAMETER;

    !+
    ! Validate argument count.
    !-

    $LIB$VALIDATE_ARGCOUNT (4,6);

    !+
    ! Build static descriptor for PROCESS_NAME, if any.
    !-

    IF NULLPARAMETER (3)
    THEN
	PRCNAM_DSC_ADR = 0	! Omitted
    ELSE
	BEGIN
	LCL_PRCNAM_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	LCL_PRCNAM_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
	STR_STATUS = LIB$ANALYZE_SDESC_R2 (PROCESS_NAME [0,0,0,0];
	    LCL_PRCNAM_DSC [DSC$W_LENGTH], LCL_PRCNAM_DSC [DSC$A_POINTER]);
	IF NOT .STR_STATUS
	THEN
	    RETURN .STR_STATUS;
	PRCNAM_DSC_ADR = LCL_PRCNAM_DSC;
	END;

    !+
    ! Allocate an event flag number to use for the $GETJPI.
    !-

    EF_STATUS = LIB$GET_EF (EVENT_FLAG);
    IF NOT .EF_STATUS
    THEN
	RETURN .EF_STATUS;

    !+
    ! Call LIB$$GETJPI to do the work.
    !-

    JPI_STATUS = LIB$$GETJPI (
	.ITEM_CODE [0],
	RET_STRING,
	RET_NUMBER,
	RET_LENGTH,
	RET_TYPE,
	.EVENT_FLAG,
	PROCESS_ID [0],
	.PRCNAM_DSC_ADR);

    !+
    ! Free the event flag.
    !-

    LIB$FREE_EF (EVENT_FLAG);

    !+
    ! Check for errors.
    !-

    IF NOT .JPI_STATUS
    THEN
	RETURN .JPI_STATUS;

    !+
    ! Copy the numeric value, if desired.
    !-

    IF OUT_VALUE [0] NEQA 0
    THEN
	BEGIN
	IF .RET_TYPE GTRU LIB$K_FMT_MAXSTRING	! Is it a number?
	THEN
	    BEGIN
	    OUT_VALUE [0] = .RET_NUMBER [0];
	    IF .RET_TYPE EQL LIB$K_FMT_DATE OR
	       .RET_TYPE EQL LIB$K_FMT_PRIVILEGE
	    THEN
		OUT_VALUE [1] = .RET_NUMBER [1]; ! Store second longword
	    END;
	END;

    !+
    ! Store string value if desired.
    !-

    IF NOT NULLPARAMETER (5)
    THEN
	BEGIN
	COPY_STATUS = LIB$SCOPY_R_DX6 (.RET_LENGTH, RET_STRING,
	    OUT_STRING [0,0,0,0]);
	IF NOT NULLPARAMETER (6)
	THEN
	    BEGIN
	    !+
	    ! Store result string length.
	    !-
	    OUT_LEN [0] = .RET_LENGTH;
	    IF .COPY_STATUS EQLU LIB$_STRTRU
	    THEN
		LIB$ANALYZE_SDESC_R2 (OUT_STRING [0,0,0,0]; OUT_LEN [0]);
	    END;
	RETURN .COPY_STATUS;
	END
    ELSE IF .RET_TYPE LEQU LIB$K_FMT_MAXSTRING
    THEN
	RETURN LIB$_INVARG;	! Only string value, but nothing to return it in

    RETURN SS$_NORMAL;	! Success

    END;					! End of routine LIB$GETJPI

END						! End of module LIB$GETJPI

ELUDOM
