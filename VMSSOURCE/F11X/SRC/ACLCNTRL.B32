MODULE ACLCNTRL (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This module contains the routines to manipulate the Access
!	Control Lists and Access Control Entries.  This includes all
!	of the functionality necessary for the ACL editing.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines. This routine must be executed
!	in kernel mode.
!
!--
!
!
! AUTHOR:	L. Mark Pilant,		CREATION DATE:	30-Jun-1982  9:30
!
! MODIFIED BY:
!
!	V03-032	LMP0306		L. Mark Pilant,		29-Aug-1984  9:24
!		Disallow ACLs on the index file.
!
!	V03-031	ACG0446		Andrew C. Goldstein,	21-Aug-1984  22:01
!		Clean out ACL residue possibly left by other file system
!		versions
!
!	V03-030	LMP0284		L. Mark Pilant,		25-Jul-1984  14:53
!		Move ACL_INIT_QUEUE to ACLSUBR.  Also, only initialize the
!		queue if it is being modified.
!
!	V03-029	LMP0275		L. Mark Pilant,		19-Jul-1984  13:09
!		If the ACL queue is uninitialized in the ORB (in the FCB),
!		it is necessary to initialize it before any ACL operations
!		can take place.
!
!	V03-028	ACG0437		Andrew C. Goldstein,	13-Jul-1984  16:43
!		Remove ACL_COPYACL call to ACL_BUILDACL (to a higher level)
!
!	V03-027	LMP0243		L. Mark Pilant,		27-Apr-1984  14:23
!		Allow READACE to bypass BADACL.  Also, don't abort ACL attr
!		processing if an error occurs;  only disallow modifications.
!
!	V03-026	ACG0415		Andrew C. Goldstein,	4-Apr-1984  10:07
!		Break out common ACL subroutines; fix space allocation of
!		ACL in last header used; fix space left for map pointer
!		left in first header. Check for bad ACL on most operations.
!
!	V03-025	LMP0216		L. Mark Pilant,		22-Mar-1984  12:06
!		Correct a bug introduced in LMP0174 that caused the DEFAULT
!		bit in the ACE flags to be cleared when propagating the ACL
!		for a directory file. Also make rest of global storage based.
!		Rename locals to avoid conflicts with globals.
!
!	V03-024	LMP0210		L. Mark Pilant,		10-Mar-1984  10:36
!		Add support for the ACL status field.
!
!	V03-023	CDS0003		Christian D. Saether	 7-Mar-1984
!		Don't mark FILE_HEADER dirty in ACL_BUILDACL if
!		the checksum was already OK.
!
!	V03-022	CDS0002		Christian D. Saether	27-Dec-1983
!		Use BIND_COMMON macro.  Adjust routine and external
!		declarations.
!
!	V03-021	CDS0001		Christian D. Saether	12-Dec-1983
!		Move all OWN storage to COMMON module to reduce xqp
!		to single image section.
!
!	V03-020	LMP0174		L. Mark Pilant,		1-Dec-1983  14:25
!		Change the name of the routine to propagate default ACEs.
!		Also, make it a little more general purpose in terms of
!		the types of propagation it is able to do.
!
!	V03-019	LMP0159		L. Mark Pilant,		30-Sep-1983  9:29
!		Use the correct base address when clearing out the ACL
!		portion of the file header during a build operation.
!
!	V03-018	LMP0149		L. Mark Pilant,		16-Sep-1983  11:25
!		Make sure the header is turned back to the primary header
!		after a build ACL operation.
!
!	V03-017	LMP0151		L. Mark Pilant,		12-Sep-1983  9:31
!		Force ALARM and AUDIT ACEs to be positioned at the front of
!		the ACL.
!
!	V03-016	LMP0130		L. Mark Pilant,		28-Jul-1983  10:29
!		Correct a bug that caused an accvio if the last header in the
!		chain was completely filled with map pointers, and an ACL was
!		added.
!
!	V03-15	LMP0105		L. Mark Pilant,		24-Apr-1983  22:04
!		Correct a bug in the segment size calculation when saving
!		protected ACEs during a delete ACL operation.
!
!	V03-014	LMP0102		L. Mark Pilant,		18-Apr-1983  16:57
!		Return an error if an attempt is made to modify an entry in
!		a non-existant ACL.
!
!	V03-013	LMP0097		L. Mark Pilant,		30-Mar-1983  16:18
!		Remove reference to unneeded require file.
!
!	V03-012	LMP0088		L. Mark Pilant,		17-Mar-1983  12:28
!		Add support for reading a single ACE.
!
!	V03-011	LMP0079		L. Mark Pilant,		11-Feb-1983  8:56
!		Correct a problem that caused the system to crash if the
!		ACL builder needed to create an extension header.
!
!	V03-010	LMP0073		L. Mark Pilant,		20-Jan-1983  10:07
!		Use the reserved area offset as the upper limit to the
!		size of the ACL segment in the header.  Also, modify the
!		usage of the ACL context longword in the FIB. (0:23 represent
!		the ACE number and 24:31 represents the type of the last
!		ACE found.)
!
!	V03-009	LMP0068		L. Mark Pilant,		21-Dec-1982  11:57
!		Eliminate the code in the ACL building routine that builds
!		the in-core ACL from the file headers as it is now done in
!		the FCB initialization routine FILL_FCB.
!
!	V03-008	LMP0064		L. Mark Pilant,		9-Dec-1982  16:45
!		Change the manner in which errors are signaled by the ACL
!		handling routines.  If an error occurs, the ACE size is
!		set to zero (along with the type code), and the error
!		code is returned in the flag field.
!
!	V03-007	LMP0058		L. Mark Pilant,		9-Nov-1982  13:00
!		Modify the ACL building routine to fix some boundary
!		conditions.  In addition, get the FIB address from the
!		correct place in the dispatcher.
!
!	V03-006	LMP0054		L. Mark Pilant,		25-Oct-1982  17:15
!		Add an attribute to return the length of an ACL.
!
!	V03-005	LMP0048		L. Mark Pilant,		5-Oct-1982  8:55
!		Modify the ACL building routine to correctly build the file
!		header ACL from a null ACL.
!
!	V03-004	LMP0046		L. Mark Pilant,		24-Sep-1982  8:55
!		Correct various boundary conditions.  Also modify the build
!		routine to pad out the ACL area with nulls.
!
!	V03-003	LMP0042		L. Mark Pilant,		9-Sep-1982  16:50
!		Modify the ACL builder to point to the primary header after
!		building the ACL.  This is to fix a problem that caused the
!		last extension header to be checksumed instead of the primary
!		when writing attributes.
!
!	V03-002	LMP0041		L. Mark Pilant		7-Sep-1982  11:55
!		Correct a problem that caused the system to crash when
!		building the ACL for a multi-header file on a lookup.
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	ACL_DISPATCH	: L_NORM,		! ACL dispatch routine
	ACL_BUILDACL	: L_NORM,		! Build the ACL structures
	ACL_COPYACL	: L_NORM,		! Propagate ACEs between file versions
	BUILD_HANDLER	: NOVALUE;		! Exception handler for build

EXTERNAL ROUTINE
	ACL_INIT_QUEUE,				! Initialize ACL queue
	ACL_ADDENTRY,				! Add an Access Control Entry
	ACL_DELENTRY,				! Delete an ACE
	ACL_MODENTRY,				! Modify an ACE
	ACL_FINDENTRY,				! Locate an ACE
	ACL_FINDTYPE,				! Locate a specific type ACE
	ACL_DELETEACL,				! Delete the entire ACL
	ACL_READACL,				! Read the entire ACL
	ACL_ACLLENGTH,				! Return the length of the ACL
	ACL_READACE,				! Read a single ACE
	ACL_LOCATEACE,				! Find ACE by number
	ALLOC_PAGED	: L_NORM,		! Allocate system dynamic memory
	CHECKSUM	: L_NORM,		! Checksum the modified header
	DALLOC_PAGED	: L_NORM,		! Deallocate system dynamic memory
	EXTEND_HEADER	: L_NORM,		! Extend the present file header
	NEXT_HEADER	: L_NORM,		! Read next extension header
	READ_HEADER	: L_NORM,		! Read header specified by FCB
	SEARCH_FCB	: L_NORM,		! Search the FCB list
	SWITCH_VOLUME	: L_NORM,		! Set the corrent volume
	MARK_DIRTY	: L_NORM;		! Mark buffer for writeback

GLOBAL ROUTINE ACL_DISPATCH (CODE, ADDRESS, COUNT, ACE) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called whenever any ACL processing is to be done.
!	The code is checked for validity and if valid, the appropriate routine
!	is called to manipulate the ACL's and ACE's.
!
! CALLING SEQUENCE:
!	ACL_DISPATCH (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: attribute code to determine the action to perform
!	ARG2: address of the header ACL area, 0 if none
!	ARG3: size of the attribute
!	ARG4: address of the user Access Control Entry
!
! IMPLICIT INPUTS:
!	IO_PACKET: address of the I/O packet for this operation
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1 if successful
!	0 otherwise
!
! SIDE EFFECTS:
!	Appropriate action routine called, possible header modification may
!	result.
!
!--

BEGIN

BIND_COMMON;

MAP
	ADDRESS		: REF BBLOCK,		! Address of the header area
	ACE		: REF BBLOCK;		! Address of the user ACE

LOCAL
	LOCAL_STATUS;				! Status of attribute processing

! Do some initial checking to see if the request can be blown away up front.

LOCAL_STATUS = SS$_NORMAL;
CASE .CODE + 1 FROM ATR$C_ADDACLENT TO ATR$C_READACE OF
SET
    [ATR$C_ADDACLENT,
     ATR$C_DELACLENT,
     ATR$C_MODACLENT,
     ATR$C_FNDACLENT,
     ATR$C_FNDACLTYP]:
	BEGIN
	IF .PRIMARY_FCB[FCB$V_BADACL] THEN LOCAL_STATUS = SS$_BADACL;
	IF .PRIMARY_FCB[FCB$W_FID_NUM] EQL FID$C_INDEXF
	AND .PRIMARY_FCB[FCB$B_FID_NMX] EQL 0
	THEN LOCAL_STATUS = SS$_NOACLSUPPORT;
	END;

    [ATR$C_DELETEACL]:
	BEGIN
	IF .PRIMARY_FCB[FCB$W_FID_NUM] EQL FID$C_INDEXF
	AND .PRIMARY_FCB[FCB$B_FID_NMX] EQL 0
	THEN LOCAL_STATUS = SS$_NOACLSUPPORT;
	END;

    [INRANGE]:	0
TES;

! Dispatch to the appropriate action routine based upon the attribute code.

IF .LOCAL_STATUS
THEN
    BEGIN
    LOCAL_STATUS = (
	CASE .CODE + 1 FROM ATR$C_ADDACLENT TO ATR$C_READACE OF
	SET
	    [ATR$C_ADDACLENT]:
		BEGIN
		IF NOT .BBLOCK[PRIMARY_FCB[FCB$R_ORB], ORB$V_ACL_QUEUE]
		THEN ACL_INIT_QUEUE (PRIMARY_FCB[FCB$R_ORB]);
		IF .CURRENT_FIB[FIB$L_ACL_STATUS]
		THEN ACL_ADDENTRY (PRIMARY_FCB[FCB$L_ACLFL], CURRENT_FIB[FIB$L_ACLCTX], .COUNT, .ACE)
		ELSE 1
		END;

	    [ATR$C_DELACLENT]:
		IF NOT .BBLOCK[PRIMARY_FCB[FCB$R_ORB], ORB$V_ACL_QUEUE]
		THEN SS$_ACLEMPTY
		ELSE (IF .CURRENT_FIB[FIB$L_ACL_STATUS]
		      THEN ACL_DELENTRY (PRIMARY_FCB[FCB$L_ACLFL], CURRENT_FIB[FIB$L_ACLCTX], .COUNT, .ACE)
		      ELSE 1);

	    [ATR$C_MODACLENT]:
		IF NOT .BBLOCK[PRIMARY_FCB[FCB$R_ORB], ORB$V_ACL_QUEUE]
		THEN SS$_ACLEMPTY
		ELSE (IF .CURRENT_FIB[FIB$L_ACL_STATUS]
		      THEN ACL_MODENTRY (PRIMARY_FCB[FCB$L_ACLFL], CURRENT_FIB[FIB$L_ACLCTX], .COUNT, .ACE)
		      ELSE 1);

	    [ATR$C_FNDACLENT]:
		IF NOT .BBLOCK[PRIMARY_FCB[FCB$R_ORB], ORB$V_ACL_QUEUE]
		THEN SS$_ACLEMPTY
		ELSE ACL_FINDENTRY (PRIMARY_FCB[FCB$L_ACLFL], CURRENT_FIB[FIB$L_ACLCTX], .COUNT, .ACE, 0);

	    [ATR$C_FNDACLTYP]:
		IF NOT .BBLOCK[PRIMARY_FCB[FCB$R_ORB], ORB$V_ACL_QUEUE]
		THEN SS$_ACLEMPTY
		ELSE ACL_FINDTYPE (PRIMARY_FCB[FCB$L_ACLFL], CURRENT_FIB[FIB$L_ACLCTX], .COUNT, .ACE, 0);

	    [ATR$C_DELETEACL]:
		IF NOT .BBLOCK[PRIMARY_FCB[FCB$R_ORB], ORB$V_ACL_QUEUE]
		THEN SS$_NORMAL
		ELSE (IF .CURRENT_FIB[FIB$L_ACL_STATUS]
		      THEN ACL_DELETEACL (PRIMARY_FCB[FCB$L_ACLFL], CURRENT_FIB[FIB$L_ACLCTX])
		      ELSE 1);

	    [ATR$C_READACL]:
		IF NOT .BBLOCK[PRIMARY_FCB[FCB$R_ORB], ORB$V_ACL_QUEUE]
		THEN SS$_ACLEMPTY
		ELSE ACL_READACL (PRIMARY_FCB[FCB$L_ACLFL], CURRENT_FIB[FIB$L_ACLCTX], .COUNT, .ACE);

	    [ATR$C_ACLLENGTH]:
		IF NOT .BBLOCK[PRIMARY_FCB[FCB$R_ORB], ORB$V_ACL_QUEUE]
		THEN
		    BEGIN
		    CH$FILL (0, .COUNT, .ACE);
		    SS$_NORMAL
		    END
		ELSE ACL_ACLLENGTH (PRIMARY_FCB[FCB$L_ACLFL], CURRENT_FIB[FIB$L_ACLCTX], .COUNT, .ACE);

	    [ATR$C_READACE]:
		IF NOT .BBLOCK[PRIMARY_FCB[FCB$R_ORB], ORB$V_ACL_QUEUE]
		THEN SS$_ACLEMPTY
		ELSE ACL_READACE (PRIMARY_FCB[FCB$L_ACLFL], CURRENT_FIB[FIB$L_ACLCTX], .COUNT, .ACE);


	    [INRANGE]:	SS$_BADPARAM;

	TES);
    END;

IF .CURRENT_FIB[FIB$L_ACL_STATUS]
THEN CURRENT_FIB[FIB$L_ACL_STATUS] = .LOCAL_STATUS;

RETURN 1;

END;						! End of routine ACL_DISPATCH

GLOBAL ROUTINE ACL_BUILDACL (FIRST_FCB) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine, builds the file header ACL from the in core ACL.
!
!	It should be noted that during the time that the headers are being
!	written, should the system crash, the ACL in the headers will be
!	corrupted.
!
! CALLING SEQUENCE:
!	ACL_BUILDACL (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: Address of the first FCB segment (this is usually the same as
!	      PRIMARY_FCB)
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1 if successful
!	0 otherwise
!
! SIDE EFFECTS:
!	The file headers are modified to reflect the state of the current
!	in core ACL.
!
!--

BEGIN

MAP
	FIRST_FCB	: REF BBLOCK;		! Address of the first FCB segment

BIND_COMMON;

LOCAL
	ACL_POINTER	: REF BBLOCK,		! Pointer to current ACL segment
	ACE_POINTER	: REF BBLOCK,		! Pointer to current ACE
	ACE		: REF BBLOCK,		! Address of current ACE in header
	ACL_LENGTH,				! Size of header segment ACL
	FCB		: REF BBLOCK,		! FCB segment address
	HEADER		: REF BBLOCK,		! Address of primary header
	NEW_HEADER	: REF BBLOCK,		! Address of extension header
	FIRST_ACE;				! True if first ACE in header

! Set up the exception handler in case the header reading routine have trouble.

BEGIN
BUILTIN FP;
.FP = BUILD_HANDLER;
END;

! Checksum the current file header in case it has been modified.

IF .FILE_HEADER NEQ 0
THEN
    IF NOT CHECKSUM (.FILE_HEADER)
    THEN MARK_DIRTY (.FILE_HEADER);

! Get the first file header.

FCB = .FIRST_FCB;
IF NOT .BBLOCK[FCB[FCB$R_ORB], ORB$V_ACL_QUEUE] THEN RETURN 1;
NEW_HEADER = HEADER = READ_HEADER (0, .FCB);

! Build the file header ACL from the in core version. Set up on the
! first header and the ACL listhead. Note that in the first header,
! we guarantee space for at least one maximal length map pointer.
! The contiguous files managed by the file system (directories, etc.)
! depend on the availability of this map pointer.

IF .FIRST_FCB[FCB$L_ACLFL] NEQA FIRST_FCB[FCB$L_ACLFL]
THEN
    BEGIN
    ACL_POINTER = .FIRST_FCB[FCB$L_ACLFL];
    ACE_POINTER = ACL_POINTER[ACL$L_LIST];
    HEADER[FH2$B_ACOFFSET] = .HEADER[FH2$B_RSOFFSET];
    ACL_LENGTH = (.HEADER[FH2$B_RSOFFSET] -
		  .HEADER[FH2$B_MPOFFSET] -
		  .HEADER[FH2$B_MAP_INUSE]) * 2;
    ACE = .HEADER + .HEADER[FH2$B_RSOFFSET] * 2 - .ACL_LENGTH;
    IF .HEADER[FH2$B_MAP_INUSE] LSSU FM2$C_LENGTH3/2
    THEN
	BEGIN
	ACE = CH$FILL (0, FM2$C_LENGTH3 - .HEADER[FH2$B_MAP_INUSE]*2, .ACE);
	ACL_LENGTH = .ACL_LENGTH - (FM2$C_LENGTH3 - .HEADER[FH2$B_MAP_INUSE]*2);
	END;
    FIRST_ACE = 1;

! Scan through the headers until we find one with sufficient free space
! to hold the next ACE.

    WHILE 1
    DO
	BEGIN
	UNTIL .ACE_POINTER[ACE$B_SIZE] LEQU .ACL_LENGTH
	DO
	    BEGIN
	    CH$FILL (0, .ACL_LENGTH, .ACE);
	    HEADER[FH2$V_BADACL] = 1;
	    CHECKSUM (.HEADER);
	    MARK_DIRTY (.HEADER);
	    NEW_HEADER = NEXT_HEADER (.HEADER, .FCB);
	    IF .NEW_HEADER EQL 0
	    THEN NEW_HEADER = EXTEND_HEADER (.CURRENT_FIB, .HEADER, .FCB);
	    HEADER = .NEW_HEADER;
	    FCB = .FCB[FCB$L_EXFCB];
	    HEADER[FH2$B_ACOFFSET] = .HEADER[FH2$B_RSOFFSET];
	    ACL_LENGTH = (.HEADER[FH2$B_RSOFFSET] -
			  .HEADER[FH2$B_MPOFFSET] -
			  .HEADER[FH2$B_MAP_INUSE]) * 2;
	    ACE = .HEADER + .HEADER[FH2$B_RSOFFSET] * 2 - .ACL_LENGTH;
	    FIRST_ACE = 1;			! First ACE in header
	    END;

! Having found a header with free space, mark it as belonging to the ACL.

	IF .FIRST_ACE
	THEN
	    BEGIN
	    HEADER[FH2$B_ACOFFSET] = .HEADER[FH2$B_RSOFFSET] - .ACL_LENGTH/2;
	    FIRST_ACE = 0;
	    END;

! Copy the ACE into the header and advance the pointers.

	CH$MOVE (.ACE_POINTER[ACE$B_SIZE], .ACE_POINTER, .ACE);
	ACE = .ACE + .ACE_POINTER[ACE$B_SIZE];
	ACL_LENGTH = .ACL_LENGTH - .ACE_POINTER[ACE$B_SIZE];
	ACE_POINTER = .ACE_POINTER + .ACE_POINTER[ACE$B_SIZE];
	IF .ACE_POINTER GEQA .ACL_POINTER + .ACL_POINTER[ACL$W_SIZE]
	THEN
	    BEGIN
	    ACL_POINTER = .ACL_POINTER[ACL$L_FLINK];
	    IF .ACL_POINTER EQLA FIRST_FCB[FCB$L_ACLFL] THEN EXITLOOP;
	    ACE_POINTER = ACL_POINTER[ACL$L_LIST];
	    END;
	END;

! Recover any unused ACL space from this header by sliding the ACL down
! to the end of the header. Clear the odd byte at the end of the ACL
! if there is one.

    IF TESTBITSC (ACL_LENGTH<0,1>) THEN (.ACE)<0,8> = 0;
    CH$MOVE ((.HEADER[FH2$B_RSOFFSET] - .HEADER[FH2$B_ACOFFSET]) * 2 - .ACL_LENGTH,
	     .HEADER + .HEADER[FH2$B_ACOFFSET] * 2,
	     .HEADER + .HEADER[FH2$B_ACOFFSET] * 2 + .ACL_LENGTH);
    CH$FILL (0, .ACL_LENGTH, .HEADER + .HEADER[FH2$B_ACOFFSET] * 2);
    HEADER[FH2$B_ACOFFSET] = .HEADER[FH2$B_ACOFFSET] + .ACL_LENGTH / 2;
    HEADER[FH2$V_BADACL] = 1;
    CHECKSUM (.HEADER);
    MARK_DIRTY (.HEADER);
    END
ELSE
    BEGIN

! If there is not ACL associated with the file, and this is the first (or only)
! file header, clean it out properly.

    CH$FILL (0, (.HEADER[FH2$B_RSOFFSET] -
		 .HEADER[FH2$B_ACOFFSET]) * 2,
	     .HEADER + .HEADER[FH2$B_ACOFFSET] * 2);

! If there are no extension headers, also re-adjust the ACL offset.  If there
! are extension headers, leave the ACL offset alone as modifying it would
! corrupt the map information in the following headers.

    IF .HEADER[FH2$W_EX_FIDNUM] EQL 0 AND .HEADER[FH2$B_EX_FIDNMX] EQL 0
    THEN HEADER[FH2$B_ACOFFSET] = .HEADER[FH2$B_RSOFFSET];
    CHECKSUM (.HEADER);
    MARK_DIRTY (.HEADER);
    END;

! Clean out the ACL from any remaining headers.

WHILE 1
DO
    BEGIN
    NEW_HEADER = NEXT_HEADER (.HEADER, .FCB);
    FCB = .FCB[FCB$L_EXFCB];
    IF .NEW_HEADER EQL 0 THEN EXITLOOP;
    HEADER = .NEW_HEADER;
    CH$FILL (0, (.HEADER[FH2$B_RSOFFSET] -
		 .HEADER[FH2$B_ACOFFSET]) * 2,
	     .HEADER + .HEADER[FH2$B_ACOFFSET] * 2);
    HEADER[FH2$B_ACOFFSET] = .HEADER[FH2$B_RSOFFSET];
    CHECKSUM (.HEADER);
    MARK_DIRTY (.HEADER);
    END;

! Now that all of the headers have been written, go back and clear the BADACL
! bit.  This is necessary to avoid a corrupted ACL should the system crash
! while the headers are being re-written.

IF .HEADER[FH2$W_SEG_NUM] NEQ 0
THEN NEW_HEADER = READ_HEADER (0, .FIRST_FCB)
ELSE NEW_HEADER = .HEADER;
DO
    BEGIN
    HEADER = .NEW_HEADER;
    HEADER[FH2$V_BADACL] = 0;
    CHECKSUM (.HEADER);
    MARK_DIRTY (.HEADER);
    NEW_HEADER = NEXT_HEADER (.HEADER, 0);
    END
UNTIL .NEW_HEADER EQL 0;

! Get back the primary file header.

IF .HEADER[FH2$W_SEG_NUM] NEQ 0
THEN READ_HEADER (0, .FIRST_FCB);

RETURN 1;

END;						! End of routine ACL_BUILDACL

GLOBAL ROUTINE ACL_COPYACL (OLD_FILE_FCB, NEW_FILE_FCB, OPTION) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine propagates the ACEs from one file to another.  This
!	is done in one of several ways: propagate everything, propagate
!	only directory default ACEs, or propagate everything except ACEs
!	marked as NOPROPAGATE.
!
! CALLING SEQUENCE:
!	ACL_APPLYDEF (ARG1, ARG2, ARG3);
!
! INPUT PARAMETERS:
!	ARG1: address of the source file FCB
!	ARG2: address of the created file FCB
!	ARG3: 0 = copy everything
!	      1 = only default ACEs
!	      2 = all except NOPROPAGATE ACEs
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1 if successful
!	0 otherwise
!
! SIDE EFFECTS:
!	An ACL for the created file is built using any applicable ACE's
!	from the source file.  The file header for the created file is
!	then updated to refect this default ACL.
!
!--

BEGIN

MAP
	OLD_FILE_FCB	: REF BBLOCK,		! Address of the directory FCB
	NEW_FILE_FCB	: REF BBLOCK;		! Address of created file FCB

BIND_COMMON;

LOCAL
	ACL_POINTER	: REF BBLOCK,		! Directory ACL segment address
	ACL_LENGTH,				! Length of the ACL
	ACL_AREA	: BBLOCK [MAX_ACL_SIZE], ! buffer to build ACL segment
	NEW_ACL		: REF BBLOCK,		! Address of file ACL segment
	ACE_POINTER	: REF BBLOCK;		! Address of current ACE

! Clean out any existing ACL on the target file.

ACL_DELETEACL (NEW_FILE_FCB[FCB$L_ACLFL], 0);

! See if there is any ACL on the source file that must be propagated.

IF .OLD_FILE_FCB[FCB$L_ACLFL] EQLA OLD_FILE_FCB[FCB$L_ACLFL] THEN RETURN 1;

! See if this is a simple copy operation.

IF .OPTION EQL 0
THEN
    BEGIN
    ACL_POINTER = .OLD_FILE_FCB[FCB$L_ACLFL];
    UNTIL .ACL_POINTER EQLA OLD_FILE_FCB[FCB$L_ACLFL]
    DO
	BEGIN
	NEW_ACL = ALLOC_PAGED (.ACL_POINTER[ACL$W_SIZE], ACL_TYPE);
	CH$MOVE (.ACL_POINTER[ACL$W_SIZE], .ACL_POINTER, .NEW_ACL);
	INSQUE (.NEW_ACL, .NEW_FILE_FCB[FCB$L_ACLBL]);
	ACL_POINTER = .ACL_POINTER[ACL$L_FLINK];
	END;
    END
ELSE
    BEGIN

! Scan through the source file's ACL and propagate the desired ACE types.

    ACL_POINTER = OLD_FILE_FCB[FCB$L_ACLFL];
    ACL_LENGTH = 0;
    DO
	BEGIN
	ACL_POINTER = .ACL_POINTER[ACL$L_FLINK];
	ACE_POINTER = ACL_POINTER[ACL$L_LIST];
	UNTIL .ACE_POINTER GEQA .ACL_POINTER + .ACL_POINTER[ACL$W_SIZE]
	DO
	    BEGIN
	    IF (.ACE_POINTER[ACE$V_DEFAULT] AND .OPTION EQL 1)
	    OR (NOT .ACE_POINTER[ACE$V_NOPROPAGATE] AND .OPTION EQL 2)
	    THEN
		BEGIN
		IF .ACL_LENGTH + .ACE_POINTER[ACE$B_SIZE] GTR MAX_ACL_SIZE
		THEN
		    BEGIN
		    NEW_ACL = ALLOC_PAGED (ACL$C_LENGTH + .ACL_LENGTH, ACL_TYPE);
		    CH$MOVE (.ACL_LENGTH, ACL_AREA, NEW_ACL[ACL$L_LIST]);
		    NEW_ACL[ACL$W_SIZE] = ACL$C_LENGTH + .ACL_LENGTH;
		    INSQUE (.NEW_ACL, .NEW_FILE_FCB[FCB$L_ACLBL]);
		    ACL_LENGTH = 0;
		    END;

		CH$MOVE (.ACE_POINTER[ACE$B_SIZE], .ACE_POINTER,
			 VECTOR [ACL_AREA, .ACL_LENGTH;, BYTE]);
		IF .OPTION EQL 1
		THEN BBLOCK [VECTOR [ACL_AREA, .ACL_LENGTH;, BYTE], ACE$V_DEFAULT] = 0;
		ACL_LENGTH = .ACL_LENGTH + .ACE_POINTER[ACE$B_SIZE];
		END;
	    ACE_POINTER = .ACE_POINTER + .ACE_POINTER[ACE$B_SIZE];
	    END;
	END
    UNTIL .ACL_POINTER[ACL$L_FLINK] EQLA OLD_FILE_FCB[FCB$L_ACLFL];

    IF .ACL_LENGTH GTR 0
    THEN
	BEGIN
	NEW_ACL = ALLOC_PAGED (ACL$C_LENGTH + .ACL_LENGTH, ACL_TYPE);
	CH$MOVE (.ACL_LENGTH, ACL_AREA, NEW_ACL[ACL$L_LIST]);
	NEW_ACL[ACL$W_SIZE] = ACL$C_LENGTH + .ACL_LENGTH;
	INSQUE (.NEW_ACL, .NEW_FILE_FCB[FCB$L_ACLBL]);
	END;
    END;

1
END;						! End of routine ACL_COPYACL

ROUTINE BUILD_HANDLER (SIGNAL, MECHANISM) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the main level condition handler. It stores the
!	condition value (FCP error code) in the user status block, unwinds
!	and returns from the function that was executing.
!
! CALLING SEQUENCE:
!	BUILD_HANDLER (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of signal array
!	ARG2: address of mechanism array
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	BUILD_STATUS: receives signal code
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	The stack is unwound to the caller of the ACL builder with the
!	error status posted in R0.
!
!--

BEGIN

MAP
	SIGNAL		: REF BBLOCK,	! signal array arg
	MECHANISM	: REF BBLOCK;	! mechanism array arg

EXTERNAL ROUTINE
	SYS$UNWIND	: ADDRESSING_MODE (ABSOLUTE);

! Check the signal code. The only permissible ones are SS$_UNWIND, which
! is ignored, and SS$_CMODUSER. The error status is the 16 bit CHMU code.
! If the error value is non-zero, store it in the saved R0 (zero means
! just exit).  Unwind to the caller of the ACL builder and return, causing
! the invoked function to return with failure to the dispatcher.
!

IF .SIGNAL[CHF$L_SIG_NAME] EQL SS$_UNWIND THEN RETURN;
IF .SIGNAL[CHF$L_SIG_NAME] NEQ SS$_CMODUSER
THEN BUG_CHECK (UNXSIGNAL, FATAL, 'Unexpected signal name in ACP');

IF .SIGNAL[CHF$L_SIG_ARG1] NEQ 0
THEN MECHANISM[CHF$L_MCH_SAVR0] = .SIGNAL[CHF$L_SIG_ARG1];

SYS$UNWIND (0, 0);

RETURN;

END;					! end of routine BUILD_HANDLER

END
ELUDOM
