%title 'RMS3IDX - Analyze Things for Prolog 3 Indexed Files'
	module rms3idx	(
			ident='V04-000') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Analyze Things for Prolog 3
!
! Abstract:	This module is responsible for analyzing various structures
!		in prolog 3 indexed files.  Those routines that are common
!		to prolog 2 and 3 can be found in RMS2IDX.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 26 June 1981
!
! Modified By:
!
!	V03-007	PCA1011		Paul C. Anagnostopoulos  1-Apr-1983
!		Change the message prefix to ANLRMS$_ to ensure that
!		message symbols are unique across all ANALYZEs.  This
!		is necessitated by the new merged message files.
!
!	V03-006	PCA1007		Paul C. Anagnostopoulos 10 Feb 1983
!		Add support for recovery unit items in the primary data
!		and SIDR records.  This required a new routine to calculate
!		the lengths of the various parts of a primary data record,
!		since that calculation has become diabolically complex.
!
!	V03-006	PCA1001		Paul C. Anagnostopoulos 11-Oct-1982
!		Add support for prologue 3 SIDRs.
!
!	V03-005	PCA0100		Paul C. Anagnostopoulos  1-Oct-1982
!		Remove code that displayed the last duplicate bucket
!		pointer in the bucket trailer.  That pointer was
!		not used in V3, but the code was left in.
!
!	V03-004	PCA0060		Paul Anagnostopoulos	29-Mar-1982
!		Changed the way the index record statistics were
!		calculated to make them parallel to the data record.
!
!	V03-003	PCA0051		Paul Anagnostopoulos	26-mar-1982
!		The statistics callback that specified the nominal
!		length of the data record did not include the key.
!
!	V03-002	PCA0004		Paul Anagnostopoulos	16-Mar-1982
!		The key significance count is no longer present in
!		the data bucket trailer.
!
!	V03-001	PCA0003		Paul Anagnostopoulos	16-Mar-1982
!		A bug in ANL$3RECLAIMED_BUCKET_HEADER caused it to
!		sometimes think the bucket header was not at the
!		beginning of the bucket.
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'lib';
require 'rmsreq';

!
! Table of Contents:
!

forward routine
	anl$3bucket_header,
	anl$3reclaimed_bucket_header,
	anl$3index_record,
	anl$3primary_data_record,
	anl$3format_data_bytes: novalue,
	calculate_data_record_info: novalue,
	anl$3sidr_record,
	anl$3sidr_pointer;

!
! External References:
!

external routine
	anl$bucket,
	anl$bucket_callback,
	anl$check_flags,
	anl$data_callback,
	anl$format_error,
	anl$format_flags,
	anl$format_hex,
	anl$format_line,
	anl$format_skip,
	anl$index_callback,
	anl$reclaimed_bucket_callback;

external
	anl$gb_mode: byte,
	anl$gl_fat: ref block[,byte],
	anl$gw_prolog: word;

!
! Own Variables:
!

%sbttl 'ANL$3BUCKET_HEADER - Print and Check a Bucket Header'
!++
! Functional Description:
!	This routine is responsible for printing and checking the contents
!	of the bucket header in prolog 3 indexed file buckets.
!
! Formal Parameters:
!	the_bsd		The address of a BSD describing the complete bucket.
!			We update it to the next bucket.
!	key_id		The alleged ID of the key descriptor for this bucket.
!	dups		A boolean, true if duplicates allowed for this key.
!	level		The alleged level of this bucket.
!	report		A boolean, true if we are to print a report.
!	indent_level	The indentation level of the report.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is another bucket in this chain, false otherwise.
!
! Side Effects:
!
!--


global routine anl$3bucket_header(the_bsd,key_id,dups,level,report,indent_level) = begin

bind
	b = .the_bsd: bsd;

own
	index_flags_def: block[3,long] initial(
				1,
				uplit byte (%ascic 'BKT$V_LASTBKT'),
				uplit byte (%ascic 'BKT$V_ROOTBKT')
				),

	data_flags_def: block[2,long] initial(
				0,
				uplit byte (%ascic 'BKT$V_LASTBKT')
				);

local
	sp: ref block[,byte],
	tp: ref block[,byte];


! We know the bucket header fits in the bucket.  Set up a pointer to the header
! and a pointer to the trailer, which is the last 8 bytes.

sp = .b[bsd$l_bufptr];
tp = .b[bsd$l_endptr] - 8;

! Now we can format the header if requested.

if .report then (

	! Start with a nice header, containing the VBN.

	anl$format_line(3,.indent_level,anlrms$_bkt,.b[bsd$l_vbn]);
	anl$format_skip(0);

	! Format the check character.

	anl$format_line(0,.indent_level+1,anlrms$_bktcheck,.sp[bkt$b_checkchar]);

	! Format the key ID.

	anl$format_line(0,.indent_level+1,anlrms$_bktkey,.sp[bkt$b_indexno]);

	! Now the VBN address sample.

	anl$format_line(0,.indent_level+1,anlrms$_bktsample,.sp[bkt$w_adrsample]);

	! Now the free space offset.

	anl$format_line(0,.indent_level+1,anlrms$_bktfree,.sp[bkt$w_keyfrespc]);

	! Now the next available record ID.

	anl$format_line(0,.indent_level+1,anlrms$_bktrecid3,.sp[bkt$w_nxtrecid]);

	! Now the next bucket VBN.

	anl$format_line(0,.indent_level+1,anlrms$_bktnext,.sp[bkt$l_nxtbkt]);

	! Now the level number.

	anl$format_line(0,.indent_level+1,anlrms$_bktlevel,.sp[bkt$b_level]);

	! Now the control bits.

	anl$format_flags(.indent_level+1,anlrms$_bktflags,.sp[bkt$b_bktcb],
			(if .sp[bkt$b_level] eqlu 0 then data_flags_def else index_flags_def));

	! Now the VBN list pointer size, but only if this is an index bucket.

	if .sp[bkt$b_level] gtru 0 then
		anl$format_line(0,.indent_level+1,anlrms$_bktptrsize,.sp[bkt$v_ptr_sz]+2);

	! Now we are going to format the stuff at the end of the bucket.
	! There is only the VBN free space offset if this is an index bucket.

	anl$format_skip(0);
	if .sp[bkt$b_level] gtru 0 then
		anl$format_line(0,.indent_level+1,anlrms$_bktvbnfree,.tp[4,0,16,0]);
);

! Now we are going the check the contents of the bucket header.  This is a
! fairly rigorous test, but doesn't check anything that requires looking
! at other structures.

! Make sure the check byte is present in the last byte of the bucket.

if .sp[bkt$b_checkchar] nequ ch$rchar(.b[bsd$l_endptr]-1) then
	anl$format_error(anlrms$_badbktcheck,.b[bsd$l_vbn]);

! Check the key ID.

if .sp[bkt$b_indexno] nequ .key_id then
	anl$format_error(anlrms$_badbktkeyid,.b[bsd$l_vbn]);

! Check the bucket address sample.

if .sp[bkt$w_adrsample] nequ (.b[bsd$l_vbn] and %x'0000ffff') then
	anl$format_error(anlrms$_badbktsample,.b[bsd$l_vbn]);

! Check that the next available byte is within reasonable limits.
!!!TEMP!!!

if .sp[bkt$w_freespace] lssu bkt$c_overhdsz or
   .sp[bkt$w_freespace] gtru .b[bsd$w_size]*512-1 then
	anl$format_error(anlrms$_badbktfree,.b[bsd$l_vbn]);

! Check the level number.

if .sp[bkt$b_level] nequ .level then
	anl$format_error(anlrms$_badbktlevel,.b[bsd$l_vbn]);

! Check the byte of control flags.  Make sure we don't get confused by
! the pointer size.

anl$check_flags(.b[bsd$l_vbn],.sp[bkt$b_bktcb] and %x'e7',
		(if .sp[bkt$b_level] eqlu 0 then data_flags_def else index_flags_def));

! Now split up depending on the type of bucket.

if .sp[bkt$b_level] gtru 0 then (

	! This is an index bucket.  Check the VBN free space offset.
	! If we are accumulating statistics, then call the bucket callback
	! routine, telling it the level, bucket size, and fill amount.

	if .tp[4,0,16,0] lssu .sp[bkt$w_freespace]-1 or
	   .tp[4,0,16,0] gtru .b[bsd$w_size]*512-1	then
		anl$format_error(anlrms$_badvbnfree,.b[bsd$l_vbn]);

	statistics_callback(
		anl$bucket_callback(.sp[bkt$b_level],
				    .b[bsd$w_size],
				    .b[bsd$w_size]*512 - .tp[4,0,16,0] + .sp[bkt$w_freespace] - 1);
	);

) else

	! All we need to do for data buckets is call the statistics
	! callback routine with the same information.

	statistics_callback(
		anl$bucket_callback(.sp[bkt$b_level],
				    .b[bsd$w_size],
				    .sp[bkt$w_freespace] + 1);
	);

! If this is not the last bucket in this chain, then let's update the
! BSD to describe the next one.  Otherwise forget it.

if not .sp[bkt$v_lastbkt] then (
	b[bsd$l_vbn] = .sp[bkt$l_nxtbkt];
	anl$bucket(b,0);
	return true;
) else
	return false;

end;

%sbttl 'ANL$3RECLAIMED_BUCKET_HEADER - Check & Format Reclaimed Bucket'
!++
! Functional Description:
!	This routine is called to check and optionally format the header
!	of a reclaimed bucket.  These buckets reside on the available
!	list chained off the area descriptor.
!
! Formal Parameters:
!	the_bsd		Address of BSD describing bucket.
!	report		A boolean, true if we are to format the header.
!	indent_level	Indentation level for the report.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is another bucket in the chain, false otherwise.
!
! Side Effects:
!
!--


global routine anl$3reclaimed_bucket_header(the_bsd,report,indent_level) = begin

bind
	b = .the_bsd: bsd;

own
	control_flags_def: block[2,long] initial(
				0,
				uplit byte (%ascic 'BKT$V_LASTBKT')
				);

local
	sp: ref block[,byte];


! We know the bucket header fits in the bucket.

! Now we can format the header if requested.

sp = .b[bsd$l_bufptr];

if .report then (

	! Start with a nice header, containing the VBN.

	anl$format_line(3,.indent_level,anlrms$_reclaimbkt,.b[bsd$l_vbn]);
	anl$format_skip(0);

	! Format the check character.

	anl$format_line(0,.indent_level+1,anlrms$_bktcheck,.sp[bkt$b_checkchar]);

	! Format the VBN address sample.

	anl$format_line(0,.indent_level+1,anlrms$_bktsample,.sp[bkt$w_adrsample]);

	! Now the next available record ID.

	anl$format_line(0,.indent_level+1,anlrms$_bktrecid3,.sp[bkt$w_nxtrecid]);

	! Now the next bucket VBN.

	anl$format_line(0,.indent_level+1,anlrms$_bktnext,.sp[bkt$l_nxtbkt]);

	! Finally, the flags.

	anl$format_flags(.indent_level+1,anlrms$_bktflags,.sp[bkt$b_bktcb],control_flags_def);
);

! Now we are going to check those items which we formatted above.  The rest
! of the bucket header (and trailer, if prolog 3) were probably left alone
! when the bucket was reclaimed, but we don't care.

! Make sure the check byte is present in the last byte of the bucket.

if .sp[bkt$b_checkchar] nequ ch$rchar(.b[bsd$l_endptr]-1) then
	anl$format_error(anlrms$_badbktcheck,.b[bsd$l_vbn]);

! Check the bucket address sample.

if .sp[bkt$w_adrsample] nequ (.b[bsd$l_vbn] and %x'0000ffff') then
	anl$format_error(anlrms$_badbktsample,.b[bsd$l_vbn]);

! We can't check anything else in the header because we don't know what's
! left over from the original bucket.

statistics_callback(

	! If we are accumulating statistics, then we have to call the
	! bucket callback routine so it can tally the bucket.

	anl$reclaimed_bucket_callback(.b[bsd$w_size]);
);

! If this is not the last bucket in this chain, then let's update the
! BSD to describe the next one.  Otherwise forget it.

if not .sp[bkt$v_lastbkt] then (
	b[bsd$l_vbn] = .sp[bkt$l_nxtbkt];
	anl$bucket(b,0);
	return true;
) else
	return false;

end;

%sbttl 'ANL$3INDEX_RECORD - Format and Check an Index Record'
!++
! Functional Description:
!	This routine is responsible for formatting and checking the contents
!	of an index record (for prolog 3).
!
! Formal Parameters:
!	rec_bsd		Address of BSD describing index record.  We update it
!			to describe the next record.  The work longword is
!			assumed to specify the number of the record.
!	key_bsd		Address of BSD for key descriptor of this index.
!	report		A boolean, true if we are to format the record.
!	indent_level	Indentation level for the report.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is another index record, false otherwise.
!
! Side Effects:
!
!--


global routine anl$3index_record(rec_bsd,key_bsd,report,indent_level) = begin

bind
	b = .rec_bsd: bsd,
	k = .key_bsd: bsd;

local
	sp: ref block[,byte],
	hp: ref block[,byte],
	kp: ref block[,byte],
	vp: ref block[,byte],
	key_length: long;


! We want to ensure that the key portion of the index record fits in the
! record free space.  Begin by calculating the length of the key, which
! depends on whether or not it's compressed.

hp = .b[bsd$l_bufptr];
sp = .b[bsd$l_bufptr] + .b[bsd$l_offset];
kp = .k[bsd$l_bufptr] + .k[bsd$l_offset];

key_length =	(if .kp[key$v_idx_compr] then
			.sp[0,0,8,0] + irc$c_keycmpovh
		else
			.kp[key$b_keysz]);

! Make sure that the key fits in the record free space.

if .b[bsd$l_offset]+.key_length gtru .hp[bkt$w_keyfrespc] then (
	anl$format_error(anlrms$_bad3idxkeyfit,.b[bsd$l_vbn]);
	signal (anlrms$_unwind);
);

! Now we have to calculate the address of the corresponding VBN in the
! VBN list.

vp =	(.b[bsd$l_endptr]-4) - (.b[bsd$l_work]+1) * (.hp[bkt$v_ptr_sz]+2);

! Now we can format the index record, if requested.

if .report then (

	! Begin with a nice heading.

	anl$format_line(3,.indent_level,anlrms$_idxrec,.b[bsd$l_vbn],.b[bsd$l_offset]);
	anl$format_skip(0);

	! Now the VBN.

	anl$format_line(0,.indent_level+1,anlrms$_idxrecptr,.hp[bkt$v_ptr_sz]+2,
			(case .hp[bkt$v_ptr_sz] from 0 to 2 of set
			[0]:	.vp[0,0,16,0];
			[1]:	.vp[0,0,24,0];
			[2]:	.vp[0,0,32,0];
			tes));

	! And the key itself, in hex.

	anl$format_line(0,.indent_level+1,anlrms$_idxkeybytes);

	begin
	local
		key_dsc: descriptor;

	build_descriptor(key_dsc,.key_length,.sp);
	anl$format_hex(.indent_level+2,key_dsc);
	end;
);

statistics_callback(

	! If we are accumulating statistics, then we have to call the
	! index record callback routine, telling it the level, nominal
	! record length, and compressed record length.

	anl$index_callback(.hp[bkt$b_level],
			   .kp[key$b_keysz] + .hp[bkt$v_ptr_sz]+2,
			   .key_length + .hp[bkt$v_ptr_sz]+2);
);

! Now we can advance to the next index record.  If there isn't another
! one, then just return without modifying the BSD.  Otherwise update the
! BSD.  Don't forget to increment the record number in the work longword.

if .b[bsd$l_offset]+.key_length lssu .hp[bkt$w_keyfrespc] then (
	b[bsd$l_offset] = .b[bsd$l_offset] + .key_length;
	increment (b[bsd$l_work]);
	return true;
) else
	return false;

end;

%sbttl 'ANL$3PRIMARY_DATA_RECORD - Format and Check a Primary Data Record'
!++
! Functional Description:
!	This routine is responsible for formatting and checking the contents
!	of a primary data record for prolog 3 indexed files.  This does not
!	include formatting of the data bytes themselves.
!
! Formal Parameters:
!	rec_bsd		Address of BSD describing data record.  It is updated
!			to describe the next record.
!	key_bsd		Address of BSD for key descriptor of this index.
!	report		A boolean, true if we are to print a report.
!	indent_level	The indentation level for the report.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is another record, false otherwise.
!
! Side Effects:
!
!--


global routine anl$3primary_data_record(rec_bsd,key_bsd,report,indent_level) = begin

bind
	b = .rec_bsd: bsd,
	k = .key_bsd: bsd;

own
	data_flags_def: vector[8,long] initial(
				6,
				0,
				0,
				uplit byte (%ascic 'IRC$V_DELETED'),
				uplit byte (%ascic 'IRC$V_RRV'),
				uplit byte (%ascic 'IRC$V_NOPTRSZ'),
				uplit byte (%ascic 'IRC$V_RU_DELETE'),
				uplit byte (%ascic 'IRC$V_RU_UPDATE')
				);

local
	hp: ref block[,byte],
	rp: ref block[,byte],
	kp: ref block[,byte],
	overall_dsc: descriptor,
	key_dsc: descriptor,
	data_dsc: descriptor;


! We need to ensure that the data record fits in the used space of the
! bucket.  Begin by making sure that the first byte fits.

hp = .b[bsd$l_bufptr];

if .b[bsd$l_offset] gequ .hp[bkt$w_freespace] then (
	anl$format_error(anlrms$_baddatarecfit,.b[bsd$l_vbn]);
	signal (anlrms$_unwind);
);

! Set up a descriptor of the overall data record, the key, and the data
! bytes.

calculate_data_record_info(b,k,overall_dsc,key_dsc,data_dsc);

! Now we can ensure that the entire record fits in the unused space.

if .b[bsd$l_offset]+.overall_dsc[len] gtru .hp[bkt$w_freespace] then (
	anl$format_error(anlrms$_baddatarecfit,.b[bsd$l_vbn]);
	signal (anlrms$_unwind);
);

! Now we can format the record, if requested.  This does not include the
! actual data bytes.

rp = .overall_dsc[ptr];
kp = .k[bsd$l_bufptr] + .k[bsd$l_offset];

if .report then (

	! Start with a nice heading.

	anl$format_line(3,.indent_level,anlrms$_idxprimrec,.b[bsd$l_vbn],.b[bsd$l_offset]);
	anl$format_skip(0);

	! Now the control flags.

	anl$format_flags(.indent_level+1,anlrms$_idxprimrecflags,.rp[irc$b_control],data_flags_def);

	! Now the record ID.

	anl$format_line(0,.indent_level+1,anlrms$_idxprimrecid,.rp[irc$w_id]);

	! Now the RRV, both record ID and bucket pointer, if present.

	if not .rp[irc$v_noptrsz] then
		anl$format_line(0,.indent_level+1,anlrms$_idxprimrecrrv,
				.rp[irc$w_rrv_id],.rp[irc$v_ptrsz]+2,
				(case .rp[irc$v_ptrsz] from 0 to 2 of set
				[0]:	.rp[5,0,16,0];
				[1]:	.rp[5,0,24,0];
				[2]:	.rp[5,0,32,0];
				tes));

	! And the key itself, in hex.  It may not exist.

	if not .rp[irc$v_rrv] then (
		anl$format_line(0,.indent_level+1,anlrms$_idxkeybytes);
		anl$format_hex(.indent_level+2,key_dsc);
	);
);

! Now we can actually check the integrity of this data record.  Most of
! the checking has been done, since it involved the fit of the record
! in the bucket.  However, we have a few more things to do.

! Check the control flags.  Don't get confused by the pointer size.

anl$check_flags(.b[bsd$l_vbn],.rp[irc$b_control] and %x'fc',data_flags_def);

! We don't check the VFC header size since the record might be compressed.

if not .rp[irc$v_rrv] and not .rp[irc$v_deleted] then statistics_callback(

	! If we are accumulating statistics, then we need to call the
	! statistics callback routine for data records.  It wants the
	! nominal record length, compressed key length, and compressed 
	! data length.

	local
		sp: ref block[,byte],
		nominal_length: long;

	! If the data is compressed, we have to determine its nominal
	! length by scanning it.  The data record is composed of triplets
	! of the form (fragment-length,fragment,compression-count).

	if .kp[key$v_rec_compr] then (
		sp = .data_dsc[ptr];
		nominal_length = 0;

		while .sp lssa .data_dsc[ptr]+.data_dsc[len] do (
			nominal_length = .nominal_length + .sp[0,0,16,0];
			sp = .sp + 2+.sp[0,0,16,0];
			nominal_length = .nominal_length + .sp[0,0,8,0];
			increment (sp);
		);
	);

	anl$data_callback(.kp[key$b_keysz] + 
				(if .kp[key$v_rec_compr] then .nominal_length else .data_dsc[len]),
			  .key_dsc[len],
			  .data_dsc[len],
			  0);
);

! Now we want to advance to the next data record.  If there is room in
! the bucket for another, then update the BSD.  Otherwise don't touch it.

if .b[bsd$l_offset]+.overall_dsc[len] lssu .hp[bkt$w_freespace] then (
	b[bsd$l_offset] = .b[bsd$l_offset] + .overall_dsc[len];
	return true;
) else
	return false;

end;

%sbttl 'ANL$3FORMAT_DATA_BYTES - Format Actual Primary Record Data Bytes'
!++
! Functional Description:
!	This routine is responsible for formatting the actual data bytes
!	in a primary record for prolog 3 indexed files.  Unlike prolog 2,
!	this is a separate routine because it's a bit messy.
!
! Formal Parameters:
!	indent_level	The indentation level for the report.
!	rec_bsd		BSD describing COMPLETE primary record.
!	key_bsd		BSD for key descriptor for primary index.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	None
!
! Side Effects:
!
!--


global routine anl$3format_data_bytes(indent_level,rec_bsd,key_bsd): novalue = begin

bind
	b = .rec_bsd: bsd,
	k = .key_bsd: bsd;

local
	rp: ref block[,byte],
	overall_dsc: descriptor,
	key_dsc: descriptor,
	data_dsc: descriptor;


! Set up a pointer to the record.

rp = .b[bsd$l_bufptr] + .b[bsd$l_offset];

! Set up descriptors for the overall data record, the key, and the data
! bytes.  We only care about the data bytes.

calculate_data_record_info(b,k,overall_dsc,key_dsc,data_dsc);

! If there any data bytes, then format them in hex.  Otherwise tell the user
! there is no data.

if .data_dsc[len] nequ 0 then
	anl$format_hex(.indent_level,data_dsc)
else
	signal(anlrms$_nodata);

return;

end;

%sbttl 'CALCULATE_DATA_RECORD_INFO'
!++
! Description:	This routine is called to calculate the lengths of the various
!		portions of a primary data record:  the overall length, the
!		key length, and the data bytes length.  This is a complex
!		process, particularly with the advent of recovery units.
!
! Parameters:	rec_bsd		By reference, the BSD for the data record.
!		key_bsd		By reference, the BSD for the key.
!		overall_dsc	By reference, a descriptor to be filled in
!				with a description of the overall record.
!		key_dsc		By reference, a descriptor to be filled in
!				with a description of the key.
!		data_dsc	By reference, a descriptor to be filled in
!				with a description of the data bytes.
!
! Returns:	Nothing.
!
! Notes:
!--

GLOBAL ROUTINE calculate_data_record_info(rec_bsd: ref bsd,
					 key_bsd: ref bsd,
					 overall_dsc: ref descriptor,
					 key_dsc: ref descriptor,
					 data_dsc: ref descriptor)	: novalue
= BEGIN


local
	rp: ref block[,byte],
	kp: ref block[,byte],
	sp: ref block[,byte],
	bits: long;


! Set up pointers to the primary data record and the key descriptor.

rp = .rec_bsd[bsd$l_bufptr] + .rec_bsd[bsd$l_offset];
kp = .key_bsd[bsd$l_bufptr] + .key_bsd[bsd$l_offset];

! The format of a primary data record depends upon the following five things:
!	variable-length record
!	key compression enabled
!	data compression enabled
!	data bytes have been deleted
!	record update in a recovery unit
! Set up a 5-bit integer specifying the states of these items.

bits =	((.anl$gl_fat[fat$v_rtype] nequ fat$c_fixed) ^ 4) +
	(.kp[key$v_key_compr] ^ 3) +
	(.kp[key$v_rec_compr] ^ 2) +
	(.rp[irc$v_deleted]  ^ 1) +
	.rp[irc$v_ru_update];

! Fill in the overall descriptor with the address of the record and the
! length of the overhead portion.

overall_dsc[ptr] = .rp;
overall_dsc[len] =	1 +
			2 +
			(if .rp[irc$v_noptrsz] then 0 else
				(case .rp[irc$v_ptrsz] from 0 to 3 of set
				[0]:	4;
				[1]:	5;
				[2]:	6;
				[3]:	(anl$format_error(anlrms$_baddatarecps,.rec_bsd[bsd$l_vbn]);
					signal(anlrms$_unwind););
				tes)
			);

! Set up a pointer to the portion of the record following the overhead.

sp = .rp + .overall_dsc[len];

! Clear the key and data byte descriptors under the assumption that these
! portions of the record do not exist.

key_dsc[len] = data_dsc[len] = 0;

! If this record is not an RRV, then we need to analyze the key and data
! portions.  Case on the bits we set up to determine the format of these
! portions, and fill in the overall, key, and data byte descriptors.

if not .rp[irc$v_rrv] then
	case .bits from 0 to 31 of set

	[%b'00000',
	 %b'00001']:	(overall_dsc[len] = .overall_dsc[len] + .anl$gl_fat[fat$w_maxrec];
			key_dsc[len] = .kp[key$b_keysz];
			key_dsc[ptr] = .sp;
			data_dsc[len] = .anl$gl_fat[fat$w_maxrec] - .key_dsc[len];
			data_dsc[ptr] = .sp + .key_dsc[len];);

	[%b'00010']:	(overall_dsc[len] = .overall_dsc[len] + .kp[key$b_keysz];
			key_dsc[len] = .kp[key$b_keysz];
			key_dsc[ptr] = .sp;);

	[%b'00100',
	 %b'00110',
	 %b'10000',
	 %b'10010',
	 %b'10100',
	 %b'10110']:	(overall_dsc[len] = .overall_dsc[len] + 2+.sp[0,0,16,0];
			key_dsc[len] = .kp[key$b_keysz];
			key_dsc[ptr] = .sp + 2;
			data_dsc[len] = .sp[0,0,16,0] - .key_dsc[len];
			data_dsc[ptr] = .sp + 2 + .key_dsc[len];);

	[%b'00101',
	 %b'10001',
	 %b'10101']:	(bind
				real_length = .sp + .sp[0,0,16,0]: word;

			overall_dsc[len] = .overall_dsc[len] + 2+.sp[0,0,16,0];
			key_dsc[len] = .kp[key$b_keysz];
			key_dsc[ptr] = .sp + 2;
			data_dsc[len] = .real_length - .key_dsc[len];
			data_dsc[ptr] = .sp + 2 + .key_dsc[len];);

	[%b'01000',
	 %b'01010',
	 %b'01100',
	 %b'01110',
	 %b'11000',
	 %b'11010',
	 %b'11100',
	 %b'11110']:	(overall_dsc[len] = .overall_dsc[len] + 2+.sp[0,0,16,0];
			key_dsc[len] = irc$c_keycmpovh + .sp[2,0,8,0];
			key_dsc[ptr] = .sp + 2;
			data_dsc[len] = .sp[0,0,16,0] - .key_dsc[len];
			data_dsc[ptr] = .sp + 2 + .key_dsc[len];);

	[%b'01001',
	 %b'01101',
	 %b'11001',
	 %b'11101']:	(bind
				real_length = .sp + .sp[0,0,16,0]: word;

			overall_dsc[len] = .overall_dsc[len] + 2+.sp[0,0,16,0];
			key_dsc[len] = irc$c_keycmpovh + .sp[2,0,8,0];
			key_dsc[ptr] = .sp + 2;
			data_dsc[len] = .real_length - .key_dsc[len];
			data_dsc[ptr] = .sp + 2 + .key_dsc[len];);

	[inrange,
	 outrange]:	(anl$format_error(anlrms$_baddatarecbits,.rec_bsd[bsd$l_vbn]);
			signal(anlrms$_unwind););
	tes;

! Ensure that the key and data bytes fit in the overall record.

if .key_dsc[ptr]+.key_dsc[len] gtru .overall_dsc[ptr]+.overall_dsc[len] or
   .data_dsc[ptr]+.data_dsc[len] gtru .overall_dsc[ptr]+.overall_dsc[len] then
	anl$format_error(anlrms$_badkeydatafit,.rec_bsd[bsd$l_vbn]);

return;

END;

%sbttl 'ANL$3SIDR_RECORD - Print & Check a Secondary Data Record'
!++
! Functional Description:
!	This routine is responsible for printing and checking the contents
!	of a prologue 3 secondary data record (SIDR).  SIDRs exist in the
!	data buckets of secondary indices.
!
! Formal Parameters:
!	rec_bsd		Address of BSD describing the SIDR.
!			The BSD is updated to describe the next SIDR.
!	key_bsd		Address of BSD describing the key for this index.
!	report		A boolean, true if we are to format the SIDR.
!	indent_level	Indentation level for the report, if formatted.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is another SIDR in the bucket, false if not.
!
! Side Effects:
!
!--


global routine anl$3sidr_record(rec_bsd,
				key_bsd,
				report: byte,
				indent_level: long)	= begin

bind
	b = .rec_bsd: bsd,
	k = .key_bsd: bsd;

local
	hp: ref block[,byte],
	sp: ref block[,byte],
	kp: ref block[,byte],
	length: long,
	key_length: long,
	p: bsd,
	sidr_pointers: long;


! First we have to ensure that the SIDR record fits in the used space of
! the bucket.  If not, we have a drastic structure error.  Begin by ensuring
! that the length, which is the first word, fits.

hp = .b[bsd$l_bufptr];
if .b[bsd$l_offset] + 1 gequ .hp[bkt$w_freespace] then (
	anl$format_error(anlrms$_baddatarecfit,.b[bsd$l_vbn]);
	signal (anlrms$_unwind);
);

! Now we calculate the length of the entire SIDR record.  It's just the
! 2-byte length plus the number of bytes specified by the length.  While
! we're at it, calculate the length of the key.

kp = .k[bsd$l_bufptr] + .k[bsd$l_offset];
sp = .b[bsd$l_bufptr] + .b[bsd$l_offset];
length =	2 +
		.sp[0,0,16,0];
key_length =	(if .kp[key$v_key_compr] then
			.sp[2,0,8,0] + irc$c_keycmpovh
		else
			.kp[key$b_keysz]);

! Make sure the entire SIDR fits in the used space of the bucket.

if .b[bsd$l_offset] + .length gtru .hp[bkt$w_freespace] then (
		anl$format_error(anlrms$_baddatarecfit,.b[bsd$l_vbn]);
		signal (anlrms$_unwind);
);

! Now we can format the SIDR record fixed portion, if requested.

if .report then (

	! Start with a nice header.

	anl$format_line(3,.indent_level,anlrms$_idxsidr,.b[bsd$l_vbn],.b[bsd$l_offset]);
	anl$format_skip(0);

	! All we have to format is the key.  Build a descriptor for it and
	! dump it in hex.

	anl$format_line(0,.indent_level+1,anlrms$_idxkeybytes);
	begin
	local
		key_dsc: descriptor;

	build_descriptor(key_dsc, .key_length,sp[2,0,0,0]);
	anl$format_hex(.indent_level+2,key_dsc);
	end;
);

! There is nothing more to check about the fixed portion of the SIDR.
! If we aren't displaying this record, then we want to check all of
! the SIDR pointers.

sidr_pointers = 0;
if not .report then (

	! Set up a BSD to describe the first SIDR pointer.  This includes
	! setting the work longword to the number of bytes worth of
	! pointer existing in the record.

	init_bsd(p);
	copy_bucket(b,p);
	p[bsd$l_offset] = .b[bsd$l_offset] + 2 + .key_length;
	p[bsd$l_work] = .sp[0,0,16,0] - .key_length;

	! Now we can loop through each pointer, checking its integrity,
	! and counting them as we go.

	do increment(sidr_pointers) while anl$3sidr_pointer(p,false);

	anl$bucket(p,-1);
);

statistics_callback(

	! If we are accumulating statistics, we want to call the data
	! record callback routine and tell it the overall record length,
	! compressed key length, and compressed data length.  The latter
	! makes no sense for SIDRs.  We also need to tell it the number
	! of SIDR pointers in this record.

	anl$data_callback(.length,
			  .key_length,
			  0,
			  .sidr_pointers);
);

! Now we want to advance on to the next SIDR in this bucket.  if there
! isn't room for one, then we're done.  Otherwise update the BSD.

if .b[bsd$l_offset] + .length lssu .hp[bkt$w_freespace] then (
	b[bsd$l_offset] = .b[bsd$l_offset] + .length;
	return true;
) else
	return false;

end;

%sbttl 'ANL$3SIDR_POINTER - Format & Analyze SIDR Pointer'
!++
! Functional Description:
!	This routine is responsible for formatting and analyzing one of the
!	pointers in a SIDR record.  There is one pointer for each record
!	having the secondary key present in the SIDR header.  This code is
!	for prologue 3 indexed files.
!
! Formal Parameters:
!	pointer_bsd	Address of BSD describing the pointer.  The work
!			longword in the BSD is assumed to contain a count
!			of remaining bytes in the SIDR record.
!	report		Boolean, true if we are to format the pointer.
!	indent_level	Indentation level for the report.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if there is another SIDR pointer, false otherwise.
!
! Side Effects:
!
!--


global routine anl$3sidr_pointer(pointer_bsd,
				 report: byte,
				 indent_level: long)	= begin

bind
	p = .pointer_bsd: bsd;

own
	pointer_flags_def: vector[9,long] initial(
				7,
				0,
				0,
				uplit byte (%ascic 'IRC$V_DELETED'),
				0,
				uplit byte (%ascic 'IRC$V_NOPTRSZ'),
				uplit byte (%ascic 'IRC$V_RU_DELETE'),
				0,
				uplit byte (%ascic 'IRC$V_FIRST_KEY')
				);

local
	pp: ref block[,byte],
	length: long;


! We know the SIDR record fits in the used space of the bucket, because
! that was checked in ANL$3SIDR_RECORD.

! So we can calculate the overall length of the pointer.

pp = .p[bsd$l_bufptr] + .p[bsd$l_offset];
length =	1 +
		(if .pp[irc$v_noptrsz] then 0 else
			(case .pp[irc$v_ptrsz] from 0 to 3 of set
	 		[0]:	4;
			[1]:	5;
			[2]:	6;
			[3]:	(anl$format_error(anlrms$_baddatarecps,.p[bsd$l_vbn]);
				signal (anlrms$_unwind););
			tes)
		);

! Make sure the entire pointer fits in the SIDR record.  If not, that's a
! drastic structure error.

if .length gtru .p[bsd$l_work] then (
	anl$format_error(anlrms$_badsidrptrfit,.p[bsd$l_vbn]);
	signal (anlrms$_unwind);
);

! Now we can format the SIDR pointer if requested.

if .report then (

	! Format the flags.

	anl$format_flags(.indent_level,anlrms$_idxsidrptrflags,.pp[irc$b_control],pointer_flags_def);

	! And the record ID and bucket VBN, if present.

	if not .pp[irc$v_noptrsz] then (
		anl$format_line(0,.indent_level,anlrms$_idxsidrptrref,.pp[1,0,16,0],.pp[irc$v_ptrsz]+2,
				(case .pp[irc$v_ptrsz] from 0 to 2 of set
				[0]:	.pp[3,0,16,0];
				[1]:	.pp[3,0,24,0];
				[2]:	.pp[3,0,32,0];
				tes));
	);
);

! Now we have to check the record pointer.  The only thing to check is
! the control flags.  Don't get confused by the pointer size.

anl$check_flags(.p[bsd$l_vbn],.pp[irc$b_control] and %x'fc',pointer_flags_def);

! Now we want to advance on to the next pointer.  Reduce the count of
! remaining bytes.  If it goes to zero, there are no more pointers.
! If it doesn't, then update the BSD.

p[bsd$l_work] = .p[bsd$l_work] - .length;
if .p[bsd$l_work] gtru 0 then (
	p[bsd$l_offset] = .p[bsd$l_offset] + .length;
	return true;
) else
	return false;

end;

end eludom
