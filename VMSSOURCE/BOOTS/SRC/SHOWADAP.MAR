	.TITLE	SHOWADAP - SHOW ADAPTER and GENERIC ADAPTER NAMES
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SYSGEN
;
; ABSTRACT:
;	THIS ROUTINE PROVIDES GENERIC ADAPTER NAMES FOR SYSGEN
;
; ENVIRONMENT:	USER, EXEC MODE
;
; AUTHOR:  Jake VanNoy		CREATION DATE: 30-APR-1981
;
; MODIFICATION HISTORY:
;	
;	V03-006	TCM0002		Trudy C. Matthews	25-Jul-1984
;		Change venus cpu model number from 11/790 to 8600.
;
;	V03-005	KPL0100		Peter Lieberwirth	10-Feb-1984
;		Change CONFREG to CONFREGL, a longword-array of adapter
;		types.
;
;		Permit undefined adapter types without signalling an error,
;		foreign adapters are anticipated on the BI.
;
;	V03-004	WHM0002		Bill Matthews		01-Feb-1984
;		No adapter default is now -1 not 0. BOO$RESET_ADAP was modified.
;
;	V03-003	WHM0001		Bill Matthews		31-Jan-1984
;		Add support for mixed 16k and 64k memory display.
;
;	V03-002	KDM0084		Kathleen D. Morse	23-Sep-1983
;		Add MicroVAX I and MicroVAX II to CPUDISP.
;
;	V03-001	TCM0001		Trudy C. Matthews	03-Aug-1983
;		Re-write code that displays CPU model number to use the
;		new format CPUDISP macro.  Add support for 785 model display.
;
;	V02-007	JLV0139		Jake VanNoy		2-Jan-1981
;		Remove revision number code because of problems
;		with formatting of data, will wait for GETSYI
;		calls to do this. Replace calls to LIB$PUT_OUTPUT
;		with calls to RIO$OUTPUT_LINE.
;
;	V02-006	JLV0118		Jake VanNoy		9-Nov-1981
;		Added code to report errors in BOO$ADAPTER_NAME.
;
;	V02-005	JLV0091		Jake VanNoy		22-Sep-1981
;		Expand number of bytes in boo$ab_count_blk.
;		Also removed MPM's and DR's from "generic"
;		classification.
;
;	V02-004	JLV0086		Jake VanNoy		15-Sep-1981
;		Added 64 bit memory support and changed the way lookups 
;		are done.
;
;	V02-003	JLV0041		Jake VanNoy		13-Jul-1981
;		Added G^ to LIB$ call.
;
;	V02-002	JLV0035		Jake VanNoy		6-Jul-1981
;		Added CI definition.
;

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; CONSTANTS:
;

LF		= 10
boo$c_count_blk = 20

;
; MACROS:
;

	$NDTDEF
	$PRDEF
	$SYSGMSGDEF
	$TPADEF

$VIELD	BOO,0,<-
	<GENERIC    ,,M>,-
	>
L_CONSTANT 	= 0		; CONSTANT = NDT adapter type code
W_FLAGS    	= 4		; only flag is GENERIC, means memory or DR32
W_INDEX	   	= 6		; INDEX is sysgen-specific, used to associate
				; occurance counts with adapters,
				; MBA=0, UBA=1, CI=2
L_NAME	   	= 8		; Offset to ASCID string containing adapter name

.Macro	Adapter	constant,string=<>,Flags = 0,index

	.PSECT	PAGED_DATA_2	rd,wrt,noexe,quad
	$$$ = .
	.LONG	CONSTANT
	.WORD 	FLAGS
	.WORD	INDEX
	.ASCID	/STRING/

	.PSECT	PAGED_DATA	rd,wrt,noexe,quad
	.LONG	$$$
	
.Endm	adapter

;
; OWN STORAGE:
;

.PSECT	PAGED_DATA	rd,wrt,noexe,quad

Maxnexus = 64					; maximum is 4 BIs

Boo$ab_confreg_blk:	.blkl	maxnexus	;
Boo$ab_adap_idx:	.blkb	maxnexus	;
Boo$ab_adap_txt:	.blkl	maxnexus	;

Boo$ab_Count_blk:	.blkb	boo$c_count_blk	; This many adapter types need
						; occurance counts.

C780:			.ascid	@CPU Type: 11/780@
C750:			.ascid	@CPU Type: 11/750@
C730:			.ascid	@CPU Type: 11/730@
C790:			.ascid	@CPU Type:   8600@
C785:			.ascid	@CPU Type: 11/785@
CUV1:			.ascid	@CPU Type: MicroVAX I@
CUV2:			.ascid	@CPU Type: MicroVAX II@

str_size:		.long	0
str_addr:		.long	0
str_start:		.blkb	32

ctr_generic:		.ascid	/   !3<!UL!>!_   !AS!UB/
ctr_memory:		.ascid	/   !3<!UL!>!_   !AS/

header:			.ascid	<LF>/ Nexus	   Generic Name or Description/
trailer:		.ascid	//

unk_adap:		.ascid	/Unknown/

called_flag:		.long	0


; ADAPTER TABLE

Boo$al_adap_table:
 	adapter	NDT$_MEM4NI,	<4K memory, non-interleaved>
 	adapter	NDT$_MEM4I,	<4K memory, interleaved>
 	adapter	NDT$_MEM16NI,	<16K memory, non-interleaved>
 	adapter	NDT$_MEM16I,	<16K memory, interleaved>
	adapter NDT$_MEM1664NI,	<Mixed 16K and 64K memory, non-interleaved>
 	adapter	NDT$_MB,	<MB>,	Boo$m_generic,	0
 	adapter	NDT$_UB0,	<UB>,	Boo$m_generic,	1
 	adapter	NDT$_UB1,	<UB>,	Boo$m_generic,	1
 	adapter	NDT$_UB2,	<UB>,	Boo$m_generic,	1
 	adapter	NDT$_UB3,	<UB>,	Boo$m_generic,	1
	adapter	NDT$_CI,	<CI>,	Boo$m_generic,	2
 	adapter	NDT$_MPM0,	<MPM0>
 	adapter	NDT$_MPM1,	<MPM1>
 	adapter	NDT$_MPM2,	<MPM2>
 	adapter	NDT$_MPM3,	<MPM3>
 	adapter	NDT$_DR32,	<DR32>
 	adapter	NDT$_MEM64NIL,	<64K non-interleaved memory, lower controller>
  	adapter	NDT$_MEM64EIL,	<64K externally interleaved memory, lower controller>
  	adapter	NDT$_MEM64NIU,	<64K non-interleaved memory, upper controller>
  	adapter	NDT$_MEM64EIU,	<64K externally interleaved memory, upper controller>
  	adapter	NDT$_MEM64I,	<64K internally interleaved memory>

	.long	0	; End of table
;
; Note: The maximum index for generic adapters above must less than or equal to
; the constant boo$c_count_blk.
;


	.Sbttl	BOO$SHOWADAP - SHOW/ADAPTERS routine
;++
; FUNCTIONAL DESCRIPTION:
;
;	Scan CONFREG and output text associated with each adapter.
;	Text is to match exactly what a user would type for the
;	/ADAPTER qualifier or the AUTOCONFIGURE "adapter" command.
;
; CALLING SEQUENCE:
;
;	Called from TPARSE as an action routine
;
; INPUT PARAMETERS:
;
;	None.
;
; IMPLICIT INPUTS:
;
;	CONFREG.
;
; OUTPUT PARAMETERS:
;
;	R0	Completion code
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
;--

; Register usage
;



	.PSECT	PAGED_CODE	rd,nowrt,exe,long

.Entry	BOO$SHOW_ADAPTER, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>

	calls	#0,w^Show_Cpu		; Show CPU specific data
	blbs	R0,5$			; Branch if OK
	pushl	R0			; Push error code
	calls	#1,G^Lib$Signal		; Signal and continue

5$:	pushal	header			; Set up header
	calls	#1,Boo$Output_Desc	; Output header

10$:	calls	#0,Get_All_Adap		; Fill in Adap_txt and Adap_idx
	blbs	R0,15$			; Branch if ok
	brw	80$			; Exit

15$:	clrl	R2			; initialize index
	movl	exe$gl_numnexus,R3	; Set count (User readable location)
	movab	w^boo$ab_adap_idx,R4	; Adapter index table
	movab	w^boo$ab_adap_txt,R5	; Adapter text table

20$:	movl	(R5)[R2],R7		; Get address of text descriptor
	beql	60$			; Branch if zero
	cvtbl	(R4)[R2],R6		; Get index count
	blss	30$			; Branch if non-generic

	$FAO_S	Ctrstr = w^ctr_generic,- ; Format string
		Outbuf = w^rio$ab_outbuf,-
		Outlen = w^rio$gw_outlen,-
		P1     = R2,-		; Nexus number
		P2     = R7,-		; Adapter text prefix address
		P3     = R6		; Count
	brb	40$

30$:	$FAO_S	Ctrstr = w^ctr_memory,- ; Format string
		Outbuf = w^rio$ab_outbuf,-
		Outlen = w^rio$gw_outlen,-
		P1     = R2,-		; Nexus number
		P2     = R7		; Adapter text address

40$:	blbs	R0,50$			; branch if no error from fao

45$:	pushl	R0			; Set error code
	calls	#1,G^Lib$Signal		; Signal Error
	brb	60$			; goto end of loop

50$:	bsbw	rio$output_line		; Output line
60$:	aoblss	R3,R2,20$		; Loop

	pushal	trailer			; Set up blank line trailer
	calls	#1,BOO$Output_Desc	; Output header

	movl	#1,R0
80$:	ret
.page
.sbttl	Boo$Output_Desc - Output a line

;+
; BOO$OUTPUT_DESC
;
; Calling sequence
;
; CALLS #1,BOO$OUTPUT_DESC
;
; Input:
;	4(AP) = Address of descriptor of line to output
;
; Output:
;	RIO$OUTPUT_LINE is called.
;
;-

.Entry	BOO$OUTPUT_DESC,^M<R2,R3,R4,R5>

	movq	@4(AP),R0		; Fetch Descriptor into R0,R1
	movw	R0,W^Rio$gw_outlen	; Set Length
	movc3	R0,(R1),W^Rio$ab_buffer	; Move into buffer to be written
	bsbw	Rio$Output_Line		; Output line
	ret

.page
.Sbttl	Show_CPU - Show CPU specfic data

.Entry	Show_CPU, ^M<R2,R3,R4,R5>

	pushal	trailer			; Set up blank line
	calls	#1,Boo$Output_Desc	; Output 
	blbc	R0,End_show_cpu		; branch on error

;
; This cumbersome way of picking up the CPU model number display is used so
; that all CPU-dependent code is flagged by the use of the CPUDISP macro.
;
	.list	meb
	cpudisp -
		<<780,c780_model>,-
		 <750,c750_model>,-
		 <730,c730_model>,-
		 <790,c790_model>,-
		 <UV1,cUV1_model>,-
		 <UV2,cUV2_model>,-
		 <785,c785_model>>
	.nlist	meb
c780_model:
	pushal	c780
	brb	output_model
c750_model:
	pushal	c750
	brb	output_model
c730_model:
	pushal	c730
	brb	output_model
c790_model:
	pushal	c790
	brb	output_model
cUV1_model:
	pushal	cUV1
	brb	output_model
cUV2_model:
	pushal	cUV2
	brb	output_model
c785_model:
	pushal	c785

output_model:
	calls	#1,Boo$Output_Desc	; output
End_show_cpu:
	ret


.page
.sbttl - BOO$ADAPTER_NAME - generic adapter name parsing

;++
; FUNCTIONAL DESCRIPTION:
;
;	Scan CONFREG and output text associated with each adapter.
;	Text is to match exactly what a user would type for the
;	/ADAPTER qualifier or the AUTOCONFIGURE "adapter" command.
;
; CALLING SEQUENCE:
;
;	Called from TPARSE as an action routine
;
; INPUT PARAMETERS:
;
;	TPA$L_NUMBER(AP) - Number in generic specifier (e.g. 0 if "UB0")
;
; IMPLICIT INPUTS:
;
;	CONFREG.
;	str_size and str_start - Set up by previous TPARSE routines as 
;		length and character string in generic adapter type.
;
; OUTPUT PARAMETERS:
;
;	R0	Completion code
;
; IMPLICIT OUTPUTS:
;
;	TPA$L_NUMBER(AP) is set to appropriate nexus number.
;
;--

; Register usage
;
; R4 - Base address of adap_idx array
; R5 - Base address of adap_txt array
; R6 - Index through loop
; R7 - addr(adapter text)
; R8 - occurance of this type adapter
; R9 - Size in bytes of input adapter string
; R10 - Address of input adapter string
; R11 - Size in bytes of array (16 for 1 SBI, 32 for 2)
;

.Entry Boo$Adapter_Name, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	movl	w^str_size,R9		; Size of adapter name string
	beql	35$			; Branch to invalid name error if zero
10$:	movab	w^str_start,R10		; Address of adapter name

	calls	#0,Get_All_Adap		; Fill in Adap_txt and Adap_idx
	blbc	R0,40$			; Branch if error

	clrl	R6			; initialize index
	movl	exe$gl_numnexus,R11	; Set count (User readable location)
	movab	w^boo$ab_adap_idx,R4	; Adapter index table
	movab	w^boo$ab_adap_txt,R5	; Adapter text table

20$:	movl	(R5)[R6],R7		; Get address of text descriptor
	beql	30$			; Branch if zero
	cvtbl	(R4)[R6],R8		; Get index count
	blss	30$			; Branch if non-generic

	cmpw	(R7),R9			; Compare lengths
	bneq	30$			; Branch if not equal

	cmpl	R8,Tpa$l_number(AP)	; Check occurance number
	bneq	30$			; Branch if not equal

	cmpc3	R9,(R10),@4(R7)		; Comapre actual strings
	bneq	30$			; Branch if not equal

	movl	R6,Tpa$l_number(AP)	; Set adapter number
	brb	50$	

30$:	aoblss	R11,R6,20$		; Loop R11 times, incrementing R6

35$:	movl	#sysg$_invadap,R0	; Set error
	mnegl	#1,Tpa$l_number(AP)	; Set adapter number

40$:	pushl	R0			; push error status
	calls	#1,G^Lib$Signal		; Signal error
50$:	
	movl	#1,R0			; Set success
	ret				; return

.page
.sbttl	Get_All_Adap - Get all adapters into readable format

.Entry	Get_all_adap,^M<R2,R3,R4,R5,R6,R7,R8,R9>

	blbc	called_flag,10$		; Branch if first call here
	brw	110$			; Exit, no work necessary

10$:	$CMEXEC_S w^Read_Confreg	; Read confreg into user readable area
	blbs	R0,15$			; Branch on success	
	ret				; return with error

15$:	movab	w^boo$ab_count_blk,R3	; Count block
	movzbl	#boo$c_count_blk,R4	; size
20$:	clrb	(R3)+			; zero it out
	sobgtr	R4,20$			; loop

	clrl	R0			; initialize index
	movl	exe$gl_numnexus,R1	; Set count (User readable location)
	movab	w^boo$ab_confreg_blk,R2	; Set address of output block
	movab	w^boo$ab_count_blk,R3	; Count block
	movab	w^boo$ab_adap_idx,R4	; Adapter index table
	movab	w^boo$ab_adap_txt,R5	; Adapter text table

40$:	movl	(R2)+,R6		; Get adapter ($NDTDEF) type
	beql	90$			; Branch if nothing on nexus

	movab	boo$al_adap_table,R7	; Set address of descriptor array
;
; arrays adap_idx and adap_txt is now filled in for this nexus. 
; adap_txt will always be non-zero for a nexus with a known adapter 
; on it. adap_idx will be a positive integer (0 through n) indicating 
; its occurance count, or negative indicating that it is a memory 
; adapter with no generic name.
;

50$:	movl	(R7)+,R8		; Get next block (defined by Adapter)
	beql	80$			; Adapter type not found
	cmpl	R6,l_constant(R8)	; Adapter type match ?
	bneq	50$			; Loop if not

	mnegb	#1,(R4)[R0]		; Assume not generic
	bbc	#boo$v_generic,-
		w_flags(R8),60$		; Branch if not
	movzwl	w_index(R8),R9		; Set adapter type index
	movb	(R3)[R9],(R4)[R0]	; Move occurance count to adap_idx array
	incb	(R3)[R9]		; Increment occurance count

60$:	movab	l_name(R8),(R5)[R0]	; Set text descriptor address
	brb	100$			; end of loop

80$:					; Unrecognized adapter type
	movab	unk_adap,(R5)[R0]	; Set "Unknown" text descriptor address
	clrb	(R4)[R0]		; No adapter count
	brb	100$

90$:	clrb	(R4)[R0]		; No adapter count
	clrl	(R5)[R0]		; No adapter text

100$:	aoblss	R1,R0,40$		; Loop R1 times

	mnegl	#1,called_flag		; Set flag indicating routine called
110$:	movl	#1,R0			; Set success
	ret

.page
.sbttl	Read_Confreg - Read adapter configuration array

.Entry	READ_CONFREG, ^M<R2,R3,R4>

;
; EXEC mode routine to read CONFREG into user-mode readable area
;

	movl	exe$gl_confregl,R2	; Set address of confreg
	movl	exe$gl_numnexus,R4	; Set count
	movab	w^boo$ab_confreg_blk,R3	; Set address of output block

10$:	movl	(R2)+,(R3)+		; 4 bytes (1 CONFREGL entry) at a time
	sobgtr	r4,10$			; Loop until done

	movl	#1,R0			; Set success
	ret				; Return


.page	
.sbttl	TPARSE adapter name parsing routines

.Entry	Boo$Reset_Adap, ^M<>

	clrl	w^str_size		; Zero size
	movab	w^str_start,w^str_addr	; Set start address
	mnegl	#1,tpa$l_number(AP)	; Assume adapter zero

	ret				; Return

.Entry	Boo$Adap_Letter, ^M<>
	
	movl	w^str_addr,R1		; Current string pointer
	movb	tpa$b_char(AP),(R1)+	; Move and increment address
	movl	R1,w^str_addr		; Set new address
	incl	w^str_size		; Increment size
	ret

	.END
