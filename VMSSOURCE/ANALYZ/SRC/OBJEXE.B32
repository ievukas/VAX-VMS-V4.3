%title 'OBJEXE - ANALYZE/OBJECT and ANALYZE/IMAGE'
	module objexe	(main=anl$objexe,
			ident='V04-000') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, ANALYZE/OBJECT and ANALYZE/IMAGE
!
! Abstract:	The VAX/VMS Analyze facility provides the ANALYZE command,
!		which allows the user to perform analyses of various aspects
!		of VMS.  This image supports the following categories:
!
!			ANALYZE/IMAGE
!			ANALYZE/OBJECT		Analyze object file contents.
!
!
! Environment:	Native, User Mode.
!
! Author: Paul C. Anagnostopoulos, Creation Date: 6 January 1981
!
! Modified By:
!
!	V03-001	DGB0052		Donald G. Blair		10-May-1984
!		Establish a condition handler to save an error
!		status when it is signaled so that we can return
!		the status correctly upon image exit.
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'starlet';
require 'objexereq';

!
! Table of Contents:
!

forward routine
	anl$condition_handler,
	anl$objexe: novalue;

!
! External References:
!

external routine
	anl$exit_with_status,
	anl$image,
	anl$object,
	cli$present: addressing_mode(general),
	lib$establish: addressing_mode(general);

!
! Own Variables:
!

%sbttl 'ANL$OBJEXE - Main Routine'
!++
! Functional Description:
!	This is the main routine for this analyze image.  All we do here
!	is decide which category the user has requested and dispatch to
!	the appropriate routine for handling it.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	Successful status returned to VMS.
!
! Side Effects:
!
!--


global routine anl$objexe: novalue = begin


lib$establish(anl$condition_handler);

! Just decide which category of analysis the user wants.  The default is
! ANALYZE/OBJECT.

if cli$present(describe('IMAGE')) then
	anl$image()
else
	anl$object();

! All done.  Just return a nice status to Mother VMS...

anl$exit_with_status();

end;

%sbttl 'ANL$CONDITION_HANDLER - Save the ANL$WORST_ERROR status'
!++
! Functional Description:
!	There are 2 ways that errors are handled in ANALYZE/OBJ and
!	ANALYZE/IMAGE.  In general, ANL$FORMAT_ERROR is called whenever
!	an error is discovered in the object/image file.  LIB$SIGNAL
!	is called for most other sorts of errors.  In order to keep
!	track of the worst error that has occurred, since there are 2
!	error reporting mechanisms, we need to save the worst error
!	status both in this condition handler (relevant for calls to
!	lib$signal) and in anl$format_error.
!	
! Formal Paramters:
!	signal_args = Address of signal argument list
!	mechanism_args = Address of mechanism array
!
! Implicit Inputs:
!	none
!
! Returned Value:
!	ss$_resignal	Continue to search call frames.
!
! Side Effects:
!	anl$worst_error is updated with highest severity error.
!
!---

global routine anl$condition_handler (signal_args, mechanism_args) = begin

map
    signal_args:	ref bblock,	! Address of signal argument list
    mechanism_args:	ref bblock;	! Address of mechanism argument list

external
    anl$worst_error;		! the worst error status we've found so far

local
    code:		bblock [long];	! Condition code (longword)

code =	.signal_args [chf$l_sig_name];		! Get condition code
if   severity_level (.code) gtr 
    severity_level (.anl$worst_error)		! If higher than watermark
then anl$worst_error = .code;			!  -then set new worst error

return ss$_resignal;

end;

end eludom
