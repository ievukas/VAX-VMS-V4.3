	.title	pli$putfile
	.ident	/1-003/					; Edit CGN1003
							; Edit WHM1002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; facility:
;
;	VAX/VMS PL1 runtime library
;
; abstract:
;
;	This module contains the routines to initialize the runtime system
;	for putting elements to a pl1 stream file.
;
;
; author: c. spitz 28-nov-79
;
; modified:
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;	1-003	Chip Nylander	08-August-1983
;
;		Initialize the parent pointer with FP when stream block
;		allocated.
;
;--

;
; external definitions
;

	$deffcb			;define file control block
	$defdat			;define operand node data types
	$defstr			;define stream block offsets
	$defputopt		;define put options block
	$rabdef			;define rms rab offsets
	$fabdef			;define rms fab offsets
	$rmsdef			;define rms error codes

; 
; local data
;

	rtshare			;sharable


;++
; pli$putfile_r6
;
; functional description:
;
; This routine initializes the runtime system to put elements to a stream
; file. The syntax of the PUT LIST statement is:
;	PUT [FILE(fileref)] [SKIP(expr)] [LINE(expr)] [PAGE]
;		LIST(out1 [,out2[,out3[...]]]) [OPTIONS(option_list)];
;			where: out is an expression or [DO iter_var =
;				expr TO expr [BY expr]]
;				and option_list is a list of:
;					CANCEL_CONTROL_O
;
; The syntax of the PUT EDIT statement is the same except that LIST is
; replaced by EDIT and a format list follows the element list.
;					
; inputs:
;	ap - address of file control block. must be preserved by inline code
;	r0 - line option
;	r1 - page option 
;	r2 - address of skip option
;	r3 - cancel control o (0=off)
;	r4 - address of the compiled format (for put edit) or 0 (for put list)
;	(sp) - address of inline code for 1st element to put
; outputs:
;	ap - address of the file control block. must be preserved by inline
;		code
;	r11 - address of stream block. must be preserved by inline code
;	r0-r10 are available for use by inline code
; side effects:
;	r0-r6 are destroyed.  the file is opened with the default attributes
;	stream and output.  
;
;--

pli$putfile_r6::
;
; allocate a stream block
;
	popl	r6			;save return address
	subl	#str_c_len,sp		;allocate space for stream block
	movl	sp,r11			;set address of stream block
	movab	str_l_stack(r11),str_l_fld_end(r11) ;set end of field
	movq	r0,str_b_field+10(r11)	;save line and page
	movq	r2,str_b_field+18(r11)	;save skip and cancel control o
	movl	r6,str_b_field+26(r11)	;save return address
;
; initialize format stack and pointer
;
	movl	fp,str_l_parent(r11)	;set default parent pointer
	bicl	#str_m_edit,str_l_fs(r11) ;assume list directed
	movl	r4,str_l_fp(r11)	;set address of format pointer
	beql	5$			;if eql, list directed
	bisl	#str_m_edit,str_l_fs(r11) ;set edit directed
5$:	movab	str_l_stack(r11),r5	;get address of stack pointer
	movl	r4,(r5)			;copy fp to format stack
	movl	r5,str_l_sp(r11)	;store sp
;
; open file if needed
;
	bbs	#atr_v_opened,fcb_l_attr(ap),10$ ;if file open, cont
	pushl	#<atr_m_stream+atr_m_output> ;request stream and output
	pushl	ap			;set fcb
	calls	#2,g^pli$open		;open the file
	bbs	#atr_v_opened,fcb_l_attr(ap),10$ ;if file open, cont
	movl	#pli$_open,r0		;set open failure
	brw	fail			;and fail
;
; check file attributes
;
10$:	bbcs	#atr_v_recur,fcb_l_attr(ap),15$ ;if recursive i/o
	movl	#pli$_recursio,r0	;set illegal recursive i/o
	brw	fail			;and fail
15$:	movab	fcb_l_condit(ap),(fp)	;set condition handler address
	bbs	#atr_v_output,fcb_l_attr(ap),20$ ;if output, cont
	movl	#pli$_notout,r0		;set not output file
	brw	fail			;and fail
20$:	bbs	#atr_v_stream,fcb_l_attr(ap),30$ ;if stream, cont
	movl	#pli$_notstream,r0	;set not stream file
	brw	fail			;and fail
;
; allocate buffer if necessary
;
30$:	tstl	fcb_l_buf(ap)		;buffer already allocated?
	bneq	50$			;if neq, then yes, cont
	movzwl	fcb_w_linesize(ap),-(sp) ;push size to allocate
	movw	(sp),<fcb_b_rab+rab$w_rsz>(ap) ;set it in rab
	movb	#rab$c_seq,<fcb_b_rab+rab$b_rac>(ap) ;set for seql puts in rab
	pushl	sp			;push address of temp
	pushal	4(sp)			;push address of size
	calls	#2,g^lib$get_vm		;get buffer
	blbs	r0,40$			;if lbs, continue
	movl	#pli$_novirmem,r0	;set no virt. mem.
	brw	fail			;and fail
40$:	popl	r1			;get addr of buf
	movl	r1,fcb_l_buf(ap)	;store addr in fcb
	movl	r1,fcb_l_buf_pt(ap)	;init buf pt
	movl	r1,<fcb_b_rab+rab$l_rbf>(ap) ;store in rab
;
; process page, line, and skip options
;
50$:	insv	<str_b_field+22>(r11),#rab$v_cco, -;set cco in rop
		#1,<fcb_b_rab+rab$l_rop>(ap) ;
	tstl	<str_b_field+14>(r11)	;was page specified?
	beql	60$			;if eql, then no, cont
	bbs	#atr_v_print,fcb_l_attr(ap),55$ ;if print ok
53$:	movl	#pli$_notprint,r0	;set not print file
	brw	fail			;and fail
55$:	jsb	g^pli$$putpage_r6	;do a put page
60$:	movl	str_b_field+10(r11),r1	;was line specified?
	beql	70$			;if eql, then no
	bbc	#atr_v_print,fcb_l_attr(ap),53$ ;if not print, error
	jsb	g^pli$$putline_r6	;process the line option
70$:	movl	<str_b_field+18>(r11),r2 ;was skip specified?
	beql	100$			;if eql, no, cont
	movzwl	(r2),r2			;get number to skip
	jsb	g^pli$$putskip_r2	;process the skips
;
; return to inline code
;	
100$:	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	jmp	@str_b_field+26(r11)	;'return'

fail:	bicw	#1@atr_v_recur,fcb_l_attr(ap);reset recursion bit
	clrl	(fp)			;remove any handler
	movl	r0,fcb_l_error(ap)	;set error in fcb
	pushl	ap			;set fcb address
	pushl	r0			;set error code
	pushl	#pli$_error		;set error condition
	calls	#3,g^pli$io_error	;signal error condition
	ret				;return


	.end
