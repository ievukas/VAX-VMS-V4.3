	$BEGIN	RMS0LSTCH,000,RM$RMS,<RMS ABORT I/O FOR PROCESS DELETE>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; Facility:
;		RMS
;
; Abstract:
;		Causes eof mark and dirty buffers for non-shared files
;		to be written to disk.
;
;		If a global buffer section is found for a file, the use count
;		is decremented, and if we are last accessor, all buffer
;		locks in the section are released.
;
; Environment:
;		Kernel or exec mode, asynchronous process deletion.
;
; Author:
;		Leo Laverdure		creation date: 21-Feb-1978
;
; Modified By:
;
;	V03-026	JEJ0035		J E Johnson		08-May-1984
;		Another $GETLKIW problem: now look at the proper byte
;		in the stack to find the currently granted mode of the
;		lock.
;
;	V03-025	SHZ0015		Stephen H. Zalewski,	04-May-1984
;		Routine rm$unmap_gbl now set up its own registers, so
;		remove register setup from last chance.
;
;	V03-024	JEJ0024		J E Johnson		09-Apr-1984
;		Fix broken argument pointer in $GETLKIW call.  Also
;		do not bugcheck if $GETLKIW fails with IVLOCKID as
;		the previous $DEQ had killed a new lock before it
;		completed.
;
;	V03-023	DGB0025		Donald G. Blair		09-Mar-1984
;		Allocate full-length fib to support access mode
;		protected files.
;
;	V03-022	SHZ0014		Stephen H. Zalewski,  	22-Feb-1984
;		Do not do write the file header characteristics of a file
;		that is not accessed.
;
;	V03-021	SHZ0013		Stephen H. Zalewski	06-Dec-1983
;		Use FTL error code if $GETLKIW fails.  Also, do not attempt
;		to unmap a global buffer section if section is not accessible.
;		This could happen if process was in RMS0CLOSE, had unmapped
;		the section, but had not dequeued its lock on the global 
;		section yet, and a $STOP was issued on the process.
;
;	V03-020	SHZ0012		Stephen H. Zalewski	10-Aug-1983
;		Change the way the GBSB lock is obtained.
;
;	V03-019	SHZ0011		Stephen H. Zalewski	04-Aug-1983
;		Fix broken branch.  Also make sure that the parent lock
;		is specified when taking out the global section lock.
;
;	V03-018	SHZ0010		Stephen H. Zalewski	02-Aug-1983
;		If global buffers are present, disassociate from global
;		section before lowering the EX lock on GBSB.  Also, do
;		not attempt to get EX lock on global buffer section if
;		we already have it.
;
;	V03-017	SHZ0009		Stephen H. Zalewski	28-Jul-1983
;		Add support for cluster global buffers.
;
;	V03-016	SHZ0008		Stephen H. Zalewski	26-Jun-1983
;		Fix bad branch.
;
;	V03-015	SHZ0007		Stephen H. Zalewski	22-Jun-1983
;		Fix broken instruction.
;
;	V03-014	SHZ0006		Stephen H. Zalewski	26-Apr-1983
;		Write out the file header and current bdb (if possible)
;		for non-shared files.
;
;	V03-013	JWH0137		Jeffrey W. Horn		24-Nov-1982
;		Make code pick up size of IFB/IRB table from
;		IMP$L_ENTPERSEG instead of IMP$C_ENTPERSEG.
;
;	V03-012	KBT0341		Keith B. Thompson	20-Sep-1982
;		Rewrite
;
;	V03-011	SHZ0005		Stephen H. Zalewski,	10-Sep-1982  22:05
;		Remove all references to SFD, SIFB and FRB structures as they
;		no longer exist.
;
;	V03-010	SHZ0004		Stephen H. Zalewski,	7-Sep-1982  22:28
;		If corrupt GBD found in global buffer section force a bugcheck
;		instead of simply fixing it.  Self-relative queue instructions
;		should prevent corruption.  This code that checks for corrupt
;		GBDs will be REMOVED at a future date.
;
;		Fix branch that caused process to attempt to deallocate a lock
;		on a global buffer section when it did not own a lock.
;
;	V03-009	SHZ0003		Stephen H. Zalewski,	6-Sep-1982  19:52
;		If stream has global buffers, dequeue lock on global buffer
;		section, and give back space used for GBSB.
;
;	V03-008	KBT0184		Keith B. Thompson	23-Aug-1982
;		Reorganize psects
;
;	V03-007	KBT0095		Keith B. Thompson	19-Jul-1982
;		Stuff IFAB into R9 when calling TAKE_SIFAB1
;
;	V03-006	TMK0001		Todd M. Kayz		02-Jul-1982
;		Deleted $NRPDEF. RMS cluster solution for next record 
;		positioning eliminates the NRP list, and the corresponding
;		symbols.
;
;	V03-005	KDM0002		Kathleen D. Morse	28-Jun-1982
;		Added $PCBDEF.
;
;	V03-004	SHZ0002		Stephen H. Zalewski,	11-Jun-1982  12:33
;		Fix misspelling of SFD$B_FRBFLGS.
;
;	V03-003	SHZ0001		Stephen H. Zalewski,	8-Jun-1982  16:32
;		Before releasing SIFB, clear the PID in the temp FRB.
;
;		Set flag saying are in kernel mode just before we release
;		SFD so that if we stall, we stall correctly.
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$ATRDEF				; File attribute code defintions
	$BDBDEF				; rms buffer descriptor block definitions
	$DEVDEF				; 
	$FIBDEF				; file information block definitions
	$GBDDEF				; global buffer descriptors
	$GBHDEF				; global buffer header
	$GBPBDEF			; global buffer pointer blocks
	$GBSBDEF			; Global buffer synchronization block definitions
	$IFBDEF				; rms ifab definitions
	$IMPDEF				; rms impure area definitions
	$IODEF				; qio function code definitions
	$IRBDEF				; rms irab definitions
	$LCKDEF				; Lock manger call definitions
	$LKIDEF				; $GETLKI definitions
	$PSLDEF				; psl bit definitions
	$QIODEF				; qio parameter definitions
	$RMSDEF				;
	$SSDEF				; sytem status code definitions


	.SBTTL	RM$LAST_CHANCE - Clean up write accessed non-shared disk files

;++
;
;  RMS$LAST_CHANCE	-
;
;	this routine implements the "abort rms i/o" rms run down option
;	(type=2).  it is called during asynchronous process deletion to
;	allow RMS32 to write out the contents of dirty buffers and record
;	the eof mark for sequential file org. disk files that are write accessed.
;	because this routine's being called from kernel mode ast level violates
;	rms synchronization and interlocking mechanisms, it is not guaranteed
;	to succeed in writing out the file correctly.  it will do as good a
;	job as possible and not fault.
;
;	the image and process ifab tables are scanned for files requiring
;	cleanup.  if any are found the appropriate buffer writing and or
;	file closing is performed.  there is no attempt to clean up the
;	rms data base.  in fact, the only rms impure data written is the rearranging
;	of the file attributes.  there should be no more calls to rms for
;	this process.
;
;	any errors which occur are ignored, as there is no place to report
;	them in any case.  in fact, this routine is almost paranoid about
;	checking the validity and accessibility of the rms structures.
;	this is required because this code is entered via kernel ast, which
;	may have interrupted rms running in exec mode, thus leaving the
;	rms structures in unknown states. because of this, a number of
;	problems exist, some of which are:
;
;		1. the current vbn may have been decremented already
;		   in the "buffer dirty but not valid" case, thus causing
;		   one block too few to be written.
;		2. a record being updated in a buffer may only be partially
;		   moved into that buffer, thus getting a mixture of old and
;		   new data.  the same problem exists for updates on records
;		   spanning block boundaries.
;		3. i/o completion on mailboxes and magtape, as well as other
;		   file organizations may not be finished properly, possibly
;		   leading to file corruption.
;
;	NOTE:	This routine should never call any normal RMS (RM$) routines.
;		
; Calling sequence:
;
;	BRW	RM$LAST_CHANCE		; ( from SYS$RMSRUNDWN (arg2=2) )
;
;	May be called from either exec or kernel mode.
;	Does a RET when done.
;
; Input Parameters:
;
;	R7	caller's mode
;
; Implicit Inputs:
;
;	the contents of the process and image i/o segments
;
; Output Parameters:
;
;	R0-R11 are destroyed
;
; Implicit Outputs:
;	none
;
; Completion Codes:
;
;	RMS$_NORMAL
;
; Side Effects:
;
;	see description above.
;
;--

RM$LAST_CHANCE::
	CMPB	R7,#PSL$C_EXEC			; caller sufficiently privileged?
	BGTRU	EXIT				; branch if not

;
;  run down the image files
;

	MOVAL	@#PIO$GW_IIOIMPA,R11		; get iio impure area address
	IFNORD	#1,(R11),EXIT,R7		; branch if page not readable
	BSBB	RUNDWN				; do the run down

;
; now run down process-permanent files
;

	MOVAL	W^PIO$GW_PIOIMPA-PIO$GW_IIOIMPA(R11),R11	; point to process i/o impure area
	BSBB	RUNDWN				; do the run down

EXIT:	MOVL	#RMS$_NORMAL,R0			; show success
	RET					; back to caller



;++
;
; run down subroutine:
;
;	Checks ifab table for write-accessed, nonshared, disk files.
;	If any found, write the current buffer, if dirty, and then deaccess
;	the file to write the current eof mark to disk.
;
;	Check for global buffers.  If global buffers are present, decrement 
;	access counts and mark invalid.
;
; inputs:
;
;	R11 - impure area addr
;	R7 - caller's mode
;
; outputs:
;
;	R0-R6, R8-R10 destroyed
;
;--

RUNDWN:
	MOVL	IMP$L_IFABTBL(R11),R5		; get ifab table addr
	MOVZWL	IMP$W_ENTPERSEG(R11),R8		; get # entries/seg
NXTSEG:	PUSHL	(R5)+				; save addr next table seg on stack
NXTENT:	MOVL	(R5)+,R10			; get ifab addr
	BNEQ	RDIFAB				; branch if one
NXTSOB:	SOBGTR	R8,NXTENT			; keep scanning segment
	MOVL	(SP)+,R5			; get next segment addr
	BEQL	10$				; branch if no more
	MOVZWL	IMP$W_ENTPERSEG(R11),R8		; get # entries/seg
	MULL3	#4,R8,R6			; get segment size
	PROBER	R7,R6,(R5)			; segment readable?
	BNEQ	NXTSEG				; branch if yes
10$:	RSB


;
; Found an ifab.
; Check that ifab is accessible and valid.
;

RDIFAB:
	IFNOWRT	#IFB$C_BLN,(R10),NXTSOB,R7	; branch if ifab not writeable
	CMPB	IFB$B_BID(R10),#IFB$C_BID	; is it really an ifab?
	BNEQ	NXTSOB				; ignore if not
	CMPB	IFB$B_BLN(R10),#IFB$C_BLN/4	; at least right length?
	BLSSU	NXTSOB				; ignore if bad

;
; Check to see if write-accessed, non-shared disk file, and ignore if not.
;
	BSBW	CHECK_GBL_BUFFERS		; Release any global buffers.
	BBC	#IFB$V_ACCESSED,(R10),NXTSOB	; Branch if not accessed.
	BBC	#IFB$V_WRTACC,(R10),NXTSOB	; Branch if not write accessed.
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R10),NXTSOB ; Branch if not disk.
	TSTL	IFB$L_SFSB_PTR(R10)		; Is this file shared?
	BNEQ	NXTSOB				; Yes, skip it.

;
; Find irab, if one, and verify it.
;
	MOVL	IFB$L_IRAB_LNK(R10),R9		; Get irab address
	BEQL	CLOSE_BR			; Branch if none.
	IFNORD	#IRB$C_BLN_SEQ,(R9),NXTSOB,R7	; branch if not readable.
	CMPB	IRB$B_BID(R9),#IRB$C_BID	; Is is really an irab?
	BNEQ	NXTSOB				; No, skip file.
	CMPB	IRB$B_BLN(R9),#IRB$C_BLN_SEQ/4	; long enough?
	BLSSU	NXTSOB				; No, skip file.


;
;  check for valid current bdb.  if found and dirty, write it.
;

	MOVL	IRB$L_CURBDB(R9),R4		; get bdb address
	BEQL	CLOSE_BR			; brach if none
	IFNORD	#BDB$C_BLN,(R4),CLOSE_BR,R7	; branch if not readable
	ASSUME	BDB$B_BLN EQ BDB$B_BID+1
	CMPW	BDB$B_BID(R4),-			; valid bdb?
		#BDB$C_BID+<<BDB$C_BLN/4>@8>
	BEQL	CHKDRT				; branch if yes
CLOSE_BR:
	BRW	CLOSE				; extended branch to close file
CHKDRT:	BBC	#BDB$V_DRT,BDB$B_FLGS(R4),CLOSE	; branch if buffer not dirty

;
;  bdb marked dirty.
;  compute size of buffer to be written.
;

	MOVZBL	BDB$B_REL_VBN(R4),R6		; get current vbn
	ASSUME	BDB$V_VAL EQ 0
	BLBS	BDB$B_FLGS(R4),10$		; branch if buffer valid
	DECL	R6				; buffer dirty but marked invalid, 
						;  decrement the current vbn data.
;
; compute byte count for transfer
; (i.e., transfer all blocks thru current vbn or # val_vbns if greater)
;

10$:	INCW	R6				; get # vbns
	CMPB	R6,BDB$B_VAL_VBNS(R4)		; is current greater than  # valid vbns?
	BGEQU	20$				; branch if yes
	MOVZBL	BDB$B_VAL_VBNS(R4),R6		; no - so use # valid vbns

;
;  check for extend of disk file
;

20$:	ADDL3	BDB$L_VBN(R4),R6,R1		; get end vbn+1
	DECL	R1				; make it end vbn
	SUBL2	IFB$L_HBK(R10),R1		; need to extend file?
	BLEQ	WRITE				; branch if not
	BSBW	EXTEND_FILE			; Extend the file
	BLBS	R0,WRITE			; Write buffer if extend succeded.
	BRW	NXTSOB				; Extend failed, go to next file.
;
;  now write the buffer
;

WRITE:	CLRQ	-(SP)			; make iosb
	MOVL	SP,R2			; save iosb addr
	CLRQ	-(SP)			; p6=p5=0
	CLRL	-(SP)			; p4=0
	PUSHL	BDB$L_VBN(R4)		; p3=vbn
	ROTL	#9,R6,-(SP)		; p2=# of bytes to write
	PUSHL	BDB$L_ADDR(R4)		; p1=buffer addr
	MOVL	#IO$_WRITEVBLK,R0	; i/o function code
	BSBW	DOQIO			; do the write
	POPR	#^M<R0,R1>		; clean stack


;++
;
;  Now close the file, building attribute list on stack to rewrite 
;  the record attributes.
;
;--

CLOSE:	CLRQ	-(SP)			; make iosb
	MOVL	SP,R2			; save iosb addr
	PUSHL	#0			; end of attribute list flag
	PUSHAL	IFB$B_RFMORG(R10)	; write attributes from ifab
	PUSHL	#<ATR$C_RECATTR@16>+<IFB$C_FHAEND-IFB$B_RFMORG>	; length & record attriubtes code

;
; Put org back into rfmorg byte.
;

	INSV	IFB$B_ORGCASE(R10),#IFB$V_ORG,-  
		#IFB$S_ORG,IFB$B_RFMORG(R10)

;
;  swap the words of IFB$L_HBK and IFB$L_EBK to match files-11
;  on-disk structure
;

	ROTL	#16,IFB$L_HBK(R10),IFB$L_HBK_DISK(R10)
	ROTL	#16,IFB$L_EBK(R10),IFB$L_EBK_DISK(R10)

;
;  do the deaccess qio
;

	CLRL	-(SP)			; p6=0
	PUSHAL	4(SP)			; p5=attribute list addr
	CLRQ	-(SP)			; p4=p3=0
	CLRQ	-(SP)			; p2=p1=0
	MOVZBL	#IO$_DEACCESS,R0	; deaccess function code
	BSBW	DOQIO			; do the deaccess
	ADDL2	#20,SP			; clean stack
	BRW	NXTSOB			; go handle next file


;++
;
;  extend file 
;
;
; Inputs:
;	r10 - IFB address
;	r1  - # blocks required
;
; Outputs:
;	IFB$L_HBK will contain the new high block.
;	r0,r2,r3 destroyed
;
;--

EXTEND_FILE:
;
;  initialize an io status block and a fib on the stack
;

	CLRQ	-(SP)				; iosb
	MOVL	SP,R2				; save iosb address
	.REPT	<<FIB$C_LENGTH+7>/8>		; clear fib on stack
	CLRQ	-(SP)				; note: 8 clrq's faster/smaller
	.ENDM					;   than movc5

	MOVL	R1,FIB$L_EXSZ(SP)		; set # blocks required
	MOVB	#FIB$M_EXTEND,FIB$W_EXCTL(SP)	; say it's an extend
	MOVB	IFB$B_AGENT_MODE(R10),-		; store agent mode in fib
		FIB$B_AGENT_MODE(SP)

;
; build the fib descriptor and qio parameters on the stack and do the extend.
;

	PUSHL	SP			; addr of fib
	MOVZBL	#FIB$C_LENGTH,-(SP)	; length of fib
	CLRQ	-(SP)			; p6=p5=0
	CLRQ	-(SP)			; p4=p3=0
	CLRL	-(SP)			; p2=0
	PUSHAL	20(SP)			; p1=fib descriptor address
	MOVL	#IO$_MODIFY,R0		; io function code
	BSBW	DOQIO			; do the extend
	BLBC	R0,30$			; branch on failure

;
; extend complete.
; update ifab hi block field, deallocate the fib, and return
;

	ADDL3	FIB$L_EXSZ+8(SP),-
		FIB$L_EXVBN+8(SP),-
		IFB$L_HBK(R10)
	DECL	IFB$L_HBK(R10)			; get # of highest allocated blk
30$:	ADDL2	#16+<<FIB$C_LENGTH+7>&^XF8>,SP	; clean stack
	RSB


;++
;
;  doqio subroutine to perform the qio
;
;  inputs:
;
;	R10	ifab address
;	R2	iosb address
;	R0	qio function code
;	P1 thru P6 already on stack.
;
;  outputs:
;
;	R0,R1	destroyed
;
;--

	ASSUME	QIO$_ASTPRM EQ <QIO$_P1 - 4>
	ASSUME	QIO$_ASTADR EQ <QIO$_ASTPRM - 4>
	ASSUME	QIO$_IOSB EQ <QIO$_ASTADR - 4>
	ASSUME	QIO$_FUNC EQ <QIO$_IOSB - 4>
	ASSUME	QIO$_CHAN EQ <QIO$_FUNC - 4>
	ASSUME	QIO$_EFN EQ <QIO$_CHAN - 4>
	ASSUME	QIO$_NARGS EQ 12

DOQIO:	POPR	#^M<R3>				; Remove return PC from stack.
	CLRQ	-(SP)				; no ast wanted
	PUSHL	R2				; iosb addr
	PUSHL	R0				; i/o function code
	MOVZWL	IFB$W_CHNL(R10),-(SP)		; i/o channel
	PUSHL	#IMP$C_IOREFN			; efn
	CALLS	#12,@#SYS$QIO			; do the qio
	BLBC	R0,20$				; branch on failure
10$:	MOVL	(R2),R0				; get status from iosb
	BNEQ	20$				; and branch if io really done
	$CLREF_S	#IMP$C_IOREFN		; clear qio event flag
	TSTL	(R2)				; done now?
	BNEQ	10$				; branch if yes
	$WAITFR_S	#IMP$C_IOREFN		; wait for flag
	BRB	10$				; go check if done
20$:	JMP	(R3)				; Return.


;++
;
;  If global buffers are present, the BDB/GBPB list is scanned looking for
;  any GBPB's currently accessed (usecnt neq 0) and the access count in the
;  corresponding GBD is decremented for those found.  This does NOT guarantee
;  that GBD's will always be correct, but the error is that one might not
;  be decremented when it should, rather than decrementing one incorrectly.
;  Because of the kernel ast, extraordinary measures are necessary to guarantee
;  correctness, and the failure to decrement the GBD use count simply makes
;  that buffer ineligible for replacement from the cache.  The window is fairly
;  small and this is considered acceptable behavior.
;
; Inputs:
;	r10 - ifb address
;
; Outputs:
;	r0 - r9 destroyed
;
;--
CHECK_GBL_BUFFERS:
	MOVL	IFB$L_GBH_PTR(R10),R6		; get pointer to gbh
	BNEQ	10$				; if one then chk gbl buffers
	RSB					; Return if none.
10$:	MOVL	IFB$L_GBSB_PTR(R10),R4		; get gbsb
	$DEQ_S	LKID	= GBSB$L_LOCK_ID(R4),-	; Cancel any current lock requests
		FLAGS	= #LCK$M_CANCEL

;
; Build item list for $GETLKI call.
;

	CLRQ	-(SP)				; 4 byte buffer & 4 byte return length buffer.
	CLRL	-(SP)				; End of item list.
	PUSHAL	8(SP)				; Address of return length buffer.
	PUSHAL	8(SP)				; Address of buffer
	PUSHL	#<LKI$_STATE@16>+3		; Item code and buffer size.
	MOVL	SP,R0				; Get the item list pointer

	$GETLKIW_S EFN     = #IMP$C_ASYQIOEFN,-	; Get current lock mode.
		   LKIDADR = GBSB$L_LOCK_ID(R4),-
		   ITMLST  = (R0)

	MOVZBL	LKI$B_STATE_GRMODE+16(SP), R2	; Get current lock mode into R2.
	ADDL2	#24,SP				; Clean up stack.	
	BLBS	R0,15$				; Continue is successful.
	CMPW	R0,#SS$_IVLOCKID		; The only acceptable error
	BNEQ	12$				; (caused by $DEQ above), is
	RSB					; from last chance coming in
						; before $ENQ had created the
						; new lock.
12$:	RMSPBUG	FTL$_GETLKIFAIL			; Otherwise, SHOULD NEVER FAIL.
15$:	CMPB	#LCK$K_EXMODE, R2		; Do we already have EX lock?
	BEQL	20$				; Yes, then do not queue for lock.

	$ENQW_S	EFN 	= #IMP$C_ASYQIOEFN,-
		LKMODE	= #LCK$K_EXMODE,-	; get exclusive access to the
		PARID	= G^EXE$GL_SYSID_LOCK,-	;  global buffer section
		LKSB	= GBSB$L_LKSB(R4),-
		RESNAM	= GBSB$Q_FILENAME(R4),-
		FLAGS	= #LCK$M_SYSTEM!LCK$M_SYNCSTS!LCK$M_VALBLK

	BLBS	R0,20$				; Continue if success.
	RMSPBUG	FTL$_ENQDEQFAIL			; WE CANNOT FAIL!

;
; There is a global buffer section present.
; Check if section accessible and valid.
; Scan GBPB's and deaccess appropriate GBD's if found.
; 

20$:	IFNORD	#GBH$C_BLN,(R6),DEQLCK,R7	; Skip over if not accessible.
	ASSUME	<GBH$B_BID + 1>	EQ	GBH$B_BLN
	CMPW	#<GBH$C_BID+<GBH$C_BLN/4@8>>,-	; check if it looks ok.
		GBH$B_BID(R6)
	BNEQ	DEQLCK				; NEQ the header is bad.
	MOVAL	IFB$L_BDB_FLNK(R10), R0		; Get BDB queue header addr.
	MOVL	R0,R1				; Save for end test.

;
;  Scan the bdb queue looking for a gbpb
;

	ASSUME	BDB$L_FLINK	EQ	0
	ASSUME	BDB$L_FLINK	EQ	GBPB$L_FLINK

SCAN:	MOVL	(R0),R0				; Get next element.
	CMPL	R0,R1				; At end of list?
	BEQL	CLN_UP				; EQL then at end.
	IFNORD	#GBPB$C_BLN,(R0),SCAN,R7	; If not accessible, skip on.
	ASSUME	GBPB$B_BID	EQ	BDB$B_BID
	ASSUME	GBPB$B_BLN	EQ	BDB$B_BLN
	ASSUME	<GBPB$B_BID + 1>EQ	GBPB$B_BLN
	CMPW	#<GBPB$C_BID+<GBPB$C_BLN/4@8>>,- ; Is it legit GBPB?
		GBPB$B_BID(R0)
	BNEQ	SCAN				; NEQ then no good.

;
; Found a valid and readable GBPB.  If the use count not zero,
; fix count on corresponding GBD and mark GBD invalid in case the
; buffer was partially modified.  This will force it to be read
; from disk when the next accessor gains control.
;

	TSTW	GBPB$W_USERS(R0)		; is it in use?
	BEQL	SCAN				; EQL no, so cont scan
	MOVL	GBPB$L_GBD_PTR(R0),R2		; get addr of GBD
	IFNOWRT	#GBD$C_BLN,(R2),SCAN,R7		; if not writeable, cont scan
	ASSUME	<GBD$B_BID+1>	EQ	GBD$B_BLN
	CMPW	#GBD$C_BID+<GBD$C_BLN/4@8>,-	; is it legit GBD?
		GBD$B_BID(R2)
	BNEQ	SCAN				; skip it if no good
	DECW	GBD$W_USECNT(R2)		; adjust use count
	BNEQ	SCAN				; if <>0 then we could not have
						;  been writing so don't invalidate
	MNEGL	#1,GBD$L_VBNSEQNUM(R2)		; mark invalid by setting sequence number to -1
	BRB	SCAN				; continue scan of GBPB's

;
;  Check to see if last accessor.  If so, then release all buffers in
;  in cache.  Disassociate from the global section, and release the GBSB and
;  associated lock.
;

CLN_UP:	JSB	RM$RELEASE_GBL_BUFFERS		; Flush cache if last accessor.
	JSB	RM$UNMAP_GBL			; Disassociate from section.
DEQLCK:	$DEQ_S	LKID	= GBSB$L_LOCK_ID(R4),-	; Release the global section lock
		VALBLK	= GBSB$L_LKSB+8(R4)	;  writing out the value block.
	RSB

	.END
