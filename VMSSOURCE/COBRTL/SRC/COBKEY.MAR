	.TITLE	COB$$CONTROL_KEY - Key translation 
	.IDENT	/1-001/		; File: COBKEY.MAR Edit: DG1001

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Run-Time Library COBOL support
;
; ABSTRACT:
;
;	This module contains a routine which converts
;	terminator sequences to COBOL defined sequences
;
; ENVIRONMENT: Runs at any access mode, AST Reentrant
;
; AUTHOR: Debess Grabazs, CREATION DATE: 14-June-1983
;
; MODIFIED BY:
;
; 1-001	- Original. DG 14-June-1983
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
	$DSCDEF			; Get descriptor definitions
	$SMGDEF			; Get terminator codes
	
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL		; Force all external symbols to be declared
	.EXTRN  SMG$$TERM_TO_KEYCODE	; Translate terminator to key code
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;

	K_TAB = 9
	K_RETURN = 13
	K_CTRLZ = 26
	K_SS3 = 143
	K_CSI = 155

;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;

	.PSECT _SMG$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	Table for COBOL defined KEY sequences

TABLE:
	.WORD	SMG$K_TRM_UP
	.WORD	2
	.BYTE 	K_CSI
	.ASCII	"A"
	.WORD	SMG$K_TRM_DOWN
	.WORD	2
	.BYTE 	K_CSI
	.ASCII	"B"
	.WORD	SMG$K_TRM_RIGHT
	.WORD	2
	.BYTE 	K_CSI
	.ASCII	"C"
	.WORD	SMG$K_TRM_LEFT
	.WORD	2
	.BYTE 	K_CSI
	.ASCII	"D"
	.WORD	SMG$K_TRM_ENTER
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"M"
	.WORD	SMG$K_TRM_PF1
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"P"
	.WORD	SMG$K_TRM_PF2
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"Q"
	.WORD	SMG$K_TRM_PF3
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"R"
	.WORD	SMG$K_TRM_PF4
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"S"
	.WORD	SMG$K_TRM_COMMA
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"l"
	.WORD	SMG$K_TRM_MINUS
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"m"
	.WORD	SMG$K_TRM_PERIOD
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"n"
	.WORD	SMG$K_TRM_KP0
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"p"
	.WORD	SMG$K_TRM_KP1
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"q"
	.WORD	SMG$K_TRM_KP2
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"r"
	.WORD	SMG$K_TRM_KP3
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"s"
	.WORD	SMG$K_TRM_KP4
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"t"
	.WORD	SMG$K_TRM_KP5
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"u"
	.WORD	SMG$K_TRM_KP6
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"v"
	.WORD	SMG$K_TRM_KP7
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"w"
	.WORD	SMG$K_TRM_KP8
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"x"
	.WORD	SMG$K_TRM_KP9
	.WORD	2
	.BYTE 	K_SS3
	.ASCII	"y"
	.WORD	SMG$K_TRM_FIND
	.WORD	3
	.BYTE 	K_CSI
	.ASCII	"1"
	.ASCII	"~"
	.WORD	SMG$K_TRM_INSERT_HERE
	.WORD	3
	.BYTE 	K_CSI
	.ASCII	"2"
	.ASCII	"~"
	.WORD	SMG$K_TRM_REMOVE
	.WORD	3
	.BYTE 	K_CSI
	.ASCII	"3"
	.ASCII	"~"
	.WORD	SMG$K_TRM_SELECT
	.WORD	3
	.BYTE 	K_CSI
	.ASCII	"4"
	.ASCII	"~"
	.WORD	SMG$K_TRM_PREV_SCREEN
	.WORD	3
	.BYTE 	K_CSI
	.ASCII	"5"
	.ASCII	"~"
	.WORD	SMG$K_TRM_NEXT_SCREEN
	.WORD	3
	.BYTE 	K_CSI
	.ASCII	"6"
	.ASCII	"~"
	.WORD	SMG$K_TRM_F6
	.WORD	4
	.BYTE 	K_CSI
	.ASCII	"1"
	.ASCII	"7"
	.ASCII	"~"
	.WORD	SMG$K_TRM_F7
	.WORD	4
	.BYTE 	K_CSI
	.ASCII	"1"
	.ASCII	"8"
	.ASCII	"~"
	.WORD	SMG$K_TRM_F8
	.WORD	4
	.BYTE 	K_CSI
	.ASCII	"1"
	.ASCII	"9"
	.ASCII	"~"
	.WORD	SMG$K_TRM_F9
	.WORD	4
	.BYTE 	K_CSI
	.ASCII	"2"
	.ASCII	"0"
	.ASCII	"~"
	.WORD	SMG$K_TRM_F10
	.WORD	4
	.BYTE 	K_CSI
	.ASCII	"2"
	.ASCII	"1"
	.ASCII	"~"
	.WORD	SMG$K_TRM_F11
	.WORD	4
	.BYTE 	K_CSI
	.ASCII	"2"
	.ASCII	"3"
	.ASCII	"~"
	.WORD	SMG$K_TRM_F12
	.WORD	4
	.BYTE 	K_CSI
	.ASCII	"2"
	.ASCII	"4"
	.ASCII	"~"
	.WORD	SMG$K_TRM_F13
	.WORD	4
	.BYTE 	K_CSI
	.ASCII	"2"
	.ASCII	"5"
	.ASCII	"~"
	.WORD	SMG$K_TRM_F14
	.WORD	4
	.BYTE 	K_CSI
	.ASCII	"2"
	.ASCII	"6"
	.ASCII	"~"
	.WORD	SMG$K_TRM_HELP
	.WORD	4
	.BYTE 	K_CSI
	.ASCII	"2"
	.ASCII	"8"
	.ASCII	"~"
	.WORD	SMG$K_TRM_DO
	.WORD	4
	.BYTE 	K_CSI
	.ASCII	"2"
	.ASCII	"9"
	.ASCII	"~"
	.WORD	SMG$K_TRM_F17
	.WORD	4
	.BYTE 	K_CSI
	.ASCII	"3"
	.ASCII	"1"
	.ASCII	"~"
	.WORD	SMG$K_TRM_F18
	.WORD	4
	.BYTE 	K_CSI
	.ASCII	"3"
	.ASCII	"2"
	.ASCII	"~"
	.WORD	SMG$K_TRM_F19
	.WORD	4
	.BYTE 	K_CSI
	.ASCII	"3"
	.ASCII	"3"
	.ASCII	"~"
	.WORD	SMG$K_TRM_F20
	.WORD	4
	.BYTE 	K_CSI
	.ASCII	"3"
	.ASCII	"4"
	.ASCII	"~"
	.WORD	0		; End of table


	.SBTTL	COB$$CONTROL_KEY - Translate terminator to COBOL sequence
;++
; FUNCTIONAL DESCRIPTION:
;
;	COB$$CONTROL_KEY translates a terminator character sequence
;	to a COBOL defined sequence.
;
; CALLING SEQUENCE:
;
;	CALL COB$$CONTROL_KEY (terminator.rt.r, term_length.rl.v, key.wt.ds)
;
;
; FORMAL PARAMETERS:
;
	terminator = 4		; The terminator string, passed by reference.

	term_length = 8		; The length of the terminator string, passed
				; by immediate value.

	key = 12		; Destination of receiving field of the 
				; control key, passed by descriptor.

;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION STATUS: 
;
;	NONE
;
; SIDE EFFECTS:
;
;	KEY gets filled in with the appropriate COBOL defined sequence.
;
;--

ONE:	.WORD	1
SPACE:	.ASCII	" "

	.ENTRY	COB$$CONTROL_KEY, ^M<R2>

;+
; Space fill KEY to initialize
;-

	MOVL	key(AP), R0
	MOVC5	ONE, SPACE, #^A/ /, DSC$W_LENGTH(R0), @DSC$A_POINTER(R0)

;+
; Translate terminator sequence to key code
;-

	PUSHL	term_length(AP)
	PUSHL	@terminator(AP)
	CALLS	#2, SMG$$TERM_TO_KEYCODE

;+
; Search the table to determine what COBOL defined sequence to put in KEY.  
; R1 will be loaded with the table address and R0 is the key code returned
; by SMG$$TERM_TO_KEYCODE.
;-

	MOVAB	W^TABLE, R1

10$:	MOVZWL	(R1)+, R2		; Get word to compare against
	BEQL	NOTRANS			; End of table?
	CMPW	R2, R0			; Compare character
	BEQL	FOUND			; End if found
	ADDW3	#2, (R1), R2		; Skip over contents
	ADDW2	R2, R1
	BRB	10$			; Repeat until found or table end

;+
; Translation found.  Store the counted sequence which is in the bytes 
; addressed by R1
;-
	
FOUND:
	MOVL	KEY(AP), R0
	MOVC3	(R1), 2(R1), @DSC$A_POINTER(R0)	; Put sequence in KEY
	MOVL	#1, R0				; Signal success
	RET

;+
; We get here if the terminator has no translation
;-

NOTRANS:
	MOVZWL	#SMG$K_TRM_UNKNOWN, R0	; Unknown terminator
	MOVL	#0, R0			; Signal failure - unknown key
	RET				; Return terminator code

	.END				; End of module COB$$CONTROL_KEY
