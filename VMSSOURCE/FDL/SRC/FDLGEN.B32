%TITLE	'VAX-11 FDL Utilities'
MODULE	FDLGEN	( IDENT='V04-000',
    		ADDRESSING_MODE ( EXTERNAL = GENERAL ),
    		ADDRESSING_MODE ( NONEXTERNAL = GENERAL ),
		OPTLEVEL=3
		) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 FDL Utilities
!
! Abstract:
!		Callable routines
!
! Contents:
!		FDL$$GEN_SPEC
!		GEN_PRIMARY
!		CHECK_XAB
!		FDL$$CHECK_BLOCK
!		FDL$$FORMAT_LINE
!		FETCH_FIELD
!		FDL$$OUTPUT_LINE
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Ken F Henderson Jr	Creation Date		2 Dec 1982
!
!
! Modified by:
!
!		V03-016	DAS0001		David Solomon		06 Jul 1984
!			Don't generate DATA_FILL or INDEX_FILL secondary's
!			for the key primary if $XABALL's don't exist.
!
!		V03-015 RRB0015		Rowland R. Bradley	29 Feb 1984
!			Comment out or remove references
!			ACLs and Erase_on_Delete
!
!		V03-013	KFH0012		Ken Henderson		 8 Oct 1983
!			Fix generation of bits that have
!			inverted sense when set:
!			Data Key Comp, Data Rec Comp,
!			Index Comp, and Block Span
!
!		V03-012	KFH0011		Ken Henderson		26 Sep 1983
!			Fix generation of format=fixed.
!
!		V03-011	KFH0010		Ken Henderson		23 Aug 1983
!			Fixed calls to GET_VM and FREE_VM.
!
!		V03-010	KFH0009		Ken Henderson		29 Jul 1983
!			Fixed CHECK_XAB and FETCH_FIELD
!			Check status of calls to LIB$ and SYS$
!			Changed RU JNL bits
!			Added DEFERRED_WRITE, ERASE_ON_DELETE
!
!		V03-009	KFH0008		Ken Henderson		31 Jan 1983
!			Enabled XAB$C_IN8 and XAB$C_BN8
!
!		V03-008	KFH0007		Ken Henderson		28 Jan 1983
!			Only stuff FDL$AB_AREA_BKZ if not
!			deallocating blocks
!
!		V03-007	KFH0006		Ken Henderson		21 Jan 1983
!			Fixed deallocation of file name
!			in FDL$$CHECK_BLOCKS
!
!		V03-006	KFH0005		Ken Henderson		6 Jan 1983
!			Fixed deallocation of key names
!			in CHECK_XAB
!
!		V03-005	KFH0004		Ken Henderson		5 Jan 1983
!			Added alloc/dealloc of FDL$AB_AREA_BZK
!			to FDL$$CHECK_BLOCKS
!
!		V03-004	KFH0003		Ken Henderson		4 Jan 1983
!			Fixed CHECK_XAB deallocation of
!			KEYXABs and FDL$$CHECK_BLOCKS
!			deallocation of NAM blocks
!
!		V03-003	KFH0002		Ken Henderson		30 Dec 1982
!			Fixed broken branches
!
!		V03-002	KFH0001		Ken Henderson		15 Dec 1982
!			Finished IDENT, SYSTEM, POSITION
!
!****


PSECT
	OWN	= _FDL$OWN	(PIC),
	GLOBAL	= _FDL$GLOBAL	(PIC),
	PLIT	= _FDL$PLIT	(SHARE,PIC),
	CODE	= _FDL$CODE	(SHARE,PIC);

LIBRARY	'SYS$LIBRARY:STARLET';
REQUIRE	'SRC$:FDLUTIL';
REQUIRE	'LIB$:FDLPARDEF';

EXTERNAL ROUTINE
	SYS$FAO,
	SYS$ASCTIM,
	LIB$GET_VM,
	LIB$FREE_VM,
	STR$APPEND,
	FDL$$FREE_VM,
	FDL$$READ_ERROR		: NOVALUE,
	FDL$$RMS_OPEN_ERROR	: NOVALUE;

FORWARD ROUTINE
	GEN_PRIMARY,
	FDL$$FORMAT_LINE,
	FDL$$OUTPUT_LINE,
	FDL$$CHECK_BLOCKS,
	FETCH_FIELD;


EXTERNAL
	FDL$AB_PRI_TABLE		:
    BLOCKVECTOR [ FDL$C_PRITAB_SIZE, FDL$C_PRIBLK_SIZE ] FIELD (PRITAB_FIELDS),

	FDL$AB_SEC_TABLE		:
    BLOCKVECTOR [ FDL$C_SECTAB_SIZE, FDL$C_SECBLK_SIZE ] FIELD (SECTAB_FIELDS),

	FDL$AB_OUT_STRING	: REF DESC_BLK,
	FDL$AB_GENFAB		: REF BLOCK [ ,BYTE ],
	FDL$AB_GENRAB		: REF BLOCK [ ,BYTE ],
	FDL$AB_FDL_RAB		: BLOCK [ ,BYTE ],
	FDL$AB_CTRL		: BLOCK [ ,BYTE ],
	FDL$AB_BLOCK_BLK	: VECTOR [ 4,LONG ],
	FDL$AB_AREA_BKZ		: REF VECTOR [ ,BYTE ],
	FDL$GL_INVBLK_PTR,
	FDL$GL_STNUMPTR,
	FDL$GL_MAXLINE,
	FDL$GL_SECNUM,
	FDL$GL_PRIMARY,
	FDL$GL_PRINUM,
	FDL$GL_SECONDARY,
	FDL$AB_FDL_STRING	: DESC_BLK,
	FDL$AB_LINE		: DESC_BLK,
	FDL$AB_UPCASED		: DESC_BLK,
	FDL$AB_KEY_TABLE,
	FDL$AB_STATE_TABLE,
	FDL$AB_TPARSE_BLOCK	: BLOCK [ ,BYTE ];

OWN
	TEMP_DESC		: DESC_BLK
				PRESET(	[ DSC$B_CLASS ] = DSC$K_CLASS_S,
					[ DSC$B_DTYPE ] = DSC$K_DTYPE_T ),
	FAO_DESC		: DESC_BLK
				PRESET(	[ DSC$B_CLASS ] = DSC$K_CLASS_S,
					[ DSC$B_DTYPE ] = DSC$K_DTYPE_T ),
	TIME_BUF		: DESC_BLK
				PRESET(	[ DSC$B_CLASS ] = DSC$K_CLASS_S,
					[ DSC$B_DTYPE ] = DSC$K_DTYPE_T ),
	TIME_TEMP		: VECTOR [ 23,BYTE ],
	FAO_LENGTH		: LONG,
	FAO_PARAM		: LONG,
	FAO_PARAM2		: LONG,
	FAO_PARAM3		: LONG,
	FAO_PARAM4		: LONG,
	STRBYTES		: LONG,
	OCHAR			: REF VECTOR [ ,BYTE ],
	XABPRO_PTR		: LONG,
	XABRDT_PTR		: LONG,
	XABDAT_PTR		: LONG,
	XABJNL_PTR		: LONG,
	XABALL_PTR		: REF BLOCK [ ,BYTE ],
	XABKEY_PTR		: REF BLOCK [ ,BYTE ],
	SAVE_POINTER		: REF BLOCK [ ,BYTE ],

	PROT_VALUES		: VECTOR [ 16,LONG ] INITIAL (
	    %ASCID 'RWED',
	    %ASCID 'WED',
	    %ASCID 'RED',
	    %ASCID 'ED',
	    %ASCID 'RWD',
	    %ASCID 'WD',
	    %ASCID 'RD',
	    %ASCID 'D',
	    %ASCID 'RWE',
	    %ASCID 'WE',
	    %ASCID 'RE',
	    %ASCID 'E',
	    %ASCID 'RW',
	    %ASCID 'W',
	    %ASCID 'R',
	    %ASCID '');


DEFINE_ERROR_CODES;

%SBTTL	'FDL$$GEN_SPEC'
GLOBAL ROUTINE FDL$$GEN_SPEC =
!++
!
! Functional Description:
!
!	This routine xxxxxxxxxxxxxx
!
! Calling Sequence:
!
!	fdl$$gen_spec(	fdl_string )
!
! Input Parameters:
!
!	fdl_desc	- descriptor of the fdl file name string (required)
!	file_name	- descriptor file name to overide the name specified
!			  in the fdl file (optional)
!	default_name	- descriptor default file name to overide the default
!			  name specified in the fdl file (optional)
!
!	flags		- address of flags longword (optional)
!		FDL$V_SIGNAL		signal errors instead of returning
!		FDL$V_FDL_STRING	input fdl-spec is a char string
!		FDL$V_$CALLBACK		used by EDF
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	result_name	- descriptor to receive the file name which was created
!			  (optional)
!	fid_block	- address of a 3 longword used block to receive the fid
!			  of the file created (optional)
!
!	stmnt-num	- address of longword to recieve statement
!			  number (optional)
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	success or error code
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	BYTES		: LONG,
	LINE 		: REF BLOCK [ FDL$C_SECBLK_SIZE ] FIELD (SECTAB_FIELDS);

    ! Waste 23 bytes to create a buffer to hold the time
    !
    BYTES = 23;
    CH$FILL ( 0, .BYTES, TIME_TEMP );
    TIME_BUF [ DSC$A_POINTER ] = TIME_TEMP;
    TIME_BUF [ DSC$W_LENGTH ] = .BYTES;

    ! See if the RMS control blocks are kosher ( DON'T DEALLOCATE THEM )
    ! It also saves the addresses of any relevant XABs it finds
    ! It also saves the bucketsizes of any AREA XABs it finds
    !
    FDL$AB_CTRL [ FDL$V_DEALLOC ] = _CLEAR;
    FDL$$CHECK_BLOCKS ( .FDL$AB_GENFAB, .FDL$AB_GENRAB );
    FAO_LENGTH = 0;

    ! Generate the FDL primaries in their proper order
    !
    GEN_PRIMARY ( FDL$C_IDENT, 0, 0, 0 );
    GEN_PRIMARY ( FDL$C_SYSTEM, FDL$C_SOURCE, FDL$C_SOURCE, 0 );
    GEN_PRIMARY ( FDL$C_FILE, FDL$C_FILE_BEG, FDL$C_FILE_END, .XABPRO_PTR );
!    GEN_PRIMARY ( FDL$C_ACL, FDL$C_ACL_BEG, FDL$C_ACL_END, .XABACL_PTR );
    GEN_PRIMARY ( FDL$C_DATE, FDL$C_DATE_BEG, FDL$C_DATE_END, .XABDAT_PTR );
    GEN_PRIMARY ( FDL$C_JNL, FDL$C_JOURNAL_BEG, FDL$C_JOURNAL_END, .XABJNL_PTR );
    GEN_PRIMARY ( FDL$C_RECORD, FDL$C_RECORD_BEG, FDL$C_RECORD_END, 0 );
    GEN_PRIMARY ( FDL$C_ACCESS, FDL$C_ACCESS_BEG, FDL$C_ACCESS_END, 0 );
    GEN_PRIMARY ( FDL$C_SHARING, FDL$C_SHARING_BEG, FDL$C_SHARING_END, 0 );
    GEN_PRIMARY ( FDL$C_CONNECT, FDL$C_CONNECT_BEG, FDL$C_CONNECT_END, 0 );

    ! Cycle through all the AREAs
    !
    UNTIL .XABALL_PTR EQLU 0
    DO
	BEGIN

	GEN_PRIMARY ( FDL$C_AREA, FDL$C_AREA_BEG, FDL$C_AREA_END, .XABALL_PTR );

	DO

	    XABALL_PTR = .XABALL_PTR [ XAB$L_NXT ]

	UNTIL (
	( .XABALL_PTR EQLU 0 )
	OR
	( .XABALL_PTR [ XAB$B_COD ] EQLU XAB$C_ALL ));

	END;

    ! Cycle through all the KEYs
    !
    UNTIL .XABKEY_PTR EQLU 0
    DO
	BEGIN

	GEN_PRIMARY ( FDL$C_KEY, FDL$C_KEY_BEG, FDL$C_KEY_END, .XABKEY_PTR );

	DO

	    XABKEY_PTR = .XABKEY_PTR [ XAB$L_NXT ]

	UNTIL (
	( .XABKEY_PTR EQLU 0 )
	OR
	( .XABKEY_PTR [ XAB$B_COD ] EQLU XAB$C_KEY ));

	END;

    RETURN SS$_NORMAL;

    END;

%SBTTL	'GEN_PRIMARY'
ROUTINE GEN_PRIMARY ( WHICH : LONG, BEG : LONG, GEB : LONG, XAB_PTR : LONG ) =
!++
!
! Functional Description:
!
!	This routine xxxxxxxxxxxxxx
!
! Calling Sequence:
!
!	fdl$$gen_line(	fdl_string )
!
! Input Parameters:
!
!	fdl_desc	- descriptor of the fdl file name string (required)
!	file_name	- descriptor file name to overide the name specified
!			  in the fdl file (optional)
!	default_name	- descriptor default file name to overide the default
!			  name specified in the fdl file (optional)
!
!	flags		- address of flags longword (optional)
!		FDL$V_SIGNAL		signal errors instead of returning
!		FDL$V_FDL_STRING	input fdl-spec is a char string
!		FDL$V_$CALLBACK		used by EDF
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	result_name	- descriptor to receive the file name which was created
!			  (optional)
!	fid_block	- address of a 3 longword used block to receive the fid
!			  of the file created (optional)
!
!	stmnt-num	- address of longword to recieve statement
!			  number (optional)
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	success or error code
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	TEMP_BYTE	: BYTE,
	BOFF		: LONG,
	XAB		: REF BLOCK [ ,BYTE ],
	PLINE		: REF BLOCK [ FDL$C_PRIBLK_SIZE ] FIELD (PRITAB_FIELDS),
	LINE 		: REF BLOCK [ FDL$C_SECBLK_SIZE ] FIELD (SECTAB_FIELDS);

    ! Setup the xab pointer
    !
    FDL$AB_BLOCK_BLK [ FDL$C_XAB ] = .XAB_PTR;
    XAB = .XAB_PTR;
    FDL$GL_PRIMARY = .WHICH;

    ! Point to the record which describe this primary attribute
    !
    PLINE = ( FDL$AB_PRI_TABLE + (.FDL$GL_PRIMARY * FDL$C_PRIBLK_SIZE * 4) );

    ! Setup the AREA number or KEY number
    !
    IF .PLINE [ FDL$V_NUM_ATTACH ]
    THEN
	BEGIN

	BOFF = .PLINE [ FDL$V_PRI_BOFF ];
	FDL$GL_PRINUM = .XAB [ .BOFF,0,8,0 ];

	END;

    ! The following is a list of all the reasons why not to output this
    ! particular primary attribute
    !
    ! null table entry
    ! no date xab
    ! no journal xab
    ! not doing fullgen and primary = connect or sharing or access
    !
    IF ( NOT (
    ( .PLINE [ FDL$V_PRI_FAO ] EQLU 0 )
    OR
    (( .FDL$GL_PRIMARY EQLU FDL$C_DATE ) AND ( .XABDAT_PTR EQLU 0 ))
    OR
    (( .FDL$GL_PRIMARY EQLU FDL$C_JNL ) AND ( .XABJNL_PTR EQLU 0 ))
    OR
    ((
	( .FDL$GL_PRIMARY EQLU FDL$C_CONNECT )
	OR
	( .FDL$GL_PRIMARY EQLU FDL$C_SHARING )
	OR
	( .FDL$GL_PRIMARY EQLU FDL$C_ACCESS )
    ) AND NOT .FDL$AB_CTRL [ FDL$V_FULLGEN ] )
    )) THEN
	BEGIN

	IF .FDL$GL_PRIMARY NEQU FDL$C_IDENT
	THEN
	    ! Output a blank line
	    !
	    FDL$$OUTPUT_LINE ( -1 );

	! Format and output the Primary Attribute line
	!
	TEMP_BYTE = ..PLINE [ FDL$V_PRI_FAO ];
	FAO_DESC [ DSC$W_LENGTH ] = .TEMP_BYTE;
	FAO_DESC [ DSC$A_POINTER ] = .PLINE [ FDL$V_PRI_FAO ] + 1;

	IF .FDL$GL_PRIMARY EQLU FDL$C_IDENT
	THEN
	    BEGIN

	    RET_ON_ERROR ( SYS$ASCTIM ( 0,TIME_BUF,0,0 ));
	    TIME_BUF [ DSC$W_LENGTH ] = 20;

	    END;

	RET_ON_ERROR (
	SYS$FAO ( FAO_DESC,FAO_LENGTH,FDL$AB_LINE,.FDL$GL_PRINUM,TIME_BUF ));
	FDL$$OUTPUT_LINE ( .FAO_LENGTH );

	IF .FDL$GL_PRIMARY EQLU FDL$C_IDENT
	THEN
	    RETURN SS$_NORMAL;

	! Cycle through the secondary attributes
	!
	INCR SEC FROM .BEG TO .GEB
	DO
	    BEGIN

	    ! Skip it if this is a null table entry
	    ! (which means we don't generate it - only ANALYZE/RMS/FDL does)
	    ! Also skip it if the RMS block we need doesn't exist
	    !
	    LINE = ( FDL$AB_SEC_TABLE + (.SEC * FDL$C_SECBLK_SIZE * 4) );

	    ! FILE REVISION is a special case
	    ! We have to bring in the XABRDT if it exists
	    ! whereas FILE had used XABPRO previously
	    !
	    IF .SEC EQLU FDL$C_REVISN
	    THEN
		FDL$AB_BLOCK_BLK [ FDL$C_XAB ] = .XABRDT_PTR;

	    ! The following is a list of conditions to be satisfied
	    ! in order to put this secondary out
	    !
	    ! table entry is not null
	    ! pointer to relevant RMS control block is not 0
	    ! we're doing a fullgen, or the full-only bit is clear
	    ! if this is the ifill or dfill secondary to the key primary,
	    !	an xaball exists
	    !
	    IF (
	    ( .LINE [ FDL$V_SEC_FAO ] NEQU 0 )
	    AND
	    ( .FDL$AB_BLOCK_BLK [ .LINE [ FDL$V_BLK_TYPE ] ] NEQU 0 )
	    AND
	    (( .FDL$AB_CTRL [ FDL$V_FULLGEN ] ) OR ( NOT .LINE [ FDL$V_FULL_ONLY ] ))
	    AND
	    NOT (
		( .FDL$GL_PRIMARY EQLU FDL$C_KEY ) AND
		( ( .SEC EQLU FDL$C_IFILL ) OR ( .SEC EQLU FDL$C_DFILL ) ) AND
		( .XABALL_PTR EQLU 0 )
		)
	    ) THEN
		BEGIN

		FDL$GL_SECONDARY = .SEC;
		FDL$$OUTPUT_LINE ( FDL$$FORMAT_LINE () );

		END;

	    END;

	END;

    RETURN SS$_NORMAL;

    END;

%SBTTL	'FDL$$FORMAT_LINE'
GLOBAL ROUTINE FDL$$FORMAT_LINE =
!++
!
! Functional Description:
!
!	This routine xxxxxxxxxxxxxx
!
! Calling Sequence:
!
!	fdl$$gen_line(	fdl_string )
!
! Input Parameters:
!
!	fdl_desc	- descriptor of the fdl file name string (required)
!	file_name	- descriptor file name to overide the name specified
!			  in the fdl file (optional)
!	default_name	- descriptor default file name to overide the default
!			  name specified in the fdl file (optional)
!
!	flags		- address of flags longword (optional)
!		FDL$V_SIGNAL		signal errors instead of returning
!		FDL$V_FDL_STRING	input fdl-spec is a char string
!		FDL$V_$CALLBACK		used by EDF
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	result_name	- descriptor to receive the file name which was created
!			  (optional)
!	fid_block	- address of a 3 longword used block to receive the fid
!			  of the file created (optional)
!
!	stmnt-num	- address of longword to recieve statement
!			  number (optional)
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	success or error code
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	TEMP_BYTE	: BYTE,
	STATUS		: LONG,
	LINE 		: REF BLOCK [ FDL$C_SECBLK_SIZE ] FIELD (SECTAB_FIELDS);

    ! Get the offset into the table
    ! This is done here (as well as in FDL$$GEN_SPEC) because EDF can
    ! call FDL$$FORMAT_LINE directly
    !
    LINE = ( FDL$AB_SEC_TABLE + (.FDL$GL_SECONDARY * FDL$C_SECBLK_SIZE * 4) );

    ! If it's "PROLOG", skip it unless it's KEY 0
    !
    IF (
    ( .FDL$GL_SECONDARY EQLU FDL$C_PROL )
    AND
    ( .FDL$GL_PRINUM NEQU 0 )
    ) THEN
	RETURN 0;

    ! Construct a descriptor: get the length from the ASCIC, then the Address
    !
    TEMP_BYTE = ..LINE [ FDL$V_SEC_FAO ];
    FAO_DESC [ DSC$W_LENGTH ] = .TEMP_BYTE;
    FAO_DESC [ DSC$A_POINTER ] = .LINE [ FDL$V_SEC_FAO ] + 1;

    ! If it's a "SEGn_XXX" secondary, loop thru up to 8 times
    !
    IF (
    ( .FDL$GL_SECONDARY EQLU FDL$C_SEGLEN )
    OR
    ( .FDL$GL_SECONDARY EQLU FDL$C_SEGPOS )
    ) THEN
	BEGIN

	INCR J FROM 0 TO 7
	DO
	    BEGIN
    
	    LOCAL
		BLK		: REF BLOCK [ ,BYTE ],
		FAO_CHAR	: REF VECTOR [ ,BYTE ];

	    BLK = .FDL$AB_BLOCK_BLK [ FDL$C_XAB ];
	    FDL$GL_SECNUM = .J;
    
	    ! Get the value for the line
	    !
	    FETCH_FIELD ( .LINE );
    
	    ! Put the formatted text into it
	    !
	    RET_ON_ERROR (
	    SYS$FAO ( FAO_DESC,FAO_LENGTH,FDL$AB_LINE,.FAO_PARAM ));
    
	    ! Stuff the "n" in the "SEGn_XXX" line
	    !
	    FAO_CHAR = .FDL$AB_LINE [ DSC$A_POINTER ];
	    FAO_CHAR [ 4 ] = .FDL$GL_SECNUM + '0';

	    ! Look ahead to see if there are any more segments
	    !
	    IF (CASE (.J+1) FROM 1 TO 8 OF
	    SET
	    [ 1 ] : .BLK [ XAB$B_SIZ1 ];
	    [ 2 ] : .BLK [ XAB$B_SIZ2 ];
	    [ 3 ] : .BLK [ XAB$B_SIZ3 ];
	    [ 4 ] : .BLK [ XAB$B_SIZ4 ];
	    [ 5 ] : .BLK [ XAB$B_SIZ5 ];
	    [ 6 ] : .BLK [ XAB$B_SIZ6 ];
	    [ 7 ] : .BLK [ XAB$B_SIZ7 ];
	    [ 8 ] : 0;
	    TES) EQLU 0
	    THEN
		EXITLOOP
	    ELSE
		! If there is more, "PUT" this one before looping
		!
		FDL$$OUTPUT_LINE ( .FAO_LENGTH );

	    END;
	END
    ELSE
	BEGIN

	! Get the value for the line
	!
	IF FETCH_FIELD ( .LINE )
	THEN
	    BEGIN
	    ! Put the formatted text into it
	    !
	    RET_ON_ERROR ( SYS$FAO ( 
			    FAO_DESC,
			    FAO_LENGTH,
			    FDL$AB_LINE,
			    .FAO_PARAM,
			    .FAO_PARAM2,
			    .FAO_PARAM3,
			    .FAO_PARAM4 ));

	    IF .LINE [ FDL$V_DATA_TYPE ] EQLU FDL$C_STRING
	    THEN
		BEGIN
		LOCAL STATUS;

		IF NOT ( STATUS = LIB$FREE_VM ( STRBYTES, OCHAR ))
		THEN
		    SIGNAL_STOP ( .STATUS );
		END;

	    END
	ELSE
	    FAO_LENGTH = 0;

	END;

    RETURN .FAO_LENGTH;

    END;

%SBTTL	'FDL$$OUTPUT_LINE'
GLOBAL ROUTINE FDL$$OUTPUT_LINE ( OUT_LEN : LONG ) =
!++
!
! Functional Description:
!
!	This routine xxxxxxxxxxxxxx
!
! Calling Sequence:
!
!	fdl$$gen_line(	fdl_string )
!
! Input Parameters:
!
!	fdl_desc	- descriptor of the fdl file name string (required)
!	file_name	- descriptor file name to overide the name specified
!			  in the fdl file (optional)
!	default_name	- descriptor default file name to overide the default
!			  name specified in the fdl file (optional)
!
!	flags		- address of flags longword (optional)
!		FDL$V_SIGNAL		signal errors instead of returning
!		FDL$V_FDL_STRING	input fdl-spec is a char string
!		FDL$V_$CALLBACK		used by EDF
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	result_name	- descriptor to receive the file name which was created
!			  (optional)
!	fid_block	- address of a 3 longword used block to receive the fid
!			  of the file created (optional)
!
!	stmnt-num	- address of longword to recieve statement
!			  number (optional)
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	success or error code
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	TEMP_LEN	: WORD;

    ! Don't bother with nothing
    !
    IF .OUT_LEN EQLU 0
    THEN
	RETURN SS$_NORMAL;

    ! But less than nothing means skip a line
    !
    IF .OUT_LEN LSS 0
    THEN
	OUT_LEN = 0;

    IF .FDL$AB_CTRL [ FDL$V_STRING_SPEC ]
    THEN
	BEGIN
	LOCAL
	    TEMP	: LONG;

	TEMP_LEN = .FDL$AB_LINE [ DSC$W_LENGTH ];
	TEMP = .FDL$AB_LINE [ DSC$A_POINTER ] + .OUT_LEN;
	.TEMP = ';';
	OUT_LEN = .OUT_LEN + 1;
	FDL$AB_LINE [ DSC$W_LENGTH ] = .OUT_LEN;
	RET_ON_ERROR( STR$APPEND( .FDL$AB_OUT_STRING,FDL$AB_LINE ) );
	FDL$AB_LINE [ DSC$W_LENGTH ] = .TEMP_LEN;

	END
    ELSE
	! Put the new line to the FDL file.
	!
	BEGIN

	FDL$AB_FDL_RAB [ RAB$W_RSZ ] = .OUT_LEN;
	RET_ON_ERROR( $PUT ( RAB=FDL$AB_FDL_RAB,ERR=FDL$$READ_ERROR ) );

	END;

    RETURN SS$_NORMAL;

    END;

%SBTTL	'CHECK_XAB'
ROUTINE CHECK_XAB ( XAB_POINTER : REF BLOCK [ ,BYTE ] ) =
!++
!
! Functional Description:
!
!	This routine xxxxxxxxxxxxxx
!
! Calling Sequence:
!
!	fdl$$gen_line(	fdl_string )
!
! Input Parameters:
!
!	fdl_desc	- descriptor of the fdl file name string (required)
!	file_name	- descriptor file name to overide the name specified
!			  in the fdl file (optional)
!	default_name	- descriptor default file name to overide the default
!			  name specified in the fdl file (optional)
!
!	flags		- address of flags longword (optional)
!		FDL$V_SIGNAL		signal errors instead of returning
!		FDL$V_FDL_STRING	input fdl-spec is a char string
!		FDL$V_$CALLBACK		used by EDF
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	result_name	- descriptor to receive the file name which was created
!			  (optional)
!	fid_block	- address of a 3 longword used block to receive the fid
!			  of the file created (optional)
!
!	stmnt-num	- address of longword to recieve statement
!			  number (optional)
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	success or error code
!
! Side Effects:
!	none
!
!--

    BEGIN
	LOCAL TEMP;

    WHILE ( .XAB_POINTER NEQU 0 )
    DO
	BEGIN

	! Keep the old next-link around
	!
	SAVE_POINTER = .XAB_POINTER [ XAB$L_NXT ];
	
	! See if it's a useful one and save it's address if it is
	!

	IF (
	( .XAB_POINTER [ XAB$B_BLN ] EQLU 0 )
	OR
	( .XAB_POINTER [ XAB$B_BLN ] LSS 0 )
	OR
	( .XAB_POINTER [ XAB$B_COD ] EQLU 0 )
	OR
	( .XAB_POINTER [ XAB$B_COD ] LSS 0 )
	) THEN
	    BEGIN
    
	    IF .FDL$GL_INVBLK_PTR NEQU 0
	    THEN
		.FDL$GL_INVBLK_PTR = .XAB_POINTER;

	    SIGNAL ( FDL$_INVBLK,1,.XAB_POINTER );
    
	    END
	ELSE
	    BEGIN

	    ! Only bother if we're not deallocating
	    !
	    IF NOT .FDL$AB_CTRL [ FDL$V_DEALLOC ]
	    THEN
		BEGIN

		! It's not an obviously BAD XAB, is it an important one?
		!
		SELECTONE .XAB_POINTER [ XAB$B_COD ] OF
    
		SET
    
		[ XAB$C_KEY ] : IF .XABKEY_PTR EQLU 0
				THEN
				    XABKEY_PTR = .XAB_POINTER;
    
		[ XAB$C_ALL ] : 
		    BEGIN
    
		    IF .XAB_POINTER [ XAB$B_BKZ ] NEQU 0
		    THEN
			FDL$AB_AREA_BKZ [ .XAB_POINTER [ XAB$B_AID ] ] =
						    .XAB_POINTER [ XAB$B_BKZ ]
		    ELSE
			FDL$AB_AREA_BKZ [ .XAB_POINTER [ XAB$B_AID ] ] = BUCKET_DEFAULT;
    
		    IF .XABALL_PTR EQLU 0
		    THEN
			XABALL_PTR = .XAB_POINTER;
    
		    END;
    
		[ XAB$C_DAT ] : XABDAT_PTR = .XAB_POINTER;
		[ XAB$C_PRO ] : XABPRO_PTR = .XAB_POINTER;
		[ XAB$C_RDT ] : XABRDT_PTR = .XAB_POINTER;
		[ XAB$C_JNL ] : XABJNL_PTR = .XAB_POINTER;
		[ OTHERWISE ] : 0;
    
		TES;

		END
	    ELSE
		BEGIN

		! Now get rid of it if we're "RELEASING"
		!
		IF (
		( .XAB_POINTER [ XAB$B_COD ] EQLU XAB$C_KEY )
		AND
		( .XAB_POINTER [ XAB$L_KNM ] NEQU 0 )
		) THEN
		    FDL$$FREE_VM ( 32, .XAB_POINTER [ XAB$L_KNM ] );

		TEMP = .XAB_POINTER [ XAB$B_BLN ];
		FDL$$FREE_VM ( .TEMP, .XAB_POINTER );

		END;

	    END;

	! Point to the next
	!
	XAB_POINTER = .SAVE_POINTER;

	END;

    RETURN SS$_NORMAL;

    END;

%SBTTL	'FDL$$CHECK_BLOCKS'
GLOBAL ROUTINE FDL$$CHECK_BLOCKS ( FAB_POINTER : REF BLOCK [ ,BYTE ],
				   RAB_POINTER : REF BLOCK [ ,BYTE ] ) =
!++
!
! Functional Description:
!
!	This routine xxxxxxxxxxxxxx
!
! Calling Sequence:
!
!	fdl$$gen_line(	fdl_string )
!
! Input Parameters:
!
!	fdl_desc	- descriptor of the fdl file name string (required)
!	file_name	- descriptor file name to overide the name specified
!			  in the fdl file (optional)
!	default_name	- descriptor default file name to overide the default
!			  name specified in the fdl file (optional)
!
!	flags		- address of flags longword (optional)
!		FDL$V_SIGNAL		signal errors instead of returning
!		FDL$V_FDL_STRING	input fdl-spec is a char string
!		FDL$V_$CALLBACK		used by EDF
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	result_name	- descriptor to receive the file name which was created
!			  (optional)
!	fid_block	- address of a 3 longword used block to receive the fid
!			  of the file created (optional)
!
!	stmnt-num	- address of longword to recieve statement
!			  number (optional)
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	success or error code
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	BYTES			: LONG,
	NAM_POINTER		: REF BLOCK [ ,BYTE ];

    ! Allocate the area bucketsize array
    !
    BYTES = 256;
    IF NOT LIB$GET_VM ( BYTES, FDL$AB_AREA_BKZ )
    THEN
	SIGNAL_STOP ( FDL$_INSVIRMEM );
    CH$FILL ( 0, .BYTES, .FDL$AB_AREA_BKZ );

    ! Clear the cells that indicate where important XABs were found
    !
    XABALL_PTR = _CLEAR;
    XABDAT_PTR = _CLEAR;
    XABPRO_PTR = _CLEAR;
    XABRDT_PTR = _CLEAR;
    XABJNL_PTR = _CLEAR;
    XABKEY_PTR = _CLEAR;

    ! If not defaulted, FAB_POINTER must point to a FAB
    !
    IF ( .FAB_POINTER NEQU 0 ) AND ( .FAB_POINTER [ FAB$B_BID ] NEQU FAB$C_BID )
    THEN
	BEGIN

	IF .FDL$GL_INVBLK_PTR NEQU 0
	THEN
	    .FDL$GL_INVBLK_PTR = .FAB_POINTER;

	SIGNAL ( FDL$_INVBLK,1,.FAB_POINTER );

	END;

    ! If not defaulted, RAB_POINTER must point to a RAB
    !
    IF ( .RAB_POINTER NEQU 0 ) AND ( .RAB_POINTER [ RAB$B_BID ] NEQU RAB$C_BID )
    THEN
	BEGIN

	IF .FDL$GL_INVBLK_PTR NEQU 0
	THEN
	    .FDL$GL_INVBLK_PTR = .RAB_POINTER;

	SIGNAL ( FDL$_INVBLK,1,.RAB_POINTER );

	END;

    ! Check the FAB attachments
    !
    IF .FAB_POINTER NEQU 0
    THEN
	BEGIN

	! Deallocate the NAM if it exists
	!
	NAM_POINTER = .FAB_POINTER [ FAB$L_NAM ];

	IF .NAM_POINTER NEQU 0
	THEN
	    BEGIN

	    ! If it exists, it must be a NAM block
	    !
	    IF .NAM_POINTER [ NAM$B_BID ] EQLU NAM$C_BID
	    THEN
		BEGIN

		IF .FDL$AB_CTRL [ FDL$V_DEALLOC ]
		THEN
		    BEGIN

		    IF .NAM_POINTER [ NAM$L_ESA ] NEQU 0
		    THEN
			FDL$$FREE_VM ( .NAM_POINTER [ NAM$B_ESS ],
					.NAM_POINTER [ NAM$L_ESA ] );

		    IF .NAM_POINTER [ NAM$L_RSA ] NEQU 0
		    THEN
			FDL$$FREE_VM ( .NAM_POINTER [ NAM$B_RSS ],
					.NAM_POINTER [ NAM$L_RSA ] );

		    FDL$$FREE_VM ( .NAM_POINTER [ NAM$B_BLN ], .NAM_POINTER );

		    END
		END
	    ELSE
		BEGIN

		IF .FDL$GL_INVBLK_PTR NEQU 0
		THEN
		    .FDL$GL_INVBLK_PTR = .NAM_POINTER;

		SIGNAL ( FDL$_INVBLK,1,.NAM_POINTER );

		END;

	    END;

	! Deallocate the filename (and default filename) if present
	!
	NAM_POINTER = .FAB_POINTER [ FAB$L_FNA ];

	IF ( .NAM_POINTER NEQU 0 ) AND ( .FDL$AB_CTRL [ FDL$V_DEALLOC ] )
	THEN
	    FDL$$FREE_VM ( .FAB_POINTER [ FAB$B_FNS ], .NAM_POINTER );

	NAM_POINTER = .FAB_POINTER [ FAB$L_DNA ];

	IF ( .NAM_POINTER NEQU 0 ) AND ( .FDL$AB_CTRL [ FDL$V_DEALLOC ] )
	THEN
	    FDL$$FREE_VM ( .FAB_POINTER [ FAB$B_DNS ], .NAM_POINTER );

	! Now check and possibly deallocate any XABs
	!
	CHECK_XAB ( .FAB_POINTER [ FAB$L_XAB ] );

	IF .FDL$AB_CTRL [ FDL$V_DEALLOC ]
	THEN
	    FDL$$FREE_VM ( .FAB_POINTER [ FAB$B_BLN ], .FAB_POINTER );

	END;

    ! Check the RAB attachments
    !
    IF .RAB_POINTER NEQU 0
    THEN
	BEGIN

	! Deallocate any existing XABs
	!
	CHECK_XAB ( .RAB_POINTER [ RAB$L_XAB ] );

	IF .FDL$AB_CTRL [ FDL$V_DEALLOC ]
	THEN
	    FDL$$FREE_VM ( .RAB_POINTER [ RAB$B_BLN ], .RAB_POINTER );

	END;

	! Done with the bucketsize array
	!
	BEGIN
	LOCAL STATUS;

	IF NOT ( STATUS = LIB$FREE_VM ( BYTES, FDL$AB_AREA_BKZ ))
	THEN
	    SIGNAL_STOP ( .STATUS );
	END;

    RETURN SS$_NORMAL;

    END;

%SBTTL	'FETCH_FIELD'
ROUTINE FETCH_FIELD ( 
 LINE : REF BLOCK [ FDL$C_SECBLK_SIZE,LONG ] FIELD (SECTAB_FIELDS) ) =
!++
!
! Functional Description:
!
!	This routine xxxxxxxxxxxxxx
!
! Calling Sequence:
!
!	fdl$$gen_line(	fdl_string )
!
! Input Parameters:
!
!	fdl_desc	- descriptor of the fdl file name string (required)
!	file_name	- descriptor file name to overide the name specified
!			  in the fdl file (optional)
!	default_name	- descriptor default file name to overide the default
!			  name specified in the fdl file (optional)
!
!	flags		- address of flags longword (optional)
!		FDL$V_SIGNAL		signal errors instead of returning
!		FDL$V_FDL_STRING	input fdl-spec is a char string
!		FDL$V_$CALLBACK		used by EDF
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	result_name	- descriptor to receive the file name which was created
!			  (optional)
!	fid_block	- address of a 3 longword used block to receive the fid
!			  of the file created (optional)
!
!	stmnt-num	- address of longword to recieve statement
!			  number (optional)
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	success or error code
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	TEMP_SWITCH	: BYTE,
	TEMP_BYTE	: BYTE,
	TEMP_WORD	: WORD,
	TEMP_LONG	: LONG,
	TEMP_QUAD	: VECTOR [ 2,LONG ],
	TEMP_OCTA	: VECTOR [ 4,LONG ],
	TEMP_STRING	: DESC_BLK,
	TEMP_QUALIFIER	: BYTE,
	TEMP_SPECIAL	: LONG,
	BLK		: REF BLOCK [ ,BYTE ],
	BOFF		: LONG,
	POS		: LONG;

! ********************
!
! FOR EDF TO CALL FDL$$FORMAT_LINE DIRECTLY - FETCH_FIELD WILL
! HAVE TO BE CONDITIONALIZED TO GET THE VALUES FROM
! FDL$GL_NUMBER, FDL$GL_SWITCH, ETC. INSTEAD OF FROM THE
! RMS CONTROL BLOCKS
!
! ********************

    ! Get the address of the BLK and the offsets within it
    !
    BLK = .FDL$AB_BLOCK_BLK [ .LINE [ FDL$V_BLK_TYPE ] ];
    BOFF = .LINE [ FDL$V_SEC_BOFF ];
    POS = .LINE [ FDL$V_SEC_POS ];

    ! Save the value according to its datatype
    !
    CASE .LINE [ FDL$V_DATA_TYPE ] FROM FDL$C_DUMMY TO FDL$C_SPECIAL OF

	SET

	[ FDL$C_DUMMY ] : 0;

	[ FDL$C_BYTE ] : 
	    BEGIN

	    IF .FDL$GL_SECONDARY NEQU FDL$C_SEGLEN
	    THEN
		FAO_PARAM = .BLK [ .BOFF,.POS,8,0 ]
	    ELSE
		BEGIN

		FAO_PARAM = (CASE .FDL$GL_SECNUM FROM 0 TO 7 OF
		SET
		[ 0 ] : .BLK [ XAB$B_SIZ0 ];
		[ 1 ] : .BLK [ XAB$B_SIZ1 ];
		[ 2 ] : .BLK [ XAB$B_SIZ2 ];
		[ 3 ] : .BLK [ XAB$B_SIZ3 ];
		[ 4 ] : .BLK [ XAB$B_SIZ4 ];
		[ 5 ] : .BLK [ XAB$B_SIZ5 ];
		[ 6 ] : .BLK [ XAB$B_SIZ6 ];
		[ 7 ] : .BLK [ XAB$B_SIZ7 ];
		TES);

		END;

	    END;

	[ FDL$C_WORD ] : 
	    BEGIN

	    SELECTONE .FDL$GL_SECONDARY OF

	    SET

	    ! For INDEX_FILL and DATA_FILL, convert the Fill Numbers to
	    ! Fill Percents. The extra 1/2 measure is to fight roundoff error
	    !
	    [ FDL$C_DFILL ] :
		FAO_PARAM =
		(( .BLK [ XAB$W_DFL ] * 100 ) + ( .BLK [ XAB$W_DFL ] / 2 )) /
	    	( BLOCK_SIZE * .FDL$AB_AREA_BKZ [ .BLK [ XAB$B_DAN ] ] );

	    [ FDL$C_IFILL ] :
		FAO_PARAM =
		(( .BLK [ XAB$W_IFL ] * 100 ) + ( .BLK [ XAB$W_IFL ] / 2 )) /
		( BLOCK_SIZE * .FDL$AB_AREA_BKZ [ .BLK [ XAB$B_IAN ] ] );

	    ! Look at all the segments
	    !
	    [ FDL$C_SEGPOS ] :
		BEGIN

		FAO_PARAM = (CASE .FDL$GL_SECNUM FROM 0 TO 7 OF
		SET
		[ 0 ] : .BLK [ XAB$W_POS0 ];
		[ 1 ] : .BLK [ XAB$W_POS1 ];
		[ 2 ] : .BLK [ XAB$W_POS2 ];
		[ 3 ] : .BLK [ XAB$W_POS3 ];
		[ 4 ] : .BLK [ XAB$W_POS4 ];
		[ 5 ] : .BLK [ XAB$W_POS5 ];
		[ 6 ] : .BLK [ XAB$W_POS6 ];
		[ 7 ] : .BLK [ XAB$W_POS7 ];
		TES);

		END;

	    [ OTHERWISE ] : FAO_PARAM = .BLK [ .BOFF,.POS,16,0 ];

	    TES;

	    END;

	[ FDL$C_LONG ] : 
	    BEGIN

	    FAO_PARAM = .BLK [ .BOFF,.POS,32,0 ];

	    END;

	[ FDL$C_QUAD ] : 
	    BEGIN

	    0;

	    END;

	[ FDL$C_OCTA ] : 
	    BEGIN

	    0;

	    END;

	[ FDL$C_SWITCH ] : 
	    BEGIN

	    ! Output yes or no depending upon the bit setting
	    ! 4 of the secondaries have inverted sense
	    !
	    IF (
	    (.FDL$GL_SECONDARY EQL FDL$C_DATKC)
	    OR
	    (.FDL$GL_SECONDARY EQL FDL$C_DATRC)
	    OR
	    (.FDL$GL_SECONDARY EQL FDL$C_IDXC)
	    OR
	    (.FDL$GL_SECONDARY EQL FDL$C_BLKSPN)
	    ) THEN
		BEGIN
		IF NOT .BLK [ .BOFF,.POS,1,0 ]
		THEN
		    FAO_PARAM = UPLIT BYTE (%ASCIC 'yes')
		ELSE
		    FAO_PARAM = UPLIT BYTE (%ASCIC 'no');
		END
	    ELSE
		BEGIN
		IF .BLK [ .BOFF,.POS,1,0 ]
		THEN
		    FAO_PARAM = UPLIT BYTE (%ASCIC 'yes')
		ELSE
		    FAO_PARAM = UPLIT BYTE (%ASCIC 'no');
		END;
	    END;

	[ FDL$C_SPECIAL ] :
	    BEGIN

	    LOCAL
		TIME_ADDR	: LONG,
		TIME_LEN	: WORD;

	    SELECTONE .FDL$GL_SECONDARY OF

	    SET

	    [ FDL$C_BACKUP, FDL$C_CREAT, FDL$C_EXPR, FDL$C_REV ] :
		BEGIN

		LOCAL
		    TIME_VEC	: REF VECTOR [ 2,LONG ];

		TIME_ADDR = .BLK + .BOFF;
		TIME_VEC = .TIME_ADDR;

		! If the time is null, don't bother putting it out
		!
		IF (
		( .TIME_VEC [ 0 ] EQLU 0 )
		AND
		( .TIME_VEC [ 1 ] EQLU 0 )
		) THEN
		    RETURN 0;

		RET_ON_ERROR ( SYS$ASCTIM ( 0,TIME_BUF,.TIME_ADDR,0 ));
		FAO_PARAM = TIME_BUF;

		END;

	    [ FDL$C_PROT ] :
		BEGIN

		LOCAL
		    PROTECTION	: LONG;

		PROTECTION = .BLK [ XAB$W_PRO ];
		FAO_PARAM = .PROT_VALUES [ .PROTECTION<0,4> ];
		FAO_PARAM2 = .PROT_VALUES [ .PROTECTION<4,4> ];
		FAO_PARAM3 = .PROT_VALUES [ .PROTECTION<8,4> ];
		FAO_PARAM4 = .PROT_VALUES [ .PROTECTION<12,4> ];

		END;

	    [ FDL$C_POSI ] :

		BEGIN

		TEMP_BYTE = 23;
		CH$FILL ( 0, .TEMP_BYTE, TIME_TEMP );
		TEMP_DESC [ DSC$A_POINTER ] = TIME_TEMP;
		TEMP_DESC [ DSC$W_LENGTH ] = .TEMP_BYTE;

		IF (
		( .BLK [ XAB$W_RFI0 ] NEQU 0 )
		OR
		( .BLK [ XAB$W_RFI2 ] NEQU 0 )
		OR
		( .BLK [ XAB$W_RFI4 ] NEQU 0 )
		) THEN
		    BEGIN

		    RET_ON_ERROR ( SYS$FAO (
			    %ASCID 'file_ID (!UW,!UW,!UW)',
			    TEMP_WORD,
			    TEMP_DESC,
			    .BLK [ XAB$W_RFI0 ],
			    .BLK [ XAB$W_RFI2 ],
			    .BLK [ XAB$W_RFI4 ] ));

		    TEMP_DESC [ DSC$W_LENGTH ] = .TEMP_WORD;
		    FAO_PARAM = TEMP_DESC;

		    END
		ELSE
		    BEGIN

		    SELECTONE .BLK [ XAB$B_ALN ] OF
    
		    SET
    
		    [ XAB$C_CYL ] :
			BEGIN
    
			RET_ON_ERROR ( SYS$FAO (
				%ASCID 'cylinder !UL',
				TEMP_WORD,
				TEMP_DESC,
				.BLK [ XAB$L_LOC ] ));
    
			TEMP_DESC [ DSC$W_LENGTH ] = .TEMP_WORD;
			FAO_PARAM = TEMP_DESC;
    
			END;
    
		    [ XAB$C_LBN ] :
			BEGIN
    
			RET_ON_ERROR ( SYS$FAO (
				%ASCID 'logical !UL',
				TEMP_WORD,
				TEMP_DESC,
				.BLK [ XAB$L_LOC ] ));
    
			TEMP_DESC [ DSC$W_LENGTH ] = .TEMP_WORD;
			FAO_PARAM = TEMP_DESC;
    
			END;
    
		    [ XAB$C_VBN ] :
			BEGIN
    
			RET_ON_ERROR ( SYS$FAO (
				%ASCID 'virtual !UL',
				TEMP_WORD,
				TEMP_DESC,
				.BLK [ XAB$L_LOC ] ));
    
			TEMP_DESC [ DSC$W_LENGTH ] = .TEMP_WORD;
			FAO_PARAM = TEMP_DESC;
    
			END;
    
		    [ 0 ] :
			BEGIN
    
			IF NOT .BLK [ XAB$V_ONC ]
			THEN
			    FAO_PARAM = %ASCID '	none';
    
			END;
    
		    [ OTHERWISE ] : 0;
    
		    TES;
    
		    IF .BLK [ XAB$V_ONC ]
		    THEN
			FAO_PARAM = %ASCID '	any_cylinder';

		    END;

		END;

	    [ OTHERWISE ] : FAO_PARAM = 0;

	    TES;

	    END;

	[ FDL$C_STRING ] : 
	    BEGIN

	    ! Assume it won't be found
	    !
	    TEMP_DESC [ DSC$W_LENGTH ] = 0;

	    SELECTONE .FDL$GL_SECONDARY OF

	    SET

	    [ FDL$C_ACE ] :
		BEGIN

		TEMP_DESC [ DSC$A_POINTER ] = UPLIT BYTE (%ASCII 'Ace' );
		TEMP_DESC [ DSC$W_LENGTH ] = 3;

		END;

	    [ FDL$C_DFNAM ] :
		BEGIN

		IF .BLK [ FAB$L_DNA ] NEQU 0
		THEN
		    BEGIN

		    TEMP_DESC [ DSC$A_POINTER ] = .BLK [ FAB$L_DNA ];
		    TEMP_DESC [ DSC$W_LENGTH ] = .BLK [ FAB$B_DNS ];

		    END;

		END;

	    [ FDL$C_NAME ] :
		BEGIN

		IF .BLK [ FAB$L_FNA ] NEQU 0
		THEN
		    BEGIN

		    TEMP_DESC [ DSC$A_POINTER ] = .BLK [ FAB$L_FNA ];
		    TEMP_DESC [ DSC$W_LENGTH ] = .BLK [ FAB$B_FNS ];

		    END;

		END;

	    [ FDL$C_AFTNAM ] :
		BEGIN

		IF .BLK [ XAB$L_AIA ] NEQU 0
		THEN
		    BEGIN

		    TEMP_DESC [ DSC$A_POINTER ] = .BLK [ XAB$L_AIA ];
		    TEMP_DESC [ DSC$W_LENGTH ] = .BLK [ XAB$B_AIS ];

		    END;

		END;

	    [ FDL$C_AUDNAM ] :
		BEGIN

		IF .BLK [ XAB$L_ATA ] NEQU 0
		THEN
		    BEGIN

		    TEMP_DESC [ DSC$A_POINTER ] = .BLK [ XAB$L_ATA ];
		    TEMP_DESC [ DSC$W_LENGTH ] = .BLK [ XAB$B_ATS ];

		    END;

		END;

	    [ FDL$C_BEFNAM ] :
		BEGIN

		IF .BLK [ XAB$L_BIA ] NEQU 0
		THEN
		    BEGIN

		    TEMP_DESC [ DSC$A_POINTER ] = .BLK [ XAB$L_BIA ];
		    TEMP_DESC [ DSC$W_LENGTH ] = .BLK [ XAB$B_BIS ];

		    END;

		END;

	    [ FDL$C_KYNAME ] :
		BEGIN

		IF .BLK [ XAB$L_KNM ] NEQU 0
		THEN
		    BEGIN

		    TEMP_DESC [ DSC$A_POINTER ] = .BLK [ XAB$L_KNM ];
		    TEMP_DESC [ DSC$W_LENGTH ] = 32;

		    END;

		END;

	    TES;

	    ! If the string length is 0, don't bother putting it out
	    !
	    IF .TEMP_DESC [ DSC$W_LENGTH ] EQLU 0
	    THEN
		RETURN 0;

	    ! Add Quotes or Apostrophes to the output string
	    !
	    BEGIN

		LOCAL
		    QCHAR	: BYTE,
		    OIDX	: WORD,
		    ICHAR	: REF VECTOR [ ,BYTE ];

		! Get a buffer big enough to hold the result
		!
		STRBYTES = ( .TEMP_DESC [ DSC$W_LENGTH ] * 2 ) + 2;
		IF NOT LIB$GET_VM ( STRBYTES, OCHAR )
		THEN
		    SIGNAL_STOP ( FDL$_INSVIRMEM );
		CH$FILL ( 0, .STRBYTES, .OCHAR );
		ICHAR = .TEMP_DESC [ DSC$A_POINTER ];

		! Clear the flags
		!
		FDL$AB_CTRL [ FDL$V_APOST_PRES ] = _CLEAR;
		FDL$AB_CTRL [ FDL$V_QUOTE_PRES ] = _CLEAR;

		! Scan the buffer for quotes/apostrophes
		!
		INCR X FROM 0 TO (.TEMP_DESC[DSC$W_LENGTH]-1)
		DO
		    BEGIN

		    IF .ICHAR [ .X ] EQLU ''''
		    THEN
			FDL$AB_CTRL [ FDL$V_APOST_PRES ] = _SET;

		    IF .ICHAR [ .X ] EQLU '"'
		    THEN
			FDL$AB_CTRL [ FDL$V_QUOTE_PRES ] = _SET;

		    END;

		! Add quotes to a 'vanilla' string
		! Add apostrophes to a string with quotes
		! Add quotes to a string with apostrophes
		! Add quotes to a string with both - and double the quotes
		!
		IF .FDL$AB_CTRL [ FDL$V_QUOTE_PRES ]
		THEN
		    BEGIN

		    IF .FDL$AB_CTRL [ FDL$V_APOST_PRES ]
		    THEN
			! Quotes AND Apostrophes were found
			!
			BEGIN

			QCHAR = '"';
			OIDX = 0;
			OCHAR [ .OIDX ] = .QCHAR;
			OIDX = .OIDX + 1;

			INCR I FROM 0 TO (.TEMP_DESC[DSC$W_LENGTH]-1)
			DO
			    IF .ICHAR [ .I ] EQLU .QCHAR
			    THEN
				BEGIN
				OCHAR [ .OIDX ] = .QCHAR;
				OIDX = .OIDX + 1;
				OCHAR [ .OIDX ] = .QCHAR;
				OIDX = .OIDX + 1;
				END
			    ELSE
				BEGIN
				OCHAR [ .OIDX ] = .ICHAR [ .I ];
				OIDX = .OIDX + 1;
				END;

			OCHAR [ .OIDX ] = .QCHAR;
			OIDX = .OIDX + 1;

			END
		    ELSE
			! Quotes were found, Apostrophes were not
			!
			BEGIN

			QCHAR = '''';
			OIDX = 0;
			OCHAR [ .OIDX ] = .QCHAR;
			OIDX = .OIDX + 1;

			INCR I FROM 0 TO (.TEMP_DESC[DSC$W_LENGTH]-1)
			DO
			    BEGIN

			    OCHAR [ .OIDX ] = .ICHAR [ .I ];
			    OIDX = .OIDX + 1;

			    END;

			OCHAR [ .OIDX ] = .QCHAR;
			OIDX = .OIDX + 1;

			END;

		    END
		ELSE
		    BEGIN

		    ! If Quotes were not found, it doesn't make
		    ! any difference if Apostrophes were
		    !
		    QCHAR = '"';
		    OIDX = 0;
		    OCHAR [ .OIDX ] = .QCHAR;
		    OIDX = .OIDX + 1;

		    INCR I FROM 0 TO (.TEMP_DESC[DSC$W_LENGTH]-1)
		    DO
			BEGIN

			OCHAR [ .OIDX ] = .ICHAR [ .I ];
			OIDX = .OIDX + 1;

			END;

		    OCHAR [ .OIDX ] = .QCHAR;
		    OIDX = .OIDX + 1;
		    
		    END;

		! Make the new string the result
		!
		TEMP_DESC [ DSC$A_POINTER ] = .OCHAR;
		TEMP_DESC [ DSC$W_LENGTH ] = .OIDX;

	    END;

	    ! The final string that resulted
	    !
	    FAO_PARAM = TEMP_DESC;

	    END;

	[ FDL$C_QUALIFIER ] : 
	    BEGIN

	    SELECTONE .FDL$GL_SECONDARY OF

	    SET

	    [ FDL$C_CARCTRL ] :

		BEGIN

		IF .BLK [ FAB$V_CR ]
		THEN
		    FAO_PARAM = UPLIT BYTE (%ASCIC 'carriage_return' )
		ELSE IF .BLK [ FAB$V_FTN ]
		THEN
		    FAO_PARAM = UPLIT BYTE (%ASCIC 'FORTRAN' )
		ELSE IF .BLK [ FAB$V_PRN ]
		THEN
		    FAO_PARAM = UPLIT BYTE (%ASCIC 'print' )
		ELSE
		    FAO_PARAM = UPLIT BYTE (%ASCIC 'none' );

		END;

	    [ FDL$C_ORG ] :

		BEGIN

		SELECTONE .BLK [ FAB$B_ORG ] OF

		SET

		[ FAB$C_IDX ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'indexed' );
		[ FAB$C_REL ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'relative' );
		[ FAB$C_SEQ ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'sequential' );
		[ OTHERWISE ] : 0;

		TES;

		END;

	    [ FDL$C_RU ] :

		BEGIN

		IF .BLK [ XAB$V_RU ]
		THEN
		    FAO_PARAM = UPLIT BYTE (%ASCIC 'if_in_recovery_unit' )
		ELSE IF .BLK [ XAB$V_ONLY_RU ]
		THEN
		    FAO_PARAM = UPLIT BYTE (%ASCIC 'necessary_to_write' )
		ELSE IF .BLK [ XAB$V_NEVER_RU ]
		THEN
		    FAO_PARAM = UPLIT BYTE (%ASCIC 'never_RU_journal' )
		ELSE
	    	    FAO_PARAM = UPLIT BYTE (%ASCIC 'none' );

		END;

	    [ FDL$C_FMT ] :

		BEGIN

		SELECTONE .BLK [ FAB$B_RFM ] OF

		SET

		[ FAB$C_STM ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'stream' );
		[ FAB$C_STMCR ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'stream_CR' );
		[ FAB$C_STMLF ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'stream_LF' );
		[ FAB$C_UDF ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'undefined' );
		[ FAB$C_VAR ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'variable' );
		[ FAB$C_VFC ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'VFC' );
		[ FAB$C_FIX ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'fixed' );
		[ OTHERWISE ] : 0;

		TES;

		END;

	    [ FDL$C_SEGTYP ] :

		BEGIN

		SELECTONE .BLK [ XAB$B_DTP ] OF

		SET

		[ XAB$C_BN2 ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'bin2' );
		[ XAB$C_BN4 ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'bin4' );
		[ XAB$C_BN8 ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'bin8' );
		[ XAB$C_PAC ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'decimal' );
		[ XAB$C_IN2 ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'int2' );
		[ XAB$C_IN4 ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'int4' );
		[ XAB$C_IN8 ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'int8' );
		[ XAB$C_STG ] : FAO_PARAM = UPLIT BYTE (%ASCIC 'string' );
		[ OTHERWISE ] : 0;

		TES;

		END;

	    [ OTHERWISE ] : 0;

	    TES;

	    END;

	TES;

    RETURN SS$_NORMAL;

    END;

END	ELUDOM
