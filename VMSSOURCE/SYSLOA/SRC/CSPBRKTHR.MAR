	.TITLE	CSPBRKTHRU
	.IDENT	'V04-000'

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:	VMS Cluster Server Process
;
; ABSTRACT:	Client support in CSP process for $BRKTHRU.
;
; AUTHOR:	Jake VanNoy
;
; DATE:		22-APR-1983 	
;
; REVISION HISTORY:
;
;	V03-003	ADE0001		Alan D. Eldridge	18-Jan-1984
;		Make call to $BRKTRHU asynchronous
;
;	V03-002	JLV0298		Jake VanNoy		28-JUL-1983
;		Add $BRKDEF.
;
;	V03-001	JLV0285		Jake VanNoy		28-JUL-1983
;		Make word values longwords before passing them to $BRKTHRU.
;
;--

	$BRKDEF			; Breakthru symbols
	$CSDDEF			; CSP protocol offsets



;
; R2 -> CSD from source
;

CSP$BRKTHRU::			; Breakthru write routine

	PUSHR	#^M<R2,R3,R4,R5,R6,R7,R8>
	
	MOVL	CSD$L_SENDOFF(R2),R7	; send data address

	MOVL	SP,R8			; Save SP

	BICL	#BRK$M_CLUSTER,-
		CSD$L_BRK_FLAGS(R7)	; Set no more cluster sends

	MOVAQ	-(SP),R3			; allocate descriptor
	MOVZWL	CSD$W_BRK_MSGLEN(R7),(R3) 	; message length
	MOVAB	CSD$T_BRK_MSGBUF(R7),4(R3)	; and address

	MOVAQ	-(SP),R4			; allocate descriptor
	MOVZBL	CSD$T_BRK_SENDTO(R7),(R4) 	; message length
	MOVAB	CSD$T_BRK_SENDTO+1(R7),4(R4)	; and address

	MOVZWL	CSD$W_BRK_SNDTYP(R7),R5		; Send type
	MOVZWL	CSD$W_BRK_REQID(R7),R6		; Requestor ID
	MOVZWL	CSD$W_BRK_TIMOUT(R7),R2		; time out value
		
	$BRKTHRU_S -
		MSGBUF = (R3),-
		FLAGS  = CSD$L_BRK_FLAGS(R7),-
		CARCON = CSD$L_BRK_CARCON(R7),-
		TIMOUT = R2,-
		REQID  = R6,-
		SENDTO = (R4),-
		SNDTYP = R5,-
		ASTADR = CSP$$RESUME,-
		ASTPRM = CSP$GL_CURCTX

	MOVL	R8,SP				; Restore stack
	POPR	#^M<R2,R3,R4,R5,R6,R7,R8>	; Restore regs
	BLBC	R0,100$				; If LBC, didn't queue request
	CALLS	#0,CSP$$WAIT			; Else, wait for AST
						;
100$:	MOVL	#SS$_NORMAL,R0			; Return success
	RSB					; Done

.END
