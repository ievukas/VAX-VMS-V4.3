	.TITLE	PAS$CARD2 - Return cardinality of set
	.IDENT	/1-001/			; File: PASCARD2.MAR Edit: SBL1001

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Pascal Language Support
;
; ABSTRACT:
;
;	This module contains PAS$CARD2, which implements the Pascal
;	CARD function.
;
; ENVIRONMENT: User mode, AST Reentrant
;
; AUTHOR: Steven B. Lionel, CREATION DATE: 6-July-1981
;
; MODIFIED BY:
;
; 1-001	- Original. SBL 6-July-1981
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
;	NONE
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL		; Force all external symbols to be declared

;	NONE
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _PAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG
;
; OWN STORAGE:
;

;+
; NBITS_TABLE is a 256-element table which, when indexed by a byte value,
; gives the number of "1" bits in that byte value.
;-

NBITS_TABLE:
	.BYTE	0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4	; 0-15
	.BYTE	1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5	; 16-31
	.BYTE	1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5	; 32-47
	.BYTE	2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6	; 48-63
	.BYTE	1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5	; 64-79
	.BYTE	2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6	; 80-95
	.BYTE	2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6	; 96-111
	.BYTE	3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7	; 112-127
	.BYTE	1,2,2,3,2,3,3,4,2,3,3,4,3,4,4,5	; 128-143
	.BYTE	2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6	; 144-159
	.BYTE	2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6	; 160-175
	.BYTE	3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7	; 176-191
	.BYTE	2,3,3,4,3,4,4,5,3,4,4,5,4,5,5,6	; 192-207
	.BYTE	3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7	; 208-223
	.BYTE	3,4,4,5,4,5,5,6,4,5,5,6,5,6,6,7	; 224-239
	.BYTE	4,5,5,6,5,6,6,7,5,6,6,7,6,7,7,8	; 240-255



	.SBTTL	PAS$CARD2 - Return cardinality of set
;++
; FUNCTIONAL DESCRIPTION:
;
;	PAS$CARD2 returns as its function value the cardinality of
;	its argument, a Pascal set.  Cardinality of a set is the
;	number of "1" bits currently on in the set value.
;
; CALLING SEQUENCE:
;
;	card.wl.v = PAS$CARD2 (set_size.rl.v, set.rbu.ra)
;
; FORMAL PARAMETERS:
;
	set_size	= 4	; The size of the set in bytes.  It is
				; assumed that all sets are stored as an
				; integral number of bytes, with unused bits
				; stored as zero.
	set		= 8	; The address of the set.

;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The number of "1" bits in the set.
;
; SIDE EFFECTS:
;
;	SS$_INTOVF, integer overflow, if the number of "1" bits is greater than
;	greater than 2**31-1
;
;--

	.ENTRY	PAS$CARD2, ^M<R2,R3,IV>	; Entry point

	CLRL	R0			; Set initial cardinality value
	MOVL	set(AP), R1		; Get address of set
	MOVL	set_size(AP), R2	; Get set length
	BEQL	90$			; If zero length, return value of zero

10$:	MOVZBL	(R1)+, R3		; Get next byte of set
	MOVZBL	NBITS_TABLE[R3], R3	; Get number of "1" bits in set byte
	ADDL2	R3, R0			; Add to cumulative total
					; Integer overflow possible
	SOBGTR	R2, 10$			; Loop until all bytes examined

90$:	RET				; Return to caller with cardinality
					; value in R0

	.END				; End of module PAS$CARD2
