	.TITLE	RMSRECIMP Recovery Impure Storage Manager
	.IDENT	/V04-000/
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

	.PSECT	REC_VM_CODE,EXE,NOWRT,PIC
;
;++
; Facility: RMS32 Recovery
;
; Abstract:
;
;		This module contains routines that maintain the impure
;		storage used by RMS Recovery.
;
;
; Environment:
;
;		Star processor running Starlet exec.  This routine is to be
;		merged into the RCP (Recovery Control Process) to handle
;		RMS Recovery operations.  This routine never executes outside
;		the context of the RCP.
;
;		This routine must be PIC since it will be merged into the
;		address space of the RCP.
;
; Author: 	Peter Lieberwirth	 Creation Date:  2-Jun-1982
;
; Modified By:
;
;	V01-008	KPL0007		Peter Lieberwirth	26-Jan-1983
;		Fix register usage bug with XABs and ALL_RFB.  Don't
;		allocate trnlog buffers anymore.  Detect DME errors
;		in GET_BUFF.
;
;	V01-006	KPL0006		Peter Lieberwirth	 5-Jan-1983
;		Set up JNL XAB journal names sizes correctly.
;
;	V01-005	KPL0005		Peter Lieberwirth	29-Dec-1982
;		Make RLOG GETMSG descriptor.
;
;	V01-004	KPL0004		Peter Lieberwirth	30-Nov-1982
;		Use RCPARG offsets into the AP.  Clean up some code.
;		Improve external interface to GET_BUFF.
;
;	V01-003	KPL0003		Peter Lieberwirth	18-Nov-1982
;		Fix typo.
;
;	V01-002	KPL0002		Peter Lieberwirth	14-Nov-1982
;		Add JNLXAB and buffers for journal names to RFB.  Init
;		debug logging RLOG descriptor.
;
;	V01-001	KPL0001		Peter Lieberwirth	31-Oct-1982
;		Fix IDENT, make logging re-entrant
;
;--

.SUBTITLE Declarations

;
; Include Files
;

;
; Macros
;

	$FABDEF
	$NAMDEF
	$RABDEF
	$XABDEF
	$XABJNLDEF

XAB$C_MAXJNLNAM=12

	$CJFDEF
	$RRPDEF
	$RIMPDEF
	$RFBDEF
	$RVBDEF
	$RRBDEF
	$ROFDEF

	$RFTLDEF
	$RLOGDEF
	$TMPOFFDEF	; offsets into AP for CALL
;
; local constants - for time being
;

RMS$_UNSUPPORTED=  0

;
; Do assumes here to insure that fixed overhead before each structure
; did not change
;
	ASSUME RRB$L_RRP EQ RIMP$C_BLN
	ASSUME RFB$L_NXT EQ RIMP$C_BLN
	ASSUME RVB$L_NXT EQ RIMP$C_BLN
	ASSUME ROF$L_NXT EQ RIMP$C_BLN

.SUBTITLE RM$RR_GET_BUFF	- allocate a buffer
;++
; 
; routine name:	RM$RR_GET_BUFF
;
;	This routine is used to allocate a block of virtual memory to be
;	used for buffers or data structures.  Each block allocated is
;	placed in a queue pointed to by the queue header in the RIMP.
;
;
; Calling sequence:
;
;	BSBW	RM$RR_GET_BUFF
;
;	This routine serves as a jacket routine for extrenal callers of
;	GET_BUFF.  It hides the RIMP detail.  It should NOT be used for
;	allocating structures other than generic buffers.
;
;	
;
; Input parameters:
;
;
;	R1	- size of block to allocate in bytes
;
;
; Output parameters:
;
;
;	R1	- size allocated
;	R2	- address of block allocated
;
;	if RM$RR_GET_BUFF, R2 is bumped beyond the RIMP overhead
;
; Side effects:
;
;	If DME, recovery is aborted from here.  Up-level callers to
;	RM$RR_GET_BUFF don't need to check for errors.
;
;--

RM$RR_GET_BUFF::			;
	ADDL2	#RIMP$C_BLN,R1		; count in common overhead
	BSBW	GET_BUFF		; get some memory
	ADDL2	#RIMP$C_BLN,R2		; point past overhead for user
	RSB				; to caller

GET_BUFF:				;
	BSBW	GET_BLOCK		; allocate some memory
	BLBC	R0,20$			; abort recovery on error (can only
					; be DME)
					;
	MOVB	#RIMP$C_BUFFER,-	; type it as buffer for time being
		RIMP$B_TYPE(R2)		;
	MOVW	#RIMP$C_RMS,-		;
		RIMP$W_FAC_CODE(R2)	; insert facility code
	MOVZWL	R1,RIMP$L_SIZE(R2)	; and size of block

;
; insert the allocated block on the RMS Recovery impure queue
;

	TSTL	R11			; branch if theres no IMPURE area
	BEQL	15$			; 
					;
	INSQUE	(R2),@4(R11)		; link in the block at the queue tail
					;
10$:	RSB				; return to caller
15$:					;
	MOVL	R2,RCPARG$_IMPURE(AP)	; must be the header
	MOVL	R2,R11			;
	MOVL	R2,RIMP$L_FORWARD(R2)	; initialize queue header
	MOVL	R2,RIMP$L_BACKWARD(R2)	;
	RSB

20$:	MOVZWL	#RFTL$_DME,R1		; dme error
	JMP	RM$RR_BUG		; get out.

.SUBTITLE RM$RR_ALL_RFB	- allocate and init RFB
;++
; 
; routine name:	RM$RR_ALL_RFB
;
;	This routine allocates, initializes, and links in to the RFB list
;	another RFB.
;
; Calling sequence:
;
;	BSBW	RM$RR_ALL_RFB
;
; Input parameters:
;
;
;	R9 - points to RODB for this file
;
;
; Output parameters:
;
;
;
; Side effects:
;
;	Lots...  RFB set up
;
;--

RM$RR_ALL_RFB::			;

;++
;
; The RFB is used to describe a recoverable file to RMS recovery.  One
; is allocated for every RODB that describes a file.
;
; Allocate a FAB, RAB, NAM, and JNLXAB at the same time.
;
;--

BLK_SIZ = RFB$C_BLN+FAB$C_BLN+RAB$C_BLN+NAM$C_BLN+XAB$C_JNLLEN
BUF_SIZ = 2*XAB$C_MAXJNLNAM

	MOVZWL	#<BLK_SIZ+BUF_SIZ>,R1	; allocate required storage at once
					; structure length
	BSBW	GET_BUFF		; allocate the space
					;
	MOVB	#RIMP$C_RFB,-		; identify the block as an RFB
		RIMP$B_TYPE(R2)		;

; we need some assume statements here about the order of the fields in the RFB

	ASSUME	RFB$L_RAB EQ RFB$L_FAB+4
	ASSUME	RFB$L_NAM EQ RFB$L_RAB+4

	ADDL3	#RFB$C_BLN,R2,R3	; get the address of the FAB
	MOVL	R3,RFB$L_FAB(R2)	; and store it in the RFB
					;
	ASSUME	FAB$B_BLN EQ FAB$B_BID+1
	MOVW	#FAB$C_BID+<FAB$C_BLN@8>,-
		FAB$B_BID(R3)		; make FAB look right	
					;
	ADDL2	#FAB$C_BLN,R3		; get address of RAB
	MOVL	R3,RFB$L_RAB(R2)	; and store it in the RFB
					;
	ASSUME	RAB$B_BLN EQ RAB$B_BID+1
	MOVW	#RAB$C_BID+<RAB$C_BLN@8>,-
		RAB$B_BID(R3)		; make RAB look right	

	ADDL2	#RAB$C_BLN,R3		; get address of NAM
	MOVL	R3,RFB$L_NAM(R2)	; and store it in the RFB
					;
	ASSUME	NAM$B_BLN EQ NAM$B_BID+1
	MOVW	#NAM$C_BID+<NAM$C_BLN@8>,-
		NAM$B_BID(R3)		; make NAM look right
					;
	ADDL2	#NAM$C_BLN,R3		; get address of JNLXAB
	MOVL	R3,RFB$L_JNLXAB(R2)	; and store it in the RFB
					;
	ASSUME	XAB$B_BLN EQ XAB$B_COD+1
	MOVW	#XAB$C_JNL+<XAB$C_JNLLEN@8>,-
		XAB$B_COD(R3)		; make JNLXAB look right
					;
	ADDL3	#XAB$C_JNLLEN,R3,R4	; point to first buffer for jnl name
	MOVL	R4,XAB$L_AIA(R3)	; its the buffer for the AI jnl name
	ADDL2	#XAB$C_MAXJNLNAM,R4	; point to next buffer
	MOVL	R4,XAB$L_BIA(R3)	; its the buffer for the BI jnl name
	MOVB	#XAB$C_MAXJNLNAM,-	; set up buffer sizes in XAB
		XAB$B_AIS(R3)		;
	MOVB	#XAB$C_MAXJNLNAM,-	; set up buffer sizes in XAB
		XAB$B_BIS(R3)		;

	MOVL	RRB$L_RFB(R11),-	; link this RFB into the RRB RFB list
		RFB$L_NXT(R2)		; ...
	MOVL	R2,RRB$L_RFB(R11) 	; ...
	MOVL	R9,RFB$L_RODB(R2) 	; insert pointer to RODB in RFB
	MOVL	#1,R0		  	; success
10$:	RSB			  	; and return

.SUBTITLE RM$RR_ALL_RVB	- allocate and init RVB
;++
; 
; routine name:	RM$RR_ALL_RVB
;
;	This routine allocates, initializes, and links in to the RVB list
;	another RVB.  The RVB is the recoverable volume block.  One is
;	allocated per recoverable volume per RRP.
;
; Calling sequence:
;
;	BSBW	RM$RR_ALL_RVB
;
; Input parameters:
;
;
;	R11 points to the RRB
;
;
; Output parameters:
;
;
;
; Side effects:
;
;	Lots...  RVB set up
;
;--

RM$RR_ALL_RVB::			;

;++
;
;
;--

	MOVZWL	#RVB$C_BLN,R1	; structure length
	BSBW	GET_BUFF	; allocate the space
				;
	MOVB	#RIMP$C_RVB,-	; identify the block as an RVB
		RIMP$B_TYPE(R2)	;

;
; Link the block into the RRB list
;
	MOVL	RRB$L_RVB(R11),-; set up pointer in new rvb
		RVB$L_NXT(R2)	;
	MOVL	R2,RRB$L_RVB(R11) ;
				;
	MOVL	#1,R0		; success
10$:	RSB			; and return

.SUBTITLE RM$RR_ALL_ROF	- allocate and init ROF
;++
; 
; routine name:	RM$RR_ALL_ROF
;
;	This routine allocates, initializes, and links in to the ROF list
;	another ROF.  The ROF describes the filters retunred to the RCP
;	for the recovery associated with either the RFB or RVB.
;
; Calling sequence:
;
;	BSBW	RM$RR_ALL_ROF
;
; Input parameters:
;
;
;	R1 contains an additional number of bytes for a filter list, etc...
;	This size is appended to the usual overhead size.
;
; Output parameters:
;
;
;
; Side effects:
;
;	Lots...  ROF set up
;
;--

RM$RR_ALL_ROF::			;

;++
;
; Should change R1 to be actual size...
;
;--

	ADDL2	#ROF$C_OVHD,R1	; structure length
	BSBW	GET_BUFF	; allocate the space
				;
	MOVB	#RIMP$C_ROF,-	; identify the block as a filter
		RIMP$B_TYPE(R2)	;
				;
				;
	MOVL	#1,R0		; success
10$:	RSB			; and return

.SUBTITLE RM$RR_ALL_RRB	- allocate and init RRB
;++
; 
; routine name:	RM$RR_ALL_RRB
;
;	This routine allocates, initializes, and links in to the RRB list
;	another RRB.  The RRB is allocated when the RRP is first passed
;	to the recovery routine, and serves as the impure header, and the
;	pointer to the recoverable file or volume descriptor blocks.
;
; Calling sequence:
;
;	BSBW	RM$RR_ALL_RRB
;
; Input parameters:
;
;
;	None
;
;
; Output parameters:
;
;
;
; Side effects:
;
;	Lots...  RRB set up
;
;--

RM$RR_ALL_RRB::

	MOVZWL	#RRB$C_BLN,R1		; structure length
	BSBW	GET_BUFF		; allocate the space
					;
	MOVB	#RIMP$C_RRB,-		; identify the block as the header
		RIMP$B_TYPE(R2)		;
	MOVL	RCPARG$_RRP(AP),- 	; set up back pointer to RRP
		RRB$L_RRP(R11)		; (only used for consistency checks on later
					; calls)
	MOVL	#1,RRB$L_RMS_FAC(R2)	; fill in RMS facility code
					;
	MOVL	#1,R0			; success
10$:	RSB				; and return

.SUBTITLE RM$RR_ALL_RLOG - allocate and init LOG
;++
; routine name:	RM$RR_ALL_RLOG
;
;	This routine allocates and initializes storage used for data
;	necessary for the logging of recovery.  Currently, recovery
;	is logged via FAO and PUTs to a log file.  Eventually, the
;	RCP will be used to do all logging, so no file will be opened.
;
; Calling Sequence:
;
;	BSBW	RM$RR_ALL_RLOG
;
; Input Parameters:
;
;	None.
;
; Output Parameters:
;
;	None.
;
; Side Effects:
;
;	None.
;
;--

RM$RR_ALL_RLOG::			; entry point

	MOVZWL	#RLOG$C_BLN,R1 		; structure length
	BSBW	GET_BUFF		; allocate the space
	MOVB	#RIMP$C_LOG,-		; identify the structure
		RIMP$B_TYPE(R2)		;
;
; Put address of RLOG in RRB
;
	MOVL	R2,RRB$L_LOG(R11)	; RRB points to RLOG
;
; Make a descriptor out of FAO_LEN and BUFF_ADDR
;
	ASSUME	RLOG$L_BUFF_ADDR EQ RLOG$L_FAO_LEN+4
	MOVAL	RLOG$T_FAO_BUF(R2),-	; put address of FAO output buffer
		RLOG$L_BUFF_ADDR(R2)	; in 2nd longword of descriptor (for
					; logging to RCP)
;
; Set up GETMSG descriptor
;
	MOVZWL	#256,RLOG$Q_GET_DESC(R2); length of buffer
	MOVAL	RLOG$T_GET_BUFF(R2),-	; and address of buffer
		RLOG$Q_GET_DESC+4(R2)	;
	MOVL	#1,R0			; success
	RSB				; and return

.SUBTITLE RM$RR_FREE_POOL	- deallocate VM
;++
; 
; routine name:	RM$RR_FREE_POOL
;
;	This routine deallocates all the virtual memory previously allocated
;	by RMS Recovery.
;
;
; Calling sequence:
;
;	BSBW	RM$RR_FREE_POOL
;
; Input parameters:
;
;	None.
;
; Output parameters:
;
;	None.
;
; Side effects:
;
;	Virtual memory deallocated.
;
;--

RM$RR_FREE_POOL::				;
					;
	REMQUE	@RIMP$L_FORWARD(R11),-	; get a block to deallocate
		R2			;
	BVS	10$			; if VS no more to deallocate but HEADER
					;
	MOVL	RIMP$L_SIZE(R2),R1	; get size of block to deallocate
	BSBW	FREE_BLOCK		; and deallocate it
	BRB	RM$RR_FREE_POOL		; go back for more
					;
10$:					;
	MOVL	R11,R2			; get address of HEADER
	MOVL	RIMP$L_SIZE(R2),R1	; and its size
	BSBW	FREE_BLOCK		; deallocate HEADER
	CLRL	R11			; indicate no HEADER left
	CLRL	RCPARG$_IMPURE(AP)	; indicate no HEADER left
	MOVL	#1,R0			; success
	RSB				; and return

.SUBTITLE Local Subroutines
.SUBTITLE -	GET_BLOCK - allocate 1 block of VM
;++
; 
; routine name:	GET_BLOCK
;
;	This routine performs the atomic operation of allocating a
;	block of virtual memory.  The caller must link it into the
;	queue pointed to by the queue header.
;
;
; Calling sequence:
;
;	BSBW	GET_BLOCK
;
; Input parameters:
;
;
;	R1	- size of block to allocate
;
;
; Output parameters:
;
;	R1	- size of allocated block
;	R2	- address of allocated block
;
;
; Side effects:
;
;	virtual block allocated and zeroed
;
;--

GET_BLOCK::			;
				;
	CLRL	-(SP)		; space for returned address
	MOVZWL	R1,-(SP)	; size of requested block
				;
	PUSHAL	4(SP)		; 2nd parameter, address of longword to receive
				; address of returned block
				;
	PUSHAL	4(SP)		; 1st parameter - size of structure
				;
	CALLS	#2,G^LIB$GET_VM	; allocate the block
	BLBC	R0,10$		; return error to caller
				;
	MOVL	(SP)+,R1	; get the size
	MOVL	(SP)+,R2	; get the address of the allocated block

;
; zero the space
;
	PUSHR	#^M<R0,R1,R2,R3,R4,R5> ; save registers clobbered by MOVC5
	MOVC5	#0,(R2),#0,R1,(R2) ; fill the space with zeros
	POPR	#^M<R0,R1,R2,R3,R4,R5> ; restore registers

	RSB			; return to caller
				;
10$:	ADDL2	#8,SP		; bump parameters off stack
	RSB

.SUBTITLE -	FREE_BLOCK - deallocate 1 block of VM
;++
; 
; routine name:	FREE_BLOCK
;
;	This routine deallocates one block of virtual memory.
;
; Calling sequence:
;
;	BSBW	FREE_BLOCK
;
; Input parameters:
;
;
;	R1	- size of block to deallocate
;	R2	- address of allocated block
;
;
; Output parameters:
;
;	None
;
; Side effects:
;
;	virtual block deallocated
;
;--

FREE_BLOCK::				;
					;
	PUSHL	R2			; address of block to deallocate
	PUSHL	R1			; size of block to deallocate
	PUSHAL	4(SP)			; P2 = address of address of block
	PUSHAL	4(SP)			; P1 = address of size of block
					;
	CALLS	#2,G^LIB$FREE_VM	; deallocate it
	ADDL2	#8,SP			; pop inputs off stack
	RSB				; and return

	.END
