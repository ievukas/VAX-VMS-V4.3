MODULE main (%TITLE 'MESSAGE FILE COMPILER' IDENT = 'V04-000', MAIN = start) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  Message compiler
!
! ABSTRACT:
!
!	This compiler translated message definition language
!	into object modules
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Tim Halvorsen, Nov 1979
!
! Modified by:
!
! 	V03-006 GJA0088  	Greg Awdziewicz 	11-Juj-1984 
! 		- Make /list the default for batch mode compiles.  
! 		(Change check for presence of global use of positional 
! 		qualifiers.) 
! 		- Centralize ASCID strings by using SD_ macro. 
!
! 	V03-005 GJA0074  	Greg Awdziewicz 	6-Mar-1984 
! 		- Change output file handling from using $Parse to use 
! 		the new version of LIB$Find_file routine which handles 
! 		multiple input file stickyness. 
! 		- Change input file searching to use the new sticky-context 
! 		argument in the LIB$File_scan routine. 
!
! 	V03-004 GJA0066  	Greg Awdziewicz 	3-Feb-1984 
! 		- Reset the FAB$V_OFP bit for the output qualifiers 
! 		which have values specified so that Message's treatment 
! 		is consistent with other language processors. 
! 
! 	V03-003 GJA0062  	Greg Awdziewicz 	9-Jan-1984 
! 		- Remove references to pseudo qualifier /noObject now that 
! 		NEG is allowed in CLD as an operator. 
! 
! 	V03-002 GJA0048 	Greg Awdziewicz 	7-Sep-1983 
! 		Change to new CLI interface.  (Incorporating previous module, 
! 		GETQUALS, into this module)
! 
!	V03-001	JWT0058		Jim Teague		22-Sep-1982
!		Failure to find input file is FATAL, like other compilers.
!
!	V02-006 JWT0011		Jim Teague		15-Feb-1982
!		Special cased the elimination of error summaries when
!		no input files found.
!
!	V02-005	BLS0145		Benn Schreiber		 6-Feb-1982
!		Change FMG$FILE_SCAN to LIB$FILE_SCAN
!
!	V02-004 JWT0005		Jim Teague		11-Dec-1981
!		Set FOP=OFP in output fabs to keep output files
!		in the default directory
!
!	V02-003 JWT0002		Jim Teague		06-NOV-1981
!		Added /SDL capability
!
!	V02-002	PCG0002		Peter George		24-Aug-1981
!		Allow use of SYS$INPUT as input file spec.
!
!	V02-001	PCG0001		Peter George		29-Dec-1980
!		Add /MDL functionality.
!
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';	! VAX/VMS common definitions

SWITCHES LIST(REQUIRE);			! Print require file
REQUIRE 'SRC$:MSG.REQ';			! Command definitions

%SBTTL 'Table of Contents, Variables, Externals, etc.' 
!
! Table of contents
!

FORWARD ROUTINE
    start,				! Main routine
    get_quals: 		NOVALUE, 	! Get command qualifiers
    rms_error,				! RMS general error routine
    search_error,			! Signal error searching for file
    do_file,				! Process each input file
    get_module_name,			! Compute module name string
    handler;				! Signal handler

! 
! Macro SD_ for string descriptors and the strings 
! 
MACRO 
    sd [string] = BIND %NAME('sd_', string) =$descriptor (string)%; 

sd ('$LINE', 'FILE_NAME', 'LIST', 'MDL', 'OBJECT', 'P1', 'SDL', 'SYMBOLS', 'TEXT'); 

!
! OWN storage
!

LITERAL
    buffer_size = 512;			! Length of record buffer

OWN
    input_exname:			! Input expanded file name buffer
	VECTOR [nam$c_maxrss,BYTE],
    input_rsname:			! Input result file name buffer
	VECTOR [nam$c_maxrss,BYTE],
    input_nam:	$NAM(			! File name block
		RSA = input_rsname,	! Result string buffer
		RSS = nam$c_maxrss,
		ESA = input_exname,	! Expanded string buffer
		ESS = nam$c_maxrss), 
    input_xabdat:
		$XABDAT(),		! Date/time XAB for input file

    listing_exname:
	VECTOR [nam$c_maxrss,BYTE],	! Expanded file name buffer
    listing_relname: 			! Related name buffer. 
	VECTOR [nam$c_maxrss, BYTE], 
    listing_rel_nam: 			! Name block for related input file. 
		$NAM( 
		RSA = listing_relname), 
    listing_rsname:
	VECTOR [nam$c_maxrss,BYTE],	! Result file name buffer
    listing_nam: $NAM(
		ESA = listing_exname,	! Expanded string buffer
		ESS = nam$c_maxrss,
		RSA = listing_rsname,	! Result string buffer
		RSS = nam$c_maxrss,
		RLF = listing_rel_nam),	! Related NAM block

    mdl_exname:
	VECTOR [nam$c_maxrss,BYTE],	! Expanded file name buffer
    mdl_relname: 			! Related name buffer. 
	VECTOR [nam$c_maxrss, BYTE], 
    mdl_rel_nam: 			! Name block for related input file. 
		$NAM( 
		RSA = mdl_relname), 
    mdl_rsname:
	VECTOR [nam$c_maxrss,BYTE],	! Result flie name buffer
    mdl_nam: $NAM(
		ESA = mdl_exname,	! Expanded string buffer
		ESS = nam$c_maxrss,
		RSA = mdl_rsname,	! Result string buffer
		RSS = nam$c_maxrss,
		RLF = mdl_rel_nam),	! Related NAM block

    object_exname:
	VECTOR [nam$c_maxrss,BYTE],	! Expanded file name buffer
    object_relname: 			! Related name buffer. 
	VECTOR [nam$c_maxrss, BYTE], 
    object_rel_nam: 			! Name block for related input file. 
		$NAM( 
		RSA = object_relname), 
    object_rsname:
	VECTOR [nam$c_maxrss,BYTE],	! Result file name buffer
    object_nam: $NAM(
		ESA = object_exname,	! Expanded string buffer
		ESS = nam$c_maxrss,
		RSA = object_rsname,	! Result string buffer
		RSS = nam$c_maxrss,
		RLF = object_rel_nam),	! Related NAM block

    record_buffer:
	VECTOR [buffer_size,BYTE], 	! Input record buffer

    sdl_exname:
	VECTOR [nam$c_maxrss,BYTE],	! Expanded file name buffer
    sdl_relname: 			! Related name buffer. 
	VECTOR [nam$c_maxrss, BYTE], 
    sdl_rel_nam: 			! Name block for related input file. 
		$NAM( 
		RSA = sdl_relname), 
    sdl_rsname:
	VECTOR [nam$c_maxrss,BYTE], 	! Result file name buffer
    sdl_nam: $NAM(
		ESA = sdl_exname,	! Expanded string buffer
		ESS = nam$c_maxrss,
		RSA = sdl_rsname,	! Result string buffer
		RSS = nam$c_maxrss,
		RLF = sdl_rel_nam); 	! Related NAM block

GLOBAL
    cli_flags		: BITVECTOR[32]	! Qualifier presence bitmap
	INITIAL(0), 			! Initially none present

    command_line_desc:			! Descriptor for entire command line. 
	BLOCK [dsc$k_s_bln, BYTE] 
	PRESET ([dsc$w_length] = 0, 
		[dsc$b_class] = dsc$k_class_d, 
		[dsc$b_dtype] = dsc$k_dtype_t, 
		[dsc$a_pointer] = 0), 

    file_queue_hdr: 			! Header for queue of input file names. 
	BBLOCK[8] FIELD (info_queue_flds) 
	PRESET ([queue_flink] = file_queue_hdr, [queue_blink] = file_queue_hdr), 

    filename_desc:			! Descriptor of /FILE value
	BLOCK [dsc$k_s_bln, BYTE] 
	PRESET ([dsc$w_length] = 0, 
		[dsc$b_class] = dsc$k_class_d, 
		[dsc$b_dtype] = dsc$k_dtype_t, 
		[dsc$a_pointer] = 0), 

    input_fab:	$FAB(			! Input file FAB
		DNA = UPLIT('.MSG'),	! Default file name
		DNS = 4,
		NAM = input_nam,	! NAM block
		XAB = input_xabdat),	! XABDAT block
    input_rab:	$RAB(			! Input file RAB
		FAB = input_fab,
		UBF = record_buffer,	! Record buffer
		USZ = buffer_size),

    listing_fab: $FAB(			! Listing file FAB
		DNA = UPLIT('.LIS'),	! Default file name
		DNS = 4,
		FOP = OFP,
		NAM = listing_nam,	! Address of NAM block
		RAT = CR,		! Carriage return format
		RFM = VAR),		! Variable length records
    listing_rab: $RAB(			! Listing file RAB
		FAB = listing_fab,
		ROP = WBH),		! Overlap I/O if possible

    mdl_fab:	$FAB(			! MDL file FAB
		DNA = UPLIT('.MDL'),	! Default file name
		DNS = 4,
		FOP = OFP,
		NAM = mdl_nam,		! Address of NAM block
		RAT = CR,		! Carriage return format
		RFM = VAR),		! Variable length records
    mdl_rab: 	$RAB(			! MDL file RAB
		FAB = mdl_fab,
		ROP = WBH),		! Overlap I/O if possible

    module_name:	VECTOR	[2],	! Descriptor of module name

    object_fab:	$FAB(			! Object module file FAB
		DNA = UPLIT('.OBJ'),
		DNS = 4,
		FOP = OFP,
		NAM = object_nam),
    object_rab:	$RAB(			! Object module RAB
		FAB = object_fab),

    output_fab:	$FAB(			! Output file FAB
		FNM='SYS$OUTPUT:',	! File name
		RAT = CR,		! Carriage return format
		RFM = VAR),		! Variable length records
    output_rab:	$RAB(			! Output file RAB
		FAB = output_fab),

    sdl_fab:	$FAB(			! SDL file FAB
		DNA = UPLIT('.SDL'),	! Default file name
		DNS = 4,
		FOP = OFP,
  		NAM = sdl_nam,		! Address of name block
		RAT = CR,		! Carriage return format
		RFM = VAR),		! Variable length records
    sdl_rab:	$RAB(			! SDL file RAB
		FAB = sdl_fab,
		ROP = WBH),		! Overlap I/O if possible

    worst_error: INITIAL(ss$_normal)	! Worst error encountered
		BBLOCK[4]; 

!
! External routines
!

EXTERNAL ROUTINE
    parse_file, 			! Parse input file 
    output_object,			! Output object module
    end_listing,			! Cleanup listing file
    error_summary,			! Give error summary
    lib$file_scan: 	ADDRESSING_MODE(GENERAL), 	! Search wildcard sequence 
							! for all files. 
    lib$find_file: 	ADDRESSING_MODE(GENERAL), 	! Search wildcard sequence
							! for next file. 
    lib$free_vm: 	ADDRESSING_MODE(GENERAL), 	! Dynamic memory deallocation. 
    lib$get_vm: 	ADDRESSING_MODE(GENERAL), 	! Allocate dynamic memory. 
    cli$get_value: 	ADDRESSING_MODE(GENERAL), 	! Get command line values. 
    cli$present: 	ADDRESSING_MODE(GENERAL); 	! Test command line for 
							! presence of qualifiers. 

! 
! External literals (for command line interpreter codes): 
! 

EXTERNAL LITERAL 
    cli$_absent, 
    cli$_defaulted, 
    cli$_locneg, 
    cli$_locpres, 
    cli$_negated, 
    cli$_present; 

ROUTINE null: NOVALUE = ; 

%SBTTL 'START Routine' 
ROUTINE start =

!---
!
!	This is the main routine for the message compiler.  This
!	program accepts the message definition language and generates
!	object modules which may be linked into any image.  $GETMSG
!	will locate the message definitions in the message sections.
!
! Inputs:
!
!	None
!
! Outputs:
!
!	Object module specified by /OBJECT
!	Listing file specified by /LIST
!	MDL file specified by /MDL
!	SDL file specified by /SDL
!
!---

BEGIN

BUILTIN
    FP,  				! Reference FP register
    REMQUE; 


LOCAL 
    status;

!
!	Set signal handler
!

.fp = handler;				! Set handler address



!
!	Parse the command line 
!

get_quals();				! Get command qualifiers and parameters. 

!
!	Open the output file for error reporting only
!

status = $CREATE (FAB = output_fab);	! Always create output file
IF NOT .status THEN rms_error (emsg(openout),output_fab);
status = $CONNECT (RAB = output_rab);
IF NOT .status THEN rms_error (emsg(openout),output_fab,output_rab);

!
!	Process each file in the input list
!

BEGIN 
LOCAL 
    sticky_context: 	INITIAL (0), 	! Argument for lib$file_scan.  
    file_info: REF BBLOCK 		! Address for input file info 
	FIELD (info_queue_flds); 	!  block. 


UNTIL REMQUE(.file_queue_hdr[queue_flink], file_info) DO 
    BEGIN 
    input_fab[fab$l_fna] = .file_info[name_addr]; 
    input_fab[fab$b_fns] = .file_info[name_length]; 
    lib$file_scan(input_fab,		! Search all wildcard files
		do_file,		!  calling here if file is found
		search_error, 		!  calling here if error occurs
		sticky_context); 	!  maintain sticky-context. 
    lib$free_vm(%REF(queue_element_size), file_info); 
    END; 
END; 

!
!	Generate the object module file
!

IF .cli_flags [qual_object]		! If /OBJECT specified,
	AND .worst_error		! and no errors so far,
THEN
    output_object();			! Output object module

!
!	Close the output and listing files
!

IF NOT .worst_error 			! If error detcted,
THEN
    error_summary(output_rab);		! Give summary

status = $CLOSE (FAB = output_fab);	! Close output file
IF NOT .status THEN rms_error (emsg(closedel), output_fab);

IF .cli_flags [qual_listing]		! If /LIST specified,
    AND .listing_fab [fab$w_ifi] NEQ 0	! and it was opened
THEN
    BEGIN
    end_listing(listing_rab);		! Cleanup listing file
    status = $CLOSE (FAB = listing_fab);	! Close the listing file
    IF NOT .status
    THEN
        rms_error (emsg(closedel), listing_fab);
    END;

IF .cli_flags [qual_mdl]		! If /MDL specified,
   AND .mdl_fab [fab$w_ifi] NEQ 0	! and it was opened
THEN 
    BEGIN
    status = $CLOSE (FAB = mdl_fab);	! Close the MDL file
    IF NOT .status
    THEN
        rms_error (emsg(closedel), mdl_fab);
    END;

IF .cli_flags [qual_sdl]		! If /SDL specified,
   AND .sdl_fab [fab$w_ifi] NEQ 0	! and it was opened
THEN 
    BEGIN
    status = $CLOSE (FAB = sdl_fab);	! Close the SDL file
    IF NOT .status
    THEN
        rms_error (emsg(closedel), sdl_fab);
    END;

RETURN .worst_error;			! Return worst error encountered

END;

%SBTTL 'GET_QUALS - Parse command line.'
ROUTINE get_quals : NOVALUE =

!----
!
! Functional description
!
!	This routine uses cli$present and cli$get_value to set a flag word 
! 	indicating which qualifiers are present in the comand line and to get 
! 	the values for qualifiers which have them.  It also gets the input 
! 	filenames and puts them into a queue and determines related filenames 
! 	for output files. 
!
! Input parameters
!
!	None
! 
! Implicit inputs 
! 
! 	The command line and the associated rms data structures for specified 
! 	files are implicit inputs. 
!
! Output parameters
!
!	cli_flags	= Bitmap indicating which qualifiers are present
! 
! Implicit outputs 
! 
! 	A queue of file input file information and filling in of RMS NAM blocks 
! 	for ouput files. 
!
!----

! AUTHOR:  Tim Halvorsen, Nov 1979
!
! Modified by:
!
! 	V03-001 GJA0049 	Greg Awdziewicz 	8-Sep-1983 
! 		Change to new CLI interface. 
! 		Merge into MAIN module. 
! 		Change qualifiers (/LISTING -> /LIST, /FILE -> /FILE_NAME) for 
! 		consistency with other utilities and with documentation. 
! 
!	V02-002 JWT0002     	Jim Teague		06-NOV-1981
!		Added /SDL capability
!
!	V02-001	PCG0001		Peter George		29-Dec-1980
!		Add /MDL functionality
!
!--

BEGIN
BUILTIN 
    INSQUE; 
LOCAL 
    first_parm_flag: 			! First parameter gets special treatment. 
	INITIAL (true), 
    value: 				! Dynamic descriptor for cli$get_value 
	BLOCK [dsc$k_s_bln, BYTE] 	! to use to return a value. 
	PRESET ([dsc$w_length] = 0, 
		[dsc$b_class] = dsc$k_class_d, 
		[dsc$b_dtype] = dsc$k_dtype_t, 
		[dsc$a_pointer] = 0), 
    result: 				! Dynamic descriptor for lib$find_file 
	BLOCK [dsc$k_s_bln, BYTE] 	! to use to return the file spec. 
	PRESET ([dsc$w_length] = 0, 
		[dsc$b_class] = dsc$k_class_d, 
		[dsc$b_dtype] = dsc$k_dtype_t, 
		[dsc$a_pointer] = 0), 
    context: 	INITIAL (0), 		! Context pointer for lib$find_file. 
    default: 				! Descriptor for lib$find_file 
	BLOCK [dsc$k_s_bln, BYTE] 	! to use for defaults. 
	PRESET ([dsc$b_class] = dsc$k_class_s, 
		[dsc$b_dtype] = dsc$k_dtype_t), 
    stv, 				! RMS error status value. 
    ffflgs: 	BITVECTOR [32] 		! Lib$find_file user flags: 
	PRESET ([1] = true), 		!  multiple input file stickyness. 

    status: 	INITIAL (true); 


! Set the default descriptor from the input file fab: 
!
default[dsc$w_length] = .input_fab[fab$b_dns]; 
default[dsc$a_pointer] = .input_fab[fab$l_dna]; 


! Get a copy of the whole command line so that we can echo it in the listing: 
! 
cli$get_value (sd_$LINE, command_line_desc); 


!+ 
!  Check first for the nonpositional global qualifiers (/File_name, /Symbols, 
!  and /Text). 
!- 


! Check if /FILE_NAME qualifier is present and get filename to point to: 
!
IF cli$present (sd_FILE_NAME) 
THEN 
    BEGIN 
    cli_flags[qual_file] = true; 
    cli$get_value (sd_FILE_NAME, filename_desc); 
    IF .filename_desc[dsc$w_length] GTRU nam$c_maxrss 
    THEN 
	SIGNAL (emsg(syntax), 1, filename_desc); 
    END; 


! Check if /SYMBOLS qualifier is present: 
!
IF cli$present (sd_SYMBOLS) 
THEN 
    cli_flags[qual_symbols] = true; 


! Check if /TEXT qualifier is present: 
!
IF cli$present (sd_TEXT) 
THEN 
    cli_flags[qual_text] = true; 


!+ 
!  Check next for the positional qualifiers (/List, /Mdl, /Object, and /Sdl) 
!  to see if any are used in a global sense (that is, to see if they were used 
!  as qualifiers on the command rather than on a file specification). 
!- 


! Check if /LIST qualifier is present and get filename for listing output: 
!
 
IF cli$present (sd_LIST) THEN 
    BEGIN 
    cli_flags[qual_listing] = true; 
    IF cli$get_value (sd_LIST, value) THEN 
	BEGIN 
	listing_fab [fab$b_fns] = .value[dsc$w_length]; 
	listing_fab [fab$l_fna] = .value[dsc$a_pointer]; 
	value[dsc$w_length] = 0; 
	value[dsc$a_pointer] = 0; 
	END;
    END; 


! Check if /MDL qualifier is present and get filename for MDL output: 
!
IF cli$present (sd_MDL) THEN 
    BEGIN 
    cli_flags[qual_MDL] = true; 
    IF cli$get_value (sd_MDL, value) THEN 
	BEGIN 
	MDL_fab [fab$b_fns] = .value[dsc$w_length]; 
	MDL_fab [fab$l_fna] = .value[dsc$a_pointer]; 
	value[dsc$w_length] = 0; 
	value[dsc$a_pointer] = 0; 
	END;
    END; 


! Check if /OBJECT qualifier is present and get filename for object output: 
!
IF cli$present (sd_OBJECT) THEN 
    BEGIN 
    cli_flags[qual_object] = true; 
    IF cli$get_value (sd_OBJECT, value) THEN 
	BEGIN 
	object_fab [fab$b_fns] = .value[dsc$w_length]; 
	object_fab [fab$l_fna] = .value[dsc$a_pointer]; 
	value[dsc$w_length] = 0; 
	value[dsc$a_pointer] = 0; 
	END;
    END; 


! Check if /SDL qualifier is present and get filename for SDL output: 
!
IF cli$present (sd_SDL) THEN 
    BEGIN 
    cli_flags[qual_SDL] = true; 
    IF cli$get_value (sd_SDL, value) THEN 
	BEGIN 
	SDL_fab [fab$b_fns] = .value[dsc$w_length]; 
	SDL_fab [fab$l_fna] = .value[dsc$a_pointer]; 
	value[dsc$w_length] = 0; 
	value[dsc$a_pointer] = 0; 
	END;
    END; 


!+ 
!  Finally, we go through the input filenames, to establish a queue of 
!  them for further processing and to check for local use of the 
!  positional qualifiers (/List, /Mdl, /Object, and /Sdl) to establish 
!  appropriate output file names. 
!  If a positional qualifier is used locally instead of globally we want 
!  to use as much of the local context as possible, so we use the 
!  resultant filename from Lib$Find_file as the related filename for the 
!  output file.  We also clear the OFP bit so that the output file will 
!  be put in the same directory as the input file. 
!  However, if the qualifier has a value we want to set the OFP back 
!  again, so that if the value specified does not include a device 
!  and/or a directory we will use the current default device and/or 
!  directory. 
!- 

WHILE cli$get_value(sd_P1, value) AND .status DO 
    BEGIN 
    LOCAL 
	file_info: 
	    REF BBLOCK FIELD (info_queue_flds); 


    status = lib$find_file (value, result, context, default, 0, stv, ffflgs); 

    IF NOT .status THEN 	! Failure to find any input file is fatal. 
	SIGNAL_STOP (emsg(searchfail), 1, value, .status, .stv) 
    ELSE 
	BEGIN 
	lib$get_vm(%REF(queue_element_size), file_info); 
	CH$MOVE (dsc$c_s_bln, value, file_info[name_desc]); 
	value[dsc$w_length] = 0; 
	value[dsc$a_pointer] = 0; 
	INSQUE (.file_info, .file_queue_hdr[queue_blink]); 


	! We use the first file specification to provide the related name for 
	! any output files which were indicated with global qualifiers: 
	! 
	IF .first_parm_flag THEN 
	    BEGIN 
	    first_parm_flag = false; 
	    SELECT 1 OF 
	    SET 
	    [.cli_flags[qual_listing]]: 
		BEGIN 
		listing_rel_nam[nam$b_rsl] = .result[dsc$w_length]; 
		CH$MOVE (.result[dsc$w_length], .result[dsc$a_pointer], listing_relname); 
		END; 
	    [.cli_flags[qual_MDL]]: 
		BEGIN 
		MDL_rel_nam[nam$b_rsl] = .result[dsc$w_length]; 
		CH$MOVE (.result[dsc$w_length], .result[dsc$a_pointer], MDL_relname); 
		END; 
	    [.cli_flags[qual_object]]: 
		BEGIN 
		object_rel_nam[nam$b_rsl] = .result[dsc$w_length]; 
		CH$MOVE (.result[dsc$w_length], .result[dsc$a_pointer], object_relname); 
		END; 
	    [.cli_flags[qual_SDL]]: 
		BEGIN 
		SDL_rel_nam[nam$b_rsl] = .result[dsc$w_length]; 
		CH$MOVE (.result[dsc$w_length], .result[dsc$a_pointer], SDL_relname); 
		END; 
	    TES; 
	    END; 

	! Check if /LIST qualifier is present or negated and, if present,  get 
	! filename for listing output: 
	!
	SELECT cli$present (sd_LIST) OF 
	SET 
	[cli$_locneg]: 
	    cli_flags[qual_listing] = false; 
	[cli$_locpres]: 
	    BEGIN 
	    cli_flags[qual_listing] = true; 
	    listing_fab[fab$v_ofp] = false; 
	    listing_rel_nam[nam$b_rsl] = .result[dsc$w_length]; 
	    CH$MOVE (.result[dsc$w_length], .result[dsc$a_pointer], listing_relname); 
	    IF cli$get_value (sd_LIST, value) THEN 
		BEGIN 
		listing_fab[fab$v_ofp] = true; 
		listing_fab [fab$b_fns] = .value[dsc$w_length]; 
		listing_fab [fab$l_fna] = .value[dsc$a_pointer]; 
		value[dsc$w_length] = 0; 
		value[dsc$a_pointer] = 0; 
		END 
	    ELSE 		
		listing_fab [fab$b_fns] = 0; 
	    END; 
	TES;


	! Check if /MDL qualifier is present or negated and, if present, get 
	! filename for MDL output: 
	!
	SELECT cli$present (sd_MDL) OF 
	SET 
	[cli$_locneg]: 
	    cli_flags[qual_MDL] = false; 
	[cli$_locpres]: 
	    BEGIN 
	    cli_flags[qual_MDL] = true; 
	    MDL_fab[fab$v_ofp] = false; 
	    MDL_rel_nam[nam$b_rsl] = .result[dsc$w_length]; 
	    CH$MOVE (.result[dsc$w_length], .result[dsc$a_pointer], MDL_relname); 
	    IF cli$get_value (sd_MDL, value) THEN 
		BEGIN 
		MDL_fab[fab$v_ofp] = true; 
		MDL_fab [fab$b_fns] = .value[dsc$w_length]; 
		MDL_fab [fab$l_fna] = .value[dsc$a_pointer]; 
		value[dsc$w_length] = 0; 
		value[dsc$a_pointer] = 0; 
		END 
	    ELSE 		
		MDL_fab [fab$b_fns] = 0; 
	    END; 
	TES;


	! Check if /OBJECT qualifier is present or negated and, if present, get 
	! filename for object output: 
	!
	SELECT cli$present (sd_OBJECT) OF 
	SET 
	[cli$_locneg]: 
	    cli_flags[qual_object] = false; 
	[cli$_locpres]: 
	    BEGIN 
	    cli_flags[qual_object] = true; 
	    object_fab[fab$v_ofp] = false; 
	    object_rel_nam[nam$b_rsl] = .result[dsc$w_length]; 
	    CH$MOVE (.result[dsc$w_length], .result[dsc$a_pointer], object_relname); 
	    IF cli$get_value (sd_OBJECT, value) THEN 
		BEGIN 
		object_fab[fab$v_ofp] = true; 
		object_fab [fab$b_fns] = .value[dsc$w_length]; 
		object_fab [fab$l_fna] = .value[dsc$a_pointer]; 
		value[dsc$w_length] = 0; 
		value[dsc$a_pointer] = 0; 
		END 
	    ELSE 		
		object_fab [fab$b_fns] = 0; 
	    END; 
	TES;


	! Check if /SDL qualifier is present or negated and, if present, get 
	! filename for SDL output: 
	!
	SELECT cli$present (sd_SDL) OF 
	SET 
	[cli$_locneg]: 
	    cli_flags[qual_SDL] = false; 
	[cli$_locpres]: 
	    BEGIN 
	    cli_flags[qual_SDL] = true; 
	    SDL_fab[fab$v_ofp] = false; 
	    SDL_rel_nam[nam$b_rsl] = .result[dsc$w_length]; 
	    CH$MOVE (.result[dsc$w_length], .result[dsc$a_pointer], SDL_relname); 
	    IF cli$get_value (sd_SDL, value) THEN 
		BEGIN 
		SDL_fab[fab$v_ofp] = true; 
		SDL_fab [fab$b_fns] = .value[dsc$w_length]; 
		SDL_fab [fab$l_fna] = .value[dsc$a_pointer]; 
		value[dsc$w_length] = 0; 
		value[dsc$a_pointer] = 0; 
		END 
	    ELSE 		
		SDL_fab [fab$b_fns] = 0; 
	    END; 
	TES;
	END; 
    END; 

END;

%SBTTL 'RMS_ERROR - Report an RMS error.' 
GLOBAL ROUTINE rms_error (message, fab_block, rab_block) =

!---
!
!	This routine issues a multi-line error associated
!	with an RMS operation.  The first parameter is the
!	first message to be issued.  The second and third
!	parameter is the address of the FAB and/or the RAB block
!	which contains the error codes and the file name.
!	If the third parameter is present, the RAB is assumed
!	to contain the error status.
!
! Inputs:
!
!	message = First message code to be output
!	fab_block = Address of FAB block
!	rab_block = Address of RAB block
!
! Outputs:
!
!	The message is signaled.
!---

BEGIN

BUILTIN
    NULLPARAMETER;			! True if parameter unspecified

MAP
    fab_block:	REF BBLOCK,		! Define FAB structure
    rab_block:	REF BBLOCK;		! Define RAB structure

LOCAL
    nam_block:	REF BBLOCK,		! Define NAM structure
    desc:	VECTOR[2];		! Temp. string descriptor

nam_block = .fab_block [fab$l_nam];	! Get address of NAM block
IF .nam_block EQL 0			! If no NAM block present,
THEN
    BEGIN
    desc [0] = .fab_block [fab$b_fns];	! then use original file string
    desc [1] = .fab_block [fab$l_fna];
    END
ELSE IF .nam_block [nam$b_rsl] NEQ 0	! If result string nonblank,
THEN
    BEGIN
    desc [0] = .nam_block [nam$b_rsl];	! then use it
    desc [1] = .nam_block [nam$l_rsa];
    END
ELSE IF .nam_block [nam$b_esl] NEQ 0	! If expanded string nonblank,
THEN
    BEGIN
    desc [0] = .nam_block [nam$b_esl];	! then use it
    desc [1] = .nam_block [nam$l_esa];
    END
ELSE
    BEGIN
    desc [0] = .fab_block [fab$b_fns];	! Else, use original file string
    desc [1] = .fab_block [fab$l_fna];
    END;

IF NOT NULLPARAMETER(3)			! If RAB argument specified,
THEN
    SIGNAL(.message,1,desc,		! Signal error
		.rab_block [rab$l_sts],	! with RMS error code from RAB
		.rab_block [rab$l_stv])	! and secondary code
ELSE
    IF .message EQL emsg(searchfail)	! Failure to find an input file
    THEN SIGNAL_STOP(.message,1,desc,	! is FATAL, just like other compilers
		.fab_block [fab$l_sts],	! so SIGNAL and _STOP
		.fab_block [fab$l_stv])
    ELSE    
    SIGNAL(.message,1,desc,		! Signal error
		.fab_block [fab$l_sts],	! with RMS error code from FAB
		.fab_block [fab$l_stv]);! and secondary code

RETURN true;

END;

%SBTTL 'SEARCH_ERROR - Error searching for input file.' 
ROUTINE search_error (fab) =

!---
!
!	Signal an error searching for an input file.
!
! Inputs:
!
!	fab = Address of FAB used during searching
!
! Outputs:
!
!	None
!---
RETURN rms_error (emsg(searchfail),.fab);

%SBTTL 'DO_FILE - Processing associated with input file.' 
ROUTINE do_file =

!---
!
!	This routine is called once for each file specified
!	in the input file list.  The file is opened and parsed
!	and all message definitions are saved in virtual memory.
!
! Inputs:
!
!	input_fab = Input FAB
!	input_rab = Input RAB
!
! Outputs:
!
!	Message definition blocks
!---

BEGIN

LOCAL
    status,parse_status;		! Status codes

status = $OPEN (FAB = input_fab);	! Open the input file
IF NOT .status				! If error found,
THEN
    BEGIN
    rms_error (emsg(openin), input_fab); ! then signal the error
    RETURN .status;
    END;

status = $CONNECT (RAB = input_rab);	! and connect the input stream
IF NOT .status				! If error found,
THEN
    BEGIN
    rms_error (emsg(openin), input_fab, input_rab); ! then signal the error
    RETURN .status;
    END;

status = get_module_name (input_fab);	! Get module name
IF NOT .status				! If error detected,
THEN
    RETURN .status;			! return with status

!
!	If the listing file has not yet been opened, open
!	it now.  This is done after the input file open so
!	that the name will be sticky with the input file name.
!

IF .cli_flags [qual_listing]	! If /LIST specified,
    AND .listing_fab [fab$w_ifi] EQL 0	! and not already opened
THEN
    BEGIN
    status = $CREATE (FAB = listing_fab);	! Create the listing file
    IF NOT .status THEN rms_error (emsg(openout),listing_fab);
    status = $CONNECT (RAB = listing_rab);
    IF NOT .status THEN rms_error (emsg(openout),listing_fab,listing_rab);
    END;

IF .cli_flags [qual_mdl]		! If /MDL specified
    AND .mdl_fab [fab$w_ifi] EQL 0	! and not already opened
THEN
    BEGIN
    status = $CREATE (FAB = mdl_fab);		! Create the mdl file
    IF NOT .status THEN rms_error (emsg(openout),mdl_fab);
    status = $CONNECT (RAB = mdl_rab);
    IF NOT .status THEN rms_error (emsg(openout),mdl_fab,mdl_rab);
    END;

IF .cli_flags [qual_sdl]		! If /SDL specified
    AND .sdl_fab [fab$w_ifi] EQL 0	! and not already opened
THEN
    BEGIN
    status = $CREATE (FAB = sdl_fab);		! Create the sdl file
    IF NOT .status THEN rms_error (emsg(openout),sdl_fab);
    status = $CONNECT (RAB = sdl_rab);
    IF NOT .status THEN rms_error (emsg(openout),sdl_fab,sdl_rab);
    END;

parse_status = parse_file();		! Parse the input file

status = $CLOSE (FAB = input_fab);	! Close the input file
IF NOT .status				! If error found,
THEN
    rms_error (emsg(closedel), input_fab); ! then signal the error

RETURN .parse_status;			! Return with parse status

END;

%SBTTL 'GET_MODULE_NAME' 
GLOBAL ROUTINE get_module_name (fab) =

!---
!
!	This routine figures out the module name to be
!	associated with the given file name.  The
!	module name used is the name of the file.
!
! Inputs:
!
!	None
!
! Outputs:
!
!	module_name = Descriptor of module name string
!	r0 = status (unsignaled)
!---

BEGIN

MAP
    fab:	REF BBLOCK;		! Address of FAB block

LOCAL
    input_nam:	REF BBLOCK,		! Address of NAM block
    addr,size,				! Temporary descriptor
    ptr;				! String pointer

input_nam = .fab [fab$l_nam];		! Get NAM address
size = .input_nam [nam$b_rsl];		! Get result name string
addr = .input_nam [nam$l_rsa];

ptr = CH$FIND_CH(.size, .addr, ']');	! Find start of file name on input side
IF .ptr EQL 0				! If not found,
THEN
    BEGIN
    ptr = CH$FIND_CH(.size, .addr, '>'); ! Alternate syntax
    IF .ptr EQL 0			! If still not found
    THEN BEGIN				! Then make up a name
	 module_name [0] = %CHARCOUNT ('MESSAGE');
	 module_name [1] = UPLIT ('MESSAGE');
	 RETURN true;
	 END;
    END;

size = .size - (.ptr + 1 - .addr);	! Figure descriptor of file name
addr = .ptr + 1;

ptr = CH$FIND_CH(.size, .addr, '.');	! Find where file name ends
IF .ptr EQL 0				! If not found,
THEN
    RETURN rms$_rst;			! return invalid expanded string

module_name [0] = .ptr - .addr;		! Figure descriptor of file name only
module_name [1] = .addr;

RETURN true;

END;

%SBTTL 'HANDLER - Save most severe error code.'
ROUTINE handler (signal_args, mechanism_args) =

!---
!
!	This condition handler gets control on any signalled
!	condition in order to save the highest severity error
!	to be returned by exit from the image.
!
! Inputs:
!
!	signal_args = Address of signal argument list
!	mechanism_args = Address of mechanism argument list
!
! Outputs:
!
!	worst_error is updated with highest severity error.
!
!---

BEGIN

MAP
    signal_args: REF BBLOCK,			! Address of signal arg list
    mechanism_args: REF BBLOCK;			! Address of mechanism arg list

LOCAL
    code: BBLOCK [LONG];			! Condition code (longword)

code = .signal_args [chf$l_sig_name];		! Get condition code

IF .code [sts$v_severity] GTR .worst_error [sts$v_severity]
THEN
    worst_error = .code OR sts$m_inhib_msg;	! Set new worst error

ss$_resignal					! Continue signalling

END;

%SBTTL ''
END
ELUDOM
