%TITLE 'EDT$INPUT - read a line of input'
MODULE EDT$INPUT (				! Read a line of input
		IDENT = 'V04-000'			! File: INPUT.BLI Edit: REM2019
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module is called whenever an input line is required for a
!	command or an insert.  This module handles fetching of lines
!	from macros or from the initialization file.
!
! ENVIRONMENT: User mode, sharable
!
! AUTHOR: Bob Kushlis, CREATION DATE: 4-Feb-1979
!
! MODIFIED BY:
!
! Dan Szymanski, 17-NOV-80, 02
!	Change to EDT$$GET_LN  so that a line of input from the terminal
!	which consists of only the two characters ^z or ^Z are not
!	considered to be an end-of-file.
! 2-003	- Regularized headers.  JBS 24-Feb-1981
! 2-004	- Fix module name.  JBS 06-Mar-1981
! 2-005	- Use the ASSERT macro.  JBS 01-Jun-1981
! 2-006	- Remove explicit journaling.  JBS 22-Jun-1981
! 2-007	- Use new journaling interface.  JBS 08-Jul-1981
! 2-008	- Separate reading of the startup file from reading of the journal file.
!	   JBS 16-Aug-1981
! 2-009 - Make command file i/o use EDT$FILEIO.  STS 25-Dec-1981
! 2-010 - Remove DSC$A_POINTER macro  STS 14-Jan-1982
! 2-011 - Convert  reads and writes to use EDT$FILEIO. STS 15-Jan-1981
! 2-012 - Add rhb_descriptor. STS 21-Jan-1982
! 2-013 - Remove reference to edt$$z_sys_cmdrab. STS 10-Feb-1982
! 2-014 - Add literals for callable parameters. STS 08-Mar-1982
! 2-015	- Add EDT$$G_JOU_VALID.  JBS 09-Apr-1982
! 2-016 - Make sure an insert line terminated by ^Z gets journalled. STS 24-Jun-1982
! 2-017 - Take out reference to edt$$tst_eob. STS 22-Sep-1982
! 2-018	- Improve the appearance of the listing.  JBS 14-Jun-1983
! 2-019 - Added logic to maintain EDT$$G_TIN_OBUFPOS durring /RECOVERY mode.
!	  REM 10-Oct-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$GET_LN;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

%IF %BLISS (BLISS32)
%THEN

REQUIRE 'EDTSRC:SYSSYM';

%FI

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    EDT$K_GET,
    EDT$K_COMMAND_FILE;

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$GET_LN  - return a line'

GLOBAL ROUTINE EDT$$GET_LN (			! Return a line
    PROMPT, 					! Address of the prompt
    PR_LEN					! Length of the prompt
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns a line from the current macro or from the
!	terminal or command file.
!
! FORMAL PARAMETERS:
!
!  PROMPT		The address of a prompt string for terminal input
!
!  PR_LEN		The length of the prompt
!
! IMPLICIT INPUTS:
!
!	EDT$$G_INP_SRC    - 	tells where the input line will come from.
!	EDT$$G_RCOV_MOD
!	EDT$$A_WK_LN
!	EDT$$A_MAC_BUF
!	EDT$$G_VFY
!
! IMPLICIT OUTPUTS:
!
!	EDT$$T_CMD_BUF
!	EDT$$G_CMD_LEN
!	EDT$$A_CUR_BUF
!	EDT$$A_CMD_END
!	EDT$$A_CMD_BUF
!	EDT$$G_JOU_VALID
!	EDT$$G_TIN_OBUFPOS
!
! RETURN VALUES:
!
!	0	-	No eof occured on this line
!	1	-	An eof did occur
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL
	EDT$$T_CMD_BUF,
	EDT$$G_CMD_LEN,
	EDT$$A_CMD_END,
	EDT$$A_CMD_BUF,
	EDT$$G_SAV_CNT,
	EDT$$G_RCOV_MOD,
	EDT$$G_INP_SRC,
	EDT$$A_MAC_BUF,
	EDT$$A_CUR_BUF,
	EDT$$G_VFY,
	EDT$$Z_EOB_LN,
	EDT$$A_WK_LN : REF LIN_BLOCK,
	EDT$$G_TIN_OBUFPOS,			! Position in journal output buffer
	EDT$$G_JOU_VALID;			! 1 = journal record is valid

%IF %BLISS (BLISS32)
%THEN

    EXTERNAL ROUTINE
	STR$FREE1_DX;

%FI

    EXTERNAL ROUTINE
	EDT$$RD_JOUTXT,				! Read a text line from the journal file
	EDT$$TI_BUFCH : NOVALUE,		! Put a character in the journal file buffer
	EDT$$TI_FLUSHJOUFI : NOVALUE,		! Write out journal file buffer
	EDT$$CALLFIO,
	EDT$$TI_WRLN,
	EDT$$RD_CMDLN,
	EDT$$RD_CURLN,
	EDT$$RD_NXTLN;

    LOCAL
	FILE_DESC : BLOCK [8, BYTE],
	RHB_DESC : BLOCK [8, BYTE],
	EOF;

!+
! If the descriptors are for VAX/VMS then define the class and type fields.
!-

%IF %BLISS (BLISS32)
%THEN
    RHB_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    FILE_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    FILE_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
%FI

    RHB_DESC [DSC$A_POINTER] = 0;
    RHB_DESC [DSC$W_LENGTH] = 0;
    FILE_DESC [DSC$A_POINTER] = 0;
    FILE_DESC [DSC$W_LENGTH] = 0;
    EOF = 0;

    CASE .EDT$$G_INP_SRC FROM INP_TERM TO INP_JOURNAL OF
	SET

	[INP_TERM] :
!+
! Input is coming from the terminal (or command procedure)
!-
	    BEGIN
!+
! Since we are about to read from the terminal, make sure the last
! line has been written to the journal file.
!-
	    EDT$$TI_FLUSHJOUFI (%C'T');
	    EOF = EDT$$RD_CMDLN (.PROMPT, .PR_LEN, EDT$$T_CMD_BUF, EDT$$G_CMD_LEN, 255);
!+
! Put the new line in the journal file buffer.
!-

	    INCR COUNTER FROM 0 TO .EDT$$G_CMD_LEN - 1 DO
		EDT$$TI_BUFCH (CH$RCHAR (CH$PTR (EDT$$T_CMD_BUF, .COUNTER)));

	    IF .EOF
	    THEN
		BEGIN
		EDT$$TI_BUFCH (%C'^');
		EDT$$TI_BUFCH (%C'Z');
		END;

!+
! Even if we put no characters into the journal record (because the line
! is empty) it is important to output the record next time around, since
! an empty record changes the current line.
!-
	    EDT$$G_JOU_VALID = 1;
	    END;

	[INP_JOURNAL] :
!+
! Input is coming from the journal file.
!-
	    BEGIN
	    ASSERT (.EDT$$G_RCOV_MOD);		! Better be recovering

	    IF EDT$$RD_JOUTXT (EDT$$T_CMD_BUF, EDT$$G_CMD_LEN)	!
	    THEN
		EDT$$TI_WRLN (EDT$$T_CMD_BUF, .EDT$$G_CMD_LEN)
	    ELSE
		BEGIN
		EOF = 1;
		EDT$$G_CMD_LEN = 0;
		END;

	    EDT$$G_TIN_OBUFPOS = .EDT$$G_CMD_LEN

	    END;

	[INP_COMMAND] :
!+
! Input is coming from the startup file.
!-
	    BEGIN

	    LOCAL
		STATUS;

	    STATUS = EDT$$CALLFIO (EDT$K_GET, EDT$K_COMMAND_FILE, FILE_DESC, RHB_DESC);

	    IF .STATUS
	    THEN
		BEGIN
		EDT$$G_CMD_LEN = .FILE_DESC [DSC$W_LENGTH];
		EDT$$CPY_MEM (.EDT$$G_CMD_LEN, .FILE_DESC [DSC$A_POINTER], EDT$$T_CMD_BUF);
		END
	    ELSE
		BEGIN
		EOF = 1;
		EDT$$G_CMD_LEN = 0;
		END;

	    END;

	[INP_MACRO] :
!+
! Input is coming from a text buffer.
!-
	    BEGIN

	    LOCAL
		SAVE_TBCB;

	    SAVE_TBCB = .EDT$$A_CUR_BUF;
	    EDT$$A_CUR_BUF = .EDT$$A_MAC_BUF;
	    EDT$$RD_CURLN ();

	    IF (.EDT$$A_WK_LN NEQA EDT$$Z_EOB_LN)
	    THEN
		BEGIN
		EDT$$CPY_MEM (.EDT$$A_WK_LN [LIN_LENGTH], EDT$$A_WK_LN [LIN_TEXT], EDT$$T_CMD_BUF);
		EDT$$G_CMD_LEN = .EDT$$A_WK_LN [LIN_LENGTH];
		EDT$$RD_NXTLN ()
		END
	    ELSE
		BEGIN
		EOF = 1;
		EDT$$G_CMD_LEN = 0;
		END;

	    EDT$$A_CUR_BUF = .SAVE_TBCB;
	    EDT$$RD_CURLN ();
	    END;

	[INRANGE, OUTRANGE] :
	    ASSERT (0);
	TES;

!+
! If input is coming from a file see if the line ended with ^Z.
!-

    IF (.EDT$$G_INP_SRC NEQ INP_TERM)
    THEN

	IF CH$EQL (2, (EDT$$T_CMD_BUF - 2 + .EDT$$G_CMD_LEN), 2, UPLIT BYTE('^Z'))
	THEN
	    BEGIN
	    EDT$$G_CMD_LEN = .EDT$$G_CMD_LEN - 2;
	    EOF = 1;
	    END;

    IF ((.EDT$$G_INP_SRC NEQ INP_TERM) AND .EDT$$G_VFY) THEN EDT$$TI_WRLN (EDT$$T_CMD_BUF, .EDT$$G_CMD_LEN);

    EDT$$A_CMD_END = CH$PTR (EDT$$T_CMD_BUF, .EDT$$G_CMD_LEN);
    EDT$$A_CMD_BUF = EDT$$T_CMD_BUF;
    CH$WCHAR (%C'!', .EDT$$A_CMD_END);

%IF %BLISS (BLISS32)
%THEN
    STR$FREE1_DX (RHB_DESC);
    STR$FREE1_DX (FILE_DESC);
%FI

    RETURN (.EOF);
    END;					! of routine EDT$$GET_LN

!<BLF/PAGE>

END						! of module EDT$INPUT

ELUDOM
