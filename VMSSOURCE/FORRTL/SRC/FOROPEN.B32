MODULE FOR$OPEN (%TITLE 'FORTRAN OPEN'
		IDENT = '1-065'		! File: FOROPEN.B32  Edit: SBL1065
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: FORTRAN Support Library - user callable
!
! ABSTRACT:
!
!	This module opens a file on a specified logical unit
!	(LUN) and allocates 3 control blocks for use by subsequent
!	I/O statement calls for this LUN. The 3 control blocks
!	are: Logical Unit Block (LUB), I/O statement Block (ISB),
!	and an RMS Record Access Block (RAB).
!
! ENVIRONMENT: User access mode; mixture of AST level or not.
!
! AUTHOR:	Thomas N. Hastings, CREATION DATE: 6-Mar-77; Version 0
!
! MODIFIED BY:
!
!	Thomas N. Hastings, 15-Mar-77: Version 0
! [Previous edit history removed.  SBL 5-Oct-1982]
! 1-062	- Move the BUILTIN ACTUALCOUNT into the routine that needs it, in
!	  anticipation of the next BLISS compiler, which will require it
!	  to be there.  While we are here, improve the source text layout.
!	  Note that this edit changes no code.  JBS 27-Aug-1980
! 1-063 - Add support for DEFAULTFILE keyword.  JAW 30-Jun-1981
! 1-064 - Allow DEFAULTFILE value to be ASCIZ.  JAW 30-Jun-1981
! 1-065 - Reflect separation of FOR$$ data structures from FOR$$.  SBL 5-Oct-1982
!--


!
! PROLOGUE FILE:
!

REQUIRE 'RTLIN:FORPROLOG';			! FORTRAN Declarations

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$OPEN,					! FORTRAN OPEN statement
    FOR$$OPECLO_ARG : NOVALUE,			! Get OPEN/CLOSE arguments
    OPEN_ON_CONNECTED : CALL_CCB;		! open on a connected unit

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$ERR_OPECLO,				! OPEN/CLOSE condition handler
    FOR$$OPEN_PROC : CALL_CCB NOVALUE,		! Does the actual OPEN
    FOR$$SIGNAL_STO : NOVALUE,			! Convert small FORTRAN err #
    						! to 32-bit VAX error # and SIGNAL_STOP
    FOR$$SIG_NO_LUB : NOVALUE,			! same as FOR$$SIGNAL_STO except no LUB setup
    						! so must pass LUN explicitly.
    FOR$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! push current LUB/ISB/RAB, if any, and allocate LUB/ISB/RAB
    						! for this logical unit
    FOR$$CB_POP : JSB_CB_POP NOVALUE,		! Pop I/O system back to previous LUB or indicate
    						! no I/O statement is currently being processed.
    FOR$$OPEN_KEYWD,				! Look up keywords for literal values
    FOR$$SIG_FATINT : NOVALUE,			! Signal_stop internal error
    FOR$$CLOSE_FILE : CALL_CCB;			! Close a file


GLOBAL ROUTINE FOR$OPEN (			! FORTRAN OPEN statement
	KEYWD, 					! keyword code - repeated arguments
	INFO					! value of keyword (optional)
    ) = 					! value is TRUE iff successful, FALSE if error and ERR=

!++
! ABSTRACT:
!
!	Open file on the specified logical unit (LUN) with
!	attributes specified in the keyword parameters and allocate
!	3 control blocks for use by subsequent I/O statement calls
!	for this LUN.  The 3 control blocks are: Logical Unit
!	Block (LUB), I/O statement block (ISB), and one RMS
!	control block: the RAB.  If a previous CALL ASSIGN
!	or CALL FDBSET has been done all of these control blocks
!	have already been allocated, and a FAB has been
!	allocated to hold the information passed to CALL ASSIGN or
!	CALL FDBSET.
!	An RMS $OPEN or $CONNECT is performed.
!	Then a record buffer is allocated for the LUN.
!
! FORMAL PARAMETERS:
!
!    The following pair is repeated for each user specified keyword:
!	KEYWD.rlu.v		Contains KEY<7:0>, ARGTYPE<15:8>, and possibly
!				INFO<31:16>
!	INFO.rlu.v		optional information if need more than
!				16-bits
!
! IMPLICIT INPUTS:
!
!	FOR$$A_CUR_LUB		Current active LUB to be pushed
!				down or 0 if no LUB has an I/O
!				statement in progress (usual).
!				Restored on return from FOR$OPEN
!	LUB$V_FAB		1 if FAB allocated by FDBSET, CALL ASSIGN
!	LUB$V_DIRECT		1 if DEFINE FILE done
!	LUB$V_OPENED		1 if unit already opened
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_READ_ONLY		1 if 'READONLY' present
!	LUB$V_DIRECT		1 if ACCESS = 'DIRECT'
!	LUB$V_APPEND		1 if ACCESS = 'APPEND'
!	LUB$V_OLD_FILE		1 if TYPE = 'OLD'
!	LUB$V_SCRATCH		1 if TYPE = 'SCRATCH'
!	LUB$V_PRINT		1 if DISPOSE = 'PRINT'
!	LUB$V_FIXED		1 if RECORDTYPE = 'FIXED'
!	LUB$V_FORMATTED		1 if FORM = 'FORMATTED' or ommitted
!	LUB$V_UNFORMAT		1 if FORM = 'UNFORMATTED'
!	LUB$A_ASSOC_VAR		adr. of n if ASSOCIATEVARIABLE = n is present
!	LUB$V_ASS_VAR_L		1 if n is longword
!	LUB$W_IFI		RMS internal file id. Needed in case
!				FORTRAN CLOSE done.
!	LUB$W_RBUF_SIZE		Size in bytes of record buffer allocated.
!
! COMPLETTION STATUS:
!
!	TRUE if success, FALSE if failure and ERR= keyword present
!
! SIDE EFFECTS:
!
!	Allocates LUB/ISB/RAB if not already allocated
!	by CALL ASSIGN, DEFINE FILE, OR CALL FDBSET.
!	SIGNALs or SIGNAL_STOPs the following errors unless ERR=
!	keyword is present: SIGNAL_STOPs FOR$_INCOPECLO (46 =
!	'INCONSISTENT OPEN/CLOSE STATEMENT SPECIFICATIONS')
!	SIGNAL_STOPS FOR$RECIO_OPE (40='RECURSIVE I/O OPERATION')
!	SIGNAL_STOPS FOR$_INVLOGUNI (32='INVALID LOGICAL UNIT NUMBER')
!	See FOR$$OPEN_PROC for other SIGNAL_STOPS.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF $FOR$CCB_DECL;

!+
! Use the formal arg list as a VECTOR of blocks; each block = 1 longword.
!-

    MAP
	KEYWD : BLOCKVECTOR [255, 1];

    BUILTIN
	ACTUALCOUNT;

    LOCAL
	NAM_DSC : DSC$DESCRIPTOR,		! String descriptor for ASCIZ filename
	DEF_DSC : DSC$DESCRIPTOR,		! String descriptor for ASCIZ default file name
	L_UNWIND_ACTION : VOLATILE,		! UNWIND action code for handler
	OPEN : VOLATILE VECTOR [OPEN$K_KEY_MAX + 1];	! open parameter array

!+
! Establish handler to RESIGNAL or UNWIND if ERR= present
! depending on OPEN[OPEN$K_ERR].  Pass UNWIND action code.
!-

    ENABLE
	FOR$$ERR_OPECLO (L_UNWIND_ACTION, OPEN);

!+
! Set UNWIND cleanup to be a no-operation since LUB/ISB/RAB
! has not been pushed yet.
!-
    L_UNWIND_ACTION = FOR$K_UNWINDNOP;
!+
! Copy user keyword arglist into array OPEN
! in cannonical order, so that args may be processed in order
! If ASCIZ name string, setup NAM_DSC as its descriptor
! If ASCIZ default name string, setup DEF_DSC as its descriptor
! SIGNAL_STOP FOR$_INVARGFOR (48='INVALID ARGUMENT TO FORTRAN I/O SYSTEM'),
! after scanning all parameters and setting up ERR= in OPEN array.
!-
    FOR$$OPECLO_ARG (KEYWD, ACTUALCOUNT (), OPEN, OPEN$K_KEY_MAX, NAM_DSC, DEF_DSC, 1);
!+
! Allocate LUB/ISB/RAB if not already allocated for this
! logical unit. Push down if an I/O statement already in progress
! on another unit. Store new current LUB address in OTS
! GLOBAL OWN OTS$A_CUR_LUB. SIGNAL_STOP FOR$_RECIO_OPE
! (40='RECURSIVE I/O OPERATION'). If an I/O statement already
! in progress for this logical unit. SIGNAL_STOP FOR$_INVLOGUNI
! (32='INVALID LOGICAL UNIT NUMBER') if logical unit
! number outside of the allowed range of 0:99 for explicit OPEN.
! Finally change UNWIND cleanup action to be to pop current LUB/ISB/RAB
! since it has now been successfully pushed.
! On return, CCB points to the current control block.
!-
    FOR$$CB_PUSH (.OPEN [OPEN$K_UNIT], LUB$K_LUN_MIN);
    L_UNWIND_ACTION = FOR$K_UNWINDPOP;
!+
! If the unit is currently open, call special routine which
! implements open on a connected unit.
!-

    IF (.CCB [LUB$V_OPENED] OR .CCB [LUB$V_DEALLOC])
    THEN

	IF OPEN_ON_CONNECTED (OPEN, L_UNWIND_ACTION)
	THEN
	    BEGIN
!+
! No more OPEN processing needed, set IOSTAT and exit.
!-

	    IF (.OPEN [OPEN$K_IOSTAT] NEQ 0)
	    THEN
		BEGIN

		IF (.OPEN [OPEN$K_IOSTAT_L])
		THEN
		    .OPEN [OPEN$K_IOSTAT] = 0
		ELSE
		    BEGIN

		    LOCAL
			IOSTAT : REF BLOCK [, BYTE];

		    IOSTAT = .OPEN [OPEN$K_IOSTAT];
		    IOSTAT [0, 0, 16, 0] = 0;	! Store one word
		    END;

		END;

	    RETURN 1;				! Exit OPEN successfully
	    END;

!+
! If DEFINE FILE, CALL FDBSET, or CALL ASSIGN have already been
! done for this logical unit, SIGNAL_STOP FOR$DUPFILSPE
! (21='DUPLICATE FILE SPECIFICATION').
!-

    IF ((.CCB [LUB$A_FAB] NEQA 0) OR (.CCB [LUB$V_DIRECT])) THEN FOR$$SIGNAL_STO (FOR$K_DUPFILSPE);

!+
! Set unwind condition to RET so if an error occurs the file will
! be closed and the LUB returned (thus freeing up the LUN).
!-
    L_UNWIND_ACTION = FOR$K_UNWINDRET;
!+
! Perform the OPEN - call common procedure with a pointer
! to the OPEN parameter VECTOR of longword values.
!-
    FOR$$OPEN_PROC (OPEN);
!+
! Pop back previous LUB or indicate that no I/O statement
! is currently active (OTS$$A_CUR_LUB = 0).
!-
    FOR$$CB_POP ();
!+
!  Store success IOSTAT.  If there was an error, the handler would
!  do the store.
!-

    IF (.OPEN [OPEN$K_IOSTAT] NEQ 0)
    THEN

	IF (.OPEN [OPEN$K_IOSTAT_L])
	THEN
	    .OPEN [OPEN$K_IOSTAT] = 0
	ELSE
	    BEGIN

	    LOCAL
		IOSTAT : REF BLOCK [, BYTE];

	    IOSTAT = .OPEN [OPEN$K_IOSTAT];
	    IOSTAT [0, 0, 16, 0] = 0;		! Store one word
	    END;

!+
! Return success
!-
    RETURN 1;
    END;					! End of FOR$OPEN routine


GLOBAL ROUTINE FOR$$OPECLO_ARG (		! FORTRAN copy OPEN/CLOSE args
	KEYWD_ADR, 				! Adr. of first keyword arg
	ACTUAL_COUNT, 				! No. of actual parameters in arg list
	OPEN_ADR, 				! Adr. of array to store keyword values
	KEY_MAX, 				! Max. value of keyword parameter
	NAM_DSC_ADR, 				! Adr. of descriptor for name string
	DEF_DSC_ADR, 				! Adr. of descriptor for default name string
	OPEN_FLAG, 				! True if OPEN (not CLOSE)
	VAR_LENGTHS				! lengths in bits of keyword variables
    ) : NOVALUE =

!++
! ABSTRACT:
!
!	Routine to copy keyword OPEN/CLOSE parameters
!	into an array for sequential processing in cannonical order.
!	Note: LUB cannot be located until all OPEN arguments are scanned and UNIT=n found.
!
! FORMAL PARAMETERS:
!
!	KEYWD_ADR.rlu.ra	Address of first keyword
!				in user arg list
!	ACTUAL_COUNT.rlu.v	Count of no. of users args
!	OPEN_ADR.wlu.ra		Adr. of array to write keyword values
!	KEY_MAX.rlu.v	Max. OPEN/CLOSE keyword value
!	NAM_DSC_ADR	Adr. of a descriptor if ASCIZ name string given by user
!	DEF_DSC_ADR	Adr. of a descriptor if ASCIZ default name string given by user
!			Descriptors must be allocated by caller
!			not called procedure.
!	OPEN_FLAG	= 1 if this call is from OPEN, 0 from CLOSE.
!			Only allocate a LUN if from OPEN.
!	VAR_LENGTHS	A byte vector into which are inserted the lengths
!			in bits of the keyword variables.  This is used
!			by FOR$INQUIRE only.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETITION STATUS:
!
!	NONE
!
! SIDE EFFECTS:
!
!	SIGNAL_STOPs FOR$_INVARGFOR (48='INVALID ARGUMENT TO FORTRAN I/O SYSTEM')
!	if keyword parameter is out of range, but only after all parameters
!	are scanned so that ERR= parameter, if present, has been setup in array OPEN_ADR.
!	Uses FOR$$SIG_NO_LUB to signal, since no LUB setup yet
!	so logical unit number must be passed explicitly on errors.
!--

    BEGIN

    MAP
	KEYWD_ADR : REF BLOCKVECTOR [100, 1],	! Vector of blocks, each block
						! is one longword.
	OPEN_ADR : REF VECTOR [OPEN$K_KEY_MAX + 1, LONG],	! Vector to receive cannonical ordering
						! of users parameter values.
	NAM_DSC_ADR : REF DSC$DESCRIPTOR,	! string descriptor to use in case ASCIZ file name
	DEF_DSC_ADR : REF DSC$DESCRIPTOR,	! string descriptor to use in case ASCIZ default file name
	VAR_LENGTHS : REF VECTOR [INQ$K_KEY_MAX + 1, BYTE];	! Variable lengths

    LOCAL
	V_ARG_KEY_ERR,				! error flag, 1 if ARG or KEY out of range
	V_KEY_VAL_ERR,				! error flag, 1 if keyword incorrect
	UNIT_ADDR,				! Address of UNIT variable
	UNIT_TYPE;				! Type of varaible: w or L

!+
! Clear OPEN or CLOSE parameter array and clear flag
!-
    FILL_VAL (0, .KEY_MAX + 1, .OPEN_ADR);
    V_ARG_KEY_ERR = 0;
    V_KEY_VAL_ERR = 0;
    UNIT_TYPE = 0;
    UNIT_ADDR = 0;
!+
! Scan actual keyword parameter list (KEYWD_ADR) and copy (sign extend)
! associated information to formal array OPEN_ADR of longwords ordered
! by parameter dependencies, i. e., sort by KEY.
!-

    INCR I FROM 0 TO .ACTUAL_COUNT - 1 DO
!+
! Set longword value to sign extension of each type of OPEN/CLOSE
! parameter present to: Bits 31:16 of this actual, next
! actual, or location specified by next actual depending
! on the type of OPEN argument (OPEN$B_ARG_TYPE).
! If ARGTYPE or KEY code is not one of defined values, set error flag and keep scanning
! to see if ERR= is present so error handler will handle properly.
! error FOR$_INVARGFOR (48='INVALID ARGUMENT TO FORTRAN I/O SYSTEM')
!-
	BEGIN

	LOCAL
	    K,					! temp value of KEY
	    V;					! temp value of value to be stored

	K = .KEYWD_ADR [.I, OPEN$B_KEY];
	V =
	BEGIN

	CASE .KEYWD_ADR [.I, OPEN$B_ARG_TYPE] FROM 0 TO OPEN$K_ARG_MAX OF
	    SET

	    [OPEN$K_ARG_NULL] :
!+
! keyword with no value - make value be 1
! to distinguish from not present.
!-
		1;

	    [OPEN$K_ARG_LIT, OPEN$K_ARG_W_V] :
!+
! literal or word-by-value - bits <31:16> is value
! sign extend to full machine value
!-
		.KEYWD_ADR [.I, OPEN$W_INFO];

	    [OPEN$K_ARG_W_R] :
!+
! Word by reference - use adr. in next longword
! sign extend word to longword
!-
		BEGIN

		IF (.K EQLU OPEN$K_UNIT)
		THEN
!+
! Remember UNIT's address and type in case we must provide it
!-

		    IF (.UNIT_TYPE NEQ 0)
		    THEN
			V_ARG_KEY_ERR = 1
		    ELSE
			BEGIN
!+
! This is the first time through here
!-
			UNIT_TYPE = DSC$K_DTYPE_W;
			UNIT_ADDR = .KEYWD_ADR [.I + 1, OPEN$A_VALUE];
			END;

		IF ((.K EQLU OPEN$K_ASSOCIAT) OR (.K EQLU OPEN$K_IOSTAT))
		THEN
!+
! For the associated variable or IOSTAT we want the address of the value, not the
! value itself.
!-
		    .KEYWD_ADR [(I = .I + 1), OPEN$A_VALUE]	!
		ELSE

		    IF (.K GTR OPEN$K_KEY_MAX)
		    THEN
			BEGIN
			VAR_LENGTHS [.K] = 16;	! Signify word
			.KEYWD_ADR [(I = .I + 1), OPEN$A_VALUE]
			END
		    ELSE
			.(.KEYWD_ADR [(I = .I + 1), OPEN$A_VALUE])<0, %BPVAL/2, 1>

		END;

	    [OPEN$K_ARG_L_R] :
!+
! Longword by-reference-next parameter slot contains adr. of value
!-
		BEGIN

		IF (.K EQLU OPEN$K_UNIT)
		THEN
!+
! Remember the address and type of the variable which holds the UNIT
! in case we must compute the LUN value.
!-

		    IF (.UNIT_TYPE NEQ 0)
		    THEN
			V_ARG_KEY_ERR = 1
		    ELSE
			BEGIN
!+
! This is the first time through here.
!-
			UNIT_TYPE = DSC$K_DTYPE_L;
			UNIT_ADDR = .KEYWD_ADR [.I + 1, OPEN$A_VALUE];
			END;

		IF ((.K EQLU OPEN$K_ASSOCIAT) OR (.K EQLU OPEN$K_IOSTAT))
		THEN
!+
! For the associated variable or IOSTAT we want the address of the variable, not
! its value.  Also, we must mark that it occupies a longword.
!-
		    BEGIN

		    IF (.K EQLU OPEN$K_ASSOCIAT)
		    THEN
			OPEN_ADR [OPEN$K_ASSOC_L] = 1
		    ELSE
			OPEN_ADR [OPEN$K_IOSTAT_L] = 1;

		    .KEYWD_ADR [(I = .I + 1), OPEN$A_VALUE]
		    END
		ELSE

		    IF (.K GTR OPEN$K_KEY_MAX)
		    THEN
			BEGIN
			VAR_LENGTHS [.K] = 32;	! Signify longword
			.KEYWD_ADR [(I = .I + 1), OPEN$A_VALUE]	! Address for INQUIRE
			END
		    ELSE
			..KEYWD_ADR [(I = .I + 1), OPEN$A_VALUE]

		END;

	    [OPEN$K_ARG_L_V, OPEN$K_ARG_ZI] :
!+
! Longword by value or procedure adr.
!-
		.KEYWD_ADR [(I = .I + 1), OPEN$G_VALUE];

	    [OPEN$K_ARG_T_DS] :
!+
! Address of string descriptor.
!-

		IF .K EQLU OPEN$K_NAME OR .K EQLU OPEN$K_DEFAULTF
		THEN
		    .KEYWD_ADR [(I = .I + 1), OPEN$G_VALUE]
		ELSE
		    BEGIN

		    LOCAL
			V;			! Returned value

		    V = FOR$$OPEN_KEYWD (.K, .KEYWD_ADR [.I + 1, OPEN$G_VALUE]);
		    I = .I + 1;

		    CASE .V FROM -1 TO 0 OF
			SET

			[-1] : 			! Invalid keyword for this type
			    BEGIN
			    V_ARG_KEY_ERR = 1;
			    0
			    END;

			[0] : 			! Keyword value error
			    BEGIN
			    V_KEY_VAL_ERR = 1;
			    0
			    END;

			[OUTRANGE] : 		! Ok
			    .V;
			TES

		    END;

	    [OPEN$K_ARG_TZ_R] :
!+
! Address of array of ASCIZ characters.
! Next parameter slot contains address of first byte of string
! If this is FILE or DEFAULTFILE, store length and address of string in
! its respective descriptor.
! Else SIGNAL_STOP FOR$_INVARGFOR (48='INVALID ARGUMENT TO FORTRAN I/O SYSTEM')
!-

		IF (.K EQLU OPEN$K_NAME)
		THEN
		    BEGIN

		    LOCAL
			P;			! char. pointer to null char or 0

		    NAM_DSC_ADR [DSC$A_POINTER] = .KEYWD_ADR [(I = .I + 1), OPEN$A_VALUE];
		    P = CH$FIND_CH (OPEN$K_STR_MAX, .NAM_DSC_ADR [DSC$A_POINTER], 0);
		    NAM_DSC_ADR [DSC$W_LENGTH] = (IF .P NEQ 0 THEN CH$DIFF (.P, .NAM_DSC_ADR [DSC$A_POINTER])
		    ELSE OPEN$K_STR_MAX);
		    .NAM_DSC_ADR		! value of the CASE-expr is adr. of descr.
		    END
		ELSE IF (.K EQLU OPEN$K_DEFAULTF)
		THEN
		    BEGIN

		    LOCAL
			P;			! char. pointer to null char or 0

		    DEF_DSC_ADR [DSC$A_POINTER] = .KEYWD_ADR [(I = .I + 1), OPEN$A_VALUE];
		    P = CH$FIND_CH (OPEN$K_STR_MAX, .DEF_DSC_ADR [DSC$A_POINTER], 0);
		    DEF_DSC_ADR [DSC$W_LENGTH] = (IF .P NEQ 0 THEN CH$DIFF (.P, .DEF_DSC_ADR [DSC$A_POINTER])
		    ELSE OPEN$K_STR_MAX);
		    .DEF_DSC_ADR		! value of the CASE-expr is adr. of descr.
		    END
		ELSE
!+
! ASCIZ string not file name or default file name, just skip next
! longword and flag error
!-
		    BEGIN
		    I = .I + 1;
		    V_ARG_KEY_ERR = 1;
		    0				! value of the CASE-expr is 0 if error
		    END;

	    [OPEN$K_ARG_INLN] :
!+
! Sublist in-line with argument list
!-
		BEGIN

		LOCAL
		    ADDR,
		    COUNT;

		COUNT = .KEYWD_ADR [.I, OPEN$W_INFO];
		ADDR = KEYWD_ADR [.I, OPEN$B_KEY];
		I = .I + .COUNT;
		.ADDR
		END;

	    [OPEN$K_ARG_B_R] :
!+
! Byte variable by reference
! Used only by FOR$INQUIRE
!-
		BEGIN

		IF (.K GTR OPEN$K_KEY_MAX)
		THEN
		    BEGIN
		    VAR_LENGTHS [.K] = 8;	! Signify byte
		    .KEYWD_ADR [(I = .I + 1), OPEN$A_VALUE]
		    END
		ELSE
		    ..KEYWD_ADR [(I = .I + 1), OPEN$A_VALUE]

		END;

	    [INRANGE, OUTRANGE] :
!+
! If KEY is out of range, set error flag (V_ARG_KEY_ERR) and
! keep scanning to see if ERR= is present or not.
!-
		BEGIN
		V_ARG_KEY_ERR = 1;
		0				! Store 0
		END;
	    TES

	END;					! End of CASE on ARG_TYPE.
!+
! If KEY value is in range, store in cannonical array OPEN_ADR,
! else set error flag and keep scanning to see if ERR= is present
! so error handler will handle properly when signaled.
! Note: I advanced correctly (by 1 or 2) depending on ARGTYPE
! even though KEY is not one of the defined ones.
!-

	IF ((.K LEQU .KEY_MAX) OR (.K EQLU OPEN$K_IOSTAT)) THEN OPEN_ADR [.K] = .V ELSE V_ARG_KEY_ERR = 1;

	END;					! End of loop

!+
! Check for any errors during scan.
! If yes, SIGNAL_STOP FOR$_INVARGFOR (48='INVALID ARGUMENT TO FORTRAN I/O SYSTEM')
!-

    IF .V_ARG_KEY_ERR THEN FOR$$SIG_NO_LUB (FOR$K_INVARGFOR, .OPEN_ADR [OPEN$K_UNIT]);

    IF .V_KEY_VAL_ERR THEN FOR$$SIG_NO_LUB (FOR$K_KEYVALERR, .OPEN_ADR [OPEN$K_UNIT]);


    RETURN;					! Return from FOR$$OPECLO_ARG routine
    END;					! End of FOR$$OPECLO_ARG routine


ROUTINE OPEN_ON_CONNECTED (			! Open on a connected unit
	OPEN, 					! Keyword vector
	L_UNWIND_ACTION				! Unwind action
    ) : CALL_CCB =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine implements the FORTRAN-77 concept of open on
!	a connected unit.
!
!	If an OPEN is done for a unit which is already open, one of two
!	things happen:
!	    1.  If the filename specification in the OPEN is the same as
!		the same as the file currently open, or if the filename
!		is omitted but the unit is already open, then the value
!		of BLANK= is set according to the keyword list.
!	    2.  If the filename specification in the OPEN is not the same
!		as the file currently open, the old file is closed and
!		the new one is opened.
!
! FORMAL PARAMETERS:
!
!	OPEN.rl.ra		Sorted keyword list from OPEN
!	L_UNWIND_ACTION.ml.r	Unwind action in case of an error
!
! IMPLICIT INPUTS:
!
!	CCB			Global I/O database register
!
! IMPLICIT OUTPUTS:
!
!	LUB$V_NULLBLNK
!
! ROUTINE VALUE:
!
!	True (1) if no further OPEN processing is needed (case 1)
!	False (0) otherwise (case 2)
!
! SIDE EFFECTS:
!
!	Possibly closes the currently open file
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF $FOR$CCB_DECL;

    MAP
	OPEN : REF VECTOR [OPEN$K_KEY_MAX + 1];

    LOCAL
	FAB : BLOCK [FAB$C_BLN, BYTE],		! FAB block
	NAM : BLOCK [NAM$C_BLN, BYTE],		! NAM block
	RES_NAME : VECTOR [NAM$C_MAXRSS, BYTE],	! Resultant name string
	RES_LEN,				! Resultant string length
	DEF_NAME : VECTOR [10, BYTE],		! Default name string
	NAM_DSC : REF DSC$DESCRIPTOR,		! FILE/DEFAULTFILE descriptor
	UNIT,					! Logical unit number
	RMS_STATUS;				! RMS condition status

!+
! Set up FAB and NAM blocks
!-
    CH$FILL (0, FAB$C_BLN, FAB);
    CH$FILL (0, NAM$C_BLN, NAM);
    FAB [FAB$B_BID] = FAB$C_BID;
    FAB [FAB$B_BLN] = FAB$C_BLN;
    NAM [NAM$B_BID] = NAM$C_BID;
    NAM [NAM$B_BLN] = NAM$C_BLN;
    FAB [FAB$L_NAM] = NAM;
!+
! Set up common default value for FILE and DEFAULTFILE if needed
!-
    UNIT = .OPEN [OPEN$K_UNIT];
    IF .OPEN [OPEN$K_NAME] EQLA 0 OR
       .OPEN [OPEN$K_DEFAULTF] EQLA 0
    THEN
	BEGIN
	DEF_NAME [0] = %C'F';
	DEF_NAME [1] = %C'O';
	DEF_NAME [2] = %C'R';
	DEF_NAME [3] = ((.UNIT/100) MOD 10) + %C'0';
	DEF_NAME [4] = ((.UNIT/10) MOD 10) + %C'0';
	DEF_NAME [5] = ((.UNIT) MOD 10) + %C'0';
	DEF_NAME [6] = %C'.';
	DEF_NAME [7] = %C'D';
	DEF_NAME [8] = %C'A';
	DEF_NAME [9] = %C'T';
	END;

!+
! Set up DEFAULTFILE name
!-

    NAM_DSC = .OPEN [OPEN$K_DEFAULTF];

    IF (.NAM_DSC NEQ 0)
    THEN
	BEGIN
!+
! Default file name was specified.  Check for proper length then
! use it.
!-
	IF ((.NAM_DSC [DSC$W_LENGTH] GTRU 255) OR (.NAM_DSC [DSC$W_LENGTH] EQL 0))
	THEN
	    FOR$$SIG_NO_LUB (FOR$K_FILNAMSPE, .UNIT);

	FAB [FAB$B_DNS] = .NAM_DSC [DSC$W_LENGTH];
	FAB [FAB$L_DNA] = .NAM_DSC [DSC$A_POINTER];
	END
    ELSE
	BEGIN
!+
! DEFAULTFILE not specified, use name of FORnnn.DAT
!-
	FAB [FAB$B_DNS] = %CHARCOUNT ('FORnnn.DAT');
	FAB [FAB$L_DNA] = DEF_NAME;
	END;

!+
! Set up file name
!-
    NAM_DSC = .OPEN [OPEN$K_NAME];

    IF (.NAM_DSC NEQ 0)
    THEN
	BEGIN
!+
! File name was specified.  Check for proper length then
! use it.
!-

	IF ((.NAM_DSC [DSC$W_LENGTH] GTRU 255) OR (.NAM_DSC [DSC$W_LENGTH] EQL 0))
	THEN
	    FOR$$SIG_NO_LUB (FOR$K_FILNAMSPE, .UNIT);

	FAB [FAB$B_FNS] = .NAM_DSC [DSC$W_LENGTH];
	FAB [FAB$L_FNA] = .NAM_DSC [DSC$A_POINTER];
	END
    ELSE
	BEGIN
!+
! File name not specified, use name of FORnnn which may be
! a logical name.
!-
	FAB [FAB$B_FNS] = %CHARCOUNT ('FORnnn');
	FAB [FAB$L_FNA] = DEF_NAME;
	END;

!+
! Set up resultant name string
!-
    NAM [NAM$B_ESS] = NAM [NAM$B_RSS] = NAM$C_MAXRSS;
    NAM [NAM$L_ESA] = NAM [NAM$L_RSA] = RES_NAME;
!+
! Parse and search for the file to get the resultant name
!-
    RMS_STATUS = $PARSE (FAB = FAB);

    IF (.RMS_STATUS) THEN $SEARCH (FAB = FAB) ELSE FOR$$SIG_NO_LUB (FOR$K_FILNAMSPE, .UNIT, FAB);

!+
! Specifically forbid wildcards in file name.
!-

    IF (.NAM [NAM$V_WILDCARD])
    THEN
	BEGIN
	NAM [NAM$L_ESA] = 0;			! Invalidate result string
	NAM [NAM$L_RSA] = 0;
	FAB [FAB$L_STS] = 0;			! Invalidate statuses
	FAB [FAB$L_STV] = 0;
	FOR$$SIG_NO_LUB (FOR$K_FILNAMSPE, .UNIT, FAB);
	END;

!+
! See if the resultant name matches that stored in the LUB
! or if the name was not given and the unit is open.
!-
    RES_LEN = MAX (.NAM [NAM$B_RSL], .NAM [NAM$B_ESL]);

    IF ((CH$EQL (.RES_LEN, RES_NAME, .CCB [LUB$B_RSL], .CCB [LUB$A_RSN], %C' '))	!
	OR ((.OPEN [OPEN$K_NAME] EQL 0) AND .CCB [LUB$V_OPENED]))
    THEN
	BEGIN
!+
! Names match, change BLANK= value only.
!-

	CASE .OPEN [OPEN$K_BLANK] FROM 0 TO OPEN$K_BLK_NUL OF
	    SET

	    [0] :
	    ;					! Make no changes

	    [OPEN$K_BLK_ZER] : 			! BLANK='ZERO'
		CCB [LUB$V_NULLBLNK] = 0;

	    [OPEN$K_BLK_NUL] : 			! BLANK='NULL'
		CCB [LUB$V_NULLBLNK] = 1;

	    [OUTRANGE] :
		FOR$$SIG_NO_LUB (FOR$K_INVARGFOR, .UNIT, FAB);
	    TES;

!+
! BLANK= set, now pop the LUB/RAB/ISB and return to FOR$OPEN
!-
	FOR$$CB_POP ();
	.L_UNWIND_ACTION = FOR$K_UNWINDNOP;
	RETURN 1;				! No more OPEN processing needed
	END
    ELSE
	BEGIN
!+
! File names do not match; close current file, open new one.
!-

	IF NOT FOR$$CLOSE_FILE () THEN FOR$$SIG_NO_LUB (FOR$K_CLOERR, .UNIT, FAB);

	FOR$$CB_POP ();
	.L_UNWIND_ACTION = FOR$K_UNWINDNOP;
!+
! Now, try to initiate re-opening of this unit
!-

	FOR$$CB_PUSH (.UNIT, LUB$K_LUN_MIN);
	.L_UNWIND_ACTION = FOR$K_UNWINDPOP;

	IF ((.CCB [LUB$V_OPENED]) OR (.CCB [LUB$V_DEALLOC])) 
	THEN 
	    FOR$$SIGNAL_STO (FOR$K_RECIO_OPE);

	END;

    RETURN 0;					! Continue OPEN processing
    END;					! of routine OPEN_ON_CONNECTED
END						! End of FOR$OPEN module

ELUDOM
