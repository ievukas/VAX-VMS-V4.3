MODULE RM3IUDR (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                INSERT USER DATA RECORD
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:        Wendy Koenig     CREATION DATE:        	14-JUL-78  11:15
!
! MODIFIED BY:
!
!	V03-012	JWT0174		Jim Teague		 4-Apr-1984
!		Fix one more key compression problem.  When a record
!		to be inserted in a bucket won't fit, RMS first scans
!		the bucket looking for deleted records whose space it
!		can reclaim.  If a record is deleted, the position-of-
!		insert of the new record is adjusted left the amount
!		of the size of the deleted record.  Note however that
!		the record following the record just deleted may have
!		had it's key expanded as a result.  That amount is also
!		taken into consideration when it comes to figuring the
!		position-of-insert. 
!		    Keep in mind that this position-for-insert adjustment
!		is only done for records before the position-for-insert.
!		When deletion of a record results in position-for-insert
!		being equal to where the deleted record used to be, no
!		key expansion adjustment should be done.  This was happening
!		in the case of a new record's position-of-insert being
!		just after a deleted record, and as a result the position-
!		of-insert became the middle of the record after the deleted
!		record.
!		
!	V03-011	MCN0016		Maria del C. Nasr	22-Mar-1983
!		More linkages reorganization
!
!	V03-010 MCN0015		Maria del C. Nasr	24-Feb-1983
!		Reorganize linkages
!
!	V03-009	TMK0005		Todd M. Katz		08-Jan-1983
!		Add support for Recovery Unit Journalling and RU ROLLBACK
!		Recovery of ISAM files. 
!
!		This requires modification to the local routine RM$DEL_AND_TRY 
!		- the routine which scans a primary data bucket attempting to 
!		reclaim sufficient space so as to make room in the bucket for 
!		the insertion of a new record. This routine now has the ability 
!		to deal with records that have been modified (deleted or 
!		updated) within Recovery Units under a certain set of 
!		circumstances.
!
!		The global routine RM$INSERT_UDR must be modified so that if
!		the primary data record must be repacked, the record size is
!		increased by two after repacking if the state bit 
!		IRB$V_RU_UPDATE is set. This is necessary to allow for the 
!		primary data record to have two record size fields and be in a 
!		special format when it is eventually built.
!
!		The global routine RM$BLDUDR must also be modified so that 
!		records being built as the result of $UPDATEs are built in a 
!		special format when the IRB$V_RU_UPDATE state bit is set. This 
!		special format has two record size fields. The first size field 
!		is part of the record overhead and is the size of the amount of 
!		space the record reserves in case the Recovery Unit has to be 
!		aborted. The second size field occupies the last two bytes in 
!		the reserved space of the record and contains the actual size 
!		of the record.
!
!	V03-008	TMK0004		Todd M. Katz		06-Jan-1983
!		Fixed a bug in the routine RM$DEL_AND_TRY. If this routine finds
!		a record that it can delete (the record is marked deleted and
!		duplicates are not allowed), then it reclaims the space it 
!		occupied by calling RM$DELETE_UDR. It then must adjust the 
!		address of the point of insertion of the new record provided 
!		the address of the reclaimed record preceeded the address of the
!		record in the bucket. What this adjustment was not taking into
!		account is that if primary key compression is enabled, the size
!		of the key of the following record might change, affecting where
!		the address of the point of insertion of the new record should 
!		be. This fix insures that such a change in key size is taken 
!		into account when the address of the point of insertion of the
!		new record is adjusted.
!
!	V03-007	TMK0003		Todd M. Katz		14-Nov-1982
!		Fixed a bug in the routine RM$DEL_AND_TRY. If this routine finds
!		a record that it can delete (the record is marked deleted and
!		duplicates are not allowed), then it reclaims the space it 
!		occupied by calling RM$DELETE_UDR. It then must adjust the 
!		address of the point of insertion of the new record provided 
!		the address of the reclaimed record preceeded the address of the
!		record in the bucket. This was being done by adjusting the 
!		point of insertion by the difference in the bucket freespace 
!		offset pointer before and after the deleted record's space was 
!		reclaimed taking into account whether a RRV was created to 
!		replace it or not. This method is incorrect because it does not
!		take into account the possibility that the key of the record
!		following the deleted record might expand when primary key
!		compression is enabled and the deleted record is removed. What
!		is done now is to compute the amount of space occupied by the
!		deleted record and just subtract that from the address of the 
!		point of insertion of the new record when necessary.
!
!	V03-006	KBT0167		Keith B. Thompson	23-Aug-1982
!		Reorganize psects
!
!	V03-005	TMK0002		Todd M. Katz		08-Aug-1982
!		Re-write the routine DEL_AND_TRY. The $DELETE operation has been
!		completely re-written and the interfacing of this routine to
!		the routines involved has drastically changed.
!
!	V03-004	TMK0001		Todd M. Katz		02-Jul-1982
!		Implement the RMS cluster solution for next record positioning.
!		As the next record positioning context is now kept locally
!		within the IRAB, it is no loner necessary to reference the
!		NRP cell, a structure whose existance has been terminated, in
!		order to both set and retrieve the RFA address of the user
!		data record being inserted. Always reference the RFA of the new
!		(updated) record by means of the subfields IRB$L_PUTUP_VBN
!		and IRB$W_PUTUP_ID.
!
!	V03-003	KBT0073		Keith B. Thompson	28-Jun-1982
!		Modify del_and_try for the new NPR delete requirements
!
!	V03-002	MCN0014		Maria del C. Nasr	11-Jun-1982
!		Eliminate overhead at end of data bucket that was to be
!		used for duplicate continuation bucket processing.
!
!	V03-001	TMK0001		Todd M. Katz		14-March-1982
!		Change the use of RM$INSERT_UDR's lone parameter so that
!		it is both an input and an output parameter. This is 
!		because in one special case the size of the record to be
!		inserted may change, but the insertion does not take place
!		under the control of this routine. If there is insufficient
!		room in the bucket for the record, an attempt is made to
!		squish out the keys of all deleted records with keys currently
!		in the bucket. If this is a prologue 3 file with compressed
!		primary keys, and the record to be inserted follows such a
!		deleted record, this means the record must also be repacked as
!		its size could have changed. If there is still insufficient
!		room in the bucket for the new record, this new size value
!		must be returned, since a bucket split is to occur, and the
!		insertion of the new record will take place elsewhere.
!
!	V02-016	DJD0001		Darrell Duffy		1-March-1982
!		Fix reference to record buffer to prevent protection
!		hole.
!
!	V02-015	PSK0001		Paulina S. Knibbe	08-Oct-1981
!		Fix 014. When scanning a bucket for deleted records to
!		squish, this routine was getting confused after 
!		successfully squishing a record which also caused
!		the following key to be expanded (because of front-end
!		compression). 
!
!	V02-014	MCN0013		Maria del C. Nasr	04-Aug-1981
!		When we delete records, and expand keys the position of insert
!		must be updated to reflect characters moved.
!
!	V02-013	MCN0012		Maria del C. Nasr	07-Jul-1981
!		Fix problem in which if a record was to be added after a record
!		that was deleted by DEL_AND_TRY, the key compression did not
!		match anymore.  Record must be packed again.
!
!	V02-012	MCN0010		Maria del C. Nasr	15-May-1981
!		Make changes to be able to $PUT prologue 3 records.
!
!	V02-011	MCN0006		Maria del C. Nasr	13-Mar-1981
!		Increase size of record identifier to a word in NRP.
!
!	V02-010	REFORMAT	Paulina S. Knibbe	23-JUL-80
!
! REVISION HISTORY:
!
!   Wendy Koenig, 	28-SEP-78  8:51
!   X0002 - WHEN SQUISHING OUT DELETED RECORDS ALWAYS LEAVE A 2-BYTE RRV
!
!   Christian Saether, 	4-OCT-78  9:45
!   X0003 - modifications for UPDATE
!
!   Wendy Koenig, 	12-OCT-78  15:56
!   X0004 - IF ITS AN EMPTY BUCKET, FORCE RECORD ALWAYS TO FIT, REGARDLESS OF
!   LOA BIT
!
!   Wendy Koenig, 	24-OCT-78  14:02
!   X0005 - MAKE CHANGES CAUSED BY SHARING CONVENTIONS
!
!   Christian Saether, 	13-DEC-78  20:23
!   X0006 - DEL_AND_TRY forces DELETE_UDR to always remove record
!
!   Wendy Koenig, 	22-JAN-79  17:01
!   X0007 - IGNORE LOA BIT IF UPDATE
!
!   Wendy Koenig, 	25-JAN-79  11:25
!   X0008 - GET RID OF SETTING VALID
!
!   Christian Saether, 1-Jan-80  21:55
!   0009 - check for id available moved to rm$put3b from rm$insert_udr
!   because it's not relevant in update situation (fixes bug splitting
!   bucket on update when all id's are used)
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! Define default PSECTS for code
!
PSECT
    CODE = RM$RMS3(PSECT_ATTR),
    PLIT = RM$RMS3(PSECT_ATTR);

! Linkages
!
LINKAGE
    L_JSB01,
    L_PRESERVE1,
    L_RABREG_567,
    L_RABREG_4567,
    L_RABREG_67,
    L_REC_OVHD,

    ! Local linkages
    !
    RL$DEL_AND_TRY = JSB()
		   : GLOBAL(COMMON_IOREG,COMMON_RABREG,R_REC_ADDR,R_IDX_DFN);

! Forward Routines
!
FORWARD ROUTINE
    RM$INSERT_REC	: RL$RABREG_4567,
    RM$INSERT_UDR	: RL$RABREG_4567;

! External Routines
!
EXTERNAL ROUTINE
    RM$DELETE_UDR	: RL$RABREG_4567,
    RM$GETNEXT_REC	: RL$RABREG_67,
    RM$MOVE		: RL$PRESERVE1,
    RM$PACK_REC		: RL$RABREG_567,
    RM$RECOMPR_KEY	: RL$JSB01,
    RM$REC_OVHD		: RL$REC_OVHD,
    RM$RU_RECLAIM	: RL$RABREG_67;

%SBTTL	'RM$BLDUDR'
GLOBAL ROUTINE RM$BLDUDR (RECSZ) : RL$RABREG_4567 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
! insert the user's data record into the bucket w/ all its overhead
!
! CALLING SEQUENCE:
!
!	BSBW RM$BLDUDR()
!
! INPUT PARAMETERS:
!	RECSZ - record size of record to be inserted including overhead
!
! IMPLICIT INPUTS:
!	REC_ADDR -- pointer to place to insert record
!	BKT_ADDR -- nxtrecid field
!	IDX_DFN -- index descriptor for data bucket type
!	BDB -- vbn of bucket
!	RAB -- rsz, rbf fields
!	IFAB -- rfm field, 
!	IRAB -- mode field, V_RU_UPDATE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	record is inserted into bucket, nxtrecid is incremented if new record
!	REC_ADDR points to the first byte of the next record
!	IRB$L_PUTUP_VBN, and IRB$W_PUTUP_ID are filled in with the RFA address 
!	    of the record
!	IRB$V_RU_UPDATE is always cleared.
!
! ROUTINE VALUE:
!	RMSSUC
!
! SIDE EFFECTS:
!
!	Record is inserted into bucket.
!	If the state bit IRB$V_RU_UPDATE is set, the record is built in a 
!	    special format in that it will contain two record size fields. The
!	    amount of space the record occupies will be found in the record
!	    overhead's size field while the true size of the record will be
!	    found in the last two bytes of this reserved space.
!
!--

    BEGIN

    BUILTIN
	TESTBITSC;

    EXTERNAL REGISTER
	COMMON_IO_STR,
	R_REC_ADDR_STR,
	R_IDX_DFN_STR,
	R_IFAB_STR,
	R_IRAB_STR,
	R_RAB_STR;

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BEGIN

	IF NOT .IRAB[IRB$V_UPDATE]
	THEN

	    ! this is a put operation so the VBN and ID fields for this record must
	    ! be filled in the record pointer fields to build the record
	    !
	    BEGIN

	    IF .BDB NEQ .IRAB[IRB$L_CURBDB]

		! the record is going into a new bucket so zero the ID to 
		! signal this. the ID's will get reassigned further on anyway
		!
	    THEN
		IRAB[IRB$W_LAST_ID] = 0
	    ELSE

		! the record goes into the original bucket so use the next ID
		!
		BEGIN
		IRAB[IRB$W_LAST_ID] = .BKT_ADDR[BKT$B_NXTRECID];
		IRAB[IRB$W_PUTUP_ID] = .BKT_ADDR[BKT$B_NXTRECID];
		BKT_ADDR[BKT$B_NXTRECID] = .BKT_ADDR[BKT$B_NXTRECID] + 1;
		END;

	    IRAB[IRB$L_PUTUP_VBN] = .BDB[BDB$L_VBN];
	    END;

	REC_ADDR[IRC$B_CONTROL] = 2;

	! fill in record ID and back pointer ID fields, being sure to use
	! the original ID if this is an update case
	!
	REC_ADDR[IRC$B_ID] = .IRAB[IRB$W_LAST_ID];
	REC_ADDR[IRC$B_RRV_ID] = .IRAB[IRB$W_PUTUP_ID];
	REC_ADDR = .REC_ADDR + 3;

	(.REC_ADDR) = .IRAB[IRB$L_PUTUP_VBN];
	REC_ADDR = .REC_ADDR + 4;

	! if not fixed length records, move size field in
	!

	IF .IFAB[IFB$B_RFMORG] NEQ FAB$C_FIX
	THEN
	    BEGIN
	    (.REC_ADDR)<0, 16> = .RAB[RAB$W_RSZ];
	    REC_ADDR = .REC_ADDR + IRC$C_DATSZFLD;
	    END;

	! move user's data record in
	!
	BEGIN

	GLOBAL REGISTER
	    R_IMPURE;

	REC_ADDR = RM$MOVE (.IRAB[IRB$W_RSZ], .IRAB[IRB$L_RBF], .REC_ADDR);
	END;
	END

    ELSE
	BEGIN

	IF NOT .IRAB[IRB$V_UPDATE]
	THEN

	    ! this is a put operation so the VBN and ID fields for this record must
	    ! be filled in the record pointer fields to build the record
	    !
	    BEGIN

	    IF .BDB NEQ .IRAB[IRB$L_CURBDB]

		! the record is going into a new bucket so zero the ID to signal
		! this. the ID's will get reassigned further on anyway
		!
	    THEN
		IRAB[IRB$W_LAST_ID] = 0
	    ELSE

		! the record goes into the original bucket so use the next ID
		!
		BEGIN
		IRAB[IRB$W_LAST_ID] = .BKT_ADDR[BKT$W_NXTRECID];
		IRAB[IRB$W_PUTUP_ID] = .BKT_ADDR[BKT$W_NXTRECID];
		BKT_ADDR[BKT$W_NXTRECID] = .BKT_ADDR[BKT$W_NXTRECID] + 1;
		END;

	    IRAB[IRB$L_PUTUP_VBN] = .BDB[BDB$L_VBN];
	    END;

	! Fill in the pointer size field
	!
	REC_ADDR[IRC$B_CONTROL] = 2;

	! If this record is to be in a special format then set the appropriate
	! record control bit.
	!
	IF .IRAB[IRB$V_RU_UPDATE]
	THEN
	    REC_ADDR[IRC$V_RU_UPDATE] = 1;

	! fill in record ID and back pointer ID fields, being sure to use
	! the original ID if this is an update case.  Also, move VBN into
	! record.
	!
	REC_ADDR[IRC$W_ID] = .IRAB[IRB$W_LAST_ID];
	REC_ADDR[IRC$W_RRV_ID] = .IRAB[IRB$W_PUTUP_ID];
	REC_ADDR = .REC_ADDR + 5;
	(.REC_ADDR) = .IRAB[IRB$L_PUTUP_VBN];
	REC_ADDR = .REC_ADDR + 4;
	RECSZ = .RECSZ - IRC$C_FIXOVHSZ3;

	! If not fixed length records, or fixed length compressed records
	! move size field in
	!
	IF .IFAB[IFB$B_RFMORG] NEQ FAB$C_FIX
	  OR (.IFAB[IFB$B_RFMORG] EQL FAB$C_FIX
	    AND .IDX_DFN[IDX$B_DATBKTYP] NEQU IDX$C_NCMPNCMP)
	THEN
	    BEGIN
	    RECSZ = .RECSZ - IRC$C_DATSZFLD;
	    (.REC_ADDR)<0, 16> = .RECSZ;
	    REC_ADDR = .REC_ADDR + IRC$C_DATSZFLD;

	    ! If the record is to be in the special format, then reduce record
	    ! size by the two bytes that were added to it to allow for the
	    ! second record size field, and move the true size of the record 
	    ! into this second record size field (which occupies the last two 
	    ! bytes in the reserved space of the record).
	    !
	    IF .IRAB[IRB$V_RU_UPDATE]
	    THEN
		BEGIN
		RECSZ = .RECSZ - IRC$C_DATSZFLD;
		(.REC_ADDR + .RECSZ)<0,16> = .RECSZ;
		END;
	    END;

	! Move user's data record in.
	!
	BEGIN

	GLOBAL REGISTER
	    R_IMPURE;

	REC_ADDR = RM$MOVE(.RECSZ, .IRAB[IRB$L_RECBUF], .REC_ADDR);
	END;

	! If the record is in a special format, then increment REC_ADDR by the
	! size of the additional record size field so that it will point to the
	! end of the special data record.
	!
	IF TESTBITSC (IRAB[IRB$V_RU_UPDATE])
	THEN
	    REC_ADDR = .REC_ADDR + IRC$C_DATSZFLD;
	END;

    RETURN RMSSUC()

    END;					! { end of routine }

%SBTTL	'RM$DEL_AND_TRY'
ROUTINE RM$DEL_AND_TRY : RL$DEL_AND_TRY =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	If duplicate primary keys are not allowed, this routine scans the 
!	current primary data bucket for primary data records that are just 
!	marked deleted, and deletes any that it encounters. If records are 
!	encountered during the bucket scan which were modified within a 
!	Recovery Unit, then they maybe subjected to special processing provided 
!	the Recovery Unit in which they were modified has completed. Records 
!	that were deleted within a Recovery Unit may have their space reclaimed,
!	and records that were updated may be reformated.
!
!	If duplicate primary keys are allowed this routine can not reclaim the 
!	space occupued by records that are just marked deleted because of 
!	constraints imposed by the RMS cluster solution for next record 
!	positioning. However, if the file is RU Journallable, then the bucket
!	scan is done anyway so that any records modified within recovery units
!	can be processed appropriately. 
!
!	Whenever a deleted record is encountered, is is completely removed, a
!	two-byte deleted RRV without pointer is created for it at the end of the
!	bucket if the file is not a prologue 3 file and the record is in its
!	original bucket, and the bucket's freespace is appropriately updated. 
!	Because this routine is only called whenever there is insufficient room 
!	in the primary data bucket for the insertion of a new record, the 
!	point of insertion of the new record must also be updated whenever a 
!	deleted record is eliminated, and the position of the deleted record 
!	had preceeded the point of insertion of the new record in the bucket.
!
!	If the file is Recovery Unit Journallable, then the RRV records at the
!	end of the bucket will also be scanned looking for those records that
!	were deleting within a completed Recovery Unit. If such records are
!	found they are deleted for good at this time.
!
!
! CALLING SEQUENCE:
!
!	RM$DEL_AND_TRY()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	BKT_ADDR		- address of primary data bucket
!	    BKT$W_FREESPACE	- offset pointer to freespace in bucket
!
!	IDX_DFN			- index descriptor for primary key of reference
!	    IDX$V_DUPKEYS	- if set, duplicate keys are allowed
!	    IDX$V_KEY_COMPR	- if set, primary key compression is enabled
!
!	IFAB			- address of IFAB
!	    IFB$B_PLG_VER	- prologue version of file
!	    IFB$V_RU		- if set, file is RU Journallable
!
!	REC_ADDR		- address of point of insertion of new record
!
! OUTPUT PARAMETERS:
!	NONE
!	
! IMPLICIT OUTPUTS:
!
!	IRAB			- address of IRAB
!	    IRB$W_POS_INS	- offset to point of insertion of new record
!
!	REC_ADDR		- address of point of insertion of new record
!
! ROUTINE VALUE:
!
!	0 if no records were deleted
!	1 if some records were deleted
!
! SIDE EFFECTS:
!
!	AP is trashed.
!	If duplicate primary keys are not allowed, and deleted records were
!	    found in the bucket they were completely deleted, and the bucket
!	    freespace offset and position of insertion of the new record 
!	    updated appropriately. 
!	If this is a prologue 2 file then any deleted records encountered that 
!	    were in their original bucket have a deleted RRV (without a RRV 
!	    pointer) created for it at the end of the bucket to reserve the ID 
!	    so it can not be recycled. 
!	Any records that had been deleted within Recovery Units might have been
!	    deleted for good and had their space reclaimed.
!	Any records that had been updated within Recovery Units might have been
!	    reformated.
!
!--

    BEGIN

    BUILTIN
	AP,
	TESTBITSC;

    EXTERNAL REGISTER
	COMMON_IO_STR,
	COMMON_RAB_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    LOCAL
	FLAGS		: BLOCK [1],
	POS_INSERT;

    MACRO
	KEY_EXPANSION	= 0,0,1,0 %,
	SPACE_RECLAIMED	= 0,1,1,0 %;

    ! If the file allows duplicate primary keys then the space occupied by
    ! deleted records can not be recover on-line due to constraints imposed
    ! by the RMS cluster solution to next record positioning. Avoid the 
    ! overhead of the bucket scan, unless the file is RU Journallable in which
    ! case perform the bucket scan so as to process those records which had
    ! been deleted within recovery units.
    !
    IF  .IDX_DFN[IDX$V_DUPKEYS]
	 AND
	NOT .IFAB[IFB$V_RU]
    THEN
	RETURN 0
    ELSE
	FLAGS = 0;

    ! Prepare to scan the bucket for deleted records by saving the address of
    ! the point of insertion of the new record and initializing REC_ADDR to the
    ! address of the very first record in the primary data bucket.
    !
    POS_INSERT 	  = .REC_ADDR;
    REC_ADDR 	  = .BKT_ADDR + BKT$C_OVERHDSZ;

    ! Scan the entire primary data bucket searching for primary data records
    ! that are just marked deleted. The search will terminate either when all
    ! records in the bucket have been exhausted, or the first RRV in the bucket
    ! is encountered (NOTE, if the file is Recovery Unit Journallable, then the
    ! scan will terminate only when every record in the bucket has been looked 
    ! at including the RRVs).
    !
    WHILE ((.REC_ADDR LSSA (.BKT_ADDR + .BKT_ADDR[BKT$W_FREESPACE]))
	    AND
	   (NOT .REC_ADDR[IRC$V_RRV]
		 OR
		.IFAB[IFB$V_RU]))
    DO
	BEGIN

	! If the current record has been modified within a Recovery Unit then it
	! may require special processing depending upon how the record was 
	! modified and whether the Recovery Unit terminated successfully or is 
	! still in progress.
	!
	IF .REC_ADDR[IRC$V_RU_UPDATE]
	    OR
	   .REC_ADDR[IRC$V_RU_DELETE]
	THEN
	    BEGIN

	    LOCAL
		OLD_FREESPACE : WORD;

	    ! Save the current freespace offset pointer into the primary data 
	    ! bucket.
	    !
	    OLD_FREESPACE = .BKT_ADDR[BKT$W_FREESPACE];

	    ! If it was possible to reclaim any space at all from the RU
	    ! modified record, then set the appropriate state bit and adjust
	    ! the position of insertion of the new record if necessary. 
	    !
	    IF RM$RU_RECLAIM()
	    THEN
		BEGIN

		FLAGS[SPACE_RECLAIMED] = 1;

		! If the position of insertion of the new record follows the
		! current record in the bucket, then adjust it by the number
		! of bytes that were freed by the reformatting of the 
		! current record.
		!
		IF .POS_INSERT GTRA .REC_ADDR
		THEN
		    POS_INSERT = .POS_INSERT - .OLD_FREESPACE 
					     + .BKT_ADDR[BKT$W_FREESPACE];
		END

	    ! If RMS is not able to reclaim any space from this RU modified
	    ! record because it is locked by another stream, then proceed
	    ! onto the next record in the primary data bucket.
	    !
	    ELSE
		RM$GETNEXT_REC();
	    END

	! If the current record in the bucket has not been marked as modified 
	! within a Recovery Unit but has been marked deleted, then completely
	! recover its space, creating a RRV in its place (but at the end of the
	! bucket) if necessary, and updating the bucket's freespace and the
	! position of insertion of the new record as required. This can only be
	! done if duplicate primary keys are not allowed, and of course, if the 
	! deleted record is not itself a deleted RRV.
	!
	ELSE
	    IF  .REC_ADDR[IRC$V_DELETED]
		 AND
		NOT .REC_ADDR[IRC$V_RRV]
		 AND
		NOT .IDX_DFN[IDX$V_DUPKEYS]
	    THEN
		BEGIN

		LOCAL
		    NEXT_KEY_SIZE,
		    REC_OVHD,
		    REC_SIZE;

		! Save the fact that a deleted record was encountered in this 
		! primary data bucket and its space completely reclaimed.
		!
		FLAGS[SPACE_RECLAIMED] = 1;

		! If the deleted record whose space is to be reclaimed preceeds
		! the point of insertion of the new record, then this position
		! of insertion address must be adjusted, and it adjusted by two 
		! quantities. 
		!
		! 1. The number of bytes that are freed through the reclamation 
		!    of the space occupied by the current record.
		!
		! 2. If primary key compression is enabled and a record follows 
		!    the current record, the number of bytes the key of this 
		!    next record changes when its key is re-compressed as part 
		!    of the removal of the current record.
		!
		IF .POS_INSERT GTRA .REC_ADDR
		THEN
		    BEGIN

		    LOCAL
			NEXT_REC_ADDR	: REF BBLOCK;

		    REC_OVHD = RM$REC_OVHD(0; REC_SIZE);
		    NEXT_REC_ADDR = .REC_ADDR + .REC_OVHD + .REC_SIZE;

		    ! Adjust the position of insertion of the new record by the
		    ! number of bytes which will be freed by the reclamation of 
		    ! the current record.
		    !
		    POS_INSERT = .POS_INSERT - (.REC_OVHD + .REC_SIZE);

		    ! If key compression is enabled, and there is a next record,
		    ! save the size of the key of the next record before it is
		    ! re-compressed as part of the deletion of the current 
		    ! record. This size will be used to adjust the position of 
		    ! insertion of the new record after the current record is 
		    ! deleted and the key of the current record is 
		    ! re-compressed.  However, don't adjust if POS_INSERT is
		    ! equal to REC_ADDR after the deleted record cleanup.
		    !
		    IF  .IDX_DFN[IDX$V_KEY_COMPR]
			 AND
			.NEXT_REC_ADDR LSSA 
					(.BKT_ADDR + .BKT_ADDR[BKT$W_FREESPACE])
			 AND
			NOT .NEXT_REC_ADDR[IRC$V_RRV]
			 AND
			.POS_INSERT GTRU .REC_ADDR	! MUST still be true
		    THEN
			BEGIN
			FLAGS[KEY_EXPANSION] = 1;
			NEXT_KEY_SIZE = .(.NEXT_REC_ADDR + .REC_OVHD)<0,8>
			END;
		    END;

		! Recover the space occupied by the deleted record replacing it 
		! with an RRV at the end of the bucket if necessary, adjusting 
		! the bucket freespace offset, and re-compressing the key of 
		! the following record if primary key compression is enabled 
		! and there is a following record.
		!
		RM$DELETE_UDR();

		! If the address of the position of insertion of the new record 
		! follows the address of the current record, and it is possible 
		! that the size of the key of the following record might have 
		! changed due to the re-compression of its primary key as part 
		! of the reclamation of the space occupied by the current 
		! record, then this possible change in key size must be used to 
		! adjust the position of insertion of the new record.
		! 
		IF TESTBITSC (FLAGS[KEY_EXPANSION])
		THEN
		    POS_INSERT = .POS_INSERT + .(.REC_ADDR + .REC_OVHD)<0,8> 
					     - .NEXT_KEY_SIZE;
		END

	    ! If the current record is neither marked deleted nor marked 
	    ! Recovery Unit modified then position to the next record.
	    !
	    ELSE
		RM$GETNEXT_REC();
	END;

    ! Readjust the offset to the point of insertion of the new record 
    ! (regardless of whether this has or has not changed), restore into 
    ! REC_ADDR the address of the point of insertion of the new record, and 
    ! return whether RMS encountered any deleted records and recovered the 
    ! space they occupied during its scan.
    !
    IRAB[IRB$W_POS_INS] = .POS_INSERT - .BKT_ADDR;
    REC_ADDR = .POS_INSERT;
    RETURN .FLAGS[SPACE_RECLAIMED];
    END;

%SBTTL	'RM$INSERT_REC'
GLOBAL ROUTINE RM$INSERT_REC(RECSZ) : RL$RABREG_4567 =

!++
!
! FUNCTIONAL DESCRIPTION:
!	 routine to put the record into the bkt w/o any checks
!
! CALLING SEQUENCE:
!
!	BSBW RM$INSERT_REC()
!
! INPUT PARAMETERS:
!	RECSZ - record size of record to be inserted including overhead
!
! IMPLICIT INPUTS:
!	BKT_ADDR, BDB of CURBDB
!	IRAB -- POS_INS
!	REC_ADDR -- pos of insert for record
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	success
!
! SIDE EFFECTS:
!	the bucket is expanded to make room for the record
!	freespace is updated
!	the bucket is marked valid and dirty
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_IO_STR,
	COMMON_RAB_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    ! The record will fit, get ready to move it in.
    !
    BEGIN

    IF .BKT_ADDR[BKT$W_FREESPACE] NEQU .IRAB[IRB$W_POS_INS]
    THEN
	BEGIN

    	! Since the record to be put is not the last one in the bucket, if
	! keys are compressed, recompress the key of the next record, if it is
	! not and RRV.  We are doing it for updates too, since when we deleted
	! the record to be udpated, we expanded the key.
	!
	IF .IDX_DFN[IDX$V_KEY_COMPR]
	  AND NOT .REC_ADDR[IRC$V_RRV]
	THEN
	    RM$RECOMPR_KEY(.IRAB[IRB$L_RECBUF], .REC_ADDR + RM$REC_OVHD(0));

	! Since there is a hi set, move it down in the bucket to make room
	! for the record.
	!
	RM$MOVE(.BKT_ADDR[BKT$W_FREESPACE] - .IRAB[IRB$W_POS_INS],
		.REC_ADDR,
		.REC_ADDR + .RECSZ);
	END;
    END;

    BEGIN

    ! update freespace word
    !
    BKT_ADDR[BKT$W_FREESPACE] = .BKT_ADDR[BKT$W_FREESPACE] + .RECSZ;
    BDB[BDB$V_DRT] = 1;

    ! move new record into bucket
    !
    RETURN RM$BLDUDR(.RECSZ)

    END
    END;				! { end of routine rm$insert_rec }


%SBTTL	'RM$INSERT_UDR'
GLOBAL ROUTINE RM$INSERT_UDR(RECSZ) : RL$RABREG_4567 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
! 	Insert user data record in bucket, if possible
!
! CALLING SEQUENCE:
!
!	BSBW RM$INSERT_UDR()
!
! INPUT PARAMETERS:
!	RECSZ - record size of record to be inserted including overhead
!
! IMPLICIT INPUTS:
!	RAB -- LOA bit, RSZ
!	IDX_DFN -- DATBKTSIZ and DATFILL for bucket
!	REC_ADDR -- pos of insert
!	IFAB -- RFM of file
!	IRAB -- CURBDB 
!	BDB and BKT_ADDR corresponding to CURBDB
!			from these we get the vbn, starting addr of bucket,
!			freespace pointer, NXTRECID, LSTRECID
!
! OUTPUT PARAMETERS:
!	RECSZ - record size of record to be inserted including overhead
!
! IMPLICIT OUTPUTS:
!	IRAB -- POS_INS
!	BKT_ADDR -- NXTRECID and FREESPACE are updated
!
! ROUTINE VALUE:
!	SUC if record is successfully placed in bucket
!	0 if record does not fit
!
! SIDE EFFECTS:
!	if it fits, record is placed into bucket
!	and bucket is marked dirty and valid
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_IO_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR,
	COMMON_RAB_STR;

    LOCAL
	REC_DEL,
	BKT_SIZE	: WORD;

    MAP
	RECSZ		: REF VECTOR[1,LONG];

    IRAB[IRB$W_POS_INS] = .REC_ADDR - .BKT_ADDR;

    ! Set up bkt_size to be the fill size if loa set, else datbktsz * 512
    ! if the bkt is empty or all rrv's, use the whole bkt not the fill size
    ! if this is an update, use the whole bkt
    !
    BKT_SIZE = .IDX_DFN[IDX$B_DATBKTSZ]*512;

    IF .RAB[RAB$V_LOA]
	AND
	NOT .IRAB[IRB$V_UPDATE]
    THEN
	BEGIN

	LOCAL
	    POINTER	: REF BBLOCK;

	POINTER = .BKT_ADDR + BKT$C_OVERHDSZ;

	IF .BKT_ADDR[BKT$W_FREESPACE] NEQU BKT$C_OVERHDSZ<0, 16>
	    AND
	    NOT .POINTER[IRC$V_RRV]
	THEN
	    BKT_SIZE = .IDX_DFN[IDX$W_DATFILL];
	END;

    IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN
	BKT_SIZE = .BKT_SIZE - 1			! checksum byte
    ELSE
	BKT_SIZE = .BKT_SIZE - BKT$C_DATBKTOVH;

    REC_DEL = 0;			! assume no record deleted

    ! If freespace is already past usable space, or if rec size is
    ! greater than usable space, won't fit
    !
    IF .BKT_ADDR [ BKT$W_FREESPACE ] GTRU .BKT_SIZE
	OR .RECSZ [ 0 ] GTRU ( .BKT_SIZE - .BKT_ADDR [ BKT$W_FREESPACE ] )
    THEN

	! Try to reclaim some space out of the bucket.  If we fail return zip!
	!
	IF NOT ( REC_DEL = RM$DEL_AND_TRY() )
	THEN
	    RETURN 0;

    ! If the key is compressed, and a record was deleted, it might have been
    ! the one before the record.  So pack the record again to fix the key
    ! compression.  Reset the last non-compressed record in case it was deleted.
    !
    IF .REC_DEL AND .IDX_DFN[IDX$V_KEY_COMPR]
    THEN
	BEGIN
	IRAB[IRB$L_LST_NCMP] = .BKT_ADDR + BKT$C_OVERHDSZ;
	RECSZ[0] = RM$PACK_REC();
	RECSZ[0] = .RECSZ[0] + IRC$C_FIXOVHSZ3;

	IF .IFAB[IFB$B_RFMORG] NEQU FAB$C_FIX
	  OR (.IFAB[IFB$B_RFMORG] EQL FAB$C_FIX
	    AND .IDX_DFN[IDX$B_DATBKTYP] NEQU IDX$C_NCMPNCMP)
	THEN
	    BEGIN
	    RECSZ[0] = .RECSZ[0] + IRC$C_DATSZFLD;

	    ! If the state bit IRB$V_RU_UPDATE is set, then increase the record 
	    ! size by two to include the additional record size field which 
	    ! must be included within the record.
	    !
	    IF .IRAB[IRB$V_RU_UPDATE]
	    THEN
		RECSZ[0] = .RECSZ[0] + IRC$C_DATSZFLD;
	    END;

	END;

    ! If the key compression changed, the record might have grown,
    ! make sure it still fits.

    IF .BKT_ADDR[BKT$W_FREESPACE] GTRU .BKT_SIZE
      OR .RECSZ[0] GTRU ( .BKT_SIZE - .BKT_ADDR[BKT$W_FREESPACE] )
    THEN
	RETURN 0;

    ! it's now o.k. to move the record in, so go do it
    !
    RETURN RM$INSERT_REC(.RECSZ[0]);

    END;

END

ELUDOM
