	.title	pli$delete - pl1 runtime delete file
	.ident	/1-002/					; Edit WHM1002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;


;++
; facility:
;
;	VAX/VMS PL1 runtime library.
;
; abstract:
;
;	This module contains the pl1 runtime routine for deleting a record
;	from a file.
;
; author: c. spitz 25-jul-79
;
; modified:
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;--


;+
; external definitions
;-

	$deffcb				;define file control block offsets
	$rabdef				;define rab offsets
	$rmsdef				;define rms error codes
	$fabdef				;define fab offsets

;+
; local definitions
;-
$offset	4,positive,<-			;define arguments
	<fcbaddr,4>,-			;addr of fcb
	<keyaddr,4>,-			;addr of key or keyto
	<keylen,4>,-			;length of key or keyto
	<keytyp,4>,-			;data type of key or keyto
	<fastdel,4>,-			;addr of fast delete
	<keynum,4>,-			;addr of key number
	<recidfrom,4>,-			;addr of record id from
	<matchgtr,4>,-			;addr of match greater
	<matchgeq,4>,-			;addr of match greater equal
	>				;

	rtshare				;sharable

	.page

;++
; pli$delete -- delete a record from a file
;
; functional description:
;
; This routine deletes a record from a pl1 file.
;
; inputs:
;	(ap) - number of arguments
;		1 if no key and no options
;		4 if key and no options
;		9 if any options
;	4(ap) - addr of fcb
;	8(ap) - addr of key
;	12(ap) - size/prec of key
;	16(ap) - data type of key
;	20(ap) - addr of fast delete (aligned bit)
;	24(ap) - addr of key number
;	28(ap) - addr of record id from
;	32(ap) - addr of match greater
;	36(ap) - addr of match greater equal
;
; outputs:
;	fcb_l_attr
;		atr_m_write, atr_m_bfall and atr_m_virgin are set false
;		atr_m_delete and atr_m_currec are set true
;	fcb_q_rfa is set to the rfa of the record that was deleted
;
; side effects:
;	the record is deleted from the file.
;--

	.entry	pli$delete,^m<r2,r3,r4,r5,r6>
;
; check arguments. there must be at least one argument.
;
	cmpl	(ap),#1			;enough arguments?
	bgeq	10$			;geq, yes
	clrl	r0			;indicate not enough args
	brw	fail			;and fail
10$:	movl	fcbaddr(ap),r2		;get address of fcb
	movl	fcb_l_attr(r2),r3	;get attributes
;
; open the file if necessary. the file will be opened with record and
; update. if the file is not opened after calling open, an error is
; signaled.
;
	bbs	#atr_v_opened,r3,20$	;if file not opened
	pushl	#<atr_m_record!atr_m_update> ;set record and update for implied
					;open
	pushl	r2			;push address of fcb
	calls	#2,g^pli$open		;open the file
	movl	fcb_l_attr(r2),r3	;get attributes
	bbs	#atr_v_opened,r3,20$	;if file still not opened
	movl	#pli$_open,r0		;set open failure
	brw	fail			;and fail
;
; make sure file has proper attributes. file must have record and
; update. file must not have delete.
; if key is specified, file must have keyed. 
;
20$:	bbs	#atr_v_record,r3,30$	;if file doesn't have record
	movl	#pli$_notrec,r0		;set not record file
	brw	fail			;and fail
30$:	bbs	#atr_v_update,r3,40$	;if file doesn't have update
	movl	#pli$_notupdate,r0	;set not update file
	brw	fail			;and fail
40$:	bbc	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),45$ ;if file open for
					;block io
	movl	#pli$_conblokio,r0	;set conflicts with block io
	brw	fail			;and fail
;
; process options
;
45$:	movab	fcb_b_rab(r2),r4	;get address of rab
	bicl	#<rab$m_kge!rab$m_kgt>,rab$l_rop(r4) ;clear kge and kgt
	cmpl	(ap),#4			;options specified?
	bgeq	50$			;if geq, maybe
	brw	160$			;its lss, so process as seql
50$:	beql	120$			;if eql, only key specified, go do it
	cmpl	(ap),#9			;enuf options?
	beql	60$			;if eql, then yes
	movl	#pli$_invnumopt,r0	;set invalid options
	brw	fail			;and fail
;
; process match greater and match greater equal
;
60$:	movl	matchgtr(ap),r0		;get addr of match greater
	jsb	g^pli$$matchgtr		;process match greater
	movl	matchgeq(ap),r0		;get addr of match greater equal
	jsb	g^pli$$matchgeq		;process match greater equal
;
; process key number
;
	movl	keynum(ap),r0		;get addr of key num
	movl	keyaddr(ap),r1		;get addr of key
	jsb	g^pli$$keynum		;proces key number
;
; process fast delete
;
	bicl	#rab$m_fdl,rab$l_rop(r4) ;assume no options
	movl	fastdel(ap),r0		;get addr of fast del
	beql	100$			;if eql, not specified
	bbs	#atr_v_indexed,r3,90$	;if file doesn't have indexed
	movl	#pli$_notindexed,r0	;set not indexed
	brw	fail			;and fail
90$:	insv	(r0),#rab$v_fdl,#1,rab$l_rop(r4) ;set fast delete in rab
;
; process record id from
;
100$:	movl	recidfrom(ap),r0	;get rfa from addr
	movl	keyaddr(ap),r1		;get addr of key
	jsb	g^pli$$recidfrom	;process rfa from
	bneq	180$			;if neq, do rfa find
120$:	tstl	keyaddr(ap)		;key specified?
	beql	160$			;if eql, no, do seql delete
;
; process key option.
;
130$:	bbs	#atr_v_keyed,r3,140$	;if file doesn't have keyed
	movl	#pli$_notkeyd,r0	;set not keyed file
	brw	fail			;and fail
140$:	movab	keyaddr(ap),r0		;point to key descr
	jsb	g^pli$$readkey_r6	;process key
	jsb	g^pli$$smallget		;find the record
	brb	190$			;cont
150$:	movl	#pli$_rmsr,r0		;set rms rab error
	brw	fail			;and fail
;
; for sequential delete, find current record if necessary.
;
160$:	bbc	#atr_v_delete,r3,170$	;if file has delete
165$:	movl	#pli$_nocurrec,r0	;set no current record
	brw	fail			;and fail
170$:	bbc	#atr_v_currec,r3,190$	;if current record not correct
	movb	#rab$c_rfa,rab$b_rac(r4) ;set rfa access in rab
	movq	fcb_q_rfa(r2),rab$w_rfa(r4) ;set rfa in rab
	bbs	#atr_v_virgin,r3,165$	;if open just occurred, fail
180$:	$find	r4			;find the current record
	blbc	r0,150$			;if lbc, fail
;
; delete the record
;
190$:	movq	rab$w_rfa(r4),fcb_q_rfa(r2) ;copy correct current record's rfa
					;to fcb
	$delete	r4			;delete the record
	blbc	r0,150$			;if lbc, fail
	bicl	#<atr_m_write!atr_m_bfall! - ;'deallocate buffer', clear write
		atr_m_virgin>,fcb_l_attr(r2) ;and virgin
	bisl	#<atr_m_delete!atr_m_currec>,- ;set current record incorrect
		fcb_l_attr(r2)		;and delete and copy atr to fcb
200$:	movl	#1,r0			;set success
	ret				;return

	.page

fail:	bneq	10$			;if not enough parms
	movl	#pli$_parm,r0		;set not enough parms
	clrl	r2			;set no fcb
	brb	40$			;just signal error
10$:	movl	r0,fcb_l_error(r2)	;set error code in fcb
	cmpl	#pli$_rmsr,r0		;rms rab error code?
	bneq	40$			;if neq, no, cont
	cmpl	(ap),#1			;key passed?
	beql	40$			;if eql, no, cont
	movab	keyaddr(ap),r3		;set key address for onkey
	jsb	g^pli$$chk_keycnd	;check for key condition
40$:	pushl	r2			;set fcb addr
	pushl	r0			;set error code
	pushl	#pli$_error		;set error condition
50$:	calls	#3,g^pli$io_error	;signal the condition
	ret				;return

	.end

