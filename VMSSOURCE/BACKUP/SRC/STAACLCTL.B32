MODULE STAACLCTL (
		 LANGUAGE (BLISS32),
		 IDENT = 'V04-000'
		 ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	BACKUP/RESTORE
!
! ABSTRACT:
!
!	This module contains the routines to manipulate the Access
!	Control Lists and Access Control Entries.
!
! ENVIRONMENT:
!
!	VAX/VMS user mode utilities.
!
!--
!
!
! AUTHOR:	L. Mark Pilant,		CREATION DATE:	3-Nov-1982  11:35
!
! MODIFIED BY:
!
!	V03-008	LMP0272		L. Mark Pilant,		3-Jul-1984  10:32
!		Change routines to use the common ACL subroutines where
!		possible.
!
!	V03-006	ACG0415		Andrew C. Goldstein,	24-Apr-1984  18:42
!		Misc ACL processing cleanups
!
!	V03-005	ACG0382		Andrew C. Goldstein,	16-Dec-1983  17:08
!		Fix RVN usage in reading extension headers
!
!	V03-004	ACG0365		Andrew C. Goldstein,	11-Oct-1983  14:55
!		Return correct error status on failures
!
!	V03-003	ACG0313		Andrew C. Goldstein,	12-Feb-1983  17:07
!		Add routine subtitles
!
!	V03-002	LMP0067		L. Mark Pilant,		15-Dec-1982  15:19
!		Deallocate memory obtained for ACL segments when the file
!		is deaccessed.
!
!
!**

REQUIRE 'SRC$:COMMON';
LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'LIB$:BACKDEF';


FORWARD ROUTINE
	ACL_DISPATCH,				! ACL dispatch routine
	ACL_BUILDACL,				! Build the ACL structures
	ALLOC_PAGED,				! Jacket routine for ACLSUBR
	DALLOC_PAGED;				! Jacket routine for ACLSUBR

EXTERNAL ROUTINE
	ACL_ADDENTRY,				! Add an Access Control Entry
	ACL_DELETEACL,				! Delete the entire ACL
	ACL_READACL,				! Read the entire ACL
	ACL_ACLLENGTH,				! Return the length of the ACL
	GET_ZERO_VM,				! Allocate & clear memory
	FREE_VM,				! Return allocated memory
	READ_HEADER,				! Read header specified by FCB
	SWITCH_VOLUME;				! Set the corrent volume

G$DEFINE ();					! Define global common area

BUILTIN
	INSQUE,
	REMQUE;

%SBTTL 'ACL_DISPATCH - dispatch ACL operation'
GLOBAL ROUTINE ACL_DISPATCH (CODE, COUNT, ACE, FIB) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called whenever any ACL processing is to be done.
!	The code is checked for validity and if valid, the appropriate routine
!	is called to manipulate the ACL's and ACE's.
!
! CALLING SEQUENCE:
!	ACL_DISPATCH (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: attribute code to determine the action to perform
!	ARG2: size of the attribute
!	ARG3: address of the user Access Control Entry
!	ARG4: address of the FIB
!
! IMPLICIT INPUTS:
!	CURRENT_MTL: address of the current file info block
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1 if successful
!	0 otherwise
!
! SIDE EFFECTS:
!	Appropriate action routine called, possible header modification may
!	result.
!
!--

BEGIN

MAP
	ACE		: REF BBLOCK,		! Address of the user ACE
	FIB		: REF BBLOCK;		! Address of the FIB

LOCAL
	ACL_CONTEXT,				! Address of ACL context cell
	DUMMY,					! Throw away cell
	LOCAL_STATUS;				! Status of attribute processing

! Switch context to the volume of the specified RVN.

SWITCH_VOLUME (.CURRENT_MTL[MTL_FID_RVN]);

! Determine where the ACL context is to go.

DUMMY = 0;
IF .FIB NEQ 0
THEN ACL_CONTEXT = FIB[FIB$L_ACLCTX]
ELSE ACL_CONTEXT = DUMMY;

! Dispatch to the appropriate action routine based upon the attribute code.

LOCAL_STATUS = (
    CASE .CODE FROM ATR$C_ADDACLENT TO ATR$C_READACE OF
    SET
	[ATR$C_ADDACLENT]:
	    BEGIN
	    CURRENT_MTL[MTL_NEW_ACL] = TRUE;
	    DUMMY = %X'00FFFFFF';
	    ACL_ADDENTRY (CURRENT_MTL[MTL_ACLFL], DUMMY, .COUNT, .ACE)
	    END;

	[ATR$C_DELETEACL]:
	    BEGIN
	    IF .CURRENT_MTL[MTL_ACLFL] EQL 0
	    THEN
		BEGIN
		CURRENT_MTL[MTL_ACLFL] = CURRENT_MTL[MTL_ACLFL];
		CURRENT_MTL[MTL_ACLBL] = CURRENT_MTL[MTL_ACLFL];
		END;
	    CURRENT_MTL[MTL_NEW_ACL] = TRUE;
	    ACL_DELETEACL (CURRENT_MTL[MTL_ACLFL], 0)
	    END;

	[ATR$C_READACL]:
	    BEGIN
	    IF .CURRENT_MTL[MTL_ACLFL] EQL CURRENT_MTL[MTL_ACLFL]
	    THEN
		BEGIN
		CH$FILL (0, .COUNT, .ACE);
		RETURN 1;
		END;
	    ACL_READACL (CURRENT_MTL[MTL_ACLFL], .ACL_CONTEXT, .COUNT, .ACE)
	    END;

	[ATR$C_ACLLENGTH]:
	    ACL_ACLLENGTH (CURRENT_MTL[MTL_ACLFL], .ACL_CONTEXT, .COUNT, .ACE);

	[INRANGE,OUTRANGE]:	SS$_BADATTRIB;

    TES);

IF .FIB NEQ 0 THEN FIB[FIB$L_ACL_STATUS] = .LOCAL_STATUS;

RETURN 1;

END;						! End of routine ACL_DISPATCH

%SBTTL 'ACL_BUILDACL - build in memory ACL from headers'
GLOBAL ROUTINE ACL_BUILDACL =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds the in core ACL from the file headers.
!
! CALLING SEQUENCE:
!	none
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CURRENT_MTL: for ACL queue head & header address
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1 if successful
!	LBC otherwise
!
! SIDE EFFECTS:
!	The in core ACL is created from the file headers.
!
!--

BEGIN

LOCAL
	STATUS,					! General status value
	RVN,					! RVN of current header
	ACE		: REF BBLOCK,		! Address of current ACE
	ACL_LENGTH,				! Size of header segment ACL
	ACL_POINTER	: REF BBLOCK,		! Pointer to current segment
	HEADER		: REF BBLOCK,		! Address of current header
	LOCAL_HEADER	: BBLOCK [512],		! Storage for file header
	EXT_HEADER_FID	: BBLOCK [6];		! Extension header file-ID

HEADER = .CURRENT_MTL[MTL_HEADER];
RVN = .CURRENT_MTL[MTL_FID_RVN];

! Build an in core ACL from the file headers

WHILE 1
DO
    BEGIN
    IF .HEADER[FH2$B_ACOFFSET]*2 LSS $BYTEOFFSET (FH2$W_CHECKSUM)
    THEN
	BEGIN
	ACE = .HEADER + .HEADER[FH2$B_ACOFFSET]*2;
	ACL_LENGTH = 0;
	DO
	    BEGIN
	    ACL_LENGTH = .ACL_LENGTH + .ACE[ACE$B_SIZE];
	    ACE = .ACE + .ACE[ACE$B_SIZE];
	    END
	UNTIL .ACE[ACE$B_SIZE] EQL 0
	   OR .ACE GEQA HEADER[FH2$W_CHECKSUM];
	ACL_POINTER = GET_ZERO_VM (ACL$C_LENGTH + .ACL_LENGTH);
	CH$MOVE (.ACL_LENGTH, .HEADER + .HEADER[FH2$B_ACOFFSET]*2,
			      ACL_POINTER[ACL$L_LIST]);
	ACL_POINTER[ACL$W_SIZE] = ACL$C_LENGTH + .ACL_LENGTH;
	INSQUE (.ACL_POINTER, .CURRENT_MTL[MTL_ACLBL]);
	END;
    CH$MOVE (6, HEADER[FH2$W_EXT_FID], EXT_HEADER_FID);
    IF .EXT_HEADER_FID[FID$W_NUM] EQL 0
    AND .EXT_HEADER_FID[FID$B_NMX] EQL 0
    THEN EXITLOOP;
    IF .EXT_HEADER_FID[FID$B_RVN] EQL 0
    THEN EXT_HEADER_FID[FID$B_RVN] = .RVN
    ELSE RVN = .EXT_HEADER_FID[FID$B_RVN];
    STATUS = READ_HEADER (EXT_HEADER_FID, LOCAL_HEADER);
    IF NOT .STATUS THEN RETURN .STATUS;
    HEADER = LOCAL_HEADER;
    END;

RETURN 1;

END;						! End of routine ACL_BUILDACL

%SBTTL 'ALLOC_PAGED - memory allocator for ACLSUBR'
GLOBAL ROUTINE ALLOC_PAGED (SIZE, DUMMY) =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is a simple jacket routine for GET_ZERO_VM.  It is
!	needed by the ACL management routines in ACLSUBR (from the XQP).
!
! INPUT PARAMETERS:
!	SIZE 		- Size of the block to allocate
!	DUMMY		- Unused by BACKUP.
!
! OUTPUT PARAMETERS:
!	NONE
!
! ROUINE VALUE:
!	Address of allocated area.
!
! SIDE EFFECTS:
!	If allocation fails, a fatal error is signalled.
!
!--

BEGIN

RETURN GET_ZERO_VM (.SIZE);

END;						! End of routine ALLOC_PAGED

%SBTTL 'DALLOC_PAGED - memory  deallocator for ACLSUBR'
GLOBAL ROUTINE DALLOC_PAGED (AREA, DUMMY) =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is a simple jacket routine for FREE_VM.  It is
!	needed by the ACL management routines in ACLSUBR (from the XQP).
!
! INPUT PARAMETERS:
!	AREA 		- Address of the block to deallocate
!	DUMMY		- Unused by BACKUP.
!
! OUTPUT PARAMETERS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	If deallocation fails, a fatal error is signalled.
!
!--

BEGIN

MAP
	AREA		: REF $BBLOCK;		! Address of block to free up

FREE_VM (.AREA[ACL$W_SIZE], .AREA);
RETURN 1;

END;						! End of routine DALLOC_PAGED

END
ELUDOM
