%TITLE 'Define global literals and data structures'
MODULE glbdat (	IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	Global data definitions; contains no instructions.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	CREATION DATE:	November, 1978


%SBTTL 'Revision History'
! MODIFIED BY:
!
!	041	REM00041	Ray Marshall	1-June-1984
!		Moved XPD_APPEND back into the SAVE/RESTORE area and
!		  conditionalized it and XPD_FLAGS for DSRPLUS only.  Also
!		  worked on some of the comments in that area.
!
!	040	KFA00040	Ken Alden	17-Apr-1984
!		For DSRPLUS:
!			Added a semicolon to the end of the command that
!			just preceeds 'OWN'.
!
!	039	REM00039	Ray Marshall	16-Feb -> 15-Mar-1984
!		Added one literal, one global variable, and two global bind
!		  structures containing filetype lists used in mapping the
!		  output filetype based on the input filetype.  These items
!		  are also used when the user defaults the input filetype.
!
!		  The literal is IPFTCT and indicates how many cells there are
!		  in the list of input filetypes in IPFTOP.  There are also as
!		  many cells in the list of output filetypes in OPFTOP.  The
!		  variable is IPFTYP and will contain the index into the above
!		  mentioned filetype lists.
!
!		Also added LFFCTX which is a global context cell used by the
!		  VMS RTL routine LIB$FIND_FILE.
!
!	038	REM00038	Ray Marshall	17-November-1983
!		Modified the external definition of ATABLE to use the new
!		  macro ATABLE_DEFINITION defined in ATCODE.REQ.
!
!	037	REM00037	Ray Marshall	7-November-1983
!		Doubled the size of ATABLE (added another 128 cells) to support
!		  the DEC multinational character set.  Also, changed it to a
!		  BYTE VECTOR.
!
!	036	KFA00036	Ken Alden	30-Sep-1983
!		Moved items around for save/restore fix.
!
!	035	REM00035	Ray Marshall	22-Jul-1983
!		Conditionalized TEMP_SIZE_MRA for DSRPLUS only.
!
!	034	REM00034	Ray Marshall	22-Jul-1983
!		Changed TEMP_MRA_SIZE to TEMP_SIZE_MRA so that it will be
!		  unique within the first 6 characters for the TOPS-20 linker.
!		Added KWTCBR for future addition of cross-book cross-reference
!		  support.
!
!	033	RER00033	Ron Randall	9-Jun-1983
!		For DSRPLUS:
!		Added flag to indicate when GETNUM is processing an entity.
!
!	032	RER00032	Ron Randall	11-May-1983
!		For DSRPLUS:
!		Added general-purpose temporary and hold mra and tsf.
!
!	031	KAD00031	Keith Dawson	9-May-1983
!		Remove support for .DX, .PX.
!
!	030	KFA00030	Ken Alden	14-Apr-1983
!		Alter headerlevel, pagesize to hyphenated strings.
!
!	029	KAD00029	Keith Dawson	13-Apr-1983
!		Added omitted DSRPLUS conditional on $keyword_tables.
!
!	028	RER00028	Ron Randall	06-Apr-1983
!		For DSRPLUS:
!		Added secondary topnote IOBs and footnote numbering variables.
!
!	027	REM00027	Ray Marshall	06-Apr-1983
!		Fix misspelled literal in a keyword table definition.
!
!	026	REM00023	Ray Marshall	Mar-1983
!		Added KWTRPN, KWTUDM, KWTPDM, & KWTPDP keyword table listheads.
!		Also built the predefined keyword table entries.
!
!	025	RER00025	Ron Randall	20-Mar-1983
!		Fine tuning of topnote globals.
!		Deleted passthrough flag.
!
!	024	KAD00024	Keith Dawson	20-Mar-1983
!		Removed LN01 conditionals and all references to .BIX
!		and .BTC files.
!
!	023	RER00023	Ron Randall	19-Mar-1983
!		For DSRPLUS:  Added definitions related to topnotes.
!
!	022	KFA00022	Ken Alden	18-Mar-1983
!		Changes made were to make SAVE/RESTORE related globals
!		visible to DSR.
!
!	021	KAD00021	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!--


%SBTTL 'Require files and libraries'
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! EQUATED SYMBOLS:
!
GLOBAL LITERAL
    rintes = %O'34' : UNSIGNED (8), ! Runoff internal excape character.
    !
    ! The global literal s_fmra is used in the module FNONLY. In that
    ! module, it is nesessary to reset the MRA size explicitly. The
    ! global literal assures that the size will be reset to the allocated
    ! value.
    !
    s_fmra = 500,
    !
    ! tnmra_size is similarly used in the module TPNOTE.
    !
    tnmra_size = 500,

%IF DSRPLUS %THEN
    !
    ! temp_size_mra is similarly used in any module.
    !
    temp_size_mra = 100,
%FI
    ipftct = %IF dsrplus %THEN 14;	! Number of input file types known.
			 %ELSE 12;	! If IPFTOP & OPFTOP are changed,
	     %FI			! this literal may also need changing.
!
! OWN STORAGE:
!
OWN
    pp_sca	: $h_r_sca_block;	! Used in PUSH_SCA, POP_SCA macros


%SBTTL 'Global storage'
!
! GLOBAL STORAGE:
!
GLOBAL
    r_cmd	: $rno_cmd;		! Command-line information.

GLOBAL
    lststf	: COUNTED_LIST,
    tsfa	: VECTOR [tsf_size],
    fs_allocate (mraa, 500),
    fs_allocate (fra,  500),
    fs_allocate (ira,  10),
    fs_allocate (xmra, 100),		! Used for <INDEX flag> processing.
    mra,				! Refers to MRAa or MRAb.
    !
    ! Descriptors for title and subtitle.
    !
    tittsf	: VECTOR [tsf_size],	! Titles
    sbttsf	: VECTOR [tsf_size],	! Subtitles
    !
    ! Storage for titles and subtitles
    !
    fs_allocate (titmra, max_title),	! Titles
    fs_allocate (sbtmra, max_title),	! Subtitles

    xtsf	: VECTOR [tsf_size],	! Used for <INDEX flag> processing.
    khar,				! Character storage
!+
! This is the beginning of the SAVE/RESTORE area ****************************
!
! ANY changes in this area should be reflected in SAVE.REQ as well.
!-
    flgt	: flag_table [flag_count],
    ttable	: COUNTED_LIST [max_tabs], ! Tab settings
    !
    ! The following definition macro is defined in ATCODE.REQ to be [256, BYTE].
    !
    atable	: atable_definition,	! Action table.  Used to identify
					! what type of action is to be taken
					! on encountering any given character.
    pdtstf	: VECTOR [pdt_size],
    save	: $save_block,		! This is the area where single
					! items are stored.
!+
! This marks the end of the SAVE block.
! Below is the additional area for SAVE ALL.
!-
    saveall	: $saveall_block,	! This area holds more items saved
					! 	only during a .SAVE ALL
    dattim	: VECTOR [6],		! Day and time pieces.
    hllist	: COUNTED_LIST [max_levels],
    ecc		: $ecc_blockvector,	! Entity counter / caption area.
%IF DSRPLUS %THEN
    !
    ! These DSRPLUS structures are updated by setting the default
    ! XPLUS attributes, .ENABLE XPLUS (attr,...).
    !
    xpd_flags,				! Default attributes flags.
    fs_allocate (xpd_append, xp_string_size), ! Default APPEND = string.
%FI
!+
! This is the end of the SAVE/RESTORE area **********************************
!-
    savstk	: savstack,		! Storage for the save/restore list.

%IF DSRPLUS %THEN
    !
    ! Topnote related globals.
    !
    topnot	: tn_definition,	! Topnote control table.
    tnrec	: tnrec_definition,	! Topnote file record control area.
    tniiob	: REF $XPO_IOB (),	! Internal topnote IOB.
    tnuiob	: REF $XPO_IOB (),	! User topnote IOB.
    tn0iob	: $XPO_IOB (),
    tn1iob	: $XPO_IOB (),
    tnpdt	: VECTOR [pdt_size],	! Save area for paragraph stuff.
    tnsca	: VECTOR [sca_size],	! Save area for SCA.
    tntsf	: VECTOR [tsf_size],	! Substitute TSF.
    tnhdd,
    tnhlch,
    tnhlsc,
    tnhlsk,
    tnhlst,
    tnhmra,
    tnhpdt,
    tnhrch,
    tnhtsf,
    fs_allocate (tnmra, tnmra_size),
    tn_ldd  	: VECTOR [3],		! Susbtitute display descriptor.
    tn_lchr	: VECTOR [3],		! Substitute .LIST bullet char.
    tn_list	: COUNTED_LIST [3],	! Substitute .LIST counters
    tn_llchr	: VECTOR [3],		! Substitute left character
    tn_lrchr	: VECTOR [3],		! Substitute right character
    tn_lskp	: VECTOR [3],		! Substitute .LIST el spacing.
    !
    ! Footnote numbering variables.
    !
    l_character,
    r_character,
    !
    ! The following structures are updated each time the
    ! ATTRIB routine is called.
    !
    xp_flags,				! Working attributes flags
    fs_allocate (xp_append, xp_string_size), ! Working APPEND = string
    fs_allocate (xp_sort,   xp_string_size), ! Working SORT   = string
    !
    ! General-purpose mra and tsf substitution aids.
    !
    hold_mra,				! Holds MRA address.
    fs_allocate (temp_mra, temp_size_mra), ! Substitute MRA.
    hold_tsf,				! Holds TSF address.
    temp_tsf	: VECTOR [tsf_size],	! Substitute TSF.
    !
    ! Flag to indicate when GETNUM is processing a $ or $$ entity.
    !
    processing_entity,			! Used by NEWSUB.
    entity_in_footnote,			! Used by FCIMRA.
%FI

    tsf		: REF VECTOR [tsf_size], ! Refers to TSFa or TSFb.
    fnesiz	: fn_ext_size_definition, ! Sizes of pending footnotes.
    fnisiz	: fn_int_size_definition, ! Number of TSF/MRA pairs in
					! each pending footnote.
    fnct	: fnct_definition,	! Footnote control table.
    gca		: gca_definition,	! Global control area.
    hct		: hct_definition,	! Header control area.
    ifstk	: ifstack,		! Stack for .IFs, and so on.
    fohlch,
    fohrch,
    fohdd,
    fohlsc,
    fohlsk,
    fohlst,
    fohpdt,
    fohmra,
    fohtsf,
    foorec	: foorec_definition,
    fs_allocate (foomra, s_fmra),
    !
    ! NOTE:  An RSX IOB gets 80 (120 octal) words allocated to it.
    !
    fooiob	: REF $XPO_IOB (),	! Used for processing footnotes.
    fotiob	: REF $XPO_IOB (),
    fo1iob	: $XPO_IOB (),		! Never referred to directly
    fo2iob	: $XPO_IOB (),		! Never referred to directly
    foopdt	: VECTOR [pdt_size],	! Save area for paragraph stuff.
    foosca	: VECTOR [sca_size],	! Save area for SCA
    f_list	: COUNTED_LIST [3],	! Substitute .LIST counters
    f_lchr	: VECTOR [3],		! Substitute .LIST bullet char.
    f_lskp	: VECTOR [3],		! Substitute .LIST EL spacing.
    f_llchr	: VECTOR [3],		! Substitute left character
    f_lrchr	: VECTOR [3],		! Substitute right character
    f_ldd  	: VECTOR [3],		! Susbtitute display descriptor.
    footsf	: VECTOR [tsf_size],	! Substitute TSF.
    irac	: irac_definition,
    npagen	: page_definition,	! Page number of next page
    spager	: BLOCK [max_page_ranges * page_sct_size], ! List of starting pages
    tpager	: BLOCK [max_page_ranges * page_sct_size], ! List of terminating pages.
    pagen	: page_definition,	! Page number of current page
    brnoob	: $XPO_IOB (),		! IOB for binary index and TOC output.
    brniob	: $XPO_IOB (),		! IOB for binary crossref input.
!!    ndxpol	: INITIAL (0),		! Address of indexing pool.
!!    ndxsge	: INITIAL (0),		! End of current segment.
!!    ndxsgf	: INITIAL (0),		! No storage in current segment.
!!    xtncnt,				! Number of XTNTAB entries.
!!    xtnlsp	: INITIAL (0),
!!    xtnlsx	: INITIAL (0),
!!    xtnpol	: INITIAL (0),
!!    xtnsgp	: INITIAL (0),
!!    xtntab	: REF xtntab_define,	! List of transaction numbers assigned
!!    xpagen	: REF xpagen_define,	! Page number associated with transaction number.
    sca		: sca_definition,	! Scanner control area.
    scalit	: VECTOR [sca_case_size], ! Save case rules here during literal
					! processing.
    numprm	: numprm_define,	! Work area.
    fs_allocate (fs01, 150),		! General purpose character string
					! work area.
    outopt	: outopt_define,	! Output options.
    frmstd,				! Depth of FRMSTK (0 means empty).
    frmstk	: form_stack,
    hlc		: hlc_definition,
    hldsp	: VECTOR [max_levels],
    lstchr	: REF VECTOR,
    lstlch	: REF VECTOR,
    lstrch	: REF VECTOR,
    lstldd	: REF VECTOR,
    lstcnt	: REF COUNTED_LIST,
    lstskp	: REF VECTOR,
    lchlst	: VECTOR [nmlst_maxsize],
    rchlst	: VECTOR [nmlst_maxsize],
    lddlst	: VECTOR [nmlst_maxsize],
    chlst	: VECTOR [nmlst_maxsize],
    nmlst	: number_list,
    pdt		: REF pdt_definition,
    phan	: phan_definition,
    skplst	: VECTOR [nmlst_maxsize],
    iobstk	: BLOCKVECTOR [max_require, iob$k_length],
    !
    ! Active input file IOBs saved in IOBSTK.
    !
    rneiob	: REF $XPO_IOB (),	! Storage for primary input IOB.
    rnaiob	: REF $XPO_IOB (),	! Storage for output IOB.
    rniiob	: REF $XPO_IOB (),	! Input IOB currently active.
    rnoiob	: REF $XPO_IOB (),	! Output file IOB
					! (i.e., for generated document).
    tteiob	: $XPO_IOB (),		! Standard error file (usually TTY:).
    ttiiob	: $XPO_IOB (),		! Standard input file (usually TTY:).
    ttoiob	: $XPO_IOB (),		! Standard output file (usually TTY:).
    tsiiob	: $XPO_IOB (),		! Standard input file; but STREAM,
					! not RECORD.
    !
    ! Declare a string descriptor that will point to the "resultant" file
    ! name string when any file operation fails.
    !
    ffname	: $STR_DESCRIPTOR (CLASS = DYNAMIC),
    !
    ! Declare a field to contain a secondary error code.  This field will be
    ! stuffed with a code explaining why the requested operation against the
    ! file specified in FFNAME failed.  This error code will be defined by the
    ! the I/O system being used (i.e. XPORT or RMS).
    !
    semcod,
    vrcnt,				! Number of variables.
    vrname	: vrname_def,		! The variable names.
    vrlng	: vrlng_def,		! The length of the names.
    vrbool	: vrbool_def,		! TRUE/FALSE value.
    vrfflg	: vrfflg_def,		! FALSE flag.
    vrtflg	: vrtflg_def,		! TRUE flag.
    vrsrc	: vrsrc_def,		! Source of variable definition.

%IF %BLISS (BLISS32) %THEN
    lffctx,		! Global context cell used by LIB$FIND_FILE
%FI
    ipftyp;		! Will contain the index into the following table which
			! identifies what the input file's extension field is.

! The following two lists of file types determine which output file type
! results from an input file type.  The two lists must remain in order since
! translation is done by searching down one list and using the computed index
! to fetch the result from the other list.  They are used in RUNOFF.BLI for
! the VMS implementation and CLH.BLI for the TOPS-20 implementation.
!
!	IPFTCT (above) must indicate the length of each table.
!
GLOBAL BIND
    ipftop = PLIT (	! InPut File Type OPtions

		 CH$PTR(UPLIT('.RNO')),	!Produces .MEM
%IF DSRPLUS %THEN
		 CH$PTR(UPLIT('.RTB')), !Produces .MET
%FI
		 CH$PTR(UPLIT('.RNT')), !Produces .MEC
		 CH$PTR(UPLIT('.RNX')),	!Produces .MEX
		 CH$PTR(UPLIT('.RND')), !Produces .DOC
		 CH$PTR(UPLIT('.RNH')), !Produces .HLP
		 CH$PTR(UPLIT('.RNB')), !Produces .BLB
		 CH$PTR(UPLIT('.RNC')), !Produces .CCO
		 CH$PTR(UPLIT('.RNE')), !Produces .ERR
		 CH$PTR(UPLIT('.RNL')), !Produces .PLM
		 CH$PTR(UPLIT('.RNM')), !Produces .MAN
		 CH$PTR(UPLIT('.RNP')),	!Produces .OPR
		 CH$PTR(UPLIT('.RNS'))  !Produces .STD
%IF DSRPLUS %THEN,
		 CH$PTR(UPLIT('.***'))	!Wild card file extension
%FI
					): VECTOR,

    opftop = PLIT (	! OutPut File Type OPtions

		  CH$PTR(UPLIT('.MEM')), !From .RNO
%IF DSRPLUS %THEN
		  CH$PTR(UPLIT('.MET')), !From .RTB
%FI
		  CH$PTR(UPLIT('.MEC')), !From .RNT
		  CH$PTR(UPLIT('.MEX')), !From .RNX
		  CH$PTR(UPLIT('.DOC')), !From .RND
		  CH$PTR(UPLIT('.HLP')), !From .RNH
		  CH$PTR(UPLIT('.BLB')), !From .RNB
		  CH$PTR(UPLIT('.CCO')), !From .RNC
		  CH$PTR(UPLIT('.ERR')), !From .RNE
		  CH$PTR(UPLIT('.PLM')), !From .PNL
		  CH$PTR(UPLIT('.MAN')), !From .RNM
		  CH$PTR(UPLIT('.OPR')), !From .RNP
		  CH$PTR(UPLIT('.STD'))  !From .RNS
%IF DSRPLUS %THEN,
		  CH$PTR(UPLIT('.MEM'))  !From .***
%FI
					 ): VECTOR;
%IF DSRPLUS %THEN
!	Various keyword table listheads.
GLOBAL
    kwtrpn,		! .ReferencePoint Names
    kwtcbr,		! Cross-Book crossReference structures
    kwtudm;		! User Defined Macros (counter variable names)

    $keyword_table (kwtpdm, G,	! PreDefined Macros ("$$" entity names)
	(APPENDIX,	kw$pdm_appendix),
	(CHAPTER,	kw$pdm_chapter),
	(CURRENT_FILE,	kw$pdm_current_file),
	(DATE,		kw$pdm_date),
	(EXAMPLE,	kw$pdm_example),
	(FIGURE,	kw$pdm_figure),
	(FOOTNOTE,	kw$pdm_footnote),
	(HEADER_LEVEL,	kw$pdm_header_level),
	(MARGIN,	kw$pdm_margin),
	(MARK,		kw$pdm_mark),
	(PAGE,		kw$pdm_page),
	(PAGE_SIZE,	kw$pdm_page_size),
	(ROOT_FILE,	kw$pdm_root_file),
	(RUNNING,	kw$pdm_running),
	(SECTION,	kw$pdm_section),
	(SPACING,	kw$pdm_spacing),
	(TABLE,		kw$pdm_table),
	(TIME,		kw$pdm_time)
		    );

    $keyword_table (kwtpdp, G,	! PreDefined Parameters ("$$" entity names)
	(DAY,		kw$pdp_day),
	(HOUR,		kw$pdp_hour),
	(LEFT,		kw$pdp_left),
	(LENGTH,	kw$pdp_length),
	(MINUTE,	kw$pdp_minute),
	(MONTH,		kw$pdp_month),
	(RIGHT,		kw$pdp_right),
	(SECOND,	kw$pdp_second),
	(WIDTH,		kw$pdp_width),
	(YEAR,		kw$pdp_year)
		    );
%FI

GLOBAL BIND 				! Flag table search order.
    fltso = PLIT (

%IF DSRPLUS %THEN
		NPX_FLAG,		! <Nopermute Index flag>
%FI
		SUB_FLAG,		! <SUBSTITUTE flag>
		QUO_FLAG,		! <QUOTE flag>
		UPP_FLAG,		! <UPPERCASE flag>
		LOW_FLAG,		! <LOWERCASE flag>
		CAP_FLAG,		! <CAPITALIZE flag>
		UND_FLAG,		! <UNDERLINE flag>
		BLD_FLAG,		! <BOLD flag>
		SPA_FLAG,		! <SPACE flag>
		IND_FLAG,		! <INDEX flag>
		HYP_FLAG,		! <HYPHENATION flag>
		BRK_FLAG,		! <BREAK flag>
		PER_FLAG,		! <PERIOD flag>
		OVR_FLAG)		! <OVERSTRIKE flag>
		: VECTOR;

END					! End of module.
ELUDOM
