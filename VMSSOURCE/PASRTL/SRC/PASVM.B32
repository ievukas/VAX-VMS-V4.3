MODULE PAS$$VM ( %TITLE 'Allocate/deallocate virtual memory'
		IDENT = '1-001'			! File: PASVM.B32 Edit: SBL1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains procedures to allocate and deallocate
!	virtual memory.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Linkages, externals, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$$GET_VM: CALL_VM,			! Allocate virtual memory
    PAS$$FREE_VM: NOVALUE;			! Deallocate virtual memory

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!    NONE

%SBTTL 'PAS$$GET_VM - Allocate virtual memory'
GLOBAL ROUTINE PAS$$GET_VM (
	PFV: REF $PAS$PFV_FILE_VARIABLE, 	! File variable
	LENGTH					! Length to allocate
    ): CALL_VM =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure allocates a block of virtual memory and returns
!	a pointer to the block as its function value.  The memory allocated
!	is zero-filled.
!
! CALLING SEQUENCE:
!
!	block_addr.wa.v = PAS$$GET_VM (PFV.rr.r, LENGTH.rl.v)
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	LENGTH		- The length in bytes of the block to allocate.
!			  Must not be greater than 65535.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	A pointer to the allocated block.
!
! SIDE EFFECTS:
!
!	Allocates virtual memory.
!
! SIGNALLED ERRORS:
!
!	INSVIRMEM - Insufficient virtual memory
!
!--

    BEGIN

    LOCAL
	BLOCK_ADDR;			! Address of allocated block

    IF .LENGTH GTRU 65535
    THEN
	$PAS$BUGCHECK (BUG_BADVMSIZE);

    IF NOT LIB$GET_VM (LENGTH, BLOCK_ADDR)
    THEN
	$PAS$IO_ERROR (PAS$_INSVIRMEM,0);

    CH$FILL (0, .LENGTH, .BLOCK_ADDR);	! Zero-fill

    RETURN .BLOCK_ADDR;

    END;					! End of routine PAS$$GET_VM

!<BLF/PAGE>

%SBTTL 'PAS$$FREE_VM - Deallocate virtual memory'
GLOBAL ROUTINE PAS$$FREE_VM (
	LENGTH,					! Length to allocate
	BLOCK_ADDR: REF VECTOR [, LONG]		! Address of block to deallocate
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure deallocates a block of virtual memory.
!
! CALLING SEQUENCE:
!
!	CALL PAS$$FREE_VM (LENGTH.rl.v, BLOCK_ADDR.ma.r)
!
! FORMAL PARAMETERS:
!
!	LENGTH		- The length in bytes of the block to deallocate.
!
!	BLOCK_ADDR	- The address of the block to deallocate
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Deallocates virtual memory.
!
! SIGNALLED ERRORS:
!
!	BUGCHECK
!
!--

    BEGIN

    IF NOT LIB$FREE_VM (LENGTH, BLOCK_ADDR [0])
    THEN
	$PAS$BUGCHECK (BUG_FREEVMFAIL);

    BLOCK_ADDR [0] = 0;		! Invalidate pointer

    RETURN;

    END;					! End of routine PAS$$FREE_VM

!<BLF/PAGE>

END						! End of module PAS$$VM

ELUDOM
