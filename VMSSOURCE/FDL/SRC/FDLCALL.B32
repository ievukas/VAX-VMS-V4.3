%TITLE	'VAX-11 FDL Utilities'
MODULE	FDLCALL	( IDENT='V04-000',
    		ADDRESSING_MODE ( EXTERNAL = GENERAL ),
    		ADDRESSING_MODE ( NONEXTERNAL = GENERAL ),
		OPTLEVEL=3
		) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 FDL Utilities
!
! Abstract:
!		Callable routines
!
! Contents:
!		FDL$CREATE
!		FDL$PARSE
!		FDL$RELEASE
!		FDL$GENERATE
!		HANDLER
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Keith B Thompson	Creation Date	June-81
!
!
! Modified by:
!
!		V03-015 JWT0192		Jim Teague		 2-Aug-1984
!			RRB0019 clears the "valid stmt flag" on entry to all
!			routines in this module.  When FDL$CREATE calls
!			FDL$PARSE without a statement number argument, the
!			flag is cleared and remains off on return to 
!			FDL$CREATE, even if it was specified on entry to 
!			FDL$CREATE.
!
!		V03-014 RRB0019		Rowland R. Bradley	17-Apr-1984
!			Clear valid statement flag upon entry to all major
!			entry routines.  This fixes an elusive bug which
!			appears on multiple calls to the these routines.
!
!		V03-013	RAS0290		Ron Schaefer		10-Apr-1984
!			Fix interface to FDL$GENERATE so that the output
!			string descriptor/return length are processed
!			correctly for return FDL strings.
!
!		V03-012	KFH0012		Ken Henderson		 8 Oct 1983
!			Recomment call to FDL$RELEASE
!			in FDL$CREATE until nasty bug
!			can be fixed in FDL$RELEASE!
!
!		V03-011	KFH0011		Ken Henderson		23 Aug 1983
!			Uncomment call to FDL$RELEASE
!			in FDL$CREATE.
!			Fix calls to GET_VM and FREE_VM.
!			Fix accvio if FDL$GL_PCALL is 0.
!
!		V03-010	KFH0010		Ken Henderson		29 Jul 1983
!			Fixed arg checking in FDL$GENERATE
!			Check status of calls to LIB$...
!
!		V03-009	KFH0009		Ken Henderson		26 Apr 1983
!			Add [retlen] to FDL$GENERATE call.
!
!		V03-008	KFH0008		Ken Henderson		14 Apr 1983
!			Add [retlen],[sts],[stv] parameters
!			to FDL$CREATE call.
!
!		V03-007	KFH0007		Ken Henderson		22 Mar 1983
!			Temporarily comment out the call to
!			FDL$RELEASE in FDL$CREATE - to let
!			regression tests of CJF work.
!
!		V03-006	KFH0006		Ken Henderson		6 Jan 1983
!			Fixed allocation of NAM block in
!			FDL$CREATE
!
!		V03-005	KFH0005		Ken Henderson		5 Jan 1983
!			Moved alloc/dealloc of FDL$AB_AREA_BKZ
!			to FDL$$CHECK_BLOCKS in FDLGEN.B32
!
!		V03-004	KFH0004		Ken Henderson		4 Jan 1983
!			Added allocation and deallocation
!			of FDL$AB_AREA_BKZ in FDL$RELEASE
!
!		V03-003	KFH0003		Ken Henderson		22 Nov 1982
!			Mods to FDL$PARSE to support
!			fdl-dflt-spc and stmnt-num
!			Mods to FDL$CREATE to support
!			stmnt-num
!			Fixed call to LIB$SIG_TO_RET
!			Finished FDL$RELEASE, FDL$GENERATE
!
!		V03-002	KFH0002		Ken Henderson		6 Oct 1982
!			Added FDL$AB_PARSED_RAB
!			Changed FDL$$PARSE to FDL$PARSE
!			Added FDL$GENERATE, FDL$RELEASE
!
!		V03-001	KFH0001		Ken Henderson		26 March 1982
!			Added calls to LIB$ANALYZE_SDESC to generalize string
!			handling; and added call to LIB$SCOPY_DXDX to move
!			the result string to the output also add buffer for
!			upcasing to.
!
!****


PSECT
	OWN	= _FDL$OWN	(PIC),
	GLOBAL	= _FDL$GLOBAL	(PIC),
	PLIT	= _FDL$PLIT	(SHARE,PIC),
	CODE	= _FDL$CODE	(SHARE,PIC);

LIBRARY	'SYS$LIBRARY:STARLET';
REQUIRE	'SRC$:FDLUTIL';
REQUIRE	'LIB$:FDLPARDEF';

EXTERNAL ROUTINE
	LIB$ANALYZE_SDESC,
	LIB$SCOPY_DXDX,
	LIB$SCOPY_R_DX,
	LIB$ESTABLISH,
	LIB$SIG_TO_RET,
	LIB$GET_VM,
	LIB$FREE_VM,
	LIB$TPARSE,
	FDL$$CHECK_BLOCKS,
	FDL$$GEN_SPEC,
	FDL$$GET_VM,
	FDL$$FREE_VM,
	FDL$$INIT_PARSE		: NOVALUE,
	FDL$$FINISH_PARSE,
	FDL$$RMS_OPEN_ERROR	: NOVALUE;

FORWARD ROUTINE
	FDL$PARSE,
	FDL$RELEASE,
	HANDLER;

EXTERNAL
	FDL$AB_CTRL		: BLOCK [ ,BYTE ],
	FDL$AB_BLOCK_BLK	: VECTOR [ 4,LONG ],
	FDL$GL_PCALL,
	FDL$GL_INVBLK_PTR,
	FDL$GL_STNUMPTR,
	FDL$GL_MAXLINE,
	FDL$AB_OUT_STRING	: REF DESC_BLK,
	FDL$AB_FDL_STRING	: DESC_BLK,
	FDL$AB_LINE		: DESC_BLK,
	FDL$AB_UPCASED		: DESC_BLK,
	FDL$AB_KEY_TABLE,
	FDL$AB_STATE_TABLE,
	FDL$AB_TPARSE_BLOCK	: BLOCK [ ,BYTE ];

DEFINE_ERROR_CODES;

GLOBAL
	FDL$AB_FDL_RAB		: $RAB_DECL,
	FDL$AB_PARSED_FAB	: REF BLOCK [ ,BYTE ],
	FDL$AB_PARSED_RAB	: REF BLOCK [ ,BYTE ];

GLOBAL BIND
	FDL$AB_GENFAB = FDL$AB_PARSED_FAB : REF BLOCK [ ,BYTE ],
	FDL$AB_GENRAB = FDL$AB_PARSED_RAB : REF BLOCK [ ,BYTE ];

%SBTTL	'FDL$CREATE'
GLOBAL ROUTINE FDL$CREATE  =
!++
!
! Functional Description:
!
!	This routine calls FDL$PARSE to parse the FDL spec and then
!	creates the file and closes it.  It is called by CREATE/FDL.
!
! Calling Sequence:
!
!	fdl$create(	fdl_desc
!			[,file_name]
!			[,default_name]
!			[,result_name]
!			[,fid_block]
!			[,flags]
!			[,stmnt-num]
!			[,retlen]
!			[,sts]
!			[,stv] )
!
! Input Parameters:
!
!	fdl_desc	- descriptor of the fdl file name string (required)
!	file_name	- descriptor file name to overide the name specified
!			  in the fdl file (optional)
!	default_name	- descriptor default file name to overide the default
!			  name specified in the fdl file (optional)
!
!	flags		- address of flags longword (optional)
!		FDL$V_SIGNAL		signal errors instead of returning
!		FDL$V_FDL_STRING	input fdl-spec is a char string
!		FDL$V_$CALLBACK		used by EDF
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	result_name	- descriptor to receive the file name which was created
!			  (optional)
!
!	fid_block	- address of a 3 longword used block to receive the fid
!			  of the file created (optional)
!
!	stmnt-num	- address of longword to recieve statement
!			  number (optional)
!
!	retlen		- address of longword to recieve length of resultname
!			  string (optional)
!
!	sts		- address of longword to recieve FAB$L_STS from $create
!
!	stv		- address of longword to recieve FAB$L_STV from $create
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	success or error code
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER;

    OWN
	CREATE_DESC	: DESC_BLK;

    LOCAL
	ESA_ADDR,
	RSA_ADDR,
	COUNT,
	FLAGS		: REF BLOCK [ ,BYTE ],
	CREATE_FAB	: REF BLOCK [ ,BYTE ],
	CREATE_RAB	: REF BLOCK [ ,BYTE ],
	NAME_BLOCK	: REF BLOCK [ ,BYTE ],
	XSTATUS		: LONG,
	STATUS		: LONG;

    BIND
	STATUS_CODE	= STATUS : BLOCK [ 4,BYTE ];

    ! Set up handler to control errors
    !
    LIB$ESTABLISH ( HANDLER );

    ! Clear the valid stmnt flag as a fix...  should always be cleared on entry
    !
    FDL$AB_CTRL [ FDL$V_STVALID ] = _CLEAR;

    ! Check the validity of the call
    !
    ! Get the number of arguments
    !
    COUNT = ACTUALCOUNT();

    ! Check if the number is legal ie. 1 thru 10
    !
    IF ( .COUNT LSS 1 ) OR ( .COUNT GTR 10 )
    THEN
	RETURN FDL$_ILL_ARG;

    ! Get flags argument - to pass it on
    !
    IF ( .COUNT GTR 5 )
    THEN
	FLAGS = ACTUALPARAMETER (6)
    ELSE
	FLAGS = 0;

    ! Get stmnt-num argument
    !
    IF .COUNT GTR 6
    THEN
	FDL$GL_STNUMPTR = ACTUALPARAMETER (7)
    ELSE
	FDL$GL_STNUMPTR = 0;

    IF .FDL$GL_STNUMPTR NEQU 0
    THEN
	FDL$AB_CTRL [ FDL$V_STVALID ] = _SET
    ELSE
	FDL$AB_CTRL [ FDL$V_STVALID ] = _CLEAR;

    BEGIN

    LOCAL 
	FDL_DESC_PTR;

    
    ! The first argument should be the FDL file spec.
    !
    FDL_DESC_PTR = ACTUALPARAMETER(1);

    ! Parse the FDL file
    !
    IF NOT ( STATUS = FDL$PARSE( .FDL_DESC_PTR,CREATE_FAB,CREATE_RAB,.FLAGS,0,
				  .FDL$GL_STNUMPTR ) )
    THEN

	! If there was a warning just signal it and try to create the file
	! else return (error and severe)
	!
	IF ( .STATUS_CODE [ STS$V_SEVERITY ] EQLU STS$K_WARNING )
	THEN
	    SIGNAL( .STATUS )
	ELSE
	    RETURN .STATUS

    END;


    ! See if the a second parameter was given. If so the this is the name
    ! to be used for the created file.
    !
    IF ( .COUNT GTR 1 )
    THEN
	BEGIN

	LOCAL	NAME_DESC : REF DESC_BLK;

	NAME_DESC = ACTUALPARAMETER(2);

	IF ( .NAME_DESC NEQ 0 )
	THEN
	    BEGIN

	    LOCAL
		    LENGTH	: WORD,
		    ADDR	: LONG;

	    ! Allow for wierd strings (like VARYING or byte-arrays)
	    !
	    RET_ON_ERROR( LIB$ANALYZE_SDESC( .NAME_DESC,LENGTH,ADDR ) );

	    IF ( .LENGTH NEQ 0 ) AND ( .ADDR NEQ 0 )
	    THEN
		BEGIN

		! If a file name was given to replace any given in the FDL spec.
		!
		CREATE_FAB [ FAB$B_FNS ] = .LENGTH;
		CREATE_FAB [ FAB$L_FNA ] = .ADDR;

		END;
	    END;
	END;

    ! See if the 3rd parameter was given. If so this is the default name
    ! to be used for the created file.
    !
    IF ( .COUNT GTR 2 )
    THEN
	BEGIN

	LOCAL
	    DEFAULT_DESC : REF DESC_BLK;

	DEFAULT_DESC = ACTUALPARAMETER(3);

	IF ( .DEFAULT_DESC NEQ 0 )
	THEN
	    BEGIN

	    LOCAL
		    LENGTH	: WORD,
		    ADDR	: LONG;

	    ! Allow for wierd strings (like VARYING or byte-arrays)
	    !
	    RET_ON_ERROR( LIB$ANALYZE_SDESC( .DEFAULT_DESC,LENGTH,ADDR ) );

	    IF ( .LENGTH NEQ 0 ) AND ( .ADDR NEQ 0 )
	    THEN
		BEGIN

		! If a default name was given, put it in the FAB as well.
		!
		CREATE_FAB [ FAB$B_DNS ] = .LENGTH;
		CREATE_FAB [ FAB$L_DNA ] = .ADDR;

		END;
	    END;
	END;

    ! Build a name block for the fab returned by fdl$$parse
    !
    ! Allocate the space for the name block and buffers:
    !
    !		|-----------------------|
    !		|	nam		| nam$k_bln
    !		|-----------------------|
    !		|  expanded str buffer	| esa_buf_siz
    !		|-----------------------|
    !		| resultant str buffer	| rsa_buf_siz
    !		-------------------------
    !
    !
    NAME_BLOCK = FDL$$GET_VM( NAM$K_BLN );
    ESA_ADDR = FDL$$GET_VM( ESA_BUF_SIZ );
    RSA_ADDR = FDL$$GET_VM( RSA_BUF_SIZ );

    ! Init the name block
    !
    $NAM_INIT ( NAM = .NAME_BLOCK,
		ESA = .ESA_ADDR,
		ESS = ESA_BUF_SIZ,
		RSA = .RSA_ADDR,
		RSS = RSA_BUF_SIZ );

    ! Connect the name block
    !
    CREATE_FAB [ FAB$L_NAM ] = .NAME_BLOCK;

    ! Create the file
    !
    ! Errors will be create error
    !
    CREATE_FAB [ FAB$L_CTX ] = FDL$_CREATE;

    ! If this is from dcl then set the error handler to signal fdl error
    ! and the rms error else return normally
    !
    IF .FDL$AB_CTRL [ FDL$V_DCL ]
    THEN
	STATUS = $CREATE( FAB=.CREATE_FAB,ERR=FDL$$RMS_OPEN_ERROR )
    ELSE
	STATUS = $CREATE( FAB=.CREATE_FAB );

    ! Output the STS if it's required.
    !
    IF .COUNT GTR 8
    THEN
	BEGIN

	LOCAL
	    STS		: LONG;

	STS	= ACTUALPARAMETER (9);

	IF .STS NEQ 0
	THEN

	    .STS = .CREATE_FAB [ FAB$L_STS ];

	END;

    ! Output the STV if it's required.
    !
    IF .COUNT GTR 9
    THEN
	BEGIN

	LOCAL
	    STV		: LONG;

	STV	= ACTUALPARAMETER (10);

	IF .STV NEQ 0
	THEN

	    .STV = .CREATE_FAB [ FAB$L_STV ];

	END;

    ! If there was an error creating the file return fdl$_create to the user
    !
    IF NOT .STATUS
    THEN
	STATUS = FDL$_CREATE;

    $CLOSE( FAB=.CREATE_FAB );

    ! See if the 4th parameter was given. If so return the result name.
    ! NOTE: This is where the user can get access to allocated memory
    !
    IF ( .COUNT GTR 3 )
    THEN
	BEGIN

	LOCAL
	    RETLEN	: LONG,
	    RESULT_DESC : REF DESC_BLK,
	    TEMP_DESC	: DESC_BLK  PRESET ( [ DSC$B_CLASS ] = DSC$K_CLASS_S,
	    				     [ DSC$B_DTYPE ] = DSC$K_DTYPE_T );

	RESULT_DESC = ACTUALPARAMETER(4);

	IF .RESULT_DESC NEQ 0
	THEN
	    BEGIN

	    IF ..RESULT_DESC NEQ 0
	    THEN
		BEGIN

		! If a result name desc was given, stuff it with
		! the best name for file which was created (or attempted)
		!
		! First try the resultant string
		!
		IF .NAME_BLOCK [ NAM$B_RSL ] NEQU 0
		THEN
		    BEGIN

		    TEMP_DESC [ DSC$W_LENGTH ] = .NAME_BLOCK [ NAM$B_RSL ];
		    TEMP_DESC [ DSC$A_POINTER ] = .NAME_BLOCK [ NAM$L_RSA ];

		    RET_ON_ERROR( LIB$SCOPY_DXDX( TEMP_DESC,.RESULT_DESC ) )

		    END

		! Next try the expanded string
		!
		ELSE IF .NAME_BLOCK [ NAM$B_ESL ] NEQU 0
		THEN
		    BEGIN

		    TEMP_DESC [ DSC$W_LENGTH ] = .NAME_BLOCK [ NAM$B_ESL ];
		    TEMP_DESC [ DSC$A_POINTER ] = .NAME_BLOCK [ NAM$L_ESA ];

		    RET_ON_ERROR( LIB$SCOPY_DXDX( TEMP_DESC,.RESULT_DESC ) )

		    END

		! If all else fails use the name string
		!
		ELSE
		    BEGIN

		    TEMP_DESC [ DSC$W_LENGTH ] = .CREATE_FAB [ FAB$B_FNS ];
		    TEMP_DESC [ DSC$A_POINTER ] = .CREATE_FAB [ FAB$L_FNA ];

		    RET_ON_ERROR( LIB$SCOPY_DXDX( TEMP_DESC,.RESULT_DESC ) )

		    END;

		! Output the length of the resultname string if required.
		!
		IF .COUNT GTR 7
		THEN
		    BEGIN

		    RETLEN	= ACTUALPARAMETER (8);

		    IF .RETLEN NEQ 0
		    THEN
			BEGIN

			.RETLEN	= .TEMP_DESC [ DSC$W_LENGTH ];

			END;
		    END;
		END;
	    END;
	END;

    ! If the caller wants a file id get it
    !
    IF ( .COUNT GTR 4 )
    THEN
	BEGIN

	LOCAL FID_BLOCK : REF VECTOR [,LONG ];

	FID_BLOCK = ACTUALPARAMETER(5);

	IF .FID_BLOCK NEQ 0
	THEN
	    BEGIN

	    FID_BLOCK [0] = .NAME_BLOCK [ NAM$W_FID_NUM ];
	    FID_BLOCK [1] = .NAME_BLOCK [ NAM$W_FID_SEQ ];
	    FID_BLOCK [2] = .NAME_BLOCK [ NAM$W_FID_RVN ];

	    END;
	END;

    ! Deallocate the memory used during the parse
    !
!*************************************************************************
!
! THIS CALL TO FDL$RELEASE IS THE MOST TROUBLESOME PART OF FDL$CREATE!!!
! FDL$RELEASE CONTAINS AN OBSCURE ERROR IN USING LIB$FREE_VM AND IT
! MUST BE FIXED FOR FT2.  UNTIL THEN, FDL$CREATE WILL WORK FINE BY JUST
! NOT CALLING FDL$RELEASE - AND FDL$CREATE GETS VERY HEAVY USE.
!
!*************************************************************************
!    RET_ON_ERROR ( FDL$RELEASE( CREATE_FAB,CREATE_RAB,.FLAGS ) );
!*************************************************************************

    RETURN .STATUS;

    END;


%SBTTL	'FDL$PARSE'
GLOBAL ROUTINE	FDL$PARSE =
!++
!
! Functional Description:
!
!	This routine parses an FDL spec (either file or string) and stuffs
!	the RMS control blocks with the information.
!
! Calling Sequence:
!
!	fdl$parse(	fdl_spec,
!			fdl_fab_pointer,
!			fdl_rab_pointer
!			[,flags]
!			[,dflt-fdl-spc]
!			[,stmnt-num] )
!
! Input Parameters:
!
!	fdl_spec	- descriptor of the input fdl file name string (required)
!
!	flags		- address of flags longword (optional)
!		FDL$V_SIGNAL		signal errors instead of returning
!		FDL$V_FDL_STRING	input fdl-spec is a char string
!		FDL$V_DEFAULT_STRING	input dflt-fdl-spc is a char string
!		FDL$V_$CALLBACK		used by EDF (FDL$PARSE only)
!
!	dflt-fdl-spc	- descriptor of the default FDL SPEC (optional)
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	fab_pointer	- address of a longword to receive the address of the
!			  filled in fab (required)
!
!	rab_pointer	- address of a longword to receive the address of the
!			  filled in rab (required)
!
!	stmnt-num	- address of longword to recieve statement
!			  number (optional)
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	fdl$$get_vm
!	lib$get_vm
!	lib$free_vm
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER;

    LOCAL
	PASS		: BYTE,
	COUNT		: BYTE,
	LENGTH		: WORD,
	ADDR,
	FLAGS		: REF BLOCK [ ,BYTE ],
	FDL_FAB_PTR,
	BYTES		: LONG,
	FAB_POINTER,
	RAB_POINTER,
	STATUS,
	USERBUF,
	TMP_SPEC	: REF DESC_BLK,
	DFLT_SPEC	: REF DESC_BLK,
	FDL_SPEC	: REF DESC_BLK;

    ! Set up handler to control errors
    !
    LIB$ESTABLISH ( HANDLER );

    ! Clear the valid stmnt flag as a fix...  should always be cleared.
    !
    FDL$AB_CTRL [ FDL$V_STVALID ] = _CLEAR;


    ! Get the number of arguments and see if it's right
    !
    COUNT = ACTUALCOUNT ();

    IF ( ( .COUNT LSS 3 ) OR ( .COUNT GTR 6 ) )
    THEN
	RETURN FDL$_ILL_ARG;

    ! Get the address of the of where the caller wants his FAB and RAB
    ! and get the FDL SPEC
    !
    FDL_SPEC = ACTUALPARAMETER(1);
    FAB_POINTER = ACTUALPARAMETER(2);
    RAB_POINTER = ACTUALPARAMETER(3);

    ! Check 'em out
    !
    IF (
    ( .FAB_POINTER EQLU 0 ) OR ( .RAB_POINTER EQLU 0 ) OR ( .FDL_SPEC EQLU 0 )
    ) THEN
	RETURN FDL$_ILL_ARG;

    ! Assume we're not doing a default parse.
    !
    PASS = 0;
    TMP_SPEC = .FDL_SPEC;
    FDL$AB_CTRL [ FDL$V_DFLT_PRES ] = _CLEAR;
    FDL$AB_CTRL [ FDL$V_REPARSE ] = _CLEAR;

    IF ( .COUNT GTR 4 )
    THEN
	BEGIN

	DFLT_SPEC = ACTUALPARAMETER (5);

	IF .DFLT_SPEC NEQU 0
	THEN
	    BEGIN

	    FDL$AB_CTRL [ FDL$V_DFLT_PRES ] = _SET;
	    TMP_SPEC = .DFLT_SPEC;

	    END;

	END;

    ! Get the stmnt-num argument (if it hasn't been got already)
    !
    IF NOT .FDL$AB_CTRL [ FDL$V_STVALID ]
    THEN
	BEGIN

	IF .COUNT GTR 5
	THEN
	    FDL$GL_STNUMPTR = ACTUALPARAMETER (6)
	ELSE
	    FDL$GL_STNUMPTR = 0;

	IF .FDL$GL_STNUMPTR NEQU 0
	THEN
	    FDL$AB_CTRL [ FDL$V_STVALID ] = _SET
	ELSE
	    FDL$AB_CTRL [ FDL$V_STVALID ] = _CLEAR;

	END;

    ! **** THIS IS THE MAJOR LOOP FOR DOING THE DEFAULT PARSE, ****
    !		  **** AND THEN THE MAIN PARSE. ****
    !
    DO
	BEGIN

	! Keep track of how many times we've passed this way.
	!
	PASS = .PASS + 1;

	IF ( .PASS GTR 1 )
	THEN
	    FDL$AB_CTRL [ FDL$V_REPARSE ] = _SET;

	! Allow for wierd strings (like VARYING or byte-arrays)
	!
	RET_ON_ERROR( LIB$ANALYZE_SDESC( .TMP_SPEC,LENGTH,ADDR ) );

	! Setup for reparse (if needed)
	!
	TMP_SPEC = .FDL_SPEC;

	IF ( .LENGTH EQLU 0 ) OR ( .ADDR EQLU 0 )
	THEN
	    RETURN FDL$_ILL_ARG;

	FDL$AB_CTRL [ FDL$V_DCL ] = _CLEAR;
	FDL$AB_CTRL [ FDL$V_PCALL ] = _CLEAR;
	FDL$AB_CTRL [ FDL$V_STRING_SPEC ] = _CLEAR;

	! Get the flags
	!
	IF ( .COUNT GTR 3 )
	THEN
	    BEGIN

	    FLAGS = ACTUALPARAMETER (4);

	    IF .FLAGS NEQU 0
	    THEN
		BEGIN

		FDL$AB_CTRL [ FDL$V_DCL ] = .FLAGS [ FDL$V_SIGNAL ];
		FDL$AB_CTRL [ FDL$V_PCALL ] = .FLAGS [ FDL$V_$CALLBACK ];

		! Guard against garbage flags
		!
		IF (
		(.FDL$AB_CTRL [ FDL$V_PCALL ])
		AND
		(.FDL$GL_PCALL EQLU 0)
		) THEN
		    RETURN FDL$_ILL_ARG;

		IF (
		(.FDL$AB_CTRL [ FDL$V_DFLT_PRES ])
		AND
		( NOT .FDL$AB_CTRL [ FDL$V_REPARSE ])
		) THEN
		    FDL$AB_CTRL [ FDL$V_STRING_SPEC ] =
		    				.FLAGS [ FDL$V_DEFAULT_STRING ]
		ELSE
		    FDL$AB_CTRL [ FDL$V_STRING_SPEC ] =
						.FLAGS [ FDL$V_FDL_STRING ];

		END;

	    END;

	! Setup maximum line size
	!
	IF .FDL$AB_CTRL [ FDL$V_STRING_SPEC ]
	THEN
	    FDL$GL_MAXLINE = .LENGTH
	ELSE
	    FDL$GL_MAXLINE = FDL$K_MAXLINE;

	! Set up the fab and name block
	!
	! Find the number of bytes needed for all of this which is:
	! Space for the fab, name block, expanded and resultant string buffers
	! the user buffer in the rab and the upcase buffer. NOTE: The upcase buffer
	! MUST be allocated directly after the user buffer.
	!
	! The space is allocated:
	!
	!		-------------------------
	!		|	fab		| fab$k_bln
	!		|-----------------------|
	!		|	nam		| nam$k_bln
	!		|-----------------------|
	!		|  expanded str buffer	| esa_buf_siz
	!		|-----------------------|
	!		| resultant str buffer	| rsa_buf_siz
	!		|-----------------------|
	!		|     user buffer	| .fdl$gl_maxline
	!		|-----------------------|
	!		|    upcase buffer	| .fdl$gl_maxline
	!		-------------------------
	!
	!
	! Get the address space. NOTE: Since the user never sees this buffer we
	! can deallocate it when we exit so use lib$get_vm
	!
	BYTES = FAB$K_BLN + NAM$K_BLN + ESA_BUF_SIZ + RSA_BUF_SIZ +
						    ( .FDL$GL_MAXLINE * 2);

	IF NOT LIB$GET_VM( BYTES,FDL_FAB_PTR )
	THEN
	    RETURN FDL$_INSVIRMEM;

	! Zero the space
	!
	CH$FILL ( 0,.BYTES,.FDL_FAB_PTR );

	! Set up the location of the user buffer
	!
	USERBUF = .FDL_FAB_PTR + FAB$K_BLN + NAM$K_BLN + ESA_BUF_SIZ +
								RSA_BUF_SIZ;

	! Prepare for an fdl-spec whether from a file or a string
	!
	IF .FDL$AB_CTRL [ FDL$V_STRING_SPEC ]
	THEN
	    BEGIN

	    FDL$AB_FDL_STRING [ DSC$W_LENGTH ] = .LENGTH;
	    FDL$AB_FDL_STRING [ DSC$A_POINTER ] = .ADDR

	    END
	ELSE
	    BEGIN

	    ! Initialize the FDL FILE fabs and rabs
	    !
	    $FAB_INIT ( FAB = .FDL_FAB_PTR,
			CTX = FDL$_OPENFDL,
			DNM = '.FDL',
			FAC = GET,
			FNS = .LENGTH,
			FNA = .ADDR,
			FOP = <SQO,NAM>,
			NAM = .FDL_FAB_PTR + FAB$K_BLN );

	    $NAM_INIT ( NAM = .FDL_FAB_PTR + FAB$K_BLN,
			ESA = .FDL_FAB_PTR + FAB$K_BLN + NAM$K_BLN,
			ESS = ESA_BUF_SIZ,
			RSA = .FDL_FAB_PTR + FAB$K_BLN + NAM$K_BLN + ESA_BUF_SIZ,
			RSS = RSA_BUF_SIZ );

	    $RAB_INIT ( RAB = FDL$AB_FDL_RAB,
			CTX = FDL$_OPENFDL,
			FAB = .FDL_FAB_PTR,
			RAC = SEQ,
			ROP = RAH,
			UBF = .USERBUF,
			USZ = .FDL$GL_MAXLINE );

	    ! Open the file
	    !
	    $OPEN( FAB=.FDL_FAB_PTR,ERR=FDL$$RMS_OPEN_ERROR );

	    ! Connect a stream
	    !
	    $CONNECT( RAB=FDL$AB_FDL_RAB,ERR=FDL$$RMS_OPEN_ERROR );

	    ! Errors from now on are read errors
	    !
	    FDL$AB_FDL_RAB [ RAB$L_CTX ] = FDL$_READERR

	    END;

	IF ( .PASS EQLU 1 )
	THEN
	    BEGIN

	    ! Get the address space for the Parsed-fab and the Parsed-rab
	    !
	    FDL$AB_PARSED_FAB = FDL$$GET_VM( FAB$K_BLN );
	    FDL$AB_PARSED_RAB = FDL$$GET_VM( RAB$K_BLN );

	    ! Init the Parsed-fab and Parsed-rab (Set some defaults as well)
	    !
	    $FAB_INIT ( FAB = .FDL$AB_PARSED_FAB,
			FOP = <MXV,NAM>,
			ORG = SEQ,
			RAT = CR,
			RFM = VAR );

	    $RAB_INIT ( RAB = .FDL$AB_PARSED_RAB,
			FAB = .FDL$AB_PARSED_FAB );

	    ! Give the fab and rab to the user
	    !
	    .FAB_POINTER = .FDL$AB_PARSED_FAB;
	    .RAB_POINTER = .FDL$AB_PARSED_RAB;

	    END;

	! Initialize the line buffer and the upcase buffer
	!
	FDL$AB_LINE [ DSC$A_POINTER ] = .USERBUF;

	FDL$AB_UPCASED [ DSC$A_POINTER ] = .FDL$AB_LINE [ DSC$A_POINTER ] +
							    .FDL$GL_MAXLINE;

	! Initialize the parser
	!
	FDL$$INIT_PARSE();

	! Parse the file
	!
	RET_ON_ERROR (
	LIB$TPARSE( FDL$AB_TPARSE_BLOCK,FDL$AB_STATE_TABLE,FDL$AB_KEY_TABLE ));

	STATUS = FDL$$FINISH_PARSE();

	IF NOT .FDL$AB_CTRL [ FDL$V_STRING_SPEC ]
	THEN
	    BEGIN

	    ! Close down the FDL file and exit
	    !
	    $DISCONNECT( RAB=FDL$AB_FDL_RAB );

	    $CLOSE( FAB=.FDL_FAB_PTR );

		! Deallocate the memory for the fab etc
		!
		BEGIN
		LOCAL STATUS;

		IF NOT ( STATUS = LIB$FREE_VM( BYTES,FDL_FAB_PTR ))
		THEN
		    SIGNAL_STOP ( .STATUS );
		END;

	    END;

	END	! OF MAJOR PARSE/REPARSE LOOP

    UNTIL (
    ( NOT .FDL$AB_CTRL [ FDL$V_DFLT_PRES ] )
    OR
    ( .FDL$AB_CTRL [ FDL$V_DFLT_PRES ] AND .FDL$AB_CTRL [ FDL$V_REPARSE ] )
    );

    RETURN .STATUS

    END;

%SBTTL	'FDL$RELEASE'
GLOBAL ROUTINE	FDL$RELEASE =
!++
!
! Functional Description:
!
!	This routine takes a FAB address or a RAB address or both and
!	tracks down the RMS control block chains and deallocates them
!	for the user.
!
! Calling Sequence:
!
!	fdl$release (	[fab_pointer]
!			[,rab_pointer]
!			[,flags]
!			[,badblk-addr] )
!
! Input Parameters:
!
!	fab_pointer	- address of a longword containing the address
!			  of the FAB to deallocate (plus attachments)
!
!	rab_pointer	- address of a longword containing the address
!			  of the RAB to deallocate (plus attachments)
!
!	flags		- address of flags longword (optional)
!		FDL$V_SIGNAL		signal errors instead of returning
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	badblk-addr	- address of a longword to receive the address
!			  of the RMS control block that is invalid (optional)
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	fdl$$check_blocks
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER;

    LOCAL
	FAB_POINTER		: REF BLOCK [ ,BYTE ],
	RAB_POINTER		: REF BLOCK [ ,BYTE ],
	XAB_POINTER		: REF BLOCK [ ,BYTE ],
	NAM_POINTER		: REF BLOCK [ ,BYTE ],
	SAVE_POINTER		: REF BLOCK [ ,BYTE ],
	FLAGS			: REF BLOCK [ ,BYTE ],
	STATUS			: LONG,
	COUNT			: LONG;

    ! Setup to handle ACCVIOs and other trash
    !
    LIB$ESTABLISH ( HANDLER );

    ! Validate the arguments.
    !
    COUNT = ACTUALCOUNT ();

    ! Clear the valid stmnt flag as a fix...  should always be cleared on entry
    !
    FDL$AB_CTRL [ FDL$V_STVALID ] = _CLEAR;

    IF ( .COUNT LSS 1 ) OR ( .COUNT GTR 4 )
    THEN
	RETURN FDL$_ILL_ARG;

    ! 1st arg is address of longword containing address of FAB
    !
    FAB_POINTER = ACTUALPARAMETER (1);

    ! 2nd arg is address of longword containing address of RAB
    !
    IF .COUNT GTR 1
    THEN
	RAB_POINTER = ACTUALPARAMETER (2)
    ELSE
	RAB_POINTER = 0;

    ! 3rd arg is address of flags longword
    !
    IF .COUNT GTR 2
    THEN
	BEGIN

	FLAGS = ACTUALPARAMETER (3);

	IF .FLAGS NEQU 0
	THEN
	    FDL$AB_CTRL [ FDL$V_DCL ] = .FLAGS [ FDL$V_SIGNAL ]
	ELSE
	    FDL$AB_CTRL [ FDL$V_DCL ] = _CLEAR;

	END;

    ! 4th arg is address of longword to receive address of bad block
    !
    IF .COUNT GTR 3
    THEN
	FDL$GL_INVBLK_PTR = ACTUALPARAMETER (4)
    ELSE
	FDL$GL_INVBLK_PTR = 0;

    ! Get actual address of FAB
    !
    IF .FAB_POINTER NEQU 0
    THEN
	FAB_POINTER = ..FAB_POINTER;

    ! Get actual address of RAB
    !
    IF .RAB_POINTER NEQU 0
    THEN
	RAB_POINTER = ..RAB_POINTER;

    ! Go check and deallocate the ctrl blocks
    !
    FDL$AB_CTRL [ FDL$V_DEALLOC ] = _SET;
    FDL$$CHECK_BLOCKS ( .FAB_POINTER, .RAB_POINTER );

    RETURN SS$_NORMAL;

    END;

%SBTTL	'FDL$GENERATE'
GLOBAL ROUTINE	FDL$GENERATE =
!++
!
! Functional Description:
!
!	This routine produces an FDL SPEC. It is placed either in a char string,
!	or in an FDL file. EVERY RMS FIELD IS INSPECTED AND OUTPUT (if the flag
!	bit FDL$V_FULL_OUTPUT is set).
!	This is essentially a picture of the RMS control blocks.
!
! Calling Sequence:
!
! fdl$generate (  flags,
!		  fab_pointer,
!		  rab_pointer
!		[,fdl_file_dst]
!		[,fdl_file_resnam]
!		[,fdl_str_dst]
!		[,bad_blk_addr]
!		[,retlen] )
!
! Input Parameters:
!
!	flags		- address of flags longword (optional)
!		FDL$V_SIGNAL		signal errors instead of returning
!		FDL$V_FDL_STRING	output fdl-spec is a char string
!		FDL$V_FULL_OUTPUT	all RMS fields are to be output
!		FDL$V_$CALLBACK		used by EDF
!
!	fab_pointer	- address of a longword which holds the address of
!			  the FAB to be scanned
!
!	rab_pointer	- address of a longword which holds the address of
!			  the RAB to be scanned
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
!	fdl_file_dst	- address of a string descriptor which holds the
!			  filename of the FDL file to be output
!			  (required if FDL$V_FDL_STRING bit is NOT set,
!			   ignored otherwise)
!
!	fdl_file_resnam	- address of a dynamic or varying string descriptor
!			  which will hold the result name of the FDL file
!			  that may be created by FDL$GENERATE (optional)
!
!	fdl_str_dst	- address of a dynamic or varying string descriptor
!			  which will hold the fdl spec as a char string
!			  (required if FDL$V_FDL_STRING bit is set,
!			   ignored otherwise)
!
!	bad_blk_addr	- address of a longword to receive the address of
!			  an invalid RMS control block, if detected (optional)
!
!	retlen		- address of longword to recieve length of the returned
!			  string: either the fdl_file_resnam or the fdl_str_dst
!			  (optional)
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!
! Side Effects:
!	none
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER;

    LOCAL
	RETLEN		: LONG,
	BYTES		: LONG,
	USERBUF		: LONG,
	COUNT		: BYTE,
	LENGTH		: WORD,
	ADDR		: LONG,
	STATUS		: LONG,
	FDL_FAB_PTR	: REF BLOCK [ ,BYTE ],
	FLAGS		: REF BLOCK [ ,BYTE ],
	FDL_FILE	: REF DESC_BLK,
	FDL_RESNAM	: REF DESC_BLK,
	NAME_BLOCK	: REF BLOCK [ ,BYTE ],
	TEMP_DESC	: DESC_BLK PRESET ( [ DSC$B_CLASS ] = DSC$K_CLASS_S,
					    [ DSC$B_DTYPE ] = DSC$K_DTYPE_T );

    ! Set up handler to control errors
    !
    LIB$ESTABLISH ( HANDLER );

    ! Check out the arguments
    !
    COUNT = ACTUALCOUNT ();

    ! Clear the valid stmnt flag as a fix...  should always be cleared on entry
    !
    FDL$AB_CTRL [ FDL$V_STVALID ] = _CLEAR;

    IF ( .COUNT LSS 4 ) OR ( .COUNT GTR 8 )
    THEN
	RETURN FDL$_ILL_ARG;

    FLAGS = ACTUALPARAMETER (1);
    FDL$AB_GENFAB = ACTUALPARAMETER (2);
    FDL$AB_GENRAB = ACTUALPARAMETER (3);

    ! Are the FAB and RAB kosher?
    !
    IF ( .FDL$AB_GENFAB EQLU 0 ) OR ( .FDL$AB_GENRAB EQLU 0 )
    THEN
	RETURN FDL$_ILL_ARG;

    IF ( ..FDL$AB_GENFAB EQLU 0 ) OR ( ..FDL$AB_GENRAB EQLU 0 )
    THEN
	RETURN FDL$_ILL_ARG;

    ! Get the 'real' control blocks
    !
    FDL$AB_GENFAB = ..FDL$AB_GENFAB;
    FDL$AB_GENRAB = ..FDL$AB_GENRAB;

    FDL_FILE = ACTUALPARAMETER (4);

    IF .COUNT GTR 4
    THEN
	FDL_RESNAM = ACTUALPARAMETER (5)
    ELSE
	FDL_RESNAM = 0;

    IF .COUNT GTR 5
    THEN
	FDL$AB_OUT_STRING = ACTUALPARAMETER (6)
    ELSE
	FDL$AB_OUT_STRING = 0;

    IF .COUNT GTR 6
    THEN
	FDL$GL_INVBLK_PTR = ACTUALPARAMETER (7)
    ELSE
	FDL$GL_INVBLK_PTR = 0;

    ! Setup to output the length of the returned string if required.
    !
    IF .COUNT GTR 7
    THEN

	RETLEN	= ACTUALPARAMETER (8)

    ELSE

	RETLEN	= 0;

    ! Are the FAB and RAB good ones?
    !
    IF .FDL$AB_GENFAB [ FAB$B_BID ] NEQU FAB$C_BID
    THEN
	BEGIN

	IF .FDL$GL_INVBLK_PTR NEQU 0
	THEN
	    .FDL$GL_INVBLK_PTR = .FDL$AB_GENFAB;

	SIGNAL ( FDL$_INVBLK,1,.FDL$AB_GENFAB );

	END;

    IF .FDL$AB_GENRAB [ RAB$B_BID ] NEQU RAB$C_BID
    THEN
	BEGIN

	IF .FDL$GL_INVBLK_PTR NEQU 0
	THEN
	    .FDL$GL_INVBLK_PTR = .FDL$AB_GENRAB;

	SIGNAL ( FDL$_INVBLK,1,.FDL$AB_GENRAB );

	END;

    ! Setup the flag bits
    !
    FDL$AB_CTRL [ FDL$V_DCL ] = _CLEAR;
    FDL$AB_CTRL [ FDL$V_GCALL ] = _CLEAR;
    FDL$AB_CTRL [ FDL$V_STRING_SPEC ] = _CLEAR;
    FDL$AB_CTRL [ FDL$V_FULLGEN ] = _CLEAR;

    IF .FLAGS NEQU 0
    THEN
	BEGIN

	FDL$AB_CTRL [ FDL$V_DCL ] = .FLAGS [ FDL$V_SIGNAL ];
	FDL$AB_CTRL [ FDL$V_GCALL ] = .FLAGS [ FDL$V_$CALLBACK ];
	FDL$AB_CTRL [ FDL$V_STRING_SPEC ] = .FLAGS [ FDL$V_FDL_STRING ];
	FDL$AB_CTRL [ FDL$V_FULLGEN ] = .FLAGS [ FDL$V_FULL_OUTPUT ];

	END;

    ! Make sure the args are self-consistent
    !
    IF (
    (( .FDL$AB_CTRL [ FDL$V_STRING_SPEC ] ) AND ( .FDL$AB_OUT_STRING EQLU 0 ))
    	OR
    (( NOT .FDL$AB_CTRL [ FDL$V_STRING_SPEC ] ) AND ( .FDL_FILE EQLU 0 ))
    ) THEN
	RETURN FDL$_ILL_ARG;

    IF .FDL$AB_CTRL [ FDL$V_STRING_SPEC ]
    THEN
	RET_ON_ERROR ( LIB$ANALYZE_SDESC ( .FDL$AB_OUT_STRING,LENGTH,ADDR ) )
    ELSE
	RET_ON_ERROR ( LIB$ANALYZE_SDESC ( .FDL_FILE,LENGTH,ADDR ) );

    IF (( NOT .FDL$AB_CTRL [ FDL$V_STRING_SPEC ] ) AND ( .ADDR EQLU 0 ))
    THEN
	RETURN FDL$_ILL_ARG;

    IF .FDL$AB_CTRL [ FDL$V_STRING_SPEC ]
    THEN
	RET_ON_ERROR( LIB$SCOPY_R_DX(UPLIT(0),UPLIT(0),.FDL$AB_OUT_STRING));

    ! Setup the output destination
    !
    IF .FDL$AB_CTRL [ FDL$V_STRING_SPEC ]
    THEN
	BEGIN

	! Setup the string buffer
	!
	BYTES = FDL$K_MAXLINE;

	IF NOT LIB$GET_VM ( BYTES,USERBUF )
	THEN
	    RETURN FDL$_INSVIRMEM;

	CH$FILL ( 0,.BYTES,.USERBUF );
	FDL$AB_LINE [ DSC$A_POINTER ] = .USERBUF;
	FDL$AB_LINE [ DSC$W_LENGTH ] = FDL$K_MAXLINE;

	END
    ELSE
	BEGIN

	! Set up the fab and name block
	!
	! Find the number of bytes needed for all of this which is:
	! Space for the fab, name block, expanded and resultant string buffers
	! the user buffer in the rab.
	!
	! The space is allocated:
	!
	!		-------------------------
	!		|	fab		| fab$k_bln
	!		|-----------------------|
	!		|	nam		| nam$k_bln
	!		|-----------------------|
	!		|  expanded str buffer	| esa_buf_siz
	!		|-----------------------|
	!		| resultant str buffer	| rsa_buf_siz
	!		|-----------------------|
	!		|     user buffer	| fdl$k_maxline
	!		-------------------------
	!
	!
	! Get the address space. NOTE: Since the user never sees this buffer we
	! can deallocate it when we exit so use lib$get_vm
	!
	BYTES = FAB$K_BLN + NAM$K_BLN + ESA_BUF_SIZ + RSA_BUF_SIZ +
						    		FDL$K_MAXLINE;

	IF NOT LIB$GET_VM( BYTES,FDL_FAB_PTR )
	THEN
	    RETURN FDL$_INSVIRMEM;

	! Zero the space
	!
	CH$FILL ( 0,.BYTES,.FDL_FAB_PTR );

	! Set up the location of the user buffer
	!
	USERBUF = .FDL_FAB_PTR + FAB$K_BLN + NAM$K_BLN + ESA_BUF_SIZ +
								RSA_BUF_SIZ;

	! Initialize the FDL FILE fabs and rabs
	!
	$FAB_INIT ( FAB = .FDL_FAB_PTR,
		    CTX = FDL$_OPENOUT,
		    DNM = '.FDL',
		    FAC = PUT,
		    FNS = .LENGTH,
		    FNA = .ADDR,
		    FOP = <SQO,NAM,MXV>,
		    ORG = SEQ,
		    RAT = CR,
		    RFM = VAR,
		    NAM = .FDL_FAB_PTR + FAB$K_BLN );

	$NAM_INIT ( NAM = .FDL_FAB_PTR + FAB$K_BLN,
		    ESA = .FDL_FAB_PTR + FAB$K_BLN + NAM$K_BLN,
		    ESS = ESA_BUF_SIZ,
		    RSA = .FDL_FAB_PTR + FAB$K_BLN + NAM$K_BLN + ESA_BUF_SIZ,
		    RSS = RSA_BUF_SIZ );

	$RAB_INIT ( RAB = FDL$AB_FDL_RAB,
		    CTX = FDL$_OPENOUT,
		    FAB = .FDL_FAB_PTR,
		    RAC = SEQ,
		    ROP = WBH,
		    RBF = .USERBUF,
		    RSZ = FDL$K_MAXLINE,
		    UBF = .USERBUF,
		    USZ = FDL$K_MAXLINE );

	! Create the file
	!
	$CREATE( FAB=.FDL_FAB_PTR,ERR=FDL$$RMS_OPEN_ERROR );

	! Connect a stream
	!
	$CONNECT( RAB=FDL$AB_FDL_RAB,ERR=FDL$$RMS_OPEN_ERROR );

	! Errors from now on are write errors
	!
	FDL$AB_FDL_RAB [ RAB$L_CTX ] = FDL$_WRITEERR;

	! Initialize the line buffer
	!
	FDL$AB_LINE [ DSC$A_POINTER ] = .USERBUF;
	FDL$AB_LINE [ DSC$W_LENGTH ] = FDL$K_MAXLINE;

	! Give the user the result name if he wants it
	!
	IF .FDL_RESNAM NEQ 0
	THEN
	    BEGIN

	    IF ..FDL_RESNAM NEQ 0
	    THEN
		BEGIN

		! Locate the name block
		!
		NAME_BLOCK = .FDL_FAB_PTR + FAB$K_BLN;

		! If a result name desc was given, stuff it with
		! the best name for file which was created (or attempted)
		!
		! First try the resultant string
		!
		IF .NAME_BLOCK [ NAM$B_RSL ] NEQU 0
		THEN
		    BEGIN

		    TEMP_DESC [ DSC$W_LENGTH ] = .NAME_BLOCK [ NAM$B_RSL ];
		    TEMP_DESC [ DSC$A_POINTER ] = .NAME_BLOCK [ NAM$L_RSA ];

		    RET_ON_ERROR( LIB$SCOPY_DXDX( TEMP_DESC,.FDL_RESNAM ) );

		    END

		! Next try the expanded string
		!
		ELSE IF .NAME_BLOCK [ NAM$B_ESL ] NEQU 0
		THEN
		    BEGIN

		    TEMP_DESC [ DSC$W_LENGTH ] = .NAME_BLOCK [ NAM$B_ESL ];
		    TEMP_DESC [ DSC$A_POINTER ] = .NAME_BLOCK [ NAM$L_ESA ];

		    RET_ON_ERROR( LIB$SCOPY_DXDX( TEMP_DESC,.FDL_RESNAM ) )

		    END

		! If all else fails use the name string
		!
		ELSE
		    BEGIN

		    TEMP_DESC [ DSC$W_LENGTH ] = .FDL_FAB_PTR [ FAB$B_FNS ];
		    TEMP_DESC [ DSC$A_POINTER ] = .FDL_FAB_PTR [ FAB$L_FNA ];

		    RET_ON_ERROR( LIB$SCOPY_DXDX( TEMP_DESC,.FDL_RESNAM ) )

		    END;

		! Return the length if requested.
		!
		IF .RETLEN NEQ 0
		THEN
		    BEGIN

		    .RETLEN	= .TEMP_DESC [ DSC$W_LENGTH ];

		    END;
		END;
	    END;
	END;

    ! Set up the control block blk
    !
    FDL$AB_BLOCK_BLK [ FDL$C_FAB ] = .FDL$AB_GENFAB;
    FDL$AB_BLOCK_BLK [ FDL$C_RAB ] = .FDL$AB_GENRAB;
    FDL$AB_BLOCK_BLK [ FDL$C_NAM ] = .FDL$AB_GENFAB [ FAB$L_NAM ];

    ! Now go generate the FDL SPEC
    !
    STATUS = FDL$$GEN_SPEC ();

    ! Return the length if requested.
    !
    IF .FDL$AB_CTRL [ FDL$V_STRING_SPEC ]
    THEN
	BEGIN

	IF .RETLEN NEQ 0
	THEN
	    BEGIN

	    LIB$ANALYZE_SDESC ( .FDL$AB_OUT_STRING,LENGTH,ADDR );
	    .RETLEN = .LENGTH;

	    END;
	END;

    IF NOT .FDL$AB_CTRL [ FDL$V_STRING_SPEC ]
    THEN
	BEGIN

	! Close down the FDL file and exit
	!
	$DISCONNECT( RAB=FDL$AB_FDL_RAB );

	$CLOSE( FAB=.FDL_FAB_PTR );

	    ! Deallocate the memory for the fab etc
	    !
	    BEGIN
	    LOCAL STATUS;

	    IF NOT ( STATUS = LIB$FREE_VM( BYTES,FDL_FAB_PTR ))
	    THEN
		SIGNAL_STOP ( .STATUS );
	    END;

	END;

    RETURN .STATUS;

    END;

%SBTTL	'HANDLER'
ROUTINE	HANDLER ( SIGNAL_VECTOR : REF BLOCK [ ,BYTE ],
		    MECH_VECTOR : REF BLOCK [ ,BYTE ] ) =
!++
!
! Functional Description:
!
!	Condition handler for the fdl parser
!
! Calling Sequence:
!
! Input Parameters:
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    LOCAL
	CONDITION_CODE	: BLOCK [ 4,BYTE ];

    ! Get the condition code
    !
    CONDITION_CODE = .SIGNAL_VECTOR [ CHF$L_SIG_NAME ];

    ! If an unwind is in progress return
    !
    IF ( .CONDITION_CODE EQLU SS$_UNWIND )
    THEN
	RETURN 0;

    ! If this is not a warning skip it otherwise stuff the status
    ! with the greater of the errors
    !
    IF .CONDITION_CODE [ STS$V_SEVERITY ] NEQU STS$K_INFO
    THEN

	! If the current condition is ok OR this worse then anything weve seen
	! then make this the new error
	!
	IF .FDL$AB_CTRL [ FDL$V_STATUS ] OR
		( .CONDITION_CODE [ STS$V_SEVERITY ] GTRU
					.FDL$AB_CTRL [ FDL$V_STATUS ] )
	THEN
	    FDL$AB_CTRL [ FDL$V_STATUS ] = .CONDITION_CODE [ STS$V_SEVERITY ];

    IF NOT .FDL$AB_CTRL [ FDL$V_DCL ]
    THEN
	LIB$SIG_TO_RET (
			SIGNAL_VECTOR [ CHF$L_SIG_ARGS ],
			MECH_VECTOR [ CHF$L_MCH_ARGS ]
			);

    RETURN SS$_RESIGNAL

    END;

END	ELUDOM
