MODULE MEMORY (%TITLE 'Symbiont Services -- Memory routines'
		IDENT = 'V04-000',
		ADDRESSING_MODE (EXTERNAL = GENERAL)
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Symbiont Services
!
! ABSTRACT:
!	This module provides routines to allocate, deallocate and initialize
!	memory structures.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: Greg Robert, CREATION DATE: 26-Apr-1983
!
! MODIFIED BY:
!
!	3B-007  RRB3007		Rowland R. Bradley	18-Jul-1984
!		Insert COPY_R_DX to PSM$READ_ITEM_DX. This insures proper 
!		copy of longword items to users descriptor.  Change message
!		PSM$_NOMOREITEMS to SMB$_NOMOREITEMS, PSM$_INVSTRLEV to 
!		SMB$_INVSTRLEV.
!
!	3B-006	GRR3006		Gregory R. Robert	16-May-1984
!		Reset current PAGE and START_PAGE on SCB reset.
!
!	3B-005	GRR3005		Gregory R. Robert	29-Apr-1984
!		FT2 bugfixes.
!
!	3B-004	RRB3004		Rowland R. Bradley	27-Apr-1984
!		Add support for the new page header routine.  Initialize
!		the page header dynamic descriptor.
!
!	3B-003	GRR3003		Gregory R. Robert	23-Aug-1983
!		Bugfixes, page_setup_modules, form_setup_modules,
!		sheet_feed, symbiont initiated pause_task and stop_stream,
!		hangup code, read and write item services
!
!	3B-002	GRR3002		Gregory R. Robert	03-Aug-1983
!		Rewrite for new design.
!
!	3B-001	GRR4001		Gregory R. Robert	24-Jul-1983
!		Created new module
!
!**


LIBRARY 'SYS$LIBRARY:LIB';
REQUIRE 'LIB$:SMBDEF';
REQUIRE	'SRC$:SMBREQ';

EXTERNAL
	PSM$MIT		: BLOCKVECTOR[,MIT_S_MIT, BYTE],
	PSM$XLATE_8BIT	: VECTOR [,BYTE]
	;

EXTERNAL ROUTINE
	SMB$READ_MESSAGE_ITEM	,
	EXPAND_CONDITION_VECTOR
	;

FORWARD ROUTINE
	PSM$ALLOCATE_DSB	: NOVALUE,
	PSM$ALLOCATE_IOB	: NOVALUE,
	PSM$DEALLOCATE_DSB	: NOVALUE,
	PSM$DEALLOCATE_IOB	: NOVALUE,
	PSM$ALLOCATE_SCB	,
	PSM$INITIALIZE_SCB	,
	PSM$READ_ITEM_DX	,
	PSM$READ_ITEM_R		,
	PSM$RESET_SCB		,
	PSM$WRITE_ITEM_DX	,
	PSM$WRITE_ITEM_R	,
	PSM$UPDATE_SCB		,
	ALLOCATE_MEMORY
	;

OWN
	FREE_DSB_QUEUE:	VECTOR [2],	! Dynamic string block queue header
	FREE_IOB_QUEUE:	VECTOR [2]	! IO block queue header
	;

%SBTTL 'ALLOCATE_DSB'
! Functional Description:
!		Allocates a dynanic string block.
!
! Formal Parameters:
!		DSB	: address of longword to receive allocated DSB address
!		BYTES	: number of bytes to be reserved in dynamic string desc.
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$ALLOCATE_DSB ( 
	DSB	: REF $LONGWORD,
	BYTES	: REF $WORD
	)	: NOVALUE =
BEGIN
	PARAMETER_INDEX_ (DSB, BYTES);


IF .FREE_DSB_QUEUE[0] EQL 0
THEN
    INIT_QUEUE_HEADER_ (FREE_DSB_QUEUE);

! Dequeue a dynamic string block
!
WHILE REMOVE_HEAD_ (DSB[], FREE_DSB_QUEUE)	! True if empty
DO
    BEGIN
    LOCAL PAGE;

    ! Allocate a page of DSB's.
    !
    $ASSUME (DSB_S_DSB * 32, EQL, 512)
    PAGE = ALLOCATE_MEMORY (512);
    CH$FILL (0, 512, .PAGE);

    ! Initialize and place them in queue
    !
    INCRA PTR FROM .PAGE TO .PAGE + 511 BY DSB_S_DSB
    DO
	BEGIN
	MAP PTR: REF $BBLOCK;
	INIT_DYN_DESC_ (PTR[DSB_Q_DESC]);
	INSERT_TAIL_ (PTR[DSB_Q_QLINKS], FREE_DSB_QUEUE);
	END;
    END;

DSB[] = .DSB[] - $BYTEOFFSET (DSB_Q_QLINKS);

IF PARAMETER_PRESENT_ (BYTES)
THEN
    SIGNAL_IF_ERROR_ (STR$GET1_DX (BYTES[], $BBLOCK[.DSB[], DSB_Q_DESC]));

END;

%SBTTL 'ALLOCATE_IOB'
! Functional Description:
!		Allocate an Input Output control Block.
!
! Formal Parameters:
!		IOB - address of a longword to receive address of allocated IOB
!		BYTES - number of bytes to be allocated in buffer
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$ALLOCATE_IOB ( 
	IOB	: REF $LONGWORD,
	BYTES	: REF $WORD
	)	: NOVALUE =
BEGIN

BUILTIN
	NULLPARAMETER
	;

IF .FREE_IOB_QUEUE[0] EQL 0
THEN
    INIT_QUEUE_HEADER_ (FREE_IOB_QUEUE);


! Dequeue a dynamic string block
!
WHILE REMOVE_HEAD_ (IOB[], FREE_IOB_QUEUE)	! True if empty
DO
    BEGIN
    LOCAL MEMORY;

    ! Allocate 20 IOB's.
    !
    MEMORY = ALLOCATE_MEMORY (20 * IOB_S_IOB);
    CH$FILL (0, 20 * IOB_S_IOB, .MEMORY);

    ! Initialize and place them in queue
    !
    INCRA PTR FROM .MEMORY TO .MEMORY + (20 * IOB_S_IOB - 1) BY IOB_S_IOB
    DO
	BEGIN
	MAP PTR: REF $BBLOCK;
	PTR[IOB_B_TYPE] = PSM$K_STRUCTURE_IOB;
	PTR[IOB_B_LEVEL] = SMBMSG$K_STRUCTURE_LEVEL;
	PTR[IOB_W_SIZE] = IOB_S_IOB;
	INIT_DYN_DESC_ (PTR[IOB_Q_BUFFER]);
	INSERT_TAIL_ (PTR[IOB_Q_QLINKS], FREE_IOB_QUEUE);
	END;
    END;

IOB[] = .IOB[] - $BYTEOFFSET (IOB_Q_QLINKS);

IF NOT NULLPARAMETER (2)
THEN
    SIGNAL_IF_ERROR_ (STR$GET1_DX (BYTES[], $BBLOCK[.IOB[], IOB_Q_BUFFER]));

END;

%SBTTL 'DEALLOCATE_DSB'
! Functional Description:
!		Deallocate a Dynamic String Block
!
! Formal Parameters:
!		DSB -- address of block to be deallocated
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$DEALLOCATE_DSB ( 
	DSB	: REF $BBLOCK
	)	: NOVALUE =
BEGIN

SIGNAL_IF_ERROR_ (STR$FREE1_DX (DSB[DSB_Q_DESC]));

INSERT_TAIL_ (DSB[DSB_Q_QLINKS], FREE_DSB_QUEUE);

END;

%SBTTL 'DEALLOCATE_IOB'
! Functional Description:
!		Deallocates an Input/Output Block
!
! Formal Parameters:
!		IOB - address of block to be deallocated
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$DEALLOCATE_IOB ( 
	IOB	: REF $BBLOCK
	)	: NOVALUE =
BEGIN

SIGNAL_IF_ERROR_ (STR$FREE1_DX (IOB[IOB_Q_BUFFER]));

INSERT_TAIL_ (IOB[IOB_Q_QLINKS], FREE_IOB_QUEUE);

END;

%SBTTL 'ALLOCATE_SCB'
! Functional Description:
!		Allocates a Stream Control Block
!
! Formal Parameters:
!		SCBADR - address of a longword to receive address of new SCB
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$ALLOCATE_SCB ( 
	SCBADR	: REF $LONGWORD
	)	=
BEGIN

EXTERNAL
	PSM$GL_USER_CTX
	;

LOCAL
	SCB		: REF $BBLOCK,
	SCB_SIZE	: INITIAL (PSM$S_SCB)
	;

SCB_SIZE = .SCB_SIZE + .PSM$GL_USER_CTX;

RETURN_IF_ERROR_ (LIB$GET_VM (SCB_SIZE, SCB));

CH$FILL (0, .SCB_SIZE, .SCB);

SCB[PSM$B_TYPE] = PSM$K_STRUCTURE_SCB;
SCB[PSM$B_LEVEL] = SMBMSG$K_STRUCTURE_LEVEL;
SCB[PSM$W_SIZE] = PSM$S_SCB;

SCBADR[] = .SCB;

SS$_NORMAL

END;

%SBTTL 'INITIALIZE_SCB'
! Functional Description:
!		Initializes an SCB at START_STREAM time.
!
! Formal Parameters:
!		SCB	- address of SCB to be initialized
!
! Implicit Inputs:
!		PSM$MIT - message item table containing information
!			  about message items in SCB.
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$INITIALIZE_SCB ( 
	SCB	: REF $BBLOCK
	)	=
BEGIN

LOCAL
	IOB :	REF $BBLOCK
	;


IF .SCB[PSM$B_LEVEL] NEQU SMBMSG$K_STRUCTURE_LEVEL
OR .SCB[PSM$B_TYPE]  NEQU PSM$K_STRUCTURE_SCB
THEN
    RETURN SMB$_INVSTRLEV;


DECR ITEM_CODE FROM SMBMSG$K_MAX_ITEM_CODE TO 0
DO
    IF .PSM$MIT[.ITEM_CODE, MIT_B_TYPE] EQL MIT_K_DYNAMIC
    THEN
	INIT_DYN_DESC_ (.SCB + .PSM$MIT[.ITEM_CODE, MIT_W_OFFSET]);


SCB_SIZE_ (ACCOUNTING_DATA) = PSM$S_ACCOUNTING_AREA;
SCB_ADDR_ (ACCOUNTING_DATA) = SCB[PSM$T_ACCOUNTING_AREA];


SCB_SIZE_ (CONDITION_VECTOR) = PSM$S_CONDITION_AREA;
SCB_ADDR_ (CONDITION_VECTOR) = SCB[PSM$T_CONDITION_AREA];


INIT_DYN_DESC_ (SCB[PSM$Q_CONDITION_TEXT]);
INIT_DYN_DESC_ (SCB[PSM$Q_USER_BUFFER]);
STR$GET1_DX (UPLIT WORD (PSM$K_DEFBUFSIZ), SCB[PSM$Q_USER_BUFFER]);
INIT_DYN_DESC_ (SCB[PSM$Q_MODULE_LIST]);
INIT_DYN_DESC_ (SCB[PSM$Q_MODULE_NAME]);
INIT_DYN_DESC_ (SCB[PSM$Q_PAGE_HEADER]);
INIT_DYN_DESC_ (SCB[PSM$Q_SEARCH_CONTEXT]);


INIT_QUEUE_HEADER_ (SCB[PSM$Q_CHECKPOINT_QUEUE]);
INIT_QUEUE_HEADER_ (SCB[PSM$Q_INPUT_QUEUE]);


! Cause the first longword of the SCB to point to itself.
!
$ASSUME ($BYTEOFFSET (PSM$Q_QLINKS), EQL, 0)
INIT_QUEUE_HEADER_ (SCB[PSM$Q_QLINKS]);

SS$_NORMAL

END;

%SBTTL 'READ_ITEM_DX'
! Functional Description:
!		Reads a message item from the SCB into a descriptor.
!
! Formal Parameters:
!		SMB_CONTEXT	- address of the SCB
!		ITEM_CODE	- item to be read
!		DESCRIPTOR	- address of output buffer descriptor
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$READ_ITEM_DX ( 
	SMB_CONTEXT	: REF $LONGWORD,
	ITEM_CODE	: REF $LONGWORD,
	DESCRIPTOR	: REF $BBLOCK
	) =
BEGIN

LOCAL	ITEM_ADR;

IF .ITEM_CODE[] GEQU SMBMSG$K_MAX_ITEM_CODE THEN RETURN PSM$_INVITMCOD;

ITEM_ADR = .SMB_CONTEXT[] + .PSM$MIT[.ITEM_CODE[], MIT_W_OFFSET];

CASE .PSM$MIT[.ITEM_CODE[], MIT_B_TYPE] FROM MIT_K_STATIC TO -1 OF
    SET

    [MIT_K_DYNAMIC, MIT_K_STATIC]:
	COPY_DX_DX_ (.ITEM_ADR, .DESCRIPTOR);

    [OUTRANGE]:
	BEGIN
	LOCAL SIZE;
	SIZE = .PSM$MIT[.ITEM_CODE[], MIT_B_TYPE];	! Copy needs a ref.
	
	COPY_R_DX_ ( SIZE,				! Table item size 
		    .ITEM_ADR,				! Table item address
		    .DESCRIPTOR )			! User item desc

	END;
    TES;

SS$_NORMAL

END;

%SBTTL 'READ_ITEM_R'
! Functional Description:
!		NOT SUPPORTED IN V4.0.
!
! Formal Parameters:
!		?desc
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$READ_ITEM_R ( 
	SMB_CONTEXT	: REF $LONGWORD,
	ITEM_CODE	: REF $LONGWORD,
	BUFSIZ		: REF $WORD,
	BUFADR		: REF VECTOR [,BYTE]
	) =
BEGIN

LOCAL USER_DESCRIPTOR : VECTOR [2];

USER_DESCRIPTOR [0] = .BUFSIZ[];
USER_DESCRIPTOR [1] = .BUFADR;

RETURN PSM$READ_ITEM_DX (.SMB_CONTEXT, .ITEM_CODE, USER_DESCRIPTOR);

END;

%SBTTL 'RESET_SCB'
! Functional Description:
!		Resets an SCB for starting a new task
!
! Formal Parameters:
!		SCB	: SCB address
!
! Implicit Inputs:
!		PSM$MIT - message item table containing information
!			  about message items in SCB.
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$RESET_SCB ( 
	SCB	: REF $BBLOCK
	)	=
BEGIN

DECR ITEM_CODE FROM SMBMSG$K_MAX_ITEM_CODE TO 0
DO
    BEGIN
    BIND ITEM = .SCB + .PSM$MIT[.ITEM_CODE, MIT_W_OFFSET];
    IF .PSM$MIT[.ITEM_CODE, MIT_V_RESET]
    THEN
	CASE .PSM$MIT[.ITEM_CODE, MIT_B_TYPE] FROM MIT_K_STATIC TO -1 OF
	    SET

	    [MIT_K_DYNAMIC]:
		IF .DESC_SIZE_ (ITEM) NEQ 0
		THEN
		    STR$FREE1_DX (ITEM);

	    [MIT_K_STATIC]:
		CH$FILL (0, .DESC_SIZE_ (ITEM), .DESC_ADDR_ (ITEM));

	    [OUTRANGE]:
	 	CH$FILL (0, .PSM$MIT[.ITEM_CODE, MIT_B_TYPE], ITEM);

	    TES;
    END;


STR$FREE1_DX (SCB[PSM$Q_CONDITION_TEXT]);
STR$FREE1_DX (SCB[PSM$Q_MODULE_LIST]);
STR$FREE1_DX (SCB[PSM$Q_MODULE_NAME]);


CH$FILL (0, PSM$S_ACCOUNTING_AREA, SCB[PSM$T_ACCOUNTING_AREA]);
CH$FILL (0, PSM$S_CONDITION_AREA, SCB[PSM$T_CONDITION_AREA]);


SCB[PSM$L_PAGE]			= 0;
SCB[PSM$L_PRINT_FLAGS]		= 0;
SCB[PSM$L_START_PAGE]		= 0;
SCB[PSM$L_STOP_PAGE]		= 0;
SCB[PSM$L_TASK_FLAGS]		= 0;

SCB[PSM$L_T_MARGIN]		= 0;
SCB[PSM$L_L_MARGIN]		= 0;

CLEAR_QUAD_ (SCB[PSM$Q_ITEM_FLAGS]);

SCB[PSM$L_KEEP_ALIVE]		= -1;
SCB[PSM$L_RECORD_NUMBER]	= 1;
SCB[PSM$L_SERVICE_STATUS]	= SS$_NORMAL;
SCB[PSM$A_XLATE_TABLE]		= PSM$XLATE_8BIT;


! Release any outstanding IO control block
!
IF .SCB[PSM$A_IOB] NEQ 0
THEN
    BEGIN
    INSERT_TAIL_ (.SCB[PSM$A_IOB] + $BYTEOFFSET(IOB_Q_QLINKS),
	SCB[PSM$Q_BUFFER_QUEUE]);
    SCB[PSM$A_IOB] = 0;
    END;


! Empty the checkpoint queue
!
BEGIN
LOCAL PTR: REF $BBLOCK;
UNTIL REMOVE_HEAD_ (PTR, SCB[PSM$Q_CHECKPOINT_QUEUE])	! True when empty
DO
    PSM$DEALLOCATE_DSB (.PTR - $BYTEOFFSET (DSB_Q_QLINKS));
SCB[PSM$B_CHECKPOINT_DEPTH] = 0;
END;


! Empty the nested input queue
!
BEGIN
LOCAL PTR: REF $BBLOCK;
UNTIL REMOVE_HEAD_ (PTR, SCB[PSM$Q_INPUT_QUEUE])	! True when empty
DO
    PSM$DEALLOCATE_DSB (.PTR - $BYTEOFFSET (DSB_Q_QLINKS));
SCB[PSM$B_INPUT_DEPTH] = 0;
END;


SS$_NORMAL

END;

%SBTTL 'UPDATE_SCB'
! Functional Description:
!		Updates an SCB with messages items
!
! Formal Parameters:
!		SCB	- address of SCB to be updated
!		MESSAGE	- address of descriptor of message
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$UPDATE_SCB ( 
	SCB	: REF $BBLOCK,
	MESSAGE	: REF VECTOR
	)	=
BEGIN

BUILTIN
	SP
	;

LOCAL
	STATUS_1,
	CONTEXT		: INITIAL (0),
	ITEM		: INITIAL (0),
	DESC		: $DYNAMIC_DESC
	;

SCB[PSM$L_REQUEST_CONTROL] = 0;

WHILE (STATUS_1 = SMB$READ_MESSAGE_ITEM (.MESSAGE, CONTEXT, ITEM, DESC))
DO
    BEGIN
    BITVECTOR [SCB[PSM$Q_ITEM_FLAGS], .ITEM] = 1;
    PSM$WRITE_ITEM_DX (SCB, ITEM, DESC);
    END;

IF .STATUS_1 NEQ SMB$_NOMOREITEMS
THEN
    RETURN .STATUS_1;

SS$_NORMAL

END;

%SBTTL 'WRITE_ITEM_DX'
! Functional Description:
!		NOT SUPPORTED IN V4.0.
!
! Formal Parameters:
!		?desc
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$WRITE_ITEM_DX ( 
	SMB_CONTEXT	: REF $LONGWORD,
	ITEM_CODE	: REF $LONGWORD,
	DESCRIPTOR	: REF $BBLOCK
	) =
BEGIN

LOCAL	ITEM_ADR;

IF .ITEM_CODE[] GEQU SMBMSG$K_MAX_ITEM_CODE THEN RETURN PSM$_INVITMCOD;

ITEM_ADR = .SMB_CONTEXT[] + .PSM$MIT[.ITEM_CODE[], MIT_W_OFFSET];

CASE .PSM$MIT[.ITEM_CODE[], MIT_B_TYPE] FROM MIT_K_STATIC TO -1 OF
    SET

    [MIT_K_DYNAMIC, MIT_K_STATIC]:
	COPY_DX_DX_ (.DESCRIPTOR, .ITEM_ADR);

    [OUTRANGE]:
	CH$COPY (
	    .DESC_SIZE_ (.DESCRIPTOR),		! User item size
	    .DESC_ADDR_ (.DESCRIPTOR),		! User item address
	    0,					! Zero fill
	    .PSM$MIT[.ITEM_CODE[], MIT_B_TYPE],	! Table item size
	    .ITEM_ADR);				! Table item address

    TES;

SS$_NORMAL

END;

%SBTTL 'WRITE_ITEM_R'
! Functional Description:
!		NOT SUPPORTED IN V4.0.
!
! Formal Parameters:
!		?desc
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$WRITE_ITEM_R ( 
	SMB_CONTEXT	: REF $LONGWORD,
	ITEM_CODE	: REF $LONGWORD,
	BUFSIZ		: REF $WORD,
	BUFADR		: REF VECTOR [,BYTE]
	) =
BEGIN

LOCAL USER_DESCRIPTOR : VECTOR [2];

USER_DESCRIPTOR [0] = .BUFSIZ[];
USER_DESCRIPTOR [1] = .BUFADR;

RETURN PSM$WRITE_ITEM_DX (.SMB_CONTEXT, .ITEM_CODE, USER_DESCRIPTOR);

END;

%SBTTL 'ALLOCATE_MEMORY'
! Functional Description:
!		Allocates memory through RTL routines.
!
! Formal Parameters:
!		BYTES	- number of bytes of memory to allocate
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		address of allocated memory
!
! Side Effects:
!		none
!--
ROUTINE ALLOCATE_MEMORY ( 
	BYTES
	)	: =
BEGIN

LOCAL
	MEMORY
	;

SIGNAL_IF_ERROR_ (LIB$GET_VM (BYTES, MEMORY));

RETURN .MEMORY;

END;

END
ELUDOM
