MODULE setp0$disp ( IDENT = 'V04-000', MAIN = setp0$disp) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  SET Command (SETP0.EXE)
!
! ABSTRACT:
!
!	This is the main option dispatcher for all options
!	handled by the SETP0 image which completely resides
!	is the P0 region, stack and all, in order to map
!	certain sections into P1 space.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Tim Halvorsen, Dec 1979
!
! Modified by:
!
!	V03-003 AEW0001		Anne E. Warner		20-Jul-1984
!		Turn on the capability to report messages which was
!		originally supressed.
!
!	V03-002	BLS0291		Benn Schreiber		24-MAR-1984
!		Move SET PASSWORD here from SET.
!
!	V03-001	GAS0112		Gerry Smith		29-Mar-1983
!		Use new CLI interface.
!
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';	! VAX/VMS common definitions


!
! Table of contents
!

FORWARD ROUTINE
    setp0$disp;				! Main option dispatcher

!
! External routines
!

EXTERNAL ROUTINE
    cli$get_value;			! Get value from CLI

!
! Global definitions
!

GLOBAL
    setp0$l_status:	INITIAL(ss$_normal);	! Status returned from option

!
! Macro to set up two associated tables.  The first table is a list of
! descriptor addresses.  These descriptors contain the option names.
! The second table is a corresponding list of addresses of option routines.
!
! If a new option is added to SETP0, all that is required in this 
! module is to add one line of code, the option name, e.g. WORKING_SET.
! Then, the name of the global routine that is dispatched to from this 
! routine will be named SET$WORKING_SET.
!
MACRO

    option_name [option] = %EXACTSTRING(4, 0, option)%,

    option_address [option] = %NAME(%STRING('set$',%STRING(option)))%,

    option_declare [option] = %NAME(%STRING('set$',%STRING(option))) : NOVALUE%,

    make_table (name) = 
	LITERAL %NAME(%STRING(name,'_table_length')) = %LENGTH - 1;
	EXTERNAL ROUTINE option_declare(%REMAINING);
	OWN
	    %NAME(%STRING(name,'_option')) : VECTOR[%LENGTH - 1]
	    INITIAL (option_name(%REMAINING)),

	    %NAME(%STRING(name,'_routine')) : VECTOR[%LENGTH - 1]
	    INITIAL (option_address(%REMAINING));%;


!
! Set up a table of all options, and another table pointing to the address
! of the routine for each option.
!

make_table (set,
		message,
		password);

ROUTINE handler (sigargs, mechargs) =
BEGIN

!---
!
! This routine is a condition handler established by the main
! routine.  It saves the most severe condition for the exit status.
!
!---

MAP
    sigargs : REF $BBLOCK,
    mechargs : REF $BBLOCK;
BIND
    signame = sigargs[chf$l_sig_name] : $BBLOCK;	! Name of signal


IF .setp0$l_status EQL 1			! If no errors yet, use
THEN setp0$l_status = .signame;			! this one.

IF NOT .signame					! If an error signal
AND .signame[sts$v_severity]			! and severity is worse
GTRU .$BBLOCK[setp0$l_status, sts$v_severity] 	! than current saved severity
THEN setp0$l_status = .signame;			! then save it for exit

RETURN ss$_resignal;				! Resignal to get message
END;

ROUTINE setp0$disp =			! Main dispatching routine

!++
! Functional description
!
!	This routine decodes the set option and dispatches to
!	the option specific routine.
!
! Calling sequence
!
!	Called from the Command Language Interpreter
!
! Input parameters
!
!	None
!
! Output parameters
!
!	None
!
! Routine value
!
!	Error returned from option routine or SS$_NORMAL.
!
!----

BEGIN

LOCAL
    desc : BLOCK[dsc$c_s_bln,BYTE],	! Option descriptor
    status;				! status code

ENABLE handler;					! Enable the condition handler

!
! Get option, and dispatch to it
!
$init_dyndesc(desc);			! Make descriptor dynamic
IF NOT (status = cli$get_value(%ASCID 'OPTION', desc))
THEN RETURN .status;

desc[dsc$w_length] = MINU (.desc[dsc$w_length], 4);

INCR index FROM 0 TO set_table_length - 1 DO
    BEGIN
    IF CH$EQL(.desc[dsc$w_length], .desc[dsc$a_pointer],
	      .desc[dsc$w_length], set_option[.index])
    THEN
	BEGIN
	(.set_routine[.index])();
	EXITLOOP
	END;
    END;

RETURN (.setp0$l_status );		! Exit with message

END;

END
ELUDOM
