	$BEGIN	RMS0OPEN,000,RM$RMS,<DISPATCH FOR OPEN OPERATION>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS32
;
; Abstract:
;		This module is the highest level control routine
;		to perform the $open function.
;
; Environment:
;		Star processor running Starlet exec.
;
; Author:	L. F. Laverdure	 Creation Date: 3-JAN-1977
;
; Modified By:
;
;	V03-033	RAS0320		Ron Schaefer		 6-Jul-1984
;		Narrow the list of continuable search list errors.
;
;	V03-032	RAS0309		Ron Schaefer		14-Jun-1984
;		Check the protection of installed open images exactly
;		as the ACP would.  Also return execute-only access
;		permission information as well.
;
;	V03-031	RAS0301		Ron Schaefer		30-Apr-1984
;		Fix bug in RAS0286 that caused an infinite loop
;		if doing a knownfile lookup over the net or for an
;		explicit version number.
; 
;	V03-030	RAS0286		Ron Schaefer		 3-Apr-1984
;		Change the knownfile lookup logic with respect to
;		searchlists so that if a knownfile is requested,
;		examine each searchlist element as a known file;
;		then restart at the beginning for ordinary file opens.
;		Revise the searchlist continuation rules/errors.
;
;	V03-029	RAS0285		Ron Schaefer		 2-Apr-1984
;		Complete RAS0270 by copying/preserving the DID in the FWA's
;		FIB buffer.  For normal $OPEN/$CREATE, the DID is already
;		in the FIB buffer;  however, for open by NAM block and FID, the
;		DID in the FIB must be 0 at the access.  If that happens,
;		we copy the DID from the NAM block over into the FIB after
;		we filled in the remaining NAM block fields.
;		Note that this will NOT work for people who fondle their NAM
;		blocks between the $SEARCH and the $OPEN, but they didn't
;		work before when we depended on the NAM block.
;		This also doesn't work for known files since the DID is not
;		saved.   However, deleting, submitting or spooling known files
;		doesn't seem to be too important.
;
;	V03-028	DAS0002		David Solomon		25-Mar-1984
;		Fix incorrect reference to XABOPN_ARGS (use RM$ symbol).
;
;	V03-027	DAS0001		David Solomon		25-Mar-1984
;		Fix broken CASE.
;
;	V03-026	RAS0268		Ron Schaefer		12-Mar-1984
;		Move searchlist loop decision from RM$PRFLNM to here
;		so as to get consistent processing.
;
;	V03-025	RAS0243		Ron Schaefer		23-Jan-1984
;		Add $PRDEF macro and add RM$ prefix to global symbol.
;
;	V03-024	RAS0218		Ron Schaefer		 5-Dec-1983
;		Make node names work as search list elements.
;		Preserve NAM block context properly across search list elements.
;	
;	V03-023	RAS0209		Ron Schaefer		 4-Nov-1983
;		Clean-up returned device characteristics by calling
;		a central routine RM$RET_DEV_CHAR.
;
;	V03-022	RAS0198		Ron Schaefer		 6-Oct-1983
;		Merge $OPEN and $CREATE searchlist looping logic into a 
;		single routine RM$CHECK_SRCHLIST.  Only loop for
;		certain types of error; not for all.
;
;	V03-021	RAS0196		Ron Schaefer		 3-Oct-1983
;		Fix RAS0195 to preserve the status value of the previous
;		searchlist element when deassigning the channel.
;		Also correct wrong data type usage in RAS0189.
;
;	V03-020	RAS0195		Ron Schaefer		27-Sep-1983
;		Return unsuccessful channels assigned when looping 
;		thru the searchlist.
;
;	V03-019	RAS0189		Ron Schaefer		 9-Sep-1983
;		Complete known file support by implementing a
;		kernel mode routine to properly update system
;		refcnts et. al.
;
;	V03-018	KPL0005		Peter Lieberwirth	15-Aug-1983
;		Don't clear pointer to JNLBDB before RELEASEALL because
;		RELEASEALL no longer releases journal BDBs.
;
;	V03-017 LJA0087		Laurie J. Anderson	 5-Aug-1983
;		Clear the create bit at the end of the create.  Do
;		not want that bit set for the duration of the file being
;		open.
;
;	V03-016	RPG0016		Bob Grosso		29-Jul-1983
;		Skip known file open if there was an explicit version.
;		Use FID to open file if installed but not open.
;
;	V03-015	KPL0004		Peter Lieberwirth	25-Jul-1983
;		Fix bug in AT journaling introduced in v03-011.
;
;	V03-014	LJK0224		Lawrence J. Kenah	6-Jul-1983
;		Store WCB address in CCB for files installed /OPEN
;
;	V03-013	KBT0552		Keith B. Thompson	5-Jul-1983
;		More kf work
;
;	V03-012	KBT0547		Keith B. Thompson	22-Jun-1983
;		Use new kf routine
;
;	V03-011	KPL0003		Peter Lieberwirth	20-Jun-1983
;		Add local routine WRITE_AT_JNL to flush file-related
;		AT journal record to the journal.  This is not done at
;		ASSJNL time because the AT journal record accumulates
;		info during the operation, and is only complete at the
;		end.
;
;	V03-010	KBT0531		Keith B. Thompson	17-Jun-1983
;		Implement search list
;
;	V03-009	KPL0002		Peter Lieberwirth	30-May-1983
;		Clear pointer to journal BDB when it is deallocated.
;
;	V03-008	RAS0155		Ron Schaefer		 3-May-1983
;		Make indirect PPF I/O look like a terminal regardless
;		of the SQO bit.
;
;	V03-007	ROW0170		Ralph O. Weber		 3-MAR-1983
;		Correct broken branch destination to RM$CLOSE3 in error 
;		processing.
;
;	V03-006	LJA0061		Laurie J. Anderson	23-Feb-1983
;		Move RM$FILLNAM to RM0NAMSTR which is where it belongs.
;		It fills in the NAM block with the resultant name string plus...
;
;	V03-005	KBT0421		Keith B. Thompson	30-Nov-1982
;		Change ifb$w_devbufsiz to ifb$l_devbufsiz
;
;	V03-004	LJA0020		Laurie Anderson		02-Sep-1982
;		Define an alternate entry point for top level open.
;		If restart from create, just try to open the file.
;
;	V03-003	KBT0187		Keith B. Thompson	23-Aug-1982
;		Reorganize psects and rename entry point to single '$'
;
;	V03-002	RAS0084		Ron Schaefer		 2-Apr-1982
;		Return RAT=CR for stream format files even if
;		the file attribute is none.
;
;	V03-001	KPL0001		Peter Lieberwirth	22-Mar-1982
;		Fix bugcheck on shared file ISAM UFO open by making
;		sure IFAB address is in R10.
;
;	V02-052	CDS0002		C Saether		 5-Feb-1982
;		Return GBC field to FAB from ifab.
;
;	V02-051	TMK0001		Todd M. Katz		17-Jan-1982
;		If the device is mounted foreign, arrange it so that
;		when the resultant name string is written out it
;		contains a null length directory (ie []).
;
;	V02-050	RAS0051		Ron Schaefer		22-Dec-1981
;		Properly probe the NAM block whenever its address is
;		fetched from the user's FAB.
;
;	V02-049	JWH0001		Jeffrey W. Horn		16-Dec-1981
;		Clear FWA$V_DIR bit if either not directory device, or
;		SDI device.
;
;	V02-048	TMH0048		Tim Halvorsen		05-Sep-1981
;		Translate FWA$Q_DEVICE string once before storing it
;		into DVI, so that DVI always gets the actual device name.
;
;	V02-047	PSK0001		P. S. Knibbe		31-Aug-1981
;		Change default length for key xab's to be
;		keylen_v2. Anything longer will be legal.
;
;	V02-046	KEK0008		K. E. Kinnear		12-Aug-1981
;		On foreign devices, return both DEV and SDC characteristics
;		bits as we got them from the exec, not SDC with DIR clear.
;
;	V02-045	MCN0005		Maria del C. Nasr	10-Feb-1981
;		Make sure magtape is mounted before opening file.
;
;	V02-044 SPR35461	Maria del C. Nasr	02-Feb-1981
;		Change return from CIF processing to check for any errors
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;
	$ARMDEF
	$CCBDEF
	$CHPCTLDEF
	$DEVDEF
	$FABDEF
	$FCBDEF
	$FIBDEF
	$FWADEF
	$IFBDEF
	$IPLDEF
	$KFEDEF
	$NAMDEF
	$PCBDEF
	$PRDEF
	$PSLDEF
	$RJBDEF
	$RJRDEF
	$RMSDEF
	$UCBDEF
	$WCBDEF
	$XABALLDEF
	$XABKEYDEF
	$XABSUMDEF

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8			; bit offset to fop

;
; Own Storage:
;

RM$XABOPN_ARGS::
	.BYTE	XAB$C_SUM,XAB$C_SUMLEN,XBC$C_OPNSUM3
	.BYTE	XAB$C_KEY,XAB$C_KEYLEN_V2,XBC$C_OPNKEY3
	.BYTE	XAB$C_ALL,XAB$C_ALLLEN,XBC$C_OPNALL3
	.BYTE	0

	.SBTTL	RMS$OPEN - $OPEN ROUTINE

;++
;
; RMS$OPEN -- Open routine.
;
;  This routine performs the highest level $open processing.
;  its functions include:
;
;	1. Common setup.
;	2. Dispatch to organization-dependent code.
;	3. Dispatch to the display routine.
;
;
; Calling Sequence:
;
;	Entered from exec as a reult of user's calling sys$open
;	(e.g., by using the $open macro).
;
; Input Parameters:
;
;	AP	user's argument list addr
;
; Implicit Inputs:
;
;	The contents of the fab and possible related user interface
;	blocks.
;
; Output Parameters:
;
;	R0	status code
;	R1	destroyed
;
; Implicit Outputs:
;
;	The various fields of the fab are filled in to reflect
;	the status of the open file. (see rms functional spec for
;	a complete list.)
;	An ifab is initialized to reflect the open file.
;
;	A completion ast is queued if so specified by the user.
;
; Completion Codes:
;
;	Standard rms (see functional spec for list).
;
; Side Effects:
;
;	none
;
;--

	$ENTRY	RMS$OPEN
	$TSTPT	OPEN
	BSBW	RM$FSETI		; do common setup
					; note: does not return on error

;
; Alternate entry point for open.  Called from create when the create call
; was a restart operation.
;

RM$OPEN_ALT::

;
; An ifab has been set up
;

	CLRL	R10				; no FWA to start with
	BSBW	RM$PRFLNM			; process file name

	BBC	#FAB$V_BRO,IFB$B_FAC(R9),10$	; branch if bro not set
	CSB	#FAB$V_BIO,IFB$B_FAC(R9)	; clear bio (implied
						;  by bro without restrictions)
10$:	BLBC	R0,50$				; exit on error from RM$PRFLNM
20$:	BBC	#FAB$V_KFO+FOP,(R8),22$		; branch if kfo not set
	MOVL	FAB$L_NAM(R8),R7		; get name block
	BSBW	RM$CHKNAM			; can we use it?
	BLBC	R0,22$				; nope
	BBS	#FWA$V_NODE,(R10),25$		; branch on network operation
	BBS	#FWA$V_EXP_VER,(R10),25$	; explicit version, skip KF lookup

;
; INS$KF_SCAN returns R0:
;
;	SS$_NORMAL	- known file found but not open
;
;	RMS$_KFF	- known file found and it was open
;
;	RMS$_FNF	- known file not found
;

	PUSHAL	FAB$L_CTX(R8)			; return KFE in fab
	PUSHL	R7				; filled in name block
	CALLS	#2,INS$KF_SCAN			; go try known file table
	BLBC	R0, 30$				; not installed

	CMPL	#RMS$_KFF,R0			; was the file installed open
	BNEQ	40$				; installed, but not open

	PUSHL	R0				; preserve status
	$CMKRNL_S -				; kernel mode routine to
		ROUTIN=RM$KNOWNFILE		; modify system refcnts et.al.
	MOVL	(SP)+,R1			; recover status
	BLBC	R0,30$				; can't access this file
	MOVL	R1,R0				; set appropriate success code
	BRW	RM$CREATEXIT			; exit from open immediately
						;  if found/open or error

22$:	BRB	100$				; helper branch

;
; Couldn't find this file spec as a known file, 
; try to get another if searchlist is present
;
25$:	RMSERR	FNF				; setup appropriate error in R0
30$:	BBC	#FWA$V_SLPRESENT,(R10),100$	; if no searchlist do normal open
	BSBW	RM$CHK_SLIST			; try again
	BLBS	R0,20$				; did it work?
	BLBC	R1,60$				; should we try again?
	BSBW	RM$DEALLOCATE_FWA		; release exhausted searchlist
	CSB	#FAB$V_KFO+FOP,(R8)		; Make sure not KFO again
	BRB	RM$OPEN_ALT			; try for non-KFO open

;
; Try to open the knownfile normally; if this fails, then go thru the known
; file searchlist lookup logic
;

40$:	SSB	#FAB$V_NAM+FOP,(R8)		; Force NAM block open with FID
	BSBW	RM$SETDID			; process the directory id
	BLBC	R0,30$				; check search list on error
	BSBW	RM$ACCESS			; access the file
	BLBC	R0,30$				; check search list on error
	BRB	RM$OPEN_CIF			; continue with open

60$:	BRW	ERROR				; no, return error

;
; There was a problem with the file spec, try to get another if search list
; are present
;

50$:	TSTL	R10				; have a FWA?
	BEQL	60$				; if not don't check it
	BBC	#FWA$V_SLPRESENT,(R10),60$	; if no search list exit
	BSBW	RM$CHK_SLIST			; try again
	BLBC	R0,60$				; did it work?

100$:	BSBW	RM$SETDID			; process the directory id
	BLBC	R0,50$				; check search list on error
	BSBW	RM$ACCESS			; access the file
	BLBC	R0,50$				; check search list on error

;
;  Return point for create turned into open via 'cif' bit.
;

RM$OPEN_CIF::
	BLBC	R0,ERROR			; exit on error
	BSBW	RM$FILLNAM			; fill in nam block
	BLBC	R0,ERROR			; exit on error

;
;  Copy the DID from the NAM block into the FIB if this is an OPEN by FID
;

	BBC	#FAB$V_NAM+FOP,(R8),5$		; skip if not open with FID
	TSTL	R7				; have a NAM block (from RM$FILLNAM)
	BEQL	5$				; ce la vie'
	MOVL	FWA$Q_FIB+4(R10),R1		; get addr of FIB
	BEQL	5$				; no FIB, no DID
	TSTW	FIB$W_DID(R1)			; have a DID?
	BNEQ	5$				; continue if so
	MOVL	NAM$W_DID(R7),FIB$W_DID(R1)	; copy DID
	MOVW	NAM$W_DID+4(R7),FIB$W_DID+4(R1)	; copy DID last word

;
;  Make sure eof info is in "eof blk + 1, 0 offset" form.
;

5$:	CMPW	IFB$W_FFB(R9),-			; is last block full?
		IFB$L_DEVBUFSIZ(R9)
	BLSSU	10$				; branch if not
	INCL	IFB$L_EBK(R9)			; bump eof block
	CLRW	IFB$W_FFB(R9)			; and zero offset
10$:	BBS	#IFB$V_DAP,(R9),DAPRTN		; branch if network operation

;
;  Dispatch to organization-dependent open code.
;

	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),-	; branch if not magtape
		20$
	BBC	#DEV$V_MNT,IFB$L_PRIM_DEV(R9),-	; error, if magtape not mounted
		ERRDNR
	BBS	#DEV$V_DMT,IFB$L_PRIM_DEV(R9),-	; error, if magtape marked for dismount
		ERRDNR
20$:	CASE	TYPE=B,-			; pick up correct routine
		SRC=IFB$B_ORGCASE(R9),-
		DISPLIST=<RM$OPEN1,RM_OPEN2_BR,RM$OPEN3>


;++
;
;  Error returns
;
;--

;
; Unknown file organization  -  verify bio (or bro) accessed.
;

	RMSERR	ORG				; org not supported
	BITB	#FAB$M_BIO!FAB$M_BRO,-		; either bio or bro set?
		IFB$B_FAC(R9)
	BEQL	ERROR				; branch if not (error)
	RMSSUC
	BRW	RM$COPRTN			; all finished open

RM_OPEN2_BR:
	JMP	RM$OPEN2			; branch aid

ERRRFM:	RMSERR	RFM				; bad rfm field
	BRB	ERROR

ERRDNR:	RMSERR	DNR				; device not mounted
	BRB	ERROR

ERRIRC:	RMSERR	IRC				; illegal fixed record size

ERROR:	CSB	#IFB$V_ACCESSED,(R9)		; don't write file attributes
	CMPB	#IFB$C_IDX,IFB$B_ORGCASE(R9)	; indexed file?
	BNEQ	5$				; branch if not...clean up
	BBS	#IFB$V_DAP,(R9),5$		; branch if network operation
	PUSHL	R0				; push error code on stack
	MOVL	R9,R10				; RM$CLOSE3 expects IFAB in R10
	JSB	G^RM$CLOSE3			; close indexed file
	POPL	R0				; pop error code from stack
5$:	BRW	RM$CLSCU			; clean up and return


;
;  Return here from org-dependent routines.
;

RM$COPRTN::
	BLBC	R0,ERROR
	BBS	#IFB$V_DAP,(R9),DAPRTN		; branch if network operation

;
; Now handle summary, allocation, and key xab's.
;

	MOVAB	RM$XABOPN_ARGS,AP		; move addr of xab table to ap
	BSBW	RM$XAB_SCAN			; scan the xab chain
	BLBC	R0,ERROR			; get out on error

;
;  Override run-time deq with user value, if any.
;

DAPRTN:	MOVW	FAB$W_DEQ(R8),IFB$W_RTDEQ(R9)
	BNEQ	5$				; branch if speced
	MOVW	IFB$W_DEQ(R9),IFB$W_RTDEQ(R9)	; otherwise pick up deq

;
; From file header.
;

	MOVW	IFB$W_DEQ(R9),FAB$W_DEQ(R8)	; and put in fab

;
;  Return bdb and i/o buffer to free space and page lists.
;

5$:	BBC	#IFB$V_AT,IFB$B_JNLFLG(R9),7$	; skip if not AT journaling
	BSBW	WRITE_AT_JNL			; write AT record - eat any error
7$:	BSBW	RM$RELEASALL			; return bdb and buffer

;
;  Validate rfm.
;

	ASSUME	IFB$V_RFM	EQ	0
	ASSUME	IFB$S_RFM	EQ	4

	BICB2	#^XF0,IFB$B_RFMORG(R9)		; leave only rfm in rfmorg

;
;  Check for rfm in supported range.
;

	BBS	#IFB$V_BIO,IFB$B_FAC(R9),10$	; don't check if bio
	CMPB	IFB$B_RFMORG(R9),#FAB$C_MAXRFM
	BGTRU	ERRRFM

;
;  If fixed length record format, then set mrs from lrl in case this
;  is an fcs-11 file.
;

10$:	CMPB	IFB$B_RFMORG(R9),#FAB$C_FIX	; fixed len rec?
	BNEQ	20$				; branch if not
	MOVW	IFB$W_LRL(R9),IFB$W_MRS(R9)	; set record length
	BLEQ	ERRIRC				; branch if invalid

;
; force stream format files to appear to have RAT non-null,
; even if they don't.
;
	ASSUME	FAB$C_STM	LT	FAB$C_STMLF
	ASSUME	FAB$C_STM	LT	FAB$C_STMCR

20$:	CMPB	IFB$B_RFMORG(R9),#FAB$C_STM	; stream format?
	BLSSU	RM$COPRTN1			; nope
	BITB	#<FAB$M_CR!FAB$M_FTN!FAB$M_PRN>,-
		IFB$B_RAT(R9)			; carriage control already set?
	BNEQ	RM$COPRTN1			; ok
	BISB2	#FAB$M_CR,IFB$B_RAT(R9)		; force RAT=CR

;
;  Return point for indirect open of process permanent file.
;
;
;  Set the rfm, rat, org, and mrs fields into the fab.
;

RM$COPRTN1::
	MOVB	IFB$B_RFMORG(R9),FAB$B_RFM(R8)	; set rfm
	MOVB	IFB$B_RAT(R9),FAB$B_RAT(R8)	; set rat

;
;  Return point for indirect open of process permanent file and rfm and
;  rat already set.
;

RM$COPRTN2::
	INSV	IFB$B_ORGCASE(R9),-		; set org
		#FAB$V_ORG,#FAB$S_ORG,-
		FAB$B_ORG(R8)
	BBC	#IFB$V_SEQFIL,(R9),10$		; branch if not seq file shr'd

	ASSUME	FAB$C_SEQ	EQ	0

	CLRB	FAB$B_ORG(R8)			; this is really a sequential file.
						;  Orgcase says relative when shared.
10$:	MOVW	IFB$W_MRS(R9),FAB$W_MRS(R8)	; set mrs
	MOVW	IFB$W_GBC(R9),FAB$W_GBC(R8)	; set gbc

;
;  If vfc record format, check for 0 fixed header size and if
;  found make it 2 bytes.
;

	CMPB	IFB$B_RFMORG(R9),#FAB$C_VFC
	BNEQ	20$				; omit check if not vfc
	TSTB	IFB$B_FSZ(R9)			; check for default
	BNEQ	30$				; branch if value specified
	MOVB	#2,IFB$B_FSZ(R9)		; set default value
	BRB	30$				; continue
20$:	CLRB	IFB$B_FSZ(R9)			; guarantee 0 fsz for non-vfc rfm
						;  (note: fixes rms-11 bug of fsz=2)
30$:	RMSSUC					; inidcate successful open


;++
;
;  Common exit for $create and $open.
;
;--

CREOPEN_EXIT:
	BLBS	R0,2$				; branch if no error
1$:	BRW	ERROR				; otherwise go to exit on error

;
;  Save the various close option bits in ifab
;

2$:	CSB	#IFB$V_CREATE,(R9)		; clear the "doing create" bit
	BBS	#IFB$V_PPF_IMAGE,(R9),5$	; don't save options if indirect

	ASSUME	FAB$V_RWC+1	EQ	FAB$V_DMO
	ASSUME	FAB$V_DMO+1	EQ	FAB$V_SPL
	ASSUME	FAB$V_SPL+1	EQ	FAB$V_SCF
	ASSUME	FAB$V_SCF+1	EQ	FAB$V_DLT

	EXTZV	#FAB$V_RWC+FOP,#5,(R8),R1	; get option bits

	ASSUME	IFB$V_RWC+1	EQ	IFB$V_DMO

	ASSUME	IFB$V_SPL+1	EQ	IFB$V_SCF
	ASSUME	IFB$V_SCF+1	EQ	IFB$V_DLT

	INSV	R1,#IFB$V_RWC,#5,(R9)		; and save them

;
;  If this is foreign magtape, rewind the tape if rwo is set.
;

	BBC	#DEV$V_FOR,IFB$L_PRIM_DEV(R9),5$; branch if not foreign
	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),5$; or if not magtape
	BBC	#FAB$V_RWO+FOP,(R8),5$		; or if rwo not speced
	BSBW	RM$REWIND_MT			; rewind the tape
	BLBC	R0,1$				; branch on error

;
;  Set 'blk' bit in ifab for magtape.
;

5$:	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),8$; branch if not magtape
	BISB2	#FAB$M_BLK,IFB$B_RAT(R9)	; set no spanning bit

;
;  Set the fsz, bks, stv, alq, dev, and sdc fields into fab.
;

8$:	MOVB	IFB$B_FSZ(R9),FAB$B_FSZ(R8)	; set fsz
	MOVB	IFB$B_BKS(R9),FAB$B_BKS(R8)	; set bks
	BBC	#IFB$V_SEQFIL,(R9),9$		; branch not seq file shared
	CLRB	FAB$B_BKS(R8)			; always zero for seq file
9$:	MOVW	IFB$W_CHNL(R9),FAB$L_STV(R8)	; set stv to chan #
	MOVL	IFB$L_HBK(R9),FAB$L_ALQ(R8)	; set alq

;
;  Move device characteristics bits into the fab.
;

	BSBW	RM$RET_DEV_CHAR			; set DEV and SDC fields

;
;  Check for user file open option.
;

20$:	BBS	#FAB$V_UFO+FOP,(R8),40$		; branch if ufo option
	BRW	RM$EXRMS			; return to user

;
;  Leave file open for user but remove ifab
;  (no further rms operations available on this file).
;

40$:	BRW	RM$RETIFB


;++
;
;  Common create clean up and exit
;
;  Return all bdb's and buffers to free space list, causing unlock if locked.
;
;--

RM$CREATEXIT::
	PUSHL	R0				; save status code

;
;  Entry point with status already pushed on the stack.
;

RM$CREATEXIT1::
	BBC	#IFB$V_AT,IFB$B_JNLFLG(R9),10$	; skip if not AT journaling
	BSBW	WRITE_AT_JNL			; write AT record - eat any error
10$:	BSBW	RM$RELEASALL			; release all bdb's
	POPL	R0				; restore status
	BRW	CREOPEN_EXIT			; join open finish up code


	.SUBTITLE RM$CHK_SLIST - Process the searclist loop
;++
;
;	These routines are called when a file access failed and a searchlist
;	is present.  It evaluates whether the error allows the list to
;	continue and updates the list to the next searchlist element.
;
;	RM$CHK_SLIST 	- Normal file access failures can continue
;	RM$CHK_SLIST1	- File access failures that create-if can continue
;
; Inputs:
;	R0 - failure status of previous access operation.
;
; Outputs:
;	R0 - success/fail
;	     (if searchlist is exhausted, status is previous access status.)
;	R1 - undefined if R0 = success
;	     if R0 = fail, success if processing may continue, failure otherwise
;
; Implicit inputs:
;	R11 - impure ptr
;	R10 - FWA ptr
;	R9  - IFB ptr
;	R8  - FAB ptr
;
; Implicit outputs:
;	FWA and IFB fields modified.
;
; Saved stack:
;	ERR(SP)	=>	R0 error code
;	STV(SP)	=>	FAB$L_STV(R8)
;	FNB(SP)	=>	NAM$L_FNB
;	RSL(SP)	=>	NAM$B_RSL
;	ESL(SP)	=>	NAM$B_ESL
;
;--

;
; Stack offsets for saved context
;

ESL	= 0			;	NAM$B_ESL
RSL	= 1			;	NAM$B_RSL
FNB	= 4			;	NAM$L_FNB
STV	= 8			;	FAB$L_STV
ERR	= 12			;	R0
STACK_SIZE = 16			;	Size of stack to allocate

;
;  Errors that searchlist processing should continue from
;  

RM$SLIST_ERRS::
	RMSERR_WORD	DEV			; invalid device name
	RMSERR_WORD	DNF			; directory not found
	RMSERR_WORD	DNR			; device not ready
	RMSERR_WORD	FNF			; file not found
	RMSERR_WORD	NMF			; no more files found
RM$SLIST_ERR_CNT1 == .-RM$SLIST_ERRS
	RMSERR_WORD	ACC			; ACP file access error
	RMSERR_WORD	FND			; ACP file lookup error
	RMSERR_WORD	PRV			; privilege violation
RM$SLIST_ERR_CNT == .-RM$SLIST_ERRS

RM$CHK_SLIST1::
	PUSHL	S^#<RM$SLIST_ERR_CNT1/2>	; get number of errs to check
	BRB	CHK_SLIST			; and check

RM$CHK_SLIST::
	PUSHL	S^#<RM$SLIST_ERR_CNT/2>		; get number of errs to check

CHK_SLIST:
	MOVL	(SP),R1				; get count
10$:	CMPW	R0,B^RM$SLIST_ERRS-2[R1]	; continue from this err?
	BNEQ	40$				; nope
	BSBB	S_LOOP				; try next element
	BLBS	R0,30$				; got a good one
	BLBC	R1,CHK_SLIST			; get any kind of element?
30$:	MOVL	#1,R1				; processing can continue
	ADDL2	#4,SP				; discard count
	RSB					; return

40$:	SOBGTR	R1,10$				; try another
	ADDL2	#4,SP				; discard count
	RSB					; return don't continue and
						; previous input status

S_LOOP:	SSB	#FWA$V_SL_PASS,(R10)		; flag search list pass
	PUSHL	R0				; save error status
	PUSHL	FAB$L_STV(R8)			; save stv secondary code
	CLRQ	-(SP)				; room for NAM block data
	MOVL	FAB$L_NAM(R8),R7		; get nam address
	BEQL	22$				; branch if none
	BSBW	RM$CHKNAM			; check nam validity
	BLBC	R0,22$				; branch if illegal (no error)
	MOVL	NAM$L_FNB(R7),FNB(SP)		; save file name status
	CLRL	NAM$L_FNB(R7)			; clear file name status
	MOVB	NAM$B_RSL(R7),RSL(SP)		; save result string
	CLRB	NAM$B_RSL(R7)			; clear size
	MOVB	NAM$B_ESL(R7),ESL(SP)		;  and expanded string
	CLRB	NAM$B_ESL(R7)			; clear size
	CLRB	NAM$T_DVI(R7)			; clear device ID

	ASSUME	NAM$W_DID EQ NAM$W_FID+6

	CLRQ	NAM$W_FID(R7)			; and file ID's
	CLRL	NAM$W_DID+2(R7)			; 

22$:	BBCC	#IFB$V_ACCESSED,(R9),25$ 	; deaccess any open file or
	BSBW	RM$DEACCESS			; network links
25$:	$DASSGN_S	CHAN=IFB$W_CHNL(R9)	; deassign old channel
	CLRW	IFB$W_CHNL(R9)			; clear it
	BSBW	RM$PRFLNMALT			; try again
	BLBS	R0,30$				; try next element
	TSTL	R0				; end of list?
	BEQL	40$				; no, so return the error
30$:	CLRL	R1				; found an element
	ADDL2	#STACK_SIZE,SP			; discard saved context
	RSB

;
; XPFN exited with RMS$_NOMLIST, no more search list to parse, so restore
; the original error code and name block string lengths
;

40$:	MOVL	FAB$L_NAM(R8),R7		; get nam address
	BEQL	42$				; branch if none
	BSBW	RM$CHKNAM			; check nam validity
	BLBC	R0,42$				; branch if illegal (no error)
	MOVB	ESL(SP),NAM$B_ESL(R7)		; restore expanded string
	MOVB	RSL(SP),NAM$B_RSL(R7)		;  and result string
	MOVL	FNB(SP),NAM$L_FNB(R7)		; restore file name flags
42$:	ADDL2	#8,SP				; discard NAM space
	MOVL	(SP)+,FAB$L_STV(R8)		; set stv secondary code
	MOVL	(SP)+,R0			; restore error status
	MOVL	#1,R1				; end-of-list encountered
	RSB					; exit	

	.SUBTITLE RM$KNOWNFILE - Kernel Mode Known FILE Support
;++
;
;	This routine is called, in kernel mode, when an open known file
;	is found.  The following operations are performed:
;	
;	1.  Check the volume and file protection to see if the user
;	    as access to the file.
;	2.  If the user has read access in addition to execute,
;	    report that fact as well.
;	3.  Increment the refcnt on the shared file
;	    window and to set the channel appropriately.
;
;	These operations must be interlocked against process deletion
;	by executing at IPL 2.
;
; Inputs:
;	none
;
; Outputs:
;	R0  -  SS$_NORMAL if access allowed
;	       SS$_NOPRIV if access denied
;
; Implicit inputs:
;	R11 - impure ptr
;	R10 - FWA ptr
;	R9  - IFB ptr
;	R8  - FAB ptr
;
; Implicit outputs:
;	channel and window control blocks modified.
;
;--

	ASSUME	CHPCTL$L_ACCESS	EQ 0
	ASSUME	CHPCTL$L_FLAGS	EQ 4
	ASSUME	CHPCTL$B_MODE	EQ 8

RM$KNOWNFILE::
	.WORD	^M<R2,R3,R4,R5>			; save registers
	PUSHL	#0				; null access mode for volume
	PUSHL	#<CHPCTL$M_READ!CHPCTL$M_USEREADALL> ; set CHPCTL flags
	PUSHL	#ARM$M_READ			; set CHPCTL access
	MOVL	SP,R2				; point to CHPCTL
	BBC	#IFB$V_WRTACC,(R9),10$		; write access?
	BISL2	#ARM$M_WRITE,CHPCTL$L_ACCESS(R2); check for it too
	XORL2	#<CHPCTL$M_WRITE!CHPCTL$M_USEREADALL>,-
		CHPCTL$L_FLAGS(R2)		; set WRITE and clear USEREADALL
10$:	SETIPL	#IPL$_ASTDEL			; prevent process deletion
	MOVL	FAB$L_CTX(R8),R0		; get KFE
	MOVL	KFE$L_WCB(R0),R5		; get WCB
	MOVL	@#CTL$GL_PCB,R4			; get PCB addr
	CLRL	R3				; no CHPRET

;
; Check the volume protection in the UCB.
;

	MOVL	WCB$L_ORGUCB(R5),R1		; get UCB
	MOVL	UCB$L_ORB(R1),R1		; get ORB addr
	MOVL	PCB$L_ARB(R4),R0		; get ARB addr
	JSB	G^EXE$CHKPRO_INT		; check for volume access
	BLBC	R0,100$				; give up if no access

;
;  Now see if the user has requested access  (READ implies EXECUTE)
;

	MOVB	IFB$B_MODE(R9),-
		CHPCTL$B_MODE(R2)		; set CHPCTL access mode
	MOVL	WCB$L_FCB(R5),R1		; get FCB
	PUSHL	FCB$L_FILESIZE(R1)		; save high block for ifb
	MOVAL	FCB$R_ORB(R1),R1		; get ORB addr
	MOVL	PCB$L_ARB(R4),R0		; get ARB addr
	JSB	G^EXE$CHKPRO_INT		; check for read access
	BLBC	R0,20$				; nope
	BISB2	#FAB$M_GET,FAB$B_FAC(R8)	; tell user if so	
	BRB	30$				; and continue

;
;  See if the user has execute-only access
;

20$:	BBC	#FAB$V_EXE,IFB$B_FAC(R9),100$	; execute access?
	BBS	#IFB$V_WRTACC,(R9),100$		; no special check if write
	CMPB	IFB$B_MODE(R9),#PSL$C_SUPER	; can he ask for exe access?
	BGTRU	100$				; nope
	MOVL	#ARM$M_EXECUTE,-
		CHPCTL$L_ACCESS(R2)		; try execute-only access
	MOVL	PCB$L_ARB(R4),R0		; get ARB addr
	JSB	G^EXE$CHKPRO_INT		; check for execute access
	BLBC	R0,100$				; nope, then return failure
30$:	MOVZWL	IFB$W_CHNL(R9),R0		; get channel number
	JSB	G^IOC$VERIFYCHAN		; R1 contains CCB address
	MOVL	R5,CCB$L_WIND(R1)		; store WCB address in CCB
	INCW	WCB$W_REFCNT(R5)		; and count this user
	MOVL	(SP),IFB$L_HBK(R9)		; stuff high block into ifb
	MOVL	#1,R0				; success!
100$:	SETIPL	#0				; restore IPL
	RET

	.SUBTITLE WRITE_AT_JNL - Local Subroutine
;++
; WRITE_AT_JNL
;
;	This routine calls MAPJNL to write the AT journal buffer for file
;	related information, if necessary.
;
; Inputs:
;
;	r9	ifab
;
; Outputs:
;
;	r0	success or failure
;
;--

WRITE_AT_JNL:

	MOVL	IFB$L_RJB(R9),R4	; get the RJB address
	BEQL	50$			; return to caller if none
	BBC	#RJB$V_AT,RJB$W_FLAGS(R4),50$ ; return if not AT
	MOVZWL	RJB$W_FLAGS(R4),R5	; save flags so we can turn everything
					; off but AT for this MAPJNL call
					; (AI, BI, RU written earlier)
	MOVW	#RJB$M_AT,RJB$W_FLAGS(R4) ; could have used a BICW with
					; complement operator, but this is easier
	JSB	RM$MAPJNL		; write the AT buffer
	MOVL	IFB$L_RJB(R9),R4	; get the RJB address MAPJNL destroyed
	MOVW	R5,RJB$W_FLAGS(R4)	; restore original flags
50$:	RSB				; return to caller	

	.END
