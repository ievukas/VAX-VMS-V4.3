MODULE PAS$WRITE_VARYING ( %TITLE 'Write a varying string'
		IDENT = '1-002'			! File: PASWRIVAR.B32 Edit: SBL1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains a procedure which writes a varying string
!	to a textfile.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
! 1-002 - Make total-width a longword.  SBL 30-June-1982
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$WRITE_VARYING: NOVALUE,			! Write to textfile
    PAS$WRITEV_VARYING: NOVALUE;		! Write to string

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!

%SBTTL 'PAS$WRITE_VARYING - Write a varying string to textfile'
GLOBAL ROUTINE PAS$WRITE_VARYING (
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	STRING: REF VECTOR [,WORD],			! Address of string
	ERROR,						! Error unwind address
	TOTAL_WIDTH: SIGNED				! Total field width
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure writes a varying string to the specified textfile.
!
! CALLING SEQUENCE:
!
!	CALL PAS$WRITE_VARYING (PFV.mr.r, STRING.rvt.r 
!			     [, [ERROR.j.r] [, TOTAL_WIDTH.rl.v]])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	STRING		- The address of the string to write.  The string's
!			  current length is in the first word of the string.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  in case of an error.
!
!	TOTAL_WIDTH	- Optional.  Total field width, defaults to string length.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	If the file is the standard file INPUT or OUTPUT, it is implicitly opened.
!
! SIGNALLED ERRORS:
!
!	LINTOOLON - line too long
!	NEGWIDDIG - negative Width or Digits specification is not allowed
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,! File Control block
	FIELD_WIDTH,			! Total width of field
	PFV_ADDR: VOLATILE,		! Enable argument
	UNWIND_ACT: VOLATILE,		! Enable argument
	ERROR_ADDR: VOLATILE;		! Enable argument

    BUILTIN
	ACTUALCOUNT;			! Count of arguments

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    !+
    ! Get ERROR parameter, if present.
    !-

    IF ACTUALCOUNT () GEQU 3
    THEN
	ERROR_ADDR = .ERROR;		! Set unwind address

    PFV_ADDR = PFV [PFV$R_PFV];		! Set PFV address

    !+
    ! Validate PFV and get FCB.
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Do common initialization.
    !-

    PAS$$INIT_WRITE (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! See if we have enough room in the record.
    !-

    IF ACTUALCOUNT () GEQU 4
    THEN
	BEGIN
	FIELD_WIDTH = .TOTAL_WIDTH;
	IF .FIELD_WIDTH LSS 0
	THEN
	    $PAS$IO_ERROR (PAS$_NEGWIDDIG,0);
	END
    ELSE
	FIELD_WIDTH = .STRING [0];	! Length is in first word

    BEGIN
    LOCAL
	EXTRA;			! Extra characters past end of line
    EXTRA = (.FCB [FCB$A_RECORD_CUR] + .FIELD_WIDTH) - .FCB [FCB$A_RECORD_END];
    IF .EXTRA GTR 0
    THEN
	$PAS$IO_ERROR (PAS$_LINTOOLON,1,.EXTRA);
    END;

    !+
    ! Move leading blanks, if any
    !-

    IF .FIELD_WIDTH - .STRING [0] GTR 0
    THEN
	BEGIN
	FCB [FCB$A_RECORD_CUR] = CH$FILL (%C' ', .FIELD_WIDTH - .STRING [0],
            .FCB [FCB$A_RECORD_CUR]);
	FIELD_WIDTH = .STRING [0];
	END;

    !+
    ! Move string to buffer
    !-

    FCB [FCB$A_RECORD_CUR] = CH$MOVE (.FIELD_WIDTH, STRING [1], .FCB [FCB$A_RECORD_CUR]);

    !+
    ! Call WRITE epilogue routine to move the last character written to the
    ! user's buffer and to unlock the file variable.
    !-

    PAS$$END_WRITE (PFV [PFV$R_PFV], FCB [FCB$R_FCB]);

    RETURN;

    END;					! End of routine PAS$WRITE_VARYING

!<BLF/PAGE>

%SBTTL 'PAS$WRITEV_VARYING - Write varying to string'
GLOBAL ROUTINE PAS$WRITEV_VARYING (
	MAX_LENGTH: WORD,				! Maximum length of string
	STRING_LINE: REF VECTOR [, WORD],		! String to write to
	STRING: REF VECTOR [, WORD],			! String to write
	ERROR,						! Error unwind address
	TOTAL_WIDTH: SIGNED				! Total field width
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure writes a varying to the specified string.
!
! CALLING SEQUENCE:
!
!	CALL PAS$WRITEV_STRING (MAX_LENGTH.rw.v, STRING_LINE.wvt.r,
!	   STRING.rvt.r [, [ERROR.j.r] [TOTAL_WIDTH.rl.v]])
!
! FORMAL PARAMETERS:
!
!	MAX_LENGTH	- The maximum length of STRING_LINE.
!
!	STRING_LINE	- A varying string to which the output will be appended.
!
!	STRING		- The varying string to write.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  in case of an error.
!
!	TOTAL_WIDTH	- The width of the field to write.  Optional, defaults
!			  to STRING_LENGTH.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	See PAS$WRITE_VARYING
!
!--

    BEGIN

    LOCAL
	PFV: $PAS$PFV_FILE_VARIABLE,	! Pascal File Variable
	ARG_LIST: VECTOR [5, LONG],	! Argument list
	PFV_ADDR: VOLATILE,		! Enable argument
	UNWIND_ACT: VOLATILE,		! Enable argument
	ERROR_ADDR: VOLATILE;		! Enable argument

    BUILTIN
	ACTUALCOUNT;			! Count of arguments

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    !+
    ! Get ERROR parameter, if present.
    !-

    IF ACTUALCOUNT () GEQU 4
    THEN
	ERROR_ADDR = .ERROR;		! Set unwind address

    PFV_ADDR = PFV [PFV$R_PFV];		! Set PFV address

    !+
    ! Set up ARG_LIST.
    !-

    ARG_LIST [0] = 2;			! Two arguments
    ARG_LIST [1] = PFV [PFV$R_PFV];	! PFV address
    ARG_LIST [2] = STRING [0];		! String to write
    IF ACTUALCOUNT () GEQU 5
    THEN
	BEGIN
	ARG_LIST [0] = 4;		! Add two more arguments
	ARG_LIST [3] = 0;		! Error address
	ARG_LIST [4] = .TOTAL_WIDTH;	! Field width
	END;

    !+
    ! Call PAS$$DO_WRITEV to do the work, giving it the address of
    ! PAS$WRITE_VARYING to call.
    !-

    PAS$$DO_WRITEV (PFV [PFV$R_PFV], .MAX_LENGTH, STRING_LINE [0], ARG_LIST, 
	PAS$WRITE_VARYING);

    RETURN;

    END;					! End of routine PAS$WRITEV_VARYING

!<BLF/PAGE>

END						! End of module PAS$WRITE_VARYING

ELUDOM
