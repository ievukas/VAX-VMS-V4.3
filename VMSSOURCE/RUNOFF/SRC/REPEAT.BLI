%TITLE 'Processes the .REPEAT command.'
MODULE REPEAT (	IDENT = 'V04-000'
    		%BLISS32 [ , ADDRESSING_MODE ( EXTERNAL =	LONG_RELATIVE,
    					       NONEXTERNAL =	LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Processes the .REPEAT command.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: December, 1978
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	006	REM00006	Ray Marshall	11-August-1983
!		Previous edit was incomplete.  There were several RETURN
!		  statements -- all of which needed return values.
!
!	005	REM00005	Ray Marshall	July-1983
!		Routine REPEAT was changed to cause it to return a value.
!
!	004	KAD00004	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FLGT : FLAG_TABLE,
    FS01 : FIXED_STRING,
    GCA : GCA_DEFINITION,
    IRA : FIXED_STRING,
    KHAR,
    NUMPRM : NUMPRM_DEFINE,
    SCA : SCA_DEFINITION;

EXTERNAL LITERAL 				!Error messages
    RNFCEM,
    RNFILC,
    RNFINM,
    RNFMNL,
    RNFMQS,
    RNFQST;

EXTERNAL ROUTINE
    ENDCMT,
    ERMA,
    GETQS,
    OUTJ,
    OUTNJ,
    PUS,
    SKPSEP;

GLOBAL ROUTINE repeat (handler_code) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See the ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	HANDLER_CODE is a dummy argument, used only for conformance
!	with other routines.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:	None
!
!--

    BEGIN

    LOCAL
	hold_err_count,
	hold_ira : VECTOR [4],
	rpt_string : fixed_string [150],
	hold_khar,
	repeat_count,
	result;

    IF NOT .num_result
    THEN
	BEGIN
	endcmt ();
	RETURN true;
	END;

    IF .num_length EQL 0
    THEN
	BEGIN
	erma (rnfmnl, true);
	RETURN true;
	END;

    IF .num_value LEQ 0
    THEN
	BEGIN
	erma (rnfinm, true);
	RETURN true;
	END;

    skpsep (ira);				!Skip spaces, tabs, and a comma.

    !Set up area to hold the repeat text
    fs_maxsize (rpt_string) = 150;
    fs_init (rpt_string);

    result = getqs (rpt_string);	!Try to get what's to be repeated.

    IF .result NEQ getqs_normal
    THEN
    !Analyze error a bit more closely.
	IF .result EQL getqs_too_long
	THEN
	    BEGIN
	    erma (rnfqst, false);
	    RETURN true;
	    END
	ELSE
	!Missing or improperly delimited quoted string.
	    BEGIN
	    erma (rnfmqs, true);
	    RETURN true;
	    END;

!
!		%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%(    !Check to see if user is trying to repeat a command.  If
    !so, tell him it won't work and refuse to even try it.
    !NOTE: This restriction may be lifted later, when instead
    !of calling SCANT, PUS gets called instead.
    BEGIN

    LOCAL
	ptr,
	x;

    ptr = .fs_start (rpt_string);		!Cop a peek at first character.
    x = CH$RCHAR (.ptr);			!...

    IF .x EQL .flgt [con_flag, flag_character]	!<CONTROL flag> ?
    THEN
    !User is trying to do something not yet allowed.
	BEGIN
	erma (rnfilc, false);
	RETURN true;
	END;

	! ***** The above code will eventually change when we have fully
	! ***** implemented repeated commands
    END;
)%
!		%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
    !Save status of current input string, and
    !substitute what the user wants repeated instead.

    BEGIN				!Save status of IRA.
    MAP
	ira : VECTOR;

    INCR i FROM 0 TO 3 DO
	hold_ira [.I] = .ira [.I];

    hold_khar = .khar;			!Preserve next character.
    hold_err_count = .gca_errcnt;	!Remember error status.
    END;

    repeat_count = .num_value;		!Pick up repeat count.

    INCR i FROM 1 TO .repeat_count DO
	BEGIN
	fs_maxsize (ira) = .fs_maxsize (rpt_string);	! Point IRA to user's
	fs_length (ira) = .fs_length (rpt_string);	!  string for use by
	fs_start (ira) = .fs_start (rpt_string);	!  KCNS and PUS
	fs_next (ira) = .fs_start (rpt_string);
	kcns ();					!Initialize scan.

	pus (false);		! Process "uneated" string without using ENDWRD.

!
!		%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%(
	scant ();		!Scan user's string as if it were text.
	IF NOT .sca_fill	!End of line means end of record if not filling.
	THEN
	    IF .sca_justify
	    THEN
		outj ()				!No fill, justify
	    ELSE
		outnj ();			!No fill, no justify
)%
!		%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!
	IF .hold_err_count NEQ .gca_errcnt
	THEN
	    EXITLOOP;	!Abort processing if an error occurs.
	END;

    !Restore previous status of IRA, FS01 and KHAR
    BEGIN
    MAP
	ira : VECTOR;
    INCR i FROM 0 TO 3 DO
	ira [.i] = .hold_ira [.i];	! Restore IRA
    khar = .hold_khar
    END

    END;					!End of REPEAT

END						!End of module
ELUDOM
