MODULE RPG$EXT_INDS( %TITLE 'Read external RPGII indicators'
		IDENT = '1-003'		! file: RPGEXTIND.B32 EDIT:DG1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!
!++
! FACILITY:	RPGII SUPPORT
!
! ABSTRACT
!
!	This routine reads external RPGII indicators.
!
!
! ENVIRONMENT:	Vax-11 User Mode
!
! AUTHOR: Debess Grabazs, CREATION DATE: 1-FEB-1983
!
! MODIFIED BY:
!
! 1-001 - Original. DG 1-FEB-1983
! 1-002 - Take out %ASCID - was making code unsharable. DG 11-Jul-1983
! 1-003 - Change dynamic string to static.  DG 15-May-1984
!--

!<BLF/PAGE>

%SBTTL 'Declarations'
!+
! PROLOGUE FILE:
!-

REQUIRE 'RTLIN:RPGPROLOG';			! Switches, PSECTs, macros,
						!  linkages and LIBRARYs

!+
! LINKAGES
!	NONE
!-

!+
! TABLE OF CONTENTS:
!-

FORWARD ROUTINE
	RPG$EXT_INDS;

!+
! INCLUDE FILES
!	NONE
!-

!+
! MACROS
!	NONE
!-

!+
! EQUATED SYMBOLS
!	NONE
!-

!+
! EXTERNAL REFERENCES
!-

EXTERNAL ROUTINE
	LIB$STOP,					! Stop execution via signalling
	OTS$CVT_L_TI;					! Convert longword to text

EXTERNAL LITERAL
	RPG$_FATINTERR,					! Fatal internal error
	RPG$_INVARG;					! Invalid argument


%SBTTL 'RPG$EXT_INDS - Read external RPGII indicators'
GLOBAL ROUTINE RPG$EXT_INDS(
			NUMBER				! Indicator number
			) =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	The logical name RPG$EXT_INDS can be assigned to an 
!	indicator list of up to eight RPGII external indicators.
!	An indicator is set ON by specifying it in the RPG$EXT_INDS
!	indicator list.  This routine accepts the number of a
!	particular indicator as its input parameter.  It then checks
!	the indicator list for a match.  If the indicator is present
!	in the list, the routine returns a value of 1; otherwise it
!	returns 0.
!
! CALLING SEQUENCE
!
!	indicator_value.wlc.v = RPG$EXT_INDS (number.rl.v)
!
! FORMAL PARAMETERS:
!
!	number		indicator number
!
! IMPLICIT INPUTS:
!
!	RPG$EXT_INDS -	logical name which may be assigned to
!			an indicator list of up to eight RPGII
!			external indicators
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! RETURN VALUE:
!
!	SWITCH_VALUE -	1 means indicator is ON
!			0 means indicator is OFF
!
! SIDE EFFECTS:
!
!	NONE
!
!--
!

!<BLF/PAGE>

 
    BEGIN

    LITERAL
	MIN_INDICATOR	= 1,
	MAX_INDICATOR	= 8,
	ON		= 1,
	OFF		= 0;

    LOCAL
	DEST_DESC: BLOCK[8,BYTE],		! Local desc for call to $TRNLOG
	LOG_DESC: BLOCK[8,BYTE],		! Local desc for call to $TRNLOG
	NAME_LENGTH,				! Length of logical name string
	NAME_TEXT: VECTOR [LNM$C_NAMLENGTH, BYTE];
						! Local string for logical name
	
    !+
    !
    ! Make sure input parameter is in acceptable range.
    !
    !-
    IF .NUMBER LSS MIN_INDICATOR OR .NUMBER GTR MAX_INDICATOR
    THEN LIB$STOP (RPG$_INVARG);

    !+
    !
    ! Initialize descriptors for call to $TRNLOG.
    !
    !-
    DEST_DESC[DSC$W_LENGTH] = LNM$C_NAMLENGTH;
    DEST_DESC[DSC$B_CLASS] = DSC$K_CLASS_S;
    DEST_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
    DEST_DESC[DSC$A_POINTER] = NAME_TEXT;

    LOG_DESC[DSC$W_LENGTH] = %CHARCOUNT ('RPG$EXT_INDS');
    LOG_DESC[DSC$B_CLASS] = DSC$K_CLASS_S;
    LOG_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
    LOG_DESC[DSC$A_POINTER] = UPLIT ('RPG$EXT_INDS');

    !+
    !
    ! Try to translate the logical name RPG$EXT_INDS.
    !
    !-
    IF ($TRNLOG (LOGNAM = LOG_DESC, RSLLEN = NAME_LENGTH, 
		RSLBUF = DEST_DESC)) EQL SS$_NORMAL
    THEN
	!+
	!
	! Logical name translated - see if requested indicator 
	! is set or not
	!
	!-
	BEGIN

	LOCAL
	    NUM_STR: BLOCK[8,BYTE],		! Local desc for call to OTS$CVT_L_TI
	    NUM_STR_TEXT: INITIAL (%C'n');	! Local string for converted number
        NUM_STR[DSC$W_LENGTH] = %CHARCOUNT ('n');
        NUM_STR[DSC$B_CLASS] = DSC$K_CLASS_S;	! Initialize descriptor for
        NUM_STR[DSC$B_DTYPE] = DSC$K_DTYPE_T;	!  conversion
        NUM_STR[DSC$A_POINTER] = NUM_STR_TEXT;
 	IF NOT (OTS$CVT_L_TI (NUMBER, NUM_STR)) ! Convert input number to string
	THEN
	    LIB$STOP (RPG$_FATINTERR);
	IF CH$FAIL (CH$FIND_CH (.NAME_LENGTH, NAME_TEXT, .NUM_STR_TEXT))
    	THEN 
	    RETURN OFF
	ELSE 
	    RETURN ON;

	END
    ELSE
	!+
	!
	! Logical name did not translate - return 0.
	!
	!-
	RETURN OFF;

    END; 

END ELUDOM
