%TITLE 'NML CLEAR parameter module'
MODULE NML$CLEAR (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines to process the NCP CLEAR command.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-DEC-1979
!
! MODIFIED BY:
!
!	V03-005	MKP0007		Kathy Perko	26-Mar-1984
!		Fix CLEAR LOGGING bug introduced by change to permanent database
!		operation which caused the record keys to be invisible to all
!		the the I/O routines.
!
!	V03-004	MKP0006		Kathy Perko	9-Aug-1984
!		Add X25 Access Module entity.
!
!	V03-003	MKP0005		Kathy Perko	4-Aug-1983
!		Alter routines that manipulate permanent database records so
!		they are transparent to the ISAM keys at the beginning.
!
!	V03-002	MKP0004		Kathy Perko	28-June-1982
!		Add qualifiers to entity handling.  Add X25 and X29
!		Server modules, X25-Trace module, and X25-Protocol
!		module.
!
!	V03-001	MKP0003		Kathy Perko	22-May-1982
!		Change QIO interface to use double search keys and add
!		X-25 stuff.
!
!	V02-002	MKP0002		Kathy Perko	31-Dec-1981
!		Fix CLEAR EXEC so that a wildcard search key is
!		used.
!
!	V02-001	MKP0001		Kathy Perko	21-July-1981
!		Add circuit entity, make changes for multidrop.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$CLEARENTITY	: NOVALUE,
    NML$CLEAREXECUTOR	: NOVALUE,
    NML$CLEARKNONODES	: NOVALUE,
    NML_CLEARENTITY,
    NML$CLEARKNOLOG	: NOVALUE,
    NML$CLEARLOGGING	: NOVALUE,
    NML_CLEARLOGGING	: NOVALUE,
    NML_CLEARLOGALL	: NOVALUE,
    NML$CLEARKNOWN	: NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

!
! Parameter buffer and descriptor for handling volatile data.
!
OWN
    NML$T_EVTBUFFER  : VECTOR [NML$K_RECBFLEN, BYTE],
    NML$T_P2BUFFER   : VECTOR [NML$K_P2BUFLEN,  BYTE],
    NML$T_NFBBUFFER  : VECTOR [100,  BYTE],
    NML$T_PRMBUFFER  : VECTOR [256, BYTE];
BIND
    NML$Q_EVTBFDSC  = UPLIT (NML$K_RECBFLEN, NML$T_EVTBUFFER)  : DESCRIPTOR,
    NML$Q_P2BFDSC   = UPLIT (NML$K_P2BUFLEN,  NML$T_P2BUFFER)   : DESCRIPTOR,
    NML$Q_NFBBFDSC  = UPLIT (100, NML$T_NFBBUFFER)   : DESCRIPTOR,
    NML$Q_PRMBFDSC  = UPLIT (256, NML$T_PRMBUFFER)  : DESCRIPTOR;
!
! Entity buffer and descriptor.
!
OWN
    NML$T_ENTBUFFER : BBLOCK [NML$K_ENTBUFLEN],
    NML$Q_ENTBFDSC  : DESCRIPTOR
		      INITIAL (0, NML$T_ENTBUFFER);

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL ROUTINE
    NMA$INSERTFLD,
    NMA$SEARCHFLD,
    NML$ADDEVENTS,
    NML$ADDFILTERS,
    NML$BLD_REPLY,
    NML$BLDALLDES,
    NML$BLDP2,
    NML$BLDSETQBF,
    NML$ERROR_1,
    NML$GETEXEID,
    NML$GETINFTABS,
    NML$GET_ENTITY_IDS,
    NML$GETNXTSNK,
    NML$NETQIO,
    NML$REMSRC,
    NML$SAVEVENTS,
    NML$SEND;


%SBTTL 'NML$CLEARENTITY  Clear volatile entity parameters'
GLOBAL ROUTINE NML$CLEARENTITY (ENTITY, ENTITY_LEN, ENTITY_ADR,
				QUAL_PST, QUAL_LEN, QUAL_ADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine clears parameters for the specified entity type.
!	Its purpose is to allow the same code to be used for both
!	singular and plural entity operations.
!
! INPUTS:
!
!	ENTITY		Entity type code.
!	ENTITY_LEN	Byte count of entity id string.
!	ENTITY_ADR	Address of entity id string.
!	QUAL_PST	Qualifier PST entry address
!	QUAL_LEN	Qualifier length
!	QUAL_ADR	Qualifier address
!
! OUTPUTS:
!
!	Specified parameters or entities cleared from database.
!--

BEGIN

LOCAL
    MSGSIZE;

!
! X25 Server and Trace, and X29 Server databases have only one entry.  So
! always do a wildcard clear of these databases.
!
IF .ENTITY EQL NML$C_X25_SERV OR
   .ENTITY EQL NML$C_X29_SERV OR
   .ENTITY EQL NML$C_TRACE THEN
    ENTITY_LEN = -1;

NML_CLEARENTITY (.ENTITY, .ENTITY_LEN, .ENTITY_ADR,
		.QUAL_PST, .QUAL_LEN, .QUAL_ADR);
NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE); ! Build message
NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);    ! Send message error
END;				! End of NML$CLEARENTITY


%SBTTL 'NML$CLEAREXECUTOR  Clear volatile executor parameters'
GLOBAL ROUTINE NML$CLEAREXECUTOR (ENTITY, DUM1, DUM2, DUM3,
					DUM4, DUM5) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine clears executor parameters.
!
! INPUTS:
!
!	ENTITY		Entity type code.
!	DUM1 - DUM5	Not used.
!
! OUTPUTS:
!
!	Executor parameters cleared from the database.
!--

    BEGIN

    LOCAL
	EXEADR,
	MSGSIZE;

    EXEADR = 0;				! Executor address is zero
!
! If the entire executor node entry is to be deleted then attempt
! to delete the executor parameters.  If this is successful then
! delete the executor remote node parameters.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_ALL]
    THEN
	BEGIN

	IF NML_CLEARENTITY (NML$C_EXECUTOR, -1, EXEADR, 0, 0, 0)
	THEN
	    NML_CLEARENTITY (NML$C_NODE, 2, EXEADR, 0, 0, 0);

	END
    ELSE
	BEGIN
!
! If only certain executor parameters are to be deleted then check to see
! if the group of parameters is for the executor only or for the executor
! parameters which are common with other remote nodes.
!
	IF .NML$GL_PRS_FLGS [NML$V_PRS_EXEPG]
	THEN
	    NML_CLEARENTITY (NML$C_EXECUTOR, -1, EXEADR, 0, 0, 0)
	ELSE
	    NML_CLEARENTITY (NML$C_NODE, 2, EXEADR, 0, 0, 0);

	END;
!
! Build and send the status message.
!
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
    NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

    END;				! End of NML$CLEAREXECUTOR


%SBTTL 'NML$CLEARKNONODES  Clear volatile node parameters'
GLOBAL ROUTINE NML$CLEARKNONODES (ENTITY, DUM1, DUM2, DUM3,
					DUM4, DUM5) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine clears parameters for all nodes.
!
! INPUTS:
!
!	ENTITY		Entity type code.
!	DUM1 - DUM5	Not used.
!
! OUTPUTS:
!
!	Specified node parameters or nodes cleared from database.
!--

BEGIN

IF NOT .NML$GL_PRS_FLGS [NML$V_PRS_LOOPG]
THEN
	BEGIN
!
! Clear executor node parameters.
!
	NML$CLEAREXECUTOR (NML$C_EXECUTOR, 0, 0);
!
! Clear remote node parameters.
!
	NML$CLEARKNOWN (NML$C_NODE, 0, 0,
			0, 0, 0);		! No qualifier

	END
!
! If the parameter is specific to loop nodes then clear loop node parameters.
!
ELSE
	NML$CLEARKNOWN (NML$C_LOOPNODE, 0, 0,
				0, 0, 0);	! No qualifier

END;				! End of NML$CLEARKNONODES


%SBTTL 'NML_CLEARENTITY  Clear volatile entity parameters'
ROUTINE NML_CLEARENTITY (ENTITY, ENTITY_LEN, ENTITY_ADR,
				QUAL_PST, QUAL_LEN, QUAL_ADR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine clears parameters for the specified entity.
!
! INPUTS:
!
!	ENTITY		Entity code.
!	ENTITY_LEN	Length of entity id string in bytes.
!	ENTITY_ADR	Address of entity id string.
!	QUAL_PST	Qualifier PST entry address
!	QUAL_LEN	Qualifier length
!	QUAL_ADR	Qualifier address
!
! OUTPUTS:
!
!	Modifies contents of the following:
!
!		NML$T_ENTBUFFER
!		NML$Q_ENTBFDSC [DSC$W_LENGTH]
!		NML$AB_MSGBLOCK
!		NML$T_P2BUFFER
!		NML$T_PRMBUFFER
!--

BEGIN

    LOCAL
	DB,
	SRCHKEY1,
	SRCHKEY2,
	FUNC,
	MSGSIZE,
	NODADDR,
	NFBDSC : DESCRIPTOR,
	P2DSC  : DESCRIPTOR,
	QBFDSC : DESCRIPTOR,
	STATUS,
	TMPSNK;

!
! Set up search key value for QIO.  In this case it's the entity ID for
! the entity being cleared or deleted (CLEAR ALL).
!
DB      = .NML$AB_ENTITYDATA [.ENTITY, EIT$B_DATABASE];
SRCHKEY1 = .NML$AB_ENTITYDATA [.ENTITY, EIT$L_SRCH_ID1];
IF .NML$GL_PRS_FLGS [NML$V_PRS_QUALIFIER] THEN
    SRCHKEY2 = .NML$AB_ENTITYDATA [.ENTITY, EIT$L_SRCH_ID2]
ELSE
    BEGIN
    SRCHKEY2 = NFB$C_WILDCARD;
    QUAL_LEN = -1;
    END;
!
! Set appropriate function code
!
IF .NML$GL_PRS_FLGS [NML$V_PRS_ALL]
THEN
	FUNC = NFB$C_FC_DELETE
ELSE
	FUNC = NFB$C_FC_CLEAR;
!
! Clear parameters from the volatile data base entry.
!
NML$BLDSETQBF (.FUNC, .DB,
		.SRCHKEY1, .ENTITY_LEN, .ENTITY_ADR,
		.SRCHKEY2, .QUAL_LEN, .QUAL_ADR,
		NML$Q_NFBBFDSC, NFBDSC,
		NML$Q_P2BFDSC,  P2DSC,
		NML$GQ_QIOBFDSC, QBFDSC);
STATUS = NML$NETQIO (NFBDSC, P2DSC, 0, QBFDSC);

IF .STATUS
THEN
	BEGIN
	NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
	NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;
	END;

RETURN .STATUS
END;				! End of NML_CLEARENTITY


%SBTTL 'NML$CLEARKNOLOG  Clear parameters for known logging'
GLOBAL ROUTINE NML$CLEARKNOLOG (ENTITY, DUM1, DUM2, DUM3,
				DUM4, DUM5) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Clear parameters for all volatile data base entries of the specified
!	type.
!
! INPUTS:
!
!	ENTITY		Entity type code.
!	DUM1 - DUM2	Not used.
!
! OUTPUTS:
!
!	All logging paramters are deleted from the database.
!--

    BEGIN
!
! Add parameters to all sinks.
!
    NML$CLEARLOGGING (.ENTITY, NMA$C_SNK_CON, 0); ! Console
    NML$CLEARLOGGING (.ENTITY, NMA$C_SNK_FIL, 0); ! File
    NML$CLEARLOGGING (.ENTITY, NMA$C_SNK_MON, 0); ! Monitor

    END;				! End of NML$CLEARKNOLOG

%SBTTL 'NML$CLEARLOGGING  Clear logging parameters'
GLOBAL ROUTINE NML$CLEARLOGGING (ENTITY, SNK, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Removes parameters to the volatile data base entry for the specified
!	logging entity.
!
! INPUTS:
!
!	ENTITY		Entity type code.
!	SNK		Logging sink type.
!	DUM2		Not used.
!
! OUTPUTS:
!
!	Specified parameters or entities cleared from database.
!--

    BEGIN

    LOCAL
	MSG_SIZE;			! Message size

!
! See if parameter indicates all parameters.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_ALL]
    THEN
	NML_CLEARLOGALL (.SNK)
    ELSE
!
! Decide if the parameter group is for filters (EFI) or sinks (ESI).
!
	IF .NML$GL_PRS_FLGS [NML$V_PRS_ESIPG]
	THEN
	    NML_CLEARENTITY (NML$C_SINK, 1, SNK)
	ELSE
	    NML_CLEARLOGGING (.SNK, .NML$GW_EVTSNKADR);
!
! Add entity id (sink type code) to entity buffer.
!
    NML$Q_ENTBFDSC [DSC$W_LENGTH] = 1;
    NML$Q_ENTBFDSC [DSC$A_POINTER] = NML$T_ENTBUFFER;
    CH$WCHAR (.SNK, NML$T_ENTBUFFER);
!
! Set up message information.
!
    NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1; ! Set entity descriptor flag
    NML$AB_MSGBLOCK [MSB$A_ENTITY] =
				NML$Q_ENTBFDSC; ! Add entity descriptor pointer
!
! Build and send the message.
!
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSG_SIZE);
    NML$SEND (NML$AB_SNDBUFFER, .MSG_SIZE);

    END;				! End of NML$CLEARLOGGING

%SBTTL 'NML_CLEARLOGGING  Clear entity parameters'
ROUTINE NML_CLEARLOGGING (SNK, SNKADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs clear functions on the logging volatile data 
!	base for both singular and plural requests.
!
! INPUTS:
!
!	SNK		Logging sink type.
!	SNKADR		Sink node address.
!
! OUTPUTS:
!
!	Specified parameters cleared from database.
!--

    BEGIN

    MAP
	SNKADR : WORD;

    LOCAL
	DB,				! Database ID
	SRCHKEY1,			! Search key one ID
	FUNC,				! Function to perform
	DUMDSC   : REF DESCRIPTOR,	! Dummy descriptor for table
	FLDSIZE,
	FLDADR,
	SHOW_NFBDSC	: REF DESCRIPTOR,
	CLEAR_NFBDSC	: DESCRIPTOR,
	P2DSC    : DESCRIPTOR,
	PTR,
	QBFDSC   : DESCRIPTOR,
	RECDSC   : DESCRIPTOR,
	STATUS,
	TABDES   : REF DESCRIPTOR,
	TMPSNK,				! Temporary sink address
	UPDFLG;				! Data base update flag

    NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;	! Initialize message flags
    RECDSC [DSC$W_LENGTH] = 0;		! Initial descriptor
    RECDSC [DSC$A_POINTER] = .NML$GQ_RECBFDSC [DSC$A_POINTER];
!
! Get the logging sink node information.
!
    NML$GETINFTABS (NML$C_LOGGING, NML$C_EVENTS, SHOW_NFBDSC, DUMDSC, 0);
    NML$BLDP2 (0, .SNKADR, -1, 0, NML$Q_P2BFDSC, P2DSC);
!
! Look for the sink node entry in the volatile data base.  If no entry is
! found then just return.  If an error is encountered then return it.
!
    STATUS = NML$NETQIO (.SHOW_NFBDSC, P2DSC, 0, NML$GQ_QIOBFDSC);

    IF .STATUS EQL NML$_STS_CMP
    THEN
	BEGIN
	NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
	NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;
	END;

    IF NOT .STATUS
    THEN
	RETURN;

    PTR = .NML$GQ_QIOBFDSC [DSC$A_POINTER];
!
! If the length of the parameter is not zero then store the event information
! in a record that looks like the permanent data base.
!
    IF NOT NML$SAVEVENTS (.NML$GQ_RECBFDSC [DSC$W_LENGTH],
		 	  .(.PTR)<0,16>,
			  .PTR + 2,
			  RECDSC)
    THEN
	RETURN;
!
! Add event to record.
!
    IF NOT NML$ADDEVENTS (FALSE, RECDSC, .SNK, .SNKADR, UPDFLG)
    THEN
	RETURN;
!
! If there are any filters left, replace them in the volatile data base.
! Otherwise, delete the entire sink node entry.
! 

    IF .UPDFLG
    THEN
	FUNC = NFB$C_FC_SET
    ELSE
	FUNC = NFB$C_FC_DELETE;

    DB = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$B_DATABASE]; 
    SRCHKEY1 = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$L_SRCH_ID1];
    TABDES = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$A_ALLTAB]; 

    NML$BLDALLDES (RECDSC, .TABDES);
    NML$BLDSETQBF (.FUNC, .DB,
    			.SRCHKEY1, 0, SNKADR,
			NFB$C_WILDCARD, -1, 0,
    			NML$Q_NFBBFDSC, CLEAR_NFBDSC,
			NML$Q_P2BFDSC,  P2DSC,
			NML$GQ_QIOBFDSC, QBFDSC);

    IF NML$NETQIO (CLEAR_NFBDSC, P2DSC, 0, QBFDSC)
    THEN
        BEGIN

        NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
        NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;

        END;

    END;				! End of NML_CLEARLOGGING

%SBTTL 'NML_CLEARLOGALL  Clear all logging parameters'
ROUTINE NML_CLEARLOGALL (SNK) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine clears all parameters for the specified logging sink type
!	from the volatile data base.
!
! INPUTS:
!
!	SNK
!
! OUTPUTS:
!
!	All parameters for the sink type are deleted from the database.
!--

    BEGIN

    LOCAL
	BUFEND,
	DB,				! Database ID
	SRCHKEY1,			! Search key one ID
	DUMDSC : REF DESCRIPTOR,
	ENTITYADD,
	ENTITYLEN,
	LISDSC : DESCRIPTOR,		! List buffer descriptor
	MSGFLG : BYTE,			! Response message flag
	SHOW_NFBDSC	: REF DESCRIPTOR,	! NFB descriptor address
	CLEAR_NFBDSC	: DESCRIPTOR,
	P2DSC  : DESCRIPTOR,
	PRMDSC : DESCRIPTOR,
	PTR,				! Pointer into sink node list
	QBFDSC : DESCRIPTOR,
	RECDSC : DESCRIPTOR,		! Record descriptor
	SETDSC : DESCRIPTOR,		! Event parameter descriptor
	SNKADR : WORD,			! Address of sink node
	SRCPTR,				! Pointer to source block
	STATUS,
	STRTFLG,
	TMPSNK;				! Temporary sink address

!
! Get entity database ID, the search key value, and clear the
! parameter descriptor count.
!
    DB = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$B_DATABASE];
    SRCHKEY1 = .NML$AB_ENTITYDATA [NML$C_LOGGING, EIT$L_SRCH_ID1];
    NML$GW_PRMDESCNT = 0;
!
! Clear the sink parameters.  If error then don't do any more.
!
    STATUS = NML_CLEARENTITY (NML$C_SINK, 1, SNK);

    IF NOT .STATUS AND (.STATUS NEQ NML$_STS_CMP)
    THEN
	RETURN;
    !
    ! Purge the logging filter data.
    !
    STRTFLG = FALSE;

    WHILE (STATUS = NML$GET_ENTITY_IDS (NML$C_LOGGING,
				      NMA$C_ENT_KNO,
				      0,
				      .STRTFLG,
				      LISDSC)) DO
	BEGIN

	PTR = .LISDSC [DSC$A_POINTER];
	BUFEND = .LISDSC [DSC$A_POINTER] + .LISDSC [DSC$W_LENGTH];
	!
	! Set up success message as the default.
	!
	NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
	NML$AB_MSGBLOCK [MSB$B_CODE]  = NMA$C_STS_SUC;

	WHILE .PTR LSSA .BUFEND DO
	    BEGIN

	    STRTFLG = TRUE;

	    SNKADR = .(.PTR)<0,16>;
	    PTR = .PTR + 4;
	    !
	    ! Get the data.
	    !
	    NML$GETINFTABS (NML$C_LOGGING, NML$C_EVENTS, SHOW_NFBDSC,
				DUMDSC, 0);
	    NML$BLDP2 (0, .SNKADR, -1, 0, NML$Q_P2BFDSC, P2DSC);

	    STATUS = NML$NETQIO (.SHOW_NFBDSC,
				 P2DSC,
				 0,
				 NML$GQ_QIOBFDSC);
	    !
	    ! If QIO fails then don't do any more.
	    !
	    IF NOT .STATUS
	    THEN
		EXITLOOP;

	    SETDSC [DSC$W_LENGTH]  =
		.(.NML$GQ_QIOBFDSC [DSC$A_POINTER])<0,16>;
	    SETDSC [DSC$A_POINTER] =
		.NML$GQ_QIOBFDSC [DSC$A_POINTER] + 2;

	    CH$MOVE (.SETDSC [DSC$W_LENGTH],
		     .SETDSC [DSC$A_POINTER],
		     .NML$Q_EVTBFDSC [DSC$A_POINTER]);

	    PRMDSC [DSC$W_LENGTH] = .SETDSC [DSC$W_LENGTH];
	    PRMDSC [DSC$A_POINTER] =
		.NML$Q_EVTBFDSC [DSC$A_POINTER];
	    !
	    ! Clear event filters.
	    !
	    SRCPTR = 0;
	    WHILE NML$GETNXTSNK (PRMDSC, .SNK, SRCPTR) DO
		BEGIN

		NML$REMSRC (PRMDSC, .SRCPTR);
		SRCPTR = 0;		    ! Start at the beginning again

		END;

	    !
	    ! If event parameter has nothing in it then clear the entire 
	    ! sink node entry from the volatile data base.
	    !
	    TMPSNK = .SNKADR;
	    IF .PRMDSC [DSC$W_LENGTH] EQLU 0
	    THEN
		NML_CLEARENTITY (NML$C_LOGGING, 0, TMPSNK)
	    ELSE
		BEGIN
		!
		! Set the event information up as a parameter in a 
		! permanent data base record for processing by the 
		! SET QIO routines.
		!
		RECDSC [DSC$W_LENGTH] = 0;
		RECDSC [DSC$A_POINTER] = .NML$GQ_RECBFDSC [DSC$A_POINTER];
	        IF NOT NML$SAVEVENTS (.NML$GQ_RECBFDSC [DSC$W_LENGTH],
				      .PRMDSC [DSC$W_LENGTH],
				      .PRMDSC [DSC$A_POINTER],
				      RECDSC)
		THEN
		    RETURN;
		!
		! Build QIO buffer and add the parameters to the 
		! volatile database entry.
		!
		NML$BLDALLDES (RECDSC,
				.NML$AB_ENTITYDATA [NML$C_LOGGING,
						    EIT$A_ALLTAB]);
		NML$BLDSETQBF (NFB$C_FC_SET, .DB,
				.SRCHKEY1, 0, TMPSNK,
				NFB$C_WILDCARD, -1, 0,
				NML$Q_NFBBFDSC, CLEAR_NFBDSC,
				NML$Q_P2BFDSC,  P2DSC,
				NML$GQ_QIOBFDSC, QBFDSC);

        	STATUS = NML$NETQIO (CLEAR_NFBDSC, P2DSC, 0, QBFDSC);

		IF NOT .STATUS
		THEN
		    EXITLOOP;

		END;
	    END;

	IF NOT .STATUS
	THEN
	    EXITLOOP;

	END;

    IF .STATUS
    OR (.STATUS EQL NML$_STS_CMP)
    THEN
	BEGIN

	NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
	NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;

	END;

    END;				! End of NML_CLEARLOGALL

%SBTTL 'NML$CLEARKNOWN  Clear volatile parameters'
GLOBAL ROUTINE NML$CLEARKNOWN (ENTITY, ENTITY_LEN, ENTITY_ADR,
				DUM3, DUM4, DUM5) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes parameters from all entries of the specified
!	entity type in the volatile data base.
!
! INPUTS:
!
!	ENTITY		Entity type code.
!	ENTITY_LEN	NMA$C_ENT_KNO - clear known entities
!			NMA$C_ENT_ACT - clear active entities
!			>0 - clear entity entries (used when entity has
!			multiple entries, as in the case of GROUPs which
!			have one database entry for each DTE in the group.
!	ENTITY_ADR	Address of entity ID string if ENTITY_LEN > 0.
!	DUM3 - DUM5	Not used.
!
! OUTPUTS:
!
!	Modifies contents of the following:
!
!		NML$T_ENTBUFFER
!		NML$Q_ENTBFDSC [DSC$W_LENGTH]
!		NML$AB_MSGBLOCK
!		NML$AB_SNDBUFFER
!		NML$T_PRMBUFFER
!--

BEGIN

LOCAL
	FUNC,
	BUFEND,
	DB,
	SRCHKEY1,
	ENTITYLEN,
	ENTITYADD,
	ENTIDPTR,
	LISDSC    : DESCRIPTOR,
	MSGSIZE,
	NFBDSC    : DESCRIPTOR,
	P2DSC     : DESCRIPTOR,
	PTR,
	QBFDSC    : DESCRIPTOR,
	RESLEN    : WORD,
	STATUS,
	STRTFLG;
!
! Get volatile database info
!
DB = .NML$AB_ENTITYDATA [.ENTITY, EIT$B_DATABASE];
SRCHKEY1 = .NML$AB_ENTITYDATA [.ENTITY, EIT$L_SRCH_ID1];

!
! Set function code
!
IF .NML$GL_PRS_FLGS [NML$V_PRS_ALL]
THEN
	FUNC = NFB$C_FC_DELETE
ELSE
	FUNC = NFB$C_FC_CLEAR;

STRTFLG = FALSE;

!
! The NICE protocol specifies that, for multiple entity changes, one NICE
! response message must be returned to NCP for each entity changed.  Each
! message must contain the ID of the entity changed.  Therefore, the following
! loop issues one QIO to the ACP to get a bufferfull of entity IDs, and then
! issues one QIO for each entity in the buffer to perform the change.  This
! process continues until the ACP return end-of-file to indicate that there
! are no more entities of the specified type.
!
WHILE NML$GET_ENTITY_IDS (.ENTITY, .ENTITY_LEN, .ENTITY_ADR, .STRTFLG, LISDSC) DO
    BEGIN

    STRTFLG = TRUE;

    BUFEND = .LISDSC [DSC$A_POINTER] + .LISDSC [DSC$W_LENGTH];
    PTR = .LISDSC [DSC$A_POINTER];

    WHILE .PTR LSSA .BUFEND DO
	BEGIN

	ENTIDPTR = NML$T_ENTBUFFER;
	NML$Q_ENTBFDSC [DSC$W_LENGTH] = NML$K_ENTBUFLEN;
	!
	! Entity IDs for the ACP are different from those used by NICE.  The
	! most common cause of this is that the ACP uses a word for the entity
	! string length, and NICE uses a byte.  The following code sets up the
	! two ID forms: the NICE entity ID for the response to NCP
	!		the ACP entity ID to be used in the P2 buffer of the
	!			clear QIO.
	!
	SELECTONEU .ENTITY OF
	    SET
	    [NML$C_NODE]:
		BEGIN

		PTR = .PTR + 4;	! Skip loopnode flag.
		ENTITYADD = .PTR;	! Point to node address

		ENTIDPTR = CH$MOVE (2, .PTR, .ENTIDPTR);
		PTR = .PTR + 4;

		ENTITYLEN = .(.PTR)<0,8>; ! Get name length
		PTR = .PTR + 2;
		CH$WCHAR_A (.ENTITYLEN, ENTIDPTR);
		ENTIDPTR = CH$MOVE (.ENTITYLEN, .PTR, .ENTIDPTR);
		PTR = .PTR + .ENTITYLEN;
		ENTITYLEN = 2;	! Get length of node address

		END;

	    [NML$C_LOOPNODE]:
		BEGIN
		CH$WCHAR_A (0, ENTIDPTR); ! Zero node address
		CH$WCHAR_A (0, ENTIDPTR);
		END;

	    !
	    ! The entity ID for the following modules is the string
	    ! identifying the module (e.g. 'X25-PROTOCOL') followed by the
	    ! parameter id, parameter type, and string for the qualifier
	    ! being set.
	    !
	    [NML$C_X25_ACCESS,
	    NML$C_PROT_NET,
	    NML$C_PROT_DTE,
	    NML$C_PROT_GRP,
	    NML$C_X25_SERV_DEST,
	    NML$C_TRACEPNT,
	    NML$C_X29_SERV_DEST]:
		BEGIN
		SELECTONEU .ENTITY OF
		    SET
	    	    [NML$C_X25_ACCESS]:
			$MOVE_ASCIC ('X25-ACCESS', ENTIDPTR);
	    	    [NML$C_PROT_NET, NML$C_PROT_DTE, NML$C_PROT_GRP]:
			$MOVE_ASCIC ('X25-PROTOCOL', ENTIDPTR);
		    [NML$C_X25_SERV_DEST]:
			$MOVE_ASCIC ('X25-SERVER', ENTIDPTR);
	    	    [NML$C_TRACEPNT]:
			$MOVE_ASCIC ('X25-TRACE', ENTIDPTR);
		    [NML$C_X29_SERV_DEST]:
			$MOVE_ASCIC ('X29-SERVER', ENTIDPTR);
		    TES;
		ENTIDPTR = CH$MOVE (2,
				NML$AB_ENTITYDATA [.ENTITY, EIT$W_DETAIL],
				.ENTIDPTR);
		CH$WCHAR_A (NMA$M_PTY_ASC, ENTIDPTR);
		END;
	    TES;

	!
	! Finish setting up the entity IDs for all but nodes and server modules.
	!
	IF .ENTITY NEQ NML$C_NODE THEN
	    BEGIN
	    ENTITYLEN = .(.PTR)<0,16>;
	    PTR = .PTR + 2;
	    ENTITYADD = .PTR;
	    CH$WCHAR_A (.ENTITYLEN, ENTIDPTR);
	    ENTIDPTR = CH$MOVE (.ENTITYLEN,
				.ENTITYADD,
				.ENTIDPTR);
	    PTR = .PTR + .ENTITYLEN;
	    END;

	NML$Q_ENTBFDSC [DSC$W_LENGTH] = .ENTIDPTR - NML$T_ENTBUFFER;
	!
	! Build the buffers for the QIO and then issue the QIO to the ACP
	! to clear parameters from the volatile database.
	!
	NML$BLDSETQBF (.FUNC, .DB,
		    .SRCHKEY1, .ENTITYLEN, .ENTITYADD,
		    NFB$C_WILDCARD, -1, 0,
		    NML$Q_NFBBFDSC, NFBDSC,
		    NML$Q_P2BFDSC,  P2DSC,
		    NML$GQ_QIOBFDSC, QBFDSC);
	STATUS = NML$NETQIO (NFBDSC, P2DSC, 0, QBFDSC);
	IF .STATUS
	THEN
	    BEGIN
	    NML$AB_MSGBLOCK [MSB$L_FLAGS] = 0;
	    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_SUC;
	    END;
	!
	! Add the entity id to the response message information.
	!
	NML$AB_MSGBLOCK [MSB$V_ENTD_FLD] = 1;
	NML$AB_MSGBLOCK [MSB$A_ENTITY] = NML$Q_ENTBFDSC;
	!
	! Build and send the response message.
	!
	NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
	NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

	END;
    END;

END;				! End of NML$CLEARKNOWN


END					! End of module

ELUDOM
