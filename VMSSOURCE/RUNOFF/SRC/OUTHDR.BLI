%TITLE 'O/P module for processing HEADER: figure, table, example, level'
MODULE OUTHDR	(IDENT = 'V04-000'
	%BLISS32 [ , ADDRESSING_MODE (  EXTERNAL	=	LONG_RELATIVE,
    					NONEXTERNAL	=	LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: General purpose processor for headers of various kinds
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: March, 1982
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	017	REM00017	Ray Marshall	21-Mar-1984 -- 4-Apr-1984
!		Implemented the foreign language conditionals for compiling
!		  fixed output words.
!
!	016	KFA00016	Ken Alden	15-Nov-1983
!		Reversed action performed in #14, so now the toctxt and tochl
!		  records are shipped out for and header ...
!
!	015	KFA00015	Ken Alden	01-Nov-1983
!		For FLIP, loosened restriction imposed in #014 to provide
!		  support for .HE, .HF, .HT.
!
!	014	KAD00014	Keith Dawson	25-May-1983
!		For FLIP, forbid writing header information to the TOC for 
!		  .HE, .HF, .HT. This is a FLIP Level 1 requirement that can 
!		  be loosened for Level 2 support.
!
!	013	KAD00013	Keith Dawson	19-May-1983
!		Moved the location at which the SCA_HEADER bit, used by FLIP, 
!		  is set. This bit was not serving its purpose -- communica-
!		  ting between this module and LOHORI -- because a new save 
!		  and restore of the SCA intervened.
!
!	012	KFA00012	Ken Alden	16-Mar-1983
!		PUSH/POP_SCA now visible to dsr.
!
!	011	KFA00011	Ken Alden	11-Mar-1983
!		For DSRPLUS: hl emphasis is always passed to the BRN,
!		  regardless of whether it is autosubtitle or not.
!
!	010	KAD00010	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    OUTHDR : NOVALUE,		! Generate numbered or unnumbered header.
    OUTCTR : NOVALUE;		! Generate counter for the header.
!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

EXTERNAL LITERAL
    S_FMRA;				!Allocated length for footnote MRA.
!
! OWN STORAGE:
!
OWN
    PP_SCA : $H_R_SCA_BLOCK;	!Used in PUSH_SCA, POP_SCA macros (defined in SCA.REQ).
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FOOMRA : FIXED_STRING,
    FOOTSF : VECTOR [TSF_SIZE],
    FS01 : FIXED_STRING,
    ECC : $ECC_BLOCKVECTOR,		! Counters and display codes for Examples, Figures, Tables
    GCA : GCA_DEFINITION,
    HLC : HLC_DEFINITION,
    HLDSP : VECTOR [MAX_LEVELS],
    HLLIST : COUNTED_LIST,
    IRA : FIXED_STRING,
    MRA : REF FIXED_STRING,
    NPAGEN : PAGE_DEFINITION,
    PAGEN : PAGE_DEFINITION,
    PHAN : PHAN_DEFINITION,
    SBTMRA : FIXED_STRING,
    SBTTSF : VECTOR,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION;

EXTERNAL
    KHAR;

EXTERNAL ROUTINE
    endchr,	endwrd,		gcskip,		gtpc,		outnj,
    outcrg,	pacsec,		pacxxx,		puttpg,		putcnt,
    puttxt,	scant,		setcas,		rskips,		titles;

GLOBAL ROUTINE OUTHDR
       (
	lines_before,		lines_after,		test_page_amount,
	counter_major_type,	counter_minor_type,
	counter_value,		counter_display_code,	counter_spaces_after,
	counter_pre_string_length,	counter_pre_string_ptr,
	counter_post_string_length,	counter_post_string_ptr,
	caption_major_type,	caption_minor_type,	caption_case,
	caption_is_centered,	caption_is_flush_right,	caption_is_run_in,
	caption_is_bold,	caption_is_underlined,	put_into_mem_file,
	autosubtitle,		brn_open,		break_before_caption,
	lines_between,		new_page,		startodd,
	tocpage
       )
: NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	See the ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
! LINES_BEFORE			leave this many blank lines before the header
! LINES_AFTER			leave this many blank lines after the (non-run-in) header
! TEST_PAGE_AMOUNT		start a new page unless this many lines remain
! COUNTER_MAJOR_TYPE		(not implemented) always MAJ_RUNOFF
! COUNTER_MINOR_TYPE		specifies type of header: HL, Example, Figure, Table 
! COUNTER_VALUE			(not used for HLs) numerical value of the counter
! COUNTER_DISPLAY_CODE		(not used for HLs) display code of the counter 
! COUNTER_SPACES_AFTER		leave this many spaces between counter and caption
! COUNTER_PRE_STRING_LENGTH	(not used for HLs) length of pre-counter string 
! COUNTER_PRE_STRING_PTR	(not used for HLs) pointer to pre-counter string 
! COUNTER_POST_STRING_LENGTH	(not used for HLs) length of post-counter string 
! COUNTER_POST_STRING_PTR	(not used for HLs) pointer to post-counter string 
! CAPTION_MAJOR_TYPE		(not implemented) always MAJ_RUNOFF
! CAPTION_MINOR_TYPE		specifies whether or not to show the counter
! CAPTION_CASE			code for the case rules to apply to the caption
! CAPTION_IS_CENTERED		True if caption should be centered
! CAPTION_IS_FLUSH_RIGHT	(not implemented) True if caption should be flush-right
! CAPTION_IS_RUN_IN		True if caption should be run-in with following text
! CAPTION_IS_BOLD		True if caption should be bolded
! CAPTION_IS_UNDERLINED		True if caption should be underlined
! PUT_INTO_MEM_FILE		(not implemented) True if header should be output in .MEM file
! AUTOSUBTITLE			True if header should be picked up as an auto subtitle
! BRN_OPEN			True if header should be sent to the TOC
!
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN

    LOCAL
	GEN_CHAR,
	HOLD_KHAR,
	HOLD_LST_SP,
	HOLD_MRA,
	HOLD_TSF,
	HOLD_LM,
	HOLD_WRD_PNTR,
	IRA_HOLD : VECTOR [10],
	SCA_HOLD : VECTOR [SCA_SIZE],
	SHOW_COUNTER;

    !Assume header is numbered (counter will be shown).
    SHOW_COUNTER = TRUE;

    !Skip spaces and tabs before the text.
    RSKIPS (IRA);

    !See if there is enough room on the page.
    GTPC (.TEST_PAGE_AMOUNT);
	
    !Now, force the paper to be positioned as it should.
    !The reason for forcing it, rather than allowing it to happen
    !the "normal" way, is that the user may have said something such
    !as ".NUMBER INDEX", which, by definition, does not take effect
    !in the middle of a page.  By forcing the paper to be positioned,
    !.HEADER LEVELs that would be forced onto the next page
    !anyway can get influenced by commands such as just mentioned.
    OUTCRG ();

    !Generate the specified number of lines before the header text.
    GCSKIP (.LINES_BEFORE);
	
    !If at the top of any page, output the page number. This is being done
    !because of problems with the the design of RUNOFF. NEWPAG won't output
    !the page number until this header text forces a title to be generated,
    !which may be too late in this case. 
    IF (.BRN_OPEN AND .PHAN_TOP_PAGE)
    THEN
	IF .PHAN_TOP_FIRST
	THEN
%IF FLIP %THEN
	    PUTTPG (PAGEN, FLIP$K_TOCPAG)
	ELSE
	    PUTTPG (NPAGEN, FLIP$K_TOCPAG);
%ELSE
	    PUTTPG (PAGEN, -1)
	ELSE
	    PUTTPG (NPAGEN, -1);
%FI
    ! If creating a binary table of contents file, write out the counter and 
    ! display descriptor.
    IF .BRN_OPEN
    THEN
	!User is generating a table of contents.
	PUTCNT (.COUNTER_MAJOR_TYPE,
		.COUNTER_MINOR_TYPE,
		.COUNTER_VALUE,			! The actual number.
		.COUNTER_DISPLAY_CODE,		! How to display the number.
		.COUNTER_PRE_STRING_LENGTH,	!
		.COUNTER_PRE_STRING_PTR,	! String before the number.
		.COUNTER_POST_STRING_LENGTH,	!
		.COUNTER_POST_STRING_PTR	! String after the number.
	       );

    !Save scanning information
    PUSH_SCA;	!Save the SAVEd SCA bits.
    INCR I FROM 0 TO SCA_SIZE - 1 DO
	SCA_HOLD [.I] = .SCA [.I];
    !Save left margin; it might be used if centering and wrapping.
    HOLD_LM = .SCA_LM;
    !Save IRA and KHAR.
    INCR I FROM 0 TO 10 - 1 DO
	IRA_HOLD [.I] = .IRA [.I];
    HOLD_KHAR = .KHAR;
!+
! If either (1) this head will become an autosubtitle or (2) user is creating a
! .BRN file, then we must scan the text twice. The first time we scan it at full
! width, 150 characters, for subtitle and/or TOC. If the subtitle actually runs
! wider than the current right margin, however, we truncate it and append "...".
!-
    IF .AUTOSUBTITLE OR .BRN_OPEN
    THEN	
	BEGIN

	SCA_PRESCAN = FALSE;		!A ';' does NOT terminate this command.
	SCA_RSKIPS = TRUE;		!Ignore multiple spaces and tabs.
	SCA_FILL = FALSE;
	SCA_JUSTIFY = FALSE;
	!Set right margin big to catch long headers.
	SCA_LM = 0;
	SCA_RM = 150;
	SCA_DO_IND = FALSE;		!Ignore indexing for subtitle/TOC scan.
	
	!Make a subtitle out of this header, if that's what the user desires.
	!The routine TITLES, which normally processes
	!titles/subtitles, contains the necessary logic. 
	IF .AUTOSUBTITLE
	THEN
	    !Collect header text in subtitle buffer
	    BEGIN
	    LOCAL
		HOLD_NBITS;

	    !Set up case rules for the header text.
	    SETCAS (.CAPTION_CASE);

	    !Use TITLES to get the subtitle.
	    TITLES (-1);

	    !Temporarily switch back to the subtitle TSF
	    HOLD_TSF = .TSF;
	    TSF = SBTTSF;

	    !Carry over underlining/bolding, etc, as specified.
	    TSF_NBITS = .TSF_NBITS AND .HLC_CO_NBITS;

	    !Return to the actual TSF
	    TSF = .HOLD_TSF;

	    END;					!End of autosubtitle processing.

	IF .brn_open
	THEN	    
	    BEGIN
!** ~~~~~~~~~~~
!** Is this whole trip necessary? Looks like it does nothing.
	    !Restore IRA and KHAR.
	    INCR I FROM 0 TO 10 - 1 DO
		IRA [.I] = .IRA_HOLD [.I];

	    INCR I FROM 0 TO SCA_SIZE - 1 DO
		SCA [.I] = .SCA_HOLD [.I];

	    POP_SCA;	!Restore the SAVEd SCA bits.
	    !Save scanning information for another scan.
	    PUSH_SCA;	!Save the SAVEd SCA bits.

	    INCR I FROM 0 TO SCA_SIZE - 1 DO
		SCA_HOLD [.I] = .SCA [.I];
	    !Save IRA and KHAR.
	    INCR I FROM 0 TO 10 - 1 DO
		IRA_HOLD [.I] = .IRA [.I];
!** ~~~~~~~~~~~
	    !Going to TOC, may or may not be an auto-subtitle.

	    sca_prescan = false;	!A ';' does NOT terminate this command.
	    sca_rskips = true;		!Ignore multiple spaces and tabs.
	    sca_fill = false;
	    sca_justify = false;
	    sca_lm = 0;			!Set right margin big to catch long headers.
	    sca_rm = 150;
	    sca_do_ind = false;		!Ignore indexing for subtitle/TOC scan.
	    sca_fc_case = true;
	    sca_fc = true;
	    khar = .hold_khar;

	    !Switch to the Footnote TSF and MRA (which are not otherwise used in headers) to
	    !collect the header information for the TOC.

	    hold_mra = .mra;
	    mra = foomra;
	    hold_tsf = .tsf;
	    tsf = footsf;

	    !Before initializing the text descriptors, it is necessary to explicitly
	    !reset the maximum length of the footnote MRA. It is clobbered if any 
	    !footnotes have been processed so far. See the comments in FNONLY around
	    !line 1545 for the detailed justification.
	    fs_maxsize (mra) = s_fmra;

    	    !Now initialize the text descriptors.
	    fs_init (mra);
	    INCR i FROM 0 TO tsf_size - 1 DO
		tsf [.i] = 0;

	    !Set up bolding and underlining, if requested.
	    IF (.caption_is_bold AND .sca_do_bld)
	    THEN 
		BEGIN
		sca_bld = true;
		sca_wrd_c_bld = true;
		END;

	    IF (.caption_is_underlined AND .sca_do_und)
	    THEN
		BEGIN
		sca_und = true;
		sca_wrd_c_und = true;
		END;

	    ! Set up case rules for the header.
	    setcas (.caption_case);

	    ! Scan 150-wide into footnote MRA.
	    scant ();
	    endwrd (false, false, false);

	    ! Write header text to .BRN file.

!** Needed for FLIP Level 1 support. The result is that PUTTXT is not called 
!		for .HE, .HF, .HT commands if /DEVICE=FLIP was specified.
!
!!%IF FLIP %THEN
!!	    IF	(.gca_op_dev NEQ op_dev_flip)
!!		OR
!!		(.caption_minor_type LEQ min_hl_txt_u)
!!	    THEN
!!%FI
!** 
		puttxt (.fs_length(foomra),
		    .fs_start(foomra),
		    .caption_major_type,
		    .caption_minor_type);

	    !Switch TSF and MRA back.
	    mra = .hold_mra;
	    tsf = .hold_tsf;
	    END;					!End of TOC-only processing.

	!Restore IRA and KHAR.
	INCR i FROM 0 TO 10 - 1 DO
	    ira [.i] = .ira_hold [.i];
	khar = .hold_khar;

	END;						!End of subtitle-or-TOC processing

    INCR I FROM 0 TO SCA_SIZE - 1 DO
	SCA [.I] = .SCA_HOLD [.I];
    POP_SCA;	!Restore the SAVEd SCA bits.
    SCA_FILL = TRUE;		!Fill the header even if not filling text.
    SCA_PRESCAN = FALSE;	!A ';' does NOT terminate this command.
    SCA_RSKIPS = TRUE;		!Ignore multiple spaces and tabs.

    !
    !Set up bolding and underlining, if requested.
    IF (.caption_is_bold AND .sca_do_bld)
    THEN 
	BEGIN
	sca_bld = true;
	sca_wrd_c_bld = true;
	END;
    !
    IF (.caption_is_underlined AND .sca_do_und)
    THEN 
	BEGIN
	sca_und = true;
	sca_wrd_c_und = true;
	END;

    ! Generate the number for the header title if not turned off. Note: 
    ! the following line depends on the values of the literals in TOCRTY.
    !
    show_counter = NOT ((.caption_minor_type MOD 3) EQL 0);
    ! If centering the header, pull in the margins so that the caption
    ! looks more deliberately centered.

    IF .caption_is_centered 
    THEN
	BEGIN
	sca_lm = .sca_lm + 3;
	sca_rm = .sca_rm - 3;
	END;

    IF .show_counter
    THEN
	! User didn't turn off the numbering, so generate the header counter.
	BEGIN
	! Generate the counter in using the case rules for the caption.
	!
	outctr (.counter_minor_type, .caption_case);

	! Put the counter into the output buffer.
	!
	fs_next (fs01) = .fs_start (fs01);
	INCR i FROM 1 TO .fs_length (fs01) DO
	    BEGIN
	    LOCAL
		temp_char;
	    fs_rchar (fs01, temp_char);
	    endchr (.temp_char);
	    END;

	! End the string so the spaces_after will not get underlined (if
	! in effect)
	endwrd (false, false, false);
	    
	! Insert spaces after the counter if user didn't say BREAK or BETWEEN. 
	! Do not put out more than 75 spaces regardless of what the user said.
	!
        IF NOT (.break_before_caption OR (.lines_between GTR 0))
        THEN
	    BEGIN
	    LOCAL
		sca_hold_c_bldun,
		sca_hold_ac_blun;
	    ! ENDCHR carries over underlining rules even for spaces.
	    ! We must turn off these bits before we add the extra spaces.
	    !
	    sca_hold_c_bldun = .sca_wrd_c_bldun;
	    sca_hold_ac_blun = .sca_wrd_ac_blun;
	    INCR i FROM 1 TO (MIN (.counter_spaces_after, 75))  DO
		BEGIN
		sca_wrd_c_bldun = 0;
		sca_wrd_ac_blun = 0;
		endchr (%C' ');
		END;

	    ! Restore the SCA bits.
	    sca_wrd_c_bldun = .sca_hold_c_bldun;
	    sca_wrd_ac_blun = .sca_hold_ac_blun;
	    END;

	! And now end this 'word'.
	!
	endwrd (false,false,false);
		
	! If the user wants a break before the caption, we must
	! make any adjustments if not flush_left.
	!
	IF .caption_is_centered OR .caption_is_flush_right 
	THEN
	    BEGIN
	    IF	.break_before_caption OR (.lines_between GTR 0)
	    THEN
		BEGIN
	    	tsf_adjust = 
		   (IF .caption_is_centered		!Center the counter.
		   THEN (.sca_rm - (.tsf_ext_hl))/2 	!
		   ELSE					!Force the counter right.
		    .sca_rm - .tsf_ext_hl);
		END
	    ELSE
		BEGIN
		! No break to be done so we must set the left margin so 
		! wrapping will left justify on the caption left margin.
		hold_lm = .tsf_ext_hl;	!Remember for use after SCA is restored.
		sca_lm = .tsf_ext_hl;
		END;
	    END

	!+
 	! The header is flush-left. If the caption is to immediately follow, set the 
	! left margin so that following text will wrap properly.
	!-
	ELSE
	    ! If we aren't doing a break after the counter, we must pull in
	    ! the left margin to prevent writing over the counter.
	    !
	    IF NOT (.break_before_caption OR (.lines_between GTR 0))
	    THEN
	    ! Set left margin beyond the counter so if the caption wraps,
	    ! it will be nicely justified with itself.
	    !
	    sca_lm = .tsf_ext_hl;

        END			    !End of code to generate header counter.
    ELSE
	!
	!If we are not generating a number, then the first character 
	!scanned should be the first character in this MRA.
	!
	sca_fc = true;
!+
! If the header is other than flush-left and user asked for break or 
! some lines between, then we have already computed amount to shift it;
! we now put it out on a line by itself.
!-
    gca_line_pend = 1;			!Until we throw the header, a line is pending.
    IF (.break_before_caption) OR (.lines_between GTR 0)
    THEN
	BEGIN
	outnj ();			! Put out the counter.
	gcskip (.lines_between);	! Skip the number of lines requested.
	END;

    ! Remember number of characters generated for use later.
    gen_char = .tsf_int_hl;

    ! Set up case rules for the heading.
    setcas (.caption_case);

    ! Tell SCANT that the first character of the header is the first
    ! character of a word. (ENDCHR turned this stuff off before.)
    sca_fc_case = true;

    scant ();				!Go get the caption.

    ! SCA_WRD_CPEND equals rintes IFF there was a trailing space/tab
    ! after the text.  In such a case ENDWRD has already been called.
    ! Calling it again would have the effect of forcing an additional
    ! space out into TSF/MRA.
    IF .sca_wrd_cpend NEQ rintes
    THEN
	endwrd (false, false, false)
    ELSE
	IF .sca_wrd_lst_und EQL 0
	    AND				! This fixes null-text-on-
	   .sca_wrd_lst_sp GTR 0	! run-in-header bug.
	THEN
	    ! Chop off trailing spaces/tabs.  When doing so, also back up
	    ! intra-line pointer and counter appropriately. If justification
	    ! was in effect, also cancel the justification mark that got writ-
	    ! ten onto the MRA.
	    ! Note that trailing spaces that are underlined are not discarded. 
	    BEGIN
	    LOCAL
		chars_to_drop;
	    chars_to_drop = .sca_wrd_lst_sp +
		( IF .sca_justify 
		  THEN  3 
		  ELSE  0
		) ;
	    fs_length (mra) = .fs_length (mra) - .chars_to_drop;
	    fs_next (mra) = ch$plus (.fs_next (mra), -.chars_to_drop);
	    sca_wrd_lst_sp = 0;
	    END;

    ! Restore previous scanner rules and set standard rules. Usually, it
    ! suffices to restore the previous scanner rules, and that's all. That
    ! works because after ENDWRD is called there is nothing left in the SCA
    ! that needs to be remembered. Simply restoring the SCA is then
    ! equivalent to a type of block structure. However, there is one case
    ! when the pointer to the NEXT word needs to be carried over; that is
    ! when the text of the header is too long for the current line,
    ! and it's a runin header. In that case, if the pointer is not carried
    ! over, generating the '-' after the text will not work, and will
    ! actually cause an internal logic error (RNFILE) when ENDWRD eventually
    ! gets called by some other routine, later. 
    hold_wrd_pntr = .sca_wrd_pntr;		!Remember start of next word.
    hold_lst_sp = .sca_wrd_lst_sp;		!Remember last-space info.
    INCR i FROM 0 TO sca_size - 1 DO
	sca [.i] = .sca_hold [.i];
    pop_sca;	!Restore the SAVEd SCA bits again.
    sca_wrd_pntr = .hold_wrd_pntr;		!Restore start of next word.
    sca_wrd_lst_sp = .hold_lst_sp;		!Restore last-space info.

    ! For FLIP, tell LOHORI to generate a TOCHL record (for .HL's only 
    ! -- not for .HE, .HF, .HT commands).
    !    yes for now.
%IF FLIP %THEN
    IF	.brn_open
!!	AND
!!	(.caption_minor_type LEQ min_hl_txt_u)
    THEN
	sca_header = true;
%FI

    ! Differentiate between headers that are on a single line, and
    ! those for which a '-' has to be generated with following text
    ! running on.
    IF .caption_is_run_in
    THEN
	BEGIN
	IF .gen_char NEQ .tsf_int_hl
	THEN
	! There was some text after the counter, so generate the '- '.
	    BEGIN
	    endchr (%C' ');
	    endchr (%C'-');
	    endwrd (true, false, false);
	    END
	END
    ELSE
    ! Not a 'run-on' header.
	BEGIN
	! This section basically outputs the last line of the header.  This
	! may also be the first (if only one line long). What must happen here
	! is if the header is flush-left, the last line (if different from the 
	! first, must start at the caption left margin.  The same goes for cen-
	! tered captions if nobreak is in effect and if the caption is so long 
	! that it wraps.  Now if it doesn't wrap, then this section will output
	! the whole counter and caption.
	! By using GCA_LINE_PEND, we may determine if this is the first line output.
	! If a line has already gone out, then SCANT has already ajusted the left
	! margin and no TSF_adjust is needed.

	! If the header is other than flush-left, compute amount to shift it.
	! If user asked for a BREAK or had some LINES_BETWEEN, then the shift
	! for the counter has already been taken care of and this section
	! is only for the caption, otherwise the shift is for the whole header.
	IF .caption_is_centered OR .caption_is_flush_right
	THEN
	    IF .gca_line_pend 				!NO line thrown yet.
	    THEN
	    	tsf_adjust = 
		   (IF .caption_is_centered		!Center the counter/and/or caption.
  	            THEN  ((.sca_rm - .tsf_ext_hl)/2 - 2)
		    ELSE				!Force the counter/caption right.
		       .sca_rm - .tsf_ext_hl)
	    ELSE
    		IF (.break_before_caption) OR (.lines_between GTR 0)
		THEN
	    	    tsf_adjust = 
		   	(IF .caption_is_centered		!Center the counter/and/or caption.
  	           	 THEN  ((.sca_rm - .tsf_ext_hl)/2 - 2)	!This is centered.
		   	 ELSE					!Force the counter/caption right.
		   	    .sca_rm - .tsf_ext_hl);

	outnj ();			!Force out the caption.

	gcskip (.lines_after);

	sca_sect_empty = true;		!This section is empty now.
	END;

    !Set proper case conversion for remainder of section.
    setcas (.gca_case);

    END;					!End of OUTHDR

GLOBAL ROUTINE OUTCTR (HEADER_TYPE, HEADER_CASE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	OUTCTR	generates (for header levels) a section number of the form 
!		1.2.3... For Example-Figure-Table titles it generates a 
!		counter of the form Example 2-4: ...
!
! FORMAL PARAMETERS:
!
!	HEADER_TYPE	is the counter_minor_type of this header; it indicates
!			whether this is an HL or an E/F/T title.
!
!	HEADER_CASE	is the case rules for this header, indicating upper/lower case.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN
    OWN
	OFFSET;			!As an own for debug purposes only***

    LOCAL
	ENTITY_LEN,		!Length of ENTITY_TEXT.
	ENTITY_TEXT;		!Contains 'Example ' or 'Figure ' or 'Table '.
!**	OFFSET;			!Offset into entity counter and display-code structures.

    FS_INIT (FS01);

    SELECT .HEADER_TYPE OF
	SET
	!
	[MIN_HL_INF] :
	    !
	    BEGIN
	    IF .PAGEN [SCT_TYP] NEQ 0
	    THEN
	    !This is a document divided into sections.
		BEGIN
		FS_LENGTH (FS01) = PACSEC (PAGEN, FS_NEXT (FS01));

		INCR I FROM 1 TO .HLLIST [CL_INDEX] DO
		    BEGIN
		    FS_WCHAR (FS01, %C'.');
		    FS_LENGTH (FS01) = .FS_LENGTH (FS01) + PACXXX (.HLLIST [.I], FS_NEXT (FS01), .HLDSP [.I - 1]);
		    END;
		END
	    ELSE
	    !Not a document divided into sections.
		BEGIN
		IF .HLLIST [CL_INDEX] EQL 1
		THEN
		!Special case for .HEADER LEVEL 1
		!Don't output a subsection number of zero.
		    BEGIN
		    FS_LENGTH (FS01) = PACXXX (.HLLIST [1], FS_NEXT (FS01), .HLDSP [0]);
		    RETURN;
		    END;

		!Not a .HL1
		INCR I FROM 1 TO .HLLIST [CL_INDEX] DO
		    BEGIN
		    FS_LENGTH (FS01) = .FS_LENGTH (FS01) + PACXXX (.HLLIST [.I], FS_NEXT (FS01), .HLDSP [.I - 1]);
		    FS_WCHAR (FS01, %C'.');
		    END;

		!Always get an extra dot, so remove it.
		FS_LENGTH (FS01) = .FS_LENGTH (FS01) - 1;
		CH$PLUS (FS_NEXT (FS01), -1);
		END;

	    RETURN;
	    END;			! End of HL counter processing.
	!
	[MIN_EXAMP_INF] :
	    !
	    BEGIN
	    ENTITY_TEXT = 
		(CASE .HEADER_CASE FROM LEAVE_CASE TO FIRST_CAPS OF
		    SET

%IF german %THEN
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Beispiel'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('BEISPIEL'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Beispiel'));
%ELSE
%IF french %THEN
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Example'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('EXAMPLE'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Example'));
%ELSE
%IF italian %THEN
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Example'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('EXAMPLE'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Example'));
%ELSE
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Example'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('EXAMPLE'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Example'));
%FI %FI %FI
		    TES);

%IF german %THEN
	    ENTITY_LEN = 8;
%ELSE
%IF french %THEN
	    ENTITY_LEN = 7;
%ELSE
%IF italian %THEN
	    ENTITY_LEN = 7;
%ELSE
	    ENTITY_LEN = 7;
%FI %FI %FI
	    OFFSET = EXAMP_OFFSET;
	    END;
	!
	[MIN_FIGUR_INF] :
	    !
	    BEGIN
	    ENTITY_TEXT = 
		(CASE .HEADER_CASE FROM LEAVE_CASE TO FIRST_CAPS OF
		    SET

%IF german %THEN
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Bild'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('BILD'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Bild'));
%ELSE
%IF french %THEN
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Figure'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('FIGURE'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Figure'));
%ELSE
%IF italian %THEN
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Figure'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('FIGURE'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Figure'));
%ELSE
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Figure'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('FIGURE'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Figure'));
%FI %FI %FI
	
		    TES);

%IF german %THEN
	    ENTITY_LEN = 4;
%ELSE
%IF french %THEN
	    ENTITY_LEN = 6;
%ELSE
%IF italian %THEN
	    ENTITY_LEN = 6;
%ELSE
	    ENTITY_LEN = 6;
%FI %FI %FI
	    OFFSET = FIGUR_OFFSET;
	    END;
	!
	[MIN_TABLE_INF] :
	    !
	    BEGIN
	    ENTITY_TEXT = 
		(CASE .HEADER_CASE FROM LEAVE_CASE TO FIRST_CAPS OF
		    SET

%IF german %THEN
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Tabelle'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('TABELLE'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Tabelle'));
%ELSE
%IF french %THEN
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Table'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('TABLE'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Table'));
%ELSE
%IF italian %THEN
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Table'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('TABLE'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Table'));
%ELSE
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Table'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('TABLE'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Table'));
%FI %FI %FI
		    TES);

%IF german %THEN
	    ENTITY_LEN = 7;
%ELSE
%IF french %THEN
	    ENTITY_LEN = 5;
%ELSE
%IF italian %THEN
	    ENTITY_LEN = 5;
%ELSE
	    ENTITY_LEN = 5;
%FI %FI %FI
	    OFFSET = TABLE_OFFSET;
	    END;

	[MIN_APPEND_INF] :
	    !
	    BEGIN
	    ENTITY_TEXT = 
		(CASE .HEADER_CASE FROM LEAVE_CASE TO FIRST_CAPS OF
		    SET

%IF german %THEN
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Anhang'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('ANHANG'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Anhang'));
%ELSE
%IF french %THEN
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Appendix'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('APPENDIX'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Appendix'));
%ELSE
%IF italian %THEN
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Appendix'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('APPENDIX'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Appendix'));
%ELSE
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Appendix'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('APPENDIX'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Appendix'));
%FI %FI %FI
		
		    TES);

%IF german %THEN
	    ENTITY_LEN = 6;
%ELSE
%IF french %THEN
	    ENTITY_LEN = 8;
%ELSE
%IF italian %THEN
	    ENTITY_LEN = 8;
%ELSE
	    ENTITY_LEN = 8;
%FI %FI %FI
	    OFFSET = APPEND_OFFSET;
	    END;

	[MIN_CHAPT_INF] :
	    !
	    BEGIN
	    ENTITY_TEXT = 
		(CASE .HEADER_CASE FROM LEAVE_CASE TO FIRST_CAPS OF
		    SET

%IF german %THEN
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Kapitel'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('KAPITEL'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Kapitel'));
%ELSE
%IF french %THEN
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Chapter'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('CHAPTER'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Chapter'));
%ELSE
%IF italian %THEN
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Chapter'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('CHAPTER'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Chapter'));
%ELSE
		    [LEAVE_CASE] : CH$PTR (UPLIT ('Chapter'));
		    [FORCE_UPPER] : CH$PTR (UPLIT ('CHAPTER'));
		    [FIRST_CAPS] : CH$PTR (UPLIT ('Chapter'));
%FI %FI %FI
		    TES);

%IF french %THEN
	    ENTITY_LEN = 7;
%ELSE
%IF italian %THEN
	    ENTITY_LEN = 7;
%ELSE	!  The German & English words are the same length.
	    ENTITY_LEN = 7;
%FI %FI
	    OFFSET = CHAP_OFFSET;
	    END;
	!
	[MIN_EXAMP_INF, MIN_FIGUR_INF, MIN_TABLE_INF, MIN_APPEND_INF, MIN_CHAPT_INF] :
	    !
	    BEGIN

	    !Write the entity identifier ('Example ' or ...).
	    INCR I FROM 1 TO .ENTITY_LEN DO
		ENDCHR (CH$RCHAR_A (ENTITY_TEXT));

	    !End the enitity with a space.
	    ENDWRD (TRUE,FALSE,FALSE);

	    !Write the pre-counter string, if any.
	    BEGIN
	    LOCAL
		PTR,
		LEN;
	    PTR = .ECC [.OFFSET, ECC$A_PRE_PTR];
	    LEN = .ECC [.OFFSET, ECC$H_PRE_LEN];

	    INCR I FROM 1 TO .LEN DO
		FS_WCHAR (FS01, CH$RCHAR_A (PTR));
	    END;

	    !If the document is divided into sections, write the chapter number and '-'.
	    !However if this is a chapter/appendix beign processed, we don't
	    !want to pick up the section number.
	    IF .OFFSET LSS CHAP_OFFSET
	    THEN				!This isn't a chapter/appendix
	    	IF .PAGEN [SCT_TYP] NEQ 0
	    	THEN
		    BEGIN
		    FS_LENGTH (FS01) = .FS_LENGTH (FS01) + PACSEC (PAGEN, FS_NEXT (FS01));
		    FS_WCHAR (FS01, %C'-');
		    END;

	    !Write the entity's counter in the current display mode.
	    !Note that this is the section number for chapter/appendix
	    FS_LENGTH (FS01) = .FS_LENGTH (FS01) + 
		PACXXX (.ECC [.OFFSET, ECC$H_COUNTER],
			 FS_NEXT (FS01),
			.ECC [.OFFSET, ECC$H_DISPLAY_DESC]);

	    !Write the post-counter string, if any.
	    BEGIN
	    LOCAL
		PTR,
		LEN;
	    PTR = .ECC [.OFFSET, ECC$A_POST_PTR];
	    LEN = .ECC [.OFFSET, ECC$H_POST_LEN];

	    INCR I FROM 1 TO .LEN DO
		FS_WCHAR (FS01, CH$RCHAR_A (PTR));

	    END;

	    END;			! End of E/F/T counter processing.
	TES;

    END;					!End of OUTCTR

END						!End of module
ELUDOM
