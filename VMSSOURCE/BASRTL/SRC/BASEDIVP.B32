MODULE BAS$EXTEND_DIVP (			!
		IDENT = '1-005'		! File: BASEDIVP.B32 EDIT:MDL1005
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC
!
! ABSTRACT:
!
!	This module performs double precision division for scaled decimal
!	data types.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: Bob Hanek,	CREATION DATE: 20-Jan-1982
!
! MODIFIED BY:
!
! 1-001	- Original.  RNH 20-Jan-1982
! 1-002 - Change name to BAS$EXTEND_DIVP and change errors to
!	  Decimal Error.  PLL 12-Feb-1982
! 1-003 - Check the decimal overflow flag within the flags word found
!	  in the BASIC frame and use the value of that setting to
!	  set the PSW accordingly.  LB 15-May-1982
! 1-004 - Changed the declarations of A_EXP and B_EXP from BYTE to
!         SIGNED BYTE so that negative values will not be zero
!         extended from a byte to a longword for computational
!         purposes.  Added the variable SAV_BADDR to save the value of
!  	  B_ADDR, which was being altered by LIB$$UNPACK_SD_R8. Both the
!         Altered value and the old value are needed. JCW 29-Nov-1982
! 1-005 - RND_TRUNC should be figured into the shift factor when calling
!	  LIB$$CVT_A_AP_R8.  MDL 5-Oct-1983
!--

!<BLF/PAGE>

!+
! SWITCHES:
!-

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!+
! LINKAGES:
!-

LINKAGE
	JSB1 = JSB (REGISTER=6, REGISTER=7) : NOPRESERVE (2,3,4,5),
	JSB2 = JSB (REGISTER=6, REGISTER=7, REGISTER=8) : NOPRESERVE (2,3,4,5),
	JSB3 = JSB (REGISTER=6, REGISTER=7, REGISTER=8, REGISTER=9)
		   : NOPRESERVE (2,3,4,5),
	JSB4 = JSB (REGISTER=6, REGISTER=7, REGISTER=8, REGISTER=9, REGISTER=10)
		   : NOPRESERVE (2,3,4,5),
	JSB5 = JSB (REGISTER=4, REGISTER=5, REGISTER=6, REGISTER=7, REGISTER=8)
		   : NOPRESERVE (2,3),
	JSB6 = JSB (REGISTER=3, REGISTER=4, REGISTER=5, REGISTER=6, REGISTER=7,
		    REGISTER=8) : NOPRESERVE (2,3);

!+
! TABLE OF CONTENTS:
!-

FORWARD ROUTINE
	BAS$EXTEND_DIVP : NOVALUE;	! Double precision packed decimal division

!+
! INCLUDE FILES:
!-

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects
REQUIRE 'RTLIN:BASFRAME';			! Define frame offsets
LIBRARY 'RTLSTARLE';				! System definitions

!+
! MACROS:
!
!	NONE
!-

!+
! PSECTS:
!-

DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility

!+
! OWN STORAGE:
!
!	NONE
!-

!+
! EXTERNAL REFERENCES:
!-

EXTERNAL ROUTINE
	BAS$$STOP,			! Signal fatal error
	LIB$$CALC_D_R7:JSB1,		! Calculates normalization factor
	LIB$$CALC_Q_R9:JSB3 NOVALUE,	! Calculates one quotient digit
	LIB$$SUB_PACK_R8:JSB2,		! Subtracts two decimal arrays
	LIB$$CVT_AP_P_R8:JSB6,		! Converts an packed array to a single
					!    rounded packed string
	LIB$$UNPACK_SD_R8:JSB5 NOVALUE,	! Unpacks SD decscipter, convert packed
					!    decimal string to leading separate
	LIB$$MUL_PACK_R10:JSB4 NOVALUE,	! Multiplies a packed array by a single
					!    entry
	LIB$$ADJUST_Q_R9:JSB3 NOVALUE,	! Adjusts intermediate results of divi-
					!    sion algorithm if initial quess at
					!    a quotient digit is wrong
	LIB$$CVT_STR_PACK_R9:JSB3 NOVALUE,
					! Converts a string of decimal digits 
					!    to an array of packed decimal 
					!    values
	BAS$HANDLER;

BIND
	ZERO   = UPLIT BYTE (REP 15 OF (%X'00'),%X'0C'); ! Packed zero

BUILTIN
	BICPSW,				! Bit clear PSW
	BISPSW,				! Bit set PSW
	MOVP;				! Move packed decimal data

!+
! The following are the error codes produced by this module.
!-

EXTERNAL LITERAL
	BAS$K_DECERR,			! Decimal overflow
	BAS$K_DIVBY_ZER;		! Divide by zero



GLOBAL ROUTINE BAS$EXTEND_DIVP (
		A,			! Address of descripter for A
		B,			! Address of descripter for B
		C,			! Address of descripter for C
		RND_TRUNC):NOVALUE =	! Round/Truncate parameter 

!++
!
! FUNCTIONAL DESCRIPTION:
!
!  This routine finds the quotient of two scaled packed decimal strings i.e. 
!  C = A / B.  The algorithm implemented here has been provided by KNUTH.  It 
!  is his famous Algorithm D (division of non-negative integers (which has
!  been modified to handle negative integers)) found in Volume 2 of
!  that extraordinary series (Vol. 2 is entitled Seminumerical Algorithms). 
!  An explanation of the algorithm appears further on in the program.
!
! CALLING SEQUENCE:
!
!	BAS$EXTEND_DIVP (A.rp.dsd, B.rp.dsd, C.rp.dsd, RND_TRUNC.rb.v)
!
! FORMAL PARAMETERS:
!
!	A.rp.dsd	Descripter for A
!	B.rp.dsd	Descripter for B
!	C.rp.dsd	Descripter for C
!	RND_TRUNC.rb.v	Round/Truncate parameter (0 = truncate, 5 = round)
!
! IMPLICIT INPUTS:
!
!	-NONE
!
! IMPLICIT OUTPUTS:
!
!	-NONE
!
! ROUTINE VALUE:
!
!	-NONE
!
! COMPLETION CODES
!
!	-NONE
!
! MACROS:
!
!	-NONE
!  
! SIDE EFFECTS:
!
!	-NONE
!
!-

BEGIN

    MAP
	C:REF BLOCK [12,BYTE];

    STACKLOCAL

	SAV_BADDR,		! Used to save the old value of B_ADDR
	A_LENGTH:WORD,		! Number of digits in A string
	A_ADDR,			! Address of A string
	A_EXP:SIGNED BYTE,	! Scale factor of A                 
	A_SIGN:BYTE,		! Sign of A (0 for pos, 1 for neg)
	B_LENGTH:WORD,		! Number of digits in B string
	B_ADDR,			! Address of B string
	B_EXP:SIGNED BYTE,	! Scale factor of B                 
	B_SIGN:BYTE,		! Sign of B (0 for pos, 1 for neg)
	C_SIGN:BYTE,		! Sign of result digits
	A_LEN,			! Number of digits needed in A to produce result
	A_CHUNKS,		! Number of 15 digit chunks needed in A
	B_CHUNKS,		! Number of 15 digit chunks in B
	Q_LENGTH,		! Number of digit required in the quotient
	Q_CHUNKS,		! Number of 15 digit chunks required in quotient
	QBUF:VECTOR[128, BYTE],	! Addr of 1st 15 digit chunks of the quotient
	STATUS,			! Longword for returning status
	FLAG,			! B_CHUNKS = 1 ==> FLAG = 1, FLAG = 0 otherwise
	FMP:REF BLOCK[0,BYTE] FIELD(BSF$FCD),	! Pointer to FCD
	SAVE_FP:REF BLOCK[0,BYTE] FIELD(BSF$FCD);

BUILTIN
	FP;			! Frame Pointer

BIND
	ABUF   = QBUF[8],	! Address of A buffer
	ABUF8  = QBUF[16],	! Address of A buffer + 8 bytes
	BBUF   = QBUF[72],	! Address of B buffer
	QBBUF  = QBUF[96],	! Address of Q*B buffer
	QBBUF8 = QBUF[104];	! Address of Q*B buffer + 8 bytes


!************************************************************************
!									*
!			THE ALGORITHM					*
!									*
! GIVENS:  n = length of the divisor					*
!	   m = length of dividend - n					*
!	   radix = 10 (decimal)						*
!									*
! STEP 1.  Normalize.  Set D = FLOOR (radix/(v1+1)) where v1 is  the	*
!	   first digit of the divisor which must not be zero.  Where	*
!	   U0 U1...Um+n represent the chunks of  15  digits  of  the 	*
!          dividend and V1 V2...Vn represent the chunks of 15 digits 	*
!          of the divisor.						*
!	   Multiply  A  by  D  thus  giving the sequence of 15 digit 	*
!	   chunks U0 U1 U2...Um+n. (Note the introduction of the new	*
!	   chunk.)  Multiply B by d to obtain a sequence  of  chunks	*
!	   V1 V2...Vn. (Note no new chunk occurs			*
!									*
! STEP 2.  Set J = 0.  This is the value we will loop on.  For this	*
!	   routine we will loop "LOOP" number of times.  Steps  2-7 	*
!	   will provide the basis for the division of Uj Uj+1...Uj+n	*
!	   by V1 V2...Vn, to get a single quotient digit - Qj.		*
!									*
! STEP 3.  Calculate the first digit of the quotient:			*
!	   If Uj = V1 then set q = radix-1.  Otherwise, set q = 	*
!          FLOOR(Uj*radix + Uj+1)/V1).  Now test if V2*q > 		*
!	   (((Uj*radix + Uj+1 - q*V1)*radix)+Uj+2).  If so, then 	*
!	   decrease q by 1 and repeat this test.  When finish q is	*
!	   either equal to the qoutient digit or one greater.		*
!									*
! STEP 4.  Multiply and subtract.  Replace Uj Uj+1...Uj+n by		*
!	   Uj Uj+1...Uj+n - (q * V1 V2...Vn).				*
!	   This step consists of a simple multiplication by a one-place	*
!	   number, combined with a subtraction.  The digits 		*
!	   Uj Uj+1...Uj+n should be kept positive; if the result of this*
!	   step is negative, Uj Uj+1...Uj+n should be left as the true	*
!	   value plus radix raised to the n+1, i.e. as the radix'	*
!	   complement of the true value, and a "borrow" to the left	*
!	   should be remembered.					*
!									*
! STEP 5.  Set Q[.J] = q.  This is a digit of the quotient.  If the	*
!	   result of STEP 4 was negative, go to STEP 6; otherwise go to	*
!	   STEP 7.							*
!									*
! STEP 6.  Decrease Q[.J] by 1. Add 0V1 V2...Vn to Uj Uj+1...Uj+n.	*
!									*
! STEP 7.  Loop on J.  If J <= "LOOP" then go back to STEP 3.		*
!									*
!************************************************************************ 

!+
! First check the decimal overflow setting of the flags word found in
! the BASIC frame.  Use the setting found in the flags word to feed into
! the PSW (that value overrides the current setting found in the PSW).
!-

	FMP = .FP;				! Get frame pointer
	SAVE_FP = .FMP[BSF$A_SAVED_FP];		! Get saved frame pointer
	IF .SAVE_FP[BSF$A_HANDLER] EQL BAS$HANDLER
	  THEN
	    BEGIN
	    IF (((.SAVE_FP[BSF$W_FCD_FLAGS]) AND (BSF$M_FCD_DV)) NEQ 0)
	      THEN
	        BISPSW (%REF(PSW$M_DV))		! Set DV bit in PSW
	      ELSE
	        BICPSW (%REF(PSW$M_DV));	! Clear DV bit in PSW
	    END
	  ELSE
	    BISPSW (%REF(PSW$M_DV));		! Set DV bit in PSW
!+
! Unpack descripters and convert scaled decimal strings to character strings
!-
	B_ADDR = QBUF + 95;
	SAV_BADDR = .B_ADDR ;
	LIB$$UNPACK_SD_R8 (.B, B_LENGTH, B_EXP, B_SIGN, B_ADDR);
	IF .B_LENGTH EQL 0
	  THEN
	    BAS$$STOP(BAS$K_DIVBY_ZER);
	A_ADDR = .SAV_BADDR - 33;
	LIB$$UNPACK_SD_R8 (.A, A_LENGTH, A_EXP, A_SIGN, A_ADDR);
!+
! Calculate the resultant sign.
!-
	C_SIGN = .A_SIGN XOR .B_SIGN;
!+
! Calculate maximum number of result digits required
!+
	Q_LENGTH = (.A_LENGTH + .A_EXP) - (.B_LENGTH + .B_EXP) 
                   - .C[DSC$B_SCALE] + .RND_TRUNC/5;
	IF .Q_LENGTH LSS 0
	  THEN
!+
! Special case for zero quotient
!-
	    BEGIN
	    MOVP (C[DSC$W_LENGTH], ZERO + 15 - .C[DSC$W_LENGTH]/2, 
                  .C[DSC$A_POINTER]);
	    END	    
	  ELSE
	    BEGIN
!+
! Determine the number of digits required in A to obtain the proper number
! of digits in the result
!-
	    A_LEN = .B_LENGTH + .Q_LENGTH;
!+
! Determine the number of 15 digit CHUNKS needed to hold B, the required
! digits of A and the result digits
!-
	    A_CHUNKS = (.A_LEN + 14)/15;
	    B_CHUNKS = (.B_LENGTH + 14)/15;
	    Q_CHUNKS = (.Q_LENGTH + 29)/15;
!+
! For the algorithm we must have A_CHUNKS >= B_CHUNKS + Q_CHUNKS.  
!-
	    A_CHUNKS = MAXU(.A_CHUNKS, .B_CHUNKS + .Q_CHUNKS);
!+
! Convert A and B strings to packed decimal arrays.
!-
	    LIB$$CVT_STR_PACK_R9 (.A_ADDR, .A_LENGTH, .A_CHUNKS, ABUF8);
            MOVP (%REF(15), ZERO, ABUF);
	    LIB$$CVT_STR_PACK_R9 (.B_ADDR, .B_LENGTH, .B_CHUNKS, BBUF);

!+
! Step 1 - Normalize A and B.  NOTE: If B_CHUNKS = 1 this step is not necessary
! and the computation of q can be simplified.  A flag is used to indicate the 
! proper method of evaluating q.  FLAG = 1 if .B_CHUNKS = 1 and 0 otherwise.
!-
	    IF .B_CHUNKS NEQ 1
	      THEN
	        BEGIN
	        FLAG = 0;
	        STATUS = LIB$$CALC_D_R7 (BBUF, QBUF);
	        IF .STATUS NEQ 1		! STATUS = 1 <==> D = 1
	          THEN
	            BEGIN
	            LIB$$MUL_PACK_R10 (QBUF, ABUF8, .A_CHUNKS, .A_CHUNKS+1, 
                                       ABUF8);
	            LIB$$MUL_PACK_R10 (QBUF, BBUF, .B_CHUNKS, .B_CHUNKS, BBUF);
	 	    END;
	          END
	      ELSE
	        FLAG = 1;

!+
! Ready to start the actual divide algorithm.
!-
	    INCR J FROM 0 TO (.Q_CHUNKS*8 - 8) BY 8 DO
	      BEGIN
!+
! Step 3 - Calculate digit of quotient.  
!-
	      LIB$$CALC_Q_R9 (BBUF, ABUF + .J, .FLAG, QBUF + .J);
!+
! Step 4 - Multiply and subtract.  Replace the digits of ABUF by ABUF - Q*BBUF 
!-
	      LIB$$MUL_PACK_R10 (QBUF+.J, BBUF, .B_CHUNKS, .B_CHUNKS+1, QBBUF8);
	      STATUS = LIB$$SUB_PACK_R8 (.B_CHUNKS, ABUF + .J, QBBUF);
!+
! Step 6 - Adjust q if the result of step 4 was negative
!-
	      IF .STATUS EQL 1			! If remainder is negative
	        THEN
	          LIB$$ADJUST_Q_R9 (.B_CHUNKS, ABUF8 + .J, BBUF, QBUF + .J);
	    END;
	    		
!+
! Convert the array of 15 digit chunks of the quotient to one packed decimal
! string of the length specified by the C descripter and copy the result to the
! location pointed to by the C descripter.
!-
	STATUS = LIB$$CVT_AP_P_R8 (.RND_TRUNC, 
				   .C, 
				   QBUF, 
				   .Q_CHUNKS, 
			       (.Q_LENGTH - (.RND_TRUNC/5)) - 15*(.Q_CHUNKS-1), 
				   .C_SIGN);
	IF .STATUS EQL 1
	  THEN
	    BAS$$STOP(BAS$K_DECERR)
	END;
END;
END						! end of module BAS$EXTEND_DIVP

ELUDOM
