%TITLE 'NDXTMS -- RUNOFF to TMS-11 conversion'
MODULE NDXTMS (IDENT = 'V04-000'
		%BLISS32 [, ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!   DSR (Digital Standard RUNOFF) /DSRPLUS DSRINDEX/INDEX Utility
!
! ABSTRACT:
!   This module contains code to convert RUNOFF input text lines to
!   TMS-11 text lines.
!
! ENVIRONMENT:	 Transportable
!
! AUTHOR:	 JPK
!
! CREATION DATE: February 1982
!
! MODIFIED BY:
!
!	003	JPK00015	04-Feb-1983
!		Cleaned up module names, modified revision history to
!		conform with established standards. Updated copyright dates.
!
!	002	JPK00012	24-Jan-1983
!		Modified NDXVMSMSG.MSG to define error messages for both
!		DSRINDEX and INDEX.
!		Added require of NDXVMSREQ.R32 to NDXOUT, NDXFMT, NDXDAT,
!		INDEX, NDXMSG, NDXXTN, NDXTMS, NDXVMS and NDXPAG for BLISS32. 
!		Since this file defines the error message literals, 
!		the EXTERNAL REFERENCEs for the error message literals 
!		have been removed.
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    RNOTMS : NOVALUE,			! Generate TMS-11 output
    TMSPUT : NOVALUE;			! Put a line to output file

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';

%IF %BLISS (BLISS32)
%THEN

REQUIRE 'REQ:NDXVMSREQ';

%FI

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

GLOBAL LITERAL
    TMSSTD = 20,			! Relative size of average character for TMS
    MSPACE = 32;			! TMS 'em' space size

LITERAL
    TRUE = 1,
    FALSE = 0,
    BUFFER_SIZE = 2000;

!
! OWN STORAGE:
!

GLOBAL					! Top of file string
    TMSTOF : $STR_DESCRIPTOR (CLASS = DYNAMIC, STRING = (0, 0));

GLOBAL
    TMSSIZ : INITIAL (40);		! TMS file size in blocks

GLOBAL
    CHRSIZ : REF VECTOR [256];

GLOBAL
    CHRSZA : VECTOR [256] INITIAL (		! TMS11 character size vector for "A" format
	REP 32 OF (0),				! NUL - US
	13, 14, 20, 18, 18, 30, 28, 10, 14, 14,	! space ! " # $ % & ' ( )
	18, 24, 11, 18, 11, 12,			! * + , - . /
	REP 10 OF (18),				! 0 1 2 3 4 5 6 7 8 9
	12, 12, 24, 24, 24, 18, 30,		! : ; < = > ? @
	26, 26, 26, 28, 26, 23, 28, 30, 13, 19,	! A B C D E F G H I J
	30, 24, 36, 30, 28, 24, 28, 26, 23, 26,	! K L M N O P Q R S T
	28, 26, 36, 30, 26, 24,			! U V W X Y Z
	10, 18, 10, 19, 26, 19,			! [ \ ] ^ _ `
	19, 21, 17, 21, 17, 12, 18, 21, 11, 11,	! a b c d e f g h i j
	20, 11, 32, 21, 18, 21, 20, 14, 15, 14,	! k l m n o p q r s t
	21, 19, 26, 19, 19, 17,			! u v w x y z
	11,  9, 11, 19,  0,			! { | } ~ DEL
	REP 128 OF (0));			! Rest of control characters

GLOBAL
    CHRSZE : VECTOR [256] INITIAL (		! TMS11 character size vector for "E" format
	REP 32 OF (0),				! NUL - US
	13, 12, 12, 28, 20, 32, 26, 12, 10, 10,	! space ! " # $ % & ' ( )
	16, 32, 12, 20, 12, 10,			! * + , - . /
	REP 10 OF (20),				! 0 1 2 3 4 5 6 7 8 9
	12, 12, 30, 36, 30, 14, 36,		! : ; < = > ? @
	24, 22, 24, 28, 18, 18, 28, 28, 10, 10,	! A B C D E F G H I J
	22, 18, 32, 28, 30, 20, 30, 22, 18, 20,	! K L M N O P Q R S T
	28, 24, 36, 22, 22, 22,			! U V W X Y Z
	12, 12, 12, 12, 20, 12,			! [ \ ] ^ _ `
	18, 20, 18, 20, 18, 10, 18, 20, 10, 10,	! a b c d e f g h i j
	18, 10, 30, 20, 20, 20, 20, 12, 14, 10,	! k l m n o p q r s t
	20, 18, 28, 18, 18, 18,			! u v w x y z
	12, 8, 12, 12, 0,			! { | } ~ DEL
	REP 128 OF (0));			! Rest of control characters

OWN					! Holds old file name when creating a new file
    OLD_FILE : $STR_DESCRIPTOR (CLASS = DYNAMIC, STRING = (0, 0));

OWN
    TMSCHR  : INITIAL (0),		! Number of characters written to output file
    FILE_NO : INITIAL (0);		! Continuation file number

!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL
    TAB : UNSIGNED (8);

%IF %BLISS (BLISS32)
%THEN

EXTERNAL ROUTINE			! File open error handling routine for BLISS32
    OPEN_ERROR;

%FI

%SBTTL 'GLOBAL ROUTINE RNOTMS - Generate TMS-11 Output from RUNOFF text'

GLOBAL ROUTINE RNOTMS (RNO_LEN, RNO_PTR, DSC) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine converts RUNOFF input text to TMS-11 input text
!
! FORMAL PARAMETERS:
!
!	RNO_LEN	- Length of input text
!	RNO_PTR - CH$PTR to input text
!	DSC	- Address of output string descriptor
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!--
    BEGIN
    LOCAL
	LINE : VECTOR [CH$ALLOCATION (BUFFER_SIZE + 50)],
	LEADING_BLANKS,
	I_PTR,					! Copy of input line pointer
	I_LEN,					! Copy of input line length
	L_PTR,					! Pointer to output line
	L_LEN,					! Length of output line
	DOING_BOLD,				! Bold sequence in progress
	DOING_ITALICS,				! Italic sequence in progress
	BOLD_CHAR,				! Current character is bold
	ITALIC_CHAR,				! Current character is italic
	OPEN_QUOTE,				! Next " is an open quote if TRUE
	CH;					! Current character

    L_LEN = 0;					! No characters in output string
    L_PTR = CH$PTR (LINE);			! Point to beginning of output string
    DOING_BOLD = FALSE;				! Not doing a bold string
    BOLD_CHAR = FALSE;				! Current character is not bold
    DOING_ITALICS = FALSE;			! Not italicized string
    ITALIC_CHAR = FALSE;			! Current character is not italic
    OPEN_QUOTE = TRUE;				! Next " is an open quote

    I_LEN = .RNO_LEN;
    I_PTR = CH$PLUS (.RNO_PTR, .RNO_LEN - 1);

    DECR I FROM .RNO_LEN - 1 TO 0 DO
	BEGIN
	!
	! Remove trailing whitespace
	!
	CH = CH$RCHAR (.I_PTR);

	IF (.CH NEQ %C' ') AND (.CH NEQ TAB) THEN EXITLOOP;

	I_LEN = .I;
	I_PTR = CH$PLUS (.I_PTR, -1);
	END;

    I_PTR = .RNO_PTR;

    DECR I FROM .I_LEN TO 1 DO
	!
	! Convert leading tabs to "/u"'s
	!
	IF CH$RCHAR_A (I_PTR) EQL TAB 
	THEN
	    BEGIN
	    CH$WCHAR_A (%C'/', L_PTR);
	    CH$WCHAR_A (%C'u', L_PTR);
	    L_LEN = .L_LEN + 2;
	    END
	ELSE
	    BEGIN
	    I_LEN = .I;
	    I_PTR = CH$PLUS (.I_PTR, -1);	! Back up to account for overshoot
	    EXITLOOP;
	    END;

    LEADING_BLANKS = 0;
    DECR I FROM .I_LEN TO 1 DO
	!
	! Count the number of leading blanks
	!
	IF CH$RCHAR_A (I_PTR) EQL %C' '
	THEN
	    LEADING_BLANKS = .LEADING_BLANKS + 1
	ELSE
	    BEGIN
	    I_LEN = .I;
	    I_PTR = CH$PLUS (.I_PTR, -1);	! Back up to account for overshoot
	    EXITLOOP;
	    END;

    IF .LEADING_BLANKS
    THEN
	BEGIN
	!
	! Odd number of leading blanks
	!
	I_LEN = .I_LEN + 1;
	I_PTR = CH$PLUS (.I_PTR, -1);

	LEADING_BLANKS = .LEADING_BLANKS - 1;
	END;

    INCR I FROM 1 TO .LEADING_BLANKS / 2 DO
	BEGIN
	!
	! Insert indent sequence for each pair of leading blanks
	!
	CH$WCHAR_A (%C'/', L_PTR);
	CH$WCHAR_A (%C'm', L_PTR);
	L_LEN = .L_LEN + 2;
	END;

    !
    ! Process text portion of line
    !
    INCR I FROM 1 TO .I_LEN DO
	BEGIN
	IF .L_LEN GEQ BUFFER_SIZE
	THEN
	    BEGIN
	    !
	    ! String too long for buffer
	    !
%IF %BLISS (BLISS32)
%THEN						! Signal errors in BLISS32

	    SIGNAL (INDEX$_TRUNCATED, 0, INDEX$_TEXTD, 2, .L_LEN, CH$PTR (LINE));

%ELSE						! Use $XPO_PUT_MSG otherwise

	    $XPO_PUT_MSG (SEVERITY = WARNING,
		STRING = 'string too long - truncated',
		STRING = $STR_CONCAT ('entry text: ', (.L_LEN, CH$PTR (LINE))));

%FI

	    EXITLOOP;
	    END;

	CH = CH$RCHAR_A (I_PTR);		! Get next character

	SELECTONE .CH OF
	SET

	[%C'*']:
	    !
	    ! Bold next character
	    !
	    BOLD_CHAR = TRUE;

	[%C'&']:
	    !
	    ! Next character is italic
	    !
	    ITALIC_CHAR = TRUE;

	[%C'%']:
	    BEGIN
	    !
	    ! Overstrike previous character
	    !
%IF %BLISS (BLISS32)
%THEN						! Signal errors for BLISS32

	    SIGNAL (INDEX$_OVERSTRK, 0, INDEX$_TEXTD, 2, .RNO_LEN, .RNO_PTR);

%ELSE						! Use $XPO_PUT_MSG otherwise

	    $XPO_PUT_MSG (SEVERITY = WARNING,
		STRING = 'The following line contains an overstrike sequence',
		STRING = $STR_CONCAT ('entry text: ', (.RNO_LEN, .RNO_PTR)));

%FI

	    CH$WCHAR_A (%C'[', L_PTR);
	    CH$WCHAR_A (%C'e', L_PTR);
	    CH$WCHAR_A (%C'c', L_PTR);
	    CH$WCHAR_A (%C']', L_PTR);
	    L_LEN = .L_LEN + 4;
	    END;

	[OTHERWISE]:
	    BEGIN
	    !
	    ! A 'normal' character
	    !
	    IF .CH EQL %C'_'
	    THEN
		BEGIN
		!
		! Character is quoted.
		! Get character.
		!
		CH = CH$RCHAR_A (I_PTR);
		I = .I + 1;
		END;

	    IF NOT .BOLD_CHAR
	    THEN
		BEGIN
		!
		! Do not bold this character
		!
		IF  .DOING_BOLD
		AND (.CH NEQ %C' ')
		THEN
		    BEGIN
		    !
		    ! Bold is turned on and the current character is non-blank
		    !
		    CH$WCHAR_A (%C'[', L_PTR);	! Turn off bold
		    CH$WCHAR_A (%C'f', L_PTR);
		    CH$WCHAR_A (%C'r', L_PTR);
		    L_LEN = .L_LEN + 3;

		    IF .DOING_ITALICS
		    THEN
			BEGIN
			!
			! Must turn italics off too on since both bold
			! and italics use the same termination sequence
			!
			CH$WCHAR_A (%C'f', L_PTR);
			CH$WCHAR_A (%C'r', L_PTR);
			L_LEN = .L_LEN + 2;

			IF .ITALIC_CHAR
			THEN
			    BEGIN
			    !
			    ! This character is italicized.
			    ! Turn italics back on.
			    !
			    CH$WCHAR_A (%C'f', L_PTR);
			    CH$WCHAR_A (%C'i', L_PTR);
			    L_LEN = .L_LEN + 2;
			    END
			ELSE
			    !
			    ! Character is not italicized.
			    ! Note that we've turned off italics
			    !
			    DOING_ITALICS = FALSE;
			END;

		    CH$WCHAR_A (%C']', L_PTR);
		    L_LEN = .L_LEN + 1;

		    DOING_BOLD = FALSE;
		    END;
		END
	    ELSE
		BEGIN
		!
		! Bold next character
		!
		IF NOT .DOING_BOLD
		THEN
		    BEGIN
		    !
		    ! Turn on bolding
		    !
		    CH$WCHAR_A (%C'[', L_PTR);
		    CH$WCHAR_A (%C'f', L_PTR);
		    CH$WCHAR_A (%C'b', L_PTR);
		    CH$WCHAR_A (%C']', L_PTR);
		    L_LEN = .L_LEN + 4;

		    DOING_BOLD = TRUE;
		    END;

		BOLD_CHAR = FALSE;		! Reset bold character flag
		END;

	    IF NOT .ITALIC_CHAR
	    THEN
		BEGIN
		!
		! Do not italicize this character
		!
		IF  .DOING_ITALICS
		AND (.CH NEQ %C' ')
		THEN
		    BEGIN
		    !
		    ! Italics are turned on and the current character is non-blank
		    !
		    CH$WCHAR_A (%C'[', L_PTR);	! Turn off italics
		    CH$WCHAR_A (%C'f', L_PTR);
		    CH$WCHAR_A (%C'r', L_PTR);
		    L_LEN = .L_LEN + 3;

		    IF .DOING_BOLD
		    THEN
			BEGIN
			!
			! Must turn bold off and back on since both
			! bold and italics use the same termination sequence
			!
			CH$WCHAR_A (%C'f', L_PTR);
			CH$WCHAR_A (%C'r', L_PTR);
			CH$WCHAR_A (%C'f', L_PTR);
			CH$WCHAR_A (%C'b', L_PTR);
			L_LEN = .L_LEN + 4;
			END;

		    CH$WCHAR_A (%C']', L_PTR);
		    L_LEN = .L_LEN + 1;

		    DOING_ITALICS = FALSE;
		    END;
		END
	    ELSE
		BEGIN
		!
		! Italicize next character
		!
		IF NOT .DOING_ITALICS
		THEN
		    BEGIN
		    !
		    ! Turn on italics
		    !
		    CH$WCHAR_A (%C'[', L_PTR);
		    CH$WCHAR_A (%C'f', L_PTR);
		    CH$WCHAR_A (%C'i', L_PTR);
		    CH$WCHAR_A (%C']', L_PTR);
		    L_LEN = .L_LEN + 4;

		    DOING_ITALICS = TRUE;
		    END;

		ITALIC_CHAR = FALSE;		! Reset flag
		END;

	    IF (.CH LSS %C' ') OR (.CH GTR %O'176')
	    THEN
		BEGIN
		!
		! Character is a control character
		!
		IF .CH EQL TAB
		THEN
		    BEGIN
		    !
		    ! TAB character
		    !
		    CH$WCHAR_A (%C'/', L_PTR);
		    CH$WCHAR_A (%C'u', L_PTR);
		    L_LEN = .L_LEN + 2;
		    END
		ELSE
		    BEGIN
		    !
		    ! Other control characters are illegal
		    !
%IF %BLISS (BLISS32)
%THEN						! Signal errors in BLISS32

		    SIGNAL (INDEX$_CTRLCHAR, 0, INDEX$_TEXTD, 2, .RNO_LEN, .RNO_PTR);

%ELSE						! Use $XPO_PUT_MSG otherwise

		    $XPO_PUT_MSG (SEVERITY = WARNING,
			STRING = 'the following line contains control characters - ignored',
			STRING = $STR_CONCAT ('entry text: ', (.RNO_LEN, .RNO_PTR)));

%FI

		    END;
		END
	    ELSE
		SELECTONE .CH OF
		SET

		[%C'_']:
		    BEGIN
		    CH$MOVE (5, CH$PTR (UPLIT ('*n10*')), .L_PTR);
		    L_PTR = CH$PLUS (.L_PTR, 5);
		    L_LEN = .L_LEN + 5;
		    END;

		[%C'-']:
		    BEGIN
		    CH$WCHAR_A (%C'+', L_PTR);
		    CH$WCHAR_A (%C'n', L_PTR);
		    L_LEN = .L_LEN + 2;
		    END;

		[%C'*']:
		    BEGIN
		    CH$WCHAR_A (%C'+', L_PTR);
		    CH$WCHAR_A (%C'a', L_PTR);
		    L_LEN = .L_LEN + 2;
		    END;

		[%C'=']:
		    BEGIN
		    CH$WCHAR_A (%C'+', L_PTR);
		    CH$WCHAR_A (%C'e', L_PTR);
		    L_LEN = .L_LEN + 2;
		    END;

		[%C'+']:
		    BEGIN
		    CH$WCHAR_A (%C'+', L_PTR);
		    CH$WCHAR_A (%C'p', L_PTR);
		    L_LEN = .L_LEN + 2;
		    END;

		[%C'\']:
		    BEGIN
		    CH$WCHAR_A (%C'+', L_PTR);
		    CH$WCHAR_A (%C's', L_PTR);
		    L_LEN = .L_LEN + 2;
		    END;

		[%C'@']:
		    BEGIN
		    CH$WCHAR_A (%C'+', L_PTR);
		    CH$WCHAR_A (%C't', L_PTR);
		    L_LEN = .L_LEN + 2;
		    END;

		[%C'/']:
		    BEGIN
		    CH$WCHAR_A (%C'+', L_PTR);
		    CH$WCHAR_A (%C'.', L_PTR);
		    L_LEN = .L_LEN + 2;
		    END;

		[%C'|']:
		    BEGIN
		    CH$WCHAR_A (%C'+', L_PTR);
		    CH$WCHAR_A (%C'v', L_PTR);
		    L_LEN = .L_LEN + 2;
		    END;

		[%C'{']:
		    BEGIN
		    CH$WCHAR_A (%C'+', L_PTR);
		    CH$WCHAR_A (%C'w', L_PTR);
		    L_LEN = .L_LEN + 2;
		    END;

		[%C'}']:
		    BEGIN
		    CH$WCHAR_A (%C'+', L_PTR);
		    CH$WCHAR_A (%C'x', L_PTR);
		    L_LEN = .L_LEN + 2;
		    END;

		[%C'<']:
		    BEGIN
		    CH$WCHAR_A (%C'+', L_PTR);
		    CH$WCHAR_A (%C'y', L_PTR);
		    L_LEN = .L_LEN + 2;
		    END;

		[%C'>']:
		    BEGIN
		    CH$WCHAR_A (%C'+', L_PTR);
		    CH$WCHAR_A (%C'z', L_PTR);
		    L_LEN = .L_LEN + 2;
		    END;

		[%C'[']:
		    BEGIN
		    CH$WCHAR_A (%C'+', L_PTR);
		    CH$WCHAR_A (%C'(', L_PTR);
		    L_LEN = .L_LEN + 2;
		    END;

		[%C']']:
		    BEGIN
		    CH$WCHAR_A (%C'+', L_PTR);
		    CH$WCHAR_A (%C')', L_PTR);
		    L_LEN = .L_LEN + 2;
		    END;

		[%C'"']:
		    BEGIN
		    IF .OPEN_QUOTE
		    THEN
			BEGIN
			!
			! Opening quote of quoted string
			!
			CH$WCHAR_A (%C'"', L_PTR);
			CH$WCHAR_A (%C'"', L_PTR);

			OPEN_QUOTE = FALSE;	! Next quote is not an open quote
			END
		    ELSE
			BEGIN
			!
			! Closing quote
			!
			CH$WCHAR_A (%C'''', L_PTR);
			CH$WCHAR_A (%C'''', L_PTR);

			OPEN_QUOTE = TRUE;	! Next quote is open quote
			END;

		    L_LEN = .L_LEN + 2;
		    END;

		[OTHERWISE]:
		    BEGIN
		    !
		    ! A real normal character
		    !
		    CH$WCHAR_A (.CH, L_PTR);
		    L_LEN = .L_LEN + 1;
		    END;

		TES;

	    END;

	TES;

	END;

    IF .DOING_BOLD OR .DOING_ITALICS
    THEN
	BEGIN
	!
	! Turn off bold and italics
	!
	CH$WCHAR_A (%C'[', L_PTR);
	L_LEN = .L_LEN + 1;

	IF .DOING_BOLD
	THEN
	    BEGIN
	    CH$WCHAR_A (%C'f', L_PTR);
	    CH$WCHAR_A (%C'r', L_PTR);
	    L_LEN = .L_LEN + 2;
	    END;

	IF .DOING_ITALICS
	THEN
	    BEGIN
	    CH$WCHAR_A (%C'f', L_PTR);
	    CH$WCHAR_A (%C'r', L_PTR);
	    L_LEN = .L_LEN + 2;
	    END;

	CH$WCHAR_A (%C']', L_PTR);
	L_LEN = .L_LEN + 1;
	END;

    IF NOT .OPEN_QUOTE
    THEN
	!
	! Saw an open quote but no close quote
	!
%IF %BLISS (BLISS32)
%THEN					! Signal errors for BLISS32

	SIGNAL (INDEX$_CLOSEQUOT, 0, INDEX$_TEXTD, 2, .RNO_LEN, .RNO_PTR);

%ELSE					! Use $XPO_PUT_MSG otherwise

	$XPO_PUT_MSG (SEVERITY = WARNING,
	    STRING = 'missing close quote',
	    STRING = $STR_CONCAT ('entry text: ', (.RNO_LEN, .RNO_PTR)));

%FI

    $STR_COPY (STRING = (.L_LEN, CH$PTR (LINE)), TARGET = .DSC);
    END;

%SBTTL 'GLOBAL ROUTINE TMSPUT -- Write a line to output file'
GLOBAL ROUTINE TMSPUT (LEN, PTR, IOB, IDEAL) : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to write a line to the output file.
!
!	If the output file is TMSSIZ blocks, and IDEAL
!	is TRUE, creates a new output file before writing line.
!
!	If the output file is TMSSIZ + 10 blocks, creates
!	a new output file unconditionally.
!
!	New output file names are of the form 
!		{first 3 characters of original file name}{3 digits}.TMS
!
! FORMAL PARAMETERS:
!
!	LEN	- Length of line
!	PTR	- CH$PTR to line
!	IOB	- Address of IOB
!	IDEAL	- TRUE if file can be broken on this line
!
! IMPLICIT INPUTS:
!
!	TMSCHR	- Number of characters written to output file
!	TMSSIZ	- Ideal file size in blocks
!
! IMPLICIT OUTPUTS:
!
!	TMSCHR	- Number of characters written to output file
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!--
    BEGIN
    MAP
	IOB : REF $XPO_IOB ();

    IF ((.TMSCHR GEQ (.TMSSIZ * 512)) AND .IDEAL)	! Best place to start a new file
    OR  (.TMSCHR GEQ (.TMSSIZ * 512 + 5120))		! Unconditionally start a new file
    THEN
	BEGIN
	!
	! Must start a new output file.
	! TMS11 can process only 40-50 block files maximum.
	!
	LOCAL
	    L_NAME,
	    SPEC_BLK : $XPO_SPEC_BLOCK;

	IF .OLD_FILE [STR$H_LENGTH] EQL 0
	THEN
	    !
	    ! Save first output file name.
	    ! We use it to build the new file name and 
	    ! for a related file specification.
	    !
	    $STR_COPY (STRING = IOB [IOB$T_RESULTANT], TARGET = OLD_FILE);

	!
	! Parse old file name
	!
	$XPO_PARSE_SPEC (FILE_SPEC = OLD_FILE, SPEC_BLOCK = SPEC_BLK);

	!
	! Use up to 6 characters of old file name for new file name
	!
	IF .SPEC_BLK [XPO$H_FILE_NAME] GEQ 6
	THEN
	    L_NAME = 6
	ELSE
	    L_NAME = .SPEC_BLK [XPO$H_FILE_NAME];

	!
	! Close current file
	!
	$XPO_CLOSE (IOB = .IOB);

	!
	! Open new file.
	!
	FILE_NO = .FILE_NO + 1;
	$XPO_IOB_INIT (IOB = .IOB);
	$XPO_OPEN (IOB = .IOB, OPTIONS = OUTPUT, DEFAULT = OLD_FILE,
	    FILE_SPEC = $STR_CONCAT ((.L_NAME, .SPEC_BLK [XPO$A_FILE_NAME]),
		$STR_ASCII (.FILE_NO, UNSIGNED, LEADING_ZERO, LENGTH = 3))
	    %IF %BLISS (BLISS32) %THEN , FAILURE = OPEN_ERROR %FI
	    );

%IF %BLISS (BLISS32)
%THEN							! Signal messages in BLISS32

	SIGNAL (INDEX$_TMS11, 1, IOB [IOB$T_RESULTANT]);

%ELSE							! Use $XPO_PUT_MSG otherwise

	$XPO_PUT_MSG (SEVERITY = SUCCESS, 
	    STRING = $STR_CONCAT ('output file full - continuing with file ''', IOB [IOB$T_RESULTANT], ''''));

%FI

	!
	! Write initial lines
	!
	$XPO_PUT (IOB = .IOB, STRING = TMSTOF);
	$XPO_PUT (IOB = .IOB, STRING = ' ');
	TMSCHR = .TMSTOF [STR$H_LENGTH] + 1;
	END;

    !
    ! Write line to file
    !
    TMSCHR = .TMSCHR + .LEN;
    $XPO_PUT (IOB = .IOB, STRING = (.LEN, .PTR));
    END;

END				! End of module
ELUDOM
