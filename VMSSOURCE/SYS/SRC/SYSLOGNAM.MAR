	.TITLE	SYSLOGNAM - Old System Service Interface to Logical Names
	.IDENT	'V04-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; D. N. CUTLER 10-OCT-76
;
; Old System Services Interfaces to Manipulate Logical Names
;
;	$CRELOG - CREATE    Logical Name
;	$DELLOG - DELETE    Logical Name
;	$TRNLOG - TRANSLATE Logical Name
;
;   The arguments are probed by these routines before they are passed off
;   to the new system services so that the previous access mode is correct.
;   The new system services are call thru the CMKRNL dispatcher so that the
;   previous mode is CMKRNL so that literal data in this code can be accessed.
;
;
; MODIFICATION HISTORY:
;
;	V03-014	MSH0053		Michael S. Harvey	29-May-1984
;		Probe argument lists for $CRELOG, $TRNLOG and $DELLOG to
;		ensure accessibility. Also, make sure that the minimum
;		number of arguments for these services has been specified.
;		This ensures that behavior observed prior to these services
;		becoming caller's mode services is maintained.
;
;	V03-013	TMK0003		Todd M. Katz		15-Nov-1983
;		Fix a bug introduced by TMK0002. The address of $TRNLOG's 
;		optional output table parameter must be loaded into R8
;		before R8 is ever referenced. With the TMK0002 change if the
;		logical name started with an underscore (and no translation
;		is attempted), or DSBMSK specified that no table was to be
;		searched, then R8 was never being initialized before it was
;		referenced. As one might imagine, this lead to unpredictable
;		results. 
;
;	V03-012	TMK0002		Todd M. Katz		19-Nov-1983
;		Optimize $TRNLOG in those cases when the caller has not 
;		requested that the table in which the translated logical name 
;		was found be returned. The caller requested that the table be
;		returned by specifying the optional system service output
;		parameter TABLE. The optimization consists of calling $TRNLNM
;		only once giving as the table name a logical name that
;		equates to the list of one or more tables that the caller wants 
;		searched for the target logical name. The logical names that
;		may potentially serve as table names are created at system 
;		initialization time. The optional system service input 
;		parameter DSBMSK is used to select which logical name is used
;		as the table name. The reason why this optimization is 
;		applicable only when TABLE has not been specified is because
;		it is not obvious as to which table the logical name was found
;		when $TRNLNM is presented with a list of tables to search. Thus,
;		the TABLE information could not be appropriately returned.
;
;	V03-011	TMK0001		Todd M. Katz		23-Oct-1983
;		Change the logical name table names that these old services
;		use. Replace LNM$PROCESS with LOG$PROCESS, LNM$GROUP with
;		LOG$GROUP, and LNM$SYSTEM with LOG$SYSTEM. These logical names
;		which serve as table names for all three of the old system 
;		services (SYS$CRELOG, SYS$DELLOG, and SYS$TRNLOG) are setup at 
;		system initialization time, and maybe changed by users in 
;		order for them to make use of the features of the new logical 
;		name services without converting existing programs to use the 
;		new services.
;
;	V03-010	RAS0175		Ron Schaefer		28-Jul-1983
;		Add support in $CRELOG to strip a leading "_" and set
;		LNM$M_TERMINAL;  remove recognition of LNM$M_CONCEALED
;		from $TRNLOG; and make $TRNLOG recognize PPF-format names.
;
;	V03-009	RAS0167		Ron Schaefer		21-Jul-1983
;		Add special condition handler to $TRNLOG in order to
;		properly process programs with system service failure mode
;		exception enabled.
;
;	V03-008	RAS0171		Ron Schaefer		20-Jul-1983
;		Make the register masks in RAS0170 be constant and
;		not relocatable.
;
;	V03-007	RAS0170		Ron Schaefer		18-Jul-1983
;		Fixed trashed registers from a MOVC3 when prefixing
;		"_"s in $TRNLOG.
;
;	V03-006	RAS0165		Ron Schaefer		 5-Jul-1983
;		Eliminate the access mode argument to $TRNLNM from $TRNLOG.
;		Make sure there is a non-kernel mode access mode argument
;		for $CRELOG and $DELLOG.
;
;	V03-005	DMW4059		DMWalp			23-Jun-1983
;		Change $xxLNM value parameters to be by reference
;
;	V03-004	DMW4055		DMWalp			22-Jun-1983
;		Make system services to be mode of caller.  Removed all
;		priv checks, probes and added condition handler setup.
;
;	V03-003	DMW4049		DMWalp			15-Jun-1983
;		Save R0 during MOVC3
;
;	V03-002	DMW4030		DMWalp			20-Oct-1982
;		Rewrite to call new system services.
;
;	V03-001	KDM0002		Kathleen D. Morse	28-Jun-1982
;		Added $PRDEF.
;

	.PAGE
;
; MACRO library calls
; 
	$CHFDEF				; define condition handling
	$CRELOGDEF			; define CRELOG symbols
	$CRELNMDEF			; define CRELNM arglist
	$DELLOGDEF			; define DELLOG symbols
	$DELLNMDEF			; define DELLNM arglist
	$TRNLOGDEF			; define TRNLOG symbols
	$TRNLNMDEF			; define TRNLNM arglist
	$LNMDEF				; define new log nam offsets
	$LOGDEF 			; define log offsets
	$PSLDEF 			; define PSL offsets
	$SSDEF				; define system status values
 
;
; LOCAL SYMBOLS
;
; argument list offset definitions for CREATE logical name
;
TBLFLG	 = 4				; logical name table number
LOGNAM	 = 8				; address of logical name string
	   				;  descriptor
EQLNAM	 = 12				; address of equivalence name string
	   				;  descriptor
CRACMODE = 16				; access mode
 
; 
; argument list offset definitions for DELETE logical name
;
TBLFLG	 = 4				; logical name table number
LOGNAM	 = 8				; address of logical name string
	   				;  descriptor
DLACMODE = 12				; access mode
 
;
; argument list offset definitions for TRANSLATE logical name
;
TRLOGNAM = 4				; address of logical name string
	   				;  descriptor
RSLLEN	 = 8				; address to store length of result
	   				;  string
RSLBUF	 = 12				; address of result buffer descriptor
TABLE	 = 16				; address to store translation table
	   				;  number
TRACMODE = 20				; address to store assignment access
	   				;  mode
DSBMSK	 = 24				; table search disable mask

;
; local area storage defination for $CRELNM call
;
RET_TRANSIZE = 0			; the returned translation size
RET_TRANATTR = 4			; the returned translation attributes
RET_ACMODE   = 8			; the returned access mode
IN_ACMODE    = 12			; the input access mode
LOCAL_AREA   = 16			; the number of byte the above take

ESCAPE = 27				; ASCII escape char for PPFs

	.PSECT	YF$SYSLOGNAM
;
; Literal string definitions
;
TABLE_NAME_LIST:			; array of descriptor addresses
	.ADDRESS SYSTEM_TABLE		;  pointer to system table name
	.ADDRESS GROUP_TABLE		;  pointer to group table name
	.ADDRESS PROCESS_TABLE		;  pointer to process table name

TRNLOG_TABLE:				; array of desc addrs equated to DSBMSK
	.ADDRESS PGS_TABLE		; DSBMSK = 0 -> PROCESS, GROUP, & SYSTEM
	.ADDRESS PG_TABLE		; DSBMSK = 1 -> PROCESS & GROUP
	.ADDRESS PS_TABLE		; DSBMSK = 2 -> PROCESS & SYSTEM
	.ADDRESS PROCESS_TABLE		; DSBMSK = 3 -> PROCESS 
	.ADDRESS GS_TABLE		; DSBMSK = 4 -> GROUP & SYSTEM
	.ADDRESS GROUP_TABLE		; DSBMSK = 5 -> GROUP 
	.ADDRESS SYSTEM_TABLE		; DSBMSK = 6 -> SYSTEM

SYSTEM_TABLE:
	.ASCID	"LOG$SYSTEM"		; system table name
GROUP_TABLE:
	.ASCID	"LOG$GROUP"		; group table name
PROCESS_TABLE:
	.ASCID	"LOG$PROCESS"		; process table name

GS_TABLE:				; group and system table names
	.ASCID	"TRNLOG$_GROUP_SYSTEM"

PG_TABLE:				; process and group table names
	.ASCID	"TRNLOG$_PROCESS_GROUP"

PS_TABLE:				; process and system table names
	.ASCID	"TRNLOG$_PROCESS_SYSTEM"

PGS_TABLE:				; process, group, and system table names
	.ASCID	"TRNLOG$_PROCESS_GROUP_SYSTEM"

TABLE_MODE:
	.BYTE	1, 3			; System Table is exec mode
					; Group Table is user mode

LNM_TERM:
	.LONG	LNM$M_TERMINAL		; terminal attribute for $CRELNM

	.PAGE
	.SBTTL	CREATE Logical Name
;+
; EXE$CRELOG - CREATE Logical Name
;
; This service provides the capability to insert a logical name equivalence
; into either the process, group, or system logical name table via the old
; system service interface.
;
; INPUTS:
;
;	TBLFLG (AP)   = logical name table number.
;	LOGNAM (AP)   = address of logical name string descriptor.
;	EQLNAM (AP)   = address of equivalence name string descriptor.
;	CRACMODE (AP) = access mode of logical name to be created.
;
; OUTPUTS:
;
;	R0 low bit clear indicates failure to create logical name table entry.
;		R0 = exception turned in return status
;		R0 = status returned from new sevice
;
;	R0 low bit set indicates successful completion.
;		R0 = status returned from new sevice
;
;-
 
	.ENTRY	EXE$CRELOG,^M<R2,R3,R4,R6,R7,R8>
	;
	; Only registers R0-R4 are used, the other registers are saved for
	; compatability with old versions of the service
	;

	;
	; Return exception as return status
	;
	MOVAB	L^EXE$SIGTORET,(FP)

	;
	; Verify that the argument list is accessible and has the minimum
	; number of arguments for successful execution of the service.
	;
	ASSUME CRELOG$_NARGS LT 128
	CMPB	(AP),#CRELOG$_NARGS	; Minimum number of arguments specified?
	BLSSU	INSARG			; If LSSU, no, return error status
	TSTL	<CRELOG$_NARGS*4>(AP)	; Touch last argument, verify accessibility

	;
	; Calculate access mode and check table number
	;
	EXTZV	#0,#2,CRACMODE(AP),R2	; get caller specified access mode
	BSBW	CHECKOUT		; check table number and privilege
	
	;
	; Set up itemlist for $CRELNM
	;  Default index ( LNM$_INDEX ) of zero
	;
	CLRQ	-(SP)			; end of list, return size not needed
	CLRL	R4			; flag no attributes
	MOVQ	@EQLNAM(AP),R0		; get equiv name descriptor
	CMPB	#^A\_\,(R1)		; leading "_"?
	BNEQ	10$			; nope
	DECL	R0			; reduce size
	INCL	R1			; advance ptr
	INCL	R4			; flag terminal attribute
10$:	MOVQ	R0,-(SP)		; equivalence name descriptor
	MOVW	#LNM$_STRING,2(SP)	; stuff the item list code
	BLBC	R4,20$			; need an attribute item?
	CLRL	-(SP)			; no return len
	PUSHAL	LNM_TERM		; point to terminal attribute
	PUSHL	#<4+<LNM$_ATTRIBUTES@16>> ; item code and size
20$:	MOVL	SP,R0			; save the pointer to the list
	MOVL	TABLE_NAME_LIST[R3],R1	; level of indirection
	PUSHL	R2			; save access mode for reference
	PUSHL	#LNM$M_CRELOG		; save attributes for reference
	MOVL	SP,R2			; save pointer to ACMODE and ATTR

	;
	; Call System Service
	;
;	$CRELNM_S  ATTR	    = (R2),-
;		   TABNAM   = (R1),-
;		   LOGNAM   = @LOGNAM(AP),-
;		   ACMODE   = 4(R2),-
;		   ITMLST   = (R0)
	PUSHAL	(R0)
	ASSUME  CRELNM$_ITMLST EQ CRELNM$_ACMODE+4
	PUSHAL	4(R2)
	ASSUME  CRELNM$_ACMODE EQ CRELNM$_LOGNAM+4
	PUSHAL	@LOGNAM(AP)
	ASSUME  CRELNM$_LOGNAM EQ CRELNM$_TABNAM+4
 	PUSHAL	(R1)
	ASSUME  CRELNM$_TABNAM EQ CRELNM$_ATTR+4
	PUSHAL	(R2)
	ASSUME  CRELNM$_NARGS  EQ 5
	CALLS	#CRELNM$_NARGS,@#SYS$CRELNM - P1SYSVECTORS + ^X80000000
	RET

	.PAGE
	.SBTTL	Check table number, privileges and logical name string
;
; Check table number, and access mode
;
CHECKOUT:				; check table number and access mode
	;
	; Logical name table number checkout
	;
	MOVZBL	TBLFLG(AP),R3		; get logical name table number
	CMPL	#LOG$C_PROCESS,R3	; legal table number?
	BLSS	10$			; number greater then 2
	BEQL	20$			; number was 2 ( process table )

	;
	; Set up access mode for group and system tables
	;
	MOVZBL	TABLE_MODE[R3],R2	; convert table to acmode
		    			; group is user mode, system is exec
	RSB				; 

10$:	MOVZWL	#SS$_IVLOGTAB,R0	; set invalid logical name table number
	RET				; 

20$:	TSTL	R2			; was an access mode given?
	BNEQ	30$			; use it if so
	MOVPSL	R2			; otherwise use mode of caller
	EXTZV	#PSL$V_CURMOD,#PSL$S_CURMOD,R2,R2
30$:	RSB	



INSARG:	MOVZWL	#SS$_INSFARG,R0		; Report incorrect arg list count
	RET

	.PAGE
	.SBTTL	DELETE Logical Name
;+
; EXE$DELLOG - DELETE Logical Name
;
; This service provides the capability to delete a previously created logical
; name equivalence from either the process, group, or system logical
; name table via the old system service interface.
;
; INPUTS:
;
;	TBLFLG (AP)   = logical name table number.
;	LOGNAM (AP)   = address of logical name string descriptor. zero
;			    implies all.
;	DLACMODE (AP) = access mode of logical name to be deleted.
;
; OUTPUTS:
;
;	R0 low bit clear indicates failure to delete logical name table entry.
;		R0 = exception turned in return status
;		R0 = status returned from new sevice
;
;	R0 low bit set indicates successful completion.
;		R0 = status returned from new sevice
;
;-
 
	.ENTRY	EXE$DELLOG,^M<R2,R3,R4,R5,R6,R7,R8>
	;
	; Only registers R0-R3 are used, the other registers are saved for
	; compatability with old versions of the service
	;

	;
	; Return exception as return status
	;
	MOVAB	L^EXE$SIGTORET,(FP)

	;
	; Verify that the argument list is accessible and has the minimum
	; number of arguments for successful execution of the service.
	;
	ASSUME DELLOG$_NARGS LT 128
	CMPB	(AP),#DELLOG$_NARGS	; Minimum number of arguments specified?
	BLSSU	INSARG			; If LSSU, no, return error status
	TSTL	<DELLOG$_NARGS*4>(AP)	; Touch last argument, verify accessibility

	;
	; Calculate access mode and check table number
	;
	EXTZV	#0,#2,DLACMODE(AP),R2	; get specified access mode
	BSBW	CHECKOUT		; check table number and privileges

	MOVL	TABLE_NAME_LIST[R3],R1	; level of indirection

	PUSHL	R2			; save access mode for reference
	MOVL	SP,R2			; save pointer to ACMODE
	;
	; Call System Service
	;
;	$DELLNM_S  TABNAM   = (R1),-
;		   LOGNAM   = @LOGNAM(AP),-
;		   ACMODE   = (R2)
	PUSHAL	(R2)
	ASSUME	DELLNM$_ACMODE EQ DELLNM$_LOGNAM+4
	PUSHAL	@LOGNAM(AP)
	ASSUME	DELLNM$_LOGNAM EQ DELLNM$_TABNAM+4
	PUSHAL	(R1)
	ASSUME  DELLNM$_NARGS  EQ 3
	CALLS	#DELLNM$_NARGS,@#SYS$DELLNM - P1SYSVECTORS + ^X80000000
	RET

	.PAGE
	.SBTTL	TRANSLATE Logical Name
;+
; EXE$TRNLOG - TRANSLATE Logical Name
;
; This service provides the capability to translate a logical name string
; to a resultant name string via old system service interface.
;
; INPUTS:
;
;	TRLOGNAM (AP) = address of logical name string descriptor.
;	RSLLEN (AP)   = address to store length of result string.
;	RSLBUF (AP)   = address of resultant string buffer descriptor.
;	TABLE (AP)    = address to store translation table number.
;	TRACMODE (AP) = address to store assignment access mode.
;	DSBMSK (AP)   = table search disable mask.
;
; OUTPUTS:
;
;	R0 low bit clear indicates failure to translate logical name string.
;		R0 = SS$_RESULTOVF - can not add "_" or "__" to  output buffer,
;		     		     the buffer is to small
;		R0 = exception turned in return status
;		R0 = status returned from new sevice
;
;	R0 low bit set indicates successful completion.
;		R0 = status returned from new sevice
;-

	.ENTRY	EXE$TRNLOG,^M<R2,R3,R4,R5,R6,R7,R8>

	;
	; Return exception as return status
	;
	MOVAB	L^EXE$SIGTORET,(FP)

	;
	; Verify that the argument list is accessible and has the minimum
	; number of arguments for successful execution of the service.
	;
	ASSUME TRNLOG$_NARGS LT 128
	CMPB	(AP),#TRNLOG$_NARGS	; Minimum number of arguments specified?
	BLSSU	INSARG			; If LSSU, no, return error status
	TSTL	<TRNLOG$_NARGS*4>(AP)	; Touch last argument, verify accessibility

	BICL3	#^C^X07,DSBMSK(AP),R5	; set table search disable mask
	MOVL	TABLE(AP),R8		; pickup address of the table parameter

	;
	; Resultant string checkout
	;
	MOVL	RSLBUF(AP),R4		; get address of result string buffer
					;  descriptor
	MOVZWL	(R4),R3			; get size of result string buffer
	MOVL	4(R4),R4		; get address of result string buffer

	;
	; Logical Name Checkout
	;
	MOVL	TRLOGNAM(AP),R1		; get address of logical name string
	MOVZWL	(R1),R0			; get length of logical name string
	MOVL	4(R1),R1		; get address of logical name string
	PUSHL	R1			; local copy of lognam descriptor
	PUSHL	R0			;
	MOVL	SP,R2			; remember the location of descriptor

	;
	; Get local stack storage
	;
        SUBL2   #LOCAL_AREA,SP
	MOVL	SP,R6			; get a pointer to our local store

	;
	; Test for no tranlation
	;
	CMPB	#^A"_",(R1)		; logical name start with underscore?
	BNEQ	5$			; continue if no; otherwise,
	BRW	NOTRANS			; special case code for no translation

	;
	; Build itemlist
	;
5$:	CLRQ	-(SP)			; end of list, no return length
	PUSHAL	RET_ACMODE(R6)		; area for returned access mode
	PUSHL	#1!<LNM$_ACMODE@16>	; size of area and item code
	PUSHL	#0			; no return length
	PUSHAL	RET_TRANATTR(R6)	; area for returned trans attributes
	PUSHL	#4!<LNM$_ATTRIBUTES@16> ; size of area and item code
	CLRL	RET_TRANSIZE(R6)	; clear returned longword
	PUSHAL	RET_TRANSIZE(R6)	; return length of translation address
	PUSHAL	(R4)			; translation buffer address
	PUSHL	R3			; size of translation buffer
	MOVW	#LNM$_STRING,2(SP)	; stuff the item list code
	PUSHL	#0			; no return length
	PUSHAL	(SP)			; point to a zeroed longword (0 index)
	PUSHL	#4!<LNM$_INDEX@16>	; stuff the item list code

	;
	; If TABLE has not been specified, then use DSBMSK to index into
	; the list of logical name table names to obtain the address of
	; the logical name to use as the table name in the single call to
	; $TRNLNM.
	;

	CMPZV	#0,#3,R5,#7		; are any tables to be searched?
	BEQL	50$			; return immediately if no

	MOVL	TRNLOG_TABLE[R5],R1	; assume TABLE has not been specified
	TSTL	R8			; TABLE specified?
	BEQL	20$			; must do table loop if so; otherwise,
					; only one $TRNLNM need be done
 
	;
	; Loop thru the valid logical name tables.
	;

	MOVZBL	#2,R7
10$:	BBS	R7,R5,40$

	MOVL	TABLE_NAME_LIST[R7],R1  ; level of indirection

	;
	; Call system service
	;
;	$TRNLNM_S  TABNAM   = (R1),-
;		   LOGNAM   = (R2),-
;		   ITMLST   = -<4*13>(R6)    ; 40 is 13 longwords of itemlist
20$:	PUSHAL	-<4*13>(R6)
	ASSUME	TRNLNM$_ITMLST EQ TRNLNM$_ACMODE+4
	PUSHL	#0
	ASSUME	TRNLNM$_ACMODE EQ TRNLNM$_LOGNAM+4
	PUSHAL	(R2)
	ASSUME	TRNLNM$_LOGNAM EQ TRNLNM$_TABNAM+4
	PUSHAL	(R1)
	ASSUME	TRNLNM$_TABNAM EQ TRNLNM$_ATTR+4
	PUSHL	#0
	ASSUME	TRNLNM$_NARGS  EQ 5

	MOVAB	LNM$SIGTORET,(FP)	; special handler

	CALLS	#TRNLNM$_NARGS,@#SYS$TRNLNM - P1SYSVECTORS + ^X80000000

	MOVAB	L^EXE$SIGTORET,(FP)

	;
	; Test if it worked ( Should only be SS$_NORMAL )
	;
	BLBS	R0,CHECK_ATTR

	;
	; If no translation then try next table
	;		    else return error
	;
	CMPW	R0,#SS$_NOLOGNAM
	BEQL	30$
	RET

	;
	; try next table if table looping is being done.
	;

30$:	TSTL	R8			; is table looping being done?
	BEQL	50$			; done if no table looping
40$:	SOBGEQ	R7,10$			; otherwise continue with next table

	;
	; Tried all tables with no luck
	;
50$:	MOVQ	(R2),R0
	BRB	NOTRANS2		; special case code for no translation

	;
	; No translation, stuff the input into the output buffer
	;
NOTRANS:DECL	R0			; get rid of leading "_", decrease size
	INCL	R1			; bump pointer
NOTRANS2:
	CMPL	R0,R3		        ; is the output buffer big enought
	BGTRU	BUFOVR			; buffer to small, pail out	
	MOVZWL	R0,RET_TRANSIZE(R6)	; store result string length
	MOVC3	R0,(R1),(R4)		; stuff in user buffer
	CLRL	R7			; zero the table number
	CLRL	RET_ACMODE(R6)		; zero the access mode
	MOVZWL	#SS$_NOTRAN,R0		; stuff old error code
	BRB	RET_VALUES		; rejoin for normal exit
	
	;
	; Check if underscores need to be added
	;
CHECK_ATTR:
	;
	; If actual size is greater then returned size
	;
	BBC	#LNM$V_TERMINAL,RET_TRANATTR(R6),RET_VALUES
	MOVL	RET_TRANSIZE(R6),R1	; get actual size
	INCL	RET_TRANSIZE(R6)	; add "_" to count
	CMPL	R1,R3			; will string now fit?
	BGEQU	BUFOVR			; nope
	CMPW	#ESCAPE,(R4)		; is this a PPF?
	BNEQ	60$			; nope
	ADDL2	#4,R4			; insert "_" after PPF info
	SUBL2	#4,R1
60$:	PUSHR	#^M<R0,R4>		; save status and start addr
	MOVC3	R1,(R4),1(R4)		; shift right 1 character
	POPR	#^M<R0,R4>		; restore registers
	MOVB	#^A"_",(R4)		; stuff underscore

	;
	; Return the translation size, table number and access mode
	;
RET_VALUES:
	MOVL	RSLLEN(AP),R1		; get address to store result length
	BEQL	110$			; if not specified
	MOVW	RET_TRANSIZE(R6),(R1)	; store result string length
110$:	TSTL	R8			; is table number to be returned?
	BEQL	120$			; if not specified
	MOVB	R7,(R8)			; store translation table number
120$:	MOVL	TRACMODE(AP),R1		; get address to store assignment
					;  access mode
	BEQL	130$			; if not specified
	MOVB	RET_ACMODE(R6),(R1)	; store assignment access mode
130$:	RET				;

	;
	; Buffer is too small
	;
BUFOVR:	MOVZWL	#SS$_RESULTOVF,R0	; buffer specified too small
	RET				; 

	.SBTTL	LNM$SIGTORET - TURN SS$_NOLOGNAM EXCEPTION INTO RETURN STATUS
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS IS A CONDITION HANDLER THAT TURNS A SS$_NOLOGNAM
;	EXCEPTION IN THE A LOWER
;	FRAME INTO A RETURN FROM THE LOWER FRAME WITH THE EXCEPTION NAME
;	AS THE STATUS.  ALL OTHERE EXCEPTIONS 
;	ARE RESIGNALLED.  UNWINDS ARE IGNORED.
;
; INPUT PARAMETERS:
;	00(AP) = NUMBER OF CONDITION ARGUMENTS.
;	04(AP) = ADDRESS OF SIGNAL ARGUMENT LIST.
;	08(AP) = ADDRESS OF MECHANISM ARGUMENT LIST.
;
; OUTPUT PARAMETERS:
;	R0 - COMPLETION STATUS CODE
;		SS$_RESIGNAL - ALWAYS
;
 
LNM$SIGTORET:
	.WORD	0

	ASSUME	CHF$L_MCHARGLST,EQ,CHF$L_SIGARGLST+4

	MOVQ	CHF$L_SIGARGLST(AP),R0	; GET ADDRESS OF SIGNAL ARGUMENT LIST
	CMPL	#SS$_NOLOGNAM,CHF$L_SIG_NAME(R0) ; MAGIC ERROR?
	BEQL	10$			; BRANCH TO EXIT IF NOT
	CMPL	#SS$_SSFAIL,CHF$L_SIG_NAME(R0) ; OR SSFAIL?
	BNEQ	50$			; BRANCH TO EXIT IF NOT
	CMPL	#SS$_NOLOGNAM,CHF$L_SIG_ARG1(R0) ; MAGIC ERROR?
	BNEQ	50$			; BRANCH TO EXIT IF NOT
	MOVL	CHF$L_SIG_ARG1(R0),CHF$L_MCH_SAVR0(R1) ; SET RETURN STATUS
	BRB	20$
10$:	MOVL	CHF$L_SIG_NAME(R0),CHF$L_MCH_SAVR0(R1) ; SET RETURN STATUS
20$:	CLRL	-(SP)			; CLEAR NEW PC ARGUMENT
	PUSHAB	CHF$L_MCH_DEPTH(R1)	; NUMBER OF FRAMES TO UNWIND
	CALLS	#2,G^SYS$UNWIND		; UNWIND TO ESTABLISHER
50$:	MOVZWL	#SS$_RESIGNAL,R0	; RETURN RESIGNAL STATUS
	RET				;

	.END
