%TITLE 'Processes the .SEND TOC command'
MODULE STC ( IDENT = 'V04-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Processes the .SEND TOC command
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: May, 1979
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	010	REM00010	Ray Marshall	17-November-1983
!		Modified the external definition of ATABLE to use the new
!		  macro ATABLE_DEFINITION defined in ATCODE.REQ.
!
!	009	KFA00009	Ken Alden	16-Mar-1983
!		Save/restore related items now enabled for DSR as well.
!
!	008	REM00008	Ray Marshall	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI
!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

!
! OWN STORAGE:
!
OWN
    PP_SCA : $H_R_SCA_BLOCK;	!Used in PUSH_SCA, POP_SCA macros (defined in SCA.REQ).
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    atable : atable_definition,	! Action table.  Used to identify what type of
				! action is to be taken on encountering any
				! given character.
    FLGT : FLAG_TABLE,
    GCA : GCA_DEFINITION,
    IRA : FIXED_STRING,
    MRA : REF FIXED_STRING,
    NPAGEN : PAGE_DEFINITION,
    NUMPRM : NUMPRM_DEFINE,
    PAGEN : PAGE_DEFINITION,
    PHAN : PHAN_DEFINITION,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION;

EXTERNAL ROUTINE
    ENDWRD,
    OFT,
    OUTLIN,
    PUTTPG,
    RSKIPS,
    SCANT,
    SETCAS,
    SKPSEP;


%SBTTL 'STC  --'
GLOBAL ROUTINE stc (handler_code, do_toc) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See ABSTRACT, in module header.
!
! FORMAL PARAMETERS:
!
!	HANDLER_CODE	- A dummy parameter, used for conformance only.
!	DO_TOC	- If FALSE, the scan is done but no toc entry is made.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--
    BEGIN

    LOCAL
	sca_para_copy,
	sca_indent_copy,
	hold_ind_flag,
	hold_ind_eflag,
	hold_all_flags,				!Vers. 1(123), KAD.
	sca_copy : sca_definition;		!Used to preserve SCA.

    LOCAL
	mra_temp : VECTOR [4 + CH$ALLOCATION (1000)],	!Temporary MRA area
	tsf_temp : VECTOR [tsf_size];		!Temporary TSF

    LOCAL
	mra_address,				!Preserve interrupted MRA
	tsf_address;				!Preserve interrupted TSF

    !Skip the comma and spaces, if any, following the numerical parameter, if any.
    skpsep (ira);

    push_sca;	!Save the SAVEd SCA bits.

    INCR i FROM 0 TO sca_size - 1 DO
	sca_copy [.i] = .sca [.i];		!Save SCA

    !Initialize SCA prior to scanning the string.
    sca_lm = 0;
    sca_rm = 150;				!Set wide right margin so won't start a new line.
    sca_spacing = 1;				!Single spacing avoids spurious intermediate code.
    setcas (leave_case);			!Force first character of first word
						!to upper case, rest to lower case.
    sca_fc = true;				!This is the first character for the MRA.
    sca_fc_case = true;				!Use first character-of-word case rules.
    sca_prescan = false;			!A ';' doesn't terminate the scan.
    sca_para_copy = .sca_para_pnd;		!Don't let FCIMRA do any indentation, etc.
    sca_indent_copy = .sca_indent;		!...
    sca_para_pnd = false;			!...
    sca_indent = 0;				!...
    sca_fill = false;
    sca_justify = false;

    !Preserve the addresses of the structures to which these items refer.
    mra_address = .mra;
    tsf_address = .tsf;

    !Now switch working buffers, so that text currently being accumulated
    !is not disturbed.
    mra = mra_temp;
    tsf = tsf_temp;

    !Now manually set up MRA, to look like a FIXED STRING.
    fs_maxsize (mra) = 1000;
    fs_init (mra);				!And that finishes the initialization.

    !Now initialize TSF for SCANT.

    INCR i FROM 0 TO tsf_size - 1 DO
	tsf [.i] = 0;

    tsf_btc = true;				!This TSF record describes a table of contents entry.

    sca_wrd_int_l = 0;
    sca_wrd_ext_l = 0;
    sca_wrd_iseqn = 0;
    sca_wrd_draft = 0;
    sca_wrd_draft_f = 0;
    sca_wrd_bars = 0;
    sca_wrd_bar_chr = 0;
    sca_wrd_seqn_f = 0;
    sca_wrd_ipagen = 0;
    sca_wrd_footw = 0;
    sca_wrd_f_xtn = 0;
    sca_wrd_l_xtn = 0;
    sca_wrd_lc_pnct = 0;
    sca_wrd_lst_sp = 0;
    sca_wrd_lst_jus = 0;
    sca_wrd_lst_und = 0;
    sca_wrd_pntr = .fs_next (mra);
    sca_wrd_cpend = rintes;			!Tell ENDCHR no character is pending.
    fs_start (mra) = .sca_wrd_pntr;
    hold_ind_flag = .flgt [ind_flag, flag_character];	!Preserve <INDEX flag> status.
    hold_ind_eflag = .flgt [ind_flag, flag_enabled];
    oft (h_no_flags_inde, ind_flag);		!Disable <INDEX flag>

    !Save status of all flags. We disable all flags before scanning the
    !text to be sent to the .BTC file; therefore RUNOFF flags can be
    !sent as normal characters. (Vers. 1(123), KAD.)
    hold_all_flags = .gca_flag_cmd;
    oft (h_no_flags_all, 0);			!Disable all flags.

    scant ();			! Now let SCANT process the command.

    oft (.hold_all_flags, 0);	! Restore saved flags.

    oft (h_no_flags_inde, ind_flag);    !Restore <INDEX flag> to former status.

    flgt [ind_flag, flag_character] = .hold_ind_flag;
    flgt [ind_flag, flag_enabled] = .hold_ind_eflag;

    IF	  .flgt [ind_flag, flag_enabled]
      AND .sca_flags
    THEN
	atable [.flgt [ind_flag, flag_character]] = a_flag;

    !Return here is with a word.

    IF	.do_toc  THEN
	BEGIN

	IF  .sca_wrd_cpend NEQ rintes  THEN
	    endwrd (false, false, false);		!End word, but don't write a space too.

	tsf_major = maj_send;	! Identify this record as something from the
				!     .SEND TOC command
	tsf_minor = .num_value;	! Copy the value of "n" from the .SEND command
				!     into the minor type code

	!If at the top of any page, look again to see which page number to output.
	!This code added (from HL.BLI) in V1.126c, ident 004.
	IF     .gca_btc  AND .phan_top_page  THEN
	    IF .phan_top_first  THEN

%IF FLIP %THEN
		puttpg (pagen, flip$k_tocpag)
	    ELSE
		puttpg (npagen, flip$k_tocpag);
%ELSE
		puttpg (pagen, -1)
	    ELSE
		puttpg (npagen, -1);
%FI
	outlin (false);			! Don't disturb justification algorithm
	END;

    INCR i FROM 0 TO sca_size - 1 DO
	sca [.i] = .sca_copy [.i];	! Restore SCA

    pop_sca;				! Restore the SAVEd SCA bits.

    mra = .mra_address;			! Restore previous stati.
    tsf = .tsf_address;
    sca_para_pnd = .sca_para_copy;
    sca_indent = .sca_indent_copy;
    END;					!End of STC

END						!End of module
ELUDOM
