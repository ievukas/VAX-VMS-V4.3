%TITLE 'PUS -- Process Uneaten String'
MODULE pus (	IDENT = 'V04-000'
		%BLISS32 [, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					     NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	
!
!	Decide if record is a command, or contains text,
!	and dispatch accordingly.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	 CREATION DATE: April, 1978
!


%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	008	KFA00008	Ken Alden	19-Sep-1983
!		Added support for end-of-line escape sequences.
!
!	007	KFA00007	Ken Alden	10-March-1983
!		Fixed bug with sca_ker.  Conditionals needed cleaning up.
!
!	006	RER00006	Ron Randall	07-March-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!		Changed handler_code to kwitem_handler_code.
!--


%SBTTL 'Module Level Declarations'

!
! TABLE OF CONTENTS:
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! EQUATED SYMBOLS:
!
LITERAL
    FINISH_COMMAND = ARECCC_COUNT + 1,
    PROCESS_TEXT   = ARECCC_COUNT + 2;

!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

EXTERNAL
    GCA : GCA_DEFINITION,
    IRA : FIXED_STRING,
    KHAR,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION;

EXTERNAL LITERAL
    rnfdns,	! W - .NO SPACE illegal in this context
    rnfilc;	! W - Illegal command: "%S"

EXTERNAL ROUTINE
    AREC,	DOCM,	ENDCMT,	ENDWRD,	ERMA,
    ERML,	GCSKIP,	GUSKIP,	LIT,	OUTCRG,
    OUTJ,	OUTNJ,	PARAG,	RCS,	SCANT;


%sbttl 'PUS -- process uneaten string'
GLOBAL ROUTINE PUS (end_word) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!   Decide if record is a command, or contains text, and dispatch accordingly.
!
! FORMAL PARAMETERS:
!
!	END_WORD    TRUE if PUS is to terminate words when found.  i.e. if this
!		    parameter is true, ENDWRD will be called.
!		    FALSE to prevent PUS from calling ENDWRD where it normally
!		    would have.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		Many and varied! Be sure you understand the
!			implications before making any changes to this routine.
!
!--

    BEGIN

    LOCAL
	action,
	new_record,				!PUS needs to know if new record or continuing on.
	save_count,
	save_khar,
	save_next;

    save_count = .fs_length (ira);	! Needed if this turns out to be a
    save_khar = .khar;			!  literal line.
    save_next = .fs_next (ira);

    action = arec ();		! Find out what to do with this uneaten string.

    new_record = true;		! This is a brand new record.

    WHILE 1 DO 			! This loop allows the analysis results
	BEGIN			!     to be altered.

	IF  .action NEQ finish_command
	THEN
	    BEGIN
	    !If in the FALSE branch of an .IF command, ignore everything
	    !that cannot possibly be a "normal" RUNOFF command.

	    IF  .gca_skipping
	    THEN

		IF  .action NEQ cf_letter
		THEN
		    RETURN;

	    IF  .gca_literal
		AND NOT ((.action EQL end_of_string)
		AND NOT .new_record )
	    THEN
		BEGIN			! Special processing for literals
		LOCAL
		    rcs_result;

		LABEL
		    literal_block;

literal_block :
		BEGIN
		!The following test is satisfied when a counted literal has run
		! run out, or it's not a counted literal.  In the case where a
		! counted literal is supposed to run out, but the line does not
		! contain a .END LITERAL command, the appropriate error action
		! is taken by LIT.

		IF  .gca_lit_count EQL 0
		THEN
		    BEGIN

		    IF  .action EQL cf_letter
		    THEN
			BEGIN
			rcs_result = rcs ();

			IF  .rcs_result NEQ 0
			THEN
			    BEGIN
			    MAP
				rcs_result : REF VECTOR;

			    IF  .kwitem_handler_code (rcs_result) EQL h_end_literal
			    THEN
				BEGIN		!Terminate the literal.
				docm (h_end_literal, 0);
				action = finish_command;
				LEAVE literal_block;
				END;

			    END;

			END;

		    END;

		!Just another literal line
		fs_length (ira) = .save_count;	! Restore possibly modified
		fs_next (ira) = .save_next;	!  count, pointer,
		khar = .save_khar;		!  and stacked character.

		lit (0);			! Let LIT count this line.

		IF  .action NEQ end_of_string
		THEN
		    action = process_text;

		END;		! ***** end of LITERAL_BLOCK *****

		END;
	    END;

	CASE .action FROM 1 TO process_text OF
	    SET

	    [end_of_string] :
		BEGIN

		IF  .sca_fill AND .gca_autopara AND .new_record
		THEN
		    parag (-1)
		ELSE
		    BEGIN
		    IF  .sca_fill
		    THEN			! Fill mode
			BEGIN
			IF  ((NOT .sca_fc) AND .end_word)
			THEN
			    endwrd (.sca_fill, .sca_justify, false);
			END

		    ELSE			! Nofill mode
			IF  .sca_ker		! If "Keeping Empty Records",
			THEN 			!  force a blank line
			    BEGIN

			    IF  .tsf_int_hl GTR 0 !Force out the current line
			    THEN
				outnj ();	!   first if it is not empty.

			    guskip (1);		! Generate 'blank-line' code.
			    outcrg ();		! Force out blank line NOW.
			    END;
		    END;
		RETURN;
		END;

	    [CF_CF] :			! Two <CONTROL flag>s
		action = not_space;

	    [CF_COMMENT] :
		BEGIN			! A comment starting '.!' or '.;'.
		kcns ();		! Position into comment
		endcmt ();
		action = finish_command;
		END;

	    [CF_BREAK, CF_LETTER] :
		BEGIN			! Command recognition and processing
		LOCAL
		    rcs_result;

		rcs_result = rcs ();	! Try to recognize command.

		IF  .rcs_result EQL 0
		THEN			! If the command was not recognized,
		    action = cf_other	!  change the action indicator
		ELSE
		    BEGIN
		    MAP
			rcs_result : REF VECTOR;

		    ! Process command
		    docm (.kwitem_handler_code (rcs_result), .kwitem_actions (rcs_result));

		    action = finish_command;	! Finish processing command.
		    END;

		END;

	    [CF_OTHER] :
		BEGIN
		!Something that can't be recognized.
		erma (rnfilc, true);	  ! Skip to end of "command" and issue an error message.
		action = finish_command;  ! Standard end-of-command processing.
		END;

	    [END_FOOTNOTE] :
		BEGIN
		!<ENDFOOTNOTE flag>
		kcns ();			!Skip the <ENDFOOTNOTE flag>
		docm (h_end_footnote, 0);	!Terminate a footnote.
		action = finish_command;	!Finish processing coommand.
		END;

	    [FIRST_SPACE] :
		BEGIN

		IF  .sca_fill AND .gca_autopara
		THEN
		    parag (-1);			!Found an auto'd paragraph.

		action = process_text;		!Do normal text processing.
		END;

	    [FIRST_SEMI] :			!A ';' following a command.
		action = process_text;		!Do normal text processing.

	    [NOT_SPACE] :
		BEGIN

		IF  .sca_fill AND .gca_autotabl
		THEN
		    parag (-1);			!Found an auto'd paragraph.

		action = process_text;		!Do normal text processing.
		END;

	    [PROCESS_TEXT] :
		BEGIN

		IF  NOT (.gca_concat AND .sca_cont)
		THEN
		!Normal case, when end of line means end
		!of word.  The check on SCA_WRD_CPEND avoids
		!extra spaces if the input line ended with
		!a space or tab.

		    ! If there was a word pending, end it.
    		    ! In DSRPLUS the pass-through facility will
    		    ! push through a sequence and not count it against
    		    ! the margins.  However when this type of sequence is
    		    ! dropped at the end of a line, then sca_wrd_cpend will
    		    ! equal rintes.  ENDWRD still needs to be called however.
    		    ! For this reason, if a pass-through was part of the last
    		    ! word, then we'll call endwrd if sca_wrd_cpend eql rintes.

		    IF  .end_word AND
    			((.sca_wrd_cpend NEQ rintes) 
%IF DSRPLUS %THEN
    					OR
    			((.sca_wrd_cpend EQL rintes) AND (.sca_wrd_pass)))
%ELSE)
%FI 
		    THEN
			endwrd (.sca_fill, .sca_justify, false);

		IF  .gca_concat AND (NOT .sca_cont)
		THEN			!NO SPACE canceled by some other command
		    erml (RNFDNS);  	!Issue error message.

		gca_concat = false; !Concatination no longer pending.
		scant ();	    !Go scan text.

		!In .NO FILL mode, the end of an input line
		!corresponds to the end of an output line.

		IF  NOT .sca_fill
		THEN

		    IF  .sca_justify
		    THEN		! No fill,justify
			outj ()
		    ELSE		! No fill, no justify
			outnj ();

		RETURN;
		END;

	    [FINISH_COMMAND] :
		BEGIN
		new_record = false;	! Continue same record.
		action = arec ();	! Find out what to do.

		IF  .action EQL end_of_string
		THEN
		    RETURN;

		IF  .action EQL first_semi
		THEN
		    BEGIN
		    kcns ();		! Skip the ';',
		    action = arec ();	! find out what to do with remainder,
		    new_record = true;	! & handle it like a brand new record.
		    END;

	! If the command just processed was a .LITERAL command, don't let the
	! old pointers, etc. get set back at the top of the loop.

		IF  .gca_literal
		THEN
		    BEGIN
		    save_count = .fs_length (ira);
		    save_khar = .khar;
		    save_next = .fs_next (ira);
		    END;

		END;

	    TES;

	END;

    END;					!End of PUS

END						!End of module
ELUDOM
