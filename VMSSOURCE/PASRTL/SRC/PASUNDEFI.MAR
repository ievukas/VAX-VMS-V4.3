	.TITLE	PAS$UNDEFINED - Return true if argument is reserved operand
	.IDENT	/1-001/			; File: PASUNDEFI.MAR Edit: SBL1001

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Pascal Language Support
;
; ABSTRACT:
;
;	This module contains four routines, one for each floating data
;	type, which return true if their argument is a reserved operand.
;
; ENVIRONMENT: Runs at any access mode, AST Reentrant
;
; AUTHOR: Steven B. Lionel, CREATION DATE: 6-Nov-1980
;
; MODIFIED BY:
;
; 1-001	- Original. SBL 6-Nov-1980
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
;	NONE
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL		; Force all external symbols to be declared
;	NONE
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _PAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	PAS$UNDEFINED_F - Return true if F_floating argument is reserved
;++
; FUNCTIONAL DESCRIPTION:
;
;	This procedure returns BOOLEAN TRUE (1) if its argument is a reserved
;	floating operand, otherwise BOOLEAN FALSE (0).
;
; CALLING SEQUENCE:
;
;	Result.wv.v = PAS$UNDEFINED_F (Single.rf.r)
;
; FORMAL PARAMETERS:
;
;	Single	- F_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	1 if the argument is a reserved operand
;	0 otherwise
;
; SIDE EFFECTS:
;
;
;--

	.ENTRY	PAS$UNDEFINED_F, ^M<>	; Entry point

	CLRL	R0			; Initially FALSE
	TSTL	@4(AP)			; Test for longword access
	CMPZV	#7, #9, @4(AP), #^X100	; Is it reserved?
	BNEQ	10$			; No
	INCL	R0			; Yes
10$:	RET				; End of routine PAS$UNDEFINED_F

	.SBTTL	PAS$UNDEFINED_D - Return true if D_floating argument is reserved
;++
; FUNCTIONAL DESCRIPTION:
;
;	This procedure returns BOOLEAN TRUE (1) if its argument is a reserved
;	floating operand, otherwise BOOLEAN FALSE (0).
;
; CALLING SEQUENCE:
;
;	Result.wv.v = PAS$UNDEFINED_D (Double.rd.r)
;
; FORMAL PARAMETERS:
;
;	Double	- D_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	1 if the argument is a reserved operand
;	0 otherwise
;
; SIDE EFFECTS:
;
;
;--

	.ENTRY	PAS$UNDEFINED_D, ^M<>	; Entry point

	MOVQ	@4(AP), R0		; Test for quadword access
	CLRL	R0			; Initially FALSE
	CMPZV	#7, #9, @4(AP), #^X100	; Is it reserved?
	BNEQ	10$			; No
	INCL	R0			; Yes
10$:	RET				; End of routine PAS$UNDEFINED_D

	.SBTTL	PAS$UNDEFINED_G - Return true if G_floating argument is reserved
;++
; FUNCTIONAL DESCRIPTION:
;
;	This procedure returns BOOLEAN TRUE (1) if its argument is a reserved
;	floating operand, otherwise BOOLEAN FALSE (0).
;
; CALLING SEQUENCE:
;
;	Result.wv.v = PAS$UNDEFINED_G (Double.rg.r)
;
; FORMAL PARAMETERS:
;
;	Double	- G_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	1 if the argument is a reserved operand
;	0 otherwise
;
; SIDE EFFECTS:
;
;
;--

	.ENTRY	PAS$UNDEFINED_G, ^M<>	; Entry point

	MOVQ	@4(AP), R0		; Test for quadword access
	CLRL	R0			; Initially FALSE
	CMPZV	#4, #12, @4(AP), #^X800	; Is it reserved?
	BNEQ	10$			; No
	INCL	R0			; Yes
10$:	RET				; End of routine PAS$UNDEFINED_G

	.SBTTL	PAS$UNDEFINED_H - Return true if H_floating argument is reserved
;++
; FUNCTIONAL DESCRIPTION:
;
;	This procedure returns BOOLEAN TRUE (1) if its argument is a reserved
;	floating operand, otherwise BOOLEAN FALSE (0).
;
; CALLING SEQUENCE:
;
;	Result.wv.v = PAS$UNDEFINED_H (Quad.rh.r)
;
; FORMAL PARAMETERS:
;
;	Quad	- H_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	1 if the argument is a reserved operand
;	0 otherwise
;
; SIDE EFFECTS:
;
;
;--

	.ENTRY	PAS$UNDEFINED_H, ^M<>	; Entry point

	MOVL	4(AP), R1		; Get address of argument
	TSTL	12(R1)			; Test last longword for access
	CLRL	R0			; Initially FALSE
	CMPW	(R1), #^X8000		; Is it reserved?
	BNEQ	10$			; No
	INCL	R0			; Yes
10$:	RET				; End of routine PAS$UNDEFINED_H

	.END				; End of module PAS$UNDEFINED
