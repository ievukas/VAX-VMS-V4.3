MODULE PAS$WRITE_OCT ( %TITLE 'Write a value in base 8'
		IDENT = '1-002'			! File: PASWRIOCT.B32 Edit: SBL1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains procedures which write a value in
!	base 8 to a textfile or string.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
! 1-002 - Make total-width a longword.  SBL 30-June-1982
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$WRITE_OCT: NOVALUE,			! Write to textfile
    PAS$WRITEV_OCT: NOVALUE;			! Write to string

! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!

!! If this is for a V2 system, redefine OTS$CVT_L_TO as PAS$CVT_L_TO.
%IF %VARIANT
%THEN
UNDECLARE
    OTS$CVT_L_TO;
EXTERNAL ROUTINE
    PAS$CVT_L_TO;
BIND ROUTINE
    OTS$CVT_L_TO = PAS$CVT_L_TO;
%FI

%SBTTL 'PAS$WRITE_OCT - Write a value in octal'
GLOBAL ROUTINE PAS$WRITE_OCT (
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
    	NBITS,						! Size of value in bits
    	VALUE,						! Address of value
	TOTAL_WIDTH: SIGNED,				! Total field width
	ERROR,						! Error unwind address
    	MIN_DIGITS: SIGNED				! Minimum number of digits
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure writes a base 8 representation of a value to the
!	specified textfile.
!
! CALLING SEQUENCE:
!
!	CALL PAS$WRITE_OCT (PFV.mr.r, NBITS.rl.v, VALUE.rz.r, TOTAL_WIDTH.rl.v
!			    [, [ERROR.j.r] [, MIN_DIGITS.rl.v]])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	NBITS		- The size of VALUE in bits.
!
!	VALUE		- The address of the value to write.
!
!	TOTAL_WIDTH	- Total field width.
!
!	ERROR		- Optional.  Address to unwind to if an error occurs.
!
!	MIN_DIGITS	- Optional.  The minimum number of digits to appear
!			  in the result.  Defaults to the minimnum number of
!			  digits needed to represent every bit of the value.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	If the file is the standard file INPUT or OUTPUT, it is implicitly opened.
!
! SIGNALLED ERRORS:
!
!	NEGWIDDIG - negative field width or digits specification not allowed
!	LINTOOLON - line too long
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,		! File control block
        ACTUAL_DIGITS,					! Number of digits actually used
	ACTUAL_NBITS,					! Value size actually used
	DESCR: BLOCK [8, BYTE],				! String descriptor
	PFV_ADDR: VOLATILE,				! Enable argument
	UNWIND_ACT: VOLATILE,				! Enable argument
	ERROR_ADDR: VOLATILE;				! Enable argument

    LITERAL
	M_SIZE_IN_BITS = %X'04';			! Flags argument for
							! convert routine
    BUILTIN
	ACTUALCOUNT;

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    !+
    ! Get ERROR parameter, if present.
    !-

    IF ACTUALCOUNT () GEQU 5
    THEN
	ERROR_ADDR = .ERROR;		! Set unwind address

    PFV_ADDR = PFV [PFV$R_PFV];		! Set PFV address

    !+
    ! Validate PFV and get PFV.
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Do common initialization.
    !-

    PAS$$INIT_WRITE (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! Set initial values for conversion.
    !-

    ACTUAL_NBITS = .NBITS;
    ACTUAL_DIGITS = (.ACTUAL_NBITS+2)/3;
    
    !+
    ! Create result string descriptor with actual width.
    !-

    DESCR [DSC$B_CLASS] = DSC$K_CLASS_S;
    DESCR [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    DESCR [DSC$A_POINTER] = .FCB [FCB$A_RECORD_CUR];
    IF ACTUALCOUNT () GEQU 6
    THEN
	BEGIN
	ACTUAL_DIGITS = .MIN_DIGITS;
	IF .ACTUAL_DIGITS LSS 0
	THEN
	    $PAS$IO_ERROR (PAS$_NEGWIDDIG,0);
	END;
    IF .TOTAL_WIDTH LSS 0
    THEN
	$PAS$IO_ERROR (PAS$_NEGWIDDIG,0);
    DESCR [DSC$W_LENGTH] = .TOTAL_WIDTH;
    !+
    ! Will TOTAL_WIDTH truncate the value?
    !+
    IF .TOTAL_WIDTH LSSU (.ACTUAL_NBITS+2)/3
    THEN
	BEGIN
	!+
	! Change value size and bit offset to cause a truncated result.
	!-
	ACTUAL_NBITS = .TOTAL_WIDTH*3;
	END;
    
    IF .ACTUAL_DIGITS GTR .TOTAL_WIDTH
    THEN
	ACTUAL_DIGITS = .TOTAL_WIDTH;

    !+
    ! See if field will fit in record.
    !-

    BEGIN
    LOCAL
	EXTRA;			! Extra characters past end of line
    EXTRA = (.FCB [FCB$A_RECORD_CUR] + .DESCR [DSC$W_LENGTH]) - .FCB [FCB$A_RECORD_END];
    IF .EXTRA GTR 0
    THEN
	$PAS$IO_ERROR (PAS$_LINTOOLON,1,.EXTRA);
    END;

    !+
    ! Do the conversion.  It can't fail.
    !-

    OTS$CVT_L_TO (.VALUE, DESCR, .ACTUAL_DIGITS, .ACTUAL_NBITS,
    		  M_SIZE_IN_BITS);

    FCB [FCB$A_RECORD_CUR] = .FCB [FCB$A_RECORD_CUR] + .DESCR [DSC$W_LENGTH];

    !+
    ! Call WRITE epilogue routine to move the last character written to the
    ! user's buffer and to unlock the file variable.
    !-

    PAS$$END_WRITE (PFV [PFV$R_PFV], FCB [FCB$R_FCB]);

    RETURN;

    END;					! End of routine PAS$WRITE_OCT

!<BLF/PAGE>

%SBTTL 'PAS$WRITEV_OCT - Write value in base 8 to string'
GLOBAL ROUTINE PAS$WRITEV_OCT (
	MAX_LENGTH: WORD,				! Maximum length of string
	STRING_LINE: REF VECTOR [, WORD],		! String to write to
	NBITS,						! Number of bits in VALUE
	VALUE: REF VECTOR [, BYTE],			! Value to write
	TOTAL_WIDTH: SIGNED,				! Total field width
	ERROR,						! Error unwind address
	MIN_DIGITS: SIGNED				! Minimum number of digits
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure writes a value in base 8 to the specified string.
!
! CALLING SEQUENCE:
!
!	CALL PAS$WRITEV_OCT (MAX_LENGTH.rw.v, STRING_LINE.wvt.r,
!	   NBITS.rl.v, VALUE.rz.v, TOTAL_WIDTH.rl.v 
!	   [, [ERROR.j.r] [,MIN_DIGITS.rl.v]])
!
! FORMAL PARAMETERS:
!
!	MAX_LENGTH	- The maximum length of STRING_LINE.
!
!	STRING_LINE	- A varying string to which the output will be appended.
!
!	NBITS		- Size of VALUE in bits.
!
!	VALUE		- The value to write.
!
!	TOTAL_WIDTH	- The width of the field to write.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  in case of an error.
!
!	MIN_DIGITS	- Minimum number of digits to write.  Defaults to
!			  the minimum necessary to represent every bit of
!			  the value.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	See PAS$WRITE_OCT
!
!--

    BEGIN

    LOCAL
	PFV: $PAS$PFV_FILE_VARIABLE,	! Pascal File Variable
	ARG_LIST: VECTOR [7, LONG],	! Argument list
	PFV_ADDR: VOLATILE,		! Enable argument
	UNWIND_ACT: VOLATILE,		! Enable argument
	ERROR_ADDR: VOLATILE;		! Enable argument

    BUILTIN
	ACTUALCOUNT;			! Count of arguments

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    !+
    ! Get ERROR parameter, if present.
    !-

    IF ACTUALCOUNT () GEQU 6
    THEN
	ERROR_ADDR = .ERROR;		! Set unwind address

    PFV_ADDR = PFV [PFV$R_PFV];		! Set PFV address

    !+
    ! Set up ARG_LIST.
    !-

    ARG_LIST [0] = 4;			! Four arguments
    ARG_LIST [1] = PFV [PFV$R_PFV];	! PFV address
    ARG_LIST [2] = .NBITS;		! Number of bits
    ARG_LIST [3] = VALUE [0];		! Value to write
    ARG_LIST [4] = .TOTAL_WIDTH;	! Field width
    IF ACTUALCOUNT () GEQU 7
    THEN
	BEGIN
	ARG_LIST [0] = 6;		! Add two more arguments
	ARG_LIST [5] = 0;		! Error address
	ARG_LIST [6] = .MIN_DIGITS;	! Minimum digits
	END;

    !+
    ! Call PAS$$DO_WRITEV to do the work, giving it the address of
    ! PAS$WRITE_OCT to call.
    !-

    PAS$$DO_WRITEV (PFV [PFV$R_PFV], .MAX_LENGTH, STRING_LINE [0], ARG_LIST, 
	PAS$WRITE_OCT);

    RETURN;

    END;					! End of routine PAS$WRITEV_OCT

!<BLF/PAGE>

END						! End of module PAS$WRITE_OCT

ELUDOM
