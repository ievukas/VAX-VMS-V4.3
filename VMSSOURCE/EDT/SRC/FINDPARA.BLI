%TITLE 'EDT$FINDPARA - isolate wps paragraph entity'
MODULE EDT$FINDPARA (				! isolate wps paragraph entity
		IDENT = 'V04-000'			! File: FINDPARA.BLI Edit: AMZ1006
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module isolate the WPS paragraph entity
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Shelly T. Solomon  CREATION DATE: October 26, 1981
!
! MODIFIED BY:
!
! 1-001	- Original.  STS 26-Oct-1981.
! 1-002 - Take out reference to EDT$$G_LN_NO.  SMB 14-Sep-1982
! 1-003 - Take out reference to EDT$$TST_EOB. STS 22-Sep-1982
! 1-004 - Move over the delimiter when found. STS 21-Dec-1982
! 1-005	- Improve the appearance of the listing.  JBS 14-Jun-1983
! 1-006 - Make backward searches work if on the 2nd to 4th characters of the
!	   paragraph.  AMZ 5-Oct-1983 
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$FND_WPARA;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$FND_WPARA  - isolate wps paragraph entity'

GLOBAL ROUTINE EDT$$FND_WPARA (			! Isolate wps paragraph entity
    DIR						! Direction of movement
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
! This routine is used to isolate the WPS paragraph entity.  It is found by looking
! for a string of consecutive carriage returns > 2.
!
! FORMAL PARAMETERS:
!
!    DIR		Direction of movement
!
! IMPLICIT INPUTS:
!
!	EDT$$A_US_ENT
!	EDT$$A_WK_LN
!	EDT$$Z_EOB_LN
!	EDT$$T_LN_BUF
!	EDT$$A_LN_PTR
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	1 = success, 0 = couldn't find
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$CS_BOTBUF,				! Move to bottom of buffer
	EDT$$CS_LEFT,				! Move left a character
	EDT$$CS_RIGHT,				! Move right a character
	EDT$$STR_SEACMD,			! Search for a specific string
	EDT$$CS_TOP;				! Move to top of buffer

    EXTERNAL
	EDT$$A_US_ENT : VECTOR,			! Pointers to user defined entities
	EDT$$A_WK_LN : REF LIN_BLOCK,
	EDT$$Z_EOB_LN,
	EDT$$T_LN_BUF,				! Current line buffer
	EDT$$A_LN_PTR;				! Current character pointer

!+
! This routine is used to isolate the paragraph entity.  It is found by looking
! for a string of consecutive empty lines > 2.
!-

    LOCAL
	L_DIF,
	C;

!+
! Remember where we are now.
!-
    C = 0;

    IF (.DIR EQL DIR_FORWARD)
    THEN
	BEGIN
!+
! If we are at [EOB] we have not found it.
!-

	IF (.EDT$$A_WK_LN EQLA EDT$$Z_EOB_LN) THEN RETURN (0);

!+
! Skip all delimiters.
!-

	WHILE ((CH$RCHAR (.EDT$$A_LN_PTR) EQL ASC_K_CR) AND 	!
	    CH$PTR_EQL (.EDT$$A_LN_PTR, CH$PTR (EDT$$T_LN_BUF))) DO
	    BEGIN
	    C = .C + 1;

	    IF ( NOT EDT$$CS_RIGHT ()) THEN EXITLOOP;

	    END;

	IF (.C GEQ 1) THEN RETURN (1);

	C = EDT$$STR_SEACMD (			!
	    CH$PTR (.EDT$$A_US_ENT [2], 1), 	!
	    CH$RCHAR (CH$PTR (.EDT$$A_US_ENT [2])), 	!
	    0, 					!
	    DIR_FORWARD				!
	);

	IF .C
	THEN
!+
! We found the delimiter, now skip all of the delimiters
!-
	    BEGIN

	    INCR I FROM 1 TO CH$RCHAR (CH$PTR (.EDT$$A_US_ENT [2])) DO
		EDT$$CS_RIGHT ();

	    WHILE ((CH$RCHAR (.EDT$$A_LN_PTR) EQL ASC_K_CR) AND 	!
		CH$PTR_EQL (.EDT$$A_LN_PTR, CH$PTR (EDT$$T_LN_BUF))) DO

		IF ( NOT EDT$$CS_RIGHT ()) THEN EXITLOOP;

	    RETURN (1);
	    END
	ELSE
	    BEGIN
	    C = EDT$$CS_RIGHT ();
	    EDT$$CS_BOTBUF ();
	    RETURN (.C);
	    END;

	END
    ELSE
	BEGIN
!+
!  Move back one character to handle being on the first character of a pargraph.
!-

	EDT$$CS_LEFT ();

	WHILE ((CH$RCHAR (.EDT$$A_LN_PTR) EQL ASC_K_CR) AND 	!
	    CH$PTR_EQL (.EDT$$A_LN_PTR, CH$PTR (EDT$$T_LN_BUF))) DO

	    IF ( NOT EDT$$CS_LEFT ()) THEN EXITLOOP;

	C = EDT$$STR_SEACMD (			!
	    CH$PTR (.EDT$$A_US_ENT [2], 1), 	!
	    CH$RCHAR (CH$PTR (.EDT$$A_US_ENT [2])), 	!
	    1, 					!
	    DIR_BACKWARD			!
	);

	IF .C
	THEN
!+
! We found the delimiter, now move past it.
!-
	    BEGIN

	    INCR I FROM 1 TO CH$RCHAR (CH$PTR (.EDT$$A_US_ENT [2])) DO
		EDT$$CS_RIGHT ();

	    RETURN (1);
	    END
	ELSE
	    BEGIN
	    C = EDT$$CS_LEFT ();
	    EDT$$CS_TOP ();
	    RETURN (.C);
	    END;

	END;

    END;					! of routine EDT$$FND_WPARA

!<BLF/PAGE>

END						! of module EDT$FINDPARA

ELUDOM
