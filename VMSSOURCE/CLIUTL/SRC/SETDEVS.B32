MODULE setdevs ( IDENT = 'V04-000',
		ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL=LONG_RELATIVE)
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  SET Command
!
! ABSTRACT:
!
!	This module implements the DCL commands SET CARD_READER, SET
!	MAGTAPE, and SET PRINTER.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, user mode
!
! AUTHOR:  Gerry Smith				23-Feb-1983
!
! Modified by:
!
!	V03-004	DAS0001		David Solomon		09-Jul-1984
!		Fix truncation errors; make nonexternal refs LONG_RELATIVE.
!
!	V03-003	EAD0146		Elliott A. Drayton	12-Apr-1984
!		Add code for new printer characteristics TAB, TRUNCATE,
!		SIXELS, and BITMAPPED.
!
!	V03-002 EMD0046		Ellen M. Dusseault	 2-Feb-1984
!		Add new line printer characteristic, fallback to 
!		routine, SET$PRINTER.
!
!	V03-001	GAS0112					29-Mar-1983
!		Remove all references to old CLI interface, and old
!		command dispatcher.
!
!--

!
! Include files
!
LIBRARY 'SYS$LIBRARY:STARLET';		! VAX/VMS common definitions


!
! Define bit settings for the flags longword
!
MACRO
    set$v_log		=	0, 0, 1, 0%,		! /LOG
!
! For SET CARD_READER
!
    set$v_029		=	0, 1, 1, 0%,		! /029
    set$v_026		=	0, 2, 1, 0%,		! /026
!
! For SET MAGTAPE
!
    set$v_dens		=	0, 1, 1, 0%,		! /DENSITY
    set$v_1600		=	0, 2, 1, 0%,		!	=1600
    set$v_800		=	0, 3, 1, 0%,		!	=800
    set$v_6250		=	0, 4, 1, 0%,		!	=6250
    set$v_logsoft	=	0, 5, 1, 0%,		! /LOGSOFT
    set$v_nologsoft	=	0, 6, 1, 0%,		! /NOLOGSOFT
    set$v_files		=	0, 7, 1, 0%,		! /SKIP=FILES
    set$v_record	=	1, 0, 1, 0%,		! /SKIP=RECORDS
!
! For SET PRINTER
!
    set$v_ff		=	0, 1, 1, 0%,		! /FF
    set$v_noff		=	0, 2, 1, 0%,		! /NOFF
    set$v_cr		=	0, 3, 1, 0%,		! /CR
    set$v_nocr		=	0, 4, 1, 0%,		! /NOCR
    set$v_pass		=	0, 5, 1, 0%,		! /PASSALL
    set$v_nopass	=	0, 6, 1, 0%,		! /NOPASSALL
    set$v_print		=	0, 7, 1, 0%,		! /PRINTALL
    set$v_noprint	=	1, 0, 1, 0%,		! /NOPRINTALL
    set$v_wrap		=	1, 1, 1, 0%,		! /WRAP
    set$v_nowrap	=	1, 2, 1, 0%,		! /NOWRAP
    set$v_lower		=	1, 3, 1, 0%,		! /LOWERCASE (NOUPPER)
    set$v_upper		=	1, 4, 1, 0%,		! /UPPERCASE (NOLOWER)
    set$v_lp11		=	1, 5, 1, 0%,		! /LP11
    set$v_la180		=	1, 6, 1, 0%,		! /LA180
    set$v_la11		=	1, 7, 1, 0%,		! /LA11
    set$v_unk		=	2, 0, 1, 0%,		! /UNKNOWN
    set$v_page		=	2, 1, 1, 0%,		! /PAGE=n
    set$v_width		=	2, 2, 1, 0%,		! /WIDTH=n
    set$v_fallback      =       2, 3, 1, 0%,		! /FALLBACK 
    set$v_nofallback    =       2, 4, 1, 0%,		! /NOFALLBACK
    set$v_truncate	=	2, 5, 1, 0%,		! /TRUNCATE
    set$v_notruncate	=	2, 6, 1, 0%,		! /NOTRUNCATE
    set$v_tab		=	2, 7, 1, 0%,		! /TAB
    set$v_notab		=	3, 0, 1, 0%,		! /NOTAB
    set$v_sixels	=	3, 1, 1, 0%,		! /SIXELS
    set$v_nosixels	=	3, 2, 1, 0%,		! /NOSIXELS
    set$v_bitmapped	=	3, 3, 1, 0%,		! /BITMAPPED
    set$v_nobitmapped	=	3, 4, 1, 0%;		! /NOBITMAPPED

!
! Table of contents
!

FORWARD ROUTINE
    set$card_reader : NOVALUE,
    set$magtape : NOVALUE,
    set$printer : NOVALUE;

!
! External routines
!
EXTERNAL ROUTINE
    lib$cvt_dtb,			! Convert ASCII to binary
    cli$get_value,			! Get value from CLI
    cli$present;			! See if qualifier is present


!
! Declare some shared messages
!
$SHR_MSGDEF	(SET,119,LOCAL,
    		(valerr,	error),
    		(invquaval,	error));

!
! Declare literals defined elsewhere
!
EXTERNAL LITERAL
    set$_writeerr,			! Error modifying device
    set$_devset1,			! characteristic set
    set$_devset2,
    set$_eofset,			! EOF written on tape
    cli$_ivdevtype,			! Wrong device type
    cli$_devnotfor,			! Device not mounted foreign
    cli$_absent, 			! Qualifier absent
    cli$_negated,			! Qualifier explicitly negated
    cli$_abkeyw;			! Ambiguous keyword


GLOBAL ROUTINE set$card_reader : NOVALUE =
BEGIN
!++
! Functional description
!
!	This is the routine for the SET CARD_READER command.  It is called
!	from the SET command processor,	and sets the characteristics of
!	a card reader.
!
! Inputs
!	None
!
! Outputs
!	None
!
!----

LOCAL
    status,				! Status return
    desc : $BBLOCK[dsc$c_s_bln],	! General purpose descriptor
    flags : $BBLOCK[4] INITIAL (0),	! Flags longword
    info_desc : VECTOR[2],		! $GETCHN descriptor
    info_block : $BBLOCK[12], 		! $GETCHN information block
    channel : WORD,			! I/O channel
    iosb : VECTOR[4,WORD];		! I/O status block

!
! Collect the name of the card reader.
!
$init_dyndesc(desc);			! Make the descriptor dynamic
cli$get_value(%ASCID 'DEVICE',
		     desc);

!
! Determine what characteristics to set, and whether or not to log them.
!
flags[set$v_log] = cli$present(%ASCID 'LOG');
flags[set$v_029] = cli$present(%ASCID '029');
flags[set$v_026] = cli$present(%ASCID '026');
IF NOT .flags[set$v_029]
AND NOT .flags[set$v_026]
THEN RETURN;

!
! Assign a channel to the device. 
!
IF NOT (status = $ASSIGN(DEVNAM = desc,
			 CHAN   = channel))
THEN
    BEGIN
    SIGNAL(set$_writeerr, 1, desc, .status);
    RETURN;
    END;

!
! Determine if it is indeed a card reader.
!
info_desc[0] = 12;				! Set up the descriptor 
info_desc[1] = info_block;			! for $GETCHN
IF NOT (status = $GETCHN(SCDBUF = info_desc,	! Issue the $GETCHN, asking for
    			 CHAN   = .channel))	! secondary characteristics (in
THEN						! case it's spooled)
    BEGIN					! If a problem, signal it.
    SIGNAL(set$_writeerr, 1, desc, .status);
    RETURN;
    END;

IF .info_block[dib$b_devclass] NEQU dc$_card	! If not a card reader,
THEN						! signal that it's not.
    BEGIN
    SIGNAL(set$_writeerr, 1, desc,
    	   cli$_ivdevtype);
    END;

!
! Set the specified characteristic.
!
IF .flags[set$v_026]
THEN $BBLOCK[info_block[dib$l_devchar], cr$v_tmode] = cr$k_t026
ELSE $BBLOCK[info_block[dib$l_devchar], cr$v_tmode] = cr$k_t029;

status = $QIOW(CHAN = .channel,
    	       FUNC = IO$_SETMODE,
    	       IOSB = iosb,
    	       P1   = info_block[dib$b_devclass],
    	       P2   = 8);

IF .status
THEN status = .iosb[0];
IF NOT .status
THEN 
    BEGIN
    SIGNAL(set$_writeerr, 1, desc, .status);
    END
ELSE IF .flags[set$v_log]
THEN SIGNAL(set$_devset1, 2, desc, (IF .flags[set$v_026]
		    		  THEN %ASCID '026'
		    		  ELSE %ASCID '029'));

RETURN;
END;

GLOBAL ROUTINE set$magtape : NOVALUE =
BEGIN
!++
! Functional description
!
!	This is the routine for the SET MAGTAPE command.  It is called
!	from the SET command processor,	and performs various actions on
!	a magtape.
!
! Inputs
!	None
!
! Outputs
!	None
!
!----

LOCAL
    status,				! Status return
    density,				! Magtape density
    function,				! QIO function code
    count,				! Number of files/records to skip
    desc : $BBLOCK[dsc$c_s_bln],	! General purpose descriptor
    value_desc : $BBLOCK[dsc$c_s_bln],	! Value descriptor
    flags : $BBLOCK[4] INITIAL (0),	! Flags longword
    info_desc : VECTOR[2],		! $GETCHN descriptor
    info_block : $BBLOCK[12], 		! $GETCHN information block
    channel : WORD,			! I/O channel
    iosb : VECTOR[4,WORD];		! I/O status block

BIND mt_char = info_block[dib$l_devdepend] : $BBLOCK[4];

!
! Collect the name of the magtape.
!
$init_dyndesc(desc);			! Make the descriptors dynamic
$init_dyndesc(value_desc);
cli$get_value(%ASCID 'DEVICE',
		     desc);

!
! Assign a channel to the device. 
!
IF NOT (status = $ASSIGN(DEVNAM = desc,
		    	 CHAN   = channel))
THEN
    BEGIN
    SIGNAL(set$_writeerr, 1, desc, .status);
    RETURN;
    END;
!
! Determine if it is indeed a magtape.
!
info_desc[0] = 12;				! Set up the descriptor 
info_desc[1] = info_block;			! for $GETCHN
IF NOT (status = $GETCHN(SCDBUF = info_desc,	! Issue the $GETCHN, asking for
    			 CHAN   = .channel))	! secondary characteristics (in
THEN						! case it's spooled)
    BEGIN					! If a problem, signal it.
    SIGNAL(set$_writeerr, 1, desc, .status);
    RETURN;
    END;

IF .info_block[dib$b_devclass] NEQU dc$_tape	! If not a tape,
THEN						! signal that it's not.
    BEGIN
    SIGNAL(set$_writeerr, 1, desc,
    	   cli$_ivdevtype);
    RETURN;
    END;
IF NOT .info_block[dev$v_mnt]			! If not mounted,
THEN						! signal an error
    BEGIN
    SIGNAL(set$_writeerr, 1, desc, ss$_devnotmount);
    RETURN;
    END;
IF NOT .info_block[dev$v_for]			! If not mounted foreign,
THEN						! signal an error
    BEGIN
    SIGNAL(set$_writeerr, 1, desc, cli$_devnotfor);
    RETURN;
    END;

!
! Determine whether to log the actions taken.
!
flags[set$v_log] = cli$present(%ASCID 'LOG');

!
! Density
!
IF (flags[set$v_dens] = cli$get_value(%ASCID 'DENSITY', value_desc))
THEN
    BEGIN
    IF NOT (status = lib$cvt_dtb(.value_desc[dsc$w_length],
    				 .value_desc[dsc$a_pointer],
    				 density))
    THEN
	BEGIN
	SIGNAL(set$_invquaval, 2, value_desc, %ASCID 'DENSITY');
	RETURN;
	END;
    IF .density EQL 1600
    THEN
	BEGIN
	flags[set$v_1600] = 1;
	mt_char[mt$v_density] = mt$k_pe_1600;
	END
    ELSE IF .density EQL 800
    THEN
	BEGIN
	flags[set$v_800] = 1;
	mt_char[mt$v_density] = mt$k_nrzi_800;
	END
    ELSE IF .density EQL 6250
    THEN
	BEGIN
	flags[set$v_6250] = 1;
	mt_char[mt$v_density] = mt$k_gcr_6250;
	END
    ELSE
	BEGIN
	SIGNAL(set$_invquaval, 2, desc, %ASCID 'DENSITY');
	RETURN;
	END;
    END;

!
! /[NO]LOGSOFT is only good for TU78's
!
IF (status = cli$present(%ASCID 'LOGSOFT')) NEQ cli$_absent
THEN
    BEGIN
    IF .status NEQ cli$_negated
    THEN
	BEGIN
	flags[set$v_logsoft] = 1;
	mt_char[mt$v_logsoft] = 1;
	END
    ELSE
	BEGIN
	flags[set$v_nologsoft] = 1;
	mt_char[mt$v_logsoft] = 0;
	END;
    END;

IF .flags[set$v_dens]
OR .flags[set$v_logsoft]
OR .flags[set$v_nologsoft]
THEN
    BEGIN
    status = $QIOW(CHAN = .channel,
		   FUNC = IO$_SETMODE,
		   IOSB = iosb,
		   P1   = info_block[dib$b_devclass],
		   P2   = 8);

    IF .status
    THEN status = .iosb[0];
    IF NOT .status
    THEN SIGNAL(set$_writeerr, 1, desc, .status)
    ELSE IF .flags[set$v_log]
    THEN
	BEGIN
	IF .flags[set$v_dens]
	THEN SIGNAL(set$_devset2, 3, desc, %ASCID 'DENSITY',
		    (IF .flags[set$v_1600]
		     THEN %ASCID '1600'
		     ELSE IF .flags[set$v_800]
		     THEN %ASCID '800'
		     ELSE %ASCID '6250'));
	END;
    END;

!
! The next set of modifications to perform are positional changes, rather 
! than changes to the characteristics.
!
IF cli$present(%ASCID 'END_OF_FILE')
THEN
    BEGIN
    INCR index FROM 1 TO 2 DO
	BEGIN
	status = $QIOW(CHAN = .channel,
		       FUNC = io$_writemark,
	               IOSB = iosb);
	IF .status
	THEN status = .iosb[0];
	IF NOT .status
	THEN EXITLOOP;
	END;
    IF NOT .status
    THEN SIGNAL(set$_writeerr, 1, desc, .status)
    ELSE IF .flags[set$v_log]
    THEN SIGNAL(set$_eofset, 1, desc);
    END;

IF cli$present(%ASCID 'SKIP.END_OF_TAPE')
THEN
    BEGIN
    DO
	BEGIN
	status = $QIOW(CHAN = .channel,
		       FUNC = io$_skipfile,
	               IOSB = iosb,
		       P1   = 32767);
	IF .status
	THEN status = .iosb[0];
	IF NOT .status
	THEN EXITLOOP;
	END
    UNTIL .$BBLOCK[iosb[2], mt$v_bot];
    IF NOT .status
    THEN SIGNAL(set$_writeerr, 1, desc, .status)
    ELSE IF .flags[set$v_log]
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'END_OF_TAPE');
    END;

function = 0;
IF cli$get_value(%ASCID 'SKIP.FILES', value_desc)
THEN
    BEGIN
    function = io$_skipfile;
    flags[set$v_files] = 1;
    IF NOT (status = lib$cvt_dtb(.value_desc[dsc$w_length],
		    		 .value_desc[dsc$a_pointer],
		    		 count))
    THEN
	BEGIN
	SIGNAL(set$_invquaval, 2, value_desc, %ASCID 'SKIP');
	RETURN;
	END;
    END
ELSE IF cli$get_value(%ASCID 'SKIP.BLOCKS', value_desc)
THEN
    BEGIN
    function = io$_skiprecord;
    flags[set$v_record] = 1;
    IF NOT (status = lib$cvt_dtb(.value_desc[dsc$w_length],
    				 .value_desc[dsc$a_pointer],
    				 count))
    THEN
	BEGIN
	SIGNAL(set$_invquaval, 2, value_desc, %ASCID 'SKIP');
	RETURN
	END;
    END
ELSE IF cli$get_value(%ASCID 'SKIP.RECORDS', value_desc)
THEN
    BEGIN
    function = io$_skiprecord;
    flags[set$v_record] = 1;
    IF NOT (status = lib$cvt_dtb(.value_desc[dsc$w_length],
    				 .value_desc[dsc$a_pointer],
    				 count))
    THEN
	BEGIN
	SIGNAL(set$_invquaval, 2, value_desc, %ASCID 'SKIP');
	RETURN
	END
    END;

IF .function NEQ 0
THEN
    BEGIN
    status = $QIOW(CHAN = .channel,
    		   FUNC = .function,
    		   IOSB = iosb,
    		   P1   = .count);
    IF .status
    THEN status = .iosb[0];
    IF NOT .status
    THEN
	BEGIN
	SIGNAL(set$_writeerr, 1, desc, .status);
	RETURN;
	END;
!
! If the skip function was negative, then the tape must be re-positioned
! forward, over the end mark.
!
    IF .count LSS 0
    THEN
	BEGIN
	status = $QIOW(CHAN = .channel,
		       FUNC = .function,
		       IOSB = iosb,
		       P1   = 1);
	IF .status
	THEN status = .iosb[0];
	IF NOT .status
	THEN
	    BEGIN
	    SIGNAL(set$_writeerr, 1, desc, .status);
	    RETURN;
	    END;
	END;

!
! If /LOG, then tell what was done.
!

    IF .flags[set$v_log]
    THEN SIGNAL(set$_devset2, 3, desc,
		(IF .flags[set$v_files]
		 THEN %ASCID 'SKIP_FILES'
		 ELSE %ASCID 'SKIP_RECORDS'),
		value_desc);
    END;

!
! Lastly, check for /REWIND or /UNLOAD.
!
IF cli$present(%ASCID 'REWIND')
THEN
    BEGIN
    status = $QIOW(CHAN = .channel,
    		   IOSB = iosb,
    		   FUNC = io$_rewind);
    IF .status
    THEN status = .iosb[0];
    IF NOT .status
    THEN
	BEGIN
	SIGNAL(set$_writeerr, 1, desc, .status);
	END
    ELSE IF .flags[set$v_log]
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'REWIND');
    END;

IF cli$present(%ASCID 'UNLOAD')
THEN
    BEGIN
    status = $QIOW(CHAN = .channel,
    		   IOSB = iosb,
    		   FUNC = io$_rewindoff);
    IF .status
    THEN status = .iosb[0];
    IF NOT .status
    THEN SIGNAL(set$_writeerr, 1, desc, .status)
    ELSE IF .flags[set$v_log]
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'UNLOAD');
    END;

RETURN;
END;

GLOBAL ROUTINE set$printer : NOVALUE =
BEGIN
!++
! Functional description
!
!	This is the routine for the SET PRINTER command.  It is called
!	from the SET command processor,	and sets the characteristics of
!	a printer.
!
! Inputs
!	None
!
! Outputs
!	None
!
!----

LOCAL
    status,				! Status return
    width_desc : $BBLOCK[dsc$c_s_bln],	! /WIDTH descriptor
    page_desc : $BBLOCK[dsc$c_s_bln],	! /PAGE descriptor
    desc : $BBLOCK[dsc$c_s_bln],	! General purpose descriptor
    flags : $BBLOCK[4] INITIAL (0),	! Flags longword
    info_desc : VECTOR[2],		! $GETCHN descriptor
    info_block : $BBLOCK[12], 		! $GETCHN information block
    channel : WORD,			! I/O channel
    iosb : VECTOR[4,WORD];		! I/O status block

BIND lp_char = info_block[dib$l_devdepend] : $BBLOCK[3];

!
! Collect the name of the printer.
!
$init_dyndesc(desc);			! Make the descriptors dynamic
$init_dyndesc(width_desc);
$init_dyndesc(page_desc);
cli$get_value(%ASCID 'DEVICE',
		     desc);

!
! Assign a channel to the device. 
!
IF NOT (status = $ASSIGN(DEVNAM = desc,
		    	 CHAN   = channel))
THEN
    BEGIN
    SIGNAL(set$_writeerr, 1, desc, .status);
    RETURN;
    END;
!
! Determine if it is indeed a printer
!
info_desc[0] = 12;				! Set up the descriptor 
info_desc[1] = info_block;			! for $GETCHN
IF NOT (status = $GETCHN(SCDBUF = info_desc,	! Issue the $GETCHN, asking for
    			 CHAN   = .channel))	! secondary characteristics (in
THEN						! case it's spooled)
    BEGIN					! If a problem, signal it.
    SIGNAL(set$_writeerr, 1, desc, .status);
    RETURN;
    END;

IF .info_block[dib$b_devclass] NEQU dc$_lp	! If not a printer,
THEN						! signal that it's not.
    BEGIN
    SIGNAL(set$_writeerr, 1, desc,
    	   cli$_ivdevtype);
    END;

!
! Determine what characteristics to set, and whether to log it.
!
flags[set$v_log] = cli$present(%ASCID 'LOG');

!
! Real characteristics
!
IF (status = cli$present(%ASCID 'FF')) NEQ cli$_absent
THEN
    BEGIN
    IF .status NEQ cli$_negated
    THEN flags[set$v_ff] = lp_char[lp$v_mechform] = 1
    ELSE
	BEGIN
	flags[set$v_noff] = 1;
    	lp_char[lp$v_mechform] = 0;
    	END;
    END;

IF (status = cli$present(%ASCID 'CR')) NEQ cli$_absent
THEN
    BEGIN
    IF .status NEQ cli$_negated
    THEN flags[set$v_cr] = lp_char[lp$v_cr] = 1
    ELSE
	BEGIN
	flags[set$v_nocr] = 1;
	lp_char[lp$v_cr] = 0;
    	END;
    END;

IF (status = cli$present(%ASCID 'PASSALL')) NEQ cli$_absent
THEN
    BEGIN
    IF .status NEQ cli$_negated
    THEN flags[set$v_pass] = lp_char[lp$v_passall] =1
    ELSE
	BEGIn
	flags[set$v_nopass] = 1;
	lp_char[lp$v_passall] = 0;
	END;
    END;

IF (status = cli$present(%ASCID 'PRINTALL')) NEQ cli$_absent
THEN
    BEGIN
    IF .status NEQ cli$_negated
    THEN flags[set$v_print] = lp_char[lp$v_printall] = 1
    ELSE
	BEGIN
	flags[set$v_noprint] = 1;
	lp_char[lp$v_printall] = 0;
	END;
    END;

IF (status = cli$present(%ASCID 'WRAP')) NEQ cli$_absent
THEN
    BEGIN
    IF .status NEQ cli$_negated
    THEN flags[set$v_wrap] = lp_char[lp$v_wrap] = 1
    ELSE
	BEGIN
	flags[set$v_nowrap] = 1;
	lp_char[lp$v_wrap] = 0;
	END;
    END;

IF (status = cli$present(%ASCID 'UPPERCASE')) NEQ cli$_absent
THEN
    BEGIN
    IF .status EQL  cli$_negated
    THEN flags[set$v_lower] = lp_char[lp$v_lower] = 1
    ELSE
	BEGIN
	flags[set$v_upper] = 1;
	lp_char[lp$v_lower] = 0;
	END;
    END;

IF (status = cli$present(%ASCID 'LOWERCASE')) NEQ cli$_absent
THEN
    BEGIN
    IF .status NEQ cli$_negated
    THEN flags[set$v_lower] = lp_char[lp$v_lower] = 1
    ELSE
	BEGIN
	flags[set$v_upper] = 1;
	lp_char[lp$v_lower] = 0;
	END;
    END;


IF (status = cli$present(%ASCID 'FALLBACK')) NEQ cli$_absent
THEN
    BEGIN
    IF .status NEQ cli$_negated
    THEN flags[set$v_fallback] = lp_char[lp$v_fallback] = 1
    ELSE
    	BEGIN
    	flags[set$v_nofallback] = 1;
    	lp_char[lp$v_fallback] = 0;
    	END;
    END;


IF (status = cli$present(%ASCID 'TRUNCATE')) NEQ cli$_absent
THEN
    BEGIN
    IF .status NEQ cli$_negated
    THEN flags[set$v_truncate] = lp_char[lp$v_truncate] = 1
    ELSE
    	BEGIN
    	flags[set$v_notruncate] = 1;
    	lp_char[lp$v_truncate] = 0;
    	END;
    END;


IF (status = cli$present(%ASCID 'TAB')) NEQ cli$_absent
THEN
    BEGIN
    IF .status NEQ cli$_negated
    THEN flags[set$v_tab] = lp_char[lp$v_tab] = 1
    ELSE
    	BEGIN
    	flags[set$v_notab] = 1;
    	lp_char[lp$v_tab] = 0;
    	END;
    END;


IF (status = cli$present(%ASCID 'SIXELS')) NEQ cli$_absent
THEN
    BEGIN
    IF .status NEQ cli$_negated
    THEN flags[set$v_sixels] = lp_char[lp$v_sixels] = 1
    ELSE
    	BEGIN
    	flags[set$v_nosixels] = 1;
    	lp_char[lp$v_sixels] = 0;
    	END;
    END;


IF (status = cli$present(%ASCID 'BITMAPPED')) NEQ cli$_absent
THEN
    BEGIN
    IF .status NEQ cli$_negated
    THEN flags[set$v_bitmapped] = lp_char[lp$v_bitmapped] = 1
    ELSE
    	BEGIN
    	flags[set$v_nobitmapped] = 1;
    	lp_char[lp$v_bitmapped] = 0;
    	END;
    END;



!
! Printer type
!
IF (flags[set$v_lp11] = cli$present(%ASCID 'LP11'))
THEN info_block[dib$b_devtype] = lp$_lp11
ELSE IF (flags[set$v_la180] = cli$present(%ASCID 'LA180'))
THEN info_block[dib$b_devtype] = lp$_la180
ELSE IF (flags[set$v_la11] = cli$present(%ASCID 'LA11'))
THEN info_block[dib$b_devtype] = lp$_la11
ELSE IF (flags[set$v_unk] = cli$present(%ASCID 'UNKNOWN'))
THEN info_block[dib$b_devtype] = 0;

!
! Page length
!
IF (flags[set$v_page] = cli$get_value(%ASCID 'PAGE', page_desc))
THEN
    BEGIN
    LOCAL length;
    IF NOT lib$cvt_dtb(.page_desc[dsc$w_length],
		       .page_desc[dsc$a_pointer],
		       length)
    THEN
	BEGIN
	SIGNAL(set$_invquaval, 2, page_desc, %ASCID 'PAGE');
	RETURN
	END;

    IF .length GTR 255
    OR .length LSS 0
    THEN
	BEGIN
	SIGNAL(set$_valerr);
	RETURN;
	END;
    info_block[11, 0, 8, 0] = .length;
    END;

!
! Page width
!
IF (flags[set$v_width] = cli$get_value(%ASCID 'WIDTH', width_desc))
THEN
    BEGIN
    LOCAL width;
    IF NOT lib$cvt_dtb(.width_desc[dsc$w_length],
		       .width_desc[dsc$a_pointer],
		       width)
    THEN
	BEGIN
	SIGNAL(set$_invquaval, 2, width_desc, %ASCID 'PAGE');
	RETURN
	END;

    IF .width GTR 65535
    OR .width LSS 0
    THEN
	BEGIN
	SIGNAL(set$_valerr);
	RETURN;
	END;
    info_block[dib$w_devbufsiz] = .width;
    END;

!	
! Set the specified characteristic.
!
status = $QIOW(CHAN = .channel,
    	       FUNC = IO$_SETMODE,
    	       IOSB = iosb,
    	       P1   = info_block[dib$b_devclass],
    	       P2   = 8);

IF .status
THEN status = .iosb[0];
IF NOT .status
THEN SIGNAL(set$_writeerr, 1, desc, .status)

!
! If /LOG, then say what was changed.
!
ELSE IF .flags[set$v_log]
THEN
    BEGIN
    IF .flags[set$v_ff]
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'FF')
    ELSE IF .flags[set$v_noff] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'NOFF');

    IF .flags[set$v_cr]
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'CR')
    ELSE IF .flags[set$v_nocr] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'NOCR');

    IF .flags[set$v_pass]
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'PASSALL')
    ELSE IF .flags[set$v_nopass] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'NOPASSALL');

    IF .flags[set$v_print] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'PRINTALL')
    ELSE IF .flags[set$v_noprint] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'NOPRINTALL');

    IF .flags[set$v_wrap] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'WRAP')
    ELSE IF .flags[set$v_nowrap] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'NOWRAP');

    IF .flags[set$v_lower] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'LOWERCASE')
    ELSE IF .flags[set$v_upper] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'UPPERCASE');

    IF .flags[set$v_fallback] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'FALLBACK')
    ELSE IF .flags[set$v_nofallback]
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'NOFALLBACK');

    IF .flags[set$v_truncate] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'TRUNCATE')
    ELSE IF .flags[set$v_notruncate]
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'NOTRUNCATE');

    IF .flags[set$v_tab] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'TAB')
    ELSE IF .flags[set$v_notab]
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'NOTAB');

    IF .flags[set$v_sixels] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'SIXELS')
    ELSE IF .flags[set$v_nosixels]
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'NOSIXELS');

    IF .flags[set$v_bitmapped] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'BITMAPPED')
    ELSE IF .flags[set$v_nobitmapped]
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'NOBITMAPPED');

    IF .flags[set$v_lp11] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'LP11')
    ELSE IF .flags[set$v_la180] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'LA180')
    ELSE IF .flags[set$v_la11] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'LA11')
    ELSE IF .flags[set$v_unk] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'UNKNOWN');

    IF .flags[set$v_page] 
    THEN SIGNAL(set$_devset2, 3, desc, %ASCID 'PAGE', page_desc);

    IF .flags[set$v_width] 
    THEN SIGNAL(set$_devset1, 2, desc, %ASCID 'WIDTH', width_desc);
    END;

RETURN;
END;

END
ELUDOM
