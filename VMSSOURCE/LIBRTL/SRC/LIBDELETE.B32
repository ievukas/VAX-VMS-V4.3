MODULE LIB$DELETE_FILE ( %TITLE 'Delete one or more files'
		IDENT = '1-006'		! File: LIBDELETE.B32 Edit: BLS0331
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library
!
! ABSTRACT:
!
!	LIB$DELETE_FILE deletes one or more files.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 13-July-1982
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 13-July-1982
! 1-002 - Add related-file-spec argument, and pass FAB to confirm-routine.
!	  SBL 1-Oct-1982
! 1-003 - Pass error source code to error-routine.  SBL 19-Nov-1982
! 1-004	- Update for new argument to LIB$FILE_SCAN. BLS  6-FEB-1984
! 1-005 - Add new argument for filescan context. BLS  5-MAR-1984
! 1-006 - Parse null string to deallocate rms context after calling
!	file_scan. BLS  9-JUL-1984
!--


%SBTTL 'Declarations'
!
! PROLOGUE FILE:
!

REQUIRE 'RTLIN:LIBPROLOG';			! Switches, PSECTS, macros, etc.

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$DELETE_FILE,				! Delete one or more files
    DO_DELETE: NOVALUE,				! Delete a file
    DELETE_ERROR: NOVALUE,			! Error routine
    DELETE_HANDLER;				! Condition handler

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNALS:
!

EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2: LIB$ANALYZE_SDESC_R2$LINKAGE,
    LIB$FILE_SCAN,
    LIB$SCOPY_DXDX,
    LIB$SCOPY_R_DX,
    LIB$SIG_TO_RET;

EXTERNAL LITERAL
    LIB$_ERRROUCAL,
    LIB$_INVFILSPE;

%SBTTL 'LIB$DELETE_FILE - Delete one or more files'
GLOBAL ROUTINE LIB$DELETE_FILE (
    FILESPEC: REF BLOCK [, BYTE],		! File to delete
    DEFAULT_FILESPEC: REF BLOCK [, BYTE],	! Default file specification
    RELATED_FILESPEC: REF BLOCK [, BYTE],	! Related file specification
    SUCCESS_ROUTINE,				! Called on successful delete
    ERROR_ROUTINE,				! Called on error
    CONFIRM_ROUTINE,				! Called for confirmation
    USER_ARG,					! User argument
    RESULTANT_NAME: REF BLOCK [, BYTE],		! Returned filespec
    FILE_SCAN_CONTEXT				! Lib$file_scan context
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	LIB$DELETE_FILE deletes one or more files.  It is similar in
!	function to the DCL DELETE command.  The specification 
!	of the file(s) to be deleted may include wild cards.
!
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$DELETE_FILE (
!		FILESPEC.rt.dx,
!		[, [DEFAULT_FILESPEC.rt.dx]
!		[, [RELATED_FILESPEC.rt.dx]
!		[, [SUCCESS_ROUTINE.szem.r]
!		[, [ERROR_ROUTINE.fzemlc.r]
!		[, [CONFIRM_ROUTINE.fzemlc.r]
!		[, [USER_ARG.rz]
!		[, [RESULTANT_NAME.wt.dx]
!		[, [FILE_SCAN_CONTEXT] ]]]]]]])
!
! FORMAL PARAMETERS:
!
!	FILESPEC		- The file specification of the file(s)
!				  to be deleted.  Passed by descriptor.
!				  The specification may include wild cards.
!
!	DEFAULT_FILESPEC	- The default file specification of the
!				  file(s) to be deleted.  Passed by descriptor.
!				  If omitted, the default is the null string.
!
!	RELATED_FILESPEC	- The related file specification of the
!				  files to be deleted.  Passed by descriptor.
!				  If omitted, the default is the null string.
!				  "Input file parsing" is used.
!
!	SUCCESS_ROUTINE		- The entry mask of a routine to call for
!				  each successful delete, passed by reference.
!				  The calling format of the SUCCESS_ROUTINE is
!				  as follows:
!					CALL SUCCESS_ROUTINE (
!					    filespec.rt.ds,
!					    user_arg.rz)
!
!				    filespec     - The RMS resultant file specification
!						   of the file being deleted.  If
!						   RESULTANT_NAME was specified,
!						   it is used to pass the string
!						   to SUCCESS_ROUTINE.  Otherwise,
!						   a class S, type T string is passed.
!
!
!				    user_arg     - The value of user_arg passed
!						   to LIB$DELETE_FILE is passed
!						   to SUCCESS_ROUTINE using the
!						   same mechanism as was used to
!						   pass it to LIB$DELETE_FILE
!						   
!
!	ERROR_ROUTINE		- The entry mask of a routine to call when
!				  an error is detected, passed by reference.
!				  The function value returned by the routine
!				  determines whether or not more files will
!				  be processed.
!
!				  The calling format of the ERROR_ROUTINE is
!				  as follows:
!					ret_status.wlc.v = ERROR_ROUTINE (
!					    filespec.rt.ds,
!					    RMS_sts.rlc.r
!					    RMS_stv.rlc.r,
!					    error_source.rl.r,
!					    user_arg.rz)
!
!				    filespec     - The RMS resultant file specification
!						   of the file being deleted.  If
!						   RESULTANT_NAME was specified,
!						   it is used to pass the string
!						   to ERROR_ROUTINE.  Otherwise,
!						   a class S, type T string is passed.
!
!				    RMS_sts	 - The primary condition code
!						   which describes the error
!						   that occurred.
!
!				    RMS_stv	 - The secondary condition code
!						   which describes the error
!						   that occurred.
!
!				    error_source - An integer code that indicates
!						   at what point the error was
!						   found.  The values are:
!						     0 = Error searching for
!							 filespec
!						     1 = Error deleting file
!
!				    user_arg     - The value of user_arg passed
!						   to LIB$DELETE_FILE is passed
!						   to ERROR_ROUTINE using the
!						   same mechanism as was used to
!						   pass it to LIB$DELETE_FILE
!
!				  If ERROR_ROUTINE returns a success status,
!				  then processing of files will continue.  If
!				  a failure status is returned, then processing
!				  will cease immediately and LIB$DELETE_FILE
!				  will return with the error status.
!
!				  If ERROR_ROUTINE is not specified,
!				  LIB$DELETE_FILE will return to its caller with
!				  the most severe of the error statuses encountered
!				  while deleting the files.  Otherwise, if
!				  ERROR_ROUTINE is called for an error, the
!				  success status LIB$_ERRROUCAL is returned.
!				  Note that ERROR_ROUTINE is not called for
!				  errors related to string copying.
!
!	CONFIRM_ROUTINE		- The entry mask of a routine to call before
!				  each file is deleted, passed by reference.
!				  The function value returned by the routine
!				  determines whether or not the file will be
!				  be deleted.
!
!				  The calling format of CONFIRM_ROUTINE is
!				  as follows:
!					ret_status.wlc.v = CONFIRM_ROUTINE (
!					    filespec.rt.ds,
!					    FAB.rr.r,
!					    user_arg.rz)
!
!				    filespec     - The RMS resultant file specification
!						   of the file being deleted.  If
!						   RESULTANT_NAME was specified,
!						   it is used to pass the string
!						   to CONFIRM_ROUTINE.  Otherwise,
!						   a class S, type T string is passed.
!
!				    FAB		 - The address of the RMS FAB
!						   that describes the file
!						   being deleted.  You may
!						   perform an RMS $OPEN on the
!						   FAB to obtain file attributes
!						   you need to determine whether
!						   the file should be deleted,
!						   but you must close the file
!						   with $CLOSE before returning
!						   to LIB$DELETE_FILE.
!
!				    user_arg     - The value of user_arg passed
!						   to LIB$DELETE_FILE is passed
!						   to CONFIRM_ROUTINE using the
!						   same mechanism as was used to
!						   pass it to LIB$DELETE_FILE
!
!				  If CONFIRM_ROUTINE returns success, the file
!				  is then deleted, otherwise that file is not
!				  deleted.
!
!	USER_ARG		- A value passed to SUCCESS_ROUTINE,
!				  ERROR_ROUTINE and CONFIRM_ROUTINE each
!				  time they are called.  Whatever mechanism
!				  is used to pass USER_ARG to LIB$DELETE_FILE is
!				  used to pass it to the action routine.  This 
!				  is an optional parameter, if omitted, zero 
!				  is passed by immediate value.
!
!	RESULTANT_NAME		- A string into which is written the RMS resultant
!				  file specification of the last file processed
!				  by LIB$DELETE_FILE.  Passed by descriptor.
!				  If present, RESULTANT_NAME is used to store
!				  the filespec passed to the action routines
!				  instead of a default class S, type T string.
!
!	FILE_SCAN_CONTEXT	- The address of a longword, which is
!				  initialized to 0 before calling LIB$DELETE_FILE.
!				  This context is used by LIB$FILE_SCAN to retain
!				  multiple input file related file context, and
!				  need only be specified if dealing with multiple
!				  input files, as the DCL DELETE command does.
!				  The context allocated by LIB$FILE_SCAN while
!				  processing the LIB$DELETE_FILE requests may
!				  be deallocated by calling LIB$FILE_SCAN_END
!				  after all calls to LIB$DELETE_FILE have been
!				  completed.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_ERRROUCAL	Success - error routine called.  A file error was
!			encountered but ERROR_ROUTINE was called to handle
!			the condition.
!	LIB$_INVSTRDES	Invalid string descriptor
!	LIB$_INVFILSPE	Invalid file specification.  FILESPEC or 
!			DEFAULT_FILESPEC is longer than 255 characters.
!	LIB$_WRONUMARG	Wrong number of arguments.
!	LIB$_xxx	Any error status from LIB$SCOPY_xxx
!	RMS$_xxx	Any error status from RMS.  If ERROR_ROUTINE is not
!			specified, this is the most severe of the RMS errors
!			encountered while deleting the file(s).
!
! SIDE EFFECTS:
!
!	The files specified are deleted.
!
!--

    BEGIN


    LOCAL
	FAB: $FAB_DECL,				! File's FAB
	NAM: $NAM_DECL,				! File's NAM
	RLF_NAM: $NAM_DECL,			! Related file NAM block
	ESN: VECTOR [NAM$C_MAXRSS, BYTE],	! Expanded name string
	RSN: VECTOR [NAM$C_MAXRSS, BYTE],	! Resultant name string
	ERROR_SOURCE,				! Reason for the error, passed
						! to error_routine.  Values are:
						!    0 - error from search
						!    1 - error from $ERASE
	WORST_ERROR,				! Worst error so far
	INTERCEPT_FLAG: VOLATILE,		! 1 if signals are to be intercepted
	RET_STATUS;				! Return status

    BUILTIN
	ACTUALCOUNT,
	NULLPARAMETER;

    !+
    ! Enable DELETE_HANDLER as a handler so that it will convert our
    ! signals to return statuses if INTERCEPT_FLAG is set.
    !-

    ENABLE
	DELETE_HANDLER (INTERCEPT_FLAG);

    !+
    ! Validate the argument count.
    !-

    $LIB$VALIDATE_ARGCOUNT (1,9);

    !+
    ! Initialize the FAB and NAM blocks.
    !-

    $FAB_INIT (FAB=FAB, NAM=NAM);
    $NAM_INIT (NAM=NAM, ESA=ESN, ESS=NAM$C_MAXRSS,
	RSA=RSN, RSS=NAM$C_MAXRSS, RLF=RLF_NAM);
    $NAM_INIT (NAM=RLF_NAM);

    !+
    ! Initialize WORST_ERROR to zero.  If any errors occur, the worst one
    ! will be in WORST_ERROR when LIB$FILE_SCAN returns.
    ! Initialize ERROR_SOURCE to zero.  If DO_DELETE calls DELETE_ERROR
    ! it will set ERROR_SOURCE to 1.
    !-

    WORST_ERROR = 0;
    ERROR_SOURCE = 0;

    !+
    ! Set up FAB for the file specification.  Return LIB$_INVFILSPE
    ! if the string is longer than 255 characters.
    !-

	BEGIN

	LOCAL
	    FILESPEC_LENGTH: WORD,	! Length of FILESPEC string
	    STATUS;			! Status from LIB$ANALYZE_SDESC.

	STATUS = LIB$ANALYZE_SDESC_R2 (FILESPEC [0,0,0,0];
	    FILESPEC_LENGTH, FAB [FAB$L_FNA]);		

	IF NOT .STATUS
	THEN
	    RETURN .STATUS;

	IF .FILESPEC_LENGTH GTRU 255
	THEN
	    RETURN LIB$_INVFILSPE;

	FAB [FAB$B_FNS] = .FILESPEC_LENGTH;
	END;

    !+
    ! Get DEFAULT_FILESPEC if present, and set up as default name string.
    !-

    IF NOT NULLPARAMETER (2)
    THEN
	BEGIN

	LOCAL
	    FILESPEC_LENGTH: WORD,	! Length of DEFAULT_FILESPEC string
	    STATUS;			! Status from LIB$ANALYZE_SDESC.

	STATUS = LIB$ANALYZE_SDESC_R2 (DEFAULT_FILESPEC [0,0,0,0];
	    FILESPEC_LENGTH, FAB [FAB$L_DNA]);		

	IF NOT .STATUS
	THEN
	    RETURN .STATUS;

	IF .FILESPEC_LENGTH GTRU 255
	THEN
	    RETURN LIB$_INVFILSPE;

	FAB [FAB$B_DNS] = .FILESPEC_LENGTH;
	END;

    !+
    ! Get RELATED_FILESPEC if present, and set up as related name string.
    !-

    IF NOT NULLPARAMETER (3)
	AND NULLPARAMETER (9)
    THEN
	BEGIN

	LOCAL
	    FILESPEC_LENGTH: WORD,	! Length of RELATED_FILESPEC string
	    STATUS;			! Status from LIB$ANALYZE_SDESC.

	STATUS = LIB$ANALYZE_SDESC_R2 (RELATED_FILESPEC [0,0,0,0];
	    FILESPEC_LENGTH, RLF_NAM [NAM$L_RSA]);		

	IF NOT .STATUS
	THEN
	    RETURN .STATUS;

	IF .FILESPEC_LENGTH GTRU 255
	THEN
	    RETURN LIB$_INVFILSPE;

	RLF_NAM [NAM$B_RSL] = .FILESPEC_LENGTH;
	END;

    !+
    ! Call LIB$FILE_SCAN, which will call DO_DELETE for each file that is
    ! to be deleted.  Pass as extra parameters the success routine, error routine,
    ! confirm routine, user argument, result filename descriptor, worst error
    ! holder, error_source and intercept flag.  These will be passed to DO_DELETE by 
    ! LIB$FILE_SCAN.
    !-

    LIB$FILE_SCAN (
	FAB,				! Input FAB
	DO_DELETE,			! Success routine
	DELETE_ERROR,			! Error routine
	(IF ACTUALCOUNT () GEQU 9 THEN .FILE_SCAN_CONTEXT ELSE 0),! context
	(IF ACTUALCOUNT () GEQU 4 THEN .SUCCESS_ROUTINE ELSE 0),! Success routine
        (IF ACTUALCOUNT () GEQU 5 THEN .ERROR_ROUTINE ELSE 0),	! Error routine
	(IF ACTUALCOUNT () GEQU 6 THEN .CONFIRM_ROUTINE ELSE 0),! Confirm routine
	(IF ACTUALCOUNT () GEQU 7 THEN .USER_ARG ELSE 0),	! User argument
	(IF ACTUALCOUNT () GEQU 8 THEN .RESULTANT_NAME ELSE 0),	! Resultant name
        WORST_ERROR,			! Worst error so far
	ERROR_SOURCE,			! Code for source of error
	INTERCEPT_FLAG);		! Signal intercept flag

    !+
    ! Parse the null string to deallocate any internal
    ! RMS context.
    !-

    NAM[NAM$V_SVCTX] = 0;
    NAM[NAM$V_SYNCHK] = 1;
    NAM[NAM$B_ESL] = 0;
    NAM[NAM$B_RSL] = 0;
    NAM[NAM$B_ESS] = 0;
    NAM[NAM$B_RSS] = 0;
    NAM[NAM$L_RLF] = 0;
    FAB[FAB$B_FNS] = 0;
    FAB[FAB$B_DNS] = 0;
    $PARSE(FAB=FAB);

    !+
    ! Return WORST_ERROR or SS$_NORMAL, as appropriate.
    !-

    IF .WORST_ERROR NEQ 0
    THEN
	RET_STATUS = .WORST_ERROR
    ELSE
	RET_STATUS = SS$_NORMAL;

    RETURN .RET_STATUS;

    END;					! End of routine LIB$DELETE_FILE

%SBTTL 'DO_DELETE - Delete a file'
ROUTINE DO_DELETE (
    FAB: REF $FAB_DECL,				! Next input file FAB
    UNUSED_1,					! Unused here
    UNUSED_2,					! Unused here
    UNUSED_3,					! Unused here
    SUCCESS_ROUTINE,				! Success routine address
    UNUSED_4,					! Unused here
    CONFIRM_ROUTINE,				! Confirm routine address
    USER_ARG,					! User argument
    RESULTANT_NAME,				! Resultant filename
    UNUSED_5,					! Unused here
    ERROR_SOURCE: REF VECTOR [, LONG],		! Source of error
    INTERCEPT_FLAG: REF VECTOR [, LONG]		! Intercept flag
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called once for each file that LIB$FILE_SCAN
!	finds.  It deletes the file described by FAB.
!
! CALLING SEQUENCE:
!
!	DO_DELETE is called with the same arguments as was LIB$FILE_SCAN
!	in LIB$DELETE_FILE.
!
! FORMAL PARAMETERS:
!
!	See LIB$DELETE_FILE for a description of all parameters.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Deletes a file.
!
!--

    BEGIN

    LOCAL
	NAM: REF $NAM_DECL,		! NAM of FAB
	LOCAL_DSC: BLOCK [8, BYTE],	! Local string descriptor
	STRING_PTR,			! Pointer to string used
	COPY_STATUS;			! Status from LIB$SCOPY

    BUILTIN
	AP,
	CALLG;

    !+
    ! Set NAM address.
    !-

    NAM = .FAB [FAB$L_NAM];

    !+
    ! Copy the resultant file name to the user's string, if specified.
    ! If we get an error from the copy, signal it.
    ! If no user string, use our own.
    !-

    STRING_PTR = .RESULTANT_NAME;
    IF .STRING_PTR NEQA 0
    THEN
	BEGIN
	COPY_STATUS = LIB$SCOPY_R_DX (%REF(.NAM [NAM$B_RSL]),
	    .NAM [NAM$L_RSA], .RESULTANT_NAME);
	IF NOT .COPY_STATUS
	THEN
	    BEGIN
	    INTERCEPT_FLAG [0] = 1;
	    SIGNAL_STOP (.COPY_STATUS);
	    RETURN;
	    END;
	END
    ELSE
	BEGIN
	STRING_PTR = LOCAL_DSC;		! Use our string
	LOCAL_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	LOCAL_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
	LOCAL_DSC [DSC$W_LENGTH] = .NAM [NAM$B_RSL];
	LOCAL_DSC [DSC$A_POINTER] = .NAM [NAM$L_RSA];
	END;

    !+
    ! If there is a CONFIRM_ROUTINE, ask it if it wants the file deleted.
    ! Note use of linkage name BLISS to perform a general-routine-call.
    !-

    IF .CONFIRM_ROUTINE NEQA 0
    THEN
	IF NOT BLISS (.CONFIRM_ROUTINE, .STRING_PTR, .FAB, .USER_ARG)
	THEN
	    RETURN;

    !+
    ! Do the $ERASE.
    !-

    IF NOT $ERASE (FAB = FAB [0,0,0,0])
    THEN
	BEGIN
	!+
	! Call the DELETE_ERROR routine with the same arguments we were
	! called with.  It will call the user's error routine, if any.
	! Set ERROR_SOURCE to 1 so that DELETE_ERROR will know the error
	! came from the $ERASE.
	!-
	ERROR_SOURCE [0] = 1;
	CALLG (.AP, DELETE_ERROR);
	RETURN;
	END;

    !+
    ! If there is a success routine, call it.
    !-

    IF .SUCCESS_ROUTINE NEQA 0
    THEN
	BLISS (.SUCCESS_ROUTINE, .STRING_PTR, .USER_ARG);

    RETURN;

    END;					! End of routine DO_DELETE

%SBTTL 'DELETE_ERROR - Report error during delete'
ROUTINE DELETE_ERROR (
    FAB: REF $FAB_DECL,			! Next input file FAB
    UNUSED_1,				! Unused here
    UNUSED_2,				! Unused here
    UNUSED_3,				! Unused here
    UNUSED_4,				! Unused here
    ERROR_ROUTINE,			! User's error routine
    UNUSED_5,				! Unused here
    USER_ARG,				! User's argument
    RESULTANT_NAME,			! Resultant file name
    WORST_ERROR: REF BLOCK [, BYTE],	! Worst previous error
    ERROR_SOURCE: REF VECTOR [, LONG],	! Code for source of error
    INTERCEPT_FLAG: REF VECTOR [, LONG]	! Signal intercept flag
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called when LIB$FILE_SCAN detects an error.
!	It calls the user's error routine, if one exists.
!	If the user's error routine returns success, or if there is
!	no user error routine, processing of remaining files continues.
!	If the user's error routine returns failure, the error is
!	signalled.  This signal is converted to the return status of
!	LIB$DELETE_FILE.
!
! CALLING SEQUENCE:
!
!	Called from LIB$FILE_SCAN and DO_DELETE with the same arguments
!	as passed to LIB$FILE_SCAN from LIB$DELETE_FILE.
!
! FORMAL PARAMETERS:
!
!	See body of LIB$DELETE_FILE for descriptions of arguments.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals .FAB [FAB$L_STS]
!
!--

    BEGIN

    LOCAL
	NAM: REF $NAM_DECL,			! NAM block
	LOCAL_DSC: BLOCK [8, BYTE],		! Our filename descriptor
	STRING_PTR,				! Pointer to user's string or our own
	COPY_STATUS;				! Status from LIB$SCOPY

    !+
    ! Build our local descriptor to contain the filespec of the file in error.
    ! Note that the filespec is guaranteed to be in the RSN because
    ! LIB$FILE_SCAN puts it there before calling us.
    !-

    NAM = .FAB [FAB$L_NAM];
    LOCAL_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    LOCAL_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
    LOCAL_DSC [DSC$W_LENGTH] = .NAM [NAM$B_RSL];
    LOCAL_DSC [DSC$A_POINTER] = .NAM [NAM$L_RSA];

    !+
    ! If the user has specified DELETED_FILE, copy the filename to it.
    !-

    STRING_PTR = .RESULTANT_NAME;
    IF .STRING_PTR NEQA 0
    THEN
	BEGIN
	COPY_STATUS = LIB$SCOPY_DXDX (LOCAL_DSC, .RESULTANT_NAME);
	IF NOT .COPY_STATUS
	THEN
	    BEGIN
	    INTERCEPT_FLAG [0] = 1;	! Cause handler to intercept signal
	    SIGNAL_STOP (.COPY_STATUS);
	    RETURN;
	    END;
	END
    ELSE
	STRING_PTR = LOCAL_DSC;		! Use our own string

    !+
    ! If a user error routine has been specified, call it with arguments
    ! of the filename, STS, STV, error source and user argument.  If it returns
    ! failure, signal the error.  Since the user's routine was called,
    ! store LIB$_ERRROUCAL in WORST_ERROR.
    !-

    IF .ERROR_ROUTINE NEQA 0
    THEN
	BEGIN
	IF NOT BLISS (.ERROR_ROUTINE, .STRING_PTR,
	    FAB [FAB$L_STS], FAB [FAB$L_STV], ERROR_SOURCE [0], .USER_ARG)
	THEN
	    BEGIN
	    INTERCEPT_FLAG [0] = 1;	! Cause handler to intercept signal
	    SIGNAL_STOP (.FAB [FAB$L_STS]);
	    RETURN;
	    END;
	WORST_ERROR [0,0,32,0] = LIB$_ERRROUCAL;	! Error routine called
	END
    ELSE
	BEGIN
	!+
	! If this error is worse than any previous errors, store it in
	! WORST_ERROR.  (Use GEQU so that the initial zero gets replaced if
	! the error is a warning.)
	!-
    
	IF .BLOCK [FAB [FAB$L_STS], STS$V_SEVERITY;4, BYTE] GEQU
	    .WORST_ERROR [STS$V_SEVERITY]
	THEN
	    WORST_ERROR [0,0,32,0] = .FAB [FAB$L_STS];
	END;

    !+
    ! Reset ERROR_SOURCE to zero so that future $SEARCH errors will be
    ! properly indicated.
    !-

    ERROR_SOURCE [0] = 0;

    RETURN;

    END;					! End of routine DELETE_ERROR

%SBTTL 'DELETE_HANDLER - Local condition handler'
ROUTINE DELETE_HANDLER (
    	SIGNAL_ARGS: REF BLOCK [, BYTE], 	! Signal arguments array
    	MECH_ARGS: REF BLOCK [, BYTE],		! Mechanism arguments array
    	ENABLE_ARGS: REF VECTOR [, LONG]	! Enable arguments array
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the condition handler enabled by LIB$DELETE_FILE.
!	If this is not an unwind, and if the INTERCEPT_FLAG enable
!	argument is set, then LIB$SIG_TO_RET is called to convert the
!	signal to a return status.
!
! CALLING SEQUENCE:
!
!	status.wlc.v = DELETE_HANDLER (SIGNAL_ARGS.rl.ra, MECH_ARGS.rl.ra
!					, ENABLE_ARGS.rl.ra)
!
! FORMAL PARAMETERS:
!
!	SIGNAL_ARGS	- The signal argument list.
!
!	MECH_ARGS	- The mechanism argument list.
!
!	ENABLE_ARGS	- The enable argument list.  The one enable
!			  argument is the address of INTERCEPT_FLAG;
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	SS$_RESIGNAL
!
! SIDE EFFECTS:
!
!	May cause an unwind.
!
!--

    BEGIN

    BUILTIN
	AP,	! Argument pointer
	CALLG;	! CALLG instruction

    !+
    ! Determine if this is an unwind.  If not, then if INTERCEPT_FLAG
    ! is set, turn this signal into an unwind.
    !-

    IF .SIGNAL_ARGS [CHF$L_SIG_NAME] NEQU SS$_UNWIND
    THEN
	IF ..ENABLE_ARGS [1]	! Is INTERCEPT_FLAG set?
	THEN
	    CALLG (.AP, LIB$SIG_TO_RET);	! Convert signal to return status
	
    RETURN SS$_RESIGNAL;			! Resignal error

    END;					! End of routine DELETE_HANDLER


END						! End of module LIB$DELETE_FILE

ELUDOM
