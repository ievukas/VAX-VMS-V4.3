	.title	pli$control - pli runtime library control routines
	.ident	/1-004/					; Edit LEB1004
							; Edit CGN1003
							; Edit WHM1002
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; facility:
;
;	VAX/VMS PLI  runtime library
;
; abstract:
;
; This module contains the data structures and code necessary to control
; the PL/I runtime library.  
;
; author: R. Heinen 22-Jan-1980
;
; Modifications:
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;	1-003	Chip Nylander	23-February-1983
;
;		When closing all files for exit, call PLI$CLOSE with a
;		new optional parameter that tells it what severity level
;		an error should be signalled with.
;
;	1-004   Linda Benson	12-May-1983
;--
 
;
; external definitions
;
	$defstk				; define runtine stack
	$stsdef				; sts$k symbols

;
; global data
;
; runtime control block
;
	.psect pli$gl_rt_cblk,noshr,pic,usr,gbl,ovr,wrt,rd,noexe,rel
pli$gl_rt_cblk:
	.blkl	48			; exit control block and runtime flags
pli$fcb_head::
	.blkl	2
 
;
; define offsets into control block
;
cblk_l_exit_blk		= 0		; exit control block
cblk_l_exit_hnd		= 4		; exit handler address
cblk_l_exit_argc	= 8		; exit arg count
cblk_l_exit_addr	= 12		; address to store reason
cblk_q_fcb_list		= 16		; fcb list head
cblk_l_exit_reason	= 24		; reason for exit
cblk_l_flags 		= 28		; control flags
	cblk_v_inited	= 0		; initialized
	cblk_v_main	= 1		; options main
 
	rtshare
	.page
	.sbttl	pli$optionsmain - initialize stack and options main program
;++
; pli$optionsmain - initialize stack and options main program
;
; functional description:
;
; This routine initializes the stack frame for options main procedures
; and declares an exit handler for for the program.
;
; inputs:
;
;	none
;
; outputs:
;
;	none
;--
pli$optionsmain::
	clrl	stk_l_cnd_lst(fp)	; set up control block list
	movab	g^pli$optmain_hnd,(fp)	; set up frame handler
	bsbb	initialize_exithandler	; initialize exit handler
	bbcs	#cblk_v_main,cblk_l_flags(r2),10$; br if already initialized
	movab	g^pli$def_hnd,(fp)	; setup normal condition handler
10$:	rsb
;
; check for uninitialized exit handler
;
initialize_exithandler:
	movab	g^pli$gl_rt_cblk,r2	; address control block
	bbs	#cblk_v_inited,cblk_l_flags(r2),10$; br if inited
;
; setup control block
;
	bisb	#1@cblk_v_inited,cblk_l_flags(r2); set inited
	movab	cblk_q_fcb_list(r2),cblk_q_fcb_list(r2); initialize list head
	movab	cblk_q_fcb_list(r2),cblk_q_fcb_list+4(r2);
	clrl	cblk_l_exit_blk(r2)	; build exit handler control block
	movab	w^pli$exit_hnd,cblk_l_exit_hnd(r2);
	movl	#5,cblk_l_exit_argc(r2)	;
	movab	cblk_l_exit_reason(r2),cblk_l_exit_addr(r2);
	$dclexh_s	cblk_l_exit_blk(r2)
10$:	rsb				; done
	.page
;++
; pli$$term_prog - set up termination
;
; functional description:
;
; This routine is used prior to a resignal to the command interpreter
; following a ERROR condition that was not handled.  The action is to reset
; the options_main flag to prevent the FINISH condition from being signalled.
; When an exit is done inside the command interpreter, the FINISH signal
; would not be fielded by any existing stack frame.  This action prevents
; a junk FINISH condition message from being displayed.
;
; inputs:
;
;	none.
;
; outputs:
;
;	none.
;--
pli$$term_prog::
	movab	g^pli$gl_rt_cblk+cblk_l_flags,r0; address area
	bicb	#1@cblk_v_main,(r0)		; reset options_main
	rsb
	.page
	.sbttl	pli$link_fcb - link fcb onto exit handler chain
;++
; pli$link_fcb
;
; functional description:
;
; This routine links an fcb onto the exit handler list in pli$gl_rt_cblk.
; If the entry is the first entry then the control block is designated as
; an exit handler control block.
;
; inputs:
;
;	r6 = fcb address to link
;	
; outputs:
;
;	none.
;--
pli$link_fcb::
	pushr	#^m<r0,r1,r2>
	bsbb	initialize_exithandler	; initialize handler and block
;
; link fcb onto list
;
10$:	insque	(r6),cblk_q_fcb_list(r2); insert fcb in list
	popr	#^m<r0,r1,r2>
	rsb
	.page
	.sbttl	pli$exit_hnd - exit handler for PL/I runtime
;++
; pli$exit_hnd - PL/I exit handler
;
; functional description:
;
; This routine is entered on exit in order to clean up the I/O database.
; Prior to cleaning up the I/O Pli$_finish is signalled.
;
; inputs:
;
;	0(ap) = 1
;	4(ap) = address of the exit control block argument list
;
; outputs:
;
;	none.
;
;--
	.entry	pli$exit_hnd,0
;
; give finish condition handlers a chance
;
	bbc	#cblk_v_main,cblk_l_flags-cblk_l_exit_argc(ap),10$; skip signal if no main block
	pushl	#pli$_finish		; signal finish condition
	calls	#1,g^lib$signal		;
;
; close all open files
;
10$:	pushl	#sts$k_error		; signal E-level errors, not F-level
	pushl	#0			; no environment option
	remque	@cblk_q_fcb_list-cblk_l_exit_argc(ap),-(sp); get a control block
	bvs	15$			; if vset then done
	calls	#3,g^pli$close		; close file
	brb	10$			; continue until done
15$:	ret

	.sbttl	pli$stop_prog - stop pl1 program
;++
; pli$stop_prog - stop pl1 program
;
; functional description:
;
; This routine is envoked when a RET or BLOCK_END is done in an
; options main procedure or when a STOP is executed.
; The action is to signal the finish condition and terminate the program.
;
; Note that this can cause infinite loops in the user program if it
; handles FINISH and somehow does a STOP or ret etc.
;
; inputs:
;
;	4(ap) = exit status
;
; outputs:
;
;	none.
;--
	.entry	pli$stop_prog,0
	movab	g^pli$gl_rt_cblk,r0
	bicb	#1@cblk_v_main,cblk_l_flags(r0)	; disable force exit
	pushl	#pli$_finish		; finish is the condition
	clrq	r0			;
	calls	#1,g^lib$signal		; signal the condition
	$exit_s	4(ap)			; end the program
	.end

