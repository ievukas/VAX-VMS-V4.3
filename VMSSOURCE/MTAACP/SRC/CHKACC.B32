MODULE CHKACC (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	This routine checks that the access requested is allowed on the
!	volume set.
!
! ENVIRONMENT:
!
!	Starlet operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. Gillespie,	 CREATION DATE:	17-MAY-77  09:30
!
! MODIFIED BY:
!
!	V03-006	LMP0246		L. Mark Pilant,		2-May-1984  10:10
!		Correct a bug introduced by LMP0221.  The UCB and PCB addresses
!		were swapped in the EXE$CHKxxxACCES routine calls.
!
!	V03-005	MMD0286		Meg Dumont,	10-Apr-1984  14:14
!		Fix to the $MTACCESS returns where ACCESS might get
!		over written with a success code before all the
!		error conditions were checked. Fix to set the VCB
!		FIL_ACCESS bit in KERNEL mode.
!
!	V03-004	LMP0221		L. Mark Pilant,		28-Mar-1984  10:21
!		Change UCB$L_OWNUIC to ORB$L_OWNER and UCB$W_VPROT to
!		ORB$W_PROT.
!
!	V03-003	MMD0274		Meg Dumont,	23-Mar-1984  9:48
!		Change the processing of the accessibility character fields
!		in the HDR1 label to call the installation
!		specific accessibility routine. The return from this
!		routine determines the users access to the file. This
!		module has also been changed to support the bit
!		VCB$V_FIL_ACCESS which is set to determine whether
!		VMS protection is valid for the file.
!
!	V03-002	MMD0239		Meg Dumont,	21-Feb-1984  10:11
!		Change calls to EXE$CHKxxxACCES to kernel mode calls.
!
!	V03-001	MMD0150		Meg Dumont,	26-Apr-1983  8:51
!		Change reference to 80 to the symbol ANSI_LBLSZ. Change
!		reference to 240 to the symbol SCRATCH_OFFSET.
!
!	V02-007	DMW00032	David Micahel Walp	18-Aug-1981
!		Looked at MVL Override Bit when override option is used
!
!	V02-006	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!	A0005	MCN0003		Maria del C. Nasr	15-Oct-1979   9:29
!		Add HDR3 processing
!
!	A0004	MCN0001		Maria del C. Nasr	13-Sep-79   11:05
!		Corrected bug in "create if" function
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    CHECK_ACCESS	: COMMON_CALL NOVALUE,		! check access
    CHECK_FILE_ACC	: COMMON_CALL NOVALUE,	! check access to file
    CHECK_WRITE_ACCESS	: COMMON_CALL,		! check users' write access
    CHECK_READ_ACCESS	: COMMON_CALL,		! check users' write access
    SET_FILE_ACCESS	: COMMON_CALL NOVALUE,	! Set VCB file access
    RECALC_ST_REC	: COMMON_CALL NOVALUE;	! recalculate start record

    LINKAGE
	CHECK_PROT 	= JSB (REGISTER = 4, REGISTER = 5) :
				NOPRESERVE (1, 2, 3);

    EXTERNAL ROUTINE
	EXE$CHKWRTACCES	: ADDRESSING_MODE (ABSOLUTE) CHECK_PROT,
	EXE$CHKRDACCES	: ADDRESSING_MODE (ABSOLUTE) CHECK_PROT,
	GET_RECORD;				! get current record tape is reading

    EXTERNAL
	CURRENT_UCB	: REF BBLOCK,		! address of current ucb
	IO_PACKET	: REF BBLOCK,		! address of current io request packet
	USER_STATUS	: WORD;		! address of status to return to user


GLOBAL ROUTINE CHECK_ACCESS (ACCESS_TYPE) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine checks that the access requested is allowed on the
!	volume set.
!
! CALLING SEQUENCE:
!	CHECK_ACCESS(ARG1)
!
! INPUT PARAMETERS:
!	ARG1 - access requested (0=read,1=write)
!
! IMPLICIT INPUTS:
!	IO_PACKET	- address of current i/o packet
!	CURRENT_UCB	- address of current ucb
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
! USER ERROR:
!	SS$_WRITLCK - software write lock
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	STATUS;					! io status

    ! If file is software write locked and the user requests write privileges,
    ! deny privilege

    IF .ACCESS_TYPE
	AND
	.BBLOCK[CURRENT_UCB[UCB$L_DEVCHAR], DEV$V_SWL]
    THEN
	ERR_EXIT(SS$_WRITLCK);

    ! If the VCB$V_FIL_ACCESS is set then the user has complete
    ! access to this file, regardless of how the VMS protection is
    ! set. Else check the users read adn write access to the file.

    IF NOT .CURRENT_VCB[VCB$V_FIL_ACCESS]
	THEN
	BEGIN
	    IF .ACCESS_TYPE
	    THEN
		STATUS = KERNEL_CALL (CHECK_WRITE_ACCESS)
	    ELSE
		STATUS = KERNEL_CALL (CHECK_READ_ACCESS);

	    IF NOT .STATUS
	    THEN
	    BEGIN
		USER_STATUS = .STATUS<0, 16>;
		ERR_EXIT();
	    END;
	END;

    END;					! end of routine


ROUTINE CHECK_WRITE_ACCESS : COMMON_CALL =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine calls the system routine to check users write access.
!
! CALLING SEQUENCE:
!	CHECK_WRITE_ACCESS (), called in kernel mode
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CURRENT_UCB - address of tapes ucb
!	IO_PACKET - address of current io request
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	STATUS from call
!
! SIDE EFFECTS:
!
! USER ERROR:
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	PCB		: REF BBLOCK;	! address of user process control block

    EXTERNAL
	SCH$GL_PCBVEC	: REF VECTOR ADDRESSING_MODE (ABSOLUTE);
					! system PCB vector

	PCB = .SCH$GL_PCBVEC[.(IO_PACKET[IRP$L_PID])<0,16>];

	RETURN EXE$CHKWRTACCES(.PCB, .CURRENT_UCB);
    END;

ROUTINE CHECK_READ_ACCESS : COMMON_CALL =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine returns users' read access to the file.  
!
! CALLING SEQUENCE:
!	CHECK_READ_ACCESS(), called in kernel mode
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CURRENT_UCB - address of tapes ucb
!	IO_PACKET - address of current io request
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	STATUS from call
!
! SIDE EFFECTS:
!
! USER ERROR:
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	PCB		: REF BBLOCK;	! address of user process control block

    EXTERNAL
	SCH$GL_PCBVEC	: REF VECTOR ADDRESSING_MODE (ABSOLUTE);
					! system PCB vector

	PCB = .SCH$GL_PCBVEC[.(IO_PACKET[IRP$L_PID])<0,16>];

	RETURN EXE$CHKRDACCES(.PCB, .CURRENT_UCB);
    END;



GLOBAL ROUTINE CHECK_FILE_ACC (ACCESS_CALL) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine checks access to the file.  If accessibility code is
!	not blank and not overridden then access is denied.  If writing to the file the file
!	must be expired.
!
! CALLING SEQUENCE:
!	CHECK_FILE_ACC(ARG1)
!
! INPUT PARAMETERS:
!	0 - If being called from MTA_CREATE
!	1 - If called from MTA_ACCESS
!
! IMPLICIT INPUTS:
!	LOCAL_FIB - copy of user's file information block
!	CURRENT_VCB - address of current control block
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	if append, tape is positioned to end of data
!
! USER ERROR:
!	SS$_FILACCERR - file access byte non-blank
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL ROUTINE
	EXPIRED		: COMMON_CALL,		! check that file has expired
	LIB$CVT_DTB	: ADDRESSING_MODE (ABSOLUTE),
						! convert decimal to binary
	SPACE_EOF	: COMMON_CALL,		! space to trailers
	SPACE_TM	: COMMON_CALL,		! space given number of
						!   tape marks
	READ_BLOCK	: COMMON_CALL;		! read on mag tape data block

    LOCAL
	ACCESS,					! users' access to the file
	BLOCK_COUNT,				! block count of file to
						!  appended to
	CURRENT_RECORD,				! record  tape drive is reading
	FIB		: REF BBLOCK,		! address of local fib
	LABELADDR	: REF BBLOCK,		! address of label
	STATUS,
	TM,					! number of tm's
	ORB		: REF BBLOCK,		! ORB address
	MVL		: REF BBLOCK,
	MVL_ENTRY	: REF BBLOCKVECTOR [,MVL$K_LENGTH];
						! pointer to the MVL_ENTRY

    EXTERNAL
	HDR1		: REF BBLOCK,		! address of HDR1(EOF1) label
	LOCAL_FIB	: BBLOCK;		! copy of user's fib

    ! setup pointer to fib

    FIB = LOCAL_FIB;

    ! get a handle on the MVL entry

    MVL = .CURRENT_VCB[VCB$L_MVL];
    MVL_ENTRY = (.CURRENT_VCB [ VCB$L_MVL ]) +  MVL$K_FIXLEN;

   ! Call the accessibility system service to check the accessibility char
   ! on the HDR1 label.
   ! First keep the record that the UCB is reading. The accessibility 
   ! routine can not move the tape from under us! Thus we will compare
   ! this to the field after the call and if the tape was moved we punt
   ! the operation. 

   ORB = .CURRENT_UCB[UCB$L_ORB];
   CURRENT_RECORD = KERNEL_CALL(GET_RECORD, .CURRENT_UCB);
   ACCESS = $MTACCESS(LBLNAM = .HDR1,
		 UIC = .ORB[ORB$L_OWNER],
		 STD_VERSION = .MVL[MVL$B_STDVER],
		 ACCESS_CHAR = 0,
		 ACCESS_SPEC = MTA$K_NOCHAR,
		 TYPE = MTA$K_INHDR1);

   STATUS = KERNEL_CALL(GET_RECORD, .CURRENT_UCB);
   IF .CURRENT_RECORD NEQ .STATUS
	THEN ERR_EXIT(SS$_TAPEPOSLOST);

   IF .ACCESS EQL SS$_FILACCERR
	THEN
	BEGIN
	   IF NOT (     .CURRENT_VCB[VCB$V_OVRACC]
		   AND .MVL_ENTRY[ (.CURRENT_VCB[VCB$W_RVN]), MVL$V_OVERIDE ])
		THEN ERR_EXIT(SS$_FILACCERR);
	   ACCESS = SS$_NORMAL;
	END;

   IF .ACCESS EQL SS$_NOVOLACC OR .ACCESS EQL SS$_NOFILACC
	THEN ERR_EXIT(.ACCESS);

   IF NOT .ACCESS THEN KERNEL_CALL(SET_FILE_ACCESS);

   ! now treat append case uniquely

   IF ( NOT .FIB[FIB$V_UPDATE])
	AND
	.FIB[FIB$V_WRITE]
	AND
	(.ACCESS_CALL)
	THEN
	BEGIN					! append case
	   SPACE_EOF();				! left at absolute end of file

	   IF NOT LIB$CVT_DTB(EO1$S_BLOCKCNT, HDR1[EO1$T_BLOCKCNT], BLOCK_COUNT)
		THEN
		    ERR_EXIT(SS$_BLOCKCNTERR);

	   ! read header of next file

	   LABELADDR = .HDR1 + SCRATCH_OFFSET;	! read into scratch area

	   IF NOT READ_BLOCK(.LABELADDR, ANSI_LBLSZ)
		THEN
		BEGIN				! at logical end of volume set
		    SPACE_TM(-3);	! double tape mark is logical end of tape
		    KERNEL_CALL(RECALC_ST_REC, .BLOCK_COUNT);
		    RETURN;
		END;

  	  IF .LABELADDR[HD1$L_HD1LID] NEQ 'HDR1'
		THEN ERR_EXIT(SS$_TAPEPOSLOST);

	  ! going to overlay file

	  IF NOT EXPIRED(LABELADDR[HD1$T_EXPIREDT])
		THEN ERR_EXIT(SS$_FILNOTEXP);

  	  SPACE_TM(-2);
	  KERNEL_CALL(RECALC_ST_REC, .BLOCK_COUNT);
	  RETURN;

	  END;					! end of append case

    ! if about to write current file check expiration

    IF .FIB[FIB$V_WRITE]
    THEN

	IF NOT EXPIRED(HDR1[HD1$T_EXPIREDT])
	THEN
	    ERR_EXIT(SS$_FILNOTEXP);

    END;					! end of routine


ROUTINE SET_FILE_ACCESS	: COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine updates the VCB file access bit to say that the user
!	has complete access to the file.
!
! CALLING SEQUENCE:
!	SET_FILE_ACCESS called in kernel mode
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CURRENT_VCB - address of current volume control block
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	VCB FIL_ACCESS bit is set.
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
! USER ERRORS:
!	None
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

	CURRENT_VCB[VCB$V_FIL_ACCESS] = 1; 
    END;					! end of routine



ROUTINE RECALC_ST_REC (BLOCK_COUNT) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine updates the start record count to include those
!	records in the file that were previously written.
!
! CALLING SEQUENCE:
!	RECALC_ST_REC(ARG1), called in kernel mode
!
! INPUT PARAMETERS:
!	ARG1 - number of blocks previously written
!
! IMPLICIT INPUTS:
!	CURRENT_VCB - address of current volume control block
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	Start record number updated to reflect previously written records
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	None
!
! USER ERRORS:
!	None
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    CURRENT_VCB[VCB$L_ST_RECORD] = .CURRENT_VCB[VCB$L_ST_RECORD] -
    .BLOCK_COUNT;
    END;					! end of routine
END

ELUDOM
