%TITLE 'Overall DSR process control'
MODULE runoff (	IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL    = general %(,
					    NONEXTERNAL = long_relative)%)]
		) =
BEGIN						!Start of module

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	Main program.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday 	CREATION DATE:	April, 1978
!

!
! MODIFIED BY:
!
!	040	REM00040	Ray Marshall	25-Mar-1984
!		Fixed the call to LIB$FIND_FILE.  The new user flags parameter
!		  must be passed by reference, not value.
!
!	039	REM00039	Ray Marshall	16-Feb -> 15-Mar-1984
!		Added routine INPUT_FILE_SCAN to make appropriate calls to
!		  LIB$FIND_FILE.  This is code to support directory search
!		  string logic implemented in VMS V4, and as such, is
!		  conditionalized to only compile for VMS and will only
!		  excute on a V4 or later system.  It will only be compiled
!		  into BLISS32 implementations.
!
!	038	KFA00038	Ken Alden	12-Aug-1983
!		Fixed a /auto bug that forces a second run if any crefs
!		  were unresolved (usu. a forward reference).
!
!	037	REM00037	Ray Marshall	9-Aug-1983
!		Modified the init-file logic to support DSRPLUS.INIT and
!		  RUNOFF.INIT in the TOPS-20 implementation of DSRPLUS
!		  (replacing the logicals used in the VMS implementation).
!
!	036	REM00036	Ray Marshall	22-Jul-1983
!		Defined TTYSET and ENAPSI as NOVALUE to match the way they
!		  are coded.
!		Moved GCA_PASS_COUNT out of being BLISS32 specific because
!		  it is looked at in the routine OUTCREF which is part of all
!		  implementations of DSRPLUS.
!
!	035	KFA00035	Ken Alden	15-Jul-1983
!		Tweaked the /auto logic to prevent a premature MEM file.
!
!	034	KFA00034	Ken Alden	28-Jun-1983
!		Added formal parameter to the SETQUICK call.
!
!	033	KFA00033	Ken Alden 	27-Jun-1983
!		Added more logic to the setquick check using the cref_errcnt
!		  as an additional check item.
!
!	032	KFA00032	Ken Alden	24-Jun-1983
!		This edit change did exactly what 31 was supposed to do.
!		  The big problem was the gca_black_box was getting turned
!		  off after the first run, from RINIT.  Now, gca_black_box
!		  is not check, the rno_cmd[automatic] is.
!
!	031	KAD00031	Keith Dawson	7-Jun-1983
!		Minor tweak to the foregoing: make sure no .MEM is gen-
!		  erated (QUICK is set) on reruns caused because a cross-
!		  reference changed.
!
!	030	KAD00030	Keith Dawson	27-May-1983
!		For DSRPLUS/AUTO, check number of iterations for Cref oscil-
!		  lation; quit after the 4th pass.
!
!	029	KAD00029	Keith Dawson	17-May-1983
!		For FLIP, add TCXINI record to initialization records
!		  written to the .BFL file.
!
!	028	REM00028	Ray Marshall	10-May-1983
!		RNFXFL has been removed, so the reference herein used to check
!		  for parallelism of MSGTXT.REQ (via RNFERM.BLI) with
!		  DSRMSG.MSG (or DPLMSG.MSG for DSRPLUS) has been changed to
!		  refer to RNFWFR.
!
!	027	KAD00027	Keith Dawson	3-May-1983
!		Fix bug: if /AUTO, any errors in Pass 1 would stop processing.
!
!	026	KAD00026	Keith Dawson	19-Apr-1983
!		Fixed bug whereby the results of /DEVICE were not getting
!		  picked up in DSR.
!
!	025	KAD00025	Keith Dawson	5-Apr-1983
!		Full support for /CROSS and /AUTO.
!
!	024	KAD00024	Keith Dawson	23-March-1983
!		Changed GCA_FLIP bit to (.gca_op_dev EQL op_dev_flip).
!
!	023	REM00023	Ray Marshall	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!--

!
! TABLE OF CONTENTS:
!

REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

FORWARD ROUTINE
    runoff,
    grab_resultant,
%IF DSRPLUS %THEN
    init_files : NOVALUE,
%FI
%IF %BLISS(BLISS32) %THEN
    input_file_scan,
%FI
    input_loop;

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:STARLET';

undeclare %quote $DESCRIPTOR;
!undeclare %quote RMS$_FNF;
!undeclare %quote RMS$_NORMAL;

LIBRARY 'NXPORT:XPORT';			! XPORT Library

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
! This macro returns "1" if RUNOFF is running on TOPS-10 or TOPS-20.
! If we're running on VAX/VMS, the specified return code is used,
! with bit 28 set to inhibit generation of an error message.
! On other systems the specified code is returned without modification.
!
MACRO
    creturn (return_code) =
	%IF %BLISS (BLISS36) %THEN
	    RETURN 1
	%ELSE
	    RETURN return_code
	       + %IF %BLISS(BLISS32) %THEN 1^28	! Set inhibit message bit
		 %ELSE 0
		 %FI
	%FI
				%,	!  End of macro CRETURN

    close_i_o_and_return (delete, return_value) =
	BEGIN
	clh (clh_close_input);
	! Close output file unless quick processing (no output file opened).
	IF  NOT .rno_cmd [rno$v_quick]  THEN
	    ! Delete output file if user requested.
	    BEGIN
	    IF delete
	    THEN  clh (clh_close_del_out)
	    ELSE  clh (clh_close_out);
	    END;
	creturn (return_value);
	END
				%;	!  End of macro CLOSE_I_O_AND_RETURN
!
! OWN STORAGE:
!
OWN
%IF DSRPLUS %THEN
    init_file_error,		! Error flag for opening DSR[PLUS]$INIT
%FI
    file_error,			! Error flag for main file processing
    tempob : $XPO_IOB (),	! IOB for output file
    tempib : $XPO_IOB ();	! IOB for primary input file

!
! EXTERNAL REFERENCES:
!
EXTERNAL
    rneiob : REF $XPO_IOB (),
    rnaiob : REF $XPO_IOB (),
    rnoiob : REF $XPO_IOB (),
    tteiob : $XPO_IOB (),
    ffname : $STR_DESCRIPTOR (CLASS = dynamic),	! Failing file's name
    semcod,					! Secondary Error Message CODe
    gca  : gca_definition,
    ira  : fixed_string,
    irac : irac_definition,
    fs01 : fixed_string,
    lffctx,			! LIB$FIND_FILE context cell
    ipftyp,			! InPut File TYPe index
    ipftop : VECTOR,		! InPut File Type OPtions list
    khar;


EXTERNAL ROUTINE
    clh,	doopts,		erm,		erme,
    erms,	pus,		rinit,		rterm

%IF %BLISS (BLISS32) %THEN  ,

%IF DSRPLUS %THEN
    setquick,
%FI
    LIB$FIND_FILE		! NEEDED to resolve search strings on VMS!
%FI

%IF (%BLISS(BLISS36) AND DSRPLUS)  %THEN    ,
    enapsi : NOVALUE,		! Enable CTRL/C PSI interrupt.
    ttyset : NOVALUE		! Set (save) terminal characteristics.
%FI		    ;

EXTERNAL LITERAL
    rnfcoi,	! F - Can't open input file "%S"
    rnfcoo,	! F - Can't open output file "%S"
    rnffab,	! W - File aborted
    rnfrtl,	! W - Input record too long: truncated "%S"
    rnfure	! W - Unrecoverable error processing record %C on page %I of input file "%F"

%IF %BLISS(BLISS32) %THEN	,
	! Special error messages used to detect and signal bad error message
	! pointers:
    rnfwfr,	! Last error defined by the message utility.
    last_rnf,	! Last error defined by RNFERM and MSGTXT.REQ
    rnfaaa,	! Message used to signal the inequality of the previous two

%IF dsrplus %THEN
    rnfoft,	! File type ".RNO" not found.  Processing file "%F"
%FI
!    RMS$_FNF,	! VMS RMS error code:  File Not Found
!    RMS$_NORMAL,! VMS RMS return code:  Normal return
%FI
    ipftct;	! Literal defining the lengths of IPFTOP and OPFTOP.


GLOBAL ROUTINE runoff (rno_cmd) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the main program of RUNOFF.  The basic processing involves
!	calling CLH to open and close files, and read records that get passed
!	to PUS.  RINIT and RTERM are only marginally related to the formatting
!	processing, being used for initialization and termination.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN					!Start routine RUNOFF

    MAP
	rno_cmd : REF $rno_cmd;
    LOCAL
%IF %BLISS(BLISS32) %THEN
	status,			! Return value from INPUT_FILE_SCAN routine
	input_file_name	:	! Receiving string descriptor
		$STR_DESCRIPTOR (CLASS = dynamic),
%FI
	clh_result,		! Result of CLH operation
	keep_reading,		! Controls input-reading loop
    	hold_cref_errcnt,	! Remembers gca_cref_errcnt over RINIT.
	hold_cref_changed;	! Remembers gca_cref_changed over RINIT

%IF DSRPLUS %THEN
    !+
    ! Initialize automatic variables
    !-
    gca_pass_count = 1;			! Current pass over input file
%IF %BLISS (BLISS32) %THEN
    gca_rerun_count = 0;		! Number of times input file must be reprocessed
    gca_cref_errcnt = 0;		! No cross-references have been unresolved yet.
    gca_cref_changed = false;		! No cross-references have changed.

    WHILE true DO
	BEGIN					! Start of automatic-processing loop
	!
	! Reprocess the input file until exit condition is met
	!
	hold_cref_errcnt = .gca_cref_errcnt;
	hold_cref_changed = .gca_cref_changed;
%FI  %FI
    rneiob = tempib;
    rnaiob = tempob;


    $XPO_IOB_INIT (IOB = .rnaiob, FILE_SPEC = rno_cmd [rno$t_output]);

    rinit ();				! Initialize most everything.

%IF %BLISS(BLISS32) %THEN
    !+
    ! Now we must see if the VMS message utility using DSRMSG.MSG as input has
    ! defined the same number of messages as RNFERM.BLI has put into the message
    ! vector using MSGTXT.REQ as input.  This is done by verifying that a global
    ! defined in RNFERM.BLI (LAST_RNF) is equal to the last message code defined
    ! by the message utility (RNFWFR).  If not, signal the FATAL error and exit!
    !-
    IF rnfwfr NEQ last_rnf
    THEN
	BEGIN
	erm (rnfaaa, 0, 0);
	creturn (4)
	END;
%FI

%IF %BLISS(BLISS32) %THEN
    $STR_DESC_INIT( DESCRIPTOR = input_file_name
		   ,CLASS = DYNAMIC);
					! Locate an input file
    IF (status = input_file_scan (.rno_cmd, input_file_name)) EQL 4
	THEN creturn(.status)
    ELSE
	$XPO_IOB_INIT (IOB = .rneiob, FILE_SPEC = input_file_name);
%ELSE
    $XPO_IOB_INIT (IOB = .rneiob, FILE_SPEC = rno_cmd [rno$t_input]);
%FI
    !
    ! Now proceed with normal processing.
    !

    clh_result = clh (clh_open_input);	! Try to open input file.

    IF  .clh_result NEQ clh_normal
    THEN
	BEGIN					! Start can't open input
	LOCAL
	    spec_length,
	    spec_ptr;

	spec_length = .ffname [str$h_length];
	spec_ptr    = .ffname [str$a_pointer];
	!
	erme (rnfcoi, .spec_ptr, .spec_length, .semcod);

	creturn (4)
	END					! End can't open input
    ELSE
    ! Did user specify quick processing? If so, don't open an output file.
	IF  .rno_cmd [rno$v_quick]
	THEN
	    clh_result = clh_normal
	ELSE
	    BEGIN
	    !
	    ! Pick up command-line information about /DEVICE now,
	    ! so that output file defaults can be set up properly.
	    !
	    gca_op_dev  = .rno_cmd [rno$v_4_out_format]; ! Pick up device type.
	    gca_s_output = .rno_cmd [rno$v_s_output];	 ! See if user said /OUTPUT=file.
	    clh_result   = clh (clh_open_out);	! Open output file.

%IF (%BLISS(BLISS36) AND DSRPLUS)  %THEN
	    !+
	    ! The following call modifies the Control Character Output
	    ! Control (CCOC) words to allow escape sequences to be sent to
	    ! the terminal without translation, and modifies the JFN mode
	    ! word to prevent TOPS-20 from wrapping output lines at the
	    ! terminal width.
	    !-
	    IF  (.gca_op_dev EQL op_dev_vt100)	! User said /DEC=VT100, and did
		AND NOT .gca_s_output		! not say /OUTPUT=name.
	    THEN
		ttyset ();			! Set terminal characteristics.
	    !
	    ! Enable the PSI CTRL/C interrupt.
	    !
	    enapsi ();
%FI
	    END;

    IF  .clh_result NEQ clh_normal
    THEN
	BEGIN					! Start can't open output
	LOCAL
	    spec_length,
	    spec_ptr;

	spec_length = .ffname [STR$H_LENGTH];
	spec_ptr    = .ffname [STR$A_POINTER];
	!
	! Can't open output file.
	!
	erme (rnfcoo, .spec_ptr, .spec_length, .semcod);
	clh (clh_close_input);
	creturn (4)
	END					! End can't open output
    ELSE
	BEGIN					! Start normal file processing
%IF FLIP  %THEN
	IF  (.gca_op_dev EQL op_dev_flip)	! User said /DEVICE=FLIP
	THEN
	    BEGIN
	    LOCAL
		init_record : $flip_init,
		tcxini_record : $flip_tcxini;

	! Write FLIP initialization record.
	!
	    init_record [init_code]     = flip$k_init;
	    init_record [init_contents] = .rno_cmd [rno$v_intermediate];
	    init_record [init_level]    = flip$k_version;
	    rno_cmd [rno$v_intermediate]    = 1;
	    $XPO_PUT (	IOB    = .rnoiob,
			STRING = (flip$k_init_size,
			CH$PTR (init_record)));

	! Write FLIP index-information initialization record.
	!
	    tcxini_record[tcxini_code] = flip$k_tcxini;
	    tcxini_record[tcxini_header] = index_format;
	    $XPO_PUT (	IOB	= .rnoiob,
			STRING	= (flip$k_tcxini_size,
			CH$PTR (tcxini_record)));
	    END;
%FI

%IF (%BLISS (BLISS32) AND DSRPLUS) %THEN
	    ! This logic makes sure we don't create a .MEM file for an
	    ! intermediate run of /AUTO -- if the reason we need one more
	    ! run is because a cross-reference changed.
	    !
	    IF	.rno_cmd [rno$v_automatic]! gca_black_box  ! Are we doing /AUTO?
		AND
    		((.hold_cref_changed EQL true) OR
    		((.hold_cref_errcnt GTR 0) AND (.gca_pass_count EQL 2)))  ! One changed or was unresolved on last run.
		AND .gca_pass_count NEQ 4 ! Last chance, oscillating cref's.
	    THEN
		setquick (true);
    	!
    	! The user may have had some forward crefs.
    	! We give him the benefit of the doubt and run plus again.
    	!
    	IF (.hold_cref_errcnt GTR 0) AND (.gca_pass_count EQL 2)
    	THEN
    	    gca_rerun_count = .gca_rerun_count + 1;
%FI
	IF  NOT doopts (.rno_cmd)
	THEN
	    !
	    ! Close and delete output file; return 4.
	    close_i_o_and_return (true, 4)
	ELSE
	    BEGIN
	    !+
	    ! If the output file is the terminal, don't redirect error messages.  Otherwise, direct messages as
	    ! specified on the /MESSAGES switch.  The effect is that the user can determine where error messages
	    ! go only if the output file is not the terminal; i.e., you cannot suppress error messages totally,
	    ! but you can prevent them from going into the output file.
	    !-
	    IF  NOT (.rnoiob [iob$v_terminal] AND
		.tteiob [iob$v_terminal])
	    THEN
		gca_err_dir =.gca_cmd_msg;
%IF DSRPLUS %THEN
	    ! Attempt to open initialization files DSR$INIT and/or
	    ! DSRPLUS$INIT.
	    !
	    init_files (.rno_cmd);
%FI
	    END;

!+
! Here is RUNOFF's main processing loop.
!-
	keep_reading = true;
	file_error = false;

	WHILE .keep_reading DO
	    keep_reading = input_loop (file_error);
	!
	! Check status of file errors, and finish up accordingly.
	!
	IF NOT .file_error
	THEN
	    BEGIN				! Start normal termination

	    rterm ();
	    !
%IF (%BLISS (BLISS32) AND DSRPLUS) %THEN
	    IF .gca_pass_count LEQ .gca_rerun_count
	    THEN
		BEGIN
		! Doing /AUTOMATIC processing and encountered either cross
		! references or a .DO CONTENTS that required more than one
		! pass over the input file.
		!
		! Quit now if we have processed the input stream 4 times.
		! In this case, we assume that an oscillating cross-refer-
		! ence makes it impossible for us to resolve the file
		! automatically.
		!
		IF .gca_pass_count EQL 4
		THEN
		    close_i_o_and_return (false, 2)
		ELSE
		    ! Bump the pass counter and close the input file (the
		    ! output file has already been closed).
		    !
		    BEGIN
		    gca_pass_count = .gca_pass_count + 1;
		    clh (clh_close_input);
		    END;
		END
	    ELSE
		! Either /AUTOMATIC was not asserted or all required passes
		! over the input file are complete. In any case, close the
		! input and output files and return the appropriate status.
%FI
		! Close output file (do not delete); return either success
		! or failure.
		BEGIN
		IF  .gca_fehler
		THEN
		    close_i_o_and_return (false, 2)
		ELSE
		    close_i_o_and_return (false, 1);
		END;

	    END					! End normal termination
	ELSE
	    ! Close (don't delete) output file; return 4 (fatal condition).
	    close_i_o_and_return (false, 4);

	END;					! End normal file processing

%IF (%BLISS (BLISS32) AND DSRPLUS) %THEN
	END;					! End of automatic-processing loop
    true	!avoid compiler complaint
%FI
    END;				! End of RUNOFF

GLOBAL ROUTINE grab_resultant (
		 function_code		! For failure action routine
		,primary_code		! 1st completion code
		,secondary_code		! 2nd completion code
		,iob : REF $XPO_IOB ()	! Address of IOB
				) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Moves resultant filename string from the IOB to FFNAME so it
!	can be picked up and used when the error is signaled.
!
! FORMAL PARAMETERS:
!
!	As defined by XPORT.  See above ROUTINE declaration for the list and
!	meanings of the current formal parameters.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:
!
!	FFNAME	String descriptor defined in GLBDAT.BLI that points to the
!		resultant filename string from the IOB pointed to by the
!		fourth parameter passed to this routine.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The PRIMARY_CODE passed to this routine will also be used as its
!	completion code.
!
! SIDE EFFECTS:		None
!--

    BEGIN					! Start grab_resultant
	$STR_DESC_INIT (DESCRIPTOR = ffname, CLASS = dynamic);
	!
	! Pick of the name and length of the file spec.
	!
	$STR_COPY ( STRING = iob[iob$t_resultant] ,TARGET = ffname );
	semcod = .primary_code;		! Pick up and save the error code
					! explaining why this file couldn't
					! be opened.
	.primary_code
    END;				! End of GRAB_RESULTANT
%IF DSRPLUS  %THEN

ROUTINE init_files (rno_cmd) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	INIT_FILES processes either or both of the initialization files
!	that may be present -- DSR$INIT and DSRPLUS$INIT. It attempts to
!	open the files in order and, if found, takes input from them before
!	the main input file is read.
!
! FORMAL PARAMETERS:
!
!	RNO_CMD is the address of the command-line block, passed down from
!	RUNOFF.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN					! Start of init_files
    MAP
	rno_cmd : REF $rno_cmd;
    LOCAL
	clh_result,
	dsrplus_init,
	keep_reading,
	ptr;

    dsrplus_init = false;
    !
    ! Save the original input file.
    !
    clh (clh_push);
    !
    ! Try to open logical file DSRPLUS$INIT. CLH expects to find the filespec in fs01.
    !
    ptr = CH$PTR (UPLIT (%IF %BLISS (BLISS32) %THEN 'DSRPLUS$INIT'
			 %ELSE			    'DSRPLUS.INIT' %FI ));
    fs_init  (fs01);
    !
    INCR i FROM 1 TO 12 DO
	fs_wchar (fs01, CH$RCHAR_A (ptr));
    !
    clh_result = clh (clh_open_init);
    !
    ! If CLH can open file, save it and try to get next one.
    !
    IF  .clh_result EQL clh_normal
    THEN
	BEGIN
	clh (clh_push);
	dsrplus_init = true;
	END;
    !
    ! Try to open logical file DSR$INIT. CLH expects to find the filespec in fs01.
    !
    ptr = CH$PTR (UPLIT (%IF %BLISS (BLISS32) %THEN 'DSR$INIT'
			 %ELSE			    'RUNOFF.INIT' %FI ));
    !
    fs_init  (fs01);
    INCR i FROM 1 TO 8 DO
	fs_wchar (fs01, CH$RCHAR_A (ptr));
    !
    clh_result = clh (clh_open_init);
    !
    ! If CLH can open file, start reading from it. Otherwise, try next one.
    !
    IF  .clh_result EQL clh_normal
    THEN
	BEGIN					! Start processing DSR$INIT file.

	keep_reading = true;
	init_file_error = false;

	WHILE .keep_reading DO
	    keep_reading = input_loop (init_file_error);
	!
	! Close initialization file. (Same as closing .REQUIRE file.)
	!
	clh (clh_close_req);
	!
	! If an error occurred, recover and close the original source file
	! and the output "file".
	!
	IF  .init_file_error
	THEN
	    BEGIN				! Start pop DSRPLUS$INIT
	    !
	    ! Pop DSRPLUS$INIT if it was pushed.
	    !
	    IF  .dsrplus_init THEN
		clh (clh_pop);
	    !
	    clh (clh_pop);		  ! Recover and close original source file.
	    !
	    ! Close (don't delete) output file; return 4.
	    close_i_o_and_return (false, 4);
	    !
	    END;				! End pop DSRPLUS$INIT

	END;					! End processing DSR$INIT file

    IF  .dsrplus_init
    THEN
	BEGIN					! Start processing DSRPLUS$INIT file
	clh (clh_pop);

	keep_reading = true;
	init_file_error = false;

	WHILE .keep_reading DO
	    keep_reading = input_loop (init_file_error);
	!
	! Close initialization file.
	!
	clh (clh_close_req);
	!
	! If an error occurred, recover and close original source file
	! and output destination.
	!
	IF  .init_file_error
	THEN
	    BEGIN
	    !
	    clh (clh_pop);		  ! Recover and close original source file.
	    !
	    ! Close (don't delete) output file; return 4.
	    close_i_o_and_return (false, 4);
	    !
	    END;

	END;					! End processing DSRPLUS$INIT file
    !
    ! Recover original source file.
    !
    clh (clh_pop);

    END;				! End of INIT_FILES
%FI

ROUTINE input_loop (error_condition) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	INPUT_LOOP reads and processes a single record from the input file.
!
! FORMAL PARAMETERS:
!
!	ERROR_CONDITION is set to TRUE before return if a file-processing
!	error occurred.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The routine returns TRUE while there is more input to read; it
!	returns FALSE when end-of-file is reached, and also when a file
!	error occurs. (in this latter case, the formal ERROR_CONDITION is
!	also set.)
!
! SIDE EFFECTS:		None
!--

    BEGIN					! Start of input_loop
    LOCAL
	clh_result;

    clh_result = clh (clh_read_input);

    SELECT .clh_result OF
	SET

	[clh_normal] :		! Something was read successfully.
	    !
	    BEGIN
	    kcns ();
	    pus  (true);
	    END;

	[clh_end_file] :	! End of initialization file.
	    !
	    RETURN false;

	[clh_too_long] :	! Record would not fit in input area (ira).
	    !
	    BEGIN
	    erms (rnfrtl, .fs_start (ira), .fs_length (ira));
	    kcns ();
	    pus  ();
	    END;

	[otherwise] :		! Unrecoverable error. Inform user.
	    !
	    BEGIN
	    erm (rnfure, 0, 0);
	    erm (rnffab, 0, 0);
	    .error_condition = true;
	    RETURN false;
	    END;

	TES;

    RETURN true;

    END;				! End of INPUT_LOOP


%IF %BLISS(BLISS32) %THEN
ROUTINE input_file_scan ( rno_cmd
			 ,input_file_name : $STR_DESCRIPTOR (CLASS = dynamic)
			 ) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine makes the needed calls to the VMS routine LIB$FIND_FILE.
!	Also, for DSRPLUS, it does the file type resolution.  What this means
!	is that if the user didn't specify an extension and the first FIND_FILE
!	doesn't locate a file with a .RN_ extension, then we will try our own
!	list of extensions starting with .RNO.  Data structure IPFTOP contains
!	the list of known extensions in the order in which we will look for
!	them.  But, for the sake of documentation, here is that list:
!
!		Input file	Maps to this output
!		filetype	file filetype
!
!		 .RNO		     .MEM
!		 .RTB		     .MET	(DSRPLUS only)
!		 .RNT		     .MEC
!		 .RNX		     .MEX
!		 .RND		     .DOC
!		 .RNH		     .HLP
!		 .RNB		     .BLB
!		 .RNC		     .CCO
!		 .RNE		     .ERR
!		 .RNL		     .PLM
!		 .RNM		     .MAN
!		 .RNP		     .OPR
!		 .RNS		     .STD
!		 .***		     Wild card	(DSRPLUS only)
!
!	Note that this routine is conditionalized to be compiled only if
!	the VMS implementation is being built.  As for the TOPS-20 implementa-
!	tion, the input and output file extensions are defaulted within the
!	command line interface in RNOT20.  However, this will not take care
!	of the TOPS-10 (or any future PDP-11) implementation.
!
! FORMAL PARAMETERS:
!
!	RNO_CMD		Data structure from the CLI.  This is where we will
!			get the filespec string that the user entered.
!
!	INPUT_FILE_NAME	Address of a string descriptor into which we will
!			put the filespec resulting from our efforts.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
!
!	1 = Normal return
!	4 = Fatal return -- file not found
!
! SIDE EFFECTS:		None
!--

    BEGIN				! Start of input_loop
    MAP
	rno_cmd : REF $rno_cmd;

    BIND
	passed_file_spec = rno_cmd [rno$t_input] : $STR_DESCRIPTOR(),
	ip_file_spec = .input_file_name : $STR_DESCRIPTOR();

    LOCAL
	rms_status,
	rms_stv_adr : INITIAL(-1),
	rms_user_flags : INITIAL(2),
	default_file_specification : $STR_DESCRIPTOR (CLASS = dynamic);

    default_file_specification [str$b_dtype] = str$k_dtype_t;	! ASCII text (8-bit)
    default_file_specification [str$b_class] = str$k_class_f;	! Fixed (Scalar) String Descriptor
    default_file_specification [STR$H_LENGTH] = 4;
    default_file_specification [STR$A_POINTER] = .ipftop[0];

    ipftyp = -1;	! To indicate that we haven't mapped against IPFTOP

    rms_status = LIB$FIND_FILE ( passed_file_spec
				,.input_file_name
				,lffctx
				,default_file_specification
				,0		! No related file specification
				,rms_stv_adr	! Secondary RMS error code
				,rms_user_flags	! User flags
				);

%IF dsrplus %THEN
    IF .rms_status EQL RMS$_FNF				! If a file wasn't
		   AND					!   found and a
    CH$FAIL( CH$FIND_CH( .passed_file_spec[str$h_length] !  filetype was not
			,.passed_file_spec[str$a_pointer] ! specified,
			,%C'.' ) )
    THEN
	BEGIN			! We will try our own default extension(s).

!!!	lffctx = 0;	! To start searching all over again.

	! Search all input filetypes until we find one:

	INCR ipftyp FROM 0 TO (ipftct - 1) DO
	    BEGIN

	    ! Point to the currently indexed input filetype option.  The
	    ! length field has already been initialized to 4 outside of
	    ! this INCR loop.

	    default_file_specification [STR$A_POINTER] = .ipftop[.ipftyp];

	    ! Now see if there is a file with the specified filename and
	    ! the currently indexed input filetype option.	

	    rms_status = LIB$FIND_FILE ( passed_file_spec
					,.input_file_name
					,lffctx
					,default_file_specification
					,0	! No related file specification
					,rms_stv_adr  ! Secondary RMS error code
					,2		  ! User flags
					);

	    IF .rms_status EQL RMS$_NORMAL THEN EXITLOOP
	    END			!end of INCR loop.
	END;		! End of what we do if first test didn't find a file
%FI

    IF  .rms_status EQL RMS$_NORMAL	  ! Succeeded in finding (any type)?
    THEN
	BEGIN

	! Pick off the name and length of the file spec for ERROR.BLI
	irac_fspecp = .ip_file_spec [STR$A_POINTER];
	irac_fspecc = .ip_file_spec [STR$H_LENGTH];
%IF dsrplus %THEN
	IF  (.ipftyp GTR 0)  ! If we didn't find an RNO file,  tell the
	THEN		 ! user just what we did find.
	    erm (rnfoft); ! File type ".RNO" not found.  Processing file xx
%FI
	true    	! Exit saying we found an input file.
	END
    ELSE
	BEGIN
	LOCAL
	    spec_length,
	    spec_ptr;

	spec_ptr    = .passed_file_spec [str$a_pointer];
	spec_length = .passed_file_spec [str$h_length];

	erme (rnfcoi, .spec_ptr, .spec_length, .semcod);
	IF .rms_stv_adr EQL -1 THEN
	    SIGNAL ( .rms_status )
	ELSE
	    SIGNAL ( .rms_status, .rms_stv_adr );

	4    	! Exit saying we couldn't find an input file.
	END
    END;				! End of routine INPUT_FILE_SCAN
%FI
END					! End of module
ELUDOM
