MODULE RPG$HANDLER ( %TITLE 'RPG error handler'
		IDENT = '1-003'		! FILE: RPGHANDLE.B32 EDIT:DG1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
! FACILITY:	RPGII SUPPORT
!
! ABSTRACT:	This procedure is the error handler for RPGII error
!		conditions.  It gets invoked as a result of a call
!		to LIB$SIGNAL.
!
!
! ENVIRONMENT:	Vax-11 User Mode
!
! AUTHOR: Debess Grabazs, CREATION DATE: 18-JAN-1983
!
! MODIFIED BY:
!
! 1-001 - Original. DG 18-JAN-1983
! 1-002 - Added conversion of COB$ error codes to RPG$ equivalents.
!	  DG 31-MAY-1983
! 1-003 - Make sure conversion of error codes generated by COBOL to RPG$ 
!	  equivalents is only done when called by RPG$DSPLY. DG 12-OCT-1983
!
!--

!<BLF/PAGE>

%SBTTL 'Declarations'
!+
! PROLOGUE FILE:
!-

REQUIRE 'RTLIN:RPGPROLOG';			! Switches, PSECTs, macros,
						!  linkages and LIBRARYs

!+
! LINKAGES
!	NONE
!-

!+
! TABLE OF CONTENTS:
!-

FORWARD ROUTINE
	RPG$HANDLER ;

!+
! INCLUDE FILES
!	NONE
!-

!+
! MACROS
!	NONE
!-

!+
! EQUATED SYMBOLS
!-

LITERAL
	CVTTP_OPCODE = %X'26',		! Opcode value for CVTTP instruction
	CVTSP_OPCODE = %X'09';		! Opcode value for CVTSP instruction

!+
! EXTERNAL REFERENCES
!-

EXTERNAL ROUTINE
	LIB$SIGNAL ;			! Stop execution via signalling

EXTERNAL LITERAL
	COB$_EOFON_ACC ,		! EOF on ACCEPT
	COB$_ERRDURACC ,		! Error during ACCEPT
	COB$_ERRDURDIS ,		! Error during DISPLAY
	COB$_INVARG ,			! Invalid argument
	RPG$_ERRDURDSP ,		! Error during DSPLY signal
	RPG$_INVARG ,			! Invalid argument signal
	RPG$_INVARRIND ,		! Invalid array index signal
	RPG$_INVNUMFLD ;		! Invalid numeric field signal


%SBTTL 'RPG$HANDLER - RPG error handler'
GLOBAL ROUTINE RPG$HANDLER(
			SIGNAL:		REF BLOCK [,BYTE],	! Nature of the condition
			MECHANISM:	REF BLOCK [,BYTE]	! State of process at time of signal
			)=

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the error handler for RPGII error conditions.
!	It gets invoked as a result of a call to LIB$SIGNAL.
!
! CALLING SEQUENCE:
!
!	RPG$HANDLER (signal.rr.r, mechanism.rr.r)
!
! FORMAL PARAMETERS:
!
!	signal		Address of vector of longwords indicating 
!			the nature of condition.
!
!	mechanism	Address of vector of longwords indicating
!			the state of the process.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	SS$_RESIGNAL
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
! NOTES:
!
!	The macro field references beginning with 'CHF' refer to
!	condition handling argument list offsets.
!
!--

    BEGIN

    LOCAL
	CONDITION,			! Condition that was signalled
	USER_PC;			! Program counter where exception took
					! place

    !+
    ! Find out if it is a signal of interest.
    !-

    CONDITION = .SIGNAL [CHF$L_SIG_NAME];	! Fetch condition value from signal array

    !+
    ! Select appropriate action based on which one we have.
    !-

    SELECTONE .CONDITION OF
      SET

	[SS$_ROPRAND]:			! Was a SS$_ROPRAND
	    BEGIN

		!+
		! Using the signal argument vector, extract
		! the program counter at the time the 
		! SS$_ROPRAND occurred.  
		!-

		USER_PC = .SIGNAL [(.SIGNAL [CHF$L_SIG_ARGS] - 1 ) * %UPVAL, 0, %BPVAL, 0] ;

		!+
		! Check to see if a CVTTP or a CVTSP instruction
		! was the generator of the signal.  Note that the
		! PC is pointing to the instruction that caused the
		! fault.
		!-

		IF (  .(.USER_PC)<0,8> EQL CVTTP_OPCODE  OR
		      .(.USER_PC)<0,8> EQL CVTSP_OPCODE     )
		THEN	

		    !+
		    ! Set the first longword of the signal argument
		    ! vector (the condition value field) to the
		    ! condition being signalled.  In this case, the
		    ! condition is invalid decimal data.
		    !-

		    SIGNAL [CHF$L_SIG_NAME] = RPG$_INVNUMFLD ;	
								

	    END ;

	  [SS$_SUBRNG]:		! Was a SS$_SUBRNG
	    BEGIN

		!+
		! First make sure that the error occurred during a
		! call from RPG$DSPLY and not from a user subroutine
		!-

		IF .MECHANISM [CHF$L_MCH_DEPTH] EQL 0
		THEN

		    !+
		    ! Set the first longword of the signal argument
		    ! vector (the condition value field) to the
		    ! condition being signalled.  In this case, the
		    ! condition is subscript out of range.
		    !-

	            SIGNAL [CHF$L_SIG_NAME] = RPG$_INVARRIND;	! Set to RPG signal
	    END;

	  [COB$_ERRDURACC,
	   COB$_EOFON_ACC,
	   COB$_ERRDURDIS]:		! Was an error during ACCEPT or DISPLAY
	    BEGIN

		!+
		! Set the first longword of the signal argument
		! vector (the condition value field) to the
		! condition being signalled.  
		!-

	        SIGNAL [CHF$L_SIG_NAME] = RPG$_ERRDURDSP;	! Set to RPG signal
	    END;

	  [COB$_INVARG]:		! Was a COB$_INVARG
	    BEGIN

		!+
		! Set the first longword of the signal argument
		! vector (the condition value field) to the
		! condition being signalled.  
		!-

	        SIGNAL [CHF$L_SIG_NAME] = RPG$_INVARG;! Set to RPG signal
	    END;

	  [OTHERWISE]:			! No match occurred
	    0;				! No change

	TES;

    !+
    ! Resignal the error with the signal name changed where 
    ! appropriate.
    !-

    RETURN SS$_RESIGNAL
    
    END;

END 
ELUDOM
