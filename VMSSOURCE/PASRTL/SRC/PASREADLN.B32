MODULE PAS$READLN2 ( %TITLE 'READLN procedure'
		IDENT = '1-003'		! File: PASWRITEL.B32 Edit: SBL1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains PAS$READLN2, which implements the
!	VAX-11 Pascal READLN procedure.  It also contains utility
!	procedures used by textfile and string READ procedures.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
! 1-002 - Add PAS$$END_READ.  SBL 24-May-1982
! 1-003 - Use a zeroed descriptor pointer to indicate that the previous
!	  READV on this string ended with FCB$V_LAZY set.  This allows the
!	  proper error actions to occur.  SBL 10-Jan-1983
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$READLN2: NOVALUE,			! Do a READLN
    PAS$$INIT_READ: JSB_INIT_READ NOVALUE,	! Initialize for read
    PAS$$END_READ: JSB_END_READ NOVALUE,	! End a read
    PAS$$DO_READV: JSB_DO_READV NOVALUE;	! Do a READV

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!

!+
! Declare a Pascal File Descriptor to use for a "string file" READV
!-

OWN
    PFD_READV: BLOCK [PFD$K_SIZE+%CHARCOUNT('-string-'), BYTE]
    	FIELD (PFD$FIELDS) PSECT (_PAS$CODE)
	PRESET (
		[PFD$V_TEXT]	= 1,
    		[PFD$V_NOREAD]	= 1,
		[PFD$V_NOWRITE]	= 1,
		[PFD$L_LENGTH]	= 1,
		[PFD$T_NAME]	= %CHARCOUNT('-string-'),
		[PFD$B_NAME1]	= %C'-',
		[PFD$B_NAME2]	= %C's',
		[PFD$B_NAME3]	= %C't',
		[PFD$B_NAME4]	= %C'r',
		[PFD$B_NAME5]	= %C'i',
		[PFD$B_NAME6]	= %C'n',
		[PFD$B_NAME7]	= %C'g',
		[PFD$B_NAME8]	= %C'-'
	       );

%SBTTL 'PAS$READLN2 - READLN procedure'
GLOBAL ROUTINE PAS$READLN2 (				! Do a READLN
	PFV: REF $PAS$PFV_FILE_VARIABLE,	 	! File variable
	ERROR						! Error unwind address
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAS$READLN2 implements the VAX-11 Pascal READLN procedure.  It
!	flushes the remainder of the current record and positions the
!	file at the beginning of the next record.
!
! CALLING SEQUENCE:
!
!	CALL PAS$READLN2 (PFV.mr.r [, ERROR.j.r])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  in case of an error.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	If the file is the standard file INPUT or OUTPUT, it is implicitly opened.
!
! SIGNALLED ERRORS:
!
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,		! File control block
	PFV_ADDR: VOLATILE,				! Enable argument
	UNWIND_ACT: VOLATILE,				! Enable argument
	ERROR_ADDR: VOLATILE;				! Enable argument

    BUILTIN
	ACTUALCOUNT;

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    PFV_ADDR = PFV [PFV$R_PFV];				! Set PFV address

    IF ACTUALCOUNT () GEQU 2
    THEN
	ERROR_ADDR = .ERROR;				! Set unwind address

    !+
    ! Validate PFV and get PFV.
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Do common initialization.
    !-

    PAS$$INIT_READ (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! Move to the end of the line and do a GET.
    !-

    PFV [PFV$V_EOLN] = 1;
    PAS$$GET (PFV [PFV$R_PFV], FCB [FCB$R_FCB]);

    !+
    ! Unlock the file variable.
    !-

    PFV [PFV$V_LOCK] = 0;

    RETURN;

    END;					! End of routine PAS$READLN2

!<BLF/PAGE>

%SBTTL 'PAS$$INIT_READ - Common setup for READ procedures'
GLOBAL ROUTINE PAS$$INIT_READ (				! Common setup
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	FCB_IN: REF $PAS$FCB_CONTROL_BLOCK;		! Input FCB
	FCB: REF $PAS$FCB_CONTROL_BLOCK			! Output FCB
    ): JSB_INIT_READ NOVALUE=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure performs the common setup steps for all READ procedures.
!	These are:
!		Verify that the file is a textfile.
!		If it is the standard file OUTPUT or INPUT, open it.
!		Verify that the file is in Inspection mode.
!		Resolve any lazy lookahead in progress.
!		Move character in user file buffer to record buffer.
!
! CALLING SEQUENCE:
!
!	JSB_INIT_READ PAS$$INIT_READ (PFV.mr.r, FCB_IN.mr.r; FCB))
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference in R2.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	FCB_IN		- The address of the FCB for the file, if any.  If
!			  the file is not open, it will be opened and the
!			  resultant address stored in FCB.
!
!	FCB		- The address of the File Control Block (FCB) is an
!			  output register parameter.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	If the file is the standard file OUTPUT, it is implicitly opened.
!
! SIGNALLED ERRORS:
!
!	FILNOTOPE - file not open
!	FILNOTTEX - file is not a textfile
!	FILNOTINS - file not in Inspection mode
!	GETAFTEOF - GET attempted after end-of-file
!
!--

    BEGIN

    !+
    ! Resolve lazy lookahead, if any.
    !-

    IF NOT .PFV [PFV$V_VALID]
    THEN
	PAS$$LOOK_AHEAD (PFV [PFV$R_PFV], FCB_IN [FCB$R_FCB]; FCB);

    !+
    ! Verify that the file is open.
    !-

    IF NOT .PFV [PFV$V_OPEN]		! Not open
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTOPE,0);	! File not open

    !+
    ! If the file is a string (READV), then return immediately.
    ! No further checks are necessary.
    !-

    IF .FCB [FCB$V_STRING]
    THEN
	RETURN;

    !+
    ! Verify that this is a textfile
    !-

    IF NOT .FCB [FCB$V_TEXT]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTTEX,0);	! File is not a textfile

    !+
    ! Test for Inspection mode
    !-    

    IF NOT .FCB [FCB$V_INSPECTION]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTINS,0);

    !+
    ! Test for end-of-file.
    !-

    IF .FCB [FCB$V_EOF]
    THEN
	$PAS$IO_ERROR (PAS$_GETAFTEOF,0);

    !+
    ! Move the current character in the user's file buffer to the record
    ! buffer so that other routines will see it.
    !-

    IF NOT .PFV [PFV$V_EOLN] AND NOT .FCB [FCB$V_NOWRITE]
    THEN
	CH$WCHAR (..PFV [PFV$A_BUFFER], .FCB [FCB$A_RECORD_CUR]);

    RETURN;	! Success

    END;					! End of routine PAS$$INIT_READ

!<BLF/PAGE>

%SBTTL 'PAS$$END_READ - Common epilogue for READ procedures'
GLOBAL ROUTINE PAS$$END_READ (	
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	FCB: REF $PAS$FCB_CONTROL_BLOCK			! File control block
    ): JSB_END_READ NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure is called at the end of every READ procedure
!	to perform common functions.  These are:
!	   1.  Move next character to user file buffer (do a GET).
!	   2.  Set STATUS to zero and unlock file variable.
!
! CALLING SEQUENCE:
!
!	JSB_END_READ PAS$$END_READ (PFV.mr.r, FCB.mr.r)
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference in R2.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	FCB		- The File Control Block of the file.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the file is a textfile, is locked and is
!	in Generation mode.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	NONE
!--

    BEGIN

    !+
    ! If file buffer is not NOREAD, store the next character to be read
    ! into the user's file buffer.
    !-

    IF .FCB [FCB$A_RECORD_CUR] GEQA .FCB [FCB$A_RECORD_END]
    THEN
	BEGIN
	PFV [PFV$V_EOLN] = 1;	! End of line
	IF NOT .FCB [FCB$V_NOREAD]
	THEN
	    CH$WCHAR (%C' ', .PFV [PFV$A_BUFFER]);	! User buffer gets a blank
	END
    ELSE
	IF NOT .FCB [FCB$V_NOREAD]
	THEN
	    CH$WCHAR (..FCB [FCB$A_RECORD_CUR], .PFV [PFV$A_BUFFER]);

    !+
    ! Set STATUS to indicate success.
    ! Unlock file variable.
    !-

    FCB [FCB$L_STATUS] = 0;
    PFV [PFV$V_LOCK] = 0;

    RETURN;	! Success

    END;					! End of routine PAS$$END_READ

!<BLF/PAGE>

%SBTTL 'PAS$$DO_READV - Do a READV'
GLOBAL ROUTINE PAS$$DO_READV (
    PFV: REF $PAS$PFV_FILE_VARIABLE,		! PFV of string file
    STRING: REF BLOCK [, BYTE],			! String to read from
    ARGUMENT_LIST: REF VECTOR [, LONG],		! Argument list
    ROUTINE_ADDR;				! Routine to call
    RESULT_R0,					! R0 of result
    RESULT_R1					! R1 of result
    ): JSB_DO_READV NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! CALLING SEQUENCE:
!
!	JSB_DO_READV PAS$$DO_READV (PFV.mr.r, STRING.mq.r,
!			   ARGUMENT_LIST.rlu.r,ROUTINE_ADDR.fzem.r; 
!			   RESULT_R0, RESULT_R1)
!
! FORMAL PARAMETERS:
!
!	PFV		- Pascal File Variable allocated by our caller.
!			  It is filled in here.
!
!	STRING		- A descriptor of the string to read from.
!
!	ARGUMENT_LIST	- Argument list for a CALLG
!
!	ROUTINE_ADDR	- The address of the PAS$READ_xxx routine to call
!			  to actually do the work.
!
!	RESULT_R0	- The R0 of the function result, if any.
!
!	RESULT_R1	- The R1 of the function result, if any.
!
! IMPLICIT INPUTS:
!
!	Caller's AP (for the address of the string descriptor.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	See called routine
!
! SIGNALLED ERRORS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	FCB_BLOCK: $PAS$FCB_CONTROL_BLOCK;	! File Control Block

    BIND
	FCB = FCB_BLOCK + FCB$K_BLN: $PAS$FCB_CONTROL_BLOCK;

    BUILTIN
	CALLG;

    !+
    ! Set up the Pascal File Variable
    !-

    PFV [PFV$A_BUFFER] = 0;			! No file buffer
    PFV [PFV$B_VERSION] = PFV$K_CUR_VERSION;	! PFV version number
    PFV [PFV$W_FLAGS] = 0;			! Initially zero bits
    PFV [PFV$V_VALID] = 1;			! PFV is valid
    PFV [PFV$V_FCB_VALID] = 1;			! FCB address is valid
    PFV [PFV$V_OPEN] = 1;			! File is "open"
    PFV [PFV$V_EOF_DEFINED] = 1;		! EOF(f) is defined
    PFV [PFV$V_DFB] = 1;			! File buffer is defined
    PFV [PFV$A_PFD] = PFD_READV [PFD$R_PFD];	! Address of PFD
    PFV [PFV$A_FCB] = FCB [FCB$R_FCB];		! Address of FCB

    !+
    ! Set up the File Control Block (FCB).  Only set those fields which
    ! will be used.
    !-

    FCB [FCB$A_PFV] = PFV [PFV$R_PFV];		! Address of PFV
    FCB [FCB$A_PFD] = PFD_READV [PFD$R_PFD];	! Address of name
    FCB [FCB$W_ATTRIB] = .PFD_READV [PFD$W_ATTRIB]; 	! Attributes
    FCB [FCB$L_OPTIONS1] = 0;			! Initially 0
    FCB [FCB$V_INSPECTION] = 1;			! In Inspection mode
    FCB [FCB$V_STRING] = 1;			! String file
    FCB [FCB$L_RECORD_NUMBER] = 1;		! "Record 1"

    !+
    ! Get the "line" pointer and length, and set the FCB accordingly.
    ! If the last READV on this string ended with FCB$V_LAZY set, we
    ! zeroed the descriptor pointer.  Look for that here.
    !-

    FCB [FCB$A_RECORD_BEG] = .STRING [DSC$A_POINTER];
    FCB [FCB$A_RECORD_CUR] = .FCB [FCB$A_RECORD_BEG];
    IF .FCB [FCB$A_RECORD_CUR] EQLA 0
    THEN
	BEGIN
	FCB [FCB$V_LAZY] = 1;
	PFV [PFV$V_VALID] = 0;
	END;
    FCB [FCB$L_RECORD_LEN] = .STRING [DSC$W_LENGTH];
    FCB [FCB$A_RECORD_END] = .FCB [FCB$A_RECORD_BEG] + .FCB [FCB$L_RECORD_LEN];

    !+
    ! Call the appropriate routine, saving the result.
    !-

    CALLG (ARGUMENT_LIST [0], .ROUTINE_ADDR; RESULT_R0, RESULT_R1);

    !+
    ! Update the "line" string descriptor.
    !-

    STRING [DSC$A_POINTER] = .FCB [FCB$A_RECORD_CUR];
    STRING [DSC$W_LENGTH] = .FCB [FCB$A_RECORD_END] - .FCB [FCB$A_RECORD_CUR];

    !+
    ! If this READV ended with FCB$V_LAZY set, zero the descriptor pointer.
    ! This will let us know on the next READV, and lets us signal
    ! GETAFTEOF in all cases when appropriate, especially READ_CHAR.
    ! Note that the length will already be zero.
    !-

    IF .FCB [FCB$V_LAZY]
    THEN
	STRING [DSC$A_POINTER] = 0;

    RETURN;					! Success

    END;					! End of routine PAS$$DO_READV

!<BLF/PAGE>

END						! End of module PAS$READLN2

ELUDOM
