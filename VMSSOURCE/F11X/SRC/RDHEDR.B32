MODULE RDHEDR (
		LANGUAGE (BLISS32),
		IDENT = 'V04-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine reads the desired file header, checks it for
!	validity and correctness, and returns its address.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  13-Dec-1976  22:00
!
! MODIFIED BY:
!
!	V04-001	CDS0008		Christian D. Saether	15-Sep-1984
!		Save and restore FILE_HEADER when mapping the index
!		file.
!
!	V03-008	CDS0007		Christian D. Saether	30-Aug-1984
!		Don't update the FILE_HEADER cell if STS_LEAVE_FILEHDR
!		is set.
!
!	V03-007	CDS0006		Christian D. Saether	 4-Aug-1984
!		Gee, we really ought to check the file number and
!		sequence number also if we don't do the full
!		check_header call.
!
!	V03-006	CDS0005		Christian D. Saether	 9-July-1984
!		Perform header checks if filenum = 0 (deleted header).
!
!	V03-005	CDS0004		Christian D. Saether	 2-July-1984
!		Only perform header checks if the buffer was read from
!		the disk, mainly to avoid checksums on buffers already
!		in the cache which got checksummed on the way in.
!
!	V03-004	ACG0408		Andrew C. Goldstein,	21-Mar-1984  11:59
!		Fix RVN on back link when used for lock basis;
!		interface change to CHECK_HEADER2
!
!	V03-003	CDS0003		Christian D. Saether	5-Mar-1984
!		Validate lockbasis for headers.
!
!	V03-002	CDS0002		Christian D. Saether	30-Dec-1983
!		Use L_NORM linkage and BIND_COMMON macro.
!
!	V03-001	CDS0001		Christian D. Saether	20-Sep-1983
!		Use new MAP_IDX routine instead of calling MAP_VBN
!		directly to avoid duplication of header serialization
!		logic.
!
!	V02-004	ACG0156		Andrew C. Goldstein,	12-Mar-1980  15:23
!		Fix header invalidation bug
!
!	B0103	ACG0120		Andrew C. Goldstein,	16-Jan-1980  21:18
!		Reorder header consistency checking
!
!	B0102	ACG0083		Andrew C. Goldstein,	15-Nov-1979  0:59
!		Invalidate file header if bad
!
!	B0101	ACG0003		Andrew C. Goldstein,  10-Nov-1978  18:55
!	Add multi-volume support
!
!	B0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  20:00
!	Previous revision history moved to [F11B.SRC]F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE READ_HEADER (FILE_ID, FCB, REALBASIS_A) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the desired file header, checks it for
!	validity and correctness, and returns its address.
!
! CALLING SEQUENCE:
!	READ_HEADER (ARG1, ARG2, ARG3)
!
! INPUT PARAMETERS:
!	ARG1: address of file ID or 0
!	ARG2: FCB address or 0 if none
!	ARG3: (optional) address of cell to store real lockbasis on mismatch
!
! IMPLICIT INPUTS:
!	CURRENT_VCB contains address of VCB in process
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	HEADER_LBN contains LBN of header read
!	FILE_HEADER contains address of header buffer
!
! ROUTINE VALUE:
!	address of file header
!
! SIDE EFFECTS:
!	index file window may be turned
!
!--

BEGIN

MAP
	FILE_ID		: REF BBLOCK,	! file ID arg
	FCB		: REF BBLOCK;	! FCB arg

LOCAL
	NOUPDFILHDR	: INITIAL (0),	! flag to not update FILE_HEADER
	LCKFIDNUM	: WORD,
	LCKFIDNMX	: BYTE,
	STATUS,				! general status value
	VBN,				! VBN of header
	LBN,				! LBN of header
	HEADER		: REF BBLOCK,	! address of header block
	FID		: REF BBLOCK;	! local file ID pointer

BIND_COMMON;

EXTERNAL ROUTINE
	WRONG_LOCKBASIS	: L_NORM NOVALUE,
	SWITCH_VOLUME	: L_NORM,	! switch to correct volume
	MAP_IDX		: L_NORM,	! map virtual to logical for index file
	READ_BLOCK	: L_NORM,	! read a disk block
	CHECK_HEADER2	: L_NORM,	! check header for correctness
	INVALIDATE	: L_NORM;	! invalidate block buffer

IF TESTBITSC (STSFLGS [STS_LEAVE_FILEHDR])
THEN
    NOUPDFILHDR = 1;

! Switch context to the volume of the specified RVN.
!

SWITCH_VOLUME (IF .FCB NEQ 0
		THEN .FCB[FCB$W_FID_RVN]
		ELSE .FILE_ID[FID$W_RVN]
		);

! Get the LBN of the file header. If an FCB is supplied, it contains
! the LBN. If not, derive it from the file number.
!

LBN =
    BEGIN
    IF .FCB NEQ 0
    THEN .FCB[FCB$L_HDLBN]
    ELSE
	BEGIN
	LOCAL
	    IDXLBN,
	    TEMP;

	VBN = .FILE_ID[FID$W_NUM];
	IF .CURRENT_VCB[VCB$V_EXTFID]
	THEN VBN<16,8> = .FILE_ID[FID$B_NMX];
	IF .VBN EQL 0 THEN ERR_EXIT (SS$_NOSUCHFILE);
	VBN = .VBN + .CURRENT_VCB[VCB$B_IBMAPSIZE] + .CURRENT_VCB[VCB$W_CLUSTER]*4;

! Save and restore FILE_HEADER when mapping the index file.  This is
! because FILE_HEADER is used in ERR_CLEANUP to determine whether to
! attempt re-reading the file header using the fib and primary_fcb.
!

	TEMP = .FILE_HEADER;
	IDXLBN = MAP_IDX (.VBN);
	FILE_HEADER = .TEMP;
	.IDXLBN
	END
    END;

IF .LBN EQL -1 THEN ERR_EXIT (SS$_NOSUCHFILE);

! Now read the header and check it for correctness. If a file ID
! was supplied, use the file number and file sequence number from
! it; else use the arguments. If the file operation is being done on a
! spooled device, the file must be marked as spooled.
!

HEADER = READ_BLOCK (.LBN, 1, HEADER_TYPE);

IF .FILE_ID NEQ 0
THEN
    FID = .FILE_ID
ELSE
    FID = FCB[FCB$W_FID];

IF .STSFLGS [STS_DISKREAD]
THEN
    BEGIN
    IF NOT (STATUS = CHECK_HEADER2 (.HEADER, .FID, USER_STATUS))
    THEN
	BEGIN
	IF .STATUS LSSU 4
	THEN INVALIDATE (.HEADER);
	ERR_EXIT ();
	END;
    END
ELSE
    BEGIN
    IF .HEADER[FH2$W_FID_NUM] EQL 0
	AND .HEADER[FH2$B_FID_NMX] EQL 0
	OR (.HEADER[FH2$W_FID_SEQ] NEQ .FID [FID$W_SEQ])
    THEN
	ERR_EXIT (SS$_NOSUCHFILE);

    IF .HEADER[FH2$W_FID_NUM] NEQ .FID [FID$W_NUM]
	OR .HEADER[FH2$B_FID_NMX] NEQ .FID [FID$B_NMX]
    THEN
	BEGIN
	INVALIDATE (.HEADER);
	ERR_EXIT (SS$_FILENUMCHK);
	END;

    END;

IF .CLEANUP_FLAGS[CLF_SPOOLFILE]
AND NOT .HEADER[FH2$V_SPOOL]
AND (.HEADER[FH2$W_FID_NUM] GTRU .CURRENT_VCB[VCB$B_RESFILES]
    OR (.CURRENT_VCB[VCB$V_EXTFID]
	AND .HEADER[FH2$B_FID_NMX] NEQ 0)
    )
THEN ERR_EXIT (SS$_NOSUCHFILE);

! Validate that we have the correct lock basis for this header.
!

LCKFIDNUM = .(LB_BASIS [.CURR_LCKINDX])<0,16>;
LCKFIDNMX = .(LB_BASIS [.CURR_LCKINDX])<16,8>;

IF .HEADER [FH2$W_SEG_NUM] EQL 0
THEN
    BEGIN
    IF .LCKFIDNUM NEQ .HEADER [FH2$W_FID_NUM]
	OR .LCKFIDNMX NEQ .HEADER [FH2$B_FID_NMX]
    THEN
	BEGIN
	IF .FCB NEQ 0
	THEN
	    BUG_CHECK (XQPERR, 'wrong lock basis with fcb present');

! We came in for what should be a primary header, and yet have the wrong
! lock basis.  Something must be sour with the file structure so exit.
! This type of situation has probably already been caught by earlier checks
! in this routine, but we should cover ourselves here in case something
! slips by.
!

	WRONG_LOCKBASIS (.HEADER);
	ERR_EXIT (SS$_NOSUCHFILE);
	END
    END
ELSE

! This is an extension header.
! In general, we are only going to allow access to extension headers
! as a result of finding it by following links from the primary header.
! If the lock basis is wrong, we are trying to go at it directly.
! However, we will handle the case of accessing an extension header
! when the file is already accessed (which means an fcb will have been
! found).  In that case, read_header is called with the optional
! realbasis_a argument which means the caller is prepared to release
! the incorrect serialization lock already acquired, acquire the correct
! lock, and read the header again.
!

    BEGIN
    IF .LCKFIDNUM NEQ .HEADER [FH2$W_BK_FIDNUM]
	OR .LCKFIDNMX NEQ .HEADER [FH2$B_BK_FIDNMX]
    THEN
	BEGIN
	WRONG_LOCKBASIS (.HEADER);

	IF .FCB EQL 0 OR ACTUALCOUNT LSSU 3
	THEN
	    ERR_EXIT (SS$_NOSUCHFILE);

! There's a bug in the file system which screws up the RVN.
! We should get this from the FCB instead.
! Fix this when we start storing the primary FCB in all extension FCBs.
!

	(.REALBASIS_A)<0,16> = .HEADER [FH2$W_BK_FIDNUM];
	(.REALBASIS_A)<16,8> = .HEADER [FH2$B_BK_FIDNMX];
	(.REALBASIS_A)<24,8> = .HEADER [FH2$B_BK_FIDRVN];
	APPLY_RVN ((.REALBASIS_A)<24,8>, .CURRENT_RVN);
	END
    END;

HEADER_LBN = .LBN;			! return LBN of header
IF NOT .NOUPDFILHDR
THEN
    FILE_HEADER = .HEADER;		! and address
RETURN .HEADER;				! and the header itself
END;					! end of routine READ_HEADER

END
ELUDOM
