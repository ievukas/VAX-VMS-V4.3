{
{	Version	'V04-000'
{
{****************************************************************************
{*									    *
{*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
{*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
{*  ALL RIGHTS RESERVED.						    *
{* 									    *
{*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
{*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
{*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
{*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
{*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
{*  TRANSFERRED.							    *
{* 									    *
{*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
{*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
{*  CORPORATION.							    *
{* 									    *
{*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
{*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
{* 									    *
{*									    *
{****************************************************************************

{++
{
{ FACILITY:  DECnet-VAX DLE driver definitions
{
{ ABSTRACT:
{
{	This file contains the DLE structure definitions.
{
{ ENVIRONMENT:
{
{	n/a
{
{--
{
{
{ AUTHOR:
{
{	Tim Halvorsen, January 1983
{
{ MODIFIED BY:
{
{	V001	TMH0001		Tim Halvorsen	21-Apr-1983
{		Add unique identifier to DWB.
{--

{+
{
{	DLE window block, which contains the context for a single DLE
{	connection.  There may be many DLE connections on a single
{	circuit, such as an Ethernet.
{
{-

MODULE $dwbdef;


AGGREGATE dwb STRUCTURE PREFIX dwb$;
	flink	ADDRESS TAG L;		{ Forward link
	blink	ADDRESS TAG L;		{ Backward link
	size	WORD;			{ Bytes allocated for structure
	type	BYTE;			{ Code identifying structure type
	access	BYTE;			{ IO$_ACCESS flags (see WCB definition)
	refcnt	WORD;			{ Number of accessors of window
	flags STRUCTURE TAG W;		{ Flags
	    run		BITFIELD MASK;	{ Set if available for I/O
	    dll_rbf	BITFIELD MASK;	{ Set if datalink does buffered rcvs
	    dll_xbf	BITFIELD MASK;	{ Set if datalink does buffered xmits
	    bc		BITFIELD MASK;	{ Set if circuit is an Ethernet
	    delete	BITFIELD MASK;	{ Set if DWB is to be deallocated
	    #num_flags = 5;
	    fill_1 BITFIELD		{ Pad out to a full word
			LENGTH 16-#num_flags;
	    END flags;
	orgucb	ADDRESS TAG L;		{ Original UCB (see WCB definition)

	{
	{   The above must correspond to the WCB structure, so that normal
	{   VMS functions can operate on these windows just like WCBs.
	{   The remainder of the block from this point is DLE specific.
	{

	rcv_msg	QUADWORD;		{ Received message (CXB) queue
	user_rcv QUADWORD;		{ User receive IRP queue
	user_xmt QUADWORD;		{ User transmit IRP queue
	xmt_pnd	QUADWORD;		{ User transmits issued to datalink
	pid	LONGWORD;		{ PID of accessor
	ucb0	LONGWORD;		{ Address of ND's UCB0
	chan	WORD;			{ Channel of accessor
	path	WORD;			{ LPD of circuit
	remnod	CHARACTER LENGTH 6	{ 48-bit remote node address
			TAG G;		{ used for DLE over Ethernet
	substa	BYTE;			{ DLE substate (see NMA$C_LINSS_xxx)
	irpcnt	BYTE;			{ Count of outstanding datalink I/O
	dll_ucb	ADDRESS TAG L;		{ Address of datalink UCB
	dll_chan WORD;			{ Datalink channel
	id	WORD;			{ Unique identifier of DWB
					{ (used as collating sequence of list)
	CONSTANT "length" EQUALS .	{ Length of structure
			TAG C;
	END dwb;

END_MODULE $dwbdef;
