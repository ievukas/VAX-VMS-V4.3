%TITLE 'RUNOFF initialization'
MODULE RINIT (	IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					    NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	Initialization of RUNOFF.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	CREATION DATE:	April, 1978


%SBTTL 'Revision History'
! MODIFIED BY:
!
!	048	REM00048	Ray Marshall	17-May-1984
!		Added initialization of GCA_CMD_OSQ to support the insertion
!		  of output line numbers in the output text.
!
!	047	REM00047	Ray Marshall	17-November-1983
!		Modified the external definition of ATABLE to use the new
!		  macro ATABLE_DEFINITION defined in ATCODE.REQ.
!		Also, changed the call to NATE to use the new literal that
!		  defines ATABLE's length.
!
!	046	KFA00046	Ken Alden	10-Oct-1983
!		Added init for GCA_CMD_PAGES.
!
!	045	KFA00045	Ken Alden	15-Jul-1983
!		Added init. for GCA_DO_XXX_ALREADY.
!
!	044	KFA00044	Ken Alden	5-Jul-1983
!		Made the sca initialization use literals rather than
!		  'hard-coded' numbers.  This will prevent modifying this
!		  module when any save/restore expansion is needed.
!
!	043	KFA00043	Ken Alden	27-Jun-1983
!		Added init. for gca_cref_errcnt.
!
!	042	KAD00042	Keith Dawson	10-Jun-1983
!		Fix .NOTE margins to be more sensible. This is motivated by 
!		  the fact that notes come out looking centered on .PS, instead 
!		  of on .LM-.RM as desired. 
!
!	041	KAD00041	Keith Dawson	9-Jun-1983
!		For both DSR and DSRPLUS, made default right margin and 
!		  page size (width) 70 instead of 60.
!
!	040	KAD00040	Keith Dawson	9-May-1983
!		Remove support for .DX, .PX.
!
!	039	KAD00039	Keith Dawson	11-April-1983
!		Added support for new termination error messages for 
!		  information written to .BRN file. 
!
!	038	RER00038	Ron Randall	05-Apr-1983
!		For DSRPLUS:  Improved footnote and topnote initialization.
!
!	037	KFA00037	Ken Alden	28-Mar-1983
!		Altered testpage initialization to be more logical.
!		and easier to follow.  now:  6==>entities, 7==>HL's,
!		and 17==>Chapter/appendix.	
!
!	036	RER00036	Ron Randall	20-Mar-1983
!		For DSRPLUS:
!		Added code to initialize topnotes.
!		No more passthrough flag...
!
!	035	KAD00035	Keith Dawson	20-Mar-1983
!		Removed LN01 conditionals and all references to .BIX
!		and .BTC files.
!
!	034	KFA00034	Ken Alden	15-Mar-1983
!		For DSRPLUS: added initialization for passthrough flag.
!		For DSR:  Enabled save/restore functionality.
!
!	033	KAD00033	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!--


%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    RINIT  : NOVALUE,			! Main initialization routine.
    ECCINI : NOVALUE;			! Initialize ECC structure.
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions
%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! EQUATED SYMBOLS:
!
EXTERNAL LITERAL
    RINTES	: UNSIGNED (8);
!
! OWN STORAGE:
!
EXTERNAL
    MRAA	: FIXED_STRING,
    LSTSTF	: COUNTED_LIST,
    PDTSTF	: VECTOR [PDT_SIZE],
    TSFA	: VECTOR [TSF_SIZE];
!
! GLOBAL STORAGE:
!
EXTERNAL
    FRA		: FIXED_STRING,
    IRA		: FIXED_STRING,
    XMRA	: FIXED_STRING,
    MRA,					! Refers to MRAa or MRAb.
    ! Intermediate storage for subtitle and title.
    SBTMRA	: FIXED_STRING,
    TITMRA	: FIXED_STRING,
    ! Descriptors for subtitle and title.
    SBTTSF	: VECTOR [TSF_SIZE],
    TITTSF	: VECTOR [TSF_SIZE],
    XTSF	: VECTOR [TSF_SIZE],		! Used for <INDEX flag> processing.
    KHAR,
    atable	: atable_definition,		! Action table. Used to identify
						! what type of action is to be
						! taken on encountering any
						! given character.
    TSF		: REF VECTOR [TSF_SIZE],	! Refers to TSFa or TSFb
    DATTIM	: VECTOR[6],			! Day and time pieces.
    FNESIZ	: FN_EXT_SIZE_DEFINITION,	! Sizes of pending footnotes.
    FNISIZ	: FN_INT_SIZE_DEFINITION,	! Number of TSF/MRA pairs in each pending footnote.
    FNCT	: FNCT_DEFINITION,		! Footnote control table.
    FOOREC	: FOOREC_DEFINITION,		! Control area for pass through records
    GCA		: GCA_DEFINITION,		! Global control area
    HCT		: HCT_DEFINITION,		! Header control area
    IFSTK	: IFSTACK,			! Stack for .IFs, etc
    IRAC	: IRAC_DEFINITION,
    NPAGEN	: PAGE_DEFINITION,		! Page number of next page
    PAGEN	: PAGE_DEFINITION,		! Page number of current page
    BRNOOB	: $XPO_IOB (),			! IOB for binary output file.
!!    NDXPOL,					! Address of indexing pool, if any.
!!    NDXSGE,					! End of current index segment.
!!    NDXSGF,					! Free space in current index segment.
!!    XTNCNT,					! Number of XTNTAB entries
!!    XTNLSP	: REF PAGE_DEFINITION,		! Page number of last index entry.
!!    XTNLSX	: REF VECTOR,			! Index segment list.
!!    XTNPOL	: REF BLOCK,			! Indexing storage pool.
!!    XTNSGP	: REF BLOCK,			! Address of current segment.
!!    XTNTAB	: REF XTNTAB_DEFINE,		! List of transaction numbers assigned
!!    XPAGEN	: REF XPAGEN_DEFINE,		! Page number associated with transaction number.
    FLGT	: FLAG_TABLE [FLAG_COUNT],
    SCA		: SCA_DEFINITION,		! Scanner control area.
    SCALIT	: VECTOR [SCA_CASE_SIZE],	! Save case rules here during literal processing.
    FS01	: FIXED_STRING,			! General purpose character stringg.
    OUTOPT	: OUTOPT_DEFINE,		! Output options
    ECC		: $ECC_BLOCKVECTOR,
    FRMSTD,					! Depth of FRMSTK (0 means empty)
    FRMSTK	: FORM_STACK,
    HLC		: HLC_DEFINITION,
    HLLIST	: COUNTED_LIST [MAX_LEVELS],
    HLDSP	: VECTOR [MAX_LEVELS],
    SAVSTK	: SAVSTACK,
    LSTCHR	: REF VECTOR,
    LSTLCH	: REF VECTOR,
    LSTRCH	: REF VECTOR,
    LSTLDD	: REF VECTOR,
    LSTCNT	: REF COUNTED_LIST,
    LSTSKP	: REF VECTOR,
    CHLST	: VECTOR,
    LCHLST	: VECTOR,
    RCHLST	: VECTOR,
    LDDLST	: VECTOR,
    NMLST	: NUMBER_LIST,
    PDT		: REF PDT_DEFINITION,
    PHAN	: PHAN_DEFINITION,
    SKPLST	: VECTOR [NMLST_MAXSIZE],
    TTABLE	: COUNTED_LIST [MAX_TABS],	! Tab settings
    IOBSTK	: BLOCKVECTOR [MAX_REQUIRE, IOB$K_LENGTH],
    ! Active input file IOBs saved in IOBSTK.
    RNEIOB	: REF $XPO_IOB (),		! Storage for primary input IOB.
    RNAIOB	: REF $XPO_IOB (),		! Storage for output IOB.
    RNIIOB	: REF $XPO_IOB (),		! Input IOB currently active
    RNOIOB	: REF $XPO_IOB (),		! Output file IOB (i.e., for generated document)
    FOOIOB	: REF $XPO_IOB (),		! Standard footnote IOB.
    FOTIOB	: REF $XPO_IOB (),		! Refers to a temporary IOB for footnotes.
    FO1IOB	: $XPO_IOB (),			! Never referred to directly
    FO2IOB	: $XPO_IOB (),			! Never referred to directly
    TTEIOB	: $XPO_IOB (),			! Standard error file (usually TT:)
    TTIIOB	: $XPO_IOB (),			! Standard input file (usually TTY:)
    TTOIOB	: $XPO_IOB (),			! Standard output file (usually TTY:)
    TSIIOB	: $XPO_IOB (),			! Standard input file; but STREAM; not RECORD.
    VRCNT,					! Number of variables.
    VRNAME	: VRNAME_DEF,			! The variable names.
    VRLNG	: VRLNG_DEF,			! The length of the names.
    VRBOOL	: VRBOOL_DEF,			! TRUE/FALSE value
    VRFFLG	: VRFFLG_DEF,			! FALSE flag
    VRTFLG	: VRTFLG_DEF,			! TRUE flag
    VRSRC	: VRSRC_DEF;			! Source of variable definition.

%IF DSRPLUS %THEN
EXTERNAL
    TNREC	: TNREC_DEFINITION,
    TOPNOT	: TN_DEFINITION,
    TNIIOB	: REF $XPO_IOB (),
    TNUIOB	: REF $XPO_IOB (),
    TN0IOB	: $XPO_IOB (),
    TN1IOB	: $XPO_IOB ();
%FI

!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE

!!%IF NOT %BLISS(BLISS16)
!!%THEN
!!    FPOOL,
!!%FI
    savini,	nate,	rnodat,		setcas;


%SBTTL 'RINIT -- body of main routine'
GLOBAL ROUTINE rinit : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:	RUNOFF initialization
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    LOCAL
	status;

    !
    ! Initialize fixed_strings.
    !
    fs_init (ira);
    fs_init (mraa);
    fs_init (fra);
    fs_init (fs01);
    fs_init (titmra);
    fs_init (sbtmra);
    fs_init (xmra);
	
    !
    ! Initialize text descriptors.
    !
    INCR I FROM 0 TO TSF_SIZE - 1 DO
	BEGIN
	TSFA [.I] = 0;				! Text descriptor for primary area
	SBTTSF [.I] = 0;			! Text descriptor for subtitles
	TITTSF [.I] = 0;			! Text descriptor for titles
	XTSF [.I] = 0;				! Text descriptor for indexing
	END;

! ***Begin SAVE/RESTORE reallocation
    SAVINI ();
! ***End SAVE/RESTORE

    !
    ! Initialize draft flags in all TSF's to space (%C' ').
    !
    TSF = TSFA;
    TSF_DRAFT_FLAG = %C' ';
    TSF = SBTTSF;
    TSF_DRAFT_FLAG = %C' ';
    TSF = TITTSF;
    TSF_DRAFT_FLAG = %C' ';
    TSF = XTSF;
    TSF_DRAFT_FLAG = %C' ';
    !
    ! Point to primary text areas.
    !
    MRA = MRAA;					! Primary intermediate build area.
    TSF = TSFA;					! Primary control area.

    NMLST_COUNT = 0;				! No waiting number lists
    GCA_FEHLER = FALSE;				! No errors yet
    GCA_ERRCNT = 0;				! No errors yet
    GCA_ERR_DIR = REPORT_ERR_STD;		! Report errors in error log.
    GCA_CMD_MSG = REPORT_ERR_BOTH;		! After opening files report errors in both places.
    !
    ! Some I/O initialization.
    !
    RNIIOB = .RNEIOB;				! Set up pointer to primary input IOB.
    RNOIOB = .RNAIOB;				! Set up pointer to output IOB.
    $XPO_IOB_INIT (IOB = TTIIOB);		! Standard input (TTY:)
    $XPO_IOB_INIT (IOB = TTOIOB);		! Standard output (TTY:)
    $XPO_IOB_INIT (IOB = TTEIOB);		! Standard error log (TTY:)
    $XPO_IOB_INIT (IOB = TSIIOB);		! Standard input, but STREAM.
    $XPO_IOB_INIT (IOB = BRNOOB);		! Binary-output IOB.
    $XPO_IOB_INIT (IOB        = FO1IOB,		! Standard footnote IOB.
		   FILE_SPEC  = '001RNO.TMP',
		   ATTRIBUTES = BINARY);
    $XPO_IOB_INIT (IOB        = FO2IOB,		! Temporary working footnote IOB.
		   FILE_SPEC  = '002RNO.TMP',
		   ATTRIBUTES = BINARY);
    FOOIOB = FO1IOB;				! Set up "double IOBing"
    FOTIOB = FO2IOB;

%IF DSRPLUS %THEN
    !
    ! Initialize topnote control tables and file access tables.
    !
    INCR I FROM 0 TO (TN_CONTROL - 1) DO
	TOPNOT [.I] = 0;

    INCR I FROM 0 TO (TNREC_SIZE - 1) DO
	TNREC [.I] = 0;

    !
    ! Initialize topnote IOBs.
    !
    $XPO_IOB_INIT (IOB        = TN0IOB,
		   FILE_SPEC  = '001RNOTN0.TMP',
		   ATTRIBUTES = BINARY);
    $XPO_IOB_INIT (IOB        = TN1IOB,
		   FILE_SPEC  = '001RNOTN1.TMP',
		   ATTRIBUTES = BINARY);
    !
    ! Set up "double IOBing".
    !
    TNUIOB = TN0IOB;
    TNIIOB = TN1IOB;
%FI

    !
    ! Open standard error log
    !
    status = $XPO_OPEN ( IOB = TTEIOB
			,FILE_SPEC = $XPO_ERROR
			,OPTIONS = OUTPUT
				);
    !
    ! Open user's terminal for input
    !
    status = $XPO_OPEN ( IOB = TTIIOB
			,FILE_SPEC = $XPO_INPUT
			,OPTIONS = INPUT
				);
    !
    ! Open user's terminal for output
    !
    status = $XPO_OPEN ( IOB = TTOIOB
			,FILE_SPEC = $XPO_OUTPUT
			,OPTIONS = OUTPUT
				);
    !
    ! Initialize HCT (header control table)
    !
    HCT_HD_CASE = HCT_HD_MIXED;			! Display 'Page' and 'Index'
    HCT_HEADERS = TRUE;
    HCT_NUMBER_PAGE = TRUE;
    HCT_NMPG_NP = TRUE;
    HCT_SUBTITLE = FALSE;

%IF DSRPLUS %THEN
    HCT_TITLE_ALWAYS = FALSE;			! FIRST TITLE [ALWAYS] 
%FI

    HCT_LAYOUT = LAYOUT_STANDARD;		! Standard page arrangement.
    HCT_LAYOUTN = 0;
    HCT_LAYOUT_NP = LAYOUT_STANDARD;
    HCT_LAYOUTN_NP = 0;
    HCT_ODD_EVEN = 0;				! Set to even parity, as each call on NEWPAG
						! flips the parity before outputting the title.
    !
    ! Initialize footnote control tables.
    !
    INCR I FROM 0 TO FNCT_CONTROL - 1 DO
	FNCT [.I] = 0;

    INCR I FROM 0 TO FNCT_MAX - 1 DO
	BEGIN
	FNESIZ [.I] = 0;
	FNISIZ [.I] = 0;
	END;

    !
    ! Initialize "passthrough" work area.
    !
    INCR I FROM 0 TO FOOREC_SIZE - 1 DO
	FOOREC [.I] = 0;

    !
    ! Initialize tables for variables (.VARIABLE and /VARIANT)
    !
    VRCNT = 0;					! There are no variables defined yet.
    VRTFLG [0] = %C' ';
    VRFFLG [0] = %C' ';
    VRBOOL [0] = TRUE;
    !
    ! Initialize the IFSTACK
    !
    IFSTK [0, IFSTK_DEPTH] = 0;			! There are no active ".IFs"
    IFSTK [0, IFSTK_REQ_D] = 0;
    IFSTK [0, IFSTK_BOOL] = TRUE;
    IFSTK [0, IFSTK_VR] = 0;
    IFSTK [0, IFSTK_SOURCE] = 0;
    IFSTK [0, IFSTK_FLAG] = %C' ';
    !
    ! Initialize .LIST ELEMENT character "counter".
    !
    LSTCHR = CHLST;
    LSTCHR [0] = 0;
    !
    ! Initialize list of .LIST ELEMENT counters
    !
    LSTCNT = LSTSTF;
    !
    ! Initialize .LIST ELEMENT display information
    !
    LSTLCH = LCHLST;
    LSTRCH = RCHLST;
    LSTLDD = LDDLST;
    LSTLCH [0] = 0;
    LSTRCH [0] = %C'.';
    LSTLDD [0] = TCONVRT_DEC_NOZ;
    LSTCNT [CL_MAX_INDEX] = CL_DEFAULT_SIZE;
    LSTCNT [CL_INDEX] = 1;
    LSTCNT [1] = 0;
    !
    ! Initialize inter-list-element spacing;
    !
    LSTSKP = SKPLST;
    LSTSKP [0] = 1;
    !
    ! Initialize list of .HEADER LEVEL counters
    !
    HLLIST [CL_MAX_INDEX] = 6;
    HLLIST [CL_INDEX] = 1;

    !
    ! Set display characteristics for all header level counters to decimal
    !
    INCR I FROM 1 TO .HLLIST [CL_MAX_INDEX] DO
	BEGIN
	HLDSP [.I - 1] = TCONVRT_DEC_NOZ;
	HLLIST [.I] = 0;
	END;

    !
    ! Initialize list of .SAVE/RESTORE variables.	! ***SAVE/RESTORE
    !
    ! Initialize the SAVSTACK
    !
    SAVSTK [0, SAVSTK_DEPTH] = 0;			! There are no active ".SAVEs"
    SAVSTK [0, SAVSTK_REQ_D] = 0;
    SAVSTK [0, SAVSTK_ADDRESS] = 0;
    SAVSTK [0, SAVSTK_SOURCE] = 0;
							! ***SAVE/RESTORE
    !
    ! Initialize the entire ECC structure. The TRUE third argument causes
    ! us to zero the entity counters as well.
    !
    ECCINI (EXAMP_OFFSET, APPEND_OFFSET, TRUE);
    !
    ! Initialize .HEADER LEVEL processing controls.
    !
    HLC_CO_NBITS = FALSE;		! Don't carry over underlining and bolding to subtitles,
    HLC_CO_OVR = TRUE;			! but do carry over overstriking.
    HLC_UPPER = 1;			! Force .HL1s to upper case.
    HLC_CAP = MAX_LEVELS;		! First character of all .HLs to upper case.
    HLC_RUNON = 3;			! Generate '-' starting with .HL3
    HLC_HEADLC = 1;			! Skip this many lines after the .HL command
    HLC_HEADLT = 7;			! Anticipate this many lines when doing a test page
    HLC_HEADLB = 3;			! Skip this many lines before the .HL command
    HLC_HEADSP = 2;			! Insert this many spaces after the section number.
    HLC_NO_NUMBER = 99;			! All headers are numbered.
    HLC_CENTER = 99;			! Don't center any headers.
    !
    ! Initialize tab settings;
    !
    TTABLE [CL_MAX_INDEX] = MAX_TABS;
    TTABLE [1] = 8;

    INCR I FROM 2 TO MAX_TABS DO
	TTABLE [.I] = 8 + .TTABLE [.I - 1];

    TTABLE [CL_INDEX] = MAX_TABS;
    !
    ! End of initialization of tab stops
    !

    !
    ! Normal character recognition
    !
    INCR I FROM 0 TO (atable_length - 1) DO
	NATE (.I);

    !
    ! Set up case translation rules ("as is in input", i.e., .UPPER CASE)
    !
    SETCAS (LEAVE_CASE);
    !
    ! Initialize flag table. Set initial enabled or disabled states.
    !
    FLGT [SUB_FLAG, FLAG_ENABLED] = FALSE;		! SUBSTITUTE flag
    FLGT [EFO_FLAG, FLAG_ENABLED] = TRUE;		! ENDFOOTNOTE flag
    FLGT [CON_FLAG, FLAG_ENABLED] = TRUE;		! CONTROL flag
    FLGT [QUO_FLAG, FLAG_ENABLED] = TRUE;		! QUOTE flag
    FLGT [UPP_FLAG, FLAG_ENABLED] = TRUE;		! UPPERCASE flag
    FLGT [LOW_FLAG, FLAG_ENABLED] = TRUE;		! LOWERCASE flag
    FLGT [CAP_FLAG, FLAG_ENABLED] = FALSE;		! CAPITALIZE flag
    FLGT [UND_FLAG, FLAG_ENABLED] = TRUE;		! UNDERLINE flag
    FLGT [BLD_FLAG, FLAG_ENABLED] = FALSE;		! BOLD flag
    FLGT [SPA_FLAG, FLAG_ENABLED] = TRUE;		! SPACE flag
    FLGT [IND_FLAG, FLAG_ENABLED] = FALSE;		! INDEX flag
    FLGT [HYP_FLAG, FLAG_ENABLED] = FALSE;		! HYPHENATE flag
    FLGT [OVR_FLAG, FLAG_ENABLED] = FALSE;		! OVERSTRIKE flag
    FLGT [SBX_FLAG, FLAG_ENABLED] = TRUE;		! SUBINDEX flag
    FLGT [COM_FLAG, FLAG_ENABLED] = TRUE;		! COMMENT flag
    FLGT [PER_FLAG, FLAG_ENABLED] = FALSE;		! PERIOD flag
    FLGT [BRK_FLAG, FLAG_ENABLED] = FALSE;		! BREAK flag

%IF DSRPLUS %THEN
    FLGT [NPX_FLAG, FLAG_ENABLED] = FALSE;		! No-permute-index flag    
%FI

    !
    ! Set up default flag characters for all flags.
    !
    FLGT [SUB_FLAG, FLAG_CHARACTER] = %C'$';		! SUBSTITUTE flag
    FLGT [EFO_FLAG, FLAG_CHARACTER] = %C'!';		! ENDFOOTNOTE flag
    FLGT [CON_FLAG, FLAG_CHARACTER] = %C'.';		! CONTROL flag
    FLGT [QUO_FLAG, FLAG_CHARACTER] = %C'_';		! QUOTE flag
    FLGT [UPP_FLAG, FLAG_CHARACTER] = %C'^';		! UPPERCASE flag
    FLGT [LOW_FLAG, FLAG_CHARACTER] = %C'\';		! LOWERCASE flag
    FLGT [CAP_FLAG, FLAG_CHARACTER] = %C'<';		! CAPITALIZE flag
    FLGT [UND_FLAG, FLAG_CHARACTER] = %C'&';		! UNDERLINE flag
    FLGT [BLD_FLAG, FLAG_CHARACTER] = %C'*';		! BOLD flag
    FLGT [SPA_FLAG, FLAG_CHARACTER] = %C'#';		! SPACE flag
    FLGT [IND_FLAG, FLAG_CHARACTER] = %C'>';		! INDEX flag
    FLGT [HYP_FLAG, FLAG_CHARACTER] = %C'=';		! HYPHENATE flag
    FLGT [OVR_FLAG, FLAG_CHARACTER] = %C'%';		! OVERSTRIKE flag
    FLGT [SBX_FLAG, FLAG_CHARACTER] = %C'>';		! SUBINDEX flag
    FLGT [COM_FLAG, FLAG_CHARACTER] = %C'!';		! COMMENT flag
    FLGT [PER_FLAG, FLAG_CHARACTER] = %C'+';		! PERIOD flag
    FLGT [BRK_FLAG, FLAG_CHARACTER] = %C'|';		! BREAK flag

%IF DSRPLUS %THEN
    FLGT [NPX_FLAG, FLAG_CHARACTER] = %C'~';		! No-permute-index flag    
%FI

    !
    ! Update action table to be consistant with the flag table.
    !
    ATABLE [.FLGT [QUO_FLAG, FLAG_CHARACTER]] = A_FLAG;	! Enable QUOTE flag
    ATABLE [.FLGT [UPP_FLAG, FLAG_CHARACTER]] = A_FLAG;	! Enable UPPERCASE flag
    ATABLE [.FLGT [LOW_FLAG, FLAG_CHARACTER]] = A_FLAG;	! Enable LOWERCASE flag
    ATABLE [.FLGT [UND_FLAG, FLAG_CHARACTER]] = A_FLAG; ! Enable UNDERLINE flag
    ATABLE [.FLGT [SPA_FLAG, FLAG_CHARACTER]] = A_FLAG; ! Enable SPACE flag
    !
    ! Initialize IRAC
    !
    IRAC_IPAGEN = 1;				! Input starts on page 1.
    IRAC_ISEQN = 0;
    IRAC_BARS = FALSE;				! Don't want change bars.
    IRAC_DRAFT_FLG = %C' ';			! Default /DRAFT flag.
    !
    ! Initialize SCA
    !
    BEGIN
    MAP
	SCA : VECTOR[SCA_SIZE],
	MRA : REF FIXED_STRING;

    !
    ! The following initialization block is different for DSRPLUS because the storage
    ! area where some SCA words are stored are different.  This means that if we say,
    ! "SCA[.I] = 0 for all the SCA, then the special (SAVED) ones would have a storage
    ! address of zero.
    !
    INCR I FROM 0 TO (SCA_SAVE_START - 1) DO SCA[.I] = 0;
    SCA_CC_OK = FALSE;
    SCA_KER = FALSE;
    INCR I FROM (SCA_SAVE_END + 1) TO (SCA_SIZE - 1) DO SCA[.I] = 0;	
    SCA_FC_CASE = TRUE;
    SCA_RM = 70;		! Changed from 60 by KAD, 9-Jun-1983.
    SCA_LM = 0;
    SCA_SPACING = 1;
    SCA_FC = TRUE;
    SCA_FILL = TRUE;
    SCA_JUSTIFY = TRUE;
    SCA_CROCK = TRUE;
    SCA_PERIOD = TRUE;
    SCA_FLAGS = TRUE;
    SCA_DO_UND = TRUE;
    SCA_DO_BLD = TRUE;
    SCA_DO_OVR = TRUE;
    SCA_DO_HYP = TRUE;
    SCA_DO_IND = TRUE;
    SCA_AUTOTITLE = TRUE;			! AUTOTITLE in effect
    SCA_SECT_EMPTY = TRUE;			! No HEADER LEVELs with text yet.
    SCA_INDEX = TRUE;				! Obey indexing commands.
    SCA_XROUTINE = FALSE;			! FALSE ==> use XR as the indexing routine.
    SCA_BAR_CHAR = %C'|';			! Default change bar character.
    SCA_WRD_PNTR = .FS_START (MRA);
    SCA_WRD_CPEND = RINTES;
    !
    ! End of initialization of SCA
    !
    END;

    !
    ! Initialize OUTOPT
    !
    OUTOPT_UND_CHAR = %C'_';
    OUTOPT_UND_NOSP = FALSE;			! Underline character is not non-spacing.
    OUTOPT_UND_SEP = FALSE;			! Don't use a separate line for
    						! underlining.
    OUTOPT_OVER = TRUE;				! Do special functions by overprinting.
    OUTOPT_BACK = FALSE;			! Do not use the backspace character.
    !
    ! Pick up date and time
    !
    RNODAT (DATTIM);
    !
    ! Initialize GCA
    !
    GCA_AUTOSUBT = TRUE;			! Default is .AUTOSUBTITLE 1
    GCA_AUTOPARA = FALSE;			! Default is .NO AUTOPARAGRAPH
    GCA_AUTOTABL = FALSE;			! Default is .NO AUTOTABLE
    GCA_AUTOJUST = TRUE;			! Default is .AUTOJUSTIFY
    GCA_KEEP = FALSE;				! Default is .NO KEEP
    GCA_MAX_ASTN = 1;
    GCA_BARS = FALSE;				! Don't want change bars.
    GCA_BARS_ENAB = FALSE;
    GCA_BARS_ON = FALSE;
    GCA_EVER_BARS = FALSE;			! Change bars never seen.
    GCA_CMD_BAR = TRUE;				! Assume user won't forbid bars.
    GCA_CMD_RIT = FALSE;			! Don't shift /RIGHT.
    GCA_CMD_PAGES = FALSE;			! Don't assume /PAGES.
    GCA_DEBUG_CND = FALSE;			! Don't assume /DEBUG:CONDITIONALS
    GCA_DEBUG_INDEX = FALSE;			! Don't assume /DEBUG:INDEX
    GCA_DEBUG_TOC = FALSE;			! Don't assume /DEBUG:CONTENTS
    GCA_DEBUG_FIL = FALSE;			! Don't assume /DEBUG:FILES
    GCA_CMD_UND = TRUE;				! Assume user won't forbid underlining.
    GCA_CMD_BLD = TRUE;				! Assume user won't forbid bolding.
    GCA_CMD_OVR = TRUE;				! Assume user won't forbid overstriking.
    GCA_CMD_IND = TRUE;				! Assume user won't forbid indexing.
    GCA_BIX = FALSE;				! Assume user won't say /BIX
    GCA_CMD_BTC = FALSE;			! Assume user won't say /BTC
    GCA_BTC = FALSE;
    GCA_PWIDTH = 150;
    GCA_LWIDTH = 70;
				! Changed from 60 by KAD, 9-Jun-1983.
    GCA_NOTE_PRIM = 8;				! Primary margins for .NOTE
				! Changed from 15 by KAD, 10-Jun-1983.
    GCA_NOTE_ALT = 4;				! Secondary margins for .NOTE
    GCA_SKIPPING = FALSE;			! There are no active ".IFs"
    GCA_NORMAL_XTN = 1;
    GCA_FOOT_XTN = 1;
    GCA_INDEX_FMT = TRUE;			! Generate DOTS in the index

%IF DSRPLUS %THEN
    GCA_XCASE = LEAVE_CASE;			! For DSRPLUS, default index case rule is stet-case.
%ELSE
    GCA_XCASE = ONE_CAP;			! For DSR, default index case rule is cap. first letter.
%FI

    GCA_MAX_REQUIRE = MAX_REQUIRE;
    GCA_REQ_DEPTH = 0;				! No .REQUIRES yet (i.e., main file)
    gca_page_cnt = 0;				! Have no physical pages yet.
    gca_contents_cnt = 0;			! No table-of-contents records.
    gca_index_cnt = 0;				! No index records.
    gca_new_cref_cnt = 0;			! No output .BRN records.
    gca_old_cref_cnt = 0;			! No input .BRN records.
!
    gca_black_box = 0;				! Not /AUTOMATIC processing.
    gca_cref_errcnt = 0;			! No unresolved crefs yet.
    gca_cross_reference = 0;			! No cross-referencing.
    gca_expand_cref = 0;			! No input .BRN file for cross-referencing.
    gca_old_brn_exists = 0;			!  ...
    gca_cref_changed = 0;			! No changes yet in cross-references.
    gca_do_cont_already = false;		! No .DO CONTENTS commands have been hit.
    gca_do_index_already = false;		! No .DO INDEX commands have been hit.
!
    GCA_PCHAX = FALSE;				! No pending .NUMBER CHAPTER/APPENDIX.
    GCA_FLAG_CMD = H_FLAGS_ALL;
    GCA_LINE_PEND = 0;				! No lines pending.
    GCA_CASE = LEAVE_CASE;
    GCA_CMD_ISQ = FALSE;			! Don't output input line sequence numbers.
    GCA_CMD_OSQ = FALSE;			! Don't output output line sequence numbers.
    GCA_ORANGE_CNT = 0;				! No output pages specified.
    GCA_SKIP_OUT = FALSE;			! Start outputting immediately.
    GCA_CMD_QUICK = FALSE;			! Assume user won't say /QUICK.

%IF (%BLISS(BLISS36) AND DSRPLUS) %THEN
    GCA_TWIDTH_36 = -1;				! Flag to tell if terminal width is changed.
    GCA_TESCAPE_36 = 0;				! Terminal escape characteristics.
%FI

    !
    ! Initialize PHAN
    !
    PHAN_PLINES = 66;				! Can have this many lines per page at most,

%IF %BLISS (BLISS32) %THEN
    PHAN_SLINES = 66;
%ELSE
    PHAN_SLINES = 60;				! but the spooler allows only this many,
%FI

    PHAN_LLINES = 58;				! and I'm going to let you try to write this many.
    PHAN_TOP_PAGE = TRUE;			! Start at top of a new page
    PHAN_LINES_TP = 0;
    PHAN_FIGURE = 0;				! No waiting figures
    PHAN_TOP_FIRST = TRUE;			! Output starts at top of first page.
    PHAN_HEADER = FALSE;			! Don't want header at top of first page unless .FIRST TITLE
    PHAN_FORM_PEND = FALSE;			! No pending form feed.
    PHAN_PAGING = TRUE;				! Divide document into pages.
    PHAN_CMD_PAGING = TRUE;			! Assume /PAGING
    PHAN_RIGHT = 0;				! Don't shift output right.
    PHAN_DOWN = 0;				! Don't move output down on page.
    PHAN_SIMULATE = FALSE;			! Don't simulate formfeeds.
    PHAN_BOTTOM = 0;				! Nothing on page yet.
    PHAN_PAUSE = FALSE;				! Don't assume /PAUSE
    PHAN_LCHAR = 0;				! No character to the left of the page number
    PHAN_RCHAR = 0;				! No character to the right of the page number

    !
    ! Initialize current page number
    !
    BEGIN
    MAP
	PAGEN : VECTOR [PAGE_SCT_SIZE];

    INCR I FROM 0 TO PAGE_SCT_SIZE - 1 DO
	PAGEN [.I] = 0;

    END;

    PAGEN [SCT_PAGE] = 1;
    PAGEN [SCT_RUN_PAGE] = 1;
    !
    ! Set up initial display characteristics for the various parts of the page 
    ! number.
    !
    PAGEN [SCT_PAGE_D] = TCONVRT_DEC_NOZ;	! Page number part to decimal, no leading zeros.
    PAGEN [SCT_INDEX_D] = TCONVRT_LET_MIX;	! The word index appears as "Index"
    PAGEN [SCT_CHAPT_D] = TCONVRT_DEC_NOZ;	! Chapters to decimal, no leading zeroes.
    PAGEN [SCT_APPEN_D] = TCONVRT_LET_UPP;	! Appendices to upper case letters.
    PAGEN [SCT_SUBPG_D] = TCONVRT_LET_UPP;	! Subpages to upper case letters.

    !
    ! Initialize next page number
    !
    BEGIN
    MAP
	NPAGEN : VECTOR [PAGE_SCT_SIZE],
	PAGEN  : VECTOR [PAGE_SCT_SIZE];

    INCR I FROM 0 TO PAGE_SCT_SIZE - 1 DO
	NPAGEN [.I] = .PAGEN [.I];

    END;

    NPAGEN [SCT_PAGE] = 2;
    NPAGEN [SCT_RUN_PAGE] = 2;
    !
    ! Initialize paragraph description table.
    !
    PDT = PDTSTF;			! Point to paragraph information.
    PDT_TP = 2;				! Make sure this many lines are 
					! available on current page,
    PDT_SKIP = 1;			! then skip this many lines unless 
					! at top of page or section is empty,
    PDT_INDENT = 5;			! and finally, indent this much,

!!    !
!!    ! Delete leftover index entries, if any.
!!    !
!!    IF .NDXPOL NEQ 0
!!    THEN
!!	BEGIN
!!	FPOOL (NDXPOL);
!!	NDXSGE=0;
!!	NDXSGF=0;
!!	END;
!!
!!    IF .XTNPOL NEQ 0
!!    THEN
!!	BEGIN
!!	!
!!	! Clear leftover transaction numbers
!!	!
!!	FPOOL (XTNPOL);
!!	XTNCNT = 0;				! No transaction numbers yet.
!!	XPAGEN = 0;
!!	XTNLSP = 0;
!!	XTNLSX = 0;
!!	XTNSGP = 0;
!!	XTNTAB = 0;
!!	END;

    END;					! End of RINIT


%SBTTL 'ECCINI -- initialize ECC structure to default values'
GLOBAL ROUTINE eccini (first, last, counters) : NOVALUE = 

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	ECCINI	Initializes one or more parts of the ECC structure. 
!
! FORMAL PARAMETERS:
!
!	FIRST	is the offset of the first $ECC_BLOCK to initialize
!
!	LAST	is the offset of the last $ECC_BLOCK to initialize
!
!	COUNTERS tells whether or not to zero the entity counters.
!
!		For example, to initialize all the .STYLE { example | 
!		figure | table } data including counters:
!
!		    ECCINI (EXAMP_OFFSET, TABLE_OFFSET, TRUE)
!
!		To initialize all the .STYLE HEADER data but leave counters 
!		intact:
!
!		    ECCINI (HL1_OFFSET, HL6_OFFSET, FALSE) 
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:
!
!	Parts of the ECC are initialized.
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    OWN
	FS_ALLOCATE (POST_STRING, 5);		! For default ":" post string.

    FS_INIT (POST_STRING);
    FS_WCHAR (POST_STRING, %C':');		! Insert a ":" after the  counter..

    IF .FIRST LSS 0 OR .LAST GTR MAX_ECC_OFFSET
    THEN
	RETURN;

    INCR I FROM .FIRST TO .LAST DO
	BEGIN
	BIND SB = ECC [.I, 0,0,0,0] : $ECC_BLOCK;
	!
	! Zero all the Option bits. the effect is:
	! Numbered headers; no bold; no underline; no break before caption;
	! For CHAPTER/APPENDIX: this means,
	! no insertion of page number into the TOC, don't start a new page,
	! and don't necesarily start on an odd-numbered page.
	!
	SB [ECC$V_OPTIONS] = 0;

	IF (.I GEQ HL3_OFFSET) AND (.I LSS CHAP_OFFSET) ! Run-in HL3 --> HL6.
	THEN
	    SB [ECC$H_RUNIN] = TRUE;

	SB [ECC$H_CASE] =			! Case rules for header:
		(IF .I LEQ TABLE_OFFSET
		 THEN
		     ECC$K_LEAVECASE		! No case change for <entities>,
		 ELSE 
		     IF .I EQL HL1_OFFSET
		     THEN
			ECC$K_ALLCAP		! All cap for HL1,
		     ELSE
			ECC$K_FIRSTCAP);	! Initial cap for HL2 --> HL6.

	SB [ECC$H_POSITION] = ECC$K_LEFT;	! Position header flush-left.

	SB [ECC$H_AFTER] = 1;			! Skip 1 line after header.

	SB [ECC$H_BEFORE] =			! Skip lines before header:
		(IF .I LEQ TABLE_OFFSET
		 THEN 1				! 1 for <entities>,
		 ELSE 3);			! 3 for HL's.
		
	SB [ECC$H_SPACES] = 2;			! 2 spaces between counter and caption.

	IF .I EQL HCOLL_OFFSET 		
	THEN
	    SB [ECC$H_TESTPAGE] = 7		! Testpage for Hl's.
        ELSE
	    SB [ECC$H_TESTPAGE] = 6;		! Start new page if not n lines remaining:
						! 6 = 4 + <before> + <after> for entities,

	IF .I GEQ CHAP_OFFSET 
	THEN					! CHAPTER/APPENDIX rules
	BEGIN
	   SB [ECC$V_PAGE] = TRUE;		! Start a new page before CHAP/APP.
	   SB [ECC$H_BETWEEN] = 1;		! Skip one line between counter and caption (CHAPTER).
	   SB [ECC$V_BREAK] = TRUE;		! Put a break between counter & caption.
	   SB [ECC$H_POSITION] = ECC$K_CENTER;	! Position CHAPTERS CENTER.
	   SB [ECC$H_BEFORE] =	12;		! Skip lines before the word chapter:
	   SB [ECC$H_AFTER] = 3;		! Skip 3 lines after the word chapter.
	   SB [ECC$V_STARTODD] = FALSE;		! Don't care what page to start on.
	   SB [ECC$V_TOCPAGE] = FALSE;		! Don't put the page number in TOC.
	   SB [ECC$H_TESTPAGE] = 17;		! Start new page if not n lines remaining:
	   SB [ECC$H_CASE] = ECC$K_ALLCAP;	! Allcap for chapters.
	END;


!+
! Zero the counters initially (when called from RINIT); do not zero them
! during processing (when called from STYLE).
!-
	IF .COUNTERS
	THEN
	    BEGIN
	    SB [ECC$H_COUNTER] = 0;		! Counters ==> 0.

	    IF .I NEQ APPEND_OFFSET
	    THEN
	        SB [ECC$H_DISPLAY_DESC] =	! Display characteristics for counters  and chapters
		    TCONVRT_DEC_NOZ		! ==> decimal.
	    ELSE
	        SB [ECC$H_DISPLAY_DESC] =	! Display characteristics for counters  
		    TCONVRT_LET_UPP;		! ==> Uppercase letters.

	    SB [ECC$H_PRE_LEN] = 0;		! No text-strings before the counter.
	    SB [ECC$A_PRE_PTR] = 0;

	IF (.I GEQ EXAMP_OFFSET) AND (.I LEQ TABLE_OFFSET)
	THEN					! Give the entities a default after string
	    BEGIN
	    SB [ECC$H_POST_LEN] = .FS_LENGTH (POST_STRING);
	    SB [ECC$A_POST_PTR] = .FS_START (POST_STRING);		
	    END;

	    END;

	IF .I EQL HCOLL_OFFSET 		! Collecting-location for .STHL information.
	THEN
	    BEGIN
	    SB [ECC$V_OPTIONS] = 0;	! Zero the Option bits.
	    SB [ECC$H_RUNIN] = -1;
	    SB [ECC$H_CASE] = -1;
	    SB [ECC$H_POSITION] = -1;	! Initialize numerics to -1 so we can
	    SB [ECC$H_AFTER] = -1;	! tell if they have been specified.
	    SB [ECC$H_BEFORE] = -1;
	    SB [ECC$H_SPACES] = -1;
	    SB [ECC$H_TESTPAGE] = -1;
	    END;

	END;

    END;					! End of ECCINI

END						! End of module
ELUDOM
