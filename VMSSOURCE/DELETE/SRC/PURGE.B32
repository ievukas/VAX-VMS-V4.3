MODULE purge (			! Purge directory program
		IDENT = 'V04-000',
		ADDRESSING_MODE(EXTERNAL=GENERAL)
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  PURGE Command
!
! ABSTRACT:
!
!	This utility purges a directory, basically removing
!	old versions of a specified group of files.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Tim Halvorsen, 			CREATION DATE: Oct-1979
!
! Modified by:
!
!	V03-007	SHZ0009		Stephen H. Zalewksi,	15-Mar-1984
!		Modify PURGE algorithm to make sticky searchlists work.
!
!	V03-006	SHZ0008		Stephen H. Zalewski,	21-Feb-1984
!		Add support for sticky searchlists.
!
!	V03-005	SHZ0007		Stephen H. Zalewski,	27-Dec-1983
!		Do defaulting of file name and type in module PURGE_FILES.
!		Add performance enhancement that cuts down on the number
!		of RMS $OPEN's and $CLOSE's that must be done to purge
!		a file.
!
!	V03-004	SHZ0006		Stephen H. Zalewski	25-Feb-1983
!		If PURGE command was issued on ODS-2 disk, do not cache the
!		filenames before attempting to delete the files.
!
!	V03-003	SHZ0005		Stephen H. Zalewski,	4-Nov-1982  15:42
!		Modify PURGE to use common command qualifier package.
!
!	V03-002	SHZ0004		Stephen H. Zalewski,	26-Aug-1982  22:19
!		Fix bug in SHZ0003 that caused PURGE to ACCVIO if you purged
!		an empty directory.  Also fixed bug that caused "No files
!		purged" message to be printed even when files were purged.
!
!		Fix bug introduced in SHZ0003 that prevented dangling directory
!		entries from being deleted if the PURGE comand was issued
!		with /LOG qualifier.  
!
!		Finally, if a file is opened because of	/SINCE, /BEFORE or 
!		/LOG qualifiers being present, leave it open until we actually
!		delete it to optimize the number of FAL jobs necessary to do 
!		the job in case we are doing this over the net.
!
!	V03-001	SHZ0003		Stephen H. Zalewski,	10-Aug-1982  21:24
!		Clean up error handling.  Modified routines to use new CLI.
!		Made PURGE/LOG also display size of file purged.
!
!--

LIBRARY 'SYS$LIBRARY:STARLET.L32';			! VAX/VMS common definitions
REQUIRE 'SRC$:DELETE.REQ';				! Common DELETE definitions


FORWARD ROUTINE
    purge_files,					! Main directory routine
    build_list :	NOVALUE,			! Process each wildcard file for ods-1 disk
    purge_ods1_directory :	NOVALUE,		! Purge versions for a directory
    purge_ods2_files :	NOVALUE,			! Purge files for ODS-2 disk.
    purge_this_file :	NOVALUE;			! Routine to delete a file.


EXTERNAL ROUTINE
    del$search_error :	NOVALUE,			! Report open/search error.
    del$file_error :	NOVALUE,			! Report RMS error messages
    lib$file_scan,					! Search wildcard specifications
    lib$set_erase,					! Mark file for erase-on-delete
    lib$cvt_dtb,					! Convert decimal string to binary
    lib$get_vm,						! Allocate dynamic storage
    lib$free_vm,					! Deallocate dynamic storage
    lib$qual_file_match;				! Check to see if file should be purged.


EXTERNAL
    scan_context,
    del$cli_status:	$BBLOCK,			! CLI qualifier bitmap
    del$keepver_val,					! Number of versions to save
    del$files_deleted,					! Number of files purged
    del$file_size,					! Size of file being deleted
    del$blocks_deleted,					! Number of blocks released
    del$context,					! Context longword for common qualifier package.
    lib$_quipro,					! Return status code from common qualifier package.
    lib$_filfaimat;					! Return status code from common qualifier package.


GLOBAL
    version_list :	INITIAL(0);			! Address of linked list of versions

OWN
    versions :		INITIAL(0),			! Number of versions seen so far
    prev_name_len : 	INITIAL(0),			! Length of previous name & type
    prev_name : 	VECTOR [nam$c_maxrss,BYTE], 	! Buffer to hold previous name/type
    prev_dir_len :	INITIAL(0),			! Length of previous directory
    prev_dir :		VECTOR [nam$c_maxrss,BYTE]; 	! Buffer for previous directory


GLOBAL ROUTINE purge_files (fab_block) =

!++
! Functional description
!
!	This routine performs all the main processing of the
!	PURGE command.  The command line has already been parsed
!	and the qualifier values saved.
!
! Calling sequence
!
!	purge_files(fab) from the DELETE command mainline code
!
! Input parameters
!
!	fab_block = Address of FAB with FNA, FNS filled in.
!
! Output parameters
!
!	None
!
! Routine value
!
!	Status.
!----

BEGIN

MAP
    fab_block:	REF $BBLOCK;				! Address of FAB block

BIND
    nam_block = .fab_block [fab$l_nam]: $BBLOCK;	! Address of NAM block

LOCAL
    status,
    devnam_desc : VECTOR[2],
    itmlst : VECTOR[4,LONG],
    buffer : INITIAL(0);

IF ((NOT .$BBLOCK[fab_block [fab$l_dev], dev$v_dir])	! If not a directory device,
AND (NOT .$BBLOCK[fab_block [fab$l_dev], dev$v_net]))	! and not a network device
THEN
    RETURN false;

IF (NOT .$BBLOCK[fab_block [fab$l_dev], dev$v_net])	! If not a network device
THEN							!  then check to see if
    BEGIN						!  we are purging an ODS-2 disk.
    devnam_desc[0] = .nam_block[nam$b_dev];
    devnam_desc[1] = .nam_block[nam$l_dev];
    itmlst<0,16> = 4;
    itmlst<16,16> = dvi$_acptype;
    itmlst[1] = buffer;
    itmlst[2] = 0;
    itmlst[3] = 0;
    status = $GETDVIW (DEVNAM = devnam_desc, 
		       ITMLST = itmlst);
    IF NOT .status
    THEN
	SIGNAL_STOP (.status);
    END;

IF .buffer EQL dvi$c_acp_f11v2				! If this is an ODS-2 disk
    THEN purge_ods2_files (.fab_block)			!  then use optimized purge routine
    ELSE build_list(.fab_block);			!  else, use old one.

RETURN true;
END;


ROUTINE build_list (fab_block): NOVALUE =

!---
!
! Functional description
!
!  	This routine is called as an action routine from the directory wildcard 
!  	searching process.  It is given a FAB containing the full name
!	of the file to be processed.  It is used when purging an ods-1 disk to
!	build the filenames into an ods-2 list.
!
! Input parameters
!
!	fab_block = Address of FAB
!
! Output parameters
!
!	None
!
!----

BEGIN

MAP
    fab_block:	REF $BBLOCK;				! Address of FAB

BIND
    nam = .fab_block [fab$l_nam]: $BBLOCK;		! Address of NAM

LOCAL
    status,						! Status code
    dir_len,						! Length of device/directory
    version,						! Version number in binary form
    length,						! Length of new version entry
    entry:	REF VECTOR,				! Address of new version entry
    prev:	REF VECTOR,				! Address of previous entry scanned
    curr:	REF VECTOR;				! Address of current entry scanned

!
! If we have reached a new directory, then peruse the linked
! list of versions and delete the all but the # explicitly kept.
!

dir_len = .nam [nam$b_node] + .nam [nam$b_dev] + .nam [nam$b_dir];

IF CH$NEQ(						! If new directory
	.prev_dir_len, prev_dir,
	.dir_len, .nam [nam$l_rsa], 0)
THEN
    BEGIN
    CH$MOVE(.dir_len, .nam [nam$l_rsa], prev_dir);
    prev_dir_len = .dir_len;
    purge_ods1_directory(version_list); 		! Delete old versions
    END;

!
! Convert the version string to binary form
!

status = LIB$CVT_DTB(.nam [nam$b_ver]-1, 		! Store version in binary
		.nam [nam$l_ver]+1,
		version);
IF NOT .status						! If error converting value,
THEN
    BEGIN
    SIGNAL(.status);					! signal the error
    RETURN;
    END;

!
! Add this version to the ordered linked list of files for this directory.
! This list is ordered first by file name & type in ascending order, and
! then by version in descending order (this is the same as ODS-2).
!

length = 6*4 + .nam [nam$b_rsl];			! Length of overhead plus filespec
status = LIB$GET_VM(length,entry);			! Allocate storage for entry
IF NOT .status						! If error allocating storage,
THEN
    SIGNAL_STOP(.status);				! then signal the error

entry [1] = .nam [nam$b_name] + .nam [nam$b_type]; 	! Length of name/type
entry [2] = entry [6]					! Address of name/type
	+ (.nam [nam$l_name] - .nam [nam$l_rsa]);
entry [3] = .version;					! Store binary version number
entry [4] = .nam [nam$b_rsl];				! Store length of filespec
entry [5] = entry [6];					! and address of filespec
CH$MOVE(.nam [nam$b_rsl], .nam [nam$l_rsa], entry [6]); ! Store full filespec

prev = version_list;					! Address of previous entry
curr = .prev [0];					! Start at first entry

WHILE .curr NEQ 0					! For each entry in list,
DO
    BEGIN
    LOCAL comparison;					! -1 if less, 0 if equal, 1 if greater
    comparison = CH$COMPARE(.entry [1], .entry [2],
	.curr [1], .curr [2], 0);			! Compare new to old name/type
    IF .comparison LSS 0				! If found place to insert entry,
	OR (.comparison EQL 0				! (ascending order by name/type,
       AND .entry [3] GTRU .curr [3])			! (then descending order by version)
    THEN
	EXITLOOP;					! then exit the loop
    prev = .curr;					! Save address of previous entry done
    curr = .curr [0];					! and link to next in list
    END;

entry [0] = .prev [0];					! Make new entry point to next in list
prev [0] = .entry;					! Make previous entry point to new one

RETURN;

END;

GLOBAL ROUTINE purge_ods1_directory (list) : NOVALUE =

!++
! Functional description:
!
!	This routine purges all versions beyond the number explicitly kept for
!	an ods-1 directory.
!
! Inputs:
!
!	list = Address of listhead of version list
!			0) link to next entry
!			1-2) descriptor of file name & type
!			3) version number in binary
!			4-5) descriptor of filespec
!			6) File specification follows
!
! Outputs:
!
!	None, the old versions are deleted.
!---

BEGIN

BIND context = .del$context : BITVECTOR[32];

OWN
    nam:	$NAM(),					! NAM used for deleting open files
    xabpro:	$XABPRO(),				! XAB needed for common qualifiers package
    xabdat:	$XABDAT(NXT = xabpro),			! XAB needed for common qualifiers package
    fab:	$FAB(NAM = nam,				! FAB used for deleting versions
		     XAB = xabdat);			! Chain XAB's to FAB.

LOCAL
    status,
    prev_name:	VECTOR [2],				! Descriptor of previous name & type
    prev_buffer: VECTOR [nam$c_maxrss,BYTE], 		! Buffer to hold previous name/type
    length,						! Length of current entry
    entry:	REF VECTOR,				! Current entry in list
    next;						! Next entry in list


prev_name [0] = 0;					! Initialize previous name/type = null
entry = ..list;						! Start at first entry in list

WHILE .entry NEQ 0					! For each entry in list,
DO
    BEGIN
    IF CH$NEQ(.prev_name [0], .prev_name [1],
	.entry [1], .entry [2], 0)			! If new file name & type,
    THEN
	BEGIN
	versions = 0;					! Reset number of versions seen
	context[0] = 0;					! Prevent confirm messgae.
	prev_name [0] = .entry [1];			! Save "current" name & type
	prev_name [1] = prev_buffer;
	CH$MOVE(.entry [1], .entry [2], .prev_name [1]);
	END;

    fab [fab$b_fns] = .entry [4];			! Copy length and address
    fab [fab$l_fna] = .entry [5];			! of string into FAB and
    nam [nam$b_rsl] = .entry [4];			! NAM blocks.
    nam [nam$l_rsa] = .entry [5];

    purge_this_file(fab);

!
! Delete the storage used for this version entry
!

    next = .entry [0];					! Save address of next one
    length = 6*4 + .entry [4];				! Length of entry
    status = LIB$FREE_VM(length,entry);			! Delete storage for entry
    IF NOT .status					! If error deleting storage,
    THEN
	SIGNAL(.status);				! then only signal the error
    entry = .next;					! Link to next in list
    END;

.list = 0;						! Re-init listhead

END;

ROUTINE purge_ods2_files (fab_block) : NOVALUE =

!++
! Functional description:
!
!	This routine purges all versions beyond the number explicitly kept for
!	an ods-2 disk.
!
! Inputs:
!
!	fab_block = Address of FAB
!
! Outputs:
!
!	None, the old versions are deleted.
!---

BEGIN

MAP
    fab_block : REF $BBLOCK;				! Address of FAB

BIND 
    context = .del$context : BITVECTOR[32],		! Context bitmap for common qualifier package.
    nam = .fab_block [fab$l_nam] : $BBLOCK;		! Address of NAM block.

LOCAL
    name_len;						! Size of a filename.


name_len = .nam [nam$b_node] + .nam [nam$b_dev] + .nam [nam$b_dir] +
	   .nam [nam$b_name] + .nam[nam$b_type];

IF CH$NEQ(						! If new device, directory, name or type
	.prev_name_len, prev_name,
	.name_len, .nam [nam$l_rsa], 0)
THEN							! Then
    BEGIN						
    CH$MOVE(.name_len, .nam [nam$l_rsa], prev_name);	! Save new file spec,
    prev_name_len = .name_len;				!  and its size.
    versions = 1;					! Reset the version count.
    context[0] = 0;					! Disable /CONFIRM.
    RETURN;
    END
ELSE
    purge_this_file(.fab_block);			! Attempt to purge this file.

END;

ROUTINE purge_this_file (fab_block) : NOVALUE =

!++
! Functional description:
!
!	This routine accepts a filename, and if it exceeds the /KEEP qualifier,
!	attempts to delete the file.
!
! Inputs:
!
!	fab_block  = Address of the FAB
!
! Outputs:
!
!	None, the file is deleted if /KEEP qualifier is exceeded.
!---

BEGIN

MAP
    fab_block : 		REF $BBLOCK;

BIND 
    context = .del$context :		BITVECTOR[32],
    nam = .fab_block [fab$l_nam] :	$BBLOCK,
    fab = .fab_block :			$BBLOCK;

LOCAL
    prompt_desc,					! Address of prompt arguments
    name_desc : VECTOR[2],				! Descriptor for file name.
    status;

name_desc[0] = .nam[nam$b_rsl];				! Save file name and size.
name_desc[1] = .nam[nam$l_rsa];
prompt_desc = name_desc;				! Point prompt_desc to it.


IF .del$cli_status [del$v_log_msg] OR			! If /LOG requested,
   .del$cli_status [del$v_open_file]			!  or open_file bit set
THEN
    BEGIN
    fab [fab$l_alq] = 0;				! Set block size of file to be zero because
    $OPEN (FAB = fab);					! Open the file.
    del$file_size = .fab [fab$l_alq];			! Get block size of file.
    END;

IF .del$cli_status[del$v_conf_prompt]			! If user said /CONFIRM, and
  AND (.versions EQL .del$keepver_val)			!  we have exceeded /KEEP limit
    THEN context[0] = 1;				!  then enable /CONFIRM option.

status = lib$qual_file_match( del$context,fab,0,	! Does this file meet purge criteria?
			$descriptor('!AS, delete? [N]:'),
			prompt_desc,0);

IF NOT .status						! If failure status returned,
THEN
    BEGIN
    IF .status EQL lib$_quipro				! If user said CNTRL/Z
    THEN						!  then stop processing.
	del$cli_status [del$v_cntrl_z_stop] = TRUE;
    IF (.status NEQ lib$_quipro) AND			! If user said CNTRL/Z
       (.status NEQ lib$_filfaimat)			!  or file did not meet criteria
    THEN						!  then do not report an error.
    	del$file_error(msg$_filnotacc,fab);
    $CLOSE ( FAB = fab);				! Ask RMS to close the file.
    END
ELSE
    versions = .versions + 1;				! Increment versions seen


IF (.versions GTR .del$keepver_val) AND .status		! If past specified limit,
THEN							!  then delete the file as we have exhausted
    BEGIN						!  the keep version count.
    IF .del$cli_status [del$v_erase]			! If /ERASE requested
    THEN
    	BEGIN
     	$CLOSE (FAB = fab);				! Close the file so that we cn do it.
	status = lib$set_erase (name_desc);		! Set ERASE bit in header.
	fab[fab$l_sts] = .status;			!  and save the status.
	fab[fab$l_stv] = 0;
	END;

    IF .status						! If successful so far,
    THEN
	BEGIN
	IF .fab [fab$w_ifi] NEQ 0			! If the file is open,
	THEN
	    BEGIN
	    fab [fab$v_dlt] = TRUE;			!  then set the deletion bit,
	    status = $CLOSE ( FAB = fab);		!  and ask RMS to close and delete the file.
	    fab [fab$v_dlt] = FALSE;			! Turn off the delete bit to avoide side effects.
	    END
	ELSE
	    status = $ERASE ( FAB = fab);		! Erase the file.
	END;

    IF .status						! If successful,
    THEN
        BEGIN
	IF .del$cli_status [del$v_log_msg] THEN		! If logging requested,
	    BEGIN
	    del$files_deleted = .del$files_deleted + 1; ! Increment number of files purged
	    del$blocks_deleted = .del$blocks_deleted + .del$file_size; ! Increment total blocks deleted by this file size
	    put_message(msg$_filpurg,3,name_desc,	! Output log message
			.del$file_size);
	    END;
	END
    ELSE
    	del$file_error(msg$_filnotpur,fab)		! Delete failed, output message giving reason
    END;

$CLOSE (FAB=fab);					! Make sure file is closed!

END;

END
ELUDOM

