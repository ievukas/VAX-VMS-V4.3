%TITLE	'Modules Configurator, Console, Loader, Looper Parsing'
MODULE NCPSTAMOD (IDENT = 'V04-000',LIST(NOOBJECT)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Control Program (NCP)
!
! ABSTRACT:
!
!	States and data for the parsing of NCP Configurator module parameters
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Bob Grosso October 1982
!
! MODIFIED BY:
!
!
!--

%SBTTL	'Definitions'

!
! INCLUDE FILES:
!

	LIBRARY 'LIB$:NMALIBRY';
	LIBRARY 'LIB$:NCPLIBRY';
	LIBRARY 'SYS$LIBRARY:TPAMAC';

!
! EXTERNAL REFERENCES:
!

	ACT_DFN			! Action routine externals

EXTERNAL
	NCP$GL_QUALPRS;		! Flag presence of qualifier

LITERAL
	QUALPRESENT = 1;	! Flag presence of qualifier on command line


%SBTTL	'Set Parameter blocks'

!
!	Set Configurator Parameter Blocks
!

	BUILD_PCL

	(MCF,					! Module Configurator

	CIR, TKN,	PCCN_CIR, ,

	SUR, NUMB,	PCCN_SUR, ,

	, END, , ,

	)


	BUILD_PBK

	(MCF,					! Module Configurator

	CIR, TKN, , ,				! Circuit is a qualifier
	KCI, LITB, NMA$C_ENT_KNO, MCF_CIR,	! Known circuits

	SUR_ENAB, LITB, NMA$C_SUR_ENA, MCF_SUR,
	SUR_DISAB, LITB, NMA$C_SUR_DIS, MCF_SUR,

	)

BIND	PDB$G_MCF_ENT = UPLIT BYTE(0, %ASCIC 'CONFIGURATOR');

	BUILD_SDB
	(MCF, NMA$C_ENT_MOD, MCF_ENT, MCF)

!
!	Set Console Parameter Blocks
!

	BUILD_PCL

	(MCS,					! Module Console

	RTR, NUMB,	PCCO_RTR, ,

	, END, , ,

	)


	BUILD_PBK

	(MCS,					! Module Console

	RTR, NUMB, , ,

	)

BIND	PDB$G_MCS_ENT = UPLIT BYTE(0, %ASCIC 'CONSOLE');

	BUILD_SDB
	(MCS, NMA$C_ENT_MOD, MCS_ENT, MCS)

!
!	Set Loader Parameter Blocks
!

	BUILD_PCL

	(MLD,					! Module Loader

	ASS, NUMB,	PCLD_ASS, ,

	, END, , ,

	)


	BUILD_PBK

	(MLD,					! Module Loader

	ASS_ENAB, LITB, NMA$C_ASS_ENA, MLD_ASS,
	ASS_DISAB, LITB, NMA$C_ASS_ENA, MLD_ASS,

	)

BIND	PDB$G_MLD_ENT = UPLIT BYTE(0, %ASCIC 'LOADER');

	BUILD_SDB
	(MLD, NMA$C_ENT_MOD, MLD_ENT, MLD)

!
!	Set Looper Parameter Blocks
!

	BUILD_PCL

	(MLP,					! Module Looper

	ASS, NUMB,	PCLP_ASS, ,

	, END, , ,

	)


	BUILD_PBK

	(MLP,					! Module Looper

	ASS_ENAB, LITB, NMA$C_ASS_ENA, MLP_ASS,
	ASS_DISAB, LITB, NMA$C_ASS_ENA, MLP_ASS,

	)

BIND	PDB$G_MLP_ENT = UPLIT BYTE(0, %ASCIC 'LOOPER');

	BUILD_SDB
	(MLP, NMA$C_ENT_MOD, MLP_ENT, MLP)

%SBTTL	'Clear Parameter blocks'

!
!	Clear Configurator Parameter Blocks
!


	BUILD_PCL

	(CCF,					! Module Configurator

	CIR, TKN,	PCCN_CIR, ,

	SUR, LITB,	PCCN_SUR, ,

	, END, , ,

	)

	BUILD_PBK

	(CCF,					! Module Configurator

	ALL, LITB, 0, VRB_ALL,
	CIR, TKN, 0, ,				! Circuit is a qualifier
	KCI, LITB, NMA$C_ENT_KNO, CCF_CIR,	! Known circuits

	SUR, LITB, 0, ,

	)

	BUILD_SDB

	(CCF, NMA$C_ENT_MOD, MCF_ENT, CCF)



!
!	Clear Console Parameter Blocks
!


	BUILD_PCL

	(CCS,					! Module Console

	RTR, LITB,	PCCO_RTR, ,

	, END, , ,

	)

	BUILD_PBK

	(CCS,					! Module Console

	ALL, LITB, 0, VRB_ALL,

	RTR, LITB, 0, ,

	)

	BUILD_SDB

	(CCS, NMA$C_ENT_MOD, MCS_ENT, CCS)



!
!	Clear Loader Parameter Blocks
!


	BUILD_PCL

	(CLD,					! Module Loader


	ASS, LITB,	PCLD_ASS, ,

	, END, , ,

	)

	BUILD_PBK

	(CLD,					! Module Loader

	ALL, LITB, 0, VRB_ALL,

	ASS, LITB, 0, ,

	)

	BUILD_SDB

	(CLD, NMA$C_ENT_MOD, MLD_ENT, CLD)



!
!	Clear Looper Parameter Blocks
!


	BUILD_PCL

	(CLP,					! Module Looper

	ASS, LITB,	PCLP_ASS, ,

	, END, , ,

	)

	BUILD_PBK

	(CLP,					! Module Looper

	ALL, LITB, 0, VRB_ALL,

	ASS, LITB, 0, ,

	)

	BUILD_SDB

	(CLP, NMA$C_ENT_MOD, MLP_ENT, CLP)



%SBTTL	'Prompt strings'

!
!	Build prompt strings
!

BIND

	PROMPT_STRINGS
	(MCF,

	DAT, '              (CIRCUIT name, or KNOWN): ',
	KWN, '                            (CIRCUITS): ',
	SUR, 'Surveillance flag  (ENABLED, DISABLED): ',

	),

	PROMPT_STRINGS
	(CCF,

	DAT, '              (CIRCUIT name, or KNOWN): ',
	KWN, '                            (CIRCUITS): ',
	ALL, 'All Configurator parameters     (Y, N): ',

	SUR, 'Surveillance flag               (Y, N): ',

	);

!
!	Module Console prompts
!
BIND

	PROMPT_STRINGS
	(MCS,

	RTR, 'Reservation timer    (1-65535 seconds): ',

	),

	PROMPT_STRINGS
	(CCS,

	ALL, 'All Console parameters          (Y, N): ',

	RTR, 'Reservation timer               (Y, N): ',

	);

!
!	Module Loader prompts
!
BIND

	PROMPT_STRINGS
	(MLD,

	ASS, 'Assistance control (ENABLED, DISABLED): ',

	),

	PROMPT_STRINGS
	(CLD,

	ALL, 'All Loader parameters           (Y, N): ',

	ASS, 'Assistance control              (Y, N): ',

	);

!
!	Module Looper prompts
!
BIND

	PROMPT_STRINGS
	(MLP,

	ASS, 'Assistance control (ENABLED, DISABLED): ',

	),

	PROMPT_STRINGS
	(CLP,

	ALL, 'All Looper parameters           (Y, N): ',

	ASS, 'Assistance control              (Y, N): ',

	);

%SBTTL	'Declare entry points to TPARSE tables'

!
!	Declare entry points to this TPARSE table
!

$INIT_STATE (NCP$G_STTBL_MOD, NCP$G_KYTBL_MOD);

FORWARD
	ST_MCF:		VECTOR [0],	! Set Module Configurator
	ST_CCF:		VECTOR [0],	! Clear Module Configurator
	ST_MCS:		VECTOR [0],	! Set Module Console
	ST_CCS:		VECTOR [0],	! Clear Module Console
	ST_MLD:		VECTOR [0],	! Set Module Loader
	ST_CLD:		VECTOR [0],	! Clear Module Loader
	ST_MLP:		VECTOR [0],	! Set Module Looper
	ST_CLP:		VECTOR [0];	! Clear Module Looper


GLOBAL BIND
	NCP$G_STTBL_MODCNF = ST_MCF,
	NCP$G_KYTBL_MODCNF = NCP$G_KYTBL_MOD,
	NCP$G_STTBL_CCF = ST_CCF,
	NCP$G_KYTBL_CCF = NCP$G_KYTBL_MOD,

	NCP$G_STTBL_MODCNS = ST_MCS,
	NCP$G_KYTBL_MODCNS = NCP$G_KYTBL_MOD,
	NCP$G_STTBL_CCS = ST_CCS,
	NCP$G_KYTBL_CCS = NCP$G_KYTBL_MOD,

	NCP$G_STTBL_MODLOA = ST_MLD,
	NCP$G_KYTBL_MODLOA = NCP$G_KYTBL_MOD,
	NCP$G_STTBL_CLD = ST_CLD,
	NCP$G_KYTBL_CLD = NCP$G_KYTBL_MOD,

	NCP$G_STTBL_MODLOO = ST_MLP,
	NCP$G_KYTBL_MODLOO = NCP$G_KYTBL_MOD,
	NCP$G_STTBL_CLP = ST_CLP,
	NCP$G_KYTBL_CLP = NCP$G_KYTBL_MOD;


%SBTTL	'SET Configurator Module Parameters'

!
!	SET/DEFINE MODULE Configurator parameter states
!

$STATE	(ST_MCF,
	(TPA$_EOS),
	(TPA$_LAMBDA, ST_MCF_DAT)
	);

$STATE	(,
	(TPA$_LAMBDA, , ACT$PRMPT, , , PMT$G_MCF_DAT));

!
!	Configurator is qualified by Circuit or Known Circuits
!
$STATE	(ST_MCF_DAT,
	('CIRCUIT'),
	('KNOWN', ST_MCF_DAT_KWN),
	(TPA$_EOS, ST_MCF_PMT_CIR, ACT$SAVPRM, , ,PBK$G_MCF_KCI),
	);

$STATE	(,
	((SE_CIRC_ID), ST_MCF_PMT_CIR, ACT$SAVPRM, 
		QUALPRESENT, NCP$GL_QUALPRS, PBK$G_MCF_CIR));

$STATE	(ST_MCF_DAT_KWN,
	(TPA$_LAMBDA));

	COMMAND_PROMPT
	(MCF, KWN, NCP$_INVKEY,

	('CIRCUITS', ST_MCF_PMT_CIR, ACT$SAVPRM, , ,PBK$G_MCF_KCI),
	)
!
!	Prompt for circuit parameters
!
$STATE	(ST_MCF_PMT_CIR,
	(TPA$_EOS),			! start prompting if EOS
	(TPA$_LAMBDA, ST_MCF_PRC));	! Else try parsing parameters

	PROMPT_STATES
	(MCF,

	SUR)


$STATE	(ST_MCF_DOIT,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_MCF),
	);


$STATE	(ST_MCF_PRC,
	((SE_ALL), ST_MCF_DOIT),

	DISPATCH_STATES
	(MCF,

	SUR, 'SURVEILLANCE',

	)

	,(TPA$_EOS, ST_MCF_DOIT)
	);

$STATE	(ST_MCF_SUR,
	
	KEYWORD_STATE
	(MCF,

	SUR_ENAB,	'ENABLED',
	SUR_DISAB,	'DISABLED',

	));

!
!	Process States
!
	PROCESS_STATES
	(MCF,

	SUR ,

	)



%SBTTL	'SET Console Module Parameters'

!
!	SET/DEFINE MODULE Console parameter states
!

$STATE	(ST_MCS,
	(TPA$_EOS),
	(TPA$_LAMBDA, ST_MCS_PRC)
	);


	PROMPT_STATES
	(MCS,

	RTR)
	

$STATE	(ST_MCS_DOIT,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_MCS),
	);


$STATE	(ST_MCS_PRC,
	((SE_ALL), ST_MCS_DOIT),

	DISPATCH_STATES
	(MCS,

	RTR, 'RESERVATION',

	)

	,(TPA$_EOS, ST_MCS_DOIT)
	);

!
!	Process States
!
	PROCESS_STATES
	(MCS,

	RTR, 'TIMER',

	)

!
!	Subexpression states
!
	SUB_EXPRESSIONS
	(MCS,

	RTR, TPA$_DECIMAL,

	)



%SBTTL	'SET Loader Module Parameters'

!
!	SET/DEFINE Loader parameter states
!

$STATE	(ST_MLD,
	(TPA$_EOS),
	(TPA$_LAMBDA, ST_MLD_PRC)
	);


	PROMPT_STATES
	(MLD,

	ASS)
	

$STATE	(ST_MLD_DOIT,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_MLD),
	);


$STATE	(ST_MLD_PRC,
	((SE_ALL), ST_MLD_DOIT),

	DISPATCH_STATES
	(MLD,

	ASS, 'ASSISTANCE',

	)

	,(TPA$_EOS, ST_MLD_DOIT)
	);

!
!	Process States
!
	PROCESS_STATES
	(MLD,

	ASS, ,

	)

$STATE	(ST_MLD_ASS,

	KEYWORD_STATE
	(MLD,

	ASS_ENAB,	'ENABLED',
	ASS_DISAB,	'DISABLED',

	));


%SBTTL	'SET Looper Module Parameters'

!
!	SET/DEFINE Looper parameter states
!

$STATE	(ST_MLP,
	(TPA$_EOS),
	(TPA$_LAMBDA, ST_MLP_PRC)
	);


	PROMPT_STATES
	(MLP,

	ASS)
	

$STATE	(ST_MLP_DOIT,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_MLP),
	);


$STATE	(ST_MLP_PRC,
	((SE_ALL), ST_MLP_DOIT),

	DISPATCH_STATES
	(MLP,

	ASS, 'ASSISTANCE',

	)

	,(TPA$_EOS, ST_MLP_DOIT)
	);

!
!	Process States
!
	PROCESS_STATES
	(MLP,

	ASS, ,

	)

$STATE	(ST_MLP_ASS,

	KEYWORD_STATE
	(MLP,

	ASS_ENAB,	'ENABLED',
	ASS_DISAB,	'DISABLED',

	));

%SBTTL	'CLEAR Configurator Module Parameters'

!
!	CLEAR/PURGE MODULE Configurator parameter states
!

$STATE	(ST_CCF,
	(TPA$_EOS),
	(TPA$_LAMBDA, ST_CCF_DAT)
	);

$STATE	(,
	(TPA$_LAMBDA, , ACT$PRMPT, , , PMT$G_CCF_DAT));

!
!	Configurator is qualified by Circuit or Known Circuits
!
$STATE	(ST_CCF_DAT,
	('CIRCUIT'),
	('KNOWN', ST_CCF_DAT_KWN),
	(TPA$_EOS, ST_CCF_PMT_CIR, ACT$SAVPRM, , ,PBK$G_CCF_KCI),
	);

$STATE	(,
	((SE_CIRC_ID), ST_CCF_PMT_CIR, ACT$SAVPRM, 
		QUALPRESENT, NCP$GL_QUALPRS, PBK$G_CCF_CIR));

$STATE	(ST_CCF_DAT_KWN,
	(TPA$_LAMBDA));

	COMMAND_PROMPT
	(CCF, KWN, NCP$_INVKEY,

	('CIRCUITS', ST_CCF_PMT_CIR, ACT$SAVPRM, , ,PBK$G_CCF_KCI),
	)
!
!	Prompt for circuit parameters
!
$STATE	(ST_CCF_PMT_CIR,
	(TPA$_EOS),			! start prompting if EOS
	(TPA$_LAMBDA, ST_CCF_PRC));	! Else try parsing parameters

	QUERY_STATES
	(CCF,

	ALL, SUR)


$STATE	(ST_CCF_DOIT,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_CCF),
	);


$STATE	(ST_CCF_PRC,
	((SE_ALL), ST_CCF_DOIT),

	DISPATCH_STATES
	(CCF,

	SUR, 'SURVEILLANCE',

	)

	,(TPA$_EOS, ST_CCF_DOIT)
	);


!
!	Process States
!
	PROCESS_STATES
	(CCF,

	SUR ,

	)

!
!	Subexpression states
!

	SUB_EXPRESSIONS
	(CCF,

	ALL, TPA$_EOS,
	SUR, TPA$_LAMBDA,

	)

%SBTTL	'CLEAR Console Module Parameters'

!
!	CLEAR/PURGE MODULE Console parameter states
!

$STATE	(ST_CCS,
	(TPA$_EOS),
	(TPA$_LAMBDA, ST_CCS_PRC)
	);


	QUERY_STATES
	(CCS,

	ALL, RTR)


$STATE	(ST_CCS_DOIT,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_CCS),
	);


$STATE	(ST_CCS_PRC,
	((SE_ALL), ST_CCS_DOIT),

	DISPATCH_STATES
	(CCS,

	RTR, 'RESERVATION',

	)

	,(TPA$_EOS, ST_CCS_DOIT)
	);


!
!	Process States
!
	PROCESS_STATES
	(CCS,

	RTR, 'TIMER',

	)

!
!	Subexpression states
!

	SUB_EXPRESSIONS
	(CCS,

	ALL, TPA$_EOS,
	RTR, TPA$_LAMBDA,

	)

%SBTTL	'CLEAR Loader Module Parameters'

!
!	CLEAR/PURGE MODULE Loader parameter states
!

$STATE	(ST_CLD,
	(TPA$_EOS),
	(TPA$_LAMBDA, ST_CLD_PRC)
	);


	QUERY_STATES
	(CLD,

	ALL, ASS)


$STATE	(ST_CLD_DOIT,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_CLD),
	);


$STATE	(ST_CLD_PRC,
	((SE_ALL), ST_CLD_DOIT),

	DISPATCH_STATES
	(CLD,

	ASS, 'ASSISTANCE',

	)

	,(TPA$_EOS, ST_CLD_DOIT)
	);


!
!	Process States
!
	PROCESS_STATES
	(CLD,

	ASS, ,

	)

!
!	Subexpression states
!

	SUB_EXPRESSIONS
	(CLD,

	ALL, TPA$_EOS,
	ASS, TPA$_LAMBDA,

	)

%SBTTL	'CLEAR Looper Module Parameters'

!
!	CLEAR/PURGE MODULE Looper parameter states
!

$STATE	(ST_CLP,
	(TPA$_EOS),
	(TPA$_LAMBDA, ST_CLP_PRC)
	);


	QUERY_STATES
	(CLP,

	ALL, ASS)


$STATE	(ST_CLP_DOIT,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_CLP),
	);


$STATE	(ST_CLP_PRC,
	((SE_ALL), ST_CLP_DOIT),

	DISPATCH_STATES
	(CLP,

	ASS, 'ASSISTANCE',

	)

	,(TPA$_EOS, ST_CLP_DOIT)
	);


!
!	Process States
!
	PROCESS_STATES
	(CLP,

	ASS, ,

	)

!
!	Subexpression states
!

	SUB_EXPRESSIONS
	(CLP,

	ALL, TPA$_EOS,
	ASS, TPA$_LAMBDA,

	)

%SBTTL	'Define Subexpressions'

!
!	Define Subexpressions from Library
!

	SEM_ALL			! All parameter
	SEM_CIRC_ID		! Circuit name
	SEM_LINE_ID
	SEM_QUERY		! Query state subexpressions

END
ELUDOM
