	$BEGIN	RMS0FSCN,000,RM$RMS,<SCAN FILENAME STRING SYSTEM SERVICE>

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY: RMS32
;
; ABSTRACT:
;		Routine to perform the $FILESCAN function to 
;		scan a string in order to recognize a file specification.
;
;
; ENVIRONMENT:
;
; AUTHOR: Ron Schaefer,		 Creation Date: 13-Apr-1983
;
; Modified By:
;
;	V03-005	JEJ0028		J E Johnson		11-Apr-1984
;		Minor equate file cleanup.
;
;	V03-004	RAS0223		Ron Schaefer		16-Dec-1983
;		Change $SCBDEF and SCB$xxx to $FSCBDEF and FSCB$xxx.
;
;	V03-003	KBT0575		Keith B. Thompson	5-Aug-1983
;		Add new parameter and root directory field
;
;	V03-002	SOP0001		J. R. Sopka		20 July 1983
;		Access LENGTH and POINTER fields of file specification string
;		descriptor separately as WORD and LONGWORD fields respectively.
;		This routine assumes that the descriptor is not a varying length
;		string type which points to a current length count followed by
;		the ASCII text characters.
;
;--
;


	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; MACROS:
;

	$DSCDEF		; define descriptor field offsets and constants
	$FSCNDEF	; define item list fields and codes
	$FSCBDEF	; define RMS SCAN_STRING scratch block size
	$SSDEF		; Define system return codes

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;


	.SBTTL	RMS$FILESCAN - $FILESCAN ROUTINE

;++
; RMS$FILESCAN - Scan a string for a file specification
;
;  This module performs the following functions:
;
;	1. Checks for valid input string.
;	2. Calls RM$SCAN_STRING to parse the input string.
;	3. Checks for valid output descriptor list.
;	4. Copies the information returned by RM$SCAN_STRING
;	   into the output descriptor list.
;
; CALLING SEQUENCE:
;
;	Entered from EXEC as a result of user's calling SYS$FILESCAN
;
; INPUT PARAMETERS:
;
;	STRDESC   =  Fixed-length type text string descriptor for the
;	 4(AP)		file specification string to be parsed.
;
; IMPLICIT INPUTS:
;
;	None
;
; OUTPUT PARAMETERS:
;
;	DESCLST   =  List of item descriptors for the information to be returned.
;	 8(AP)		Each descriptor contains an ITEM_CODE field specifying
;			a portion of the file specification string for which 
;			a LENGTH and ADDR are to be returned.
;			
;	FLDFLAGS = Longword to receive flags of which fields are present
;	 12(AP)		in the string (optional)
;
;	R1	destroyed
;	R0	status code
;
; IMPLICIT OUTPUTS:
;
;	None
;
; COMPLETION CODES:
;
;	SS$_NORMAL
;	SS$_ACCVIO
;	SS$_BADPARAM
;
; SIDE EFFECTS:
;
;	None
;
;--


	$ENTRY	RMS$FILESCAN

	MOVL	4(AP),R0			; get input string
	IFNORD	#DSC$K_S_BLN,(R0),ACCVIO	; can we read the descriptor?
	MOVZWL	DSC$W_LENGTH(R0),R6		; get length field 
	MOVL	DSC$A_POINTER(R0),R7		; get pointer field
	IFNORD	R6,(R7),ACCVIO			; can we read the string?
	SUBL2	#FSCB$C_BLN,SP			; make scratch space
	MOVL	SP,R11				; and point at it
	JSB	RM$SCAN_STRING			; scan the string
	MOVL	8(AP),R10			; get output desciptor addr
	BEQL	DONE				; if none, try flags argument
	IFNOWRT	#4,(R10),ACCVIO			; can we write the first entry?
NXTITM:	MOVZWL	FSCN$W_ITEM_CODE(R10),R0	; get next item code
	BEQL	DONE				; zero code means end of list
	IFNOWRT	#FSCN$S_ITEM_LEN,-		; check access to address field
		FSCN$L_ADDR(R10),ACCVIO		;  and code field of next item
	CASE	SRC=R0,TYPE=W,LIMIT=#FSCN$_FILESPEC,-
		DISPLIST=<-
		FILESPEC,-			; FSCN$_FILESPEC
		NODE,-				; FSCN$_NODE
		DEVICE,-			; FSCN$_DEVICE
		ROOT,-				; FSCN$_ROOT
		DIRECTORY,-			; FSCN$_DIRECTORY
		NAME,-				; FSCN$_NAME
		TYPE,-				; FSCN$_TYPE
		VERSION>			; FSCN$_VERSION
	MOVL	#SS$_BADPARAM,R0		; no such item
	RET

DONE:	MOVL	12(AP),R10			; get flags longword addr
	BEQL	SUCCESS				; branch if not requested
	IFNOWRT	#4,(R10),ACCVIO			; can we write it?

	ASSUME	FSCB$V_NODE	EQ	FSCN$V_NODE
	ASSUME	FSCB$V_DEVICE	EQ	FSCN$V_DEVICE
	ASSUME	FSCB$V_ROOT	EQ	FSCN$V_ROOT
	ASSUME	FSCB$V_DIRECTORY	EQ	FSCN$V_DIRECTORY
	ASSUME	FSCB$V_NAME	EQ	FSCN$V_NAME
	ASSUME	FSCB$V_TYPE	EQ	FSCN$V_TYPE
	ASSUME	FSCB$V_VERSION	EQ	FSCN$V_VERSION

	MOVZBL	FSCB$B_FLDFLAGS(R11),(R10)	; store flags
SUCCESS:
	MOVL	#SS$_NORMAL,R0			; success
	RET
	
ACCVIO:	MOVL	#SS$_ACCVIO,R0			; return accvio
	RET

NULLITEM:
	CLRW	FSCN$W_LENGTH(R10)		; set no length
	CLRL	FSCN$L_ADDR(R10)		; and no addr
NITEM:	ADDL2	#FSCN$S_ITEM_LEN,R10		; advance to next descriptor
	BRW	NXTITM				; and continue

FILESPEC:
	TSTB	FSCB$B_FLDFLAGS(R11)			; is any field present?
	BEQL	NULLITEM
	MOVW	FSCB$Q_FILESPEC(R11),FSCN$W_LENGTH(R10)	; set length
	MOVL	FSCB$Q_FILESPEC+4(R11),FSCN$L_ADDR(R10)	; set addr
	BRB	NITEM
NODE:
	BBC	#FSCB$V_NODE,-				; is this field present?
		FSCB$B_FLDFLAGS(R11),NULLITEM
	MOVW	FSCB$Q_NODE(R11),FSCN$W_LENGTH(R10)	; set length
	MOVL	FSCB$Q_NODE+4(R11),FSCN$L_ADDR(R10)	; set addr
	BRB	NITEM
DEVICE:
	BBC	#FSCB$V_DEVICE,-				; is this field present?
		FSCB$B_FLDFLAGS(R11),NULLITEM
	MOVW	FSCB$Q_DEVICE(R11),FSCN$W_LENGTH(R10)	; set length
	MOVL	FSCB$Q_DEVICE+4(R11),FSCN$L_ADDR(R10)	; set addr
	BRB	NITEM

ROOT:	BBC	#FSCB$V_ROOT,-				; is this field present?
		FSCB$B_FLDFLAGS(R11),NULLITEM
	MOVW	FSCB$Q_ROOT(R11),FSCN$W_LENGTH(R10)	; set length
	MOVL	FSCB$Q_ROOT+4(R11),FSCN$L_ADDR(R10)	; set addr
	BRB	NITEM

DIRECTORY:
	BBC	#FSCB$V_DIRECTORY,-			; is this field present?
		FSCB$B_FLDFLAGS(R11),NULLITEM
	MOVW	FSCB$Q_DIRECTORY(R11),FSCN$W_LENGTH(R10)	; set length
	MOVL	FSCB$Q_DIRECTORY+4(R11),FSCN$L_ADDR(R10)	; set addr
	BRB	NITEM

NAME:
	BBC	#FSCB$V_NAME,-				; is this field present?
		FSCB$B_FLDFLAGS(R11),NULLITEM
	MOVW	FSCB$Q_NAME(R11),FSCN$W_LENGTH(R10)	; set length
	MOVL	FSCB$Q_NAME+4(R11),FSCN$L_ADDR(R10)	; set addr 
	BRB	NITEM

TYPE:
	BBC	#FSCB$V_TYPE,-				; is this field present?
		FSCB$B_FLDFLAGS(R11),NULLITEM
	MOVW	FSCB$Q_TYPE(R11),FSCN$W_LENGTH(R10)	; set length
	MOVL	FSCB$Q_TYPE+4(R11),FSCN$L_ADDR(R10)	; set addr
	BRB	NITEM

VERSION:
	BBC	#FSCB$V_VERSION,-			; is this field present?
		FSCB$B_FLDFLAGS(R11),NULLITEM
	MOVW	FSCB$Q_VERSION(R11),FSCN$W_LENGTH(R10)	; set length
	MOVL	FSCB$Q_VERSION+4(R11),FSCN$L_ADDR(R10)	; set addr
	BRB	NITEM

	.END
