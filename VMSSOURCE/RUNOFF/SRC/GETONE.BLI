%TITLE 'Get one character'
MODULE getone (	IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					    NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	Get one character, applying flag recognition.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	 CREATION DATE: May, 1978
!


%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	011	REM00011	Ray Marshall	17-November-1983
!		Modified the external definition of ATABLE to use the new
!		  macro ATABLE_DEFINITION defined in ATCODE.REQ.
!
!	010	RER00010	Ron Randall	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--


%SBTTL 'Module Level Declarations'

!
! TABLE OF CONTENTS:
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

EXTERNAL
    atable : atable_definition,	! Action table.  Used to identify what type of
				! action is to be taken on encountering any
				! given character.
    FLGT : FLAG_TABLE [FLAG_COUNT],
    IRA : FIXED_STRING,
    KHAR,
    SCA : SCA_DEFINITION;

EXTERNAL ROUTINE
    FNDFLG,
    RSKIPS;


GLOBAL ROUTINE GETONE (ACCEPTABLE,ALTERNATE) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Skip spaces and tabs until a different character is found.
! If that character is <CONTROL flag>, or RINTES (i.e., end of record),
! or a semicolon, return a zero (null character). If the character
! is the accept (quote)  flag, apply the flag against the next
! character. If the character is the flag already in effect for this
! flag operation or a special cased ALTERNATE, take it without complaining.
! If the character is any other flag, then return the negative of the 
! character's value so that the caller (OFT) may complain with RNFFAU 
! (flag already in use).
!
! FORMAL PARAMETERS:
!
!	ACCEPTABLE is the value of the flag character for the current
!	 .FLAGS or .NO FLAGS command.
!
!	ALTERNATE is the value of the flag character for an alternately
!	 acceptable flag.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The routine returns the value of the character supplied; or zero if 
!	the character was not a flag; or -1*<character-value> if the character
!	was the same character as that used for another flag. The negative 
!	return value represents an error condition that the caller (OFT) has 
!	the responsibility of reporting.
!
! SIDE EFFECTS:		None
!--

    BEGIN
    RSKIPS (IRA);				!Skip spaces and tabs.

    IF  .KHAR EQL RINTES
    THEN
	RETURN 0;				!End of record.

    IF  .KHAR EQL .FLGT [CON_FLAG, FLAG_CHARACTER]
    THEN
    !<CONTROL flag>
	RETURN 0;				!Start of a new command.

    IF  .ATABLE [.KHAR] EQL A_FLAG
    THEN
    !Character is a flag.  Do it.
	BEGIN
	LOCAL
	    WHICH_FLAG;

	WHICH_FLAG = FNDFLG (.KHAR);		!Identify the flag.

	CASE .WHICH_FLAG FROM 0 TO FLAG_COUNT + 1 OF
	    SET

	    [QUO_FLAG] :
		BEGIN
		!<QUOTE flag>
		LOCAL
		    HOLD_QUO;
		HOLD_QUO = .KHAR;
		KCNS ();			!Get next character

		IF  .KHAR EQL RINTES
		THEN

		    IF  .WHICH_FLAG EQL .ACCEPTABLE OR
			.WHICH_FLAG EQL .ALTERNATE
		    ! User is redefining <QUOTE flag> to itself or an
		    ! acceptable alternate (if there is such a thing). Let him.
		    THEN
			RETURN .HOLD_QUO
		    ! User is trying to define some other flag to the
		    ! <QUOTE flag>. Let OFT complain.
		    ELSE
			RETURN  -.HOLD_QUO

		ELSE
		    BEGIN
		    LOCAL
			HOLD_KHAR;

		    HOLD_KHAR = .KHAR;
		    KCNS ();
		    RETURN .HOLD_KHAR;
		    END;

		END;

	    [FLAG_COUNT + 1] :
		BEGIN
		LOCAL
		    HOLD_CHAR;

		HOLD_CHAR = .KHAR;
		KCNS ();
		RETURN .HOLD_CHAR;
		END;

	    [INRANGE] :
		BEGIN
		LOCAL
		    HOLD_CHAR;

		HOLD_CHAR = .KHAR;
		KCNS();

		IF  .WHICH_FLAG EQL .ACCEPTABLE OR
		    .WHICH_FLAG EQL .ALTERNATE
		THEN				
		    !Let user redefine the flag to itself (or to the alternate).
		    RETURN .HOLD_CHAR
		ELSE
		    !Complain if he redefines it to the value of another flag.
		    RETURN (-.HOLD_CHAR);

		END;

	    TES;

	END;

    IF  .KHAR EQL %C';'
    THEN
	RETURN 0;				!End of command.

    BEGIN					!The usual case (i.e., just some character)
    LOCAL
	HOLD_KHAR;

    HOLD_KHAR = .KHAR;
    KCNS ();					!Position onto next character.
    RETURN .HOLD_KHAR
    END
    END;					!End of GETONE

END						!End of module
ELUDOM
