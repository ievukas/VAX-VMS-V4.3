MODULE STABACCOP(%TITLE	'Copy image file for Standalone BACKUP kit'
		MAIN = STABACCOP,
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	General utility programs.
!
! ABSTRACT:
!	This program copies an image file, deleting the appended patch text.
!	It is used and supported only for generation of Standalone BACKUP kits.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 16-Sep-1982
!
! MODIFIED BY:
!
!	V03-002	CWH3002		CW Hobbs			4-Oct-1983
!		Change CTG to CBT so that a segmented SYS does not have to
!		be contiguous.
!
!	V03-001	CWH3001		CW Hobbs			8-Sep-1983
!		Add the ability to segment a file, specifically so that
!		SYS.EXE can be split across two volumes.
!
!**

LIBRARY 'SYS$LIBRARY:LIB';


LITERAL
	TRUE=		1,
	FALSE=		0;


STRUCTURE
	BBLOCK[O,P,S,E;N]=
	    [N]
	    (BBLOCK + O)<P,S,E>;


PSECT
	CODE=		CODE,
	PLIT=		CODE,
	OWN=		DATA,
	GLOBAL=		DATA;


FORWARD ROUTINE
	STABACCOP,
	FILE_ERROR:	NOVALUE;


EXTERNAL ROUTINE
	LIB$GET_FOREIGN:	ADDRESSING_MODE(GENERAL),
	OTS$CVT_TI_L:		ADDRESSING_MODE(GENERAL);

ROUTINE STABACCOP=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is the main entry point for the STABACCOP program.  It
!	copies an image file, removing the appended patch text.  It is used and
!	supported only for generation of Standalone BACKUP kits.
!
! INPUT PARAMETERS:
!	Standard VMS activation parameters (not used).
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	COMMAND_DESC:	BBLOCK[DSC$K_S_BLN],	! Descriptor for command buffer
	INFILE_DESC:	BBLOCK[DSC$K_S_BLN],	! Descriptor for input file name
	OUTFILE_DESC:	BBLOCK[DSC$K_S_BLN],	! Descriptor for output file name
	VAL_DESC:	BBLOCK[DSC$K_S_BLN],	! Descriptor for numeric value
	COMMAND_BUFFER:	VECTOR[132,BYTE],	! Command buffer
	P,					! Pointer to space
	INPUT_FAB:	$FAB_DECL,		! FAB for input file
	INPUT_NAM:	$NAM_DECL,		! NAM block for input file
	INPUT_XAB:	$XABFHC_DECL,		! File header XAB for input file
	INPUT_RSA:	VECTOR[NAM$C_MAXRSS,BYTE], ! Resultant string for input file
	OUTPUT_FAB:	$FAB_DECL,		! FAB for output file
	OUTPUT_RAB:	$RAB_DECL,		! RAB for output file
	OUTPUT_NAM:	$NAM_DECL,		! NAM block for output file
	OUTPUT_RSA:	VECTOR[NAM$C_MAXRSS,BYTE], ! Resultant string for output file
	RETADR:		VECTOR[2],		! Return addresses from $CRMPSC
	IHD:		REF BBLOCK,		! Pointer to IHD
	IHP:		REF BBLOCK,		! Pointer to IHP
	FILE_SIZE,				! Size of file copied
	BLOCKS_LEFT,				! Number of blocks left to copy
	START_BLK,				! Starting block (numbered 0 to N-1)
	SEGMENT_SIZE	: INITIAL (99999),	! Size of file segment
	INPUT_RSA_DESC:	VECTOR[2],		! Descriptor for input RSA
	OUTPUT_RSA_DESC:VECTOR[2],		! Descriptor for output RSA
	STATUS_1,				! Status return
	STATUS_2;				! Status return
LITERAL
	FACILITY = 103;				! Steal COPY's prefix


! Get the foreign command line.  It must be of the form:
!	<input-file-specification> <space> <output-file-specification> [ <space> <start-vbn> <space> <segment-size> ]
!
COMMAND_DESC[DSC$W_LENGTH] = %ALLOCATION(COMMAND_BUFFER);
COMMAND_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
COMMAND_DESC[DSC$B_CLASS] = DSC$K_CLASS_S;
COMMAND_DESC[DSC$A_POINTER] = COMMAND_BUFFER;
STATUS_1 = LIB$GET_FOREIGN(COMMAND_DESC, 0, COMMAND_DESC);
IF NOT .STATUS_1 THEN RETURN .STATUS_1;


! Locate the space between the input and output file specifications.
!
P = CH$FIND_CH(.COMMAND_DESC[DSC$W_LENGTH], .COMMAND_DESC[DSC$A_POINTER], %C' ');
IF .P EQL 0 THEN RETURN SS$_BADPARAM;
INFILE_DESC [DSC$W_LENGTH] = .P - .COMMAND_DESC [DSC$A_POINTER];	! Set input name
INFILE_DESC [DSC$A_POINTER] = .COMMAND_DESC [DSC$A_POINTER];
COMMAND_DESC [DSC$A_POINTER] = .P + 1;					! Remove input name
COMMAND_DESC [DSC$W_LENGTH] = .COMMAND_DESC [DSC$W_LENGTH] - 1 - .INFILE_DESC [DSC$W_LENGTH];

! Locate the output file spec
!
P = CH$FIND_CH(.COMMAND_DESC[DSC$W_LENGTH], .COMMAND_DESC[DSC$A_POINTER], %C' ');
IF .P EQL 0
THEN
    BEGIN
    !
    ! No optional numbers, the rest of the command string is the output file name
    !
    OUTFILE_DESC [DSC$W_LENGTH] = .COMMAND_DESC [DSC$W_LENGTH];
    OUTFILE_DESC [DSC$A_POINTER] = .COMMAND_DESC [DSC$A_POINTER];
    END
ELSE
    BEGIN
    OUTFILE_DESC [DSC$W_LENGTH] = .P - .COMMAND_DESC [DSC$A_POINTER];	! Set input name
    OUTFILE_DESC [DSC$A_POINTER] = .COMMAND_DESC [DSC$A_POINTER];
    COMMAND_DESC [DSC$A_POINTER] = .P + 1;					! Remove input name
    COMMAND_DESC [DSC$W_LENGTH] = .COMMAND_DESC [DSC$W_LENGTH] - 1 - .OUTFILE_DESC [DSC$W_LENGTH];
    !
    ! Now get the two optional numbers
    !
    P = CH$FIND_CH(.COMMAND_DESC[DSC$W_LENGTH], .COMMAND_DESC[DSC$A_POINTER], %C' ');
    IF .P EQL 0
    THEN
	RETURN SS$_BADPARAM;
    VAL_DESC [DSC$W_LENGTH] = .P - .COMMAND_DESC [DSC$A_POINTER];	! Set input name
    VAL_DESC [DSC$A_POINTER] = .COMMAND_DESC [DSC$A_POINTER];
    COMMAND_DESC [DSC$A_POINTER] = .P + 1;					! Remove input name
    COMMAND_DESC [DSC$W_LENGTH] = .COMMAND_DESC [DSC$W_LENGTH] - 1 - .VAL_DESC [DSC$W_LENGTH];
    IF NOT (STATUS_1 = OTS$CVT_TI_L (VAL_DESC, START_BLK))
    THEN
	RETURN .STATUS_1;
    IF (START_BLK = .START_BLK-1) LSS 0
    THEN
	RETURN SS$_BADPARAM;
    IF NOT (STATUS_1 = OTS$CVT_TI_L (COMMAND_DESC, SEGMENT_SIZE))
    THEN
	RETURN .STATUS_1;
    END;

! Open the input file.
!
$FAB_INIT(FAB=INPUT_FAB,
    DNA=UPLIT BYTE('.EXE'),
    DNS=%CHARCOUNT('.EXE'),
    FNA=.INFILE_DESC[DSC$A_POINTER],
    FNS=.INFILE_DESC[DSC$W_LENGTH],
    FOP=UFO,
    NAM=INPUT_NAM,
    XAB=INPUT_XAB);
$NAM_INIT(NAM=INPUT_NAM,
    RSA=INPUT_RSA,
    RSS=NAM$C_MAXRSS);
$XABFHC_INIT(XAB=INPUT_XAB);
IF NOT $OPEN(FAB=INPUT_FAB)
THEN
    FILE_ERROR(FACILITY^16 + SHR$_OPENIN + STS$K_SEVERE, INPUT_FAB, INPUT_FAB);


! Ensure that the file has appropriate characteristics for an image file:
! sequential with fixed length 512 byte records and no record attributes.
!
IF .INPUT_FAB[FAB$B_ORG] NEQ FAB$C_SEQ
OR .INPUT_FAB[FAB$B_RFM] NEQ FAB$C_FIX
OR .INPUT_FAB[FAB$W_MRS] NEQ 512
OR .INPUT_FAB[FAB$B_RAT] NEQ 0
THEN
    BEGIN
    INPUT_FAB[FAB$L_STS] = SS$_BADIMGHDR;
    INPUT_FAB[FAB$L_STV] = 0;
    FILE_ERROR(FACILITY^16 + SHR$_OPENIN + STS$K_SEVERE, INPUT_FAB, INPUT_FAB);
    END;


! Map the file into memory.
!
STATUS_2 = $CRMPSC(
    INADR=UPLIT(0, 0),
    RETADR=RETADR,
    FLAGS=SEC$M_CRF OR SEC$M_EXPREG OR SEC$M_WRT,
    CHAN=.INPUT_FAB[FAB$L_STV]);
IF NOT .STATUS_2
THEN
    BEGIN
    INPUT_FAB[FAB$L_STS] = .STATUS_2;
    INPUT_FAB[FAB$L_STV] = 0;
    FILE_ERROR(FACILITY^16 + SHR$_OPENIN + STS$K_SEVERE, INPUT_FAB, INPUT_FAB);
    END;


! Examine the image header to determine the location of the patch text.
!
IHD = .RETADR[0];
IF .IHD[IHD$W_PATCHOFF] NEQ 0
THEN
    BEGIN
    IHP = .IHD + .IHD[IHD$W_PATCHOFF];
    IF .IHP[IHP$L_PATCOMTXT] NEQ 0
    THEN 
	BEGIN
	INPUT_XAB[XAB$L_EBK] = .IHP[IHP$L_PATCOMTXT];
	INPUT_XAB[XAB$W_FFB] = 0;
	IHP[IHP$L_PATCOMTXT] = 0;
	END;
    END;

! Determine the size of the output file
!
IF .INPUT_XAB[XAB$W_FFB] EQL 0
THEN
    INPUT_XAB[XAB$L_EBK] = .INPUT_XAB[XAB$L_EBK] - 1;
FILE_SIZE = MIN ((.INPUT_XAB[XAB$L_EBK]-.START_BLK), .SEGMENT_SIZE);

! Create the output file.
!
$FAB_INIT(FAB=OUTPUT_FAB,
    ALQ=.FILE_SIZE,
    DNA=UPLIT BYTE('.EXE'),
    DNS=%CHARCOUNT('.EXE'),
    FAC=BIO,
    FNA=.OUTFILE_DESC[DSC$A_POINTER],
    FNS=.OUTFILE_DESC[DSC$W_LENGTH],
    FOP=<CTG,OFP>,
    MRS=512,    
    NAM=OUTPUT_NAM,
    ORG=SEQ,
    RFM=FIX);
$RAB_INIT(RAB=OUTPUT_RAB,
    FAB=OUTPUT_FAB,
    ROP=BIO);
$NAM_INIT(NAM=OUTPUT_NAM,
    RLF=INPUT_NAM,
    RSA=OUTPUT_RSA,
    RSS=NAM$C_MAXRSS);
IF .SEGMENT_SIZE NEQ 99999	! If segmenting, then don't need contiguous
THEN
    BEGIN
    OUTPUT_FAB [FAB$V_CTG] = FALSE;
    OUTPUT_FAB [FAB$V_CBT] = TRUE;
    END;
IF NOT $CREATE(FAB=OUTPUT_FAB)
THEN
    FILE_ERROR(FACILITY^16 + SHR$_OPENOUT + STS$K_SEVERE, OUTPUT_FAB, OUTPUT_FAB);
IF NOT $CONNECT(RAB=OUTPUT_RAB)
THEN
    FILE_ERROR(FACILITY^16 + SHR$_OPENOUT + STS$K_SEVERE, OUTPUT_FAB, OUTPUT_RAB);


! Write the output file.
!
OUTPUT_RAB[RAB$L_RBF] = (.IHD + (.START_BLK*512));
BLOCKS_LEFT = .FILE_SIZE;
WHILE .BLOCKS_LEFT GTR 0 DO
    BEGIN
    LOCAL
	BLOCKS;

    BLOCKS = MIN(.BLOCKS_LEFT, 127);
    BLOCKS_LEFT = .BLOCKS_LEFT - .BLOCKS;
    OUTPUT_RAB[RAB$W_RSZ] = .BLOCKS * 512;
    IF NOT $WRITE(RAB=OUTPUT_RAB)
    THEN
	FILE_ERROR(FACILITY^16 + SHR$_WRITEERR + STS$K_SEVERE, OUTPUT_FAB, OUTPUT_RAB);
    OUTPUT_RAB[RAB$L_RBF] = .OUTPUT_RAB[RAB$L_RBF] + .OUTPUT_RAB[RAB$W_RSZ];
    END;


! Close the output file.
!
IF NOT $CLOSE(FAB=OUTPUT_FAB)
THEN
    FILE_ERROR(FACILITY^16 + SHR$_CLOSEOUT + STS$K_SEVERE, OUTPUT_FAB, OUTPUT_FAB);


! Log the copied message.
!
INPUT_RSA_DESC[0] = .INPUT_NAM[NAM$B_RSL];
INPUT_RSA_DESC[1] = .INPUT_NAM[NAM$L_RSA];
OUTPUT_RSA_DESC[0] = .OUTPUT_NAM[NAM$B_RSL];
OUTPUT_RSA_DESC[1] = .OUTPUT_NAM[NAM$L_RSA];
SIGNAL(FACILITY^16 + SHR$_COPIEDB + STS$K_SUCCESS, 3, INPUT_RSA_DESC, OUTPUT_RSA_DESC, .FILE_SIZE);


! Return with success.
!
SS$_NORMAL
END;

ROUTINE FILE_ERROR(MESSAGE,FAB,FRAB): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine handles signalling of file-related errors.
!
! INPUT PARAMETERS:
!	MESSAGE		- Message code to be signalled.
!	FAB		- FAB for the file, to obtain the file specification.
!	FRAB		- FAB or RAB that sustained the error, to obtain
!			  STS and STV.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Message signalled.
!
!--

BEGIN
MAP
	FAB:		REF BBLOCK,	! Pointer to FAB
	FRAB:		REF BBLOCK;	! Pointer to FAB or RAB
LOCAL
	NAM:		REF BBLOCK,	! Pointer to NAM block
	DESC:		VECTOR[2];	! Descriptor for file specification


! Set up the file name descriptor.
!
NAM = .FAB[FAB$L_NAM];
IF .NAM[NAM$B_RSL] NEQ 0
THEN
    BEGIN
    DESC[0] = .NAM[NAM$B_RSL];
    DESC[1] = .NAM[NAM$L_RSA];
    END
ELSE IF .NAM[NAM$B_ESL] NEQ 0
THEN
    BEGIN
    DESC[0] = .NAM[NAM$B_ESL];
    DESC[1] = .NAM[NAM$L_ESA];
    END
ELSE
    BEGIN
    DESC[0] = .FAB[FAB$B_FNS];
    DESC[1] = .FAB[FAB$L_FNA];
    END;


! Signal the message.
!
SIGNAL(.MESSAGE, 1, DESC, .FRAB[FAB$L_STS], .FRAB[FAB$L_STV]);
END;

END
ELUDOM
