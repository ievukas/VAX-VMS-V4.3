MODULE setshobro ( IDENT = 'V04-000',
		ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL=LONG_RELATIVE)
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  SET and SHOW Commands
!
! ABSTRACT:
!
!	This module implements the DCL commands SET BROADCAST 
!	and SHOW BROADCAST
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, user mode
!
! AUTHOR:  Gerry Smith				25-Aug-1983
!
! Modified by:
!
!	V03-003	JLV0391		Jake VanNoy		25-JUL-1984
!		Enhance SHOW logic to also look at NOBRDCST bit.
!
!	V03-002	DAS0001		David Solomon		10-Jul-1984
!		Fix truncation errors; make nonexternal refs LONG_RELATIVE.
!
!	V03-001	JLV0345		Jake VanNoy		 8-APR-1984
!		Fix USER1-USER16 so that appropriate bits are set.
!
!--

!
! Include files
!
LIBRARY 'SYS$LIBRARY:LIB';			! VAX/VMS common definitions

!
! Declare shared messages
!
$SHR_MSGDEF	(SET, 119, LOCAL,
    		(notterm, warning),
    		(readerr, warning));

$SHR_MSGDEF	(SHOW, 120, LOCAL,
    		(notterm, warning),
    		(readerr, warning));

!
! Declare some storage for tables
!
OWN
    class : VECTOR[8]
	    INITIAL(%ASCID 'OPTION.BROADCAST.GENERAL',
	    	    %ASCID 'OPTION.BROADCAST.PHONE',
	    	    %ASCID 'OPTION.BROADCAST.MAIL',
	    	    %ASCID 'OPTION.BROADCAST.QUEUE',
	    	    %ASCID 'OPTION.BROADCAST.SHUTDOWN',
	    	    %ASCID 'OPTION.BROADCAST.URGENT',
	    	    %ASCID 'OPTION.BROADCAST.DCL',
	    	    %ASCID 'OPTION.BROADCAST.OPCOM'),
    user : VECTOR[16]
	    INITIAL(%ASCID 'OPTION.BROADCAST.USER1',
		    %ASCID 'OPTION.BROADCAST.USER2',
		    %ASCID 'OPTION.BROADCAST.USER3',
		    %ASCID 'OPTION.BROADCAST.USER4',
		    %ASCID 'OPTION.BROADCAST.USER5',
		    %ASCID 'OPTION.BROADCAST.USER6',
		    %ASCID 'OPTION.BROADCAST.USER7',
		    %ASCID 'OPTION.BROADCAST.USER8',
		    %ASCID 'OPTION.BROADCAST.USER9',
		    %ASCID 'OPTION.BROADCAST.USER10',
		    %ASCID 'OPTION.BROADCAST.USER11',
		    %ASCID 'OPTION.BROADCAST.USER12',
		    %ASCID 'OPTION.BROADCAST.USER13',
		    %ASCID 'OPTION.BROADCAST.USER14',
		    %ASCID 'OPTION.BROADCAST.USER15',
		    %ASCID 'OPTION.BROADCAST.USER16');


!
! Table of contents
!

FORWARD ROUTINE
    set$broadcast : NOVALUE,		! Set broadcast classes
    show$broadcast : NOVALUE,		! Display broadcast classes
    getset;				! Get/set broadcast classes

!
! External routines
!
EXTERNAL ROUTINE
    cli$present,
    show$write_line : NOVALUE;		! Write a line to SYS$OUTPUT

!
! Declare literals defined elsewhere
!
EXTERNAL LITERAL
    cli$_absent,			! Qualifier not present
    set$_writeerr;			! Error modifying broadcast classes

!
! Declare the shared messages
!
$SHR_MSGDEF (SET, 119, LOCAL,
	    (syntax, error));


GLOBAL ROUTINE set$broadcast : NOVALUE =
BEGIN

!++
! Functional description
!
!	This is the routine for the SET BROADCAST command.  It is called
!	from the SET command processor,	and enables/disables broadcast
!	messages for the process's terminal.
!
! Inputs
!	None
!
! Outputs
!	None
!
!----

LOCAL
    status,
    char : VECTOR [3],			! terminal characteristics
    flags : BITVECTOR[64];		! Quadword for broadcast classes

!
! First, get the current settings.
!
IF NOT (status = getset(0,		! 0 ==> get broadcast classes
    	         flags,char))		! Put broadcast flags here
THEN
    BEGIN
    IF .status EQL 0			! Status of 0 is not-a-terminal
    THEN status = set$_notterm;		! so translate it here
    SIGNAL(set$_readerr, 		! Error reading dev chars,
    	   1,
    	   %ASCID 'broadcast classes',
    	   .status);			! and this is why
    RETURN;
    END;

!
! See if ALL or NONE was specified.  If so, do the appropriate thing.
!
IF cli$present(%ASCID 'OPTION.BROADCAST.NONE')
THEN
    BEGIN
    MAP
    	flags : VECTOR[2];
    flags[0] = flags[1] = -1;
    END;

IF cli$present(%ASCID 'OPTION.BROADCAST.ALL')
THEN
    BEGIN
    MAP
    	flags : VECTOR[2];
    flags[0] = flags[1] = 0;
    END;

!
! Get the system broadcast classes.
!
INCR i FROM 0 TO 7 DO			! Currently only 8
    BEGIN
    status = cli$present(.class[.i]);	! See if there...
    IF .status NEQ cli$_absent		! If present,
    THEN
	BEGIN
	IF .status
	THEN flags[.i] = 0		! clear appropriate bit, or
	ELSE flags[.i] = 1;		! set it.
	END;
    END;

!
! Now for the user stuff.
!
INCR i FROM 0 TO 15 DO			! There are 16, USER1 - USER16
    BEGIN
    status = cli$present(.user[.i]);! See if there
    IF .status NEQ cli$_absent
    THEN
	BEGIN
	IF .status
	THEN flags[32 + .i] = 0		! Clear appropriate bit, or
	ELSE flags[32 + .i] = 1;	! set it.
	END;
    END;

!
! Put in the new broadcast classes.
!
IF NOT (status = getset(1,		! 1 ==> set the broadcast classes
       		 flags))		! using these broadcast flags
THEN SIGNAL(set$_writeerr,		! If an error, tell why.
    	    1,
    	    %ASCID 'broadcast classes',
    	    .status);

RETURN;
END;

GLOBAL ROUTINE show$broadcast : NOVALUE =
BEGIN

!++
! Functional description
!
!	This is the routine for the SHOW BROADCAST command.  It is called
!	from the SHOW command processor, and displays classes of broadcast
!	for the process's terminal.
!
! Inputs
!	None
!
! Outputs
!	None
!
!----

LOCAL
    status,
    char : VECTOR [3],			! terminal characteristics
    flags : BITVECTOR[64];		! Broadcast flags quadword

!
! Get the current settings.
!
IF NOT (status = getset(0,		! 0 ==> get broadcast classes
    	      	 flags,char))		! Put them here
THEN					! If an error,
    BEGIN				! tell the user
    IF .status EQL 0			! If 0, then really not-a-terminal
    THEN status = show$_notterm;	! so tell user that.
    SIGNAL(show$_readerr,
    	   1,
    	   %ASCID 'broadcast classes',
    	   .status);
    RETURN;
    END;

!
! If the entire quadword is zero, then all broadcasts are enabled.
!
BEGIN
MAP flags : VECTOR[2];
BIND devdepend = CHAR [1]: $BBLOCK;

IF(.flags[0] EQL 0 AND .flags[1] EQL 0)
    AND NOT (.devdepend [TT$V_NOBRDCST])
THEN
    BEGIN
    show$write_line(%ASCID 'Broadcasts are enabled for all classes', %REF(0));
    RETURN;
    END;
END;

BEGIN
MAP flags : VECTOR[2];
BIND devdepend = CHAR [1]: $BBLOCK;

IF (.flags[0] EQL %X'ffffffff' AND .flags[1] EQL %X'ffffffff')
    OR (.devdepend [TT$V_NOBRDCST])
THEN
    BEGIN
    show$write_line(%ASCID 'Broadcasts are disabled for all classes', %REF(0));
    RETURN;
    END;
END;
!
! If we have a more usual case, start processing here, first with a header.
!
show$write_line(%ASCID 'Broadcasts are currently disabled for:', 
    		%REF(0));

!
! Display disabled system broadcast classes.
!
INCR i FROM 0 TO 7 DO
    BEGIN
    IF .flags[.i]
    THEN 
	BEGIN
	LOCAL
	    desc : VECTOR[2];
	BIND string = .class[.i] : $BBLOCK[dsc$c_s_bln];
	desc[0] = .string[dsc$w_length] - 17;
	desc[1] = .string[dsc$a_pointer] + 17;
	show$write_line(%ASCID '    !AS', %REF(desc));
	END;
    END;

!
! Display enabled user broadcast classes.
!
INCR i FROM 0 TO 15 DO
    BEGIN
    IF .flags[32 + .i]
    THEN
	BEGIN
	LOCAL
	    desc : VECTOR[2];
	BIND string = .user[.i] : $BBLOCK[dsc$c_s_bln];
	desc[0] = .string[dsc$w_length] - 17;
	desc[1] = .string[dsc$a_pointer] + 17;
	show$write_line(%ASCID '    !AS', %REF(desc));
	END;
    END;

RETURN;
END;

ROUTINE getset (key, flags, char: REF $BBLOCK) =
BEGIN

!++
!
! Get or set the broadcast classes.
!
! Inputs:
!	key - if 0, get the broadcast classes
!	      if 1, set the broadcast classes
!
! Outputs:
!	flags - if key=0, then flags will be filled in with the broadcast
!    		class quadword.
!		if key=1, then flags will be used as input to the setmode
!		to set the broadcast classes.
!
!	char - terminal characteristics buffer
!
! Status return:
!	ss$_normal
!
!	Any valid error from $QIOW, or $ASSIGN
!	0 ==> SYS$COMMAND is not a terminal
!
!---

MAP
    flags : REF $BBLOCK;

LOCAL
    status,
    chan : WORD,
    iosb : VECTOR[4,WORD],
    func;

!
! First, open a channel.  Always use SYS$COMMAND, since that doesn't
! ever get reassigned.
!
status = $ASSIGN(CHAN   = chan,
    		 DEVNAM = %ASCID 'SYS$COMMAND:');
IF NOT .status
THEN RETURN .status;

!
! Now to do what is requested.
!
IF .key						! Key=1 means
THEN func = io$_setmode OR io$m_brdcst		! set the broadcast stuff
ELSE						! But if key=0, then
    BEGIN					! first check to see if
    status = $QIOW(CHAN = .chan,		! this is a terminal...
    		   FUNC = io$_sensemode,
    		   IOSB = iosb,
    		   P1   = .char,
		   P2   = 12);	
    IF .status	
    THEN status = .iosb[0];
    IF NOT .status
    THEN
	BEGIN
	$DASSGN(CHAN = .chan);
	RETURN .status;
	END;
    IF .char[0,0,8,0] NEQ dc$_term		! If not a terminal,
    THEN					! refuse, and tell why.
	BEGIN
	$DASSGN(CHAN = .chan);
	RETURN 0;
	END;
    func = io$_sensemode OR io$m_brdcst;	! Otherwise get ready to 
    END;					! get the broadcast classes

status = $QIOW(CHAN = .chan,			! Do it...
    	       FUNC = .func,
    	       IOSB = iosb,
    	       P1   = .flags);
$DASSGN(CHAN = .chan);				! Get rid of channel

!
! Check to see if all is well.
!
IF .status					! See if set/sense
THEN status = .iosb[0];				! worked.

RETURN .status;
END;

END
ELUDOM
