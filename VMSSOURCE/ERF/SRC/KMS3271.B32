MODULE KMS3271_DEVICE
(%TITLE 'KMS3271 device dependent'
IDENT = 'V04-000') = 
Begin

	
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  ERF, Error Log Report Generator
!
! ABSTRACT:
!
! 	This module contains the routines that handle the bit to text
!	translation (device dependent) for the KMS3271.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, user mode.
!
! AUTHOR:  Sharon Reynolds,	CREATION DATE:	20-Feb-1984
!
! Modified by:
!
!	V04-002	SAR0282		Sharon A. Reynolds		2-Jul-1984
!		- Removed the output_lines routine and moved it to the
!		shareable image.
!		- Removed the build_fao_string macro and moved to 
!		erfdef.req.
!
!	V04-001	EAD0148		Elliott A. Drayton		13-Apr-1984
!		Changed subroutine names which clashed with UCB definitions.
!
!--
REQUIRE	'SRC$:RECSELDEF';
REQUIRE 'SRC$:ERFDEF' ;

FORWARD ROUTINE 
    Kms3271:		NOVALUE,
    Output_registers:	NOVALUE ;

EXTERNAL
    Emb:		$BBLOCK PSECT (EMB),
    Syecom:		$BBLOCK PSECT (SYECOM);

EXTERNAL ROUTINE
    Frctof,
    Dhead1,
    Orb$l_owner_rtn,
    Output_lines,
    Translate_bits,
    Uba_mapping,
    Ucb$l_char,
    Ucb$w_sts_rtn,
    Ucb$l_opcnt_rtn,
    Ucb$w_errcnt_rtn ;

OWN
    Lstlun:		LONG,
    Arglist:		Vector [10,long],
    Bts_sts_codes:	Vector [28,byte]
			Initial (byte(%x'2',%x'4',%x'6',%x'8',%x'9',%x'a',
			%x'c',%x'e',%x'10',%x'27',%x'28',%x'2d',%x'2e',
			%x'2f',%x'30',%x'31',%x'32',%x'33',%x'34',%x'35',
			%x'36',%x'37',%x'38',%x'39',%x'3a',%x'3d',%x'3e',
			%x'3f')),
    Cmd_sts_codes:	Vector [19,byte]
			Initial (byte(%x'9',%x'28',%x'2d',%x'2e',
			%x'2f',%x'30',%x'31',%x'32',%x'33',%x'34',%x'35',
			%x'36',%x'37',%x'38',%x'39',%x'3a',%x'3d',%x'3e',
			%x'3f')),
    Csr0_mask:		Initial (%x'E791'),
    Csr1_mask:		Initial (%x'90'),
    Dev_id_desc:	Initial ( $DESCRIPTOR('UBA KMS3271') ),
    Fao_string,
    Fao_string1:	Initial (%ASCID '!/!7< !>!AC!#< !>!XW'),
    Fao_strings: 	Vector [13,long]
		 	Initial (long
			 (%ASCID '!39< !>LINE NUMBER = !ZB.'),
			 (%ASCID '!39< !>MEMORY EXTENSION BITS = !XB(X)!/!39< !>LINE NUMBER = !ZB.!/!39< !>LUN = !ZB.'),
			 (%ASCID '!39< !>LINE NUMBER = !ZB.!/!39< !>LUN = !ZB.'),
			 (%ASCID '!39< !>!AS'),
			 (%ASCID '!39< !>!AS!XL(X)'),
			 (%ASCID '!39< !>MEMORY EXTENSION BITS = !XB(X)!/!39< !>!AS'),
			 (%ASCID '!39< !>BYTE COUNT = !ZB.!/!39< !>MEMORY EXTENSION BITS = !XB(X)'),
			 (%ASCID '!39< !>BYTE COUNT = !ZB.!/!39< !>!AS'),
			 (%ASCID '!39< !>MEMORY EXTENSION BITS = !XB(X)'),
			 (%ASCID '!39< !>STATUS BYTE 0!XB(X)!/!39< !>STATUS BYTE 1!XB(X)'),
			 (%ASCID '!39< !>MEMORY EXTENSION BITS = !XB(X)!/!39< !>LINE NUMBER = !ZB.'),
			 (%ASCID 'COMMAND COMPLETED SUCCESSFULLY:!/!39< !>RECEIVED !AC BLOCK OF A!/!39< !>!AC MSG'),
			 (%ASCID 'COMMAND COMPLETED SUCCESSFULLY:!/!39< !>RECEIVED !AC BUFFER!/!39< !>!AC') ),
    Input_header:	Initial ( $DESCRIPTOR('REGISTER INPUT TO KMS') ),
    Mcu_string:		Initial (%ASCID 'MODEM CNTRL UNIT ADDRS = '),
    Mem_string:		Initial (%ASCID 'MEMORY BUFFER ADDRS = '),
    Msg:		Vector [4,long]
			Initial (long
				(CSTRING ('FIRST'),
				CSTRING ('LAST'),
				CSTRING ('INTERMEDIATE'),
				CSTRING ('ONLY'))),
    Out_arglist:	REF VECTOR [31,long]
			Initial (0),
    Output_header:	Initial ( $DESCRIPTOR('REGISTER OUTPUT FROM KMS') ),
    Status,
    Unknown_desc:	Initial ($DESCRIPTOR ('UNKNOWN STATUS CODE = !XB(X)')) ;

!
! Define some macros.
!
! Define some offsets for data in the registers.
!
MACRO
    Byte_cnt	= 0,0,10,0%,
    Cmd		= 0,0,4,0%,
    Cmd_sts	= 0,10,6,0%,
    Inp_mem_ext = 0,10,2,0%,
    Line_num 	= 0,8,2,0%,
    Lun 	= 0,11,5,0%,
    Mem_addrs	= 0,0,16,0%,
    Mem_ext 	= 0,5,2,0%,
    Out_mem_ext = 0,2,2,0%,
    Sts_byte_0	= 0,0,8,0%,
    Sts_byte_1	= 0,8,8,0% ;

!
! Store the text necessary to translate the error log packet for this device.
!
STORE_STRINGS ( kmscmds,
		'MODEM INITIALIZATION',
		'LINE INITIALIZATION',
		'LINE DEINITIALIZATION',
		'ADDRESS DESCRIPTOR CONNECT',
		'ADDRESS DESCRIPTOR DISCONNECT',
		'LINE TRANSMIT BUFFER',
		'LINE RECEIVE BUFFER',
		'LINE TRANSMIT ABORT',
		'LINE RECEIVE ABORT',
		'LINE STATISTICS REQUEST',
		'TRANSMIT READ COMMAND',
		'TRANSMIT STATUS' ) ;

STORE_STRINGS (	BTSTATUS,
		'UNIBUS CONTROLLER HAS STOPPED !/!39< !>ACCEPTING COMMANDS',
		'COMMAND ISSUED FOR THE LINE !/!39< !>NEVER COMPLETED',
		'WRITE FAILED TO COMPLETE IN THE !/!39< !>MAX TIME',
		'LOAD MICROCODE FAILED',
		'RECEIVED DEVICE STATUS MESSAGE',
		'MICROCODE FAILED TO START',
		'UNEXPECTED AND INCONSISTENT EVENT!/!39< !>CAUSED PORT DRIVER TO SHUT LINE !/!39< !>DOWN',
		'NOT ENOUGH MAP REGISTERS !/!39< !>AVAILABLE FOR A WRITE',
		'S/S BYTES RECEIVED FROM CLASS !/!39< !>INSTEAD OF DATA',
		'STATUS RECEIVED FOR A LUN THAT !/!39< !>IS ALSO THE FIRST LUN QUEUED TO !/!39< !>TRANSMIT (HOST ONLY)',
		'IBM HOST HAS TIMED OUT !/!39< !>(SLAVE MODE ONLY)',
		'REMOTE STATION COULD NOT BE !/!39< !>ADDRESSED',
		'REMOTE STATION ABORTED A BUFFER !/!39< !>(SLAVE)',
		'INVALID PARAMETERS',
		'NOT ENOUGH RECEIVE BUFFERS !/!39< !>PRESENT',
		'CONTROLLER FAILED TO ACCEPT !/!39< !>A COMMAND',
		'MODEM QUEUE OVERFLOW',
		'CSR QUEUE OVERFLOW',
		'MAX MESSAGE SIZE EXCEEDED',
		'MODEM FOR THIS PORT FAILED',
		'MODEM CONTROL UNIT HAS FAILED !/!39< !>ON THIS PORT',
		'MODEM CONTROL UNIT DOES NOT !/!39< !>RESPOND',
		'MAX NUMBER OF RETRIES WAS !/!39< !>EXCEEDED',
		'PORT DRIVER AND FIRMWARE ARE !/!39< !>OUT OF SYNC',
 		'READ BUFFER OVERFLOWED',
		'COMMAND REJECT: BUFFERS PENDING',
 		'TOO MANY OPERATIONS OUTSTANDING',
 		'NON-EXISTENT MEMORY ERROR') ;

STORE_STRINGS ( CMDSTS,
		'DEVICE STATUS RETURNED IN SEL 4 !/!39< !>(2 BYTES)',
		'HOST TIMED OUT',
		'BAD LUN: INVALID LUN SPECIFIED',
		'ABORTED TEXT BUFFER: BUFFER !/!39< !>TERMINATED WITH "ENQ"',
		'INVALID PARAMETERS',
		'NOT ENOUGH RECEIVE BUFFERS: !/!39< !>MESSAGE BEING RECEIVED FOR WHICH !/!39< !>THERE WERE NO RECEIVE BUFFERS',
		'USER SPECIFIED AN INVALID !/!39< !>COMMAND: LINE NOT IN SLAVE MODE',
		'MODEM QUEUE OVERFLOW: COMMAND !/!39< !>ABORTED DUE TO SYSTEM BACKLOG',
		'CSR QUEUE OVERFLOW (32 ENTRIES): !/!39< !>INTERNAL FEP DATA STRUCTURE !/!39< !>OVERFLOW',
		'N1 ERROR (EMPTY BUFFER OR ODD !/!39< !>ADDRESS COUNT EXCEEDED)',
		'MODEM DOWN: PERIODIC CHECK OF !/!39< !>MCU FOUND CTS, DSR, OR CD CLEARED',
		'MODEM CONTROL UNIT DOWN: !/!39< !>PERIODIC CHECK OF MCU FOUND RTS !/!39< !>OR DTR CLEARED',
		'NON-EXISTENT MODEM CONTROL UNIT',
		'NO RESPONSE AFTER N2 RETRIES',
		'BUFFER OVERFLOW: BUFFER RECEIVED !/!39< !>WAS LARGER THAN THE RECEIVE !/!39< !>BUFFER ALLOCATED',
		'PENDING BUFFER: FEP REJECTED !/!39< !>COMMAND BECAUSE TRANSMIT OR !/!39< !>RECEIVE BUFFERS WERE OUTSTANDING',
		'TOO MANY BUFFERS: THIS BUFFER !/!39< !>WOULD CAUSE FEP TO HAVE 9 BUFFERS',
		'NON-EXISTENT MEMORY WHILE!/!39< !>ACCESSING !AC BUFFER') ;


STORE_STRINGS ( LINE_STATES,
		'OFF',
		'RESOURCES ALLOCATED, NO REQUESTS !/!39< !>ISSUED TO KMS',
		'TRANSITIONING UP/ATTEMPTING KMS !/!39< !>"INIT" OR DOWN/ATTEMPTING !/!39< !>KMS "DEINIT"',
		'TRANSITIONING UP/ATTEMPTING !/!39< !>"CONNECT" OR !/!39< !>DOWN/ATTEMPTING !/!39< !>"DISCONNECT"',
		'ACTIVE: MODEM OR MODEM CONTROL !/!39< !>FAILURE',
		'SHUTTING DOWN: "TRANSMIT ABORT"!/!39< !> ISSUED',
		'SHUTTING DOWN: "RECEIVE ABORT" !/!39< !>ISSUED',
		'ACTIVE') ;

STORE_STRINGS ( CSR0,
		'INTERRUPT ENABLE IN',
		'INTERRUPT ENABLE OUT',
		'REQUEST IN',
		'STEP UP',
		'RAM IN',
		'RAM OUT',
		'CRAM WRITE',
		'MASTER CLEAR',
		'RUN') ;

STORE_STRINGS ( CSR1,
		'READY IN',
		'READY OUT') ;


GLOBAL Routine KMS3271 : NOVALUE = 
Begin

!++
!
! Functional Description:
!
!    This routine contains the algorithms for translating the
!    contents of a KMS3271 error log packet.
!
! Calling Sequence:
!
!	KMS3271 () ;
!
! Input Parameters:
!
!	None
!
! Output Parameters:
!
!    	None
!
!--

Bind regsav = (emb[emb$l_dv_regsav]+4) : vector [,long] ;

Bind btstatus = regsav[0] : byte ;
Bind line_state = regsav[1] : byte ;
Bind map_number = regsav[10] ;
Bind map_contents = regsav[11] ;
Bind final_map_contents = regsav[12] ;

LOCAL
    Buffer:	Vector [512,byte],
    Desc:	$BBLOCK [8]
		Preset ( [dsc$b_dtype] = dsc$k_dtype_t,
			 [dsc$b_class] = dsc$k_class_s),
    Flag,
    Index,
    Index2 ;

!
! Initialize the buffer descriptor and lstlun.
!
Desc[dsc$w_length] = %ALLOCATION(buffer) ;
Desc[dsc$a_pointer] = buffer ;
Lstlun = .syecom[sye$l_lstlun];

!
! Force top of form and output the entry header.
!
FRCTOF (lstlun) ;
DHEAD1 (lstlun,.dev_id_desc) ;

!
! Translate and output the driver status.
!
! Arglist contains: the register mnemonic, the starting position of the
! register contents field, the register contents, and the address of the
! descriptor for the driver status text.
!
Arglist[0] = CSTRING ('DRIVER STATUS') ;
Arglist[1] = (16 - .(.arglist[0])<0,8>)+4 ;
Arglist[2] = .btstatus ;
Arglist[3] = desc ;

!
! Get the driver status text. 
!
! Determine if the driver status code is in the bts_sts_codes table.
!
Flag = 0 ;
Incr index from 0 to 27 do
    Begin
    If .btstatus EQL .bts_sts_codes[.index]
    Then
	!
	! Yes, save the address of the descriptor, indicate that the
	! text was found and exit the increment loop.
	!
	Begin
	Arglist[4] = btstatus_desc_tbl[.index,0,0,0,0] ;
	Flag = 1 ;
	Exitloop ;
	End ;
    End ;

!
! Determine if the text was found.
!
If NOT .flag
Then
    !
    ! Determine if the driver status code was one of the successful completion
    ! codes and build the message.
    !
    Begin
    Arglist[6] = CSTRING ('DATA') ;
    Index2 = -1 ;

    Case .btstatus from 1 to %x'17' of
	Set
	[1]: Index2 = 2 ;
	[3]: Index2 = 0 ;
	[5]: Index2 = 1 ;
	[7]: Index2 = 3 ;
	[%x'11']:
	    Begin
	    Index2 = 2 ;
	    Arglist[6] = CSTRING ('TEST') ;
	    End ;

	[%x'13']:
	    Begin
	    Index2 = 0 ;
	    Arglist[6] = CSTRING ('TEST') ;
	    End ;

	[%x'15']:
	    Begin
	    Index2 = 1 ;
	    Arglist[6] = CSTRING ('TEST') ;
	    End ;

	[%x'17']:
	    Begin
	    Index2 = 3 ;
	    Arglist[6] = CSTRING ('TEST') ;
	    End ;

	[INRANGE]:
	    Index2 = -1 ;
	Tes ;

    !
    ! Determine if driver status was one of the completion msgs.
    !
    If .index2 NEQ -1
    Then
	!
	! Yes, it was a completion msg, get the fao control string and 
	! address of the descriptor.
	!
	Begin
	Arglist[4] = .fao_strings[11] ;
	Arglist[5] = .msg[.index2] ;
	End 
    Else
	!
	! No, get the address of the unknown msg descriptor and the driver
	! status code.
	!
	Begin
	Arglist[4] = .unknown_desc ;
	Arglist[5] = .btstatus ;
	End ;
    End ;

!
! Format the string and output the driver status information.
!
FORMAT_STRING (arglist[4],desc,arglist[5]) ;

OUTPUT_LINES ( .fao_string1,arglist[0],
	       .fao_strings[3],arglist[3]) ;

!
! Translate and output the line state.
!
! Arglist contains: the register mnemonic, the starting position of the
! register contents field, the register contents, and the address of the
! descriptor for the line state text.
!
Arglist[0] = CSTRING ('LINE STATE') ;
Arglist[1] = (16 - .(.arglist[0])<0,8>)+4 ;
Arglist[2] = .line_state ;
Arglist[3] = line_states_desc_tbl[.line_state,0,0,0,0] ;

!
! Determine if the line state text contains multiple lines.
!
If .line_state  NEQ 0 OR
    .line_state NEQ 7
Then
    !
    ! Yes, format the string.
    !
    Begin
    Desc[dsc$w_length] = %ALLOCATION(buffer) ;
    FORMAT_STRING (arglist[3],desc,%REF(0)) ;
    Arglist[3] = desc ;
    End ;

!
! Output the line state information.
!
OUTPUT_LINES ( .fao_string1,arglist[0],
	       .fao_strings[3],arglist[3] ) ;

!
! Translate and output the register input to the KMS.
!
OUTPUT_REGISTERS (0) ;

!
! Translate and output the register output from the KMS.
!
OUTPUT_REGISTERS (1) ;

!
! Determine if there is mapping information that needs to be 
! translated and output. 
!
If .btstatus EQL %x'3F' OR	! non-existent memory error
    .btstatus EQL %x'E'		! not enough map registers error
Then
    !
    ! Yes, call the appropriate routines to translate and output it.
    !
    Begin
    UBA_MAPPING (lstlun,map_number,map_contents) ;
    UBA_MAPPING (lstlun,%REF(-1),final_map_contents) ;
    End ;

!
! Call the appropriate routines to translate and output 
! the unit control block information.
!
ORB$L_OWNER_RTN (lstlun,emb[emb$l_dv_ownuic]) ;
UCB$L_CHAR (lstlun,emb[emb$l_dv_char]) ;
UCB$W_STS_RTN (lstlun,emb[emb$w_dv_sts]) ;
UCB$L_OPCNT_RTN (lstlun,emb[emb$l_dv_opcnt]) ;
UCB$W_ERRCNT_RTN (lstlun,emb[emb$w_dv_errcnt]) ;

!
!UCB$B_SLAVE is currently not used but may be in the future.
!

End ;	! Routine


Routine OUTPUT_REGISTERS (flag) : NOVALUE = 
Begin

!++
!
! Functional Description:
!
!    This routine 
!
! Calling Sequence:
!
!    OUTPUT_REGISTERS (flag) ;
!
! Input Parameters:
!
!    Flag = indicates whether the registers are input to or output from
!	    the KMS (0 = input to KMS,  1 = output from KMS).
!
! Output Parameters:
!
!    None
!
!--

Bind regsav = (emb[emb$l_dv_regsav]+4) : vector [,long] ;

LOCAL
    Index,
    Index2,
    Reg_buffer:	Vector [512,byte],
    Reg_desc:	$BBLOCK [8]
		Preset ( [dsc$b_dtype] = dsc$k_dtype_t,
			 [dsc$b_class] = dsc$k_class_s,
			 [dsc$w_length] = 0,
			 [dsc$a_pointer] = reg_buffer ),
    Str_number ;

OWN
    Csr0:	REF $BBLOCK,
    Csr1:	REF $BBLOCK,
    Csr2:	REF $BBLOCK,
    Csr3:	REF $BBLOCK ;

!
! Determine whether to translate input or output CSR's.
!
If NOT .flag
Then
    ! 
    ! Input to KMS, get the input registers and the header.
    !
    Begin
    Csr0 = regsav[2] ;
    Csr1 = regsav[3] ;
    Csr2 = regsav[4] ;
    Csr3 = regsav[5] ;

    Arglist[0] = .input_header ;
    End 
Else
    ! 
    ! Output from KMS, get the output registers and the header.
    !
    Begin
    Csr0 = regsav[6] ;
    Csr1 = regsav[7] ;
    Csr2 = regsav[8] ;
    Csr3 = regsav[9] ;

    Arglist[0] = .output_header ;
    End ;

!
! Output the header.
!
OUTPUT_LINES (%ASCID '!/!1< !>!AS',arglist[0]) ;

!
! Translate and output the registers.
!
! CSR0
!
! Arglist contains: the register mnemonic, the starting position of the
! register contents field, and the register contents
!
Arglist[0] = CSTRING ('CSR0') ;
Arglist[1] = (16 - .(.arglist[0])<0,8>)+4 ;
Arglist[2] = ..csr0 ;

!
! Translate bits to text for the csr0 bits defined by csr0_mask.
!
If ( status = TRANSLATE_BITS (.csr0,csr0_mask,csr0_desc_tbl,
				out_arglist,fao_string,%REF(0)) )
Then
    !
    ! Bits translated, output the csr0 information.
    !
    Begin
    OUTPUT_LINES ( .fao_string1,arglist[0],
	           .fao_string,out_arglist[0] ) ;
    End 
Else
    !
    ! No bits translated, output the csr0 information.
    !
    OUTPUT_LINES ( .fao_string1,arglist[0] ) ;



!
! CSR1
!
! Arglist contains: the register mnemonic, the starting position of the
! register contents field, the register contents, and the address of the
! descriptor that contains the kms command text.
!
Arglist[0] = CSTRING ('CSR1') ;
Arglist[1] = (16 - .(.arglist[0])<0,8>)+4 ;
Arglist[2] = ..csr1 ;
Arglist[3] = kmscmds_desc_tbl[.csr1[cmd],0,0,0,0] ;

!
! Translate bits to text for the csr1 bits defined by csr1_mask.
!
If ( status = TRANSLATE_BITS (.csr1,csr1_mask,csr1_desc_tbl,
				out_arglist,fao_string,%REF(0)) )
Then
    !
    ! Bits translated, output the first part of the csr1 information.
    !
    Begin
    OUTPUT_LINES (  .fao_string1,arglist[0],
		    .fao_strings[3],arglist[3],
		    .fao_string,out_arglist[0] ) ;
    End 
Else
    !
    ! No bits translated, output the first part of the csr1 information.
    !
    OUTPUT_LINES (  .fao_string1,arglist[0],
		    .fao_strings[3],arglist[3] ) ;

!
! The line number will always be output so get the line info.
!
Arglist[0] = .csr1[line_num] ;
Str_number = 0 ;

!
! Via the KMS command, determine whether to output the memory 
! extension and lun information.
!
Case .csr1[cmd] from 0 to %x'B' of
    SET
    [0]:
	If .flag AND .csr3[cmd_sts] NEQ %x'36' OR
		     .csr3[cmd_sts] NEQ %x'35'
	Then
	    Begin
	    Arglist[0] = %ASCID 'LINE = N/A' ;
	    Str_number = 3 ;
	    End ;

    [5,6]:
	Begin
	If .flag
	Then
	    Begin
	    Arglist[0] = .csr1[mem_ext] ;
	    Arglist[1] = .csr1[line_num] ;
	    Arglist[2] = .csr1[lun] ;
	    Str_number = 1 ;
	    End 
	Else
	    Begin
	    If .csr1[cmd] EQL 5
	    then 
		Begin
		Arglist[1] = .csr1[lun] ;		
		Str_number = 2 ;
		End ;
	    End ;
	End ;

    [%x'A']:
	Begin
	If .flag
	Then
	    Begin
	    Arglist[0] = .csr1[mem_ext] ;
	    Arglist[1] = .csr1[line_num] ;
	    Str_number = 10 ;
	    End ;
	End ;

    [%x'B'] :
	Begin
	Arglist[0] = .csr1[line_num] ;
	Arglist[1] = .csr1[lun] ;
	Str_number = 2 ;
	End ;

    [Inrange]:
	Begin
	Arglist[0] = .csr1[line_num] ;
	Str_number = 0 ;
	End ;
    Tes ;

!
! Output the line, memory extension and lun information for CSR1.
!
OUTPUT_LINES ( .fao_strings[.str_number],arglist[0] ) ;


!
! CSR2
!
! Arglist contains: the register mnemonic, the starting position of the
! register contents field, the register contents, and the memory address.
!
Arglist[0] = CSTRING ('CSR2') ;
Arglist[1] = (16 - .(.arglist[0])<0,8>)+4 ;
Arglist[2] = ..csr2 ;
Arglist[4] = .csr2[mem_addrs] ;

!
! Determine whether the memory address string or the mcu address
! string should be output. Get the address of the appropriate string.
!
Str_number = 4 ; 

Case .csr1[cmd] from 0 to %x'B' of
    Set
    [0]:
	Arglist[3] = .mcu_string ;
    [1]:
	If .flag
	Then Arglist[3] = .mcu_string ;

    [3,5,6,9,%x'A']:
	Begin
	Arglist[3] = .mem_string ;
	End ;

    [%x'B']:
	Begin
	Arglist[3] = .csr2[sts_byte_0] ;
	Arglist[4] = .csr2[sts_byte_1] ;
	Str_number = 9 ; 
	End ;

    [Inrange]:
	Begin
	Str_number = -1 ; 
	End ;
    Tes ;

!
! Determine whether to output the memory address bit to text information.
!
If .str_number EQL -1
Then
    OUTPUT_LINES ( .fao_string1,arglist[0]) 
else
    OUTPUT_LINES ( .fao_string1,arglist[0],
		   .fao_strings[.str_number],arglist[3] ) ;

! 
! CSR3
!
! Arglist contains: the register mnemonic, the starting position of the
! register contents field, and  the register contents. 
!
Arglist[0] = CSTRING ('CSR3') ;
Arglist[1] = (16 - .(.arglist[0])<0,8>)+4 ;
Arglist[2] = ..csr3 ;

!
! Output the first part of the CSR3 information.
!
OUTPUT_LINES ( .fao_string1,arglist[0] ) ;

!
! Determine whether translating the output csr's.
!
If .flag 
Then
    ! 
    ! Yes, get the command status text.
    Begin
    Arglist[3] = reg_desc ;
    Str_number = 3 ; 

    Index = -1 ;
    If .csr3[cmd_sts] EQL 9 
    Then Index = 0 ;

    Case .csr3[cmd_sts] from %X'28' to %x'3F' of
	Set
	[%x'28']: Index = 1 ;
	[%x'2D']: Index = 2 ;
	[%x'2E']: Index = 3 ;
	[%x'2F']: Index = 4 ;
	[%x'30']: Index = 5 ;
	[%x'31']: Index = 6 ;
	[%x'32']: Index = 7 ;
	[%x'33']: Index = 8 ;
	[%x'34']: Index = 9 ;
	[%x'35']: Index = 10 ;
	[%x'36']: Index = 11 ;
	[%x'37']: Index = 12 ;
	[%x'38']: Index = 13 ;
	[%x'39']:
	    Begin
	    Index = -2 ;
	    Case .csr1[cmd] from 0 to %x'B' of
		Set
		[0]:
		    Arglist[4] = $DESCRIPTOR ('MODEM ALREADY INITIALIZED') ;

		[1]:
		    Arglist[4] = $DESCRIPTOR ('MODEM NOT INITIALIZED OR LINE!/!39< !>ALREADY INITIALIZED') ;

		[2]:
		    Arglist[4] = $DESCRIPTOR ('LINE NOT INITIALIZED OR!/!39< !>NOT DISCONNECTED') ;

		[3,4]:
		    Arglist[4] = $DESCRIPTOR ('LINE NOT INITIALIZED OR!/!39< !>ALREADY CONNECTED') ;

		[5,6,%X'A',%X'B']:
		    Arglist[4] = $DESCRIPTOR ('LINE NOT INITIALIZED OR!/!39< !>NOT CONNECTED') ;

		[INRANGE]:
		    Begin
		    Arglist[4] = .unknown_desc ;
		    Arglist[5] = .csr3[cmd_sts] ;
		    End ;
		Tes ;
	    End ;
	[%x'3A']: Index = 14 ;
	[%x'3D']: Index = 15 ;
	[%x'3E']: Index = 16 ;
	[%x'3F']:
	    Begin
	    Index = 17 ;
	    Case .csr1[cmd] from 1 to %x'A' of
		Set
		[1]: 
		    Arglist[5] = CSTRING ('PARAMETER') ;

		[5,%X'A']: 
		    Arglist[5] = CSTRING ('TRANSMIT') ;

		[6]: 
		    Arglist[5] = CSTRING ('RECEIVE') ;

		[9]: 
		    Arglist[5] = CSTRING ('STATISTICS MEM') ;

		[INRANGE]:
		    Begin
		    Arglist[4] = .unknown_desc ;
		    Arglist[5] = .csr3[cmd_sts] ;
		    End ;
		Tes ;
	    End ;

	[INRANGE]:
  	    Index = -1
	Tes ;

    !
    ! Determine whether the command status code was found.
    !
    If .index GTR 0 
    Then
	!
	! Yes, get the address of the descriptor.
	!
	Arglist[4] = cmdsts_desc_tbl[.index,0,0,0,0] ;
    !
    ! Determine whether the command status code was found.
    !
    If .index EQL -1
    Then
	! 
	! Determine if it was one of the completion msgs and
	! build the appropriate msg.
	! 
	Begin
	Arglist[6] = CSTRING ('FROM LUN') ;
	Index2 = -1 ;

	Case .csr3[cmd_sts] from 1 to %x'17' of
	    Set
	    [1]: Index2 = 2 ;
	    [3]: Index2 = 0 ;
	    [5]: Index2 = 1 ;
	    [7]: Index2 = 3 ;
	    [%x'11']:
		Begin
		Index2 = 2 ;
		Arglist[6] = CSTRING ('OF TEST REQUEST MSG FROM LINE') ;
		End ;

	    [%x'13']:
		Begin
		Index2 = 0 ;
		Arglist[6] = CSTRING ('OF TEST REQUEST MSG FROM LINE') ;
		End ;

	    [%x'15']:
		Begin
		Index2 = 1 ;
		Arglist[6] = CSTRING ('OF TEST REQUEST MSG FROM LINE') ;
		End ;

	    [%x'17']:
		Begin
		Index2 = 3 ;
		Arglist[6] = CSTRING ('OF TEST REQUEST MSG FROM LINE') ;
		End ;

	    [INRANGE]:
		Index2 = -1 ;
	    Tes ;

	!
	! Determine if it was one of the completion msgs.
	!
	If .index2 NEQ -1
	Then
	    !
	    ! Yes, get the fao control string and the msg.
	    !
	    Begin
	    Arglist[4] = .fao_strings[12] ;
	    Arglist[5] = .msg[.index2] ;
	    End 
	Else
	    !
	    ! No, get the address of the unknown msg descriptor and 
	    ! the command sts code.
	    !
	    Begin
	    Arglist[4] = .unknown_desc ;
	    Arglist[5] = .csr3[cmd_sts] ;
	    End ;
	End ;

    !
    ! Format the string.
    !
    Reg_desc[dsc$w_length] = %ALLOCATION(reg_buffer) ;
    FORMAT_STRING (arglist[4],reg_desc,arglist[5]) ;
    End ;

!
! Determine whether to output the byte count and memory extension information.
!
Case .csr1[cmd]from 0 to %x'B' of
    Set
    [0,1,3,%x'9']:
	Begin
	If NOT .flag
	Then 
	    ! 
	    ! Translating input csr's, get the input memory extension info.
	    !
	    Begin
	    Arglist[3] = .csr3[inp_mem_ext] ;
	    Str_number = 8 ;
	    End
	Else
	    ! 
	    ! Translating output csr's, get the output memory extension info.
	    !
	    Begin
	    Arglist[3] = .csr3[out_mem_ext] ;	    
	    Arglist[4] = reg_desc ;
	    Str_number = 5 ; 
	    End ;
	End ;

    [5,6,%x'A']:
	Begin
	If NOT .flag
	Then
	    ! 
	    ! Translating input csr's, get the byte count and the
	    ! input memory extension info.
	    !
	    Begin
	    Arglist[3] = .csr3[byte_cnt] ;
	    Arglist[4] = .csr3[inp_mem_ext] ;
	    Str_number = 6 ; 
	    End
	Else
	    ! 
	    ! Translating output csr's, get the byte count info.
	    !
	    Begin
	    Arglist[3] = .csr3[byte_cnt] ;
	    Arglist[4] = reg_desc ;
	    Str_number = 7 ; 
	    End ;
	End ;

    [Inrange]:
	Begin
	If NOT .flag 
	Then
	    ! 
	    ! Translating input csr's, nothing left to output, return
	    ! to the calling routine.
	    !
	    Return
	Else
	    ! 
	    ! Translating output csr's, set up the fao control string
	    ! number for the output of the command sts.
	    !
	    Str_number = 3 ; 
	End ;
    Tes ;

!
! Output the remainder of the csr3 information.
!
OUTPUT_LINES ( .fao_strings[.str_number],arglist[3] ) ;

End ;		! Routine

End 
ELUDOM 

