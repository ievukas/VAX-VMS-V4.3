%TITLE 'EDT$CHMCHANGE - change mode execution'
MODULE EDT$CHMCHANGE (				! Change mode execution
		IDENT = 'V04-000'			! File: CHMCHANGE.BLI Edit: REM1040
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module contains the main routine for change mode execution.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: Unknown
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 04-Feb-1981.  This module was created by
!	extracting the routine EDT$$CHM_EXE  from module CHANGE.BLI.
! 1-002	- Regularize headers and remove control C.  JBS 27-Feb-1981
! 1-003	- Fix module name.  JBS 02-Mar-1981
! 1-004	- Revise journaling.  JBS 22-Jun-1981
! 1-005	- Fix a journaling bug.  JBS 08-Jul-1981
! 1-006	- Use EDT$_ for message codes.  JBS 04-Aug-1981
! 1-007	- Fix a comment which stated that EDT$$GZ_COMMAND_RAB is an implicit input;
!	   actually, it is not used.  JBS 16-Aug-1981
! 1-008	- Return if the journal file terminates, and tell the caller.  JBS 01-Oct-1981
! 1-009 - Change EOB to user defined string. STS 06-Oct-1981
! 1-010	- Change literal prompt to use global string.  JBS 20-Oct-1981
! 1-011	- Remove length of prompt string.  JBS 23-Oct-1981
! 1-012	- Add control C handling.  JBS 21-Dec-1981
! 1-013	- Debug control C handling.  JBS 24-Dec-1981
! 1-014	- Add EDT$$G_JOU_VALID.  JBS 09-Apr-1982
! 1-015	- Simplify the call to EDT$$SC_RESET.  JBS 22-Apr-1982
! 1-016	- Add alternative control C message.  JBS 25-May-1982
! 1-017	- Clear EDT$$G_EXI before exiting.  JBS 02-Jun-1982
! 1-018	- Clear error indicator after an error in hardcopy
!	   change mode.  JBS 02-Jun-1982
! 1-019 - Remove reference to SET_FMTWRRUT and other message changes.
!	  SMB 29-Jun-1982
! 1-020 - Make FIRST_TIME_ENTERED a global.  SMB 1-Jul-1982
! 1-021	- Remove EDT$$G_CHM_FRST_ENTRY, use instead EDT$$G_LASTMSG.  JBS 05-Jul-1982
! 1-022 - Remove EDT$$G_LN_NO.  SMB 24-Sep-1982
! 1-023	- Change the call to screen update and add a LOAD entry point, so this module
!	   can be displaced by the screen update modules on the PDP-11.  JBS 25-Sep-1982
! 1-024	- Change the screen update call again, to improve overlay size.  JBS 27-Sep-1982
! 1-025 - Remove the call to SC_INIT, set a flag instead.  SMB 06-Oct-1982
! 1-026 - Convert to new journalling scheme. STS 06-Oct-1982
! 1-027	- Change the name of the cursor positioning routine, to obsolete a
!	   redundent module.  JBS 07-Oct-1982
! 1-028	- Correct a comment.  JBS 09-Oct-1982
! 1-029	- Set EDT$$G_SCR_REBUILD on exit, so line mode will be more efficient.  JBS 21-Oct-1982
! 1-030 - First time through - ignore typeahead. STS 10-Nov-1982
! 1-031 - First time through - don't update screen if typeahead. STS 01-Dec-1982
! 1-032 - Clear screen first time through. STS 02-Dec-1982
! 1-033 - Fix problem with hardcopy recoveries. STS 13-Dec-1982
! 1-034	- Only initialize the screen once.  JBS 20-Dec-1982
! 1-035	- Be more careful about printing the owed message.  JBS 18-Jan-1983
! 1-036	- Don't call EDT$$ERA_MSGLN unnecessarily.  JBS 20-Jan-1983
! 1-037	- Don't call EDT$$RD_ECHO unnecessarily.  JBS 21-Jan-1983
! 1-038	- Only update the screen for every 10 characters when doing
!	   a recovery.  JBS 21-Jan-1983
! 1-039	- Add new value for EDT$$G_SCR_CHGD.  JBS 02-Mar-1983
! 1-040 - Added logic to maintain EDT$$G_TIN_OBUFPOS durring /RECOVERY mode.
!	  REM 10-Oct-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$CHM_EXE,				! Driver for change mode processing
    EDT$$LOAD_CHMCHANGE : NOVALUE;		! Load this module into memory

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$CHM_EXE  - change mode execution'

GLOBAL ROUTINE EDT$$CHM_EXE 			! Change mode execution
    =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the main routine for change mode execution.  First we initialize
!	for change mode, then execute any change mode commands on the current
!	command line.  After we have finished with them, we check to see if an
!	exit was done and if so get out.  Otherwise we enter into the change mode
!	command loop, getting commands and executing them until an exit is done,
!	or until the journal file ends.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$T_CMD_BUF
!	EDT$$G_CUR_COL
!	EDT$$G_CS_LNO
!	EDT$$G_EXI
!	EDT$$G_CMD_LEN
!	EDT$$A_CMD_BUF
!	EDT$$G_INP_SRC
!	EDT$$G_RCOV_MOD
!	EDT$$G_TI_TYP
!	EDT$$T_LN_BUF
!	EDT$$A_LN_PTR
!	EDT$$A_LN_END
!	EDT$$T_PMT_HCCHG
!	EDT$$G_CC_DONE
!	EDT$$G_LASTMSG
!	EDT$$G_TIN_ECHOFLG
!	EDT$$G_RECSCRUPD
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_CMD_BUF
!	EDT$$A_CMD_END
!	EDT$$A_CUR_BUF
!	EDT$$G_EDIT_MOD
!	EDT$$G_EXI
!	EDT$$G_JOU_VALID
!	EDT$$G_RECSCRUPD
!	EDT$$G_SCR_CHGD
!	EDT$$G_SCR_REBUILD
!	EDT$$G_TIN_OBUFPOS
!
! ROUTINE VALUE:
!
!	1 = reached the end of the journal file
!	0 = executed an exit command
!
! SIDE EFFECTS:
!
!	MANY
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$MSG_BELL : NOVALUE,		! Output a message to the terminal with a warning bell
	EDT$$SC_POSCSIF : NOVALUE,		! Position the cursor
	EDT$$RD_ECHO,				! Try to optimize terminal input
	EDT$$INIT_CHM : NOVALUE,		! Initialization on entering change mode
	EDT$$FMT_CH,				! Format a charcter
	EDT$$OUT_FMTBUF,			! Dump the format buffer
	EDT$$FMT_STR,				! Format a string
	EDT$$RD_CMDLN,				! Get a command line
	EDT$$TI_BUFCH : NOVALUE,		! Put a character in the journal file buffer
	EDT$$TI_FLUSHJOUFI : NOVALUE,		! Empty the journal file's buffer
	EDT$$RD_JOUTXT,				! Read a text record from the journal file
	EDT$$TI_WRLN,				! Write to terminal
	EDT$$TI_WRSTR,				! Write to terminal unformatted
	EDT$$GET_KPADCMD,			! Get a keypad command
	EDT$$FMT_TEXT : NOVALUE,		! output eob string
	EDT$$SC_INIT,				! initialize terminal for change mode
	EDT$$SC_ERAALL,				! erase the screen
	EDT$$RPL_CHGDLN,			! Declare current line as changed
	EDT$$CHM_PAREXE,			! Parse and execute a change mode command string
	EDT$$SC_RESET,				! Reset screen parameters
	EDT$$SC_UPD_NOOVERLAY1,			! Update the screen, no overlay checking on PDP-11
	EDT$$START_WKINGMSG,			! Set up working AST
	EDT$$STOP_WKINGMSG,			! Terminate working AST
	EDT$$FMT_MSG,				! Print message text
	EDT$$ERA_MSGLN,				! Erase the message line
	EDT$$TI_TSTTYAHED,			! Check for type ahead
	EDT$$CHK_CC,				! Check for control C
	EDT$$CLR_CC : NOVALUE;			! Clear control C flag

    EXTERNAL
	EDT$$G_EDIT_DFLTMOD,			! Editing default mode
	EDT$$G_PUT_JOU,
	EDT$$G_MESSAGE_LINE,			! Error message line is 1 more
	EDT$$G_MSGFLG,				! 1 = there is a message on the last line
	EDT$$G_LASTMSG,				! The last message printed
	EDT$$A_FMT_WRRUT,			! Holds address of write routine
	EDT$$T_CMD_BUF,				! Command string buffer
	EDT$$G_CUR_COL,				! current column
	EDT$$G_CS_LNO,				! cursor line.
	EDT$$A_CMD_END,				! End of command pointer
	EDT$$G_EXI,				! Change mode has been exited.
	EDT$$G_CMD_LEN,				! Length of command buffer
	EDT$$A_CMD_BUF,				! Command string pointer
	EDT$$G_INP_SRC,				! Source of command input.
	EDT$$G_RCOV_MOD,			! In recovery mode?
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,	! The current buffer tbcb
	EDT$$G_TI_TYP,				! Terminal type.
	EDT$$T_LN_BUF,				! Current line buffer
	EDT$$A_LN_PTR,				! Current character pointer
	EDT$$A_LN_END,				! End of current line pointer
	EDT$$G_EDIT_MOD,			! Editing mode: line or change
	EDT$$T_PMT_HCCHG : VECTOR [, BYTE],	! Counted ASCII prompt string for hardcopy change mode
	EDT$$G_JOU_VALID,			! 1 = journal record is valid
	EDT$$A_WK_LN : REF LIN_BLOCK,
	EDT$$Z_EOB_LN,
	EDT$$G_CC_DONE,				! 1 = Control C actually aborted something
	EDT$$G_SCR_CHGD,			! The screen must be repainted
	EDT$$G_SCR_REBUILD,			! The screen must be rebuilt from the work file
	EDT$$G_TIN_ECHOFLG,
	EDT$$G_RECSCRUPD,			! Counter for screen updates in recovery mode
	EDT$$G_TIN_OBUFPOS;			! Position in journal output buffer

    LOCAL
	FIRST_TIME,				! 1 = first time, at least initialize the screen
	STATUS,					! 0 = error, 1 = ok, 2 = journal file ended
	CC_MSG,					! 0 = no message, 1 = aborted msg, 2 = ignored msg
	OWED_MESSAGE;				! 1 = no message, else the code for the message to print

!+
! Specify messages used in this routine.
!-
    MESSAGES ((CHGMODTER, ABOBYCC, CTRC__IGN));
!+
! Since we entered this routine, we must be in change mode.
!-
    ASSERT (.EDT$$G_EDIT_MOD EQL CHANGE_MODE);
!+
! Perform initialization.
!-
    EDT$$INIT_CHM ();
    FIRST_TIME = 1;
    CC_MSG = 0;
!+
! make sure any previous commands have been written out to the journal file
!-

    IF .edt$$g_rcov_mod THEN
	edt$$g_tin_obufpos = 0
    ELSE
	edt$$ti_flushjoufi (%C'T');

!+
! Execute remainder of command line if there is a semicolon.
!-

    IF (CH$RCHAR (.EDT$$A_CMD_BUF) NEQ %C'!') THEN STATUS = EDT$$CHM_PAREXE (1) ELSE STATUS = 1;

!+
! If an exit command was seen, get out now.
!-

    IF .EDT$$G_EXI
    THEN
	BEGIN
	EDT$$G_EDIT_MOD = LINE_MODE;
	EDT$$RPL_CHGDLN ();
	EDT$$G_EXI = 0;
	RETURN (0);
	END;

!+
! Before entering the command loop, make sure the input is either coming
! from the terminal or from a recovery file.  We do not allow the startup
! file or macros to enter change mode.
!-

    IF (((.EDT$$G_INP_SRC NEQ INP_TERM) AND ( NOT .EDT$$G_RCOV_MOD)) OR 	!
	(.EDT$$G_TI_TYP EQL TERM_UNKNOWN))
    THEN
	BEGIN
	EDT$$G_EDIT_MOD = LINE_MODE;
	EDT$$FMT_MSG (EDT$_CHGMODTER);
	RETURN (0);
	END;

!+
! Set up for change mode editing.
!-
    OWED_MESSAGE = 1;

    IF ((.EDT$$G_TI_TYP EQL TERM_VT52) OR (.EDT$$G_TI_TYP EQL TERM_VT100))
    THEN
	BEGIN
	EDT$$A_FMT_WRRUT = EDT$$TI_WRSTR;
!+
! Since we are about to refresh the screen, remember if there is a message,
! so we can display it.  This lets us display, for example, "Input file does not
! have standard text format" even if the first thing we do is enter change mode.
!-
	OWED_MESSAGE = .EDT$$G_LASTMSG;
	EDT$$G_SCR_CHGD = 2;			! Initialize terminal and repaint screen
	END;

!+
! Now loop through, getting commands until an exit is seen or the journal file ends.
!-

    WHILE ((.EDT$$G_EXI EQL 0) AND (.STATUS NEQ 2)) DO
	BEGIN

	IF .edt$$g_put_jou
	THEN
	    BEGIN

	    IF .edt$$g_rcov_mod THEN
		edt$$g_tin_obufpos = 0
	    ELSE
		edt$$ti_flushjoufi (%C'T');

	    edt$$clr_cc ();
	    edt$$g_put_jou = 0
	    END;

!+
! Check for a hardcopy terminal.
!-

	IF (.EDT$$G_TI_TYP EQL TERM_HCPY)
	THEN
	    BEGIN
!+
! Hard copy change mode.  Output a control C message if we owe one.
!-

	    CASE .CC_MSG FROM 0 TO 2 OF
		SET

		[0] : 				! We don't owe a message
		    BEGIN
		    0
		    END;

		[1] : 				! The previous operation was aborted by a control C
		    BEGIN
		    EDT$$MSG_BELL (EDT$_ABOBYCC);
		    CC_MSG = 0;
		    END;

		[2] : 				! The previous control C was ignored
		    BEGIN
		    EDT$$MSG_BELL (EDT$_CTRC__IGN);
		    CC_MSG = 0;
		    END;
		TES;

!+
! Type the current line with the cursor bracketed.
!-

	    IF (.EDT$$A_WK_LN EQLA EDT$$Z_EOB_LN)
	    THEN
		EDT$$FMT_TEXT (0)
	    ELSE
		BEGIN
		EDT$$FMT_STR (EDT$$T_LN_BUF, CH$DIFF (.EDT$$A_LN_PTR, CH$PTR (EDT$$T_LN_BUF)));
		EDT$$FMT_CH ('[');
		EDT$$FMT_CH (CH$RCHAR (.EDT$$A_LN_PTR));
		EDT$$FMT_CH (']');

		IF CH$PTR_NEQ (.EDT$$A_LN_PTR, .EDT$$A_LN_END)
		THEN
		    EDT$$FMT_STR (CH$PLUS (.EDT$$A_LN_PTR, 1), CH$DIFF (.EDT$$A_LN_END, .EDT$$A_LN_PTR) - 1);

		END;

	    EDT$$OUT_FMTBUF ();
!+
! Now get the next command string.
!-
	    STATUS = 1;

	    IF .EDT$$G_RCOV_MOD
	    THEN
		BEGIN

		IF ( NOT EDT$$RD_JOUTXT (EDT$$T_CMD_BUF, EDT$$G_CMD_LEN))
		THEN
		    STATUS = 2			! Journal file ended
		ELSE
		    BEGIN

		    IF (.EDT$$G_CMD_LEN EQL 2)
		    THEN

			IF (CH$RCHAR (CH$PTR (EDT$$T_CMD_BUF)) EQL %C'^')
			THEN

			    IF ((CH$RCHAR (CH$PTR (EDT$$T_CMD_BUF, 1)) EQL %C'Z') OR 	!
				(CH$RCHAR (CH$PTR (EDT$$T_CMD_BUF, 1)) EQL %C'z'))
			    THEN
				EDT$$G_EXI = 1;

		    EDT$$A_CMD_END = CH$PTR (EDT$$T_CMD_BUF, .EDT$$G_CMD_LEN);
		    EDT$$G_TIN_OBUFPOS = .EDT$$G_TIN_OBUFPOS + .EDT$$G_CMD_LEN
		    END

		END
	    ELSE
		BEGIN
!+
! We are not recovering.
!-
!+
! Since we are about to read from the terminal, make sure the last
! line has been written to the journal file.
!-
		EDT$$G_EXI = EDT$$RD_CMDLN (EDT$$T_PMT_HCCHG [1], .EDT$$T_PMT_HCCHG [0], EDT$$T_CMD_BUF,
		    EDT$$G_CMD_LEN, 255);
		EDT$$A_CMD_END = CH$PTR (EDT$$T_CMD_BUF, .EDT$$G_CMD_LEN);
!+
! Put the new line in the journal file buffer.
!-

		IF .EDT$$G_EXI
		THEN
		    BEGIN
		    EDT$$TI_BUFCH ('^');
		    EDT$$TI_BUFCH ('Z');
		    END
		ELSE
		    BEGIN

		    INCR COUNTER FROM 0 TO .EDT$$G_CMD_LEN - 1 DO
			EDT$$TI_BUFCH (CH$RCHAR (CH$PTR (EDT$$T_CMD_BUF, .COUNTER)));

		    END;

		EDT$$G_JOU_VALID = 1;
		END;

	    END
	ELSE
	    BEGIN
!+
! This is not a hard copy terminal.
! Erase the message line, unless it is scheduled to be erased by the next keystroke.
!-

	    IF (( NOT .EDT$$G_MSGFLG) AND .EDT$$G_TIN_ECHOFLG) THEN EDT$$ERA_MSGLN ();

!+
! Check for characters in type ahead.  Do not update if there
! are more characters to handle.
!-

	    IF ( NOT EDT$$TI_TSTTYAHED ())
	    THEN
		BEGIN
		FIRST_TIME = 0;
!+
! Update the screen.  This call may bring in the screen update overlay;
! this module will be loaded back into memory before the return.
! In recovery mode we update the screen only 1/10 as often, to make
! recovery go faster, particularly when an overlay is needed.
!-

		IF .EDT$$G_RCOV_MOD
		THEN
		    BEGIN
		    EDT$$G_RECSCRUPD = .EDT$$G_RECSCRUPD - 1;

		    IF (.EDT$$G_RECSCRUPD LEQ 0)
		    THEN
			BEGIN
			EDT$$G_RECSCRUPD = 10;
			EDT$$SC_UPD_NOOVERLAY1 ();
			END

		    END
		ELSE
		    EDT$$SC_UPD_NOOVERLAY1 ();

!+
! Re-display the last message we saw before entering change mode.
!-

		IF (.OWED_MESSAGE NEQ 1)	! If there is a message
		THEN
		    BEGIN
		    EDT$$SC_POSCSIF (.EDT$$G_MESSAGE_LINE + 1, 0);
		    EDT$$MSG_BELL (.OWED_MESSAGE);
		    EDT$$G_MSGFLG = 1;		! Erase it on next keystroke
		    OWED_MESSAGE = 1;		! We no longer owe the message
		    END
		ELSE
		    BEGIN
!+
! Output a control C message if we owe one.
!-

		    CASE .CC_MSG FROM 0 TO 2 OF
			SET

			[0] : 			! We don't owe a message
			    BEGIN
			    0
			    END;

			[1] : 			! The previous operation was aborted by a control C
			    BEGIN
			    EDT$$MSG_BELL (EDT$_ABOBYCC);
			    CC_MSG = 0;
			    END;

			[2] : 			! The previous control C was ignored
			    BEGIN
			    EDT$$MSG_BELL (EDT$_CTRC__IGN);
			    CC_MSG = 0;
			    END;
			TES;

		    END;

!+
! Check for the optimized input applying.
!-

		IF ( NOT .EDT$$G_RCOV_MOD)
		THEN

		    IF ( NOT EDT$$RD_ECHO ()) THEN EDT$$SC_POSCSIF (.EDT$$G_CS_LNO, .EDT$$G_CUR_COL);

		END
	    ELSE

		IF .FIRST_TIME
		THEN
		    BEGIN
		    FIRST_TIME = 0;
		    EDT$$SC_INIT ();
		    EDT$$SC_ERAALL ();
		    END;

!+
! Get the next command string.
!-
	    EDT$$A_CMD_BUF = CH$PTR (EDT$$T_CMD_BUF);
	    EDT$$A_CMD_END = CH$PTR (EDT$$T_CMD_BUF, 256);

	    IF EDT$$CHK_CC () THEN STATUS = 1 ELSE STATUS = EDT$$GET_KPADCMD ();

	    END;

	IF ((.STATUS EQL 1) AND ( NOT EDT$$CHK_CC ()))
	THEN
	    BEGIN
!+
! Start up the 'working' AST.
!-

	    IF (.EDT$$G_TI_TYP NEQ TERM_HCPY) THEN EDT$$START_WKINGMSG ();

!+
! Execute the command string in EDT$$T_CMD_BUF .
!-
	    EDT$$A_CMD_BUF = CH$PTR (EDT$$T_CMD_BUF);
	    STATUS = EDT$$CHM_PAREXE (1);
!+
! Turn off the 'working' AST.
!-

	    IF (.EDT$$G_TI_TYP NEQ TERM_HCPY) THEN EDT$$STOP_WKINGMSG ();

	    END;

!+
! If the control C flag is set, the command was probably aborted by a control C.
! Invalidate the screen (since control C can sometimes cause a scroll) and arrange
! to show an appropriate message.
!-

	IF EDT$$CHK_CC ()
	THEN
	    BEGIN

	    IF (EDT$$G_TI_TYP NEQ TERM_HCPY) THEN EDT$$G_SCR_CHGD = 1;

	    IF .EDT$$G_CC_DONE THEN CC_MSG = 1 ELSE CC_MSG = 2;

	    END
	ELSE
	    CC_MSG = 0;

	END;

    EDT$$RPL_CHGDLN ();
!+
! Clean up after ourselves.  If we will be back here because this is
! just the journal file ending we will put everything back for change
! mode again.
!
! Reset the terminal as required.
!-
    EDT$$SC_RESET ();
!+
! Flag that the screen must be rebuilt from the work file.  This makes line
! mode more efficient, since it does not need to maintain the screen data base.
!-
    EDT$$G_SCR_REBUILD = 1;
!+
! Reset the formatted write routine for line mode.
!-
    EDT$$A_FMT_WRRUT = EDT$$TI_WRLN;
    EDT$$A_CUR_BUF [TBCB_CHAR_POS] = CH$DIFF (.EDT$$A_LN_PTR, CH$PTR (EDT$$T_LN_BUF));
    EDT$$A_CMD_BUF = CH$PTR (EDT$$T_CMD_BUF);
    CH$WCHAR (%C'!', .EDT$$A_CMD_BUF);

    IF (.EDT$$G_EXI NEQ 0)
    THEN
	BEGIN
	EDT$$G_EDIT_MOD = LINE_MODE;
	EDT$$G_EXI = 0;
	END;

    IF (.STATUS EQL 2) THEN RETURN (1) ELSE RETURN (0);

    END;					! of routine EDT$$CHM_EXE


%SBTTL 'EDT$$LOAD_CHMCHANGE - load this module into memory'

GLOBAL ROUTINE EDT$$LOAD_CHMCHANGE 		! Load this module into memory
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a do-nothing entry point, which serves to get this module
!	loaded back into memory in case it was displaced by the screen update modules.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    0
    END;					! of routine EDT$$LOAD_CHMCHANGE

!<BLF/PAGE

END						! of module EDT$CHMCHANGE

ELUDOM
