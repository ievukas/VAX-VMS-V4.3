MODULE BAS$KILL (				!
		IDENT = '1-007'			! File: BASKILL.B32 MDL1007
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous
!
! ABSTRACT:
!
!	This module implements the BASIC KILL statement,
!	which deletes a file.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 01-MAR-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 01-MAR-1979
! 1-002	- Correct a typo in a comment.  JBS 14-MAY-1979
! 1-003	- Go through the full error analyzer if an error occurs.
!	   JBS 09-AUG-1979
! 1-004 - Add code to allow an open file to be KILLed.  PLL 15-Jun-1982
! 1-005 - Edit 004 should have included a guard against ASTs.  PLL 17-Jun-1982
! 1-006 - Edit 004 should have released the CCB after doing what it needed to
!	  once it found a match.  MDL 30-Sep-1982
! 1-007 - Edit 004 should also release the CCB when it doesn't find a match;
!	  otherwise the IOINPROG bit for that unit gets set and never cleared,
!	  causing subsequent OPENs to fail with IOCHAALR.  MDL 6-Feb-1984
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$KILL : NOVALUE,				! Change a file's name
    PUSH_CCB : CALL_CCB;			! Calls BAS$$CB_PUSH
!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

REQUIRE 'RTLML:OTSLUB';

LIBRARY 'RTLSTARLE';				! System definitions

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$STOP : NOVALUE,			! signal fatal error
    BAS$$STOP_RMS : NOVALUE,			! signals fatal RMS error
    BAS$$NEXT_LUN : NOVALUE,			! find next allocated LUN
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! get a CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! release a CCB
    LIB$SIG_TO_RET;				! condition handler

GLOBAL ROUTINE BAS$KILL (			! Delete a file
	FILE_NAME				! Name of file to delete
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Delete a file.  This is done by using the $ERASE
!	RMS macro.
!
! FORMAL PARAMETERS:
!
!	FILE_NAME.rt.dx	The name of the file to delete.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Deletes the specified file and removes its directory entry.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = 11 : REF BLOCK [,BYTE];

    MAP
	FILE_NAME : REF BLOCK [8, BYTE];

    LOCAL
	FAB_BLOCK : $FAB_DECL,
	NAM_BLOCK : $NAM_DECL,
	NAMBUF : VECTOR [NAM$C_MAXRSS, BYTE],
	ERASE_RESULT,
	LUN_FLAG,
	STATUS : INITIAL (1),
	UNIT;

    CH$FILL (%C' ', NAM$C_MAXRSS, NAMBUF);	! init resultant name to blanks

    $FAB_INIT (FAB = FAB_BLOCK, 		!
	FNA = .FILE_NAME [DSC$A_POINTER], 	!
	FNS = .FILE_NAME [DSC$W_LENGTH], 	!
	NAM = NAM_BLOCK);
!
    $NAM_INIT (NAM = NAM_BLOCK,
	ESS = NAM$C_MAXRSS,
	ESA = NAMBUF,
	RSS = NAM$C_MAXRSS,
	RSA = NAMBUF);
!
    ERASE_RESULT = $ERASE (FAB = FAB_BLOCK);

    IF ( NOT .ERASE_RESULT)
    THEN
	BEGIN
!+
! Analyze the RMS error status to give a BASIC error message.
!-
	IF (.ERASE_RESULT NEQ RMS$_FLK)
	THEN
	    BAS$$STOP_RMS (.FILE_NAME, .FAB_BLOCK [FAB$L_STS], .FAB_BLOCK [FAB$L_STV])
        ELSE
	    BEGIN
!+
! If this is a file locked error, perhaps the user is trying to KILL a file
! that is still open.  See if the file is open on any LUN.  If it is, set
! the LUB$V_DELETE bit which will be acted upon at close time and do not
! return an error.
!-
	    $PARSE (FAB = FAB_BLOCK);
	    $SEARCH (FAB = FAB_BLOCK);		! get resultant name
	    LUN_FLAG = 0;
	    IF .STATUS THEN DO
	    BEGIN
		BAS$$NEXT_LUN (LUN_FLAG, UNIT); ! get next used LUN
		IF .LUN_FLAG NEQ 0
		THEN
		    BEGIN
		    !+
		    ! We have a unit which has been allocated by Basic.
		    ! Call BAS$$CB_PUSH and see if the file names match.
		    !-
			STATUS = PUSH_CCB (.UNIT);
			IF .STATUS AND (.CCB NEQ 0)
			THEN
			    IF .CCB [LUB$V_OPENED]
			    THEN
				IF CH$EQL (.CCB [LUB$B_RSL], .CCB [LUB$A_RSN],
				    .NAM_BLOCK [NAM$B_RSS], .NAM_BLOCK [NAM$L_RSA], %C ' ')
				THEN
				    BEGIN
				    !+
				    ! Found a match.  Disable ASTs and make sure
				    ! the file has not been closed since we first
				    ! discovered the match.  If still open, then
				    ! set the delete bit in the LUB.  If the file
				    ! has already been closed, try $ERASE again.
				    !-
				    LOCAL
					AST_STATUS;
				    AST_STATUS = $SETAST (ENBFLG = 0); ! disable ASTs
				    IF CH$EQL (.CCB [LUB$B_RSL], .CCB [LUB$A_RSN],
					.NAM_BLOCK [NAM$B_RSS], .NAM_BLOCK [NAM$L_RSA],
					%C ' ')
				    THEN
					BEGIN
					CCB [LUB$V_DELETE] = 1;
					ERASE_RESULT = 1;
					END
				    ELSE
					ERASE_RESULT = $ERASE (FAB = FAB_BLOCK);
				    IF .AST_STATUS EQL SS$_WASSET
				    THEN
					$SETAST (ENBFLG = 1); ! re-enable ASTs
				    !+
				    ! release the unit (CCB).
				    !-
				    BAS$$CB_POP ();
				    EXITLOOP
				    END;
		    !+
		    ! No match.  Release this unit and continue scanning units.
		    !-
		    BAS$$CB_POP ();
		    END;	    
	    END
	    UNTIL .LUN_FLAG EQL 0;		! until no more LUNs

    	IF NOT .STATUS
    	THEN
	!+
	! Signal error.  File was not open on any channel.
	!-
    	    BAS$$STOP (.STATUS)
	ELSE
	!+
	! No PUSH_CCB error.  Any $ERASE error?
	!-	
	    IF NOT .ERASE_RESULT
	    THEN
	        BAS$$STOP_RMS (.FILE_NAME, .FAB_BLOCK [FAB$L_STS], .FAB_BLOCK [FAB$L_STV]);
	    END;

	END;

    RETURN;
    END;					! end of BAS$KILL

ROUTINE PUSH_CCB (				! Call BAS$$CB_PUSH and return with value
	UNIT) : CALL_CCB = 

!++
! ABSTRACT:
!
! 	Call BAS$$CB_PUSH and return with a condition value as the function
!	result.  BAS$$CB_PUSH is not called directly as it may signal when
!	we do not desire it.
!
! FORMAL PARAMETERS:
!
! 	UNIT	- the unit to be pushed
!
! FUNCTION RESULT:
!
!	Either SS$NORMAL or the condition code of an error which was
!	signalled by BAS$$CB_PUSH.
!
!--

BEGIN

    EXTERNAL REGISTER
	CCB;

    ENABLE
	LIB$SIG_TO_RET;				! Converts signals to return values

    BAS$$CB_PUSH (.UNIT, LUB$K_ILUN_MIN);	! Push the CCB

    RETURN 1;					! Success

    END;					! end of PUSH_CCB

END						! end of module BAS$KILL

ELUDOM
