1 Lexicals

 A set of functions that return information  about  character  strings

 and attributes of the current process.

2 F$CVSI

 Extracts bit fields from  character  string  data  and  converts  the

 result, as a signed value, to an integer.



 Format:



      F$CVSI(bit-position,width,string)

3 Return_Value

 The integer equivalent of the extracted bit  field,  converted  as  a

 signed value.

3 bit-position



 The  offset  of  the  first  bit  to  be  extracted.   The  low-order

 (rightmost)  bit of a string is position number 0 for determining the

 offset.  Specify the offset as an integer expression.

3 width



 The number of bits that are to be  extracted  for  conversion  to  an

 integer value.  Specify the width as an integer expression.

3 string



 The string from which the bits are taken.  Specify the  string  as  a

 character string expression.

3 Examples



 1.   $ A[0,32] = %X2B

      $ SHOW SYMBOL A

        A = "+"

      $ X = F$CVSI(0,4,A)

      $ SHOW SYMBOL X

        X = -5   Hex = FFFFFFFB  Octal = 177773



 This example uses an arithmetic overlay  to  assign  the  hexadecimal

 value  2B to all 32 bits of the symbol A.  See the description of the

 Assignment Statement for more information on arithmetic overlays.



 The symbol A has a string value after  the  overlay  because  it  was

 previously  undefined.   (If  a  symbol is undefined, it has a string

 value as a  result  of  an  arithmetic  overlay.   If  a  symbol  was

 previously defined, it retains the same data type after the overlay.)

 The hexadecimal value 2B corresponds to the ASCII character "+".



 Next, the F$CVSI function extracts the  low-order  4  bits  from  the

 symbol  A;  the low order 4 bits contain the binary representation of

 the hexadecimal value B.  These  bits  are  converted,  as  a  signed

 value,  to  an integer.  The converted value, --5, is assigned to the

 symbol X.

2 F$CVTIME

 Converts an absolute or a combination time string to a string of  the

 form "yyyy-mm-dd hh:mm:ss.cc".  The F$CVTIME function can also return

 information about an absolute, combination, or delta time string.



 Format:



      F$CVTIME([input_time] [,output_time] [,field])

3 Return_Value

 A character string containing the requested information.

3 input_time



 The time string for which  information  is  requested.   Specify  the

 input  time string as a character string expression.  You can specify

 the input time string as an absolute, combination or delta time.   If

 you  omit  the  time  argument  or  if you specify the time as a null

 string, the current date and time, in absolute time format, is used.

3 output_time



 The time format for the information you want returned.   Specify  the

 output item argument as a character string expression that equates to

 one of the following strings:   ABSOLUTE  The  requested  information

 should be returned in absolute time format "dd-mmm-yyyy hh:mm:ss.cc".

 COMPARISON The requested information should be returned in  the  form

 "yyy-mm-dd  hh:mm:ss.cc".   DELTA The requested information should be

 returned in delta format.  If you specify DELTA as  the  output  time

 argument,  then  you must also provide a delta time specification for

 the input time argument.



 ABSOLUTE      The  requested  information  should  be   returned   in

               absolute time format.



 COMPARISON    The requested information should  be  returned  in  the

               form "yyy-mm-dd hh:mm:ss.cc".



 DELTA         The requested information should be returned  in  delta

               format.   If  you  specify  DELTA  as  the  output time

               argument, then you  must  also  provide  a  delta  time

               specification for the input time argument.



 If you omit the output time argument, the default is COMPARISON.

3 field



 The type of information to be returned.  The information is  returned

 in the time format specified by the output time argument.



 Specify the field argument as  a  character  string  expression  that

 evaluates to one of the following strings:



 DATE        The date field is returned.



 DATETIME    The entire date and time string is returned.



 DAY         The day field is returned.



 HOUR        The hour field is returned.



 HUNDREDTH   The hundredth of a second field is returned.



 MINUTE      The minute field is returned.



 MONTH       The month field is returned.  You cannot specify MONTH if

             you  also specify a delta input time and the DELTA output

             time argument.



 SECOND      The second field is returned.



 TIME        The time field is returned.



 WEEKDAY     The weekday that corresponds with the input time argument

             is  returned.   You  cannot  specify  WEEKDAY if you also

             specify a delta input time  and  the  DELTA  output  time

             argument.  When the weekday is returned, the first letter

             is  in  uppercase,  and  the  following  letters  are  in

             lowercase.



 YEAR        The year field is returned.  You cannot specify  YEAR  if

             you  also specify a delta input time and the DELTA output

             time argument.



 If you do not specify a field  argument,  the  default  is  DATETIME.

 DATE  DATETIME  DAY  HOUR  HUNDREDTH MINUTE MONTH SECOND TIME WEEKDAY

 YEAR. If you do not specify a field argument, the default is DATETIME.

 For  more  information  on character string expressions, see Section

 4.6.1 in the VAX/VMS DCL Dictionary.

3 Examples



 1.   $ TIME = F$TIME()

      $ SHOW SYMBOL TIME

        TIME = "15-APR-1984 10:56:23.10"

      $ TIME = F$CVTIME(TIME)

      $ SHOW SYMBOL TIME 

        TIME = "1984-04-15 10:56:23.10"



 This example uses the F$TIME function to return the system time as  a

 character  string,  and  to assign the time to the symbol TIME.  Then

 the F$CVTIME function is used  to  convert  the  system  time  to  an

 alternate  time format.  Note that you do not need to place quotation

 marks around the argument TIME because it is a symbol.   Symbols  are

 automatically  evaluated  when they are used as arguments for lexical

 functions.



 You can use the resultant string to compare two  dates  (using  .LTS.

 and  .GTS.  operators).  For example, you can use F$CVTIME to convert

 two time strings and store the results  in  the  symbols  TIME_1  and

 TIME_2.  You can compare the two values, and branch to a label, based

 on the results as shown below:



      $ IF TIME_1 .LTS. TIME_2 THEN GOTO FIRST



 2.   $ NEXT = F$CVTIME("TOMORROW",,"WEEKDAY")

      $ SHOW SYMBOL NEXT

       NEXT = "TUESDAY"



 In this example, the F$CVTIME returns the weekday that corresponds to

 the   absolute  time  keyword  "TOMORROW".   You  must  surround  the

 arguments "TOMORROW" and "WEEKDAY" in quotation  marks  because  they

 are  character string expressions.  Also, you must include a comma as

 a placeholder for the output time argument that is omitted.

2 F$CVUI

 Extracts bit fields from  character  string  data  and  converts  the

 result, as an unsigned value, to an integer.



 Format:



      F$CVUI(bit-position,width,string)

3 Return_Value

 The integer equivalent of the extracted bit field,  converted  as  an

 unsigned value.

3 bit-position



 The  offset  of  the  first  bit  to  be  extracted.   The  low-order

 (rightmost)  bit of a string is position number 0 for determining the

 offset.  Specify the offset as an integer expression.

3 width



 The number of bits that are to be  extracted  for  conversion  to  an

 integer value.  Specify the width as an integer expression.

3 string



 The string from which the bits are taken.  Specify the  string  as  a

 character string expression.

3 Example



 1.   $ A[0,32] = %X2B

      $ SHOW SYMBOL A

        A = "+"

      $ X = F$CVUI(0,4,A)

      $ SHOW SYMBOL X

        X = 11   Hex = 0000000B  Octal = 000013



 This example uses an arithmetic overlay  to  assign  the  hexadecimal

 value  2B  to all 32 bits of the symbol A.  The symbol A has a string

 value after the overlay because it was previously undefined.   (If  a

 symbol  is  undefined,  it  has  a  string  value  as  a result of an

 arithmetic overlay.  If a symbol was previously defined,  it  retains

 the  same  data  type  after  the  overlay.) The hexadecimal value 2B

 corresponds to the ASCII character "+".



 Next, the F$CVUI function extracts the  low-order  4  bits  from  the

 symbol  A;  the low-order 4 bits contain the binary representation of

 the hexadecimal value B.  These  bits  are  converted,  as  a  signed

 value,  to  an  integer.  The converted value, 11, is assigned to the

 symbol X.

2 F$DIRECTORY

 Returns the current default directory name string.   The  F$DIRECTORY

 function has no arguments but must be followed by parentheses.



 Format:



      F$DIRECTORY()

3 Return_Value

 A character string for the current default directory name,  including

 square brackets ([]).  If you use the SET DEFAULT command and specify

 angle brackets (<>) in a  directory  specification,  the  F$DIRECTORY

 function returns angle brackets in the directory string.

3 example



 1.   $ SAVE_DIR = F$DIRECTORY()

      $ SET DEFAULT [MALCOLM.TESTFILES]

         .

         .

         .

      $ SET DEFAULT 'SAVE_DIR'





 This example shows an excerpt from a command procedure that uses  the

 F$DIRECTORY  function  to save the current default directory setting.

 The assignment statement equates the symbol SAVE_DIR to  the  current

 directory.   Then  the  SET DEFAULT command establishes a new default

 directory.  Later, the symbol SAVE_DIR is used  in  the  SET  DEFAULT

 command that restores the original default directory.



 Note that you can use the F$ENVIRONMENT  function  with  the  DEFAULT

 keyword to return the default disk and directory.  You should use the

 F$ENVIRONMENT  function  rather  than  the  F$DIRECTORY  function  in

 situations involving more than one disk.

2 F$EDIT

 Edits a string  expression  based  on  the  edits  specified  in  the

 edit-list.



 Format:



      F$EDIT(string, edit-list)

3 Return_Value

 A character string containing the specified edits.

3 string



 A string to be edited.  Specify the string argument  as  a  character

 string expression.

3 edit-list



 A keyword or a list of keywords that specify the types of edits to be

 made  to  the  string.   If you use a list of keywords, separate them

 with commas.  You cannot abbreviate these keywords.



 Specify the edit-list argument as a character string expression.



 COLLAPSE     Removes all spaces and tabs from the string.



 COMPRESS     Replaces multiple spaces and tabs with a single space.



 LOWERCASE    Makes the string lower case.



 TRIM         Removes leading and trailing spaces and  tabs  from  the

              string.



 UNCOMMENT    Removes comments from the string.



 UPCASE       Makes the string upper case.



 Edits are not applied to quoted sections of strings.  Therefore, if a

 string contains quotation marks, the characters within the quotes are

 not affected by the edits specified in the edit list.   You  can  use

 one  or  more  of  the following keywords in the edit-list:  COLLAPSE

 COMPRESS LOWERCASE TRIM UNCOMMENT UPCASE

3 Examples



 1.   $ LINE = "    THIS    LINE    CONTAINS A ""  QUOTED  "" WORD"

      $ SHOW SYMBOL LINE

        LINE =  "    THIS    LINE    CONTAINS A "  QUOTED  " WORD"

      $ NEW_LINE = F$EDIT(LINE, "COMPRESS, TRIM")

      $ SHOW SYMBOL NEW_LINE

        NEW_LINE = "THIS LINE CONTAINS A "  QUOTED  " WORD"



 This example uses the F$EDIT function to compress and trim  a  string

 by  replacing  multiple  blanks  with a single blank, and by removing

 leading and trailing blanks.   The  string  LINE  contains  quotation

 marks  around  the  word  QUOTED.   (To  enter quotation marks into a

 character string, use double quotations in the assignment statement.)



 Note that the F$EDIT function does not compress  the  spaces  in  the

 quoted  section  of  the  string;  therefore, the spaces are retained

 around the word QUOTED.



 2.   $ LOOP:

      $      READ/END_OF_FILE = DONE INPUT_FILE RECORD

      $      RECORD = F$EDIT(RECORD, "TRIM, UPCASE")

      $      WRITE OUTPUT_FILE RECORD

      $      GOTO LOOP

         .

         .

         .



 This example sets up a loop to read records from a file,  edit  them,

 and  write  them  to an output file.  The edited records have leading

 and trailing blanks removed, and are converted to uppercase.

2 F$ELEMENT

 Extracts an element from a string in which the elements are separated

 by a specified delimiter.



 Format:



      F$ELEMENT(element-number, delimiter, string)

3 Return_Value

 A character string containing the specified element.

3 element-number



 The number of the element to be  retrieved.   Element  numbers  start

 with  zero.   Specify  the  element-number  argument  as  an  integer

 expression.



 If the element-number exceeds the number of elements in  the  string,

 the delimiter is returned.

3 delimiter



 The delimiter used to separate  the  elements  in  the  string.   The

 delimiter can be only one character long.  Specify the delimiter as a

 character string expression.

3 string



 A string containing a delimited list of elements.  Specify the string

 as a character string expression.

3 Example



 1.   $ DAY_LIST = "MON/TUE/WED/THU/FRI/SAT/SUN"

      $ INQUIRE DAY "ENTER DAY (MON TUE WED THU FRI SAT SUN)"

      $ NUM = 0

      $ LOOP:

      $       LABEL = F$ELEMENT(NUM,"/",DAY_LIST)

      $       IF LABEL .EQS. "/" THEN GOTO ERROR

      $       IF DAY .EQS. LABEL THEN GOTO 'LABEL'

      $       NUM = NUM +1

      $       GOTO LOOP

      $

      $ MON:

         .

         .

         .



 This example sets up a loop  to  test  an  input  value  against  the

 elements  in  a  list of values.  If the value for DAY matches one of

 the elements in the DAY_LIST, control is passed to the  corresponding

 label.   If  the value returned by the F$ELEMENT function matches the

 delimiter, then the DAY value was not present  in  the  DAY_LIST  and

 control is passed to the label ERROR.

2 F$ENVIRONMENT

 Obtains information on aspects of the DCL command environment.



 Format:



      F$ENVIRONMENT(item)

3 Return_Value

 Information that corresponds to the specified item.  The return value

 can  be  either  an  integer  or a character string, depending on the

 specified item.

3 item



 A keyword that specifies the type of information to be returned.  You

 cannot  abbreviate  keywords  for the F$ENVIRONMENT lexical function.

 Specify the item argument as a character string expression.



 CAPTIVE          Returns  either  the  character  string  "TRUE"   or

                  "FALSE"  to  indicate  whether you are logged into a

                  captive account.



 CONTROL          Returns the control characters  that  are  currently

                  enabled  with  the SET CONTROL command.  The control

                  characters are returned as a character string.



 DEFAULT          Returns the current  default  device  and  directory

                  name.   This  information is returned as a character

                  string; the returned  string  is  the  same  as  the

                  output from the SHOW DEFAULT command.



 DEPTH            Returns the current command procedure depth,  as  an

                  integer.



 INTERACTIVE      Returns  either  the  character  string  "TRUE"   or

                  "FALSE"   to   indicate   whether   the  process  is

                  interactive.



 KEY_STATE        Returns a character string  indicating  the  current

                  locked keypad state.



 MAX_DEPTH        Returns an integer specifying the maximum  allowable

                  command procedure depth.



 MESSAGE          Returns a character string  containing  the  current

                  setting of the the SET MESSAGE command.



 NOCONTROL        Returns the control characters  that  are  currently

                  disabled   with  the  SET  NOCONTROL  command.   The

                  control  characters  are  returned  as  a  character

                  string.



 ON_CONTROL_Y     If issued from a command procedure,  returns  either

                  the  character  string "TRUE" or "FALSE" to indicate

                  whether ON CONTROL_Y is specified.



 ON_SEVERITY      If  issued  from  a  command  procedure,  returns  a

                  character  string  indicating  the severity level at

                  which the action specified with the  ON  command  is

                  taken.



 OUTPUT_RATE      Returns a delta time string containing  the  default

                  output  rate.   The  output rate indicates how often

                  data is written to a batch job log  file  while  the

                  batch job is executing.



 PROCEDURE        Returns  the  file  specification  for  the  command

                  procedure  from which the F$ENVIRONMENT("PROCEDURE")

                  function  is  issued.   The  file  specification  is

                  returned as a character string.



 PROMPT           Returns a character string  containing  the  current

                  prompt string.



 PROMPT_CONTROL   Returns  either  the  character  string  "TRUE"   or

                  "FALSE"  to  indicate whether a Carriage Return/Line

                  Feed precedes the prompt.



 PROTECTION       Returns a character string  indicating  the  current

                  default file protection.



 VERIFY_IMAGE     Returns  either  the  character  string  "TRUE"   or

                  "FALSE"  to  indicate  whether  the SET VERIFY=IMAGE

                  command is in effect.



 VERIFY_PROCEDURE Returns  either  the  character  string  "TRUE"   or

                  "FALSE" to indicate whether the SET VERIFY=PROCEDURE

                  command is in effect.

3 Examples



 1.   $ SAVE_MESSAGE = F$ENVIRONMENT("MESSAGE")

      $ SET MESSAGE/NOFACILITY/NOIDENTIFICATION

         .

         .

         .



      $ SET MESSAGE'SAVE_MESSAGE'



 This example uses the F$ENVIRONMENT  function  to  save  the  current

 message  setting  before  changing  the  setting.   At the end of the

 command procedure, the original message  setting  is  restored.   The

 apostrophes  surrounding  the  symbol  SAVE_MESSAGE indicate that the

 value for the symbol should be substituted.



 2.   $ MAX = F$ENVIRONMENT("MAX_DEPTH")

      $ SHOW SYMBOL MAX

        MAX = 16   Hex = 00000010  Octal = 000020



 This example uses the F$ENVIRONMENT function to determine the maximum

 depth allowable within command procedures.



 3.   $ SAVE_PROT = F$ENVIRONMENT("PROTECTION")

      $ SET PROTECTION = (SYSTEM:RWED, OWNER, RWED, GROUP,

      WORLD)/DEFAULT

         .

         .

         .



      $ SET PROTECTION = 'SAVE_PROT'/DEFAULT



 This example uses the F$ENVIRONMENT  function  to  save  the  current

 default protection before changing the protection.  At the end of the

 command procedure, the original protection  is  restored.   You  must

 place  apostrophes  around  the  symbol  SAVE_PROT  to request symbol

 substitution.

2 F$EXTRACT

 Extracts a substring from a character string expression.



 Format:



      F$EXTRACT(offset,length,string)

3 Return_Value

 A character string containing the substring that is delimited by  the

 offset and length arguments.

3 offset



 The position, relative to the beginning of the string, that marks the

 beginning  of  the substring you want to extract.  Specify the offset

 as an integer expression that is greater than or  equal  to  0.   The

 offset 0 indicates the first character in the string.

3 length



 The number of characters you want to extract.  Specify the length  as

 an integer expression that is greater than or equal to 0.

3 string



 The string from which the substring is to be extracted.  Specify  the

 string as a character string expression.

3 Examples



 1.   $ NAME = "JOE SMITH"

      $ FIRST = F$EXTRACT(0,3,NAME)

      $ SHOW SYMBOL FIRST

        FIRST = "JOE"



 This portion of a command procedure uses the  F$EXTRACT  function  to

 extract the first three characters from the character string assigned

 to the symbol NAME.  The offset and length  arguments  are  integers,

 and  the  string  argument  is  a  symbol.   You  do  not need to use

 quotations around integers or symbols when they are used as arguments

 for lexical functions.



 2.   $ P1 = "MYFILE.DAT"

      $ FILENAME = F$EXTRACT(0,F$LOCATE(".",P1),P1)



 This portion of a command procedure shows how to locate  a  character

 within  a  string  and  how  to  extract  a  substring ending at that

 location.



 The lexical function F$LOCATE gives the  numeric  value  representing

 the  offset position of a period in the character string value of P1.

 (The offset position of the period is equal  to  the  length  of  the

 substring before the period.)



 This F$LOCATE function is  used  as  an  argument  in  the  F$EXTRACT

 function  to  specify  the  number  of characters to extract from the

 string.  If a procedure is invoked  with  the  parameter  MYFILE.DAT,

 these  statements result in the symbol FILENAME being given the value

 MYFILE.



 Note that the F$LOCATE function in the above example assumes that the

 file  specification  does  not  contain  a  node  name or a directory

 specification containing a subdirectory name.   To  obtain  the  file

 name from a full file specification, use the F$PARSE function.



 3.   $ IF F$EXTRACT(12,2,F$TIME()) .GES. "12" THEN GOTO AFTERNOON

      $ MORNING:

      $ WRITE SYS$OUTPUT "Good morning!"

      $ EXIT

      $ AFTERNOON:

      $ WRITE SYS$OUTPUT "Good afternoon!"

      $ EXIT



 This example shows a procedure that  displays  a  different  message,

 depending  on  whether  the current time is morning or afternoon.  It

 first obtains the current time of day by using the  F$TIME  function.

 The  F$TIME  function returns a character string, which is the string

 argument  for  the  F$EXTRACT  function.   The  F$TIME  function   is

 automatically evaluated when it is used as an argument, so you do not

 need to use quotation marks.



 Next, the F$EXTRACT function extracts the hours  from  the  date  and

 time string returned by F$TIME.  The string returned by F$TIME always

 contains the hours field beginning at an offset of 12 characters from

 the start of the string.



 The F$EXTRACT function  extracts  two  characters  from  the  string,

 beginning  at  this  offset,  and compares the string value extracted

 with the string value 12.   If  the  comparison  is  true,  then  the

 procedure  writes  "Good  afternoon!".   Otherwise,  it  writes "Good

 morning!".



 Note that you can use the F$CVTIME function to extract the hour field

 from  a time specification.  This method is easier than the one shown

 in the above example.

2 F$FAO

 Invokes the $FAO system service  to  convert  the  specified  control

 string  to  a formatted ASCII output string.  By specifying arguments

 for FAO directives in the control  string,  you  can  use  the  F$FAO

 function to:



 o  Insert variable character string data into an output string



 o  Convert integer values into the  ASCII  representations  of  their

    decimal,   hexadecimal,  and  octal  equivalents,  and  substitute

    results into the output string



 Format:



      F$FAO(control-string[,arg1,arg2...arg15])

3 Return_Value

 A character string containing formatted ASCII  output.   This  output

 string  is  created  from  the  fixed  text and FAO directives in the

 control string.

3 control-string



 The fixed text of  the  output  string,  plus  FAO  directives.   The

 control  string  may  be any length and may contain any number of FAO

 directives.   Specify  the  control  string  as  a  character  string

 expression.



 The F$FAO function uses FAO directives to modify or insert ASCII data

 into the fixed text in the control string.

3 arg1,arg2...arg15



 Arguments that are required by the FAO directives used in the control

 string.   Specify  the  arguments  arg1,arg2...arg15  as  integer  or

 character string expressions.



 If you specify an argument whose type (integer or  string)  does  not

 match  that of the directive it corresponds to, unpredictable results

 will be returned.

3 Examples



 1.   $ COUNT = 57

      $ REPORT = F$FAO("NUMBER OF FORMS = !SL",COUNT)

      $ SHOW SYMBOL REPORT

      $ REPORT = "NUMBER OF FORMS = 57"



 In this command procedure, the FAO directive !SL is used in a control

 string  to  convert  the  number  equated  to  the  symbol COUNT to a

 character string.  The converted string is inserted into the  control

 string.



 Note that COUNT is assigned  an  integer  value  of  57.   The  F$FAO

 function  returns  the  ASCII  string,  "NUMBER  OF  FORMS = 57", and

 assigns the string to the symbol REPORT.



 2.   $ A = "ERR"

      $ B = "IS"

      $ C = "HUM"

      $ D = "AN"

      $ PHRASE = F$FAO("TO !3(AS)",A,B,C+D)

      $ SHOW SYMBOL PHRASE

      $ PHRASE = "TO ERRISHUMAN"



 In this command procedure, the !AS directive is used  to  insert  the

 values  assigned  to  the  symbols  A,  B,  C, and D into the control

 string.



 Since the specified repeat count for the !AS directive  is  3,  F$FAO

 looks for three arguments.  The arguments in this example include the

 symbol A ("ERR"),  the  symbol  B  ("IS"),  and  the  expression  C+D

 ("HUMAN").   Note  that  the  values  of  these  string arguments are

 concatenated to form the string "ERRISHUMAN".



 3.   $ A = "ERR"

      $ B = "IS"

      $ C = "HUMAN"

      $ PHRASE = F$FAO("TO !#(#AS)",3,6,A,B,C)

      $ SHOW SYMBOL PHRASE

      $ PHRASE = "TO ERR   IS    HUMAN "



 In this command procedure, the F$FAO function is used  with  the  !AS

 directive  to  format  a character string.  The first number sign (#)

 represents the repeat count given by  the  first  argument,  3.   The

 second  number sign (#) represents the field size given by the second

 argument, 6.  The next three arguments (A,B,C)  provide  the  strings

 that  are  placed into the control string each time the !AS directive

 is repeated.



 Each argument string is output to a field  having  a  length  of  six

 characters.   Since  each  string  is  less than six characters, each

 field is left-justified and padded with blank spaces.  The  resulting

 string is assigned to the symbol PHRASE.

2 F$FILE_ATTRIBUTES

 Returns attribute information for a specified file.



 Format:



      F$FILE_ATTRIBUTES(file-spec,item)

3 Return_Value

 Either an integer or a character string, depending on  the  item  you

 request.

3 file-spec



 The name of the file you are requesting  information  on.   You  must

 specify the file name as a character string expression.



 Only one file name may be  specified.   No  wildcard  characters  are

 allowed in the file specification.

3 item



 Indicates which attribute of the file is to be  returned.   The  item

 must  be  specified  as a character string expression, and can be any

 one of the VAX RMS field names listed below:  

     ALQ BDT BKS BLS CBT CDT CTG DEQ DID DVI EDT EOF FID FSZ GRP KNOWN
     MBM MRN MRS NOA NOK ORG PRO PVN RAT RCK RDT RFM RVN UIC WCK

3 Examples



 1.   $ FILE_ORG = F$FILE_ATTRIBUTES("QUEST.DAT","ORG")

      $ SHOW SYMBOL FILE_ORG

        FILE_ORG = "SEQ"



 This example uses the F$FILE_ATTRIBUTES function to assign the  value

 of   the   file  organization  type  to  the  symbol  FILE_ORG.   The

 F$FILE_ATTRIBUTES function returns the character string "SEQ" to show

 that QUEST.DAT is a sequential file.  The return value is assigned to

 the symbol FILE_ORG.



 You must place quotation marks around the QUEST.DAT and ORG arguments

 for  the  F$FILE_ATTRIBUTES  function.   These  arguments  are string

 literals and must be surrounded  by  quotation  marks  when  used  in

 expressions.



 2.   $ RFM = F$FILE_ATTRIBUTES("KANSAS::USE$:[CARS]SALES.CMD","RFM")

      $ SHOW SYMBOL RFM

        RFM = "VAR"



 This  example  uses  the   F$FILE_ATTRIBUTES   function   to   return

 information  about a file on a remote node.  The function returns the

 record format  string  VAR,  indicating  that  records  are  variable

 length.

2 F$GETDVI

 Invokes the $GETDVI system service to  return  a  specified  item  of

 information  for  a specified device.  This function allows a process

 to obtain information for a device  to  which  the  process  has  not

 necessarily assigned a channel.



 Format:



      F$GETDVI(device-name,item)

3 Return_Value

 Either an integer or a character string, depending on  the  item  you

 request.

3 device-name



 A physical device name or a logical name equated to a physical device

 name.  Specify the device name as a character string expression.

3 item



 Specifies the type of device information to be  returned.   The  item

 must  be specified as a character string expression.  You may specify

 any one of the items  listed  below:   

 ACPPID        ACPTYPE       ALL           AVL           CCL
 CLUSTER       CONCEALED     CYLINDERS     DEVBUFIZ      DEVCHAR
 DEVCHAR2      DEVCLASS      DEVDEPEND     DEVDEPEND2    DEVNAM
 DEVSTS        DEVTYPE       DIR           DMA           DMT
 DUA           ELG           ERRCNT        EXISTS        FOD
 FOR           FREEBLOCKS    FULLDEVNAM    GEN           HOLDSCREEN
 IDV           LOCKID        LOGVOLNAM     MAXBLOCK      MAXFILES
 MBX           MNT           MOUNTCNT      NET           NEXTDEVNAM
 ODV           OPCNT         OPR           OWNUIC        PID
 RCK           RCT           REC           RECSIZ        REFCNT
 RND           ROOTDEVNAM    RTM           SDI           SECTORS
 SERIALNUM     SHR           SPL           SPLDEVNAM     SQD
 STS           SWL           TRACKS        TRANSCNT      TRM
 TT_ALTYPEAHD  TT_ANSICRT    TT_APP_KEYPAD TT_AUTOBAUD   TT_AVO
 TT_BLOCK      TT_BRDSCTMBX  TT_CRFILL     TT_DECCRT     TT_DIALUP
 TT_DISCONNECT TT_DRCS       TT_EDIT       TT_EDITING    TT_EIGHTBIT
 TT_ESCAPE     TT_FALLBACK   TT_HALFDUP    TT_HANGUP     TT_HOSTSYNC
 TT_INSERT     TT_LFFILL     TT_LOCALECHO  TT_LOWER      TT_MBXDSABL
 TT_MECHFORM   TT_MECHTAB    TT_MODEM      TT_MODHANGUP  TT_NOBRDCST
 TT_NOECHO     TT_NOTYPEAHD  TT_OPER       TT_PASTHRU    TT_PHYDEVNAM
 TT_PRINTER    TT_READSYNC   TT_REGIS      TT_SCOPE      TT_SECURE
 TT_SETSPEED   TT_SIXEL      TT_TTSYNC     TT_WRAP       UNIT
 VOLCOUNT      VOLNAM        VPROT         WCK           XON

3 Example



 1.   $ ERR = F$GETDVI("_DQA0","ERRCNT")

      $ SHOW SYMBOL ERR

        ERR = 0  Hex = 00000000 Octal = 000000



 This example shows how to use the  F$GETDVI  function  to  return  an

 error  count  for  the  device  DQA0.  You must place quotation marks

 around the device-name _DQA0 and the item  ERRCNT  because  they  are

 string literals.

2 F$GETJPI

 Invokes the $GETJPI system service to return accounting, status,  and

 identification information on the specified process.  GROUP privilege

 is required to obtain information on  other  processes  in  the  same

 group.   WORLD  privilege  is  required  to obtain information on any

 other processes in the system.



 Format:



      F$GETJPI(pid,item)

3 Return_Value

 Either an integer or a character string, depending on  the  item  you

 request.

3 pid



 The identification number of the process  for  which  information  is

 being  reported.   Specify  the  pid  argument  as a character string

 expression.

3 item



 The type of process information to be  returned.   Specify  the  item

 argument  as  a character string expression.  You may specify any one

 of the following items:  

 ACCOUNT   APTCNT     ASTACT     ASTCNT    ASTEN     ASTLM      AUTHPRI   
 AUTHPRIV  BIOCNT     BIOLM      BUFIO     BYTCNT    BYTLM      CLINAME
 CPULIM    CPUTIM     CURPRIV    DFPFC     DFWSCNT   DIOCNT     DIOLM
 DIRIO     EFCS       EFCU       EFWM      ENQCNT    ENQLM      EXCVEC
 FILCNT    FILLM      FINALEXC   FREP0VA   FREP1VA   FREPTECNT  GPGCNT
 GRP       IMAGECOUNT IMAGNAME   IMAGPRIV  JOBPRCCNT LOGINTIM   MASTER_PID
 MEM       MODE       MSGMASK    OWNER     PAGEFLTS  PAGFILCNT  PAGFILLOC
 PGFLQUOTA PHDFLAGS   PID        PPGCNT    PRCCNT    PRCLM      PRCNAM
 PRI       PRIB       PROCPRIV   SITESPEC  STATE     STS        SWPFILLOC
 TERMINAL  TMBU       TQCNT      TQLM      UIC       USERNAME   VIRTPEAK
 VOLUMES   WSAUTH     WSAUTHEXT  WSEXTENT  WSPEAK    WSQUOTA    WSSIZE

3 Example



 1.   $ NAME = F$GETJPI("3B0018","USERNAME")

      $ SHOW SYMBOL NAME

        NAME = "JANE        "



 This example shows how to use the F$GETJPI  function  to  return  the

 username  for the process number 3B0018.  The username is assigned to

 the symbol NAME.

2 F$GETSYI

 Invokes  the  $GETSYI   system   service   to   return   status   and

 identification information about the local system, or about a node in

 the local VAXcluster, if your system is part of a VAXcluster.



 Format:



      F$GETSYI(item [,node])

3 Return_Value

 Either an integer or a character string, depending on  the  item  you

 request.

3 item



 The type of information to be reported about the local node or  about

 another  node  in  your  VAXcluster,  if  your  system  is  part of a

 VAXcluster.  Specify the item as a character string  expression.  You

 may  specify  one  of  the  following  items for the local node only:


    ARCHFLAG     BOOTTIME      CPU        SID       VERSION  

 You  may  specify  one  of  the following   items   for   the   local
 node or  in  the  VAXCluster:


    CLUSTER_FSYSID   CLUSTER_FTIME   CLUSTER_MEMBER   CLUSTER_NODES
    CLUSTER_QUORUM   CLUSTER_VOTES   NODENAME         NODE_AREA
    NODE_CSID        NODE_HWTYPE     NODE_HWVERS      NODE_NUMBER   
    NODE_QUORUM      NODE_SWINCARN   NODE_SWTYPE      NODE_SWVERS  
    NODE_SYSTEMID    NODE_VOTES      SCS_EXISTS

 In  addition,  you can  also  specify  any  of the  SYSGEN parameters,
 listed  in the Chapter on the System Generation Utility in the VAX/VMS
 UTILITIES Reference Volume. However, you can specify SYSGEN parameters
 only for  your local node;  you  cannot specify the node argument with
 these items.
3 node

 The node in your VAXcluster for which information is to be  returned.

 Specify  the  node  as a character string expression.  (This argument

 can be specified only if your system is part of  a  VAXcluster.)
3 Examples



 1.   $ SYSID = F$GETSYI("SID")

      $ SHOW SYMBOL SYSID

        SID = 19923201  Hex = 01300101 Octal = 000401



 This example shows how to use the F$GETSYI  function  to  return  the

 information  in  the  system  identification register.  Use quotation

 marks around the argument SID because it is a  string  literal.   The

 value  returned  by  the  F$GETSYI function is assigned to the symbol

 SYSID.  Because a node  is  not  specified,  information  about  your

 current node is returned.



 2.   $ MEM = F$GETSYI("CLUSTER_MEMBER", "LONDON")

      $ SHOW SYMBOL MEM

        MEM = "TRUE"



 This example uses the F$GETSYI function to determine whether the node

 LONDON  is  a  member  of the local VAXcluster.  The "TRUE" indicates

 that the remote node LONDON is a member of the VAXcluster.



 3.   $ LIM = F$GETSYI("BJOBLIM")

      $ SHOW SYMBOL LIM

        LIM = 16   Hex = 00000010  Octal = 00000000020



 This example uses the SYSGEN parameter BJOBLIM as as argument for the

 F$GETSYI function.  This argument returns the batch job limit for the

 current system.

2 F$INTEGER

 Returns the  integer  equivalent  of  the  result  of  the  specified

 expression.



 Format:



      F$INTEGER(expression)

3 Return_Value

 An integer value which is equivalent to the specified expression.

3 expression



 The expression to be evaluated by the F$INTEGER expression.  You  can

 specify either an integer or a character string expression.

3 Example



 1.   $ A = "23"

      $ B = F$INTEGER("-9" + A)

      $ SHOW SYMBOL B

        B = -923 Hex=FFFFFC65 Octal=176145



 This example shows how to use the  F$INTEGER  function  to  equate  a

 symbol to the integer value returned by the function.



 The F$INTEGER function in  the  above  example  returns  the  integer

 equivalent  of  the  string  expression  ("--9"  +  A).   First,  the

 F$INTEGER function evaluates the string expression  by  concatenating

 the string literal "--9" with the string literal "23".  Note that the

 value of the symbol  A  is  automatically  substituted  in  a  string

 expression.    Also   note  that  the  plus  sign  (+)  is  a  string

 concatenation operator since both arguments are string literals.



 After the string expression  is  evaluated,  the  F$INTEGER  function

 converts  the resulting character string ("--923") to an integer, and

 returns the value --923.  This  integer  value  is  assigned  to  the

 symbol B.

2 F$LENGTH

 Returns the length of a specified string.



 Format:



      F$LENGTH(string)

3 Return_Value

 An integer value for the length of the string.

3 string



 The character  string  of  which  you  are  determining  the  length.

 Specify the string argument as a character string expression.

3 Example



 1.   $ MESSAGE = F$MESSAGE(%X1C)

      $ SHOW SYMBOL MESSAGE

        MESSAGE = "SYSTEM-F-EXQUOTA, exceeded quota"

      $ STRING_LENGTH = F$LENGTH(MESSAGE)

      $ SHOW SYMBOL STRING_LENGTH

        STRING_LENGTH = 33   Hex = 00000021  Octal = 000041



 The first assignment statement uses the F$MESSAGE function to  return

 the  message  which  corresponds  to  the  hexadecimal value 1C.  The

 message is returned as a character string  and  is  assigned  to  the

 symbol MESSAGE.



 The F$LENGTH function is then  used  to  return  the  length  of  the

 character  string assigned to the symbol MESSAGE.  You do not need to

 use quotation marks when you use the symbol MESSAGE  as  an  argument

 for  the  F$LENGTH  function.   (Quotation  marks are not used around

 symbols in character string expressions.)



 The F$LENGTH function returns the length of the character string  and

 assigns  it  to the symbol STRING_LENGTH.  At the end of the example,

 the  symbol  STRING_LENGTH  has  a  value  equal  to  the  number  of

 characters in the value of the symbol named MESSAGE, that is, 33.

2 F$LOCATE

 Locates a character  or  character  substring  within  a  string  and

 returns  its offset within the string.  If the character or character

 substring is not found, the function returns the length of the string

 that was searched.



 Format:



      F$LOCATE(substring,string)

3 Return_Value

 An integer value representing the offset of the  substring  argument.

 An offset is the relative position of a character or a substring with

 respect to the beginning of the string.  The  first  character  in  a

 string  is  always offset position 0 from the beginning of the string

 (which always begins at the leftmost character).



 If the substring argument is not found, the F$LOCATE function returns

 an  offset  of  1  more  than the offset of the last character in the

 string.  (This equals the length of the string.)

3 substring



 The string of characters that you want to locate within  the  string.

 Specify the substring as a character string expression.

3 string



 The string in which the characters are  to  be  found.   Specify  the

 string as a character string expression.

3 Examples



 1.   $ FILE_SPEC = "MYFILE.DAT;1"

      $ NAME_LENGTH = F$LOCATE(".",FILE_SPEC)



 The F$LOCATE function in this example returns  the  position  of  the

 period  in  the  string  with respect to the beginning of the string.

 The period is in offset position 6, so the value 6 is assigned to the

 symbol  NAME_LENGTH.  Note that NAME_LENGTH also equals the length of

 the file name portion of the file specification MYFILE.DAT, that  is,

 6.



 The substring argument, the period, is specified as a string  literal

 and is therefore enclosed in quotation marks.  The argument FILE_SPEC

 is a symbol, so it should not be placed within quotation  marks.   It

 is  automatically replaced by its current value during the processing

 of the function.



 2.   $ INQUIRE TIME "Enter time"

      $ IF F$LOCATE(":",TIME) .EQ. F$LENGTH(TIME) THEN -

        GOTO NO_COLON



 This section of a command  procedure  compares  the  results  of  the

 F$LOCATE  and  F$LENGTH  functions  to  see  if they are equal.  This

 technique is commonly  used  to  determine  whether  a  character  or

 substring is contained in a string.



 In the example, the INQUIRE command prompts  for  a  time  value  and

 assigns  the  user-supplied  time to the symbol TIME.  The IF command

 checks for the presence of a colon in the string entered in  response

 to the prompt.  If the value returned by the F$LOCATE function equals

 the value returned  by  the  F$LENGTH  function,  the  colon  is  not

 present.   You use the .EQ.  operator (rather than .EQS.) because the

 F$LOCATE and F$LENGTH functions return integer values.



 Note that quotation marks are used around the substring argument, the

 colon, because it is a string literal.  However, the symbol TIME does

 not require quotation marks because it is automatically evaluated  as

 a string expression.

2 F$LOGICAL

 Translates a logical name and returns the  equivalence  name  string.

 The  translation  is  not  iterative;  the  equivalence string is not

 checked to determine whether it is a logical name.



 Format:



      F$LOGICAL(logical-name)

3 Return_Value

 A character string containing the equivalence  name  of  a  specified

 logical name.

3 logical-name



 The logical name to be translated.  You must specify the logical-name

 argument  as a string expression.  If you specify a logical name that

 identifies a search  list,  then  the  first  name  in  the  list  is

 returned.

3 Examples



 1.   $ SAVE_DIR = F$LOGICAL("SYS$DISK")+F$DIRECTORY()

         .

         .

         .



      $ SET DEFAULT 'SAVE_DIR'



 The assignment statement concatenates  the  values  returned  by  the

 F$DIRECTORY and F$LOGICAL functions, and assigns the resulting string

 to the symbol SAVE_DIR.  The  symbol  SAVE_DIR  consists  of  a  full

 device and directory name string.



 The argument SYS$DISK is enclosed in quotation marks because it is  a

 character string.  (The command interpreter treats all arguments that

 begin with alphabetic characters as  symbols  or  lexical  functions,

 unless  the  arguments  are enclosed within quotation marks.) None of

 the optional arguments are specified, so the F$LOGICAL function  uses

 the defaults.



 At the end of the command procedure, the original  default  directory

 is reset.  When you reset the directory, you must place single quotes

 around the symbol SAVE_DIR to force symbol substitution.



 2.   $ IF F$LOGICAL("INFILE") .EQS. "" THEN GOTO ASSIGN

         .

         .

         .



      $ ASSIGN:



         .

         .

         .



 This line from a command procedure tests  whether  the  logical  name

 INFILE  has  been  assigned.   If there is no current assignment, the

 F$LOGICAL function returns a null string and the command  interpreter

 starts executing statements at the label ASSIGN.



 3.   $ DEFINE/TABLE=LNM$GROUP TERMINAL 'F$LOGICAL("SYS$COMMAND")'



 This example shows a line from a command procedure that (1) uses  the

 F$LOGICAL  function  to  determine  the  name of the current terminal

 device and (2) creates a group logical name table entry based on  the

 equivalence string.



 You must  place  the  argument  SYS$COMMAND  within  quotation  marks

 because it is a character string.



 Also, in this example you must place the  F$LOGICAL  function  within

 single  quotes  to  force  the  lexical  function  to  be  evaluated.

 Otherwise, the DEFINE command will  not  automatically  evaluate  the

 lexical function.

2 F$MESSAGE

 Returns a character string containing  the  message  text  associated

 with a specific system status code.



 Format:



      F$MESSAGE(status-code)

3 Return_Value

 A character string containing the system message which corresponds to

 the argument you specify.

3 status-code



 The status code for which you are requesting error message text.  You

 must specify the status code as an integer expression.

3 Example



 1.   $ ERROR_TEXT = F$MESSAGE(%X1C)

      $ SHOW SYMBOL ERROR_TEXT

        ERROR_TEXT = "SYSTEM-F-EXQUOTA, exceeded quota"



 This example shows how to use the F$MESSAGE function to determine the

 message  associated with the status code X1C.  The F$MESSAGE function

 returns  the  message  string,  which  is  assigned  to  the   symbol

 ERROR_TEXT.

2 F$MODE

 Returns a character string showing the mode in  which  a  process  is

 executing.   The  F$MODE  function  has  no  arguments,  but  must be

 followed by parentheses.



 Format:



      F$MODE()

3 Return_Value

 The string "INTERACTIVE" for interactive processes.  If  the  process

 is  noninteractive,  one of the strings "BATCH", "NETWORK" or "OTHER"

 is returned.  Note that the return string always  contains  uppercase

 letters.

3 Example



 1.   $ IF F$MODE() .NES. "INTERACTIVE" THEN GOTO NON_INT_DEF

      $ INTDEF:         ! Commands for interactive terminal sessions

         .

         .

         .

      $ EXIT

      $ NON_INT_DEF:         !Commands for non-interactive processes

         .

         .

         .



 This example shows the beginning of a login  command  file.   The  IF

 command  compares  the  character  string returned by F$MODE with the

 character string INTERACTIVE; if they are not equal, control branches

 to  the  label  NON_INT_DEF.  Otherwise, the statements following the

 label  INTDEF  are  executed  and  the  procedure  exits  before  the

 statements  at  NON_INT_DEF.   Therefore, this login.com file has two

 sets of initialization commands:  one for interactive  mode  and  one

 for noninteractive mode (including batch and network jobs.)

2 F$PARSE

 Invokes the $PARSE RMS service to  parse  a  file  specification  and

 return  either the expanded file specification or the particular file

 specification field that you request.



 Format:



      F$PARSE(file-spec   [,default-spec]   [,related-spec]   [,field]

 [,parse-type])

3 Return_Value

 A character string containing the expanded file specification or  the

 field you specify.

3 file-spec



 The file specification to be  parsed.   You  must  specify  the  file

 specification as a character string expression.

3 default-spec



 A default file specification.  You  must  specify  the  default  file

 specification as a character string expression.

3 related-spec



 A related file specification.  You  must  specify  the  related  file

 specification as a character string expression.

3 field



 The name of a field in a file specification.   This  argument  causes

 F$PARSE  to  return  a  specific  portion  of  a  file specification.

 Specify the field argument as a character string expression.  You can

 specify  one  of  the  following  field names:  NODE Node name DEVICE

 Device name DIRECTORY Directory name NAME File name  TYPE  File  type

 VERSION File version number The field name can not be abbreviated.

3 parse-type



 The type of  parsing  to  be  performed.   By  default,  the  F$PARSE

 function verifies that the directory in the file specification exists

 on the device in the file specification.  Note that  the  device  and

 directory  can be explicitly given in one of the arguments, or can be

 provided by default.



 Also, by default the F$PARSE function  translates  logical  names  if

 they  are  provided  in  any  of the arguments.  The F$PARSE function

 stops iterative translation when it encounters a  logical  name  with

 the CONCEALED attribute.



 You can change how the F$PARSE function parses a  file  specification

 by using one of the following keywords:



 NO_CONCEAL    Logical names are not  concealed.   Therefore,  logical

               name  translation does not end when a concealed logical

               name is encountered.



 SYNTAX_ONLY   The syntax of the file specification is checked without

               verifying  that  the  specified directory exists on the

               specified device.

3 Examples



 1.   $ SET DEF DISK2:[FIRST]

      $ SPEC = F$PARSE("JAMES.MAR","[ROOT]",,,"SYNTAX_ONLY")

      $ SHOW SYMBOL SPEC

        SPEC = "DISK2:[ROOT]JAMES.MAR;"



 In this example, the  F$PARSE  function  returns  the  expanded  file

 specification   for   the  file  JAMES.MAR.   The  example  uses  the

 SYNTAX_ONLY keyword to request that F$PARSE should check the  syntax,

 but should not verify that the [ROOT] directory exists on DISK2.



 The default  device  and  directory  are  DISK2:[FIRST].   Since  the

 directory  name  [ROOT]  is specified as the default-spec argument in

 the assignment statement, it is used as the  directory  name  in  the

 output  string.   Note that the default device returned in the output

 string is DISK2 and the default version number for the file is  null.

 You  must  place  quotation  marks around the arguments JAMES.MAR and

 ROOT because they are string literals.



 If you had not specified syntax-only parsing, and [ROOT] were not  on

 DISK2, a null string would have been returned.



 2.   $ SET DEFAULT DB1:[VARGO]

      $ SPEC = F$PARSE("INFO.COM",,,"DIRECTORY")

      $ SHOW SYMBOL SPEC

        SPEC = "[VARGO]"



 In this example the F$PARSE function returns the  directory  name  of

 the   file   INFO.COM.    Note   that,  since  the  default-spec  and

 related-spec are omitted from the argument list, commas (,)  must  be

 inserted in their place.



 3.   $ SPEC = F$PARSE("DENVER::DB1:[PROD]RUN.DAT",,,"TYPE")

      $ SHOW SYMBOL SPEC

        SPEC = ".DAT"



 In this example, the  F$PARSE  function  is  used  to  parse  a  file

 specification  containing  a node name.  The F$PARSE function returns

 the file type DAT for the file RUN.DAT at the remote node DENVER.

2 F$PID

 The F$PID function returns a process identification (PID) number, and

 updates  the  context  symbol to point to the current position in the

 system's process list.



 Format:



      F$PID(context-symbol)

3 Return_Value

 A character string containing the process identification (PID) number

 of a process in the system's list of processes.



 The PIDs returned by the F$PID function depend on  the  privilege  of

 your  process.   If  you  have  GROUP  privilege,  the F$PID function

 returns  PIDs  of  processes  in  your  group.   If  you  have  WORLD

 privilege,  the  F$PID  function returns PIDs of all processes on the

 system.  If you lack GROUP or WORLD privileges,  the  F$PID  function

 returns only your process PID.



 After the last PID in the system's  process  list  is  returned,  the

 F$PID function returns a null string.

3 context-symbol



 A symbol that DCL uses to store a pointer into the system's  list  of

 processes.  The F$PID function uses this pointer to return a PID.

3 Example



 1.   $ CONTEXT = ""

      $ START:

      $     PID = F$PID(CONTEXT)

      $     IF PID .EQS. "" THEN EXIT

      $     SHOW SYMBOL PID

      $     GOTO START



 This command procedure uses the F$PID function to display a  list  of

 PIDs.  The assignment statement declares the symbol CONTEXT, which is

 used as the context-symbol argument for the F$PID function.   Because

 CONTEXT  is  equated to a null string, the F$PID function will return

 the first PID in the process  list  that  it  has  the  privilege  to

 access.



 The PIDs displayed by this command procedure depend on the  privilege

 of your process.  When run with GROUP privilege, the PIDs of users in

 your group are displayed.  When run with WORLD privilege, the PIDS of

 all  users  on  the  system  are  displayed.   Without GROUP or WORLD

 privilege, only your PID is displayed.

2 F$PRIVILEGE

 Returns a value of either "TRUE" or  "FALSE",  depending  on  whether

 your  current  process  privileges match the privileges listed in the

 argument.



 Format:



      F$PRIVILEGE(priv-states)

3 Return_Value

 A character string containing  the  value  "TRUE"  or  "FALSE".   The

 F$PRIVILEGE  function  returns  the  string "FALSE" if any one of the

 privileges in the priv-states list is false.

3 priv-states



 A privilege or a list of privileges separated by commas.  Specify the

 priv-states  argument  as  a  character  string  expression.  You can

 specify any privilege except [NO]ALL.

3 Example



 1.   $ PROCPRIV = F$PRIVILEGE("OPER,GROUP,TMPMBX,NONETMBX")

      $ SHOW SYMBOL PROCPRIV

        PROCPRIV = "FALSE"



 The F$PRIVILEGE function is used to  test  whether  the  process  has

 OPER, USER, TMPMBX, and NETMBX privileges.



 The process in this example  has  OPER,  GROUP,  TMPMBX,  and  NETMBX

 privileges.   Therefore,  a  value of "FALSE" is returned because the

 process has NETMBX privilege,  but  NONETMBX  was  specified  in  the

 priv-states  list.   Although  the Boolean result for the other three

 keywords is true, the entire expression is declared false  since  the

 result for NONETMBX was false.

2 F$PROCESS

 Obtains the current process name string.  The F$PROCESS function  has

 no arguments, but must be followed by parentheses.



 Format:



      F$PROCESS()

3 Return_Value

 A character string containing the current process name.

3 Example



 1.   $ NAME = F$PROCESS()

      $ SHOW SYMBOL NAME

        NAME = "MARTIN"



 In this example, the F$PROCESS function returns the  current  process

 name and assigns it to the symbol NAME.

2 F$SEARCH

 Invokes the $SEARCH RMS service to search a directory file and return

 the full file specification for a file you name.



 Format:



      F$SEARCH(file-spec[,stream-id])

3 Return_Value

 A character string containing the expanded file specification for the

 file-spec  argument.  If the F$SEARCH function does not find the file

 in the directory, the function returns a null ("") string.

3 file-spec



 The file specification to be searched  for.   You  must  specify  the

 file-spec argument as a character string expression.



 If you omit the device or  directory  names,  the  F$SEARCH  function

 supplies  defaults from your current default disk and directory.  The

 F$SEARCH function does not supply defaults for a file name  or  type.

 If  you  omit  the  version number, the F$SEARCH function returns the

 specification for the file with the highest version number.



 You can use wildcards in the file-spec argument.

3 stream-id



 A search stream identification number.   Specify  the  search  stream

 identification number as a positive integer expression.



 If you omit the stream-id argument, the F$SEARCH function assumes  an

 implicit  single  search stream.  That is, the F$SEARCH function will

 start searching at the beginning of the directory file each time  you

 specify a different file-spec argument.

3 Examples



 1.   $ START:

      $     FILE = F$SEARCH("SYS$SYSTEM:*.EXE")

      $     IF FILE .EQS. "" THEN EXIT

      $     SHOW SYMBOL FILE 

      $     GOTO START



 This command procedure displays the file-specs of the latest  version

 of  all  .EXE  files  in  the SYS$SYSTEM directory.  (Only the latest

 version is returned because a wildcard is not  used  as  the  version

 number.)  The  file-spec  argument  SYS$SYSTEM:*.EXE is surrounded by

 quotation marks because it is a character string expression.



 Because no stream-id argument  is  specified,  the  F$SEARCH  uses  a

 single  search  stream.   Each  subsequent F$SEARCH function uses the

 same file-spec argument to return the next file specification  of  an

 .EXE  file  from  SYS$SYSTEM:.  After the latest version of each .EXE

 file has been displayed, the F$SEARCH function returns a null  string

 and the procedure exits.



 2.   $ START:

      $    COM = F$SEARCH ("*.COM;*",1)

      $    DAT = F$SEARCH ("*.DAT;*",2)

      $    SHOW SYMBOL COM

      $    SHOW SYMBOL DAT

      $    IF (COM.EQS. "") .AND. (DAT.EQS. "") THEN EXIT

      $    GOTO START



 This command procedure searches the default disk  and  directory  for

 both  COM  and DAT files.  Notice that the stream-id is specified for

 each F$SEARCH function  so  that  the  context  for  each  search  is

 maintained.



 The first F$SEARCH function starts searching  from  the  top  of  the

 directory  file  for  a file with a type of COM.  When it finds a COM

 file, a pointer is set to maintain  the  search  context.   When  the

 F$SEARCH  function is used the second time, it again starts searching

 from the top of the directory file for a file with  a  type  of  DAT.

 When  the  procedure  loops  back  to  the label START, the stream-id

 argument allows each F$SEARCH function  to  start  searching  in  the

 correct  place  in the directory file.  After all versions of COM and

 DAT files are returned, the procedure exits.



 3.   $ FILESPEC = F$SEARCH("TRNTO""SMITH SALLY""::DBA1:[PROD]*.DAT")

      $ SHOW SYMBOL FILESPEC

        FILESPEC = "TRNTO"smith password"::DBA1:[PROD]CARS.DAT"



 This  example  uses  the  F$SEARCH  function   to   return   a   file

 specification for a file at a remote node.  The access control string

 is enclosed in double  quotation  marks  because  it  is  part  of  a

 character  string  expression when it is an argument for the F$SEARCH

 function; to include quotation marks in a character string expression

 you must specify two sets of quotation marks.



 Note that, when the F$SEARCH function returns a node name  containing

 an  access control string, it substitutes the word "password" for the

 actual user password.

2 F$SETPRV

 Returns a list of keywords indicating user privileges.  In  addition,

 the F$SETPRV function invokes the $SETPRV system service to enable or

 disable specified user  privileges.   The  return  string  shows  the

 status  of  user privileges before changes are made with the F$SETPRV

 function.



 In order to enable  or  disable  privileges,  your  process  must  be

 authorized  to set the specified privilege.  For detailed information

 on privilege restrictions, see the description of the $SETPRV  system

 service in the VAX/VMS System Services Reference Manual.



 Format:



      F$SETPRV(priv-states)

3 Return_Value

 A character  string  containing  keywords  for  the  current  process

 privileges before they were changed by the F$SETPRV function.

3 priv-states



 A privilege or a list of privileges separated by commas.  Specify the

 priv-states argument as a character string expression.

3 Examples



 1.   $ OLDPRIV = F$SETPRV("OPER,NOTMPMBX")

      $ SHOW SYMBOL OLDPRIV

        OLDPRIV = "NOOPER,TMPMBX"



 In this example, the process is authorized to  change  the  OPER  and

 TMPMBX  privileges.  The F$SETPRV function enables the OPER privilege

 and  disables  the  TMPMBX  privilege.   In  addition,  the  F$SETPRV

 function returns the keywords NOOPER and TMPMBX, showing the state of

 these privileges before they were changed.



 You must place quotation marks around the list of privilege  keywords

 because it is a string literal.



 2.   $ SAVPRIV = F$SETPRV("NOGROUP")

      $ SHOW SYMBOL SAVPRIV

        SAVPRIV = "GROUP"

      $ TEST = F$PRIVILEGE("GROUP")

      $ SHOW SYMBOL TEST

        TEST = "TRUE"



 In this example, the process is not authorized to  change  the  GROUP

 privilege.   However, the F$SETPRV function still returns the current

 setting for the GROUP privilege.



 The F$PRIVILEGE function is used to see whether the process has GROUP

 privilege.   The  return string, TRUE, indicates that the process has

 GROUP privilege, even  though  the  F$SETPRV  function  attempted  to

 disable the privilege.

2 F$STRING

 Returns  the  string  equivalent  of  the  result  of  the  specified

 expression.



 Format:



      F$STRING(expression)

3 Return_Value

 A character string which is equivalent to the specified expression.

3 expression



 The expression to be evaluated by the F$STRING expression.   You  can

 specify either an integer or a character string expression.

3 Example



 1.   $ A = 5

      $ B = F$STRING(--2 + A)

      $ SHOW SYMBOL B

        B = "3"



 The F$STRING function in the above example converts the result of the

 integer  expression (--2 + A) to the numeric string, "3".  First, the

 F$STRING function evaluates the expression (--2 + A).  Note  that  5,

 the  value of symbol A, is automatically substituted when the integer

 expression is evaluated.



 After the integer expression  is  evaluated,  the  F$STRING  function

 converts the resulting integer, 3, to the string "3".  This string is

 assigned to the symbol B.

2 F$TIME

 Returns the current date and time string.  The F$TIME function has no

 arguments, but must be followed by parentheses.



 Format:



      F$TIME()

3 Return_Value

 A character  string  containing  the  current  date  and  time.   The

 returned string has the following fixed, 23-character format:



      dd-mmm-yyyy hh:mm:ss.cc

3 Example



 1.   $ OPEN/WRITE OUTFILE DATA.DAT

      $ TIME_STAMP = F$TIME()

      $ WRITE OUTFILE TIME_STAMP



 This example shows how to use the F$TIME  function  to  time-stamp  a

 file  that  you  create  from  a  command  procedure.  OUTFILE is the

 logical name for the file DATA.DAT, which is opened for writing.  The

 F$TIME function returns the current date and time string, and assigns

 this string to the symbol TIME_STAMP.  The WRITE command  writes  the

 date and time string to OUTFILE.

2 F$TRNLNM

 Translates a logical name and returns the equivalence name string, or

 the requested attributes of the logical name.  The translation is not

 iterative; the equivalence string is not checked to determine whether

 it is a logical name.



 Format:



      F$TRNLNM(logical-name [,table] [,index] [,mode] [,case] [,item])

3 Return_Value

 The equivalence name or attribute of the specified logical name.  The

 return  value  can  be a character string or an integer, depending on

 the arguments you specify with the F$TRNLNM function.



 The F$TRNLNM function returns a null string if no match is found.

3 logical-name



 The logical name to be translated.  You must specify the logical-name

 argument as a string expression.

3 table



 The logical name table or tables that the  F$TRNLNM  function  should

 search  to  translate the logical name.  The table argument must be a

 logical name that translates to a logical name table, or to a list of

 table names.  Specify the table argument as a string expression.



 If you do not specify a table, the default value is LNM$DCL_LOGICAL.

3 index



 The index of the equivalence name to be returned.



 If you do not specify an index, the default is 0.

3 mode



 The access mode for the translation.  Specify the access  mode  as  a

 character  string  expression  that evaluates to one of the following

 strings:  USER, SUPERVISOR, EXECUTIVE, or KERNEL.



 If you do not specify an access mode, the default mode is USER.

3 case



 The type of case translation  to  be  performed.   Specify  the  case

 argument as a character string that evaluates to one of the following

 strings:  CASE_BLIND or CASE_SENSITIVE.



 If you do not specify the case argument, the default is CASE_BLIND.

3 item



 The type  of  information  that  F$TRNLNM  should  return  about  the

 specified  logical  name.   You  can specify any one of the following

 strings as an item:   

           ACCESS_MODE CONCEALED CONFINE CRELOG     LENGTH

           MAX_INDEX   NO_ALIAS  TABLE   TABLE_NAME TERMINAL VALUE



 ACCESS_MODE   Returns the access mode  associated  with  the  logical

               name.   The  access  mode  is  returned  as  one of the

               following  character  strings:   "USER",  "SUPERVISOR",

               "EXECUTIVE", "KERNEL".



 CONCEALED     Returns one of the character strings "TRUE" or  "FALSE"

               to   indicate   whether  the  CONCEALED  attribute  was

               specified with  the  /TRANSLATION_ATTRIBUTES  qualifier

               when  the  logical  name  was  created.   The CONCEALED

               attribute is used to create a concealed logical name.



 CONFINE       Returns one of the character strings "TRUE" or  "FALSE"

               to  indicate  whether the logical name is confined.  If

               the logical name is confined (TRUE), then the name will

               not  be copied to subprocesses.  If the logical name is

               not confined (FALSE), then the name will be  copied  to

               subprocesses.



 CRELOG        Returns one of the character strings "TRUE" or  "FALSE"

               to  indicate  whether the logical name was created with

               the $CRELOG system service or with the  $CRELNM  system

               service, using the CRELOG attribute.



               If the logical name was created with the $CRELOG system

               service  or  with the $CRELNM system service, using the

               CRELOG attribute, then the string "TRUE"  is  returned.

               Otherwise, the string "FALSE" is returned.



 LENGTH        Returns the length of the equivalence  name  associated

               with  the  specified logical name.  If the logical name

               has  more  than  one  equivalence  name,  the  F$TRNLNM

               function  returns  the  length of the name specified by

               the index argument.   The  length  is  returned  as  an

               integer.



 MAX_INDEX     Returns the largest index defined for the logical name.

               The   index   shows  how  many  equivalence  names  are

               associated with a logical  name.   The  index  is  zero

               based; that is, the index 0 refers to the first name in

               a list of equivalence names.  The index is returned  as

               an integer.



 NO_ALIAS      Returns one of the character strings "TRUE" or  "FALSE"

               to  indicate  whether the logical name has the NO_ALIAS

               attribute.  The NO_ALIAS attribute means that a logical

               name  with  the same name cannot be created in an outer

               access mode.



 TABLE         Returns one of the character strings "TRUE" or  "FALSE"

               to  indicate  whether the logical name is the name of a

               logical name table.



 TABLE_NAME    Returns the name of the table where  the  logical  name

               was  found.   The table name is returned as a character

               string.



 TERMINAL      Returns one of the character strings "TRUE" or  "FALSE"

               to   indicate   whether   the  TERMINAL  attribute  was

               specified with  the  /TRANSLATION_ATTRIBUTES  qualifier

               when  the  logical  name  was  created.   The  TERMINAL

               attribute indicates that the  logical  name  is  not  a

               candidate for iterative translation.



 VALUE         Returns  the  equivalence  name  associated  with   the

               specified  logical  name.  If the logical name has more

               than  one  equivalence  name,  the  F$TRNLNM   function

               returns  the name specified by the index argument.  The

               equivalence name is returned  as  a  character  string.

               VALUE  is  the  default  if  you do not specify an item

               argument.

3 Examples



 1.   $ SAVE_DIR = F$TRNLNM("SYS$DISK")+F$DIRECTORY()

         .

         .

         .



      $ SET DEFAULT 'SAVE_DIR'



 The assignment statement concatenates  the  values  returned  by  the

 F$DIRECTORY  and F$TRNLNM functions, and assigns the resulting string

 to the symbol SAVE_DIR.  The  symbol  SAVE_DIR  consists  of  a  full

 device and directory name string.



 The argument SYS$DISK is enclosed in quotation marks because it is  a

 character string.  (The command interpreter treats all arguments that

 begin with alphabetic characters as  symbols  or  lexical  functions,

 unless  the  arguments  are enclosed within quotation marks.) None of

 the optional arguments are specified, so the F$TRNLNM  function  uses

 the defaults.



 At the end of the command procedure, the original  default  directory

 is  reset.   When you reset the directory, you must place apostrophes

 around the symbol SAVE_DIR to force symbol substitution.



 2.   $ DEFINE/TABLE=LNM$GROUP TERMINAL 'F$TRNLNM("SYS$OUTPUT")'



 This example shows a line from a command procedure that (1) uses  the

 F$TRNLNM  function to determine the name of the current output device

 and (2) creates a  group  logical  name  table  entry  based  on  the

 equivalence string.



 You must place the argument SYS$OUTPUT within quotation marks because

 it is a character string.



 Also, in this example you must place  the  F$TRNLNM  function  within

 single  quotes  to  force  the  lexical  function  to  be  evaluated.

 Otherwise, the DEFINE command will  not  automatically  evaluate  the

 lexical function.

2 F$TYPE

 Determines the data type of a symbol.



 Format:



      F$TYPE(symbol-name)

3 Return_Value

 The string "INTEGER" if the symbol is equated to an  integer,  or  if

 the  symbol  is  equated  to  a string in which the characters form a

 valid integer.  The F$TYPE function returns the  string  "STRING"  if

 the  symbol  is equated to a character string in which the characters

 do not form a valid integer.  A null string is returned if the symbol

 is undefined.

3 symbol



 The name of symbol that is evaluated.

3 Examples



 1.   $ NUM = "52"

      $ TYPE = F$TYPE(NUM)

      $ SHOW SYMBOL TYPE

        TYPE = "INTEGER"



 This example uses the F$TYPE function to determine the data  type  of

 the  symbol  NUM.   NUM  is  equated  to  the  character string "52".

 Because the characters in the string form a valid integer, the F$TYPE

 function returns the string "INTEGER".



 2.   $ NUM = 52

      $ TYPE = F$TYPE(NUM)

      $ SHOW SYMBOL TYPE

        TYPE = "INTEGER"



 In this example, the symbol NUM is equated to the  integer  52.   The

 F$TYPE function shows that the symbol has an integer data type.



 3.   $ CHAR = "FIVE"

      $ TYPE = F$TYPE(CHAR)

      $ SHOW SYMBOL CHAR

        CHAR = "STRING"



 In this example, the symbol CHAR is equated to the  character  string

 "FIVE".   Because  the  characters in this string do not form a valid

 integer, the F$TYPE function shows  that  the  symbol  has  a  string

 value.

2 F$USER

 Returns the current user identification code (UIC), in named  format.

 The  F$USER  function  has  no  arguments,  but  must  be followed by

 parentheses.



 Format:



      F$USER()

3 Return_Value

 A character string containing the current user identification  (UIC),

 including  square  brackets.   The  UIC  is  returned  in  the format

 [group-identifier, member-identifier].

3 Example



 1.   $ UIC = F$USER()

      $ SHOW SYMBOL UIC

        UIC = "[GROUP6,JENNIFER]"



 In  this  example  the  F$USER  function  returns  the  current  user

 identification code and assigns it to the symbol UIC.

2 F$VERIFY

 Returns  an  integer   value   indicating   whether   the   procedure

 verification setting is currently on or off.  If used with arguments,

 the F$VERIFY function can turn the procedure and  image  verification

 settings  on  or  off.   You  must  include the parentheses after the

 F$VERIFY function, whether or not you specify arguments.



 Format:



      F$VERIFY([procedure-value] [,image-value])

3 Return_Value

 The integer 0 if the procedure verification setting is  off,  or  the

 integer 1 if the procedure verification setting is on.

3 procedure-value



 An  integer  expression  with  a  value  of  0  to   turn   procedure

 verification off, or 1 to turn procedure verification on.

3 image-value



 An integer expression with a value of 0 to  turn  image  verification

 off, or 1 to turn image verification on.

3 Examples



 1.   $ SAVE_PROC_VERIFY = F$ENVIRONMENT("VERIFY_PROCEDURE")

      $ SAVE_IMAGE_VERIFY = F$ENVIRONMENT("VERIFY_IMAGE")

      $ SET NOVERIFY

         .

         .

         .



      $ TEMP = F$VERIFY(SAVE_PROC_VERIFY, SAVE_IMAGE_VERIFY)



 This example shows an excerpt from a command  procedure.   The  first

 assignment  statement  assigns  the  current  procedure  verification

 setting  to  the  symbol  SAVE_PROC_VERIFY.   The  second  assignment

 statement  assigns  the  current  image  verification  setting to the

 symbol SAVE_IMAGE_VERIFY.



 Then,  the  SET  NOVERIFY  command  disables  procedure   and   image

 verification.   Later,  the F$VERIFY function resets the verification

 settings,  using  the  original  values  (equated  to   the   symbols

 SAVE_PROC_VERIFY  and  SAVE_IMAGE_VERIFY).   The symbol TEMP contains

 the procedure verification before it is  changed  with  the  F$VERIFY

 function.  (In this example the value of TEMP is not used.)



 2.   

       $ VERIFY = F$VERIFY(0)

         .

         .

         .



       $ IF VERIFY .EQ. 1 THEN SET VERIFY



 This example shows an excerpt from a command procedure that uses  the

 F$VERIFY  function to save the current procedure verification setting

 and to turn both procedure and image verification off.  At the end of

 the  command  procedure, if procedure verification was originally on,

 both the procedure and image verification are turned on.

