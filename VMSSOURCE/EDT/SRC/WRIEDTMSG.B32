%TITLE 'EDT$WRIEDTMSG - write VMSMSG.MSG'
MODULE EDT$WRIEDTMSG (				! Write VMSMSG.MSG
		IDENT = 'V04-000',		! File: WRIEDTMSG.B32 Edit: JBS1007
		MAIN = EDT$WRIEDTMSG
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module, WRIEDTMSG.FOR, is a FORTRAN program that writes
!	the file VMSMSG.MSG, which is read by the message compiler
!	to produce EDT's run-time messages.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: John Sauter, CREATION DATE: 23-Jul-1981
!
! MODIFIED BY:
!
! 1-001	- Original, from BASMSG.FOR, created November 3, 1978, last
!	   revised September 24, 1979 (version 1-015).  JBS 28-Jul-1981
! 1-002	- Don't omit the first message.  JBS 03-Aug-1981
! 1-003	- Change output file name to VMSMSG.MSG.  JBS 03-Aug-1981
! 1-004	- Fix output file's module name.  JBS 06-Aug-1981
! 1-005	- Recoded in BLISS since VMS doesn't like its components to be
!	   dependent upon Fortran.  JBS 22-Oct-1981
! 1-006 - Change output file name to VMSMSG.TMP. BLS 6-May-1983
! 1-007	- Correct the module header and trailer.  JBS 09-May-1983
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    EDT$WRIEDTMSG,				! Write VMSMSG.TMP
    WRITE_FILE,					! Actually write the text
    PRINT,					! Print a line of text
    HEX_TEXT,					! Convert binary to hexadecimal
    PRINTABLE_TEXT;				! Convert binary to ASCII, printable

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:PSECTS.REQ';			! Define PSECT declaration macros

REQUIRE 'EDTSRC:SYSSYM.REQ';			! Define system symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    EDT$K_FAC_NO = 133;				! Facility number, for signaling.

!
! FIELDS:
!
!	NONE
!
! STRUCTURES:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (EDT);				! Declare PSECTs for EDT$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    STR$COPY_DX,				! Copy a string, by descriptor
    STR$CONCAT,					! Concatenate strings
    LIB$GET_INPUT,				! Get a line from SYS$INPUT
    STR$COPY_R,					! Copy a string, by reference
    STR$FREE1_DX,				! Free a dynamic string
    EDT$MSGTXT;					! Return the text of a message


%SBTTL 'Package of macros for string processing'
!+
! Macro to initialize a dynamic descriptor.
!-

MACRO
    INIT_DESCRIPTOR (DESCR) =
	DESCR [DSC$W_LENGTH] = 0;
	DESCR [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	DESCR [DSC$B_CLASS] = DSC$K_CLASS_D;
	DESCR [DSC$A_POINTER] = 0;
%,
!<BLF/MACRO>
!+
! Macro to discard a dynamic descriptor.
!-
    DISCARD_DESCRIPTOR (DESCR) =
	BEGIN

	LOCAL
	    FREE_STATUS;

	FREE_STATUS = STR$FREE1_DX (DESCR);

	IF ( NOT .FREE_STATUS) THEN SIGNAL_STOP (.FREE_STATUS);

	END;
    %,
!+
! Macro to build a text line using FAO.  This is a convenience macro.
!-
    BUILD_TEXT_LINE (DESCR, CTL_STRING, FAO_ARGS) =
	BEGIN

	LOCAL
	    FAO_STATUS,
	    COPY_STATUS;

	CTL_STR_DSC [DSC$W_LENGTH] = %CHARCOUNT (CTL_STRING);
	CTL_STR_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	CTL_STR_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
	CTL_STR_DSC [DSC$A_POINTER] = CH$PTR (UPLIT (CTL_STRING));
	FAO_STATUS = $FAO (			!
	    CTL_STR_DSC, 			!
	    OUT_LENGTH, 			!
	    TEMP_STR_DSC, 			!
	    %REMOVE (FAO_ARGS));

	IF ( NOT .FAO_STATUS) THEN SIGNAL_STOP (.FAO_STATUS);

	COPY_STATUS = STR$COPY_R (DESCR, OUT_LENGTH, .TEMP_STR_DSC [DSC$A_POINTER]);
	.COPY_STATUS
	END
    %,
!+
! Macro to format and print a line.  Errors are returned to the caller.
! This is a convenience macro.
!-
    PRINT_LINE (TEXT, VARS) =
	BEGIN

	LOCAL
	    BUILD_STATUS,
	    PRINT_STATUS;

	BUILD_STATUS = BUILD_TEXT_LINE (LINE_DESC, %STRING (%REMOVE (TEXT)), VARS);

	IF ( NOT .BUILD_STATUS) THEN RETURN (.BUILD_STATUS);

	PRINT_STATUS = PRINT (.OUTPUT_RAB, LINE_DESC);

	IF ( NOT .PRINT_STATUS) THEN RETURN (.PRINT_STATUS);

	END
    %;


%SBTTL 'EDT$WRIEDTMSG - Write VMSMSG.TMP'
ROUTINE EDT$WRIEDTMSG 				! Write VMSMSG.TMP
    =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes the file VMSMSG.TMP.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = EDT$WRIEDTMSG ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	Any error from LIB$GET_INPUT or STR$FREE1_DX
!
! SIDE EFFECTS:
!
!	Writes a file.
!	Any errors from RMS$CREATE, RMS$OPEN, RMS$CONNECT or RMS$CLOSE
!	 are signalled.
!
!--

    BEGIN

    LOCAL
	OUTPUT_BUFFER : BLOCK [132, BYTE],	! output buffer, for RMS
	OUTPUT_FAB : $FAB_DECL,			! RMS FAB for the output file
	OUTPUT_NAM : $NAM_DECL,			! RMS NAM for the output file
	OUTPUT_RAB : $RAB_DECL,			! RMS RAB for the output file
	OUTPUT_FILE_NAME_DESC : BLOCK [8, BYTE],	! Name of output file
	OUTPUT_RESULT_NAME : BLOCK [NAM$C_MAXRSS, BYTE];	! Place to store output file name

!
    OUTPUT_FILE_NAME_DESC [DSC$W_LENGTH] = %CHARCOUNT ('VMSMSG');
    OUTPUT_FILE_NAME_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    OUTPUT_FILE_NAME_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    OUTPUT_FILE_NAME_DESC [DSC$A_POINTER] = UPLIT ('VMSMSG');
!+
! Initialize the FAB, NAM and RAB for the output file
!-
    $FAB_INIT (FAB = OUTPUT_FAB, 		!
	FAC = (PUT), 				!
	FOP = (OFP, SQO, DFW), 			!
	ORG = SEQ, 				!
	SHR = NIL, 				!
	MRS = 132, 				!
	RAT = CR, 				!
	RFM = VAR, 				!
	FNA = .OUTPUT_FILE_NAME_DESC [DSC$A_POINTER], 	!
	FNS = .OUTPUT_FILE_NAME_DESC [DSC$W_LENGTH], 	!
	DNA = UPLIT ('EDTSRC:.TMP'), 		!
	DNS = %CHARCOUNT ('EDTSRC:.TMP'), 	!
	NAM = OUTPUT_NAM);
    $NAM_INIT (NAM = OUTPUT_NAM, 		!
	RSA = OUTPUT_RESULT_NAME, 		!
	RSS = NAM$C_MAXRSS);
    $RAB_INIT (RAB = OUTPUT_RAB, 		!
	RAC = SEQ, 				!
	ROP = WBH, 				!
	USZ = 132, 				!
	UBF = OUTPUT_BUFFER, 			!
	FAB = OUTPUT_FAB);
!+
! Create the output file, and do the $CONNECT.
!-
    BEGIN

    LOCAL
	CREATE_STATUS,
	CONNECT_STATUS;

    CREATE_STATUS = $CREATE (FAB = OUTPUT_FAB);

    IF ( NOT .CREATE_STATUS)
    THEN
	SIGNAL_STOP (				!
	    SHR$_OPENOUT + (EDT$K_FAC_NO*65536) + STS$K_SEVERE, 	!
	    1, 					!
	    OUTPUT_FILE_NAME_DESC, 		!
	    .OUTPUT_FAB [FAB$L_STS], .OUTPUT_FAB [FAB$L_STV]);

    CONNECT_STATUS = $CONNECT (RAB = OUTPUT_RAB);

    IF ( NOT .CONNECT_STATUS)
    THEN
	SIGNAL_STOP (				!
	    SHR$_OPENOUT + (EDT$K_FAC_NO*65536) + STS$K_SEVERE, 	!
	    1, 					!
	    OUTPUT_FILE_NAME_DESC, 		!
	    .OUTPUT_RAB [RAB$L_STS], .OUTPUT_RAB [RAB$L_STV]);

    END;
!+
! Point the file name descriptor to the resultant name string.
!-
    OUTPUT_FILE_NAME_DESC [DSC$W_LENGTH] = .OUTPUT_NAM [NAM$B_RSL];
    OUTPUT_FILE_NAME_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    OUTPUT_FILE_NAME_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    OUTPUT_FILE_NAME_DESC [DSC$A_POINTER] = .OUTPUT_NAM [NAM$L_RSA];

    IF ( NOT WRITE_FILE (OUTPUT_RAB))
    THEN
	SIGNAL_STOP (				!
	    SHR$_WRITEERR + (EDT$K_FAC_NO*65536) + STS$K_SEVERE, 	!
	    1, 					!
	    OUTPUT_FILE_NAME_DESC, 		!
	    .OUTPUT_RAB [RAB$L_STS], .OUTPUT_RAB [RAB$L_STV]);

    BEGIN
!+
! Close the output file.
!-

    LOCAL
	CLOSE_STATUS;

    CLOSE_STATUS = $CLOSE (FAB = OUTPUT_FAB);

    IF ( NOT .CLOSE_STATUS)
    THEN
	SIGNAL_STOP (				!
	    SHR$_CLOSEOUT + (EDT$K_FAC_NO*65536) + STS$K_SEVERE, 	!
	    1, 					!
	    OUTPUT_FILE_NAME_DESC, 		!
	    .OUTPUT_FAB [FAB$L_STS], .OUTPUT_FAB [FAB$L_STV]);

    END;
    RETURN (SS$_NORMAL);
    END;					! End of routine EDT$WRIEDTMSG

%SBTTL 'WRITE_FILE - Actually write the file'
ROUTINE WRITE_FILE (				! Actually write the file
    OUTPUT_RAB					! Where to write each record
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes each record on the specified RAB.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = WRITE_FILE (OUTPUT_RAB.mz.r)
!
! FORMAL PARAMETERS:
!
!	OUTPUT_RAB		RAB onto which to write the text
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	None
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	Any errors from RMS $PUT
!
! SIDE EFFECTS:
!
!	Writes on the file connected to OUTPUT_RAB
!
!--

    BEGIN

    MAP
	OUTPUT_RAB : REF $RAB_DECL;

    LOCAL
!+
! Stuff for BUILD_TEXT_LINE
!-
	CTL_STR_DSC : BLOCK [8, BYTE],
	TEMP_STR_DSC : BLOCK [8, BYTE],
	TEMP_STRING : VECTOR [132, BYTE],
	OUT_LENGTH,
!+
! Stuff for PRINT_LINE
!-
	LINE_DESC : BLOCK [8, BYTE],
!+
! End of stuff for PRINT_LINE
!-
	PRINTABLE_DESC : BLOCK [8, BYTE],
	HEX_DESC : BLOCK [8, BYTE],
	TEXT_DESC : BLOCK [8, BYTE],
	NAME_DESC : BLOCK [8, BYTE],
	SEVERITY_DESC : BLOCK [8, BYTE],
	NAME_LENGTH,
	TEXT_LENGTH,
	SEVERITY_LENGTH,
	SEVERITY_ADDR : REF VECTOR [, BYTE];

!+
! Set up TEMP_STR_DSC for BUILD_TEXT_LINE
!-
    TEMP_STR_DSC [DSC$W_LENGTH] = 132;
    TEMP_STR_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    TEMP_STR_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
    TEMP_STR_DSC [DSC$A_POINTER] = CH$PTR (TEMP_STRING);
!+
! Set up LINE_DESC for PRINT_LINE, etc.
!-
    INIT_DESCRIPTOR (LINE_DESC);
    INIT_DESCRIPTOR (PRINTABLE_DESC);
    INIT_DESCRIPTOR (HEX_DESC);
    INIT_DESCRIPTOR (TEXT_DESC);
    INIT_DESCRIPTOR (NAME_DESC);
    INIT_DESCRIPTOR (SEVERITY_DESC);
!+
! Put out the initial information.
!-
    PRINT_LINE (<'!! This file, VMSMSG.TMP, contains the definitions of the EDT'>, <' '>);
    PRINT_LINE (<'!! messages for VAX/VMS.  This file is read by the MESSAGE compiler'>, <' '>);
    PRINT_LINE (<'!! to build an object file containing the EDT messages.'>, <' '>);
    PRINT_LINE (<'!!'>, <' '>);
    PRINT_LINE (<'        .TITLE EDT$VMSMSG EDT''s message text'>, <' '>);
    PRINT_LINE (<'!!'>, <' '>);
    PRINT_LINE (<'.FACILITY/SYSTEM EDT, !SL'>, <EDT$K_FAC_NO>);
!+
! Write a line for each message
!-

    INCR CODE FROM 0 TO 4095 DO
	BEGIN
	EDT$MSGTXT (CODE, SEVERITY_DESC, NAME_LENGTH, NAME_DESC, TEXT_LENGTH, TEXT_DESC);
!+
! If the severity field is blank we are done.
!-
	SEVERITY_ADDR = .SEVERITY_DESC [DSC$A_POINTER];

	IF (.SEVERITY_ADDR [0] EQL ' ') THEN EXITLOOP;

	PRINT_LINE (<'!AS/!AS <!AS>'>, <NAME_DESC, SEVERITY_DESC, TEXT_DESC>);
	END;

!+
! Write out the trailer line
!-
    PRINT_LINE (<'.END'>, <' '>);
!+
! All done.
!-
    DISCARD_DESCRIPTOR (LINE_DESC);
    DISCARD_DESCRIPTOR (PRINTABLE_DESC);
    DISCARD_DESCRIPTOR (HEX_DESC);
    DISCARD_DESCRIPTOR (TEXT_DESC);
    DISCARD_DESCRIPTOR (NAME_DESC);
    DISCARD_DESCRIPTOR (SEVERITY_DESC);
    RETURN (SS$_NORMAL);
    END;					! End of routine WRITE_FILE

%SBTTL 'PRINT - print a text line on a file'
ROUTINE PRINT (					! Print a text line on a file
    RAB_ADDR, 					! RAB onto which to print the line
    TEXT_LINE					! Descriptor of the line to print
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine interfaces to RMS to print a line of text.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = PRINT (RAB_ADDR.mz.r, TEXT_LINE.rt.dx)
!
! FORMAL PARAMETERS:
!
!	RAB_ADDR		Pointer to the RAB onto which to print the line of text
!	TEXT_LINE		Descriptor for the line of text to be printed.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	All RMS errors are returned to the caller, so that they can be
!	signalled with the file name.
!
! SIDE EFFECTS:
!
!	Does a $PUT to the RAB.
!
!--

    BEGIN

    MAP
	RAB_ADDR : REF $RAB_DECL,
	TEXT_LINE : REF BLOCK [8, BYTE];

    LOCAL
	PUT_STATUS;

!+
! Fill in the RAB fields.
!-
    RAB_ADDR [RAB$W_RSZ] = .TEXT_LINE [DSC$W_LENGTH];
    RAB_ADDR [RAB$L_RBF] = .TEXT_LINE [DSC$A_POINTER];
!+
! Now do the $PUT
!-
    PUT_STATUS = $PUT (RAB = .RAB_ADDR);

    IF ( NOT .PUT_STATUS) THEN RETURN (.PUT_STATUS);

    RETURN (SS$_NORMAL);
    END;					! End of routine PRINT

%SBTTL 'HEX_TEXT - Return a binary string in hexadecimal'
ROUTINE HEX_TEXT (				! Return a binary string in hex
    OUTPUT_DESC, 				! Descriptor to receive the hex
    INPUT_LEN, 					! Number of input bytes
    INPUT_ADDR					! Address of start of input
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine converts an arbitrary string of bytes into hex, so it
!	can be printed.  Early bytes are put to the right of later bytes.
!
! CALLING SEQUENCE:
!
!	status.wlc.v = HEX_TEXT (OUTPUT_desc.wt.dx, INPUT_LEN.rl.v, INPUT_ADDR,ra.v)
!
! FORMAL PARAMETERS:
!
!	output_desc	Where the result text is stored.
!	input_len	Number of bytes of input
!	input_addr	Address of first input byte
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	Any errors from STR$CONCAT
!	Any errors from STR$COPY_DX
!
! SIDE EFFECTS:
!
!	Calls STR$CONCAT and STR$COPY_DX, thus manipulating string storage.
!
!--

    BEGIN

    MAP
	INPUT_ADDR : REF VECTOR [, BYTE],
	OUTPUT_DESC : REF BLOCK [8, BYTE];

    LOCAL
	INTER_DESC : BLOCK [8, BYTE],
	DIGIT_DESC : BLOCK [8, BYTE],
	DIGIT,
	STATUS;

    INIT_DESCRIPTOR (INTER_DESC);
    DIGIT_DESC [DSC$W_LENGTH] = 1;
    DIGIT_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    DIGIT_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    DIGIT_DESC [DSC$A_POINTER] = DIGIT;

    INCR CHAR_NO FROM 1 TO .INPUT_LEN DO
	BEGIN

	LOCAL
	    CHAR;

	CHAR = .INPUT_ADDR [.CHAR_NO - 1];
	DIGIT = (.CHAR AND 15) + '0';

	IF (.DIGIT GTR '9') THEN DIGIT = .DIGIT - 10 - '0' + 'A';

	STATUS = STR$CONCAT (INTER_DESC, DIGIT_DESC, INTER_DESC);

	IF ( NOT .STATUS) THEN RETURN (.STATUS);

	DIGIT = (.CHAR^-4) + '0';

	IF (.DIGIT GTR '9') THEN DIGIT = .DIGIT - 10 - '0' + 'A';

	STATUS = STR$CONCAT (INTER_DESC, DIGIT_DESC, INTER_DESC);

	IF ( NOT .STATUS) THEN RETURN (.STATUS);

	END;

    STATUS = STR$COPY_DX (.OUTPUT_DESC, INTER_DESC);
    DISCARD_DESCRIPTOR (INTER_DESC);
    RETURN (.STATUS);
    END;					! End of routine HEX_TEXT

%SBTTL 'PRINTABLE_TEXT - Return a binary string in ASCII, printable'
ROUTINE PRINTABLE_TEXT (			! Return a binary string in printable ASCII
    OUTPUT_DESC, 				! Descriptor to receive the text
    INPUT_LEN, 					! Number of input bytes
    INPUT_ADDR					! Address of start of input
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine converts an arbitrary string of bytes into ASCII, representing
!	unprintable characters in hexadecimal so the result can be printed.
!
! CALLING SEQUENCE:
!
!	status.wlc.v = PRINTABLE_TEXT (OUTPUT_desc.wt.dx, INPUT_LEN.rl.v, INPUT_ADDR,ra.v)
!
! FORMAL PARAMETERS:
!
!	OUTPUT_DESC	Where the result text is stored.
!	INPUT_LEN	Number of bytes of input
!	INPUT_ADDR	Address of first input byte
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	Any errors from STR$CONCAT
!	Any errors from STR$COPY_DX
!
! SIDE EFFECTS:
!
!	Calls STR$CONCAT and STR$COPY_DX, thus manipulating string storage.
!
!--

    BEGIN

    MAP
	INPUT_ADDR : REF VECTOR [, BYTE],
	OUTPUT_DESC : REF BLOCK [8, BYTE];

    LOCAL
	INTER_DESC : BLOCK [8, BYTE],
	CHAR_DESC : BLOCK [8, BYTE],
	CHAR_REP : VECTOR [4, BYTE],
	STATUS;

    INIT_DESCRIPTOR (INTER_DESC);
    CHAR_DESC [DSC$W_LENGTH] = 1;
    CHAR_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    CHAR_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    CHAR_DESC [DSC$A_POINTER] = CHAR_REP [0];

    INCR CHAR_NO FROM 1 TO .INPUT_LEN DO
	BEGIN

	LOCAL
	    CHAR;

	CHAR = .INPUT_ADDR [.CHAR_NO - 1];

	IF ((.CHAR GEQ %X'20') AND 		!
	    (.CHAR LSS %X'7F') AND 		!
	    (.CHAR NEQ '<') AND 		!
	    (.CHAR NEQ '"'))
	THEN
	    BEGIN
!+
! Show character as itself.
!-
	    CHAR_REP [0] = .CHAR;
	    CHAR_DESC [DSC$W_LENGTH] = 1;
	    END
	ELSE
	    BEGIN
!+
! The character is not printable.  Represent it by <>.  To avoid
! ambiguity, "<" and '"' are also represented this way.  Control characters
! SOH through SUB are represented by <^letter>; others characters by <hex>.
!-
	    CHAR_REP [0] = '<';

	    IF (((.CHAR + %X'40') GEQ 'A') AND ((.CHAR + %X'40') LEQ 'Z'))
	    THEN
		BEGIN
		CHAR_REP [1] = '^';
		CHAR_REP [2] = .CHAR + %X'40';
		END
	    ELSE
		BEGIN

		LOCAL
		    DIGIT;

		DIGIT = (.CHAR^-4) + '0';

		IF (.DIGIT GTR '9') THEN DIGIT = .DIGIT - 10 - '0' + 'A';

		CHAR_REP [1] = .DIGIT;
		DIGIT = (.CHAR AND 15) + '0';

		IF (.DIGIT GTR '9') THEN DIGIT = .DIGIT - 10 - '0' + 'A';

		CHAR_REP [2] = .DIGIT;
		END;

	    CHAR_REP [3] = '>';
	    CHAR_DESC [DSC$W_LENGTH] = 4;
	    END;

	STATUS = STR$CONCAT (INTER_DESC, INTER_DESC, CHAR_DESC);

	IF ( NOT .STATUS) THEN RETURN (.STATUS);

	END;

    STATUS = STR$COPY_DX (.OUTPUT_DESC, INTER_DESC);
    DISCARD_DESCRIPTOR (INTER_DESC);
    RETURN (.STATUS);
    END;					! End of routine PRINTABLE_TEXT
!<BLF/PAGE>

END						! End of module EDT$WRIEDTMSG

ELUDOM
