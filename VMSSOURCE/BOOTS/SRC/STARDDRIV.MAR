	.TITLE	STARDDRIV - Driver read routines for STASYSGEN, STACONFIG
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	STANDALONE SYSGEN, STANDALONE CONFIGURE
;
; ABSTRACT:	READS DRIVERS INTO MEMORY.
;
; ENVIRONMENT:	USER, EXEC, AND KERNEL MODE
;
; AUTHOR:  STEVE BECKHARDT,	CREATION DATE:	18-SEP-1979
;
; MODIFIED BY:
;
;	V03-003	KDM0090		Kathleen D. Morse	10-Nov-1983
;		Make file header buffer fall on word boundry instead
;		of a byte boundry, so that STASYSGEN works on MicroVAX I.
;
;	V03-002	WMC0001		Wayne Cardoza		09-Aug-1983
;		Make it handle non-contiguous files.
;
;	V03-001	MSH0001		Maryann Hinden		07-Jul-1983
;		Move to separate module.
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

CR = ^XD				; ASCII carriage return
LF = ^XA				; ASCII line feed

;
; OWN STORAGE:
;

	.PSECT	BOO$SYSGEN,WRT,WORD

FILHDR:	.BLKB	512			; Buffer for file header

IXFHDR:	.BLKB	512			; Buffer for index file header

RTRVPTR:				; Buffer for 128 retrieval pointer
	.BLKB	512

RTRVLEN:				; Length of retreival pointers
	.BLKL	1

RTRVDESC:				; Descriptor for retrieval pointer buffer
	.LONG	512
	.ADDRESS RTRVPTR

STATBLK:				; Statistics block
	.BLKL	1			;  LBN of first block of file
	.BLKL	1			;  Size of file in blocks

IOSTBLK:				; I/O status block
	.BLKL	2

FILNAM_DSC:				; File name descriptor
	.LONG	0			;  Size (in bytes)
	.ADDRESS FILNAMBFR		;  Address of file name

FILNAMBFRLF:				; Line feed before file name buffer
	.ASCII	<LF>
FILNAMBFR:				; File name buffer
	.BLKB	16


	.SBTTL	IOGEN$READDRIV - Read in Driver
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine reads the driver into memory by opening it
;	with FIL$OPENFILE and reading it with a QIO.
;
; CALLING SEQUENCE:
;
;	BSBW	IOGEN$READDRIV
;
; INPUT PARAMETERS:
;
;	R0	Address of filename counted string
;	R3	Address of location to store channel number
;	R4	Address of two longword array to return address range
;		created by $EXPREG.
;
; IMPLICIT INPUTS:
;
;	None
;
; OUTPUT PARAMETERS:
;
;	R0	Completion code
;
; IMPLICIT OUTPUTS:
;
;	None
;
; COMPLETION CODES
;
;	Those returned by FIL$OPENFILE, $EXPREG, and $QIO
;
; SIDE EFFECTS:
;
;	R0 - R2 are used as scratch registers
;
;--

IOGEN$READDRIV::
	MOVZBL	(R0)+,R1		; Get length of filename
	CMPL	R1,#9			; Longer than 9 characters?
	BLEQ	10$			; No
	MOVZWL	#SS$_BADFILENAME,R0	; Yes, error
	RSB

10$:	ADDL3	#4,R1,FILNAM_DSC	; Store filename size + 4
	PUSHR	#^M<R2,R3,R4,R5>	; Save registers
	MOVC3	R1,(R0),FILNAMBFR	; Copy filename into local buffer
	MOVL	#^A/.EXE/,(R3)		; Append filetype
	POPR	#^M<R2,R3,R4,R5>	; Restore registers

	;
	; Open the file
	;

	PUSHAQ	RTRVDESC		; Buffer for retrieval pointers
	PUSHAB	RTRVLEN			; Get length of retrieval pointer buffer used
	MOVAQ	STATBLK,R2		; Get address of statistics block
	PUSHAQ	(R2)			; Push address of statistics block
	PUSHAB	FILHDR			; Push address of file header buffer
	PUSHAB	IXFHDR			; Push address of index file hdr bfr
	PUSHAQ	FILNAM_DSC		; Push address of filename descriptor
	PUSHAW	(R3)			; Push address of loc. to store channel
	CALLS	#7,FIL$OPENFILE		; Open the file
	BLBC	R0,20$			; Error
	CMPL	RTRVLEN,RTRVDESC	; Did we overflow buffer
	BLSS	40$			; No
	MOVL	SS$_FILNOTCNTG,R0
20$:	BSBW	PUTERROR		; Output error message
	MOVL	FILNAM_DSC,R0		; Get length of filename
	MOVB	#CR,FILNAMBFR[R0]	; Put CR at end of buffer
	CLRB	FILNAMBFR+1[R0]		; Make it ASCIZ
	CLRQ	-(SP)			; No input buffer
	PUSHAB	FILNAMBFRLF		; Push address of filename
	CALLS	#3,BOO$READPROMPT	; Output driver name
	CLRL	R0			; Status
	RSB

40$:	PUSHR	#^M<R5,R6,R7>
	;
	; Expand the program region to create a place to read driver into
	;

	$EXPREG_S	PAGCNT = 4(R2),-; # of pages
			RETADR = (R4)	; Return address array
	BLBC	R0,90$				; Error

	;
	; Read in the driver
	;

	ASHL	#-3,RTRVLEN,R2		; Number of retrieval pointers
	MOVAB	RTRVPTR,R5		; Start of pointers
	MOVL	(R4),R6			; Start of driver buffer
50$:	MOVQ	(R5)+,R0		; R0 = # of blocks, R1 = LBN,
	MULL3	#512,R0,R7		; Convert blocks to bytes
	$QIOW_S	CHAN = (R3),-		; Channel number
		FUNC = #IO$_READLBLK,-	; Function
		IOSB = IOSTBLK,-	; I/O status block
		P1 = (R6),-		; Buffer address
		P2 = R7,-		; Byte count
		P3 = R1			; LBN
	BLBC	R0,90$			; Error
	MOVZWL	IOSTBLK,R0		; Final status
	BLBC	R0,90$			; Error
	ADDL	R7,R6			; New buffer
	SOBGTR	R2,50$

90$:	POPR	#^M<R5,R6,R7>
	RSB

	.END	
