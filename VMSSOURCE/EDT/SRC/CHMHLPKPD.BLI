%TITLE 'EDT$CHMHLPKPD - keypad help'
MODULE EDT$CHMHLPKPD (				! Keypad help
		IDENT = 'V04-000'			! File: CHMHLPKPD.BLI Edit: JBS1020
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module handles keypad mode help.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: Unknown
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 04-Feb-1981.  This module was created by
!	extracting the routine EDT$$KPAD_HLP  from the module CHANGE.BLI.
! 1-002	- Regularize headers.  JBS 02-Mar-1981
! 1-003	- Use new message codes.  JBS 04-Aug-1981
! 1-004	- Add return values.  JBS 02-Oct-1981
! 1-005 - Revise the mapping of keys into help text. SMB 19-Nov-1981
! 1-006 - Add a message for no help on nondefinable key. SMB 20-Nov-1981
! 1-007	- Bypass EDT$$CHM_HLP by calling EDT$$OUT_HLP directly.  JBS 03-Jun-1982
! 1-008 - Send a shift in on exit from this module.  SMB 29-Jul-1982
! 1-009	- New implementation of defined keys.  JBS 13-Aug-1982
! 1-010	- Don't add K_GOLD_BASE to the key, just look it up.  JBS 16-Aug-1982
! 1-011	- Allow for 8-bit keyboards, and fix a bug in lower case conversion.  JBS 17-Aug-1982
! 1-012	- Add SS3, for 8-bit keyboards.  JBS 20-Aug-1982
! 1-013 - Send out the shift-in sequence dependant on terminal. STS 27-Aug-1982
! 1-014	- Change the call to erase the screen.  JBS 23-Oct-1982
! 1-015	- Make sure the cursor is positioned properly before erasing the screen.  JBS 01-Nov-1982
! 1-016	- On return, rebuild the screen data base.  JBS 01-Nov-1982
! 1-017	- Add conditional for VT220 support.  JBS 11-Feb-1983
! 1-018 - Take out unecessary calls to EDT$$OUT_FMTBUF.  SMB 23-Feb-1983
! 1-019	- Do the setting of the scrolling region for the keypad picture in code instead of in the help text.
!	   This way EDT does not lose track of the scrolling region.  JBS 22-Mar-1983
! 1-020	- Make sure we are in replace mode, so the help screen does not paint slowly.  JBS 21-Apr-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$KPAD_HLP;				! Keypad mode help processor

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

LIBRARY 'EDTSRC:KEYPADDEF';

LIBRARY 'EDTSRC:SUPPORTS';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

BIND
    SHIFT_IN_100 = UPLIT (%STRING (
	%CHAR (ASC_K_SI), 			! Shift in
	%CHAR (ASC_K_ESC), '[m')),		! Video attributes off
SHIFT_IN_52 = UPLIT (%STRING (
    	%CHAR (ASC_K_SI),			! shift in
    	%CHAR (ASC_K_ESC),'G'));

LITERAL
    SI_LEN_52 = 3,
    SI_LEN_100 = 4;

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$KPAD_HLP  - keypad help'

GLOBAL ROUTINE EDT$$KPAD_HLP 			! Keypad help
    =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine handles help while in keypad mode.  The help processor
!	is first called to put up the keypad diagram.  Then we go into a loop
!	accepting characters and, if they are definable keys, we give the help
!	message for the key.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$G_TI_TYP
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_SCR_CHGD
!	EDT$$G_CS_LNO
!	EDT$$G_SCR_REBUILD
!
! ROUTINE VALUE:
!
!	1 = ok, 0 = end of journal file
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$FMT_LIT,				! Format a literal
	EDT$$FMT_CRLF,				! Format a CRLF
	EDT$$OUT_FMTBUF,			! Dump the format buffer
	EDT$$OUT_HLP,				! Get help
	EDT$$TRN_KPADK,				! Translate an escape sequence
	EDT$$SC_POSABS : NOVALUE,		! Position the cursor
	EDT$$SC_ERAALL,				! Erase to end of screen
	EDT$$MSG_TOSTR,				! Get message text
	EDT$$TI_INPCH,				! Get a character of input
	EDT$$TST_BADK,				! Test for an undefinable key
	EDT$$SC_SETSCLLREG : NOVALUE,		! Set the scrolling region
	EDT$$SC_REP_MODE : NOVALUE;		! Make sure we are in replace (not insert) mode.

    EXTERNAL
	EDT$$G_TI_TYP,				! Terminal type.
	EDT$$G_SCR_CHGD,			! 1 = screen update must rebuild the screen

%IF SUPPORT_VT220
%THEN
	EDT$$B_CHAR_INFO : BLOCKVECTOR [256, 1, BYTE],	! Information about characters
%FI

	EDT$$G_CS_LNO,				! Line number to erase from
	EDT$$G_SCR_REBUILD,			! 1 = rebuild the screen data base
	EDT$$G_INSERT_MODE;			! 1 = screen is in insert mode

    MESSAGES ((TORETKEY, FORHLPANO, TOEXITHLP, KEYNOTDEF));

    LOCAL
	CURSOR_SAVED,
	HELP_STRING : BLOCK [CH$ALLOCATION (16)],
	CH,
	C;

!+
! Get the right terminal type.
!-

    IF (.EDT$$G_TI_TYP EQL TERM_VT100)		!
    THEN
	EDT$$CPY_MEM (15, UPLIT (%STRING ('KEYPAD VT100   ')), HELP_STRING)
    ELSE
	EDT$$CPY_MEM (15, UPLIT (%STRING ('KEYPAD VT52    ')), HELP_STRING);

!+
! Because EDT$$OUT_HLP prints a blank line before the text it finds, for the keypad
! diagram that text starts with a sequence to erase the whole screen and position the
! cursor to the upper left corner.  Therefore we need not do cursor positioning here.
! However, we do set the scrolling region to the full screen.
!-
    CURSOR_SAVED = .EDT$$G_CS_LNO;
    EDT$$G_CS_LNO = 0;
    EDT$$G_SCR_CHGD = 1;
    EDT$$SC_SETSCLLREG (0, 24);			! Full-screen scrolling region

    IF (.EDT$$G_INSERT_MODE NEQ 0) THEN EDT$$SC_REP_MODE ();	! Make sure we are in replace mode

!+
! Call help to get the keypad diagram.
!-
    EDT$$OUT_HLP (HELP_STRING, 12, 0);
!+
! Loop, displaying help on keypad keys.
!-

    WHILE 1 DO
	BEGIN
!+
! Send a precautionary shift-in plus turn video attributes off
! (mostly in case the person issues a CTRL-O).
!-

	IF (.EDT$$G_TI_TYP EQL TERM_VT100)	!
	THEN
	    EDT$$FMT_LIT (SHIFT_IN_100, SI_LEN_100)
	ELSE
	    EDT$$FMT_LIT (SHIFT_IN_52, SI_LEN_52);

!+
! Get next character.
!-

	IF (EDT$$TI_INPCH (C) EQL 0) THEN RETURN (0);

!+
! Convert lower case to upper.
!-

%IF SUPPORT_VT220
%THEN

	IF .EDT$$B_CHAR_INFO [.C, 0, 0, 1, 0] THEN C = .C - 32;

%ELSE

	IF ((.C GEQ %C'a') AND (.C LEQ %C'z')) THEN C = .C - %C'a' + %C'A';

%FI

!+
! Erase the screen.
!-
	EDT$$G_CS_LNO = 0;
	EDT$$G_SCR_CHGD = 1;
	EDT$$SC_POSABS (0, 0);
	EDT$$SC_ERAALL ();
!+
! When we return to change mode we must rebuild the screen and the screen data base.
!-
	EDT$$G_SCR_CHGD = 1;
	EDT$$G_SCR_REBUILD = 1;
	EDT$$G_CS_LNO = .CURSOR_SAVED;
!+
! If the character is a space, exit the loop
! and return to the original editing position.
!_

	IF (.C EQL ASC_K_SP) THEN EXITLOOP;

!+
! If the character is an escape, CSI or SS3, translate the escape or control sequence.
!-

%IF SUPPORT_VT220
%THEN

	IF ((.C EQL ASC_K_ESC) OR (.C EQL ASC_K_CSI) OR (.C EQL ASC_K_SS3)) THEN EDT$$TRN_KPADK (C);

%ELSE

	IF (.C EQL ASC_K_ESC) THEN EDT$$TRN_KPADK (C);

%FI

!+
! If the character is a carriage return, re-display the keypad diagram.
!-

	IF (.C EQL ASC_K_CR)
	THEN
	    EDT$$OUT_HLP (HELP_STRING, 12, 0)
	ELSE
	    BEGIN
!+
! Give a different message if the key is not definable.
!-

	    IF (EDT$$TST_BADK (.C) AND EDT$$TST_BADK (.C + K_GOLD_BASE))
	    THEN
		BEGIN
!+
! The key is not defineable; display a message but continue looping.
!-
		EDT$$MSG_TOSTR (EDT$_KEYNOTDEF);
		EDT$$FMT_CRLF ();
		END
	    ELSE
		BEGIN
!+
! Get the key number so we can create the topic (key number is 3 digits: 000-499)
!-
		CH$WCHAR (.C/100 + %C'0', CH$PTR (HELP_STRING, 13));
		CH = (.C MOD 100);
		CH$WCHAR (.CH/10 + %C'0', CH$PTR (HELP_STRING, 14));
		CH$WCHAR (.CH MOD 10 + %C'0', CH$PTR (HELP_STRING, 15));
!+
! Get the help text for the key.  The GOLD meaning of the key is included.
!-
		EDT$$OUT_HLP (HELP_STRING, 16, 0);
		END;

!+
! Output the help instructions.
!-
	    EDT$$FMT_CRLF ();
	    EDT$$MSG_TOSTR (EDT$_TORETKEY);
	    EDT$$FMT_CRLF ();
	    EDT$$MSG_TOSTR (EDT$_TOEXITHLP);
	    EDT$$FMT_CRLF ();
	    EDT$$MSG_TOSTR (EDT$_FORHLPANO);
	    EDT$$OUT_FMTBUF ();
	    END;

	END;

!+
! Again be sure we have the none video terminal attributes in case
! this module terminates abnormally.
!-

    IF (.EDT$$G_TI_TYP EQL TERM_VT100)		!
    THEN
	EDT$$FMT_LIT (SHIFT_IN_100, SI_LEN_100)
    ELSE
	EDT$$FMT_LIT (SHIFT_IN_52, SI_LEN_52);

    EDT$$OUT_FMTBUF ();
    RETURN (1);
    END;					! of routine EDT$$KPAD_HLP

!<BLF/PAGE>

END						! of module EDT$CHMHLPKPD

ELUDOM
