%TITLE 'NML initial message parsing module'
MODULE NML$PARINI (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains action routines called by NPARSE to process
!	NICE command messages from NCP.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  8-OCT-1979
!
! MODIFIED BY:
!
!	V03-012	MKP0012		Kathy Perko		23-July-1984
!		If area 0 is supplied in a node number, default to the
!		executor node area number.  This undoes the change dated
!		21-Mar-1984.
!
!	V03-011	MKP0011		Kathy Perko		18-April-1984
!		Get the executor ID from the volatile database on an as
!		needed basis, but only once per command (rather than reissuing
!		the QIO every time the exec ID is needed.)  Do it once per
!		command in case the command changes the name or address.
!
!	V03-010	MKP0010		Kathy Perko		21-Mar-1984
!		Add support for area 1 problem.  This involves changing area 0
!		to area 1 for Phase IV NCPs and to the exec area for Phase III
!		NCPs.  Also, disallow anything but SHOW and LIST from a Phase
!		III node.  If they try to do a SET NODE by node number, they'll
!		get area 1 instead of the exec's area - very confusing.
!
!	V03-009	MKP0009		Kathy Perko		6-Jan-1984
!		Add X25-Access Module entity.
!
!	V03-008	MKP0008		Kathy Perko		4-Aug-1983
!		Add support to make node permanent database faster.
!
!	V03-007	MKP0007		Kathy Perko		20-April-1983
!		Remove service functions from NML.
!
!	V03-006	MKP0006		Kathy Perko		17-Jan-1983
!		Add support for CONFIGURATOR module.
!
!	V03-005	MKP0005		Kathy Perko		14-Nov-1982
!		Add a routine to return success if the NICE message
!		function code is change.
!
!	V03-004	MKP0004		Kathy Perko		8-Nov-1982
!		Change NML$PRSID so that it will save a field using the
!		field length in the parsing tables.
!
!	V03-003	MKP0003		Kathy Perko		15-Oct-1982
!		Change the way NML$PRSID saves node numbers, logging
!		sinks, and link numbers so that they are a longword instead
!		of a word.
!
!	V03-002	MKP0002		Kathy Perko		17-June-1982
!		Add support for active X25-protocol networks.
!		Also, add a routine for parsing qualifiers and
!		change LINKS operations to use the node number or
!		name as a qualifier.
!
!	V03-001	MKP0001		Kathy Perko		16-June-1982
!		Add parsing routines for X25-Protocol Module and entity
!		qualfiers.
!
!	V02-003	MKP0002		Kathy Perko		23-Nov-1981
!		Delete NML validation of line and circuit IDs.  NETACP
!		will perform all validation.
!
!	V02-002	MKP0001		Kathy Perko		13-Nov-1981
!		Change name of routine that used to parse line ids
!		and now parses both line and circuit ids.  I.E. change
!		NML$PRSLINE to NML$PRSDEVICE.
!
!	V02-001	LMK0001		Len Kawell		27-Jul-1981
!		Remove QIO buffer initialization.
!--

%SBTTL 'Declarations';

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    nml$parse_init,
    nml$prsfnc,
    nml$prsopt,
    nml$prsop2,
    nml$prsinf,
    nml$prsent,
    nml$prsidleq,
    nml$prsqualleq,
    nml$prsid,
    nml$prsidn,
    nml$prsnodnam,
    nml$prs_node_num_entity,
    nml$prs_node_num,
    nml$prssnknna,
    nml$prssnknad,
    nml$prs_module,
    nml$prs_active_net,
    nml$prsexesnk,
    nml$prsdevice,
    nml$prslogsin,
    nml$prs_noread,
    nml$prserr1,
    nml$prsiderr;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! MACROS:
!

!
! Macro to return a byte complement of a value
! (Used to prevent byte initialization overflow)
!
MACRO
    not_byte (n) =
	((NOT (n)) AND %X'FF')
    %;

!
! EQUATED SYMBOLS:
!

LITERAL
    funcnt = 7;			! Total number of functions (Phase III only)
!
! Invalid option bit mask definitions
!
LITERAL
    rea_invob_msk = not_byte (nma$m_opt_ent OR
			      nma$m_opt_inf OR
			      nma$m_opt_per),

    cha_invob_msk = not_byte (nma$m_opt_ent OR
			      nma$m_opt_inf OR
			      nma$m_opt_per OR
			      nma$m_opt_cle),

    zer_invob_msk = not_byte (nma$m_opt_ent OR nma$m_opt_rea),

    loa_invob_msk = not_byte (nma$m_opt_ent),

    dum_invob_msk = not_byte (nma$m_opt_ent),

    tri_invob_msk = not_byte (nma$m_opt_ent),

    tes_invob_msk = not_byte (nma$m_opt_ent OR nma$m_opt_acc);

!
! OWN STORAGE:
!

!
! Table of invalid option bits for each function
!
BIND
    invopb_tab = UPLIT BYTE(
			    loa_invob_msk,
			    dum_invob_msk,
			    tri_invob_msk,
			    tes_invob_msk,
			    cha_invob_msk,
			    rea_invob_msk,
			    zer_invob_msk
			   ) : VECTOR [funcnt, BYTE];

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL
    nml$ab_npa_blk : $NPA_BLKDEF,
    nml$gb_ncp_version: BBLOCK,
    nml$gw_perm_exec_addr: WORD,
    nml$gw_vol_exec_addr: WORD,
    nml$gq_perm_exec_name_dsc: VECTOR,
    nml$gq_vol_exec_name_dsc: VECTOR,
    nml$npa_init;

EXTERNAL ROUTINE
    nma$nparse,
    nml$chkexe,
    nml$error_1,
    nml$error_2,
    nml$fix_node_num,
    nml$getexeadr,
    nml$getexenam,
    nml$getnodadr,
    nml$openfile,
    nml$set_up_exec_id;

%SBTTL 'NML$PARSE_INIT  Initial message parsing routine'
GLOBAL ROUTINE NML$PARSE_INIT =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine invokes the NPARSE facility to check the funcition,
!	option, and entity codes in a received NICE protocol function.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_FUNCTION contains the function code.
!	NML$GB_OPTIONS contains the option codes.
!	NML$GB_INFO contains the information code if the function is read.
!	NML$GL_ENTCODE contains the entity code.
!	NML$AB_NPA_BLK contains parsing information about the remainder of the
!		message.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the parse fails then the NML status code is returned as specified in
!	the parse state table otherwise NML$_STS_SUC is returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

LOCAL
    STATUS;				! Temporary status
!
! Initialize message parsing data
!
nml$gl_prmcode   = 0;		! Parameter code
nml$gl_prs_flgs  = 0;		! Parsing flags
nml$gw_prmdescnt = 0;		! Parameter descriptor count
nml$gl_nml_entity = 0;		! NML's internal code for the entity.
nml$gw_vol_exec_addr = 0;	! Get executor name and address from volatile
nml$gq_vol_exec_name_dsc [0] = 0;! db at most once for each NICE command.
nml$gw_perm_exec_addr = 0;	! Get executor name and address from perm
nml$gq_perm_exec_name_dsc [0] = 0;! db at most once for each NICE command.
!
! Call the NPARSE facility to parse function, option, and entity
!
nml$ab_npa_blk [npa$l_msgptr] = nml$ab_rcvbuffer;  ! Add buffer address and
nml$ab_npa_blk [npa$l_msgcnt] = .nml$gl_rcvdatlen; !  length NPARSE arguments

status = nma$nparse (nml$ab_npa_blk,
			 nml$npa_init);	! Use Phase III state table
RETURN .status

END;				! End of NML$PARSE_INIT

%SBTTL 'NML$PRSFNC  Store function code (action routine)'
GLOBAL ROUTINE NML$PRSFNC =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Parse and store the function code from the NICE command message.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_FUNCTION contains the function code.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	If Phase III NCP and not a read function, returns NML$_STS_FUN.
!	Otherwise, returns success (NML$_STS_SUC) 
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

nml$gb_function = .nparse_block [npa$b_byte]; ! Set function
RETURN nml$_sts_suc

END;				! End of NML$PRSFNC

%SBTTL 'NML$PRSOPT  Check and store option byte (action routine)'
GLOBAL ROUTINE NML$PRSOPT =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Parse and store the options byte from the NICE command message.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_OPTIONS contains the option byte.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

LOCAL
    invbits   : BYTE,		! Invalid option bit temporary
    tab_index : SIGNED BYTE,	! Invalid bit mask table index
    addr,
    status;
!
! Check NICE message options
!
nml$gb_options = .nparse_block [npa$b_byte]; ! Save entire option byte
tab_index = .nml$gb_function;	! Get function code for table index
tab_index = .tab_index - 15;	! Normalize the table index

IF (.tab_index GEQ 0)
   AND (.tab_index LSS funcnt) THEN	! Range check
    BEGIN
    invbits = .invopb_tab [.tab_index] AND .nml$gb_options; ! Mask
    IF .invbits EQLU 0 THEN
	status = nml$_sts_suc		! No invalid bits
    ELSE
	status = nml$_sts_fun		! Unrecognized option
    END
ELSE
    status = nml$_sts_mpr;		! State table error
!
! Most NCP commands need the executor node's address and/or name at some
! point.  Therefore, get it now, and set up globals containing either the
! volatile or the permanent database executor address.
!
IF .status THEN
    nml$set_up_exec_id (addr);
RETURN .status;
END;				! End of NML$PRSOPT

%SBTTL 'NML$PRSOP2  Store Phase II option code (action routine)'
GLOBAL ROUTINE NML$PRSOP2 =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Parse and store the options byte from the Phase II NICE command 
!	message.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_OPTIONS contains the option byte.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference
!
! Save Phase II NICE message option code
!
nml$gb_options = .nparse_block [npa$b_byte];

RETURN nml$_sts_suc

END;				! End of NML$PRSOP2

%SBTTL 'NML$PRSINF  Store information type code (action routine)'
GLOBAL ROUTINE NML$PRSINF =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is a NPARSE action routine that sets the
!	information code if the function is read information.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$B_BYTE] contains the information code.
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_INFO contains the information type code.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success (NML$_STS_SUC) is always returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference
!
! Save the information code from the NPARSE argument block
!
nml$gb_info = .nparse_block [npa$b_byte];

RETURN nml$_sts_suc

END;				! End of NML$PRSINF

%SBTTL 'NML$PRSENT  Store entity type code (action routine)'
GLOBAL ROUTINE NML$PRSENT =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is a NPARSE action routine that sets the
!	enitity code.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$B_BYTE] contains the entity code.
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_ENTITY_CODE contains the entity code.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success (NML$_STS_SUC) is always returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference
!
! Save the entity code from the NPARSE argument block
!
nml$gb_entity_code = .nparse_block [npa$b_byte];
RETURN nml$_sts_suc

END;				! End of NML$PRSENT


%SBTTL 'NML$PRSIDLEQ  Store entity format code if plural entity'
GLOBAL ROUTINE NML$PRSIDLEQ =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an action routine called while parsing a NICE command.  It
!	saves the entity format code if it is plural (KNOWN, ACTIVE, ADJACENT,
!	etc.)
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] points to the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	The main entity format code is saved in NML$GB_ENTITY_FORMAT.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success (NML$_STS_SUC) is returned if code specifies a plural
!	entity.  If the entity format byte specifies a single entity,
!	unrecognized component error (NML$_STS_CMP) is returned.
!
! SIDE EFFECTS:
!
!	NPARSE state table transition is rejected if error is returned.
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

LOCAL
    temp : SIGNED BYTE;		! Temporary format code storage

temp = .(.nparse_block [npa$l_fldptr])<0,8>; ! Get entity format code

!
! If the entity format byte is less than zero, then the NICE
! command specifies a plural entity.
!
IF .temp LEQ 0 THEN
    BEGIN
    nml$gb_entity_format = .temp;		! Save format code
    RETURN nml$_sts_suc
    END
ELSE
    RETURN nml$_sts_cmp		! Return "single entity" completion.

END;				! End of NML$PRSIDLEQ


%SBTTL 'NML$PRSQUALLEQ  Store entity format code if plural entity'
GLOBAL ROUTINE NML$PRSQUALLEQ =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an action routine called while parsing a NICE command with
!	an entity qualifier.  It saves the qualifier's format code if it
!	is plural (KNOWN, ACTIVE, ADJACENT, etc.)
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] points to the qualifier format code.
!
! IMPLICIT OUTPUTS:
!
!	The qualifier format code is saved in NML$GB_QUALIFIER_FORMAT.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success (NML$_STS_SUC) is returned if code specifies a plural
!	qualifier.  If the qualifier format byte specifies a single entity,
!	unrecognized component error (NML$_STS_CMP) is returned.
!
! SIDE EFFECTS:
!	NPARSE state table transition is rejected if error is returned.
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

LOCAL
    temp : SIGNED BYTE;		! Temporary format code storage

temp = .(.nparse_block [npa$l_fldptr])<0,8>; ! Get entity format code

!
! If the qualifier format byte is less than zero, then the NICE
! command specifies a plural entity.  Note that a KNOWN qualifier
! is the same thing as no qualifier at all.
!
IF .temp LEQ 0 THEN
    BEGIN
    nml$gb_qualifier_format = .temp;	! Save format code
    RETURN nml$_sts_suc;
    END
ELSE
    RETURN nml$_sts_cmp;		! Return "single entity" completion.

END;				! End of NML$PRSQUALLEQ


%SBTTL 'NML$PRSID  Store entity format code and id (action routine)'
GLOBAL ROUTINE NML$PRSID =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that stores the entity format code
!	a specified number of bytes of entity id or qualifier id.
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] points to entity format and id.
!	NPARSE_BLOCK [NPA$L_FLDCNT] contains length.
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!	NML$AB_ENTITY_ID contains the entity id string.
!			or
!	NML$GB_QUALIFIER_FORMAT contains the entity qualifier's format code.
!	NML$AB_QUALIFIER_ID contains the entity qualifier's id string.
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

LOCAL
    count : SIGNED,
    cpt_index,
    cpt_entry : REF BBLOCK,
    iptr,
    optr;

count = .nparse_block [npa$l_fldcnt] - 1;	! Get field count less format code
iptr = .nparse_block [npa$l_fldptr]; 	! Get input field pointer

!
! If parsing a qualifier, save the format and compute the address of the
! Parameter Semantic Table (PST) entry for the qualifier (the CPT index
! for the parameter is put in the NPARSE block parameter by the parsing
! tables).
!
IF .nml$gl_prs_flgs [nml$v_prs_qualifier] THEN
    BEGIN
    optr = nml$ab_qualifier_id;
    nml$gb_qualifier_format = CH$RCHAR_A (iptr);	! Store format code
    cpt_index = .nparse_block [npa$l_param];
    cpt_entry = nml$ab_cptable [.cpt_index, 0, 0, 0, 0];
    nml$gl_qualifier_pst =
		nml$ab_prmsem [.cpt_entry [cpt$w_pstindex], 0, 0, 0, 0];
    END
ELSE
    BEGIN
    optr = nml$ab_entity_id;			! Get pointer to entity storage
    nml$gb_entity_format = CH$RCHAR_A (iptr);	! Store format code
    END;

IF .count GTR 0 THEN
    CH$COPY (.count, .iptr, 0, 4, .optr);	! Move entity ID, making it
						!	a longword.
RETURN nml$_sts_suc

END;				! End of NML$PRSID


%SBTTL 'NML$PRSIDN  Store singular entity length and name (action routine)'
GLOBAL ROUTINE NML$PRSIDN =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an action routine called while parsing a NICE command if the
!	command specifies a singular entity (e.g. LINE DMC-0).  It saves
!	the entity length (in entity format code field) and the number of
!	bytes of entity id (up to 16).
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] contains the pointer to the entity
!	    format code and id string.
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!	NML$AB_ENTITY_ID contains the entity id string.
!		or
!	NML$GB_QUALIFIER_FORMAT contains the entity qualifier's length.
!	NML$AB_QUALIFIER_ID contains the entity qualifier's id string.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NML$_STS_SUC
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

LOCAL
    cpt_index,
    cpt_entry : REF BBLOCK,
    iptr,
    optr,
    length;

iptr = .nparse_block [npa$l_fldptr]; 	! Get input field pointer
length = ch$rchar_a (iptr);		! Save entity length
!
! Some NICE commands specify qualifiers to the entity.  Save the qualifier
! format separately from the main entity's.  Also, use the NPARSE block
! parameter, which was set to the parameter's CPT index by the parsing
! table, to compute the parameter's Parameter Semantic Table (PST) entry
! address.
!
IF .nml$gl_prs_flgs [nml$v_prs_qualifier] THEN
    BEGIN
    nml$gb_qualifier_format = .length;
    optr = nml$ab_qualifier_id;
    cpt_index = .nparse_block [npa$l_param];
    cpt_entry = nml$ab_cptable [.cpt_index, 0, 0, 0, 0];
    nml$gl_qualifier_pst =
		nml$ab_prmsem [.cpt_entry [cpt$w_pstindex], 0, 0, 0, 0];
    END
ELSE
    BEGIN
    nml$gb_entity_format = .length;	! Save format code
    optr = nml$ab_entity_id;		! Get entity id storage pointer
    END;
CH$MOVE (.length,
	.iptr,
	.optr);				! Move entity id

RETURN nml$_sts_suc

END;				! End of NML$PRSIDN

%SBTTL 'NML$PRSNODNAM  Check node name against executor (action routine)'
GLOBAL ROUTINE NML$PRSNODNAM =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action that checks the node name against the
!	the name of the executor node name.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] contains the pointer to the entity
!	    format code and id string.
!	NML$GL_PRS_FLGS contains the current message parsing flag information.
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!	NML$AB_ENTITY_ID contains the entity id string.
!	NML$GL_NML_ENTITY is set to NML$C_EXECUTOR if this is the executor
!	node.
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

BUILTIN
    CALLG;

MAP
    nml$gb_options : BBLOCK [1];

LOCAL
    namptr,
    namlen,
    exenambuf : VECTOR [6, BYTE],
    exenamdsc : DESCRIPTOR,
    exenamlen,
    status;

exenamdsc [dsc$w_length] = 6;
exenamdsc [dsc$a_pointer] = exenambuf;

namptr = .nparse_block [npa$l_fldptr] + 1;
namlen = .nparse_block [npa$l_fldcnt] - 1;
!
! If the node name in the NICE command matches the executor node name
! then set the internal NML entity type to executor.
!
IF nml$chkexe (nma$c_pcno_nna, 0, .namlen, .namptr) THEN
    nml$gl_nml_entity = nml$c_executor;
!
! Parse the node id normally.
!
CALLG (.nparse_block, nml$prsidn);
RETURN nml$_sts_suc

END;				! End of nml$prsnodnam

%SBTTL 'NML$PRS_NODE_NUM_ENTITY  Check node address against executor (action routine)'
GLOBAL ROUTINE NML$PRS_NODE_NUM_ENTITY =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action that checks the node address against the
!	node address of the executor node and then stores it.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] contains the pointer to the entity
!	    format code and id string.
!	NML$GL_PRS_FLGS contains the current message parsing flag information.
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!	NML$AB_ENTITY_ID contains the entity id string.
!	NML$GL_NML_ENTITY is set to NML$C_EXECUTOR if this is the executor
!	node.
!
!--

BEGIN

$npa_argdef;			! Define NPARSE block reference

BUILTIN
    CALLG;

MAP
    nml$gb_options : BBLOCK [1];

BIND
    addr = (.nparse_block [npa$l_fldptr]+1)<0,16> : BBLOCK [2];

nml$fix_node_num (addr);
!
! If the node address in the NICE command matches the executor node
! address then set the flag to indicate it.
!
IF nml$chkexe (nma$c_pcno_add, .addr, 0, 0) THEN
    nml$gl_nml_entity = nml$c_executor;
!
! Parse the node id normally.
!
CALLG (.nparse_block, nml$prsid);
RETURN nml$_sts_suc

END;				! End of NML$PRS_NODE_NUM_ENTITY

%SBTTL 'NML$PRS_NODE_NUM 	Check node address (action routine)'
GLOBAL ROUTINE NML$PRS_NODE_NUM =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action that checks a node address parameter
!	and fixes up the area number (if necessary) and then stores it.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] contains the pointer to the entity
!	    format code and id string.
!	NML$GL_PRS_FLGS contains the current message parsing flag information.
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!	NML$AB_ENTITY_ID contains the entity id string.
!	NML$GL_NML_ENTITY is set to NML$C_EXECUTOR if this is the executor
!	node.
!
!--

BEGIN

$npa_argdef;			! Define NPARSE block reference

BUILTIN
    CALLG;

BIND
    addr = (.nparse_block [npa$l_fldptr]+1)<0,16> : BBLOCK [2];
!
! Parse the node id normally.
!
nml$fix_node_num (addr);
CALLG (.nparse_block, nml$prsid);
RETURN nml$_sts_suc

END;				! End of NML$PRS_NODE_NUM

%SBTTL 'NML$PRS_MODULE	Check for specified module'
GLOBAL ROUTINE NML$PRS_MODULE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine is called during parsing of the module entity id in
!	a NICE message.  It's function is to determine the NML internal
!	entity code from the module string.  It also saves the module
!	id in NML$AB_ENTITY_ID.
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!	    NPA$L_PARAM is the module type to check for.
!	NML$GL_PRS_FLGS contains the current message parsing flag information.
!
! IMPLICIT OUTPUTS:
!	NML$GL_NML_ENTITY = the internal NML entity ID of the module.
!	NML$AB_ENTITY_ID = the module id string
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NML$_STS_SUC - the module string corresponds to the one the parsing
!		tables currently seek.
!	failure - the module string doesn't correspond to the internal
!		entity code passed by the parsing tables.
!
!--

BEGIN

$NPA_ARGDEF;

BUILTIN
    CALLG;

LOCAL
    iptr,
    length,
    status;

status = 0;
iptr = .nparse_block [npa$l_fldptr];
length = ch$rchar_a (iptr);		! Save entity length
SELECTONEU .nparse_block [npa$l_param] OF
    SET
    [nml$c_x25_access]:
	status = CH$EQL (.length,
			.iptr,
			10,
			UPLIT (%ASCII 'X25-ACCESS'));
    [nml$c_protocol]:
	status = CH$EQL (.length,
			.iptr,
			12,
			UPLIT (%ASCII 'X25-PROTOCOL'));
     [nml$c_x25_serv]:
	status = CH$EQL (.length,
			.iptr,
			10,
			UPLIT (%ASCII 'X25-SERVER'));
     [nml$c_trace]:
	status = CH$EQL (.length,
			.iptr,
			9,
			UPLIT (%ASCII 'X25-TRACE'));
     [nml$c_x29_serv]:
	status = CH$EQL (.length,
			.iptr,
			10,
			UPLIT (%ASCII 'X29-SERVER'));
     [nml$c_ni_config]:
	BEGIN
	status = CH$EQL (.length,
			.iptr,
			12,
			UPLIT (%ASCII 'CONFIGURATOR'));
	END;
    TES;
!
! If the parse tables are checking for the module type in the NICE
! message, save the module name.
!
IF .status THEN
    CALLG (.nparse_block, nml$prsidn);
RETURN .status;
END;				! End of NML$PRS_MODULE

%SBTTL 'NML$PRS_ACTIVE_NET  Store network format code and id (action routine)'
GLOBAL ROUTINE NML$PRS_ACTIVE_NET  =

!++
! FUNCTIONAL DESCRIPTION:
!	This is a NPARSE action routine that is called when parsing a NICE
!	command with an X25-Protocol network entity.  It saves a default
!	network entity of "active network".  This is here in anticipation
!	of multinetwork support.
!
! IMPLICIT OUTPUTS:
!
!	NML$GB_ENTITY_FORMAT contains NMA$C_ENT_ACT (active).
!--

BEGIN

!
! Use a zero length string to indicate "Active network".
!
nml$gb_entity_format = 0;
nml$ab_entity_id = 0;

RETURN nml$_sts_suc

END;				! End of NML$PRS_ACTIVE_NET

%SBTTL 'NML$PRSSNKNNA  Parse sink node name'
GLOBAL ROUTINE NML$PRSSNKNNA =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action that parses the sink node name.
!	The corresponding address is retrieved and saved for use.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] contains the address of the node name.
!	NPARSE_BLOCK [NPA$L_FLDCNT] contains the length of the counted node
!		name string (including the count byte).
!	NML$GL_PRS_FLGS contains the current message parsing flag information.
!
! IMPLICIT OUTPUTS:
!
!	NML$GL_PRS_FLGS [NML$V_PRS_EXESNK] is set if this is the executor
!	node.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

MAP
    nml$gb_options	: BBLOCK [1];

LOCAL
    addr : WORD,
    namptr,
    namlen;

!
! Open the node data base file (in case it's a permanent operation).
!
IF .nml$gb_options [nma$v_opt_per] THEN
    nml$openfile (nma$c_opn_node, nma$c_opn_ac_ro);
!
! Save the event sink node address.
!
namptr = .nparse_block [npa$l_fldptr] + 1;
namlen = .nparse_block [npa$l_fldcnt] - 1;

IF nml$getnodadr (.namlen, .namptr, addr) THEN
    nml$gw_evtsnkadr = .addr
ELSE
    nml$error_2 (nma$c_sts_ide, nma$c_ent_nod);
!
! If the address matches the executor node address then set the flag
! to indicate the executor sink node.
!
IF nml$chkexe (nma$c_pcno_add, .addr, 0, 0) THEN
    nml$gl_prs_flgs [nml$v_prs_exesnk] = 1;
RETURN nml$_sts_suc
END;				! End of NML$PRSSNKNNA

%SBTTL 'NML$PRSSNKNAD  Parse sink node address'
GLOBAL ROUTINE NML$PRSSNKNAD =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that stores the sink node address.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] points to the node address.
!	NPARSE_BLOCK [NPA$L_FLDCNT] contains the count of the address plus
!		the NMA$C_ENT_ADD byte.
!	NML$GL_PRS_FLGS contains the current message parsing flag information.
!
! IMPLICIT OUTPUTS:
!
!	NML$GL_PRS_FLGS [NML$V_PRS_EXESNK] is set if this is the executor node.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

MAP
    nml$gb_options	: BBLOCK [1];

BUILTIN
    CALLG;

BIND
    addr = (.nparse_block [npa$l_fldptr]+1)<0,16>;

!
! Open the node data base file (in case it's a permanent operation.
!
IF .nml$gb_options [nma$v_opt_per] THEN
    nml$openfile (nma$c_opn_node, nma$c_opn_ac_ro);
!
! If the address is zero then get the real executor node address and
! set the flag indicating the executor sink node.
!
IF .addr EQLU 0 THEN
    BEGIN
    nml$getexeadr (addr);
    nml$gl_prs_flgs [nml$v_prs_exesnk] = 1;
    END
ELSE
    BEGIN
    !
    ! If the node address has an area number of 0, fix it up to something
    ! meaningful.
    !
    nml$fix_node_num (addr);
    !
    ! If the address matches the executor node address then set the flag
    ! to indicate the executor sink node.
    !
    IF nml$chkexe (nma$c_pcno_add, .addr, 0, 0) THEN
	nml$gl_prs_flgs [nml$v_prs_exesnk] = 1;
    END;

nml$gw_evtsnkadr = .addr;
RETURN nml$_sts_suc
END;				! End of NML$PRSSNKNAD

%SBTTL 'NML$PRSEXESNK  Get event sink executor node address'
GLOBAL ROUTINE NML$PRSEXESNK =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called while parsing a NICE message logging entity.
!	It sets up the default sink node as the executor node if no sink
!	node was specified explicitly.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!	NML$GL_PRS_FLGS contains the current message parsing flag information.
!
! IMPLICIT OUTPUTS:
!
!	NML$GL_PRS_FLGS [NML$V_PRS_SNKNOD] is set if it was not previously
!	    set.
!	NML$GL_PRS_FLGS [NML$V_PRS_EXESNK] is set if the executor node 
!	    address was found in the data base and a sink node had not been
!	    previously specified.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

$NPA_ARGDEF;

MAP
    nml$gb_options	: BBLOCK [1];

LOCAL
    addr : WORD;
!
! If no sink node has been specified then the executor node is intended.
!
IF NOT .nml$gl_prs_flgs [nml$v_prs_snknod] THEN
    BEGIN
    !
    ! Open node file if it's a permanent data base operation.
    !
    IF .nml$gb_options [nma$v_opt_per] THEN
	nml$openfile (nma$c_opn_node, nma$c_opn_ac_ro);
    !
    ! Get the executor node address.  If none is specified, use address 0.
    !
    IF nml$getexeadr (addr) THEN
	nml$gw_evtsnkadr = .addr
    ELSE
	nml$gw_evtsnkadr = 0;
    nml$gl_prs_flgs [nml$v_prs_snknod] = 1;
    nml$gl_prs_flgs [nml$v_prs_exesnk] = 1;
    END;
RETURN nml$_sts_suc

END;				! End of NML$PRSEXESNK

%SBTTL 'NML$PRSDEVICE  Check device id (action routine)'
GLOBAL ROUTINE NML$PRSDEVICE =

!++
! FUNCTIONAL DESCRIPTION:
!	This is an NPARSE action that saves line and circuit IDs.  This
!	a separate routine so that wildcarding can be added later.
!
! IMPLICIT INPUTS:
!	NPARSE_BLOCK [NPA$L_FLDPTR] contains the pointer to the entity
!	    format code and id string.
!
! IMPLICIT OUTPUTS:
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!	NML$AB_ENTITY_ID contains the entity id string.
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

BUILTIN
	CALLG;

LOCAL
	length,
	addr;

length = .nparse_block [npa$l_fldcnt] - 1; ! Get length not including count
addr = .nparse_block [npa$l_fldptr] + 1;   ! Get address of byte after count

!*************************************************
!* Wild cards are not currently allowed in line
!* specifications.

IF CH$FIND_CH (.length, .addr, %C'*') THEN
	BEGIN
!	nml$gl_prs_flgs = .nml$gl_prs_flgs AND lin$m_wildcards;
	RETURN nml$_sts_ide;
	END;

!*
!*
!**************************************************

CALLG (.nparse_block, nml$prsidn); ! Save line entity id and format
RETURN nml$_sts_suc;
END;				! End of NML$PRSDEVICE

%SBTTL 'NML$PRSLOGSIN  Logging sink node check (action routine)'
GLOBAL ROUTINE NML$PRSLOGSIN =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the function code
!	for a read function.  If the function is read then failure is
!	returned to indicate that a sink node id must be parsed.
!	If function is not read then success is returned.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$GB_FUNCTION contains the function code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Success (NML$_STS_SUC) is returned if the funtion is not read.
!	Otherwise, failure (NML$_STS_MPR) is indicated.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

IF .nml$gb_function NEQU nma$c_fnc_rea THEN
    RETURN nml$_sts_suc
ELSE
    RETURN nml$_sts_mpr;

END;				! End of NML$PRSLOGSIN

%SBTTL 'NML$PRS_NOREAD Check function code (action routine)'
GLOBAL ROUTINE NML$PRS_NOREAD =

!++
! FUNCTIONAL DESCRIPTION:
!	Check the saved function code and return success if it's
!	not "read"
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Returns success (NML$_STS_SUC) if the function code is "read".
!	Otherwise it returns NML$_STS_CMP.
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

IF .nml$gb_function EQL nma$c_fnc_rea THEN
    RETURN nml$_sts_cmp
ELSE
    RETURN nml$_sts_suc;
END;				! End of NML$PRS_NOREAD

%SBTTL 'NML$PRSERR1  Error parsing message (action routine)'
GLOBAL ROUTINE NML$PRSERR1 =

!++
! FUNCTIONAL DESCRIPTION:
!
!    This routine causes an error message to be signalled with the status
!    code specified in the NPARSE block (NPA$L_PARAM).
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	An error message is signalled.
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

nml$error_1 (.nparse_block [npa$l_param]); ! Signal message

RETURN nml$_sts_suc

END;				! End of NML$PRSERR1

%SBTTL 'NML$PRSIDERR  Error parsing entity id (action routine)'
GLOBAL ROUTINE NML$PRSIDERR =

!++
! FUNCTIONAL DESCRIPTION:
!
!    This routine causes an entity id error message to be signalled
!    with the detail code specified in the NPARSE block (NPA$L_PARAM).
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

nml$error_2 (nma$c_sts_ide,
	     .nparse_block [npa$l_param]); ! Signal message

RETURN nml$_sts_suc

END;				! End of NML$PRSERR1

END					! End of module

ELUDOM
