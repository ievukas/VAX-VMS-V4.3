	$BEGIN	RMS0ERASE,000,RM$RMS,<DELETE FILE OPERATION>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility: rms32
;
; Abstract:
;		this routine is the highest level control
;		routine to perform the $erase function.
;
; Environment:
;		star processor running starlet exec.
;
; Author:	L F Laverdure,	 creation date: 27-SEP-1977
;
; Modified By:
;
;	V03-006	JEJ0041		J E Johnson		20-Jun-1984
;		Don't map errors from network deletes (NT$ERASE) as
;		they have already been processed.
;
;	V03-005	RAS0239		Ron Schaefer		20-Jan-1984
;		Don't RM$MAPERR errors from RM$ASSIGN or RM$SETDID
;		as they have already been mapped if possible.
;		Fixup to RAS0224.
;
;	V03-004	RAS0224		Ron Schaefer		19-Dec-1983
;		Clean up search list implementation (KBT0539),
;		by basically backing it out.  It is inappropriate
;		to look all thru the list for a file to delete.
;
;	V03-003	KBT0539		Keith B. Thompson	7-Jun-1983
;		Add search list support
;
;	V03-002	KBT0518		Keith B. Thompson	23-May-1983
;		RM$XPFN moved so ref to it changed to JSB
;
;	V03-001	KBT0180		Keith B. Thompson	23-Aug-1982
;		Reorganize psects and rename entry point to single '$'
;
;	V02-007	MCN0001		Maria del C. Nasr	29-Jul-1981
;		Rename entry point to RMS$$ to support long branches.
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IFBDEF
	$DEVDEF
	$NAMDEF
	$FWADEF
	$FIBDEF
	$IODEF
	$RMSDEF

;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RMS$ERASE - ERASE FILENAME STRING ROUTINE

;++
;
; RMS$ERASE
;
;	The filename, issues the acp qio function to delete the file, and
;	then deletes the ifab.
;
; Calling sequence:
;
;	Entered from exec as a result of user's calling sys$erase
;
; Input Parameters:
;
;	ap	user's argument list addr
;
; Implicit Inputs:
;
;	The contents of the fab (fna, fns, dna, dns) and related nam block.
;
; Output Parameters:
;
;	r1	destroyed
;	r0	status code
;
; Implicit Outputs:
;
;	The sts and stv fields of the fab are output along with the
;	various fields of the nam block (dvi, fid, did, esl and the buffer at esa,
;	 rsl and the buffer at rsa)
;	 to reflect the status of the $erase operation. (see rms functional
; 	spec for a complete list.)
;
;	A completion ast is queued if specified in the user arglist.
;
; Completion Codes:
;
;	Standard rms (see functional spec for list).
;
; Side Effects:
;	none
;
;--

	$ENTRY	RMS$ERASE
	$TSTPT	ERASE
	BSBW	RM$FSETI			; create an ifab
						; does not return on error
	JSB	RM$XPFN				; expand file name
	BLBC	R0,CLEANUP			; continue if ok

;
; We parse a file name ok
;

	TSTB	FWA$B_ESCFLG(R10)		; ppf indicated?
	BNEQ	ERRIOP				; branch if yes
	BBS	#FWA$V_WILDCARD,(R10),ERRWLD	; branch if wild card seen
	BSBW	RM$ASSIGN			; assign channnel to device
	BLBC	R0,CLEANUP			; failure
	BBS	#IFB$V_DAP,(R9),NTERASE		; branch if network file oper
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R9),-	; branch if not disk
		ERRIOP
	BSBW	RM$SETDID			; lookup the directory name
	BLBC	R0,CLEANUP			; failure

;
; The assign and set did succeded
;
; Note: R7 set to NAM blk addr
;

60$:	TSTL	FIB$W_DID+FWA$T_FIBBUF(R10)	; did specified?
	BNEQ	DELETE				; branch if yes (implies fid=0)
	TSTL	FIB$W_FID+FWA$T_FIBBUF(R10)	; fid specified?
	BEQL	ERRBUG				; branch if none

;
;  since fid is set, there must be a nam blk.  set did from the nam blk.
;

	MOVW	NAM$W_DID(R7),-
		FIB$W_DID_NUM+FWA$T_FIBBUF(R10)
	BEQL	DELETE				; branch if none
	MOVL	NAM$W_DID_SEQ(R7),-
		FIB$W_DID_SEQ+FWA$T_FIBBUF(R10)
	SSB	#FIB$V_FINDFID,-		; flag find by file id
		FIB$W_NMCTL+FWA$T_FIBBUF(R10)

;
;  set up the qio parameters and issue the delete qio
;

DELETE:	CLRQ	-(SP)				; p6=p5=0
	BSBW	RM$FCP_P4_P2			; build p4 thru p2

;
; (resultant name, name string)
;

	MOVZWL	#IO$_DELETE!IO$M_DELETE,R0	; function code
	BSBW	RM$FCPFNC			; do the delete
	BLBC	R0,ERRDLT			; branch on error
FILNAM:	BSBW	RM$FILLNAM			; fill in nam blk, if any

CLEANUP:
	BRW	RM$CLSCU			; all done - evaporate ifab

;++
;
;  process errors
;
;--

ERRWLD:
	RMSERR	WLD
	BRB	CLEANUP

ERRIOP:
	RMSERR	IOP
	BRB	CLEANUP

ERRDLT:
	RMSERR	MKD,R1
	BSBW	RM$MAPERR
	BRB	CLEANUP

;
; Bad one!
;

ERRBUG:	RMSTBUG	FTL$_NODIDORFID			; no did or fid

;++
;
;  process network erase function
;
;--

NTERASE:
	BSBW	NT$ACCESS			; establish logical link with fal
	BLBC	R0,ERRDLT			; branch on failure
	BSBW	NT$ERASE			; erase file at remote node
	BLBS	R0,FILNAM			; fill in nam blk, if any
	BRB	CLEANUP				; otherwise report the error.

	.END
