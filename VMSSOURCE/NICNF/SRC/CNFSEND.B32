%TITLE	'DECnet Ethernet Configurator Module'
MODULE CNFSEND		(
			LANGUAGE (BLISS32),
			IDENT = 'V04-000'
			) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DECnet Configurator Module (NICONFIG)
!
! ABSTRACT:
!
!	This module contains the routines to buffer and send NICE
!	response messages to the processes which interrupt with requests.
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Bob Grosso, 	CREATION DATE:  18-Jan-1982
!
! MODIFIED BY:
!
!--

%SBTTL	'Definitions'

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:STARLET';		! VMS common definitions

REQUIRE 'LIB$:CNFDEF.R32';

REQUIRE 'SRC$:CNFPREFIX.REQ';
    

!
! BUILTIN functions
!

BUILTIN
    INSQUE,				! INSQUE instruction
    REMQUE;				! REMQUE instruction

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE

	CNF$BUFR_NICE_MSG,		! Buffer NICE messages into IRB
	CNF$SEND_NICE_MSG;		! Send the NICE message stored in IRB

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE

!    Module CNFMAIN

	CNF$TRACE,			! Log messages to log file
	CNF$LOG_DATA,			! Log formatted data to log file
	CNF$GET_ZVM,			! Get zeroed virtual memory
	CNF$FREE_VM,			! Free virtual memory

!    Module CNFINTRPT

	CNF$CLOSE_REQUEST_LINK,		! After an unsuccessful IO shut down the link and deallocate control block (IRB)
	CNF$SOLICIT_REQUEST,

!    Module CNFWORKQ

	WKQ$ADD_WORK_ITEM;		! Add work to work queue


EXTERNAL LITERAL

	CNF$_LINK,			! Error on logical link

	CNF$C_ASYNCH_EFN;


EXTERNAL

	CNF$GL_LOGMASK : BITVECTOR [32];


%SBTTL	'CNF$BUFR_NICE_MSG  Buffer the response message'
GLOBAL ROUTINE CNF$BUFR_NICE_MSG (IRB, MSG, DEALLOCATE_LEN) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!  Place the NICE message onto a linked list of messages stored
!  in the IRB for later transmission to the connectee.
!
! FORMAL PARAMETERS:
!
!	irb		Interrupt Request Block, contains context for
!			I/O with connectee.
!
!	msg		address of buffer containing NICE message to be
!			stored in the IRB.
!
!	deallocate_len	Length of message to be deallocated after transmission.
!			Some messages are stored in buffers allocated in VM
!			and must be deallocated after transmission.  Others
!			reside on the stack or in OWN storage and shouldn't
!			be deallocated.
!
! IMPLICIT INPUTS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Success
!
!--
 
    BEGIN
    MAP
	IRB : REF BBLOCK,
	MSG : REF BBLOCK;

    LOCAL
	BNR : REF BBLOCK,
	STATUS;


    CNF$TRACE (DBG$C_TRACE, $DESCRIPTOR('TRACE'), 
	$DESCRIPTOR ('cnf$bufr_nice_msg'));


    EXECUTE (CNF$GET_ZVM (%REF (BNR$C_LENGTH), BNR) );		! Get space to store header and message
    BNR [BNR$L_ADDRESS] = .MSG [DSC$A_POINTER]; 		! Record message buffer pointer
    BNR [BNR$W_LENGTH] = .MSG [DSC$W_LENGTH];			! Record message length

    BNR [BNR$W_FREE_LEN] = .DEALLOCATE_LEN;
    INSQUE (.BNR, .IRB [IRB$L_BNR_BLINK]);			! Queue message onto IRB

    RETURN TRUE;
    END;							! Routine cnf$bufr_nice_msg

%SBTTL	'CNF$BUFR_ERR_MSG  Buffer the error response message'
GLOBAL ROUTINE CNF$BUFR_ERR_MSG 
	(IRB, ERR_CODE, ERR_DETAIL, ERR_TXT_COD, ERR_TXT_DSC) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!  Build the error response message and buffer it for later return to
!  the connectee.
!
! FORMAL PARAMETERS:
!
!	irb		Interrupt Request Block, contains context for
!			I/O with connectee.
!
!	err_code	The error code is returned in the first byte
!			of the NICE response message.
!
!	err_detail	The error detail is returned in second and third bytes
!			of the NICE response message.
!
!	err_txt_cod	An optional error status, for which the error text 
!			will be obtained and buffered
!
!	err_txt_dsc	An optional error text which will be buffered
!
! IMPLICIT INPUTS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Always return success
!
! SIDE EFFECTS:
!
!	Error message is built and buffered and stored in the IRB
!
!--
 
    BEGIN
    BUILTIN
	NULLPARAMETER;			! To check for optional parameters

    LITERAL
	DECODED_TXT_BUFLEN = 256;	! Maximum size of text string for decoded error messages

    MAP
	ERR_TXT_DSC : REF BBLOCK;

    LOCAL
	ERR_TXTLEN,		! Either the length of the text decoded from the ERR_TXT_COD
				!  or the length of optional text in ERR_TXT_DSC
	MSG :			! Descriptor of message being built
	  BBLOCK [DSC$C_S_BLN],
	STATUS,
	DECODED_TXT_LEN,	! Length of message text decoded from ERR_TXT_COD
	DECODED_TXT_BUFDSC :	! Descriptor of message text decoded from ERR_TXT_COD
	  BBLOCK [DSC$C_S_BLN],
	DECODED_TXT_BUF :	! Buffer for message text decoded from ERR_TXT_COD
	  BBLOCK [DECODED_TXT_BUFLEN];


    CNF$TRACE (DBG$C_TRACE, $DESCRIPTOR('TRACE'), 
	$DESCRIPTOR ('cnf$bufr_err_msg'));

    MSG = 0;			! Zero descriptor length and type fields
    ERR_TXTLEN = 0;

    !
    !	Set up descriptor and buffer for decoding the optional error code
    !
    DECODED_TXT_LEN = 0;
    DECODED_TXT_BUFDSC = 0;
    DECODED_TXT_BUFDSC [DSC$W_LENGTH] = DECODED_TXT_BUFLEN;
    DECODED_TXT_BUFDSC [DSC$A_POINTER] = DECODED_TXT_BUF;

    IF NOT NULLPARAMETER (4) 
    THEN
	!
	!   Parameter ERR_TXT_COD was provided so decode it
	!
	BEGIN
	$GETMSG	(MSGID = .ERR_TXT_COD,
		 MSGLEN = DECODED_TXT_LEN,
		 BUFADR = DECODED_TXT_BUFDSC);
	ERR_TXTLEN = .DECODED_TXT_LEN;
	END
    ELSE
	!
	!   Optional parameter ERR_TXT_COD was not provided so see if
	!   ERR_TXT_DSC was and use it instead.
	!
	BEGIN
	IF NOT NULLPARAMETER (5)
	THEN
	    ERR_TXTLEN = .ERR_TXT_DSC [DSC$W_LENGTH];
	END;

    MSG [DSC$W_LENGTH] = 4 + .ERR_TXTLEN;
    EXECUTE (CNF$GET_ZVM (MSG [DSC$W_LENGTH], MSG [DSC$A_POINTER]) );	! Get space to store message

    (.MSG [DSC$A_POINTER]) <0, 8> = .ERR_CODE;		! First byte is error code
    (.MSG [DSC$A_POINTER]) <8, 16> = .ERR_DETAIL;	! Second and third bytes are error detail
    (.MSG [DSC$A_POINTER]) <24, 8> = .ERR_TXTLEN;	! Fourth byte is length of optional error text

    IF .ERR_TXTLEN GTR 0
    THEN
	!
	!   Ooptional text was provided either by decoding ERR_TXT_COD
	!   or in ERR_TXT_DSC, so append it to error message being built
	!
	CH$MOVE (.ERR_TXTLEN, 
		 (IF .DECODED_TXT_LEN GTR 0 
		  THEN
		      DECODED_TXT_BUF
		  ELSE
		      .ERR_TXT_DSC [DSC$A_POINTER]
		 ),
		(.MSG [DSC$A_POINTER]) + 4);

    CNF$BUFR_NICE_MSG (.IRB, MSG, .MSG [DSC$W_LENGTH]);	! Place the error message in the IRB for later transmission
    RETURN TRUE;
    END;						! Routine cnf$bufr_err_msg

%SBTTL	'CNF$SEND_NICE_MSG  send the response message'
GLOBAL ROUTINE CNF$SEND_NICE_MSG (IRB) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	Called first from CNF$PROCESS_REQUEST, a routine executed off
!	the work queue.  There will be an assumption at this point that
!	the IOSB contains a success from a previous interaction over the
!	channel.  The first NICE message in the IRB is QIO'd and from 
!	then on CNF$SEND_NICE_MSG is executed as an AST routine upon QIO
!	completion.  The IOSB is checked before another NICE message 
!	is removed and QIO'd. 
!
!	When the list is empty then a CNF$SOLICIT_REQUEST is placed on 
!	the work queue.
!
! FORMAL PARAMETERS:
!
!	irb		Interrupt Request Block, contains context for
!			I/O with connectee.
!
! IMPLICIT INPUTS:
!
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
    BEGIN
    MAP
	IRB : REF BBLOCK;

    LOCAL
	BNR : REF BBLOCK,
	STATUS;


    CNF$TRACE (DBG$C_TRACE, $DESCRIPTOR('TRACE'), 
	$DESCRIPTOR ('cnf$send_nice_msg'));

    !
    !	The first time thru, the IOSB should contain a success status
    !	from a previous I/O on the channel.  For subsequent passes,
    !	CNF$SEND_NICE_MSG will be called to send the next NICE message.
    !	Then the IOSB will contain the status for the previous send,
    !	and then if there was an error on the channel, the channel will
    !	will be closed.
    !
    STATUS = .IRB [IRB$W_IOSB];
    IF NOT .STATUS
    THEN 
	BEGIN
	IF (.STATUS NEQ SS$_LINKABORT) AND
	   (.STATUS NEQ SS$_LINKEXIT)
	THEN
	    SIGNAL (CNF$_LINK, 0, .STATUS);
	WKQ$ADD_WORK_ITEM (CNF$CLOSE_REQUEST_LINK, .IRB);
	RETURN TRUE;
	END;

    !
    !	Check to see if this call of the routine follows a call in which a
    !	buffered message was sent.  In that case it should now be
    !	deallocated.  This would not be the case if this was the first
    !	call to this routine.
    !
    IF .IRB [IRB$W_FREE_LEN] NEQ 0
    THEN
	BEGIN
	EXECUTE (CNF$FREE_VM (%REF(.IRB [IRB$W_FREE_LEN]), IRB [IRB$L_NICE_ADR]) );
	IRB [IRB$W_FREE_LEN] = 0;	! Keep it clean to avoid confusion
	END;				!  when another set of messages are buffered.

    !
    !	If there are any Buffered NICE Responses in the linked list
    !	then remove the next and set it up for sending.  Deallocate the header.
    !
    IF .IRB [IRB$L_BNR_FLINK] NEQ IRB [IRB$L_BNR_FLINK]
    THEN						! There are messages to send
	BEGIN						! Get the next buffered message ready for sending
	BNR = .IRB [IRB$L_BNR_FLINK];
	REMQUE (.BNR, STATUS);				! Remove the next message
	IRB [IRB$W_NICE_LEN] = .BNR [BNR$W_LENGTH];
	IRB [IRB$L_NICE_ADR] = .BNR [BNR$L_ADDRESS];
	IRB [IRB$W_FREE_LEN] = .BNR [BNR$W_FREE_LEN];
	EXECUTE (CNF$FREE_VM (%REF(BNR$C_LENGTH), BNR) );
	END
    ELSE
	!
	!   No more NICE messages buffered
	!   Last request has been completed, solicit another.
	!
	BEGIN
	WKQ$ADD_WORK_ITEM (CNF$SOLICIT_REQUEST, .IRB);
	RETURN TRUE;
	END;

    !
    !	If NICE debug logging is enabled, print the NICE message about
    !	to be sent.
    !
    IF .CNF$GL_LOGMASK [DBG$C_NICE]
    THEN
	BEGIN
	LOCAL DATA_DSC : BBLOCK [DSC$C_S_BLN];
	DATA_DSC = 0;
	DATA_DSC [DSC$W_LENGTH] = .IRB [IRB$W_NICE_LEN];
	DATA_DSC [DSC$A_POINTER] = .IRB [IRB$L_NICE_ADR];
	CNF$LOG_DATA (DBG$C_NICE, $DESCRIPTOR ('NICE transmitted'),0, DATA_DSC);
	END;

    !
    !    Send the NICE message
    !
    STATUS = $QIO
		(
		FUNC = IO$_WRITEVBLK,
		CHAN = .IRB [IRB$W_CHAN],
		EFN = CNF$C_ASYNCH_EFN,
		IOSB = IRB [IRB$W_IOSB],
		ASTADR = CNF$SEND_NICE_MSG,
		ASTPRM = .IRB,
		P1 = .IRB [IRB$L_NICE_ADR],
		P2 = .IRB [IRB$W_NICE_LEN]
		);

    IF NOT .STATUS 
    THEN SIGNAL (CNF$_LINK, 0, .STATUS);

    RETURN TRUE;
    END;			! Routine cnf$send_nice_msg

END				! End of module CNFSEND
ELUDOM
