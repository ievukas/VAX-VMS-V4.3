	.title pli$bit - pl1 runtime bit manipulation subroutines
	.ident	/1-003/					; Edit DSB1003
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; facility:
;
;	VAX/VMS PL1 runtime library.
;
; abstract:
;
;	Runtime routines to manipulate bits.
;
; author: R. Heinen 	15-dec-1978
;
;
; Modifications:
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;	1-003	Dave Blickstein	19-June-1984
;
;		PLI$INDEXBIT was failing to match certain substrings larger 
;		than 32 bits.  It looking at memory locations after the search
;		string because it wasn't updating the "bits left" count
;		correctly.  SPR:  #11-68090.  Test program: S68090.
;--
 
;
; external definitions
;
 
	$defdat				; define data types
 
;
; local data
;
 
	rtshare
	.page
	.sbttl common subroutines
;++
; get_op1_32bits - get next 32 bit field
;
; functional description:
;
; This subroutine returns the next 32 bit field from a bit descriptor.
; The bit descriptors are updated to address then next field.
; If the field is empty then a zero is returned.
;
; inputs:
;
;	r2 = size remaining in the field
;	r3 = base address of the field
;	r4 = offset to the field
;
; outputs:
;
;	r0 = value
;	r2 = size remaining in the field
;	r3 = base address of the field
;	r4 = offset to field
;--
get_op1_32bits:
	movl	#32,r0			; assume 32 bit return
	cmpl	r0,r2			; enough to return 32?
	bleq	10$			; if leq then yes
	movl	r2,r0			; return remainder
10$:	subl	r0,r2			; remove taken bits
	extzv	r4,r0,(r3),r0		; get value
	addl	#4,r3			; point to next field *** don't access ***
	rsb				; return
	.page
;++
; get_op2_32bits - get next 32 bit field
;
; functional description:
;
; This subroutine returns the next 32 bit field from a bit descriptor.
; The bit descriptors are updated to address then next field.
; If the field is empty then a zero is returned.
;
; inputs:
;
;	r5 = size remaining in the field
;	r6 = base address of the field
;	r7 = offset to field
;
; outputs:
;
;	r0 = value
;	r5 = size remaining in the field
;	r6 = base address of the field
;	r7 = offset to the field
;--
get_op2_32bits:
	movl	#32,r0			; assume 32 bit return
	cmpl	r0,r5			; enough to return 32?
	bleq	10$			; if leq then yes
	movl	r5,r0			; return remainder
10$:	subl	r0,r5			; remove taken bits
	extzv	r7,r0,(r6),r0		; get value
	addl	#4,r6			; point to next field *** don't access ***
	rsb				; return
	.page
;++
; set_opnd_1 - set up operand one
;
; functional description:
;
; This routine gathers the first operand data into registers r2-r4
;
; inputs:
;
;	common stack frame
;
; outputs:
;
;	r2 = size of operand 1
;	r3 = address of the operand
;	r4 = offset to field
;--
set_opnd_1:
	movl	4(ap),r3		; get address of source 1
	movl	8(ap),r2		; fetch dope address
	clrl	r4			; assume not bit
	cmpw	(r2)+,#dat_k_bit	; bit type?
	bneq	10$			; if neq then no
	movq	(r3),r3			; load address and offset
10$:	movzwl	(r2),r2			; get size
	rsb
	.page
;++
; set_opnd_2 - set up operand two
;
; functional description:
;
; This routine gathers the second operand data into registers r5-r7
;
; inputs:
;
;	common stack frame
;
; outputs:
;
;	r5 = size of operand 2
;	r6 = address of the operand
;	r7 = offset to field
;--
set_opnd_2:
	movl	12(ap),r6		; get address
	movl	16(ap),r5		; fetch dope address
	clrl	r7			; assume not bit
	cmpw	(r5)+,#dat_k_bit	; bit type?
	bneq	10$			; if neq then no
	movq	(r6),r6			; load address and offset
10$:	movzwl	(r5),r5			; get size
	rsb
	.page
;++
; set_result - setup result descriptors
;
; functional descriptor:
;
; This routine calculates the size of the result field based on the
; sizes of the inputs.
; The offset returned is always zero.
;
; inputs:
;
;	r1 = address of the result string
;	r2 = size of source one
;	r5 = size of source two
;
; outputs:
;
;	r1,r2,r3,r4,r5,r6,r7 are saved.
;
;	r8 = size of output
;	r9 = offset (0)
;--
set_result:
	movl	r2,r8			; assume source 1 dictates size
	cmpl	r2,r5			; actually true?
	bgtr	10$			; if gtr then true
	movl	r5,r8			; if not then source 2 does
10$:	subl3	#1,r8,r9		; find the last byte boundary
	bicl2	#7,r9
	insv	#0,r9,#8,(r1)		; clear the byte
	clrl	r9			; initialize offset
	rsb
	.page
;++
; put_bits - output bits to result
;
; functional description:
;
; This routine inserts a value in the result string and then updates
; the result string pointers.  If the result is filled then a ret is done
; to complete the operation.
;
; inputs:
;
;	r0 = value to insert
;	r1 = address of the result
;	r8 = size remaining
;	r9 = simple offset value
;
; outputs:
;
;	r1,r8 are updated
;--
put_bits:
	pushl	r0			; save value to insert
	movl	#32,r0			; assume 32 bit insert
	cmpl	r8,#32			; actually 32 bits left?
	bgtr	10$			; if gtr then yes
	movl	r8,r0			; set remainder size
10$:	insv	(sp)+,r9,r0,(r1)	; insert value
	addl	#4,r1			; address next field
	subl	r0,r8			; remove stored size
	bneq	20$			; if neq then more to go
	ret				; operation done
20$:	rsb				; return to processor
	.page
	.sbttl pli$andbit - and bit string
;++
; pli$andbit -  and two bit strings
;
; functional description:
;
; This routine performs a logical and operation on two bit strings.
;
; inputs:
;
;	r1 = address to return string
;		( the size is always max(length(source1),length(source2)) )
;
;	0(ap) = 4
;	4(ap) = address of source 1
;	8(ap) = address of the dope for source 1
;	12(ap) = address of source 2
;	16(ap) = address of the dope for source 2
;
; If the type of the operand is bit then the address is the address of
; a descriptor having the base address in the first longword and the offset
; in the second.
;
; outputs:
;
;	result string is filled in
;--
	.entry	pli$andbit,^m<r2,r3,r4,r5,r6,r7,r8,r9,r10>
 
	bsbw	set_opnd_1		; setup operands
	bsbw	set_opnd_2		; 
	bsbw	set_result		;
10$:	bsbw	get_op1_32bits		;
	mcoml	r0,r10			; save value complemented
	bsbw	get_op2_32bits		;
	bicl2	r10,r0			; compute value
	bsbw	put_bits		; insert into result
	brb	10$			; continue
	.page
	.sbttl pli$boolbit - perform bool bif on bits
;++
; pli$boolbit - perform bool bif on bit strings
;
; functionla description:
;
; This routine performs the bool bif operation on three bit strings.
;
;
; The operation is as follows:
;
;	bool(x,y,z)
;
;	result(i) = z(1) if x(i) = 0 and y(i) = 0
;		    z(2) if x(i) = 0 and y(i) = 1
;		    z(3) if x(i) = 1 and y(i) = 0
;		    z(4) if x(i) = 1 and y(i) = 1
;
; inputs:
;
;	r1 = address to return string
;		( the size is always max(length(source1),length(source2)) )
;
;	0(ap) = 6
;	4(ap) = address of source 1
;	8(ap) = address of the dope for source 1
;	12(ap) = address of source 2
;	16(ap) = address of the dope for source 2
;	20(ap) = address of source 3
;	24(ap) = address of the dope for source 3
;
; outputs:
;
;	none
;--
	.entry	pli$boolbit,^m<r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>
	bsbw	set_opnd_1		; load operand 1
	bsbw	set_opnd_2		; load operand 2
	movl	24(ap),r8		; address function string dope
	extzv	#0,#3,2(r8),r0		; get size up to 4 bits
	beql	5$			; if eql then set to 4
	cmpl	r0,#4			;
	blequ	10$			;
5$:	movl	#4,r0			;
10$:	movl	20(ap),r10		; address string
	clrl	r11			; set zero offset
	cmpw	(r8),#dat_k_bit		; bit data type?
	bneq	15$			; if neq then no
	movq	(r10),r10		; get address and offset
15$:	extzv	r11,r0,(r10),r10	; get up to 4 bits
	bsbw	set_result		; setup result
	cmpl	r10,#6			; is this a xor?
	beql	100$			; if eql then yes
;
; bool operation loop
;
20$:	bsbw	get_op1_32bits		; get op1 field
	movl	r0,r11			; save value
	bsbw	get_op2_32bits		; get op2 field
	pushr	#^m<r2,r3,r4,r5>	; save regs
	movl	r0,r4			; save value
	clrl	r0			; zero accum
	clrl	r3			; setup loop count
30$:	extzv	r3,#1,r11,r2		; get op1 bit
	ashl	#1,r2,r2		; shift up
	extzv	r3,#1,r4,r5		; get op2 bit
	bisl	r2,r5			; merge bits
	extzv	r5,#1,r10,r5		; get the op3 bit value
	insv	r5,r3,#1,r0		; accumulate result
	aobleq	#31,r3,30$		; continue for 32 bits
	popr	#^m<r2,r3,r4,r5>	; restore bits
	bsbw	put_bits		;
	brb	20$			; continue
;
; simple xor function
;
100$:	bsbw	get_op1_32bits		; get op1 field
	pushl	r0			; save value
	bsbw	get_op2_32bits		; get op2 field
	xorl	(sp)+,r0		; perform operation
	bsbw	put_bits		; insert result field
	brb	100$			; continue
	
	.page
	.sbttl pli$orbit - or bit string
;++
; pli$orbit -  or two bit strings
;
; functional description:
;
; This routine performs a logical or operation on two bit strings.
;
; inputs:
;
;	r1 = address to return string
;		( the size is always max(length(source1),length(source2)) )
;
;	0(ap) = 4
;	4(ap) = address of source 1
;	8(ap) = address of the dope for source 1
;	12(ap) = address of source 2
;	16(ap) = address of the dope for source 2
;
; outputs:
;
;	result string is filled in
;--
	.entry	pli$orbit,^m<r2,r3,r4,r5,r6,r7,r8,r9,r10>
 
	bsbw	set_opnd_1		; setup operands
	bsbw	set_opnd_2		; 
	bsbw	set_result		;
10$:	bsbw	get_op1_32bits		;
	movl	r0,r10			; save value 
	bsbw	get_op2_32bits		;
	bisl2	r10,r0			; compute value
	bsbw	put_bits		; insert into result
	brb	10$			; continue
	.page
	.sbttl pli$notbit - not bit string
;++
; pli$notbit -  not a bit string
;
; functional description:
;
; This routine performs a logical not operation on a bit string.
;
; inputs:
;
;	r1 = address to return string
;		( the size is always max(length(source1),length(source2)) )
;
;	0(ap) = 2
;	4(ap) = address of source 1
;	8(ap) = address of the dope for source 1
;
; outputs:
;
;	result string is filled in
;--
	.entry	pli$notbit,^m<r2,r3,r4,r5,r6,r7,r8,r9>
 
	bsbw	set_opnd_1		; setup operands
	clrl	r5			; set no source two
	bsbw	set_result		;
10$:	bsbw	get_op1_32bits		;
	mcoml	r0,r0			; set value complemented
	bsbw	put_bits		; insert into result
	brb	10$			; continue
	.page
	.sbttl pli$movbit - move bit string
;++
; pli$movbit -  move a bit string
;
; functional description:
;
; This routine performs a move operation on a bit string.
;
; inputs:
;
;	r1 = address to return string - if one arg set 
;		( the size is always max(length(source1),length(source2)) )
;
;	0(ap) = 2 or 4
;	4(ap) = address of source 1
;	8(ap) = address of the dope for source 1
;	12(ap) = address of the target if not bit aligned
;	16(ap) = address of the target dope
;
; outputs:
;
;	result string is filled in
;--
	.entry	pli$movbit,^m<r2,r3,r4,r5,r6,r7>
	bsbw	set_opnd_1		; setup operands
	cmpl	(ap),#2			; bit aligned target?
	bneq	5$			; if neq then no
	movl	r1,r6			; set up operand address
	clrl	r7			; set no offset
	movl	r2,r5			; copy op1 size
	brb	15$			; continue
5$:	bsbw	set_opnd_2		;
10$:	cmpw	#dat_k_bit,@16(ap)	; bit aligned target?
	beql	20$			; if eql then no
15$:	addl3	#7,r5,r1		;
	ashl	#-3,r1,r1		; calc as byte displ
	clrb	-1(r6)[r1]		; insert 0 in last byte
20$:	bsbw	get_op1_32bits		;
	movl	#32,r1			; assume max insert
	cmpl	r1,r5			; room enough?
	bleq	25$			; if leq then yes
	movl	r5,r1			; set max size
25$:	insv	r0,r7,r1,(r6)		; insert target
	addl	#4,r6			; point to next field
	subl	r1,r5			; remove moved size
	bneq	20$			; if neq then not done yet
	ret				; done

	.page
	.sbttl pli$catbit - concatenate bit string
;++
; pli$catbit -  concatenate two bit strings
;
; functional description:
;
; This routine performs a concatenate operation on two bit strings.
;
; inputs:
;
;	r1 = address to return string
;		( the size is always max(length(source1),length(source2)) )
;
;	0(ap) = 4
;	4(ap) = address of source 1
;	8(ap) = address of the dope for source 1
;	12(ap) = address of source 2
;	16(ap) = address of the dope for source 2
;
; outputs:
;
;	result string is filled in
;--
	.entry	pli$catbit,^m<r2,r3,r4,r5,r6,r7,r8,r9,r10>
 
	bsbw	set_opnd_1		; set up operands
	bsbw	set_opnd_2		; 
	bsbw	set_result		;
10$:	movl	r2,r10			; copy size of op1 remaining
	beql	20$			; if eql then op1 done
	cmpl	r2,#32			; are there 32 bits left in source?
	bleq	15$			; if leq then no
	movl	#32,r10			; assume insert of just what's left
15$:	bsbw	get_op1_32bits		;
	insv	r0,r9,r10,(r1)		; insert it
	addl	r10,r9			; adjust target offset
	brb	10$			; continue till done with op1
;
; move op2
;
20$:	movl	r5,r10			; copy size of op1 remaining
	beql	30$			; if eql then op1 done
	cmpl	r5,#32			; are there 32 bits left in source?
	bleq	25$			; if leq then no
	movl	#32,r10			; assume insert of just what's left
25$:	bsbw	get_op2_32bits		; get string two bits
	insv	r0,r9,r10,(r1)		; insert it
	addl	r10,r9			; adjust target offset
	brb	20$			; continue
30$:	ret				; done
	.page
	.sbttl pli$cmpbit - compare bit strings
;++
; pli$cmpbit - compare bit strings
;
; functional description:
;
; This routine compares two bit strings and returns r0 with the proper
; condition code.
;
; inputs:
;
;	0(ap) = 4
;	4(ap) = address of source 1
;	8(ap) = address of the dope for source 1
;	12(ap) = address of source 2
;	16(ap) = address of the dope for source 2
;	
; outputs:
;
;	r0 = if tested with a tst the condition codes are set
;--
	.entry pli$cmpbit,^m<r2,r3,r4,r5,r6,r7,r8,r9>
	bsbw	set_opnd_1		; get op1
	bsbw	set_opnd_2		; get op2
10$:	tstl	r2			; op1 exhausted?
	bneq	15$			; if neq then no
	tstl	r5			; op2 exhausted?
	beql	30$			; if eql then done
15$:	bsbw	get_op2_32bits		; get an op1 field
	pushl	r0			; save value
	bsbw	get_op1_32bits		; get an op2 field
	xorl3	(sp)+,r0,r8		; get difference
	beql	10$			; if eql then continue
	ffs	#0,#32,r8,r1		; find the different bit
	extzv	r1,#1,r0,r0		; get answer value
	bneq	20$			; if neq then op1 gtr op2
	mnegl	#1,r0			; set op1 lss op2
20$:	ret
30$:	clrl	r0			; set eql
	ret
	.page
	.sbttl pli$indexbit - index built-in function for bit
;++
; pli$indexbit - perform index built-in function for bit strings
;
; functional description:
;
; This routine supports the index built-in function for bit strings.
; The action is to search string2 for an occurance of string1 and to return
; the offset of the match. If no match occurs then 0 is returned.
;
; inputs:
;
;	0(ap) = 4
;	4(ap) = address of source 1
;	8(ap) = address of the dope for source 1
;	12(ap) = address of source 2
;	16(ap) = address of the dope for source 2
;
; outputs:
;
;	r0 = index value
;--
	.entry pli$indexbit,^m<r2,r3,r4,r5,r6,r7,r8,r9>
	bsbw	set_opnd_1		; setup r2,r3,r4
	bsbw	set_opnd_2		; setup r5,r6,r7
	tstl	r5			; match string size 0?
	beql	35$			; if eql then done
	movl	#32,r0			; get up to 32 bits of search string
	cmpl	r0,r5			;
	bleq	10$			; 
	movl	r5,r0			;
10$:	extzv	r7,r0,(r6),r1		; extract the value
	movl	r4,r8			; save initial offset of searcher
	movl	#32,r9			; assume 32 bit search
15$:	cmpl	r2,r9			; 32 bits left?
	bgtr	20$			; if gtr then yes
	movl	r2,r9			; set size to remainder
20$:	cmpl	r5,r2			; enough search bits to match?
	bgtru	35$			; if gtr then no - no match
	blbc	r1,25$			; select proper search instruction
	ffs	r4,r9,(r3),r0		; look for field start
	bneq	40$			; if neq then posible match found
	brb	30$			; else no match found
25$:	ffc	r4,r9,(r3),r0		; look for field start
	bneq	40$			; if neq then posible match found
30$:	subl	r9,r2			; remove searched size
	beql	35$			; if eql then done - no match
	addl	r9,r4			; adjust offset for next field
	brb	15$			; continue
35$:	clrl	r0			; done - no match
	ret
40$:	subl	r4,r0			; calculate skipped portion
	subl	r0,r2			; update remaining bits left count
	addl	r0,r4			; setup matched offset
	cmpl	r5,#1			; simple match?
	beql	100$			; if eql then done
	cmpl	r5,#32			; easy match?
	bleq	75$			; if leq then do it
;
; complex match
;
	
	pushr	#^m<r0,r2,r3,r5,r6,r7>
50$:	tstl	r2			; string 1 exhausted?
	bneq	55$			; if neq then no
	tstl	r5			; string 2 exhausted?
	bneq	55$			; if neq then no
	popr	#^m<r0>			; restore r0 only
	brb	100$			; done - match found
55$:	bsbw	get_op1_32bits		; get next 32 bit field
	pushl	r0			; save value
	bsbw	get_op2_32bits		;
	cmpl	(sp)+,r0		; match?
	beql	50$			; if eql then continue match
	popr	#^m<r0,r2,r3,r5,r6,r7>; no match found
60$:	incl	r4			; update new search location
	decl	r2			; adjust remaining size
	brb	15$			; continue
;
; simple match
;
75$:	cmpzv	r4,r5,(r3),r1		; match?
	bneq	60$			; if neq then continue search
100$:	addl3	#1,r4,r0		; calc relitive bit
	subl	r8,r0			; remove initial offset
	ret
	.end
