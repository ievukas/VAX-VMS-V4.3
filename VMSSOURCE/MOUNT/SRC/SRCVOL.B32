MODULE SRCVOL (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MOUNT Utility Structure Level 1
!
! ABSTRACT:
!
!	This routine searches the device database for a particular volume.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  13-Oct-1977  20:09
!
! MODIFIED BY:
!
!	V03-008	HH0050		Hai Huang		17-Aug-1984
!		Return success status if MOUNT/CLUSTER on a volume
!		that is already mounted locally.
!
!	V03-007	HH0041		Hai Huang		24-Jul-1984
!		Remove REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.B32'.
!
!	V03-006	HH0036		Hai Huang		11-Jul-1984
!		Allow MOUNT/CLUSTER on a volume that is already mounted
!		on the local  node.
!
!	V03-005	HH0024		Hai Huang		18-Jun-1984
!		Call IOC$CVT_DEVNAM to format the device name on a 
!		successful shared mount.
!
!	V03-004 HH0002		Hai Huang		01-Feb-1984
!		Add job-wide mount support, i.e. deallocate mount list 
!		entries to paged-pool.
!
!	V03-003	CDS0001		Christian D. Saether	17-Jun-1983
!		Fix SEARCH_VOL so it knows how to run through
!		all system blocks, and therefore find all ddb's.
!
!	V03-002	DMW4041		DMWalp			 7-Jun-1983
!		Remove (S)LOG_ENTRY
!
!	V03-001	STJ50311	Steven T. Jeffreys,	11-Feb-1983
!		Make all uses of PHYS_NAME indexed by DEVICE_INDEX.
!
!	V02-004	STJ0195		Steven T. Jeffreys,	02-Feb-1982
!		Removed SYSEXV declaration.
!
!	V02-003	STJ0165		Steven T. Jeffreys,	04-Jan-1982
!		Remove obsolete calls to $SETEXV.
!
!	V02-002	ACG0169		Andrew C. Goldstein,	18-Apr-1980  13:58
!		Bug check on internal errors
!
!	V02-001	ACG0167		Andrew C. Goldstein,	18-Apr-1980  13:39
!		Previous revision history moved to MOUNT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:MOUDEF.B32';


FORWARD ROUTINE
	SEARCH_VOL,			! search for mounted volume
	SEARCH_HANDLER	: NOVALUE;	! condition handler for above

GLOBAL ROUTINE SEARCH_VOL (NAME) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine searches the device database for a particular volume.
!	Only file structured devices mounted /SYSTEM, /GROUP, or /SHARE
!	are considered.
!
!
! CALLING SEQUENCE:
!	SEARCH_VOL (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: string descriptor of volume label
!
! IMPLICIT INPUTS:
!	MOUNT_OPTIONS: command option bits
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	UCB address of found volume or zero
!
! SIDE EFFECTS:
!	mount count of found volume is incremented if /SHARE mode mount
!
!--

BEGIN

MAP
	NAME		: REF VECTOR;	! volume name string descriptor

LABEL
	SEARCH_LOOP;			! outer device search loop

LOCAL
	STATUS,				! random status value
	SB		: REF BBLOCK,	! pointer to current SB
	DDB		: REF BBLOCK,	! pointer to current DDB
	UCB		: REF BBLOCK,	! pointer to current UCB
	VCB		: REF BBLOCK;	! pointer to current VCB

EXTERNAL
	MOUNT_OPTIONS	: BITVECTOR,	! MOUNT command options
	DEVICE_INDEX	: LONG,		! index into PHYS_NAME vector
	PHYS_NAME	: VECTOR,	! physical device name descriptor
	NAME_BUFFER	: VECTOR [,BYTE], ! physical device name buffer
	MTL_ENTRY	: REF BBLOCK,	! address of mount list entry
	SMTL_ENTRY	: REF BBLOCK,	! address of volume set mount list entry
	SCS$GQ_CONFIG	: ADDRESSING_MODE (ABSOLUTE),
					! I/O database listhead
	MOUNT_ITMLST	: LONG;		! address of the mount item list	

LINKAGE
	IOC_CVT_DEVNAM	= JSB (REGISTER = 0, REGISTER = 1, REGISTER = 4,
			  REGISTER = 5; REGISTER = 1) :
			  PRESERVE (2,3,4,5,6,7);

EXTERNAL ROUTINE
	LOCK_IODB,			! lock I/O database mutex
	UNLOCK_IODB,			! unlock I/O database mutex
	DEALLOCATE_MEM,			! deallocate dynamic memory
	ALLOC_LOGNAME,			! create logical name and MTL entry
	ENTER_LOGNAME,			! hook up logical name and MTL entry
	IOC$CVT_DEVNAM	: IOC_CVT_DEVNAM ADDRESSING_MODE (GENERAL),
					! get fully expanded device name
	MOUNT_CLUSTER;			! mount volume cluster-wide 


! Enable our condition handler.
! Needless to say, the search must be done with the I/O database locked to
! prevent list perturbations. We run down the DDB list, following the UCB
! list off each one, looking for file structured devices that are mounted
! but not allocated.
!

ENABLE SEARCH_HANDLER;

! For a shared mount, preallocate logical name and mounted volume list entry
! for the worst case (RVN 1), since we cannot tolerate failures after bumping
! the mount count in a found VCB. If not needed, we discard them later. System
! and Group mounts don't need this, since we will fail here one way or the other.
!

IF .MOUNT_OPTIONS[OPT_SHARE]
THEN
    BEGIN
    ALLOC_LOGNAME (0);
    SMTL_ENTRY = .MTL_ENTRY;
    MTL_ENTRY = 0;
    ALLOC_LOGNAME (1);
    END;

LOCK_IODB ();

SB = .SCS$GQ_CONFIG;

SEARCH_LOOP:
BEGIN
UNTIL .SB EQL SCS$GQ_CONFIG
DO
BEGIN

DDB = .SB [SB$L_DDB];

WHILE .DDB NEQ 0
DO
    BEGIN
    IF .DDB[DDB$B_TYPE] NEQ DYN$C_DDB
    THEN BUG_CHECK (NOTDDBDDB, FATAL, 'Corrupted DDB list');
    UCB = .DDB[DDB$L_UCB];

    UNTIL .UCB EQL 0 DO
	BEGIN
	IF .UCB[UCB$B_TYPE] NEQ DYN$C_UCB
	THEN BUG_CHECK (NOTUCBUCB, FATAL, 'Corrupted UCB list');

	IF  .BBLOCK[UCB[UCB$L_DEVCHAR], DEV$V_FOD]
	AND .BBLOCK[UCB[UCB$L_DEVCHAR], DEV$V_MNT]
	AND NOT .BBLOCK[UCB[UCB$L_DEVCHAR], DEV$V_ALL]
	AND NOT .BBLOCK[UCB[UCB$L_DEVCHAR], DEV$V_DMT]
	THEN
	    BEGIN
	    VCB = .UCB[UCB$L_VCB];
	    IF .VCB[VCB$B_TYPE] NEQ DYN$C_VCB
	    THEN BUG_CHECK (NOTVCBUCB, FATAL, 'Not VCB pointer in UCB');
	    IF CH$EQL (.NAME[0], .NAME[1],
			VCB$S_VOLNAME, VCB[VCB$T_VOLNAME], ' ')
	    THEN LEAVE SEARCH_LOOP;
	    END;
	UCB = .UCB[UCB$L_LINK];
	END;				! end of UCB scan loop
    DDB = .DDB[DDB$L_LINK];
    END;				! end of DDB scan loop

SB = .SB [SB$L_FLINK];
END;
END;					! end of block SEARCH_LOOP

! If we find a suitable volume that matches the name, the search is over.
! If the mount is /SHARE, we increment the volume mount count here and now
! to avoid race conditions. Finding a volume on a /SYSTEM or /GROUP mount
! is an error.
!

STATUS = 0;
IF .UCB NEQ 0
THEN
    BEGIN
    IF .BBLOCK[UCB[UCB$L_DEVCHAR], DEV$V_FOR] NEQ .MOUNT_OPTIONS[OPT_FOREIGN]
    THEN STATUS = MOUN$_INCOMPAT

    ELSE
	BEGIN
	
	IF NOT .MOUNT_OPTIONS[OPT_SHARE]
	THEN 
	    STATUS = MOUN$_VOLALRMNT
	ELSE
	    BEGIN
	    STATUS = 1;
	    VCB[VCB$W_MCOUNT] = .VCB[VCB$W_MCOUNT] + 1;
	    END;
	!
	! For a successful shared mount or volume already mounted, format the 
	! expanded device name and set up the device name descriptor.
	! 
	IOC$CVT_DEVNAM (NAMEBUF_LEN,			! Output buffer length
			NAME_BUFFER +
			  (.DEVICE_INDEX*NAMEBUF_LEN),	! Output buffer address
			-1, 				! Format device name in display form
			.UCB;				! Address of the target UCB
			PHYS_NAME [.DEVICE_INDEX*2]); 	! Returned length
	PHYS_NAME[(.DEVICE_INDEX*2)+1] = NAME_BUFFER + 
			  (.DEVICE_INDEX*NAMEBUF_LEN);	! Set up device name descriptor
	END;
    END;

UNLOCK_IODB ();

!
! If the /CLUSTER option is specified, send the request cluster-wide even 
! if the volume is already mounted on the local node. Return with success
! in this case.
!
IF  ( .STATUS EQL MOUN$_VOLALRMNT)
AND ( .MOUNT_OPTIONS [OPT_CLUSTER])
THEN
    BEGIN
    MOUNT_CLUSTER (.MOUNT_ITMLST); 
    RETURN 1;
    END;

IF NOT .STATUS THEN ERR_EXIT (.STATUS);

!
! We now have a successful shared mount. Fill in the logical name and MTL
! entries. 
!
! If what we found is RVN 1 of a volume set, keep the entries as is. Otherwise
! release one of each.
!

IF .BBLOCK [UCB[UCB$L_DEVCHAR], DEV$V_SQD]
OR .VCB[VCB$W_RVN] NEQ 1
THEN
    BEGIN
    DEALLOCATE_MEM (.MTL_ENTRY, 1);
    MTL_ENTRY = .SMTL_ENTRY;
    SMTL_ENTRY = 0;
    END;

ENTER_LOGNAME (.UCB, .VCB);

RETURN 1;

END;					! end of routine SEARCH_VOL

ROUTINE SEARCH_HANDLER (SIGNAL, MECHANISM) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the condition handler for the volume search
!	routine. It undoes any damage done so far and returns the error
!	status to the user mode caller.
!
!
! CALLING SEQUENCE:
!	KERNEL_HANDLER (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of signal vector
!	ARG2: address of mechanism vector
!
! IMPLICIT INPUTS:
!	global pointers to blocks allocated
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	stack unwound, allocations undone
!
!--

BEGIN

MAP
	SIGNAL		: REF BBLOCK,	! signal vector
	MECHANISM	: REF BBLOCK;	! mechanism vector

EXTERNAL
	MOUNT_OPTIONS	: BITVECTOR,	! command parser options
	MTL_ENTRY	: REF BBLOCK,	! address of mount list entry
	SMTL_ENTRY	: REF BBLOCK;	! address of volume set mount list entry

EXTERNAL ROUTINE
	UNLOCK_IODB,			! unlock I/O database mutex
	DEALLOCATE_MEM;			! deallocate system dynamic memory


IF .SIGNAL[CHF$L_SIG_NAME] NEQ SS$_UNWIND
THEN
    BEGIN

    IF .SIGNAL[CHF$L_SIG_ARGS] NEQ 3
    THEN BUG_CHECK (UNXSIGNAL, FATAL, 'Unexpected signal in MOUNT');


! Deallocate whatever control blocks exist to wherever they came from.
!

    IF .MTL_ENTRY NEQ 0
    THEN DEALLOCATE_MEM (.MTL_ENTRY, 1);

    IF .SMTL_ENTRY NEQ 0
    THEN DEALLOCATE_MEM (.SMTL_ENTRY, 1);

    MTL_ENTRY = SMTL_ENTRY = 0;

! Return the condition code in R0.
!

    MECHANISM[CHF$L_MCH_SAVR0] = .SIGNAL[CHF$L_SIG_NAME];
    $UNWIND ();

    END;
END;					! end of routine KERNEL_HANDLER

END
ELUDOM
