	$BEGIN	RMS0SETDD,000,RM$RMS,<SET DEFAULT DIRECTORY>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; Facility: rms32
;
; Abstract:
;	this routine sets (and optionally returns) the default directory
;	string in the process i/o control page.
;
; Environment:
;	vax/vms
;
; Author:
;	tim halvorsen	SEP-1979
;
; Modified By:
;
;	V03-004	RAS0245		Ron Schaefer		24-Jan-1984
;		Make sure that the default directory is NOT rooted
;		as that leads to effectively a null directory string
;		which is not good.  Use extended NAM block fields.
;
;	V03-003	KBT0589		Keith B. Thompson	22-Aug-1983
;		Correct error path from RM$XPFN
;
;	V03-002	KBT0521		Keith B. Thompson	23-May-1983
;		RM$XPFN moved so change ref to JSB
;
;	V03-001	KBT0193		Keith B. Thompson	23-Aug-1982
;		Reorganize psects
;
;	V02-002	REFORMAT	Ron Schaefer	30-Jul-1980	09:27
;		Reformat the source.
;
;--

	.SBTTL	DEFINITIONS

;
; include files
;

;
; macros
;

	$FABDEF				; fab definitions
	$NAMDEF				; nam definitions
	$IFBDEF				; ifab definitions
	$FWADEF				; fwa definitions
	$PSLDEF				; psl definitions
	$RMSDEF				; rms error codes

;
; equated symbols
;

;
; own storage
;

	.SBTTL	RMS$SETDDIR, SET DEFAULT DIRECTORY STRING

;++
;
; RMS$SETDDIR:	set default directory string
;
;	this routine moves the given default directory string
;	to the process i/o control page.  the resultant string
;	is optionally returned to the caller.
;
; inputs:
;
;	4(ap) = address of descriptor of new default directory string
;		(optional - if not supplied, no change is made)
;	8(ap) = address of word to receive length of resultant string
;		(optional - if not supplied, no length is returned)
;	12(ap)= address of descriptor of buffer to receive resultant string
;		(optional - if not supplied, string is not returned)
;
; outputs:
;
;	r0 = status code (standard rms codes)
;
;	pio$gt_ddstring may be set to the resultant directory string
;--
;

	.ENABL	LSB
	$ENTRY	RMS$SETDDIR

	$TSTPT	SETDDIR

	MOVAB	@#PIO$GT_DDSTRING,R5	; address of counted string
	MOVZBL	(R5)+,R6		; length of string

;
; if caller requested existing string, return it also
;

	MOVL	12(AP),R1		; address of buffer descriptor
	BEQL	5$			; branch if none
	IFNORD	#8,(R1),ERRIAL		; error if not readable
	CMPW	R6,(R1)			; buffer long enough?
	BGTRU	ERRIAL			; error if not
	IFNOWRT	(R1),@4(R1),ERRIAL	; error if not writable
	MOVC5	R6,(R5),#0,(R1),@4(R1)	; return existing string to caller

;
; if caller requested existing string length, return it
;

5$:	MOVL	8(AP),R1		; address to receive length
	BEQL	10$			; branch if not supplied
	IFNOWRT	#2,(R1),ERRIAL		; error if not writable
	MOVW	R6,(R1)			; return length to caller

;
; if a new string is not supplied, return the existing string
;

10$:	TSTL	4(AP)			; any input string given?
	BNEQ	20$			; branch if yes
	BRW	EXITOK			; if not, exit with success

;
; process error with caller's arguments
;

ERRIAL:	RMSERR	IAL
	BRW	EXIT

;
; allocate a fab on the stack to be used as input to xpfn
;

20$:	SUBL2	#FAB$C_BLN,SP		; allocate storage for fab
	MOVL	SP,R8			; save address of fab
	MOVC5	#0,(SP),#0,#FAB$C_BLN,(R8); zero fab
	ASSUME	FAB$B_BLN EQ FAB$B_BID+1
	MOVW	#FAB$C_BID+<FAB$C_BLN@8>,FAB$B_BID(R8); set id and length

;
; allocate a nam block on the stack to be used as input to xpfn
;

	SUBL2	#NAM$C_BLN,SP		; allocate storage for nam block
	MOVL	SP,R7			; save address of nam block
	MOVL	SP,FAB$L_NAM(R8)	; save address in fab
	MOVC5	#0,(SP),#0,#NAM$C_BLN,(R7); zero nam block
	ASSUME	NAM$B_BLN EQ NAM$B_BID+1
	MOVW	#NAM$C_BID+<NAM$C_BLN@8>,NAM$B_BID(R7); set id and length
	SSB	#NAM$V_SYNCHK,NAM$B_NOP(R7);fast parse

;
; allocate an expanded string buffer for resultant string
;

	SUBL2	#NAM$C_MAXRSS,SP	; allocate storage for expanded name
	MOVL	SP,NAM$L_ESA(R7)	; save address in nam block
	MOVB	#NAM$C_MAXRSS,NAM$B_ESS(R7); set buffer length in nam block

;
; parse the input string.  a call frame is created here so that if
; fseti detects any errors and ret's, we never lose control.
;

	MOVL	4(AP),R1		; get address of input descriptor
	IFNORD	#8,(R1),ERRIAL		; error if not readable
	MOVQ	(R1),R0			; get descriptor
	IFNORD	R0,(R1),ERRIAL		; error if string not readable
	MOVB	R0,FAB$B_FNS(R8)	; set length into fab
	MOVAL	(R1),FAB$L_FNA(R8)	; and address also
	CALLS	#0,B^PARSE		; parse the string - get any rms errors
	BLBC	R0,EXIT			; branch if error

;
; store the resultant directory spec in the control region
;

	MOVZBL	NAM$B_DIR(R7),R4	; get resultant string length
	BEQL	ERRDIR			; bad if null
	MOVL	NAM$L_DIR(R7),R5	; get resultant string address
	MOVAB	@#PIO$GT_DDSTRING,R3	; address to store string
	MOVB	R4,(R3)+		; store length of string
	MOVC3	R4,(R5),(R3)		; store string behind it
EXITOK:	MOVL	#1,R0
EXIT:	SSB	#16,R0			; mark as rms error
	RET				; return with status

ERRDIR:	RMSERR	DIR
	BRB	EXIT

	.DSABL	LSB

;++
;
; PARSE:	subroutine to parse the input string.  this is a separate
;		procedure so that if any internal rms routine detects an
;		error, then it can perform a ret without our losing control.
;
; inputs:
;
;	4(ap),r8 = fab address
;
; outputs:
;
;	r0 = status
;
;--

PARSE:	.WORD	^M<R7>			; save nam address over call

;
; allocate internal ifab to be used only during this routine
;

	MOVAB	@#PIO$GW_PIOIMPA,R11	; set impure area address
	MOVL	#PSL$C_EXEC,R7		; caller's access mode
	BSBW	RM$FSETI_ALT		; allocate internal ifab

;
; set the previous mode to exec so that nam probes will work
;

	MOVPSL	-(SP)			; use current as next
	INSV	#PSL$C_EXEC,#PSL$V_PRVMOD,#PSL$S_PRVMOD,(SP) ; make prvmod=exec
	PUSHAB	B^10$			; just beyond rei
	REI

;
; parse the input string
;

10$:	JSB	RM$XPFN			; parse/expand file name string
	BLBC	R0,30$			; branch if error
	BBS	#FWA$V_WILD_DIR,(R10),20$	; error if any wild cards
	BBS	#FWA$V_EXP_ROOT,(R10),20$	; error if rooted dir
	BITW	#<FWA$M_TYPE!FWA$M_VERSION!FWA$M_NAME>,-
		FWA$Q_FLAGS(R10)	; name, type and version should not
					; be specified on set default
	BEQLU	30$			; they weren't specified
20$:	RMSERR	DIR
30$:	PUSHL	R0			; save return status 
	BSBW	RM$CLEANUP		; cleanup ifab, fwa
	POPL	R0			; restore status 
	RET

	.END
