MODULE symbols (IDENT = 'V04-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  Command language editor
!
! ABSTRACT:
!
!	This facility is used to enhance the command language
!	and allow user-written commands to be available in the
!	language.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Tim Halvorsen, Feb 1980
!
! Modified by:
!
!	V03-001	DAS0001		David Solomon	03-Jul-1984
!		Return success if trying to add a duplicate symbol (SPR 55578).
!
!	V002	DWT0006		David W. Thiel	10-Dec-1981
!		Fix find_record to fail if asked for (n+1)st record.
!
!	V001	TMH0001		Tim Halvorsen	28-Mar-1981
!		Clear upper word of descriptor passed to scan_symbols
!		action routine, in case it uses the entire longword as
!		the length rather than the lower word.
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET';		! VAX/VMS common definitions

!** REQUIRE 'SRC$:CLEDEF';			! Utility definitions
!---
!
!	Require file for all modules in the command language editor
!
! IDENT V02-001
!
!---

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  Command language editor
!
! ABSTRACT:
!
!	This is the common require file for all modules in the
!	command language editor.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, unprivileged user mode utility,
!	operates at non-AST level.
!
! AUTHOR:  Tim Halvorsen,  Feb 1980
!
! MODIFIED BY:
!
!	V02-001	BLS0089		Benn Schreiber		16-Oct-1981
!		Add badvalue shared message
!----


!
!	Define commonly used BLISS definitions
!

!** REQUIRE 'LIB$:UTILDEF';			! Commonly used BLISS definitions
!---
!
!	Commonly used definitions for VMS modules written in BLISS
!
! Version 'V03-000'
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982 BY					    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! ABSTRACT:
!
!	This is the common require file for any module written
!	in BLISS
!
! ENVIRONMENT:
!
!	VAX/VMS operating system.
!
! AUTHOR:  Tim Halvorsen,  Feb 1980
!
! MODIFIED BY:
!
!----

!
!	Equated symbols
!

LITERAL
    true	= 1,			! boolean true
    false	= 0,			! boolean false
    ok		= 1,			! success return code
    error	= 2,			! error return code
    quad	= 8;			! quadword allocation definition

!
!	Define structure type for VMS structures
!

STRUCTURE
    bblock [o, p, s, e; n] =
		[n]
		(bblock+o)<p,s,e>;

MACRO
    descriptor [] =		! Generate a static string descriptor
	UPLIT (%CHARCOUNT (%STRING (%REMAINING)),
	       UPLIT BYTE (%STRING (%REMAINING))) %;

MACRO
    own_desciptor [] =		! Generate the actual static string descriptor
	BBLOCK [8] INITIAL(%CHARCOUNT(%STRING(%REMAINING)),
			UPLIT BYTE (%STRING(%REMAINING))) %;

MACRO
    return_if_error(command) =
	BEGIN
	LOCAL
	    status;

	status = command;
	IF NOT .status
	THEN
	    RETURN .status;
	END%;

MACRO
    signal_if_error(command) =
	BEGIN
	LOCAL
	    status;

	status = command;
	IF NOT .status
	THEN
	    BEGIN
	    SIGNAL(.status);
	    RETURN .status;
	    END;
	END%;

!
! Macro to implement a function (f) of the message severity level that
! maps the various severity levels such that arithmetic comparisions of the
! mapped values (  f(severity) )  yield a order of precedence that is 
! intuivitvely acceptable:
!
!
!		ERROR NAME     OLDVAL     NEWVAL
!
!		F(SUCCESS)	  1   -->   0
!		F(INFORMATIONAL)  3   -->   2
!		F(WARNING)	  0   -->   3
!		F(ERROR)	  2   -->   5
!		F(SEVERE_ERROR)	  4   -->   7
!

MACRO
    severity_level (status) =
	BEGIN
	LOCAL code: BBLOCK [LONG];
	code = status;
	.code [sts$v_severity] - (4 * .code [sts$v_success]) + 3
	END%;

MACRO
    cli$external(prefix) =
	%IF %DECLARED(%QUOTE %QUOTE cli$prefix)
		%THEN UNDECLARE %QUOTE %QUOTE cli$prefix; %FI
	MACRO cli$prefix = prefix %QUOTE %;
	EXTERNAL LITERAL
	    cli$external_loop(%REMAINING)%,

    cli$external_loop[name] =
	%NAME(cli$prefix,name): UNSIGNED(8)%;

MACRO
    $external_literal(symbol) =
	BEGIN
	%IF NOT %DECLARED(symbol) %THEN EXTERNAL LITERAL symbol
	%IF %LENGTH GTR 1 %THEN : %REMAINING %FI; %FI
	symbol
	END%;

MACRO
    $fab_dev(dev_bit) =		! Access FAB$L_DEV bits of FAB block
	$BYTEOFFSET(fab$l_dev),
	$BITPOSITION(%NAME('dev$v_',dev_bit)),1,0%;

!
! $SHR_MESSAGES - a macro which defines facility-specific message codes
!	which are based on the system-wide shared message codes.
!
!	$SHR_MESSAGES( name, code, (msg,severity), ... )
!
!	where:
!	    "name" is the name of the facility (e.g., COPY)
!	    "code" is the corresponding facility code (e.g., 103)
!	    "msg" is the name of the shared message (e.g., BEGIN)
!	    "severity" is the desired message severity (e.g., 1, 0, 2)
!

MACRO
    $SHR_MESSAGES( FACILITY_NAME, FACILITY_CODE ) =
	LITERAL
	SHR$MSG_IDS( FACILITY_NAME, FACILITY_CODE, %REMAINING ); %,

    SHR$MSG_IDS( FACILITY_NAME, FACILITY_CODE) [ VALUE ] =
	SHR$MSG_CALC( FACILITY_NAME, FACILITY_CODE, %REMOVE(VALUE) ) %,

    SHR$MSG_CALC( FACILITY_NAME, FACILITY_CODE, MSG_ID, SEVERITY ) =
	%NAME(FACILITY_NAME,'$_',MSG_ID) = %NAME('SHR$_',MSG_ID) + FACILITY_CODE*65536 +
	    %IF %DECLARED(%NAME('STS$K_',SEVERITY))
		%THEN %NAME('STS$K_',SEVERITY)
		%ELSE SEVERITY %FI %;


!** REQUIRE 'LIB$:CLIDEF.B32';		! CLI command table definitions
 ! 
 !	Command language interpreter command table structures 
 ! 
 ! IDENT	V03-003 
 ! 
  
 ! 
 !**************************************************************************** 
 !*									    * 
 !*  COPYRIGHT (c) 1978, 1980, 1982 BY					    * 
 !*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    * 
 !*  ALL RIGHTS RESERVED.						    * 
 !* 									    * 
 !*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   * 
 !*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   * 
 !*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   * 
 !*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   * 
 !*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   * 
 !*  TRANSFERRED.							    * 
 !* 									    * 
 !*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   * 
 !*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   * 
 !*  CORPORATION.							    * 
 !* 									    * 
 !*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   * 
 !*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    * 
 !* 									    * 
 !*									    * 
 !**************************************************************************** 
 ! 
  
 !++ 
 ! FACILITY:  DCL & MCR Command language interpreters 
 ! 
 ! ABSTRACT: 
 ! 
 !	These are the command table structure definitions 
 !	which describe the generic command table format used 
 !	by the DCL and MCR command interpreters. 
 ! 
 ! ENVIRONMENT: 
 ! 
 !	VAX/VMS operating system. supervisor mode. 
 ! 
 ! AUTHOR:  Tim Halvorsen, Feb 1980 
 ! 
 ! Modified by: 
 ! 
 !	V03-003	PCG0005		Peter George	22-Nov-1982 
 !		Add INT_W_PMPTLEN and INT_L_PMPTADDR and remove 
 !		INT_L_PROMPT. 
 ! 
 !	V03-002	PCG0004		Peter George	18-Oct-1982 
 !		Add VEC_C_PROMPTMAX, INT_L_PROMPT, and ENT_V_SPELL. 
 ! 
 !	V03-001	PCG0003		Peter George	15-Jul-1982 
 !		Add INT data structure for CLI$INTERFACE routines. 
 !-- 
 
 
 ! 
 !	Note that the term "SRO" stands for self-relative offset. 
 !	The actual address is computed by adding the signed contents 
 !	of the field to the address of the structure. 
 ! 
 !	If the offset is zero, then there is no associated data. 
 ! 
 
 
  
 ! 
 !	DEFINE VECTOR AT FRONT OF COMMAND TABLES DESCRIBING 
 !	OFFSETS INTO THE SECTION FOR VARIOUS TABLES. 
 ! 
  
 !...$VECDEF	
 MACRO		VEC_L_IMAGETBL	= 0,0,32,0%; 		! OFFSET TO IMAGE TABLE 
 MACRO		VEC_L_PROMPTBL	= 4,0,32,0%; 		! OFFSET TO PROMPT TABLE 
 MACRO		VEC_L_QUALTBL	= 8,0,32,0%; 		! OFFSET TO QUALIFIER TABLE 
 MACRO		VEC_L_VERBTBL	= 12,0,32,0%; 		! OFFSET TO BUILT-IN VERB TABLE 
 MACRO		VEC_L_VERBEND	= 16,0,32,0%; 		! OFFSET TO END OF VERBTBL 
 MACRO		VEC_L_USRCMD	= 20,0,32,0%; 		! OFFSET TO USER VERB TABLE 
 MACRO		VEC_L_USREND	= 24,0,32,0%; 		! OFFSET TO END OF USER VERB TABLE 
 MACRO		VEC_L_COMDPTR	= 28,0,32,0%; 		! OFFSET TO BUILT-IN POINTER TABLE 
 MACRO		VEC_L_USERPTR	= 32,0,32,0%; 		! OFFSET TO USER POINTER TABLE 
 MACRO		VEC_L_FREE	= 36,0,32,0%; 			! OFFSET TO NEXT FREE BYTE 
 MACRO		VEC_B_STRLVL	= 40,0,8,0%; 		! TABLE STRUCTURE LEVEL 
 LITERAL	
 $EQULST (VEC_C_,GBL,0,1  
 	,(STRLVL,5) 			! CURRENT STRUCTURE LEVEL 
 	); 
 MACRO		VEC_B_PROMPTMAX	= 41,0,8,0%; 		! MAXIMUM SIZE OF ANY PROMPT STRING 
 LITERAL	VEC_C_LENGTH3	= 42; 
 LITERAL	VEC_K_LENGTH3	= 42; 				! LENGTH OF STR LEVEL 3 AND BEFORE VEC 
 MACRO		VEC_B_CLI	= 42,0,8,0%; 			! CLI TYPE 
 LITERAL	
 $EQULST (VEC_C_,GBL,0,1  
 	,(DCL,0) 				! TABLES ARE FOR DCL 
 	,(MCR,1) 				! TABLES ARE FOR MCR 
 	); 
 MACRO		VEC_W_SIZE	= 44,0,16,0%; 			! SIZE IN BYTES OF VECTOR AREA 
 LITERAL	VEC_C_LENGTH	= 60; 
 LITERAL	VEC_K_LENGTH	= 60; 				! LENGTH OF VECTOR AREA 
 LITERAL	VEC_C_PROMPTMAX	= 32; 			! MAXIMUM SIZE OF ANY PROMPT STRING 

 
 
 ! 
 !	DEFINE COMMAND DESCRIPTOR BLOCK 
 ! 
  
 !...$CMDDEF	
 MACRO		CMD_B_SIZE	= 0,0,8,0%; 		! SIZE OF COMMAND DESCRIPTOR BLOCK 
 MACRO		CMD_B_VERBTYP	= 1,0,8,0%; 	! VERB GENERIC TYPE 
 MACRO		CMD_B_PARMCNT	= 2,0,8,0%; 	! MIN/MAX PARAMETER COUNTS 
 			 
 MACRO		CMD_V_MINPARM	= 2,0,4,0%; 	! MINIMUM NUMBER OF PARAMETERS REQUIRED 
 MACRO		CMD_V_MAXPARM	= 2,4,4,0%; 	! MAXIMUM NUMBER OF PARAMETERS ALLOWED 
 			
 MACRO		CMD_B_FLAGS	= 3,0,8,0%; 		! COMMAND FLAGS 
 			 
 MACRO		CMD_V_ABREV	= 3,0,1,0%; 		! COMMAND MAY BE ABBREVIATED NON-UNIQUELY 
 LITERAL	CMD_M_ABREV	= 1^1 - 1^0; 
 				! TO A SINGLE CHARACTER 
 MACRO		CMD_V_NOSTAT	= 3,1,1,0%; 		! COMMAND DOES NOT RETURN VALID STATUS 
 LITERAL	CMD_M_NOSTAT	= 1^2 - 1^1; 
 MACRO		CMD_V_FOREIGN	= 3,2,1,0%; 		! FOREIGN COMMAND - NO PARSING IS DONE 
 LITERAL	CMD_M_FOREIGN	= 1^3 - 1^2; 
 MACRO		CMD_V_IMMED	= 3,3,1,0%; 		! COMMAND IS IMMEDIATELY DISPATCHED W/O PARSING 
 LITERAL	CMD_M_IMMED	= 1^4 - 1^3; 
 MACRO		CMD_V_MCRPARSE	= 3,4,1,0%; 	! COMMAND IS MCR STYLE COMMAND (OUT=IN) 
 LITERAL	CMD_M_MCRPARSE	= 1^5 - 1^4; 
 				! (THIS FLAG ONLY EXAMINED BY MCR CLI) 
 			
 MACRO		CMD_W_IMAGE	= 4,0,16,1%; 	! SRO TO ASCIC IMAGE NAME 
 MACRO		CMD_W_QUALS	= 6,0,16,1%; 	! SRO TO FIRST NONPOSITIONAL ENTITY 
 MACRO		CMD_W_PARMS	= 8,0,16,1%; 	! SRO TO FIRST POSITIONAL ENTITY 
 MACRO		CMD_W_OUTPUTS	= 10,0,16,1%; 	! SRO TO LIST OF "OUTPUT" ENTITIES 
 MACRO		CMD_W_MUTEXSET	= 12,0,16,1%; 	! SRO TO MUTUAL EXCLUSION SET 
 MACRO		CMD_W_IMPSET	= 14,0,16,1%; 	! SRO TO IMPLICATION SET 
 LITERAL	CMD_C_LENGTH	= 16; 
 LITERAL	CMD_K_LENGTH	= 16; 			! LENGTH OF FIXED PORTION 
 ! 
 ! OUTPUT LIST FORMAT: 
 ! 
 ! FIRST BYTE CONTAINS COUNT OF ENTRIES IN LIST EACH ENTRY IS ONE BYTE, 
 ! SIGNED, DESCRIBING THAT "OUTPUT NUMBER".  NEGATIVE VALUES INDICATE THE 
 ! OUTPUT IS A PARAMETER AND THE ABS(VALUE) IS THE PARAMETER NUMBER. 
 ! POSITIVE VALUES INDICATE THE OUTPUT IS A QUALIFIER AND THE VALUE IS A 
 ! QUALIFIER NUMBER. 
 ! 
 ! QUAL IS (0:MAXQUALS-1),PARM IS (MAXQUALS:255) 
 ! 
 LITERAL	CMD_C_MAXPARMS	= 8; 		! MAXIMUM POSSIBLE PARAMETERS 
 LITERAL	CMD_C_MAXQUALS	= 248; 		! MAXIMUM POSSIBLE QUALIFIERS (256-8) 

 
 
 ! 
 !	DEFINE ENTITY DESCRIPTOR BLOCK 
 ! 
  
 !...$ENTDEF	
 MACRO		ENT_B_NEXT	= 0,0,8,0%; 		! OFFSET TO NEXT BLOCK IN CHAIN 
 MACRO		ENT_B_SIZE	= 1,0,8,0%; 		! SIZE OF THIS BLOCK IN BYTES 
 MACRO		ENT_B_TYPE	= 2,0,8,0%;  
 LITERAL	
 $EQULST (ENT_C_,GBL,0,1  
 	,(PARAMETER,) 		! POSITIONAL VALUE DELIMITED BY SPACE 
 	,(QUALIFIER,) 		! NONPOSITIONAL KEYWORD DELIMITED BY SLASH 
 	); 
 MACRO		ENT_B_VALTYPE	= 3,0,8,0%; 	! TYPE OF VALUE 
 LITERAL	
 $EQULST (ENT_C_,GBL,1,1 		! (STARTING AT #1) 
 	,(INFILE,) 			! INPUT FILE SPECIFICATION 
 	,(OUTFILE,) 			! OUTPUT FILE SPECIFICATION 
 	,(NUMBER,) 			! DECIMAL INTEGER NUMBER 
 	,(PRIVILEGE,) 		! PRIVILEGE KEYWORD 
 	,(DATETIME,) 		! DATE/TIME SPECIFICATION 
 	,(PROTECTION,) 		! PROTECTION SPECIFICATION 
 	,(PROCESS,) 			! PROCESS NAME 
 	,(INLOG,) 			! INPUT LOGICAL NAME 
 	,(OUTLOG,) 			! OUTPUT LOGICAL NAME 
 	,(INSYM,) 			! INPUT SYMBOL NAME 
 	,(OUTSYM,) 			! OUTPUT SYMBOL NAME 
 	,(NODE,) 			! NODE NAME 
 	,(DEVICE,) 			! NODE/DEVICE NAME 
 	,(DIR,) 			! NODE/DEVICE/DIRECTORY NAME 
 	,(UIC,) 			! UIC SPECIFICATION 
 	,(RESTOFLINE,) 		! GOBBLE REST OF COMMAND STRING AS VALUE 
 	); 
 		 
 MACRO		ENT_W_NAME	= 4,0,16,1%; 	! SRO TO ASCIC ENTITY NAME (USER SPELLING) 
 MACRO		ENT_W_NUMBER	= 4,0,16,0%; 	! OR, PARAMETER NUMBER (POSITIONAL) 
 MACRO		ENT_W_LABEL	= 6,0,16,1%; 	! SRO TO ASCIC ENTITY LABEL (FOR PGM USE) 
 MACRO		ENT_W_DEFVAL	= 8,0,16,1%; 	! SRO TO ASCIC DEFAULT VALUE 
 MACRO		ENT_W_SYNTAX	= 10,0,16,1%; 	! SRO TO SYNTAX LIST 
 MACRO		ENT_W_KEYWORDS	= 12,0,16,1%; 	! SRO TO VALUE KEYWORD LIST 
 				! IF ZERO, ALL VALUES ARE LEGAL 
 MACRO		ENT_W_PROMPT	= 14,0,16,1%; 	! SRO TO VALUE PROMPT 
 MACRO		ENT_L_FLAGS	= 16,0,32,0%; 		! ENTITY FLAGS 
 			 
 MACRO		ENT_V_FILE	= 16,0,1,0%; 		! VALUE IS FILE SPECIFICATION 
 LITERAL	ENT_M_FILE	= 1^1 - 1^0; 
 MACRO		ENT_V_VAL	= 16,1,1,0%; 		! CAN HAVE A VALUE 
 LITERAL	ENT_M_VAL	= 1^2 - 1^1; 
 MACRO		ENT_V_NEG	= 16,2,1,0%; 		! VALUE CAN BE NEGATED 
 LITERAL	ENT_M_NEG	= 1^3 - 1^2; 
 MACRO		ENT_V_DEFTRUE	= 16,3,1,0%; 		! TRUE BY DEFAULT 
 LITERAL	ENT_M_DEFTRUE	= 1^4 - 1^3; 
 MACRO		ENT_V_BATDEF	= 16,4,1,0%; 		! PRESENT BY DEFAULT IF BATCH JOB 
 LITERAL	ENT_M_BATDEF	= 1^5 - 1^4; 
 MACRO		ENT_V_VALREQ	= 16,5,1,0%; 		! VALUE IS REQUIRED 
 LITERAL	ENT_M_VALREQ	= 1^6 - 1^5; 
 MACRO		ENT_V_LIST	= 16,6,1,0%; 		! COMMA-SEPARATED LIST OF VALUES ALLOWED 
 LITERAL	ENT_M_LIST	= 1^7 - 1^6; 
 MACRO		ENT_V_CONCAT	= 16,7,1,0%; 		! CONCATENATED VALUES ALLOWED 
 LITERAL	ENT_M_CONCAT	= 1^8 - 1^7; 
 MACRO		ENT_V_IMPCAT	= 16,8,1,0%; 		! VALUES ARE IMPLICITLY CONCATENATED 
 LITERAL	ENT_M_IMPCAT	= 1^9 - 1^8; 
 MACRO		ENT_V_VERB	= 16,9,1,0%; 		! QUALIFIER CAN APPEAR ON COMMAND VERB 
 LITERAL	ENT_M_VERB	= 1^10 - 1^9; 
 MACRO		ENT_V_PARM	= 16,10,1,0%; 		! QUALIFIER CAN APPEAR ON PARAMETER 
 LITERAL	ENT_M_PARM	= 1^11 - 1^10; 
 MACRO		ENT_V_MCROPTDLM	= 16,11,1,0%; 	! VALUE DELIMITER IS OPTIONAL (MCR) 
 LITERAL	ENT_M_MCROPTDLM	= 1^12 - 1^11; 
 MACRO		ENT_V_MCRIGNORE	= 16,12,1,0%; 	! IGNORE THIS ENTITY BLOCK (MCR) 
 LITERAL	ENT_M_MCRIGNORE	= 1^13 - 1^12; 
 MACRO		ENT_V_SPELL	= 16,13,1,0%; 		! ONLY CHECK FIRST FOUR CHARS OF KEYWORD VALUES 
 LITERAL	ENT_M_SPELL	= 1^14 - 1^13; 
 			
 LITERAL	ENT_C_LENGTH	= 20; 
 LITERAL	ENT_K_LENGTH	= 20; 			! LENGTH OF FIXED LENGTH PORTION 

 
 
 ! 
 !	DEFINE CHANGE LIST STRUCTURE 
 ! 
  
 !...$CHGDEF	
 MACRO		CHG_B_SIZE	= 0,0,8,0%; 		! SIZE OF CHANGE LIST BLOCK 
 MACRO		CHG_B_FLAGS	= 1,0,8,0%; 		! FLAGS 
 			 
 MACRO		CHG_V_IMAGE	= 1,0,1,0%; 		! IMAGE CHANGE 
 LITERAL	CHG_M_IMAGE	= 1^1 - 1^0; 
 MACRO		CHG_V_PARMS	= 1,1,1,0%; 		! PARAMETER(S) CHANGE 
 LITERAL	CHG_M_PARMS	= 1^2 - 1^1; 
 MACRO		CHG_V_QUALS	= 1,2,1,0%; 		! QUALIFIER(S) CHANGE 
 LITERAL	CHG_M_QUALS	= 1^3 - 1^2; 
 MACRO		CHG_V_MCRIGNORE	= 1,3,1,0%; 	! IGNORE IF CLI IS MCR 
 LITERAL	CHG_M_MCRIGNORE	= 1^4 - 1^3; 
 			
 MACRO		CHG_W_IMAGE	= 2,0,16,1%; 	! SRO TO NEW IMAGE 
 MACRO		CHG_B_PARMCNT	= 4,0,8,0%; 	! MIN/MAX PARAMETER COUNTS 
 			 
 MACRO		CHG_V_MINPARM	= 4,0,4,0%; 	! MINIMUM NUMBER OF PARAMETERS REQUIRED 
 MACRO		CHG_V_MAXPARM	= 4,4,4,0%; 	! MAXIMUM NUMBER OF PARAMETERS ALLOWED 
 			
 MACRO		CHG_W_PARMS	= 5,0,16,1%; 	! SRO TO FIRST PARAMETER DESCRIPTOR 
 MACRO		CHG_W_QUALS	= 7,0,16,1%; 	! SRO TO FIRST QUALIFIER DESCRIPTOR 
 LITERAL	CHG_C_LENGTH	= 9; 
 LITERAL	CHG_K_LENGTH	= 9; 	 

 
 
 ! 
 !	DEFINE IND STRUCTURE FOR CLI$INTERFACE ROUTINES 
 ! 
  
 !...$INTDEF	
 			 
 MACRO		INT_B_TYPE	= 0,0,8,0%; 		! TYPE OF REQUEST 
 MACRO		INT_L_TABLES	= 4,0,32,0%; 		! ADDRESS OF COMMAND TABLES 
 			 
 MACRO		INT_W_ENTLEN	= 8,0,16,0%; 	! LENGTH OF ENTITY NAME 
 MACRO		INT_L_ENTADDR	= 12,0,32,0%; 		! ADDRESS OF ENTITY NAME 
 			 
 MACRO		INT_W_RETLEN	= 8,0,16,0%; 	! LENGTH OF RETURN VALUE 
 MACRO		INT_L_RETADDR	= 12,0,32,0%; 		! ADDRESS OF RETURN VALUE 
 MACRO		INT_L_GETVM	= 16,0,32,0%; 		! ADDRESS OF LIB$GET_VM ROUTINE 
 MACRO		INT_L_FREEVM	= 20,0,32,0%; 		! ADDRESS OF LIB$FREE_VM ROUTINE 
 MACRO		INT_L_LIST	= 24,0,32,0%; 		! ADDRESS OF AUXILIARY ARGUMENT LIST 
 LITERAL	INT_C_LENGTH	= 28; 
 LITERAL	INT_K_LENGTH	= 28; 	 
 			 
 MACRO		INT_L_LISTLEN	= 0,0,32,0%; 		! LENGTH OF AUXILIARY ARGUMENT LIST 
 MACRO		INT_L_PROMPTRTN	= 4,0,32,0%; 	! ADDRESS OF PROMPT ROUTINE 
 MACRO		INT_L_CONTINRTN	= 8,0,32,0%; 	! ADDRESS OF CONTINUATION ROUTINE 
 MACRO		INT_W_PMPTLEN	= 12,0,16,0%; 	! LENGTH OF PROMPT STRING 
 MACRO		INT_L_PMPTADDR	= 16,0,32,0%; 	! ADDRESS OF PROMPT STRING 

!
!	Define shared message codes.
!

$SHR_MESSAGES(msg,155,
	(badvalue,severe),		! Bad value for keyword
	(syntax,severe),		! Syntax error
	(openin,error),			! Unable to access input file
	(openout,severe),		! Unable to access output file
	(readerr,severe),		! Error reading input file
	(closedel,error),		! Unable to close input file
	(searchfail,error),		! Error searching for file
	(writeerr,error),		! Error writing file
	);

MACRO
    emsg(ident) =
	BEGIN
	%IF NOT %DECLARED(%NAME('msg$_',ident))
		%THEN EXTERNAL LITERAL %NAME('msg$_',ident); %FI
	%NAME('msg$_',ident)
	END%;

!** REQUIRE 'LIB$:SYMDEF';			! Symbol table definitions
 !----- 
 ! 
 !	Symbol table management structures 
 ! 
 ! IDENT V02-000 
 ! 
 !----- 
  
 ! 
 !**************************************************************************** 
 !*									    * 
 !*  COPYRIGHT (c) 1978, 1980, 1982 BY					    * 
 !*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    * 
 !*  ALL RIGHTS RESERVED.						    * 
 !* 									    * 
 !*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   * 
 !*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   * 
 !*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   * 
 !*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   * 
 !*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   * 
 !*  TRANSFERRED.							    * 
 !* 									    * 
 !*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   * 
 !*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   * 
 !*  CORPORATION.							    * 
 !* 									    * 
 !*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   * 
 !*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    * 
 !* 									    * 
 !*									    * 
 !**************************************************************************** 
 ! 
  
  
 ! 
 !	Define symbol table entry 
 ! 
 !	(Length is SYM$C_FIXEDLEN + .SYM$B_SYMLEN) 
 ! 
  
 !...$SYMDEF	
  
 MACRO		SYM$L_LINK	= 0,0,32,0%; 		! LINK TO NEXT IN CHAIN 
 MACRO		SYM$L_VALUE	= 4,0,32,0%; 		! VALUE OF SYMBOL 
 MACRO		SYM$B_SYMLEN	= 8,0,8,0%; 	! LENGTH OF SYMBOL NAME 
 LITERAL	SYM$C_FIXEDLEN	= 9; 
 LITERAL	SYM$K_FIXEDLEN	= 9; 		! LENGTH OF FIXED PORTION OF ENTRY 
 MACRO		SYM$T_SYMBOL	= 9,0,8,0%; 	! SYMBOL NAME 

!
! Table of contents
!

FORWARD ROUTINE
    add_record,				! Add record to linked list
    find_record,			! Find record by number
    delete_list,			! Deallocate entire record list
    add_symbol,				! Add symbol to symbol table
    lookup_symbol,			! Lookup symbol in symbol table
    lookup_value,			! Lookup value in symbol table
    scan_symbols,			! Scan all symbols in symbol table
    delete_symbol,			! Delete symbol from symbol table
    delete_symbols,			! Delete entire symbol table
    allocate,				! Allocate dynamic storage
    deallocate;				! Deallocate dynamic storage

!
! Storage definitions
!

GLOBAL
    symbol_header:	VECTOR [64]	! List of listheads for symbol tables
			INITIAL(REP 64 OF (0));	! Set all listheads empty

!
! External routines
!

EXTERNAL ROUTINE
    lib$get_vm: ADDRESSING_MODE(GENERAL),	! Allocate dynamic storage
    lib$free_vm: ADDRESSING_MODE(GENERAL);	! Deallocate dynamic storage

GLOBAL ROUTINE add_record (listhead, address, length) =

!---
!
!	This routine adds a given data record to the
!	end of a given linked list.
!
! Inputs:
!
!	listhead = Address of listhead for list
!	address = Address of data record
!	length = Length of data record
!
! Outputs:
!
!	routine = status (already signaled)
!---

BEGIN

LOCAL
    new_entry:	REF VECTOR,		! Address of newly allocated entry
    entry:	REF VECTOR;		! Current entry address


RETURN_IF_ERROR 			! Allocate space; signal any error
	(allocate(.length+8,new_entry));

new_entry [1] = .length;		! Set length into entry
CH$MOVE(.length, .address, new_entry [2]);	! Copy data into entry

entry = .listhead;			! Start at listhead itself

WHILE .entry [0] NEQ 0			! While not end of list
DO
    entry = .entry [0];			! link to next in chain

entry [0] = .new_entry;			! set link of last entry to new one
new_entry [0] = 0;			! and set new "end of list"

RETURN true;

END;

GLOBAL ROUTINE find_record (listhead, number, retadr) =

!---
!
!	This routine locates a given record of data by
!	record number in any given list.  The address
!	returned is the address of the data itself.
!
! Inputs:
!
!	listhead = Address of listhead of list
!	number = Record number to find
!	retadr = Address of longword to receive data address
!
! Outputs:
!
!	routine = true if found, else false
!---

BEGIN

LOCAL
    entry:	REF VECTOR;		! Address of current entry

entry = ..listhead;			! Start at first entry

INCR i FROM 1 TO .number-1		! Skip first number-1 entries
DO
    BEGIN
    IF .entry EQL 0			! If premature end of list,
    THEN
	RETURN false;			! return entry not found
    entry = .entry [0];			! Skip to next entry in list
    END;

IF .entry EQL 0				! End of list
THEN
    RETURN false;

.retadr = entry [2];			! Return address of data itself
RETURN true;				! Return successful

END;

GLOBAL ROUTINE delete_list (listhead) =

!---
!
!	This routine deallocates all storage associated
!	with a given record list.
!
! Inputs:
!
!	listhead = Address of listhead for list
!
! Outputs:
!
!	None
!---

BEGIN

LOCAL
    entry:	REF VECTOR;		! Address of current entry

entry = ..listhead;			! Start at first entry

WHILE .entry NEQ 0			! For each entry in list,
DO
    BEGIN
    LOCAL next_entry;
    next_entry = .entry [0];		! Save pointer to next entry
    deallocate(.entry [1]+8, .entry);	! Deallocate memory for entry
    entry = .next_entry;		! Skip to next entry in list
    END;

.listhead = 0;				! Zero listhead

RETURN true;				! Success

END;

GLOBAL ROUTINE add_symbol (table, name_desc, value) =

!---
!
!	This routine adds a given symbol name and value to
!	the symbol table.  The symbol table list is sorted
!	by symbol name.
!
! Inputs:
!
!	table = Symbol table index
!	name_desc = Address of descriptor of symbol name
!	value = Value to be assigned to the symbol
!
! Outputs:
!
!	r0 = status (already signaled)
!---

BEGIN

MAP
    name_desc:	REF BBLOCK [DSC$K_S_BLN];! Address of name descriptor

LOCAL
    entry:	REF BBLOCK,		! Address of symbol table entry
    location:	REF BBLOCK;		! Address of closest symbol name

IF lookup_symbol (.table, .name_desc, location)	! If already in symbl table,
THEN
    BEGIN
!    SIGNAL(emsg(dupsym), 1, .name_desc);! signal user with bad symbol
    RETURN 1;				! return success
    END;


RETURN_IF_ERROR					! Allocate a symbol entry
	(allocate(sym$c_fixedlen+.name_desc [dsc$w_length],entry));

entry [sym$l_value] = .value;			! Set value of symbol
entry [sym$b_symlen]				! Set length of symbol
	= .name_desc [dsc$w_length];

CH$MOVE	(.name_desc [dsc$w_length],		! Copy symbol
	.name_desc [dsc$a_pointer],
	entry [sym$t_symbol]);

entry [sym$l_link]				! Link into symbol table
	= .location [sym$l_link];		! in sorted order
location [sym$l_link] = .entry;

RETURN true;

END;

GLOBAL ROUTINE lookup_symbol (table, name_desc, value) =

!---
!
!	This routine looks up a given symbol in the symbol
!	table and returns the value associated with it.
!	If the symbol is not found, then the address of the
!	last entry preceeding the symbol in collation
!	sequence is returned instead.
!
! Inputs:
!
!	table = Symbol table index (1-n)
!	name_desc = Descriptor of desired symbol name
!	value = Address of longword to receive value if found
!
! Outputs:
!
!	value = Value of symbol if found
!	value = Address of previous entry if not found
!	r0 = status
!---

BEGIN

MAP
    name_desc:	REF BBLOCK [DSC$K_S_BLN];! Address of descriptor

LOCAL
    ptr:	REF BBLOCK;		! Pointer into list

ptr = symbol_header [.table] - $BYTEOFFSET(sym$l_link);	! Start at listhead
.value = .ptr;

WHILE (ptr = .ptr [sym$l_link]) NEQ 0	! Until end of list
DO
     CASE CH$COMPARE(.ptr [sym$b_symlen], ptr [sym$t_symbol],
		.name_desc [dsc$w_length], .name_desc [dsc$a_pointer])
     FROM -1 TO 1 OF SET
     [-1]:  .value = .ptr;		! Table symbol < user symbol
     [0]:  BEGIN			! Table symbol = user symbol
	   .value = .ptr [sym$l_value];	!   Return value of symbol
	   RETURN true;			!   and exit successful
	   END;
     [1]: RETURN false;			! Table symbol > user symbol
     TES;

RETURN false;				! return symbol not found

END;

GLOBAL ROUTINE lookup_value (table, value, retdesc) =

!---
!
!	This routine locates the first occurrence of a symbol
!	containing the specified value and returns a descriptor
!	of the symbol associated with the value.
!
! Inputs:
!
!	table = Symbol table index (1-n)
!	value = Value to be looked up
!	retdesc = Address of quadword to receive descriptor
!
! Outputs:
!
!	routine = status
!---

BEGIN

MAP
    retdesc:	REF VECTOR;		! Address of descriptor

LOCAL
    ptr:	REF BBLOCK;		! Pointer into list

ptr = .symbol_header [.table];		! Start at first entry

WHILE .ptr NEQ 0			! Until end of list
DO
    BEGIN
    IF .ptr [sym$l_value] EQL .value	! If value matches,
    THEN
	BEGIN				! Return descriptor of name
	retdesc [0] = .ptr [sym$b_symlen];
	retdesc [1] = ptr [sym$t_symbol];
	RETURN true;			! and exit successful
	END;
    ptr = .ptr [sym$l_link];		! If no match, go to next entry
    END;

RETURN false;				! return symbol not found

END;

GLOBAL ROUTINE scan_symbols (table, action_routine) =

!---
!
!	This routine calls a specified action routine for
!	each symbol in the specified symbol table.
!
! Inputs:
!
!	table = Symbol table index (1-n)
!	action_routine = Address of action routine to call
!			with the following argument list:
!				1) Address of descriptor of symbol name
!				2) Value associated with symbol
!
! Outputs:
!
!	The status of the last action routine executed is returned.
!---

BEGIN

LOCAL
    status,				! Catch-all status return bucket
    desc:	VECTOR [2],		! Descriptor of symbol name
    ptr:	REF BBLOCK;		! Address of current symbol entry

ptr = .symbol_header [.table];		! Start at first entry

WHILE .ptr NEQ 0			! Until end of list,
DO
    BEGIN				! Setup descriptor of name
    desc [0] = .ptr [sym$b_symlen];
    desc [1] = ptr [sym$t_symbol];
    status = (.action_routine)(desc, .ptr [sym$l_value]); ! Call action routine
    IF NOT .status THEN EXITLOOP;	! If failed, exit unsuccessful
    ptr = .ptr [sym$l_link];		! Skip to next in chain
    END;

RETURN .status;				! return successful

END;

GLOBAL ROUTINE delete_symbol (table, name_desc) =

!---
!
!	This routine deletes a given symbol from the symbol
!	table.
!
! Inputs:
!
!	table = Symbol table index (1-n)
!	name_desc = Descriptor of symbol name to be deleted
!
! Outputs:
!
!	r0 = true if deleted, false if not found
!---

BEGIN

MAP
    name_desc:	REF BBLOCK [DSC$K_S_BLN];! Address of descriptor

LOCAL
    prev:	REF BBLOCK,		! Pointer to previous symbol
    ptr:	REF BBLOCK;		! Pointer into list

ptr = symbol_header [.table] - $BYTEOFFSET(sym$l_link);	! Start at listhead
prev = .ptr;				!  Ditto

WHILE (ptr = .ptr [sym$l_link]) NEQ 0	! Until end of list
DO
     CASE CH$COMPARE(.ptr [sym$b_symlen], ptr [sym$t_symbol],
		.name_desc [dsc$w_length], .name_desc [dsc$a_pointer])
     FROM -1 TO 1 OF SET
     [-1]:  prev = .ptr;		! Table symbol < user symbol
     [0]:  BEGIN			! Table symbol = user symbol
	   prev [sym$l_link] = .ptr [sym$l_link];	! Delink it
	   RETURN deallocate (sym$c_fixedlen+.ptr[sym$b_symlen], .ptr);	! free VM
	   END;
     [1]: RETURN false;			! Table symbol > user symbol
     TES;


RETURN false;				! return symbol not found

END;

GLOBAL ROUTINE delete_symbols (table) =

!---
!
!	This routine deallocates all symbols in a specified
!	symbol table.
!
! Inputs:
!
!	table = Symbol table index (1-n)
!
! Outputs:
!
!	None
!---

BEGIN

LOCAL
    ptr:	REF BBLOCK;		! Address of current entry

ptr = .symbol_header [.table];		! Start at first entry

WHILE .ptr NEQ 0			! Until end of list,
DO
    BEGIN
    LOCAL next_entry;
    next_entry = .ptr [sym$l_link];	! Save pointer to next entry
    deallocate(sym$c_fixedlen+.ptr [sym$b_symlen], .ptr);	! Deallocate entry
    ptr = .next_entry;			! Point to next entry in list
    END;

symbol_header [.table] = 0;		! Zero listhead

RETURN true;

END;

GLOBAL ROUTINE allocate (bytes, address) =

!---
!
!	Allocate dynamic storage and return the address.
!	If an error occurs, the error is signaled.
!
! Inputs:
!
!	bytes = Number of bytes to allocate
!	address = Longword to receive address of storage
!
! Outputs:
!
!	address = Address of storage
!---

BEGIN

LOCAL
    status;

status = lib$get_vm(bytes,.address);

IF NOT .status			! if unsuccessful,
THEN
    SIGNAL(.status);		! then signal the error

RETURN .status;			! return with status;

END;

GLOBAL ROUTINE deallocate (bytes, address) =

!---
!
!	Deallocate dynamic storage.
!	If an error occurs, the error is signaled.
!
! Inputs:
!
!	bytes = Number of bytes to deallocate
!	address = Address of storage to deallocate
!
! Outputs:
!
!	None
!---

BEGIN

LOCAL
    status;

status = lib$free_vm(bytes,address);

IF NOT .status			! if unsuccessful,
THEN
    SIGNAL(.status);		! then signal the error

RETURN .status;			! return with status;

END;

END
ELUDOM
