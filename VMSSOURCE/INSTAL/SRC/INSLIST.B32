MODULE INSLIST (			! Process /LIST and /FULL qualifiers
		IDENT = 'V04-000',
		ADDRESSING_MODE(EXTERNAL = GENERAL)
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  Install
!
! ABSTRACT:
!
!	Print the contents of a KFE entry or of all the entries.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system.
!
! AUTHOR:  Bob Grosso, April 1983
!
! Modified by:
!
!	V03-013	MSH0061		Michael S. Harvey	5-Jul-1984
!		List EXECUTE_ONLY attribute if set for known image.
!
!	V03-012	MSH0057		Michael S. Harvey	26-Jun-1984
!		List WRITEABLE attribute along with all the others.
!
!	V03-011	MSH0049		Michael S. Harvey	17-May-1984
!		Don't output meaningless and inaccurate data for
!		non-native mode installed images.
!
!	V03-010	MSH0037		Michael S. Harvey	26-Apr-1984
!		Fall back to hard device name if no volume name
!		is available.
!
!	V03-009	MSH0034		Michael S. Harvey	18-Apr-1984
!		Display raw device name string in KFD for /STRUCTURE
!		listing so we can see what's really stored there.
!
!	V03-008	MSH0028		Michael S. Harvey	9-Apr-1984
!		List maximum shared count correctly. Also, display
!		global section count to help interpret the other
!		counts being displayed on /FULL listings.
!
!	V03-007	MSH0026		Michael S. Harvey	4-Apr-1984
!		Recognize when known file database either doesn't
!		exist or is empty, and do the right thing when one
!		tries to access it.
!
!	V03-006	MSH0022		Michael S. Harvey	20-Mar-1984
!		Convert unconcealed device name, which may be an
!		allocation class type device name, into a form that
!		does not have the allocation class in it.
!
!	V03-005	BLS0256		Benn Schreiber		27-Dec-1983
!		Clean up buffer handling.  Reference all pool from EXEC
!		mode, since protected against user mode.
!
!	V03-004	RPG0004		Bob Grosso		13-Sep-1983
!		List WCB info.
!		Trim blanks from end of line.
!
!	V03-003	RPG0003		Bob Grosso		July 20, 1983
!		Clean up listing format.
!		Add /structure listing.
!		Print listing from user mode.
!
!	V03-002	RPG0002		Bob Grosso		July 8, 1983
!		Bypass printing WCB info.
!
!	V03-001	RPG0001		Bob Grosso		July 7, 1983
!		Reduce signalling while in EXEC mode.
!
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:LIB.L32';		! VAX/VMS system definitions

REQUIRE	'SRC$:INSPREFIX.REQ';
REQUIRE	'LIB$:INSDEF.R32';

%SBTTL  'Declarations';
!
! Table of contents
!

FORWARD ROUTINE
    INS_LIST,
    LIST_KFE_ENTRIES,				! Traverse structure to list all KFEs
    LIST_KFE_ENTRY,				! List one KFE
    FORMAT_KFD,					! Format and print KFD block
    FORMAT_KFE,					! Format and print KFE entry
    PRINT_PRIVS,				! Print the ASCII keywords for the bits set in a quadword privilege mask
    FORMAT_LINE,				! Format ASCII output into line buffer.
    TERMINATE_LINE : NOVALUE,			! Copy line buffer to temporary buffer
    FORMAT_TERMINATE_LINE : NOVALUE,		! Format then terminate line
    PRINTOUT;					! Print the contents of the temporary buffer

!
! External routines
!

EXTERNAL ROUTINE
    LIB$GET_VM,					! get virtual memory
    LIB$FREE_VM,				! return virtual memory
    LIB$PUT_OUTPUT,
    SYS$GETDVIW : ADDRESSING_MODE (GENERAL),	! Get Device Information
    SYS$FAOL : ADDRESSING_MODE (GENERAL);	! Format ASCII output

EXTERNAL ROUTINE
    INS$EXECUTE_IN_EXEC_WITH_R_LOCK;

EXTERNAL
    CTL$GL_KNOWNFIL,				! Process pointer to the Known file list pointer block
    EXE$GL_KNOWN_FILES,				! Exec pointer to the Known file list pointer block
    INS$GL_CTLMSK : BLOCK [1],			! INSTALL control flags
    INS$G_OUTRAB : BBLOCK,			! Record output block for output buffer
    PRV$AB_NAMES;				! ASCII list of privileges

EXTERNAL LITERAL
    INS$_EMPTYLST,				! The Known File List is empty
    INS$_FAILGETVM,				! Failed to get virtual memory
    INS$_NOLIST,				! There is no Known File List
    INS$_NOVER;					! Error obtaining file version

GLOBAL
    INS$FAOOUTBUF,				! Output buffer
    INS$FAOBUFDESC : BBLOCK [DSC$C_S_BLN];	! Descriptor of output buffer

GLOBAL LITERAL
    INS$C_FAOBUFLEN = 255;			! size of output buffer

!
!	Set up user buffer for copying lists to while in kernel mode
!
OWN
    TMPBUF_LEN,					! Size of allocated buffer
    TMPBUF,					! Address of allocated buffer
    TMPBUF_PTR : REF $BBLOCK;			! Point to free buffer space

BIND
    !
    !	Control strings for FAO
    !
    FAOCTL_DDT		= $DESCRIPTOR ('!AS!AS'),
    FAOCTL_VERSION	= $DESCRIPTOR (';!UW'),
    FAOCTL_KFDADR	= $DESCRIPTOR (' List head adr/siz/ref = !XL/!UW/!UW'),
    FAOCTL_FILNAM	= $DESCRIPTOR ('   !AC'),
    FAOCTL_FLAGS	= $DESCRIPTOR ('!AC'),
    FAOCTL_KFEADR	= $DESCRIPTOR ('        Entry address/size/index   = !XL/!UW/!XB'),
    FAOCTL_WINDOW	= $DESCRIPTOR ('        Window address/size        = !XL/!UW'),
    FAOCTL_HEADER	= $DESCRIPTOR ('        Header address/size        = !XL/!UW'),
    FAOCTL_USECNT	= $DESCRIPTOR ('        Entry access count         = !UL'),
    FAOCTL_SHRUSECNT	= $DESCRIPTOR ('        Current / Maximum shared   = !UW / !UW'),
    FAOCTL_CMODCURR	= $DESCRIPTOR ('        Current shared count	   = !UW'),
    FAOCTL_GBLCNT	= $DESCRIPTOR ('        Global section count       = !UW'),
    FAOCTL_COMPAT_TYP	= $DESCRIPTOR ('        Compatability type         = !XW'),
    FAOCTL_PRIVHD	= $DESCRIPTOR ('        Privileges = '),
    FAOCTL_PRIVHD2	= $DESCRIPTOR ('                     '),
    FAOCTL_PRIV		= $DESCRIPTOR ('!AC ');


%SBTTL	'GET_NUMENTRIES';
ROUTINE GET_NUMENTRIES (RETCOUNT) =
BEGIN
!+++
! FUNCTIONAL DESCRIPTION:
!
!	Return the number of entries to allocate for the listing.
!
!--
MAP
    RETCOUNT : REF VECTOR[,LONG];

BIND
    KFPB = EXE$GL_KNOWN_FILES : REF $BBLOCK;

IF .KFPB EQL 0
    THEN RETURN INS$_NOLIST;

IF .KFPB[KFPB$L_KFDLST] EQL 0
    THEN RETURN INS$_EMPTYLST;

RETCOUNT[0] = .KFPB[KFPB$W_KFDLSTCNT];
RETURN TRUE
END;

%SBTTL  'INS$LIST';

GLOBAL ROUTINE INS$LIST ( KFE ) =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!
!	Print the contents of either a specific KFE or all the KFE's.
!
!  INPUT:
!
!	kfe	 = 0 : list all the KFE entries in all the lists.
!		 = n : List the KFE entry at address "n".
!
!  IMPLICIT OUTPUT:
!
!	none
!
!  ROUTINE VALUE:
!
!---
LITERAL
    MAXLINLEN = 80,
    NUM_FULL_LINES = 3,
    NUM_STRUC_LINES = 3;

LOCAL
    NUM_ENTRIES,
    NUM_LINES,
    CME_ARGLST : VECTOR[2,LONG],
    STATUS;

!
! Initialize output buffer and descriptor
!
CH$FILL (%C' ',INS$C_FAOBUFLEN, .INS$FAOOUTBUF);
INS$FAOBUFDESC [DSC$W_LENGTH] = INS$C_FAOBUFLEN;
INS$FAOBUFDESC [DSC$A_POINTER] = .INS$FAOOUTBUF;

NUM_ENTRIES = 0;
CME_ARGLST[0] = 1;
CME_ARGLST[1] = NUM_ENTRIES;
STATUS = $CMEXEC(ROUTIN=GET_NUMENTRIES,ARGLST=CME_ARGLST);
IF .STATUS NEQ TRUE
THEN BEGIN
    SIGNAL(.STATUS);
    RETURN TRUE
    END;

IF .KFE NEQ 0
THEN
    NUM_ENTRIES = 2;				! KFE and KFD

NUM_LINES = 2;
IF .INS$GL_CTLMSK [INS$V_FULL] THEN NUM_LINES = .NUM_LINES + NUM_FULL_LINES;
IF .INS$GL_CTLMSK [INS$V_STRUCTURE] THEN NUM_LINES = .NUM_LINES + NUM_STRUC_LINES;
TMPBUF_LEN = MAXLINLEN * .NUM_LINES * .NUM_ENTRIES;
STATUS = LIB$GET_VM (TMPBUF_LEN, TMPBUF);
IF NOT .STATUS 
THEN 
    BEGIN
    SIGNAL (INS$_FAILGETVM, 1, .TMPBUF_LEN, .STATUS);
    RETURN TRUE;
    END;

CH$FILL (%C' ', .TMPBUF_LEN, .TMPBUF);
TMPBUF_PTR = .TMPBUF;


STATUS = INS$EXECUTE_IN_EXEC_WITH_R_LOCK (INS_LIST, .KFE);
PRINTOUT ();					! Print the contents of TMPBUF

EXECUTE ( LIB$FREE_VM (TMPBUF_LEN, TMPBUF) );			! Return the buffer

RETURN .STATUS;
END;					! routine  INS$LIST


%SBTTL  'INS_LIST';

ROUTINE INS_LIST ( KFE ) =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!
!	Print the contents of either a specific KFE or all the KFE's.
!
!  INPUT:
!
!	kfe	 = 0 : list all the KFE entries in all the lists.
!		 = n : List the KFE entry at address "n".
!
!  IMPLICIT INPUT:
!
!	ins$gl_ctlmsk :	INSTALL control flags determine whether to give an
!			abreviated or FULL listing.
!	ins$g_outrab :	Record access block for output stream.
!
!  OUTPUT:
!
!	List the known file image list for a single entry 
!	or for every entry in all the lists.
!
!  IMPLICIT OUTPUT:
!
!	none
!
!  ROUTINE VALUE:
!
!---
LOCAL
    STATUS;

!+++
!
!	Format and print the contents of the buffer
!
!---

IF .KFE EQL 0
THEN
    STATUS = LIST_KFE_ENTRIES ()
ELSE
    STATUS = LIST_KFE_ENTRY (.KFE);


RETURN .STATUS;
END;					! routine  INS_LIST


ROUTINE LIST_KFE_ENTRIES =
!+++
!
!
!---
BEGIN
LOCAL
    KFD : REF BBLOCK,
    KFE : REF BBLOCK;

BIND
    KFPB = EXE$GL_KNOWN_FILES : REF BBLOCK;

IF .KFPB EQL 0
THEN
    BEGIN
    RETURN INS$_NOLIST;
    END;

IF .KFPB [KFPB$L_KFDLST] EQL 0
THEN
    BEGIN
    RETURN INS$_EMPTYLST;
    END;

KFD = .KFPB [KFPB$L_KFDLST];

!
!   Traverse the list of KFDs and format each KFD and all its KFEs.
!   The KFD is the header block which contains the Device, directory and
!   file type which several Known File Entries (KFE) share in common.
!
WHILE .KFD NEQ 0 DO
    BEGIN
    FORMAT_KFD (.KFD);
    KFE = .KFD [KFD$L_KFELIST];

    !
    !	Format each KFE in the KFD's ordered list of KFEs
    !
    WHILE .KFE NEQ 0 DO
	BEGIN
	FORMAT_KFE (.KFE);
	KFE = .KFE [KFE$L_KFELINK];
	END;			! WHILE traversing KFD's ordered KFE list

    KFD = .KFD [KFD$L_LINK];	! Next KFD
    END;			! WHILE traversing KFD list

RETURN TRUE;
END;


ROUTINE LIST_KFE_ENTRY (KFE) =
!+++
!
!
!---
BEGIN
MAP
    KFE : REF BBLOCK;

FORMAT_KFD (.KFE [KFE$L_KFD]);

FORMAT_KFE (.KFE);

RETURN TRUE;
END;


ROUTINE FORMAT_KFD (KFD) =
!+++
!
!
!---
BEGIN
LITERAL
    INS_C_KFDPADLEN = 40;

LOCAL
    DEVNAM : BBLOCK [65],
    NEW_DEV : BBLOCK [65],
    DEVNAM_DSC : $BBLOCK [DSC$C_S_BLN],
    DDT_DSC : $BBLOCK [DSC$C_S_BLN],
    ITMLST : VECTOR [4,LONG]
	PRESET ( [0] = DVI$_LOGVOLNAM ^ 16 + 64,
		 [3] = 0),
    PAD;

MAP
    KFD : REF BBLOCK;

TERMINATE_LINE ();				! Blank line

IF .INS$GL_CTLMSK [INS$V_STRUCTURE]
THEN
    !
    ! For a /STRUCTURE listing, simply display the device name in its
    ! raw form as it was stored in the KFD.
    !
    BEGIN
    DEVNAM_DSC [DSC$W_LENGTH] = .KFD [KFD$B_DEVLEN];
    DEVNAM_DSC [DSC$A_POINTER] = KFD [KFD$T_DDTSTR];
    END
ELSE						! not /STRUCTURE listing
    !
    ! Build a device name by extracting it from the DDTSTR field of the KFD
    ! and prefixing it with an underscore. The underscore tells $GETDVI that
    ! this is a device name and not to bother trying to translate the string.
    !
    BEGIN
    DEVNAM_DSC[DSC$A_POINTER] = DEVNAM;		! Load addr of devnam string
    CH$WCHAR(%C'_',.DEVNAM_DSC[DSC$A_POINTER]);	! Device, not a logical name
    CH$MOVE(.KFD[KFD$B_DEVLEN],KFD[KFD$T_DDTSTR],.DEVNAM_DSC[DSC$A_POINTER]+1);
    DEVNAM_DSC[DSC$W_LENGTH] = .KFD[KFD$B_DEVLEN]+1; ! Calculate devnam string length

    !
    ! Call GETDVI to convert the device name into the volume's logical name
    ! string. This achieves a less confusing/intimidating device name display
    ! for the users.
    !
    ITMLST [1] = NEW_DEV;			! Load output buffer address
    ITMLST [2] = DEVNAM_DSC[DSC$W_LENGTH];	! Shove length into descriptor
    SYS$GETDVIW (0,0,DEVNAM_DSC,ITMLST,0,0,0,0);! Convert device name format

    !
    ! Build the output descriptor for formatting below. If there was a
    ! volume logical name defined, then go ahead and use it. If not, then
    ! we must use the original device name.
    !
    IF .DEVNAM_DSC[DSC$W_LENGTH] EQL 0
    THEN
	BEGIN
	DEVNAM_DSC [DSC$W_LENGTH] = .KFD [KFD$B_DEVLEN];
	DEVNAM_DSC [DSC$A_POINTER] = KFD [KFD$T_DDTSTR];
	END
    ELSE
	BEGIN
	CH$WCHAR(':',NEW_DEV+.DEVNAM_DSC[DSC$W_LENGTH]);   ! Add and count colon
	DEVNAM_DSC[DSC$W_LENGTH] = .DEVNAM_DSC[DSC$W_LENGTH] + 1 ;
	DEVNAM_DSC[DSC$A_POINTER] = NEW_DEV ;		   ! Finish descriptor
	END;
    END;
!
! Now, format the output line.
!
DDT_DSC[DSC$W_LENGTH] = .KFD[KFD$B_DDTSTRLEN] - .KFD[KFD$B_DEVLEN];
DDT_DSC[DSC$A_POINTER] = KFD[KFD$T_DDTSTR] + .KFD[KFD$B_DEVLEN];
FORMAT_LINE (FAOCTL_DDT, DEVNAM_DSC, DDT_DSC);	! Format the KFD output

IF .INS$GL_CTLMSK [INS$V_STRUCTURE]
THEN
    BEGIN
    !
    !   Pad the buffer out to INS_C_KFDPADLEN characters
    !
    PAD = INS_C_KFDPADLEN - (INS$C_FAOBUFLEN - .INS$FAOBUFDESC [DSC$W_LENGTH]);
    IF .PAD LEQ 0 
    THEN 
	BEGIN
	TERMINATE_LINE ();				! Print DDT string on first line
	PAD = INS_C_KFDPADLEN;
	END;

    INS$FAOBUFDESC [DSC$W_LENGTH] = .INS$FAOBUFDESC [DSC$W_LENGTH] - .PAD; !length is size left in buffer
    INS$FAOBUFDESC [DSC$A_POINTER] = .INS$FAOBUFDESC [DSC$A_POINTER] + .PAD;

    FORMAT_TERMINATE_LINE (FAOCTL_KFDADR, .KFD, 
	  .KFD [KFD$W_SIZE], .KFD [KFD$W_REFCNT]);	! Print KFD info
    END;

TERMINATE_LINE ();					! Blank line if /STRUCTURE, else prints DDT string

RETURN TRUE;
END;


ROUTINE FORMAT_KFE (KFE) =
!+++
!
!
!---
BEGIN
MAP
    KFE : REF BBLOCK;

!
!   Constants for setting file information block to get the file version
!   number returned via a call to QIO.
!
LITERAL
    FIB_C_FID = 10,
    FIB_C_DID = 12,
    FIB_S_FID = 8,
    INS_C_CTLFLGSTR = 12,
    INS_C_KFEPADLEN = 20;

OWN
    FILVER : LONG,					! Address to return file version
    ATRCTLBLK : BBLOCK [12]				! Attribute control block to get version number from QIO
		PRESET	([ATR$W_SIZE] = ATR$S_FILVER,
			 [ATR$W_TYPE] = ATR$C_FILVER,	! request file version
			 [ATR$L_ADDR] = FILVER
			),

    FIB : BBLOCK [FIB_C_DID],
    FIB_DESC : BBLOCK [DSC$C_S_BLN]
		PRESET ([DSC$W_LENGTH] = FIB_C_FID,
			[DSC$A_POINTER] = FIB ),

    !
    !	Control flag array to translate KFE flags to the ASCII
    !	to be formatted for output.
    !
    CTLFLG_ARRAY : VECTOR [2*INS_C_CTLFLGSTR] INITIAL (
		KFE$M_OPEN, 	CSTRING ('Open '),
		KFE$M_HDRRES, 	CSTRING ('Hdr '),
		KFE$M_SHARED, 	CSTRING ('Shar '),
		KFE$M_PROCPRIV, CSTRING ('Prv '),
		KFE$M_PROTECT, 	CSTRING ('Prot '),
		KFE$M_LIM, 	CSTRING ('Lnkbl '),
		KFE$M_COMPATMOD,CSTRING ('Cmode '),
		KFE$M_SHMIDENT, CSTRING ('Shm '),
		KFE$M_ACCOUNT, 	CSTRING ('Acnt '),
		KFE$M_NOPURGE, 	CSTRING ('Nopurg '),
		KFE$M_WRITEABLE,CSTRING	('Wrt '),
		KFE$M_EXEONLY,	CSTRING	('Xonly')
		);


LOCAL
    FID : BBLOCK [FIB_S_FID],
    FLAGS,
    KFD : REF BBLOCK,
    PAD,		! Number of blanks to pad after filename
    QIO_STATUS,
    STATUS,
    WCB_SHRCNT,
    WCB_SIZ,
    WCB : REF BBLOCK;

KFD = .KFE [KFE$L_KFD];

!
!   Print the File name
!
FORMAT_LINE (FAOCTL_FILNAM, KFE [KFE$B_FILNAMLEN]);

CH$FILL (0, FIB_S_FID, FID);	! zero it out
WCB = 0;

IF .KFE [KFE$V_OPEN]	! If installed /OPEN, get info from window control block
THEN
    BEGIN
    LOCAL
	FCB : REF BBLOCK;

    WCB = .KFE [KFE$L_WCB];
    IF .WCB NEQ 0
    THEN
	BEGIN
	WCB_SIZ = .WCB [WCB$W_SIZE];
	WCB_SHRCNT = .WCB [WCB$W_REFCNT] - .KFE [KFE$W_GBLSECCNT] - 1;	! Amount of file sharing
	FCB = .WCB [WCB$L_FCB];
	IF .FCB LSS 0
	THEN
	    BEGIN
	    CH$MOVE (FIB_S_FID, FCB [FCB$W_FID], FID)
	    END;
	END;
    END

ELSE
    CH$MOVE (FIB_S_FID, KFE [KFE$W_FID], FID);


!
!   If we obtained the file id field then the file version can be obtained via 
!   a call to QIO.
!
IF NOT CH$FAIL (CH$FIND_NOT_CH (FIB_S_FID, FID, 0))	! See if it is all zeros
THEN
    BEGIN
    LOCAL
	CHANNEL : WORD,
	DEVNAM_DESC : BBLOCK [DSC$C_S_BLN],
	IOSB : BBLOCK [8];

    CH$MOVE (FIB_S_FID, FID, FIB [FIB$W_FID] );
    !
    !	make descriptor of device name string
    !
    DEVNAM_DESC = .KFD [KFD$B_DEVLEN];
    DEVNAM_DESC [DSC$A_POINTER] = KFD [KFD$T_DDTSTR];

    !
    !	Assign a channel so QIO can be called to get file version
    !
    STATUS = $ASSIGN ( DEVNAM = DEVNAM_DESC, CHAN = CHANNEL);
    IF NOT .STATUS THEN RETURN .STATUS;
    FILVER = 0;
    QIO_STATUS = $QIOW (FUNC = IO$_ACCESS, CHAN = .CHANNEL,		! Get the file version
		   IOSB = IOSB, P1 = FIB_DESC, P5 = ATRCTLBLK);

    EXECUTE ($DASSGN (CHAN = .CHANNEL) );	! Deassign the channel

    IF NOT .IOSB
    THEN
	BEGIN
	! 
	!   Build a descriptor of the file name which is now in 
	!   the output buffer and indicate that the file was not found
	!
	LITERAL
	    DECODED_MSGBUF_LEN = 256,
	    ERRFILNAM_BUFLEN = 31;
	LOCAL
	    DECODED_MSGDSC : BBLOCK [DSC$C_S_BLN],
	    DECODED_MSGBUF : BBLOCK [DECODED_MSGBUF_LEN],
	    ERRFILNAM_DSC : BBLOCK [DSC$C_S_BLN],
	    ERRFILNAM_BUF : BBLOCK [ERRFILNAM_BUFLEN];

	ERRFILNAM_DSC [DSC$A_POINTER] = ERRFILNAM_BUF;
	ERRFILNAM_DSC = INS$C_FAOBUFLEN - .INS$FAOBUFDESC [DSC$W_LENGTH];
	IF .ERRFILNAM_DSC [DSC$W_LENGTH] GTR ERRFILNAM_BUFLEN
	THEN ERRFILNAM_DSC [DSC$W_LENGTH] = ERRFILNAM_BUFLEN;

	CH$MOVE (.ERRFILNAM_DSC [DSC$W_LENGTH], .INS$FAOOUTBUF, 
		ERRFILNAM_BUF);

	DECODED_MSGDSC = DECODED_MSGBUF_LEN;
	DECODED_MSGDSC [DSC$A_POINTER] = DECODED_MSGBUF;
	CH$FILL (0, DECODED_MSGBUF_LEN, DECODED_MSGBUF);

	$GETMSG ( MSGID = INS$_NOVER,
		MSGLEN = DECODED_MSGDSC,
		BUFADR = DECODED_MSGDSC);

	TERMINATE_LINE ();
	FORMAT_TERMINATE_LINE ( DECODED_MSGDSC, ERRFILNAM_DSC);

	DECODED_MSGDSC = DECODED_MSGBUF_LEN;
	DECODED_MSGDSC [DSC$A_POINTER] = DECODED_MSGBUF;
	CH$FILL (0, DECODED_MSGBUF_LEN, DECODED_MSGBUF);

	$GETMSG ( MSGID = .IOSB,
		MSGLEN = DECODED_MSGDSC,
		BUFADR = DECODED_MSGDSC);

	FORMAT_LINE ( DECODED_MSGDSC);
	END

    ELSE
	BEGIN
	FORMAT_LINE (FAOCTL_VERSION, .FILVER );	! Format the version into output buffer
	END;
    END;

!
!   Pad the buffer out to INS_C_KFEPADLEN characters
!
PAD = INS_C_KFEPADLEN - (INS$C_FAOBUFLEN - .INS$FAOBUFDESC [DSC$W_LENGTH]);
IF .PAD LEQ 0 
THEN 
    BEGIN
    TERMINATE_LINE ();
    PAD = INS_C_KFEPADLEN;
    END;

INS$FAOBUFDESC [DSC$W_LENGTH] = .INS$FAOBUFDESC [DSC$W_LENGTH] - .PAD; !length is size left in buffer
INS$FAOBUFDESC [DSC$A_POINTER] = .INS$FAOBUFDESC [DSC$A_POINTER] + .PAD;

!
!   Decode KFE flags
!
BEGIN
    LOCAL
	BUFLEN,
	BUFPTR;

    BUFLEN = .INS$FAOBUFDESC [DSC$W_LENGTH];
    BUFPTR = .INS$FAOBUFDESC [DSC$A_POINTER];

    FLAGS = .KFE [KFE$W_FLAGS];

    !
    !   Search the table, if the mask is set in the composite control 
    !   flags  longword, then call FAOL with the corresponding descriptor 
    !
    INCR I FROM 0 TO (2 * INS_C_CTLFLGSTR  -1) BY 2 DO
	BEGIN
	BIND
	    MASK = CTLFLG_ARRAY [.I],
	    CSTRNG = CTLFLG_ARRAY [.I] + 4,
	    PADLEN = .CSTRNG : BYTE;

	IF (.MASK AND .FLAGS) NEQ 0
	THEN
	    BEGIN
	    FORMAT_LINE (FAOCTL_FLAGS, .CSTRNG);
	    BUFLEN = .INS$FAOBUFDESC [DSC$W_LENGTH];
	    BUFPTR = .INS$FAOBUFDESC [DSC$A_POINTER];
	    END
	ELSE
	    BEGIN
	    INS$FAOBUFDESC [DSC$W_LENGTH] = .INS$FAOBUFDESC [DSC$W_LENGTH] - .PADLEN;
	    INS$FAOBUFDESC [DSC$A_POINTER] = .INS$FAOBUFDESC [DSC$A_POINTER] + .PADLEN;
	    END;
	END;

    INS$FAOBUFDESC [DSC$W_LENGTH] = .BUFLEN;
    INS$FAOBUFDESC [DSC$A_POINTER] = .BUFPTR;
    END;

!
!   Print extra info for a /FULL or /STRUCTURE listing
!
IF .INS$GL_CTLMSK [INS$V_FULL]
THEN
    BEGIN
    TERMINATE_LINE ();			! Print file name or decoded flags

    IF .INS$GL_CTLMSK [INS$V_STRUCTURE]
    THEN 
	FORMAT_TERMINATE_LINE (FAOCTL_KFEADR, .KFE,
			.KFE [KFE$W_SIZE], .KFE [KFE$B_HSHIDX]);

    IF .KFE [KFE$V_COMPATMOD]	! Mark as compatibility mode image
    THEN
	FORMAT_TERMINATE_LINE (FAOCTL_COMPAT_TYP, .KFE [KFE$W_AMECOD])
    ELSE
        FORMAT_TERMINATE_LINE (FAOCTL_USECNT, .KFE [KFE$L_USECNT]);

    IF .KFE [KFE$V_OPEN]	! If /OPEN
    THEN
	IF .KFE [KFE$V_COMPATMOD]
	THEN
	    FORMAT_TERMINATE_LINE (FAOCTL_CMODCURR, .WCB_SHRCNT)
	ELSE
	    FORMAT_TERMINATE_LINE (FAOCTL_SHRUSECNT,
				.WCB_SHRCNT, .KFE [KFE$W_SHRCNT] - 1);

    IF .KFE [KFE$V_SHARED]	! If /SHARED
    THEN
	FORMAT_TERMINATE_LINE (FAOCTL_GBLCNT, .KFE [KFE$W_GBLSECCNT]);

    IF (.INS$GL_CTLMSK [INS$V_STRUCTURE] AND .WCB NEQ 0)	! If installed /OPEN, print info on window
    THEN
	FORMAT_TERMINATE_LINE (FAOCTL_WINDOW, .WCB, .WCB_SIZ);

    IF (.INS$GL_CTLMSK [INS$V_STRUCTURE] AND .KFE [KFE$V_HDRRES])	! If header resident
    THEN
	BEGIN
	BIND
	    KFRH = .KFE [KFE$L_IMGHDR] - KFRH$C_LENGTH : BBLOCK;

	FORMAT_TERMINATE_LINE (FAOCTL_HEADER,
			.KFE [KFE$L_IMGHDR], .KFRH [KFE$W_SIZE]);
	END;

    IF .KFE [KFE$V_PROCPRIV]
    THEN
	PRINT_PRIVS (KFE [KFE$Q_PROCPRIV]);

    END;		! Full listing

TERMINATE_LINE ();		! If /FULL prints blank line, else prints file name

RETURN TRUE;
END;


%SBTTL 'PRINT_PRIVS';

ROUTINE PRINT_PRIVS (PRIV_ADR) =
!+++
!
!  FUNCTIONAL DESCRIPTION:
!	Print the ASCII symbol for each privilege bit set in the quadword
!	privilege mask, priv_adr.
!
!  INPUT:
!	priv_adr = address of quadword privilege mask
!
!___
BEGIN
LOCAL
    PLACE_HLDR,
    PRVS_TO_PRINT,
    SYMBOL_LEN,
    PRIV_MSK;

PLACE_HLDR = PRV$AB_NAMES;		! point to start of privilege name table
PRVS_TO_PRINT = FALSE;			! record status of buffer
FORMAT_LINE ( FAOCTL_PRIVHD );		! init buffer with header info and indentation


WHILE .(.PLACE_HLDR) <0,8> NEQ 0 DO	! Traverse down the table
    BEGIN
    PLACE_HLDR = .PLACE_HLDR + 1;	! Second byte is privilege mask
    PRIV_MSK = .(.PLACE_HLDR) <0,8>;
    PLACE_HLDR = .PLACE_HLDR + 1;	! Third byte is ASCII string count
    SYMBOL_LEN =.(.PLACE_HLDR) <0,8>;

    IF .(.PRIV_ADR) <.PRIV_MSK,1>	! Check if bit is set in quadword
    THEN
	BEGIN
	!
	!    The bit is set, put ASCII in buffer
	!
	PRVS_TO_PRINT = TRUE;		! Remember that something is in buffer
	FORMAT_LINE ( FAOCTL_PRIV, .PLACE_HLDR);
	IF INS$C_FAOBUFLEN - .INS$FAOBUFDESC [DSC$W_LENGTH] GTR 70
	THEN
	    BEGIN
	    !
	    !	Avoid too long a line.  If it is, print what we have and
	    !	start a new line with a blank header offset
	    !
	    TERMINATE_LINE ();
	    PRVS_TO_PRINT = FALSE;		! Currently no privs in buffer
	    FORMAT_LINE ( FAOCTL_PRIVHD2 );
	    END;
	END;

    !
    !	skip past count byte and ASCII privilege symbol
    !
    PLACE_HLDR = .PLACE_HLDR + 1 + .SYMBOL_LEN;

    END;	! while


IF .PRVS_TO_PRINT	! If there is something other than the header in the buffer
THEN TERMINATE_LINE ()	! Then print it
ELSE 
    BEGIN		! otherwise reset buffer to forget about unused priv header
    INS$FAOBUFDESC [DSC$W_LENGTH] = INS$C_FAOBUFLEN;
    INS$FAOBUFDESC [DSC$A_POINTER] = .INS$FAOOUTBUF;
    END;

RETURN TRUE;
END;	! routine  print_privs


%SBTTL  'ouput to temporary buffer routines';

ROUTINE FORMAT_LINE (FAO_STRING, PARAMETER_LIST) =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!	Format an ASCII string and stuff it into the output buffer.
!	Update the buffer pointers to reflect the new stuff in the
!	buffer.
!
!  INPUT:
!	fao_string =	Formatted Ascii Output control string for FAO
!	parameter_list= List of stuff to have formatted into buffer.
!
!  IMPLICIT INPUT:
!	Output buffer has been allocated and ins$faobufdesc is the
!	descriptor for it.
!
!  OUTPUT:
!	none
!
!  ROUTINE VALUE
!	Success, or error status from SYS$FAOL
!---
LOCAL
    OUTLEN : WORD;

EXECUTE ( SYS$FAOL (.FAO_STRING, OUTLEN, INS$FAOBUFDESC, PARAMETER_LIST));	! Format the buffer
INS$FAOBUFDESC [DSC$W_LENGTH] = .INS$FAOBUFDESC [DSC$W_LENGTH] - .OUTLEN;	! decrement space left in buffer
INS$FAOBUFDESC [DSC$A_POINTER] = .INS$FAOBUFDESC [DSC$A_POINTER] + .OUTLEN;	! Point to unused space left in buffer
RETURN TRUE;
END;		! routine  FORMAT_LINE


ROUTINE TERMINATE_LINE : NOVALUE =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!	Print the contents of the output buffer to sys$output and re-initialize
!	the descriptor of the buffer, and zero the buffer.
!
!  INPUT:
!	none
!
!  IMPLICIT INPUT:
!	Output buffer has been allocated and ins$faobufdesc is the
!	descriptor for it.
!
!  OUTPUT:
!	Output the contents of ins$faooutbuf to sys$output
!
!  ROUTINE VALUE
!	status from $PUT
!---

LOCAL
    LINE_LEN;

LINE_LEN = INS$C_FAOBUFLEN - .INS$FAOBUFDESC [DSC$W_LENGTH];
TMPBUF_PTR [0,0,8,0] = .LINE_LEN;
TMPBUF_PTR = .TMPBUF_PTR + 1;
CH$MOVE (.LINE_LEN, .INS$FAOOUTBUF, .TMPBUF_PTR);
TMPBUF_PTR = .TMPBUF_PTR + .LINE_LEN;


INS$FAOBUFDESC [DSC$W_LENGTH] = INS$C_FAOBUFLEN;
INS$FAOBUFDESC [DSC$A_POINTER] = .INS$FAOOUTBUF;
CH$FILL (%C' ', INS$C_FAOBUFLEN, .INS$FAOOUTBUF);
RETURN;
END;		! Routine  TERMINATE_LINE


ROUTINE FORMAT_TERMINATE_LINE (FAO_STRING,PARAMETER_LIST) : NOVALUE =
BEGIN
!+++
! FUNCTIONAL DESCRIPTION:
!
!	Call FORMAT_LINE to format the line, then call TERMINATE_LINE to
!	terminate the line.
!
!---
BUILTIN
    CALLG,
    AP;

CALLG(.AP,FORMAT_LINE);
TERMINATE_LINE();
RETURN;
END;

ROUTINE PRINTOUT =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!	Print the contents of the temporary buffer to sys$output 
!
!  INPUT:
!	none
!
!  IMPLICIT INPUT:
!	Output buffer has been allocated and ins$faobufdesc is the
!	descriptor for it.
!
!  OUTPUT:
!	Output the contents of ins$faooutbuf to sys$output
!
!  ROUTINE VALUE
!	status from $PUT
!---

LOCAL
    TMPBUF_USELEN,
    STATUS;

TMPBUF_USELEN = .TMPBUF_PTR - .TMPBUF;
TMPBUF_PTR = .TMPBUF;

WHILE .TMPBUF_PTR - .TMPBUF LSS .TMPBUF_USELEN DO
    BEGIN
    LOCAL
	SIZE;

    SIZE = .(.TMPBUF_PTR) <0,8,0>;
    INS$G_OUTRAB [RAB$W_RSZ] = .SIZE;
    INS$G_OUTRAB [RAB$L_RBF] = .TMPBUF_PTR+1;
    EXECUTE ($PUT (RAB = INS$G_OUTRAB));
    TMPBUF_PTR = .TMPBUF_PTR + 1 + .SIZE;
    END;

RETURN TRUE;
END;		! Routine  PRINTOUT


END		! Module inslist
ELUDOM
