	.IF	NDF,PRMSW		;FOR LINKAGE WITH SYS.EXE,...
	.TITLE	SYSLOAVEC - SYSTEM VECTORS TO LOADABLE SUBROUTINES

	.IFF				;FOR LINKAGE WITH SYSLOAxxx.EXE,...
	.TITLE	LOAVEC - OFFSETS TO LOADABLE SUBROUTINES
	.ENDC

	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:
;
;	EXECUTIVE, LOADABLE SUBROUTINES
;
; ABSTRACT:
;
; VECTORS, LOAD IMAGE SIZE, AND UNDEFINED VECTOR HANDLER FOR
; LOADABLE SUBROUTINES.
;
; AUTHOR:
;
;	N. KRONENBERG, MARCH 13, 1979.
;
; MODIFIED BY:
;
;	V03-021	ROW0407		Ralph O. Weber		25-JUL-1984
;		Add EXE$MNTVER_DVI_ASSIST, an escape transfer vector which 
;		allows $GETDVI support for shadow sets to be shipped with 
;		mount verfication in SYSLOAxxx.
;
;	V03-020	WHM0001		Bill Matthews		09-Jul-1984
;		Added vectors for routines CON$INIT_CTY, CON$GETCHAR and CON$PUTCHAR.
;
;	V03-019	ROW0384		Ralph O. Weber		 7-JUL-1984
;		Add the following transfer or pointer vectors for Mount 
;		Verification:
;		o EXE$CLUTRANIO, VAXcluster state transition I/O block.
;		o EXE$UPDGNERNUM, update shadow set generation number.
;		o EXE$GL_MVMSLBAS, MVMSL base address.
;
;	V03-018	TCM0003		Trudy C. Matthews	09-Apr-1984
;		Add vector for routine CON$RELEASECTY.
;
;	V03-017	ROW0330		Ralph O. Weber		24-MAR-1984
;		Add two spare mount verification transfer vectors for possible 
;		use in volume shadowing.
;
;	V03-016	KPL0001		Peter Lieberwirth	 4-Mar-1984
;		Add some extra vectors (aligned and packed) for possible
;		use in 4.x.
;
;	V03-015	ROW0317		Ralph O. Weber		27-FEB-1984
;		Correct patch area descriptor to have patch size in bytes not 
;		in longwords.
;
;	V03-014	ROW0292		Ralph O. Weber		 4-FEB-1984
;		Add three vectors for mount verification, which is being moved 
;		to SYSLOAxxx: EXE$MOUNTVER the main entry point, EXE$MNTVERSIO 
;		entry to the start I/O routine for mount verification, and 
;		EXE$MNTVERSHDOL entry point to the bring shadow unit online 
;		routine (which does not exist yet).  EXE$MNTVERSIO allows 
;		in-driver mount verification routines to use a standard 
;		interface to starting and completing an internal I/O request.  
;		EXE$MNTVERSHDOL is provided for MOUNT to use when it brings
;		the members of a shadow set online asynchronously.
;
;	V03-013	CWH8001		CW Hobbs		4-Dec-1983
;		Add EXE$READP_TODR and EXE$WRITEP_TODR routines, used to
;		force access of physical TODR on Nautilus CPU.  On other
;		CPUs, these routines are second labels on EXE$READ_TODR and
;		EXE$WRITE_TODR.
;
;	V03-012	KDM0062		Kathleen D. Morse	19-Jul-1983
;		Add routine to initialize the time-wait macro data
;		cells, EXE$INI_TIMWAIT.
;
;	V03-011	KTA0001		Kerbey T. Altmann	12-Jul-1983
;		Add routine for console device data structure
;		initialization, INI$CONSOLE.
;
;	V03-010	KDM0057		Kathleen D. Morse	12-Jul-1983
;		Change the SYSINIT routine, SIP_SETTIME, to a loadable,
;		cpu-dependent routine, EXE$INIT_TODR.
;
;	V03-009	KDM0048		Kathleen D. Morse	07-Jun-1983
;		Add loadable routines for referencing TODR:
;		EXE$READ_TODR and EXE$WRITE_TODR.
;
;	V03-008	WMC0001		Wayne Cardoza		09-Jun-1983
;		Add loadable code system service dispatchers.
;
;	V03-007	JWH0203		Jeffrey W. Horn		22-Mar-1983
;		Use SLVTAB macro to set up loadable-image header.
;
;	V03-006	TCM0002		Trudy C. Matthews	16-Feb-1983
;		Add CON$OWNCTY vector.
;
;	V03-005	TCM0001		Trudy C. Matthews	13-Jan-1983
;		Add SYSL$CLRSBIA entry point.  Add an alternative default
;		routine that RSBs harmlessly if called before code is
;		loaded, instead of halting.
;
;	V03-004	KTA3018		Kerbey T. Altmann	30-Oct-1982
;		Redo to reflect changes in modules.
;
;	V03-003	MSH0001		Maryann Hinden		24-Sep-1982
;		Change entry EXE$DW780_INT to EXE$UBAERR_INT.
;
;	V03-002	STJ3026		Steven T. Jeffreys	24-Sep-1982
;		Moved LOADVEC macro to SYSMAR.
;
;	V03-001	BLS0183		Benn Schreiber		16-Aug-1982
;		Add new entry points for loadable console support
;
;--

;+
; THIS MODULE MAY BE ASSEMBLED WITH EXECUTIVE MODULE PRMSW.MAR
; WHICH DEFINES THE CONDITIONAL CONTROL VARIABLE PRMSW.  IF PRMSW
; IS NOT DEFINED, THEN SYSLOAVEC.MAR IS INTENDED TO LINK WITH SYS.EXE.
; IF PRMSW IS DEFINED, SYSLOAVEC.MAR IS INTENDED FOR LINKAGE WITH 
; SYSLOAxxx.EXE.  (xxx IS THE CPU DISIGNATOR, E.G., 780.)
;
; IF PRMSW IS NOT DEFINED (LINK WITH SYS.EXE), THE SOURCE CONTAINS
; A LIST OF VECTORS TO BE CONNECTED TO THE SUROUTINES AND DATA STRUCTURES
; IN SYSLOAxxx.EXE.
;
; DATA VECTORS ARE LONGWORD POINTERS TO THE LOADED DATA STRUCTURES.  BEFORE
; LOADING, THE POINTES CONTAIN A 0.
;
; SUBROUTINE VECTORS ARE OF THE FORM:
;
; ENTRY:: JMP	@#EXE$LOAD_ERROR
;
; THERE ARE TWO TYPES OF ROUTINE ENTRIES.  THE FIRST TYPE IS LONGWORD
; ALIGNED ENTRIES FOR SCB VECTORS.  THE SECOND TYPE IS PACKED
; ENTRIES FOR ORDINARY ROUTINES.
;
; SYSLOAVEC ALSO CONTAINS THE LOAD ERROR HANDLER, EXE$LOAD_ERROR,
; WHICH IS SIMPLY A HALT.  IF ANY LOADABLE SUBROUTINE IS CALLED
; PRIOR TO BEING LOADED, THE HALT WILL BE EXECUTED.
;
; IF PRMSW IS DEFINED (LINK WITH SYSLOAxxx.EXE), THE SOURCE 
; CONTAINS LOAGWORD EXE$LOAD_SIZE, THE NUMBER OF BYTES IN SYSLOAxxx.EXE.
; THE SOURCE ALSO CONTAINS A LIST OF THE SELF-RELATIVE OFFSETS TO
; THE SUBROUTINES IN SYSLOAxxx.EXE.  THE LIST OF OFFSETS IS USED
; TO CONNECT THE SYS.EXE VECTORS TO THE LOADED SUBROUTINES.
;-
	.PAGE
;
; MISC. LABELS AND DATA:
;

	.IF	DF,PRMSW		;FOR LINKAGE WITH SYSLOAxxx.EXE,...

	$DYNDEF

	.PSECT	__LOAD_END,QUAD		; Force label to be at the end of
SYSL$END::				;  loadable code

	.PSECT	$$$000			; Force return to start of loadable code
SYSL$BEGIN::
	SLVTAB	END	= SYSL$END, -
		INITRTN	= INI$IOMAP, -
		FACILITY= <SYSLOAVEC>
;
; NOTE:  The modules, INIADPxxx, understand how to unload the vectors
;	 for routines that are only called once during initialization
;	 of the system.  Therefore, if the format of these vectors
;	 change, then the code in INIADPxxx must also change.
;


	.IFF				; For linkage with SYS.EXE,...
	.PSECT	$$$500,LONG		;
	.ALIGN	LONG			; Start vector list on longwd
EXE$AL_LOAVEC::				; Addr of start of vectors
	.ENDC


;
; VECTOR LIST:
;	Define longword-aligned routine vectors.
;

	LOADVEC	EXE$MCHK,TYPE=2		;MACHINE CHECK HANDLER
	LOADVEC	EXE$INT54,TYPE=2	;INTERRUPT, SCB VECTOR=^X54
	LOADVEC	EXE$INT58,TYPE=2	;INTERRUPT, SCB VECTOR=^X58
	LOADVEC	EXE$INT5C,TYPE=2	;INTERRUPT, SCB VECTOR=^X5C
	LOADVEC	EXE$INT60,TYPE=2	;INTERRUPT, SCB VECTOR=^X60
	LOADVEC	UBA$UNEXINT,TYPE=2, -	;INTERRUPT, UNIBUS ITSELF
		 SEC_LABEL=UBA_UNEXINT
;
; Extra aligned vectors.  Current target of these vectors in SYSLOA is a
; halt instruction in ERRSUB*.
;
	LOADVEC	EXE$EXTRA1,TYPE=2	;EXTRA LABEL
	LOADVEC	EXE$EXTRA2,TYPE=2	;EXTRA LABEL
	LOADVEC	EXE$EXTRA3,TYPE=2	;EXTRA LABEL
	LOADVEC	EXE$EXTRA4,TYPE=2	;EXTRA LABEL
	LOADVEC	EXE$EXTRA5,TYPE=2	;EXTRA LABEL
;
; Define packed routine vectors.
;

	LOADVEC	ECC$REENABLE		;MEMORY ERROR TIMERS
	LOADVEC	EXE$INIBOOTADP		;INIT BOOT DEVICE ADAPTER
	LOADVEC	EXE$DUMPCPUREG		;DUMP CPU-SPECIFIC IPR'S INTO EMB
	LOADVEC	EXE$REGRESTOR		;RESTORE CPU-SPECIFIC IPR'S 
	LOADVEC	EXE$REGSAVE		;SAVE CPU-SPECIFIC IPR'S
	LOADVEC	EXE$INIPROCREG		;INIT PROCESSOR REGISTERS
	LOADVEC	EXE$TEST_CSR		;TEST UB CSR FOR EXISTENCE
	LOADVEC	IOC$PURGDATAP		;PURGE DATAPATH
	LOADVEC	INI$MPMADP		;INITIALIZE MULTIPORT MEMORY
	LOADVEC	EXE$STARTUPADP		;Startup up any adapters
	LOADVEC	EXE$SHUTDWNADP		;Shutdown any (all) adapters
	LOADVEC	MA$RAVAIL		;Multiport memory
	LOADVEC	MA$REQUEST		;Multiport memory request
	LOADVEC	MA$INITIAL		;Multiport initialization
	LOADVEC	CON$STARTIO		;Console start I/O
	LOADVEC	CON$SET_LINE		;Set line
	LOADVEC	CON$DS_SET		;Data set
	LOADVEC	CON$XON			;XON to console
	LOADVEC	CON$XOFF		;XOFF to console
	LOADVEC	CON$STOP		;STOP output
	LOADVEC	CON$STOP2		;stop for 2 seconds
	LOADVEC	CON$ABORT		;Abort console I/O
	LOADVEC	CON$RESUME		;Resume output
	LOADVEC	CON$SET_MODEM		;Set modem
	LOADVEC	CON$NULL		;Null routine
	LOADVEC	CON$DISCONNECT		;Console disconnect routine
	LOADVEC	CON$INITIAL		;Initialize console controller
	LOADVEC	CON$INITLINE		;Initialize console line
	LOADVEC	CON$INTINP		;Input interrupt
	LOADVEC	CON$INTOUT		;Output interrupt
	LOADVEC	CON$SENDCONSCMD		;Send cpu-dependent command to console
	LOADVEC	SYSL$CLRSBIA, -		;Clear SBIA error bits
		DEF_RTN=EXE$LOAD_NOP
	LOADVEC	CON$OWNCTY		;Set up to talk directly to console tty
	LOADVEC	CON$RELEASECTY		;Restore normal console cty interface
	LOADVEC	CON$GETCHAR		;Get a character from the console cty
	LOADVEC	CON$PUTCHAR		;Put a character out to the console cty
	LOADVEC CON$INIT_CTY		;Initialization routine for the console cty
	LOADVEC	EXE$READ_TODR		;Read Time-Of-Day Register
	LOADVEC EXE$WRITE_TODR		;Write Time-Of-Day Register
	LOADVEC	EXE$INIT_TODR		;Initialize system time-of-day
	LOADVEC	INI$CONSOLE		;Initialize console device data struc
	LOADVEC	EXE$INI_TIMWAIT		;Initialize time-wait loop data cells
	LOADVEC EXE$READP_TODR		;Read physical TODR register
	LOADVEC EXE$WRITEP_TODR		;Write physical TODR register
	LOADVEC	EXE$MOUNTVER		;Mount verification main entry point
	LOADVEC	EXE$MNTVERSIO		;Mount verification start I/O request
	LOADVEC	EXE$MNTVERSHDOL		;Mount verification online shadow unit
	LOADVEC	EXE$CLUTRANIO		;Mount verification VAXcluster state
					;  transition block I/O
	LOADVEC	EXE$UPDGNERNUM		;Mount verification update shadow set
					;  generation number
	LOADVEC	EXE$MNTVER_DVI_ASSIST	;Mount verification $GETDVI escape
	LOADVEC	EXE$MNTVERSP1		;Mount verification spare xfer vector
	LOADVEC	EXE$MNTVERSP2		;Mount verification spare xfer vector
	LOADVEC	EXE$GL_MVMSLBAS, 1,, -	;Mount verification MVMSL base address
		 EXE$AB_MVMSLBAS
;
; Extra packed vectors.  Current target of these vectors in SYSLOA is a
; halt instruction in ERRSUB*.
;
	LOADVEC	EXE$EXTRA6		;EXTRA LABEL
	LOADVEC	EXE$EXTRA7		;EXTRA LABEL
	LOADVEC	EXE$EXTRA8		;EXTRA LABEL
	LOADVEC	EXE$EXTRA9		;EXTRA LABEL
	LOADVEC	EXE$EXTRA10		;EXTRA LABEL

;
; Define pointers to data stuctures.
;

	LOADVEC	EXE$MCHK_ERRCNT,TYPE=1	;Point to array of mchk error counters.

	.IF	DF,PRMSW		; For the loadable image
	 .LONG	-1			;  put in a stopper signal
	.ENDC

;
; IF LINKAGE WITH SYS.EXE, DEFINE A LOAD ERROR HANDLER AND A HANDLER THAT
; RSB'S HARMLESSLY (FOR A ROUTINE USED BY XDELTA THAT MAY BE CALLED BEFORE
; BEING LOADED).
;


	.IF	NDF,PRMSW
EXE$LOAD_ERROR::			;COME HERE IF CALL TO UNLOADED
	HALT				; SUBROUTINE
EXE$LOAD_NOP::				;COME HERE IF ROUTINE NOT LOADED
	RSB				; BUT DON'T WANT TO ERROR HALT
	.ENDC

;
; IF LINKAGE WITH SYS.EXE, DEFINE THE DIPATCH VECTOR FOR LOADABLE CODE
; SYSTEM SERVICE DISPATCHERS.  THERE ARE SEPARATE VECTORS FOR EXEC AND
; KERNEL MODE WITH TWO SPARE ENTRIES IN EACH.
;

	.IF	NDF,PRMSW

EXE$LOAD_KDISP::			;Kernel mode dispatchers
EXE$LOAD_KCJF::
	JSB	@#EXE$LOAD_NOP		;CJF
EXE$LOAD_KRUF::
	JSB	@#EXE$LOAD_NOP		;RUF
EXE$LOAD_KSPR1::
	JSB	@#EXE$LOAD_NOP		;First spare
EXE$LOAD_KSPR2::
	JSB	@#EXE$LOAD_NOP		;Second spare
	RSB

EXE$LOAD_EDISP::			;Exec mode dispatchers
EXE$LOAD_ESPR1::
	JSB	@#EXE$LOAD_NOP		;First spare
EXE$LOAD_ESPR2::
	JSB	@#EXE$LOAD_NOP		;Second spare
	RSB

	.ENDC

;
; IF LINKAGE WITH SYSLOAxxx.EXE, DEFINE 15 LONGWORDS OF PATCH AREA:
;

	.IF	DF,PRMSW
	.PSECT	_PATCH
PATCH_DESC::
	.LONG	15*4
	.LONG	PATCH_AREA
PATCH_AREA::
	.BLKL	15
	.ENDC

	.END

