module lnk_objfil 
		(ident = 'V04-000'
		,addressing_mode
			(external = general)
		) =
begin
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!
!
!
!++
!
! MODULE:	LNK_OBJFIL
!
! FACILITY:	LINKER
!
! ABSTRACT:	ROUTINES TO OPEN AND READ ALL RECORDS OF OBJECT FILES
!
! HISTORY:
!
!	VERSION:	X01.00
!
!	AUTHOR: T.J. PORTER 03-MAY-77
!
! MODIFIED BY:
!
!	V03-022	ADE0004		Alan D. Eldridge	17-Jul-1984
!		Search default cluster when looking for a library to
!		close as well as the cluster list.
!
!	V03-021	ADE0003		Alan D. Eldridge	11-Jul-1984
!		Fix infinite loop which occurred in selected cases when
!		the librarian had too many files open.
!
!	V03-020	ADE0002		Alan D. Eldridge	30-Apr-1984
!		Signal proper RMS error status upon failure to open a 
!		shared image.
!
!	V03-019	ADE0001		Alan D. Eldridge	 7-Mar-1984
!		Close a file and retry on a LBR$_TOOMNYLIB error from
!		LBR$OPEN.
!
!	V03-018	JWT0113		Jim Teague		20-Apr-1983
!		Call $getjpi to get number of open files left.
!
!	V03-017	JWT0057		Jim Teague		30-Sep-1982
!		Fixed bug in LNK$CLOSEFILE logic.
!
!	V03-016 JWT0054		Jim Teague		15-Sep-1982
!		Fix another bug in LNK$CLOSEFILE logic.  The initial
!		input file processing can now more intelligently specify
!		a file to close when necessary.  Also streamline LNK$NXTFIL.
!
!	V03-015	JWT0051		Jim Teague		11-Aug-1982
!		Fix bug in LNK$CLOSEFILE logic.
!
!	V03-014 JWT0044		Jim Teague		30-Jul-1982
!		Open file performance boost.
!
!	V03-013 JWT0033		Jim Teague		25-May-1982
!		Clear SQO bit if FDB has any non-TIR object modules
!
!--

!
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	THIS MODULE CONTAINS A ROUTINE TO OPEN THE NEXT
!	OBJECT MODULE FILE AND ANOTHER TO READ THE NEXT
!	RECORD FROM THE CURRENTLY OPEN FILE. IT ALSO CONTAINS THE
!	ROUTINE TO CLOSE THE CURRENTLY OPEN FILE.
!
!		LNK$NXTFIL
!		LNK$NXTREC(RECADRS,RECLNG)
!		LNK$CLOSCURFIL()
!
!	IF THERE ARE NO MORE FILES OR RECORDS, ROUTINES HAVE THE VALUE FALSE.
!	IF FILE IS SUCCESSFULLY OPENED (BY FILE ID USING LINKED LIST OF FDB'S)
!	LNK$NXTFIL HAS THE VALUE TRUE AND THE ADDRESS OF THE
!	FILE DESCRIPTOR BLOCK IS PLACED IN LNK$GL_CURFIL.
!
!	THERE IS NO RETURN ON THE FOLLOWING ERROR CONDITIONS:
!		OPEN FAILURE
!		CONNECT FAILURE
!
!	CALLING SEQUENCE:
!		LNK$NXTFIL()
!		LNK$NXTREC(RECADRS,RECLNG)
!		LNK$CLOSCURFIL()
!	WHERE:
!		RECADRS = ADDRESS OF LONGWORD TO RECEIVE THE
!		          ADDRESS OF NEXT RECORD.
!		RECLNG  = ADDRESS OF A WORD TO RECEIVE LENGTH
!			  OF THE RECORD (IN BYTES).
!	THE ROUTINE RETURNS THE VALUE TRUE, UNLESS END OF FILE
!	IS DETECTED, WHEN IT RETURNS THE VALUE FALSE.
!--
!
library
	'SYS$LIBRARY:STARLET.L32';			! SYSTEM STRUCTURE DEFINITIONS
require
	'PREFIX';
library
	'DATBAS';					! INTERNAL DATA BASE DEFINITIONS
!
forward routine
    tran_next_lib,					! RETURN NEXT DEFAULT LIBRARY NAME
    lnk$closefile	: novalue,			! SEARCH FOR A FILE TO CLOSE
    lnk$openlib;					! OPEN LIBRARY

external routine
    lnk$alloblk		: novalue,			! DYNAMIC MEMORY ALLOCATOR
    lnk$dealblk		: novalue,			! AND DEALLOCATOR
    lnk$allocluster	: novalue,			! ALLOCATE CLUSTER DESCRIPTORS
    lnk$allofdb		: novalue,			! ALLOCATE FILE DESCRIPTOR BLOCKS
    lnk$filnamdsc,					! RETURN STRING DESCRIPTOR FOR FILENAME
    sys$fao,						! FORMATTED ASCII OUTPUT
    lbr$lookup_key,					! LOOKUP KEY IN MODULE
    lbr$set_module,					! READ MODULE HEADER
    lbr$find,						! POSITION TO READ MODULE
    lbr$ini_control,					! INITIALIZE TO READ LIBRARY
    lbr$get_record,					! READ RECORD FROM LIBRARY
    lbr$open,						! OPEN LIBRARY
    lbr$close;						! CLOSE LIBRARY

external literal
    lbr$_toomnylib,					! TOO MANY .OLB's FOR LIBRARIAN
    lin$_closein,					! CLOSE ERROR MESSAGE
    lin$_format,					! FORMAT ERROR ON A FILE
    lin$_libfind,					! FAILED TO GET (BY RFA) CORRECT LIBR RECORD 
    lin$_notobjlib,					! FILE NOT OBJECT LIBRARY
    lin$_notimglib,					! FILE NOT SHAREABLE IMAGE STB LIBRARY
    lin$_openin,					! FAILED TO OPEN INPUT FILE
    lin$_readerr;					! READ ERROR

external
    lnk$gt_jpilst,
    lnk$gl_filesleft,
    lbr$gl_control	: ref block [,byte],		! CURRENT LIBRARY CONTROL ADDRESS
    lbr$gl_rmsstv,					! RMS STV FROM LIBRARY OPERATIONS
    lnk$gl_ulibmask	: bitvector [],			! ENABLE BITS FOR USER LIBRARIES
    lnk$gl_ctlmsk	: block [,byte],		! CONTROL FLAGS
    lnk$gl_clulst	: vector [2],			! CLUSTER DESCRIPTOR LISTHEAD
    lnk$gl_lastclu	: ref block [,byte],		! LAST CLUSTER IN LIST DESCR.
    lnk$gl_curclu	: ref block [,byte],		! CURRENT CLUSTER POINTER
    lnk$gl_defclu	: block [,byte],		! DEFAULT CLUSTER
    lnk$gw_nudfsyms	: word,				! NUMBER OF UNDEFINED SYMBOLS
    lnk$gb_pass		: byte;				! THE PASS CURRENTLY EXECUTING
	
global literal
    lnk$c_objmbc = 5;					! MULTI BLOCK COUNT FOR OBJ FILES

global
    lnk$gl_open_lbr : initial (0),			! NUMBER OF CURRENTLY OPEN LIBRARIES
    lnk$gl_objrecs,					! ACCUMULATED OBJECT RECORDS READ
    lnk$gl_record,					! RECORD NUMBER THIS FILE
    lnk$al_rab	  : $rab (rac = seq			! RECORD ACCESS BLOCK SPECIFYING
			 ,rop = loc			! SEQUENTIAL,LOCATE MODE
			 ,mbc = lnk$c_objmbc		! WITH MULTIPLE BLOCKS
			 ),			
    lnk$gl_curomd : ref block [,byte],			! POINTER TO CURRENT OBJ MOD. DESCRIPTOR
    lnk$gl_curfil : ref block [,byte];			! POINTER TO CURRENT FDB

own
    openclus	 : ref block [,byte],			! PTR TO CURRENT CLUSTER FOR OPEN FILE SEARCHES
    openfdb	 : ref block [,byte],			! PTR TO CURRENT CLUSTER FDB FOR OPEN FILE SEARCHES
    start_fdb,						! STARTING POINT IN FDB SEARCH
    input_fab	 : block [fab$c_bln, byte],		! FAB BLOCK FOR INPUT FILES
    intfiltbl	 : quadvector [2]			! TABLE OF INTERNAL FILES
		   initial (stringdesc ('STARLET')  	! SYSTEM DEFAULT OBJECT LIBRARY
			   ,stringdesc ('IMAGELIB') 	! LIBRARY OF SHAREABLE IMAGE SYMBOL TABLES
			   ),
    syslibdefext : descriptor ('SYS$LIBRARY:.OLB'), 	! DEFAULT FILENAME FOR STARLET AND IMAGELIB
    curdefext	 : block [dsc$c_s_bln,byte],		! STRING DESCRIPTOR FOR CURRENT DEFAULT STRING
    libdefext	 : descriptor ('SYS$DISK:.OLB'),	! DEFAULT FILENAME FOR USER LIBRARY
    shrdefext	 : descriptor ('SYS$LIBRARY:.EXE'),	! DEFAULT FILENAME FOR SHAREABLE IMAGES
    libnamefao	 : descriptor ('LNK$LIBRARY_!UW'),	! FAO CONTROL STRING TO CREATE USER LIBRARY NAMES
    previous_fdb : ref block [,byte],			! POINTER TO PREVIOUS FDB.
    lastuserclu	 : ref block [,byte],			! POINTER TO LAST USER CLUSTER (OR DEFAULT)
    nextintfil	 : byte initial (3),			! FOUR INTERNAL FILES
    userlibno,						! NUMBER OF NEXT DEFAULT USER LIBRARY
    first_time	 : byte initial (true),			! INITIALLY FIRST TIME THROUGH
    default_lib	 : byte initial (false),		! AND NOT PROCESSING DEFAULT LIBRARIES
    deflibacmode : byte initial (0),			! ACCESS MODE INDEX
    deflibdsbmsk : vector [4,byte] initial (%x'060503'),! DISABLE TABLE SEARCH BIT MASK
    resultstring : vector [nam$c_maxrss,byte],		! RESULT OF TRANSLATING LOGICAL NAME
    libnamdescr	 : vector [2]				! DESCRIPTOR OF RESULTANT NAME BUFFER
		   initial (nam$c_maxrss,resultstring);

global routine lnk$nxtfil =
begin
!
!	CLOSE THE PREVIOUSLY OPEN FILE AND THEN
!	IF THERE ARE ANY MORE FILES IN THE TABLE GO OPEN THE
!	NEXT AND PUT ADDRESS OF ITS DESCRIPTOR IN CURRENT SLOT. IF
!	NONE, RETURN FALSE.
!
    routine openit =
	begin
	!
	!    THIS ROUTINE ATTEMPTS TO OPEN FILES AND RETURNS THE
	!    STATUS OF THE OPEN
	!
	local    openok;

	if .lnk$gl_curfil [fdb$w_ifi] neq 0			! IF IFI IS INITIALIZED, THEN
	then return true					!  THE FILE IS ALREADY OPEN
	else begin						! FILE IS NOT OPEN, SO
	     openok = $open (fab=input_fab);			!  TRY OPENING THE FILE
	     if not .openok					! IF OPEN FAILED AND THIS IS AND
	     then if .lnk$gl_curclu [clu$v_intclu]		!  THIS IS INTERNALLY MATERIALIZED
		  then begin					!  CLUSTER, THEN TRY SYS$LIBRARY:
		       input_fab [fab$b_dns] = .shrdefext [0];
		       input_fab [fab$l_dna] = .shrdefext [1];
		       openok = $open (fab=input_fab);	! TRY AGAIN
		       end;
	     return (.openok);
	     end;						! RETURN OPEN STATUS
	end;							! OF OPENIT
!
!
! Main body of LNK$NXTFIL
!
!
local
	current_ifi,
	turn_sqo_off	: byte,					! SHOULD SQO BE SHUT OFF?
	auxfnb		: ref block [,byte],			! POINTER TO AUXILIARY FILE NAME BLOCK
	rms_stv,						! STV RETURNED ON RMS OPERATION
	errorcode	: block [4,byte],			! 
	open_sts;						! ERROR CODE ON OPEN

if .lnk$gl_curfil eql 0						! IF NO CURRENT FILE
then begin							! START AT TOP OF LIST
     lnk$gl_curclu = .lnk$gl_clulst [0];			! OF CLUSTERS
     previous_fdb  =  lnk$gl_curclu [clu$l_fstfdb];		! SETTING PREVIOUS TO ITS LISTHEAD
     end
else begin
     if  .lnk$gl_curfil [fdb$v_imglib]  			! ALWAYS CLOSE SHR IMG LIBS IMMEDIATELY
     or  .lnk$gb_pass  eql 2					! DONE WITH FILE IF THIS IS PASS 2
     then lnk$closefile (.lnk$gl_curfil);			! SO CLOSE THIS FILE

     if  .lnk$gb_pass eql 1					! IF THIS IS PASS 1
     then lnk$gl_curfil [fdb$v_p1] = true;			!  THEN FLAG FILE PROCESSED IN PASS 1

     if  .lnk$gl_curfil [fdb$v_libr] 				! IF THAT LAST FILE WAS A LIBRARY
     and .lnk$gl_curfil [fdb$l_omdlst] eql 0			! AND NO MODULES WERE LOADED
     then begin							! WE DO NOT NEED IT ANYMORE
	  lnk$closefile (.lnk$gl_curfil);				! SO CLOSE IT AND
	  previous_fdb [fdb$l_nxtfdb] = .lnk$gl_curfil [fdb$l_nxtfdb];	! REMOVE IT FROM THE LIST

	  if .previous_fdb [fdb$l_nxtfdb] eql 0			! AND IF LAST ON THIS
	  then lnk$gl_curclu [clu$l_lstfdb] = .previous_fdb;	! CLUSTER LIST, FIX EOL POINTER

	  !**THIS IS A PROBLEM...THE BLOCK CAN'T BE DEALLOCATED!!!
	  !***	LNK$DEALBLK (FDB$C_SIZE+NAM$C_BLN,.LNK$GL_CURFIL); ! AND DISPOSE OF ITS DESCRIPTOR

	  end
     else previous_fdb = .lnk$gl_curfil;			! IF NOT EMPTY LIB, IT BECOMES THE PREVIOUS

     if .lnk$gl_curfil [fdb$w_ifi] neq 0			!  IF FILE LEFT OPEN,
     then $disconnect (rab=lnk$al_rab);				!   THEN DISCONNECT ITS RAB
     end;

while (lnk$gl_curfil = .previous_fdb [fdb$l_nxtfdb]) eql 0	! GET NEXT FILE ON THIS CLUSTER LIST
or    (.lnk$gl_curfil [fdb$v_p1] and .lnk$gb_pass eql 1)
do if   .lnk$gl_curclu [clu$l_nxtclu] eql 0			! BUT IF THE END AND LAST CLUSTER
   and (.lnk$gb_pass eql 1 and .nextintfil neq 0)		! OR THE DEFAULT CLUSTER ON
								! AND WE HAVE NOT PROCESSED DEFAULT LIBRARIES YET
   and  .lnk$gw_nudfsyms neq 0					! AND THERE ARE STILL UNDEFINED SYMBOLS
   and (((.nextintfil eql 3) and .lnk$gl_ctlmsk [lnk$v_usrlib])
	or 
	((.nextintfil gtr 0) and .lnk$gl_ctlmsk [lnk$v_syslib])
       )
   then begin
	local  fileflags;

	fileflags = fdb$m_libr or fdb$m_libsrch;		! SET DEFAULT FILE FLAGS
	if .first_time						! IF THIS IS THE FIRST TIME
	or .default_lib						! OR IF PROCESSING USER LIBRARIES
	then begin
	     first_time = false;				! NO LONGER FIRST TIME
	     if not .lnk$gl_ctlmsk [lnk$v_usrlib] 		! IF USER LIBRARIES ARE DISABLED
	     or not  tran_next_lib ()				! OR NO MORE DEFAULT LIBRARIES
	     then begin
		  nextintfil = 2;				! JUST SKIP IT
		  default_lib = false;				! DISABLE USER LIBRARIES
		  lnk$gl_ctlmsk [lnk$v_usrlib] = false;
		  if not .lnk$gl_ctlmsk [lnk$v_syslib] 		! IF SYSLIB DISABLED
		  then	begin
			lnk$gl_curfil = 0;			! RETURN NO MORE FILES
			return false;
			end;
		  end
	     else begin
		   default_lib = true;				! FLAG PROCESSING DEFAULT LIBRARIES
		   userlibno   = .userlibno + 1;		! SET FOR NEXT LIBRARY
		   nextintfil  = 3;				! ENSURE INDEX IS CORRECT
		   end;
	     end;

	if .nextintfil eql 2					! IF READY TO PROCESS IMAGELIB
	then if not .lnk$gl_ctlmsk [lnk$v_sysshr]		! IF /NOSYSSHR WAS SPECIFIED
	     then nextintfil = 1;				!  THEN SKIP SEARCH OF IMAGELIB
	
	if (.default_lib or .nextintfil eql 1)			! IF DOING A DEFAULT OBJECT LIBRARY
	then begin						! THEN WE NEED A DIFFERENT CLUSTER
	     lnk$gl_curclu = lnk$gl_defclu;			! SET SEARCH TO KNOWN USER CLUSTER
	     if  .lnk$gl_defclu [clu$l_fstfdb] eql 0		! IF NO FILES IN THE CLUSTER
	     and .lnk$gl_defclu [clu$l_nxtclu] eql 0		!  AND IT HAS NO CLUSTER FOLLOWING IT
	     and .lnk$gl_lastclu neq lnk$gl_defclu		!  AND IT ISN'T THE LAST CLUSTER
	     then begin						! THEN WE MUST LINK INTO CLUSTER LIST
		  lnk$gl_lastclu [clu$l_nxtclu] = lnk$gl_defclu;
		  lnk$gl_lastclu = lnk$gl_defclu;
		  end;
	     end;

	previous_fdb  = .lnk$gl_curclu [clu$l_lstfdb];		! PREVIOUS FILE IS LAST
	lnk$allofdb (previous_fdb [fdb$l_nxtfdb]);		! ALLOCATE A FILE DESCRIPTOR
	lnk$gl_curfil = .previous_fdb [fdb$l_nxtfdb];		! AND MAKE IT CURRENT
	lnk$gl_curclu [clu$l_lstfdb]  = .lnk$gl_curfil;		! AND SET NEW LAST FDB
	lnk$gl_curfil [fdb$b_filflgs] = .fileflags;		! SET APPROPRIATE FLAGS

	if .default_lib						! IF THIS IS THE DEFAULT USER LIBRARY
	then begin
	     ch$move (dsc$c_s_bln,libnamdescr,lnk$gl_curfil [fdb$w_usrnamlen]);
	     ch$move (dsc$c_s_bln,libdefext,  lnk$gl_curfil [fdb$w_defnamlen]);
	     end
	else begin
	     ch$move (dsc$c_s_bln,intfiltbl [.nextintfil-1],lnk$gl_curfil [fdb$w_usrnamlen]);
	     ch$move (dsc$c_s_bln,syslibdefext,lnk$gl_curfil [fdb$w_defnamlen]);
	     end;

	if not .default_lib
	then lnk$gl_ctlmsk [lnk$v_intfil] = true;		! RECORD WE ARE DOING THIS
	nextintfil = .nextintfil - 1;				! REDUCE FILE NUMBER
	exitloop;
	end
   else begin							! IF NOT LAST CLUSTER
	lnk$gl_curclu = .lnk$gl_curclu [clu$l_nxtclu];		! MOVE TO NEXT
	if .lnk$gl_curclu eql 0
	then begin
	     lnk$gl_ctlmsk [lnk$v_intfil] = false;		! TURN OFF INTERNAL FLAG
	     lnk$gl_curfil = 0;
	     return false;					! AND RETURN NO MORE FILES
	     end;
	previous_fdb = lnk$gl_curclu [clu$l_fstfdb];		! RESET TO TOP OF FILE LIST
	end;

auxfnb       = lnk$gl_curfil [fdb$t_auxfnb];			! POINT TO AUXILIARY FILENMAME BLOCK
turn_sqo_off = .lnk$gb_pass eql 2  and  .lnk$gl_curfil [fdb$v_omdnobin];

$fab_init (fab = input_fab
	  ,fac = get
	  ,fop = sqo
	  ,mrs = obj$c_maxrecsiz
	  ,nam = .auxfnb
	  );

if .turn_sqo_off
then begin							! TIR RECORDS, OPEN WITHOUT SQO...
     lnk$closefile (.lnk$gl_curfil);
     input_fab [fab$v_sqo] = false;
     end; 

current_ifi = .lnk$gl_curfil [fdb$w_ifi];

if .auxfnb [nam$w_fid_num] eql 0				! FILE APPENDED TO THE LIST OR FILE HAS NEVER BEEN OPENED
then begin							
     input_fab [fab$b_fns] = .lnk$gl_curfil [fdb$w_usrnamlen];	! IT HAS NEVER BEEN OPENED, SO SET
     input_fab [fab$l_fna] = .lnk$gl_curfil [fdb$l_usrnamadr]; 	! THE FILE NAME LENGTH AND ADDRESS
     input_fab [fab$b_dns] = .lnk$gl_curfil [fdb$w_defnamlen];	! SET DEFAULT NAME STRING SIZE
     input_fab [fab$l_dna] = .lnk$gl_curfil [fdb$l_defnamadr];	! AND ADDRESS
     end							! OTHERWISE, CAN'T USE NAME BLOCK OPEN
else input_fab [fab$v_nam] = true;				! OTHERWISE SET OPEN BY FILE ID FLAG

if .lnk$gl_curfil [fdb$v_libr]					! IF FILE IS A LIBRARY
then begin							! THEN OPEN DIFFERENTLY
     if (open_sts = (if .current_ifi eql 0 
		     then lnk$openlib (.auxfnb)
		     else true
	)	    )
     then begin
	  if  .lnk$gl_ctlmsk [lnk$v_intfil]			! IF THIS IS THE INTERNAL SHAREABLE IMAGE STB LIBRARY
	  and .nextintfil eql 1					!  (REMEMBER NEXTINTFIL HAS BEEN DECREMENTED)
          then if not .lnk$gl_curfil [fdb$v_imglib]		!  BUT DID NOT TURN OUT TO BE SHAREABLE IMAGE STB LIBRARY
	       then begin
		    signal (lin$_notimglib, 1			! ISSUE THE MESSAGE
			   ,lnk$gl_curfil [fdb$q_filename]
			   );
		    lnk$closefile (.lnk$gl_curfil);		! CLOSE THE FILE
		    lnk$gl_curfil [fdb$v_libr] = true;		! FORCE DESCRIPTOR TO EVAPORATE
		    return lnk$nxtfil ();			! RECURSE TO DISPOSE OF DESCRIPTOR AND RETURN NEXT FILE
		    end;
	  lnk$gl_record = 0;					! INIT RECORD COUNTER
	  return true;
	  end;
     rms_stv = .lbr$gl_rmsstv;					! THERE WAS AN ERROR. SET STV
     end
else begin
     if .lnk$gl_curfil [fdb$v_shr]				! IF A SHAREABLE IMAGE FILE SET TO OPEN FOR BOTH
     then begin
	  input_fab [fab$v_sqo]    = false;			! NOT SEQUENTIAL ONLY
	  input_fab [fab$v_bro]    = true;			! RECORD AND BLOCK OPERATIONS
	  input_fab [fab$v_upi]    = true;			! SHARED ACCESS
	  input_fab [fab$v_shrget] = true;			! SET FOR SHARED GETS
	  input_fab [fab$v_shrput] = true;			! AND PUTS (LINKER DOESN'T, BUT MUST SET SO WE
	  end;							!  CAN READ IT IN CASE INSTALLED /WRITE)

     if .current_ifi eql 0 
     then begin
	  $getjpi (itmlst=lnk$gt_jpilst);
	  if  .lnk$gl_filesleft leq 3 
	  then lnk$closefile ();				! THEN CLOSE DOWN A FILE

	  open_sts =  openit ();				!  AND TRY AGAIN
	  rms_stv  = .input_fab [fab$l_stv] ;			! PICKUP SECONDARY STATUS
	  end
     else open_sts = true ;

     if .open_sts						! IF SUCCESSFUL
     then begin
	  if .lnk$gl_curfil [fdb$w_ifi] eql 0
	  then	begin
		lnk$gl_curfil [fdb$w_ifi] = .input_fab [fab$w_ifi];	! SAVE IFI FOR LATER CLOSE
		ch$move  (dsc$c_s_bln, lnk$filnamdsc (input_fab)	! SAVE THE RESULTANT FILE NAME
		         ,lnk$gl_curfil [fdb$q_filename]		!  IN CASE OF ERROR LATER
			 );
		end
	  else input_fab [fab$w_ifi] = .lnk$gl_curfil [fdb$w_ifi];	!IF FILE OPEN, USE ITS IFI

	  if .lnk$al_rab [rab$l_ubf] eql 0			! ALLOCATE A USER BUFFER (IF NECESSARY)
	  then	begin						! WITH A SIZE WHICH IS
		lnk$al_rab [rab$w_usz] = obj$c_maxrecsiz; 	!  MAX ALLOWABLE OBJECT RECORD
		lnk$alloblk (.lnk$al_rab [rab$w_usz]		! FOR RMS TO USE ON RECORDS THAT
			    , lnk$al_rab [rab$l_ubf]);		! CROSS BLOCK BOUNDARIES
		end;						! AND FOR READING LIBRARY HEADERS

	  lnk$al_rab [rab$l_fab] = input_fab;			! SET FAB POINTER
	  lnk$al_rab [rab$w_isi] = 0;				! ENSURE IT IS RE-USABLE RAB
	  if (open_sts = $connect (rab=lnk$al_rab);		! AND ATTEMPT TO CONNECT IT
	      rms_stv  = .lnk$al_rab [rab$l_stv];
 	      .open_sts
	     )
	  then	begin						! AND IF SUCCESSFUL
		if .lnk$gl_curfil [fdb$v_shr]			! FINALLY IF THIS IS A SHAREABLE IMAGE
								! TELL RMS WHAT I KNOW ABOUT THE
		then begin					! THE RECORDS OF THE FILE I.E.
		     input_fab [fab$v_esc] = true;		! RMS $MODIFY FUNCTION WHICH WILL TELL
		     input_fab [fab$l_ctx] = rme$c_setrfm;	! RMS THAT THIS IS A VARIABLE
		     input_fab [fab$b_rfm] = fab$c_var;		! LENGTH RECORD FILE, EVEN THOUGH THE
		     if (open_sts = $modify (fab=input_fab);	! THE RECORDS OF THE FILE ARE FIXED
			 rms_stv  = .input_fab [fab$l_stv];
			.open_sts
			)
		     then (lnk$gl_record = 0; return true)	! AND THAT IS ALL IF IT SUCCEEDS
		     end
		else (lnk$gl_record = 0; return true);
	    end;
	end;							! IF ANY OF THE ABOVE FAILS
    end;							! FILE WAS NOT A LIBRARY

lnk$closefile (.lnk$gl_curfil);					! ATTEMPT CLOSE 
								! ISSUE MESSAGES
errorcode = lin$_openin;					! SET ERROR CODE

if .lnk$gl_ctlmsk [lnk$v_intfil] or .default_lib		! IF AN INTERNAL FILE
then errorcode [sts$v_severity] = sts$k_info			! THEN NOT FATAL
else errorcode [sts$v_severity] = sts$k_severe;			! OTHERWISE IT IS

signal (.errorcode,1						! FIRST THE LINK PASS NUMBER
	,lnk$filnamdsc (input_fab)
	,.open_sts, .rms_stv
	);
if .lnk$gl_curclu [clu$v_intclu]				! IF THIS IS INTERNALLY CREATED CLUSTER
then begin
     lnk$gl_curclu [clu$l_shrlst]  = 0;				! CLEAR INFO LEFT AROUND FOR CONSISTENCY CHECKS
     lnk$gl_curclu [clu$l_adrcnt]  = 0;
     lnk$gl_curclu [clu$l_adrleft] = 0;
     end;

!
!    Now, if we bombed out while trying to open an internally materialized
!    shareable image, we'd better get rid of its cluster descriptor, too
!
if   .lnk$gl_ctlmsk [lnk$v_intfil] 				! FILE IS INTERNALLY MATERIALIZED
and  .lnk$gl_curfil [fdb$v_shr]    				! AND IS SHAREABLE 
and  .lnk$gl_curclu [clu$v_intclu] 				! CLUSTER IS INTERNALLY MATERIALIZED
and  .lnk$gl_curclu [clu$v_shrimg]				! AND IS SHRIMG CLUSTER
then begin
     bind   nxtclu  = lnk$gl_curclu [clu$l_nxtclu]   : ref block [,byte],
	    prevclu = lnk$gl_curclu [clu$l_prevclu]  : ref block [,byte] ;

     if  .prevclu neq 0			  			! IF NOT FIRST CLUSTER,
     then prevclu [clu$l_nxtclu] = .nxtclu;  			! THEN SET PREVIOUS CLUSTER'S
								! FWD PTR TO THE NEXT CLUSTER
     if  .nxtclu  neq 0			  			! IF NOT LAST CLUSTER,
     then nxtclu [clu$l_prevclu] = .prevclu; 			! THEN SET THE NEXT CLUSTER'S
     end;							! BACK PTR TO PREVIOUS CLUSTER

lnk$gl_curfil [fdb$v_libr] = true; 				! UNCONDITIONALLY MAKE IT A LIBRARY SO THAT
				  				!  IT'S DESCRIPTOR WILL BE EVAPORATED
return lnk$nxtfil ();		  				! RECURSING TO DISPOSE OF ITS DESCRIPTOR

end;								! OF LNK$NXTFIL ROUTINE

global routine lnk$nxtrec (recdesc) =
!
!	READ NEXT RECORD FROM CURRENTLY OPEN FILE.
!	THIS ROUTINE ACQUIRES RECORDS SEQUENTIALLY
!	UNTIL END OF FILE IS DETECTED, IN WHICH
!	CASE IT HAS THE VALUE FALSE. SUCCESSFUL READS RETURN
!	THE ADDRESS AND LENGTH OF NEXT RECORD AND THE ROUTINE
!	HAS THE VALUE TRUE
!
begin
map
	recdesc 	: ref block [,byte];
local
	stvcode,
	readerror,						! READ ERROR CODE
	bufdesc 	: block [dsc$c_s_bln, byte];		! DESCRIPTOR FOR BUFFER

bind auxfnb = lnk$gl_curfil [fdb$t_auxfnb]			! REFERENCE THE AUX. FILE NAME BLOCK PART
			: block [nam$c_bln, byte];
!
if .lnk$gl_curfil [fdb$v_libr]					! IF READING A LIBRARY FILE
then begin
     bufdesc [dsc$w_length]  = .lnk$al_rab [rab$w_usz];		! SET UP DESCRIPTOR FOR BUFFER
     bufdesc [dsc$a_pointer] = .lnk$al_rab [rab$l_ubf];

     readerror = lbr$get_record ( %ref(.lnk$gl_curfil [fdb$w_ifi]), bufdesc, bufdesc);	! READ A RECORD

     lnk$al_rab [rab$l_stv]  = .lbr$gl_rmsstv;
     lnk$al_rab [rab$w_rsz]  = .bufdesc [dsc$w_length];		! SET INFO INTO RAB
     lnk$al_rab [rab$l_rbf]  = .bufdesc [dsc$a_pointer];	!...
     end
else readerror = $get (rab=lnk$al_rab);				! NOT LIBRARY, JUST DO A GET

if   not .readerror						! IF THERE WAS AN ERROR OTHER THAN
then if  .readerror neq rms$_eof				! AND IF AN ERROR OTHER THAN
     then begin							! END OF FILE
	  stvcode = .lnk$al_rab [rab$l_stv];			! SAVE STV OVER CLOSE
	  lnk$closefile (.lnk$gl_curfil);			! ATTEMPT TO CLOSE IT
	  signal ( lin$_readerr, 1				! ISSUE READ ERROR MESSAGE
		 , lnk$gl_curfil [fdb$q_filename]
		 ,.readerror, .stvcode
		 );
	  return false;
	  end
     else return false;						! ALL DONE IF END OF FILE

lnk$gl_objrecs = .lnk$gl_objrecs + 1;				! 
lnk$gl_record  = .lnk$gl_record + 1;

recdesc [dsc$w_length]  = .lnk$al_rab [rab$w_rsz];		! RETURN LENGTH AND ADDRESS OF THIS
recdesc [dsc$a_pointer] = .lnk$al_rab [rab$l_rbf];		! SUCCESSFULLY OBTAINED RECORD

return true							! AND ALL IS DONE
end;								! OF LNK$NXTREC ROUTINE

global routine lnk$pointobj(modrfa) : novalue =
begin
!
!++
!
!	THIS ROUTINE IS CALLED DURING LIBRARY OR SHAREABLE IMAGE FILE READING TO POINT TO
!	THE REQUIRED PARTITION IN THE FILE GIVEN BY ITS RFA.
!	FOR A LIBRARY THE NEXT GET WILL READ THE LIBRARY MODULE'S HEADER RECORD.
!	FOR A SHAREABLE IMAGE FILE MERELY DO A FIND BY RFA SO THAT NO RECORD IS
!	SKIPPED. I.E. NEXT GET GETS RECORD POINTED TO.
!
map 
	modrfa 		: ref block [,byte];			! POINTER TO RFA BLOCK
local
	status,
	hdrdesc 	: block [dsc$c_s_bln,byte],		! STRING DESCRIPTOR FOR MODULE HEADER
	libmodhdr 	: ref block [,byte],			! POINTER TO LIBRARY MODULE HEADER
	reclng;							! LENGTH OF RECORD

bind auxfnb = lnk$gl_curfil [fdb$t_auxfnb]			! REFERENCE THE AUXILIARY FILE NAME BLOCK PART
			: block[nam$c_bln,byte];

if .lnk$gl_curfil [fdb$v_libr]					! IF THIS IS A LIBRARY FILE
then begin
     local	modnamdesc  : block[dsc$c_s_bln,byte],
		header 	    : block[lbr$c_maxhdrsiz,byte];

     if .lnk$gb_pass eql 1					! ONLY READ HEADER ON PASS 1
     then begin
	  hdrdesc [dsc$w_length]  = lbr$c_maxhdrsiz;		! SET UP DESCRIPTOR FOR HEADER BUFFER
	  hdrdesc [dsc$a_pointer] = header;
	  if not (status = lbr$set_module (%ref (.lnk$gl_curfil [fdb$w_ifi]), .modrfa, hdrdesc))
	  then	begin
		lnk$al_rab [rab$l_sts] = .status;		! ERROR - SET CODES INTO RAB
		lnk$al_rab [rab$l_stv] = .lbr$gl_rmsstv;
		end
	  else	begin
		if .header [mhd$v_selsrc]			! IF MODULE IS SELECTIVELY SEARCHED
		then lnk$gl_curfil [fdb$v_selser] = true
		else lnk$gl_curfil [fdb$v_selser] = false;
		return true;
		end;
	  end
     else begin								! PASS 2 -- NEED TO FIND MODULE
	  status = lbr$find (%ref (.lnk$gl_curfil[fdb$w_ifi]), .modrfa);! POSITION TO READ MODULE
	  if .status then return true;					! ALL DONE IF SUCCESSFUL

	  modnamdesc [dsc$w_length]  = .lnk$gl_curomd [omd$b_namlng];	! IT APPEARS TO HAVE DISAPPEARED.  
	  modnamdesc [dsc$a_pointer] =  lnk$gl_curomd [omd$t_name];	!  TRY A LOOKUP IN CASE IT WAS MERELY REPLACED
	  status = lbr$lookup_key (%ref (.lnk$gl_curfil [fdb$w_ifi]), modnamdesc, .modrfa) ;
	  if .status  then return true;

	  lnk$al_rab [rab$l_sts] = .status;				! ERROR--SET CODES IN RAB
	  lnk$al_rab [rab$l_stv] = .lbr$gl_rmsstv;
	  end;
     end
else begin							! FILE IS NOT A LIBRARY
     lnk$al_rab [rab$b_rac]  =  rab$c_rfa;			! SET TO ACCESS BY RFA
     lnk$al_rab [rab$l_rfa0] = .modrfa [rfa$l_vbn];		! SET UP RFA
     lnk$al_rab [rab$w_rfa4] = .modrfa [rfa$w_offset];
     status = $find (rab=lnk$al_rab);				! PERFORM THE FIND
     lnk$al_rab [rab$b_rac]  =  rab$c_seq;			! RESET TO SEQUENTIAL ACCESS
     if .status then return true;				! ALL DONE IF GOOD FIND
     end;

signal	( lin$_libfind, 4, .modrfa [rfa$l_vbn]			! REPORT ERROR IF FALL THROUGH
	,.modrfa [rfa$w_offset], lnk$gl_curomd [omd$b_namlng]
	, lnk$gl_curfil [fdb$q_filename], lin$_format, 0
	,.status,.lnk$al_rab [rab$l_stv]
	);
return;								! AND ALL SET
end;

global routine lnk$closefile ( fdbclose ) : novalue =
begin
!
! THIS ROUTINE WILL LOCATE A FILE FOR CLOSING -- IF THE FDB
!	IS EXPLICITLY SPECIFIED BY BEING PASSED, THEN THAT FILE IS
!	CLOSED, OTHERWISE THE NEXT OPEN FILE LOCATED FROM THE 
!	OPENCLUS AND OPENFDB POINTERS IS CLOSED.
!


	routine closeit (fdbclose) : novalue =
	begin
	!
	! ROUTINE TO CLOSE A FILE GIVEN ITS FDB
	!
	map	fdbclose  : ref block [,byte];
	bind	auxfnb    = fdbclose [fdb$t_auxfnb] : block [nam$c_bln,byte];
	local	input_fab : block [fab$c_bln,byte],
		status ;

	if .fdbclose [fdb$w_ifi] neq 0 					! IF FILE IS OPEN
	then begin
	     if not .fdbclose [fdb$v_libr]				! AND FILE IS NOT A LIBRARY
	     then begin
		  $fab_init (fab=input_fab);
		  input_fab [fab$w_ifi] = .fdbclose [fdb$w_ifi];
		  auxfnb [nam$b_rss] = 0;
		  auxfnb [nam$b_ess] = 0;
		  status = $close (fab=input_fab);
		  end
	     else begin							! FILE IS A LIBRARY
		  status = lbr$close (%ref (.fdbclose [fdb$w_ifi]));
		  input_fab [fab$l_stv] = .lbr$gl_rmsstv;
		  if .status then lnk$gl_open_lbr = .lnk$gl_open_lbr - 1 ;
		  end;

	     if not .status
	     then signal (lin$_closein,1, fdbclose [fdb$q_filename], .status, .input_fab [fab$l_stv]);

	     fdbclose [fdb$w_ifi] = 0;					! FLAG FILE CLOSED
	     end;
	return;
	end;								! OF CLOSEIT

!
!
! Main body of LNK$CLOSEFILE
!
!
map
	fdbclose : ref block [,byte];
builtin
	nullparameter;
label
	cluster;

if not nullparameter (1)					! IF PARTICULAR FILE SPECIFIED
then return (closeit (.fdbclose)) ;				! THEN CLOSE IT AND RETURN

if .openclus eql 0						! IF OPEN CLUSTER LIST UNINITIALIZED,
then begin							!   THEN DO THAT NOW
     openclus  = .lnk$gl_clulst [0];				! FIRST CLUSTER,
     openfdb   = .openclus [clu$l_fstfdb];			!  FIRST FDB IN FIRST CLUSTER
     end;

start_fdb = 0;							! INITIALIZE STARTING FDB

cluster:
    begin
    while true do
	begin
	while   .openfdb neq 0 do				! WHILE NOT AT END OF FDB LIST FOR THIS CLUSTER
	    if  .openfdb [fdb$w_ifi] eql 0			!  IF FILE IS ALREADY CLOSED
	    then begin						!
		 if  .start_fdb eql .openfdb			! BACK TO WHERE WE STARTED, NOTHING FOUND
		 then begin
		      if   .openclus eql lnk$gl_defclu		! IF ALREADY AT THE DEFAULT CLUSTER
		      then begin				!  *** this should be an error report ***
			   openclus = 0;			! FORCE A RESTART FROM THE TOP
		           return;				! GO AWAY FOR NOW
		      	   end
		      else begin
			   openclus =  lnk$gl_defclu;		! ELSE, USE DEFAULT CLUSTER
			   openfdb  = .openclus [clu$l_fstfdb];	! ALWAYS RESET FDB TO FIRST IN NEW CLUSTER
			   end
		      end
		 else begin
		      if  .start_fdb eql 0			! IF STARTING POINT HASN'T BEEN SET YET,
		      then start_fdb = .openfdb;		!  THEN DO IT NOW

	              openfdb = .openfdb [fdb$l_nxtfdb];	! LOOK AT THE NEXT FDB FOR THIS CLUSTER
		      end
		 end
	    else leave cluster;					! WE HAVE FOUND AN OPEN FILE -- LEAVE

	if  .openclus [clu$l_nxtclu] eql 0			! IF AT THE END OF THE CLUSTER LIST
	then openclus = .lnk$gl_clulst [0]			! START AT BEGINNING OF CLUSTER LIST AGAIN
	else openclus = .openclus [clu$l_nxtclu];		! ELSE MOVE ON TO NEXT CLUSTER IN LIST

	openfdb = .openclus [clu$l_fstfdb];			! ALWAYS RESET FDB TO FIRST IN NEW CLUSTER
	end;
    end; 							! OF CLUSTER    

closeit (.openfdb);						! GOT A FILE, NOW CLOSE IT
openfdb   = .openfdb [fdb$l_nxtfdb];

return;
end;								! OF LNK$CLOSEFILE

routine tran_next_lib =
!
!	THIS ROUTINE RETURNS THE VALUE TRUE IF THERE IS ANOTHER DEFAULT LIBRARY
!	TO PROCESS AND FALSE IF NOT.  IF THERE IS ANOTHER LIBRARY, THE FILENAME
!	IS SET UP IN THE VECTOR RESULTSTRING WITH ITS DESCRIPTOR IN LIBNAMDESCR.
!
begin
bind
	maxliblng = %charcount ('LNK$LIBRARY_999');		! MAX LIBRARY LOGICAL NAME LENGTH
own
	lnklibnam : vector [%charcount('LNK$LIBRARY')+1, byte]	! THE INITIAL DEFAULT LIBRARY NAME
			initial (%ascii'LNK$LIBRARY');
local
	trancode,
	deflibnam	: vector [maxliblng, byte],		! TO RECEIVE THE FORMATTED LOGICAL NAME
	namptr		: vector [2];				! DESCRIPTOR OF DEFLIBNAM

if .lnk$gl_ulibmask [2 - .deflibacmode] neq 0			! IF THIS LOGICAL NAME TABLE ENABLED
then begin
     namptr[0] = maxliblng;					! INIT THE DESCRIPTOR
     namptr[1] = deflibnam;
     if .userlibno eql 0					! IF THIS IS FIRST IN THIS TABLE
     then begin
	  namptr[0] = %charcount ('LNK$LIBRARY');		! SET THE COPY LENGTH
	  ch$move (.namptr [0], lnklibnam [0], deflibnam);	! COPY THE NAME
	  end
     else if not sys$fao(libnamefao,namptr,namptr,.userlibno)	! OTHERWISE MUST FAO IT
	  then return false;					! AND GIVE UP IF IT FAILS
     !
     !    NOW TRANSLATE THE LOGICAL NAME
     !
     libnamdescr [0] = nam$c_maxrss;				! RESET STRING DESCRIPTOR
     trancode        = $trnlog	(lognam = namptr		! TRANSLATE THE NAME
				,dsbmsk =.deflibdsbmsk [.deflibacmode]
				,rsllen = libnamdescr
				,rslbuf = libnamdescr
				);
     if (.trancode and (.trancode neq ss$_notran)) 		! IF GOT A GOOD NAME RETURN WITH IT
     then return true;
     end;
!
! FAILED. MOVE ON TO NEXT GROUP
!
if (deflibacmode = .deflibacmode+1) gtr 2			! BUT IF WE ARE ALL DONE
then return false;						! THEN RETURN NO MORE

userlibno = 0;							! OTHERWISE RESET LIBRARY NUMBER
return tran_next_lib ();					! AND RECURSE TO RETURN NEXT LIBRARY
end;

global routine lnk$openlib (nameblock, an_open_fdb) =
!
! THIS ROUTINE OPENS A LIBRARY FILE USING THE LIBRARY ACCESS PROCEDURES.
!
begin
map
	nameblock	: ref block [,byte] ;
local
	status,
	libraryfunc	: initial (lbr$c_read),
	fdb_to_close	: initial (0),
	close_lib	: initial (false),
	init_lib	: initial (false),
	filnamdesc	: block [dsc$c_s_bln,byte],
	index ;
builtin	
	nullparameter ;
bind
	fdbfilename = lnk$gl_curfil [fdb$q_filename] : block [,byte] ;


if  .nameblock [nam$w_fid_num] neq 0				! IF FILE HAS BEEN OPENED
and .lnk$gl_curfil [fdb$w_ifi] neq 0				! AND IS OPENED NOW
then return true ;						! THEN WE'RE DONE
								
if not nullparameter(2) then fdb_to_close = .an_open_fdb ;	! DETERMINE FDB TO BE CLOSED NEXT

$getjpi (itmlst=lnk$gt_jpilst) ;				! WE MAY NEED TO CLOSE ONE SO THAT
if .lnk$gl_filesleft leq 3  then close_lib = true ;		! WE CAN OPEN ANOTHER

do  begin
    if  .close_lib
    then begin							! THEN CLOSE A FILE AND TRY AGAIN
	 lnk$closefile (.fdb_to_close) ;
	 fdb_to_close = 0 ;
	 end
    else close_lib = true ;					! CLOSE A FILE NEXT TIME THRU THE LOOP
    status = lbr$ini_control (index,libraryfunc,0,.nameblock) ;	! INITIALIZE INDEX
    end
until .status neq lbr$_toomnylib ;

if not .status then return .status ;
if .nameblock [nam$w_fid_num] eql 0   				! IF FILE HAS NEVER BEEN OPENED...
then begin
     status =  lbr$open (index, lnk$gl_curfil [fdb$q_usrnamdsc]
			,0,     lnk$gl_curfil [fdb$w_defnamlen]
			) ;
     fdbfilename [dsc$w_length]  = .nameblock [nam$b_rsl] ;	! SET NAME DESCRIPTOR
     fdbfilename [dsc$a_pointer] = .nameblock [nam$l_rsa] ;
     end
else status = lbr$open (index) ;				! IN PASS 2 CAN OPEN BY NAM BLOCK

if .status 
then begin
     lnk$gl_open_lbr 		   = .lnk$gl_open_lbr + 1 ;
     lnk$gl_curfil [fdb$w_ifi]     = .index ;			! IF SUCCESSFUL OPEN, SET INDEX FOR CLOSE
     lbr$gl_control [lbr$v_locate] =  true ;			! SET LOCATE MODE

     if .lbr$gl_rmsstv eql lbr$c_typ_shstb			! IF SHAREABLE IMAGE SYMBOL TABLE LIBRARY
     then lnk$gl_curfil [fdb$v_imglib] = true			!  THEN MARK IT AS SUCH
     else if .lbr$gl_rmsstv neq lbr$c_typ_obj			!  OTHERWISE IF NOT AN OBJECT LIBRARY
	  then  signal_stop (lin$_notobjlib,1,fdbfilename) ;	!  THEN SIGNAL ERROR AND GIVE UP

     if .lnk$al_rab [rab$w_usz] eql 0
     then begin
	  lnk$al_rab [rab$w_usz] = obj$c_maxrecsiz ;
	  lnk$alloblk (.lnk$al_rab [rab$w_usz], lnk$al_rab [rab$l_ubf]) ;
	  end ;
     end ;

return .status
end ;								! OF LNK$OPENLIB

end eludom
