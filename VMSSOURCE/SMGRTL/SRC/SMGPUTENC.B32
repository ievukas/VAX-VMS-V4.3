%TITLE 'SMG$PUT_VIRTUAL_DISPLAY_ENCODED - Put to virtual display encoded'
MODULE SMG$PUT_VIRTUAL_DISPLAY_ENCODED (
		IDENT = '1-006'	! File: SMGPUTENC.B32 Edit: RKR1006
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Screen Management
!
! ABSTRACT:
!	This module contains a routine which accepts an encoded form
!	of text and attribute information which needs to be placed in
!	a virtual display buffer.
!
! ENVIRONMENT:	User mode, Shared library routines.
!
! AUTHOR: R. Reichert, CREATION DATE: 19-APR-1983
!
! MODIFIED BY:
!
! 1-001	- Original.  Skeleton for future code.  RKR 19-APR-1983
! 1-002 - Start code.  RKR 19-APR-1983.
! 1-003 - Make it work.  RKR 21-APR-1983.
! 1-004 - Add $SMG$VALIDATE_ROW_COL after being stung.  RKR 22-APR-1983
! 1-005 - Adapt to change in SMG$$PUT_TEXT_TO_BUFFER.  RKR 27-APR-1983
! 1-006 - Remove external references to DD_ structures and count -- no
!	  longer needed (or available).
!	  RKR 20-May-1983.
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE

! Public entry points:

    SMG$PUT_VIRTUAL_DISPLAY_ENCODED;	! Move text strings with
					! specially-encoded video attr.
					! information provided.

! INCLUDE FILES
!

REQUIRE 'RTLIN:SMGPROLOG';		! defines psects, macros, tcb,
					!  wcb, & terminal symbols
REQUIRE 'RTLIN:STRLNK';			! JSB linkage

!
! EXTERNAL REFERENCES
!
EXTERNAL ROUTINE
    LIB$GET_VM,			! Allocate heap storage

    LIB$FREE_VM,		! Deallocate heap storage

    LIB$ANALYZE_SDESC_R2 : LIB$ANALYZE_SDESC_JSB_LINK,

    SMG$$CHECK_FOR_OUTPUT_DCB,	! Force output if now is the time

    SMG$$PUT_TEXT_TO_BUFFER,	! Move callers text to virtual
				! display text buffer checking
				! for characters that affect
				! where characters land in
				! buffer.

    SMG$$SCROLL_AREA;		! Scroll a rectangular area


EXTERNAL
    SMG$_FATERRLIB,	! Fatal error in SMG$ -- internal consistancy
			! check failed.
    SMG$_INVARG,	! Invalid argument
    SMG$_INVCOL,	! Invalid column number
    SMG$_INVDIS_ID,	! Invalid virtual display id
    SMG$_INVPAS_ID,	! Invalid pasteboard id
    SMG$_INVROW,	! Invalid row number
    SMG$_WRONUMARG;	! Wrong number of arguments

!<BLF/PAGE>

%SBTTL 'SMG$PUT_VIRTUAL_DISPLAY_ENCODED - Output encoded string'
GLOBAL ROUTINE SMG$PUT_VIRTUAL_DISPLAY_ENCODED (
                                DISPLAY_ID,
				ENCODED_LENGTH,
                                ENCODED_TEXT : REF VECTOR [,BYTE],
                                LINE_NO : REF VECTOR [,WORD],
                                COL_NO  : REF VECTOR [,WORD],
				WRAP_FLAG,
				CHAR_SET 
                                      ) =
!++
! FUNCTIONAL DESCRIPTION:
!
!       This routine will output the encoded string to the explicit
!       virtual display (if DISPLAY_ID is supplied) or to the default
!       virtual display (if DISPLAY_ID is not supplied).  If LINE_NO
!	and COL_NO are omitted, the string is output at the current
!	cursor position.  The entire line is rewritten; if the text
!	does not span the width of the display, blank fill is supplied.
!
!	This routine is useful to output strings where some but not all
!	of the characters in a string will have video renditions, or 
!	where different video renditions are desired for characters in 
!	the same string.
!
! CALLING SEQUENCE:
!
!       ret_status.wlc.v = SMG$PUT_VIRTUAL_DISPLAY_ENCODED ( 
!                                       DISPLAY_ID.rl.r,
!					ENCODED_LENGTH.rlu.r,
!                                       ENCODED_TEXT.rab.v
!                                       [,LINE_NO.rwu.r]
!                                       [,COL_NO.rwu.r]
!					[,WRAP_FLAG.rl.r]
!					[,CHAR_SET.rl.r])
!
! FORMAL PARAMETERS:
!
!    DISPLAY_ID.rl.r    The display id of the desired display.
!
!    ENCODED_LENGTH.rlu.r	Length of the encoded text
!
!    ENCODED_TEXT.rab.v The address of the encoded string to be output.
!                       Format of the encoding is:
!
!	text_of_string	   ! triplet    ! triplet    !       length_of_postamble
!    ______________________!____!____!__!____!____!__!...  !____
!    (encoded_length -     ! 5 bytes    ! 5 bytes    !       2 bytes
!    length_of_postamble)
!    bytes    
!
!           Text_of_string      The actual text.  
!
!           one or more triplets defining a field within the text 
!           consisting of:
!
!               Field_start_pos.rwu     Starting byte position of a 
!                                       field with the text (Numbering 
!                                       starts at 1).
!
!               Field_length.rwu        Length of a field in bytes.
!
!               Field_attribute.rbu     Bits representing video 
!                                       attributes to be applied to this
!                                       field.
!
!           Fields have their video attributes applied on a field-by-
!           field basis.  Portions of the text not contained within a
!           field definition have no video attributes applied.  See
!           examples below.
!
!           Length_of_postamble.rwu     The length of the postamble --
!                                       consisting of this byte count 
!                                       and the sum of the bytes 
!                                       occupied by the triplets.
!                                       The number of triplets can be 
!                                       calculated as:
!                                       (Length_of_postamble - 2) /5
!					Length_of_postamble must always
!					be present - value will be 2 if
!					there are no triplets.
!
!           Examples:
!
! 	    Length_of
!  	    postamble      Triplets                                Text
! 	    --------      --------                                ----
! 	    7             1 3 code_for_underline                  ABC
! 	    is ABC underlined.
!
! 	    12            1 9 code_for_underline  
!           		  6 4 code_for_bold                       ABCDEFGHI
! 	    is ABCDEFGHI with ABCDE underlined and FGHI bolded (not underlined
!	    and bolded).
!
! 	    Each triplet is treated as an atomic unit; attributes are applied
! 	    in the order specified.  For instance, in the example above, the
! 	    code_for_bold overrides the code_for_underline for letters FGHI.
! 	    If the desired result was bold and underline for FGHI, the attribute
! 	    would be specified as code_for_bold_OR_code_for_underline.
!
!    LINE_NO.rwu.r      Optional.  Line number at which to start output.
!                       If omitted (=0), the current line is used.
!
!    COL_NO.rwu.r       Optional.  Column number at which to start
!                       output.  If omitted (=0), the current column is used.
!
!    WRAP_FLAG.rl.r	Optional.
!			= 0 means no wrap
!			= 1 means wrap
!			If omitted, no wrap is the default.
!
!    CHAR_SET.rl.r  	Optional.  Character set to use.
!			Choices are:
!				SMG$C_UNITED_KINGDOM
!				SMG$C_ASCII (default)
!				SMG$C_SPEC_GRAPHICS
!				SMG$C_ALT_CHAR
!				SMG$C_ALT_GRAPHICS
!
! IMPLICIT INPUTS:
!
!       NONE
!
! IMPLICIT OUTPUTS:
!
!       NONE
!
! COMPLETION STATUS:
!
!       SS$_NORMAL      Normal successful completion
!	LIB$_INSVIRMEM	Insufficient virtual memory.
!	SMG$_INVARG	Invalid argument or combination of arguments.
!			For example, one of the attribute triplets may
!			specify a starting byte and number of bytes that
!			extends beyond the length of the string.
!
! SIDE EFFECTS:
!
!       NONE
!--
    BEGIN
    BUILTIN
	NULLPARAMETER;

!+
! Definitions of part of a attribute triplet.
!-
MACRO
    F_START	= 0, 0, 16, 0%,		! Field starting position
    F_LEN	= 2, 0, 16, 0%,		! Field length
    F_ATTR	= 4, 0,  8, 0%;		! Field attribute bits

LITERAL
    THRESHOLD		= 240,		! If the size of the string
					! we're dealing with is greater
					! than this size, allocate
					! buffer from heap storage --
					! else use stack buffer.
    TRIP_SIZE 		= 5,		! Size of an attribute triplet
    POST_SIZE_FIELD 	= 2;		! Size of the postamble length
					! field
					! field.
    LOCAL
	LOCAL_BUF: VECTOR [THRESHOLD, BYTE], ! Local buffer on stack

	CSET,	! Character set being used.

	ROW,	! Row in virtual display where next char goes.

	COL,	! Col in virtual display where next char goes.

	TRIP_START,			! Offset in encoded string of
					! 1st attribute triplet.

	TRIP,				! Index for which attribute
					! triplet is currently being
					! processed.

	NO_TRIPS,			! No. of attribute triplets in
					! this string.

	PAMBLE_LEN,			! Length of the postamble

	T_LEN,				! Lenth of the text part of the
					! string.

	STATUS,				! Status of subroutine calls

	ABUF : REF VECTOR [,BYTE],	! Address of a temporary buffer
					! to hold the attributes while
					! we apply the attributes
					! indicated by the triplets
					! in the input string.

	DCB : REF BLOCK [,BYTE];	! Addr of display control block


    $SMG$VALIDATE_ARGCOUNT (3, 7);

    $SMG$GET_DCB ( .DISPLAY_ID, DCB);	! Get addr of display control
					! block

!+
! Calculate the lengths and counts of the pieces of this overall string.
!-
    PAMBLE_LEN = (.ENCODED_TEXT [..ENCODED_LENGTH -POST_SIZE_FIELD])<0, POST_SIZE_FIELD*8>; 
    T_LEN = ..ENCODED_LENGTH - .PAMBLE_LEN;
    TRIP_START = ENCODED_TEXT [.T_LEN];
    NO_TRIPS = (.PAMBLE_LEN - POST_SIZE_FIELD) / TRIP_SIZE;

!+
! Calc. where this text is supposed to go and see if it is a valid
! position.  Do this before we potentially allocate a heap buffer
! since if $SMG$VALIDATE_ROW_COL exits with a error, we'll never
! get control back to free the buffer.
!-
    ROW = (IF NOT NULLPARAMETER (4) THEN .LINE_NO [0]
				    ELSE .DCB [DCB_W_CURSOR_ROW]);

    COL = (IF NOT NULLPARAMETER (5) THEN .COL_NO [0]
				    ELSE .DCB [DCB_W_CURSOR_COL]);

    $SMG$VALIDATE_ROW_COL ( .ROW, .COL );

    DCB [DCB_W_CURSOR_ROW] = .ROW;
    DCB [DCB_W_CURSOR_COL] = .COL;
!+
! If needed, get a buffer to hold the attribute bytes.
!-
    ABUF = LOCAL_BUF;		! assume stack space will suffice
    IF ..ENCODED_LENGTH GTR THRESHOLD
    THEN
	IF NOT ( STATUS = LIB$GET_VM ( T_LEN, ABUF))
	THEN
	    RETURN (.STATUS);

!+
! Initialize the attribute bytes to be the defaults for the display.
!-
    CH$FILL ( .DCB [DCB_B_DEF_VIDEO_ATTR], .T_LEN, .ABUF);

!+
! Apply each of the attribute triplets to our temporary attribute buffer
!-
    TRIP = 0;
    WHILE .TRIP LSS .NO_TRIPS
    DO
	BEGIN	! For each triplet
	LOCAL
	    PTR : REF BLOCK [,BYTE];	! Pointer to current triplet

	PTR = .TRIP_START + (.TRIP * TRIP_SIZE);

	!+
	! Make sure field start and field length make sense before
	! using them.
	!-
	IF .PTR [F_LEN] LSS 0				OR
	   .PTR [F_LEN] + .PTR [F_START] GTR .T_LEN
	THEN
	    BEGIN	! Bailout
	    IF ..ENCODED_LENGTH GTR THRESHOLD
	    THEN
		BEGIN	! Give back heap first
		LIB$FREE_VM ( T_LEN, ABUF);
		RETURN ( SMG$_INVARG);
		END;	! Give back heap first
	    END;	! Bailout

	CH$FILL ( .PTR [F_ATTR],		! Attribute character
		  .PTR [F_LEN],			! No. of bytes in field
		  ABUF [ .PTR [F_START] -1] );	! Start of attribute 
						! area to be changed.
	TRIP = .TRIP + 1;
	END;	! For each triplet

!+
! Now that we know the byte by byte attributes that need to go into
! the DCB's attribute buffer -- put the text and the attributes in
! in the DCB's buffers.
!	NOTE: This chunck of code should be made smarter by having it
! call SMG$$PUT_TEXT_TO_BUFFER with batches of characters that have the
! same attributes instead of character by character.
!-
    CSET = (IF NOT NULLPARAMETER (7) THEN ..CHAR_SET
				     ELSE 0);

    INCR I FROM 0 TO .T_LEN-1
    DO
	BEGIN	! Put text into buffer
	IF NOT ( STATUS = SMG$$PUT_TEXT_TO_BUFFER (
			.DCB,				! DCB addr
			.ABUF [.I],			! Attr byte
			1,				! Text length
			ENCODED_TEXT [.I],		! Text byte
			.CSET))				! Char set
	THEN
	    RETURN (.STATUS);

	END;	! Put text into buffer

!+
! Release the temporary buffer we've been using if in heap storage.
!-
    IF ..ENCODED_LENGTH GTR THRESHOLD
    THEN
	IF NOT (STATUS = LIB$FREE_VM ( T_LEN, ABUF))
	THEN
	    RETURN ( .STATUS);

    RETURN (SMG$$CHECK_FOR_OUTPUT_DCB ( .DCB,
					SMG$C_PUT_DISPLAY_ENCODED,
					.ROW));
    END;		! End of routine SMG$PUT_VIRTUAL_DISPLAY_ENCODED
!<BLF/PAGE>

END			! End of module SMG$PUT_VIRTUAL_DISPLAY_ENCODED

ELUDOM
