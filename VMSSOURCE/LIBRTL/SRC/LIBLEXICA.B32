MODULE LIB$$LEXICAL ( %TITLE 'Internal routines for lexical functions'
		IDENT = '1-009'		! File: LIBLEXICA.B32 Edit: STAN1009
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library, DCL
!
! ABSTRACT:
!
!	This module contains routines which form the common kernel of
!	the following Run-Time Library procedures and DCL lexical functions:
!		LIB$GETDVI		F$GETDVI
!		LIB$GETJPI		F$GETJPI
!		LIB$GETSYI		F$GETSYI
!
!
! ENVIRONMENT:	User or supervisor mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 13-July-1982
!
! MODIFIED BY:
!
! 1-001	- Original.  Adapted from the DCL module LEXICON.  SBL 13-July-1982
! 1-002 - Use tables in LIBGETTAB.MAR.  SBL 8-Mar-1983
! 1-003 - Change string length from LNM$C_NAMLENGTH to 512.  SBL 11-Mar-1983
! 1-004 - Add HEXSTR format.  SBL 20-May-1983
! 1-005 - HEXSTR is now HEXSTRING.  SBL 24-May-1983
! 1-006 - Add privileges TMPJNL, PRMJNL and SECURITY.  SBL 28-July-1983
! 1-007 - Add new format MODE for JPI$_MODE.  Fix format HEXSTRING so that
!	  the significant characters get returned.  SBL 9-Sep-1983
! 1-008 - Add support for two new arguments to SYS$GETSYI - NODENAME and
!	  CSIDADR.  DG 19-Oct-1983.
! 1-009 - Fix handling of counted strings. STAN 27-Feb-1984.
!--


%SBTTL 'Declarations'
!
! PROLOGUE FILE:
!

LIBRARY 'RTLLIB';				! SYS$LIBRARY:LIB.L32
REQUIRE 'RTLIN:LIBPROLOG';			! LIB$ definitions

!
! LINKAGES:
!

LINKAGE
    CALL_LEXICAL = CALL;

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$$GETDVI: CALL_LEXICAL,			! Get Device Information
    LIB$$GETJPI: CALL_LEXICAL,			! Get Job/Process Information
    LIB$$GETSYI: CALL_LEXICAL,			! Get System Imformation
    LIB$$FORMAT_RESULT: NOVALUE;		! Format result

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    OTS$CVT_L_TZ;		! Convert to hex format

EXTERNAL
    LIB$$AB_GETDVI_TABLE,	! Table of $GETDVI codes and types
    LIB$$AB_GETJPI_TABLE,	! Table of $GETJPI codes and types
    LIB$$AB_GETSYI_TABLE;	! Table of $GETSYI codes and types

%SBTTL 'LIB$$GETDVI - Internal routine for LIB$GETDVI'
GLOBAL ROUTINE LIB$$GETDVI (
    ITEM_CODE: WORD SIGNED,		! $GETSYI Item code
    RET_STRING: REF VECTOR [, BYTE],	! Return string buffer
    RET_NUMBER: REF BLOCK [, BYTE],	! Return numeric buffer
    RET_LENGTH: REF VECTOR [, WORD],	! Returned length
    RET_TYPE: REF VECTOR [, LONG],	! Returned type code
    EVENT_FLAG,				! Event flag to use
    CHANNEL: WORD,			! Channel number
    DEVNAM_DESCR: REF BLOCK [, BYTE]	! Device name descriptor
    ): CALL_LEXICAL =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Kernel routine called from LIB$GETDVI and DCL to get device and
!	volume information.  See LIB$GETDVI for more information.
!
! CALLING SEQUENCE:
!
!	ret-status.wlc.v = LIB$$GETDVI (
!				item-code.rw.v,
!				ret-string.wt.r,
!				ret-number.wq.r,
!				ret-length.wwu.r,
!				ret-type.wl.r,
!				event-flag.rl.v,
!				channel.rwu.v,
!				devnam-descr.rt.ds)
!
! FORMAL PARAMETERS:
!
!	item-code		The $GETDVI item code
!
!	ret-string		A string of length 512 into which
!				is placed the string-formatted value.
!
!	ret-number		A quadword into which is placed the numeric
!				value, if any.
!
!	ret-length		A word into which is placed the length of
!				the string in ret-string.
!
!	ret-type		A longword into which is placed the type
!				code for the value being returned.  The
!				codes are LIB$K_FMT_xxx values defined
!				in LIBFMTDEF.SDL.
!
!	event-flag		A longword event flag number to use for
!				the $GETDVI.
!
!	channel			A word containing the channel to inquire
!				about.
!
!	devnam-descr		A string descriptor for the device name
!				being inquired about.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	SS$_NORMAL	Normal successful completion
!	SS$_xxx		Any error status from $GETDVIW
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    !+
    ! Declare fieldset that defines the layout of a GETDVI_ITEM
    !-

    FIELD
	GETDVI_ITEM_FIELDSET =
	    SET
	    W_ITEM = [0,0,16,1],	! DVI$_ item code value
	    B_TYPE = [0,16,8,0],	! LIB$K_FMT_ type code
	    A_NEXT = [3,0,0,0]		! Offset of next item
	    TES;


    LOCAL
	TABLE_ENTRY: REF BLOCK [, BYTE] FIELD (GETDVI_ITEM_FIELDSET),
					! Current table entry
	DUMMY_ENTRY: BLOCK [3, BYTE] FIELD (GETDVI_ITEM_FIELDSET),
	ITEM_LIST: BLOCK [16, BYTE],	! Item list for $GETDVI
	IOSB: VECTOR [4, WORD],		! Status block
	RET_STATUS;			! Return status

    !+
    ! Look up ITEM_CODE in LIB$$AB_GETDVI_TABLE.
    !-

    TABLE_ENTRY = LIB$$AB_GETDVI_TABLE;		! Get first element.

    WHILE .TABLE_ENTRY [W_ITEM] NEQ .ITEM_CODE
    DO
	BEGIN
	TABLE_ENTRY = TABLE_ENTRY [A_NEXT];	! Get next item
	IF .TABLE_ENTRY [W_ITEM] EQL 0		! No more items?
	THEN
	    BEGIN
	    TABLE_ENTRY = DUMMY_ENTRY;		! Use dummy table entry
	    DUMMY_ENTRY [B_TYPE] = LIB$K_FMT_BINARY;
	    EXITLOOP;
	    END;
	END;

    !+
    ! Store type code.
    !-

    RET_TYPE [0] = .TABLE_ENTRY [B_TYPE];

    !+
    ! Fill in ITEM_LIST and do the $GETDVI.
    !-

    ITEM_LIST [0,16,16,0] = .ITEM_CODE; 	! Item code
    IF .TABLE_ENTRY [B_TYPE] LEQ LIB$K_FMT_MAXSTRING	! Is it a string?
    THEN
	BEGIN
	ITEM_LIST [4,0,32,0] = RET_STRING [0];	! Return buffer
	ITEM_LIST [0,0,16,0] = 512;		! Buffer size
	IF .TABLE_ENTRY [B_TYPE] EQL LIB$K_FMT_HEXSTRING
	THEN
	    ITEM_LIST [0,0,16,0] = 256;		! Can't cvt more than 256 bytes
	END
    ELSE
	BEGIN
	RET_NUMBER [0,0,32,0] = 0;		! Zero the buffer
	RET_NUMBER [4,0,32,0] = 0;
	ITEM_LIST [4,0,32,0] = RET_NUMBER [0,0,0,0];	! Return buffer
	ITEM_LIST [0,0,16,0] = 8;		! Buffer size (Quadword)
	END;
    ITEM_LIST [8,0,32,0] = RET_LENGTH [0];	! Return length
    ITEM_LIST [12,0,32,0] = 0;			! End of list

    RET_STATUS = $GETDVIW (EFN = .EVENT_FLAG, CHAN = .CHANNEL, 
	DEVNAM = DEVNAM_DESCR [0,0,0,0], ITMLST = ITEM_LIST, IOSB = IOSB);

    IF .RET_STATUS
    THEN
	RET_STATUS = .IOSB [0];

    !+
    ! Check for errors.
    !-

    IF NOT .RET_STATUS
    THEN
	RETURN .RET_STATUS;		! Return with error code

    !+
    ! Now call LIB$$FORMAT_RESULT to format the result, if necessary.
    !-

    LIB$$FORMAT_RESULT (RET_STRING [0], RET_NUMBER [0,0,0,0], RET_LENGTH [0],
	RET_TYPE [0]);

    RETURN SS$_NORMAL;

    END;					! End of routine LIB$$GETDVI

%SBTTL 'LIB$$GETJPI - Internal routine for LIB$GETJPI'
GLOBAL ROUTINE LIB$$GETJPI (
    ITEM_CODE: WORD SIGNED,		! $GETJPI Item code
    RET_STRING: REF VECTOR [, BYTE],	! Return string buffer
    RET_NUMBER: REF BLOCK [, BYTE],	! Return numeric buffer
    RET_LENGTH: REF VECTOR [, WORD],	! Returned length
    RET_TYPE: REF VECTOR [, LONG],	! Returned type code
    EVENT_FLAG,				! Event flag to use
    PIDADDR,				! Address of PID
    PRCNAM_DESCR: REF BLOCK [, BYTE]	! Process name descriptor
    ): CALL_LEXICAL =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Kernel routine called from LIB$GETJPI and DCL to get job and
!	process information.  See LIB$GETJPI for more information.
!
! CALLING SEQUENCE:
!
!	ret-status.wlc.v = LIB$$GETJPI (
!				item-code.rw.v,
!				ret-string.wt.r,
!				ret-number.wq.r,
!				ret-length.wwu.r,
!				ret-type.wl.r,
!				event-flag.rl.v,
!				pidaddr.ra.v,
!				prcnam-descr.rt.ds)
!
! FORMAL PARAMETERS:
!
!	item-code		The $GETJPI item code
!
!	ret-string		A string of length 512 into which
!				is placed the string-formatted value.
!
!	ret-number		A quadword into which is placed the numeric
!				value, if any.
!
!	ret-length		A word into which is placed the length of
!				the string in ret-string.
!
!	ret-type		A longword into which is placed the type
!				code for the value being returned.  The
!				codes are LIB$K_FMT_xxx values defined
!				in LIBFMTDEF.SDL.
!
!	event-flag		A longword event flag number to use for
!				the $GETJPI.
!
!	pidaddr			The address of the PID, if any, being inquired
!				about.
!
!	prcnam-descr		A string descriptor for the process name
!				being inquired about, if any
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	SS$_NORMAL	Normal successful completion
!	SS$_xxx		Any error status from $GETJPIW
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    !+
    ! Declare fieldset that defines the layout of a GETJPI_ITEM.
    !-

    FIELD
	GETJPI_ITEM_FIELDSET =
	    SET
	    W_ITEM = [0,0,16,1],	! JPI$_ item code value
	    B_TYPE = [0,16,8,0],	! LIB$K_FMT_ type code
	    A_NEXT = [3,0,0,0]		! Offset of next item
	    TES;


    LOCAL
	TABLE_ENTRY: REF BLOCK [, BYTE] FIELD (GETJPI_ITEM_FIELDSET),
					! Current table entry
	DUMMY_ENTRY: BLOCK [3, BYTE] FIELD (GETJPI_ITEM_FIELDSET),
	ITEM_LIST: BLOCK [16, BYTE],	! Item list for $GETJPI
	IOSB: VECTOR [4, WORD],		! Status block
	RET_STATUS;			! Return status

    !+
    ! Look up ITEM_CODE in LIB$$AB_GETJPI_TABLE.
    !-

    TABLE_ENTRY = LIB$$AB_GETJPI_TABLE;		! Get first element.

    WHILE .TABLE_ENTRY [W_ITEM] NEQ .ITEM_CODE
    DO
	BEGIN
	TABLE_ENTRY = TABLE_ENTRY [A_NEXT];	! Get next item
	IF .TABLE_ENTRY [W_ITEM] EQL 0		! No more items?
	THEN
	    BEGIN
	    TABLE_ENTRY = DUMMY_ENTRY;	! Use dummy entry
	    TABLE_ENTRY [B_TYPE] = LIB$K_FMT_BINARY;
	    EXITLOOP;
	    END;
	END;

    !+
    ! Store type code.
    !-

    RET_TYPE [0] = .TABLE_ENTRY [B_TYPE];

    !+
    ! Fill in ITEM_LIST and do the $GETJPI.
    !-

    ITEM_LIST [0,16,16,0] = .ITEM_CODE; ! Item code
    IF .TABLE_ENTRY [B_TYPE] LEQ LIB$K_FMT_MAXSTRING
    THEN
	BEGIN
	ITEM_LIST [4,0,32,0] = RET_STRING [0];	! Return buffer
	ITEM_LIST [0,0,16,0] = 512;		! Buffer size
	IF .TABLE_ENTRY [B_TYPE] EQL LIB$K_FMT_HEXSTRING
	THEN
	    ITEM_LIST [0,0,16,0] = 256;		! Can't cvt more than 256 bytes
	END
    ELSE
	BEGIN
	RET_NUMBER [0,0,32,0] = 0;		! Zero the buffer
	RET_NUMBER [4,0,32,0] = 0;
	ITEM_LIST [4,0,32,0] = RET_NUMBER [0,0,0,0];	! Return buffer
	ITEM_LIST [0,0,16,0] = 8;		! Buffer size (Quadword)
	END;
    ITEM_LIST [8,0,32,0] = RET_LENGTH [0];	! Return length
    ITEM_LIST [12,0,32,0] = 0;			! End of list

    RET_STATUS = $GETJPIW (EFN = .EVENT_FLAG, PIDADR = .PIDADDR, 
	PRCNAM = PRCNAM_DESCR [0,0,0,0], ITMLST = ITEM_LIST, IOSB = IOSB);

    IF .RET_STATUS
    THEN
	RET_STATUS = .IOSB [0];

    !+
    ! Check for errors.
    !-

    IF NOT .RET_STATUS
    THEN
	RETURN .RET_STATUS;

    !+
    ! Now call LIB$$FORMAT_RESULT to format the result, if necessary.
    !-

    LIB$$FORMAT_RESULT (RET_STRING [0], RET_NUMBER [0,0,0,0], RET_LENGTH [0],
	RET_TYPE [0]);

    RETURN SS$_NORMAL;

    END;					! End of routine LIB$$GETJPI

%SBTTL 'LIB$$GETSYI - Internal routine for LIB$GETSYI'
GLOBAL ROUTINE LIB$$GETSYI (
    ITEM_CODE: WORD,			! $GETSYI Item code
    RET_STRING: REF VECTOR [, BYTE],	! Return string buffer
    RET_NUMBER: REF VECTOR [, BYTE],	! Return numeric buffer
    RET_LENGTH: REF VECTOR [, WORD],	! Returned length
    RET_TYPE: REF VECTOR [, LONG],	! Returned type code
    EVENT_FLAG,				! Event flag to use
    CSIDADR,				! Address of CSID src/dest
    NODENAME_DESCR: REF BLOCK [, BYTE]	! Nodedname descriptor
    ): CALL_LEXICAL =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Kernel routine called from LIB$GETSYI and DCL to get system-wide
!	information.  See LIB$GETSYI for more information.
!
! CALLING SEQUENCE:
!
!	ret-status.wlc.v = LIB$$GETSYI (
!				item-code.rw.v,
!				ret-string.wt.r,
!				ret-number.wq.r,
!				ret-length.wwu.r,
!				ret-type.wl.r,
!				event-flag.rl.v,
!				csidadr.ra.v,
!				nodename-descr.rt.ds)
!
! FORMAL PARAMETERS:
!
!	item-code		The $GETSYI item code
!
!	ret-string		A string of length 512 into which
!				is placed the string-formatted value.
!
!	ret-number		A quadword into which is placed the numeric
!				value, if any.
!
!	ret-length		A word into which is placed the length of
!				the string in ret-string.
!
!	ret-type		A longword into which is placed the type
!				code for the value being returned.  The
!				codes are LIB$K_FMT_xxx values defined
!				in LIBFMTDEF.SDL.
!
!	event-flag		A longword event flag number to use for
!				the $GETSYI.
!
!	csidadr			The address of CSID source/destination,
!				if any, being inquired about.
!
!	nodename-descr		A string descriptor for the nodename being
!				inquired about, in any.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	SS$_NORMAL	Normal successful completion
!	SS$_xxx		Any error status from $GETSYIW
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    !+
    ! Declare fieldset that defines the layout of a GETSYI_ITEM.
    !-

    FIELD
	GETSYI_ITEM_FIELDSET =
	    SET
	    W_ITEM = [0,0,16,0],	! SYI$_ item code
	    B_TYPE = [0,16,8,0],	! LIB$K_FMT_ type code
	    A_NEXT = [3,0,0,0]		! Offset of next item
	    TES;


    LOCAL
	TABLE_ENTRY: REF BLOCK [, BYTE] FIELD (GETSYI_ITEM_FIELDSET),
					! Current table entry
	DUMMY_ENTRY: BLOCK [3, BYTE] FIELD (GETSYI_ITEM_FIELDSET),
	IOSB: VECTOR [4, WORD],		! I/O status block
	ITEM_LIST: BLOCK [16, BYTE],	! Item list for $GETSYI
	RET_STATUS;			! Return status

    !+
    ! Look up ITEM_CODE in LIB$$AB_GETSYI_TABLE.
    !-

    TABLE_ENTRY = LIB$$AB_GETSYI_TABLE;		! Get first element.

    WHILE .TABLE_ENTRY [W_ITEM] NEQ .ITEM_CODE
    DO
	BEGIN
	TABLE_ENTRY = TABLE_ENTRY [A_NEXT];	! Get next item
	IF .TABLE_ENTRY [W_ITEM] EQL 0		! No more items?
	THEN
	    BEGIN
	    TABLE_ENTRY = DUMMY_ENTRY;		! Use dummy entry
	    TABLE_ENTRY [B_TYPE] = LIB$K_FMT_BINARY;
	    EXITLOOP;
	    END;
	END;

    !+
    ! Store type code.
    !-

    RET_TYPE [0] = .TABLE_ENTRY [B_TYPE];

    !+
    ! Fill in ITEM_LIST and do the $GETSYI.
    !-

    ITEM_LIST [0,16,16,0] = .ITEM_CODE; ! Item code
    IF .TABLE_ENTRY [B_TYPE] LEQ LIB$K_FMT_MAXSTRING
    THEN
	BEGIN
	ITEM_LIST [4,0,32,0] = RET_STRING [0];	! Return buffer
	ITEM_LIST [0,0,16,0] = 512;		! Buffer size
	IF .TABLE_ENTRY [B_TYPE] EQL LIB$K_FMT_HEXSTRING
	THEN
	    ITEM_LIST [0,0,16,0] = 256;		! Can't cvt more than 256 bytes
	END
    ELSE
	BEGIN
	ITEM_LIST [4,0,32,0] = RET_NUMBER [0];	! Return buffer
	ITEM_LIST [0,0,16,0] = 8;		! Buffer size (Quadword)
	END;
    ITEM_LIST [8,0,32,0] = RET_LENGTH [0];	! Return length
    ITEM_LIST [12,0,32,0] = 0;			! End of list

    RET_STATUS = $GETSYIW (EFN = .EVENT_FLAG, CSIDADR = .CSIDADR, 
	NODENAME = .NODENAME_DESCR,ITMLST = ITEM_LIST, IOSB = IOSB);

    IF .RET_STATUS
    THEN
	RET_STATUS = .IOSB [0];

    IF NOT .RET_STATUS
    THEN
	RETURN .RET_STATUS;

    !+
    ! Now call LIB$$FORMAT_RESULT to format the result.
    !-

    LIB$$FORMAT_RESULT (RET_STRING [0], RET_NUMBER [0], RET_LENGTH [0],
	RET_TYPE [0]);

    RETURN SS$_NORMAL;

    END;					! End of routine LIB$$GETSYI

%SBTTL 'LIB$$FORMAT_RESULT - Format the result'
GLOBAL ROUTINE LIB$$FORMAT_RESULT (
    RET_STRING: REF VECTOR [, BYTE],	! Return string buffer
    RET_NUMBER: REF BLOCK [, BYTE],	! Return numeric buffer
    RET_LENGTH: REF VECTOR [, WORD],	! Returned length
    RET_TYPE: REF VECTOR [, LONG]	! Returned type code
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Called by LIB$$GETxxI routines to convert the value returned
!	by the $GETxxI service to the appropriate string format.
!
! CALLING SEQUENCE:
!
!	CALL LIB$$FORMAT_RESULT (ret-string.mt.r, ret-number.rq.r,
!		ret-length.mwu.r, ret-type.rl.r)
!
! FORMAL PARAMETERS:
!
!	ret-string	A string of length 512 into which
!			is placed the formatted result.  If the
!			value type is already a string, the value
!			is in ret-string.
!
!	ret-number	A quadword containing the numeric value to
!			be formatted.
!
!	ret-length	A word containing the current length of the
!			string in ret-string, if any, and into which
!			is stored the length of the formatted result.
!
!	ret-type	A longword indicating the type of the value.
!			The type codes are LIB$K_FMT_xxx symbols and
!			are defined in LIBFMTDEF.SDL.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	CTRSTR_DESCR: BLOCK [8, BYTE],	! FAO control string descriptor
	OUTSTR_DESCR: BLOCK [8, BYTE],	! Output string descriptor
	PRMLST: VECTOR [4, LONG];	! FAOL parameter list

    !+
    ! Table of ACP type names.
    !-

    BIND
	ACP_TYPES = UPLIT BYTE (
	    %ASCIC'UNKNOWN',	! 0
	    %ASCIC'F11V1',0,0,	$ASSUME (DVI$C_ACP_F11V1, EQL, 1)
	    %ASCIC'F11V2',0,0,	$ASSUME (DVI$C_ACP_F11V2, EQL, 2)
	    %ASCIC'MTA',0,0,0,0,$ASSUME (DVI$C_ACP_MTA, EQL, 3)
	    %ASCIC'NET',0,0,0,0,$ASSUME (DVI$C_ACP_NET, EQL, 4)
	    %ASCIC'REM',0,0,0,0,$ASSUME (DVI$C_ACP_REM, EQL, 5)
	    %ASCIC'JNL',0,0,0,0)$ASSUME (DVI$C_ACP_JNL, EQL, 6)
	    : VECTOR [, LONG];

    !+
    ! Table of process state names.
    !-

    BIND
	STATES = UPLIT BYTE (
	    %ASCIC'UNKNOWN',	! 0
	    %ASCIC'COLPG',0,0,	$ASSUME (SCH$C_COLPG, EQL, 1)
	    %ASCIC'MWAIT',0,0,	$ASSUME (SCH$C_MWAIT, EQL, 2)
	    %ASCIC'CEF',0,0,0,0,$ASSUME (SCH$C_CEF, EQL, 3)
	    %ASCIC'PFW',0,0,0,0,$ASSUME (SCH$C_PFW, EQL, 4)
	    %ASCIC'LEF',0,0,0,0,$ASSUME (SCH$C_LEF, EQL, 5)
	    %ASCIC'LEFO',0,0,0,	$ASSUME (SCH$C_LEFO, EQL, 6)
	    %ASCIC'HIB',0,0,0,0,$ASSUME (SCH$C_HIB, EQL, 7)
	    %ASCIC'HIBO',0,0,0,	$ASSUME (SCH$C_HIBO, EQL, 8)
	    %ASCIC'SUSP',0,0,0,	$ASSUME (SCH$C_SUSP, EQL, 9)
	    %ASCIC'SUSPO',0,0,	$ASSUME (SCH$C_SUSPO, EQL, 10)
	    %ASCIC'FPG',0,0,0,0,$ASSUME (SCH$C_FPG, EQL, 11)
	    %ASCIC'COM',0,0,0,0,$ASSUME (SCH$C_COM, EQL, 12)
	    %ASCIC'COMO',0,0,0,	$ASSUME (SCH$C_COMO, EQL, 13)
	    %ASCIC'CUR',0,0,0,0)$ASSUME (SCH$C_CUR, EQL, 14)
	    : VECTOR [, LONG];

    !+
    ! Table of process mode names.
    !-

    BIND
	MODES = UPLIT BYTE (
	    %ASCIC'OTHER',	$ASSUME (JPI$K_OTHER, EQL, 0)
	    %ASCIC'NETWORK',	$ASSUME (JPI$K_NETWORK, EQL, 1)
	    %ASCIC'BATCH',	$ASSUME (JPI$K_BATCH, EQL, 2)
	    %ASCIC'INTERACTIVE',$ASSUME (JPI$K_INTERACTIVE, EQL, 3)
	    0)		! End of list
	    : VECTOR [, BYTE];

    !+
    ! Table of privilege names.
    !-

    GLOBAL BIND
	LIB$$AT_PRV_NAMES = UPLIT BYTE (
	%ASCIC'CMKRNL',$ASSUME ($BITPOSITION(PRV$V_CMKRNL), EQL, 0)
	%ASCIC'CMEXEC',$ASSUME ($BITPOSITION(PRV$V_CMEXEC), EQL, 1)
	%ASCIC'SYSNAM',$ASSUME ($BITPOSITION(PRV$V_SYSNAM), EQL, 2)
	%ASCIC'GRPNAM',$ASSUME ($BITPOSITION(PRV$V_GRPNAM), EQL, 3)
	%ASCIC'ALLSPOOL',$ASSUME ($BITPOSITION(PRV$V_ALLSPOOL), EQL, 4)
	%ASCIC'DETACH',$ASSUME ($BITPOSITION(PRV$V_DETACH), EQL, 5)
	%ASCIC'DIAGNOSE',$ASSUME ($BITPOSITION(PRV$V_DIAGNOSE), EQL, 6)
	%ASCIC'LOG_IO',$ASSUME ($BITPOSITION(PRV$V_LOG_IO), EQL, 7)
	%ASCIC'GROUP',$ASSUME ($BITPOSITION(PRV$V_GROUP), EQL, 8)
	%ASCIC'NOACNT',$ASSUME ($BITPOSITION(PRV$V_NOACNT), EQL, 9)
	%ASCIC'PRMCEB',$ASSUME ($BITPOSITION(PRV$V_PRMCEB), EQL, 10)
	%ASCIC'PRMMBX',$ASSUME ($BITPOSITION(PRV$V_PRMMBX), EQL, 11)
	%ASCIC'PSWAPM',$ASSUME ($BITPOSITION(PRV$V_PSWAPM), EQL, 12)
	%ASCIC'SETPRI',$ASSUME ($BITPOSITION(PRV$V_SETPRI), EQL, 13)
	%ASCIC'SETPRV',$ASSUME ($BITPOSITION(PRV$V_SETPRV), EQL, 14)
	%ASCIC'TMPMBX',$ASSUME ($BITPOSITION(PRV$V_TMPMBX), EQL, 15)
	%ASCIC'WORLD',$ASSUME ($BITPOSITION(PRV$V_WORLD), EQL, 16)
	%ASCIC'MOUNT',$ASSUME ($BITPOSITION(PRV$V_MOUNT), EQL, 17)
	%ASCIC'OPER',$ASSUME ($BITPOSITION(PRV$V_OPER), EQL, 18)
	%ASCIC'EXQUOTA',$ASSUME ($BITPOSITION(PRV$V_EXQUOTA), EQL, 19)
	%ASCIC'NETMBX',$ASSUME ($BITPOSITION(PRV$V_NETMBX), EQL, 20)
	%ASCIC'VOLPRO',$ASSUME ($BITPOSITION(PRV$V_VOLPRO), EQL, 21)
	%ASCIC'PHY_IO',$ASSUME ($BITPOSITION(PRV$V_PHY_IO), EQL, 22)
	%ASCIC'BUGCHK',$ASSUME ($BITPOSITION(PRV$V_BUGCHK), EQL, 23)
	%ASCIC'PRMGBL',$ASSUME ($BITPOSITION(PRV$V_PRMGBL), EQL, 24)
	%ASCIC'SYSGBL',$ASSUME ($BITPOSITION(PRV$V_SYSGBL), EQL, 25)
	%ASCIC'PFNMAP',$ASSUME ($BITPOSITION(PRV$V_PFNMAP), EQL, 26)
	%ASCIC'SHMEM',$ASSUME ($BITPOSITION(PRV$V_SHMEM), EQL, 27)
	%ASCIC'SYSPRV',$ASSUME ($BITPOSITION(PRV$V_SYSPRV), EQL, 28)
	%ASCIC'BYPASS',$ASSUME ($BITPOSITION(PRV$V_BYPASS), EQL, 29)
	%ASCIC'SYSLCK',$ASSUME ($BITPOSITION(PRV$V_SYSLCK), EQL, 30)
	%ASCIC'SHARE',$ASSUME ($BITPOSITION(PRV$V_SHARE), EQL, 31)
	%ASCIC'UPGRADE',$ASSUME ($BITPOSITION(PRV$V_UPGRADE), EQL, 0) ! 32
	%ASCIC'DOWNGRADE',$ASSUME ($BITPOSITION(PRV$V_DOWNGRADE), EQL, 1) ! 33
	%ASCIC'GRPPRV',$ASSUME ($BITPOSITION(PRV$V_GRPPRV), EQL, 2) ! 34
	%ASCIC'READALL',$ASSUME ($BITPOSITION(PRV$V_READALL), EQL, 3) ! 35
	%ASCIC'TMPJNL',$ASSUME ($BITPOSITION(PRV$V_TMPJNL), EQL, 4) ! 36
	%ASCIC'PRMJNL',$ASSUME ($BITPOSITION(PRV$V_PRMJNL), EQL, 5) ! 37
	%ASCIC'SECURITY',$ASSUME ($BITPOSITION(PRV$V_SECURITY), EQL, 6) ! 38
	0)	! End of list
	: VECTOR [, BYTE];

    !+
    ! Fill in constant descriptor information.
    !-

    CTRSTR_DESCR [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    CTRSTR_DESCR [DSC$B_CLASS] = DSC$K_CLASS_S;
    OUTSTR_DESCR [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    OUTSTR_DESCR [DSC$B_CLASS] = DSC$K_CLASS_S;
    OUTSTR_DESCR [DSC$W_LENGTH] = 512;
    OUTSTR_DESCR [DSC$A_POINTER] = RET_STRING [0];

    !+
    ! Select the formatting action appropriate to the item type.
    !-

    CASE .RET_TYPE [0] FROM LIB$K_FMT_MIN TO LIB$K_FMT_MAX OF
	SET

	[LIB$K_FMT_BINARY]:
	    BEGIN
	    CTRSTR_DESCR [DSC$W_LENGTH] = %CHARCOUNT ('!UL');
	    CTRSTR_DESCR [DSC$A_POINTER] = UPLIT BYTE ('!UL');
	    PRMLST [0] = .RET_NUMBER [0,0,32,0];
	    $FAOL (CTRSTR = CTRSTR_DESCR [0,0,0,0],
		   OUTLEN = RET_LENGTH [0],
		   OUTBUF = OUTSTR_DESCR [0,0,0,0],
		   PRMLST = PRMLST [0]);
	    END;

	[LIB$K_FMT_BOOLEAN]:
	    BEGIN
	    IF .RET_NUMBER [0,0,1,0]
	    THEN
		BEGIN
		RET_LENGTH [0] = %CHARCOUNT ('TRUE');
		CH$MOVE (%CHARCOUNT ('TRUE'), UPLIT BYTE ('TRUE'),
		    RET_STRING [0]);
		END
	    ELSE
		BEGIN
		RET_LENGTH [0] = %CHARCOUNT ('FALSE');
		CH$MOVE (%CHARCOUNT ('FALSE'), UPLIT BYTE ('FALSE'),
		    RET_STRING [0]);
		END;
	    END;

	[LIB$K_FMT_HEX]:
	    BEGIN
	    CTRSTR_DESCR [DSC$W_LENGTH] = %CHARCOUNT ('!XL');
	    CTRSTR_DESCR [DSC$A_POINTER] = UPLIT BYTE ('!XL');
	    PRMLST [0] = .RET_NUMBER [0,0,32,0];
	    $FAOL (CTRSTR = CTRSTR_DESCR [0,0,0,0],
		   OUTLEN = RET_LENGTH [0],
		   OUTBUF = OUTSTR_DESCR [0,0,0,0],
		   PRMLST = PRMLST [0]);
	    END;

	[LIB$K_FMT_HEXSTRING]:
	    BEGIN
	    LOCAL
		TEMP_STRING: VECTOR [512, BYTE];

	    CTRSTR_DESCR [DSC$W_LENGTH] = .RET_LENGTH [0] * 2;
	    CTRSTR_DESCR [DSC$A_POINTER] = TEMP_STRING;
	    OTS$CVT_L_TZ (RET_STRING [0], CTRSTR_DESCR [0,0,0,0],
		.CTRSTR_DESCR [DSC$W_LENGTH], .RET_LENGTH [0]);
	    RET_LENGTH [0] = .RET_LENGTH [0] * 2;
	    CH$MOVE (.CTRSTR_DESCR [DSC$W_LENGTH], TEMP_STRING,
		RET_STRING [0]);
	    END;

	[LIB$K_FMT_DATE]:
	    BEGIN
	    CTRSTR_DESCR [DSC$W_LENGTH] = %CHARCOUNT ('!%D');
	    CTRSTR_DESCR [DSC$A_POINTER] = UPLIT BYTE ('!%D');
	    PRMLST [0] = RET_NUMBER [0,0,0,0];
	    $FAOL (CTRSTR = CTRSTR_DESCR [0,0,0,0],
		   OUTLEN = RET_LENGTH [0],
		   OUTBUF = OUTSTR_DESCR [0,0,0,0],
		   PRMLST = PRMLST [0]);
	    END;

	[LIB$K_FMT_PRIVILEGE]:
	    BEGIN
	    LOCAL
		STRING_PTR,		! Pointer to current char in string
		PRV_NAME: REF VECTOR [, BYTE], ! Privilege name
		PRV;			! Current privilege number

	    STRING_PTR = RET_STRING [0]; ! First position in string
	    PRV_NAME = LIB$$AT_PRV_NAMES [0];	 ! First privilege name
	    INCRU PRV FROM 0 TO 63 DO
		BEGIN
		IF .PRV_NAME [0] EQL 0	! No more defined privilege names
		THEN
		    EXITLOOP;
		IF .RET_NUMBER [0,.PRV,1,0]
		THEN
		    BEGIN
		    STRING_PTR = CH$MOVE (.PRV_NAME [0], PRV_NAME [1],
			.STRING_PTR);
		    CH$WCHAR_A (%C',', STRING_PTR);
		    END;
		PRV_NAME = .PRV_NAME + .PRV_NAME [0] + 1;	! Next name
		END;
	    IF .STRING_PTR NEQA RET_STRING [0]
	    THEN
		STRING_PTR = .STRING_PTR - 1;	! Trim trailing comma
	    RET_LENGTH [0] = .STRING_PTR - RET_STRING [0];	! Get length
	    END;

	[LIB$K_FMT_UIC]:
	    BEGIN
	    CTRSTR_DESCR [DSC$W_LENGTH] = %CHARCOUNT ('!%U');
	    CTRSTR_DESCR [DSC$A_POINTER] = UPLIT BYTE ('!%U');
	    PRMLST [0] = .RET_NUMBER [0,0,32,0];
	    $FAOL (CTRSTR = CTRSTR_DESCR [0,0,0,0],
		   OUTLEN = RET_LENGTH [0],
		   OUTBUF = OUTSTR_DESCR [0,0,0,0],
		   PRMLST = PRMLST [0]);
	    END;

	[LIB$K_FMT_PROT, LIB$K_FMT_VPROT]:
	    BEGIN
	    LOCAL
		PSTRING: VECTOR [24, BYTE],
		PSTRING_PTR,
		PROT_CHARS: REF VECTOR [, BYTE],
		PROT_FIELD: BLOCK [1, BYTE];

	    !+
	    ! Select the correct protection codes for files or volumes.
	    !-

	    IF .RET_TYPE EQL LIB$K_FMT_PROT
	    THEN
		PROT_CHARS = UPLIT BYTE ('RWED')
	    ELSE
		PROT_CHARS = UPLIT BYTE ('RWLP');

	    PSTRING_PTR = PSTRING [0];
	    INCR I FROM 0 TO 3 BY 1 DO
		BEGIN
		LOCAL
		    THIS_STRING: REF VECTOR [, BYTE];
		PRMLST [.I] = .PSTRING_PTR;
		THIS_STRING = .PSTRING_PTR;
		CH$WCHAR_A (0, PSTRING_PTR);		! Set initial length
		PROT_FIELD = .RET_NUMBER [0,.I*4,4,0] XOR %X'F';
		IF .PROT_FIELD NEQ 0
		THEN
		    BEGIN
		    CH$WCHAR_A (%C'=', PSTRING_PTR);
		    THIS_STRING [0] = .THIS_STRING [0] + 1;
		    INCR J FROM 0 TO 3 BY 1 DO
			BEGIN
			IF .PROT_FIELD [0,.J,1,0]
			THEN
			    BEGIN
			    CH$WCHAR_A (.PROT_CHARS [.J], PSTRING_PTR);
			    THIS_STRING [0] = .THIS_STRING [0] + 1;
			    END;
			END;
		    END;
		END;
	    CTRSTR_DESCR [DSC$W_LENGTH] = 
		%CHARCOUNT ('SYSTEM!AC,OWNER!AC,GROUP!AC,WORLD!AC');
	    CTRSTR_DESCR [DSC$A_POINTER] =
		UPLIT BYTE ('SYSTEM!AC,OWNER!AC,GROUP!AC,WORLD!AC');
	    $FAOL (CTRSTR = CTRSTR_DESCR [0,0,0,0],
		   OUTLEN = RET_LENGTH [0],
		   OUTBUF = OUTSTR_DESCR [0,0,0,0],
		   PRMLST = PRMLST [0]);
	    END;


	[LIB$K_FMT_ACP]:
	    BEGIN
	    LOCAL
		ACPTYP_PTR: REF VECTOR [, BYTE];
	    IF .RET_NUMBER [0,0,32,0] GTRU DVI$C_ACP_JNL
	    THEN
		ACPTYP_PTR = ACP_TYPES [0]	! Illegal
	    ELSE
		ACPTYP_PTR = ACP_TYPES [2*.RET_NUMBER [0,0,32,0]];
	    RET_LENGTH [0] = .ACPTYP_PTR [0];
	    CH$MOVE (.RET_LENGTH [0], ACPTYP_PTR [1], RET_STRING [0]);
	    END;

	[LIB$K_FMT_STATE]:
	    BEGIN
	    LOCAL
		STATE_PTR: REF VECTOR [, BYTE];
	    IF .RET_NUMBER [0,0,32,0] GTRU SCH$C_CUR
	    THEN
		STATE_PTR = STATES [0]	! Illegal
	    ELSE
		STATE_PTR = STATES [2*.RET_NUMBER [0,0,32,0]];
	    RET_LENGTH [0] = .STATE_PTR [0];
	    CH$MOVE (.RET_LENGTH [0], STATE_PTR [1], RET_STRING [0]);
	    END;

	[LIB$K_FMT_MODE]:
	    BEGIN
	    LOCAL
		MODE_PTR: REF VECTOR [, BYTE];
	    MODE_PTR = MODES [0];
	    INCRU I FROM 1 TO .RET_NUMBER [0,0,32,0] DO
		BEGIN
		IF .MODE_PTR [0] EQLU 0
		THEN
		    BEGIN
		    MODE_PTR = MODES [0];	! Invalid, use OTHER
		    EXITLOOP;
		    END;
		MODE_PTR = .MODE_PTR + .MODE_PTR [0] + 1; ! Skip this string
		END;
	    RET_LENGTH [0] = .MODE_PTR [0];
	    CH$MOVE (.RET_LENGTH [0], MODE_PTR [1], RET_STRING [0]);
	    END;

	[LIB$K_FMT_PSTRING,LIB$K_FMT_ASCIC]:	! Strip trailing blanks
	    BEGIN
	    DECRU I FROM .RET_LENGTH [0] TO 1 DO
		IF .RET_STRING [.I] EQL %C' '
		THEN
		    RET_LENGTH [0] = .RET_LENGTH [0] - 1;
	    END;

! Note: $GETJPI does not return counted strings.  It returns
!	these strings as zero-padded strings.
!
!	[LIB$K_FMT_ASCIC]:
!	    BEGIN
!	    RET_LENGTH [0] = .RET_STRING [0];
!	    CH$MOVE (.RET_LENGTH [0], RET_STRING [1], RET_STRING [0]);
!	    END;

	[INRANGE, OUTRANGE]:
	    ;

	TES;

    RETURN;

    END;					! End of routine LIB$$FORMAT_RESULT;

END						! End of module LIB$$LEXICAL

ELUDOM
