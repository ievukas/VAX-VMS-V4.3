	.IF	NDF,STASW
	.TITLE	LOCKDATA - Routines to lock/unlock SYSGEN database
	.IFF	
	.TITLE	STALOCK  - Dummy routines for STASYSGEN
	.ENDC
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; Facility:  System generation and initialization
;
; Abstract:  LOCKDATA provides subroutines which allow synchronization of
;	     access to the SYSGEN device database.
;
; Environment: 
;
; Author:  Maryann Hinden, Creation date: 08-June-1983
;
; Modification History:
;
;	V03-002	WHM0001		Bill Matthews		29-Feb-1984
;		Enable queueing of the SYSGEN database lock request.
;
;	V03-001	MSH0001		Maryann Hinden		13-Jul-1983
;		Use general addressing mode for EXE$GL_SYSID_LOCK.
;--

;
; Include files:
;
	$LCKDEF				; Define lock manager symbols
	$SSDEF				; Define system status values
	$SYSGMSGDEF			; Sysgen messages
	
;
; Equated Symbols:
;
	LOCK_EFN = 2			; Event flag number used for lock request
	LOCK_FLAGS = LCK$M_SYNCSTS!-	; Flags specified for lock request
                     LCK$M_SYSTEM
 
	.PSECT PAGED_DATA	NOEXE
;
;  Data for SYSGEN database lock
;
BOO$GB_RESDSC::				; Descriptor for resource name
	.ASCID	/SYSGEN$_DATABASE/

BOO$LOCK_STATUS::			; LOCK_STATUS and LOCK_ID form
	.LONG	0			; the lock status block for the
BOO$LOCK_ID::				; lock request
	.LONG	0

	.PSECT PAGED_CODE	NOWRT
	.PAGE


	.SBTTL	BOO$LOCK_GEN - Lock SYSGEN database
;++
;  Functional description
;	Lock the SYSGEN database for create/modify, in order to 
;	synchronize I/O database building.  Used by LOAD, RELOAD,
;	AUTOCONFIGURE, CONNECT.
;
;	This routine attempts to acquire an exclusive mode system lock on
;       the SYSGEN$_DATABASE resource in executive mode.  So that this resource
;	is only specific to the local system, rather than a cluster, the $ENQ 
;	request specifies a parent (resource) which identifies the system on
;	which the request is being made.  
;
;	The $ENQW entry point is used, so that if the resource is not 
;	available immediately, the process will wait, with the assumption being
;	that it will get the resource soon.  An event flag number is specified 
;	to avoid possible interference with CONFIGURE.
;
;	An alternate version of this routine (STALOCK) is provided in
;	which the calls to the entry points simply return a success status.
;	This is provided for use by STASYSGEN which runs standalone, and 
;	therefore no locking is	necessary.
;
;  Calling sequence
;	JSB/BSBx   BOO$LOCK_GEN
;
;  Inputs
;	NONE
;
;  Outputs
;	R0 - If LBS, locked database
;		LBC, then no current access to database (SYSG$_NOLOCK)
;--

BOO$LOCK_GEN::

	.IF	NDF, STASW
	$CMEXEC_S  LOCK				; Change mode to take out lock
	RSB					; Return	

LOCK:	.WORD	^M<R2>				; Null entry mask
	MOVL	G^EXE$GL_SYSID_LOCK,R0		; Get ID of parent lock
	$ENQW_S	efn 	= #LOCK_EFN,-
		lkmode 	= #LCK$K_EXMODE,-
		lksb 	= BOO$LOCK_STATUS,-
		flags 	= #LOCK_FLAGS,-
		resnam 	= BOO$GB_RESDSC,-
		parid 	= R0
	BLBC	R0,10$				; If LBC, error
	MOVZWL	BOO$LOCK_STATUS,R0		; Get final status
	BLBC	R0,10$				; Success?
	RET					; Yes
10$:	MOVL	#SYSG$_NOLOCK,R0		; Indicate error
	RET
	
	.IFF

	MOVZWL	#SS$_NORMAL, R0			; Force success
	RSB

	.ENDC


	.SBTTL	BOO$UNLOCK_GEN - Unlock SYSGEN database
;++
;  Functional description
;	Dequeue the lock requested by BOO$LOCK_GEN.  
;
;  Calling sequence
;	JSB/BSBx   BOO$UNLOCK_GEN
;
;  Input
;	Lock id in lock status block (implicit).
;
;  Output
;	R0 - If LBS, successful completion
;		LBC, error on dequeue (probably serious) - status SYSG$_DEQERR.
;--

BOO$UNLOCK_GEN::

	.IF	NDF,STASW

	$CMEXEC_S  UNLOCK		; Change mode to access lock
	RSB				; Return

UNLOCK:	.WORD	0			; Null entry mask
	$DEQ_S	lkid = BOO$LOCK_ID	; Dequeue lock
	BLBS	R0,10$			; If LBS, all okay
	MOVL	#SYSG$_DEQERR,R0	; Indicate error
10$:	RET

	.IFF

	MOVZWL	#SS$_NORMAL,R0		; Force success
	RSB

	.ENDC
	.END
