MODULE CRE_TRANS(IDENT='V04-000') =	! File: SORRMSIO.B32 Edit: PDG3006
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
!
! TITLE:  CRE_TRANS 			CDD COBOL Language Extractor
!
! FACILITY:  Common Data Dictionary
!
! ABSTRACT:
!
!	This module contains the routines used to translate CDD definitions.
!	It can translate the following types of definitions:
!
!		Records
!
! ENVIRONMENT:
!
!	All routines run in user access mode.
!
!	These routines are NOT AST reentrant.
!
! AUTHOR:  Jeff East,	30-Jan-81
!
! MODIFIED BY:
!
!	T03-002	Removed copious amounts of unneeded code.  PDG 3-Jan-1983
!	T03-003	Use UTIL$FIND_SYMBOL to reference CDD symbols.  PDG 2-Mar-1983
!	T03-004	Add DSC$K_DTYPE_B(U), which was overlooked.  PDG 1-Jul-1983
!	T03-005	Use LIB$FIND_IMAGE_SYMBOL, instead.  PDG 9-Mar-1984
!	T03-006	Change attributes lists from OWN to LOCAL.  PDG 10-Apr-1984
!--

LIBRARY 'SYS$LIBRARY:STARLET';
REQUIRE 'SRC$:COM';
REQUIRE 'SRC$:CDDMAC';	! REQUIRE 'CDD$LIBRARY:CDDMAC';	
REQUIRE 'SRC$:CDDTYPE';	! REQUIRE 'CDD$LIBRARY:CDDTYPE';	
REQUIRE 'SRC$:REQSYM';	! REQUIRE 'CDD$PROTOCOL:REQSYM';	
REQUIRE 'SRC$:RECSYM';	! REQUIRE 'CDD$PROTOCOL:RECSYM';	

LITERAL
	REG_PRM = 10;
LINKAGE
	CAL_CTXREG_LB =	CALL:	GLOBAL(CTX=COM_REG_CTX,PRM=REG_PRM);

FORWARD ROUTINE
	CRE_DIAG:		CAL_CTXREG,
	FREE_DYN,
	CRE_FIELD:		CAL_CTXREG_LB,
	CRE_OCCURS_CLAUSE:	CAL_CTXREG,
	CRE_OVERLAY_FIELDS:	CAL_CTXREG_LB,
	CRE_TRANS_RECORD:	CAL_CTXREG_LB NOVALUE,
	CRE_HISTORY:		CAL_CTXREG NOVALUE,
	CRE_EXTRACT_RECORD:	CAL_CTXREG,
	CRE_CLEAN_UP:		CAL_CTXREG NOVALUE,
	CDD$CREATE_HISTORY,
	CDD$FIND_NODE,
	CDD$GET_ATTS,
	CDD$GET_ENTITY_CELL,
	CDD$GET_ENTITY_LIST_ATT,
	CDD$GET_NUM_ATT,
	CDD$GET_STRING_ATT,
	CDD$RLSE_LOCKS,
	CDD$SIGN_IN,
	CDD$SIGN_OUT,
	CDD_ATTNOTFND:	NOVALUE;

SOR$$END_ROUTINE_(CRE_CLEAN_UP);

EXTERNAL ROUTINE
	SOR$$DEF_FIELD:	CAL_CTXREG NOVALUE,
	SOR$$ERROR,
	STR$FREE1_DX:	NOVALUE	ADDRESSING_MODE(GENERAL);

!	Error messages
!
!	SOR$_BADDTYPE	!E Invalid or unsupported CDD datatype
!	SOR$_BADLENOFF	!E Length and offset must be multiples of 8 bits
!	SOR$_BADOCCURS	!F Invalid OCCURS clause
!	SOR$_BADOVRLAY	!E Invalid overlay structure
!	SOR$_BADPROTCL	!F Node is an invalid CDD object
!	SOR$_CDDERROR	!F CDD error at node !AS
!	SOR$_ILLBASE	!E Nondecimal base is invalid
!	SOR$_ILLLITERL	!F Record containing symbolic literals is unsupported
!	SOR$_ILLSCALE	!E Nonzero scale invalid for floating point data-item
!	SOR$_INCDIGITS	!E Number of digits is not consistent with the type or length of item
!	SOR$_MISLENOFF	!W Length and offset required
!	SOR$_MULTIDIM	!E Invalid multidimensional OCCURS
!	SOR$_NOTRECORD	!F Node !AS is a !AS, not a record definition
!	SOR$_SIGNCOMPQ	!W Absolute Date and Time datatype represented in one second units
!	SOR$_UNSUPLEVL	!F Unsupported core level for record !AS


MACRO
	CDD$_ATTNOTFND = .CDD__ATTNOTFND %;
OWN	CDD__ATTNOTFND: INITIAL(0);

MACRO
	COM_CDD_PATH =	0+%FIELDEXPAND(COM_CDD,0), 0, 32, 0 %,
	COM_CDD_CTX =	1+%FIELDEXPAND(COM_CDD,0), 0, 32, 0 %;
ASSERT_(COM_K_CDD GEQ 2)

MACRO
	$DSC = BLOCK[8,BYTE] %;
MACRO
	CRE_DECLARE_HANDLER[] =
	    ENABLE FREE_DYN(%REMAINING);
	    $INIT_DSC(%REMAINING) %;
MACRO
	$INIT_DSC[DSC_NAM] =
	    BEGIN
	    DSC_NAM[DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    DSC_NAM[DSC$B_CLASS] = DSC$K_CLASS_D;
	    DSC_NAM[DSC$W_LENGTH] = 0;
	    DSC_NAM[DSC$A_POINTER] = 0;
	    END %;

MACRO

!+
!	$GET_ATTS_LIST (entry [, entry] ...)
!
!	Where:
!
!	entry	= (name, attribute, type)
!
!	name	= the name of the variable that is to receive the attribute
!		value.  The variable will be declared and initialized by
!		this macro.
!	attribute = the attribute name.
!	entry	= the type of attribute value:
!
!		ENTITY
!		ENTITY_LIST
!		NULL
!		NUMERIC
!		STRING
!		STRING_LIST
!
!	This macro defines a macro called $GET_ATTS_INIT, which must be
!	executed before the attribute list is used.  The actual list is
!	named ATTR_LIST.
!-

    $GET_ATTS_LIST []=

	COMPILETIME
	    ATTS_INDEX = 1;

	$GET_ATTS_DEFINE (%REMAINING)

	LOCAL
	    ATTR_LIST:		VECTOR[%LENGTH * 5 + 1, LONG]
	    			INITIAL (%LENGTH,
	    			$GET_ATTS_ENTRY (%REMAINING) );

	%ASSIGN (ATTS_INDEX, 1)
	$GET_ATTS_ASSIGN (%REMAINING)

	%ASSIGN (ATTS_INDEX, 1)
	MACRO
	    %QUOTE %QUOTE $GET_ATTS_INIT =
		$GET_ATTS_INI_ENTRY (%QUOTE %EXPAND %REMAINING)
	    %QUOTE %;
    %,

    $GET_ATTS_DEFINE[entry] =
	$GET_ATTS_DEF_ENTRY (%REMOVE (entry));
    %,

    $GET_ATTS_DEF_ENTRY (name, attribute, type) =
	%IF NOT %IDENTICAL (type, %QUOTE NULL) %THEN
	    %IF %IDENTICAL (type, %QUOTE STRING) %THEN
		LOCAL
		    name:		$DSC VOLATILE
	    %ELSE
		LOCAL
		    name:		LONG
	    %FI
	%FI
    %,

    $GET_ATTS_ENTRY[entry] =
	$GET_ATTS_LIST_ENTRY (%REMOVE (entry))
    %,

    $GET_ATTS_LIST_ENTRY (name, attribute, type) =
	attribute, %NAME ('CDD$K_', type), 0,
	%IF
	    %IDENTICAL (type, %QUOTE NULL) OR %IDENTICAL (type, %QUOTE STRING)
	%THEN
	    0
	%ELSE
	    WORD (4, 0)
	%FI
	, 0
    %,

    $GET_ATTS_ASSIGN[entry] = 
	$GET_ATTS_ASG_ENTRY (%REMOVE (entry))
	%ASSIGN (ATTS_INDEX, ATTS_INDEX+5);
    %,

    $GET_ATTS_ASG_ENTRY (name, attribute, type) =
	BIND
	    %NAME (name, '_STATUS') = ATTR_LIST[%NUMBER(ATTS_INDEX)+2];
	%IF
	    %IDENTICAL (type, %QUOTE ENTITY_LIST) OR
	    %IDENTICAL (type, %QUOTE STRING_LIST)
	%THEN
	    BIND
		%NAME (name, '_COUNT') =
		    ATTR_LIST[%NUMBER(ATTS_INDEX)+3]+2: WORD;
	%FI
    %,

    $GET_ATTS_INI_ENTRY[entry] =
	$GET_ATTS_INI_VAR (%REMOVE (entry))
	%ASSIGN (ATTS_INDEX, ATTS_INDEX+5);
    %,

    $GET_ATTS_INI_VAR (name,attribute, type) =
	%IF NOT %IDENTICAL (type, %QUOTE NULL) %THEN
	    %IF %IDENTICAL (type, %QUOTE STRING) %THEN
		$INIT_DSC (name);
	    %FI
	    ATTR_LIST[%NUMBER(ATTS_INDEX)+4] = name
	%FI
    %;

ROUTINE CRE_DIAG(ERR, OPT): CAL_CTXREG =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to issue a diagnostic on the COPY statement.
!
! FORMAL PARAMETERS:
!
!	ERR	- error diagnostic to be issued.
!	OPT	- zero or more optional parameters or additional messages
!		  to be included with the diagnostic.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! RETURN VALUE:
!
!	Status value
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN
    EXTERNAL REGISTER
	CTX =	COM_REG_CTX:	REF CTX_BLOCK;
    LOCAL
	D:	VECTOR[255+2];
    BUILTIN
	ACTUALCOUNT,
	CALLG;

    D[0] = 0;
    D[1] = .ERR;
    D[2] = 0;
    IF .ERR NEQ SOR$_CDDERROR THEN D[0] = 2;

    D[.D[0]+1] = SOR$_CDDERROR;
    D[.D[0]+2] = 1;
    D[.D[0]+3] = .CTX[COM_CDD_PATH];
    CH$MOVE((ACTUALCOUNT()-1)*%UPVAL, OPT, D[.D[0]+4]);
    D[0] = .D[0] + ACTUALCOUNT() + 2;
    RETURN CALLG(D, SOR$$ERROR);

    END;

ROUTINE FREE_DYN(
	SIG:	REF VECTOR,
	MCH:	REF VECTOR,
	ENA:	REF VECTOR) =
    BEGIN
    IF .SIG[1] EQL SS$_UNWIND
    THEN
	DECR I FROM .ENA[0] TO 1 DO
	    IF ..ENA[.I] NEQ 0 THEN STR$FREE1_DX(..ENA[.I]);
    RETURN SS$_RESIGNAL;
    END;

ROUTINE CRE_FIELD(FIELD_LOC, ROOT, FIRST_OFFSET, GROUP_OFFSET): CAL_CTXREG_LB =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine translates a field and the field sub-tree it owns.
!
! FORMAL PARAMETERS:
!
!	FIELD_LOC	- the location code of the entity describing the field.
!	ROOT		- true if this is the root
!	FIRST_OFFSET	- the offset, in bytes, of the byte following this
!			  field's prior sibling which shares the same
!			  immediate ancestor field.  This is 0 for the first
!			  sub-field of a group.
!	GROUP_OFFSET	- the offset, in bytes, from the beginning of the record
!			  of the group containing this field.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The offset of the byte following the last byte mapped by the current
!	field.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN
    EXTERNAL REGISTER
	CTX =	COM_REG_CTX:	REF CTX_BLOCK,
	PRM =	REG_PRM:	REF VECTOR[2];

    $GET_ATTS_LIST
	((FIELD_NAME,	CDD$K_REC_NAME, 	STRING),
	(OFFSET,	CDD$K_REC_OFFSET, 	NUMERIC),
	(LENGTH,	CDD$K_REC_LENGTH, 	NUMERIC),
	(DATATYPE,	CDD$K_REC_DATATYPE, 	NUMERIC),
	(BASE,		CDD$K_REC_BASE, 	NUMERIC),
	(DIGITS,	CDD$K_REC_DIGITS, 	NUMERIC),
	(SCALE,		CDD$K_REC_SCALE, 	NUMERIC),
	(CHILDREN,	CDD$K_REC_CHILDREN, 	ENTITY_LIST),
	(OVERLAYS,	CDD$K_REC_OVERLAYS, 	ENTITY_LIST),
	(DIMENSION,	CDD$K_REC_DIMENSION, 	ENTITY_LIST));

    LOCAL
	CHILD_LOC,
	CHILD_OFFSET,
	LAST_OFFSET,
	STATUS;

    $GET_ATTS_INIT;

    !	Get the attributes we need for this routine
    !
    STATUS = $CDD$GET_ATTS(context = CTX[COM_CDD_CTX],
	location = FIELD_LOC,
	list = ATTR_LIST);
    IF NOT .STATUS THEN CRE_DIAG(SOR$_CDDERROR, .STATUS);
    IF NOT .DATATYPE_STATUS THEN CRE_DIAG(SOR$_BADPROTCL);

    ! Ignore items of type VIRTUAL FIELD (Datatrieve COMPUTED BY).
    ! Ignore unnamed fields
    !
    IF .DATATYPE EQL CDD$K_REC_DTYPE_VIRT OR
	NOT .FIELD_NAME_STATUS
    THEN
	BEGIN
	STR$FREE1_DX(FIELD_NAME);
	RETURN .FIRST_OFFSET;
	END;

    ! See if we're dealing with a REDEFINES clause...
    !
    IF .DATATYPE EQL CDD$K_REC_DTYPE_OVERLAY
    THEN
	IF NOT .OVERLAYS_STATUS
	THEN
	    BEGIN
	    CRE_DIAG(SOR$_BADPROTCL);
	    RETURN .FIRST_OFFSET;
	    END
	ELSE
	    RETURN CRE_OVERLAY_FIELDS(.OVERLAYS, .OVERLAYS_COUNT, .ROOT,
		.FIRST_OFFSET, .GROUP_OFFSET);


    ! It wasn't an overlay, so it must be a field.
    !
    ! Set up some defaults
    !

    IF .BASE_STATUS AND .BASE NEQ 10
    THEN
	CRE_DIAG(SOR$_ILLBASE);

    IF NOT .SCALE_STATUS THEN SCALE = 0;

    IF NOT .DIGITS_STATUS THEN DIGITS = 0;


    ! Check length and offset
    !
    IF NOT .OFFSET_STATUS
    THEN
	BEGIN
	OFFSET = .FIRST_OFFSET * 8;
	IF NOT .ROOT THEN CRE_DIAG(SOR$_MISLENOFF);
	END;
    IF (.OFFSET AND 7) NEQ 0
    THEN
	BEGIN
	OFFSET = (.OFFSET+7) AND NOT 7;
	CRE_DIAG(SOR$_BADLENOFF);
	END;
    IF NOT .LENGTH_STATUS OR .LENGTH EQL 0
    THEN
	BEGIN
	LENGTH = 8;
	CRE_DIAG(SOR$_MISLENOFF);
	END;
    IF (.LENGTH AND 7) NEQ 0
    THEN
	BEGIN
	LENGTH = (.LENGTH+7) AND NOT 7;
	CRE_DIAG(SOR$_BADLENOFF);
	END;

    ! Convert length and offset from bits to bytes
    !
    LENGTH = .LENGTH / 8;
    OFFSET = .OFFSET / 8;


    ! Resolve the OCCURS clause and decide where this field ends.
    !
    IF NOT .DIMENSION_STATUS
    THEN
	LAST_OFFSET = .OFFSET + .LENGTH
    ELSE
	BEGIN
	IF .DIMENSION_COUNT NEQ 1
	THEN
	    CRE_DIAG(SOR$_MULTIDIM);
	LAST_OFFSET = .OFFSET + .LENGTH * CRE_OCCURS_CLAUSE(.DIMENSION);
	END;


    ! Check the length.
    !
    IF (CASE .DATATYPE FROM 0 TO 35 OF
	SET
	[DSC$K_DTYPE_Z,
	 DSC$K_DTYPE_T]:	.LENGTH GTRU %X'FFFF';
	[DSC$K_DTYPE_BU,
	 DSC$K_DTYPE_B]:	.LENGTH NEQ 1;
	[DSC$K_DTYPE_WU,
	 DSC$K_DTYPE_W]:	.LENGTH NEQ 2;
	[DSC$K_DTYPE_LU,
	 DSC$K_DTYPE_L,
	 DSC$K_DTYPE_F]:	.LENGTH NEQ 4;
	[DSC$K_DTYPE_QU,
	 DSC$K_DTYPE_Q,
	 DSC$K_DTYPE_D,
	 DSC$K_DTYPE_G,
	 DSC$K_DTYPE_ADT]:	.LENGTH NEQ 8;
	[DSC$K_DTYPE_OU,
	 DSC$K_DTYPE_O,
	 DSC$K_DTYPE_H]:	.LENGTH NEQ 16;
	[DSC$K_DTYPE_P]:
	    BEGIN
	    IF .DIGITS_STATUS
		THEN LENGTH = .DIGITS
		ELSE LENGTH = .LENGTH * 2 - 1;
	    .LENGTH GTRU 31
	    END;
	[DSC$K_DTYPE_NL,
	 DSC$K_DTYPE_NR]:	.LENGTH GTRU 31;
	[DSC$K_DTYPE_NU,
	 DSC$K_DTYPE_NLO,
	 DSC$K_DTYPE_NRO,
	 DSC$K_DTYPE_NZ]:	.LENGTH GTRU 31;
	[INRANGE,OUTRANGE]:
	    BEGIN
	    IF .DATATYPE EQL CDD$K_REC_DTYPE_DATE
	    THEN
		.LENGTH NEQ 8
	    ELSE
		BEGIN
		CRE_DIAG(SOR$_BADDTYPE);
		DATATYPE = DSC$K_DTYPE_Z;
		.LENGTH GTRU %X'FFFF'
		END
	    END
	TES)
    THEN
	BEGIN
	IF .DIGITS_STATUS
	THEN
	    BEGIN
	    CRE_DIAG(SOR$_INCDIGITS);
	    DIGITS_STATUS = CDD$_ATTNOTFND;
	    END;
	END;


    ! Check for an array
    !
    IF .DIMENSION_STATUS
    THEN
	BEGIN
	STR$FREE1_DX(FIELD_NAME);
	RETURN .LAST_OFFSET;
	END;


    ! Finally...write out this field's description
    !
    SOR$$DEF_FIELD(
	FIELD_NAME,
	.DATATYPE,
	.GROUP_OFFSET+.OFFSET,
	.LENGTH,
	.SCALE,
	.PRM[0],
	.PRM[1]);


    ! Any children?
    !
    IF .CHILDREN_STATUS
    THEN
	BEGIN
	CHILD_OFFSET = 0;
	INCR I FROM 1 TO .CHILDREN_COUNT DO
	    BEGIN
	    STATUS = $CDD$GET_ENTITY_CELL(context = CTX[COM_CDD_CTX],
		list = CHILDREN,
		cell = .I,
		location = CHILD_LOC);
	    IF NOT .STATUS
	    THEN
	        BEGIN
		CRE_DIAG(SOR$_BADPROTCL, .STATUS);
		RETURN .FIRST_OFFSET;
		END;
	    CHILD_OFFSET = CRE_FIELD(.CHILD_LOC, FALSE,
		.CHILD_OFFSET, .GROUP_OFFSET+.OFFSET);
	    END;
	END;


    STR$FREE1_DX(FIELD_NAME);
    RETURN .LAST_OFFSET;

    END;

ROUTINE CRE_OCCURS_CLAUSE(DIMENSION_LOC): CAL_CTXREG =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine generates an OCCURS clause of the form:
!
!	OCCURS n [TO n] TIMES [DEPENDING ON name]
!
! FORMAL PARAMETERS:
!
!	DIMENSION_LOC	- the location code of the CDD$K_REC_DIMENSION list.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! RETURN VALUE:
!
!	The number of item occurrences.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN
    EXTERNAL REGISTER
	CTX =	COM_REG_CTX:	REF CTX_BLOCK;

    $GET_ATTS_LIST
	((UPPER_BOUND,	CDD$K_REC_UPPER_BOUND,	NUMERIC),
	(LOWER_BOUND,	CDD$K_REC_LOWER_BOUND,	NUMERIC),
	(STRIDE, 	CDD$K_REC_STRIDE, 	NUMERIC),
	(MIN_OCCURS, 	CDD$K_REC_MIN_OCCURS, 	NUMERIC),
	(MAX_OCCURS, 	CDD$K_REC_MAX_OCCURS, 	NUMERIC));

    LOCAL
	DIMENSION,
	OCCURS,
	STATUS;

    $GET_ATTS_INIT;

    ! Get the dimension attributes
    !
    STATUS = $CDD$GET_ENTITY_CELL(context = CTX[COM_CDD_CTX],
	list = DIMENSION_LOC,
	cell = 1,
	location = DIMENSION);
    IF NOT .STATUS
    THEN
	BEGIN
	CRE_DIAG(SOR$_CDDERROR, .STATUS);
	RETURN 1;				! Pretend it occurs only once
	END;

    STATUS = $CDD$GET_ATTS(context = CTX[COM_CDD_CTX],
	location = DIMENSION,
	list = ATTR_LIST);
    IF NOT .STATUS
    THEN
	BEGIN
	CRE_DIAG(SOR$_CDDERROR, .STATUS);
	RETURN 1;
	END;


    IF .MAX_OCCURS_STATUS
    THEN
	OCCURS = .MAX_OCCURS
    ELIF .UPPER_BOUND_STATUS
    THEN
	BEGIN
	IF NOT .LOWER_BOUND_STATUS THEN LOWER_BOUND = 1;
	OCCURS = .UPPER_BOUND - .LOWER_BOUND + 1;
	END
    ELSE
	OCCURS = 0;

    IF .OCCURS LEQ 0
    THEN
	BEGIN
	CRE_DIAG(SOR$_BADOCCURS);
	OCCURS = 1;
	END;

    IF NOT .STRIDE_STATUS
    THEN
	CRE_DIAG(SOR$_BADPROTCL, .STATUS);

    RETURN .OCCURS;
    END;

ROUTINE CRE_OVERLAY_FIELDS(OVERLAYS_LOC, OVERLAY_COUNT, ROOT, FIRST_OFFSET,
	GROUP_OFFSET)
	: CAL_CTXREG_LB =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine handles REDEFINES clauses.  It forces the
!	source to look like:
!
!	level name1 ...
!
!	level name2 REDEFINES name1 ...
!		.
!		.
!	level namei REDEFINES name1 ...
!
! FORMAL PARAMETERS:
!
!	OVERLAYS_LOC	- the location code of the entity list describing the
!			  overlays.
!	OVERLAY_COUNT	- the number of overlays.
!	ROOT		- true if this is the root
!	FIRST_OFFSET	- the offset, in bytes, of the byte following this
!			  field's prior sibling which shares the same
!			  immediate ancestor field.  This is 0 for the first
!			  sub-field of a group.
!	GROUP_OFFSET	- the offset, in bytes, from the beginning of the record
!			  of the group containing this field.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! RETURN VALUE:
!
!	The offset of the byte following the last byte mapped by this field.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN
    EXTERNAL REGISTER
	CTX =	COM_REG_CTX:	REF CTX_BLOCK,
	PRM =	REG_PRM:	REF VECTOR[2];
    MAP
	OVERLAY_COUNT:		WORD;

    LOCAL
	FIELD_NAME:		$DSC VOLATILE,
	LAST_OFFSET,
	OVERLAY_LOC,
	OVERLAY_SIZE:		WORD,
	STATUS;

    CRE_DECLARE_HANDLER(FIELD_NAME);

    LAST_OFFSET = .FIRST_OFFSET;
    INCR I FROM 1 TO .OVERLAY_COUNT DO
	BEGIN
	STATUS = $CDD$GET_ENTITY_CELL(context = CTX[COM_CDD_CTX],
	    list = OVERLAYS_LOC,
	    cell = .I,
	    location = OVERLAY_LOC);
	IF NOT .STATUS
	THEN
	    BEGIN
	    CRE_DIAG(SOR$_BADPROTCL, .STATUS);
	    RETURN .FIRST_OFFSET;
	    END;

	STATUS = $CDD$GET_ENTITY_LIST_ATT(context = CTX[COM_CDD_CTX],
	    entity = OVERLAY_LOC,
	    attribute = CDD$K_REC_FIELDS,
	    location = OVERLAY_LOC,
	    list_size = OVERLAY_SIZE);
	IF NOT .STATUS
	THEN
	    BEGIN
	    CRE_DIAG(SOR$_BADPROTCL, .STATUS);
	    RETURN .FIRST_OFFSET;
	    END;
	IF .OVERLAY_SIZE NEQ 1
	THEN
	    CRE_DIAG(SOR$_BADOVRLAY);

	STATUS = $CDD$GET_ENTITY_CELL(context = CTX[COM_CDD_CTX],
	    list = OVERLAY_LOC,
	    cell = 1,
	    location = OVERLAY_LOC);
	IF NOT .STATUS
	THEN
	    BEGIN
	    CRE_DIAG(SOR$_BADPROTCL, .STATUS);
	    RETURN .FIRST_OFFSET;
	    END;
	IF .I EQL 1
	THEN
	    BEGIN
	    ! Get the name and create the name string.
	    !
	    STATUS = $CDD$GET_STRING_ATT(context = CTX[COM_CDD_CTX],
		entity = OVERLAY_LOC,
		attribute = CDD$K_REC_NAME,
		value = FIELD_NAME);
	    IF NOT .STATUS THEN CRE_DIAG(SOR$_BADPROTCL, .STATUS);
	    END;

	LAST_OFFSET = MAXU(
	    .LAST_OFFSET,
	    CRE_FIELD(.OVERLAY_LOC, .ROOT, .FIRST_OFFSET, .GROUP_OFFSET));
	END;

    STR$FREE1_DX(FIELD_NAME);

    RETURN .LAST_OFFSET;
    END;

ROUTINE CRE_TRANS_RECORD(RECORD_LOC): CAL_CTXREG_LB NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine accepts the location code of a record description and
!	translates the record to COBOL source text.
!
!	If the record cannot be translated, a diagnostic is issued.
!
! FORMAL PARAMETERS:
!
!	RECORD_LOC	- the location code of the record's terminal node.
!
! IMPLICIT INPUTS:
!
!	CTX[COM_CDD_CTX]	- the CDD stream ID for the stream we're using
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! RETURN VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN
    EXTERNAL REGISTER
	CTX =	COM_REG_CTX:	REF CTX_BLOCK,
	PRM =	REG_PRM:	REF VECTOR[2];

    $GET_ATTS_LIST
	((SHORT_PATH,	CDD$K_SHORT_PATHNAME,	STRING),
	(PATHNAME,	CDD$K_PATHNAME,		STRING),
	(ROOT,		CDD$K_REC_ROOT,		ENTITY),
	(FORMAT,	CDD$K_REC_FORMAT,	NUMERIC),
	(LITERALS,	CDD$K_REC_LITERALS,	ENTITY_LIST));
    LOCAL
	STATUS;

    CRE_DECLARE_HANDLER(PATHNAME,SHORT_PATH);
    $GET_ATTS_INIT;


    !	Fetch attributes used in this routine
    !
    STATUS = $CDD$GET_ATTS(context = CTX[COM_CDD_CTX],
	location = RECORD_LOC,
	list = ATTR_LIST);
    IF NOT .STATUS
    THEN
	RETURN CRE_DIAG(SOR$_CDDERROR, .STATUS);
    IF NOT .SHORT_PATH_STATUS
    THEN
	RETURN CRE_DIAG(SOR$_BADPROTCL, .SHORT_PATH_STATUS);
    CTX[COM_CDD_PATH] = SHORT_PATH;	! Set the address of the descriptor
    IF NOT .PATHNAME_STATUS
    THEN
	RETURN CRE_DIAG(SOR$_BADPROTCL, .PATHNAME_STATUS);
    IF
	NOT .FORMAT_STATUS OR
	.FORMAT NEQ CDD$K_REC_FIXED AND
	.FORMAT NEQ CDD$K_REC_VARIABLE
    THEN
	RETURN CRE_DIAG(SOR$_BADPROTCL, .PATHNAME_STATUS);
    IF .LITERALS_STATUS NEQ CDD$_ATTNOTFND
    THEN
	RETURN CRE_DIAG(SOR$_ILLLITERL);

    ! Translate the record
    !
    IF .ROOT_STATUS
    THEN
	CRE_FIELD(.ROOT, TRUE, 0, 0)
    ELSE
	CRE_DIAG(SOR$_BADLENOFF);

    STR$FREE1_DX(PATHNAME);
    STR$FREE1_DX(SHORT_PATH);
    END;

ROUTINE CRE_HISTORY
	(
	ENTITY:	REF VECTOR[2]
	): CAL_CTXREG NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine creates a history entry for the CDD.
!
! FORMAL PARAMETERS:
!
!	ENTITY -	Entity parameter describing the item
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Status from call to CDD$CREATE_HISTORY.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN
    EXTERNAL REGISTER
	CTX =	COM_REG_CTX:	REF CTX_BLOCK;
    EXTERNAL ROUTINE
	SOR$STAT;
    LOCAL
	VERSION:	VECTOR[2],	! Descriptor for version
	BUFFER:		VECTOR[32,BYTE],
	READING:	VECTOR[2]
			INITIAL (%CHARCOUNT('Reading'), UPLIT BYTE('Reading')),
	STATUS;
    MACRO
	FAC =	'VAX-11 SORT/MERGE ' %;

    VERSION[0] = 0;
    STATUS = SOR$STAT(%REF(STAT_K_IDENT), VERSION[1], %REF(CTX[BASE_]));
    IF .STATUS THEN VERSION[0] = CH$RCHAR_A(VERSION[1]);
    VERSION[0] = MINU( .VERSION[0], %ALLOCATION(BUFFER) - %CHARCOUNT(FAC) );
    CH$MOVE(%CHARCOUNT(FAC), UPLIT BYTE(FAC), BUFFER[0]);
    CH$MOVE(.VERSION[0], .VERSION[1], BUFFER[0] + %CHARCOUNT(FAC));
    VERSION[0] = .VERSION[0] + %CHARCOUNT(FAC);
    VERSION[1] = BUFFER[0];

    STATUS = $CDD$CREATE_HISTORY (context = CTX[COM_CDD_CTX],
	entity = ENTITY[0],
	facility = VERSION[0],
	access = READING,
	program = 0,
	description = 0);

    ! Ignore the returned status.
    !
    !IF NOT .STATUS THEN CRE_DIAG(SOR$_CDDERROR, .STATUS);

    END;

GLOBAL ROUTINE CRE_EXTRACT_RECORD
	(
	PATH:	REF VECTOR[2],
	PRM0,				! Parameter to SOR$$DEF_FIELD
	PRM1				! Parameter to SOR$$DEF_FIELD
	): CAL_CTXREG =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine looks up a record description in the CDD.
!
! FORMAL PARAMETERS:
!
!	PATH		- descriptor for the CDD pathname of the target record
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Address of the pathname description block, or zero if errors occurred.
!
! SIDE EFFECTS:
!
!	This routine will access the CDD.
!
!--
    BEGIN
    EXTERNAL REGISTER
	CTX =	COM_REG_CTX:	REF CTX_BLOCK;
    GLOBAL REGISTER
	PRM =	REG_PRM:	REF VECTOR[2];

    LITERAL
	ACCEPTABLE_LEVEL	= 4;		! The acceptable CORE_LEVEL
    BUILTIN
	ACTUALCOUNT,
	NULLPARAMETER;
    LOCAL
	CORE_LEVEL,
	PROTOCOL:	VECTOR[2],
	BUFFER:		VECTOR[32,BYTE],
	RECORD_BASE,
	STATUS;

    STATUS = $CDD$SIGN_IN(context = CTX[COM_CDD_CTX]);
    IF NOT .STATUS THEN RETURN CRE_DIAG(SOR$_CDDERROR, .STATUS);

    ! Perform initialization
    !
    PROTOCOL[0] = 32;
    PROTOCOL[1] = BUFFER;
    CTX[COM_CDD_PATH] = PATH[0];
    IF CDD$_ATTNOTFND EQL 0 THEN CDD_ATTNOTFND();

    ! Find the target record description.
    !
    STATUS = $CDD$FIND_NODE(context = CTX[COM_CDD_CTX],
	path = PATH[0],
	location = RECORD_BASE,
	protocol = PROTOCOL);
    PROTOCOL[0] = 1 +
	(DECR I FROM 31 TO 0 DO IF .BUFFER[.I] NEQ %C' ' THEN EXITLOOP .I);

    IF NOT .STATUS THEN RETURN CRE_DIAG(SOR$_CDDERROR, .STATUS);

    ! Validate that this is a record description and that we should
    ! be able to read it.
    !
    IF NOT CH$EQL(%CHARCOUNT('CDD$RECORD'), UPLIT BYTE('CDD$RECORD'),
	.PROTOCOL[0], .PROTOCOL[1], ' ')
    THEN
	RETURN SOR$$ERROR(SOR$_NOTRECORD, 2, PATH[0], PROTOCOL);

    STATUS = $CDD$GET_NUM_ATT(context = CTX[COM_CDD_CTX],
	entity = RECORD_BASE,
	attribute = CDD$K_CORE_LEVEL,
	value = CORE_LEVEL);
    IF NOT .STATUS THEN RETURN CRE_DIAG(SOR$_BADPROTCL, .STATUS);

    IF .CORE_LEVEL NEQ ACCEPTABLE_LEVEL
    THEN
	RETURN CRE_DIAG(SOR$_UNSUPLEVL);

    ! Create a history entry
    !
    CRE_HISTORY(RECORD_BASE);

    ! Now translate the record
    !
    PRM = PRM0;
    CRE_TRANS_RECORD(.RECORD_BASE);
    STATUS = $CDD$RLSE_LOCKS(context = CTX[COM_CDD_CTX],
	node = RECORD_BASE);
    IF NOT .STATUS THEN RETURN CRE_DIAG(SOR$_CDDERROR, .STATUS);

    STATUS = $CDD$SIGN_OUT(context = CTX[COM_CDD_CTX]);
    CTX[COM_CDD_CTX] = 0;
    IF NOT .STATUS THEN RETURN CRE_DIAG(SOR$_CDDERROR, .STATUS);

    RETURN SS$_NORMAL;
    END;

ROUTINE CRE_CLEAN_UP: CAL_CTXREG NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Release resources allocated by this module.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN
    EXTERNAL REGISTER
	CTX =	COM_REG_CTX:	REF CTX_BLOCK;
    LOCAL
	STATUS;

    IF .CTX[COM_CDD_CTX] NEQ 0
    THEN
	BEGIN
	STATUS = $CDD$SIGN_OUT(context = CTX[COM_CDD_CTX]);
	CTX[COM_CDD_CTX] = 0;
	IF NOT .STATUS THEN CRE_DIAG(SOR$_CDDERROR, .STATUS);
	END;

    END;

EXTERNAL ROUTINE
    LIB$FIND_IMAGE_SYMBOL:	ADDRESSING_MODE(GENERAL);
BIND
    CDDSHR1 = UPLIT BYTE('CDDSHR');
MACRO
    CDDSHR_DECL = VECTOR[2] INITIAL (%CHARCOUNT('CDDSHR'), CDDSHR1) %;
MACRO
    NAMSTR_DECL(X) = VECTOR[2] INITIAL (%CHARCOUNT(X), UPLIT BYTE(X)) %;
MACRO
    CDD_(X) =
	BEGIN
	OWN Z:	INITIAL(0);
	LOCAL	STATUS;
	BUILTIN	AP, CALLG;
	IF .Z EQL 0
	THEN
	    BEGIN
	    LOCAL CDDSHR: CDDSHR_DECL;
	    LOCAL NAMSTR: NAMSTR_DECL(X);
	    STATUS = LIB$FIND_IMAGE_SYMBOL(CDDSHR, NAMSTR, Z);
	    IF NOT .STATUS THEN RETURN SOR$$ERROR(SOR$_SHR_SYSERROR,0,.STATUS);
	    END;
	RETURN CALLG(.AP, .Z);
	END %;
GLOBAL ROUTINE CDD$CREATE_HISTORY	= CDD_('CDD$CREATE_HISTORY');
GLOBAL ROUTINE CDD$FIND_NODE		= CDD_('CDD$FIND_NODE');
GLOBAL ROUTINE CDD$GET_ATTS		= CDD_('CDD$GET_ATTS');
GLOBAL ROUTINE CDD$GET_ENTITY_CELL	= CDD_('CDD$GET_ENTITY_CELL');
GLOBAL ROUTINE CDD$GET_ENTITY_LIST_ATT	= CDD_('CDD$GET_ENTITY_LIST_ATT');
GLOBAL ROUTINE CDD$GET_NUM_ATT		= CDD_('CDD$GET_NUM_ATT');
GLOBAL ROUTINE CDD$GET_STRING_ATT	= CDD_('CDD$GET_STRING_ATT');
GLOBAL ROUTINE CDD$RLSE_LOCKS		= CDD_('CDD$RLSE_LOCKS');
GLOBAL ROUTINE CDD$SIGN_IN		= CDD_('CDD$SIGN_IN');
GLOBAL ROUTINE CDD$SIGN_OUT		= CDD_('CDD$SIGN_OUT');
GLOBAL ROUTINE CDD_ATTNOTFND: NOVALUE =
    BEGIN
    LOCAL CDDSHR: CDDSHR_DECL;
    LOCAL NAMSTR: NAMSTR_DECL('CDD$_ATTNOTFND');
    LOCAL STATUS;
    STATUS = LIB$FIND_IMAGE_SYMBOL(CDDSHR, NAMSTR, CDD__ATTNOTFND);
    IF NOT .STATUS THEN RETURN SOR$$ERROR(SOR$_SHR_SYSERROR,0,.STATUS);
    END;

END
ELUDOM
