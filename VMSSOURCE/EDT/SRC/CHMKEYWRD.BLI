%TITLE 'EDT$CHMKEYWRD - look for a keyword'
MODULE EDT$CHMKEYWRD (				! Look for a keyword
		IDENT = 'V04-000'			! File: CHMKEYWRD.BLI Edit: JBS1009
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module compares the command buffer contents to a table
!	of keywords.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: Unknown
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 04-Feb-1981.  This module was created by
!	extracting the routine EDT$$KWORD  from module CHANGE.BLI.
! 1-002	- Regularize headers.  JBS 03-Mar-1981
! 1-004 - Change to a table arranged alphabetically. STS 21-Sep-1982
! 1-005	- Move the keywords here from EDT$CHMPARSE, to reduce the program
!	   size on the PDP-11.  Also, put an underscore in the entry point name.  JBS 29-Sep-1982
! 1-006	- Accept lower case letters as equivalent to upper case, and improve error
!	   checking.  JBS 01-Oct-1982
! 1-007	- Make this routine position-independent.  JBS 01-Oct-1982
! 1-008	- Add conditionals for WPS and VT220.  JBS 10-Feb-1983
! 1-009	- Don't forget the SUPPORTS library.  JBS 11-Feb-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$KEY_WORD : NOVALUE;			! Compare the command buffer contents to a table of keywords

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

LIBRARY 'EDTSRC:TRANSLATE';

LIBRARY 'EDTSRC:SUPPORTS';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

FIELD
    KEY_WORD_FIELD =
	SET
	KEY_WORD_NEXT = [0, 0, %BPADDR, 0],
	KEY_WORD_NUM = [%BPADDR/8, 0, 8, 0],
	KEY_WORD_LEN = [(%BPADDR/8), 8, 8, 0],
	KEY_WORD_POINTER = [(%BPADDR/8) + 2, 0, %BPADDR, 0]
	TES;

!
! OWN STORAGE:
!
!+
! Define the keywords used to make up change mode sub-commands.
!
! Each record in this table contains a address pointer to the next keyword
! with this alphabetic character  the value of the keyword, its length,
! and the ASCII characters which comprise it.
!
! The table is a concatenation of keyword entries.  Each
! consists of a pointer to the next keyword to examine if
! this one should fail, a keyword number byte, length byte,
! and the ASCII text for the keyword.  A 0 length byte
! marks the end of the table.  Letters in keywords are
! all upper case.
!-

BIND
    ADDR_BASE = UPLIT (0),
    END_VERBS = UPLIT (
    	0,		BYTE(0),	BYTE(0),	0),
    ASC_VERB = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_ASC),	BYTE(3),	BYTE('ASC')),
    ADV_VERB = UPLIT (
	ASC_VERB - ADDR_BASE,	BYTE(VERB_K_ADV),	BYTE(3),	BYTE('ADV')),
    A_VERBS = UPLIT (
	ADV_VERB - ADDR_BASE,	BYTE(VERB_K_APPEND),	BYTE(6),	BYTE('APPEND')),
    BELL_VERB = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_BELL),	BYTE(4),	BYTE('BELL')),
    B_VERBS = UPLIT (
	BELL_VERB - ADDR_BASE,	BYTE(VERB_K_BACK),	BYTE(4),	BYTE('BACK')),
    CUT_VERB = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_CUT),	BYTE(3),	BYTE('CUT')),
    CLSS_VERB = UPLIT (
	CUT_VERB - ADDR_BASE,	BYTE(VERB_K_CLSS),	BYTE(4),	BYTE('CLSS')),
    CHGL_VERB = UPLIT (
	CLSS_VERB - ADDR_BASE,	BYTE(VERB_K_CHGL),	BYTE(4),	BYTE('CHGL')),
    CHGU_VERB = UPLIT (
	CHGL_VERB - ADDR_BASE,	BYTE(VERB_K_CHGU),	BYTE(4),	BYTE('CHGU')),
    C_VERBS = UPLIT (
	CHGU_VERB - ADDR_BASE,	BYTE(VERB_K_CHGC),	BYTE(4),	BYTE('CHGC')),
    D_VERB = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_DELETE),	BYTE(1),	BYTE('D')),
    DUPC_VERB = UPLIT (
	D_VERB - ADDR_BASE,	BYTE(VERB_K_DUPC),	BYTE(4),	BYTE('DUPC')),
    DMOV_VERB = UPLIT (
	DUPC_VERB - ADDR_BASE,	BYTE(VERB_K_DMOV),	BYTE(4),	BYTE('DMOV')),
    DLWC_VERB = UPLIT (
	DMOV_VERB - ADDR_BASE,	BYTE(VERB_K_DLWC),	BYTE(4),	BYTE('DLWC')),
    DEFK_VERB = UPLIT (
	DLWC_VERB - ADDR_BASE,	BYTE(VERB_K_DEFK),	BYTE(4),	BYTE('DEFK')),
    DATE_VERB = UPLIT (
	DEFK_VERB - ADDR_BASE,	BYTE(VERB_K_DATE),	BYTE(4),	BYTE('DATE')),
    D_VERBS = UPLIT (
	DATE_VERB - ADDR_BASE,	BYTE(VERB_K_DESEL),	BYTE(5),	BYTE('DESEL')),
    EX_VERB = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_EXIT),	BYTE(2),	BYTE('EX')),
    E_VERBS = UPLIT (
	EX_VERB - ADDR_BASE,	BYTE(VERB_K_EXT),	BYTE(3),	BYTE('EXT')),
    F_VERBS = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_FILL),	BYTE(4),	BYTE('FILL')),
    H_VERBS = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_HELP),	BYTE(4),	BYTE('HELP')),
    I_VERBS = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_INSERT),	BYTE(1),	BYTE('I')),
    K_VERBS = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_KS),	BYTE(2),	BYTE('KS')),
    P_VERBS = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_PASTE),	BYTE(5),	BYTE('PASTE')),
    Q_VERBS = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_QUIT),	BYTE(4),	BYTE('QUIT')),
    R_VERB = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_REPLACE),	BYTE(1),	BYTE('R')),
    R_VERBS = UPLIT (
	R_VERB - ADDR_BASE,	BYTE(VERB_K_REF),	BYTE(3),	BYTE('REF')),
    S_VERB = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_SUBS),	BYTE(1),	BYTE('S')),
    SN_VERB = UPLIT (
	S_VERB - ADDR_BASE,	BYTE(VERB_K_SN),	BYTE(2),	BYTE('SN')),
    SHR_VERB = UPLIT (
	SN_VERB - ADDR_BASE,	BYTE(VERB_K_SHR),	BYTE(3),	BYTE('SHR')),
    SHL_VERB = UPLIT (
	SHR_VERB - ADDR_BASE,	BYTE(VERB_K_SHL),	BYTE(3),	BYTE('SHL')),
    SEL_VERB = UPLIT (
	SHL_VERB - ADDR_BASE,	BYTE(VERB_K_SEL),	BYTE(3),	BYTE('SEL')),
    S_VERBS = UPLIT (
	SEL_VERB - ADDR_BASE,	BYTE(VERB_K_SSEL),	BYTE(4),	BYTE('SSEL')),
    TI_VERB = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_TI),	BYTE(2),	BYTE('TI')),
    TD_VERB = UPLIT (
	TI_VERB - ADDR_BASE,	BYTE(VERB_K_TD),	BYTE(2),	BYTE('TD')),
    TC_VERB = UPLIT (
	TD_VERB - ADDR_BASE,	BYTE(VERB_K_TC),	BYTE(2),	BYTE('TC')),
    TOP_VERB = UPLIT (
	TC_VERB - ADDR_BASE,	BYTE(VERB_K_TOP),	BYTE(3),	BYTE('TOP')),
    TAB_VERB = UPLIT (
	TOP_VERB - ADDR_BASE,	BYTE(VERB_K_TAB),	BYTE(3),	BYTE('TAB')),
    TADJ_VERB = UPLIT (
	TAB_VERB - ADDR_BASE,	BYTE(VERB_K_TADJ),	BYTE(4),	BYTE('TADJ')),
    T_VERBS = UPLIT (
	TADJ_VERB - ADDR_BASE,	BYTE(VERB_K_TGSEL),	BYTE(5),	BYTE('TGSEL')),
    UNDW_VERB = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_UNDW),	BYTE(4),	BYTE('UNDW')),
    UNDL_VERB = UPLIT (
  	UNDW_VERB - ADDR_BASE,	BYTE(VERB_K_UNDL),	BYTE(4),	BYTE('UNDL')),
    U_VERBS = UPLIT (
	UNDL_VERB - ADDR_BASE,	BYTE(VERB_K_UNDC),	BYTE(4),	BYTE('UNDC')),
    X_VERBS = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_XLATE),	BYTE(5),	BYTE('XLATE')),
    CARET_VERB = UPLIT (
	END_VERBS - ADDR_BASE,	BYTE(VERB_K_CC),	BYTE(1),	BYTE('^'));

BIND
    VERB_TABLE = UPLIT (
	A_VERBS - ADDR_BASE,
	B_VERBS - ADDR_BASE,
	C_VERBS - ADDR_BASE,
	D_VERBS - ADDR_BASE,
	E_VERBS - ADDR_BASE,
	F_VERBS - ADDR_BASE,
	END_VERBS - ADDR_BASE,
	H_VERBS - ADDR_BASE,
	I_VERBS - ADDR_BASE,
	END_VERBS - ADDR_BASE,
	K_VERBS - ADDR_BASE,
	END_VERBS - ADDR_BASE,
	END_VERBS - ADDR_BASE,
	END_VERBS - ADDR_BASE,
	END_VERBS - ADDR_BASE,
	P_VERBS - ADDR_BASE,
	Q_VERBS - ADDR_BASE,
	R_VERBS - ADDR_BASE,
	S_VERBS - ADDR_BASE,
	T_VERBS - ADDR_BASE,
	U_VERBS - ADDR_BASE,
	END_VERBS - ADDR_BASE,
	END_VERBS - ADDR_BASE,
	X_VERBS - ADDR_BASE,
	END_VERBS - ADDR_BASE,
	END_VERBS - ADDR_BASE,
	END_VERBS - ADDR_BASE,
	END_VERBS - ADDR_BASE,
	END_VERBS - ADDR_BASE,
	CARET_VERB - ADDR_BASE);

!+
! The following are keywords which are entities.
!
! The values must be separated by two so we can add the direction to
! the entity for use as a case index.
!-

BIND
    END_ENTITY = UPLIT (
    0,		BYTE(0),	BYTE(0),	0),
    BW_ENT = UPLIT (
    	END_ENTITY - ADDR_BASE,	BYTE(ENT_K_BW),		BYTE(2),	BYTE('BW')),
    BR_ENT = UPLIT (
    	BW_ENT - ADDR_BASE,	BYTE(ENT_K_BR),		BYTE(2),	BYTE('BR')),
    BL_ENT = UPLIT (
    	BR_ENT - ADDR_BASE,	BYTE(ENT_K_BL),		BYTE(2),	BYTE('BL')),
    BPAR_ENT = UPLIT (
    	BL_ENT - ADDR_BASE,	BYTE(ENT_K_BPAR),	BYTE(4),	BYTE('BPAR')),
    BSEN_ENT = UPLIT (
    	BPAR_ENT - ADDR_BASE,	BYTE(ENT_K_BSEN),	BYTE(4),	BYTE('BSEN')),
    B_ENTS = UPLIT (
    	BSEN_ENT - ADDR_BASE,	BYTE(ENT_K_BPAGE),	BYTE(5),	BYTE('BPAGE')),
    C_ENTS = UPLIT (
    	END_ENTITY - ADDR_BASE,	BYTE(ENT_K_CHAR),	BYTE(1),	BYTE('C')),
    EW_ENT = UPLIT (
        END_ENTITY - ADDR_BASE,	BYTE(ENT_K_EW),		BYTE(2),	BYTE('EW')),
    EL_ENT = UPLIT (
    	EW_ENT - ADDR_BASE,	BYTE(ENT_K_EL),		BYTE(2),	BYTE('EL')),
    ER_ENT = UPLIT (
    	EL_ENT - ADDR_BASE,	BYTE(ENT_K_ER),		BYTE(2),	BYTE('ER')),
    EPAR_ENT = UPLIT (
    	ER_ENT - ADDR_BASE,	BYTE(ENT_K_EPAR),	BYTE(4),	BYTE('EPAR')),
    ESEN_ENT = UPLIT (
    	EPAR_ENT - ADDR_BASE,	BYTE(ENT_K_ESEN),	BYTE(4),	BYTE('ESEN')),
    E_ENTS = UPLIT (
        ESEN_ENT - ADDR_BASE,	BYTE(ENT_K_EPAGE),	BYTE(5),	BYTE('EPAGE')),
    L_ENTS = UPLIT (
    	END_ENTITY - ADDR_BASE,	BYTE(ENT_K_LINE),	BYTE(1),	BYTE('L')),
    N_ENTS = UPLIT (
    	END_ENTITY - ADDR_BASE,	BYTE(ENT_K_NL),		BYTE(2),	BYTE('NL')),
    PAR_ENT = UPLIT (
    	END_ENTITY - ADDR_BASE,	BYTE(ENT_K_PAR),	BYTE(3),	BYTE('PAR')),
    P_ENTS = UPLIT (
    	PAR_ENT - ADDR_BASE,	BYTE(ENT_K_PAGE),	BYTE(4),	BYTE('PAGE')),
    SR_ENT = UPLIT (
    	END_ENTITY - ADDR_BASE,	BYTE(ENT_K_SR),		BYTE(2),	BYTE('SR')),
    S_ENTS = UPLIT (
    	SR_ENT - ADDR_BASE,	BYTE(ENT_K_SEN),	BYTE(3),	BYTE('SEN')),
    V_ENTS = UPLIT (
    	END_ENTITY - ADDR_BASE,	BYTE(ENT_K_VERT),	BYTE(1),	BYTE('V')),
    W_ENTS = UPLIT (
    	END_ENTITY - ADDR_BASE,	BYTE(ENT_K_WORD),	BYTE(1),	BYTE('W'));

BIND
    ENTITY_TABLE = UPLIT (
	B_ENTS - ADDR_BASE,
	C_ENTS - ADDR_BASE,
	END_ENTITY - ADDR_BASE,
	E_ENTS - ADDR_BASE,
	END_ENTITY - ADDR_BASE,
	END_ENTITY - ADDR_BASE,
	END_ENTITY - ADDR_BASE,
	END_ENTITY - ADDR_BASE,
	END_ENTITY - ADDR_BASE,
	END_ENTITY - ADDR_BASE,
	L_ENTS - ADDR_BASE,
	END_ENTITY - ADDR_BASE,
	N_ENTS - ADDR_BASE,
	END_ENTITY - ADDR_BASE,
	P_ENTS - ADDR_BASE,
	END_ENTITY - ADDR_BASE,
	END_ENTITY - ADDR_BASE,
	S_ENTS - ADDR_BASE,
	END_ENTITY - ADDR_BASE,
	END_ENTITY - ADDR_BASE,
	V_ENTS - ADDR_BASE,
	W_ENTS - ADDR_BASE);

!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$KEY_WORD  - look for a key word'

GLOBAL ROUTINE EDT$$KEY_WORD (			! Look for a key word
    TABLE_NO, 					! 1 = verb table, 2 = entity table
    KEY_NUM					! Key number
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine scans a table of keywords, attempting to find a match
!	in the current command buffer pointed to by EDT$$A_CMD_BUF.
!	The comparison is case blind.
!
! FORMAL PARAMETERS:
!
!  TABLE_NO		The number of the keyword table to use.  1 = use the
!			verb table, 2 = use the entity table.
!
!  KEY_NUM		The returned value for the number of the entity or
!			verb which matched from the table.  Zero indicates
!			no match.
!
! IMPLICIT INPUTS:
!
!	EDT$$A_CMD_END
!	EDT$$A_CMD_BUF
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_CMD_BUF
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL

%IF SUPPORT_VT220
%THEN
	EDT$$B_CHAR_INFO : BLOCKVECTOR [256, 1, BYTE],	! Information about each character
%FI

	EDT$$A_CMD_END,				! End of command pointer
	EDT$$A_CMD_BUF;				! Command string pointer

    LOCAL
	KW_POINTER,
	FIRST_CHAR,
	TABLE_OFFSET,
	FOUND,
	TABLE,
	TABLE_PTR : REF BLOCK [, BYTE] FIELD (KEY_WORD_FIELD),
	C_POINTER;

    .KEY_NUM = 0;
    C_POINTER = .EDT$$A_CMD_BUF;
    FIRST_CHAR = CH$RCHAR_A (C_POINTER);

%IF SUPPORT_VT220
%THEN

    IF .EDT$$B_CHAR_INFO [.FIRST_CHAR, 0, 0, 1, 0] THEN FIRST_CHAR = .FIRST_CHAR - %C'a' + %C'A';

%ELSE

    IF ((.FIRST_CHAR GEQ %C'a') AND (.FIRST_CHAR LEQ %C'z')) THEN FIRST_CHAR = .FIRST_CHAR - %C'a' + %C'A';

%FI

    CASE .TABLE_NO FROM 1 TO 2 OF
	SET

	[1] :
	    BEGIN

	    IF ((.FIRST_CHAR LSS %C'A') OR (.FIRST_CHAR GTR %C'^')) THEN RETURN;

	    TABLE = VERB_TABLE;
	    TABLE_OFFSET = (.FIRST_CHAR - %C'A')*(%BPADDR/8);
	    TABLE_PTR = .(.TABLE + .TABLE_OFFSET) + ADDR_BASE;
	    END;

	[2] :
	    BEGIN

	    IF ((.FIRST_CHAR LSS %C'B') OR (.FIRST_CHAR GTR %C'W')) THEN RETURN;

	    TABLE = ENTITY_TABLE;
	    TABLE_OFFSET = (.FIRST_CHAR - %C'B')*(%BPADDR/8);
	    TABLE_PTR = .(.TABLE + .TABLE_OFFSET) + ADDR_BASE;
	    END;

	[OUTRANGE] :
	    ASSERT (0);
	TES;

    WHILE (.TABLE_PTR [KEY_WORD_LEN] NEQ 0) DO
	BEGIN
	KW_POINTER = TABLE_PTR [KEY_WORD_POINTER];
	C_POINTER = .EDT$$A_CMD_BUF;
	FOUND = 1;

	IF CH$PTR_LEQ (CH$PLUS (.C_POINTER, .TABLE_PTR [KEY_WORD_LEN]), .EDT$$A_CMD_END)
	THEN
	    BEGIN

	    INCR I FROM 1 TO .TABLE_PTR [KEY_WORD_LEN] DO
		BEGIN

		LOCAL
		    CHAR;

		CHAR = CH$RCHAR_A (C_POINTER);

%IF SUPPORT_VT220
%THEN

		IF .EDT$$B_CHAR_INFO [.CHAR, 0, 0, 1, 0] THEN CHAR = .CHAR - %C'a' + %C'A';

%ELSE

		IF ((.CHAR GEQ %C'a') AND (.CHAR LEQ %C'z')) THEN CHAR = .CHAR - %C'a' + %C'A';

%FI

		IF (.CHAR NEQ CH$RCHAR_A (KW_POINTER)) THEN FOUND = 0;

		END;

	    IF .FOUND
	    THEN
		BEGIN
		.KEY_NUM = .TABLE_PTR [KEY_WORD_NUM];
!+
! Skip over the keyword.
!-
		EDT$$A_CMD_BUF = CH$PLUS (.EDT$$A_CMD_BUF, .TABLE_PTR [KEY_WORD_LEN]);
		RETURN;
		END;

	    END;

	TABLE_PTR = .TABLE_PTR [KEY_WORD_NEXT] + ADDR_BASE;
	END;

    RETURN;
    END;					! of routine EDT$$KEY_WORD

!<BLF/PAGE>

END						! of module EDT$CHMKEYWRD

ELUDOM
