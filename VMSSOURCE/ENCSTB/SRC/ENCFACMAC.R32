!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	VAX/VMS Data Encryption Services
!
! ABSTRACT:
!	This module is a prefix file which provides definitions during
!	the compilation of other modules.
!
! ENVIRONMENT:
!	VAX/VMS User mode.
!
! AUTHOR:	J. Eric Pollack, CREATION DATE: 31-Dec-1982
!
! MODIFIED BY:
!
!	V01-001	MSH0073		Michael S. Harvey	8-Aug-1984
!		Remove V4 specific logical name variants.
!
!--


MACRO
!
! Define symbols for the possible variants for conditional compilation
!
    VMS_V3 = ((%VARIANT AND %B'1111') EQLU 0) %,	! for vms v3 systems
    VMS_V4 = ((%VARIANT AND %B'1111') GEQU 1) %,	! for vms v4 systems
    VMS_EXPERIMENTAL = (%VARIANT GTRU 16) % ,		 ! for experimenal features

    ONE_LONG_WORD = VECTOR [ 1 , LONG ] % ,	! longword parameter

    $DDESCRIP = $BBLOCK [ DSC$C_S_BLN ] % ,	! allocate a descriptor

    $DSTATIC =  WORD(0),BYTE(DSC$K_DTYPE_T),
    		BYTE(DSC$K_CLASS_Z),LONG(0) % ,	! initial for static desc
    
    $DDYNAMIC = WORD(0),BYTE(DSC$K_DTYPE_T),
    		BYTE(DSC$K_CLASS_D),LONG(0) % ,	! initial for dynamic desc

    $DVARYING = WORD(0),BYTE(DSC$K_DTYPE_T),
    		BYTE(DSC$K_CLASS_V),LONG(0) % ,	! initial for varying desc
!
! force the class of a LOCAL string descriptor to dynamic and
! zero the length and pointer fields.
!
    make_descriptor_dynamic ( desc ) =
	CH$FILL( 0 , dsc$c_s_bln , desc );
	$BBLOCK [ desc , DSC$B_CLASS ] = DSC$K_CLASS_D % ,
!
! release dynamic memory space referenced by a descriptor
!
    release_descriptor_space ( desc ) =
	str$free1_dx ( desc ) % ,
!
! test for presence of qualifier and return value or 0
!
    if_qualifier ( qual_name , mask ) =
	( IF cli$present ( $descriptor ( qual_name ) ) THEN
		mask ELSE 0 ) % ,
!
! handle optional parameters in call parameter lists
!
    opt_param(num,value) = ( IF (num GTRU ACTUALCOUNT()) THEN
	0 ELSE value) % ,
!
! check the target for a zero address and return value if non-null
!
    opt_param_val(num,addr,value) =
	    (
	    IF (num LEQU ACTUALCOUNT())
	    THEN
		IF addr NEQA 0 THEN value ELSE 0 
	    ELSE
		0
	    ) % ,
!
! Return 0 or the address value of an optional parameter
!
    opt_value(num) = (IF (num GTRU ACTUALCOUNT()) THEN
    	0 ELSE .opt_argument_pointer[num] ) % ,
!
! insert optional parameter count or zero in call 
!
    opt_param_count ( first_opt_arg_number ) = ( IF (first_opt_arg_number
	GEQU ACTUALCOUNT()) THEN 0 
	ELSE ACTUALCOUNT() - first_opt_arg_number + 1 ) % ,
!
! define macros to access various fields of the context block
! Within each module using these macros there must be defined a macro or
! symbol for "context" and "context_length"
!
    context_check = $BBLOCK [ .context , ENCRYPT$L_CHECK ] % ,
    context_user = $BBLOCK [ .context , ENCRYPT$Q_USER ] % ,
!
! address references to algorithm control mask and sub-fields
!
    context_control_mask = $BBLOCK [ .context , ENCRYPT$L_CONTROL_MASK ] % ,
    context_call_function = $BBLOCK [ .context , ENCRYPT$B_FUNCTION ] % ,
    context_alg_code = $BBLOCK [ .context , ENCRYPT$B_ALG_CODE ]  % ,
    context_alg_sub_mode = $BBLOCK [ .context , ENCRYPT$B_SUB_MODE ] % ,
    context_alg_flag_1 = $BBLOCK [ .context , ENCRYPT$B_ALG_FLAG_1 ] % ,
    context_alg_flag_2 = $BBLOCK [ .context , ENCRYPT$B_ALG_FLAG_2 ] % ,
!
! address of primitive service entry point maintained by encrypt library interface
!
    context_primitive_ept = $BBLOCK [ .context ,
    						ENCRYPT$A_PRIM_EPT ] % ,
!
! address references to statistics cells
!
    context_stat_records = $BBLOCK [ .context , ENCRYPT$L_TOTAL_RECORDS ] % ,
    context_stat_bytes = $BBLOCK [ .context , ENCRYPT$Q_TOTAL_BYTES ] % ,
    context_stat_time = $BBLOCK [ .context , ENCRYPT$Q_TOTAL_TIME ] % ,
!
! address references to current operation context
!
    context_curop_queue = $BBLOCK [ .context + 
    			    	$BYTEOFFSET(ENCRYPT$Q_CUROP_QUEUE) ] % ,
    context_curop_efn = $BBLOCK [ .context ,ENCRYPT$W_CUROP_EFN ] % ,
    context_curop_astadd = $BBLOCK [ .context ,ENCRYPT$A_CUROP_ASTADD ] % ,
    context_curop_astprm = $BBLOCK [ .context ,ENCRYPT$L_CUROP_ASTPRM ] % ,
    context_curop_stsadd = $BBLOCK [ .context ,ENCRYPT$A_CUROP_STSADD ] % ,
!
! Macros to manipulate time values via emulated quadword add/sub instruction
!
    addq2 ( src , dst ) = (
	EXTERNAL ROUTINE LIB$ADDX ;
	LIB$ADDX ( src , dst , dst ) ; ) %,
    subq2 ( src , dst ) = (
	EXTERNAL ROUTINE LIB$SUBX ;
	LIB$SUBX ( dst , src , dst ) ; ) %,
!
! Accumulate primitive elapsed cpu times. really useful only for software
! implementations as this accumulates in the stream context statistics
! fields only the cpu time spent in the primitive interface routine, not
! the time actually used to complete the encrypt operation.
!
    start_time ( scratch ) = 
	BEGIN
	BUILTIN
	    EMUL ;
	LOCAL
	    jpivec : VECTOR [4,LONG] INITIAL (WORD(4),WORD(JPI$_CPUTIM),
					LONG(0),LONG(0),LONG(0));
	jpivec[1] = scratch ;

	$getjpi ( itmlst=jpivec ) ;
	!
	! returned in 10 ms units, convert to 100ns units
	!
	EMUL ( %REF(100000) , scratch , %REF(0) , scratch ) ;
    	!(scratch + 4) = 0 ;
	!scratch = .scratch * 10000 ;

	END ;%,

	end_time ( scratch , accumulator ) =
	BEGIN
	!
	! subtract 'start time' from accumulator
	!
    	subq2 ( scratch , accumulator ) ;
	!accumulator = .accumulator - .scratch ;
	!
	! obtain finish time
	!
    	start_time ( scratch ) ;
	!
	! add finish time to accumulator to get elapsed time
	!
	addq2 ( scratch , accumulator ) ;
    	!accumulator = .accumulator + .scratch ;
	END; % ;

LITERAL
    word_mask = %X'FFFF' ,
    minimum_key_length = 8 ,	! minimum acceptable length of a compressed key
    true = 1 ,
    false = 0 ;

!
! Macros used by the various facility test routines
!
MACRO
    desc (str) =  uplit( %CHARCOUNT( str ), UPLIT BYTE ( str )) % ,
    $ref( x ) = (local m; m = (x); m) %,
    tty_put_char (ch) = tty_put_msg( $REF(ch), 1) %,
    tty_put_quo (s) = tty_put_msg (CH$PTR (UPLIT (s)), %CHARCOUNT (s)) %,
    tty_put_crlf (dummy) = (EXTERNAL ROUTINE ENCTST$PUT_CHR ;
    				ENCTST$PUT_CHR()) %,
    Tty_put_msg (adr,len) = (EXTERNAL ROUTINE ENCTST$PUT_MSG ;
    				ENCTST$PUT_MSG ( adr ,len ) ) % ,
    tty_put_integer ( num, radix, len ) = (EXTERNAL ROUTINE ENCTST$PUT_INT ;
    				ENCTST$PUT_INT ( num, radix, len )) % ,
    tty_put_mgd ( desadr ) = (EXTERNAL ROUTINE ENCTST$PUT_DES ;
    				ENCTST$PUT_DES ( desadr )) % ,
!+
! $FAB_DEV - a macro which defines a single FAB$L_DEV bit.
!
!	$FAB_DEV( bit_name )
!
!	where:
!	    "bit_name" is a 3-character device bit name
!
!-
    $FAB_DEV( BIT_NAME ) =
	FAB$DEV( FAB$L_DEV, %NAME('DEV$V_',BIT_NAME) ) %,

    FAB$DEV( FAB_BYTE, FAB_BIT, FAB_SIZE, FAB_SIGN, DEV_DISP, DEV_BIT, DEV_SIZE, DEV_SIGN ) =
	FAB_BYTE, DEV_BIT, DEV_SIZE, DEV_SIGN %;

!
! Define control arrays and parameters for the Version V04-000 Logical Name
! services used for the storage of keys.
!
MACRO
    log_table_name_vec =	  $descriptor ('ENCRYPT$SYSTEM') ,
    				  $descriptor ('LNM$GROUP' ),
    				  $descriptor ('LNM$PROCESS' ) ,
    				  $descriptor ('LNM$JOB' ) %;
