{++
{
{	DSTDEF.MDL
{		Definition of dst type DST$K_DTYPE_CAD  command mnemonics
{	Version 'V03-000'
{
{
{****************************************************************************
{*									    *
{*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
{*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
{*  ALL RIGHTS RESERVED.						    *
{* 									    *
{*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
{*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
{*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
{*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
{*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
{*  TRANSFERRED.							    *
{* 									    *
{*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
{*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
{*  CORPORATION.							    *
{* 									    *
{*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
{*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
{* 									    *
{*									    *
{****************************************************************************
{
{
{ FACILITY:
{
{
{ ABSTRACT:
{
{	For more information on the use of the items defined in this
{	document refer to specifications of debug symbol table entries
{	generated by the language processors and the SRM for a description
{	of the VAX standard descriptors.
{
{ ENVIRONMENT:
{
{
{ Author:
{	Terrell Mitchell   October 4, 1979
{
{ Version:	V04-000
{
{ MODIFIED BY:
{
{--
{ 1-001 - Original.  TM 4-Oct-1979


{
{   Following is the SDL definition of the mnemonics for the
{	address calculation commands found in DSC$K_DTYPE_CAD
{	dst records.  They are processed by DEBUG32.
{
{   The commands operate on a longword stack maintained by the debugger.
{	This type of dst record is specified for items which need address
{	calculation at runtime.  It was originally designed for handling
{	register based record items.
{


module $DSTDEF;

	 						/* Use a K to indicate constant 
constant LOCOMMAND	equals 0  prefix DST tag $K;	/* Low value for range checking 
constant STA_R00	equals 0  prefix DST tag $K;	/* Stack contents of R0 
constant STA_R01	equals 1  prefix DST tag $K;	/* Stack contents of R1 
constant STA_R02	equals 2  prefix DST tag $K;	/* Stack contents of R2 
constant STA_R03	equals 3  prefix DST tag $K;	/* Stack contents of R3 
constant STA_R04	equals 4  prefix DST tag $K;	/* Stack contents of R4 
constant STA_R05	equals 5  prefix DST tag $K;	/* Stack contents of R5 
constant STA_R06	equals 6  prefix DST tag $K;	/* Stack contents of R6 
constant STA_R07	equals 7  prefix DST tag $K;	/* Stack contents of R7 
constant STA_R08	equals 8  prefix DST tag $K;	/* Stack contents of R8 
constant STA_R09	equals 9  prefix DST tag $K;	/* Stack contents of R9 
constant STA_R10	equals 10  prefix DST tag $K;	/* Stack contents of R10 
constant STA_R11	equals 11  prefix DST tag $K;	/* Stack contents of R11 
constant STA_R12	equals 12  prefix DST tag $K;	/* Stack contents of R12 (AP) 
constant STA_R13	equals 13  prefix DST tag $K;	/* Stack contents of R13 (FP) 
constant STA_R14	equals 14  prefix DST tag $K;	/* Stack contents of R14 (SP) 
constant STA_R15	equals 15  prefix DST tag $K;	/* Stack contents of R15 (PC) 
constant STA_IMM_B	equals 16  prefix DST tag $K;	/* Stack contents of byte operand 
                                        		/*    sign extending to longword
constant STA_IMM_W	equals 17  prefix DST tag $K;	/* Stack contents of word operand 
                                        		/*    sign extending to longword
constant STA_IMM_L	equals 18  prefix DST tag $K;	/* Stack contents of longword operand 
constant OPR_ADD	equals 19  prefix DST tag $K;	/* Pop two operands, add , 
                                        		/*    stack longword result
constant STA_REP_B	equals 20  prefix DST tag $K;	/* Pop top item and stack sign extended 
                                        		/*    byte at that address
constant STA_REP_W	equals 21  prefix DST tag $K;	/* Pop top item and stack sign extended 
                                        		/*    word at that address
constant STA_REP_L	equals 22  prefix DST tag $K;	/* Pop top item and stack longword at 
                                        		/*    that address
constant OPR_STOP	equals 23  prefix DST tag $K;	/* Terminate command string. Longword 
                                        		/*    at top of stack contains address
                                        		/*    of data item.
constant HICOMMAND	equals 23  prefix DST tag $K;	/* Hi value for range checking 

end_module $DSTDEF;

