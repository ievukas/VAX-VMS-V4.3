MODULE NXTVOL (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	This module gets the next volume for read and write
!
!
! ENVIRONMENT:
!
!	VMS operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  20-AUG-1977
!
! MODIFIED BY:
!
!	V03-010	HH0041		Hai Huang		24-Jul-1984
!		Remove REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.B32'.
!
!	V03-009	MMD0287		Meg Dumont,	10-Apr-1984  14:14
!		Fix to the $MTACCESS return code where the ACCESS field
!		could have gotten set to normal processing before
!		all the errors were checked.
!
!	V03-008	LMP0221		L. Mark Pilant,		28-Mar-1984  14:50
!		Change UCB$L_OWNUIC to ORB$L_OWNER and UCB$W_VPROT to
!		ORB$W_PROT.
!
!	V03-007	MMD0273		Meg Dumont,	23-Mar-1984  9:42
!		Change the processing of the accessibility character fields
!		in the VOL1 and or HDR1 label to call the installation
!		specific accessibility routine. The return from this
!		routine determines the users access to the volume and/or file.
!
!	V03-006	MMD0177		Meg Dumont,	26-May-1983  15:13
!		Change VOL1 to indicate ANSI level 4 when writing SYSTEM CODE 
!		in VOL1 LABEL
!
!	V03-005	MMD0159		Meg Dumont,	26-Apr-1983  9:30
!		Change reference to 240 the symbol SCRATCH_OFFSET.
!
!	V03-004	MMD0135		Meg Dumont,	12-Apr-1983  17:29
!		Added support for writng and interrupting the VOL1
!		OWNER IDENTIFIER field, so that it is no longer
!		treated as a VMS field, strictly. 
!
!
!	V03-003	MMD0121		Meg Dumont,	29-Mar-1983  0:45
!		Added support for the VOL2 label inside the MTAACP
!
!	V03-002	MMD0104		Meg Dumont,	17-Feb-1983  13:19
!		Use GET_DEV_NAME for tape units name. Added code for AVR and AVL
!
!	V02-015 DMW00060	David Michael Walp	 7-Dec-1981
!		Rename TRANSLATION_TABLE to ANSI_A_GOOD
!
!	V02-014 DMW00037	David Michael Walp	17-Sep-1981
!		Set MVL entry used when GTNEXT_VOL_READ places the label
!		in the MVL
!
!	V02-013 DMW00031	David Michael Walp	18-Aug-1981
!		Volume Access project
!
!	V02-012 DMW00018	David Michael Walp	20-May-1981
!		Checks for File-Set-Id changed to look at the MVL rather
!		then VCB ( 1st mounted volume label ).
!
!	V02-011	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!	A0010	MCN0003		Maria del C. Nasr	15-Oct-1979   9:26
!		Add HDR3 processing
!
!	A0009	ACG0047		Andrew C. Goldstein,	9-Aug-1979  14:17
!		Protection check interface changes
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:MTADEF.B32';

LINKAGE
    CHECK_PROT	 	= JSB (REGISTER = 0, REGISTER = 1, REGISTER = 2)
				    : NOTUSED (3, 4, 5, 6, 7, 8, 9, 10, 11),
    L$CHECK_HDR		= JSB : GLOBAL (SCRATCH = 9, CURRENT_VCB = 11)
				    NOTUSED (7, 8, 10);

FORWARD ROUTINE
    CHECK_HDR		: L$CHECK_HDR,	    ! check that HDR can be overwritten
    GTNEXT_VOL_READ	: NOVALUE L$GTNEXT_VOL_RE,  ! get next volume for read
    GTNEXT_VOL_WRIT	: NOVALUE L$GTNEXT_VOL_WR,  ! get next volume for write
    INC_VOL_SECTION	: COMMON_CALL NOVALUE,	    ! incr rel vol and sect #
    RESET_UNIT		: COMMON_CALL NOVALUE,
    UPDATE_MVL_LBL	: COMMON_CALL NOVALUE;	    ! update label in MVL entry

EXTERNAL
    CURRENT_UCB		: REF BBLOCK,	    ! addr current unit control block
    HDR1		: REF BBLOCK,	    ! addr of HDR1(EOF1) label
    IO_PACKET		: REF BBLOCK,	    ! addr current I/O request packet
    SCH$GL_PCBVEC	: REF VECTOR ADDRESSING_MODE (ABSOLUTE),
    WORK_AREA;

EXTERNAL ROUTINE
    EXPIRED		: COMMON_CALL,		! determine if file has expired
    FORMAT_VOLOWNER	: NOVALUE,		! format the owner field in VOL2
    GET_DEV_NAME	: COMMON_CALL NOVALUE,	! given UCB addr get dev name
    GET_RECORD,					! get record tape is currently reading
    ISSUE_IO		: L$ISSUE_IO,		! issue I/O
    MOUNT_VOL		: COMMON_CALL,		! mount relative vol
    PRINT_OPR_MSG	: L$PRINT_OPR_MSG,	! print a system mess for oper
    READ_HDR		: COMMON_CALL,		! read headers
    REWIND_AND_WAIT	: COMMON_CALL;

GLOBAL ROUTINE GTNEXT_VOL_READ : NOVALUE L$GTNEXT_VOL_RE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine gets the next volume for read and checks that the file
!	sequence number, file section number and volume set identifier
! 	are those sought
!
! CALLING SEQUENCE:
!	GTNEXT_VOL_READ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_VCB - address of current volume control block
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	next relative volume mounted
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	CVT_DEVNAM	: VECTOR [MAX_DEVNAM_LENGTH,BYTE], ! Converted dev name
	CVT_DEVNAM_LENGTH : BYTE,		! and length of dev name
	VOLLBL	: BBLOCK [6],		! current tape volume label
	FLAGS,
	FID,				! file identifier
	MVL_ENTRY : REF BBLOCK,		! addr of current rel vol entry in MVL
   	RVN,				! current relative volume number
	MVL	: REF BBLOCK;		! magnetic tape volume list

    FLAGS = $FIELDMASK(MOU$V_REWIND) OR $FIELDMASK(MOU$V_CHKIFSPC);
    KERNEL_CALL(INC_VOL_SECTION);	! incr sequence # and relative vol #
    FID = .CURRENT_VCB[VCB$L_CUR_FID];	! pickup current file id
    RVN = .CURRENT_VCB[VCB$B_CUR_RVN];	! pickup cur relative volume #

    WHILE 1
    DO
	BEGIN

	LOCAL
	    SCRATCH	: REF BBLOCK;

	! mount vol, rewind it, check the label if the operator specifies it

	MVL_ENTRY = MOUNT_VOL(.RVN, .FLAGS);

	SCRATCH = .HDR1 + SCRATCH_OFFSET;
	CH$MOVE(VL1$S_VOLLBL, SCRATCH[VL1$T_VOLLBL], VOLLBL);

	IF NOT READ_HDR()
	THEN
	    BEGIN
	    ERR_EXIT(SS$_TAPEPOSLOST);
	    END;

    	! This next call will use the UCB address to get the device's name and
    	! will fill in the fields with that name and the length of the name.

    	GET_DEV_NAME(CVT_DEVNAM_LENGTH,CVT_DEVNAM);

	! on read the next volume has the same volume set id and the fid of the
	! next section for the current file

	IF .FID NEQ .CURRENT_VCB[VCB$L_CUR_FID]
	THEN
	    PRINT_OPR_MSG(MOUN$_NOTRELVOL, 0, .CURRENT_VCB[VCB$B_CUR_RVN],
			  .CVT_DEVNAM_LENGTH,CVT_DEVNAM)

	ELSE
	    BEGIN

	    ! pickup the addr of the MVL

	    MVL = .CURRENT_VCB[VCB$L_MVL];
	    IF CH$NEQ(MVL$S_SET_ID, MVL[MVL$T_SET_ID],
		      HD1$S_FILESETID, HDR1[HD1$T_FILESETID], ' ')
	      AND

		! not override set identifier with privs

		NOT (	  .CURRENT_VCB[VCB$V_OVRSETID]
		      AND .MVL_ENTRY [MVL$V_OVERIDE])
		      
	    THEN
		PRINT_OPR_MSG(MOUN$_NOTVOLSET, 0, 
			      .CVT_DEVNAM_LENGTH,CVT_DEVNAM,
			      6, MVL[MVL$T_SET_ID])

	    ELSE
		EXITLOOP;

	    END;

	FLAGS = $FIELDMASK(MOU$V_REWIND) + $FIELDMASK(MOU$V_MOUNTERR);
	KERNEL_CALL(RESET_UNIT);
	END;					! end of while loop

    KERNEL_CALL(UPDATE_MVL_LBL, .MVL_ENTRY, VOLLBL);
    END;					! end of routine


GLOBAL ROUTINE GTNEXT_VOL_WRIT : NOVALUE L$GTNEXT_VOL_WR =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine gets the next volume for write.  The volume
! 	is mounted, rewound and the label is verified. The VOL1
!	label is rewritten to insure same density throughout volume set.
!	The tape in initialized at the operator's request. The tape is
!	also inited at the request of the user who mounted the tape.
!	That is if the tape was mounted /INIT or /BLANK then every new
!	reel in the volume set will be inited if the user has the proper
!	access to the tape.
!
! CALLING SEQUENCE:
!	GTNEXT_VOL_WRIT()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_UCB - address of current unit control block
!	CURRENT_VCB - address of current volume control block
!	operator input
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	relative volume number incremented
!	section number increment
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    LITERAL
	BLANK = 0,
	INIT = 1;

    LOCAL
	CHAR	: VECTOR [4,BYTE],	! Char to write in accessibility field
	CURRENT_RECORD,			! current record tape drive is reading
	CVT_DEVNAM	: VECTOR [MAX_DEVNAM_LENGTH,BYTE], ! Converted dev name
	CVT_DEVNAM_LENGTH : BYTE,		! and length of dev name
	ERROR_NO,
	FLAGS,
	ORB		: REF BBLOCK,		! ORB address
	MVL		: REF BBLOCK,		! MVL of current volume set
	MVL_ENTRY	: REF BBLOCK,		! Entry of current volume
	SAVE_DEVCHAR	: VECTOR [2],
	OPR_FLAG	: BITVECTOR [2],
	ACCESS_CHAR	: BYTE,
	VOL_OWNER	: VECTOR [ VL1$S_OWNER_IDENT, BYTE],
	SCRATCH2 	: BBLOCK [ANSI_LBLSZ],
	STATUS;

    GLOBAL REGISTER
	SCRATCH = 9	: REF BBLOCK;

    BIND
	MAIL = WORK_AREA	: BBLOCK [MSGSIZE],
	MAILSZ = MAIL + MSGSIZE,
	STARID = UPLIT ('DECFILE11A');

    EXTERNAL REGISTER
	COMMON_REG;

    KERNEL_CALL(INC_VOL_SECTION);
    SAVE_DEVCHAR[0] = .(CURRENT_UCB[UCB$B_DEVCLASS])<0, 32>;
    SAVE_DEVCHAR[1] = .CURRENT_UCB[UCB$L_DEVDEPEND];
    SCRATCH = .HDR1 + SCRATCH_OFFSET;
    FLAGS = $FIELDMASK(MOU$V_REWIND);

    ! This next call will use the UCB address to get the device's name and
    ! will fill in the fields with that name and the length of the name.

    GET_DEV_NAME(CVT_DEVNAM_LENGTH,CVT_DEVNAM);

    WHILE 1
    DO
	BEGIN

	WHILE 1
	DO
	    BEGIN

	    ! mount the volume, check if overwrite is possible

	    MVL_ENTRY = MOUNT_VOL(.CURRENT_VCB[VCB$B_CUR_RVN], .FLAGS);
	    MVL = .CURRENT_VCB[VCB$L_MVL];

	    ! set operator flag for "/INIT" and "/BLANK". If the operator
	    ! was required to intervene then these flags may be set.

	    OPR_FLAG [ BLANK ] = (.MAIL [ OPC$W_MS_STATUS ] EQL 
				    ( OPC$_BLANKTAPE AND %X'FFFF' ));
	    OPR_FLAG [ INIT ]  = (.MAIL [ OPC$W_MS_STATUS ] EQL
				    ( OPC$_INITAPE AND %X'FFFF' ));

	    ! do not check things on "/BLANK" or if the volume was mounted
	    ! "/BLANK"

	    IF .OPR_FLAG[BLANK] OR .CURRENT_VCB[VCB$V_BLANK] THEN EXITLOOP;

	    ! see if we can overwrite the 1st file, save the VOL1 access
	    ! character ( for defaulting ) before scratching the scratch area

	    ACCESS_CHAR = .SCRATCH [ VL1$B_VOLACCESS ];
	    CH$MOVE (VL1$S_OWNER_IDENT, SCRATCH[VL1$T_OWNER_IDENT],VOL_OWNER);
	    ERROR_NO    = CHECK_HDR(.MVL_ENTRY,(.OPR_FLAG[INIT] 
						OR .CURRENT_VCB[VCB$V_INIT]));

	    ! check on the results

	    IF .ERROR_NO OR ((.OPR_FLAG[INIT] OR .CURRENT_VCB[VCB$V_INIT])
			 AND (.ERROR_NO EQL MOUN$_NOTANSI))
	    		 THEN EXITLOOP;

	    ! the tape is not ANSI without /INIT or /BLANK

	    PRINT_OPR_MSG(.ERROR_NO, 0,
		  	  .CVT_DEVNAM_LENGTH,CVT_DEVNAM);

	    ! force physical mount

	    FLAGS = $FIELDMASK(MOU$V_REWIND) + $FIELDMASK(MOU$V_MOUNTERR);
	    KERNEL_CALL(RESET_UNIT);
	    END;

	ERROR_NO = MOUN$_IOERROR;

	! try to initialize

	IF REWIND_AND_WAIT()
	THEN
	    BEGIN

	    ! fill with spaces

	    CH$FILL(' ', ANSI_LBLSZ, .SCRATCH);
	    CH$FILL(' ', ANSI_LBLSZ, SCRATCH2);

	    ! Set defaults

	    .SCRATCH = 'VOL1';
	    SCRATCH[VL1$B_LBLSTDVER] = .MVL[MVL$B_STDVER] + '0';
	    SCRATCH2 = 'VOL2';
	    (SCRATCH2[VL2$T_VOLOWNER])<0,32> = 'D%C ';

	    ! get the volume label from the MVL

	    CH$COPY(MVL$S_VOLLBL, MVL_ENTRY[MVL$T_VOLLBL], ' ',
		    VL1$S_VOLLBL, SCRATCH[VL1$T_VOLLBL]);

	    ! If the operator supplied a label or if the MTAACP created
	    ! the label, the ANSI volume owner from the MVL is stored in 
	    ! the label else the one currently on the tape will be used.
	    ! The accessibility char to input to $MTACCESS is determined
	    ! in a similar fashion, except it is not stored in the
	    ! label until $MTACCESS has seen it.

	    IF (.MAILSZ NEQ 0) OR .OPR_FLAG [ INIT ] OR .OPR_FLAG [ BLANK ]
			       OR .CURRENT_VCB [ VCB$V_INIT ] 
			       OR .CURRENT_VCB [ VCB$V_BLANK ]
	    THEN 
	    BEGIN
		ACCESS_CHAR = .MVL[MVL$B_VOL_ACC];
		CH$MOVE(VL1$S_OWNER_IDENT, MVL[MVL$T_VOLOWNER],
			SCRATCH[VL1$T_OWNER_IDENT]);
	    END
	    ELSE
	    BEGIN
		CH$MOVE (VL1$S_OWNER_IDENT, VOL_OWNER, 
			  SCRATCH [VL1$T_OWNER_IDENT]);
	    END;

	   ! Call the accessibility system service to get the character to output.
	   ! First keep the record that the UCB is reading. The accessibility 
	   ! routine can not move the tape from under us! Thus we will compare
	   ! this to the field after the call and if the tape was moved we punt
	   ! the operation. 

	   ORB = .CURRENT_UCB[UCB$L_ORB];
	   CURRENT_RECORD = KERNEL_CALL (GET_RECORD,.CURRENT_UCB);
	   CHAR = $MTACCESS(LBLNAM = 0,
		 	    UIC = .ORB[ORB$L_OWNER],
		 	    STD_VERSION = .MVL[MVL$B_STDVER],
		 	    ACCESS_CHAR = .ACCESS_CHAR,
		 	    ACCESS_SPEC = MTA$K_CHARVALID,
		 	    TYPE = MTA$K_OUTVOL1);

	   STATUS = KERNEL_CALL( GET_RECORD, .CURRENT_UCB);
	   IF .CURRENT_RECORD EQL .STATUS
	    THEN 
	    BEGIN
		LOCAL	TMP_PROT	: WORD;		! SOGW protection word

		! Set the access char in the label

		SCRATCH[VL1$B_VOLACCESS] = .CHAR[0];

	  	! fill in the VOL2 VMS owner field

		IF .ORB[ORB$V_PROT_16]
		THEN TMP_PROT = .ORB[ORB$W_PROT]
		ELSE
		    BEGIN
		    TMP_PROT<0,4> = .(ORB[ORB$L_SYS_PROT])<0,4>;
		    TMP_PROT<4,4> = .(ORB[ORB$L_OWN_PROT])<0,4>;
		    TMP_PROT<8,4> = .(ORB[ORB$L_GRP_PROT])<0,4>;
		    TMP_PROT<12,4> = .(ORB[ORB$L_WOR_PROT])<0,4>;
		    END;
	 	FORMAT_VOLOWNER(SCRATCH2, .ORB[ORB$L_OWNER], .TMP_PROT);

		! If a VMS proctection is specified and the user does not
		! wish us to limit this to only ANSI standard only then
		! write our system code in the VOL1 label. This will
		! tell other implemenations that the VOL2 label on this
		! tape was written by VMS.

		IF NOT (.CURRENT_VCB[VCB$V_INTCHG] 
			AND .CURRENT_VCB [VCB$V_NOVOL2])
			AND (.ORB[ORB$L_SYS_PROT] NEQ 0 OR
			     .ORB[ORB$L_OWN_PROT] NEQ 0 OR
			     .ORB[ORB$L_GRP_PROT] NEQ 0 OR
			     .ORB[ORB$L_WOR_PROT] NEQ 0)
		   THEN
		   BEGIN
			CH$MOVE(10,STARID,SCRATCH[VL1$T_SYSCODE]);
			SCRATCH[VL1$B_LBLSTDVER] = '4';
		   END;

		! set the same characteristics and if that succeeds write the
		! label.

		IF ISSUE_IO(IO$_SETMODE, SAVE_DEVCHAR, 0)
		   THEN
			STATUS = ISSUE_IO(IO$_WRITELBLK, .SCRATCH, ANSI_LBLSZ);

	    ! If the frist write worked, then check to see if a VOL2 label needs
	    ! to be written. If it does and that worked then exitloop.

		IF .STATUS 
		   THEN 
		   BEGIN
			IF NOT (.CURRENT_VCB[VCB$V_INTCHG] 
				AND .CURRENT_VCB [VCB$V_NOVOL2])
				AND (.ORB[ORB$L_SYS_PROT] NEQ 0 OR
				     .ORB[ORB$L_OWN_PROT] NEQ 0 OR
				     .ORB[ORB$L_GRP_PROT] NEQ 0 OR
				     .ORB[ORB$L_WOR_PROT] NEQ 0)
			   THEN
				STATUS = ISSUE_IO (IO$_WRITELBLK, SCRATCH2, 
						   ANSI_LBLSZ);
			IF .STATUS THEN EXITLOOP;
		   END;


		IF .STATUS<0,16> EQL SS$_WRITLCK THEN ERROR_NO = MOUN$_WRITLCK;

	    END
	    ELSE
		ERROR_NO = MOUN$_TAPEPOSLOST;
	END;
	PRINT_OPR_MSG(.ERROR_NO, 0,
		      .CVT_DEVNAM_LENGTH,CVT_DEVNAM);

	! force physical mount

	FLAGS = $FIELDMASK(MOU$V_REWIND) + $FIELDMASK(MOU$V_MOUNTERR);
	KERNEL_CALL(RESET_UNIT);
	END;

    END;					! end of routine


ROUTINE INC_VOL_SECTION : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine increments the relative volume number
! 	and the file section number
!
! CALLING SEQUENCE:
!	INC_VOL_SECTION(), CALLED IN KERNEL MODE
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_VCB - address of volume control block
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	CURRENT_VCB[VCB$B_CUR_RVN] incremented
!	CURRENT_VCB[VCB$W_CUR_SEQ] incremented
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    CURRENT_VCB[VCB$B_CUR_RVN] = .CURRENT_VCB[VCB$B_CUR_RVN] + 1;
    CURRENT_VCB[VCB$W_CUR_SEQ] = .CURRENT_VCB[VCB$W_CUR_SEQ] + 1;
    CURRENT_VCB[VCB$B_TM] = 0;
    CURRENT_VCB[VCB$L_ST_RECORD] = 0;
    END;					! end of routine

ROUTINE UPDATE_MVL_LBL (MVL_ENTRY, ADDR) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine updates the relative volume label from the vol1 label
!
! CALLING SEQUENCE:
!	UPDATE_MVL_LBL(ARG1,ARG2)
!
! INPUT PARAMETERS:
!	ARG1 - address of mvl entry for current volume
!	ARG2 - address of volume label on this tape volume
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
! USER ERRORS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER COMMON_REG;

    EXTERNAL 
	ANSI_A_GOOD  : VECTOR [ , BYTE ];! translation table for ANSI 'a' char

    MAP
	MVL_ENTRY    : REF BBLOCK;

    ! translate the label into upper case and put in ' ' for any non-ANSI
    !  'a' characters found

    CH$TRANSLATE (ANSI_A_GOOD, VL1$S_VOLLBL, .ADDR, ' ',
			       MVL$S_VOLLBL, MVL_ENTRY [MVL$T_VOLLBL] );
    MVL_ENTRY [ MVL$V_UNUSED ] = 0;
    END;

ROUTINE CHECK_HDR ( MVL_ENTRY, SLASH_INIT ) : L$CHECK_HDR =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine checks that the tape can be overwritten.
!
! CALLING SEQUENCE:
!	CHECK_HDR(ARG1,ARG2)
!
! INPUT PARAMETERS:
!	ARG1 - address of current mounted volume entry
!	ARG2 - is this a "/INIT"
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 - ok to write
!	various error codes
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    MAP
	MVL_ENTRY	: REF BBLOCK;

    EXTERNAL REGISTER
	SCRATCH = 9	: REF BBLOCK,
	COMMON_REG;

    BIND
	USER_VOL_LABEL	= UPLIT ( 'UVL' ),	! user's volume labels code
	VOLUME_LABEL	= UPLIT ( 'VOL' );	! other volume labels code

    LOCAL
	MVL	: REF BBLOCK,			! MVL address
	ORB	: REF BBLOCK,			! ORB address
	STATUS,
	CURRENT_RECORD,				! curr record drive is reading
	ACCESS;					! Users' access to overwrite tape

    !  loop till we find HDR1

    WHILE 1
    DO
	BEGIN

	STATUS = ISSUE_IO(IO$_READLBLK, .SCRATCH, ANSI_LBLSZ);

	IF (.STATUS<0,16> EQL SS$_ENDOFFILE) AND .SLASH_INIT
	THEN RETURN TRUE;

	IF (NOT .STATUS) AND (.STATUS<0,16> NEQ SS$_DATAOVERUN)
	THEN RETURN MOUN$_IOERROR;

	IF .(.SCRATCH) EQL 'HDR1' THEN EXITLOOP;

	! if we do not see a valid member of the volume label group THEN FAIL

	IF NOT (   ( CH$EQL ( 3, .SCRATCH, 3, USER_VOL_LABEL ))
		OR ( CH$EQL ( 3, .SCRATCH, 3, VOLUME_LABEL ))
	       )
	THEN RETURN MOUN$_NOTANSI;

	END;

   ! Call the accessibility system service to check the accessibility char
   ! on the HDR1 label.
   ! First keep the record that the UCB is reading. The accessibility 
   ! routine can not move the tape from under us! Thus we will compare
   ! this to the field after the call and if the tape was moved we punt
   ! the operation. The check the code return from the system service
   ! to determine what type of access the user was granted.

   MVL = .CURRENT_VCB[VCB$L_MVL];
   ORB = .CURRENT_UCB[UCB$L_ORB];
   CURRENT_RECORD = KERNEL_CALL(GET_RECORD, .CURRENT_UCB);
   ACCESS = $MTACCESS(LBLNAM = .SCRATCH,
		      UIC = .ORB[ORB$L_OWNER],
		      STD_VERSION = .MVL[MVL$B_STDVER],
		      ACCESS_CHAR = 0,
		      ACCESS_SPEC = MTA$K_NOCHAR,
		      TYPE = MTA$K_INHDR1);
   STATUS = KERNEL_CALL(GET_RECORD, .CURRENT_UCB);
   IF .CURRENT_RECORD NEQ .STATUS
	THEN RETURN (MOUN$_TAPEPOSLOST);

    IF .ACCESS EQL SS$_FILACCERR
	THEN
	BEGIN
	   IF NOT (.CURRENT_VCB[VCB$V_OVRACC] AND .MVL_ENTRY [ MVL$V_OVERIDE ])
		THEN RETURN MOUN$_ACCERR;
	   ACCESS = SS$_NORMAL;
	END;

    IF .ACCESS EQL SS$_NOVOLACC
	THEN RETURN MOUN$_NOVOLACC;

    IF .ACCESS EQL SS$_NOFILACC
	THEN RETURN MOUN$_NOFILACC;

    IF NOT (	(.CURRENT_VCB[VCB$V_OVREXP] AND .MVL_ENTRY [ MVL$V_OVERIDE ])
	     OR
		EXPIRED ( SCRATCH[HD1$T_EXPIREDT] )
	   )
    THEN RETURN  MOUN$_FILNOTEXP;

    RETURN TRUE;

    END;					! end of routine CHECK_HDR


GLOBAL ROUTINE RESET_UNIT : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine resets the unit so that after an error message
!	the same unit is choosen for mount
!
!
! CALLING SEQUENCE:
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    IF .CURRENT_VCB[VCB$W_RVN] NEQ 0
    THEN
	CURRENT_VCB[VCB$W_RVN] = .CURRENT_VCB[VCB$W_RVN] - 1
    ELSE
	CURRENT_VCB[VCB$W_RVN] = .BBLOCK[.CURRENT_VCB[VCB$L_RVT], RVT$B_NVOLS]
	- 1;

    END;

END

ELUDOM
