MODULE FOR$IO_END (%TITLE 'FORTRAN End I/O statement'
		IDENT = '1-011'		! File: FORIOEND.B32  Edit: SBL1011
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: FORTRAN Support Library - user callable
!
! ABSTRACT:
!
!	This module terminates a FORTRAN I/O statement, writes
!	last record if output, and pops up the I/O system to
!	a previously active I/O statement if any.
!
! ENVIRONMENT: User access mode; mixture of AST level or not
!
! AUTHOR: Thomas N. Hastings, CREATION DATE: 03-Mar-77
!
! MODIFIED BY:
!
!	Thomas N. Hastings, 05-Mar-77 : VERSION 01
! [Previous edit history removed.  SBL 29-Sept-1982]
! 1-011 - Change OTS$$ data structure references to FOR$$.  SBL 29-Sep-1982
!--


!
! PROLOGUE FILE:
!

REQUIRE 'RTLIN:FORPROLOG';			! FORTRAN declarations

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$IO_END;					! End I/O statement

!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FOR$$A_CUR_LUB : VOLATILE,			! Pointer to current LUB/ISB/RAB
    FOR$$AA_UDF_PR9 : VECTOR;			! PIC array of user data
						! formatter (UDF) level of abstraction.

EXTERNAL ROUTINE
    FOR$$ERR_ENDHND,				! error condition handler for END= and ERR=
    FOR$$CB_POP : JSB_CB_POP NOVALUE,		! Pop entire I/O system back to previous LUB/ISB/RAB
    FOR$$SIGNAL : NOVALUE;			! Signal an error with a small error number


GLOBAL ROUTINE FOR$IO_END = 			!

!++
! FUNCTIONAL DESCRIPTION:
!
!
! CALLING SEQUENCE:
!
!	iostat.wl.v = FOR$IO_END ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	FOR$$A_CUR_LUB		Adr. of current logical unit
!				block (LUB). Used to setup ISB
!				to get current I/O statement type
!				code.
!	ISB$B_STTM_TYPE		I/O statement type code - index to
!				dispatch table entry.
!	FOR$AA_UDF_PR1		Array of user data formatters
!				(UDF level of abstraction).
!	ISB$B_ERR_NO		Last continuable error to occur in the state-
!				ment or 0.  SIGNAL if non-zero!
!				format array or 0 if none.
!
! IMPLICIT OUTPUTS:
!
!	FOR$$A_CUR_LUB		Adr. of pushed down LUB/ISB/RAB or 0
!				if no unit pushed down (usual)
!
! ROUTINE VALUE:
!
!	An IOSTAT small integer FORTRAN error number, either 0 if no
!	error or the number of whatever continuable error last occurred
!	in the I/O statement.
!
! SIDE EFFECTS:
!
!	If an error occurs, it is SIGNALed unless an ERR=
!	transfer parameter was specified when the I/O statement
!	initialization call was made (see module FOR$IO_BEG,
!	entry points FOR${READ,WRITE}_{SF,SO,SU,DF,DO,DU,SL} or
!	FOR${DECODE,ENCODE}_{MF,MO}), in which case control is
!	transferred to the specified address (after stack
!	unwind).
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF $FOR$CCB_DECL;

    LOCAL 					! Declare locals for each item to be passed to handler
						! Needed since can only pass address, not contents
	L_UNWIND_ACTION : VOLATILE,		! UNWIND action code.
	A_ERR_ADR : VOLATILE,			! ERR= user address
	A_END_ADR : VOLATILE,			! END= user address
	L_INCR_DEPTH : VOLATILE,		! additional frames between establisher and user (0)
	USER_FRAME : REF BLOCK [, BYTE],	! User's call frame
	IOSTAT;					! Local copy of ISB$B_ERR_NO

    ENABLE 					! Establish error conditon handler
	FOR$$ERR_ENDHND (L_UNWIND_ACTION, A_ERR_ADR, A_END_ADR, L_INCR_DEPTH);	! Pass UNWIND action code.

    						! Pass ERR= and END= user addresses or 0
    					! and the number of frames between the activator and the user (0)
    CCB = .FOR$$A_CUR_LUB;

    !+
    ! Setup LOCAL storage to be passed to error handler in case of a signal
    ! Indicate that UNWIND action is to pop current LUB/ISB/RAB if error
    !-

    L_UNWIND_ACTION = FOR$K_UNWINDPOP;
    A_ERR_ADR = .CCB [ISB$A_ERR_EQUAL];
    A_END_ADR = .CCB [ISB$A_END_EQUAL];
    L_INCR_DEPTH = 0;

    !+
    ! Restore user's handler in the frame, if any.
    !-
    USER_FRAME = .CCB [ISB$A_USER_FP];
    USER_FRAME [SF$A_HANDLER] = .CCB [ISB$A_USR_HANDL];

    !+
    ! Call appropriate UDF termination routine
    ! Any errors will be signaled.
    !-

    JSB_UDF9 (FOR$$AA_UDF_PR9 + .FOR$$AA_UDF_PR9 [.CCB [ISB$B_STTM_TYPE] -
						  ISB$K_FORSTTYLO + 1]);

    !+
    ! If a continuable error occured on the I/O statement (ISB$B_ERR_NO
    ! is non-zero) then SIGNAL the error.  The signalling is delayed until
    ! statement end time so the record is positioned correctly.
    !-

    IOSTAT = .CCB [ISB$B_ERR_NO];

    IF .IOSTAT NEQU 0 THEN FOR$$SIGNAL (.IOSTAT);

    ! Pop entire I/O system back to previous LUB/ISB/RAB if there was one when this
    ! I/O statement began (see FIOBEG) or indicate that I/O system is not.
    ! currently processing any I/O statement (usual)
    ! LUB for (old) current unit is saved for next I/O statement
    !-

    FOR$$CB_POP ();
    RETURN .IOSTAT;				! Return IOSTAT error value
    END;					! End of routine

END						!End of module FOR$IO_END

ELUDOM
