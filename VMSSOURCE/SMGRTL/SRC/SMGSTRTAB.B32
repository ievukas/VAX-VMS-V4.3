MODULE SMG$STRING_TABLES( %TITLE 'TPARSE tables for string capabilities'
		IDENT = '1-003'		! File: SMGSTRTAB.B32 Edit: PLL1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Screen Management 
!
! ABSTRACT:
!
!	This module contains the LIB$TPARSE state tables used to parse
!	string capabilities in an ascii TERMTABLE.TXT file.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: P. Levesque CREATION DATE: 30-Jan-1984
!
! MODIFIED BY:
!
! 1-001	- Original.  PLL 30-Jan-1984
!  -002 - Add SMG$K_BEGIN_NORMAL_RENDITION.  PLL 15-Mar-1984
!	  Enhance state tables to accept only !UL FAO directive.
!	  Allow comments on lines not terminated by a comma.
!  -003 - Change implementation of control characters.  PLL 5-Jul-1984
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
     	CONVERT_CONTROL,		! convert ^ to control character
	CONVERT_ESCAPE,			! convert $ to escape character
	EXPRESSION_ERROR,		! signal an invalid expression error
	END_ARITH_CAP,			! end an arithmetic expression
	INIT_ARITH_CAP,			! prepare for arithmetic expression 
	INSERT_CARROT,			! insert ^ into a string
	INSERT_DOLLAR,			! insert $ into a string
	INSERT_EXCLAMATION,		! insert ! into a string
	INSERT_PARENTHESIS,		! insert ( into a string
	INVALID_DIRECTIVE,		! signal invalid directive
	NOT_STRING,			! signal an unknown capability name
	STORE_OPERAND,			! store number & operator
	STORE_SUBSTITUTION;		! store % flag in arithmetic cap

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:SMGPROLOG';		! Defines psects, macros, etc.

LIBRARY 'RTLML:SMGTPALIB';		! Definitions and macros used
					! to create TERMTABLE.EXE
LIBRARY 'RTLTPAMAC';			! TPARSE library of macros

!
! EQUATED SYMBOLS:
!

LITERAL
	SINGLE_QUOTE = %X'27',
	DOUBLE_QUOTE = %X'22',
	LEFT_PAREN = %X'28',
	RIGHT_PAREN = %X'29';

!
! FIELDS:
!
!	NONE
!
! PSECTS:
!

!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
	OTS$CVT_TI_L,			! convert ascii digits to integer
	SMG$$BLANKS_OFF,		! turn off flag to process blanks
	SMG$$BLANKS_ON,			! turn on flag to process blanks
	SMG$$COPY_CAP,			! copy a string capability into TERMTABLE
	SMG$$FLUSH_ARITHMETIC,		! flush expression data to TERMTABLE.EXE
	SMG$$FLUSH_SAVED_BUFFER,	! flush saved token to TERMTABLE.EXE
	SMG$$MISSING_END,		! signal error
	SMG$$NEXT_RECORD,		! get next record from TERMTABLE.TXT
	SMG$$SAVE_TOKEN_STRING,		! store count & ptr to token
	SMG$$STORE_CAP_MASK,		! remember capability number
	SMG$$SYNTAX_ERROR;		! signal syntax error

EXTERNAL
	SMG$_ERRAT_LIN,			! error in line n at or near 'x'
	SMG$_INVDIR,			! invalid directive
	SMG$_INVEXP,			! invalid expression
	SMG$_MISTERNAM,			! missing terminal name
	SMG$_NOTSTRCAP,			! not a string capability
	SMG$_SYNERR;			! syntax error

EXTERNAL
	SMG$$MASK_ADR,			! used by TPARSE action routines
	SMG$$NEXT_NEGATIVE_NUMBER,	! used to set terminal number 
	SMG$$CURRENT_LINE,		! current input line - maintained
					! for error messages
	SMG$$DATA_OFFSET;		! offset into data buffer

!
! OWN STORAGE:
!
! NONE

%SBTTL 'SMG$$STRING_TABLES - TPARSE tables for string capabilities'
!++
! FUNCTIONAL DESCRIPTION:
!
!	The following are the state tables used to parse string
!	capabilities in a terminal definition.
!
!--

$INIT_STATE (SMG$$A_STRING_STATES, SMG$$A_STRING_KEYWDS);
				! set up state tables, key words

!+
! Begin scanning loop.  Look for the start of a capability.
! Skip over blanks and comments.
!-

$STATE (BEGIN_SCAN,
    ((END_OF_LINE), BEGIN_SCAN, SMG$$NEXT_RECORD),
    ('!', BEGIN_SCAN, SMG$$NEXT_RECORD),
    ((CAPABILITY), BEGIN_SCAN, SMG$$BLANKS_OFF),
    (TPA$_LAMBDA, TPA$_EXIT)
    );

!+
! This state indicates the end of a line.  A comment also signals the
! end of a line.
!-

$STATE (END_OF_LINE,
    (TPA$_EOS, TPA$_EXIT),
    ('!', TPA$_EXIT),
    (TPA$_LAMBDA, TPA$_FAIL)
    );

!+
! Find the capability name and determine if it's one that we expect.
! The string up to the '=' sign should be the capability name.  
!-

$STATE (CAPABILITY,
    ((STRING_NAME), EQUALS_STRING, SMG$$BLANKS_OFF),
    ('END', TPA$_FAIL),
    ('BOOLEAN', TPA$_FAIL),
    ('NUMERIC', TPA$_FAIL),
    ('STRING', BEGIN_SCAN),
    ('REQUIRE', TPA$_FAIL, SMG$$MISSING_END),
    ('NAME', TPA$_FAIL, SMG$$MISSING_END),
    (TPA$_SYMBOL, , NOT_STRING)
    );

!+
! Determine if string capability name is valid.
!-

$STATE (STRING_NAME,
    ('BEGIN_ALTERNATE_CHAR', TPA$_EXIT, , SMG$K_BEGIN_ALTERNATE_CHAR, SMG$$MASK_ADR),
    ('BEGIN_BLINK', TPA$_EXIT, , SMG$K_BEGIN_BLINK, SMG$$MASK_ADR),
    ('BEGIN_BOLD', TPA$_EXIT, , SMG$K_BEGIN_BOLD, SMG$$MASK_ADR),
    ('BEGIN_DELETE_MODE', TPA$_EXIT, , SMG$K_BEGIN_DELETE_MODE, SMG$$MASK_ADR),
    ('BEGIN_INSERT_MODE', TPA$_EXIT, , SMG$K_BEGIN_INSERT_MODE, SMG$$MASK_ADR),
    ('BEGIN_LINE_DRAWING_CHAR', TPA$_EXIT, , SMG$K_BEGIN_LINE_DRAWING_CHAR, SMG$$MASK_ADR),
    ('BEGIN_NORMAL_RENDITION', TPA$_EXIT, , SMG$K_BEGIN_NORMAL_RENDITION, SMG$$MASK_ADR),
    ('BEGIN_REVERSE', TPA$_EXIT, , SMG$K_BEGIN_REVERSE, SMG$$MASK_ADR),
    ('BEGIN_UNDERSCORE', TPA$_EXIT, , SMG$K_BEGIN_UNDERSCORE, SMG$$MASK_ADR),
    ('BOTTOM_T_CHAR', TPA$_EXIT, , SMG$K_BOTTOM_T_CHAR, SMG$$MASK_ADR),
    ('CLEAR_TAB', TPA$_EXIT, , SMG$K_CLEAR_TAB, SMG$$MASK_ADR),
    ('CR_GRAPHIC', TPA$_EXIT, , SMG$K_CR_GRAPHIC, SMG$$MASK_ADR),
    ('CROSS_CHAR', TPA$_EXIT, , SMG$K_CROSS_CHAR, SMG$$MASK_ADR),
    ('CURSOR_DOWN', TPA$_EXIT, , SMG$K_CURSOR_DOWN, SMG$$MASK_ADR),
    ('CURSOR_LEFT', TPA$_EXIT, , SMG$K_CURSOR_LEFT, SMG$$MASK_ADR),
    ('CURSOR_NEXT_LINE', TPA$_EXIT, , SMG$K_CURSOR_NEXT_LINE, SMG$$MASK_ADR),
    ('CURSOR_POSITION_REPORT', TPA$_EXIT, , SMG$K_CURSOR_POSITION_REPORT, SMG$$MASK_ADR),
    ('CURSOR_PRECEEDING_LINE', TPA$_EXIT, , SMG$K_CURSOR_PRECEEDING_LINE, SMG$$MASK_ADR),
    ('CURSOR_RIGHT', TPA$_EXIT, , SMG$K_CURSOR_RIGHT, SMG$$MASK_ADR),
    ('CURSOR_UP', TPA$_EXIT, , SMG$K_CURSOR_UP, SMG$$MASK_ADR),
    ('DARK_SCREEN', TPA$_EXIT, , SMG$K_DARK_SCREEN, SMG$$MASK_ADR),
    ('DELETE_CHAR', TPA$_EXIT, , SMG$K_DELETE_CHAR, SMG$$MASK_ADR),
    ('DELETE_LINE', TPA$_EXIT, , SMG$K_DELETE_LINE, SMG$$MASK_ADR),
    ('DEVICE_ATTRIBUTES', TPA$_EXIT, , SMG$K_DEVICE_ATTRIBUTES, SMG$$MASK_ADR),
    ('DOUBLE_HIGH_BOTTOM', TPA$_EXIT, , SMG$K_DOUBLE_HIGH_BOTTOM, SMG$$MASK_ADR),
    ('DOUBLE_HIGH_TOP', TPA$_EXIT, , SMG$K_DOUBLE_HIGH_TOP, SMG$$MASK_ADR),
    ('DOUBLE_WIDE', TPA$_EXIT, , SMG$K_DOUBLE_WIDE, SMG$$MASK_ADR),
    ('DUPLICATE', TPA$_EXIT, , SMG$K_DUPLICATE, SMG$$MASK_ADR),
    ('END_ALTERNATE_CHAR', TPA$_EXIT, , SMG$K_END_ALTERNATE_CHAR, SMG$$MASK_ADR),
    ('END_BLINK', TPA$_EXIT, , SMG$K_END_BLINK, SMG$$MASK_ADR),
    ('END_BOLD', TPA$_EXIT, , SMG$K_END_BOLD, SMG$$MASK_ADR),
    ('END_DELETE_MODE', TPA$_EXIT, , SMG$K_END_DELETE_MODE, SMG$$MASK_ADR),
    ('END_INSERT_MODE', TPA$_EXIT, , SMG$K_END_INSERT_MODE, SMG$$MASK_ADR),
    ('END_LINE_DRAWING_CHAR', TPA$_EXIT, , SMG$K_END_LINE_DRAWING_CHAR, SMG$$MASK_ADR),
    ('END_REVERSE', TPA$_EXIT, , SMG$K_END_REVERSE, SMG$$MASK_ADR),
    ('END_UNDERSCORE', TPA$_EXIT, , SMG$K_END_UNDERSCORE, SMG$$MASK_ADR),
    ('ERASE_TO_END_DISPLAY', TPA$_EXIT, , SMG$K_ERASE_TO_END_DISPLAY, SMG$$MASK_ADR),
    ('ERASE_TO_END_LINE', TPA$_EXIT, , SMG$K_ERASE_TO_END_LINE, SMG$$MASK_ADR),
    ('ERASE_WHOLE_DISPLAY', TPA$_EXIT, , SMG$K_ERASE_WHOLE_DISPLAY, SMG$$MASK_ADR),
    ('ERASE_WHOLE_LINE', TPA$_EXIT, , SMG$K_ERASE_WHOLE_LINE, SMG$$MASK_ADR),
    ('FF_GRAPHIC', TPA$_EXIT, , SMG$K_FF_GRAPHIC, SMG$$MASK_ADR),
    ('HOME', TPA$_EXIT, , SMG$K_HOME, SMG$$MASK_ADR),
    ('HORIZONTAL_BAR', TPA$_EXIT, , SMG$K_HORIZONTAL_BAR, SMG$$MASK_ADR),
    ('HT_GRAPHIC', TPA$_EXIT, , SMG$K_HT_GRAPHIC, SMG$$MASK_ADR),
    ('INDEX', TPA$_EXIT, , SMG$K_INDEX, SMG$$MASK_ADR),
    ('INIT_STRING', TPA$_EXIT, , SMG$K_INIT_STRING, SMG$$MASK_ADR),
    ('INSERT_CHAR', TPA$_EXIT, , SMG$K_INSERT_CHAR, SMG$$MASK_ADR),
    ('INSERT_LINE', TPA$_EXIT, , SMG$K_INSERT_LINE, SMG$$MASK_ADR),
    ('INSERT_PAD', TPA$_EXIT, , SMG$K_INSERT_PAD, SMG$$MASK_ADR),
    ('KEY_0', TPA$_EXIT, , SMG$K_KEY_0, SMG$$MASK_ADR),
    ('KEY_1', TPA$_EXIT, , SMG$K_KEY_1, SMG$$MASK_ADR),
    ('KEY_2', TPA$_EXIT, , SMG$K_KEY_2, SMG$$MASK_ADR),
    ('KEY_3', TPA$_EXIT, , SMG$K_KEY_3, SMG$$MASK_ADR),
    ('KEY_4', TPA$_EXIT, , SMG$K_KEY_4, SMG$$MASK_ADR),
    ('KEY_5', TPA$_EXIT, , SMG$K_KEY_5, SMG$$MASK_ADR),
    ('KEY_6', TPA$_EXIT, , SMG$K_KEY_6, SMG$$MASK_ADR),
    ('KEY_7', TPA$_EXIT, , SMG$K_KEY_7, SMG$$MASK_ADR),
    ('KEY_8', TPA$_EXIT, , SMG$K_KEY_8, SMG$$MASK_ADR),
    ('KEY_9', TPA$_EXIT, , SMG$K_KEY_9, SMG$$MASK_ADR),
    ('KEY_BACKSPACE', TPA$_EXIT, , SMG$K_KEY_BACKSPACE, SMG$$MASK_ADR),
    ('KEY_COMMA', TPA$_EXIT, , SMG$K_KEY_COMMA, SMG$$MASK_ADR),
    ('KEY_DOWN_ARROW', TPA$_EXIT, , SMG$K_KEY_DOWN_ARROW, SMG$$MASK_ADR),
    ('KEY_E1', TPA$_EXIT, , SMG$K_KEY_E1, SMG$$MASK_ADR),
    ('KEY_E2', TPA$_EXIT, , SMG$K_KEY_E2, SMG$$MASK_ADR),
    ('KEY_E3', TPA$_EXIT, , SMG$K_KEY_E3, SMG$$MASK_ADR),
    ('KEY_E4', TPA$_EXIT, , SMG$K_KEY_E4, SMG$$MASK_ADR),
    ('KEY_E5', TPA$_EXIT, , SMG$K_KEY_E5, SMG$$MASK_ADR),
    ('KEY_E6', TPA$_EXIT, , SMG$K_KEY_E6, SMG$$MASK_ADR),
    ('KEY_ENTER', TPA$_EXIT, , SMG$K_KEY_ENTER, SMG$$MASK_ADR),
    ('KEY_F1', TPA$_EXIT, , SMG$K_KEY_F1, SMG$$MASK_ADR),
    ('KEY_F2', TPA$_EXIT, , SMG$K_KEY_F2, SMG$$MASK_ADR),
    ('KEY_F3', TPA$_EXIT, , SMG$K_KEY_F3, SMG$$MASK_ADR),
    ('KEY_F4', TPA$_EXIT, , SMG$K_KEY_F4, SMG$$MASK_ADR),
    ('KEY_F5', TPA$_EXIT, , SMG$K_KEY_F5, SMG$$MASK_ADR),
    ('KEY_F6', TPA$_EXIT, , SMG$K_KEY_F6, SMG$$MASK_ADR),
    ('KEY_F7', TPA$_EXIT, , SMG$K_KEY_F7, SMG$$MASK_ADR),
    ('KEY_F8', TPA$_EXIT, , SMG$K_KEY_F8, SMG$$MASK_ADR),
    ('KEY_F9', TPA$_EXIT, , SMG$K_KEY_F9, SMG$$MASK_ADR),
    ('KEY_F10', TPA$_EXIT, , SMG$K_KEY_F10, SMG$$MASK_ADR),
    ('KEY_F11', TPA$_EXIT, , SMG$K_KEY_F11, SMG$$MASK_ADR),
    ('KEY_F12', TPA$_EXIT, , SMG$K_KEY_F12, SMG$$MASK_ADR),
    ('KEY_F13', TPA$_EXIT, , SMG$K_KEY_F13, SMG$$MASK_ADR),
    ('KEY_F14', TPA$_EXIT, , SMG$K_KEY_F14, SMG$$MASK_ADR),
    ('KEY_F15', TPA$_EXIT, , SMG$K_KEY_F15, SMG$$MASK_ADR),
    ('KEY_F16', TPA$_EXIT, , SMG$K_KEY_F16, SMG$$MASK_ADR),
    ('KEY_F17', TPA$_EXIT, , SMG$K_KEY_F17, SMG$$MASK_ADR),
    ('KEY_F18', TPA$_EXIT, , SMG$K_KEY_F18, SMG$$MASK_ADR),
    ('KEY_F19', TPA$_EXIT, , SMG$K_KEY_F19, SMG$$MASK_ADR),
    ('KEY_F20', TPA$_EXIT, , SMG$K_KEY_F20, SMG$$MASK_ADR),
    ('KEY_LEFT_ARROW', TPA$_EXIT, , SMG$K_KEY_LEFT_ARROW, SMG$$MASK_ADR),
    ('KEY_MINUS', TPA$_EXIT, , SMG$K_KEY_MINUS, SMG$$MASK_ADR),
    ('KEY_PERIOD', TPA$_EXIT, , SMG$K_KEY_PERIOD, SMG$$MASK_ADR),
    ('KEY_PF1', TPA$_EXIT, , SMG$K_KEY_PF1, SMG$$MASK_ADR),
    ('KEY_PF2', TPA$_EXIT, , SMG$K_KEY_PF2, SMG$$MASK_ADR),
    ('KEY_PF3', TPA$_EXIT, , SMG$K_KEY_PF3, SMG$$MASK_ADR),
    ('KEY_PF4', TPA$_EXIT, , SMG$K_KEY_PF4, SMG$$MASK_ADR),
    ('KEY_RIGHT_ARROW', TPA$_EXIT, , SMG$K_KEY_RIGHT_ARROW, SMG$$MASK_ADR),
    ('KEY_UP_ARROW', TPA$_EXIT, , SMG$K_KEY_UP_ARROW, SMG$$MASK_ADR),
    ('LABEL_F1', TPA$_EXIT, , SMG$K_LABEL_F1, SMG$$MASK_ADR),
    ('LABEL_F2', TPA$_EXIT, , SMG$K_LABEL_F2, SMG$$MASK_ADR),
    ('LABEL_F3', TPA$_EXIT, , SMG$K_LABEL_F3, SMG$$MASK_ADR),
    ('LABEL_F4', TPA$_EXIT, , SMG$K_LABEL_F4, SMG$$MASK_ADR),
    ('LABEL_F5', TPA$_EXIT, , SMG$K_LABEL_F5, SMG$$MASK_ADR),
    ('LABEL_F6', TPA$_EXIT, , SMG$K_LABEL_F6, SMG$$MASK_ADR),
    ('LABEL_F7', TPA$_EXIT, , SMG$K_LABEL_F7, SMG$$MASK_ADR),
    ('LABEL_F8', TPA$_EXIT, , SMG$K_LABEL_F8, SMG$$MASK_ADR),
    ('LABEL_F9', TPA$_EXIT, , SMG$K_LABEL_F9, SMG$$MASK_ADR),
    ('LABEL_F10', TPA$_EXIT, , SMG$K_LABEL_F10, SMG$$MASK_ADR),
    ('LABEL_F11', TPA$_EXIT, , SMG$K_LABEL_F11, SMG$$MASK_ADR),
    ('LABEL_F12', TPA$_EXIT, , SMG$K_LABEL_F12, SMG$$MASK_ADR),
    ('LABEL_F13', TPA$_EXIT, , SMG$K_LABEL_F13, SMG$$MASK_ADR),
    ('LABEL_F14', TPA$_EXIT, , SMG$K_LABEL_F14, SMG$$MASK_ADR),
    ('LABEL_F15', TPA$_EXIT, , SMG$K_LABEL_F15, SMG$$MASK_ADR),
    ('LABEL_F16', TPA$_EXIT, , SMG$K_LABEL_F16, SMG$$MASK_ADR),
    ('LABEL_F17', TPA$_EXIT, , SMG$K_LABEL_F17, SMG$$MASK_ADR),
    ('LABEL_F18', TPA$_EXIT, , SMG$K_LABEL_F18, SMG$$MASK_ADR),
    ('LABEL_F19', TPA$_EXIT, , SMG$K_LABEL_F19, SMG$$MASK_ADR),
    ('LABEL_F20', TPA$_EXIT, , SMG$K_LABEL_F20, SMG$$MASK_ADR),
    ('LEFT_T_CHAR', TPA$_EXIT, , SMG$K_LEFT_T_CHAR, SMG$$MASK_ADR),
    ('LF_GRAPHIC', TPA$_EXIT, , SMG$K_LF_GRAPHIC, SMG$$MASK_ADR),
    ('LIGHT_SCREEN', TPA$_EXIT, , SMG$K_LIGHT_SCREEN, SMG$$MASK_ADR),
    ('LOWER_LEFT_CORNER', TPA$_EXIT, , SMG$K_LOWER_LEFT_CORNER, SMG$$MASK_ADR),
    ('LOWER_RIGHT_CORNER', TPA$_EXIT, , SMG$K_LOWER_RIGHT_CORNER, SMG$$MASK_ADR),
    ('NAME', TPA$_EXIT, , SMG$K_NAME, SMG$$MASK_ADR),
    ('NEWLINE_CHAR', TPA$_EXIT, , SMG$K_NEWLINE_CHAR, SMG$$MASK_ADR),
    ('PAD_CHAR', TPA$_EXIT, , SMG$K_PAD_CHAR, SMG$$MASK_ADR),
    ('REQUEST_CURSOR_POSITION', TPA$_EXIT, , SMG$K_REQUEST_CURSOR_POSITION, SMG$$MASK_ADR),
    ('RESTORE_CURSOR', TPA$_EXIT, , SMG$K_RESTORE_CURSOR, SMG$$MASK_ADR),
    ('REVERSE_INDEX', TPA$_EXIT, , SMG$K_REVERSE_INDEX, SMG$$MASK_ADR),
    ('RIGHT_T_CHAR', TPA$_EXIT, , SMG$K_RIGHT_T_CHAR, SMG$$MASK_ADR),
    ('SAVE_CURSOR', TPA$_EXIT, , SMG$K_SAVE_CURSOR, SMG$$MASK_ADR),
    ('SCROLL_FORWARD', TPA$_EXIT, , SMG$K_SCROLL_FORWARD, SMG$$MASK_ADR),
    ('SCROLL_REVERSE', TPA$_EXIT, , SMG$K_SCROLL_REVERSE, SMG$$MASK_ADR),
    ('SEL_ERASE_TO_END_DISPLAY', TPA$_EXIT, , SMG$K_SEL_ERASE_TO_END_DISPLAY, SMG$$MASK_ADR),
    ('SEL_ERASE_TO_END_LINE', TPA$_EXIT, , SMG$K_SEL_ERASE_TO_END_LINE, SMG$$MASK_ADR),
    ('SEL_ERASE_WHOLE_DISPLAY', TPA$_EXIT, , SMG$K_SEL_ERASE_WHOLE_DISPLAY, SMG$$MASK_ADR),
    ('SEL_ERASE_WHOLE_LINE', TPA$_EXIT, , SMG$K_SEL_ERASE_WHOLE_LINE, SMG$$MASK_ADR),
    ('SET_APPLICATION_KEYPAD', TPA$_EXIT, , SMG$K_SET_APPLICATION_KEYPAD, SMG$$MASK_ADR),
    ('SET_CHAR_NOT_SEL_ERASE', TPA$_EXIT, , SMG$K_SET_CHAR_NOT_SEL_ERASE, SMG$$MASK_ADR),
    ('SET_CHAR_SEL_ERASE', TPA$_EXIT, , SMG$K_SET_CHAR_SEL_ERASE, SMG$$MASK_ADR),
    ('SET_CURSOR_ABS', TPA$_EXIT, , SMG$K_SET_CURSOR_ABS, SMG$$MASK_ADR),
    ('SET_NUMERIC_KEYPAD', TPA$_EXIT, , SMG$K_SET_NUMERIC_KEYPAD, SMG$$MASK_ADR),
    ('SET_SCROLL_REGION', TPA$_EXIT, , SMG$K_SET_SCROLL_REGION, SMG$$MASK_ADR),
    ('SET_TAB', TPA$_EXIT, , SMG$K_SET_TAB, SMG$$MASK_ADR),
    ('SINGLE_HIGH', TPA$_EXIT, , SMG$K_SINGLE_HIGH, SMG$$MASK_ADR),
    ('TAB_CHAR', TPA$_EXIT, , SMG$K_TAB_CHAR, SMG$$MASK_ADR),
    ('TOP_T_CHAR', TPA$_EXIT, , SMG$K_TOP_T_CHAR, SMG$$MASK_ADR),
    ('TRUNCATION_ICON', TPA$_EXIT, , SMG$K_TRUNCATION_ICON, SMG$$MASK_ADR),
    ('UNDERLINE_CHAR', TPA$_EXIT, , SMG$K_UNDERLINE_CHAR, SMG$$MASK_ADR),
    ('UPPER_LEFT_CORNER', TPA$_EXIT, , SMG$K_UPPER_LEFT_CORNER, SMG$$MASK_ADR),
    ('UPPER_RIGHT_CORNER', TPA$_EXIT, , SMG$K_UPPER_RIGHT_CORNER, SMG$$MASK_ADR),
    ('VERTICAL_BAR', TPA$_EXIT, , SMG$K_VERTICAL_BAR, SMG$$MASK_ADR),
    ('VT_GRAPHIC', TPA$_EXIT, , SMG$K_VT_GRAPHIC, SMG$$MASK_ADR),
    ('WIDTH_NARROW', TPA$_EXIT, , SMG$K_WIDTH_NARROW, SMG$$MASK_ADR),
    ('WIDTH_WIDE', TPA$_EXIT, , SMG$K_WIDTH_WIDE, SMG$$MASK_ADR),
    ('PRIVATE_STR_1', TPA$_EXIT, , SMG$K_PRIVATE_STR_1, SMG$$MASK_ADR),
    ('PRIVATE_STR_2', TPA$_EXIT, , SMG$K_PRIVATE_STR_2, SMG$$MASK_ADR),
    ('PRIVATE_STR_3', TPA$_EXIT, , SMG$K_PRIVATE_STR_3, SMG$$MASK_ADR),
    ('PRIVATE_STR_4', TPA$_EXIT, , SMG$K_PRIVATE_STR_4, SMG$$MASK_ADR),
    ('PRIVATE_STR_5', TPA$_EXIT, , SMG$K_PRIVATE_STR_5, SMG$$MASK_ADR),
    ('PRIVATE_STR_6', TPA$_EXIT, , SMG$K_PRIVATE_STR_6, SMG$$MASK_ADR),
    ('PRIVATE_STR_7', TPA$_EXIT, , SMG$K_PRIVATE_STR_7, SMG$$MASK_ADR),
    ('PRIVATE_STR_8', TPA$_EXIT, , SMG$K_PRIVATE_STR_8, SMG$$MASK_ADR),
    ('PRIVATE_STR_9', TPA$_EXIT, , SMG$K_PRIVATE_STR_9, SMG$$MASK_ADR),
    ('PRIVATE_STR_10', TPA$_EXIT, , SMG$K_PRIVATE_STR_10, SMG$$MASK_ADR),
    (TPA$_LAMBDA, TPA$_FAIL)
    );

!+
! Found a name, now look for the value.  Skip over the intervening
! equals sign.  (If we get to '=', then we also have a capability
! name/number to remember.)
!-

$STATE (EQUALS_STRING,
    ((END_OF_LINE), EQUALS_STRING, SMG$$NEXT_RECORD),
    ('=', STRING_CAP_VALUE, SMG$$STORE_CAP_MASK),
    (TPA$_SYMBOL, , SMG$$SYNTAX_ERROR),
    (TPA$_ANY, , SMG$$SYNTAX_ERROR)
    );

!+
! We have found a capability name, now we need to decipher its value.
! We found a string capability name so this better be a string value.
!-

$STATE (STRING_CAP_VALUE,
    ((END_OF_LINE), STRING_CAP_VALUE, SMG$$NEXT_RECORD),
    ((STRING_CAP), BEGIN_SCAN),
    (TPA$_SYMBOL, , SMG$$SYNTAX_ERROR),
    (TPA$_ANY, , SMG$$SYNTAX_ERROR)
    );

$STATE (COMMA,
    (',', TPA$_EXIT, SMG$$BLANKS_OFF),
    (TPA$_BLANK, COMMA, SMG$$BLANKS_OFF),
    ((END_OF_LINE), TPA$_EXIT, SMG$$NEXT_RECORD),
    (TPA$_ANY, , SMG$$SYNTAX_ERROR)
    );

!+
! A string capability requires further parsing.  There may be an embedded
! special character, an FAO call, or arithmetic.  A matching quote indicates
! the end of the string value, which should be stored in TERMTABLE.EXE.
!-

 $STATE (STRING_CAP,
    (SINGLE_QUOTE, SINGLE_QUOTE_STRING, SMG$$BLANKS_ON),
    (DOUBLE_QUOTE, DOUBLE_QUOTE_STRING, SMG$$BLANKS_ON),
    (TPA$_ANY, TPA$_FAIL)
    );

$STATE (SINGLE_QUOTE_STRING,
    ((UNDERSCORE), SINGLE_QUOTE_STRING),
    ('$', SINGLE_QUOTE_STRING, CONVERT_ESCAPE),
    ((CARROT), SINGLE_QUOTE_STRING),
    ((FAO_STRING), SINGLE_QUOTE_STRING),
    ((ARITH_CAP), SINGLE_QUOTE_STRING),
    (SINGLE_QUOTE, COMMA, SMG$$COPY_CAP),
    (TPA$_BLANK, SINGLE_QUOTE_STRING, SMG$$SAVE_TOKEN_STRING),
    (DOUBLE_QUOTE, , SMG$$SYNTAX_ERROR),
    (TPA$_ANY, SINGLE_QUOTE_STRING, SMG$$SAVE_TOKEN_STRING),
    (TPA$_LAMBDA, TPA$_EXIT)
    );

$STATE (DOUBLE_QUOTE_STRING,
    ((UNDERSCORE), DOUBLE_QUOTE_STRING),
    ('$', DOUBLE_QUOTE_STRING, CONVERT_ESCAPE),
    ((CARROT), DOUBLE_QUOTE_STRING),
    ((FAO_STRING), DOUBLE_QUOTE_STRING),
    ((ARITH_CAP), DOUBLE_QUOTE_STRING),
    (DOUBLE_QUOTE, COMMA, SMG$$COPY_CAP),
    (TPA$_BLANK, DOUBLE_QUOTE_STRING, SMG$$SAVE_TOKEN_STRING),
    (SINGLE_QUOTE, , SMG$$SYNTAX_ERROR),
    (TPA$_ANY, DOUBLE_QUOTE_STRING, SMG$$SAVE_TOKEN_STRING),
    (TPA$_LAMBDA, TPA$_EXIT)
    );

!+
! Underscore is used to insert special characters into a string as 
! normal text.  If this underscore is followed by a special character,
! skip over it and just store the special character.
!-

$STATE (UNDERSCORE,
    ('_', UNDERSCORE2),
    (TPA$_LAMBDA, TPA$_FAIL)
    );

$STATE (UNDERSCORE2,
    ('$', TPA$_EXIT, INSERT_DOLLAR),
    ('^', TPA$_EXIT, INSERT_CARROT),
    ('!', TPA$_EXIT, INSERT_EXCLAMATION),
    ('(', TPA$_EXIT, INSERT_PARENTHESIS),
    (TPA$_LAMBDA, TPA$_FAIL)
    );

!+
! If we find a ^, advance to the next character and call the conversion
! routine.  The conversion routine will complain if this is a control
! sequence we don't know about.
!-

$STATE (CARROT,
    ('^', CONTROL_CHAR),
    (TPA$_LAMBDA, TPA$_FAIL)
    );

$STATE (CONTROL_CHAR,
    (TPA$_ANY, TPA$_EXIT, CONVERT_CONTROL)
    );

!+
! Check for a FAO directive.  Make sure it's one we understand.
!-
$STATE (FAO_STRING,
    ('!', , SMG$$SAVE_TOKEN_STRING),
    (TPA$_LAMBDA, TPA$_FAIL)
    );

$STATE (,
    ('U', , SMG$$SAVE_TOKEN_STRING),
    (TPA$_SYMBOL, TPA$_FAIL, INVALID_DIRECTIVE),
    (TPA$_ANY, TPA$_FAIL, INVALID_DIRECTIVE)
    );

$STATE (,
    ('L', TPA$_EXIT, SMG$$SAVE_TOKEN_STRING, SMG$K_FAO_STRING, SMG$$MASK_ADR),
    (TPA$_SYMBOL, TPA$_FAIL, INVALID_DIRECTIVE),
    (TPA$_ANY, TPA$_FAIL, INVALID_DIRECTIVE)
    );

!+
! Parse arithmetic string.  We can't complete arithmetic processing until 
! run-time, but here we pre-compile as much as possible.  Arithmetic
! expressions are stored as number, op, number, op, number ... etc.
!-

$STATE (ARITH_CAP,
    (LEFT_PAREN, ARITH_CAP2, INIT_ARITH_CAP),
    (TPA$_BLANK, ARITH_CAP),
    (TPA$_LAMBDA, TPA$_FAIL)
    );

$STATE (ARITH_CAP2,
    ((OPERAND), TPA$_EXIT),		! errors handled in OPERAND
    (TPA$_LAMBDA, TPA$_FAIL)		! return w/out consuming next token
    );

$STATE (OPERATOR,
    ('+', OPERAND, , SMG$K_ADD, SMG$$MASK_ADR),
    ('-', OPERAND, , SMG$K_SUBTRACT, SMG$$MASK_ADR),
    ('*', OPERAND, , SMG$K_MULTIPLY, SMG$$MASK_ADR),
    ('/', OPERAND, , SMG$K_DIVIDE, SMG$$MASK_ADR),
    (RIGHT_PAREN, TPA$_EXIT, END_ARITH_CAP),
    (TPA$_ANY, , EXPRESSION_ERROR)
    );

$STATE (OPERAND,
    (TPA$_DECIMAL, OPERATOR, STORE_OPERAND),
    ((SUBSTITUTION), OPERATOR),
    (TPA$_SYMBOL, , EXPRESSION_ERROR),
    (TPA$_ANY, , EXPRESSION_ERROR)
    );

$STATE (SUBSTITUTION,
    ('%'),
    (TPA$_LAMBDA, TPA$_FAIL)
    );

    ! % should be followed by a number 
$STATE (,
    (TPA$_DECIMAL, TPA$_EXIT, STORE_SUBSTITUTION),
    (TPA$_ANY, , EXPRESSION_ERROR)
    );



%SBTTL 'CONVERT_CONTROL - Convert ^ to control character'
ROUTINE CONVERT_CONTROL =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Stores a control character in the current capability string in
!	TERMTABLE.EXE.
!
! CALLING SEQUENCE:
!
! 	status = CONVERT_CONTROL ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN
    BUILTIN
	CALLG,
	AP;
    MAP 
	AP : REF BLOCK [,BYTE];
    BIND
	CAP_PTRS = .AP [PARAM_L_CUR_TERM_DEF] : VECTOR [,WORD];
    LOCAL
	CONTROL_CHAR : BYTE,		! char following ctrl
	MOVE_CHAR : BYTE;		! code to place in cap string

!+
! The NAME capability should have preceeded this.  Complain if it
! didn't.
!-

    IF CAP_PTRS EQL 0
    THEN
	SIGNAL_STOP (SMG$_MISTERNAM);

!+
! Control must be followed by a valid character in order to constitute
! a control code.  The character can be shifted or not (lower or upper
! case).  
! Since we have already seen a control character, we can translate on
! the second character in the control string.
!-

    CONTROL_CHAR = .(.AP [TPA$L_TOKENPTR]) <0,8>;
!+
! A control character is in the range 00 - 1F (hex) but is expressed as
! 40 - 5F (hex).  Strip off extra bit to get the control character.
!-

    MOVE_CHAR = .CONTROL_CHAR AND NOT (%X'40');

!+
! We now have the byte which must be moved into the capability string.
! This may not be the first byte of the string - check for saved characters
! which have not been copied yet, and append in the control code.
!-

    CALLG (.AP, SMG$$FLUSH_SAVED_BUFFER);	! copy saved string
					
    AP [PARAM_L_SAVED_TOKENCNT] = 1;
    AP [PARAM_L_SAVED_TOKENSTR] = MOVE_CHAR;	! control char is now 'saved'
						
    CALLG (.AP, SMG$$FLUSH_SAVED_BUFFER);	! append control char

    RETURN (SS$_NORMAL);

    END;				! end of routine CONVERT_CONTROL

%SBTTL 'CONVERT_ESCAPE - Convert $ to escape character'
ROUTINE CONVERT_ESCAPE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Stores an escape character in the current capability string in
!	TERMTABLE.EXE.
!
! CALLING SEQUENCE:
!
! 	status = CONVERT_ESCAPE ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN
    BUILTIN
	CALLG,
	AP;
    MAP
	AP : REF BLOCK [,BYTE];
    LITERAL
	K_ESCAPE = %X'1B';
    BIND
	CAP_PTRS = .AP [PARAM_L_CUR_TERM_DEF] : VECTOR [,WORD];

!+
! The NAME capability should have preceeded this.  Complain if it didn't.
!-

    IF CAP_PTRS EQL 0
    THEN
	SIGNAL_STOP (SMG$_MISTERNAM);

!+
! Move an escape character into the capability string instead of
! the $.
!
! Part of the string may already be copied - append in this part so
! as not to overwrite it.  
!-

    CALLG (.AP, SMG$$FLUSH_SAVED_BUFFER);

!+
! Insert the escape character.
!-

    AP [PARAM_L_SAVED_TOKENCNT] = 1;
    AP [PARAM_L_SAVED_TOKENSTR] = UPLIT (BYTE (K_ESCAPE));
   					! escape now 'saved'
    CALLG (.AP, SMG$$FLUSH_SAVED_BUFFER);

    RETURN (SS$_NORMAL);

    END;				! end of routine CONVERT_ESCAPE

%SBTTL 'EXPRESSION_ERROR - Signal and expression error'
ROUTINE EXPRESSION_ERROR =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Signal that an invalid arithmetic expression was found.
!
! CALLING SEQUENCE:
!
!
! 	status = EXPRESSION_ERROR ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN
    BUILTIN
	AP;
    MAP
	AP : REF BLOCK [,BYTE];

    SIGNAL_STOP (SMG$_ERRAT_LIN,
		 3, .SMG$$CURRENT_LINE,
	 	 .AP [TPA$L_TOKENCNT],
		 .AP [TPA$L_TOKENPTR],
		 SMG$_INVEXP)

    END;				! end of routine EXPRESSION_ERROR

%SBTTL 'END_ARITH_CAP - End of arithmetic capability data'
ROUTINE END_ARITH_CAP =

!++
! FUNCTIONAL DESCRIPTION:
!
!	We have found the end of an arithmetic expression (a right
!	parenthesis).  An arithmetic expression should be terminated
!	by the encoded type SMG$K_STORE, indicating that the final
!	value has been computed.  
!
! CALLING SEQUENCE:
!
! 	status = END_ARITH_CAP ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN

    BUILTIN
	CALLG,
	AP;
    MAP
	AP : REF BLOCK [,BYTE];

!+
! Indicate end of computing.
!-

    AP [PARAM_L_SAVED_TOKENCNT] = 1;
    AP [PARAM_L_SAVED_TOKENSTR] = UPLIT (BYTE (SMG$K_STORE));

    CALLG (.AP, SMG$$FLUSH_ARITHMETIC);
					! move the data

    AP [TPA$V_BLANKS] = 1;		! look at blanks again

    RETURN (SS$_NORMAL);

    END;				! end of routine END_ARITH_CAP

%SBTTL 'INIT_ARITH_CAP - Initialize arithmetic capability data'
ROUTINE INIT_ARITH_CAP =

!++
! FUNCTIONAL DESCRIPTION:
!
!	We have found the beginning of an arithmetic expression (a left
!	parenthesis).  Before moving operands and operators into the data
!	area, initialize it as an arithmetic capability, ie. start with a
!	negative length and a type of SMG$K_ARITH_STRING.
!
! CALLING SEQUENCE:
!
! 	status = INIT_ARITH_CAP ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN

    BUILTIN
	CALLG,
	AP;
    MAP
	AP : REF BLOCK [,BYTE];

    LOCAL
	FIRST : INITIAL (0),		! flag to indicate start of string
	START_CAP_STRING;		! where to copy data
    MAP
	START_CAP_STRING : REF VECTOR [,BYTE,SIGNED];

    BIND
	CAP_PTRS = .AP [PARAM_L_CUR_TERM_DEF] : VECTOR [,WORD];

!+
! The NAME capability should have preceeded any arithmetic capability.
! Complain if it didn't.
!-

    IF CAP_PTRS EQL 0
    THEN
	SIGNAL_STOP (SMG$_MISTERNAM);

!+
! We may have copied some normal text before we encountered an
! arithmetic expression.  Find the start of the string, and make
! sure that there isn't some more saved text.
!-

    CALLG (.AP, SMG$$FLUSH_SAVED_BUFFER);    

    IF .CAP_PTRS [.AP [PARAM_L_CUR_CAP_NUMBER]] NEQ 0
    THEN
	BEGIN
	!+
	! Not start of the capability string.
	!-
	START_CAP_STRING = .AP [PARAM_L_CUR_TERM_DEF] +
			   .CAP_PTRS [.AP [PARAM_L_CUR_CAP_NUMBER]];
	END
    ELSE
	!+
	! First byte of capability string.  Set offset pointer.
	!-
	BEGIN
	FIRST = 1;
	START_CAP_STRING = .AP [PARAM_L_CUR_DATA_BYTE];
    	CAP_PTRS [.AP [PARAM_L_CUR_CAP_NUMBER]]  = .SMG$$DATA_OFFSET;
	SMG$$DATA_OFFSET = .SMG$$DATA_OFFSET + 2;
					! leave space for at least size, type
					! bytes
	END;

    IF .FIRST
    THEN
	AP [PARAM_L_CUR_DATA_BYTE] = .AP [PARAM_L_CUR_DATA_BYTE] + 2;
				! space for size & type bytes

!+
! If some other things preceeded this arithmetic expression, we need
! to move them over by 2 bytes to make room for a size and type.
!-
    IF NOT .FIRST 
    THEN
	BEGIN				! not first byte in capability
	LOCAL
	    TYPE;
	TYPE = .START_CAP_STRING [1];	! make this a longword

	IF .TYPE NEQ SMG$K_ARITH_STRING
	THEN
	    BEGIN			! first expression
	    !+
	    ! We don't allow mixing of FAO strings and arithmetic 
	    ! expressions.  We know the type isn't arithmetic, so
	    ! if the length is negative, there must be an FAO string.
	    !-
	    IF .START_CAP_STRING [0] LSS 0
	    THEN
	    	SIGNAL_STOP (SMG$_ERRAT_LIN,
			     3, .SMG$$CURRENT_LINE,
			     .AP [PARAM_L_SAVED_TOKENCNT],
			     .AP [PARAM_L_SAVED_TOKENSTR],
			     SMG$_SYNERR);

	    !+
	    ! Slide over text.
	    !-
	    CH$MOVE (.START_CAP_STRING [0] + 2,	! # chars + size, type bytes
	             START_CAP_STRING [0],	! from old location
		     START_CAP_STRING [2]);	! to new
						
	    !+
	    ! Need a negative size.  The size includes the data,
	    ! the size byte and the type byte.
	    !
	    ! Note that right now, the size of the normal text is the size of
	    ! the entire capability string.
	    !-
	    IF .START_CAP_STRING [0] GTR 0
	    THEN
	    	START_CAP_STRING [0] = -.START_CAP_STRING [0] - 4;
					! size + 2 size & type bytes

    	    AP [PARAM_L_CUR_DATA_BYTE] = .AP [PARAM_L_CUR_DATA_BYTE] + 2;
					! update next free byte
	    SMG$$DATA_OFFSET = .SMG$$DATA_OFFSET + 2;
					! update next offset
   	    END;			! first expression

	END				! not first byte in capability
    ELSE
    	START_CAP_STRING [0] = .START_CAP_STRING [0] - 2;
					! include size & type bytes for
					! arith in count


    START_CAP_STRING [1] = SMG$K_ARITH_STRING <0,8>;
					! set (or reset) as arith string

    AP [TPA$V_BLANKS] = 0;		! ignore blanks between ( )

    RETURN (SS$_NORMAL);

    END;				! end of routine INIT_ARITH_CAP

%SBTTL 'INSERT_CARROT - Insert a ^ in the capability string'
ROUTINE INSERT_CARROT =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Stores a ^ character in the current capability string in
!	TERMTABLE.EXE.
!
! CALLING SEQUENCE:
!
! 	status = INSERT_CARROT ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN

    BUILTIN
	CALLG,
	AP;
    MAP
	AP : REF BLOCK [,BYTE];

!+
! If this is not the NAME capability and we have no pointers set up
! for the terminal definition, then NAME was not the first capability
! in the definition.  Complain.
!-

    BEGIN
    BIND
	CAP_PTRS = .AP [PARAM_L_CUR_TERM_DEF] : VECTOR [,WORD];

    IF CAP_PTRS EQL 0
    THEN
	SIGNAL_STOP (SMG$_MISTERNAM);

!+
! Move the capability data.  The byte count is in the first byte and
! the actual data follows.
!
! Part of the string may already be copied - append in this part so
! as not to overwrite it.  (This can happen if escape or control are
! part of the sequence.)
!-

    CALLG (.AP, SMG$$FLUSH_SAVED_BUFFER);
				! copy saved string
    AP [PARAM_L_SAVED_TOKENCNT] = 1;
    AP [PARAM_L_SAVED_TOKENSTR] = UPLIT ('^');
				! carrot is now 'saved'
    CALLG (.AP, SMG$$FLUSH_SAVED_BUFFER);

    END;				! end of BINDs scope

    RETURN (SS$_NORMAL);

    END;				! end of routine INSERT_CARROT

%SBTTL 'INSERT_DOLLAR - Insert a $ into a capability string'
ROUTINE INSERT_DOLLAR =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Stores a $ character in the current capability string in
!	TERMTABLE.EXE.
!
! CALLING SEQUENCE:
!
! 	status = INSERT_DOLLAR ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN

    BUILTIN
	CALLG,
	AP;
    MAP
	AP : REF BLOCK [,BYTE];
    BIND
	CAP_PTRS = .AP [PARAM_L_CUR_TERM_DEF] : VECTOR [,WORD];

!+
! If this is not the NAME capability and we have no pointers set up
! for the terminal definition, then NAME was not the first capability
! in the definition.  Complain.
!-

    IF CAP_PTRS EQL 0
    THEN
	SIGNAL_STOP (SMG$_MISTERNAM);

!+
! Move the capability data.  The byte count is in the first byte and
! the actual data follows.
!
! Part of the string may already be copied - append in this part so
! as not to overwrite it.  (This can happen if escape or control are
! part of the sequence.)
!-

    CALLG (.AP, SMG$$FLUSH_SAVED_BUFFER);
				! copy saved string
    AP [PARAM_L_SAVED_TOKENCNT] = 1;
    AP [PARAM_L_SAVED_TOKENSTR] = UPLIT ('$');
				! $ is now 'saved'
    CALLG (.AP, SMG$$FLUSH_SAVED_BUFFER);
				! append $

    RETURN (SS$_NORMAL);

    END;				! end of routine INSERT_DOLLAR

%SBTTL 'INSERT_EXCLAMATION - Insert a ! into a capability string'
ROUTINE INSERT_EXCLAMATION =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Stores a ! character in the current capability string in
!	TERMTABLE.EXE.
!
! CALLING SEQUENCE:
!
! 	status = INSERT_EXCLAMATION ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN
    BUILTIN
	CALLG,
	AP;
    MAP
	AP : REF BLOCK [,BYTE];
    BIND
	CAP_PTRS = .AP [PARAM_L_CUR_TERM_DEF] : VECTOR [,WORD];

!+
! If this is not the NAME capability and we have no pointers set up
! for the terminal definition, then NAME was not the first capability
! in the definition.  Complain.
!-

    IF CAP_PTRS EQL 0
    THEN
	SIGNAL_STOP (SMG$_MISTERNAM);

!+
! Move the capability data.  The byte count is in the first byte and
! the actual data follows.
!
! Part of the string may already be copied - append in this part so
! as not to overwrite it.  (This can happen if escape or control are
! part of the sequence.)
!-

    CALLG (.AP, SMG$$FLUSH_SAVED_BUFFER);
				! copy saved buffer
    AP [PARAM_L_SAVED_TOKENCNT] = 1;
    AP [PARAM_L_SAVED_TOKENSTR] = UPLIT ('!');
				! exclamation is now 'saved'
    CALLG (.AP, SMG$$FLUSH_SAVED_BUFFER);
				! append !

    RETURN (SS$_NORMAL);

    END;				! end of routine INSERT_EXCLAMATION

%SBTTL 'INSERT_PARENTHESIS - Insert a ( into a capability string'
ROUTINE INSERT_PARENTHESIS =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Stores a ( character in the current capability string in
!	TERMTABLE.EXE.
!
! CALLING SEQUENCE:
!
! 	status = INSERT_PARENTHESIS ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN
    BUILTIN
	CALLG,
	AP;
    MAP
	AP : REF BLOCK [,BYTE];
    BIND
	CAP_PTRS = .AP [PARAM_L_CUR_TERM_DEF] : VECTOR [,WORD];

!+
! If this is not the NAME capability and we have no pointers set up
! for the terminal definition, then NAME was not the first capability
! in the definition.  Complain.
!-

    IF CAP_PTRS EQL 0
    THEN
	SIGNAL_STOP (SMG$_MISTERNAM);

!+
! Move the capability data.  The byte count is in the first byte and
! the actual data follows.
!
! Part of the string may already be copied - append in this part so
! as not to overwrite it.  (This can happen if escape or control are
! part of the sequence.)
!-

    CALLG (.AP, SMG$$FLUSH_SAVED_BUFFER);
				! copy saved string
    AP [PARAM_L_SAVED_TOKENCNT] = 1;
    AP [PARAM_L_SAVED_TOKENSTR] = UPLIT ('(');
				! ( is now saved
    CALLG (.AP, SMG$$FLUSH_SAVED_BUFFER);
				! append (

    RETURN (SS$_NORMAL);

    END;				! end of routine INSERT_PARENTHESIS

%SBTTL 'INVALID_DIRECTIVE - signal invalid directive error'
ROUTINE INVALID_DIRECTIVE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Following a !, we have found some directive we don't handle.
!	Signal an error.
!
! CALLING SEQUENCE:
!
!
! 	status = INVALID_DIRECTIVE ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN
    BUILTIN
	AP;
    MAP
	AP : REF BLOCK [,BYTE];

    SIGNAL_STOP (SMG$_ERRAT_LIN,
		 3, .SMG$$CURRENT_LINE,
	  	 .AP [TPA$L_TOKENCNT],
		 .AP [TPA$L_TOKENPTR],
		 SMG$_INVDIR)
    END;			! end of routine INVALID_DIRECTIVE

%SBTTL 'STORE_OPERAND - Store arithmetic operand'
ROUTINE STORE_OPERAND =

!++
! FUNCTIONAL DESCRIPTION:
!
!	We have just found an operand which we need to store in TERMTABLE.
!	We will also check to see if an operator was previously found and
!	needs to be stored.
!
! CALLING SEQUENCE:
!
!
! 	status = STORE_OPERAND ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN
    BUILTIN
	CALLG,
	AP;
    MAP
	AP : REF BLOCK [,BYTE];
    LOCAL
	COPY_BUFFER : VECTOR [7,BYTE]; ! construct bytes to copy here

    AP [PARAM_L_SAVED_TOKENCNT] = 6;   ! longword + type,size bytes
					
    COPY_BUFFER [0] = SMG$K_OPERAND<0,8>; ! type
    COPY_BUFFER [1] = 0;	
    CH$MOVE (4, AP [TPA$L_NUMBER], COPY_BUFFER [2]);
				! store binary operand

!+
! If this is the second operand, then we need to store an operator.
!-

    IF .SMG$$MASK_ADR NEQ 0
    THEN
	BEGIN
	COPY_BUFFER [6] = .SMG$$MASK_ADR;
	AP [PARAM_L_SAVED_TOKENCNT] = .AP [PARAM_L_SAVED_TOKENCNT] + 1;
	END;

    AP [PARAM_L_SAVED_TOKENSTR] = COPY_BUFFER;
    
    CALLG (.AP, SMG$$FLUSH_ARITHMETIC); ! write the buffer

    SMG$$MASK_ADR = 0;			! re-init operator

    RETURN (SS$_NORMAL);

    END;				! end of routine STORE_OPERAND

%SBTTL 'STORE_SUBSTITUTION - store substitution flag in arithmetic cap'
ROUTINE STORE_SUBSTITUTION =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Store an encoded flag indicating that a user argument must be
!	substituted into the expression at run-time.
!
! CALLING SEQUENCE:
!
!
! 	status = STORE_SUBSTITUTION ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN
    BUILTIN
	CALLG,
	AP;
    MAP
	AP : REF BLOCK [,BYTE];
    LOCAL
	COPY_BUFFER : VECTOR [3,BYTE];

    COPY_BUFFER [0] = SMG$K_SUBSTITUTE <0,8>;
    COPY_BUFFER [1] = .AP [TPA$L_NUMBER];
			! store decimal argument number as a byte
    AP [PARAM_L_SAVED_TOKENCNT] = 2;

!+
! See if there's a saved operator that needs to be inserted.
!-

    IF .SMG$$MASK_ADR NEQ 0
    THEN
	BEGIN
	COPY_BUFFER [2] = .SMG$$MASK_ADR;
	AP [PARAM_L_SAVED_TOKENCNT] = .AP [PARAM_L_SAVED_TOKENCNT] + 1;
	SMG$$MASK_ADR = 0;
	END;

    AP [PARAM_L_SAVED_TOKENSTR] = COPY_BUFFER;

    CALLG (.AP, SMG$$FLUSH_ARITHMETIC);
					! move buffer to data area
	
    RETURN (SS$_NORMAL);

    END;				! end of routine STORE_SUBSTITUTION

%SBTTL 'NOT_STRING - signal an unknown capbility name'
ROUTINE NOT_STRING =

!++
! FUNCTIONAL DESCRIPTION:
!
!	We just found a unknown capability name.  It could be a misspelling
!	or it could be a name misplaced under the wrong heading.  Signal an 
!	error.
!
! CALLING SEQUENCE:
!
!
! 	status = NOT_STRING ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	AP	Points to TPARSE parameter block
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	 SS$_NORMAL
!
! SIDE EFFECTS:
!
!--

    BEGIN
    BUILTIN
	AP;
    MAP
	AP : REF BLOCK [,BYTE];

    SIGNAL_STOP (SMG$_ERRAT_LIN,
		 3, .SMG$$CURRENT_LINE,
	  	 .AP [TPA$L_TOKENCNT],
		 .AP [TPA$L_TOKENPTR],
		 SMG$_NOTSTRCAP)
    END;			! end of routine NOT_STRING
!<BLF/PAGE>

END					! End of module SMG$STRING_TABLES

ELUDOM
