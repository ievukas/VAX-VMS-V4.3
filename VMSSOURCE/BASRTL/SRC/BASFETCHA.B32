MODULE BAS$FETCH_ADDR (				! Fetch address of array element
		IDENT = '1-004'			! File: BASFETCHA.B32 Edit: PLL1004
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC Language Support
!
! ABSTRACT:
!
!	This module calculates the address of a non-virtual array
!	element.  It is called by the compiled code for the LOC
!	function and for arrays passed as parameters.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: Pamela L. Levesque, CREATION DATE: 19-FEB-1982
!
! MODIFIED BY:
!
! 1-001	- Original.  PLL 19-Feb-1982
! 1-002 - Add support for decimal arrays.  This involves calculating the 
!	  size of elements in bytes (the length in the descriptor is the
!	  number of digits not including the sign), and using that length
!	  to calculate the linear index.  PLL 12-Mar-1982
! 1-003 - Offset for 1st index is 1, not 2.  PLL 19-Mar-1982
! 1-004 - Return address of descriptor for dynamic strings.  PLL 29-Mar-1982
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!    NONE
!
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$FETCH_ADDR;				! Fetch address of array element

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
    BAS$$STOP : NOVALUE;			! Signal fatal error

EXTERNAL LITERAL
    BAS$K_ARGDONMAT : UNSIGNED (8),
    BAS$K_NOTIMP : UNSIGNED (8),
    BAS$K_SUBOUTRAN : UNSIGNED (8),
    BAS$K_TOOFEWARG : UNSIGNED (8),
    BAS$K_TOOMANARG : UNSIGNED (8);



GLOBAL ROUTINE BAS$FETCH_ADDR (			! Fetch address of array element
	DESCRIP, 				! The descriptor
	INDEX1					! First index
    ) : =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Given a descriptor for the array and the indices, calculate
! 	the address of an element.  Take into account that this may
!	be a FORTRAN array.  This routine does not handle virtual 
! 	arrays.
!
! FORMAL PARAMETERS:
!
!	DESCRIP.rx.da	The descriptor of the array 
!	INDEX1.rl.v	The first index into the array.  More indicies
!			may follow this one in the calling sequence.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	The address of the element is returned
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER;

    LOCAL
	INDEX_VALUE,
	VALUE_LOCATION,
	MULTIPLIERS : REF VECTOR,
	BOUNDS : REF VECTOR,
	LOW_INDEX,
	HIGH_INDEX,
	INDEX_INCR,
	INDEX_NUMBER,
	VALUE_ADDR,
	LENGTH;

    MAP
	DESCRIP : REF BLOCK [8, BYTE];

!+
! Be sure the number of array subscripts matches the number of
! indicies given to us.
!-

    IF ((ACTUALCOUNT () - 1) NEQU .DESCRIP [DSC$B_DIMCT])
    THEN
	BEGIN

	IF ((ACTUALCOUNT () - 1) LSSU .DESCRIP [DSC$B_DIMCT])
	THEN
	    BAS$$STOP (BAS$K_TOOFEWARG)
	ELSE
	    BAS$$STOP (BAS$K_TOOMANARG);

	END;

!+
! The coefficients and bounds must be present.
!-

    IF ( NOT (.DESCRIP [DSC$V_FL_COEFF] AND .DESCRIP [DSC$V_FL_BOUNDS])) THEN BAS$$STOP (BAS$K_ARGDONMAT);

    MULTIPLIERS = DESCRIP [DSC$L_M1];
    BOUNDS = DESCRIP [DSC$L_M1] + (%UPVAL*.DESCRIP [DSC$B_DIMCT]);
!+
! Compute the lower and upper index numbers based on how the array
! is stored.
!-

    IF (.DESCRIP [DSC$V_FL_COLUMN])
    THEN
	BEGIN
	LOW_INDEX = .DESCRIP [DSC$B_DIMCT];
	HIGH_INDEX = 1;
	INDEX_INCR = -1;
	END
    ELSE
	BEGIN
	LOW_INDEX = 1;
	HIGH_INDEX = .DESCRIP [DSC$B_DIMCT];
	INDEX_INCR = 1;
	END;

    INDEX_NUMBER = .LOW_INDEX - .INDEX_INCR;
!+
! Recompute decimal length if necessary.
!-
    IF .DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
    THEN
	LENGTH = .DESCRIP [DSC$W_LENGTH]/2 + 1
    ELSE
	LENGTH = .DESCRIP [DSC$W_LENGTH];
!+
! Compute the linear index from the indices provided.
!-
    VALUE_LOCATION = 0;

    WHILE ((INDEX_NUMBER = .INDEX_NUMBER + .INDEX_INCR) NEQ (.HIGH_INDEX + .INDEX_INCR)) DO
	BEGIN
	INDEX_VALUE = ACTUALPARAMETER (.INDEX_NUMBER + 1);

	IF ((.INDEX_VALUE LSS .BOUNDS [(.INDEX_NUMBER - 1)*2])	!
	    OR (.INDEX_VALUE GTR .BOUNDS [((.INDEX_NUMBER - 1)*2) + 1]))
	THEN
	    BAS$$STOP (BAS$K_SUBOUTRAN);

	VALUE_LOCATION = (.VALUE_LOCATION*.MULTIPLIERS [.INDEX_NUMBER - 1]) + .INDEX_VALUE;
	END;

    VALUE_LOCATION = (.VALUE_LOCATION*.LENGTH) + .DESCRIP [DSC$A_A0];

!+
! Check for an array of descriptors.  Fetch the address from the pointer
! field of the descriptor if necessary.
!-

    IF (.DESCRIP [DSC$B_DTYPE] EQLU DSC$K_DTYPE_DSC)
    THEN
	BEGIN

	MAP
	    VALUE_LOCATION : REF BLOCK [8, BYTE];

	IF .VALUE_LOCATION [DSC$B_DTYPE] NEQ DSC$K_DTYPE_T
	THEN
	    VALUE_ADDR = .VALUE_LOCATION [DSC$A_POINTER]
	ELSE
	    VALUE_ADDR = .VALUE_LOCATION;
	END
    ELSE
	BEGIN
	VALUE_ADDR = .VALUE_LOCATION;
	END;


    IF (.DESCRIP [DSC$B_CLASS] NEQU DSC$K_CLASS_A) THEN BAS$$STOP (BAS$K_NOTIMP);

    RETURN .VALUE_ADDR;

    END;					! end of BAS$FETCH_ADDR

END						! end of module BAS$FETCH_ADDR

ELUDOM
