MODULE BAS$MOVE_ARRAY (				!
		IDENT = '1-020'		! File: BASMOVEAR.B32 Edit: MDL1020
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  BASIC-PLUS-2 Miscellaneous I/O
!
! ABSTRACT:
!
!	This module contains the routines called by compiled code
!	for the MOVE FROM and MOVE TO statements, when applied to
!	arrays.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 30-AUG-1979
!
! MODIFIED BY:
!
! 1-001	- Original.
! 1-002	- Version 001 was just a skeleton, code single-dimensioned
!	   numeric arrays moving TO the buffer, so we can see how
!	   the algorithms work.  JBS 31-AUG-1979
! 1-003	- Code DEST_NA.  JBS 06-SEP-1979
! 1-004	- Code SRC_SA.  JBS 10-SEP-1979
! 1-005	- Code the other effectors.  All coding is now complete.
!	   JBS 13-SEP-1979
! 1-006	- When initializing a string descriptor, be sure the pointer
!	   is zero.  JBS 18-SEP-1979
! 1-007	- When the source is a string array and a length is specified,
!	   always put the specified number of characters in the buffer.
!	   JBS 22-OCT-1979
! 1-008 - SRC_NA, SRC_SA, DEST_NA, and DEST_SA must access the array 
!	  in row major order.  PL 1-Jul-81
! 1-009 - Add support for records.  MOVE_ARRAY, SRC_SA, and DEST_SA
!	  have been modified for dtype Z.  PLL 26-Feb-82
! 1-010 - Add support for dynamically mapped arrays.  New entry points
!	  have been added, SRC_DSC and DEST_DSC.  PLL 2-Mar-82
! 1-011 - Add support for decimal arrays.  PLL 12-Mar-82
! 1-012 - Don't try to free value_descrip in SRC_DSC and DEST_DSC.
!	  Also, DEST_SA (and SRC_SA) should set the dtype of the src buffer to Z only
!	  if the array is dtype Z.  BAS$STORE_BFA requires the two data
!	  types to match.  PLL 19-Mar-1982
! 1-013 - Add support for multiply dimensioned arrays.  PLL 5-Apr-1982
! 1-014 - Fix CH$MOVE in DEST_NA.  PLL 4-May-1982
! 1-015 - Fix DEST_SA.  STR$COPY_R expects a descriptor for the destination,
!	  and this descriptor must be constructed for static string arrays.
!	  PLL 5-May-1982
! 1-016 - Fix DEST_SA again.  CH$MOVE updates destination pointer, not source
!	  pointer.  PLL 10-May-1982
! 1-017 - 1. Fix SRC_SA for virtual arrays - nulls are stripped off on a per
!	  element basis.  
! 	  2. Fix DEST_SA for virtual arrays - dest len. must reflect length 
!	  given in statement or be default string length.  
!	  3. Fix DEST_SA for arrays of RFAs or RECORDs - length found in
!	  descriptor must be used.  DG 25-Jan-1984
! 1-018 - Fix 1-017 (2).  By simply null-filling the rest of the virtual
!	  array element, the LEN function will work correctly.  DG 14-Feb-1984
! 1-019 - Fixed some bugs in SRC_SA:
!	  1. Virt arrays of RFAs or RECORDs must have their element length
!	  be a power of 2 (not found when looking in descriptor)
!	  2. Virt arrays of RFAs or RECORDs should not go thru the null 
!	  stripping procedure, again because the length in the descriptor is the
!	  actual element length.
!	  3. CH$COPY is used for virtual arrays (instead of CH$MOVE), so that
!	  if a LENGTH is specified and the element length is less, blank
!	  padding will be accomplished
! 1-020 - on a MOVE FROM to a static string array, if the length is less than
!	  then element length, we should blank fill.  MDL 12-Apr-1984
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:OTSLNK';				! Define linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$MOVE_ARRAY : NOVALUE,			! MOVE an array
    SRC_NA : CALL_CCB NOVALUE,			! Source is numeric array
    SRC_SA : CALL_CCB NOVALUE,			! Source is string array
    DEST_NA : CALL_CCB NOVALUE,			! Destination is numeric array
    DEST_SA : CALL_CCB NOVALUE,			! Destination is string array
    SRC_DSC : CALL_CCB NOVALUE,			! Source is descriptor
    DEST_DSC : CALL_CCB NOVALUE;		! Destination is descriptor

!
! INCLUDE FILES:
!

REQUIRE 'RTLML:OTSLUB';				! LUB definitions

REQUIRE 'RTLML:OTSISB';				! ISB definitions

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

LIBRARY 'RTLSTARLE';				! System symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$CB_GET : JSB_CB_GET NOVALUE,		! Load current CCB
    BAS$$STOP : NOVALUE,			! Signal fatal error
    BAS$$STOP_IO : NOVALUE,			! Signal fatal I/O error
    BAS$$WHOLE_VA_FETCH : NOVALUE,		! Fetch entire virtual array
    BAS$$WHOLE_VA_STORE : NOVALUE,		! Store entire virtual array
    LIB$FREE_VM,				! Dealloc memory
    LIB$GET_VM,					! Alloc memory
    STR$COPY_R;					! Copy a string by reference
!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_PROLOSSOR : UNSIGNED (8),		! Program lost, sorry
    BAS$K_MOVOVEBUF : UNSIGNED (8),		! MOVE overflows buffer
    BAS$K_NOTIMP : UNSIGNED (8);		! Not implemented


GLOBAL ROUTINE BAS$MOVE_ARRAY (			! MOVE an array
	SRC : REF BLOCK [8, BYTE],		! Source: buffer or array
	DEST : REF BLOCK [8, BYTE],		! Destination: array or buffer
	LEN					! Optional length, for strings
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Within a MOVE statement, move an array.  This routines decodes its
!	parameters to move either an array to the buffer, or the buffer
!	to an array.
!
! FORMAL PARAMETERS:
!
!	SRC.mq.r	The source, which has the form of either a static
!			string (the buffer) or an array.
!	DEST.mq.r	The destination, which has the other form.
!	LEN.rl.v	Optional length, used with strings.
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB, accessed using BAS$$CB_GET, points to the current
!			LUB.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!	Updates the buffer's address and count to reflect the movement
!	of the array.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    BUILTIN
	ACTUALCOUNT;

    LOCAL
	LENGTH;					! Passed length, or -1

    LENGTH = (IF (ACTUALCOUNT () GEQ 3) THEN .LEN ELSE -1);
!+
! Set up register CCB for error messages.
!-
    BAS$$CB_GET ();
!+
! If we are not doing I/O, or if the I/O is not a MOVE statement,
! then the compiled code has called this routine in the wrong context.
!-

    IF (.CCB EQLA 0) THEN BAS$$STOP (BAS$K_PROLOSSOR);

    IF ( NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_PROLOSSOR);

    IF (.CCB [ISB$B_STTM_TYPE] NEQ ISB$K_ST_TY_MOV) THEN BAS$$STOP_IO (BAS$K_PROLOSSOR);

!+
! Dispatch based on the class and data type of the source and destination
!-

    SELECTONE .SRC [DSC$B_CLASS] OF
	SET

	[DSC$K_CLASS_A, DSC$K_CLASS_BFA] :
	    BEGIN				! Source is array

	    IF (.DEST [DSC$B_CLASS] NEQ DSC$K_CLASS_S) THEN BAS$$STOP_IO (BAS$K_PROLOSSOR);

	    SELECTONE .SRC [DSC$B_DTYPE] OF
		SET

		[DSC$K_DTYPE_B, DSC$K_DTYPE_W, DSC$K_DTYPE_L, DSC$K_DTYPE_F,
		 DSC$K_DTYPE_D, DSC$K_DTYPE_G, DSC$K_DTYPE_H, DSC$K_DTYPE_P] :
		    BEGIN			! Source is numeric array
		    SRC_NA (.SRC, .DEST);
		    END;

		[DSC$K_DTYPE_T, DSC$K_DTYPE_Z] :
		    BEGIN			! Source is string array or record
		    SRC_SA (.SRC, .DEST, .LENGTH);
		    END;

	 	[DSC$K_DTYPE_DSC] :
		    BEGIN			! Source is descriptor
		    SRC_DSC (.SRC, .DEST, .LENGTH);
		    END;

		[OTHERWISE] :
		    BAS$$STOP_IO (BAS$K_PROLOSSOR);
		TES;

	    END;

	[DSC$K_CLASS_S] :
	    BEGIN				! Source is buffer

	    SELECTONE .DEST [DSC$B_CLASS] OF
		SET

		[DSC$K_CLASS_A, DSC$K_CLASS_BFA] :
		    BEGIN			! Destination is array

		    SELECTONE .DEST [DSC$B_DTYPE] OF
			SET

			[DSC$K_DTYPE_B, DSC$K_DTYPE_W, DSC$K_DTYPE_L,
			 DSC$K_DTYPE_F, DSC$K_DTYPE_D, DSC$K_DTYPE_G,
			 DSC$K_DTYPE_H, DSC$K_DTYPE_P] :
			    BEGIN		! Destination is numeric array
			    DEST_NA (.SRC, .DEST);
			    END;

			[DSC$K_DTYPE_T, DSC$K_DTYPE_Z] :
			    BEGIN		! Destination is string array
			    DEST_SA (.SRC, .DEST, .LENGTH);
			    END;

			[DSC$K_DTYPE_DSC] :
			    BEGIN		! Destination is descriptor
			    DEST_DSC (.SRC, .DEST, .LENGTH);
			    END; 

			[OTHERWISE] :
			    BAS$$STOP_IO (BAS$K_PROLOSSOR);
			TES;

		    END;

		[OTHERWISE] :
		    BAS$$STOP_IO (BAS$K_PROLOSSOR);
		TES;

	    END;

	[OTHERWISE] :
	    BAS$$STOP_IO (BAS$K_PROLOSSOR);
	TES;

    RETURN;
    END;					! end of BAS$MOVE_ARRAY


ROUTINE SRC_NA (				! MOVE a numeric array
	SRC : REF BLOCK [, BYTE],		! Source: array
	DEST : REF BLOCK [8, BYTE]		! Destination: buffer
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Within a MOVE statement, move a numeric array to the buffer.
!
! FORMAL PARAMETERS:
!
!	SRC.rx.da	The source, a numeric array.
!	DEST.mq.r	The destination, the I/O buffer.  It is updated to
!			reflect the array.
!
! IMPLICIT INPUTS:
!
!	CCB, which is used only to provide good error messages.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!	Updates the buffer's address and count to reflect the movement
!	of the array.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    LOCAL
	LEN;					! length of array elements
						! (needed for decimal)
!+
! The total number of bytes in the array must not be greater than the
! remaining length of the buffer.  If this is an array of numeric descriptors,
! SRC_DSC has already checked for the MOVE overflowing the buffer.
!-

    IF (.SRC [DSC$B_DTYPE] NEQ DSC$K_DTYPE_DSC) AND
       (.SRC [DSC$L_ARSIZE] GTRU .DEST [DSC$W_LENGTH])
    THEN
	 BAS$$STOP_IO (BAS$K_MOVOVEBUF);

!+
! A memory numeric array can be moved in one instruction.  A virtual array,
! however, must call the fetch routine.  A dynamically mapped numeric array
! is in memory but elements may not be stored contiguously.  Therefore if
! this is an array of descriptors, perform the move element by element.
!-

    IF .SRC [DSC$B_CLASS] EQL DSC$K_CLASS_A
    THEN
	BEGIN					! memory array
	IF .SRC [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC
	THEN
	    BEGIN				! dynamically mapped array
	    LOCAL
		END_ADDR;
	    END_ADDR = .SRC [DSC$A_POINTER] + .SRC [DSC$L_ARSIZE] - .SRC [DSC$W_LENGTH];
						! addr of last desc
	    INCR DSC_PTR FROM .SRC [DSC$A_POINTER] TO .END_ADDR
		BY .SRC [DSC$W_LENGTH] DO
		BEGIN
		MAP
		    DSC_PTR : REF BLOCK [8,BYTE];
		LEN = (IF .DSC_PTR [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
		       THEN (.DSC_PTR [DSC$W_LENGTH]/2 + 1)
		       ELSE .DSC_PTR [DSC$W_LENGTH]);
		DEST [DSC$A_POINTER] = CH$MOVE (.LEN, .DSC_PTR [DSC$A_POINTER],
		       .DEST [DSC$A_POINTER]);
		DEST [DSC$W_LENGTH] = .DEST [DSC$W_LENGTH] - .LEN;
		END;
	    END
	ELSE
	    BEGIN				! numeric array
	    LEN = (IF .SRC [DSC$B_DTYPE] EQL DSC$K_DTYPE_P 
		   THEN	(.SRC [DSC$W_LENGTH]/2 + 1) * (.SRC [DSC$L_ARSIZE]/ .SRC [DSC$W_LENGTH])
		   ELSE	.SRC [DSC$L_ARSIZE]);
	    DEST [DSC$A_POINTER] = CH$MOVE (.LEN, .SRC [DSC$A_POINTER],
		   .DEST [DSC$A_POINTER]);
	    DEST [DSC$W_LENGTH] = .DEST [DSC$W_LENGTH] - .LEN;
	    END;
	END
    ELSE
	BEGIN					! virtual array
	BAS$$WHOLE_VA_FETCH (.SRC, .DEST [DSC$A_POINTER]);
	LEN = (IF .SRC [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
	       THEN (.SRC [DSC$W_LENGTH]/2 + 1) * (.SRC [DSC$L_ARSIZE]/ .SRC [DSC$W_LENGTH])
	       ELSE .SRC [DSC$L_ARSIZE]);
	DEST [DSC$A_POINTER] = .DEST [DSC$A_POINTER] + .LEN;
	DEST [DSC$W_LENGTH] = .DEST [DSC$W_LENGTH] - .LEN;
	END;

    END;					! of SRC_NA

ROUTINE SRC_SA (				! MOVE a string array
	SRC : REF BLOCK [, BYTE],		! Source: array
	DEST : REF BLOCK [, BYTE],		! Destination: buffer
	LENGTH					! Limit on string size
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Within a MOVE statement, move a string array or record to the buffer.
!
! FORMAL PARAMETERS:
!
!	SRC.rx.da	The source, a string array or record.
!	DEST.mq.r	The destination, the I/O buffer.  It is updated to
!			reflect the array.
!	LENGTH.rl.v	-1 or limit of length of string to copy
!
! IMPLICIT INPUTS:
!
!	CCB, which is used only to provide good error messages.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!	Updates the buffer's address and count to reflect the movement
!	of the array.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    LOCAL
        POWER_OF_2: VECTOR [10, WORD]
	    !+
	    ! Only have to check up to 512 because the compiler
	    ! allocates virtual arrays so that they will not
	    ! cross block boundaries.
	    !-
	    INITIAL ( WORD(1,2,4,8,16,32,64,128,256,512) ),
	LEN;

!+
! Dynamic string arrays will be arrays of descriptors, so the pointer field
! must be used to get to the string.  The elements in a static string array
! will be the strings themselves.  In both cases do an element by element move
! in order to accomodate padding, etc. which may be necessary.  Virtual arrays
! must call the virtual array fetch routine.
!-

    IF .SRC [DSC$B_CLASS] EQL DSC$K_CLASS_A
    THEN
	BEGIN					
	!+
	! memory array
	!-
	IF .SRC [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC
	THEN
	    BEGIN		
	    !+
	    ! dynamic strings
	    !-
	    LOCAL				
	    	END_ADDR;			! addr of last elem of array

	    END_ADDR = .SRC [DSC$A_POINTER] + .SRC [DSC$L_ARSIZE] - .SRC [DSC$W_LENGTH];
	    !+
	    ! Loop thru array moving each element to buffer.
	    !-
	    INCR DSC_PTR FROM .SRC [DSC$A_POINTER] TO .END_ADDR BY .SRC [DSC$W_LENGTH] DO
	    	BEGIN

	    	MAP
	            DSC_PTR : REF BLOCK [8,BYTE];

	    	LEN = (IF .LENGTH LSS 0 THEN .DSC_PTR [DSC$W_LENGTH] ELSE .LENGTH);
						! dest length depends on if
						!  LENGTH parameter given
	    	IF .DEST [DSC$W_LENGTH] LSSU .LEN
	    	THEN 
	            BAS$$STOP_IO (BAS$K_MOVOVEBUF);
	    	DEST [DSC$A_POINTER] = CH$COPY (.DSC_PTR [DSC$W_LENGTH],
		    .DSC_PTR [DSC$A_POINTER], %C' ', .LEN,
		    .DEST [DSC$A_POINTER]);	! move string from array to
						!  buffer, blank padding if
						!  necessary
	    	DEST [DSC$W_LENGTH] = .DEST [DSC$W_LENGTH] - .LEN;
						! buffer len must be decreased	
						!  by amt moved so check can be
						!  done so that further moves
						!  will not overflow buffer
	    	END;
	    END
	ELSE
	    BEGIN				
	    !+
	    ! static strings or records
	    !-
	    LOCAL				
	    	END_ADDR;			! addr of last elem of array

	    LEN = (IF .LENGTH LSS 0 THEN .SRC [DSC$W_LENGTH] ELSE .LENGTH);
						! dest length depends on if
						!  LENGTH parameter given
	    END_ADDR = .SRC [DSC$A_POINTER] + .SRC [DSC$L_ARSIZE] - .SRC [DSC$W_LENGTH];
	    !+
	    ! Loop thru array moving each element to buffer.
	    !-
	    INCR ELEM_PTR FROM .SRC [DSC$A_POINTER] TO .END_ADDR BY .SRC [DSC$W_LENGTH] DO
	    	BEGIN

	    	IF .DEST [DSC$W_LENGTH] LSSU .LEN
	    	THEN 
	            BAS$$STOP_IO (BAS$K_MOVOVEBUF);
	    	DEST [DSC$A_POINTER] = CH$COPY (.SRC [DSC$W_LENGTH],
		    .ELEM_PTR, %C' ', .LEN,
		    .DEST [DSC$A_POINTER]);	! move string from array to
						!  buffer, blank padding if
						!  necessary
	    	DEST [DSC$W_LENGTH] = .DEST [DSC$W_LENGTH] - .LEN;
						! buffer len must be decreased	
						!  by amt moved so check can be
						!  done so that further moves
						!  will not overflow buffer
		END;
	    END;
    	END		
    ELSE
	    IF .SRC [DSC$B_CLASS] EQL DSC$K_CLASS_BFA
	    THEN
	    	BEGIN				
		!+
		! virtual array
		!-
	        LOCAL
		    DEST_LEN,			! buffer element length
		    ELEM_LEN,			! array element length
		    MEM_LOC;			! virtual memory pointer

		LIB$GET_VM (SRC [DSC$L_ARSIZE], MEM_LOC);	
						! alloc memory for virtual array
		BAS$$WHOLE_VA_FETCH (.SRC, .MEM_LOC);
						! move array to memory
		ELEM_LEN = .SRC [DSC$W_LENGTH];
	    	!+
		! If we are dealing with an array of RFAs or RECORDs,
	    	! ELEM_LEN must be changed to a power of 2 since that is 
		! the virtual array element's true size.
	    	!-
	    	IF .SRC [DSC$B_DTYPE] EQL DSC$K_DTYPE_Z
	    	THEN
		    BEGIN

		    ELEM_LEN = (INCR I FROM 0 TO 9
		    DO
		    	IF .ELEM_LEN LEQ .POWER_OF_2 [.I]
		        THEN
			    EXITLOOP .POWER_OF_2 [.I]);

		    END;
	        !+
	        ! Loop thru array moving each element to buffer.
	        !-
		INCR PTR FROM .MEM_LOC TO (.MEM_LOC + .SRC [DSC$L_ARSIZE] - .ELEM_LEN)
		    BY .ELEM_LEN DO

		    BEGIN

		    LOCAL
			END_PTR;		! ptr to end of array element,
						! not including nulls

		    !+
		    ! Trailing nulls must be removed.  Calculate the length of
		    ! actual characters not including nulls on a per character
		    ! basis.
		    ! NOTE - virtual arrays of RECORDs or RFAs should not have
		    ! the nulls removed.  Reason being desc length reflects the
		    ! RECORD or RFA size and not the virt array element size.
		    !-
		    END_PTR = .PTR + .SRC[DSC$W_LENGTH] - 1;
						! point to last char in array
						!  element
		    IF .SRC [DSC$B_DTYPE] NEQ DSC$K_DTYPE_Z
		    THEN
		        UNTIL .END_PTR EQL (.PTR - 1) DO
			    BEGIN
			    !+
			    ! Go backwards to 1st char looking for 1st non null.
			    !-
			    IF CH$FAIL (CH$FIND_NOT_CH (1, .END_PTR, %B'0') )
			    THEN
			        END_PTR = .END_PTR - 1
			    ELSE
			        EXITLOOP;

			    END;		    
		    LEN = .END_PTR - .PTR + 1;	! lenght of element w/o nulls
		    DEST_LEN = (IF .LENGTH LSS 0 THEN .LEN ELSE .LENGTH);
						! dest length depends on if
						!  LENGTH parameter given
		    IF (.DEST [DSC$W_LENGTH] LSSU .LEN) THEN BAS$$STOP_IO (BAS$K_MOVOVEBUF);
		    DEST [DSC$A_POINTER] = CH$COPY (.LEN, .PTR, %C' ',
						.DEST_LEN, .DEST [DSC$A_POINTER]);
						! move string from array to
						!  buffer, blank padding if
						!  necessary
		    DEST [DSC$W_LENGTH] = .DEST [DSC$W_LENGTH] - .DEST_LEN;
						! buffer len must be decreased	
						!  by amt moved so check can be
						!  done so that further moves
						!  will not overflow buffer
		    END;

		LIB$FREE_VM (SRC [DSC$L_ARSIZE], MEM_LOC); 
						 ! dealloc memory used for array
	    	END;
		
    END;					! of SRC_SA

ROUTINE SRC_DSC (				! MOVE an array of dsc 
	SRC : REF BLOCK [, BYTE],		! Source: array
	DEST : REF BLOCK [, BYTE],		! Destination: buffer
	LENGTH					! Limit on string size
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Within a MOVE statement, move an array of descriptors to a buffer.
!	The descriptors may be string descriptors or numeric descriptors
!	(in the case of dynamically mapped variables).  This routine
!	determines the dtype of the descriptors and dispatches to the
!	appropriate routine.
!
! FORMAL PARAMETERS:
!
!	SRC.rx.da	The source, an array of desc
!	DEST.mq.r	The destination, the I/O buffer.  It is updated to
!			reflect the array.
!	LENGTH.rl.v	-1 or limit of length of string to copy
!
! IMPLICIT INPUTS:
!
!	CCB, which is used only to provide good error messages.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    LOCAL
	ELEM_DSC : REF BLOCK [8,BYTE],
	NUM_ELEMS;
	

!+
! Set up a pointer to the first element of the array so that the dtype
! and length of the descriptor elements can be determined.
!-

    ELEM_DSC = .SRC [DSC$A_A0];

!+
! Now just dispatch to the appropriate routine based on the dtype in the
! descriptor element.
!-

    SELECTONEU .ELEM_DSC [DSC$B_DTYPE] OF
	SET

	[DSC$K_DTYPE_B, DSC$K_DTYPE_W, DSC$K_DTYPE_L, DSC$K_DTYPE_F,
	 DSC$K_DTYPE_D, DSC$K_DTYPE_G, DSC$K_DTYPE_H, DSC$K_DTYPE_P]:
	    BEGIN				! dynamically mapped array
	    !+
	    ! Check for overflowing the buffer here to save doing it in
	    ! SRC_NA.
	    !-
	    NUM_ELEMS = .SRC [DSC$L_ARSIZE]/ .SRC [DSC$W_LENGTH];
    	    IF (.NUM_ELEMS * .ELEM_DSC [DSC$W_LENGTH]) GTRU .DEST [DSC$W_LENGTH]
    	    THEN
		BAS$$STOP_IO (BAS$K_MOVOVEBUF);
	    SRC_NA (.SRC, .DEST);		
	    END;

	[DSC$K_DTYPE_T, DSC$K_DTYPE_Z]:
	    SRC_SA (.SRC, .DEST, .LENGTH);	! string or record array

	[OTHERWISE]:
	    BAS$$STOP_IO (BAS$K_PROLOSSOR);

	TES;

    END;					! of SRC_DSC

ROUTINE DEST_NA (				! MOVE a numeric array
	SRC : REF BLOCK [8, BYTE],		! Source: buffer
	DEST : REF BLOCK [, BYTE]		! Destination: numeric array
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Within a MOVE statement, move the I/O buffer to a numeric array.
!
! FORMAL PARAMETERS:
!
!	SRC.mq.r	The source, the I/O buffer.  It is updated to account for the
!			bytes taken from it.
!	DEST.wx.da	The destination, a numeric array.
!
! IMPLICIT INPUTS:
!
!	CCB, which is used only to provide good error messages.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!	Updates the buffer's address and count to reflect the movement
!	of the array.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    LOCAL
	LEN;

!+
! The total number of bytes in the array must not be greater than the
! remaining length of the buffer.
!-

    IF (.SRC [DSC$B_DTYPE] NEQ DSC$K_DTYPE_DSC) AND
       (.SRC [DSC$W_LENGTH] LSSU .DEST [DSC$L_ARSIZE])
    THEN
	 BAS$$STOP_IO (BAS$K_MOVOVEBUF);

!+
! Values can be moved to a memory array in one instruction.  If the array
! is virtual, however, the store routine must be called.  If the array is
! dynamically mapped, the elements are not contiguous and values must be
! moved one by one.
!-

    IF .DEST [DSC$B_CLASS] EQL DSC$K_CLASS_A
    THEN
	BEGIN					! memory array
	IF .DEST [DSC$B_DTYPE] EQL DSC$K_DTYPE_DSC
	THEN
	    BEGIN				! dynamically mapped array
	    LOCAL
		END_ADDR;			! addr of last elem of array
	    END_ADDR = .DEST [DSC$A_POINTER] + .DEST [DSC$L_ARSIZE] - .DEST [DSC$W_LENGTH];
						! addr of last desc
	    INCR DSC_PTR FROM .DEST [DSC$A_POINTER] TO .END_ADDR BY .DEST [DSC$W_LENGTH]  DO
		BEGIN
		MAP
		    DSC_PTR : REF BLOCK [8,BYTE];
		LEN = (IF .DSC_PTR [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
		       THEN (.DSC_PTR [DSC$W_LENGTH]/2 + 1) 
		       ELSE .DSC_PTR [DSC$W_LENGTH]);
		CH$MOVE (.LEN, .SRC [DSC$A_POINTER], .DSC_PTR [DSC$A_POINTER]);
		SRC [DSC$A_POINTER] = .SRC [DSC$A_POINTER] + .LEN;
		SRC [DSC$W_LENGTH] = .SRC [DSC$W_LENGTH] - .LEN;
		END;
	    END
	ELSE
	    BEGIN				! numeric array
	    LEN = (IF .DEST [DSC$B_DTYPE] EQL DSC$K_DTYPE_P 
		   THEN	(.DEST [DSC$W_LENGTH]/2 + 1) * (.DEST [DSC$L_ARSIZE]/.DEST [DSC$W_LENGTH])
		   ELSE	.DEST [DSC$L_ARSIZE]);
	    CH$MOVE (.LEN, .SRC [DSC$A_POINTER], .DEST [DSC$A_POINTER]);
	    SRC [DSC$A_POINTER] = .SRC [DSC$A_POINTER] + .LEN;
	    SRC [DSC$W_LENGTH] = .SRC [DSC$W_LENGTH] - .LEN;
	    END;
	END
    ELSE
	BEGIN					! virtual array
	BAS$$WHOLE_VA_STORE (.DEST, .SRC [DSC$A_POINTER]);
	LEN = (IF .DEST [DSC$B_DTYPE] EQL DSC$K_DTYPE_P
	       THEN (.DEST [DSC$W_LENGTH]/2 + 1) * (.DEST [DSC$L_ARSIZE]/.DEST [DSC$W_LENGTH])
	       ELSE .DEST [DSC$L_ARSIZE]);
	SRC [DSC$A_POINTER] = .SRC [DSC$A_POINTER] + .LEN;
	SRC [DSC$W_LENGTH] = .SRC [DSC$W_LENGTH] - .LEN;
	END;

    END;					! of DEST_NA

ROUTINE DEST_SA (				! MOVE a string array
	SRC : REF BLOCK [8, BYTE],		! Source: buffer
	DEST : REF BLOCK [, BYTE],		! Destination: array
	LENGTH					! -1 or length of each string
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Within a MOVE statement, move the I/O buffer to a string array or
!	array of records.
!
! FORMAL PARAMETERS:
!
!	SRC.mq.r	The source, the I/O buffer.  This is updated to account for
!			the bytes taken from it.
!	DEST.wx.da	The destination, a string array or array of records.
!
! IMPLICIT INPUTS:
!
!	CCB, which is used only to provide good error messages.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!	Updates the buffer's address and count to reflect the movement
!	of the array.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    LITERAL
	K_DEFAULT_STR_LEN = 16;

    LOCAL
        POWER_OF_2: VECTOR [10, WORD]
	    !+
	    ! Only have to check up to 512 because the compiler
	    ! allocates virtual arrays so that they will not
	    ! cross block boundaries.
	    !-
	    INITIAL ( WORD(1,2,4,8,16,32,64,128,256,512) ),
	LEN;

!+
! Dynamic string arrays are arrays of descriptors, while static string
! arrays contain the strings themselves.  In both cases, do an element
! by element move so that padding can be done if necessary.  Virtual
! arrays must use the virtual array store routine.
!-

    IF .DEST [DSC$B_CLASS] EQL DSC$K_CLASS_A	
    THEN					
	BEGIN
	!+
	! memory array
	!-
	IF .DEST [DSC$B_DTYPE] NEQ DSC$K_DTYPE_DSC
	THEN					
	    BEGIN				
	    !+
	    ! static strings or records
	    !-
	    LOCAL
		END_ADDR;			! addr of last elem of array

	    LEN = (IF .LENGTH LSS 0 THEN K_DEFAULT_STR_LEN ELSE .LENGTH);
						! dest length depends on if
						!  LENGTH parameter given,
						!  defaults to 16
	    IF .DEST [DSC$B_DTYPE] EQL DSC$K_DTYPE_Z
	    THEN
		LEN = .DEST [DSC$W_LENGTH];	! if we are dealing with an 
						!  array of RFAs or RECORDs,
						!  get the length from the descr

	    END_ADDR = .DEST [DSC$A_POINTER] + .DEST [DSC$L_ARSIZE] -
		.DEST [DSC$W_LENGTH];
	    !+
	    ! Loop thru array moving each element from buffer to it.
	    !-
	    INCR ELEM_PTR FROM .DEST [DSC$A_POINTER] TO .END_ADDR 
		BY .DEST [DSC$W_LENGTH] DO
		BEGIN

		IF (.SRC [DSC$W_LENGTH] LSSU .LEN)
		THEN
		    BAS$$STOP_IO (BAS$K_MOVOVEBUF);
		CH$COPY (.LEN, .SRC [DSC$A_POINTER], %C' ', .DEST [DSC$W_LENGTH], .ELEM_PTR);					! move string from buffer to
						!  array, Blank padding if
						!  necessary
		SRC [DSC$A_POINTER] = .SRC [DSC$A_POINTER] + .LEN;
						! update buffer pointer
	        SRC [DSC$W_LENGTH] = .SRC [DSC$W_LENGTH] - .LEN;
						! buffer len must be decreased	
						!  by amt moved so check can be
						!  done so that further moves
						!  will not overflow buffer
	        END;
	    END
	ELSE
	    BEGIN				
	    !+
	    ! dynamic strings
	    !-
	    LOCAL
	        DEST_ITEM : REF BLOCK [8, BYTE],! desc for string within array
		END_ADDR;			! addr of last elem of array

	    LEN = (IF .LENGTH LSS 0 THEN K_DEFAULT_STR_LEN ELSE .LENGTH);
						! dest length depends on if
						!  LENGTH parameter given,
						!  defaults to 16
	    DEST_ITEM = .DEST [DSC$A_POINTER];	! set up desc for actual item
	    IF .DEST_ITEM [DSC$B_DTYPE] EQL DSC$K_DTYPE_Z
	    THEN
		LEN = .DEST_ITEM [DSC$W_LENGTH];! if we are dealing with an 
						!  array of RFAs or RECORDs,
	    					!  get the length from the descr

	    END_ADDR = .DEST [DSC$A_POINTER] + .DEST [DSC$L_ARSIZE] -
		.DEST [DSC$W_LENGTH];
	    !+
	    ! Loop thru array moving each element from buffer to it.
	    !-
	    INCR DSC_PTR FROM .DEST [DSC$A_POINTER] TO .END_ADDR 
		BY .DEST [DSC$W_LENGTH] DO
		BEGIN

		MAP
		    DSC_PTR: REF BLOCK [8,BYTE];! desc for string within array

		IF (.SRC [DSC$W_LENGTH] LSSU .LEN)
		THEN
		    BAS$$STOP_IO (BAS$K_MOVOVEBUF);
		STR$COPY_R (.DSC_PTR, LEN, .SRC [DSC$A_POINTER]);
						! move string from buffer to
						!  array, null padding if
						!  necessary
		SRC [DSC$A_POINTER] = .SRC [DSC$A_POINTER] + .LEN;
						! update buffer pointer
		SRC [DSC$W_LENGTH] = .SRC [DSC$W_LENGTH] - .LEN;
						! buffer len must be decreased	
						!  by amt moved so check can be
						!  done so that further moves
						!  will not overflow buffer
		END;
	    END
	END
    ELSE
	IF .DEST [DSC$B_CLASS] EQL DSC$K_CLASS_BFA
	THEN
	    BEGIN			
	    !+
	    ! virtual array
	    !-
	    LOCAL
		SRC_LEN,			! buffer element length
	    	MEM_LOC;			! virtual memory pointer

	    LIB$GET_VM (DEST [DSC$L_ARSIZE], MEM_LOC);
						! alloc memory for virtual array
	    SRC_LEN = 
		(IF .LENGTH LSS 0 THEN K_DEFAULT_STR_LEN ELSE .LENGTH);
						! dest length depends on if
						!  LENGTH parameter given,
						!  defaults to 16
	    LEN = .DEST [DSC$W_LENGTH];		! array element length
	    !+
	    ! If we are dealing with an array of RFAs or RECORDs,
	    ! LEN must be changed to a power of 2 since that is the
	    ! virtual array element's true size.
	    !-
	    IF .DEST [DSC$B_DTYPE] EQL DSC$K_DTYPE_Z
	    THEN
		BEGIN

		LEN = (INCR I FROM 0 TO 9
		DO
		    IF .LEN LEQ .POWER_OF_2 [.I]
		    THEN
			EXITLOOP .POWER_OF_2 [.I]);
		SRC_LEN = .DEST [DSC$W_LENGTH];

		END;

	    IF (.LEN GTRU .SRC [DSC$W_LENGTH]) 
	    THEN 
		BAS$$STOP_IO (BAS$K_MOVOVEBUF);
	    !+
	    ! Loop thru array moving each element from buffer to it.
	    !-
	    INCR PTR FROM .MEM_LOC TO (.MEM_LOC + .DEST [DSC$L_ARSIZE] -
		.LEN) BY .LEN DO
		BEGIN
		CH$COPY (.SRC_LEN, .SRC [DSC$A_POINTER],
		    %X'0', .LEN, .PTR);		! move string from buffer to
						!  array, null padding if
						!  necessary
		SRC [DSC$A_POINTER] = .SRC [DSC$A_POINTER] + .SRC_LEN;
						! update buffer pointer
		SRC [DSC$W_LENGTH] = .SRC [DSC$W_LENGTH] - .SRC_LEN;
						! buffer len must be decreased	
						!  by amt moved so check can be
						!  done so that further moves
						!  will not overflow buffer
		END;

	    BAS$$WHOLE_VA_STORE (.DEST, .MEM_LOC);
						! store array from memory
	    LIB$FREE_VM (DEST [DSC$L_ARSIZE], MEM_LOC);
						! dealloc memory used for array
	    END;    

    END;					! of DEST_SA

ROUTINE DEST_DSC (				! MOVE a descriptor
	SRC : REF BLOCK [8, BYTE],		! Source: buffer
	DEST : REF BLOCK [, BYTE],		! Destination: array
	LENGTH					! -1 or length of each string
    ) : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Within a MOVE statement, move the I/O buffer to an array of
!	descriptors.  The descriptors may be string descriptors or
!	descriptors for dynamic variables (probably numeric).  So
!	determine the dtype of the descriptor and then call SRC_SA or 
!	SRC_NA to perform the work.
!
! FORMAL PARAMETERS:
!
!	SRC.mq.r	The source, the I/O buffer.  This is updated to account for
!			the bytes taken from it.
!	DEST.wx.da	The destination, an array of descriptors
!
! IMPLICIT INPUTS:
!
!	CCB, which is used only to provide good error messages.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals if an error is encountered.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF BLOCK [, BYTE];

    LOCAL
	ELEM_DSC : REF BLOCK [8,BYTE],
	NUM_ELEMS;


!+
! Set up pointer to the first element descriptor in the array so that the
! dtype and length can be determined.
!-

    ELEM_DSC = .DEST [DSC$A_A0];

!+
! Now just dispatch to the appropriate routine based on the dtype in the
! descriptor element.
!-

    SELECTONEU .ELEM_DSC [DSC$B_DTYPE] OF
	SET

	[DSC$K_DTYPE_B, DSC$K_DTYPE_W, DSC$K_DTYPE_L, DSC$K_DTYPE_F,
	 DSC$K_DTYPE_D, DSC$K_DTYPE_G, DSC$K_DTYPE_H, DSC$K_DTYPE_P]:
	    BEGIN				! dynamically mapped array
	    !+
	    ! Check for overflowing the buffer here to save doing it in
	    ! DEST_NA.
	    !-
	    NUM_ELEMS = .DEST [DSC$L_ARSIZE]/ .DEST [DSC$W_LENGTH];
	    IF .SRC [DSC$W_LENGTH] LSSU (.NUM_ELEMS * .ELEM_DSC [DSC$W_LENGTH])
	    THEN
		BAS$$STOP_IO (BAS$K_MOVOVEBUF);
	    DEST_NA (.SRC, .DEST);		
	    END;

	[DSC$K_DTYPE_T, DSC$K_DTYPE_Z]:
	    DEST_SA (.SRC, .DEST, .LENGTH);	! string or record array

	[OTHERWISE]:
	    BAS$$STOP_IO (BAS$K_PROLOSSOR);

	TES;

    END;					! of DEST_DSC
END						! end of module BAS$MOVE_ARRAY

ELUDOM
