	.TITLE	COB$VECTOR - Entry vectors for COBRTL.EXE
	.IDENT	/1-009/			; File: COBVECTOR.MAR Edit: LGB1009

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Run-Time Library - COBOL Language Support
;
; ABSTRACT:
;
;	This module contains the entry vector definitions for the
;	VAX-11 Run-Time Library shareable image COBRTL.EXE
;
; ENVIRONMENT: User mode, AST Reentrant
;
; AUTHOR: Steven B. Lionel, CREATION DATE: 29-October-1982
;
; MODIFIED BY:
;
; 1-001	- Original. SBL 29-October-1982
; 1-002 - Add entry for COB$$HANDLER so that VMSRTL can reference the mask.
;	  SBL 11-May-1983
; 1-003 - Add new entries for COB$DISPLAY and COB$POS_ERASE.  LEB 20-May-1983
; 1-004 - Add all COBOL code that can be shared.  LEB 23-May-1983
; 1-005 - Take out COB$$RESTVA (found during an RTL test build, so no affect
;	  on programs).  LEB 24-May-1983
; 1-006 - Change reference from COB$DISPLAY_SCR to COB$DISP_SCR as well as
;	  COB$DISPLAY_SCR_NO_ADV to COB$DISP_SCR_NO_ADV.  LEB 25-May-1983
; 1-007 - Add entry COB$ACC_SCR to module COB$ACCEPT.  LEB 22-Aug-1983
; 1-008 - add entry COB$$RET_A_AB_PREV to module COB$DISPLAY.  MDL 29-Aug-1983
; 1-009 - Add entries COB$POS_ACCEPT and COB$POS_DISPLAY to COB$POS_ERASE.
;							LGB 27-Feb-1984
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
;	NONE
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL		; Force all external symbols to be declared
;
; MACROS:
;

;+
; Macro to define an entry vector for a CALL entry point
;-

	.MACRO	VCALL	NAME, ALTMSK
	.EXTRN		NAME
	.TRANSFER	NAME
	.IF B ALTMSK
	.MASK		NAME
	.IFF
	.MASK		ALTMSK
	.ENDC
	JMP		NAME+2
	.ENDM

;+
; Macro to define an entry vector for a JSB entry point
;-

	.MACRO	VJSB	NAME
	.EXTRN		NAME
	.TRANSFER	NAME
	JMP		NAME
	.BLKB		2
	.ENDM

;+
; Macro to define an entry vector for a condition handler whose actual
; routine address has a different name from the vector entry.
;-

	.MACRO	VHANDL	NAME, INTNAME
	.EXTRN		INTNAME
NAME::
	.TRANSFER	NAME
	.MASK		INTNAME
	JMP		INTNAME+2
	.ENDM

;+
; Macro to define an alias for the next vectored entry point
;-

	.MACRO	ALIAS	NAME
	.TRANSFER	NAME
	.ENDM


;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT $COB$VECTOR PIC, USR, CON, REL, LCL, SHR, -
			   EXE, RD, NOWRT, LONG


	.SBTTL	COBRTL Vector

;+
; Define vectored entry points for the COBOL Language Support procedures
; by module in alphabetical order.
;
; Any additions to this file should be reflected in
; COM$:COBRTLVEC.DAT.  All new entry points must be appended to the end
; of the list.  NEVER change existing entries unless you are sure that
; what you do won't break existing programs.
;-

; Module COB$$HANDLER
	VHANDL	COB$HANDLER	COB$$HANDLER

; Module COB$ACCEPT
	VCALL	COB$ACCEPT

; Module COB$ACC_DATE
	VCALL	COB$ACC_DATE

; Module COB$ACC_DAY
	VCALL	COB$ACC_DAY

; Module COB$ACC_DAYWEEK
	VCALL	COB$ACC_DAYWEEK

; Module COB$ACC_TIME
	VCALL	COB$ACC_TIME

; Module COB$CVTPQ_R9
	VJSB	COB$CVTPQ_R9

; Module COB$CVTQP_R9
	VJSB	COB$CVTQP_R9

; Module COB$CVTRPQ_R9
	VJSB	COB$CVTRPQ_R9

; Module COB$CVTRQP_R9
	VJSB	COB$CVTRQP_R9

; Module COB$DISPLAY
	VCALL	COB$DISPLAY
	VCALL	COB$DISP_NO_ADV

; Module COB$DIVQ_R8
	VJSB	COB$DIVQ_R8

; Module COB$ERROR
	VCALL	COB$ERROR

; Module COB$INTARI
	VCALL	COB$ADDI
	VCALL	COB$CMPI
	VCALL	COB$DIVI
	VCALL	COB$DIVI_OSE
	VCALL	COB$MULI
	VCALL	COB$SUBI

; Module COB$INTER
	VJSB	COB$CVTDI_R7
	VJSB	COB$CVTFI_R7
	VJSB	COB$CVTID_R7
	VJSB	COB$CVTIF_R7
	VJSB	COB$CVTIL_R8
	VJSB	COB$CVTIP_R9
	VJSB	COB$CVTIQ_R8
	VJSB	COB$CVTIW_R8
	VJSB	COB$CVTLI_R8
	VJSB	COB$CVTPI_R9
	VJSB	COB$CVTQI_R8
	VJSB	COB$CVTRIL_R8
	VJSB	COB$CVTRIP_R9
	VJSB	COB$CVTRIQ_R8
	VJSB	COB$CVTRIW_R8
	VJSB	COB$CVTTI_R8
	VJSB	COB$CVTWI_R8

; Module COB$IOEXCEPTION
	VCALL	COB$IOEXCEPTION

; Module COB$MULQ_R8
	VJSB	COB$MULQ_R8

; Module COB$PAUSE
	VCALL	COB$PAUSE

;+
; End of initial COBRTL vector.  All subsequent additions must be made
; after this point.
;-

;+
; The following entry is present so that the vector of VMSRTL can reference
; the mask of COB$$HANDLER.
;-

; Module COB$$HANDLER
	VCALL	COB$$HANDLER

;+
; Add the following entries for the new version of COBOL.
;-

; Module COB$DISPLAY
	VCALL	COB$DISP_SCR
	VCALL	COB$DISP_SCR_NO_ADV

; Module COB$POS_ERASE
	VCALL	COB$POS_ERASE


;+
; Add all remaining COBOL specific code that can be shared (note that
; the exceptions are tables, COB$FIND_NAME, COB$CALL, COB$CANCEL,
; COB$RMS_BLOCKS, COB$DHANDL, COB$$RESTVA.
;-


; Module COB$CVTDQ_R8

	VJSB	COB$CVTDQ_R8

; Module COB$CVTFQ_R8

	VJSB	COB$CVTFQ_R8

; Module COB$CVTQD_R8

	VJSB	COB$CVTQD_R8

; Module COB$CVTQF_R8

	VJSB	COB$CVTQF_R8

; Module COB$CVTRDQ_R8

	VJSB	COB$CVTRDQ_R8

; Module COB$CVTRFQ_R8

	VJSB	COB$CVTRFQ_R8

; Module COB$DBEXCEPTION

	VCALL	COB$DBEXCEPTION

; Module COB$EXPI

	VCALL	COB$EXPI
	VCALL	COB$EXPI_OSE

; Module COB$LINAGE

	VCALL	COB$INIT_LINAGE
	VCALL	COB$LINAGE
	VCALL	COB$TERM_LINAGE

; Module COB$SET_SWITCH

	VCALL	COB$SET_SWITCH

; Module COB$SWITCH

	VCALL	COB$SWITCH

; Module COB$ACCEPT (new entry to an already existing shared module)

	VCALL	COB$ACC_SCR

; Module COB$DISPLAY (new entry to an already existing shared module)

	VCALL	COB$$RET_A_AB_PREV

; Module COB$POS_ERASE (new entries to an already existing shared module)

	VCALL	COB$POS_ACCEPT
	VCALL	COB$POS_DISPLAY

	.END					; End of module COB$VECTOR
