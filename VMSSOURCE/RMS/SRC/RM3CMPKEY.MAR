	$BEGIN	RM3CMPKEY,000,RM$RMS3,<>,<PIC,NOWRT,QUAD>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:	rms32 index sequentail file organization
;
; Abstract:
;	this module compares a contiguous or a noncontiguous search key
;	to either a data record or another contiguous key
;
;
; Environment:
;	vax/vms operating system
;	internal exec routines.
;
; Author:  d. h. gilllespie,   creation date:  25-MAR-1978
;
; Modified By:
;
;	V03-006	MCN0002		Maria del C. Nasr	04-Apr-1983
;		Preserve register 3 in call to RM$NULLKEY, so that we can
;		use general linkages.  Also, move input parameter to R1
;		to be used by RM$COMPARE_KEY.
;
;	V03-005	DAS0001		David Solomon		26-Jan-1983
;		Add comparison of 64-bit binary keys (IN8 and BN8).
;
;	V03-004	TMK0003		Todd M. Katz		16-Dec-1982
;		I made another mistake in TMK0002. I used a BITB instead of a 
;		CMPZV and this basically caused some comparisons of segmented 
;		keys to fail. If at first you don't succeed....
;
;	V03-003	TMK0002		Todd M. Katz		09-Dec-1982
;		I made a mistake in TMK0001. I used a BNEQ instead of a BEQL
;		and this basically caused all comparisons of segmented keys
;		to fail.
;
;	V03-002	TMK0001		Todd M. Katz		02-Dec-1982
;		If the routine RM$COMPARE_KEY is performing a contigious key -
;		contigious key compare, then there is a need only to perform
;		one comparison regardless of the number of segments. As the
;		routine currently is constructed, the comparisons are done
;		segment-by-segment even though both keys are contigious and
;		only one comparison need be done. The routine was written like
;		this with heterogeneous segmented keys in mind where there would
;		be a need to always compare keys segment-by-segment, regardless
;		of whether they were or wern't contigious, because the segments
;		could be of different types. Because RMS is no longer going to
;		implement such a key, the need to compare keys segment-by-
;		segment, if both are contigious has disappeared, and only one
;		comparison need be done resulting in a significant performance
;		enhancement.
;
;	V03-001	KBT0158		Keith B. Thompson	21-Aug-1982
;		Reorganize psects
;
;	V02-008	MCN0001		Maria del C. Nasr	11-May-1981
;		Loop to compare all key segments independent of type.
;		Also, eliminate RM$COMP_ASCII routine, not needed anymore.
;
;	V02-007	PSK0003		Paulina Knibbe	30-Apr-1981
;		Change branch in RM$COMP_ASCII to make it compare
;		correctly against high key value
;
;	V02-006	PSK0002		Paulina Knibbe	10_Apr-1981
;		Add RM$COMP_ASCII routine to compare ascii-equivalent keys
;
;	V02-005	PSK0001		Paulina Knibbe	11-Mar-1981
;		Change size field for key segments from words to bytes
;		Get datatype from the segment array
;
;	V02-004	REFORMAT	Ron Schaefer	30-Jul-1980	09:18
;		Reformat the source.
;
; Revision History:
;
;	w. koenig 11-DEC-1978 fix bug in nullkey -- set bit indicating that
;		r3 points to a contiguous key and when comparing a
;		packed decimal zero, use a zero length
;
;--

	.SBTTL	DECLARATIONS
;
; Include Files:
;

;
; Macros:
;

	$IDXDEF

;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RM$NULLKEY - COMPARE KEY TO NULL KEY VALUE

;++
;
; RM$NULLKEY:	compare key to null key value
;		this routine compares the current key in a data record
;		to the null value depending on the key data type.
;
; Calling sequence:
;	bsbw	rm$nullkey
;
; Input Parameters:
;	Address of data record
;
; Implicit Inputs:
;	r7	-	address of index descriptor for current key of reference
;	ap	-	same as for rm$comparekey
;
; Output Parameters:
;	r0	- 	0	key is null
;		-	1	key not null
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	register r0,r1 are clobbered
;
;--

	.ENABL	LSB
RM$NULLKEY::
	PUSHR	#^M<R3>
	MOVL	8(SP),R1		; move input param for RM$COMPARE_KEY
	PUSHL	#12			; put packed decimal zero on stack
	CLRL	-(SP)			; put zero on stack for binary compares
	TSTB	IDX$B_KEYREF(R7)	; is this the primary key?
	BEQL	90$			; primary keys can not be null
	BBC	#IDX$V_NULKEYS,IDX$B_FLAGS(R7),90$ ; if null keys not allowed,
						   ;  return not null key
	BISB2	#6,AP			; signal this is a null key compare
					; and that r3 points to a ctg key
	MOVL	SP,R3			; setup key address to stack
	MOVZBL	IDX$B_KEYSZ(R7),R0	; compare total size of key
	BSBB	RM$COMPARE_KEY		; call key compare
	BEQL	100$			; r0 already equals zero

90$:	MOVZBL	#1,R0			; set return value
100$:	ADDL2	#8,SP			; restore stack pointer
	POPR	#^M<R3>
	RSB				; return to caller
	.DSABL	LSB

	.SBTTL	RM$COMPARE_KEY	- COMPARE TWO KEYS

;++
;
; RM$COMPARE_KEY:
;	given the index descriptor for the current key of reference, a contiguous
;	or a non-contiguous search key is compared with the second character string
;	which may be either another contiguous key or a data record.  the compare
;	is done according to the data type.  each segment of the key is
;	compared until the requested number of characters has been examined.
;
; Calling sequence:
;	bsbw	rm$compare_key
;
; Input Parameters:
;	ap 	- bit 0    0	string pointed to by r1 is a data record
;		- bit 0    1 	string pointed to by r1 is contiguous key
;		- bit 1    0	string pointed to by r3 is non-contiguous key
;		- bit 1    1	string pointed to by r3 is contiguous key
;		- bit 2    0 	not null key compare
;		- bit 2	   1   	null key compare
;	r1 	-		address of data record/index
;	r3	-		address of search key
;	r0	-		number of characters to compare
;	r7	-		address of index descriptor for current key of reference
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	r0	- 	0	index/data record = search key
;	r0	-      -1	index/data record > search key
;	r0	-      +1	index/data record < search key
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	register r0,r1,r3 are clobbered
;
;--

	.ENABL	LSB			; local symbols

RM$COMPARE_KEY::
	PUSHR	#^M<R2,R4,R5,R6>	; save these registers
	MOVL	R0,R4			; setup size
	MOVAW	IDX$W_POSITION(R7),R6	; setup pter to pos/size/type  array
	MOVZBL	IDX$B_SEGMENTS(R7),R5	; pickup # of segments in this key

;
; if it is necessary to position into data record, do so.  positioning into
; data record on the first segment is handled differently than the others.
;

	MOVZWL	(R6)+,R0		; disp in record of first key segment
	BLBS	AP,5$			; is this a data record?
	ADDL2	R0,R1			; yes, set record pter to addr of first key segment
5$:	BBS	#1,AP,20$		; is key contiguous?
	ADDL2	R0,R3			; no, set key pter to addr of first key char
	BRB	20$			; skip position for subsequent key

;
; this logic calculates the start character of subsequent segments when r1
; points to a data record.
;

10$:	MOVZWL	(R6)+,R0		; pickup disp of this key segment
	MOVZWL	-6(R6),R2		; pickup disp of previous key
	SUBL2	R2,R0			; subtract it from this segments disp
	MOVZBL	-4(R6),R2		; pickup len of previous segment
	SUBL2	R2,R0			; subtract it from this segment disp
	BLBS	AP,15$			; is  this a data record?

;
; add difference of first char this segment minus last char +1 of previous segment
;

	ADDL2	R0,R1			; position to first char of this key segment
15$:	BBS	#1,AP,20$		; is key contiguous?
	ADDL2	R0,R3			; no, position to first char of this key segment

;
; now calculate length of current compare
;

20$:	MOVZBL	(R6)+,R2		; get length of this segment
	MOVZBL	(R6)+,R0		; get datatype of this segments

	CMPZV	#0,#2,AP,#3		; if both keys are contigious then only
	BEQLU	25$			; one comparison will be necessary

	CMPL	R2,R4			; compare to remaining compare length
	BLEQU	30$			; if it is gtr remaining
25$:	MOVL	R4,R2			; compare remaining length only

30$:	SUBL2	R2,R4			; update # of char remaining in compare

;
; compare is done according to data type.
;

	CASE	TYPE=B,SRC=R0,-
		DISPLIST=<STR,IN2,BN2,IN4,BN4,PAC,IN8,BN8>

;
; data string compare
;

STR:	BBS	#2,AP,NULSTR		; is this a null string compare?
	CMPC3	R2,(R1),(R3)		; compare characters
	BNEQ	90$			; if neq, terminate compare
50$:	TSTL	R4			; check # of characters remaining
	BNEQ	140$			; if more, loop for next segment
	BRW	145$			; if no more, compare is done and eql

;
; compare key string segments to null value
;

NULSTR:	SKPC	IDX$B_NULLCHAR(R7),R2,(R1) ; look for other than null char
	BEQL	50$			; if none found, found null key
	BRB	130$			; did not find null key


;
; packed decimal
;

PAC:	MULL2	#2,R2			; 4 bits to a nibble
	DECL	R2			; sign does not count
	BBS	#2,AP,NULPAC		; is this a null key compare?
	CMPP	R2,(R1)+,(R3)+		; compare one packed decimal string
	BRB	60$			; do signed branches

;
; compare packed decimal to zero, the null value
;

NULPAC:	CLRL	R4			; length of packed decimal zero
	TSTL	(R3)+			; skip binary zero
	CMPP4	R4,(R3),R2,(R1)		; the search null routine puts packed decimal zero of stack
	BEQL	140$			; string is zero
	BRB	130$			; not zero

;
; signed word compare
;

IN2:	CMPW	(R1)+,(R3)+		; compare one word
	BRB	60$			; do signed branches

;
; unsigned word compare
;

BN2:	CMPW	(R1)+,(R3)+		; compare one word
	BRB	80$			; do unsigned branches

;
; signed long word compare
;

IN4:	CMPL	(R1)+,(R3)+		; compare one long word
60$:	BEQL	140$			; if equal, check if done
70$:	BLSS	130$			; key > data record
	BRB	120$			; key < data record

;
; unsigned long word compare
;

BN4:	CMPL	(R1)+,(R3)+		; compare one long word
80$:	BEQLU	140$			; if equal, check if done
90$:	BLSSU	130$			; key > data record
	BRB	120$			; key < data record

;
; signed quadword compare
;

IN8:	CMPL	4(R1),4(R3)		; Compare upper longwords.
	BGTR	120$			; If gtr, Key < data.
	BNEQ	130$			; Else if neq, key > data.

	CMPL	(R1),(R3)		; Compare lower longwords.
	BEQLU	140$			; Both longwords match; key = data.
	BLSSU	130$			; key > data.
	BRB	120$			; key < data.

;
; unsigned quadword compare
;

BN8:	CMPL	4(R1),4(R3)		; Compare upper longwords.
	BNEQU	110$			; If nequ, check if done.
	CMPL	(R1),(R3)		; Compare lower longwords.
	BEQLU	140$			; Both longwords match; key = data.
110$:	BLSSU	130$			; Key > data.
					; drop down to 120$ if key < data.

;
; return search key < data record/index
;

120$:	CVTBL	#-1,R0
	BRB	150$

;
; return search key > data record/index
;

130$:	MOVZBL	#1,R0
	BRB	150$

;
; search key segment = data record/index segment
;

140$:	DECL	R5			; decrement number of segments left
	BLEQ	145$			; if none left, exit with match
	BRW	10$			; otherwise, try next segment

;
; return search key = data record/index key
;

145$:	CLRL	R0
150$:	POPR	#^M<R2,R4,R5,R6>
	TSTL	R0			; setup condition codes
	RSB
	.DSABL	LSB
	.END
