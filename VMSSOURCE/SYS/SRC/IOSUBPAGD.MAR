	.TITLE	IOSUBPAGD - PAGED I/O RELATED SUBROUTINES
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; D. N. CUTLER 13-JUN-76
;
; PAGED I/O RELATED SUBROUTINES
;
;
; MODIFIED BY:
;
;	V03-023	HH0049		Hai Huang		16-Aug-1984
;		Define IOC$DALLOC_DMT routine for the file systems
;		to deallocate the device on dismount.
;
;	V03-022	RAS0303		Ron Schaefer		 1-May-1984
;		Correct RAS0292 to allow 1 or 2 leading "_"s.
;
;	V03-021	ACG0420		Andrew C. Goldstein,	20-Apr-1984  14:03
;		Remove extra kernel mode call in IOC$LOCK_DEV and
;		IOC$UNLOCK_DEV; check status in LKSB in LOCK_DEV.
;		Fix logical name length checks.
;
;	V03-020	RAS0292		Ron Schaefer		12-Apr-1984
;		Correct KPL0110 to allow for leading "_" on "NO_TRANS"
;		names.  The NO_TRAN flag merely initializes the translation
;		result block to have the TERMINAL flag set.
;
;	V03-019	KPL0110		Peter Lieberwirth	31-Mar-1984
;		1. Change IOC$SEARCH to allocate a Kernel Request Packet (KRP)
;		to contain $TRNLNM equivalence string because 255 bytes is
;		too much to allocate from the kernel stack.
;
;		2. Change IOC$TRANDEVNAM to honor a new IOC$ bitfield that
;		indicates the caller already translated the logical name so
;		there is no need for TRANDEVNAM to do so.
;
;		3. Use LNM$C_MAXDEPTH for the maximum logical name recursion
;		depth.
;
;	V03-018	ACG0399		Andrew C. Goldstein,	20-Feb-1984  15:45
;		Rewrite of IOC$SEARCHxxx to break out logical name
;		translation and device parsing, clean up media type
;		handling, add handling of device locks, general code
;		cleanup, move in device lock and unlock routines
;		from SYSDEVALC. Move low level parse and search code
;		to IOSUBNPAG so it can be used by IPC.
;
;	V03-017	ROW0288		Ralph O. Weber		24-JAN-1984
;		Correct stupid bug in ROW0266 which made the cure worse than 
;		the disease.
;
;	V03-016	ROW0266		Ralph O. Weber		28-DEC-1983
;		Fix error branch in the convert ASCII to integer routine so 
;		that routine return address is popped from the stack.
;
;	V03-015	CDS0001		Christian D. Saether	16-Dec-1983
;		Add comments reflecting new interpretation of the
;		CCB$B_AMOD field.  The F11BXQP stores a negative
;		value in the access mode field of the first channel
;		available at process creation to reserve it for use
;		by the F11BXQP exclusively.  It is not actually assigned
;		to any specific device.
;
;	V03-014	RAS0213		Ron Schaefer		16-Nov-1983
;		Modify RAS0186 to allow 1 or 2 leading "_"s.   This
;		is necessary to deal with programs that do a $TRNLOG of
;		a device name like SYS$INPUT and get an answer
;		of the form "__TTB3:".
;
;	V03-013	RAS0186		Ron Schaefer		 3-Nov-1983
;		Convert IOC$SEARCHxxx to use $TRNLNM.  For compatibility
;		a leading "_" is recognized as "SS$_NOTRAN" and discarded.
;
;	V03-012	ROW0238		Ralph O. Weber		11-OCT-1983
;		Fix wrong direction branch in ROW0232.
;
;	V03-011	ROW0232		Ralph O. Weber		 4-OCT-1983
;		Modify IOC$SEARCHxxx to return UCB of local path to a device 
;		if both a local path and a served path exist.
;
;	V03-010	ROW0228		Ralph O. Weber		23-SEP-1983
;		Modify IOC$SEARCHxxx device name parser and I/O database 
;		lookup to support device names containing an allocation class 
;		number in place of a node name.  For example, $1$DUA5:, which 
;		means the device DUA5 in allocation class 1.
;
;	V03-009	ROW0217		Ralph O. Weber		 7-SEP-1983
;		Change SEARCHUNIT in IOC$SEARCHxxx to also look for devices on 
;		the secondary DDB chain.
;
;	V03-008	RAS0175		Ron Schaefer		28-Jul-1983
;		Prevent IOC$SEARCHxxx from recognizing "__".
;		This is temporary until IOC$SEARCHxxx is re-written to
;		use $TRNLNM rather than $TRNLOG.
;
;	V03-007	DMW4036		DMWalp			26-May-1983
;		Intergate new logical name structures.
;
;	V03-006	KTA3050		Kerbey T. Altmann	16-May-1983
;		Fix 'off by one' bug in KTA3044.
;
;	V03-005	KTA3044		Kerbey T. Altmann	21-Mar-1983
;		Add support for media type allocation.
;
;	V03-004	KTA3022		Kerbey T. Altmann	29-Dec-1982
;		Enhanced KTA3011.
;
;	V03-003	KTA3011		Kerbey T. Altmann	15-Oct-1982
;		Fixed bug that prevented node names with prefixed "_"
;		from being recognized.  Allow "$" in device names.
;		Support for SCA node names.
;
;	V03-002	ROW0130		Ralph O. Weber		 5-OCT-1982
;		Remove IOC$CREATE_UCB whose functionality is replaced by 
;		routines in module UCBCREDEL.
;
;	V03-001	PHL0100		Peter H. Lipman		01-Jun-1982
;		The sequence $CREMBX, $ASSIGN with a lower case logical
;		name was broken by upcasing device names in IOC$SEARCHDEV.
;		Fix this by trying the TRNLOG with the original string
;		and if NOTRAN, try again with upcased string.
;
;**

	.SBTTL	Declarations
;
; Macro library calls
;
 
	$ACBDEF				; define AST control block
	$CCBDEF				; define CCB offsets
	$CRBDEF				; define CRB offsets
	$DDBDEF				; define DDB offsets
	$DEVDEF				; define device characteristics
	$IOCDEF				; define flag bits
	$IPLDEF				; define IPL levels
	$JIBDEF				; define JIB offsets
	$LCKDEF				; define lock manager symbols
	$LNMDEF				; define LNM offsets
	$LNMSTRDEF			; define LNM block offsets
	$MSCPDEF			; define MSCP offsets
	$PCBDEF				; define PCB offsets
	$PRDEF				; define processor registers
	$PRVDEF				; define privilege bits
	$PSLDEF				; define processor status fields
	$SBDEF				; define system block
	$SSDEF				; define system status values
	$UCBDEF				; define UCB offsets
 
	ASSUME	IOC$V_PHY EQ 0		; optimized to BLBx all over

	.PSECT	Y$EXEPAGED
;
; Local data
;
LNM_TBL:
	.ASCID	"LNM$FILE_DEV"		; logical name table for devices

ESCAPE	= 27				; escape character

	.SBTTL	Find Free I/O Channel

;+
; IOC$FFCHAN - Find Free I/O Channel
;
; This routine is called to search the I/O channel table for a free channel.
;
; INPUTS:
;
;	NONE
;
; OUTPUTS:
;
;	R0 low bit clear indicates failure to find free I/O channel.
;
;		R0 = SS$_NOIOCHAN - no I/O channel available.
;
;	R0 low bit set indicates success with:
;
;		R1 = available channel number.
;		R2 = CCB address for channel in R1
;
;	R3 is preserved across call.
;-
 
IOC$FFCHAN::				; find free I/O channel
	ADDL3	@#CTL$GL_CCBBASE,-
		#CCB$B_AMOD,R0		; base and offset to test assignment
	MNEGL	#CCB$C_LENGTH,R1	; set starting channel index
	MOVZWL	@#CTL$GW_NMIOCH,R2	; get number of I/O channels
	BEQL	20$			; there are none
10$:	TSTB	(R0)[R1] 		; channel assigned?
	BEQL	30$			; if eql no
	SUBL	#CCB$C_LENGTH,R1	; calculate next channel index
	SOBGTR	R2,10$			; any more CCB's to examine?
20$:	MOVZWL	#SS$_NOIOCHAN,R0	; indicate failure
	RSB				;

30$:	MNEGL	R1,R2			; convert to positive value
	CMPW	R2,@#CTL$GW_CHINDX	; check against current hi-water mark
	BLSSU	40$			; no, just leave
	MOVW	R2,@#CTL$GW_CHINDX	; yes, set new mark
40$:	MOVAB	-CCB$B_AMOD(R0)[R1],R2	; load R2 with CCB address
	MNEGL	R1,R1			; make positive
	MOVZWL	#SS$_NORMAL,R0		; indicate success
	RSB				;

	.SBTTL	General I/O Database Search

;+
;
; IOC$SEARCH - general I/O database search
; IOC$SEARCHDEV - search for specific physical device
; IOC$SEARCHALL - generic search for any device
;
; This routine searches the I/O database for the specified device, using
; the specified search rules. Depending on the search, a lock may or may
; not be taken out on the device when it is found.
;
; INPUTS:
;
;	R1 = address of descriptor of device / logical name string
;	R2 = flags
;	R3 = address to store lock value block
;	I/O database mutex held, IPL 2
;
; OUTPUTS:
;
;	R0 = SS$_NORMAL - device found
;	   = SS$_ACCVIO - name string is not readable
;	   = SS$_NONLOCAL - nonlocal device
;	   = SS$_IVLOGNAM - invalid logical name (e.g., too long)
;	   = SS$_TOOMANYLNAM - max. logical name recursion exceeded
;	   = SS$_IVDEVNAM - invalid device name string
;	   = SS$_NOSUCHDEV - device not found
;	   = SS$_NODEVAVL - device exists but not available according to rules
;	   = SS$_DEVALLOC - device allocated to other user
;	   = SS$_NOPRIV - failed device protection
;	   = SS$_TEMPLATEDEV - can't allocate template device
;	   = SS$_DEVMOUNT - device already mounted
;	   = SS$_DEVOFFLINE - device marked offline
;	R1 = UCB
;	R2 = DDB
;	R3 = system block
;	R4 - R11 preserved
;
;	Note: If failure, R1 - R3 point to the last structures looked at.
;
;	R2 and R3 are input only to IOC$SEARCH.
;
;	IOC$SEARCHDEV:	R2 = IOC$M_PHY ! IOC$M_ANY
;			R3 = 0
;	IOC$SEARCHALL:	R2 = IOC$M_ANY ! IOC$M_LOCAL
;			R3 = 0
;
;-

	.ENABLE	LSB

IOC$SEARCHDEV::				; search for specific device
	MOVZBL	#IOC$M_PHY!IOC$M_ANY,R2	; physical device name, no checks
	BRB	10$

IOC$SEARCHALL::				; generic search for any device
	MOVZBL	#IOC$M_ANY!IOC$M_LOCAL,R2 ; no activity checks, local only
10$:	CLRL	R3			; no value block

IOC$SEARCH::				; general purpose I/O search
	PUSHR	#^M<R5,R6,R7,R8,R9,R10,R11>
	MOVAB	G^CTL$GL_KRPFL,R10	; get pointer to KRP lookaside list
	REMQUE	@4(R10),R9		; allocate a KRP
	BVS	30$			; bugcheck if no KRP to use
	MOVL	R9,-(SP)		; save KRP pointer
	MOVQ	R2,R10			; move flags and val block
	BSBB	IOC$TRANDEVNAM		; translate device / logical name
	BLBC	R0,20$			; exit if error
	BSBW	IOC$PARSDEVNAM		; parse device name
	BLBC	R0,20$			; exit if error
	BSBW	IOC$SEARCHINT		; and do the search
20$:	MOVQ	R5,R1			; move UCB and DDB address
	MOVL	R7,R3			; and system block
	MOVL	(SP)+,R9		; restore KRP address
	MOVAB	G^CTL$GL_KRPFL,R10	; get address of KRP lookaside list
	INSQUE	(R9),@4(R10)		; deallocate the KRP to its list
	POPR	#^M<R5,R6,R7,R8,R9,R10,R11>
	RSB

30$:	BUG_CHECK	KRPEMPTY,FATAL
	.DISABLE LSB

	.SBTTL	Translate Logical Device Name

;+
;
; IOC$TRANDEVNAM - translate logical device name
;
; This routine applies iterative logical name translation to the specified
; device name. In addition, the string is upcased, if translated.
;
; Input buffer should be large enough to contain a logical name equivalence
; string and 5 bytes of logical name block overhead.  The overhead is
; required because this routine calls an internal logical name routine to
; do the translation instead of the slower $TRNLNM.  The additional 5 bytes
; are lnm processing overhead, specifically a LNMX.
;
; INPUTS:
;
;	R1 = address of logical name string descriptor.
;	     ***** this string has not yet been probed,
;	     ***** but the descriptor has been.
;
;	R2 = IOC$ flags, specifically:
;		IOC$V_NO_TRANS - if set, caller already translated logical name
;  
;	R9 = buffer in which to store translated device name
;	     (length is assumed to be <LNM$C_NAMLENGTH + LNMX$T_XLATION+1>)
;
; OUTPUTS:
;
;	R0 = SS$_NORMAL - successful translation
;	   = SS$_ACCVIO - name string is not readable
;	   = SS$_NONLOCAL - nonlocal device
;	   = SS$_IVLOGNAM - invalid logical name (e.g., too long)
;	   = SS$_TOOMANYLNAM - logical name recursion depth exceeded
;	R8 = length of translated string
;	R9 = address of translated string
;	   Note: translated string may not begin at the beginning of the
;	   output buffer, ie R9 may point into the input buffer, ie
;	   R9 not preserved
;
;-

;
; case_blind flag (r5 input) for lnm$search_one, concatenate user mode for
; now
;
M_CASE_BLIND	= ^X0103

	.ENABLE	LSB

IOC$TRANDEVNAM::
	PUSHR	#^M<R2,R3,R4,R5,R6,R7>	; save working registers
	MOVZWL	(R1),R8			; get length of device/logical name
	BEQL	20$			; if eql invalid name
	CMPW	R8,#LNM$C_NAMLENGTH	; name too long?
	BGTRU	20$			; if gtru yes
	MOVL	4(R1),R0		; get address of device/logical name
	ASSUME	LNM$C_NAMLENGTH LE 512	; ok to use single probe
	IFNORD	R8,(R0),10$		; probe logical name buffer
	CLRQ	(R9)			; and init output buffer lnmx
	BBC	#IOC$V_NO_TRANS,R2,1$	; branch if RMS did not do the $TRNLNM
	BBSS	#LNMX$V_TERMINAL,-	; set terminal flag so no translations
		LNMX$B_FLAGS(R9),1$	;  are actually done
1$:	MOVC3	R8,(R0),-		; copy logical name into buffer
		<LNMX$T_XLATION+1>(R9)	;
	MOVL	@#CTL$GL_PCB,R4		; set up PCB address for search_one
	MOVL	#LNM$C_MAXDEPTH,R7	; maximum number of translations
	MOVL	R9,R6			;  r6 is output lnmx from search_one
	MOVAB	<LNMX$T_XLATION+1>(R9),-;  r9 is input buffer for search_one
		R9
	BRB	50$			; previous (non-existent) translation

10$:	MOVZWL	#SS$_ACCVIO,R0		; name buffer not readable
	BRB	25$
20$:	MOVZWL	#SS$_IVLOGNAM,R0	; invalid logical name
25$:	BRB	120$
;
; Try to translate a logical name, using a fast, internal interface.
; Note that LNM$SEARCH_ONE only returns translations for equivalence
; names for index 0, IE, no search_lists.
;
; R8 = size of name string to translate
; R9 = address of name string to translate

30$:	MOVQ	R8,R0			; descriptor of logical name
	MOVZWL	LNM_TBL,R2		; get table name length
	MOVL	LNM_TBL+4,R3		; table name address
	MOVZWL	#M_CASE_BLIND,R5	; indicate case_blind, user mode
	JSB	LNM$SEARCH_ONE		; translate the logical name
	BLBS	R0,35$			; successful translation
	CMPW	#SS$_NOLOGNAM,R0	; if failed to translate logical name
	BNEQ	120$			; quit if abnormal
	BBCS	#LNMX$V_TERMINAL,-	; no more translations
		LNMX$B_FLAGS(R6),40$	;
35$:	MOVZBL	LNMX$T_XLATION(R6),R8	; size of translated string
40$:	MOVAB	<LNMX$T_XLATION+1>(R6),R9 ; and address of equivalence string

;
; R8 = size of (logical) device name string
; R9 = address of (logical) device name string
;
50$:	CMPB	#ESCAPE,(R9)		; RMS IFI on the front?
	BNEQ	70$			; branch if not
	ADDL	#4,R9			; skip around the PPF data
	SUBL	#4,R8			; and adjust size of device string
60$:	BLEQ	20$			; branch if bad device name

;
; Take an underscore or two off the front.  If any are removed, then
; the device that follows must not be translated any further.  Note
; that the device after the RMS process permanent file data may be
; a logical device name.
;

70$:	CMPB	#^A'_',(R9)		; leading underscore?
	BNEQ	80$			; branch if not
	INCL	R9			; strip it off
	DECL	R8			; and adjust the count
	BLEQ	60$			; branch if bad device name
	BBSS	#LNMX$V_TERMINAL,-	; flag no more translations
		LNMX$B_FLAGS(R6),75$
75$:	CMPB	#^A'_',(R9)		; try for a second "_"
	BNEQ	80$			; branch if not
	INCL	R9			; strip it off
	DECL	R8			; and adjust the count
	BLEQ	60$			; branch if bad device name

;
; At this point R8,R9 describe a string which is either the initial
; string passed to this routine or a translation of it.  A check will
; now be made to see if this string contains a "::" and is thus a
; nodename.  If not and there were leading "_", then it is a physical
; device name and the translations will be skipped. If no leading "_"
; then the string up to but not including the ":" (if present) will
; be a candidate for translation.  This translation will be attempted
; if the result of a previous translation was not SS$_NOTRAN and if
; the iteration counter has not expired.
;

80$:	LOCC	#^A':',R8,(R9)		; search string for a colon
	BEQL	90$			; if eql colon not found
	DECL	R0			; possibly a node name?
	BEQL	90$			; if eql no
	CMPB	#^A':',1(R1)		; next character a colon?
	BEQL	130$			; if eql yes

90$:	SUBL3	R9,R1,R8		; size of string up to colon
	BBS	#LNMX$V_TERMINAL,-	; last translation?
		LNMX$B_FLAGS(R6),110$	; branch if yes, don't do another
	SOBGEQ	R7,100$			; loop if iteration count not exhausted
					; n+1 iterations for n translations
	BRB	125$			; skip over loop
100$:	BRW	30$			; branch to top of loop

110$:	MOVL	#SS$_NORMAL,R0		; indicate success
120$:	POPR	#^M<R2,R3,R4,R5,R6,R7>	; restore registers
	RSB

125$:	MOVZWL	#SS$_TOOMANYLNAM,R0	; too many equivalence strings defined
	BRB	120$
;
; Nonlocal device
;
130$:	MOVZWL	#SS$_NONLOCAL,R0	; set nonlocal device
	BRB	120$

	.DISABLE LSB

	.SBTTL	Take Out Cluster-wide Device Lock

;+
;
; IOC$LOCK_DEV
;
; FUNCTIONAL DESCRIPTION
;	Determine the device's allocation name and take out a cluster-wide
;	lock on that name.
;
; INPUTS:
;	R0	- lock mode for cluster-wide lock (e.g. LCK$K_EXMODE)
;	R1	- address of a 16-byte buffer to be used as lock value block,
;		  if the contents of the value block are to be returned.
;		  If R1 = zero no value block is used.
;	R4	- PCB address
;	R5	- UCB address
;
; IMPLICIT INPUTS:
;	IPL = IPL$_ASTDEL
;	Process is holding I/O data base mutex
;
; OUTPUTS:
;	R0	- LBS means successful lock.
;	R1	- if R0 signals success, R1 will contain the lock id.
;
; IMPLICIT OUTPUTS:
;	The lock id is stored in UCB$L_LOCKID.
;	If R0 signals success and the lock value block data was requested,
;	it is returned in the user's buffer.
;
;-

IOC$LOCK_DEV::
	PUSHR	#^M<R2,R3,R6,R7,R8>	; Save some registers.
	MOVQ	R0,R7			; Save lock mode and val block addr
;
; We must construct a resource name to use when locking the device.  Allocate
; a buffer to hold the name on the stack, then use IOC$CVT_DEVNAM to
; construct the resource name.
;
	MOVAL	-16(SP),SP		; Reserve space for device name.
	MOVL	SP,R1			; R1 = buffer address for device name.
	PUSHL	#^A'SYS$'		; Prefix system code to resource name.
	MOVL	SP,R2			; Save address of buffer.
	MOVL	#16,R0			; R0 = buffer length for device  name.
	MOVL	R4,R3			; Save PCB address.
	MOVL	#1,R4			; Signal we want alloc_class+device name.
	JSB	IOC$CVT_DEVNAM		; Get back device name.
	MOVL	R3,R4			; Restore PCB address.
	BLBC	R0,60$			; exit on error
	ADDL	#4,R1			; Add space for SYS$ code name to
					; returned length of device name string.
;
; Now attempt to take out a lock on the device's resource name.
; At this point, the registers contain:
;	R1	- length of resource name
;	R2	- address of buffer containing resource name
;
	MOVL	#<LCK$M_CVTSYS-		; indicate system-owned lock,
		 !LCK$M_NOQUEUE-	; return success/failure immediately,
		 !LCK$M_SYNCSTS-	; return success synchronously
		 !LCK$M_SYSTEM-		; system lock space
		 !LCK$M_VALBLK>,R0	; indicate value block present,
	CLRQ	-(SP)			; initialize lock value block
	CLRQ	-(SP)
	TSTL	R8			; see if value block supplied
	BEQL	10$			; branch if none
	MOVQ	(R8),(SP)		; set up correct value block
	MOVQ	8(R8),8(SP)		; just in case we're converting down
10$:	PUSHL	UCB$L_LOCKID(R5)	; Get current lock, if any
	BEQL	20$			; branch if none
	BISL	#LCK$M_CONVERT,R0	; else make this a conversion
20$:	CLRL	-(SP)			; rest of LKSB
	MOVL	SP,R3			; Save address of lock status block.
	MOVQ	R1,-(SP)		; Device name string descriptor
;
; We build the arg list and call the system lock manager subroutines
; directly to avoid the system service dispatcher. This permits us to
; retain the I/O database mutex during the lock manager call.
;
	CLRQ	-(SP)			; zero reserved arg & acmode
	CLRQ	-(SP)			; zero blkast & astprm
	CLRQ	-(SP)			; zero astadr & parid
	PUSHAB	24(SP)			; resnam
	PUSHL	R0			; flags
	PUSHL	R3			; lksb
	PUSHL	R7			; lkmode
	CLRL	-(SP)			; efn
	CALLS	#11,SYS$ENQ
	BLBC	R0,30$			; Branch if lock failed.
	MOVZWL	(R3),R0			; get status from lksb
	BLBC	R0,30$			; Branch if lock failed.
35$:	MOVZWL	#SS$_NORMAL,R0		; Change possible SS$_SYNCH to SS$_NORMAL.
	BRB	40$
30$:	CMPW	R0,#SS$_VALNOTVALID	; check for value block not valid
	BEQL	35$			; ignore this error
	CMPW	R0,#SS$_NOTQUEUED	; see if lock held elsewhere
	BNEQ	40$			; some other error
	MOVZWL	#SS$_DEVALLOC,R0	; convert to "device allocated"
;
; Store user outputs.
;
40$:	TSTL	R8			; Did user request value block?
	BEQL	50$			; No: skip store of value block.
	MOVQ	8(R3),(R8)		; First quadword into user's buffer.
	MOVQ	16(R3),8(R8)		; Second quadword into user's buffer.
50$:	MOVL	4(R3),R1		; Return lock id in R1.
	MOVL	R1,UCB$L_LOCKID(R5)	; Also save it in the UCB.
; 
; Clean off stack.
;
	MOVAL	32(SP),SP		; Pop lock status and value block.
60$:	MOVAL	20(SP),SP		; Pop device name buffer off stack.
70$:	POPR	#^M<R2,R3,R6,R7,R8>	; Restore the registers.
	RSB				; restore previous PSL

	.SBTTL	Deallocate Device Cluster-wide

;+
;
; IOC$DALLOC_DEV
;
; FUNCTIONAL DESCRIPTION:
;
;	Deallocate a device.  If the device is available cluster-wide, also
;	dequeue the lock on that device.
;
; INPUTS:
;	R4	Address of PCB
;	R5	Address of UCB
;
; IMPLICIT INPUTS:
;	IPL = IPL$_ASTDEL
;	Process holds I/O data base mutex
;
; OUTPUTS:
;	R0	SS$_NORMAL	- Device deallocated.
;		SS$_DEVNOTALLOC	- Device wasn't allocated.
;
;-

IOC$DALLOC_DEV::
	MOVZWL	#SS$_DEVNOTALLOC,R0	; Assume device not allocated.
	BBCC	#DEV$V_ALL,UCB$L_DEVCHAR(R5),40$
;
; Clear allocation fields from local UCB. The owner PID is cleared
; if the device is shareable or if this is the last reference.
;
	BBC	#DEV$V_SHR,UCB$L_DEVCHAR(R5),10$
	CLRL	UCB$L_PID(R5)		; Clear out owner field.
10$:	DECW	UCB$W_REFC(R5)		; Decrement refcount.
	BNEQ	20$			; branch if channels still assigned
	CLRL	UCB$L_PID(R5)		; Clear out owner field.
	BSBW	IOC$LAST_CHAN		; do final device cleanup
	BBC	#DEV$V_CLU,UCB$L_DEVCHAR2(R5),30$
					; Branch if strictly a local device.
20$:	BSBB	IOC$UNLOCK_DEV		; Dequeue the cluster-wide lock
30$:	MOVZWL	#SS$_NORMAL,R0		; Signal normal successful completion.
40$:	RSB

	.SBTTL	Release Cluster-wide Device Lock

;+
;
; IOC$UNLOCK_DEV
;
; FUNCTIONAL DESCRIPTION:
; 	Dequeue the cluster-wide lock as called for by the UCB's state.
;	If it's still allocated we do nothing. If there are still
;	channels assigned, we just demote the lock to CR.
;
; INPUTS:
;	R5 - address of UCB
;
; IMPLICIT INPUTS:
;	UCB$L_LOCKID(R5) contains the ID of the lock to dequeue.
;	Caller is at IPL$_ASTDEL, and holds the I/O database mutex.
;
; OUTPUTS:
;	R0 - status of call to $DEQ.
;
;-

IOC$UNLOCK_DEV::
	MOVL	#SS$_NORMAL,R0		; Assume success.
	TSTL	UCB$L_PID(R5)		; see if it's still allocated
	BNEQ	20$			; branch if yes
	MOVL	UCB$L_LOCKID(R5),R1	; Lock present for this device?
	BEQL	20$			; Branch if no lock for this device.
	MOVQ	R0,-(SP)		; build lksb on stack
	CLRQ	-(SP)			; zero flags & acmode
	CLRL	-(SP)			; zero value block
	TSTW	UCB$W_REFC(R5)		; check reference count
	BNEQ	30$			; if non-zero, must convert to CR
	PUSHL	R1			; lkid
	CALLS	#4,SYS$DEQ
	CLRL	UCB$L_LOCKID(R5)	; Clear the lock id field.
10$:	ADDL	#8,SP			; clean the stack
20$:	RSB
;
; To here if the UCB still has channels assigned. We convert the lock
; down to CR. Note that 3 null arguments are already on the stack.
;
30$:	CLRQ	-(SP)			; zero astprm & astadr
	CLRQ	-(SP)			; zero parid & resnam
	PUSHL	#<LCK$M_CVTSYS-		; indicate system-owned lock,
		 !LCK$M_NOQUEUE-	; return success/failure immediately,
		 !LCK$M_SYNCSTS-	; return success synchronously
		 !LCK$M_CONVERT>	; conversion
	PUSHAB	32(SP)			; lksb
	PUSHL	#LCK$K_CRMODE		; lkmode
	CLRL	-(SP)			; efn
	CALLS	#11,SYS$ENQ
	BRB	10$

	.SBTTL	Unlock I/O Database and Return Status

;+
; IOC$UNLOCK - unlock I/O data base and return status
;
; This routine is jumped to at the end of an I/O related system service to
; unlock the I/O data base, set the current processor priority to zero,
; and to return status to the change mode dispatcher.
;
; INPUTS:
;
;	R0 = final system service status value.
;
; OUTPUTS:
;
;	The I/O data base is unlocked, the current processor priority is set
;	to zero, and a return to the change mode dispatcher is executed.
;-
 
IOC$UNLOCK::				; unlock I/O data base and return status
	PUSHL	R0			; save final system service status value
	MOVL	CTL$GL_PCB,R4		; get PCB address
	BSBW	SCH$IOUNLOCK		; unlock I/O data base
	SETIPL	#0			; allow all interrupts
	MOVL	(SP)+,R0		; retrieve final service status value
	RET				;

		
	.SBTTL	Verify I/O Channel Number

;+
; IOC$VERIFYCHAN - verify I/O channel number
;
; This routine is called to verify and translate an I/O channel number to
; a CCB address. The channel is checked for accessibility by the previous
; access mode.
;
; INPUTS:
;
;	R0 = I/O channel number in low order word
;
; OUTPUTS:
;
;	R0 low bit clear indicates failure to verify.
;
;		R0 = SS$_IVCHAN - invalid channel number.
;		R0 = SS$_NOPRIV - no privilege to access channel.
;		R1 = address of CCB if R0 = SS$_NOPRIV
;
;	R0 low bit set indicates verify success with:
;
;		R1 = address of CCB.
;		R2 = channel index.
;-
 
IOC$VERIFYCHAN::			; verify I/O channel number
	BICL	#<^XFFFF0000!<CCB$C_LENGTH-1>>,R0 ; clear extraneous bits
	BEQL	10$			; if eql invalid channel
	CMPW	R0,@#CTL$GW_CHINDX	; legal channel number?
	BGTRU	10$			; if gtru no
	MNEGL	R0,R2			; convert to channel index
	MOVAB	@CTL$GL_CCBBASE[R2],R1	; get address of corresponding CCB
	MOVPSL	R3			; read current PSL
	EXTZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,R3,R3 ; extract previous mode field
	MOVZWL	#SS$_NOPRIV,R0		; assume caller does not have privilege
	CMPB	R3,CCB$B_AMOD(R1)	; caller have privilege to access channel?
	BGEQ	20$			; if geq no - this must be a signed test
;
; Note that the privilege test comparing caller's mode to the access mode
; field of the channel must be a signed comparison.  The F11BXQP reserves
; a channel for use by itself by manually locating a free channel (using
; IOC$FFCHAN) and then storing -1 in the access mode field, when the channel
; is not being actively used by the XQP for logical I/O.  This effectively
; blocks anything, including kernel mode rundown, or any other kernel mode
; code, from messing with the channel.  Of course, when the XQP wants to
; use the channel itself, it modifies the CCB$B_AMOD and CCB$L_UCB fields
; to look like a normal kernel mode channel to the device of its choice.
;

	BBCS	#0,R0,20$		; indicate success
10$:	MOVZWL	#SS$_IVCHAN,R0		; set invalid channel
20$:	RSB				;
 

	.SBTTL	Deallocate device on dismount
;++
; IOC$DALLOC_DMT
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine deallocates the device if the device is marked 
;	"deallocate on dismount", or if the device owner has gone away. 
;	This routine is called by the file systems' CHECK_DISMOUNT 
;	routines, and by IOC$DISMOUNT when dismounting a foreign volume.
;
; CALLING SEQUENCE:
;	JSB IOC$DALLOC_DMT
;
; INPUT:
;	R4 = address of the process PCB
;	R5 = device UCB address
;
; OUTPUT:
;	NONE.	
;
; IMPLICIT IMPUT:
;	IPL = IPL$_ASTDEL
;	Process holds I/O database mutex
;
; ROUTINE VALUE:
;	R0 = SS$_NORMAL		- normal successful completion,
;				  device deallocated when appropriate
;	     SS$_DEVNOTALLOC    - device wasn't allocated
; 
; SIDE EFFECTS:
;	R1, R3 destroyed.
;
;--
IOC$DALLOC_DMT::
	MOVZWL	#SS$_DEVNOTALLOC,R0	; Assume device not allocated.
	BBC	#DEV$V_ALL, -		; If device not allocated, 
		UCB$L_DEVCHAR(R5), 20$	; return to caller.

	MOVZWL	#SS$_NORMAL,R0		; Assume success.
	BBSC	#UCB$V_DEADMO, -	; Check for deallocate on dismount
		UCB$W_STS(R5), 10$	; branch if yes.

	MOVZWL	UCB$L_PID(R5),R1	; Pick up device owner's PID.
	MOVL	@L^SCH$GL_PCBVEC[R1],R1	; Get device owner's PCB address.
	CMPL	UCB$L_PID(R5), -	; Has the device owner gone away ?
		PCB$L_PID(R1)		; 
	BEQL	20$			; If eql no, return to caller.

10$:	BSBW	IOC$DALLOC_DEV		; else complete the deallocation now.
20$:	RSB				

	.END
