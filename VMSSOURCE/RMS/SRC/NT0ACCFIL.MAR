	$BEGIN	NT0ACCFIL,000,NF$NETWORK,<COMMON FILE ACCESS ROUTINES>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module contains commonly used file access support routines.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	09-DEC-1977
;
; Modified By:
;
;	V03-018	JEJ0039		J E Johnson		19-Jun-1984
;		Fix NT$GET_FILESPEC to recognize that a resultant file
;		spec has already been given back.  This is of importance
;		because of the possible open loop in NT$OPEN regarding to
;		BRO option.
;
;	V03-017	JAK0145		J A Krycka	12-APR-1984
;		Track changes in DAP message building algorithm.
;
;	V03-016	JAK0138		J A Krycka	28-MAR-1984
;		Use process or system network block count value (PIO$GB_DFNBC
;		or SYS$GB_DFNBC) instead of process buffered I/O byte limit
;		quota (BYTLM value from the UAF) as the basis for calculating a
;		requested DAP buffer size to send to the remote FAL in the DAP
;		Configuration message. SET RMS_DEFAULT and SHOW RMS_DEFAULT will
;		allow the network block count value to be set from 1 to 127.
;		The size of NBC affects both file transfer performance and the
;		largest record that can be exchanged in record I/O mode. The
;		remote FAL, of course, can force a smaller DAP buffer size (than
;		RMS requests) to be used.
;
;	V03-015	JAK0133		J A Krycka	20-MAR-1984
;		Lay framework for use of logical link QIOs to transfer more
;		than 4K bytes of data.
;
;	V03-014	RAS0223		Ron Schaefer	16-Dec-1983
;		Change $SCBDEF and SCB$xxx to $FSCBDEF and FSCB$xxx.
;
;	V03-013	JAK0127		J A Krycka	12-SEP-1983
;		Correct NT$GET_FILESPEC to properly check for elipsis in
;		directory component of a file specification.
;
;	V03-012	JAK0105		J A Krycka	11-MAY-1983
;		Enable access to large records (over 512 bytes in length) based
;		on the negotiated DAP buffer size.
;
;	V03-011	KRM0107		K Malik		10-May-1983
;		Update to support DAP V7.0 specification.
;
;	V03-010	JAK0104		J A Krycka	22-APR-1983
;		Enhance NT$EXCH_CNF to dynamically determine a suggested DAP
;		buffer size to send to FAL (instead of using a predetermined
;		value) based on BYTLM quota obtained from a call to $GETJPI.
;
;	V03-009	KRM0079		K Malik		31-Jan-1983
;		Turn on indirect command file support.
;
;	V03-008	KRM0053		K Malik		10-Aug-1982
;		Move nodename from FWA$T_NODEBUF to NWA$T_NODEBUF (used by
;		NT$CRC_LOGERR)
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPCNFDEF			; Define DAP Configuration message
	$DAPACCDEF			; Define DAP Access message
	$FABDEF				; Define File Access Block symbols
	$FWADEF				; Define File Work Area symbols
	$IFBDEF				; Define IFAB symbols
	$NWADEF				; Define Network Work Area symbols
	$FSCBDEF			; Define Scan Control Block symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	NWA$Q_FLG EQ 0

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$EXCH_CNF - EXCHANGE DAP CONFIGURATION MESSAGES

;++
; NT$EXCH_CNF - engages in a DAP dialogue to exchange DAP Configuration
;	messages with the remote FAL which includes negotiation of a DAP
;	buffer size for subsequent message exchange.
;
; Calling Sequence:
;
;	BSBW	NT$EXCH_CNF
;
; Input Parameters:
;
;	R0	Type of file access (DAP ACCFUNC code)
;	R7	NWA address (=DAP)
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	DAPDEF constants
;	DAP$W_BUFSIZ
;	FWA$T_NODEBUF
;	IFB$L_DEVBUFSIZ
;	PIO$GB_DFNBC
;	SYS$GB_DFNBC
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R6	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	DAP control block
;	NWA$W_DAPBUFSIZ
;	NWA$T_NODEBUF
;	NWA$B_NODBUFSIZ
;	NWA$B_FILESYS
;	NWA$B_OSTYPE
;	NWA$Q_RCV
;	NWA$Q_XMT
;	NWA$Q_BIGBUF
;	IFB$L_DEVBUFSIZ
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$EXCH_CNF::				; Entry point

;
; Obtain specified Network Block Count (NBC) value which is a sysgen parameter
; and also settable via the DCL command SET RMS_DEFAULT/NETWORK_BLOCK_COUNT = n.
;

	CVTBL	@#PIO$GB_DFNBC,R5	; Get process network block count value
	BGTR	10$			; Branch if specified (non-zero & pos)
	CVTBL	@#SYS$GB_DFNBC,R5	; Get system network block count value
	BGTR	10$			; Branch if specified (non-zero & pos)
	MOVL	#1,R5			; We should never get here as range of
					;  DFNBC sysgen parameter is 1 to 127
10$:	CMPB	R5,#127			; Make internal NBC value between 1 and
	BNEQ	20$			;  126 so that requested DAP buffer size
	DECL	R5			;  (with overhead) will be < 65536 bytes

;
; Dispatch to file operation specific code to process network block count.
;

	ASSUME	DAP$K_OPEN EQ 1
	ASSUME	DAP$K_CREATE EQ 2
	ASSUME	DAP$K_RENAME EQ 3
	ASSUME	DAP$K_ERASE EQ 4
	ASSUME	DAP$K_DIR_LIST EQ 6

20$:	$CASEB	SELECTOR=R0-		; Dispatch on file access type
		BASE=#DAP$K_OPEN-	;
		DISPL=<-		;
		    OPEN_CREATE-	; Open file
		    OPEN_CREATE-	; Create file
		    ERASE_RENAME-	; Rename file
		    ERASE_RENAME-	; Erase file
		    ERASE_RENAME-	; Reserved
		    SEARCH-		; Search file (DAP directory list)
		>			; Any other type of access

;+
; For erase and rename operations set NBC to one for minimum DAP buffer size.
;-

ERASE_RENAME:				; For $ERASE and $RENAME operations
	MOVL	#1,R5			; One page of memory is sufficient
	BRB	EXCH_COMMON		; Join common code

;+
; For a search operation, scale down NBC (DAP buffer size) by a factor of four
; to reduce the time waiting for FAL to send the next bufferred set of messages,
; especially when FAL must open each file to return file attribute information.
; This will help to "smooth out" the display for the DCL DIRECTORY command.
;
; However, for access to a process permanent file, set NBC to one for minimum
; DAP buffer size to conserve use of the process I/O segment in P1 space.
;-

SEARCH:					; For $SEARCH operation
	BLBS	(R11),10$		; Branch if not accessing a process
	MOVL	#1,R5			;  permanent file, else use one block
10$:	ADDL2	#3,R5			; Reduce NBC to approximately one-fourth
	ASHL	#-2,R5,R5		;  its value
	BRB	EXCH_COMMON		; Join common code

;+
; For open and create operations use the specified NBC value as the basis for
; generating requested DAP buffer size unless we have a process permanent file.
;
; For access to a process permanent file, scale down NBC (DAP buffer size) by a
; factor of eight to conserve use of the process I/O segment in P1 space that
; is available to RMS. This reduction serves to increase the total number of
; process permanent files that can be simultaneously open for network access.
; Since the DCL OPEN command opens a process permanent file and the DCL READ and
; and WRITE commands are limited to 2048 byte records, the maximum NBC value
; will be 4 for process permanent files.
;-

OPEN_CREATE:				; For $OPEN and $CREATE operations
	BLBS	(R11),EXCH_COMMON	; Branch if not accessing a process
					;  permanent file
	ADDL2	#7,R5			; Reduce NBC to approximately one-eighth
	ASHL	#-3,R5,R5		;  its value but not more than 4, so the
	CMPL	R0,#4			;  resultant value is in the range of
	BLEQ	EXCH_COMMON		;  1 to 4 blocks
	MOVL	#4,R5			;

;+
; Compute DAP buffer size to request in the DAP Configuration message based on:
;   (1)	the (modified) network block count value,
;   (2) the addition of up to 8 bytes of overhead per DAP DATA message,
;   (3) the desire to be able to block a DAP CONTROL message with the first set
;	of blocked DATA messages in file transfer mode,
;   (4) the desire to have the DAP buffer fit into the nominal line buffer size
;	of 576 bytes (which includes lower layer protocol overhead) when the NBC
;	is one or the remote FAL can support only a one block data buffer.
;-

EXCH_COMMON:				; Compute DAP buffer size to request
	CMPL	R5,#8			; Choose a formula based on NBC size
	BLEQ	10$			;  to optimize requested buffer size
	MOVZWL	#<512+8>,R6		; Compute desired buffer size using the
	MULL2	R5,R6			;  formula: (NBC * (512+8)) where
	BRB	EXCH_INIT		;  NBC has a value from 9 to 126
10$:	MOVZWL	#<512+4>,R6		; Compute desired buffer size using the
	MULL2	R5,R6			;  formula: (NBC * (512+4) + 28) where
	ADDL2	#28,R6			;  NBC has a value from 1 to 8

;+
; Initialize the DAP control block and the transmit and receive buffers in the
; NWA. These buffers will be used to exchange DAP Configuration messages, then
; they may be replaced by larger DAP buffers if the negotiated DAP buffer size
; is larger than NWA$C_BUFFERSIZ. Note that the transmit buffer is used for
; both building a new DAP message (BLD descriptor) and for concatenating DAP
; messages before sending them to FAL (XMT descriptor).
;-

EXCH_INIT:				; Initialize control block and buffers
	$ZERO_FILL-			; Zero DAP control block
		DST=(R7)-		;
		SIZE=#DAP$C_BLN		;

	ASSUME	NWA$C_BUFFERSIZ GE <512+4+28>
	ASSUME	NWA$Q_XMT EQ NWA$Q_RCV+8

	MOVAQ	NWA$Q_RCV(R7),R0	; Get start address of descriptors
	CLRL	(R0)+			; Initialize receive descriptor
	MOVAB	NWA$T_RCVBUF(R7),(R0)+	;
	CLRL	(R0)+			; Initialize transmit descriptor
	MOVAB	NWA$T_XMTBUF(R7),(R0)+	;
	MOVW	#NWA$C_BUFFERSIZ,-	; Make the preallocated buffer size
		NWA$W_DAPBUFSIZ(R7)	;  the current DAP buffer size

;+
; Build and send DAP Configuration message to partner.
;-

SEND_CNF:				; (required message)
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CNF_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVW	R6,(R5)+		; Store BUFSIZ field (desired value)
	MOVB	#DAP$K_VAXVMS,(R5)+	; Store OSTYPE field
	MOVB	#DAP$K_RMS32,(R5)+	; Store FILESYS field
	MOVB	#DAP$K_VERNUM_V,(R5)+	; Store VERNUM field
	MOVB	#DAP$K_ECONUM_V,(R5)+	; Store ECONUM field
	MOVB	#DAP$K_USRNUM_V,(R5)+	; Store USRNUM field
	MOVB	#DAP$K_DECVER_V,(R5)+	; Store DECVER field
	MOVB	#DAP$K_USRVER_V,(R5)+	; Store USRVER field
	MOVL	#DAP$K_SYSCAP1_V,R1	; Get VAX supported capabilities
	MOVL	#DAP$K_SYSCAP2_V,R2	;  quadword mask
	BSBW	NT$CVT_BN8_EXT		; Store SYSCAP as an extensible field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Configuration message to FAL
	BLBS	R0,RECV_CNF		; Branch on success
ERROR1:	BRW	ERROR			; Branch on failure

;+
; Receive DAP Configuration message response from partner.
;-

RECV_CNF:				; (required message)
	$SETBIT	#DAP$K_CNF_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of configuration msg
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,ERROR1		; Branch on failure
	MOVB	DAP$B_OSTYPE(R7),-	; Save OSTYPE field in NWA
		NWA$B_OSTYPE(R7)	;
	MOVB	DAP$B_FILESYS(R7),-	; Save FILESYS field in NWA
		NWA$B_FILESYS(R7)	;

;+
; Determine the 'agreed upon' DAP buffer size to use and save this value.
; It is the smaller of partner's buffer size and our requested buffer size.
;-

	MOVW	R6,NWA$W_DAPBUFSIZ(R7)	; Assume we'll use requested buffer size
	TSTW	DAP$W_BUFSIZ(R7)	; Use our buffer size if partner
	BEQL	10$			;  has unlimited buffer space
	CMPW	DAP$W_BUFSIZ(R7),R6	; Use our buffer size if partner
	BGEQU	10$			;  has buffer size GEQ ours
	MOVW	DAP$W_BUFSIZ(R7),-	; Use partner's buffer size which is
		NWA$W_DAPBUFSIZ(R7)	;  smaller than ours

;+
; Allocate big DAP buffers if standard size buffers already allocated as part of
; the NWA are not sufficient. Note that the transmit buffer will be twice the
; size of the receive buffer (or twice NWA$W_DAPBUFSIZ) as it is used for both
; building new DAP messages and for concatenating DAP messges before sending
; them to FAL. The overflow buffer space may be used when a new message is being
; constructed and there are messages already blocked in the transmit buffer.
;-

10$:	MOVZWL	NWA$W_DAPBUFSIZ(R7),R6	; Get negotiated DAP buffer size
	CMPW	R6,#NWA$C_BUFFERSIZ	; Use standard buffers if they are large
	BLEQU	20$			;  enough
	ADDL2	#7,R6			; Round up buffer size to quadword
	BICL2	#7,R6			;  boundary
	MULL3	#3,R6,R2		; Compute size of desired receive buffer
					;  plus a double-length transmit buffer
	BSBW	RM$GETPAG		; Allocate space (NOT ZEROED)
	BLBC	R0,ERROR		; Branch on failure
	MOVQ	R2,NWA$Q_BIGBUF(R7)	; Update big buffer descriptor
	MOVL	R3,NWA$Q_RCV+4(R7)	; Update receive descriptor
	ADDL2	R6,R3			; Move pointer to next buffer
	MOVL	R3,NWA$Q_XMT+4(R7)	; Update transmit descriptor

;+
; Determine the maximum record size that can be supported for network access
; in record I/O operations. This is accomplished by examining the negotiated
; DAP buffer size and then updating the device buffer size value in the IFAB
; (if appropriate from its initial setting in NT$MOD_DEV_CHAR).
;
; The value in IFB$L_DEVBUFSIZ establishes the network record size limit as
; this value is used by RMS at $CONNECT time to allocate the BDB buffer. The
; size of this buffer determines the largest record that can be moved to/from
; user's buffer during $GET, $PUT, and $UPDATE operations on a remote file.
;
; The algorithm establishes a maximum record size that is equal to 1 to 64 pages
; of memory (i.e., 512, 1024, ..., 32768 bytes).
;
; Note that IFB$L_DEVBUFSIZ does not limit the size of a user block I/O request
; which can be from 1 to 127 blocks.
;-

20$:	MOVZWL	NWA$W_DAPBUFSIZ(R7),R6	; Get negotiated DAP buffer size
	SUBL2	#8,R6			; Subtract DAP DATA message overhead
	ASHL	#-9,R6,R6		; Compute # whole pages
	BEQL	FINISH			; Keep initial value if DAPBUFSIZ < 520
	CMPB	R6,#64			; Limit value to 64 pages as the largest
	BLEQU	30$			;  record defined by RMS is slightly
	MOVZBL	#64,R6			;  less than 32K bytes
30$:	ASHL	#9,R6,IFB$L_DEVBUFSIZ(R9);Compute largest record size supported


;+
; While we have both a FWA and a NWA, move the nodename (sans delimiters or
; access strings) and the nodename size to NWA$T_NODEBUF & NWA$B_NODBUFSIZ
; for use by NT$CRC_LOGERR.
;-

FINISH:					; Miscellaneous
	MOVAB	FWA$T_NODEBUF(R10),R3	; Get address of nodename (spec list)
	LOCC	#^A/"/,#FWA$C_MAXNODNAM+1,(R3) ; Search for quote
	BNEQ	10$			; Branch if access control string
	LOCC	#^A/:/,#FWA$C_MAXNODNAM+1,(R3) ; Find the colon (must be there)
10$:	SUBL3	R3,R1,R2		; Compute the nodename length
	MOVC3	R2,(R3),NWA$T_NODEBUF(R7);Move nodename to NWA
	MOVB	R2,NWA$B_NODBUFSIZ(R7)	; Move length to NWA
	RMSSUC				; Return success
ERROR:	RSB				; Exit with RMS code in R0

	.SBTTL	NT$GET_FILESPEC - BUILDS A FILESPEC

;++
; NT$GET_FILESPEC - builds a filespec (less primary node name) from its
;	constituent parts and stores it as a counted ASCII string.
;
; Calling Sequence:
;
;	BSBW	NT$GET_FILESPEC
;
; Input Parameters:
;
;	R5	Address of buffer to receive counted ASCII string
;	R7	NWA address
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	FWA$B_DIRTERM
;	FWA$Q_DEVICE
;	FWA$Q_DIR1
;	FWA$Q_DIR2
;	FWA$Q_DIR2+8 thru FWA$Q_DIR2+48
;	FWA$Q_NAME
;	FWA$Q_QUOTED
;	FWA$Q_VERSION
;	FWA$V_DEVICE
;	FWA$V_EXP_VER
;	FWA$V_GRPMBR
;	FWA$V_DIR
;	FWA$V_DIR_LVLS
;	FWA$V_QUOTED
;	NWA$B_OSTYPE
;
; Output Parameters:
;
;	R0-R3	Destroyed
;	R5	Updated buffer pointer (address of end of string + 1)
;	AP	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	None
;
;--

NT$GET_FILESPEC::			; Entry point
	PUSHR	#^M<R4,R6,R8>		; Save registers
	MOVL	R5,R3			; Copy next byte pointer
	CLRB	(R3)+			; Skip over count byte
	MOVL	R3,R8			; Save pointer to start of DST string

;
; Process secondary node spec strings.
;

	TSTB	FWA$B_SUBNODCNT(R10)	; Branch if there is only one
	BEQL	10$			;  node spec in node spec list
	MOVZWL	FWA$Q_NODE1(R10),R0	; Get size of primary node spec
	SUBW3	R0,FWA$Q_NODE(R10),R1	; Compute descriptor of concatenated
	ADDL3	R0,FWA$Q_NODE+4(R10),R2	;  secondary node spec strings
	MOVC3	R1,(R2),(R3)		; Copy secondary node specs

;
; Process quoted string.
;
; Note:	If there is only a primary node spec, then the quoted string is copied
;	with the quote delimiters removed. Conversely, if secondary node specs
;	are present, then the quoted string is copied with the quote delimiters
;	intact.
;

	BBS	#FWA$V_REMRESULT,(R10),5$; Branch if result already delivered.
	BBC	#FWA$V_QUOTED,(R10),30$	; Branch if no quoted string follows
5$:	MOVQ	FWA$Q_QUOTED(R10),R0	; Get descriptor of quoted string
					;  (including quote delimiters)
	BRB	20$			; Join common code
10$:	BBS	#FWA$V_REMRESULT,(R10),5$; Branch if result already delivered.
	BBC	#FWA$V_QUOTED,(R10),30$	; Branch if no quoted string follows
	SUBL3	#2,FWA$Q_QUOTED(R10),R0	; Get size of string less quotes
	ADDL3	#1,FWA$Q_QUOTED+4(R10),R1;Get address of string
20$:	MOVC3	R0,(R1),(R3)		; Copy quoted string
	BRW	120$			; Join common code

;
; Process device name.
;

30$:	BBC	#FWA$V_DEVICE,(R10),40$	; Branch if no device name present
	MOVC3	FWA$Q_DEVICE(R10),-	; Copy device name
		@FWA$Q_DEVICE+4(R10),(R3)
	MOVB	#^A\:\,(R3)+		; Append delimiter

;
; Process directory_list.
; It is either in the [group,member] or [directory_name_list] format.
;

40$:	BBC	#FWA$V_DIR,(R10),90$	; Branch if no directory present
	SUBB3	#2,FWA$B_DIRTERM(R10),-	; Store left bracket ('[' or '<')
		(R3)+			;  (ASCII code is right bracket + 2)
	BBS	#FWA$V_GRPMBR,(R10),70$	; Branch if [group,member] format
	MOVAQ	FWA$Q_DIR1(R10),R6	; Get address of directory descriptor
	EXTZV	#FWA$V_DIR_LVLS,-	; Get # of directory sub-levels
		#FWA$S_DIR_LVLS,(R10),AP;  (0 means UFD level only)
50$:	MOVL	(R6)+,R0		; Get size of string
	MOVC3	R0,@(R6)+,(R3)		; Copy next (sub)directory name
	MOVB	#^A\.\,(R3)+		; Copy directory separator
	BBC	#FSCB$V_ELIPS,-8(R6),60$	; Branch if elipsis does not follow
					;  (sub)directory name
	MOVW	#^A\..\,(R3)+		; Append two dots to make an elipsis
60$:	SOBGEQ	AP,50$			; Branch if more directory names
	BBS	#FSCB$V_ELIPS,-8(R6),80$	; Branch if we just copied an elipsis
	DECL	R3			; Otherwise, remove unwanted (single)
	BRB	80$			;  trailing dot
70$:	MOVC3	FWA$Q_DIR1(R10),-	; Copy group directory field
		@FWA$Q_DIR1+4(R10),(R3)	;
	MOVB	#^A\,\,(R3)+		; Copy directory separator
	MOVC3	FWA$Q_DIR2(R10),-	; Copy member directory field
		@FWA$Q_DIR2+4(R10),(R3)	;
80$:	MOVB	FWA$B_DIRTERM(R10),(R3)+; Store right bracket (']' or '>')

;
; Process file name, file type, and file version.
; To facilitate communication with non-VMS systems, several system specific
; version number checks will be made.
;
; Note:	The file name string described by FWA$Q_NAME is guaranteed to contain
;	both the "." and ";" delimiters, even if the user did not specify a
;	file type or file version number. Furthermore, a "." version number
;	delimiter entered by the user will have been converted to a ";"
;	delimiter by RM0XPFN!
;

90$:	MOVC3	FWA$Q_NAME(R10),-	; Copy file name string (assembled
		@FWA$Q_NAME+4(R10),(R3)	;  into one string by RM0XPFN)
	BBS	#DAP$V_VAXVMS,(R7),120$	; Branch if partner is VAX/VMS

;
; If the remote node is not VMS, delete the trailing semi-colon (null version
; number) if the user did not explicitly enter a version # in the primary
; filespec string.
;

	BBS	#FWA$V_EXP_VER,(R10),100$;Branch if version # was explicit
	CMPB	-1(R3),#^A\;\		; Is last character a semi-colon?
	BNEQ	100$			; Branch if not
	DECL	R3			; Otherwise delete it here and from
	DECW	FWA$Q_NAME(R10)		;  filename descriptor in FWA
	BRB	120$			; All done

;
; If the remote node is RT-11, remove the version number substring (either
; ";" or ";ver") because RT-11 does not recognize the version number element.
;

100$:	MOVZWL	FWA$Q_VERSION(R10),R0	; Get number of digits in version #
	INCL	R0			; Add semi-colon delimiter to count
	BBC	#DAP$V_RT11,(R7),110$	; Branch if remote node is not RT-11
	SUBL2	R0,R3			; Delete version number substring here
	SUBW2	R0,FWA$Q_NAME(R10)	;  and from filename descriptor in FWA
	BRB	120$			; All done

;
; If the remote node is TOPS-20, convert the ";" version number delimiter to a
; "." delimiter because TOPS-20 requires uses the semi-colon character as a
; file attribute delimiter.
;

110$:	BBC	#DAP$V_TOPS20,(R7),120$	; Branch if remote node is not TOPS-20
	SUBL3	R0,R3,R1		; Calculate address of delimiter
	MOVB	#^A\.\,(R1)		; Convert period to semi-colon

;
; Finish building counted ASCII string.
;

120$:	SUBL3	R8,R3,R0		; Calculate size of string
	MOVB	R0,-1(R8)		; Store the count
	MOVL	R3,R5			; Put next byte pointer in proper reg
	POPR	#^M<R4,R6,R8>		; Restore registers
	RSB				; Exit

	.END				; End of module
