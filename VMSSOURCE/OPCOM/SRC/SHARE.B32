MODULE	OPC$SHARE_DEVNAME	(		%TITLE 'SHARE_FULL_DEVNAME'
			 LANGUAGE (BLISS32),
			 IDENT = 'V04-000'
			) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:
!
!	OPCOM
!
! ABSTRACT:
!
!	This file contains routines shared by OPCOM, REPLY and REQUEST.
!	Each routine is compiled as a separate module so that unnecessary
!	code is not included at link time.
!
! Environment:
!
!	VAX/VMS operating system.
!
! Author:
!
!	CW Hobbs
!
! Creation date:
!
!	31 July 1983
!
! Revision history:
!
!	V03-003	CWH3169		CW Hobbs			5-May-1984
!		Second pass for cluster-wide OPCOM:
!		 - Make DVI$_xxxNAM an input item for SHARE_FULL_DEVNAME so
!		   that calling routine can pick a name.
!		 - Delete the entire timeout count module, it is no longer
!		   necessary with the queued $brkthru mechanism.
!
!	V03-002	CWH3002		CW Hobbs		16-Sep-1983
!		Add timeout routine and VM jacket routines.
!
!--
BEGIN

LIBRARY	'SYS$LIBRARY:LIB';
LIBRARY 'LIB$:OPCOMLIB';

GLOBAL ROUTINE SHARE_FULL_DEVNAME (DEVNAME : $ref_bblock, NAME_CODE) =	%SBTTL 'share_full_devname (devname, name_code)'

!++
! Functional description:
!
!	Take the device name passed as input, and return a fully qualified device spec.  This will include
!	the SCS nodename if that is defined.  Note that the descriptor is OWN storage inside of this routine,
!	so that this routine is non-reentrant.
!
! Input:
!
!	DEVNAME		: Address of a quadword buffer descriptor that
!			  points to the buffer containing the device name
!	NAME_CODE	: DVI$_xxxNAM, the device name item code
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	Descriptor pointing to fullname.  If unable to modify name, input descriptor will returned.
!--

BEGIN						! Start of SHARE_FULL_DEVNAME

OWN
	NAME_BUFFER	: VECTOR [MAX_DEV_NAM, BYTE],
	NAME_DESC	: VECTOR [2, LONG] INITIAL (0,NAME_BUFFER),
	SEC_NAME_BUFFER	: VECTOR [MAX_DEV_NAM, BYTE],
	SEC_NAME_DESC	: VECTOR [2, LONG] INITIAL (0,SEC_NAME_BUFFER),
	SPOOLED		: LONG,
	DVI_LIST	: VECTOR [10, LONG] INITIAL (
				MAX_DEV_NAM,					! Add item code at run time
				NAME_BUFFER,
				NAME_DESC,
				MAX_DEV_NAM,					! Add code at run time
				SEC_NAME_BUFFER,
				SEC_NAME_DESC,
				((DVI$_SPL OR DVI$C_SECONDARY)^16 OR 4),	! Is the secondary spooled?
				SPOOLED,
				0,
				0);


! Get the name, if any problem then return the address of the input descriptor
!
(DVI_LIST [0])<16,16,0> = .NAME_CODE;			! Put name item code in high word
(DVI_LIST [3])<16,16,0> = (.NAME_CODE OR DVI$C_SECONDARY);
IF NOT ($GETDVIW (DEVNAM=.DEVNAME, ITMLST=DVI_LIST))
THEN
    RETURN .DEVNAME;

IF .NAME_DESC [0] EQL 0
THEN
    RETURN .DEVNAME;

! If the device is spooled, return secondary characteristics
!
IF .SPOOLED
THEN
    IF .SEC_NAME_DESC [0] NEQ 0
    THEN
	RETURN SEC_NAME_DESC;

RETURN NAME_DESC;				! If we get this far, it's ok.
END;						! End of SHARE_FULL_DEVNAME
END
ELUDOM

MODULE	OPC$SHARE_FAOBUF (IDENT = 'V03-001') =	%TITLE 'SHARE_FAO_BUFFER'	%SBTTL 'share_fao_buffer (ctrstr, args)'
BEGIN

LIBRARY	'SYS$LIBRARY:LIB';
LIBRARY 'LIB$:OPCOMLIB';

GLOBAL ROUTINE SHARE_FAO_BUFFER (ctrstr : REF VECTOR[2], args : VECTOR [4]) =	%SBTTL 'SHARE_FAO_BUFFER'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine passes an ascii string through the FAO system service with any number of specified parameters.
!
! INPUTS:
!
!	ctrstr	Address of FAO control string descriptor
!	args	Any number of additional arguments
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	Address of formatted descriptor
!
! SIDE EFFECTS:
!
!	none
!--
OWN
    DESC : VECTOR [2, LONG],
    FAOBUF : VECTOR [512, BYTE]
    ;

DESC [0] = 512;					! Set up result descriptor
DESC [1] = FAOBUF;

$FAOL (CTRSTR=.CTRSTR, OUTLEN=DESC, OUTBUF=DESC, PRMLST=ARGS);

RETURN DESC;
END;

END						! End of SHARE$FAOBUF
ELUDOM

MODULE	OPC$SHARE_VM (IDENT = 'V03-001') =	%TITLE 'OPC$SHARE_VM'	%SBTTL 'OPC$GET_VM (len, addr)'
BEGIN

LIBRARY	'SYS$LIBRARY:LIB';
LIBRARY 'LIB$:OPCOMLIB';

GLOBAL ROUTINE OPC$GET_VM (len, addr) =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine calls LIB$GET_VM
!
!--
LOCAL
    STATUS;

STATUS = LIB$GET_VM (.LEN, .ADDR);

RETURN .STATUS;
END;

GLOBAL ROUTINE OPC$FREE_VM (len, addr) =	%SBTTL 'OPC$FREE_VM (len, addr)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine calls LIB$FREE_VM
!
!--
LOCAL
    STATUS;

STATUS = LIB$FREE_VM (.LEN, .ADDR);

RETURN .STATUS;
END;

END						! End of OPC$SHARE_VM
ELUDOM

MODULE	OPC$SHARE_LOOKOPERBIT (IDENT = 'V03-001') =	%TITLE 'SHARE_LOOKOPERBIT'	%SBTTL 'share_init_oper_keytbl'
BEGIN

LIBRARY	'SYS$LIBRARY:LIB';
LIBRARY 'LIB$:OPCOMLIB';

EXTERNAL ROUTINE
    share_trnlog : NOVALUE;

LITERAL
	MAX_OPERBIT = 24;

OWN
	OPER_NAME	: VECTOR  [MAX_OPERBIT,LONG] PRESET  (
				 [0] = OPC$_CENTRL,	 [1] = OPC$_PRINT,	 [2] = OPC$_TAPES,
				 [3] = OPC$_DISKS,	 [4] = OPC$_DEVICE,	 [5] = OPC$_CARDS,
				 [6] = OPC$_NTWORK,	 [7] = OPC$_CLUSTER,	 [8] = OPC$_SECURITY,
				 [9] = OPC$_REPLY,	[10] = OPC$_SOFTWARE,	[11] = OPC$_FILL_11,
				[12] = OPC$_OPER1,	[13] = OPC$_OPER2,	[14] = OPC$_OPER3,
				[15] = OPC$_OPER4,	[16] = OPC$_OPER5,	[17] = OPC$_OPER6,
				[18] = OPC$_OPER7,	[19] = OPC$_OPER8,	[20] = OPC$_OPER9,
				[21] = OPC$_OPER10,	[22] = OPC$_OPER11,	[23] = OPC$_OPER12);

GLOBAL
	OPER_KEYTBL	: VECTOR [((MAX_OPERBIT*2)+1),LONG] PRESET ([0] = MAX_OPERBIT*2);

ROUTINE SHARE_INIT_OPER_KEYTBL : NOVALUE =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs run-time initializations on the operator name keyword table.
!
! INPUTS:
!
!	None.
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	none
!
! SIDE EFFECTS:
!
!	none
!--

LOCAL
    buff : VECTOR [64, BYTE],
    desc : VECTOR [2, LONG] PRESET ([1] = buff),
    msg,
    len,
    adr : REF VECTOR [, BYTE],
    status;
!
! Loop through the name vector, for each non-zero entry fetch the message text and create a string
! from the message.  Store a pointer to the string descriptor back in the vector.
!
INCR i FROM 0 TO MAX_OPERBIT-1
DO
    BEGIN
    IF (msg = .oper_name [.i]) EQL 0		! We assume no holes
    THEN
	$signal_stop (ss$_badparam);
    !
    ! Reset the buffer length, and get the message text.  Any problem is fatal.
    !
    desc [0] = 64;
    IF NOT (status = $getmsg (msgid=.msg, msglen=desc, bufadr=desc, flags=1))
    THEN
	$signal_stop (.status);
    !
    ! Allocate and initialize a counted string, store info in the keytbl
    !
    len = .desc [0] + 1;			! String plus ASCIC count byte
    IF NOT (status = OPC$GET_VM (len, adr))	! Get memory, store address right into keytable
    THEN
	$signal_stop (.status);
    adr [0] = .desc [0];			! Set the ascic count byte
    CH$MOVE (.desc [0], .desc [1], adr [1]);	! Copy the string to the new memory
    oper_keytbl [(2*.i)+1] = .adr;		! Store the address in the keytbl
    oper_keytbl [(2*.i)+2]   = .i;		! Store the index in the keytbl
    END;

RETURN;
END;

GLOBAL ROUTINE SHARE_LOOKUP_OPER_BIT (TEXT : $ref_bblock) =	%SBTTL 'share_lookup_oper_bit'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine converts a text string for an operator name into that operators bit index in
!	the operator attention mask.
!
! INPUTS:
!
!	None.
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	none
!
! SIDE EFFECTS:
!
!	none
!--

LOCAL
    idx,
    status;

IF .oper_keytbl [1] EQL 0
THEN
    share_init_oper_keytbl ();				! Initialize the oper_keytbl structure
!
! Translate the name if possible
!
share_trnlog (.text);
!
! Convert the name to the index value stored in the keyword table
!
status = lib$lookup_key (.text, oper_keytbl, idx);	! Use the library routine
IF NOT .status
THEN
    $signal_stop (opc$_valuerr, 1, .text, .status, 1, .text);

RETURN .idx;
END;
END
ELUDOM

MODULE	OPC$SHARE_INITOPERNAM (IDENT = 'V03-001') =	%TITLE 'SHARE_INIT_OPER_NAME'	%SBTTL 'share_init_oper_name'
BEGIN

LIBRARY	'SYS$LIBRARY:LIB';
LIBRARY 'LIB$:OPCOMLIB';

GLOBAL ROUTINE SHARE_INIT_OPER_NAME : NOVALUE =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs run-time initializations on the operator name vector.
!
! INPUTS:
!
!	None.
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	none
!
! SIDE EFFECTS:
!
!	none
!--

!
! Define the vector of message codes that describe the text associated with each of the known
! attention bits.  Undefined bits have a zero message code associated with them.  The order of the
! entries must coincide with the order of the bits that are defined, including any undefined bits.
! The run-time initialization of this vector is to take each non-zero entry, fetch the message text
! associated with that entry, and store a pointer to a string descriptor for the message text.
!
GLOBAL
	OPER_NAME	: VECTOR  [64,LONG] PRESET  (
				 [0] = OPC$_CENTRL,	 [1] = OPC$_PRINT,	 [2] = OPC$_TAPES,
				 [3] = OPC$_DISKS,	 [4] = OPC$_DEVICE,	 [5] = OPC$_CARDS,
				 [6] = OPC$_NTWORK,	 [7] = OPC$_CLUSTER,	 [8] = OPC$_SECURITY,
				 [9] = OPC$_REPLY,	[10] = OPC$_SOFTWARE,	[11] = OPC$_FILL_11,
				[12] = OPC$_OPER1,	[13] = OPC$_OPER2,	[14] = OPC$_OPER3,
				[15] = OPC$_OPER4,	[16] = OPC$_OPER5,	[17] = OPC$_OPER6,
				[18] = OPC$_OPER7,	[19] = OPC$_OPER8,	[20] = OPC$_OPER9,
				[21] = OPC$_OPER10,	[22] = OPC$_OPER11,	[23] = OPC$_OPER12);

LOCAL
    buff : VECTOR [64, BYTE],
    desc : VECTOR [2, LONG] PRESET ([1] = buff),
    msg,
    adr : REF VECTOR [, LONG],
    status;
!
! Loop through the name vector, for each non-zero entry fetch the message text and create a string
! from the message.  Store a pointer to the string descriptor back in the vector.
!
INCR i FROM 0 TO 63
DO
    IF (msg = .oper_name [.i]) NEQ 0
    THEN
	BEGIN
	!
	! Reset the buffer length, and get the message text.  Any problem is fatal.
	!
	desc [0] = 64;
	IF NOT (status = $getmsg (msgid=.msg, msglen=desc, bufadr=desc, flags=1))
	THEN
	    $signal_stop (.status);
	!
	! Allocate and initialize a descriptor and string
	!
	IF NOT (status = OPC$GET_VM (%REF (8), adr))
	THEN
	    $signal_stop (.status);
	oper_name [.i] = .adr;			! Replace the message code with the descriptor address
	adr [0] = .desc [0];			! Place the string length in the descriptor
	IF NOT (status = OPC$GET_VM (adr [0], adr [1]))
	THEN
	    $signal_stop (.status);
	CH$MOVE (.desc [0], .desc [1], .adr [1]);
	END;

RETURN;
END;
END
ELUDOM

MODULE	OPC$SHARE_TRNLOG (IDENT = 'V03-001') =	%TITLE 'SHARE_TRNLOG'	%SBTTL 'share_trnlog (name)'
BEGIN

LIBRARY	'SYS$LIBRARY:LIB';
LIBRARY 'LIB$:OPCOMLIB';

GLOBAL ROUTINE SHARE_TRNLOG (NAME : $ref_bblock) : NOVALUE =
!++
! Functional description:
!
!	Recursively translate a logical name.
!
! Input:
!
!	name - Address of dynamic string descriptor for input name
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	name - Receives a new dynamic string
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of share_trnlog

LOCAL
    lcl_buf : $bvector [256],
    in_dsc  : VECTOR [2, LONG],
    out_dsc : VECTOR [2, LONG],
    status;
!
! If the input string was is not dynamic, scream and shout.
!
IF .name [dsc$b_class] NEQ dsc$k_class_d
THEN
    $signal_stop (ss$_badparam);
!
! Copy the input string to the local buffer
!
CH$MOVE (.name [dsc$w_length], .name [dsc$a_pointer], lcl_buf);
!
! Set the input and output descriptors up
!
in_dsc [0] = .name [dsc$w_length];
in_dsc [1] = lcl_buf;
out_dsc [1] = lcl_buf;
!
! Try up to ten times to translate the name
!
INCR i FROM 0 TO 10
DO
    BEGIN
    !
    ! We didn't find the end, give an error
    !
    IF .i GEQ 10
    THEN
	$signal_stop (opc$_valuerr, 1, .name, ss$_toomanylnam);
    !
    ! Set up the output descriptor
    !
    out_dsc [0] = 256;
    !
    ! Attempt to translate
    !
    status = $trnlog (lognam=in_dsc, rsllen=out_dsc, rslbuf=out_dsc);
    IF .status EQL ss$_notran			! No tranlation, we are done
    THEN
	EXITLOOP;
    IF NOT .status
    THEN
	$signal_stop (.status);
    !
    ! Get ready for the next loop
    !
    in_dsc [0] = .out_dsc [0];
    END;
!
! Copy the local string to the output
!
IF NOT (status = str$copy_dx (.name, out_dsc))
THEN
    $signal_stop (.status);

RETURN;
END;
END						! End of SHARE_TRNLOG
ELUDOM
