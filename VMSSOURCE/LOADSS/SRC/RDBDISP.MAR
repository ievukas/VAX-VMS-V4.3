	.TITLE	RDBDISP - Rights database system service dispatcher
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
; Facility: Rights database (RDB) System Services
;++
; Abstract:
;	This module contains the dispatcher for the rights database
;	loadable system services. These system services are implemented
;	in a privileged shareable image. The remaining rights database
;	system services are in the exec.
;
; Overview:
;	The rights database system services are contained in a privileged
;	shareable image that is linked into user program images in exactly the
;	same fashion as any shareable image. The creation and installation of
;	a privileged, shareable image is slightly different from that of an
;	ordinary shareable image.  These differences are: 
;
;		1. A vector defining the entry points and providing other
;		   control information to the image activator.  This vector
;		   is a the lowest address in an image section with the VEC
;		   attribute.
;
;		2. The shareable image is linked with the /PROTECT option
;		   that marks all of the image sections so that they will
;		   protected and given EXEC mode ownership by the image
;		   activator.
;
;		3. The shareable image MUST be installed /SHARE /PROTECT
;		   with the INSTALL utility in order for the image activator
;		   to connect the privileged shareable image to the change mode
;		   dispatchers.
;
;	A privileged shareable image implementing user written system services
;	is comprised of the following major components:
;
;		1. A transfer vector containing all of the entry points and
;		   collecting them at the lowest virtual address in the shareable
;		   image.  This formalism enables revision of the shareable
;		   image without necessitating the relinking of images that
;		   use it.
;
;		2. A Privileged Library Vector in a PSECT with the VEC attribute
;		   that describes the entry points for dispatching EXEC and
;		   KERNEL mode services along with validation information.
;
;		3. A dispatcher for kernel mode services.  This code will 
;		   be called by the VMS change mode dispatcher when it
;		   fails to recognize a kernel mode service request.
;
;		4. A dispatcher for executive mode services.  This code will
;		   be called by the VMS change mode dispatcher when it fails
;		   to recognize an executive mode service request.
;
;		5. Service routines to perform the various services.
;
; Enviornment:
;
;	VAX/VMS operating system, installed as a privileged shareable image
;
;--
;
; Author:
;
;	R. Scott Hanna, CREATION DATE: 17-JAN-1983
;
; Modified by:
;
;	V03-005	ACG0417		Andrew C. Goldstein,	18-Apr-1984  16:35
;		Add rundown routine to dequeue ACL locks; fix minimum
;		arg count for $FORMAT_ACL and $PARSE_ACL.
;
;	V03-004	LY0468		Larry Yetto		22-MAR-1984 14:11
;		Add two new paramaters to $MOD_IDENT for the new name
;		and new value.
;
;	V03-003	LMP0185		L. Mark Pilant,		6-Feb-1984  12:55
;		Add a new service $CHANGE_ACL for changing the ACL on
;		random objects.
;
;	V03-002	LMP0100		L. Mark Pilant,		14-Apr-1983  11:32
;		Add new services: $FORMAT_ACL and $PARSE_ACL.
;
;	V03-001 RSH0009		R. Scott Hanna		09-Mar-1983
;		Changed CHME codes.
;
;--

	.SBTTL	Declarations and Equates
;
;	Macro Definitions
;
;	DEFINE_SERVICE - A macro to make the appropriate entries in several
;			 different PSECTs required to define an EXEC or KERNEL
;			 mode service.  These include the transfer vector,
;			 the case table for dispatching, and a table containing
;			 the number of required arguments.
;
;	DEFINE_SERVICE Name,Number_of_Arguments,Mode
;
	.MACRO	DEFINE_SERVICE,NAME,NARG=0,MODE=KERNEL
	.PSECT	$$$TRANSFER_VECTOR,PAGE,NOWRT,EXE,PIC,SHR
	.ALIGN	QUAD			; Align entry points for speed and style
	.TRANSFER	NAME		; Define name as universal symbol for entry
	.MASK	NAME			; Use entry mask defined in main routine
	.IF	IDN MODE,KERNEL
	CHMK	#<KCODE_BASE+KERNEL_COUNTER> ; Change to kernel mode and execute
	RET				; Return
	KERNEL_COUNTER=KERNEL_COUNTER+1	; Advance counter

	.PSECT	KERNEL_NARG,BYTE,NOWRT,EXE,PIC,SHR
	.BYTE	NARG			; Define number of required arguments

	.PSECT	USER_KERNEL_DISP1,BYTE,NOWRT,EXE,PIC,SHR
	.WORD	2+NAME-KCASE_BASE	; Make entry in kernel mode CASE table

	.IFF
	CHME	#<ECODE_BASE+EXEC_COUNTER> ; Change to executive mode and execute
	RET				; Return
	EXEC_COUNTER=EXEC_COUNTER+1	; Advance counter

	.PSECT	EXEC_NARG,BYTE,NOWRT,EXE,PIC,SHR
	.BYTE	NARG			; Define number of required arguments

	.PSECT	USER_EXEC_DISP1,BYTE,NOWRT,EXE,PIC,SHR
	.WORD	2+NAME-ECASE_BASE	; Make entry in exec mode CASE table
	.ENDC				;
	.ENDM	DEFINE_SERVICE		;
;
;	Equated Symbols
;

	$PLVDEF				; Define PLV offsets and values
	$PRDEF				; Define processor register numbers
;
;	Initialize counters for change mode dispatching codes
;
KERNEL_COUNTER=0			; Kernel code counter
EXEC_COUNTER=0				; Exec code counter

;
;	Own Storage
;
	.PSECT	KERNEL_NARG,BYTE,NOWRT,EXE,PIC,SHR
KERNEL_NARG:				; Base of byte table containing the
					;  number of required arguments.
	.PSECT	EXEC_NARG,BYTE,NOWRT,EXE,PIC,SHR
EXEC_NARG:				; Base of byte table containing the
					;  number of required arguments.

	.SBTTL	Transfer Vector and Service Definitions
;++
; The use of transfer vectors to effect entry to the user written system services
; enables some updating of the shareable image containing them without necessitating
; a re-link of all programs that call them.  The PSECT containinng the transfer
; vector will be positioned at the lowest virtual address in the shareable image
; and so long as the transfer vector is not re-ordered, programs linked with
; one version of the shareable image will continue to work with the next.
;
; Thus as additional services are added to a privileged shareable image, their
; definitions should be added to the end of the following list to ensure that
; programs using previous versions of it will not need to be re-linked.
; To completely avoid relinking existing programs the size of the privileged
; shareable image must not change so some padding will be required to provide
; the opportunity for future growth.
;--

	DEFINE_SERVICE	SYS$ADD_HOLDER,3,EXEC	;Add Holder Record To The Rights Database
	DEFINE_SERVICE	SYS$ADD_IDENT,4,EXEC	;Add Identifier To The Rights Database
	DEFINE_SERVICE	SYS$CREATE_RDB,1,EXEC	;Create The Rights Database
	DEFINE_SERVICE	SYS$FIND_HELD,4,EXEC	;Find Identifiers Held By Holder
	DEFINE_SERVICE	SYS$FIND_HOLDER,4,EXEC	;Find Holder Of Identifier
	DEFINE_SERVICE	SYS$MOD_HOLDER,4,EXEC	;Modify Holder Record In Rights Database
	DEFINE_SERVICE	SYS$MOD_IDENT,5,EXEC	;Modify Identifier Record In Rights Database
	DEFINE_SERVICE	SYS$REM_HOLDER,2,EXEC	;Remove Holder Record From Rights Database
	DEFINE_SERVICE	SYS$REM_IDENT,1,EXEC	;Remove Identifier From Rights Database

; ACL manipulation services.

	DEFINE_SERVICE	SYS$FORMAT_ACL,7,EXEC	;Convert ACE to text
	DEFINE_SERVICE	SYS$PARSE_ACL,4,EXEC	;Convert ACE to binary
	DEFINE_SERVICE	SYS$CHANGE_ACL,7,EXEC	;modify an object's ACL

;
; The base values used to generate the dispatching codes should be negative for
; user services and must be chosen to avoid overlap with any other privileged
; shareable images that will be used concurrently.  Their definition is
; deferred to this point in the assembly to cause their use in the preceding
; macro calls to be forward references that guarantee the size of the change
; mode instructions to be four bytes.  This satisfies an assumption that is
; made by for services that have to wait and be retried.  The PC for retrying
; the change mode instruction that invokes the service is assumed to be 4 bytes 
; less than that saved in the change mode exception frame.  Of course, the particular 
; service routine determines whether this is possible.
;
; The rights database system services have a block of 16 CHME codes reserved
; (16416-16431).
;

KCODE_BASE=0				; No CHMK codes used
ECODE_BASE=16416 			; Base CHME code value for these services

	.SBTTL	Change Mode Dispatcher Vector Block
;++
; This vector is used by the image activator to connect the privileged shareable
; image to the VMS change mode dispatcher.  The offsets in the vector are self-
; relative to enable the construction of position independent images.  The system
; version number will be used by the image activator to verify that this shareable
; image was linked with the symbol table for the current system.
;
;			Change Mode Vector Format		
;
;	   +------------------------------------------+
;	   !             Vector Type Code             !   PLV$L_TYPE
;	   !             (PLV$C_TYP_CMOD)             !
;	   +------------------------------------------+
;	   !          System Version Number           !   PLV$L_VERSION
;	   !             (SYS$K_VERSION)              !
;	   +------------------------------------------+
;	   !      Kernel Mode Dispatcher Offset       !   PLV$L_KERNEL
;	   !                                          !
;	   +------------------------------------------+
;	   !         Exec Mode Entry Offset           !   PLV$L_EXEC
;	   !                                          !
;	   +------------------------------------------+
;	   !	   User Rundown Service Offset        !   PLV$L_USRUNDWN
;	   !                                          !
;	   +------------------------------------------+
;	   !                Reserved                  !
;	   !                                          !
;	   +------------------------------------------+
;	   !          RMS Dispatcher Offset           !   PLV$L_RMS  
;	   !                                          !
;	   +------------------------------------------+
;	   !             Address Check                !   PLV$L_CHECK
;	   !                                          !
;	   +------------------------------------------+
;
;
	.PSECT	USER_SERVICES,PAGE,VEC,PIC,NOWRT,EXE,SHR

	.LONG	PLV$C_TYP_CMOD		; Set type of vector to change mode dispatcher
	.LONG	SYS$K_VERSION		; Identify system version 
	.LONG	0			; No kernel mode dispatcher
	.LONG	EXEC_DISPATCH-.		; Offset to executive mode dispatcher
	.LONG	RDB_RUNDOWN-.		; Rundown routine
	.LONG	0			; Reserved.
	.LONG	0			; No RMS dispatcher
	.LONG	0			; Address check - PIC image

	.SBTTL	Executive Mode Dispatcher
;++
; Input Parameters:
;
;	(SP) - Return address if bad change mode value
;
;	 R0  - Change mode argument value.
;
;	 AP  - Argument pointer existing when the change
;	       mode instruction was executed.
;
;	 FP  - Address of minimal call frame to exit
;	       the change mode dispatcher and return to
;	       the original mode.
;--
	.PSECT	USER_EXEC_DISP0,BYTE,NOWRT,EXE,PIC,SHR
EACCVIO:				; Exec access violation
	MOVZWL	#SS$_ACCVIO,R0		; Set access violation status code
	RET				;  and return
EINSFARG:				; Exec insufficient arguments.
	MOVZWL	#SS$_INSFARG,R0		; Set status code and
	RET				;  return
ENOTME:	RSB				; RSB to forward request

EXEC_DISPATCH::				; Entry to dispatcher
	MOVAB	W^-ECODE_BASE(R0),R1	; Normalize dispatch code value
	BLSS	ENOTME			; Branch if code value too low
	CMPW	R1,#EXEC_COUNTER	; Check high limit
	BGEQU	ENOTME			; Branch if out of range
;
; The dispatch code has now been verified as being handled by this dispatcher,
; now the argument list will be probed and the required number of arguments
; verified.
;
	MOVZBL	W^EXEC_NARG[R1],R1	; Get required argument count
	MOVAL	@#4[R1],R1		; Compute byte count including arg count
	IFNORD	R1,(AP),EACCVIO		; Branch if arglist not readable
	CMPB	(AP),W^<EXEC_NARG-ECODE_BASE>[R0] ; Check for required number
	BLSSU	EINSFARG		;  of arguments
	MOVL	FP,SP			; remove JSB longwords from stack 
	CASEW	R0,-			; Case on change mode
		-			; argument value
		#ECODE_BASE,-		; Base value
		#<EXEC_COUNTER-1>	; Limit value (number of entries)
ECASE_BASE:				; Case table base address for DEFINE_SERVICE
;
;	Case table entries are made in the PSECT USER_EXEC_DISP1 by
;	invocations of the DEFINE_SERVICE macro.  The three PSECTS, 
;	USER_EXEC_DISP0,1,2 will be abutted in lexical order at link-time.
;
	.PSECT	USER_EXEC_DISP2,BYTE,NOWRT,EXE,PIC,SHR
	BUG_CHECK IVSSRVRQST,FATAL	; range validation performed above so
					; should never reach here

	.SBTTL	Rundown Handler

;++
;
; The rundown handler is called when image or process rundown is performed.
; It cleans up context related to this package of services.
;
; Calling Sequence:
;
;	JSB RDB_RUNDOWN
;
; Inputs:
;
;	none
;
;--


RDB_RUNDOWN:
	CALLS	#0,RUNDOWN_CHANGE_ACL	; Do rundown for the $CHANGE_ACL service
	RSB


	.END
