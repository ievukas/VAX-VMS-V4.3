%TITLE 'EDT$TICHAR - input a character'
MODULE EDT$TICHAR (				! Input a character
		IDENT = 'V04-000'			! File: TICHAR.BLI Edit: REM1018
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Input a character.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: June 9, 1979
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 18-FEB-1981.  This module was created by
!	extracting routine EDT$$TI_INPCH  from module TINPUT.
! 1-002	- Regularize headers.  JBS 10-Mar-1981
! 1-003	- Revise journaling.  JBS 22-Jun-1981
! 1-004	- Fix reading journal file.  JBS 08-Jul-1981
! 1-005	- Don't flush the journal record in the middle of an escape sequence.
!	   JBS 08-Jul-1981
! 1-006	- Return 0 if the journal file ends.  JBS 01-Oct-1981
! 1-007	- Use the global prompt string, if specified.  JBS 21-Oct-1981
! 1-008	- Remove length of prompt string.  JBS 23-Oct-1981
! 1-009	- Revise autorepeat logic, putting it in a subroutine.  JBS 30-Jan-1982
! 1-010	- Flush the terminal buffer after turning off Autorepeat.
!	   JBS 31-Jan-1982
! 1-011	- Add EDT$$G_JOU_VALID.  JBS 09-Apr-1982
! 1-012	- Allow for 8-bit keyboards.  JBS 17-Aug-1982
! 1-013	- Add SS3 for 8-bit keyboards.  JBS 20-Aug-1982
! 1-014	- Revise read-ahead logic.  JBS 02-Sep-1982
! 1-015 - Don't write out to the journal file here. 07-Oct-1982
! 1-016	- Add VT220 support conditional.  JBS 11-Feb-1983
! 1-017 - Added logic to maintain EDT$$G_TIN_OBUFPOS durring /RECOVERY mode.
!	  REM 10-Oct-1983
! 1-018 - Added more logic to reset the ^C counter & logic if about to read
!	  ANOTHER journal record.  REM 18-Oct-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$TI_INPCH;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

LIBRARY 'EDTSRC:SUPPORTS';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$TI_INPCH  - input a character'

GLOBAL ROUTINE EDT$$TI_INPCH (			! Input a character
    BUF						! Where to store character
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets the next character from input.  If recovery mode is on
!	then the character is read from the journal file.   If not, then we check
!	to see if the character was read previously, and take it from the type-
!	ahead character; otherwise, we read a chraracter from the terminal.  If the
!	character is not coming from the journal file, it is written to it.
!
! FORMAL PARAMETERS:
!
!  BUF 			the address of a fullword in which the character is returned.
!
! IMPLICIT INPUTS:
!
!	EDT$$G_RCOV_MOD
!	EDT$$G_K_AUTRPT
!	EDT$$G_TIN_IRECEND
!	EDT$$G_RDAHED
!	EDT$$T_RDAHED
!	EDT$$T_TIN_INREC
!	EDT$$A_TIN_IBUFPTR
!	EDT$$T_PMT_KPD
!	EDT$$T_PMT_NOKPD
!	EDT$$G_KPAD
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_TIN_IRECLEN
!	EDT$$G_RDAHED
!	EDT$$A_TIN_IBUFPTR
!	EDT$$G_JOU_VALID
!	EDT$$G_TIN_OBUFPOS
!
! ROUTINE VALUE:
!
!	1 = got a character, 0 = end of journal file
!
! SIDE EFFECTS:
!
!	May turn off auto-repeat.
!
!--

    BEGIN

    EXTERNAL ROUTINE
	edt$$clr_cc : NOVALUE,			! Clear ^C counters & logic
	EDT$$RD_JOUTXT,				! Read a text record from the journal file
	EDT$$OUT_FMTBUF,
	EDT$$FMT_LIT,
	EDT$$TI_GETCH,
	EDT$$TI_BUFCH : NOVALUE,
	EDT$$TI_ENBLAUTREP : NOVALUE;		! Enable and disable autorepeat

    EXTERNAL
	EDT$$G_RCOV_MOD,			! Recovery mode flag
	EDT$$G_K_AUTRPT,			! Auto repeat flag
	EDT$$G_RDAHED,				! Type ahead counter
	EDT$$T_RDAHED,				! Type-ahead string
	EDT$$A_TIN_IBUFPTR : REF VECTOR [, BYTE],	! Pointer into journal input buffer
	EDT$$G_TIN_IRECLEN,			! Length of journal input record
	EDT$$T_TIN_INREC,			! Journal input record buffer
	EDT$$G_TIN_IRECEND,			! Pointer to end of journal input buffer
	EDT$$T_PMT_KPD : VECTOR [, BYTE],	! Counted ASCII string for keypad mode prompt
	EDT$$T_PMT_NOKPD : VECTOR [, BYTE],	! Counted ASCII string for nokeypad mode prompt
	EDT$$G_KPAD,				! 1 = keypad change mode, 0 = nokeypad change mode
	EDT$$G_TIN_OBUFPOS,			! Position in journal output buffer
	EDT$$G_JOU_VALID;			! 1 = journal record is valid

!+
! Check for recovery mode.
!-

    IF .EDT$$G_RCOV_MOD
    THEN
	BEGIN

!+
! If at end of the input buffer, we will be reading another record.  So
! we must first reset the CC counters and associated logic.
!-

	IF CH$PTR_EQL (.edt$$a_tin_ibufptr, .edt$$g_tin_irecend) THEN
	    edt$$clr_cc ();

!+
! Make sure we have a character in the buffer.
!-

	WHILE (CH$PTR_EQL (.EDT$$A_TIN_IBUFPTR, .EDT$$G_TIN_IRECEND) OR (.EDT$$A_TIN_IBUFPTR EQL 0)) DO
	    BEGIN
!+
! No characters left, try to read a new record from the journal
! file.
!+

	    IF EDT$$RD_JOUTXT (EDT$$T_TIN_INREC, EDT$$G_TIN_IRECLEN)
	    THEN
		BEGIN
		EDT$$G_TIN_IRECEND = CH$PTR (EDT$$T_TIN_INREC, .EDT$$G_TIN_IRECLEN);
		EDT$$A_TIN_IBUFPTR = CH$PTR (EDT$$T_TIN_INREC, 0);
		END
	    ELSE
!+
! No more records in the journal file, arrange to return to the root.
!-
		RETURN (0);

	    END;

!+
! Return next character from the journal buffer.
!-
	.BUF = CH$RCHAR_A (EDT$$A_TIN_IBUFPTR);
	EDT$$G_TIN_OBUFPOS = .EDT$$G_TIN_OBUFPOS + 1
	END
    ELSE
!+
! Not in recovery mode, check for type ahead.
!-
	BEGIN
!+
! If there are any characters in type-ahead, use the first.
! Otherwise block waiting for the user to type something.
!-

	IF (.EDT$$G_RDAHED GTR 0)
	THEN
	    BEGIN
!+
! Return the oldest typed ahead character, and shuffle the buffer.
!-
	    EDT$$G_RDAHED = .EDT$$G_RDAHED - 1;
	    .BUF = CH$RCHAR (EDT$$T_RDAHED);

	    IF (.EDT$$G_RDAHED GTR 0)		!
	    THEN
		EDT$$CPY_MEM (.EDT$$G_RDAHED, CH$PLUS (EDT$$T_RDAHED, 1), EDT$$T_RDAHED);

	    END
	ELSE
	    BEGIN
!+
! Read the character from the terminal.  Prompt first if requested.
!-

	    LOCAL
		PROMPT_ADDR : REF VECTOR [8, BYTE];

	    PROMPT_ADDR = (IF .EDT$$G_KPAD THEN EDT$$T_PMT_KPD ELSE EDT$$T_PMT_NOKPD);

	    IF (.PROMPT_ADDR [0] GTR 0)
	    THEN
		BEGIN
		EDT$$FMT_LIT (PROMPT_ADDR [1], .PROMPT_ADDR [0]);
		EDT$$OUT_FMTBUF ();
		END;

	    EDT$$TI_GETCH (.BUF);
	    END;

!+
! Make sure the character is journaled.
!-
	EDT$$TI_BUFCH (..BUF);
	EDT$$G_JOU_VALID = 1;
!+
! If the character was an escape, CSI or SS3, turn auto-repeat off.
! This also disables dumping the journal buffer, so that a
! journal record can contain an entire escape or control sequence.
!-

%IF SUPPORT_VT220
%THEN

	IF ((..BUF EQL ASC_K_ESC) OR (..BUF EQL ASC_K_CSI) OR (..BUF EQL ASC_K_SS3))
	THEN
%ELSE

	    IF (..BUF EQL ASC_K_ESC)
	    THEN
%FI

		BEGIN
		EDT$$TI_ENBLAUTREP (0);
		EDT$$OUT_FMTBUF ();
		END;

	END;

    RETURN (1);
    END;					! of routine EDT$$TI_INPCH

!<BLF/PAGE>

END						! of module EDT$TICHAR

ELUDOM
