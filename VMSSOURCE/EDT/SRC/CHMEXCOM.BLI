%TITLE 'EDT$CHMEXCOM - execute certain change-mode commands'
MODULE EDT$CHMEXCOM (				! Execute certain change-mode commands
		IDENT = 'V04-000'			! File: CHMEXCOM.BLI Edit: JBS1035
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module executes the change mode commands which
!	do not take an entity.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: Unknown
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 04-Feb-1981.  This module was created by
!	   extracting the routine EXECUTE_COM from module CHANGE.BLI.
! 1-002	- Regularized headers.  JBS 25-Feb-1981
! 1-003	- Fix module name.  JBS 02-Mar-1981
! 1-004	- Change SPLIT_LINE to EDT$$SPLT_LNINS .  JBS 30-Mar-1981
! 1-005	- Use the ASSERT macro.  JBS 01-Jun-1981
! 1-006	- Remove explicit journaling.  JBS 18-Jun-1981
! 1-007	- Use new message codes.  JBS 04-Aug-1981
! 1-008 - Add bell verb. STS 11-Aug-1981
! 1-009 - Add the date verb. STS 31-Aug-1981
! 1-010 - Add verbs to set up default verb. STS 21-Sep-1981
! 1-011 - Add verbs for toggle select and delete select. STS 23-Sep-1981
! 1-012 - Added command to set success to 0 if verb was select and select
!	  range was already active.  I needed this status for search and
!	  select. STS 28-Sep-1981
! 1-013	- Add a return value to indicate end of journal file.  JBS 02-Oct-1981
! 1-014 - Remove parameter from EDT$$SUB_CMD call.  SMB 28-Oct-1981
! 1-015 - Revise Tab Compute calculation when SHFL not zero.  SMB 06-Nov-1981
! 1-016	- Add range checking to ASC command.  JBS 10-Feb-1982
! 1-017	- Correct spelling of error code.  JBS 12-Feb-1982
! 1-018 - Add a flag for EXT command mode entered.  SMB 26-Feb-1982
! 1-019	- Rewrite word wrapping code.  JBS 07-Apr-1982
! 1-020	- Give messages on error returns from setting search strings.  JBS 04-May-1982
! 1-021	- Set a flag if control C actually aborts something.  JBS 24-May-1982
! 1-022 - Change setting of output format routine.  SMB 30-Jun-1982
! 1-023 - Set format output to TI_WRSTR for EXT output.  SMB 02-Jul-1982
! 1-024 - Make KS move the cursor even if PST_CNT = 0.  SMB 22-Jul-1982
! 1-025 - Add the XLATE command. STS 13-Aug-1982
! 1-026	- Flag screen changed for HELP, SHL and SHR.  JBS 13-Sep-1982
! 1-027	- Remove EDT$$G_LN_NO for new screen update logic.  JBS 29-Sep-1982
! 1-028	- Remove external declaration of EDT$$FMT_LIT, not used.  JBS 05-Oct-1982
! 1-029 - Remove call to SC_INIT, set a flag instead.  SMB 06-Oct-1982
! 1-030	- Change EDT$$G_SCR_CHGD to EDT$$G_SCR_REBUILD in a few places.  JBS 09-Oct-1982
! 1-031	- Rebuild the screen data base if selection is too complex.  JBS 02-Dec-1982
! 1-032	- Revise handling of EDT$$G_SHF.  JBS 14-Dec-1982
! 1-033	- Put WPS and VT220 support under a conditional.  JBS 10-Feb-1983
! 1-034 - Remove declarations of routines which aren't called.  SMB 23-Feb-1983
! 1-035	- Add new value for EDT$$G_SCR_CHGD.  JBS 02-Mar-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$EXE_CHMCMD1;			! Execute the verbs which do not take an entity specification

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

LIBRARY 'EDTSRC:SUPPORTS';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$EXE_CHMCMD1  - execute certain change-mode commands'

GLOBAL ROUTINE EDT$$EXE_CHMCMD1 (		! Execute certain change-mode commands
    VERB, 					! Command number
    COUNT, 					! Repeat count (char value for ASC)
    OPERAND, 					! Pointer to start of operand
    EXPLICIT					! 1 = the count is explicit
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine executes a command which is not of the verb entity form.
!
! FORMAL PARAMETERS:
!
!  VERB			command number
!  COUNT		repeat count (char value for ASC)
!  OPERAND		Pointer to start of operand for insert, insert_cc etc.
!  EXPLICIT		1 = the count is explicit
!
! IMPLICIT INPUTS:
!
!	EDT$$G_TI_SCROLL
!	EDT$$G_SCR_LNS
!	EDT$$T_DEL_CH
!	EDT$$G_DEL_CHLEN
!	EDT$$G_DIR
!	EDT$$T_DEL_LN
!	EDT$$G_DEL_LNLEN
!	EDT$$G_DIR_MOD
!	EDT$$T_DEL_WD
!	EDT$$G_DEL_WDLEN
!	EDT$$G_EXI
!	EDT$$G_PST_CNT
!	EDT$$A_RPL_STR
!	EDT$$G_RPL_LEN
!	EDT$$A_SEA_STR
!	EDT$$A_SEL_BUF
!	EDT$$A_OLD_SEL
!	EDT$$L_SEL_LN
!	EDT$$A_SEL_POS
!	EDT$$G_SHF
!	EDT$$G_TRUN
!	EDT$$G_SEA_LEN
!	EDT$$L_TOP_LN
!	EDT$$G_EXITD
!	EDT$$G_TAB_SIZ
!	EDT$$A_CUR_BUF
!	EDT$$G_TAB_LVL
!	EDT$$G_TI_TYP
!	EDT$$T_FMT_BUF
!	EDT$$A_FMT_CUR
!	EDT$$T_LN_BUF
!	EDT$$A_LN_PTR
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_SHF
!	EDT$$G_TAB_LVL
!	EDT$$A_FMT_CUR
!	EDT$$A_LN_PTR
!	EDT$$G_VERT
!	EDT$$G_DFLT_VERB
!	EDT$$A_SEL_BUF
!	EDT$$G_CC_DONE
!	EDT$$G_SCR_CHGD
!	EDT$$G_SCR_REBUILD
!
! ROUTINE VALUE:
!
!	0 = failure, 1 = success, 2 = end of journal file
!
! SIDE EFFECTS:
!
!	MANY
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$INS_STR,				! Insert a string of characters at the current position
	EDT$$INS_CHS,			! Insert a string of characters which may include carriage returns
	EDT$$MOV_TOCOL,				! Insert tabs and spaces

%IF %BLISS (BLISS32)
%THEN
	EDT$$GET_XLATE,				! call translation routine
%FI

	EDT$$UNDL,				! Insert the contents of an undelete buffer
	EDT$$MSG_BELL : NOVALUE,		! Output a message to the terminal with a warning bell
	EDT$$CHK_CC,				! Check to see if a CTRL/C has been typed
	EDT$$LN_DEFK,				! Define a key for keypad editing
	EDT$$PST_CMD,				! Execute the paste command
	EDT$$SUB_CMD,				! Execute the SUBSTITUTE command
	EDT$$EXT_CMD,				! Extend command handler
	EDT$$KPAD_HLP,				! Keypad mode help processor
	EDT$$TI_WRLN,				! Write to terminal
	EDT$$TI_WRSTR,				! Write to terminal unformatted
	EDT$$RPL_CHGDLN,			! Declare current line as changed
	EDT$$GET_TXTLN,				! Get current line in line buffer
	EDT$$CS_LEFT,				! Move left a character
	EDT$$SC_CPUCSPOS,			! Compute cursor position
	EDT$$WORD_WRAP,				! Try doing word wrapping
	EDT$$SC_POSCSIF,			! Put cursor position in format buffer
	EDT$$SC_NONREVID,			! End reverse video
	EDT$$SC_SETSCLLREG,			! Set the scrolling region
	EDT$$SC_FULLSCLL,			! Reset the scrolling region
	EDT$$STOP_WKINGMSG,			! Terminate working AST
	EDT$$SET_SEASUBSTR			! Setup SUBSTITUTE strings

%IF SUPPORT_WPS
%THEN
	,
	EDT$$RING_BELL : NOVALUE,		! Ring the bell
	EDT$$INS_DATIM				! Insert date and time
%FI

    ;

    EXTERNAL
	EDT$$G_TI_SCROLL,			! Scrolling terminal
	EDT$$G_SCR_LNS,				! Number of screen lines
	EDT$$A_FMT_WRRUT,			! Holds address of output format routine
	EDT$$G_EXT_MOD,				! 1=in EXT command mode
	EDT$$T_DEL_CH : BLOCK 			! Deleted character buffer.
	    [CH$ALLOCATION (2)],
	EDT$$G_DEL_CHLEN,			! Length of deleted character buffer
	EDT$$G_DIR,				! The current direction.
	EDT$$T_DEL_LN : BLOCK 			! Deleted line buffer.
	    [CH$ALLOCATION (257)],
	EDT$$G_DEL_LNLEN,			! Deleted line length.
	EDT$$G_DIR_MOD,				! The directional mode.
	EDT$$T_DEL_WD : BLOCK 			! Deleted word buffer.
	    [CH$ALLOCATION (81)],
	EDT$$G_DEL_WDLEN,			! Length of del word string.
	EDT$$G_EXI,				! Change mode has been exited.
	EDT$$G_PST_CNT,				! No. of characters pasted.
	EDT$$A_RPL_STR,				! Address of replace string.
	EDT$$G_RPL_LEN,				! Length of replace string.
	EDT$$G_SEA_STRLEN,			! length of search string
	EDT$$A_SEA_STR,				! Address of search string.
	EDT$$A_SEL_BUF,				! Pointer to select buffer.
	EDT$$A_OLD_SEL,				! Pointer to old select buffer
	EDT$$L_SEL_LN : LN_BLOCK,		! Relative line number of select.
	EDT$$A_SEL_POS,				! select position.
	EDT$$G_SHF,				! The number of columns shifted.
	EDT$$G_TRUN,				! 0 = SET NOTRUNCATE
	EDT$$G_SEA_LEN,				! Length of search string.
	EDT$$L_TOP_LN : LN_BLOCK,		! The forced to top line.
	EDT$$G_VERT,				! Last entity was VERT flag.
	EDT$$G_EXITD,				! Exit from EDT
	EDT$$G_SCR_CHGD,			! Set if screen must be initialized and/or repainted
	EDT$$G_SCR_REBUILD,			! Set if text part of screen must be rebuilt from work file
	EDT$$G_TAB_SIZ,				! Structured tab size
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,	! The current buffer tbcb
	EDT$$G_TAB_LVL,				! Structured tab level.
	EDT$$G_TI_TYP,				! Terminal type.
	EDT$$T_FMT_BUF,				! Format buffer
	EDT$$A_FMT_CUR,				! Pointer into format buffer
	EDT$$T_LN_BUF,				! Current line buffer
	EDT$$A_LN_PTR,				! Current character pointer

%IF SUPPORT_WPS
%THEN
	EDT$$G_DFLT_VERB,			! Default verb
%FI

	EDT$$G_CC_DONE;				! Set to 1 if control C aborts something

!+
! Declare the message codes to be used.
!-
    MESSAGES ((SELALRACT, INVSUBCOM, CLDNOTALN, INVASCCHR, INVSTR));

    LOCAL
	SUCCEED,
	START_POS : POS_BLOCK,
	END_POS : POS_BLOCK,
	NUM_LINES;

!+
! If verb is SUBSTITUTE, set up the search and substitute strings.
!-

    IF (.VERB EQL VERB_K_SUBS)
    THEN
	SUCCEED = EDT$$SET_SEASUBSTR (.EDT$$A_SEA_STR, 	!
	    .EDT$$G_SEA_LEN, 			!
	    .EDT$$A_RPL_STR, 			!
	    .EDT$$G_RPL_LEN)
    ELSE
	SUCCEED = 1;

    IF ( NOT .SUCCEED)
    THEN
	EDT$$MSG_BELL (EDT$_INVSTR)
    ELSE

	DO
	    BEGIN

	    CASE .VERB FROM VERB_K_SEL TO LAST_K_VERB OF
		SET

		[VERB_K_UNDC] :
		    BEGIN
		    SUCCEED = EDT$$UNDL (EDT$$T_DEL_CH, .EDT$$G_DEL_CHLEN);
		    END;

		[VERB_K_UNDW] :
		    BEGIN
		    SUCCEED = EDT$$UNDL (EDT$$T_DEL_WD, .EDT$$G_DEL_WDLEN);
		    END;

		[VERB_K_UNDL] :
		    BEGIN
		    SUCCEED = EDT$$UNDL (EDT$$T_DEL_LN, .EDT$$G_DEL_LNLEN);
		    END;

		[VERB_K_INSERT] :
		    BEGIN
		    SUCCEED = EDT$$INS_CHS (.OPERAND, .EDT$$G_SEA_LEN);

		    IF .SUCCEED THEN SUCCEED = EDT$$WORD_WRAP ();

		    END;

		[VERB_K_XLATE] :
		    BEGIN

%IF %BLISS (BLISS32)
%THEN
		    SUCCEED = EDT$$GET_XLATE (.OPERAND, .EDT$$G_SEA_LEN);
%ELSE
		    EDT$$MSG_BELL (EDT$_INVSUBCOM);
		    RETURN (0);
%FI

		    END;

		[VERB_K_CC] :
		    BEGIN
		    SUCCEED = EDT$$INS_CHS (%REF (CH$RCHAR (.OPERAND) - %C'@'), 1);
		    END;

		[VERB_K_BACK] :
		    BEGIN
		    EDT$$G_DIR_MOD = DIR_BACKWARD;
		    EXITLOOP;
		    END;

		[VERB_K_ADV] :
		    BEGIN
		    EDT$$G_DIR_MOD = DIR_FORWARD;
		    EXITLOOP;
		    END;

		[VERB_K_DLWC] :
		    BEGIN

%IF SUPPORT_WPS
%THEN
		    EDT$$G_DFLT_VERB = VERB_K_CHGL;	! set up default verb to change case lower
%FI

		    EXITLOOP;
		    END;

		[VERB_K_DUPC] :
		    BEGIN

%IF SUPPORT_WPS
%THEN
		    EDT$$G_DFLT_VERB = VERB_K_CHGU;	! set up default verb to change case upper
%FI

		    EXITLOOP;
		    END;

		[VERB_K_DMOV] :
		    BEGIN

%IF SUPPORT_WPS
%THEN
		    EDT$$G_DFLT_VERB = VERB_K_MOVE;	! set up default verb to move
%FI

		    EXITLOOP;
		    END;

		[VERB_K_EXIT, VERB_K_QUIT] :
		    BEGIN
		    EDT$$G_EXI = 1;

		    IF (.VERB EQL VERB_K_QUIT) THEN EDT$$G_EXITD = 1;

		    RETURN (1);
		    END;

		[VERB_K_PASTE] :
		    BEGIN
		    SUCCEED = EDT$$PST_CMD ();
		    END;

		[VERB_K_SEL] :
		    BEGIN

		    IF (.EDT$$A_SEL_BUF NEQA 0)
		    THEN
			BEGIN
			EDT$$MSG_BELL (EDT$_SELALRACT);
			SUCCEED = 0;
			END
		    ELSE
			BEGIN
			MOVELINE (EDT$$A_CUR_BUF [TBCB_CUR_LIN], EDT$$L_SEL_LN);
			EDT$$A_SEL_BUF = .EDT$$A_CUR_BUF;
			EDT$$A_SEL_POS = .EDT$$A_LN_PTR;

			IF (.EDT$$A_OLD_SEL NEQA 0) THEN EDT$$G_SCR_REBUILD = 1;

			END;

		    EXITLOOP;
		    END;

		[VERB_K_REF] :
		    BEGIN
		    EDT$$G_SCR_CHGD = 2;	! Initialize the terminal and repaint the screen
		    EXITLOOP;
		    END;

		[VERB_K_BELL] :
		    BEGIN

%IF SUPPORT_WPS
%THEN
		    EDT$$RING_BELL ();
%FI

		    EXITLOOP;
		    END;

		[VERB_K_DATE] :
		    BEGIN

%IF SUPPORT_WPS
%THEN
		    SUCCEED = EDT$$INS_DATIM ();
%ELSE
		    0
%FI

		    ;
		    END;

		[VERB_K_DEFK] :
		    BEGIN
		    SUCCEED = EDT$$LN_DEFK ();
		    EXITLOOP;
		    END;

		[VERB_K_TOP] :
		    BEGIN
		    MOVELINE (EDT$$A_CUR_BUF [TBCB_CUR_LIN], EDT$$L_TOP_LN);
		    EXITLOOP;
		    END;

		[VERB_K_HELP] :
		    BEGIN

		    LOCAL
			KPAD_STATUS;

		    EDT$$SC_NONREVID ();
		    EDT$$STOP_WKINGMSG ();
		    KPAD_STATUS = EDT$$KPAD_HLP ();
		    EDT$$G_SCR_CHGD = 1;	! Repaint the screen

		    IF (.KPAD_STATUS EQL 0) THEN SUCCEED = 2;

		    EXITLOOP;
		    END;

		[VERB_K_ASC] :
		    BEGIN

		    IF ((.COUNT GTR 255) OR (.COUNT LSS 0))
		    THEN
			BEGIN
			EDT$$MSG_BELL (EDT$_INVASCCHR);
			SUCCEED = 0;
			END
		    ELSE
			BEGIN
			EDT$$INS_STR (%REF (.COUNT), 1);
			EXITLOOP;
			END;

		    END;

		[VERB_K_SUBS, VERB_K_SN] :
		    BEGIN
		    SUCCEED = EDT$$SUB_CMD ();
		    END;

		[VERB_K_KS] : 			! Adjust for KED SUBSTITUTE.
		    BEGIN
!+
! The cursor should move left one even if G_PST_CNT is zero
!-

		    IF (.EDT$$G_DIR EQL DIR_BACKWARD) AND (.EDT$$G_PST_CNT NEQ 0)
		    THEN

			DECR I FROM .EDT$$G_PST_CNT - 1 TO 0 DO
			    EDT$$CS_LEFT ()

		    ELSE
			EDT$$CS_LEFT ();

		    END;

		[VERB_K_SHL] :
		    BEGIN
		    EDT$$G_SHF = .EDT$$G_SHF + 8;

		    IF ((.EDT$$G_SHF GEQ 32767) OR (.EDT$$G_SHF LSS 0)) THEN EDT$$G_SHF = 0;

		    EDT$$G_SCR_CHGD = 1;	! repaint the screen

		    IF ( NOT .EDT$$G_TRUN) THEN EDT$$G_SCR_REBUILD = 1;

		    END;

		[VERB_K_SHR] :
		    BEGIN
		    EDT$$G_SHF = .EDT$$G_SHF - 8;

		    IF ((.EDT$$G_SHF GEQ 32767) OR (.EDT$$G_SHF LSS 0)) THEN EDT$$G_SHF = 0;

		    EDT$$G_SCR_CHGD = 1;	! repaint the screen

		    IF ( NOT .EDT$$G_TRUN) THEN EDT$$G_SCR_REBUILD = 1;

		    END;

		[VERB_K_TAB] :
		    BEGIN

		    LOCAL
			TAB_COUNT;

		    IF (CH$PTR_NEQ (.EDT$$A_LN_PTR, CH$PTR (EDT$$T_LN_BUF)) OR 	!
			(.EDT$$G_TAB_SIZ EQL 0))
		    THEN
			TAB_COUNT = 8
		    ELSE
			TAB_COUNT = .EDT$$G_TAB_LVL*.EDT$$G_TAB_SIZ;

		    SUCCEED = EDT$$MOV_TOCOL (.TAB_COUNT);
		    END;

		[VERB_K_TC] :
		    BEGIN

		    LOCAL
			COL,
			LIN;

		    IF (.EDT$$G_TAB_SIZ EQL 0) THEN EXITLOOP;

		    EDT$$SC_CPUCSPOS (LIN, COL);
		    COL = .COL + .EDT$$G_SHF;

		    IF ((.COL MOD .EDT$$G_TAB_SIZ) NEQ 0)
		    THEN
			EDT$$MSG_BELL (EDT$_CLDNOTALN)
		    ELSE
			EDT$$G_TAB_LVL = (MAX (0, .COL))/.EDT$$G_TAB_SIZ;

		    EXITLOOP;
		    END;

		[VERB_K_TD] :
		    BEGIN
		    EDT$$G_TAB_LVL = MAX (0, .EDT$$G_TAB_LVL - 1);
		    END;

		[VERB_K_TI] :
		    BEGIN
		    EDT$$G_TAB_LVL = .EDT$$G_TAB_LVL + 1;
		    END;

		[VERB_K_EXT] :
		    BEGIN
		    EDT$$SC_FULLSCLL ();

		    IF ((.EDT$$G_TI_TYP EQL TERM_VT52) OR 	!
			(.EDT$$G_TI_TYP EQL TERM_VT100))
		    THEN
			EDT$$A_FMT_WRRUT = EDT$$TI_WRSTR
		    ELSE
			BEGIN
			EDT$$STOP_WKINGMSG ();
			EDT$$A_FMT_WRRUT = EDT$$TI_WRLN;
			END;

		    EDT$$RPL_CHGDLN ();
		    EDT$$A_CUR_BUF [TBCB_CHAR_POS] = CH$DIFF (.EDT$$A_LN_PTR, CH$PTR (EDT$$T_LN_BUF));
		    EDT$$G_EXT_MOD = 1;
		    EDT$$EXT_CMD ();
		    EDT$$G_EXT_MOD = 0;
		    EDT$$A_FMT_CUR = EDT$$T_FMT_BUF;
		    EDT$$GET_TXTLN ();
		    EDT$$A_LN_PTR = CH$PTR (EDT$$T_LN_BUF, .EDT$$A_CUR_BUF [TBCB_CHAR_POS]);

		    IF (.EDT$$G_TI_SCROLL) THEN EDT$$SC_SETSCLLREG (0, .EDT$$G_SCR_LNS);

		    EXITLOOP;
		    END;

		[VERB_K_DESEL] :
		    BEGIN

%IF SUPPORT_WPS
%THEN
		    EDT$$A_SEL_BUF = 0;		! No select range active
%ELSE
		    0
%FI

		    END;

		[VERB_K_TGSEL] :
		    BEGIN

%IF SUPPORT_WPS
%THEN

		    IF (.EDT$$A_SEL_BUF EQLA 0)
		    THEN
			BEGIN
			MOVELINE (EDT$$A_CUR_BUF [TBCB_CUR_LIN], EDT$$L_SEL_LN);
			EDT$$A_SEL_BUF = .EDT$$A_CUR_BUF;
			EDT$$A_SEL_POS = .EDT$$A_LN_PTR;

			IF (.EDT$$A_OLD_SEL NEQA 0) THEN EDT$$G_SCR_REBUILD = 1;

			END
		    ELSE
			EDT$$A_SEL_BUF = 0;

%ELSE
		    0
%FI

		    END;

		[VERB_K_CLSS] :
		    BEGIN

%IF SUPPORT_WPS
%THEN
		    EDT$$G_SEA_STRLEN = 0;	! reset search string
%ELSE
		    0
%FI

		    END;

		[OUTRANGE] :
		    ASSERT (0);
		TES;

	    IF (.EXPLICIT NEQ 0) THEN COUNT = .COUNT - 1;

	    IF (.SUCCEED NEQ 1) THEN EXITLOOP;

	    IF EDT$$CHK_CC ()
	    THEN
		BEGIN

		IF (.COUNT GTR 0) THEN EDT$$G_CC_DONE = 1;

		EXITLOOP;
		END;

	    END
	UNTIL (.COUNT LEQ 0);

!+
! Unless the command was advance or backup, turn off the EDT$$G_VERT  flag.
!-

    IF ((.VERB NEQ VERB_K_ADV) AND (.VERB NEQ VERB_K_BACK)) THEN EDT$$G_VERT = 0;

    RETURN (.SUCCEED);
    END;					! of routine EDT$$EXE_CHMCMD1

!<BLF/PAGE>

END						! of module EDT$CHMEXCOM

ELUDOM
