; 
; ****************************************************************************
; *									    *
; *  Copyright (c) 1982, 1983		                                    *
; *  by DIGITAL Equipment Corporation, Maynard, Mass.			    *
; * 									    *
; *  This software is furnished under a license and may be used and  copied  *
; *  only  in  accordance  with  the  terms  of  such  license and with the  *
; *  inclusion of the above copyright notice.  This software or  any  other  *
; *  copies  thereof may not be provided or otherwise made available to any  *
; *  other person.  No title to and ownership of  the  software  is  hereby  *
; *  transferred.							    *
; * 									    *
; *  The information in this software is subject to change  without  notice  *
; *  and  should  not  be  construed  as  a commitment by DIGITAL Equipment  *
; *  Corporation.							    *
; * 									    *
; *  DIGITAL assumes no responsibility for the use or  reliability  of  its  *
; *  software on equipment which is not supplied by DIGITAL.		    *
; *									    *
; ****************************************************************************
; *********************************************************************************************************************************
;  Created 15-SEP-1984 22:55:06  by  VAX-11 SDL V2.0       Source: 15-SEP-1984 22:49:39 _$255$DUA28:[RMS.SRC]RMSUSR.SDL;1          
; *********************************************************************************************************************************
 
 
	.MACRO	$FABDEF,$GBL
	$DEFINI	FAB,$GBL
; +++++*****
;    the fields thru ctx must not be modified due to
;    commonality between fab/rab/xab
$EQU	FAB$C_BID	3               ;  code for fab 
$EQU	FAB$M_PPF_RAT	16320
$EQU	FAB$M_PPF_IND	16384
$EQU	FAB$M_MXV	2
$EQU	FAB$M_SUP	4
$EQU	FAB$M_TMP	8
$EQU	FAB$M_TMD	16
$EQU	FAB$M_DFW	32
$EQU	FAB$M_SQO	64
$EQU	FAB$M_RWO	128
$EQU	FAB$M_POS	256
$EQU	FAB$M_WCK	512
$EQU	FAB$M_NEF	1024
$EQU	FAB$M_RWC	2048
$EQU	FAB$M_DMO	4096
$EQU	FAB$M_SPL	8192
$EQU	FAB$M_SCF	16384
$EQU	FAB$M_DLT	32768
$EQU	FAB$M_NFS	65536
$EQU	FAB$M_UFO	131072
$EQU	FAB$M_PPF	262144
$EQU	FAB$M_INP	524288
$EQU	FAB$M_CTG	1048576
$EQU	FAB$M_CBT	2097152
$EQU	FAB$M_RCK	8388608
$EQU	FAB$M_NAM	16777216
$EQU	FAB$M_CIF	33554432
$EQU	FAB$M_ESC	134217728
$EQU	FAB$M_TEF	268435456
$EQU	FAB$M_OFP	536870912
$EQU	FAB$M_KFO	1073741824
$EQU	FAB$M_PUT	1
$EQU	FAB$M_GET	2
$EQU	FAB$M_DEL	4
$EQU	FAB$M_UPD	8
$EQU	FAB$M_TRN	16
$EQU	FAB$M_BIO	32
$EQU	FAB$M_BRO	64
$EQU	FAB$M_EXE	128
$EQU	FAB$M_SHRPUT	1
$EQU	FAB$M_SHRGET	2
$EQU	FAB$M_SHRDEL	4
$EQU	FAB$M_SHRUPD	8
$EQU	FAB$M_MSE	16
$EQU	FAB$M_NIL	32
$EQU	FAB$M_UPI	64
$EQU	FAB$C_SEQ	0               ;  sequential 
$EQU	FAB$C_REL	16              ;  relative 
$EQU	FAB$C_IDX	32              ;  indexed 
$EQU	FAB$C_HSH	48              ;  hashed 
$EQU	FAB$M_FTN	1
$EQU	FAB$M_CR	2
$EQU	FAB$M_PRN	4
$EQU	FAB$M_BLK	8
$EQU	FAB$C_RFM_DFLT	2               ;  var len is default 
$EQU	FAB$C_UDF	0               ;  undefined (also stream binary) 
$EQU	FAB$C_FIX	1               ;  fixed length records 
$EQU	FAB$C_VAR	2               ;  variable length records 
$EQU	FAB$C_VFC	3               ;  variable fixed control 
$EQU	FAB$C_STM	4               ;  RMS-11 stream (valid only for sequential org) 
$EQU	FAB$C_STMLF	5               ;  LF stream (valid only for sequential org) 
$EQU	FAB$C_STMCR	6               ;  CR stream (valid only for sequential org) 
$EQU	FAB$C_MAXRFM	6               ;  maximum rfm supported 
$EQU	FAB$M_RU	1
$EQU	FAB$M_AI	2
$EQU	FAB$M_BI	4
$EQU	FAB$K_BLN	80              ;  length of fab 
$EQU	FAB$C_BLN	80              ;  length of fab 
$EQU	FAB$S_FABDEF	80
$EQU	FAB$B_BID	0               ;  block id 
$EQU	FAB$B_BLN	1               ;  block len 
$EQU	FAB$R_IFI_OVERLAY	2
$EQU	FAB$W_IFI	2               ;  internal file index 
$EQU	FAB$R_IFI_BITS	2
$EQU	FAB$S_PPF_RAT	8
$EQU	FAB$V_PPF_RAT	6               ;  rat value for process-permanent files 
$EQU	FAB$V_PPF_IND	14              ;  indirect access to process-permanent file 
;  (i.e., restricted operations)
$EQU	FAB$R_FOP_OVERLAY	4
$EQU	FAB$L_FOP	4               ;  file options 
$EQU	FAB$R_FOP_BITS	4
$EQU	FAB$V_MXV	1               ;  maximize version number 
$EQU	FAB$V_SUP	2               ;  supersede existing file 
$EQU	FAB$V_TMP	3               ;  create temporary file 
$EQU	FAB$V_TMD	4               ;  create temp file marked for delete 
$EQU	FAB$V_DFW	5               ;  deferred write (rel and idx) 
$EQU	FAB$V_SQO	6               ;  sequential access only 
$EQU	FAB$V_RWO	7               ;  rewind mt on open 
$EQU	FAB$V_POS	8               ;  use next magtape position 
$EQU	FAB$V_WCK	9               ;  write checking 
$EQU	FAB$V_NEF	10              ;  inhibit end of file positioning 
$EQU	FAB$V_RWC	11              ;  rewind mt on close 
$EQU	FAB$V_DMO	12              ;  dismount mt on close (not implemented) 
$EQU	FAB$V_SPL	13              ;  spool file on close 
$EQU	FAB$V_SCF	14              ;  submit command file on close 
$EQU	FAB$V_DLT	15              ;  delete sub-option 
$EQU	FAB$V_NFS	16              ;  non-file structured operation 
$EQU	FAB$V_UFO	17              ;  user file open - no rms operations 
$EQU	FAB$V_PPF	18              ;  process permanent file (pio segment) 
$EQU	FAB$V_INP	19              ;  process-permanent file is 'input' 
$EQU	FAB$V_CTG	20              ;  contiguous extension 
$EQU	FAB$V_CBT	21              ;  contiguous best try 
$EQU	FAB$V_RCK	23              ;  read checking 
$EQU	FAB$V_NAM	24              ;  use name block dvi, did, and/or fid fields for open 
$EQU	FAB$V_CIF	25              ;  create if non-existent 
$EQU	FAB$V_ESC	27              ;  'escape' to non-standard function ($modify) 
$EQU	FAB$V_TEF	28              ;  truncate at eof on close (write-accessed seq. disk file only) 
$EQU	FAB$V_OFP	29              ;  output file parse (only name type sticky) 
$EQU	FAB$V_KFO	30              ;  known file open (image activator only release 1) 
$EQU	FAB$L_STS	8               ;  status 
$EQU	FAB$L_STV	12              ;  status value 
$EQU	FAB$L_ALQ	16              ;  allocation quantity 
$EQU	FAB$W_DEQ	20              ;  default allocation quantity 
$EQU	FAB$R_FAC_OVERLAY	22
$EQU	FAB$B_FAC	22              ;  file access 
$EQU	FAB$R_FAC_BITS	22
$EQU	FAB$V_PUT	0               ;  put access 
$EQU	FAB$V_GET	1               ;  get access 
$EQU	FAB$V_DEL	2               ;  delete access 
$EQU	FAB$V_UPD	3               ;  update access 
$EQU	FAB$V_TRN	4               ;  truncate access 
$EQU	FAB$V_BIO	5               ;  block i/o access 
$EQU	FAB$V_BRO	6               ;  block and record i/o access 
$EQU	FAB$V_EXE	7               ;  execute access (caller must be exec or kernel mode, 
;   ufo must also be set)
$EQU	FAB$R_SHR_OVERLAY	23
$EQU	FAB$B_SHR	23              ;  file sharing 
$EQU	FAB$R_SHR_BITS	23
$EQU	FAB$V_SHRPUT	0               ;  put access 
$EQU	FAB$V_SHRGET	1               ;  get access 
$EQU	FAB$V_SHRDEL	2               ;  delete access 
$EQU	FAB$V_SHRUPD	3               ;  update access 
$EQU	FAB$V_MSE	4               ;  multi-stream connects enabled 
$EQU	FAB$V_NIL	5               ;  no sharing 
$EQU	FAB$V_UPI	6               ;  user provided interlocking (allows multiple 
;   writers to seq. files)
$EQU	FAB$L_CTX	24              ;  user context 
; -----*****
$EQU	FAB$B_RTV	28              ;  retrieval window size 
$EQU	FAB$R_ORG_OVERLAY	29
$EQU	FAB$B_ORG	29              ;  file organization 
$EQU	FAB$R_ORG_BITS	29
$EQU	FAB$S_ORG	4
$EQU	FAB$V_ORG	4
$EQU	FAB$R_RAT_OVERLAY	30
$EQU	FAB$B_RAT	30              ;  record format 
$EQU	FAB$R_RAT_BITS	30
$EQU	FAB$V_FTN	0               ;  fortran carriage-ctl 
$EQU	FAB$V_CR	1               ;  lf-record-cr carriage ctl 
$EQU	FAB$V_PRN	2               ;  print-file carriage ctl 
$EQU	FAB$V_BLK	3               ;  records don't cross block boundaries 
$EQU	FAB$B_RFM	31              ;  record format 
$EQU	FAB$L_JNL	32              ;  lcb address 
$EQU	FAB$L_XAB	36              ;  xab address 
$EQU	FAB$L_NAM	40              ;  nam block address 
$EQU	FAB$L_FNA	44              ;  file name string address 
$EQU	FAB$L_DNA	48              ;  default file name string addr 
$EQU	FAB$B_FNS	52              ;  file name string size 
$EQU	FAB$B_DNS	53              ;  default name string size 
$EQU	FAB$W_MRS	54              ;  maximum record size 
$EQU	FAB$L_MRN	56              ;  maximum record number 
$EQU	FAB$W_BLS	60              ;  blocksize for tape 
$EQU	FAB$B_BKS	62              ;  bucket size 
$EQU	FAB$B_FSZ	63              ;  fixed header size 
$EQU	FAB$L_DEV	64              ;  device characteristics 
$EQU	FAB$L_SDC	68              ;  spooling device characteristics 
$EQU	FAB$W_GBC	72              ;  Global buffer count 
$EQU	FAB$R_ACMODES_OVERLAY	74
$EQU	FAB$B_ACMODES	74              ;  agent access modes
$EQU	FAB$R_ACMODES_BITS	74
$EQU	FAB$S_LNM_MODE	2
$EQU	FAB$V_LNM_MODE	0               ;  ACMODE for log nams
$EQU	FAB$S_CHAN_MODE	2
$EQU	FAB$V_CHAN_MODE	2               ;  ACMODE for channel
$EQU	FAB$S_FILE_MODE	2
$EQU	FAB$V_FILE_MODE	4               ;  ACMODE to use for determining file accessibility
$EQU	FAB$R_RCF_OVERLAY	75      ;  recovery control flags
$EQU	FAB$B_RCF	75
$EQU	FAB$R_RCF_BITS	75
$EQU	FAB$V_RU	0               ;  recovery unit recovery
$EQU	FAB$V_AI	1               ;  after image recovery
$EQU	FAB$V_BI	2               ;  before image recovery
	$DEFEND	FAB,$GBL,DEF
	.ENDM
 
	.MACRO	$RABDEF,$GBL
	$DEFINI	RAB,$GBL
; 
;          record access block (rab) definitions
; 
;   there is one rab per connected stream
;   it is used for all communications between the user
;   and rms concerning operations on the stream
; 
; +++++*****
;   the fields thru ctx cannot be changed due to commonality
;   with the fab
; 
$EQU	RAB$C_BID	1               ;  code for rab 
$EQU	RAB$M_PPF_RAT	16320
$EQU	RAB$M_PPF_IND	16384
$EQU	RAB$M_ASY	1
$EQU	RAB$M_TPT	2
$EQU	RAB$M_REA	4
$EQU	RAB$M_RRL	8
$EQU	RAB$M_UIF	16
$EQU	RAB$M_MAS	32
$EQU	RAB$M_FDL	64
$EQU	RAB$M_HSH	128
$EQU	RAB$M_EOF	256
$EQU	RAB$M_RAH	512
$EQU	RAB$M_WBH	1024
$EQU	RAB$M_BIO	2048
$EQU	RAB$M_LV2	4096
$EQU	RAB$M_LOA	8192
$EQU	RAB$M_LIM	16384
$EQU	RAB$M_LOC	65536
$EQU	RAB$M_WAT	131072
$EQU	RAB$M_ULK	262144
$EQU	RAB$M_RLK	524288
$EQU	RAB$M_NLK	1048576
$EQU	RAB$M_KGE	2097152
$EQU	RAB$M_KGT	4194304
$EQU	RAB$M_NXR	8388608
$EQU	RAB$M_RNE	16777216
$EQU	RAB$M_TMO	33554432
$EQU	RAB$M_CVT	67108864
$EQU	RAB$M_RNF	134217728
$EQU	RAB$M_ETO	268435456
$EQU	RAB$M_PTA	536870912
$EQU	RAB$M_PMT	1073741824
$EQU	RAB$M_CCO	-2147483648
$EQU	RAB$C_SEQ	0               ;  sequential access 
$EQU	RAB$C_KEY	1               ;  keyed access 
$EQU	RAB$C_RFA	2               ;  rfa access 
$EQU	RAB$C_STM	3               ;  stream access (valid only for sequential org) 
$EQU	RAB$K_BLN	68              ;  length of rab 
$EQU	RAB$C_BLN	68              ;  length of rab 
$EQU	RAB$S_RABDEF	68
$EQU	RAB$B_BID	0               ;  block id 
$EQU	RAB$B_BLN	1               ;  block length 
$EQU	RAB$R_ISI_OVERLAY	2
$EQU	RAB$W_ISI	2               ;  internal stream index 
;  (ifi in fab)
$EQU	RAB$R_ISI_BITS	2
$EQU	RAB$S_PPF_RAT	8
$EQU	RAB$V_PPF_RAT	6               ;  rat value for process-permanent files 
$EQU	RAB$V_PPF_IND	14              ;  indirect access to process-permanent file 
;  (i.e., restricted operations)
$EQU	RAB$R_ROP_OVERLAY	4
$EQU	RAB$L_ROP	4               ;  record options 
$EQU	RAB$R_ROP_BITS0	4
$EQU	RAB$V_ASY	0               ;  asynchronous operations 
$EQU	RAB$V_TPT	1               ;  truncate put - allow sequential put not at 
$EQU	RAB$V_REA	2               ;  lock record for read only, allow other readers 
$EQU	RAB$V_RRL	3               ;  read record regardless of lock 
$EQU	RAB$V_UIF	4               ;  update if existent 
$EQU	RAB$V_MAS	5               ;  mass-insert mode 
$EQU	RAB$V_FDL	6               ;  fast record deletion 
$EQU	RAB$V_HSH	7               ;  use hash code in bkt 
$EQU	RAB$V_EOF	8               ;  connect to eof 
$EQU	RAB$V_RAH	9               ;  read ahead 
$EQU	RAB$V_WBH	10              ;  write behind 
$EQU	RAB$V_BIO	11              ;  connect for bio only 
$EQU	RAB$V_LV2	12              ;  level 2 RU lock consistancy
$EQU	RAB$V_LOA	13              ;  use bucket fill percentage 
$EQU	RAB$V_LIM	14              ;  compare for key limit reached on $get/$find seq. (idx only) 
; 
;  the following bits are input to
;  $find or $get, (see above also REA and RRL)
;  (separate byte)
; 
$EQU	RAB$V_LOC	16              ;  use locate mode 
$EQU	RAB$V_WAT	17              ;  wait if record not available 
$EQU	RAB$V_ULK	18              ;  manual unlocking 
$EQU	RAB$V_RLK	19              ;  allow readers for this locked record 
$EQU	RAB$V_NLK	20              ;  do not lock record 
$EQU	RAB$V_KGE	21              ;  key > or = 
$EQU	RAB$V_KGT	22              ;  key greater than 
$EQU	RAB$V_NXR	23              ;  get non-existent record 
$EQU	RAB$V_RNE	24              ;  read no echo 
$EQU	RAB$V_TMO	25              ;  use time-out period 
$EQU	RAB$V_CVT	26              ;  convert to upper case 
$EQU	RAB$V_RNF	27              ;  read no filter 
$EQU	RAB$V_ETO	28              ;  extended terminal operation
$EQU	RAB$V_PTA	29              ;  purge type ahead 
$EQU	RAB$V_PMT	30              ;  use prompt buffer 
$EQU	RAB$V_CCO	31              ;  cancel control o on output 
; 
;   the following bits are terminal qualifiers only
;   (separate byte)
; 
; 
; 
;    eof, thus truncating file (seq. org only)
; 
;  these next two should be in the byte for bits
;  input to $find or $get, but there is no room there
; 
;  the following bits may be
;  input to various rab-related
;  operations
; 
$EQU	RAB$R_ROP_FIELDS	4
$EQU	RAB$B_ROP1	5               ;  various options 
$EQU	RAB$B_ROP2	6               ;  get/find options (use of this field discouraged 
;  due to REA and RRL being in a different byte)
$EQU	RAB$B_ROP3	7               ;  terminal read options 
; 
$EQU	RAB$L_STS	8               ;  status 
$EQU	RAB$R_STV_OVERLAY	12
$EQU	RAB$L_STV	12              ;  status value 
$EQU	RAB$R_STV_FIELDS	12
$EQU	RAB$W_STV0	12              ;  low word of stv 
$EQU	RAB$W_STV2	14              ;  high word of stv 
$EQU	RAB$R_RFA_OVERLAY	16
$EQU	RAB$S_RFA	6
$EQU	RAB$W_RFA	16              ;  record's file address 
$EQU	RAB$R_RFA_FIELDS	16
$EQU	RAB$L_RFA0	16
$EQU	RAB$W_RFA4	20
;   to the rfa field to be a move quad, overwriting
;   this reserved word)
$EQU	RAB$L_CTX	24              ;  user context 
; -----*****
$EQU	RAB$B_RAC	30              ;  record access 
$EQU	RAB$B_TMO	31              ;  time-out period 
$EQU	RAB$W_USZ	32              ;  user buffer size 
$EQU	RAB$W_RSZ	34              ;  record buffer size 
$EQU	RAB$L_UBF	36              ;  user buffer address 
$EQU	RAB$L_RBF	40              ;  record buffer address 
$EQU	RAB$L_RHB	44              ;  record header buffer addr 
$EQU	RAB$R_KBF_OVERLAY	48
$EQU	RAB$L_KBF	48              ;  key buffer address 
$EQU	RAB$L_PBF	48              ;  prompt buffer addr 
$EQU	RAB$R_KSZ_OVERLAY	52
$EQU	RAB$B_KSZ	52              ;  key buffer size 
$EQU	RAB$B_PSZ	52              ;  prompt buffer size 
$EQU	RAB$B_KRF	53              ;  key of reference 
$EQU	RAB$B_MBF	54              ;  multi-buffer count 
$EQU	RAB$B_MBC	55              ;  multi-block count 
$EQU	RAB$R_BKT_OVERLAY	56
$EQU	RAB$L_BKT	56              ;  bucket hash code, vbn, or rrn 
$EQU	RAB$L_DCT	56              ;  duplicates count on key accessed on alternate key 
$EQU	RAB$L_FAB	60              ;  related fab for connect 
$EQU	RAB$L_XAB	64              ;  XAB address 
	$DEFEND	RAB,$GBL,DEF
	.ENDM
 
	.MACRO	$NAMDEF,$GBL
	$DEFINI	NAM,$GBL
; 
;          name block field definitions
; 
;   the nam block is used to communicate optional
;   filename-related information
; 
$EQU	NAM$C_BID	2               ;  code for nam block 
$EQU	NAM$C_MAXRSS	255             ;  maximum resultant name string size (network) 
$EQU	NAM$C_MAXRSSLCL	255             ;  maximum resultant name string size (local) 
$EQU	NAM$M_PWD	1
$EQU	NAM$M_FILL_1	2
$EQU	NAM$M_FILL_2	4
$EQU	NAM$M_SYNCHK	8
$EQU	NAM$M_NOCONCEAL	16
$EQU	NAM$M_SLPARSE	32
$EQU	NAM$M_SRCHXABS	64
$EQU	NAM$C_UFS	0               ;  Unknown file system for remote file access or 
;   not applicable for local file access or
;   not applicable for task-to-task operation
$EQU	NAM$C_RMS11	1               ;  RMS-11 
$EQU	NAM$C_RMS20	2               ;  RMS-20 
$EQU	NAM$C_RMS32	3               ;  RMS-32 
$EQU	NAM$C_FCS11	4               ;  FCS-11 
$EQU	NAM$C_RT11FS	5               ;  RT-11 file system 
$EQU	NAM$C_TOPS20FS	7               ;  TOPS-20 file system 
$EQU	NAM$C_TOPS10FS	8               ;  TOPS-10 file system 
$EQU	NAM$C_RMS32S	10              ;  RMS-32 subset (e.g., VAXELAN)
; +++++++++++++++++++++++
;   the following 3 fields must not be rearranged relative to each other
; 
$EQU	NAM$C_DVI	16              ;  length of dvi field 
; +++++*****
;   the location of the following fields must not
;   be changed due to their commonality with the fib
$EQU	NAM$M_IFI	65536
$EQU	NAM$M_SRCHNMF	1073741824
$EQU	NAM$M_SVCTX	-2147483648
$EQU	NAM$K_BLN_V2	56              ;  Version 2 name block length 
$EQU	NAM$C_BLN_V2	56              ;  Version 2 name block length 
$EQU	NAM$M_EXP_VER	1
$EQU	NAM$M_EXP_TYPE	2
$EQU	NAM$M_EXP_NAME	4
$EQU	NAM$M_WILD_VER	8
$EQU	NAM$M_WILD_TYPE	16
$EQU	NAM$M_WILD_NAME	32
$EQU	NAM$M_EXP_DIR	64
$EQU	NAM$M_EXP_DEV	128
$EQU	NAM$M_WILDCARD	256
$EQU	NAM$M_SEARCH_LIST	2048
$EQU	NAM$M_CNCL_DEV	4096
$EQU	NAM$M_ROOT_DIR	8192
$EQU	NAM$M_LOWVER	16384
$EQU	NAM$M_HIGHVER	32768
$EQU	NAM$M_PPF	65536
$EQU	NAM$M_NODE	131072
$EQU	NAM$M_QUOTED	262144
$EQU	NAM$M_GRP_MBR	524288
$EQU	NAM$M_WILD_DIR	1048576
$EQU	NAM$M_DIR_LVLS	14680064
$EQU	NAM$M_WILD_UFD	16777216
$EQU	NAM$M_WILD_SFD1	33554432
$EQU	NAM$M_WILD_SFD2	67108864
$EQU	NAM$M_WILD_SFD3	134217728
$EQU	NAM$M_WILD_SFD4	268435456
$EQU	NAM$M_WILD_SFD5	536870912
$EQU	NAM$M_WILD_SFD6	1073741824
$EQU	NAM$M_WILD_SFD7	-2147483648
$EQU	NAM$M_WILD_GRP	16777216
$EQU	NAM$M_WILD_MBR	33554432
$EQU	NAM$K_BLN_DIRWC	96              ;  Not documented optional length 
$EQU	NAM$C_BLN_DIRWC	96              ;  Not documented optional length 
$EQU	NAM$K_BLN	96              ;  Name block length 
$EQU	NAM$C_BLN	96              ;  Name block length 
$EQU	NAM$S_NAMDEF	96
$EQU	NAM$B_BID	0               ;  block id 
$EQU	NAM$B_BLN	1               ;  block length 
; +++++++++++++++++++++++
;   the following 3 fields must not be rearranged relative to each other
; 
$EQU	NAM$B_RSS	2               ;  resultant string area size 
$EQU	NAM$B_RSL	3               ;  resultant string length 
$EQU	NAM$L_RSA	4               ;  resultant string area address 
; -----------------------
$EQU	NAM$R_NOP_OVERLAY	8
$EQU	NAM$B_NOP	8               ;  Name options
$EQU	NAM$R_NOP_BITS	8
$EQU	NAM$V_PWD	0               ;  Return password if present in nodespec string and any
$EQU	NAM$V_FILL_1	1               ;  unused.  (used to be undocumented ROD)
$EQU	NAM$V_FILL_2	2               ;  unused.  (used to be undocumented SOD)
$EQU	NAM$V_SYNCHK	3               ;  Only do syntax check on $parse operation
$EQU	NAM$V_NOCONCEAL	4               ;  Do not conceal device/root directory
$EQU	NAM$V_SLPARSE	5               ;  Parse search list (not documented) -- used by BACKUP.
$EQU	NAM$V_SRCHXABS	6               ;  Fill in attached XABS on $SEARCH operations over the
;   network (not documented) -- used by directory.
;  other task-specific data of the form /netacp_data"
;   (default is to mask out password from expanded and
;   resultant name strings and to create a logical name
;   whose equivalence string is the unaltered nodespec)
$EQU	NAM$B_RFS	9               ;  Remote file system type (currently not documented) 
;  Note: This field is reserved for use by Digital
$EQU	NAM$B_ESS	10              ;  espanded string area size 
$EQU	NAM$B_ESL	11              ;  expanded string length 
$EQU	NAM$L_ESA	12              ;  expanded string area address 
; -----------------------
$EQU	NAM$L_RLF	16              ;  related file nam block addr 
$EQU	NAM$S_DVI	16
$EQU	NAM$T_DVI	20              ;  device id 
$EQU	NAM$R_FID_OVERLAY	36
$EQU	NAM$S_FID	6
$EQU	NAM$W_FID	36              ;  file id 
$EQU	NAM$R_FID_FIELDS	36
$EQU	NAM$W_FID_NUM	36              ;  file number 
$EQU	NAM$W_FID_SEQ	38              ;  sequence number 
$EQU	NAM$R_FID_RVN_OVERLAY	40
$EQU	NAM$W_FID_RVN	40              ;  relative volume number 
$EQU	NAM$R_FID_RVN_FIELDS	40
$EQU	NAM$B_FID_RVN	40              ;  alternate format RVN 
$EQU	NAM$B_FID_NMX	41              ;  alternate format file number extension 
$EQU	NAM$R_DID_OVERLAY	42
$EQU	NAM$S_DID	6
$EQU	NAM$W_DID	42              ;  directory id 
$EQU	NAM$R_DID_FIELDS	42
$EQU	NAM$W_DID_NUM	42              ;  file number 
$EQU	NAM$W_DID_SEQ	44              ;  sequence number 
$EQU	NAM$R_DID_RVN_OVERLAY	46
$EQU	NAM$W_DID_RVN	46              ;  relative volume number 
$EQU	NAM$R_DID_RVN_FIELDS	46
$EQU	NAM$B_DID_RVN	46              ;  alternate format RVN 
$EQU	NAM$B_DID_NMX	47              ;  alternate format file number extension 
$EQU	NAM$R_WCC_OVERLAY	48
$EQU	NAM$L_WCC	48              ;  wild card context 
$EQU	NAM$R_WCC_BITS	48
$EQU	NAM$V_IFI	16              ;  the first word contains an IFI 
$EQU	NAM$V_SRCHNMF	30              ;  no-more-files has been encountered on a search 
$EQU	NAM$V_SVCTX	31              ;  save context across search calls 
$EQU	NAM$R_FNB_OVERLAY	52
$EQU	NAM$L_FNB	52              ;  file name status bits 
$EQU	NAM$R_FNB_BITS0	52
$EQU	NAM$V_EXP_VER	0               ;  version was explicit 
$EQU	NAM$V_EXP_TYPE	1               ;  type was explicit 
$EQU	NAM$V_EXP_NAME	2               ;  name was explicit 
$EQU	NAM$V_WILD_VER	3               ;  version contained a wild card 
$EQU	NAM$V_WILD_TYPE	4               ;  type contained a wild card 
$EQU	NAM$V_WILD_NAME	5               ;  name contained a wild card 
$EQU	NAM$V_EXP_DIR	6               ;  directory was explicit 
$EQU	NAM$V_EXP_DEV	7               ;  device was explicit 
$EQU	NAM$V_WILDCARD	8               ;  filename string included a wild card 
$EQU	NAM$V_SEARCH_LIST	11      ;  search list present 
$EQU	NAM$V_CNCL_DEV	12              ;  concealed device present 
$EQU	NAM$V_ROOT_DIR	13              ;  root directory present 
$EQU	NAM$V_LOWVER	14              ;  lower numbered version(s) of file exist(s) 
$EQU	NAM$V_HIGHVER	15              ;  higher " 
$EQU	NAM$V_PPF	16              ;  process-permanent file referenced indirectly 
$EQU	NAM$V_NODE	17              ;  filename specification included a nodename 
$EQU	NAM$V_QUOTED	18              ;  filename spec included a quoted string 
$EQU	NAM$V_GRP_MBR	19              ;  directory spec was of group-member format 
$EQU	NAM$V_WILD_DIR	20              ;  directory spec included a wild card 
$EQU	NAM$S_DIR_LVLS	3
$EQU	NAM$V_DIR_LVLS	21              ;  number of directory levels (0=ufd only) 
; 
;  (inclusive or of other wild card bits)
$EQU	NAM$R_FNB_BITS1	52
$EQU	NAM$V_WILD_UFD	24              ;  ufd included a wild card 
$EQU	NAM$V_WILD_SFD1	25              ;  sfd1 included a wild card 
$EQU	NAM$V_WILD_SFD2	26              ;  sfd2 included a wild card 
$EQU	NAM$V_WILD_SFD3	27              ;  sfd3 included a wild card 
$EQU	NAM$V_WILD_SFD4	28              ;  sfd4 included a wild card 
$EQU	NAM$V_WILD_SFD5	29              ;  sfd5 included a wild card 
$EQU	NAM$V_WILD_SFD6	30              ;  sfd6 included a wild card 
$EQU	NAM$V_WILD_SFD7	31              ;  sfd7 included a wild card 
$EQU	NAM$R_FNB_BITS2	52
$EQU	NAM$V_WILD_GRP	24              ;  group contained a wild card 
$EQU	NAM$V_WILD_MBR	25              ;  member contained a wild card 
; -----*****
;  (prior to 40 byte extension)
; 
;  Extend the NAM block by 40 bytes.
; 
$EQU	NAM$B_NODE	56              ;  Nodespec length 
$EQU	NAM$B_DEV	57              ;  Device length 
$EQU	NAM$B_DIR	58              ;  Directory length 
$EQU	NAM$B_NAME	59              ;  Filename length 
$EQU	NAM$B_TYPE	60              ;  Filetype length 
$EQU	NAM$B_VER	61              ;  Version number length 
$EQU	NAM$L_NODE	64              ;  Nodespec address 
$EQU	NAM$L_DEV	68              ;  Device address 
$EQU	NAM$L_DIR	72              ;  Directory address 
$EQU	NAM$L_NAME	76              ;  Filename address 
$EQU	NAM$L_TYPE	80              ;  Filetype address 
$EQU	NAM$L_VER	84              ;  Version number address 
	$DEFEND	NAM,$GBL,DEF
	.ENDM
 
	.MACRO	$XABDEF,$GBL
	$DEFINI	XAB,$GBL
; 
;          definitions for all xabs
;                 $xabdef
; 
; 
; 
;   the first four fields are shared in common between all xabs
;   and hence are defined only once
;   (the only exception is that the spare word may be used by some xabs)
; 
$EQU	XAB$S_XABDEF	20
$EQU	XAB$B_COD	0               ;  xab id code 
$EQU	XAB$B_BLN	1               ;  block length 
$EQU	XAB$L_NXT	4               ;  xab chain link 
; WITH POSSIBLE EXCEPTION OF SPARE FIELD
$EQU	XAB$W_RVN	8
$EQU	XAB$R_RDT_OVERLAY	12
$EQU	XAB$S_RDT	8
$EQU	XAB$Q_RDT	12
$EQU	XAB$R_RDT_FIELDS	12
$EQU	XAB$L_RDT0	12
$EQU	XAB$L_RDT4	16
; COMMON AMONG DAT AND RDT XABS
$EQU	XAB$S_XABDEF1	23
$EQU	XAB$B_BKZ	22              ; COMMON TO FHC AND ALQ XABS 
$EQU	XAB$C_CXT_VER1	1               ;  RMS Context Extraction version 1
	$DEFEND	XAB,$GBL,DEF
	.ENDM
 
	.MACRO	$XABFHCDEF,$GBL
	$DEFINI	XABFHC,$GBL
; ++
;         file header characteristics xab definitions
;                 $xabfhcdef
; 
; +++++*****
;   the fields of this xab cannot be rearranged since
;   they correspond to an on-disk structure
; 
$EQU	XAB$C_FHC	29              ;  xabfhc id code 
$EQU	XAB$K_FHCLEN	44              ;  length of xabfhc 
$EQU	XAB$C_FHCLEN	44              ;  length of xabfhc 
$EQU	XAB$S_XABFHCDEF	44
; THESE 4 FIELDS ARE COMMON TO ALL XABS AND
; HAVE BEEN DEFINED BY $XABDEF
$EQU	XAB$B_RFO	8               ;  record format and file org 
$EQU	XAB$B_ATR	9               ;  record attributes 
$EQU	XAB$W_LRL	10              ;  longest record's length 
$EQU	XAB$R_HBK_OVERLAY	12
$EQU	XAB$L_HBK	12              ;  hi vbn allocated 
;  (n.b. reversed on disk!)
$EQU	XAB$R_HBK_FIELDS	12
$EQU	XAB$W_HBK0	12
$EQU	XAB$W_HBK2	14
$EQU	XAB$R_EBK_OVERLAY	16
$EQU	XAB$L_EBK	16              ;  eof vbn 
;  (n.b. reversed on disk)
$EQU	XAB$R_EBK_FIELDS	16
$EQU	XAB$W_EBK0	16
$EQU	XAB$W_EBK2	18
$EQU	XAB$W_FFB	20              ;  first free byte in eof block 
;  defined above in $xabdef, since it is shared
;  by the all xab)
$EQU	XAB$B_HSZ	23              ;  header size for vfc 
$EQU	XAB$W_MRZ	24              ;  max record size 
$EQU	XAB$W_DXQ	26              ;  default extend quantity 
$EQU	XAB$W_GBC	28              ;  global buffer count 
$EQU	XAB$W_VERLIMIT	38              ;  version limit for file. 
; -----*****
$EQU	XAB$L_SBN	40              ;  starting lbn if contiguous 
	$DEFEND	XABFHC,$GBL,DEF
	.ENDM
 
	.MACRO	$XABALLDEF,$GBL
	$DEFINI	XABALL,$GBL
; --
; ++
; 
;         allocation xab definitions
;                 $xaballdef
; 
; 
; +++++*****
;   the fields thru bkz cannot be rearranged due to
;   their commonality with fab
$EQU	XAB$C_ALL	20              ;  xaball id code 
$EQU	XAB$M_HRD	1
$EQU	XAB$M_ONC	2
$EQU	XAB$M_CBT	32
$EQU	XAB$M_CTG	128
$EQU	XAB$C_ANY	0               ;  any allocation o.k. 
$EQU	XAB$C_CYL	1               ;  cylinder boundary 
$EQU	XAB$C_LBN	2               ;  allocate at specified lbn 
$EQU	XAB$C_VBN	3               ;  allocate near specified vbn 
$EQU	XAB$C_RFI	4               ;  allocate near related file 
$EQU	XAB$K_ALLLEN	32              ;  length of xaball 
$EQU	XAB$C_ALLLEN	32              ;  length of xaball 
$EQU	XAB$S_XABALLDEF	32
; THESE 4 FIELDS ARE COMMON TO ALL XABS AND
; HAVE BEEN DEFINED BY $XABDEF
$EQU	XAB$R_AOP_OVERLAY	8
$EQU	XAB$B_AOP	8               ;  allocation options 
$EQU	XAB$R_AOP_BITS	8
$EQU	XAB$V_HRD	0               ;  fail if requested alignment impossible 
$EQU	XAB$V_ONC	1               ;  locate allocated space within a cylinder 
$EQU	XAB$V_CBT	5               ;  contiguous alllocation, best try 
$EQU	XAB$V_CTG	7               ;  contiguous allocation 
$EQU	XAB$B_ALN	9               ;  alignment type 
$EQU	XAB$W_VOL	10              ;  relative volume no. for allocation 
;  (not applicable if aln = vbn or rfi)
$EQU	XAB$L_LOC	12              ;  allocation location 
$EQU	XAB$L_ALQ	16              ;  allocation quantity 
$EQU	XAB$W_DEQ	20              ;  default allocation quantity 
;  defined above in $xabdef,since it is shared by the fhc
;  xab and has the same offset, of course)
; -----*****
$EQU	XAB$B_AID	23              ;  area id number 
$EQU	XAB$R_RFI_OVERLAY	24
$EQU	XAB$S_RFI	6
$EQU	XAB$W_RFI	24              ;  related file id 
$EQU	XAB$R_RFI_FIELDS	24
$EQU	XAB$W_RFI0	24              ;  file number 
$EQU	XAB$W_RFI2	26              ;  seq number 
$EQU	XAB$W_RFI4	28              ;  rev number 
	$DEFEND	XABALL,$GBL,DEF
	.ENDM
 
	.MACRO	$XABDATDEF,$GBL
	$DEFINI	XABDAT,$GBL
; --
; ++
; 
;         date/time xab definitions
;                 $xabdatdef
; 
$EQU	XAB$C_DAT	18              ;  xabdat id code 
$EQU	XAB$K_DATLEN_V2	36              ;  Version 2 XABDAT length 
$EQU	XAB$C_DATLEN_V2	36              ;  Version 2 XABDAT length 
$EQU	XAB$K_DATLEN	44              ;  length of XABDAT 
$EQU	XAB$C_DATLEN	44              ;  length of XABDAT 
$EQU	XAB$S_XABDATDEF	44
; THESE 4 FIELDS ARE COMMON TO ALL XABS AND
; HAVE BEEN DEFINED BY $XABDEF
$EQU	XAB$R_CDT_OVERLAY	20
$EQU	XAB$S_CDT	8
$EQU	XAB$Q_CDT	20              ;  creation date & time 
$EQU	XAB$R_CDT_FIELDS	20
$EQU	XAB$L_CDT0	20
$EQU	XAB$L_CDT4	24
$EQU	XAB$R_EDT_OVERLAY	28
$EQU	XAB$S_EDT	8
$EQU	XAB$Q_EDT	28              ;  expiration date & time 
$EQU	XAB$R_EDT_FIELDS	28
$EQU	XAB$L_EDT0	28
$EQU	XAB$L_EDT4	32
$EQU	XAB$R_BDT_OVERLAY	36
$EQU	XAB$S_BDT	8
$EQU	XAB$Q_BDT	36              ;  backup date and time 
$EQU	XAB$R_BDT_FIELDS	36
$EQU	XAB$L_BDT0	36
$EQU	XAB$L_BDT4	40
	$DEFEND	XABDAT,$GBL,DEF
	.ENDM
 
	.MACRO	$XABRDTDEF,$GBL
	$DEFINI	XABRDT,$GBL
; --
; ++
; 
;         revision date/time xab definitions
;                 $xabrdtdef
$EQU	XAB$C_RDT	30              ;  xabrdt id code 
$EQU	XAB$K_RDTLEN	20              ;  length of rdt xab 
$EQU	XAB$C_RDTLEN	20              ;  length of rdt xab 
$EQU	XAB$S_XABRDTDEF	20
; THESE 4 FIELDS ARE COMMON TO ALL XABS AND
; HAVE BEEN DEFINED BY $XABDEF
	$DEFEND	XABRDT,$GBL,DEF
	.ENDM
 
	.MACRO	$XABPRODEF,$GBL
	$DEFINI	XABPRO,$GBL
; --
; ++
; 
;         protection xab field definitions
;                 $xabprodef
; 
; 
$EQU	XAB$C_PRO	19              ;  xabpro id code 
$EQU	XAB$M_NOREAD	1
$EQU	XAB$M_NOWRITE	2
$EQU	XAB$M_NOEXE	4
$EQU	XAB$M_NODEL	8
$EQU	XAB$S_XABPRODEF	1
$EQU	XAB$R_XABPRODEF_BITS	0
$EQU	XAB$V_NOREAD	0               ;  deny read access 
$EQU	XAB$V_NOWRITE	1               ;  deny write access 
$EQU	XAB$V_NOEXE	2               ;  deny execution access 
$EQU	XAB$V_NODEL	3               ;  deny delete access 
$EQU	XAB$M_PROPAGATE	1
$EQU	XAB$K_PROLEN_V3	16              ;  V3a xabpro length 
$EQU	XAB$C_PROLEN_V3	16              ;  V3a xabpro length 
$EQU	XAB$K_PROLEN	88              ;  xabpro length 
$EQU	XAB$C_PROLEN	88              ;  xabpro length 
$EQU	XAB$S_XABPRODEF1	88
; THESE 4 FIELDS ARE COMMON TO ALL XABS AND
; HAVE BEEN DEFINED BY $XABDEF
$EQU	XAB$R_PRO_OVERLAY	8
$EQU	XAB$W_PRO	8               ;  protection mask 
$EQU	XAB$R_PRO_BITS	8
$EQU	XAB$S_SYS	4
$EQU	XAB$V_SYS	0               ;  system 
$EQU	XAB$S_OWN	4
$EQU	XAB$V_OWN	4               ;  owner 
$EQU	XAB$S_GRP	4
$EQU	XAB$V_GRP	8               ;  group 
$EQU	XAB$S_WLD	4
$EQU	XAB$V_WLD	12              ;  world 
$EQU	XAB$B_MTACC	10              ;  Magtape access control char. 
$EQU	XAB$R_PROT_OPT_OVERLAY	11
$EQU	XAB$B_PROT_OPT	11              ;  XABPRO options field
$EQU	XAB$R_PROT_OPT_FIELDS	11
$EQU	XAB$V_PROPAGATE	0               ;  Propagate security attributes on $ENTER and $RENAME
$EQU	XAB$R_UIC_OVERLAY	12
$EQU	XAB$L_UIC	12              ;  uic code 
$EQU	XAB$R_UIC_FIELDS	12
$EQU	XAB$W_MBM	12              ;  member code 
$EQU	XAB$W_GRP	14              ;  group code 
$EQU	XAB$R_PROT_MODE_OVERLAY	16      ;  RWED/mode protection for file
$EQU	XAB$S_PROT_MODE	8
$EQU	XAB$Q_PROT_MODE	16              ;  eventually may be a quadword
$EQU	XAB$R_PROT_MODE_FIELDS	16
$EQU	XAB$B_PROT_MODE	16              ;  but currently only a byte
$EQU	XAB$L_ACLBUF	24              ;  address of user's ACL buffer
$EQU	XAB$W_ACLSIZ	28              ;  size of user's ACL buffer
$EQU	XAB$W_ACLLEN	30              ;  return length of entire ACL
$EQU	XAB$L_ACLCTX	32              ;  ACL context field
$EQU	XAB$L_ACLSTS	36              ;  ACL return err status
	$DEFEND	XABPRO,$GBL,DEF
	.ENDM
 
	.MACRO	$XABTRMDEF,$GBL
	$DEFINI	XABTRM,$GBL
; --
; ++
; 
;         terminal control xab field definitions
;                 $xabtrmdef
; 
; 
; 
$EQU	XAB$C_TRM	31              ; XABTRM ID CODE 
$EQU	XAB$K_TRMLEN	36              ;  length of xab of type terminal control 
$EQU	XAB$C_TRMLEN	36              ;  length of xab of type terminal control 
$EQU	XAB$S_XABTRMDEF	36
; THESE 4 FIELDS ARE COMMON TO ALL XABS AND
; HAVE BEEN DEFINED BY $XABDEF
$EQU	XAB$L_ITMLST	8               ;  item list address
$EQU	XAB$W_ITMLST_LEN	12      ;  item list length
	$DEFEND	XABTRM,$GBL,DEF
	.ENDM
 
	.MACRO	$XABSUMDEF,$GBL
	$DEFINI	XABSUM,$GBL
; --
; ++
; 
;         summary xab field definitions
;                 $xabsumdef
; 
; 
$EQU	XAB$C_SUM	22              ;  xabsum id code 
$EQU	XAB$K_SUMLEN	12              ;  xabsum length 
$EQU	XAB$C_SUMLEN	12              ;  xabsum length 
$EQU	XAB$S_XABSUMDEF	12
; THESE 4 FIELDS ARE COMMON TO ALL XABS AND
; HAVE BEEN DEFINED BY $XABDEF
$EQU	XAB$B_NOA	8               ;  number of defined areas for index file 
$EQU	XAB$B_NOK	9               ;  number of defined keys for index file 
$EQU	XAB$W_PVN	10              ;  prologue version number (relative and index files) 
	$DEFEND	XABSUM,$GBL,DEF
	.ENDM
 
	.MACRO	$XABKEYDEF,$GBL
	$DEFINI	XABKEY,$GBL
; --
; ++
; 
;         key definition xab field definitions
;                 $xabkeydef
; 
; 
$EQU	XAB$C_KEY	21              ;  xabkey id code 
$EQU	XAB$M_DUP	1
$EQU	XAB$M_CHG	2
$EQU	XAB$M_NUL	4
$EQU	XAB$M_IDX_NCMPR	8
$EQU	XAB$M_KEY_NCMPR	64
$EQU	XAB$M_DAT_NCMPR	128
$EQU	XAB$C_STG	0               ;  string 
$EQU	XAB$C_IN2	1               ;  signed 15 bit integer (2 bytes) 
$EQU	XAB$C_BN2	2               ;  2 byte binary 
$EQU	XAB$C_IN4	3               ;  signed 31 bit integer (4 bytes) 
$EQU	XAB$C_BN4	4               ;  4 byte binary 
$EQU	XAB$C_PAC	5               ;  packed decimal (1-16 bytes) 
$EQU	XAB$C_IN8	6               ;  signed 63 bit integer (4 bytes) 
$EQU	XAB$C_BN8	7               ;  8 byte binary 
$EQU	XAB$C_MAXDTP	7               ;  max. legal data type 
$EQU	XAB$K_KEYLEN_V2	64              ;  old xabkey length 
$EQU	XAB$C_KEYLEN_V2	64              ;  old xabkey length 
; 
;  Additions for prologue 3 files
; 
$EQU	XAB$C_PRG3	3               ;  Prologue version three 
$EQU	XAB$C_PRG2	2               ;  Prologue version two 
$EQU	XAB$C_PRG1	1               ;  Prologue versoin one 
$EQU	XAB$K_KEYLEN	76              ;  xabkey length 
$EQU	XAB$C_KEYLEN	76              ;  xabkey length 
; --
; ++
$EQU	XAB$S_XABKEYDEF	76
; THESE 4 FIELDS ARE COMMON TO ALL XABS AND
; HAVE BEEN DEFINED BY $XABDEF
; 
;  the field layout of the key xab is such that it matchs as
;  closely as possible the layout of a key decriptor in the
;  index file prologue. this is so the contents may be moved
;  between the two structures as efficiently as possible.
; 
$EQU	XAB$B_IAN	8               ;  index level area number 
$EQU	XAB$B_LAN	9               ;  lowest index level area number 
$EQU	XAB$B_DAN	10              ;  data level area number 
$EQU	XAB$B_LVL	11              ;  level of root bucket 
$EQU	XAB$B_IBS	12              ;  size of index buckets in virtual blocks 
$EQU	XAB$B_DBS	13              ;  size of data buckets in virtual blocks 
$EQU	XAB$L_RVB	14              ;  root bucket start vbn 
$EQU	XAB$R_FLG_OVERLAY	18
$EQU	XAB$B_FLG	18              ;  key option flags 
$EQU	XAB$R_FLG_BITS0	18
$EQU	XAB$V_DUP	0               ;  duplicate key values allowed 
$EQU	XAB$V_CHG	1               ;  alt key only --key field may change on update 
$EQU	XAB$V_NUL	2               ;  alt key only --null key value enable 
$EQU	XAB$V_IDX_NCMPR	3               ;  indicate index records for given key are not compressed 
$EQU	XAB$V_KEY_NCMPR	6               ;  indicates key is not compressed in data record 
$EQU	XAB$R_FLG_BITS1	18
$EQU	XAB$V_DAT_NCMPR	7               ;  data record is not compressed 
$EQU	XAB$B_DTP	19              ;  key field data type 
$EQU	XAB$B_NSG	20              ;  number of key segments 
$EQU	XAB$B_NUL	21              ;  nul key character 
$EQU	XAB$B_TKS	22              ;  total key field size (bytes) 
$EQU	XAB$B_REF	23              ;  key of reference (0=prim key, 
;  1-254 = alternate keys)
$EQU	XAB$W_MRL	24              ;  minimun record length to contain key field 
$EQU	XAB$W_IFL	26              ;  index bucket fill size (bytes) 
$EQU	XAB$W_DFL	28              ;  data bucket fil size (bytes) 
$EQU	XAB$R_POS_OVERLAY	30
$EQU	XAB$S_POS	16
$EQU	XAB$W_POS	30              ;  key field record offset positions 
$EQU	XAB$R_POS_FIELDS	30
$EQU	XAB$W_POS0	30              ;  segment 0 
$EQU	XAB$W_POS1	32              ;  segment 1 
$EQU	XAB$W_POS2	34              ;  segment 2 
$EQU	XAB$W_POS3	36              ;  segment 3 
$EQU	XAB$W_POS4	38              ;  segment 4 
$EQU	XAB$W_POS5	40              ;  segment 5 
$EQU	XAB$W_POS6	42              ;  segment 6 
$EQU	XAB$W_POS7	44              ;  segment 7 
$EQU	XAB$R_SIZ_OVERLAY	46
$EQU	XAB$S_SIZ	8
$EQU	XAB$B_SIZ	46              ;  key field segment sizes 
$EQU	XAB$R_SIZ_FIELDS	46
$EQU	XAB$B_SIZ0	46              ;  segment 0 
$EQU	XAB$B_SIZ1	47              ;  segment 1 
$EQU	XAB$B_SIZ2	48              ;  segment 2 
$EQU	XAB$B_SIZ3	49              ;  segment 3 
$EQU	XAB$B_SIZ4	50              ;  segment 4 
$EQU	XAB$B_SIZ5	51              ;  segment 5 
$EQU	XAB$B_SIZ6	52              ;  segment 6 
$EQU	XAB$B_SIZ7	53              ;  segment 7 
; 
;  the positions of the above fields are dictated by the key descriptor
;  record layout in the index file prologue.
; 
$EQU	XAB$L_KNM	56              ;  pointer to 32 character key name buffer 
$EQU	XAB$L_DVB	60              ;  first data bucket start vbn 
$EQU	XAB$R_TYP_OVERLAY	64
$EQU	XAB$S_TYP	8
$EQU	XAB$B_TYP	64              ;  key field segment types 
$EQU	XAB$R_TYP_FIELDS	64
$EQU	XAB$B_TYP0	64              ;  segment 0 
$EQU	XAB$B_TYP1	65              ;  segment 1 
$EQU	XAB$B_TYP2	66              ;  segment 2 
$EQU	XAB$B_TYP3	67              ;  segment 3 
$EQU	XAB$B_TYP4	68              ;  segment 4 
$EQU	XAB$B_TYP5	69              ;  segment 5 
$EQU	XAB$B_TYP6	70              ;  segment 6 
$EQU	XAB$B_TYP7	71              ;  segment 7 
$EQU	XAB$B_PROLOG	72              ;  indicate prologue version desired (primary key only) 
	$DEFEND	XABKEY,$GBL,DEF
	.ENDM
 
	.MACRO	$XABCXFDEF,$GBL
	$DEFINI	XABCXF,$GBL
; 
;         RMS Context XAB associated with the FAB
;                 $xabcxfdef
; 
; 
$EQU	XAB$C_CXF	32              ;  XABCXF id code 
$EQU	XAB$M_CXFRST	1
$EQU	XAB$K_CXFLEN	60              ;  length of xab type CXF 
$EQU	XAB$C_CXFLEN	60              ;  length of xab type CXF 
$EQU	XAB$S_XABCXFDEF	60
;  UP TILL NOW COMMON AMONG ALL XABS
; 
;         Following in common with the CXR block, too.
;         Do not rearrange without changing both.
; 
$EQU	XAB$L_CXFSTS	8               ;  Status of the last file operation. 
$EQU	XAB$L_CXFSTV	12              ;  Status Value of the last file operation. 
; 
;  Top four bits of the options longword are reserved for the XABCXR.  These 
;  bits describe the version of the key buffer.  
; 
$EQU	XAB$R_CXFCOP_OVERLAY	16
$EQU	XAB$L_CXFCOP	16              ;  Context Options. 
$EQU	XAB$R_CXFCOP_BITS	16
$EQU	XAB$V_CXFRST	0               ;  Restore file state - use context blk as input. 
$EQU	XAB$L_CXFBKP	20              ;  Bookkeeping bits 
$EQU	XAB$W_CXFIFI	24              ;  Internal File Identifier 
$EQU	XAB$B_CXFVER	26              ;  prologue version num
; 
;         Up Till now in common with XABCXR, too.
; 
;         The following fields correspond to those in the FAB or IFB
;         They should not be rearranged as their order is assumed for
;         purposes of moving large chunks of data rather than a byte
;         or word at a time.  Note: ASSUME is used in the actual code
; 
$EQU	XAB$W_CXFDEQ	32              ;  Default extention quantity 
$EQU	XAB$B_CXFFAC	34              ;  File access 
$EQU	XAB$B_CXFSHR	35              ;  File Sharing 
$EQU	XAB$W_CXFRTE	36              ;  (Not used)
$EQU	XAB$B_CXFORG	39              ;  file organization 
$EQU	XAB$W_CXFGBC	40              ;  global buffer count
$EQU	XAB$B_CXFRTV	42              ;  retrieval window
	$DEFEND	XABCXF,$GBL,DEF
	.ENDM
 
	.MACRO	$XABCXRDEF,$GBL
	$DEFINI	XABCXR,$GBL
; 
;         RMS Context XAB associated with the RAB
;                 $xabcxrdef
; 
; 
$EQU	XAB$C_CXR	33              ;  XABCXR id code 
$EQU	XAB$M_CXRRST	1
$EQU	XAB$C_CXB_VER1	1
$EQU	XAB$C_CXRBLEN	512             ;  Length of CXRBUF (bytes)
$EQU	XAB$K_CXRLEN	84              ;  Length of XAB type CXR 
$EQU	XAB$C_CXRLEN	84              ;  Length of XAB type CXR 
$EQU	XAB$S_XABCXRDEF	84
;  UP TILL NOW COMMON AMONG ALL XABS
; 
;         Following in common with the CXF block, too.
;         Do not rearrange without changing it.
; 
$EQU	XAB$L_CXRSTS	8               ;  Status of the last record operation. 
$EQU	XAB$L_CXRSTV	12              ;  Status Value of the last record operation. 
$EQU	XAB$R_CXRCOP_OVERLAY	16
$EQU	XAB$L_CXRCOP	16              ;  Context Options. 
$EQU	XAB$R_CXRCOP_BITS	16
$EQU	XAB$V_CXRRST	0               ;  Restore file/record state - use context blk as input. 
$EQU	XAB$S_CXRBVER	4
$EQU	XAB$V_CXRBVER	28              ;  Version of Key buffer
$EQU	XAB$L_CXRBKP	20              ;  Bookkeeping bits 
$EQU	XAB$W_CXRISI	24              ;  Internal Record Identifier 
$EQU	XAB$B_CXRVER	26              ;  prologue version num.
; 
;         Up Till now in common with XABCXF, too.
; 
; 
;         The following elements are arranged such that large amounts of
;         data can be moved at a time rather than words or bytes.  Do not
;         rearrange them without this consideration in mind.
; 
; 	  The following elements are stream dependent regardless of file org.
; 
$EQU	XAB$B_CXRMBF	32              ;  Multibuffer count
$EQU	XAB$B_CXRMBC	33              ;  Multiblock count
$EQU	XAB$W_CXRBFZ	34              ;  sz in byte of CXRBUF
; 
; 	The following elements are necessary for saving the NRP context for
; 	Sequential and Relative files.
; 
$EQU	XAB$L_CXRVBN	36              ;  NRP VBN
$EQU	XAB$W_CXROFF	40              ;  NRP offset in VBN
$EQU	XAB$W_FILL_8	42              ;  mbz - longword align
; 
; 	The following elements are necessary for saving the NRP context for
; 	ISAM files.
; 
$EQU	XAB$L_CXRPOS0	44              ;  Primary Positioning RFA
$EQU	XAB$W_CXRPOS4	48
$EQU	XAB$L_CXRCUR0	52              ;  Current Positioning RFA
$EQU	XAB$W_CXRCUR4	56
$EQU	XAB$L_CXRSID0	60              ;  SIDR positioning RFA
$EQU	XAB$W_CXRSID4	64
$EQU	XAB$W_CXRCNT	68              ;  SIDR array count
$EQU	XAB$B_CXRKREF	70              ;  Cur Key of Reference
$EQU	XAB$B_CXRKLEN	71              ;  Length of key
$EQU	XAB$L_CXRBUF	72              ;  address of key buf
	$DEFEND	XABCXR,$GBL,DEF
	.ENDM
 
	.MACRO	$XABJNLDEF,$GBL
	$DEFINI	XABJNL,$GBL
; ++
; 
;         Journal XAB definitions
;                 $xabjnldef
; 
; 
$EQU	XAB$C_JNL	34              ;  xabjnl id code 
$EQU	XAB$M_ONLY_RU	1
$EQU	XAB$M_RU	2
$EQU	XAB$M_BI	4
$EQU	XAB$M_AI	8
$EQU	XAB$M_AT	16
$EQU	XAB$M_NEVER_RU	32
$EQU	XAB$K_MAXJNLNAM	16              ;  max size of ascii string journal name
$EQU	XAB$C_MAXJNLNAM	16              ;  max size of ascii string journal name
$EQU	XAB$K_JNLLEN	60
$EQU	XAB$C_JNLLEN	60
$EQU	XAB$S_XABJNLDEF	60
; THESE 4 FIELDS ARE COMMON TO ALL XABS AND
; HAVE BEEN DEFINED BY $XABDEF
$EQU	XAB$R_JOP_OVERLAY	8
$EQU	XAB$W_JOP	8               ;  journaling flags 
$EQU	XAB$R_JOP_BITS	8
$EQU	XAB$V_ONLY_RU	0               ;  Recovery-unit only access 
$EQU	XAB$V_RU	1               ;  Recovery unit 
$EQU	XAB$V_BI	2               ;  Before Image 
$EQU	XAB$V_AI	3               ;  After Image 
$EQU	XAB$V_AT	4               ;  Audit Trail 
$EQU	XAB$V_NEVER_RU	5               ;  Never journal in Recovery-unit
$EQU	XAB$B_BIS	12              ;  BI journal name buffer size 
$EQU	XAB$B_BIL	13              ;  BI journal name return size
$EQU	XAB$L_BIA	16              ;  BI journal name buffer address 
$EQU	XAB$B_AIS	20              ;  AI journal name buffer size 
$EQU	XAB$B_AIL	21              ;  AI journal name return size
$EQU	XAB$L_AIA	24              ;  AI journal name buffer address 
$EQU	XAB$B_ATS	28              ;  AT journal name buffer size 
$EQU	XAB$B_ATL	29              ;  AT journal name return size
$EQU	XAB$L_ATA	32              ;  AT journal name buffer address 
	$DEFEND	XABJNL,$GBL,DEF
	.ENDM
 
	.MACRO	$FSCNDEF,$GBL
	$DEFINI	FSCN,$GBL
; ++
; 
;         Descriptor codes for SYS$FILESCAN
; 
; 
$EQU	FSCN$M_NODE	1
$EQU	FSCN$M_DEVICE	2
$EQU	FSCN$M_ROOT	4
$EQU	FSCN$M_DIRECTORY	8
$EQU	FSCN$M_NAME	16
$EQU	FSCN$M_TYPE	32
$EQU	FSCN$M_VERSION	64
$EQU	FSCN$S_FLDFLAGS	1
$EQU	FSCN$V_NODE	0               ;  Node name present
$EQU	FSCN$V_DEVICE	1               ;  Device name present
$EQU	FSCN$V_ROOT	2               ;  Root directory present
$EQU	FSCN$V_DIRECTORY	3       ;  Directory present
$EQU	FSCN$V_NAME	4               ;  File name present
$EQU	FSCN$V_TYPE	5               ;  File type present
$EQU	FSCN$V_VERSION	6               ;  File version present
$EQU	FSCN$_FILESPEC	1               ;  complete filespec
$EQU	FSCN$_NODE	2               ;  node:: field
$EQU	FSCN$_DEVICE	3               ;  device: field
$EQU	FSCN$_ROOT	4               ;  [root.] field
$EQU	FSCN$_DIRECTORY	5               ;  [directory] field
$EQU	FSCN$_NAME	6               ;  name field
$EQU	FSCN$_TYPE	7               ;  .typ field
$EQU	FSCN$_VERSION	8               ;  ;version field
$EQU	FSCN$S_ITEM_LEN	8
$EQU	FSCN$S_FSCNDEF	8
$EQU	FSCN$W_LENGTH	0               ;  return length word
$EQU	FSCN$W_ITEM_CODE	2       ;  item code value
$EQU	FSCN$L_ADDR	4               ;  return length pointer
	$DEFEND	FSCN,$GBL,DEF
	.ENDM
 
	.MACRO	$RMEDEF,$GBL
	$DEFINI	RME,$GBL
; 
;                 rms escape definitions
; 
;   the following values identify various requests for non-standard rms
;   functions.  they are currently input to the $modify function in the
;   ctx field of the fab only if the esc bit is set in fop.  incorrect
;   use of these capabilties could cause rms to fail, hence great caution
;   should be exercised in their use.
; 
$EQU	RME$C_SETRFM	1               ;  change rfm, mrs, and fsz (if vfc) in ifab only 
$EQU	RME$C_PPFECHO	2               ;  enable echo of SYS$INPUT to SYS$OUTPUT
	$DEFEND	RME,$GBL,DEF
	.ENDM
