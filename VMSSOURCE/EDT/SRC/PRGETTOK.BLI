%TITLE 'EDT$PRGETTOK - scan a token'
MODULE EDT$PRGETTOK (				! Scan a token
		IDENT = 'V04-000'			! File: PRGETTOK.BLI Edit: JBS1012
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Scan the next parse token.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: December 12, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 25-Feb-1981.  This module was created by
!	extracting routine EDT$$PA_SCANTOK  from module PARSER.
! 1-002	- Regularize headers.  JBS 12-Mar-1981
! 1-003	- Suppress quoted strings if requested.  JBS 26-Aug-1981
! 1-004 - Change index on line numbers for 15 instead of 10 digits.  SMB 18-Jan-1982
! 1-005 - Accept quoted keys. STS 07-Apr-1982
! 1-006 - Delete reference to edt$$g_pa_val. STS 09-Apr-1982
! 1-007	- Change numeric test.  JBS 19-Jul-1982
! 1-008 - Modify to use new 48 bit arith macors. STS 01-Oct-1982
! 1-009	- Don't strip diacritical marks from letters.  JBS 13-Dec-1982
! 1-010	- Adjust EDT$$A_CMD_END when shortening a string to eliminate a doubled quote.  JBS 18-Jan-1983
! 1-011	- Add VT220 support conditional.  JBS 11-Feb-1983
! 1-012	- Correct an error in a comment.  JBS 17-Jun-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$PA_SCANTOK : NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

REQUIRE 'EDTSRC:PARLITS';

LIBRARY 'EDTSRC:SUPPORTS';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$PA_SCANTOK  - scan the next token'

GLOBAL ROUTINE EDT$$PA_SCANTOK 			! Scan the next token
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine isolates the next token in the command line, setting the variables
!	EDT$$G_PA_TOKCLASS , EDT$$A_PA_CURTOK  and EDT$$G_PA_CURTOKLEN .
!	EDT$$C_PA_CH  contains the first character following the last token, so
!	while it is blank, we keep getting the next character.  The previous token
!	address and length are stored in EDT$$A_PA_PRVTOK  and
!	EDT$$G_PA_PRVTOKLEN .  If the token is numeric then
!	EDT$$L_PA_NUMVAL  will get the numeric value of the token.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$A_CMD_BUF
!	EDT$$A_CMD_END
!	EDT$$C_PA_CH
!	EDT$$L_LNO_ZERO
!	EDT$$L_LNO0
!	EDT$$G_PA_NOQUO
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_PA_PRVTOK
!	EDT$$G_PA_PRVTOKLEN
!	EDT$$A_PA_CURTOK
!	EDT$$G_PA_CURTOKLEN
!	EDT$$L_PA_NUMVAL
!	EDT$$G_PA_PCENT
!	EDT$$G_PA_TOKCLASS
!	EDT$$A_CMD_END
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$PA_GETCH : NOVALUE;		! Get the next character from the input line

    EXTERNAL
	EDT$$G_DEFKEY,
	EDT$$A_CMD_BUF,				! Pointer into command buffer.
	EDT$$A_CMD_END,				! Pointer to end of current command.
	EDT$$C_PA_CH,				! the currently being processed character
	EDT$$A_PA_CURTOK,			! start of the current token
	EDT$$G_PA_CURTOKLEN,			! length of current token
	EDT$$L_PA_NUMVAL : LIN_BLOCK,		! the value of a numeric literal
	EDT$$G_PA_PCENT,			! Did the keyword contain a percent?
	EDT$$A_PA_PRVTOK,			! Previous token address
	EDT$$G_PA_PRVTOKLEN,			! Previous token length
	EDT$$G_PA_TOKCLASS,			! class of current token
	EDT$$G_PA_NOQUO,			! 1 = don't accept ' and " as starting a string

%IF SUPPORT_VT220
%THEN
	EDT$$B_CHAR_INFO : BLOCKVECTOR [256, 1, BYTE],	! Information about characters
%FI

	EDT$$L_LNO_ZERO : LN_BLOCK,
	EDT$$L_LNO0 : LNOVECTOR [14];

!+
! Save off the address and length of the last token.
!-
    EDT$$A_PA_PRVTOK = .EDT$$A_PA_CURTOK;
    EDT$$G_PA_PRVTOKLEN = .EDT$$G_PA_CURTOKLEN;
!+
! First scan until the first non-blank character.
!-

    UNTIL ((.EDT$$C_PA_CH NEQ %C' ') AND (.EDT$$C_PA_CH NEQ ASC_K_TAB)) DO
	EDT$$PA_GETCH ();

    EDT$$A_PA_CURTOK = .EDT$$A_CMD_BUF - 1;
    EDT$$G_PA_TOKCLASS = CL_SPECIAL;
    EDT$$G_PA_PCENT = 0;

    SELECTONE .EDT$$C_PA_CH OF
	SET

	[%C'0' TO %C'9'] :
	    BEGIN

	    LOCAL
		DIGIT : LN_BLOCK;

	    EDT$$G_PA_TOKCLASS = CL_NUMBER;
!+
! Accumulate the number as though it might a line number.  This means that we
! must do 48-bit arithmetic.
!-
	    MOVELINE (EDT$$L_LNO_ZERO, EDT$$L_PA_NUMVAL);

	    DO
		BEGIN
		MULTLINE (EDT$$L_LNO0 [1], EDT$$L_PA_NUMVAL, EDT$$L_PA_NUMVAL);
		BUILDLINE (.EDT$$C_PA_CH - %C'0', DIGIT);
		ADDLINE (DIGIT, EDT$$L_PA_NUMVAL);
		EDT$$PA_GETCH ();
		END
	    UNTIL (

%IF SUPPORT_VT220
%THEN
		(.EDT$$B_CHAR_INFO [.EDT$$C_PA_CH, 0, 0, 8, 0] NEQ %X'F0')
%ELSE
		((.EDT$$C_PA_CH LSS %C'0') OR (.EDT$$C_PA_CH GTR %C'9'))
%FI

		);				! Not a digit

	    END;

	[%C'A' TO %C'Z', %C'%', %X'C0' TO %X'CF', %X'D1' TO %X'DD'] :
	    BEGIN
	    EDT$$G_PA_TOKCLASS = CL_NAME;
!+
! Accept an optional percent sign.
!-

	    IF (.EDT$$C_PA_CH EQL %C'%')
	    THEN
		BEGIN
		EDT$$G_PA_PCENT = 1;
		EDT$$A_PA_CURTOK = .EDT$$A_CMD_BUF;
		EDT$$PA_GETCH ();
		END;

!+
! Accept alphabetic characters and underscores.
!-

	    DO
		BEGIN
		CH$WCHAR (.EDT$$C_PA_CH, CH$PLUS (.EDT$$A_CMD_BUF, -1));
		EDT$$PA_GETCH ();
		END
	    UNTIL (

%IF SUPPORT_VT220
%THEN
		(.EDT$$B_CHAR_INFO [.EDT$$C_PA_CH, 0, 0, 2, 0] EQL 0)	! Not alphabetic
%ELSE
		( NOT (((.EDT$$C_PA_CH GEQ %C'A') AND (.EDT$$C_PA_CH LEQ %C'Z')) OR ((.EDT$$C_PA_CH GEQ %C'a')
		    AND (.EDT$$C_PA_CH LEQ %C'z'))))
%FI

		AND (.EDT$$C_PA_CH NEQ %C'_'))

	    END;

	[%C'''', %C'"'] : 			! Start of a quoted string
	    BEGIN

	    LOCAL
		QUOTE;

!+
! Only scan the string if we are permitted to do so.  In the SUBSTITUTE command we may not
! scan a string since SUBSTITUTE has its own, very special, syntax for its two strings.
!-

	    IF (.EDT$$G_PA_NOQUO)
	    THEN
		BEGIN
		EDT$$PA_GETCH ();
		END
	    ELSE

		IF .EDT$$G_DEFKEY
		THEN
		    BEGIN
		    EDT$$G_PA_TOKCLASS = CL_NAME;
		    QUOTE = CH$RCHAR (.EDT$$A_PA_CURTOK);
		    EDT$$A_PA_CURTOK = .EDT$$A_PA_CURTOK + 1;

		    DO
			BEGIN

			LOCAL
			    CHAR;

			IF (.EDT$$A_CMD_BUF EQLA .EDT$$A_CMD_END) THEN EXITLOOP;

			EDT$$PA_GETCH ();
			CHAR = CH$RCHAR (.EDT$$A_PA_CURTOK);

%IF SUPPORT_VT220
%THEN

			IF .EDT$$B_CHAR_INFO [.CHAR, 0, 0, 1, 0]	! Lower case
			THEN
%ELSE

			    IF ((.CHAR GEQ %C'a') AND (.CHAR LEQ %C'z'))
			    THEN
%FI

				BEGIN
				CHAR = .CHAR - %C'a' + %C'A';
				CH$WCHAR (.CHAR, .EDT$$A_PA_CURTOK);
				END;

			END
		    UNTIL (.EDT$$C_PA_CH EQL .QUOTE);

		    EDT$$PA_GETCH ();
		    EDT$$G_PA_CURTOKLEN = CH$DIFF (.EDT$$A_CMD_BUF, .EDT$$A_PA_CURTOK) - 2;
		    RETURN;
		    END
		ELSE
		    BEGIN
		    EDT$$G_PA_TOKCLASS = CL_STRING;
		    QUOTE = CH$RCHAR (.EDT$$A_PA_CURTOK);
		    BEGIN

		    WHILE CH$PTR_NEQ (.EDT$$A_CMD_BUF, .EDT$$A_CMD_END) DO
			BEGIN

			IF (CH$RCHAR (.EDT$$A_CMD_BUF) EQL .QUOTE)
			THEN
			    BEGIN

			    IF (CH$RCHAR (CH$PTR (.EDT$$A_CMD_BUF, 1)) NEQ .QUOTE) THEN EXITLOOP;

			    EDT$$CPY_MEM (CH$DIFF (.EDT$$A_CMD_END, .EDT$$A_CMD_BUF),
				CH$PTR (.EDT$$A_CMD_BUF, 1), .EDT$$A_CMD_BUF);
			    EDT$$A_CMD_END = CH$PLUS (.EDT$$A_CMD_END, -1);
			    END;

			EDT$$A_CMD_BUF = CH$PLUS (.EDT$$A_CMD_BUF, 1);
			END;

		    EDT$$G_PA_CURTOKLEN = CH$DIFF (.EDT$$A_CMD_BUF, .EDT$$A_PA_CURTOK) - 1;
		    EDT$$PA_GETCH ();
		    END;
		    EDT$$PA_GETCH ();
		    RETURN;
		    END;

	    END;

	[%C'!'] :
	;

	[OTHERWISE] :
	    EDT$$PA_GETCH ();
	TES;

    EDT$$G_PA_CURTOKLEN = CH$DIFF (.EDT$$A_CMD_BUF, .EDT$$A_PA_CURTOK) - 1;
    END;					! of routine EDT$$PA_SCANTOK

!<BLF/PAGE>

END						! of module EDT$PRGETTOK

ELUDOM
