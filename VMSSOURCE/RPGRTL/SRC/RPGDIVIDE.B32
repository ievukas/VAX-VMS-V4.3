MODULE RPG$DIVIDE(IDENT='1-003')=
BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:	RPGII SUPPORT
!
! ABSTRACT:
!
!	This module supports RPG divides over 31 packed digits
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: Shelly T. Solomon, CREATION DATE: 15-Jul-1983
!
! MODIFIED BY:
!
! 1-001 Original.						STS 15-Jul-1983
! 1-002 Pass scale-data to PLI$DIV_PK_SHRT.			STS 02-Nov-1983
! 1-003 Change reference to PLI$ routine to OTS$ routine.	DG  05-Mar-1984
!--

REQUIRE 'RTLIN:RPGPROLOG';			! switches, psects, macros,
    						! linkages and LIBRARYs

!+
! TABLE OF CONTENTS
!-

FORWARD ROUTINE
    RPG$DIV_LONG : NOVALUE;

!+
! EXTERNAL REFERENCES
!-

EXTERNAL ROUTINE
    OTS$DIV_PKSHORT;

BUILTIN
    ASHP;


GLOBAL ROUTINE RPG$DIV_LONG(
    		FACTOR_1: REF BLOCK[,BYTE],	! dividend (packed dec by descriptor)
    		FACTOR_2: REF BLOCK[,BYTE],	! divisor (packed dec by descriptor)
    		RESULT: REF BLOCK[,BYTE]	! result (packed dec by descriptor)
    		): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine supports RPG divides when precision and scale 
!	requirements call for precision > 31 decimal digits.
!	It accepts as input packed decimal strings, and outputs a
!	packed result.
!
! CALLING SEQUENCE:
!
!	CALL RPG$DIV_LONG (factor_1.rp.ds, .factor_2.rp.ds, result.wp.ds)
!
! FORMAL PARAMETERS:
!
!	FACTOR_1	address of descriptor of dividend for divide 
!			The allowable data type is packed.
!
!	FACTOR_2	address of descriptor of divisor for divide
!			The allowable data type is packed.
!
!	RESULT		address of descriptor of result of the divide 
!			operation. The allowable data type is packed.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN

    LOCAL
        A,				! additional precision needed
    	C,				! scale factor for dividend
    	D,				! scale-data for divide
    	DIVIDEND : VECTOR[16,BYTE];	! scaled dividend
!+
! Note: the variables names, A,C, and D were chosen to correspond to the
! PLI(OTS) documentation of the run-time routine. (See the Language Support
! Reference Manual.)
!
!
! calculate additional digits of precision required
! The sign of the scale which we use is the negative of the scale which the
! run-time routine is refering to, because of the way we store negative numbers.
!-
    A = .FACTOR_1[DSC$W_LENGTH] - .FACTOR_2[DSC$B_SCALE] - .RESULT[DSC$B_SCALE]
    	    + .FACTOR_1[DSC$B_SCALE] -31;

!+
! Get scale factor needed to make the dividend a 31 digit number.
!-
    C = 31 - .FACTOR_1[DSC$W_LENGTH];

!+
! Get the data scale
!_
    D = 31 + .FACTOR_2[DSC$B_SCALE];

!+
! Move from the packed dividend to temporary dividend scaling by 10**c
!-
    ASHP(C, FACTOR_1[DSC$W_LENGTH], .FACTOR_1[DSC$A_POINTER], %REF(0),
         %REF(31), DIVIDEND);

    OTS$DIV_PKSHORT(DIVIDEND, .FACTOR_2[DSC$A_POINTER], .FACTOR_2[DSC$W_LENGTH],
    			.RESULT[DSC$A_POINTER], .RESULT[DSC$W_LENGTH], .A, .D);

    RETURN;
    END;


END
ELUDOM
