; 
; ****************************************************************************
; *									    *
; *  Copyright (c) 1982, 1983		                                    *
; *  by DIGITAL Equipment Corporation, Maynard, Mass.			    *
; * 									    *
; *  This software is furnished under a license and may be used and  copied  *
; *  only  in  accordance  with  the  terms  of  such  license and with the  *
; *  inclusion of the above copyright notice.  This software or  any  other  *
; *  copies  thereof may not be provided or otherwise made available to any  *
; *  other person.  No title to and ownership of  the  software  is  hereby  *
; *  transferred.							    *
; * 									    *
; *  The information in this software is subject to change  without  notice  *
; *  and  should  not  be  construed  as  a commitment by DIGITAL Equipment  *
; *  Corporation.							    *
; * 									    *
; *  DIGITAL assumes no responsibility for the use or  reliability  of  its  *
; *  software on equipment which is not supplied by DIGITAL.		    *
; *									    *
; ****************************************************************************
; *********************************************************************************************************************************
;  Created 15-SEP-1984 22:55:17  by  VAX-11 SDL V2.0       Source: 15-SEP-1984 22:50:36 _$255$DUA28:[RMS.SRC]RMSFILSTR.SDL;1       
; *********************************************************************************************************************************
 
 
	.MACRO	$PLGDEF,$GBL
	$DEFINI	PLG,$GBL
$EQU	PLG$C_VER_NO	1               ;  current prolog version number 
$EQU	PLG$C_VER_IDX	2               ;  new plg for indexed files 
$EQU	PLG$C_VER_3	3               ;  new plg for compression, space reclamation (plg 3) 
$EQU	PLG$K_BLN	120
$EQU	PLG$C_BLN	120
$EQU	PLG$S_PLGDEF	120
$EQU	PLG$B_DBKTSIZ	11              ;  data bucket size 
$EQU	PLG$R_FLAGS_OVERLAY	16
$EQU	PLG$B_FLAGS	16              ;  flag bits 
$EQU	PLG$R_FLAGS_BITS	16
$EQU	PLG$V_NOEXTEND	0               ;  no extend allowed (rel) 
$EQU	PLG$B_AVBN	102             ;  vbn of first area descriptor 
$EQU	PLG$B_AMAX	103             ;  maximum number of areas 
$EQU	PLG$W_DVBN	104             ;  first data bucket vbn 
$EQU	PLG$L_MRN	108             ;  maximum record number (rel) 
$EQU	PLG$L_EOF	112             ;  eof vbn (rel) 
$EQU	PLG$W_VER_NO	116             ;  version number 
$EQU	PLG$W_GBC	118             ;  default global buffer count 
	$DEFEND	PLG,$GBL,DEF
	.ENDM
 
	.MACRO	$DLCDEF,$GBL
	$DEFINI	DLC,$GBL
; 
; 
;   relative file deletion control byte bit definitions
; 
$EQU	DLC$M_DELETED	4
$EQU	DLC$M_REC	8
$EQU	DLC$S_DLCDEF	1
$EQU	DLC$R_DLCDEF_BITS	0
$EQU	DLC$V_DELETED	2               ;  record deleted 
$EQU	DLC$V_REC	3               ;  record exists (but may have been deleted) 
	$DEFEND	DLC,$GBL,DEF
	.ENDM
 
	.MACRO	$BKTDEF,$GBL
	$DEFINI	BKT,$GBL
; 
;  index bucket definition
; 
;  this is the bucket format for RMS-11/RMS-32 index files.
; 
$EQU	BKT$K_OVERHDSZ	14              ;  length of bucket overhead 
$EQU	BKT$C_OVERHDSZ	14              ;  length of bucket overhead 
$EQU	BKT$M_LASTBKT	1
$EQU	BKT$M_ROOTBKT	2
$EQU	BKT$M_PTR_SZ	24
$EQU	BKT$C_ENDOVHD	4               ;  end of bucket overhead 
$EQU	BKT$C_DATBKTOVH	2               ;  end of bucket overhead for data buckets 
$EQU	BKT$C_DUPBKTOVH	4               ;  additional end of data bucket overhead 
;   when duplicates are allowed (LCB pointer
$EQU	BKT$C_MAXBKTSIZ	63              ;  maximum bucket size
$EQU	BKT$S_BKTDEF	14
$EQU	BKT$B_CHECKCHAR	0               ;  bucket check character 
$EQU	BKT$R_AREANO_OVERLAY	1
$EQU	BKT$B_AREANO	1               ;  area number form which bucket was allocated 
$EQU	BKT$B_INDEXNO	1               ;  index to which this bucket belongs (plg 3) 
$EQU	BKT$W_ADRSAMPLE	2               ;  address sample - low 16 bits of first vbn in bucket 
$EQU	BKT$R_FREESPACE_OVERLAY	4
$EQU	BKT$W_FREESPACE	4               ;  displacement in bucket of first free byte 
$EQU	BKT$W_KEYFRESPC	4               ;  pointer to key's free space (plg 3) 
$EQU	BKT$R_NXTRECID_OVERLAY	6
$EQU	BKT$W_NXTRECID	6               ;  next available word record id (plg 3) 
$EQU	BKT$R_NXTRECID_FIELDS	6
$EQU	BKT$B_NXTRECID	6               ;  next available record id 
$EQU	BKT$B_LSTRECID	7               ;  last id in range 
$EQU	BKT$L_NXTBKT	8               ;  vbn of next bucket 
$EQU	BKT$B_LEVEL	12              ;  bucket level number 
$EQU	BKT$R_BKTCB_OVERLAY	13
$EQU	BKT$B_BKTCB	13              ;  bucket control bits 
$EQU	BKT$R_BKTCB_BITS	13
$EQU	BKT$V_LASTBKT	0               ;  last bucket in horizontal chain 
$EQU	BKT$V_ROOTBKT	1               ;  root bucket 
$EQU	BKT$S_PTR_SZ	2
$EQU	BKT$V_PTR_SZ	3               ;  size of vbn pointers in this bucket 
	$DEFEND	BKT,$GBL,DEF
	.ENDM
 
	.MACRO	$IRCDEF,$GBL
	$DEFINI	IRC,$GBL
; 
;  index record definition
; 
;  this is the definition of RMS-11/RMS-32 index file record formats
; 
$EQU	IRC$M_PTRSZ	3
$EQU	IRC$M_RECORDCB	252
$EQU	IRC$M_DELETED	4
$EQU	IRC$M_NOPTRSZ	16
$EQU	IRC$M_FIRST_KEY	128
$EQU	IRC$M_RRV	8
$EQU	IRC$M_NODUPCNT	16
$EQU	IRC$M_RU_DELETE	32
$EQU	IRC$M_RU_UPDATE	64
$EQU	IRC$C_IDXPTRBAS	2               ;  used to determine size of pointer in index 
$EQU	IRC$C_IDXOVHDSZ	1               ;  includes record control byte 
; 
;  data bucket record
; 
$EQU	IRC$S_IRCDEF	1
$EQU	IRC$B_CONTROL	0               ;  record control byte 
$EQU	IRC$R_CONTROL_BITS0	0
$EQU	IRC$S_PTRSZ	2
$EQU	IRC$V_PTRSZ	0               ;  size of pointer 
$EQU	IRC$S_RECORDCB	6
$EQU	IRC$V_RECORDCB	2               ;  record control bits 
; 
;  record control bits used only in primary data record and SIDR array element
;  control bytes
; 
$EQU	IRC$R_CONTROL_BITS1	0
$EQU	IRC$V_DELETED	2               ;  record is deleted 
$EQU	IRC$V_NOPTRSZ	4               ;  no RRV
$EQU	IRC$V_FIRST_KEY	7
; 
;  record control bits used only in primary data record control bytes
; 
$EQU	IRC$R_CONTROL_BITS2	0
$EQU	IRC$V_RRV	3               ;  rrv record 
; 
;  record control bits used only in prologue 2 SIDR record control bytes
; 
$EQU	IRC$R_CONTROL_BITS3	0
$EQU	IRC$V_NODUPCNT	4               ;  DUP_CNT field absent
; 
;  record control bits used only in prologue 3 RRV, UDR and SIDR record control
;  bytes of RU journalled files. (RU_UPDATE is set only in UDR record control
;  bytes)
; 
$EQU	IRC$R_CONTROL_BITS4	0
$EQU	IRC$V_RU_DELETE	5               ;  record is RU deleted
$EQU	IRC$V_RU_UPDATE	6               ;  record is RU updated
; 
;  record control bits reserved for RMS-11 use only (these may not be re-defined
;  except for prologue 3 records)
; 
;  Bit number 5
;  Bit number 6
; 
; 
;  index bucket record
; 
$EQU	IRC$R_CONTROL_FIELDS4	0
$EQU	IRC$T_BUCKETPTR	1               ;  bucket pointer (not referenced in the code, 
;   just present for consistency)
$EQU	IRC$S_IRCDEF1	3
$EQU	IRC$B_ID	1               ;  record id 
$EQU	IRC$B_RRV_ID	2               ;  rrv's id -- always in the same place 
; 
;  prologue 3 data bucket record
; 
$EQU	IRC$C_DATSZFLD	2               ;  size of size field in variable length records 
$EQU	IRC$C_DATPTRBAS	3               ;  used to determine size of RRV in data buckets
$EQU	IRC$C_DCNTSZFLD	4               ;  size of duplicate count field in Plg 2 SIDRs
$EQU	IRC$C_DATOVHDSZ	2               ;  includes the record control byte, and the id 
$EQU	IRC$C_FIXOVHDSZ	7               ;  the record overhead for fixed record 
$EQU	IRC$C_VAROVHDSZ	9               ;  record overhead for variable records 
$EQU	IRC$C_RRVOVHDSZ	7               ;  size of RRV
; 
;  prologue 3 constants
; 
$EQU	IRC$C_DATPTRBS3	4               ;  used to determine size of RRV in data buckets 
$EQU	IRC$C_DATOVHSZ3	3               ;  record control byte, and id 
$EQU	IRC$C_FIXOVHSZ3	9               ;  record overhead for fixed length records
$EQU	IRC$C_VAROVHSZ3	11              ;  record overhead for variable length records
$EQU	IRC$C_RRVOVHSZ3	9               ;  size of RRV
$EQU	IRC$C_SDROVHSZ3	2               ;  record overhead for SIDRs
$EQU	IRC$C_KEYCMPOVH	2               ;  key compression overhead 
$EQU	IRC$C_DATCMPOVH	3               ;  data compression overhead 
$EQU	IRC$S_IRCDEF2	5
$EQU	IRC$W_ID	1               ;  record id 
$EQU	IRC$W_RRV_ID	3               ;  rrv's id -- always in the same place 
; 
;  constants
; 
	$DEFEND	IRC,$GBL,DEF
	.ENDM
 
	.MACRO	$KEYDEF,$GBL
	$DEFINI	KEY,$GBL
; 
;  definitions for the key descriptors in the prologue
; 
;  these definitions are associated w/ the plg and area definitions
; 
$EQU	KEY$M_DUPKEYS	1
$EQU	KEY$M_CHGKEYS	2
$EQU	KEY$M_NULKEYS	4
$EQU	KEY$M_IDX_COMPR	8
$EQU	KEY$M_INITIDX	16
$EQU	KEY$M_KEY_COMPR	64
$EQU	KEY$M_REC_COMPR	128
$EQU	KEY$C_MAX_DAT	10              ;  (PLG3) Maximum size of a non-compressed data 
;   record
$EQU	KEY$C_MAX_PRIMARY	6       ;  (PLG3) Maximum size of a non-compressed 
;   primary key
$EQU	KEY$C_MAX_INDEX	6               ;  (PLG3) Maximum size of a non-compressed 
;   index and SIDR key
$EQU	KEY$C_STRING	0               ;  string data type 
$EQU	KEY$C_SGNWORD	1               ;  signed binary word 
$EQU	KEY$C_UNSGNWORD	2               ;  unsigned binary word 
$EQU	KEY$C_SGNLONG	3               ;  signed binary long word 
$EQU	KEY$C_UNSGNLONG	4               ;  unsigned binary long word 
$EQU	KEY$C_PACKED	5               ;  packed decimal
$EQU	KEY$C_SGNQUAD	6               ;  signed binary quadword
$EQU	KEY$C_UNSGNQUAD	7               ;  unsigned binary quadword
$EQU	KEY$C_MAX_DATA	7               ;  maximum data type value allowed 
$EQU	KEY$K_BLN	96              ;  length of key descriptor in the prologue (plg 3) 
$EQU	KEY$C_BLN	96              ;  length of key descriptor in the prologue (plg 3) 
$EQU	KEY$C_SPARE	6               ;  these are spare words in key block (plg 3) 
$EQU	KEY$S_KEYDEF	96
$EQU	KEY$L_IDXFL	0               ;  vbn for next key descriptor 
$EQU	KEY$W_NOFF	4               ;  offset to next key descriptor 
$EQU	KEY$B_IANUM	6               ;  index area number 
$EQU	KEY$B_LANUM	7               ;  level 1 area number 
$EQU	KEY$B_DANUM	8               ;  data area number 
$EQU	KEY$B_ROOTLEV	9               ;  root level 
$EQU	KEY$B_IDXBKTSZ	10              ;  index bucket size 
$EQU	KEY$B_DATBKTSZ	11              ;  data bucket size 
$EQU	KEY$L_ROOTVBN	12              ;  root bucket pointer 
$EQU	KEY$R_FLAGS_OVERLAY	16
$EQU	KEY$B_FLAGS	16              ;  flag bits 
$EQU	KEY$R_FLAGS_BITS0	16
$EQU	KEY$V_DUPKEYS	0               ;  duplicate key values allowed 
$EQU	KEY$V_CHGKEYS	1               ;  key value may change on $update operation 
$EQU	KEY$V_NULKEYS	2               ;  null key character enabled 
$EQU	KEY$V_IDX_COMPR	3               ;  index is compressed 
$EQU	KEY$V_INITIDX	4               ;  index must be initialized 
$EQU	KEY$V_KEY_COMPR	6               ;  (PLG3) key is compressed in data record 
$EQU	KEY$R_FLAGS_BITS1	16
$EQU	KEY$V_REC_COMPR	7               ;  (PLG3) Data record is compressed 
$EQU	KEY$B_DATATYPE	17              ;  data type for key 
$EQU	KEY$B_SEGMENTS	18              ;  number of segments in key 
$EQU	KEY$B_NULLCHAR	19              ;  "null" character 
$EQU	KEY$B_KEYSZ	20              ;  total key size 
$EQU	KEY$B_KEYREF	21              ;  key of reference 
$EQU	KEY$W_MINRECSZ	22              ;  minimum record length 
$EQU	KEY$W_IDXFILL	24              ;  index fill quantity 
$EQU	KEY$W_DATFILL	26              ;  data fill quantity 
$EQU	KEY$R_POSITION_OVERLAY	28
$EQU	KEY$W_POSITION	28              ;  key seg position 
$EQU	KEY$W_POSITION0	28              ;  another name for position 0 
$EQU	KEY$W_POSITION1	30              ;  position 1 
$EQU	KEY$W_POSITION2	32              ;  position 2 
$EQU	KEY$W_POSITION3	34              ;  position 3 
$EQU	KEY$W_POSITION4	36              ;  position 4 
$EQU	KEY$W_POSITION5	38
$EQU	KEY$W_POSITION6	40
$EQU	KEY$W_POSITION7	42
$EQU	KEY$R_SIZE_OVERLAY	44
$EQU	KEY$B_SIZE	44              ;  key segment size 
$EQU	KEY$B_SIZE0	44              ;  another name for size 
$EQU	KEY$B_SIZE1	45              ;  size 1 
$EQU	KEY$B_SIZE2	46
$EQU	KEY$B_SIZE3	47
$EQU	KEY$B_SIZE4	48
$EQU	KEY$B_SIZE5	49
$EQU	KEY$B_SIZE6	50
$EQU	KEY$B_SIZE7	51
$EQU	KEY$S_KEYNAM	32
$EQU	KEY$T_KEYNAM	52              ;  key name 
$EQU	KEY$L_LDVBN	84              ;  first data bucket 
$EQU	KEY$R_TYPE_OVERLAY	88
$EQU	KEY$B_TYPE	88              ;  key segment datatype (plg 3) 
$EQU	KEY$B_TYPE0	88              ;  another name for first datatype (plg 3) 
$EQU	KEY$B_TYPE1	89              ;  (plg 3) 
$EQU	KEY$B_TYPE2	90              ;  (plg 3) 
$EQU	KEY$B_TYPE3	91              ;  (plg 3) 
$EQU	KEY$B_TYPE4	92              ;  (plg 3) 
$EQU	KEY$B_TYPE5	93              ;  (plg 3) 
$EQU	KEY$B_TYPE6	94              ;  (plg 3) 
$EQU	KEY$B_TYPE7	95              ;  (plg 3) 
	$DEFEND	KEY,$GBL,DEF
	.ENDM
 
	.MACRO	$AREADEF,$GBL
	$DEFINI	AREA,$GBL
; 
; 
;  definitions for the area descriptor in the prologue
; 
; 
$EQU	AREA$C_CYL	1               ;  cylinded alignment 
$EQU	AREA$C_LBN	2               ;  logical block alignment 
$EQU	AREA$C_VBN	3               ;  virtual block alignment 
$EQU	AREA$C_RFI	4               ;  allocate close to related file by fid 
$EQU	AREA$M_HARD	1
$EQU	AREA$M_ONC	2
$EQU	AREA$M_CBT	32
$EQU	AREA$M_CTG	128
$EQU	AREA$K_BLN	64              ;  length of area descriptor in the prologue 
$EQU	AREA$C_BLN	64              ;  length of area descriptor in the prologue 
$EQU	AREA$S_AREADEF	64
$EQU	AREA$B_FLAGS	1               ;  not currently used 
$EQU	AREA$B_AREAID	2               ;  area id 
$EQU	AREA$B_ARBKTSZ	3               ;  bucket size for area 
$EQU	AREA$W_VOLUME	4               ;  relative volume number 
$EQU	AREA$B_ALN	6               ;  extend allocation alignment 
$EQU	AREA$R_AOP_OVERLAY	7
$EQU	AREA$B_AOP	7               ;  alignment options 
$EQU	AREA$R_AOP_BITS	7
$EQU	AREA$V_HARD	0               ;  absolute alignment or nothing 
$EQU	AREA$V_ONC	1               ;  locate on cylinder 
$EQU	AREA$V_CBT	5               ;  contiguous best try 
$EQU	AREA$V_CTG	7               ;  contiguous 
$EQU	AREA$L_AVAIL	8               ;  available (returned) buckets 
$EQU	AREA$L_CVBN	12              ;  start vbn for current extent 
$EQU	AREA$L_CNBLK	16              ;  number of blocks in current extent 
$EQU	AREA$L_USED	20              ;  number of blocks used 
$EQU	AREA$L_NXTVBN	24              ;  next vbn to use 
$EQU	AREA$L_NXT	28              ;  start vbn for next extent 
$EQU	AREA$L_NXBLK	32              ;  number of blocks in next extent 
$EQU	AREA$W_DEQ	36              ;  default extend quantity 
$EQU	AREA$L_LOC	40              ;  start lbn on volume 
$EQU	AREA$S_RFI	6
$EQU	AREA$W_RFI	44              ;  related file id 
$EQU	AREA$L_TOTAL_ALLOC	50      ;  total block allocation
$EQU	AREA$W_CHECK	62              ;  checksum 
	$DEFEND	AREA,$GBL,DEF
	.ENDM
 
	.MACRO	$RJRDEF,$GBL
	$DEFINI	RJR,$GBL
; 
; 
;  definitions for the journaling records in RMS journals
; 	for performance reasons, the BKT and BLK forms
; 	should be an integral number of quadwords.
; 
; 
$EQU	RJR$C_VER1	1               ;  journal version 1
$EQU	RJR$C_VER2	2               ;  journal version 2
$EQU	RJR$C_MAXVER	2               ;  version limit
$EQU	RJR$C_NOENT	0               ;  null type
$EQU	RJR$C_MAPPING	1               ;  mapping entry
$EQU	RJR$C_FILENAME	1               ;  mapping entry synonym
$EQU	RJR$C_RECORD	2               ;  record entry
$EQU	RJR$C_BLOCK	3               ;  block IO entry (at, etc...)
$EQU	RJR$C_BUCKET	4               ;  ISAM bucket
$EQU	RJR$C_EXTEND	5               ;  extend (AT, AI)
$EQU	RJR$C_AT_RECORD	6               ;  audit trail record
$EQU	RJR$C_MAXTYP	6               ;  entry-type limit
$EQU	RJR$C_SEQ	0               ;  sequential file org
$EQU	RJR$C_REL	1               ;  relative file org
$EQU	RJR$C_IDX	2               ;  indexed file org
$EQU	RJR$C_HSH	3               ;  hashed file org
$EQU	RJR$C_MAXORG	3               ;  org limit
$EQU	RJR$_NOOP	0               ;  null operation
$EQU	RJR$_BUCKET	1               ;  bucket-level I/O
$EQU	RJR$_CLOSE	2               ;  close
$EQU	RJR$_CONNECT	3               ;  connect
$EQU	RJR$_CREATE	4               ;  create
$EQU	RJR$_DELETE	5               ;  delete
$EQU	RJR$_DISCONNECT	6               ;  disconnect
$EQU	RJR$_DISPLAY	7               ;  display
$EQU	RJR$_ENTER	8               ;  enter
$EQU	RJR$_ERASE	9               ;  erase
$EQU	RJR$_EXTEND	10              ;  extend
$EQU	RJR$_FIND	11              ;  find
$EQU	RJR$_FLUSH	12              ;  flush
$EQU	RJR$_FREE	13              ;  free
$EQU	RJR$_GET	14              ;  get
$EQU	RJR$_MODIFY	15              ;  modify
$EQU	RJR$_NXTVOL	16              ;  next volume
$EQU	RJR$_OPEN	17              ;  open
$EQU	RJR$_PARSE	18              ;  parse
$EQU	RJR$_PUT	19              ;  put
$EQU	RJR$_READ	20              ;  block I/O read
$EQU	RJR$_RELEASE	21              ;  release
$EQU	RJR$_REMOVE	22              ;  remove
$EQU	RJR$_RENAME	23              ;  rename
$EQU	RJR$_REWIND	24              ;  rewind
$EQU	RJR$_SEARCH	25              ;  search
$EQU	RJR$_SPACE	26              ;  block I/O space
$EQU	RJR$_TRUNCATE	27              ;  truncate
$EQU	RJR$_UPDATE	28              ;  update
$EQU	RJR$_WAIT	29              ;  wait
$EQU	RJR$_WRITE	30              ;  block I/O write
$EQU	RJR$_TPT	31              ;  truncate on PUT
$EQU	RJR$_MAXOPER	31              ;  oper limit
$EQU	RJR$C_NOJNL	0               ;  null jnl type
$EQU	RJR$C_RMS_AI	1               ;  after-image journal
$EQU	RJR$C_RMS_BI	2               ;  before-image journal
$EQU	RJR$C_RMS_RU	3               ;  recovery unit
$EQU	RJR$C_MAXJNL	3               ;  jnl type limit
$EQU	RJR$K_HDRLEN	56              ;  common header len
$EQU	RJR$C_HDRLEN	56              ;  common header len
$EQU	RJR$K_C_FIBLEN	64
$EQU	RJR$C_C_FIBLEN	64
$EQU	RJR$K_RECATRLEN	32
$EQU	RJR$C_RECATRLEN	32
$EQU	RJR$K_FILNAMLEN	452
$EQU	RJR$C_FILNAMLEN	452
$EQU	RJR$K_RECLEN	72              ;  record entry len
$EQU	RJR$C_RECLEN	72              ;  record entry len
$EQU	RJR$K_BLKLEN	68              ;  block i/o entry len
$EQU	RJR$C_BLKLEN	68              ;  block i/o entry len
$EQU	RJR$K_EXTLEN	122             ;  extend entry len
$EQU	RJR$C_EXTLEN	122             ;  extend entry len
$EQU	RJR$K_BKTLEN	68              ;  bucket entry len
$EQU	RJR$C_BKTLEN	68              ;  bucket entry len
$EQU	RJR$K_AT_RECLEN	76
$EQU	RJR$C_AT_RECLEN	76
$EQU	RJR$K_BLN	452             ;  length of RJR descriptor in the prologue 
$EQU	RJR$C_BLN	452             ;  length of RJR descriptor in the prologue 
$EQU	RJR$S_RJRDEF	452
$EQU	RJR$R_FLAGS_OVERLAY	0       ;  control flags
$EQU	RJR$W_FLAGS	0
$EQU	RJR$R_FLAGS_BITS	0
$EQU	RJR$B_VERSION	2               ;  RMS journal version #
$EQU	RJR$B_ENTRY_TYPE	3       ;  journal entry type
$EQU	RJR$B_ORG	4               ;  file organization
$EQU	RJR$B_OPER	5               ;  RMS operation id
$EQU	RJR$B_JNL_TYPE	6               ;  journaling type
$EQU	RJR$S_JNLID	28
$EQU	RJR$T_JNLID	8               ; 
$EQU	RJR$S_VOLNAM	12
$EQU	RJR$T_VOLNAM	8               ;  volume name
$EQU	RJR$S_FID	6
$EQU	RJR$T_FID	20              ;  file id
$EQU	RJR$S_ID_DATE	8
$EQU	RJR$Q_ID_DATE	28              ;  time
$EQU	RJR$L_AT_STS	36              ;  status of operation
$EQU	RJR$L_AT_STV	40              ;  secondary status
$EQU	RJR$L_AT_CTX	44              ;  user FAB/RAB CTX field
$EQU	RJR$R_ENTRY_OVERLAY	56
$EQU	RJR$S_FILENAME_ENTRY	396
$EQU	RJR$R_FILENAME_ENTRY	56
$EQU	RJR$R_ATR_FLAGS_OVERLAY	60
$EQU	RJR$L_ATR_FLAGS	60
$EQU	RJR$R_ATR_FLAGS_BITS	60
$EQU	RJR$V_ATR_UCHAR	0               ;  UCHAR attribute present
$EQU	RJR$V_ATR_PROT	1               ;  PROT attribute present
$EQU	RJR$V_ATR_UIC	2               ;  UIC attribute present
$EQU	RJR$V_ATR_REC	3               ;  RECORD attributes present
$EQU	RJR$V_ATR_EXPIRE	4       ;  EXPIRATION present
$EQU	RJR$L_UIC	64              ;  owner UIC
$EQU	RJR$L_PROT	68              ;  prot mask
$EQU	RJR$L_ALLOC	72              ;  initial allocation (audit)
$EQU	RJR$L_UCHAR	76              ;  user characteristics (create)
$EQU	RJR$S_EXPIRE	8
$EQU	RJR$Q_EXPIRE	80              ;  expiration date (create)
$EQU	RJR$B_FNS	88              ;  size of file name
$EQU	RJR$B_FAC	90              ;  file access (audit)
$EQU	RJR$B_SHR	91              ;  sharing allowed (audit)
$EQU	RJR$S_DID	6
$EQU	RJR$W_DID	92              ;  directory ID (create, volume recovery)
$EQU	RJR$S_C_FIB	64
$EQU	RJR$T_C_FIB	100             ;  FIB (create)
$EQU	RJR$S_REC_ATTR	32
$EQU	RJR$T_REC_ATTR	164             ;  record attributes (create)
$EQU	RJR$S_FILENAME	256
$EQU	RJR$T_FILENAME	196             ;  full filename
$EQU	RJR$S_RECORD_ENTRY	16
$EQU	RJR$R_RECORD_ENTRY	56      ;  record entry
$EQU	RJR$L_CHKSUM	60              ;  checksum of old record
$EQU	RJR$R_RFA_OVERLAY	64
$EQU	RJR$S_RFA	6
$EQU	RJR$W_RFA	64              ;  RFA of record
$EQU	RJR$R_RFA_FIELDS	64
$EQU	RJR$L_RFA0	64              ;  alternate RFA def
$EQU	RJR$W_RFA4	68
$EQU	RJR$L_RRN	64              ;  relative record number
$EQU	RJR$W_RSIZE	70              ;  record size
$EQU	RJR$T_RIMAGE	72              ;  record date
; 
;  The block entry is common to both AT and block IO journaling.
; 
$EQU	RJR$S_BLOCK_ENTRY	12
$EQU	RJR$R_BLOCK_ENTRY	56      ;  block entry
$EQU	RJR$L_BLOCK_VBN	60              ;  vbn of block
$EQU	RJR$L_BLOCK_SIZE	64      ;  transfer size (AT)
$EQU	RJR$T_BLOCK	68              ;  block data
; 
;  The extend entry is common to both AT and AI journaling.
; 
$EQU	RJR$S_EXTEND_ENTRY	66
$EQU	RJR$R_EXTEND_ENTRY	56      ;  extend entry
$EQU	RJR$S_FILL_EXT2	32
$EQU	RJR$T_FILL_EXT2	60              ;  no longer FIB
;  currently unused
$EQU	RJR$R_EXT_FLAGS_OVERLAY	92
$EQU	RJR$L_EXT_FLAGS	92
$EQU	RJR$R_EXT_FLAGS_BITS	92
$EQU	RJR$V_EXT_USE_XAB	0       ;  ALL XAB fields present
; 
;  Fields EXT_AOP (unused) through EXT_RFI are in same relative locations as
;  the same fields in allocation XAB.
; 
$EQU	RJR$B_EXT_AOP	100             ;  align options
$EQU	RJR$B_EXT_ALN	101             ;  alignment boundary
$EQU	RJR$W_EXT_VOL	102             ;  relative volume number
$EQU	RJR$L_EXT_LOC	104             ;  location
$EQU	RJR$L_EXT_ALQ	108             ;  allocation quantity
$EQU	RJR$W_EXT_DEQ	112             ;  default extension
$EQU	RJR$B_EXT_BKZ	114             ;  bucket size
$EQU	RJR$B_EXT_AID	115             ;  area ID
$EQU	RJR$S_EXT_RFI	6
$EQU	RJR$W_EXT_RFI	116             ;  related file IFI
$EQU	RJR$T_EXT_ENDALL	122     ;  end of all info
$EQU	RJR$S_BUCKET_ENTRY	12
$EQU	RJR$R_BUCKET_ENTRY	56      ;  BUCKET entry
$EQU	RJR$L_BKT_VBN	60              ;  bucket vbn
$EQU	RJR$W_BKT_SIZE	64              ;  bucket size
$EQU	RJR$W_JBKT_SIZE	66              ;  actual size of
;  journaled bucket data
$EQU	RJR$T_BUCKET	68              ;  bucket data
$EQU	RJR$S_AT_RECORD	20
$EQU	RJR$R_AT_RECORD	56
$EQU	RJR$L_AT_ROP	60              ;  record options
$EQU	RJR$B_AT_KRF	64              ;  key of reference
$EQU	RJR$B_AT_KSZ	65              ;  key size
$EQU	RJR$B_AT_RAC	66              ;  record access mode
$EQU	RJR$R_AT_RFA_OVERLAY	68
$EQU	RJR$S_AT_RFA	6
$EQU	RJR$W_AT_RFA	68              ;  RFA of record
$EQU	RJR$R_AT_RFA_FIELDS	68
$EQU	RJR$L_AT_RFA0	68              ;  alternate RFA def
$EQU	RJR$W_AT_RFA4	72
$EQU	RJR$L_AT_RRN	68              ;  relative record number
$EQU	RJR$T_AT_KEY	76              ;  key if used
; 
;  The FILENAME entry is used to describe filename information required to:
; 
;  1.	Identify a stream of journal entries with a particular file.
; 	Used in particular for AI volume recovery or roll back RUs on remount.
; 
;  2.	Record the information required to re-create a file for AI journaling.
; 
;  3.	Record all the required audit-trail information for a $CREATE.
; 
	$DEFEND	RJR,$GBL,DEF
	.ENDM
