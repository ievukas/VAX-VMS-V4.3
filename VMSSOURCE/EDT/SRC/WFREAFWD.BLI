%TITLE 'EDT$WFREAFWD - read the next line'
MODULE EDT$WFREAFWD (				! Read the next line
		IDENT = 'V04-000'			! File: WFREAFWD.BLI Edit: STS1008
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Read the next line in the forward direction.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: October 16, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 23-Feb-1981.  This module was created by
!	extracting routine EDT$$RD_NXTLN  from module EDTWF.
! 1-002	- Regularized the headers.  JBS 25-Feb-1981
! 1-003	- Fix module name.  JBS 19-Mar-1981
! 1-004	- Change EOB_LINE to EDT$$Z_EOB_LN .  JBS 31-Mar-1981
! 1-005	- Correct a typo in a subtitle.  JBS 02-Jun-1981
! 1-006 - Change index for line numbers from 10 to 15.  SMB 18-Jan-1982
! 1-007	- Remove EDT$$SET_WKLN.  JBS 14-Sep-1982
! 1-008 - Modify to use new 48 bit macro. STS 01-Oct-1982
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$RD_NXTLN;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$RD_NXTLN  - read the next line'

GLOBAL ROUTINE EDT$$RD_NXTLN 			! Read the next line
    =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Read the next line in the forward direction.  The line following the
!	current line becomes the new line.  This routine may have the effect
!	of reading a line from the input file.  If we are already at the end
!	of the buffer, then return a 0 otherwise return a 1.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$G_EXITD
!	EDT$$A_WK_BUK
!	EDT$$G_WK_CURBUK
!	EDT$$A_WK_LN
!	EDT$$Z_EOB_LN
!	EDT$$L_LNO0
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_CUR_BUF
!	EDT$$A_WK_LN
!
! ROUTINE VALUE:
!
!	1		Not at end of buffer
!	0		At end of buffer
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$WF_MAKECUR : NOVALUE,
	EDT$$RD_ILN;

    EXTERNAL
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,	! Current text buffer control block
	EDT$$G_EXITD,				! Exit flag (on if we are exiting)
	EDT$$A_WK_BUK : 			! Pointer to current bucket
	    REF BLOCK [WF_BUKT_SIZE, BYTE] FIELD (WFB_FIELDS),
	EDT$$G_WK_CURBUK,			! Number of the current bucket
	EDT$$A_WK_LN : REF LIN_BLOCK,		! Pointer to current line
	EDT$$Z_EOB_LN,
	EDT$$L_LNO0 : LNOVECTOR [14];

    EDT$$A_CUR_BUF [TBCB_CHAR_POS] = 0;
!+
! Point to the next line in the bucket.
!-

    IF (.EDT$$A_CUR_BUF [TBCB_LINE_ADDR] NEQA .EDT$$A_WK_BUK [WFB_END])
    THEN
	BEGIN
	EDT$$A_CUR_BUF [TBCB_LINE_ADDR] = .EDT$$A_CUR_BUF [TBCB_LINE_ADDR] + .EDT$$A_WK_LN [LIN_LENGTH] +
	LIN_FIXED_SIZE + 1;
	EDT$$A_WK_LN = CH$PTR (.EDT$$A_WK_BUK, .EDT$$A_CUR_BUF [TBCB_LINE_ADDR]);
	ADDLINE (NUMBER_ONE, EDT$$A_CUR_BUF [TBCB_CUR_LIN]);
	END;

!+
! If this is out of the scope of the bucket, then we better read the
! next bucket.
!-

    IF (.EDT$$A_CUR_BUF [TBCB_LINE_ADDR] GEQA .EDT$$A_WK_BUK [WFB_END])
    THEN

	IF (.EDT$$A_WK_BUK [WFB_NEXT_BUKT] EQL 0)
	THEN
	    BEGIN

	    IF (.EDT$$G_EXITD NEQ 0)
	    THEN
		BEGIN
!+
! Return zero so we don't read any more.
!-
		EDT$$A_WK_LN = EDT$$Z_EOB_LN;
		RETURN (0);
		END;

!+
! End of buffer, try reading the next record.
!-
	    RETURN (EDT$$RD_ILN ());
	    END
	ELSE
	    BEGIN
	    EDT$$WF_MAKECUR (.EDT$$A_WK_BUK [WFB_NEXT_BUKT]);
	    EDT$$A_CUR_BUF [TBCB_LINE_ADDR] = WFB_FIXED_SIZE;
	    EDT$$A_CUR_BUF [TBCB_CUR_BUKT] = .EDT$$G_WK_CURBUK;
	    END;

!+
! Update the current line pointer.
!-
    EDT$$A_WK_LN = CH$PTR (.EDT$$A_WK_BUK, .EDT$$A_CUR_BUF [TBCB_LINE_ADDR]);
    RETURN (1)
    END;					! of routine EDT$$RD_NXTLN

!<BLF/PAGE>

END						! of module EDT$WFREAFWD

ELUDOM
