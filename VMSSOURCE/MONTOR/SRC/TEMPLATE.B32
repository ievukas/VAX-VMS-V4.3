MODULE TEMPLATE (
		IDENT = 'V04-000',
		ADDRESSING_MODE(EXTERNAL=GENERAL,
				NONEXTERNAL=LONG_RELATIVE)
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY: VAX/VMS MONITOR Utility
!
! ABSTRACT:
!
!	The TEMPLATE module contains the routines to create
!	templates for the various display screens.
!
! ENVIRONMENT:
!
!	Unprivileged, user mode.
!
! AUTHOR: Henry M. Levy	, CREATION DATE: 28-April-1977
!
! MODIFIED BY:
!
!	V03-012	TLC1072		Thomas L. Cafarella	17-Apr-1984	11:00
!		Add volume name to DISK display.
!
!	V03-011	TLC1066		Thomas L. Cafarella	01-Apr-1984	11:00
!		Add SYSTEM class.
!
!	V03-010	TLC1060		Thomas L. Cafarella	12-Mar-1984	11:00
!		Make multi-file summary work for homogeneous classes.
!
!	V03-009	TLC1054		Thomas L. Cafarella	07-Mar-1984	11:00
!		Fix positioning of data lines for homogeneous classes.
!
!	V03-008	PRS1006		Paul R. Senn		17-FEB-1984	14:00
!		Add support for "computed" items 
!
!	V03-008	TLC1052		Thomas L. Cafarella	17-Feb-1984	11:00
!		Add multi-file summary capability.
!
!	V03-007	PRS1005		Paul R. Senn		13-JAN-1983	10:00
!		Allow flexible spacing between screen items
!
!	V03-006	SPC0006		Stephen P. Carney	01-Jul-1983	09:00
!		Change some RWxxx (resource wait state) codes.
!
!	V03-005	TLC1035		Thomas L. Cafarella	06-Jun-1983	15:00
!		Add homogeneous class type and DISK class.
!
!	V03-004	TLC1028		Thomas L. Cafarella	14-Apr-1983	16:00
!		Add interactive user interface.
!
!	V03-004	SPC0001		Stephen P. Carney	25-Mar-1983	15:00
!		Add RWxxx and MUTEX states in place of MWAIT state.
!
!	V03-003	TLC1020		Thomas L. Cafarella	1-Jul-1982	15:00
!		Remove semi-colon to eliminate BLISS INFO message.
!
!	V03-002	TLC1010		Thomas L. Cafarella	29-Mar-1982	15:00
!		Eliminate lower-case "a" strings from summary bar graphs.
!
!	V03-001	TLC1005		Thomas L. Cafarella	25-Mar-1982	17:00
!		Alter vertical spacing for classes with 13 items.
!
!--


!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	OUTPUT ,		! output a counted string to the SCRPKG
	POSITION ,		! call SCRPKG to position cursor
	TEMPLATE ;		! build and output display templates


!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:LIB.L32';	! system service macros and user definitions
REQUIRE 'MONDEFREQ';		! private MONITOR control block definitions
REQUIRE 'DSPDEFREQ';		! item numbers defined here

BUILTIN EMUL ;			! define EMUL VAX hardware function

!
! COMPILE TIME VARIABLES
!

COMPILETIME
    RWAIT_COUNT   = 0 ,		! counter for the number of RWAITs being defined
    RWAIT_DEFINED = RSN$_MAX ;  ! number of RSN$_* wait codes defined in LIB.L32

!
! MACROS:
!

MACRO

!
! Counted ascii string macros
!

CSTRING[] = (UPLIT BYTE(%CHARCOUNT(%STRING(%REMAINING)),
		%STRING(%REMAINING)) )% ,

!	The RWAIT_CSTRING macro is the CSTRING macro plus a counter to 
!	keep track of times it was called (how many RWAITS have been defined)

RWAIT_CSTRING[] = %ASSIGN(RWAIT_COUNT,RWAIT_COUNT+1)
		(UPLIT BYTE(%CHARCOUNT(%STRING(%REMAINING)),
		%STRING(%REMAINING)) )% ;

!
! EQUATED SYMBOLS:
!

LITERAL

	BELL = 7 ,
	ESC = 27 ,
	ALTSET = ('F' ^ 8) + ESC,	! alternate graphics set
	CR = 13 ,			! carriage return
	CURSOR = ('Y' ^ 8) + ESC,	! position cursor command
	ERASE = ('J' ^ 8) + ESC,	! erase entire screen
	ERASEEOL = ('K' ^ 8) + ESC,	! erase to end of line
	FALSE = 0 ,
	HOME = ('H' ^ 8) + ESC,		! return cursor to top
	LF = 10 ,			! line feed
	TRUE = 1 ;

GLOBAL LITERAL

	REGSET = ('G' ^ 8) + ESC ;	! normal graphics set


!
! OWN STORAGE:
!

OWN
	TOPSTR10: VECTOR[45,BYTE] 
		  INITIAL (BYTE(44),BYTE(' [!3OW,!3OW]  !16AC!AC!5<!#UL!>!AC'),
			 BYTE(ESC),BYTE('F!#*a'),BYTE(ESC),BYTE('G'),BYTE(ESC),BYTE('K')) ;

!
! Table of bit vectors which "illustrate" the pattern of data line
! spacing within the data portion of the display screen. There is
! one bit vector for each possible number of data items (24). Each
! bit vector contains 24 bits representing the lines in the data
! portion of the display screen. A "1" bit means this is a data line;
! a "0" bit means this is a space. The bits read from right to left;
! so, for example, the bit representing line 1 is the right-most.
!


OWN
	SCR_PATTERN:	VECTOR[24,LONG] INITIAL (

		LONG(%B'000000000100000000000000'),	! 1 data item
		LONG(%B'000000001010000000000000'),	! 2 data items
		LONG(%B'000000100100100000000000'),	! 3 data items
		LONG(%B'000000101010100000000000'),	! 4 data items
		LONG(%B'000001010101010000000000'),	! 5 data items
		LONG(%B'000010100101001010000000'),	! 6 data items
		LONG(%B'000010101010101010000000'),	! 7 data items
		LONG(%B'001010101010101010000000'),	! 8 data items
		LONG(%B'000011100111001110000000'),	! 9 data items
		LONG(%B'000110110110110110000000'),	! 10 data items
		LONG(%B'000110111011101110000000'),	! 11 data items
		LONG(%B'001110111011101110000000'),	! 12 data items
		LONG(%B'001111011111011110000000'),	! 13 data items
		LONG(%B'001111111011111110000000'),	! 14 data items
		LONG(%B'001111111111111110000000'),	! 15 data items
		LONG(0),				! 16 data items
		LONG(0),				! 17 data items
		LONG(0),				! 18 data items
		LONG(0),				! 19 data items
		LONG(0),				! 20 data items
		LONG(0),				! 21 data items
		LONG(0),				! 22 data items
		LONG(0),				! 23 data items
		LONG(0) );				! 24 data items

!
! One of the above longword elements is moved to the 24-bit vector 
! below, based on the number of items in the display. The bit vector
! is then used to determine whether a line in the data portion of the
! screen is to be a space (0) or is to contain data (1).
!

OWN
	SCR_DATA_LINE:	BITVECTOR[24];

!
! Messages
!

BIND

TABSTR = CSTRING('  !7UL.!2ZL !7UL.!2ZL !7UL.!2ZL !7UL.!2ZL'),
TABSTR_PC = CSTRING('   !7UL.!1ZL  !7UL.!1ZL  !7UL.!1ZL  !7UL.!1ZL'),
COUNTSTR = UPLIT BYTE ('!7<!#UL!>'),
CRSTR = CSTRING(%CHAR(CR)),
CLRSTR = CSTRING(%CHAR(ESC),'H',%CHAR(ESC),'J'),
DELSTR = CSTRING(%CHAR(ESC),'J'),
GRAPHICS_ON = CSTRING( %CHAR(ESC) , '1' ),
GRAPHICS_OFF = CSTRING( %CHAR(ESC) , '2' ) ,
HOMESTR = CSTRING(%CHAR(ESC),'H'),

LFSTR = CSTRING(%CHAR(LF)),                                                     
NLSTR = CSTRING(%CHAR(CR),%CHAR(LF)),
REPTSTR = UPLIT BYTE('!#*'),
SETVT55 = CSTRING( %CHAR(ESC) , '1' , 'A' , %CHAR(%O'77') , 'I' ,
	 %CHAR(%O'57') , %CHAR(ESC) , '2' ),
TOPSTR20 = CSTRING(%CHAR(ESC),'K'),                                           
VHSTSTR20 = CSTRING( '!UL' );

!
! Table of counted strings for Process States
!

GLOBAL BIND

STATELIST = UPLIT ( 	CSTRING('BAD')   ,
			CSTRING('COLPG') ,
			CSTRING('MWAIT') ,
			CSTRING('CEF')   ,
			CSTRING('PFW')   ,
			CSTRING('LEF')   ,
			CSTRING('LEFO')  ,
			CSTRING('HIB')   ,
			CSTRING('HIBO')  ,
			CSTRING('SUSP')  ,
			CSTRING('SUSPO') ,
			CSTRING('FPG')   ,
			CSTRING('COM')   ,
			CSTRING('COMO')  ,
			CSTRING('CUR')   
			),

RWAITLIST = UPLIT ( 	RWAIT_CSTRING('RWUDF') ,
			RWAIT_CSTRING('RWAST') ,
			RWAIT_CSTRING('RWMBX') ,
			RWAIT_CSTRING('RWNPG') ,
			RWAIT_CSTRING('RWPGF') ,
			RWAIT_CSTRING('RWPAG') ,
			RWAIT_CSTRING('RWBRK') ,
			RWAIT_CSTRING('RWIMG') ,
			RWAIT_CSTRING('RWQUO') ,
			RWAIT_CSTRING('RWLCK') ,
			RWAIT_CSTRING('RWSWP') ,
			RWAIT_CSTRING('RWMPE') ,
			RWAIT_CSTRING('RWMPB') ,
			RWAIT_CSTRING('RWSCS') ,
			RWAIT_CSTRING('RWCLU') 
			),

! Make sure MONITOR knows all RSN$_* wait states currently defined in LIB.L32

	$ASSUME (RWAIT_COUNT, EQL, RWAIT_DEFINED)	

MWAITLIST = UPLIT ( 	CSTRING('MUTEX') 
			);


!
! EXTERNAL REFERENCES:
!

EXTERNAL
	MRBPTR ,		! address of MRB
	NAME_COL: BYTE ,	! column number for name string
	BARCHAR: BYTE ,		! character to repeat to form bar graphs
	DISPLAYING: BYTE,	! low bit set => display is active
	FAOSTK: VECTOR[,LONG] ,	! fao parameter space
	MFSUMSTR ,		! fao string segment for control string
	NAMESTR ,		! fao string for output of long names
	NORMAL ,		! MONITOR normal return status
	PERFTABLE: VECTOR[,BYTE] , ! list of performance item descriptors
	ITMSTR_SYS_ALL: BYTE ,	! item string for SYSTEM /ALL
	SCH$GL_MAXPIX: ADDRESSING_MODE(LONG_RELATIVE) , ! max process index
	SCH$GL_PCBVEC: ADDRESSING_MODE(LONG_RELATIVE) , ! address of PCB pointer list
	VT55XINCR ;		! incr from bar to bar

EXTERNAL LITERAL
	FAOCTR_SIZE ,		! size of FAO control string
	FIRST_DATA_LINE,	! line number of first data line on screen
	LAST_DATA_LINE,		! line number of last data line on screen
	VTDATALINES,		! number of data lines on the screen
	NAME_COL_TAB,		! starting column of names -- tabular display
	NAME_COL_BAR,		! starting column of names -- bar graph
	NAME_COL_MFSUM,		! starting column of names -- multi-file summary
	MAX_NAME_SIZE,		! max size of name (label) string
	WIDE_NAME_SIZE,		! size of name (label) string for a wide display (DISK)
	ECOUNT_SYS_ALL,		! no. of elements for SYSTEM /ALL
	MAXBARS ,		! max characters on horizontal histogram
	VT55CWIDTH,		! max characters on bottom axis
	VTHEIGHT,		! height of screen
	VTWIDTH ;		! width of screen

EXTERNAL ROUTINE
	PUT_TO_SCREEN ,		! rtn to xlate & annex a string to SYS$OUTPUT buffer
	LIB$GET_VM ,		! rtn to acquire virtual memory
	SCR$SET_CURSOR ;	! rtn to annex a cursor positioning esc seq to SYS$OUTPUT


GLOBAL ROUTINE TEMPLATE( DCDB )  =
BEGIN

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine formats and displays the name strings for tabular
!	and bar graph displays of current, average, min and max values.
!	It also builds the FAO control string for the actual data on the
!	first call per class.
!
! INPUTS:
!
!	DCDB   - address of class descriptor block for class being displayed.
!
! IMPLICIT INPUTS:
!
!	PERFTABLE - address of table of contiguous IDB's.
!
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	Name string for each item in the display for this class sent
!	directly to screen package (via call to PUT_TO_SCREEN).
!
!	On first call to this routine for this class, a buffer is
!	obtained for the FAO control string to output the data values.
!	It is filled with the necessary FAO control information and
!	its address and length are stored in the CDB$A_FAOCTR and
!	CDB$L_FAOCTR fields, respectively.
!
! ROUTINE VALUE:
!
!	NORMAL, or possible failing status from LIB$GET_VM.
!
! SIDE EFFECTS:
!
!	none
!--

LOCAL
	I,					! data item index
	ITEMS,					! count of data items
	ITMSTR,					! pointer to first item token
	POINTER,				! pointer into fao control string buffer
	STATUS,					! return status
	XPOS,					! column address
	YPOS,					! row address
	ROW_OFFSET;				! constant added to row number for m.f. summary
MAP
	DCDB:   REF BLOCK[,BYTE] ,		! address CDB structure
	MRBPTR: REF BLOCK[,BYTE] ,		! address MRB structure
	ITMSTR: REF VECTOR[,BYTE] ;		! item byte string

IF .MRBPTR[MRB$V_MFSUM]				! if this is a multi-file summary
    THEN  ROW_OFFSET = 2			!   then display the data rows lower
    ELSE  ROW_OFFSET = 0 ;			!   else do not offset

IF .DCDB[CDB$V_HOMOG]				! if this is a homogeneous class,
    THEN  ITEMS = VTDATALINES			!   always use the whole screen,
    ELSE  ITEMS = .DCDB[CDB$L_ECOUNT] ;		!   else get just no. of elts to display

IF .DCDB[CDB$V_SYSCLS]				! if this is the SYSTEM class,
    THEN ITEMS = ECOUNT_SYS_ALL ;		!   get a special ECOUNT

SCR_DATA_LINE = 0;				! zero out display bit string

!
! Set up bit string controlling spacing.
! The CDB display control string is only a word in length, rather than 24 bits.
! This is to save space, since only 15 of the 24 bits in the default bit 
! strings are actually used.
!

IF .DCDB[CDB$W_DISPCTL]	EQL 0			! if display control is 0
    THEN  SCR_DATA_LINE = .(SCR_PATTERN[.ITEMS-1])<0,24>   ! use default spacing 
    ELSE  SCR_DATA_LINE<7,15> = .(DCDB[CDB$W_DISPCTL])<0,15> ; ! else use spacing specified in CDB
!
! Output name string for each item in this heterogeneous class
!

IF .MRBPTR[MRB$V_MFSUM] OR .DCDB[CDB$V_WIDE]	! if this is a multi-file summary or a wide screen
    THEN  NAME_COL = NAME_COL_MFSUM		!   start the names here
    ELSE  IF .DCDB[CDB$B_ST] EQL ALL_STAT	! if this is a tabular display,
            THEN  NAME_COL = NAME_COL_TAB	!   start the names here
            ELSE  NAME_COL = NAME_COL_BAR ;	!   else start there for bar graph

IF NOT .DCDB[CDB$V_HOMOG]			! if this is a heterogeneous class,
THEN
  BEGIN

  I = 0 ;					! initialize data item index
  ITMSTR = .DCDB[CDB$A_ITMSTR] ;		! get address of item byte string

  IF .DCDB[CDB$V_SYSCLS] AND .DCDB[CDB$B_ST] EQL ALL_STAT	! if this is the SYSTEM tabular display,
    THEN ITMSTR = ITMSTR_SYS_ALL ;				!   get a special ITMSTR

  INCR YPOS FROM FIRST_DATA_LINE TO LAST_DATA_LINE ! loop once for each line in
  DO						! ... data portion of screen
    BEGIN

    !
    ! Find the IDB for this item.  Output the long name
    ! string, preceded by the correct cursor positioning
    ! sequence to space them out evenly.
    !

    LOCAL
	DIDB: REF BLOCK[,BYTE] ,
	NAME ,
	NEXT ;
    IF .SCR_DATA_LINE[.YPOS-1]				! if this is a data line,
    THEN
	BEGIN
	NEXT = .ITMSTR[.I] ;				! get next token
	DIDB = PERFTABLE[ .NEXT * IDB$K_ILENGTH ] ;	! addr of IDB
	NAME = .DIDB[IDB$A_LNAME] ;			! address of name string
	POSITION( .YPOS + .ROW_OFFSET , .NAME_COL ) ;	! position to this item
	OUTPUT( .NAME ) ;				! output name string
	IF .DIDB[IDB$V_PCNT] EQL 1			! if this is a pcnt item
	THEN I = .I + 2					! move past item used for calc
	ELSE I = .I + 1;				! point index to next data item
	END;

    END;
  END;

!
! If this is the first time thru for this class,
! obtain and build the FAO control string to insert
! the data values for the items at data display time.
!

IF .DCDB[CDB$A_FAOCTR] EQL 0  OR  NOT .DISPLAYING		! if no fao control string yet
THEN								! ... OR in summary processing
    BEGIN
    LOCAL
        FAOCSIZE ;						! holds faoctr size
    IF .DCDB[CDB$A_FAOCTR] EQL 0				! if no control string buffer yet,
    THEN
	BEGIN
	FAOCSIZE = FAOCTR_SIZE ;				! initialize its size
	STATUS = LIB$GET_VM(FAOCSIZE,DCDB[CDB$A_FAOCTR]);	! get the memory for it
	IF NOT .STATUS THEN RETURN .STATUS ;			! return if error
	END;

    POINTER = .DCDB[CDB$A_FAOCTR] ;				! start pointer at beg of FAO buffer

    IF .DCDB[CDB$B_ST] EQL ALL_STAT OR .MRBPTR[MRB$V_MFSUM]	! if this is a tabular display,
    THEN							!   set up control string accordingly
	BEGIN
	LOCAL
	    COL_OFFSET,						! holds offset from usual column where data starts
	    CUR_TABSTR ;					! holds addr of FAO control string segment
	IF .DCDB[CDB$V_WIDE]					! if a wide-screen display,
	    THEN COL_OFFSET = WIDE_NAME_SIZE			!   then set a wide offset
	    ELSE COL_OFFSET = MAX_NAME_SIZE ;			!   otherwise, take the usual width
	XPOS = .NAME_COL + .COL_OFFSET ;			! starting column
	DCDB[CDB$B_FAOPRELEN] = 0 ;				! length of FAO prefix

	IF .MRBPTR[MRB$V_MFSUM]					! if this is a multi-file summary,
	    THEN  CUR_TABSTR = MFSUMSTR				!   get the appropriate FAO control str segment
	    ELSE IF .DCDB[CDB$V_PERCENT]			! if this is a percent display,
		     THEN  CUR_TABSTR = TABSTR_PC		!   get the appropriate FAO control str segment
		     ELSE  CUR_TABSTR = TABSTR;			!   else get the other one

	INCR YPOS FROM FIRST_DATA_LINE TO LAST_DATA_LINE	! loop once for each line in
	DO							! ... data portion of screen
	    BEGIN
	    IF .SCR_DATA_LINE[.YPOS-1]				! if this is a data line,
	    THEN
	        BEGIN
		(.POINTER)<0,16> = CURSOR ;			! insert position command
		( POINTER = .POINTER + 2 )<0,8> = .YPOS + .ROW_OFFSET ;	! insert row number
		( POINTER = .POINTER + 1 )<0,8> = .XPOS ;	! insert column number
		POINTER = .POINTER + 1 ;			! update to skip last inserted byte
		CH$MOVE( .(.CUR_TABSTR)<0,8> , (.CUR_TABSTR)+1 , .POINTER ) ; ! move conversion control string
		POINTER = .POINTER + .(.CUR_TABSTR)<0,8> ;	! update pointer
		IF .YPOS EQL FIRST_DATA_LINE			! if first time thru the loop,
		    THEN DCDB[CDB$B_FAOSEGLEN] = .POINTER - .DCDB[CDB$A_FAOCTR] - .DCDB[CDB$B_FAOPRELEN] ;
								! compute length of a single segment
		END;
	    END;

	END

    ELSE						! bar graph display -- set up ctrl string for it
	BEGIN
	!
	! Now build the fao control string to output a bar graph
	! at run time.  The control string contains for each line:
	!	position row and column to left of grid                                 
	!	write count                                                             
	!	re-position row and column inside grid                                  
	!	output 'n' bar characters                                               
	!	delete to end of line
	!
	LOCAL
	    XPOSBAR ,					! column number of beg of bar
	    XPOSCOUNT ;					! column number of count field

	XPOSCOUNT = 30 ;				! starting column of count field
	XPOSBAR = 39 ;					! starting column of bar field  
	(.POINTER) <0,16> = ALTSET ;			! start filling ctrl string (alternate graphics)
	POINTER = .POINTER + 2 ;			! skip to next position
	DCDB[CDB$B_FAOPRELEN] = 2 ;			! ... and store length of FAO prefix

	INCR YPOS FROM FIRST_DATA_LINE TO LAST_DATA_LINE ! loop once for each line in
	DO						! ... data portion of screen
	    BEGIN
	    IF .SCR_DATA_LINE[.YPOS-1]				! if this is a data line,
	    THEN
	        BEGIN
		(.POINTER)<0,16> = CURSOR ;			! insert position command
		(POINTER = .POINTER + 2 )<0,8> = .YPOS ;	! next Y position
		(POINTER = .POINTER + 1 )<0,8> = .XPOSCOUNT ;	! X position for count        
		POINTER = .POINTER + 1 ;			! next buffer position          
		CH$MOVE( 9 , COUNTSTR , .POINTER ) ;		! move count directive          
		(POINTER = .POINTER+9)<0,16> = CURSOR ;		! insert control to position to 
		(POINTER = .POINTER+2)<0,8> = .YPOS ;		! stay in same row              
		(POINTER = .POINTER+1)<0,8> = .XPOSBAR ;	! column for bar field          
		POINTER = .POINTER + 1 ;			! next buffer position          
		CH$MOVE( 3 , REPTSTR , .POINTER ) ;		! move repeat control
		(POINTER = .POINTER + 3)<0,8> = .BARCHAR ;	! insert literal character to use for graph
		(POINTER = .POINTER+1)<0,16> = ERASEEOL ;	! delete rest of line
		POINTER = .POINTER + 2 ;			! next buffer position          
		IF .YPOS EQL FIRST_DATA_LINE			! if first time thru the loop,
		    THEN DCDB[CDB$B_FAOSEGLEN] = .POINTER - .DCDB[CDB$A_FAOCTR] - .DCDB[CDB$B_FAOPRELEN] ;
								! compute length of a single segment
		END;                                                                        
	    END;

	(.POINTER)<0,16> = REGSET ;			! restore normal char set
	POINTER = .POINTER + 2 ;			! update position
	END;

    !
    ! Insert length of created string into CDB
    !

    DCDB[CDB$L_FAOCTR] = .POINTER - .DCDB[CDB$A_FAOCTR] ;
    END ;
RETURN .NORMAL ;					! return with no errors
END;

GLOBAL ROUTINE OUTPUT( STRING ) =
BEGIN

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Routine to output counted string with no carriage control.
!
! INPUTS:
!
!	STRING - address of counted ascii string.
!
! OUTPUTS:
!
!	none
!++

PUT_TO_SCREEN (.(.STRING)<0,8>, .STRING+1)
END;


ROUTINE POSITION( YPOS , XPOS ) =
BEGIN

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Routine to call SCRPKG to position screen for characters.
!
! INPUTS:
!
!	YPOS - y position ( row number , one origin)
!	XPOS - x position ( column number , one origin)
!
! OUTPUTS:
!
!	none
!--

SCR$SET_CURSOR (.YPOS, .XPOS)	! set cursor to the requested position
END;


END				!End of module
ELUDOM
