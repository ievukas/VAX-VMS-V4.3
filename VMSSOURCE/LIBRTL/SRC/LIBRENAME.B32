MODULE LIB$RENAME_FILE ( %TITLE 'Rename one or more files'
		IDENT = '1-006'		! File: LIBRENAME.B32 Edit: BLS0331
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library
!
! ABSTRACT:
!
!	LIB$RENAME_FILE renames one or more files.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 13-July-1982
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 13-July-1982
! 1-002 - Add related-filespec argument.  Pass FAB to confirm-routine.
!	  SBL 1-Oct-1982
! 1-003 - Pass error source code to error-routine.  SBL 11-Nov-1982
! 1-004	- Allow for new argument to LIB$FILE_SCAN.  BLS  6-FEB-1984
! 1-005 - Correct related name string handling.  Add new argument
!	for filescan context. BLS  5-MAR-1984
! 1-006	- Parse the null string after calling file_scan to free up
!	internal RMS context. BLS  9-JUL-1984
!--


%SBTTL 'Declarations'
!
! PROLOGUE FILE:
!

REQUIRE 'RTLIN:LIBPROLOG';			! Switches, PSECTs, macros, etc.

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$RENAME_FILE,				! Rename one or more files
    DO_RENAME: NOVALUE,				! Rename a file
    RENAME_ERROR: NOVALUE,			! Error routine
    COPY_RESULTANT_NAME,			! Copy resultant filename
    RENAME_HANDLER;				! Condition handler

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!

!+
! Define bit fields of FLAGS longword.
!-

FIELD
    FLAGS_FIELDS =
	SET

	V_NONEW_VERSION = [0,0,1,0],		! Don't create new version
	V_RESERVED	= [0,1,31,0]		! Reserved - MBZ

	TES;

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNALS:
!

EXTERNAL ROUTINE
    LIB$ANALYZE_SDESC_R2: LIB$ANALYZE_SDESC_R2$LINKAGE,
    LIB$FILE_SCAN,
    LIB$GET_VM,
    LIB$FREE_VM,
    LIB$SCOPY_DXDX,
    LIB$SCOPY_R_DX,
    LIB$SIG_TO_RET;

EXTERNAL LITERAL
    LIB$_ERRROUCAL,
    LIB$_INVARG,
    LIB$_INVFILSPE;

%SBTTL 'LIB$RENAME_FILE - Rename one or more files'
GLOBAL ROUTINE LIB$RENAME_FILE (
    OLD_FILESPEC: REF BLOCK [, BYTE],		! Old file specification
    NEW_FILESPEC: REF BLOCK [, BYTE],		! New file specification
    DEFAULT_FILESPEC: REF BLOCK [, BYTE],	! Default old file specification
    RELATED_FILESPEC: REF BLOCK [, BYTE],	! Related old file specification
    FLAGS: REF BLOCK [4, BYTE] FIELD (FLAGS_FIELDS),	! Option flags
    SUCCESS_ROUTINE,				! Called on successful rename
    ERROR_ROUTINE,				! Called on error
    CONFIRM_ROUTINE,				! Called for conformation
    USER_ARG,					! User argument
    OLD_RESULTANT_NAME: REF BLOCK [, BYTE],	! Returned old filename
    NEW_RESULTANT_NAME: REF BLOCK [, BYTE],	! Returned new filename
    FILE_SCAN_CONTEXT				! Context for filescan
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	LIB$RENAME_FILE changes the name(s) of one or more files.  It is 
!	similar in function to the DCL RENAME command.  The specification 
!	of the file(s) to be renamed may include wild cards.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$RENAME_FILE (
!		OLD_FILESPEC.rt.dx, NEW_FILESPEC.rt.dx
!		[, [DEFAULT_FILESPEC.rt.dx]
!		[, [RELATED_FILESPEC.rt.dx]
!		[, [FLAGS.rlu.r]
!		[, [SUCCESS_ROUTINE.szem.r]
!		[, [ERROR_ROUTINE.fzemlc.r]
!		[, [CONFIRM_ROUTINE.fzemlc.r]
!		[, [USER_ARG.rz]
!		[, [OLD_RESULTANT_NAME.wt.dx]
!		[, [NEW_RESULTANT_NAME.wt.dx]
!		[, FILE_SCAN_CONTEXT.rlu.w]]]]]]]]])
!
! FORMAL PARAMETERS:
!
!	OLD_FILESPEC		- The file specification of the file(s)
!				  to be renamed.  Passed by descriptor.
!				  The specification may include wild cards.
!
!	NEW_FILESPEC		- The file specification for the new file
!				  name(s).  Passed by descriptor.
!
!	DEFAULT_FILESPEC	- The default file specification of the file(s)
!				  to be renamed.  Passed by descriptor.  This
!				  is an optional parameter; if omitted, the
!				  default is the null string.
!
!	RELATED_FILESPEC	- The related file specification of the
!				  files to be renamed.  Passed by descriptor.
!				  If omitted, the default is the null string.
!				  "Input file parsing" is used.
!
!	FLAGS			- A longword of flag bits specifying optional
!				  behavior.  This is an optional parameter,
!				  the default is that all flags are clear.
!
!				    V_NONEW_VERSION - Bit 0
!					In the case where NEW_FILESPEC does
!					not specify a version number, controls
!					whether or not a new version number for
!					the output file is to be assigned.
!
!					If clear, the default, the output file
!					has a version number one higher than
!					any previously existing file of the same
!					file name and file type.  If set, the
!					version number of the input file is used;
!					If a file already exists with the same
!					file name, type and version number, an
!					error is returned.
!
!					This flag is equivalent to the
!					/NONEW_VERSION qualifier of the
!					DCL RENAME command.
!
!	SUCCESS_ROUTINE		- The entry mask of a routine to call for
!				  each successful rename, passed by reference.
!				  The calling format of the SUCCESS_ROUTINE is
!				  as follows:
!					CALL SUCCESS_ROUTINE (
!					    old_filespec.rt.ds,
!					    new_filespec.rt.ds,
!					    user_arg.rz)
!
!				    old_filespec - The RMS resultant file specification
!						   of the file being renamed.  If
!						   OLD_RESULTANT_NAME was specified,
!						   it is used to pass the string
!						   to SUCCESS_ROUTINE.  Otherwise,
!						   a class S, type T string is passed.
!
!				    new_filespec - The RMS resultant file specification
!						   of the newly renamed file.  If
!						   NEW_RESULTANT_NAME was specified,
!						   it is used to pass the string
!						   to SUCCESS_ROUTINE.  Otherwise,
!						   a class S, type T string is passed.
!
!				    user_arg     - The value of user_arg passed
!						   to LIB$RENAME_FILE is passed
!						   to SUCCESS_ROUTINE using the
!						   same mechanism as was used to
!						   pass it to LIB$RENAME_FILE.
!
!	ERROR_ROUTINE		- The entry mask of a routine to call when
!				  a file error is detected, passed by reference.
!				  The function value returned by the routine
!				  determines whether or not more files will
!				  be processed.
!
!				  The calling format of the ERROR_ROUTINE is
!				  as follows:
!					ret_status.wlc.v = ERROR_ROUTINE (
!					    old_filespec.rt.ds,
!					    new_filespec.rt.ds,
!					    RMS_sts.rlc.r
!					    RMS_stv.rlc.r,
!					    error_source.rl.r,
!					    user_arg.rz)
!
!				    old_filespec - The RMS resultant file specification
!						   of the file being renamed
!						   when the error occured.  If
!						   OLD_RESULTANT_NAME was specified,
!						   it is used to pass the string
!						   to ERROR_ROUTINE.  Otherwise,
!						   a class S, type T string is passed.
!
!				    new_filespec - The RMS resultant file specification
!						   of the new file name being used
!						   when the error occured.  If
!						   NEW_RESULTANT_NAME was specified,
!						   it is used to pass the string
!						   to ERROR_ROUTINE.  Otherwise,
!						   a class S, type T string is passed.
!
!				    RMS_sts	 - The primary condition code
!						   which describes the error
!						   that occurred.
!
!				    RMS_stv	 - The secondary condition code
!						   which describes the error
!						   that occurred.
!
!				    error_source - An integer code that indicates
!						   at what point the error was
!						   found.  The values are:
!						     0 = Error searching for
!							 old-file
!						     1 = Error parsing new
!						 	 filespec
!						     2 = Error renaming file
!
!				    user_arg     - The value of user_arg passed
!						   to LIB$RENAME_FILE is passed
!						   to ERROR_ROUTINE using the
!						   same mechanism as was used to
!						   pass it to LIB$RENAME_FILE.
!
!				  If ERROR_ROUTINE returns a success status,
!				  then processing of files will continue.  If
!				  a failure status is returned, then processing
!				  will cease immediately and LIB$RENAME_FILE
!				  will return with an error status.
!
!				  If ERROR_ROUTINE is not specified,
!				  LIB$RENAME_FILE will return to its caller with
!				  the most severe of the error statuses encountered
!				  while renaming the files.  Otherwise, if
!				  ERROR_ROUTINE is called for an error, the
!				  success status LIB$_ERRROUCAL is returned.
!				  Note that ERROR_ROUTINE is not called for
!				  errors related to string copying.
!
!	CONFIRM_ROUTINE		- The entry mask of a routine to call before
!				  each file is renamed, passed by reference.
!				  The function value returned by the routine
!				  determines whether or not the file will be
!				  be renamed.
!
!				  The calling format of CONFIRM_ROUTINE is
!				  as follows:
!					ret_status.wlc.v = CONFIRM_ROUTINE (
!					    old_filespec.rt.ds,
!					    new_filespec.rt.ds,
!					    old_FAB.rr.r,
!					    user_arg.rz)
!
!				    old_filespec - The RMS resultant file specification
!						   of the file about to be
!						   renamed.  If OLD_RESULTANT_NAME 
!						   was specified, it is used to 
!						   pass the string to CONFIRM_ROUTINE.  
!						   Otherwise, a class S, type T 
!						   string is passed.
!
!				    new_filespec - The RMS resultant file specification
!						   which the file will be given.
!						   If NEW_RESULTANT_NAME 
!						   was specified, it is used to 
!						   pass the string to CONFIRM_ROUTINE.  
!						   Otherwise, a class S, type T 
!						   string is passed.
!
!				    old_FAB	 - The address of the RMS FAB
!						   that describes the file
!						   being renamed.  You may
!						   perform an RMS $OPEN on the
!						   FAB to obtain file attributes
!						   you need to determine whether
!						   the file should be renamed,
!						   but you must close the file
!						   with $CLOSE before returning
!						   to LIB$RENAME_FILE
!
!				    user_arg     - The value of user_arg passed
!						   to LIB$RENAME_FILE is passed
!						   to CONFIRM_ROUTINE using the
!						   same mechanism as was used to
!						   pass it to LIB$RENAME_FILE.
!
!				  If CONFIRM_ROUTINE returns success, the file
!				  is then renamed, otherwise that file is not
!				  renamed.
!
!	USER_ARG		- A value passed to SUCCESS_ROUTINE,
!				  ERROR_ROUTINE and CONFIRM_ROUTINE each
!				  time they are called.  Whatever mechanism
!				  is used to pass USER_ARG to LIB$RENAME_FILE is
!				  used to pass it to the action routine.  This 
!				  is an optional parameter, if omitted, zero 
!				  is passed by immediate value.
!
!	OLD_RESULTANT_NAME	- A string into which is written the old RMS resultant
!				  file specification of the last file processed
!				  by LIB$RENAME_FILE.  Passed by descriptor.
!				  This is an optional parameter. If present, 
!				  it is used to store the filespec passed to 
!				  the action routines instead of a default 
!				  class S, type T string.
!
!	NEW_RESULTANT_NAME	- A string into which is written the new RMS resultant
!				  file specification of the last file processed
!				  by LIB$RENAME_FILE.  Passed by descriptor.
!				  This is an optional parameter. If present, 
!				  it is used to store the filespec passed to 
!				  the action routines instead of a default 
!				  class S, type T string.
!
!	FILE_SCAN_CONTEXT	- The address of a longword, which is
!				  initialized to 0 before calling LIB$RENAME_FILE.
!				  This context is used by LIB$FILE_SCAN to retain
!				  multiple input file related file context, and
!				  need only be specified if dealing with multiple
!				  input files, as the DCL RENAME command does.
!				  The context allocated by LIB$FILE_SCAN while
!				  processing the LIB$RENAME_FILE requests may
!				  be deallocated by calling LIB$FILE_SCAN_END
!				  after all calls to LIB$RENAME_FILE have been
!				  completed.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_ERRROUCAL	Success - error routine called.  A file error occurred
!			but ERROR_ROUTINE was called to handle the condition.
!	LIB$_INVSTRDES	Invalid string descriptor
!	LIB$_INVARG	Invalid argument.  FLAGS has undefined bits set.
!	LIB$_INVFILSPE	Invalid file specification.  OLD_FILESPEC, NEW_FILESPEC
!			or DEFAULT_OLD_FILESPEC contains more than 255 characters.
!	LIB$_WRONUMARG	Wrong number of arguments.
!	LIB$_xxx	Any error status from LIB$SCOPY_xxx
!	RMS$_xxx	Any error status from RMS.  If ERROR_ROUTINE was not
!			specified, this is the most severe of the RMS errors
!			which occurred while renaming the files.
!
! SIDE EFFECTS:
!
!	The files specified are renamed.
!
!--

    BEGIN

    !+
    ! Because $RENAME does not perform wildcarding, we need to keep two
    ! separate FABs (and associated NAMs) for both the old filespec and
    ! the new filespec.  OLDFAB (and OLDNAM) are passed to LIB$FILE_SCAN
    ! as the basis for the wildcard search.  NEWFAB will be used in
    ! DO_RENAME to do two $PARSEs on the new filespec, using OLDFAB as
    ! input.  Next the resultant filename from OLDFAB will be copied to
    ! OLDFAB_R and the expanded filename from NEWFAB to NEWFAB_R.  Then
    ! the $RENAME will be done with OLDFAB_R and NEWFAB_R.
    !-

    LOCAL
	OLDFAB: $FAB_DECL,				! Old file's FAB
	OLDFAB_R: $FAB_DECL,				! Old file's FAB for $RENAME
    	NEWFAB: $FAB_DECL,				! New file's FAB
    	NEWFAB_R: $FAB_DECL,				! New file's FAB for $RENAME
	OLDNAM: $NAM_DECL,				! Old file's NAM
	OLDNAM_R: $NAM_DECL,				! Old file's NAM for $RRNAME
	NEWNAM: $NAM_DECL,				! New file's NAM
	NEWNAM_R: $NAM_DECL,				! New file's NAM for $RENAME
	RLF_NAM: $NAM_DECL,				! Related filespec NAM
	OLD_ESN: VECTOR [NAM$C_MAXRSS, BYTE],		! Old Expanded name
	OLD_RSN: VECTOR [NAM$C_MAXRSS, BYTE],		! Old Resultant name
	NEW_RSN: VECTOR [NAM$C_MAXRSS, BYTE],		! New Resultant name
	RLF_DESC : $BBLOCK[DSC$C_S_BLN],		! Temp descriptor for RLF
	WORST_ERROR,					! Worst error so far
	INTERCEPT_FLAG: VOLATILE,			! 1 if signals are to be intercepted
	RET_STATUS;					! Return status

    BUILTIN
	ACTUALCOUNT,
	NULLPARAMETER;

    !+
    ! Establish RENAME_HANDLER as a handler which will convert signals
    ! to return statuses if INTERCEPT_FLAG is set.  Note that BLISS
    ! automatically zeroes INTERCEPT_FLAG as a VOLATILE enable argument.
    !-

    ENABLE
	RENAME_HANDLER (INTERCEPT_FLAG);

    !+
    ! Validate the argument count.
    !-

    $LIB$VALIDATE_ARGCOUNT (2,12);

    !+
    ! Initialize the FAB and NAM blocks.  See DO_RENAME for a description
    ! of NEWFAB's DNA field.
    !-

    $FAB_INIT (FAB=OLDFAB, NAM=OLDNAM);
    $FAB_INIT (FAB=OLDFAB_R, NAM=OLDNAM_R, FNA=OLD_RSN);
    $FAB_INIT (FAB=NEWFAB, NAM=NEWNAM,
	DNA = UPLIT BYTE (';*'));
    $FAB_INIT (FAB=NEWFAB_R, FNA=NEW_RSN, NAM=NEWNAM, FOP=(OFP));
    $NAM_INIT (NAM=OLDNAM, ESA=OLD_ESN, ESS=NAM$C_MAXRSS,
	RSA=OLD_RSN, RSS=NAM$C_MAXRSS, RLF=RLF_NAM);
    $NAM_INIT (NAM=OLDNAM_R, ESA=OLD_RSN, ESS=NAM$C_MAXRSS,
	RSA=OLD_RSN, RSS=NAM$C_MAXRSS);
    $NAM_INIT (NAM=NEWNAM, ESA=NEW_RSN, ESS=NAM$C_MAXRSS,
	RSA=NEW_RSN, RSS=NAM$C_MAXRSS, RLF=OLDNAM);
    $NAM_INIT (NAM=NEWNAM_R, ESA=NEW_RSN, ESS=NAM$C_MAXRSS,
	RSA=NEW_RSN, RSS=NAM$C_MAXRSS, RLF=OLDNAM);
    $NAM_INIT (NAM=RLF_NAM);

    !+
    ! Initialize WORST_ERROR to zero.  It will be modified if errors occur.
    !-

    WORST_ERROR = 0;

    !+
    ! Set up OLDFAB for the old file specification.  Return LIB$_INVFILSPE
    ! if the string is longer than 255 characters.
    !-

	BEGIN

	LOCAL
	    OLD_FILESPEC_LENGTH: WORD,	! Length of OLD_FILESPEC string
	    STATUS;			! Status from LIB$ANALYZE_SDESC.

	STATUS = LIB$ANALYZE_SDESC_R2 (OLD_FILESPEC [0,0,0,0];
	    OLD_FILESPEC_LENGTH, OLDFAB [FAB$L_FNA]);		

	IF NOT .STATUS
	THEN
	    RETURN .STATUS;

	IF .OLD_FILESPEC_LENGTH GTRU 255
	THEN
	    RETURN LIB$_INVFILSPE;

	OLDFAB [FAB$B_FNS] = .OLD_FILESPEC_LENGTH;
	END;

    !+
    ! Set up NEWFAB to refer to NEW_FILENAME.  Return LIB$_INVFILSPE
    ! if the string is longer than 255 characters.
    !-

	BEGIN

	LOCAL
	    NEW_FILESPEC_LENGTH,
	    STATUS;			! Status from LIB$ANALYZE_SDESC.

	STATUS = LIB$ANALYZE_SDESC_R2 (NEW_FILESPEC [0,0,0,0];
	    NEW_FILESPEC_LENGTH, NEWFAB [FAB$L_FNA]);		

	IF NOT .STATUS
	THEN
	    RETURN .STATUS;

	IF .NEW_FILESPEC_LENGTH GTRU 255
	THEN
	    RETURN LIB$_INVFILSPE;

	NEWFAB [FAB$B_FNS] = .NEW_FILESPEC_LENGTH;
	END;

    !+
    ! If DEFAULT_OLD_FILESPEC is present, set up the default name string
    ! in OLDFAB to refer to it.
    !-

    IF NOT NULLPARAMETER (3)
    THEN
	BEGIN

	LOCAL
	    DEFAULT_FILESPEC_LENGTH: WORD,	! Length of DEFAULT_FILESPEC string
	    STATUS;			! Status from LIB$ANALYZE_SDESC.

	STATUS = LIB$ANALYZE_SDESC_R2 (DEFAULT_FILESPEC [0,0,0,0];
	    DEFAULT_FILESPEC_LENGTH, OLDFAB [FAB$L_DNA]);		

	IF NOT .STATUS
	THEN
	    RETURN .STATUS;

	IF .DEFAULT_FILESPEC_LENGTH GTRU 255
	THEN
	    RETURN LIB$_INVFILSPE;

	OLDFAB [FAB$B_DNS] = .DEFAULT_FILESPEC_LENGTH;
	END;

    !+
    ! If RELATED_FILESPEC is present, set up the related file specification
    ! in RLF_NAM to refer to it.
    !-

    RLF_DESC[DSC$W_LENGTH] = 0;
    RLF_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
    RLF_DESC[DSC$B_CLASS] = DSC$K_CLASS_D;
    RLF_DESC[DSC$A_POINTER] = 0;
    IF NOT NULLPARAMETER (4)
	AND NULLPARAMETER (12)
    THEN
	BEGIN

	LOCAL
	    RELATED_FILESPEC_LENGTH: WORD, ! Length of RELATED_FILESPEC string
	    RELATED_FILESPEC_ADDR,	   ! and it's address
	    STATUS;			   ! Status from LIB$ANALYZE_SDESC.

	STATUS = LIB$ANALYZE_SDESC_R2 (RELATED_FILESPEC [0,0,0,0];
		RELATED_FILESPEC_LENGTH, RELATED_FILESPEC_ADDR);
	IF NOT .STATUS
	THEN
	    RETURN .STATUS;

	IF .RELATED_FILESPEC_LENGTH GTRU 255
	THEN
	    RETURN LIB$_INVFILSPE;

	! Must use LIB$GET_VM since LIB$FILE_SCAN may deallocate with FREE_VM
	STATUS = LIB$GET_VM(RELATED_FILESPEC_LENGTH,RLF_DESC[DSC$A_POINTER]);
	RLF_DESC[DSC$W_LENGTH] = .RELATED_FILESPEC_LENGTH;
	CH$MOVE(.RLF_DESC[DSC$W_LENGTH],.RELATED_FILESPEC_ADDR,
			.RLF_DESC[DSC$A_POINTER]);
	RLF_NAM[NAM$B_RSL] = .RLF_DESC[DSC$W_LENGTH];
	RLF_NAM[NAM$L_RSA] = .RLF_DESC[DSC$A_POINTER];
	END;

    !+
    ! Verify that reserved bits aren't set in FLAGS, if present.
    !-

    IF NOT NULLPARAMETER (5)
    THEN
	IF .FLAGS [V_RESERVED] NEQ 0
	THEN
	    RETURN LIB$_INVARG;

    !
    ! If passing context to lib$file_scan, then ensure that we
    ! don't confuse things with a dummy related nam block
    !
    IF NOT NULLPARAMETER(12)
	THEN OLDNAM[NAM$L_RLF] = 0;
    !+
    ! Call LIB$FILE_SCAN, which will call DO_RENAME for each file that is
    ! to be renamed.  Pass as extra parameters the other FABs.
    ! These will be passed to DO_RENAME.
    !-

    LIB$FILE_SCAN (
	OLDFAB,				! Input FAB
	DO_RENAME,			! Success routine
	RENAME_ERROR,			! Error routine
	(IF ACTUALCOUNT () GEQU 12 THEN .FILE_SCAN_CONTEXT ELSE 0), ! Context
	NEWFAB,				! FAB for $PARSE of new filename
	OLDFAB_R,			! Source FAB for $RENAME
	NEWFAB_R,			! Dest FAB for $RENAME
	(IF NOT NULLPARAMETER (5) THEN .FLAGS [0,0,32,0] ELSE 0),! Flags
	(IF ACTUALCOUNT () GEQU 6 THEN .SUCCESS_ROUTINE ELSE 0),! Success routine
	(IF ACTUALCOUNT () GEQU 7 THEN .ERROR_ROUTINE ELSE 0),	! Error routine
	(IF ACTUALCOUNT () GEQU 8 THEN .CONFIRM_ROUTINE ELSE 0),! Confirm routine
	(IF ACTUALCOUNT () GEQU 9 THEN .USER_ARG ELSE 0),	! User argument
	(IF ACTUALCOUNT () GEQU 10 THEN .OLD_RESULTANT_NAME ELSE 0), ! Old resultant name
	(IF ACTUALCOUNT () GEQU 11 THEN .NEW_RESULTANT_NAME ELSE 0), ! New resultant name
        WORST_ERROR,			! Worst error so far
	INTERCEPT_FLAG);		! Signal intercept flag

    LIB$FREE_VM(RLF_DESC[DSC$W_LENGTH],
			RLF_DESC[DSC$A_POINTER]); !Deallocate temp descriptor
    !+
    ! Parse the null string to deallocate any internal
    ! RMS context.
    !-

    OLDNAM[NAM$V_SVCTX] = 0;
    OLDNAM[NAM$V_SYNCHK] = 1;
    OLDNAM[NAM$B_ESL] = 0;
    OLDNAM[NAM$B_RSL] = 0;
    OLDNAM[NAM$B_ESS] = 0;
    OLDNAM[NAM$B_RSS] = 0;
    OLDNAM[NAM$L_RLF] = 0;
    OLDFAB[FAB$B_FNS] = 0;
    OLDFAB[FAB$B_DNS] = 0;
    $PARSE(FAB=OLDFAB);

    !+
    ! Return WORST_ERROR or SS$_NORMAL, as appropriate.
    !-

    IF .WORST_ERROR NEQ 0
    THEN
	RET_STATUS = .WORST_ERROR
    ELSE
	RET_STATUS = SS$_NORMAL;

    RETURN .RET_STATUS;

    END;					! End of routine LIB$RENAME_FILE

%SBTTL 'DO_RENAME - Rename a file'
ROUTINE DO_RENAME (
    OLDFAB: REF $FAB_DECL,			! Next input file FAB
    UNUSED_1,					! Unused here
    UNUSED_2,					! Unused here
    UNUSED_3,					! Unused here
    NEWFAB: REF $FAB_DECL,			! FAB for $PARSE
    OLDFAB_R: REF $FAB_DECL,			! Source for $RENAME
    NEWFAB_R: REF $FAB_DECL,			! Dest for $RENAME
    FLAGS: BLOCK [4, BYTE] FIELD (FLAGS_FIELDS),! Option flags
    SUCCESS_ROUTINE,				! Success routine address
    UNUSED_4,					! Unused here
    CONFIRM_ROUTINE,				! Confirm routine address
    USER_ARG,					! User argument
    OLD_RESULTANT_NAME: REF BLOCK [, BYTE],	! Old resultant filename
    NEW_RESULTANT_NAME: REF BLOCK [, BYTE],	! New resultant filename
    UNUSED_5,					! Unused here
    INTERCEPT_FLAG: REF VECTOR [, LONG]		! Intercept flag
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called once for each file that LIB$FILE_SCAN
!	finds.  It renames the file described by OLDFAB to the filename
!	specified by NEWFAB.
!
! CALLING SEQUENCE:
!
!	DO_RENAME is called by LIB$FILE_SCAN with the same arguments as
!	were passed to it by LIB$RENAME_FILE.
!
! FORMAL PARAMETERS:
!
!	See LIB$RENAME_FILE for a description of all parameters.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Renames a file
!
!--

    BEGIN

    LOCAL
	OLDNAM: REF $NAM_DECL,		! NAM of OLDFAB
	OLDNAM_R: REF $NAM_DECL,	! NAM of OLDFAB_R
	NEWNAM: REF $NAM_DECL,		! NAM of NEWFAB
	NEWNAM_R: REF $NAM_DECL,	! NAM of NEWFAB_R
	OLD_LOCAL_DSC: BLOCK [8, BYTE],	! Local descriptor for old name
	NEW_LOCAL_DSC: BLOCK [8, BYTE],	! Local descriptor for new name
	OLD_STRING_PTR,			! Pointer to old string
	NEW_STRING_PTR;			! Pointer to new string

    BUILTIN
	AP,				! Argument pointer
	CALLG;				! CALLG instruction

    !+
    ! Set NAM addresses.
    !-

    OLDNAM = .OLDFAB [FAB$L_NAM];
    OLDNAM_R = .OLDFAB_R [FAB$L_NAM];
    NEWNAM = .NEWFAB [FAB$L_NAM];
    NEWNAM_R = .NEWFAB_R [FAB$L_NAM];

    !+
    ! Clear old statuses in FABs so that RENAME_ERROR can find the appropriate
    ! FAB when an error occurs.  We actually set the statuses to 1 for easy
    ! testing.
    !-

    OLDFAB_R [FAB$L_STS] = 1;
    NEWFAB [FAB$L_STS] = 1;
    NEWFAB_R [FAB$L_STS] = 1;

    !+
    ! To make LIB$RENAME look just like DCL RENAME, duplicate its
    ! handling of version numbers.  If the old filespec had a wildcard
    ! version, or if V_NONEW_VERSION was set, then use a default name of 
    ! ';*' for the first $PARSE of the new filespec.  This will preserve 
    ! the version number.  Otherwise use a null default name, which will 
    ! create the next highest version (if none was specified originally) 
    ! or will use the specific version in the old filespec.
    !
    ! Since NEWFAB [FAB$L_DNA] was initialized to the address of the string
    ! ';*', all we need to do is set the length if it is to be used.  If
    ! not, we need do nothing since its length is already zero!
    !-

    IF .OLDNAM [NAM$V_WILD_VER] OR .FLAGS [V_NONEW_VERSION]
    THEN
	NEWFAB [FAB$B_DNS] = %CHARCOUNT (';*');

    !+
    ! Call RMS to PARSE the new file name.  We must do two parses, the first,
    ! with OFP (output file parse) CLEAR, to copy any and all fields left blank
    ! in the new name from the old name (which is in the related file block),
    ! and the second, with OFP SET, to substitute any names which have been
    ! explicitly wildcarded in the output name as these have been ignored
    ! during the first parse. 
    !-

    IF NOT $PARSE (FAB=.NEWFAB)
    THEN
	BEGIN
	CALLG (.AP, RENAME_ERROR);
	RETURN;
	END;

    !+
    ! OFP is set in NEWFAB_R, so do the second parse there.
    !-

    NEWFAB_R [FAB$B_FNS] = .NEWNAM [NAM$B_ESL];
    IF NOT $PARSE (FAB=.NEWFAB_R)
    THEN
	BEGIN
	CALLG (.AP, RENAME_ERROR);
	RETURN;
	END;

    !+
    ! Copy the resultant file names to the user's strings or our own.
    !-

    OLD_STRING_PTR = .OLD_RESULTANT_NAME;
    IF .OLD_STRING_PTR NEQA 0
    THEN
	BEGIN
	LOCAL
	    COPY_STATUS;
	COPY_STATUS = LIB$SCOPY_R_DX (%REF(.OLDNAM [NAM$B_RSL]),
	    .OLDNAM [NAM$L_RSA], .OLD_RESULTANT_NAME);
	IF NOT .COPY_STATUS
	THEN
	    BEGIN
	    INTERCEPT_FLAG [0] = 1;
	    SIGNAL_STOP (.COPY_STATUS);
	    RETURN;
	    END;
	END
    ELSE
	BEGIN
	OLD_STRING_PTR = OLD_LOCAL_DSC;		! Use our string
	OLD_LOCAL_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	OLD_LOCAL_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
	OLD_LOCAL_DSC [DSC$W_LENGTH] = .OLDNAM [NAM$B_RSL];
	OLD_LOCAL_DSC [DSC$A_POINTER] = .OLDNAM [NAM$L_RSA];
	END;

    NEW_STRING_PTR = .NEW_RESULTANT_NAME;
    IF .NEW_STRING_PTR NEQA 0
    THEN
	BEGIN
	LOCAL
	    COPY_STATUS;
	COPY_STATUS = LIB$SCOPY_R_DX (%REF(.NEWNAM_R [NAM$B_ESL]),
	    .NEWNAM_R [NAM$L_ESA], .NEW_RESULTANT_NAME);
	IF NOT .COPY_STATUS
	THEN
	    BEGIN
	    INTERCEPT_FLAG [0] = 1;
	    SIGNAL_STOP (.COPY_STATUS);
	    RETURN;
	    END;
	END
    ELSE
	BEGIN
	NEW_STRING_PTR = NEW_LOCAL_DSC;		! Use our string
	NEW_LOCAL_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	NEW_LOCAL_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
	NEW_LOCAL_DSC [DSC$W_LENGTH] = .NEWNAM_R [NAM$B_ESL];
	NEW_LOCAL_DSC [DSC$A_POINTER] = .NEWNAM_R [NAM$L_ESA];
	END;

    !+
    ! If there is a CONFIRM_ROUTINE, ask it if it wants the file renamed.
    ! Note use of linkage name BLISS to perform a general-routine-call.
    !-

    IF .CONFIRM_ROUTINE NEQA 0
    THEN
	IF NOT BLISS (.CONFIRM_ROUTINE, .OLD_STRING_PTR, .NEW_STRING_PTR, 
	    .OLDFAB, .USER_ARG)
	THEN
	    RETURN;

    !+
    ! Now set up OLDFAB_R and NEWFAB_R and do the $RENAME.
    !-

    OLDFAB_R [FAB$B_FNS] = .OLDNAM [NAM$B_RSL];
    NEWFAB_R [FAB$B_FNS] = .NEWNAM_R [NAM$B_ESL];
    IF NOT $RENAME (OLDFAB=.OLDFAB_R, NEWFAB=.NEWFAB_R)
    THEN
	BEGIN
	CALLG (.AP, RENAME_ERROR);
	RETURN;
	END;

    !+
    ! We need a new "new resultant file name" string.  Copy it to the
    ! user's string or reset our own.
    !-

    IF .NEW_RESULTANT_NAME NEQA 0
    THEN
	BEGIN
	LOCAL
	    COPY_STATUS;
	COPY_STATUS = LIB$SCOPY_R_DX (%REF(.NEWNAM_R [NAM$B_RSL]),
	    .NEWNAM_R [NAM$L_RSA], .NEW_RESULTANT_NAME);
	IF NOT .COPY_STATUS
	THEN
	    BEGIN
	    INTERCEPT_FLAG [0] = 1;
	    SIGNAL_STOP (.COPY_STATUS);
	    RETURN;
	    END;
	END
    ELSE
	NEW_LOCAL_DSC [DSC$W_LENGTH] = .NEWNAM_R [NAM$B_RSL];


    !+
    ! If there is a success routine, call it.
    !-

    IF .SUCCESS_ROUTINE NEQA 0
    THEN
	BLISS (.SUCCESS_ROUTINE, .OLD_STRING_PTR, .NEW_STRING_PTR, 
	    .USER_ARG);

    RETURN;

    END;					! End of routine DO_RENAME

%SBTTL 'RENAME_ERROR - Report error during rename'
ROUTINE RENAME_ERROR (
    OLDFAB: REF $FAB_DECL,			! Next input file FAB
    UNUSED_1,					! Unused here
    UNUSED_2,					! Unused here
    UNUSED_3,					! Unused here
    NEWFAB: REF $FAB_DECL,			! FAB for $PARSE
    OLDFAB_R: REF $FAB_DECL,			! Source for $RENAME
    NEWFAB_R: REF $FAB_DECL,			! Dest for $RENAME
    UNUSED_4,					! Unused here
    UNUSED_5,					! Unused here
    ERROR_ROUTINE,				! Error routine address
    UNUSED_6,					! Unused here
    USER_ARG,					! User argument
    OLD_RESULTANT_NAME: REF BLOCK [, BYTE],	! Old resultant filename
    NEW_RESULTANT_NAME: REF BLOCK [, BYTE],	! New resultant filename
    WORST_ERROR: REF BLOCK [4, BYTE],		! Worst error so far
    INTERCEPT_FLAG: REF VECTOR [, LONG]		! Intercept flag
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called when LIB$FILE_SCAN detects an error.
!	It calls the user's error routine, if one exists.
!	If the user's error routine returns success, or if there is
!	no user error routine, processing of remaining files continues.
!	If the user's error routine returns failure, the error is
!	signalled.  This signal is converted to the return status of
!	LIB$RENAME_FILE.
!
! CALLING SEQUENCE:
!
!	Called from LIB$FILE_SCAN and DO_RENAME with the same arguments
!	as passed to LIB$FILE_SCAN from LIB$RENAME_FILE.
!
! FORMAL PARAMETERS:
!
!	See body of LIB$RENAME_FILE for descriptions of arguments.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	NONE
!
! SIDE EFFECTS:
!
!	May signal the error
!
!--

    BEGIN

    LOCAL
	OLDFAB_PTR: REF $FAB_DECL,		! Pointer to OLDFAB with error
	NEWFAB_PTR: REF $FAB_DECL,		! Pointer to NEWFAB with error
	ERRFAB: REF $FAB_DECL,			! Pointer to FAB with statuses
	ERROR_SOURCE,				! Code that indicates source of
						! error: 0 = file scan error
						!	 1 = $PARSE error
						!	 2 = $RENAME error
	OLD_LOCAL_DSC: BLOCK [8, BYTE],		! Local descriptor for old name
	NEW_LOCAL_DSC: BLOCK [8, BYTE],		! Local descriptor for new name
	OLD_STRING_PTR,				! Pointer to old string
	NEW_STRING_PTR;				! Pointer to new string

    !+
    ! Find out which OLDFAB and NEWFAB has the error.
    !-

    IF NOT .OLDFAB [FAB$L_STS]
    THEN
	BEGIN
	!+
	! Error from LIB$FILE_SCAN.
	!-
	LOCAL
	    NAM: REF $NAM_DECL;		! NAM block

	ERRFAB = .OLDFAB;
	OLDFAB_PTR = .OLDFAB;
	NEWFAB_PTR = .NEWFAB;
	NAM = .NEWFAB_PTR [FAB$L_NAM];
	NAM [NAM$B_RSL] = 0;	! Just use FNM field in NEWFAB
	NAM [NAM$B_ESL] = 0;
	ERROR_SOURCE = 0;	! Indicate error finding file
	END
    ELSE
	!+
	! It's not an error from LIB$FILE_SCAN.  See if it's the error from
	! one of the $PARSEs or the $RENAME.
	!-
	IF NOT .OLDFAB_R [FAB$L_STS]
	THEN
	    BEGIN
	    !+
	    ! It's the $RENAME.
	    !-
	    ERRFAB = .OLDFAB_R;
	    OLDFAB_PTR = .OLDFAB_R;
	    NEWFAB_PTR = .NEWFAB_R;
	    ERROR_SOURCE = 2;		! Indicate RENAME error
	    END
	ELSE IF NOT .NEWFAB [FAB$L_STS]
	THEN
	    BEGIN
	    !+
	    ! It's the first $PARSE.
	    !-
	    ERRFAB = .NEWFAB;
	    OLDFAB_PTR = .OLDFAB;
	    NEWFAB_PTR = .NEWFAB;
	    ERROR_SOURCE = 1;		! Indicate $PARSE error
	    END
	ELSE
	    BEGIN
	    !+
	    ! Must be the second $PARSE.
	    !-
	    ERRFAB = .NEWFAB_R;
	    OLDFAB_PTR = .OLDFAB;
	    NEWFAB_PTR = .NEWFAB_R;
	    ERROR_SOURCE = 1;		! Indicate $PARSE error
	    END;

    !+
    ! Call COPY_RESULTANT_NAME to copy the resultant name strings into either
    ! the user's strings or our own.
    !-

    OLD_STRING_PTR = COPY_RESULTANT_NAME (.OLDFAB_PTR, OLD_LOCAL_DSC,
	.OLD_RESULTANT_NAME, .INTERCEPT_FLAG);
    NEW_STRING_PTR = COPY_RESULTANT_NAME (.NEWFAB_PTR, NEW_LOCAL_DSC,
	.NEW_RESULTANT_NAME, .INTERCEPT_FLAG);

    !+
    ! If a user error routine has been specified, call it with arguments
    ! of the filename, STS, STV, error source, and user argument.  If it returns
    ! failure, signal the error.  Set WORST_ERROR to LIB$_ERRROUCAL so
    ! that our caller can tell that ERROR_ROUTINE was called.
    !-

    IF .ERROR_ROUTINE NEQA 0
    THEN
	BEGIN
	IF NOT BLISS (.ERROR_ROUTINE, .OLD_STRING_PTR, .NEW_STRING_PTR,
	    ERRFAB [FAB$L_STS], ERRFAB [FAB$L_STV], 
	    ERROR_SOURCE, .USER_ARG)
	THEN
	    BEGIN
	    INTERCEPT_FLAG [0] = 1;	! Cause handler to intercept signal
	    SIGNAL_STOP (.ERRFAB [FAB$L_STS]);
	    RETURN;
	    END;
	WORST_ERROR [0,0,32,0] = LIB$_ERRROUCAL;
	END
    ELSE
	BEGIN
	!+
	! If this error is worse than any previous errors, store it in
	! WORST_ERROR.  (Use GEQU so that the initial zero gets replaced if
	! the error is a warning.)
	!-
    
	IF .BLOCK [ERRFAB [FAB$L_STS], STS$V_SEVERITY;4, BYTE] GEQU
	    .WORST_ERROR [STS$V_SEVERITY]
	THEN
	    WORST_ERROR [0,0,32,0] = .ERRFAB [FAB$L_STS];
	END;

    RETURN;

    END;					! End of routine RENAME_ERROR

%SBTTL 'COPY_RESULTANT_NAME - Copy resultant filename'
ROUTINE COPY_RESULTANT_NAME (
    FAB: REF $FAB_DECL,				! FAB of error
    LOCAL_DSC: REF BLOCK [, BYTE],		! Our local descriptor
    RESULTANT_NAME: REF BLOCK [, BYTE],		! Caller's string
    INTERCEPT_FLAG: REF VECTOR [, LONG]		! Intercept flag
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called from RENAME_ERROR to copy the resultant
!	file name (or best approximation) to either the user's string
!	or our own.
!
! CALLING SEQUENCE:
!
!	string_ptr.wa.v = COPY_RESULTANT_NAME (FAB.rr.r, LOCAL_DSC.wq.r,
!		[RESULTANT_NAME.wt.dx], INTERCEPT_FLAG.wl.r)
!
! FORMAL PARAMETERS:
!
!	FAB		- The FAB referencing the name we want.
!
!	LOCAL_DSC	- The descriptor which will get filled in with
!			  a class S, type T descriptor of the string.
!
!	RESULTANT_NAME	- The user's string, if any.
!
!	INTERCEPT_FLAG	- The flag which we will set if we want to signal
!			  an error so that RENAME_HANDLER will catch it.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! FUNCTION VALUE:
!
!	The address of the user's string, if present, else LOCAL_DSC.
!
! SIDE EFFECTS:
!
!	May signal an error
!
!--

    BEGIN

    LOCAL
	NAM: REF $NAM_DECL,		! RMS NAM
	STRING_PTR,			! Pointer to the string to use
	COPY_STATUS;			! Status from LIB$SCOPY

    !+
    ! Set NAM to point to the NAM block.  Fill in LOCAL_DSC.

    NAM = .FAB [FAB$L_NAM];
    LOCAL_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    LOCAL_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;

    IF .NAM [NAM$B_RSL] NEQ 0	! Resultant filename present?
    THEN
	BEGIN
	LOCAL_DSC [DSC$W_LENGTH] = .NAM [NAM$B_RSL];
	LOCAL_DSC [DSC$A_POINTER] = .NAM [NAM$L_RSA];
	END
    ELSE IF .NAM [NAM$B_ESL] NEQ 0	! Expanded filename present?
    THEN
	BEGIN
	LOCAL_DSC [DSC$W_LENGTH] = .NAM [NAM$B_ESL];
	LOCAL_DSC [DSC$A_POINTER] = .NAM [NAM$L_ESA];
	END
    ELSE				! Use filename from FAB
	BEGIN
	LOCAL_DSC [DSC$W_LENGTH] = .FAB [FAB$B_FNS];
	LOCAL_DSC [DSC$A_POINTER] = .FAB [FAB$L_FNA];
	END;

    !+
    ! If the user has specified RESULTANT_NAME, copy the filename to it.
    !-

    STRING_PTR = .RESULTANT_NAME;
    IF .STRING_PTR NEQA 0
    THEN
	BEGIN
	COPY_STATUS = LIB$SCOPY_DXDX (.LOCAL_DSC, .RESULTANT_NAME);
	IF NOT .COPY_STATUS
	THEN
	    BEGIN
	    INTERCEPT_FLAG [0] = 1;	! Cause handler to intercept signal
	    SIGNAL_STOP (.COPY_STATUS);
	    RETURN .STRING_PTR;		! Won't get executed
	    END;
	END
    ELSE
	STRING_PTR = .LOCAL_DSC;	! Use our own string

    RETURN .STRING_PTR;			! Return pointer to string

    END;				! End of routine COPY_RESULTANT_NAME

%SBTTL 'RENAME_HANDLER - Local condition handler'
ROUTINE RENAME_HANDLER (
    	SIGNAL_ARGS: REF BLOCK [, BYTE], 	! Signal arguments array
    	MECH_ARGS: REF BLOCK [, BYTE],		! Mechanism arguments array
    	ENABLE_ARGS: REF VECTOR [, LONG]	! Enable arguments array
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the condition handler enabled by LIB$RENAME_FILE.
!	If this is not an unwind, and if the INTERCEPT_FLAG enable
!	argument is set, then LIB$SIG_TO_RET is called to convert the
!	signal to a return status.
!
! CALLING SEQUENCE:
!
!	status.wlc.v = RENAME_HANDLER (SIGNAL_ARGS.rl.ra, MECH_ARGS.rl.ra
!					, ENABLE_ARGS.rl.ra)
!
! FORMAL PARAMETERS:
!
!	SIGNAL_ARGS	- The signal argument list.
!
!	MECH_ARGS	- The mechanism argument list.
!
!	ENABLE_ARGS	- The enable argument list.  The one enable
!			  argument is the address of INTERCEPT_FLAG;
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	SS$_RESIGNAL
!
! SIDE EFFECTS:
!
!	May cause an unwind.
!
!--

    BEGIN

    BUILTIN
	AP,	! Argument pointer
	CALLG;	! CALLG instruction

    !+
    ! Determine if this is an unwind.  If not, then if INTERCEPT_FLAG
    ! is set, turn this signal into an unwind.
    !-

    IF .SIGNAL_ARGS [CHF$L_SIG_NAME] NEQU SS$_UNWIND
    THEN
	IF ..ENABLE_ARGS [1]	! Is INTERCEPT_FLAG set?
	THEN
	    CALLG (.AP, LIB$SIG_TO_RET);	! Convert signal to return status
	
    RETURN SS$_RESIGNAL;			! Resignal error

    END;					! End of routine RENAME_HANDLER


END						! End of module LIB$RENAME_FILE

ELUDOM
