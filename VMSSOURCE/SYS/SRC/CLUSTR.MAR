	.IF	NDF,PRMSW
	.TITLE	CLUSTRVEC - Cluster Loadable Code Vectors
	.IFF
	.TITLE	CLUSTRLOA - Cluster Loadable Code
	.ENDC
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; FACILITY:	Executive, system services and fork level code
;
; ABSTRACT:
;	This module contains the entry point vectors used to implement 
;	VMS cluster functions as well as the table used to hook up those
;	vectors to the actual routines.  This module is assembled in two
;	different ways.  If PRMSW is defined the resultant module (CLUSTRLOA)
;	is linked with the actual loadable routines.  If PRMSW is undefined,
;	the resultant module (CLUSTRVEC) is linked with SYS.EXE.
;
; ENVIRONMENT:	Kernel mode, fork level
;
;--
;
; AUTHOR: Steve Beckhardt,	 CREATION DATE:	6-Jan-1983
;
; MODIFIED BY:
;
;	V03-020	DWT0239		David W. Thiel		29-Aug-1984
;		Add CNX$BUGCHECK_CLUSTER entry point.
;
;	V03-019	DWT0207		David W. Thiel		09-Apr-1984
;		Add CNX$POWER_FAIL vector to be called on a
;		recovery from a power failure. Add CNX$DISK_CHANGE
;		so that SYSINIT and CSP can inform connection
;		manager when quorum disk is found.
;
;	V03-018	SRB0117		Steve Beckhardt		18-Mar-1984
;		Added vectors to get to routines for distributed
;		deadlock detection.
;
;	V03-017	DWT0177		David W. Thiel		27-Feb-1984
;		Remove CNX$DEALL_WARMCDRP and CNX$DEALL_MSG_BUF.
;		Add CNX$SHUTDOWN entry point.  Rearrange code to
;		be more conservative about deallocating code under
;		the PC.  Change the trailer PSECT name to be later
;		in the collating sequence.  Add patch space.
;
;	V03-016	ADE0001		Alan D. Eldridge	10-Jan-1983
;		Add EXE$CSP_BRDCST to vectors.
;
;	V03-015	ADE0001		Alan D. Eldridge	10-Jan-1983
;		Add EXE$CSP_COMMAND to vectors and call to CSP$INIT in
;		initialization call.
;
;	V03-014	RSH0051		R. Scott Hanna		11-AUG-1983
;		Add call to CNX$QUORUM_INIT
;
;	V03-013	ROW0197		Ralph O. Weber		29-JUL-1983
;		Add LOADVEC definitions for CNX$PARTNER_RESPOND, a respond to 
;		block transfer service, and CNX$CHANGE_QUORUM, a hook for a 
;		future change QUORUM dynamically service.
;
;	V03-012	ROW0185		Ralph O. Weber		24-JUN-1983
;		Add yet another ton of LOADVEC statements to define entries 
;		for acknowledged message block transfer services.
;
;	V03-011	RNG0011		Rod N. Gamache		13-Jun-1983
;		Add entry points for the distributed GETLKI system service.
;
;	V03-010	JLV0268		Jake VanNoy		27-MAY-1983
;		Add EXE$CSP_BRKTHRU, entry point for cluster broadcasts.
;
;	V03-009	ROW0179		Ralph O. Weber		29-APR-1983
;		Add numerous LOADVEC statements to define entries for new 
;		acknowledged message services and distributed lock manager 
;		support.
;
;	V03-008	PRB0162		Paul R. Beck		14-APR-1983 
;		Add vectors for EXE$ALLOC_CSD, EXE$DEALLOC_CSD, EXE$CSP_CALL.
;
;	V03-007	JWH0212		Jeffrey W. Horn		13-Apr-1983
;		Fix mistype in JWH0207.
;
;	V03-006	JWH0207		Jeffrey W. Horn		12-Apr-1983
;		Use SLVTAB macro to generate load-code prologue.
;
;	V03-005	ROW0174		Ralph O. Weber		29-MAR-1983
;		Add LOADVEC definitions for CNX$ALLOC_CDRP, CNX$SEND_MSG, 
;		CNX$SEND_MSG_RESP, and CNX$SEND_MSG_RSPID; all routines which 
;		the common journaling facility must call to perform cluster 
;		journaling.
;
;	V03-004	DWT0087		David W. Thiel		23-Mar-1983
;		Correct previous modification to return valid
;		status after initialization.
;
;	V03-003	SRB0069		Steve Beckhardt		11-Mar-1983
;		Added support to allow SYSENQDEQ to be linked with
;		CLUSTRLOA for debugging purposes.  Removed cell
;		LCK$GL_RQSEQNM (it is now in SYSCOMMON).
;
;	V03-002	DWT0070		David W. Thiel		28-Jan-1983
;		Setup to initialize automatically on being loaded.
;		Adjust psects and alignment.
;

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

	.IF	DF,PRMSW
	$DYNDEF				; Data structure names
	.IF_TRUE_FALSE
	$SLVDEF				; Loadable vector definitions

;
; EQUATED SYMBOLS:
;

;
; VECTOR LIST
;

	.IF_TRUE			; For inclusion with loadable code

	.PSECT	___999,4		; Octaword alignment

PATCH_BEGIN:
	.BLKB	256			; Patch space
PATCH_END:

CLULOA_END:				; End of loadable code

	.PSECT	$$$000,4

CLULOA_START:
	SLVTAB	END	=	CLULOA_END, -
		INITRTN	=	CLULOA_INIT, -
		SUBTYP	=	DYN$C_LC_CLS, -
		FACILITY=	<CLUSTER>

	.IF_FALSE			; For inclusion with SYS.EXE
	.PSECT	$$$500,LONG

	.ALIGN	LONG
CLU$GL_CLUB::				; Address of CLUster Block
	.LONG	0
CLU$GL_CLUSVEC::			; Address of Cluster System vector
	.LONG	0
CLU$GW_MAXINDEX::			; Maximum index+1 in Cluster System vector
	.WORD	0
CLU_RSB:				; Used to make unloaded entry a NOP
	RSB

	.ALIGN	LONG
CLU$AL_LOAVEC::				; New symbol to replace next
CLS$AL_LOAVEC::
	.IF_TRUE_FALSE

	LOADVEC	CLU$GL_LOA_ADDR,1,,CLULOA_START	; Cluster code load address
	LOADVEC	LCK$SND_CVTREQ
	LOADVEC	LCK$SND_LOCKREQ
	LOADVEC	LCK$SND_GRANTED
	LOADVEC	LCK$SND_DEQGR
	LOADVEC	LCK$SND_DEQCV
	LOADVEC	LCK$SND_DEQWT
	LOADVEC	LCK$SND_BLKING
	LOADVEC	LCK$SND_RMVDIR
	LOADVEC	LCK$SND_TIMESTAMP_RQST
	LOADVEC	LCK$SND_SRCHDLCK
	LOADVEC	LCK$SND_DLCKFND
	LOADVEC	LCK$SND_REDO_SRCH
	LOADVEC	LCK$CVT_ID_TO_LKB
	LOADVEC	CNX$ALLOC_CDRP
	LOADVEC	CNX$ALLOC_CDRP_ONLY
	LOADVEC	CNX$ALLOC_WARMCDRP
	LOADVEC	CNX$ALLOC_WARMCDRP_CSB
	LOADVEC	CNX$DEALL_MSG_BUF_CSB
	LOADVEC	CNX$DEALL_WARMCDRP_CSB
	LOADVEC	CNX$INIT_CDRP
	LOADVEC	CNX$SEND_MNY_MSGS
	LOADVEC	CNX$SEND_MSG
	LOADVEC	CNX$SEND_MSG_CSB
	LOADVEC	CNX$SEND_MSG_RESP
	LOADVEC	CNX$SEND_MSG_RSPID
	LOADVEC	CNX$BLOCK_XFER
	LOADVEC	CNX$BLOCK_XFER_IRP
	LOADVEC	CNX$PARTNER_INIT_CSB
	LOADVEC	CNX$BLOCK_READ
	LOADVEC	CNX$BLOCK_READ_IRP
	LOADVEC	CNX$BLOCK_WRITE
	LOADVEC	CNX$BLOCK_WRITE_IRP
	LOADVEC	CNX$PARTNER_FINISH
	LOADVEC	CNX$PARTNER_RESPOND
	LOADVEC	CNX$CHANGE_QUORUM
	LOADVEC	CNX$SHUTDOWN
	LOADVEC	CNX$POWER_FAIL,,CLU_RSB
	LOADVEC CNX$DISK_CHANGE
	LOADVEC	CNX$BUGCHECK_CLUSTER
	LOADVEC	EXE$ALLOC_CSD
	LOADVEC	EXE$DEALLOC_CSD
	LOADVEC EXE$CSP_BRDCST
	LOADVEC	EXE$CSP_CALL
	LOADVEC	EXE$CSP_COMMAND
	LOADVEC	EXE$CSP_BRKTHRU
	LOADVEC	LKI$SND_STDREQ
	LOADVEC	LKI$SND_BLKING
	LOADVEC	LKI$SND_BLKBY
	LOADVEC	LKI$SND_LOCKS

	.IF_TRUE			; End of vector list
	.LONG	-1

CLULOA_INIT:				; Initialization code
	BSBW	CNX$INIT		; Do initializtion
	BSBW	CNX$QUORUM_INIT		; Perform quorum file initialization
	BLBC	R0,20$			; Branch on error
	BSBW	CSP$INIT		; Do load CSP code initialization

	; If the $ENQ and $DEQ system services (module SYSENQDEQ) are linked
	; with this (for debugging purposes) then hook up the system service
	; vectors to point these routines.
	; NOTE:  The SYSGEN parameter SYSPAGING MUST be set to 0 for this
	; to work.

	.WEAK	EXE$$ENQ,EXE$$DEQ

	TSTL	#EXE$$ENQ		; Is loadable $ENQ service present?
	BEQL	10$			; Not linked with this module
	JSB	G^INI$WRITABLE		; Make system writeable
	MOVW	B^30$,G^EXE$ENQ+2	; Move JMP @# to start of resident
	MOVW	B^30$,G^EXE$DEQ+2	; services
	MOVAB	W^EXE$$ENQ+2,G^EXE$ENQ+4; Move addresses of loadable services
	MOVAB	W^EXE$$DEQ+2,G^EXE$DEQ+4; to complete JMP @# instructions
	JSB	G^INI$RDONLY		; Make system read only again

10$:	MOVAB	G^EXE$GL_NONPAGED+4,R3	; Address of non-paged pool listhead
	MOVAB	W^CLULOA_START,R0	; Address of block to deallocate
	MOVZWL	#CLULOA_INIEND-CLULOA_START,R1	; Length of block to deallocate
	SUBW3	R1,8(R0),W^CLULOA_INIEND+8	; Compute new length
	BRW	DEALLOCATE		; Deallocate this piece of memory

20$:	RSB				; Return

30$:	JMP	G^EXE$ENQ		; Absolute jump instruction

; Descriptor for patch space available in this module
; Note that this space is deallocated when the code is loaded
;
CNX$PATCH::
	.WORD	PATCH_END-PATCH_BEGIN
	.WORD	0
	.LONG	PATCH_BEGIN

	.PSECT	$$$010,4		; Octaword alignment

; When initialization is complete and the initialization code is
; deleted, this block is left at the head of the remaining code.
;
	.ALIGN	4
CLULOA_INIEND:				; End of initialization code
	SLVTAB	END	=	CLULOA_END, -
		SUBTYP	=	DYN$C_LC_CLS, -
		FACILITY=	<CLUSTER>


DEALLOCATE:
	JSB	G^EXE$DEALLOCATE	; Free initialization code
	MOVZWL	S^#SS$_NORMAL,R0	; Set success status
	RSB				; Return from initialization

	.ENDC

	.END
