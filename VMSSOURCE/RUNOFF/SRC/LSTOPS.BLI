%TITLE 'O/P text to left of document'
MODULE lstops (	IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					    NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:	DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	Prefixes a line with optional listing information.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	 CREATION DATE: December, 1978
!


%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	010	REM00010	Ray Marshall	31-May-1984
!		Find tuning -- made output lines numbers start at 1 instead
!		  of starting at 0.
!
!	009	REM00009	Ray Marshall	16-May-1984
!		Added support for outputting the output line number.
!
!	008	RER00008	Ron Randall	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--


%SBTTL 'Module Level Declarations'

!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    lstops : NOVALUE,
    iseque : NOVALUE,
    oseque : NOVALUE;

!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! EXTERNAL REFERENCES:
!
EXTERNAL
    FRA : FIXED_STRING,
    GCA : GCA_DEFINITION,
    PHAN : PHAN_DEFINITION,
    TSF : TSF_DEFINITION;

EXTERNAL ROUTINE
    CONVBB;


%SBTTL 'LSTOPS -- main control routine'
GLOBAL ROUTINE lstops (option_list, blank_line) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used to format the columns that preceed the normal
!	document.  These columns typically contain change bars, the draft flag,
!	sequence numbers, and/or the entire document is shifted to the right.
!
!	These columns have to be set up for each and every line that RUNOFF
!	writes.  In some cases, however, what is wanted is not the actual
!	options, but simply sufficient spaces to skip over them; that can
!	occur, for example, when LOUT has to overprint the line to do
!	underlining, etc.  LSTOPS generates the requested information, or
!	spaces, as applicable.
!
!	NOTE: This entire routine can be replaced by a simple "RETURN"
!	      if the listing options are not wanted ever.
!
! FORMAL PARAMETERS:
!
!	OPTION_LIST indicates which listing options are to be processed.
!	BLANK_LINE is TRUE if the line is a blank one, FALSE otherwise.
!
! IMPLICIT INPUTS:
!
!	FRA is implicitly set up to point to where the options are to be
!	generated.
!	TSF describes the record for which the options are to be generated.
!
! IMPLICIT OUTPUTS:
!
!	The listing options are written into FRA, thereby lengthening
!	that fixed string.
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    LOCAL
	BARS;

    IF 	.BLANK_LINE
    THEN

	!This is a quick test to avoid lots of processing for empty lines.
	IF  .OPTION_LIST EQL LSTOPS_NONE
	THEN
	    !Put nothing on blank lines.
	    RETURN;

    !Decide which change bar information to use: that which applies to blank lines,
    !or that which applies to text on lines.
    IF  .BLANK_LINE
    THEN
	!Use the change bar information that applies to white space.
	BARS = .TSF_BARS
    ELSE
	!Use the change bar information that applies to text.
	BARS = .TSF_H_BARS;

    IF 	NOT .BLANK_LINE			!(Avoid shifting blank lines to the right because of /RIGHT)
	OR (.BARS AND .OPTION_LIST<BAR__>)	!
	OR (.GCA_DEBUG_CND AND .OPTION_LIST<CND__> AND (.TSF_DRAFT_FLAG NEQ %C' '))	!
	OR (.GCA_CMD_ISQ AND .OPTION_LIST<ISQ__>)
	OR (.GCA_CMD_OSQ AND .OPTION_LIST<OSQ__>)
    THEN
    !Change bars or sequence number or draft flag requested.
	BEGIN

	IF  .GCA_CMD_RIT		!(This won't get done for blank lines to which nothing else applies)
	THEN
	!Shift output to the right, as requested.

	    INCR I FROM 1 TO .PHAN_RIGHT DO
		FS_WCHAR (FRA, %C' ');

	IF .gca_cmd_isq THEN			! User said:  /SEQUENCE.
	    iseque (.option_list<isq__>);

	IF .gca_cmd_osq THEN			! User said:
	    oseque (.option_list<osq__>);	! /DEC_INTERNAL=OUTPUT_LINE_NUMBER

	IF  .GCA_DEBUG_CND
	THEN
	!Output the draft flag.
	    BEGIN
	    FS_WCHAR (FRA, %C' ');!Single space before draft flag.

	    IF 	.OPTION_LIST<CND__>
	    THEN
		!User wants to see the draft flag, output it.
		FS_WCHAR (FRA, .TSF_DRAFT_FLAG)
	    ELSE
		!User does not want to see the draft flag, output a space.
		FS_WCHAR (FRA, %C' ');

	    FS_WCHAR (FRA, %C' ');!Single space after draft flag.
	    END;

	!Process change bar field.
	IF  (.BARS			!Change bars wanted?
	    AND .OPTION_LIST<BAR__>)
	    OR
	    (.GCA_EVER_BARS		!Change bars ever seen?
	     AND NOT .BLANK_LINE)	!In this case output something.
	THEN
	    BEGIN

	    !Output the change bar.
	    IF 	NOT (.OPTION_LIST<BAR__> AND .BARS)
	    THEN
		!Don't want change bar at all.
		FS_WCHAR (FRA, %C' ')
	    ELSE
		FS_WCHAR (FRA, .TSF_BAR_CHAR);

	    FS_WCHAR (FRA, %C' ');	!Two spaces after the change bar field.
	    FS_WCHAR (FRA, %C' ');
	    END;

	END;

    END;					!End of LSTOPS


%SBTTL 'ISEQUE -- O/P seq. number or spaces'
ROUTINE iseque (sequence) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	ISEQUE either generates the input sequence number on the record, or
!	else fills the spot with spaces.
!
! FORMAL PARAMETERS:
!
!	If SEQUENCE is TRUE, the sequence number is provided; if FALSE,
!	the spot is space filled.
!
! IMPLICIT INPUTS:
!
!	It is assumed that FRA is set up to point to the area where
!	the sequence number is to go.
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN

    IF 	NOT .SEQUENCE
    THEN
    !Caller doesn't want sequence numbers though.
    !Fill sequence number field with spaces.

	INCR I FROM 1 TO 11 DO
	    FS_WCHAR (FRA, %C' ')

    ELSE
    !Caller does want the sequence numbers.
	BEGIN
	LOCAL
	    FILL,
	    KHARS : VECTOR [10],
	    KHAR_COUNT;

	CONVBB (.TSF_ISEQN, KHARS, KHAR_COUNT, 10);	!Convert input sequence number to character.

	!For honest-to-goodness
	IF  .TSF_SEQN_FLAG			!SOS style sequence numbers
	THEN 					!zero-fill on the left.
	    FILL = %C'0'
	ELSE 					!Otherwise,
	    FILL = %C' ';			!space-fill the record counter.

	INCR I FROM 1 TO (5 - .KHAR_COUNT) DO 	!Put in fill characters (spaces or '0's)
	    FS_WCHAR (FRA, .FILL);

	DECR I FROM .KHAR_COUNT TO 1 DO 	!Output record/sequence number.
	    FS_WCHAR (FRA, .KHARS [.I - 1]);

	FS_WCHAR (FRA, %C'/');			!Slash separating line and page numbers.
	CONVBB (.TSF_IPAGEN, KHARS, KHAR_COUNT, 10);	!Convert page number.

	INCR I FROM 1 TO (3 - .KHAR_COUNT) DO 	!Pad page counter.
	    FS_WCHAR (FRA, %C' ');

	DECR I FROM .KHAR_COUNT TO 1 DO 	!Output page number.
	    FS_WCHAR (FRA, .KHARS [.I - 1]);

	FS_WCHAR (FRA, %C' ');			!Two spaces before whatever follows.
	FS_WCHAR (FRA, %C' ');
	END;

    END;					!End of ISEQUE

%SBTTL 'OSEQUE -- O/P O/P line number or spaces'
ROUTINE oseque (sequence) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	OSEQUE either generates the output line number on the record, or
!	else fills the spot with spaces.
!
! FORMAL PARAMETERS:
!
!	If SEQUENCE is TRUE, the sequence number is provided; if FALSE,
!	the spot is space filled.
!
! IMPLICIT INPUTS:
!
!	It is assumed that FRA is set up to point to the area where
!	the sequence number is to go.
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN

    IF 	NOT .sequence THEN

    !Caller doesn't want line numbers, so fill line number field with spaces.

	IF .diag2_14 THEN
	    INCR i FROM 1 TO 10 DO FS_WCHAR (fra, %C' ')
	ELSE
	    INCR i FROM 1 TO 5 DO FS_WCHAR (fra, %C' ')

    ELSE	    !Caller does want the sequence numbers.
	BEGIN
	LOCAL
	    fill,
	    khars : VECTOR [10],
	    khar_count;

	! For honest-to-goodness SOS style sequence numbers:

	IF  .TSF_SEQN_FLAG
	THEN 				    ! zero-fill on the left.
	    FILL = %C'0'
	ELSE 				    ! Otherwise,
	    FILL = %C' ';		    ! space-fill the record counter.

	IF .diag2_14 THEN
	    BEGIN
	    CONVBB ( (.gca_page_cnt + 1)    ! Convert "real" page number.
		    ,khars
		    ,khar_count
		    ,10 );

	    INCR i FROM 1 TO (4 - .khar_count) DO 	!Pad page counter.
		FS_WCHAR (fra, %C' ');

	    DECR i FROM .khar_count TO 1 DO 	!Output page number.
		FS_WCHAR (fra, .khars [.i - 1]);

	    FS_WCHAR (fra, %C'.')			! Dot separating line and page numbers.
	    END;

	CONVBB ( .phan_lines_tp+1    ! Convert line number to character string
		,khars
		,khar_count
		,10 );

	INCR i FROM 1 TO (3 - .khar_count) DO 	!Put in fill characters (spaces or '0's)
	    FS_WCHAR (fra, .fill);

	DECR i FROM .khar_count TO 1 DO 	!Output line number.
	    FS_WCHAR (fra, .khars [.i - 1]);

	FS_WCHAR (fra, %C' ');			!Two spaces before whatever follows.
	FS_WCHAR (fra, %C' ');
	END;

    END;					!End of OSEQUE
END						!End of module
ELUDOM
