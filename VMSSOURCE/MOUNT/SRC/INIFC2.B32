MODULE INIFC2 (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	These routines create and initialize a file control block
!	from the given file header.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines. These routines must be called in
!	kernel mode.

!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  14-Dec-1976  16:48
!
! MODIFIED BY:
!
!	V03-006	ACG0440		Andrew C. Goldstein,	23-Jul-1984  13:32
!		Add ref count and classification valid flag to ORB in the FCB
!
!	V03-005	CDS0003		Christian D. Saether	 1-May-1984
!		Set up FCB$L_LOCKBASIS.
!
!	V03-004	LMP0221		L. Mark Pilant,		27-Apr-1984  11:17
!		Add support for an ORB within an FCB.
!
!	V03-003	ACG0408		Andrew C. Goldstein,	22-Mar-1984  21:59
!		Make APPLY_RVN and DEFAULT_RVN macros
!
!	V03-002	CDS0002		Christian D. Saether	18-Jan-1984
!		Modify interface to APPLY_RVN.
!
!	V03-001	CDS0001		Christian D. Saether	 8-Dec-1983
!		Use MOUDEF instead of FCPDEF.
!
!	V02-003	ACG0241		Andrew C. Goldstein,	11-Dec-1981  22:53
!		Make updating of FCB common code, add handling
!		of directory bit
!
!	V02-002	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:26
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:MOUDEF.B32';


FORWARD ROUTINE
	INIT_FCB2	: NOVALUE,	! initialize FCB
	FILL_FCB	: NOVALUE;	! fill in basic FCB fields

GLOBAL ROUTINE INIT_FCB2 (FCB, HEADER) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine initializes the given FCB according to the given
!	file header.
!
! CALLING SEQUENCE:
!	INIT_FCB (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: FCB address
!	ARG2: header address
!
! IMPLICIT INPUTS:
!	HEADER_LBN contains LBN of header block
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCB initialized
!
!--

BEGIN

MAP
	FCB		: REF BBLOCK,	! FCB argument
	HEADER		: REF BBLOCK;	! file header arg

LINKAGE
	L_MAP_POINTER	= JSB :
			  GLOBAL (COUNT = 6, LBN = 7, MAP_POINTER = 8);

GLOBAL REGISTER
	COUNT		= 6,		! retrieval pointer count
	LBN		= 7,		! retrieval pointer LBN
	MAP_POINTER	= 8;		! pointer to scan map area

EXTERNAL ROUTINE
	GET_MAP_POINTER	: L_MAP_POINTER; ! get value of file map pointer


! Scan the map area. Count up the file size from the retrieval pointers.
!

MAP_POINTER = .HEADER + .HEADER[FH2$B_MPOFFSET]*2;
FCB[FCB$L_FILESIZE] = 0;

UNTIL .MAP_POINTER GEQA .HEADER + (.HEADER[FH2$B_MPOFFSET] + .HEADER[FH2$B_MAP_INUSE]) * 2
DO
    BEGIN
    GET_MAP_POINTER ();
    FCB[FCB$L_FILESIZE] = .FCB[FCB$L_FILESIZE] + .COUNT;
    END;

! Now set up the rest of the fields.
!

FILL_FCB (.FCB, .HEADER);

END;					! end of routine INIT_FCB

GLOBAL ROUTINE FILL_FCB (FCB, HEADER) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine updates the file attributes of the specified FCB,
!	if any, with the file attributes of the given header. The file size
!	is preserved.
!
!
! CALLING SEQUENCE:
!	FILL_FCB (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of FCB
!	ARG2: address of file header
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCB is updated if it exists
!
!--

BEGIN

BUILTIN
	REMQUE,
	ROT;

LOCAL
	FCB_ORB		: REF BBLOCK,	! Address of the ORB within the FCB
	DUMMY;				! dummy target for REMQUE

MAP
	FCB		: REF BBLOCK,	! FCB arg
	HEADER		: REF BBLOCK;	! file header arg

LINKAGE
	L_MAP_POINTER	= JSB :
			  GLOBAL (COUNT = 6, LBN = 7, MAP_POINTER = 8);

GLOBAL REGISTER
	COUNT		= 6,		! retrieval pointer count
	LBN		= 7,		! retrieval pointer LBN
	MAP_POINTER	= 8;		! pointer to scan map area

EXTERNAL
	CURRENT_RVN,			! RVN of current volume
	CURRENT_VCB	: REF BBLOCK,	! VCB of current volume
	HEADER_LBN;			! LBN of file header

EXTERNAL
	EXE$GL_DYNAMIC_FLAGS	: BITVECTOR ADDRESSING_MODE (ABSOLUTE);
					! Dynamic SYSGEN flags

EXTERNAL LITERAL
	EXE$V_CLASS_PROT;		! Set if doing non-discretionary checks

EXTERNAL ROUTINE
	GET_MAP_POINTER	: L_MAP_POINTER; ! get value of file map pointer

! Note the address of the ORB within the FCB.

FCB_ORB = FCB[FCB$R_ORB];

! Get the known constants and the simple stuff from the file header
! (i.e., header LBN, file ID, starting VBN, file owner and file protection).
!

FCB[FCB$L_HDLBN]	= .HEADER_LBN;
FCB[FCB$W_FID_NUM]	= .HEADER[FH2$W_FID_NUM];
FCB[FCB$W_FID_SEQ]	= .HEADER[FH2$W_FID_SEQ];
FCB[FCB$W_FID_RVN]	= .HEADER[FH2$W_FID_RVN];
FCB[FCB$W_SEGN]		= .HEADER[FH2$W_SEG_NUM];

CH$FILL (0, ORB$C_LENGTH, .FCB_ORB);
FCB_ORB[ORB$L_OWNER]	= .HEADER[FH2$L_FILEOWNER];
FCB_ORB[ORB$V_PROT_16]	= 1;
FCB_ORB[ORB$W_PROT]	= .HEADER[FH2$W_FILEPROT];
FCB_ORB[ORB$V_MODE_VECTOR] = 1;
FCB_ORB[ORB$L_MODE_PROTL] = NOT .HEADER[FH2$B_ACC_MODE];
FCB_ORB[ORB$L_MODE_PROTH] = -1;

$ASSUME (FH2$S_CLASS_PROT EQL ORB$S_MIN_CLASS);
$ASSUME (FH2$S_CLASS_PROT EQL ORB$S_MAX_CLASS);

IF .EXE$GL_DYNAMIC_FLAGS[EXE$V_CLASS_PROT]
AND .HEADER[FH2$B_IDOFFSET]*2 GTRU FH2$C_LENGTH
THEN
    BEGIN
    CH$MOVE (FH2$S_CLASS_PROT, HEADER[FH2$R_CLASS_PROT], FCB_ORB[ORB$R_MIN_CLASS]);
    CH$MOVE (FH2$S_CLASS_PROT, HEADER[FH2$R_CLASS_PROT], FCB_ORB[ORB$R_MAX_CLASS]);
    FCB_ORB[ORB$V_CLASS_PROT] = 1;
    END;

FCB[FCB$W_VERSIONS]	= .BBLOCK [HEADER[FH2$W_RECATTR], FAT$W_VERSIONS];
APPLY_RVN (FCB[FCB$W_FID_RVN], .CURRENT_RVN);
(FCB[FCB$L_LOCKBASIS])<0,16> = .FCB[FCB$W_FID_NUM];
(FCB[FCB$L_LOCKBASIS])<16,8> = .FCB[FCB$B_FID_NMX];
(FCB[FCB$L_LOCKBASIS])<24,8> = .FCB[FCB$B_FID_RVN];

IF .HEADER[FH2$V_SPOOL] THEN FCB[FCB$V_SPOOL] = 1;

FCB[FCB$L_EFBLK]	= ROT (.BBLOCK[HEADER[FH2$W_RECATTR], FAT$L_EFBLK], 16);
IF  .FCB[FCB$L_EFBLK] NEQ 0
AND .BBLOCK[HEADER[FH2$W_RECATTR], FAT$W_FFBYTE] EQL 0
THEN FCB[FCB$L_EFBLK] = .FCB[FCB$L_EFBLK] - 1;

IF .FCB[FCB$L_EFBLK] GTR .FCB[FCB$L_FILESIZE]
THEN FCB[FCB$L_EFBLK] = .FCB[FCB$L_FILESIZE];

! If the directory bit is being turned off, credit one to the volume's
! directory LRU.
!

IF .FCB[FCB$V_DIR]
AND NOT .HEADER[FH2$V_DIRECTORY]
THEN
    BEGIN
    FCB[FCB$V_DIR] = 0;
    CURRENT_VCB[VCB$B_LRU_LIM] = .CURRENT_VCB[VCB$B_LRU_LIM] + 1;
    IF .FCB[FCB$W_ACNT] EQL 0
    THEN REMQUE (.FCB, DUMMY);
    END;

! Now scan the map area. Get the starting LBN if the file is contiguous.
!

MAP_POINTER = .HEADER + .HEADER[FH2$B_MPOFFSET]*2;
GET_MAP_POINTER ();
FCB[FCB$L_STLBN] = 0;
IF .HEADER[FH2$V_CONTIG]
THEN FCB[FCB$L_STLBN] = .LBN;

END;					! end of routine FILL_FCB

END
ELUDOM
