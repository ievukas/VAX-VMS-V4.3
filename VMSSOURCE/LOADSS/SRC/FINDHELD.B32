%TITLE	'FINDHELD - SYS$FIND_HELD loadable system service'
MODULE FINDHELD (IDENT = 'V04-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: EXECUTIVE, SYSTEM SERVICES
!
! ABSTRACT:
!
!	This module contains the loadable system service SYS$FIND_HELD.
!
! ENVIRONMENT:
!
!	VAX/VMS native mode, user, supervisor, or exec modes.
!
!--
!
! AUTHOR:  Andrew C. Goldstein, CREATION DATE:  16-Nov-1982  18:51
!
! MODIFIED BY:
!
!	V03-004 TMK0001		Todd M. Katz		22-Oct-1983
!		The name of the real system service entry point for
!		$FINISH_RDB has been changed from EXE$FINISH_RDB to
!		EXE$$FINISH_RDB. This change was required because the
!		system service could no longer be reached directly from the
!		executive mode system service dispatcher.
!
!	V03-003 RSH0039		R. Scott Hanna		21-Jun-1983
!		Changes to open the rights database as a process
!		permanent file when there is no image active.
!
!	V03-002	GAS0126		Gerry Smith		26-May-1983
!		Put SYS$FIND_HELD into its own module.  This is 
!		necessary so that LOGINOUT can reference it before
!		the loadable system services are loaded, at boot time.
!
!	V03-001	RSH0008		R. Scott Hanna		01-Mar-1983
!		Changed SYS$CREATE_RDB to call EXE$SET_RDIPTR.
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';

FORWARD ROUTINE
	SYS$FIND_HELD;

EXTERNAL ROUTINE
	EXE$OPEN_RDB	: ADDRESSING_MODE (ABSOLUTE),
	EXE$CLOSE_RDB	: NOVALUE ADDRESSING_MODE (ABSOLUTE),
	EXE$$FINISH_RDB	: ADDRESSING_MODE (ABSOLUTE);

BUILTIN
	PROBER,
	PROBEW;


GLOBAL ROUTINE SYS$FIND_HELD (HOLDER, ID, ATTRIB, CONTXT) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine searches the rights database for all identifiers
!	held by the specified holder, and returns their identifier and
!	attributes.
!
! CALLING SEQUENCE:
!	SYS$FIND_HELD (HOLDER, ID, ATTRIB, CONTXT)
!
! INPUT PARAMETERS:
!	HOLDER:	 address of a quadword which specifies the holder
!		 id of the records to find
!	CONTXT:  (optional) address of a longword containing the
!		 record stream context. initially should be zero,
!		 value output first call, value input on subsequent
!		 calls.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	ID:	(optional) address to return the identifier longword
!	ATTRIB:	(optional) address to return the holder attributes longword
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Status of operation
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

LOCAL
	LOC_HOLDER	: REF VECTOR,	! local copy of HOLDER
	HOLDER_ID	: VECTOR [2],	! local copy of holder id quadword
	LOC_ID		: LONG,		! local copy of ID
	LOC_ATTRIB	: LONG,		! local copy of ATTRIB
	LOC_CONTXT	: LONG,		! local copy of CONTXT
	STATUS		: LONG,		! general status value
	CONTINUE	: LONG,		! flag indicating continuation
	CLOSE		: LONG,		! call EXE$CLOSE_RDB flag
	RAB		: $RAB_DECL,	! RAB for file I/O
	REC_BUFFER	: $BBLOCK [KGB$K_HOLD_RECORD];
					! record buffer to read records

LABEL
	RDB_OPEN;			! rights database is open in this block

! Validate parameters
!

LOC_HOLDER = .HOLDER;
IF NOT PROBER (%REF(0), %REF(8), .LOC_HOLDER) THEN RETURN SS$_ACCVIO;
HOLDER_ID[0] = .LOC_HOLDER[0];
HOLDER_ID[1] = .LOC_HOLDER[1];
IF .HOLDER_ID[0] GTRU UIC$K_MAX_UIC OR .HOLDER_ID[1] NEQU 0
THEN
    RETURN SS$_IVIDENT;

LOC_ID = .ID;
IF .LOC_ID NEQU 0 AND NOT PROBEW (%REF(0), %REF(4), .LOC_ID)
THEN
    RETURN SS$_ACCVIO;

LOC_ATTRIB = .ATTRIB;
IF .LOC_ATTRIB NEQU 0 AND NOT PROBEW (%REF(0), %REF(4), .LOC_ATTRIB)
THEN
    RETURN SS$_ACCVIO;

LOC_CONTXT = .CONTXT;
IF .LOC_CONTXT NEQU 0 AND NOT PROBEW (%REF(0), %REF(4), .LOC_CONTXT)
THEN
    RETURN SS$_ACCVIO;

! Open the rights database for reading. Record whether this is an initial
! call or a continuation by checking if the context is zero or not.
!

CONTINUE = (IF .LOC_CONTXT NEQU 0 THEN ..LOC_CONTXT NEQU 0 ELSE 0);

$RAB_INIT (RAB = RAB,
	   RAC = KEY,
	   KRF = 1,
	   KSZ = KGB$S_HOLDER,
	   KBF = HOLDER_ID[0],
	   ROP = (WAT, NLK, LIM),
	   USZ = KGB$K_HOLD_RECORD,
	   UBF = REC_BUFFER
	   );
STATUS = EXE$OPEN_RDB (.LOC_CONTXT, 0, RAB[RAB$W_ISI], CLOSE);
IF NOT .STATUS THEN RETURN .STATUS;

RDB_OPEN:
    BEGIN

    ! On an initial call, do an indexed $GET to position to the first
    ! holder record. Otherwise we do sequential gets.
    !

    IF NOT .CONTINUE
    THEN
	BEGIN
	STATUS = $GET (RAB = RAB);
	IF .STATUS EQLU RMS$_RNF THEN STATUS = SS$_NOSUCHID;
	IF NOT .STATUS
	THEN
	    BEGIN
	    EXE$$FINISH_RDB (.LOC_CONTXT);
	    LEAVE RDB_OPEN;
	    END;
	END
    ELSE
	BEGIN
	RAB[RAB$B_RAC] = RAB$C_SEQ;
	STATUS = $GET (RAB = RAB);
	IF .STATUS EQLU RMS$_EOF OR .STATUS EQLU RMS$_OK_LIM
	THEN
	    STATUS = SS$_NOSUCHID;
	IF NOT .STATUS
	THEN
	    BEGIN
	    EXE$$FINISH_RDB (.LOC_CONTXT);
	    LEAVE RDB_OPEN;
	    END
	END;

    IF .LOC_ID NEQU 0 THEN .LOC_ID = .REC_BUFFER[KGB$L_IDENTIFIER];
    IF .LOC_ATTRIB NEQU 0 THEN .LOC_ATTRIB = .REC_BUFFER[KGB$L_ATTRIBUTES];

    STATUS = SS$_NORMAL;
    END;

! Close the rights database if there is no image
!

IF .CLOSE THEN EXE$CLOSE_RDB();
RETURN .STATUS
END;					! End of routine SYS$FIND_HELD

END
ELUDOM
