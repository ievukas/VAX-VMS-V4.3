MODULE showmisc (IDENT = 'V04-000',
		  ADDRESSING_MODE (EXTERNAL = GENERAL)) =

BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:  SHOW utility
!
! ABSTRACT:
!	This module contains the option routines for SHOW RMS, SHOW 
!       WORKING_SET, SHOW ACCOUNTING
!
! ENVIRONMENT:
!	VAX native, user mode.
!
! AUTHOR:  Gerry Smith		 CREATION DATE:  25-Jun-1982
!
! MODIFIED BY:
!
!	V03-007	RAS0281		Ron Schaefer		27-Mar-1984
!		Add Network Block Count display to SHOW RMS;
!		adjust display alignments.
!
!	V03-006	MCN0155		Maria del C. Nasr	01-Mar-1984
!		The offset to the disallow flags is from the start of
!		the PCB structure, and not the longword.
!
!	V03-005	MCN0150		Maria del C. Nasr	09-Feb-1984
!		Make display for SHOW WORKING_SET values larger.
!
!	V03-004	GAS0148		Gerry Smith	27-Jun-1983
!		Update SHOW ACCOUNTING to display all classes
!		of accounting.
!
!	V03-003	GAS0125		Gerry Smith	20-Apr-1983
!		Fix displays for SHOW RMS_DEFAULT
!
!	V03-002	GAS0107		Gerry Smith	 8-Feb-1983
!		Extend the output field width for SHOW WORKING_SET.
!
!	V03-001	GAS0105		Gerry Smith	31-Jan-1983
!		Fix the output of SHOW RMS so that the multi-buffer
!		counts come out correctly.
!
!--


!
! Include files
!

LIBRARY 'SYS$LIBRARY:LIB';		! VAX/VMS system definitions
REQUIRE 'SRC$:SHOWDEF';			! SHOW common definitions


!
! Table of contents
!

FORWARD ROUTINE
    show$accounting : NOVALUE,
    show$rms_default : NOVALUE,
    show$working_set : NOVALUE;

EXTERNAL
    exe$gl_acmflags,
    sys$gb_dfmbfsur,
    sys$gb_dfmbfsmt,
    sys$gb_dfmbfsdk,
    sys$gb_dfmbfrel,
    sys$gb_dfmbfidx,
    sys$gb_dfmbfhsh,
    sys$gb_dfmbc,
    sys$gb_dfnbc,
    sys$gw_rmsextend,
    sys$gb_rmsprolog,
    pio$gb_dfmbfsur,
    pio$gb_dfmbfsmt,
    pio$gb_dfmbfsdk,
    pio$gb_dfmbfrel,
    pio$gb_dfmbfidx,
    pio$gb_dfmbfhsh,
    pio$gb_dfmbc,
    pio$gb_dfnbc,
    pio$gw_rmsextend,
    pio$gb_rmsprolog;

EXTERNAL ROUTINE
    show$write_line : NOVALUE;

!
! Declare some OWN storage, string descriptors which describe the various
! types of accounting.
!
OWN
    acc_type : VECTOR[10] INITIAL
    	       (%ASCID '      PROCESS        any process termination',
    		%ASCID '      IMAGE          image execution',
    		%ASCID '      INTERACTIVE    interactive job termination',
		%ASCID '      LOGIN_FAILURE  login failures',
    		%ASCID '      SUBPROCESS     subprocess termination',
		%ASCID '      DETACHED       detached job termination',
		%ASCID '      BATCH          batch job termination',
    		%ASCID '      NETWORK        network job termination',
    		%ASCID '      PRINT          all print jobs',
    		%ASCID '      MESSAGE        user messages'
    	       );


GLOBAL ROUTINE show$accounting : NOVALUE =
BEGIN

!---
!
! This routine performs the SHOW ACCOUNTING function.  A copy of the
! accounting flags is brought into local memory, and based on the 
! bit setting, the current accounting options are displayed.
!
!---

LOCAL
    acmflags : BITVECTOR[32];		! Temp storage for accounting flags

!
! Get a copy of the accounting flags, so that the flag settings are consistent
! for the duration of this invocation of SHOW ACCOUNTING.
!
acmflags = .exe$gl_acmflags;

!
! Determine if any accounting is turned on.  If not, then simply print a
! line saying that, and return.
!
IF .acmflags EQL 0
THEN show$write_line(%ASCID 'Accounting is not currently enabled.', 0)

!
! If something is set, then write a header line and then print whatever
! activities are shown in ACMFLAGS.
!
ELSE
    BEGIN
    show$write_line(%ASCID 'Accounting is currently enabled to log the following activities:!/', 0);
    INCR i FROM 0 TO 9 DO
    IF .acmflags[.i]
    THEN show$write_line(.acc_type[.i], 0);
    END;

RETURN;
END;

GLOBAL ROUTINE show$rms_default : NOVALUE =
BEGIN

!---
!
! This routine performs the SHOW RMS_DEFAULT funtion.  The current settings
! of the RMS default parameters are output.
!
!---

LOCAL
    status,
    desc : VECTOR[2],
    arglist : VECTOR[8],
    buffer : VECTOR[128,BYTE];

!
! Print the heading lines
!
show$write_line (%ASCID '          MULTI-  |                MULTIBUFFER COUNTS               | NETWORK', 0,
    		 %ASCID '          BLOCK   | Indexed  Relative            Sequential         |  BLOCK', 0,
    		 %ASCID '          COUNT   |                     Disk   Magtape  Unit Record |  COUNT', 0);

!
! Format and print the process RMS defaults
!
arglist[0] = .pio$gb_dfmbc;
arglist[1] = .pio$gb_dfmbfidx;
arglist[2] = .pio$gb_dfmbfrel;
arglist[3] = .pio$gb_dfmbfsdk;
arglist[4] = .pio$gb_dfmbfsmt;
arglist[5] = .pio$gb_dfmbfsur;
arglist[6] = .pio$gb_dfnbc;

show$write_line(%ASCID 'Process  !4SB     | !4SB      !4SB     !4SB    !4SB      !4SB       | !4SB',
    	        arglist);

!
! Format and print the system RMS defaults
!
arglist[0] = .sys$gb_dfmbc;
arglist[1] = .sys$gb_dfmbfidx;
arglist[2] = .sys$gb_dfmbfrel;
arglist[3] = .sys$gb_dfmbfsdk;
arglist[4] = .sys$gb_dfmbfsmt;
arglist[5] = .sys$gb_dfmbfsur;
arglist[6] = .sys$gb_dfnbc;

show$write_line(%ASCID 'System   !4SB     | !4SB      !4SB     !4SB    !4SB      !4SB       | !4SB',
    	        arglist);

!
! Now display the prologue and extend default quantities
!
arglist[0] = .pio$gb_rmsprolog;
arglist[1] = .pio$gw_rmsextend;
show$write_line(%ASCID '!/          Prolog    Extend Quantity !/Process  !4SB          !5UW', arglist);

arglist[0] = .sys$gb_rmsprolog;
arglist[1] = .sys$gw_rmsextend;
show$write_line(%ASCID 'System   !4SB          !5UW', arglist);

RETURN;
END;						! End of show$rms

GLOBAL ROUTINE show$working_set : NOVALUE =
BEGIN

!---
!
! The current working set parameters are output.
!
!---

LOCAL
    status,					! Status return
    default : VOLATILE,				! WS default 
    quota : VOLATILE,				! WS quota
    extent : VOLATILE,				! WS extent
    max_quota : VOLATILE,			! Maximum authorized quota
    max_extent : VOLATILE,			! Maximum authorized extent
    pcb_flags : BITVECTOR[32],			! PCB status flags
    item_list : $BBLOCK[7*4*4],			! $GETJPI item list
    iosb : VECTOR[2],				! $GETJPI final status block
    arglist : VECTOR[3],			! Argument list for $FAOL
    desc : VECTOR[2],				! Descriptor for $FAOL buffer
    buffer : VECTOR[128,BYTE];			! $FAOL buffer

LITERAL
    disallow_bit = $BITPOSITION (pcb$v_disaws);
    
setup_list( item_list,
	    jpi$_sts,       4, pcb_flags,	0,
	    jpi$_dfwscnt,   4, default,		0,
	    jpi$_wsquota,   4, quota,		0,
	    jpi$_wsextent,  4, extent,		0,
	    jpi$_wsauth,    4, max_quota,	0,
	    jpi$_wsauthext, 4, max_extent,	0,
	    0,0,0,0);

status = $GETJPIW(ITMLST = item_list,
		  IOSB = iosb);
IF .status THEN status = (.iosb[0])<0,16>;
IF NOT .status
THEN 
    SIGNAL_STOP(.status);

arglist[0] = .default;
arglist[1] = .quota;
arglist[2] = .extent;

show$write_line(%ASCID '  Working Set      /Limit= !UL   /Quota= !UL    /Extent= !UL',
    	       arglist);

arglist[0] = .max_quota;
arglist[1] = .max_extent;

IF .pcb_flags[disallow_bit]
THEN show$write_line(%ASCID '  Adjustment disabled   Authorized Quota= !UL  Authorized Extent= !UL',
    		     arglist)
ELSE show$write_line(%ASCID '  Adjustment enabled    Authorized Quota= !UL  Authorized Extent= !UL',
    		     arglist);

RETURN;
END;						! End of show$work

END
ELUDOM
