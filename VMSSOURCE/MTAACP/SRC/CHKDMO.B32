MODULE CHKDMO (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  VAS/VMS MTAACP
!
! ABSTRACT:
!
!	This routine dismounts the volume in use if it should be.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  29-Apr-1977  17:19
!
! MODIFIED BY:
!
!	V03-010	HH0049		Hai Huang		16-Aug-1984
!		Call IOC$DALLOC_DMT to handle deallocation on dismount.
!
!	V03-009	MMD0324		Meg Dumont,	15-Aug-1984  14:37
!		Fix to index off the UCBLIST with the NVOL rather than
!		the volume number from the MVL. The MVL may not be valid
!		thus we shouldn't be using it.
!
!	V03-008	ACG0441		Andrew C. Goldstein,	13-Aug-1984  12:12
!		Issue IO$_AVAILABLE function after IO$_UNLOAD to release
!		drive correctly.
!
!	V03-007	ACG0441		Andrew C. Goldstein,	11-Aug-1984  16:58
!		Rework dismount interlocking to eliminate races and
!		uninterlocked procesing. Clear device lock value block on
!		dismount.
!
!	V03-006	MMD0289		Meg Dumont,	10-Apr-1984  14:15
!		Fix to use IO$_AVAILABLE instead of setting to SYNC
!		IPL and clearing the UCB VALID bit. Also fixed the
!		DALLOC_DEV linkage to indicate that R3 is trashed across
!		the call. Removed any knowledge inside this routine
!		of setting to IPL$_SYNC.
!
!	V03-005	LMP0221		L. Mark Pilant,		28-Mar-1984  13:04
!		Change UCB$L_OWNUIC to ORB$L_OWNER and UCB$W_VPROT to
!		ORB$W_PROT.
!
!	V03-004	MMD0281		Meg Dumont,	23-Mar-1984  10:29
!		Fix to pass address of UCB on IOC$DALLC_DEV call.
!
!	V03-003	ACG0399		Andrew C. Goldstein,	27-Feb-1984  13:24
!		Rename EXE$UNLOCK_DEV to IOC$UNLOCK_DEV
!
!	V03-002	TCM0001		Trudy C. Matthews	10-May-1983
!		Call routine EXE$DALLOC_DEV to correctly do device
!		deallocation in a cluster.
!
!	V03-001	STJ0263		Steven T. Jeffreys	22-Apr-1982
!		Do not mung the device allocation access mode.
!
!	V02-010 DMW00035	David Michael Walp	15-Sep-1981
!		Fixed Cancel I/O vs Dismount race condition
!
!	V02-009 DMW00026	David Michael Walp	20-Jul-1981
!		Changes to RET_FREE_PAGE, new parameter to say
!		that the P0 space will should be contracted.
!
!	V02-008 DMW00011	David Michael Walp	14-Mar-1981
!		Changed calculation of CCB address to GET_CCB
!
!	V02-007	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

!
! Part of this routine use to run at IPL$_SYNCH, however we will still lock
! the code down.
!
LOCK_CODE;


GLOBAL ROUTINE CHECK_DISMOUNT (UCB) : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks if the volume in use is marked for dismount and
!	idle. If so, it completes the dismount.
!
! CALLING SEQUENCE:
!	CHECK_DISMOUNT (ARG1)
!
! INPUT PARAMETERS:
!	ARG1 - address of unit control block for primary UCB
!
! IMPLICIT INPUTS:
!	QUEUE_HEAD: queue header for ACP
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	None
!
! SIDE EFFECTS:
!	Volume dismounted if appropriate
!
!--

    BEGIN

    BUILTIN
	TESTBITSC;

    LINKAGE
	DALLOC_DEV	= JSB (REGISTER=4,REGISTER=5;) :
			  NOPRESERVE (3)
			  PRESERVE (2,4,5)
			  NOTUSED (6,7,8,9,10,11);

    EXTERNAL REGISTER
	COMMON_REG;

    MAP
	UCB	: REF BBLOCK;		! address of unit control block

    LOCAL
	CCB	: REF BBLOCK,		! address of channel control block
	STS,				! general status value
	LKSTS		: VECTOR [6],	! lock status block
					! address of mag tape volume entry
	UNLOAD,				! flag to indicate unloading
	PAGE,
	ORB	: REF BBLOCK,		! ORB address
	UCBLIST	: REF VECTOR,	! vector of ucb's allocated to volume set
	VCB	: REF BBLOCK;			! local address of VCB

    EXTERNAL

	IO_CHANNEL,				! assign channel for tape I/O
	SCH$GL_CURPCB	: REF BBLOCK ADDRESSING_MODE (GENERAL),
	QUEUE_HEAD	: REF BBLOCK;		! address of ACP queue header

    EXTERNAL ROUTINE
	
	IOC$DALLOC_DMT	: DALLOC_DEV ADDRESSING_MODE (GENERAL),
					! deallocate device
	RET_FREE_PAGE	: COMMON_CALL,	! return free page to virtual mem pool
	LOCK_IODB,			! lock I/O data base mutex
	SEND_ERRLOG,
	UNLOCK_IODB,			! unlock I/O data base mutex
	DEALLOCATE,			! deallocate dynamic memory
	GET_CCB;			! get address of the CCB


    ! First check if the volume is marked for dismount
    !

    IF NOT .BBLOCK[UCB[UCB$L_DEVCHAR], DEV$V_DMT]
    THEN
	RETURN;

    VCB = .UCB[UCB$L_VCB];			! pickup VCB address

    ! The volume is marked for dismount. The remainder of the tests and the
    ! dismount bit twiddling must be done interlocked.
    !
    LOCK_IODB();
    SET_IPL (IPL$_SYNCH);

    ! If a cancel I/O is pending we can not dismount the volume, the volume
    ! will be check for dismount when the cancel I/O is completed.  This stops
    ! the crash caused by cancel and dismount happening while the ACP has a QIO
    ! with an completion AST outstanding to the volume.
    ! 
    IF (.VCB[VCB$W_TRANS] EQL 1) AND (NOT .VCB[VCB$V_CANCELIO])
    THEN
	BEGIN

	! The volume is marked for dismount and idle.  Mark all UCB's with
	! dismount in progress to stop all further activity.
	!
	UCBLIST = BBLOCK[.VCB[VCB$L_RVT], RVT$L_UCBLST];

	DECR NVOL FROM .BBLOCK[.VCB[VCB$L_RVT], RVT$B_NVOLS] - 1 TO 0 DO
	    BEGIN
	    UCB = .UCBLIST[.NVOL];		! UCB from RVT list
	    UCB[UCB$V_DISMOUNT] = 1;
	    END;

	UNLOCK_IODB ();

	! Establish whether volumes are to be unloaded. The primary UCB
	! contains the unload flag.
	!
	IF TESTBITSC (BBLOCK [.UCBLIST[0], UCB$V_UNLOAD])
	THEN UNLOAD = 1
	ELSE UNLOAD = 0;

	! Loop through the UCB's again. For each one, send the dismount
	! error log message and then unload the unit if it is online.
	!
	CCB = GET_CCB (.IO_CHANNEL);
	DECR NVOL FROM .BBLOCK[.VCB[VCB$L_RVT], RVT$B_NVOLS] - 1 TO 0 DO
	    BEGIN
	    UCB = .UCBLIST[.NVOL];		! UCB from RVT list
	    SEND_ERRLOG(0, .UCB);

	    CCB[CCB$L_UCB] = .UCBLIST[.NVOL];
	    IF .UNLOAD
	    THEN $QIOW(CHAN = .IO_CHANNEL, FUNC = IO$_UNLOAD);
	    $QIOW(CHAN = .IO_CHANNEL, FUNC = IO$_AVAILABLE);

	    ! If the UCB is not allocated, acquire the device lock so
	    ! that its value block can be written.
	    !
	    IF (LKSTS [1] = .UCB [UCB$L_LOCKID]) NEQ 0
		AND .UCB [UCB$L_PID] EQL 0
	    THEN
		BEGIN
		STS = $ENQW (LKMODE = LCK$K_PWMODE,
			     LKSB   = LKSTS,
			     EFN    = EFN,
			     FLAGS  = LCK$M_CONVERT + LCK$M_SYNCSTS
				      + LCK$M_NOQUOTA);
		IF NOT .STS
		OR NOT .LKSTS
		THEN BUG_CHECK (XQPERR, FATAL, 'Unexpected lock manager error');
		END;

	    ! Now complete the dismount.  Mark primary unit and secondary
	    ! units dismounted and deallocate those units which should be
	    ! on dismount.
	    !
	    ORB = .UCB[UCB$L_ORB];
	    LOCK_IODB ();

	    BBLOCK[UCB[UCB$L_DEVCHAR], DEV$V_MNT] = 0;
	    BBLOCK[UCB[UCB$L_DEVCHAR], DEV$V_DMT] = 0;
	    BBLOCK[UCB[UCB$L_DEVCHAR], DEV$V_SWL] = 0;
	    UCB[UCB$L_VCB] = 0;
	    UCB[UCB$V_DISMOUNT] = 0;
	    UCB[UCB$W_REFC] = .UCB[UCB$W_REFC] - 1;
	    ORB[ORB$L_SYS_PROT] = 0;
	    ORB[ORB$L_OWN_PROT] = 0;
	    ORB[ORB$L_GRP_PROT] = 0;
	    ORB[ORB$L_WOR_PROT] = 0;
	    ORB[ORB$L_OWNER] = 0;

	    ! If the device lock exists, now demote it as appropriate (to CR if
	    ! the device is not allocated, to EX otherwise). Clear the value
	    ! block if this is the final dismount.
	    !

	    IF .LKSTS [1] NEQ 0
	    THEN
		BEGIN
		LKSTS [2] = 0;
		LKSTS [3] = 0;
		LKSTS [4] = 0;
		LKSTS [5] = 0;
	
		STS = $ENQ (LKMODE = IF .UCB [UCB$L_PID] NEQ 0
				     THEN LCK$K_EXMODE
				     ELSE LCK$K_CRMODE,
			    LKSB   = LKSTS,
			    EFN    = EFN,
			    FLAGS  = LCK$M_CONVERT + LCK$M_CVTSYS
				   + LCK$M_SYNCSTS + LCK$M_NOQUOTA + LCK$M_VALBLK
			    );
		IF NOT .STS
		OR NOT .LKSTS
		THEN BUG_CHECK (XQPERR, FATAL, 'Unexpected lock manager error');
		END;

	    ! Call IOC$DALLOC_DMT routine to deallocate the device when appropriate.
	    !

	    IOC$DALLOC_DMT (.SCH$GL_CURPCB, .UCB);

	    UNLOCK_IODB ();
	    END;

	! Finally deallocate the volume set structures.
	!
	DEALLOCATE(.VCB[VCB$L_RVT]);
	DEALLOCATE(.VCB[VCB$L_MVL]);

	! return volume virtual page
	!
	WHILE 1
	DO
	    BEGIN
	    IF REMQUE(.VCB[VCB$L_VPFL], PAGE)
	    THEN EXITLOOP;
	    RET_FREE_PAGE(.PAGE,TRUE);
	    END;

	DEALLOCATE(.VCB);			! release the VCB
	QUEUE_HEAD[AQB$B_MNTCNT] = .QUEUE_HEAD[AQB$B_MNTCNT] - 1;
	END					! end of dismount processing
    ELSE
	UNLOCK_IODB();

    END;				! end of routine CHECK_DISMOUNT

END

ELUDOM
