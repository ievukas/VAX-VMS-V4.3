%TITLE 'CNTVMS - CONTENTS VMS command Line Interface'
MODULE cntvms	(IDENT = 'V04-000',
		ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE)
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!   DSR (Digital Standard RUNOFF) /DSRPLUS DSRTOC/CONTENTS Utility
!
! ABSTRACT:
!   This module contains the command line interface for CONTENTS.
!
! ENVIRONMENT:	 VAX/VMS User Mode

!
! AUTHOR:	 JPK
!
! CREATION DATE: April 1982
!
! MODIFIED BY:	
!
!	013	REM00013	Ray Marshall	13-Feb-1984
!		Enabled /REQUIRE for DSRTOC.
!
!	012 	KFA00012	29-Aug-1983
!		Modified tms ==> TMS11.
!
!	011	JPK00012	27-May-1983
!		Modified source modules to include REQ: in REQUIRE statements.
!
!	010	JPK00008	09-Mar-1983
!		Modified CONTENTS and CAPTION to support new BRN formats,
!		support SEND CONTENTS, /DOUBLE_SPACE, page numbered chapters,
!		guarantee space after section number and to write new 
!		prologue and epilog for RUNOFF output.
!		Modified FORMAT to quote only the RUNOFF flags used by CONTENTS.
!		Modified CNTVMS to fix default for /DOUBLE_SPACE and do more
!		value checking.
!
!	009	JPK00007	14-Feb-1983
!		Global edit of all sources for CONTENTS/DSRTOC:
!		- module names are now consistant with file names
!		- copyright dates have been updated
!		- facility names have been updated
!		- revision history was updated to be consistant with DSR/DSRPLUS
!
!	008	JPK00006	14-Feb-1983
!		Modified CNTVMS, CONTENTS, FORMAT and CNTVMSMSG to generate
!		error messages for DSRTOC or CONTENTS depending on the 
!		compiletime variant for DSRPLUS (/VARIANT:8192)
!
!	007	JPK00004	11-Feb-1983
!		Changed the global variable name INDENT to LINE_INDENT in 
!		modules CONTENTS, CAPTION, FORMAT and GBLDCL.
!		Removed declarations of PDENTS in modules CNTVMS, CONTENTS,
!		and CAPTION and replaced with a module wide BIND using the
!		new name INDENTS. 
!		Changed handling of INDENTS [1]. It no longer represents the
!		sum of the chapter and title indents.
!
!	006	JPK00003	11-Feb-1983
!		Added condition handler to CNTVMS to set program exit status.
!
!	005	JPK00002	10-Feb-1983
!		Merged in change KFA00002 to modules CNTVMS, CNTCLIDMP and
!		CNTCLI.REQ. This change was done without reserving and 
!		replacing the files in the CMS Library. This work involved
!		replacing CONTENTS$G_LM_INDENT, CONTENTS$G_HL1_INDENT through
!		CONTENTS$G_HL6_INDENT and CONTENTS$G_HLN_INDENT with
!		CONTENTS$AG_HL_INDENT. 
!		CONTENTS$V_TEX was removed - it was no longer needed.
!		Changed /TMS to /FORMAT={DSR | TMS}.
!		Added code for /DOUBLE_SPACE.
!
!	004	RER00002	20-Jan-1983
!		Modified CNTVMS and CNTCLI.REQ to add new fields for new and 
!		expanded qualifiers:
!		CONTENTS$V_TEX - for tex output, 
!		CONTENTS$G_DOUBLE_SPACE - for /DOUBLE_SPACE,
!		CONTENTS$G_HL2_INDENT through CONTENTS$G_HL6_INDENT for /INDENT.
!
!	003	RER00001	17-Dec-1982
!		Added code to CNTVMS to treat keyword NORUNNING in same way as
!		keyword STANDARD.
!		Changed header level default value from 99 to 6.
!		Deleted foreign-command code; CONTENTS is now called
!		as a subcommand of DSR.
!		Conditionalized code to compile for DSRPLUS if BLISS
!		/VARIANT = 8192 is used; otherwise, to compile for DSR.
!
!	002	KFA00002	14-Oct-1982
!		Modified CNTVMS, CONTENTS, CAPTION and CNTCLI.REQ to handle
!		new syntax for /INDENT qualifier. All indents are now
!		stored in the vector CMDBLK [CONTENTS$AG_HL_INDENT []],
!		where 0 = chapter indent, 1 = header level one indent, etc.
!
!--

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:STARLET';

LIBRARY 'SYS$LIBRARY:TPAMAC';	! TPARSE macros

LIBRARY 'SYS$LIBRARY:XPORT';

SWITCHES LIST (REQUIRE);

REQUIRE 'REQ:CNTCLI';		! Command line information block definition

REQUIRE 'REQ:CNTVMSREQ';	! VMS error messages

SWITCHES LIST (NOREQUIRE);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    cntcli,		! Command line interface routine
    call_tparse,	! Procedure to invoke TPARSE
    enter_page,		! Action routine - enter page number display type
    condition_handler,	! Condition handler - sets termination status
    open_error;		! File open error handler

%IF DSRPLUS
%THEN

FORWARD ROUTINE
    enter_format,	! Action routine - enter output format type
    enter_sect,		! Action routine - enter section number display level
    enter_dot,		! Action routine - enter leader dot character
    enter_hl_indent;	! Action routine - enter HL indent value

%FI

!
! EQUATED SYMBOLS:
!

LITERAL
    true  = 1,
    false = 0;

!
! OWN STORAGE:
!

OWN
    qualifier_value,
    tmp_str : $str_descriptor (class = dynamic, string = (0, 0)),
    termination_status : INITIAL (sts$k_success);

!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL		! Status codes returned by cli$present ()
    cli$_concat,
    cli$_present,
    cli$_defaulted,
    cli$_negated,
    cli$_absent;

EXTERNAL
    cmdblk : $contents_cmd,	! Command line information block
    cntvrl,			! Length of version number string
    cntvrp;			! CH$PTR to version number string

BIND
    indents = cmdblk [contents$ag_hl_indent] : VECTOR;

EXTERNAL ROUTINE
    cli$present     : ADDRESSING_MODE (GENERAL),	! Qualifier present?
    cli$get_value   : ADDRESSING_MODE (GENERAL),	! Get parameter value
    lib$tparse      : ADDRESSING_MODE (GENERAL),	! TPARSE parser
    toc,						! Entry point
    tocfin;						! Cleanup routine

!+
!   TPARSE state tables
!-

!
! Tables to parse a decimal number
!
$init_state (numb_state, numb_key);
$state (,
    (tpa$_decimal,   ,          ,                , qualifier_value),
    (tpa$_eos,       tpa$_exit)
    );
$state (,
    (tpa$_eos,       tpa$_exit)
    );

!
! Tables to parse /PAGE_NUMBERS values
!
$init_state (page_state, page_key);
$state (,
    ('RUNNING',      page_end,  enter_page,      , ,                false),
    ('NORUNNING',    page_end,  enter_page,      , ,                true),

%IF DSRPLUS
%THEN

    ('STANDARD',     page_end,  enter_page,      , ,                true),

%FI

    ('LEVEL')
    );
$state (,
    ('='),
    (':')
    );
$state (,
    (tpa$_decimal,   page_end,  ,                , qualifier_value)
    );
$state (page_end,
    (tpa$_eos,       tpa$_exit)
    );

%IF DSRPLUS
%THEN

!
! Tables to parse /FORMAT values
!
$init_state (format_state, format_key);
$state (,
    ('DSR',          ,          enter_format,    , ,                false),
    ('TMS11',        ,          enter_format,    , ,                true)
    );
$state (,
    (tpa$_eos,       tpa$_exit)
    );

!
! Tables to parse /INDENT values
!
$init_state (ind_state, ind_key);
$state (,
    ('CHAPTER',      ,          ,                , ,                 0),
    ('TITLES',       ,          ,                , ,                 1),
    ('PROGRESSIVE',  ,          ,                , ,                -1),
    ('HL1',          ,          ,                , ,                 1),
    ('HL2',          ,          ,                , ,                 2),
    ('HL3',          ,          ,                , ,                 3),
    ('HL4',          ,          ,                , ,                 4),
    ('HL5',          ,          ,                , ,                 5),
    ('HL6',          ,          ,                , ,                 6)
    );
$state (,
    ('='),
    (':')
    );
$state (,
    (tpa$_decimal,   ,          enter_hl_indent)
    );
$state (,
    (tpa$_eos,       tpa$_exit)
    );

!
! Tables to parse /SECTION_NUMBERS values
!
$init_state (sect_state, sect_key);
$state (,
    ('AS_INPUT',     sect_end,  enter_sect,      , ,                -1),
    ('ALL',          sect_end,  enter_sect,      , ,                 6),
    ('NONE',         sect_end,  enter_sect,      , ,                -2),
    ('LEVEL')
    );
$state (,
    ('='),
    (':')
    );
$state (,
    (tpa$_decimal,   sect_end,  enter_sect,      , ,                 0)
    );
$state(sect_end,
    (tpa$_eos,       tpa$_exit)
    );

!
! Tables to parse /LEADER_DOTS values
!
$init_state (dot_state, dot_key);
$state (,
    (tpa$_any,       ,          enter_dot),
    (tpa$_eos,       tpa$_exit)
    );
$state (,
    (tpa$_eos,       tpa$_exit)
    );

%FI

%SBTTL 'CNTCLI - CONTENTS VMS Command line interface'
GLOBAL ROUTINE cntcli =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine uses the VMS DCL CLE to obtain command
!	line information that is, in turn, passed to the
!	Table of Contents application in a transportable fashion.
!
! FORMAL PARAMETERS:
!
!	None
!
! IMPLICIT INPUTS:
!
!	The VMS command line
!
! IMPLICIT OUTPUTS:
!
!	cmdblk - The command line information block is initialized
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	termination_status	- Set by CONDITION_HANDLER ()
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    ENABLE
	condition_handler;

    LOCAL
	status;

    $str_desc_init (descriptor = cmdblk [contents$t_input_file], class = dynamic);
    $str_desc_init (descriptor = cmdblk [contents$t_output_file], class = dynamic);
    $str_desc_init (descriptor = cmdblk [contents$t_require_file], class = dynamic);
    $str_desc_init (descriptor = cmdblk [contents$t_command_line], class = dynamic);

    !
    ! Get a copy of the whole command line.
    !
    cli$get_value (%ASCID'$LINE', cmdblk [contents$t_command_line]);

    !
    ! /FORMAT = { DSR | TMS11 }
    !
    !		* W A R N I N G *
    !
    !	This qualifier must be processed before any other qualifier.
    !	Other qualifiers depend on the value of this qualifier.
    !
    !		* W A R N I N G *
    !
    cmdblk [contents$v_tms11] = false;

%IF DSRPLUS
%THEN

    IF  cli$present (%ASCID'FORMAT')
    THEN
	BEGIN
	cli$get_value (%ASCID'FORMAT', tmp_str);

	IF NOT call_tparse (tmp_str, format_state, format_key, false)
	THEN
	    SIGNAL_STOP (contents$_badvalue, 1, tmp_str);

	END;

%FI

    !
    ! /LINE_WIDTH = n
    !
    !		* W A R N I N G *
    !
    !	This qualifier must be processed after /FORMAT before any other
    !	qualifier. It depends on the value of /FORMAT and other qualifiers 
    !	depend on the value of this qualifier.
    !
    !		* W A R N I N G *
    !
    qualifier_value = 70;

%IF DSRPLUS
%THEN

    IF  .cmdblk [contents$v_tms11]
    THEN
	BEGIN
	!
	! Generating TMS11 output.
	!
	IF  cli$present (%ASCID'LINE_WIDTH')
	THEN
	    SIGNAL (contents$_ignored, 1, %ASCID'LINE_WIDTH', contents$_confqual);

	qualifier_value = -1;
	END
    ELSE
	BEGIN

	IF  cli$present (%ASCID'LINE_WIDTH')
	THEN
	    BEGIN
	    cli$get_value (%ASCID'LINE_WIDTH', tmp_str);

	    IF  NOT call_tparse (tmp_str, numb_state, numb_key, false)
	    THEN
		SIGNAL_STOP (contents$_badvalue, 1, tmp_str);

	    IF  (.qualifier_value LSS 20) OR (.qualifier_value GTR 120)
	    THEN
		SIGNAL_STOP (contents$_badvalue, 1, tmp_str, contents$_valerr);

	    END;

	END;

%FI

    cmdblk [contents$g_page_width] = .qualifier_value;

    !
    ! /DEEPEST_HEADER = n
    !
    !		* W A R N I N G *
    !
    !	This qualifier must be processed before /INDENT.
    !	The value of indent depends on the value of this qualifier.
    !
    !		* W A R N I N G *
    !
    qualifier_value = 6;

    IF  cli$present (%ASCID'DEEPEST_HEADER')
    THEN
	BEGIN
	cli$get_value (%ASCID'DEEPEST_HEADER', tmp_str);

	IF  NOT call_tparse (tmp_str, numb_state, numb_key, false)
	THEN
	    SIGNAL_STOP (contents$_badvalue, 1, tmp_str);

	IF  .qualifier_value GTR 6
	THEN
	    SIGNAL_STOP (contents$_badvalue, 1, tmp_str, contents$_valerr);

	END;

    cmdblk [contents$g_headers] = .qualifier_value;

    !
    ! /INDENT = ([CHAPTER = n], [TITLES = m], [PROGRESSIVE = p],
    !		[HL1 = m], [HL2 = q], [HL3 = r], [HL4 = s], [HL5 = t], [HL6 = u])
    !
    !		* W A R N I N G *
    !
    !	This qualifier must be processed after /FORMAT, /LINE_WIDTH and 
    !	/DEEPEST_HEADER. It depends on their values.
    !
    !		* W A R N I N G *
    !
    indents [0] = 8;
    indents [1] = 8;
    indents [2] = 2;

%IF DSRPLUS
%THEN

    indents [3] = 2;
    indents [4] = 2;
    indents [5] = 2;
    indents [6] = 2;

%ELSE

    indents [3] = 0;
    indents [4] = 0;
    indents [5] = 0;
    indents [6] = 0;

%FI

    IF cli$present (%ASCID'INDENT')
    THEN
	BEGIN

%IF DSRPLUS
%THEN

	IF  .cmdblk [contents$v_tms11]
	THEN
	    BEGIN
	    !
	    ! Generating TMS11 output.
	    !
	    SIGNAL (contents$_ignored, 1, %ASCID'INDENT', contents$_confqual);

	    INCR i FROM 0 TO 6 DO indents [.i] = 0;
	    END
	ELSE
	    BEGIN

	    LOCAL
		total_indent;

	    WHILE cli$get_value (%ASCID'INDENT', tmp_str) DO
		IF  NOT call_tparse (tmp_str, ind_state, ind_key, false)
		THEN
		    SIGNAL_STOP (contents$_badvalue, 1, tmp_str);

	    !
	    ! Validate left margin indent.
	    !
	    total_indent = .indents [0];

	    IF  .total_indent GEQ .cmdblk [contents$g_page_width]
	    THEN
		BEGIN
		$str_copy (target = tmp_str,
		    string = $str_concat ('CHAPTER=', $str_ascii (.indents [0])));

		SIGNAL_STOP (contents$_badvalue, 1, tmp_str, contents$_valerr);
		END;

	    !
	    ! Validate HL1 indent.
	    !
	    total_indent = .total_indent + .indents [1];

	    IF  .total_indent GEQ .cmdblk [contents$g_page_width]
	    THEN
		BEGIN
		$str_copy (target = tmp_str,
		    string = $str_concat ('HL1=', $str_ascii (.indents [1])));

		SIGNAL_STOP (contents$_badvalue, 1, tmp_str, contents$_valerr);
		END;

	    !
	    ! Validate progressive indents
	    !
	    INCR i FROM 2 TO .cmdblk [contents$g_headers] DO
		BEGIN
		total_indent = .total_indent + .indents [.i];

		IF .total_indent GEQ .cmdblk [contents$g_page_width]
		THEN
		    BEGIN
		    $str_copy (target = tmp_str, 
			string = $str_concat ('HL', $str_ascii (.i), '=', 
			    $str_ascii (.indents [.i])));

		    SIGNAL_STOP (contents$_badvalue, 1, tmp_str, contents$_valerr);
		    END;

		END;

	    END;

%ELSE

	indents [3] = 2;
	indents [4] = 2;
	indents [5] = 2;
	indents [6] = 2;

%FI

	END;

    !
    ! /[NO]LEADER_DOTS = k
    !
    !		* W A R N I N G *
    !
    !	This qualifier must be processed after /FORMAT.
    !	It depends on the value of /FORMAT.
    !
    !		* W A R N I N G *
    !
    CH$WCHAR (%C'.', CH$PTR (cmdblk [contents$c_leader_char]));

%IF DSRPLUS
%THEN

    IF  .cmdblk [contents$v_tms11]
    THEN
	BEGIN
	!
	! Generating TMS11 output.
	!
	SELECTONE cli$present (%ASCID'LEADER_DOTS') OF
	    SET

	    [cli$_present, cli$_negated]:
		!
		! Value explicitly given or negated - ignored for TMS.
		!
		SIGNAL (contents$_ignored, 1, %ASCID'LEADER_DOTS', contents$_confqual);

	    [OTHERWISE]:
		!
		! Value defaulted
		! or value absent (not possible, value is present by default).
		! In any event, do nothing.
		!
		;

	    TES;

	CH$WCHAR (%C' ', CH$PTR (cmdblk [contents$c_leader_char]));
	END
    ELSE
	BEGIN

	SELECTONE cli$present (%ASCID'LEADER_DOTS') OF
	    SET

	    [cli$_present]:
		BEGIN
		!
		! Value explicitly given.
		!
		cli$get_value (%ASCID'LEADER_DOTS', tmp_str);

		IF  NOT call_tparse (tmp_str, dot_state, dot_key, true)
		THEN
		    SIGNAL_STOP (contents$_badvalue, 1, tmp_str);

		END;

	    [cli$_negated]:
		!
		! Value explicitly negated.
		!
		CH$WCHAR (%C' ', CH$PTR (cmdblk [contents$c_leader_char]));

	    [OTHERWISE]:
		!
		! Value defaulted
		! or qualifier absent (not possible - present by default).
		! In any event, do nothing.
		!
		;

	    TES;

	END;

%FI

    !
    ! /PAGE_NUMBERS = ([[NO]RUNNING], [STANDARD], [LEVEL = n])
    !
    ! NORUNNING is the same as STANDARD.
    !
    !		* W A R N I N G *
    !
    !	This qualifier must be processed after /FORMAT.
    !	It depends on the value of /FORMAT.
    !
    !		* W A R N I N G *
    !
    cmdblk [contents$v_standard_page] = true;
    qualifier_value = 6;

    IF  cli$present (%ASCID'PAGE_NUMBERS')
    THEN
	BEGIN

	WHILE cli$get_value (%ASCID'PAGE_NUMBERS', tmp_str) DO
	    IF  NOT call_tparse (tmp_str, page_state, page_key, false)
	    THEN
		SIGNAL_STOP (contents$_badvalue, 1, tmp_str);

	IF  .cmdblk [contents$v_tms11] and (.qualifier_value NEQ 6)
	THEN
	    BEGIN
	    !
	    ! LEVEL = n not allowed for TMS11 output.
	    !
	    SIGNAL (contents$_ignored, 1, %ASCID'LEVEL', contents$_confqual);

	    qualifier_value = 6;
	    END;

	END;

    cmdblk [contents$g_page_level] = .qualifier_value;

    !
    ! /[NO]BOLD = n
    !
    qualifier_value = -1;

    IF  cli$present (%ASCID'BOLD')
    THEN

%IF DSRPLUS
%THEN

	BEGIN
	qualifier_value = 6;
	cli$get_value (%ASCID'BOLD', tmp_str);

	IF  NOT call_tparse (tmp_str, numb_state, numb_key, false)
	THEN
	    SIGNAL_STOP (contents$_badvalue, 1, tmp_str);

	END;

%ELSE

	qualifier_value = 6;

%FI

    cmdblk [contents$g_bold] = .qualifier_value;

    !
    ! /[NO]DOUBLE_SPACE[=n]
    !
    qualifier_value = -1;

%IF DSRPLUS
%THEN

    IF cli$present (%ASCID'DOUBLE_SPACE')
    THEN
	BEGIN
	qualifier_value = 1;
	cli$get_value (%ASCID'DOUBLE_SPACE', tmp_str);

	IF NOT call_tparse (tmp_str, numb_state, numb_key, false)
	THEN
	    SIGNAL_STOP (contents$_badvalue, 1, tmp_str);

	IF .qualifier_value LSS 1
	THEN
	    SIGNAL_STOP (contents$_badvalue, 1, tmp_str, contents$_valerr);

	END;

%FI

    cmdblk [contents$g_double_space] = .qualifier_value;

    !
    ! /IDENTIFICATION
    !
    IF  cli$present (%ASCID'IDENTIFICATION')
    THEN
	SIGNAL (contents$_ident, 2, .cntvrl, .cntvrp);

    !
    ! /[NO]LOG
    !
    IF  cli$present (%ASCID'LOG')
    THEN
	cmdblk [contents$v_log] = true
    ELSE
	cmdblk [contents$v_log] = false;

    !
    ! /[NO]OUTPUT = filespec
    !
    IF  cli$present (%ASCID'OUTPUT')
    THEN
	BEGIN
	cmdblk [contents$v_output] = true;
	cli$get_value (%ASCID'OUTPUT', cmdblk [contents$t_output_file]);
	END
    ELSE
	cmdblk [contents$v_output] = false;

    !
    ! /REQUIRE = filespec
    !

    IF  cli$present (%ASCID'REQUIRE')
    THEN
	BEGIN
	cmdblk [contents$v_require] = true;
	cli$get_value (%ASCID'REQUIRE', cmdblk [contents$t_require_file]);
	END
    ELSE
	cmdblk [contents$v_require] = false;

    !
    ! /SECTION_NUMBERS = { AS_INPUT | ALL | NONE | LEVEL = n }
    !
    cmdblk [contents$v_include_sections] = true;

%IF DSRPLUS
%THEN

    cmdblk [contents$g_sections] = -1;		! Display section numbers AS_INPUT

    IF  cli$present (%ASCID'SECTION_NUMBERS')
    THEN
	BEGIN
	cli$get_value (%ASCID'SECTION_NUMBERS', tmp_str);

	IF  NOT call_tparse (tmp_str, sect_state, sect_key, false)
	THEN
	    SIGNAL_STOP (contents$_badvalue, 1, tmp_str);

	END;

%ELSE

    cmdblk [contents$g_sections] = 6;		! Display ALL section numbers 

    IF cli$present (%ASCID'SECTION_NUMBERS') EQL cli$_negated
    THEN
	BEGIN
	cmdblk [contents$v_include_sections] = false;
	cmdblk [contents$g_sections] = 0;
	END;

%FI

    !
    ! /[NO]UNDERLINE = n
    !
    qualifier_value = -1;

    IF  cli$present (%ASCID'UNDERLINE')
    THEN

%IF DSRPLUS
%THEN

	BEGIN
	qualifier_value = 6;
	cli$get_value (%ASCID'UNDERLINE', tmp_str);

	IF  NOT call_tparse (tmp_str, numb_state, numb_key, false)
	THEN
	    SIGNAL_STOP (contents$_badvalue, 1, tmp_str);

	IF  .qualifier_value GTR 6
	THEN
	    SIGNAL_STOP (contents$_badvalue, 1, tmp_str, contents$_valerr);

	END;

%ELSE

	qualifier_value = 6;

%FI

    cmdblk [contents$g_underline] = .qualifier_value;

    !
    ! Process input file(s) and positional qualifiers.
    !
    WHILE (status = cli$get_value (%ASCID'INPUT', cmdblk [contents$t_input_file])) DO 
	BEGIN
	toc ();					! Process input file.

	!
	! Generate Figures, Tables, and Examples and finish up if
	! the current input file is not concatenated to the next.
	!
	IF .status NEQ cli$_concat THEN tocfin ();
	END;

    RETURN (.termination_status OR sts$m_inhib_msg);
    END;

%SBTTL 'CALL_TPARSE -- Invoke TPARSE to process qualifier values'
ROUTINE call_tparse (string : REF $str_descriptor (), state_tab, key_tab, blanks) =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine calls TPARSE to parse the given string with
!	the given state and key tables.
!
! FORMAL PARAMETERS:
!
!	string    - Address of a string descriptor of string to parse
!	state_tab - Address of TPARSE state tables
!	key_tab   - Address of TPARSE key tables
!	blanks    - true if blanks are to be processed explicitly
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns completion code of lib$tparse.
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    LOCAL
	tparse_block : BLOCK [tpa$k_length0, BYTE],
	status;

    !
    ! Initialize the TPARSE parameter block.
    !
    tparse_block [tpa$l_count]     = tpa$k_count0;
    tparse_block [tpa$l_options]   = tpa$m_abbrev;
    tparse_block [tpa$v_blanks]    = .blanks;
    tparse_block [tpa$l_stringcnt] = .string [str$h_length];
    tparse_block [tpa$l_stringptr] = .string [str$a_pointer];
    tparse_block [tpa$l_tokencnt]  = 0;
    tparse_block [tpa$l_tokenptr]  = 0;
    tparse_block [tpa$l_number]    = 0;
    tparse_block [tpa$l_param]     = 0;

    !
    ! Parse the string and return parse status.
    !
    RETURN lib$tparse (tparse_block, .state_tab, .key_tab);
    END;

%SBTTL 'ENTER_PAGE -- Action routine - enter page display type'
ROUTINE enter_page =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called as an action routine by TPARSE.
!	It sets contents$v_standard page from tpa$l_param.
!
! FORMAL PARAMETERS:
!
!	AP [tpa$l_param] - value to set contents$v_standard_page
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	cmdblk [contents$v_standard_page]
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	ss$_normal
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    BUILTIN
	AP;

    MAP
	AP : REF BLOCK [, BYTE];

    cmdblk [contents$v_standard_page] = .AP [tpa$l_param];

    RETURN ss$_normal;
    END;

%IF DSRPLUS
%THEN

%SBTTL 'ENTER_FORMAT -- Action routine - Enter output format'
ROUTINE enter_format =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called as an action routine by TPARSE.
!
!	It sets the value of contents$v_tms11 based on the value of
!	the parameter passed by TPARSE.
!
! FORMAL PARAMETERS:
!
!	AP [tpa$l_param]	- true if generating TMS output, false otherwise
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	cmdblk [contents$v_tms11] - set to the value of AP [tpa$l_param]
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	ss$_normal
!
! SIDE EFFECTS:
!
!	None
!--
    BEGIN
    BUILTIN
	AP;

    MAP
	AP : REF BLOCK [, BYTE];

    cmdblk [contents$v_tms11] = .AP [tpa$l_param];
    RETURN ss$_normal;
    END;

%FI

%IF DSRPLUS
%THEN

%SBTTL 'ENTER_SECT -- Action routine - enter section number display level'
ROUTINE enter_sect =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called as an action routine by TPARSE.
!	It sets the level of section number to be displayed based on the
!	value passed by TPARSE.
!
! FORMAL PARAMETERS:
!
!	AP [tpa$l_param]	= -1 - display section numbers AS_INPUT
!				=  6 - display ALL section numbers
!				= -2 - don't display section numbers
!				=  0 - user specified deepest level to display
!	AP [tpa$l_number]	=      user specified level
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	cmdblk [contents$v_include_sections]	= true if sections are to be
!						  displayed
!	cmdblk [contents$g_sections]		= deepest level to display
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	ss$_normal
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    BUILTIN
	AP;

    MAP
	AP : REF BLOCK [, BYTE];

    SELECTONE .AP [tpa$l_param] OF
	SET

	[-2]:
	    BEGIN
	    !
	    ! Don't display section numbers.
	    !
	    cmdblk [contents$v_include_sections] = false;
	    cmdblk [contents$g_sections] = 0;
	    END;

	[-1]:
	    BEGIN
	    !
	    ! Display section numbers AS_INPUT.
	    !
	    cmdblk [contents$v_include_sections] = true;
	    cmdblk [contents$g_sections] = -1;
	    END;

	[0]:
	    BEGIN
	    !
	    ! User specified deepest level to display.
	    !
	    cmdblk [contents$v_include_sections] = true;
	    cmdblk [contents$g_sections] = .AP [tpa$l_number];
	    END;

	[6]:
	    BEGIN
	    !
	    ! Display ALL section numbers.
	    !
	    cmdblk [contents$v_include_sections] = true;
	    cmdblk [contents$g_sections] = 6;
	    END;

	TES;

    RETURN ss$_normal;
    END;

%FI

%IF DSRPLUS
%THEN

%SBTTL 'ENTER_DOT -- Action routine - enter leader dot character'
ROUTINE enter_dot =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called as an action routine by TPARSE.
!	This routine saves the leader dot character specified by the user.
!
! FORMAL PARAMETERS:
!
!	AP [tpa$b_char] - leader dot character
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	cmdblk [contents$c_leader_char] - character is saved here
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	ss$_normal
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    BUILTIN
	AP;

    MAP
	AP : REF BLOCK [, BYTE];

    CH$WCHAR (.AP [tpa$b_char], CH$PTR (cmdblk [contents$c_leader_char]));

    RETURN ss$_normal;
    END;

%FI

%IF DSRPLUS
%THEN

%SBTTL 'ENTER_HL_INDENT - Action routine - enter HL indent value'
ROUTINE enter_hl_indent =
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called as an action routine by TPARSE.
!
!	It assigns values for progressive indenting.
!
! FORMAL PARAMETERS:
!
!	AP [tpa$l_number]	- value to set contents$ag_hl_indent
!	AP [tpa$l_param]	- HL number (0 = CHAPTER, -1 = PROGRESSIVE)
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	ss$_normal
!
! SIDE EFFECTS:
!
!	None
!
!--
    BEGIN

    BUILTIN
	AP;

    MAP
	AP : REF BLOCK [, BYTE];

    IF .AP [tpa$l_param] EQL -1
    THEN
	BEGIN
	!
	! /INDENT=PROGRESSIVE=n.
	! Set HL2 through HL6
	!
	INCR i FROM 2 TO 6 DO
	    indents [.i] = .AP [tpa$l_number];

	END
    ELSE
	BEGIN
	!
	! CHAPTER and HL1 through HL6
	!
	indents [.AP [tpa$l_param]] = .AP [tpa$l_number];
	END;

    RETURN ss$_normal;
    END;

%FI

%SBTTL 'CONDITION_HANDLER - Main program condition handler - sets termination status'
ROUTINE condition_handler (sig : REF BLOCK [, BYTE], mch : REF BLOCK [, BYTE]) =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is enabled by CNTCLI as a condition handler.
!	Whenever a signal is generated, the signal severity is examined.
!	If the condition is more severe than any previous condition,
!	(success, warning, error, severe error) the severity is recorded
!	in termination_status which is the condition severity. CNTCLI
!	returns the value of TERMINATION_STATUS as the program status
!	which will set the value of the DCL $STATUS variable. 
!
! FORMAL PARAMETERS:
!
!	sig			- address of signal array
!	mch			- address of mechanism array
!
! IMPLICIT INPUTS:
!
!	termination_status	- current termination severity
!
! IMPLICIT OUTPUTS:
!
!	termination_status	- may be set to the severity level in the 
!				  signalled condition if it is more severe
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	ss$_resignal
!
! SIDE EFFECTS:
!
!	None
!--
    BEGIN

    BIND
	signalled_condition = sig [chf$l_sig_name] : BLOCK [, BYTE];

    SELECTONE .signalled_condition [sts$v_severity] OF
	SET

	[sts$k_warning]:
	    IF .termination_status EQL sts$k_success
	    THEN
		!
		! A warning changes the termination status only if it was
		! 'success' previously.
		!
		termination_status = sts$k_warning;

	[sts$k_error]:
	    IF .termination_status LSS sts$k_error
	    THEN
		!
		! An error status changes the termination status only if it
		! was 'success' or 'warning' previously.
		!
		termination_status = sts$k_error;

	[sts$k_severe]:				! Severe error
	    termination_status = sts$k_severe;	! set the termination status

	[OTHERWISE]:				! Success or Informational
	    ;					! Do nothing

	TES;

    RETURN ss$_resignal;			! Continue processing condition
    END;

%SBTTL 'OPEN_ERROR - Handle File Open Errors'
GLOBAL ROUTINE open_error (function_code, primary_code, secondary_code, iob : REF $xpo_iob ()) =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called as an action routine to report
!	file open errors.
!
! FORMAL PARAMETERS:
!
!	function_code	- XPORT failure action routine function code
!	primary_code	- primary failure completion code
!	secondary_code	- secondary failure completion code
!	iob		- Address of file IOB
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns the value of primary_code if success is indicated.
!
! SIDE EFFECTS:
!
!	Signals a fatal error terminating program execution if failure
!	is indicated by primary_code.
!--

    BEGIN

    BIND
	file_spec = .iob [iob$a_file_spec] : $str_descriptor (),
	resultant =  iob [iob$t_resultant] : $str_descriptor ();

    LOCAL
	file_name : REF $str_descriptor ();

    !
    ! Point to best file name.
    !
    file_name = (IF   .resultant [str$h_length] NEQ 0 THEN resultant ELSE file_spec);

    IF  NOT .primary_code
    THEN
	BEGIN
	!
	! File was not opened.
	!
	IF  .iob [iob$v_input]
	THEN
	    SIGNAL_STOP (contents$_openin, 1, .file_name, 
		.iob [iob$g_comp_code], 1, .iob [iob$g_2nd_code])

	ELSE
	    SIGNAL_STOP (contents$_openout, 1, .file_name,
		.iob [iob$g_comp_code], 1, .iob [iob$g_2nd_code]);

	END;

    RETURN .primary_code;
    END;

END				! End of module
ELUDOM
