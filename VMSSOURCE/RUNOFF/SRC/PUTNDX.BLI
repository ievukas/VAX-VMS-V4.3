MODULE PUTNDX (	IDENT = 'V04-000'
    		%BLISS32 [ , ADDRESSING_MODE (  EXTERNAL =	LONG_RELATIVE,
    						NONEXTERNAL =	LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Routines to save index information in a file.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: February, 1979
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	015	KFA00015	Ken Alden	19-Jul-1983
!		Conditionalized the internal logic errors to check for
!		  /AUTO conditions.
!
!	014	KAD00014	Keith Dawson	18-May-1983
!		Restored lost information written to the .BFL file for FLIP 
!		  output.
!
!	013	KAD00013	Keith Dawson	11-April-1983
!		Added support for new termination error messages for 
!		  information written to .BRN file. This involved adding 
!		  another formal to the RGH routine; this third formal is 
!		  TRUE or FALSE, as the caller determines whether or not to 
!		  increment the count of information written to the .BRN file.
!
!	012	KAD00012	Keith Dawson	23-March-1983
!		Changed GCA_FLIP bit to (.gca_op_dev EQL op_dev_flip).
!
!	011	KAD00011	Keith Dawson	20-Mar-1983
!		Removed LN01 conditionals and all references to .BIX
!		  and .BTC files.
!
!	010	KAD00010	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
REQUIRE 'REQ:RNODEF.REQ';	! RUNOFF definition

FORWARD ROUTINE
    PUTNDY : NOVALUE,
    PUTXTN : NOVALUE,
    RGH : NOVALUE;
!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
MACRO
    check_open =
%IF FLIP %THEN
	(IF (.gca_op_dev EQL op_dev_flip)
	THEN
	    .rnoiob [IOB$V_OPEN]
	ELSE
	    .brnoob [IOB$V_OPEN])
%ELSE
	(.brnoob [IOB$V_OPEN])
%FI
	%;

!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    RNOIOB : REF $XPO_IOB (),
    BRNOOB : $XPO_IOB ();
  
EXTERNAL
    gca : gca_definition,
    tsf : tsf_definition;

EXTERNAL LITERAL 				!Error messages
    RNFILE;

EXTERNAL ROUTINE
    ERMS;

GLOBAL ROUTINE PUTNDY (ENTRY_LENGTH, ENTRY_ADDRESS, XTN, BAR_FLAG) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	PUTNDY writes an index entry to the index file.
!
! FORMAL PARAMETERS:
!
!	ENTRY_LENGTH is the number of bytes representing the entry.
!	ENTRY_ADDRESS is the address of the entry.
!	XTN is the associated transaction number.
!	BAR_FLAG is the change-bar flag.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    LOCAL
	temp_record : VECTOR [3];
%IF FLIP %THEN
    LOCAL
	flip_record : $flip_tcxtxt;
%FI

    !Cursory check to make sure the file is opened.
    IF NOT check_open
    THEN
	BEGIN
    	IF NOT .gca_black_box
	THEN
    	    erms (rnfile, CH$PTR (UPLIT ('putndy')), 6);
	RETURN;
	END;

    !If there is no index entry to write, just return.  Note that this
    !can happen if the user says, for example, ".X;", which is a valid
    !RUNOFF command but causes nothing to happen in the index.
    IF .entry_length LEQ 0
    THEN
	RETURN;

%IF FLIP %THEN
    IF (.gca_op_dev EQL op_dev_flip)
    THEN
	BEGIN
	flip_record [tcxtxt_code] = flip$k_tcxtxt;
	flip_record [tcxtxt_length] = .entry_length;
	flip_record [tcxtxt_xtn] = .xtn;
	flip_record [tcxtxt_bar] = .bar_flag;

	ch$move (.entry_length, CH$PTR (.entry_address),
	    CH$PTR (flip_record[tcxtxt_text]));

	$XPO_PUT ( IOB=.rnoiob, STRING= (flip$k_tcxtxt_basesiz+.entry_length,
	    CH$PTR (flip_record)));

	RETURN
	END;
%FI

    ! Write the Record Group Header for this NDX record. The length of the 
    ! described record is 4 plus the allocation of the text.
    ! Do count this record in the .BRN count.
    rgh (brn_index, 4 + ch$allocation (.entry_length), true);

    !Create a one-word descriptor record.
    TEMP_RECORD [0] = INDEX_ENTRY;	!This says what comes next.

    !Write a descriptor identifying what is about to come as an index entry.
    $XPO_PUT (IOB = BRNOOB, BINARY_DATA = (1, TEMP_RECORD));

    !Generate a descriptor record for this entry.
    TEMP_RECORD [0] = .ENTRY_LENGTH;
    TEMP_RECORD [1] = .XTN;
    TEMP_RECORD [2] = .BAR_FLAG;

    !Write out the descriptor record for this entry.
    $XPO_PUT (IOB = BRNOOB, BINARY_DATA = (3, TEMP_RECORD));

    !Write out the index entry.
    $XPO_PUT (IOB = BRNOOB, BINARY_DATA = (CH$ALLOCATION (.ENTRY_LENGTH), .ENTRY_ADDRESS));

    END;					!End of PUTNDY


GLOBAL ROUTINE PUTXTN (PAGE_REF, XTN) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	PUTXTN writes a transaction-number/page-reference pair
!	to the index file.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    MAP
	PAGE_REF : REF VECTOR [PAGE_SCT_SIZE];

    LOCAL
	TEMP_RECORD : VECTOR [1 + PAGE_SCT_SIZE];
%IF FLIP %THEN
    LOCAL
	FLIP_RECORD : $FLIP_TCXXTN;
%FI

    !Cursory check to make sure the file is opened.
    IF NOT CHECK_OPEN
    THEN
	BEGIN
    	IF NOT .gca_black_box
	THEN
    	    ERMS (RNFILE, CH$PTR (UPLIT ('PUTXTN')), 6);
	RETURN;
	END;

%IF FLIP %THEN
    IF (.gca_op_dev EQL op_dev_flip)
    THEN
	BEGIN
	!Create a one-word descriptor record.
	FLIP_RECORD[TCXXTN_CODE] = INDEX_XTN;
	!Put transaction number into the temporary record.
	FLIP_RECORD[TCXXTN_XTN] = .XTN;
	!Copy the page number in too.
	INCR I FROM 0 TO PAGE_SCT_SIZE-1 DO
	    VECTOR[FLIP_RECORD[TCXXTN_SCT],.I] = .PAGE_REF [.I];

	FLIP_RECORD[TCXXTN_CODE] = FLIP$K_TCXXTN;
	$XPO_PUT (IOB=.RNOIOB, STRING=(FLIP$K_TCXXTN_SIZE,
		CH$PTR(FLIP_RECORD)));
	RETURN
	END;
%FI

    ! Write the Record Group Header for this index record. The length of the 
    ! described record is 2 plus PAGE_SCT_SIZE.
    ! Do not count this record in the .BRN count.
    rgh (brn_index, 2 + page_sct_size, false);

    !Create a one-word descriptor record.
    TEMP_RECORD [0] = INDEX_XTN;	!This indicates what comes next

    !Write the descriptor record.
    $XPO_PUT (IOB = BRNOOB, BINARY_DATA = (1, TEMP_RECORD));

    !Put transaction number into the temporary record.
    TEMP_RECORD [0] = .XTN;

    !Copy the page number in too.
    INCR I FROM 1 TO PAGE_SCT_SIZE DO
	TEMP_RECORD [.I] = .PAGE_REF [.I - 1];

    $XPO_PUT (IOB = BRNOOB, BINARY_DATA = (1 + PAGE_SCT_SIZE, TEMP_RECORD));

    END;					!End of PUTXTN

%SBTTL 'RGH -- write a Record Group Header to the binary file.'
GLOBAL ROUTINE RGH (HEADER, COUNT, INCREMENT_BRN_COUNT) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	RGH writes a .BRN "envelope" -- a Record Group Header -- to the 
!	binary file. This header describes the following binary record
!	so that the utilities can skip over it if they do not need to 
!	interpret it. For example, the INDEX utility would skip over binary
!	data that the header identified as contents-related.
!
!	RGH also increments the GCA counts of the information written to 
!	the .BRN file so that it can be reported, if requested, by RTERM.
!
! FORMAL PARAMETERS:
!
!	HEADER	describes what kind of record follows. It is either 
!		BRN_INDEX (=1), BRN_CONTENTS (=2), or BRN_CROSSREF (=3).
!
!	COUNT	is the length of the following binary record group.
!
!	INCREMENT_BRN_COUNT  is TRUE if we should bump the count of items
!		written to the .BRN file, and FALSE if not. Thus, it is the 
!		responsibility of the caller to determine whether this item 
!		written to the .BRN should be counted.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--
    BEGIN

    LOCAL
	temp_record : VECTOR [2];

    ! Cursory check to make sure the file is opened.
    IF NOT check_open
    THEN
	BEGIN
    	IF NOT .gca_black_box
	THEN
    	    erms (rnfile, CH$PTR (UPLIT ('RGH')), 3);
	RETURN;
	END;

    ! Create a two-word descriptor record.
    temp_record [0] = .header;
    temp_record [1] = .count;

    ! Now really write the Record Group Header.
    $XPO_PUT (IOB = brnoob, BINARY_DATA = (2, temp_record));

    ! If requested by the caller, increment the count of the information 
    ! written to the .BRN file. 
    !
    IF .increment_brn_count 
    THEN
	SELECTONE .header OF
	    SET
	    [brn_index] :	gca_index_cnt = .gca_index_cnt + 1;
	    [brn_contents] :	gca_contents_cnt = .gca_contents_cnt + 1;
%IF DSRPLUS %THEN
	    [brn_crossref] :	gca_new_cref_cnt = .gca_new_cref_cnt + 1;
%FI
	    TES;

    RETURN;
    END;					!End of RGH

END						!End of module
ELUDOM
