MODULE INPUT ( %TITLE 'Print Symbiont -- input services'
	IDENT = 'V04-000',
	ADDRESSING_MODE (EXTERNAL = GENERAL)
	) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Print Symbiont.
!
! ABSTRACT:
!	File and module input routines.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: G. Robert, CREATION DATE: 31-Aug-1982
!
! MODIFIED BY:
!
!	3B-006	RRB0006		Rowland R. Bradley	24-Jul-1984
!		Add routine headers.
!
!	3B-005	GRR0005		Gregory R. Robert	29-Apr-1984
!		FT2 bugfixes.
!
!	3B-004  RRB0013		Rowland R. Bradley	22-Feb-1984
!		Add subroutines to allow job and flag page enhancements.
!		Add XAB blocks for file info.
!
!	3B-003	GRR3003		Gregory R. Robert	23-Aug-1983
!		Bugfixes, page_setup_modules, form_setup_modules,
!		sheet_feed, symbiont initiated pause_task and stop_stream,
!		hangup code, read and write item services
!
!	3B-002	GRR3002		Gregory R. Robert	03-Aug-1983
!		Rewrite for new design.
!
!	3B-001	GRR3001		Gregory R. Robert	22-Jul-1983
!		Created new module.
!
!
!**

LIBRARY 'SYS$LIBRARY:LIB';
REQUIRE 'LIB$:SMBDEF';
REQUIRE 'SRC$:SMBREQ';

EXTERNAL ROUTINE
	PSM$REPORT,
	PSM$INCLUDE_MODULES,
	PSM$READ_ITEM_R,
	PSM$SCHEDULE_NON_AST,
	PSM$STORE_ERRORS,
	EXPAND_CONDITION_VECTOR
	;

LITERAL
	LEAD_MASK  = %B '001000',		! delete leading blanks
	SIZE	= 0,
	ADDR	= 1
	;

OWN
	BURST
	;


FORWARD ROUTINE
	PSM$FILE_ERRORS		,
	PSM$FILE_INFORMATION	,
	PSM$MAIN_INPUT	,
	PSM$FILE_SETUP		,
	PSM$FILE_SETUP_2	,
	PSM$FORM_SETUP		,
	PSM$JOB_COMPLETION	,
	PSM$JOB_RESET		,
	PSM$JOB_SETUP		,
	PSM$LIBRARY_INPUT	,
	PSM$PAGE_SETUP		,

	CARRIAGE_CONTROL_TYPE	,
	CLOSE_LIBRARY		,
	CLOSE_FILE		,
	FORM_FEED		,
	OPEN_FILE		,
	OPEN_LIBRARY		,
	OPEN_LIBRARY_MODULE	,
	READ_FILE_AST		: NOVALUE,
	READ_FILE_ERR		: NOVALUE,
	READ_LIBRARY_USER	,
	RESUME			: NOVALUE,
	SCHEDULE_USER_LEVEL	: NOVALUE
	;



%SBTTL 'FILE_ERRORS - prints error text associated with the current file'
! Functional Description:
!		This input routine returns the contents of the file errors
!		message descriptor.  The errors have already been expanded
!		into text messages by other routines.
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$FILE_ERRORS ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	) =
BEGIN

LOCAL
	SCB	: REF $BBLOCK
	;

! If not a READ call then ignore it
!
IF .FUNCTION[] NEQ PSM$K_READ
THEN
    RETURN PSM$_FUNNOTSUP;


! Locate the SCB
!
SCB = .SMB_CONTEXT[];


! Case on the record number (which is the number of times this routine
! has been called with READ during this invocation
!
CASE .SCB[PSM$L_RECORD_NUMBER] FROM 0 TO 1 OF
    SET


    ! Output a form feed
    !
    [0]:
	BEGIN
	FUNC_DESC[SIZE] = 1;
	FUNC_DESC[ADDR] = UPLIT BYTE (PSM$K_CHAR_FF);
	END;


    ! Output the message text
    !
    [1]:
	BEGIN
	COPY_DX_DX_ (SCB[PSM$Q_CONDITION_TEXT], .FUNC_DESC);
	CLEAR_STRING_ (SCB[PSM$Q_CONDITION_TEXT]);
	END;


    ! Done, return EOF
    !
    [OUTRANGE]:
	RETURN PSM$_EOF;

    TES;


SS$_NORMAL

END;

%SBTTL 'FILE_INFORMATION'
! Functional Description:
!		This routine returns the text of any file informational
!		condition values sent by the job controller.  This is used
!		in conjunction with LOGINOUT failures to create batch log
!		files.
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$FILE_INFORMATION ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	)	=
BEGIN

LOCAL
	MESSAGE	: REF VECTOR,
	SCB	: REF $BBLOCK,
	TEMP	: VECTOR [10]
	;


! If not a READ function then ignore
!
IF .FUNCTION[] NEQ PSM$K_READ
THEN
    RETURN PSM$_FUNNOTSUP;


! Pick up the SCB address
!
SCB = .SMB_CONTEXT[];


! Locate the file information message vector
!
MESSAGE = .SCB_ADDR_ (MESSAGE_VECTOR);


! If this is the second read the we are done -- return EOF
!
IF .SCB[PSM$L_RECORD_NUMBER] GTRU 0
THEN
    RETURN PSM$_EOF;


! Copy the message vector to a temporary vector
TEMP [0] = .MESSAGE[0];
TEMP [1] = 0;

CH$COPY (.SCB_SIZE_ (MESSAGE_VECTOR) - 4, .SCB_ADDR_ (MESSAGE_VECTOR) + 4, 0,
    %ALLOCATION (TEMP) - 8, TEMP [2]);


! Convert the message codes to text and return it as the record read
!
EXPAND_CONDITION_VECTOR (.SCB, (.SCB_SIZE_ (MESSAGE_VECTOR) / 4) + 1,
    TEMP, .FUNC_DESC);

SS$_NORMAL

END;

%SBTTL 'FILE_PROCESS'
! Functional Description:
!		This is the main file processing routine.  It is responsible
!		for opening, reading, positioning, and closing the main input
!		file.  It also determines carriage control type.
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$MAIN_INPUT ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	) =
BEGIN

LOCAL
	RAB	: REF $BBLOCK,
	SCB	: REF $BBLOCK
	;

! Locate the SCB and RAB blocks
!
SCB = .SMB_CONTEXT[];
RAB = .SCB[PSM$A_RAB];


! Case on function code
!
SELECTONEU .FUNCTION[] OF
    SET

    [PSM$K_READ]:
	BEGIN
	RAB[RAB$B_RAC] = 0;
	$GET (RAB=.RAB, SUC=READ_FILE_AST, ERR=READ_FILE_ERR);
	END;

    [PSM$K_GET_KEY]:
	BEGIN
	FUNC_DESC[SIZE] = RAB$S_RFA;
	FUNC_DESC[ADDR] = RAB[RAB$W_RFA];
	RETURN SS$_NORMAL;
	END;

    [PSM$K_START_TASK]:
	BEGIN
	IF NOT .ITEM_PRESENT_ (FILE_IDENTIFICATION)
	THEN
	    RETURN PSM$_FUNNOTSUP;
	IF .RAB EQL 0
	THEN
	    BEGIN
	    LOCAL RMS_PTR;
	    LITERAL RMS_SIZE =
		FAB$C_BLN +
		NAM$C_BLN +
		RAB$C_BLN +
		XAB$C_DATLEN +
		XAB$C_FHCLEN +
		XAB$C_PROLEN ;

	    LIB$GET_VM (UPLIT (RMS_SIZE), RMS_PTR);
	    CH$FILL (0, RMS_SIZE, .RMS_PTR);

	    SCB[PSM$A_FAB] = .RMS_PTR;
	    RMS_PTR = .RMS_PTR + FAB$C_BLN;

	    SCB[PSM$A_NAM] = .RMS_PTR;
	    RMS_PTR = .RMS_PTR + NAM$C_BLN;

	    RAB = .RMS_PTR;
	    SCB[PSM$A_RAB] = .RMS_PTR;
	    RMS_PTR = .RMS_PTR + RAB$C_BLN;

	    SCB[PSM$A_XABDAT] = .RMS_PTR;
	    RMS_PTR = .RMS_PTR + XAB$C_DATLEN;

	    SCB[PSM$A_XABFHC] = .RMS_PTR;
	    RMS_PTR = .RMS_PTR + XAB$C_FHCLEN;

	    SCB[PSM$A_XABPRO] = .RMS_PTR;
	    RMS_PTR = .RMS_PTR + XAB$C_PROLEN;

	    LIB$GET_VM (UPLIT (PSM$K_DEFBUFSIZ), RAB[RAB$L_UBF]);
	    RAB[RAB$W_USZ] = PSM$K_DEFBUFSIZ;
	    END;

	SCHEDULE_USER_LEVEL (.SCB, RESUME, .SMB_CONTEXT[], OPEN_FILE, 5,
	    .SMB_CONTEXT[], .USER_CONTEXT, .FUNCTION, .FUNC_DESC, .FUNC_ARG);

	! We have initiated but not completed an OPEN function -- the
	! current symbiont does not allow returning PENDING so we reach
	! into the SCB and set it manually.
	!
	SCB[PSM$L_SERVICE_STATUS] = PSM$_PENDING;

	RETURN SS$_NORMAL;
	END;

    [PSM$K_POSITION_TO_KEY]:
	BEGIN
	CH$MOVE (RAB$S_RFA, .FUNC_DESC[ADDR], RAB[RAB$W_RFA]);
	RAB[RAB$B_RAC] = RAB$C_RFA;
	$FIND (RAB=.RAB, SUC=READ_FILE_AST, ERR=READ_FILE_ERR);
	END;

    [PSM$K_OPEN]:
	BEGIN

	FUNC_ARG[0] = CARRIAGE_CONTROL_TYPE (.SCB);

	RETURN SS$_NORMAL;
	END;

    [PSM$K_CLOSE]:
	SCHEDULE_USER_LEVEL (.SCB, RESUME, .SMB_CONTEXT[], CLOSE_FILE, 5,
	    .SMB_CONTEXT[], .USER_CONTEXT, .FUNCTION, .FUNC_DESC, .FUNC_ARG);

    [PSM$K_REWIND]:
	$REWIND (RAB=.RAB, SUC=READ_FILE_AST, ERR=READ_FILE_ERR);

    [OTHERWISE]:
	RETURN PSM$_FUNNOTSUP;

    TES;

PSM$_PENDING

END;

%SBTTL 'FILE_SETUP'
! Functional Description:
!		Queues any file setup modules for insertion in the
!		data stream.
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$FILE_SETUP ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	) =
BEGIN

LOCAL
	SCB	: REF $BBLOCK
	;


! If this is the open call then queue the file_setup_modules, if any/
!
IF .FUNCTION[] EQL PSM$K_OPEN
THEN
    BEGIN
    SCB = .SMB_CONTEXT[];
    PSM$INCLUDE_MODULES (SCB, SCB[PSM$Q_FILE_SETUP_MODULES]);
    END;


! No functions are supported
!
PSM$_FUNNOTSUP

END;

%SBTTL 'FILE_SETUP_2'
! Functional Description:
!		Outputs a single form feed to insure that we are at top
!		of form before beginning to print the file.  If we are
!		already at top of form the condition vertical format effector
!		logic of the symbiont formatter will discard it.
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$FILE_SETUP_2 ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	) =
BEGIN

BUILTIN AP;


! Call the form feed routine passing the argument list
!
CALLG (.AP, FORM_FEED)

END;

%SBTTL 'FORM_SETUP'
! Functional Description:
!		Queue any forms setup modules for inclusion
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$FORM_SETUP ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	) =
BEGIN

LOCAL
	SCB	: REF $BBLOCK
	;

IF .FUNCTION[] EQL PSM$K_OPEN
THEN
    BEGIN
    SCB = .SMB_CONTEXT[];
    PSM$INCLUDE_MODULES (SCB, SCB[PSM$Q_FORM_SETUP_MODULES]);
    END;

PSM$_FUNNOTSUP

END;

%SBTTL 'JOB_COMPLETION'
! Functional Description:
!		Issue a form feed at end of job (actually end of task)
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$JOB_COMPLETION ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	) =
BEGIN

BUILTIN AP;


! Call the standard form feed routine passing our argument list
!
CALLG (.AP, FORM_FEED)

END;

%SBTTL 'JOB_RESET'
! Functional Description:
!		Queues any job reset modules for inclusion
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$JOB_RESET ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	) =
BEGIN

LOCAL
	SCB	: REF $BBLOCK
	;


! On the open call queue the job_reset_modueles, if any, for inclusion
! in the input data stream
!
IF .FUNCTION[] EQL PSM$K_OPEN
THEN
    BEGIN
    SCB = .SMB_CONTEXT[];
    PSM$INCLUDE_MODULES (SCB, SCB[PSM$Q_JOB_RESET_MODULES]);
    END;


! Always return unsupported
!
PSM$_FUNNOTSUP

END;

%SBTTL 'JOB_SETUP'
! Functional Description:
!		Called once at start of task, it checks to see if this is
!		the first time it is being called and, if so, issues a form
!		feed and any job_reset_modules that are specified.
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$JOB_SETUP ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	)	=
BEGIN

LOCAL
	SCB	: REF $BBLOCK
	;

! If opening establish the carriage control as imbedded
!
IF .FUNCTION[] EQL PSM$K_OPEN
THEN
    BEGIN
    FUNC_ARG[0] = PSM$K_CC_INTERNAL;
    RETURN SS$_NORMAL;
    END;


! If this is the first read and this is the first time this routine
! has been opened for input, then return a form feed and any job_reset_modules.
!
IF .FUNCTION[] EQL PSM$K_READ
THEN
    BEGIN
    SCB = .SMB_CONTEXT[];
    IF .SCB[PSM$L_RECORD_NUMBER] GTRU 0 THEN RETURN PSM$_EOF;
    IF TESTBITCS (SCB[PSM$V_JOB_INITIALIZE])
    THEN
	BEGIN
	FUNC_DESC[SIZE] = 2;
	FUNC_DESC[ADDR] = UPLIT BYTE (PSM$K_CHAR_FF, PSM$K_CHAR_CR);
	PSM$INCLUDE_MODULES (SCB, SCB[PSM$Q_JOB_RESET_MODULES]);
	RETURN SS$_NORMAL;
	END;
    END;

PSM$_FUNNOTSUP

END;

%SBTTL 'LIBRARY_INPUT'
! Functional Description:
!		Opens, reads, and closes the device control library.
!		This routine returns specified modules from the library
!		into the input data stream.
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$LIBRARY_INPUT ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	)	=
BEGIN


SELECTONEU .FUNCTION[] OF
    SET


    ! If this is a open, read, or close then schedule it for service at
    ! non-ast level (since the librarian does not provide an AST interface)
    !
    [PSM$K_READ, PSM$K_OPEN, PSM$K_CLOSE]:
	BEGIN
	LOCAL SCB : REF $BBLOCK;
	SCB = .SMB_CONTEXT[];
	SCHEDULE_USER_LEVEL (.SCB, RESUME, .SMB_CONTEXT[], READ_LIBRARY_USER, 5,
	    .SMB_CONTEXT[], .USER_CONTEXT, .FUNCTION, .FUNC_DESC, .FUNC_ARG);
	RETURN PSM$_PENDING;
	END;

    [OTHERWISE]:
	RETURN PSM$_FUNNOTSUP;

    TES;

END;

%SBTTL 'PAGE_SETUP'
! Functional Description:
!		Queues any page setup modules for inclusion in the input
!		data stream.
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
GLOBAL ROUTINE PSM$PAGE_SETUP ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	) =
BEGIN

LOCAL
	SCB	: REF $BBLOCK
	;

IF .FUNCTION[] EQL PSM$K_OPEN
THEN
    BEGIN
    SCB = .SMB_CONTEXT[];
    PSM$INCLUDE_MODULES (SCB, SCB[PSM$Q_PAGE_SETUP_MODULES]);
    END;

PSM$_FUNNOTSUP

END;

%sbttl 'CARRIAGE_CONTROL_TYPE - Returns the file carriage control type'
!++
! Functional Description:
!	Returns carriage control type: implied, fortran, print, or internal.
!	Fields of the RMS FAB and RAB control blocks are inspected and one
!	of the four carriage control types is assigned for the file.
!
! Formal Parameters:
!		SCB	- Address of the SCB
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
ROUTINE CARRIAGE_CONTROL_TYPE (
		SCB  : REF $BBLOCK
		     ) =
BEGIN
    BIND 
	FAB = .SCB[PSM$A_FAB] : $BBLOCK;

    IF .FAB[FAB$V_CR]
    THEN
	PSM$K_CC_IMPLIED
    ELSE
	IF .FAB[FAB$V_FTN]
	THEN
	    PSM$K_CC_FORTRAN
	ELSE
	    IF .FAB[FAB$V_PRN]
	    THEN
		PSM$K_CC_PRINT
	    ELSE
		PSM$K_CC_INTERNAL
END;

%SBTTL 'CLOSE_FILE'
! Functional Description:
!		This subroutine handle file closing operations.
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
ROUTINE CLOSE_FILE ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	)	=
BEGIN

LOCAL
	FAB	: REF $BBLOCK,
	RAB	: REF $BBLOCK,
	SCB	: REF $BBLOCK,
	STATUS_1
	;

SCB = .SMB_CONTEXT[];
FAB = .SCB[PSM$A_FAB];
RAB = .SCB[PSM$A_RAB];

IF .FAB[FAB$W_IFI] EQL 0
THEN
    RETURN SS$_NORMAL;

RAB[RAB$V_ASY] = 0;

$WAIT (RAB=.RAB);

STATUS_1 = $CLOSE (FAB=.FAB);

IF NOT .STATUS_1
THEN
    PSM$STORE_ERRORS (.SCB, PSM$_CLOSEIN, 1, SCB[PSM$Q_FILE_SPECIFICATION],
	.FAB[FAB$L_STS], .FAB[FAB$L_STV]);

.STATUS_1

END;

%SBTTL 'CLOSE_LIBRARY'
! Functional Description:
!		This subroutine closes the device control library
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
ROUTINE CLOSE_LIBRARY ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	)	=
BEGIN

LOCAL
	SCB	: REF $BBLOCK,
	CLOSE_STATUS
	;

SCB = .SMB_CONTEXT[];

IF .SCB[PSM$L_LIBRARY_INDEX] EQL 0
THEN
    RETURN SS$_NORMAL;

CLOSE_STATUS = LBR$CLOSE (SCB[PSM$L_LIBRARY_INDEX]);

SCB[PSM$L_LIBRARY_INDEX] = 0;

IF NOT .CLOSE_STATUS
THEN
    PSM$STORE_ERRORS (.SCB, PSM$_CLOSEIN, 1,
	SCB[PSM$Q_LIBRARY_SPECIFICATION], .CLOSE_STATUS);

.CLOSE_STATUS

END;

%SBTTL 'FORM_FEED'
! Functional Description:
!		This input routine returns a single form feed.
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
ROUTINE FORM_FEED ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	) =
BEGIN

LOCAL
	SCB	: REF $BBLOCK
	;

IF .FUNCTION[] EQL PSM$K_OPEN
THEN
    BEGIN
    FUNC_ARG[0] = PSM$K_CC_INTERNAL;
    RETURN SS$_NORMAL;
    END;

IF .FUNCTION[] NEQ PSM$K_READ
THEN
    RETURN PSM$_FUNNOTSUP;

SCB = .SMB_CONTEXT[];

IF .SCB[PSM$L_RECORD_NUMBER] GTRU 0
THEN
    RETURN PSM$_EOF;

FUNC_DESC[SIZE] = 1;
FUNC_DESC[ADDR] = UPLIT BYTE (PSM$K_CHAR_FF, PSM$K_CHAR_CR);

SS$_NORMAL

END;

%SBTTL 'OPEN_FILE'
! Functional Description:
!		This routine handles RMS file open's.
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
ROUTINE OPEN_FILE ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	)	=
BEGIN

LOCAL
	FAB		: REF $BBLOCK,
	NAM		: REF $BBLOCK,
	RAB		: REF $BBLOCK,
	SCB		: REF $BBLOCK
	;

SCB = .SMB_CONTEXT[];
FAB = .SCB[PSM$A_FAB];
RAB = .SCB[PSM$A_RAB];
NAM = .SCB[PSM$A_NAM];

$FAB_INIT (				! Initialize FAB
	FAB=.FAB,			! - address of uninitialized FAB
	FOP=NAM,			! - open by device, fid, and did
	NAM=.NAM,			! - address of NAM block
	SHR=(DEL,GET,PUT,UPI),		! - allow full sharing
	XAB=.SCB[PSM$A_XABDAT]		! - first XAB block
	);

$XABDAT_INIT (				! Initialize date XAB
	XAB=.SCB[PSM$A_XABDAT],		! - address of uninitialized XAB
	NXT=.SCB[PSM$A_XABFHC]		! - address of next XAB in chain
	);

$XABFHC_INIT (				! Initialize file header XAB
	XAB=.SCB[PSM$A_XABFHC],		! - address of uninitialized XAB
	NXT=.SCB[PSM$A_XABPRO]		! - address of next XAB in chain
	);

$XABPRO_INIT (				! Initialize protection XAB
	XAB=.SCB[PSM$A_XABPRO]		! - address of uninitialized XAB
	);

BEGIN
LOCAL SAVE_ADDR, SAVE_SIZE;
SAVE_SIZE = .RAB[RAB$W_USZ];
SAVE_ADDR = .RAB[RAB$L_UBF];
$RAB_INIT (				! Initialize RAB
	CTX=.SMB_CONTEXT[],		! - symbiont context value
	FAB=.FAB,			! - address of FAB block
	MBC=32,				! - multi block count
	MBF=2,				! - multi buffer count
	RAC=SEQ,			! - access mode is sequential
	RAB=.RAB,			! - address of uninitialized RAB
	ROP=LOC,			! - locate mode
	USZ=.SAVE_SIZE,			! - user buffer size
	UBF=.SAVE_ADDR			! - user buffer address
	);
END;

$NAM_INIT (NAM=.NAM);			! Initialize NAM

RETURN_IF_ERROR_ (PSM$READ_ITEM_R (
    SMB_CONTEXT[],
    UPLIT (SMBMSG$K_FILE_IDENTIFICATION),
    UPLIT WORD (NAM$S_DVI + NAM$S_FID + NAM$S_DID),
    NAM[NAM$T_DVI]));

!*! obsolete
!*!
!*!CH$COPY (.SCB_SIZE_ (FILE_IDENTIFICATION), .SCB_ADDR_ (FILE_IDENTIFICATION),
!*!    0, 28, NAM[NAM$T_DVI]);

IF NOT $OPEN (FAB=.FAB)
THEN
    RETURN PSM$STORE_ERRORS (.SCB, PSM$_OPENIN, 1,
	SCB[PSM$Q_FILE_SPECIFICATION], .FAB[FAB$L_STS], .FAB[FAB$L_STV]);

IF NOT $CONNECT (RAB=.RAB)
THEN
    RETURN PSM$STORE_ERRORS (.SCB, PSM$_OPENIN, 1,
	SCB[PSM$Q_FILE_SPECIFICATION], .RAB[RAB$L_STS], .RAB[RAB$L_STV]);


! Enable asychronous operations
!
RAB[RAB$V_ASY] = 1;

! Set the valid fab bit for get_file_description
!
SCB[PSM$V_FAB_VALID] = 1;

! If record format is variable with fixed control
!
IF .FAB[FAB$B_RFM] EQL FAB$C_VFC
THEN

    ! ... and the control region is the expected size
    !
    IF .FAB[FAB$B_FSZ] EQL 2
    THEN

	! Provide a buffer for the control region
	!
	BEGIN
	RAB[RAB$L_RHB] = SCB[PSM$L_RECORD_HEADER];

	! If not print-file-format then assume its a sequenced file.
	!
	IF NOT .FAB[FAB$V_PRN]
	THEN
	    SCB[PSM$L_PRINT_CONTROL] =
		.SCB[PSM$L_PRINT_CONTROL] OR SMBMSG$M_SEQUENCED;
	END;

SS$_NORMAL

END;

%SBTTL 'OPEN_LIBRARY'
! Functional Description:
!		This routine opens the device control library.
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
ROUTINE OPEN_LIBRARY  ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	)	=
BEGIN

LOCAL
	Q_RES_LIBNAME	: VECTOR [2],
	T_RES_LIBNAME	: VECTOR [BYTE, NAM$C_MAXRSS],
	SCB		: REF $BBLOCK,
	OPEN_STATUS
	;

SCB = .SMB_CONTEXT[];

INIT_STAT_DESC_ (Q_RES_LIBNAME, NAM$C_MAXRSS, T_RES_LIBNAME);

OPEN_STATUS = LBR$INI_CONTROL (
		SCB[PSM$L_LIBRARY_INDEX],	! - context longword
		UPLIT (LBR$C_READ),		! - open for read
		UPLIT (LBR$C_TYP_TXT)		! - text library
		);

IF .OPEN_STATUS
THEN
    OPEN_STATUS = LBR$OPEN (
	SCB[PSM$L_LIBRARY_INDEX],		! - context longword
	SCB[PSM$Q_LIBRARY_SPECIFICATION],	! - library name
	0,					! - no create options
	0,					! - no default name
	0,					! - no related file name
	Q_RES_LIBNAME,				! - resultant name buffer
	Q_RES_LIBNAME)				! - resultant name size
ELSE
    SCB[PSM$L_LIBRARY_INDEX] = 0;

IF .OPEN_STATUS
THEN
    BEGIN
    COPY_DX_DX_ (Q_RES_LIBNAME, SCB[PSM$Q_LIBRARY_SPECIFICATION]);
    OPEN_STATUS = LBR$SET_LOCATE (SCB[PSM$L_LIBRARY_INDEX]);
    END;

IF NOT .OPEN_STATUS
THEN
    BEGIN
    IF .$BBLOCK [OPEN_STATUS, STS$V_FAC_NO] EQL RMS$_FACILITY
    THEN
	PSM$STORE_ERRORS (.SCB,
	    PSM$_OPENIN, 1, SCB[PSM$Q_LIBRARY_SPECIFICATION], .OPEN_STATUS,
		LBR$RET_RMSSTV ())
    ELSE
	PSM$STORE_ERRORS (.SCB,
	    PSM$_OPENIN, 1, SCB[PSM$Q_LIBRARY_SPECIFICATION], .OPEN_STATUS);
    END;

.OPEN_STATUS

END;

%SBTTL 'OPEN_LIBRARY_MODULE'
! Functional Description:
!		This routine opens a specific module in the device control
!		library.
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
ROUTINE OPEN_LIBRARY_MODULE ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	)	=
BEGIN

LOCAL
	OPEN_STATUS	,
	SCB		: REF $BBLOCK
	;

SCB = .SMB_CONTEXT[];

OPEN_STATUS = LBR$LOOKUP_KEY (
    SCB[PSM$L_LIBRARY_INDEX],	! - library context
    SCB[PSM$Q_MODULE_NAME],	! - module name
    SCB[PSM$Q_RFA]);		! - rfa buffer

IF NOT .OPEN_STATUS
THEN
    BEGIN
    IF .$BBLOCK [OPEN_STATUS, STS$V_FAC_NO] EQL RMS$_FACILITY
    THEN
	PSM$STORE_ERRORS (.SCB,
	    PSM$_MODNOTFND, 2, SCB[PSM$Q_MODULE_NAME],
	    .SCB[PSM$L_RECORD_NUMBER], .OPEN_STATUS, LBR$RET_RMSSTV ())
    ELSE
	PSM$STORE_ERRORS (.SCB,
	    PSM$_MODNOTFND, 2, SCB[PSM$Q_MODULE_NAME],
	    .SCB[PSM$L_RECORD_NUMBER], .OPEN_STATUS);
    END;

.OPEN_STATUS

END;

%SBTTL 'READ_FILE_AST'
! Functional Description:
!		This routine is the read completion AST for RMS file reads.
!		It reports completion of the asynchronous read to the symbiont
!		through the PSM$REPORT routine.
!
! Formal Parameters:
!		RAB	: address of the RMS RAB block
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
ROUTINE READ_FILE_AST ( 
	RAB	: REF $BBLOCK
	)	: NOVALUE =
BEGIN

LOCAL
	SCB		: REF $BBLOCK,
	USER_RECORD	: REF VECTOR
	;

SCB = .RAB[RAB$L_CTX];
USER_RECORD = SCB[PSM$Q_USER_RECORD];

USER_RECORD[SIZE] = .RAB[RAB$W_RSZ];
USER_RECORD[ADDR] = .RAB[RAB$L_RBF];

PSM$REPORT (SCB);

END;

%SBTTL 'READ_FILE_ERR'
! Functional Description:
!		This routine is the AST error completion routine for RMS
!		read errors.  Completion is reported through PSM$REPORT
!		along with the error.
!
! Formal Parameters:
!		RAB	: address of RMS RAB block
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
ROUTINE READ_FILE_ERR ( 
	RAB	: REF $BBLOCK
	)	: NOVALUE =
BEGIN

LITERAL
	K_MAX_RMS_BUF = %X '7FFF'
	;

LOCAL
	SCB	: REF $BBLOCK
	;

SCB = .RAB[RAB$L_CTX];


SELECTONEU .RAB[RAB$L_STS] OF

    SET

    [RMS$_EOF]:
	RAB[RAB$L_STS]  = PSM$_EOF;

    [RMS$_RTB]:
	BEGIN
	BIND RAB = .SCB[PSM$A_RAB] : $BBLOCK;
	LOCAL SIZE;
	SIZE = .RAB[RAB$W_USZ];
	IF .SIZE LSSU K_MAX_RMS_BUF
	THEN
	    BEGIN
	    LIB$FREE_VM (SIZE, .RAB[RAB$L_UBF]);
	    SIZE = .SIZE * 2;
	    IF .SIZE GTRU K_MAX_RMS_BUF
	    THEN
		SIZE = K_MAX_RMS_BUF;
	    LIB$GET_VM (SIZE, RAB[RAB$L_UBF]);
	    RAB[RAB$W_USZ] = .SIZE;
	    RAB[RAB$B_RAC] = RAB$C_RFA;
	    $GET (RAB=RAB, SUC=READ_FILE_AST, ERR=READ_FILE_ERR);
	    RETURN;
	    END
	ELSE
	    PSM$STORE_ERRORS (.SCB,
		PSM$_READERR, 1, SCB[PSM$Q_FILE_SPECIFICATION],
		.RAB[RAB$L_STS], .RAB[RAB$L_STV]);
	END;

    [OTHERWISE]:
	PSM$STORE_ERRORS (.SCB, PSM$_READERR, 1, SCB[PSM$Q_FILE_SPECIFICATION],
	    .RAB[RAB$L_STS], .RAB[RAB$L_STV]);

    TES;

PSM$REPORT (SCB, RAB[RAB$L_STS]);

END;

%SBTTL 'READ_LIBRARY_USER'
! Functional Description:
!		This routine handles read function calls for the library
!		at non-ast level.
!
! Formal Parameters:
!		STANDARD INPUT ROUTINE CALLING INTERFACE
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
ROUTINE READ_LIBRARY_USER ( 
	SMB_CONTEXT	: REF $LONGWORD,
	USER_CONTEXT	: REF VECTOR,
	FUNCTION	: REF $LONGWORD,
	FUNC_DESC	: REF VECTOR,
	FUNC_ARG	: REF VECTOR
	)	=
BEGIN

BUILTIN AP;

LOCAL SCB : REF $BBLOCK;

SCB = .SMB_CONTEXT[];

SELECTONEU .FUNCTION[] OF
    SET

    [PSM$K_READ]:
	BEGIN
	LOCAL READ_STATUS;
	FUNC_DESC[SIZE] = 0;
	VECTOR [SCB[PSM$Q_RFA], 0] = 0;
	VECTOR [SCB[PSM$Q_RFA], 1] = 0;
	READ_STATUS = LBR$GET_RECORD (SCB[PSM$L_LIBRARY_INDEX], 0,
	    SCB[PSM$Q_USER_RECORD], SCB[PSM$Q_RFA]);
	IF NOT .READ_STATUS
	THEN
	    IF .READ_STATUS EQL RMS$_EOF
	    THEN
		RETURN PSM$_EOF
	    ELSE
		BEGIN
		IF .$BBLOCK [READ_STATUS, STS$V_FAC_NO] EQL RMS$_FACILITY
		THEN
		    PSM$STORE_ERRORS (.SCB,
			PSM$_READERR, 1, SCB[PSM$Q_LIBRARY_SPECIFICATION],
			.READ_STATUS, LBR$RET_RMSSTV ())
		ELSE
		    PSM$STORE_ERRORS (.SCB,
			PSM$_READERR, 1, SCB[PSM$Q_LIBRARY_SPECIFICATION],
			.READ_STATUS);
		END;
	END;

    [PSM$K_OPEN]:
	BEGIN
	RETURN_IF_ERROR_ (CALLG (.AP, OPEN_LIBRARY));
	RETURN_IF_ERROR_ (CALLG (.AP, OPEN_LIBRARY_MODULE));
	FUNC_ARG[0] = PSM$K_CC_INTERNAL;
	END;

    [PSM$K_CLOSE]:
	RETURN_IF_ERROR_ (CLOSE_LIBRARY (.SCB));

    [PSM$K_POSITION_TO_KEY]:
	BEGIN
	VECTOR [SCB[PSM$Q_RFA], 0] = .VECTOR [.FUNC_DESC[ADDR], 0];
	VECTOR [SCB[PSM$Q_RFA], 1] = .VECTOR [.FUNC_DESC[ADDR], 1];
	END;

    [PSM$K_GET_KEY]:
	BEGIN
	FUNC_DESC[SIZE] = PSM$S_RFA;
	FUNC_DESC[ADDR] = SCB[PSM$Q_RFA];
	END;

    [OTHERWISE]:
	RETURN PSM$_FUNNOTSUP;

    TES;

SS$_NORMAL

END;

%SBTTL 'RESUME'
! Functional Description:
!		This routine is scheduled at AST level by non-ast level
!		routines which must report completion at AST level.
!
! Formal Parameters:
!		SCB	: SCB address
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
ROUTINE RESUME ( 
	SCB		: REF $BBLOCK
	)		: NOVALUE =
BEGIN

! Return both the SCB address and the non-ast level status by reference
!
PSM$REPORT (SCB, SCB[PSM$L_NON_AST_STATUS]);

END;

%SBTTL 'SCHEDULE_USER_LEVEL'
! Functional Description:
!		This routine schedules other routines to be called at
!		non-ast level.
!
! Formal Parameters:
!		SCB			: address of SCB
!		AST_LEVEL_ROUTINE	: address of AST routine that is to
!					  be called when non-ast completes
!		AST_PARAMETER		: paramater to pass to ast routine
!		USER_LEVEL_ROUTINE	: address of non-ast routine
!		USER_LEVEL_ARG_COUNT	: non-ast routine argument count
!		USER_LEVEL_ARG_LIST	: address non-ast routine argument list
!
! Implicit Inputs:
!		none
!
! Implicit Outputs:
!		none
!
! Returned Value:
!		none
!
! Side Effects:
!		none
!--
ROUTINE SCHEDULE_USER_LEVEL ( 
	SCB	: REF $BBLOCK,
	AST_LEVEL_ROUTINE,
	AST_PARAMETER,
	USER_LEVEL_ROUTINE,
	USER_LEVEL_ARG_COUNT,
	USER_LEVEL_ARG_LIST
	)	: NOVALUE =
BEGIN

BUILTIN
	ACTUALCOUNT,
	ARGPTR
	;

LOCAL
	ARG_DESC : VECTOR [2];

ARG_DESC [SIZE] = ACTUALCOUNT () * 4;
ARG_DESC [ADDR] = ARGPTR () + 4;

SIGNAL_IF_ERROR_ (PSM$SCHEDULE_NON_AST  (ARG_DESC));

END;

END
ELUDOM
