	$BEGIN	RMS0SRCH,000,RM$RMS,<SEARCH FOR NEXT WILDCARD FILE>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility: rms32
;
; Abstract:
;	this is the highest level routine to perform the
;	$remove and $search functions
;
; Environment:
;	vax/vms
;
; Author:
;	tim halvorsen	AUG-1979
;
; Modified By:
;
;	V03-014	JEJ0026		J E Johnson		11-Apr-1984
;		Tie off invalid network operations.
;
;	V03-013	DGB0022		Donald G. Blair		06-Mar-1984
;		Use full-length FIB to support access mode protected
;		files.  Also change RM$RETDIRBDB to RETDIRBDB, a local
;		routine.
;
;	V03-012	RAS0219		Ron Schaefer		 8-Dec-1983
;		Change references to FWA$T_SWB subfield to separate structure.
;
;	V03-011	RAS0201		Ron Schaefer		17-Oct-1983
;		Correct calls to RM$PARSE_FILE to account for the fact
;		that it does NOT necessarily preserve R7.
;		Make sure we got a name, type and/or version from ESA/ESL.
;
;	V03-010	KBT0585		Keith B. Thompson	12-Aug-1983
;		Cleanup fwa constants
;
;	V03-009	KBT0559		Keith B. Thompson	20-Jul-1983
;		Convert DNF and FNF errors into NMF after a sucessful
;		search list operation
;
;	V03-008	KBT0533		Keith B. Thompson	1-Jun-1983
;		Turn on search list processing and remove ref. to
;		RM$SKIP_SUBTREE (this was a JSB to a SSB!)
;
;	V03-007	RAS0122		Ron Schaefer		 1-Feb-1983
;		Complete KBT0472 by correcting a problem that would
;		leave an IFAB marked busy if the saved NAM block IFI
;		was incorrect.
;
;	V03-006	KBT0472		Keith B. Thompson	24-Jan-1983
;		Fix some code i don't understand
;
;	V03-005	RAS0103		Ron Schaefer		19-Nov-1982
;		Correct saving of the caller's access mode so that
;		exits via RM$EX_NOSTR have the caller's mode in R7;
;		and correct DMW4004 to correctly save the mode in the IFB.
;
;	V03-004	DMW4004		DMWalp			 2-Sep-1982
;		Added code so that RMS$FABCHK was not called twice;
;		it was called directly and then again in RM$FSETI
;
;	V03-003	KBT0194		Keith B. Thompson	23-Aug-1982
;		Reorganize psects
;
;	V03-002	KRM0058		K Malik			10-Aug-1982
;		Changed FWA$B_UNDERLINE symbol to FWA$B_UNDER_DEV
;		(to distinguish it from new FWA$B_UNDER_NOD symbol).
;
;--
;


	.SBTTL	DEFINITIONS

;
; symbol definitions
;

	$IODEF
	$RMSDEF
	$SSDEF
	$BDBDEF
	$DEVDEF
	$FABDEF
	$FIBDEF
	$FWADEF
	$IFBDEF
	$IMPDEF
	$NAMDEF
	$FSCBDEF
	$SWBDEF

	.SBTTL	RMS$SEARCH, Search for next Filename in Sequence

;++
;
; RMS$SEARCH
;
;	Search for next filename in sequence
;
; RMS$REMOVE
;
;	Remove a directory entry
;
; inputs:
;
;	ap = address of user argument list
;	wcc of nam block contains ifi of wildcard ifab
;
; outputs:
;
;	result name string is returned to user buffer
;	fid/did in nam block
;
;--

	$ENTRY	RMS$REMOVE
	MOVZBL	#IO$_DELETE,-(SP)	; set acp function code = remove
	BRB	COMMON

	$ENTRY	RMS$SEARCH
	MOVZBL	#IO$_ACCESS,-(SP)	; set acp function code = search
					; this cannot be popped until ret
					; since rm$fset saves the sp for stall
COMMON:	$TSTPT	SEARCH

;
; Get ifab and fwa addresses from ifi which resides in wcc
; of nam block.
;

	BSBW	RM$FABCHK		; check fab validity returns only if ok
					; r11 = impure area
					; r8 = fab address
					; r7 = caller's access mode
	BEQL	10$			; check IFI
	RMSERR  IFI			; error if IFI non-zero
	BRB	20$

10$:	PUSHL	R7			; save caller's mode
	MOVL	FAB$L_NAM(R8),R7	; get nam address
	BSBW	RM$CHKNAM		; check nam validity
	MOVL	R7,R6			; copy nam addr
	MOVL	(SP)+,R7		; restore caller's mode
	BLBC	R0,20$			; if error
					;  take the 'nostruct' error exit
	BITW	NAM$L_WCC+2(R6),-	; check to see that no spurious bits
		#^C<<NAM$M_SVCTX!-	; other than the IFI bit, the search
		     NAM$M_SRCHNMF-	; NMF bit, or the save context bit are 
		     @-16>!1>		; set within the field NAM$L_WCC
	BNEQ	ERRWCC			; error if illegal wcc value
	BBC	#NAM$V_SRCHNMF,-	; if NMF has been encountered,
		NAM$L_WCC(R6),30$	; then go immediately return 
	RMSERR	NMF			; a status of NMF
20$:	BRB	ENS

30$:	MOVZWL	NAM$L_WCC(R6),R9	; get ifi of previous ifab
	BEQL	50$			; branch if none

	BBC	#NAM$V_IFI,-		; if the IFI bit is not set then
		NAM$L_WCC(R6),50$	;  context has not been saved
	MOVW	R9,FAB$W_IFI(R8)	; set internal ifi into fab
	BSBW	RM$FSET_ALT1		; setup with ifi in fab
	ADDL2	#4,IMP$L_SAVED_SP(R11)	; adjust FSET saved sp for acp code
	BBC	#IFB$V_SEARCH,(R9),40$	; branch if not our type of ifab
	MOVL	IFB$L_FWA_PTR(R9),R10	; get fwa
	BNEQ	SRCH			; branch if have one
40$:	CSB	#IFB$V_BUSY,(R9)	; don't leave this IFAB marked busy

;
; No previous context can be found, parse the expanded name
; string and proceed.
;

50$:	BSBW	RM$FSETI_ALT		; allocate ifab/ifi
	ADDL2	#4,IMP$L_SAVED_SP(R11)	; adjust FSET saved sp for acp code
	MOVL	FAB$L_NAM(R8),R7	; get nam address
	BSBW	RM$CHKNAM		; check nam validity
	BLBC	R0,EXIT1		; quit on failure
	BSBW	RM$RECOVER_FWA		; recover fwa context
	BLBC	R0,EXIT1		; branch if error


;
; Context has been recovered.  Check device characteristics. continue only 
; for directory structured devices.
;

SRCH:	BBS	#FWA$V_NODE,(R10),NTSRCH; branch if network operation
	BBC	#DEV$V_DIR,-		; error if illegal device
		IFB$L_PRIM_DEV(R9),ERRIOP 
	BBS	#DEV$V_SPL,-		; error if spooled device
		IFB$L_AS_DEV(R9),ERRIOP 

;
; Get the next file in sequence
;

	TSTW	FWA$T_FIBBUF+FIB$W_DID(R10) ; new directory needed?
	BNEQ	READ_DIR		; branch if not
	BRW	NEXT_DIR		; and get next directory

ERRIOP:	RMSERR	IOP			; illegal device type
EXIT1:	BRW	EXIT			; exit cleaning up ifab

ERRWCC:	RMSERR	WCC			; illegal wcc value
ENS:	BRW	RM$EX_NOSTR		; exit without ifab with status

;
; Perform network search function.
;

NTSRCH:	BBS	#IFB$V_NSP,(R9),ERRIOP	; search of node::"task=abc" is invalid

	CMPB	#IO$_DELETE,(SP)	; Is this a search or a remove op?
	BNEQ	5$			; Branch if a search operation
	BSBW	NT$REMOVE		; its a remove...
	BRB	EXIT1			; branch aid to home

5$:	CLRL	R0			; clear first-time-thru flag
	BBS	#IFB$V_ACCESSED,(R9),10$ ; branch if already connected to fal
	BSBW	NT$ACCESS		; establish logical link with fal
	BLBC	R0,20$			; branch on failure
					; note, first-time-thru flag is now set!
10$:	BSBW	NT$SEARCH		; perform search at remote node
	BLBC	R0,30$			; branch on failure
	SSB	#IFB$V_FILEFOUND,(R9)	; indicate at least one file found
	BRW	COPY_RESULT		; branch aid
20$:	RMSERR	FND,R1			; set default error code
	BSBW	RM$MAPERR		; map ss error to rms error if possible
	BRB	EXIT1			; branch aid
30$:	BRW	ERROR			; branch aid

;
; If we are saving context (ifab/fwa) and we are searching a wildcard
; specification and no directory file has been read yet, then read the
; directory file into memory to optimize on obtaining file names.
;

READ_DIR:
	MOVL	IFB$L_LAST_FAB(R9),R8	; get fab address
	BBC	#IFB$V_SEARCH,(R9),-	; branch if not saving context
		NEXT_FILE
	BBC	#FWA$V_WILDCARD,(R10),-	; branch if non-wild string
		NEXT_FILE
	TSTL	FWA$L_DIRBDB(R10)	; directory file read yet?
	BNEQ	NEXT_FILE		; if so, don't read again
	JSB	RM$READDIR		; read directory into memory
	BLBC	R0,NEXT_FILE		; branch if unable to read
	MOVL	R7,FWA$L_DIRBDB(R10)	; save bdb address

;
; Get the file name pattern from the expanded name string
;

NEXT_FILE:
	MOVL	FAB$L_NAM(R8),R7	; and recover nam address again
	BSBW	RM$CHKNAM		; check nam validity
	BLBC	R0,EXIT2		; quit on failure
	MOVZBL	NAM$B_ESL(R7),R6	; length of expanded string
	BEQL	ERRESL			; error if none
	MOVL	NAM$L_ESA(R7),R7	; address of expanded string
	IFNORD	R6,(R7),ERRESA		; error if cannot read buffer
	MOVZWL	#FSCB$C_BLN,R2		; get size of FSCB
	BSBW	RM$GETSPC1		; allocate it
	BLBC	R0,EXIT2		; exit on error
	PUSHL	R11			; save impure area
	MOVL	R1,R11			; put FSCB in correct reg
	JSB	RM$SCAN_STRING		; scan the string
	MOVQ	FSCB$Q_NAME(R11),R0	; get name
	BNEQ	10$			; got one
	MOVQ	FSCB$Q_TYPE(R11),R0	; how about type
	BNEQ	20$			; got one
	MOVQ	FSCB$Q_VERSION(R11),R0	; try version
	BRB	30$			; exit
10$:	ADDW2	FSCB$Q_TYPE(R11),R0	; add type
20$:	ADDW2	FSCB$Q_VERSION(R11),R0	; add version
30$:	MOVW	R0,FWA$Q_RNS(R10)	; set string descriptor length (no flags)
	MOVL	R1,FWA$Q_RNS+4(R10)	;  and address
	MOVL	R11,R4			; get ready to return
	POPL	R11			; restore impure area
	MOVZWL	#FSCB$C_BLN,R2		;
	BSBW	RM$RETSPC1		; return FSCB
	TSTW	FWA$Q_RNS(R10)		; valid string for ACP?
	BNEQ	SETFIB

ERRESA:	RMSERR	ESA			; set esa error
	BRB	EXIT2

ERRESL:	RMSERR	ESL			; set esl error
EXIT2:	BRW	EXIT

.ENABL	LSB

;
; Setup fib fields
;

SETFIB:	MOVAB	FWA$T_FIBBUF(R10),R1		; fib address
	MOVW	#FIB$M_WILD,FIB$W_NMCTL(R1)	; set wildcarding on
	MOVL	#FIB$C_LENGTH,FWA$Q_FIB(R10)	; create fib descriptor
	MOVL	R1,FWA$Q_FIB+4(R10)
	MOVZWL	#FWA$S_NAMEBUF+-
		FWA$S_TYPEBUF+FWA$S_VERBUF,-
		FWA$Q_NAME(R10)			; set length of result buffer

;
; If remove and the nam fop bit is set, set fib bit to do
; find via fid rather than by name.
;

	CMPB	(SP),#IO$_DELETE		; remove function?
	BNEQ	20$				; branch if not
	BBC	#FAB$V_NAM,FAB$L_FOP(R8),20$	; branch if nam bit not set
	TSTL	FIB$W_DID(R1)			; fid supplied?
	BEQL	20$				; branch if not
	SSB	#FIB$V_FINDFID,FIB$W_NMCTL(R1)	; find by fid

;
; If the directory file has already been read into virtual
; memory, then skip the call to the acp and look in memory
; for the next file name in sequence.
;

20$:	CMPB	(SP),#IO$_ACCESS		; access function?
	BNEQ	22$				; only on searches
	MOVL	FWA$L_DIRBDB(R10),R7		; is there a directory in memory?
	BEQL	22$				; call acp if not
	MOVQ	FWA$Q_RNS(R10),R2		; pass descriptor of file name
	JSB	RM$DIRSCAN			; find the next find in sequence
	BRB	24$				; re-join after acp call

;
; Call acp for next file in this directory
;

22$:	MOVL	(SP),R0				; get acp function code
	CLRQ	-(SP)				; p5/p6 = 0
	PUSHAB	FWA$Q_NAME(R10)			; p4 = result descriptor
						; also input to acp as previous
						; position (file) in directory
	PUSHAB	IFB$L_RNS_LEN(R9)		; p3 = longword to receive length
						; also input to acp as previous
						; position (file) in directory
	PUSHAB	FWA$Q_RNS(R10)			; p2 = name descriptor
	BSBW	RM$FCPFNC			; call acp and wait for reply
24$:	BLBC	R0,ACPERR			; branch if error from acp
	SSB	#IFB$V_FILEFOUND,(R9)		; indicate at least one file found
	BRW	COPY_RESULT			; and copy result string

ACPERR:	BBC	#FWA$V_WILD_DIR,(R10),25$	; if there are no wild directories 
						; report fnf if none were
	CMPW	R0,#SS$_NOSUCHFILE		; no files in directory at all?
	BEQL	NEXT_DIR			; if so, get next directory
	CMPW	R0,#SS$_NOMOREFILES		; no more files in directory?
	BEQL	NEXT_DIR			; if so, get next directory
	CLRW	FWA$T_FIBBUF+FIB$W_DID(R10)	; mark fresh directory needed
	MOVL	FWA$L_SWB_PTR(R10),R1		; get SWB ptr
	SSB	#SWB$V_TRAVERSE,-		; set to skip rest of subtree
		SWB$B_FLAGS(R1)
	CMPW	R0,#SS$_BADIRECTORY		; bad directory format?
	BEQL	NEXT_DIR			; ignore bad directories on traversal
25$:	RMSERR	FND,R1				; set default error
	BSBW	RM$MAPERR			; map error to rms error
	BRB	ERROR				; process other type of error

;
; If no more files in directory, skip to next directory
;

NEXT_DIR:
	BSBW	RETDIRBDB			; deallocate directory buffer
	BBS	#DEV$V_SDI,IFB$L_PRIM_DEV(R9),- ; nmf if sdi device
		ERRNMF
	JSB	RM$NEXTDIR			; get next directory
	BLBC	R0,ERROR			; if error, copy result and exit
	CLRL	FWA$T_FIBBUF+FIB$L_WCC(R10)	; start at 1st file in directory
	BRW	READ_DIR			;  and then get next file

ERRNMF:	RMSERR	NMF				; no more files

;
; If there is no wild card directory and the user did not specify NAM$V_SVCTX,
; then the ACP is maintaining context and we should just return the error
; it gave us.
;
; If we are maintaining context (wild directory or NAM$V_SVCTX), then we should
; convert NMF to FNF based on FILEFOUND bit.
;

ERROR:	BBC	#IFB$V_SEARCH,(R9),35$		; we are not keeping context
	BBS	#IFB$V_FILEFOUND,(R9),35$	; skip if file found
	CMPW	R0,#RMS$_NMF&^XFFFF		; and error was NMF
	BNEQ	35$	

;
; If there was a wild directory, move the expanded name string from
; the namblk to the resultant name string and return file not found
;

	BBC	#FWA$V_WILD_DIR,(R10),35$	; branch if dir not wild
	MOVL	IFB$L_LAST_FAB(R9),R8		; get the last fab's addr
	MOVL	FAB$L_NAM(R8),R7		; get the name block addr
	BSBW	RM$CHKNAM			; check nam validity
	BLBC	R0,44$				; quit on failure
	CLRB	NAM$B_RSL(R7)			; assume can't set result string
	MOVZBL	NAM$B_RSS(R7),R2		; get length of resultant buffer
	MOVAL	@NAM$L_RSA(R7),R3		; get addr of resultant buffer
	IFNOWRT R2,(R3),50$			; probe the resultant string buff
						;  error if can't write it
	MOVZBL	NAM$B_ESS(R7),R2  		; get the buffer size into longword
	MOVAL	@NAM$L_ESA(R7),R1		; get addr of expanded buffer
	IFNORD	R2,(R1),50$			; probe the expanded string buff
						;  error if can't read it
	MOVZBL	NAM$B_ESL(R7),R2		; get the string's actual length 
	MOVB	R2,NAM$B_RSL(R7)		; stuff the resultant length
	MOVC3	R2,(R1),(R3)			; move the expanded string 
						;  to the resultant string 
	RMSERR	FNF				; restore the error
	BRB	50$				;  and continue

;
; Error has occurred - setup file name so that when result
; name string is copied, the file string sent to acp is returned.
;

35$:	BBS	#FWA$V_NODE,(R10),COPY_RESULT 	; branch if network operation
	PUSHL	R0				; save status code
	MOVZWL	FWA$Q_RNS(R10),IFB$L_RNS_LEN(R9); set length of string
	MOVC3	FWA$Q_RNS(R10),@FWA$Q_RNS+4(R10),-
		FWA$T_NAMEBUF(R10)
	POPL	R0				; restore status

;
; Copy result file name to user result buffer
; unless no file was found
;

COPY_RESULT:
	PUSHL	R0				; save status code
	MOVL	IFB$L_LAST_FAB(R9),R8		; get fab address
	MOVL	FAB$L_NAM(R8),R7		; set nam address
	BSBW	RM$CHKNAM			; check nam validity
	BLBC	R0,42$				; quit on failure
	BSBW	RM$COPY_RESULT			; copy result name string
	BLBC	R0,42$				; branch if error
	POPL	R0				; restore status code
	BRB	50$				;  and continue
42$:	ADDL	#4,SP				; ignore saved status code
44$:	BRB	EXIT				;  and report one from copy_result

;
; If not remove, copy fid and did into nam block
;

50$:	CMPB	(SP),#IO$_DELETE		; remove function?
	BEQL	60$				; if so, skip this
	BBS	#FWA$V_NODE,(R10),60$		; skip also if network operation

	ASSUME	FIB$W_DID	EQ	FIB$W_FID+6
	ASSUME	NAM$W_DID	EQ	NAM$W_FID+6

	MOVQ	FWA$T_FIBBUF+FIB$W_FID(R10),NAM$W_FID(R7)
	MOVL	FWA$T_FIBBUF+FIB$W_FID+8(R10),NAM$W_FID+8(R7)

;
; If this is a temporary ifab/fwa created for this call
; only, then save the current acp position in the directory
; file and cleanup all internal structures.
;

60$:	BBS	#IFB$V_SEARCH,(R9),65$		; branch if ifab to be saved
	BLBC	R0,NMF				; go set NMF bit if any error
	MOVZWL	FWA$T_FIBBUF+FIB$L_WCC(R10),-	; save acp position
		NAM$L_WCC(R7)
	BRB	EXIT

;
; This is a permanent ifab/fwa (that is, it is kept around between
; calls in order to speed up things or keep extended context)
; If the status was successful or not enough privilege,
; then keep the wildcard sequence context around so that
; search can be called again.  else, cleanup everything.
;

65$:	BLBS	R0,70$				; continue sequence if successful
	CMPW	R0,#RMS$_NMF&^XFFFF		; done with wildcard sequence?
	BEQL	CHKLST				; if so, terminate sequence
	CMPW	R0,#RMS$_FNF&^XFFFF		; file not found?
	BEQL	CHKLST				; if so, terminate sequence
	BBC	#FWA$V_WILD_DIR,(R10),NMF	; if nonwild, cleanup
	TSTL	FAB$L_STV(R8)			; error from acp?
	BEQL	NMF				; if not, terminate sequence
70$:	CLRW	FAB$W_IFI(R8)			; mbz for subsequent operations on fab
	BRW	RM$EXRMS			; exit without cleaning up

NMF:	MOVL	#NAM$M_SRCHNMF,NAM$L_WCC(R7)	; indicate that another search isn't
						; to be done with this NAM
EXIT:	BRW	RM$CLSCU			; cleanup ifab and buffers

.DSABL LSB

;
; We are about to exit with No More Files or File Not Found, before we
; really do, check to see if there was a search list, if so try to
; parse a new string and if successful search for a new file
;

CHKLST:	BBC	#FWA$V_SLPRESENT,(R10),NMF	; are search list present?
	SSB	#FWA$V_SL_PASS,(R10)		; indicate search list parse
	PUSHL	NAM$L_WCC(R7)			; save wild card context
	PUSHL	R7				; save NAM blk ptr
	BSBW	RM$PARSE_FILE			; parse a new string
	POPL	R7				; restore NAM blk ptr
	POPL	NAM$L_WCC(R7)			; restore wcc
	BLBC	R0,10$				; branch if error
	BRW	SRCH				; go search new string

;
; If there was a file found on some previous search operation then
; convert DNF and FNF errors into NMF
;

10$:	BBC	#IFB$V_FILEFOUND,(R9),NMF	; no previous file found
	CMPW	R0,#RMS$_DNF&^XFFFF		; directory not found
	BEQL	20$				; yes, convert it
	CMPW	R0,#RMS$_FNF&^XFFFF		; file not found
	BNEQ	NMF				; no exit
20$:	RMSERR	NMF				; convert the error
	BRB	NMF				; exit


	.SBTTL	RM$COPY_RESULT, Return Result Name String

;++
;
; RM$COPY_RESULT
;
;	Construct the result name string and return to
;	the caller via the rsa and rss fields of the nam.
;
; inputs:
;
;	r7		= address of NAM
;	r9 		= address of ifab
;	r10 		= address of fwa
;	ifb$l_rns_len 	= length of new file name
;	fwa$t_namebuf 	= new file name string
;	fwa$q_device 	= descriptor of device name
;	fwa$q_dir1-8 	= descriptors of directory names
;	fwa$b_dirlen 	= number of directory levels
;	fwa$b_dirterm 	= directory specification terminator
;
; outputs:
;
;	result string buffer is output if requested.
;	NAM$L_FNB 
;
;--

RM$COPY_RESULT::
	BBS	#FWA$V_NODE,(R10),5$		; branch if network operation
	MOVL	IFB$L_RNS_LEN(R9),-		; set length of file name
		FWA$Q_NAME(R10)
	BBC	#FWA$V_DIR,(R10),5$		; skip if no directory in spec
	BBC	#FWA$V_WILD_DIR,(R10),5$	;  or if there are no wild directories
	SUBB3	#1,FWA$B_DIRLEN(R10),R0		; get number of subdirectory levels
	INSV	R0,#FWA$V_DIR_LVLS,-		; return current # of subdir.
		#FWA$S_DIR_LVLS,(R10)		;  levels in the FWA
	INSV	R0,#NAM$V_DIR_LVLS,-		; return current # of subdir.
		#NAM$S_DIR_LVLS,-		;  levels in the NAM
		NAM$L_FNB(R7)
	MOVB	FWA$B_DIRWCFLGS(R10),-		; if any ellipses were found,
		NAM$L_FNB+3(R7)			;  set the appropriate wild
						;  flags in the nam blk
5$:	MOVAB	B^10$,AP			; address of expstring arg list
	PUSHL	NAM$W_FID(R7)			; save contents of nam fid
	CLRL	NAM$W_FID(R7)			; clear fid so expstring will work
	BSBW	RM$EXPSTRING			; return result name string
	POPL	NAM$W_FID(R7)			; restore contents of nam fid
	RSB

10$:	.BYTE	NAM$L_RSA			; offset to result buffer addr.
	RMSERR_WORD	RST			; error of bad buffer
	RMSERR_WORD	RSS			; error of buffer too short

	.SBTTL	RETDIRBDB, Deallocate Directory Buffer and BDB

;++
;
; RETDIRBDB
;
;	This routine deallocates the directory buffer and the bdb
;	which is associated with it.
;
; inputs:
;
;	r10 = fwa address
;	r9 = ifab address
;	fwa$l_dirbdb = address of directory bdb
;
; outputs:
;
;	none
;--
;

RETDIRBDB:
	MOVL	FWA$L_DIRBDB(R10),R4	; is there a directory in memory?
	BEQL	10$			; branch if not
	PUSHL	R10			; save r10
	MOVL	R9,R10			; rm$retbdb wants ifb address in r10
	BSBW	RM$RETBDB		; deallocate it if there is
	POPL	R10			; restore r10
	CLRL	FWA$L_DIRBDB(R10)	; and clear pointer
10$:	RSB

	.END
