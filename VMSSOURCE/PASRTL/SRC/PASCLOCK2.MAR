	.TITLE	PAS$CLOCK2 - Return process CPU time in msec
	.IDENT	/1-002/			; File: PASCLOCK2.MAR Edit: DG1002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Pascal Language Support
;
; ABSTRACT:
;
;	This module contains PAS$CLOCK2 which implements the Pascal
;	CLOCK function.
;
; ENVIRONMENT: User mode, AST Reentrant
;
; AUTHOR: Steven B. Lionel, CREATION DATE: 6-July-1981
;
; MODIFIED BY:
;
; 1-001	- Original. SBL 6-July-1981
; 1-002 - Use $GETJPIW to ensure synchronous operation.  DG 31-Oct-1983
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;

$JPIDEF				; JPI$_ symbols

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL		; Force all external symbols to be declared
	.EXTRN	LIB$GET_EF	; Get event flag number
	.EXTRN	LIB$FREE_EF	; Free event flag number
	.EXTRN	LIB$SIGNAL	; Signal error
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _PAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	PAS$CLOCK2 - Return process CPU time in msec
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine returns the process's elapsed CPU time in
;	milliseconds as the function value.
;
; CALLING SEQUENCE:
;
;	cpu_time.wl.v = PAS$CLOCK2 ()
;
; FORMAL PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The current process's elapsed CPU time in milliseconds.
;
; SIDE EFFECTS:
;
;	Allocates and deallocates a local event flag number.
;
;	SS$_INTOVF, integer overflow, if the CPU time in milliseconds is
;	greater than 2**31-1
;
;	If LIB$GET_EF or $GETJPI returns an error status, that status
;	is signalled.  This should not occur in normal operation.
;--

	.ENTRY	PAS$CLOCK2, ^M<IV>	; Entry point

	SUBL2	#24, SP			; Make room for EFN, value and item list
	PUSHAB	20(SP)			; Address of EFN
	CALLS	#1, G^LIB$GET_EF	; Get an event flag number
	BLBC	R0,ERROR		; Skip if error
	MOVW	#4, 0(SP)		; Buffer length
	MOVW	#JPI$_CPUTIM, 2(SP)	; Item code
	MOVAB	16(SP), 4(SP)		; Buffer address
	CLRQ	8(SP)			; No return length address
					; End of list marker of zero
	MOVL	SP, R0			; Save item list address
	$GETJPIW_S EFN=20(R0),ITMLST=(R0); Call $GETJPI
	BLBC	R0, ERROR		; Skip if error
	PUSHAB	20(SP)			; Address of EFN
	CALLS	#1, G^LIB$FREE_EF	; Free the event flag number
	MULL3	#10, 16(SP), R0		; $GETJPI returns CPU time in
					; 10 msec units, convert to 1 msec.
					; This operation might overflow.

	RET				; Return to caller

;+
; Come here with error code in R0 if LIB$GET_EF or $GETJPI fails.
;-
ERROR:	PUSHL	R0			; Signal error status
	CALLS	#1, G^LIB$SIGNAL
	CLRL	R0			; Return zero if continue
	RET				; Return to caller

	.END				; End of module PAS$CLOCK2
