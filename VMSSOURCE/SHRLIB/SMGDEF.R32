! *********************************************************************************************************************************
!  Created 15-SEP-1984 22:52:02  by  VAX-11 SDL V2.0       Source: 15-SEP-1984 22:49:47 _$255$DUA28:[SMGRTL.SRC]SMGDEF.SDL;1       
! *********************************************************************************************************************************
 
 
!*** MODULE $SMGDEF ***
!  Definitions for RTL Screen Management
! 
!  Input terminator codes
! 
!  Control characters
literal SMG$K_TRM_CTRLA = 1;            !  SOH
literal SMG$K_TRM_CTRLB = 2;            !  STX
literal SMG$K_TRM_CTRLC = 3;            !  ETX
literal SMG$K_TRM_CTRLD = 4;            !  EOT
literal SMG$K_TRM_CTRLE = 5;            !  ENQ
literal SMG$K_TRM_CTRLF = 6;            !  ACK
literal SMG$K_TRM_CTRLG = 7;            !  BEL
literal SMG$K_TRM_CTRLH = 8;            !  BS
literal SMG$K_TRM_CTRLI = 9;            !  HT
literal SMG$K_TRM_CTRLJ = 10;           !  LF
literal SMG$K_TRM_CTRLK = 11;           !  VT
literal SMG$K_TRM_CTRLL = 12;           !  FF
literal SMG$K_TRM_CTRLM = 13;           !  CR
literal SMG$K_TRM_CTRLN = 14;           !  SO
literal SMG$K_TRM_CTRLO = 15;           !  SI
literal SMG$K_TRM_CTRLP = 16;           !  DLE
literal SMG$K_TRM_CTRLQ = 17;           !  DC1
literal SMG$K_TRM_CTRLR = 18;           !  DC2
literal SMG$K_TRM_CTRLS = 19;           !  DC3
literal SMG$K_TRM_CTRLT = 20;           !  DC4
literal SMG$K_TRM_CTRLU = 21;           !  NAK
literal SMG$K_TRM_CTRLV = 22;           !  SYN
literal SMG$K_TRM_CTRLW = 23;           !  ETB
literal SMG$K_TRM_CTRLX = 24;           !  CAN
literal SMG$K_TRM_CTRLY = 25;           !  EM
literal SMG$K_TRM_CTRLZ = 26;           !  SUB
!  Synonyms for control characters
literal SMG$K_TRM_BS = 8;
literal SMG$K_TRM_HT = 9;
literal SMG$K_TRM_LF = 10;
literal SMG$K_TRM_CR = 13;
!  Keypad keys
literal SMG$K_TRM_PF1 = 256;
literal SMG$K_TRM_PF2 = 257;
literal SMG$K_TRM_PF3 = 258;
literal SMG$K_TRM_PF4 = 259;
literal SMG$K_TRM_KP0 = 260;
literal SMG$K_TRM_KP1 = 261;
literal SMG$K_TRM_KP2 = 262;
literal SMG$K_TRM_KP3 = 263;
literal SMG$K_TRM_KP4 = 264;
literal SMG$K_TRM_KP5 = 265;
literal SMG$K_TRM_KP6 = 266;
literal SMG$K_TRM_KP7 = 267;
literal SMG$K_TRM_KP8 = 268;
literal SMG$K_TRM_KP9 = 269;
literal SMG$K_TRM_ENTER = 270;
literal SMG$K_TRM_MINUS = 271;
literal SMG$K_TRM_COMMA = 272;
literal SMG$K_TRM_PERIOD = 273;         !  Cursor positioning keys
literal SMG$K_TRM_UP = 274;
literal SMG$K_TRM_DOWN = 275;
literal SMG$K_TRM_LEFT = 276;
literal SMG$K_TRM_RIGHT = 277;
!  Function keys
literal SMG$K_TRM_F6 = 286;
literal SMG$K_TRM_F7 = 287;
literal SMG$K_TRM_F8 = 288;
literal SMG$K_TRM_F9 = 289;
literal SMG$K_TRM_F10 = 290;
literal SMG$K_TRM_F11 = 291;
literal SMG$K_TRM_F12 = 292;
literal SMG$K_TRM_F13 = 293;
literal SMG$K_TRM_F14 = 294;
literal SMG$K_TRM_HELP = 295;           !  F15
literal SMG$K_TRM_DO = 296;             !  F16
literal SMG$K_TRM_F17 = 297;
literal SMG$K_TRM_F18 = 298;
literal SMG$K_TRM_F19 = 299;
literal SMG$K_TRM_F20 = 300;
!  Editing keys
literal SMG$K_TRM_FIND = 311;           !  E1
literal SMG$K_TRM_INSERT_HERE = 312;    !  E2
literal SMG$K_TRM_REMOVE = 313;         !  E3
literal SMG$K_TRM_SELECT = 314;         !  E4
literal SMG$K_TRM_PREV_SCREEN = 315;    !  E5
literal SMG$K_TRM_NEXT_SCREEN = 316;    !  E6
!  Synonyms for editing keys
literal SMG$K_TRM_E1 = 311;             !  FIND
literal SMG$K_TRM_E2 = 312;             !  INSERT_HERE
literal SMG$K_TRM_E3 = 313;             !  REMOVE
literal SMG$K_TRM_E4 = 314;             !  SELECT
literal SMG$K_TRM_E5 = 315;             !  PREV_SCREEN
literal SMG$K_TRM_E6 = 316;             !  NEXT_SCREEN
!  Conditions
literal SMG$K_TRM_CANCELLED = 508;      !  I/O cancelled by SMG$CANCEL_INPUT
literal SMG$K_TRM_TIMEOUT = 509;        !  Timeout period expired
literal SMG$K_TRM_BUFFER_FULL = 510;    !  Buffer is full
literal SMG$K_TRM_UNKNOWN = 511;        !  Unknown terminator
! 
!  Key definition attributes
! 
literal SMG$M_KEY_NOECHO = 1;
literal SMG$M_KEY_TERMINATE = 2;
literal SMG$M_KEY_LOCK = 4;
literal SMG$M_KEY_PROTECTED = 8;
literal SMG$M_KEY_SETSTATE = 16;
literal SMG$S_KEY_DEF_ATTR = 4;
macro SMG$V_KEY_NOECHO = 0,0,1,0 %;     !  Don't echo strings
macro SMG$V_KEY_TERMINATE = 0,1,1,0 %;  !  This key terminates read
macro SMG$V_KEY_LOCK = 0,2,1,0 %;       !  Lock new state
macro SMG$V_KEY_PROTECTED = 0,3,1,0 %;  !  Definition is protected
macro SMG$V_KEY_SETSTATE = 0,4,1,0 %;   !  Definition sets a state (output only)
!  SCREEN MANAGEMENT REQUEST TYPES 
literal SMG$C_CHANGE_RENDITION = 10;    !  SMG$CHANGE_RENDITION
literal SMG$C_DELETE_CHARS = 11;        !  SMG$DELETE_CHARS
literal SMG$C_ERASE_DISPLAY = 12;       !  SMG$ERASE_DISPLAY
literal SMG$C_ERASE_LINE = 13;          !  SMG$ERASE_LINE
literal SMG$C_HOME_CURSOR = 14;         !  SMG$HOME_CURSOR
literal SMG$C_INSERT_CHARS = 15;        !  SMG$INSERT_CHARS
literal SMG$C_INSERT_LINE = 16;         !  SMG$INSERT_LINE
literal SMG$C_PUT_CHARS = 17;           !  SMG$PUT_CHARS
literal SMG$C_PUT_LINE = 18;            !  SMG$PUT_LINE
literal SMG$C_PUT_DISPLAY_ENCODED = 19; !  SMG$PUT_VIRTUAL_DISPLAY_ENCODED
literal SMG$C_RETURN_CURSOR_POS = 20;   !  SMG$RETURN_CURSOR_POS
literal SMG$C_PUT_WITH_SCROLL = 21;     !  SMG$PUT_WITH_SCROLL
literal SMG$C_SET_CURSOR_ABS = 22;      !  SMG$SET_CURSOR_ABS
literal SMG$C_SET_CURSOR_REL = 23;      !  SMG$SET_CURSOR_REL
literal SMG$C_DELETE_LINE = 24;         !  SMG$DELETE_LINE
literal SMG$C_ERASE_CHARS = 25;         !  SMG$ERASE_CHARS
literal SMG$C_SCROLL_DISPLAY_AREA = 26; !  SMG$SCROLL_DISPLAY_AREA
literal SMG$C_CHANGE_VIRTUAL_DISPLAY = 27; !  SMG$CHANGE_VIRTUAL_DISPLAY
literal SMG$C_LABEL_BORDER = 28;        !  SMG$LABEL_BORDER
literal SMG$C_END_DISPLAY_UPDATE = 29;  !  SMG$END_DISPLAY_UPDATE
!  Character Set Codes
literal SMG$C_UNITED_KINGDOM = 0;
literal SMG$C_ASCII = 1;
literal SMG$C_SPEC_GRAPHICS = 2;        !  Special Graphics
literal SMG$C_ALT_CHAR = 3;             !  Alternate - Standard Char.
literal SMG$C_ALT_GRAPHICS = 4;         !  Alternate - Special Graphics
! 
! 	The following constants define corner cursor positions used in
! 	SMG$HOME_CURSOR.
! 
literal SMG$C_UPPER_LEFT = 0;
literal SMG$C_LOWER_LEFT = 1;
literal SMG$C_UPPER_RIGHT = 2;
literal SMG$C_LOWER_RIGHT = 3;
! 
! 	The following constants define label positions used in
! 	SMG$LABEL_BORDER.
! 
literal SMGK_TOP = 0;
literal SMGK_BOTTOM = 1;
literal SMGK_LEFT = 2;
literal SMGK_RIGHT = 3;
! 
!         DEFINE BIT MASKS AND VALUES FOR SCREEN ATTRIBUTES
! 
literal SMG$M_BOLD = 1;
literal SMG$M_REVERSE = 2;
literal SMG$M_BLINK = 4;
literal SMG$M_UNDERLINE = 8;
literal SMG$M_NORMAL = 0;               !  no bits set 
! 
! 	DEFINE BITS, MASKS, AND FIELDS FOR THE CONTROL MODES.
! 
literal SMG$M_BUF_ENABLED = 1;
literal SMG$M_MINUPD = 2;
literal SMG$M_CLEAR_SCREEN = 4;
literal SMG$M_NOTABS = 8;
literal SMG$K_BUF_ENABLED = 0;          !  Enable Buffering bitvector index
literal SMG$K_MINUPD = 1;               !  Enable minimal update bitvector index
literal SMG$K_CLEAR_SCREEN = 2;         !  Clear screen on exit
literal SMG$K_NOTABS = 3;               !  Don't use physical tabs
! 
! 	Master color wheel for screen background colors.
! 
literal SMG$C_COLOR_UNKNOWN = 0;
literal SMG$C_COLOR_WHITE = 1;
literal SMG$C_COLOR_BLACK = 2;
! 
!  The following constants correspond to the internal types defined
!  in SMGTERM.REQ.  These names used to be for public use - the SMGTERM names
!  used to be needed for compatibility with SCR$ and SMG$ code.
!  Use of these names is now very highly discouraged.
! 
literal SMG$K_UNKNOWN = 0;              !  non-graphics or unknown type
literal SMG$K_VT05 = 1;                 !  vt05 series terminal
literal SMG$K_VT52 = 2;                 !  vt52 series terminal
literal SMG$K_VT100 = 3;                !  vt100 series terminal
literal SMG$K_VTFOREIGN = 4;            !  foreign terminal (ft1-8)
literal SMG$K_HARDCOPY = 5;             !  hardcopy device
! 
! 	The following masks define values to be used
! 	to specify a display attribute.  These may be added
! 	together to specify multiple attributes.
! 
literal SMG$M_BORDER = 1;
literal SMG$M_TRUNC_ICON = 2;
literal SMG$M_DISPLAY_CONTROLS = 4;
literal SMG$M_UP = 1;
literal SMG$M_DOWN = 2;
literal SMG$M_RIGHT = 4;
literal SMG$M_LEFT = 8;
literal SMG$K_FIRST_PRIV_TYPE = 191;
literal SMG$S_SMGDEF = 32;
macro SMG$R_SMGDEF_BITS = 0,0,8,0 %;
macro SMG$V_BOLD = 0,0,1,0 %;           !  Bold rendition
macro SMG$V_REVERSE = 0,1,1,0 %;        !  Reverse video rendition
macro SMG$V_BLINK = 0,2,1,0 %;          !  Blink rendition
macro SMG$V_UNDERLINE = 0,3,1,0 %;      !  Underline rendition
macro SMG$R_SMGMODE_BITS = 0,0,8,0 %;
macro SMG$V_BUF_ENABLED = 0,0,1,0 %;    !  Enable buffering
macro SMG$V_MINUPD = 0,1,1,0 %;         !  Enable minimal update (default)
macro SMG$V_CLEAR_SCREEN = 0,2,1,0 %;   !  Clear screen on exit
macro SMG$V_NOTABS = 0,3,1,0 %;         !  Don't use physical tabs
macro SMG$R_DISPLAY_ATTRIBUTES = 0,0,8,0 %;
literal SMG$S_DISPLAY_ATTRIBUTES = 1;
macro SMG$V_BORDER = 0,0,1,0 %;         !  Display is bordered
macro SMG$V_TRUNC_ICON = 0,1,1,0 %;     !  Truncation icon enabled if set
macro SMG$V_DISPLAY_CONTROLS = 0,2,1,0 %; !  Display carriage controls if set
! 
! 	When an out-of-band AST triggers, the user's AST routine
! 	will get called.  The first argument passed to his
! 	routine is the address of a Band Information Table.
! 	The offsets into this table are described below.
! 	To make it easy to access from certain languages,
! 	the table is arranged so that it is convenient to
! 	reference it as a longword vector as well as a byte block.
! 
macro SMG$R_BAND_INFORMATION_TABLE = 0,0,0,0 %;
literal SMG$S_BAND_INFORMATION_TABLE = 12;
macro SMG$L_PASTEBOARD_ID = 0,0,32,0 %; !  Pasteboard ID
macro SMG$L_ARG = 4,0,32,0 %;           !  User's AST argument
macro SMG$R_CHARACTER_OVERLAY = 8,0,32,0 %;
macro SMG$B_CHARACTER = 8,0,8,0 %;      !  The character typed
macro SMG$L_CHARACTER = 8,0,32,0 %;     !  The character and 3 spaces
! 	When SMG$GET_PASTEBOARD_ATTRIBUTES is called,
! 	it returns data in a pasteboard information block.
! 	The following structure is used to reference fields
! 	in this block.
! 	Items marked with a plus (+) will be 0 unless the
! 	device is a terminal (DEVCLASS=DC$_TERM).
macro SMG$R_PASTEBOARD_INFO_BLOCK = 0,0,0,0 %;
literal SMG$S_PASTEBOARD_INFO_BLOCK = 32;
macro SMG$L_DEVCHAR = 0,0,32,0 %;       !  Device characteristics
macro SMG$L_DEVDEPEND = 4,0,32,0 %;     !  Specific characteristics (1)
macro SMG$L_DEVDEPEND2 = 8,0,32,0 %;    !  Specific characteristics (2)
macro SMG$B_DEVCLASS = 12,0,8,0 %;      !  Device class (e.g. DC$_TERM)
macro SMG$B_SMG_DEVTYPE = 13,0,8,0 %;   !  Internal SMG device type
macro SMG$B_PHY_DEVTYPE = 14,0,8,0 %;   !  Physical device type (e.g. DT$_VT100)
macro SMG$B_ROWS = 15,0,8,0 %;          !  Number of rows on device
macro SMG$W_WIDTH = 16,0,16,0 %;        !  Terminal width
macro SMG$B_COLOR = 18,0,8,0 %;         !  Reserved for future use
macro SMG$B_PARITY = 19,0,8,0 %;        !  Parity attributes (+)
macro SMG$W_SPEED = 20,0,16,0 %;        !  Terminal Speed (+)
macro SMG$W_FILL = 22,0,16,0 %;         !  Fill characteristics (+)
macro SMG$W_CURSOR_ROW = 24,0,16,0 %;   !  Row where physical cursor is
!  (1-origin)
macro SMG$W_CURSOR_COL = 26,0,16,0 %;   !  Col where physical cursor is
!  (1-origin)
macro SMG$L_CURSOR_DID = 28,0,32,0 %;   !  Display id of topmost
!  display that cursor is in.
!  0 if cursor is not in a
!  virtual display
! 
! 	Directions are set up as a structure, assuming that directions
! 	may be combined in the future (ie. diagonal movement).
! 
macro SMG$R_SCROLL_DIRS = 0,0,8,0 %;
literal SMG$S_SCROLL_DIRS = 1;
macro SMG$V_UP = 0,0,1,0 %;             !  Scroll up
macro SMG$V_DOWN = 0,1,1,0 %;           !  Scroll down
macro SMG$V_RIGHT = 0,2,1,0 %;          !  Scroll right
macro SMG$V_LEFT = 0,3,1,0 %;           !  Scroll left
