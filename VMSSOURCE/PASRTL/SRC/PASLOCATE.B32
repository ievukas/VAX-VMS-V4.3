MODULE PAS$LOCATE ( %TITLE 'LOCATE procedure'
		IDENT = '1-001'			! File: PASLOCATE.B32 Edit: SBL1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains PAS$LOCATE, which implements the
!	VAX-11 Pascal LOCATE procedure.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 23-December-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 23-December-1981
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$LOCATE: NOVALUE;			! Do a LOCATE

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!

%SBTTL 'PAS$LOCATE - LOCATE procedure'
GLOBAL ROUTINE PAS$LOCATE (				! Do a LOCATE
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	COMPONENT: REF VECTOR [, LONG],			! Component number
	ERROR						! Unwind address if error
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAS$LOCATE implements the VAX-11 Pascal LOCATE procedure.  It
!	positions the file at the specified component, and enters
!	Generation mode.
!
! CALLING SEQUENCE:
!
!	CALL PAS$LOCATE (PFV.mr.r, COMPONENT.rlu.r [, ERROR.j.r])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	COMPONENT	- The number of the file component to locate.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  if an error occurs.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Places file in Generation mode
!
! SIGNALLED ERRORS:
!
!	FILNOTOPE - File not open
!	FILNOTDIR - File not opened for direct access
!	
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,		! File control block
	PFV_ADDR: VOLATILE,				! Enable argument
	UNWIND_ACT: VOLATILE,				! Enable argument
	ERROR_ADDR: VOLATILE;				! Enable argument

    BUILTIN
	ACTUALCOUNT;

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);

    IF ACTUALCOUNT () GEQU 3
    THEN
	ERROR_ADDR = .ERROR;				! Set unwind address

    !+
    ! Set PFV address enable argument.
    !-

    PFV_ADDR = PFV [PFV$R_PFV];

    !+
    ! Validate and lock PFV
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Open file if it should be implicitly opened.
    !-

    IF NOT .PFV [PFV$V_VALID]
    THEN
	PAS$$OPEN_IMPLICIT (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! Verify that the file is open.
    !-

    IF NOT .PFV [PFV$V_OPEN]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTOPE,0);

    !+
    ! Verify that the file is opened for direct access
    !-

    IF NOT .FCB [FCB$V_DIRECT]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTDIR,0);

    !+
    ! Undefine file buffer
    !-

    PFV [PFV$V_DFB] = 0;

    !+
    ! Store the component number in FCB$L_COMPONENT and set FCB$V_LOCATE.
    ! This will cause a subsequent PUT to write to the specified record.
    !-

    FCB [FCB$L_COMPONENT] = .COMPONENT [0];
    FCB [FCB$V_LOCATE] = 1;

    !+
    ! Set Generation mode
    ! Indicate at EOF
    ! Indicate successful completion
    ! Unlock the file
    !-

    FCB [FCB$V_INSPECTION] = 0;
    FCB [FCB$V_GENERATION] = 1;
    FCB [FCB$V_EOF] = 1;
    FCB [FCB$L_STATUS] = 0;
    PFV [PFV$V_LOCK] = 0;

    RETURN;

    END;					! End of routine PAS$LOCATE

!<BLF/PAGE>

END						! End of module PAS$LOCATE

ELUDOM
