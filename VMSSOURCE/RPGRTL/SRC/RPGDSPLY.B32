MODULE RPG$DSPLY( %TITLE 'DSPLY an item'
		IDENT = '1-004'			! file RPGDISPLY.B32 EDIT:DG1004
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:	RPGII SUPPORT
!
! ABSTRACT:
!
!	This module contains the RTL routine that supports the RPG DSPLY 
!	opcode.
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: Debess Grabazs, CREATION DATE: 18-March-1983
!
! MODIFIED BY:
!
! 1-001 - Original version. DG 18-Mar-1983.
! 1-002 - use routine COB$$RET_A_AB_PREV to get address of COB$$AB_PREV.
!	  MDL 29-Aug-1983
! 1-003 - Create temporary for overpunched numeric before calling
!	  COB$ACC_SCR.  In case of invalid entry, original value will
!	  be saved. DG 30-Aug-1983.
! 1-004 - Set RPG for calls to both COB$ACC_SCR and COB$DISP_SCR.
!	  DG 24-Oct-1983.
!
!--
!<BLF/PAGE>

%SBTTL 'Declarations'
!+
! PROLOGUE FILE:
!-

REQUIRE 'RTLIN:RPGPROLOG';			! Switches, PSECTs, macros,
						!  linkages and LIBRARYs

!+
! LINKAGES
!	NONE
!-

!+
! TABLE OF CONTENTS:
!-

FORWARD ROUTINE
	RPG$DSPLY: NOVALUE;

!+
! INCLUDE FILES
!	NONE
!-

!+
! MACROS
!	NONE
!-

!+
! EQUATED SYMBOLS
!	NONE
!-

!+
! EXTERNAL REFERENCES
!-

EXTERNAL ROUTINE
	COB$ACC_SCR,					! ACCEPT with conversion
	COB$DISP_SCR,					! DISPLAY with conversion
	COB$$RET_A_AB_PREV,				! Return address of table giving
							! call history for advancing purposes
	LIB$SIGNAL;					! Signal warning and continue execution

EXTERNAL LITERAL
	RPG$_INVNUMENT;					! Invalid numeric entry warning

EXTERNAL
	RPG$BTZ;					! Table for translate blank to zero

%SBTTL 'RPG$DSPLY - DSPLY an item'
GLOBAL ROUTINE RPG$DSPLY(
			FLAGS,
			DISPLAY_FIELD:	REF BLOCK[,BYTE],
			ACCEPT_FIELD:	REF BLOCK[,BYTE]
			): NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine supports the RPG DSPLY opcode.
!
! CALLING SEQUENCE:
!	
!	CALL RPG$DSPLY (flags.fl.v [,display_field.rx.dx]
!			[,accept_field.mx.dx])
!
! FORMAL PARAMETERS:
!
!	flags			bit 0 is set on if a comma should be
!				used in place of decimal point; bit 1
!				is set on if blanks in an overpunched
!				numeric field should be treated as
!				equivalent to zeroes.
!
!	display_field		data item whose value is displayed.
!
!	accept_field		data item whose value is displayed and
!				a new value is accepted into.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--    

    BEGIN

    LITERAL
	TRUE		= 1,
	DISP		= 0,

	DEC_IS_COMMA_BIT= 1,
	BTZ_BIT		= 2,
	CONVERT_BIT	= 32,
	COMMA_BIT	= 64,
	PROTECT_BIT	= 256,
	RPG_BIT		= 2048;

    LOCAL
	COB$$AB_PREV,				! Call history for advancing purposes
	DEV :	WORD,				! 2-byte array -
						!  device number + error
						!  handling decider
	FLAG,					! Attributes bit vector
	NRO_FLAG : INITIAL (0),			! Indicates if dealing with overpunched numeric
	TEMP_NRO : BLOCK [12,BYTE] VOLATILE,	! Temporary string descriptor
	TEMP_STRING : VECTOR [15,BYTE];		! Temporary string - this assumes an overpunched 
						!  numeric string will only have, at most, 15 digits, 
						!  a sign and a decimal point 
    BUILTIN
	ACTUALCOUNT;

    !+
    !
    ! Get address of history of previous call.
    ! Note that using it this way will affect the whole longword
    ! at the address, and not just the first byte.
    !
    !-
    COB$$AB_PREV = COB$$RET_A_AB_PREV();

    !+
    !
    ! Set up FLAG parameter.
    !
    !-
    FLAG = CONVERT_BIT + RPG_BIT;		! Conversion and RPG
    IF (.FLAGS AND DEC_IS_COMMA_BIT) NEQ 0
    THEN FLAG = .FLAG + COMMA_BIT;		! Decimal is comma

    !+
    !
    ! Deal with DISPLAY_FIELD.
    !
    !-
    IF .DISPLAY_FIELD NEQ 0
    THEN
	BEGIN

	IF (.DISPLAY_FIELD[DSC$B_DTYPE] EQL DSC$K_DTYPE_NRO) AND
	   ((.FLAGS AND BTZ_BIT) NEQ 0)
	THEN 
	    !+
	    ! Convert blanks to zeroes if flag is set.
	    !-
	    CH$TRANSLATE (RPG$BTZ, 
			  .DISPLAY_FIELD[DSC$W_LENGTH], .DISPLAY_FIELD[DSC$A_POINTER],
			  0, .DISPLAY_FIELD[DSC$W_LENGTH], .DISPLAY_FIELD[DSC$A_POINTER]);

	.COB$$AB_PREV = DISP;			! Set up history for proper advancing
	!+
	! Display the field.
	!-
	COB$DISP_SCR (1, .DISPLAY_FIELD, .FLAG);

	END;

    !+
    !
    ! Deal with ACCEPT_FIELD.
    !
    !-
    IF  (ACTUALCOUNT() EQL 3 AND .ACCEPT_FIELD NEQ 0)
    THEN
	BEGIN
	
	IF (.ACCEPT_FIELD[DSC$B_DTYPE] EQL DSC$K_DTYPE_NRO) AND
	   ((.FLAGS AND BTZ_BIT) NEQ 0)
	THEN 
	    !+
	    ! Convert blanks to zeroes if flag is set.
	    !-
	    CH$TRANSLATE (RPG$BTZ, 
			  .ACCEPT_FIELD[DSC$W_LENGTH], .ACCEPT_FIELD[DSC$A_POINTER],
			  0, .ACCEPT_FIELD[DSC$W_LENGTH], .ACCEPT_FIELD[DSC$A_POINTER]);

	.COB$$AB_PREV = DISP;			! Set up history for proper advancing
	!+
	! Display the field.
	!-
	COB$DISP_SCR (1, .ACCEPT_FIELD, .FLAG);

	FLAG = .FLAG OR PROTECT_BIT;		! Protect 
	WHILE TRUE DO
	!+
	! Keep ACCEPTing until successful.
	!-
	BEGIN

	    BIND
		ZERO = UPLIT ('0');

	    .COB$$AB_PREV = DISP;		! Set up history for proper advancing
	    IF .ACCEPT_FIELD [DSC$B_DTYPE] EQL DSC$K_DTYPE_NRO
	    THEN
		NRO_FLAG = TRUE;
	    IF .NRO_FLAG
	    THEN
		BEGIN
		!+
		! Overpunched numeric string must be saved because 
		! COB$ACC_SCR zeroes it out and if there is invalid
		! input, the original string must be available in
		! case the user responds to the reprompt with a <CR>.
		!-
		TEMP_NRO [DSC$W_LENGTH] = .ACCEPT_FIELD [DSC$W_LENGTH];
		TEMP_NRO [DSC$B_DTYPE] = DSC$K_DTYPE_NRO;
		TEMP_NRO [DSC$A_POINTER] = TEMP_STRING;
		IF .ACCEPT_FIELD [DSC$B_CLASS] EQL DSC$K_CLASS_SD
		THEN
		    BEGIN

		    TEMP_NRO [DSC$B_CLASS] = DSC$K_CLASS_SD;
		    TEMP_NRO [DSC$B_SCALE] = .ACCEPT_FIELD [DSC$B_SCALE];
		    TEMP_NRO [DSC$B_DIGITS] = .ACCEPT_FIELD [DSC$B_DIGITS];

		    END
		ELSE
		    TEMP_NRO [DSC$B_CLASS] = DSC$K_CLASS_S;

		!+
		! Initialize the temporary string.
		!-
	    	CH$MOVE (.ACCEPT_FIELD [DSC$W_LENGTH], 
			.ACCEPT_FIELD [DSC$A_POINTER], 
			TEMP_STRING);

		END;
		
	!+
	! Accept into the field.
	!-
	    IF ( COB$ACC_SCR (0, (IF .NRO_FLAG	
				 THEN TEMP_NRO
				 ELSE .ACCEPT_FIELD), 
			     .FLAG, 0, 0, 0, 0) )
	    THEN EXITLOOP
	    ELSE 
		BEGIN
		!+
		! Error - print warning and re-prompt.
		!-
		LIB$SIGNAL (RPG$_INVNUMENT);
		.COB$$AB_PREV = DISP;		! Set up history for proper advancing

		END;

	END;

	IF .NRO_FLAG
	THEN 
	    !+
	    ! Move accepted string from temporary to actual accept field.
	    !-
	    CH$MOVE (.ACCEPT_FIELD [DSC$W_LENGTH], TEMP_STRING, 
			.ACCEPT_FIELD [DSC$A_POINTER]);

	END;

    END;

END ELUDOM
