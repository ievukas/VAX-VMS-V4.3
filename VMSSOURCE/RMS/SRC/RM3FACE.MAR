	$BEGIN	RM3FACE,000,RM$RMS0FACE,<INTERFACE BETWEEN BLISS AND MARS>,-
							<NOWRT,PIC,LONG>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
;
; Abstract:
;
;		This is a bunch of interface routines between
;		rms-32 written in mars and rms-32 isam in bliss.
;
; Environment:
;
;		VAX/VMS OPERATING SYSTEM
;
;
; Author: W. Koenig     creation date: 4-APR-1978
;
; MODIFIED BY:
;
;	V03-025	JWT0178		Jim Teague		22-Jun-1984
;		Check for UFO in RM$RND_DEV to avoid prologue
;		processing.
;
;	V03-024	DAS0001		David Solomon		25-Mar-1984
;		Fix broken branches.
;
;	V03-023	DGB0017		Donald G. Blair		02-Mar-1984
;		Allocate full-length FIB to support access mode protected
;		files.
;
;	V03-022	SHZ0001		Stephen H. Zalewski	06-Feb-1983
;		Modify RM$RND_DEV to return false if device is either
;		foreign or non random access (tape).  This prevents copy from
;		attempting to read the prologue from a foreign disk (bugcheck).
;
;	V03-021 MCN0001		Maria del C. Nasr	28-Mar-1983
;		Modify RM$IALLO3, RM$IKEYO3, and RM$ISUMO3 routines to
;		push parameters in the stack to use general linkages.
;
;	V03-020	RAS0133		Ron Schaefer		16-Mar-1983
;		Add $XABCXRDEF macro to fix up RAS0132.
;
;	V03-019	RAS0132		Ron Schaefer		15-Mar-1983
;		Change $RMSRDEF references to $RJRDEF.
;		Make XCONN03_ARGS and XABCRE_ARGS local.
;		Fix bug in XABCRE_ARGS by adding end of table marker.
;
;	V03-018 TMK0004		Todd M. Katz		24-Feb-1983
;		IRB$V_UPDATE is not being cleared on subsequent $GET/$FINDs. 
;		Make sure this bit is cleared within RM$GET3 and RM$FIND3.
;
;	V03-017	RAS0124		Ron Schaefer		15-Feb-1983
;		Change MCN0007 to ignore RM$XAB_SCAN for $CREATE on
;		record-oriented devices opened for block I/O.
;		This prevents a subsequent bugcheck trying to access the prolog.
;
;	V03-016 TMK0003		Todd M. Katz		08-Jan-1983
;		Add support for Recovery Unit Journalling and RU ROLLBACK
;		Recovery of ISAM Files. Modifications have been made to
;		RM$FIND3, RM3UPDATE3, RM3PUT3, and RM$DELETE3. These 
;		modifications are basically all the same. Within these routines
;		RMS first checks to see whether this operation is taking place 
;		as part of the ROLLBACK Recovery of a prematurely terminated
;		or aborted Recovery Unit. If so, then then in each case the
;		ISAM RU ROLLBACK routine, RM$RU_RECOVER is called with the 
;		operation as the sole input parameter. When control returns,
;		the recovery operation completes by calling RM$EXRMS.
;
;	V03-015	RAS0118		Ron Schaefer		18-Jan-1983
;		Change MCN0007 to ignore errors returned by RM$XAB_SCAN
;		on the implicit $DISPLAY from $CREATE.
;
;	V03-014 TMK0002		Todd M. Katz		12-Jan-1983
;		Make a change to RM$DELETE3. Change a CLRL (of IRB$W_UDR_ID) to 
;		a CLRW.
;
;	V03-013	RAS0109		Ron Schaefer		15-Dec-1982
;		Add $XABxxxDEF references needed by MCN0007.
;
;	V03-012	LJA0044		Laurie J. Anderson	 7-Dec-1982
;		Deallocate the key buffers and related buffer and call
;		rm$discommon (to deallocate the IRAB) on restart error.
;
;	V03-011 MCN0009		Maria del C. Nasr	02-Dec-1982
;		Add routine RM$RND_DEV to be called by RM$CREATE3B.
;		It determines if the device where a file is being created
;		is disk or tape.  Do not do display after creating
;		indexed file in magtape since no prologue is written.
;
;	V03-010	MCN0008		Maria del C. Nasr	01-Dec-1982
;		In routine RM$EXTEND3, calculate total allocation for
;		given area and store in AREA$L_TOTAL_ALLOC.
;
;	V03-009	MCN0007		Maria del C. Nasr	01-Dec-1982
;		Add an implicit display of the key, allocation, and
;		summary XABs after $CREATE.
;
;	V03-008	LJA0039		Laurie J. Anderson	 8-Nov-1982
;		Add a call to XAB_SCAN for restoring NRP for ISAM files.
;		Also, while in here ... alphabetized the modules for easier
;		finding.  Took out expand macro directive for $AREADEF
;
;	V03-007	KBT0165		Keith B. Thompson	23-Aug-1982
;		Reorganize psects
;
;	V03-006	KBT0113		Keith B. Thompson	6-Aug-1982
;		Remove ref. to upd_sifb_eof
;
;	V03-005 LJA0014		Laurie Anderson		29-Jul-1982
;		Fix a truncation error.
;
;	V03-004	KBT0104		Keith B. Thompson	19-Jul-1982
;		Fix another broken branch
;
;	V03-003	KBT0093		Keith B. Thompson	14-Jul-1982
;		Fix broken branch
;
;	V03-002 TMK0001		Todd M. Katz		17-Jun-1982
;		Implement the cluster RMS next record context solution.
;
;		When a $REWIND is done, as the NRP structure has been removed,
;		zero out the next record positioning fields (IRB$L_CUR_VBN, 
;		IRB$W_CUR_ID, IRB$W_CUR_COUNT, IRB$W_POS_ID, IRB$L_POS_VBN, 
;		IRB$L_SIDR_VBN, IRB$L_UDR_VBN, IRB$W_UDR_ID) in the IRAB, and 
;		set the current key of reference (for next record positioning)
;		field also in the IRAB (IRB$B_CUR_KREF) to that which is 
;		specified in the RAB. Also clear the current record and 
;		end-of-file bits.
;
;		During a $UPDATE/$PUT, the subfields IRB$L_PUTUP_VBN and
;		IRB$W_PUTUP_ID are used to retrieve the RFA of the record
;		just put or updated for use in unlocking the record. In 
;		addition it will only be necessary to unlock this primary
;		data record if the bit IRAB$V_UNLOCK_RP is set. What is
;		important is that the internal current record, and thus the
;		next record does not change because of the $PUT or $UPDATE,
;		regardless of the access mode in which it is done.
;
;	V03-001 LJA0007		Laurie Anderson 	25-Mar-1982
;		Change KBUFSZ to reference a macro when computing buffer 
;		size and make IFB$B_KBUFSZ a word, now: IFB$W_KBUFSZ.
;
;--

;
; Include Files:
;
;	[11,20]lib.mlb and [201,10]r.mlb
;
; Macros:
;

	$RMSDEF
	$RJRDEF
	$DEVDEF
	$BDBDEF
	$RLSDEF
	$RABDEF
	$IRBDEF
	$IFBDEF
	$FIBDEF
	$FABDEF
	$AREADEF
	$XABDEF
	$XABALLDEF
	$XABCXRDEF
	$XABKEYDEF
	$XABSUMDEF

;
; Equated Symbols:
;
;
; Own Storage:
;
; Table of XABs to be displayed after an indexed file is created.
;
XABCRE_ARGS:
	.BYTE	XAB$C_SUM, XAB$C_SUMLEN, XBC$C_OPNSUM3
	.BYTE	XAB$C_KEY, XAB$C_KEYLEN_V2, XBC$C_OPNKEY3
	.BYTE	XAB$C_ALL, XAB$C_ALLLEN, XBC$C_OPNALL3
	.BYTE	0						; end of table

XCONN03_ARGS:
	.BYTE	XAB$C_CXR,XAB$C_CXRLEN,XBC$C_XCONN03
	.BYTE	0						; end of table

;++
;
; RM$ALLOC3 - this routine is a bliss/mars interface.  called from rm3allbkt.
;
; Calling sequence:
;	rm$alloc3()
;
; Input Parameters:
;	r7 - address of area descriptor
;	r10 - address of internal fab
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	r1 - start vbn
;	r2 - vbn plus one of last vbn allocated
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	none
;
;--

RM$ALLOC3::
	PUSHR	#^M<R3,R4,R5,R6>	; save registers that are clobbered by extend

;
; allocate a fib to do extend
;

	MOVZBL	#FIB$C_LENGTH,R2	; size of fib
	BSBW	RM$GETSPC1		; get space for fib
	BLBC	R0,20$			; if error, get out

;
; if the deq(area_desc) is zero then default to the higher of rtde(ifab) and
; arbktsz(area_desc).  in any case, allocate an even number of buckets.
;

	MOVZBL	AREA$B_ARBKTSZ(R7),R0	; # of vbn's to a bucket
	MOVZWL	AREA$W_DEQ(R7),R2	; area's default extend quantity
	BNEQ	10$			; if it doesn't exists,
	MOVZWL	IFB$W_RTDEQ(R10),R2	; use default run time quantity instead
10$:	CMPL	R2,R0			; compare extend quantity to bucket size
	BGEQU	15$			; if less than one bucket
	MOVL	R0,R2			; use bucket size as extend quntity
15$:	CLRL	R3			; quotient is quad word
	EDIV	R0,R2,AP,R3		; check if extend quantity is even multiple of bucket size
	TSTL	R3			; if remainder is non_zero,
	BEQL	18$			; then not even multiple
	SUBL2	R3,R0			; calc number to add to reach even multiple
	ADDL2	R0,R2			; make extend quantity even multiple
18$:	MOVL	R2,FIB$L_EXSZ(R1)	; store quantity in fib
	MOVL	AREA$L_CVBN(R7),FIB$L_LOC_ADDR(R1) ; locate extend near last one
	BSBW	RM$EXTEND0_ALT		; do extend
	MOVL	R6,R2			; change output register
20$:	POPR	#^M<R3,R4,R5,R6>
	RSB




;++
;
; RM$CONNECT3 - interfaces between rms0connect and rm3connect
;
; Calling sequence:
;	entered via a case statement (branch) from rms$connect
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	Mostly just passing through.
;
;	If this is a restart connect operation, then call XAB_SCAN which 
;	will call XCONN03 to copy all Next Record Positioning information 
;	into the keybuffers and IRAB for restarting.
;
;--

RM$CONNECT3::
	JSB	RM$CONNECT3B
	BLBC	R0,10$
	BBC	#IRB$V_RESTART,(R9),5$	; If not restarting, just exit
	PUSHL	AP			; Save ap - needed by XAB_SCAN
	MOVAB	XCONN03_ARGS,AP		; arguments to XAB_SCAN
	BSBW	RM$XAB_SCAN		; call XAB_SCAN to copy NRP info
	POPL	AP			; restore the ap
	BLBS	R0,5$			; restart was a success
	PUSHAB	W^RM$EX_NIRAB_SHR	; return PC to STACK (i.e., to fake a BSBW)
	BBC	#IRB$V_PPF_IMAGE,(R9),10$	; branch if not INDIRECT PPF
	MOVAB	W^RM$EXRMS,(SP)		; take structured exit
	BSBW	RM$DISCONNECT3B		; deallocate all the ISAM related buffers
	BRW	RM$DISCOMMON		; deallocate the IRAB and rest of stuff
					; and exit with error (status in R0)	
5$:	BRW	RM$EXSUC		; exit w/ success
10$:	BRW	RM$EX_NIRAB_SHR		; exit on error


;++
;
; RM$CREATE3 - interfaces between rms0create and rm3create
;
; Calling sequence:
;	entered via a case statement (branch) from rm$create
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--


RM$CREATE3::

;
; do random device test here where the device characteristics bits can be defined
;

	BBS	#IFB$V_BIO,-
		IFB$B_FAC(R9),4$	; any device is ok for bio access
	BBC	#DEV$V_RND,-
		IFB$L_PRIM_DEV(R9),20$
4$:	CLRL	IFB$L_IDX_PTR(R9)	; clear pointer to index(may not be done yet)
	JSB	RM$CREATE3B
	BBC	#FAB$V_CIF,FAB$L_FOP(R8),5$
	CMPL	#1,R0			; cif and normal = open
	BEQL	30$
5$:	BLBC	R0,10$			; if error from create, branch
	PUSHL	R0			; save success code returned from create
	BBC	#DEV$V_RND,-		; if not disk, do not do display
		IFB$L_PRIM_DEV(R9),15$
	MOVAB	XABCRE_ARGS,AP		; prepare table address for display
	BSBW	RM$XAB_SCAN		; do display of sum, key, and all XABs
	BRB	15$			; exit with success from create
10$:	PUSHL	R0			; push error code in stack
	MOVL	R9,R10			; setup shared ifab for return of space in close
	BSBW	RM$CLOSE3		; give back key descriptors
15$:	JMP	RM$CREATEXIT1		; R0 already in stack
20$:	RMSERR	DEV
	JMP	RM$CLSCU
30$:	JMP	RM$OPEN_CIF


;++
;
; RM$DELETE3 - this routine interfaces common delete
;	with delete for indexed file org
;
; Calling sequence:
;	entered via a case statement (branch) from rms$delete
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--

RM$DELETE3::
	BBC	#IFB$V_RU_RECVR,-	; if the current operation has been
		IFB$B_RECVRFLGS(R10),5$ ; done within the context of a Recovery
	MOVZBL	#RJR$_DELETE,-(SP)	; Unit ROLLBACK, then call the common
	JSB	RM$RU_RECOVER		; RU ROLLBACK routine to direct the
	BRB	20$			; UNDO operation, and then go finish up

5$:	BBSC	#IRB$V_PUTS_LAST,(R9),10$ ; clear the last operation
					; was a put sequential flag.
10$:	JSB	RM$DELETE3B
	CLRL	IRB$L_UDR_VBN(R9)
	CLRW	IRB$W_UDR_ID(R9)
20$:	CLRL	RAB$W_RFA(R8)
	CLRW	RAB$W_RFA+4(R8)
	BRW	RM$EXRMS



;++
;
; RM$DISCONNECT3 - interfaces between rms0disconnect and rm3disconnect
;
; Calling sequence:
;	entered via a case statement (branch) from rms$disconnect
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--

RM$DISCONNECT3::
	BSBW	RM$DISCONNECT3B
	BRW	RM$DISCOMMON		; branch to common code to finish up



;++
;
; RM$EXTEND3 - extend for isam files
;
; Calling sequence:
;	entered via a case statement (branch) from rms$extend
;
; Input Parameters:
;	r3	- address of fab/xab
;	r5 	- extend quantity
;	r6	- 0 if no xab otherwise xab address
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--

RM$EXTEND3::
	PUSHR	#^M<R3>			; push fab/xab addr since clobbered by rm$extend0
	CLRL	-(SP)			; area zero is default
	TSTL	R6			; is there an xab
	BEQL	10$			; if not use area default
	MOVL	XAB$B_AID(R3),(SP)	; pickup area out of xab

10$:	BSBW	RM$LOCK_AREA		; returns bdb=r4, area_desc=r7
	MOVL	(SP)+,FAB$L_STV(R8)	; save level for next error check
	BLBC	R0,50$			; if errors, get out
	MOVL	(SP),R3			; restore fab/xab address
	PUSHL	R4			; save bdb

	TSTL	AREA$L_NXT(R7)		; check if next extent is undefined
	BNEQ	30$			; if not, error
	CLRL	FAB$L_STV(R8)		; no stv value
	BSBW	RM$EXTEND0		; do extend, clobbers r4
	BLBC	R0,40$			; check for errors and get out
	MOVL	R6,IFB$L_EBK(R9)	; update eof
	MOVL	4(SP),R3		; restore fab/xab address
	SUBL3	R1,R6,FAB$L_ALQ(R3)	; calc number of blocks in extent
;
; To keep the total allocation correct, we must distinguish between files
; that did not have this field defined when they were created, and those
; that did.  If the TOTAL_ALLOC field is not zero, then it is a new file.
; If it is zero, check the VBN of the extents.  If they are both zero, then
; the area has never been extended, and the allocation can be computed
; correctly.
;
	TSTL	AREA$L_TOTAL_ALLOC(R7)	; is total allocation zero?
	BNEQ	15$			; if not, new file
	TSTL	AREA$L_CVBN(R7)		; is current extend zero?
	BNEQ	16$			; if not, old file
	TSTL	AREA$L_NXTVBN(R7)	; is next extent zero?
	BNEQ	16$			; if not, old file
15$:	ADDL2	FAB$L_ALQ(R3),-
		 AREA$L_TOTAL_ALLOC(R7)	; new type file, accum total alloc
16$:	ADDL2	FAB$L_ALQ(R3),FAB$L_STV(R8) ; accumulate in fab
	MOVL	R1,AREA$L_NXT(R7)	; save start vbn
	MOVL	FAB$L_ALQ(R3),AREA$L_NXBLK(R7) ; remember # of blocks in extent

	POPL	R4			; restore bdb of area prologue vbn
	MOVL	BDB$L_ADDR(R4),R5	; pickup address of area descriptor
	BSBW	RM$MAKSUM		; calc check sum
	BISB2	#3,BDB$B_FLGS(R4)	; set valid and dirty
	MOVL	#RLS$M_WRT_THRU,R3	; write it out
	BSBW	RM$RELEASE
20$:	POPL	R3
	RSB
30$:	RMSERR	LEX			; set error code for next extend already exists
40$:	POPL	R4
	PUSHL	R0
	CLRL	R3			; just release
	BSBW	RM$RELEASE		; do it
	POPL	R0			; pickup saved error code
	BRB	20$
50$:	MOVL	(SP),FAB$L_STV(R8)	; stv value for error is fab/xab
	BRB	20$



;++
;
; RM$GET3 - interface to RM$GET3B
; RM$FIND3 - interface to RM$GET3B for find operation
;
; Calling sequence:
;	entered via a case statement (branch) from rms$get (find)
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--

RM$GET3::
	CLRW	RAB$W_RSZ(R8)		; init record size
RM$FIND3::
	BBC	#IFB$V_RU_RECVR,-	; if the current operation has been
		IFB$B_RECVRFLGS(R10),5$ ; done within the context of a Recovery
	MOVZBL	#RJR$_FIND,-(SP)	; Unit ROLLBACK, then call the common
	JSB	RM$RU_RECOVER		; RU ROLLBACK routine to direct the
	BRB	20$			; UNDO operation, and then go finish up

5$:	BBSC	#IRB$V_PUTS_LAST,-	; clear the last operation was a 
		(R9),7$			; sequential $PUT flag
7$:	BBSC	#IRB$V_UPDATE,(R9),10$	; clear last operation was $UPDATE flag

10$:	BSBW	RM$GET3B		; get/find the record
20$:	BRW	RM$EXRMS		; and exit rms



;++
;
; RM$IALLO3 - interface xab_scan to the routine which processes the allocation xab
; RM$IKEYO3 - interface xab_scan to the routine which processes the key xab.
; RM$ISUMO3 - interface xab_scan to the routine which processes the summary xab.
;
; Calling sequence:
;	entered via a case statement (branch) from rm$xab_scan
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--
;

;++
;
; RM$IALLO3 - interface xab_scan to the routine which processes the
;	allocation xab's for index seq files.
;--

RM$IALLO3::
	MOVL	AP,R2			; save ap
	PUSHL	R3
	JSB	RM$XALLO3
	ADDL2	#4,SP
	BRB	ISUM10

;--
;++
;
; RM$IKEYO3 - interface xab_scan to the routine which processes the key xab.
;
;--

RM$IKEYO3::
	MOVL	AP,R2			; save ap
	PUSHL 	R3
	JSB	RM$XKEYO3
	ADDL2	#4,SP
	BRB	ISUM10

;++
;
; RM$ISUMO3 - interface xab_scan to the routine which processes the summary xab.
;
;--

RM$ISUMO3::
	MOVL	AP,R2			; save ap
	PUSHR	#^M<R3,R4>		; push parameters
	JSB	RM$XSUMO3
	ADDL2	#8,SP
ISUM10:	BLBS	R0,ISUM20
	MOVL	R3,FAB$L_STV(R8)
	TSTL	(SP)+
ISUM20:	MOVL	R2,AP			; restore ap
	RSB




;++
;
; RM$OPEN3 - interfaces between rms0open and rm3open
;
; Calling sequence:
;	entered via a case statement (branch) from rm$open
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--

RM$OPEN3::
	BSBW	RM$OPEN3B
	BLBS	R0,10$
	PUSHL	R0
	BSBW	RM$CLOSE3
	POPL	R0
10$:	JMP	RM$COPRTN



;++
;
; RM$PUT3 - interfaces between rms0put and rm3put
;
; Calling sequence:
;	entered via a case statement (branch) from rms$put
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--

RM$PUT3::
	BBC	#IFB$V_RU_RECVR,-	; if the current operation has been
		IFB$B_RECVRFLGS(R10),10$; done within the context of a Recovery
	MOVZBL	#RJR$_PUT,-(SP)		; Unit ROLLBACK, then call the common
	JSB	RM$RU_RECOVER		; RU ROLLBACK routine to direct the
	BRB	PUF2			; UNDO operation, and then go finish up

10$:	BSBW	RM$PUT3B		; put the record
	PUSHL	R0			; save status
	BLBC	R0,UNLOCK2		; always unlock on errors

UNLOCK:	BBS	#RAB$V_ULK,RAB$L_ROP(R8),PUF; don't unlock if manual unlock

UNLOCK2:
	BBCC	#IRB$V_UNLOCK_RP,(R9),- ; if there isn't any record to unlock
		PUF			; then don't unlock any record
	MOVL	IRB$L_PUTUP_VBN(R9),R1	; get vbn
	MOVZWL	IRB$W_PUTUP_ID(R9),R2	; set up id for unlock
	BSBW	RM$UNLOCK		; unlock the record (ignore errors,
					; record maybe not locked)

PUF:	CLRL	IRB$L_UDR_VBN(R9)	; Having attempted a $PUT/$UPDATE
	CLRW	IRB$W_UDR_ID(R9)	; there is no longer a current record
	POPR	#^M<R0>			; restore status
PUF2:	BRW	RM$EXRMS		; and exit


;++
;
; RM$REWIND3 - isam rewind
;
; Calling sequence:
;	entered via a case statement (branch) from rms$rewind
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--
;
;	this routine does the indexed specific code for a rewind
;		but it was just too small and much easier in mars
;		for it to go into another module
;--

RM$REWIND3::
	BBSC	#IRB$V_PUTS_LAST,(R9),5$ ; clear the last operation
					; was a put sequential flag.
5$:	BBC	#IFB$V_BIO,IFB$B_FAC(R10),10$ ; branch if not block i/o
	MOVL	#1,IRB$L_NRP_VBN(R9)
	RSB				; all done if block i/o

;
; Clear the next record positioning context information within the IRAB,
; and setup the key of reference from information in the RAB.
;

	ASSUME	IRB$L_CUR_VBN+4  EQ IRB$L_POS_VBN
	ASSUME	IRB$L_UDR_VBN+4  EQ IRB$L_SIDR_VBN
	ASSUME	IRB$W_CUR_ID+2   EQ IRB$W_POS_ID
	ASSUME	IRB$W_CUR_ID+4   EQ IRB$W_UDR_ID
	ASSUME	IRB$W_CUR_ID+6   EQ IRB$W_SIDR_ID
10$:	CLRQ	IRB$L_CUR_VBN(R9)
	CLRQ	IRB$L_UDR_VBN(R9)
	CLRQ	IRB$W_CUR_ID(R9)
	CLRW	IRB$W_CUR_COUNT(R9)
	MOVB	RAB$B_KRF(R8),IRB$B_CUR_KREF(R9)

;
; This stream can no lnger be explicitely positioned at the end-of-file
;

	CSB	#IRB$V_EOF,(R9)

;
; zero out keybuffers 1 and 2
;

	MOVZWL	IFB$W_KBUFSZ(R10),R0
	ASHL	#1,R0,R0
	MOVC5	#0,(SP),#0,R0,@IRB$L_KEYBUF(R9)
	RSB



;++
;
; RM$RND_DEV
;	This routine is called from RM$CREATE3B to determine if the
;	indexed file is being created in a random access, non foreign device.
;	It has to be done in a macro routine, since it is the only way
;	the device characteristics bits can be defined.
;
; Calling sequence:
;	RM$RND_DEV ()
;
; Input Parameters:
;	IFAB
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	0 - not a random device
;	1 - random device
;
; Side Effects:
;
;--

RM$RND_DEV::

	CLRL	R0			; Assume device is not random
	BBS	#FAB$V_UFO,-
		 FAB$L_FOP(R8),10$	; branch if UFO
	BBS	#DEV$V_FOR,-
		 IFB$L_PRIM_DEV(R9),10$	; branch if device foreign
	BBC	#DEV$V_RND,-
		 IFB$L_PRIM_DEV(R9),10$	; branch if device not random
	MOVL	#1,R0			; device is random
10$:	RSB				; return



;++
;
; RM$UPDATE3 - interfaces between rms0update and rm3update
;
; Calling sequence:
;	entered via a case statement (branch) from rms$update
;
; Input Parameters:
;	none
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Side Effects:
;	just passing through
;
;--

RM$UPDATE3::
	BBC	#IFB$V_RU_RECVR,-	; if the current operation has been
		IFB$B_RECVRFLGS(R10),5$ ; done within the context of a Recovery
	MOVZBL	#RJR$_UPDATE,-(SP)	; Unit ROLLBACK, then call the common
	JSB	RM$RU_RECOVER		; RU ROLLBACK routine to direct the
	BRB	15$			; UNDO operation, and then go finish up

5$:	SSB	#IRB$V_UPDATE,(R9)	; set the update bit
	BBSC	#IRB$V_PUTS_LAST,(R9),10$ ; clear the last operation
					; was a put sequential flag.
10$:	JSB	RM$UPDATE3B		; update the record
15$:	PUSHL	R0			; save status
	BRW	UNLOCK			; go unlock the record if necessary
	.END
