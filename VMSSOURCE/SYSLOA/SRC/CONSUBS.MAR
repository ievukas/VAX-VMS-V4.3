	.TITLE	CONSUBS - Connection Management Utility Subroutines
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: EXECUTIVE, CLUSTER MANAGEMENT
;
; ABSTRACT: 
;	This module contains several utility routines for the connection manager.
;
; ENVIRONMENT: VAX/VMS
;
; AUTHOR: Dave Thiel,	 CREATION DATE: 13-Dec-1983
;
; MODIFIED BY:
;
;	V03-003	DWT0198		David W. Thiel			23-Mar-1984
;		Add CNX$RESOURCE_CHECK, CNX$RESOURCE_FAIL, CNX$RESOURCE_SUCC
;		to manage system resource exhaustion.
;
;	V03-002	DWT0187		David W. Thiel			5-Mar-1984
;		Really repair random number generation.
;
;	V03-001	DWT0176		David W. Thiel			21-Feb-1984
;		Correct random number generation.
;
;--


	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$CLUBDEF			; CLUster Block offsets
	$CSBDEF				; CSB Offsets
	$DYNDEF				; Data structure type codes
	$FKBDEF				; Fork block offsets
	$SBDEF				; System block offsets

;***********************************************************************
;
; NOTE:	The following assumptions are in effect for this entire module.
;
;************************************************************************

	.DEFAULT	DISPLACEMENT,WORD

	.PSECT	$$$100,LONG		; PSECT for code

	.SBTTL	CNX$ALLOZMEM - Allocate and zero memory

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine allocates and zeroes a piece of pool.  The size of
;	the allocated block is stored in the block.  The type field is set
;	to DYN$C_CLU.
;
; CALLING SEQUENCE:
;
;	JSB	CNX$ALLOZMEM
;
; INPUT PARAMETERS:
;
;	R1:	Size of the block of memory to allocate.
;
; OUTPUT PARAMETERS:
;
;	R2:	Address of the allocated block of pool.
;
; COMPLETION CODES:
;
;	R0 contains status.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

CNX$ALLOZMEM::
	JSB	G^EXE$ALONONPAGED	; Allocate memory
	BLBC	R0,10$			; Branch on error
	PUSHR	#^M<R1,R2,R3,R4,R5>	; Save volatile registers
	MOVC5	#0,(SP),#0,R1,(R2)	; Zero the block
	POPR	#^M<R1,R2,R3,R4,R5>	; Restore registers
	MOVW	R1,FKB$W_SIZE(R2)	; Block size
	MOVB	#DYN$C_CLU, -		; Store generic cluster type
		FKB$B_TYPE(R2)
	MOVL	S^#SS$_NORMAL,R0	; Set success status
10$:	RSB				; Return


	.SBTTL	CNX$RANDOM - Generate a random number

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine generate a random integer whose range is determined by R0.
;
; CALLING SEQUENCE:
;
;	JSB	CNX$RANDOM
;
; INPUT PARAMETERS:
;
;	R4:	Address of CLUB
;	R0:	Upper bound+1 on number generated (assumed positive)
;
; OUTPUT PARAMETERS:
;
;	R0:	Random integer in range 0..R0
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	R1 is destoryed.
;
;--

CNX$RANDOM::
	PUSHL	R0			; Save upper bound
	EMUL	CLUB$L_RANDOM(R4), -	; Compute new context using
		#69069,#1,R0		;   context = context*69069 + 1
	MOVL	R0,CLUB$L_RANDOM(R4)	; Update context
	CMPL	R1,(SP)			; Test for overflow in EDIV
	BLSSU	10$			; Branch if no overflow and positive
	XORL2	R1,R0			; Mash it all into R0
	CLRL	R1
10$:	EDIV	(SP)+,R0,R1,R0		; Remainder to R0
	RSB				; Return number in R0, range 0..R0-1


	.SBTTL	CNX$RANDOM_INIT - Initialize Random Number Generator Context

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine initializes the random number generator context
;
; CALLING SEQUENCE:
;
;	JSB	CNX$RANDOM_INIT
;
; INPUT PARAMETERS:
;
;	R4:	Address of CLUB
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	R0 and R1 are destoryed.
;
;--

CNX$RANDOM_INIT::
	MOVQ	G^SCS$GB_SYSTEMID,R0	; Get local system ID
	XORW2	R1,R0			; Mash into one longword
	XORL2	G^EXE$GQ_SYSTIME+2,R0	; Incorporate active part of time
10$:	MOVAB	B^10$,R1		; Get another system dependent value
	XORL3	R1,R0, -		; Merge it into value
		CLUB$L_RANDOM(R4)	; and store it
	RSB


	.SBTTL	CNX$RESOURCE_SUCC - Note resouce allocation success
	.SBTTL	CNX$RESOURCE_FAIL - Check for resource exhaustion following failure
	.SBTTL	CNX$RESOURCE_CHECK - Check for resource exhaustion

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	These routines attempt to prevent infinite resource waiting loops in the
;	connection manager and other code critical to the cluster.
;	Calls to these routines may be placed in resource wait loops with the
;	following constraint:  If the routines are ever called on a failure to
;	allocate a particular resource, they must also be called when that resource
;	is successfully allocated.  If the caller "bails-out" of the wait loop,
;	these routines must be called indicating a successfull allocation.  If
;	this is not done, false resource exhausted conditions will be detected
;	and machines will unnecessarily be shut down.
;
; CALLING SEQUENCE:
;
;	JSB	CNX$RESOURCE_CHECK - Resource allocation success/failure status in R0
;	JSB	CNX$RESOURCE_FAIL - Implied resource allocation failure
;	JSB	CNX$RESOURCE_SUCC - Implied resource allocation success
;
; INPUT PARAMETERS:
;
;	R0:	Resource allocation success/failure (CNX$RESOURCE_CHECK only)
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	All registers are preserved.
;	If a state of resource exhaustion is discovered, the system will
;	shut itself down with a resources exhausted bugcheck.
;
;--

CNX$RESOURCE_CHECK::
	BLBC	R0,CNX$RESOURCE_FAIL	; Handle failure case
CNX$RESOURCE_SUCC::
	PUSHL	R4			; Save register
	MOVL	G^CLU$GL_CLUB,R4	; Address of CLUB
	CLRL	CLUB$L_RETRYCNT(R4)	; Clear timeout cell
	POPR	#^M<R4>			; Restore register
	RSB

CNX$RESOURCE_FAIL::
	PUSHR	#^M<R0,R4>		; Save register
	MOVL	G^CLU$GL_CLUB,R4	; Address of CLUB
	TSTL	CLUB$L_RETRYCNT(R4)	; Is ths the first failure?
	BNEQ	10$			; Branch if not first failure
	MOVZWL	G^CLU$GW_RECNXINT,R0	; Retry interval
	ADDL3	R0,G^EXE$GL_ABSTIM, -	; Compute time-out absolute time
		CLUB$L_RETRYCNT(R4)
10$:	CMPL	G^EXE$GL_ABSTIM, -	; Compare current time to time-out
		CLUB$L_RETRYCNT(R4)
	BGTRU	20$			; Branch if timed-out
	POPR	#^M<R0,R4>		; Restore register
	RSB

20$:	BUG_CHECK	RESEXH,FATAL	; Resources exhausted, node exiting cluster

	.END
