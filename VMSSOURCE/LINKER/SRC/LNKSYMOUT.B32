module lnk_symtblout 			! LINKER GLOBAL SYMBOL OUTPUT ROUTINES
		(ident = 'V04-000'
		,addressing_mode 
			(external    = general
			,nonexternal = long_relative
			)
		) =
begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	LINKER
!
! ABSTRACT:	THIS MODULE CONTAINS ALL LOGIC TO OUTPUT THE GLOBAL
!		SYMBOLS OF THE LINK TO SYMBOL TABLE FILE AND/OR IMAGE FILE
!
!
! ENVIRONMENT:	VMS NATIVE MODE
!
! AUTHOR:	T.J. PORTER, CREATION DATE: 14-JUL-77
!
! MODIFIED BY:
!
!	V03-023	ADE0005		Alan D. Eldridge	23-Aug-1984
!		Prevent symbols from being written twice to the symbol table
!		by flushing the symbols before writing the PSECT record.
!
!	V03-022	ADE0004		Alan D. Eldridge	10-Jul-1984
!		Fix module name selection when the image name is null but there
!		is no .STB requested.
!
!	V03-021	ADE0003		Alan D. Eldridge	22-Jun-1984
!		Adhere to Grammer Rules for output file spec's as defined
!		in the Command Language User's Guide.
!
!	V03-020	ADE0002		Alan D. Eldridge	 1-May-1984
!		Fix bug which resulted in zero-lenghted module name in .STB
!		by using the .STB name if the image name is null.
!
!	V03-019	ADE0001		Alan D. Eldridge	12-Apr-1984
!		Use 'output file parsing' only if /SYM was not an
!		input file qualifier.
!
!	V03-018	JWT0134		Jim Teague		29-Aug-1983
!		Undo JWT0129.  NOSHR psects in shr img sym tbls are
!		good for forcing a CRF section.
!
!	V03-017	JWT0129		Jim Teague		28-Jul-1983
!		Psect selection for inclusion in shareable image
!		symbol tables was neglecting to check the SHR bit.
! 
!	V03-016	JWT0113		Jim Teague		20-Apr-1983
!		Call $getjpi to get number of open files left.
!
!	V03-015 JWT0053		Jim Teague		15-Sep-1982
!		Fix bug which caused linker to skip writing some 
!		symbols to shr imgs.
!
!	V03-014 JWT0044		Jim Teague		30-Jul-1982
!		Open file performance boost.
!
!	V03-013	JWT0038		Jim Teague		23-Jun-1982
!		Clean up INFO#212 errors.
!
!--

!
! TABLE OF CONTENTS:
!

forward routine
	eomrecout,					! OUTPUT END OF MODULE
	hdrecsout,					! OUTPUT HEADER RECORDS
	outputpsects,					! TRAVERSE PSECT LIST TO OUTPUT PSECTS
	psectrecout,					! OUTPUT P-SECT RECORDS
	symrecout,					! OUTPUT SYMBOL RECORDS
	lnk$closymout : novalue,			! CLOSE SYMBOL TABLES
	stbrecout,					! WRITE RECORD TO STB FILE
	imgrecout,					! WRITE RECORD TO IMAGE FILE
	outputrec;					! WRITE THE RECORDS

!
! INCLUDE FILES:
!
library
	'LIBL32';				! SYSTEM STRUCTURES
require
	'PREFIX';				! USEFUL MACROS ETC.
library
	'DATBAS';				! DATA BASE DEFINITIONS
!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

literal
	maxsymbolrec = 512;				! MAX LENGTH OF SYMBOL RECORD
!
! EXTERNAL REFERENCES:
!
external literal
	lin$_closeout,					! CLOSE FAILURE
	lin$_faofail,					! FAO FAILURE
	lin$_openout,					! ERROR OPENING OUTPUT FILE
	lin$_writeerr,					! WRITE ERROR
	lnk$c_objmbc 		: short;		! MULTI-BLOCK COUNT
!
external
	lnk$gt_jpilst,
	lnk$gl_filesleft,
	lnk$gt_imgid 		: vector[,byte],	! IMAGE IDENT
	lnk$gl_pshrnum,					! NUMBER OF HIGHEST PSECT CREATED
	lnk$gl_clulst 		: vector[2],		! CLUSTER DESCRIPTOR LISTHEAD
	lnk$gl_inrelnam,				! POINTER TO FIRST INPUT FILE NAM BLOCK
	lnk$gl_relnam_sym,				! POINTER TO /SYM RELATED NAME BLOCK
	lnk$gb_locnov_sym	: byte,			! SET IF /SYM WAS 'LOCAL' WITHOUT A VALUE
	lnk$al_imgrab 		: block[,byte],		! OPEN IMAGE FILE RAB
	lnk$al_rab 		: block[,byte],		! OBJECT RAB
	lnk$gb_maxercod 	: byte,			! MAXIMUM ERROR CODE
	lnk$gb_pass 		: byte,			! PASS NUMBER
	lnk$gl_ctlmsk 		: block[,byte],		! CONTROL MASK
	lnk$gl_imgfil 		: ref block[,byte],	! IMAGE FILE D.B.
	lnk$gl_symfil 		: ref block[,byte],	! SYMBOL TABLE FILE
	lnk$gw_imgifi 		: word,			! IMAGE FILE IFI
	lnk$gl_maplst,					! LISTHEAD FOR USEFUL P-SECTIONS
	lnk$gl_minva,					! LOWEST VIRTUAL ADDRESS ALLOCATED
	lnk$gw_nsymbols 	: word,			! NUMBER OF GLOBAL SYMBOLS
	lnk$gq_startim,					! START TIME/DATE
	lnk$aw_version 		: block[,byte];		! LINKER VERSION

external routine
	lnk$closefile 		: novalue,		! ROUTINE TO CLOSE A FILE
	lib$traverse_tree,				! TRAVERSE A BINARY TREE
	lnk$filnamdsc,					! GET FILE NAME FROM FAB
	lnk$closimgfil;					! CLOSES IMAGE FILE
!
! MODULE OWN STORAGE:
!
global
	lnk$gw_gstrecs		: word,			! COUNT OF RECORDS WRITTEN TO IMAGE GST
	lnk$gw_symrecs		: word;			! COUNT OF RECORDS WRITTEN STB FILE
own
	eomcodes : vector [4, byte]			! TRANSLATE EXIT CODES
		   initial (byte (eom$c_warning		!  INTO EOM STATUS CODES
				 ,eom$c_success
				 ,eom$c_error
				 ,eom$c_abort
			    )    ),
	stbauxfnb 	: ref block [,byte],		! POINTER TO AUX. FNB. OF SYMBOL TABLE FILE
	stbrab 		: $rab (rac=seq, mbc=lnk$c_objmbc), ! RECORD ACCESS BLOCK OF SYMBOL TABLE FILE
	symask 		: word initial (sym$m_supres),
	symatch,
	stbfileifi,					! INTERNAL FILE ID OF SYMBOL TABLE FILE
	imgauxfnb 	: ref block[,byte],		! POINTER TO AUX, FNB, OF OPEN IMAGE FILE
	gsdreclng 	: word,				! LENGTH OF CURRENT GSD RECORD
	curpsectnum 	: byte,				! NUMBER OF CURRENT P-SECTION
	objrecord 	: ref block [,byte];		! POINTER TO OBJECT RECORD

bind
	objrecvec = objrecord : ref vector [,byte];	! POINT TO OBJECT RECORD AS BYTE VECTOR

psect 	own = $plit$;					! DEFINE READ ONLY STORAGE
own 
	abspsect : block[psc$c_size+9,byte]		! FOR THE GENERATED ABSOLUTE P-SECTION
		   initial (long(0,0),word(0),
			    word ( gps$m_pic or		! IT IS POSITION INDEPENDENT
				   gps$m_rd or		! READABLE
				   gps$m_lib),		! AND A "LIBRARY" P-SECTION
			    long (0,0,0,0,0,0,0),
			    long (0),
			    byte (0),
			    countedstring ('.$$ABS$$.')); ! NAMED ".$$ABS$$."
!
psect	own = $own$;

global routine lnk$symtblout : novalue =
!++
! FUNCTIONAL DESCRIPTION:
!
!	THIS ROUTINE OUTPUTS THE GLOBAL SYMBOLS OF THE LINK.
!	THERE ARE THREE REASONS FOR GLOBAL SYMBOL OUTPUT:
!
!	1.  THE DEBUGGER HAS BEEN LINKED INTO AN EXECUTABLE 
!	    IMAGE.
!
!	2.  THE IMAGE IS A SHAREABLE IMAGE.
!
!	3.  A SEPARATE OUTPUT FILE OF GLOBAL SYMBOLS WAS
!	    REQUESTED BY THE LINK COMMAND.
!
!	1 AND 2 ARE MUTUALLY EXCLUSIVE, WHEREAS THE THIRD
!	MAY ACCOMPANY EITHER. IN CASES 1 AND 2 THE GLOBAL SYMBOLS
!	ARE OUTPUT TO THE END OF THE IMAGE FILE. IN ALL CASES,
!	THE SYMBOL TABLE OUTPUT CONFORMS TO THE OBJECT LANGUAGE
!	FORMAT. I.E. VARIABLE LENGTH RECORDS.
!	THERE IS SOME FILTERING OF SYMBOLS AND P-SECTIONS
!	ARE OUTPUT:
!
!	1.  NO WEAKLY DEFINED SYMBOLS 
!
!	2.  SYMBOLS FROM THE DEBUGGER ITSELF AND FROM SYSTEM
!	    LIBRARIES ARE SUPPRESSED IN ACCORDANCE WITH
!	    THE LINK COMMAND GIVEN.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	THE IMAGE FILE IS OPEN AND DESCRIPTORS OF IMAGE FILE
!	AND SYMBOL TABLE FILE ARE IN DYNAMIC MEMORY.
!
! IMPLICIT OUTPUTS:
!
!	SYMBOLS AND P-SECTIONS (AS REQUIRED) ARE WRITTEN TO
!	THE (APPROPRIATE) FILE(S) AND IF TO AN IMAGE,
!	THE IMAGE HEADER IS UPDATED WITH A POINTER TO
!	THE SYMBOL TABLE PATITION OF THE FILE.
!
! ROUTINE VALUE:
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--
begin
local
	rmserror,						! RMS ERROR CODE RETURNED
	stvcode,						! RMS STV CODE RETURNED
	fablock	  : block [fab$c_bln,byte],			! FILE ACCESS BLOCK
	psectdesc : ref block [,byte];				! POINTER TO P-SECT DESCRIPTOR
!
if (.lnk$gl_ctlmsk and (lnk$m_shr or lnk$m_dbg or		! IF A SHAREABLE IMAGE
			lnk$m_symtbl)) eql 0			! OR DEBUGGER WITH EXECUTABLE IMAGE
then return;							! OR A SYMBOL TABLE FILE WAS REQUESTED

objrecord = .lnk$al_rab [rab$l_ubf];				! INITIALIZE OUTPUT BUFFER TO BE THE
								! ONE USED FOR INPUT RECORDS CROSSING BLOCKS
$fab_init (fab = fablock					! INITIALIZE THE FAB
	  ,fop = put
	  ,rfm = var
	  ,mrs = maxsymbolrec
	  );

if .lnk$gl_ctlmsk [lnk$v_symtbl]					! 
then 	begin								! IF A SYMBOL TABLE, BUILD
	stbauxfnb 	    =  lnk$gl_symfil [fdb$t_auxfnb];		! A FILE ACCESS BLOCK TO
	fablock [fab$l_fna] = .lnk$gl_symfil [fdb$l_usrnamadr];		! WITH USER SPECIFIED OR
	fablock [fab$b_fns] = .lnk$gl_symfil [fdb$w_usrnamlen];		! COMMAND LANGUAGE DEFAULTED
	fablock [fab$b_dns] =  (if .lnk$gb_locnov_sym
				then %charcount ('.STB')
				else %charcount ('SYS$DISK:[].STB')
			       ) ;
	fablock [fab$l_dna] =  (if .lnk$gb_locnov_sym 
				then uplit (byte ('.STB'))
				else uplit (byte ('SYS$DISK:[].STB'))
			       ) ;
	fablock [fab$l_nam] = .stbauxfnb;				!
	fablock [fab$l_alq] = .lnk$gw_nsymbols/20;			! SET INITIAL ALLOCATION
	stbrab  [rab$l_fab] =  fablock;					!

	if  .lnk$gb_locnov_sym						! DON'T USE 'OUTPUT FILE PARSING'
	then fablock [fab$v_ofp] = false				! IF /SYM WAS A LOCAL QUALIFIER
	else fablock [fab$v_ofp] = true ;				! WITHOUT  A SPECIFED VALUE

	stbauxfnb [nam$l_rlf] = .lnk$gl_relnam_sym ;			! SET RELATED NAM BLOCK ADDRESS

	if not	($getjpi (itmlst = lnk$gt_jpilst);
		 if .lnk$gl_filesleft leq 3
		 then
		    lnk$closefile ();					!   THEN CLOSE A FILE
		 rmserror = $create (fab=fablock);			!   AND TRY AGAIN
		 stvcode  = .fablock [fab$l_stv];
		 ch$move (dsc$c_s_bln, lnk$filnamdsc (fablock)		! SET RESULTANT NAME DESCRIPTOR
			 ,lnk$gl_symfil [fdb$q_filename]
			 );
		 .rmserror
		)
	or not	(rmserror = $connect (rab=stbrab);			! RECORD STREAM AND
		 stvcode = .stbrab [rab$l_stv];
		 .rmserror
		)
	then begin							! IF ANY FAILURE REPORT
	     signal (lin$_openout,1, lnk$gl_symfil [fdb$q_filename]	! IT
		    ,.rmserror,.stvcode
		    );
	     if (.lnk$gl_ctlmsk and (lnk$m_shr or lnk$m_dbg or		! THEN IF THERE IS
				     lnk$m_image)) eql 0		! NOTHING ELSE TO DO
	     then return;						! EXIT NOW.
	     end
	else begin
	     stbfileifi		= .fablock [fab$w_ifi];			! SAVE IFI IF CREATED OK
	     stbrab [rab$l_rbf] = .objrecord;				! SET RECORD BUFFER ADDRESS
	     end;
     end;
!
! IF A SHAREABLE IMAGE OR A DEBUGGER HAS BEEN LINKED IN, AND THE 
! IMAGE FILE EXISTS (I.E. IT IS STILL OPEN), CHANGE ITS ATTRIBUTES
! SO THAT VARIABLE LENGTH RECORDS MAY BE WRITTEN TO THE END OF
! IT.
!
if (.lnk$gl_ctlmsk and (lnk$m_shr or lnk$m_dbg)) neq 0			! SHAREABLE OR DEBUGGABLE
and .lnk$gl_ctlmsk [lnk$v_image] neq 0					! IMAGE WHICH HAS BEEN
then begin								! CREATED SUCCESSFULLY
	imgauxfnb 		  = lnk$gl_imgfil [fdb$t_auxfnb];	! (AND IS STILL OPEN). JAM
	fablock [fab$w_ifi]	  = .lnk$gw_imgifi;			! IFI, SET FOR BOTH BLOCK
	fablock [fab$v_bro]	  = true;				! AND RECORD I/O
	fablock [fab$v_esc]	  = true;				! AND FOR VARIABLE
	fablock [fab$l_ctx]	  = rme$c_setrfm;			! LENGTH RECORDS
	lnk$al_imgrab [rab$l_fab] = fablock;				! SET FAB POINTER IN RAB
	lnk$al_imgrab [rab$v_eof] = true;				! AND END OF FILE OPTION

	if not	(rmserror = $modify (fab = fablock);			! AND TELL RMS ABOUT IT
		 stvcode  = .fablock[fab$l_stv];
		 .rmserror
		)
	or not	(rmserror = $connect (rab=lnk$al_imgrab);
		 stvcode = .lnk$al_imgrab [rab$l_stv];
		 .rmserror
		)
	then begin
	     signal (lin$_openout,1,lnk$gl_imgfil [fdb$q_filename]
		    ,.rmserror, .stvcode
		    );
	     lnk$closymout (.imgauxfnb);				! THEN CLOSE THE FILE
	     if .stbfileifi eql 0					! IF NO OTHER SYMBOL
	     then return;						! TABLE FILE, EXIT
	     end							! HERE NOW
	else begin
	     lnk$al_imgrab [rab$b_mbc] = lnk$c_objmbc;		! SET MULTI-BLOCK COUNT
	     lnk$al_imgrab [rab$l_rbf] = .objrecord;			! SET RECORD BUFFER ADDRESS
	     end;
     end
else if .stbfileifi eql 0 then return;					! GIVE UP IF NOTHING TO DO
!									! ADDRESS (USING OBJ INPUT BUFFER)
if not hdrecsout ()							! OUTPUT HEADER RECORDS
then return;								! AND GIVE UP ON FAILURE
!
if not psectrecout (abspsect)						! OUTPUT THE ABSOLUTE P-SECTION
then return;								! GIVING UP ON FAILURE
!
! OUTPUT THE PSECTS
!
outputpsects ();
!
! ALL SYMBOLS AND P-SECTIONS ARE PROCESSED. WRITE AN
! END OF MODULE RECORD THEN CLOSE THE FILE(S).
!
if not eomrecout ()							! GIVE UP ON EOM RECORD
then return;								! OUTPUT ERROR
lnk$closymout (0);							! AND CLOSE FILE(S)
return;
end;									! AND ALL DONE

routine hdrecsout =
begin
!
! THIS ROUTINE OUTPUTS MODULE HEADER RECORDS TO THE
! SYMBOL TABLE FILE.
!
bind	mhdrec		= .objrecord : block [,byte];

own	datecntrl	: descriptor('!17%D!17%D'),
	linknamever	: descriptor ('VAX-11 Linker V!AD-!AD');

literal	filenamelen	=  9,
	datefieldlen 	= 17,
	maj_ident_lng 	=  2,
	min_ident_lng	=  2;

local	filename 	: ref block[,byte],
	modheadfield 	: ref vector[,byte],
	datefield 	: vector [2],
	reclng 		: word;

bind	bufferdesc 	= datefield : vector;
!
if  (filename = .imgauxfnb) neq 0					! SETUP DEFAULT MODULE FNB
then begin								!
     if  .imgauxfnb [nam$b_name] eql 0					! IF IMAGE NAME IS NULL
     and .stbauxfnb neq 0						! AND .STB EXITS, 
     then filename = .stbauxfnb; 					! USE .STB NAME
     end
else filename = .stbauxfnb;						! USE .STB NAME IF NO IMAGE 

objrecord [obj$b_rectyp] = obj$c_hdr;					! SET RECORD TYPE
mhdrec [mhd$b_hdrtyp]    = obj$c_hdr_mhd;				! AND HEADER SUB-TYPE
mhdrec [mhd$b_strlvl]    = obj$c_strlvl;				! SET STRUCTURE LEVEL
mhdrec [mhd$w_recsiz]    = maxsymbolrec;				! SET MAX RECORD LENGTH
mhdrec [mhd$b_namlng]    = .filename [nam$b_name];			! SET MODULE NAME LENGTH

modheadfield = ch$move	(.mhdrec [mhd$b_namlng]
			,.filename [nam$l_name]				! AND COPY THE NAME, SETTING
			, mhdrec [mhd$t_name]				! POINTER TO NEXT FIELD
			) ;

modheadfield [0] = .lnk$gt_imgid [0];					! SET LENGTH OF IDENT
datefield [1]    = ch$move (.modheadfield [0],lnk$gt_imgid [1],modheadfield [1]); ! COPY IN THE IDENT
datefield [0]    = 2 * datefieldlen;					! SET UP DESCRIPTOR FOR DATE

if not $fao (datecntrl, reclng, datefield				! FIELDS AND CALL FAO TO
	    ,lnk$gq_startim, lnk$gq_startim				! CONVERT AND MOVE IN DATE AND TIME (TWICE)
	    )
then begin
     signal (lin$_faofail);						! GIVE UP WITH MESSAGE IF AN ERROR
     return false;
     end;

reclng = .reclng + .modheadfield [0] + .mhdrec [mhd$b_namlng] + 2 +	! COMPUTE TOTAL RECORD
	  mhdrec [mhd$b_namlng] - objrecord [obj$b_rectyp];		! LENGTH

if not outputrec (.reclng)						! AND OUTPUT THE
then return false;							! RECORD

!
! NOW BUILD THE RECORD WITH LINKER'S NAME AND VERSION.
!

objrecord [obj$b_subtyp] = obj$c_hdr_lnm;				! CREATOR ID HEADER
bufferdesc [0] 		 = maxsymbolrec;				! SET LENGTH AND
bufferdesc [1] 		 = objrecord [obj$b_subtyp]+1;			! ADDRESS AND FAO
if not $fao (linknamever, reclng, bufferdesc, maj_ident_lng		! FILLS IN THE RECORD.
	    ,lnk$aw_version [lid$w_major], min_ident_lng		! WITH MAJOR AND MINOR
	    ,lnk$aw_version [lid$w_minor]				! LINKER IDENT
	    )
then begin								! REPORT FAO ERROR
     signal (lin$_faofail);
     return false;							! AND GIVE UP
     end;

reclng = .reclng+.bufferdesc [1]-objrecord [obj$b_rectyp];		! COMPUTE RECORD LENGTH
return outputrec (.reclng)						! OUTPUT THE RECORD AND RETURN STATUS CODE
end;


routine eomrecout =
begin
!
! THIS ROUTINE BUILDS AND OUTPUTS AN END OF MODULE RECORD
!
objrecord [obj$b_rectyp] = obj$c_eom;					    ! SET RECORD TYPE
objrecord [eom$b_comcod] = .eomcodes [minu (eom$c_abort,.lnk$gb_maxercod)]; ! AND ERROR CODE
return outputrec (eom$c_eommin);					    ! AND OUTPUT IT
end;

routine outputpsects =
begin
!
! THIS ROUTINE OUTPUTS THE PSECTS TO THE SYMBOL TABLE
!
routine psect_out(node) =
begin
!
! THIS ROUTINE IS CALLED BY LIB$TRAVERSE_TREE FOR EACH PSECT IN THE
! MAPPING LIST
!
!
! THE SYMBOLS IN THE SYMBOL TABLE ARE ALL LINKED ON A (SINGLY THREADED) LIST FROM
! THE PROGRAM SECTIONS WITHIN WHICH THE SYMBOLS WERE DEFINED. THEREFORE TO FIND
! ALL SYMBOLS, WE SCAN DOWN THE LINKED LIST OF P-SECTION DESCRIPTORS, THEN DOWN
! THE LIST OF SYMBOLS STRUNG OFF EACH P-SECTION DESCRIPTOR.
!
map
    node	: ref block [,byte];

bind
    psectdesc	= node  [node$l_ptr] 	   : ref block [,byte],
    cludesc	= psectdesc [psc$l_cludsc] : ref block [,byte];

local
	symdesc : ref block [,byte],				! POINTER TO SYMBOL DESCRIPTOR
	pscoutflg,						! FLAG IF PSECT WAS OUTPUT TO SYMBOL FILE
	savpscnum;						! SAVED PSECT NUMBER

if  .lnk$gl_ctlmsk [lnk$v_shr]					! IF MAKING A SHAREABLE IMAGE
and .cludesc [clu$v_shrimg]					!  AND THIS CLUSTER IS ANOTHER SHAREABLE IMAGE
then return true;						!  THEN SKIP THIS CLUSTER

if .lnk$gl_ctlmsk [lnk$v_shr]					! IF SHAREABLE IMAGE
and (.psectdesc [psc$w_flags] and (gps$m_rel or gps$m_gbl or gps$m_ovr )) ! AND PSECT IS RELOCATABLE,
	eql	 	          (gps$m_rel or gps$m_gbl or gps$m_ovr )  !  GLOBAL, OVERLAYED
then begin
     pscoutflg   = true;					! PSECT WAS OUTPUT
     curpsectnum = .curpsectnum + 1;				! INCREMENT P-SECTION NUMBER
     if not psectrecout(.psectdesc)				! OUTPUT THE P-SECTION
     then return true;						! RETURNING ON ERROR
     end
else begin
     pscoutflg  =  false;					! FLAG PSECT NOT OUTPUT
     savpscnum  = .curpsectnum;					! SAVE THE PSECT NUMBER
    curpsectnum =  0;						! DEFINE THE SYMBOLS IN THE ABSOLUTE PSECT
    end;
if (symdesc = .psectdesc [psc$l_symlst]) neq 0			! IF THERE ARE SYMBOLS
then do if (.symdesc [sym$w_flags] and .symask) eql .symatch	! THAT QUALIFY FOR OUTPUT
	then begin
	     if .symdesc [sym$v_redef]				! IF FLAGGED FOR RE-DEFINITION
	     then begin
		  symdesc [sym$l_value] = .symdesc [sym$l_newval];	! THEN RE-DEFINE VALUE
		  if  .lnk$gl_ctlmsk [lnk$v_picimg]			! IF IMAGE IS STILL PIC
		  and .symdesc [sym$v_rerel]				!  AND THIS SYMBOL SHOULD BE 
		  then symdesc [sym$v_rel] = true;			!  RELOCATABLE THEN MAKE IT SO
		  end;

	     if  .lnk$gl_ctlmsk [lnk$v_picimg]				! IF A PIC IMAGE
	     and .lnk$gl_ctlmsk [lnk$v_shr]				! AND A SHAREABLE IMAGE
	     and .symdesc [sym$v_rel]					! AND SYMBOL IS RELOCATABLE
	     then symdesc [sym$l_value] = .symdesc [sym$l_value] -	! MAKE IT IMAGE RELATIVE
					.lnk$gl_minva
	     else symdesc [sym$v_rel] = false;				! THEN SYMBOL IS ABSOLUTE
	
	    if .symdesc [sym$v_intsym]					! IF INTERNAL SYMBOL
	    or .symdesc [sym$v_def]					! OR DEFINED
	    then if not symrecout(.symdesc)				! THEN OUTPUT THE SYMBOL
	         then return true;					! GIVING UP ON AN ERROR
	    end
     until (symdesc = .symdesc [sym$l_psclst]) eql 0;			! ON FAILURE

if not .pscoutflg
then curpsectnum = .savpscnum;					! RESTORE PSECT NUMBER IF NECESSARY

return true
end;
!
! MAIN BODY OF OUTPUTPSECTS
!
if not .lnk$gl_ctlmsk [lnk$v_shr]
then symask = .symask or gsy$m_weak				! IF NOT SHAREABLE, EXCLUDE WEAK SYMBOLS
else begin
     symatch = gsy$m_uni;					! IF SHAREABLE, SYMBOLS MUST BE UNIVERSAL
     symask = .symask or gsy$m_uni;
    end;
!
! TRAVERSE THE TREE AND OUTPUT THE PSECTS
!
lib$traverse_tree (lnk$gl_maplst,psect_out);

return outputrec (.gsdreclng)					! RETURN, OUTPUTTING ANY PARTIAL RECORD
end;								!OF OUTPUTPSECTS

routine stbpscrecout(psectdesc) =
begin
!
! THIS ROUTINE OUTPUTS A PSECT DEFINITION RECORD TO THE STB FILE.
!
map
    psectdesc : ref block[,byte];

local
    psectdefrec : ref block[,byte];

if  .stbfileifi eql 0						! IF NO STB FILE
and .psectdesc [psc$v_rel]					!  AND PSECT IS RELOCATABLE
then return true;						!  THEN JUST SKIP IT

if .gsdreclng gtru 0						! FLUSH BUFFER
then begin
     if not outputrec (.gsdreclng)				! WRITE IT OUT
     then return false;						! AND ZERO THE LENGTH
     gsdreclng = 0;
     end;

if .gsdreclng eql 0						! IF BEGINNING A NEW
then begin							! GSD RECORD, SET
     objrecord [obj$b_rectyp] = obj$c_gsd;			! RECORD TYPE AND INITIALIZE
     gsdreclng = 1;						! THE LENGTH
     end;

psectdefrec = objrecvec [.gsdreclng];				! POINT TO P-SECTION PART OF RECORD
psectdefrec [gps$b_gsdtyp] = gsd$c_psc;				! SET SUBRECORD TYPE
psectdefrec [gps$b_align]  = .psectdesc [psc$b_align];		! COPY ALIGNMENT
psectdefrec [gps$w_flags]  = .psectdesc [psc$w_flags]		! COPY FLAGS,
				and not (psc$m_optpsc or psc$m_usrpsc or  ! AND CLEAR UNINTERESTING BITS
				         psc$m_supres or psc$m_shrimg
					);
psectdefrec [gps$l_alloc]  = .psectdesc [psc$l_base];		! SET ALLOCATION AS PSECT BASE
psectdefrec [gps$b_namlng] = .psectdesc [psc$b_namlng];		! COPY LENGTH OF NAME

gsdreclng = .gsdreclng + ch$move (.psectdesc [psc$b_namlng]	! AND THEN THE NAME AND UPDATE 
				 , psectdesc [psc$t_name]	! LENGTH OF GSD RECORD
				 , psectdefrec [gps$t_name]
				 ) - .psectdefrec; 

if  .imgauxfnb neq 0						! IF ALSO WRITING TO IMAGE FILE
and .psectdefrec [gps$v_rel]					!  AND THIS IS A RELOCATABLE PSECT
then begin
     stbrecout (.gsdreclng);					! THEN OUTPUT THE RECORD TO THE STB FILE
     gsdreclng = 0;
     end;

return true
end;

routine imgpscrecout(psectdesc) =
begin
!
! THIS ROUTINE OUTPUTS A PSECT DEFINITION RECORD TO THE IMAGE FILE
!
map
    psectdesc	: ref block [,byte];

local
    psectdefrec	: ref block [,byte];

if not .psectdesc [psc$v_rel]					! IF PSECT IS ABSOLUTE
then begin
     outputrec (.gsdreclng);					! OUTPUT THE RECORD, PSECT DEF ALREADY SET UP
     gsdreclng = 0;
     return true;
     end;

if  .gsdreclng gtru 0						! FLUSH BUFFER
then begin
     if not outputrec (.gsdreclng)				! WRITE IT OUT
     then return false;						! AND ZERO THE LENGTH
     gsdreclng = 0;
     end;

if  .gsdreclng eql 0						! IF BEGINNING A NEW
then begin							! GSD RECORD, SET
     objrecord [obj$b_rectyp] = obj$c_gsd;			! RECORD TYPE AND INITIALIZE
     gsdreclng = 1;						! THE LENGTH
     end;

psectdefrec = objrecvec [.gsdreclng];				! POINT TO P-SECTION PART OF RECORD
psectdefrec [gps$b_gsdtyp] = gsd$c_spsc;				! SET SUBRECORD TYPE
psectdefrec [gps$b_align]  = .psectdesc [psc$b_align];		! COPY ALIGNMENT
psectdefrec [gps$w_flags]  = .psectdesc [psc$w_flags]		! COPY FLAGS,
			      and not (psc$m_optpsc or psc$m_usrpsc or	 ! AND CLEAR UNINTERESTING BITS
				       psc$m_supres or psc$m_shrimg
				      );
psectdefrec [sgps$l_alloc] = .psectdesc [psc$l_length];		! SET PSECT ALLOCATION
psectdefrec [sgps$l_base]  = (if .lnk$gl_ctlmsk [lnk$v_picimg]	! IF A PIC IMAGE
			      then .psectdesc [psc$l_base] - 	! THEN RECORD BASE AS IMAGE RELATIVE
					.lnk$gl_minva
			      else .psectdesc [psc$l_base]	! OTHERWISE ACTUAL ADDRESS
			     );

psectdefrec [sgps$b_namlng] = .psectdesc [psc$b_namlng];	! SET LENGTH OF NAME

gsdreclng = .gsdreclng + ch$move (.psectdesc [psc$b_namlng]	! COPY THE P-SECTION NAME 
				 , psectdesc [psc$t_name]	! AND UPDATE RECORD LENGTH
				 , psectdefrec [sgps$t_name]
				 ) - .psectdefrec;

if .stbfileifi neq 0						! IF ALSO WRITING STB FILE
then begin
    imgrecout (.gsdreclng);					! THEN OUTPUT THE RECORD
    gsdreclng = 0;
    end;

return true
end;

routine psectrecout(psectdesc) =
begin
!
! THIS ROUTINE OUTPUTS A P-SECTION DEFINITION RECORD. IT ASSUMES THAT GSD
! RECORDS ARE BEING WRITTEN AND BLOCKED UP. IF ANOTHER P-SECTION DEFINITION
! RECORD WILL NOT FIT IN THE CURRENT GSD RECORD, THE RECORD IS WRITTEN
! AND ANOTHER BEGUN.
!
map
    psectdesc : ref block[,byte];				! BLOCK POINTER

stbpscrecout(.psectdesc);					! OUTPUT TO STB FILE

if  .imgauxfnb neq 0						! IF WRITING TO IMAGE FILE
then imgpscrecout (.psectdesc);					!  THEN OUTPUT TO IMAGE FILE

return true							! AND ALL DONE.
end;

routine symrecout (symdesc) =
begin
!
! THIS ROUTINE BLOCKS SYMBOL DEFINITION RECORDS INTO GSD RECORDS
! AND OUTPUTS THEM TO THE SYMBOL TABLE.
!
map symdesc : ref block[,byte];
local	symdefrec : ref block[,byte],
	symbolstring : ref vector[,byte],
	valdatlng,				! LENGTH OF ARG VALIDATION DATA
	masklength;
bind symdscnam = .symdesc - .symdesc[sym$b_namlng] - snb$c_fxdlen : block[,byte]; ! POINT TO NAME PART
if (.symdesc[sym$w_flags] and sym$m_entmsk) neq 0			! IF THERE IS AN ENTRY
then masklength = 2							! MASK, SET THE EXTRA
else masklength = 0;							! LENGTH
if .symdesc[sym$l_valdata] neq 0					! IF THERE IS VALIDATION DATA
then begin
    bind
	argvaldata = symdesc[sym$l_valdata] : ref vector[,byte];	! NAME IT
    valdatlng = (.argvaldata[0]-2)*2 + 2;				! GET LENGTH OF VALIDATION INFORMATION
    end
else valdatlng = 0;							! OTHERWISE THERE IS NONE
if (.gsdreclng+.masklength+.symdesc[sym$b_namlng]+.valdatlng+		! IF THIS SYMBOL WOULD
			sdf$c_name) gtru maxsymbolrec			! OVERFLOW THE CURRENT
then begin								! RECORD, THEN OUTPUT
	if not outputrec(.gsdreclng)					! CURRENT RECORD AND
	then return false;						! EXIT ON ERROR
	gsdreclng = 0;							! RESET RECORD LENGTH
     end;
if .gsdreclng eql 0							! SET NEW RECORD AS A
then begin
	objrecord[obj$b_rectyp] = obj$c_gsd;				! GSD RECORD
	gsdreclng = 1;
     end;
symdefrec = objrecvec [.gsdreclng];					! SET POINTER TO SYMBOL
if .valdatlng neq 0							! IF THERE IS VALIDATION DATA
then begin
    bind
	argvaldata = symdesc[sym$l_valdata] : ref vector[,byte], 	! POINT TO VALIDATION DATA
	formaldata = symdefrec[pro$t_name]+
			.symdesc[sym$b_namlng] : block[,byte];		! POINTER TO THE FIXED PART OF FORMAL ARGS DESCRIPTION
    symdefrec[pro$w_mask] = .symdesc[sym$w_entmsk];			! SET THE ENTRY MASK
    symbolstring = symdefrec[pro$b_namlng];				! POINT TO THE NAME
    symdefrec[pro$b_gsdtyp] = obj$c_gsd_pro;				! PROCEDURE DEFINITION
    formaldata[fml$b_minargs] = .argvaldata[1];				! SET MINIMUM ARG COUNT
    formaldata[fml$b_maxargs] = .argvaldata[0] - 2;			! AND MAXIMUM
    incr i from 1 to .formaldata[fml$b_maxargs]				! LOOP THROUGH THE ARGUMENTS
    do begin
	bind
	    argdesc =
		formaldata[fml$b_maxargs]+1+((.i-1)*arg$c_size) : block[,byte];	! POINT TO CURRENT ARG DESCRIPTOR
	argdesc[arg$b_valctl] = .(argvaldata[1] + .i);			! GET NEXT DESCRIPTOR
	argdesc[arg$b_bytecnt] = 0;					! NO OTHER DESCRIPTOR BYTES
	end;
    end
else if .masklength neq 0
then begin								! TO SYMBOL NAME
	symdefrec[epm$w_mask]=.symdesc[sym$w_entmsk];			! STRING AND IF AN
	symbolstring = symdefrec[epm$b_namlng];				! ENTRY POINT DEFINITION
	symdefrec[epm$b_gsdtyp] = obj$c_gsd_epm				! SET THE GSD TYPE
     end								! ALSO COPY THE ENTRY
else begin								! POINT MASK
	symbolstring = symdefrec[sdf$b_namlng];				! DO LIKEWISE FOR
	symdefrec[sdf$b_gsdtyp] = obj$c_gsd_sym;			! ORDINARY SYMBOL
     end;								! DEFINITION
symdefrec[sdf$b_datyp] = .symdesc[sym$b_datyp];				! COPY DATA TYPE
symdefrec[sdf$w_flags] = .symdesc[sym$w_flags] and (gsy$m_rel or	! AND FLAGS
				gsy$m_weak or gsy$m_uni or gsy$m_def);
if not .symdesc[sym$v_rel]						! IF ABSOLUTE P-SECTION
    then symdefrec[sdf$b_psindx] = 0					! SET OWNING P-SECT NUMBER = 0
    else symdefrec[sdf$b_psindx] = .curpsectnum;			! SET OWNING P-SECT
symdefrec[sdf$l_value] = .symdesc[sym$l_value];				! SYMBOL VALUE
gsdreclng = .gsdreclng+ch$move(.symdscnam[snb$b_namlng]+1,		! COPY THE SYMBOL
			symdscnam[snb$b_namlng],symbolstring[0])- 	! NAME (COUNTED STRING)
			.symdefrec+.valdatlng;				! AND UPDATE LENGTH
return true;								! AND IT IS ALL
end;									! DONE.

routine stbrecout(reclng) =
begin
!
!	THIS ROUTINE WRITES TO THE STB FILE IF ONE IS BEING CREATED
!
!	RECLNG		LENGTH OF RECORD TO WRITE
!
local
    rmserror;

if .reclng neq 0				! IF NON-ZERO LENGTH RECORD
    and .stbfileifi neq 0			! AND WE ARE WRITING TO THE STB FILE
then begin
    stbrab[rab$w_rsz] = .reclng;		! SET RECORD LENGTH
    if not (rmserror = $put(rab=stbrab))	! WRITE THE RECORD
    then begin
	signal(lin$_writeerr,1,			! SIGNAL ANY ERRORS
		lnk$gl_symfil[fdb$q_filename],
		.rmserror,.stbrab[rab$l_stv]);
	lnk$closymout(.stbauxfnb);		! CLOSE THE FILE IF ERROR
	if .imgauxfnb eql 0			! IF NO IMAGE FILE BEING CREATED
	    then return false;			!  THEN ALL DONE NOW
	end
    else lnk$gw_symrecs = .lnk$gw_symrecs + 1;	! COUNT GOOD RECORD WRITTEN TO THE FILE
    end;

return true
end;

routine imgrecout(reclng) =
begin
!
!	THIS ROUTINE WRITES TO THE IMAGE FILE
!
!	RECLNG		LENGTH OF RECORD
!
local
    rmserror;

if .reclng neq 0				! IF NON-ZERO LENGTH
    and .imgauxfnb neq 0			! AND IMAGE FILE IS OPEN
then begin
    lnk$al_imgrab[rab$w_rsz] = .reclng;		! SET RECORD LENGTH
    if not (rmserror = $put(rab = lnk$al_imgrab)) ! WRITE THE RECORD
    then begin
	signal(lin$_writeerr,1,			! IF ERROR, REPORT AND CLOSE FILE
		lnk$gl_imgfil[fdb$q_filename],
		.rmserror,.lnk$al_imgrab[rab$l_stv]);
	lnk$closymout(.imgauxfnb);
	if .stbfileifi eql 0			! IF NO STB FILE BEING CREATED
	    then return false;			!  THEN ALL DONE NOW
	end
    else lnk$gw_gstrecs = .lnk$gw_gstrecs + 1;	! COUNT GOOD RECORD WRITTEN
    end;

return true
end;

routine outputrec(reclng) =
begin
!
!	THIS ROUTINE HANDLES THE ACTUAL RECORD OUTPUT TO THE
!	FILE(S) RECEIVING SYMBOL TABLE RECORDS. ERROR DETECTION 
!	OCCURS HERE BUT THE HANDLING IS DONE IN THE FILE CLOSING
!	ROUTINE.
!
if not stbrecout(.reclng)
    then return false;

return imgrecout(.reclng)
end;

global routine lnk$closymout(auxfnb) : novalue =
begin
!
!	THIS ROUTINE HANDLES ERRORS WRITING THE SYMBOL TABLE RECORDS
!	AND/OR CLOSES THE DESIRED FILE(S).
!
!	IF "AUXFNB" IS ZERO - BOTH FILES (IF BOTH EXIST) ARE CLOSED
!	OTHERWISE "AUXFNB" IS THE ADDRESS OF THE AUXILIARY FILENAME BLOCK
!	OF THE FILE ON WHICH AN ERROR OCCURRED.  THE FILE IS CLOSED.
!
!	WHEN OUTPUTTING RECORDS TO THE GST OF AN IMAGE, THE IMAGE FILE
!	IS NOT ACTUALLY CLOSED (EXCEPT ON ERRORS). ITS ATTRIBUTES ARE MERELY
!	MODIFIED (BACK TO FIXED 512 BYTE RECORD) AND IT IS LEFT OPEN SINCE
!	THE IMAGE HEADER NEEDS TO BE WRITTEN AFTER THE GST IS DONE.
!
map	auxfnb : ref block[,byte];

local	fablock : block[fab$c_bln,byte],			! FAB FOR CLOSE AND MODIFY OPERATIONS
	closerror;						! ERROR CODE IF CLOSE FAILS

$fab_init(fab=fablock,						! INITIALIZE THE FAB
	fop=tef);

if .auxfnb eql 0						! IF WE ARE CLOSING BOTH FILES
or .auxfnb eql .stbauxfnb					! OR THE SYMBOL TABLE FILE ONLY
then if (fablock[fab$w_ifi] = .stbfileifi) neq 0		! IF IT IS STILL OPEN
then begin
    if not (closerror = $close(fab=fablock))			! ATTEMPT TO CLOSE IT
    then begin
	signal(lin$_closeout,1,					! AND OUTPUT AN ERROR IF THAT
		lnk$gl_symfil[fdb$q_filename],
		.closerror,.fablock[fab$l_stv]);
	end;
    stbfileifi = 0;						! AND FORGET THE FILE IN ANY CASE
    if .auxfnb neq 0 then return;				! RETURN IF THAT WAS ALL
    end;
if .imgauxfnb neq 0						! IF SYMBOLS ARE ALSO GOING TO IMAGE
then begin							! THEN SET UP TO MODIFY THE
    fablock[fab$w_ifi] = .lnk$gw_imgifi;			! THE ATTRIBUTES OF THIS FILE
    fablock[fab$b_rfm] = fab$c_fix;				! BACK TO FIXED LENGTH
    fablock[fab$w_mrs] = 512;					! 512 BYTE RECORDS IN THE
    fablock[fab$v_esc] = true;					! RMS DATA BASE
    fablock[fab$l_ctx] = rme$c_setrfm;				! SO THAT IT WILL HAVE
    if not (closerror = $modify(fab = fablock))			! THE ATTRIBUTES OF AN IMAGE
    then begin
	signal(lin$_closeout,1,					! ISSUE MESSAGE IF MODIFY FAILED
		lnk$gl_imgfil[fdb$q_filename],
		.closerror,.fablock[fab$l_stv]);
	end;
    imgauxfnb = 0;
    return;
    end;
end;
end eludom					! END OF MODULE
