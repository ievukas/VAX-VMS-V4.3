	.TITLE	OTS$$CVTDT
	.IDENT	/1-017/			; File: OTSCVTDT.MAR  Edit: LEB1017

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
;++
; FACILITY: Language-independent Support Library
;
; ABSTRACT:
;
;	A routine to convert an F or D-floating value to a string of
;	ASCII digits and an exponent.  It is meant to be used as
;	a base for floating point output conversion routines.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: Steven B. Lionel, CREATION DATE: 24-May-1979
;

	.SBTTL	Edit History
;
; 1-001 - Original.  Numeric conversion algorithm by Tryggve Fossum.
;	  SBL 24-May-1979
; 1-002 - Make routine an _R8 so as to conform with OTS$$CVTRT.  SBL 3-Jul-1979
; 1-003 - Add extra longword to stack frame to prevent clobbering of
;	  saved info.  SBL 8-Jul-1979
; 1-004 - Don't use R9 or R10 at all.  SBL 11-Jul-1979
; 1-005 - On right-rounding to zero, don't change the sign. SBL 16-Jul-1979
; 1-006 - Fix typo in stack frame setup.  SBL 23-July-1979
; 1-007 - Modify rounding algorithm so that if RT_RND would cause
;	  rounding to the right of the number of significant digits,
;	  the latter is used instead.  This is at the request of
;	  BASIC - the situation can not occur in FORTRAN.  SBL 27-Jul-1979
; 1-008 - Clear 96 bits ahead of fraction instead of 63.  SBL 30-July-1979
; 1-009 - Speed improvements. Clear 64 bits ahead of fraction.  Use
;	  register in inner convert loop.  SBL 21-Jan-1980
; 1-010 - Compute number of fraction longwords correctly at INIT_FRACT,
;	  to assure accurate low-order digits.  JAW 21-Jul-1981
; 1-011 - Make sure all bits between significand and binary point are
;	  cleared when value is an integer, to assure accurate low-order
;	  digits.  JAW 26-Jul-1981
; 1-012 - If we find a reserved operand, return zero if it doesn't get
;	  replaced by a non-reserved value.  SBL 29-Oct-81
; 1-013 - Add entry for F_floating.  SBL 29-Oct-1982
; 1-014 - Remove CVTFD instruction from OTS$$CVT_F_T_R8.  SBL 27-Apr-1983
; 1-015 - Fix bug introduced by 1-014.  SBL 17-May-1983
; 1-016 - Removed the CVTLP, CVTPS, and SKPC instructions to improve the
;         performance of this routine. Instead, EDIV instructions were
;         used. I also fixed a couple of comments.  JCW 31-OCT-1983
; 1-017 - Move tables after PSECT definition.  LEB 22-Mar-1984


	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _OTS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG

;
; OWN STORAGE:
;
; CONSTANTS
;

ASCII_ZEROES:
	.QUAD	^X3030303030303030		; 8 copies of the character 0

TABLE:	.WORD	^X3030, ^X3130, ^X3230, ^X3330, ^X3430
	.WORD	^X3530, ^X3630, ^X3730, ^X3830, ^X3930
	.WORD	^X3031, ^X3131, ^X3231, ^X3331, ^X3431
	.WORD	^X3531, ^X3631, ^X3731, ^X3831, ^X3931
	.WORD	^X3032, ^X3132, ^X3232, ^X3332, ^X3432
	.WORD	^X3532, ^X3632, ^X3732, ^X3832, ^X3932
	.WORD	^X3033, ^X3133, ^X3233, ^X3333, ^X3433
	.WORD	^X3533, ^X3633, ^X3733, ^X3833, ^X3933
	.WORD	^X3034, ^X3134, ^X3234, ^X3334, ^X3434
	.WORD	^X3534, ^X3634, ^X3734, ^X3834, ^X3934
	.WORD	^X3035, ^X3135, ^X3235, ^X3335, ^X3435
	.WORD	^X3535, ^X3635, ^X3735, ^X3835, ^X3935
	.WORD	^X3036, ^X3136, ^X3236, ^X3336, ^X3436
	.WORD	^X3536, ^X3636, ^X3736, ^X3836, ^X3936
	.WORD	^X3037, ^X3137, ^X3237, ^X3337, ^X3437
	.WORD	^X3537, ^X3637, ^X3737, ^X3837, ^X3937
	.WORD	^X3038, ^X3138, ^X3238, ^X3338, ^X3438
	.WORD	^X3538, ^X3638, ^X3738, ^X3838, ^X3938
	.WORD	^X3039, ^X3139, ^X3239, ^X3339, ^X3439
	.WORD	^X3539, ^X3639, ^X3739, ^X3839, ^X3939

; Stack frame offsets from R7
;; Common frame for kernel convert routines
	PACKED = -8			; Temp for packed representation
	FLAGS = PACKED - 4		; Flags for outer and inner routines
	SIG_DIGITS = FLAGS - 4		; Significant digits
	STRING_ADDR = SIG_DIGITS - 4	; Address of temp string
	SIGN = STRING_ADDR - 4		; Sign
	DEC_EXP = SIGN - 4		; Decimal exponent
	OFFSET = DEC_EXP - 4		; Offset
	RT_RND = OFFSET - 4		; Right round point
	COMMON_FRAME = RT_RND		; Common frame size

;+
; Inner routine frame pointed to by R8 during conversion
;-
	INT_HI = -16			; Highest integer part
	BIN_PT = INT_HI - 12		; Binary point
	FRACT_LIM = BIN_PT - 28		; Lowest fraction bits
	DIGITS = FRACT_LIM - 20		; Digits radix 10**9
	BIN_EXP = DIGITS - 4		; Saved binary exponent
	LONG_COUNT = BIN_EXP - 4	; Longword count
	TEMP = LONG_COUNT - 4		; Temporary
	LOCAL_FRAME = TEMP		; Local frame size



	.SBTTL	OTS$$CVT_D_T  - Convert D floating to text
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine converts a D-floating point value to a string
;	of ASCII digits.  It is intended to form the base of a
;	language's floating point output conversion routine.
;
;	OTS$$CVT_F_T_R8 converts F_floating.
;
; CALLING SEQUENCE:
;
;	MOVAB	common_frame, R1	; See common_frame definition above
;	MOVL	string_length, STRING_LEN(R1)
;	MOVL	string_address, STRING_ADDR(R1)
;	MOVL	sig_digits, SIG_DIGITS(R1)
;	MOVL	user_flags, FLAGS(R1)
;	MOVL	rt_round, RT_RND(R1)	;  Optional
;	MOVAB	value, R0
;	JSB	OTS$$CVT_D_T_R8 or OTS$$CVT_F_T_R8
;	; outputs are:
;	;	R1 = unchanged
;	;	OFFSET(R1) - offset
;	;	DEC_EXP(R1) - decimal exponent
;	;	SIGN(R1) - sign
;
; INPUT PARAMETERS:
;
;	VALUE				; F or D-floating value to be converted
;	SIG_DIGITS(R1)			; Number of significant digits to
;					; generate.  If neither V_TRUNCATE
;					; or V_ROUND_RIGHT is set, the
;					; value will be rounded to this
;					; many digits.
;	FLAGS(R1)			; Caller supplied flags:
	    V_TRUNCATE = 24		; Truncate, don't round.
	    V_ROUND_RIGHT = 25		; Round "rt_round" digits to
					; right of decimal point.
;	RT_RND(R1)			; Number of places to the right
;					; of the decimal point to round
;					; after.  Ignored if V_ROUND_RIGHT
;					; is clear.  The rounding takes
;					; place after the specified number
;					; of significant digits if that
;					; would be farther to the left.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	out_string			; String with result.  It will
;					; Not have valid digits after the
;					; requested number of significant
;					; digits.
;					; The length MUST be at least:
					; (9*INT((sig_digits+17)/9))+2
;	offset				; The offset into out_string at
					; which the first significant digit
					; may be found.  It is guaranteed
					; to be between 0 and 9.
;	exponent			; The signed decimal exponent of
					; the value, assuming a radix point
					; immediately to the left of the
					; most significant digit.
;	sign				; -1 if the value is negative
					; 0 if the value is zero
					; 1 if the value is positive
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	Alters registers R0 through R8.
;
;	SS$_ROPRAND	- If the value is a reserved operand
;	SS$_ACCVIO	, or other nasty errors if the length of
;			  out_string is not enough (see formula above).
;			  This routine does not check the length, it
;			  is up to the caller to insure the correct
;			  length is present.
;
;--


	.SBTTL	OTS$$CVT_D_T_R8

;+
; JSB entry point
;-

OTS$$CVT_F_T_R8::
	MOVL	R1, R7			; Use R7 as common frame pointer
	CLRL	R1			; Clear high part of value
	MOVF	(R0), R0		; Fetch and test for zero
	BRB	COMMON_FD		; Join common code

OTS$$CVT_D_T_R8::
	MOVL	R1, R7			; Use R7 as common frame pointer
	MOVD	(R0), R0		; Fetch and test for zero
					; and for reserved operand
COMMON_FD:
	BGTR	VAL_POS			; Value is positive
	BLSS	VAL_NEG			; Value is negative
	BSBB	ZERO			; Value is zero
	MOVL	R7, R1			; Restore R1
	RSB				; Return to caller

VAL_NEG:
	MNEGL	#1, SIGN(R7)		; Set negative sign
	BRB	EXTRACT			; Continue
VAL_POS:
	MOVL	#1, SIGN(R7)		; Set positive sign

EXTRACT:
	MOVL	SP, R8			; R8 points to local frame
	MOVAB	LOCAL_FRAME(SP), SP	; Set up local frame
	MOVAB	BIN_PT(R8), R4		; R4 points to binary point
	EXTZV	#7, #8, R0, R2		; Extract exponent
	BEQL	ZERO			; Still reserved operand; give up
	ROTL	#16, R0, R0		; Make into proper fraction
	ROTL	#16, R1, R1
	SUBL2	#128, R2		; Remove bias
	BGEQ	10$			; If value is less than 1,
	CLRQ	-8(R4)			;  clear some fraction bits
					;  in case value is < 2**-64.
	BRB	20$
10$:	CLRQ	(R4)			; If value is greater than 1,
					;  clear some integer bits
					;  in case value is >= 2**88.
20$:	INSV	#0, R2, #32, -11(R4)	; Create fixed point binary
	INSV	R1, R2, #32, -7(R4)	; value with enough surrounding
	BISL2	#^X800000, R0
	INSV	R0, R2, #24, -3(R4)	; zeroes as "guard digits".
	INSV	#0, R2, #32, (R4)
	INSV	#0, R2, #32, +4(R4)
	MOVL	R2, BIN_EXP(R8)		; Save binary exponent
	BLEQ	FRACT_ONLY		; If less than 1...
	MOVAB	DIGITS(R8), R6		; R6 points to scratch area
	PUSHL	R7			; Save R7 so we can use as temp
	ASHL	#-5, R2, R5		; How many integer longwords?
	MOVL	R5, LONG_COUNT(R8)
	BLEQ	ONE_LONG		; 1 longword
	CMPB	R5, #3
	BLSS	INT_LOOP		; 2 or 3 longwords
	BRB	FOUR_LONG		; Four longwords

ONE_LONG:
	BRW	INT_NEXT

ZERO:
	MOVL	STRING_ADDR(R7), R1	; Get string address
	MOVC5	#0, (SP), #^A/0/, SIG_DIGITS(R7), (R1) ; Zero fill string
	CLRQ	OFFSET(R7)		; Clear offset and exponent
	CLRL	SIGN(R7)		; Zero has sign of zero
	RSB				; Return to caller

FRACT_ONLY:
	MNEGL	#1, LONG_COUNT(R8)	; To note that there is no integer part
	BRW	FORMAT			; Go directly to formatter


	.SBTTL	Numeric conversion routines

;+
; This is the portion which converts the integer part of the value
; to 1-5 longwords of radix 10**9.  This is done by repeated division
; by 10**9.
;-
FOUR_LONG:
	CLRL	R1			; High part of dividend
	MOVAL	INT_HI(R8), R4		; Use R4 as address pointer
	MOVL	(R4),R0			; Low part of dividend
	BRB	INT_DIV
INT_LOOP:
	MOVAL	BIN_PT(R8)[R5], R4	; Get address pointer
	TSTL	4(R4)			; Are we missing some bits?
	BEQL	10$			; No if zero
	INCL	R5			; Back up one longword
	INCL	LONG_COUNT(R8)		; Bump longword counter
	BRB	INT_LOOP		; And try again
10$:	MOVQ	(R4), R0		; Get first quadword of dividend
INT_DIV:
	EDIV	#^D1000000000,R0,(R4),R1
	CLRL	4(R4)			; Since this is really a
					; quadword quotient, zero the
					; higher longword.
	MOVL	R5, R7			; R7 is inner loop counter
30$:	SUBL3	#^D500000000,R1,R3	; Is this dividend too large ?
	BLSS	40$			; Skip adjustment if not
	MOVL	-(R4), R2		; Low part of dividend
	EDIV	#^D1000000000,R2,(R4),R1
					; Divide by 10**9
	BISL	#^X80000000,(R4)	; Set high bit
	BRB	60$
40$:	MOVL	-(R4), R0		; Get low part of dividend
	EDIV	#^D1000000000,R0,(R4),R1
					; Divide and store result in (R4)
60$:	SOBGTR	R7, 30$			; Loop back
	MOVL	R1, (R6)+		; Store result on stack
	SOBGTR	R5, INT_LOOP		; loop back if not done
INT_NEXT:
	MOVL	LONG_COUNT(R8), R2
	MOVQ	BIN_PT(R8),R0		; Low part of next dividend
	EDIV	#^D1000000000,R0,4(R6),(R6)+
	BEQL	10$			; Branch if high longword is 0
	INCL	R2			; Convert one more longword
10$:	TSTL	DIGITS(R8)[R2]		; Find first non-zero longword
	BNEQ	20$			; Found.  Go format them.
	DECL	R2			; Not found.  Try next one.
	BRB	10$
20$:	MOVL	R2, LONG_COUNT(R8)	; Save longword count
	MOVL	(SP)+, R7		; Restore R7 from where saved
	BRB	FORMAT	

;+
; This routine initializes the pointer for getting fraction digits.
; The number of fraction longwords is calculated and is stored in
; LONG_COUNT(R8) for future calls.
;-
INIT_FRACT:
	SUBL3	#<56+32-1>, BIN_EXP(R8), R0
	DIVL3	#32, R0, LONG_COUNT(R8)

;+
; This routine gets the next nine fraction digits.  It is smart
; enough not to do EMULs on zero values.
;-
GET_FRACT:
	CLRL	R1			; Result is initially zero
	MOVL	LONG_COUNT(R8), R2	; Get number of fraction longwords
	BGEQ	30$			; If not negative, return
5$:	MOVAL	BIN_PT(R8)[R2], R3	; Get address of lowest longword
10$:	MOVL	(R3), R0		; Get the longword
	BLEQ	40$			; Beware of overflow on EMUL
	EMUL	#^D1000000000, R0, R1, R0
	MOVL	R0, (R3)+		; Store result
	INCL	R2			; 1 less longword
	BLSS	10$			; Loop back if more
30$:	RSB
40$:	BEQL	60$			; Don't multiply a zero
	EMUL	#^D1000000000, R0, R1, R0
	ADDL2	#^D1000000000, R1	; To prevent overflow
	MOVL	R0, (R3)+		; Store result
	INCL	R2			; 1 less longword
	BLSS	10$			; Loop back if more
	RSB
60$:	MOVL	R1, (R3)+		; Store current product
	CLRL	R1
	INCL	R2			; 1 less longword
	BLSS	10$			; Loop back if more
	RSB

	.SBTTL	Character formatting routines
;+
; After all the integer portion of the value has been converted to
; longwords and stored, the integer part is then converted to
; characters and the fraction part, if any, is converted.
;-
FORMAT:
	MOVL	STRING_ADDR(R7), R5	; Get string address
	MOVB	#^A/0/, (R5)+		; Set first character to '0'
	ADDL3	#1, SIG_DIGITS(R7), R6 	; Generate at least one extra digit
	MOVL	LONG_COUNT(R8), R0	; How many integer longwords?
	BGEQ	1$
	BRW	NO_INT			; If none, skip this part
1$:	ADDL2	#9, R5			; R5 will store least signif digit
					;  (lsd) in the high order byte.
	MOVL	R5, R3			; save the old address
	MOVQ	ASCII_ZEROES, -9(R5)	; Initialize the string to contain 30's
					;  the 9th byte will be filled below
	MOVL	DIGITS(R8)[R0], R1	; R1/R2 must be a quadword for
	CLRL	R2			;  the EDIV
	EDIV	#100, R1, R1, R4  	; extract two lsd
	BEQL	60$
	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	EDIV	#100, R1, R1, R4  	; extract two lsd
	BEQL	60$
	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	EDIV	#100, R1, R1, R4  	; extract two lsd
	BEQL	60$
	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	EDIV	#100, R1, R1, R4  	; extract two lsd
60$:	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	ADDB3	#^A/0/, R1, -(R5)	; character rep needed for last number
;
; Numbers are stored as characters as follows: low order byte is the most
; significant digit (character), while the high order byte is the least signif
; digit (character). The storage took place from the high oder digit to the
; low order digit. Since we used an EDIV by 100, 0,1, or 2 zeroes may be
; located at (R5). R0 is to contain the number of nonzero digits (not char 30)
; between (R3) and (R5). If R1<>0 then R0=9. If R1=0, there is at least one
; zero at (R5) and possibly another at (R5)-1. For example, 12 --> 323130
; while 102 --> 3230313030.
;
	SUBL3	R5, R3, R0
	TSTL	R1
	BNEQ	98$
	DECL	R0			; At least on leading 30.
	CMPB	1(R5), #^A/0/		; there still could be 1 more 0
	BNEQ	98$			; 102 --> 3230313030 by the above
					;  we've already seen rightmost 30
	DECL	R0			;  if there is another, subt 1.
					;  There can be no more consect 0's
98$:	SUBL3	R0, #10, OFFSET(R7)
	MULL3	#9, LONG_COUNT(R8), R1	; Calculate exponent
	ADDL3	R0, R1, DEC_EXP(R7) 	; Store exponent
	MOVL	R3, R5			; Move string pointer up by 9
	SUBL2	R0, R6			; Decrease # of digits left to produce
OUT_LOOP:
	BLEQ	OUT_ROUND		; Done if no more sig. digits
	DECL	LONG_COUNT(R8)		; Decrement longword count
	MOVL	LONG_COUNT(R8), R0
	BGEQ	1$
	BRW	OUT_FRACT		; Do fraction part if time
1$:	ADDL2	#9, R5			; R5 will store least signif digit
					;  (lsd) in the high order byte.
	MOVL	R5, R3			; save the old address
	MOVQ	ASCII_ZEROES, -9(R5)	; Initialize the string to contain 30's
					;  the 9th byte will be filled below
	MOVL	DIGITS(R8)[R0], R1	;
	CMPL	R1, #^X000000A		; if R1 < 10 you may skip the EDIV
	BLSS	70$			;
	CLRL	R2			; R1/R2 must be a quadword for the EDIV
	EDIV	#100, R1, R1, R4  	; extract two lsd
	BEQL	60$
	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	EDIV	#100, R1, R1, R4  	; extract two lsd
	BEQL	60$
	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	EDIV	#100, R1, R1, R4  	; extract two lsd
	BEQL	60$
	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	EDIV	#100, R1, R1, R4  	; extract two lsd
60$:	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
70$:	ADDB3	#^A/0/, R1, -(R5)	; character rep needed for last number
	MOVL	R3, R5			; Move string pointer up by 9
	SUBL2	#9, R6			; Adjust # of sig. digits
	BRB	OUT_LOOP

OUT_ROUND:
;	BRB	ROUND
	BRW	ROUND

;+
; This code is executed if the value is less than 1.
;-
NO_INT:
	BSBW	INIT_FRACT		; Initialize the pointers
					; and get first 9 digits.
	CLRL	DEC_EXP(R7)		; Calculate exponent
10$:	SUBL2	#9, DEC_EXP(R7)		; Its 9 smaller now
	TSTL	R1			; Are digits zero?
	BNEQ	20$
	BSBW	GET_FRACT		; Get next 9 digits
	BRB	10$			; And try again
20$:	ADDL2	#9, R5			; R5 will store least signif digit
					;  (lsd) in the high order byte.
	MOVL	R5, R3			; save the old address
	MOVQ	ASCII_ZEROES, -9(R5)	; Initialize the string to contain 30's
					;  the 9th byte will be filled below
	CMPL	R1, #^X000000A		; if R1 < 10 you may skip the EDIV
	BLSS	70$			;
	CLRL	R2			; R1/R2 must be a quadword for the EDIV
	EDIV	#100, R1, R1, R4  	; extract two lsd
	BEQL	60$
	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	EDIV	#100, R1, R1, R4  	; extract two lsd
	BEQL	60$
	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	EDIV	#100, R1, R1, R4  	; extract two lsd
	BEQL	60$
	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	EDIV	#100, R1, R1, R4  	; extract two lsd
60$:	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
70$:	ADDB3	#^A/0/, R1, -(R5)	; character rep needed for last number
;
; Numbers are stored as characters as follows: low order byte is the most
; significant digit (character), while the high order byte is the least signif
; digit (character). The storage took place from the high oder digit to the
; low order digit. Since we used an EDIV by 100, 0,1, or 2 zeroes may be
; located at (R5). R0 is to contain the number of nonzero digits (not char 30)
; between (R3) and (R5). If R1<>0 then R0=9. If R1=0, there is at least one
; zero at (R5) and possibly another at (R5)-1. For example, 12 --> 323130
; while 102 --> 3230313030.
;
	SUBL3	R5, R3, R0
	TSTL	R1
	BNEQ	98$
	DECL	R0			; At least on leading 30.
	CMPB	1(R5), #^A/0/		; there still could be 1 more 0
	BNEQ	98$			; 102 --> 3230313030 by the above
					;  we've already seen rightmost 30
	DECL	R0			;  if there is another, subt 1.
					;  There can be no more consect 0's
98$:	SUBL3	R0, #10, OFFSET(R7)
	ADDL2	R0, DEC_EXP(R7) 	; Calculate exponent
	MOVL	R3, R5			; Move string pointer up by 9
	SUBL2	R0, R6			; Adjust # of sig. digits
	BRB	FRACT_LOOP		; Get 9 more

;+
; This code starts the fraction portion if the integer portion exists.
;-
OUT_FRACT:
	BSBW	INIT_FRACT		; Initialize and get 9 digits
	ADDL2	#9, R5			; R5 will store least signif digit
					;  (lsd) in the high order byte.
	MOVL	R5, R3			; save the old address
	MOVQ	ASCII_ZEROES, -9(R5)	; Initialize the string to contain 30's
					;  the 9th byte will be filled below
	CMPL	R1, #^X000000A		; if R1 < 10 you may skip the EDIV
	BLSS	70$			;
	CLRL	R2			; R1/R2 must be a quadword for the EDIV
	EDIV	#100, R1, R1, R4  	; extract two lsd
	BEQL	60$
	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	EDIV	#100, R1, R1, R4  	; extract two lsd
	BEQL	60$
	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	EDIV	#100, R1, R1, R4  	; extract two lsd
	BEQL	60$
	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	EDIV	#100, R1, R1, R4  	; extract two lsd
60$:	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
70$:	ADDB3	#^A/0/, R1, -(R5)	; character rep needed for last number
	MOVL	R3, R5			; Move string pointer up by 9
	SUBL2	#9, R6			; Adjust # of sig. digits
FRACT_LOOP:
	BLEQ	ROUND			; If not, finish
	BSBW	GET_FRACT		; Get 9 more digits
	ADDL2	#9, R5			; R5 will store least signif digit
					;  (lsd) in the high order byte.
	MOVL	R5, R3			; save the old address
	MOVQ	ASCII_ZEROES, -9(R5)	; Initialize the string to contain 30's
					;  the 9th byte will be filled below
	CMPL	R1, #^X000000A		; if R1 < 10 you may skip the EDIV
	BLSS	70$			;
	CLRL	R2			; R1/R2 must be a quadword for the EDIV
	EDIV	#100, R1, R1, R4  	; extract two lsd
	BEQL	60$
	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	EDIV	#100, R1, R1, R4  	; extract two lsd
	BEQL	60$
	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	EDIV	#100, R1, R1, R4  	; extract two lsd
	BEQL	60$
	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
	EDIV	#100, R1, R1, R4  	; extract two lsd
60$:	MOVW	TABLE[R4], -(R5)	; load correct char rep of the 2 digits
70$:	ADDB3	#^A/0/, R1, -(R5)	; character rep needed for last number
	MOVL	R3, R5			; Move string pointer up by 9
	SUBL2	#9, R6			; Adjust # of sig. digits
	BRB	FRACT_LOOP		; Loop back for more

;+
; This routine rounds the value to the given number of significant
; digits, unless flag V_TRUNCATE is on.  If so, the value is truncated
; at the next digit.
;-
ROUND:
	DECL	R6
	ADDL2	R6, R5			; Find least significant + 1
	BBS	#V_TRUNCATE, FLAGS(R7), FINIS	; Truncate if desired
	BBC	#V_ROUND_RIGHT, FLAGS(R7), 5$	; Round to right of dec pt?
	ADDL3	DEC_EXP(R7), RT_RND(R7), R0	; Yes, find it
	BLSS	FINIS			; Done if rounds to zero
	CMPL	R0, SIG_DIGITS(R7)	; Round to right of # sig digits?
	BGEQ	5$			; Yes, round to significant digits
	ADDL2	OFFSET(R7), R0		; Finish calculation
	ADDL3	R0, STRING_ADDR(R7), R5	; Get rounding character address
5$:	CMPB	(R5), #^A/5/		; Round?
	BLSS	FINIS			; No, just finish
	MOVL	R5, R0			; Save position
10$:	CMPB	-(R0), #^A/9/		; If this is a 9...
	BLSS	20$
	MOVB	#^A/0/, (R0)		; Then it becomes a zero
	BRB	10$			; And we continue
20$:	INCB	(R0)			; Else this is last carry
	SUBL2	STRING_ADDR(R7), R0	; Do we need to change offset
	CMPL	R0, OFFSET(R7)		; and exponent?
	BGEQ	FINIS			; No
	MOVL	R0, OFFSET(R7)		; Yes, set new offset
	INCL	DEC_EXP(R7)		; Set new exponent

;+
; All done.
;-
FINIS:
	SUBL2	#LOCAL_FRAME, SP	; Restore stack pointer
	MOVL	R7, R1			; Restore common frame pointer
	RSB				; Return to caller

	.END
