MODULE RM3CONN (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                INDEXED SPECIFIC CODE FOR $CONNECT
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:	Wendy Koenig     CREATION DATE:        	6-APR-78  10:11
!
!
! MODIFIED BY:
!
!	V03-017	JWT0187		Jim Teague		19-Jul-1984
!		Make more appropriate error exit when user attempts
!		to connect with EOF and BIO.
!
!	V03-016	DAS0001		David Solomon		25-Mar-1984
!		Fix broken branches.
!
!	V03-015	TMK0006		Todd M. Katz		02-Apr-1983
!		When the new BDB stuff was implemented (RAS0134), the 
!		implementer neglected to put the addresses of the AI and BI
!		journalling BDBs within the data BDB. This corrects the problem.
!		The fields within the BDBs were also being set up incorrectly
!		because the constant RJR$C_BLKLEN was being used as the size of 
!		the RMS Journalling record overhead instead of RJR$C_BKTLEN.
!
!	V03-014 MCN0013		Maria del C. Nasr	24-Mar-1983
!		Reorganize GETSPC and RETSPC linkages
!
!	V03-013	RAS0134		Ron Schaefer		16-Mar-1983
!		Implement an alternate BDB strategy for ISAM AI/BI journaling.
!		The technique is to allocate one huge area for each
!		BDB.  This area has room for the data buffer, a BDB and RJR
!		for AI journaling; a data buffer, BDB and RJR for BI
!		journaling.  The normal BDB points to the AI buffer.
!		The AI and BI journaling BDBs are not allocated on the
!		normal BDB chain but instead are only found from the
!		data bucket BDB.
!
!	V03-012	MCN0012		Maria del C. Nasr	24-Feb-1983
!		Reorganize linkages
!
!	V03-011	TMK0005		Todd M. Katz		22-Dec-1982
!		If the file allows updates, and is either a prologue 3 file or
!		defines alternate keys, then there is a new record buffer which 
!		must be allocated. The address of this buffer is stored in 
!		IRB$L_OLDBUF, and it is the same size as the internal record 
!		buffer. I have increased the size of the record buffers by two
!		in some cases, to allow for both the size of the record and the 
!		record itself to be stored side by side within the same buffer.
!
!	V03-010	TMK0004		Todd M. Katz		06-Dec-1982
!		If the file is a prologue 1 or 2 file, contains alternate
!		keys, and is open for write access then allocate a record
!		buffer and store its address in IRB$L_RECBUF. This record
!		buffer will be used to store the primary data record being
!		deleted during a $DELETE. The use of this buffer has become
!		necessary because of the changes made in the $DELETE algorithm.
!		The user data record is now deleted before the alternate keys,
!		instead of the other way around which is how it has been done in
!		the past. Thus, the primary data record must be saved off to 
!		the side so that after the user data record has been deleted it
!		is still available for the extraction of the alternate keys as
!		part of their deletion. This record buffer is used to save the
!		primary data record.
!
!	V03-009	TMK0003		Todd M. Katz		02-Dec-1982
!		The number of keybuffers is now represented by the constant
!		IFB$C_KBUFNUM.
!
!	V03-008	TMK0002		Todd M. Katz		24-Nov-1982
!		Allocate a seventh keybuffer.
!
!	V03-007	KBT0336		Keith B. Thompson	10-Sep-1982
!		Remove ref. to RM$GETS0SPC routine
!
!	V03-006	KBT0160		Keith B. Thompson	21-Aug-1982
!		Reorganize psects
!
!	V03-005	TMK0001		Todd M. Katz		22-Jun-1982
!		Implement the RMS cluster solution for next record positioning.
!		Instead of keeping the NRP context in system space, RMS now
!		keeps it locally in the IRAB. As a result it no longer has
!		to allocate space for a NRP cell, and so that maybe deleted
!		from this routine. Also, allocate a sixth keybuffer. Finally, 
!		the function of the bit IRB$V_EOF has been replaced by the bit
!		IRB$V_CON_EOF.
!
!	V03-004	KBT0055		Keith B. Thompson	8-Jun-1982
!		No longer need to allocate any index descriptors on connect
!
!	V03-003	KPL003		P Lieberwirth		25-May-1982
!		Fix bug intoduced by KPL0002.  Can't call RM$DISCOMMON
!		on errors allocating BDBs or global buffers.
!
!	V03-002 LJA0007		Laurie Anderson 	25-Mar-1982
!		Change KBUFSZ to reference a macro when computing buffer 
!		size and make IFB$B_KBUFSZ a word, now: IFB$W_KBUFSZ.
!
!	V03-001	KPL0002		P Lieberwirth		17-Mar-1982
!		Don't allow both PUT to EOF and Block IO to be specified.
!		Call RM$DISCOMMON on this error and errors allocating BDBs.
!		Add subtitle.
!
!	V02-020	KPL0001		P Lieberwirth		 5-Nov-1981
!		Add support for PUT to EOF.
!
!	V02-019	CDS0002		C Saether		29-Sep-1981
!		Always allocate 5 keybuffers for all plgs.
!
!	V02-018	PSK0002		Paulina S. Knibbe	08-Aug-1981
!		Remove support for truncated keys in INDEX on
!		prologue three files.
!
!	V02-017	CDS0001		C Saether		06-Aug-1981
!		Deallocate index descriptors if BRO create
!		and BIO connect.
!
!	V02-016	MCN0011		Maria del C. Nasr	19-Jun-1981
!		Add a fifth key buffer for prologue 3 files.
!
!	V02-015	PSK0001		Paulina S. Knibbe	12-Jun-1981
!		Allocate a 'split context' block whenever we do
!		a connect on a prologue three file.
!
!	V02-014	MCN0008		Maria del C. Nasr	15-May-1981
!		Add a fourth key buffer for prologue 3 files.
!
!	V02-013	MCN0007		Maria del C. Nasr	20-Apr-1981
!		Add code to allocate record output buffer for prologue 3
!		files.
!
!	V02-012 REFORMAT	Ken Henderson		29-Jul-1980
!		The code was reformatted.
!
! REVISION HISTORY:
!
!   Wendy Koenig, 	24-JUL-78  13:34
!   X0002 - allocate 3rd keybuffer to store primary key on put
!
!   Wendy Koenig, 	24-OCT-78  14:01
!   X0003 - make changes caused by sharing conventions
!
!   Wendy Koenig, 	25-OCT-78  13:05
!   X0004 - increment nrp_vbn in case it's bio
!
!   Wendy Koenig, 	3-NOV-78  8:48
!   X0005 - allocate update buffer for all keys,
!	 if bro turns to record i/o and put accessed, allocate the key desc
!
!   Wendy Koenig, 	6-NOV-78  13:05
!   X0006 - check for eof bit in rop, if found, give error
!
!   Wendy Koenig, 	13-NOV-78  13:28
!   X0007 - sharing implementation changes
!
!   Wendy Koenig, 	20-NOV-78  10:54
!   X0008 - allocate bcb's and other changes for sharing
!
!   Wendy Koenig, 	28-NOV-78  15:22
!   X0009 - bdballoc will now allocate the minimum # for isam, so don't call
! bdballoc_alt
!
!   Wendy Koenig, 	22-JAN-79  13:05
!   X0010 - allocate a lock bdb per stream, not per file ( needed for update
! RRV)
!
!   Christian Saether,	26-Oct-79  23:45
!   0011 - rm$bdballoc now allocates lock bdb and does block i/o right
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! Define default psects for code
!
PSECT
    CODE = RM$RMS3(PSECT_ATTR),
    PLIT = RM$RMS3(PSECT_ATTR);

! Linkages
!
LINKAGE
    L_BDBALLOC,
    L_ERROR_LINK1,
    L_GETSPC,
    L_LINK_7_10_11,
    L_RABREG,
    L_RABREG_7,
    L_RETSPC;

! External Routines
!
EXTERNAL ROUTINE
    RM$BDBALLOC		: RL$BDBALLOC ADDRESSING_MODE( LONG_RELATIVE ),
    RM$CCLN1		: RL$ERROR_LINK1 ADDRESSING_MODE( LONG_RELATIVE ),
    RM$CLOSE3		: RL$LINK_7_10_11,
    RM$DISCOMMON	: RL$ERROR_LINK1 ADDRESSING_MODE( LONG_RELATIVE ),
    RM$KEY_DESC		: RL$RABREG_7,
    RM$RETSPC1		: RL$RETSPC NOVALUE ADDRESSING_MODE( LONG_RELATIVE ),
    RM$GETSPC1		: RL$GETSPC ADDRESSING_MODE( LONG_RELATIVE );



%SBTTL 'RM$CONNECT3B'
GLOBAL ROUTINE RM$CONNECT3B : RL$RABREG =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This module performs the following functions required for
!	connecting indexed files:
!	1 -- performs various validity checks
!	2 -- if connect for block i/o allocate a BDB and exit after
!	     first deallocating index descriptors if BRO create
!	3 -- allocate BDB's and buffer's depending on access mode
!	     -- if write accessed allocate a lock BDB
!	     -- and if shared, allocate a BCB
!	4 -- allocate key buffers and an update buffer
!	     --	allocates 7 key buffers of keybufsize
!	5 -- allocate record output buffer
!	6 -- allocate old record buffer if update accesses allowed
!	7 -- initialize various fields in the IRAB
!	8 -- initialize the next record positioning information kept within
!	     the IRAB
!
! CALLING SEQUENCE:
!
!	BSBW RM$CONNECT3B
!	Entered via case branch from RMS$CONNECT and BSBW from RM$CONNECT3;
!	returns to RM$CONNECT3 and then exits from RMS directly
!	(i.e  -	on success, it branches to RM$EXSUC
!	      - on error, it calls either RM$CCLN1 to deallocate the IRAB or
!		RM$COMCLNUP to deallocate the BDB's, buffer's, BCB's, and the
!		IRAB, and then branches to RM$EX_NOSTR)
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!
!	R8 -- RAB address
!	R9 -- IRAB address
!	R10 -- IFAB address
!	R11 -- IMPURE AREA address
!	contents of RAB and IRAB
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!
!	Set various fields in IRAB and IFAB
!
! ROUTINE VALUE:
!
!	Usual RMS status codes
!
! SIDE EFFECTS:
!
!	Allocate BDB's and buffer's, key buffers and update buffer, record
!	output buffer and old record buffer, and zero out all next record
!	positioning context variables kept within the  IRAB except for the
!	current key of reference which is initialized to that specified
!	by the user in the RAB.
!
!--

    BEGIN

    MACRO
	DEALLOC_KEYBUF =
	    BEGIN

	    SIZE = .IFAB[IFB$W_KBUFSZ]*IFB$C_KBUFNUM;

	    IF .SIZE LSS 12
	    THEN
		SIZE = 12;
	    
	    RM$RETSPC1 ( .SIZE, 0, KEYBUF_ADDR(1) );
	    RM$DISCOMMON();
	    RETURN .STATUS;
	    END; %,

	DEALLOC_UPDBUF =
	    BEGIN
	    IF .IFAB[IFB$V_UPD]
	    THEN
		BEGIN
		SIZE = .IFAB[IFB$B_NUM_KEYS];

		IF .SIZE LSS 12
		THEN
		    SIZE = 12;

		RM$RETSPC1 ( .SIZE, 0, .IRAB[IRB$L_UPDBUF] );
		END;
	    END; %;

    BUILTIN
	TESTBITSC;

    EXTERNAL REGISTER
	COMMON_RAB_STR;

    GLOBAL REGISTER
	R_IDX_DFN_STR;

    LOCAL
	SIZE;

    ! Support PUT to EOF by translating ROP bit into IRAB bit for use on first
    ! PUT.
    !
    IF .RAB[RAB$V_EOF]
    THEN

	!  Don't allow EOF and BIO to both be specified.
	!
	IF .RAB[RAB$V_BIO]
	THEN
	    BEGIN
	    RM$CCLN1();
	    RETURN RMSERR(ROP);
	    END
	ELSE
	    IRAB[IRB$V_CON_EOF] = 1;


    ! In case we're in block i/o mode, have to do this -- same field as NRP_PTR.
    !
    IRAB[IRB$L_NRP_VBN] = .IRAB[IRB$L_NRP_VBN] + 1;

    ! If $OPEN or $CREATE was done with bro specified, use the bio rop bit
    ! to determine whether to connect for block or record operations. note:
    ! any subsequent connects are necessarily of the same type.
    !
    IF TESTBITSC (IFAB[IFB$V_BRO])
    THEN

	! If block io deallocate the index descriptors and set the bio bit in
	! the ifab to disallow record operations
	!
	IF .RAB[RAB$V_BIO]
	THEN
	    BEGIN
	    RM$CLOSE3();
	    IFAB[IFB$V_BIO] = 1
	    END;

    IRAB[IRB$L_CURBDB] = 0;

    ! Allocate all of the BDB's and buffer's and BCB's ( 1 BCB per BDB).
    ! RM$BDBALLOC handles all defaulting such that a minimum of 2 buffers
    ! are allocated plus a lock BDB (no buffer) if write accessed. For block
    ! i/o a BDB only (no buffer) is allocated. Exit after BDBALLOC if block
    ! i/o. Also, count all 'extra' buffers (number in excess of 2 buffers)

! If either AI or BI journaling is enabled then a more complicated BDB
! and buffer strategy is used.   Basically the data and AI buffer is
! shared, there is a separate BI buffer and there are separate AI
! and BI BDBs and RJRs allocated out of this one huge area.
! The reason for the one huge area is to make sure that the RM0x
! level of the system sees only normal BDBs and buffers.
! The addressing of the other portions is as follows:
!
!
! ...	+-----------------------+			+----------------------+
!	!     data BDB		!		------->!	AI BDB	       !
!	!			!		!	!		       !
!	!    BDB$L_AI_BDB-------!----------------	!		       !
!	!    			!		     ---!------BDB$L_ADDR      !
!	!			!		     !	!		       !
!	!			!		     !  +----------------------+
!	!			!		     !  !	AI RJR	       !
!	!			!		     -->!		       !
!	!			!			+----------------------+
!	!    BDB$L_ADDR---------!---------------------->!		       !
!	!			!			~    data buffer       ~
!	!			!			+----------------------+
!	!			!			!       BI BDB	       !
!	!    BDB$L_BI_BDB-------!---------------------->!		       !
!	!			!		     ---!------BDB$L_ADDR      !
!	+-----------------------+		     !	!		       !
!						     !  +----------------------+
!						     !  !	BI RJR	       !
!						     -->!		       !
!							+----------------------+
!							!	data buffer    !
!							~		       ~
!							!		       !
!							+----------------------+

    BEGIN

    LOCAL
	BKS,				! max bucket size
	BUFSIZ,				! size of buffer to allocate
	JBDB:	REF BLOCK[,BYTE],	! pointer to jnlbdb
	DBDB:	REF BLOCK[,BYTE];	! pointer to data bdb

    BUFSIZ = BKS = .IFAB[IFB$B_BKS] ^ 9;

    IF .IFAB[IFB$V_AI]
    THEN
	BUFSIZ = .BUFSIZ + RJR$C_BKTLEN + BDB$C_BLN;

    IF .IFAB[IFB$V_BI]
    THEN
	BUFSIZ = .BUFSIZ + .BKS + RJR$C_BKTLEN + BDB$C_BLN;

    RETURN_ON_ERROR (RM$BDBALLOC (4, .BUFSIZ));

    ! The new BDBs are allocated onto the end of the BDB chain
    ! so now go backwards over the BDBs, carving them up as appropriate
    ! into the journaling data structures as needed.
    !
    DBDB = .IFAB[IFB$L_BDB_BLNK];

    INCR I FROM 1 TO .IRAB[IRB$B_BCNT] DO
	BEGIN
	DBDB[BDB$W_SIZE] = .BKS;

	IF .IFAB[IFB$V_AI]
	THEN
	    BEGIN
	    JBDB = .DBDB[BDB$L_ADDR];
	    DBDB[BDB$L_AI_BDB] = .JBDB;

	    JBDB[BDB$B_BID] = BDB$C_BID;
	    JBDB[BDB$B_BLN] = BDB$C_BLN/4;
	    JBDB[BDB$L_FLINK] = .JBDB;
	    JBDB[BDB$L_BLINK] = .JBDB;
	    JBDB[BDB$W_SIZE] = .BKS + RJR$C_BKTLEN;
	    JBDB[BDB$L_ADDR] = .JBDB + BDB$C_BLN;
	    DBDB[BDB$L_ADDR] = .JBDB + BDB$C_BLN + RJR$C_BKTLEN;
	    END;

	IF .IFAB[IFB$V_BI]
	THEN
	    BEGIN
	    JBDB = .DBDB[BDB$L_ADDR] + .BKS;
	    DBDB[BDB$L_BI_BDB] = .JBDB;

	    JBDB[BDB$B_BID] = BDB$C_BID;
	    JBDB[BDB$B_BLN] = BDB$C_BLN/4;
	    JBDB[BDB$L_FLINK] = .JBDB;
	    JBDB[BDB$L_BLINK] = .JBDB;
	    JBDB[BDB$W_SIZE] = .BKS + RJR$C_BKTLEN;
	    JBDB[BDB$L_ADDR] = .JBDB + BDB$C_BLN;
	    END;
	DBDB = .DBDB[BDB$L_BLINK];
	END;

    END;

    ! If open for block io return
    !
    IF .IFAB[IFB$V_BIO]
    THEN
	RETURN RMSSUC();

    IF .IRAB[IRB$B_BCNT] GTR 2
    THEN
	IFAB[IFB$B_EXTRABUF] = .IFAB[IFB$B_EXTRABUF] +
						(.IRAB[IRB$B_BCNT] - 2);

    ! Set up the key descriptor for the primary key
    !
    RETURN_ON_ERROR (RM$KEY_DESC(0), RM$DISCOMMON());

    ! The following code is made of the sections that allocate the remaining
    ! structures:
    !	- key buffers
    !	- update buffer, if update set
    !	- old record buffer if update set
    !	- record buffer
    ! In each case, if it fails to allocate any of the structures, it
    ! deallocates any of those already allocated, and returns.
    !
    BEGIN

    LOCAL
	STATUS;

    ! Allocate the keystring buffer (IFB$C_KBUFNUM * .IFB$W_KBUFSZ).
    !
    BEGIN

    LOCAL
	BLK : REF BBLOCK;

    SIZE = .IFAB[IFB$W_KBUFSZ] * IFB$C_KBUFNUM;

    IF .SIZE LSS 12
    THEN
	SIZE = 12;

    IF RM$GETSPC1( 0, .SIZE; BLK )
    THEN
	IRAB[IRB$L_KEYBUF] = .BLK
    ELSE
	RETURN RM$DISCOMMON();
    END;

    ! If update is set, then allocate an update buffer.
    !
    IF .IFAB[IFB$V_UPD]
    THEN
	BEGIN

	LOCAL
	    BLK : REF BBLOCK;

	SIZE = .IFAB[IFB$B_NUM_KEYS];

	IF .SIZE LSS 12
	THEN
	    SIZE = 12;

	IF (STATUS = RM$GETSPC1 ( 0, .SIZE; BLK ) )
	THEN
	    IRAB[IRB$L_UPDBUF] = .BLK
	ELSE
	    DEALLOC_KEYBUF;
	END;				! end of update buffer allocation

    ! Determine the number of bytes to allocate for a record buffer depending 
    ! on maximum record size.
    !
    IF .IFAB[IFB$W_MRS] EQLU 0
    THEN
	SIZE = .IDX_DFN[IDX$B_DATBKTSZ] * 512
    ELSE
	IF .IFAB[IFB$B_PLG_VER] GEQU PLG$C_VER_3
	THEN
	    SIZE = .IFAB[IFB$W_MRS] + IRC$C_KEYCMPOVH 
					   + IRC$C_DATCMPOVH 
					   + 2
	ELSE
	    SIZE = .IFAB[IFB$W_MRS] + 2;

    IF .SIZE LSS 12
    THEN
	SIZE = 12;

    ! Allocate record output buffer for unpacking of prologue 3 data records.
    ! Also allocate a record buffer if the file is a prologue 1 or 2 file, is
    ! opened for write access, and defines secondary keys.
    !
    IF  (.IFAB[IFB$B_PLG_VER] EQLU PLG$C_VER_3)
	 OR
	(.IFAB[IFB$B_NUM_KEYS] GTRU 1
		 AND
		.IFAB[IFB$V_WRTACC])
    THEN
	BEGIN

	LOCAL
	    BLK : REF BBLOCK;

	IF (STATUS = RM$GETSPC1 ( 0, .SIZE; BLK ) )
	THEN
	    IRAB[IRB$L_RECBUF] = .BLK

	! Deallocate update buffer, and key buffer on errors.
	!
	ELSE
	    BEGIN
	    DEALLOC_UPDBUF;
	    DEALLOC_KEYBUF;
	    END;

	! If update access has been specified and either the file is a prologue 
	! 3 file or alternate keys have been defined, allocate the old record 
	! buffer. On errors, return all internal structures that have been 
	! allocated.
	!
	IF  .IFAB[IFB$V_UPD]
	THEN
	    BEGIN

	    LOCAL 
		BLK : REF BBLOCK;

	    IF (STATUS = RM$GETSPC1 ( 0, .SIZE; BLK ) )
	    THEN
		IRAB[IRB$L_OLDBUF] = .BLK

	    ! Deallocate the record buffer, update buffer, and key buffer.
	    !
	    ELSE
		BEGIN
		RM$RETSPC1 ( .SIZE, 0, .IRAB[IRB$L_RECBUF] );
		DEALLOC_UPDBUF;
		DEALLOC_KEYBUF;
		END;
	    END;
	END;
    END;

    ! The next record positioning information is kept in the IRAB. It was 
    ! zeroed out when the IRAB was allocated; therefore, the first record 
    ! retrieved sequentially will be the very first record in the designated
    ! key of reference.
    !
    ! Initialize the current key of reference to that which is specified by
    ! the user in the RAB.
    !
    IRAB[IRB$B_CUR_KREF] = .RAB[RAB$B_KRF];
    RETURN RMSSUC();

    END;					! { end of routine }

END

ELUDOM
