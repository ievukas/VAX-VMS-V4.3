.!
.!	Debug help file format
.!
.!  To add qualifiers to a command use the format:
.!
.!  n Qualifiers
.!  /qualifier-1
.!	:
.!	:
.!  /qualifier-m
.!
.!  or the form:
.!  n Qualifiers
.!    brief description of qualifiers
.!  n /qualifier-1
.!	:
.!	:
.!  n /qualifier-m
.!
.!	Please make parameters that are keywords directly available.  i.e.
.!	HELP SET MODE G_FLOAT should be preferred to
.!	HELP SET MODE parameter G_FLOAT
.!	(The goal is to allow help for any debug help command to be obtained
.!	exactly as it is entered.)
.!	Qualifiers and parameters should be kept in alphabetical order.
.!
.LEFT MARGIN 5;.RIGHT MARGIN 70;.NO PAGING
.SET PARAGRAPH 0,1;.AUTOPARAGRAPH
.NO FLAGS ACCEPT;.NO FLAGS HYPHENATE;.NO FLAGS LOWERCASE
.!
.!
.B;.I-5;1 ALLOCATE
 Expands the internal memory pool that the debugger uses to store symbol table
information, breakpoint information, and so on. (The size of the memory pool
can be obtained by doing a SHOW#MODULE command and looking at the "Remaining
Size:" line.)
 This command can be used if you are getting the "NOFREE" error message
indicating that the debugger has run out of free storage.
.B;.I-4;Format:
 ALLOCATE n 
.B;.I-5;2 Parameters
 "n" is the number of bytes by which the memory pool is to be 
expanded. This number must be at least 1000. 
.!
.!
.B;.I-5;1 ATTACH
 The ATTACH command allows you to switch to another process. It is used
in the same way as the ATTACH command in DCL.
.B;.I-4;Format:
 ATTACH process-name
.B;.I-4;Example:
.SK.NOFILL
DBG> SPAWN          ! Create SMITH_1 subprocess
$ ATTACH SMITH      ! attach back to parent
DBG> ATTACH SMITH_1 ! attach to subprocess
.FILL
.!
.!
.B;.I-5;1 @file-spec
 Execute DEBUG commands from the specified file. If you have issed a
"SET OUTPUT VERIFY", all commands read from a command procedure are
echoed on the terminal.
 Parameters may be passed in to a command procedure. Parameters
can be address expressions, language expressions, or strings.
(Corresponding to the three kinds of DEFINE symbols.) Inside the
command procedure, the parameters get bound to names via the
DECLARE command.
.B;.I-4;Format:
 @file-spec [ parameter [,parameter...]]
.B;.I-5;2 Parameters
.B;.I-4;file-specification
 Specifies the command procedure to be executed. If the
file-specification does not include a file type, the default file
type .COM is used. A logical name may be given.
.B;.I-4;parameter
 This can be an address or value expression in the current language,
or a quoted string. It is bound to a name within the command procedure
by using the DECLARE command. (See the help on DECLARE). 
.!
.!
.B;.I-5;1 CALL
 Calls a procedure which is part of the user program. DEBUG displays
the return value of the procedure.
.B;.I-4;Format:
 CALL routine-name [ (argument [,argument,...]) ]
.B;.I-5;2 Parameters
.B;.I-4;routine-name
 Specifies the name or the virtual address of the procedure to be
called.
.B;.I-4;argument(s)
 One or more arguments required by the procedure.
These arguments can be passed by value, by reference, by descriptor,
or "by address" (see the four subtopics for more detail).
.B;.I-5;3 %ADDR
.B;.I-4;CALL SUB ( %ADDR address-expression)
 This is the default. DEBUG obtains the result of the address expression
and passes that address into the subroutine. For simple variables such as X,
CALL SUB (%ADDR X) corresponds exactly to how FORTRAN implements SUB(X),
i.e., the address of X is passed into the subroutine SUB. So for named
variables, this corresponds to call by reference in FORTRAN. For other
expressions, %REF is the way to achieve call by reference.
.B;.I-5;3 %DESCR
.B;.I-4;CALL SUB ( %DESCR lang-expression)
 DEBUG evaluates the language expression and builds a VAX-standard
descriptor to describe the value. The descriptor is passed to the subroutine.
This is how you would pass strings to FORTRAN subroutines.
.B;.I-5;3 %REF
.B;.I-4;CALL SUB ( %REF lang-expression)	! Call by reference
 DEBUG evaluates the expression and passes a pointer to the value into
the called routine. This corresponds to the way FORTRAN passes 
the result of expressions.
E.g., on CALL SUB (%REF 1) a pointer to a memory location
containing 1 is passed into the subroutine.
.B;.I-5;3 %VAL
.B;.I-4;CALL SUB ( %VAL lang-expression)	! Call by value
 DEBUG evaluates the language expression and passes the value directly into
the called routine.
.B;.I-5;2 Qualifiers
 You can specify whether you want ASTs enabled during the call.
.B;.I-4;/AST (default) - ASTs can be delivered during execution of
your called subroutine.
.B;.I-4;/NOAST - ASTs will not be delivered during execution of
your called subroutine.
.!
.!
.B;.I-5;1 CANCEL
 Cancels breakpoints, tracepoints, and watchpoints, and restores
scope and source directory search list and user-set entry/display modes, 
radix, and types to their default values. Also cancels screen displays and 
windows.  The item canceled depends on the keyword specified in the command.
.B;.I-4;Format:
 CANCEL keyword [/qualifier] [parameters]
.B;.I-5;2 Parameters
.B;.I-4;keyword
 Specifies the item to be canceled. Keyword can be ALL, BREAK, DISPLAY,
EXCEPTION BREAK, MODE, MODULE, RADIX, SCOPE, TRACE, WINDOW, WATCH, 
or TYPE/OVERR.
.B;.I-4;qualifier
 Depends on the keyword specified.
.B;.I-4;parameters
 Depends on the keyword specified.
.B;.I-5;2 ALL
 Cancels all breakpoints, tracepoints, watchpoints, and restores
scope and user-set entry/display modes and types to their default
values.
 CANCEL ALL does not affect the current language setting or the
modules included in the debugger symbol table.
.B;.I-4;Format:
 CANCEL ALL
.B;.I-5;2 BREAK
 Cancels a previously set breakpoint, or cancels all breakpoints if
CANCEL BREAK/ALL is specified. 
 You either give an address expression specifying which breakpoint
to cancel, or a qualifier specifying which breakpoint to cancel.
.B;.I-4;Format:
.NOFILL
 CANCEL BREAK [/qualifier] 
          [address-expression [,address-expression...]]
.FILL
.B;.I-5;3 Parameters
.B;.I-4;address-expression
 Denotes the location of the breakpoint to be canceled.
Note that an address expression is not needed if a qualifier was given,
for example in CANCEL BREAK/CALL you are un-doing the effect of a previous
SET BREAK/CALL, and you do not need an address expression.
.B;.I-5;3 Qualifiers
 The qualifiers cancel the @@@@@@@@@@@@@@@
.B;.I-5;3 /ALL
 Cancel all breakpoints.
.B;.I-5;3 /BRANCH
 Cancel effect of SET BREAK/BRANCH.
.B;.I-5;3 /CALL
 Cancel effect of SET BREAK/CALL.
.B;.I-5;3 /EXCEPTION
 Cancel effect of SET BREAK/EXCEPTION.
.B;.I-5;3 /INSTRUCTION
 Cancel effect of SET BREAK/INSTRUCTION or SET BREAK/INSTRUCTION=(opcode-list).
.B;.I-5;3 /LINE
 Cancel effect of SET BREAK/LINE.
.B;.I-5;2 DISPLAY
 Cancels a specified screen display or cancels all screen displays.  You
must specify the names of the displays to be cancelled or the /ALL
qualifier, but not both.  When a screen display is cancelled, it is
deleted entirely:  Its contents are lost, it is removed from the screen
display list, and all its memory is released to the memory pool.
.B.I-4;Format:
 CANCEL DISPLAY [/qualifier] [disp-name [,disp-name...]]
.B;.I-5;3 Parameters
.B;.I-4;disp-name
 The name of a screen display to be cancelled.
.B;.I-5;3 Qualifiers
.B;.I-5;/ALL
 Specifies that all screen displays be cancelled.
.B;.I-5;2 EXCEPTION BREAK
 Cancels exception breakpoints.
 The command CANCEL EXCEPTION BREAK cancels the effect of the
command SET EXCEPTION BREAK.
.B;.I-4;Format:
 CANCEL EXCEPTION BREAK
.B;.I-5;2 MODE
 Cancels radix mode, symbolic/nosymbolic mode and G_float/D_float mode
settings established by the SET MODE command, thus reestablishing
language-specific default mode values.
.B;.I-4;Format:
 CANCEL MODE
.B;.I-5;2 MODULE
 Removes symbols declared in the specified module(s) or in all
modules from the debugger symbol table. The CANCEL MODULE
command can be used when the symbol table is full and it is
necessary to delete the symbols of selected module(s) in order to
make room for the symbols of other module(s).
 You can remove the symbols from one module, from a list of
modules, or from all modules.
.B;.I-4;Format:
 CANCEL MODULE [/qualifier] [ module[,module,...] ]
.B;.I-5;3 Parameters
.B;.I-4;module(s)
 Specifies the name of the module(s) whose symbols are to be
removed from the symbol table.
.B;.I-5;3 Qualifiers
.B;.I-5;/ALL
 Specifies that symbols in all modules be removed from the symbol
table.
.B;.I-5;2 RADIX
 Cancels radix mode settings established by the SET RADIX command, thus 
reestablishing language-specific default radix mode values.
.B;.I-4;Format:
 CANCEL RADIX [/qualifier]
.B;.I-5;3 Qualifiers
.B;.I-5;/OVERRIDE
 Cancels radix mode settings established by the SET RADIX/OVERRIDE command.
.B;.I-5;2 SCOPE
 Cancels the current scope search list established by the SET
SCOPE command.
 The CANCEL SCOPE command is equivalent in effect to the command
SET SCOPE 0. As a result of the CANCEL SCOPE command, symbols
without pathname prefixes are interpreted as if they occurred in
the currently active program unit, that is, the program unit
containing the PC.
.B;.I-4;Format:
 CANCEL SCOPE
.B;.I-5;2 SOURCE
 Cancels the current source directory search list established by
previous SET SOURCE commands.
 The CANCEL SOURCE command without a command qualifier cancels the
effect of a previous SET SOURCE command; it does not cancel the
effect of any previous SET SOURCE/MODULE=modname commands.
 The CANCEL SOURCE/MODULE=modname command cancels the effect of a
previous SET SOURCE/MODULE=modname command in which the same
module name was specified.
.B;.I-4;Format:
 CANCEL SOURCE[/MODULE=modname]
.B;.I-5;3 Qualifiers
.B;.I-5;/MODULE=modname
 Specifies the name of a module for which a source directory
search list is to be canceled.
.B;.I-5;2 TRACE
 Cancels a previously set tracepoint or cancels all tracepoints if
CANCEL TRACE/ALL is specified.  
 You either give an address expression specifying which tracepoint
to cancel, or a qualifier specifying which tracepoint to cancel.
.B;.I-4;Format:
.NOFILL
 CANCEL TRACE [/qualifier] 
          [address-expression [,address-expression...]]
.FILL
.B;.I-5;3 Parameters
.B;.I-4;address-expression
 Denotes the location of the tracepoint to be canceled. Note that an
address expression is not needed if a qualifier was given.
.B;.I-5;3 Qualifiers
.B;.I-5;/ALL
 Cancel all tracepoints.
.B;.I-5;/BRANCH
 Cancel effect of SET TRACE/BRANCH.
.B;.I-5;/CALL
 Cancel effect of SET TRACE/CALL.
.B;.I-5;/EXCEPTION
 Cancel effect of SET TRACE/EXCEPTION.
.B;.I-5;/INSTRUCTION
 Cancel effect of SET TRACE/INSTRUCTION or SET TRACE/INSTRUCTION=(opcode-list).
.B;.I-5;/LINE
 Cancel effect of SET TRACE/LINE.
.B;.I-5;2 TYPE
 Cancels the debugger override type established by the SET
TYPE/OVERRIDE command, thus setting the current override type to
"none."
 As a result of the CANCEL TYPE/OVERRIDE command, program entities
are interpreted in compiler-generated types or in the default type.
.B;.I-4;Format:
 CANCEL TYPE/OVERRIDE
.B;.I-5;3 Qualifiers
.B;.I-5;/OVERRIDE
 Must be specified. The minimum abbreviation is /OVERR.
.B;.I-5;2 WATCH
 Cancels a watchpoint set at the location denoted by the specified
address-expression or at all watchpoints.
 If you specify an address-expression as a parameter, the
watchpoint at the location denoted by that address-expression is
canceled. If you specify /ALL, all watchpoints are canceled.
.B;.I-4;Format:
.NOFILL
 CANCEL WATCH [/qualifier] 
         [address-expression [,address-expression...]]
.FILL
.B;.I-5;3 Parameters
.B;.I-4;address-expression
 Denotes the location of the watchpoint to be canceled.
.B;.I-5;3 Qualifiers
.B;.I-5;/ALL
 Specifies that all watchpoints be canceled.
.B;.I-5;2 WINDOW
 Cancels one or more specified screen window definitions or cancels all such
definitions.  You must specify the names of the screen windows to be cancelled
or the /ALL qualifier, but not both.  When a screen window definition is
cancelled, the corresponding window name is no longer available for use in
DISPLAY or SET DISPLAY commands.  The command does not affect any existing
screen displays.
.B.I-4;Format:
 CANCEL WINDOW [/ALL] [wind-name [,wind-name...]]
.B;.I-5;3 Parameters
.B;.I-4;wind-name
 The name of a screen window to be cancelled.
.B;.I-5;3 Qualifiers
.B;.I-5;/ALL
 Specifies that all screen window definitions be cancelled.  Note that this
cancels all predefined as well as user-defined window definitions.
.!
.!
.B;.I-5;1 Control
.B;.I-4;Format:
.BLANK;<CTRL/C>
.BREAK;<CTRL/Y>
.BREAK;<CTRL/Z>
.B;.I-5;2 Key
 Generally, the effect of pressing CTRL/Y or CTRL/C is the same:
the image is interrupted (but unchanged), the terminal type-ahead
buffer is purged, and the command interpreter receives control.
 Interrupting program execution with CTRL/Y or CTRL/C is useful
(1) if you have not run your program with the debugger but decide
that you want the debugger or (2) if your program is executing an
infinite loop that does not contain a breakpoint.
 Pressing CTRL/Z causes orderly termination of the debugging
session. It is identical in effect to the EXIT command. 
.!
.!
.B;.I-5;1 DBG$HELP
 A logical name which specifies the directory in which to find
the DEBUG help library. The default is SYS$HELP.
.!
.!
.B;.I-5;1 DBG$INIT
 If the logical name DBG$INIT is defined at the start of a 
debugging session, then the file that it translates to is used
as an initialization file. DEBUG commands in the file are executed
as if the file had been called with @. This feature will be useful
if there is a particular set of commands that you always execute
when you start up the debugger, such as setting a directory search
list or setting certain modules.
.!
.!
.B;.I-5;1 DECLARE
 This command is only valid inside a DEBUG command procedure.
The command is used to bind the actual parameters to names of
formal parameters inside the command procedure.
 In the simplest case, this could look like DECLARE A,B,C. Then,
if three parameters were passed in to the command procedure, they
can be referenced inside the command procedure by the names A, B,
and C.  The number of parameters to the procedure is given by the
symbol %PARCNT (see HELP Lexical %PARCNT).
.B;.I-4;Format:
 DECLARE name [:kind] [, name [:kind] ...]
.B;.I-5;2 Parameters
.B;.I-4;name
 The name of the formal parameter. This can be composed of alphabetics (A-Z)
and numerics (0-9) and must start with an alphabetic.
.B;.I-4;kind
 Can be any of ADDRESS, COMMAND, or VALUE, corresponding to the
three kinds of DEFINE symbols.
.!
.!
.B;.I-5;1 DEFINE
 The DEFINE command equates a value to a symbol (or, in the case
of DEFINE/KEY, equates a string to a keypad key).
 Assigning an address to a symbol is useful for abbreviating
locations having long names. Assigning a command string to a 
symbol provides a way of abbreviating entire DEBUG commands. 
 Defining keypad keys enables you to use the keypad for input.
.B;.I-4;Format for /ADDRESS /COMMAND or /VALUE:
DEFINE [/qualifier] symbol=expression [,symbol=expression ...]
.B;.I-4;Format for /KEY:
DEFINE/KEY[/qualifier...] key-name expression
.B.B;.I-5;2 Parameters
.B;.I-4;symbol
 Specifies the name of the symbol to be defined. The symbol can
be composed of alphanumeric (A-Z and 0-9) characters and must not
start with a numeric.
 For DEFINE/KEY, key-name must be the name of a keypad key.
.B;.I-4;expression
 For DEFINE/ADDRESS, any address expression.
 For DEFINE/COMMAND or DEFINE/KEY, any string enclosed in quotes ("). 
Quotes inside quotes must be doubled.
 For DEFINE/VALUE, any language expression in the currently set language.
.B;.I-5;2 Qualifiers
 The define command allows the following qualifiers:
.SK.NOFILL
/ADDRESS - Defines a symbol as an address.
/COMMAND - define symbol to be a string in quotes (").
/KEY     - define keypad key.
/VALUE   - define symbol to be a language expression.
/LOCAL   - define symbol is local to the command procedure.
.FILL
 See the subtopics for more details on each of these.
Further qualifiers on DEFINE/KEY are documented in that subtopic. 
.FILL
.B;.I-5;2 /ADDRESS
 This specifies that the expression is to be interpreted as an
address. The defined symbol can then be used anywhere that an
address expression is allowed, e.g., in the EXAMINE command, in
the SET WATCH command, and so on. /ADDRESS is the default. 
.B;.I-5;3 /LOCAL
 Specifies that the name will be bound to the address specified only for
the duration of the current command procedure level.
.B;.I-5;2 /COMMAND
 This specifies that the expression is to be interpreted as a string
containing a DEBUG command. The defined symbol can then be used as
a DEBUG command, and it will be expanded into the given string.
.B;.I-5;3 /LOCAL
 Specifies that the name will be bound to the command specified only for
the duration of the current command procedure level.
.B;.I-5;2 /KEY
 DEFINE/KEY equates a string to a keypad key. This command gives the same 
capabilities as DEFINE/KEY in DCL, and has the same syntax.
 You must have mode set to "KEYPAD". Default definitions are provided
(see "HELP KEYPAD"). DEFINE/KEY lets you change the default definitions.
.B;.I-4;Format:
 DEFINE/KEY [/qualifiers]  key-name  "key-definition"
.B;.I-4;Examples
.SK.NOFILL
DBG> DEFINE/KEY/NOECHO/TERMINATE KP0 "STEP"
DBG> DEFINE/KEY/IF_STATE=GOLD KP1 "EXAMINE X"
.FILL
.B;.I-5;3 /ECHO
 (Default) Specifies that the keypad definition be echoed on the terminal
when the key is used.
.B;.I-5;3 /IF_STATE=state-name
 Specifies that the key definition applies only to that state.
So, for example, if the PF1 key sets you to "GOLD" state, and you
do
.B.NOFILL
 DEFINE/KEY/IF_STATE=GOLD KP0 "EXAMINE X"
.FILL
then the sequence "PF1", "KP0" will expand to "EXAMINE X".
.B;.I-5;3 key-names
.LIT
	Key-name	LK201		VT100-type	VT52-type

	PF1		PF1		PF1		PF1
	PF2		PF2		PF2		PF2
	PF3		PF3		PF3		PF3
	PF4		PF4		PF4		PF4
	KP0,...,KP9	0,1,...,9	0,1,...,9	0,1,...,9
	PERIOD		.		.		.
	COMMA		,		,		,
	MINUS		-		-		-
	ENTER		Enter		ENTER		ENTER
	UP		^		^		^
	DOWN		V		V		V
	LEFT		<-		<-		<-
	RIGHT		->		->		->
	E1		Find		N/A		N/A
	E2		Insert Here	N/A		N/A
	E3		Remove		N/A		N/A
	E4		Select		N/A		N/A
	E5		Prev Screen	N/A		N/A
	E6		Next Screen	N/A		N/A
	HELP		Help		N/A		N/A
	DO		Do		N/A		N/A
	F6,F7,...,F20	F6,F7,...,F20	N/A		N/A
.EL
 All keys avove ENTER, including ENTER, can only be used if either of the
commands SET TERMINAL/APPLICATION or SET TERMINAL/NONUMERIC has been entered.
(Note that this is necessary to enable
all keys except the arrow keys on the VT52 and VT100 series terminals.)
.B;.I-5;3 /LOCK_STATE
 Specifies that the state set by the SET_STATE qualifier is to remain the
active state until explicitly changed.
.B;.I-5;3 /LOG
 (Default) Controls whether the system displays a message indicating that the
key definition has been successfully created.
.B;.I-5;3 /NOECHO
 Specifies that the keypad definition not be echoed on the terminal
when the key is used.
.B;.I-5;3 /NOIF_STATE
 (Default) Specifies that the key is to be defined for the current state only.
.B;.I-5;3 /NOLOCK_STATE
 (Default) Specifies that the state transition specified by the current key
will only take effect until the next terminator character is typed, or until
the after the next function key is pressed.
.B;.I-5;3 /NOLOG
 Inhibits display of the message confirming the key definition.
.B;.I-5;3 /NOSET_STATE
 (Default) Do not change the current state when the function key being
defined is entered.
.B;.I-5;3 /NOTERMINATE
 (Default) Specifies that the key expansion does not terminate the command.
.B;.I-5;3 /SET_STATE=state-name
 Specifies that using the key has the effect of putting you into the
specified state when the key being defined is used. 
.B;.I-5;3 /TERMINATE
 Specifies that the keypad key terminates the command.
.B;.I-5;2 /LOCAL
 This specifies that the symbol definition is local to the command
procedure and will go away when the command procedure is exited.
This qualifier is only valid for /ADDRESS, /COMMAND, and /VALUE.
.B;.I-5;2 /VALUE
 This specifies that the expression is to be interpreted as a
value in the current language.  The defined symbol can then be
used anywhere a value expression is allowed, such as in an
EVALUATE command.
.B;.I-5;3 /LOCAL
 Specifies that the name will be bound to the value specified only for
the duration of the current command procedure level.
.!
.!
.B;.I-5;1 DELETE
 DELETE/KEY removes a keypad definition that was established by DEFINE/KEY
(or was established as the default by DEBUG). This provides the same
capability as the DCL command DELETE/KEY.
.B;.I-4;Format:
 DELETE/KEY[/qualifiers] key-name
.B;.I-5;2 key-names
.LIT
	Key-name	LK201		VT100-type	VT52-type

	PF1		PF1		PF1		PF1
	PF2		PF2		PF2		PF2
	PF3		PF3		PF3		PF3
	PF4		PF4		PF4		PF4
	KP0,...,KP9	0,1,...,9	0,1,...,9	0,1,...,9
	PERIOD		.		.		.
	COMMA		,		,		,
	MINUS		-		-		-
	ENTER		Enter		ENTER		ENTER
	UP		^		^		^
	DOWN		V		V		V
	LEFT		<-		<-		<-
	RIGHT		->		->		->
	E1		Find		N/A		N/A
	E2		Insert Here	N/A		N/A
	E3		Remove		N/A		N/A
	E4		Select		N/A		N/A
	E5		Prev Screen	N/A		N/A
	E6		Next Screen	N/A		N/A
	HELP		Help		N/A		N/A
	DO		Do		N/A		N/A
	F6,F7,...,F20	F6,F7,...,F20	N/A		N/A
.EL
.B;.I-5;2 /KEY
 The /KEY qualifier is required.
.B;.I-5;3 Qualifiers
.B;.I-5;/ALL
 Delete all key definitions in the specified states.
.B;.I-5;/LOG
 Print an informational message for each key deleted.  (Default)
.B;.I-5;/NOLOG
 Inhibit informational messages for the deleted keys.
.B;.I-5;/NOSTATE
 (Default) The DELETE command applies to the current state only.
.B;.I-5;/STATE=(state-name[,...])
 Delete key definition for given state(s).
.!
.!
.B;.I-5;1 DEPOSIT
 Deposits the expression directly following the equal sign (=)
into the location denoted by the address-expression.
 The DEPOSIT command sets the current entity symbol (.) to the program 
location denoted by address-expression. It also sets the current value 
symbol (\) to the value of the expression on the right-hand-side of 
the deposit.
.B;.I-4;Format:
 DEPOSIT [/qualifier] address-expression = expression
.B;.I-5;2 Parameters
.B;.I-4;address-expression
 Denotes the location into which the expression immediately
following the equal sign (=) is to be deposited.
.B;.I-4;expression
 Denotes the expression value in the current language setting to be
sessioned.
 Upon execution of the DEPOSIT command, the value of each expression is
converted to the type associated with address-expression and stored at
the location denoted by address-expression.
 If expression is an ASCII string or a VAX-11 instruction, it must
be delimited by quotation marks (") or by apostrophes (').
.B;.I-5;2 Qualifiers
 Deposit the value specified by the following data type into the location
denoted by the address-expression.
.B;.I-5;/ASCIC
 The expression must be a string. The counted ascii representation
of the string is deposited into the target (i.e., the character
count is placed in the first byte).  /AC is also accepted.
.B;.I-5;/ASCID
 The target of the deposit must contain a string descriptor. The
expression on the right-hand side must be a string. The string
is deposited into the address given by the string descriptor.
If the lengths do not match then
the string is either truncated on the right or padded with blanks
on the right. /AD is also accepted.
.B;.I-5;/ASCII:n
 Specifies that type ASCII of length n (in bytes) be associated
with the location denoted by address-expression. If n is omitted, 
the debugger uses the actual length of the data item, or the length
established by "SET TYPE" if address-expression denotes an absolute
address.
.B;.I-5;/ASCIW
 The expression must be a string. The counted ascii representation
(with a word count) of the string is deposited into the target.
 /AW is also accepted.
.B;.I-5;/ASCIZ
 The expression must be a string. The string is deposited into 
the target followed by a zero byte indicating end of string.
/AZ is also accepted.
.B;.I-5;/BYTE
 Specifies that type byte integer (length 1 byte) be associated
with the location denoted by address-expression.
.B;.I-5;/D_FLOAT
 Specifies that the D_floating type (length 8 bytes) be associated
with the location denoted by the address expression.
.B;.I-5;/DATE_TIME
 The expression is a string representing a date and time (e.g.,
'14-Oct-1984:12:00:00'). The date and time is converted to the
quadword representation used by VMS to represent date-time.
This quadword representation is deposited into eight bytes
at the target address.
.B;.I-5;/FLOAT
 Specifies that the F_floating type (length 4 bytes) be associated
with the location denoted by the address expression.  /F_FLOAT is
also accepted.
.B;.I-5;/G_FLOAT
 Specifies that the G_floating type (length 8 bytes) be associated
with the location denoted by the address expression. 
.B;.I-5;/H_FLOAT
 Specifies that the H_floating type (length 16 bytes) be
associated with the location denoted by the address expression.
.B;.I-5;/INSTRUCTION
 Specifies that type INSTRUCTION be associated with the location
denoted by address-expression. Length associated with type
instruction is variable, depending on the number of operands and
the kind of addressing modes used in the instruction.
.B;.I-5;/LONGWORD
 Specifies that the type longword integer (length 4 bytes) be
associated with the location denoted by address-expression.
.B;.I-5;/QUADWORD
 Specifies that the type quadword integer (length 8 bytes) be
associated with the location denoted by the address expression.
.B;.I-5;/OCTAWORD
 Specifies that the type octaword integer (length 16 bytes) be
associated with the location denoted by the address expression.
.B;.I-5;/PACKED:n
 Specifies that the type packed decimal (length n nibbles) be
associated with the location denoted by the address expression. 
The right hand side is converted to a packed decimal representation
before doing the deposit.
.B;.I-5;/WORD
 Specifies that the type word integer (length 2 bytes) be
associated with the location denoted by address-expression.
.!
.!
.B;.I-5;1 DISPLAY
 Displays a specified screen display or list of screen displays on the terminal
screen.  With the proper qualifiers, this command can also be used to remove
displays from the screen or to refresh the entire screen contents.  Normally,
the DISPLAY command is used to display a screen display on top of any other
displays that occupy the same window on the terminal screen.  It makes the
specified display fully visible.  However, this command can also be used to
change the display's screen window, to change its maximum size in lines, or
to change its kind or debug command list.
.B.I-4;Format:
.NOFILL
 DISPLAY [/qualifier...] [disp-name [AT wspec] [dkind]
                         [, disp-name [AT wspec] [dkind]...]]
.FILL
.B;.I-5;2 Parameters
.B;.I-4;disp-name
 The name of the screen display to be displayed.
.B;.I-4;wspec
 The name of the screen window at which this display is to be positioned if the
position is being changed.  This may also be a window specification of the
form (start-line, line-count).  If wspec is omitted, the display's screen
position is not changed.
.B;.I-4;dkind
 The new display kind if the kind is being changed.  This parameter can have
the same values as on the SET DISPLAY command: NORMAL, SOURCE, SOURCE
(debug-cmd-list), DO (debug-cmd-list), or REGISTER.
.B;.I-5;2 Qualifiers
 /CLEAR		Clear the display(s)
 /GENERATE		Regenerate an automatically generated display
 /HIDE		Hide a display behind others
 /[NO]MARK_CHANGE	Specifies whether or not changes should be
.nap
###################highlighted
.ap
 /REFRESH		Refresh the entire screen
 /REMOVE		Remove a display
 /SIZE:n		Set the size of a display
.B;.I-5;2 /CLEAR
 Clear the entire contents of the specified screen displays.
.B;.I-5;2 /GENERATE
 Regenerate the contents of the specified screen displays if those displays
are automatically generated displays.
.B;.I-5;2 /HIDE
 Hide the specified screen displays under any other displays that occupy the
same region on the terminal screen.  The effect is to make visible any displays
that were occluded by the specified displays.
.B;.I-5;2 /MARK_CHANGE
 Mark changed lines of a DO(debug-cmd-list) display each time the display is
automatically updated.  The marking is done by highlighting each line of the
display which has a different textual content this time compared to the last
time the display was updated.  This qualifier is useful when you want changed
variables in an automatically updated display to be highlighted on change.
This qualifier is not applicable to other kinds of displays.
.B;.I-5;2 /NOMARK_CHANGE
 Do not mark changed lines of a DO(debug-cmd-list) display.  This qualifier cancels
the effect of an earlier /MARK_CHANGE qualifier for the specified displays.
This qualifier is not applicable to other kinds of displays.
.B;.I-5;2 /REFRESH
 Refresh the terminal screen.  If this qualifier is present, no other parameters
may be present on the DISPLAY command.
.B;.I-5;2 /REMOVE
 Mark the displays as being removed, meaning that they will not be shown on the
terminal screen unless explicitly requested with later DISPLAY commands.
A removed display is not visible on the screen, but the display and its
contents are preserved.
.B;.I-5;2 /SIZE:n
 Change the maximum size of the display to be n lines of text.  If more than
n lines are written to the display, the oldest lines are lost as new lines are
added.  If this qualifier is omitted, the maximum size is not changed.
.!
.!
.B;.I-5;1 EVALUATE
 Evaluates an expression in the currently set language. The debugger 
interprets the parameter in an EVALUATE command as a source-language 
expression, evaluates it in the semantics of the source language, 
and displays its value as a literal in the source-language.
 If an expression contains symbols with different
compiler-generated types, the debugger uses the type-conversion
rules of the current language to evaluate the expression.
.B;.I-4;Format:
 EVALUATE [/qualifier] expression [,expression,...]
.B;.I-5;2 Parameters
.B;.I-4;expression
 Any legal expression in the source language, where an expression
may be composed of one or more operators, operands, or
delimiters.
.B;.I-5;2 Qualifiers
.B;.I-5;/ADDRESS
 Specifies that the expression which is the parameter in the
EVALUATE command be interpreted as an address-expression, whose
value is a virtual memory address.
.B;.I-5;/BINARY
 Display the result in binary radix.
.B;.I-5;/CONDITION_VALUE
 Specified that the value of the expression be interpreted as a return
status, and the message associated with that return status be displayed.
.B;.I-5;/DECIMAL
 Display the result in decimal radix.
.B;.I-5;/HEXADECIMAL
 Display the result in hexadecimal radix.
.B;.I-5;/OCTAL
 Display the result in octal radix.
.!
.!
.B;.I-5;1 EXAMINE
 Displays the value of the entity at the location denoted by the
address-expression in the type associated with that location.
.B;.I-4;Format:
 EXAMINE [/qualifiers] [address-expression[:address-expression]
.BREAK
###################[,address-expression[:address-expression]...]]
.B;.I-5;2 Aggregate
 Aggregate examine allows display of entire arrays or records.
.B;.I-4;Format:
 EXAMINE aggregate-name
 A related feature is the ability to examine slices of arrays.
.B;.I-4;Format:
 EXAMINE array_name(lower_bound:upper_bound)
.B;.I-5;2 Parameters
.B;.I-4;address-expression
 Specifies the entity to be examined. If a range of entities is
to be examined, the value of the address-expression that denotes
the first entity in the range must be less than the value of the
address-expression that denotes the last entity in the range. If
a list of entities is to be examined, the address-expressions
which denote them may be listed in the command in any order.
.B;.I-5;2 Qualifiers
 Examine the value specified by the following data type and/or
radix denoted by the address-expression.
.B;.I-5;/ASCIC
 Specifies that the contents of the memory location be interpreted 
as a counted ascii string. /AC is also accepted.
.B;.I-5;/ASCID
 Specifies that the contents of the given memory location be 
interpreted as a string descriptor and the string represented
by the descriptor is displayed.
.B;.I-5;/ASCII:n
 Specifies that the entity or entities denoted by the
address-expression(s) be displayed in type ASCII of length n
bytes. The length indicates both the number of bytes of memory
to be examined and the number of ASCII characters to be
displayed. If n is omitted, the debugger uses the default value
of 4 bytes.
.B;.I-5;/ASCIW
 Specifies that the contents of the memory location be interpreted
as a counted ascii string with a word count. /AW is also accepted.
.B;.I-5;/ASCIZ
 Specifies that the contents of the memory location be interpreted
as a zero-terminated string. /AZ is also accepted.
.B;.I-5;/BINARY
 Specifies that output should be displayed in binary radix.
.B;.I-5;/BYTE
 Specifies that the examined entity or entities be displayed in
the type byte integer (length 1 byte)
.B;.I-5;/CONDITION_VALUE
 Specified that the contents of the memory location (usually %R0
in this case) be interpreted as a return status, and the message
associated with that return status be displayed.
.B;.I-5;/D_FLOAT
 Specifies that the examined entity or entities be displayed in
the D_floating type (length 8 bytes). 
.B;.I-5;/DATE_TIME
 The memory location is interpreted as a quadword integer containing
the internal VMS representation of date-time. This value is converted
to printable format and displayed.
.B;.I-5;/DECIMAL
 Specifies that output should be displayed in decimal radix.
.B;.I-5;/DEFAULT
 Specifies that output should be displayed in the default radix.
.B;.I-5;/FLOAT
 Specifies that the examined entity or entities be displayed in
the F_floating type (length 4 bytes).  /F_FLOAT is also accepted.
.B;.I-5;/G_FLOAT
 Specifies that the examined entity or entities be displayed in
the G_floating type (length 8 bytes). 
.B;.I-5;/H_FLOAT
 Specifies that the examined entity or entities be displayed in
the H_floating type (length 16 bytes). 
.B;.I-5;/HEXADECIMAL
 Specifies that output should be displayed in hexadecimal radix.
.B;.I-5;/INSTRUCTION
 Specifies that the examined entity or entities be displayed in
the type INSTRUCTION. 
.B;.I-5;/LONGWORD
 Specifies that the examined entity or entities be displayed in
the type long integer (length 4 bytes)
.B;.I-5;/NOSYMBOL
 Specifies that the debugger display the value of the
address-expression in the EXAMINE command as a virtual memory
address or as an offset to a symbolic location when it displays
the entity at that location on the display line. If the
displayed entity is of type instruction, its operand(s) are
displayed as numeric literals, even if they have a symbolic
representation. The PSL is displayed as a numeric literal, not
in formatted form.
.B;.I-5;/OCTAL
 Specifies that output should be displayed in octal radix.
.B;.I-5;/OCTAWORD
 Specifies that the examined entity or entities be displayed in
the type octaword integer (length 16 bytes).
.B;.I-5;/PACKED:n
 Specifies that the examined entity be interpreted as a packed 
decimal number of length n.
.B;.I-5;/PSL
 Specifies that the location is to be displayed in PSL format (this
is the format used when displaying the processor status longword,
i.e., "EXAM %PSL"). This is intended for use in displaying copies
of the PSL which are saved in call frames on the stack.
.B;.I-5;/PSW
 Same as /PSL, except that only the low-order 16 bits are displayed
(the processor status word).
.B;.I-5;/QUADWORD
 Specifies that the examined entity or entities be displayed in
the type quadword integer (length 8 bytes).
.B;.I-5;/SOURCE
 Specifies that the parameter is to be interpreted as an address,
and the source line corresponding to the address is to be 
displayed.
.B;.I-5;/SYMBOL
 Specifies that the debugger translate the value of the
address-expression in the EXAMINE command and use its symbolic
equivalent (if one exists) on the next display line when it
displays the entity at the location denoted by the
address-expression. If the displayed entity is of type
instruction, its operand(s) are displayed symbolically (if
possible). The PSL is displayed in formatted form when the
nosymbol command qualifier is specified in an EXAMINE command.
.B;.I-5;/WORD
 Specifies that the examined entity or entities be displayed in
the type word integer (length 2 bytes)
.!
.!
.B;.I-5;1 EXIT
 Causes orderly termination of the debugging session. The
debugger exit handler is executed and exit status information is
displayed.
 Note that the EXIT command is also used to signal the end of
command input in an indirect command file (or command procedure)
and in a DO command sequence. In either case, it does not cause
termination of the debugging session. In a command procedure,
the EXIT command causes return of control to the command stream
that invoked the command procedure. In a DO command sequence at
breakpoint, the EXIT command causes additional commands in the DO
command sequence to be ignored and the debugger prompt to be
displayed.
.B;.I-4;Format:
 EXIT
.!
.!
.B;.I-5;1 EXITLOOP
 Brings you out of an enclosing WHILE, REPEAT, or FOR loop. 
If an integer parameter n is supplied, then EXITLOOP brings you 
out of n levels of loops. 
.B;.I-4;Format:
 EXITLOOP [n]
.B;.I-5;2 Parameters
.B;.I-4;n
 An integer specifying how many levels of loops to exit from.
.!
.!
.B;.I-5;1 FOR
 Provides a way of iterating a sequence of DEBUG commands.
.B;.I-4;Format:
 FOR name = expr1 TO expr2 [BY expr3] DO (debug-cmd-list)
.B;.I-5;2 Parameters
.B;.I-4;name
 A name which is initially bound to the value of expr1, as if you had
done DEFINE/VALUE name = expr1
.B;.I-4;expr1
 A language expression of integer or enumeration type.
.B;.I-4;expr2
 A language expression of integer or enumeration type.
.B;.I-4;expr3
 A language expression of integer or enumeration type.
.BREAK;expr3 may be negative but may not be zero.
.B;.I-4;debug-cmd-list
 A sequence of DEBUG commands separated by semicolons and enclosed
in parentheses.
.!
.!
.B;.I-5;1 GO
 Starts or continues program execution.
 If the GO command is specified without an address-expression as a
parameter, execution resumes at the point of suspension or, in
the case of debugger start-up, at the transfer address.
 If the GO command is specified with an address-expression as
a parameter, execution resumes at the location denoted by the
address-expression. Note that using an address-expression as a
parameter in the GO command can produce unpredictable results if
the state of your program required to commence execution at the
location specified by the address-expression is not identical to
the state of your program at the time the GO command is issued.
.B;.I-4;Format:
 GO [address-expression]
.B;.I-5;2 Parameters
.B;.I-4;address-expression
 Specifies that program execution resume at the location denoted
by the address-expression.
.!
.!
.B;.I-5;1 HELP
 Displays the following information about any debugger command: a
description of the command, format of the command, qualifiers
that may be specified with the command, and parameters that may
be specified with the command.
 If you want information about a particular qualifier or
parameter, specify it as a subtopic. If you want information
about all command qualifiers, specify "qualifier" as a subtopic.
If you want information about all parameters, specify "parameter"
as a subtopic. If you want all available information about a
command, specify an asterisk (*) as a subtopic.
.B;.I-4;Format:
 HELP topic [subtopic ...]
.B;.I-5;2 Parameters
.B;.I-4;topic
 Specifies the name of the command with which you need help.
.B;.I-4;subtopic
 Specifies a particular qualifier or parameter about which you
want further information, or a command keyword that gives you
information about a range of qualifiers or parameters or both.
 If you want information about a particular qualifier or
parameter, specify it as a subtopic. Note that when you specify
a qualifier, you must include the preceding slash (/). If you
want information about all command qualifiers, specify
"qualifier" as a subtopic. If you want information about all
parameters, specify "parameter" as a subtopic. If you want all
available information about a command, specify an asterisk (*) as
a subtopic.
.!
.!
.B;.I-5;1 IF
 Provides conditional execution of a DEBUG command. If the language
expression given in the IF clause is true, the DEBUG command given
in the THEN clause is executed. If the language expression is
false, and an ELSE clause is present, the DEBUG command given in
the ELSE clause is executed.
 This feature is primarily useful in DEBUG command files and in the
DO clause of breakpoints.
.B;.I-4;Format:
 IF lang-exp THEN (debug-cmd-list) [ELSE (debug-cmd-list)]
.B;.I-5;2 Parameters
.B;.I-4;lang-exp
 Any expression in the currently set language which evaluates to
TRUE or FALSE.
.B;.I-4;debug-cmd-list
 A single DEBUG command or a sequence of DEBUG commands separated
by semicolons.
.!
.!
.B;.I-5;1 Keypad
 On VT100s and other Digital terminals, you can use the numeric keypad to enter
Debugger commands provided you are in "keypad mode".  Keypad mode is set by
default, but can be disabled and enabled by the commands SET MODE NOKEYPAD and
SET MODE KEYPAD.  In keypad mode, each defined keypad key expands to a
Debugger command.  Some keys are "terminated", meaning that the corre- sponding
command is executed immediately, while others are not terminated, meaning that
you can enter additional parameters to the command before terminating it with
a carriage return or the ENTER key.  Also, some keys echo on the terminal while
others do not, depending on the key.  You can define your own keypad
defi- nitions with the DEFINE/KEY command.
.B;.I-5;2 NOCOLOR
.NOFILL.LM -5
Keypad definitions when you do        +------+------+------+------+
not use a color key.                  |      | Help | Set  |      |
                                      | GOLD |Keypad| Mode | BLUE |
For more keypad help, enter HELP      |      |Nocolr|Screen|      |
KEYPAD GOLD or HELP KEYPAD BLUE.      +------+------+------+------+
                                      |      |      |      | Disp |
                                      |      |Scroll| Disp | next |
Control-W does a Display/Refresh      |      |  Up  | next | at FS|
to refresh screen in screen mode.     +------+------+------+------+
                                      |      | Exam |      |      |
                                      |Scroll|Source|Scroll|  Go  |
                                      | Left |.0\%PC|Right |      |
                                      +------+------+------+------+
                                      |      |      |Select|      |
                                      | Exam |Scroll|Scroll|  E   |
                                      |      | Down | next |  N   |
                                      +------+------+------+  T   |
                                      |             |      |  E   |
                                      |    Step     |Reset |  R   |
                                      |             |      |      |
                                      +-------------+------+------+
.FILL.LM +5
.B;.I-5;2 GOLD
.NOFILL.LM -5
Keypad definitions when you           +------+------+------+------+
press the GOLD key first.             |      | Help |SetMod|      |
                                      | GOLD |Keypad|  No  | BLUE |
Reset cancels the GOLD key.           |      | Gold |Screen|      |
                                      +------+------+------+------+
For more keypad help, enter HELP      |      |      |      |      |
KEYPAD BLUE or HELP KEYPAD NOCOLOR.   |      |Scroll|      |      |
                                      |      | Top  |      |      |
                                      +------+------+------+------+
Control-W does a Display/Refresh      |Scroll|      |      |      |
to refresh screen in screen mode.     | Left | Show |      |      |
                                      | 132  | Calls|      |      |
                                      +------+------+------+------+
                                      |      |      |Select|      |
                                      |      |Scroll|Output|  E   |
                                      |      |Bottom| next |  N   |
                                      +------+------+------+  T   |
                                      |             |      |  E   |
                                      |  Step/Into  |Reset |  R   |
                                      |             |      |      |
                                      +-------------+------+------+
.FILL.LM +5
.B;.I-5;2 BLUE
.NOFILL.LM -5
Keypad definitions when you           +------+------+------+------+
press the BLUE key first.             |      | Help |      |      |
                                      | GOLD |Keypad| Disp | BLUE |
"..." means that you must enter       |      | Blue | Gener|      |
more input after pressing key.        +------+------+------+------+
                                      |      |Scroll|      | Disp |
Reset cancels the BLUE key.           |      |  Up  |      |Src H1|
                                      |      | ...  |      |Out H2|
For more keypad help, enter HELP      +------+------+------+------+
KEYPAD GOLD or HELP KEYPAD NOCOLOR.   |Scroll| Show |Scroll|      |
                                      | Left | Calls|Right |      |
                                      | ...  |  3   | ...  |      |
Control-W does a Display/Refresh      +------+------+------+------+
to refresh screen in screen mode.     |      |Scroll|Select|      |
                                      |      | Down |Source|  E   |
                                      |      | ...  | next |  N   |
                                      +------+------+------+  T   |
                                      |             |      |  E   |
                                      |  Step/Over  |Reset |  R   |
                                      |             |      |      |
                                      +-------------+------+------+
.FILL.LM +5
.B;.I-5;2 SUMMARY
.NOFILL.LM -5
Summary of DEBUG keypad definitions.  +------+------+------+------+
                                      |      |      |      |      |
For more keypad help, enter HELP      | GOLD | Help |Screen| BLUE |
KEYPAD NOCOLOR, HELP KEYPAD GOLD,     |      |      | Mode |      |
or HELP KEYPAD BLUE.                  +------+------+------+------+
                                      |      |      |      | Disp |
                                      |Unused|  Up  | Disp | next |
Control-W does a Display/Refresh      |      |      | next | at FS|
to refresh screen in screen mode.     +------+------+------+------+
                                      |      |      |      |      |
                                      | Left |Where |Right |  Go  |
                                      |      |am I? |      |      |
                                      +------+------+------+------+
                                      |      |      |      |      |
                                      | Exam | Down |Select|  E   |
                                      |      |      | next |  N   |
                                      +------+------+------+  T   |
                                      |             |      |  E   |
                                      |    Step     |Reset |  R   |
                                      |             |      |      |
                                      +-------------+------+------+
.FILL.LM +5
.!
.!
.B;.I-5;1 %LABEL
 "%LABEL n" is the debugger syntax for referring to label n in your program.
This is intended for languages like FORTRAN which have numeric program
labels.  You can qualify the label with a pathname specifying the containing
module.  For example:
.B;SET BREAK MODULENAME\%LABEL 10
 The "old" syntax of "%LABEL MODULENAME\10" is no longer accepted.
.!
.!
.B;.I-5;1 Languages
.NF.NJ
.!
.! Turn off all FLAGS except for COMMENT and CONTROL
.! because of all the special symbols used in this text.
.! We will turn the flags back on after the "Languages" section.
.!
.NO FLAGS ALL
.!

.B;.I-5;2  BASIC

Debugger Support for Language BASIC

.B;.I-5;3  Operators

Supported BASIC Operators in Language Expressions
.B
   Kind   Symbol   Function
  ------  ------   --------
  Prefix    +      Unary plus
  Prefix    -      Unary minus (negation)
  Infix     +      Addition, String concatenation
  Infix     -      Subtraction
  Infix     *      Multiplication
  Infix     /      Division
  Infix     **     Exponentiation
  Infix     ^      Exponentiation
  Infix     =      Equal to
  Infix     <>     Not equal to
  Infix     ><     Not equal to
  Infix     >      Greater than
  Infix     >=     Greater than or equal to
  Infix     =>     Greater than or equal to
  Infix     <      Less than
  Infix     >=     Less than or equal to
  Infix     =>     Less than or equal to
  Prefix   NOT     Bit-wise NOT
  Infix    AND     Bit-wise AND
  Infix    OR      Bit-wise OR
  Infix    XOR     Bit-wise exclusive OR
  Infix    IMP     Bit-wise implication
  Infix    EQV     Bit-wise equivalence

.B;.I-5;3  Expressions

.I-5;Supported Constructs in Language and Address Expressions for BASIC
.B
  Symbol    Construct
  ------    ---------
    ( )     Subscripting
    ::      Record component selection

.B;.I-5;3  Data_Types

Supported BASIC Data Types
.B
BYTE            HFLOAT
WORD            DECIMAL
LONG            STRING
SINGLE          RFA
DOUBLE          Arrays
GFLOAT          Records

.B;.I-5;3  Notes
.F.J.LM 0
Expressions that overflow in the BASIC language will not necessarily
overflow when evaluated by the debugger.  The debugger will try to compute
a numerically correct result, even when the BASIC rules call for overflows.
This difference is particularly likely to affect DECIMAL computations.

BASIC constants of the forms [radix]"numeric-string"[type] (such as
"12.34"GFLOAT) or n% (such as 25% for integer 25) are not supported in
debugger expressions.
.NF.NJ.LM 5

.!
.B;.I-5;2  BLISS

Debugger Support for Language BLISS

.B;.I-5;3  Operators

Supported BLISS Operators in Language Expressions
.B
   Kind   Symbol   Function
  ------  ------   --------
  Prefix    .      Indirection
  Prefix    +      Unary plus
  Prefix    -      Unary minus (negation)
  Infix     +      Addition
  Infix     -      Subtraction
  Infix     *      Multiplication
  Infix     /      Division
  Infix    MOD     Remainder
  Infix     ^      Left shift
  Infix    EQL     Equal to
  Infix    EQLU    Equal to
  Infix    EQLA    Equal to
  Infix    NEQ     Not equal to
  Infix    NEQU    Not equal to
  Infix    NEQA    Not equal to
  Infix    GTR     Greater than
  Infix    GTRU    Greater than unsigned
  Infix    GTRA    Greater than unsigned
  Infix    GEQ     Greater than or equal to
  Infix    GEQU    Greater than or equal to unsigned
  Infix    GEQA    Greater than or equal to unsigned
  Infix    LSS     Less than
  Infix    LSSU    Less than unsigned
  Infix    LSSA    Less than unsigned
  Infix    LEQ     Less than or equal to
  Infix    LEQU    Less than or equal to unsigned
  Infix    LEQA    Less than or equal to unsigned
  Prefix   NOT     Bit-wise NOT
  Infix    AND     Bit-wise AND
  Infix    OR      Bit-wise OR
  Infix    XOR     Bit-wise exclusive OR
  Infix    EQV     Bit-wise equivalence

.B;.I-5;3  Expressions

.I-5;Supported Constructs in Language and Address Expressions for BLISS
.B
  Symbol      Construct
  ------      ---------
   [ ]        Subscripting
  [fldname]   Field selection
  <p,s,e>     Bit field selection
 

.B;.I-5;3  Data_Types

Supported BLISS Data Types
.B
BYTE            BITVECTOR
WORD            BLOCK
LONG            BLOCKVECTOR
BYTE UNSIGNED   REF VECTOR
WORD UNSIGNED   REF BITVECTOR
LONG UNSIGNED   REF BLOCK
VECTOR          REF BLOCKVECTOR

.!
.IF  CSUPPORT
.!  The following is not to be included until C V2.0 ships
.B;.I-5;2  CC

Debugger Support for Language C

.B;.I-5;3  Operators

Supported C Operators in Language Expressions
.B
   Kind   Symbol   Function
  ------  ------   --------
  Prefix    *      Indirection
  Prefix    &      Address of
  Prefix  SIZEOF   Size of
  Prefix    -      Unary minus (negation)
  Infix     +      Addition
  Infix     -      Subtraction
  Infix     *      Multiplication
  Infix     /      Division
  Infix     %      Remainder
  Infix     <<     Left shift
  Infix     >>     Right shift
  Infix     ==     Equal to
  Infix     !=     Not equal to
  Infix     >      Greater than
  Infix     >=     Greater than or equal to
  Infix     <      Less than
  Infix     <=     Less than or equal to
  Prefix    ~      Bit-wise NOT
  Infix     &      Bit-wise AND
  Infix     |      Bit-wise OR
  Infix     ^      Bit-wise exclusive OR
  Prefix    !      Logical NOT
  Infix     &&     Logical AND
  Infix     ||     Logical OR

.B;.I-5;3  Expressions

.I-5;Supported Constructs in Language and Address Expressions for C
.B
  Symbol    Construct
  ------    ---------
   [ ]      Subscripting
    .       Structure component selection
    ->      Pointer dereferencing

.B;.I-5;3  Data_Types

Supported C Data Types
.B
INT                     DOUBLE             
SHORT INT               ENUM               
UNSIGNED INT            STRUCT             
UNSIGNED SHORT INT      UNION              
CHAR                    Pointers           
UNSIGNED CHAR           Arrays             
FLOAT              

.B;.I-5;3  Notes

.F.J.LM 0
Symbol names are case-sensitive for language C, meaning  that
upper-case  and  lower-case  letters are treated as different
characters.

Since the exclamation point (!)  is  an  operator  in  C,  it
cannot  be  used as the comment delimitor.  When the language
is set to C, the debugger instead accepts /* as  the  comment
delimitor.   The  comment continues to the end of the current
line.  (A matching */ is neither needed nor  recognized.)  To
permit  debugger  log files to be used as debugger input, the
debugger still recognizes !  as a comment delimitor if it  is
the first non-blank character on a line.

The  debugger  accepts  the  prefix  asterisk   (*)   as   an
indirection  operator  in  both  C  language  expressions and
debugger address expressions.  In address expressions, prefix
"*"  is  synonymous to prefix "." or "@" when the language is
set to C.

The debugger does not support any of the assignment operators
in  C  (or any other language) in order to prevent unintended
modifications to the  program  being  debugged.   Hence  such
operators  as  =,  +=, -=, ++, and -- are not recognized.  If
you wish to alter the contents of a memory location, you must
do so with an explicit DEPOSIT command.
.NF.NJ.LM 5

.!  The above is not to be included until C V2.0 ships
.ENDIF  CSUPPORT

.!
.B;.I-5;2  COBOL

Debugger Support for Language COBOL

.B;.I-5;3  Operators

Supported COBOL Operators in Language Expressions
.B
   Kind   Symbol   Function
  ------  ------   --------
  Prefix    +      Unary plus
  Prefix    -      Unary minus (negation)
  Infix     +      Addition
  Infix     -      Subtraction
  Infix     *      Multiplication
  Infix     /      Division
  Infix     **     Exponentiation
  Infix     =      Equal to
  Infix   NOT =    Not equal to
  Infix     >      Greater than
  Infix   NOT <    Greater than or equal to
  Infix     <      Less than
  Infix   NOT >    Less than or equal to
  Infix    NOT     Logical NOT
  Infix    AND     Logical AND
  Infix    OR      Logical OR

.B;.I-5;3  Expressions

.I-5;Supported Constructs in Language and Address Expressions for COBOL
.B
  Symbol    Construct
  ------    ---------
   ( )      Subscripting
   OF       Record component selection
   IN       Record component selection

.B;.I-5;3  Data_Types

Supported COBOL Data Types
.B
COMP            Records
COMP-1          Numeric Unsigned
COMP-2          Leading Separate Sign
COMP-3          Leading Overpunched Sign
INDEX           Trailing Separate Sign
Alphanumeric    Trailing Overpunched Sign

.B;.I-5;3  Notes

.F.J.LM 0
The debugger can show source text included in a program  with
the   COPY  or  COPY  REPLACING  verb.   However,  when  COPY
REPLACING is used, the debugger  always  shows  the  original
source text as it appeared before text replacement.  In other
words, the original source  file  is  shown  instead  of  the
modified source text generated by the COPY REPLACING verb.

The debugger cannot show the original source lines associated
with  the  code  for  a REPORT section.  You can see the DATA
SECTION source lines associated with a REPORT, but no  source
lines  are  associated  with the compiled code that generates
the report.

VAX COBOL  may use quadword, longword, or word to represent 
a COMP data type.
.NF.NJ.LM 5

.!
.B;.I-5;2  FORTRAN

Debugger Support for Language FORTRAN

.B;.I-5;3  Operators

Supported FORTRAN Operators in Language Expressions
.B
   Kind   Symbol   Function
  ------  ------   --------
  Prefix    +      Unary plus
  Prefix    -      Unary minus (negation)
  Infix     +      Addition
  Infix     -      Subtraction
  Infix     *      Multiplication
  Infix     /      Division
  Infix     **     Exponentiation
  Infix     //     Concatenation
  Infix    .EQ.    Equal to
  Infix    .NE.    Not equal to
  Infix    .GT.    Greater than
  Infix    .GE.    Greater than or equal to
  Infix    .LT.    Less than
  Infix    .LE.    Less than or equal to
  Prefix  .NOT.    Logical NOT
  Infix   .AND.    Logical AND
  Infix    .OR.    Logical OR
  Infix   .XOR.    Exclusive OR
  Infix   .EQV.    Equivalence
  Infix   .NEQV.   Exclusive OR

.B;.I-5;3  Expressions

.I-5;Supported Constructs in Language and Address Expressions for FORTRAN
.B
  Symbol    Construct
  ------    ---------
   ( )      Subscripting
    .       Record component selection

.B;.I-5;3  Predefined_Symbols

Supported FORTRAN Predefined Symbols
.B
  Symbol      Meaning
  ------      -------
  .TRUE.    Logical True
  .FALSE.   Logical False

.B;.I-5;3  Data_Types

Supported FORTRAN Data Types
.B
LOGICAL*1       REAL*16
LOGICAL*2       COMPLEX*8
LOGICAL*4       COMPLEX*16
INTEGER*2       CHARACTER
INTEGER*4       Arrays
REAL*4          Records
REAL*8         

.B;.I-5;3  Notes

.F.J.LM 0
Even though the VAX type codes for unsigned integers (BU, WU,
LU)  are  used internally to describe the LOGICAL data types,
the debugger (like the compiler) treats LOGICAL variables and
values as being signed when used in language expressions.

The debugger prints the numeric values of  LOGICAL  variables
or  expressions instead of TRUE or FALSE.  Normally, only the
low-order bit of a LOGICAL variable or value  is  significant
(0  is FALSE and 1 is TRUE).  However, VAX FORTRAN does allow
all bits in a LOGICAL value to  be  manipulated  and  LOGICAL
values  can be used in integer expressions.  For this reason,
it is at times necessary to see the entire integer value of a
LOGICAL variable or expression, and that is what the debugger
shows.

COMPLEX constants such as  (1.0,2.0)  are  not  supported  in
debugger expressions.

Floating point numbers of type REAL*8 and COMPLEX*16 may
be represented by D_Floating or G_Floating depending on compiler
switches.
.NF.NJ.LM 5

.!
.B;.I-5;2  MACRO

Debugger Support for Language MACRO

.B;.I-5;3  Operators

Supported Operators in Language Expressions
.B
.F.J.LM 0
Language MACRO  does  not  have  expressions  in  the  same  sense  as
high-level  languages.   Only  assembly-time  expressions  and  only a
limited set of operators are accepted.  To permit the MACRO programmer
to  use expressions at debug-time as freely as in other languages, the
debugger accepts a number of operators in MACRO  language  expressions
that  are  not  found  in  MACRO  itself.  In particular, the debugger
accepts a complete set of comparison and  boolean  operators  modelled
after  BLISS.  It also accepts the indirection operator and the normal
arithmetic operators.
.NF.NJ.LM 5
.B
   Kind   Symbol   Function
  ------  ------   --------
  Prefix    @      Indirection
  Prefix    .      Indirection
  Prefix    +      Unary plus
  Prefix    -      Unary minus (negation)
  Infix     +      Addition
  Infix     -      Subtraction
  Infix     *      Multiplication
  Infix     /      Division
  Infix    MOD     Remainder
  Infix     @      Left shift
  Infix    EQL     Equal to
  Infix    EQLU    Equal to
  Infix    NEQ     Not equal to
  Infix    NEQU    Not equal to
  Infix    GTR     Greater than
  Infix    GTRU    Greater than unsigned
  Infix    GEQ     Greater than or equal to
  Infix    GEQU    Greater than or equal to unsigned
  Infix    LSS     Less than
  Infix    LSSU    Less than unsigned
  Infix    LEQ     Less than or equal to
  Infix    LEQU    Less than or equal to unsigned
  Prefix   NOT     Bit-wise NOT
  Infix    AND     Bit-wise AND
  Infix    OR      Bit-wise OR
  Infix    XOR     Bit-wise exclusive OR
  Infix    EQV     Bit-wise equivalence

.B;.I-5;3  Expressions

.I-5;Supported Constructs in Language and Address Expressions for MACRO
.B
  Symbol    Construct
  ------    ---------
  <p,s,e>   Bitfield selection as in BLISS

.B;.I-5;3  Data_Types

Supported MACRO Data Types
.B
Byte Unsigned (BU)
Word Unsigned (WU)
Longword Unsigned (LU)
Byte Integer (B)
Word Integer (W)
Longword Integer (L)

.!
.B;.I-5;2  PASCAL

Debugger Support for Language PASCAL

.B;.I-5;3  Operators

Supported PASCAL Operators in Language Expressions
.B
   Kind   Symbol   Function
  ------  ------   --------
  Prefix    +      Unary plus
  Prefix    -      Unary minus (negation)
  Infix     +      Addition, concatenation
  Infix     -      Subtraction
  Infix     *      Multiplication
  Infix     /      Real division
  Infix    DIV     Integer division
  Infix    MOD     Modulus
  Infix    REM     Remainder
  Infix     **     Exponentiation
  Infix     IN     Set membership
  Infix     =      Equal to
  Infix     <>     Not equal to
  Infix     >      Greater than
  Infix     >=     Greater than or equal to
  Infix     <      Less than
  Infix     <=     Less than or equal to
  Prefix   NOT     Logical NOT
  Infix    AND     Logical AND
  Infix    OR      Logical OR

.B;.I-5;3  Expressions

.I-5;Supported Constructs in Language and Address Expressions for PASCAL
.B
  Symbol    Construct
  ------    ---------
   [ ]      Subscripting
    .       Record component selection
    ^       Pointer dereferencing

.B;.I-5;3  Predefined_Symbols

Supported PASCAL Predefined Symbols and Functions
.B
  Symbol      Meaning
  ------      -------
   TRUE     Boolean True
   FALSE    Boolean False
   NIL      Nil pointer

.B;.I-5;3  Data_Types

Supported PASCAL Data Types
.B
INTEGER         CHAR            Subranges
UNSIGNED        VARYING         Typed
SINGLE          SET             Arrays
DOUBLE          FILE            Records
QUADRUPLE       Enumerations    Variant
BOOLEAN

.B;.I-5;3  Notes

.F.J.LM 0
The  debugger  accepts   PASCAL   set   constants   such   as
[1,2,5,8..10] or [RED, BLUE] in PASCAL language expressions.

VAX PASCAL may use longword, word, or byte to represent INTEGER or
UNSIGNED data types.  DOUBLE precision floating point numbers may
be represented by D_Floating or G_Floating depending on compiler
switches.
.NF.NJ.LM 5

.!
.B;.I-5;2  PLI

Debugger Support for Language PL/I

.B;.I-5;3  Operators

Supported PL/I Operators in Language Expressions
.B
   Kind   Symbol   Function
  ------  ------   --------
  Prefix    +      Unary plus
  Prefix    -      Unary minus (negation)
  Infix     +      Addition
  Infix     -      Subtraction
  Infix     *      Multiplication
  Infix     /      Division
  Infix     **     Exponentiation
  Infix     ||     Concatenation
  Infix     =      Equal to
  Infix     ^=     Not equal to
  Infix     >      Greater than
  Infix     >=     Greater than or equal to
  Infix     ^<     Greater than or equal to
  Infix     <      Less than
  Infix     <=     Less than or equal to
  Infix     ^>     Less than or equal to
  Prefix    ^      Bit-wise NOT
  Infix     &      Bit-wise AND
  Infix     |      Bit-wise OR

.B;.I-5;3  Expressions

.I-5;Supported Constructs in Language and Address Expressions for PL/I
.B
  Symbol    Construct
  ------    ---------
   ( )      Subscripting
    .       Structure component selection
    ->      Pointer dereferencing

.B;.I-5;3  Data_Types

Supported PL/I Data Types
.B
FIXED BINARY        CHARACTER VARYING
FIXED DECIMAL       FILE
FLOAT BINARY        Labels
FLOAT DECIMAL       Pointers
BIT                 Arrays
CHARACTER           Structures

.B;.I-5;3  Notes

.F.J.LM 0
The debugger treats all numeric constants of the  form  n  or
n.n in PL/I language expressions as packed decimal constants,
not integer or floating-point constants, in order to  conform
to PL/I language rules.  The internal representation of 10 is
therefore 0C01 hexadecimal,  not  0A  hexadecimal.   You  can
enter floating-point constants using the syntax nEn or n.nEn.
There is no PL/I syntax for entering constants whose internal
representation  is  Longword Integer.  This limitation is not
normally  significant  when  debugging  since  the   debugger
supports  the  PL/I  type  conversion  rules.  However, it is
possible to enter integer constants by using  the  debugger's
%HEX, %OCT, and %BIN operators.

VAX PL/I may use F_Floating, D_Floating, G_Floating, or H_Floating to 
represent FLOAT BINARY or FLOAT DECIMAL data types depending on compiler
switches.
.NF.NJ.LM 5

.!
.B;.I-5;2  RPG

Debugger Support for Language RPG

.B;.I-5;3  Operators

Supported RPG Operators in Language Expressions
.B
   Kind   Symbol   Function
  ------  ------   --------
  Prefix    +      Unary plus
  Prefix    -      Unary minus (negation)
  Infix     +      Addition
  Infix     -      Subtraction
  Infix     *      Multiplication
  Infix     /      Division
  Infix     =      Equal to
  Infix   NOT =    Not equal to
  Infix     >      Greater than
  Infix   NOT <    Greater than or equal to
  Infix     <      Less than
  Infix   NOT >    Less than or equal to
  Prefix   NOT     Logical NOT
  Infix    AND     Logical AND
  Infix    OR      Logical OR

.B;.I-5;3  Expressions

.I-5;Supported Constructs in Language and Address Expressions for RPG
.B
  Symbol    Construct
  ------    ---------
   ( )      Subscripting

.B;.I-5;3  Data_Types

Supported RPG Data Types
.B
Longword
Word
Packed Decimal
Character
Overpunched Decimal
Arrays
Tables

.B;.I-5;3  Notes

.F.J.LM 0
The debugger supports access to all RPG indicators and labels
used  in  the  current  program.  You can thus examine labels
such as *DETL and indicators such as *INLR and *IN01  through
*IN99.
.NF.NJ.LM 5

.!
.B;.I-5;2  UNKNOWN

Debugger Support for Language UNKNOWN

.B;.I-5;3  Operators

Supported Operators in Language Expressions for UNKNOWN
.B
   Kind   Symbol   Function
  ------  ------   --------
  Prefix    +      Unary plus
  Prefix    -      Unary minus (negation)
  Infix     +      Addition
  Infix     -      Subtraction
  Infix     *      Multiplication
  Infix     /      Division
  Infix     **     Exponentiation
  Infix     &      Concatenation
  Infix     //     Concatenation
  Infix     =      Equal to
  Infix     <>     Not equal to
  Infix     /=     Not equal to
  Infix     >      Greater than
  Infix     >=     Greater than or equal to
  Infix     <      Less than
  Infix     <=     Less than or equal to
  Infix    EQL     Equal to
  Infix    NEQ     Not equal to
  Infix    GTR     Greater than
  Infix    GEQ     Greater than or equal to
  Infix    LSS     Less than
  Infix    LEQ     Less than or equal to
  Prefix   NOT     Logical NOT
  Infix    AND     Logical AND
  Infix    OR      Logical OR
  Infix    XOR     Exclusive OR
  Infix    EQV     Equivalence

.B;.I-5;3  Expressions

.I-5;Supported Constructs in Language and Address Expressions for UNKNOWN
.B
  Symbol    Construct
  ------    ---------
   [ ]      Subscripting
   ( )      Subscripting
    .       Record component selection
    ^       Pointer dereferencing

.B;.I-5;3  Data_Types

Supported UNKNOWN Data Types
.B
.F.J.LM 0
When the language is set to UNKNOWN, the debugger understands all data
types  accepted by other languages except a few very language-specific
types, such a picture types  and  file  types.   In  UNKNOWN  language
expressions, the debugger accepts most scalar VAX Standard data types.
.NF.NJ.LM 5

.B;.I-5;3  Notes

.F.J.LM 0
For language UNKNOWN, the debugger accepts  the  dot-notation
for  record  component  selection.   If C is a component of a
record B which in turn is a component of a record A, C can be
referenced  as  "A.B.C".   Subscripts  can be attached to any
array components; if B is an array, for instance,  C  may  be
referenced as "A.B[2,3].C".

For language UNKNOWN, the debugger  accepts  both  round  and
square  subscript  parentheses.   Hence A[2,3] and A(2,3) are
equivalent.
.NF.NJ.LM 5
.!
.! TURN FLAGS BACK ON EXCEPT FOR THE ONES INITIALLY DISABLED.
.!
.FLAGS ALL
.NO FLAGS ACCEPT;.NO FLAGS HYPHENATE;.NO FLAGS LOWERCASE
.F.J
.! 		end of  "Languages"
.!
.!
.B;.I-5;1 Lexicals
 The lexical functions provide greater control over the scanning
of language expressions. %NAME allows identifiers to be formed 
which may ordinarily not be legal in the current language.
%HEX, %OCT, %BIN, and %DEC provide for better control over radix.
%CURLOC, %PREVLOC, and %NEXTLOC are useful with EXAMINE and DEPOSIT.
%LINE and %LABEL are used to indicate program locations.
.B;.I-5;2 %NAME
 %NAME is a lexical function that can be used to construct an
identifier. 
.B;.I-4;Format:
 %NAME id-char-string
 %NAME 'any-char-string'
.B;.I-4;Examples:
.BLANK;EX %NAME 12#######!#Allows examination of variable with name '12'
.BLANK;EX %NAME 'P.AAA'##!#Allows examination of generated label P.AAA
.B;.I-5;2 %BIN
 Specifies that the following numeric literal (or all numeric literals
in the following parenthesized expression) be interpreted in binary radix.
.B;.I-4;Sample Format:
.BLANK;DBG> EVALUATE/DEC %BIN 10
.BREAK;#2
.BREAK;DBG> EVALUATE/DEC %BIN (10 + 10)
.BREAK;#4
.B;.I-5;2 %DEC
 Specifies that the following numeric literal (or all numeric literals
in the following parenthesized expression) be interpreted in decimal radix.
.B;.I-4;Sample Format:
.BLANK;DBG> EVALUATE/HEX %DEC 10
.BREAK;#0A
.BREAK;DBG> EVALUATE/HEX %DEC (10 + 10)
.BREAK;#14 
.B;.I-5;2 %HEX
 Specifies that the following numeric literal (or all numeric literals
in the following parenthesized expression) be interpreted in hexadecimal radix.
.B;.I-4;Sample Format:
.BLANK;DBG> EVALUATE/DEC %HEX 10
.BREAK;#16
.BREAK;DBG> EVALUATE/DEC %HEX (10 + 10)
.BREAK;#32
.B;.I-5;2 %OCT
 Specifies that the following numeric literal (or all numeric literals
in the following parenthesized expression) be interpreted in octal radix.
.B;.I-4;Sample Format:
.BLANK;DBG> EVALUATE/DEC %OCT 10
.BREAK;#8
.BREAK;DBG> EVALUATE/DEC %OCT (10 + 10)
.BREAK;#16

.B;.I-5;2 %CURLOC
 This is a DEBUG permanent symbol which represents the current logical entity,
i.e. the program location last referenced by an EXAMINE or DEPOSIT command.
The period character "." can also be used for this purpose.
.B;.I-4;Sample Format:
.NF.NJ
.BLANK;DBG> EXAMINE RADIUS
.BREAK;CIRCLE\RADIUS:##0.0000000E+00
.BREAK;DBG> DEPOSIT %CURLOC = 1######! Set RADIUS to 1
.BREAK;DBG> DEPOSIT . = 2############! Set RADIUS to 2
.F.J

.B;.I-5;2 %NEXTLOC
 This is a DEBUG permanent symbol which represents the logical successor to 
the current entity, i.e. the program location that logically follows the 
location last referenced by an EXAMINE or DEPOSIT command.  Note that the
EXAMINE command without a parameter is equivalent to EXAMINE %NEXTLOC.
.B;.I-4;Sample Format:
.NF.NJ
.BLANK;DBG> EXAMINE PRIMES(4)
.BREAK;SIEVE\PRIMES(4):##7
.BREAK;DBG> EXAMINE %NEXTLOC
.BREAK;SIEVE\PRIMES(5):##11
.BREAK;DBG> EXAMINE############! Equivalent to EXAMINE %NEXTLOC
.BREAK;SIEVE\PRIMES(6):##13
.F.J

.B;.I-5;2 %PREVLOC
.NFL UPPERCASE .! WILL USE "^" IN THE FOLLOWING TEXT
 This is a DEBUG permanent symbol which represents the logical predecessor to 
the current entity, i.e. the program location that logically preceeds the 
location last referenced by an EXAMINE or DEPOSIT command.
The circumflex character "^" can also be used for this purpose.
.B;.I-4;Sample Format:
.NF.NJ
.BLANK;DBG> EXAMINE PRIMES(6)
.BREAK;SIEVE\PRIMES(6):##13
.BREAK;DBG> EXAMINE %PREVLOC
.BREAK;SIEVE\PRIMES(5):##11
.BREAK;DBG> EXAMINE ^
.BREAK;SIEVE\PRIMES(4):##7
.F.J
.FL UPPERCASE

.B;.I-5;2 %PARCNT
 The %PARCNT symbol specifies the number of actual parameters to the current
command procedure (indirect command file).  For example, suppose the command
file ABC is invoked with the command @ABC 111,222,333.  Inside ABC, %PARCNT
then has the value 3 because there are three parameters on this particular
call to ABC.  %PARCNT is used in command procedures that can take a variable
number of actual parameters.  %PARCNT can only be used inside command files;
it is not defined when commands are entered from the terminal.
.B;.I-4;Sample Format:
.NF.NJ
.BLANK;EVAL %PARCNT
.BREAK;FOR I = 1 TO %PARCNT DO (DECLARE X:VALUE; EVAL X)
.F.J
.!
.! %LINE and %LABEL are still included at level 1 for historical reasons.
.! For logical consistency there are also given here under Lexical_functions.
.!
.B;.I-5;2 %LABEL
 "%LABEL n" is the debugger syntax for referring to label n in your program.
This is intended for languages like FORTRAN which have numeric program
labels.  You can qualify the label with a pathname specifying the containing
module.  For example:
.B;SET BREAK MODULENAME\%LABEL 10
 The "old" syntax of "%LABEL MODULENAME\10" is no longer accepted.
.!
.B;.I-5;2 %LINE
 "%LINE n" is the debugger syntax for referring to line n in your program.
You can qualify the line number with a pathname specifying the containing
module.  For example:
.B;SET BREAK MODULENAME\%LINE 10
 The "old" syntax of "%LINE MODULENAME\10" is no longer accepted.
.!
.!
.B;.I-5;1 %LINE
 "%LINE n" is the debugger syntax for referring to line n in your program.
You can qualify the line number with a pathname specifying the containing
module.  For example:
.B;SET BREAK MODULENAME\%LINE 10
 The "old" syntax of "%LINE MODULENAME\10" is no longer accepted.
.!
.!
.B;.I-5;1 REPEAT
 The REPEAT command provides a way of iterating a sequence of DEBUG commands.
.B;.I-4;Format:
 REPEAT lang-exp DO (debug-cmd-list)
.B;.I-5;2 Parameters
.B;.I-4;lang-exp
 Any expression in the currently set language that evaluates to a
positive integer.
.B;.I-4;debug-cmd-list
 A single DEBUG command or a sequence of DEBUG commands separated
by semicolons.
.!
.!
.B;.I-5;1 SAVE
 Saves the contents of an existing screen display in a new screen display.
This command thus permits a "snapshot" of a display to be saved for later
reference.  The new display is created with the same textual contents as
the existing display.  It also inherits all other attributes of the existing
display except that it is removed from the screen and it is never
automatically updated.  The saved display can later be displayed on the
screen with the DISPLAY command.
.B.I-4;Format:
 SAVE old-disp AS new-disp [, old-disp AS new-disp...]
.B;.I-5;2 Parameters
.B;.I-4;old-disp
 The name of the screen display whose contents is to be saved.
.B;.I-4;new-disp
 The name of the new screen display to be created with the contents of the
old-disp display.
.!
.!
.B;.I-5;1 Screen-features
 The debugger provides a set of screen features designed to be used on VT52 or
VT100 class terminals.  The command SET MODE SCREEN activates screen mode and
SET MODE NOSCREEN deactivates it.  In screen mode, "screen displays" can be
defined and viewed through windows on the terminal screen.  A screen display is
a data structure which contains lines of text.  The text may be normal debugger
output, the text of a source file, or a special register display.  The text of
a display may be viewed through a window on the terminal screen and can be
scrolled back and forth through that window.  When screen mode is first set,
the debugger provides two predefined displays, a source display (or a register
display for language MACRO) and a debugger output display.
.B;.I-5;2 Commands
 The following commands are used to control the debugger's screen features:
.B.NOFILL
    SET MODE SCREEN       DISPLAY         SET WINDOW
    SET MODE NOSCREEN     SCROLL          SHOW WINDOW
    SET DISPLAY           SELECT          CANCEL WINDOW
    SHOW DISPLAY          SHOW SELECT     SET TERMINAL
    CANCEL DISPLAY        SAVE
.FILL
 You can get further information on each of these commands through HELP.
The most frequently used commands are DISPLAY and SCROLL.  The DISPLAY
command is used to position displays on the screen, to modify display
attributes, and to refresh the screen, among other things.  The SCROLL
command scrolls the text of a display through its screen window.
.B;.I-5;2 Display-kinds
 There are three basic kinds of screen displays: normal displays, source
displays, and register displays.  A normal display holds normal debugger
output lines up to some maximum number of lines.  A normal display may
also have a debug command list which is automatically executed to create the
display text each time the debugger gets control from the user program.
A source display displays the user's source program.  The output from TYPE
and EXAMINE/SOURCE commands can be directed to a source display, and a source
display can be automatically updated through a debug command list.  Finally,
a register display shows the contents of the VAX registers, and is
automatically updated as the user program runs.  The register display is
primarily intended for MACRO programmers.  Displays of all kinds are created
with the SET DISPLAY command.  They are manipulated on the screen with the
DISPLAY command, which takes a number of qualifiers.
.B;.I-5;2 Screen-mode
 The first time you enter screen mode with the SET MODE SCREEN command, the
debugger creates two displays for you: a source display which is automatically
updated as you STEP or GO through your program and an output display which
captures your normal debugger output.  If your language is MACRO, a register
display is substituted for the source display.  Each display can be scrolled
back and forth with the SCROLL command.  You can turn off screen mode with the
command SET MODE NOSCREEN, after which you can use the terminal in the normal
manner without the display windows.  The displays still exist, however, and
can be brought back at any time by again entering SET MODE SCREEN.
.B;.I-5;2 Scrolling
 Screen displays can be scrolled through their screen windows by entering the
SCROLL command.  For example, SCROLL/UP SRC scrolls the window up over display
SRC.  To avoid having to specify the display name on your SCROLL commands, you
can select the display you want to scroll as the "current scrolling display"
with the SELECT command.  Thus SELECT/SCROLL SRC followed by SCROLL/UP causes
the debugger to scroll up through display SRC even through SRC was not
explicitly named on the SCROLL command.  For more information, see the SCROLL
and SELECT commands.
.B;.I-5;2 Windows
 A screen window is a rectangular region on the terminal screen defined by the
line number at which the window starts and by the number of lines of text in
the window.  The debugger provides a number of predefined windows with names
such as H1 and H2 (for the top and bottom halves of the screen), T1, T2, and
T3 (for the three thirds of the screen), and Q1, Q2, Q3, and Q4 (for the four
quarters).  FS denotes the full screen.  You can see all defined windows
through the SHOW WINDOW command.  You can also define your own named windows
with the SET WINDOW command, or delete window names with the CANCEL WINDOW
command.  Windows are specified on the DISPLAY and SET DISPLAY commands to
indicate where displays are to be shown on the terminal screen.
.!
.!
.B;.I-5;1 SCROLL
 Scrolls a display's screen window in a specified direction over the text of
the display.  This makes additional display contents visible.  Unless the
display to be scrolled is explicitly named, the current scrolling display,
as selected with a previous SELECT command, is scrolled.
.B.I-4;Format:
 SCROLL/qualifier [disp-name]
.B;.I-5;2 Parameters
.B;.I-4;disp-name
 The name of the screen display to be scrolled.  If disp-name is omitted,
the current scrolling display, as selected by the SELECT command, is scrolled.
.B;.I-5;2 Qualifiers
.B;.I-5;/BOTTOM
 Scroll down to the bottom of the display's text.
.B;.I-5;/DOWN[:n]
 Scroll down through the display text by n lines to reveal text further down in
the display.  If n is omitted, the display is scrolled by approximately 3/4 of
its window height.
.B;.I-5;/LEFT[:n]
 Scroll left over the display text by n columns to reveal text beyond the left
margin.  You cannot scroll past column 1.  If n is omitted, the display is
scrolled left by 8 columns.
.B;.I-5;/RIGHT[:n]
 Scroll right over the display text by n columns to reveal text beyond the
right margin.  You cannot scroll past column 132.  If n is omitted, the display
is scrolled right by 8 columns.
.B;.I-5;/UP[:n]
 Scroll up through the display text by n lines to reveal text further up in the
display.  If n is omitted, the display is scrolled by approximately 3/4 of its
window height.
.B;.I-5;/TOP
 Scroll up to the top of the display's text.
.!
.!
.B;.I-5;1 SEARCH
 Directs the debugger to search the source code for the specified
string and to display the source line or lines containing an
occurrence of the string.
 The range parameter designates a program region to be searched.
 The string parameter specifies the source code characters for
which to search. If the string parameter is not specified, the
debugger uses the last specified search string, that is, the
string parameter specified in the last SEARCH command.
.B;.I-4;Format:
 SEARCH[/qualifier[/qualifier]] range string
.B;.I-5;2 Parameters
.B;.I-4;range
 Limits the debugger's search for occurrences of the string to
specified program regions.  These program regions may be given in 
any of the specified formats (see range-format for more detail).
.B;.I-4;string
 Specifies the string in the source code for which to search. The string
parameter may be enclosed in quotation marks (") or in apostrophes ('), or
may be specified without delimiters. If the string is delimited by either
quotation marks or apostrophes, it may contain spaces and tabs, as well as
any alphanumeric or special characters.
.B;.I-5;3 range-format
.LM 8
.B;.I-4;o###MODNAME indicates a search of the specified module from
line number 0 to the end of the module
.B;.I-4;o###MODNAME\LINE-NUM indicates a search of the specified
module from the specified line number to the end of the module
.B;.I-4;o###MODNAME\LINE-NUM:LINE-NUM indicates a search of the
specified module beginning at the line number specified to the left of
the colon and ending at the line number specified to the right of the colon
.B;.I-4;o###LINE-NUM indicates a search of the module designated by the
current scope setting from the specified line number to the end of the module
.B;.I-4;o###LINE-NUM:LINE-NUM indicates a search of the module designated
by the current scope setting beginning at the line number specified to the
left of the colon and ending at the line-number to the right of the colon
.B;.I-4;o###NULL (that is, no entry) indicates a search of the same module
as that from which a source line was most recently displayed (as a result of
either a TYPE or an EXAMINE/SOURCE command), beginning at the first line
following the line most recently displayed and continuing to the end of the module
.LM 5
.B;.I-5;2 Qualifiers
.B;.I-5;/ALL
 Specifies that the debugger search for all occurrences of the
string in the specified range and display every line containing
an occurrence of the string.
.B;.I-5;/IDENTIFIER
 Specifies that the debugger search for an occurrence of the
string in the specified range but display the string only if it
is bounded on either side by a character that cannot be part of
an identifier in the current language.
.B;.I-5;/NEXT
 Specifies that the debugger search for the first occurrence of
the string in the specified range and only display the line
containing this occurrence. This is the default.
.B;.I-5;/STRING
 Specifies that the debugger search for and display the string as
specified, and not interpret the context surrounding an
occurrence of the string, as it does in the case of /IDENTIFIER.
This is the default.
.!
.!
.B;.I-5;1 SELECT
 Causes a screen display to be selected as the current output, scrolling, or
source display.  This command is thus needed to direct either source or
normal output to a screen display and to select the current default display
for the SCROLL command.  The current output, source, or scrolling display
can also be "unselected" by omitting the disp-name parameter.
.B.I-4;Format:
 SELECT [/qualifier...] [disp-name]
.B;.I-5;2 Parameters
.B;.I-4;disp-name
 The name of the screen display to be selected.  If this name is omitted,
the current select setting is cancelled.
.B;.I-5;2 Qualifiers
.B;.I-5;/OUTPUT
 Select the specified screen display as the current output display.  This means
that all normal debugger output is directed to that display.  The specified
display may not be a source display in this case.
.B;.I-5;/SCROLL
 Select the specified screen display as the current scrolling display.  This
means that the SCROLL command will by default scroll this display unless a
different display is explicitly specified.
.B;.I-5;/SOURCE
 Select the specified screen display as the current source display.  This means
that the output of all TYPE and EXAMINE /SOURCE commands go to the specified
display.  The specified display must be a source display in this case.
.!
.!
.B;.I-5;1 SET
 Establishes breakpoints, tracepoints, or watchpoints or sets the
language, modules, step conditions, and default modes and types.
The item set depends on the keyword specified.
.B;.I-4;Format:
 SET keyword [/qualifier] parameter
.B;.I-5;2 Parameters
.B;.I-4;keyword
 Specifies the item to be set. Keyword can be BREAK, DEFINE,
DISPLAY, EXCEPTION BREAK, LANGUAGE, LOG, MARGIN, MAX_SOURCE_FILES,
MODE, MODULE, OUTPUT, RADIX, SCOPE, SEARCH, SOURCE, STEP,
TERMINAL, TRACE, TYPE, WATCH or WINDOW.
.B;.I-4;qualifier
 Depends on the keyword specified.
.B;.I-4;parameters
 Depends on the keyword specified.
.B;.I-5;2 BREAK
 Establishes a breakpoint at the location denoted by the specified
address-expression.
 When a breakpoint is activated, the debugger suspends program execution,
reports the breakpoint, and prompts for your commands.
 When you set a breakpoint, you can specify that one or more
debugger commands be executed at breakpoint activation. You do
this by including a DO command sequence in the SET BREAK command.
.B;.I-4;Format:
.NOFILL
 SET BREAK [/qualifiers] 
     [address-expression[,address-expression...]]
     [ WHEN (conditional-expression)]
     [ DO   (debug-cmd-list)]
.FILL
.B;.I-5;3 Parameters
.B;.I-4;address-expression
 Specifies the location(s) at which the breakpoint is to be set. If
more than one address-expression is given, individual address-expresions
should be separated by commas.
.B;.I-4;conditional-expression
 A language expression which is evaluated when the breakpoint is
about to be activated. The breakpoint is then activated if and only
if the expression evaluates to TRUE.
.B;.I-4;debug-cmd-list
 Any debugger command that you want the debugger to execute as
part of the DO command sequence when break action is taken. 
 Example:
.B.NOFILL
    DBG> SET BREAK SUBR -
                WHEN (X .EQ. 4) DO (EX X;EX Y)
.FILL 
.B;.I-5;3 Qualifiers
 The qualifiers can be grouped as follows:
.B.NOFILL
These give a condition to trace and thus take the place
of an address expression:
    /BRANCH           /CALL        /EXCEPTION   /LINE    
    /INSTRUCTION      /INSTRUCTION=(opcode-list)
These control how much information to display at the breakpoint:
    /[NO]SILENT       /[NO]SOURCE
Other qualifiers:
    /AFTER:n          /MODIFY      /RETURN      /TEMPORARY
.FILL
 See the individual subtopics for details.
.B;.I-5;3 /AFTER:n
 Specifies that break action not be taken until the nth and
subsequent activations of the location designated by the
address-expression. The value n is interpreted in decimal radix
mode, no matter what radix mode settings are in effect.
.B;.I-5;3 /BRANCH
 Causes you to break at every branch instruction. An address expression
is not allowed, i.e., SET BREAK/BRANCH is sufficient. After specifying
SET BREAK/BRANCH, every GO command acts like a STEP/BRANCH.
.B;.I-5;3 /CALL
 Causes you to break at every call or return instruction. An address expression
is not allowed, i.e., SET BREAK/CALL is sufficient. After specifying
SET BREAK/CALL, every GO command acts like a STEP/CALL.
.B;.I-5;3 /EXCEPTION
 Causes you to break at every exception. An address expression
is not allowed, i.e., SET BREAK/EXCEPTION is sufficient. After specifying
SET BREAK/EXCEPTION, every GO command acts like a STEP/EXCEPTION.
.B;.I-5;3 /INSTRUCTION
 Causes you to break at every machine instruction. An address expression
is not allowed, i.e., SET BREAK/INSTRUCTION is sufficient. After
specifying SET BREAK/INSTRUCTION, then every GO command acts
like a STEP/INSTRUCTION.
.B;.I-5;3 /INSTRUCTION=(opcode-list)
 This qualifier will
case breaks to occur just before instructions with the designated opcodes
would be executed.
For example, SET BREAK/INSTR=(ADDL3) will cause a break each time an ADDL3
instruction is about to be executed.  Note that this particular form of the
qualifier will generally cause the Debugger to function much more slowly
than in most other modes.
.B;.I-5;3 /LINE
 Causes you to break at every line. An address expression
is not allowed, i.e., SET BREAK/LINE is sufficient. After
specifying SET BREAK/INSTRUCTION, then every GO command acts
like a STEP/LINE.
.B;.I-5;3 /MODIFY
 SET BREAK/MODIFY ADDRESS specifies that you want to be notified when
the value at the given address changes. This is synonymous with
SET WATCH ADDRESS.
.B;.I-5;3 /NOSILENT
 Opposite of /SILENT. This specifies that you do want to see the "break at ..."
message when the breakpoint is activated. Since this is the default, the
qualifier is a no-op and is just included for completeness.
.B;.I-5;3 /NOSOURCE
 Specifies that you do not want to see source display when the breakpoint
is activated.
.B;.I-5;3 /RETURN
 A "return" breakpoint is activated at the return of the specified routine.
E.g., SET BREAK/RETURN SUBR will cause you to break at the return from
the routine SUBR, rather than at the start of the routine. This is done
by setting an "invisible" breakpoint at SUBR and then essentially doing
a STEP/RETURN from that invisible breakpoint, so that the break actually
occurs at the return from the routine.
.B;.I-5;3 /SILENT
 Specifies that you do not want to see either the "break at..." message
or the source display when the breakpoint is activated.
.B;.I-5;3 /SOURCE
 Specifies that you want to see source display when the breakpoint is 
activated.
.B;.I-5;3 /TEMPORARY
 Specifies that the breakpoint stay around for only one activation,
i.e., the breakpoint will go away after it is triggered.
.B;.I-5;2 DEFINE
 Specifies how to interpret DEFINE commands. The DEFINE command 
can bind a symbol to either an address, a command string, or a
value.
.B;.I-5;3 Parameters
 ADDRESS
Treat subsequent DEFINE commands as DEFINE/ADDRESS.
 COMMAND
Treat subsequent DEFINE commands as DEFINE/COMMAND.
 VALUE
Treat subsequent DEFINE commands as DEFINE/VALUE.
.B;.I-5;3 ADDRESS
 Treat subsequent DEFINE commands as DEFINE/ADDRESS.
.B;.I-5;3 COMMAND
 Treat subsequent DEFINE commands as DEFINE/COMMAND.
.B;.I-5;3 VALUE
 Treat subsequent DEFINE commands as DEFINE/VALUE.
.B;.I-5;2 DISPLAY
 Establishes a screen display to be shown on the terminal screen.  A screen
display is a set of DEBUG output lines which can be viewed through a window
on the terminal screen.  The SET DISPLAY command defines such a display,
sets its maximum size in text lines, defines its screen position, and
establishes its display kind.  Once set, a screen display can be selected
for output or scrolling by the SELECT command.
.B.I-4;Format:
.NOFILL
 SET DISPLAY [/qualifier...] [disp-name [AT wspec] [dkind]
                           [, disp-name [AT wspec] [dkind]...]]
.FILL
.B;.I-5;3 Parameters
.B;.I-4;disp-name
 The name of the new display being defined.  If a screen display by the same
name already exists, the previous display is cancelled before the new one is
established.
.B;.I-4;wspec
 The name of the screen window at which this display is to be positioned.
This may also be a window specification of the form (start-line, line-count).
If wspec is omitted, the display is positioned at window H1 or H2.
.B;.I-4;dkind
 The display kind.  This can be NORMAL for a normal output display, SOURCE
for a source display, SOURCE(debug-cmd-list) for an automatically updated source
display, DO(debug-cmd-list) for an auto- matically updated output display, or
REGISTER for an automatical- ly updated register display.  If omitted, dkind
defaults to NORMAL.
.B;.I-5;3 Qualifiers
.! The following qualifiers are accepted on the SET DISPLAY command:
.!.B.NOFILL
.!   /MARK_CHANGE   - Mark changed lines of DO(debug-cmd-list) 
.!                    displays.
.!   /REMOVE        - Remove the display from the screen.
.!   /SIZE:n        - Set the maximum size in lines of the display.
.!.FILL
.B;.I-5;/MARK_CHANGE
 Mark changed lines of a DO(debug-cmd-list) display each time the display is
automatically updated.  The marking is done by highlighting each line of the
display which has a different textual content this time compared to the last
time the display was updated.  This qualifier is useful when you want changed
variables in an automatically updated display to be highlighted on change.
This qualifier is not applicable to other kinds of displays.
.B;.I-5;/REMOVE
 Mark the display as being removed, meaning that is not shown on the terminal
screen unless explicitly requested with the DISPLAY command.
.B;.I-5;/SIZE:n
 Set the maximum size of the display in text lines to be n lines.  If more than
n lines are written to the display, the oldest lines are lost as new lines are
added.  If this qualifier is omitted, the default size is 50 lines.
.B;For source displays, n gives the number of source lines to buffer at any
one time.  This is not normally significant since a source display can always
be scrolled over the entire source file.
.B;.I-5;2 EXCEPTION BREAK
 Specifies that the debugger treat an exception condition
generated by your program as a breakpoint.
 As a result of this command, whenever your program generates an
exception condition, the debugger responds by suspending program
execution, reporting the exception condition, and prompting you
for input. Exception handlers that are part of your program are
not executed.
.B;.I-4;Format:
 SET EXCEPTION BREAK
.B;.I-5;2 KEY
 This command changes the current key definition state.  Note that keys
are defined by using the DEFINE/KEY command.
.B;.I-4;Format:
 SET KEY [/qualifiers[,...]]
.B2
Command Qualifiers		Defaults
.B
/[NO]LOG			/LOG
/[NO]STATE=state-name		current state
.B;.I-5;3 Qualifiers
.B;.I-5;/LOG
 Print an informational message indicating whether or not the key state has
been set.
.B;.I-5;/NOLOG
 Do not print the informational message associated with the command.
.B;.I-5;/NOSTATE
 Do not change the current state
.B;.I-5;/STATE
 Set the state to state-name.
.B;.I-4;Format:
 SET KEY/STATE=state-name
.B;.I-5;2 LANGUAGE
 Establishes the current language.
 At debugger start-up, the debugger sets the current language to
the language in which the module containing the transfer address was
written. You can (and should) change this language by the SET
LANGUAGE command if you begin debugging a module written in a
different source language.
.B;.I-4;Format:
 SET LANGUAGE language-name
.B;.I-5;3 Parameters
.B;.I-4;language-name
 Specifies the name of the language.  Valid languages include the
following: BASIC, BLISS, C, COBOL, FORTRAN, MACRO, PASCAL, PLI, RPG,
and UNKNOWN.
 Type "HELP Languages" for information on specific support.
.B;.I-5;2 LOG
 Specifies the name of the log file to which the debugger writes
when the output parameter is set to LOG.
.B;.I-4;Format:
 SET LOG file-spec
.B;.I-5;3 Parameters
.B;.I-4;file-spec
 The log file's file specification. If the file specification begins with a
special symbol such as a square bracket ([), you must enclose the file
specification in quotation marks (") or apostrophes ('); otherwise, do not
enclose the file specification in these delimiters. To actually activate
logging of debugger output, you must use the SET OUTPUT LOG command.
.B;.I-5;2 MARGIN
 Specifies the leftmost source-line character position at which to
begin display of a line of source code (the left margin) and/or
the rightmost source-line character position at which to end
display of a line of source code.
 The SET MARGIN command affects only the display of lines of
source code, that is, the display resulting from commands such as
TYPE and EXAMINE/SOURCE. The SET MARGIN command does not affect
the display resulting from commands (such as EXAMINE, EVALUATE,
SHOW MODE, and so on) that do not display source code.
.B;.I-4;Format:
.BLANK;##############rm
.BREAK;SET MARGIN lm:rm
.BREAK;###########lm:
.BREAK;#############:rm
.B;.I-5;3 Parameters:
.B;.I-4;lm - The source-line character position at which to begin
display of the line of source code (the left margin).
.B;.I-4;rm - The source-line character position at which to end
display of the line of source code (the right margin).
 If you specify a single number, the debugger sets the left margin
to 1 and the right margin to the number specified.
 If you specify two numbers, separated with a colon, the debugger
sets the left margin to the number specified to the left of the
colon and the right margin to the number specified to the right
of the colon.
 If you specify a single number followed by a colon, the debugger
sets the left margin to the number specified and leaves the right
margin unchanged.
 If you specify a colon followed by a single number, the debugger
sets the right margin to the number specified and leaves the left
margin unchanged.
.B;.I-5;2 MAX_SOURCE_FILES
 Specifies the maximum number of source files that the debugger
may keep open at any one time.
 If you do not issue the SET MAX_SOURCE_FILES command to specify
the maximum number of I/O channels that the debugger may keep
open at any one time, a default value of 5 is assumed.
 Note that the value of MAX_SOURCE_FILES does not limit the number
of source files that the debugger can open, it limits the number
that may be kept open at any one time. Thus, if the debugger
reaches this limit, it must close a file in order to open another
one.
 Note too that setting MAX_SOURCE_FILES to a very small number can
make the debugger's use of source files inefficient.
.B;.I-4;Format:
 SET MAX_SOURCE_FILES n
.B;.I-5;3 Parameters
.B;.I-4;n - Specifies the maximum number of source files that the debugger
may keep open at any one time.
.B;.I-5;2 MODE
 Establishes the default radix, sets the default symbolic or nosymbolic mode,
and activates or deactivates screen mode.
.B;.I-4;Format:
 SET MODE mode-keyword [,mode-keyword]
.B;.I-5;3 Parameters
.B;.I-4;mode-keyword
 May be one of the following:
.LM 8
.B;.I-3;o##G_FLOAT -- Specifies that debugger pick up D exponent
constant as G_float.
.B;.I-3;o##NOG_FLOAT -- Specifies that debugger pick up D exponent
constant as D_float. (default).
.B;.I-3;o##KEYPAD -- Turn on keypad mode.
.B;.I-3;o##NOKEYPAD -- Turn off keypad mode. (default).
.B;.I-3;o##SCREEN -- Turns on screen mode.
.B;.I-3;o##NOSCREEN -- Turns off screen mode. (default).
.B;.I-3;o##SYMBOLIC -- Specifies that the debugger display the locations
denoted by address-expressions symbolically (if possible), display instruction 
operands symbolically (if possible), and display the value of the PSL in a 
formatted arrangement. (default).
.B;.I-3;o##NOSYMBOLIC -- Specifies that the debugger display all symbols
in their numeric equivalents.
.LM 5
.B;.I-5;3 G_FLOAT
 Specifies that all double-precision constants entered in expressions
should be interpreted as G_Floating.
.B;.I-5;3 KEYPAD
 Activates keypad mode.  See Keypad for more information.
.B;.I-5;3 NOG_FLOAT
 Specifies that all double-precision constants entered in expressions
should be interpreted as D_Floating.  (default).
.B;.I-5;3 NOKEYPAD
 Disables keypad mode.
.B;.I-5;3 NOSCREEN
 Disables screen mode.  (default)
.B;.I-5;3 SCREEN
 Enables screen mode.  See Screen-features for more information.
.B;.I-5;3 SYMBOLIC
 Specifies that the debugger display the locations
denoted by address-expressions symbolically (if possible), display instruction 
operands symbolically (if possible), and display the value of the PSL in a 
formatted arrangement. (default).
.B;.I-5;3 NOSYMBOLIC
 Specifies that the debugger display all symbols
in their numeric equivalents.
.B;.I-5;2 MODULE
 Copies compiler-generated records about the symbols in the
specified module(s), or all modules, into the run-time symbol
table.
.B;.I-4;Format:
 SET MODULE [/qualifier] [module-name [,module-name] ... ]
.B;.I-5;3 Parameters
.B;.I-4;module-name
 Specifies the name of the module whose symbol records are to be
copied into the run-time symbol table.
.B;.I-5;3 Qualifiers
.B;.I-5;/ALL
 Specifies that all of the modules in your program be set. (However,
your "shareable image" modules will not be set by a SET MODULE/ALL -
you have to explicitly set each one.)
.B;.I-5;/ALLOCATE
 This qualifier tells the debugger that it is OK to allocate additional
virtual memory if needed in order to set the module. If you tried to
set a module and got the NOFREE error message then you might use
this qualifier to allow more memory to be allocated. Also see the 
ALLOCATE command. 
.B;.I-5;2 OUTPUT
 Specifies the debugger output configuration, that is, the way in
which debugger responses to commands are displayed and recorded.
.B;.I-4;Format:
 SET OUTPUT option [,option...]
.B;.I-5;3 Parameters
.B;.I-4;option
 May be one of the following output parameters:
 LOG		NOLOG		NOTERMINAL	NOVERIFY
TERMINAL	VERIFY
.B;.I-5;3 LOG
Specifies that both debugger output and user input be
recorded in a log file. If you specify the name of the log
file by the SET LOG command, the debugger writes to that file;
otherwise, the debugger writes to a file with the default file
specification DEBUG.LOG.
.B;.I-5;3 NOLOG
 Specifies that debugger output and user input not be
recorded in a log file. This is a default output parameter.
.B;.I-5;3 NOSCREEN_LOG
 Specifies that screen images should not be logged
to the log file, even when logging is otherwise enabled.  This is a default
output parameter.
.B;.I-5;3 NOTERMINAL
 Specifies that debugger output, except for
diagnostic messages, not be displayed at the terminal.
.B;.I-5;3 NOVERIFY
 Specifies that the debugger's echoing of commands
in command procedures and in DO Command Sequences not be
included as debugger output. This is a default output parameter.
.B;.I-5;3 SCREEN_LOG
 Specifies that screen images should be written to
the log file whenever screen mode is set and logging is enabled by the LOG
option.  This parameter can cause log file to get very large, and should be
used with caution.
.B;.I-5;3 TERMINAL
 Specifies that debugger output be displayed at the
terminal. This is a default output parameter.
.B;.I-5;3 VERIFY
 Specifies that the debugger's echoing of commands in
command procedures and in DO Command sequences be included as
debugger output.
.B;.I-5;2 RADIX
 SET RADIX is the new syntax (in place of SET MODE) for specifying
the radix (decimal, hex, octal) of numbers. Input and output radices
can be specified separately.
.B;.I-4;Format:
 SET RADIX[/qualifier...] radix
.B;.I-5;3 Parameters
.B;.I-4;radix
 May be one of the following:
.LM 8
.B;.I-3;o##BINARY -- Sets the default radix to binary.
.B;.I-3;o##DECIMAL -- Sets the default radix to decimal.
.B;.I-3;o##DEFAULT -- Sets the radix back to default for the current language.
.B;.I-3;o##HEXADECIMAL -- Sets the default radix to hexadecimal.
.B;.I-3;o##OCTAL -- Sets the default radix to octal.
.LM 5
.B;.I-5;3 BINARY
 Sets the default radix to binary.
.B;.I-5;3 DECIMAL
 Sets the default radix to decimal.
.B;.I-5;3 DEFAULT
 Sets the radix back to default for the current language.
.B;.I-5;3 HEXADECIMAL
 Sets the default radix to hexadecimal.
.B;.I-5;3 OCTAL
 Sets the default radix to octal.
.B;.I-5;3 Qualifiers
.LM 8
.B;.I-5;/INPUT
 Set only the input radix.
.B;.I-5;/OUTPUT
 Set only the output radix.
.B;.I-5;/OVERRIDE
 Set the "override" radix.
 "Override" radix is like output radix except that it also causes
all data to be displayed as integer (i.e., the type is overriden).
.LM 5
.B;.I-5;2 SCOPE
 Designates one or more program locations (specified by pathnames
and/or other special characters) to be used in the interpretation
of symbols that are specified without pathname prefixes in
debugger commands.
.B;.I-4;Format:
 SET SCOPE location [,location,...]
.B;.I-5;3 Parameters
.B;.I-4;location
 Designates one or more program locations specified by pathnames
and/or other special characters. The following are acceptable
parameters in the SET SCOPE command:
.LM 8
.B;.I-3;o##Pathname -- One or more program location labels, separated by
the backslash character (\), that identifies a program location or a range
of program locations. Program location labels may be module, routine, and
block names, as well as line numbers and numeric labels. A common pathname
format is the following: MODULE\ROUTINE\BLOCK\. A pathname may be complete
or incomplete, so long as it identifies a unique program location or range
of program locations.
.B;.I-3;o##0,1,2,...-- The set of decimal integers represent called routines,
where 0 represents the currently active program unit, 1 represents the routine
that called the currently active program unit, and so on.
.B;.I-3;o##\ -- Represents the set of all program locations in which the
 declaration of any global symbol in the program is known.
.LM 5
.B;.I-5;3 Qualifier
.B;.I-5;/MODULE
 This qualifier is only needed in the case where you have a module
and a routine with the same name. Normally, you want to set scope
to the routine, so that is the default. If you want to set scope
to the module, then SET SCOPE/MODULE is used.
.B;.I-5;2 SEARCH
 Establishes current SEARCH parameters to be used by the debugger
whenever a SEARCH command qualifier is not specified in a SEARCH
command.
 SEARCH parameters determine whether the debugger searches for all
occurrences (ALL) of the string or only the next occurrence
(NEXT) of the string, and whether the debugger displays any
occurrence of the string (STRING) or only those occurrences in
which the string is not bounded on either side by a character
that cannot be part of an identifier in the current language
(IDENTIFIER).
 You can specify more than one SEARCH parameter in a single SET
SEARCH command by separating each parameter with a comma.
.B;.I-4;Format:
 SET SEARCH option [,option...]
.B;.I-5;3 Parameters
.B;.I-4;option
 Specifies the current SEARCH parameters.
.LM 8
.B;.I-3;o##ALL -- specifies that the debugger search for all occurrences of
the string in the specified range and display every line containing an
occurrence of the string.
.B;.I-3;o##NEXT -- specifies that the debugger search for the first
occurrence of the string in the specified range and display
the line containing this occurrence. This is the default.
.B;.I-3;o##IDENTIFIER -- specifies that the debugger search for an occurrence of
the string in the specified range but display the string only if it is bounded
on either side by af character that cannot be part of an identifier in the
current language.
.B;.I-3;o##STRING -- specifies that the debugger search for and display the string
as specified, and not interpret the context surrounding an occurrence of the
string, as it does in the case of IDENTIFIER.
.LM 5
.B;.I-5;3 ALL
 Specifies that the debugger search for all occurrences of
the string in the specified range and display every line containing an
occurrence of the string.
.B;.I-5;3 IDENTIFIER
 Specifies that the debugger search for an occurrence of
the string in the specified range but display the string only if it is bounded
on either side by af character that cannot be part of an identifier in the
current language.
.B;.I-5;3 NEXT
 Specifies that the debugger search for the first
occurrence of the string in the specified range and display
the line containing this occurrence. This is the default.
.B;.I-5;3 STRING
 Specifies that the debugger search for and display the string
as specified, and not interpret the context surrounding an occurrence of the
string, as it does in the case of IDENTIFIER.
.B;.I-5;2 SOURCE
 Directs the debugger in the location of source file(s) by
overriding selected field(s) in the full file specification of
the original (at compile time) source file(s).
 You use the SET SOURCE command to override one, several, or all
fields -- but typically only the directory name -- in the full
file specification of the original (at compile time) source file.
The debugger then inserts the specified name field(s) in place of
the corresponding name field(s) of the original file
specification to produce a new full file specification, which it
then uses to locate the source file. However, if a new version
number field is not explicitly specified, the debugger searches
all versions of the new file specification until it finds one
with the same size, revision date, and revision time as that of
the original source file, and then uses this version for source
line display.
 You can override the name field(s) in more than one full file
specification using a single SET SOURCE command by separating
with a comma (,) the name field(s) that apply to one file
specification from those that apply to another. Since the name
field(s) are most often just directory names, when you override
these names for more than one full file specification, you are
said to be creating a source directory search list. The debugger
handles a source directory search list by searching the first
directory specified to locate the source file for a module, then
the second directory specified, then the next, and so on, until
it either locates the source file or exhausts the list of
directories.
.B;.I-4;Format:
 SET SOURCE[/MODULE=modname] dirname[,dirname...]
.B;.I-5;3 Parameters
.B;.I-4;dirname
 Specifies one or more file-specification fields to insert in
place of the corresponding field(s) in the full file
specification of the original (at compile time) source file(s).
 Dirname may consist of one, several, or all of the following
fields in the full file specification, which has the following
format:
 ##node::device:[directory]file-name.file-type;version-number
 When specifying any of these fields, you must include the
punctuation for that field, as shown in the above format. For
example, to specify a node name, follow it with two colons (::);
to specify a device name, follow it with a colon (:); to specify
a directory name, enclose it in brackets ([]); to specify a file
type, precede it with a period (.); and to specify a version
number, precede it with a semicolon (;). A file name is not
punctuated.
.B;.I-5;3 Qualifiers
.B;.I-5;/MODULE=modname
 Specifies that the indicated directory search list is to be used
in locating source files only for the specified module.
.B;.I-5;2 STEP
 Establishes current step conditions to be used by the debugger
whenever a step command qualifier is not specified in a STEP
command.
.B;.I-4;Format:
 SET STEP parameter [,parameter...]
.B;.I-5;3 Parameters
.B;.I-4; The possible parameters are list below:
 The following affect where you step to:
.NOFILL
        SET STEP BRANCH
        SET STEP CALL
        SET STEP EXCEPTION
        SET STEP INSTRUCTION
        SET STEP INSTRUCTION=(opcode-list)
        SET STEP LINE
        SET STEP RETURN
.FILL
 The following affect what output is seen on a STEP:
.NOFILL
        SET STEP [NO]SILENT
        SET STEP [NO]SOURCE
.FILL
 The following affect what happens at a routine call:
.NOFILL
        SET STEP INTO
        SET STEP OVER
        SET STEP [NO]SYSTEM
.FILL
 See the subtopics for further description.
.B;.I-5;3 BRANCH
 Specifies that each step take you to the next branch instruction.
.B;.I-5;3 CALL 
 Specifies that each step take you to the next call instruction.
.B;.I-5;3 EXCEPTION
 Specifies that each step take you to the next exception.
.B;.I-5;3 INSTRUCTION
 Specifies that each step take you to the next machine instruction.
.B;.I-5;3 INSTRUCTION=(opcode-list)
 Specifies that the step operation should take you to the next instruction that
is a member of the set (opcode-list).
.B;.I-5;3 INTO 
 Specifies that when you step from a location containing a call to
a subroutine, you step into the called subroutine.
.B;.I-5;3 LINE
 Specifies that each step take you to the next source line of your program.
.B;.I-5;3 OVER
 Specifies that when you step from a location containing a call to
a subroutine, you step over the called subroutine.
.B;.I-5;3 NOSILENT
 Specifies that you do want to see the "stepped to" message. I.e., this
un-does the effect of a previous SET STEP SILENT.
.B;.I-5;3 NOSOURCE 
 Specifies that line(s) of source code not be
displayed when STEP commands are executed.
.B;.I-5;3 NOSYSTEM
 Specifies that when you step from a location containing a call to
a routine in system space, that you step over the routine.
.B;.I-5;3 RETURN
 Specifies that each step take you to the next level of return.
(I.e., "STEP/RETURN n" will take you up n levels of your call stack).
.B;.I-5;3 SILENT
 Specifies that the "stepped to ..." message and all other output be
suppressed on step operations.
.B;.I-5;3 SOURCE
 Specifies that line(s) of source code be
displayed when STEP commands are executed.
.B;.I-5;3 SYSTEM
 Specifies that when you step from a location containing a call to
a routine in system space, that you step into the routine.
.B;.I-5;2 TERMINAL
 See /WIDTH
.B;.I-5;3 Qualifier
.B;.I-5;/WIDTH
 Sets the terminal width that the debugger uses internally when formatting
screen and other output.  The /WIDTH qualifier is mandatory on this command.
Note that the command does not change your terminal width as such (you must
do that manually at the terminal); it only changes the debugger's formatting.
If you are in screen mode, the screen is refreshed at the new width.
.B;.I-4;Format:
 SET TERMINAL/WIDTH:n
 This qualifier specifies that the terminal is n columns wide.
Typically n is either 80 or 132, but may have any value between 72 and 132.
.B;.I-5;2 TRACE
 Establishes a tracepoint at the location denoted by the specified
address-expression. A tracepoint can be thought of as being exactly the
same as a breakpoint except that there is an implicit "GO" at the end.
So, tracepoints are used to inform you when you get to a particular
location, or to take certain actions when you get to a particular location,
but without stopping to take debugger commands.
.B;.I-4;Format:
.NOFILL
 SET TRACE [/qualifiers] 
     [address-expression[,address-expression...]]
     [ WHEN (conditional-expression)]
     [ DO   (debug-cmd-list)]
.FILL
.B;.I-5;3 Parameters
.B;.I-4;address-expression
 Specifies the location(s) at which the tracepoint is to be set. If
more than one address-expression is given, individual address-expresions
should be separated by commas.
.B;.I-4;conditional-expression
 A language expression which is evaluated when the tracepoint is
about to be activated. The tracepoint is then activated if and only
if the expression evaluates to TRUE.
.B;.I-4;debug-cmd-list
 Any debugger command that you want the debugger to execute as
part of the DO command sequence when trace action is taken. 
 Example:
.B.NOFILL
    DBG> SET TRACE SUBR -
                WHEN (X .EQ. 4) DO (EX X;EX Y)
.FILL 
.B;.I-5;3 Qualifiers
 The qualifiers can be grouped as follows:
.B.NOFILL
These give a condition to trace and thus take the place
of an address expression:
    /BRANCH           /CALL        /EXCEPTION   /LINE    
    /INSTRUCTION      /INSTRUCTION=(opcode-list)
These control how much information to display at the tracepoint:
    /[NO]SILENT       /[NO]SOURCE
Other qualifiers:
    /AFTER:n          /MODIFY      /RETURN      /TEMPORARY
.FILL
 See the individual subtopics for details.
.B;.I-5;3 /AFTER:n
 Specifies that trace action not be taken until the nth and
subsequent activations of the location designated by the
address-expression. The value n is interpreted in decimal radix
mode, no matter what radix mode settings are in effect.
.B;.I-5;3 /BRANCH
 Causes you to trace every branch instruction. An address expression
is not allowed, i.e., SET TRACE/BRANCH is sufficient. 
The set of instructions which are traced by SET TRACE/BRANCH are:
BNEQ, BEQL, BGTR, BLEQ, BGEQ, BLSS, BGTRU, BLEQU, BVC, BVS, BGEQU,
BLSSU, BRB, BRW, JMP, BBS, BBC, BBSS, BBCS, BBSC, BBCC, BBSSI,
BBCCI, BLBS, BLBC, ACBB, ACBW, ACBL, ACBF, ACBD, AOBLEQ, AOBLSS,
SOBGEQ, SOBGTR, CASEB, CASEW, CASEL.
.B;.I-5;3 /CALL
 Causes you to trace every call or return instruction. An address expression
is not allowed, i.e., SET TRACE/CALL is sufficient. 
The set of instructions that are traced by SET TRACE/CALL are:
CALLS, CALLG, BSBW, BSBB, JSB, RSB, RET.
.B;.I-5;3 /EXCEPTION
 Causes you to trace every exception. An address expression
is not allowed, i.e., SET TRACE/EXCEPTION is sufficient. 
.B;.I-5;3 /INSTRUCTION
 Causes you to trace every machine instruction. An address expression
is not allowed, i.e., SET TRACE/INSTRUCTION is sufficient.
.B;.I-5;3 /INSTRUCTION=(opcode-list)
 Causes you to trace each instruction which is in the given opcode list.
For example, SET TRACE/INSTR=(ADDL3) will report a message each time an ADDL3
instruction is executed.
.B;.I-5;3 /LINE
 Causes you to trace every line. An address expression
is not allowed, i.e., SET TRACE/LINE is sufficient.
.B;.I-5;3 /MODIFY
 SET TRACE/MODIFY ADDRESS specifies that you want to be notified when
the value at the given address changes. 
.B;.I-5;3 /NOSILENT
 Opposite of /SILENT. This specifies that you do want to see the "trace at ..."
message when the tracepoint is activated. Since this is the default, the
qualifier is a no-op and is just included for completeness.
.B;.I-5;3 /NOSOURCE
 Specifies that you do not want to see source display when the tracepoint
is activated.
.B;.I-5;3 /RETURN
 A "return" tracepoint is activated at the return of the specified routine.
E.g., SET TRACE/RETURN SUBR will cause you to trace the return from
the routine SUBR, rather than the start of the routine. 
.B;.I-5;3 /SILENT
 Specifies that you do not want to see either the "trace at..." message
or the source display when the tracepoint is activated. This is primarily
used in conjunction with a DO clause, in order to perform an action at
a particular location.
.B;.I-5;3 /SOURCE
 Specifies that you want to see source display when the tracepoint is 
activated.
.B;.I-5;3 /TEMPORARY
 Specifies that the tracepoint stay around for only one activation,
i.e., the tracepoint will go away after it is triggered.
.B;.I-5;2 TYPE
 Establishes the default type to be associated with untyped
program locations and, when the /OVERRIDE qualifier is specified,
the type to be associated with both untyped program locations and
program locations that have compiler-generated types.
.B;.I-4;Format:
 SET TYPE [/qualifier] type-keyword
.B;.I-5;3 Parameters
.B;.I-4;type-keyword
 May be one of the following debugger types:
.LM 8
.B;.I-3;o##BYTE -- Type byte integer (length 1 byte).
.B;.I-3;o##WORD -- Type word integer (length 2 bytes).
.B;.I-3;o##LONGWORD -- Type longword integer (length 4 bytes).
.B;.I-3;o##QUADWORD -- Type quadword integer (length 8 bytes).
.B;.I-3;o##OCTAWORD -- Type octaword integer (length 16 bytes).
.B;.I-3;o##PACKED:n -- Type packed decimal (length n nibbles).
.B;.I-3;o##ASCII:n -- Type ASCII character (length n bytes). Each character
occupies one byte of memory. If you do not specify a value for n, the debugger
assumes a default length of 4 bytes. The value n is interpreted in decimal radix.
.B;.I-3;o##ASCIC -- Counted ascii string.
.B;.I-3;o##ASCIZ -- Zero-terminated ascii string.
.B;.I-3;o##DATE_TIME -- Type date-time (internal VMS representation).
.B;.I-3;o##INSTRUCTION -- Type instruction whose length is variable, depending
on the number of instruction operands and the kind of addressing modes used.
.B;.I-3;o##FLOAT -- F_floating type (length 4 bytes). Values of type F_floating
may range from .29*10**-38 to 1.7*10**38 with approximately 7 decimal digits
of precision.
.B;.I-3;o##D_FLOAT -- D_floating type (length 8 bytes). Values of type D_floating
may range from .29*10**-38 to 1.7*10**38 with approximately 16 decimal digits
of precision.
.B;.I-3;o##G_FLOAT -- G_floating type (length 8 bytes). Values of type G_floating
may range from .56*10**-308 to .9*10**308 with approximately 15 decimal digits
of precision.
.B;.I-3;o##H_FLOAT -- H_floating type (length 16 bytes). Values of type H_floating
may range from .84*10**-4932 to .59*10**4932 with approximately 33 decimal digits
of precision.
.LM 5
.B;.I-5;3 ASCIC
 Sets the default type to counted ASCII.
.B;.I-5;3 ASCID
 Sets the default type to ASCID.
.B;.I-5;3 ASCII:n
 Sets the default type to ASCII strings of length n.
.B;.I-5;3 ASCIW
 Sets the default type to word-counted ASCII.
.B;.I-5;3 ASCIZ
 Sets the default type to zero-terminated ASCII.
.B;.I-5;3 BYTE
 Sets the default type to byte-integer.
.B;.I-5;3 D_FLOAT
 Sets the default type to D_Floating.
.B;.I-5;3 DATE_TIME
 Sets the default type to be VMS internal date/time representation.
.B;.I-5;3 FLOAT
 Sets the default type to single-precision floating.
.B;.I-5;3 G_FLOAT
 Sets the default type to G_Floating.
.B;.I-5;3 H_FLOAT
 Sets the default type to H_Floating.
.B;.I-5;3 INSTRUCTION
 Sets the default type to instruction.
.B;.I-5;3 LONG
 Sets the default type to LONG.
.B;.I-5;3 OCTAWORD
 Sets the default type to OCTAWORD.
.B;.I-5;3 PACKED:n
 Sets the default type to PACKED with length n.
.B;.I-5;3 QUADWORD
 Sets the default type to QUADWORD.
.B;.I-5;3 WORD
 Sets the default type to WORD.
.B;.I-5;3 Qualifiers
.B;.I-5;/OVERRIDE
 Indicates that the specified type be associated with untyped
program locations and with those locations that have
compiler-generated types. Locations that are referenced by
commands containing type command qualifiers are given the types
specified by the command qualifiers.
.B;.I-5;2 WATCH
 Establishes a watchpoint at the location specified by the address-expression.
 Whenever an instruction causes the modification of a watched location, DEBUG
will break, report the old and the new values of the watched location,
and prompt for commands. 
.B;.I-4;Format:
.NOFILL
 SET WATCH [/qualifiers] 
     address-expression [,address-expression...]
     [ WHEN (conditional-expression)]
     [ DO   (debug-cmd-list)]
.FILL
.B;.I-5;3 Parameters
.B;.I-4;address-expression
 Specifies the location at which the watchpoint is to be established.
.B;.I-4;conditional-expression
 A language expression which is evaluated when the watchpoint is triggered.
If the expression does not evaluate to TRUE the watchpoint is not
activated.
.B;.I-4;debug-cmd-list
 One or more DEBUG commands (separated by semicolons) specifying action
you want to take when the watchpoint is triggered.
.B;.I-5;3 Qualifiers
 The qualifiers can be grouped as follows:
.B.NOFILL
These control how much information to display at the watchpoint:
    /[NO]SILENT       /[NO]SOURCE
Other qualifiers:
    /AFTER:n          /TEMPORARY
.FILL
 See the individual subtopics for details.
.B;.I-5;3 /AFTER:n
 Specifies that the watchpoint is not to be triggered until the Nth time
that the address gets modified.
.B;.I-5;3 /NOSILENT
 Opposite of /SILENT. Specifies that you do want to see all the output.
Since this is the default, the qualifier is actually a no-op.
.B;.I-5;3 /NOSOURCE
 Specifies that you do not want to see source display when the watchpoint
is triggered.
.B;.I-5;3 /SILENT
 Suppresses "watch of ..." messages and other output.
.B;.I-5;3 /SOURCE
 Specifies that you do want to see source display when the watchpoint
is triggered.
.B;.I-5;3 /TEMPORARY
 Specifies that the watchpoint disappear after the first time it is 
triggered.
.B;.I-5;2 WINDOW
 Establishes a screen window definition.  A screen window is a region on the
terminal screen at which a screen display may be displayed.  A screen window
definition associates a window name with a screen region specified in terms
of a beginning line and a height (line count).  Once defined, the name of a
screen window can be used in DISPLAY and SET DISPLAY commands to position
screen displays on the screen.
.B.I-4;Format:
 SET WINDOW wname AT (start-line, line_count)
.B;.I-5;3 Parameters
.B;.I-4;wname
 The name of the window being defined.
.B;.I-4;start-line
 The starting line number of the window.  This is the line at which the
window header line will be displayed.  The top line of the screen is line 1.
.B;.I-4;line-count
 The number of lines of text in the window, not counting the header line.
Line-count must be at least 1.  Start-line plus line-count may not exceed 20.
.!
.!
.B;.I-5;1 SHOW
 Causes the debugger to display the current breakpoints, tracepoints,
watchpoints, modes, types, calls, language, log file, modules, output
configuration, scope, step conditions, define settings, defined symbols,
or symbol table or other information when the corresponding keyword is
specified.
.B;.I-4;Format:
 SHOW keyword [/qualifier] [parameter]
.B;.I-5;2 Parameters
.B;.I-4;keyword
 Specifies the item to be displayed. Keyword can be BREAK, CALLS, DEFINE,
DISPLAY, KEY, LANGUAGE, LOG, MARGIN, MAX_SOURCE_FILES, MODE, MODULE, OUTPUT,
RADIX, SCOPE, SEARCH, SELECT, SOURCE, STEP, SYMBOL, TERMINAL, TRACE, TYPE, 
WATCH, or WINDOW.
.B;.I-4;parameter
 Depends on the keyword specified.
.B;.I-4;qualifier 
 Depends on the keyword specified.
.B;.I-5;2 BREAK
 Causes the debugger to display breakpoints established by the SET#BREAK command.
All of the information about each breakpoint is displayed (i.e., AFTER count,
whether or not it was specified /SILENT, and so on).
.B;.I-4;Format:
 SHOW BREAK
.B;.I-5;2 CALLS
 Causes the debugger to display information about the sequence of
currently active procedure calls, or the number of call frames on
the stack.
 The optional parameter n specifies the call count, or the number
of call frames to be displayed, by a decimal integer in the range
0 through 32767. If you do not specify the parameter n,
information about all call frames is displayed.
.B;.I-4;Format:
 SHOW CALLS [n]
.B;.I-5;3 Parameters
.B;.I-4;n
 Specifies the number of call frames that you wish information
about. If omitted, the debugger displays information about all
call frames.
.B;.I-5;2 DEFINE
 Shows what define setting has been specified by a previous SET
DEFINE command. (To display all defined symbols, the command is
SHOW SYMBOL/DEFINED.) 
.B;.I-4;Format:
SHOW DEFINE
.B;.I-5;2 DISPLAY
 Causes the debugger to list all defined screen displays.  The name, maximum
size, screen window, kind, and debug command list (if any) of each defined
screen display are listed.
.B.I-4;Format:
 SHOW DISPLAY
.B;.I-5;2 KEY
 Displays current key definitions for the specified keys in the specified
states.
.B;.I-4;Format:
 SHOW KEY [/qualifiers] [key-name-list]
.B;.I-4;Example:
.SK.NOFILL
DBG> DEFINE/KEY KP0 "STEP"
DBG> SHOW KEY KP0
DEFAULT definition for key KP0:
    "STEP"
.FILL
.B;.I-5;3 Qualifiers
.B;.I-5;/ALL
 Show all keys defined in the current state(s).
.B;.I-5;/BRIEF
 Only display the key definition and state.  By default, the system will
provide other information including qualifiers associated with the definition,
etc.
.B;.I-5;/DIRECTORY
 Only give the names of the keys that have been defined
.B;.I-5;/NOSTATE
 Give the definitions for the keys in the currently active state.  (default)
.B;.I-5;/STATE
.B;.I-4;Format:
 SHOW KEY/STATE=state-name-list[/qualifier[...]] [key-name[,...]]
 This qualifier modifies the others so that they perform their operations
on the list of states given.  For example:
.B;.I+10;SHOW KEY/STATE=GOLD/DIR
will give a list of the keys defined for the GOLD state.
.B;.I-5;2 LANGUAGE
 Causes the debugger to display the current language.
 The current language is the language last established by the SET
LANGUAGE command or the language established at debugger
start-up.
.B;.I-4;Format:
 SHOW LANGUAGE
.B;.I-5;2 LOG
 Causes the debugger to display the name of the current log file
and to report whether the debugger is writing to that log file.
 The current log file is the log file last established by a SET
LOG command or the default log file DEBUG.LOG.
.B;.I-4;Format:
 SHOW LOG
.B;.I-5;2 MARGINS
 Displays the current source-line margin settings for the display
of source code.
 Margin settings are established by the SET MARGIN command. By
default, the debugger sets the left margin to 1 and the right
margin to 255.
.B;.I-4;Format:
 SHOW MARGINS
.B;.I-5;2 MAX_SOURCE_FILES
 Displays the maximum number of source files that the debugger may
keep open at any one time.
 The maximum number of source files that the debugger may keep
open at any one time may be specified using the SET
MAX_SOURCE_FILES command or may be the default value of 5.
.B;.I-4;Format:
 SHOW MAX_SOURCE_FILES
.B;.I-5;2 MODE
 Causes the debugger to display the current radix mode and the
current symbolic or nosymbolic mode.
 The current modes are the modes last established by the SET MODE
command or the default modes associated with the current
language.
.B;.I-4;Format:
 SHOW MODE
.B;.I-5;2 MODULE
 Causes the debugger to display the following information about
each module in your program:
.LM 8.
.B;.I-3;o##The module name
.B;.I-3;o##The language in which the module is written
.B;.I-3;o##Whether or not the run-time symbol table contains information
about the symbols in that module
.B;.I-3;o##The space (in bytes) required in the run-time symbol table
for symbols in that module
.B;.I-3;o##The total number of modules in the program
.B;.I-3;o##The number of unused bytes in the space allocated for the
run-time symbol table
.LM 5
.B;.I-4;Format:
 SHOW MODULE
.B;.I-5;2 OUTPUT
 Causes the debugger to display the current output configuration.
 The current output configuration reflects whether or not the
debugger is displaying output on the terminal, whether or not the
debugger is writing output to a log file, and whether or not the
debugger displays input command strings when it executes command
procedures and DO command sequences.
.B;.I-4;Format:
 SHOW OUTPUT
.B;.I-5;2 RADIX
 Causes the debugger to display the current radix settings.
The current input radix and the current output radix will be displayed.
.B;.I-5;2 SCOPE
 Causes the debugger to display the current scope search list,
that is, the scope search list established by the last SET SCOPE
command.
 The current scope search list designates one or more program
locations (specified by pathnames and/or other special
characters) to be used in the interpretation of symbols that are
specified without pathname prefixes in debugger commands.
.B;.I-4;Format:
 SHOW SCOPE
.B;.I-5;2 SEARCH
 Displays the current SEARCH parameters.
 Current SEARCH parameters are either established by the SET
SEARCH command or are the default values ALL and STRING.
 SEARCH parameters determine whether the debugger searches for all
occurrences (ALL) of the string or only the next occurrence
(NEXT) of the string, and whether the debugger displays any
occurrence of the string (STRING) or only those occurrences in
which the string is not bounded on either side by a character
that cannot be part of an identifier in the current language
(IDENTIFIER).
.B;.I-4;Format:
 SHOW SEARCH
.B;.I-5;2 SELECT
 Shows the current screen display select settings as set by the SELECT
command.
.B;.I-4;Format:
 SHOW SELECT
.B;.I-5;2 SOURCE
 Displays the source directory search list(s) currently in effect.
 The SET SOURCE/MODULE=modname command establishes a source
directory search list for a particular module. The SET SOURCE
command establishes a source directory search list for all
modules not explicitly mentioned in a SET SOURCE/MODULE=modname
command.
 If a directory search list has not been established by means of
the SET SOURCE or SET SOURCE/MODULE=modname commands, the SHOW
SOURCE command indicates that no directory search list is
currently in effect. In this case, the debugger expects each
source file to be in the same directory as it was in at compile
time.
.B;.I-4;Format:
 SHOW SOURCE
.B;.I-5;2 STEP
 Causes the debugger to display the current step conditions.
 The current step conditions reflect whether the debugger steps by
lines or by instructions, whether the debugger steps "into"
routines in the user program or "over" them, and whether the
debugger steps "into" routines in system space or "over" them.
 Current step conditions are the step conditions established by
the last SET STEP command or the default step conditions
established by the current language.
.B;.I-4;Format:
 SHOW STEP
.B;.I-5;2 SYMBOL
 Displays information from DEBUG's run-time symbol table. Using
this command, you can obtain a list of symbols in your program
matching a given namespec, together with type and address 
information about the symbols.
.B;.I-4;Format:
.NOFILL
 SHOW SYMBOL [/qualifier] namespec [,namespec...]  
                          [IN scope [,scope...]]
.FILL
.B;.I-5;3 Parameters
.B;.I-4;namespec
 This consists of a single symbol name, or a symbol name that 
includes wildcard characters. "*" is the wildcard character, and
it can match zero or more characters.
.B;.I-4;scopespec
 Specifies a module, routine, lexical block, or numeric scope. It
has the same syntax as the scope specification in the SET SCOPE 
command. This specifies that only those symbols that match the 
namespec and are declared within the given scope are to be 
selected.
.B;.I-5;3 Qualifiers
.B;.I-5;/ADDRESS
 Directs the debugger to print the address specification for each
selected symbol. 
.B;.I-5;/DEFINED
 Displays symbols you have defined with the DEFINE 
command. 
.B;.I-5;/DIRECT
 Select only those symbols that are declared directly in the given
scope, but not those that are declared in nested scopes.
.B;.I-5;/GLOBAL
 Displays only those defined symbols that are defined /GLOBAL.
Only applies to SHOW SYMBOL/DEFINED. 
.B;.I-5;/LOCAL
 Displays only those defined symbols that are defined /LOCAL.
Only applies to SHOW SYMBOL/DEFINED.
.B;.I-5;/TYPE
 Display type information about each selected symbol.
.B;.I-5;2 TERMINAL
 Causes the debugger to display the terminal width currently used to format
debugger output.  This width can be set with the SET TERMINAL command.
.B;.I-4;Format:
 SHOW TERMINAL
.B;.I-5;2 TRACE
 Causes the debugger to display tracepoints established by the SET
TRACE command.
 All of the information about each tracepoint is displayed, i.e.,
WHEN and DO clauses, after count, and so on.
.B;.I-4;Format:
 SHOW TRACE
.B;.I-5;2 TYPE
 Causes the debugger to display the current default type or, if
the /OVERRIDE command qualifier is specified, the current
override type.
.B;.I-4;Format:
 SHOW TYPE [/qualifier]
.B;.I-5;3 Qualifiers
.B;.I-5;/OVERRIDE
 Causes the debugger to display the current override type.
.B;.I-5;2 WATCH
 Causes the debugger to display the locations at which watchpoints
have been established by the SET WATCH.
 All of the information about each watchpoint is displayed, i.e.,
WHEN and DO clauses, after count, and so on.
.B;.I-4;Format:
 SHOW WATCH
.B;.I-5;2 WINDOW
 Causes the debugger to list all screen window definitions.  The name and
screen position of each defined window are displayed.
.B.I-4;Format:
 SHOW WINDOW
.!
.!
.B;.I-5;1 SPAWN
 Allows the user to execute DCL commands without leaving the 
debugger. If the DCL command is specified as the parameter to 
SPAWN, then the command is done within the context of a "spawned"
subprocess. For example, "SPAWN MAIL" will put you directly into
MAIL, and when you exit from MAIL you will be back in DEBUG. 
If no parameter is given to SPAWN, you will receive the DCL dollar
sign prompt, and you can enter commands. Logging out of the spawned
subprocess will put you back into the debugger.
.B;.I-4;Format:
 SPAWN
 SPAWN dcl-command
 SPAWN "dcl-command"
.B;.I-5;2 Parameters
.B;.I-4;dcl-command
 Can be any dcl-command. If the command contains a semicolon, then
the entire command must be placed inside quotes so that the 
debugger doesn't interpret the semicolon as the end of a DEBUG
command. 
.B;.I-5;2 Qualifiers
.B;.I-5;/NOWAIT
 Specifies that the parent process continue in parallel with the spawned
subprocess. This is the same as SPAWN/NOWAIT in DCL.
.B;.I-5;/WAIT
 Specifies that the parent process should be suspended and that the terminal
should be attached to the sub-process.
.!
.!
.B;.I-5;1 STEP
 STEP causes your program to execute one instruction or one line, or
one of some other kind of "unit" depending on qualifier.
When you step, the address
that you step to is reported. If you are stepping by instruction,
then you will see the machine instruction at the address that you
have stepped to. If you have done SET STEP SOURCE and source
display is available for your language then you will also see the
source line corresponding to the location you have stepped to.
.B;.I-4;Format:
 STEP [/qualifier] [n]
.B;.I-5;2 Parameters
.B;.I-4;n
 Specifies the number of steps to perform before stopping.
If you do not specify a parameter, then "n" defaults to 1.
.B;.I-5;2 Qualifiers
 The qualifiers can be grouped as follows:
.B.NOFILL
These tell the debugger how far to step:
    /BRANCH           /CALL    /EXCEPTION   /LINE    /RETURN
    /INSTRUCTION      /INSTRUCTION=(opcode-list)
These control how much information to display at each step:
    /[NO]SILENT       /[NO]SOURCE
These determine what the debugger does at a routine call:
    /INTO             /OVER    /[NO]SYSTEM
.FILL
 Note that each of the above can also be used in a SET STEP command.
See the individual help topic on each of these for more information.
.B;.I-5;2 /BRANCH
 Causes the step command to step to the next branch instruction.
This is similar to "SET BREAK/BRANCH;GO".
.B;.I-5;2 /CALL
 Causes the step command to step to the next call or return instruction.
This is similar to "SET BREAK/CALL;GO".
.B;.I-5;2 /EXCEPTION
 Causes the step command to step to the next exception (i.e., error signal).
This is similar to "SET BREAK/EXCEPTION;GO".
.B;.I-5;2 /INSTRUCTION
 Causes the step command to step a single machine instruction.
.B;.I-5;2 /INSTRUCTION=(opcode-list)
 This allows you to step to the next instruction which is in the
given opcode list. For example, STEP/INST=(ADDL3) will step to the
next "ADDL3" instruction in your program.
.B;.I-5;2 /INTO
 If you are at a CALL statement, then STEP/INTO allows you to step into
the called subroutine.
.B;.I-5;2 /LINE
 Causes the step command to step to the next line of your program.
.B;.I-5;2 /NOSILENT
 Overrides the effect of a previous SET STEP SILENT, i.e., specifies that
you do want to see the "stepped to" message.
.B;.I-5;2 /NOSOURCE
 Specifies that you do not want to see source display during this step command.
.B;.I-5;2 /NOSYSTEM
 If you are at a CALL statement then STEP/NOSYSTEM specifies that you want
to step over the called routine if it is a system routine but you want to
step into the routine if it is a subroutine in your program.
.B;.I-5;2 /OVER
 If you are at a CALL statement, then STEP/OVER allows you to step over
the called subroutine. /OVER is the opposite of /INTO.
.B;.I-5;2 /RETURN
 Causes the step command to step to the return instruction of the 
routine that you are now in.
.B;.I-5;2 /SILENT
 Causes the step command to be "silent", i.e., neither the "stepped to"
message nor the source display are given.
.B;.I-5;2 /SOURCE
 Causes the step command to 
display the source code corresponding to the
current program location.
.B;.I-5;2 /SYSTEM
 If you are at a CALL statement then STEP/INTO/SYSTEM specifies that you want
to step into the called routine under all circumstances. This contrasts with
STEP/INTO/NOSYSTEM where you are asking not to step into system routines.
.!
.!
.B;.I-5;1 SYMBOLIZE
 Converts a virtual address to a symbolic representation. If the
given address is a static address, the address will be symbolized
as the nearest preceding symbol name plus an offset. If it is
also a code address, a line number will be included in the 
symbolization if a line number can be found which covers the 
address. If the address is a register name, DEBUG will display
symbols in all SET modules that are bound to that register. If
the address is a stack address, then DEBUG will attempt to
symbolize to a variable in the routine whose call frame contains
that address.
.B;.I-4;Format:
 SYMBOLIZE address-expression [,address-expression...]
.B;.I-5;2 Parameters
 address-expression
 any address expression which is valid in the currently set language.
.!
.!
.B;.I-5;1 TYPE
 Displays the source language statement(s) corresponding to the
specified line number(s).
 After displaying a single line of source code, you can display
the next line by issuing a TYPE command without a line number,
that is, by issuing a TYPE command followed by the RETURN key.
 You can specify a module name with the line number(s) to indicate
that the line(s) are located in that module. In this case, you
enter the module name, a backslash (\), and the line number(s),
without intervening spaces.
.B;.I-4;Format:
 TYPE [ [modname\]line-number[:line-number]
.BREAK
###################[,[modname\]line-number[:line-number]...] ]
.B;.I-5;2 Parameters
.B;.I-4;line-number
 Any number generated by a compiler to label a source language
statement or statements.
 If you specify a single line number, the debugger displays the
source code corresponding to that line number.
 If you specify a list of line numbers, separating each with a
comma, the debugger displays the source code corresponding to
each of the line numbers.
 If you specify a range of line numbers, separating the starting
and ending line numbers in the range with a colon, the debugger
displays the source code corresponding to that range of line
numbers.
.B;.I-4;modname
 Name of the Module.
.!
.!
.B;.I-5;1 UNDEFINE
 Undefines symbols previously defined with DEFINE.
.B;.I-4;Format:
 UNDEFINE[/qualifier] symbol-name[,symbol-name...]
.B;.I-5;2 Parameters
.B;.I-5;symbol-name
 symbol-name can be any name that was previously defined with the DEFINE command 
.B;.I-5;2 Qualifiers
.B;.I-5;/ALL
 Undefine all defined symbols
.B;.I-5;/LOCAL
 Undefine symbols defined with DEFINE/LOCAL
.B;.I-5;/KEY
 Undefine the key denoted by key-name.
.B;.I-5;Format:
UNDEFINE/KEY key-name
.!
.!
.B;.I-5;1 WHILE
 The WHILE command provides a way of iteratively doing DEBUG 
commands. As long as the language expression given as the WHILE 
clause is true, the DEBUG command list given in the DO clause is 
executed.
.B;.I-4;Format:
 WHILE lang-exp DO (debug-cmd-list)
.B;.I-5;2 Parameters
.B;.I-4;lang-exp
 Any expression in the currently set language which evaluates to
TRUE or FALSE.
.B;.I-4;debug-cmd-list
 A single DEBUG command, or a sequence of DEBUG commands separated
by semicolons.
.!
.!
.B;.I-5;1 New-changes
 This section briefly documents changes in syntax between previous
versions of DEBUG and this version. Most of these changes were made
to achieve greater uniformity across the various languages.
.B;.I-5;2 %LABEL
 The syntax of %LABEL for all languages is now [name\...]\%LABEL n
The old syntax which had the %LABEL preceding the pathname is
no longer accepted. 
.B;.I-4;Example: 
 no longer accepted: EXAMINE %LABEL MOD\ROUT\10
 new syntax: EXAMINE MOD\ROUT\%LABEL 10 
.B;.I-5;2 %LINE
 The syntax of %LINE for all languages is now [name\...]\%LINE n
The old syntax which had the %LINE preceding the pathname is
no longer accepted. 
.B;.I-4;Example: 
 no longer accepted: EXAMINE %LINE MOD\ROUT\10
 new syntax: EXAMINE MOD\ROUT\%LINE 10 
.B;.I-5;2 MACRO
 Angle brackets are no longer accepted as parenthesis when
language is set to MACRO. You must instead use ( and ).
This makes MACRO more consistent with the other languages.
.B;.I-5;2 Radix
 The old method of specifying %X'n' for hexadecimal, %O'n' for 
octal, and %D'n' for decimal, has been replaced by the new
lexical functions %HEX, %OCT, and %DEC. Also, %BIN (binary)
radix has been added. See HELP LEXICAL for more information.
 Also, on EVALUATE/radix, the radix override now only applies
to the output. Thus "EVALUATE/HEX 10" now give "0A" instead
of the (less useful) "10".
.B;.I-5;2 Register names
 Registers can be referred to using R0, R1, and so on, as long
as you do not have user variables whose name is the same as
the register name. If you do have such variables, then you
will see the variable. In that case, the names %R0, %R1, and
so on, can be used to see the registers.
 Register names can now be preceded by pathnames. Thus, if
FOO is a routine on the call stack then EX FOO\%R5 will 
show the value of R5 in that routine.
.B;.I-5;2 SET-MODE
 You must use the SET TYPE command to specify BYTE, WORD, LONG
QUAD, OCTAWORD, FLOAT, D_FLOAT, G_FLOAT, H_FLOAT, ASCII,
and INST. Since these are types and not modes, the SET MODE
command will no longer accept them.
.!
.!
.B;.I-5;1 New-features
 This section points out which features and commands are new in this
release of DEBUG. These are documented elsewhere in this help library:
 ALLOCATE command
 Aggregate examine (see HELP EXAM AGGR)
 Breakpoint extensions (see HELP SET BREAK)
 Control structures (see help on IF, FOR, REPEAT and WHILE)
 DEFINE/COMMAND command (see HELP DEFINE)
 EXAMINE qualifiers ASCIC, ASCIZ, ASCID, CONDITION_VALUE
 Initialization files (see HELP DBG$INIT)
 Parameters to command procedures (see HELP @, HELP DECLARE)
 Radix control (see HELP LEXICAL)
 Screen features (see HELP SCREEN-FEATURES)
 SHOW SYMBOL command
 SPAWN and ATTACH commands
 SYMBOLIZE command
 STEP qualifiers /CALL, /BRANCH, /RETURN, /SILENT, ...
 Tracepoint extensions (see HELP SET TRACE)
 UNDEFINE command
 Watchpoint extensions (see HELP SET WATCH)
