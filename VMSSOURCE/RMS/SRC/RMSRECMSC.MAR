	.TITLE	RMSRECMSC Miscellaneous Recovery Routines
	.IDENT	/V04-000/
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;
;++
; Facility: RMS32 Recovery
;
; Abstract:
;
;		This module contains miscellaneous routines needed for RMS
;		recovery.  Most of these routines are called from RMSRECOVR.
;
;
; Environment:
;
;		Star processor running Starlet exec.  This routine is to be
;		merged into the RCP (Recovery Control Process) to handle
;		RMS Recovery operations.  This routine never executes outside
;		the context of the RCP.
;
;		This routine must be PIC since it will be merged into the
;		address space of the RCP.
;
; Author: 	Peter Lieberwirth	 Creation Date: 14-Nov-1982
;
; Modified By:
;
;	V01-005	KPL0004		Peter Lieberwirth	31-Jan-1983
;		Incorporate message routines.  Remove obsolete routines.
;
;	V01-004	KPL0003		Peter Lieberwirth	 7-Jan-1983
;		Remove logical name translations used for debugging.
;		This wipes out the TRANSLATE routine.  Use better
;		technique for determining entry is a mapping entry.
;
;	V01-003	KPL0002		Peter Lieberwirth	23-Nov-1982
;		Fix bugs due to implementaion of new RCP interface, clean
;		up code.  Also, its not yet time to call back the RCP for
;		asynch operations.  Get rid of RECOVER_CLEAR.
;
;	V01-002	KPL0001		Peter Lieberwirth	18-Nov-1982
;		Add $CJFDEF for certain RCP definitions.
;
;--

.SUBTITLE Declarations

;
; Include Files
;

;
; Macros
;

	$CJFDEF		; RCP arguement definitions
	$JFCBDEF	; journal definitions, including filter types
	$ROFDEF		; RMS recovery filter
	$RRPDEF		; recovery control packet definitions
	$RODBDEF	; RCP recoverable object descriptor block definitions
	$JENDEF		; RCP journal entry offsets
	$RJRDEF		; RMS journal entry format
	$RIMPDEF	; RMS recovery impure storage definition
	$RMSRDEF	; RMS operations
	$RRBDEF		; rms recovery block
	$RFBDEF		; rms recovery file block
	$RLOGDEF	; rms recovery logging

	$FABDEF		; fab definitions
	$RABDEF		; rab definitions

	$IMPDEF		; RMS impure area definitions
	
	$TMPOFFDEF	; definitions for argument offsets on CALL

	.PSECT	REC_CODE,EXE,NOWRT,PIC

.SUBTITLE ASYNCH_WAIT

;++
; ASYNCH_WAIT
;
;	This routine calls back the RCP when the recovery routine must do an
;	asynchronous wait.
;
; Inputs:
;	None.
;
; Outputs:
;	None.
;
; Side effects:
;	Thread put in a wait state until AST specified by operation completes.
;	(The RCP may schedule other routines during this time.)
;--

ASYNCH_WAIT::

	MOVL	RRB$L_SAVED_AP(R11),R1	; get AP to use for call back
	MOVZBL	#RCP$K_WAIT,-(SP)	; tell RCP this routine wants to wait
	CALLS	#1,@RCPARG$_CALLBAK(R1)	; and let it do what it wants
	RSB				; to caller

.SUBTITLE RCP_LOG

;++
; RCP_LOG
;
;	This routine gives the RCP a message to display if logging is
;	desired by the issuer of the recovery request.
;
; Inputs:
;	r1  - address of descriptor of message
;	R10 - rrp for logging flag
;
; Ouputs:
;	None.
;
; Side effects:
;	RCP has a message to log to issuer of recover request
;
;--

RCP_LOG::

	BBC	#RRP$V_LOG,-		; if not logging, skip this routine
		RRP$W_FLAGS(R10),10$	;

	MOVL	R1,-(SP)		; address of message string descriptor
	MOVZBL	#RCP$K_LOGMSG,-(SP)	; parameter to call back is LOG message
	MOVL	RRB$L_SAVED_AP(R11),R1	; get AP to use for call back
	CALLS	#2,@RCPARG$_CALLBAK(R1)	; call back the RCP to log the message
10$:	RSB				; to caller

.SUBTITLE RECOVER_SET - Set impure recovery flag
;++
;
; routine name:	RECOVER_SET
;
;	This routine sets the impure area flag bit to indicate to RMS that
;	recovery is taking place and RMS need not journal, since recovery
;	is assumed to be restarted.
;
;	Multi-stream recovery would be indicated if the flag was already set.
;
;	This routine executes in EXEC mode, since the impure area is USER-READ
;	EXEC-WRITE.
;
; Calling Sequence:
;
;	$CMEXEC	ROUTIN = RECOVER_SET
;
; Input Parameters:
;
;	None.
;
; Output Parameters:
;
;	R0 has success or failure.
;
; Side Effects:
;
;	The RMS impure-area flag IMP$V_RECOVERY is set or cleared.
;
;--
RECOVER_SET::
	.WORD	0			; entry mask
	MOVAL	@#PIO$GW_PIOIMPA,R0	; get address of PROCESS impure area
	BBSS	#IMP$V_RECOVERY,(R0),-	; set the flag, branching if already set
		10$			;
10$:	MOVL	#1,R0			; success
	RET				; return to caller

.SUBTITLE Message logging Routines
.SUBTITLE -	MESSAGE - log a message to RCP

;++
; MESSAGE
;
; This routine is invoked to log a message to the RCP.
;
; Inputs:
;
;	rlog$t_codes - set of message codes to display
;	rlog$t_parms - FAOL parameters for RMS recovery messages
;
;
; Outputs:
;
;	None.
;
; Side Effects:
;
;	message logged to RCP.
;
;--

CR = 13
LF = 10

MESSAGE::
	PUSHR	#^M<R6,R7,R8,R9>		; save some registers

	MOVL	RRB$L_LOG(R11),R6		; get address of log impure area

	MOVL	RLOG$L_STR_BUFFER(R6),R7	; get address of buffer
	BNEQ	3$				; its already been allocated

	MOVZWL	#256,R1				; get a 256 byte output buffer
	JSB	RM$RR_GET_BUFF			; 

	MOVL	R2,RLOG$L_STR_BUFFER(R6)	; save address of buffer
	MOVL	R2,R7				; save address of buffer

3$:	ADDL2	#8,R7				; save space for a descriptor
	MOVZWL	#256,R8				; accumulate size of string

	MOVAL	RLOG$L_CODES(R6),R4		; get address of message code
	MOVAL	RLOG$T_PARMS(R6),R3		; get address of FAO parameters

5$:	BSBW	CONS_MESSAGE_STRING		; go format one chunk
	BLBC	R0,100$				; get out on error	

; Is there room in output buffer for string?
;
	CMPL	R1,R8				; is there enough room?
	BLEQ	10$				; branch if answer is yes
	MOVL	R8,R1				; truncate string
10$:

; Move string into output buffer
;	(this can be optimized to a construct in place some time)
;
	PUSHR	#^M<R1,R2,R3,R4,R5>		; save registers across move
	MOVC3	R1,(R2),(R7)			; move into output buffer
	POPR	#^M<R1,R2,R3,R4,R5>		; restore registers
	ADDL2	R1,R7				; update output buffer pointer

	SUBL2	R1,R8				; acculumate length of string
	BLEQ	90$				; done if buffer is full

	TSTL	(R4)				; is there another code?
	BEQL	90$				; done if answer is no

; concatenate <CR><LF> to string since another line will be done
;
	CMPL	#2,R8				; enough space for delimiter?
	BLEQ	90$				; done if no
	MOVW	#CR+<LF@8>,(R7)			; add the delimiter
	ADDL2	#2,R7				; update buffer pointer	
	BRB	5$				; go back for more	

90$:						; we're done now

; Tell the RCP about the string
;
	MOVZWL	#256,R7				; calculate size of string
	SUBL2	R8,R7				; size of string in r7	
	MOVL	R7,@RLOG$L_STR_BUFFER(R6)	; make a descriptor
	MOVAL	RLOG$L_STR_BUFFER+8(R6),-	;
		@RLOG$L_STR_BUFFER+4(R6)	;

	MOVL	RLOG$L_STR_BUFFER(R6),R1	; get address of descriptor
	BSBW	RCP_LOG				; log the message

	
; Zero out the FAO parameters and codes.
;
	PUSHR	#^M<R1,R2,R3,R4,R5>		; save registers
	MOVC5	#0,RLOG$T_PARMS(R6),#0,-	; zero out the parms
		#RLOG$C_PARM_SIZE,-		;
		RLOG$T_PARMS(R6)		;
	MOVC5	#0,RLOG$L_CODES(R6),#0,-	; zero out the codes
		#RLOG$C_CODE_SIZE,-		;
		RLOG$L_CODES(R6)		;
	POPR	#^M<R1,R2,R3,R4,R5>		; restore registers

	MOVL	#1,R0				; success
100$:
	POPR	#^M<R6,R7,R8,R9>		; restore other registers
	RSB					; to caller

.SUBTITLE -	CONS_MESSAGE_STRING - build string

;++
; CONS_MESSAGE_STRING
;
; 	This routine formats a message code using GETMSG.
;
; Inputs:
;
;	r3  - address of FAOL parameter(s)
;	r4  - address of message code
;	r6  - rlog address
;
; Outputs:
;
;	r0  - success or failure
;	r1  - length of output string
;	r2  - address of output string
;	r3  - updated past used FAOL parameters
;	r4  - updated past message code used
;
; Implicit Inputs:
;
;	None.
;
; Implicit Outputs:
;
;	FAO and GETMSG fields in RLOG munged.
;
;--

CONS_MESSAGE_STRING:

; get the error message text
;
	MOVZWL	#256,RLOG$Q_GET_DESC(R6)	; set up output descriptor size
	MOVAL	RLOG$T_GET_BUFF(R6),-		;   and address
		RLOG$Q_GET_DESC+4(R6)		;

	$GETMSG_S -				; get the message text
		MSGID	= (R4),-		;  message identification
		MSGLEN	= RLOG$Q_GET_DESC(R6),-	;  length back to descriptor
		BUFADR	= RLOG$Q_GET_DESC(R6),-	;  output descriptor
		OUTADR	= RLOG$B_OUT_ARRY(R6)	;  output array
	BLBC	R0,10$				; get out on error

; format the output string
;
	MOVZWL	#132,RLOG$Q_FAO_DESC(R6)	; set up FAO output desc. size
	MOVAL	RLOG$T_FAO_BUF(R6),-		;   and address
		RLOG$Q_FAO_DESC+4(R6)		;

	$FAOL_S	-				; format the string
		CTRSTR	= RLOG$Q_GET_DESC(R6),-	;  FAO control string
		OUTLEN	= RLOG$Q_FAO_DESC(R6),-	;  length of output
		OUTBUF	= RLOG$Q_FAO_DESC(R6),-	;  address of output descriptor
		PRMLST	= (R3)			;  FAO parameters
	BLBC	R0,10$				; get out on error

	MOVQ	RLOG$Q_FAO_DESC(R6),R1		; return address and size
	EXTZV	#4,#4,RLOG$B_OUT_ARRY(R6),R5	; get count of FAO parms. used 
	ASHL	#2,R5,R5			; multiply to get byte count
	ADDL2	R5,R3				; point to next parms. if any
	ADDL2	#4,R4				; point to next code if any

	MOVL	#1,R0				; success
10$:
	RSB					; return to caller

.SUBTITLE Stuff to eventually get rid of

;++
;
; DUMPJNL,PRINT,INIT_LOG,CLOSE_LOG
;
;--

DUMPJNL::
PRINT::
	.WORD	0			; null entry mask
	MOVL	#1,R0			; success
	RET				; to caller

INIT_LOG::
CLOSE_LOG::
	MOVL	#1,R0			; success
	RSB				; return to caller

	.END
