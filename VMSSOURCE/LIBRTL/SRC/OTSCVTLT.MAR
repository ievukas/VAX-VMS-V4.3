	.TITLE	OTS$CVTLT - Convert longword to text, O, Z, L, B, U, I formats
	.IDENT	/1-014/			; File: OTSCVTLT.MAR  Edit: MDL1014

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Language independent support library
;
; ABSTRACT:
;
; Routines to convert values of any length to text using O (octal),
; Z (hexadecimal), B (binary) and L (logical) formats.  Also routines to 
; convert byte, word and longword integers to text using I (signed decimal) 
; and unsigned decimal formats.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: Steven B. Lionel, CREATION DATE: 21-Mar-1979
;

	.SBTTL	Edit History
;
; 1-001 - Original.  Replaces FOR$CNVOI.  SBL 22-Mar-1979
; 1-002 - Move V_FORCEPLUS to bit position 1.  SBL 25-July-1979
; 1-003 - Speed improvements.  New I format logic.  Use CASEB in
;	  INITIALIZE.  SBL 28-Dec-1979
; 1-004 - Fix bug in CASE.  SBL 31-Dec-1979
; 1-005 - Do correct thing for >128 arguments.  SBL 31-Dec-1979
; 1-006 - Minor code improvements courtesy of Rich Grove.  SBL 2-Jan-1980
; 1-007 - More minor code improvements.  Make value_size of zero an error.
;	  SBL 3-Jan-1980
; 1-008 - Fix bug where OTS$CVT_L_TI of 3 arguments doesnt fetch
;	  the value.  SBL 13-March-1980
; 1-009 - Add OTS$CVT_L_TB.  SBL 6-Nov-1980
; 1-010 - Make OTS$CVT_L_TI produce a blank field when value is zero and
;	  int_digits is zero.  SPR 11-37827  JAW  22-May-1981
; 1-011 - Add bit_offset and flags parameter to B, O and Z conversions.  SBL 6-July-1981
; 1-012 - Reverse order of bit_offset and flags parameters in B, O and Z.  SBL 30-Oct-1981
; 1-013 - Add OTS$CVT_L_TU.  SBL 27-Apr-1983
; 1-014 - fix bug where OTS$CVT_L_TU of 4 or 5 arguments doesnt fetch the
;	  value.  MDL 25-May-1984

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.
	.EXTRN	OTS$_OUTCONERR			; error code

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; PSECT DECLARATIONS:
;
	.PSECT _OTS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG

;
; OWN STORAGE:
;

LETTERS:
	.ASCII	/0123456789ABCDEF/	; Characters for output


	.SBTTL	OTS$CVT_L_TO - Long to text, O format
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine converts its input value to a text representation,
;	using base 8 (octal).  The input value may be of any length.
;
;	OTS$CVT_L_TO supports FORTRAN Ow and Ow.m output conversion.
;
;	A separate entry point FOR$CNV_OUT_O is provided for compatibility
;	with previous releases.  Note that the input value for
;	OTS$CVT_L_TO is by reference while that for FOR$CNV_OUT_O is
;	by value.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$CVT_L_TO (value.rx.r, out_string.wt.ds
;				     [, int_digits.rl.v
;				     [, value_size.rl.v
;				     [, flags.rbu.v
;				     [, bit_offset.rl.v]]]])
;
;	status.wlc.v = FOR$CNV_OUT_O (value.rl.v, out_string.wt.ds)
;
;
; INPUT PARAMETERS:
;
	value = 4		; Input value to be converted to text
	int_digits = 12		; Minimum number of digits to be produced.
				; If actual number of significant digits
				; is smaller, leading zeroes will be
				; produced.  If int_digits is zero
				; and value is zero, a blank field will
				; result.  The default is 1.
	value_size = 16		; The size of value in bytes.  The 
				; default is 4 if this argument is not present.
				; If V_SIZE_IN_BITS set, value_size is in units of bits.
	flags	   = 20		; Caller supplied flags
	  V_SIZE_IN_BITS = 2	; "value_size" is in bits rather than bytes.
	bit_offset = 24		; Starting bit position.  Default is 0.

;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	out_string = 8		; Output string by descriptor.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL	- Successful completion.
;	OTS$_OUTCONERR	- Output conversion error.  The converted value
;			  does not fit in the field provided.  The field
;			  is filled with asterisks.  This error is also
;			  given if value_size is not positive.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	FOR$CNV_OUT_O, ^M<R2,R3,R4,R5,R6,R7>

	MOVAB	value(AP), R4		; Address of value
	BSBW	INITIALIZE		; Set up default values
	MOVL	#32, R3			; Value MUST be 4 bytes!
	BRB	COMMON_O		; Go to common routine

	.ENTRY OTS$CVT_L_TO , ^M<R2,R3,R4,R5,R6,R7>

	MOVL	value(AP), R4		; Address of value
	BSBW	INITIALIZE		; Set up default values


COMMON_O:
	MOVL	R1, R6			; last set char address
10$:	CASEL	R3, #1, #1		; Select on bits remaining
1$:	.WORD	11$-1$			; 1 bit
	.WORD	12$-1$			; 2 bits
	BRB	13$			; 3 or more bits
					; can't be zero
11$:	EXTZV	R5, #1, (R4), R7	; extract one bit
	BEQL	EXIT_O			; if zero, exit
	BSBW	ZERO_FILL		; fill with zero to this point
	MOVB	LETTERS[R7], -(R1)	; move character
	DECL	R2			; decrement digits count
	DECL	R6			; decrement place holder
	BRB	EXIT_O
12$:	EXTZV	R5, #2, (R4), R7	; extract 2 bits
	BLEQ	EXIT_O			; if zero, finish
	BSBW	ZERO_FILL		; fill with zeroes
	MOVB	LETTERS[R7], -(R1)	; move character
	DECL	R2			; decrement digits count
	DECL	R6			; decrement place holder
	BRB	EXIT_O			; exit
13$:	EXTZV	R5, #3, (R4), R7	; extract 3 bits
	BEQL	40$			; skip insert if zero
	BSBW	ZERO_FILL		; fill with zeroes
	MOVB	LETTERS[R7], -(R6)	; move character
	DECL	R2			; decrement digits count
40$:	ADDL2	#3, R5			; increment position
	DECL	R1			; decrement character pointer
	SUBL2	#3, R3			; decrement count
	BGTRU	10$			; continue if not done

EXIT_O:
	TSTL	R2			; more zeroes to fill?
	BLEQ	50$			; no
	SUBL3	R2, R6, R1		; insert R2 zeroes
	INCL	R0			; we aren't writing a char here
	BSBW	ZERO_FILL		; fill with zeroes
50$:	TSTL	R0			; Blank fill?
	BLEQ	70$			; No
60$:	MOVB	#^A/ /, -(R6)		; Move a blank
	SOBGTR	R0, 60$			; Loop till done
70$:	MOVL	#1, R0			; SS$_NORMAL
	RET				; exit

	.SBTTL	OTS$CVT_L_TZ - Long to text, Z format
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine converts its input value to a text representation,
;	using base 16 (hexadecimal).  The input value may be of any length.
;
;	OTS$CVT_L_TZ supports FORTRAN Zw and Zw.m output conversion.
;
;	A separate entry point FOR$CNV_OUT_Z is provided for compatibility
;	with previous releases.  Note that the input value for
;	OTS$CVT_L_TZ is by reference while that for FOR$CNV_OUT_Z is
;	by value.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$CVT_L_TZ (value.rx.r, out_string.wt.ds
;				     [, int_digits.rl.v
;				     [, value_size.rl.v
;				     [, flags.rbu.v
;				     [, bit_offset.rl.v]]]])
;
;	status.wlc.v = FOR$CNV_OUT_Z (value.rl.v, out_string.wt.ds)
;
;
; INPUT PARAMETERS:
;
	value = 4		; Input value to be converted to text
	int_digits = 12		; Minimum number of digits to be produced.
				; If actual number of significant digits
				; is smaller, leading zeroes will be
				; produced.  If int_digits is zero
				; and value is zero, a blank field will
				; result.  The default is 1.
	value_size = 16		; The size of value in bytes.  The 
				; default is 4 if this argument is not present.
				; If flags bit V_SIZE_IN_BITS is set, value_size
				; is the number of bits in the value.
	flags = 20		; Caller supplied flags.  Defined bits are:
	  V_SIZE_IN_BITS = 2	; "value_size" is in units of bits
	bit_offset = 24		; Offset of value in bits.  Default is zero.

;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	out_string = 8		; Output string by descriptor.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL	- Successful completion.
;	OTS$_OUTCONERR	- Output conversion error.  The converted value
;			  does not fit in the field provided.  The field
;			  is filled with asterisks.  This error is also given
;			  if value_size is not positive.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	FOR$CNV_OUT_Z, ^M<R2,R3,R4,R5,R6,R7>

	MOVAB	value(AP), R4		; Address of value
	BSBW	INITIALIZE		; Set up default values
	MOVL	#32, R3			; Value MUST be 4 bytes!
	BRB	COMMON_Z		; Go to common routine

	.ENTRY OTS$CVT_L_TZ , ^M<R2,R3,R4,R5,R6,R7>

	MOVL	value(AP), R4		; Address of value
	BSBW	INITIALIZE		; Set up default values


COMMON_Z:
	MOVL	R1, R6			; last set char address
10$:	CASEL	R3, #1, #2		; Select on bits remaining
1$:	.WORD	11$-1$			; 1 bit
	.WORD	12$-1$			; 2 bits
	.WORD	13$-1$			; 3 bits
	BRB	14$			; 4 or more bits
					; can't be zero
11$:	EXTZV	R5, #1, (R4), R7	; extract one bit
	BEQL	EXIT_Z			; if zero, exit
	BSBW	ZERO_FILL		; fill with zero to this point
	MOVB	LETTERS[R7], -(R1)	; move character
	DECL	R2			; decrement digits count
	DECL	R6			; decrement place holder
	BRB	EXIT_Z
12$:	EXTZV	R5, #2, (R4), R7	; extract 2 bits
	BLEQ	EXIT_Z			; if zero, finish
	BSBW	ZERO_FILL		; fill with zeroes
	MOVB	LETTERS[R7], -(R1)	; move character
	DECL	R2			; decrement digits count
	DECL	R6			; decrement place holder
	BRB	EXIT_Z			; exit
13$:	EXTZV	R5, #3, (R4), R7	; extract 3 bits
	BEQL	EXIT_Z			; skip insert if zero
	BSBW	ZERO_FILL		; fill with zeroes
	MOVB	LETTERS[R7], -(R1)	; move character
	DECL	R2			; decrement digits count
	DECL	R6			; decrement place holder
	BRB	EXIT_Z
14$:	EXTZV	R5, #4, (R4), R7	; extract 4 bits
	BEQL	40$			; skip insert if zero
	BSBW	ZERO_FILL		; fill with zeroes
	MOVB	LETTERS[R7], -(R6)	; move character
	DECL	R2			; decrement digits count
40$:	ADDL2	#4, R5			; increment position
	DECL	R1			; decrement character pointer
	SUBL2	#4, R3			; decrement count
	BGTRU	10$			; continue if not done

EXIT_Z:
	TSTL	R2			; more zeroes to fill?
	BLEQ	30$			; no
	SUBL3	R2, R6, R1		; insert R2 zeroes
	INCL	R0			; we aren't writing a char here
	BSBW	ZERO_FILL		; fill with zeroes
30$:	TSTL	R0			; Blank fill?
	BLEQ	50$			; No
40$:	MOVB	#^A/ /, -(R6)		; Move a blank
	SOBGTR	R0, 40$			; Loop till done
50$:	MOVL	#1, R0			; SS$_NORMAL
	RET				; exit

	.SBTTL	OTS$CVT_L_TB - Long to text, binary format
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine converts its input value to a text representation,
;	using base 2 (binary).  The input value may be of any length.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$CVT_L_TB (value.rx.r, out_string.wt.ds
;				     [, int_digits.rl.v
;				     [, value_size.rl.v
;				     [, flags.rbu.v
;				     [, bit_offset.rl.v]]]])
;
; INPUT PARAMETERS:
;
	value = 4		; Input value to be converted to text
	int_digits = 12		; Minimum number of digits to be produced.
				; If actual number of significant digits
				; is smaller, leading zeroes will be
				; produced.  If int_digits is zero
				; and value is zero, a blank field will
				; result.  The default is 1.
	value_size = 16		; The size of value in bytes.  The 
				; default is 4 if this argument is not present.
				; If flags bit V_SIZE_IN_BITS is set, value_size
				; is the number of bits in the value.
	flags = 20		; Caller supplied flags.  Defined bits are:
	  V_SIZE_IN_BITS = 2	; "value_size" is in units of bits
	bit_offset = 24		; Offset of value in bits.  Default is zero

;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	out_string = 8		; Output string by descriptor.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL	- Successful completion.
;	OTS$_OUTCONERR	- Output conversion error.  The converted value
;			  does not fit in the field provided.  The field
;			  is filled with asterisks.  This error is also given
;			  if value_size is not positive.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY OTS$CVT_L_TB , ^M<R2,R3,R4,R5,R6,R7>

	MOVL	value(AP), R4		; Address of value
	BSBW	INITIALIZE		; Set up default values

	MOVL	R1, R6			; last set char address
10$:	EXTZV	R5, #1, (R4), R7	; extract 1 bits
	BEQL	20$			; skip insert if zero
	BSBW	ZERO_FILL		; fill with zeroes
	MOVB	LETTERS[R7], -(R6)	; move character
	DECL	R2			; decrement digits count
20$:	DECL	R1			; decrement character pointer
	INCL	R5			; increment bit position
	DECL	R3			; decrement bit count
	BGTR	10$			; loop back if more bits

EXIT_B:
	TSTL	R2			; more zeroes to fill?
	BLEQ	30$			; no
	SUBL3	R2, R6, R1		; insert R2 zeroes
	INCL	R0			; we aren't writing a char here
	BSBW	ZERO_FILL		; fill with zeroes
30$:	TSTL	R0			; Blank fill?
	BLEQ	50$			; No
40$:	MOVB	#^A/ /, -(R6)		; Move a blank
	SOBGTR	R0, 40$			; Loop till done
50$:	MOVL	#1, R0			; SS$_NORMAL
	RET				; exit

	.SBTTL	Local subroutines

;+
; INITIALIZE - Perform common initialization
;
;	1. R0 gets string length.
;	2. R1 gets address of 1 byte past end of out_string.
;	3. R2 gets int_digits value.
;	4. R3 gets value size in bits.
;	5. R5 gets starting bit position
;-

INITIALIZE:
	MOVQ	@out_string(AP), R0	; Get string descriptor
	MOVZWL	R0, R0			; R0 gets string length
	ADDL2	R0, R1			; R1 has 1 past last byte
	MOVL	#1, R2			; default digits in int
	MOVL	#32, R3			; default size in bits
	CLRL	R5			; default bit offset
	MOVL	#8, R7			; Default multiplier size-to-bits
	CASEB	(AP), #2, #4		; Select on argument count
1$:	.WORD	20$-1$			; 2 arguments
	.WORD	30$-1$			; 3 arguments
	.WORD	40$-1$			; 4 arguments
	.WORD	50$-1$			; 5 arguments
	.WORD	60$-1$			; 6 arguments
	; fall through			; Assume >6 arguments
60$:	MOVL	bit_offset(AP), R5	; Get bit offset
50$:	BBC	#V_SIZE_IN_BITS, flags(AP), 40$	; Bit not set?
	MOVL	#1, R7			; value_size is in bits
40$:	MULL3	value_size(AP), R7, R3	; Get size in bits
	BVS	ERROR			; Error if overflow
	BNEQ	30$			; Ok if not zero
	MOVL	#32, R3			; Assume 32 bits
30$:	MOVL	int_digits(AP), R2	; Get int_digits argument
20$:	RSB				; End of initialization


;+
; ZERO_FILL - Fill in skipped zeroes
;
;	ZERO_FILL is called whenever a main routine wishes to output
;	a non-zero digit.  First, it checks to see if there is room
;	for one more character.  If not, it branches to ERROR.
;	It then fills with zeroes the space between the last non-zero
;	digit and the current location, if any.  It also updates the
;	character pointers and counts appropriately.
;-

ZERO_FILL:
	DECL	R0			; Reduce char count
	BLSS	ERROR			; If negative, out of room
	CMPL	R1, R6			; Any difference?
	BLSS	10$			; Yes
	RSB				; No, exit
10$:	MOVB	#^A/0/, -(R6)		; Move a zero
	DECL	R2			; Decrement digits count
	BRB	ZERO_FILL		; Loop till done

;+
; ERROR - Return output conversion error
;	  Not used by L format.
;-

ERROR_CALL:				; Called by I format
	.WORD	^M<R2,R3,R4,R5>

ERROR:
	MOVQ	@out_string(AP), R0	; Get string descriptor
	MOVC5	#0, (SP), #^A/*/, R0, (R1)	; Fill with *
	MOVL	#OTS$_OUTCONERR, R0	; Output conversion error
	RET

	.SBTTL	OTS$CVT_L_TI - Long to text, I format
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine converts its input value to a text representation,
;	using base 10 (decimal).  
;
;	OTS$CVT_L_TI supports FORTRAN Iw and Iw.m output conversion.
;
;	A separate entry point FOR$CNV_OUT_I is provided for compatibility
;	with previous releases.  Note that the input value for
;	OTS$CVT_L_TI is by reference while that for FOR$CNV_OUT_I is
;	by value.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$CVT_L_TI (value.rx.r, out_string.wt.ds
;				     [, int_digits.rl.v
;				     [, value_size.rl.v
;				     [, caller_flags.rbu.v]]])
;
;	status.wlc.v = FOR$CNV_OUT_I (value.rl.v, out_string.wt.ds)
;
;
; INPUT PARAMETERS:
;
	value = 4		; Input value to be converted to text
	int_digits = 12		; Minimum number of digits to be produced.
				; If actual number of significant digits
				; is smaller, leading zeroes will be
				; produced.  If int_digits is zero
				; and value is zero, a blank field will
				; result.  The default is 1.
	value_size = 16		; The size of value in bytes.  If
				; present, value_size must be either
				; 1, 2 or 4.  If value_size is 1 or 2, the
				; value is sign extended to a longword
				; before conversion.  The default is
				; 4 if this argument is not present.
	caller_flags = 20	; Flags supplied by caller:
	  V_FORCEPLUS = 0	; If set, a plus sign will be forced
				; for positive values.
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	out_string = 8		; Output string by descriptor.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL	- Successful completion.
;	OTS$_OUTCONERR	- Output conversion error.  Either the converted
;			  value did not fit in the field provided or the
;			  byte count was not 1, 2 or 4.  The field is filled
;			  with asterisks.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

;+
; Definition of flag bits.
;-

	V_NEGATIVE = 8			; Bit to set in R5 if negative
	M_NEGATIVE = 1@V_NEGATIVE	; Mask for V_NEGATIVE

	.ENTRY FOR$CNV_OUT_I, ^M<R2,R3,R4,R5,R6>

	MOVL	#1, R4			; Number of integer digits
	CLRL	R5			; No flags
	MOVL	value(AP), R0		; Value is in argument list
	BRB	COMMON_I		; Go to common routine

	.ENTRY 	OTS$CVT_L_TI, ^M<R2,R3,R4,R5,R6>

	CLRL	R5			; Assume no flags
	CASEB	(AP), #2, #3		; Select on argument count
1$:	.WORD	20$-1$			; 2 arguments
	.WORD	44$-1$			; 3 arguments
	.WORD	40$-1$			; 4 arguments
	.WORD	50$-1$			; 5 arguments
	BRB	50$			; assume >5 arguments
20$:	
	MOVL	#1, R4			; Get integer digits
	MOVL	@value(AP), R0		; longword value
	BRB	COMMON_I
50$:	MOVB	caller_flags(AP), R5	; Get flags
40$:	CASEL	value_size(AP), #0, #4	; Select on value size
2$:	.WORD	44$-2$			; 0 - assume 4 bytes
	.WORD	41$-2$			; 1 byte
	.WORD	42$-2$			; 2 bytes
	.WORD	ERROR_I-2$		; 3 bytes, error
	.WORD	44$-2$			; 4 bytes
	BRW	ERROR_I			; other, error
41$:	CVTBL	@value(AP), R0		; Convert byte
	BRB	30$			; Continue
42$:	CVTWL	@value(AP), R0		; Convert word
	BRB	30$			; Continue
44$:	MOVL	@value(AP), R0		; Convert longword
30$:	MOVL	int_digits(AP), R4	; Get integer digits
	TSTL	R0			; Set condition codes for test

COMMON_I:
	BGEQ	COMMON_IU		; Skip if value positive
	BISW2	#M_NEGATIVE, R5		; Indicate negative
	MNEGL	R0, R0			; Get absolute value
COMMON_IU:
	CLRL	R1			; Clear low-order part of value
	MOVQ	@out_string(AP), R2	; Get descriptor in R2-R3
	MOVZWL	R2, R2			; Get length in R2
	ADDL2	R2, R3			; Get address of last+1 character
	BRB	15$			; Store digits

;+
; Store all significant digits.
;-
10$:	EDIV	#10, R0, R0, R6		; Get quotient in R0-R1, remainder in R6
	DECL	R2			; Decrement length
	BLSS	ERROR_I			; Error if no more chars left
	ADDB3	#^A/0/, R6, -(R3)	; Store next digit
	DECL	R4			; Decrement zero-fill count
15$:	TSTL	R0			; Are we done now?
	BNEQ	10$			; Loop if not
	BRB	25$			; Fill in leading zeroes

;+
; Fill in any leading zeroes needed.  R4 has remaining zero count.
;-
20$:	DECL	R2			; 1 less character
	BLSS	ERROR_I			; Have we run out?
	MOVB	#^A/0/, -(R3)		; Move a zero
25$:	SOBGEQ	R4, 20$			; Loop till done

;+
; Store sign, if needed.
;-
	BBS	#V_NEGATIVE, R5, 30$	; Skip if value negative
	BBC	#V_FORCEPLUS, R5, 50$	; Test for forced plus
	MOVB	#^A/+/, R0		; Use plus sign
	BRB	35$			; Rejoin common code
30$:	MOVB	#^A/-/, R0		; Use minus sign
35$:	DECL	R2			; 1 less character
	BLSS	ERROR_I			; Have we run out?
	MOVB	R0, -(R3)		; Move sign, "-" or "+"
	BRB	50$			; Blank fill, if needed.

;+
; Blank fill remainder, if needed.  R2 has remaining blank count.
;-
40$:	MOVB	#^A/ /, -(R3)		; Move a blank
50$:	SOBGEQ	R2, 40$			; Loop till done
	MOVL	#1, R0			; Success
	RET

ERROR_I:
	CALLG	(AP), W^ERROR_CALL	; Fill with asterisks
	RET				; with error status in R0

	.SBTTL	OTS$CVT_L_TU - Long to text, unsigned decimal format
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine converts its input value to a text representation,
;	using unsigned base 10 (decimal).  
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$CVT_L_TU  (value.rx.r, out_string.wt.ds
;				     [, int_digits.rl.v
;				     [, value_size.rl.v
;				     [, caller_flags.rbu.v]]])
;
;
; INPUT PARAMETERS:
;
	value = 4		; Input value to be converted to text
	int_digits = 12		; Minimum number of digits to be produced.
				; If actual number of significant digits
				; is smaller, leading zeroes will be
				; produced.  If int_digits is zero
				; and value is zero, a blank field will
				; result.  The default is 1.
	value_size = 16		; The size of value in bytes.  If
				; present, value_size must be either
				; 1, 2 or 4.  If value_size is 1 or 2, the
				; value is sign extended to a longword
				; before conversion.  The default is
				; 4 if this argument is not present.
	caller_flags = 20	; Flags supplied by caller:

;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	out_string = 8		; Output string by descriptor.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL	- Successful completion.
;	OTS$_OUTCONERR	- Output conversion error.  Either the converted
;			  value did not fit in the field provided or the
;			  byte count was not 1, 2 or 4.  The field is filled
;			  with asterisks.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

;+
; Definition of flag bits.
;-


	.ENTRY 	OTS$CVT_L_TU, ^M<R2,R3,R4,R5,R6>

	CLRL	R5			; Assume no flags
	CASEB	(AP), #2, #3		; Select on argument count
1$:	.WORD	20$-1$			; 2 arguments
	.WORD	44$-1$			; 3 arguments
	.WORD	40$-1$			; 4 arguments
	.WORD	40$-1$			; 5 arguments
	BRB	40$			; assume >5 arguments
20$:	
	MOVL	#1, R4			; Get integer digits
	MOVL	@value(AP), R0		; longword value
	BRW	COMMON_IU
40$:	CASEL	value_size(AP), #0, #4	; Select on value size
2$:	.WORD	44$-2$			; 0 - assume 4 bytes
	.WORD	41$-2$			; 1 byte
	.WORD	42$-2$			; 2 bytes
	.WORD	ERROR_I-2$		; 3 bytes, error
	.WORD	44$-2$			; 4 bytes
	BRW	ERROR_I			; other, error
41$:	MOVZBL	@value(AP), R0		; Convert byte
	BRB	30$			; Continue
42$:	MOVZWL	@value(AP), R0		; Convert word
	BRB	30$			; Continue
44$:	MOVL	@value(AP), R0		; Convert longword
30$:	MOVL	int_digits(AP), R4	; Get integer digits
	BRW	COMMON_IU		; Join common code

	.SBTTL	OTS$CVT_L_TL - Long to text, L format
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine converts its input value to a text representation,
;	using FORTRAN L (logical) format.
;
;	The output field will consist of (width-1) blanks followed by:
;		the letter T if the lowest bit is set;
;		the letter F if the lowest bit is clear.
;
;	A separate entry point FOR$CNV_OUT_L is provided for compatibility
;	with previous releases.  Note that the input value for
;	OTS$CVT_L_TL is by reference while that for FOR$CNV_OUT_L is
;	by value.
;
; CALLING SEQUENCE:
;
;	status.wlc.v = OTS$CVT_L_TL (value.rL.r, out_string.wt.ds)
;
;	status.wlc.v = FOR$CNV_OUT_L (value.rl.v, out_string.wt.ds)
;
;
; INPUT PARAMETERS:
;
	value = 4		; Input value to be converted to text
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
	out_string = 8		; Output string by descriptor.
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL	- Successful completion.
;	OTS$_OUTCONERR	- Output conversion error.  This can only occur
;			  if the output string is of zero length.
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	FOR$CNV_OUT_L, ^M<R2>

	MOVB	value(AP), R2		; Get low byte of value
	BRB	COMMON_L		; Go to common routine

	.ENTRY OTS$CVT_L_TL , ^M<R2>

	MOVB	@value(AP), R2		; Get low byte of value


COMMON_L:
	MOVQ	@out_string(AP), R0	; Get descriptor
	MOVZWL	R0, R0			; Length
	BLEQ	ERROR_L			; Zero length, error
	ADDL2	R0, R1			; 1 byte past end of string
	BLBS	R2, TRUE		; TRUE or FALSE?
	MOVB	#^A/F/, -(R1)		; result is F
	BRB	EXIT_L			; Finish
TRUE:	MOVB	#^A/T/, -(R1)		; result is T

EXIT_L:
	DECL	R0			; 1 less character
	BEQL	20$			; All done?
10$:	MOVB	#^A/ /, -(R1)		; Blank fill
	SOBGTR	R0, 10$			; Loop till done
20$:	MOVL	#1, R0			; Success
	RET				; Return

ERROR_L:
	MOVL	#OTS$_OUTCONERR, R0	; Output conversion error
	RET				; Return


	.END
