%TITLE 'Process the .REQUIRE directive'
MODULE REQUIR (
		IDENT = 'V04-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Processes the .REQUIRE command
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: July, 1978
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	007	KAD00007	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
MACRO
    erm_t (rnfcode, str_descr) =
	BEGIN
	BIND
	    temp = str_descr : $STR_DESCRIPTOR ();
	erme (rnfcode, .temp [STR$A_POINTER], .temp [STR$H_LENGTH], .semcod)
	END	%;
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    rintes : UNSIGNED (8);

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    flgt : flag_table,
    fs01 : fixed_string,			!Temporary storage for file-spec
    ira : fixed_string,
    khar,
    ffname : $STR_DESCRIPTOR (CLASS = DYNAMIC),	! Failing file's name
    semcod;

EXTERNAL LITERAL 				!Error messages
    rnfcor,	! W - Can't open required file "%S"
    rnfloc,	! I - on output page %P; on input line %C of page %I of file "%F"
    rnfmfs,	! W - Missing or improperly delimited file spec: "%S"
    rnfntd,	! W - Files nested too deep: "%S"
    rnftar;	! W - No text allowed after .REQUIRE command: "%S"

EXTERNAL ROUTINE
    arec,
    clh,
    endcmt,
    erm,
    erma,
    erme,
    getqs,
    rskips;


%SBTTL 'REQ -- main routine body'
GLOBAL ROUTINE req (handler_code) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine causes RUNOFF to take its input from the file specified as
!	the parameter to the .REQUIRE command.  Spaces, tabs, and comments
!	following the file-spec are ignored; other characters are not allowed.
!
! FORMAL PARAMETERS:
!
!	Handler_code is passed by DOCM for conformity with other routines.
!	It is never used.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:
!
!	FS01 contains the file-spec of the file ".REQUIREd".  When CLH gets
!	called with the operation CLH_OPEN_REQ it expects to find the
!	file-spec of the file to be opened in FS01.
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    LOCAL
	result;

    rskips (ira);				!Skip spaces and tabs before file-spec.
    result = getqs (fs01);			!Get file-spec into FS01

    IF .result EQL getqs_normal
    THEN
    !Found a file-spec.
	BEGIN
	!Skip trailing spaces, tabs, and comments before opening file.
	!The entire remainder of the record is skipped.
	rskips (ira);				!Skip trailing spaces and tabs

	IF .flgt [com_flag, flag_enabled]	!Skip single trailing comment
	   AND (.khar EQL .flgt [com_flag, flag_character])
	THEN
	    endcmt ();

	WHILE 1 DO
	    BEGIN
	    !Skip spaces and tabs
	    result = arec ();

	    IF  .result EQL end_of_string
	    THEN
		EXITLOOP
	    ELSE

		IF  .result EQL cf_comment
		THEN
		!Skip a comment.
		    endcmt ()
		ELSE
		!Something other than spaces, tabs, and comments
		!after the file-spec.
		!Note: comments of the form .COMMENT are illegal
		!	here.  If they are to be allowed, this is
		!	the place to put the code to check for them.
		    BEGIN
		    erma (rnftar, true);
		    RETURN
		    END
	    END;

	result = clh (clh_push);		! Stack current input file

	IF  .result NEQ clh_normal
	THEN
	!No room to stack current input file.
	    BEGIN
	    erma (rnfntd, false);
	    RETURN;
	    END
	ELSE

	! Have ascertained that there is enough room for the control blocks
	! needed for the processing, so try to open the file.

	    BEGIN

	    ! CLH expects to find the file-spec in FS01.

	    result = clh (clh_open_req);

	    IF  .result EQL clh_normal		!  If CLH returns normal,
	    THEN				!  then we're done here.
		RETURN
		    ! And away we go!!!!!  Popping the file stack is done
		    ! automatically by CLH, when it gets an end of file when
		    ! it gets called to read the next input record.
	    ELSE
		BEGIN			! File could not be opened, damnit!

		erm_t ( rnfcor, ffname);	! Can't open REQUIRE file
		clh (clh_pop);			! Continue with previous file.
		erm (rnfloc, 0, 0);		! Identify that files name

		RETURN;
		END;
	    END;
	END
    ELSE
    !Missing file-spec, or one not properly delimited.
	BEGIN
	erma (rnfmfs, true);
	END;
    END;					!End of REQ

END						!End of module
ELUDOM

