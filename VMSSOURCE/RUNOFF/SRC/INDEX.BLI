%TITLE 'INDEX -- DSR/DSRPLUS DSRINDEX/INDEX Utility'
MODULE INDEX (IDENT = 'V04-000'
		    %BLISS32 [, ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!   DSR (Digital Standard RUNOFF) /DSRPLUS DSRINDEX/INDEX Utility
!
! ABSTRACT:
!   This module contains the two major routines that make up the INDEX utility:
!
!	NDXINP - Reads input file and builds internal binary index
!	MAKNDX - Writes formatted index from internal binary index
!
! ENVIRONMENT:	 Transportable
!
! AUTHOR:	 JPK
!
! CREATION DATE: December 1981
!
! MODIFIED BY:
!
!	009	JPK00023	20-May-1983
!		Modified INDEX, NDXT20 and NDXVMS to check status of
!		$XPO_PARSE_SPEC to avoid error messages from XPORT.
!
!	008	JPK00018	09-Mar-1983
!		Modified INDEX to handle new BRN format.
!		Modified NDXOUT to handle specifyable levels on SORT= string.
!		Modified NDXFMT to output new RUNOFF prologue.
!		Modified NDXPAG to output new TMS prologue and RUNOFF epilogue.
!
!	007	JPK00015	04-Feb-1983
!		Cleaned up module names, modified revision history to
!		conform with established standards. Updated copyright dates.
!
!	006	JPK00012	24-Jan-1983
!		Modified NDXVMSMSG.MSG to define error messages for both
!		DSRINDEX and INDEX.
!		Added require of NDXVMSREQ.R32 to NDXOUT, NDXFMT, NDXDAT,
!		INDEX, NDXMSG, NDXXTN, NDXTMS, NDXVMS and NDXPAG for BLISS32. 
!		Since this file defines the error message literals, 
!		the EXTERNAL REFERENCEs for the error message literals 
!		have been removed.
!
!	005	JPK00011	24-Jan-1983
!		Changed CMDBLK [NDX$G_LEVEL] to CMDBLK [NDX$H_LEVEL]
!		Changed CMDBLK [NDX$H_FORMAT] to CMDBLK [NDX$H_LAYOUT]
!		Changed CMDBLK [NDX$V_TMS11] and CMDBLK [NDX$V_TEX] to CMDBLK [NDX$H_FORMAT]
!		Changed comparisons of (.CHRSIZ EQLA CHRSZA) to 
!		(.CMDBLK [NDX$H_FORMAT] EQL TMS11_A).
!		Definitions were changed in NDXCLI and references to the
!		effected fields were changed in NDXPAG, NDXFMT, INDEX, NDXVMS
!		and NDXCLIDMP.
!
!	004	JPK00009	24-Jan-1983
!		Modified to enhance performance. The sort buckets have each
!		been divided into 27 sub-buckets; 1 for each letter and 1
!		for non-alphas. Removed reference to BUCKET from INDEX.
!		Definition of the structure was added to NDXPOL. References
!		to BUCKET were changed in modules NDXOUT, NDXINI, NDXFMT 
!		and NDXDAT.
!
!	003	JPK00007	24-Sep-1982
!		Reset PAGENO if not concatenated input in INDEX.
!
!	002	JPK00002	16-Sep-1982
!		Fix transaction mapping bug in INDEX. This bug occurred only 
!		when processing more than one input file where a file in the
!		middle of the sequence contained no indexing information.
!		If there had been only one transaction previous to the 
!		empty file, the resulting page numbers would be incorrect
!		but the error would not be discovered by INDEX. If there
!		were more than one transaction preceeding the empty file,
!		transaction numbers would appear out of sequence which would
!		be reported by INDEX as an internal logic error.
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NDXINP : NOVALUE,				! Create internal binary index
    MAKNDX : NOVALUE;				! Write formatted index

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';

REQUIRE 'REQ:NDXCLI';				! Command line information block

REQUIRE 'REQ:BRNRTY';				! .BRN file record type literals

REQUIRE 'REQ:NDXRTY';				! Index binary record type literals

REQUIRE 'REQ:NDXXPL';				! Extended indexing attributes

REQUIRE 'REQ:NDXPOL';				! Pool data structures 
	
REQUIRE 'REQ:PAGEN';				! Page reference data structure definitions

%IF %BLISS (BLISS32)				! For BLISS32
%THEN

REQUIRE 'REQ:NDXVMSREQ';				! Error message numbers

%FI

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

LITERAL
    TRUE = 1,
    FALSE = 0;

!
! OWN STORAGE:
!

OWN
    XTN_OFFSET,					! Used to remap transaction numbers
    HIGHEST_XTN_OUT,				! Highest remapped transaction number
    INDEX_ENTRIES : INITIAL (0);		! Number of binary index entries processes

OWN
    RNX_FILE : $STR_DESCRIPTOR (STRING = '.RNX'),
    TMS_FILE : $STR_DESCRIPTOR (STRING = '.TMS'),
    TEX_FILE : $STR_DESCRIPTOR (STRING = '.TEX');

!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);			! RUNOFF escape sequence character

EXTERNAL
    CMDBLK : $NDXCMD,				! Command line information block
    XPLBLK : $XPL_BLOCK,			! Extended indexing information block
    OUTIOB : $XPO_IOB (),			! Output file IOB
    PAGEN  : PAGE_DEFINITION,
    PAGENO,					! Page counter
    NDXPOL,					! Address of indexing pool
    NDXSGE,					! End of current segment.
    NDXSGF,
    XTNCNT,					! Number of XTNTAB entries
    XTNLSP,
    XTNLSX,
    XTNPOL,
    XTNSGP,
    XTNTAB,					! List of transaction numbers assigned
    XPAGEN,
    BOOKID;					! Master index book ident string address

EXTERNAL ROUTINE

%IF %BLISS (BLISS32)
%THEN

    OPEN_ERROR,					! Handle file open errors for BLISS32

%FI

    DMPENT : NOVALUE,				! Dump entry text
    ASGXTN : NOVALUE,				! Assign transaction # to page reference
    XINIT  : NOVALUE,				! Initialize pool
    FPOOL  : NOVALUE,				! Release pool space
    PERMUT : NOVALUE,				! Insert index entry in internal binary index
    NDXFMT : NOVALUE,				! Generate final output index
    SAVDAT;					! Insert data in index pool

%SBTTL 'GLOBAL ROUTINE NDXINP -- Process input file'

GLOBAL ROUTINE NDXINP : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine generates an internal binary index from an input file.
!
!	If the input file is not concatenated to the previous input file,
!	this routine calls MAKNDX to generate the output index from the
!	existing internal binary index before processing the input file.
!
! FORMAL PARAMETERS:
!
!	None.
!
! IMPLICIT INPUTS:
!
!	CMDBLK	- Command line information block
!
! IMPLICIT OUTPUTS:
!
!   CMDBLK [NDX$T_RELATED_FILE] -
!	This string is set to the resultant input file specification for 
!	every input file which is not concatenated to the previous one. 
!	Thus the related file name for a series of concatenated input files 
!	is the resultant file name of the first file in the series.
!
!   XPLBLK -
!	This global data structure is filled in with data read in from
!	an INDEX_ATTRIBUTES record group.
!
!   INDEX_ENTRIES -
!	is set to the number of binary index records processed.
!
!   XTN_OFFSET -
!	is set to the highest transaction number processed in the current 
!	input stream.
!
!   BOOKID -
!	is the address of the book identification string if generating
!	a master index.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!--

    BEGIN

    LOCAL
	PARSE_BLK : $XPO_SPEC_BLOCK,		! For parsing input file name
	INPUT_IOB : $XPO_IOB () VOLATILE,	! Input file IOB
	FILE_IDENTIFIER,			! Will hold input file type code
	INDEX_VERSION,				! Will hold index file format revision level
	INDEX_RECORDS,				! Number of index entry records in input file
	HEADING_LENGTH,				! Length of record group headings
	CONFUSE_COUNT,				! Counter of "confused" messages
	CORRECT_FORMAT;				! For checking file format

    !
    ! Initialization
    !
    INDEX_RECORDS = 0;				! No indexing information seen yet
    CONFUSE_COUNT = 0;				! Initialize "confused" counter

    !
    ! Initialize input IOB and parse input file specification
    !
    $XPO_IOB_INIT (IOB = INPUT_IOB);

    IF NOT $XPO_PARSE_SPEC (SPEC_BLOCK = PARSE_BLK, FAILURE = 0,
		FILE_SPEC = CMDBLK [NDX$T_INPUT_FILE])
    THEN
	!
	! Input file name parse failed. Set file type length non-zero to force
	! quick open failure message.
	!
	PARSE_BLK [XPO$H_FILE_TYPE] = 1;

    IF .PARSE_BLK [XPO$H_FILE_TYPE] NEQ 0
    THEN
	!
	! User specified a file type. Open file with no defaults.
	!
	$XPO_OPEN (IOB = INPUT_IOB, FILE_SPEC = CMDBLK [NDX$T_INPUT_FILE], ATTRIBUTES = BINARY
	    %IF %BLISS (BLISS32) %THEN , FAILURE = OPEN_ERROR %FI
	    )
    ELSE
	BEGIN
	!
	! User did not specify a file type. Try .BRN first.
	!
	IF $XPO_OPEN (IOB = INPUT_IOB, FILE_SPEC = CMDBLK [NDX$T_INPUT_FILE],
	    DEFAULT = '.BRN', ATTRIBUTES = BINARY, FAILURE = 0)
	NEQ XPO$_NORMAL
	THEN
	    BEGIN
	    !
	    ! No .BRN file, try .BIX
	    !
	    $XPO_IOB_INIT (IOB = INPUT_IOB);
	    $XPO_OPEN (IOB = INPUT_IOB, FILE_SPEC = CMDBLK [NDX$T_INPUT_FILE],
		DEFAULT = '.BIX', ATTRIBUTES = BINARY
		%IF %BLISS (BLISS32) %THEN , FAILURE = OPEN_ERROR %FI
		);
	    END;
	END;

    IF .CMDBLK [NDX$V_LOG]
    THEN

%IF %BLISS (BLISS32)
%THEN						! Signal message for BLISS32

	SIGNAL (INDEX$_PROCFILE, 1, INPUT_IOB [IOB$T_RESULTANT]);

%ELSE						! Use $XPO_PUT_MSG otherwise

	$XPO_PUT_MSG (SEVERITY = SUCCESS,
	    STRING = $STR_CONCAT ('processing file ''', INPUT_IOB [IOB$T_RESULTANT], '''')); 

%FI

    IF NOT .CMDBLK [NDX$V_INPUT_CONCAT]
    THEN
	BEGIN
	!
	! Input file is not concatenated to previous input file.
	!
	! Call MAKNDX to generate the output file for the previous input file
	! if there were any index entries. MAKNDX will also re-initialize
	! the internal index and transaction pools.
	!
	MAKNDX ();

	!
	! Save resultant input file specification to be used as the related
	! file name when the next output file is created by MAKNDX.
	!
	$STR_COPY (STRING = INPUT_IOB [IOB$T_RESULTANT], TARGET = CMDBLK [NDX$T_RELATED_FILE]);
	!
	! Reset the page counter
	!
	PAGENO = 0;
	!
	! Reset transaction mapping. There are no transactions in the
	! current input stream yet.
	!
	XTN_OFFSET = 0;
	HIGHEST_XTN_OUT = 0;
	END;

    !
    ! Initialize the internal index if necessary
    !
    IF .NDXPOL EQL 0 THEN XINIT ();

    !
    ! Setup master index book identifier
    !
    BEGIN

    BIND
	DSC = CMDBLK [NDX$T_MASTER_BOOK] : $STR_DESCRIPTOR ();

    BOOKID = SAVDAT (.DSC [STR$A_POINTER], DS_X_STRING, .DSC [STR$H_LENGTH]);
    END;

    !
    ! Read file indentification record.
    !
    IF $XPO_GET (IOB = INPUT_IOB, FULLWORDS = 1) NEQ XPO$_NORMAL
    THEN
	BEGIN
	!
	! Empty input file.
	!

%IF %BLISS (BLISS32)
%THEN						! Signal error for BLISS32

	SIGNAL (INDEX$_EMPTYIN, 1, INPUT_IOB [IOB$T_RESULTANT]);

%ELSE						! Use $XPO_PUT_MSG otherwise

	$XPO_PUT_MSG (SEVERITY = WARNING,
	    STRING = $STR_CONCAT ('empty input file ''', INPUT_IOB [IOB$T_RESULTANT], ''''));

%FI

	$XPO_CLOSE (IOB = INPUT_IOB);
	RETURN;
	END;

    FILE_IDENTIFIER = .(.INPUT_IOB [IOB$A_DATA])<0, %BPVAL/2, 1>;
    INDEX_VERSION = .(.INPUT_IOB [IOB$A_DATA])<%BPVAL/2, %BPVAL/2, 1>;
    CORRECT_FORMAT = TRUE;				! Assume correct file format

    SELECTONE TRUE OF
	SET

	[.FILE_IDENTIFIER EQL BRN_FILE] :
	    BEGIN
	    !
	    ! Binary RuNoff format file (.BRN)
	    !
	    HEADING_LENGTH = 2;				! Length of record group headings

	    IF $XPO_GET (IOB = INPUT_IOB, FULLWORDS = 1) EQL XPO$_NORMAL
	    THEN
		BEGIN
		!
		! Validate .BRN format information
		!
		IF ..INPUT_IOB [IOB$A_DATA] NEQ BRN_IDENT THEN CORRECT_FORMAT = FALSE;

		END
	    ELSE
		CORRECT_FORMAT = FALSE;			! Bad input file format - no ident info

	    END;

	[(.FILE_IDENTIFIER EQL NEW_SEQUENCE) AND (.INDEX_VERSION EQL INDEX_FORMAT)] :
	    !
	    ! Input file is .BIX format. Set record group heading length.
	    !
	    HEADING_LENGTH = 1;

	[OTHERWISE] :
	    !
	    ! Invalid input file format
	    !
	    CORRECT_FORMAT = FALSE;
	TES;

    IF NOT .CORRECT_FORMAT
    THEN
	BEGIN
	!
	! Report invalid input file format and quit.
	!

%IF %BLISS (BLISS32)
%THEN						! Signal error for BLISS32

	SIGNAL (INDEX$_INVINPUT, 1, INPUT_IOB [IOB$T_RESULTANT]);

%ELSE						! Use $XPO_PUT_MSG otherwise

	$XPO_PUT_MSG (SEVERITY = WARNING,
	    STRING = $STR_CONCAT ('invalid input file format ''', INPUT_IOB [IOB$T_RESULTANT], ''''));

%FI

	$XPO_CLOSE (IOB = INPUT_IOB);
	RETURN;
	END;

    !
    ! Process the input file.
    !
    WHILE $XPO_GET (IOB = INPUT_IOB, FULLWORDS = .HEADING_LENGTH) EQL XPO$_NORMAL DO
	BEGIN

	BIND
	    GROUP_HEAD = .INPUT_IOB [IOB$A_DATA] : VECTOR;

	IF (.FILE_IDENTIFIER EQL BRN_FILE) AND (.GROUP_HEAD [0] NEQ BRN_INDEX)
	THEN
	    BEGIN
	    !
	    ! File is .BRN format but record group is not an index
	    ! record group -- skip rest of record group.
	    !
	    $XPO_GET (IOB = INPUT_IOB, FULLWORDS = .GROUP_HEAD [1]);
	    END
	ELSE
	    BEGIN

	    LOCAL
		RECORD_TYPE;

	    !
	    ! If the input file is a .BRN file, read the index record
	    ! group identifier.
	    !
	    IF .FILE_IDENTIFIER EQL BRN_FILE THEN $XPO_GET (IOB = INPUT_IOB, FULLWORDS = 1);

	    RECORD_TYPE = .(.INPUT_IOB [IOB$A_DATA])<0, %BPVAL/2>;

	    SELECTONE TRUE OF
		SET

		[.RECORD_TYPE EQL NEW_SEQUENCE] :
		    BEGIN
		    INDEX_VERSION = .(.INPUT_IOB [IOB$A_DATA])<%BPVAL/2, %BPVAL/2, 1>;

		    IF (.INDEX_VERSION NEQ INDEX_FORMAT)
		    OR (.FILE_IDENTIFIER NEQ BRN_FILE)
		    THEN
			BEGIN
			!
			! Report invalid input file format and quit.
			!

%IF %BLISS (BLISS32)
%THEN						! Signal error for BLISS32

			SIGNAL (INDEX$_INVINPUT, 1, INPUT_IOB [IOB$T_RESULTANT]);

%ELSE						! Use $XPO_PUT_MSG otherwise

			$XPO_PUT_MSG (SEVERITY = WARNING,
			    STRING = $STR_CONCAT ('invalid input file format ''', 
				INPUT_IOB [IOB$T_RESULTANT], ''''));

%FI

			$XPO_CLOSE (IOB = INPUT_IOB);
			RETURN;
			END;

		    END;

		[.RECORD_TYPE EQL INDEX_XTN] :
		    BEGIN
		    !
		    ! Index page reference transaction
		    !
		    CONFUSE_COUNT = 0;
		    $XPO_GET (IOB = INPUT_IOB, FULLWORDS = PAGE_SCT_SIZE + 1);

		    BEGIN
		    BIND
			XTN_AND_PAGE = .INPUT_IOB [IOB$A_DATA] : VECTOR,
			PAGE_REF = XTN_AND_PAGE [1] : PAGE_DEFINITION;

		    IF .XTN_AND_PAGE [0] NEQ 0
		    THEN
			BEGIN
			!
			! Process only non-zero transaction numbers
			!
			HIGHEST_XTN_OUT = .XTN_AND_PAGE [0] + .XTN_OFFSET;	! Remap transaction number
			ASGXTN (PAGE_REF, .HIGHEST_XTN_OUT);			! Store xtn in internal pool
			END;

		    END;

		    END;

		[.RECORD_TYPE EQL INDEX_ENTRY] :
		    BEGIN
		    !
		    ! Index entry record group
		    !
		    LOCAL
			DESCRIPTOR : VECTOR [3];

		    CONFUSE_COUNT = 0;
		    $XPO_GET (IOB = INPUT_IOB, FULLWORDS = 3);	! Get descriptor

		    BEGIN
		    BIND
			X = .INPUT_IOB [IOB$A_DATA] : VECTOR;

		    INCR I FROM 1 TO 3 DO
			DESCRIPTOR [.I - 1] = .X [.I - 1];	! Copy descriptor

		    END;

		    $XPO_GET (IOB = INPUT_IOB, 			! Get entry text
			FULLWORDS = CH$ALLOCATION (.DESCRIPTOR [0]));

		    IF .DESCRIPTOR [0] GTR 1200
		    THEN
			BEGIN
			!
			! Entry text is too long.
			! Tell the user and truncate it.
			!
%IF %BLISS (BLISS32)
%THEN							! Signal errors for BLISS32

			SIGNAL (INDEX$_TRUNCATED);

%ELSE							! Use $XPO_PUT_MSG otherwise

			$XPO_PUT_MSG (SEVERITY = WARNING, STRING = 'string too long - truncated');

%FI

			DESCRIPTOR [0] = 1200;
			DMPENT (.DESCRIPTOR [0], CH$PTR (.INPUT_IOB [IOB$A_DATA]));
			END;

		    !
		    ! Remap transaction number for .INDEX and .XPLUS
		    ! commands, i.e., those with non-zero transaction numbers.
		    !
		    IF .DESCRIPTOR [1] NEQ 0 THEN DESCRIPTOR [1] = .DESCRIPTOR [1] + .XTN_OFFSET;


		    IF .CMDBLK [NDX$V_MASTER] NEQ 0
		    THEN
			BEGIN
			!
			! Generating a master index
			!
			IF .CMDBLK [NDX$V_OVERRIDE]
			OR (.XPLBLK [XPL$V_VALID] AND .XPLBLK [XPL$V_MASTER])
			THEN
			    BEGIN
			    !
			    ! Override master indexing information or
			    ! this entry is a master entry.
			    !
			    ! Insert entry into pool, permuting if necessary.
			    ! Increment index entry counter.
			    !
			    PERMUT (.DESCRIPTOR [0], CH$PTR (.INPUT_IOB [IOB$A_DATA]), 
				.DESCRIPTOR [1], .DESCRIPTOR [2]);

			    INDEX_RECORDS = .INDEX_RECORDS + 1;
			    END;
			END
		    ELSE
			!
			! Not a master index
			!
			IF .CMDBLK [NDX$V_OVERRIDE]
			OR (NOT (.XPLBLK [XPL$V_VALID] AND .XPLBLK [XPL$V_MASTER]))
			THEN
			    BEGIN
			    !
			    ! Override master indexing information or
			    ! entry is not a master index entry.
			    !
			    ! Insert it into pool, permuting if necessary.
			    ! Increment index entry record counter.
			    !
			    PERMUT (.DESCRIPTOR [0], CH$PTR (.INPUT_IOB [IOB$A_DATA]), 
				.DESCRIPTOR [1], .DESCRIPTOR [2]);

			    INDEX_RECORDS = .INDEX_RECORDS + 1;
			    END;

		    !
		    ! Mark attributes block invalid.
		    !
		    XPLBLK [XPL$V_VALID] = FALSE;
		    END;

		[(.RECORD_TYPE EQL INDEX_ATTRIBUTES) AND (.FILE_IDENTIFIER EQL BRN_FILE)] :
		    BEGIN
		    !
		    ! Extended indexing attributes record group
		    !
		    LOCAL
			STR_LEN;

		    CONFUSE_COUNT = 0;

		    !
		    ! Get options flags.
		    !
		    $XPO_GET (IOB = INPUT_IOB, FULLWORDS = 1);
		    XPLBLK [XPL$V_OPTIONS] = .(.INPUT_IOB [IOB$A_DATA]);

		    IF .CMDBLK [NDX$V_PAGE_MERGE]
		    THEN
			BEGIN
			!
			! Merging adjacent page references (ala TCX)
			! ignore BEGIN-END attributes
			!
			XPLBLK [XPL$V_BEGIN] = FALSE;
			XPLBLK [XPL$V_END] = FALSE;
			END;

		    !
		    ! Get SORT string if any.
		    !
		    $XPO_GET (IOB = INPUT_IOB, FULLWORDS = 1);
		    STR_LEN = .(.INPUT_IOB [IOB$A_DATA]);

		    IF .STR_LEN NEQ 0 THEN $XPO_GET (IOB = INPUT_IOB, FULLWORDS = CH$ALLOCATION (.STR_LEN));

		    $STR_COPY (STRING = (.STR_LEN, CH$PTR (.INPUT_IOB [IOB$A_DATA])),
			TARGET = XPLBLK [XPL$T_SORT]);

		    !
		    ! Get APPEND string if any.
		    !
		    $XPO_GET (IOB = INPUT_IOB, FULLWORDS = 1);
		    STR_LEN = .(.INPUT_IOB [IOB$A_DATA]);

		    IF .STR_LEN NEQ 0 THEN $XPO_GET (IOB = INPUT_IOB, FULLWORDS = CH$ALLOCATION (.STR_LEN));

		    $STR_COPY (STRING = (.STR_LEN, CH$PTR (.INPUT_IOB [IOB$A_DATA])),
			TARGET = XPLBLK [XPL$T_APPEND]);

		    !
		    ! Attributes block now has valid information
		    !
		    XPLBLK [XPL$V_VALID] = TRUE;
		    END;

		[OTHERWISE] :
		    BEGIN
		    !
		    ! Invalid record group
		    !
		    CONFUSE_COUNT = .CONFUSE_COUNT + 1;

		    IF .CONFUSE_COUNT LEQ 5
		    THEN

%IF %BLISS (BLISS32)
%THEN						! Signal error for BLISS32

			SIGNAL (INDEX$_INVRECORD, 1, INPUT_IOB [IOB$T_RESULTANT]);

%ELSE						! Use $XPO_PUT_MSG otherwise

			$XPO_PUT_MSG (SEVERITY = WARNING,
			    STRING = $STR_CONCAT ('invalid record group type in file ''', INPUT_IOB [IOB$T_RESULTANT], ''''));

%FI

		    END;
		TES;

	    END;

	END;

    IF .INDEX_RECORDS EQL 0
    THEN

%IF %BLISS (BLISS32)
%THEN						! Signal error for BLISS32

	SIGNAL (INDEX$_NOINDEX, 1, INPUT_IOB [IOB$T_RESULTANT]);

%ELSE						! Use $XPO_PUT_MSG otherwise

	$XPO_PUT_MSG (SEVERITY = WARNING,
	    STRING = $STR_CONCAT ('no index information in file ''', INPUT_IOB [IOB$T_RESULTANT], ''''));

%FI

    IF .CMDBLK [NDX$V_LOG]
    THEN

%IF %BLISS (BLISS32)
%THEN						! Signal error for BLISS32

	SIGNAL (INDEX$_COMPLETE, 1, INPUT_IOB [IOB$T_RESULTANT]);

%ELSE						! Use $XPO_PUT_MSG otherwise

	$XPO_PUT_MSG (SEVERITY = SUCCESS,
	    STRING = $STR_CONCAT ('processing complete ''', INPUT_IOB [IOB$T_RESULTANT], ''''));

%FI

    INDEX_ENTRIES = .INDEX_ENTRIES + .INDEX_RECORDS;	! Accumulate number of index entries
    XTN_OFFSET = .HIGHEST_XTN_OUT;			! Remember last transaction number
    $XPO_CLOSE (IOB = INPUT_IOB);			! Close the input file
    END;


%SBTTL 'GLOBAL ROUTINE MAKNDX -- Make output index'

GLOBAL ROUTINE MAKNDX : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine generates an output index if any index entries
!	were processed by NDXINP.
!
!	The internal index and transaction pool space is also released
!	if necessary.
!
! FORMAL PARAMETERS:
!
!	None.
!
! IMPLICIT INPUTS:
!
!	CMDBLK		- Command line information block
!	INDEX_ENTRIES	- Number of index entries processed by NDXINP
!
! IMPLICIT OUTPUTS:
!
!	INDEX_ENTRIES	- is set to zero.
!
!	The internal index and transaction pool space is released if
!	necessary and the global pool variables are initialized.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None.
!
! SIDE EFFECTS:
!
!	None.
!--

    BEGIN

    IF (.INDEX_ENTRIES NEQ 0) AND .CMDBLK [NDX$V_OUTPUT] 
    THEN
	BEGIN
	!
	! Some index entries were processed by NDXINP and /OUTPUT specified
	!
	LOCAL
	    DEFAULT_TYPE;			! Pointer to default file type string

	SELECTONE .CMDBLK [NDX$H_FORMAT] OF
	    SET

	    [DSR]:
		DEFAULT_TYPE = RNX_FILE;	! Default type is .RNX for DSR

	    [TMS11_A, TMS11_E]:
		DEFAULT_TYPE = TMS_FILE;	! Default type is .TMS for TMS

	    [TEX]:
		DEFAULT_TYPE = TEX_FILE;	! Default type is .TEX for TEX

	    TES;

	$XPO_IOB_INIT (IOB = OUTIOB);
	$XPO_OPEN (IOB = OUTIOB,		! Open output file.
	    FILE_SPEC = CMDBLK [NDX$T_OUTPUT_FILE], DEFAULT = .DEFAULT_TYPE,
	    RELATED = CMDBLK [NDX$T_RELATED_FILE], OPTIONS = OUTPUT
	    %IF %BLISS (BLISS32) %THEN , FAILURE = OPEN_ERROR %FI
	    );

	NDXFMT ();				! Generate final output index.

	IF .CMDBLK [NDX$V_LOG]
	THEN					! Display /LOG message

%IF %BLISS (BLISS32)
%THEN						! Signal error for BLISS32

	    SIGNAL (INDEX$_CREATED, 1, OUTIOB [IOB$T_RESULTANT]);

%ELSE						! Use $XPO_PUT_MSG otherwise

	    $XPO_PUT_MSG (SEVERITY = SUCCESS,
		STRING = $STR_CONCAT ('created file ''', OUTIOB [IOB$T_RESULTANT], ''''));

%FI

	$XPO_CLOSE (IOB = OUTIOB);		! Close output file.
	END;

    IF .NDXPOL NEQ 0
    THEN
	BEGIN
	!
	! Release internal binary index pool.
	!
	FPOOL (NDXPOL);
	NDXSGE = 0;
	NDXSGF = 0;
	END;

    IF .XTNPOL NEQ 0
    THEN
	BEGIN
	!
	! Release internal transaction pool.
	!
	FPOOL (XTNPOL);
	XTNCNT = 0;
	XTNLSP = 0;
	XTNLSX = 0;
	XTNSGP = 0;
	XTNTAB = 0;
	XPAGEN = 0;
	END;

    INDEX_ENTRIES = 0;				! Reset index entry counter
    END;

END						! End of module

ELUDOM
