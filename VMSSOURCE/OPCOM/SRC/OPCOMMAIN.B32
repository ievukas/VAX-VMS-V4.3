MODULE	OPC$OPCOMMAIN	(
			 LANGUAGE (BLISS32),
			 IDENT = 'V04-000',
			 MAIN = OPCOM_MAIN
			) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:
!
!	OPCOM
!
! ABSTRACT:
!
!	This module contains the top leve logic for OPCOM, the 
!	OPerator COmunication Manager.  OPCOM will provide the
!	interface between a user and an operator on the system.
!	Specifically, this module contains the routines responsible
!	for starting OPCOM in an orderly manner, receiving requests
!	and dispatching them to the proper handler, and for the
!	orderly shutdown of OPCOM.
!
! Environment:
!
!	VAX/VMS operating system.
!
! Author:
!
!	Steven T. Jeffreys
!
! Creation date:
!
!	March 10, 1981
!
! Revision history:
!
!	V03-006	CWH3006		CW Hobbs			25-Jul-1984
!		Remove DEBUG routines to save disk space on kit.
!
!	V03-005	CWH3169		CW Hobbs			5-May-1984
!		Second pass for cluster-wide OPCOM:
!		 - Add RC25, RDRX, TU81 and MAYA microcode messages
!		 - Add conditional assembly code for OPC$INCREASE_STRESS and
!		   OPC$CHECK_POOL functions
!
!	V03-004	CWH3004		CW Hobbs			22-Sep-1983
!		Make dump conditional on a logical name OPC$DUMP_MAILBOX.
!
!	V03-003	CWH3003		CW Hobbs			16-Sep-1983
!		Add CLUMBX (connection manager) message dispatch.
!
!	V03-002	CWH3002		CW Hobbs			30-Jul-1983
!		Various and sundry things to make OPCOM distributed
!		across the cluster.
!
!	V03-001	RLRV3A1		Robert L. Rappaport	5-Apr-1982
!		Added MSG$_UDA50MVER and MSG$_DUPUNITNO.
!
!	V02-003	STJ0156		Steven T. Jeffreys	05-Feb-1982
!		Added two new mount verification messages to the
!		dispatcher table; MVCOMPLETE and MVABORTED.
!
!	V02-002	STJ0066		Steven T. Jeffreys	14-Jul-1981
!		Changed function dispatcher to recognize the mount
!		verification messages.
!
!--

BEGIN						! Start of OPCOMMAIN

LIBRARY	'SYS$LIBRARY:LIB.L32';
LIBRARY 'LIB$:OPCOMLIB';



GLOBAL ROUTINE OPCOM_MAIN : NOVALUE =

!++
! Functional description:
!
!	This is the main routine for OPCOM.  When OPCOM is
!	started, control is transfered here.  The main routine
!	will call a special initialization routine to set things
!	up, and then enter its main loop, servicing requests as
!	they arrive.
!
! Input:
!
!	None.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of OPCOM_MAIN

MACRO

	MSGTYPE	 =  0,0,16,0%,			! Message type code
	RQSTCODE = 38,0,8,0%,			! Request type code
	CLM_CODE = 39,0,8,0%;			! Request type code for cluster message

GLOBAL

	FINISHED	: LONG INITIAL (FALSE);	! Boolean used for loop control

EXTERNAL ROUTINE
	DUMP_LOG_FILE,				! Make a formatted dump in the log file
	SHARE_FAO_BUFFER,			! Run something through $FAO
	OPCOM_INIT		: NOVALUE,	! OPCOM initialization
	TIME_STAMP		: NOVALUE,	! Does periodic timestamp
	WRITE_LOG_FILE,				! Write random string to the log file
	!
	! Various message handlers for old format messages.
	!
	UNKNOWN_HANDLER		: NOVALUE,	! Unknown message type handler
	CLUMBX_HANDLER		: NOVALUE,	! Cluster mailbox messages (special format)
	DEVICE_HANDLER		: NOVALUE,	! Device online/offline messages (special format)
	TERME_HANDLER		: NOVALUE,	! Enable operator message handler
	LOGI_HANDLER		: NOVALUE,	! Init logfile message handler
	RQST_HANDLER		: NOVALUE,	! Request handler
	RPLY_HANDLER		: NOVALUE,	! Reply handler
	CNCL_HANDLER		: NOVALUE,	! Cancel handler
	STS_HANDLER		: NOVALUE,	! Status handler
	SECU_HANDLER		: NOVALUE,	! Security message handler
	!
	! The following are message handlers for the new format messages.
	!
	OPRENABLE_HANDLER	: NOVALUE,	! Operator enable handler
	LOGFILE_HANDLER		: NOVALUE,	! Logfile control handler
	REQUEST_HANDLER		: NOVALUE,	! Request handler
	REPLY_HANDLER		: NOVALUE,	! Reply handler
	CANCEL_HANDLER		: NOVALUE,	! Cancel handler
	STATUS_HANDLER		: NOVALUE,	! Status handler
	SHUTDOWN_HANDLER	: NOVALUE,	! Shutdown handler
	SECURITY_HANDLER	: NOVALUE,	! Security handler
!	DEBUG_HANDLER		: NOVALUE,	! Debug handler, comment out when not needed
	CLUSMSG_HANDLER		: NOVALUE;	! Cluster message handler

EXTERNAL

	GLOBAL_STATUS	: BITVECTOR,		! Global status bits
	OPER_MBX_CHAN	: WORD;			! Operator mailbox channel

LOCAL

	RDB		: $ref_bblock,		! RDB control structure
	IOSB		: $bblock [8],		! I/O status block
	REQUEST_BUFFER	: $bblock [OPC$K_MAXREAD], ! Request receive buffer
	REQUEST_DESC	: $desc_block,		! Request buffer descriptor
	STATUS		: LONG;

!
! Perform the necessary initialization.
!
OPCOM_INIT ();

!
! Initialize the request buffer descriptor.
!
REQUEST_DESC [DSC$B_DTYPE] = 0;
REQUEST_DESC [DSC$B_CLASS] = 0;
REQUEST_DESC [DSC$A_POINTER] = REQUEST_BUFFER;

!
! Enter the main loop.
!
WHILE NOT .FINISHED DO
    BEGIN
    !
    ! If a timestamp is pending and OPCOM is not busy with
    ! a request, then do the timestamp.
    !
    GLOBAL_STATUS [GBLSTS_K_BUSY] = FALSE;		! OPCOM is not busy
    IF .GLOBAL_STATUS [GBLSTS_K_TIMESTAMP_PENDING]
    THEN
	TIME_STAMP ();

    !
    ! Issue a read request to the operator mailbox.
    !
    IF NOT (STATUS = $QIOW(FUNC = IO$_READVBLK,
			   CHAN = .OPER_MBX_CHAN,
			   IOSB = IOSB,
			   EFN  = EFN_K_MAILBOX,
			   P1 = REQUEST_BUFFER,
			   P2 = OPC$K_MAXREAD
			 ))
    THEN
	$signal_stop (.STATUS);

    !
    ! Check the status of the read.
    !
    IF NOT (STATUS = .IOSB [0,0,16,0])
    THEN
	IF .STATUS NEQ SS$_ENDOFFILE		! A COPY to _MBA2: will produce this
	THEN
	    $signal_stop (.STATUS);

    !
    ! Since OPCOM now has a request to service, set the GBLSTS_K_BUSY bit.
    ! This serves as an interlock to prevent the asynchronous
    ! timestamp function from going off at an inappropriate time.
    !
    GLOBAL_STATUS [GBLSTS_K_BUSY] = TRUE;

    !
    ! Set the request buffer length in the descriptor.
    !
    REQUEST_DESC [DSC$W_LENGTH] = .IOSB [2,0,16,0];

    !
    ! For debugging, write the message into the log file, and flush
    !
    BEGIN
    LOCAL
	lcl_buf : $bvector [16],
	out_dsc : VECTOR [2, LONG];
    out_dsc [0] = 16;
    out_dsc [1] = lcl_buf;
    IF $trnlog (lognam=%ASCID 'OPC$DUMP_MAILBOX', rsllen=out_dsc, rslbuf=out_dsc) EQL ss$_normal
    THEN
        DUMP_LOG_FILE (REQUEST_DESC, %ASCID 'Record received in mailbox');
    END;

    !
    ! For debugging, check the cluster configuration at every mailbox read.  To put additional
    ! stress on the system, request acks from every node if the configuration has changed.  Make
    ! all this noise switchable by defining the logical name OPC$INCREASE_STRESS (presence of
    ! the name is significant, not its value).
    !
    %IF %VARIANT GTR 0				! Only include if /VARIANT specified
    %THEN
    BEGIN
    LOCAL		lcl_buf : $bvector [16], out_dsc : VECTOR [2, LONG];
    EXTERNAL		lcl_csid, nod_head : vector [2, long];
    EXTERNAL ROUTINE	clusutil_configure, clusmsg_ack_please;
    out_dsc [0] = 16; out_dsc [1] = lcl_buf;
    IF $trnlog (lognam=%ASCID 'OPC$INCREASE_STRESS', rsllen=out_dsc, rslbuf=out_dsc) EQL ss$_normal
    THEN
	BEGIN
	IF clusutil_configure ()		! If true, then a node has come or gone
	THEN
	    BEGIN
	    LOCAL	nod : $ref_bblock;
	    nod = .nod_head [0];
	    WHILE .nod NEQ nod_head [0]
	    DO
		BEGIN
		IF .nod [nod_l_node_csid] NEQ .lcl_csid
		THEN
		    BEGIN
		    nod [nod_v_ack_pend] = false;
		    CLUSMSG_ACK_PLEASE (.nod);
		    END;
		nod = .nod [nod_l_flink];
		END;
	    END;
        END;
    END;
    %FI						! End of conditionally compiled message codes.

    !
    ! For debugging, check pool for corruption.  N.B. this puts a severe load on the system at IPL 11!
    !
    %IF %VARIANT GTR 0				! Only include if /VARIANT specified
    %THEN
    BEGIN
    LOCAL		lcl_buf : $bvector [16], out_dsc : VECTOR [2, LONG];
    out_dsc [0] = 16; out_dsc [1] = lcl_buf;
    IF $trnlog (lognam=%ASCID 'OPC$CHECK_POOL', rsllen=out_dsc, rslbuf=out_dsc) EQL ss$_normal
    THEN
	BEGIN
	LOCAL
	    arglist : VECTOR [2, LONG];
	EXTERNAL ROUTINE
	    monitor_pool;
	arglist [0] = 1;
	arglist [1] = %X'1111';
	$CMKRNL (routin=monitor_pool, arglst=arglist);
        END;
    END;
    %FI						! End of conditionally compiled debugging code.

    !
    ! Dispatch the request to the proper handler.  Some messages do not come through $SNDOPR,
    ! and require special treatment.  For example, device on/offline messages are sent via a 
    ! call to EXE$SNDEVMSG, and are in a different format from most of the other known message types.
    !
    SELECTONEU .REQUEST_BUFFER [MSGTYPE] OF
	SET
	[MSG$_CLUMBX] :		CLUMBX_HANDLER (REQUEST_DESC);
	[MSG$_DEVOFFLIN] :	DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_DEVONLIN]	:	DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_DEVOFFLINX] :	DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_WRONGVOL]	:	DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_DEVWRTLCK] :	DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_MVCOMPLETE] :	DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_MVABORTED] :	DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_UDA50MVER] :	DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_DUPUNITNO] :	DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_TM78MVER] :	DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_RC25MVER] :	DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_RDRXMVER] :	DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_TU81MVER] :	DEVICE_HANDLER (REQUEST_DESC);
	[MSG$_MAYAMVER] :	DEVICE_HANDLER (REQUEST_DESC);

	[MSG$_OPRQST] :	BEGIN
			!
			! Dispatch the request to the proper handler.
			!
			CASE .REQUEST_BUFFER [RQSTCODE]
			    FROM  0  TO  OPC$_X_REQUEST_END_MARK-1  OF
			    SET
			    !
			    ! The following request types are in the old format.
			    !
			    [OPC$_RQ_TERME] :	    TERME_HANDLER (REQUEST_DESC);
			    [OPC$_RQ_LOGI] :	    LOGI_HANDLER (REQUEST_DESC);
			    [OPC$_RQ_RQST] :	    RQST_HANDLER (REQUEST_DESC);
			    [OPC$_RQ_REPLY] :	    RPLY_HANDLER (REQUEST_DESC);
			    [OPC$_RQ_CANCEL] :	    CNCL_HANDLER (REQUEST_DESC);
			    [OPC$_RQ_STATUS] :	    STS_HANDLER (REQUEST_DESC);
			    [OPC$_RQ_SECURITY] :    SECU_HANDLER (REQUEST_DESC);
			    !
			    ! The following request types are in the new format.
			    !
			    [OPC$_X_OPRENABLE] :    OPRENABLE_HANDLER (REQUEST_DESC);
			    [OPC$_X_LOGFILE] :	    LOGFILE_HANDLER (REQUEST_DESC);
			    [OPC$_X_REQUEST] :	    REQUEST_HANDLER (REQUEST_DESC);
			    [OPC$_X_REPLY] :	    REPLY_HANDLER (REQUEST_DESC);
			    [OPC$_X_CANCEL] :	    CANCEL_HANDLER (REQUEST_DESC);
			    [OPC$_X_STATUS] :	    STATUS_HANDLER (REQUEST_DESC);
			    [OPC$_X_SHUTDOWN] :	    SHUTDOWN_HANDLER (REQUEST_DESC);
			    [OPC$_X_SECURITY] :     SECURITY_HANDLER (REQUEST_DESC);
			    !
			    ! Debug handler, comment out when not necessary
			    !
			!   [OPC$_X_DEBUG] :	    DEBUG_HANDLER (REQUEST_DESC);
			    !
			    ! Requests for cluster-related messages.
			    !
			    [OPC$_X_CLUSMSG] :	    CLUSMSG_HANDLER (REQUEST_DESC);
			    !
			    ! Let the unknown message handler figure out what to do with it.
			    !
			    [INRANGE,OUTRANGE] :    UNKNOWN_HANDLER (REQUEST_DESC);
			    TES;
			END;

	[OTHERWISE] :	BEGIN
			!
			! This is an unknown message type.  Let the unknown message handler log it.
			!
			UNKNOWN_HANDLER (REQUEST_DESC);
			END;
	TES;
   END;
END;						! End of OPCOM_MAIN

END
ELUDOM						! End of OPCOMMAIN
