	.TITLE	IPCONTROL - IPL 12 INTERRUPT PROCESSOR
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:
;
;	NONPAGED VAX/VMS EXEC
;
; ABSTRACT:
;
;	THIS MODULE CONTAINS THE ROUTINE NECESSARY TO PROCESS THE IPL 12
;	INTERRUPTS.  THESE ARE GENERATED MANUALLY FROM THE CONSOLE AS A
;	LAST DITCH EFFORT TO CORRECT SOME SYSTEM MALADY BEFORE REBOOTING
;	SYSTEM.
;
; AUTHOR:
;
;	L. MARK PILANT  28-JAN-1982
;
; MODIFIED BY:
;
;	V03-010	LMP0294		L. Mark Pilant,		2-Aug-1984  15:54
;		Add the dollar sign to the list of legal characters.
;
;	V03-009	PRB0333		Paul Beck	3-May-1984  22:26
;		Fix fork block initialization for Q command.
;
;	V03-008	ACG0416		Andrew C. Goldstein,	18-Apr-1984  9:51
;		Use common I/O search routines to support cluster devices
;
;	V03-007	PRB0328		Paul Beck	9-Apr-1984  15:59
;		Add retry logic for call to CNX$CHANGE_QUORUM.
;
;	V03-006	TCM0003		Trudy C. Matthews	09-Apr-1984
;		Yet another change in RXCS/TXCS handling: use routine
;		CON$RELEASECTY to restore the state of the registers.
;
;	V03-005	PRB0325		Paul Beck	25-Mar-1984  15:59
;		Include "Q" command to recalculate cluster quorum
;
;	V03-004	TCM0002		Trudy C. Matthews	13-Dec-1983
;		New interface to CON$OWNCTY: it now returns the value to
;		restore to TXCS in R0 and the value to restore to RXCS
;		in R1.
;
;	V03-003	TCM0001		Trudy C. Matthews	16-Feb-1983
;		Set up to talk to console terminal in a CPU-dependent
;		fashion.
;
;	V03-002	LMP0024		L. Mark Pilant		23-Apr-1982  13:45
;		Correct a problem introduced by some bit shaving.
;
;	V03-001	LMP0020		L. Mark Pilant		 2-Apr-1982  15:05
;		Modify the logic so that only a device that has mount
;		verification in progess can be disabled.
;
;	V02-001	LMP0010		L. Mark Pilant		 9-Feb-1982   9:00
;		Strip parity and other garbage from incoming characters.
;
;--

	.SBTTL	USEFUL MACRO DEFINITIONS

	.MACRO	RJMP	ADDR
	JMP	ADDR			;CALLED ROUTINE DOES THE RSB
	.ENDM	RJMP

	.MACRO	CON_MSG	MESSAGE,RETURN
	MOVAB	W^MESSAGE,R2		;SET MESSAGE ADDRESS
.IF	B,	RETURN
	JSB	(R10)			;SEND THE MESSAGE
.IFF
	RJMP	(R10)			;SEND THE MESSAGE
.ENDC;	B,	RETURN
	.ENDM	CON_MSG

	.SBTTL	SYMBOL DEFINITIONS

; MACRO LIBRARY CALLS

	$CLUBDEF
	$CSBDEF
	$DCDEF
	$DDBDEF
	$DEVDEF
	$DYNDEF
	$FKBDEF
	$IOCDEF
	$IPLDEF
	$IRPDEF
	$PRDEF
	$UCBDEF
	$VCBDEF


; SPECIAL TERMINAL INPUT CHARACTERS

	IPC_C_BELL=	7		;BELL (FOR FULL BUFFER & ILLEGAL CHARS)
	IPC_C_LINFEED=	10		;LINE-FEED (ECHOED AFTER <CR>)
	IPC_C_CARRETN=	13		;CARRIAGE-RETURN
	IPC_C_CNTRLU=	21		;CONTROL-U (IGNORE THE LINE)
	IPC_C_CNTRLZ=	26		;CONTROL-Z (EXIT)
	IPC_C_SPACE=	32		;SPACE
	IPC_C_COLON=	58		;DEVICE NAME TERMINATOR
	IPC_C_CHAR_C=	67		;CHARACTER C (CANCEL MOUNT VERIFICATION)
	IPC_C_CHAR_X=	88		;CHARACTER X (ENTER XDELTA)
	IPC_C_UNDER=	95		;UNDERSCORE
	IPC_C_LOWERA=	97		;LOWER CASE A
	IPC_C_DELETE=	127		;DELETE A CHARACTER (RUBOUT)
	IPC_C_CHAR_Q=	81		;CHARACTER Q (SET CLUSTER QUORUM)

; MISCELLANEOUS CONSTANTS

	IPC_C_MAXLINSIZ=	11	;MAXIMUM INPUT LINE SIZE
					; (THIS INCLUDE STORAGE FOR THE <CR>)

; LOCAL STORAGE OFFSETS

	$DEFINI	IPC

	$DEF	IPC_C_START
	$DEF	IPC_W_INPSIZE	.BLKW	1	;INPUT LINE SIZE IN BYTES
	$DEF	IPC_T_INPLINE	.BLKB	IPC_C_MAXLINSIZ	;STORAGE FOR THE TEXT
	$DEF	IPC_Q_DEVICE	.BLKQ	1	;DEVICE DESCRIPTOR
	$DEF	IPC_B_FLAGS	.BLKB	1	;USEFUL FLAGS
	_VIELD	IPC,0,<-		;DEFINE FLAG BITS
		<DELETE,,M>,-		;DELETE CHARACTER SEEN
		<NEWLINE,,M>,-		;STARTING A NEW LINE
		<CNTRLZ,,M>,-		;CONTROL-Z (EXIT) SEEN
		>
	$DEF	IPC_L_OLDGETNXT	.BLKL	1	;PREVIOUS CHAR INPUT ROUTINE

	$DEF	IPC_L_SAVRXCS	.BLKL	1	;SAVE ORIGINAL RXCS
	$DEF	IPC_L_SAVTXCS	.BLKL	1	;SAVE ORIGINAL TXCS
	$DEF	IPC_B_PAD	.BLKB	4-<<.-IPC_C_START>&7>	;LONGWORD GRANULARITY
	$DEF	IPC_C_LENGTH		;LENGTH OF LOCAL STORAGE

	$DEFEND	IPC

	.SBTTL	ERROR MESSAGES AND MISC STRINGS

	.PSECT	WMOUNTVERMSG

IPC_ILLCOMMAND:
	.ASCIZ	\Illegal command\<13><10>
IPC_ILLDEVICE:
	.ASCIZ	\Illegal device\<13><10>
IPC_NOMNTVER:
	.ASCIZ	\Mount verification not in progress\<13><10>
IPC_NOCLUSTER:
	.ASCIZ	\Node not in VAXcluster\<13><10>

IPC_CRLFSTR:
	.BYTE	IPC_C_CARRETN,IPC_C_LINFEED,0	;<CR>,<LF>,0

IPC_PROMPT:
	.ASCIZ	\IPC> \

	.SBTTL	CHARACTER VALIDITY TABLES

IPC_V_LEGAL:
	.LONG	^X04202000,-		;<CR>,<^U>,<^Z>
		^X07FF0011,-		;<SP>,<$>,<0-9>,<:>
		^X87FFFFFE,-		;<A-Z>,<_>
		^X87FFFFFE		;<a-z>,<RUB>
IPC_V_ARROW:
	.LONG	^XFFFFDB7F,0,0,0	;<BEL>,<LF>,<CR>


	.SBTTL	COMMAND INTERPRETER AND DISPATCHER

;++
; EXE$IPCONTROL - IPL 12 (DECIMAL) INTERRUPT HANDLER
;
; THIS MODULE IS CALLED WHEN AN IPL 12 INTERRUPT OCCURS.  THIS IS NORMALLY
; INVOKED FROM THE CONSOLE WHEN THE SYSTEM IS IN SOME DEAD LOCK CONDITION.
;
; INPUTS:
;
;	AN INPUT COMMAND LINE IS ACCEPTED FROM THE CONSOLE FOR ACTION.
;
; OUTPUTS:
;
;	THE APPROPRIATE ACTION IS TAKEN BASED UPON THE CONSOLE INPUT.
;	THIS IS:
;
;	    1)	CLEAR MOUNT VERIFICATION ON A SPECIFIED DEVICE
;	    2)	TRANSFER CONTROL TO XDELTA
;	    3)	REDUCE CLUSTER QUORUM
;	    4)	EXIT (DISMISS THE IPL 12 INTERRUPT)
;
;--

	.PSECT	WIONONPAGED,LONG

EXE$IPCONTROL::
	PUSHR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>	;SAVE ALL REGS
	MOVAB	-IPC_C_LENGTH(SP),SP	;MAKE ROOM FOR LOCAL STORAGE
	MOVL	SP,R11			;SAVE ADDRESS OF LOCAL STORAGE BLOCK
	MOVAB	W^IPC_OUTPUTZ,R10	;SET ADDRESS OF .ASCIZ OUTPUT ROUTINE
10$:	JSB	CON$OWNCTY		;SET UP CONSOLE TERMINAL REGISTERS
	MOVL	R0,IPC_L_SAVTXCS(R11)	;VALUE TO RESTORE TO TXCS
	MOVL	R1,IPC_L_SAVRXCS(R11)	;VALUE TO RESTORE TO RXCS
	MOVAB	IPC_W_INPSIZE(R11),R6	;SET ADDRESS OF INPUT STRING SIZE
	MOVAB	IPC_T_INPLINE(R11),R7	;SET ADDRESS OF INPUT COMMAND BUFFER
	MOVAB	IPC_B_FLAGS(R11),R8	;SET ADDRESS OF THE FLAG BYTE
	CON_MSG	IPC_PROMPT		;ISSUE A PROMPT
	BSBW	IPC_GETLINE		;GET A COMMAND LINE FROM THE CONSOLE
	BBC	#IPC_V_CNTRLZ,(R8),15$	;XFER IF NO CONTROL-Z SEEN
	MOVAB	IPC_C_LENGTH(SP),SP	;ELSE CLEAN THE STACK
	BSBB	IPC_ENABLE		;GO RE-ENABLE THE CONSOLE
	POPR	#^M<R0,R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>	;RESTORE REGS
	REI				;DISMISS THE INTERRUPT
15$:	TSTW	(R6)			;ANYTHING TYPED?
	BEQL	10$			;XFER IF NOT...RE-ISSUE THE PROMPT
20$:	CMPB	(R7),#IPC_C_CHAR_C	;ELSE CHECK FOR CANCEL
	BNEQ	30$			;XFER IF NOT
	BSBB	IPC_CANCEL		;ELSE GO CANCEL MOUNT VERIFICATION
	BRB	10$			;TRY FOR ANOTHER COMMAND
30$:	CMPB	(R7),#IPC_C_CHAR_X	;XFER TO XDELTA?
	BNEQ	40$			;XFER IF NOT
	BSBB	IPC_ENABLE		;GO RE-ENABLE THE CONSOLE
	BSBW	W^INI$BRK		;ELSE CAUSE XDELTA BREAKPOINT
	BRB	10$			;TRY FOR ANOTHER COMMAND
40$:	CMPB	(R7),#IPC_C_CHAR_Q	;REDUCE CLUSTER QUORUM?
	BNEQ	50$			;XFER IF NOT
	MOVL	G^CLU$GL_CLUB,R0	;ARE WE IN A CLUSTER?
	BEQL	42$			;IF NEQ, YES
	MOVL	CLUB$L_LOCAL_CSB(R0),R0	;GET LOCAL NODE'S STATUS
	BBS	#CSB$V_MEMBER,CSB$L_STATUS(R0),45$ ;MAKE SURE WE'RE ACTIVE
42$:	CON_MSG	IPC_NOCLUSTER		;REPORT ERROR: NOT IN CLUSTER
	BRB	10$			;TRY FOR ANOTHER COMMAND
45$:	BSBW	IPC_FORK_QUORUM		;FORK DOWN TO SYNCH TO REDUCE QUORUM
	BRB	10$			;TRY FOR ANOTHER COMMAND

; ILLEGAL COMMAND GIVEN

50$:	CON_MSG	IPC_ILLCOMMAND		;ISSUE AN ERROR MESSAGE
	BRW	10$			;GO TRY FOR ANOTHER

; LOCAL ROUTINE TO RE-ENABLE THE CONSOLE FOR INTERRUPTS

IPC_ENABLE:
	PUSHR	#^M<R0,R1>		;SAVE REGISTERS
	MOVL	IPC_L_SAVTXCS(R11),R0	;TO BE RESTORED TO TXCS
	MOVL	IPC_L_SAVRXCS(R11),R1	;TO BE RESTORED TO RXCS
	JSB	CON$RELEASECTY		;RESTORE CONSOLE CTY STATE
	POPR	#^M<R0,R1>		;RESTORE REGISTERS
	RSB				;RETURN TO CALLER

	.SBTTL	CANCEL A PENDING MOUNT VERIFICATION

;++
; IPC_CANCEL - DISABLE MOUNT VERIFICATION IF IN PROGRESS
;
; THIS ROUTINE DISABLES MOUNT VERIFICATION IF IT IS IN PROGRESS.  THIS IS
; DEFINED AS BEING IN THE STATE IN WHICH MOUNT VERIFICATION IS ENABLED
; AND EITHER THE DEVICE UCB HAS THE MOUNT VERIFICATION IN PROGRESS STATUS
; BIT SET OR THE IRP AT THE HEAD OF THE DEVICE IRP QUEUE HAS THE MOUNT
; VERIFICATION STATUS BIT SET.
;
; INPUTS:
;
;	R7 - ADDRESS OF THE CONSOLE INPUT LINE BUFFER
;
; OUTPUTS:
;
;	    1)	THE MOUNT VERFICATION BIT IS CLEARED, OR
;	    2)	A WARNING MESSAGE IS ISSUED
;
;--

IPC_CANCEL:
	MOVL	R7,R0			;SET ADDRESS OF COMMAND LINE
	TSTB	(R0)+			;SKIP OVER COMMAND CHARACTER
	CMPB	(R0)+,#^A/ /		;CHECK FOR CORRECT SEPARATOR
	BEQL	10$			;XFER IF CORRECT
	CON_MSG	IPC_ILLCOMMAND,RETURN	;ISSUE MESSAGE AND RETURN
10$:	CMPB	(R0)+,#IPC_C_UNDER	;ELSE CHECK FOR AN UNDERSCORE
	BEQL	10$			;XFER IF THERE IS ONE
	DECL	R0			;ELSE BACK UP OVER NON-UNDERSCORE
	CLRL	IPC_Q_DEVICE(R11)	;RESET DEVICE NAME SIZE
	MOVL	R0,IPC_Q_DEVICE+4(R11)	;SET STARTING ADDRESS OF DEVICE NAME
20$:	CMPB	(R0),#IPC_C_CARRETN	;END OF THE STRING?
	BEQL	30$			;XFER IF SO
	CMPB	(R0)+,#IPC_C_COLON	;ALTERNATE TERMINATOR?
	BEQL	30$			;XFER IF SO
	INCW	IPC_Q_DEVICE(R11)	;ELSE COUNT ONE MORE CHARACTER
	BRB	20$			;GO TRY THE NEXT CHARACTER

; FIND GENERIC DEVICE NAME (WITH CONTROLLER) AND UNIT NUMBER (IN BINARY)

30$:	MOVQ	R10,-(SP)		;SAVE R10 & R11 THROUGH SEARCH CALL
	MOVQ	IPC_Q_DEVICE(R11),R8	;GET DEVICE NAME DESCRIPTOR
	MOVQ	#IOC$M_PHY!IOC$M_ANY,R10 ;PHYSICAL SEARCH, NO AVAILABILITY CHECKS
					;LKSB (R11) = 0
	BSBW	IOC$PARSDEVNAM		;PARSE THE SUPPLIED DEVICE NAME
	BLBC	R0,40$			;BRANCH OUT ON ERROR
	BSBW	IOC$SEARCHINT		;SEARCH THE I/O DATABASE
40$:	MOVQ	(SP)+,R10		;RESTORE R10 & R11
	BLBC	R0,70$			;OUT ON ERROR
	CMPB	UCB$B_DEVCLASS(R5),#DC$_DISK	;IS DEVICE A DISK?
	BNEQ	70$			;BRANCH IF NOT
50$:	BBC	#UCB$V_MNTVERIP,UCB$W_STS(R5),80$ ;BRANCH IF NOT IN PROGRESS
60$:	MOVL	UCB$L_VCB(R5),R2	;GET VCB ADDRESS
	BICB2	#1@VCB$V_MOUNTVER,VCB$B_STATUS2(R2)	;ZAP MOUNT VERIFICATION
	RSB				;RETURN NOW

70$:	CON_MSG	IPC_ILLDEVICE,RETURN	;ELSE ISSUE MESSAGE AND RETURN
80$:	CON_MSG	IPC_NOMNTVER,RETURN	;ELSE ISSUE ERROR AND RETURN

	.SBTTL	COMMAND LINE INPUT ROUTINE

;++
;
; IPC_GETLINE - GET A LINE OF INPUT FROM THE CONSOLE
;
; THIS ROUTINE INPUTS A LINE FROM THE CONSOLE. IT IGNORES LEADING SPACES,
; COMPRESSES MULTIPLE SPACES TO A SINGLE SPACE, CONVERTS LOWER CASE TO UPPER
; CASE, HANDLES CHARACTER (RUBOUT) AND LINE (CONTROL-U) DELETION, AND CHECKS
; THE LEGALITY OF ANY CHARACTER RECEIVED.
;
; INPUTS:
;
;	R6 - ADDRESS OF THE INPUT LINE SIZE STORAGE
;	R7 - ADDRESS OF THE INPUT LINE BUFFER
;	R11 - ADDRESS OF THE LOCAL STORAGE AREA
;
; OUTPUTS:
;
;	IPC_W_INPSIZE(R11) - SIZE OF USER INPUT LINE AFTER COMPRESSION
;	IPC_T_INPLINE(R11) - STORAGE FOR THE CONSOLE INPUT
;
;	R0,R1,R2, AND R8 ARE DESTROYED
;
;--

IPC_GETLINE:
	CLRB	(R8)			;RESET ALL FLAGS
	MOVL	R7,R2			;COPY BUFFER ADDRESS
10$:	CLRW	(R6)			;RESET INPUT LINE SIZE
	BISB2	#IPC_M_NEWLINE,(R8)	;NEW LINE ONLY USEFUL FLAG
20$:	MFPR	#PR$_RXCS,R0		;GET DEVICE STATUS
	BBC	#7,R0,20$		;XFER IF NOT READY
	MFPR	#PR$_RXDB,R0		;ELSE GET THE CHARACTER
	BITW	#^XFF00,R0		;ERROR OF NOT CONSOLE INPUT?
	BNEQ	20$			;YES, IGNORE
	BICB2	#^X80,R0		;ZAP PARITY BIT IF ANY
	BBC	R0,W^IPC_V_LEGAL,70$	;CHECK LEGALITY
	CMPB	R0,#IPC_C_DELETE	;CHECK FOR CHARACTER DELETE
	BNEQ	35$			;XFER IF NOT
	BBS	#IPC_V_NEWLINE,(R8),20$	;IGNORE IF NOTHING THERE
	BBSS	#IPC_V_DELETE,(R8),30$	;XFER IF HERE ONCE ALREADY
	MOVZBL	#^A/\/,R0		;SET DELIMITER
	BSBB	IPC_OUTCHR		;TYPE IT OUT
30$:	DECW	(R6)			;ANYTHING TO DELETE?
	BLSS	10$			;XFER IF NOT...SET NEW LINE
	MOVZBL	-(R2),R0		;GET CHARACTER
	BSBB	IPC_OUTCHR		;TYPE IT OUT
	BRB	20$			;GET NEXT CHARACTER FROM THE CONSOLE
35$:	CMPB	R0,#IPC_C_CNTRLZ	;END OF THE LINE?
	BNEQ	40$			;XFER IF NOT
	BISB2	#IPC_M_CNTRLZ,(R8)	;ELSE NOTE IT
	BRB	45$			;GO FINISH UP
40$:	CMPB	R0,#IPC_C_CNTRLU	;DELETE ENTIRE LINE?
	BNEQ	50$			;XFER IF NOT
45$:	BSBB	IPC_OUTCHR		;ECHO ^U
	BSBB	IPC_CRLF		;NEW LINE
	CLRW	(R6)			;NOTHING THERE (FORCE NEW PROMPT)
	RSB				;RETURN TO MAIN ROUTINE
50$:	CMPB	R0,#IPC_C_SPACE		;SPACE CHARACTER?
	BNEQ	60$			;XFER IF NOT
	BBS	#IPC_V_NEWLINE,(R8),20$	;XFER IF LEADING SPACE
	CMPB	-1(R2),#IPC_C_SPACE	;PREVIOUS CHARACTER A SPACE?
	BEQL	20$			;IGNORE IF SO
60$:	CMPW	(R6),#IPC_C_MAXLINSIZ	;TOO MANY CHARACTERS?
	BLSS	80$			;XFER IF NOT
70$:	MOVZBL	#IPC_C_BELL,R0		;ELSE SET NEW CHARACTER
	BSBB	IPC_OUTCHR		;LET USER KNOW
	BRB	20$			;GO GET THE NEXT CHARACTER
80$:	CMPB	R0,#IPC_C_LOWERA	;LOWER CASE CHARACTER?
	BLSS	90$			;XFER IF NOT
	BICB2	#^X20,R0		;ELSE CONVERT TO UPPER CASE
90$:	BBC	#IPC_V_DELETE,(R8),100$	;FINISH OUT DELETE STRING?
	PUSHR	#^M<R0>			;YES, SAVE CURRENT CHARACTER
	MOVZBL	#^A/\/,R0		;SET TERMINATOR
	BSBB	IPC_OUTCHR		;TYPE IT OUT
	POPR	#^M<R0>			;RESTORE ORIGINAL CHARACTER
100$:	MOVB	R0,(R2)+		;SAVE THE CHARACTER
	BICB2	#IPC_M_NEWLINE,(R8)	;NO LONGER EMPTY LINE
	BSBB	IPC_OUTCHR		;TYPE OUT THE CHARACTER
	CMPB	R0,#IPC_C_CARRETN	;END OF THE LINE?
	BNEQ	110$			;XFER IF MORE TO COME
	MOVZBL	#IPC_C_LINFEED,R0	;ELSE FOLLOW WITH A <LF>
	BSBB	IPC_OUTCHR
	RSB				;RETURN TO CALLER
110$:	INCW	(R6)			;ONE MORE CHARACTER
	BRW	20$			;GO GET ANOTHER

	.SBTTL	MISCELLANEOUS CONSOLE OUTPUT ROUTINES

;++
;
; IPC_OUTCHR - OUTPUT A SINGLE CHARACTER
;
; THIS ROUTINE OUTPUTS A SINGLE CHARACTER TO THE CONSOLE.  IF IS A SPECIAL
; ACTION CONTROL CHARACTER (CR, BELL, OR LF) THEN IT IS TYPED DIRECTLY.
; OTHERWISE IT IS PRECEEDED BY AN UP-ARROW (^).
;
; INPUTS:
;
;	R0 - CHARACTER TO TYPE
;
; OUTPUTS:
;
;	NONE
;
;	R1 DESTROYED
;
;--

IPC_OUTCHR:
	PUSHL	R0			;SAVE THE CHARACTER
	BBC	(SP),W^IPC_V_ARROW,20$	;PRECEED WITH AN UP ARROW?
10$:	MFPR	#PR$_TXCS,R1		;YES, GET CONSOLE STATUS
	BBC	#7,R1,10$		;XFER IF NOT READY
	MTPR	#^A\^\,#PR$_TXDB	;ELSE TYPE THE UP ARROW
	BISB2	#^X40,(SP)		;CONVERT TO A PRINTABLE CHARACTER
20$:	MFPR	#PR$_TXCS,R1		;GET DEVICE STATUS
	BBC	#7,R1,20$		;XFER IF NOT READY
	MTPR	(SP)+,#PR$_TXDB		;ELSE OUTPUT THE CHARACTER
	RSB				;RETURN TO CALLER

;--
;
; IPC_CRLF - OUTPUT A <CR,LF> SEQUENCE
;
; THIS ROUTINE OUTPUTS A <CR,LF> SEQUENCE TO THE CONSOLE.  IT FALLS THROUGH
; TO THE STRING OUTPUT ROUTINE TO AVOID THE UNNEEDED SUBROUTINE CALL AND RETURN.
; (THE RETURN IS DONE BY THE STRING OUTPUT ROUTINE.)
;
; INPUTS:
;
;	NONE
;
; OUTPUTS:
;
;	NONE
;
;--

IPC_CRLF:
	MOVAB	W^IPC_CRLFSTR,R2	;SET MESSAGE ADDRESS
					;FALL THROUGH INTO STRING ROUTINE

;++
;
; IPC_OUTPUTZ - TYPE OUT AN .ASCIZ STRING ON THE CONSOLE
;
; THIS ROUTINE TYPES OUT A ZERO TERMINATED STRING ON THE CONSOLE.
;
; INPUTS:
;
;	R2 - ADDRESS OF THE STRING TO TYPE
;
; OUTPUTS:
;
;	NONE
;
;--

IPC_OUTPUTZ:
	MOVZBL	(R2)+,R0		;GET A CHARACTER
	BEQL	10$			;XFER WHEN DONE
	BSBB	IPC_OUTCHR		;ELSE TYPE OUT THE CHARACTER
	BRB	IPC_OUTPUTZ		;GO GET THE NEXT
10$:	RSB				;RETURN WHEN DONE


;++
;
; IPC_FORK_QUORUM
;
; THIS ROUTINE QUEUES A FORK TO IPL$_SYNCH IN ORDER TO SYNCHRONIZE WITH
; THE CLUSTER CONNECTION MANAGER. THE FORK ROUTINE REQUESTS A RECALCULATION
; OF DYNAMIC QUORUM BASED ON THE CURRENT CLUSTER CONFIGURATION. THIS IS DONE
; WHEN THE CLUSTER IS HUNG DUE TO LACK OF QUORUM BECAUSE A CRITICAL NODE HAS
; CRASHED AND CANNOT BE REBOOTED.
;
; INPUTS:
;
;	NONE
;
; OUTPUTS:
;
;	NONE
;
;--
	ASSUME	FKB$B_TYPE EQ FKB$W_SIZE+2
	ASSUME	FKB$B_FIPL EQ FKB$W_SIZE+3
FKB_INIT:					;INITIALIZATION FOR FORK BLOCK
	.WORD	FKB$K_LENGTH			; FKB$W_SIZE
	.BYTE	DYN$C_FRK			; FKB$B_TYPE
	.BYTE	IPL$_SYNCH			; FKB$B_FIPL

IPC_FORK_QUORUM:
;
; ALLOCATE A FORK BLOCK FROM NONPAGED POOL. INITIALIZE IT.
;
	MOVL	#FKB$K_LENGTH,R1		;LENGTH OF FORK BLOCK
	JSB	G^EXE$ALONONPAGED		;GET THE BLOCK
	BLBC	R0,10$				;IF LBC, DIDN'T GET IT.
	MOVL	R2,R5				;PUT IT WHERE IT BELONGS
	MOVL	FKB_INIT,FKB$W_SIZE(R5)		;INIT SIZE, TYPE, FIPL
;
; FORK DOWN TO IPL$_SYNCH ...
;
	FORK					;QUEUE FORK TO IPL$_SYNCH
						;AND RETURN TO CALLER
;
; AT THIS STAGE, WE ARE EXECUTING IN THE FORK AT IPL SYNCH.
;
5$:	PUSHL	R5				;SAVE FORK BLOCK POINTER
	CLRL	R1				;QUORUM=0 MEANS YOU FIGURE IT OUT.
	JSB	G^CNX$CHANGE_QUORUM		;CALL CONNECTION MANAGER
	POPL	R5				;RESTORE FORK BLOCK POINTER
;
; IF WE GET ANY ERROR RETURNED, WAIT ONE SECOND AND RETRY.
; CONNECTION MANAGER CANNOT ALWAYS DO THIS THE FIRST TIME IT TRIES.
;
	BLBS	R0,10$				;LBS MEANS IT WORKED
	FORK_WAIT				;WAIT ONE SECOND
	BRB	5$				;TRY AGAIN.
						;EVENTUALLY IT WILL WORK (SEZ HERE)

10$:	MOVL	R5,R0				;COPY FORK BLOCK ADDRESS
	JSB	G^EXE$DEANONPAGED		;DEALLOCATE THE FORK BLOCK
	RSB					;DONE

	.END
