MODULE listing		(IDENT='V04-000',
			ADDRESSING_MODE(EXTERNAL=GENERAL))
= BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! Facility:	Command Definition Utility, Listing Generation
!
! Abstract:	This module is responsible for generating a listing of the
!		CLD files we are compiling.  All files are listed in one
!		listing file, with headings, line numbers, and error messages.
!
! Environment:	Standard CDU environment.
!
! Author:	Paul C. Anagnostopoulos
! Creation:	1 December 1982
!
! Modifications:
!--


library 'sys$library:lib';
require 'cdureq';

!	T A B L E   O F   C O N T E N T S
!	---------   ---   ---------------

forward routine
	cdu$prepare_listing_file: novalue,
	cdu$eject_listing_page: novalue,
	cdu$report_listing_line: novalue,
	cdu$report_listing_trailer: novalue;


!	E X T E R N A L   R E F E R E N C E S
!	---------------   -------------------

external routine
	cdu$report_listing_heading2,
	cdu$report_rms_error,
	cli$get_value,
	cli$present,
	lib$lp_lines,
	str$trim;

external
	cdu$facility_string: descriptor,
	cdu$gl_cld_errors: long;

$shr_msgdef(cdu,17,local,
	(openout,severe),
	(writeerr,error)
	);

!	L I S T I N G   F I L E   C O N T R O L   B L O C K S
!	-------------   -------   -------------   -----------

! The following items define the RMS control blocks needed to create and
! generate the listing file.

own
	listing_nam: $nam(
				),

	dbuffer(listing_spec,nam$c_maxrss),
	listing_fab: $fab(
				dnm='.LIS',
				fna=listing_spec+8,
				fns=%allocation(listing_spec)-8,
				fac=put,
				fop=<sqo,nam,ofp>,
				nam=listing_nam,
				org=seq,
				rat=cr,
				rfm=var
				),

	listing_rab: $rab(
				fab=listing_fab,
				rac=seq,
				rop=wbh
				);

!	L I S T I N G   C O N T R O L
!	-------------   -------------

! The following items keep track of the page number and the line count within
! a page.

own
	page_number: long,
	line_count: long;

!++
! Description:	This routine is called to prepare the listing file for the
!		next CLD file listing.
!
! Parameters:	cld_fab		By reference, the FAB for the new CLD file.
!
! Returns:	Nothing.
!
! Notes:	The listing file is created on the first call.
!--

GLOBAL ROUTINE cdu$prepare_listing_file(cld_fab: pointer)	: novalue
= BEGIN

local
	status: long;


! Determine if we are to generate a listing file.

if cli$present(dtext('LISTING')) then (

	! If we have not already created the listing file, do so.

	if .listing_fab[fab$w_ifi] eqlu 0 then (

		! Get any value specified on the listing qualifier to use as
		! the spec for the listing file.

		cli$get_value(dtext('LISTING'),listing_spec);

		! Use the CLD file NAM block as the related NAM block for our
		! listing file.

		listing_nam[nam$l_rlf] = .cld_fab[fab$l_nam];

		! Create and connect to the listing file.

		status = $create(fab=listing_fab);
		if .status then (
			status = $connect(rab=listing_rab);
			if not .status then
				cdu$report_rms_error(msg(cdu$_openout),listing_rab);
		) else
			cdu$report_rms_error(msg(cdu$_openout),listing_fab);
	);

	! Prepare for a new listing by resetting the page number and
	! ejecting the page.

	page_number = 0;
	cdu$eject_listing_page();
);

return;

END;

!++
! Description:	This routine is called to eject the page in the listing file.
!		It produces a nice set of heading lines at the top of the page.
!
! Parameters:	None.
!
! Returns:	Nothing.
!
! Notes:
!--

GLOBAL ROUTINE cdu$eject_listing_page		: novalue
= BEGIN


! Increment the page number and reset the line count for the new page.

increment(page_number);
line_count = lib$lp_lines() - 5;

! Generate a form feed.

cdu$report_listing_line(msg(cdu$_anything),nobabble+1,dtext(%char(FF)));

! Generate a line containing the date and time, utility name, and page number.

cdu$report_listing_line(msg(cdu$_heading1),nobabble+3,0,cdu$facility_string,.page_number);

! Generate a line containing information about the CLD file we are compiling.
! It's easier to just call a routine in the LEXICAL module.

cdu$report_listing_heading2();

! Put out two blank lines.

cdu$report_listing_line(msg(cdu$_anything),nobabble+1,dtext(''));
cdu$report_listing_line(msg(cdu$_anything),nobabble+1,dtext(''));

return;

END;

!++
! Description:	This routine is called to generate a line in the listing file.
!		The line is created using $FAO and written into the listing
!		file without any other manipulation.
!
! Parameters:	A standard $PUTMSG argument list.
!
! Returns:	Nothing.
!
! Notes:
!--

GLOBAL ROUTINE cdu$report_listing_line(message: long,
				       fao_count: word,
				       fao1: long)		: novalue
= BEGIN

builtin
	argptr;

! The following little routine is the action routine for $PUTMSG.  It
! receives a formatted line, which it writes into the listing file.

ROUTINE write_line(line: ref descriptor)
= BEGIN

local
	status: long;

listing_rab[rab$w_rsz] = .line[len];
listing_rab[rab$l_rbf] = .line[ptr];
status = $put(rab=listing_rab);
if not .status then
	cdu$report_rms_error(msg(cdu$_writeerr),listing_rab);

return false;

END;


! If a listing file is not being generated, just return.

if .listing_fab[fab$w_ifi] eqlu 0 then
	return;

! If there are no lines left on the current page, then eject it.

if .line_count eqlu 0 then
	cdu$eject_listing_page();

! Use $PUTMSG to format the message lines.  It will call our action routine
! to write them into the listing file.

$putmsg(msgvec=argptr(),
	actrtn=write_line);

! Account for the current line.

decrement(line_count);
return;

END;

!++
! Description:	This routine is called after a CLD file has been completely
!		listed.  It generates a nice little trailer in the listing
!		file, which includes the error count and the command line
!		that invoked the CDU.
!
! Parameters:	None.
!
! Returns:	Nothing.
!
! Notes:
!--

GLOBAL ROUTINE cdu$report_listing_trailer		: novalue
= BEGIN


! Skip down a couple of lines and report the error count, unless it's zero.

cdu$report_listing_line(msg(cdu$_anything),nobabble+1,dtext(''));
if .cdu$gl_cld_errors nequ 0 then (
	cdu$report_listing_line(msg(cdu$_anything),nobabble+1,dtext(''));
	cdu$report_listing_line(msg(cdu$_errorcount),nobabble+1,.cdu$gl_cld_errors);
);

! Skip down another line and report the command line.

cdu$report_listing_line(msg(cdu$_anything),nobabble+1,dtext(''));
with_dbuffer(command_line,1024,
	cli$get_value(dtext('$LINE'),command_line);
	str$trim(command_line,command_line,command_line);
	cdu$report_listing_line(msg(cdu$_commandline),nobabble+1,command_line);
);

return;

END;

END
ELUDOM
