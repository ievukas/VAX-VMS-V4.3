	.TITLE	BAS$VECTOR - Entry vectors for BASRTL.EXE
	.IDENT	/1-005/			; File: BASVECTOR.MAR Edit: MDL1005

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Run-Time Library - BASIC Language Support
;
; ABSTRACT:
;
;	This module contains the entry vector definitions for the
;	VAX-11 Run-Time Library shareable image BASRTL.EXE
;
; ENVIRONMENT: User mode, AST Reentrant
;
; AUTHOR: Steven B. Lionel, CREATION DATE: 29-October-1982
;
; MODIFIED BY:
;
; 1-001	- Original. SBL 29-October-1982
; 1-002 - add new vectored entry points.  MDL 19-May-1983
; 1-003 - add entry points overlooked in edit 1-002.  MDL 25-May-1983
; 1-004 - add BAS$ANSI_PRINT.  MDL 18-Aug-1983
; 1-005 - BAS$MOVE_TO is an alias for BAS$MOVE_BEG, not _END.  MDL 14-Sep-1983
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
;	NONE
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL		; Force all external symbols to be declared
;
; MACROS:
;

;+
; Macro to define an entry vector for a CALL entry point
;-

	.MACRO	VCALL	NAME, ALTMSK
	.EXTRN		NAME
	.TRANSFER	NAME
	.IF B ALTMSK
	.MASK		NAME
	.IFF
	.MASK		ALTMSK
	.ENDC
	JMP		NAME+2
	.ENDM

;+
; Macro to define an entry vector for a JSB entry point
;-

	.MACRO	VJSB	NAME
	.EXTRN		NAME
	.TRANSFER	NAME
	JMP		NAME
	.BLKB		2
	.ENDM

;+
; Macro to define an entry vector for a condition handler whose actual
; routine address has a different name from the vector entry.
;-

	.MACRO	VHANDL	NAME, INTNAME
	.EXTRN		INTNAME
	.TRANSFER	NAME
NAME::
	.MASK		INTNAME
	JMP		INTNAME+2
	.ENDM

;+
; Macro to define an alias for the next vectored entry point
;-

	.MACRO	ALIAS	NAME
	.TRANSFER	NAME
	.ENDM


;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT $BAS$VECTOR PIC, USR, CON, REL, LCL, SHR, -
			   EXE, RD, NOWRT, LONG


	.SBTTL	BASRTL Vector

;+
; Define vectored entry points for the BASIC Language Support procedures
; by module in alphabetical order.
;
; Any additions to this file should be reflected in
; COM$:BASRTLVEC.DAT.  All new entry points must be appended to the end
; of the list.  NEVER change existing entries unless you are sure that
; what you do won't break existing programs.
;-

; Module BAS$$CB

	VJSB	BAS$$CB_GET
	VJSB	BAS$$CB_POP
	VJSB	BAS$$CB_PUSH
	VCALL	BAS$$NEXT_LUN

; Module BAS$$EXIT_HANDL

	VCALL	BAS$$CLOSE_ALL

; Module BAS$$FOR_INT

	VCALL	BAS$$FORMAT_INT

; Module BAS$$OPEN_ZERO

	VCALL	BAS$$OPEN_ZERO

; Module BAS$$REC_PROC

	VCALL	BAS$$BLNK_LINE
	VCALL	BAS$$RECOU_INIT
	VJSB	BAS$$REC_WSL1
	VCALL	BAS$RECOUNT
	VCALL	BAS$WAIT

; Module BAS$$SIGNAL_IO

	VCALL	BAS$$SIGNAL_IO
	VCALL	BAS$$STOP_IO
	VCALL	BAS$$STOP_RMS

; Module BAS$$UDF_RL

	VCALL	BAS$$UDF_RL1

; Module BAS$$UDF_WL

	VCALL	BAS$$UDF_WL1

; Module BAS$BUFSIZ

	VCALL	BAS$BUFSIZ

; Module BAS$CANTYPAHEAD

	VCALL	BAS$CANTYPAHEAD

; Module BAS$CCPOS

	VCALL	BAS$CCPOS

; Module BAS$CHR

	VCALL	BAS$CHR

; Module BAS$CLOSE

	VCALL	BAS$CLOSE

; Module BAS$CMP_APPROX

	VCALL	BAS$CMPD_APP
	VCALL	BAS$CMPF_APP
	VCALL	BAS$CMPG_APP
	VCALL	BAS$CMPH_APP

; Module BAS$CTRLC

	VCALL	BAS$$CTRLC_INIT
	VCALL	BAS$CTRLC
	VCALL	BAS$RCTRLC

; Module BAS$CVT_OUT

	VCALL	BAS$CVT_OUT_D_E
	VCALL	BAS$CVT_OUT_D_F
	VCALL	BAS$CVT_OUT_D_G
	VCALL	BAS$CVT_OUT_F_E
	VCALL	BAS$CVT_OUT_F_F
	VCALL	BAS$CVT_OUT_G_E
	VCALL	BAS$CVT_OUT_G_F
	VCALL	BAS$CVT_OUT_G_G
	VCALL	BAS$CVT_OUT_H_E
	VCALL	BAS$CVT_OUT_H_F
	VCALL	BAS$CVT_OUT_H_G
	VCALL	BAS$CVT_OUT_P_E
	VCALL	BAS$CVT_OUT_P_F
	VCALL	BAS$CVT_OUT_P_G

; Module BAS$CVT_T_P

	VCALL	BAS$CVT_T_P

; Module BAS$DELETE

	VCALL	BAS$DELETE

; Module BAS$EDIT

	VCALL	BAS$EDIT

; Module BAS$END

	VJSB	BAS$END_R8

; Module BAS$END_DEF

	VJSB	BAS$END_DEF_R8

; Module BAS$END_DFS

	VJSB	BAS$END_DFS_R8

; Module BAS$END_GSB

	VJSB	BAS$END_GSB_R8

; Module BAS$ERROR

	VCALL	BAS$$ERR_INIT
	VCALL	BAS$$SIGNAL
	VCALL	BAS$$STOP
	VCALL	BAS$ERL
	VCALL	BAS$ERN
	VCALL	BAS$ERR
	VCALL	BAS$ERROR
	VCALL	BAS$ERT
	VCALL	BAS$ON_ERR_BK
	VCALL	BAS$ON_ERR_Z
	VCALL	BAS$POP_ERR
	VCALL	BAS$PUSH_ERR
	VCALL	BAS$RESUME
	VCALL	BAS$RESUME_Z

; Module BAS$FIND

	VCALL	BAS$FIND
	VCALL	BAS$FIND_KEY
	VCALL	BAS$FIND_RECORD
	VCALL	BAS$FIND_RFA

; Module BAS$FREE

	VCALL	BAS$FREE

; Module BAS$GET

	VCALL	BAS$GET
	VCALL	BAS$GET_KEY
	VCALL	BAS$GET_RECORD
	VCALL	BAS$GET_RFA

; Module BAS$GETRFA

	VCALL	BAS$GETRFA

; Module BAS$HANDLER

	VHANDL	BAS$HANDLER	BAS$$HANDLER

; Module BAS$INIT

	VJSB	BAS$INIT_R8

; Module BAS$INIT_DEF

	VJSB	BAS$INIT_DEF_R8

; Module BAS$INIT_DFS

	VJSB	BAS$INIT_DFS_R8

; Module BAS$INIT_GOSUB

	VCALL	BAS$INIT_GOSUB

; Module BAS$INSTR

	VCALL	BAS$INSTR

; Module BAS$IO_BEG

	VCALL	BAS$ANSI_INPUT
	VCALL	BAS$INPUT
	VCALL	BAS$INPUT_LINE
	VCALL	BAS$LINPUT
	VCALL	BAS$MAT_INPUT
	VCALL	BAS$MAT_LINPUT
	VCALL	BAS$MAT_PRINT
	VCALL	BAS$MAT_READ
	VCALL	BAS$PRINT
	VCALL	BAS$PRINT_USING
	VCALL	BAS$READ

; Module BAS$IO_END

	VCALL	BAS$ANSI_IO_END
	VCALL	BAS$IO_END

; Module BAS$NUM

	VCALL	BAS$NUM_D
	VCALL	BAS$NUM_F
	VCALL	BAS$NUM_G
	VCALL	BAS$NUM_H
	VCALL	BAS$NUM_L
	VCALL	BAS$NUM_P

; Module BAS$NUM1

	VCALL	BAS$NUM1_D
	VCALL	BAS$NUM1_F
	VCALL	BAS$NUM1_G
	VCALL	BAS$NUM1_H
	VCALL	BAS$NUM1_L
	VCALL	BAS$NUM1_P

; Module BAS$OPEN

	VCALL	BAS$$STATU_INIT
	VCALL	BAS$OPEN
	VCALL	BAS$STATUS

; Module BAS$PUT

	VCALL	BAS$PUT
	VCALL	BAS$PUT_COUNT
	VCALL	BAS$PUT_RECORD
	VCALL	BAS$PUT_REC_CNT

; Module BAS$RESTORE

	VCALL	BAS$RESTORE
	VCALL	BAS$RESTORE_DAT
	VCALL	BAS$RESTORE_KEY

; Module BAS$RSET

	VCALL	BAS$RSET
	VCALL	BAS$RSET_R

; Module BAS$SCALE

	VJSB	BAS$$SCALE_L_R1
	VJSB	BAS$$SCALE_R1
	VJSB	BAS$DSCALE_D_R1
	VJSB	BAS$SCALE_D_R1

; Module BAS$SCRATCH

	VCALL	BAS$SCRATCH

; Module BAS$STR

	VCALL	BAS$STR_D
	VCALL	BAS$STR_F
	VCALL	BAS$STR_G
	VCALL	BAS$STR_H
	VCALL	BAS$STR_L
	VCALL	BAS$STR_P

; Module BAS$UNLOCK

	VCALL	BAS$UNLOCK

; Module BAS$UPDATE

	VCALL	BAS$UPDATE
	VCALL	BAS$UPDATE_COUN

; Module BAS$UPI_TERM_IO

	VCALL	BAS$IN_B_R
	VCALL	BAS$IN_D_R
	VCALL	BAS$IN_F_R
	VCALL	BAS$IN_G_R
	VCALL	BAS$IN_H_R
	VCALL	BAS$IN_L_R
	VCALL	BAS$IN_P_DX
	VCALL	BAS$IN_T_DX
	VCALL	BAS$IN_W_R
	VCALL	BAS$OUT_D_V_B
	VCALL	BAS$OUT_D_V_C
	VCALL	BAS$OUT_D_V_S
	VCALL	BAS$OUT_F_V_B
	VCALL	BAS$OUT_F_V_C
	VCALL	BAS$OUT_F_V_S
	VCALL	BAS$OUT_G_V_B
	VCALL	BAS$OUT_G_V_C
	VCALL	BAS$OUT_G_V_S
	VCALL	BAS$OUT_H_V_B
	VCALL	BAS$OUT_H_V_C
	VCALL	BAS$OUT_H_V_S
	VCALL	BAS$OUT_L_V_B
	VCALL	BAS$OUT_L_V_C
	VCALL	BAS$OUT_L_V_S
	VCALL	BAS$OUT_P_DX_B
	VCALL	BAS$OUT_P_DX_C
	VCALL	BAS$OUT_P_DX_S
	VCALL	BAS$OUT_T_DX_B
	VCALL	BAS$OUT_T_DX_C
	VCALL	BAS$OUT_T_DX_S

; Module BAS$VAL

	VCALL	BAS$VAL_D
	VCALL	BAS$VAL_F
	VCALL	BAS$VAL_G
	VCALL	BAS$VAL_H
	VCALL	BAS$VAL_L
	VCALL	BAS$VAL_P

;+
; modules added in edit 1-002 start here.
;-

; Module BAS$CHAIN

	VCALL	BAS$CHAIN

; Module BAS$CHANGE

	VCALL	BAS$CHANGE_NA_S
	VCALL	BAS$CHANGE_S_NA

; Module BAS$CONCAT

	VCALL	BAS$CONCAT

; Module BAS$CTRLO

	VCALL	BAS$CTRLO
	VCALL	BAS$RCTRLO

; Module BAS$CVTRP

	VCALL	BAS$CVTDP
	VCALL	BAS$CVTFP
	VCALL	BAS$CVTGP
	VCALL	BAS$CVTHP
	VCALL	BAS$CVTPD
	VCALL	BAS$CVTPF
	VCALL	BAS$CVTPG
	VCALL	BAS$CVTPH
	VCALL	BAS$CVTRDP
	VCALL	BAS$CVTRFP
	VCALL	BAS$CVTRGP
	VCALL	BAS$CVTRHP

; Module BAS$DATE_TIME

	VCALL	BAS$DATE_T
	VCALL	BAS$TIME_F
	VCALL	BAS$TIME_T

; Module BAS$DET

	VCALL	BAS$DET_D
	VCALL	BAS$DET_F
	VCALL	BAS$DET_G
	VCALL	BAS$DET_H

; Module BAS$ECHO

	VCALL	BAS$ECHO
	VCALL	BAS$NOECHO

; Module BAS$EXTEND_DIVP

	VCALL	BAS$EXTEND_DIVP

; Module BAS$EXTEND_MULP

	VCALL	BAS$EXTEND_MULP

; Module BAS$FETCH_ADDR

	VCALL	BAS$FETCH_ADDR

; Module BAS$FETCH_DESC

	VCALL	BAS$FETCH_DESC

; Module BAS$FORMAT

	VCALL	BAS$FORMAT_D
	VCALL	BAS$FORMAT_F
	VCALL	BAS$FORMAT_G
	VCALL	BAS$FORMAT_H
	VCALL	BAS$FORMAT_P
	VCALL	BAS$FORMAT_T

; Module BAS$FSP

	VCALL	BAS$FSP

; Module BAS$INIT_C_GSB

	VCALL	BAS$INIT_C_GSB

; Module BAS$INIT_IOL

	VCALL	BAS$INIT_IOL

; Module BAS$INIT_ONER

	VCALL	BAS$INIT_ONERR

; Module BAS$KILL

	VCALL	BAS$KILL

; Module BAS$LEFT

	VCALL	BAS$LEFT

; Module BAS$MAGTAPE

	VCALL	BAS$MAGTAPE

; Module BAS$MARGIN

	VCALL	BAS$MARGIN
	VCALL	BAS$NOMARGIN

; Module BAS$MAT_IO

	VCALL	BAS$IN_MAT
	VCALL	BAS$NUM
	VCALL	BAS$NUM2
	VCALL	BAS$OUT_MAT_B
	VCALL	BAS$OUT_MAT_C
	VCALL	BAS$OUT_MAT_S

; Module BAS$MID

	VCALL	BAS$MID

; Module BAS$MOVE

	ALIAS	BAS$MOVE_FROM
	ALIAS	BAS$MOVE_TO
	VCALL	BAS$MOVE_BEG
	VCALL	BAS$MOVE_END

; Module BAS$MOVE_ARRAY

	VCALL	BAS$MOVE_ARRAY

; Module BAS$NAME_AS

	VCALL	BAS$NAME_AS

; Module BAS$POS

	VCALL	BAS$POS

; Module BAS$POWDD

	VCALL	BAS$POWDD,OTS$POWDD

; Module BAS$POWDJ

	VCALL	BAS$POWDJ,OTS$POWDJ

; Module BAS$POWDR

	VCALL	BAS$POWDR,OTS$POWDR

; Module BAS$POWGG

	VCALL	BAS$POWGG,OTS$POWGG

; Module BAS$POWGJ

	VCALL	BAS$POWGJ,OTS$POWGJ

; Module BAS$POWHH

	VCALL	BAS$POWHH,OTS$POWHH_R3

; Module BAS$POWHJ

	VCALL	BAS$POWHJ,OTS$POWHJ_R3

; Module BAS$POWII

	VCALL	BAS$POWII,OTS$POWII

; Module BAS$POWJJ

	VCALL	BAS$POWJJ,OTS$POWJJ

; Module BAS$POWRD

	VCALL	BAS$POWRD,OTS$POWRD

; Module BAS$POWRJ

	VCALL	BAS$POWRJ,OTS$POWRJ

; Module BAS$POWRR

	VCALL	BAS$POWRR,OTS$POWRR

; Module BAS$RAD50

	ALIAS 	BAS$RAD
	VCALL	BAS$RAD50

; Module BAS$RANDOM

	VCALL	BAS$RANDOMIZE
	VJSB	BAS$RND_F_R1

; Module BAS$REMAP_ARRAY

	VCALL	BAS$REMAP_ARRAY

; Module BAS$RIGHT

	VCALL	BAS$RIGHT

; Module BAS$RSTS_FIELD

	VCALL	BAS$FIELD_CLEAR
	VCALL	BAS$FIELD_CLOSE
	VCALL	BAS$FIELD_COPY
	VCALL	BAS$FIELD_COP_R
	VCALL	BAS$FIELD_OPEN
	VCALL	BAS$FIELD_PURGE
	VCALL	BAS$FIELD_SET

; Module BAS$RT_DIM

	VCALL	BAS$RT_DIM

; Module BAS$RUN_INIT

	VCALL	BAS$RUN_INIT

; Module BAS$SARITH

	VCALL	BAS$COMP
	VCALL	BAS$DIF
	VCALL	BAS$PLACE
	VCALL	BAS$PROD
	VCALL	BAS$QUO
	VCALL	BAS$SUM

; Module BAS$SEG

	VCALL	BAS$SEG

; Module BAS$SLEEP

	VCALL	BAS$SLEEP

; Module BAS$STOP

	VCALL	BAS$STOP

; Module BAS$STRING

	VCALL	BAS$STRING

; Module BAS$TAB

	VCALL	BAS$ANSI_TAB
	VCALL	BAS$TAB

; Module BAS$TRM

	VCALL	BAS$TRM

; Module BAS$VIRTUAL_ARR

	VCALL	BAS$FETCH_BFA
	VJSB	BAS$FET_FA_B_R8
	VJSB	BAS$FET_FA_D_R8
	VJSB	BAS$FET_FA_F_R8
	VJSB	BAS$FET_FA_G_R8
	VJSB	BAS$FET_FA_H_R8
	VJSB	BAS$FET_FA_L_R8
	VJSB	BAS$FET_FA_W_R8
	VCALL	BAS$STORE_BFA
	VCALL	BAS$STORE_BFA_OFF
	VJSB	BAS$STO_FA_B_R8
	VJSB	BAS$STO_FA_D_R8
	VJSB	BAS$STO_FA_F_R8
	VJSB	BAS$STO_FA_G_R8
	VJSB	BAS$STO_FA_H_R8
	VJSB	BAS$STO_FA_L_R8
	VCALL	BAS$STO_FA_RDX
	VJSB	BAS$STO_FA_W_R8

; Module BAS$XLATE

	VCALL	BAS$XLATE

; Module BAS$ERROR, additional

	VCALL	BAS$$HANDLER

;+
; modules added in edit 1-002 end here.
;-

;+
; 1-003 start
;-

; Module BAS$DET

	VCALL	BAS$$STORE_DET
	VCALL	BAS$$STORE_DET_G
	VCALL	BAS$$STORE_DET_H

; Module BAS$$UNWIND

	VCALL	BAS$$UNWIND

;+
; 1-003 end
;-

;+
; 1-004 start
;-

; Module BAS$IO_BEG

	VCALL	BAS$ANSI_PRINT

;+
; 1-004 end
;-

;+
; End of initial BASRTL vector.  All subsequent additions must be made
; after this point.
;-

	.END					; End of module BAS$VECTOR
