%TITLE 'NDXDAT - Index pool data manipulation routines'
MODULE NDXDAT (IDENT = 'V04-000'
		%BLISS32 [, ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!   DSR (Digital Standard RUNOFF) /DSRPLUS DSRINDEX/INDEX Utility
!
! ABSTRACT:
!   This module contains routines used to manipulate the binary index pool
!
! ENVIRONMENT:   Transportable
!
! AUTHOR:	 JPK
!
! CREATION DATE: February 1982
!
! MODIFIED BY:
!
!	006	JPK00015	04-Feb-1983
!		Cleaned up module names, modified revision history to
!		conform with established standards. Updated copyright dates.
!
!	005	JPK00012	24-Jan-1983
!		Modified NDXVMSMSG.MSG to define error messages for both
!		DSRINDEX and INDEX.
!		Added require of NDXVMSREQ.R32 to NDXOUT, NDXFMT, NDXDAT,
!		INDEX, NDXMSG, NDXXTN, NDXTMS, NDXVMS and NDXPAG for BLISS32. 
!		Since this file defines the error message literals, 
!		the EXTERNAL REFERENCEs for the error message literals 
!		have been removed.
!
!	004	JPK00010	24-Jan-1983
!		Removed routines GETDAT and UPDDAT from NDXDAT - they 
!		performed no useful function. Removed references to these
!		routines from NDXOUT, NDXFMT, and NDXMSG.
!		Removed reference to XPOOL in NDXOUT - not used.
!
!	003	JPK00009	24-Jan-1983
!		Modified to enhance performance. The sort buckets have each
!		been divided into 27 sub-buckets; 1 for each letter and 1
!		for non-alphas. Removed reference to BUCKET from INDEX.
!		Definition of the structure was added to NDXPOL. References
!		to BUCKET were changed in modules NDXOUT, NDXINI, NDXFMT 
!		and NDXDAT.
!
!	002	JPK00004	24-Sep-1982
!		Modified NDXOUT, NDXMSG, NDXFMT, and NDXDAT for TOPS-20. 
!		Strings stored in the index pool use the first fullword 
!		for their length. References to these strings were incorrect.
!
!--

!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    XINIT  : NOVALUE,		! Initialize index pool
    SAVDAT,			! Store data in pool
    XMEM   : NOVALUE,		! Verify availability of pool space
    GENTRY;			! Get index entry from pool

!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';

SWITCHES LIST (REQUIRE);

REQUIRE 'REQ:NDXPOL';

%IF %BLISS (BLISS32)
%THEN

REQUIRE 'REQ:NDXVMSREQ';

%FI

SWITCHES LIST (NOREQUIRE);

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

LITERAL
    TRUE = 1,
    FALSE = 0;

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    MAXLST;					! Maximum subindex depth

EXTERNAL
    NDXPOL,					! Address of indexing pool
    NDXSGE,					! End of current segment.
    NDXSGF,
    BUCKET : $BUCKET_ARRAY [27, 27],
    LSTPTR : REF $XE_BLOCK,
    INDLVL,					! Index level
    LSTSTK : VECTOR;				! Temporary entry stack

EXTERNAL ROUTINE
    ENTMSG : NOVALUE,
    GPOOL,
    XPOOL;

%SBTTL 'XINIT -- Initialize index processor'

GLOBAL ROUTINE XINIT : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Initialize the index processor.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NDXSGE 		- marker at end of work storage
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	One null entry is placed in each bucket.
!
!--

    BEGIN

    LOCAL
	TEMP_BUF : $XE_BLOCK;

    GPOOL (NDXPOL, 1000);	! Generate a pool with space for 1000 segments.
    NDXSGE = 0;			! Pool is empty, but allocated.
    NDXSGF = 0;			! ...

    !
    ! Fill in constant parts of bucket entry
    !
    TEMP_BUF [XE$A_PREV] = 0;
    TEMP_BUF [XE$A_NEXT] = 0;
    TEMP_BUF [XE$A_SUBX] = 0;
    TEMP_BUF [XE$H_SUBC] = 0;
    TEMP_BUF [XE$V_BARS] = FALSE;
    TEMP_BUF [XE$A_REF] = 0;
    TEMP_BUF [XE$A_TEXT] = 0;

    !
    ! Now place one entry in each bucket
    !
    INCR I FROM 0 TO 26 DO
	INCR J FROM 0 TO 26 DO
	    BUCKET [.I, .J] = SAVDAT (TEMP_BUF, DS_X_ENTRY, XE$K_LENGTH);

    END;			!End of XINIT

%SBTTL 'SAVDAT -- Place data in working storage'

GLOBAL ROUTINE SAVDAT (ADR, DATASET, SIZE) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Place data item into work space.
!	Note that in this version all indexing information is
!	saved in core.  This routine could be replaced with
!	an interface to a work-file system on -11s.
!
! FORMAL PARAMETERS:
!
!	ADR	- Address of data to be saved (CH$PTR if DATASET is DS_X_STRING)
!	DATASET - Name of dataset where data will be stored
!	SIZE	- Number of characters (used only by DS_X_STRING)
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Work space ADDRESS of data is returned.
!
! SIDE EFFECTS:
!
!	Work space pointers are updated
!
!--

    BEGIN

    MAP
	ADR : REF VECTOR;

    LOCAL
	WSADDR : REF VECTOR;

    !
    ! Handle strings differently from fixed length data
    !
    IF .DATASET NEQ DS_X_STRING
    THEN
	BEGIN
	!
	! Fixed length data
	!
	! Make sure there's sufficient dynamic memory to accommodate this entry
	!
	XMEM (.DATASET);

	!
	! Point to where data will be placed (at end of current segment).
	!
	WSADDR = .NDXSGE;

	!
	! Advance over allocated storage
	!
	NDXSGE = .NDXSGE + .DATASET * %UPVAL;	! Point to next free memory in segment
	NDXSGF = .NDXSGF - .DATASET;		! Count off memory used.

	INCR I FROM 0 TO .DATASET - 1 DO
	    WSADDR [.I] = .ADR [.I];

	END
    ELSE
	BEGIN
	!
	! Strings - variable length data
	!
	LOCAL
	    SRC_PTR,
	    WRD_PTR;

	!
	! Ensure there's sufficient memory to accommodate this.
	!
	XMEM (CH$ALLOCATION (.SIZE) + 1);

	!
	! Point to where data will be placed (at end of current segment).
	!
	WSADDR = .NDXSGE;

	!
	! Advance over allocated storage
	!
	NDXSGE = .NDXSGE + (CH$ALLOCATION (.SIZE) + 1) * %UPVAL;	! Point past used memory.
	NDXSGF = .NDXSGF - (CH$ALLOCATION (.SIZE) + 1);			! Count off used memory.

	!
	! Set up string pointers
	!
	SRC_PTR = .ADR;				! ADR is a CH$PTR to string
	WRD_PTR = CH$PTR (WSADDR [1]);		! String starts after 1st fullword

	!
	! Save length as the first fullword of string
	!
	WSADDR [0] = .SIZE;

	!
	! Store the string
	!
	INCR I FROM 1 TO .SIZE DO
	    CH$WCHAR_A (CH$RCHAR_A (SRC_PTR), WRD_PTR);

	END;

    RETURN .WSADDR;
    END;			!End of SAVDAT

%SBTTL 'XMEM -- Verify availability of dynamic memory'
ROUTINE XMEM (AMOUNT) : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine verifies that the requested amount of memory is
!	available. If not enough memory is available, it attempts to
!	allocate more. If this fails, a fatal message is issued  
!	forcing program termination.
!
! FORMAL PARAMETERS:
!
!	AMOUNT	- Amount of memory desired
!
! IMPLICIT INPUTS:
!
!	NDXSGE 	- End of current segment
!	NDXSGF	- Amount of free memory in current segment
!
! IMPLICIT OUTPUTS:
!
!	NDXSGE	- End of new segment if more memory is allocated
!	NDXSGF	- Amount of free memory if more is alloacted
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!--
    BEGIN

    IF .NDXSGF LSS .AMOUNT
    THEN
	BEGIN
	!
	! Not enough space in current segment, so get a new one.
	!
	NDXSGE = XPOOL (NDXPOL, 1000);	! Try to get about 1k.

	IF .NDXSGE NEQ 0
	THEN
	    !
	    ! The requested amount was available.
	    ! Save size of segment
	    !
	    NDXSGF = 1000
	ELSE
	    !
	    ! The requested amount could not be allocated (pool full)
	    !

%IF %BLISS (BLISS32)
%THEN						! Signal error for BLISS32

	    SIGNAL_STOP (INDEX$_INSVIRMEM);

%ELSE						! Use $XPO_PUT_MSG otherwise

	    $XPO_PUT_MSG (SEVERITY = FATAL,
		STRING = 'can''t extend index pool.');

%FI

	END;
    END;

%SBTTL 'GENTRY -- from working storage'
GLOBAL ROUTINE GENTRY (B_ROW, B_COL, NO_SUBX) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Get a data entry from the working storage space.
!
! FORMAL PARAMETERS:
!
!	B_ROW	- bucket ROW
!	B_COL	- bucket COLumn
!	NO_SUBX	- If true, ignore sub-index while advancing
!
! IMPLICIT INPUTS:
!
!	INDLVL  - subindex level
!	LSTPTR - contains current position in list
!
! IMPLICIT OUTPUTS:
!
!	INDLVL	 - indentation level
!	LSTPTR - updated position in list.
!	LSTSTK	 - temporary stack for saving sub-index lists
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	TRUE	- entry found
!	FALSE	- No more entries left in list
!
! SIDE EFFECTS:
!
!	Each time called, the pointer is advanced along the chain of entries
!	in the list.
!
!--

    BEGIN

    LOCAL
	L_PTR : REF $XE_BLOCK;

    IF .LSTPTR EQL 0
    THEN
	BEGIN
	!
	! Head of list processing
	!
	LSTPTR = .BUCKET [.B_ROW, .B_COL];

	IF .LSTPTR [XE$A_TEXT] EQL 0 THEN RETURN FALSE;
	END
    ELSE
	BEGIN
	!
	! Processing for all other list elements
	!
	L_PTR = .LSTPTR;

	!
	! Look for a sub-list entry
	!
	IF (.L_PTR [XE$A_SUBX] NEQ 0) AND (NOT .NO_SUBX)
	THEN
	    BEGIN
	    IF .INDLVL LSS MAXLST
	    THEN
		BEGIN
		!
		! Remember where we left off by placing top of sub-list on the stack
		!
		LSTSTK [.INDLVL] = .LSTPTR;

		!
		! Point to sub-list
		!
		LSTPTR = .L_PTR [XE$A_SUBX];

		!
		! Keep track of indentation level
		!
		INDLVL = .INDLVL + 1;

		RETURN TRUE;
		END
	    ELSE
		BEGIN
		!
		! Index entry is too deep
		!

%IF %BLISS (BLISS32)
%THEN						! Signal error for BLISS32

		SIGNAL (INDEX$_TOODEEP);

%ELSE						! Use $XPO_PUT_MSG otherwise

		$XPO_PUT_MSG (SEVERITY = WARNING, STRING = 'Maximum subindex depth exceeded');

%FI

		ENTMSG ();			! Dump entry
		END;
	    END;

	!
	! Check for end of list
	!
	IF .L_PTR [XE$A_NEXT] NEQ 0
	THEN
	    LSTPTR = .L_PTR [XE$A_NEXT]
	ELSE
	    RETURN FALSE;

	!
	! Look out for entries on a sub-list
	!
	IF .LSTPTR [XE$A_NEXT] EQL 0
	THEN
	    BEGIN
	    !
	    ! See if we need to unstack a sub-list
	    !
	    IF .INDLVL EQL 0
	    THEN
		!
		! Nothing to unstack, quit
		!
		RETURN FALSE
	    ELSE
		BEGIN
		!
		! Unstack branch of tree
		!
		INDLVL = .INDLVL - 1;
		LSTPTR = .LSTSTK [.INDLVL];
		RETURN GENTRY (.B_ROW, .B_COL, TRUE);
		END;
	    END;
	END;

    RETURN TRUE;
    END;			!End of GENTRY

END				! End of module
ELUDOM
