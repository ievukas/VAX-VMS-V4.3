MODULE AED$PROMPT (
		 LANGUAGE (BLISS32),
		 IDENT = 'V04-000'
		 ) =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	Miscellaneous utilities
!
! ABSTRACT:
!
!	This module contains the routines necessary to support the prompting
!	functions of the ACL editor.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, user mode utilities.
!
!--
!
!
! AUTHOR:	L. Mark Pilant		CREATION DATE:	12-Nov-1982  9:50
!
! MODIFIED BY:
!
!	V03-011	LMP0269		L. Mark Pilant,		28-Jun-1984  15:54
!		Remove the AUDIT_JOURNAL from the list of supported ACE
!		types.
!
!	V03-010	LMP0213		L. Mark Pilant,		24-Mar-1984  12:23
!		Add support for locking and unlocking the object's ACL.
!
!	V03-009	LMP0174		L. Mark Pilant,		2-Dec-1983  9:45
!		Add support for the NOPROPAGATE option.
!
!	V03-008	LMP0172		L. Mark Pilant,		28-Nov-1983  12:11
!		Numerous bug fixes, support for VT2xx terminals, and a
!		session keystroke logger.
!
!	V03-007	LMP0161		L. Mark Pilant,		4-Oct-1983  14:18
!		Correctly mark the ACE as open for existing ACEs as well as
!		new ACEs.
!
!	V03-006	LMP0152		L. Mark Pilant,		12-Sep-1983  15:35
!		Make the journal name for ALARM and AUDIT ACEs 'SECURITY'.
!
!	V03-005	LMP0138		L. Mark Pilant,		17-Aug-1983  14:43
!		Correct various bugs that would cause ACCVIOs during prompt
!		mode input.
!
!	V03-004	LMP0123		L. Mark Pilant,		22-Jun-1983  11:44
!		Change FLAGS item name to OPTIONS.  Also, change OWNER
!		access definition to CONTROL.
!
!	V03-003	LMP0103		L. Mark Pilant,		20-Apr-1983  14:15
!		Add support for HIDDEN and PROTECTED ACEs.  Also do misc
!		fixups.
!
!	V03-002	LMP0081		L. Mark Pilant,		22-Feb-1983  13:12
!		Don't call SELECTITEM in the size is zero and the PROMPT
!		flag is not set.
!
!	V03-001	LMP0074		L. Mark Pilant,		21-Jan-1983  12:37
!		Fix several bugs that appeared in prompt mode.
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';
LIBRARY 'SYS$LIBRARY:TPAMAC.L32';
REQUIRE 'SRC$:ACLEDTDEF';

!				SPECIAL NOTE:
!
! Since this module depends very much upon the actual format of an ACE,  it
! is absolutely imperative that the routines within this module track that
! format.
!
! As an aid to determining what portions of the ACE may be defaulted, and
! what portions may not, the ACE is divided up into items and fields.  A
! field is that portion of the ACE text between commas (or between parens
! if at the beginning or end of the ACE).  An item is that portion of a
! field between plus signs (or an equal sign on the left and a comma on the
! right).
!
! Following below are the current ACE types and the field numbers for the
! various portions of the ACE.
!
! Type:	ACE$C_KEYID, ACE$C_AUDIT, and ACE$C_ALARM
!
!	(type_keyword, OPT = D + H + P + N , ACC = R + W + E + D + C + S + F + N
!	 ^-----0----^   1    2   3   4   5    6    7   8   9   1   1   1   1   1
!                                                              0   1   2   3   4
!
! Type:	ACE$C_BIJNL, ACE$C_AIJNL, and ACE$C_ATJNL
!
!	(journal_type_JOURNAL=name)
!	 ^-----------0-----------^
!
! Type:	ACE$C_INFO and ACE$C_JNLID
!
!	Not applicable since these ACE types cannot be entered.
!
! Type:	ACE$C_DIRDEF
!
!	(DEFAULT_PROT, SYSTEM:aaaa, OWNER:bbbb, GROUP:cccc, WORLD:dddd)
!	 ^----0-----^  ^----1----^  ^----2---^  ^----3---^  ^----4---^

FORWARD ROUTINE
	AED_SELECTFIELD	: NOVALUE,		! Select next ACE field
	AED_SELECTITEM	: NOVALUE,		! Select next ACE item
	AED_SETACETYPE	: NOVALUE;		! Set ACE type text

EXTERNAL ROUTINE
	AED_POSITION,				! Position to selected line
	AED_SEGSPLIT,				! Split line segment in two
	AED_PUTOUTPUT;				! General purpose output routine

! ACE item parsing tables.

! Macro to define an antry in the item tables.

MACRO
	ENTRY (STRING, VALUE) =
		%CHARCOUNT (STRING),
		UPLIT (STRING),
		VALUE
		%;

! Item tables for parsing and prompting.

PSECT	PLIT=AED_ITEM_PLIT(OVERLAY,ADDRESSING_MODE(LONG_RELATIVE),ALIGN(0));

BIND

! Legal ACE type names.  This must parallel the definitions in $ACEDEF,
! $PARSE_ACL, and $FORMAT_ACL.  The first entry is repeated because the
! ACE type codes start at 1, whereas it is possible for 0 to occur during
! prompting.

	ITEM_TYPE	= UPLIT (ENTRY ('IDENTIFIER=', ACE$C_KEYID),
				 ENTRY ('BI_JOURNAL_NAME=', ACE$C_BIJNL),
				 ENTRY ('AI_JOURNAL_NAME=', ACE$C_AIJNL),
				 ENTRY ('AT_JOURNAL_NAME=', ACE$C_ATJNL),
				 ENTRY ('AUDIT_JOURNAL=SECURITY', ACE$C_AUDIT),
				 ENTRY ('ALARM_JOURNAL=SECURITY', ACE$C_ALARM),
				 ENTRY ('INFORMATION', ACE$C_INFO),	! Place holder
				 ENTRY ('RMS_JOURNAL_ID', ACE$C_JNLID),	! Place holder
				 ENTRY ('DEFAULT_PROTECTION', ACE$C_DIRDEF)
				) : BLOCKVECTOR [,12,BYTE],

! Legal flag names.  The wild group and member flags are set based upon
! the format of the UIC.

	ITEM_FLAG	= UPLIT (ENTRY ('DEFAULT+', ACE$M_DEFAULT),	! Assumed to be first
!				 ENTRY ('HIDDEN+', ACE$M_HIDDEN),
				 ENTRY ('PROTECTED+', ACE$M_PROTECTED),
				 ENTRY ('NOPROPAGATE+', ACE$M_NOPROPAGATE),
				 ENTRY ('NONE+', 0)			! Assumed to be last
				) : BLOCKVECTOR [,12,BYTE],

! Legal access right names.

	ITEM_ACCESS	= UPLIT (ENTRY ('READ+', ACE$M_READ),
				 ENTRY ('WRITE+', ACE$M_WRITE),
				 ENTRY ('EXECUTE+', ACE$M_EXECUTE),
				 ENTRY ('DELETE+', ACE$M_DELETE),
				 ENTRY ('CONTROL+', ACE$M_CONTROL),
				 ENTRY ('SUCCESS+', ACE$M_SUCCESS),
				 ENTRY ('FAILURE+', ACE$M_FAILURE),
				 ENTRY ('NONE+', 0)			! Assume to be last
				) : BLOCKVECTOR [,12,BYTE];

! Set up constants for the maximum indecies for the TYPE, FLAG, and ACCESS
! fields.

LITERAL
	MAX_TYPE_INDEX		= 8,		! Max type field index
	MAX_FLAG_INDEX		= 3,		! Max flag field index
	MAX_ACCESS_INDEX	= 7;		! Max access field index

PSECT	PLIT=$PLIT$(CONCATENATE,ADDRESSING_MODE(WORD_RELATIVE),ALIGN(2));

GLOBAL ROUTINE AED_SELECTFIELD (INDEX) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine incrementally selects the various fields for an ACE.
!	The field selection is based upon the ACE type.  Because this routine
!	assumes to know the format of the ACE text, it is necessary to
!	insure that it tracks the routine LIB$FORMACL and LIB$PARSACL.
!
! CALLING SEQUENCE:
!	AED_SELECTFIELD (ARG1)
!
! INPUT_PARAMETERS:
!	ARG1: address of a word containing the current buffer position
!
! IMPLICIT INPUTS:
!	AED_B_FIELD: current field index (position)
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	AED_B_FIELD: current field index (position)
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

MAP
	INDEX		: REF VECTOR [,WORD];	! Address of the size word

LITERAL
	MAX_ACE_CODE	= MAXU	(ACE$C_KEYID,
				 ACE$C_BIJNL,
				 ACE$C_AIJNL,
				 ACE$C_ATJNL,
				 ACE$C_AUDIT,
				 ACE$C_ALARM,
				 ACE$C_INFO,
				 ACE$C_JNLID,
				 ACE$C_DIRDEF),
	MIN_ACE_CODE	= MINU	(ACE$C_KEYID,
				 ACE$C_BIJNL,
				 ACE$C_AIJNL,
				 ACE$C_ATJNL,
				 ACE$C_AUDIT,
				 ACE$C_ALARM,
				 ACE$C_INFO,
				 ACE$C_JNLID,
				 ACE$C_DIRDEF);

LOCAL
	BUFFER_POS,				! Current buffer position
	BUFFER		: REF VECTOR [,BYTE],	! Address of text storage
	ECHO_DESC	: $BBLOCK [DSC$C_S_BLN],	! Echo str descr
	PREV_LINE	: REF $BBLOCK,		! Address of previous line
	TEMP_LINE,				! Temp display row index
	FIELD_KEYWORD	: REF VECTOR [,BYTE];	! Address of protection field text

! Note where the actual text is to start.

BUFFER = AED_T_CURLINE[LINE_T_TEXT];

! Check for the end of the line segment.

IF .AED_T_CURLINE[LINE_W_SIZE] NEQ 0
THEN
    BEGIN
    IF .BUFFER[.INDEX[0]] EQL ')' OR .BUFFER[.AED_W_ITEMEND + 1] EQL ')'
    THEN
	BEGIN
	AED_W_ITEMBEG = AED_W_ITEMEND = INDEX[0] =
			.AED_T_CURLINE[LINE_W_SIZE] - 1;
	RETURN;
	END;
    END;

! Determine the current field index.  This is done by counting the number of
! fields from the beginning of the line.  Each field is deleimited by either a
! plus sign or a comma.  An equal sign causes the field count to advance to the
! next major field type (flags or access rights).

BUFFER_POS = 0;
AED_B_FIELD = .AED_T_CURLINE[LINE_B_FIELDST];
UNTIL .BUFFER_POS GEQ .INDEX[0]
DO
    BEGIN
    IF .BUFFER[.BUFFER_POS] EQL '['
    THEN
	BEGIN
	UNTIL .BUFFER[.BUFFER_POS] EQL ']'
	DO BUFFER_POS = .BUFFER_POS + 1;
	END;
    IF .BUFFER[.BUFFER_POS] EQL ','
    THEN
	BEGIN
	IF .AED_B_FIELD GEQ 1 AND .AED_B_ACETYPE NEQ ACE$C_DIRDEF
	THEN AED_B_FIELD = 6
	ELSE AED_B_FIELD = .AED_B_FIELD + 1;
	END;
    IF .AED_B_FIELD GEQ 1
    THEN
	BEGIN
	IF .BUFFER[.BUFFER_POS] EQL '='
	OR .BUFFER[.BUFFER_POS] EQL '+'
	THEN AED_B_FIELD = .AED_B_FIELD + 1;
	END;
    BUFFER_POS = .BUFFER_POS + 1;
    END;

! Now for the fun part.  Perform anything that depends upon the ACE type.
! This is only relevant if something is going to be added to the end of
! the current line segment.  Otherwise, simply set the boundaries of the
! NEXT field.

IF .INDEX[0] GEQ .AED_T_CURLINE[LINE_W_SIZE]
THEN
    BEGIN

! If this is the first field (the ACE type) and the buffer is empty, fill
! it with the initial ACE delimiter.

    IF .INDEX[0] EQL 0 AND .AED_B_FIELD EQL 0
    THEN
	BEGIN
	IF NOT .AED_L_FLAGS[AED_V_PROMPT] THEN RETURN;
	AED_B_ITEM = -1;
	BUFFER[0] = '(';
	INDEX[0] = AED_T_CURLINE[LINE_W_SIZE] = 1;
	END;

! Now build the ACE depending upon the type.

    CASE .AED_B_ACETYPE FROM 0 TO MAX_ACE_CODE OF
    SET
	[ACE$C_KEYID,
	 ACE$C_AUDIT,
	 ACE$C_ALARM]:
	    BEGIN

! Tie off the current field.  This must be done now as the field index may
! get bumped.

	    IF .INDEX[0] GTR 0
	    THEN
		BEGIN
		IF .BUFFER[.INDEX[0] - 1] NEQ ','
		AND .BUFFER[.INDEX[0] - 1] NEQ '+'
		AND .BUFFER[.INDEX[0] - 1] NEQ '='
		THEN
		    BEGIN
		    IF .AED_B_FIELD EQL 0 OR .AED_B_FIELD EQL 5
		    THEN BUFFER[.INDEX[0]] = ','
		    ELSE IF .AED_B_FIELD EQL 1 OR .AED_B_FIELD EQL 6
			 THEN BUFFER[.INDEX[0]] = '='
			 ELSE BUFFER[.INDEX[0]] = '+';
		    IF .BUFFER[.INDEX[0]] EQL '=' THEN AED_B_ITEM = -1;
		    INDEX[0] = .INDEX[0] + 1;
		    AED_T_CURLINE[LINE_W_SIZE] = .AED_T_CURLINE[LINE_W_SIZE] + 1;
		    AED_B_FIELD = .AED_B_FIELD + 1;
		    END;
		END;

! If the object is not a directory file, and the current field is the options
! field, skip the DEFAULT item.  This is a two part operation.  The field
! is skipped here, and the item is skipped in AED_SELECTITEM.

	    IF NOT .AED_L_FLAGS[AED_V_DIRECTORY]
	    AND .AED_B_FIELD GEQ 2 AND .AED_B_FIELD LEQ 5
	    THEN AED_B_FIELD = .AED_B_FIELD + 1;

! If at the field for the 'NONE' item, advance to the next field as there have
! been items selected for the current field.  Also,  if items have been
! selected for the current field, skip the 'NONE' item, but don't advance the
! field position.

	    IF .AED_B_FIELD EQL 5 THEN AED_B_FIELD = 6;
	    IF .AED_B_FIELD GEQ 3 AND .AED_B_FIELD LSS 5 AND .AED_B_ITEM EQL MAX_FLAG_INDEX
	    THEN AED_B_ITEM = .AED_B_ITEM + 1;

! Skip over SUCCESS and FAILURE items if not ALARM or AUDIT ACEs.

	    IF .AED_B_FIELD GEQ 8 AND .AED_B_ACETYPE EQL ACE$C_KEYID AND .AED_B_ITEM EQL 5
	    THEN AED_B_ITEM = 7;

! If past the last field, simply return now.  This has an implicit NONE item
! test for the ACCESS field.

	    IF .AED_B_FIELD GTR (IF .AED_B_ACETYPE EQL ACE$C_KEYID THEN 11 ELSE 13)
	    THEN RETURN;

! Locate the last segment that has text.

	    PREV_LINE = AED_T_CURLINE;
	    TEMP_LINE = .AED_B_LINE;
	    UNTIL .PREV_LINE[LINE_W_SIZE] GTR 0 OR .PREV_LINE[LINE_V_BEGINACE]
	    DO
		BEGIN
		PREV_LINE = .PREV_LINE[LINE_L_BLINK];
		TEMP_LINE = .TEMP_LINE - 1;
		END;

! Determine, based upon the field index, whether or not the keyword must
! be added to the line.

	    IF .AED_B_FIELD EQL 1 OR .AED_B_FIELD EQL 6
	    THEN
		BEGIN

! Set up the appropriate field text string.

		CASE .AED_B_FIELD FROM 1 TO 6 OF
		SET
		    [1]:	FIELD_KEYWORD = UPLIT (%ASCIC 'OPTIONS=');
		    [6]:	FIELD_KEYWORD = UPLIT (%ASCIC 'ACCESS=');
		    [INRANGE,
		     OUTRANGE]:	0;
		TES;

! Make sure previous item tied off properly.

		IF .VECTOR [PREV_LINE[LINE_T_TEXT],
			    .PREV_LINE[LINE_W_SIZE] - 1; ,BYTE] EQL '+'
		THEN
		    BEGIN
		    PREV_LINE[LINE_W_SIZE] = .PREV_LINE[LINE_W_SIZE] - 1;
		    IF .PREV_LINE EQLA AED_T_CURLINE
		    THEN INDEX[0] = .INDEX[0] - 1
		    ELSE AED_W_TOTALSIZE = .AED_W_TOTALSIZE - 1;
		    END;
		IF .VECTOR [PREV_LINE[LINE_T_TEXT],
			    .PREV_LINE[LINE_W_SIZE] - 1; ,BYTE] NEQ ','
		THEN
		    BEGIN
		    IF .TEMP_LINE GEQ 1
		    THEN
			BEGIN
			AED_POSITION (.PREV_LINE);
			SCR$ERASE_LINE (.AED_B_LINE, .PREV_LINE[LINE_W_SIZE] + 1);
			AED_POSITION (AED_T_CURLINE);
			END;
		    BUFFER[.INDEX[0]] = ',';
		    INDEX[0] = .INDEX[0] + 1;
		    AED_T_CURLINE[LINE_W_SIZE] = .AED_T_CURLINE[LINE_W_SIZE] + 1;
		    END;
		CH$MOVE (.FIELD_KEYWORD[0], FIELD_KEYWORD[1], BUFFER[.INDEX[0]]);
		INDEX[0] = .INDEX[0] + .FIELD_KEYWORD[0];
		AED_T_CURLINE[LINE_W_SIZE] = .AED_T_CURLINE[LINE_W_SIZE] + .FIELD_KEYWORD[0];
		AED_B_FIELD = .AED_B_FIELD + 1;
		AED_B_ITEM = -1;
		END;
	    END;

	[ACE$C_BIJNL,
	 ACE$C_AIJNL,
	 ACE$C_ATJNL]:
	    BEGIN

! If there is anything typed, assume that a journal name is present.

	    IF .INDEX[0] GTR 1 THEN RETURN;
	    END;

	[ACE$C_DIRDEF]:
	    BEGIN

! Find the previous non-blank line.

	    PREV_LINE = AED_T_CURLINE;
	    TEMP_LINE = .AED_B_LINE;
	    IF NOT .AED_T_CURLINE[LINE_V_BEGINACE]
	    THEN DO
		    BEGIN
		    PREV_LINE = .PREV_LINE[LINE_L_BLINK];
		    TEMP_LINE = .TEMP_LINE - 1;
		    END
		 UNTIL .PREV_LINE[LINE_W_SIZE] GTR 0;

! If past the last field, simply return now.

	    IF .AED_B_FIELD EQL 4
	    AND (IF .AED_T_CURLINE[LINE_W_SIZE] GTR 0
		 THEN .VECTOR [AED_T_CURLINE[LINE_T_TEXT], .AED_T_CURLINE[LINE_W_SIZE] - 1; ,BYTE] NEQ ','
	         ELSE .VECTOR [PREV_LINE[LINE_T_TEXT], .PREV_LINE[LINE_W_SIZE] - 1; ,BYTE] NEQ ',')
	    THEN RETURN;

! Make sure previous item tied off properly.

	    IF .VECTOR [PREV_LINE[LINE_T_TEXT],
			.PREV_LINE[LINE_W_SIZE] - 1; ,BYTE] NEQ ','
	    THEN
		BEGIN
		IF .TEMP_LINE GEQ 1
		THEN
		    BEGIN
		    AED_POSITION (.PREV_LINE);
		    SCR$ERASE_LINE (.AED_B_LINE, .PREV_LINE[LINE_W_SIZE]);
		    AED_POSITION (AED_T_CURLINE);
		    END;
		BUFFER[.INDEX[0]] = ',';
		INDEX[0] = .INDEX[0] + 1;
		AED_T_CURLINE[LINE_W_SIZE] = .AED_T_CURLINE[LINE_W_SIZE] + 1;
		AED_B_FIELD = .AED_B_FIELD + 1;
		END;

! Set up the appropriate field text string.

	    CASE .AED_B_FIELD FROM 1 TO 4 OF
	    SET
		[1]:	FIELD_KEYWORD = UPLIT (%ASCIC 'SYSTEM:');
		[2]:	FIELD_KEYWORD = UPLIT (%ASCIC 'OWNER:');
		[3]:	FIELD_KEYWORD = UPLIT (%ASCIC 'GROUP:');
		[4]:	FIELD_KEYWORD = UPLIT (%ASCIC 'WORLD:');
	    TES;

	    CH$MOVE (.FIELD_KEYWORD[0], FIELD_KEYWORD[1], BUFFER[.INDEX[0]]);
	    INDEX[0] = .INDEX[0] + .FIELD_KEYWORD[0];
	    AED_T_CURLINE[LINE_W_SIZE] = .AED_T_CURLINE[LINE_W_SIZE] + .FIELD_KEYWORD[0];
	    AED_B_FIELD = .AED_B_FIELD + 1;
	    END;
	[INRANGE,
	 OUTRANGE]:	0;
    TES;
    END;

! Determine the boundaries of the selected field.

AED_W_ITEMBEG = .INDEX[0];
IF .AED_W_ITEMBEG GEQ .AED_T_CURLINE[LINE_W_SIZE]
THEN
    BEGIN
    AED_W_ITEMEND = .AED_T_CURLINE[LINE_W_SIZE] - 1;
    IF .AED_B_ACETYPE NEQ ACE$C_DIRDEF THEN AED_SELECTITEM (.INDEX);
    INDEX[0] = .AED_W_ITEMEND + 1;
    RETURN;
    END;

UNTIL .BUFFER[.AED_W_ITEMBEG] NEQ '('
   OR .BUFFER[.AED_W_ITEMBEG] EQL ','
   OR .BUFFER[.AED_W_ITEMBEG] EQL ')'
   OR (.AED_B_FIELD GTR 0 AND .BUFFER[.AED_W_ITEMBEG] EQL '+')
DO
    BEGIN
    IF .BUFFER[.AED_W_ITEMBEG] EQL '['
    THEN
	BEGIN
	UNTIL .BUFFER[.AED_W_ITEMBEG] EQL ']'
	DO AED_W_ITEMBEG = .AED_W_ITEMBEG + 1;
	END;
    AED_W_ITEMBEG = .AED_W_ITEMBEG + 1;
    IF .AED_W_ITEMBEG GEQ .AED_T_CURLINE[LINE_W_SIZE]
    THEN
	BEGIN
	AED_W_ITEMEND = .AED_T_CURLINE[LINE_W_SIZE] - 1;
	AED_SELECTITEM (.INDEX);
	INDEX[0] = .AED_W_ITEMEND + 1;
	RETURN;
	END;
    END;
AED_W_ITEMBEG = .AED_W_ITEMBEG + 1;		! First char past delimiter

AED_W_ITEMEND = .AED_W_ITEMBEG;
IF .AED_W_ITEMEND LSS .AED_T_CURLINE[LINE_W_SIZE]
THEN
    BEGIN
    UNTIL .BUFFER[.AED_W_ITEMEND] EQL ')'
       OR .BUFFER[.AED_W_ITEMEND] EQL ','
       OR .BUFFER[.AED_W_ITEMEND] EQL '('
       OR (.AED_B_FIELD GTR 0 AND .BUFFER[.AED_W_ITEMEND] EQL '+')
    DO
	BEGIN
	IF .BUFFER[.AED_W_ITEMEND] EQL '['
	THEN
	    BEGIN
	    UNTIL .BUFFER[.AED_W_ITEMEND] EQL ']'
	    DO AED_W_ITEMEND = .AED_W_ITEMEND + 1;
	    END;
	AED_W_ITEMEND = .AED_W_ITEMEND + 1;
	IF .AED_W_ITEMEND GEQ .AED_T_CURLINE[LINE_W_SIZE] THEN EXITLOOP;
	END;
    END;
IF .AED_W_ITEMEND GTR 0 THEN AED_W_ITEMEND = .AED_W_ITEMEND - 1;
INDEX[0] = .AED_W_ITEMEND + 1;

RETURN;

END;						! End of routine AED_SELECTFIELD

GLOBAL ROUTINE AED_SELECTITEM (INDEX) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine incrementally selects the various items for an ACE field.
!	The item selection is based upon the ACE type.  Syntax is checked.
!
! CALLING SEQUENCE:
!	AED_SELECTITEM (ARG1)
!
! INPUT_PARAMETERS:
!	ARG1: address of a word containing the current buffer position
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	AED_B_ITEM: current item index (position)
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

MAP
	INDEX		: REF VECTOR [,WORD];	! Address of the size word

OWN
	JOURNAL_ACES	: INITIAL (0);		! 0 = no journaling ACEs
						! 1 = journaling ACEs allowed

LOCAL
	ITEM_DESC	: REF $BBLOCK,		! Address of item descriptor
	OLD_ITEM_END,				! Where old item name ends
	PARTIAL_LENGTH,				! Size of remaining segment
	BUFFER		: REF VECTOR [,BYTE],	! Address of text storage
	MAX_ITEM_VAL;				! Upper limit to ITEM pointer

BUFFER = AED_T_CURLINE[LINE_T_TEXT];

! Set the next item index.

AED_B_ITEM = .AED_B_ITEM + 1;

! Range check the upper limit based upon the field type.  If the upper bound
! is exceeded, wrap to zero.

IF .AED_B_FIELD EQL 0
THEN MAX_ITEM_VAL = MAX_TYPE_INDEX
ELSE IF .AED_B_FIELD GEQ 2 AND .AED_B_FIELD LEQ 5
     THEN MAX_ITEM_VAL = MAX_FLAG_INDEX
     ELSE MAX_ITEM_VAL = MAX_ACCESS_INDEX;
IF .AED_B_ITEM GTR .MAX_ITEM_VAL THEN AED_B_ITEM = 0;

! If this is the first field, set up the ACE type.  Also, make sure that
! INFO and JNLID ACEs are skipped.  Lastly, skip the DIRDEF ACE type for
! non-directory objects.

IF .AED_B_FIELD EQL 0 THEN AED_B_ACETYPE = .ITEM_TYPE[.AED_B_ITEM, ITEM_VALUE];
WHILE .AED_B_ACETYPE EQL ACE$C_INFO
   OR .AED_B_ACETYPE EQL ACE$C_JNLID
   OR .AED_B_ACETYPE EQL ACE$C_AUDIT
   OR (.AED_B_ACETYPE EQL ACE$C_DIRDEF AND NOT .AED_L_FLAGS[AED_V_DIRECTORY])
   OR (NOT .JOURNAL_ACES AND (.AED_B_ACETYPE EQL ACE$C_BIJNL OR
			      .AED_B_ACETYPE EQL ACE$C_AIJNL OR
			      .AED_B_ACETYPE EQL ACE$C_ATJNL))
DO
    BEGIN
    AED_B_ITEM = .AED_B_ITEM + 1;
    IF .AED_B_ITEM GTR .MAX_ITEM_VAL THEN AED_B_ITEM = 0;
    AED_B_ACETYPE = .ITEM_TYPE[.AED_B_ITEM, ITEM_VALUE];
    END;

! If beyond the end of the ACE, don't even try for an item.

IF .AED_B_FIELD GTR 6 + .MAX_ITEM_VAL + 1 THEN RETURN;

!------------------------------------------------------------------------------
! The order of the following three tests is important because of the ordering
! assumed in the item tables.  The first test must be for the SUCCESS and
! FAILURE items in a KEYID ACE (this test may bump the item index up).  The
! next test must be for the NONE item (this may wrap the item index to 0).  The
! final test must be for the DEFAULT item (this is at item index 0).

! Skip over the SUCCESS and FAILURE items if not AUDIT or ALARM ACEs.

IF .AED_B_FIELD GEQ 7 AND .AED_B_ACETYPE EQL ACE$C_KEYID AND .AED_B_ITEM EQL 5
THEN AED_B_ITEM = 7;

! If pointing to the NONE item, and there has already been something chosen
! for the field, skip it.

IF .AED_B_FIELD GEQ 3 AND .AED_B_FIELD LEQ 5 AND .AED_B_ITEM EQL MAX_FLAG_INDEX
OR .AED_B_FIELD GEQ 8 AND (.AED_B_ACETYPE EQL ACE$C_KEYID
			   OR .AED_B_ACETYPE EQL ACE$C_AUDIT
			   OR .AED_B_ACETYPE EQL ACE$C_ALARM) AND .AED_B_ITEM EQL MAX_ACCESS_INDEX
THEN AED_B_ITEM = 0;

! If the object is not a directory, and the item index points to the DEFAULT
! item, and the field index is within the OPTIONS field, skip to the next
! item.

IF NOT .AED_L_FLAGS[AED_V_DIRECTORY]
AND .AED_B_FIELD GEQ 2 AND .AED_B_FIELD LEQ 5 AND .AED_B_ITEM EQL 0
THEN AED_B_ITEM = .AED_B_ITEM + 1;

! This is the end of the carefully ordered tests.
!------------------------------------------------------------------------------

! Select the desired item descriptor from the appropriate field name table.

ITEM_DESC = (SELECTONE .AED_B_FIELD OF
	     SET
		[0]:		ITEM_TYPE[.AED_B_ITEM, ITEM_DSC_SIZE];
		[1 TO 5]:	ITEM_FLAG[.AED_B_ITEM, ITEM_DSC_SIZE];
		[6 TO 14]:	ITEM_ACCESS[.AED_B_ITEM, ITEM_DSC_SIZE];
	     TES);

! Replace the old item name with the new one.

OLD_ITEM_END = MINU (.AED_W_ITEMEND, .AED_T_CURLINE[LINE_W_SIZE] - 1);
AED_W_ITEMEND = .AED_W_ITEMBEG + .ITEM_DESC[DSC$W_LENGTH] - 1;

! See if it is necessary to wrap the line.

IF .AED_W_ITEMEND GTR .AED_L_PAGEWIDTH
THEN
    BEGIN
    AED_SEGSPLIT (%REF (.AED_W_ITEMBEG), 1, 0);
    AED_W_ITEMEND = .AED_W_ITEMEND - .AED_W_ITEMBEG;
    OLD_ITEM_END = .OLD_ITEM_END - .AED_W_ITEMBEG;
    AED_W_ITEMBEG = 0;
    END;

! Replace the item.

CH$COPY (.AED_T_CURLINE[LINE_W_SIZE] - .OLD_ITEM_END - 1, BUFFER[.OLD_ITEM_END + 1],
	 0,
	 511 - .AED_W_ITEMEND, BUFFER[.AED_W_ITEMEND + 1]);	! Remove old name
CH$MOVE (.ITEM_DESC[DSC$W_LENGTH], .ITEM_DESC[DSC$A_POINTER],
	 BUFFER[.AED_W_ITEMBEG]);		! Insert new name
AED_T_CURLINE[LINE_W_SIZE] = .AED_T_CURLINE[LINE_W_SIZE] - .OLD_ITEM_END + .AED_W_ITEMEND;
INDEX[0] = .AED_W_ITEMEND + 1;
AED_L_FLAGS[AED_V_MODIFIED] = 1;		! Note ACE has changed

RETURN 0;

END;						! End of routine AED_SELECTITEM

GLOBAL ROUTINE AED_SETACETYPE (INDEX) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine selects the text corresponding to the descired ACE type
!	based upon the previous ACE type (AED_B_ACETYPE) if available, or the
!	current item index (AED_B_ITEM) if not.
!
! CALLING SEQUENCE:
!	AED_SETACETYPE (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of the word containing the current buffer position
!
!
! IMPLICIT INPUTS:
!	AED_B_ACETYPE: current ACE type if non-zero
!	AED_B_ITEM: current item index if above is zero
!
! OUTPUT PARAMETERS:
!	ARG1: address of the word to contain the new buffer position
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

MAP
	INDEX		: REF VECTOR [,WORD];	! Address of the size word

LOCAL
	BUFFER		: REF VECTOR [,BYTE],	! Address of text storage
	ITEM_DESC	: REF $BBLOCK;		! Address of item descriptor

! Set up the initial delimiter.

BUFFER = AED_T_CURLINE[LINE_T_TEXT];
BUFFER[0] = '(';

! Determine where the ACE type is to be set from, and set it up.

IF .AED_B_ACETYPE EQL 0
THEN ITEM_DESC = ITEM_TYPE[.AED_B_ACETYPE - 1, ITEM_DSC_SIZE]
ELSE ITEM_DESC = ITEM_TYPE[.AED_B_ITEM, ITEM_DSC_SIZE];

CH$MOVE (.ITEM_DESC[DSC$W_LENGTH], .ITEM_DESC[DSC$A_POINTER], BUFFER[1]);
AED_T_CURLINE[LINE_W_SIZE] = INDEX[0] = .ITEM_DESC[DSC$W_LENGTH] + 1;

RETURN;

END;					! End of routine AED_SETACETYPE

END
ELUDOM
