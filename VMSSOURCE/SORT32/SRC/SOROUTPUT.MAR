	.TITLE	SOR$OUTPUT		Output text
	.IDENT	'V04-000'		; File: SOROUTPUT.MAR Edit: PDG016
	.SBTTL	Copyright Notice
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.PAGE
	.SBTTL	Program description
;++
;
; FACILITY:
;
;	Output text by using $PUTMSG.
;
; ABSTRACT:
;
;	NONE
;
; ENVIRONMENT:
;
;	Native mode, User mode, AST reentrant
;
; AUTHOR:
;
;	Peter D Gilbert, June 1982
;
; MODIFIED BY:
;
;	T03-016	PDG016	25-Aug-1982
;		Add a compile-time variable indicating whether to use one
;		$PUTMSG per line, or to use as few $PUTMSG calls as possible.
;	T03-015		Original
;--

	.DSABL	GLOBAL		; Externals must be explicitly declared
	.EXTRN	SYS$FAOL	; System service to format ASCII text
	.EXTRN	SYS$PUTMSG	; System service to output a message
	$SHRDEF			; Define SHR$_TEXT

OPT =	1			; If non-zero, minimize $PUTMSG calls
				; If zero, use one $PUTMSG per line

	.PSECT	SOR$RO_CODE	NOVEC,NOWRT,RD,EXE,SHR,LCL,REL,CON,PIC,LONG

CTRSTR =	4		; Offset from AP of control string
PRMLST =	8		; Offset from AP of parameter list
K_PUTMSG =	255		; Maximum size for $PUTMSG
K_BUFSIZ =	1024		; Buffer size
DSC =		-8		; Offset from FP of descriptor
LEN =		-8		; Offset from FP of length
ADR =		-4		; Offset from FP of address
CRLF:	.BYTE	^X0D, ^X0A	; Carraige-return, Line-feed

	.ENTRY	SOR$$OUTPUT, ^M<R2,R3,R4,R5>
	;
	; Allocate a descriptor and a buffer on the stack
	;
	PUSHAB	-K_BUFSIZ-8(SP)		; Push buffer address
	PUSHL	#K_BUFSIZ		; Push buffer length
	MOVL	4(SP), SP		; Allocate the buffer
	PUSHAB	PRMLST(AP)		; Push address of parameter list
	PUSHAB	DSC(FP)			; Push address of buffer descriptor
	PUSHAB	LEN(FP)			; Push address for returned length
	PUSHL	CTRSTR(AP)		; Push address of CTRSTR descriptor
	CALLS	#4, G^SYS$FAOL		; Format the output
	BLBC	R0, 99$			; Check status
	;
	; Form the message vector on the stack
	;
	PUSHAB	DSC(FP)		; Push address of descriptor
	PUSHL	#^X00000001	; Push FAO count, Message flags
	PUSHL	#9@16+SHR$_TEXT	; Push message ID
	PUSHL	#^X00010003	; Push count of longwords, Flags (only message)
	;
	; Form the argument list on the stack
	;
	CLRQ	-(SP)		; Two null parameters
	CLRL	-(SP)		; One null parameter
	PUSHAB	12(SP)		; Address of message vector
	PUSHL	#4		; Number of arguments
	;
	; See whether one $PUTMSG will suffice
	;
10$:	CLRL	R4			; Clear the remaining length
	.IF	NE, OPT
	CMPW	LEN(FP), #K_PUTMSG	; Short enough for one $PUTMSG?
	BLEQ	90$			; Branch if short enough
	MOVL	ADR(FP), R3		; Get address of string
	MOVL	#K_PUTMSG, R2		; Get maximum length
20$:	MOVQ	R2, R4			; Save descriptor of remaining bytes
	MATCHC	#2, CRLF, R2, (R3)	; Find a CRLF
	BEQL	20$			; Branch if found
30$:	CMPL	R5, ADR(FP)		; Same address?
	BEQL	40$			; Branch if no CRLF found
	SUBL3	ADR(FP), R5, R0		; Compute length to output (plus 2)
	SUBL3	R0, LEN(FP), R4		; Compute remaining length
	SUBL3	#2, R0, LEN(FP)		; Compute length to output
	BRB	90$			; Go output the text
	.ENDC
	.IF	EQ, OPT
	MOVL	ADR(FP), R5
	.ENDC
40$:	MATCHC	#2, CRLF, LEN(FP), (R5)	; Find first CRLF anywhere
	SUBL2	R2, LEN(FP)		; Subtract the remaining length
	SUBL2	#2, LEN(FP)		; And two bytes for the CRLF
	ADDL2	R0, LEN(FP)		; Add two bytes back if CRLF not found
	MOVQ	R2, R4			; Save string descriptor of remainder
90$:	CALLG	(SP), G^SYS$PUTMSG	; Put out the message
	BLBC	R0, 99$			; Check status
	MOVQ	R4, DSC(FP)		; Move remainder into the descriptor
	TSTL	LEN(FP)			; Is remaining length zero?
	BNEQ	10$			; No, go output some more
99$:	RET				; Return

	.END
