%TITLE 'SMG$INTERFACE_TERM_TABLE - User Interface to Termtable'
MODULE SMG$INTERFACE_TERM_TABLE (
		IDENT = '1-005'	! File: SMGUSRTRM.B32 Edit: STAN1005
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Screen Management
!
! ABSTRACT:
!
!	This module contains routines which return device-specific
!	information about terminals, including, but not
!	limited to, the proper character sequences to perform
!	sundry functions.
!
! ENVIRONMENT:	User mode, Shared library routines.
!
! AUTHOR: P. Levesque, CREATION DATE: 9-Nov-1983
!
! MODIFIED BY:
!
! 1-005 - Remove use of FNM= construct which produces code that
!	  is not appropriate for use within a shared image.
!	  STAN 18-Mar-1984.
! 1-004 - When fetching the terminal type from a private section,
!	  'unbias' the number.  PLL 22-Feb-1984
! 1-003 - Allow shared use of private sections. STAN. 14-Feb-1984.
! 1-002 - Allow positive terminal types. STAN. 8-Feb-1984.
! 1-001	- Original.  PLL 9-Nov-1983
!--

%SBTTL 'Declarations'
!
! SWITCHES:
!

!
! LINKAGES:
!
!	NONE
!
! INCLUDE FILES:
!

REQUIRE 'SRC$:SMGPROLOG';		! defines psects, macros, etc.

LIBRARY 'RTLML:SMGTPALIB';		! TERMTABLE macros, defs, etc

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE

    SMG$INIT_TERM_TABLE,		! Setup term table for future calls
    SMG$INIT_TERM_TABLE_BY_TYPE,	! Same as above except input is
					! device type instead of device name
    SMG$GET_TERM_DATA,			! Get terminal characteristics
    SMG$DEL_TERM_TABLE,			! Delete term table

    MAP_PRIV_SECTION,			! Map private TERMTABLE.EXE as a
					! temporary section
    MAP_GBL_SECTION,			! Map to system TERMTABLE.EXE in
					! global section
    SEARCH_FOR_TERM_DEF,		! Search an index for a given terminal
					! name
    SEARCH_FOR_TERM_DEF_BY_TYPE,	! Search an index for a given terminal
					! type
    DECODE_ARITH_STRING;		! Decode arithmetic data

!
! MACROS:
!
!

MACRO $BIAS_TYPE_NUMBER (TERM_TAB, TYPE, LENGTH, BUFFER) =
!+
! 	If this definition is from a private table, terminal type
!	numbers must be biased so that they are in the range -65 to -127.
!	(Note that this bias can't be applied at compile time because it's
!	not known whether the table will be mapped privately or globally.)
!
!	Since we can't modify the type number in the definition (the section
!	is read only), we must copy the type number directly into the user's
!	buffer.
!-
BEGIN
LOCAL
    BIAS_TYPE;

!+
! Compare the terminal definition address with the starting address of
! the private section.  If there is no private section or the terminal
! definition is at a lower address, then this must be a global definition.
!-
    BIAS_TYPE = TYPE;			! init to no bias

    IF .PRIV_SECTION_ADDR NEQ 0 AND
       TERM_TAB GEQ .PRIV_SECTION_ADDR
    THEN
	!+
	! Don't bias the type of a DEC terminal (which will have
	! a positive number).
	!-
	IF TYPE LSS 0
	THEN
	    BIAS_TYPE = .BIAS_TYPE + K_PRIV_TYPE;

    CH$MOVE (LENGTH, BIAS_TYPE, BUFFER);
				! put in the user's buffer
END%;

MACRO $UNBIAS_TYPE_NUMBER (TERM_TAB, TYPE) =
BEGIN
!+
! Compare the terminal definition address with the starting address of
! the private section.  If there is no private section or the terminal
! definition is at a lower address, then this must be a global definition.
!-
    IF .PRIV_SECTION_ADDR NEQ 0 AND
       TERM_TAB GEQ .PRIV_SECTION_ADDR
    THEN
	!+
	! Don't bias the type of a DEC terminal (which will have
	! a positive number).
	!-
	IF .TYPE LSS 0
	THEN
	    TYPE = .TYPE - K_PRIV_TYPE;

END;%;

!+
! Some string capabilities expect parameters.  If the caller does not
! supply any parameters, we default them to 1's.  The caller must supply
! all or none of the parameters.
!-
MACRO $CHECK_SUFFICIENT_USER_ARGS =
BEGIN
    IF NOT NULLPARAMETER (INPUT_ARG_VECTOR)
    THEN
	IF .INPUT_ARG_VECTOR [0] NEQ 0
	THEN
	    BEGIN
	    IF .INPUT_ARG_VECTOR [0] NEQ .SMG$$NUM_PARAMS [..REQUEST_CODE]
	    THEN
	    	RETURN (SMG$_NO_ARGS);	! require all or none
  
	    ! Caller provided args - overwrite defaults

	    INCR CTR FROM 0 TO .SMG$$NUM_PARAMS [..REQUEST_CODE] - 1 DO
	    	LOCAL_ARGS [.CTR] = .INPUT_ARG_VECTOR [.CTR+1];
	    END;
END;%;

!
! EQUATED SYMBOLS:
!

!
! FIELDS:
!
!	NONE
!
! PSECTS:
!

!
! STRUCTURES:
!


!
! OWN STORAGE:
!

!+
! The following are used to avoid mapping a section twice.
!-

OWN
    GBL_SECTION_ADDR : INITIAL (0) VOLATILE,
    PRIV_SECTION_ADDR : INITIAL (0) VOLATILE,
    PRIV_SECTION_ADDR_END : INITIAL (0) VOLATILE,
    PRIV_SECTION_CHANNEL : INITIAL (0) VOLATILE;

!+
! We need the byte equivalents of some longword constants.
! Bliss doesn't think it's possible for a byte to be equal
! to a longword and it is much more efficient for us to
! deal with bytes.
!-
OWN
    K_OPERAND : BYTE INITIAL (SMG$K_OPERAND <0,8>),
    K_SUBSTITUTE : BYTE INITIAL (SMG$K_SUBSTITUTE <0,8>),
    K_ADD : BYTE INITIAL (SMG$K_ADD <0,8>),
    K_SUBTRACT : BYTE INITIAL (SMG$K_SUBTRACT <0,8>),
    K_MULTIPLY : BYTE INITIAL (SMG$K_MULTIPLY <0,8>),
    K_DIVIDE : BYTE INITIAL (SMG$K_DIVIDE <0,8>),
    K_STORE : BYTE INITIAL (SMG$K_STORE <0,8>);

!
! Literals used in various routines
!

LITERAL
    K_MATCH = 0,
    K_OFF = 0,
    K_ON = 1,
    K_PRIV_TYPE = -65;		! private types are -65 to -127,
				! system types are -2 to -64

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    SMG$$NUMBER_PARAMETERS,		! init # params for caps
    STR$COPY_DX,			! copy source string to destination
    STR$CASE_BLIND_COMPARE;		! compare 2 strings without
					! regard for upper/lower case

EXTERNAL
    SMG$_WRONUMARG,	! wrong number of arguments
    SMG$_TABID_MIS,	! Termtable Id Mismatch
    SMG$_UNDTERNAM,	! Undefined terminal name
    SMG$_UNDTERTYP,	! Undefined terminal type
    SMG$_PRISECMAP,	! Private terminal table used
    SMG$_GBLSECMAP,	! System terminal table used
    SMG$_UNDTERNOP,	! Undefined terminal - no private termtable
    SMG$_UNDTERNOS,	! Undefined terminal - no system termtable
    SMG$_INVTERTAB,	! Invalid Termtable
    SMG$_INVREQCOD,	! Invalid request code
    SMG$_FATERRLIB,	! Fatal error in library
    SMG$_NO_ARGS;	! No arguments to substitute

EXTERNAL
    SMG$$NUM_PARAMS : VECTOR [,BYTE];
			! number of parameters for each string cap

%SBTTL 'SMG$INIT_TERM_TABLE  - Initialize terminal table'
GLOBAL ROUTINE SMG$INIT_TERM_TABLE ( 
		P_TERM_NAME,
		P_TERM_TABLE	 ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine points to a specific entry in the terminal capabilities
!	file, TERMTABLE.EXE.  TERM$TABLOC is searched first for a private
!	copy of TERMTABLE.EXE, and if this fails the system definition file 
!	(in global section SMG$TERMTABLE) is used.  TERMTABLE.EXE must 
!	previously have been created by compiling TERMTABLE.TXT.  The address 
!	returned by this routine is used as an input to SMG$GET_TERM_DATA, 
!	which fetches capability data.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SMG$INIT_TERM_TABLE (P_TERM_NAME.rt.dx,
!					        P_TERM_TABLE.wa.r)
!
! FORMAL PARAMETERS:
!
!	P_TERM_NAME		Name of the terminal - must be
!				an entry in TERMTABLE.EXE
!
!	P_TERM_TABLE		Address of the table created
!
! IMPLICIT INPUTS:
!
!	Contents of general terminal capabilities file.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SMG$_PRISECMAP		success - definition found in private TERMTABLE
!	SMG$_GBLSECMAP		success - definition found in global TERMTABLE
!	SMG$_UNDTERNAM		undefined terminal name
!	SMG$_UNDTERNOP		undefined terminal - no private terminal table
!	SMG$_UNDTERNOS		undefined terminal - no system terminal table
!	RMS errors
!
! SIDE EFFECTS:
!
!	NONE
!--
    BEGIN
    LOCAL
	FOUND : INITIAL (1),		! flag to indicate term def found
	TMP_TERM_DEF,			! temp. place to store def addr
	PREV_AST_STATE,			! retd by $SETAST to indicate AST
					! delivery was enabled or disabled
	PRIV_STATUS : INITIAL (1),	! status retd BY MAP_PRIV_SECTION
	GBL_STATUS : INITIAL (1),	! status retd by MAP_GBL_SECTION
	RET_STATUS : INITIAL (1);	! status to return to caller

    $SMG$VALIDATE_ARGCOUNT (2,2);

!+
! First we look for a private copy of TERMTABLE.EXE.  If
! PRIV_SECTION_ADDR is already set, then we don't need to map 
! the section again.
!-

    PREV_AST_STATE = $SETAST (ENBFLG = K_OFF);	! disable ASTs while setting addr

    IF .PRIV_SECTION_ADDR EQL 0
    THEN
	PRIV_STATUS = MAP_PRIV_SECTION ();
					! map priv section if possible

    IF .PREV_AST_STATE EQL SS$_WASSET
    THEN
        $SETAST (ENBFLG = K_ON);	! re-enable ASTs


!+
! See if the requested terminal definition is in the private section.
!-

    IF .PRIV_SECTION_ADDR NEQ 0
    THEN
	BEGIN
	!+
	! This routine will search the entire terminal index.
	!-
	FOUND = SEARCH_FOR_TERM_DEF (.PRIV_SECTION_ADDR, .P_TERM_NAME, 
				     TMP_TERM_DEF);
	RET_STATUS = SMG$_PRISECMAP;
	END;

!+
! If there was no private copy of Termtable or the requested terminal definition
! wasn't defined there, then map to the global system copy.
!-

    IF .FOUND NEQ K_MATCH
    THEN
	BEGIN

	PREV_AST_STATE = $SETAST (ENBFLG = K_OFF);	! disable ASTs

	IF .GBL_SECTION_ADDR EQL 0 
 	THEN
	    GBL_STATUS = MAP_GBL_SECTION ();

	IF .PREV_AST_STATE EQL SS$_WASSET
   	THEN
	    $SETAST (ENBFLG = K_ON);			! re-enable ASTs

	IF .GBL_SECTION_ADDR NEQ 0
	THEN
	    BEGIN
	    FOUND = SEARCH_FOR_TERM_DEF (.GBL_SECTION_ADDR, .P_TERM_NAME,
				         TMP_TERM_DEF);
	    RET_STATUS = SMG$_GBLSECMAP;
	    END;
	END;

!+
! When we get here, we have looked in both the private and global copies
! of Termtable.exe.  If we failed to find the requested terminal definition,
! return an error.
!-

    IF .FOUND NEQ K_MATCH
    THEN
	BEGIN
	IF NOT .PRIV_STATUS
	THEN
	    RETURN (SMG$_UNDTERNOP)
	ELSE
	    IF NOT .GBL_STATUS
	    THEN
		RETURN (SMG$_UNDTERNOS)
	ELSE
	    RETURN (SMG$_UNDTERNAM)
	END
    ELSE
	.P_TERM_TABLE = .TMP_TERM_DEF;

    SMG$$NUMBER_PARAMETERS ();		! init expected # params for caps
					! for future get_term_data calls

    RETURN (.RET_STATUS);		! return success which also reveals
					! where we found the defintition

    END;				! end of routine SMG$INIT_TERM_TABLE

%SBTTL 'SMG$INIT_TERM_TABLE_BY_TYPE - Init terminal def address given type'
GLOBAL ROUTINE SMG$INIT_TERM_TABLE_BY_TYPE (
				     P_TERM_TYPE,
				     P_TERM_TABLE,
				     P_TERM_NAME ) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine points to a specific entry in the terminal capabilities
!	file, TERMTABLE.EXE.  TERM$TABLOC is searched first for a private
!	copy of TERMTABLE.EXE, and if this fails the system definition file 
!	(in global section SMG$TERMTABLE) is used.  TERMTABLE.EXE must 
!	previously have been created by compiling TERMTABLE.TXT.  The address 
!	returned by this routine is used as an input to SMG$GET_TERM_DATA, 
!	which fetches capability data.
!
!	This routine is similar to SMG$INIT_TERM_TABLE except that it
!	accepts a device type rather than a device name as input.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SMG$INIT_TERM_TABLE_BY_TYPE (P_TERM_TYPE.rb.r,
!					        	P_TERM_TABLE.wa.r
!						       [,P_TERM_NAME.wt.dx])
!
! FORMAL PARAMETERS:
!
!	P_TERM_TYPE		Device type of the terminal - must be
!				an entry in TERMTABLE.EXE.  (The device
!				type can be obtained via a call to $GETDVIW.)
!				This is the address of a signed byte.
!
!	P_TERM_TABLE		Address of the table created
!
!	P_TERM_NAME		Optional descriptor to contain the name
!				associated with this device type
!
! IMPLICIT INPUTS:
!
!	Contents of general terminal capabilities file.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SMG$_PRISECMAP		success - definition found in private TERMTABLE
!	SMG$_GBLSECMAP		success - definition found in global TERMTABLE
!	SMG$_UNDTERTYP		undefined terminal type
!	SMG$_UNDTERNOP		undefined terminal - no private termtable
!	SMG$_UNDTERNOS		undefined terminal - no system termtable
!
! SIDE EFFECTS:
!
!	NONE
!--
    BEGIN
    BUILTIN
	NULLPARAMETER;
    LOCAL
	FOUND : INITIAL (1),		! flag to indicate term def found
	TMP_TERM_DEF,			! temp. place to store def addr
	TMP_TERM_NAME : REF VECTOR [,BYTE], ! temp. place to store name addr
	PREV_AST_STATE,			! retd by $SETAST to indicate ASTs
					! previously enabled or disabled
	PRIV_STATUS : INITIAL (1),	! status retd by MAP_PRIV_SECTION
	GBL_STATUS : INITIAL (1),	! status retd by MAP_GBL_SECTION
	RET_STATUS : INITIAL (1);			
    BIND
	TERM_TYPE = .P_TERM_TYPE : SIGNED BYTE;

    $SMG$VALIDATE_ARGCOUNT (2,3);

    .P_TERM_TABLE = 0;			! init

!+
! First we look for a private copy of TERMTABLE.EXE.  If
! PRIV_SECTION_ADDR is already set, then we don't need to map 
! the section again.
!-

    PREV_AST_STATE = $SETAST (ENBFLG = K_OFF);	! disable ASTs while setting addr

    IF .PRIV_SECTION_ADDR EQL 0
    THEN
	PRIV_STATUS = MAP_PRIV_SECTION ();	! map priv section if possible

    IF .PREV_AST_STATE EQL SS$_WASSET
    THEN
        $SETAST (ENBFLG = K_ON);		! re-enable ASTs


!+
! See if the requested terminal definition is in the private section.
! If this terminal type number is negative but not in the private range, skip this
! and proceed to check the global table.
!-

    IF .PRIV_SECTION_ADDR NEQ 0 AND
       (.TERM_TYPE LSS K_PRIV_TYPE  OR .TERM_TYPE GEQ 0)
    THEN
	BEGIN
	!+
	! This routine will search the entire terminal index.
	!-
	FOUND = SEARCH_FOR_TERM_DEF_BY_TYPE (.PRIV_SECTION_ADDR, .TERM_TYPE, 
				     	     TMP_TERM_DEF, TMP_TERM_NAME);
	RET_STATUS = SMG$_PRISECMAP;
	END;

!+
! If there was no private copy of Termtable or the requested terminal definition
! wasn't defined there, then map to the global system copy.
!
! To prevent private and global Termtable definitions from having the same
! terminal type numbers assigned, we always bias private ones by -65.  No
! need to check the global definition for a private number.
! Positive types and negative types larger than or equal to K_PRIV_TYPE are ok.
!-

    IF .FOUND NEQ K_MATCH AND
       .TERM_TYPE GEQ K_PRIV_TYPE
    THEN
	BEGIN

	PREV_AST_STATE = $SETAST (ENBFLG = K_OFF);	! disable ASTs

	IF .GBL_SECTION_ADDR EQL 0 
 	THEN
	    GBL_STATUS = MAP_GBL_SECTION ();

	IF .PREV_AST_STATE EQL SS$_WASSET
	THEN
	    $SETAST (ENBFLG = K_ON);			! re-enable ASTs

	IF .GBL_SECTION_ADDR NEQ 0
	THEN
	    BEGIN
	    FOUND = SEARCH_FOR_TERM_DEF_BY_TYPE (.GBL_SECTION_ADDR, 
						 .TERM_TYPE,
				         	 TMP_TERM_DEF,
						 TMP_TERM_NAME);
	    RET_STATUS = SMG$_GBLSECMAP;
	    END;
	END;

!+
! When we get here, we have looked in both the private and global copies
! of Termtable.exe.  If we failed to find the requested terminal definition,
! return an error.
!-

    IF .FOUND NEQ K_MATCH
    THEN
	BEGIN
	IF NOT .PRIV_STATUS
	THEN
	    RETURN (SMG$_UNDTERNOP)
	ELSE
	    IF NOT .GBL_STATUS
	    THEN
	 	RETURN (SMG$_UNDTERNOS)
	ELSE
	    RETURN (SMG$_UNDTERNAM)
	END
    ELSE
	BEGIN
	.P_TERM_TABLE = .TMP_TERM_DEF;
					! return addr of terminal definition
	IF NOT NULLPARAMETER (P_TERM_NAME)
	THEN
	    BEGIN			! return term name if requested
	    LOCAL
	    	TERM_NAME_DESC : BLOCK [8,BYTE];

	    TERM_NAME_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    TERM_NAME_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	    TERM_NAME_DESC [DSC$W_LENGTH] = .TMP_TERM_NAME [0];
	    TERM_NAME_DESC [DSC$A_POINTER] = TMP_TERM_NAME [2];

	    STR$COPY_DX (.P_TERM_NAME, TERM_NAME_DESC);
	    END;
	END;

    SMG$$NUMBER_PARAMETERS ();		! init expected # params for caps
					! for future get_term_data calls

    RETURN (.RET_STATUS);	! success indicating where we found
				! the definition

    END;			! end of routine SMG$INIT_TERM_TABLE_BY_TYPE

%SBTTL 'SMG$GET_TERM_DATA  - Get terminal data'
GLOBAL ROUTINE SMG$GET_TERM_DATA ( 
				P_TERM_TABLE,
				REQUEST_CODE,
				MAX_BUFFER_LENGTH,
				RETURN_LENGTH,
				BUFFER_ADDRESS,
				INPUT_ARG_VECTOR : REF VECTOR [,LONG]
		 		) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts the requested information from
!	the specified terminal table.  The terminal table address must
!	have been obtained by a call to SMG$INIT_TERM_TABLE or
!	SMG$INIT_TERM_TABLE_BY_TYPE prior to calling this routine.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SMG$GET_TERM_DATA (P_TERM_TABLE.ra.r,
!					     REQUEST_CODE.rl.r,
!					     MAX_BUFFER_LENGTH.rl.r,
!					     RETURN_LENGTH.wl.r,
!					     BUFFER_ADDRESS.wa.r
!					     [,INPUT_ARG_VECTOR.rl.r]
!
! FORMAL PARAMETERS:
!
!	P_TERM_TABLE  	        Address of terminal capabilities table
!				for desired terminal type.  (See 
!				SMG$INIT_TERM_TABLE to obtain this address.)
!
!	REQUEST_CODE 		Longword constant of the form
!				SMG$K_xyz (defined in Digital-supplied
!				library).  Specifies desired capability.
!				Xyz corresponds to a keyword in the terminal
!				definition (for instance ANSI_CRT).
!
!	MAX_BUFFER_LENGTH 	Longword number of bytes of the buffer 
!				in which the requested capability data will be
!				returned.  Most capabilities will fit in
!				20 bytes or less - you will probably want
!				to allocate a little extra.
!
!	RETURN_LENGTH		Longword length of the data returned.
!				It indicates how many bytes of the buffer are
!				actually used.
!
!	BUFFER_ADDRESS  	Longword address of the buffer in which
!				to return the capability data.
!
!	INPUT_ARG_VECTOR	Optional argument used only for a 
!				'variable' capability.  Address of a longword
!				vector.  The number of longwords which follow
!				must be in the first longword.  This vector
!				is used with capability string containing
!				! or %.  You may provide the correct number of
!				values to be used with each ! and % in the 
!				string or you may default all of the values.
!				SMG$GET_TERM_DATA will supply a default value
!				of 1.
!
!
! IMPLICIT INPUTS:
!
!	Contents of system terminal capabilities file.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SMG$_INVTERTAB		invalid terminal table address
!	SMG$_INVREQCOD		invalid request code
!	SS$_NORMAL		success
!
! SIDE EFFECTS:
!
!	NONE
!--
    BEGIN
    BUILTIN
	NULLPARAMETER;
    LOCAL
	DATA : REF VECTOR [,BYTE,SIGNED],! terminal data
	DATA_LENGTH;			! length of terminal data
    BIND
	TERM_DEF = ..P_TERM_TABLE,	! start of terminal definition
	TERM_DEF_PTRS = TERM_DEF : VECTOR [,WORD],
					! start of data pointers
	START_DEF_DATA = TERM_DEF_PTRS + SMG$K_CAP_PTRS_SIZE;
					! start of actual data

    $SMG$VALIDATE_ARGCOUNT (5, 6);

!+
! Validate that we have a valid TERMTABLE.  The terminal
! definition should contain an id in the first byte.
!-

    IF .TERM_DEF <0,8> NEQ SMG$K_TERM_DEF_ID
    THEN
	RETURN (SMG$_INVTERTAB);	

!+
! Make sure this is a valid request code.
!-

    IF ..REQUEST_CODE LSS SMG$K_MIN_REQUEST_CODE OR
       ..REQUEST_CODE GTR SMG$K_MAX_REQUEST_CODE
    THEN
	RETURN (SMG$_INVREQCOD);

!+
! Find the requested terminal data.
!-

    .RETURN_LENGTH = 0;			! init 

    IF .TERM_DEF_PTRS [..REQUEST_CODE] EQL 0
    THEN
	RETURN (SS$_NORMAL);

    DATA = .TERM_DEF_PTRS [..REQUEST_CODE] + TERM_DEF;
				! offset + start of data area
    DATA_LENGTH = .DATA [0];

    IF .DATA_LENGTH EQL 0
    THEN
	RETURN (SS$_NORMAL);	! requested data not available

!+
! Branch on whether additional processing is required.
!-

    IF .DATA_LENGTH GTR 0
    THEN
	BEGIN			! static data - copy into user's buffer
	LOCAL
	    RET_LEN;
    
        RET_LEN = MIN (..MAX_BUFFER_LENGTH, .DATA_LENGTH);

	IF ..REQUEST_CODE EQL SMG$K_VMS_TERMINAL_NUMBER
	THEN
	    $BIAS_TYPE_NUMBER (..P_TERM_TABLE, .DATA [2], .RET_LEN, .BUFFER_ADDRESS)
				! private numbers must be -65 to -127
	ELSE
	    CH$MOVE (.RET_LEN, DATA [2], .BUFFER_ADDRESS);
	!+
        ! Return length to caller.
        !-
	IF .RET_LEN NEQ 0
	THEN
	    .RETURN_LENGTH = .RET_LEN;
	END			! static data - copy into user's buffer

    ELSE

	BEGIN			! dynamic - additional processing needed
	LOCAL
	    LOCAL_ARGS : VECTOR [10,LONG] INITIAL (REP 10 OF (1)),
	    KIND;
	KIND = .DATA [1];		! make this a longword for comparison

	!+
	! Use either the defaults or the parameters passed by the caller.
	!-
	$CHECK_SUFFICIENT_USER_ARGS;

	IF .KIND EQL SMG$K_FAO_STRING
	THEN
	    BEGIN			! FAO processing
	    !+
	    ! Process FAO string.
	    !-
	    LOCAL
	    	FAO_STATUS,
	    	CONTROL_DSC : BLOCK [8,BYTE],
	    	RETURN_DSC : BLOCK [8,BYTE];

	    CONTROL_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    CONTROL_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
	    CONTROL_DSC [DSC$W_LENGTH] = ABS (.DATA_LENGTH);
	    CONTROL_DSC [DSC$A_POINTER] = DATA [2];

	    RETURN_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    RETURN_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
	    RETURN_DSC [DSC$W_LENGTH] = ..MAX_BUFFER_LENGTH;
	    RETURN_DSC [DSC$A_POINTER] = .BUFFER_ADDRESS;

	    FAO_STATUS = $FAOL (CTRSTR = CONTROL_DSC, OUTLEN = .RETURN_LENGTH,
			    OUTBUF = RETURN_DSC, PRMLST = LOCAL_ARGS [0]);
	    IF NOT .FAO_STATUS 
	    THEN
	    	RETURN (.FAO_STATUS);

	    END				! end of FAO processing

        ELSE

	IF .KIND EQL SMG$K_ARITH_STRING
	THEN
	    BEGIN				! arithmetic processing
	    LOCAL
		RET_LEN,
	    	DECODED_ARITH_STRING : BLOCK [255,BYTE],
		DECODED_LENGTH,
		STATUS;

	    IF NOT (STATUS = DECODE_ARITH_STRING (DATA [0],
						  LOCAL_ARGS [0],
						   DECODED_ARITH_STRING,
						   DECODED_LENGTH))
	    THEN
		RETURN (.STATUS);
	    
	    RET_LEN = MIN (..MAX_BUFFER_LENGTH, .DECODED_LENGTH);
  	    CH$MOVE (.RET_LEN, DECODED_ARITH_STRING, .BUFFER_ADDRESS);
					! copy decoded stuff to user buffer
	    IF .RET_LEN NEQ 0
	    THEN
		.RETURN_LENGTH = .RET_LEN;	
					! return length to caller
	    END				! end of arithmetic processing

	ELSE
	    RETURN (SMG$_FATERRLIB);	! unknown type code

	END;			! dynamic - additional processing needed

    RETURN (SS$_NORMAL);
    END;			! end of SMG$GET_TERM_DATA

%SBTTL 'SMG$DEL_TERM_TABLE  - Delete terminal table'
GLOBAL ROUTINE SMG$DEL_TERM_TABLE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine terminates access to TERMTABLE.EXE.
!
!	If a private TERMTABLE.EXE was used, then we created a
!	temporary section to map it into the user's virtual address
!	space.  This routine will free up that virtual space so that
!	the user can re-use it.
!
!	If the system TERMTABLE.EXE was used, then we used the system
!	global section, and we do not have to free any virtual address
!	space.  In this case we simply return SS$_NORMAL.
!
!	In both cases (temporary and global section), this call is
!	optional.  Even for a temporary section, the virtual memory 
!	would be automatically freed when the image terminated.
!	This routine is useful only in the case where a caller may
!	need to re-use the virtual address space.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SMG$DEL_TERM_TABLE 
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL
!
! SIDE EFFECTS:
!
!	NONE
!--
    BEGIN
    LOCAL
	PREV_AST_STATE;

!+
! If the terminal definition came from the system global section,
! then we simply return.  If the definition came from a private
! temporary section, then we free up the virtual address space.
!-

    PREV_AST_STATE = $SETAST (ENBFLG = K_OFF);	! disable ASTs

    IF .PRIV_SECTION_ADDR NEQ 0
    THEN
	BEGIN			! free va - temp section
	LOCAL
	    FREE_ADDR : VECTOR [2],
	    STATUS;

	FREE_ADDR [0] = .PRIV_SECTION_ADDR;
	FREE_ADDR [1] = .PRIV_SECTION_ADDR_END;
	IF NOT (STATUS = $DELTVA (INADR = FREE_ADDR))
	THEN
	    RETURN (.STATUS);

  	IF NOT (STATUS = $DASSGN (CHAN = .PRIV_SECTION_CHANNEL))
	THEN
	    RETURN (.STATUS);

	PRIV_SECTION_ADDR = 0;
	PRIV_SECTION_CHANNEL = 0;
	END;				! free va - temp section

    IF .PREV_AST_STATE EQL SS$_WASSET
    THEN
	$SETAST (ENBFLG = K_ON);		! re-enable ASTs

    RETURN (SS$_NORMAL);
    END;				! end of SMG$DEL_TERM_TABLE

%SBTTL 'MAP_PRIV_SECTION - Map private section'
ROUTINE MAP_PRIV_SECTION =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine attempts to open a user's private copy of TERMTABLE.EXE.
!	If successful, TERMTABLE.EXE is mapped into the user's virtual address
!	space as a temporary section.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = MAP_PRIV_SECTION ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	status returned by $OPEN
!	status returned by $CRMPSC
!	SS$_NORMAL
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    OWN

	TABLE_NAME : VECTOR[25,BYTE]
		     INITIAL(BYTE('TERM$TABLOC:TERMTABLE.EXE'));

    LOCAL
	REQ_ADDR : VECTOR [2] INITIAL (%X'200',%X'200'),
					! input address to $MGBLSC
	ACTUAL_ADDR : VECTOR [2],	! retd address from $MGBLSC
	PRIVATE_FAB : $FAB (FOP = UFO, FAC=<GET>,SHR=<GET,UPI>),
	OPEN_STATUS,
	SECTION_STATUS;

!+
! Initialize some fields.  This can't be done at link time because
! it would require fixup vectors which would make the PSECT read/write
! which would prevent sharing in our shared image.
!-
    PRIVATE_FAB[FAB$L_FNA]=TABLE_NAME;
    PRIVATE_FAB[FAB$B_FNS]=%ALLOCATION(TABLE_NAME);

!+
! Look in TERM$TABLOC for private copy of TERMTABLE.EXE.
!-
    IF (OPEN_STATUS = $OPEN (FAB = PRIVATE_FAB))
    THEN
	BEGIN
    	!+
    	! Found a private termtable.  Map to it so we can determine
    	! if the requested terminal is defined there.
    	!-
	IF NOT (SECTION_STATUS = $CRMPSC (INADR = REQ_ADDR,
					  CHAN = .PRIVATE_FAB [FAB$L_STV],
					  FLAGS = SEC$M_EXPREG,
					  RETADR = ACTUAL_ADDR))
	THEN
	    RETURN (.SECTION_STATUS);
	
	PRIV_SECTION_ADDR = .ACTUAL_ADDR [0];
					! save mapped addr
 	PRIV_SECTION_ADDR_END = .ACTUAL_ADDR [1];
					! also save end addr
	PRIV_SECTION_CHANNEL = .PRIVATE_FAB [FAB$L_STV];
					! save channel for $DASSGN

	END
    ELSE
	RETURN (.OPEN_STATUS);

    RETURN (SS$_NORMAL);
    END;			! end of routine MAP_PRIV_SECTION


%SBTTL 'MAP_GBL_SECTION - Map global section'
ROUTINE MAP_GBL_SECTION =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine maps the global section SMG$TERMTABLE into
!	the caller's virtual address space.  
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = MAP_GBL_SECTION ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	status returned by $MGBLSC
!	SS$_NORMAL
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN
    LOCAL
	REQ_ADDR : VECTOR [2] INITIAL (%X'200',%X'200'),
					! input address to $MGBLSC
	ACTUAL_ADDR : VECTOR [2],	! retd address from $MGBLSC
    	MAP_STATUS, 		        ! status retd by $MGBLSC
    	GBL_NAME_DESC : BLOCK [8,BYTE]; ! desc for global section name

    GBL_NAME_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    GBL_NAME_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    GBL_NAME_DESC [DSC$W_LENGTH] = %CHARCOUNT ('SMG$TERMTABLE');
    GBL_NAME_DESC [DSC$A_POINTER] = UPLIT ('SMG$TERMTABLE');

    MAP_STATUS = $MGBLSC (INADR = REQ_ADDR,
		          RETADR = ACTUAL_ADDR,
		          FLAGS = SEC$M_SYSGBL + SEC$M_PERM + SEC$M_EXPREG,
		          GSDNAM = GBL_NAME_DESC);
    IF NOT .MAP_STATUS
    THEN
    	RETURN .MAP_STATUS;

    GBL_SECTION_ADDR = .ACTUAL_ADDR [0];

    RETURN (SS$_NORMAL);		
    END;				! end of routine MAP_GBL_SECTION


%SBTTL 'SEARCH_FOR_TERM_DEF - Search for terminal definition'
ROUTINE SEARCH_FOR_TERM_DEF( 
			TERM_TAB : REF BLOCK [,BYTE],
			TERM_NAME : REF BLOCK [,BYTE],
			RET_TERM_DEF	 ) =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	This routine searches a Termtable.exe for a particular
!	terminal definition.  
!
! CALLING SEQUENCE:
!
!	found.wl.v = SEARCH_FOR_TERM_DEF (TERM_TAB.rl.v,
!					  TERM_NAME.rt.dx,
!					  RET_TERM_DEF.wl.r)
!
! FORMAL PARAMETERS:
!
! 	TERM_TAB		address where TERMTABLE.EXE starts
!
!	TERM_NAME		name of the terminal for which we
!				will search
!
!	RET_TERM_DEF		returned terminal definition address,
!				if found
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	1 = terminal definition not found
!	0 = terminal definition was found
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN
    LOCAL
	FOUND : INITIAL (1),		! flag to indicate end of search
	BLOCK_NUMBER : BYTE,
	INDEX_NAME_DESC : BLOCK [8,BYTE],
	INDEX_NAME_COUNT : REF VECTOR [,BYTE],
	INDEX_NAME_STRING : REF VECTOR [,BYTE];


!+
! Each TERMTABLE.EXE contains an index of all the terminals defined.
! Search the terminal index for the requested name.
!-

    INDEX_NAME_COUNT = .TERM_TAB + .TERM_TAB [TTB_L_INDEX_OFFSET];
					! point to 1st count
					! (address plus offset to get to
					!  start of index - count is 1st byte)
    INDEX_NAME_STRING = .INDEX_NAME_COUNT + 1;
					! point to 1st name string in index

    IF .TERM_TAB [TTB_W_IDENT] NEQ 1
    THEN
	RETURN (SMG$_TABID_MIS); 	! Termtable Id Mismatch

    INDEX_NAME_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    INDEX_NAME_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;

    WHILE .FOUND NEQ K_MATCH DO
        BEGIN
	!+
	! Loop through all terminal names in the section
	! index.  Exit if we find a match.
	!-
	INDEX_NAME_DESC [DSC$A_POINTER] = INDEX_NAME_STRING [0];
	INDEX_NAME_DESC [DSC$W_LENGTH] = .INDEX_NAME_COUNT [0];

	FOUND = STR$CASE_BLIND_COMPARE (.TERM_NAME, INDEX_NAME_DESC);

	IF .FOUND EQL K_MATCH
	THEN
	    EXITLOOP
	ELSE
	    BEGIN
	    INDEX_NAME_COUNT = INDEX_NAME_STRING [0] + .INDEX_NAME_COUNT [0] + 1;
				! point past the previous string & block number
	    IF .INDEX_NAME_COUNT [0] EQL 0
	    THEN
		EXITLOOP;	! return - no more terminals
	    INDEX_NAME_STRING = .INDEX_NAME_COUNT + 1;
				! point to next name string
	    END;

	END;				! end of WHILE loop

    !+
    ! If we found a match, use the block number stored with the index
    ! name to calculate the address of where the terminal definition
    ! starts.
    !-

    IF .FOUND EQL K_MATCH
    THEN
	BEGIN
    	BLOCK_NUMBER = .(INDEX_NAME_STRING [0] + .INDEX_NAME_COUNT [0]);
					! block # follows counted name string
    	.RET_TERM_DEF = .TERM_TAB + ((.BLOCK_NUMBER - 1) * 512);
    END;				! end of search for requested name


    RETURN (.FOUND);
    END;				! end of SEARCH_FOR_TERM_DEF

%SBTTL 'SEARCH_FOR_TERM_DEF_BY_TYPE - search for term def given device type'
ROUTINE SEARCH_FOR_TERM_DEF_BY_TYPE (
			TERM_TAB : REF BLOCK [,BYTE],
			TERM_TYPE : SIGNED,
			RET_TERM_DEF,
			RET_TERM_NAME	 ) =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	This routine searches a Termtable.exe for a particular
!	terminal definition.  It will look in all terminal definitions
!	for the given device type.
!
! CALLING SEQUENCE:
!
!	found.wl.v = SEARCH_FOR_TERM_DEF_BY_TYPE (TERM_TAB.rl.v,
!					  	  TERM_TYPE.rl.v,
!					  	  RET_TERM_DEF.wl.r,
!						  RET_TERM_NAME.wl.r)
!
! FORMAL PARAMETERS:
!
! 	TERM_TAB		address where TERMTABLE.EXE starts
!
!	TERM_TYPE		type of the terminal for which we
!				will search (signed longword value)
!
!	RET_TERM_DEF		returned terminal definition address,
!				if found
!
!	RET_TERM_NAME		address of name associated with this device type
!				(from the definition)
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	1 = terminal definition not found
!	0 = terminal definition was found
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN
    LOCAL
	FOUND : INITIAL (1),		! flag to indicate end of search
	LOCAL_TYPE : SIGNED,		! working terminal type
	CUR_TERM_DEF : REF VECTOR [,WORD], ! offset pointers are actually at
					! beginning of definition
	INDEX_NAME_COUNT : REF VECTOR [,BYTE],
	INDEX_NAME_STRING : REF VECTOR [,BYTE];


!+
! Each TERMTABLE.EXE contains an index of all the terminals defined.
! Look at the definition of every terminal in the index, until we
! find one with the requested device type.
!-

    INDEX_NAME_COUNT = .TERM_TAB + .TERM_TAB [TTB_L_INDEX_OFFSET];
					! point to 1st count
					! (address plus offset to get to
					!  start of index - count is 1st byte)
    INDEX_NAME_STRING = .INDEX_NAME_COUNT + 1;
					! point to 1st name string in index

    IF .TERM_TAB [TTB_W_IDENT] NEQ 1
    THEN
	RETURN (SMG$_TABID_MIS); 	! Termtable Id Mismatch

!+
! If this definition is in a private section, the type number was biased.
! Since the unbiased number is what is actually in the file, remove the
! bias before doing any comparisons.
!-

    LOCAL_TYPE = .TERM_TYPE;
    $UNBIAS_TYPE_NUMBER (.TERM_TAB, LOCAL_TYPE);

    WHILE .FOUND NEQ K_MATCH DO
        BEGIN
	LOCAL
	    BLOCK_NUMBER : BYTE,
	    DEF_DEVICE : REF VECTOR [,BYTE,SIGNED];
					! points to term number cap
	!+
	! Loop through all terminal names in the section
	! index.  Exit if we find a match.
	!-
    	BLOCK_NUMBER = .(INDEX_NAME_STRING [0] + .INDEX_NAME_COUNT [0]);
					! block # follows counted name string
    	CUR_TERM_DEF = .TERM_TAB + ((.BLOCK_NUMBER - 1) * 512);
					! get def for this index entry
    	DEF_DEVICE = .CUR_TERM_DEF [SMG$K_VMS_TERMINAL_NUMBER] +
		     .CUR_TERM_DEF;
					! point to device type in definition
	!+
	! Device type is stored as a signed longword.  Skip past the
	! size and type bytes to the actual data.
	!-
	IF .DEF_DEVICE [2] EQL .LOCAL_TYPE
	THEN
	    BEGIN
	    FOUND = K_MATCH;
	    EXITLOOP
	    END
	ELSE
	    BEGIN
	    INDEX_NAME_COUNT = INDEX_NAME_STRING [0] + .INDEX_NAME_COUNT [0] +
				 1;
				! point past the previous string & block number
	    IF .INDEX_NAME_COUNT [0] EQL 0
	    THEN
		EXITLOOP;	! return - no more terminals
	    INDEX_NAME_STRING = .INDEX_NAME_COUNT + 1;
				! point to next name string
	    END;

	END;				! end of WHILE loop

!+
! If we found a match, set the return name and return definition address.
!-

    IF .FOUND EQL K_MATCH
    THEN
	BEGIN
	.RET_TERM_DEF = .CUR_TERM_DEF;
	.RET_TERM_NAME = .CUR_TERM_DEF + .CUR_TERM_DEF [SMG$K_NAME];
				! address of counted string
	END;

    RETURN (.FOUND);
    END;			! end of SEARCH_FOR_TERM_DEF_BY_TYPE

%SBTTL 'DECODE_ARITH_STRING - Decode arithmetic data'
ROUTINE DECODE_ARITH_STRING (ARITH_STRING : REF VECTOR [,BYTE],
			     USER_ARGS : REF VECTOR,
			     DECODED_STRING : REF VECTOR [,BYTE],
			     DECODED_LENGTH) =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Arithmetic strings are stored as encoded data bytes.  Codes
!	are used to indicate where an operand is, what operator to apply,
!	etc.  The general format is number, op, number, op, number, ... etc.
!
!	In the midst of binary information, there may be text that must
!	be included in the final string.
!
! CALLING SEQUENCE:
!
!	status.rl.v = DECODE_ARITH_STRING (ARITH_STRING.rl.r,
!					   USER_ARGS.rl.r,
!					   DECODED_STRING.wl.r,
!					   DECODED_LENGTH.wl.r)
!					   
!
! FORMAL PARAMETERS:
!
!	ARITH_STRING.rl.r		Address of string to decode
!
!	USER_ARGS.rl.r			Address of a vector containing
!					args provided by caller
!
!	DECODED_STRING.wl.r		Address where decoded string
!					should be placed
!
!	DECODED_LENGTH.wl.r		Length of final string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SUCCESS		String was decoded
!	FAILURE		String could not be decoded
!
! SIDE EFFECTS:
!
!	NONE
!--
    BEGIN
    LOCAL
	ACCUMULATOR : INITIAL (0),	! place to hold current result
	INDEX,				! index into arithmetic string
	CURRENT_BYTE : INITIAL (0),	! pointer into return string
	ARG_COUNT : INITIAL (0),	! number of user args that have
					! been used
	ARITH_CAP_SIZE,			! length of entire capability string
	SEEN : INITIAL (0);		! flag to indicate 1st operand found

!+
! Initialize return length.
!-

    .DECODED_LENGTH = 0;

!+
! Start with the 3rd byte of the string (skipping over the size and
! type of the entire string).  This byte should be the data type of
! the first item to process.  It could be one of the following:
!	positive number		text
!	k_operand		longword operand
! 	k_<operator>		add, subtract, multiply, divide
!	k_store			calculation complete, store result
!-

    ARITH_CAP_SIZE = .ARITH_STRING [0] XOR %X'FFFFFF00';
					! sign extend byte
    ARITH_CAP_SIZE = ABS (.ARITH_CAP_SIZE);
					! get length (which is stored negative)

    INDEX = 2;				! start with 3rd byte

    WHILE .INDEX LSS .ARITH_CAP_SIZE DO
    	BEGIN
    	LOCAL
	    DATA_TYPE : BYTE,		! code for kind of data to follow
	    DATA_SIZE : BYTE,		! relevant only for string data
	    TEMP : REF VECTOR;		! addr of operand awaiting operator

        DATA_TYPE = .ARITH_STRING [.INDEX];

        SELECTONE .DATA_TYPE OF
   	SET

	    [.K_OPERAND]:		! longword operand
		BEGIN
		IF NOT .SEEN
		THEN
		    BEGIN		! 1st operand seen goes in accum
		    CH$MOVE (4, ARITH_STRING [.INDEX + 2], ACCUMULATOR);
		    SEEN = 1;
		    END
	 	ELSE
		    TEMP = ARITH_STRING [.INDEX + 2];
	       				! remember location of operand
	  	INDEX = .INDEX + 6;	! get next code
		END;

	    [.K_SUBSTITUTE]:		! substitute argument from user
		BEGIN
		LOCAL
		    ARG_NUMBER;
		!+
		! Number following substitution symbol will tell us
		! which argument from the vector to use.
		!-
		ARG_NUMBER = .ARITH_STRING [.INDEX+1];
		IF NOT .SEEN
		THEN
		    BEGIN		! 1st operand found goes into accum
		    ACCUMULATOR = .USER_ARGS [.ARG_NUMBER-1];
		    SEEN = 1;
		    END
		ELSE	
  		    TEMP = USER_ARGS [.ARG_NUMBER-1];
					! remember location of operand
		INDEX = .INDEX + 2;	! next code
		END;

	    [.K_ADD]:
		BEGIN			! add temp to accumulator
		ACCUMULATOR = .TEMP [0] + .ACCUMULATOR;
		TEMP = 0;		! don't use this operand again
		INDEX = .INDEX + 1;	! next code
		END;

	    [.K_SUBTRACT]:
		BEGIN			! subtract temp from accumulator
		ACCUMULATOR = .ACCUMULATOR - .TEMP [0];
		TEMP = 0;		! don't reuse this operand
		INDEX = .INDEX + 1;	! next code
		END;

	    [.K_MULTIPLY]:
		BEGIN			! multiply temp by accumulator
		ACCUMULATOR = .ACCUMULATOR * .TEMP [0];
		TEMP = 0;		! don't reuse this operand
		INDEX = .INDEX + 1;	! next code
		END;

	    [.K_DIVIDE]:
		BEGIN			! divide accumulator by temp
		ACCUMULATOR = .ACCUMULATOR / .TEMP [0];
		TEMP = 0;		! don't reuse this operand
		INDEX = .INDEX + 1;	! next code
		END;

	    [.K_STORE]:
		BEGIN			! store a calculation
	 	DECODED_STRING [.CURRENT_BYTE] = .ACCUMULATOR <0,8>;
					! store only as a byte
		CURRENT_BYTE = .CURRENT_BYTE + 1;
		ACCUMULATOR = 0;
		SEEN = 0;
		INDEX = .INDEX + 1;	! next code
		END;

	    [OTHERWISE]:		! plain vanilla text
		BEGIN
		CH$MOVE (.ARITH_STRING [.INDEX],	! size of text
			 ARITH_STRING [.INDEX + 2],	! skip over type byte
			 DECODED_STRING [.CURRENT_BYTE]);
		CURRENT_BYTE = .CURRENT_BYTE + .ARITH_STRING [.INDEX];
		INDEX = .INDEX + .ARITH_STRING [.INDEX] + 2;
					! move past string, count & type bytes
		END;
    	TES;

    	END;				! end of WHILE LOOP

    .DECODED_LENGTH = .CURRENT_BYTE; 	! return length of string

    RETURN (SS$_NORMAL);

    END;				! end of routine DECODE_ARITH_STRING

    END					! end of module SMG$INTERFACE_TERM_TABLE
    ELUDOM
