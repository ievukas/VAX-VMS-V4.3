MODULE setmisc ( IDENT = 'V04-000',
		ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL=LONG_RELATIVE)
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  SETPRO Command
!
! ABSTRACT:
!
!	This module sets various parameters in the system.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. Privileged user mode.
!
! AUTHOR:  Gerry Smith				12-Jan-1983
!
! Modified by:
!
!	V03-010 AEW0001		Anne E. Warner		24-Jul-1984
!		Add a check to see if the qualifier is present before
!		getting the value to the following qualifiers:
!		    /INTERACTIVE in SET$LOGINS
!		    /BLOCK_COUNT in SET$RMS_DEFAULT
!		    /BUFFER_COUNT in SET$RMS_DEFAULT
!		    /PROLOGUE in SET$RMS_DEFAULT
!		    /EXTEND_QUANTITY in SET$RMS_DEFAULT
!		    /NETWORK_BLOCK_COUNT in SET$RMS_DEFAULT
!		This check is insure correct behavior with negated qualifiers
!
!	V03-009	DAS0001		David Solomon		09-Jul-1984
!		Fix truncation errors; make nonexternal refs LONG_RELATIVE.
!
!	V03-008	RAS0281		Ron Schaefer		27-Mar-1984
!		Add Network Block Count to SET/RMS command.
!
!	V03-007	MCN0155		Maria del C. Nasr	01-Mar-1984
!		The disallow flag offset in the PCB is from the beginning
!		of the structure, and not a status flag.  This will fix
!		the behavior of the /ADJUST qualifier.
!
!	V03-006	GAS0172			Gerry Smith	25-Aug-1983
!		When enabling logins, use a symbolic, UCB$V_TT_NOLOGINS,
!		instead of dead-reckoning.
!
!	V03-005	GAS0158			Gerry Smith	25-Jul-1983
!		For SET LOGIN/INTER=0, do not disable the creation of
!		interactive jobs.
!
!	V03-004	GAS0134			Gerry Smith	17-May-1983
!		For SET WORKING_SET, use twice the number of fluid pages,
!		rather than one.
!
!	V03-003	GAS0112			Gerry Smith	29-Mar-1983
!		Remove all references to the old CLI interface.
!
!	V03-002 GAS0111			Gerry Smith	 9-Mar-1983
!		Fix the output of SET LOGIN.  Also calculate a better 
!		minimum working set to use as a limit in SET WORKING_SET.
!
!	V03-001	GAS0110			Gerry Smith	28-Feb-1983
!		Fix a couple of bugs with SET RMS and SET WORKING_SET,
!		caused by incorrectly computing the new RMS limit, and
!		the new working set parameters.
!
!--

!
! Include files
!
LIBRARY 'SYS$LIBRARY:LIB';		! VAX/VMS common definitions

!
! Define the bit offsets for the SET DAY qualifier flags byte.
!
MACRO
    set$v_primary   = 0, 2, 1, 0%,
    set$v_secondary = 0, 3, 1, 0%,
    set$v_default   = 0, 4, 1, 0%;

!
! Define the bits for the SET RMS command
!
MACRO
    set$v_system = 0, 2, 1, 0%,			! /SYSTEM
    set$v_block  = 0, 3, 1, 0%,			! Block count specified
    set$v_buffer = 0, 4, 1, 0%,			! Buffer count specified
    set$v_prolog = 0, 5, 1, 0%,			! Prologue level specified
    set$v_disk   = 0, 6, 1, 0%,			! /DISK
    set$v_tape   = 0, 7, 1, 0%,			! /MAGTAPE
    set$v_unit   = 0, 8, 1, 0%,			! /UNIT_RECORD
    set$v_seq    = 0, 9, 1, 0%,			! /SEQUENTIAL
    set$v_rel    = 0,10, 1, 0%,			! /RELATIVE
    set$v_index  = 0,11, 1, 0%,			! /INDEXED
    set$v_hash   = 0,12, 1, 0%,			! /HASHED (maybe someday)
    set$v_extend = 0,13, 1, 0%,			! /EXTEND_QUANTITY
    set$v_netblk = 0,14, 1, 0%;			! /NETWORK Block Count

!
! Define some bits for the SET WORKING_SET command
!
MACRO
    set$v_log    = 0, 0, 1, 0%,			! /[NO]LOG
    set$v_explog = 0, 1, 1, 0%,			! /[NO]LOG set explicitly
    set$v_limit  = 0, 2, 1, 0%,			! /LIMIT
    set$v_quota  = 0, 3, 1, 0%,			! /QUOTA
    set$v_extent = 0, 4, 1, 0%,			! /EXTENT
    set$v_expadj = 0, 5, 1, 0%,			! /[NO]ADJUST set explicitly
    set$v_adjust = 0, 6, 1, 0%;			! /[NO]ADJUST

!
! Declare some shared messages
!
$SHR_MSGDEF	(SET,119,LOCAL,
    		(confqual,	error),
    		(invquaval,	error),
		(valerr,	error));


!
! Table of contents
!

FORWARD ROUTINE
    set$day : NOVALUE,			! Set the day primary or secondary
    setdayknl,				! Kernel mode routine to set the day
    set$login : NOVALUE,		! Set the number of interactive users
    setlogknl,				! Kernel mode routine to set logins
    set$rms_default : NOVALUE,		! Set the various RMS defaults
    setrmsknl,				! Kernel mode routine to set RMS
    set$working_set : NOVALUE,		! Set the working set parameters
    setwrkknl;				! Kernel mode routine to set working set

!
! External routines
!
EXTERNAL ROUTINE
    lib$cvt_dtb,			! Convert ASCII to binary
    cli$get_value,			! Get value from CLI
    cli$present;			! See if qualifier is present

!
! External references
!
EXTERNAL
    exe$gl_flags : $BBLOCK,		! The general system flagword
    ctl$gl_pcb,			! Address of this process's PCB
    ctl$gl_phd,				! Process-mapped PHD 
    ctl$gq_procpriv : $BBLOCK,		! Process privilege mask
    sys$gl_jobctlmb : $BBLOCK,		! Job controller mailbox
    sys$gw_ijobcnt : WORD,		! Number of current interactive jobs
    sys$gw_ijoblim : WORD,		! Interactive job limit
    					! Multiblock counts
    sys$gb_dfmbc : BYTE,		! (system)
    pio$gb_dfmbc : BYTE,		! (process)
    sys$gb_dfnbc : BYTE,		! (system) Network
    pio$gb_dfnbc : BYTE,		! (process)
    					! Prologue levels
    sys$gb_rmsprolog : BYTE,		! (system)
    pio$gb_rmsprolog : BYTE,		! (process)
    					! Default extend quantities
    sys$gw_rmsextend : WORD,		! (system)
    pio$gw_rmsextend : WORD,		! (process)
    					! Multibuffer counts
    sys$gb_dfmbfsdk : BYTE,		! Disk (system)
    sys$gb_dfmbfsmt : BYTE,		! Tape (system)
    sys$gb_dfmbfsur : BYTE,		! Unit_record (system)
    sys$gb_dfmbfidx : BYTE,		! Indexed files (system)
    sys$gb_dfmbfhsh : BYTE,		! Hashed files (system)
    sys$gb_dfmbfrel : BYTE,		! Relative files (system)
    pio$gb_dfmbfsdk : BYTE,		! Disk (process)
    pio$gb_dfmbfsmt : BYTE,		! Tape (process)
    pio$gb_dfmbfsur : BYTE,		! Unit_record (process)
    pio$gb_dfmbfidx : BYTE,		! Indexed files (process)
    pio$gb_dfmbfhsh : BYTE,		! Hashed files (process)
    pio$gb_dfmbfrel : BYTE;		! Relative files (process)

!
! Declare literals defined elsewhere
!
EXTERNAL LITERAL
    exe$v_explicitp,			! Flags to show whether the day is
    exe$v_explicits,			! secondary or primary
    cli$_absent, 			! CLI flag saying qualifier absent
    set$_newlims,			! Informational message for SET WORKING_SET
    set$_intset;			! Informational message for SET LOGIN


GLOBAL ROUTINE set$day : NOVALUE =
BEGIN
!++
! Functional description
!
!	This is the routine for the SET DAY command.  It is called from the
!	SET command processor,	and sets the day to be either primary or 
!	secondary, or sets it back to its default.
!
! Inputs
!	None
!
! Outputs
!	None
!
!----

LOCAL
    status,				! Status return
    arglst : VECTOR[2],			! Argument list for $CMKRNL
    flags : $BBLOCK[1] 			! Flags byte,
	    INITIAL(BYTE(0));		! originally zero

!
! Find out what the day is supposed to be set to.
!
flags[set$v_secondary] = cli$present(%ASCID 'SECONDARY');
flags[set$v_primary]   = cli$present(%ASCID 'PRIMARY');
flags[set$v_default]   = cli$present(%ASCID 'DEFAULT');

!
! See if the user has the OPER privilege.  If not, signal an error.
!
IF NOT .ctl$gq_procpriv[prv$v_oper]		! User must have OPER priv.
THEN SIGNAL_STOP(ss$_nooper);

!
! Change mode to kernel and set the day.
!
arglst[0] = 1;
arglst[1] = flags;
IF NOT (status = $CMKRNL(ROUTIN = setdayknl,
    			 ARGLST = arglst))
THEN SIGNAL_STOP(.status);

RETURN 1;
END;

ROUTINE setdayknl (flags) =
BEGIN
!++
!
! This routine executes in kernel mode, setting the longword
! EXE$GL_FLAGS to signify what kind of day it is.
!
! Inputs:
!	FLAGS - address of the flags byte.
!
! Outputs:
!	None.
!
!--

MAP flags : REF $BBLOCK;

!
! If the day is to be set primary, then turn off the EXPLICITP bit and
! turn on the EXPLICITS bit.
!
IF .flags[set$v_primary]
THEN
    BEGIN
    exe$gl_flags[0, exe$v_explicitp, 1, 0] = 0;
    exe$gl_flags[0, exe$v_explicits, 1, 0] = 1;
    END

!
! If not primary, check to see if the day should be set secondary.
!
ELSE
    BEGIN
    IF .flags[set$v_secondary]
    THEN
	BEGIN
	exe$gl_flags[0, exe$v_explicitp, 1, 0] = 1;
	exe$gl_flags[0, exe$v_explicits, 1, 0] = 1;
	END

!
! If set to be /DEFAULT, then do it.
!
    ELSE
	BEGIN
	IF .flags[set$v_default]
	THEN exe$gl_flags[0, exe$v_explicitp, 1, 0] = 0;
	END;
    END;

RETURN 1;
END;

GLOBAL ROUTINE set$login : NOVALUE =
BEGIN
!++
!
! This routine sets the number of interactive logins permitted.
!
! Inputs:
!	None.  The CLI is interrogated for the number.
!
! Outputs:
!	None.

!
!--

LOCAL
    status,				! General status return
    number,				! Number of users
    arglst : VECTOR[2],			! Argument list for $CMKRNL call
    desc : $BBLOCK[dsc$c_s_bln];	! Descriptor to get number

!
! If the user doesn't have OPER, don't allow the operation.
!
IF NOT .ctl$gq_procpriv[prv$v_oper]
THEN SIGNAL_STOP(ss$_nooper);

!
! Get the number of users.
!
$init_dyndesc(desc);			! Make the descriptor dynamic
IF cli$present(%ASCID 'INTERACTIVE')
THEN
    cli$get_value(%ASCID 'INTERACTIVE',	! Get the number
    	          desc);


!
! If the number is non-zero, go set it.
!
IF .desc[dsc$w_length] NEQ 0
THEN
    BEGIN
    IF NOT (status = lib$cvt_dtb(.desc[dsc$w_length],
    				 .desc[dsc$a_pointer],
    				 number))
    THEN
	BEGIN
	SIGNAL(set$_valerr);
	RETURN;
	END;
    arglst[0] = 1;
    arglst[1] = .number;
    IF NOT (status = $CMKRNL(ROUTIN = setlogknl,
    			     ARGLST = arglst))
    THEN
	BEGIN
	SIGNAL(.status);
	RETURN;
	END;
    END;
    
!
! If we get this far, then use SIGNAL to output the current interactive
! limit.
!
SIGNAL(set$_intset, 2, .sys$gw_ijoblim, .sys$gw_ijobcnt);
RETURN 1;
END;

ROUTINE setlogknl (number) =
BEGIN
!++
!
! This routine is called in kernel mode to set the number of interactive
! processes.
!
! Inputs:
!	NUMBER - address of the limit to set.
!
! Outputs:
!	None.  The interactive job count limit is set.
!
!--

!
! Set the job limit.
!
sys$gw_ijoblim = .number;

!
! If the limit is non-zero, turn on interactive jobs.  This is done by 
! clearing the high bit of the job controller mailbox status word.
!
IF .number NEQ 0			! If at least one allowed to login,
THEN sys$gl_jobctlmb[ucb$v_tt_nologins] = 0;	! enable interactive prompts.

RETURN 1;
END;

GLOBAL ROUTINE set$rms_default : NOVALUE =
BEGIN
!++
!
! This routine implements the SET RMS_DEFAULT command.  The values and
! qualifiers are collected and checked, then a kernel call is made to
! actually set the parameters.  In order to change RMS defaults for the
! system, the process must have CMKRNL privilege.
!
! Inputs:
!	None.  The CLI is interrogated.
!
! Outputs:
!	None.  The RMS defaults are changed.
!
!--

LOCAL
    status,					! General status return
    block_count,				! Block count 
    buffer_count,				! Buffer count 
    net_block_count,				! Network Block count 
    prolog,					! Prolog level 
    extend,					! Extend quantity
    desc : $BBLOCK[dsc$c_s_bln],		! General descriptor
    arglst : VECTOR[6],				! Argument list for CMKRNL call
    flags : $BBLOCK[4] INITIAL(0);		! Flags longword

!
! First, get the qualifiers and quantities.
!
$init_dyndesc(desc);				! Make the descriptor dynamic

!
! Get the block count.  If there, convert it to a number.
!
IF (flags[set$v_block] = cli$present(%ASCID 'BLOCK_COUNT'))
THEN
    IF cli$get_value(%ASCID 'BLOCK_COUNT', desc)
    THEN
        BEGIN
        IF NOT (status = lib$cvt_dtb(.desc[dsc$w_length],
				     .desc[dsc$a_pointer],
				     block_count))
        THEN
  	    BEGIN
	    SIGNAL(set$_valerr);
	    RETURN;
	    END;
        IF .block_count GTR 127			! Check for in range
        OR .block_count LSS 0
        THEN
  	    BEGIN
	    SIGNAL(set$_valerr);
	    RETURN;
	    END;
        END;
!
! Get the network block count.  If there, convert it to a number.
!
IF (flags[set$v_netblk] = cli$present(%ASCID 'NETWORK_BLOCK_COUNT'))
THEN
    IF cli$get_value(%ASCID 'NETWORK_BLOCK_COUNT', desc)
    THEN
        BEGIN
        IF NOT (status = lib$cvt_dtb(.desc[dsc$w_length],
				     .desc[dsc$a_pointer],
				     net_block_count))
        THEN
	    BEGIN
	    SIGNAL(set$_valerr);
	    RETURN;
	    END;
        IF .net_block_count GTR 127			! Check for in range
        OR .net_block_count LSS 0
        THEN
   	    BEGIN
	    SIGNAL(set$_valerr);
	    RETURN;
	    END;
        END;

!
! Get the buffer count.  If there, convert to a number.
!
IF (flags[set$v_buffer] = cli$present(%ASCID 'BUFFER_COUNT'))
THEN
    IF cli$get_value(%ASCID 'BUFFER_COUNT', desc)
    THEN
        BEGIN
        IF NOT (status = lib$cvt_dtb(.desc[dsc$w_length],
    				     .desc[dsc$a_pointer],
    				     buffer_count))
        THEN
   	    BEGIN
	    SIGNAL(set$_valerr);
	    RETURN;
	    END;
        IF .buffer_count GTR 127			! Check for in range
        OR .buffer_count LSS -127
        THEN
  	    BEGIN
	    SIGNAL(set$_valerr);
	    RETURN;
	    END;
        END;

!
! Get the prologue level.  If there, convert to a number.
!
IF (flags[set$v_prolog] = cli$present(%ASCID 'PROLOGUE'))
THEN
    IF cli$get_value(%ASCID 'PROLOGUE', desc)
    THEN
        BEGIN
        IF NOT (status = lib$cvt_dtb(.desc[dsc$w_length],
    				     .desc[dsc$a_pointer],
    				     prolog))
        THEN
	    BEGIN
	    SIGNAL(set$_valerr);
	    RETURN;
	    END;
        IF NOT (.prolog EQL 0 OR			! Check for valid prolog level
	        .prolog EQL 2 OR
	        .prolog EQL 3)
        THEN 
	    BEGIN
	    SIGNAL(set$_valerr);
	    RETURN;
	    END;
        END;

!
! Get the extend quantity.  If there, convert it to a number.
!
IF (flags[set$v_extend] = cli$present(%ASCID 'EXTEND_QUANTITY'))
THEN 
    IF cli$get_value(%ASCID 'EXTEND_QUANTITY', desc)
    THEN
        BEGIN
        IF NOT (status = lib$cvt_dtb(.desc[dsc$w_length],
				     .desc[dsc$a_pointer],
				     extend))
        THEN
	    BEGIN
	    SIGNAL(set$_valerr);
	    RETURN;
	    END;
        IF .extend GTR 65535			! Check for in range
        OR .extend LSS 0
        THEN 
	    BEGIN
	    SIGNAL(set$_valerr);
	    RETURN;
	    END;
        END;

!
! Now to collect all the qualifiers
!
flags[set$v_hash] = cli$present(%ASCID 'HASH');
flags[set$v_index] = cli$present(%ASCID 'INDEXED');
flags[set$v_rel] = cli$present(%ASCID 'RELATIVE');
flags[set$v_disk] = cli$present(%ASCID 'DISK');
flags[set$v_tape] = cli$present(%ASCID 'MAGTAPE');
flags[set$v_unit] = cli$present(%ASCID 'UNIT_RECORD');
flags[set$v_system] = cli$present(%ASCID 'SYSTEM');

!
! If /SEQUENTIAL was specified, then turn it on for all sequential
! devices, ie. disk, magtape, and unit_record.
!
IF cli$present(%ASCID 'SEQUENTIAL')		! If /SEQUENTIAL,
THEN flags[set$v_seq] = flags[set$v_disk]	! turn them all on
    		      = flags[set$v_tape]
    		      = flags[set$v_unit]
    		      = 1;

!
! The SET RMS command defaults to /MAGTAPE/DISK/UNIT if no qualifiers are
! specified.  Do that manually.
!
IF NOT (.flags[set$v_tape] OR			! If nothing turned on,
    	.flags[set$v_disk] OR
    	.flags[set$v_unit] OR
    	.flags[set$v_index] OR
    	.flags[set$v_rel])
THEN flags[set$v_disk] = flags[set$v_tape]	! turn on disk, tape, and
    		       = flags[set$v_unit]	! unit record
    		       = 1;

!
! If /SYSTEM was specified, check that the user has CMKRNL privilege.
! Otherwise, reject the request.
!
IF .flags[set$v_system]
THEN
    BEGIN
    IF NOT .ctl$gq_procpriv[prv$v_cmkrnl]
    THEN
	BEGIN
	SIGNAL(ss$_nocmkrnl);
	RETURN;
	END;
    END;

!
! Build the argument list and call the kernel mode routine that will actually
! do what is requested.
!
arglst[0] = 6;
arglst[1] = flags;
arglst[2] = .block_count;
arglst[3] = .buffer_count;
arglst[4] = .prolog;
arglst[5] = .extend;
arglst[6] = .net_block_count;
IF NOT (status = $CMKRNL(ROUTIN = setrmsknl,
    			 ARGLST = arglst))
THEN SIGNAL(.status);

RETURN;
END;

ROUTINE setrmsknl (flags, block_count, buffer_count, prolog, extend, net_block_count) =
BEGIN
!++
!
! This is the kernel mode routine that actually sets the RMS defaults
!
! Inputs:
!	FLAGS - address of flags longword
!	BLOCK_COUNT - address of block count
!	BUFFER_COUNT - address of buffer count
!	PROLOG - address of prologue level
!	EXTEND - address of extend quantity
!	NET_BLOCK_COUNT - address of network block count
!
! Outputs:
!	None.  The RMS defaults are reset accordingly.
!
!--

MAP flags : REF $BBLOCK;

!
! See whether the mods are for the system, or simply for this process.
!
IF .flags[set$v_system]			! Make system mods
THEN
    BEGIN
    IF .flags[set$v_block]		! /BLOCK_COUNT
    THEN 
	sys$gb_dfmbc = .block_count;

    IF .flags[set$v_netblk]		! /NETWORK
    THEN
        sys$gb_dfnbc = .net_block_count;

    IF .flags[set$v_buffer]		! BUFFER_COUNT
    THEN 
	BEGIN
	IF .flags[set$v_disk]		! /DISK
	THEN sys$gb_dfmbfsdk = .buffer_count;
	IF .flags[set$v_tape]		! /MAGTAPE
	THEN sys$gb_dfmbfsmt = .buffer_count;
	IF .flags[set$v_unit]		! /UNIT_RECORD
	THEN sys$gb_dfmbfsur = .buffer_count;
	IF .flags[set$v_hash]		! /HASH
	THEN sys$gb_dfmbfhsh = .buffer_count;
	IF .flags[set$v_index]		! /INDEXED
	THEN sys$gb_dfmbfidx = .buffer_count;
	IF .flags[set$v_rel]		! /RELATIVE
	THEN sys$gb_dfmbfrel = .buffer_count;
	END;
    IF .flags[set$v_prolog]		! /PROLOG
    THEN sys$gb_rmsprolog = .prolog;
    IF .flags[set$v_extend]		! /EXTEND
    THEN sys$gw_rmsextend = .extend;
    END

!
! If not /SYSTEM, then it must be for the process.
!
ELSE
    BEGIN				! Make process mods
    IF .flags[set$v_block]		! /BLOCK_COUNT
    THEN
	pio$gb_dfmbc = .block_count;
    IF .flags[set$v_netblk]		! /NETWORK
    THEN 
        pio$gb_dfnbc = .net_block_count;
    IF .flags[set$v_buffer]		! /BUFFER_COUNT
    THEN 
	BEGIN
	IF .flags[set$v_disk]		! /DISK
	THEN pio$gb_dfmbfsdk = .buffer_count;
	IF .flags[set$v_tape]		! /MAGTAPE
	THEN pio$gb_dfmbfsmt = .buffer_count;
	IF .flags[set$v_unit]		! /UNIT_RECORD
	THEN pio$gb_dfmbfsur = .buffer_count;
	IF .flags[set$v_hash]		! /HASHED 
	THEN pio$gb_dfmbfhsh = .buffer_count;
	IF .flags[set$v_index]		! /INDEXED
	THEN pio$gb_dfmbfidx = .buffer_count;
	IF .flags[set$v_rel]		! /RELATIVE
	THEN pio$gb_dfmbfrel = .buffer_count;
	END;
    IF .flags[set$v_prolog]		! /PROLOG
    THEN pio$gb_rmsprolog = .prolog;
    IF .flags[set$v_extend]		! /EXTEND
    THEN pio$gw_rmsextend = .extend;
    END;

RETURN 1;
END;

GLOBAL ROUTINE set$working_set : NOVALUE =
BEGIN
!++
!
! This routine implements the SET WORKING_SSET command.  The values and
! qualifiers are collected and checked, then a kernel call is made to
! actually set the parameters.
!
! Inputs:
!	None.  The CLI is interrogated.
!
! Outputs:
!	None.  The working set defaults are changed.
!
!--

LOCAL
    status,					! Status return
    limit,					! Working set limit
    quota,					! Working set quota
    extent,					! Working set extent
    specified_limit,				! And the real values that
    specified_quota,				! were specified by the
    specified_extent,				! user before juggling
    min_wset,					! Minimum guaranteed working set
    auth_limit,					! Authorized limit
    auth_extent,				! Authorized extent
    flags : $BBLOCK[4] INITIAL(0),		! Flags longword
    desc : $BBLOCK[dsc$c_s_bln],		! General descriptor
    arglist : VECTOR[5];			! Argument list for kernel call

BIND
    phd = .ctl$gl_phd : $BBLOCK;		! Point to this process's PHD

!
! Initialize the descriptor, and calculate some quantities that are handy to 
! have.  These are the authorized working set limit, the minimum working set,
! and the authorized extend limit.
!
$init_dyndesc(desc);				! Make the descriptor dynamic
auth_limit = .phd[phd$w_wsauth] - .phd[phd$w_wslist] + 1;
auth_extent = .phd[phd$w_wsauthext] - .phd[phd$w_wslist] + 1;
min_wset = .phd[phd$w_wsdyn] - .phd[phd$w_wslist] + 2*.phd[phd$w_wsfluid] + 3;

!
! Get the /[NO]ADJUST and /[NO]LOG flags.
!
! If the /ADJUST qualifier is present explicitly, then set that flag, and
! in the process note whether it was /ADJUST or /NOADJUST.
!
status = flags[set$v_adjust]			! Get the /ADJ or /NOADJ
       = cli$present(%ASCID 'ADJUST');		! but only use it if 
flags[set$v_expadj] = (.status NEQ cli$_absent);! explicitly specified.

status = flags[set$v_log]			! Same for /LOG
       = cli$present(%ASCID 'LOG');
flags[set$v_explog] = (.status NEQ cli$_absent);


!
! If a new limit is given, then check that the value is valid, and
! then apply some common sense bounds checking.  If no new limit was set,
! compute the current one.
!
IF (flags[set$v_limit] = cli$get_value(%ASCID 'LIMIT', desc))
THEN
    BEGIN					! Convert from ASCII to number
    IF NOT lib$cvt_dtb(.desc[dsc$w_length],
    		       .desc[dsc$a_pointer],
    		       specified_limit)
    THEN					! If an error, signal it
	BEGIN
	SIGNAL(set$_invquaval, 2, desc, %ASCID 'LIMIT');
    	RETURN;
	END
    ELSE					! If the value is good, check
	BEGIN					! that it is within reasonable
	LOCAL temp;				! bounds.
	temp = MAX(.min_wset, .specified_limit);! No lower than the minimum,
	limit = MIN(.temp, .auth_limit);	! No higher than the authorized
	END;
    END
!
! IF no new limit was given, compute the current one.
!
ELSE limit = specified_limit
    	   = .phd[phd$w_dfwscnt] - .phd[phd$w_wslist] + 1;



!
! If a new value given, validate it and make some common sense
! range checks
!
IF (flags[set$v_quota] = cli$get_value(%ASCID 'QUOTA', desc))
THEN
    BEGIN					! Convert from ASCII to number
    IF NOT lib$cvt_dtb(.desc[dsc$w_length],
    		       .desc[dsc$a_pointer],
    		       specified_quota)
    THEN					! If an error, signal it
	BEGIN
	SIGNAL(set$_invquaval, 2, desc, %ASCID 'QUOTA');
	RETURN;
	END
    ELSE					! Otherwise make some 
	BEGIN					! bounds checks
	LOCAL temp;
	temp = MAX(.min_wset, .specified_quota);! No lower than the minimum,
	quota = MIN(.temp, .auth_limit);	! No higher than the authorized
	END;
    END
!
! If no new quota given, compute the current one.
!
ELSE quota = specified_quota
    	   = .phd[phd$w_wsquota] - .phd[phd$w_wslist] + 1;



!
! If a new extent is given, validate and make the usual checks.
!
IF (flags[set$v_extent] = cli$get_value(%ASCID 'EXTENT', desc))
THEN
    BEGIN					! Convert from ASCII to a number
    IF NOT lib$cvt_dtb(.desc[dsc$w_length],
    		       .desc[dsc$a_pointer],
    		       specified_extent)
    THEN					! If an error, signal it.
	BEGIN
	SIGNAL(set$_invquaval, 2, desc, %ASCID 'EXTENT');
	RETURN;
	END
    ELSE
	BEGIN					! Make some bounds checks
	LOCAL temp;
	temp = MAX(.min_wset, .specified_extent);! No lower than the minimum,
	extent = MIN(.temp, .auth_extent);	! No higher than the authorized
	END;
    END
!
! If no new extent given, compute the current one.
!
ELSE extent = specified_extent
    	    = .phd[phd$w_wsextent] - .phd[phd$w_wslist] + 1;


!
! Now for some further consistency checking.  The general rule is that
!
!		LIMIT < QUOTA < EXTENT
!
! Because LIMIT is what the working set is at image rundown,
!	  QUOTA is what a process is guaranteed it can grow to, and
!	  EXTENT is what it might grow to if there's extra memory around.
! In addition, the relative importance of the qualifiers is that EXTENT is 
! relatively more important than QUOTA, which is more important than LIMIT.
! These are the general rules that govern the mess that follows.
!
! If all the EXTENT, QUOTA, and LIMIT were changed, or the EXTENT and QUOTA,
! or just the EXTENT, the EXTENT is taken as the most important, and the
! other two values get adjusted accordingly.
!
IF (.flags[set$v_extent] AND .flags[set$v_quota])
OR (.flags[set$v_extent] AND NOT (.flags[set$v_quota] OR .flags[set$v_limit]))
THEN
    BEGIN
    quota = MIN(.extent, .quota);	! QUOTA < EXTENT
    limit = MIN(.quota, .limit);	! and LIMIT < QUOTA
    END
!
! If LIMIT and QUOTA were set only, or just QUOTA, then reset EXTENT and
! juggle with the LIMIT.
!
ELSE IF .flags[set$v_quota]
THEN
    BEGIN
    extent = MAX(.quota, .extent);	!  QUOTA < EXTENT
    limit = MIN(.quota, .limit);	! and LIMIT < QUOTA
    END
!
! If LIMIT and EXTENT only, then reset LIMIT, then juggle QUOTA.
!
ELSE IF (.flags[set$v_limit] AND .flags[set$v_extent])
THEN
    BEGIN
    limit = MIN(.extent, .limit);	! Set LIMIT < EXTENT
    quota = MAX(.limit, .quota);	! LIMIT < QUOTA
    quota = MIN(.extent, .quota);	! QUOTA < EXTENT
    END
!
! Finally, if only LIMIT was set, make sure that EXTENT is larger,
! and that QUOTA is larger.
!
ELSE IF .flags[set$v_limit]
THEN
    BEGIN
    extent = MAX(.limit, .extent);	! LIMIT < EXTENT
    quota = MAX(.limit, .quota);	! LIMIT < QUOTA
    END;

!
! Call the kernel-mode routine that actually sets the parameters.
!
arglist[0] = 4;
arglist[1] = .limit;
arglist[2] = .quota;
arglist[3] = .extent;
arglist[4] = flags;
IF NOT (status = $CMKRNL(ROUTIN = setwrkknl,
    			 ARGLST = arglist))
THEN
    BEGIN
    SIGNAL(.status);
    RETURN;
    END;

!
! Now for how much to tell the user.  If something was changed, and /NOLOG
! wasn't specified, then signal the new values.  Also, if /LOG was specified,
! signal the new values.
!
IF (.flags[set$v_explog] AND .flags[set$v_log]) ! If user specified /LOG
OR ((.specified_limit NEQ .limit OR		! or if any of the values
     .specified_quota NEQ .quota OR		! were juggled, 
     .specified_extent NEQ .extent) AND NOT	! and the user didn't say /NOLOG
    (.flags[set$v_explog] AND NOT .flags[set$v_log]))
THEN SIGNAL(set$_newlims, 3,			! signal an informational
	    .limit,
	    .quota,
	    .extent);

RETURN 1;
END;

ROUTINE setwrkknl (limit, quota, extent, flags) =
BEGIN
!++
!
! This is the kernel mode routine that actually sets the working set parameters
!
! Inputs:
!	LIMIT - address of ws limit
!	QUOTA - address of ws quota
!	EXTENT - address of ws extent
!	FLAGS - address of flags longword
!
! Outputs:
!	None.  The working set parameters are reset.
!
!--

MAP flags : REF $BBLOCK;

BIND
    phd = .ctl$gl_phd : $BBLOCK;		! Point to this process's PHD

!
! Set the values.  Note that all these values are biased by the working set 
! list minus one.  Memory management is the sort of thing that causes one
! to long for the days of the abacus.
!
phd[phd$w_dfwscnt] = .phd[phd$w_wslist] - 1 + .limit;
phd[phd$w_wsquota] = .phd[phd$w_wslist] - 1 + .quota;
phd[phd$w_wsextent] = .phd[phd$w_wslist] - 1 + .extent;

!
! If the ADJUST qualifier was specified, do it.
!
IF .flags[set$v_expadj]
THEN
    BEGIN
    BIND
	pcb = .ctl$gl_pcb : $BBLOCK;
    pcb[pcb$v_disaws] =  NOT .flags[set$v_adjust];
    END;

RETURN 1;
END;

END
ELUDOM
