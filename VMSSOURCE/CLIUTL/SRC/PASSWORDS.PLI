/*
!	IDENT = V04-000
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:
!
!	SET PASSWORD
!
! ABSTRACT:
!
!	This is main routine for the /GENERATE qualifier on SET PASSWORD.
!
! ENVIRONMENT:
!
!	Vax native
!
!--
!
! AUTHOR: Brian Bailey	, CREATION DATE: Summer 83
!
! MODIFIED BY:
!
!	V03-004	SHZ0004		Stephen H. Zalewski, 	27-Mar-1984
!		Change maximum password length from 80 to 32 because that
!		is what the calling routine assumes, and this routine blank
!		fills the password buffer.
!
!	V03-003	SHZ0003		Stephen H. Zalewksi,	21-Mar-1984
!		Add more words to the bad word list.
!
!	V03-002	SHZ0002		Stephen H. Zalewski	10-Feb-1984
!		Call SYS$EXIT when user types CNTRL/Z to new password prompt
!		in order to prevent the "PLI Finish Condition" from being
!		signaled.
!
!	V03-001	SHZ0001		Stephen H. Zalewski 	01-feb-1984
!		Extensive rewriting to implement /GENERATE and incorporate
!		into SET PASSWORD.
!
!**
*/


/* ROUTINE set_password_generate
!
! FUNCTIONAL DESCRIPTION:
!
!	This is the main routine for SET PASSWORD/GENERATE.  It call the 
!	routines to generate the passwords and returns when a password
!	has been chosen by the user.
!
! INPUT PARAMETERS:
!	mini - The minimum password length to generate. (The passwords generated
!	       are of length mini to mini+2.)
!
! OUTPUT PARAMETERS:
!	new_password - An ASCIC string of the password chosen by the user.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
*/

set_password_generate: proc (new_password,mini);

dcl new_password char(32) var;			/* password to be entered by user */
dcl mini fixed bin;				/* minimum password length */

dcl generate_passwords entry ((*) char(20) var,	/* generate the passwords */
	(*) char(40) var, fixed bin, fixed bin, fixed bin);	

dcl sys$exit external entry (fixed bin(31) value);/* called by enfile to exit */
dcl (ss$_normal) globalref fixed bin value;

dcl password(100) char(20) var;			/* passwords to be generated */
dcl hyph_word(100) char(40) var;		/* hyphenate form of passwords to help */
						/* the user with their pronunciation   */

dcl more bit(1) aligned;			/* set when more passwords are to be generated */
dcl on_list bit(1) aligned;			/* set when new_password matches one of  */
						/* the passwords in passwords(1:n_words) */

dcl n_words fixed bin init(5);			/* number of passwords to generate */
dcl maxi fixed bin;				/* maximum password length */

dcl collate builtin;

dcl translation character(128);			/* Used to translate upper to lower case	*/

dcl aligning_blanks char(16) var; 		/* align the words for printing */
dcl (i, j, b, v) fixed bin;


    on endfile(sysin) call sys$exit(ss$_normal);

   /* set up translation buffer to change upper case letters to lower case.	*/
   /* this is used to change the password entered by the user.			*/
    translation = collate;
    do i=66 to 91;			/* replace upper with lower */
 	substr(translation,i,1) = substr(collate,i+32,1);
	end;

   /* generate the words */
    maxi = mini + 2;				/* set maximum word length */
    more = '1'b;
    on_list = '0'b;
    do while (more);
	call generate_passwords (password, hyph_word, mini, maxi, n_words);
	do while(^on_list);
	    put skip(2)
		edit('Choose a password from this list, or press RETURN to get a new list') (a);
	    put skip;
	    get list(new_password) options(prompt('New password: '), no_echo);
	    put skip;
	    if new_password = ''
		then do;
		    put skip;
		    call generate_passwords(password, hyph_word, mini, maxi, n_words);
		    end;
		else do;
		/* see if the new_password matches any of the passwords on the list */
		    new_password = translate(new_password,translation);
		    i = 1;
		    do while(^on_list  &  i <= n_words);
			if new_password = password(i)
			    then on_list = '1'b;
			i = i + 1;
			end;
		    if ^on_list
			then do;
			    put skip edit('That word is not on this list: ') (a);
			    put skip;
			    do i = 1 to n_words;
				aligning_blanks = copy(' ',maxi-length(password(i)));
				put skip edit(password(i)||aligning_blanks,hyph_word(i)) (a,x(4),a);
				end;
			    end;
			else
			    more = '0'b;
		    end;
	    end;
	end;

end set_password_generate;


/* ROUTINE generate_passwords
!
! FUNCTIONAL DESCRIPTION:
!
! Generate a number of pronounceable words according to the rules given in the
! digram table and in the algorithm in random_word_:  First generate an evenly
! distributed random letter string.  Then test it using the random_word_ routine.
! If it is legal, keep it.  If it is not, generate another and test it.  Repeat
! this process until the desired number of pronounceable words is obtained. 
!
! This algorithm requires an initial seed before it generates any numbers.  In
! order to make this initial seed as secure from detection as possible, and also
! to make this program transportable to all types of VAXen, a longword counter
! is incremented in a tight loop, and the lowest two bits are read 32 times at
! 10 millisecond intervals and concatenated together to form the 64-bit initial
! seed. 

! INPUT PARAMETERS:
!	n_words		- number of words to generate
!	min_length	- minimum length of words to be generated
!	max_length	- maximum length of words to be generated
!
!
! OUTPUT PARAMETERS:
!	password	- legal words in both normal and hyphenated form
!	hyph_password	  (Output words are printed 1 per line as well
!		   	  being passed back to the calling procedure)
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
*/

generate_passwords: proc (password, hyph_password, min_length, max_length, n_words);

%replace n_units by 34;

dcl  password(*) char(20) var;			/* PARAMETER: list of words after they have been generated */
dcl  hyph_password(*) char(40) var;		/* PARAMETER: hyphenated form of passwords in above list   */
dcl  min_length fixed bin;			/* PARAMETER: min length of word to be generated */
dcl  max_length fixed bin;			/* PARAMETER: max length of word to be generated */
dcl  n_words fixed bin;				/* PARAMETER: number of words to be generated */
dcl  word_count fixed bin;			/* number of words generated so far */


dcl  random_chars_ entry (char(*) var, fixed bin);	/* get a string of random letters */
dcl  word char(20) var;					/* letter string to be tested */
dcl  word_length fixed bin;				/* length of word to be tested */
dcl  s bit(31) aligned;					/* temporary binary form of word_length */
dcl  n fixed bin;					/* temporary integer form of word_length */
dcl  aligning_blanks char(16) var;			/* blanks to align word for printing */


dcl  pronounceable_ entry (char(*), (*) bit(1) aligned,	/* test the pronounceability of word */
	ptr, ptr, ptr, fixed bin)  returns (bit(1));
dcl  word_is_pronounceable bit(1) aligned;		/* status of word after being tested */


dcl  get_random_bits entry(bit(64) aligned);	/* random number generator */
dcl  seed bit(64) aligned ext;			/* random number generator seed */
dcl  seed_bits bit(2) aligned;			/* initial random number seed bits */
dcl  next_field fixed bin;			/* location in seed string of 2-bit field which */
						/* will be filled by next seed_bits string      */


dcl  counter fixed bin;				/* longword counter whose lowest two */
						/* bits will be stored in seed_bits  */
dcl  read_flag bit(1) aligned ext;		/* set when counter value is to be read */
dcl  delta_time bit(64) aligned;		/* time value for sys$setimr */
dcl  ten_msec char(13) init('0 00:00:00.01');	/* 10 millisecond delta_time value */


dcl sys$bintim entry (				/* convert ASCII string to binary time value */
	char(*),				/*     - ASCII string:		ten_msec     */
	bit(64) aligned)			/*     - system time value: 	delta_time   */
    returns (fixed binary(31));

dcl sys$setimr entry (				/* timer request with AST interrupt	      */
	fixed bin(31) value,			/*     - event flag number:	NOT USED      */
	bit(64) aligned,			/*     - time value:		delta_time    */
	entry value,				/*     - AST procedure:		set_read_flag */
	fixed bin(31) value)			/*     - AST parameter:		NOT USED      */
    options(variable) returns(fixed bin(31));

dcl sys$cantim entry(any,any)			/* cancel the current timer request */
    options(variable) returns(fixed bin(31));

dcl sts$value fixed binary(31);			/* system service return status value */
dcl 1 sts$fields based (addr(sts$value)),	/* sts$value broken down into bits */
      2 sts$success bit(1),				/* set when system service completed successfully */
      2 sts$pad bit(31),				/* padding to make 1 longword */
      2 sts$align char(0);				/* for byte alignment */

/* possible values of sts$value */

dcl (ss$_normal,
     ss$_accvio,
     ss$_exquota,
     ss$_insfmem ) globalref fixed bin value;


dcl collate builtin;

dcl translation character(128);			/* used to encrypt generated passwords */

dcl number_bad_words fixed bin init(93);
dcl bad_word_string(93) char(10) var
    init(
	'tiju','gvl','gvdl','btti','ifmm',
	'dvou','cjudi','ujut','ojhhfs','gvr',
	'mvm','qjl','tojllfm','lmppu','{bl',
	'usvu','ipfs','tmfu','efm','uvu',
	'ofvl','obbj','hfjm','lf{fo','tuspou',
	'lvu','usvu','gmjllfs','qppu','qpu',
	'njfu','ipnp','lpou','hbu','cjm',
	'sffu','bbst','lfwfs','wfsepnnf','cbmmf',
	'ekfwfm','esjuf','esjuu','gbfo','gbo',
	'gboefo','gjuuf','gpsqvmu','ifmwfuf','kvllf',
	'lovmm','lvl','qjll','qspnq','qvm',
	'qvmu','sbtt','spol','svol','twjo',
	'ujtqf','ujtt','qvub','qvubt','qpzb',
	'qpzbt','qpmmb','qpmmbt','hjmjqpzbt','hjmjqpmmbt',
	'dbqvmmp','dbqvmmpt','dpqpo','dbhbs','nfbs',
	'qjt','njfseb','djqpuf','kpefs','gpmmbs',
	'dbhbs','nbsjdb','qfep','dbdb','dvmp',
	'ufub','nbsjdpo','dpkpoft','qjdib','nbnpo',
	'dbcspo','iptujb','iptujbt');


/* This is the structure needed to obtain the digram table.		*/
dcl d_ptr ptr static init(null());		/* location of digram table */
dcl l_ptr ptr static init(null());		/* location of unit letters */
dcl r_ptr ptr static init(null());		/* location of unit rules */


/* this array contains information about all possible pairs of units */
dcl 1 digrams(n_units, n_units) globalref,
      2 begin bit(1),		/* on if this pair must begin syllable */
      2 not_begin bit(1),	/* on if this pair must not begin */
      2 end bit(1),		/* on if this pair must end syllable */
      2 not_end bit(1),		/* on if this pair must not end */
      2 break bit(1),		/* on if this pair is a break pair */
      2 prefix bit(1),		/* on if vowel must precede this pair in same syllable */
      2 suffix bit(1),		/* on if vowel must follow this pair in same syllable */
      2 illegal_pair bit(1),	/* on if this pair may not appear */
      2 align char(0);		/* dummy variable to force byte alignment */


/* this array contains left justified 1 or 2-letter pairs representing each unit */

dcl letters(0:n_units) globalref char(2);


/* this array has rules for each unit */

dcl 1 rules(n_units) based (r_ptr),
      2 no_final_split bit(1),		/* can't be the only vowel in last syllable */
      2 not_begin_syllable bit(1),	/* can't begin a syllable */
      2 vowel bit(1),			/* this is a vowel */
      2 alternate_vowel bit(1);   	/* this is an alternate vowel, (i.e., "y") */


dcl i fixed bin;
dcl j fixed bin;

/**** SLEEZE STRUCTURE */
dcl r(17) char(1) globalref;

/* on the first call to generate_passwords, initialize pointers and	*/
/* generate the initial random number seed. 				*/

	if d_ptr = null()
	    then 
first_call:	do;
		d_ptr = addr(digrams);
		r_ptr = addr(r);
		l_ptr = addr(letters);

		do i=98 to 123;			/* replace lower with lower + 1 */
		    substr(translation,i,1) = substr(collate,i+1,1);
		    end;

    /* get the initial random seed:  Increment a counter in a tight loop.  Set a */
    /* timer to interrupt (with an AST) every 10 milliseconds.  When this AST    */
    /* occurs, read the last two bits of the counter and append them to the seed */
    /* until we have 64 bits.							 */

		/* set delta_time to 10 milliseconds binary time value */
		    sts$value = sys$bintim(ten_msec, delta_time);
		    if ^sts$success
			then do;
			    put skip edit('fatal error:  invalid time string') (a);
			    stop;
			    end;

		next_field = 1;
		do while(next_field < 64);
		    counter = 0;
		    read_flag = '0'b;
		    sts$value = sys$cantim (,);					/* cancel previous timer request */
		    sts$value = sys$setimr (,delta_time, set_read_flag,);	/* set timer: AST every 10 msecs. */
		    if ^sts$success
			then do;
			/* fatal errors:  cannot continue */
			    put skip edit('fatal error:  ') (a);
			    if sts$value = ss$_accvio
				then put edit('can''t read delta_time') (a);
			    else if sts$value = ss$_exquota
				then put edit('too many ASTs or timer entries') (a);
			    else if sts$value = ss$_insfmem
				then put edit('not enough dynamic memory') (a);
			    stop;
			    end;
tight_loop:	    do while(^read_flag);		/* This loop will execute until the AST goes off. */
			 counter =  counter + 1;	/* The AST handler sets read_flag, which stops    */
			end;				/* the loop and transfers control to read_ctr.    */
read_ctr:	    seed_bits = substr(unspec(counter), 1, 2);	/* read the lower two bits of the counter */
		    substr(seed, next_field, 2) = seed_bits;	/* insert them into the seed string */
		    next_field = next_field + 2;
		    end;

	    /* AST handling procedure */

		set_read_flag: proc;
		dcl read_flag bit(1) aligned ext;	/* set when counter value is to be read */

		    read_flag = '1'b;

		    end set_read_flag;
		end first_call;

/* generate 'n_words' pronounceable words */

	do word_count = 1 to n_words;
	    word_is_pronounceable = '0'b;	/* reset the status code for each legal word */
	    call get_random_bits(seed);		/* get a random bit pattern */
	    s = substr(seed, 1, 31);		/* get the length of the word from */
	    unspec(n) = s;			/* the random bit pattern in seed  */
	    word_length = mod(n, max_length-min_length+1) + min_length;
	/* generate random letter strings and test them until a legal word is found */
	    do while (^word_is_pronounceable);
		call random_chars_ (word, word_length);
		call test_word;
		end;
	    aligning_blanks = copy(' ', max_length-word_length);	/* align the words for printing */
	    put skip edit(word||aligning_blanks, hyph_password(word_count)) (a, x(4), a);
	    end;


/*  this internal procedure tests a word against the rules of pronounce-    */
/*  ability contained in the digram table and the random_word_ algorithm.   */
/*  the word is also hyphenated if it is pronounceable.			    */

test_word: proc;	
dcl fixed_word char(word_length);	/* fixed length form of word */
dcl bad_word char(word_length);		/* encrypted word for bad word check */
dcl hyphens (20) bit(1) aligned;	/* position of hyphens in word */
dcl i fixed bin;
dcl bad_word_found bit(1) aligned;

	fixed_word = word;
	if pronounceable_ (fixed_word, hyphens, d_ptr, l_ptr, r_ptr, n_units)
	    then do;
		bad_word = translate(fixed_word,translation);	/* do not use word if naughty */
		i = 1;
		bad_word_found = '0'b;
		do while (^bad_word_found & i <= number_bad_words );
		    if index(bad_word,bad_word_string(i)) ^= 0
			then bad_word_found = '1'b;
		    i = i + 1;
		    end;
		if ^bad_word_found
		    then do;
			word_is_pronounceable = '1'b;
			password(word_count) = fixed_word;
			/* add the hyphens to the word */
		    	hyph_password(word_count) = '';
		        do i = 1 to word_length;
			    hyph_password(word_count) = hyph_password(word_count) || substr(word, i, 1);
			    if hyphens(i)
			    	then hyph_password(word_count) = hyph_password(word_count) || '-';
			    end;
			end;
		end;
	
    end test_word;


end generate_passwords;


/* ROUTINE  random_chars_.pli
!
! FUNCTIONAL DESCRIPTION:
!
! Form a string of random letters, given the length of the string.  The
! letters will be the 26 letters of the english alphabet, and each letter
! will have an equal probability of occuring in any given position in the
! string.  These letters will be concatenated to form a string of the correct
! length.  The input will be the length of the string, and the output will be
! the word in character form. The table of letters is held in an internal
! static array of 26 single-character strings.  A random pattern of 64 bits
! will be obtained by a call to get_random_bits, and this seed will be taken
! 1 byte at a time to generate a random number in the correct range.
!
! INPUT PARAMETERS:
!	length -	length of string to be generated.
!
! OUTPUT PARAMETERS:
!	chars -		string of random letters to be generated.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
*/

random_chars_: proc (chars, length);

dcl chars char(*) var;		/* PARAMETER: string of random letters to be generated */
dcl length fixed bin;		/* PARAMETER: length of string to be generated */
dcl char_count fixed bin;	/* number of characters generated so far */


dcl letters(0:25) char(1) static 	/* table of letters */
    	init('a','b','c','d','e','f','g','h','i','j','k','l','m',
	     'n','o','p','q','r','s','t','u','v','w','x','y','z');
dcl letter_index fixed bin;	/* a random number index into the letter table */
dcl char char(1);		/* a letter from the letter table */


dcl get_random_bits entry(bit(64) aligned);	/* gets a random 64-bit pattern */
dcl seed bit(64) aligned ext;	/* random 64-bit pattern obtained from get_random_bits, */
				/* used to generate 8 random integers.	                */
dcl seed_byte(0:7) bit(8)	/* same as seed, but allows access to individual bytes, */
	based(addr(seed));	/* which allows easier generation of random numbers     */
dcl byte_count fixed bin	/* index of next unused byte in random bit pattern */
	static init(8); 
dcl s bit(8) aligned;		/* temporary bit form of random number */
dcl n fixed bin(8);		/* temporary integer form of random number */
dcl f float bin(8);		/* temporary floating point form of random number */

/* generate the string */

	chars = '';
	do char_count = 1 to length;

	/* see if all bytes of the seed string have been used */
	    if byte_count = 8
		then do;
		/* all bytes have been used, get a new seed string */
		    call get_random_bits(seed);
		    byte_count = 0;
		    end;

	/* We now have a random pattern of 64 bits.  Use one byte at a time to  */
	/* generate a random number between 0 and 25 and use this as an index   */
	/* to get a letter from the table, letters(0:25).			*/

	    unspec(n) = seed_byte(byte_count);	/* make the byte into an integer n, 0 <= n < 256 */
	    f = float(n,8)/float(256,8);	/* map n into a floating point number f, 0 <= f < 1 */
	    letter_index = fixed(trunc(f*26),8);/* map f into an integer of the correct range: 0-25 */
	    char = letters(letter_index);	/* get a letter from the table */
	    chars = chars || char;		/* add letter to end of string */
	    byte_count = byte_count + 1;	/* 1 byte of seed string has been used */
	    end;


end random_chars_;


/* ROUTINE get_random_bits.pli
!
! FUNCTIONAL DESCRIPTION:
!
! Generate a random pattern of 64 bits using the MTH$RANDOM algorithm.
!
! INPUT PARAMETERS:
!	NONE
!
! OUTPUT PARAMETERS:
!	s -	8 byte random seed.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
*/

get_random_bits: proc (s);

dcl s bit(64) aligned;	/* PARAMETER: 8-byte random seed					*/
			/* 	      Also used as random bit pattern output from MTH$RANDOM	*/
dcl s_long(0:1) fixed bin(31) based(addr(s));
dcl s_byte(0:7) fixed bin(7)  based(addr(s));
dcl t fixed bin(31);
dcl t_byte(0:3) fixed bin(7) based(addr(t));

dcl  mth$random entry (fixed binary (31));

/* get a random bit pattern by using the random number seed, s, as a key.  	*/
/* Two calls to the random number generator are necessary because it will only 	*/
/* return 32 bits at a time, and we want a 64 bit sequence.			*/

call mth$random (s_long(0));
call mth$random (s_long(1));
call mth$random (t);

s_byte(0) = t_byte(2);
s_byte(4) = t_byte(3);

end get_random_bits;
