	.TITLE	BAS$MAT_ASSIGN
	.IDENT	/1-017/			; File: BASMATASS.MAR Edit: MDL1017
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: BASIC code support
;
; ABSTRACT:
;
;	This module copies one matrix to another.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. Will, CREATION DATE: 29-May-79
;
; MODIFIED BY:
;++
; 1-001	- Original 
; 1-002 - Add support for byte, g and h floating.  PLL 15-Sep-81
; 1-003 - More modifications for new data types.  PLL 24-Sep-81
; 1-004 - Change external references to G^ RNH 25-Sep-81
; 1-005 - Substitute a macro for the calls to the array fetch and store
;	  routines.  This should speed things up.  PLL 6-Nov-81
; 1-006 - STORE macro must handle g & h floating.  PLL 11-Nov-81
; 1-007 - Correct a run-time expression FETCH and STORE macros.  PLL 20-Jan-82
; 1-008 - Correct FETCH, STORE again.  PLL 23-Feb-82
; 1-009 - Don't list macro expansions.  PLL 16-Mar-82
; 1-010 - Fix branch instruction which excluded dynamic strings.  PLL 26-Mar-1982
; 1-011 - Remove FETCH and STORE macros; they are now located in macro
;	  library MATRIXMAC.OLB.  LB 19-May-1982
; 1-012 - Add support for dynamically mapped arrays.  PLL 1-Jul-1982
; 1-013 - Added code to load up DATA before calling macro STORE.  Also
;	  changed CASE stmt code that was enhanced to use R8 instead
;	  of R11.  LEB 4-JUL-1982.
; 1-014 - Changed own storage to stack storage.  PLL 9-Jul-1982
; 1-015 - in D->G and G->D assignments, after promoting to Hfloat, demote
;	  back down to destination datatype.  MDL 15-Oct-1982
; 1-016 - Use G^ for ALL externals.  SBL 16-Nov-1982
; 1-017 - there are new externals with the BASRTL/BASMATRTL breakup.  Make
;	  them G^ too.  MDL 26-May-1983
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$DSCDEF					; define descriptor offsets
	$SFDEF					; use to get scale

;
; EXTERNAL DECLARATIONS:
;

	.DSABL	GBL				; Prevent undeclared
						;  symbols from being
						;  automatically global.
	.EXTRN	BAS$K_ARGDONMAT			; signalled if all 3 blocks
						;  not present in array desc
						;  or dimct = 0
	.EXTRN	BAS$K_DATTYPERR			; signalled if dtype of array
						; isn't word long float double
						; or if not string to string
	.EXTRN	BAS$STO_FA_W_R8			; array element store for word
	.EXTRN	BAS$STO_FA_L_R8			; array element store for long
	.EXTRN	BAS$STO_FA_F_R8			; array element store - float
	.EXTRN	BAS$STO_FA_D_R8			; array element store - double
	.EXTRN	BAS$FET_FA_W_R8			; array element fetch - word
	.EXTRN	BAS$FET_FA_L_R8			; array element fetch - long
	.EXTRN	BAS$FET_FA_F_R8			; array element fetch - float
	.EXTRN	BAS$FET_FA_D_R8			; array element fetch - double
	.EXTRN	BAS$STO_FA_B_R8			; array element store - byte
	.EXTRN	BAS$STO_FA_G_R8			; array element store - gfloat
	.EXTRN	BAS$STO_FA_H_R8			; array element store - hfloat
	.EXTRN	BAS$FET_FA_B_R8			; array element fetch - byte
	.EXTRN	BAS$FET_FA_G_R8			; array element fetch - gfloat
	.EXTRN	BAS$FET_FA_H_R8			; array element fetch - hfloat
	.EXTRN	BAS$STORE_BFA			; array element store any type
	.EXTRN	BAS$FETCH_BFA			; array element fetch any type
	.EXTRN	BAS$MAT_REDIM			; check if redimensioning of
						;  dest array is necessary, if
						;  so, do it
	.EXTRN	BAS$$SCALE_R1			; scale the double procision
	.EXTRN	STR$FREE1_DX_R4			; free a string
	.EXTRN	BAS$$STOP			; signal fatal errors
	.EXTRN	MTH$DINT_R4			; truncate dbl precision number

;
; MACROS:
;

;	$BAS$MAT_ASS	copy loop algorithm,  see next page
;	FETCH		fetch an element from an array (found in macro library
;			MATRIXMAC.OLB)
;	STORE		store an element into an array (found in macro library
;			MATRIXMAC.OLB)

;
; EQUATED SYMBOLS:
;

	first_arg = 4				; arg offset for str copy
	second_arg = 8				; arg offset for str copy
	index1 = 12				; stack offset for str copy
	index2 = 16				; stack offset for str copy
	temp_desc = 20				; stack offset for str copy
	lower_bnd2 = 0				; stack offset for temp
	lower_bnd1 = 4				; stack offset for temp
	upper_bnd1 = 8				; stack offset for temp
	value_desc = 12				; output descriptor
	str_len = 12				; length field in descriptor
	dtype = 14				; data type field in desc
	class = 15				; class field within desc
	pointer = 16				; pointer field within desc
	data = 20				; DATA (for 4 longwords)
	dsc$l_l1_1 = 24				; desc offset if 1 sub
	dsc$l_u1_1 = 28				; desc offset if 1 sub
	dsc$l_l1_2 = 28				; desc offset if 2 sub
	dsc$l_u1_2 = 32				; desc offset if 2 sub
	dsc$l_l2_2 = 36				; desc offset if 2 sub
	dsc$l_u2_2 = 40				; desc offset if 2 sub

;
; OWN STORAGE:
;

;	NONE

;
; PSECT DECLARATIONS:
;
	.PSECT _BAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


;+
; This macro contains the looping mechanism for accessing all elements of
; an array.  It also contains all the logic for all the combinations of data
; types and scaling.  A macro is used to make it easy to maintain the parallel
; code for all the different data types.
;-
	.MACRO	$BAS$MAT_ASS src_dtype, dest_dtype ; copy algorithm

;+
; Loop through all the rows.  Row and column upper and lower bounds have been
; initialized on the stack.
;-

LOOP_1ST_SUB'src_dtype'dest_dtype':
	MOVL	lower_bnd2(SP), R11		; R11 has 2nd lower bound

;+
; Loop through all the elements (columns) of the current row.  Column lower
; bound is initialized in R11.  Column upper bound is on the stack.
; Distinguish array by data type so that the correct fetch routine can 
; retrieve the data, the correct conversion can be done and the correct
; store routine can be called.
;-

LOOP_2ND_SUB'src_dtype'dest_dtype':

;+
; Get the data from source array
;-

	MOVL	R10, R0				; pointer to array dest
	MOVL	lower_bnd1(SP), R1		; current row
	MOVL	R11, R2				; current col
	FETCH	'src_dtype'			; fetch data from src array

;+
; If the data types of the source and destination arrays are different,
; convert the data to the destination type.  If scaling is needed (ie if
; at least one but not both of the arrays is double) scale the data.
;-

	.IF	DIF	src_dtype, dest_dtype	; src and dest arrays are not
						; same data type
	.IF	IDN	src_dtype, D		; source is double
	MOVD	R0, -(SP)			; save the data
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
						; call a BLISS routine because
						; the frame offsets are only
						; defined for BLISS
	DIVD3	R0, (SP)+, R0			; scale
	.IF	IDN	dest_dtype, G		; special case dbl to gfloat
	CVTDH	R0, R0				; must be promoted to hfloat
	CVTHG	R0, R0				; then back down to gfloat
	.IFF
	CVT'src_dtype'dest_dtype'	R0, R0  ; only if dbl to non-gfloat
	.ENDC
	.IFF
	.IF	IDN	src_dtype, G		; special case gfloat to dbl
	.IF	IDN	dest_dtype, D
	CVTGH	R0, R0				; promote to hfloat
	CVTHD	R0, R0				; then back down to dbl
	.IFF
	CVT'src_dtype'dest_dtype'	R0, R0	; convert data from R0 into R0
						;  R0 & R1 for double
	.ENDC
	.IFF
	CVT'src_dtype'dest_dtype'	R0, R0	; src not D or G - OK to convert
	.ENDC
	.ENDC
	.IF	IDN	dest_dtype, D		; dest is double
	.IF	DIF	src_dtype, G		; and src is not gfloat
	MOVD	R0, -(SP)			; save the data
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
						; call a BLISS routine because
						; the frame offsets are only
						; defined for BLISS
	MULD2	(SP)+, R0			; scale
	JSB	G^MTH$DINT_R4			; integerize
	.ENDC
	.ENDC
	.ENDC

;+
; Now store the data in the destination array.
; Hfloat passed by value takes 4 words, gfloat and double take 2 words,
; and all other dtypes take 1 longword.
;-

	.IF	IDN	dest_dtype, H		; dtype is hfloat
	MOVL	dest_matrix(AP), R4		; pointer to array desc
	MOVL	lower_bnd1(SP), R5		; current row
	MOVL	R11, R6				; current column
	.IFF
	.IF	IDN	dest_dtype, G		; dtype is gfloat
	MOVL	dest_matrix(AP), R2		; pointer to array desc
	MOVL	lower_bnd1(SP), R3		; current row
	MOVL	R11, R4				; current column
	.IFF
	.IF	IDN	dest_dtype, D		; see if dtype is double
	MOVL	dest_matrix(AP), R2		; pointer to array desc
	MOVL	lower_bnd1(SP), R3		; current row
	MOVL	R11, R4				; current column
	.IFF
	MOVL	dest_matrix(AP), R1		; all other cases here
	MOVL	lower_bnd1(SP), R2		; current row
	MOVL	R11, R3				; current column
	.ENDC
	.ENDC
	.ENDC					; code now same for all dtypes
	MOV'dest_dtype'	R0, DATA(SP)		; load value into DATA
	STORE	'dest_dtype'			; store in array
	INCL	R11				; get next column
	CMPL	R11, R9				; see if last column done
	BGTR	5$
	BRW	LOOP_2ND_SUB'src_dtype'dest_dtype' ; no, continue inner loop

;+
; Have completed entire row.  See if it was the last row.  If not,
; continue with next row.
;-

5$:	INCL	lower_bnd1(SP)			; get next row
	CMPL	lower_bnd1(SP), upper_bnd1(SP)	; see if last row done
	BGTR	7$
	BRW	LOOP_1ST_SUB'src_dtype'dest_dtype' ; no, continue outer loop

7$:	RET					; yes, finished

	.ENDM

	.SBTTL	BAS$MAT_ASSIGN  - Copy one matrix to another
;++
; FUNCTIONAL DESCRIPTION:
;
;	Copy one matrix to another.  Redimension the output matrix to have the
;	same dimensions as the input matrix.  Initialize all the necessary
;	looping	information on the stack.  Conversions will have to be done
;	from the source data type to the destination data type, so divide
;	the looping portion according to the data types.  String arrays
;	may only be copied to string arrays so no conversion is necessary
;	there.
;
; CALLING SEQUENCE:
;
;	CALL BASMAT_ASSIGN (src_matrix.rx.da, dest_matrix.wx.da)
;
; INPUT PARAMETERS:
;
	src_matrix = 4
;
; IMPLICIT INPUTS:
;
;	Scale from the callers frame to scale double precision.
;
; OUTPUT PARAMETERS:
;
	dest_matrix = 8
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	This routine calls the redimensioning routine and the array element
;	fetch and store routines and therefore may signal any of their errors.
;	It may also signal any of the errors listed in the externals section.
;	It may also cause the destination array to have different dimensions.
;
;--

	.ENTRY BAS$MAT_ASSIGN, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,IV>

;+
;	REGISTER USAGE
;	R0 - R8 destroyed by store routines
;	R9	upper bound for 2nd subscript
;	R10	pointer to array descriptor
;	R11	current value of 2nd subscript
;-

;+
; Put routine arguments into registers for ease of use.
; If block 2 of array descriptor (multipliers) is not present then error.
;-

	MOVL	src_matrix(AP), R10		; ptr to array descr in R10
	BBC	#DSC$V_FL_BOUNDS, DSC$B_AFLAGS(R10), ERR_ARGDONMAT
						; exit if block 3 not
						; present in descriptor
	CMPB	DSC$B_DTYPE(R10), #DSC$K_DTYPE_T ; see if not numeric
	BNEQ	1$				 
	BRW	STRING				; text
1$:	CMPB	DSC$B_DTYPE(R10), #DSC$K_DTYPE_DSC ; see if dynamic string
	BNEQ	2$				; numeric

;+
; Array of descriptors.  This may be a dynamically mapped numeric array, or
; an array of dynamic strings.  Decide which and branch.
;-

	MOVL	4(R10), R0			; get addr of desc
	CMPB	DSC$B_DTYPE(R0), #DSC$K_DTYPE_T ; text?
	BNEQ	2$				; no - numeric
	BRW	STRING				; text

;+
; Allocate value_desc and data on the stack.  This applies to both 1 and 2
; dimensional cases.
;-

2$: 	CLRQ	-(SP)				; allocate data
	CLRQ	-(SP)				;  may be hfloat
	CLRQ	-(SP)				; allocate value_desc

;+
; Set up limits for looping through all elements
;-

	CMPB	DSC$B_DIMCT(R10), #1		; determine # of subscripts
	BEQLU	INIT_ONE_SUB			; 1 sub, go init
	BGTRU	INIT_TWO_SUBS			; >=2 subs, go init
						; 0 subs, fall into error proc

ERR_ARGDONMAT:
	PUSHL	#BAS$K_ARGDONMAT		; signal error, 0 for dimct
	CALLS	#1, G^BAS$$STOP			; or block 2 or 3 absent

;+
; There is only 1 subscript.  Redimension the destination array.
; Make both upper and lower bound for 2nd
; subscript a 1.  A second subscript will be passed to and ignored by the
; store routine.  Put bounds for 1st subscript on stack.
;-

INIT_ONE_SUB:
	PUSHL	dsc$l_u1_1(R10)			; get bound for redim
	PUSHL	dest_matrix(AP)			; pointer to dest array desc
	CALLS	#2, G^BAS$MAT_REDIM		; redimension the dest
	PUSHL	dsc$l_u1_1(R10)			; 1st upper bound
	PUSHL	dsc$l_l1_1(R10)			; 1st lower bound
	BGTR	1$				; not 0 or neg, do 2nd sub
	MOVL	#1, (SP)			; don't alter col 0
1$:	PUSHL	#1				; dummy 2nd upper bound
	MOVL	#1, R9				; dummy 2nd lower bound
	BRB	SEPARATE_DTYPES			; go loop

;+
; There are 2 subscripts.  Check and redimension the destination array if
; necessary.  Put the upper bound for both subscripts on the
; stack and make sure that the lower bound for both subscripts will start
; at 1 (do not alter row or col 0)
;-

INIT_TWO_SUBS:
	PUSHL	dsc$l_u2_2(R10)			; 2nd upper bound
	PUSHL	dsc$l_u1_2(R10)			; 1st upper bound
	PUSHL	dest_matrix(AP)			; dest array pointer
	CALLS	#3, G^BAS$MAT_REDIM		; redimension destination
	PUSHL	dsc$l_u1_2(R10)			; 1st upper bound
	PUSHL	dsc$l_l1_2(R10)			; 1st lower bound
	BGTR	1$				; not row 0 or neg, do cols
	MOVL	#1, (SP)			; start with row 1
1$:	MOVL	dsc$l_u2_2(R10), R9		; 2nd upper bound
	PUSHL	dsc$l_l2_2(R10)			; 2nd lower bound
	BGTR	SEPARATE_DTYPES			; not col 0 or neg, go loop
	MOVL	#1, (SP)			; start with col 1

;+
; Algorithm now differs according to data types
;-

SEPARATE_DTYPES:
	MOVL	R10, R5
5$:	CASEB	DSC$B_DTYPE(R5), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
2$:	.WORD	BYTE-2$				; code for byte dtype
	.WORD	WORD-2$				; code for word dtype
	.WORD	LONG-2$				; code for long dtype
	.WORD	ERR_DATTYPERR-2$		; quad not supported
	.WORD	FLOAT-2$			; code for float dtype
	.WORD	DOUBLE-2$			; code for double dtype
	
;+
; To avoid having to specify ERR_DATTYPERR for all the dtypes between
; double and gfloat (12 to 26), check for gfloat and hfloat separately.
;-

	CMPB	DSC$B_DTYPE(R5), #DSC$K_DTYPE_G
	BNEQ	3$
	BRW	GFLOAT				; code for gfloat dtype

3$:	CMPB	DSC$B_DTYPE(R5), #DSC$K_DTYPE_H
	BNEQ	4$
	BRW	HFLOAT				; code for hfloat dtype

4$:	CMPB	DSC$B_DTYPE(R5), #DSC$K_DTYPE_DSC
	BNEQ	ERR_DATTYPERR
	MOVL	4(R10), R5			; get addr of desc
	BRB	5$

ERR_DATTYPERR:
	PUSHL	#BAS$K_DATTYPERR		; Signal error, unsupported
	CALLS	#1, G^BAS$$STOP			; dtype in array desc

	.PAGE
;+
; Source array is a string array.
;-

STRING:

;+
;	REGISTER USAGE
;	R2	current bound for 1st subscript
;	R3	upper bound for 1st subscript
;	R4	lower bound for 2nd subscript
;	R5	upper bound for 2nd subscript
;	R6	current value of 2nd subscript
;	R9	pointer to destination array descriptor
;	R10	pointer to source array descriptor
;-

;+
; Initialize stack for CALLG to element store routine.  Then divide algorithm
; based on number of subscripts.  Since the dtype in the temporary descriptor
; is text the array fetch and store routines will signal an error if
; the dtype of the array is not text of array of descriptors of type text
; and there is no need to do a check for dtype here.
;-

	MOVL	dest_matrix(AP), R9
	CLRL	-(SP)				; pointer of descriptor
	PUSHL	#<<DSC$K_CLASS_D @ 24> + <DSC$K_DTYPE_T @ 16>> ; 1st desc word
						; class, type and 0 length
	CLRQ	-(SP)				; space for indices
	PUSHL	R10				; ptr to dest desc for call
	PUSHAL	12(SP)				; pointer to NULL descriptor
	CMPB	DSC$B_DIMCT(R10), #1		; determine # of subscripts
	BEQLU	INIT_ONE_SUB_S			; 1 sub, go init
	BGTRU	INIT_TWO_SUBS_S			; >=2 subs, go init
	BRW	ERR_ARGDONMAT			; 0 subs, error

;+
; There is only 1 subscript.  Make both upper and lower bound for 2nd
; subscript a 1.  A second subscript will be passed to and ignored by the
; store routine because the argcount in the arglist of the CALL will not
; include the 2nd subscript.  Put bounds for 1st subscript into registers.
;-

INIT_ONE_SUB_S:
	PUSHL	#3				; 3 arguments to store routine
						;  ignores 2nd index
	PUSHL	dsc$l_u1_1(R10)			; get bound for redim
	PUSHL	R9				; pointer to dest array desc
	CALLS	#2, G^BAS$MAT_REDIM		; redimension the dest array
	MOVL	dsc$l_u1_1(R10), R3		; 1st upper bound
	MOVL	dsc$l_l1_1(R10), R2		; 1st lower bound
	BGTR	1$				; not 0 or neg, init 2nd bound
	MOVL	#1, R2				; don't alter row 0
1$:	MOVL	#1, R4				; set 2nd lower bnd to 1
	MOVL	#1, R5				; set 2nd upper bnd to 1
	BRB	LOOP_1ST_SUB_S			; go loop

;+
; There are 2 subscripts.  Put the upper bound for both subscripts in
; registers and make sure that the lower bound for both subscripts will start
; at 1 (do not alter row or col 0)
;-

INIT_TWO_SUBS_S:
	PUSHL	#4				; 4 arguments to store routine
	PUSHL	dsc$l_u2_2(R10)			; 2nd upper bound for redim
	PUSHL	dsc$l_u1_2(R10)			; 1st upper bound for redim
	PUSHL	R9				; ptr to dest array to redim
	CALLS	#3, G^BAS$MAT_REDIM		; redim the dest array
	MOVL	dsc$l_u2_2(R10), R5		; 2nd upper bound
	MOVL	dsc$l_l2_2(R10), R4		; 2nd lower bound
	BGTR	1$				; not col 0 or neg, do cols
	MOVL	#1, R4				; start with col 1
1$:	MOVL	dsc$l_u1_2(R10), R3		; 1st upper bound
	MOVL	dsc$l_l1_2(R10), R2		; 1st lower bound
	BGTR	LOOP_1ST_SUB_S			; not row 0 or neg, go loop
	MOVL	#1, R2				; start with row 1

;+
; Loop through all the rows.  Row and column upper and lower bounds have been
; initialized in registers.
;-

LOOP_1ST_SUB_S:
	MOVL	R4, R6				; R6 has 1st lower bound

;+
; Loop through all the elements (columns) of the current row.  Column lower
; bound is initialized in R6.  Column upper bound is in R5.
;-

LOOP_2ND_SUB_S:

;+
; Fetch the string from the source array.
;-

	MOVL	R6, index2(SP)			; current column
	MOVL	R2, index1(SP)			; current row
	MOVL	R10, first_arg(SP)		; source array desc pointer
	MOVAQ	temp_desc(SP), second_arg(SP)	; desc to copy fetch
	CALLG	(SP), G^BAS$FETCH_BFA		; copy element to temp_desc

;+
; Store the string in the destination array.  Note that the indices are
; already set from the fetch.
;-

	MOVAQ	temp_desc(SP), first_arg(SP)	; string to copy to dest
	MOVL	R9, second_arg(SP)		; dest array desc pointer
	CALLG	(SP), G^BAS$STORE_BFA		; store in array
	INCL	R6				; get next column
	CMPL	R6, R5				; see if last column done
	BLEQ	LOOP_2ND_SUB_S			; no, continue inner loop

;+
; Have completed entire row.  See if it was the last row.  If not,
; continue with next row.
;-

	INCL	R2				; get next row
	CMPL	R2, R3				; see if last row done
	BLEQ	LOOP_1ST_SUB_S			; no, continue outer loop

	MOVAQ	temp_desc(SP), R0		; yes, free the temp string
	JSB	G^STR$FREE1_DX_R4
	RET					; finished

	.PAGE
;+
; Source array is a byte array.  Now differentiate on the destination type.
;-

BYTE:	MOVL	dest_matrix(AP), R8		; point to dest descriptor
5$:	CASEB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	BYTE_TO_BYTE-1$			; code for byte dtype
	.WORD	BYTE_TO_WORD-1$			; code for word dtype
	.WORD	BYTE_TO_LONG-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	BYTE_TO_FLOAT-1$		; code for float dtype
	.WORD	BYTE_TO_DOUBLE-1$		; code for double dtype

;+
; Check for g and h floating separately, since their dtypes do not fit into
; the CASEB range.
;-
	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	BYTE_TO_GFLOAT			; code for gfloat dtype

2$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	BYTE_TO_HFLOAT			; code for hfloat dtype
	
3$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R8), R8			; get addr of desc
	BRB	5$				; CASE again for dtype in desc

4$:	BRW	ERR_DATTYPERR

;+
; Now type of source and destination arrays are known.  Use the macro to
; generate the code for each case
;-

	.PAGE
BYTE_TO_BYTE:	$BAS$MAT_ASS	B, B

	.PAGE
BYTE_TO_WORD:	$BAS$MAT_ASS	B, W

	.PAGE
BYTE_TO_LONG:	$BAS$MAT_ASS	B, L

	.PAGE
BYTE_TO_FLOAT:	$BAS$MAT_ASS	B, F

	.PAGE
BYTE_TO_DOUBLE:	$BAS$MAT_ASS	B, D

	.PAGE
BYTE_TO_GFLOAT: $BAS$MAT_ASS	B, G

	.PAGE
BYTE_TO_HFLOAT: $BAS$MAT_ASS	B, H
	.PAGE
;+
; Source array is a word array.  Now differentiate on the destination type.
;-

WORD:	MOVL	dest_matrix(AP), R8		; point to dest descriptor
5$:	CASEB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	WORD_TO_BYTE-1$			; code for byte dtype
	.WORD	WORD_TO_WORD-1$			; code for word dtype
	.WORD	WORD_TO_LONG-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	WORD_TO_FLOAT-1$		; code for float dtype
	.WORD	WORD_TO_DOUBL-1$		; code for double dtype
;+
; Check for g and h floating separately, since their dtypes do not fit into
; the CASEB range.
;-
	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	WORD_TO_GFLOAT			; code for gfloat dtype

2$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	WORD_TO_HFLOAT			; code for hfloat dtype
	
3$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R8), R8			; get addr of desc
	BRB	5$				; CASE again for dtype in desc

4$:	BRW	ERR_DATTYPERR


;+
; Now type of source and destination arrays are known.  Use the macro to
; generate the code for each case
;-

	.PAGE
WORD_TO_BYTE:	$BAS$MAT_ASS	W, B

	.PAGE
WORD_TO_WORD:	$BAS$MAT_ASS	W, W

	.PAGE
WORD_TO_LONG:	$BAS$MAT_ASS	W, L

	.PAGE
WORD_TO_FLOAT:	$BAS$MAT_ASS	W, F

	.PAGE
WORD_TO_DOUBL:	$BAS$MAT_ASS	W, D

	.PAGE
WORD_TO_GFLOAT: $BAS$MAT_ASS	W, G

	.PAGE
WORD_TO_HFLOAT: $BAS$MAT_ASS	W, H
	.PAGE
;+
; Source array is a longword array.  Now differentiate on the destination type
;-

LONG:	MOVL	dest_matrix(AP), R8		; point to dest descriptor
5$:	CASEB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	LONG_TO_BYTE-1$			; code for byte dtype
	.WORD	LONG_TO_WORD-1$			; code for word dtype
	.WORD	LONG_TO_LONG-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	LONG_TO_FLOAT-1$		; code for float dtype
	.WORD	LONG_TO_DOUBLE-1$		; code for double dtype


;+
; Check for g and h floating separately, since their dtypes do not fit into
; the CASEB range.
;-
	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	LONG_TO_GFLOAT			; code for gfloat dtype

2$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	LONG_TO_HFLOAT			; code for hfloat dtype
	
3$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R8), R8			; get addr of desc
	BRB	5$

4$:	BRW	ERR_DATTYPERR

;+
; Now type of source and destination arrays are known.  Use the macro to
; generate the code for each case
;-

	.PAGE
LONG_TO_BYTE:	$BAS$MAT_ASS	L, B

	.PAGE
LONG_TO_WORD:	$BAS$MAT_ASS	L, W

	.PAGE
LONG_TO_LONG:	$BAS$MAT_ASS	L, L

	.PAGE
LONG_TO_FLOAT:	$BAS$MAT_ASS	L, F

	.PAGE
LONG_TO_DOUBLE:	$BAS$MAT_ASS	L, D

	.PAGE
LONG_TO_GFLOAT: $BAS$MAT_ASS	L, G

	.PAGE
LONG_TO_HFLOAT:	$BAS$MAT_ASS	L, H
	.PAGE
;+
; Source array is a floating array.  Now differentiate on the destination type
;-

FLOAT:	MOVL	dest_matrix(AP), R8		; point to dest descriptor
5$:	CASEB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	FLOAT_TO_BYTE-1$		; code for byte dtype
	.WORD	FLOAT_TO_WORD-1$		; code for word dtype
	.WORD	FLOAT_TO_LONG-1$		; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	FLOAT_TO_FLOAT-1$		; code for float dtype
	.WORD	FLOAT_TO_DOUBL-1$		; code for double dtype
;+
; Check for g and h floating separately, since their dtypes do not fit into
; the CASEB range.
;-
	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	FLOAT_TO_GFLOA			; code for gfloat dtype

2$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	FLOAT_TO_HFLOA			; code for hfloat dtype
	
3$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R8), R8			; get addr of desc
	BRB	5$				; CASE again for dtype in desc

4$:	BRW	ERR_DATTYPERR

;+
; Now type of source and destination arrays are known.  Use the macro to
; generate the code for each case
;-

	.PAGE
FLOAT_TO_BYTE:	$BAS$MAT_ASS	F, B

	.PAGE
FLOAT_TO_WORD:	$BAS$MAT_ASS	F, W

	.PAGE
FLOAT_TO_LONG:	$BAS$MAT_ASS	F, L

	.PAGE
FLOAT_TO_FLOAT:	$BAS$MAT_ASS	F, F

	.PAGE
FLOAT_TO_DOUBL:	$BAS$MAT_ASS	F, D

	.PAGE
FLOAT_TO_GFLOA:	$BAS$MAT_ASS	F, G

	.PAGE
FLOAT_TO_HFLOA:	$BAS$MAT_ASS	F, H

	.PAGE
;+
; Source array is a double array.  Now differentiate on the destination type.
;-

DOUBLE:	MOVL	dest_matrix(AP), R8		; point to dest descriptor
5$:	CASEB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	DOUBLE_TO_BYTE-1$		; code for byte dtype
	.WORD	DOUBLE_TO_WORD-1$		; code for word dtype
	.WORD	DOUBLE_TO_LONG-1$		; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	DOUBLE_TO_FLOA-1$		; code for float dtype
	.WORD	DOUBLE_TO_DOUBL-1$		; code for double dtype
;+
; Check for g and h floating separately, since their dtypes do not fit into
; the CASEB range.
;-
	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	DOUBLE_TO_GFLOA			; code for gfloat dtype

2$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	DOUBLE_TO_HFLOA			; code for hfloat dtype
	
3$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R8), R8			; get addr of desc
	BRB	5$				; CASE again for dtype in desc

4$:	BRW	ERR_DATTYPERR


;+
; Now type of source and destination arrays are known.  Use the macro to
; generate the code for each case
;-

	.PAGE
DOUBLE_TO_BYTE:	$BAS$MAT_ASS	D, B

	.PAGE
DOUBLE_TO_WORD:	$BAS$MAT_ASS	D, W

	.PAGE
DOUBLE_TO_LONG:	$BAS$MAT_ASS	D, L

	.PAGE
DOUBLE_TO_FLOA: $BAS$MAT_ASS	D, F

	.PAGE
DOUBLE_TO_DOUBL: $BAS$MAT_ASS	D, D

	.PAGE
DOUBLE_TO_GFLOA: $BAS$MAT_ASS	D, G

	.PAGE
DOUBLE_TO_HFLOA: $BAS$MAT_ASS	D, H

;+
; Source array is a gfloat array.  Now differentiate on the destination type.
;-

GFLOAT:	MOVL	dest_matrix(AP), R8		; point to dest descriptor
5$:	CASEB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	GFLOAT_TO_BYTE-1$		; code for byte dtype
	.WORD	GFLOAT_TO_WORD-1$		; code for word dtype
	.WORD	GFLOAT_TO_LONG-1$		; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	GFLOAT_TO_FLOAT-1$		; code for float dtype
	.WORD	GFLOAT_TO_DOUBL-1$		; code for double dtype

;+
; Check for g and h floating separately, since their dtypes do not fit into
; the CASEB range.
;-
	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	GFLOAT_TO_GFLOA			; code for gfloat dtype

2$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	GFLOAT_TO_HFLOA			; code for hfloat dtype
	
3$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R8), R8			; get addr of desc
	BRB	5$				; CASE again for dtype in desc

4$:	BRW	ERR_DATTYPERR

;+
; Now type of source and destination arrays are known.  Use the macro to
; generate the code for each case
;-

	.PAGE
GFLOAT_TO_BYTE:	$BAS$MAT_ASS	G, B

	.PAGE
GFLOAT_TO_WORD:	$BAS$MAT_ASS	G, W

	.PAGE
GFLOAT_TO_LONG:	$BAS$MAT_ASS	G, L

	.PAGE
GFLOAT_TO_FLOAT:$BAS$MAT_ASS	G, F

	.PAGE
GFLOAT_TO_DOUBL:$BAS$MAT_ASS	G, D

	.PAGE
GFLOAT_TO_GFLOA:$BAS$MAT_ASS	G, G

	.PAGE
GFLOAT_TO_HFLOA:$BAS$MAT_ASS	G, H
;+
; Source array is an hfloat array.  Now differentiate on the destination type.
;-

HFLOAT:	MOVL	dest_matrix(AP), R8		; point to dest descriptor
5$:	CASEB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	HFLOAT_TO_BYTE-1$		; code for byte dtype
	.WORD	HFLOAT_TO_WORD-1$		; code for word dtype
	.WORD	HFLOAT_TO_LONG-1$		; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	HFLOAT_TO_FLOA-1$		; code for float dtype
	.WORD	HFLOAT_TO_DOUBL-1$		; code for double dtype

;+
; Check for g and h floating separately, since their dtypes do not fit into
; the CASEB range.
;-
	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	HFLOAT_TO_GFLOA			; code for gfloat dtype

2$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	HFLOAT_TO_HFLOA			; code for hfloat dtype
	
3$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R8), R8			; get addr of desc
	BRB	5$				; CASE again for dtype in desc

4$:	BRW	ERR_DATTYPERR

;+
; Now type of source and destination arrays are known.  Use the macro to
; generate the code for each case
;-

	.PAGE
HFLOAT_TO_BYTE:	$BAS$MAT_ASS	H, B

	.PAGE
HFLOAT_TO_WORD:	$BAS$MAT_ASS	H, W

	.PAGE
HFLOAT_TO_LONG:	$BAS$MAT_ASS	H, L

	.PAGE
HFLOAT_TO_FLOA:	$BAS$MAT_ASS	H, F

	.PAGE
HFLOAT_TO_DOUBL:$BAS$MAT_ASS	H, D

	.PAGE
HFLOAT_TO_GFLOA:$BAS$MAT_ASS	H, G

	.PAGE
HFLOAT_TO_HFLOA:$BAS$MAT_ASS	H, H
	.END					; end of BAS$MAT_ASSIGN
