MODULE MAIL$READ( %TITLE 'DISPLAY THE CURRENT MESSAGE'
		IDENT = 'V04-000' ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	VAX/VMS MAIL UTILITY
!
! ABSTRACT:	DISPLAY THE TEXT IN THE CURRENT MAIL MESSAGE.
!
! ENVIRONMENT:	NATIVE/USER MODE
!
! AUTHOR: LEN KAWELL, CREATION DATE: 21-APR-1978
!
! MODIFIED BY:
!
!	V03-014	ROP0018		Robert Posniak		 3-JUL-1984
!		Ensure that new mail count does not get
!		decremented if not reading from default
!		message file.
!
!	V03-013	ROP0005		Robert Posniak		 8-JUN-1984
!		Ensure that read terminates when message ends
!		at bottom of scope.
!		
!	V03-012	BLS0280		Benn Schreiber		 4-MAR-1984
!		Form feed as last character was producing odd behavior.
!
!	V03-011	BLS0255		Benn Schreiber		28-Dec-1983
!		New global flags
!
!	V03-010	BLS0246		Benn Schreiber		 8-Nov-1983
!		Change interface to decrement new mail count.  Remove
!		translation table and put in dynamic memory to shrink image.
!
!	V03-009	BLS0235		Benn Schreiber		23-Aug-1983
!		Remove cr/lf filtering for isam files, it's done
!		by the get line routine.
!
!	V03-008	BLS0229		Benn Schreiber		16-Jul-1983
!		Change new mail count handling.
!
!	V03-007	BLS0224		Benn Schreiber		 1-Jun-1983
!		Clear held record if reading new message.
!
!	V03-006	BLS0220		Benn Schreiber		30-Apr-1983
!		Use a translate tablea and MOVTC to do the filtering
!
!	V03-005	BLS0217		Benn Schreiber		13-Apr-1983
!		Filter CSI on output.  Move folder name to right corner.
!
!	V03-004	BLS0214		Benn Schreiber		27-Mar-1983
!		Ensure that isam read always gets FROM line without
!		date in it.  Filter ^N and ^O (SI/SO) from output also.
!
!	V03-003	BLS0211		Benn Schreiber		13-Mar-1983
!		Support ISAM mail files.  Handle CTRL/C during displaying
!		the message.  Filter out the ESCAPE character from text.
!
!	V03-002	BLS0189		Benn Schreiber		18-Oct-1982
!		Set flag that message has been read
!
!	V03-001	BLS0177		Benn Schreiber		21-Jun-1982
!		Use MAIL$G_OUTCHAR rather than INPCHAR
!
!--

!
! TABLE OF CONTENTS:
!

!
! INCLUDE FILES:
!
	LIBRARY 'SYS$LIBRARY:STARLET';
	REQUIRE 'SRC$:MAILREQ';
	LIBRARY 'LIB$:MAILDEF';
!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!
OWN
    DYN_DESC : DYN_DESC_DECL;		!Local dynamic string
    
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	LIB$GET_VM,				! Allocate virtual memory
	MAIL$CMD_ERASE,				! Erase the screen
	MAIL$DECR_NEWMAIL,			! Decrement new mail count
	MAIL$GET_MSG,				! Get next message record
	MAIL$GETMSG,				! Get text for signal value
	MAIL$GET_I_MSG,				! Get next ISAM message record
	MAIL$INFO_I_MSG,			! Get info about ISAM msg
	MAIL$NEW_MSG,				! Test if message is "new"
	MAIL$PUT_OUTPUT;			! Put to SYS$OUTPUT

EXTERNAL
	MAIL$T_RD_RAB,				! Rab for mail file i/o
	MAIL$GL_FLAGS : $BBLOCK,		! Control flags
	MAIL$B_MSGTRAN : BYTE,			! Transition for GET_I_MSG
	MAIL$L_OUTDEVDP,			! Output device dependent info
	MAIL$L_OUTLINES,			! Number of lines per page
	MAIL$L_CURMSG : REF $BBLOCK,		! Current message descriptor
	MAIL$Q_CURFOLDER : $BBLOCK,		! Current ISAM folder name
	MAIL$Q_MSG_FILE: BLOCK[,BYTE],		! Current message file name
	MAIL$L_MSG_NUM:	 LONG,			! Current message number
	MAIL$L_MSG_STS,				! message reading status
	MAIL$W_MSG_RSIZ: WORD,			! Current message record size
	MAIL$L_MSG_RADR: LONG,			! Current message record addr
	MAIL$Q_USERNAME: BLOCK[,BYTE];		! User's usernname

OWN
    TRANSTABLE : REF VECTOR[,BYTE];

GLOBAL ROUTINE MAIL$FILTER_OUTPUT (DESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Accepts a descriptor and converts escape, SI, and SO characters in 
!	the string to '$'.  The resulting string is then output.
!--
BEGIN

MAP
    DESC : REF $BBLOCK;

LOCAL
    PTR : REF VECTOR[,BYTE],
    OUTDESC : VECTOR[2,LONG],
    OUTBUF : $BBLOCK[2048];

IF .TRANSTABLE EQL 0
THEN BEGIN
    IF_ERR(LIB$GET_VM(%REF(256),TRANSTABLE);,
		RETURN SIGNAL(.STATUS));
    INCRU I FROM 0 TO 255
	DO TRANSTABLE[.I] = .I;
    TRANSTABLE[ESC] = %C'$';
    TRANSTABLE[%C'N'-%X'40'] = %C'$';
    TRANSTABLE[%C'O'-%X'40'] = %C'$';
    TRANSTABLE[%X'9B'] = %C'$';
    END;
OUTDESC[0] = .DESC[DSC$W_LENGTH];
OUTDESC[1] = OUTBUF;
CH$TRANSLATE(.TRANSTABLE,.DESC[DSC$W_LENGTH],.DESC[DSC$A_POINTER],0,
		.DESC[DSC$W_LENGTH],OUTBUF);
RETURN MAIL$PUT_OUTPUT(OUTDESC)
END;

ROUTINE SEQ_READ(LINESPP) : NOVALUE =
BEGIN

LOCAL
    DESC : $BBLOCK[DSC$C_S_BLN],
    NUMLINES;

NUMLINES = .LINESPP;
!
! Loop, displaying each record and getting the next one, until the
! screen is filled or there aren't any more records
!
DO
	BEGIN
	DESC[DSC$B_DTYPE] = DESC[DSC$B_CLASS] = 0;
	DESC[DSC$W_LENGTH] = .MAIL$W_MSG_RSIZ;
	DESC[DSC$A_POINTER] = .MAIL$L_MSG_RADR;
	IF .MAIL$W_MSG_RSIZ GEQU 2
	AND .(.MAIL$L_MSG_RADR + .MAIL$W_MSG_RSIZ - 2)<0,16> EQLU (CR OR LF^8)
	THEN DESC[DSC$W_LENGTH] = .DESC[DSC$W_LENGTH] - 2;
	MAIL$FILTER_OUTPUT(DESC);
	IF .MAIL$GL_FLAGS[MAIF_V_CTRLCFL]
	THEN
		RETURN;
	IF NOT MAIL$GET_MSG()
	THEN
		RETURN;
	!
	! Check if output device is a scope terminal
	!
	IF .MAIL$GL_FLAGS[MAIF_V_SCOPE]
	THEN
		BEGIN
		!
		! Check if first character of record is a form-feed
		!
		IF (.MAIL$W_MSG_RSIZ NEQ 0) AND
		   (CH$RCHAR(.MAIL$L_MSG_RADR) EQLU FF)
		THEN
			!
			! Skip over the form-feed.  If there is nothing left
			! in the record, get another one.  If there is data
			! left, tell user there is more and exit.
			!
			BEGIN
			MAIL$W_MSG_RSIZ = .MAIL$W_MSG_RSIZ - 1;
			MAIL$L_MSG_RADR = .MAIL$L_MSG_RADR + 1;
			IF .MAIL$W_MSG_RSIZ EQL 0
			THEN	BEGIN
				IF MAIL$GET_MSG()
				THEN
					MAIL$PUT_OUTPUT(MAIL$GETMSG(MAIL$_MOREMSG),0);
				END
			ELSE
				MAIL$PUT_OUTPUT(MAIL$GETMSG(MAIL$_MOREMSG),0);
			RETURN;
			END;
		NUMLINES = .NUMLINES - 1;	! Decrement number lines page
		END
	END
UNTIL .NUMLINES LEQ 0;
MAIL$PUT_OUTPUT(MAIL$GETMSG(MAIL$_MOREMSG),0);			! Tell user there is more
RETURN;
END;

ROUTINE ISAM_READ (LINESPP) : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Displays records of current message that will fit on the current
!	screen [ISAM files only]
!--

BEGIN

OWN
    HOLD_DESC : $BBLOCK[DSC$C_S_BLN];

LOCAL
    DESC : $BBLOCK[DSC$C_S_BLN],
    MORE_FLAG,
    NUMLINES;

INIT_SDESC(DESC);
IF .MAIL$B_MSGTRAN EQL MMB_C_FROM
    THEN MAIL$B_MSGTRAN = MMB_C_FROMXDT;
IF .MAIL$B_MSGTRAN EQL MMB_C_FROMXDT
    THEN MAIL$GL_FLAGS[MAIF_V_RDHOLD] = FALSE;
NUMLINES = .LINESPP;
!
! Loop reading records until end of page or end of message
!
WHILE (IF NOT .MAIL$GL_FLAGS[MAIF_V_RDHOLD]
	THEN MAIL$GET_I_MSG(DESC,MORE_FLAG)
	ELSE (DESC[DSC$W_LENGTH] = .HOLD_DESC[DSC$W_LENGTH];
	    DESC[DSC$A_POINTER] = .HOLD_DESC[DSC$A_POINTER];
	    NOT (MAIL$GL_FLAGS[MAIF_V_RDHOLD] = FALSE)))
DO BEGIN
    !
    ! If output is a scope, then handle form-feeds
    !
    IF .MAIL$GL_FLAGS[MAIF_V_SCOPE]
	AND .DESC[DSC$W_LENGTH] NEQ 0
    THEN IF CH$RCHAR(.DESC[DSC$A_POINTER]) EQLU FF
    THEN BEGIN
	DESC[DSC$W_LENGTH] = .DESC[DSC$W_LENGTH] - 1;
	DESC[DSC$A_POINTER] = .DESC[DSC$A_POINTER] + 1;
	IF .DESC[DSC$W_LENGTH] GTRU 0
	THEN BEGIN
	    HOLD_DESC[DSC$W_LENGTH] = .DESC[DSC$W_LENGTH];
	    HOLD_DESC[DSC$A_POINTER] = .DESC[DSC$A_POINTER];
	    MAIL$GL_FLAGS[MAIF_V_RDHOLD] = TRUE;
	    MAIL$PUT_OUTPUT(MAIL$GETMSG(MAIL$_MOREMSG),0);
	    END
	ELSE BEGIN
	IF .MORE_FLAG
	    THEN MAIL$PUT_OUTPUT(MAIL$GETMSG(MAIL$_MOREMSG),0)
	    ELSE MAIL$L_MSG_STS = 0;
	    END;
	RETURN;
	END;
    MAIL$FILTER_OUTPUT(DESC);
    IF .MAIL$GL_FLAGS[MAIF_V_CTRLCFL]
	THEN RETURN;
    NUMLINES = .NUMLINES - 1;
    IF .NUMLINES LEQ 0 AND .MORE_FLAG
	THEN (MAIL$PUT_OUTPUT(MAIL$GETMSG(MAIL$_MOREMSG),0); RETURN);
    END;
END;

GLOBAL ROUTINE MAIL$READ : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Displays the current record and all the records in the message
!	that will fit on the screen/page.
!
! INPUTS:
!
!	MAIL$W_MSG_RSIZ = Size of current message record.
!	MAIL$L_MSG_RADR = Address of current message record.
!	MAIL$Q_USERNAME = Current user's username.
!
! OUTPUTS:
!
!	Current message text displayed on SYS$OUTPUT.
!--
BEGIN

LOCAL
    NUMLINES;
!
! Erase the screen first, in case there is an error in updating, it won't
! be immediately erased
!
IF .MAIL$GL_FLAGS[MAIF_V_ISAM]
THEN BEGIN
    IF .MAIL$L_CURMSG[MMB_V_EXTFNF]
	THEN MAIL$L_CURMSG[MMB_V_EXTFNF] = FALSE
	ELSE MAIL$CMD_ERASE();
    END
    ELSE MAIL$CMD_ERASE();
!
! If this is a "new" (previously unread) message, decrement user's new
! mail count.  Do this only if we are in our default mail file.
!
IF .MAIL$GL_FLAGS[MAIF_V_DFMSG] THEN
IF MAIL$NEW_MSG()
THEN MAIL$DECR_NEWMAIL(MAIL$Q_USERNAME);
!
! Compute the number of lines per page
!
MAIL$GL_FLAGS[MAIF_V_READ_FL] = 1;
IF .MAIL$GL_FLAGS[MAIF_V_ISAM]
THEN BEGIN
    MAIL$INFO_I_MSG(0,0,DYN_DESC);
    MAIL$PUT_OUTPUT($DESCRIPTOR('!4* #!8<!UL!>!3* !20AS!#* !AS'),
			.MAIL$L_MSG_NUM,DYN_DESC,
			44-.MAIL$Q_CURFOLDER[DSC$W_LENGTH],
			MAIL$Q_CURFOLDER);
    END
ELSE MAIL$PUT_OUTPUT(DESCRIPTOR('!#* !AS #!UL'),! Display file name and 
		72-.MAIL$Q_MSG_FILE[DSC$W_LENGTH],
		MAIL$Q_MSG_FILE,		! message number
		.MAIL$L_MSG_NUM);
NUMLINES = MAX(.MAIL$L_OUTLINES-5,1);
IF .MAIL$GL_FLAGS[MAIF_V_ISAM]
    THEN ISAM_READ(.NUMLINES)
    ELSE SEQ_READ(.NUMLINES);

RETURN
END;

END
ELUDOM
