%TITLE 'Network Management Maintenance Operations main module'
MODULE MOMMAIN (MAIN = MOM$MAIN,
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000') =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
 
!++
! FACILITY:  DECnet-VAX Network Management Maintenance Operations Module (MOM)
!
! ABSTRACT:
!	This is the main module for MOM.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Kathy Perko
!
! CREATION DATE:  13-Jan-1983
!
! MODIFIED BY:
!	V03-002	MKP0002		Kathy Perko		11-April-1984
!		Add NCP network management version number checking.
!
!	V03-001	MKP0001		Kathy Perko		21-July-1983
!		Improve status returned by various routines.  Add SERVICE
!		NODE VERSION parameter.  Clear CIBs at initialization time.
!
!--
 

%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!
 
FORWARD ROUTINE
    mom$main		: NOVALUE,
    mom_getmode		: NOVALUE,
    mom_initialize	: NOVALUE,
    mom_init_logging	: NOVALUE,
    mom_get_nice_msg,
    mom$send;
 
!
! INCLUDE FILES:
!
 
LIBRARY 'LIB$:MOMLIB';			! Facility-wide definitions
LIBRARY 'SHRLIB$:NMALIBRY';		! NICE definitions
LIBRARY 'SHRLIB$:NET';			! NETACP QIO interface
LIBRARY 'SYS$LIBRARY:STARLET';		! VMS common definitions
 

!
! OWN STORAGE:
!
OWN
    mom$w_mbx_chan: WORD;

!
! Externals
!
$MOM_EXTERNALS;

EXTERNAL
    mom$ab_nml_mailbox_buffer: BBLOCK,
    npa$gl_logmask;

EXTERNAL LITERAL
    mom$k_nml_mbx_buf_len;

EXTERNAL ROUTINE 
    mom$operservice,
    mom$autoservice,
    mom$trnlognum,
    mom$debug_msg;


%SBTTL 'MOM$MAIN  Main routine'
GLOBAL ROUTINE MOM$MAIN : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the main routine for the DECnet-VAX Network Management
!	Maintenance Operations Module (MOM).  Maintenance operations
!	include down line load, up line dump, trigger, and loop node,
!	circuit and line.
!
! STARTUP CRITERIA:
!	MOM is started up in one of two ways:
!	    The Network Management Listener (NML) gets a NICE message
!	    from NCP requesting a maintenance operation.  This is an
!	    operator requested maintenance operation.
!
!	A MOP message is received from another node which requests a
!	    maintenance operation.  NETACP will start up MOM to perform
!	    the operation.  This is an automatic maintenance operation.
!
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success.
!
!--
 
BEGIN

BUILTIN
	fp;

LOCAL
    status;
!
! Determine if MOM was started up by a MOP message from another node
! (autoservice) or by NML to process a NICE service request (operservice).
!
mom_initialize ();
mom_getmode ();
IF NOT .mom$gl_service_flags [mom$v_autoservice] THEN
    !
    ! MOM was started by NML to process a NICE service message.
    !
    BEGIN
    status = mom_get_nice_msg ();
    IF .status THEN
	mom$operservice ();
    END
ELSE
    !
    ! MOM was started by NETACP because a MOP message was received from
    ! another node.  The MOP message can be a request for a down line
    ! load, an upline dump, a trigger, or a loop circuit or node.
    !
    BEGIN
    status = ss$_normal;
    mom$autoservice ();
    END;
$EXIT (CODE = .status);

END;			! End of MOM

%SBTTL 'MOM_GETMODE  Determine the mode in MOM is running'
ROUTINE MOM_GETMODE: NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine determines the mode in which MOM is running by
!	determining how the image was activated.  MOM can be started
!	up in two modes:
!		Autoservice - a target node has sent a MOP message requesting
!			a maintenance function (load, dump, loop, or trigger).
!		Operservice - The maintenance function is being requested
!			via a NICE message from NCP.
!	MOM gets started up in one of three ways:
!		By NMLSHR running as a sharable image with NCP and communicating
!			with NCP via buffers.
!		By NMLSHR running as a sharable image with NML and communicating
!			with NCP via a logical link.
!		By NETACP when it receives an autoservice request on a circuit.
!
! IMPLICIT OUTPUTS:
!
!	If MOM was started up by an autoservice function,
!	mom$gl_service_flags [mom$v_autoservice] is set.
!	Otherwise it is clear.
!
!--
 
BEGIN
 
LOCAL
    bufdesc: VECTOR [2],		! Descriptor of above buffer
    status;				! Temporary status
 
!
! Translate SYS$NET to determine what mode MOM was started up in.
!
bufdesc [0] = mom$k_nice_buf_len;	! Setup result buffer descriptor
bufdesc [1] = mom$ab_nice_rcv_buf;

status = $TRNLOG (LOGNAM = %ASCID 'SYS$NET',
		  RSLLEN = bufdesc [0],
		  RSLBUF = bufdesc);
!
! If SYS$NET translates, MOM was activated by an NML talking to NCP via
! a logical link (operservice), or by NETACP (autoservice).  It
! was NML if the translation contains the "::" indicating a node name.
! If not, it is autoservice.
!
IF .status EQLU ss$_normal AND
   CH$FAIL (CH$FIND_SUB (.bufdesc [0],
			 mom$ab_nice_rcv_buf,
			 2,
			 UPLIT ('::'))) THEN
    BEGIN
    !
    ! MOM was activated by NETACP for an autoservice operation.
    ! Sys$net translates to the name of the circuit over which the
    ! autoservice MOP request was received.  Save the circuit ID both
    ! as an entity ID and in the Service Data Table.
    !
    mom$gl_service_flags [mom$v_autoservice] = true;
    mom$gq_entity_buf_dsc [0] = .bufdesc [0];
    mom$gq_entity_buf_dsc [1] = mom$ab_nice_rcv_buf;
    mom$ab_service_data [svd$gk_pcno_sli, svd$b_string_len] = .bufdesc [0];
    CH$MOVE (.bufdesc [0],
	     mom$ab_nice_rcv_buf,
	     mom$ab_service_data [svd$gk_pcno_sli, svd$t_string]);
    mom$ab_service_data [svd$gk_pcno_sli, svd$v_msg_param] = true;
    END
ELSE
    !
    ! NML activated MOM to process a NICE message requesting a maintenance
    ! operation.
    !
    mom$gl_service_flags [mom$v_autoservice] = false;

END;				! End of MOM_GETMODE

%SBTTL 'MOM_INITIALIZE   Initialization for MOM'
ROUTINE MOM_INITIALIZE: NOVALUE =
 
!++
!
!	This routine performs various initialization for MOM at the
!	beginning of each NICE command or autoservice function.
!	The most notable of these is to set the default values
!	for the service data in the Service Data table.
!
! Inputs:
!	none
!
!--
 
BEGIN

MAP
    mom$gl_service_flags;

mom$gl_service_flags = 0;
!
! Initialize the Service Data Table to indicate that none of the parameter
! values currently in the table came from a NICE or MOP message.  The
! svd$v_msg_param field is used to make sure the NICE and MOP message
! parameter values are used over the parameter values from the volatile
! database.
!
INCR i FROM 0 TO svd$c_entry_count DO
    BEGIN
    mom$ab_service_data [.i, svd$b_flags] = 0;
    mom$ab_service_data [.i, svd$b_string_len] = 0;
    mom$ab_service_data [.i, svd$l_param] = 0;
    END;
!
! Default the line service timer to infinity.
!
mom$ab_service_data [svd$gk_pcli_sti, svd$l_param] = -1;
!
! Just in case it's a loop command, default the loop message length,
! loop message data type, and number of messages looped.
!
mom$ab_service_data [svd$gk_pcno_lpl, svd$l_param] = nma$c_loop_dsiz;
mom$ab_service_data [svd$gk_pcno_lpd, svd$l_param] = nma$c_loop_mix;
mom$ab_service_data [svd$gk_pcno_lpc, svd$l_param] = nma$c_loop_dcnt;
mom$ab_service_data [svd$gk_pcno_lph, svd$l_param] = mom$k_no_loop_help;
!
! Just in case it's a load, default the first file loaded to the
! secondary loader and default the system file to be loaded to
! the operating system (as opposed to diagnostics) and Phase IV.
!
mom$ab_service_data [svd$gk_pcno_sty, svd$l_param] = nma$c_soft_secl;
mom$ab_service_data [svd$gk_pcno_$fty, svd$l_param] = mop$c_sid_osy;
mom$ab_service_data [svd$gk_pcno_snv, svd$l_param] = nma$c_nodsnv_ph4;
!
! Clear the (Channel Information Blocks) CIBs - these blocks contain
! information about the I/O channel over which the service function
! is being performed.
!
CH$FILL (0, cib$c_ciblen, mom$ab_cib);
CH$FILL (0, cib$c_ciblen, mom$ab_loop_cib);
mom_init_logging ();
!
! Clear out the skip MOP message buffer.  This buffer is used to save
! certain MOP messages that must be ignored if received more than once.
!
mom$gq_mop_msg_dsc [0] = 0;
END;				! of MOM_INITIALIZE

%SBTTL 'MOM_INIT_LOGGING  Initialization debug logging'

ROUTINE MOM_INIT_LOGGING: NOVALUE =
 
!++
!
!	This routine initializes the internal logging flags for MOM debugging.
!	The logical name NML$LOG is translated to get the flag settings.
!
! Inputs:
!
!	The logical name NML$LOG
!
!--
 
BEGIN

!
! Set internal logging flags if NML$LOG is defined.
!
mom$trnlognum ($ASCID ('NML$LOG'), mom$gl_logmask);

!
! If the NPARSE logging flag is set then set it in the NPARSE data area.
! 

IF .mom$gl_logmask [dbg$c_nparse]
THEN
    npa$gl_logmask = 1
ELSE
    npa$gl_logmask = 0;

END;				! of MOM_INIT_LOGGING

%SBTTL 'MOM_GET_NICE_MSG   Get the NICE service command message'
ROUTINE MOM_GET_NICE_MSG =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called by MOM$MAIN when MOM is processing a
!	maintenance operation which was requested via NCP.  The routine
!	gets the NCP NICE message from the mailbox where it was put
!	by NML before it started MOM.
!
! IMPLICIT INPUTS:
!	NML$MOMMBX - translates to name of mailbox that NML wrote the
!		NICE message to before spawning MOM.
!--
BEGIN

LOCAL
    status,				! Temporary status
    iosb: $iosb;
 
!
! Assign a channel to NML$MOMMBX, and, if I got it, read NML's message
! from it.  The first 3 bytes of the message will contain the network
! management version of the NCP originating the message.
!
status = $ASSIGN (DEVNAM = %ASCID 'NML$MOM_MBX',
		  CHAN = mom$w_mbx_chan);
IF .status THEN
    BEGIN
    status = $QIOW (
		FUNC = io$_readvblk,		! Read NML's mailbox
		CHAN = .mom$w_mbx_chan,		! Mailbox channel
		IOSB = iosb,
		P1 = mom$ab_nml_mailbox_buffer,	! Buffer for NML info
		P2 = mom$k_nml_mbx_buf_len);	! Length of mailbox buffer
    IF .status THEN
	status = .iosb [ios$w_status];
    !
    ! If got the NICE message OK, save the length.  Compensate for the 3
    ! bytes of NCP management version at the beginning of the buffer.
    !
    IF .status THEN
	BEGIN
	mom$gl_nice_rcv_msg_len = .iosb [ios$w_count] - 3;
	mom$debug_msg (dbg$c_netio,		! Log message transmitted
			mom$ab_nice_rcv_buf,
			.mom$gl_nice_rcv_msg_len,
			%ASCID 'MOM NICE message received from NML');
	END;
    END;
RETURN .status;
END;				! of MOM_GET_NICE_MSG

%SBTTL 'MOM$SEND   Send NICE response to caller'

GLOBAL ROUTINE MOM$SEND (BUF_ADDRESS, BUF_LENGTH) =

!++
!
! Function:
!	The routine writes the NICE status messages back to NML's
!	mailbox.  NML will then read the mailbox and forward the response
!	to NCP. The status messages give the completion status of the
!	requested maintenance operation.
!
! Inputs:
!
!	buf_address	Address of the buffer to be transmitted.
!	buf_length	Length of the buffer in bytes.
!
! Outputs:
!
!	Returns success.  Errors are signalled.
!--

BEGIN

LOCAL
    status,
    iosb:	$iosb;

mom$debug_msg(dbg$c_netio,		! Log message transmitted
	       .buf_address,
	       .buf_length,
	       %ASCID 'MOM NICE message sent to NML');

status = $QIOW (
		FUNC = io$_writevblk OR io$m_now,! Write to NML's mailbox
		CHAN = .mom$w_mbx_chan,		! Mailbox channel
		IOSB = iosb,
		P1 = .buf_address,		! Buffer for NICE message
		P2 = .buf_length);		! Length of NICE buffer
!
! If the QIO to the mailbox was successful then get look at the IOSB.
!

IF .status THEN
    status = .iosb [ios$w_status];

!
! If status is bad then signal the error.
!

IF NOT .status THEN
    SIGNAL_STOP (.status);


RETURN true;				! Return successful

END;			! of MOM$SEND
 
END

ELUDOM
