MODULE DELETE (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine performs the DELETE function.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  1-Apr-1977
!
! MODIFIED BY:
!
!	V03-024	CDS0015		Christian D. Saether	14-Aug-1984
!		Modify handling of extension fcbs.
!
!	V03-023	CDS0014		Christian D. Saether	10-Aug-1984
!		Clear directory flag in header prior to actually
!		deleting file so that extra checks against deleting
!		a directory can be made in delete_file.
!
!	V03-022	CDS0013		Christian D. Saether	 7-Aug-1984
!		Wipe out directory index if there is one when
!		deleting the fcb.  Use common routine to delete fcb.
!
!	V03-021	CDS0012		Christian D. Saether	 6-Aug-1984
!		Sense of test in CDS0011 to fix access arbitration
!		on exclusively accessed file was wrong.  Fix it.
!
!	V03-020	CDS0011		Christian D. Saether	31-July-1984
!		Remove local declaration of get_map_pointer linkage.
!		Fix access arbitration check to allow deletion if
!		we have it accessed exclusively readonly.
!
!	V03-019	LMP0275		L. Mark Pilant,		23-Jul-1984  14:19
!		Don't try to delete an uninitialized ACL.
!
!	V03-018	ACG0427		Andrew C. Goldstein,	8-May-1984  13:32
!		Write audit record for file about to be deleted
!
!	V03-017	CDS0010		Christian D. Saether	 4-May-1984
!		Remember to release access lock in MARKDEL_FCB if
!		we get rid of the fcb there.
!
!	V03-016	CDS0009		Christian D. Saether	19-Apr-1984
!		Changes to restore compatible (with V3) delete behavior.
!
!	V03-015	ACG0415		Andrew C. Goldstein,	5-Apr-1984  21:31
!		Interface change to ACL_DELETEACL
!
!	V03-014	ACG0412		Andrew C. Goldstein,	22-Mar-1984  18:21
!		Implement agent access mode support; add access mode to
!		check protection call
!
!	V03-013	ACG0408		Andrew C. Goldstein,	20-Mar-1984  17:35
!		Make APPLY_RVN and DEFAULT_RVN macros; remove delete logger
!
!	V03-012	CDS0008		Christian D. Saether	23-Feb-1984
!		Change references to FLUSH_LOCK_BASIS to WRITE_DIRTY.
!		Checksum header and mark dirty when only marking
!		for delete and not actually deleting file.
!		Modify call to ACL_DELETEACL.
!
!	V03-011	CDS0007		Christian D. Saether	17-Jan-1984
!		Modify interface to APPLY_RVN.
!
!	V03-010	CDS0006		Christian D. Saether	27-Dec-1983
!		Use BIND_COMMON macro.
!
!	V03-009	CDS0005		Christian D. Saether	13-Dec-1983
!		Move all OWN data declarations to the
!		COMMON module.
!
!	V03-008	LMP0178		L. Mark Pilant,		8-Dec-1983  14:22
!		Fix a bug that caused paged pool to be lost when deleting
!		an unaccessed file.
!
!	V03-007	ACG0368		Andrew C. Goldstein,	4-Nov-1983  14:24
!		Handle short ident areas in back link file name check
!
!	V03-006	CDS0004		Christian D. Saether	14-Sep-1983
!		Modify SERIAL_FILE interface.
!		Call RELEASE_SERIAL_LOCK to dequeue.
!
!	V03-005	CDS0003		Christian D. Saether	 6-May-1983
!		Call SERIAL_FILE to interlock file processing.
!		Remove SWITCH_VOLUME and SEARCH_FCB calls in DELETE
!		routine because they are called from MARK_DELETE now.
!		Call FLUSH_FID at the end of MARK_DELETE so that
!		file processing interlock can be released.  This is
!		necessary because of the call from CREATE using
!		secondary context.
!
!	V03-004	ACG0323		Andrew C. Goldstein,	12-Apr-1983  16:12
!		Fix passing of result string buffer
!
!	V03-003	CDS0002		Christian D. Saether	 7-Apr-1983
!		Modifications to correctly arbitrate delete actions
!		in a cluster.
!
!	V03-002	ACG0323		Andrew C. Goldstein,	25-Mar-1983  16:29
!		Erase back link when matching directory entry is removed
!
!	V03-001	LMP0059		L. Mark Pilant,		27-Dec-1982  8:14
!		Always create an FCB for a file header.  This eliminates a
!		lot of special case FCB handling.
!
!	V02-006	ACG0249		Andrew C. Goldstein,	29-Dec-1981  13:58
!		Use DATA block type to read directory block
!
!	V02-005	ACG0227		Andrew C. Goldstein,	24-Nov-1981  22:45
!		Protect directory files from deletion
!
!	V02-004	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	DELETE		: L_NORM,	! main delete function
	MARK_DELETE	: L_NORM NOVALUE, ! mark file for delete
	MARKDEL_FCB	: L_NORM,	! mark FCB of file for delete
	DELETE_HANDLER	: L_NORM;	! condition handler for delete function

GLOBAL ROUTINE DELETE : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs the remove and mark for delete functions.
!
! CALLING SEQUENCE:
!	DELETE ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	IO_PACKET: I/O packet in process
!
! OUTPUT PARAMETERS:
!	PRIMARY_FCB: FCB of file
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	directory entry removed
!	file marked for delete or deleted
!
!--

BEGIN

LOCAL
	ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH],
					! buffer descriptors
	FIB		: REF BBLOCK,	! FIB
	RESULT_LENGTH,			! length of name string from directory
	RESULT		: VECTOR [FILENAME_LENGTH+6, BYTE];
					! file name string from directory

BIND_COMMON;

EXTERNAL ROUTINE
	GET_FIB		: L_NORM,	! get FIB of request
	FIND		: L_NORM;	! find name in directory


! First find the buffer descriptor, FIB, FCB, etc. then remove the
! directory entry.
!

					! pointer to buffer descriptors
ABD = .BBLOCK [.IO_PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];
FIB = GET_FIB (.ABD);

IF .CURRENT_VCB[VCB$V_NOALLOC]
THEN ERR_EXIT (SS$_WRITLCK);

! If a directory ID is present, do a directory search first and remove
! the directory entry.
!

RESULT_LENGTH = 0;
IF .CLEANUP_FLAGS[CLF_DIRECTORY]
THEN FIND (.ABD, .FIB, 1, RESULT_LENGTH, RESULT);

! If there is a file open on the channel, check the file ID returned by the
! FIND against that of the open file. If they do not match, treat the file
! as if it were not open.
!

IF .PRIMARY_FCB NEQ 0
THEN
    BEGIN
    IF .PRIMARY_FCB[FCB$W_FID_NUM] NEQ .FIB[FIB$W_FID_NUM]
    OR .PRIMARY_FCB[FCB$W_FID_SEQ] NEQ .FIB[FIB$W_FID_SEQ]
    THEN CURRENT_WINDOW = 0;
    END;

! Now actually mark the file for delete if requested.
!

MARK_DELETE (.FIB, .BBLOCK [IO_PACKET[IRP$W_FUNC], IO$V_DELETE], .RESULT_LENGTH, RESULT);

RETURN 1;

END;					! end of routine DELETE

GLOBAL ROUTINE MARK_DELETE (FIB, DO_DELETE, RESULT_LENGTH, RESULT) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine marks the indicated file for delete and deletes it
!	if it is not accessed.
!
! CALLING SEQUENCE:
!	MARK_DELETE (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: address of FIB
!	ARG2: 1 to actually delete the file
!	      0 to only remove the directory entry
!	ARG3: length of name string from directory operation
!	ARG4: address of name string
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	file marked for delete or deleted
!
!--

BEGIN

BUILTIN
	FP;

MAP
	FIB		: REF BBLOCK;	! FIB

GLOBAL REGISTER
	COUNT		= 6,		! map pointer count
	LBN		= 7,		! map pointer LBN
	MAP_POINTER	= 8;		! pointer to file header map area

LOCAL
	CURR_LKMODE,			! mode access lock currently held at.
	EOF,				! end of file VBN of file
	BUFFER		: REF VECTOR [,WORD], ! buffer address of block read
	FCB		: REF BBLOCK,	! FCB of file
	HEADER		: REF BBLOCK,	! file header
	IDENT_AREA	: REF BBLOCK,	! header's ident area
	TEMP_FID	: BBLOCK [FID$C_LENGTH], ! temp copy of file ID
	FCB_CREATED,			! Flag indicating new FCB created
	NEW_HEADER	: REF BBLOCK,	! Address of extension header
	ARGLIST		: REF BBLOCK;	! pointer to audit block entries

BIND_COMMON;

EXTERNAL ROUTINE
	REBLD_PRIM_FCB	: L_NORM NOVALUE, ! rebuild primary fcb from header
	BUILD_EXT_FCBS	: L_NORM NOVALUE, ! build extension fcb chain
	KILL_DINDX	: L_NORM NOVALUE, ! delete directory index
	KILL_BUFFERS	: L_NORM NOVALUE, ! kill directory buffers
	NUKE_HEAD_FCB	: L_NORM NOVALUE, ! cleanup and delete prim fcb
	DEL_EXTFCB	: L_NORM,	! delete extension FCBs.
	ARBITRATE_ACCESS : L_JSB_2ARGS,	! determine allowed file access
	CONV_ACCLOCK	: L_NORM,	! convert file access lock.
	WRITE_DIRTY	: L_NORM,	! write back modified buffers.
	SERIAL_FILE	: L_NORM,	! interlock file processing
	RELEASE_SERIAL_LOCK : L_NORM NOVALUE,
	SWITCH_VOLUME	: L_NORM,	! switch context to desired volume
	SEARCH_FCB	: L_NORM,	! search FCB list
	CREATE_FCB	: L_NORM,	! create an FCB
	READ_HEADER	: L_NORM,	! read file header
	CHECK_PROTECT	: L_NORM,	! check file protection
	WRITE_AUDIT	: L_NORM,	! write audit record
	GET_MAP_POINTER	: L_MAP_POINTER, ! get file header map pointer
	READ_BLOCK	: L_NORM,	! read a disk block
	INVALIDATE	: L_NORM,	! invalidate block buffer
	MARK_DIRTY	: L_NORM,	! mark buffer for write-back
	DELETE_FILE	: L_NORM,	! delete the file
	CHECKSUM	: L_NORM;	! checksum file header


! Find the FCB, if any, and then read the header. Reading the header is done
! under a condition handler that quietly exits with success if errors are
! encountered. Thus, deleting a bad file header succeeds quietly.
!

SWITCH_VOLUME (.FIB[FIB$W_FID_RVN]);

! Serialize further processing on this file.
!

PRIM_LCKINDX = SERIAL_FILE (FIB [FIB$W_FID]);

FCB = SEARCH_FCB (FIB[FIB$W_FID]);
SAVE_STATUS = .USER_STATUS;
.FP = DELETE_HANDLER;
HEADER = READ_HEADER (FIB[FIB$W_FID], .FCB);
.FP = 0;

! If this is a real delete, proceed with it.
!

IF .DO_DELETE
THEN
    BEGIN

! Check that the file is not a reserved file (FID less than
! .CURRENT_VCB[VCB$B_RESFILES]).
!

    IF .FIB[FIB$W_FID_NUM] LEQU .CURRENT_VCB[VCB$B_RESFILES]
    AND .FIB[FIB$B_FID_NMX] EQL 0
    THEN ERR_EXIT (SS$_NOPRIV);

! At this point, build the necessary FCB chain to allow the ACL to be built.

    FCB_CREATED = 0;
    IF .FCB EQL 0
    THEN
	BEGIN
	FCB_CREATED = 1;
	FCB = KERNEL_CALL (CREATE_FCB, .HEADER);
	END;
    PRIMARY_FCB = .FCB;				! Record FCB for external use

! If the file is multi-header, read in the extension headers and create
! extension FCB's.  Finally, read back the primary header.
!

    IF .FCB_CREATED
    THEN
	BUILD_EXT_FCBS (.HEADER)
    ELSE
	IF .FCB [FCB$V_STALE]
	THEN
	    BEGIN

	    REBLD_PRIM_FCB (.FCB, .HEADER);

	    BUILD_EXT_FCBS (.HEADER);

	    END;

! Check file protection. Check if the file is write accessed by someone
! else and not the deleter.
!

    CHECK_PROTECT (DELETE_ACCESS, .HEADER, .FCB,
		   MAXU (.IO_PACKET[IRP$V_MODE], .FIB[FIB$B_AGENT_MODE]));

! If the file is identified as a directory, check to see if it is empty.
! Non-empty directories cannot be deleted under any circumstances.
! The check for emptiness is done by (1) checking for a length of
! 1 block, and (2) reading the block and looking for the data pattern of
! an empty directory block.
!

    IF .HEADER[FH2$V_DIRECTORY]
    THEN
	BEGIN
	EOF = ROT (.BBLOCK [HEADER[FH2$W_RECATTR], FAT$L_EFBLK], 16);
	IF .EOF NEQ 0
	AND .BBLOCK [HEADER[FH2$W_RECATTR], FAT$W_FFBYTE] EQL 0
	THEN EOF = .EOF - 1;
	IF .EOF LEQU 1
	THEN
	    BEGIN
	    MAP_POINTER = .HEADER + .HEADER[FH2$B_MPOFFSET] * 2;
	    GET_MAP_POINTER ();
	    BUFFER = READ_BLOCK (.LBN, 1 , DATA_TYPE);
	    IF .BUFFER[0] NEQ 65535
	    THEN ERR_EXIT (SS$_DIRNOTEMPTY);
	    INVALIDATE (.BUFFER);
	    END
	ELSE ERR_EXIT (SS$_DIRNOTEMPTY);

	END;

! Check if a security audit record is to be written for this file.
! If so, now is the last time to do it. ("Morituri te salutamus!")
!

    ARGLIST = AUDIT_ARGLIST;
    DECR J FROM MAX_AUDIT_COUNT TO 1
    DO
	BEGIN
	IF .ARGLIST[AUDIT_TYPE] NEQ 0
	AND .BBLOCK [ARGLIST[AUDIT_FID], FID$W_NUM] EQL .FCB[FCB$W_FID_NUM]
	AND .BBLOCK [ARGLIST[AUDIT_FID], FID$W_SEQ] EQL .FCB[FCB$W_FID_SEQ]
	AND .BBLOCK [ARGLIST[AUDIT_FID], FID$W_RVN] EQL .FCB[FCB$W_FID_RVN]
	THEN
	    BEGIN
	    WRITE_AUDIT (.ARGLIST);
	    HEADER = .FILE_HEADER;
	    EXITLOOP 0;
	    END;
	ARGLIST = .ARGLIST + AUDIT_LENGTH;
	END;

! Remember current lock mode to be restored later, if necessary.
!

    CURR_LKMODE = .FCB [FCB$B_ACCLKMODE];

! Make access checks.
! If we have the file accessed, we may delete it as long as we have
! write access ourselves (whether there are other writers or not).
! In all other cases, no other writers are allowed.
!

    IF .CURRENT_WINDOW NEQ 0
    THEN
	BEGIN
	IF NOT .CURRENT_WINDOW [WCB$V_WRITE]
	    AND NOT .FCB [FCB$V_EXCL]
	THEN
	    IF NOT ARBITRATE_ACCESS (FIB$M_NOWRITE, .FCB)
	    THEN
		ERR_EXIT (SS$_ACCONFLICT)
	END
    ELSE
	IF NOT ARBITRATE_ACCESS (FIB$M_NOWRITE, .FCB)
	THEN
	    ERR_EXIT (SS$_ACCONFLICT);

    CLEANUP_FLAGS[CLF_REENTER] = 0;		! from now on deletion proceeds


! Mark the file for delete. If the file is not accessed, then proceed to
! actually delete it.
! In addition, if this is a directory file, clear the directory flag in
! the header and clean out cached directory data blocks now.
! Clearing the directory flag in the header allows us to be defensive
! against accidental directory deletion in delete_file.
!

    HEADER[FH2$V_MARKDEL] = 1;

    IF TESTBITSC (HEADER [FH2$V_DIRECTORY])
    THEN
	KILL_BUFFERS (1, .FCB [FCB$L_LOCKBASIS]);

    IF MARKDEL_FCB (.FCB)
    THEN
	DELETE_FILE (.FIB, .HEADER)
    ELSE
	BEGIN
	CHECKSUM (.HEADER);
	MARK_DIRTY (.HEADER);
	END;

! The access lock conversion routine is called to:
! 1) restore the previous lock mode,
! 2) dequeue the access lock entirely if the refcnt is zero.
! 3) if the lock was granted exclusive, either restore or dequeue the
!	lock and store the value block.
!

    CONV_ACCLOCK (.CURR_LKMODE, .FCB);

    IF .FCB [FCB$W_REFCNT] EQL 0
    THEN
	BEGIN
	IF .FCB [FCB$L_DIRINDX] NEQ 0
	THEN
	    KILL_DINDX (.FCB);

	DEL_EXTFCB (.FCB);
	NUKE_HEAD_FCB (.FCB);
	END;

    IF .PRIMARY_FCB EQL .FCB THEN PRIMARY_FCB = 0;
    IF .DIR_FCB EQL .FCB THEN DIR_FCB = 0;

    END		! of we really do want to delete the file.

! Otherwise we are just removing a directory entry. If the file name
! and back link in the header match the directory, erase the back
! link.
!

ELSE
    BEGIN
    CH$MOVE (FID$C_LENGTH, HEADER[FH2$W_BACKLINK], PREV_LINK);
    CH$MOVE (FID$C_LENGTH, HEADER[FH2$W_BACKLINK], TEMP_FID);
    APPLY_RVN (TEMP_FID[FID$W_RVN], .CURRENT_RVN);
    IDENT_AREA = .HEADER + .HEADER[FH2$B_IDOFFSET]*2;
    CH$COPY (FI2$S_FILENAME, IDENT_AREA[FI2$T_FILENAME],
	     ' ', FILENAME_LENGTH+6, PREV_INAME);
    IF .HEADER[FH2$B_MPOFFSET] - .HEADER[FH2$B_IDOFFSET]
	GEQU ($BYTEOFFSET (FI2$T_FILENAMEXT) + FI2$S_FILENAMEXT) / 2
    THEN
	CH$MOVE (FI2$S_FILENAMEXT, IDENT_AREA[FI2$T_FILENAMEXT],
			       PREV_INAME[FI2$S_FILENAME]);
    IF CH$EQL (FID$C_LENGTH, FIB[FIB$W_DID], FID$C_LENGTH, TEMP_FID)
    AND CH$EQL (.RESULT_LENGTH, .RESULT,
		FI2$S_FILENAME+FI2$S_FILENAMEXT, PREV_INAME, ' ')
    THEN
	BEGIN
	HEADER[FH2$W_BK_FIDNUM] = 0;
	HEADER[FH2$W_BK_FIDSEQ] = 0;
	HEADER[FH2$W_BK_FIDRVN] = 0;
	CLEANUP_FLAGS[CLF_FIXLINK] = 1;
	CHECKSUM (.HEADER);
	MARK_DIRTY (.HEADER);
	END;
    END;

WRITE_DIRTY (.LB_BASIS [.PRIM_LCKINDX]);

RELEASE_SERIAL_LOCK (.PRIM_LCKINDX);

PRIM_LCKINDX = 0;

END;					! end of routine MARK_DELETE

GLOBAL ROUTINE MARKDEL_FCB (FCB) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine marks the FCB for the current file, if any, for delete.
!	In a cluster, it will either mark other FCBs as stale, set the
!	MARKDEL flag in the access lock value block, or both.
!	This routine must be executed in kernel mode.
!
! CALLING SEQUENCE:
!	MARKDEL_FCB (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of FCB
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 if file may be deleted.
!	0 if delete is to be deferred
!	2 delete is to be deferred and file is accessed on another node
!
! SIDE EFFECTS:
!	Whether file may be deleted or not, there may be a zero-refcount
! 	FCB remaining which must be cleaned up by the caller.
!
!--

BEGIN

MAP
	FCB		: REF BBLOCK;	! FCB arg

BIND_COMMON;

EXTERNAL ROUTINE
	LOCK_COUNT	: L_NORM,	! get count of access locks
	QEX_N_CANCEL	: L_NORM;	! set fcb$v_stale flag in other fcbs.


! If the FCB exists, we mark it for delete (causing the file to be deleted
! when the reference count goes to 0).  If the
! reference count is zero, dump the FCB and its extensions.
!

IF .FCB NEQ 0
THEN
    BEGIN

    FCB[FCB$V_MARKDEL] = 1;

    IF LOCK_COUNT (.FCB [FCB$L_ACCLKID]) NEQ 1
    THEN
	BEGIN
	IF QEX_N_CANCEL (.FCB [FCB$L_ACCLKID])

! Normally the lock will not actually be granted from the qex_n_cancel call.
! If it is granted though (success), then set the lockmode field in the
! fcb so that the subsequent conv_acclock handles the value block correctly.
!

	THEN
	    FCB [FCB$B_ACCLKMODE] = LCK$K_EXMODE;

	RETURN 2
	END;

    IF .FCB[FCB$W_REFCNT] NEQ 0
    THEN
	RETURN 0;		! file still accessed here	

    END;

RETURN 1;				! ok to delete file

END;					! end of routine MARKDEL_FCB

ROUTINE DELETE_HANDLER (SIGNAL, MECHANISM) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the condition handler for reading the file header.
!	If any errors occurr, it unwinds and returns to MARK_DELETE's caller,
!	causing the delete of a bad file header to be a quiet NOP.
!
!
! CALLING SEQUENCE:
!	HANDLER (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of signal array
!	ARG2: address of mechanism array
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_RESIGNAL or none if unwind
!
! SIDE EFFECTS:
!	NONE
!
!--


BEGIN

MAP
	SIGNAL		: REF BBLOCK,	! signal arg array
	MECHANISM	: REF BBLOCK;	! mechanism arg array

BIND_COMMON;

! If the condition is change mode to user (error exit) cause an unwind to
! return to DELETE's caller.
! Otherwise, just resignal the condition.
!

IF .SIGNAL[CHF$L_SIG_NAME] EQL SS$_CMODUSER
THEN
    BEGIN
    USER_STATUS = .SAVE_STATUS;
    $UNWIND ();
    END;

RETURN SS$_RESIGNAL;			! status is irrelevant if unwinding

END;					! end of routine DELETE_HANDLER

END
ELUDOM
