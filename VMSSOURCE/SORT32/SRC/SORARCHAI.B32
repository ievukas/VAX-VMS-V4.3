MODULE SOR$ARCHAIC (
		IDENT = 'V04-000'	! File: SORARCHAI.B32 Edit: PDG3019
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
!
! FACILITY:	VAX-11 SORT/MERGE
!
! ABSTRACT:
!
!	This module contains archaic and atrophying features of Sort/Merge.
!
!	This module makes use of the following non-user-visible aspects of
!	VAX-11 Sort/Merge:
!		SOR$PASS_FILES returns the address of the context area in R1.
!		Within this area, it accesses COM_TKS, COM_HACK_STRIP and
!		COM_HACK_2ARGS.
!	Thus, if these are relocated within the context area, this module
!	must be recompiled (and user programs that use it must be relinked).
!
!	The archaic global literals are defined as weak literals.  A user who
!	tries to use them without referencing SOR$INIT_SORT or SOR$INIT_MERGE
!	(i.e., he's using the new sort), he'll get a link-time error.
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: Peter D Gilbert, CREATION DATE: 25-Jun-1982
!
! MODIFIED BY:
!
!	T03-015		Original
! 	T03-016	Corrected the order of USER_EQUAL and USER_COMPARE parameters
!		in call to SOR$BEGIN_MERGE.  PDG 9-Dec-1982
!	T03-017	Do not pass the SIGNAL option.  PDG 29-Dec-1982
!	T03-018	Improve index check before referencing DSC_BIN.  PDG 2-Feb-1983
!	T03-019	Make NOSIGNAL a default option.  PDG 11-Apr-1983
!--

LIBRARY	'SYS$LIBRARY:STARLET';
REQUIRE	'SRC$:COM';


FORWARD ROUTINE
    DSC_DTYPE,			! Convert to DSC datatypes
    SOR$INIT_SORT,		! Initialize the sort
    SOR$INIT_MERGE,		! Initialize the merge
    SOR$DO_MERGE;		! "Perform the merge"

LINKAGE
    AND_RETURN_R1 = CALL(;REGISTER=1);

EXTERNAL ROUTINE
    SOR$PASS_FILES:	ADDRESSING_MODE(GENERAL) AND_RETURN_R1,
    SOR$BEGIN_SORT:	ADDRESSING_MODE(GENERAL),	! Initialize the sort
    SOR$BEGIN_MERGE:	ADDRESSING_MODE(GENERAL),	! Initialize the merge
    SOR$END_SORT:	ADDRESSING_MODE(GENERAL);	! Finish the sort/merge

! Define the archaic global literals
!
! These are defined as weak literals.  Thus, if the user tries to use them
! without referencing SOR$INIT_SORT or SOR$INIT_MERGE (i.e., he's using the
! new sort), he'll get an link-time error.
!
GLOBAL LITERAL
    SOR$GK_CHAR_KEY =	KEY_K_CHAR:	WEAK,
    SOR$GK_BIN_KEY =	KEY_K_BIN:	WEAK,
    SOR$GK_ZONE_KEY =	KEY_K_ZONE:	WEAK,
    SOR$GK_PACK_KEY =	KEY_K_PACK:	WEAK,
    SOR$GK_USB_KEY =	KEY_K_USB:	WEAK,
    SOR$GK_DLO_KEY =	KEY_K_DLO:	WEAK,
    SOR$GK_DLS_KEY =	KEY_K_DLS:	WEAK,
    SOR$GK_DTO_KEY =	KEY_K_DTO:	WEAK,
    SOR$GK_DTS_KEY =	KEY_K_DTS:	WEAK,
    SOR$GK_FLT_KEY =	KEY_K_FLT:	WEAK,
    SOR$GK_FLTD_KEY =	KEY_K_FLTD:	WEAK,
    SOR$GK_FLTG_KEY =	KEY_K_FLTG:	WEAK,
    SOR$GK_FLTH_KEY =	KEY_K_FLTH:	WEAK;

! Macros to test for optional parameters.
!
!   FIRSTPARAMETER_
!	Define the first parameter, for use by PRESENT_ and NULL_.
!
!   PRESENT_
!	Test for a parameter present.
!
!   NULL_
!	Test for a parameter present, and whether it equals zero.
!
MACRO
    PRESENT_(X) =
	BEGIN
	BUILTIN ACTUALCOUNT;
	LITERAL Y__ = 1+(X-FIRSTPARAMETER__)/%UPVAL;
	ACTUALCOUNT() GEQU Y__
	END %,
    NULL_(X) =
	BEGIN
	BUILTIN NULLPARAMETER;
	LITERAL Y__ = 1+(X-FIRSTPARAMETER__)/%UPVAL;
	NULLPARAMETER(Y__)
	END %,
    FIRSTPARAMETER_(X) =
	MACRO FIRSTPARAMETER__ = X %QUOTE % %;

ROUTINE DSC_DTYPE
	(
	KEY_BUF1:	REF KEY_BLOCK,
	KEY_BUF2:	REF KEY_BLOCK
	) =

!++
! Functional Description:
!
!	This routine converts old format key descriptions to DSC format
!	key descriptions.
!
! Formal Parameters:
!
!   KEY_BUF1	Address of old format key descriptions.
!   KEY_BUF2	Address of DSC format key descriptions.
!
! Implicit Inputs:
!
!	None.
!
! Implicit Outputs:
!
!	None.
!
! Routine Value:
!
!	None (may signal errors).
!
! Side Effects:
!
!	None.
!
!--

    BEGIN
    LOCAL
	KBF1:	REF KBF_BLOCK,
	KBF2:	REF KBF_BLOCK;
    LITERAL
	K_MAXDEC =	31;	! Maximum length of decimal data
    OWN
	DSC_DTYPES: VECTOR[KEY_K_MAX+1,BYTE]
	    PSECT(SOR$RO_CODE) PRESET(
		[KEY_K_CHAR]=	DSC$K_DTYPE_T,
		[KEY_K_BIN]=	0,
		[KEY_K_ZONE]=	DSC$K_DTYPE_NZ,
		[KEY_K_PACK]=	DSC$K_DTYPE_P,
		[KEY_K_USB]=	0,
		[KEY_K_DLO]=	DSC$K_DTYPE_NLO,
		[KEY_K_DLS]=	DSC$K_DTYPE_NL,
		[KEY_K_DTO]=	DSC$K_DTYPE_NRO,
		[KEY_K_DTS]=	DSC$K_DTYPE_NR,
		[KEY_K_FLT]=	DSC$K_DTYPE_F,
		[KEY_K_FLTD]=	DSC$K_DTYPE_D,
		[KEY_K_FLTG]=	DSC$K_DTYPE_G,
		[KEY_K_FLTH]=	DSC$K_DTYPE_H),
	DSC_LENGTH: VECTOR[KEY_K_MAX+1]
	    PSECT(SOR$RO_CODE) PRESET(
		[KEY_K_CHAR]=	0,
		[KEY_K_BIN]=	1^1+1^2+1^4+1^8+1^16,
		[KEY_K_ZONE]=	-1,
		[KEY_K_PACK]=	-1,
		[KEY_K_USB]=	1^1+1^2+1^4+1^8+1^16,
		[KEY_K_DLO]=	-1,
		[KEY_K_DLS]=	-1,
		[KEY_K_DTO]=	-1,
		[KEY_K_DTS]=	-1,
		[KEY_K_FLT]=	1^0+1^4,
		[KEY_K_FLTD]=	1^0+1^8,
		[KEY_K_FLTG]=	1^0+1^8,
		[KEY_K_FLTH]=	1^0+1^16),
	DSC_BIN: VECTOR[5,BYTE]
	    PSECT(SOR$RO_CODE) PRESET(
		[0]=	DSC$K_DTYPE_B,
		[1]=	DSC$K_DTYPE_W,
		[2]=	DSC$K_DTYPE_L,
		[3]=	DSC$K_DTYPE_Q,
		[4]=	DSC$K_DTYPE_O),
	DSC_USB: VECTOR[5,BYTE]
	    PSECT(SOR$RO_CODE) PRESET(
		[0]=	DSC$K_DTYPE_BU,
		[1]=	DSC$K_DTYPE_WU,
		[2]=	DSC$K_DTYPE_LU,
		[3]=	DSC$K_DTYPE_QU,
		[4]=	DSC$K_DTYPE_OU);

    BUILTIN
	FFS;

    KEY_BUF2[KEY_NUMBER] = .KEY_BUF1[KEY_NUMBER];
    IF .KEY_BUF2[KEY_NUMBER] GTRU MAX_KEYS THEN RETURN SOR$_BAD_KEY;
    DECR I FROM .KEY_BUF1[KEY_NUMBER]-1 TO 0 DO
	BEGIN
	KBF1 = KEY_BUF1[KEY_KBF(.I)];
	KBF2 = KEY_BUF2[KEY_KBF(.I)];
	KBF2[KBF_ORDER] = .KBF1[KBF_ORDER];			! Get order
	IF .KBF2[KBF_ORDER] GTRU 1 THEN RETURN SOR$_BAD_KEY;	! Check order
	IF .KBF1[KBF_TYPE] NEQ KEY_K_CHAR
	THEN							! Check length
	    BEGIN
	    IF .KBF1[KBF_LENGTH] GTRU K_MAXDEC THEN RETURN SOR$_BAD_KEY;
	    IF NOT .(DSC_LENGTH[.KBF1[KBF_TYPE]])<.KBF1[KBF_LENGTH],1,0>
	    THEN
		RETURN SOR$_BAD_KEY;
	    END;
	KBF2[KBF_LENGTH] = .KBF1[KBF_LENGTH];			! Get length
	IF .KBF1[KBF_POSITION] EQL 0 THEN RETURN SOR$_BAD_KEY;
	KBF2[KBF_POSITION] = .KBF1[KBF_POSITION] - 1;		! Get position
	KBF2[KBF_TYPE] = .DSC_DTYPES[.KBF1[KBF_TYPE]];		! Get type


	! For binary datatypes, compute the DSC datatype based on the length.
	!
	IF .KBF2[KBF_TYPE] EQL 0
	THEN
	    BEGIN
	    !
	    ! KEY_K_BIN or KEY_K_USB
	    !
	    LOCAL
		BITNUM;
	    FFS(%REF(0), %REF(%FIELDEXPAND(KBF_LENGTH,2)),
		KBF1[KBF_LENGTH], BITNUM);
	    IF (.BITNUM GEQ %ALLOCATION(DSC_BIN)) OR
		(.KBF1[KBF_LENGTH] NEQ 1^.BITNUM)
	    THEN
		RETURN SOR$_BAD_KEY;
	    IF .KBF1[KBF_TYPE] EQL KEY_K_BIN
		THEN KBF2[KBF_TYPE] = .DSC_BIN[.BITNUM]
		ELSE KBF2[KBF_TYPE] = .DSC_USB[.BITNUM];
	    END;


	! Adjust the length for NR and NL datatypes;
	! For floating datatypes, compute the length based on the datatype.
	!
	IF
	    ONEOF_(.KBF2[KBF_TYPE], BMSK_(
		DSC$K_DTYPE_NR,DSC$K_DTYPE_NL))
	THEN
	    KBF2[KBF_LENGTH] = .KBF2[KBF_LENGTH] + 1
	ELIF
	    ONEOF_(.KBF2[KBF_TYPE], BMSK_(
		DSC$K_DTYPE_F, DSC$K_DTYPE_D, DSC$K_DTYPE_G, DSC$K_DTYPE_H))
	THEN
	    BEGIN
	    LOCAL
		BITNUM;
	    FFS(%REF(1), %REF(%BPVAL-1),
		DSC_LENGTH[.KBF1[KBF_TYPE]], BITNUM);
	    KBF2[KBF_LENGTH] = .BITNUM;
	    END;

	END;

    RETURN SS$_NORMAL;

    END;

GLOBAL ROUTINE SOR$INIT_SORT
	(
	KEY_BUFFER:	REF VECTOR[1,WORD],
	LRL:		REF VECTOR[1,WORD],
	FILE_ALLOC:	REF VECTOR[1,LONG],
	WORK_FILES:	REF VECTOR[1,BYTE],
	SORT_TYPE:	REF VECTOR[1,BYTE],
	TOT_KEY_SIZE:	REF VECTOR[1,BYTE],
	USER_COMPARE,
	OPTIONS:	REF BLOCK[1],
	EXTRA
	) =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the COM_HACK_TKB bit, converts keys to DSC format,
!	and calls SOR$BEGIN_SORT to initialize the sort.
!
! FORMAL PARAMETERS:
!
!	KEY_BUFFER.raw		Key buffer address
!	LRL.rwu.r		Longest record length
!	FILE_ALLOC.rlu.r	Input file allocation
!	WORK_FILES.rbu.r	Number of work files
!	SORT_TYPE.rbu.r		Type of sort (record/tag/index/address)
!	TOT_KEY_SIZE.rbu.r	Total key size
!	USER_COMPARE.rzem.r	User-written comparison routine
!	OPTIONS.rlu.r		Option bits
!
!	All parameters are optional.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Status code.
!
! SIDE EFFECTS:
!
!	The working set is extended and the virtual memory is allocated.
!
!--
    BEGIN
    FIRSTPARAMETER_(KEY_BUFFER);	! Required by PRESENT_ and NULL_ macros

    LITERAL
	USED_OPTIONS =
	    MASK_(OPT_EBCDIC, OPT_STABLE),
	DEF_OPTIONS =
	    MASK_(OPT_NOSIGNAL);

    LOCAL
	KEYS:	KEY_BLOCK,		! DSC format keys
	CTX:	REF CTX_BLOCK,		! Addr of context area
	KEY_PARAM: REF KEY_BLOCK,
	STATUS;

    MACRO
	PARAM_(A) = (IF PRESENT_(A) THEN .A ELSE 0) %;


    ! If the user wants concurrent sorts, he must use the new interface to
    ! get them.
    !
    IF NOT NULL_(EXTRA) THEN RETURN SOR$_UNDOPTION;


    ! Get the context area
    !
    ! We know that SOR$PASS_FILES will allocate the context area,
    ! and that SOR$PASS_FILES may be called with no parameters.
    ! Finally, as a hack, SOR$PASS_FILES returns the address of the context
    ! area in R1.
    !
    STATUS = SOR$PASS_FILES(;CTX);
    IF NOT .STATUS THEN RETURN .STATUS;


    ! Check the options specified
    !
    IF NOT NULL_(OPTIONS)
    THEN
	IF (.OPTIONS[0,L_] AND NOT USED_OPTIONS) NEQ 0
	THEN
	    RETURN SOR$_UNDOPTION;		! Invalid options specified


    ! Get the total key size, for what it's worth.
    ! Note that this may conflict with information from the key buffer,
    ! or the specification file.
    !
    ! TKS stuff is damned stupid.
    !
    IF NOT NULL_(TOT_KEY_SIZE) THEN CTX[COM_TKS] = .TOT_KEY_SIZE[0];
    CTX[COM_HACK_STRIP] = TRUE;		! Set this by default


    ! Set the bit indicating only 2 parameters are passed to callback routines
    !
    CTX[COM_HACK_2ARGS] = TRUE;


    ! Convert keys to the new format
    ! Note: "If you pass both key buffer address and comparison address,
    ! SORT ignores the comparison routine address".
    !
    KEY_PARAM = 0;
    IF NOT NULL_(KEY_BUFFER) THEN
    IF .KEY_BUFFER[0] NEQ 0
    THEN
	BEGIN				! Convert to DSC format
	STATUS = DSC_DTYPE(KEY_BUFFER[0], KEYS[BASE_]);
	IF NOT .STATUS THEN RETURN .STATUS;
	KEY_PARAM = KEYS[BASE_];
	END;


    ! Call SOR$BEGIN_SORT to do the rest of the processing
    !
    RETURN SOR$BEGIN_SORT(
	KEY_PARAM[BASE_],
	PARAM_(LRL),
	%REF(DEF_OPTIONS OR (IF NULL_(OPTIONS) THEN 0 ELSE .OPTIONS[0,L_])),
	PARAM_(FILE_ALLOC),
	(IF KEY_PARAM[BASE_] NEQ 0 THEN 0
	ELSE IF NULL_(USER_COMPARE) THEN RETURN SOR$_MISS_PARAM
	ELSE .USER_COMPARE),
	0,
	PARAM_(SORT_TYPE),
	PARAM_(WORK_FILES));
    END;

GLOBAL ROUTINE SOR$INIT_MERGE
	(
	MERGE_ORDER:	REF VECTOR[,BYTE],
	KEY_BUFFER:	REF VECTOR[,WORD],
	LRL:		REF VECTOR[,WORD],
	OPTIONS:	REF BLOCK[1],
	USER_COMPARE,
	USER_INPUT,
	EXTRA
	) =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine converts keys to DSC format,
!	and calls SOR$BEGIN_MERGE to initialize the merge.
!
! FORMAL PARAMETERS:
!
!	MERGE_ORDER.rab		Order of the merge
!	KEY_BUFFER.raw		Key buffer address
!	LRL.rwu.r		Longest record length
!	OPTIONS.rlu.r		Option bits
!	USER_COMPARE,		User-written comparison routine
!	USER_INPUT		User-written input routine
!
!	All parameters are optional.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Status code.
!
! SIDE EFFECTS:
!
!	The work files are defined (not necessarily created), the working set
!	is extended and the virtual memory is extended.
!
!--
    BEGIN
    FIRSTPARAMETER_(MERGE_ORDER);	! Required by PRESENT_ and NULL_ macros

    LITERAL
	USED_OPTIONS =
	    MASK_(OPT_EBCDIC, OPT_SEQ_CHECK),
	DEF_OPTIONS =
	    MASK_(OPT_NOSIGNAL);

    LOCAL
	KEYS:	KEY_BLOCK,		! DSC format keys
	CTX:	REF CTX_BLOCK,		! Addr of context area
	KEY_PARAM: REF KEY_BLOCK,
	STATUS;

    MACRO
	PARAM_(A) = (IF PRESENT_(A) THEN .A ELSE 0) %;


    ! If the user wants concurrent sorts, he must use the new interface to
    ! get them.
    !
    IF NOT NULL_(EXTRA) THEN RETURN SOR$_UNDOPTION;


    ! Check the options specified
    !
    IF NOT NULL_(OPTIONS)
    THEN
	IF (.OPTIONS[0,L_] AND NOT USED_OPTIONS) NEQ 0
	THEN
	    RETURN SOR$_UNDOPTION;		! Invalid options specified


    ! Get the context area
    !
    ! We know that SOR$PASS_FILES will allocate the context area,
    ! and that SOR$PASS_FILES may be called with no parameters.
    ! Finally, as a hack, SOR$PASS_FILES returns the address of the context
    ! area in R1.
    !
    STATUS = SOR$PASS_FILES(;CTX);
    IF NOT .STATUS THEN RETURN .STATUS;


    !
    ! Do not set the COM_HACK_STRIP bit for merges
    !


    ! Set the bit indicating only 2 parameters are passed to callback routines
    !
    CTX[COM_HACK_2ARGS] = TRUE;


    ! Convert keys to the new format
    ! Note: "If you pass both key buffer address and comparison address,
    ! SORT ignores the comparison routine address".
    !
    KEY_PARAM = 0;
    IF NOT NULL_(KEY_BUFFER) THEN
    IF .KEY_BUFFER[0] NEQ 0
    THEN
	BEGIN				! Convert to DSC format
	STATUS = DSC_DTYPE(KEY_BUFFER[0], KEYS[BASE_]);
	IF NOT .STATUS THEN RETURN .STATUS;
	KEY_PARAM = KEYS[BASE_];
	END;


    ! Call SOR$BEGIN_MERGE to do the rest of the processing
    !
    RETURN SOR$BEGIN_MERGE(
	KEY_PARAM[BASE_],
	PARAM_(LRL),
	%REF(DEF_OPTIONS OR (IF NULL_(OPTIONS) THEN 0 ELSE .OPTIONS[0,L_])),
	PARAM_(MERGE_ORDER),
	(IF KEY_PARAM[BASE_] NEQ 0 THEN 0
	ELSE IF NULL_(USER_COMPARE) THEN RETURN SOR$_MISS_PARAM
	ELSE .USER_COMPARE),
	0,
	PARAM_(USER_INPUT)
	);
    END;

GLOBAL ROUTINE SOR$DO_MERGE
	(
	EXTRA
	) =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	"Perform the merge".
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Status code.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN
    FIRSTPARAMETER_(EXTRA);	! Required by PRESENT_ and NULL_ macros

    BUILTIN
	AP,
	CALLG;

    LOCAL
	CTX:	REF CTX_BLOCK,			! Addr of context area
	STATUS;


    ! If the user wants concurrent sorts, he must use the new interface to
    ! get them.
    !
    IF NOT NULL_(EXTRA) THEN RETURN SOR$_UNDOPTION;


    ! Get the context area
    !
    ! We know that SOR$PASS_FILES will allocate the context area,
    ! and that SOR$PASS_FILES may be called with no parameters.
    ! Finally, as a hack, SOR$PASS_FILES returns the address of the context
    ! area in R1.
    !
    STATUS = SOR$PASS_FILES(;CTX);
    IF NOT .STATUS THEN RETURN .STATUS;


    ! Check the flow control flags.
    !
    IF NOT .CTX[COM_FLO_DOMERGE] THEN RETURN SOR$_SORT_ON;


    ! Let SOR$END_SORT clean up
    !
    RETURN CALLG(.AP, SOR$END_SORT);
    END;

END
ELUDOM
