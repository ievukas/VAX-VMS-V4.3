MODULE DIRSCN (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine performs the basic scan of a directory,
!	searching for both relevant entries and free space.
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--

!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  26-Dec-1976  19:13
!
! MODIFIED BY:
!
!	V03-004	LMP0281		L. Mark Pilant,		23-Jul-1984  8:43
!		Fix a bug introduced by LMP0255 that caused null directory
!		records to generate the SS$_BADIRECTORY error.
!
!	V03-004	LMP0255		L. Mark Pilant,		6-Jun-1984  10:32
!		Validate the version number from a directory record to
!		insure that it is greater than zero.
!
!	V03-003	LMP0241		L. Mark Pilant,		26-Apr-1984  16:27
!		Change the wildcard handling logic to improve performance.
!
!	V03-002	LMP0196		L. Mark Pilant,		28-Feb-1984  11:06
!		Only use FMG$MATCH_NAME for the file name and type.  Not the
!		version.
!
!	V03-001	LMP0167		L. Mark Pilant,		10-Nov-1983  14:23
!		Add support for full wildcarding.
!
!	A0100	ACG0001		Andrew C. Goldstein,  10-Oct-1978  20:01
!		Previous revision history moved to F11A.REV
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:FCPDEF.B32';


GLOBAL ROUTINE DIR_SCAN (NAME_BLOCK, ENTER_MODE) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs the basic scan of a directory,
!	searching for both relevant entries and free space.
!
! CALLING SEQUENCE:
!	DIR_SCAN (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of name block
!	ARG2: 0 if operation is FIND or REMOVE
!	      1 if operation is ENTER
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	FIRST_FREE: record number of first free directory entry
!	DIR_RECORD: record number of found entry
!	HIGHEST_VERSION: highest version number encountered
!	LOWEST_VERSION: lowest version number encountered
!
! ROUTINE VALUE:
!	address of found directory entry or
!	0 if not found
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	NAME_BLOCK	: REF BBLOCK;		! name block arg

LINKAGE
	L_MATCH_NAME	= JSB (REGISTER = 2, REGISTER = 3,
			       REGISTER = 4, REGISTER = 5)
			: NOTUSED (10, 11);

EXTERNAL
	FIRST_FREE,				! record number of first free slot
	HIGHEST_VERSION,			! highest version number seen
	LOWEST_VERSION,				! lowest version number seen
	DIR_RECORD;				! record number of found entry

EXTERNAL ROUTINE
	DIRGET,					! get a directory record
	MAKE_STRING,				! Convert file name block to string
	FMG$MATCH_NAME	: L_MATCH_NAME;		! match general wild card string

LOCAL
	HIGH_VERSION	: SIGNED WORD,		! highest version so far
	LOW_VERSION	: SIGNED WORD,		! lowest version so far
	FREE_RECORD,				! first free record encountered
	REC_NUM,				! current record number
	BEST_REC,				! record number of highest/lowest version
	RECADDR		: REF BBLOCK,		! address of current directory record
	ASCII_NAME	: VECTOR [20, BYTE];	! Dir entry name in ASCII

! Initialize things.
!

FREE_RECORD = 0;				! no empty record found yet
BEST_REC = 0;					! no match found at all
HIGH_VERSION = 0;				! no high version as yet
LOW_VERSION = 32767;				! no low version as yet

! Now scan the directory sequentially, looking at each entry. If the search
! is for *.*;*, then read one block at a time. Otherwise, read whatever the
! buffer pool will take.
!

REC_NUM = .NAME_BLOCK [NMB$W_CONTEXT];
IF
    BEGIN
    WHILE 1 DO
	BEGIN
	REC_NUM = .REC_NUM + 1;
	IF .NAME_BLOCK [NMB$V_ALLNAM]
	AND .NAME_BLOCK [NMB$V_ALLTYP]
	AND .NAME_BLOCK [NMB$V_ALLVER]
	THEN RECADDR = DIRGET (.REC_NUM, 0)
	ELSE RECADDR = DIRGET (.REC_NUM, 1);

	IF .RECADDR EQL 0 THEN EXITLOOP 1;	! out on end of file

! Process each directory entry. First check for empty entries, noting
! the first one.
!

	IF .RECADDR [NMB$W_FID_NUM] EQL 0
	THEN
	    BEGIN
	    IF .FREE_RECORD EQL 0 THEN FREE_RECORD = .REC_NUM
	    END

! If we are in file ID search mode, compare the file ID
!

	ELSE
	    BEGIN
	    IF .RECADDR[NMB$W_VERSION] LEQ 0 THEN ERR_EXIT (SS$_BADIRECTORY);
	    IF .NAME_BLOCK [NMB$V_FINDFID]
	    THEN
		BEGIN
		IF CH$EQL (NMB$S_FID, NAME_BLOCK [NMB$W_FID],
			   NMB$S_FID, RECADDR [NMB$W_FID], 0)
		THEN
		    EXITLOOP 0;
		END

! Otherwise compare the name and type fields under wild card control.
!

	    ELSE
		IF
		    BEGIN
		    IF .NAME_BLOCK[NMB$V_ALLNAM] AND .NAME_BLOCK[NMB$V_ALLTYP]
		    THEN 1
		    ELSE IF .NAME_BLOCK[NMB$V_WILD]
			 THEN
			     BEGIN
			     ASCII_NAME[0] = MAKE_STRING (.RECADDR, ASCII_NAME[1]);

! Note that the match takes place ONLY on the file name and type.

			     ASCII_NAME[0] = CH$FIND_CH (.ASCII_NAME[0],
							 ASCII_NAME[1], ';') -
					     ASCII_NAME[1];
			     FMG$MATCH_NAME (.ASCII_NAME[0],
					     ASCII_NAME[1],
					     .NAME_BLOCK[NMB$B_ASCNAMSIZ],
					     NAME_BLOCK[NMB$T_ASCNAMTXT])
			     END
			 ELSE
			     (CH$EQL (NMB$S_NAME, NAME_BLOCK [NMB$W_NAME],
				      NMB$S_NAME, RECADDR [NMB$W_NAME], 0)
			      AND .NAME_BLOCK [NMB$W_TYPE] EQL .RECADDR [NMB$W_TYPE])
		    END

! On a name and type match, process the version. Wild card is an immediate
! match. Otherwise, maintain highest and lowest numbers found, keeping
! the record number of what we are looking for, if any. On exact match,
! exit immediately, note, or ignore, depending on the mode.
!

		THEN
		    BEGIN
		    IF .NAME_BLOCK [NMB$V_ALLVER] THEN EXITLOOP 0;	! wild card version

		    IF .RECADDR [NMB$W_VERSION] GTR .HIGH_VERSION
		    THEN
			BEGIN
			HIGH_VERSION = .RECADDR [NMB$W_VERSION];
			IF NOT .ENTER_MODE AND .NAME_BLOCK [NMB$W_VERSION] EQL 0
			THEN BEST_REC = .REC_NUM;
			END;

		    IF .RECADDR [NMB$W_VERSION] LSS .LOW_VERSION
		    THEN
			BEGIN
			LOW_VERSION = .RECADDR [NMB$W_VERSION];
			IF NOT .ENTER_MODE AND .NAME_BLOCK [NMB$W_VERSION] EQL -32768
			THEN
			    BEST_REC = .REC_NUM;
			END;

		    IF .RECADDR [NMB$W_VERSION] EQL .NAME_BLOCK [NMB$W_VERSION]
		    THEN
			BEGIN
			IF NOT .ENTER_MODE THEN EXITLOOP 0;
			IF NOT .NAME_BLOCK [NMB$V_NEWVER] THEN BEST_REC = .REC_NUM;
			END;

		    END;			! end of version processing
	    END;
	END					! end of loop
    END						! end surrounding loop
THEN	 					! if we scanned the whole directory
    IF .BEST_REC NEQ 0				! and found a candidate
    THEN
	BEGIN					! re-read the winning entry
	RECADDR = DIRGET (.BEST_REC, 0);
	REC_NUM = .BEST_REC;
	END;

! Return the implicit outputs as specified and return the address of the
! found directory entry (or 0 for none).
!

FIRST_FREE = .FREE_RECORD;			! first free entry
HIGHEST_VERSION = .HIGH_VERSION;		! highest version number found
LOWEST_VERSION = .LOW_VERSION;		! lowest version number found
DIR_RECORD = .REC_NUM;			! record number of entry
RETURN .RECADDR;
END;					! end of routine DIR_SCAN

END
ELUDOM
