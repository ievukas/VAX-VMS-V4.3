MODULE LIB$WAIT ( %TITLE 'Wait for a given period of time'
		IDENT = '1-001'		! File: LIBWAIT.B32 Edit: SBL1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library
!
! ABSTRACT:
!
!	LIB$WAIT hibernates the current process for a specified period
!	of time.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 07-Jul-1982
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 07-Jul-1982
!--


%SBTTL 'Declarations'
!
! PROLOGUE FILE:
!

REQUIRE 'RTLIN:LIBPROLOG';			! Switches, PSECTS, macros

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$WAIT;					! Wait a given period of time

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNALS:
!

EXTERNAL LITERAL
    LIB$_INVARG;

%SBTTL 'LIB$WAIT - Wait a given period of time'
GLOBAL ROUTINE LIB$WAIT (
    SECONDS: REF VECTOR [, LONG]	! Number of seconds to wait
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure places the current process into hibernation for
!	the number of seconds specified.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$WAIT (tenths.rf.r)
!
! FORMAL PARAMETERS:
!
!	SECONDS		Number of seconds to wait expressed as an
!			F_floating value.  The value must be between 0
!			and 100000.00.  The resolution of the delay
!			is to the nearest hundredth-second.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_INVARG	Invalid argument.  SECONDS was less than zero or was
!			greater than 100000
!	LIB$_WRONUMARG	Wrong number of arguments.
!	SS$_xxx		Error status returned by the $SCHDWK system service.
!
! SIDE EFFECTS:
!
!	Schedules a wakeup for the current process and places the process into
!	hibernation.
!
!--

    BEGIN

    LOCAL
	RET_STATUS,				! Return status
	DELTA_TIME: VECTOR [2, LONG];		! Quadword time to wait

    LITERAL
 	N_OF_TICKS_IN_CENTISECOND = -100000;	! Number of 100-nanosecond
						! clock ticks in .01 seconds;
    						! negative because we need
    						! a negative delta time.
    BUILTIN
	CMPF,
	CVTRFL,
	EMUL,
	MULF;

    !+
    ! Validate argument count.
    !-

    $LIB$VALIDATE_ARGCOUNT (1,1);

    !+
    ! Return the error LIB$_INVARG if SECONDS is out if range.
    !
    ! \\ Note:  The code generated by the CMPFs is awful, though
    !    correct.  The BLISS folks say that this will be fixed
    !    in a future release.  One could get the right code by
    !    saying: CASE CMPF(..) FROM -1 TO 1 , but in the interest
    !    of clarity, I'll wait. \\
    !-

    IF CMPF (SECONDS [0], %REF (%E'100000')) GTR 0 OR
       CMPF (SECONDS [0], %REF (%E'0')) LSS 0
    THEN
	RETURN LIB$_INVARG;

    !+
    ! Get number of centiseconds and then round to an integer.
    !-

    MULF (SECONDS [0], %REF (%E'100'), DELTA_TIME [0]);
    CVTRFL (DELTA_TIME [0], DELTA_TIME [0]);

    !+
    ! Convert the number of centiseconds to wait into a VMS delta time.
    !-

    EMUL (%REF (N_OF_TICKS_IN_CENTISECOND),	! Number of ticks in .01 seconds
	  DELTA_TIME [0],			! Number of centiseconds
	  %REF (0),				! Addend - zero
	  DELTA_TIME);				! Delta time result

    !+
    ! Schedule a wakeup for the current process.  Note that if SECONDS is
    ! zero, the wakeup happens immediately.
    !-

    RET_STATUS = $SCHDWK (DAYTIM = DELTA_TIME);
    IF NOT .RET_STATUS
    THEN
	RETURN .RET_STATUS;

    !+
    ! Hibernate, and return the status of the $HIBER when it wakes up.
    !-

    RETURN ($HIBER);

    END;					! End of routine LIB$WAIT
!<BLF/PAGE>

END						! End of module LIB$WAIT

ELUDOM
