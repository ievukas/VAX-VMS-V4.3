%TITLE 'EDT$PRPARDRV - parse driver'
MODULE EDT$PRPARDRV (				! Parse driver
		IDENT = 'V04-000'			! File: PRPARDRV.BLI Edit: JBS1004
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Parse driver.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: December 12, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 25-Feb-1981.  This module was created by
!	extracting routine EDT$$PA_DRIV  from module PARSER.
! 1-002	- Regularize headers.  JBS 12-Mar-1981
! 1-003	- Use the ASSERT macro.  JBS 01-Jun-1981
! 1-004	- Improve the appearance of the listing.  JBS 17-Jun-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$PA_DRIV;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

REQUIRE 'EDTSRC:PARLITS';

REQUIRE 'EDTSRC:PARSYNTBL';

REQUIRE 'EDTSRC:PARLABTBL';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$PA_DRIV  - parse driver'

GLOBAL ROUTINE EDT$$PA_DRIV (			! Parse driver
    TAB_INDEX					! Start parse here
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the parse table driver routine.  TAB_INDEX indexes a byte in
!	the parse table at which the parse starts.
!
!	This routine loops, fetching the next operator and execting until
!	either a RETURN or ABORT command is executed, or a semantic routine
!	returns failure.
!
! FORMAL PARAMETERS:
!
!  TAB_INDEX		Index into the parse table at which to start the parse
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_PA_TBLPTR
!
! ROUTINE VALUE:
!
!	The value of the routine is 1 for success and zero for failure.
!
! SIDE EFFECTS:
!
!	Calls semantic routines
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$PA_SCANTOK : NOVALUE,		! Get the next token
	EDT$$PA_TSTTOK,				! Try to match the current token
	EDT$$PA_SEMRUT;				! Semantic routines referenced in the parser tables

    EXTERNAL
	EDT$$A_PA_TBLPTR;			! pointer into the parse table

    LOCAL
	OP_CODE,				! The parse table op-code
	OPERAND,				! The parse table operand
	SEM_ROUT,				! Number of semantic routine for select
	RETURN_ADDR;				! The address to return to after a call

    EDT$$A_PA_TBLPTR = PARSE_TABLE [.TAB_INDEX];

    DO
	BEGIN
!+
! Fetch the op_code and the operand from the table and bump
! past them.
!-
	OP_CODE = .(.EDT$$A_PA_TBLPTR)<5, 3>;
	OPERAND = .(.EDT$$A_PA_TBLPTR)<0, 5>;
	EDT$$A_PA_TBLPTR = .EDT$$A_PA_TBLPTR + 1;

	IF (.OPERAND EQL 0)
	THEN
!+
! Here if operand is 0.  This means it is a long-form operand.
!-
	    BEGIN
	    OPERAND = .(.EDT$$A_PA_TBLPTR)<0, 8>;
	    EDT$$A_PA_TBLPTR = .EDT$$A_PA_TBLPTR + 1;
	    END;

!+
! And now, let's case on the operand.
!-

	CASE .OP_CODE FROM OPC_ABORT TO OPC_SELECT OF
	    SET

	    [OPC_ABORT] : 			! This one is easy enough
		BEGIN
		RETURN (0);
		END;

	    [OPC_ACTION] : 			! Perform the specified action routine.
		BEGIN

		IF ( NOT EDT$$PA_SEMRUT (.OPERAND, EDT$$A_PA_TBLPTR)) THEN RETURN (0);

		END;

	    [OPC_CALL] : 			! Call; save current pointer and call yourself.
		BEGIN
		RETURN_ADDR = .EDT$$A_PA_TBLPTR;

		IF EDT$$PA_DRIV (.LAB_TAB [.OPERAND - 1])	!
		THEN
		    EDT$$A_PA_TBLPTR = .RETURN_ADDR
		ELSE
		    RETURN (0);

		END;

	    [OPC_GOTO] : 			! Just get the new table address and continue.
		BEGIN
		EDT$$A_PA_TBLPTR = PARSE_TABLE [.LAB_TAB [.OPERAND - 1]];
		END;

	    [OPC_OPTION] : 			! Skip if the current token is not the optional one.
		BEGIN

		IF EDT$$PA_TSTTOK (.OPERAND)
		THEN
		    BEGIN
		    EDT$$PA_SCANTOK ();
		    EDT$$A_PA_TBLPTR = .EDT$$A_PA_TBLPTR + 1;
		    END
		ELSE
		    EDT$$A_PA_TBLPTR = PARSE_TABLE [.LAB_TAB [.(.EDT$$A_PA_TBLPTR)<0, 8> - 1]];

		END;

	    [OPC_REQUIRE] : 			! Abort if the current token is not the required one.
		BEGIN

		IF EDT$$PA_TSTTOK (.OPERAND) THEN EDT$$PA_SCANTOK () ELSE RETURN (0);

		END;

	    [OPC_SELECT] : 			! Loop through the possible tokens, looking for it.
		BEGIN

		LOCAL
		    SELECTED;

		SEM_ROUT = .(.EDT$$A_PA_TBLPTR)<0, 8>;
		EDT$$A_PA_TBLPTR = .EDT$$A_PA_TBLPTR + 1;
		SELECTED = 0;

		INCR I FROM 1 TO .OPERAND DO
		    BEGIN

		    IF EDT$$PA_TSTTOK (.(.EDT$$A_PA_TBLPTR)<0, 8>)
		    THEN
			BEGIN
			EDT$$A_PA_TBLPTR = PARSE_TABLE [.LAB_TAB [.(.EDT$$A_PA_TBLPTR + 1)<0, 8> - 1]];
			SELECTED = .I;
			EXITLOOP;
			END;

		    EDT$$A_PA_TBLPTR = .EDT$$A_PA_TBLPTR + 2;
		    END;

		IF ( NOT EDT$$PA_SEMRUT (.SEM_ROUT, .SELECTED)) THEN RETURN (0);

		IF (.SELECTED NEQ 0) THEN EDT$$PA_SCANTOK ();

		END;

	    [OPC_RETURN] : 			! And another easy one.
		BEGIN
		RETURN (1);
		END;

	    [OUTRANGE] :
		ASSERT (0);
	    TES;

	END
    UNTIL 0;

    ASSERT (0);
    RETURN (0);
    END;					! of routine EDT$$PA_DRIV

!<BLF/PAGE>

END						! of module EDT$PRPARDRV

ELUDOM
