%TITLE 'EDT$INIT - initialize'
MODULE EDT$INIT (				! Initialize
		IDENT = 'V04-000'			! File: INIT.BLI Edit: JBS1054
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Initialize EDT
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: August 6, 1979
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 18-FEB-1981.  This module was created by
!	extracting routine EDT$$INIT  from module TINPUT.
! 1-002	- Regularized the headers and arranged to call EDT$$FATAL_IOERR  for I/O errors.  JBS 19-Feb-1981
! 1-003	- Changed from IO_STS and IO_FNF to EDT$$G_IOFI_NFND .  JBS 19-Feb-1981
! 1-004	- Fixed module and file name.  JBS 04-Mar-1981
! 1-005	- Fix the file name.  JBS 11-Mar-1981
! 1-006	- Use new message codes.  JBS 04-Aug-1981
! 1-007	- Check for storage exhausted when defining the permanent buffers, and return
!	   a value rather than printing a message if the primary input file is not found.  JBS 16-Aug-1981
! 1-008 - Initialization moved from EDT$DATA to here.  STS 05-Nov-1981
! 1-009 - Add some initialization of the TBCB for the main buffer.  (a bug
!         surfaced where the cur_line was not zero.)  STS 13-Nov-1981
! 1-010 - Change this to initialize everything necessary for sharable
!	   image.  STS 17-Nov-1981
! 1-011	- Initialize the control C data by calling EDT$$CLR_CC.  JBS 29-Dec-1981
! 1-012 - Convert to fileio to open input file. STS 06-Jan-1982
! 1-013 - Remove reference to edt$$z_sys_prirab. STS 22-Jan-1982
! 1-014	- Autorepeat is initially on.  JBS 30-Jan-1982
! 1-015	- Initialize EDT$$G_ENB_AUTRPT.  JBS 11-Feb-1982
! 1-016 - Use routine edt$workio to open workfile. STS 08-Feb-1982
! 1-017 - Initialize descriptor EDT$$Z_WF_DESC. STS 15-Feb-1982
! 1-018 - Add literals needed for callable EDT. STS 08-Mar-1982
! 1-019 - Initialize line number correctly. STS 10-Mar-1982
! 1-020	- Change EDT$$G_CMD and EDT$$G_JOU to EDT$$V_OPTIONS.  JBS 18-Mar-1982
! 1-021	- The file I/O routine returns a status code.  Watch for EDT$_NONSTDFIL.
!	   JBS 26-Mar-1982
! 1-022	- Correct a typo in non-standard file handling.  JBS 27-Mar-1982
! 1-023	- Don't clear EDT$$G_EIGHT_BIT.  JBS 05-Apr-1982
! 1-024 - Set up input file open flag. STS 07-Apr-1982
! 1-025	- Don't initialiaze the TBCBs -- now done by EDT$$GET_BUFPTR.  JBS 08-Apr-1982
! 1-026	- Initialize EDT$$G_JOU_VALID.  JBS 09-Apr-1982
! 1-027	- Improve the message if the primary input file cannot be opened.  JBS 03-Jun-1982
! 1-028	- Pass the default file name in the RHB parameter.  JBS 15-Jun-1982
! 1-029 - Set EDT$$G_CHM_FRST_ENTRY to 1 for callable EDT.  SMB 01-Jul-1982
! 1-030	- Initialize EDT$$G_LASTMSG, remove EDT$$G_CHM_FRST_ENTRY.  JBS 05-JUL-1982
! 1-031 - Take out reference to PRTC prompt. STS 07-Jul-1982
! 1-032 - Save original terminal width. STS 08-Jul-1982
! 1-033 - Change the line mode insert prompt.  SMB 14-Jul-1982
! 1-034	- Remove EDT$$A_STR_CMP.  JBS 19-Jul-1982
! 1-035 - Add initialization of select range. STS 06-Aug-1982
! 1-036 - Move open input file first and get out if not found and
!	    nocreate. STS 10-Aug-1982
! 1-037	- New implementation of defined keys.  JBS 12-Aug-1982
! 1-038 - Make use of the bit masks in the options word. STS 17-Aug-1982
! 1-039	- Fix up references to EDT$M_.  JBS 23-Aug-1982
! 1-040 - Zero out the help file open flag. STS 27-Aug-1982
! 1-041	- Call EDT$$INIT_IO.  JBS 27-Aug-1982
! 1-042	- Initialize EDT$$G_ENB_AUTRPT in the terminal initialization.  JBS 02-Sep-1982
! 1-043 - Initialize some screen structure globals.  SMB 10-Oct-1982
! 1-044	- Initialize the keypad translation table.  JBS 17-Oct-1982
! 1-045	- New handling of EDT$$G_SCR_REBUILD.  JBS 21-Oct-1982
! 1-046 - Make edt$$wf_desc static not dynamic descriptor. STS 11-Nov-1982
! 1-047	- Initialize EDT$$A_OLD_SEL.  JBS 02-Dec-1982
! 1-048	- Remove reference to EDT$$T_EXE_LNO.  JBS 14-Dec-1982
! 1-049	- Initialize EDT$$G_CS_LNO.  JBS 29-Dec-1982
! 1-050 - Initialize EDT$$G_TOP_SCREG, EDT$$G_BOT_SCREG.  SMB 11-Jan-1983
! 1-051	- Initialize EDT$$G_RECSCRUPD.  JBS 21-Jan-1983
! 1-052	- Add conditionals for WPS support.  JBS 10-Feb-1983
! 1-053	- Defer non-standard message if no output file specified.  JBS 24-Mar-1983
! 1-054	- Initialize EDT$$G_TAB_SIZ and EDT$$G_TAB_LVL.  JBS 16-Sep-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$INIT;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

%IF %BLISS (BLISS32)
%THEN

REQUIRE 'EDTSRC:SYSSYM';

%FI

LIBRARY 'EDTSRC:SUPPORTS';

LIBRARY 'EDTSRC:KEYPADDEF';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!

LITERAL
    NO_SELECT = -1;

!
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$INIT  - Initialize EDT'

GLOBAL ROUTINE EDT$$INIT 			! Initialize EDT
    =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Initialize EDT
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$L_LNO_EMPTY
!	EDT$$A_CUR_BUF
!	EDT$$A_INP_NAM
!	EDT$$G_INP_NAMLEN
!	EDT$$G_IOFI_NFND
!
! IMPLICIT OUTPUTS:
!
!	Most of EDT's global variables
!
! ROUTINE VALUE:
!
!	0			Primary input file was not found
!	1			Primary input file was found
!	2			Primary input file does not have standard text format
!	3			Primary input file open failure or other fatal error--abort
!
! SIDE EFFECTS:
!
!	Initializes most variables.
!	Opens the work file and terminal.
!	Establishes the MAIN and PASTE buffers, or fails.
!	Any I/O errors are fatal.
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$CALLWIO,				! sets up handler and calls general work routine
	EDT$$CALLFIO,				! sets up handler and calls file routine
	EDT$$FMT_MSG,
	EDT$$FATAL_IOERR : NOVALUE,
	EDT$$TI_OPN,
	EDT$$ALO_HEAP,				! allocate heap storage for strings
	EDT$$GET_BUFPTR,
	EDT$$FND_BUF,
	EDT$$NEW_BUF,
	EDT$$CLR_CC : NOVALUE,			! Clear control C state
	EDT$$FIOPN_ERR : NOVALUE,		! Report a file open error
	EDT$$INIT_IO : NOVALUE;			! Initialize the I/O system

    EXTERNAL LITERAL
	EDT$M_RECOVER,				! /RECOVER specified
	EDT$M_NOOUTPUT,				! /NOOUTPUT or /READ_ONLY specified
	EDT$M_NOCREATE,				! /NOCREATE specified
	EDT$K_OPEN_IN_OUT,
	EDT$K_OPEN_INPUT,
	EDT$K_INPUT_FILE;

%IF %BLISS (BLISS32)
%THEN

    EXTERNAL ROUTINE
	STR$FREE1_DX;

%FI

    EXTERNAL
	EDT$$G_TOP_SCREG,			! Top of scrolling region
	EDT$$G_BOT_SCREG,			! Bottom of scrolling region
	EDT$$L_LNO_EMPTY : LN_BLOCK,		! Empty record
	EDT$$L_TOP_LN : LN_BLOCK,		! Top screen record
	EDT$$A_EOB_SCRPTR,			! End of buffer screen pointer
	EDT$$A_FST_SCRPTR,			! First screen pointer
	EDT$$G_LASTMSG,				! The last message printed
	EDT$$G_INPUT_OPN,			! input file open flag
	EDT$$G_CMD_OPN,				! command file open flag
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,	! Current text buffer control block.
	EDT$$A_INP_NAM,				! Name of input file.
	EDT$$G_HELP_SET,			! Flag to indicate help file opened
	EDT$$G_INP_NAMLEN,			! Length of input file name.
	EDT$$A_PRV_BUF,				! Previous tbcb.
	EDT$$A_PST_BUF,				! Paste buffer tbcb.
	EDT$$G_EDIT_MOD,
	EDT$$A_SEL_BUF,				! address of select buffer
	EDT$$A_OLD_SEL,				! Address of previous select buffer
	EDT$$G_EDIT_DFLTMOD,
	EDT$$G_SAV_CNT,
	EDT$$G_EXITD,
	EDT$$A_OUT_NAM,
	EDT$$G_PRV_LN,
	EDT$$A_TIN_IBUFPTR,
	EDT$$G_OUT_NAMLEN,
	EDT$$A_CMD_NAM,
	EDT$$G_NOS,
	EDT$$G_CAS_FLG,
	EDT$$G_EXCT_MATCH,
	EDT$$G_SEA_BEG,
	EDT$$G_SEA_BNDD,
	EDT$$G_QUIET,
	EDT$$G_RPT,
	EDT$$G_FNF_MSGFLG,
	EDT$$G_VFY,
	EDT$$G_TRUN,
	EDT$$G_TI_WID,
	EDT$$G_SAV_TIWID,
	EDT$$A_BUF_LST,
	EDT$$G_KPAD,
	EDT$$G_WD_WRAP,
	EDT$$G_SCLL_TOP,
	EDT$$G_SCLL_BOT,
	EDT$$G_SCR_LNS,
	EDT$$G_CS_LNO,
	EDT$$G_SCR_REBUILD,
	EDT$$G_RECS_INSERTED,
	EDT$$A_US_ENT : VECTOR,
	EDT$$A_US_TXT : VECTOR,
	EDT$$G_TXT_ONSCR,
	EDT$$G_INP_CNT,
	EDT$$G_RCOV_MOD,
	EDT$$G_SHF,
	EDT$$G_TAB_SIZ,
	EDT$$G_TAB_LVL,
	EDT$$G_LN_CHGD,
	EDT$$G_MSGFLG,
	EDT$$G_DIR_MOD,
	EDT$$A_SEL_POS,

%IF SUPPORT_WPS
%THEN
	EDT$$G_DFLT_VERB,
	EDT$$G_SUMRY,
	EDT$$G_WRDTYP,
	EDT$$G_PARTYP,
%FI

	EDT$$G_TRN_TBLINIT,
	EDT$$G_K_AUTRPT,
	EDT$$G_RDAHED,
	EDT$$G_WK_AVAIL,
	EDT$$G_WK_CURBUK,
	EDT$$G_WK_GRTSTBUK,
	EDT$$G_WK_MODFD,
	EDT$$A_FMT_CUR,
	EDT$$G_FMT_LNPOS,
	EDT$$A_FMT_WRRUT,
	EDT$$G_PA_ABO,
	EDT$$A_PA_CURTOK,
	EDT$$G_PA_NOQUO,
	EDT$$G_TIN_OBUFPOS,
	EDT$$G_SEA_STRLEN,
	EDT$$G_SUB_STRLEN,
	EDT$$T_PMT_LINE : VECTOR,
	EDT$$T_PMT_KPD : VECTOR,
	EDT$$T_PMT_NOKPD : VECTOR,
	EDT$$T_PMT_HCCHG : VECTOR,
	EDT$$T_PMT_INS : VECTOR,
	EDT$$T_PMT_INSN : VECTOR,
	EDT$$T_PMT_QUERY : VECTOR,
	EDT$$T_FMT_BUF,
	EDT$$TI_WRLN,
	EDT$$T_CMD_BUF,
	EDT$$G_IOFI_NFND,			! 1 = open failed due to file not found
	EDT$$Z_WF_DESC : BLOCK [8, BYTE],
	EDT$$V_OPTIONS : BITVECTOR [32],	! Options bits, bit 0 = /RECOVER
	EDT$$G_JOU_VALID,			! 1 = journal record is valid
	EDT$$A_TRN_TBL : VECTOR [K_KPAD_HASHSIZ],
	EDT$$G_RECSCRUPD,			! Counter for updating the screen during recovery mode
	EDT$$G_WRITE_MSG;			! Message on next WRITE or EXIT command

    MESSAGES ((INSMEM, INPFILOPN, NONSTDFIL));

    LOCAL
	LEN,
	FILE_DESC : BLOCK [8, BYTE],
	RHB_DESC : BLOCK [8, BYTE],
	NEW,
	RETURN_VALUE,
	IO_STS;

    RETURN_VALUE = 1;				! Assume success
!+
! on VAX/VMS we have fields defined for descriptors
! fill them in
!-

%IF %BLISS (BLISS32)
%THEN
    EDT$$Z_WF_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    EDT$$Z_WF_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    FILE_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    FILE_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    RHB_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    RHB_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
%FI

    EDT$$Z_WF_DESC [DSC$A_POINTER] = 0;
    EDT$$Z_WF_DESC [DSC$W_LENGTH] = 512;
    FILE_DESC [DSC$A_POINTER] = 0;
    FILE_DESC [DSC$W_LENGTH] = 0;
    RHB_DESC [DSC$A_POINTER] = 0;
    RHB_DESC [DSC$W_LENGTH] = 0;
!+
! Initialize a lot of variables.
!-
    MOVELINE (EDT$$L_LNO_EMPTY, EDT$$L_TOP_LN);
    EDT$$A_FST_SCRPTR = 0;
    EDT$$A_EOB_SCRPTR = 0;
    EDT$$G_LASTMSG = 1;				! No last message
    EDT$$A_SEL_BUF = 0;				! No select range
    EDT$$A_OLD_SEL = 0;				! No previous select buffer
    EDT$$G_RCOV_MOD = ((.EDT$$V_OPTIONS AND EDT$M_RECOVER) NEQ 0);
    EDT$$G_RECSCRUPD = 0;
    EDT$$G_EDIT_MOD = LINE_MODE;
    EDT$$G_CMD_OPN = 0;
    EDT$$G_EDIT_DFLTMOD = LINE_MODE;
    EDT$$G_SAV_CNT = 3;
    EDT$$G_HELP_SET = 0;
    EDT$$G_EXITD = 0;
    EDT$$G_NOS = 1;
    EDT$$G_CAS_FLG = 0;
    EDT$$G_EXCT_MATCH = 0;
    EDT$$G_SEA_BEG = 1;
    EDT$$G_SEA_BNDD = 0;
    EDT$$G_QUIET = 0;
    EDT$$G_RPT = 1;
    EDT$$G_VFY = 0;
    EDT$$G_TRUN = 1;
    EDT$$G_TI_WID = 80;
    EDT$$A_BUF_LST = 0;
    EDT$$G_KPAD = 1;
    EDT$$G_WD_WRAP = 256;
    EDT$$G_SCLL_TOP = 7;
    EDT$$G_SCLL_BOT = 14;
    EDT$$G_SCR_LNS = 22;
!+
! Set scrolling boundaries to 99 to ensure that they get set the
! first time thru change mode.
!-
    EDT$$G_TOP_SCREG = 99;
    EDT$$G_BOT_SCREG = 99;
    EDT$$G_RECS_INSERTED = 0;
    EDT$$G_SCR_REBUILD = 1;
    EDT$$G_CS_LNO = -1;
    EDT$$G_TXT_ONSCR = 0;
    EDT$$G_INP_CNT = 0;
    EDT$$G_SHF = 0;
    EDT$$G_TAB_LVL = 0;
    EDT$$G_TAB_SIZ = 0;
    EDT$$G_LN_CHGD = 0;
    EDT$$G_MSGFLG = 0;
    EDT$$G_DIR_MOD = 1;
    EDT$$G_PRV_LN = 999;
    EDT$$A_SEL_POS = NO_SELECT;

%IF SUPPORT_WPS
%THEN
    EDT$$G_DFLT_VERB = 0;
    EDT$$G_SUMRY = 1;
    EDT$$G_WRDTYP = 0;
    EDT$$G_PARTYP = 1;
%FI

    EDT$$G_TRN_TBLINIT = 0;
    EDT$$G_K_AUTRPT = 1;
    EDT$$G_RDAHED = 0;
    EDT$$G_WK_AVAIL = 0;
    EDT$$G_WK_CURBUK = 0;
    EDT$$G_WK_GRTSTBUK = 1;
    EDT$$G_WK_MODFD = 0;
    EDT$$G_FMT_LNPOS = 0;
    EDT$$G_PA_ABO = 0;
    EDT$$A_PA_CURTOK = EDT$$T_CMD_BUF;
    EDT$$G_PA_NOQUO = 0;
    EDT$$G_TIN_OBUFPOS = 0;
    EDT$$A_TIN_IBUFPTR = 0;
    EDT$$G_SEA_STRLEN = 0;
    EDT$$G_SUB_STRLEN = 0;
    EDT$$G_JOU_VALID = 0;
!+
! Initialize the keypad translation table to all empty.
!-

    INCR I FROM 0 TO (K_KPAD_HASHSIZ - 1) DO
	EDT$$A_TRN_TBL [.I] = 0;

!+
! Initialize the I/O system.
!-
    EDT$$INIT_IO ();
!+
! Open the terminal.  If it fails, abort.
!-
    EDT$$TI_OPN ();
!+
! Attempt open first
!-
    EDT$$G_INPUT_OPN = 0;
    EDT$$G_FNF_MSGFLG = 1;
    EDT$$A_FMT_CUR = EDT$$T_FMT_BUF;
    EDT$$A_FMT_WRRUT = EDT$$TI_WRLN;
    EDT$$CLR_CC ();
!+
! Open the input file.
!-
    BEGIN

    LOCAL
	RHB_LEN,
	RHB_ADDR;

    RHB_LEN = 0;
    RHB_ADDR = 0;
    STRING_DESC (RHB_DESC, RHB_LEN, RHB_ADDR);
    STRING_DESC (FILE_DESC, EDT$$G_INP_NAMLEN, .EDT$$A_INP_NAM);
    IO_STS = EDT$$CALLFIO (EDT$K_OPEN_INPUT, EDT$K_INPUT_FILE, FILE_DESC, RHB_DESC);

    IF (( NOT .IO_STS) AND (.IO_STS NEQ EDT$_NONSTDFIL))
    THEN
	BEGIN

	IF .EDT$$G_IOFI_NFND
	THEN
	    BEGIN
	    RETURN_VALUE = 0;

	    IF ((.EDT$$V_OPTIONS AND EDT$M_NOCREATE) NEQ 0) THEN RETURN (0);

	    END
	ELSE
	    BEGIN
	    EDT$$FIOPN_ERR (EDT$_INPFILOPN, FILE_DESC);
	    RETURN_VALUE = 3;
	    END;

	END
    ELSE
	BEGIN
	EDT$$G_INPUT_OPN = 1;			! indicate input file open

	IF (.IO_STS EQL EDT$_NONSTDFIL) THEN RETURN_VALUE = 2;

	END;

    END;
!
    CH$MOVE (4, UPLIT BYTE(3, 13, 10, '*'), EDT$$T_PMT_LINE);
    CH$MOVE (1, UPLIT BYTE(0), EDT$$T_PMT_KPD);
    CH$MOVE (1, UPLIT BYTE(0), EDT$$T_PMT_NOKPD);
    CH$MOVE (5, UPLIT BYTE(4, 13, 10, 'C', '*'), EDT$$T_PMT_HCCHG);
    CH$MOVE (15, UPLIT BYTE(14, 13, 10, '            '), EDT$$T_PMT_INS);
    CH$MOVE (3, UPLIT BYTE(2, 13, 10), EDT$$T_PMT_INSN);
    CH$MOVE (4, UPLIT BYTE(3, 13, 10, '?'), EDT$$T_PMT_QUERY);
!+
! Allocate some VM for the string such as page and end text and entity specifications
!-
    LEN = 6;

    IF EDT$$ALO_HEAP (LEN, EDT$$A_US_TXT [0])	! end text
    THEN
	CH$MOVE (.LEN, UPLIT BYTE(5, '[EOB]'), .EDT$$A_US_TXT [0])
    ELSE
	BEGIN
	EDT$$FMT_MSG (EDT$_INSMEM);
	RETURN (3);
	END;

    LEN = 5;

    IF EDT$$ALO_HEAP (LEN, EDT$$A_US_TXT [1])	! page text
    THEN
	CH$MOVE (.LEN, UPLIT BYTE(4, '<FF>'), .EDT$$A_US_TXT [1])
    ELSE
	BEGIN
	EDT$$FMT_MSG (EDT$_INSMEM);
	RETURN (3);
	END;

    LEN = 7;

    IF EDT$$ALO_HEAP (LEN, EDT$$A_US_ENT [0])	! word entity
    THEN
	CH$MOVE (.LEN, UPLIT BYTE(6, ' ', 9, 10, 11, 12, 13), .EDT$$A_US_ENT [0])
    ELSE
	BEGIN
	EDT$$FMT_MSG (EDT$_INSMEM);
	RETURN (3);
	END;

    LEN = 4;

    IF EDT$$ALO_HEAP (LEN, EDT$$A_US_ENT [1])	! sent entity
    THEN
	CH$MOVE (4, UPLIT BYTE(3, '.', '!', '?'), .EDT$$A_US_ENT [1])
    ELSE
	BEGIN
	EDT$$FMT_MSG (EDT$_INSMEM);
	RETURN (3);
	END;

    LEN = 3;

    IF EDT$$ALO_HEAP (LEN, EDT$$A_US_ENT [2])	! sect entity
    THEN
	CH$MOVE (3, UPLIT BYTE(2, 13, 13), .EDT$$A_US_ENT [2])
    ELSE
	BEGIN
	EDT$$FMT_MSG (EDT$_INSMEM);
	RETURN (3);
	END;

    LEN = 2;

    IF EDT$$ALO_HEAP (LEN, EDT$$A_US_ENT [3])	! page entity
    THEN
	CH$MOVE (2, UPLIT BYTE(1, 12), .EDT$$A_US_ENT [3])
    ELSE
	BEGIN
	EDT$$FMT_MSG (EDT$_INSMEM);
	RETURN (3);
	END;

!+
! Save the terminal width gotten from the operating system
!-
    EDT$$G_SAV_TIWID = .EDT$$G_TI_WID;
!+
! Open the workfile.  If it fails, abort.
!-
    EDT$$CALLWIO (EDT$K_OPEN_IN_OUT, 0, 0);
!+
! Open the paste text buffer.
!-

    IF ( NOT EDT$$FND_BUF (UPLIT BYTE('PASTE'), 5))
    THEN
	BEGIN
	EDT$$FMT_MSG (EDT$_INSMEM);
	RETURN (3);
	END;

    EDT$$A_PST_BUF = .EDT$$A_CUR_BUF;
!+
! And the MAIN text buffer.
!-

    IF ( NOT EDT$$GET_BUFPTR (UPLIT BYTE('MAIN'), 4, EDT$$A_CUR_BUF, NEW))
    THEN
	BEGIN
	EDT$$FMT_MSG (EDT$_INSMEM);
	RETURN (3);
	END;

    EDT$$A_PRV_BUF = .EDT$$A_CUR_BUF;

    IF .EDT$$G_INPUT_OPN THEN EDT$$A_CUR_BUF [TBCB_INPUT_RAB] = 1;

    EDT$$NEW_BUF ();
!+
! If no output file has been specified, defer the 'non standard' message
! until the first WRITE or EXIT command.
!-

    IF ((.RETURN_VALUE EQL 2) AND ((.EDT$$V_OPTIONS AND EDT$M_NOOUTPUT) NEQ 0))
    THEN
	BEGIN
	RETURN_VALUE = 1;
	EDT$$G_WRITE_MSG = EDT$_NONSTDFIL;
	END
    ELSE
	BEGIN
	EDT$$G_WRITE_MSG = 1;
	END;

!+
! On VMS deallocate the dynamic descriptors
!-

%IF %BLISS (BLISS32)
%THEN
    STR$FREE1_DX (FILE_DESC);
    STR$FREE1_DX (RHB_DESC);
%FI

    RETURN (.RETURN_VALUE);
    END;					! of routine EDT$$INIT

!<BLF/PAGE>

END						! of module EDT$INIT

ELUDOM
