MODULE MWTUR1 (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MOUNT Utility Structure Level 1
!
! ABSTRACT:
!
!	This module generates a window mapping the desired VBN from
!	the supplied file header. This module is a direct crib from the
!	FCP module WITURN. When we get conditional compilation with different
!	parameter files worked out, they should really be the same source.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	CREATION DATE:  7-Dec-1976  14:38
!
! MODIFIED BY:
!
!	V03-001	HH0041		Hai Huang		24-Jul-1984
!		Remove REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.B32'.
!
!	V02-000	ACG0167		Andrew C. Goldstein,	18-Apr-1980  13:39
!		Previous revision history moved to MOUNT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:MOUDEF.B32';

GLOBAL ROUTINE TURN_WINDOW1 (WINDOW, HEADER, DESIRED_VBN, START_VBN) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine scans the map area of the supplied file header
!	and builds retrieval pointers in the window until
!	(1) the entire header has been scanned, or
!	(2) the first retrieval pointer in the window maps the desired VBN
!
! CALLING SEQUENCE:
!	TURN_WINDOW (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: address of window block
!	ARG2: address of file header
!	ARG3: desired VBN
!	ARG4: starting VBN of file header
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	updated window
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	WINDOW		: REF BBLOCK,	! pointer to window
	HEADER		: REF BBLOCK;	! pointer to file header

LOCAL
	VBN,				! VBN in scanning window
	COUNT,				! retrieval pointer count
	COUNTER,			! loop counter
	LBN,				! retrieval pointer start LBN
	W_POINTER	: REF BBLOCK,	! pointer to scan window
	M_POINTER	: REF BBLOCK,	! pointer to scan header map area
	MAP_AREA	: REF BBLOCK;	! pointer to start of header map area

MACRO
	WINDOW_MAP	= (.WINDOW+WCB$C_MAP)%;	!start of window map area

! Scan the window looking for the
! starting VBN of the header. If it is contained within the window, truncate
! the window so that it maps exactly up to the start of the header.
! If the starting VBN is not contained in the window, the entire window must be
! discarded. However, if the desired VBN precedes the header start VBN, we
! do nothing since the window is already best effort.
!

W_POINTER = WINDOW_MAP;				! point to first retrieval pointer
VBN = .WINDOW[WCB$L_STVBN];			! get starting VBN of window

IF
    BEGIN
    INCR J FROM 1 TO .WINDOW[WCB$W_NMAP]
    DO
	IF .VBN + .W_POINTER[WCB$W_COUNT] LSSU .START_VBN
	THEN
	    BEGIN
	    VBN = .VBN + .W_POINTER[WCB$W_COUNT];	! accumulate running VBN
	    W_POINTER = .W_POINTER + 6;		! and move to next pointer
	    END
	ELSE					! VBN is in or precedes current pointer
	    BEGIN
	    IF .VBN LSSU .START_VBN
	    THEN
		BEGIN
		W_POINTER[WCB$W_COUNT] = .START_VBN - .VBN;
		W_POINTER = .W_POINTER + 6;	! bump the pointer
		WINDOW[WCB$W_NMAP] = .J;	! truncate the window
		EXITLOOP 0;
		END
	    ELSE
		EXITLOOP -1;			! precedes the window
	    END
    END

THEN						! header VBN is not in window
    BEGIN
    IF .DESIRED_VBN LSSU .START_VBN
    AND .START_VBN GTRU 1
    THEN
	RETURN 1				! leave it alone
    ELSE
	BEGIN
	WINDOW[WCB$W_NMAP] = 0;			! flush the window
	WINDOW[WCB$L_STVBN] = .START_VBN;
	W_POINTER = WINDOW_MAP;			! point to first pointer
	END;
    END;

! The window is now suitably initialized. Set up necessary pointers.
! Now scan the map area, extracting retrieval pointers.
!

MAP_AREA = .HEADER + .HEADER[FH1$B_MPOFFSET]*2;	! point to map area
M_POINTER = .MAP_AREA + FM1$C_POINTERS;		! point to start of pointers

DECR COUNTER FROM .MAP_AREA[FM1$B_INUSE]/2 TO 1 DO
    BEGIN

    COUNT = .M_POINTER[FM1$B_COUNT] + 1;		! get retrieval pointer count
    LBN = .M_POINTER[FM1$W_LOWLBN];			! low order LBN
    LBN<16,8> = .M_POINTER[FM1$B_HIGHLBN];		! and high order LBN
    M_POINTER = .M_POINTER + 4;			! update map pointer

! See if this set of blocks is contiguous with the preceding (in the
! window). If so, merge them.
!

    IF .WINDOW[WCB$W_NMAP] NEQ 0	! only if non-empty window
	AND .W_POINTER[WCB$W_PREVCOUNT] + .W_POINTER[WCB$L_PREVLBN] EQL .LBN
	AND .W_POINTER[WCB$W_PREVCOUNT] + .COUNT LSSU 65536
    THEN W_POINTER[WCB$W_PREVCOUNT] = .W_POINTER[WCB$W_PREVCOUNT] + .COUNT

! Build a new retrieval pointer. If the window is full, shuffle the
! entries up by one. If this would cause the pointer mapping the 
! desired VBN to fall off the top, we are done.
!

    ELSE
	BEGIN
	IF (.WINDOW[WCB$W_NMAP]+1)*6 + WCB$C_LENGTH
	    GTRU .WINDOW[WCB$W_SIZE]
	THEN
	    BEGIN
	    IF .WINDOW[WCB$L_STVBN] + .WINDOW[WCB$W_P1_COUNT] GTRU .DESIRED_VBN
	    THEN EXITLOOP;

	    WINDOW[WCB$W_NMAP] = .WINDOW[WCB$W_NMAP] - 1;
	    WINDOW[WCB$L_STVBN] = .WINDOW[WCB$L_STVBN] + .WINDOW[WCB$W_P1_COUNT];
	    CH$MOVE (.WINDOW[WCB$W_NMAP]*6, WINDOW_MAP+6, WINDOW_MAP);
	    W_POINTER = .W_POINTER - 6;
	    END;

! Finally build the pointer and count it.
!

	W_POINTER[WCB$W_COUNT] = .COUNT;
	W_POINTER[WCB$L_LBN] = .LBN;
	W_POINTER = .W_POINTER + 6;
	WINDOW[WCB$W_NMAP] = .WINDOW[WCB$W_NMAP] + 1;
	END;

    END;					! end of header scan loop

RETURN 1;

END;						! end of routine TURN_WINDOW1
END
ELUDOM
