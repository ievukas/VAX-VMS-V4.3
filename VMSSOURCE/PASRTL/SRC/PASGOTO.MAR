	.TITLE	PAS$GOTO - Perform up-level GOTO
	.IDENT	/2-001/			; File: PASGOTO.MAR Edit: SBL2001

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: VAX-11 PASCAL Language Support
;
; ABSTRACT:
;
;	This module contains PAS$GOTO, which performs an up-level GOTO
;	for Pascal routines.
;
; ENVIRONMENT: User mode, AST Reentrant
;
; AUTHOR: Steven B. Lionel, CREATION DATE: 28-Jan-1983
;         Special thanks to Bevin Brett.
;
; MODIFIED BY:
;
; 2-001	- Complete rewrite of orginal BLISS version which did not work
;	  when called from condition handlers.  SBL 28-Jan-1983
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;

	$CHFDEF			; Condition Handling symbols
	$SSDEF			; SS$_ symbols

;
; EXTERNAL DECLARATIONS:
;

	.DSABL	GBL		; Force all external symbols to be declared
	.EXTRN	LIB$STOP	; Signal non-continuable exception
	.EXTRN	PAS$_GOTO	; Up-level GOTO
	.EXTRN	PAS$_GOTOFAILED	; Up-level GOTO failed
	.EXTRN	SYS$UNWIND	; $UNWIND system service

;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _PAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	PAS$GOTO - Perform up-level GOTO
;++
; FUNCTIONAL DESCRIPTION:
;
;	This procedure is called by PASCAL compiled code to perform
;	an up-level GOTO.  Functionally, it performs a $UNWIND to
;	the specified frame and PC.  The actual implementation is
;	described in detail below.
;
; CALLING SEQUENCE:
;
;	CALL PAS$GOTO (dest_FP.ra.v, dest_PC.jzi.r)
;
; FORMAL PARAMETERS:
;
	dest_FP	= 4		; The FP of the destination frame
				; If the signal is PAS$_GOTO, it has two
				; "FAO arguments", the destination FP and PC.

	dest_PC	= 8		; The PC of the destination instruction

;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION STATUS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	Functionally performs a $UNWIND to the specified FP and PC.
;
;--

;+
; Implementation notes:
;
;	An "up-level" GOTO is a GOTO where the destination is not in the
;	same stack frame (procedure incarnation) as the origination.  Ideally,
;	what one wants to do is unwind the stack frames back to the 
;	desired frame, and then begin executing at the destination labelled
;	instruction.  The unwind is necessary to restore saved registers;
;	one can't simply JMP to the instruction since the stack frame and
;	register contents would be inconsistent.
;
;	There is, of course, the system service $UNWIND that seems to do
;	exactly what we want.  You specify to $UNWIND the number of frames
;	to remove and the desired PC, and off it goes.  The first problem
;	with this is that you can only unwind while in a condition handler
;	(or in a procedure called from a condition handler).  This is not
;	much of a problem, one can simply signal a special exception and
;	intercept it in a handler, which then does the $UNWIND.  The
;	second problem is that, while $UNWIND wants a number of frames to
;	remove, we don't know how many frames distant we are from the
;	destination; we do know the FP value of the destination frame.  So,
;	the initial implementation searched through the stack frame chain,
;	counting until it found the desired FP.  It then signalled PAS$_GOTO
;	with arguments of the count and PC, and its own handler did the
;	unwind.  This worked well in normal cases, but failed spectacularly
;	if it was called from a condition handler.
;
;	The problem was simply that when $UNWIND counts stack frames, and
;	it comes across a condition handler, it "skips" to the establisher's
;	frame without counting intervening frames.  This is correct according
;	to the handler search algorithm.  Because PAS$GOTO wasn't taking this
;	into account, the number of frames to unwind that it specified was
;	wrong.
;
;	It is difficult, though possible, to have PAS$GOTO count frames in the
;	same manner as $UNWIND.  If this is done, one finds another problem;
;	this time due to a design flaw in $UNWIND.  Basically, if one
;	specifies a non-zero number of frames to unwind, with the intention
;	of unwinding to an establisher's frame, $UNWIND removes one stack frame
;	too many.  If you decrease the count by one, you unwind only to
;	the handler.  Thus, it is impossible to unwind exactly to an establisher
;	frame if that signal is not the current one.  Since being able to
;	GOTO elsewhere in the establisher's frame is a desireable feature, this
;	is unacceptable.
;
;	An intermediate implementation was tried which simply establishes
;	a handler in the destination frame, signals PAS$_GOTO, and lets
;	that handler unwind to its establisher.  This doesn't work when there
;	is already a signal in progress since the special GOTO handler is
;	skipped.
;
;	The successful solution is somewhat complicated, and is actually
;	two solutions in one.  There are two interesting cases of an
;	up-level GOTO:
;		1. There is no signal currently in progress
;		2. There are one or more signals currently in progress
;
;	The first case can be solved with either the original method or
;	with the "intermediate implementation" where a special handler
;	is temporarily established in the destination frame.  The latter
;	is what is used; PAS$HANDLER, if already established, serves as
;	that special handler, or PAS$$UNWIND_GOTO is established if there
;	is no handler.  We assume that no handler other than PAS$HANDLER
;	is established in the destination frame.  This is reasonable, because
;	the only way it could get there is by the user calling LIB$ESTABLISH,
;	and if this was done, the user got a compile-time warning from
;	VAX-11 PASCAL saying that LIB$ESTABLISH was incompatible with
;	VAX-11 PASCAL.
;
;	Once a handler is established in the destination frame, PAS$_GOTO
;	is signalled, with two FAO parameters of the destination FP and
;	PC.  Note that the stack-frame search of the original implementation
;	is no longer present.  If no other exception is in progress, this
;	signal will be caught by the handler in the destination frame, which
;	will then unwind zero frames to the establisher at the destination PC.
;
;	The more interesting case is when there is an exception in progress.
;	PAS$HANDLER, which was established when the user used the ESTABLISH
;	builtin, and which has already been called for the current signal,
;	has itself established a handler PAS$$GOTO_HANDLER.  This handler
;	causes an unwind back to the frame of its establisher (PAS$HANDLER),
;	but at PC UNWIND_TO_ESTABLISHER.  This effectively removes the last
;	exception (PAS$_GOTO).  Before unwinding, the destination FP and PC
;	are loaded into the saved R0 and R1 so that they can be communicated
;	to UNWIND_TO_ESTABLISHER.
;
;	UNWIND_TO_ESTABLISHER then unwinds zero frames to the establisher, but
;	at PC JUMP_TO_DEST.  Again, R0 and R1 have the saved FP and PC.
;	JUMP_TO_DEST looks to see if the destination FP is the same as its
;	current FP, which it might not be.  If it is, then it simply jumps
;	to the destination PC.  Otherwise, it calls PAS$GOTO again with
;	the original arguments.  Eventually, all signals between the source
;	and the destination of the GOTO will be unwound.
;
;	The following problems with $UNWIND are known:
;	    1.	You can't unwind more than one exception reliably.
;	    2.  Unwinding zero frames leaves the signal and mechanism arglists,
;		along with some other stuff, on the stack.  This doesn't
;		bother us as PASCAL always readjusts the stack at GOTO
;		destinations.
;	    3.  Unwinding zero frames doesn't restore the saved R0 and R1
;		from the mchargs list.  This is solved by manually loading
;		the registers before doing the RET from the handler.
;
;-

	.ENTRY	PAS$GOTO, ^M<>

;+
; Look in the destination frame to see if there is a handler.  If so,
; we assume that it is PAS$HANDLER and do nothing.  If not, we establish
; PAS$$UNWIND_GOTO there.  PAS$HANDLER itself establishes PAS$$GOTO_HANDLER.
; One of these two handlers will catch the signal of PAS$_GOTO we will make.
;-

	MOVQ	dest_FP(AP), -(SP)	; Push destination FP and PC
	TSTL	@(SP)			; Does destination frame have a handler?
	BNEQ	10$			; Skip if it does
	MOVAB	W^PAS$$UNWIND_GOTO, @(SP) ; Establish PAS$$UNWIND_GOTO

;+
; Now signal PAS$_GOTO with FAO arguments of the destination FP and PC.  This
; will be intercepted by PAS$$GOTO_HANDLER or PAS$$UNWIND_GOTO
; to actually do the unwinds.
;-

10$:	PUSHL	#2			; Two arguments already pushed
	PUSHL	#PAS$_GOTO		; "Up-level GOTO"
	CALLS	#4, G^LIB$STOP		; Signal it
					; Can never return from LIB$STOP


	.SBTTL	PAS$$GOTO_HANDLER - Established by PAS$HANDLER
;++
; FUNCTIONAL DESCRIPTION:
;
;	This is a condition handler established by PAS$HANDLER which
;	intercepts PAS$_GOTO exceptions and unwinds back to its
;	establisher's frame (PAS$HANDLER) but at PC UNWIND_TO_ESTABLISHER.
;
; CALLING SEQUENCE:
;
;	ret-status = PAS$$GOTO_HANDLER (sigargs.rlu.r, mchargs.rlu.r)
;
; FORMAL PARAMETERS:
;

	sigargs	= 4		; The signal arguments list
				; If the signal is PAS$_GOTO, it has two
				; "FAO arguments", the destination FP and PC.

	mchargs	= 8		; The mechanism arguments list

;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION STATUS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	Unwinds back to its establisher (PAS$HANDLER), but at PC
;	UNWIND_TO_ESTABLISHER.
;
;--

	.ENTRY	PAS$$GOTO_HANDLER, ^M<>
	MOVL	sigargs(AP), R1			; Get signal arguments list
	CMPL	CHF$L_SIG_NAME(R1), #PAS$_GOTO	; Is this PAS$_GOTO?
	BEQL	10$				; If so, keep going
	MOVZWL	#SS$_RESIGNAL, R0		; Resignal this exception
	RET					; Return to CHF

;+
; Unwind the stack frames back to our establisher, PAS$$HANDLER.  Use the
; saved R0 and R1 to communicate the destination FP and PC.
;-

10$:	MOVL	mchargs(AP), R0			; Get mechanism arguments list
	MOVQ	12(R1), CHF$L_MCH_SAVR0(R0)	; Store destination FP and PC
						; in saved R0 and R1
	PUSHAB	B^UNWIND_TO_ESTABLISHER		; Unwind to UNWIND_TO_ESTABLISHER
	PUSHAB	CHF$L_MCH_DEPTH(R0)		; In establisher's frame
	CALLS	#2, G^SYS$UNWIND		; Do the unwind
	BLBC	R0, UNWIND_FAILED		; Skip if unwind unsuccessful
	RET					; Return to UNWIND service

;+
; The $UNWIND was unsuccessful.  Signal PAS$_GOTOFAILED.
;-

UNWIND_FAILED:
	PUSHL	R0				; Unwind failure status
	CLRL	-(SP)				; Zero FAO arguments
	PUSHL	#PAS$_GOTOFAILED
	CALLS	#3, G^LIB$STOP			; Signal PAS$_GOTOFAILED

;+
; UNWIND_TO_ESTABLISHER - This section of code is unwound to by
; PAS$$GOTO_HANDLER.  When we get here, the current frame is that of
; PAS$HANDLER, R0 contains the destination frame and R1 the destination PC.
; In other words, it is as if we had unwound back to PAS$HANDLER, but at
; a different PC.  It is assumed that AP has not been modified.
;
; An unwind is done of "depth" frames back to the establisher of PAS$HANDLER.
; Although the frame will be that of the establisher, the PC will be 
; our own JUMP_TO_DEST, below.
;-

UNWIND_TO_ESTABLISHER:
	MOVQ	R0, -(SP)			; Push dest FP and PC
	MOVL	mchargs(AP), R0			; Get mechanism args list
	MOVQ	(SP), CHF$L_MCH_SAVR0(R0)	; Save dest FP and PC in R0-R1
	PUSHAB	B^JUMP_TO_DEST			; Unwind to JUMP_TO_DEST
	PUSHAB	CHF$L_MCH_DEPTH(R0)		; Unwind to establisher
	CALLS	#2, G^SYS$UNWIND		; Do the unwind
	MOVQ	(SP), R0			; Because we might be unwinding
						; zero frames, and $UNWIND
						; currently doesn't restore
						; R0 and R1 from the mechanism
						; arguments list, restore them
						; here.
	RET					; Return to JUMP_TO_DEST

;+
; JUMP_TO_DEST - We get here by means of the $UNWIND in UNWIND_TO_ESTABLISHER.
; The current frame is that of the establisher of the handler that found this
; exception, but that is not necessarily our destination.  R0 contains the
; destination FP and R1 the destination PC.  If this is the correct frame,
; just JMP to the destination PC.  Note that there may be garbage on the
; stack left by the CHF - we depend on the PASCAL compiled code to readjust
; SP at the destination of GOTOs.
;
; If this is not the correct FP, simply re-call PAS$GOTO.  Eventually we'll
; get to the right frame.
;-

JUMP_TO_DEST:
	CMPL	R0, FP		; Is this the destination frame?
	BNEQ	10$		; Skip if not
	JMP	(R1)		; It is - jump to the destination PC
10$:	MOVQ	R0, -(SP)	; Iteratively call PAS$GOTO
	CALLS	#2, G^PAS$GOTO

	.SBTTL	PAS$$UNWIND_GOTO - Unwind to destination FP and PC
;++
; FUNCTIONAL DESCRIPTION:
;
;	This is a condition handler established by PAS$GOTO in the
;	destination frame of an up-level GOTO.  It intercepts PAS$_GOTO
;	exceptions and initiates an unwind back to the destination
;	frame and PC.  This routine is also called by PAS$HANDLER if
;	it detects PAS$_GOTO.
;
; CALLING SEQUENCE:
;
;	ret-status = PAS$$UNWIND_GOTO (sigargs.rlu.r, mchargs.rlu.r)
;
; FORMAL PARAMETERS:
;

	sigargs	= 4		; The signal arguments list
				; If the signal is PAS$_GOTO, it has two
				; "FAO arguments", the destination FP and PC.

	mchargs	= 8		; The mechanism arguments list

;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; COMPLETION STATUS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	Unwinds back to the destination frame and PC.
;
;--

	.ENTRY	PAS$$UNWIND_GOTO, ^M<R2>
	MOVQ	sigargs(AP), R0			; Get signal and mechanism lists
	CMPL	CHF$L_SIG_NAME(R0), #PAS$_GOTO	; Is this PAS$_GOTO?
	BNEQ	10$				; If not, resignal
	CMPL	12(R0), CHF$L_MCH_FRAME(R1)	; Is establisher FP the dest FP?
	BEQL	20$				; Skip if so
10$:	MOVZWL	#SS$_RESIGNAL, R0		; Resignal this exception
	RET					; Return to CHF

;+
; If the handler established in our "establisher's" frame is PAS$$UNWIND_GOTO,
; (which it wouldn't be if we were called from PAS$HANDLER), remove our
; address as that frame's handler.
;-

20$:	MOVAB	B^PAS$$UNWIND_GOTO, R2		; Get address of our entry mask
	CMPL	R2, @CHF$L_MCH_FRAME(R1)	; Is it the same as establishers
						; handler?
	BNEQ	30$				; Skip if not
	CLRL	@CHF$L_MCH_FRAME(R1)		; Cancel the handler

;+
; Unwind the stack frames back to our establisher, the destination frame,
; and to the destination PC.
;-

30$:	PUSHL	16(R0)				; Push destination PC
	PUSHAB	CHF$L_MCH_DEPTH(R1)		; Unwind to establisher
	CALLS	#2, G^SYS$UNWIND		; Do the unwind
	BLBS	R0, 40$				; Return if successful
	BRW	UNWIND_FAILED			; Signal failure of UNWIND
40$:	RET					; Return to UNWIND service

	.END
