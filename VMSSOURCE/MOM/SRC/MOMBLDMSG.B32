
%TITLE 'MOM Network message builder module'
MODULE MOMBLDMSG (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Maintenance Operations Module (MOM)
!
! ABSTRACT:
!	This module contains routines to build NICE response messages
!	and miscellaneous routines for debugging.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Kathy Perko
!
! CREATION DATE:  9-Jan-1982
!
! MODIFIED BY:
!	V03-001	MKP0001		Kathy Perko		29-Jan-1984
!		Fix number of bytes returned to NCP for error messages.
!
!--
 

%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    mom$bld_reply,
    mom$getmsg	: NOVALUE,
    mom$error		: NOVALUE,
    mom$debug_txt	: NOVALUE,
    mom$debug_msg	: NOVALUE,
    mom$debug_qio	: NOVALUE,
    mom$dump_qio_bufs   : NOVALUE,
    mom$trnlognum;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:MOMLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EXTERNAL REFERENCES:
!

$mom_externals;
 
EXTERNAL
    mom$gq_proprvmsk : BBLOCK [8];	! Process privilege mask

EXTERNAL ROUTINE
    LIB$CVT_HTB		: ADDRESSING_MODE (GENERAL),
    LIB$PUT_OUTPUT	: ADDRESSING_MODE (GENERAL);


%SBTTL 'mom$bld_reply       Build NICE response message'
GLOBAL ROUTINE mom$bld_reply (msgblk, msglen) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds a NICE response message based on the
!	message segment block.
!
! FORMAL PARAMETERS:
!
!	MSGBLK		Address of the message segment block (MSB).
!	MSGLEN 		Address of longword to return the total size of
!			the message that was built.
!
! IMPLICIT OUTPUTS:
!
!	MOM$AB_NICE_XMIT_BUF contains the NICE reply message built as described in
!	the message segment block.
!
! SIDE EFFECTS:
!
!	The NICE response message is in MOM$AB_NICE_XMIT_BUF.
!
!--
 
BEGIN
 
MAP
    msgblk : REF BBLOCK;
 
LOCAL
    bufcnt  : SIGNED,				! Message length counter
    len     : BYTE,				! Temporary string length
    in_ptr,					! Input text pointer
    out_ptr;					! Output message pointer
!
! The MSB longword mask determines the message fields that are
! described in the following longwords.  The status code is always
! required.
!
bufcnt = 0;					! Initialize buffer count
out_ptr = mom$ab_nice_xmit_buf;			! Get output buffer pointer
CH$WCHAR_A (.msgblk [msb$b_code], out_ptr);	! Add return code
bufcnt = .bufcnt + 1;				! Increment message count
!
! Check for detail field.
!
IF .msgblk [msb$v_det_fld] THEN
    BEGIN
    !
    ! Move the detail word into the message buffer.
    !
    (.out_ptr)<0,16> = .msgblk [msb$w_detail];
    out_ptr = .out_ptr + 2;
    END
ELSE
    BEGIN
    !
    ! No detail field is specified so add a minus one to the message.
    !
    (.out_ptr)<0,16> = -1;
    out_ptr = .out_ptr + 2;
    END;
 
bufcnt = .bufcnt + 2;			! Add detail length to count
!
! Check for message field if there is room in the buffer.
!
IF .bufcnt LSS mom$k_nice_buf_len THEN
    IF .msgblk [msb$v_msg_fld] THEN
	BEGIN
	mom$getmsg (.msgblk [msb$l_text],
		       len,
		       in_ptr);		! Get system message text
	!
	! If message will not fit in the buffer move the maximum.
	!
	IF (.bufcnt + .len) GTR mom$k_nice_buf_len THEN
	    len = mom$k_nice_buf_len - .bufcnt - 1;
	!
	! Move the count and the entire message into the buffer and the
	! length to the total.
	!
	CH$WCHAR_A (.len, out_ptr);
	out_ptr = CH$MOVE (.len,
			   .in_ptr,
			   .out_ptr);
	bufcnt = .bufcnt + .len + 1;
	!
	! If a secondary status message is requested, then append a CR/LF
	! and the second line of message text to the ASCIC text string in
	! the NICE response.
	!
	IF .msgblk [msb$v_msg2_fld] THEN	! If secondary message supplied,
	    BEGIN
	    local ascic_count;			! Pointer to count byte of string
	    ascic_count = .out_ptr - .len - 1;
	    mom$getmsg(.msgblk [msb$l_text2], len, in_ptr);
	    out_ptr = CH$COPY(2, UPLIT BYTE(13, 10),
			    .len, .in_ptr,
			    0, mom$k_nice_buf_len - .bufcnt - 1, .out_ptr);
	    bufcnt = .bufcnt + .len + 2;	! Increment buffer space used
	    CH$WCHAR(CH$RCHAR(.ascic_count)+.len+2,
			.ascic_count);		! Increment ASCIC string length
	    END;
	END
    ELSE
	BEGIN
	!
	! No message field is present so insert zero length.
	!
	CH$WCHAR_A (0, out_ptr);
	bufcnt = .bufcnt + 1;
	END;
    !
    ! If there is room in the buffer check for the data field.
    !
    IF .bufcnt LSS mom$k_nice_buf_len THEN
	IF .msgblk [msb$v_data_fld]
	AND (.msgblk [msb$a_data] NEQA 0) THEN
	    BEGIN
	    !
	    ! Data field is ASCID string.
	    !
	    BIND
		datadsc = msgblk [msb$a_data] : REF VECTOR;
 
	    in_ptr = .datadsc [1]; ! Get data pointer
	    len = .datadsc [0];	   ! Get length
	    !
	    ! If message will not fit in the buffer move the maximum.
	    !
	    IF (.bufcnt + .len) LEQ mom$k_nice_buf_len THEN
		BEGIN
		!
		! Move the data string into the buffer and add length to
		! total.
		!
		out_ptr = CH$MOVE (.len,
				   .in_ptr,
				   .out_ptr);
		bufcnt = .bufcnt + .len;
		END;
	    END;
 
.msglen = .bufcnt;				! Return total message size

RETURN success					! Return success

END;					! End of mom$bld_reply
 

%SBTTL 'mom$getmsg      Get message text from message file'
GLOBAL ROUTINE mom$getmsg (cod, len, ptr) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs a $GETMSG system service to retrieve the
!	message text for the specified status code from either the system
!	message file, or MOM's message file.
!
! FORMAL PARAMETERS:
!
!	COD	System error code.
!	LEN	Length of standard message text.
!	PTR	Address of text.
!
! IMPLICIT OUTPUTS:
!
!	The message text is contained in MSGBUF.  The information
!	in MSGBUF must be copied before a subsequent call to this routine.
!
!--
 
BEGIN

OWN
    msgbuf : BBLOCK [255];		! Buffer for message text
					!  (Must be OWN because the text
					!   has to stay around after the
					!   return from this routine.)

LOCAL
    bufdsc : VECTOR [2],		! Message buffer descriptor
    reslen : WORD;			! Length of text

.len = 0;

bufdsc [0] = 255;	! Initialize buffer descriptor
bufdsc [1] = msgbuf;
!
! Retrieve the message text for the specified error code.
!
$GETMSG (MSGID  = .cod,
	MSGLEN = reslen,
	BUFADR = bufdsc);
!
! Set up return values.
!
.len = .reslen;
.ptr = msgbuf;

END;					! End of MOM$GETMSG

%SBTTL 'mom$error       Signal an error message with detail field'
GLOBAL ROUTINE mom$error (err, det) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!	This routine moves an error or status code into the output buffer
!	followed by the detail word.
!
! FORMAL PARAMETERS:
!	ERR 		NICE status code to be transmitted (NMA$C_STS_xxx).
!	DET		NICE error detail code.
!
! SIDE EFFECTS:
!
!	An error message is signalled to be sent by the condition handler.
!
!--
 
BEGIN

BUILTIN
    AP;

LOCAL
    count;
!
! Move the error code and the detail code into the buffer.
! 
(mom$ab_nice_xmit_buf)<0,8> = .err;
IF ..AP GTR 1 THEN
    BEGIN
    (mom$ab_nice_xmit_buf + 1)<0,16> = .det;
    count = 3;
    END
ELSE
    count = 1;
!
! Signal the message.
!
$signal_msg (mom$ab_nice_xmit_buf, .count);

END;				! End of mom$error

%SBTTL 'mom$debug_txt  Print text message'
GLOBAL ROUTINE mom$debug_txt (bitnum, txtdsc) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine prints the specified message text to SYS$OUTPUT if
!	the appropriate logging flags are set.
!
! FORMAL PARAMETERS:
!
!	BITNUM		Bit number of the logging flag.
!	TXTDSC		Descriptor of ASCII text string.
!
! IMPLICIT INPUTS:
!
!	MOM$GL_LOGMASK	Values of current logging flags.
!
!--
 
BEGIN

MAP
    txtdsc : REF VECTOR;

LITERAL
    faosize = 132;

LOCAL
    faoprm,
    outdsc : VECTOR [2],
    faobuf : BBLOCK [faosize];

!
! If the correct logging flag is set then output the text string.
!
IF .mom$gl_logmask [.bitnum]
THEN
    BEGIN
    faoprm  = .txtdsc;
    outdsc [0] = faosize;
    outdsc [1] = faobuf;
    $FAOL (CTRSTR = $ASCID ('*** !AS'),
	   OUTLEN = outdsc [0],
	   OUTBUF = outdsc,
	   PRMLST = faoprm);
    LIB$PUT_OUTPUT (outdsc);
    END;

END;				! End of mom$debug_txt

%SBTTL 'mom$debug_msg       Print binary message'
GLOBAL ROUTINE mom$debug_msg (bitnum, buffer_adr,
				buffer_len, txtdsc) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dumps binary messages to SYS$OUTPUT.
!
! FORMAL PARAMETERS:
!
!	BITNUM		Number of the logging flag bit.
!	BUFFER_ADR	Address of the message buffer.
!	BUFFER_LEN	Length of the message in bytes.
!	TXTDSC		Descriptor of text string.
!
! IMPLICIT INPUTS:
!
!	MOM$GL_LOGMASK	Values of current logging flags.
!
!--
 
BEGIN
 
MAP
    txtdsc : REF VECTOR;

LITERAL
    faosiz = 256,    			! The print buffer.
    faolst_size = 10,			! Size of FAO parameter vector
    dump_buffer_size = 2000;

LOCAL
    faobuf  : VECTOR [faosiz, BYTE],! Print buffer
    faolst  : VECTOR [faolst_size],	! List of args to $FAOL
    outdsc  : VECTOR [2],		! Descriptor of the output line
    bytes,				! Counter for bytes written
    ptr:	REF BBLOCK,
    i,					! index
    buffer_end,				! Address of end of message buffer.
    dump_buffer : 			! Buffer from which the data is dumped.
	BBLOCK [dump_buffer_size];

!
! If the correct logging flag is not set then just return.
!
IF NOT .mom$gl_logmask [.bitnum] THEN
    RETURN;
!
! If it's a MOP message, only log it if logging is on for that particular type
! of MOP message.
!
IF .bitnum EQL dbg$c_mopio THEN
    BEGIN
    SELECTONEU .(.buffer_adr)<0,8> OF
	SET
	[mop$_fct_mld]:  IF NOT .mom$gl_logmask [dbg$c_mop_mld] THEN RETURN;
	[mop$_fct_rml]:  IF NOT .mom$gl_logmask [dbg$c_mop_rml] THEN RETURN;
	[mop$_fct_rmd]:  IF NOT .mom$gl_logmask [dbg$c_mop_rmd] THEN RETURN;
	[mop$_fct_mdd]:  IF NOT .mom$gl_logmask [dbg$c_mop_mdd] THEN RETURN;
	TES;
    END;
!
! If the string length is nonzero then print it.
!
IF .txtdsc NEQA 0 THEN
    BEGIN

    outdsc [0] = faosiz;
    outdsc [1] = faobuf;

    faolst [0] = .txtdsc [0];
    faolst [1] = .txtdsc [1];
    faolst [2] = .buffer_len;

    $FAOL (CTRSTR = $ASCID (' !AD  (length = !UL bytes)'),
	       OUTLEN = outdsc [0],
	       OUTBUF = outdsc,
	       PRMLST = faolst);

    LIB$PUT_OUTPUT (outdsc);

    END;
!
! Dumping permanent data base records requires BYPASS privilege because the
! passwords are displayed.
!
IF (.bitnum EQL dbg$c_fileio)
    AND (NOT .mom$gq_proprvmsk [prv$v_bypass]) THEN
    RETURN;

!
! Move the data to be dumped into the dump buffer, filling it with zeros.
! This ensures that any information past the end of the buffer is printed
! as zeros.
!
CH$COPY (.buffer_len, .buffer_adr, 0, dump_buffer_size, dump_buffer);
!
! Dump the buffer contents in hex and ASCII.
!
outdsc [1] = faobuf;
ptr = dump_buffer;
buffer_end = dump_buffer + .buffer_len;
WHILE .ptr LSS .buffer_end DO
    BEGIN
    outdsc [0] = faosiz;
    faolst [0] = .ptr [12,0,32,0];
    faolst [1] = .ptr [8,0,32,0];
    faolst [2] = .ptr [4,0,32,0];
    faolst [3] = .ptr [0,0,32,0];
    faolst [4] = 16;
    faolst [5] = .ptr;
    $FAOL (CTRSTR = $ASCID ('!XL !XL !XL !XL !_!AF'),
	   OUTLEN = outdsc [0],
	   OUTBUF = outdsc,
	   PRMLST = faolst);
    LIB$PUT_OUTPUT (outdsc);
    ptr = .ptr + 16;
    END;
!
! Add a new line.
!
LIB$PUT_OUTPUT ($ASCID (''));

END;					! End of mom$debug_msg

%SBTTL 'mom$debug_qio      Print NETACP QIO information'
GLOBAL ROUTINE mom$debug_qio (bitnum, qios, iosb, p1dsc,
				p2dsc, p3adr, p4dsc, txtdsc) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dumps NETACP QIO information to SYS$OUTPUT.
!
! FORMAL PARAMETERS:
!
!	BITNUM		Contains the number of the logging flag bit.
!	QIOS		Status of QIO (R0).
!	IOSB		Address of I/O status block.
!	P1DSC		Address of P1 descriptor.
!	P2DSC		Address of P2 descriptor.
!	P3ADR		Address of P3 word.
!	P4DSC		Address of P4 descriptor.
!	TXTDSC		Descriptor of text string.
!
! IMPLICIT INPUTS:
!
!	MOM$GL_LOGMASK	Values of current logging flags.
!
!--
 
BEGIN
 
MAP
	iosb   : REF $IOSB,
	p1dsc : REF VECTOR,
	p2dsc  : REF VECTOR,
	p4dsc  : REF VECTOR;

BIND
	faostr = $ASCID ('R0=!XL IOSB=!XL/!XL P1=!XW/!XL!/',
			 'P2=!XW/!XL P3=!XL (!XW) P4=!XW/!XL');

LITERAL
	faosiz = 256;			! The print buffer

LOCAL
	faobuf : VECTOR [faosiz, BYTE],	! Print buffer
	faolst : VECTOR [20],		! List of args to $FAOL
	outdsc : VECTOR [2];		! Descriptor of the output line
!
! If the correct logging flag is not enabled then just return.
!
IF NOT .mom$gl_logmask [.bitnum]
THEN
	RETURN;

!
! Print header message at beginning of QIO information.
!
IF .txtdsc NEQ 0 THEN
    mom$debug_txt (.bitnum, .txtdsc);

outdsc [0] = faosiz;
outdsc [1] = faobuf;
!
! Log the QIO completion status, IOSB, and the values of the QIO
! parameters.
!
faolst [0] = .qios;
IF .iosb NEQ 0 THEN
    BEGIN
    faolst [1] = .iosb [0,0,32,0];
    faolst [2] = .iosb [4,0,32,0];
    END
ELSE
    BEGIN
    faolst [1] = 0;
    faolst [2] = 0;
    END;    

IF .p1dsc NEQA 0 THEN
    BEGIN
    faolst [3] = .p1dsc [0];
    faolst [4] = .p1dsc [1];
    END
ELSE
    BEGIN
    faolst [3] = 0;
    faolst [4] = 0;
    END;

IF .p2dsc NEQA 0
THEN
	BEGIN
	faolst [5] = .p2dsc [0];
	faolst [6] = .p2dsc [1];
	END
ELSE
	BEGIN
	faolst [5] = 0;
	faolst [6] = 0;
	END;

faolst [7] = .p3adr;
IF .p3adr NEQA 0
THEN
	faolst [8] = .(.p3adr)<0,16>
ELSE
	faolst [8] = 0;

IF .p4dsc NEQA 0
THEN
	BEGIN
	faolst [9] = .p4dsc [0];
	faolst [10] = .p4dsc [1];
	END
ELSE
	BEGIN
	faolst [9] = 0;
	faolst [10] = 0;
	END;

$FAOL (CTRSTR = faostr,
	   OUTLEN = outdsc [0],
	   OUTBUF = outdsc,
	   PRMLST = faolst);
 
LIB$PUT_OUTPUT (outdsc);		! Write to SYS$OUTPUT

IF NOT .qios
THEN
	mom$getmsg (.qios, outdsc [0], outdsc [1])
ELSE
    IF .iosb NEQ 0
    THEN
	mom$getmsg (.iosb [ios$w_status],
			outdsc [0],
			outdsc [1]);

LIB$PUT_OUTPUT (outdsc);		! Write to SYS$OUTPUT

!
! Dump the contents of the NFB, the P2 (Key) buffer, and the P4 (Value) buffer.
!
mom$dump_qio_bufs (.bitnum, .p1dsc, .p2dsc, .p4dsc, .p3adr);

END;				! End of mom$debug_qio

%SBTTL 'mom$dump_qio_bufs  Dump QIO buffers'
GLOBAL ROUTINE mom$dump_qio_bufs (bitnum, p1dsc, p2dsc, p4dsc, p3adr) :
						NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dumps the contents of the buffers after a QIO to NETACP.
!	The buffers dumped are the NFB, the P2 (Key) buffer, and the
!	P4 (Value) buffer.
!
!
! FORMAL PARAMETERS:
!
!	BITNUM		Contains the number of the logging flag bit.
!	P1DSC		Address of P1 descriptor.
!	P2DSC		Address of P2 descriptor.
!	P4DSC		Address of P4 descriptor.
!	P3ADR		Address of P3 word.
!
!--

BEGIN

LOCAL
	p4len;		! Length of P4 buffer

MAP
	p1dsc	: REF VECTOR,
	p2dsc	: REF VECTOR,
	p4dsc	: REF VECTOR;

IF .p1dsc NEQ 0 THEN
    mom$debug_msg ( .bitnum,
		    .p1dsc [1],
		    .p1dsc [0],
		    $ASCID('P1 buffer contents'));

IF .p2dsc NEQ 0
THEN
    mom$debug_msg ( .bitnum,
		    .p2dsc [1],
		    .p2dsc [0],
		    $ASCID ('P2 buffer contents'));

IF .p4dsc NEQ 0
THEN
    BEGIN
    !
    ! Figure out how much of the P4 buffer to dump.  If it's a
    ! show, the byte count was returned in P3.  If it's a set,
    ! the byte count is in the P4 buffer descriptor.
    !
    IF .p3adr NEQ 0 THEN		
	IF .(.p3adr)<0,16> GTR mom$k_qio_buf_len THEN
	    p4len = 64
	ELSE
	    p4len = .(.p3adr)<0,16>
    ELSE
	p4len = .p4dsc [0];
    mom$debug_msg ( .bitnum,
		    .p4dsc [1],
		    .p4len,
		    $ASCID ('P4 buffer contents'));
    END;
END;	! of  mom$dump_qio_bufs

%SBTTL 'mom$trnlognum       Translate numeric logical name'
GLOBAL ROUTINE mom$trnlognum (lnmdsc, resadr) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine translates a logical name and returns the numeric
!	representation of the ASCII hexadecimal number that results.
!
! FORMAL PARAMETERS:
!
!	LNMDSC		Descriptor of the logical name to be translated.
!	RESADR		Address of longword to contain the numeric value.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns error code if the logical name has no translation or the
!	translation is invalid.  The result longword will be set to zero.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
 
BEGIN
 
MAP
    lnmdsc : vector;

OWN
    ascnum : VECTOR [8, BYTE];

LOCAL
    asclen : WORD,
    status;
 
status = $TRNLOG (LOGNAM = .lnmdsc,
		  RSLLEN = asclen,
		  RSLBUF = UPLIT (8, ascnum));

IF .status EQL ss$_normal THEN
    status = LIB$CVT_HTB (.asclen, ascnum, .resadr);

RETURN .status
 
END;					! End of mom$trnlognum



END						! End of module
 
ELUDOM
 
