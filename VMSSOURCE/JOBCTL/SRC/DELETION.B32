MODULE DELETION	(%TITLE	'Process deletion'
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Job controller.
!
! ABSTRACT:
!	This module contains the routines that handle process deletion.
!
! ENVIRONMENT:
!	VAX/VMS user and kernel mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 16-Feb-1982
!
! MODIFIED BY:
!
!	V03-004	MLJ0114		Martin L. Jack,	23-Jun-1983  4:57
!		Changes for job controller baselevel.
!
!	V03-003	MLJ0112		Martin L. Jack,	29-Apr-1983  2:55
!		Changes for job controller baselevel.
!
!	V03-002	MLJ0109		Martin L. Jack,	14-Apr-1983  12:46
!		Changes for job controller baselevel.
!
!	V03-001	MLJ0106		Martin L. Jack,	1-Mar-1983  13:48
!		Changes for extended PIDs.
!
!**

REQUIRE 'SRC$:JOBCTLDEF';


FORWARD ROUTINE
	PROCESS_DELETION:		NOVALUE;


EXTERNAL ROUTINE
	BATCH_DELETION:			NOVALUE,
	DELETE_GETQUI_CONTEXT:		NOVALUE,
	DELETE_SJH_RECORD:		NOVALUE,
	DEQUEUE_OPEN_JOB:		L_OUTPUT_1,
	FIND_PROCESS_DATA:		L_OUTPUT_3,
	LOCK_QUEUE_FILE:		NOVALUE,
	SYMBIONT_DELETION:		NOVALUE,
	UNLOCK_QUEUE_FILE:		NOVALUE,
	WRITE_ACCOUNTING_RECORD:	NOVALUE;

GLOBAL ROUTINE PROCESS_DELETION: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine processes the message type:
!		MSG$_DELPROC		process deletion
!	by updating the appropriate system data structures and writing an
!	accounting record.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	MBX		- Pointer to buffered mailbox message.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	Process data base updated.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	TYPE,				! Process type
	P1:		REF BBLOCK,	! Type-specific parameters
	P2:		REF BBLOCK,	!     ...
	OPEN_JOB,			! True if process has an open job
	SJH_N,				! Record number of SJH
	SJH:		REF BBLOCK;	! Pointer to SJH


! Check whether this process had an open $GETQUI.
!
DELETE_GETQUI_CONTEXT(.MBX[ACM$L_PID]);


! Check whether this process had an open job.
!
OPEN_JOB = FIND_PROCESS_DATA(PDE_K_OPEN_JOB, .MBX[ACM$L_PID], TRUE; , SJH_N);


IF .QUEUE_FAB[FAB$W_IFI] NEQ 0
THEN
    BEGIN

    ! Lock the queue file.
    !
    LOCK_QUEUE_FILE();


    ! If this process had an open job, delete it.
    !
    IF .OPEN_JOB
    THEN
	IF DEQUEUE_OPEN_JOB(.SJH_N; SJH)
	THEN
	    DELETE_SJH_RECORD(.SJH_N, .SJH);
    END;


! Do type-specific processing.
!
IF FIND_PROCESS_DATA(PDE_K_ANY, .MBX[ACM$L_PID], TRUE; TYPE, P1, P2)
THEN
    BEGIN
    CASE .TYPE FROM PDE_K_BATCH TO PDE_K_SYMBIONT OF
	SET


	[PDE_K_BATCH]:
	    BEGIN
	    !
	    ! If the process was a batch process, decrement the system batch
	    ! job count and free the job records.
	    !
	    IF .QUEUE_FAB[FAB$W_IFI] NEQ 0
	    THEN
		BEGIN
		BATCH_DELETION(.P1, .P2);
		UNLOCK_QUEUE_FILE();
		END;
	    RETURN;
	    END;


	[PDE_K_SYMBIONT]:
	    BEGIN
	    !
	    ! If the process was a symbiont process, clean up the structures.
	    !
	    IF .QUEUE_FAB[FAB$W_IFI] NEQ 0
	    THEN
		SYMBIONT_DELETION();
	    END;


	TES;
    END;


! Unlock the queue file.
!
IF .QUEUE_FAB[FAB$W_IFI] NEQ 0
THEN
    UNLOCK_QUEUE_FILE();


! Write the accounting record for the process.
!
WRITE_ACCOUNTING_RECORD(0, 0, .MBX);
END;

END
ELUDOM
