%TITLE 'EDT$PRMACCAL - test for macro token'
MODULE EDT$PRMACCAL (				! Test for macro token
		IDENT = 'V04-000'			! File: PRMACCAL.BLI Edit: JBS1006
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Test for macro token.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: December 12, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 25-Feb-1981.  This module was created by
!	extracting routine MACRO_CALL from module PARSER.
! 1-002	- Regularize headers.  JBS 12-Mar-1981
! 1-003 - Implement new TBCB with macro pointers inside. Remove
!	  references to the MAC_BLOCK.  TMV 6-Aug-81
! 1-004	- Remove call to digit testing routine, replace with a
!	   test based on a table of character information.  JBS 20-Jul-1982
! 1-005	- Add VT220 support conditional.  JBS 11-Feb-1983
! 1-006	- Remove an extra dot added in edit 1-005.  JBS 03-Mar-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$PA_TSTMACCAL;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

REQUIRE 'EDTSRC:PARLITS';

LIBRARY 'EDTSRC:SUPPORTS';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$PA_TSTMACCAL  - test for macro token'

GLOBAL ROUTINE EDT$$PA_TSTMACCAL 		! Test for macro token
    =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks to see if the current token is the name of a macro,
!	and returns 1 it is, 0 if not.  A list of macro description records is
!	scanned and the current token is compared against each of them.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$A_CMD_BUF
!	EDT$$A_BUF_LST
!	EDT$$G_PA_CURCMD
!	EDT$$A_PA_CURTOK
!	EDT$$G_PA_CURTOKLEN
!	EDT$$G_PA_TOKCLASS
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	1 = current token is a macro
!	0 = current token is not a macro, or the parse stack overflowed
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$PA_SCANTOK : NOVALUE,		! Get the next token
	EDT$$PA_GETCH : NOVALUE,		! Get the next character from the input line
	EDT$$PA_SEMRUT;				! Semantic routines referenced in the parser tables

    EXTERNAL
	EDT$$A_CMD_BUF,				! Pointer into command buffer.
	EDT$$A_BUF_LST,				! Header for all buffers
	EDT$$G_PA_CURCMD : REF NODE_BLOCK,
	EDT$$A_PA_CURTOK,			! start of the current token
	EDT$$G_PA_CURTOKLEN,			! length of current token

%IF SUPPORT_VT220
%THEN
	EDT$$B_CHAR_INFO : BLOCKVECTOR [256, 1, BYTE],	! Information about characters
%FI

	EDT$$G_PA_TOKCLASS;			! class of current token

    LOCAL
	CP,
	CH,
	LEN,
	BUF : REF TBCB_BLOCK;

    IF (.EDT$$G_PA_TOKCLASS EQL CL_NAME)
    THEN
	BEGIN
	LEN = .EDT$$G_PA_CURTOKLEN;
	CP = CH$PTR (.EDT$$A_PA_CURTOK, .EDT$$G_PA_CURTOKLEN);
	CH = CH$RCHAR (.CP);

%IF SUPPORT_VT220
%THEN

	WHILE (.EDT$$B_CHAR_INFO [.CH, 0, 0, 8, 0] EQL %X'F0')	! Digit
	DO
%ELSE

	    WHILE ((.CH GEQ %C'0') AND (.CH LEQ %C'9')) DO
%FI

		BEGIN
		CH = CH$A_RCHAR (CP);
		LEN = .LEN + 1;
		END;

	BUF = .EDT$$A_BUF_LST;

	WHILE (.BUF NEQ 0) DO
	    BEGIN

	    IF (CH$EQL (.LEN, .EDT$$A_PA_CURTOK, .BUF [TBCB_NAME_LEN], BUF [TBCB_NAME])) AND 	!
		(.BUF [TBCB_IS_MAC] EQL 1)
	    THEN
		BEGIN
!+
! We have found a macro corresponding to this token.
!-

		IF (EDT$$PA_SEMRUT (INI_COM, COM_MAC_CALL) EQL 0) THEN RETURN (0);

		EDT$$G_PA_CURCMD [RANGE1] = .BUF;
		EDT$$A_CMD_BUF = .CP;
		EDT$$PA_GETCH ();
		EDT$$PA_SCANTOK ();
		RETURN (1);
		END;

!+
! Update the pointer to the next buffer which is defined as a macro.
!-
	    BUF = .BUF [TBCB_NEXT_BUF];
	    END;

	END;

    RETURN (0);
    END;					! of routine EDT$$PA_TSTMACCAL

!<BLF/PAGE>

END						! of module EDT$PRMACCAL

ELUDOM
