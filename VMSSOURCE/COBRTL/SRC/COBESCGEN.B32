%TITLE 'COB$$ESCAPE_GENERATOR - Escape sequence generator for screen mgmt'
MODULE COB$$ESCAPE_GENERATOR (
		IDENT = '1-003'	! File: COBESCGEN.B32 Edit: STAN1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library
!
! ABSTRACT:
!
!	This module contains routines which return a device-specific
!	escape sequence to perform a specified function.
!
!	These are low level routines; the burden of validity checking
!	is on the caller.  For example, buffers are allocated by the caller,
!	and these routines do not check for overflowing the buffers bounds.
!	If the device is not a video terminal, no escape sequence will be
!	generated, and the routine will return with a success status.
!
! ENVIRONMENT:	User mode, Shared library routines.
!
! AUTHOR: P. Levesque, CREATION DATE: 7-Mar-1983
!
! MODIFIED BY:
!
! 1-001	- Original.  PLL 7-Mar-1983  
! 1-002 - Add COB$$SET_ATTRIBUTES_ONLY.
!	  Fix call to COB$$SET_CURSOR_ABS_R4 in COB$$SET_CURSOR_REL.
!	  Fix to COB$$SET_CURSOR_REL.  If we are at the 1st column and the
!	  previous character was a <CR>, then the terminal driver may give
!	  us a 'free' <LF> on our next operation if it is a read.  To avoid
!	  the problem, just make sure <CR> is not the last thing in the 
!	  output buffer.
!	  Rename module from SMG$$ESCAPE_GENERATOR to COB$$ESCAPE_GENERATOR.
!							LGB 20-FEB-1984
! 1-003 - Removed informational errors. STAN 24-Jul-1984.
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

!
! LINKAGES:
!
!	NONE
!
! INCLUDE FILES:
!
REQUIRE 'RTLIN:COBPROLOG';		! Defines psects, macros, &
					! terminal defs
REQUIRE 'RTLIN:COBLNK';			! Linkages
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE

    COB$$DOWN_SCROLL_R2 : COB$$ESC_R2_LNK, ! Creat downscroll sequence
    COB$$ERASE_LINE_R2 : COB$$ESC_R2_LNK,  ! Create erase line sequence
    COB$$ERASE_PAGE_R2 : COB$$ESC_R2_LNK,  ! Create erase page sequence
    COB$$ERASE_WHOLE_LINE_R2 : COB$$ESC_R2_LNK, ! Create erase whole line sequence
    COB$$ERASE_WHOLE_PAGE_R2 : COB$$ESC_R2_LNK, ! Create erase whole page sequence
    COB$$SET_ATTRIBUTES,		   ! Create set attributes sequences w text
    COB$$SET_ATTRIBUTES_ONLY,		   ! Create set attributes sequences w no text
    COB$$SET_CURSOR_ABS_R4 : COB$$ESC_R4_LNK,! Create absolute set cursor sequence
    COB$$SET_CURSOR_REL,		   ! Create relative set cursor sequence
    COB$$SETUP_TERM_TYPE,		   ! Setup terminal type for COB$$ calls
    COB$$UP_SCROLL_R2 : COB$$ESC_R2_LNK;   ! Create upscroll sequence

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! FIELDS:
!
!	NONE
!
! PSECTS:
!

! OWN STORAGE:
!
!	NONE

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE

    LIB$FREE_EF,		! free event flag number
    LIB$GET_EF;			! get event flag number

!<BLF/PAGE>

%SBTTL 'COB$$DOWN_SCROLL_R2 - Create downscroll sequence'
GLOBAL ROUTINE COB$$DOWN_SCROLL_R2 ( 
		    TERM_TYPE,
		    BUFFER,
		    CUR_SIZE
		) : COB$$ESC_R2_LNK =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine generates the escape sequence for down scroll
!	and appends the string to a given output buffer.  
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = COB$$DOWN_SCROLL_R2 (TERM_TYPE.rl.v, BUFFER.mt.r, 
!					     CUR_SIZE.ml.r)
!
! FORMAL PARAMETERS:
!
!	TERM_TYPE.rl.v		terminal type
!	BUFFER.mt.r		addr of buffer
!	CUR_SIZE.ml.r		# bytes currently in buffer
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    LOCAL
	FREE_ADDR;

    BIND
	VT05_DOWN = UPLIT (BYTE (CR, VT05_CUP, NULL)),
	VT52_DOWN = UPLIT (BYTE (ESC, VT52_DWN)),
	VT100_DOWN = UPLIT (BYTE (ESC, VT100_DWN));

    FREE_ADDR = .BUFFER + ..CUR_SIZE;

    CASE .TERM_TYPE FROM UNKNOWN TO HARDCOPY OF
    SET
 	[VT05]:
	    BEGIN
	    CH$MOVE (3, VT05_DOWN, .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 3;
	    END;

	[VT52]:
	    BEGIN
	    CH$MOVE (2, VT52_DOWN, .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 2;
	    END;

	[VT100]:
	    BEGIN
	    CH$MOVE (2, VT100_DOWN, .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 2;
	    END;

	[HARDCOPY, UNKNOWN, VTFOREIGN]:
	    ;

	[INRANGE, OUTRANGE]:
	    RETURN 0;			! should never get here

	TES;

    RETURN (SS$_NORMAL);

    END;
!<BLF/PAGE>

%SBTTL 'COB$$ERASE_LINE_R2 - Create erase line sequence'
GLOBAL ROUTINE COB$$ERASE_LINE_R2 ( 
		    TERM_TYPE,
		    BUFFER,
		    CUR_SIZE
		) : COB$$ESC_R2_LNK =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine generates the escape sequence for erasing a
!	line from the current cursor position.  The string is
!	appended to the given output buffer.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = COB$$ERASE_LINE_R2 (TERM_TYPE.rl.v,
!				       BUFFER.mt.r, CUR_SIZE.ml.r)
!
! FORMAL PARAMETERS:
!
!	TERM_TYPE.rl.v		terminal type
!	BUFFER.mt.r		addr of buffer
!	CUR_SIZE.ml.r		# bytes currently in buffer
!				 updated to reflect erase seq added
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    LOCAL
	FREE_ADDR;			! addr of next free byte in buffer

    BIND
	VT05_LINE = UPLIT (BYTE (VT05_EOL, NULL, NULL)),
	VT52_LINE = UPLIT (BYTE (ESC, VT52_EOL)),
	VT100_LINE = UPLIT (BYTE (ESC, LB, VT100_EOL));

    FREE_ADDR = .BUFFER + ..CUR_SIZE;

    CASE .TERM_TYPE FROM UNKNOWN TO HARDCOPY OF
    SET
	[VT05]:
	    BEGIN
	    CH$MOVE (3, VT05_LINE, .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 3;
	    END;

	[VT52]:
	    BEGIN
	    CH$MOVE (2, VT52_LINE, .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 2;
	    END;

	[VT100]:
	    BEGIN
	    CH$MOVE (3, VT100_LINE, .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 3; 
	    END;

	[HARDCOPY, UNKNOWN, VTFOREIGN]:
	    ;			

	[INRANGE, OUTRANGE]:
	    RETURN 0;			! should never get here

    TES;

    RETURN (SS$_NORMAL);

    END;				! End of routine COB$$ERASE_LINE_R2
!<BLF/PAGE>

%SBTTL 'COB$$ERASE_PAGE_R2 - Create erase page sequence'
GLOBAL ROUTINE COB$$ERASE_PAGE_R2 ( 
		    TERM_TYPE,
		    BUFFER,
		    CUR_SIZE
		) : COB$$ESC_R2_LNK =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine generates the escape sequence for erasing the
!	page from the current cursor position to the end of the
!	page.  The sequence is appended into the output buffer.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = COB$$ERASE_PAGE_R2 (TERM_TYPE.rl.v, 
!				       BUFFER.mt.r, CUR_SIZE.ml.r)
!
! FORMAL PARAMETERS:
!
!	TERM_TYPE.rl.v		terminal type
!	BUFFER.mt.r		addr of buffer
!	CUR_SIZE.ml.r		# bytes currently in buffer
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    LOCAL
	FREE_ADDR;			! addr of next free byte in buffer

    BIND
	VT05_ERASE = UPLIT (BYTE (VT05_EOS, NULL, NULL)),
	VT52_ERASE = UPLIT (BYTE (ESC, VT52_EOS)),
	VT100_ERASE = UPLIT (BYTE (ESC, LB, VT100_EOS));

    FREE_ADDR = .BUFFER + ..CUR_SIZE;

    CASE .TERM_TYPE FROM UNKNOWN TO HARDCOPY OF
    SET
	[VT05]:
	    BEGIN
	    CH$MOVE (3, VT05_ERASE, .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 3;
	    END;

	[VT52]:
	    BEGIN
	    CH$MOVE (2, VT52_ERASE, .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 2;
	    END;

	[VT100]:
	    BEGIN
	    CH$MOVE (3, VT100_ERASE, .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 3; 
	    END;

	[HARDCOPY, UNKNOWN, VTFOREIGN]:
	    ;			

	[INRANGE, OUTRANGE]:
	    RETURN 0;			! should never get here

    TES;

    RETURN (SS$_NORMAL);

    END;				! End of routine COB$$ERASE_PAGE_R2
!<BLF/PAGE>

%SBTTL 'COB$$ERASE_WHOLE_LINE_R2 - Create erase whole line sequence'
GLOBAL ROUTINE COB$$ERASE_WHOLE_LINE_R2 ( 
		    TERM_TYPE,
		    BUFFER,
		    CUR_SIZE
		) : COB$$ESC_R2_LNK =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine generates the escape sequence to erase the entire
!	line containing the current cursor position. The string is 
!	appended into the output buffer.
!
!	Notice that only VT100s have the ability to erase an entire
!	line regardless of whether the cursor is at the beginning
!	of that line.  Most terminals can only erase from the cursor
!	to the end of line.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = COB$$ERASE_WHOLE_LINE_R2 (TERM_TYPE.rl.v,
!						  BUFFER.mt.r, 
!						  CUR_SIZE.ml.r)
!
! FORMAL PARAMETERS:
!
!	TERM_TYPE.rl.v		terminal type
!	BUFFER.mt.r		addr of buffer
!	CUR_SIZE.ml.r		# bytes currently in buffer
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    LOCAL
	FREE_ADDR;			! addr of next free byte in buffer

    BIND
	VT05_LINE = UPLIT (BYTE (VT05_EOL, NULL, NULL)),
	VT52_LINE = UPLIT (BYTE (ESC, VT52_EOL)),
	VT100_WHOLE_LINE = UPLIT (BYTE (ESC, LB, TWO, VT100_EOL));

    FREE_ADDR = .BUFFER + ..CUR_SIZE;

    CASE .TERM_TYPE FROM UNKNOWN TO HARDCOPY OF
    SET
	[VT05]:
	    BEGIN
	    CH$MOVE (3, VT05_LINE, .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 3;
	    END;

	[VT52]:
	    BEGIN
	    CH$MOVE (2, VT52_LINE, .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 2;
	    END;

	[VT100]:
	    BEGIN
	    CH$MOVE (4, VT100_WHOLE_LINE, .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 4; 
	    END;

	[HARDCOPY, UNKNOWN, VTFOREIGN]:
	    ;			

	[INRANGE, OUTRANGE]:
	    RETURN 0;			! should never get here

    TES;

    RETURN (SS$_NORMAL);

    END;				! End of routine COB$$ERASE_WHOLE_LINE_R2
!<BLF/PAGE>

%SBTTL 'COB$$ERASE_WHOLE_PAGE_R2 - Create erase whole page sequence'
GLOBAL ROUTINE COB$$ERASE_WHOLE_PAGE_R2 ( 
		    TERM_TYPE,
		    BUFFER,
		    CUR_SIZE
		) : COB$$ESC_R2_LNK =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine generates the escape sequence to erase the
!	whole page regardless of cursor position.  The string is appended 
!	into the output buffer.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = COB$$ERASE_WHOLE_PAGE_R2 (TERM_TYPE.rl.v,
!						  BUFFER.mt.r, 
!						  CUR_SIZE.ml.r)
!
! FORMAL PARAMETERS:
!
!	TERM_TYPE.rl.v		terminal type
!	BUFFER.mt.r		addr of buffer
!	CUR_SIZE.ml.r		# bytes currently in buffer
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    LOCAL
	FREE_ADDR;			! addr of next free byte in buffer

    LITERAL
	LINE1 = 32,			! 1 + 31 bias
	COL1  = 32;			! 1 + 31 bias

    BIND
	VT05_ERASE = UPLIT (BYTE (VT05_EOS, NULL, NULL)),
	VT52_ERASE = UPLIT (BYTE (ESC, VT52_SC, LINE1, COL1,
				  ESC, VT52_EOS)),
	VT100_ERASE_WHOLE = UPLIT (BYTE (ESC, LB, TWO, VT100_EOS));

    FREE_ADDR = .BUFFER + ..CUR_SIZE;

    CASE .TERM_TYPE FROM UNKNOWN TO HARDCOPY OF
    SET
	[VT100]:
	    BEGIN
	    CH$MOVE (4, VT100_ERASE_WHOLE, .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 4; 
	    END;

	[VT52]:
	    BEGIN
	    !+
	    ! There is no sequence to erase the screen and leave the
	    ! cursor where it was, so on a VT52 we have to settle for
	    ! setting the cursor to 1,1 and erasing to the end of screen.
	    !-
	    CH$MOVE (6, VT52_ERASE, .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 6;
	    END;

	[VT05]:
	    BEGIN
	    CH$MOVE (3, VT05_ERASE, .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 3;
	    END;

	[HARDCOPY, UNKNOWN, VTFOREIGN]:
	    ;			

	[INRANGE, OUTRANGE]:
	    RETURN 0;			! should never get here

    TES;

    RETURN (SS$_NORMAL);

    END;				! End of routine COB$$ERASE_WHOLE_PAGE_R2
!<BLF/PAGE>

%SBTTL 'COB$$SET_ATTRIBUTES - Create set attributes sequence'
GLOBAL ROUTINE COB$$SET_ATTRIBUTES ( 
		    TERM_TYPE,
		    IN_TEXT,
		    IN_LEN,
		    FLAGS,
		    OUT_BUF,
		    OUT_LEN
		) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine generates the escape sequence turning on
!	attributes such as bolding and blinking.  The attribute
!	sequence is placed in the output buffer, the input text
!	is copied over, and then the sequence to turn off graphics
!	is appended.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = COB$$SET_ATTRIBUTES (TERM_TYPE.rl.v, IN_TEXT.rt.r,
!						IN_LEN.rl.v, FLAGS.rl.v, 
!						OUT_BUF.mt.r, OUT_LEN.ml.r)
!
! FORMAL PARAMETERS:
!
!	TERM_TYPE.rl.v		terminal type
!	IN_TEXT.rt.dx		descriptor of text which will have attr on
!	IN_LEN.rl.v		length of caller's text
!	FLAGS.rl.v		flags specifying which attributes to turn on
!	OUT_BUF.mt.r		addr of output buffer
!	OUT_LEN.ml.r		# bytes in output buffer, includes attributes,
!				 caller's text, & turn off graphic rendition
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    LOCAL
	FREE_ADDR;

    MACRO
      	VT100_OFF = %STRING (%CHAR (ESC), %CHAR (LB), '0m')%;

    FREE_ADDR = .OUT_BUF + ..OUT_LEN;		! init to first free byte

    CASE .TERM_TYPE FROM UNKNOWN TO HARDCOPY OF
    SET
	[HARDCOPY, UNKNOWN, VT05, VT52, VTFOREIGN]:
	    BEGIN
	    !+
	    ! Renditions not supported on these devices.  Just
	    ! copy the text into the output buffer and return.
	    !-
	    CH$MOVE (.IN_LEN, .IN_TEXT, .FREE_ADDR);
	    .OUT_LEN = ..OUT_LEN + .IN_LEN;
	    RETURN (SS$_NORMAL);
	    END;

	[INRANGE, OUTRANGE]:
	    RETURN 0;			! error 

	[VT100]:
	    BEGIN
	    IF .FLAGS <0,4> EQL 0
	    THEN
		BEGIN			! no attr requested
		CH$MOVE (.IN_LEN, .IN_TEXT, .FREE_ADDR);
	        .OUT_LEN = ..OUT_LEN + .IN_LEN;
		RETURN (SS$_NORMAL);
		END;
	    !+
	    ! For each attribute bit set in flags, copy
	    ! the appropriate ASCII graphic rendition byte
	    ! followed by a ';' into the output buffer.
	    ! Note use of autoincrementing.
	    !-
	    CH$WCHAR_A (ESC, FREE_ADDR);
	    CH$WCHAR_A (LB, FREE_ADDR);
	    INCR I FROM 0 TO 3
	    DO
		BEGIN			! build attribute string
		BIND
		    ATTRTABL = UPLIT (BYTE ('1754')) : VECTOR [4, BYTE];
		
		IF .FLAGS <.I, 1>
		THEN
		    BEGIN
		    CH$WCHAR_A (.ATTRTABL [.I], FREE_ADDR);
		    CH$WCHAR_A (%C';', FREE_ADDR);
		    .OUT_LEN = ..OUT_LEN + 2; ! keep updating length
		    END;
		END;

	    !+
	    ! When we fall out of above loop we have deposited
	    ! an extra ';' at the end of the buffer.  Back up
	    ! FREE_ADDR and write VT100_SGR on top of it.
	    !-
	    FREE_ADDR = .FREE_ADDR - 1;
	    CH$WCHAR_A (VT100_SGR, FREE_ADDR);
	    END;
	TES;

    !+
    ! If we get here, the appropriate graphic rendition string has
    ! been moved to the output buffer.  Now copy the user's text over.
    !-
    FREE_ADDR = CH$MOVE (.IN_LEN, .IN_TEXT, .FREE_ADDR);

    !+
    ! Append in sequence to turn off graphic rendition.
    !-
    CH$MOVE (%CHARCOUNT (VT100_OFF), UPLIT (BYTE (VT100_OFF)), .FREE_ADDR);

    !+
    ! Set the output length and exit.
    !-
    .OUT_LEN = ..OUT_LEN + .IN_LEN + 6;	! add length of caller's text &
					!  turn on/off graphic rendition
    RETURN (SS$_NORMAL);
	    
    END;				! End of routine COB$$SET_ATTRIBUTES
!<BLF/PAGE>

%SBTTL 'COB$$SET_ATTRIBUTES_ONLY - Create only set attributes sequence'
GLOBAL ROUTINE COB$$SET_ATTRIBUTES_ONLY ( 
		    TERM_TYPE,
		    FLAGS,
		    PREFIX_BUF,
		    P_PREFIX_LEN,
		    SUFFIX_BUF,
		    P_SUFFIX_LEN
		) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine generates the escape sequences turning on and off
!	attributes such as bolding and blinking.  These attribute
!	sequences are placed in two buffers supplied by the caller.
!	No input text is specified.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = COB$$SET_ATTRIBUTES (TERM_TYPE.rl.v,
!						FLAGS.rl.v, 
!						PREFIX_BUF.mt.r,
!						P_PREFIX_LEN.ml.r,
!						SUFFIX_BUF.mt.r,
!						P_SUFFIX_LEN.ml.r)
!
! FORMAL PARAMETERS:
!
!	TERM_TYPE.rl.v		terminal type
!	FLAGS.rl.v		flags specifying which attributes to turn on
!	PREFIX_BUF.mt.r		addr of output buffer to receive prefix string
!	P_PREFIX_LEN.ml.r	# bytes in already in prefix buffer
!				gets updated to include size of prefix
!	SUFFIX_BUF.mt.r		addr of output buffer to receive suffix string
!	P_SUFFIX_LEN.ml.r	# bytes in already in suffix buffer
!				gets updated to include size of suffix
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!
! SIDE EFFECTS:
!
!	NONE
!--

BEGIN

BIND

	PREFIX_LEN	= .P_PREFIX_LEN,	! holds length of prefix buffer
	SUFFIX_LEN	= .P_SUFFIX_LEN;	! holds length of suffix buffer

LOCAL

	BUFFER_PTR;

MACRO

      	VT100_OFF = %STRING (%CHAR (ESC), %CHAR (LB), '0m')%;

BUFFER_PTR = .PREFIX_BUF + .PREFIX_LEN;	! init to first free byte of prefix

CASE .TERM_TYPE FROM UNKNOWN TO HARDCOPY OF
	SET
	[HARDCOPY, UNKNOWN, VT05, VT52, VTFOREIGN]:
	    BEGIN
	    !+
	    ! Renditions not supported on these devices.  Just return.
	    !-
	    RETURN	SS$_NORMAL
	    END;

	[INRANGE, OUTRANGE]:
	    RETURN 0;			! error 

	[VT100]:
	    BEGIN
	    IF .FLAGS <0,4> EQL 0
	    THEN
		RETURN (SS$_NORMAL);	! no attributes requested

	    !+
	    ! For each attribute bit set in flags, copy
	    ! the appropriate ASCII graphic rendition byte
	    ! followed by a ';' into the output buffer.
	    ! Note use of autoincrementing.
	    !-

	    CH$WCHAR_A (ESC, BUFFER_PTR);
	    CH$WCHAR_A (LB,  BUFFER_PTR);
	    PREFIX_LEN = .PREFIX_LEN + 2; ! Start with 2 chars: <ESC> "["
	    INCR I FROM 0 TO 3
	    DO
		BEGIN			! build prefix attribute string
		BIND
		    ATTRTABL = UPLIT (BYTE ('1754')) : VECTOR [4, BYTE];
		
		IF .FLAGS <.I, 1>
		THEN
		    BEGIN
		    CH$WCHAR_A (.ATTRTABL[.I], BUFFER_PTR);
		    CH$WCHAR_A (%C';', BUFFER_PTR);
		    PREFIX_LEN = .PREFIX_LEN + 2; ! keep updating length
		    END;
		END;			! build prefix attribute string

	    !+
	    ! When we fall out of above loop we have deposited
	    ! an extra ';' at the end of the buffer.  Back up
	    ! FREE_ADDR and write VT100_SGR on top of it.
	    !-
	    BUFFER_PTR = .BUFFER_PTR - 1;
	    CH$WCHAR_A (VT100_SGR, BUFFER_PTR);

	    END;
	TES;

!+
! Append in sequence to turn off graphic rendition.
!-

BUFFER_PTR = .SUFFIX_BUF + .SUFFIX_LEN;	! init to first free byte in
					! suffix buffer.

CH$MOVE (%CHARCOUNT (VT100_OFF), UPLIT (BYTE (VT100_OFF)), .BUFFER_PTR);

!+
! Set the output length and exit.
!-

SUFFIX_LEN = .SUFFIX_LEN + %CHARCOUNT(VT100_OFF);

RETURN	SS$_NORMAL
	    
END;				! End of routine COB$$SET_ATTRIBUTES_ONLY
!<BLF/PAGE>

%SBTTL 'COB$$SET_CURSOR_ABS_R4 - Create absolute set cursor sequence'
GLOBAL ROUTINE COB$$SET_CURSOR_ABS_R4 ( 
		    TERM_TYPE,
		    LINE_NO,
		    COL_NO,
		    BUFFER,
		    CUR_SIZE
		) : COB$$ESC_R4_LNK =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine generates the escape sequence for a set cursor
!	position and appends the string to a given output buffer.  
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = COB$$SET_CURSOR_ABS_R4 (TERM_TYPE.rl.v, LINE_NO.rl.v, 
!						COL_NO.rl.v, BUFFER.mt.r, 
!						CUR_SIZE.ml.r)
!
! FORMAL PARAMETERS:
!
!	TERM_TYPE.rl.v		terminal type
!	LINE_NO.rl.v		line number
!	COL_NO.rl.v		column number
!	BUFFER.mt.r		addr of buffer
!				 this buffer should be at least
!				 20 bytes
!	CUR_SIZE.ml.r		# bytes currently in buffer
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    LOCAL
    	VT100CTL : VECTOR [1, 8] INITIAL (
	    DSC$K_CLASS_S ^24 + DSC$K_DTYPE_T ^16 + 10,
	    UPLIT ( BYTE (ESC, LB, '!UL;!UL', VT100_SC ))),
					! dsc for cvt to vt100 sequence
					! FAO control string
	FREE_ADDR : REF VECTOR [,BYTE];	! addr of 1st free byte


    FREE_ADDR = .BUFFER + ..CUR_SIZE;	! addr of next free byte

    CASE .TERM_TYPE FROM UNKNOWN TO HARDCOPY OF
	SET
	
	[HARDCOPY, UNKNOWN, VTFOREIGN]:
	    ;				! do nothing

	[VT05]:
	    BEGIN
	    .CUR_SIZE = ..CUR_SIZE + 3;	! update current size of buffer
	    FREE_ADDR [0] = VT05_SC;	! put set cursor sequence into buffer
	    FREE_ADDR [1] = CB + .LINE_NO;
	    FREE_ADDR [2] = CB + .COL_NO;
	    END;

	[VT52]:
	    BEGIN
	    .CUR_SIZE = ..CUR_SIZE + 4;	! update current size of buffer
	    FREE_ADDR [0] = ESC;	! put set cursor sequence into buffer
	    FREE_ADDR [1] = VT52_SC;
	    FREE_ADDR [2] = CB + .LINE_NO;
	    FREE_ADDR [3] = CB + .COL_NO;
	    END;

	[VT100]:
	    BEGIN
	    LOCAL
		STATUS,
		CVT_ARGS : VECTOR [2],
		FAO_BUFFER : BLOCK [8, BYTE],
		FAO_LEN : WORD;

	    CVT_ARGS [0] = .LINE_NO;
	    CVT_ARGS [1] = .COL_NO;
	    FAO_BUFFER [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    FAO_BUFFER [DSC$B_CLASS] = DSC$K_CLASS_S;
	    FAO_BUFFER [DSC$W_LENGTH] = 20;		! arbitrary - sb large enough
	    FAO_BUFFER [DSC$A_POINTER] = .FREE_ADDR;

	    !+
	    ! Convert to ASCII characters and move to buffer.
	    !-
	    STATUS = $FAOL (CTRSTR = VT100CTL, OUTLEN = FAO_LEN,
		OUTBUF = FAO_BUFFER, PRMLST = CVT_ARGS);
	    IF NOT .STATUS THEN RETURN (.STATUS);
	    .CUR_SIZE = ..CUR_SIZE + .FAO_LEN;	! add length of appended string
	
	    END;

	[INRANGE,OUTRANGE]:
	    RETURN 0;			! should never get here

	TES;

    RETURN 1;

    END;				! End of routine COB$$SET_CURSOR_ABS_R4
!<BLF/PAGE>

%SBTTL 'COB$$SET_CURSOR_REL Create relative cursor position sequence'
GLOBAL ROUTINE COB$$SET_CURSOR_REL ( 
		    TERM_TYPE,
		    LINE_NO,
		    COL_NO,
		    LINE_PLUS,
		    COL_PLUS,
		    BUFFER,
		    CUR_SIZE
		) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine generates the escape sequence to position
!	the cursor relative to the specified line and column, or
!	relative to the current position if none is specified.
!	The set cursor sequence is appended to the output string.
!
!	Notice that the ANSI sequences can become quite large.
!	For instance, it is possible that 50 up arrows (2 bytes each)
!	will be only a part of the resulting sequence.  It is 
!	recommended that the output buffer be 512 bytes long.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = COB$$SET_CURSOR_REL (TERM_TYPE.rl.v, LINE_NO.rl.v, 
!					      COL_NO.rl.v, LINE_PLUS.rl.v,
!					      COL_PLUS.rl.v, BUFFER.mt.r, 
!					      CUR_SIZE.ml.r)
!
! FORMAL PARAMETERS:
!
!	TERM_TYPE.rl.v		terminal type
!	LINE_NO.rl.v		line number
!	COL_NO.rl.v		column number
!	LINE_PLUS.rl.v		offset from line number
!	COL_PLUS.rl.v		offset from column number
!	BUFFER.mt.r		addr of buffer
!	CUR_SIZE.ml.r		# bytes currently in buffer
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!
! SIDE EFFECTS:
!
!	NONE
!--
!+
!  The following table shows the cursor positioning used for every
!  combination of the LINE and COLUMN phrases on both ANSI devices
!  and VT100s.  The arrows on the VT52 can only be moved one position at
!  a  time.  This may be slower, but at least the results will be the
!  same as far as cursor positioning goes on both types of terminals.
!
!   "v" = down arrow
!
!   "^" = up arrow
!
!   LINE a | LINE PLUS b | COLUMN c | COLUMN PLUS d |  Cursor Pos. Used
!   ------------------------------------------------------------------
!          |             |          |               |
!     N    |     N       |     N    |       N       | Current   Rules
!     N    |     N       |     N    |       Y       | d "->"
!     N    |     N       |     Y    |       N       | <CR> ; c-1 "->"
!     N    |     N       |     Y    |       Y       | <CR> ; (c-1)+d "->"
!     N    |     Y       |     N    |       N       | b <LF>
!     N    |     Y       |     N    |       Y       | b <LF> ; d "->"
!     N    |     Y       |     Y    |       N       | b <LF> ; <CR> ; c-1 "->"
!     N    |     Y       |     Y    |       Y       | b <LF> ; <CR> ; (c-1)+d "->"
!     Y    |     N       |     N    |       N       | Home ; a-1 "v"
!     Y    |     N       |     N    |       Y       | 24 "^" ; a-1 "v" ; d "->"
!     Y    |     N       |     Y    |       N       | Direct a,c
!     Y    |     N       |     Y    |       Y       | Direct a,c+d
!     Y    |     Y       |     N    |       N       | Home ; a-1 "v" ; b "LF"
!     Y    |     Y       |     N    |       Y       | 24 "^" ; a-1 "v" ; b <LF>
!          |             |          |               |    d "->"
!     Y    |     Y       |     Y    |       N       | Direct a,c ; b <LF>
!     Y    |     Y       |     Y    |       Y       | Direct a,c+d ; b <LF>
!          |             |          |               |
!    ------------------------------------------------------------------
!
!     note: <lf> for all LINE PLUS to get scrolling
!     note: 24 up arrows used instead of home - this maintains the current
!     column position
!-


    BEGIN

    !+
    ! The following macro will put the VT100 sequence for
    ! multiple arrow movement into the buffer and update 
    ! the length and pointer.  Sequences are of the form
    ! ESC [ num arrow.
    !-
    MACRO
	$APPEND_VT100_SEQ (NUM, CTR_ARROW) =
	BEGIN
	LOCAL
	    CVT_ARG,
	    FAO_BUF : BLOCK [8, BYTE],
	    FAO_LEN : WORD,
	    STATUS;
	
	IF NUM NEQ 0
	THEN
	    BEGIN
	    CVT_ARG = NUM;
	    FAO_BUF [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    FAO_BUF [DSC$B_CLASS] = DSC$K_CLASS_S;
	    FAO_BUF [DSC$W_LENGTH] = 15;		! arbitrary - sb big enough
	    FAO_BUF [DSC$A_POINTER] = .FREE_ADDR;
	
 	    STATUS = $FAOL (CTRSTR = CTR_ARROW, OUTLEN = FAO_LEN,
			OUTBUF = FAO_BUF, PRMLST = CVT_ARG);
	    IF NOT .STATUS THEN RETURN .STATUS;
	
	    .CUR_SIZE = ..CUR_SIZE + .FAO_LEN;	
	    FREE_ADDR = .FREE_ADDR + .FAO_LEN;
	    END;
	END					
%;					! end macro $append_vt100_seq

    !+
    ! This macro puts NUM arrows into the buffer.
    ! The next free byte and buffer size are updated.
    !-
    MACRO
	$APPEND_N_ARROWS (NUM, DIRECTION) =
	BEGIN
	INCR COUNTER FROM 1 TO NUM DO
	    BEGIN
	    FREE_ADDR = CH$MOVE (2, UPLIT (BYTE (ESC, DIRECTION)), .FREE_ADDR);
	    .CUR_SIZE = ..CUR_SIZE + 2;
	    END;
	END;
%;					! end of macro append_n_arrows

    MACRO
	$APPEND_VT100_HOME = 
	BEGIN
	FREE_ADDR = CH$MOVE (3, UPLIT (BYTE( ESC, LB, f)),
				.FREE_ADDR);
	.CUR_SIZE = ..CUR_SIZE + 3;
	END
%;

    MACRO
	$APPEND_VT52_HOME = 
	BEGIN
	FREE_ADDR = CH$MOVE (2, UPLIT (BYTE (ESC, H)), .FREE_ADDR);
	.CUR_SIZE = ..CUR_SIZE + 2;
	END;
%;

    LOCAL
	FREE_ADDR : REF VECTOR [,BYTE],
	UP_CTL : VECTOR [1, 8] INITIAL (
		DSC$K_CLASS_S ^ 24 + DSC$K_DTYPE_T ^ 16 + 6,
		UPLIT (BYTE (ESC, LB, '!UL', A))),
	DOWN_CTL : VECTOR [1, 8] INITIAL (
		DSC$K_CLASS_S ^ 24 + DSC$K_DTYPE_T ^ 16 + 6,
		UPLIT (BYTE (ESC, LB, '!UL', B))),
	RIGHT_CTL : VECTOR [1, 8] INITIAL (
		DSC$K_CLASS_S ^ 24 + DSC$K_DTYPE_T ^ 16 + 6,
		UPLIT (BYTE (ESC, LB, '!UL', C)));

    BIND
	UP = A,				! equate letters to directions
	DOWN = B,
	RIGHT = C;

    LITERAL
	K_MAX_RMS_SIZE = 255;

    IF .TERM_TYPE NEQ VT100 AND
       .TERM_TYPE NEQ VT52
    THEN RETURN (SS$_NORMAL);		! don't do anything for other
					!  terminal types
 
    FREE_ADDR = .BUFFER + ..CUR_SIZE;

    IF .LINE_NO NEQ 0 AND
       .COL_NO NEQ 0
    THEN				! direct cursor addressing
	BEGIN
	COB$$SET_CURSOR_ABS_R4 (.TERM_TYPE, .LINE_NO,
			     .COL_NO + .COL_PLUS, .BUFFER,
			     .CUR_SIZE);
	FREE_ADDR = .BUFFER + ..CUR_SIZE; ! update addr next free byte
	END;

    IF .LINE_NO NEQ 0 AND
       .COL_NO EQL 0
    THEN
	BEGIN
	IF .COL_PLUS EQL 0
	THEN			! insert home sequence
	    BEGIN
	    IF .TERM_TYPE EQL VT100
	    THEN
		$APPEND_VT100_HOME
	    ELSE
		$APPEND_VT52_HOME;
	    END
	ELSE
	    BEGIN		! insert a bunch of up arrows
	    MACRO
		UP_ARROW = %STRING (%CHAR (ESC), %CHAR (A))%;
	    BIND
	   	UP_24 = UPLIT (BYTE (REP 24 OF (UP_ARROW)));

	    IF .TERM_TYPE EQL VT100
   	    THEN
		$APPEND_VT100_SEQ (24, UP_CTL)
	    ELSE
		BEGIN
	    	FREE_ADDR = CH$MOVE (48, UP_24, .FREE_ADDR); 
	    	.CUR_SIZE = ..CUR_SIZE + 48;
		END;
	    END;
        !+
	! Insert line_no down arrows regardless of col_plus
	!-
	IF .TERM_TYPE EQL VT100
	THEN
	    $APPEND_VT100_SEQ (.LINE_NO - 1, DOWN_CTL)
	ELSE
	    $APPEND_N_ARROWS (.LINE_NO - 1, DOWN);
	END;

    IF .LINE_NO EQL 0 AND
       .COL_NO NEQ 0
    THEN				! insert a CR &
	BEGIN				! col_no right arrows
	FREE_ADDR [0] = CR;
	FREE_ADDR = .FREE_ADDR + 1;
	.CUR_SIZE = ..CUR_SIZE + 1;
	END;

    IF .LINE_PLUS NEQ 0
    THEN				! add line_plus LFs to buffer
	BEGIN
	FREE_ADDR = CH$FILL (LF, .LINE_PLUS, .FREE_ADDR);
	.CUR_SIZE = ..CUR_SIZE + .LINE_PLUS;
	END;

    IF (.COL_PLUS NEQ 0 OR .COL_NO NEQ 0) AND
       (.LINE_NO EQL 0 OR .COL_NO EQL 0) ! didn't do direct cursor addr
    THEN				! insert col_plus right arrows
	BEGIN
	LOCAL
	    COL;
	COL = .COL_NO - 1;
	IF .COL LSS 0
	THEN
	    COL = 0;
	IF .TERM_TYPE EQL VT100
	THEN
	    $APPEND_VT100_SEQ (.COL + .COL_PLUS, RIGHT_CTL)
	ELSE
	    $APPEND_N_ARROWS (.COL + .COL_PLUS, RIGHT);
	END;

    RETURN (SS$_NORMAL);		! everything should be in the buffer	
	
    END;				! End of routine COB$$SET_CURSOR_REL
!<BLF/PAGE>

%SBTTL 'COB$$SETUP_TERM_TYPE - Setup terminal type for COB$$ routines'
GLOBAL ROUTINE COB$$SETUP_TERM_TYPE ( 
		    FILE_NAME,
		    NAME_LEN,
		    TERM_TYPE,
		    SEC_DEV_CHAR,
		    DEVICE_TYPE  : REF VECTOR [,BYTE],
		    RES_NAME_LEN : REF VECTOR [,WORD],
		    RES_NAME_ADDR
		) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine uses the specified file name to determine device
!	characteristics and assign a terminal type code which is understood
!	by other COB$$ routines.  COB$$ routines use the terminal type to
!	determine the correct escape sequence for a given function (ex. set
!	cursor).
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = COB$$SETUP_TERM_TYPE (FILE_NAME.rt.r,
!						 NAME_LEN.rl.v,
!						 TERM_TYPE.wl.r
!						 [,SEC_DEV_CHAR.wlu.r]
!						 [,DEVICE_TYPE.wbu.r]
!						 [,RES_NAME_LEN.wwu.r,
!						   RES_NAME_ADDR.wt.r])
!
! FORMAL PARAMETERS:
!
!	FILE_NAME.rt.r		addr of file name text
!	NAME_LEN.rl.v		length of file name text
!	TERM_TYPE.wl.r		terminal type code, one of the following:
!				    unknown
!				    vt05
!				    vt52
!				    vt100
!				    vtforeign 
!				    hardcopy
!
!	SEC_DEV_CHAR.wlu.r	[Optional] If supplied, the address of
!				a longword to receive the secondary
!				device dependent bits.  This is the
!				field that, e.g. tells whether a VT100
!				has AVO.
!
!	DEVICE_TYPE.wbu.r	[Optional].  If present, address of byte
!				to receive hardware device type.  These
!				are the DT$_type codes.
!
!	RES_NAME_LEN.wwu.r	[Optional -- if provided, RES_NAME_ADDR
!				must be provided as well.]  If present,
!				the address of a word to receive the
!				length of the resultant name string.
!
!	RES_NAME_ADDR.wt.r	[Optional -- if provided, RES_NAME_LEN
!				must be provided as well.]  If present,
!				the address of a buffer to receive the
!				resultant name string.  NOTE:  This
!				routine assumes that the supplied buffer
!				is large enough to contain the resultant
!				name string.  It must be a minimum of 4
!				bytes long and should be at least 64
!				bytes long to guarantee that the name
!				will fit.
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    LOCAL
	DEVNAM_DSC : BLOCK [8, BYTE],		! dsc for name
	DVI_ITMLST : VECTOR [3*3 + 1] INITIAL	! item list for $GETDVI
		(DVI$_DEVTYPE    ^ 16 + 4, 0, 0,!  device type
		 DVI$_DEVDEPEND2 ^ 16 + 4, 0, 0,!  device dependent bits
		 DVI$_DEVNAM     ^ 16 +64, 0, 0,!  result name string
		 0),				!  terminater

	DVI_EFN,				! event flag for $GETDVI,
	STATUS,					! status retd by called routines
	DEV_TYPE : VOLATILE,			! storage for $GETDVI value
	DEV_DEPEND2 : VOLATILE,			! storage for $GETDVI value

	DEV_DEVNAM : VECTOR [64, BYTE],		! Buffer for result name
						! string

	DEV_NAMLEN : VOLATILE WORD;		! Length of returned
						! resultent name string
    BIND
	DVI_TYPE    = DVI_ITMLST + 4,		! make it easy to reference
	DVI_DEPEND2 = DVI_ITMLST + 16,		!  items retd by $GETDVI
	DVI_DEVNAM  = DVI_ITMLST + 28,		!
	DVI_NAMLEN  = DVI_ITMLST + 32;		!

    MAP
	DEV_DEPEND2 : BLOCK [4, BYTE];

    DVI_TYPE    = DEV_TYPE;			! fill in rest of itmlst
    DVI_DEPEND2 = DEV_DEPEND2;			
    DVI_DEVNAM  = DEV_DEVNAM;
    DVI_NAMLEN  = DEV_NAMLEN;

    IF NOT (STATUS = LIB$GET_EF (DVI_EFN))
    THEN RETURN (.STATUS);		! get unique event flag number

    DEVNAM_DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    DEVNAM_DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
    DEVNAM_DSC [DSC$W_LENGTH] = .NAME_LEN;
    DEVNAM_DSC [DSC$A_POINTER] = .FILE_NAME; ! dsc needed for $GETDVI

    STATUS = $GETDVI (EFN = .DVI_EFN, DEVNAM = DEVNAM_DSC,
		      ITMLST = DVI_ITMLST);
    IF NOT .STATUS THEN RETURN (.STATUS);

    $WAITFR (EFN = .DVI_EFN);		! make $GETDVI synchronous

    IF NOT (STATUS = LIB$FREE_EF (DVI_EFN))
    THEN RETURN (.STATUS);		! free event flag

    SELECTONE .DEV_TYPE OF
    SET
	[DT$_VT100]:
	    .TERM_TYPE = VT100;

	[DT$_VT52, DT$_VT55]:
	    .TERM_TYPE = VT52;

	[DT$_VT05]:
	    .TERM_TYPE = VT05;

	[DT$_FT1 TO DT$_FT2]:
	    .TERM_TYPE = VTFOREIGN;

	[DT$_LA36, DT$_LA120, DT$_LA34, DT$_LA38]:
	    .TERM_TYPE = HARDCOPY;

	[OTHERWISE]:
	    IF .DEV_DEPEND2 [TT2$V_DECCRT] OR
	       .DEV_DEPEND2 [TT2$V_ANSICRT]
	    THEN
		.TERM_TYPE = VT100	! VT100 compatible (ANSI)
	    ELSE
		.TERM_TYPE = UNKNOWN;	! really unknown
	TES;

!+
! Return optional parameters if requested.
!-
    IF NOT NULLPARAMETER (4)
    THEN
	.SEC_DEV_CHAR = .DEV_DEPEND2;

    IF NOT NULLPARAMETER (5)
    THEN
	DEVICE_TYPE [0] = .DEV_TYPE;

    IF NOT NULLPARAMETER (6)  AND
       NOT NULLPARAMETER (7)
    THEN
	BEGIN
	CH$MOVE ( .DEV_NAMLEN, DEV_DEVNAM, .RES_NAME_ADDR);
	RES_NAME_LEN [0] = .DEV_NAMLEN;
	END;

    RETURN (.STATUS);
    END;				! End of routine COB$$SETUP_TERM_TYPE
!<BLF/PAGE>

%SBTTL 'COB$$UP_SCROLL_R2 - Create up scroll sequence'
GLOBAL ROUTINE COB$$UP_SCROLL_R2 ( 
		    TERM_TYPE,
		    BUFFER,
		    CUR_SIZE
		) : COB$$ESC_R2_LNK =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine generates the escape sequence for up scroll.
!	The string is appended into the buffer.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = COB$$UP_SCROLL_R2 (TERM_TYPE.rl.v, BUFFER.mt.r, 
!					   CUR_SIZE.ml.r)
!
! FORMAL PARAMETERS:
!
!	TERM_TYPE.rl.v		terminal type
!	BUFFER.mt.r		addr of buffer
!	CUR_SIZE.ml.r		# bytes currently in buffer
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    LOCAL
	FREE_ADDR : REF VECTOR [,BYTE];

    FREE_ADDR = .BUFFER + ..CUR_SIZE;

    CASE .TERM_TYPE FROM UNKNOWN TO HARDCOPY OF
    SET
	[VT05]:
	    BEGIN
	    FREE_ADDR [0] = LF;
	    FREE_ADDR [1] = NULL;
	    FREE_ADDR [2] = NULL;
	    FREE_ADDR [3] = NULL;
	    .CUR_SIZE = ..CUR_SIZE + 4;
	    END;

	[VT52, VT100]:
	    BEGIN
	    FREE_ADDR [0] = LF;
	    .CUR_SIZE = ..CUR_SIZE + 1;
	    END;

	[HARDCOPY, UNKNOWN, VTFOREIGN]:
	    ;

	[INRANGE, OUTRANGE]:
	    RETURN 0;			! should never get here

	TES;

    RETURN (SS$_NORMAL);

    END;				! End of routine COB$$UP_SCROLL_R2
!<BLF/PAGE>

END					! End of module COB$$ESCAPE_GENERATOR

ELUDOM
