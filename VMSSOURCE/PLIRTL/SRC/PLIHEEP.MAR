	.title pli$heep - pl1 runtime heep allocation
	.ident	/1-003/					; Edit WHM1003
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; facility:
;
;	VAX/VMS PL1 runtime library.
;
; abstract:
;
;	Runtime routines to allocate and deallocate heep space.
;
; author: R. Heinen  16-dec-1978
;
; modifications:
;
;	1-002
;	Modified both routines, to allow them be called with different
;	number of parameters and so work for the controlled variable.
;				Alex Wu  03/24/82
;	
;	add the new routine - PLI$ALLOCATION to return the number of
;	generation that a controlled variable has been allocated.
;				Alex Wu  03/30/82
;
;	1-003	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
 
;
; external definitions
;
 
;
; local data
;
 
	rtshare
	.page
	.sbttl pli$aloheep - allocate heep space
;++
; pli$alocheep - allocate heep space
;
; functional description:
;
; This routine allocates a memory block using "lib$get_vm".
; The alloocated block is a longword (or two longword) bigger in order to 
; save the allocated size (and/or the previous pointer)in the block itself.
; The size is stored in the first longword (the pointer is save in the first
; longword).  The returned address
; is the address of the actual free space.
;
; inputs:
;
;	(ap) = 2 (or 3 for the controlled variables)
;	4(ap) = longword size
;	8(ap) = address to store address of the data
;	12(ap) = address to the current block -- if exist
;
; outputs:
;
;	r0 = success indicator fixed binary(32)
;
; r0 =	ss$_normal for success
;	lib$_insvirmem - insufficient memory for request
;	lib$_badblosiz - bad size parameter
;
; If an error is indicated by r0 then the returned address is 0.
; and the error is signalled.
;--
	.entry pli$alocheep,0
 
	clrl	@8(ap)			; assume allocation failure
	addl3	#4,4(ap),-(sp)		; build following arg list
	cmpl	#2,(ap)			; based ?
	beql	10$			; less than or equal then yes
	addl2	#4,(sp)			; one more longword for pointer 
10$:	clrl	-(sp)			; address to return address
	pushab	(sp)			; 
	pushab	8(sp)			; 
	calls	#2,g^lib$get_vm		; allocate the memory
	blbc	r0,20$			; if low clear then error
	popl	r0			; get address of allocated space
	popl	(r0)+			; insert size in buffer
	cmpl	#2,(ap)			; based ?
	beql	15$			; less than or equal than yes
	movl	12(ap),(r0)+		; save pointer
15$:	movl	r0,@8(ap)		; return address of allocated memory
	ret
20$:	pushl	r0			; signal error condition
	calls	#1,g^lib$signal
	ret
	.page
	.sbttl pli$freeheep - deallocate heep space
;++
; pli$freeheep - deallocate heep space
;
; functional description:
;
; This routine is the complementary routine to "pli$alocheep".
; The memory is retured via "lib$free_vm".
;
; inputs:
;
;	(ap) = 1 (or 2 for the controlled variables)
;	4(ap) = address of memory
;	8(ap) = address of the based pointer -- if exist
;
; The block must have been allocated using "pli$aloheep".
;
; outputs:
;
;	For the controlled variables, there is a side effect on the 
;	based pointer @8(ap)
;	r0 = success indicator fixed binary(32)
;
; r0 =	ss$_normal for success
;	lib$_badblosiz - incorrect block size parameter
;--
	.entry pli$freeheep,0
 
	subl3	#4,4(ap),r0		; address block size or pointer longword
	cmpl	#1,(ap)			; based variable ?
	beql	30$			; less than or equal than yes
	movl	(r0),@8(ap)		; save previous block pointer
	subl2	#4,r0			; adress to block size 
30$:	pushl	r0			; put address in memory
	pushab	(sp)			; set up arg list
	pushl	r0			; 
	calls	#2,g^lib$free_vm	; free the memory
	ret
	.page
	.sbttl pli$allocation - return number of time that has been allocated
;++
; pli$allocation - return number of time that has been allocated
;
; functional description:
;
; This routine perform the builtin funtion ALLOCATION which return the
; generations that a controlled variable has been allocated.  It walks
; through the link list and increment the count each time looks at a
; new block until the end of the list (null pointer).
;
; inputs:
;
;	(ap) = 2
;	4(ap) = address of the current active block
;	8(ap) = address of the return value
;
; The block must have been allocated using "pli$aloheep".
;
; outputs:
;
;	8(ap) contains the return value
;--
	.entry pli$allocation,0

	clrl	@8(ap)			; initialize the counter
	movl	4(ap),r0		; get the pointer
	beql	30$			; if null pointer then done
10$:	incl	@8(ap)			; increment the counter
	movl	-(r0),r0		; get previous block address
	bnequ	10$			; keep looping if not null pointer
30$:	ret

	.end
