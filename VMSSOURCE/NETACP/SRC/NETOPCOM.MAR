	.TITLE	NETOPCOM - OPERATOR COMMUNICATIONS
	.IDENT	'V04-000'
	.DEFAULT DISPLACEMENT,LONG

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	NETWORK ACP
;
; ABSTRACT:
;	THIS MODULE IS USED TO SEND INFORMATIONAL MESSAGES TO THE NETWORK OPERATOR
;
; ENVIRONMENT:
;	MODE = EXEC
;
; AUTHOR:	SCOTT G. DAVIS, CREATION DATE: 13-APR-1980
;
; MODIFIED BY:
;
;	V03-002	ADE0001		Alan D. Eldridge	19-Feb-1984
;		Fix linkage truncation errors.
;
;	V001	TMH0001		Tim Halvorsen		13-Apr-1982
;		Rewrite.  Remove obsolete code.
;---

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$NDBDEF				; NETACP internal operator msg numbers
	$OPCDEF				; OPCOM message format
	$PCBDEF				; Process control block
	$PHDDEF				; Process header block

;
; The messages sent by $SNDACC, $SNDERR, and $SNDOPR consist of
; a common header followed by the user specified message.  The 
; common header has the following format:
;
;	.WORD	<message type>
;	.WORD	<reply mailbox channel #>
;	.QUAD	<sender's privilege mask>
;	.LONG	<sender's UIC>
;	.BLKB	<sender's USERNAME.  12 bytes, blank filled>
;	.BLKB	<sender's ACCOUNT.  8 bytes, blank filled>
;	.BYTE	<sender's base priority>
;	.BYTE	<unused>
;
SNDMSG_HDR = 38

;
; OWN STORAGE:
;
	.PSECT	NET_PURE,NOWRT,NOEXE

START_MSG:	.ASCIC	/DECnet starting/
SHUT_MSG:	.ASCIC	/DECnet shutting down/


	.PSECT	NET_CODE,NOWRT,EXE

	.SBTTL	NETWORK OPERATOR MESSAGE FORMATTING
;++
; FUNCTIONAL DESCRIPTION:
;
; NET$OPCOM - FORMAT AND SEND OPERATOR MESSAGE
;
; CALLING SEQUENCE:
;
;	BSB	NET$OPCOM
;
; INPUT PARAMETERS:
;
;	R0 - Message code (NDB$C_MSG_xxx)
;
; SIDE EFFECTS:
;
;	MESSAGE SENT TO NETWORK OPERATOR
;	R1,R2 - destroyed
;--

NET$OPCOM::
	$DISPATCH R0,TYPE=B,<-
		<NDB$C_MSG_START,10$>,-	; Starting network
		<NDB$C_MSG_SHUT,20$>>	; Shutting down network
	RSB				; If not recognized, ignore it

10$:	MOVAB	START_MSG,R1		; Get startup message
	BRB	50$
20$:	MOVAB	SHUT_MSG,R1		; Get shutdown message

50$:	PUSHR	#^M<R2,R3,R4,R5,R6>	; Save registers
	MOVZBL	(R1)+,R0		; Make descriptor of message text
	ADDL3	#SNDMSG_HDR+OPC$L_MS_TEXT,R0,R3	; Compute size of buffer needed
	SUBL	R3,SP			; Allocate space for OPCOM message
	MOVL	SP,R3			; Point to buffer
	MOVQ	R0,-(SP)		; Save descriptor of message text
;
; Prepare to send a message to the OPCOM mailbox.  We must use the kernel
; mode routine EXE$WRTMAILBOX rather than the $SNDOPR system service
; because of some bad safety checks in the service which prevent it's use
; from kernel mode (it runs in EXEC mode, and makes sure that the buffer
; isn't "less than" the executive mode stack, and of course, calling the
; service from kernel mode means that it runs on the kernel stack instead).
;
; Build common SNDMSG mailbox header
;
	MOVW	#MSG$_OPRQST,(R3)+	; INSERT MESAGE TYPE
	CLRW	(R3)+			; INSERT REPLY MAILBOX CHANNEL NUMBER
	MOVL	G^CTL$GL_PCB,R6		; GET ADDRESS OF PCB
	ASSUME	PHD$Q_PRIVMSK EQ 0
	MOVQ	@PCB$L_PHD(R6),(R3)+	; INSERT PRIVILEGE MASK
	MOVL	PCB$L_UIC(R6),(R3)+	; INSERT UIC
	MOVC3	#20,G^CTL$T_USERNAME,(R3); INSERT USER NAME AND ACCOUNT NAME
	SUBB3	PCB$B_PRIB(R6),#31,(R3)+; INSERT BASE PRIORITY
	CLRB	(R3)+			; CLEAR SPARE BYTE
;
; Build OPCOM header
;
	MOVQ	(SP)+,R0		; Restore descriptor of message text
	ASSUME	OPC$B_MS_TARGET EQ OPC$B_MS_TYPE+1 ; 3 bytes of operator mask
	MOVL	#OPC$_RQ_RQST!<OPC$M_NM_NTWORK@8>,-
		OPC$B_MS_TYPE(R3)	; Request type/opermask
	CLRL	OPC$L_MS_RQSTID(R3)	; No ID for message
	MOVC	R0,(R1),OPC$L_MS_TEXT(R3) ; Copy text into OPCOM message
	SUBL	SP,R3			; Compute size of message
	MOVL	SP,R4			; Set address of message
	MOVAB	G^SYS$GL_OPRMBX,R5	; Get address of OPCOM mailbox UCB
	JSB	G^EXE$WRTMAILBOX	; Send message to OPCOM mailbox
	ADDL	R3,SP			; Deallocate message off stack
	POPR	#^M<R2,R3,R4,R5,R6>	; Restore registers
	RSB				; DONE

	.END
