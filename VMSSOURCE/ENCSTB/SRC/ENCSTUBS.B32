%TITLE 'Stub routines for missing sharable section'
MODULE ENCRYPT$STUBS (IDENT = 'V04-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!   VAX/VMS Data Encryption Facility
!
! ABSTRACT:
!   This module provides error return entrypoints for all modules placed
!	in the stub version of ENCRYPSHR.EXE, the facility sharable section
!
! ENVIRONMENT:
!   VMS User Mode.
!
! AUTHOR: J. Eric Pollack, CREATION DATE: 4-May-1983
!
! MODIFIED BY:
!
!	V01-004	JEP0008		J. Eric Pollack		10-Mar-1984
!		Add global definition of shared error codes
!
!	V01-003	JEP0004		J. Eric Pollack		12-Aug-1983
!		Revise entrypoint names
!
!	V01.002	BLS0228		Benn Schreiber		29-Jun-1983
!		Correct reference to PRODNOTINS
!--
LIBRARY
	'SYS$LIBRARY:STARLET.L32';
!
! define local messages
!
$shr_msgdef ( encrypt,282,LOCAL,(prodnotins,ERROR)) ;
$SHR_MSGDEF (ENCRYPT,282,GLOBAL,	!282=ENCRYPT facility
		(deleted, success),	! deleted x
		(insvirmem, error),	! not enough memory
		(openin, error),	! error opening "x" as input
		(openout, severe),	! error opening "x" as output
		(closein, warning),	! error closing "x" as input
		(closeout, warning),	! error closing "x" as output
		(readerr, error),	! error reading "x"
		(writeerr, error),	! error writing "x" 
		(parsefail, error));	! error parsing "x"

BIND
    facname = $DESCRIPTOR('Data Encryption Facility') ;

GLOBAL ROUTINE ENCRYPT$DEFINE_KEY =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;
GLOBAL ROUTINE ENCRYPT$DECRYPT_ASYN =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$DELETE_KEY =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$$DES =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$$TEST_DES =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$$NUL =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$$TEST_NUL =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$ENCRYPT_ASYN =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$FINI_ASYN =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$INIT_ASYN =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$DECRYPT =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$ENCRYPT =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$FINI =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$INIT =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$STATISTICS =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$$CVT_TO_HEX =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$$ALGORITHM_NAME =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$$COMPRESS_KEY =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$$FORCE_PARITY =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$ENCRYPT_FILE =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$$CREATE_RANKEY =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$$FILE_INICONTEXT=
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$ENCRYPT_ONE_RECORD =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;

GLOBAL ROUTINE ENCRYPT$DECRYPT_ONE_RECORD =
    	BEGIN
		signal ( encrypt$_prodnotins , 1 , facname)
    	END;


END				! End of module
ELUDOM
