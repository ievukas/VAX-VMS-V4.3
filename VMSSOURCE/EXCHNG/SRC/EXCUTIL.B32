MODULE	exch$util				%TITLE 'Facility-wide misc routines'
		(
		IDENT = 'V04-000',
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE, NONEXTERNAL=WORD_RELATIVE)
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:	EXCHANGE - Foreign volume interchange facility
!
! ABSTRACT:	Miscellaneous utility routines
!
! ENVIRONMENT:	VAX/VMS User mode
!
! AUTHOR:	CW Hobbs		CREATION DATE: 8-July-1982
!
! MODIFIED BY:
!
!	V03-002	CWH3002		CW Hobbs		12-Apr-1984
!		Change the getdvi to use FULLDEVNAM.
!
!
!--

! Include files:
!
MACRO $module_name_string = 'exch$util' %;	! The require file needs to know our module name
REQUIRE 'SRC$:EXCREQ'
    ;

%SBTTL 'Module table of contents'

! Module table of contents:
!
FORWARD ROUTINE
    exch$util_block_check : jsb_r0r1r2 NOVALUE,	! Check the block type and size fields
    exch$util_dos11ctx_allocate,		! Allocate a DOS-11 file context block
    exch$util_dos11ctx_release : NOVALUE,	! Release it
    exch$util_fao_buffer,			! Pass arguments through FAO service
    exch$util_filb_allocate,			! Allocate a file block
    exch$util_filb_release : NOVALUE,		! Release a file block
    exch$util_file_error,			! Signal an RMS error
    exch$util_find_mounted_volb,		! Locate a mounted volume block in the volb in-use queue
    exch$util_namb_allocate,			! Allocate a name block
    exch$util_namb_release : NOVALUE,		! Release a name block
    exch$util_radix50_from_ascii,		! Convert an ascii string to radix50
    exch$util_radix50_to_ascii,			! Convert a radix50 string to ascii
    exch$util_rmsb_allocate,			! Allocate a file information block
    exch$util_rmsb_release : NOVALUE,		! Release a file information block
    exch$util_rt11ctx_allocate,			! Allocate an RT-11 file context block
    exch$util_rt11ctx_release : NOVALUE,	! Release it
    exch$util_vm_allocate,			! Call LIB$GET_VM and signal errors
    exch$util_vm_allocate_zeroed,		! Call LIB$GET_VM, clear memory and signal errors
    exch$util_vm_release   : NOVALUE,		! Call LIB$FREE_VM and signal errors
    exch$util_vol_getdvi,			! Fill in the device characteristics fields in a volb
    exch$util_volb_allocate,			! Allocate a volume block
    exch$util_volb_release : NOVALUE,		! Release a volume block
    exch$util_up_case	   : NOVALUE jsb_r1r2r3	! Convert string to uppercase
    ;

! EXCHANGE facility routines
!
!EXTERNAL ROUTINE
!    ;

! Equated symbols:
!
!LITERAL
!    ;

! Bound declarations:
!
!BIND
!    ;

GLOBAL ROUTINE exch$util_block_check (addr : $ref_bblock, code, 	%SBTTL 'exch$util_block_check'
					size_type : VECTOR [2, WORD]) : jsb_r0r1r2 NOVALUE =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks a data structure for correct size and type fields
!
! INPUTS:
!
!	addr      - address of the block
!	code      - error code to display if the block doesn't pass
!	size_type - size and type values, size is in high word, type in low word
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	none
!
! SIDE EFFECTS:
!
!	If the block does not pass, the image is terminated
!--

BIND
    size = size_type [1] : WORD,
    type = size_type [0] : WORD;

IF .addr EQL 0		! Add 1000 to the error code if the block address is zero, this lets
THEN			!  us distinguish missing from bad blocks without defining additional error codes
    $exch_signal_stop (exch$_blockcheck0, 1, (1000+.code));

IF   .addr [excg$w_size] NEQ .size
  OR
     .addr [excg$b_type] NEQ .type
THEN
    $exch_signal_stop (exch$_blockcheck, 6, .code, .addr,
		.addr [excg$w_size], .size, .addr [excg$b_type], .type);

RETURN;
END;

GLOBAL ROUTINE exch$util_dos11ctx_allocate (volb, filb) =	%SBTTL 'exch$util_dos11ctx_allocate (volb, filb)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine allocates one DOS-11 file context block.  If one is available, it is moved from the available 
!	queue to the in-use queue.  If none are available, then a fresh block is created and placed on the in-use 
!	queue.
!
! INPUTS:
!
!	volb - pointer to the associated volb
!	filb - pointer to the associated filb
!
! IMPLICIT INPUTS:
!
!	exch$a_gbl [excg$q_dos11ctx_all] - list of allocated file blocks
!	exch$a_gbl [excg$q_dos11ctx_avl] - queue of available file blocks
!	exch$a_gbl [excg$q_dos11ctx_use] - queue of file blocks in use
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	address of the allocated file block
!
! SIDE EFFECTS:
!
!	All errors are fatal
!--

LOCAL
    offset,					! Local temporary
    ptr		: $ref_bblock,			! A local pointer to the dos11ctx
    status
    ;


! First, try to find one in the available queue
!
ptr = $queue_remove_head (exch$a_gbl [excg$q_dos11ctx_avl]);

! If we didn't find one, then it will have to be created
!
IF .ptr EQL 0
THEN
    BEGIN

    ! Allocate a fresh dos11ctx from virtual memory.  The entire block has been cleared to nulls
    !
    ptr = exch$util_vm_allocate_zeroed (exchblk$s_dos11ctx);

    ! Place the dos11ctx at the head of the list of allocated blocks
    !
    ptr [dos11ctx$a_alloc] = .exch$a_gbl [excg$a_dos11ctx_alloc];
    exch$a_gbl [excg$a_dos11ctx_alloc] = .ptr;

    ! Set the block identification fields
    !
    $block_init (.ptr, dos11ctx);

    END;

! Check our block type, fatal error if any problems
!
$block_check (2, .ptr, dos11ctx, 578);

! Set the last part of the block to nulls
!
CH$FILL (0, dos11ctx$k_end_zero - dos11ctx$k_start_zero, .ptr + dos11ctx$k_start_zero);

! Insert the block at the head of the in-use queue
!
$queue_insert_head (ptr [dos11ctx$q_header], exch$a_gbl [excg$q_dos11ctx_use]);

! Set the two associated fields
!
ptr [dos11ctx$a_assoc_volb] = .volb;
ptr [dos11ctx$a_assoc_filb] = .filb;

! Return the address of the file block to the caller
!
RETURN .ptr;

END;

GLOBAL ROUTINE exch$util_dos11ctx_release (addr) : NOVALUE =	%SBTTL 'exch$util_dos11ctx_release (addr)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine deallocates one dos11ctx.  The block is moved from the in-use queue to the available queue.
!
! INPUTS:
!
!	addr - address of the block to release
!
! IMPLICIT INPUTS:
!
!	exch$a_gbl [excg$q_dos11ctx_avl] - queue of available file blocks
!	exch$a_gbl [excg$q_dos11ctx_use] - queue of file blocks in use
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	none
!
! SIDE EFFECTS:
!
!	All errors are fatal
!--

LOCAL
    ptr		: $ref_bblock,			! A local pointer to the dos11ctx
    status
    ;


! First, move the pointer to a local variable
!
ptr = .addr;

! Check our block type, fatal error if any problems
!
$block_check (2, .ptr, dos11ctx, 579);

! If there is a buffer allocated, free it
!
IF .ptr [dos11ctx$a_buffer] NEQ 0
THEN
    exch$util_vm_release (ctx$k_buffer_length, .ptr [dos11ctx$a_buffer]);

! Clear the pointers in the part of the block before the automatic zero
!
ptr [dos11ctx$a_assoc_filb] = 0;
ptr [dos11ctx$a_assoc_volb] = 0;
ptr [dos11ctx$a_buffer]     = 0;

! Remove the dos11ctx from where ever it is in the in-use queue
!
$queue_remove (ptr [dos11ctx$q_header]);

! Place the dos11ctx at the end of the available queue and the head of the in-use queue
!
$queue_insert_tail (ptr [dos11ctx$q_header], exch$a_gbl [excg$q_dos11ctx_avl]);

RETURN;
END;

GLOBAL ROUTINE exch$util_fao_buffer (ctrstr : REF VECTOR[2], args : VECTOR [4]) =	%SBTTL 'exch$util_fao_buffer'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine passes an ascii string through the FAO system service with any number of specified parameters.
!
! INPUTS:
!
!	ctrstr	Address of FAO control string descriptor
!	args	Any number of additional arguments
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	Address of formatted descriptor
!
! SIDE EFFECTS:
!
!	none
!--

BIND
    desc = exch$a_gbl [excg$t_fao_buffer] : VECTOR [3]
    ;


desc [0] = excg$s_fao_buffer-8;			! Set up result descriptor
desc [1] = desc [2];

$faol (ctrstr=.ctrstr, outlen=desc, outbuf=desc, prmlst=args);

RETURN desc;
END;

GLOBAL ROUTINE exch$util_filb_allocate =	%SBTTL 'exch$util_filb_allocate'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine allocates one $FILB.  If $FILBs are available, one is moved from the available queue to the
!	in-use queue.  If none are available, then a fresh $FILB is created and placed on the in-use queue.
!
! INPUTS:
!
!	none
!
! IMPLICIT INPUTS:
!
!	exch$a_gbl [excg$a_filb_all] - list of allocated file blocks
!	exch$a_gbl [excg$q_filb_avl] - queue of available file blocks
!	exch$a_gbl [excg$q_filb_use] - queue of file blocks in use
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	address of the allocated file block
!
! SIDE EFFECTS:
!
!	All errors are fatal
!--

LOCAL
    ptr		: $ref_bblock,			! A local pointer to the filb
    status
    ;


! First, try to find one in the available queue
!
ptr = $queue_remove_head (exch$a_gbl [excg$q_filb_avl]);

! If we didn't find one, then it will have to be created
!
IF .ptr EQL 0
THEN
    BEGIN

    ! Allocate a fresh filb from virtual memory.
    !
    ptr = exch$util_vm_allocate (exchblk$s_filb);

    ! Place the filb at the head of the list of allocated blocks
    !
    ptr [filb$a_alloc] = .exch$a_gbl [excg$a_filb_alloc];
    exch$a_gbl [excg$a_filb_alloc] = .ptr;

    ! Init the dynamic strings
    !
    $dyn_str_desc_init (ptr [filb$q_name_string]);

    ! Set the block identification fields
    !
    $block_init (.ptr, filb);

    END;

! Check our block type, fatal error if any problems
!
$block_check (2, .ptr, filb, 481);

! Place the filb at the head of the in-use queue
!
$queue_insert_head (ptr [filb$q_header], exch$a_gbl [excg$q_filb_use]);

! Set the last part of the block to nulls
!
CH$FILL (0, filb$k_end_zero - filb$k_start_zero, .ptr + filb$k_start_zero);

! Return the address of the file block to the caller
!
RETURN .ptr;

END;

GLOBAL ROUTINE exch$util_filb_release (addr) : NOVALUE =	%SBTTL 'exch$util_filb_release (addr)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine deallocates one $FILB.  The $FILB is moved from the in-use queue to the available queue.
!
! INPUTS:
!
!	addr - address of the block to release
!
! IMPLICIT INPUTS:
!
!	exch$a_gbl [excg$q_filb_avl] - queue of available file blocks
!	exch$a_gbl [excg$q_filb_use] - queue of file blocks in use
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	none
!
! SIDE EFFECTS:
!
!	All errors are fatal
!--

LOCAL
    ptr		: $ref_bblock,			! A local pointer to the filb
    status
    ;


! First, move the pointer to a local variable
!
ptr = .addr;

! Check our block type, fatal error if any problems
!
$block_check (2, .ptr, filb, 482);

! Remove the filb from where ever it is in the in-use queue
!
$queue_remove (ptr [filb$q_header]);

! Place the filb at the end of the available queue.
!
$queue_insert_tail (ptr [filb$q_header], exch$a_gbl [excg$q_filb_avl]);

RETURN;
END;

GLOBAL ROUTINE exch$util_file_error (msg, rms_status, fabb : $ref_bblock, stv) =	%SBTTL 'exch$util_file_error'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine signals an RMS error.  The appropriate file name for the signal is found by
!	examining the contents of the nam block.
!
! INPUTS:
!
!	msg	   Error message value, assumed to have one !AS FAO argument
!	rms_status Error message from RMS call
!	fabb	   Pointer to FAB, used to locate nam block
!	stv	   The RMS STV error from the FAB or RAB
!
! IMPLICIT INPUTS:
!
!	RMS nam block attached to the FAB (fabb)
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	msg - with inhibit signal bit set
!
! SIDE EFFECTS:
!
!	An error will be signalled
!--

LOCAL
    tmp_desc : $desc_block,			! A descriptor for the file name
    nam_blk : $ref_bblock;			! Pointer to the name block

nam_blk = .fabb [fab$l_nam];			! Get pointer to the name block
tmp_desc [dsc$b_class] = dsc$k_class_s;		! Static desc
tmp_desc [dsc$b_dtype] = dsc$k_dtype_t;  	! String desc

IF .nam_blk [nam$b_rsl] GTRU 0
THEN
    BEGIN
    tmp_desc [dsc$w_length]  = .nam_blk [nam$b_rsl];	! Create file name desc
    tmp_desc [dsc$a_pointer] = .nam_blk [nam$l_rsa];	! ...
    END
ELSE IF .nam_blk [nam$b_esl] GTRU 0
THEN
    BEGIN
    tmp_desc [dsc$w_length]  = .nam_blk [nam$b_esl];	! Create file name desc
    tmp_desc [dsc$a_pointer] = .nam_blk [nam$l_esa];	! ...
    END
ELSE
    BEGIN
    tmp_desc [dsc$w_length]  = .fabb [fab$b_fns];	! Create file name desc
    tmp_desc [dsc$a_pointer] = .fabb [fab$l_fna];	! ...
    END;

SIGNAL (.msg, 1, tmp_desc, .rms_status, .stv);

RETURN .msg;

END;

GLOBAL ROUTINE exch$util_find_mounted_volb (ident : $ref_bvector) =	%SBTTL 'exch$util_find_mounted_volb (ident)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine scans the queue of in-use volume blocks to see if any have the same name as the
!	input name.
!
! INPUTS:
!
!	ident - address of the first byte
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	0 if name not found, address of volb if name is found
!
! SIDE EFFECTS:
!
!	none
!--

$dbgtrc_prefix ('util_find_mounted_volb> ');

LOCAL
    ptr	: $ref_bblock,				! Pointer to scan along the queue
    status
    ;


! Get the first volb, and scan the list of file names
!
ptr = .exch$a_gbl [excg$a_volb_use_flink];

WHILE .ptr NEQA exch$a_gbl [excg$q_volb_use]
DO
    BEGIN

    $block_check (2, .ptr, volb, 483);

    IF CH$EQL (volb$s_vol_ident, .ident, volb$s_vol_ident, ptr [volb$t_vol_ident])
    THEN
	RETURN .ptr;

    ptr = .ptr [volb$a_flink];			! Advance to next volb in the in-use queue

    END;

RETURN 0;
END;

GLOBAL ROUTINE exch$util_namb_allocate =	%SBTTL 'exch$util_namb_allocate'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine allocates one $NAMB.  If $NAMBs are available, one is moved from the available queue to the
!	in-use queue.  If none are available, then a fresh $NAMB is created and placed on the in-use queue.
!
! INPUTS:
!
!	none
!
! IMPLICIT INPUTS:
!
!	exch$a_gbl [excg$q_namb_all] - list of allocated name blocks
!	exch$a_gbl [excg$q_namb_avl] - queue of available name blocks
!	exch$a_gbl [excg$q_namb_use] - queue of name blocks in use
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	address of the allocated name block
!
! SIDE EFFECTS:
!
!	All errors are fatal
!--

LOCAL
    offset,					! Local temporary
    ptr		: $ref_bblock,			! A local pointer to the namb
    status
    ;


! First, try to find one in the available queue
!
ptr = $queue_remove_head (exch$a_gbl [excg$q_namb_avl]);

! If we didn't find one, then it will have to be created
!
IF .ptr EQL 0
THEN
    BEGIN

    ! Allocate a fresh namb from virtual memory.  The entire block has been cleared to nulls
    !
    ptr = exch$util_vm_allocate_zeroed (exchblk$s_namb);

    ! Place the namb at the head of the list of allocated blocks
    !
    ptr [namb$a_alloc] = .exch$a_gbl [excg$a_namb_alloc];
    exch$a_gbl [excg$a_namb_alloc] = .ptr;

    ! Set the block identification fields
    !
    $block_init (.ptr, namb);

    ! Initialize the dynamic strings
    !
    $dyn_str_desc_init (ptr [namb$q_input]);
    $dyn_str_desc_init (ptr [namb$q_fullname]);
    $dyn_str_desc_init (ptr [namb$q_expanded]);
    $dyn_str_desc_init (ptr [namb$q_result]);
    $dyn_str_desc_init (ptr [namb$q_device_dvi]);

    END;

! Check our block type, fatal error if any problems
!
$block_check (2, .ptr, namb, 484);

! Place the namb at the head of the in-use queue
!
$queue_insert_head (ptr [namb$q_header], exch$a_gbl [excg$q_namb_use]);

! Set the last part of the block to nulls
!
CH$FILL (0, exchblk$s_namb - namb$k_start_zero, .ptr + namb$k_start_zero);

! Return the address of the name block to the caller
!
RETURN .ptr;

END;

GLOBAL ROUTINE exch$util_namb_release (addr) : NOVALUE =	%SBTTL 'exch$util_namb_release (addr)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine deallocates one $NAMB.  The $NAMB is moved from the in-use queue to the available queue.
!
! INPUTS:
!
!	addr - address of the block to release
!
! IMPLICIT INPUTS:
!
!	exch$a_gbl [excg$q_namb_avl] - queue of available name blocks
!	exch$a_gbl [excg$q_namb_use] - queue of name blocks in use
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	none
!
! SIDE EFFECTS:
!
!	All errors are fatal
!--

LOCAL
    ptr		: $ref_bblock,			! A local pointer to the namb
    status
    ;


! First, move the pointer to a local variable
!
ptr = .addr;

! Check our block type, fatal error if any problems
!
$block_check (2, .ptr, namb, 485);

! Remove the namb from where ever it is in the in-use queue
!
$queue_remove (ptr [namb$q_header]);

! Place the namb at the end of the available queue.
!
$queue_insert_tail (ptr [namb$q_header], exch$a_gbl [excg$q_namb_avl]);

RETURN;
END;

GLOBAL ROUTINE exch$util_radix50_from_ascii (asc_cnt, asc, r50_cnt, r50) =	%SBTTL 'exch$util_radix50_from_ascii (asc_cnt, asc, r50)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This converts ascii strings to Radix-50.
!
! INPUTS:
!
!	asc_cnt - count of ascii characters to output
!	asc     - address of buffer of ascii characters
!	r50_cnt - count of radix-50 characters
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	r50     - address of Radix-50 string
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	true if conversion went smoothly, false if anything unusual
!
! SIDE EFFECTS:
!
!	none
!--

LOCAL
    buf : $bvector [6]
    ;

EXTERNAL ROUTINE irad50 : ADDRESSING_MODE (GENERAL);	! F4P compatibility routine

$logic_check (2, (.asc_cnt LEQU 6), 165);
CH$COPY (.asc_cnt, .asc, 32, 6, buf);

irad50 (r50_cnt, buf, .r50);

RETURN true;

END;

GLOBAL ROUTINE exch$util_radix50_to_ascii (asc_cnt, r50, asc) =	%SBTTL 'exch$util_radix50_to_ascii (asc_cnt, r50, asc)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This converts Radix-50 strings to ascii.
!
! INPUTS:
!
!	asc_cnt - count of ascii characters to output
!	r50     - address of Radix-50 string.  Asc_cnt implies the length of this string.
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	asc     - address of buffer to receive ascii characters
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	true if conversion went smoothly, false if anything unusual
!
! SIDE EFFECTS:
!
!	none
!--


EXTERNAL ROUTINE r50asc : ADDRESSING_MODE (GENERAL);	! F4P compatibility routine
r50asc (asc_cnt, .r50, .asc);

RETURN true;

END;

GLOBAL ROUTINE exch$util_rmsb_allocate =	%SBTTL 'exch$util_rmsb_allocate'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine allocates one $RMSB.  If $RMSBs are available, one is moved from the available queue to the
!	in-use queue.  If none are available, then a fresh $RMSB is created and placed on the in-use queue.
!
! INPUTS:
!
!	none
!
! IMPLICIT INPUTS:
!
!	exch$a_gbl [excg$q_rmsb_all] - list of allocated file blocks
!	exch$a_gbl [excg$q_rmsb_avl] - queue of available file blocks
!	exch$a_gbl [excg$q_rmsb_use] - queue of file blocks in use
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	address of the allocated file block
!
! SIDE EFFECTS:
!
!	All errors are fatal
!--

LOCAL
    offset,					! Local temporary
    ptr		: $ref_bblock,			! A local pointer to the rmsb
    status
    ;


! First, try to find one in the available queue
!
ptr = $queue_remove_head (exch$a_gbl [excg$q_rmsb_avl]);

! If we didn't find one, then it will have to be created
!
IF .ptr EQL 0
THEN
    BEGIN

    ! Allocate a fresh rmsb from virtual memory.  The entire block has been cleared to nulls
    !
    ptr = exch$util_vm_allocate_zeroed (exchblk$s_rmsb);

    ! Place the rmsb at the head of the list of allocated blocks
    !
    ptr [rmsb$a_alloc] = .exch$a_gbl [excg$a_rmsb_alloc];
    exch$a_gbl [excg$a_rmsb_alloc] = .ptr;

    ! Set the block identification fields
    !
    $block_init (.ptr, rmsb);

    ! Several items are located at the end of the $RMSB, fill in the pointers
    !
    ptr [rmsb$a_fab]   = .ptr + rmsb$k_length;			! Fab is at end of block
    ptr [rmsb$a_rab]   = .ptr [rmsb$a_fab] + fab$k_bln;		! Rab right after Fab
    ptr [rmsb$a_nam]   = .ptr [rmsb$a_rab] + rab$k_bln;		! Nam after Rab
    ptr [rmsb$a_esbuf] = .ptr [rmsb$a_nam] + nam$k_bln;		! Expanded string after Nam
    ptr [rmsb$a_rsbuf] = .ptr [rmsb$a_esbuf] + nam$c_maxrss;	! Result string after Ebuf

    END;

! Check our block type, fatal error if any problems
!
$block_check (2, .ptr, rmsb, 407);

! Set the last part of the block to nulls
!
CH$FILL (0, exchblk$s_rmsb - rmsb$k_start_zero, .ptr + rmsb$k_start_zero);

! Insert the block at the head of the in-use queue
!
$queue_insert_head (ptr [rmsb$q_header], exch$a_gbl [excg$q_rmsb_use]);

! Return the address of the file block to the caller
!
RETURN .ptr;

END;

GLOBAL ROUTINE exch$util_rmsb_release (addr) : NOVALUE =	%SBTTL 'exch$util_rmsb_release (addr)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine deallocates one $RMSB.  The $RMSB is moved from the in-use queue to the available queue.
!
! INPUTS:
!
!	addr - address of the block to release
!
! IMPLICIT INPUTS:
!
!	exch$a_gbl [excg$q_rmsb_avl] - queue of available file blocks
!	exch$a_gbl [excg$q_rmsb_use] - queue of file blocks in use
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	none
!
! SIDE EFFECTS:
!
!	All errors are fatal
!--

LOCAL
    ptr		: $ref_bblock,			! A local pointer to the rmsb
    status
    ;


! First, move the pointer to a local variable
!
ptr = .addr;

! Check our block type, fatal error if any problems
!
$block_check (2, .ptr, rmsb, 519);

! Remove the rmsb from where ever it is in the in-use queue
!
$queue_remove (ptr [rmsb$q_header]);

! Place the rmsb at the end of the available queue and the head of the in-use queue
!
$queue_insert_tail (ptr [rmsb$q_header], exch$a_gbl [excg$q_rmsb_avl]);

RETURN;
END;

GLOBAL ROUTINE exch$util_rt11ctx_allocate (volb, filb) =	%SBTTL 'exch$util_rt11ctx_allocate (volb, filb)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine allocates one RT-11 file context block.  If one is available, it is moved from the available 
!	queue to the in-use queue.  If none are available, then a fresh block is created and placed on the in-use 
!	queue.
!
! INPUTS:
!
!	volb - pointer to the associated volb
!	filb - pointer to the associated filb
!
! IMPLICIT INPUTS:
!
!	exch$a_gbl [excg$q_rt11ctx_all] - list of allocated file blocks
!	exch$a_gbl [excg$q_rt11ctx_avl] - queue of available file blocks
!	exch$a_gbl [excg$q_rt11ctx_use] - queue of file blocks in use
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	address of the allocated file block
!
! SIDE EFFECTS:
!
!	All errors are fatal
!--

LOCAL
    offset,					! Local temporary
    ptr		: $ref_bblock,			! A local pointer to the rt11ctx
    status
    ;


! First, try to find one in the available queue
!
ptr = $queue_remove_head (exch$a_gbl [excg$q_rt11ctx_avl]);

! If we didn't find one, then it will have to be created
!
IF .ptr EQL 0
THEN
    BEGIN

    ! Allocate a fresh rt11ctx from virtual memory.  The entire block has been cleared to nulls
    !
    ptr = exch$util_vm_allocate_zeroed (exchblk$s_rt11ctx);

    ! Place the rt11ctx at the head of the list of allocated blocks
    !
    ptr [rt11ctx$a_alloc] = .exch$a_gbl [excg$a_rt11ctx_alloc];
    exch$a_gbl [excg$a_rt11ctx_alloc] = .ptr;

    ! Set the block identification fields
    !
    $block_init (.ptr, rt11ctx);

    END;

! Check our block type, fatal error if any problems
!
$block_check (2, .ptr, rt11ctx, 486);

! Set the last part of the block to nulls
!
CH$FILL (0, rt11ctx$k_end_zero - rt11ctx$k_start_zero, .ptr + rt11ctx$k_start_zero);

! Insert the block at the head of the in-use queue
!
$queue_insert_head (ptr [rt11ctx$q_header], exch$a_gbl [excg$q_rt11ctx_use]);

! Set the two associated fields
!
ptr [rt11ctx$a_assoc_volb] = .volb;
ptr [rt11ctx$a_assoc_filb] = .filb;

! Return the address of the file block to the caller
!
RETURN .ptr;

END;

GLOBAL ROUTINE exch$util_rt11ctx_release (addr) : NOVALUE =	%SBTTL 'exch$util_rt11ctx_release (addr)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine deallocates one rt11ctx.  The block is moved from the in-use queue to the available queue.
!
! INPUTS:
!
!	addr - address of the block to release
!
! IMPLICIT INPUTS:
!
!	exch$a_gbl [excg$q_rt11ctx_avl] - queue of available file blocks
!	exch$a_gbl [excg$q_rt11ctx_use] - queue of file blocks in use
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	none
!
! SIDE EFFECTS:
!
!	All errors are fatal
!--

LOCAL
    ptr		: $ref_bblock,			! A local pointer to the rt11ctx
    status
    ;


! First, move the pointer to a local variable
!
ptr = .addr;

! Check our block type, fatal error if any problems
!
$block_check (2, .ptr, rt11ctx, 487);

! If there is a buffer allocated, free it
!
IF .ptr [rt11ctx$a_buffer] NEQ 0
THEN
    exch$util_vm_release (ctx$k_buffer_length, .ptr [rt11ctx$a_buffer]);

! Clear the pointers in the part of the block before the automatic zero
!
ptr [rt11ctx$a_assoc_filb] = 0;
ptr [rt11ctx$a_assoc_volb] = 0;
ptr [rt11ctx$a_buffer]     = 0;

! Remove the rt11ctx from where ever it is in the in-use queue
!
$queue_remove (ptr [rt11ctx$q_header]);

! Place the rt11ctx at the end of the available queue and the head of the in-use queue
!
$queue_insert_tail (ptr [rt11ctx$q_header], exch$a_gbl [excg$q_rt11ctx_avl]);

RETURN;
END;

GLOBAL ROUTINE exch$util_vm_allocate (size) =	%SBTTL 'exch$util_vm_allocate (size)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine calls the LIB$GET_VM service to allocate dynamic memory.
!
! INPUTS:
!
!	size	Number of bytes to allocate (by value)
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	address of the allocated memory
!
! SIDE EFFECTS:
!
!	All errors are fatal
!--

LOCAL
    addr,
    status
    ;

IF NOT (status = lib$get_vm (size, addr))	! Pass the call through
THEN
    $exch_signal_stop (.status);

RETURN .addr;
END;

GLOBAL ROUTINE exch$util_vm_allocate_zeroed (size) =	%SBTTL 'exch$util_vm_allocate_zeroed (size)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine allocates dynamic memory.  The memory contents are set to nulls.
!
! INPUTS:
!
!	size	Number of bytes to allocate (by value)
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	address of the allocated memory
!
! SIDE EFFECTS:
!
!	All errors are fatal
!--

REGISTER
    addr,					! address of new memory
    chunk : INITIAL (65535),			! used to force a large constant into a register
    tmp_adr,					! temp pointer and size
    tmp_siz
    ;


! Allocate the memory
!
addr = exch$util_vm_allocate (.size);

! Zap the entire piece of memory to nulls.  Since the VAX architecture only supports short strings, we must chop
! it into 64K chunks
!
tmp_adr = .addr;
tmp_siz = .size;
WHILE .tmp_siz GTRU .chunk
DO
    BEGIN
    CH$FILL (0, .chunk, .tmp_adr);
    tmp_adr = .tmp_adr + .chunk;
    tmp_siz = .tmp_siz - .chunk;
    END;

! Do the last (usually only) piece of memory
!
CH$FILL (0, .tmp_siz, .tmp_adr);

RETURN .addr;
END;

GLOBAL ROUTINE exch$util_vm_release (size, addr) : NOVALUE =	%SBTTL 'exch$util_vm_release (size, addr)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine calls the LIB$FREE_VM service to release dynamic memory.
!
! INPUTS:
!
!	size	Number of bytes to release (by value)
!	addr	Address of longword containing address of memory to release
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	Success, or status code of error converted to warning severity
!
! SIDE EFFECTS:
!
!	Errors are signalled
!--

LOCAL
    status
    ;

IF NOT (status = lib$free_vm (size, addr))	! Pass the call through, no dots tho
THEN
    $exch_signal_stop (.status);

RETURN;
END;

GLOBAL ROUTINE exch$util_vol_getdvi (devname : REF $desc_block, 	%SBTTL 'exch$util_vol_getdvi (devname, volb)'
					volb : $ref_bblock) =
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Get standard device information for a volb
!
! INPUTS:
!
!	devname - address of descriptor for device name
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	volb - several characteristics fields in the volb are filled in
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	Success or worst error encountered.
!
! SIDE EFFECTS:
!
!	none
!--

$dbgtrc_prefix ('util_vol_getdvi> ');

LOCAL
    status,
    dev_item : VECTOR [22, LONG]
    ;

$block_check (2, .volb, volb, 488);

! Initialize the item list for the $GETDVI
!
dev_item  [0] = (dvi$_devbufsiz^16 OR 4);	! Device buffer size, output length 4
dev_item  [1] = volb [volb$l_devbufsiz];	! Address of output buffer
dev_item  [2] = 0;				! No returned length
dev_item  [3] = (dvi$_devchar^16 OR 4);
dev_item  [4] = volb [volb$l_devchar];
dev_item  [5] = 0;
dev_item  [6] = (dvi$_devclass^16 OR 4);
dev_item  [7] = volb [volb$l_devclass];
dev_item  [8] = 0;
dev_item  [9] = (dvi$_devdepend^16 OR 4);
dev_item [10] = volb [volb$l_devdepend];
dev_item [11] = 0;
dev_item [12] = (dvi$_fulldevnam^16 OR 16);
dev_item [13] = volb [volb$t_devnam];
dev_item [14] = volb [volb$l_devnamlen];
dev_item [15] = (dvi$_devtype^16 OR 4);
dev_item [16] = volb [volb$l_devtype];
dev_item [17] = 0;
dev_item [18] = (dvi$_maxblock^16 OR 4);
dev_item [19] = volb [volb$l_devmaxblock];
dev_item [20] = 0;
dev_item [21] = 0;				! End of GETDVI item list

! Get the device information
!
IF NOT (status = $getdviw (efn=0, devnam=.devname, itmlst=dev_item))
THEN
    RETURN .status;

! Do any manipulations necessary with the raw device info
!
volb [volb$l_volmaxblock] = .volb [volb$l_devmaxblock];	! Assume device and volume same size

! Debugging trace code
!
%IF switch_trace
%THEN
    BEGIN
    EXTERNAL ROUTINE
	exch$dbg_utl_print_devchar;
    LOCAL
	tmp_desc : $desc_block;
    BIND
	dep = volb [volb$l_devdepend] : $bblock;

    $stat_str_desc_init (tmp_desc, .volb [volb$l_devnamlen], volb [volb$t_devnam]);
    $trace_print_fao ('Getdvi for name "!AS" resolved to device "!AS"', .devname, tmp_desc);
    $trace_print_fao ('Bufsiz = !UL,  Maxblocks = !UL,  Class = !XB,  Type = !XB', .volb [volb$l_devbufsiz],
		.volb [volb$l_devmaxblock], .volb [volb$l_devclass], .volb [volb$l_devtype]);
    $trace_print_fao ('Cylinders = !UL, Tracks = !UL, Sectors = !UL, DevChar = !XL',
	    .dep[0,16,16,0], .dep[0,8,8,0], .dep[0,0,8,0], .volb [volb$l_devchar]);
    exch$dbg_utl_print_devchar  (.volb [volb$l_devchar]);
    END;
%FI

RETURN .status;
END;

GLOBAL ROUTINE exch$util_volb_allocate =	%SBTTL 'exch$util_volb_allocate'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine allocates one $VOLB.  If $VOLBs are available, one is moved from the available queue to the
!	in-use queue.  If none are available, then a fresh $VOLB is created and placed on the in-use queue.
!
! INPUTS:
!
!	none
!
! IMPLICIT INPUTS:
!
!	exch$a_gbl [excg$a_volb_alloc] - list of allocated volume blocks
!	exch$a_gbl [excg$q_volb_avl]   - queue of available volume blocks
!	exch$a_gbl [excg$q_volb_use]   - queue of volume blocks in use
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	address of the allocated volume block
!
! SIDE EFFECTS:
!
!	All errors are fatal
!--

LOCAL
    offset,					! Local temporary
    ptr		: $ref_bblock,			! A local pointer to the volb
    status
    ;


! First, try to find one in the available queue
!
ptr = $queue_remove_head (exch$a_gbl [excg$q_volb_avl]);

! If we didn't find one, then it will have to be created
!
IF .ptr EQL 0
THEN
    BEGIN

    ! Allocate a fresh volb from virtual memory.  The entire block has been cleared to nulls
    !
    ptr = exch$util_vm_allocate_zeroed (exchblk$s_volb);

    ! Place the volb at the head of the list of allocated blocks
    !
    ptr [volb$a_alloc] = .exch$a_gbl [excg$a_volb_alloc];
    exch$a_gbl [excg$a_volb_alloc] = .ptr;

    ! Set the block identification fields
    !
    $block_init (.ptr, volb);

    ! Several items are located at the end of the $VOLB, fill in the pointers
    !
    ptr [volb$a_fab]   = .ptr + volb$k_length;			! Fab is at end of block
    ptr [volb$a_rab]   = .ptr [volb$a_fab] + fab$k_bln;		! Rab right after Fab
    ptr [volb$a_nam]   = .ptr [volb$a_rab] + rab$k_bln;		! Nam after Rab
    ptr [volb$a_esbuf] = .ptr [volb$a_nam] + nam$k_bln;		! Expanded string after Nam
    ptr [volb$a_rsbuf] = .ptr [volb$a_esbuf] + nam$c_maxrss;	! Result string after Ebuf

    END;

! Check our block type, fatal error if any problems
!
$block_check (2, .ptr, volb, 489);

! Set the last part of the block to nulls
!
CH$FILL (0, exchblk$s_volb - volb$k_start_zero, .ptr + volb$k_start_zero);

! Place the volb at the head of the in-use queue
!
$queue_insert_head (ptr [volb$q_header], exch$a_gbl [excg$q_volb_use]);

! Return the address of the volume block to the caller
!
RETURN .ptr;

END;

GLOBAL ROUTINE exch$util_volb_release (addr) : NOVALUE =	%SBTTL 'exch$util_volb_release (addr)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine deallocates one $VOLB.  The $VOLBs is moved from the in-use queue to the available queue.
!
! INPUTS:
!
!	addr - address of the block to release
!
! IMPLICIT INPUTS:
!
!	exch$a_gbl [excg$q_volb_avl] - queue of available volume blocks
!	exch$a_gbl [excg$q_volb_use] - queue of volume blocks in use
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	none
!
! SIDE EFFECTS:
!
!	All errors are fatal
!--

LOCAL
    ptr		: $ref_bblock,			! A local pointer to the volb
    spc		: $ref_bblock,			! Pointer to volume specific structure
    status
    ;


! First, move the pointer to a local variable
!
ptr = .addr;

! Check our block type, fatal error if any problems
!
$block_check (2, .ptr, volb, 490);

! Perform some volume specific actions on the specific pointer
!
IF (spc = .ptr [volb$a_vfmt_specific]) NEQ 0
THEN
    BEGIN
    LOCAL
	block_size
	;

    CASE .ptr [volb$b_vol_format] FROM volb$k_vfmt_lobound TO volb$k_vfmt_hibound OF
    SET
	[volb$k_vfmt_dos11] :	BEGIN
				LOCAL
				    ent : $ref_bblock;

				! Follow the chain of entries and release them
				!
				WHILE (ent = $queue_remove_head (spc [dos11$q_entry_header]))
				DO
				    exch$util_vm_release (dos11ent$k_length, .ent);	! Release the entry

				block_size = exchblk$s_dos11;
				END;

	[volb$k_vfmt_rt11] :	block_size = exchblk$s_rt11;

	[INRANGE, OUTRANGE] :	$logic_check (0, (false), 250);

    TES;

    exch$util_vm_release (.block_size, .spc);		! Release the extension
    END;

! Remove the volb from where ever it is in the in-use queue
!
$queue_remove (ptr [volb$q_header]);

! Place the volb at the end of the available queue
!
$queue_insert_tail (ptr [volb$q_header], exch$a_gbl [excg$q_volb_avl]);

RETURN;
END;

GLOBAL ROUTINE exch$util_up_case (in_siz, in_ptr, out_ptr) : NOVALUE jsb_r1r2r3 =	%SBTTL 'exch$util_up_case'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine converts a string to uppercase.  In testing it appears to be faster to do this sort
!	of loop than to execute the MOVTC instruction on the 11/780.
!
! INPUTS:
!
!	in_siz  = size of input record to convert
!	in_ptr  = address of input record to convert
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	out_ptr = address of output record buffer
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	none
!
! SIDE EFFECTS:
!
!	Input record copied to output record buffer and all
!	lowercase alphabetic characters converted to uppercase.
!--

REGISTER
    char : BYTE					! Character to test
    ;

DECR count FROM .in_siz-1 TO 0 			! Upcase the characters
DO
    BEGIN
    char = CH$RCHAR_A (in_ptr);			! Get next character
    IF  .char GEQU 'a'  AND  .char LEQU 'z'	! Lower case letter?
    THEN
	char = .char - %O'40';			! Convert to upper
    CH$WCHAR_A (.char,out_ptr);			! Move character to buffer
    END;

RETURN;
END;

END
ELUDOM
