MODULE gcode (	IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					    NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	Generates intermediate code for paper positioning.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	 CREATION DATE: June, 1978


%SBTTL 'Revision History'
! MODIFIED BY:
!
!	009	RER00009	Ron Randall	17-Mar-1983
!		For DSRPLUS:  Added code related to topnote tests.
!
!	008	RER00008	Ron Randall	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!--


%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    gcpage	: NOVALUE,
    gcpos	: NOVALUE,
    gcskip	: NOVALUE,
    gtpc	: NOVALUE,
    guskip	: NOVALUE;

!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL
    rintes	: UNSIGNED (8);

EXTERNAL
    fnct	: fnct_definition,
    gca		: gca_definition,
    irac	: irac_definition,
    mra		: REF FIXED_STRING,
    sca		: sca_definition,
    tsf		: tsf_definition;

%IF DSRPLUS %THEN
EXTERNAL
    topnot	: tn_definition;
%FI

EXTERNAL ROUTINE
    outcrg;


GLOBAL ROUTINE gcpage : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Generates code for starting a new page, if not already
!	at the top of a page.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN

    IF  .fnct_collecting			! Don't start a new page if
    THEN 					! footnotes are being collected,
	RETURN;					! since footnotes all belong on
						! one page.
    fs_wchar (mra, rintes);
    fs_wchar (mra, %C'p');
    fs_wchar (mra, %C' ');
    tsf_int_vl = .tsf_int_vl + 3;
    END;					! End of GCPAGE


GLOBAL ROUTINE gcpos (position) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Generates code to position to a particular line on a page.
!
! FORMAL PARAMETERS:
!
!	position - Indicates which line is to be positioned to.
!		   Negative means from the bottom of the page;
!		   positive means from the top.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    LOCAL
	tsf_phregs : REF VECTOR [tsf_nregs];

    !
    ! Don't go anywhere if footnotes are being collected.  Leave
    ! the paper positioned where it is.
    !
    IF  .fnct_collecting
    THEN
	RETURN;

    tsf_phregs = tsf__phregs;

    IF  .tsf_next_reg GEQ tsf_nregs
    !
    ! Be sure not to allocate too many "registers".
    !
    THEN
	outcrg ();

    tsf_phregs [.tsf_next_reg] = .position;
    fs_wchar (mra, rintes);
    fs_wchar (mra, %C'g');
    fs_wchar (mra, .tsf_next_reg);
    tsf_int_vl   = .tsf_int_vl + 3;
    tsf_next_reg = .tsf_next_reg + 1;
    tsf_bar_char = .sca_bar_char;		! Propogate change bars.
    tsf_bars     = .tsf_bars OR .irac_bars;
    END;					! End of GCPOS


GLOBAL ROUTINE gcskip (spacing) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Generate code to skip lines that don't occur at the top
!	of a page.
!
! FORMAL PARAMETERS:
!
!	spacing - Indicates how many lines are to be skipped.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    LOCAL
	tsf_phregs : REF VECTOR [tsf_nregs];

    tsf_phregs = tsf__phregs;

    IF  .spacing LEQ 0
    THEN
	RETURN;			! Don't generate code for single spacing.

    IF  .tsf_next_reg GEQ tsf_nregs	! Don't allocate too many "registers".
    THEN
	outcrg ();

    tsf_phregs [.tsf_next_reg] = .spacing;
    fs_wchar (mra, rintes);

%IF DSRPLUS %THEN
    !
    ! If collecting topnotes, make the lines unconditional and count them.
    !
    IF  .tn_collecting
    THEN
	BEGIN
	fs_wchar (mra, %C'u');
	tsf_lines = .tsf_lines + .spacing;
	END
    ELSE
	BEGIN
%FI
    !
    ! If collecting footnotes, make the lines unconditional and count them.
    !
    IF  .fnct_collecting
    THEN
	BEGIN
	fs_wchar (mra, %C'u');
	tsf_lines = .tsf_lines + .spacing;
	END
    ELSE
	fs_wchar (mra, %C's');

%IF DSRPLUS %THEN
	END;
%FI

    fs_wchar (mra, .tsf_next_reg);
    tsf_int_vl   = .tsf_int_vl + 3;
    tsf_next_reg = .tsf_next_reg + 1;
    tsf_bar_char = .sca_bar_char;		! Propogate change bars.
    tsf_bars     = .tsf_bars OR .irac_bars;
    END;					! End of GCSKIP


GLOBAL ROUTINE gtpc (count) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Generates intermediate code for a .TEST PAGE command.
!
! FORMAL PARAMETERS:
!
!	count - Specifies how many free lines should be tested for.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    LOCAL
	tsf_phregs : REF VECTOR [tsf_nregs];

    tsf_phregs = tsf__phregs;

    !
    ! If collecting a footnote, don't bother to do a test page, since
    ! the text will fit by definition.
    !
    IF  .fnct_collecting
    THEN
	RETURN;

%IF DSRPLUS %THEN
    !
    ! If collecting a topnote, don't bother to do a test page.
    !
    IF  .tn_collecting
    THEN
	RETURN;
%FI

    IF  .tsf_next_reg GEQ tsf_nregs	! Don't allocate too many "registers".
    THEN
	outcrg ();

    tsf_phregs [.tsf_next_reg] = .count;
    fs_wchar (mra, rintes);			! If (test page..)
    fs_wchar (mra, %C't');
    fs_wchar (mra, .tsf_next_reg);
    fs_wchar (mra, rintes);			! end THEN
    fs_wchar (mra, %C'.');
    fs_wchar (mra, %C' ');
    fs_wchar (mra, rintes);			! else (page..)
    fs_wchar (mra, %C'p');
    fs_wchar (mra, %C' ');
    fs_wchar (mra, rintes);			! end ELSE
    fs_wchar (mra, %C'.');
    fs_wchar (mra, %C' ');
    tsf_int_vl   = .tsf_int_vl + 12;
    tsf_next_reg = .tsf_next_reg + 1;
    tsf_bar_char = .sca_bar_char;		! Propogate change bars.
    tsf_bars     = .tsf_bars OR .irac_bars;
    END;					! End of GTPC


GLOBAL ROUTINE guskip (spacing) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Generates code to skip unconditionally a number of lines.
!
! FORMAL PARAMETERS:
!
!	spacing - Indicates how many lines should be skipped.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    LOCAL
	tsf_phregs : REF VECTOR [tsf_nregs];

    tsf_phregs = tsf__phregs;

    IF  .spacing LEQ 0
    THEN
	RETURN;			! Don't generate code for single spacing.

    IF  .tsf_next_reg GEQ tsf_nregs	! Don't allocate too many "registers".
    THEN
	outcrg ();

    tsf_phregs [.tsf_next_reg] = .spacing;
    fs_wchar (mra, rintes);
    fs_wchar (mra, %C'u');
    fs_wchar (mra, .tsf_next_reg);
    tsf_int_vl   = .tsf_int_vl + 3;
    tsf_next_reg = .tsf_next_reg + 1;
    tsf_bar_char = .sca_bar_char;		! Propogate change bars.
    tsf_bars     = .tsf_bars OR .irac_bars;

    !
    ! If collecting a footnote, count the number of lines to be generated.
    !
    IF  .fnct_collecting
    THEN
	tsf_lines = .tsf_lines + .spacing;

%IF DSRPLUS %THEN
    !
    ! If collecting a topnote, count the number of lines to be generated.
    !
    IF  .tn_collecting
    THEN
	tsf_lines = .tsf_lines + .spacing;
%FI

    END;					! End of GUSKIP

END						! End of module
ELUDOM
