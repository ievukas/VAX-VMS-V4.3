%TITLE 'file processing interface and command line handler'
MODULE clh (	IDENT = 'V04-000'
		%BLISS32 [, ADDRESSING_MODE (EXTERNAL    = long_relative,
					     NONEXTERNAL = long_relative)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	File processing interface and command line handler.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	CREATION DATE:	April, 1978
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	041	REM00041	Ray Marshall	23-February-1984
!		Moved IN_TYPE and OUT_TYPE to GLBDAT.BLI and renamed them to
!		  IPFTOP and OPFTOP respectivly.  Also created there another
!		  global variable and one global literal to support new logic
!		  herein.  All this was done because in VMS V4 there is a new
!		  feature (search lists) which necessatates our making calls
!		  to LIB$FIND_FILE to find input files after the first one
!		  when multiple input files are specified.  To do this, the
!		  logic to verify the input filespec was copied to a new
!		  routine within RUNOFF.BLI and changes were made herein to
!		  the sections that open the output and input files.
!
!	040	KFA00040	Ken Alden	20-Jul-1983
!		Fixed wild card bug interaction with /auto.
!
!	039	KFA00039	Ken Alden	10-Jun-1983
!		Improved error handling of wild-carding input file names.
!
!	038	KFA00038	Ken Alden	4-May-1983
!		Added conditional for gca_skip_out in OUT_NO_CRLF branch.
!
!	037	KAD00037	Keith Dawson	14-Apr-1983
!		Fixed bug: FLIP (.BFL) output file was not being opened.
!
!	036	KAD00036	Keith Dawson	22-Mar-1983
!		Added LN01 support.
!
!	035	KFA00035	Ken Alden	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    GET_OUT_DEFAULT : NOVALUE,
    BWAIT : NOVALUE,
    FBWAIT : NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
MACRO
    XPROMPT (TEXT) =
	($XPO_PUT( IOB = TTOIOB
	,STRING = ( %CHARCOUNT(TEXT)
	,CH$PTR(UPLIT(TEXT))) )  )%;

!
! OWN STORAGE:
!
OWN
    status;

OWN
    DEF_OUT_LNG,
    DEF_OUT_SPC : VECTOR [CH$ALLOCATION (50)];

!
! EXTERNAL REFERENCES:
!
EXTERNAL
    fra : FIXED_STRING,
    gca : GCA_DEFINITION,
    fs01 : FIXED_STRING,
    ira : FIXED_STRING,
    irac : IRAC_DEFINITION,
    ipftyp,			! Cell in GLBDAT to hold the index into IPFTOP
    ipftop : VECTOR,
    opftop : VECTOR;

EXTERNAL
    IOBSTK : BLOCK,				!IOB stack for doing .REQUIRE.
    RNEIOB : REF $XPO_IOB (),			!Always points to IOB for primary input.
    RNIIOB : REF $XPO_IOB (),			!Primary input file
    RNOIOB : REF $XPO_IOB (),			!IOB for output file
    TSIIOB : $XPO_IOB (),			!IOB for STREAM input from terminal.
    TTIIOB : $XPO_IOB (),			!IOB for input from terminal
    TTOIOB : $XPO_IOB ();			!IOB for output to terminal

EXTERNAL LITERAL
    ipftct,	! Literal defining the lengths of IPFTOP and OPFTOP.

	    ! Error messages
    rnfile,
%IF dsrplus %THEN
    rnfoft,
%FI
    rnfrtl;

EXTERNAL ROUTINE
    ERMS,
%IF DSRPLUS %THEN
    ERM,
%FI
    GRAB_RESULTANT,
    PUTMSG,
    TSTTFE;


%sbttl 'CLH -- OPCODE controlled main-line routine'
GLOBAL ROUTINE clh (opcode) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	OPCODE specifies the operation to be performed.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	See CLHCC.REQ for a description.
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    LOCAL
	temp;

    CASE .opcode FROM 1 TO clh_ops_count OF
	SET


%sbttl 'CLH -- open input file'

	[CLH_OPEN_INPUT] :	    ! Open primary input file.
	    BEGIN

%IF NOT %BLISS(BLISS32) AND DSRPLUS %THEN

    	    INCR I FROM 0 TO (ipftct-1) DO	! fourteen different file types
		BEGIN				! loop until one found.
		IF .gca_pass_count GTR 1
		THEN
		    BEGIN
		    status = $XPO_OPEN  (IOB     = .rniiob
					,OPTIONS = INPUT
					,DEFAULT = (4, .ipftop [ .ipftyp ])
					,FAILURE = grab_resultant);
		    IF .status
		    THEN
			I = .ipftyp;
		    END
		ELSE
		    status = $XPO_OPEN  (IOB     = .rniiob
				    ,OPTIONS = INPUT
				    ,DEFAULT = (4, .ipftop [.I ])
				    ,FAILURE = grab_resultant);

		IF .status THEN EXITLOOP  ! If we open a file, exit the INCR loop

		END;		!end of INCR loop.
%ELSE
	    status = $XPO_OPEN  (IOB     = .rniiob
				,OPTIONS = INPUT
				,DEFAULT = (4, CH$PTR (UPLIT ('.RNO')))
				,FAILURE = grab_resultant);
%FI
	    IF  .status			! Succeeded in opening (any type)?
	    THEN
		BEGIN			!    Yes...
		BIND
		    file_spec_stuff = rniiob [iob$t_resultant] : $STR_DESCRIPTOR ();

		! Pick off the name and length of the file spec for ERROR.BLI:

		irac_fspecp = .file_spec_stuff [str$a_pointer];
		irac_fspecc = .file_spec_stuff [str$h_length];

%IF NOT %BLISS(BLISS32) AND DSRPLUS %THEN
		ipftyp = .i;
	        IF  (.I GTR 0)		!Succeeded in opening, but not '.RNO'.
	        THEN
		    ERM (rnfoft);
%FI
		RETURN clh_normal
		END
	    ELSE		! Open failed.
		RETURN clh_cant_open
	    END;

%sbttl 'CLH -- open output file'

	[CLH_OPEN_OUT] :
	    ! Open output file.
	    BEGIN
	    get_out_default (rniiob [iob$t_resultant]);

	    CASE .gca_op_dev FROM op_dev_first TO op_dev_last OF

		SET

	        [op_dev_line_printer, op_dev_diablo] :
		    !
		    !Normal cases: lineprinter output. Open STREAM output file using
		    !file type already determined (.MEM, .MEC, or whatever).
		    !
		    status = $XPO_OPEN
			    (IOB        = .rnoiob
			    ,OPTIONS    = OUTPUT
			    ,ATTRIBUTES = STREAM
			    ,RELATED    = rniiob [iob$t_resultant]
			    ,DEFAULT    = (.def_out_lng, CH$PTR (def_out_spc))
			    ,FAILURE    = grab_resultant
			    );
%IF DSRPLUS %THEN
		[op_dev_vt100] :

		    IF NOT .gca_s_output
		    THEN
			!
			!User said /DEC=VT100, and did not say /OUTPUT=name,
			!so send output to TT: (SYS$OUTPUT).
			!
			status = $XPO_OPEN
				(IOB       = .rnoiob
				,OPTIONS   = OUTPUT
				,FILE_SPEC = $XPO_OUTPUT
				,RELATED   = rniiob [iob$t_resultant]
				,DEFAULT   = (.def_out_lng, CH$PTR (def_out_spc))
				,FAILURE   = grab_resultant
				)
		    ELSE
			!
			!Open non-STREAM output file using file type already
			!determined (.VT1).
			!
			status = $XPO_OPEN
				(IOB        = .rnoiob
				,OPTIONS    = OUTPUT
				,RELATED    = rniiob [iob$t_resultant]
				,DEFAULT    = (.def_out_lng, CH$PTR (def_out_spc))
				,FAILURE    = grab_resultant
				);
%FI
%IF LN01 %THEN
		[op_dev_ln01, op_dev_ln01e] :
		    !
		    !Open non-STREAM output file using file type already
		    !determined (.LNI).
		    !
		    status = $XPO_OPEN
				(IOB        = .rnoiob
				,OPTIONS    = OUTPUT
				,RELATED    = rniiob [iob$t_resultant]
				,DEFAULT    = (.def_out_lng, CH$PTR (def_out_spc))
				,FAILURE    = grab_resultant
				);
%FI
%IF FLIP %THEN
		[op_dev_flip] :
		    !
		    !Open non-STREAM output file using file type already
		    !determined (.BFL).
		    !
		    status = $XPO_OPEN
				(IOB        = .rnoiob
				,OPTIONS    = OUTPUT
				,RELATED    = rniiob [iob$t_resultant]
				,DEFAULT    = (.def_out_lng, CH$PTR (def_out_spc))
				,FAILURE    = grab_resultant
				);
%FI
		[INRANGE] : 0;
		[OUTRANGE] : 0;

		TES;

	    IF  NOT .status
	    THEN
		RETURN clh_cant_open
	    ELSE
		RETURN clh_normal;

	    END;

%sbttl 'CLH -- Read one record from current input file'

	[CLH_READ_INPUT] :
	    ! Read one record from current input file.
	    BEGIN
	    status = $XPO_GET (IOB = .rniiob);

	    IF  .status  OR			!  If no error in above get or
		(.status EQL xpo$_truncated)	!Truncated records are really not too bad.
	    THEN
		! A record was successfully read. Set up information
		! needed by the remainder of the program.
		BEGIN
		irac_iseqn  = .rniiob [iob$g_seq_numb];	!Input record/sequence number.
		irac_ipagen = .rniiob [iob$h_page_numb];	!Input page number.
		irac_seqn_flag = .rniiob [iob$v_sequenced];	!Indicates meaning of IRAC_ISEQN.

		! Inform user if it was a truncated record that was read.
		IF  .status EQL xpo$_truncated
		THEN
		    erms (rnfrtl
			 ,.rniiob [iob$a_string]
			 ,min (.rniiob [iob$h_string]
			 ,50));

		! Set up the input as a FIXED_STRING.
		fs_start (ira)   = .rniiob [iob$a_string];
		fs_next (ira)    = .fs_start (ira);
		fs_maxsize (ira) = .rniiob [iob$h_string];
		fs_length (ira)  = .fs_maxsize (ira);

!******PATCH TO GET AROUND XPORT DEFICIENCIES
!Upon entering this block, the fixed string IRA is set up such that
!FS_NEXT(IRA) returns a CH$PTR to the first character to be processed.
!The contents of KHAR are undefined.  The block is exited with the
!same conditions holding; the only effects are:
!	1. Updating the input page/line counters, and
!	2. Movement of FS_NEXT(IRA) over all LEADING formfeeds, nulls,
!	   and dels.

		BEGIN

		LITERAL
		    ff = %O'014';

		LOCAL
		    ptr,
		    x;

		WHILE (.fs_length (ira) GTR 0) DO

		    BEGIN
		    ! First point to the character about to be considered.
		    ptr = .fs_next (ira);
		    ! Now, actually pick up the character.  Note that
		    ! FS_RCHAR is not used because it advances its pointer
		    ! such that if this character is not to be discarded
		    ! we can't back up.
		    x = CH$RCHAR (.ptr);

		    SELECT .x OF
			SET

			[FF] :
			    BEGIN
			    ! If the file is sequenced, LEADING formfeeds do not
			    ! start new pages; the assumption here is that the
			    ! file will be looked at using the same editor (presumably SOS)
			    ! as the one that created it, and that editor behaves like
			    ! SOS.  The action for sequenced files is
			    ! simply to ignore the formfeed.
			    ! For unsequenced files, leading formfeeds do start new
			    ! pages, especially if you look at that file using SOS.
			    ! In such cases, XPORT does not pay attention to the
			    ! formfeeds, and feeds them through without counting a
			    ! new page.  In this case, WE have to look for them and
			    ! set up the page and sequence number items.
			    ! (Note however that XPORT does count pagemarks).

			    IF  NOT .rniiob [iob$v_sequenced]
			    THEN
				BEGIN
				irac_ipagen = .irac_ipagen + 1;
				irac_iseqn = 1;
				rniiob [iob$g_seq_numb] = .irac_iseqn;
				rniiob [iob$h_page_numb] = .irac_ipagen;
				END;

			    END;

			[0, FF, DEL] :
			    BEGIN
			    ! Actually read the character that is being rejected.
			    ! This results in FS_NEXT(IRA) pointing to the next
			    ! character that is to be considered.
			    fs_rchar (ira, x);	! (X is a dummy for this one line.)
			    END;

			[OTHERWISE] :
			    EXITLOOP;

			TES;

		    END;

		END;
!******END OF PATCH

		RETURN clh_normal;
		END
	    ELSE
		BEGIN

		IF  .status EQL xpo$_end_file
		THEN 				! End of file processing
		    BEGIN

		    IF  .gca_req_depth NEQ 0
		    THEN
			! It's a ".REQUIRE" file to be closed.
			BEGIN
			clh (clh_pop);
			! Note that the following is a recursive call on this
			! particular code sequence.  When CLH encounters an end
			! of file when it attempts to read a record from a
			! require file, it must still, nevertheless, return a
			! record, unless there is not more input.  If a
			! .REQUIRE command is the last record read from the
			! file that referenced the file just closed, then the
			! attempt to read a record from that file will also
			! meet with an end of file being detected.  In this
			! case, you have to pop that file too, and try again.
			! That happens until either a record is finally read,
			! or all files have been popped and an end of file
			! occurs when trying to read the main input file.
			RETURN clh (clh_read_input);
			END;

		    ! End of file on primary input file.
		    fs_length (ira) = 0;
		    RETURN clh_end_file;
		    END
		ELSE
		! Error reading input file.
		    BEGIN
		    fs_length (ira) = 0;
		    RETURN clh_cant_read;
		    END;

		END;

	    END;


%sbttl 'CLH -- Write 1 record to O/P file with CRLF suffix'

	[CLH_WRITE_OUT] :
	    ! Write one record to the output file.
	    BEGIN

%IF FLIP %THEN
	    LOCAL
		temp_record : $flip_rnotxt;
%FI

	    ! Append carriage control information to the record
	    fs_wchar (fra, %O'15');		!Carriage return
	    fs_wchar (fra, %O'12');		!Line feed

%IF FLIP %THEN
	    IF  (.gca_op_dev EQL op_dev_flip)
	    THEN
		BEGIN
		temp_record [rnotxt_code]   = flip$k_rnotxt;
		temp_record [rnotxt_length] = .fs_length (fra);
		CH$MOVE (.fs_length (fra)
			,.fs_start (fra)
			,CH$PTR (temp_record [rnotxt_text]));
		status = $XPO_PUT (IOB    = .rnoiob,
				   STRING = (flip$k_rnotxt_basesiz +
					     .fs_length (fra),
					     CH$PTR (temp_record)));
		END
	    ELSE
%FI

		status = $XPO_PUT  (IOB    = .rnoiob,
				    STRING = (.fs_length (fra),
					      .fs_start  (fra)));

	    ! Remove the appended characters from the end of the buffer
	    fs_next   (fra) = CH$PLUS (.fs_next (fra), -2);	!Back up pointer
	    fs_length (fra) = .fs_length (fra) - 2;		!Back up counter

	    IF  .status
	    THEN
		RETURN clh_normal;

	    END;


%sbttl 'CLH -- Write 1 record to O/P file w/o CRLF suffix'

	[CLH_OUT_NOCRLF] :
	    ! Write one record to the output file. Don't add carriage control information.
	    BEGIN
    	    IF NOT .gca_skip_out
    	    THEN
    		BEGIN
%IF FLIP %THEN
	    	LOCAL
		    TEMP_RECORD : $FLIP_RNOTXT;

	    	IF  (.gca_op_dev EQL op_dev_flip)
	    	THEN
		    BEGIN
		    TEMP_RECORD[RNOTXT_CODE] = FLIP$K_RNOTXT;
		    TEMP_RECORD[RNOTXT_LENGTH] = .FS_LENGTH(FRA);
		    CH$MOVE( .FS_LENGTH(FRA),.FS_START(FRA)
			    ,CH$PTR(TEMP_RECORD[RNOTXT_TEXT]));
		    STATUS = $XPO_PUT( IOB=.RNOIOB
				  ,STRING=( FLIP$K_RNOTXT_BASESIZ+.FS_LENGTH(FRA)
					   ,CH$PTR(TEMP_RECORD) ) );
		    END
		ELSE
%FI

		    STATUS = $XPO_PUT ( IOB = .RNOIOB
					   ,STRING = ( .FS_LENGTH (FRA)
					      ,.FS_START (FRA) ) );
    		END;

	    IF  .STATUS OR .gca_skip_out
	    THEN
		RETURN CLH_NORMAL;

	    END;


%sbttl 'CLH -- file closing functions'
	[CLH_CLOSE_INPUT] :
	    ! Close current input file.
	    BEGIN
	    STATUS = $XPO_CLOSE ( IOB = .RNIIOB
				 ,FAILURE = grab_resultant);
	    RETURN CLH_NORMAL;
	    END;

	[CLH_CLOSE_OUT] :
	    ! Close output file
	    BEGIN
	    STATUS = $XPO_CLOSE ( IOB = .RNOIOB
				 ,FAILURE = grab_resultant);
	    RETURN CLH_NORMAL;
	    END;

	[CLH_CLOSE_DEL_OUT] :
	    ! Close output file
	    BEGIN

	    IF  .RNOIOB[IOB$V_TERMINAL]
	    THEN		! If it's a terminal,
		STATUS = $XPO_CLOSE ( IOB = .RNOIOB	!   just close it.
				     ,FAILURE = grab_resultant)
	    ELSE
		BEGIN
		STATUS = $XPO_CLOSE ( IOB = .RNOIOB	! Otherwise, close
				     ,OPTIONS = REMEMBER !   and delete it.
				     ,FAILURE = grab_resultant);
		STATUS = $XPO_DELETE ( IOB = .RNOIOB
				      ,FAILURE = grab_resultant);
		END;

	    RETURN CLH_NORMAL;
	    END;


%sbttl 'CLH -- Push IOB onto stack'

	[CLH_PUSH] :
	    BEGIN
	    !
	    ! If there are not too many files already open allocate
	    ! a new IOB on IOBSTK (pointed to by RNIIOB).
	    !
	    IF  .GCA_REQ_DEPTH NEQ .GCA_MAX_REQUIRE
	    THEN
		BEGIN
		RNIIOB = IOBSTK + (IOB$K_LENGTH * %UPVAL) * .GCA_REQ_DEPTH;
		GCA_REQ_DEPTH = .GCA_REQ_DEPTH + 1;
		RETURN CLH_NORMAL;
		END
	    ELSE		    ! No room on IOB stack for the IOB.
		RETURN CLH_NO_SPACE;

	    END;


%sbttl 'CLH -- Pop IOB from stack and reaccess previous one'

	[CLH_POP] :
	    ! Cause RUNOFF to stop reading from the current file
	    ! and read from the previous file instead.
	    BEGIN

	    IF  .GCA_REQ_DEPTH EQL 0
	    THEN
		BEGIN
		! Internal logic error: should not try to
		! pop the main file.
		0
		END
	    ELSE
		BEGIN
		! Forcefully terminate open .LIST, .NOTE and .IF commands that
		! are still open when the file in which they occured is about
		! to be closed.  I.E., do not allow .END commands to be in a
		! different file than the the opening .LIST, .NOTE,... command.
		TSTTFE (.GCA_REQ_DEPTH);

		IF  .RNIIOB [IOB$V_OPEN]		! Really close the file if
		THEN				!  there was a file opened
		    !  ( see REQUIR.BLI for case when it's not )
		    STATUS = $XPO_CLOSE ( IOB = .RNIIOB
					 ,FAILURE = grab_resultant);
		!Now do pop the file stack.
		RNIIOB = .RNIIOB - (IOB$K_LENGTH * %UPVAL);
		GCA_REQ_DEPTH = .GCA_REQ_DEPTH - 1;

		IF  .GCA_REQ_DEPTH EQL 0
		THEN		!Popped all the way back to primary input file
		    RNIIOB = .RNEIOB;		!Get real primary IOB.

		! The routine ERROR needs the following information in IRAC.
		BEGIN
		! Pick of the name and length of the file spec
		BIND
		    FILE_SPEC_STUFF = RNIIOB [IOB$T_RESULTANT] : $STR_DESCRIPTOR ();
		IRAC_FSPECP = .FILE_SPEC_STUFF [STR$A_POINTER];
		IRAC_FSPECC = .FILE_SPEC_STUFF [STR$H_LENGTH];
		END;
		IRAC_ISEQN = .RNIIOB [IOB$G_SEQ_NUMB];
		IRAC_IPAGEN = .RNIIOB [IOB$H_PAGE_NUMB];
		RETURN CLH_NORMAL;
		END;

	    END;


%sbttl 'CLH -- Open REQUIRE file spec.'

	[CLH_OPEN_REQ] :
	    ! Open a file requested on a .REQUIRE command.
	    BEGIN
	    status = $XPO_IOB_INIT (IOB = .rniiob);
	    status = $XPO_OPEN  (IOB = .rniiob
				,OPTIONS = INPUT  !  INPUT file
				,DEFAULT = '.RNO' ! Default the extension only!
				,FILE_SPEC = ( .fs_length(fs01)	    ! filename
					      ,.fs_start (fs01))
				,FAILURE = grab_resultant);

	    IF  .status
	    THEN
		! Reset input line/page counters.
		BEGIN
		irac_ipagen = 1;
		irac_iseqn = 1;
		BEGIN
		! Pick off the name and length of the filespec.
		BIND
		    file_spec_stuff = rniiob [iob$t_resultant] : $STR_DESCRIPTOR ();

		irac_fspecp = .file_spec_stuff [str$a_pointer];
		irac_fspecc = .file_spec_stuff [str$h_length];
		!
		! Output name of .REQUIRED file in .MEM file, if user
		! said /DEBUG:FILES
		!
		IF  .gca_debug_fil AND NOT .gca_skip_out
		THEN
		    !
		    ! Yes: User said /DEBUG:FILES and output is being
		    ! generated because the current page is included
		    ! in a /PAGES list.
		    !
		    BEGIN
		    LOCAL
%IF FLIP %THEN
			temp_record : $flip_rnotxt,
%FI
			work_area : VECTOR [CH$ALLOCATION (100)],
			work_count,
			work_ptr;

		    work_ptr   = CH$PTR (work_area);
		    work_ptr   = CH$MOVE (10, CH$PTR (UPLIT ('.REQUIRE "')), .work_ptr);
		    work_count = 10;
		    work_ptr   = CH$MOVE (.irac_fspecc, .irac_fspecp, .work_ptr);
		    work_count = .work_count + .irac_fspecc;
		    CH$WCHAR_A (%C'"', work_ptr);
		    CH$WCHAR_A (%O'15', work_ptr);	!Carriage return
		    CH$WCHAR_A (%O'12', work_ptr);	!Line feed
		    work_count = .work_count + 3;
%IF FLIP %THEN
		    IF  (.gca_op_dev EQL op_dev_flip)
		    THEN
			BEGIN
			temp_record [rnotxt_code]   = flip$k_rnotxt;
			temp_record [rnotxt_length] = .work_count;
			CH$MOVE (.work_count, CH$PTR (work_area),
				 CH$PTR (temp_record [rnotxt_text]));
			status = $XPO_PUT (IOB = .rnoiob,
					   STRING = (flip$k_rnotxt_basesiz +
						     .work_count,
						     CH$PTR(temp_record)));
			END
		    ELSE
%FI
			$XPO_PUT (IOB = .rnoiob,
				  STRING = (.work_count, CH$PTR (work_area)));
		    END;
		END;

		RETURN clh_normal;

		END
	    ELSE
		RETURN clh_cant_open;

	    END;


%sbttl 'CLH -- Close REQUIRE file (NULL) and bad OPCODE processing'

	[CLH_CLOSE_REQ] :
	    ! Close a ".REQUIRE" file.
	    BEGIN
	    0
	    END;


%SBTTL 'Open initialization file'

	[CLH_OPEN_INIT] :
	    !
	    ! Open initialization file specified in fs01.
	    !
	    BEGIN
	    status = $XPO_IOB_INIT (IOB   = .rniiob);
	    status = $XPO_OPEN
			(IOB	= .rniiob,
			OPTIONS	= input,
			FILE_SPEC = (.fs_length (fs01),
				     .fs_start (fs01)),
			FAILURE	= grab_resultant);
	    IF  .status
	    THEN
		!
		! Succeeded in opening file.
		!
		BEGIN
		!
		! Pick off name and length of filespec.
		!
		BIND
		    file_spec_stuff = rniiob [iob$t_resultant] : $STR_DESCRIPTOR ();

		irac_fspecp = .file_spec_stuff [str$a_pointer];
		irac_fspecc = .file_spec_stuff [str$h_length];
		!
		! Output name of initialization file in .MEM file, if user
		! said /DEBUG:FILES
		!
		IF  .gca_debug_fil AND NOT .gca_skip_out
		THEN
		    !
		    ! Yes, user said /DEBUG:FILES and output is being
		    ! generated because the current page is included
		    ! in a /PAGES list.
		    !
		    BEGIN
		    LOCAL

%IF FLIP %THEN
			temp_record : $flip_rnotxt,
%FI
			work_area : VECTOR [CH$ALLOCATION (100)],
			work_count,
			work_ptr;

		    work_ptr = CH$PTR (work_area);
		    !
		    ! Move descriptive text into work area.
		    ! Identifies DSR$INIT if only 8 characters long.
		    ! Otherwise, it must be for DSRPLUS$INIT.
		    !
		    IF  .fs_length (fs01) EQL 8
		    THEN
			BEGIN
			work_count = 15;
			work_ptr   = CH$MOVE (.work_count,
					CH$PTR (UPLIT ('DSR$INIT file "')),
					.work_ptr);
			END
		    ELSE
			BEGIN
			work_count = 19;
			work_ptr   = CH$MOVE (.work_count,
					CH$PTR (UPLIT ('DSRPLUS$INIT file "')),
					.work_ptr);
			END;
		    !
		    ! Add file name to work area.
		    !
		    work_ptr   = CH$MOVE (.irac_fspecc, .irac_fspecp, .work_ptr);
		    work_count = .work_count + .irac_fspecc;
		    !
		    ! Add end-of-line characters to work area.
		    !
		    CH$WCHAR_A (%C'"',  work_ptr);
		    CH$WCHAR_A (%O'15', work_ptr);	!Carriage return
		    CH$WCHAR_A (%O'12', work_ptr);	!Line feed
		    work_count = .work_count + 3;
%IF FLIP %THEN
		    ! If FLIP, send initialization file info to user
		    ! in correct form for FLIP.
		    !
		    IF  (.gca_op_dev EQL op_dev_flip)
		    THEN
			BEGIN
			temp_record [rnotxt_code]   = flip$k_rnotxt;
			temp_record [rnotxt_length] = .work_count;
			CH$MOVE (.work_count, CH$PTR (work_area),
				 CH$PTR (temp_record [rnotxt_text]));
			status = $XPO_PUT (IOB    = .rnoiob,
					   STRING = (flip$k_rnotxt_basesiz +
						 	.work_count,
						     CH$PTR(temp_record)));
			END
		    ELSE
%FI
			!
			! Otherwise, send initialization file info to user
			! in DSRPLUS form.
			!
			$XPO_PUT (IOB    = .rnoiob,
				  STRING = (.work_count, CH$PTR (work_area)));
		    END;

		RETURN clh_normal;
		END
	    ELSE
		!
		! Couldn't find file to open.
		!
		RETURN clh_cant_open;

	    END;

	[OUTRANGE] :
	    ! Error in program.
	    BEGIN
	    PUTMSG (rnfile, CH$PTR (UPLIT ('CLH')), 3);
	    RETURN clh_end_file;		! Make a guess
	    END;

	TES;
	0

    END;					! End of CLH


%sbttl 'get_out_default -- compute output filename from input filename'
ROUTINE get_out_default (file_descriptor) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine uses the input file type to compute the
!	output file type (i.e., sometimes called extension).
!
! FORMAL PARAMETERS:
!
!	FILE_DESCRIPTOR is a string descriptor for the input file name.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    BIND
	file_spec_stuff = .FILE_DESCRIPTOR : $STR_DESCRIPTOR ();

    LOCAL
	file_specx,
	file_spec_lng,
	name_length,
	parse_spec_blk : $XPO_SPEC_BLOCK,
	ptr_u_ext,
	ptr_i,
	ptr_o,
	type_length,
	u_ext : VECTOR [CH$ALLOCATION (50)];

    file_specx = .file_spec_stuff [STR$A_POINTER];
    file_spec_lng = .file_spec_stuff [STR$H_LENGTH];

!The code conditionalized by the %BLISS32 lexical function is
!to get around a bug introduced in version 2.0 of VAX/VMS.
!Logical names now start with an underscore, and this mucks up
!XPORT's file spec parsing.
%IF %BLISS(BLISS32) %THEN
	!Inform the builder of RUNOFF that this kludge is here.
	%MESSAGE ('BLISS32 Patch code included to strip "_" from output filespec');
	!Ignore the first character of the file spec if it's
	!an underscore so XPORT; this lets XPORT work correctly.
	IF  CH$RCHAR(.file_specx) EQL %C'_'
	THEN
	    !It's an underscore. Do the kludge.
	    BEGIN
	    file_specx = CH$PLUS (.file_specx, 1);
	    file_spec_lng = .file_spec_lng - 1;
	    END;
%FI
	   !End of crock code.

    !Parse the input file spec to get the specified type.
    $XPO_PARSE_SPEC ( SPEC_BLOCK = parse_spec_blk
		     ,FILE_SPEC = ( .file_spec_lng
				   ,.file_specx )   );
    !Start building the output file spec.
    !
    !First set CH$PTRs to the parsed input file name.
    BEGIN
    BIND
	temp = parse_spec_blk [XPO$T_FILE_NAME] : $STR_DESCRIPTOR ();

    name_length = .temp [STR$H_LENGTH];
    ptr_i = .temp [STR$A_POINTER];
    END;

    !Set a CH$PTR to where the computed output file spec goes.
    ptr_o = CH$PTR (def_out_spc);
    !Copy the input file name to the output file spec.

    INCR i FROM 1 TO .name_length DO
	CH$WCHAR_A (CH$RCHAR_A (ptr_i), ptr_o);

    def_out_lng = .name_length;			!Set current length.
    BEGIN
    BIND
	temp = parse_spec_blk [XPO$T_FILE_TYPE] : $STR_DESCRIPTOR ();
    type_length = .temp [STR$H_LENGTH];
    ptr_i = .temp [STR$A_POINTER];
    END;

    !Translate the file type to upper case.
    !Leave the result in U_EXT.
    ptr_u_ext = CH$PTR (u_ext);		!CH$PTR to where file type goes when in upper case.
    INCR i FROM 1 TO .type_length DO
	BEGIN

	LOCAL
	    temp;

	temp = CH$RCHAR_A (ptr_i);

	IF  lower_letter (.temp)
	THEN
	    !Convert lower case letter to upper case.
	    temp = upper_case (.temp);

	!Put processed character into file type area.
	CH$WCHAR_A (.temp, ptr_u_ext);
	END;

    ! Search through the various known input filetypes looking for a type that
    ! matches what was given.

    ptr_u_ext = .opftop [0];	!Assume it won't be found, and point to ".MEM".

    IF .ipftyp EQL -1 THEN	! We haven't yet mapped against IPFTOP
	BEGIN
	INCR i FROM 0 TO (ipftct-1) DO

	    IF CH$EQL ( .type_length
		       ,CH$PTR (u_ext)
		       ,4
		       ,.ipftop [.i]  )
	    THEN
	    !Found a match.  Set a CH$PTR to the matching output file type.
		BEGIN
		ptr_u_ext = .opftop [.i];
		EXITLOOP
		END
	END
    ELSE
	ptr_u_ext = .opftop[.ipftyp];

%IF DSRPLUS %THEN
    IF  .gca_op_dev EQL op_dev_vt100
    THEN
	!User said /DEC=VT100, so make .VT1 the default output type.
	ptr_u_ext = CH$PTR (UPLIT ('.VT1'));
%FI

%IF LN01 %THEN
    IF (.gca_op_dev EQL op_dev_ln01
       OR .gca_op_dev EQL op_dev_ln01e)
    THEN
	!User said /DEVICE=LN01[e], so make .LNI the default output type.
	ptr_u_ext = CH$PTR (UPLIT ('.LNI'));
%FI

%IF FLIP %THEN
    IF  (.gca_op_dev EQL op_dev_flip)
    THEN
	!User said /DEC=FLIP; this overrides a /DEC=VT100 (if also given).
	ptr_u_ext = CH$PTR (UPLIT ('.BFL'));
%FI

    !Copy the file type to the output file spec area.
    !Note that if there was no match, then PTR_U_EXT points to ".MEM"

    INCR i FROM 1 TO 4 DO
	CH$WCHAR_A (CH$RCHAR_A (ptr_u_ext), ptr_o);

    def_out_lng = .def_out_lng + 4;		!Update file spec length.
    END;					!End of get_out_default


%sbttl 'FBWAIT -- performs user syncronization for /PAUSE O/P w/FF'
GLOBAL ROUTINE fbwait : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Issues some BELLs (^Gs) and a FORMFEED (^L) and waits for
!	the RUNOFF user to input a single character.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN
    $XPO_GET (IOB = tsiiob
	     ,PROMPT = (3, CH$PTR (UPLIT (
			%STRING (BELL, BELL, %CHAR (%O'14')))) )
	     ,CHARACTERS = 1
	     );

    !Send a carriage return, so text starts at the left margin
    $XPO_PUT (IOB = tsiiob
	     , STRING = (1, CH$PTR(UPLIT(%STRING(%CHAR(%O'15')))))
	     );

    END;					!End of FBWAIT


%sbttl 'BWAIT -- performs user syncronization for /PAUSE O/P w/o FF'
GLOBAL ROUTINE bwait : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is just like FBWAIT, except that no FORMFEED is issued.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    EXTERNAL
	tsiiob: $XPO_IOB();

    $XPO_GET (IOB = tsiiob
	     ,PROMPT = (4, CH$PTR(UPLIT(%STRING(BELL,DEL,BELL,DEL))) )
	     ,CHARACTERS = 1
	     );

    !Send a carriage return, so text starts at the left margin
    $XPO_PUT (IOB = tsiiob
	     ,STRING = (1, CH$PTR(UPLIT(%STRING(%CHAR(%O'15')))))
	     );
    END;					!End of BWAIT

END						!End of module
ELUDOM
