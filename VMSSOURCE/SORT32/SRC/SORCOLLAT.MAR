	.TITLE	SOR$COLLATE		Compare under collating sequence
	.IDENT	'V04-000'		; File: SORCOLLAT.MAR Edit: PDG022
	.SBTTL	Copyright Notice
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.PAGE
	.SBTTL	Program description
;++
;
; FACILITY:
;
;	Support for compare under influence of collating sequences.
;
; ABSTRACT:
;
;	NONE
;
; ENVIRONMENT:
;
;	Native mode, User mode, AST reentrant
;
; AUTHOR:
;
;	Peter D Gilbert, January 1983
;
; MODIFIED BY:
;
;	T03-015		Original
;	T03-016	Support ignored pad characters.  PDG 28-Jan-1983
;	T03-017	Fix errors with PUSHR and POPR order.  PDG 1-Feb-1983
;	T03-018	Add XORB comments.  PDG 7-Mar-1983
;	T03-019	Reverse sense of the tie-breaking CMPC.  PDG 22-Mar-1983
;	T03-020	Make tie-break CMPC reversable at run-time.  PDG 12-Apr-1983
;	T03-021	Note that R5 is preserved.  PDG 11-Jul-1983
;	T03-022	Remove extra store of stable point.  Add "short-cut" entry
;		points.  PDG 17-Oct-1983
;--

	.DSABL	GLOBAL		; Externals must be explicitly declared
	$PSWDEF

	.PSECT	SOR$RO_CODE	NOVEC,NOWRT,RD,EXE,SHR,LCL,REL,CON,PIC,LONG
;+
;
; These routinse do comparisons under the influence of a collating sequence.
;
; Inputs:
;   R0	Length remaining in string1
;   R1	Address of source1
;   R2	Length remaining in string2
;   R3	Address of source2
;   R5	Address of tables
;   0(SP)	Return address
;
; Outputs:
;   R0	-1, 0, +1
;   R1 thru R4	Garbage
;   R5	Preserved
;   R9	Preserved
;   Condition codes as a result of MOVL R0, R0
;   The return address is removed from the stack.
;
;--

	; Fetch a character.
	;
	.MACRO	FETCHSTR1, ?LAB1, ?LAB2
	SOBGEQ	R0, LAB1		; Any characters left?
	CLRL	R0			; Make this zero again
	MOVZBL	B^RES$PAD(R5), R4	; Use the pad character
	BRB	LAB2
LAB1:	MOVZBL	(R1)+, R4		; Fetch the character
LAB2:	.ENDM
	.MACRO	FETCHSTR2, ?LAB1, ?LAB2
	SOBGEQ	R2, LAB1		; Any characters left?
	CLRL	R2			; Make this zero again
	MOVZBL	B^RES$PAD(R5), R9	; Use the pad character
	BRB	LAB2
LAB1:	MOVZBL	(R3)+, R9		; Fetch the character
LAB2:	.ENDM

	; Fetch a character and look up its value in the primary table.
	; If we were padding, and the pad character is ignored, leave the
	; collating value as zero, so that this string will compare less than
	; any non-ignored characters in the other string.
	; If both string are being padded with ignored pad characters, the code
	; branches back to the CMPC instruction, which compares equal, and the
	; tie-break information will then be used.
	;
	; When we have the collating value, either fall through, or branch to
	; the first parameter.
	; The second parameter labels the call to SPECSTR or SPECDBL, so that
	; other code can branch to it.
	;
	.MACRO	FETCHSTR1NP, RESLAB, ?LAB1
	SOBGEQ	R0, LAB1		; Any characters left?
	CLRL	R0			; Make this zero again
	MOVZBL	B^RES$PAD(R5), R4	; Use the pad character
	MOVZBL	B^RES$PTAB(R5)[R4], R4	; Fetch the collating value
	BRB	RESLAB			; Use this value, regardless
LAB1:	MOVZBL	(R1)+, R4		; Fetch the character
	MOVZBL	B^RES$PTAB(R5)[R4], R4	; Check that it's not special
	BNEQ	RESLAB
	.ENDM
	.MACRO	FETCHSTR2NP, RESLAB, ?LAB1
	SOBGEQ	R2, LAB1		; Any characters left?
	CLRL	R2			; Make this zero again
	MOVZBL	B^RES$PAD(R5), R9	; Use the pad character
	MOVZBL	B^RES$PTAB(R5)[R9], R9	; Fetch the collating value
	BRB	RESLAB			; Use this value, regardless
LAB1:	MOVZBL	(R3)+, R9		; Fetch the character
	MOVZBL	B^RES$PTAB(R5)[R9], R9	; Check that it's not special
	BNEQ	RESLAB
	.ENDM

	.MACRO	SPECSTR1, ?LAB1, ?LAB2, ?LAB3
	MOVAB	W^RES$STAB(R5), R4
	BRB	LAB2
LAB1:	ADDL2	#4, R4
LAB2:	CMPB	(R4), -1(R1)
	BLSSU	LAB1
	BEQL	LAB3
	MOVAL	#0, R4
LAB3:	MOVZWL	2(R4), R4
	.ENDM
	.MACRO	SPECSTR2, ?LAB1, ?LAB2, ?LAB3
	MOVAB	W^RES$STAB(R5), R9
	BRB	LAB2
LAB1:	ADDL2	#4, R9
LAB2:	CMPB	(R9), -1(R3)
	BLSSU	LAB1
	BEQL	LAB3
	MOVAL	#0, R9
LAB3:	MOVZWL	2(R9), R9
	.ENDM

	.MACRO	SPECDBL1, ?LAB1, ?LAB2, ?LAB3, ?LAB4
	;
	; This code assumes that the length of the original string is non-zero.
	;
	MOVAB	W^RES$STAB(R5), R4	; Get the table address
	CLRL	-(SP)			; Assume it is ignored
	BRB	LAB2
LAB1:	ADDL2	#4, R4			; Advance past the collating value
LAB2:	CMPB	(R4), -1(R1)		; Does this first character match?
	BLSSU	LAB1
	BGTRU	LAB4
	ADDL2	#2, R4
	MOVW	(R4), (SP)		; It matched.  Save the collating value
	TSTW	R0
	BEQL	LAB4			; Any more chars in the string?
LAB3:	ADDL2	#2, R4
	CMPW	(R4)+, -1(R1)		; Do the two characters match?
	BLSSU	LAB3
	BGTRU	LAB4
	TSTW	2(R4)
	BEQL	LAB4			; Branch if we found the trailing stuff
	MOVW	(R4), (SP)		; Copy the collating value
	DECL	R0			; Advance the string
	INCL	R1
LAB4:	MOVL	(SP)+, R4		; Put the collating value in R4
	.ENDM
	.MACRO	SPECDBL2, ?LAB1, ?LAB2, ?LAB3, ?LAB4
	MOVAB	W^RES$STAB(R5), R9
	CLRL	-(SP)
	BRB	LAB2
LAB1:	ADDL2	#4, R9
LAB2:	CMPB	(R9), -1(R3)
	BLSSU	LAB1
	BGTRU	LAB4
	ADDL2	#2, R9
	MOVW	(R9), (SP)
	TSTW	R2
	BEQL	LAB4
LAB3:	ADDL2	#2, R9
	CMPW	(R9)+, -1(R3)
	BLSSU	LAB3
	BGTRU	LAB4
	TSTW	2(R9)
	BEQL	LAB4
	MOVW	(R9), (SP)
	DECL	R2
	INCL	R3
LAB4:	MOVL	(SP)+, R9
	.ENDM

	; Define offsets
	;
	.EXTRN	RES$PTAB		; Address of the primary table
	.EXTRN	RES$UPPER		; Address of the upper table
	.EXTRN	RES$TB			; Tie-break PSW
	.EXTRN	RES$REVERSE		; Reverse sense of tie-break CMPC
	.EXTRN	RES$PAD			; Pad character
	.EXTRN	RES$STAB		; Address of secondary table

;
; SOR$$COLLATE_0
;
;   This routine assumes/supports:
;	No ignored characters
;	No double characters
;	No double collating values
;	Upcase table
;
; Registers:
;	R0-R4	Nopreserve
;	R5	Preserve
;	R6-R8	Not used
;	R9-R10	Preserve
;	R11	Preserve
;
SOR$$COLLATE_0_A::
	PUSHR	#^M<R9>
	MOVPSL	-(SP)
	BNEQ	JOIN_0
	BRB	USETB
SOR$$COLLATE_0::
	MOVL	R9, -(SP)		; Save R9
	CMPC5	R0, (R1), B^RES$PAD(R5), R2, (R3)
	MOVPSL	-(SP)			; Save the tie-break info
	BEQL	USETB			; An optimization
JOIN_0:	XORB2	B^RES$REVERSE(R5), (SP)	; Reverse sense of this compare
	BISB2	B^RES$TB(R5), (SP)	; Tie-break adjustment
0$:	;
	; Fetch the characters from the strings.
	;
	FETCHSTR1
	FETCHSTR2
	;
	; We know they differ.
	; Are they different cases of the same char?
	;
	BBS	#PSW$V_V, (SP), 16$
	CMPB	W^RES$UPPER(R5)[R4], W^RES$UPPER(R5)[R9]
	BEQL	16$			; Yes, the binary compare is okay
	MOVPSL	(SP)			; No, use this compare
	BISL2	#PSW$M_V, (SP)		; Don't do this again
16$:	;
	; Compare the collating values of the characters.
	;
	CMPB	B^RES$PTAB(R5)[R4], B^RES$PTAB(R5)[R9]
	BNEQ	POPNE
	CMPC5	R0, (R1), B^RES$PAD(R5), R2, (R3)
	BNEQ	0$			; If equal, then R0 = 0
USETB:	POPR	#^M<R0,R9>		; Pop PSL, Restore R9
USETB1:	BBS	#PSW$V_Z, R0, EQ	; Zero?
	BLBC	R0, GT			; Like BGTRU, since PSW$V_C = 0
LT:	MNEGL	#1, R0			; Return -1
	RSB
POPNE:	POPR	#^M<R0,R9>		; Pop PSL, restore R9
NE:	BLEQU	LT
GT:	MOVL	#1, R0			; Return +1
	RSB
EQ:	CLRL	R0
	RSB

;
; SOR$$COLLATE_1
;
;   This routine assumes/supports:
;	Ignored characters
;	No double characters
;	Double collating values
;	Upcase table
;	Ignored pad characters
;
; Registers:
;	R0-R4	Nopreserve
;	R5	Preserve
;	R6-R8	Not used
;	R9-R10	Preserve
;	R11	Preserve
;
	.ENABL	LSB
SOR$$COLLATE_1_A::
	PUSHR	#^M<R9>
	MOVPSL	-(SP)
	BNEQ	JOIN_1
	BRB	USETB
SOR$$COLLATE_1::
	MOVL	R9, -(SP)		; Save R9
	CMPC5	R0, (R1), B^RES$PAD(R5), R2, (R3)
	MOVPSL	-(SP)			; Save the tie-break info
	BEQL	USETB			; An optimization
JOIN_1:	XORB2	B^RES$REVERSE(R5), (SP)	; Reverse sense of this compare
	BISB2	B^RES$TB(R5), (SP)	; Tie-break adjustment
0$:	;
	; Fetch the characters from strings
	;
	FETCHSTR1
	FETCHSTR2
	;
	; We know they differ.
	; Are they different cases of the same char?
	;
	BBS	#PSW$V_V, (SP), 16$
	CMPB	W^RES$UPPER(R5)[R4], W^RES$UPPER(R5)[R9]
	BEQL	16$			; Yes, the binary compare is okay
	MOVPSL	(SP)			; No, use this compare
	BISL2	#PSW$M_V, (SP)		; Don't do this again
16$:	;
	; Fetch the collating values of the characters.
	;
	MOVZBL	B^RES$PTAB(R5)[R4], R4
	BEQL	101$
	MOVZBL	B^RES$PTAB(R5)[R9], R9
	BEQL	202$
	CMPB	R4, R9
150$:	BNEQ	POPNE
100$:	CMPC5	R0, (R1), B^RES$PAD(R5), R2, (R3)
	BNEQ	0$			; If equal, then R0 = 0
	BRW	USETB
101$:	MOVZBL	B^RES$PTAB(R5)[R9], R9
	BRB	112$
402$:	ASHL	#-8, R9, R9
	BEQL	100$
111$:	FETCHSTR1NP	113$
112$:	SPECSTR1
	BEQL	111$
113$:	TSTB	R9
202$:	BEQL	201$
301$:	CMPB	R4, R9
	BNEQ	150$
	ASHL	#-8, R4, R4
	BEQL	402$
	ASHL	#-8, R9, R9
	BNEQ	301$
211$:	FETCHSTR2NP	301$
201$:	SPECSTR2
	BEQL	211$
	BRB	301$
	.DSABL	LSB

;
; SOR$$COLLATE_2
;
;   This routine assumes/supports:
;	Ignored characters
;	Double characters
;	Double collating values
;	Upcase table
;	Ignored pad characters
;
; Registers:
;	R0-R4	Nopreserve
;	R5	Preserve
;	R6-R8	Not used
;	R9-R10	Preserve
;	R11	Preserve
;
; Restrictions:
;	The following are not handled correctly:
;	    Double characters that use the pad character.
;		(when this happens at the end of a string)
;
	.ENABL	LSB
SOR$$COLLATE_2::
	PUSHR	#^M<R1,R9>		; Save R9, save current stable point
	CMPC5	R0, (R1), B^RES$PAD(R5), R2, (R3)
	MOVPSL	-(SP)			; Save the tie-break info
	BEQL	89$			; An optimization
	XORB2	B^RES$REVERSE(R5), (SP)	; Reverse sense of this compare
	BISB2	B^RES$TB(R5), (SP)	; Tie-break adjustment
0$:	;
	; Backup to some stable point
	;
	MOVL	R1, R9
2$:	CMPL	R1, 4(SP)
	BEQL	5$
	MOVZBL	-(R1), R4
	TSTB	B^RES$PTAB(R5)[R4]	; Might this be start of a double char?
	BEQL	2$
	INCL	R1
5$:	SUBL2	R1, R9
	BEQL	8$			; ONLY an optimization
	ADDL2	R9, R0
	ADDL2	R9, R2
	SUBL2	R9, R3
	;
	; Fetch the characters from strings
	;
8$:	FETCHSTR1
	FETCHSTR2
	;
	; They may differ.
	; Are they different cases of the same char?
	;
	BBS	#PSW$V_V, (SP), 16$
	CMPB	W^RES$UPPER(R5)[R4], W^RES$UPPER(R5)[R9]
	BEQL	16$			; Yes, the binary compare is okay
	MOVPSL	(SP)			; No, use this compare
	BISL2	#PSW$M_V, (SP)		; Don't do this again
16$:	;
	; Fetch the collating values of the characters.
	;
	MOVZBL	B^RES$PTAB(R5)[R4], R4
	BEQL	101$
	MOVZBL	B^RES$PTAB(R5)[R9], R9
	BEQL	202$
	CMPB	R4, R9
	BNEQ	150$
100$:	MOVL	R1, 4(SP)		; Establish a new stable point
	;
	; If characters remain in both strings, bypass the CMPC instruction
	; if the first characters differ.  This is ONLY an optimization.
	;
	; This optimization was removed, to save code space.
	;
	;NOP
	;
	; Compare the remaining portions of the strings
	;
	CMPC5	R0, (R1), B^RES$PAD(R5), R2, (R3)
	BNEQ	0$			; If equal, then R0 = 0
89$:	POPR	#^M<R0,R1,R9>		; Pop PSL & stable point, restore R9
	BRW	USETB1
150$:	POPR	#^M<R0,R1,R9>		; Pop PSL & stable point, restore R9
	BRW	NE
202$:	BRW	201$
101$:	MOVZBL	B^RES$PTAB(R5)[R9], R9
	;
	; R4 is zero; look for a double character.
	; R9 contains the value from PTAB.
	;
	BRB	112$
402$:	ASHL	#-8, R9, R9
	BEQL	100$
	;
	; Fetch a character, and get it's collating value.
	;
111$:	FETCHSTR1NP	113$
112$:	SPECDBL1
	BEQL	111$
113$:	TSTB	R9
	BEQL	201$
301$:	CMPB	R4, R9
	BNEQ	150$
	ASHL	#-8, R4, R4
	BEQL	402$
	ASHL	#-8, R9, R9
	BNEQ	301$
211$:	FETCHSTR2NP	301$
201$:	SPECDBL2
	BEQL	211$
	BRB	301$
	.DSABL	LSB

	.END
