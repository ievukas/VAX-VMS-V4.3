MODULE	OPC$OPCOMDATA(
		 LANGUAGE (BLISS32),
		 IDENT = 'V04-000'
		) =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! Facility:
!
!	OPCOM
!
! Abstract:
!
!	This module contains the definitions of the data structures used
!	by OPCOM.  All global variables and constants are defined here.
!
! Environment:
!
!	VAX/VMS operating system
!
! Author:
!
!	Steven T. Jeffreys
!
! Creation date:
!
!	December 16, 1980
!
! Revision history:
!
!	V03-004	CWH3169		CW Hobbs			5-May-1984
!		Second pass for cluster-wide OPCOM:
!		 - Add BYPASS_PRIV mask
!		 - Change timer delta from 15 seconds to 5 minutes
!		 - Add SYI_SWPOUTPGCNT and LOGTIME_COUNTER, reorder data
!
!	V03-003	CWH3003		CW Hobbs			16-Sep-1983
!		Add an audit trail
!
!	V03-002	CWH3001		CW Hobbs			30-Jul-1983
!		Various and sundry things to make OPCOM distributed
!		across the cluster.
!
!	V03-001	STJ3030		Steven T. Jeffreys,		05-Oct-1982
!		- Added list head for implicitly canceled requests.
!		- Defined FLUSH_PENDING global status flag.
!
!	V02-004	STJ0220		Steven T. Jeffreys,		17-Feb-1982
!		- Added list head for implicitly disabled operators.
!
!	V02-003	STJ0158		Steven T. Jeffreys,		8-Feb-1982
!		- Increased time stamp wait time to 5 minutes.
!
! 	V02-002	STJ0081		Steven T. Jeffreys,		2-Aug-1981
!		Changed default logfile name to SYS$MANAGER:OPERATOR.LOG.
!
!--

LIBRARY 'SYS$LIBRARY:LIB.L32';
LIBRARY 'LIB$:OPCOMLIB';

!
! NOTE:  Global storage is arranged to improve page faulting behaviour.  The
!	following order is attempted:
!		- data used only during initialization
!		- infrequently used data
!		- frequently used data
!
GLOBAL
	!
	! OPRENABLE message used by OPCOM_INIT to enable
	! the default operator terminal, OPA0.  The message
	! is not broadcasted.
	!
	MSG1		: $bblock  [OPC$K_COMHDRSIZ+31]		! OPA0 ENABLE request
			  INITIAL (WORD	(MSG$_OPRQST),		! Message type code
				   WORD	(0),			! No reply mailbox
				   LONG	(-1),			! Privilege mask
				   LONG (-1),			! Privilege mask
				   LONG	(%X'010004'),		! Sender UIC = [1,4]
				   LONG	(%ASCII'SYST'),		! Username = "SYSTEM      "
				   LONG	(%ASCII'EM  '),		!
				   LONG	(%ASCII'    '),		!
				   LONG	(%ASCII'SYST'),		! Account = "SYSTEM  "
				   LONG	(%ASCII'EM  '),		!
				   BYTE	(4),			! Base priority
				   BYTE (0),			! Unused
				   !
				   BYTE (OPC$_X_OPRENABLE),	! Set request code
				   BYTE (OPC$K_SYSTEM),		! Set scope to SYSTEM
				   LONG (OPC$M_NOBRD),		! Do not broadcast this message
				   LONG (OPC$M_PERMOPER),	! Make OPA0 a permanent operator
				   LONG (KNOWN_ATTN_MASK1),	! Receive all requests
				   LONG (KNOWN_ATTN_MASK2),
				   LONG (1),			! Set request ID
				   LONG (0),			! UIC
				   BYTE (4),			! Character count
				   LONG (%ASCII'OPA0')		! Operator device name
				),
	OPA0_ENABLE_MSG	: $bblock  [DSC$K_S_BLN]		! Descriptor for OPA0 enable request
			  INITIAL (LONG (OPC$K_COMHDRSIZ+31), LONG (MSG1)),

!
! LOGFILE INIT message used by OPCOM_INIT to 
! initialize the system operator log file.	
!
	MSG2		: $bblock  [OPC$K_COMHDRSIZ+31]		! LOGFILE INIT request
			  INITIAL (WORD	(MSG$_OPRQST),		! Message type code
				   WORD	(0),			! No reply mailbox
				   LONG	(-1),			! Privilege mask
				   LONG (-1),			! Privilege mask
				   LONG	(%X'010004'),		! Sender UIC = [1,4]
				   LONG	(%ASCII'SYST'),		! Username = "SYSTEM      "
				   LONG	(%ASCII'EM  '),		!
				   LONG	(%ASCII'    '),		!
				   LONG	(%ASCII'SYST'),		! Account = "SYSTEM  "
				   LONG	(%ASCII'EM  '),		!
				   BYTE	(4),			! Base priority
				   BYTE (0),			! Unused
				   !
			  	   BYTE	(OPC$_X_LOGFILE),	! Set request code
				   BYTE (OPC$K_SYSTEM),		! Set scope to SYSTEM
				   LONG (0),			! 
				   LONG (OPC$M_INITLOG),	! Initialize the logfile
				   LONG (OPC$M_NM_CENTRL),	! Notify CENTRAL operators
				   LONG (0),			! Unused
				   LONG (2),			! Request ID
				   LONG (0),			! UIC
				   BYTE (4),			! Character count
				   LONG (%ASCII'OPA0')		! Operator device name
				 ),
	LOGFILE_MSG	: $bblock  [DSC$K_S_BLN]		! Descriptor for LOGFILE INIT request
			  INITIAL (LONG (OPC$K_COMHDRSIZ+31), LONG (MSG2)),
!
! End of init-only data
!

	!
	! Define RMS control structures for the logfile.
	!
	LOGFILE_RES	: VECTOR [NAM$C_MAXRSS, BYTE],	! Result name string
	LOGFILE_NAM	: $NAM	(
				 RSA=LOGFILE_RES,	! Result buffer address
				 RSS=NAM$C_MAXRSS	! Result buffer length
				),
	LOGFILE_FAB	: $FAB	(
				 FAC=(PUT),		! WRITE access only
				 RAT=CR,		! Record ATtributes
				 ORG=SEQ,		! Sequntial file
				 RFM=VAR,		! Variable length records
				 NAM=LOGFILE_NAM,	! Name block
				 FNM='SYS$MANAGER:OPERATOR.LOG'
				),

	LOGFILE_RAB	: $RAB	(
				 FAB=LOGFILE_FAB
				),

	!
	! The following data structure is vector of list headers
	! for each class of operator.  The format of the list head is:
	!
	!	+--------------------------------+
	!	|      Pointer to first OCD	 |	(longword)
	!	+--------------------------------+
	!	|       Length of OCD list	 |	(longword)
	!	+--------------------------------+
	!
	! There is one such entry for each class of operator, SYSTEM,
	! GROUP, and USER, as well as a spare entry at the end of the vector.
	! The list pointed to by the list header is a doubly linked list of
	! OCD data structures.
	!
	OCD_VECTOR	: VECTOR [8,LONG],

	!
	! Various and sundry useful variables.
	!
	DISABLED_OPER_Q	: VECTOR [2]			! List head
			  INITIAL (DISABLED_OPER_Q,DISABLED_OPER_Q),
	CANCELED_RQST_Q	: VECTOR [2]			! List head
			  INITIAL (CANCELED_RQST_Q,CANCELED_RQST_Q),
	UNKNOWN_MESSAGE_COUNT :	LONG,			! Count of unknowm message types received
	REQUEST_NUMBER	: LONG,				! Current request number
	NEXT_SEQUENCE	: LONG,				! Sequence returned by CLUSUTIL_NEXT_SEQUENCE
	OPER_MBX_CHAN	: WORD,				! Channel to MBA2
	OPER_IDENT_NUM	: WORD,				! Current oper ident
	OPER_MBX_NAME	: $string_desc ('_MBA2:'),	! String descriptor
	DEVICE_FAO	: $string_desc ('!AC!UW'),	! Device FAO control string
	MBX_FAO		: $string_desc ('MB!UW'),	! FAO control string
	LOGFILE_OPEN	: LONG,				! Boolean
	BYPASS_PRIV	: $bblock [8]			! Mask to enable or clear BYPASS priv
			  PRESET ([PRV$V_BYPASS] = 1),
	LCL_NODENAME	: $desc_block;			! Local nodename (DECnet or VAXcluster)
!
!
! Define segments for cluster data, most have no meaning unless GBLSTS_K_IN_VAXcluster is true.
!
GLOBAL
	SEQ_WIDTH_DEF	: LONG INITIAL (2+8),		! Eight bits for index, two for sequence
	SEQ_WIDTH	: LONG,				! Width of seed
	SEQ_SEED	: LONG,				! 12 bit seed to make unique sequence numbers
	LCL_CSID	: LONG,				! CSID for the local node
	LCL_NOD		: $ref_bblock,			! Pointer to NOD block for local node
	NOD_HEAD	: VECTOR [2, LONG]		! Queue header for all node blocks
				INITIAL (NOD_HEAD, NOD_HEAD);

GLOBAL BIND
	WAIT_DELTA	= UPLIT (5 * 60 * -10000000, -1);! Wait time for timer AST (5 minutes)

GLOBAL
	SYI_SWPOUTPGCNT	: LONG,				! Swap out page count
	LOGTIME_COUNTER	: LONG INITIAL (100),		! Used to stamp logfile every so many timestamps,
							!  initial to large # so first time it stamps.
	!
	! Define the global status bitvector.  It is used to maintain status info global to all of OPCOM.
	!
	GLOBAL_STATUS	: BITVECTOR [32];

!
! Define SCB table.  Each entry describes a type of data structure.
! The information kept on each data structure type includes the size
! (in bytes) of the data structure, the sequence number of the data
! structure, the count of preallocated data structures kept on a
! look-aside list (LAL), and the LAL header.  The SCB table is indexed
! by the data structure type.  The type is defined by the SCB_DEF
! macro, which makes the SCB_DEF invocations order independent.
! The SCB table has a 1 origin.
!

%ASSIGN (COUNTER,1);					! Set table origin
PSECT GLOBAL = $SCB_TABLE;
PSECT OWN = $SCB_TABLE;
GLOBAL
	SCB_TABLE	: VECTOR [0];			! Start of SCB table
	!
	! Define table entries.  Input parameters are the structure type
	! and the number of structures to preallocate for the look-aside list.
	!
	SCB_DEF (RQCB,32);
	SCB_DEF	(MCB,32);
	SCB_DEF	(OCD,4);
	SCB_DEF	(NOD,16);

!
! Define the minumum and maximum data structure types.
! Note that this must come after the last SCB_DEF macro
! call, as the macro defines the literals referenced.
!
GLOBAL LITERAL

	MIN_DS_TYPE	= MIN   (RQCB_K_TYPE,
				 MCB_K_TYPE,
				 OCD_K_TYPE,
				 NOD_K_TYPE
				),

	MAX_DS_TYPE	= MAX	(RQCB_K_TYPE,
				 MCB_K_TYPE,
				 OCD_K_TYPE,
				 NOD_K_TYPE
				),
!
! Define the minimum and maximum SCOPE values.
!
	MIN_SCOPE	= MIN	(OPC$K_SYSTEM,
				 OPC$K_GROUP,
				 OPC$K_USER,
				 OPC$K_UNSPEC
				),

	MAX_SCOPE	= MAX	(OPC$K_SYSTEM,
				 OPC$K_GROUP,
				 OPC$K_USER,
				 OPC$K_UNSPEC
				);

GLOBAL BIND
	ascid_INVALIDRQCB = %ASCID 'Invalid RQCB in cluster message' : block [, BYTE];

END
ELUDOM
