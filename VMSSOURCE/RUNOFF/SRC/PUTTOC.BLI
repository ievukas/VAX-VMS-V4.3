%TITLE 'Puttoc - routines to pass binary information to binary files'
MODULE PUTTOC (	IDENT = 'V04-000'
    		%BLISS32 [ , ADDRESSING_MODE ( EXTERNAL = 	LONG_RELATIVE,
    			   	       	       NONEXTERNAL =	LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Routines to save table of contents information in a file.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: May, 1979
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	014	KFA00014	Ken Alden	19-Jul-1983
!		Conditionalized the internal logic errors to check for
!		  /AUTO conditions.
!
!	013	KAD00013	Keith Dawson	28-June-1983
!		Fix bug in which .SEND TOC 5 would get an additional RGH 
!		  written.
!
!	012	KAD00012	Keith Dawson	11-May-1983
!		Disable sending .HEADER {example, figure, table} records to 
!		  FLIP.
!
!	011	KAD00011	Keith Dawson	11-April-1983
!		Added support for new termination error messages for 
!		  information written to .BRN file. This involved adding 
!		  another formal to the RGH routine; this third formal is 
!		  TRUE or FALSE, as the caller determines whether or not to 
!		  increment the count of information written to the .BRN file.
!
!	010	KAD00010	Keith Dawson	23-March-1983
!		Changed GCA_FLIP bit to (.gca_op_dev EQL op_dev_flip).
!
!	009	KAD00009	Keith Dawson	20-Mar-1983
!		Removed LN01 conditionals and all references to .BIX
!		  and .BTC files.
!
!	008	KAD00008	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'

!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    PUTRTY : NOVALUE,		! Writes record-type information to TOC binary file
    PUTTXT : NOVALUE,		! " parsed text "
    PUTTPG : NOVALUE,		! " page number " 
    PUTCNT : NOVALUE,		! " counter and display descriptor "
    PUTHLI : NOVALUE;		! " header level counters, display code "

!
! EQUATED SYMBOLS:
!

!
! INCLUDE FILES:
!

REQUIRE 'REQ:RNODEF.REQ';	! RUNOFF definition

LIBRARY 'NXPORT:XPORT';			! XPORT Library

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
MACRO
    CHECK_OPEN =
%IF FLIP %THEN
	(IF (.gca_op_dev EQL op_dev_flip)
	THEN
	    .RNOIOB[IOB$V_OPEN]
	ELSE
	    .BRNOOB[IOB$V_OPEN])
%ELSE
	(.BRNOOB[IOB$V_OPEN])
%FI
	%;

!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!

%IF FLIP %THEN
EXTERNAL
    RNOIOB : REF $XPO_IOB ();
%FI

EXTERNAL
    BRNOOB : $XPO_IOB ();

EXTERNAL
    GCA : GCA_DEFINITION,
    HLDSP : VECTOR [MAX_LEVELS],
    HLLIST : COUNTED_LIST [MAX_LEVELS];

EXTERNAL LITERAL 				!Error messages
    RNFILE;

EXTERNAL ROUTINE
    RGH,
    ERMS;

GLOBAL ROUTINE PUTRTY (MAJOR_CODE, MINOR_CODE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PUTRTY writes a record descriptor to the table of contents file
!
! FORMAL PARAMETERS:
!
!	MAJOR_CODE is the major record type
!	MINOR_CODE is the minor record type
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    LOCAL
	TEMP_RECORD : VECTOR [2];
%IF FLIP %THEN
    LOCAL
	FLIP_RECORD : $FLIP_TOCRD;
%FI

    !Cursory check to make sure the file is opened.
    IF NOT check_open 
    THEN
	BEGIN
	IF NOT .gca_black_box
	THEN
    	    ERMS (RNFILE, CH$PTR (UPLIT ('PUTRTY')), 6);
	RETURN;
	END;

%IF FLIP %THEN
    IF (.gca_op_dev EQL op_dev_flip)
    THEN
	BEGIN
	!Create a two-word descriptor record.
	FLIP_RECORD [TOCRD_MAJOR] = .MAJOR_CODE;
	FLIP_RECORD [TOCRD_MINOR] = .MINOR_CODE;
	FLIP_RECORD[TOCRD_CODE] = FLIP$K_TOCRD;
	$XPO_PUT (IOB=.RNOIOB, STRING=(FLIP$K_TOCRD_SIZE,CH$PTR(FLIP_RECORD)));
	RETURN
	END;
%FI

    !If this is an Index Record Group, write the Record Group Header for it.
    !The length of the described record is 2. This special case exists in 
    !PUTRTY itself because it is called from outside this module -- namely, 
    !from DOPX.
    ! Do count this record in the .BRN count.
    IF	(.major_code EQL maj_runoff	! Fix .STC 5 bug.
	AND
	.minor_code EQL min_index)
    THEN
	rgh (brn_contents, 2, true);

    !Create a two-word descriptor record.
    TEMP_RECORD [0] = .MAJOR_CODE;
    TEMP_RECORD [1] = .MINOR_CODE;

    !Now write the record type descriptor record.
    $XPO_PUT (IOB = BRNOOB, BINARY_DATA = (2, TEMP_RECORD));

    RETURN;

    END;					!End of PUTRTY

GLOBAL ROUTINE PUTTXT (TEXT_LENGTH, TEXT_PTR, MAJOR_CODE, MINOR_CODE) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	PUTTXT writes parsed text to the table of contents file.
!
! FORMAL PARAMETERS:
!
!	TEXT_LENGTH is the number of bytes representing the text.
!	TEXT_ADDRESS is the address of the text.
!	MAJOR_CODE and MINOR code are the major and minor record descriptors
!	associated with the text.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    LOCAL
	TEMP_RECORD : VECTOR [1000];
%IF FLIP %THEN
    LOCAL
	FLIP_RECORD : $FLIP_TOCTXT;
%FI

    !Cursory check to make sure the file is opened.
    IF NOT check_open 
    THEN
	BEGIN
    	IF NOT .gca_black_box
	THEN
    	    ERMS (RNFILE, CH$PTR (UPLIT ('PUTTXT')), 6);
	RETURN;
	END;

%IF FLIP %THEN
    IF (.gca_op_dev EQL op_dev_flip)
    THEN
	BEGIN
	FLIP_RECORD[TOCTXT_CODE] = FLIP$K_TOCTXT;
	FLIP_RECORD[TOCTXT_MAJOR] = .MAJOR_CODE;
	FLIP_RECORD[TOCTXT_MINOR] = .MINOR_CODE;
	FLIP_RECORD[TOCTXT_LENGTH] = .TEXT_LENGTH;
	CH$MOVE (.TEXT_LENGTH, .TEXT_PTR, CH$PTR (FLIP_RECORD[TOCTXT_TEXT]));
	$XPO_PUT ( IOB=.RNOIOB, STRING=(.TEXT_LENGTH+FLIP$K_TOCTXT_BASESIZ,
		CH$PTR(FLIP_RECORD)));
	RETURN
	END;
%FI

    !Write the Record Group Header for this TOC record. The length of the 
    !described record is 3 more than the allocation required for the text --
    !2 fullwords of TOC header information (PUTRTY) and 1 fullword of size.
    ! Do count this record in the .BRN count.

    rgh (brn_contents, 3 + CH$ALLOCATION (.text_length), true);

    !Write out the descriptor record
    PUTRTY (.MAJOR_CODE, .MINOR_CODE);

    !Write out the number of characters of text.
    $XPO_PUT (IOB = BRNOOB, BINARY_DATA = (1, TEXT_LENGTH));

    !Only write text if there's some to write.
    IF .TEXT_LENGTH LEQ 0
    THEN
	!No text to write
	RETURN;

    !Copy the text into an area guaranteed to start on a word boundary.
    CH$MOVE (.TEXT_LENGTH, .TEXT_PTR, CH$PTR (TEMP_RECORD));

    !Write out the contents entry.
    $XPO_PUT (IOB = BRNOOB, BINARY_DATA = (CH$ALLOCATION (.TEXT_LENGTH), TEMP_RECORD));

    END;					!End of PUTTXT

GLOBAL ROUTINE PUTTPG (PAGE_REF, REC_TYPE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PUTTPG writes a page number into the table of contents file
!
! FORMAL PARAMETERS:
!
!	PAGE_REF	is the address of a page-number block.
!
!	REC_TYPE	is a record type, used by FLIP (only). This 
!			argument may be -1 if the call is made from DSR,
!			not from DSRPLUS; in this case the argument is 
!			unused.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN

    MAP
	PAGE_REF : REF VECTOR [PAGE_SCT_SIZE];

    LOCAL
	TEMP_RECORD : VECTOR [PAGE_SCT_SIZE];
%IF FLIP %THEN
    LOCAL
	FLIP_RECORD : $FLIP_TOCPAG;
%FI

    !Cursory check to make sure the file is opened.
    IF NOT CHECK_OPEN
    THEN
	BEGIN
    	IF NOT .gca_black_box
	THEN
    	    ERMS (RNFILE, CH$PTR (UPLIT ('PUTTPG')), 6);
	RETURN;
	END;

%IF FLIP %THEN
    IF (.gca_op_dev EQL op_dev_flip)
    THEN
	BEGIN
	FLIP_RECORD [TOCPAG_CODE] = .REC_TYPE;
	INCR I FROM 1 TO PAGE_SCT_SIZE DO
	    VECTOR [FLIP_RECORD[TOCPAG_PAGENO],.I - 1] = .PAGE_REF [.I - 1];
	$XPO_PUT( IOB=.RNOIOB, STRING=(FLIP$K_TOCPAG_SIZE,
		CH$PTR(FLIP_RECORD)));
	RETURN
	END;
%FI

    !Write the Record Group Header for this TOC record. The length of the 
    !described record is 2 more than the allocation required for the page
    !number -- 2 fullwords of TOC header information (PUTRTY).
    ! Do not count this record in the .BRN count.

    rgh (brn_contents, 2 + page_sct_size, false);

    !Write a descriptor record identifying what's to come as a page number
    PUTRTY (MAJ_RUNOFF, MIN_PAGE);

    !Copy the page number in too.
    INCR I FROM 1 TO PAGE_SCT_SIZE DO
	TEMP_RECORD [.I - 1] = .PAGE_REF [.I - 1];

    $XPO_PUT (IOB = BRNOOB, BINARY_DATA = (PAGE_SCT_SIZE, TEMP_RECORD));

    END;					!End of PUTTPG

GLOBAL ROUTINE PUTCNT (
!
     MAJOR_CODE,	MINOR_CODE,	COUNTER_VALUE,	COUNTER_DISPLAY_CODE,
     PRE_LEN,		PRE_PTR,	POST_LEN,	POST_PTR
!
     ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PUTCNT writes a counter and its display descriptor to the table of 
!	contents file. In addition it writes pre-counter and post-counter
!	strings if they are not null.
!
! FORMAL PARAMETERS:
!
!	MAJOR_CODE and MINOR_CODE identify the counter to the table of contents program.
!	COUNTER_VALUE and COUNTER_DISPLAY_CODE are the counter's value and display code.
!	PRE_LEN and PRE_PTR describe the pre-counter string.
!	POST_LEN and POST_PTR describe the post-counter string.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN

    LOCAL
	TEMP_RECORD : VECTOR [5];

    !If this call is for a header-level, call the appropriate routine and quit.
    IF .MINOR_CODE EQL MIN_HL_INF 
    THEN
	BEGIN
	PUTHLI ();
	RETURN;
	END;

!** Temporary restriction -- remove to enable sending DSRPLUS records to FLIP
    IF (.gca_op_dev EQL op_dev_flip)
    THEN
	RETURN;
!** End of temporary restriction

    !Cursory check to make sure the file is opened.
    IF NOT CHECK_OPEN
    THEN
	BEGIN
    	IF NOT .gca_black_box
	THEN
    	    ERMS (RNFILE, CH$PTR (UPLIT ('PUTCNT')), 6);
	RETURN;
	END;

    !
    !Write the Record Group Header for this TOC record. The length of the 
    !described record is:
    !   2 (TOC header, from PUTRTY) plus
    !   2 (number of fullwords needed to save the parameters) plus
    !	1 + ch$allocation (pre-counter string)
    !	1 + ch$allocation (post-counter string)
    !
    ! Do not count this record in the .BRN count.
    rgh (brn_contents, 2 + 2 + 2 + 
	 CH$ALLOCATION (.pre_len) +
	 CH$ALLOCATION (.post_len)
	, false
	);

    !
    !Write a descriptor record using the supplied descriptive information.
    PUTRTY (.MAJOR_CODE, .MINOR_CODE);

    !First write out the counter value.
    $XPO_PUT (IOB = BRNOOB, BINARY_DATA = (1, COUNTER_VALUE));

    !Now write the display information
    $XPO_PUT (IOB = BRNOOB, BINARY_DATA = (1, COUNTER_DISPLAY_CODE));

    !
    !Write the length of the pre-counter string.
    $XPO_PUT (IOB = BRNOOB, BINARY_DATA = (1, PRE_LEN));

    !If that length is not zero, write the string too.
    IF .PRE_LEN GTR 0
    THEN
	BEGIN
	!Copy the string to an area guaranteed to start on a word boundary.
	CH$MOVE (.PRE_LEN, .PRE_PTR, CH$PTR (TEMP_RECORD));
	!Now write the string.
	$XPO_PUT (IOB = BRNOOB, BINARY_DATA = (CH$ALLOCATION (.PRE_LEN), TEMP_RECORD));
	END;

    !
    !Finally, write the length of the post-counter string.
    $XPO_PUT (IOB = BRNOOB, BINARY_DATA = (1, POST_LEN));

    !If that length is not zero, write the string too.
    IF .POST_LEN GTR 0
    THEN
	BEGIN
	!Copy the string to an area guaranteed to start on a word boundary.
	CH$MOVE (.POST_LEN, .POST_PTR, CH$PTR (TEMP_RECORD));
	!Now write the string.
	$XPO_PUT (IOB = BRNOOB, BINARY_DATA = (CH$ALLOCATION (.POST_LEN), TEMP_RECORD));
	END;

    RETURN

    END;					!End of PUTCNT

GLOBAL ROUTINE PUTHLI : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PUTHLI write header level information into the table of contents file.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

%IF FLIP %THEN
    LOCAL
	FLIP_RECORD: $FLIP_TOCHLI;
%FI

    !Cursory check to make sure the file is opened.
    IF NOT CHECK_OPEN
    THEN
	BEGIN
    	IF NOT .gca_black_box
	THEN
    	    ERMS (RNFILE, CH$PTR (UPLIT ('PUTHLI')), 6);
	RETURN;
	END;

%IF FLIP %THEN
    IF (.gca_op_dev EQL op_dev_flip)
    THEN
	BEGIN
	FLIP_RECORD[TOCHLI_CODE] = FLIP$K_TOCHLI;	! HLI record code
	INCR INDEX FROM 0 TO MAX_LEVELS+1		! Copy HL info
	DO
	    VECTOR[FLIP_RECORD[TOCHLI_HLLIST],.INDEX]=.VECTOR[HLLIST,.INDEX];
	INCR INDEX FROM 0 TO MAX_LEVELS-1		! Copy format info
	DO
	    VECTOR[FLIP_RECORD[TOCHLI_HLDSP],.INDEX]=.HLDSP[.INDEX];
	$XPO_PUT( IOB=.RNOIOB, STRING=(FLIP$K_TOCHLI_SIZE,
	    	CH$PTR(FLIP_RECORD)));
	RETURN
	END;
%FI

    !Write the Record Group Header for this TOC record. The length of the 
    !described record is:
    !   2 (TOC header, from PUTRTY) plus
    !   2 (header-level count) plus
    !   twice the maximum header-level depth (MAX_LEVELS).
    !
    ! Do not count this record in the .BRN count.

    rgh (brn_contents, 2 + 2 + max_levels + max_levels, false);

    !Write a descriptor record identifying what's to come as header level
    ! information.
    PUTRTY (MAJ_RUNOFF, MIN_HL_INF);

    !First write the header level numbers themselves
    $XPO_PUT (IOB = BRNOOB, BINARY_DATA = (2 + MAX_LEVELS, HLLIST));

    !Now write the display information
    $XPO_PUT (IOB = BRNOOB, BINARY_DATA = (MAX_LEVELS, HLDSP));

    !And that's it for header levels.
    RETURN

    END;					!End of PUTHLI

END						!End of module
ELUDOM
