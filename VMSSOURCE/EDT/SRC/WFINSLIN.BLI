%TITLE 'EDT$WFINSLIN - insert a new line'
MODULE EDT$WFINSLIN (				! Insert a new line
		IDENT = 'V04-000'			! File: WFINSLIN.BLI Edit: JBS1017
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Insert a new line into the current text buffer.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: October 16, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 23-Feb-1981.  This module was created by
!	extracting routine EDT$$INS_LN  from module EDTWF.
! 1-002	- Regularize headers.  JBS 17-Mar-1981
! 1-003 - Change index for line numbers from 10 to 15.  SMB 18-Jan-1982
! 1-004 - Add line number error checks and return value.  SMB 3-Feb-1982
! 1-005	- Handle error return from splitting a bucket.  JBS 09-Jun-1982
! 1-006	- New screen update logic.  JBS 13-Sep-1982
! 1-007	- Remove EDT$$SET_WKLN.  JBS 14-Sep-1982
! 1-008 - Change the call to insert lines.  SMB 21-Sep-1982
! 1-009 - Modify to use new 48 bit macros. STS 01-Oct-1982
! 1-010 - Modify to use new compare macro. 20-Oct-1982
! 1-011	- Count inserted lines, and stop maintaining the screen data
!	   base if we have too many.  JBS 21-Oct-1982
! 1-012	- The counter also counts deleted lines.  JBS 27-Oct-1982
! 1-013 - Add parameters to SC_INSLN.  SMB 02-Dec-1982
! 1-014	- Improve code, add consistency checking.  JBS 28-Dec-1982
! 1-015 - Up the number of recs that can be inserted before SCR_REBUILD is set.  SMB 16-Feb-1983
! 1-016	- Be more defensive with select position updating.  JBS 28-Feb-1983
! 1-017	- Watch out for negative record lengths.  JBS 11-Jul-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$INS_LN;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$INS_LN  - insert a new line'

GLOBAL ROUTINE EDT$$INS_LN (			! Insert a new line
    REC_ADDR, 					! Address of new line
    REC_LEN					! Length of new line
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Insert a new line in the text buffer.  If there is enough space in the
!	current bucket, text is moved around to make a hole and the new line is
!	inserted, otherwise, the bucket is split into two parts.
!
! FORMAL PARAMETERS:
!
!  REC_ADDR 		the address of the new line
!
!  REC_LEN 		the length of the new line
!
! IMPLICIT INPUTS:
!
!	EDT$$A_CUR_BUF
!	EDT$$A_WK_BUK
!	EDT$$G_WK_CURBUK
!	EDT$$L_WK_INSCNT
!	EDT$$A_WK_LN
!	EDT$$L_LNO0
!	EDT$$L_SEL_LN
!	EDT$$A_LN_PTR
!	EDT$$G_RECS_INSERTED
!	EDT$$G_SCR_LNS
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_CUR_BUF
!	EDT$$A_WK_LN
!	EDT$$A_WK_BUK
!	EDT$$G_WK_MODFD
!	EDT$$L_WK_INSCNT
!	EDT$$A_SEL_POS
!	EDT$$G_RECS_INSERTED
!	EDT$$G_SCR_REBUILD
!
! ROUTINE VALUE:
!
!	0 = insertion did not occur , 1 = successful insertion
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$FMT_MSG,
	EDT$$WF_MAKECUR : NOVALUE,
	EDT$$WF_SPLTBUK,
	EDT$$SEL_RNGPOS,
	EDT$$SC_INSLN : NOVALUE;

    EXTERNAL
	EDT$$L_MAX_LINES : LN_BLOCK,		! Maximum lines EDT can handle
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,	! Current text buffer control block
	EDT$$A_WK_BUK : 			! Pointer to current bucket
	    REF BLOCK [WF_BUKT_SIZE, BYTE] FIELD (WFB_FIELDS),
	EDT$$G_WK_CURBUK,			! Number of the current bucket
	EDT$$L_WK_INSCNT : LN_BLOCK,		! The count of inserted lines
	EDT$$A_WK_LN : REF LIN_BLOCK,		! Pointer to current line
	EDT$$G_WK_MODFD,			! Flag indicating bucket was modified
	EDT$$L_LNO0 : LNOVECTOR [14],
	EDT$$A_SEL_POS,				! Select position
	EDT$$A_LN_PTR,				! Pointer into line buffer
	EDT$$T_LN_BUF,				! The line buffer
	EDT$$L_SEL_LN,				! Select line
	EDT$$G_SCR_LNS,				! The number of text lines on the screen
	EDT$$G_RECS_INSERTED,	! Number of records inserted and deleted since the last screen update
	EDT$$G_SCR_REBUILD;		! 1 = the screen data structures must be rebuilt from the work file

    MESSAGES ((MAXLINVAL, INSMEM));

    LOCAL
	OLD_NEXT,
	INS_LEN;

    ASSERT (.REC_LEN GEQ 0);
!+
! Make sure we aren't exceeding the maximum number of lines allowed.
!-

    IF (CMPLNO (EDT$$A_CUR_BUF [TBCB_LINE_COUNT], EDT$$L_MAX_LINES) GEQ 0)
    THEN
	BEGIN
	EDT$$FMT_MSG (EDT$_MAXLINVAL);
	RETURN (0);
	END;

!+
! Fix up select range if necessary.
!-

    CASE EDT$$SEL_RNGPOS () FROM -1 TO 1 OF
	SET

	[0] : 					! Current line is select line

	    IF CH$PTR_GTR (.EDT$$A_SEL_POS, .EDT$$A_LN_PTR)
	    THEN
		BEGIN
		EDT$$A_SEL_POS = MINA (EDT$$T_LN_BUF, CH$PLUS (.EDT$$A_SEL_POS, -.REC_LEN));
		ADDLINE (NUMBER_ONE, EDT$$L_SEL_LN);
		END;

	[1] : 					! Current line is before select line
	    ADDLINE (NUMBER_ONE, EDT$$L_SEL_LN);

	[-1] : 					! Current line is after select line, or no select
	    BEGIN
	    0
	    END;

	[OUTRANGE] :
	    ASSERT (0);
	TES;

!+
! If we are not going to rebuild the screen data base from the work file,
! tell the screen updater that we have inserted a line.
!-

    IF ( NOT .EDT$$G_SCR_REBUILD)
    THEN
	BEGIN
	EDT$$G_RECS_INSERTED = .EDT$$G_RECS_INSERTED + 1;

	IF (.EDT$$G_RECS_INSERTED GTR (.EDT$$G_SCR_LNS*2))
	THEN
	    EDT$$G_SCR_REBUILD = 1
	ELSE
	    EDT$$SC_INSLN (.REC_ADDR, .REC_LEN);

	END;

!+
! Update the various counters for this text buffer.
!-
    ADDLINE (NUMBER_ONE, EDT$$A_CUR_BUF [TBCB_LINE_COUNT]);
    EDT$$A_CUR_BUF [TBCB_CHAR_COUNT] = .EDT$$A_CUR_BUF [TBCB_CHAR_COUNT] + .REC_LEN;
    ADDLINE (NUMBER_ONE, EDT$$A_CUR_BUF [TBCB_CUR_LIN]);
    EDT$$A_WK_LN = CH$PTR (.EDT$$A_WK_BUK, .EDT$$A_CUR_BUF [TBCB_LINE_ADDR]);
!+
! Compute the length of the line to be inserted, including the line number information.
!-
    INS_LEN = .REC_LEN + LIN_FIXED_SIZE + 1;
!+
! Will it fit in this bucket?
!-

    IF ((.EDT$$A_WK_BUK [WFB_END] + .INS_LEN) GTRU WF_BUKT_SIZE)
    THEN
!+
! If we are at the beginning of a bucket and it is not the
! first bucket, then check out the previous bucket.
!-

	IF ((.EDT$$A_CUR_BUF [TBCB_LINE_ADDR] EQL WFB_FIXED_SIZE) AND 	!
	    (.EDT$$A_WK_BUK [WFB_PREV_BUKT] NEQ 0))
	THEN
	    BEGIN
!+
! Read the previous bucket and position to it's end.
!-
	    EDT$$WF_MAKECUR (.EDT$$A_WK_BUK [WFB_PREV_BUKT]);
	    EDT$$A_CUR_BUF [TBCB_LINE_ADDR] = .EDT$$A_WK_BUK [WFB_END];
	    EDT$$A_CUR_BUF [TBCB_CUR_BUKT] = .EDT$$G_WK_CURBUK;
	    END;

!+
! If it still doesn't fit, then split the bucket.  Note that
! the while loop is here because it may not fit after the first
! split.  In this case the second split is guaranteed to create
! a new bucket and the line must fit.
!-

    WHILE ((.EDT$$A_WK_BUK [WFB_END] + .INS_LEN) GTRU WF_BUKT_SIZE) DO
	BEGIN

	IF ( NOT EDT$$WF_SPLTBUK ())
	THEN
	    BEGIN
	    EDT$$FMT_MSG (EDT$_INSMEM);
	    RETURN (0);
	    END;

	END;

!+
! Make a hole for the line to be inserted.
!-
    EDT$$A_WK_LN = CH$PTR (.EDT$$A_WK_BUK, .EDT$$A_CUR_BUF [TBCB_LINE_ADDR]);
    EDT$$CPY_MEM (.EDT$$A_WK_BUK [WFB_END] - .EDT$$A_CUR_BUF [TBCB_LINE_ADDR], 	!
	.EDT$$A_WK_LN, 				!
	CH$PLUS (.EDT$$A_WK_LN, .INS_LEN));
!+
! Update the end of bucket field to reflect new size.
!-
    EDT$$A_WK_BUK [WFB_END] = .EDT$$A_WK_BUK [WFB_END] + .INS_LEN;
!+
! And move the line into the bucket buffer.
!-
    EDT$$A_WK_LN [LIN_LENGTH] = .REC_LEN;
    CH$WCHAR (.REC_LEN, EDT$$CPY_MEM (.REC_LEN, .REC_ADDR, EDT$$A_WK_LN [LIN_TEXT]));
!+
! Update the record pointer
!-
    EDT$$A_CUR_BUF [TBCB_LINE_ADDR] = .EDT$$A_CUR_BUF [TBCB_LINE_ADDR] + .INS_LEN;
!+
! Set the "modified" flag, and bump the count of inserted lines.
!-
    EDT$$G_WK_MODFD = 1;
    ADDLINE (NUMBER_ONE, EDT$$L_WK_INSCNT);
!+
! Now make sure we are positioned correctly.
!-

    IF (.EDT$$A_CUR_BUF [TBCB_LINE_ADDR] GEQ .EDT$$A_WK_BUK [WFB_END])
    THEN

	IF (.EDT$$A_WK_BUK [WFB_NEXT_BUKT] NEQ 0)
	THEN
	    BEGIN
	    EDT$$WF_MAKECUR (.EDT$$A_WK_BUK [WFB_NEXT_BUKT]);
	    EDT$$A_CUR_BUF [TBCB_LINE_ADDR] = WFB_FIXED_SIZE;
	    EDT$$A_CUR_BUF [TBCB_CUR_BUKT] = .EDT$$G_WK_CURBUK;
	    END;

    EDT$$A_WK_LN = CH$PTR (.EDT$$A_WK_BUK, .EDT$$A_CUR_BUF [TBCB_LINE_ADDR]);
    RETURN (1)
    END;					! of routine EDT$$INS_LN

!<BLF/PAGE>

END						! of module EDT$WFINSLIN

ELUDOM
