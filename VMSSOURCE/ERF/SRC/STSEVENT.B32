Module STATUS_AND_EVENT_DECODE
(%TITLE 'Status and event decode'
IDENT = 'V04-000')=
	
BEGIN
	
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  ERF, Error Log Report Generator
!
! ABSTRACT:
!
! 	This module contains the routines that decode the status and
!	event codes for MSCP entries.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, user mode.
!
! AUTHOR:  Sharon Reynolds,	CREATION DATE: May-1984
!
! Modified By:
!
!	V03-002	SAR0289		Sharon A. Reynolds	16-July-1984
!		- Fixed a bug that indicates no msg1, if the code is out of
!		range.
!		- Added TA78 event codes.
!
!	V03-001	SAR0286		Sharon A. Reynolds	5-Jul-1984
!		Added a msg1 present indicator for tape only messages.
!
!--

Require 'SRC$:ERFDEF.REQ' ;

Forward routine
    Status_and_event_decode : novalue ;

External
    Emb:	$BBLOCK PSECT (EMB) ;

Macro
    Device_class = 18,0,8,0 %,
    Sts_or_event_code = 48,0,16,0 % ;

Own
    Msg:	Ref $BBLOCK,
    Msg1:	Ref $BBLOCK,
    No_msg:	Initial (%ASCID '*'),
    Value,
    Value_specified,
    Frmtr_err_codes:	VECTOR [11,word]
			Initial (word (%X'7EF',%X'7F0',%X'7F8',%X'7FB',%X'7FE',
				%X'7FF',1,2,3,4,5) ),
    Position_lst_codes:	VECTOR [4,word]
			Initial (word (%X'7F9',%X'7FB',%X'7FE',%X'7FF') ),
    Drv_err_codes:	VECTOR [16,word]
			Initial (word (%X'7F1',%X'7F2',%X'7F3',%X'7F4',
				%X'7F5',%X'7F6',%X'7F7',%X'7F8',%X'7FB',
				%X'7FE',%X'7FF',0,1,2,3,4) ) ;


STORE_STRINGS ( frmtr_errs,
		'COULD NOT GET EXTENDED DRV STS',
		'COULD NOT GET FRMTR SUMMARY STS',
		'TOPOLOGY COMMAND FAILED',
		'FORMATTER REQUESTED ERROR LOG',
		'CAN NOT CLEAR FRMTR ERRORS',
		'COULD NOT GET FRMTR SUMMARY STS',
	    	'EQUIPMENT CHECK',
		'INTERVENTION REQUIRED',
		'COMMAND REJECT',
		'FORMATTER RESPONSE CHECK',	
		'FORMATTER SENSE READ ERROR' ) ;

STORE_STRINGS ( position_lst,
		'RESTORE TAPE POS, RETRY LIMIT EXCEEDED',
		'FRMTR DETECTED POSITION LOST',
		'FRMTTR AND CNTRLR DISAGREE ON POSITION',
		'CNTRLR DETECTED POSITION LOST' ) ;

STORE_STRINGS ( drive_errs,
		'COULD NOT SET BYTE CNT',
		'COULD NOT WRITE TAPE MARK',
		'COULD NOT SET UNIT CHARACTERISTICS',
		'UNABLE TO POSITION TO BEFORE "LEOT"',
		'REWIND FAILURE',
		'COULD NOT COMPLETE ONLINE SEQUENCE',
		'ERASE GAP FAILED',
		'ERASE FAILED',
		'TAPE DRIVE REQSTED ERROR LOG',
		'COULD NOT POSITION FOR RETRY (FRMTR)',
		'CAN NOT CLEAR DRIVE ERRORS',
		'DEVICE RESPONSE CHECK',
		'DEVICE HARDWARE CHECK',
		'VELOCITY CHECK',
		'DEVICE COMMAND CHECK',
		'AIRFLOW/TEMPERATURE CHECK' ) ;



Global Routine STATUS_AND_EVENT_DECODE (msg_part1,msg_part2,value_1) : novalue = 
Begin

!++
!
! Functional Description:
!
!    This routine decodes the status and event code included in an MSCP
!    entry and returns the text associated with the code.
!
! Calling Sequence:
!
!	STATUS_AND_EVENT_DECODE (msg1,msg2,value1)
!    
! Input Parameters:
!
!	Msg1 = address of descriptor for msg1
!	Msg2 =  address of descriptor for msg2
! 	Value1 = address for value
!
!--
Local
    Msg1_present:	Initial (1) ;

Bind 
    Msg_desc1 = .msg_part1 : vector [2,long],
    Msg_desc2 = .msg_part2 : vector [2,long],
    Sts_event_code = emb[sts_or_event_code] : word,
    Sub_code = .sts_event_code<5,11> ;

Case .sts_event_code<0,5> from 0 to %X'13' of
    Set
    [0]: 
	Begin
	Msg = %ASCID 'SUCCESS' ;

	Selectone sub_code of
	    Set
	    [0]: Msg1 = %ASCID 'NORMAL' ;
	    [1]: Msg1 = %ASCID 'SPIN DOWN IGNORED' ;
	    [2]: Msg1 = %ASCID 'STILL CONNECTED' ;
	    [4]: Msg1 = %ASCID 'DUPLICATE UNIT #' ;
	    [8]: Msg1 = %ASCID 'ALREADY ON-LINE' ;
	    [%X'10']: Msg1 = %ASCID 'STILL ON-LINE' ;
	    [%X'11']: Msg1 = %ASCID 'STILL ONLINE, UNLOAD IGNORED' ;
	    [%X'20']: Msg1 = %ASCID '"EOT" ENCOUNTERED' ;

	    [OTHERWISE]: Msg1 = .no_msg ;
	    Tes ;
	End ;

    [1]: 
	Begin
	Msg = %ASCID 'INVALID COMMAND' ;

	Selectone sub_code of
	    Set
	    [0]: Msg1 = %ASCID 'INVALID MSG LENGTH' ;
	    [%X'40']: Msg1 = %ASCID 'INVALID OPCODE' ;
	    [%X'50']: Msg1 = %ASCID 'INVALID MODIFIERS' ;
	    [%X'60']: Msg1 = %ASCID 'INVALID "MSCP" VERSION' ;
	    [%X'70']: Msg1 = %ASCID 'INVALID CONTROLLER FLAGS' ;
	    [%X'100']: Msg1 = %ASCID 'INVALID FORMAT' ;

	    [OTHERWISE]: Msg1 = .no_msg ;
	    Tes ;
	End ;

    [2]: Msg = %ASCID 'COMMAND ABORTED' ;

    [3]: 
	Begin
	Msg = %ASCID 'UNIT OFFLINE' ;

	Selectone sub_code of
	    Set
	    [0]: Msg1 = %ASCID 'UNIT UNKNOWN OR NOT AVAILABLE' ;
	    [1]: 
		Begin
		If (.emb[emb$b_lm_class] EQL DC$_DISK) OR

		    (.emb[emb$b_lm_class] EQL DC$_BUS  AND
		    (.emb[emb$b_lm_type] EQL DT$_UDA50 OR
		    .emb[emb$b_lm_type] EQL DT$_UDA50A))
		Then
		    Msg1 = %ASCID 'KNOWN SUB-STATE OF "UNIT-OFFLINE"' ;

		If (.emb[emb$b_lm_class] EQL DC$_TAPE) OR

		    (.emb[emb$b_lm_class] EQL DC$_BUS AND
		    .emb[emb$b_lm_type] EQL DT$_TU81P)
		Then	 
		    Msg1 = %ASCID 'NO MEDIA LOADED' ;
		End ;
		
	    [2]: Msg1 = %ASCID 'UNIT IS INOPERATIVE' ;
	    [4]: Msg1 = %ASCID 'DUPLICATE UNIT #' ;
	    [%X'8']: Msg1 = %ASCID 'UNIT DISABLED' ;

	    [OTHERWISE]: Msg1 = .no_msg ;
	    Tes ;
	End ;

    [4]: Msg = %ASCID 'UNIT AVAILABLE' ;

    [5]: 
	Begin
	Msg = %ASCID 'MEDIA FORMAT ERROR' ;

	Case sub_code from 1 to 9 of
	    Set
	    [1]: Msg1 = %ASCID 'FCT UNREADABLE, EDC ERROR' ;
	    [2]: Msg1 = %ASCID 'FCT UNREADABLE, INVALID HEADER' ;
	    [3]: Msg1 = %ASCID 'FCT UNREADABLE, DATA SYNC TIMEOUT' ;
	    [5]: Msg1 = %ASCID 'FORMAT NOT 512 BYTE SECTORS' ;
	    [6]: Msg1 = %ASCID 'NOT FORMATTED OR FCT CORRUPT' ;
	    [7]: Msg1 = %ASCID 'FCT UNREADABLE, HARD ECC ERROR' ;
	    [9]: Msg1 = %ASCID 'NO REPLACEMENT BLOCK AVAILABLE' ;

	    [INRANGE]: Msg1 = .no_msg ;
	    [OUTRANGE]: Msg1 = .no_msg ;
	    Tes ;
	End ;

    [6]: 
	Begin
	Msg = %ASCID 'WRITE PROTECT' ;

	Selectone sub_code of
	    Set
	    [%X'80']: Msg1 = %ASCID 'UNIT SOFTWARE' ;
	    [%X'100']:  Msg1 = %ASCID 'UNIT HARDWARE' ;
	    [%X'110']: Msg1 = %ASCID 'HARDWARE/SOFTWARE FOR UNIT' ;

	    [OTHERWISE]: Msg1 = .no_msg ;
	    Tes ;
	End ;

    [7]: Msg = %ASCID 'COMPARE ERROR' ;

    [8]: 
	Begin
	Msg = %ASCID 'DATA ERROR' ;

	If (.emb[emb$b_lm_class] EQL DC$_DISK) OR
	    (.emb[emb$w_hd_entry] EQL EMB$K_LOGMSCP AND
	     .emb[device_class] EQL 'D') 
	Then
	    Begin
	Selectone sub_code of
		Set
		[0]: Msg1 = %ASCID 'SECTOR W/ "FORCE ERROR" MODIFIER' ;
		[2]: Msg1 = %ASCID 'HEADER COMPARE ERROR' ;
		[3]: Msg1 = %ASCID 'DATA SYNC NOT FOUND' ;
		[4]: Msg1 = %ASCID 'CORRECTABLE ERROR IN ECC FIELD' ;
		[7]: Msg1 = %ASCID 'UNCORRECTABLE "ECC" ERROR' ;
		[8,9,%X'A',%X'B',%X'C',%X'D',%X'E',%X'F']:
		    Begin
		    Msg1 = %ASCID '. SYMBOL "ECC" ERROR' ;
		    Value = sub_code - 7 ;
		    Value_specified = true ;
		    End ;

		[OTHERWISE]: Msg1 = .no_msg ;
		Tes ;
	    End 
	Else
	    Begin
	    If (.emb[emb$b_lm_class] EQL DC$_TAPE) OR
		(.emb[emb$w_hd_entry] EQL EMB$K_LOGMSCP AND
		.emb[device_class] EQL 'T')
	    Then
		Begin	
		Case sub_code from 2043 to 2047 of
		    Set
		    [2043]: Msg1 = %ASCID 'FRMTR RETRY SEQ EXHAUSTED' ;
		    [2044]: Msg1 = %ASCID 'CNTRLR XFER RETRY LIMIT EXCEEDED' ;
		    [2045]: Msg1 = %ASCID 'HOST REQST RETRY SUPPRESS (K.STI)' ;
		    [2046]: Msg1 = %ASCID 'REVRS RETRY NOT SUPPORTED' ;
		    [2047]: Msg1 = %ASCID 'HOST REQST RETRY SUPPRESS (FRMTR)' ;
		    [OUTRANGE]: 
			Begin	
			Case sub_code from 0 to %X'A' of
			    Set
			    [0]: Msg1 = %ASCID 'LONG GAP ENCOUNTERED' ;
			    [1]: Msg1 = %ASCID 'AGC FAULT' ;
			    [2]: Msg1 = %ASCID 'ID FAULT' ;
			    [3]: Msg1 = %ASCID 'READ DATA CHECK' ;
			    [4]: Msg1 = %ASCID 'UNIT EXCEPTION' ;
			    [5]: Msg1 = %ASCID '"FIFO" OVERRUN/OVERFLOW' ;
			    [6]: Msg1 = %ASCID 'FORMATTER READ PARITY ERROR' ;
			    [7]: Msg1 = %ASCID 'UNRECOVERABLE READ ERROR' ;
			    [8]: Msg1 = %ASCID '"FIFO" PARITY ERROR' ;
			    [9]: Msg1 = %ASCID '"I/F" PARITY ERROR' ;
			    [%X'A']: Msg1 = %ASCID '"LESI" PARITY ERROR' ;

			    [OUTRANGE]: Msg1 = .no_msg ;
			    Tes ;
			End ;
		    Tes ;
		End 
	    Else
		Msg1 = .no_msg ;
	    End ;
	End ;

    [9]: 
	Begin
	Msg = %ASCID 'HOST BUFFER ACCESS ERROR' ;

	Case sub_code from 1 to 5 of
	    Set
	    [1]: Msg1 = %ASCID 'ODD TRANSFER ADDRESS' ;
	    [2]: Msg1 = %ASCID 'ODD BYTE COUNT' ;
	    [3]: Msg1 = %ASCID 'NON-EXISTENT MEMORY ERROR' ;
	    [4]: Msg1 = %ASCID 'HOST MEMORY PARITY ERROR' ;
	    [5]: Msg1 = %ASCID 'INVALID PAGE TABLE ENTRY' ;

	    [OUTRANGE]: Msg1 = .no_msg ;
	    Tes ;
	End ;

    [%x'A']: 
	Begin
	Msg = %ASCID 'CONTROLLER ERROR' ;

	If (.emb[emb$b_lm_class] EQL DC$_DISK) OR
	    (.emb[emb$w_hd_entry] EQL EMB$K_LOGMSCP AND
	     .emb[device_class] EQL 'D') 
	Then
	    Begin
	Selectone sub_code of
		Set
		[1]: Msg1 = %ASCID '"SERDES" OVERRUN ERROR' ;
		[2]: Msg1 = %ASCID '"EDC" ERROR' ;
		[3]: Msg1 = %ASCID 'INTERNAL DATA-STRUCTURE ERROR' ;
		[4]: Msg1 = %ASCID 'INTERNAL "EDC" ERROR' ;
		[5]: Msg1 = %ASCID 'LESI ADAPTER CARD PARITY ERROR (INPUT)' ;
		[6]: Msg1 = %ASCID 'LESI ADAPTER CARD PARITY ERROR (OUTPUT)' ;
		[7]: Msg1 = %ASCID 'LESI ADAPTER CARD, CABLE NOT IN PLACE' ;
		[%X'8']: Msg1 = %ASCID 'DATA BUS OVERRUN' ;
		[%X'9']: Msg1 = %ASCID 'DATA MEMORY ERROR' ;
		[%X'A']: Msg1 = %ASCID '"PLI" RECEPTION BUFFER PE' ;
		[%X'B']: Msg1 = %ASCID '"PLI" TRANSMISSION BUFFER PE' ;

		[OTHERWISE]: Msg1 = .no_msg ;
		Tes ;
	    End 
	Else
	    Begin
	    If (.emb[emb$b_lm_class] EQL DC$_TAPE) OR
		(.emb[emb$w_hd_entry] EQL EMB$K_LOGMSCP AND
		.emb[device_class] EQL 'T')
	    Then
		Begin
		Case sub_code from 0 to 1 of
		    Set
		    [0]: Msg1 = %ASCID 'GROSS TIME OUT' ;
		    [1]: Msg1 = %ASCID 'DATA LATE' ;

		    [OUTRANGE]: Msg1 = .no_msg ;
		    Tes ;
		End 
	    Else
		Msg1 = .no_msg ;
	    End ;
	End ;


    [%x'B']: 
	Begin
	Msg = %ASCID 'DRIVE ERROR' ;

	If (.emb[emb$b_lm_class] EQL DC$_DISK) OR
	    (.emb[emb$w_hd_entry] EQL EMB$K_LOGMSCP AND
	     .emb[device_class] EQL 'D') 
	Then
	    Begin
	    Case sub_code from 1 to %X'E' of
		Set
		[1]: Msg1 = %ASCID '"SDI" COMMAND TIMEOUT' ;
		[2]: Msg1 = %ASCID 'CONTROLLER DETECTED "SDI" ERROR' ;
		[3]: Msg1 = %ASCID 'POSITIONER ERROR' ;
		[4]: Msg1 = %ASCID 'LOST "R/W READY", (TRANSFER)' ;
		[5]: Msg1 = %ASCID 'DRIVE CLOCK DROPOUT' ;
		[6]: Msg1 = %ASCID 'LOST "RECEIVER READY", (TRANSFER)' ;
		[7]: Msg1 = %ASCID 'DRIVE DETECTED ERROR' ;
		[8]: Msg1 = %ASCID 'PULSE OR STATE PARITY ERROR' ;
		[9]: Msg1 = %ASCID 'DRIVE REQUESTED ERROR LOG' ;
		[%X'A']: Msg1 = %ASCID 'RESPONSE LENGTH OR OPCODE ERROR' ;
		[%X'B']: Msg1 = %ASCID 'NO CLOCK AFTER "INIT"' ;
		[%X'C']: Msg1 = %ASCID 'CLOCK PRESENT AFTER "INIT"' ;
		[%X'D']: Msg1 = %ASCID 'RECEIVER READY COLLISION' ;
		[%X'E']: Msg1 = %ASCID 'RESPONSE OVERFLOW' ;

		[OUTRANGE]: Msg1 = .no_msg ;
		Tes ;
	    End 
	Else
	    Begin
	    If (.emb[emb$b_lm_class] EQL DC$_TAPE) OR
		(.emb[emb$w_hd_entry] EQL EMB$K_LOGMSCP AND
		.emb[device_class] EQL 'T')
	    Then
		Begin
		Msg1 = .no_msg ;

		Incr I from 0 to 15 do
		    Begin
		    If sub_code EQL .drv_err_codes[.I]
		    Then
			Begin
			Msg1 = drive_errs_desc_tbl[.I,0,0,0,0] ;
			End ;
		    End ;
		End ;
	    End ;
	End ;	

    [%X'C']: 					! TAPE only
	Begin
	Msg = %ASCID 'FORMATTER ERROR' ;

	Msg1 = .no_msg ;

	Incr I from 0 to 10 do
	    Begin
	    If sub_code EQL .frmtr_err_codes[.I]
	    Then
		Begin
		Msg1 = frmtr_errs_desc_tbl[.I,0,0,0,0] ;
		End ;
	    End ;
	End ;

    [%X'D']: 
	Begin
	Msg = %ASCID '"BOT" ENCOUNTERED' ;		! The following are for
	Msg1_present = 0 ;				!  TAPE only
	End ;						

    [%X'E']: 
	Begin
	Msg = %ASCID 'TAPE MARK ENCOUNTERED' ;	
	Msg1_present = 0 ;
	End ;

    [%X'10']: 
	Begin
	Msg = %ASCID 'RECORD DATA TRUNCATED' ;
	Msg1_present = 0 ;
	End ;

    [%X'11']: 
	Begin
	Msg = %ASCID 'POSITION LOST' ;

	Msg1 = .no_msg ;

	Incr I from 0 to 3 do
	    Begin
	    If sub_code EQL .position_lst_codes[.I]
	    Then
		Begin
		Msg1 = position_lst_desc_tbl[.I,0,0,0,0] ;
		End ;
	    End ;
	End ;

    [%X'12']: 
	Begin
	Msg = %ASCID 'SERIOUS EXCEPTION PRESENT' ;
	Msg1_present = 0 ;
	End ;

    [%X'13']: 
	Begin
	Msg = %ASCID '"LEOT" DETECTED' ;
	Msg1_present = 0 ;
	End ;

    [INRANGE]: 
	Begin
	Msg = .no_msg ;
	Msg1 = .no_msg ;
	End ;

    [OUTRANGE]: 
	Begin
	Msg = .no_msg ;
	Msg1 = .no_msg ;
	End ;
    Tes ;

!
! Update the length of the message and move the message into the 
! descriptor for msg and msg1.
!
Msg_desc1[0] = .msg[dsc$w_length] ;
CH$MOVE (.msg[dsc$w_length],.msg[dsc$a_pointer],.msg_desc1[1]) ;

If (.msg1_present)
Then
    Begin
    Msg_desc2[0] = .msg1[dsc$w_length] ;
    CH$MOVE (.msg1[dsc$w_length],.msg1[dsc$a_pointer],.msg_desc2[1]) ;
    End ;

!
! Determine if a value was needed and copy it, else indicate that it
! was not needed by setting the location to a -1.
!
If .value_specified 
Then 
    .value_1 = .value
Else
    .value_1 = -1 ;


Return ;
End ;	! Routine

End	! Module
ELUDOM
