MODULE COMLABPROC (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY: INITIALIZE, MOUNT, MTAACP
!
! ABSTRACT:
!	This module contains routines that are shared amoung the
!	MOUNT, INIT, and MTAACP. These routines deal with the
!	processing of the various labels that the MTAACP supports.
!
!
! ENVIRONMENT:
!
!	VMS operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
!
! AUTHOR:  Meg Dumont,			 CREATION DATE:  21-Feb-1983
!
! MODIFIED BY:
!
!	V03-005	HH0041		Hai Huang	24-Jul-1984
!		Remove REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.B32'.
!
!	V03-004	MMD0272		Meg Dumont,	23-Mar-1984  9:41
!		Add the common routine GET_RECORD part of support for $MTACCESS
!
!	V03-003	MMD0175		Meg Dumont,	26-May-1983  15:10
!		Change VOL1 to indicate ANSI level 4 when writing system 
!		code in VOL1
!
!	V03-002	MMD0137		Meg Dumont,	12-Apr-1983  17:30
!		In TAPE_OWNER_PROT, added a check for a nonVMS nonblank
!		VOL1 OWNER IDENTIFIER field.
!
!	V03-001	MMD0122		Meg Dumont,	29-Mar-1983  0:46
!		This module is does the common ANSI label processing for 
!		thE MTAACP, MOUNT and INIT.
!
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

REQUIRE 'LIBD$:[VMSLIB.OBJ]INITMSG.B32';

FORWARD ROUTINE
    GET_RECORD,				! routine to get record tape is reading
    CHECK_PROT,				! check VMS protection on tape
    FORMAT_VOLOWNER	: NOVALUE,	! format the volume onwer field
    PROCESS_VOL2_LABEL,			! intepret the VOL2 label
    TAPE_OWN_PROT;			! determine the VMS owner and
					! protection of a tape
    EXTERNAL ROUTINE
	LIB$CVT_OTB	: ADDRESSING_MODE (GENERAL);



GLOBAL ROUTINE GET_RECORD(UCB) =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is called before and after the call to $MTACCESS to return
!	the record that the tape drive is currently processing
!
! CALLING SEQUENCE:
!	KERNEL_CALL (GET_RECORD, ARG1)
!
! INPUT PARAMETERS:
!	ARG1 -  Address of tapes UCB
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!
! ROUTINE VALUE:
!	Current record the tape drive is processing.
!
! SIDE EFFECTS:
!	NONE
!
! USER ERRORS:
!	NONE
!
!--

    BEGIN
	MAP UCB : REF BBLOCK;
	RETURN .UCB[UCB$L_RECORD];
    END;

GLOBAL ROUTINE TAPE_OWN_PROT ( VOLUIC, VOLUME_PROT : REF BITVECTOR[%BPVAL],
				PROCESS_UIC, VOL1 ) =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine determines the tape_owner and protection of the volume.
!	It uses the OWNER IDENTIFIER field of the VOL1 label. If this
!	field contians a value that VMS does not interpret then, the
!	user is required to have privlegdes to mount the tape. Unless 
!	that user is the VMS owner of the tape determined from the VOL2
!	label.
!
! CALLING SEQUENCE:
!	TAPE_OWN_PROT ( ARG1, ARG2, ARG3, ARG4 )
!
! INPUT PARAMETERS:
!	ARG1 -  Address of area to store the volume uic
!	ARG2 -	Address of area to store the volume protection
!	ARG3 - 	Process UIC
!	ARG4 -	Address of ANSI VOL1 label
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	VOLUME_UIC - owning uic of tape
!	VOLUME_PROT -  tape protection
!
! ROUTINE VALUE:
!	TRUE - Field was blank or was specied in VMS format
!	FALSE - Field was not VMS format, but was pre ANSI Label Standard 
!		version 4 and the tape was created on another DEC operating
!		system that is it has D% information.
!
! SIDE EFFECTS:
!	NONE
!
! USER ERRORS:
!	NONE
!
!--

    BEGIN

    BIND
	VOLUME_UIC = .VOLUIC;		   ! Address of volume uic

    MAP
	VOL1	: REF BBLOCK;		   ! Address of VOL1 label

    LOCAL
	CONV_BUF	: VECTOR [6, BYTE], ! buffer used for converting UIC
	VALUE,				    ! used to hold parital UIC's
	P;				    ! ptr into VOL1 tape owner field

    ! bit numbers for different protections
    !
    LITERAL
	WORLD_WRITE = 13,
	WORLD_READ  = 12,
	GROUP_WRITE = 9,
	GROUP_READ  = 8;

    ! If the LABEL STANDARD VERSION of the VOL1 label (CP 80) is a 4 then
    ! do not process the VOL1 OWNER IDENTIFIER field.

    IF .VOL1[VL1$B_LBLSTDVER] EQL '4'
	THEN RETURN TRUE;

    ! if ANSI tape produced by VAX system, decode tape owner field

    IF .(VOL1[VL1$T_VOLOWNER])<0, 24> EQL 'D%C'
      THEN
	BEGIN

	! set up the pointer to begining of tape owner field

	P = VOL1[VL1$T_VOLOWNER] + 3;

	! test for encoding

	IF .(.P)<0, 8> NEQ ' '
	THEN
	    BEGIN

	    ! move the UIC group field from the VOL1 label to the buffer

	    CH$MOVE(5, .P, CONV_BUF);

	    ! remove overlay encoding

	    IF .(.P)<0, 8> GEQ 'A' 
	    THEN CONV_BUF<0, 8> = .(.P)<0, 8> - ('A' - '0');

	    ! convert to ASCII to binary exit with failure not a VMS tape

	    IF NOT LIB$CVT_OTB(5, CONV_BUF, VALUE) THEN	RETURN FALSE;

	    ! fill in the UIC group field

	    VOLUME_UIC<16, 16> = .VALUE<0, 16>;
	    END;

	! point to UIC member field
	
	P = .P + 5;

	! test for encoding

	IF .(.P)<0, 8> NEQ ' '
	THEN
	    BEGIN

	    ! move member number into convert buffer

	    CH$MOVE(5, .P, CONV_BUF);

	    ! remove overlay encoding

	    IF .(.P)<0, 8> GEQ 'A'
	    THEN CONV_BUF<0, 8> = .(.P)<0, 8> - ('A' - '0');

	    ! convert to ASCII to binary exit when failure not a VAX tape

	    IF NOT LIB$CVT_OTB(5, CONV_BUF, VALUE)
	    THEN
		BEGIN

		! patch up UIC before returning

		VOLUME_UIC = .PROCESS_UIC;
		RETURN FALSE;
		END;

	    ! fill in the UIC member field

	    VOLUME_UIC <0, 16> = .VALUE<0, 16>;
	    END;

	! Now tape_prot must be decoded if both group and member are blank then
	! all privileges granted
	!
	! pointer to group uic

	P = .P - 5;

	! if field is not blank, then there is a protection mask

	IF NOT CH$FAIL(CH$FIND_NOT_CH(10, .P, ' '))
	THEN
	    BEGIN

	    ! any mask means no world write

	    VOLUME_PROT[WORLD_WRITE] = 1;

	    ! if the 1st char is a digit then no world access

	    IF .(.P)<0, 8> LSS 'A'
	    THEN VOLUME_PROT[WORLD_READ] = 1;

	    ! pointer to member field

	    P = .P + 5;

	    ! test for group rights.  all spaces means both read and write

	    IF NOT CH$FAIL(CH$FIND_NOT_CH(5, .P, ' '))
	    THEN
		BEGIN
		
		! write protection against group if non-blank

		VOLUME_PROT[GROUP_WRITE] = 1;

		! if the 1st char is a digit then no group access

		IF .(.P)<0, 8> LSS 'A'
		THEN VOLUME_PROT[GROUP_READ] = 1;

		END;

	    END;

	END

	! If there is no VMS protection but was pre ANSI Label Standard 
	! version 4 and the tape was created on another DEC operating
	! system that is it has D% information. Then require priviledges
	! to mount the tape.

	ELSE
	BEGIN
	   IF .(VOL1[VL1$T_VOLOWNER])<0,16> NEQ 'D%'
		THEN RETURN TRUE
		ELSE RETURN FALSE;
	END;

    RETURN TRUE;
    END;					! end of routine TAPE_OWN_PRO


GLOBAL ROUTINE PROCESS_VOL2_LABEL ( VOLUIC, VOLUME_PROT : REF BITVECTOR[%BPVAL],
				    PROCESS_UIC, VOL2 ) =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine determines the tape_owner and protection of the volume.
!	It uses the VOL2 label to intepret the VMS specified/formatted
!	protection of this volume. This protection used to exist in the
!	OWNER IDENTIFIER field of the VOL1 label. We have moved it into
!	this label because of changes which will be adopted in the
!	upcoming (version 4) ANSI MAGNETIC TAPE STANDARD
!
! CALLING SEQUENCE:
!	PROCESS_VOL2_LABEL ( ARG1, ARG2, ARG3, ARG4 )
!
! INPUT PARAMETERS:
!	ARG1 -  Address of area to store the volume uic
!	ARG2 -	Address of area to store the volume protection
!	ARG3 - 	Process UIC
!	ARG4 -	Address of ANSI VOL1 label
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	VOLUME_UIC - owning uic of tape
!	VOLUME_PROT -  tape protection
!
! ROUTINE VALUE:
!	TRUE - Field was blank or was specied in VMS format
!	FALSE - Field was non-blank and not VMS format
!
! SIDE EFFECTS:
!	NONE
!
! USER ERRORS:
!	NONE
!
!--

    BEGIN

    BIND
	VOLUME_UIC = .VOLUIC;		   ! Address of volume uic

    MAP
	VOL2	: REF BBLOCK;		   ! Address of VOL2 label

    LOCAL
	CONV_BUF	: VECTOR [6, BYTE], ! buffer used for converting UIC
	VALUE,				    ! used to hold parital UIC's
	P;				    ! ptr into VOL2 owner field

    ! bit numbers for different protections
    !
    LITERAL
	WORLD_WRITE = 13,
	WORLD_READ  = 12,
	GROUP_WRITE = 9,
	GROUP_READ  = 8;

    ! if ANSI tape produced by VAX system, decode tape owner field

    IF .(VOL2[VL2$T_VOLOWNER])<0, 24> EQL 'D%C'
      THEN
	BEGIN

	! set up the pointer to begining of tape owner field

	P = VOL2[VL2$T_VOLOWNER] + 3;

	! test for encoding

	IF .(.P)<0, 8> NEQ ' '
	THEN
	    BEGIN

	    ! move the UIC group field from the VOL2 label to the buffer

	    CH$MOVE(6, .P, CONV_BUF);

	    ! remove overlay encoding

	    IF .(.P)<0, 8> GEQ 'A' 
	    THEN CONV_BUF<0, 8> = .(.P)<0, 8> - ('A' - '0');

	    ! convert to ASCII to binary exit with failure not a VMS tape

	    IF NOT LIB$CVT_OTB(6, CONV_BUF, VALUE) THEN	RETURN FALSE;

	    ! fill in the UIC group field

	    VOLUME_UIC<16, 16> = .VALUE<0, 16>;
	    END;

	! point to UIC member field
	
	P = .P + 6;

	! test for encoding

	IF .(.P)<0, 8> NEQ ' '
	THEN
	    BEGIN

	    ! move member number into convert buffer

	    CH$MOVE(6, .P, CONV_BUF);

	    ! remove overlay encoding

	    IF .(.P)<0, 8> GEQ 'A'
	    THEN CONV_BUF<0, 8> = .(.P)<0, 8> - ('A' - '0');

	    ! convert to ASCII to binary exit when failure not a VAX tape

	    IF NOT LIB$CVT_OTB(6, CONV_BUF, VALUE)
	    THEN
		BEGIN

		! patch up UIC before returning

		VOLUME_UIC = .PROCESS_UIC;
		RETURN FALSE;
		END;

	    ! fill in the UIC member field

	    VOLUME_UIC <0, 16> = .VALUE<0, 16>;
	    END;

	! Now tape_prot must be decoded if both group and member are blank then
	! all privileges granted
	!
	! pointer to group uic

	P = .P - 6;

	! if field is not blank, then there is a protection mask

	IF NOT CH$FAIL(CH$FIND_NOT_CH(12, .P, ' '))
	THEN
	    BEGIN

	    ! any mask means no world write

	    VOLUME_PROT[WORLD_WRITE] = 1;

	    ! if the 1st char is a digit then no world access

	    IF .(.P)<0, 8> LSS 'A'
	    THEN VOLUME_PROT[WORLD_READ] = 1;

	    ! pointer to member field

	    P = .P + 6;

	    ! test for group rights.  all spaces means both read and write

	    IF NOT CH$FAIL(CH$FIND_NOT_CH(6, .P, ' '))
	    THEN
		BEGIN
		
		! write protection against group if non-blank

		VOLUME_PROT[GROUP_WRITE] = 1;

		! if the 1st char is a digit then no group access

		IF .(.P)<0, 8> LSS 'A'
		THEN VOLUME_PROT[GROUP_READ] = 1;

		END;

	    END;

	END;

    RETURN TRUE;
    END;					! end of routine TAPE_OWN_PRO

GLOBAL ROUTINE CHECK_PROT(VOL_PROT,VOL_UIC, PROCUIC,WRT_RING) =

!++
!
! FUNCTIONAL DESCRIPTION:
!	this routine check VMS volume protection
!
! CALLING SEQUENCE:
!	CHECK_PROT(ARG1,ARG2,ARG3,ARG4)
!
! INPUT PARAMETERS:
!	ARG1 - volume protection
!	ARG2 - volume owner UIC
!	ARG3 - Process UIC
!	ARG4 - Write ring status
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	TRUE  - if passes protection
!	FALSE - if does not pass protection
!
! SIDE EFFECTS:
!	NONE
!
! USER ERRORS:
!	NONE
!
!--

    BEGIN

    LOCAL
	PROCESS_UIC	: VECTOR [ 2, WORD ],	! the process UIC
	WRITE_RING	: BITVECTOR [ 1 ];	! is this a write mount

    MAP
	VOL_PROT	: REF BITVECTOR,
	VOL_UIC		: REF VECTOR [ 2, WORD ],
	WRT_RING	: BITVECTOR [ 1 ];	! is this a write mount

    EXTERNAL
	EXE$GL_SYSUIC	: REF BBLOCK ADDRESSING_MODE ( ABSOLUTE );

    LITERAL
	NOT_GROUP_READ  = 8,  ! the group read disable bit
	NOT_GROUP_WRITE = 9,  ! the group write disable bit
	NOT_WORLD_READ  = 12, ! the world read disable bit
	NOT_WORLD_WRITE = 13; ! the world write disable bit
    
    ! get the process UIC

    PROCESS_UIC <0,32> = .PROCUIC;
    
    ! get the write protectio of teh tape

    WRITE_RING [0] = NOT .WRT_RING [0];

    !  check if the user has write access to the tape

    IF ( .PROCESS_UIC [ 1 ] LEQ .EXE$GL_SYSUIC ) OR   ! the user's UIC has a
						      ! system group number
    
       ( NOT .VOL_PROT [ NOT_WORLD_WRITE ] ) OR       ! the tape is world write
    
       (( NOT .VOL_PROT [ NOT_WORLD_READ] ) AND	      ! tape is world read and
        ( NOT .WRITE_RING [ 0 ]	      )) OR	      !  read only mount
    
       (( .PROCESS_UIC [ 1 ] EQL .VOL_UIC [ 1 ] ) AND ! (tape's and user's
        (( NOT .VOL_PROT [ NOT_GROUP_WRITE ] ) OR     ! group match) and
         (( NOT .VOL_PROT [ NOT_GROUP_READ ] ) AND    ! ((tape is group write)
          ( NOT .WRITE_RING [ 0 ]	     ))OR     ! or (tape is group read
						      !  and read only mount) 
	  ( .PROCESS_UIC [ 0 ] EQL .VOL_UIC [ 0 ] ))) ! or (member UIC match))
    
       THEN RETURN TRUE;
    
    IF (( .VOL_PROT [ NOT_WORLD_WRITE] ) AND	      ! user does not have write
	( NOT .VOL_PROT [ NOT_WORLD_READ])) OR	      ! acess but does have read

       (( .VOL_PROT [ NOT_GROUP_WRITE]) AND	      ! or the same for group
	( NOT .VOL_PROT [ NOT_GROUP_READ]))	      ! they have read access

	THEN					      ! Then allow mount but
	   BEGIN				      ! set the tape write lock
	   WRT_RING [ 0 ] = 0;
	   RETURN TRUE;
	   END;

    !  user does not have needed priviledges return error
    !
    RETURN FALSE;
    
    END;				    ! end of Routine CHECK_PROT


GLOBAL ROUTINE FORMAT_VOLOWNER(VOL_LABEL,OWNER,PROTECTION) : NOVALUE  =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine formats the volume owner field in the VOL2 label
!
! CALLING SEQUENCE:
!	FORMAT_VOLOWNER(ARG1,ARG2,ARG3)
!
! INPUT PARAMETERS:
!	ARG1 - address of VOL2 label
!	ARG2 - owner of tape
!	ARG3 - tape protection
!
! IMPLICIT INPUTS:
!	D%C preinitialized
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--

BEGIN

MAP
	VOL_LABEL	: REF BBLOCK,	! address of VOL1 label
	PROTECTION	: BITVECTOR;	! protection to be encoded on tape

LOCAL
	DESCR		: VECTOR [2],	! descriptor
	P;				! pointer

LITERAL
	WORLD_WRITE = 13,
	WORLD_READ = 12,
	GROUP_WRITE = 9,
	GROUP_READ = 8;


! first convert binary owner to ASCII
!
DESCR[0] = 12;
DESCR[1] = VOL_LABEL[VL2$T_VOLOWNER] + 3;
$FAO(
	DESCRIPTOR('!6OW!6OW'), 0,
	DESCR[0],
	.OWNER<16,16>,.OWNER<0,16>);

! now format protection
!
IF NOT .PROTECTION[GROUP_READ] OR NOT .PROTECTION[WORLD_READ] THEN
    BEGIN
    P = VOL_LABEL[VL2$T_VOLOWNER] + 9;
    (.P)<0,8> = .(.P)<0,8> + ('A' - '0');
    END;

! now if group can also write, blank fill member field
!
IF NOT .PROTECTION[GROUP_WRITE] THEN CH$FILL(' ',6,VOL_LABEL[VL2$T_VOLOWNER] + 9);

IF NOT .PROTECTION[WORLD_READ] THEN
    BEGIN
    P = VOL_LABEL[VL2$T_VOLOWNER] + 3;
    (.P)<0,8> = .(.P)<0,8> + ('A' - '0');
    END;
 
IF NOT .PROTECTION[WORLD_WRITE] THEN CH$FILL(' ',12,VOL_LABEL[VL2$T_VOLOWNER] + 3);
END;					!end of routine FORMAT_VOLOWNER

END
ELUDOM
