MODULE INIFCP (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine does the one time initialization for FCP.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines. This routine must be called
!	in kernel mode.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  20-Dec-1976  16:30
!
! MODIFIED BY:
!
!	V03-011	CDS0007		Christian D. Saether	 2-May-1984
!		Create bad block scanner mailbox as permanent.
!
!	V03-010	ACG0415		Andrew C. Goldstein,	12-Apr-1984  12:34
!		Fix end points of locked area descriptors
!
!	V03-009	ACG0408		Andrew C. Goldstein,	24-Mar-1984  0:07
!		Misc bug fixes for storage reorganization
!
!	V03-008	ACG0408		Andrew C. Goldstein,	23-Mar-1984  12:03
!		Dynamically allocate impure storage on startup
!
!	V03-007	CDS0006		Christian D. Saether	19-Feb-1984
!		Remove reference to INIT_POOL.
!		Change external references to general mode.
!
!	V03-006	CDS0005		Christian D. Saether	12-Dec-1983
!		Move all GLOBAL data declarations to COMMON.
!		Eliminate most of the initialization routine in
!		conjunction with the reduction of image sections.
!		Get channel by calling IOC$FFCHAN directly instead
!		of using $ASSIGN (it isn't really assigned to
!		a specific device, anyway).
!
!	V03-005	CDS0004		Christian D. Saether	27-Aug-1983
!		Only assign one disk i/o channel.  Remember its ccb address.
!
!	V03-004	CDS0003		Christian D. Saether	26-Jul-1983
!		Eliminate creation of job controller mailbox.
!
!	V03-003	CDS0002		Christian D. Saether	15-Dec-1982
!		Remove some non-pic references.
!
!	V03-002	CDS0001		C Saether		18-Jul-1982
!		Changes to support ACP to XQP file system.
!
!	V03-001	LMP0037		L. Mark Pilant,		28-Jun-1982  15:10
!		Remove the addressing mode module switch.
!
!	V02-004	ACG0245		Andrew C. Goldstein,	23-Dec-1981  21:04
!		Add job controller mailbox
!
!	V02-003	LMP0004		L. Mark Pilant,		 1-Dec-1981  12:10
!		Make external references use general mode
!
!	V02-002	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:26
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

FORWARD ROUTINE
	INIT_FCP,			! initialize file system
	INIT_STORAGE	: L_NORM NOVALUE; ! initialize global storage

! Dummy vectors to bracket the locked down code and data psects.
!

PSECT	GLOBAL	= $AAAAA$ (NOWRITE, EXECUTE, ALIGN (9));
GLOBAL	CODE_START	: VECTOR [0];

PSECT	GLOBAL	= $LOCKEDC0$ (NOWRITE, EXECUTE, ALIGN (9));
GLOBAL	L_CODE_START	: VECTOR [0];

PSECT	GLOBAL	= $LOCKEDC9$ (NOWRITE, EXECUTE, ALIGN (2));
GLOBAL	L_CODE_END	: VECTOR [0];

GLOBAL ROUTINE INIT_FCP =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine does the one time initialization for FCP.
!	It is called during process creation immediately after
!	the xqp code is mapped.
!
! CALLING SEQUENCE:
!	INIT_FCP ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	system I/O data base
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	IO_CHANNEL: gets channel number of I/O channel
!	IO_CCB: gets ccb address of i/o channel
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCP hooked up to system data base
!
!--

BEGIN

LOCAL
	STORAGE_DESC	: VECTOR [2],	! descriptor for allocated storage
	STATUS;				! system status return

GLOBAL REGISTER
	BASE		= 10;

EXTERNAL
	CTL$GL_CTLBASVA	: ADDRESSING_MODE (ABSOLUTE),
					! base address of permanent P1 space
	EXE$GL_FLAGS	: BITVECTOR ADDRESSING_MODE (ABSOLUTE);
					! system flags vector

EXTERNAL LITERAL
	STORAGE_SIZE	: UNSIGNED (16), ! size of impure area in bytes
	STORAGE_OFFSET	: UNSIGNED (16), ! offset to point base register at
	EXE$V_INIT	: UNSIGNED (6);	! bit position of FCP init flag


! First allocate the impure storage region.
!

IF NOT (STATUS = $EXPREG (PAGCNT = (STORAGE_SIZE + 511) / 512,
			  RETADR = STORAGE_DESC,
			  REGION = 1
			  ))
THEN $EXIT (CODE = .STATUS);
BASE = .STORAGE_DESC[1] + STORAGE_OFFSET;
CTL$GL_CTLBASVA = .STORAGE_DESC[1];

INIT_STORAGE ();

! Finally set the FCP inited bit in the system flags word to indicate that
! a file system now exists (significant only during system startup).
!

IF TESTBITCS (EXE$GL_FLAGS [EXE$V_INIT])
THEN

! This will happen when the xqp is merged into the sysinit process.
! It should have all the privileges we need to create this mailbox,
! so elevating and restoring them is not necessary.
!

    BEGIN
    LOCAL
	MBX_CHAN,
	DESC	: VECTOR [2];

    PIC_DESC ('ACP$BADBLOCK_MBX', DESC );

    IF NOT $CREMBX (CHAN = MBX_CHAN,
		MAXMSG = BBS$C_LENGTH,
		BUFQUO = BBS$C_LENGTH*100,
		PROMSK = %X'FFFF',
		LOGNAM = DESC,
		PRMFLG = 1)
    THEN
	BUG_CHECK (XQPERR);

    $DASSGN (CHAN = .MBX_CHAN);

    END;

SS$_NORMAL

END;					! end of routine INIT_FCP

GLOBAL ROUTINE INIT_STORAGE : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine initializes the file system's global impure area.
!
! CALLING SEQUENCE:
!	INIT_STORAGE ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	system I/O data base
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	IO_CHANNEL: gets channel number of I/O channel
!	IO_CCB: gets ccb address of i/o channel
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCP hooked up to system data base
!
!--

BEGIN

LOCAL
	LOCKED_DESC	: VECTOR [2],	! descriptor for locked down pages
	STATUS;				! system status return

BIND_COMMON;

EXTERNAL
	CTL$GL_F11BXQP	: ADDRESSING_MODE (ABSOLUTE);
					! pointer to XQP

EXTERNAL LITERAL
	STORAGE_SIZE	: UNSIGNED (16), ! size of impure area in bytes
	STORAGE_OFFSET	: UNSIGNED (16); ! offset to point base register at

LINKAGE
	L_FFCHAN	= JSB	: GLOBAL (CHANNEL=1, CCB=2);

GLOBAL REGISTER
	CHANNEL	= 1,
	CCB	= 2	: REF BBLOCK;

EXTERNAL ROUTINE
	IOC$FFCHAN	: L_FFCHAN ADDRESSING_MODE (GENERAL),
					! find free channel
	DISPATCH;			! main dispatch routine


! Now lock appropriate areas into the working set. These are code and data
! that are used at raised IPL, plus the private kernel stack.
!

LOCKED_DESC [0] = L_CODE_START;
LOCKED_DESC [1] = L_CODE_END - 1;

STATUS = $LKWSET (INADR = LOCKED_DESC);
IF NOT .STATUS THEN $EXIT (CODE = .STATUS);

LOCKED_DESC [0] = L_DATA_START;
LOCKED_DESC [1] = L_DATA_END - 1;

STATUS = $LKWSET (INADR = LOCKED_DESC);
IF NOT .STATUS THEN $EXIT (CODE = .STATUS);

! Find an I/O channel for use by the file system.
!

IF NOT IOC$FFCHAN ()
THEN
    BUG_CHECK (NOACPCHAN, 'Failed to find channel for XQP');

CCB [CCB$B_AMOD] = -1;

IO_CCB = .CCB;
IO_CHANNEL = .CHANNEL;

! Initialize the rest of the impure storage area.
!

CODE_SIZE = L_CODE_END - CODE_START;
CODE_ADDRESS = CODE_START;
DATA_SIZE = STORAGE_SIZE;
DATA_ADDRESS = STORAGE_START;

XQP_STKLIM [0] = XQP_QUEUE;
XQP_STKLIM [1] = XQP_STACK;

! Set up the XQP queue head and dispatcher addresses.
!

XQP_QUEUE [0] = XQP_QUEUE;
XQP_QUEUE [1] = XQP_QUEUE;
XQP_DISPATCHER = DISPATCH;

CTL$GL_F11BXQP = XQP_QUEUE;

END;					! end of routine INIT_STORAGE

END
ELUDOM
