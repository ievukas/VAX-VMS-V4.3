MODULE RPG$SQRT ( %TITLE 'Get square root'
		IDENT = '1-002'		! file: RPGSQRT.B32 EDIT:DG1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!
!++
! FACILITY:	RPGII SUPPORT
!
! ABSTRACT
!
!	This routine supports the RPG SQRT opcode.
!
!
! ENVIRONMENT:	Vax-11 User Mode
!
! AUTHOR: Debess Grabazs, CREATION DATE: 8-Feb-1983
!
! MODIFIED BY:
!
! 1-001 - Original. DG 8-Feb-1983
! 1-002 - Error RPG$_INVDATTYP changed to RPG$_INVARG. DG 11-Jul-1983
!--

!<BLF/PAGE>

%SBTTL 'Declarations'
!+
! PROLOGUE FILE:
!-

REQUIRE 'RTLIN:RPGPROLOG';			! Switches, PSECTs, macros,
						!  linkages and LIBRARYs

!+
! LINKAGES
!	NONE
!-

!+
! TABLE OF CONTENTS:
!-

FORWARD ROUTINE
	RPG$SQRT : NOVALUE ;

!+
! INCLUDE FILES
!	NONE
!-

!+
! MACROS
!	NONE
!-

!+
! EQUATED SYMBOLS
!	NONE
!-

!+
! EXTERNAL REFERENCES
!-

EXTERNAL ROUTINE
	COB$CVTID_R7: JSB_67,				! Convert CIT to D_floating
	COB$CVTLI_R8: JSB_678,				! Convert long to CIT (with scaling)
	COB$CVTPD_R9: JSB_6789,				! Convert packed to D_floating
	COB$CVTRDP_R9: JSB_6789,			! Convert D_floating to packed 
	COB$CVTWI_R8: JSB_678,				! Convert word to CIT (with scaling)
	LIB$STOP,					! Stop execution via signalling
	MTH$DSQRT_R5: JSB_D;				! Square root of D_floating

EXTERNAL LITERAL
	MTH$_SQUROONEG,					! Square root of negative number
	RPG$_INVARG;					! Invalid data type

EXTERNAL
	LIB$AB_CVTTP_O,					! Table for convert trailing to packed
	RPG$BTZ;					! Table for translate blank to zero

%SBTTL 'RPG$SQRT - Get square root'
GLOBAL ROUTINE RPG$SQRT(
			FLAGS,				! Translation flag
			NUMBER:	REF BLOCK[,BYTE],	! Argument for square root operation
			RESULT:	REF BLOCK[,BYTE]	! Result of square root operation
			): NOVALUE=

!++	FUNCTIONAL DESCRIPTION
!
!	This routine supports the RPG SQRT opcode.  It is
!	called once by the compiled code for each occurrence
!	of the SQRT opcode for scalars, or once for each
!	element of an array.
!	It accepts an input number of word, long, packed, or
!	right overpunched numeric data type; and outputs a
!	packed result.
!
! CALLING SEQUENCE:
!
!	CALL RPG$SQRT (flags.rl.v, number.rx.ds, result.wp.ds)
!
! FORMAL PARAMETERS:
!
!	flags		longword integer - bit 1 set if blanks in
!			overpunched numeric field should be treated
!			as equivalent to zeroes; otherwise the
!			translation is not done.
!
!	number		address of descriptor of argument for square 
!			root operation.
!			The allowable data types are word, long,
!			packed, and right overpunched numeric.
!
!	result		address of descriptor of result of the square 
!			root operation.
!			The allowable data type is packed.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	SS$_NORMAL
!
! SIDE EFFECTS:
!
!	If NUMBER is negative, the result field is set to zero and the
!	error MTH$_SQUROONEG is signalled.
!
!--
!

!<BLF/PAGE>

 
    BEGIN

    LITERAL
	BTZ_BIT = 2,				! Convert blanks to zeroes
	MAX_PACKED_LEN = 15;			! Maximum allowed packed decimal number length

    LOCAL
	D_VALUE:	VECTOR[2],		! Input number converted to D_floating 
	D_SQRT:		VECTOR[2],		! D_floating square root result
	I_VALUE:	VECTOR[12, BYTE],	! COBOL intermediate temporary
	PACKED_LENGTH,
	PACKED_NUMBER:	VECTOR [MAX_PACKED_LEN/2 + 1, BYTE],
						! Packed decimal number
	SCALE;					! Scale factor

    BUILTIN
	CVTTP;					! Convert trailing to packed

    !+
    !
    ! Get the scale factor.
    !
    !-
    SCALE = (IF .NUMBER[DSC$B_CLASS] EQL DSC$K_CLASS_SD 
	     THEN .NUMBER[DSC$B_SCALE]
	     ELSE 0);

    !+
    !
    ! Convert the input number to D_floating
    !
    !-
    SELECTONE .NUMBER[DSC$B_DTYPE] OF
	SET
	[DSC$K_DTYPE_W]:	! Word
	    BEGIN

	    !+
	    ! Convert word to CIT to d_floating
	    ! (so scale doesn't get lost).
	    !-
	    COB$CVTWI_R8 (.SCALE, .NUMBER[DSC$A_POINTER], I_VALUE);
	    COB$CVTID_R7 (I_VALUE, D_VALUE);

	    END;
	[DSC$K_DTYPE_L]:    	! Long
	    BEGIN

	    !+ 
	    ! Convert long to CIT to d_floating
	    ! (so scale doesn't get lost).
	    !-
	    COB$CVTLI_R8 (.SCALE, .NUMBER[DSC$A_POINTER], I_VALUE);
	    COB$CVTID_R7 (I_VALUE, D_VALUE);

	    END;
	[DSC$K_DTYPE_P]:	! Packed

	    COB$CVTPD_R9 (.SCALE, .NUMBER[DSC$W_LENGTH], .NUMBER[DSC$A_POINTER], D_VALUE);

	[DSC$K_DTYPE_NRO]:	! Right overpunched numeric
	    BEGIN

	    IF (.FLAGS AND BTZ_BIT) NEQ 0	
	    THEN
		!+
		! Translate blanks to zeroes if flag set.
		!-
		CH$TRANSLATE (RPG$BTZ, .NUMBER[DSC$W_LENGTH], .NUMBER[DSC$A_POINTER],
			      0, .NUMBER[DSC$W_LENGTH], .NUMBER[DSC$A_POINTER]);
	    !+
	    ! Convert trailing to packed to d_floating.
	    !-
	    PACKED_LENGTH = MAX_PACKED_LEN;
	    CVTTP (NUMBER[DSC$W_LENGTH], .NUMBER[DSC$A_POINTER], LIB$AB_CVTTP_O, PACKED_LENGTH, PACKED_NUMBER);
	    COB$CVTPD_R9 (.SCALE, MAX_PACKED_LEN, PACKED_NUMBER, D_VALUE);

	    END;
	[OTHERWISE]:

	    LIB$STOP (RPG$_INVARG);

	TES;

    !+
    !
    ! Take the square root of the D_floating value and
    ! convert the result to the output data type (packed)
    !
    !-
    MTH$DSQRT_R5 (.D_VALUE[0], .D_VALUE[1]; D_SQRT[0], D_SQRT[1]);
    SCALE = (IF .RESULT[DSC$B_CLASS] EQL DSC$K_CLASS_SD 
	     THEN .RESULT[DSC$B_SCALE]
	     ELSE 0);
    COB$CVTRDP_R9 (-.SCALE, D_SQRT, .RESULT[DSC$W_LENGTH], .RESULT[DSC$A_POINTER]);

    END; 

END ELUDOM
