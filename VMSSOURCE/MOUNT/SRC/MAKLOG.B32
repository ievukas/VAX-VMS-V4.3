MODULE MAKLOG (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MOUNT Utility Structure Levels 1 & 2
!
! ABSTRACT:
!
!	These routines allocate and hook up the logical name and mounted
!	volume list entries.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  20-Oct-1977  19:30
!
! MODIFIED BY:
!
!	V03-018	HH0041		Hai Huang		24-Jul-1984
!		Remove REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.B32'.
!
!	V03-017	HH0040		Hai Huang		20-Jul-1984
!		Cal EXE$CRE_GTABLE to create the logical name table if
!		it doesn't already exist.
!
!	V03-016	HH0038		Hai Huang		12-Jul-1984
!		Correct MOUNT_FLAGS structure attribute.
!	
!	V03-015	MHB0153		Mark Bramhall		27-Apr-1984
!		Correct NSA$B_ARG_FLAG setting for multiple audits enabled.
!
!	V03-014	ACG0423		Andrew C. Goldstein,	24-Apr-1984  11:06
!		Make disk logical names in MOUNT exec mode to make them
!		available to privileged programs.
!
!	V03-013	HH0012		Hai Huang		09-Apr-1984
!		Get the device owner UIC and the volume protection
!		from the ORB instead of the UCB.
!
!	V03-012	HH0009		Hai Huang		27-Mar-1984
!		Add security auditing support.
!
!	V03-011	HH0007		Hai Huang		21-Mar-1984
!		Add cluster-wide group-volume support, i.e., create the
! 		group logical name in the group table of the current
!		process.
!
!	V03-010	HH0002		Hai Huang		23-Jan-1984
!		Add job-wide mount support.
!
!	V03-009	ROW0254		Ralph O. Weber		12-NOV-1983
!		Cause logical names defined herein to be of the GETDVI 
!		FULLDEVNAM form.  This will result in allocation class names 
!		being used for the equivalence name strings of logical names 
!		defined by mount.  Therefore, the mounted volume logical name 
!		equivalence strings can be held over time and passed around 
!		the VAXcluster without becomming stale.
!
!	V03-008	CDS0001		Christian D. Saether	 2-Aug-1983
!		Remove references to RVX structure (obselete).
!
!	V03-007	DMW4057		DMWalp			23-Jun-1983
!		Change $xxLNM value parameters to be by reference
!
!	V03-006	DMW4050		DMWalp			15-Jun-1983
!		Corrections to DMW4033, added LNM$M_TERMINAL
!		Change over to LNM$_LNMB_ADDR
!
!	V03-005	ADE9004		A.ELDRIDGE		29-May-1983
!		Fixed name binding to logical name tables.
!
!	V03-004	DMW4033		DMWalp			26-May-1983
!		Intergate new logical name structures.
!
!	V03-003	STJ50311	Steven T. Jeffreys,	10-Feb-1982
!		- Make all uses of PHYS_NAME indexed by DEVICE_INDEX,
!		  but always use PHYS_NAME[0] for tape mounts.
!		- Set the access mode of the logical names(s) created
!		  to be the MIN (PSL$C_SUPER,.CALLERS_ACMOD).  (SPR 45688)
!
!	V03-002	DMW4010		DMWalp			19-Nov-1982
!		Rework logical name block to MTL ( or UCB ) links.
!
!	V03-001	STJ0248		Steven T. Jeffreys,	31-Mar-1982
!		- Allow for ASCII "A" characters in a volume name.
!
!	V02-006	STJ0205		Steven T. Jeffreys,	07-Feb-1982
!		Create a local copy of the user specified logical name
!		to prevent it from being stepped on.
!
!	V02-005	LMP0006		L. Mark Pilant,		29-Dec-1981 12:00
!		Interlock the mount list to avoid potential disasters.
!
!	V02-004	ACG0219		Andrew C. Goldstein,	23-Oct-1981  10:48
!		Add concealed device support in MOUNT
!
!	V02-003	STJ0122		Steven T. Jeffreys,	10-Sep-1981
!		Fixed references to the logical name descriptor to use
!		the symbolic offsets.  This ensures that references to
!		the logical name length will be WORD context.
!
!	V02-002	ACG0167		Andrew C. Goldstein,	18-Apr-1980  13:38
!		Previous revision history moved to MOUNT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:MOUDEF.B32';


LITERAL
	PHYS_LENGTH	= 15;		! longest allowable physical name

FORWARD ROUTINE
	LABEL_LENGTH;			! return the length of a volume label

GLOBAL ROUTINE ALLOC_LOGNAME (MODE) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine allocates the mounted volume list entry from the
!       appropriate storage pools.  It used to allocate logical name block
!	also ( thus the name ).
!
!
! CALLING SEQUENCE:
!	ALLOC_LOGNAME ()
!
! INPUT PARAMETERS:
!	MODE: 0 to use user-specified logical name
!	      1 to force use of volume name
!
! IMPLICIT INPUTS:
!	MOUNT parser database
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	MTL_ENTRY: address of MTL block
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

EXTERNAL
	MOUNT_OPTIONS	: BITVECTOR,	! command options
	MTL_ENTRY	: REF BBLOCK;	! MTL block

EXTERNAL ROUTINE
	ALLOCATE_MEM;			! allocate dynamic memory


! Now allocate the mounted volume list entry.
! Note: to support job-wide mount, a mount list entry
! is always allocated from paged pool.
!
MTL_ENTRY = ALLOCATE_MEM (MTL$C_LENGTH, 1);

MTL_ENTRY[MTL$B_TYPE] = DYN$C_MTL;

END;					! end of routine ALLOC_LOGNAME

GLOBAL ROUTINE ENTER_LOGNAME (UCB, VCB) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine completes the logical name and mounted volume list
!	entries.  It builds MTL entry and creates the logical name
!	and hooks up the MTL entry in the appropriate list.
!
!
! CALLING SEQUENCE:
!	ENTER_LOGNAME (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: UCB of volume being mounted
!	ARG2: VCB of volume being mounted
!
! IMPLICIT INPUTS:
!	MOUNT parser data base
!	MTL_ENTRY: address of MTL block
!	SMTL_ENTRY: address of MTL block for volume set
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	logical name and MTL entry entered
!
!--

BEGIN

MAP
	UCB		: REF BBLOCK,	! UCB being mounted
	VCB		: REF BBLOCK;	! VCB being mounted

BUILTIN
	INSQUE,
	CALLG;

BIND
	TAPE_PREFIX	= UPLIT BYTE ( 'TAPE$' ),
	DISK_PREFIX	= UPLIT BYTE ( 'DISK$' ),
	SYSTEM_TABLE	= %ASCID 'LNM$SYSTEM',
	JOB_TABLE	= %ASCID 'LNM$JOB';

LOCAL
	ACMODE,				! access mode
	INDEX,				! local index into PHYS_NAME vector
	P,				! string pointer
	C,				! string count
	RVT		: REF BBLOCK,	! pointer to RVT
	NAME_DESC	: BBLOCK [DSC$K_S_BLN],
					! internal logical name descriptor
	LOG_BUFFER	: VECTOR [LNM$C_NAMLENGTH,BYTE],
					! logical name buffer
	MOUNT_LIST	: REF BBLOCK,	! address of mount list tail
	ITEM_LIST	: VECTOR [(6*3)+1,LONG],
					! $CRELNM item list, 6 items each
					! 3 longwords in lenght plus 1
					! for the terminator longword
	PHYSNAM_DESC	: BBLOCK [ DSC$K_S_BLN ],
					! GETDVI descriptor for physical name
	FULLNAM		: VECTOR [ PHYS_LENGTH + 2, BYTE ],
					! Place to store the FULLDEVNAM string
	DVI_ITEM	: VECTOR [ 3+1, LONG ],
					! GETDVI item list
	JIB		: REF BBLOCK,	! pointer to Job Info Block
	TABLE_NAME	: VECTOR [16, BYTE] 
			  INITIAL (%ASCII 'LNM$GROUP_000000'), 
					! Group table name
	GROUP_TABLE	: VECTOR [2, LONG]
			  INITIAL (16, TABLE_NAME), 
					! Group table name descriptor
	ASC_GROUP	: VECTOR [8, BYTE] 
			  INITIAL (%ASCII '00000000'), 
					! Group in ASCII (6 bytes used)
	ASC_GROUP_DESC	: VECTOR [2, LONG]
			  INITIAL (6, ASC_GROUP);
					! ASCII group descriptor

EXTERNAL
	MOUNT_OPTIONS	: BITVECTOR,	! command options
	MOUNT_FLAGS	: VECTOR,	! mount flags
	CALLERS_ACMOD	: LONG,		! Caller's (of $MOUNT) access mode
	DEVICE_CHAR	: BBLOCK,	! device characteristics
	DEVICE_COUNT,			! number of devices specified
	LOG_NAME	: VECTOR,	! logical name descriptor
	DEVICE_INDEX	: LONG,		! index into PHYS_NAME vector
	PHYS_NAME	: VECTOR,	! physical device name descriptor
	MTL_ENTRY	: REF BBLOCK,	! MTL block
	SMTL_ENTRY	: REF BBLOCK,	! MTL block for volume set
	SCH$GL_CURPCB	: REF BBLOCK ADDRESSING_MODE (GENERAL),
					! address of our PCB
	IOC$GQ_MOUNTLST	: VECTOR ADDRESSING_MODE (GENERAL),
					! system mounted volume list head
	EXE$GL_FLAGS	: BITVECTOR ADDRESSING_MODE (GENERAL),
					! exec flags longword
	NSA$GR_ALARMVEC	: BBLOCK ADDRESSING_MODE (GENERAL),
					! alarm enable bit vector
	NSA$GR_JOURNVEC	: BBLOCK ADDRESSING_MODE (GENERAL);
					! journal enable bit vector

EXTERNAL LITERAL
	EXE$V_CONCEALED	: UNSIGNED (6);	! concealed device flag


LINKAGE
	ARGLST_IMGNAM	= JSB (REGISTER = 2;) :
			  NOPRESERVE (0,1)
			  NOTUSED (3,4,5,6,7,8,9,10,11),

	EXE_CRE_GTABLE	= JSB (REGISTER = 11) :
			  NOPRESERVE (0,1,2,3,4,5,8);	

EXTERNAL ROUTINE
	LOCK_IODB,			! lock the I/O data base
	UNLOCK_IODB,			! unlock the I/O data base
	NSA$EVENT_AUDIT	: ADDRESSING_MODE (GENERAL),
					! security auditing routine
	NSA$ARGLST_IMGNAM : ARGLST_IMGNAM ADDRESSING_MODE (GENERAL),
					! insert IMGNAM into ARGLST
	EXE$CRE_GTABLE	: EXE_CRE_GTABLE ADDRESSING_MODE (GENERAL);
					! create group logical name table


! First build the volume logical name table entry.
! Use logical name from command unless:
!	- There is no logical name
!	- It is a disk volume set
!	- More than one device is being mounted, and they are not magtapes.
!
! Get the logical name; either from the command or from the volume label.
!

! Copy the user-specified logical name to local storage.
!

CH$MOVE (.LOG_NAME[0], .LOG_NAME[1], LOG_BUFFER);
NAME_DESC [DSC$W_LENGTH] = .LOG_NAME [0];
NAME_DESC [DSC$B_DTYPE] = 0;
NAME_DESC [DSC$B_CLASS] = 0;
NAME_DESC [DSC$A_POINTER] = LOG_BUFFER;

!
! Calculate the access mode for the logical name creation
!

ACMODE = MIN ((IF .MOUNT_OPTIONS[OPT_SYSTEM]
		THEN PSL$C_EXEC
		ELSE PSL$C_SUPER), .CALLERS_ACMOD);

IF NOT .MOUNT_OPTIONS[OPT_LOG_NAME]
OR .SMTL_ENTRY NEQ 0
OR (.DEVICE_COUNT NEQ 1 AND (NOT .DEVICE_CHAR[DEV$V_SQD]))
THEN
    BEGIN
    IF .DEVICE_CHAR[DEV$V_SQD]
    THEN P = TAPE_PREFIX
    ELSE P = DISK_PREFIX;

    C = LABEL_LENGTH (VCB$S_VOLNAME, VCB[VCB$T_VOLNAME]);
    NAME_DESC[DSC$W_LENGTH]  = .C + 5;
    NAME_DESC[DSC$A_POINTER] = LOG_BUFFER;
    CH$COPY (5, .P, .C, VCB[VCB$T_VOLNAME], 0, .C+5, LOG_BUFFER);
    END;

! Now create logical name.  The physical device string is the equivalence
! string.  If a tape mount, use the physical name of the first volume,
! otherwise use the physical name of the current volume.
!

INDEX = .DEVICE_INDEX;
IF .BBLOCK [UCB[UCB$L_DEVCHAR], DEV$V_SQD]
THEN
    INDEX = 0;

! Store the location of the LNM block in the MTL
!
ITEM_LIST [ 0 ] = ( LNM$_LNMB_ADDR^16 OR 4 );
ITEM_LIST [ 1 ] = MTL_ENTRY[MTL$L_LOGNAME]; ! CAUTION USED BY ITEM_LIST [ 7 ]
ITEM_LIST [ 2 ] = 0;

! Store the location of the MTL in the LNM BLOCK.
! This causes the logical name deletion logic to clear the MTL's logical name
! pointer if the logical name is deleted, just as it does when a mailbox
! logical name is deleted.
!
ITEM_LIST [ 3 ] = ( LNM$_INDEX^16 or 4 );
ITEM_LIST [ 4 ] = UPLIT ( LNMX$C_BACKPTR );
ITEM_LIST [ 5 ] = 0;
ITEM_LIST [ 6 ] = ( LNM$_STRING^16 or 4 );
ITEM_LIST [ 7 ] = ITEM_LIST [ 1 ];
ITEM_LIST [ 8 ] = 0;

! Define equivalence string
!
ITEM_LIST [  9 ] = ( LNM$_INDEX^16 or 4 );
ITEM_LIST [ 10 ] = UPLIT ( 0 );
ITEM_LIST [ 11 ] = 0;

ITEM_LIST [ 12 ] = ( LNM$_ATTRIBUTES^16 or 4 );
ITEM_LIST [ 13 ] = ( IF .EXE$GL_FLAGS[EXE$V_CONCEALED]
		     THEN UPLIT ( LNM$M_TERMINAL OR LNM$M_CONCEALED )
		     ELSE UPLIT ( LNM$M_TERMINAL ) );
ITEM_LIST [ 14 ] = 0;    

! Use GETDVI to obtain the most universal device name for this physical
! device, FULLDEVNAM, and pass that to CRELNM as the equivalence name
! string.
!
PHYSNAM_DESC [ DSC$W_LENGTH ]  = .PHYS_NAME [ .INDEX*2 ] - 1;
PHYSNAM_DESC [ DSC$A_POINTER ] = .PHYS_NAME [ .INDEX*2 + 1 ] + 1;
PHYSNAM_DESC [ DSC$B_DTYPE ] = 0;
PHYSNAM_DESC [ DSC$B_CLASS ] = 0;

DVI_ITEM [ 0 ] = ( DVI$_FULLDEVNAM^16 or ( PHYS_LENGTH + 2 ) );
DVI_ITEM [ 1 ] = FULLNAM;
DVI_ITEM [ 2 ] = ITEM_LIST [ 15 ];
DVI_ITEM [ 3 ] = 0;
ITEM_LIST [ 15 ] = 0;

$GETDVIW (
	devnam = PHYSNAM_DESC,
	itmlst = DVI_ITEM	);

IF .FULLNAM [ 0 ] eql %C'_'
    THEN BEGIN
	ITEM_LIST [ 15 ] = ( LNM$_STRING^16 or ( .ITEM_LIST [ 15 ] - 1 ) );
	ITEM_LIST [ 16 ] = FULLNAM + 1;
	END
    ELSE BEGIN
	ITEM_LIST [ 15 ] = ( LNM$_STRING^16 or .ITEM_LIST [ 15 ] );
	ITEM_LIST [ 16 ] = FULLNAM;
	END;
ITEM_LIST [ 17 ] = 0;

! End item list
!
ITEM_LIST [ 18 ] = 0;

!
! If the volume is to be mounted /group, then we have to create the group logical 
! name in the group of the current process.  To avoid the situation that the group 
! table does not exist, we call the EXE$CRE_GTABLE routine, which creates the group 
! table if it doesn't already exist. 
!
IF .MOUNT_OPTIONS [OPT_GROUP]
THEN
    BEGIN

    $FAO ( %ASCID 'LNM$GROUP_!OW',		! Format LNM$GROUP_xxxxxx
	   GROUP_TABLE,				
	   GROUP_TABLE,
	   .(SCH$GL_CURPCB [PCB$L_UIC]) <16,16>); ! Convert our group number to octal

    $FAO ( %ASCID '!OW',			! Format octal in ASCII
	   ASC_GROUP_DESC,				 
	   ASC_GROUP_DESC,
	   .(SCH$GL_CURPCB [PCB$L_UIC]) <16,16>); ! Convert our group number to octal
	      
    EXE$CRE_GTABLE (ASC_GROUP);			! Create the LNM$GROUP_xxxxxx table

    END;					! exists


$CRELNM
	( ACMODE = ACMODE,
	  TABNAM = (IF  .MOUNT_OPTIONS [ OPT_SYSTEM ] 
		    THEN SYSTEM_TABLE
		    ELSE
			IF  .MOUNT_OPTIONS [ OPT_GROUP ] 
			THEN GROUP_TABLE
			ELSE JOB_TABLE
		   ),
	  LOGNAM = NAME_DESC,
	  ITMLST = ITEM_LIST );

! Link the MTL entry into the list
!
MTL_ENTRY[MTL$L_UCB] = .UCB;
LOCK_IODB ();				! lock the mount list

IF .MOUNT_OPTIONS[OPT_GROUP] OR .MOUNT_OPTIONS[OPT_SYSTEM]
THEN MOUNT_LIST = IOC$GQ_MOUNTLST[1]
ELSE 
    BEGIN
    JIB = .SCH$GL_CURPCB[PCB$L_JIB];
    MOUNT_LIST = JIB[JIB$L_MTLBL];	! get the tail of the mount list
    END;
INSQUE (.MTL_ENTRY, ..MOUNT_LIST);

UNLOCK_IODB ();				! unlock the mount list

! Now build the volume set logical name if we are mounting volume 1 of a
! disk volume set.
!
IF .SMTL_ENTRY NEQ 0
THEN
    BEGIN

    ! Get the logical name; either from the command or from the volume label.
    !

    ! Copy the user-specified logical name to local storage.
    !
    CH$MOVE (.LOG_NAME[0], .LOG_NAME[1], LOG_BUFFER);
    NAME_DESC [DSC$W_LENGTH] = .LOG_NAME [0];
    NAME_DESC [DSC$B_DTYPE] = 0;
    NAME_DESC [DSC$B_CLASS] = 0;
    NAME_DESC [DSC$A_POINTER] = LOG_BUFFER;

    IF NOT .MOUNT_OPTIONS[OPT_LOG_NAME]
    THEN
	BEGIN
	IF .DEVICE_CHAR[DEV$V_SQD]
	THEN P = TAPE_PREFIX
	ELSE P = DISK_PREFIX;

	RVT = .VCB[VCB$L_RVT];
	C = LABEL_LENGTH (RVT$S_STRUCNAME, RVT[RVT$T_STRUCNAME]);
	NAME_DESC[DSC$W_LENGTH] = .C + 5;
	NAME_DESC[DSC$A_POINTER] = LOG_BUFFER;
	CH$COPY (5, .P, .C, RVT[RVT$T_STRUCNAME], 0, .C+5, LOG_BUFFER);
	END;

    ! Now create logical name.  The physical device string is the equivalence
    ! string.  If a tape mount, use the physical name of the first volume,
    ! otherwise use the physical name of the current volume.
    !
    INDEX = .DEVICE_INDEX;
    IF .BBLOCK [UCB[UCB$L_DEVCHAR], DEV$V_SQD]
    THEN
	INDEX = 0;

    ! Store the location of the LNM block in the MTL
    !
    ITEM_LIST [ 0 ] = ( LNM$_LNMB_ADDR^16 OR 4 );
    ITEM_LIST [ 1 ] = SMTL_ENTRY[MTL$L_LOGNAME];
    ITEM_LIST [ 2 ] = 0;

    ! Store the location of the MTL in the LNM BLOCK.
    ! This causes the logical name deletion logic to clear the MTL's logical
    ! name pointer if the logical name is deleted, just as it does when a
    ! mailbox logical name is deleted.
    !
    ITEM_LIST [ 3 ] = ( LNM$_INDEX^16 or 4 );
    ITEM_LIST [ 4 ] = UPLIT ( LNMX$C_BACKPTR );
    ITEM_LIST [ 5 ] = 0;
    ITEM_LIST [ 6 ] = ( LNM$_STRING^16 or 4 );
    ITEM_LIST [ 7 ] = ITEM_LIST [ 1 ];
    ITEM_LIST [ 8 ] = 0;

    ! Define equivalence string
    !
    ITEM_LIST [  9 ] = ( LNM$_INDEX^16 or 4 );
    ITEM_LIST [ 10 ] = UPLIT ( 0 );
    ITEM_LIST [ 11 ] = 0;

    ITEM_LIST [ 12 ] = ( LNM$_ATTRIBUTES^16 or 4 );
    ITEM_LIST [ 13 ] = ( IF .EXE$GL_FLAGS[EXE$V_CONCEALED]
			 THEN UPLIT ( LNM$M_TERMINAL OR LNM$M_CONCEALED )
			 ELSE UPLIT ( LNM$M_TERMINAL ) );
    ITEM_LIST [ 14 ] = 0;    

! Use GETDVI to obtain the most universal device name for this physical
! device, FULLDEVNAM, and pass that to CRELNM as the equivalence name
! string.
!
PHYSNAM_DESC [ DSC$W_LENGTH ]  = .PHYS_NAME [ .INDEX*2 ] - 1;
PHYSNAM_DESC [ DSC$A_POINTER ] = .PHYS_NAME [ .INDEX*2 + 1 ] + 1;
PHYSNAM_DESC [ DSC$B_DTYPE ] = 0;
PHYSNAM_DESC [ DSC$B_CLASS ] = 0;

DVI_ITEM [ 0 ] = ( DVI$_FULLDEVNAM^16 or ( PHYS_LENGTH + 2 ) );
DVI_ITEM [ 1 ] = FULLNAM;
DVI_ITEM [ 2 ] = ITEM_LIST [ 15 ];
DVI_ITEM [ 3 ] = 0;
ITEM_LIST [ 15 ] = 0;

$GETDVIW (
	devnam = PHYSNAM_DESC,
	itmlst = DVI_ITEM	);

IF .FULLNAM [ 0 ] eql %C'_'
    THEN BEGIN
	ITEM_LIST [ 15 ] = ( LNM$_STRING^16 or ( .ITEM_LIST [ 15 ] - 1 ) );
	ITEM_LIST [ 16 ] = FULLNAM + 1;
	END
    ELSE BEGIN
	ITEM_LIST [ 15 ] = ( LNM$_STRING^16 or .ITEM_LIST [ 15 ] );
	ITEM_LIST [ 16 ] = FULLNAM;
	END;
    ITEM_LIST [ 17 ] = 0;

    ! End item list
    !
    ITEM_LIST [ 18 ] = 0;

    $CRELNM
	    ( ACMODE = ACMODE,
	      TABNAM = (IF  .MOUNT_OPTIONS [ OPT_SYSTEM ] 
			THEN SYSTEM_TABLE
			ELSE 
			    IF  .MOUNT_OPTIONS [ OPT_GROUP ] 
			    THEN GROUP_TABLE
			    ELSE JOB_TABLE
		       ),
	      LOGNAM = NAME_DESC,
	      ITMLST = ITEM_LIST );

    SMTL_ENTRY[MTL$L_UCB] = .UCB;
    SMTL_ENTRY[MTL$V_VOLSET] = 1;	! identify as a volume set entry

    LOCK_IODB ();			! lock the mount list

    IF .MOUNT_OPTIONS[OPT_GROUP] OR .MOUNT_OPTIONS[OPT_SYSTEM]
    THEN MOUNT_LIST = IOC$GQ_MOUNTLST[1]
    ELSE 
        BEGIN
        JIB = .SCH$GL_CURPCB[PCB$L_JIB];
        MOUNT_LIST = JIB[JIB$L_MTLBL];	! get the tail of the mount list
        END;
    INSQUE (.SMTL_ENTRY, ..MOUNT_LIST);

    UNLOCK_IODB ();			! unlock the mount list

    END;


IF (.SCH$GL_CURPCB [PCB$V_SECAUDIT]
OR  .NSA$GR_ALARMVEC [NSA$V_EVT_MOUNT]
OR  .NSA$GR_JOURNVEC [NSA$V_EVT_MOUNT])
THEN
    BEGIN

    LOCAL
	ARGLIST	: BBLOCK[NSA$K_ARG2_LENGTH],	! security auditing argument list
	ORB	: REF BBLOCK,			! address of the ORB
	TEMP_PROT;				! temporary protection word

    CH$FILL (0, NSA$K_ARG2_LENGTH, ARGLIST);	! zero argument list
    ORB = .UCB [UCB$L_ORB];			! get ORB address

    !
    ! Set up the security auditing argument list header
    !

    ARGLIST [NSA$L_ARG_COUNT] = ( NSA$K_ARG2_LENGTH/4 ) - 4;
						! initialize length of argument list
						! less vol-set pkt and arg count
    ARGLIST [NSA$L_ARG_ID] = NSA$K_RECID_VOL_MOU;
						! initialize record id as mount
    IF .SCH$GL_CURPCB [PCB$V_SECAUDIT]		! set up proper flags
    THEN
	ARGLIST [NSA$V_ARG_FLAG_MANDY] = 1;	! mandatory auditing
    IF .NSA$GR_ALARMVEC [NSA$V_EVT_MOUNT]
    THEN
	ARGLIST [NSA$V_ARG_FLAG_ALARM] = 1;	! generate alarm for this record
    IF .NSA$GR_JOURNVEC [NSA$V_EVT_MOUNT]
    THEN
	ARGLIST [NSA$V_ARG_FLAG_JOURN] = 1;	! journal this record

    ARGLIST [NSA$B_ARG_PKTNUM] = 7;		! initialize number of items 
						! less vol-set pkt
    
    !
    ! Set up the security auditing argument list for mount
    !

    ARGLIST [NSA$L_ARG2_UIC_TM] = NSA$K_ARG_MECH_LONG^16 + NSA$K_PKTTYP_UIC;
    ARGLIST [NSA$L_ARG2_UIC] = .ORB [ORB$L_OWNER];	! set device owner UIC

    ARGLIST [NSA$L_ARG2_VOLPRO_TM] = NSA$K_ARG_MECH_WORD^16 + NSA$K_PKTTYP_VOLPRO;
    !
    ! Get the volume protection 
    !
    TEMP_PROT = 0;					! clear temp location
    IF .ORB [ORB$V_PROT_16]			
    THEN	
	TEMP_PROT = .ORB [ORB$W_PROT]			! standard SOGW protection
    ELSE
	BEGIN						  ! vector protection
	TEMP_PROT <0,4>  = .(ORB [ORB$L_SYS_PROT])<0,4>;  ! system 
	TEMP_PROT <4,4>  = .(ORB [ORB$L_OWN_PROT])<0,4>;  ! owner	
	TEMP_PROT <8,4>  = .(ORB [ORB$L_GRP_PROT])<0,4>;  ! group 	
	TEMP_PROT <12,4> = .(ORB [ORB$L_WOR_PROT])<0,4>;  ! world	
	END;
    ARGLIST [NSA$L_ARG2_VOLPRO] = .TEMP_PROT;		! set volume protection mask

    ARGLIST [NSA$L_ARG2_MOUFLG_TM] = NSA$K_ARG_MECH_LONG^16 + NSA$K_PKTTYP_MOUFLG;
    ARGLIST [NSA$L_ARG2_MOUFLG ] = .MOUNT_FLAGS;	! set mount flags

    NSA$ARGLST_IMGNAM (ARGLIST [NSA$L_ARG2_IMGNAM_TM]);	! set image name

    ARGLIST [NSA$L_ARG2_DEVNAM_TM] = NSA$K_ARG_MECH_DESCR^16 + NSA$K_PKTTYP_DEVNAM;
    IF .FULLNAM [0] EQL %C'_'
    THEN
	ITEM_LIST [15] = .ITEM_LIST [15] + 1;		! include the '_' char
    ARGLIST [NSA$L_ARG2_DEVNAM_SIZ] = .ITEM_LIST [15];	! set size of full device name 
    ARGLIST [NSA$L_ARG2_DEVNAM_PTR] = FULLNAM;		! set full device name buffer address
	
    ARGLIST [NSA$L_ARG2_LOGNAM_TM] = NSA$K_ARG_MECH_DESCR^16 + NSA$K_PKTTYP_LOGNAM;
    ARGLIST [NSA$L_ARG2_LOGNAM_SIZ] = .NAME_DESC [DSC$W_LENGTH]; ! set size of logical name
    ARGLIST [NSA$L_ARG2_LOGNAM_PTR] = LOG_BUFFER;	! set logical name buffer address

    ARGLIST [NSA$L_ARG2_VOLNAM_TM] = NSA$K_ARG_MECH_DESCR^16 + NSA$K_PKTTYP_VOLNAM;
    ARGLIST [NSA$L_ARG2_VOLNAM_SIZ] = 
	LABEL_LENGTH (VCB$S_VOLNAME, VCB [VCB$T_VOLNAME]);  ! set size of volume name
    ARGLIST [NSA$L_ARG2_VOLNAM_PTR] = VCB [VCB$T_VOLNAME];  ! set volume name buffer address

    !
    ! If the volume is a member of a volume set, then
    !    a. increment argument count
    !    b. increment number of packets
    !    c. set up volume set descriptor
    !
  
    IF ( NOT .BBLOCK [UCB [UCB$L_DEVCHAR], DEV$V_FOR] )
    AND    ( .VCB [VCB$W_RVN] NEQ 0 )
    THEN
        BEGIN
	ARGLIST [NSA$L_ARG_COUNT] = .ARGLIST [NSA$L_ARG_COUNT] + 3; ! count vol-set pkt 
	ARGLIST [NSA$B_ARG_PKTNUM] = .ARGLIST [NSA$B_ARG_PKTNUM] + 1;
	ARGLIST [NSA$L_ARG2_VOLSNAM_TM] = NSA$K_ARG_MECH_DESCR^16 + NSA$K_PKTTYP_VOLSNAM;
	RVT = .VCB [VCB$L_RVT];						
	ARGLIST [NSA$L_ARG2_VOLSNAM_SIZ] = 
	    LABEL_LENGTH (RVT$S_STRUCNAME, RVT [RVT$T_STRUCNAME]); ! set size of vol-set name
	ARGLIST [NSA$L_ARG2_VOLSNAM_PTR] = RVT [RVT$T_STRUCNAME];  ! set vol-set name buffer address
	END;	    
   
    CALLG (ARGLIST, NSA$EVENT_AUDIT);	! call event audit routine     

   END;					! end of block defining ARGLIST

END;					! end of routine ENTER_LOGNAME

ROUTINE LABEL_LENGTH (STR_LENGTH, STR_TEXT) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine will return the length of a given string.
!	Trailing blanks at the end of the string are not counted
!	as part of the string.
!
!	NOTE THAT NO VOLUME MAY HAVE A VOLUME LABEL WITH TRAILING BLANKS.
!
!
! CALLING SEQUENCE:
!	LABEL_LENGTH (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: Input string length
!	ARG2: Input string address
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	STR_TEXT	: REF VECTOR [,BYTE];	! Input string

LOCAL
	PTR		: LONG;			! Pointer to current char.

! Starting at the end of the string, decrement the string length
! until a nonblank character is found, or the beginning of the string
! is encountered.
!

PTR = .STR_LENGTH;
WHILE (.PTR GTR 0) AND (.STR_TEXT [.PTR-1] EQL %ASCII' ') DO
    PTR = .PTR - 1;

RETURN (.PTR)
END;

END
ELUDOM
