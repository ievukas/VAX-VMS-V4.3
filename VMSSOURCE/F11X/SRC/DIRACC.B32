MODULE DIRACC (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine "accesses" a directory and readies it for processing.
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  2-Jan-1977  22:53
!
! MODIFIED BY:
!
!	V03-015	CDS0009		Christian D. Saether	29-Aug-1984
!		Deal with potential multiple headers caused by
!		ACL's.
!
!	V03-014	CDS0008		Christian D. Saether	31-July-1984
!		Changes to accomodate block-cache based directory
!		index caching.
!
!	V03-013	LMP0275		L. Mark Pilant,		12-Jul-1984  14:56
!		Initialize the ACL info in the ORB to be a null descriptor
!		list rather than an empty queue.  This avoids the overhead
!		of locking and unlocking the ACL mutex, only to find out
!		that the ACL was empty.
!
!	V03-012	CDS0007		Christian D. Saether	22-Apr-1984
!		Modify access arbitration.
!
!	V03-011	ACG0412		Andrew C. Goldstein,	22-Mar-1984  18:23
!		Implement agent access mode support; add access mode
!		check protection call
!
!	V03-010	CDS0006		Christian D. Saether	29-Dec-1983
!		Use L_NORM linkage and BIND_COMMON macro.
!
!	V03-009	CDS0005		Christian D. Saether	 3-Oct-1983
!		Save/restore CURR_LCKINDX instead of PRIM_LCKINDX.
!
!	V03-008	CDS0004		Christian D. Saether	14-Sep-1983
!		Modify interface to SERIAL_FILE.
!
!	V03-007	ACG0354		Andrew C. Goldstein,	13-Sep-1983  16:16
!		Add alternate access validation mask
!
!	V03-006	CDS0003		Christian D. Saether	 4-May-1983
!		Add directory file processing synchronization
!		using SERIAL_FILE.
!		Move directory protection check and access arbitration
!		checks to path that sets up DIR_FCB.
!
!	V03-005	CDS0002		Christian D. Saether	 9-Apr-1983
!		Reflect changes to ACCESS_LOCK interface.
!
!	V03-004	CDS0001		Christian D. Saether	20-Jan-1982
!		Use ACCESS_LOCK routine for access arbitration.
!
!	V03-003	ACG0308		Andrew C. Goldstein,	14-Jan-1983  15:07
!		Fix consistency problems with FCB linkages
!
!	V03-002	LMP0059		L. Mark Pilant,		22-Dec-1982  8:22
!		Eliminate the call to ACL_BUILDACL as the ACL is now built by
!		the FCB creation/entending routines.
!
!	V03-001	LMP0036		L. Mark Pilant,		 6-Aug-1982  10:30
!		Add support for ACL's.
!
!	V02-005	ACG0229		Andrew C. Goldstein,	23-Dec-1981  20:55
!		Count directory LRU hits and misses
!
!	V02-004	ACG33975	Andrew C. Goldstein,	13-Mar-1981  15:46
!		Fix losing directory FCB's when LRU is disabled
!
!	V02-003	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


GLOBAL ROUTINE DIR_ACCESS (FIB, WRITE) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine "accesses" a directory and readies it for processing.
!
! CALLING SEQUENCE:
!	DIR_ACCESS (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of FIB
!	ARG2: 0 if read only
!	      1 if read/write
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	DIR_FCB: address of FCB for directory
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCB may be created
!	directory LRU may be altered
!	directory file header may be read
!
!--

BEGIN

MAP
	FIB		: REF BBLOCK;	! FIB argument

LOCAL
	CURR_LKMODE,			! current access lock mode
	SAV_LCKINDX,
	STATUS,				! protection check status value
	FCB		: REF BBLOCK,	! FCB address
	HEADER		: REF BBLOCK;	! directory header address

BIND_COMMON;

EXTERNAL ROUTINE
	ARBITRATE_ACCESS : L_JSB_2ARGS,	! access arbitration
	BUILD_EXT_FCBS	: L_NORM NOVALUE, ! build extension headers
	CONV_ACCLOCK	: L_NORM,	! convert access lock
	CREATE_FCB	: L_NORM,	! create fcb
	MAKE_DIRINDX	: L_NORM,	! validate/create directory index
	REBLD_PRIM_FCB	: L_NORM NOVALUE, ! refresh fcb from header
	SERIAL_FILE	: L_NORM,	! interlock directory processing.
	SWITCH_VOLUME	: L_NORM,	! switch to correct volume
	SEARCH_FCB	: L_NORM,	! search FCB list
	READ_HEADER	: L_NORM,	! read file header
	CHECK_PROTECT	: L_NORM;	! check file protection


! Switch context to the volume of the specified RVN.
!

SWITCH_VOLUME (.FIB[FIB$W_DID_RVN]);

! First find the FCB of the directory, if any exists.
!

IF (FCB = .DIR_FCB) EQL 0
THEN
    BEGIN
    LOCAL
	FCBVALID : INITIAL (0);

! Synchronize further file processing on this directory.
!

    SAV_LCKINDX = .CURR_LCKINDX;

    DIR_LCKINDX = SERIAL_FILE (FIB [FIB$W_DID]);

    FCB = SEARCH_FCB (FIB[FIB$W_DID]);

    IF .FCB NEQ 0
    THEN
	FCBVALID = MAKE_DIRINDX (.FCB);

    IF NOT .FCBVALID
    THEN
	BEGIN

! This flag tells READ_HEADER to not update the FILE_HEADER cell.
!

	STSFLGS [STS_LEAVE_FILEHDR] = 1;

	HEADER = READ_HEADER (FIB [FIB$W_DID], .FCB);

	IF .FCB EQL 0
	THEN
	    BEGIN
	    FCB = CREATE_FCB (.HEADER);
	    MAKE_DIRINDX (.FCB);
	    END
	ELSE
	    REBLD_PRIM_FCB (.FCB, .HEADER);

	IF .HEADER [FH2$W_EX_FIDNUM] NEQ 0
	    OR .HEADER [FH2$B_EX_FIDNMX] NEQ 0
	THEN
	    BUILD_EXT_FCBS (.HEADER, .FCB);

! Check the file attributes to make sure that
! this is a real directory file.
!

	IF NOT .HEADER[FH2$V_DIRECTORY]
	    OR NOT .HEADER[FH2$V_CONTIG]
	    OR .BBLOCK [HEADER[FH2$W_RECATTR], FAT$B_RTYPE] NEQ FAT$C_VARIABLE
	    OR .BBLOCK [HEADER[FH2$W_RECATTR], FAT$B_RATTRIB] NEQ FAT$M_NOSPAN
	THEN ERR_EXIT (SS$_BADIRECTORY);

	FCB [FCB$W_DIRSEQ] = .FCB [FCB$W_DIRSEQ] + 1;

	END;

    CURR_LCKINDX = .SAV_LCKINDX;

    IF .FCB [FCB$W_FID_SEQ] NEQ .FIB [FIB$W_DID_SEQ]
    THEN
	ERR_EXIT (SS$_FILESEQCHK);

    DIR_FCB = .FCB;				! store global FCB address

! Check directory file protection. For alternate access validation,
! delete access implies write to the directory.
!

    STATUS = CHECK_PROTECT (.WRITE, .HEADER, .FCB, 0,
		    (IF .BBLOCK [FIB[FIB$L_ALT_ACCESS], ARM$V_DELETE]
		     THEN ARM$M_WRITE ELSE 0),
		    .FIB[FIB$V_ALT_REQ]);

    IF .STATUS EQL SS$_NOTALLPRIV
    THEN FIB[FIB$V_ALT_GRANTED] = 0;

! Arbitrate the access interlocks.
!

    CURR_LKMODE = .FCB [FCB$B_ACCLKMODE];

    IF NOT ARBITRATE_ACCESS (IF .WRITE THEN FIB$M_WRITE ELSE 0, .FCB)
    THEN ERR_EXIT (SS$_ACCONFLICT);

    CONV_ACCLOCK (.CURR_LKMODE, .FCB);

    END;

RETURN 1;

END;					! end of routine DIR_ACCESS

END
ELUDOM
