	.TITLE	MOMMOPSTA	MOP MESSAGE STATE TABLES
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
 
;++ 
; FACILITY:	DECnet-VAX Network Management Maintenance Operations Module
; 
; ABSTRACT: 
; 
;	State tables for MOP messages exchanged during maintenance
;	operations.
; 
; ENVIRONMENT:	VAX/VMS Operating System 
; 
; AUTHOR:  Kathy Perko
;
; CREATION DATE: 31-Jan-1983
; 
; MODIFIED BY: 
;	V03-001	MKP0001		Kathy Perko		29-Jan-1984
;		Allow anything for a service device.  Fix parsing
;		of MOP messages to check for a multicasted loopback
;		assistance request.
; 
;-- 

;
; INCLUDE FILES:
;
 
$MOPDEF				; MOP message definitions
$NMADEF				; Network Management Layer definitions
$MOMDEF				; MOM definitions
 
;
; OWN STORAGE:
;

	.SBTTL	MOP message state tables
;
; Message parsing states for a response to a downline load.
;
	IMSG$	MOM$NPA_MOPLOAD

	FIELD$
	$LOOK	,,MOM$SAVE_MOP_MSG		; Save the received MOP message.

	FIELD$
	$BYTE	MOP$_FCT_RPR,MOM_RPR_DEV
	$ERROR	0,,MOM$PRSMOPERR,,,MOM$_BADMOPFCT

	FIELD$
;
; Message parsing states for restarting an upline dump.
;
	IMSG$	MOM$NPA_MOPDUMP

	FIELD$
	$LOOK	,,MOM$SAVE_MOP_MSG		; Save the received MOP message.

	FIELD$
	$BYTE	MOP$_FCT_RDS,MOM_RDS_DEV	; Request Dump Service (old MOP
						;	Mode Running)
	$ERROR	0,,MOM$PRSMOPERR,,,MOM$_BADMOPFCT

	FIELD$
;
; Message parsing states for autoservice initialization.
;
	IMSG$	MOM$NPA_MOPINIT
;
; Parse function code
;
	FIELD$	MOM_MOP_FCT
	$LOOK	,,MOM$SAVE_MOP_MSG		; Save the received MOP message.

	FIELD$
	$BYTE	MOP$_FCT_RPR,MOM_RPR_DEV, -	; Request program load.
		,NMA$C_FNC_LOA,MOM$GB_FUNCTION
	$BYTE	MOP$_FCT_RDS,MOM_RDS_DEV, -	; Request Dump Service (old MOP
		,NMA$C_FNC_DUM,MOM$GB_FUNCTION	; Mode Running).
	$LOOK	MOP$_FCT_ALD,NPA$_EXIT,, -	; Active Loop Data.
		NMA$C_FNC_TES,MOM$GB_FUNCTION
	$NULL	,NPA$_EXIT,MOM$MOP_CHK_LOOP_ASSIST,- ; Loopback assist request?
		NMA$C_FNC_TES,MOM$GB_FUNCTION
	$ERROR	0,,MOM$PRSMOPERR,,,MOM$_BADMOPFCT
;
; Parse device type
;
	FIELD$	MOM_RPR_DEV
	$SBEXP	MOM_MOP_DEV,MOM_MOP_PGM
	$ERROR	0

	FIELD$	MOM_RDS_DEV
	$SBEXP	MOM_MOP_DEV,MOM_MOP_SIZ
	$ERROR	0

	FIELD$	MOM_MOP_DEV
	$MATCH	1,MOM_MOP_VER,MOM$SAVE_PARAM,,,SVD$GK_PCNO_SDV
	$ERROR	0
;
; Parse version number
;
	FIELD$	MOM_MOP_VER
	$BYTE	1,NPA$_EXIT
	$ERROR	0,,MOM$PRSMOPERR,,,MOM$_BADMOPVER
;
; Parse program type
;
	FIELD$	MOM_MOP_PGM
	$EOM	,NPA$_EXIT
	$LOOK	NMA$C_SOFT_SECL,MOM_MOP_PGM1	; Secondary loader
	$LOOK	NMA$C_SOFT_TERL,MOM_MOP_PGM1	; Tertiary loader
	$LOOK	NMA$C_SOFT_OSYS,MOM_MOP_PGM1	; Operating system
	$ERROR	0,,MOM$PRSMOPERR,,,MOM$_BADMOPPGM

	FIELD$	MOM_MOP_PGM1
	$MATCH	1,MOM_MOP_SID,MOM$SAVE_PARAM,,,SVD$GK_PCNO_STY
	$ERROR	0
;
; Parse software id
;
	FIELD$	MOM_MOP_SID
	$EOM	,MOM_MOP_PROC
	$BYTE	MOP$C_SID_NON,NPA$_EXIT
	$BYTE	MOP$C_SID_OSY,NPA$_EXIT,MOM$SAVE_PARAM,,,SVD$GK_PCNO_$FTY
	$BYTE	MOP$C_SID_MAI,NPA$_EXIT,MOM$SAVE_PARAM,,,SVD$GK_PCNO_$FTY
	$IMAGE	16,MOM_MOP_PROC,MOM$SAVE_LOAD_FILE_ID
	$ERROR	0,,MOM$PRSMOPERR,,,MOM$_BADMOPSID
;
; Parse processor type
;
	FIELD$	MOM_MOP_PROC
	$EOM	,NPA$_EXIT
	$BYTE	0,NPA$_EXIT
	$BYTE	1,NPA$_EXIT,,MOM$M_CONSOLE_CARRIER_LOAD,MOM$GL_SERVICE_FLAGS
	$NULL	,NPA$_EXIT
;
; Parse memory size
;
	FIELD$	MOM_MOP_SIZ
	$MATCH	4,MOM_MOP_FEA,MOM$SAVE_PARAM,,,SVD$GK_PCNO_DCT
	$ERROR	0
;
; Parse features byte - check that DUMP is accepted
;
	FIELD$	MOM_MOP_FEA
	$MASK	2,NPA$_EXIT
	$ERROR	0

	FIELD$

	.END

