MODULE AED$SUBR (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	Miscellaneous utilities
!
! ABSTRACT:
!
!	This module contains miscellaneous routines utilized by the
!	ACL editor.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, user mode utilities.
!
!--
!
!
! AUTHOR:	L. Mark Pilant		CREATION DATE:	27-Dec-1982  11:45
!
! MODIFIED BY:
!
!	V03-009	LMP0213		L. Mark Pilant,		24-Mar-1984  12:23
!		Add support for locking and unlocking the object's ACL.
!
!	V03-008	LMP0193		L. Mark Pilant,		15-Feb-1984  9:37
!		Remove the ACL twiddling in AED_UPDATEACL.  The actual ACL
!		modification takes place when the session is ended.
!
!	V03-007	LMP0181		L. Mark Pilant,		15-Dec-1983  9:52
!		Change code to use $CHANGE_ACL instead of the ACP to do
!		ACL twiddling.
!
!	V03-006	LMP0172		L. Mark Pilant,		28-Nov-1983  12:11
!		Numerous bug fixes, support for VT2xx terminals, and a
!		session keystroke logger.
!
!	V03-005	LMP0103		L. Mark Pilant,		28-Apr-1983  9:45
!		Add support for HIDDEN and PROTECTED ACEs.
!
!	V03-004	LMP0100		L. Mark Pilant,		14-Apr-1983  12:11
!		Add the $FORMAT_ACL and $PARSE_ACL system services.
!
!	V03-003	LMP0080		L. Mark Pilant,		16-Feb-1983  15:48
!		Include some additional screen positioning to get around
!		some problems with the new screen package.
!
!	V03-002	LMP0076		L. Mark Pilant,		2-Feb-1983  14:43
!		Correct a bug that caused an access violation if the last
!		line of the ACL text being compressed was empty.
!
!	V03-001	LMP0074		L. Mark Pilant,		20-Jan-1983  12:13
!		Correctly handle the RMS journal ACE's by setting or
!		resetting the flags in the header when an ACE is added
!		or deleted.
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';
LIBRARY 'SYS$LIBRARY:TPAMAC.L32';
REQUIRE 'SRC$:ACLEDTDEF';

FORWARD ROUTINE
	AED_COMPRESS	: NOVALUE,		! Compress the screen
	AED_SEGSPLIT,				! Split segment into two pieces
	AED_SEGCOMBINE,				! Combine two segments
	AED_COPSEGMENT,				! Copy segment to working storage
	AED_REPSEGMENT,				! Replace segment from working storage
	AED_POSITION	: NOVALUE,		! Position to selected line
	AED_UPDATEACL,				! Update the file's ACL
	AED_SET_CURSOR;				! Set cursor position & remember

EXTERNAL ROUTINE
	AED_PUTOUTPUT;				! General purpose output routine

GLOBAL ROUTINE AED_COMPRESS : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine updates the screen display with the most recent copy of
!	the text stored in memory.  In updating, and blank lines (DUMMY) are
!	eliminated from the display and the line table.
!
! CALLING SEQUENCE:
!	AED_COMPRESS ()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	AED_L_BEGINLINE: address of the first line of the display
!	AED_Q_LINETABLE: address of the line table list head
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

LOCAL
	LINES_REMOVED,				! Flag indicating output state
	OUTPUT_DESC	: $BBLOCK [DSC$C_S_BLN],	! Output line descr
	CURRENT_LINE	: REF $BBLOCK,		! Address of current segment
	NEXT_TEXT_LINE	: REF $BBLOCK,		! Address of next line segment
	PREV_TEXT_LINE	: REF $BBLOCK,		! Address of previous line segment
	REMOVED_LINE	: REF $BBLOCK,		! Address of line removed
	TEMP_LINE;				! Current line in the display

! Set the starting point.

TEMP_LINE = 1;
LINES_REMOVED = 0;
CURRENT_LINE = .AED_L_BEGINLINE;

DO
    BEGIN
    IF .CURRENT_LINE[LINE_V_DUMMY]
    THEN
	BEGIN
	NEXT_TEXT_LINE = .CURRENT_LINE[LINE_L_FLINK];
	PREV_TEXT_LINE = .CURRENT_LINE[LINE_L_BLINK];
	IF .AED_L_BEGINLINE EQL .CURRENT_LINE
	THEN AED_L_BEGINLINE = .NEXT_TEXT_LINE;
	IF .AED_L_FIRSTLINE EQL .CURRENT_LINE
	THEN AED_L_FIRSTLINE = .NEXT_TEXT_LINE;
	IF .AED_L_LASTLINE EQL .CURRENT_LINE
	THEN AED_L_LASTLINE = .CURRENT_LINE[LINE_L_BLINK];
	REMQUE (CURRENT_LINE[LINE_L_FLINK], REMOVED_LINE);
	IF .REMOVED_LINE[LINE_V_BEGINACE]
	THEN IF .NEXT_TEXT_LINE NEQA AED_Q_LINETABLE[LINE_L_FLINK]
	     THEN NEXT_TEXT_LINE[LINE_V_BEGINACE] = 1;
	IF .REMOVED_LINE[LINE_V_ENDACE]
	THEN IF .PREV_TEXT_LINE NEQA AED_Q_LINETABLE[LINE_L_FLINK]
	     THEN PREV_TEXT_LINE[LINE_V_ENDACE] = 1;
	DEALLOCATE (.REMOVED_LINE[LINE_W_SIZE] + $BYTEOFFSET (LINE_T_TEXT),
		    REMOVED_LINE);
	IF .NEXT_TEXT_LINE EQLA AED_Q_LINETABLE[LINE_L_FLINK]
	THEN
	    BEGIN
	    SCR$ERASE_PAGE (.TEMP_LINE, 1);
	    RETURN;
	    END;
	UNTIL .AED_L_LASTLINE[LINE_V_ENDACE]
	DO AED_L_LASTLINE = .AED_L_LASTLINE[LINE_L_FLINK];
	CURRENT_LINE = .NEXT_TEXT_LINE;
	IF NOT .LINES_REMOVED THEN SCR$ERASE_PAGE (.TEMP_LINE, 1);
	LINES_REMOVED = 1;
	IF .TEMP_LINE LEQ .AED_B_LINE THEN AED_B_LINE = .AED_B_LINE - 1;
	END
    ELSE
	BEGIN
	OUTPUT_DESC[DSC$W_LENGTH] = .CURRENT_LINE[LINE_W_SIZE];
	OUTPUT_DESC[DSC$A_POINTER] = CURRENT_LINE[LINE_T_TEXT];
	IF .LINES_REMOVED
	THEN
	    BEGIN
	    AED_SET_CURSOR (.TEMP_LINE, 1);
	    SCR$ERASE_LINE (.TEMP_LINE, 1);
	    AED_PUTOUTPUT (OUTPUT_DESC);
	    END;
	TEMP_LINE = .TEMP_LINE + 1;
	CURRENT_LINE = .CURRENT_LINE[LINE_L_FLINK];
	END;
    END
UNTIL (.TEMP_LINE GTR 20)
   OR (.CURRENT_LINE EQLA AED_Q_LINETABLE[LINE_L_FLINK]);

RETURN;

END;						! End of routine AED_COMPRESS

GLOBAL ROUTINE AED_SEGSPLIT (POSITION, EXACT, FIRST, NO_REPAINT) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes the current line segment and splits it up into
!	two pieces.  The second piece becomming the new current line.  The
!	split will occur at the current position or (usually) after the
!	most recent delimiter.
!
! CALLING SEQUENCE:
!	AED_SEGSPLIT (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: address of the cell containing the current buffer position
!	ARG2: 1 = do the split at the current position
!	      0 = find the previous delimiter, and split after it
!	ARG3: 1 = position to the first line segment
!	      0 = position to the second (split) segment
!	ARG4: 1 = don't repaint the display after splitting line
!	      0 = repaint the display after splitting the line
!
! IMPLICIT INPUTS:
!	AED_T_CURLINE: the current line segment
!
! OUTPUT PARAMETERS:
!	ARG1: address of the cell containing the current buffer position
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

BIND
	SEGMENT_SIZE	= AED_T_CURLINE[LINE_W_SIZE] : WORD,
	BUFFER		= AED_T_CURLINE[LINE_T_TEXT] : VECTOR [,BYTE];

LOCAL
	OUTPUT_DESC	: $BBLOCK [DSC$C_S_BLN],	! Output line descr
	NEW_TEXT_LINE	: REF $BBLOCK,		! Addr of new line segment
	SPLIT_SEGMENT	: REF $BBLOCK,		! Addr of split portion
	SPLIT_SIZE,				! Size of split off segment
	SKIP_CHAR;				! Skip characters in field count

! Initialize necessary items.

CH$FILL (0, DSC$C_S_BLN, OUTPUT_DESC);

! If this is not an exact split, find the previous delimiter.

IF NOT .EXACT
THEN
    BEGIN
    DECR J FROM .SEGMENT_SIZE - 1 TO 0
    DO
	BEGIN
	IF (.BUFFER[.J] LSS 'A' OR .BUFFER[.J] GTR 'Z')
	AND (.BUFFER[.J] LSS '0' OR .BUFFER[.J] GTR '9')
	AND .J LSS ..POSITION
	THEN
	    BEGIN
	    .POSITION = .J + 1;
	    EXITLOOP;
	    END;
	END;
    END;

! Split the line up into two segments.  This may cause the second segment to
! be null if the index was at the end of the segment.  This is OK, as it will
! be cleaned up when the segment is replaced.

SPLIT_SIZE = .SEGMENT_SIZE - ..POSITION;
AED_L_STATUS = ALLOCATE (.SPLIT_SIZE + $BYTEOFFSET (LINE_T_TEXT),
			 SPLIT_SEGMENT);
IF NOT .AED_L_STATUS
THEN
    BEGIN
    SIGNAL (.AED_L_STATUS);
    RETURN 0;
    END;

! Copy the text from the current line as AED_REPSEGMENT clears out the
! current line buffer.  Then, replace the modified first part of the original
! line.

CH$MOVE (.SPLIT_SIZE, BUFFER[..POSITION], SPLIT_SEGMENT[LINE_T_TEXT]);
SEGMENT_SIZE = ..POSITION;
SCR$ERASE_LINE (.AED_B_LINE, .SEGMENT_SIZE + 1);
NEW_TEXT_LINE = AED_REPSEGMENT ();

! Fill in the necessary information about the split portion of the original
! line segment.

SPLIT_SEGMENT[LINE_W_SIZE] = .SPLIT_SIZE;
IF .NEW_TEXT_LINE[LINE_V_ENDACE]
THEN SPLIT_SEGMENT[LINE_W_FLAGS] = LINE_M_ENDACE
ELSE SPLIT_SEGMENT[LINE_W_FLAGS] = 0;
NEW_TEXT_LINE[LINE_V_ENDACE] = 0;
SPLIT_SEGMENT[LINE_L_BINACE] = .NEW_TEXT_LINE[LINE_L_BINACE];
INSQUE (SPLIT_SEGMENT[LINE_L_FLINK], NEW_TEXT_LINE[LINE_L_FLINK]);
AED_W_TOTALSIZE = .AED_W_TOTALSIZE + .SPLIT_SIZE;

! Determine the field index for the split portion of the line.  This is done
! by counting the number of fields in the first part of the line.

SKIP_CHAR = 0;
AED_B_FIELD = .NEW_TEXT_LINE[LINE_B_FIELDST];
INCR J FROM 0 TO .NEW_TEXT_LINE[LINE_W_SIZE] - 1
DO
    BEGIN
    IF .VECTOR [NEW_TEXT_LINE[LINE_T_TEXT], .J; ,BYTE] EQL '['
    THEN SKIP_CHAR = 1;
    IF .VECTOR [NEW_TEXT_LINE[LINE_T_TEXT], .J; ,BYTE] EQL ']'
    THEN SKIP_CHAR = 0;
    IF NOT .SKIP_CHAR
    THEN
	BEGIN
	IF .VECTOR [NEW_TEXT_LINE[LINE_T_TEXT], .J; ,BYTE] EQL ','
	THEN
	    BEGIN
	    IF .AED_B_FIELD GEQ 1 AND .AED_B_ACETYPE NEQ ACE$C_DIRDEF
	    THEN AED_B_FIELD = 6
	    ELSE AED_B_FIELD = .AED_B_FIELD + 1;
	    END;
	IF .AED_B_FIELD GEQ 1
	THEN
	    BEGIN
	    IF .VECTOR [NEW_TEXT_LINE[LINE_T_TEXT], .J; ,BYTE] EQL '='
	    OR .VECTOR [NEW_TEXT_LINE[LINE_T_TEXT], .J; ,BYTE] EQL '+'
	    THEN AED_B_FIELD = .AED_B_FIELD + 1;
	    END;
	END;
    END;
SPLIT_SEGMENT[LINE_B_FIELDST] = .AED_B_FIELD;

! Position to the correct segment.

IF .FIRST
THEN
    BEGIN
    AED_POSITION (.NEW_TEXT_LINE);
    AED_COPSEGMENT (.NEW_TEXT_LINE);
    INSQUE (AED_T_CURLINE[LINE_L_FLINK], .NEW_TEXT_LINE[LINE_L_BLINK]);
    IF .AED_L_FIRSTLINE EQL .NEW_TEXT_LINE
    THEN AED_L_FIRSTLINE = AED_T_CURLINE;
    IF .AED_L_LASTLINE EQL .NEW_TEXT_LINE
    THEN AED_L_LASTLINE = .SPLIT_SEGMENT;
    IF .AED_L_BEGINLINE EQL .NEW_TEXT_LINE
    THEN AED_L_BEGINLINE = AED_T_CURLINE;
    END
ELSE
    BEGIN
    AED_POSITION (.SPLIT_SEGMENT);
    AED_COPSEGMENT (.SPLIT_SEGMENT);
    INSQUE (AED_T_CURLINE[LINE_L_FLINK], .SPLIT_SEGMENT[LINE_L_BLINK]);
    IF .AED_L_LASTLINE EQL .NEW_TEXT_LINE
    THEN AED_L_LASTLINE = AED_T_CURLINE;
    END;

! Now repaint the display.  This is done by either scrolling down and repainting
! the first part of the display or repainting from the current position to the
! end of the display (or the end of the ACL).  This is necessary to echo the
! text from the split portion of the line.

IF NOT .NO_REPAINT
THEN
    BEGIN
    IF .AED_B_LINE LEQ 10
    THEN
	BEGIN
	AED_SET_CURSOR (1,1);		! **** TEMP ****
	SCR$DOWN_SCROLL ();
	NEW_TEXT_LINE = .AED_L_BEGINLINE;
	INCR J FROM 1 TO .AED_B_LINE
	DO
	    BEGIN
	    OUTPUT_DESC[DSC$W_LENGTH] = .NEW_TEXT_LINE[LINE_W_SIZE];
	    OUTPUT_DESC[DSC$A_POINTER] = NEW_TEXT_LINE[LINE_T_TEXT];
	    AED_SET_CURSOR (.J, 1);
	    AED_PUTOUTPUT (OUTPUT_DESC);
	    SCR$ERASE_LINE (.J, .OUTPUT_DESC[DSC$W_LENGTH] + 1);
	    NEW_TEXT_LINE = .NEW_TEXT_LINE[LINE_L_FLINK];
	    END;
	END
    ELSE
	BEGIN
	NEW_TEXT_LINE = .AED_T_CURLINE[LINE_L_FLINK];
	INCR J FROM .AED_B_LINE TO 20
	DO
	    BEGIN
	    OUTPUT_DESC[DSC$W_LENGTH] = .NEW_TEXT_LINE[LINE_W_SIZE];
	    OUTPUT_DESC[DSC$A_POINTER] = NEW_TEXT_LINE[LINE_T_TEXT];
	    AED_SET_CURSOR (.J, 1);
	    AED_PUTOUTPUT (OUTPUT_DESC);
	    SCR$ERASE_LINE (.J, .OUTPUT_DESC[DSC$W_LENGTH] + 1);
	    NEW_TEXT_LINE = .NEW_TEXT_LINE[LINE_L_FLINK];
	    IF .NEW_TEXT_LINE EQLA AED_Q_LINETABLE[LINE_L_FLINK] THEN EXITLOOP;
	    END;
	END;
    END;

! Set the cursor position correctly.

.POSITION = 0;
IF .FIRST OR NOT .EXACT
THEN .POSITION = .SEGMENT_SIZE;

AED_B_COLUMN = ..POSITION + 1;
AED_SET_CURSOR (.AED_B_LINE, .AED_B_COLUMN);

RETURN 1;
END;						! End of routine AED_SEGSPLIT

GLOBAL ROUTINE AED_SEGCOMBINE (POSITION, DIRECTION) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes two line segments and combines them into one
!	large segment.  If the resulting combined segment is larger than
!	the page width, it is split up into two segments.
!
! CALLING SEQUENCE:
!	AED_SEGCOMBINE (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of the cell containing the desired buffer position
!	ARG2: 1 = combine current line with next line
!	      0 = combine current line with previous line
!
! IMPLICIT INPUTS:
!
! OUTPUT PARAMETERS:
!	ARG1: address of the cell to contain the buffer position
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

BIND
	SEGMENT_SIZE	= AED_T_CURLINE[LINE_W_SIZE] : WORD;

LOCAL
	OUTPUT_DESC	: $BBLOCK [DSC$C_S_BLN],	! Output line descr
	NEW_TEXT_LINE	: REF $BBLOCK,		! Addr of new segment
	PREV_LINE	: REF $BBLOCK,		! Addr of previous segment
	COMBINED_LINE	: REF $BBLOCK,		! Addr of combined segment
	REMOVED_LINE	: REF $BBLOCK;		! Addr of line removed

! Initialize any necessary items.

CH$FILL (0, DSC$C_S_BLN, OUTPUT_DESC);

! Determine whether anything can be combined based upon the direction
! of the combination attempt.

IF .DIRECTION
THEN
    BEGIN
    IF .AED_T_CURLINE[LINE_L_FLINK] EQLA AED_Q_LINETABLE[LINE_L_FLINK]
    THEN
	BEGIN
	SIGNAL (AED$_NOCOMBINE);
	RETURN 1;
	END;
    IF .AED_T_CURLINE[LINE_V_ENDACE]
    OR
	BEGIN
	NEW_TEXT_LINE = .AED_T_CURLINE[LINE_L_FLINK];
	IF .AED_T_CURLINE[LINE_V_REPLACE]
	THEN NEW_TEXT_LINE = .NEW_TEXT_LINE[LINE_L_FLINK];
	.NEW_TEXT_LINE[LINE_V_BEGINACE]
	END
    THEN
	BEGIN
	SIGNAL (AED$_NOCOMBINE);
	RETURN 1;
	END;
    PREV_LINE = AED_REPSEGMENT ();
    NEW_TEXT_LINE = .PREV_LINE[LINE_L_FLINK];
    END
ELSE
    BEGIN
    IF .AED_T_CURLINE[LINE_L_BLINK] EQLA AED_Q_LINETABLE[LINE_L_FLINK]
    OR .AED_T_CURLINE[LINE_V_BEGINACE]
    THEN
	BEGIN
	SIGNAL (AED$_NOCOMBINE);
	RETURN 1;
	END;
    NEW_TEXT_LINE = AED_REPSEGMENT ();
    PREV_LINE = .NEW_TEXT_LINE[LINE_L_BLINK];
    END;

! Combine the two segments.

AED_L_STATUS = ALLOCATE (.PREV_LINE[LINE_W_SIZE] +
			 .NEW_TEXT_LINE[LINE_W_SIZE] +
			 $BYTEOFFSET (LINE_T_TEXT), COMBINED_LINE);
IF NOT .AED_L_STATUS
THEN
    BEGIN
    SIGNAL (.AED_L_STATUS);
    RETURN 0;
    END;

.POSITION = .PREV_LINE[LINE_W_SIZE];
COMBINED_LINE[LINE_W_SIZE] = .PREV_LINE[LINE_W_SIZE] + .NEW_TEXT_LINE[LINE_W_SIZE];
CH$COPY (.PREV_LINE[LINE_W_SIZE], PREV_LINE[LINE_T_TEXT],
	 .NEW_TEXT_LINE[LINE_W_SIZE], NEW_TEXT_LINE[LINE_T_TEXT],
	 0,
	 .COMBINED_LINE[LINE_W_SIZE], COMBINED_LINE[LINE_T_TEXT]);
IF .PREV_LINE[LINE_V_BEGINACE] THEN COMBINED_LINE[LINE_V_BEGINACE] = 1;
IF .NEW_TEXT_LINE[LINE_V_ENDACE] THEN COMBINED_LINE[LINE_V_ENDACE] = 1;
COMBINED_LINE[LINE_L_BINACE] = .PREV_LINE[LINE_L_BINACE];
COMBINED_LINE[LINE_B_FIELDST] = .PREV_LINE[LINE_B_FIELDST];
INSQUE (COMBINED_LINE[LINE_L_FLINK], .PREV_LINE[LINE_L_BLINK]);
AED_COPSEGMENT (.COMBINED_LINE);
INSQUE (AED_T_CURLINE[LINE_L_FLINK], .COMBINED_LINE[LINE_L_BLINK]);
IF .AED_L_FIRSTLINE EQL .PREV_LINE THEN AED_L_FIRSTLINE = AED_T_CURLINE;
IF .AED_L_LASTLINE EQL .NEW_TEXT_LINE THEN AED_L_LASTLINE = AED_T_CURLINE;
IF .AED_L_BEGINLINE EQL .PREV_LINE OR .AED_L_BEGINLINE EQL .NEW_TEXT_LINE
THEN AED_L_BEGINLINE = AED_T_CURLINE;
REMQUE (PREV_LINE[LINE_L_FLINK], REMOVED_LINE);
DEALLOCATE (.REMOVED_LINE[LINE_W_SIZE] + $BYTEOFFSET (LINE_T_TEXT),
	    REMOVED_LINE);
REMQUE (NEW_TEXT_LINE[LINE_L_FLINK], REMOVED_LINE);
DEALLOCATE (.REMOVED_LINE[LINE_W_SIZE] + $BYTEOFFSET (LINE_T_TEXT),
	    REMOVED_LINE);
IF .COMBINED_LINE[LINE_W_SIZE] GTR .AED_L_PAGEWIDTH
THEN
    BEGIN
    AED_SEGSPLIT (%REF (.AED_L_PAGEWIDTH - 1), 0, 1, 1);
    AED_POSITION (AED_T_CURLINE);
    OUTPUT_DESC[DSC$W_LENGTH] = .AED_T_CURLINE[LINE_W_SIZE];
    OUTPUT_DESC[DSC$A_POINTER] = AED_T_CURLINE[LINE_T_TEXT];
    AED_SET_CURSOR (.AED_B_LINE, 1);
    AED_PUTOUTPUT (OUTPUT_DESC);
    SCR$ERASE_LINE (.AED_B_LINE, .AED_T_CURLINE[LINE_W_SIZE] + 1);
    NEW_TEXT_LINE = .$BBLOCK [.AED_T_CURLINE[LINE_L_FLINK], LINE_L_FLINK];
    OUTPUT_DESC[DSC$W_LENGTH] = .NEW_TEXT_LINE[LINE_W_SIZE];
    OUTPUT_DESC[DSC$A_POINTER] = NEW_TEXT_LINE[LINE_T_TEXT];
    AED_SET_CURSOR (.AED_B_LINE + 1, 1);
    AED_PUTOUTPUT (OUTPUT_DESC);
    SCR$ERASE_LINE (.AED_B_LINE + 1, .NEW_TEXT_LINE[LINE_W_SIZE] + 1);
    END
ELSE
    BEGIN
    AED_POSITION (AED_T_CURLINE);

! Since the combined lines fit on one line, it will be necessary to shift
! all of the lines after the combined line up one.  This is done by either
! scrolling down and repainting the first part of the display or repainting
! from the current position to the end of the display (or the end of the ACL).

    IF .AED_B_LINE LEQ 10
    THEN
	BEGIN
	AED_SET_CURSOR (20,1);		! **** TEMP ****
	SCR$UP_SCROLL ();
	NEW_TEXT_LINE = .AED_L_BEGINLINE;
	INCR J FROM 1 TO .AED_B_LINE
	DO
	    BEGIN
	    OUTPUT_DESC[DSC$W_LENGTH] = .NEW_TEXT_LINE[LINE_W_SIZE];
	    OUTPUT_DESC[DSC$A_POINTER] = NEW_TEXT_LINE[LINE_T_TEXT];
	    AED_SET_CURSOR (.J, 1);
	    AED_PUTOUTPUT (OUTPUT_DESC);
	    SCR$ERASE_LINE (.J, .OUTPUT_DESC[DSC$W_LENGTH] + 1);
	    NEW_TEXT_LINE = .NEW_TEXT_LINE[LINE_L_FLINK];
	    END;
	END
    ELSE
	BEGIN
	IF .AED_L_FLAGS[AED_V_ENDACL]
	THEN NEW_TEXT_LINE = AED_T_CURLINE
	ELSE NEW_TEXT_LINE = .AED_T_CURLINE[LINE_L_FLINK];
	INCR J FROM .AED_B_LINE TO 20
	DO
	    BEGIN
	    IF .NEW_TEXT_LINE EQLA AED_Q_LINETABLE[LINE_L_FLINK]
	    THEN
		BEGIN
		IF .J LSS 20 THEN SCR$ERASE_PAGE (.J, 1);
		EXITLOOP;
		END;
	    OUTPUT_DESC[DSC$W_LENGTH] = .NEW_TEXT_LINE[LINE_W_SIZE];
	    OUTPUT_DESC[DSC$A_POINTER] = NEW_TEXT_LINE[LINE_T_TEXT];
	    AED_SET_CURSOR (.J, 1);
	    AED_PUTOUTPUT (OUTPUT_DESC);
	    SCR$ERASE_LINE (.J, .OUTPUT_DESC[DSC$W_LENGTH] + 1);
	    NEW_TEXT_LINE = .NEW_TEXT_LINE[LINE_L_FLINK];
	    END;
	END;
    END;
AED_B_COLUMN = ..POSITION + 1;
AED_SET_CURSOR (.AED_B_LINE, .AED_B_COLUMN);

RETURN 1;

END;						! End of routine AED_SEGCOMBINE

GLOBAL ROUTINE AED_COPSEGMENT (SEGMENT_ADDR) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine copies the specified line segment to the current
!	line working storage area.
!
! CALLING SEQUENCE:
!	AED_COPSEGMENT (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of the desired line segment
!
! IMPLICIT IMPUTS:
!	AED_T_CURLINE: current line working storage
!	AED_Q_LINETABLE: line segment list head
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

MAP
	SEGMENT_ADDR	: REF $BBLOCK;

IF .SEGMENT_ADDR NEQA AED_Q_LINETABLE
THEN CH$MOVE ($BYTEOFFSET(LINE_T_TEXT), .SEGMENT_ADDR, AED_T_CURLINE);
CH$MOVE (.SEGMENT_ADDR[LINE_W_SIZE], SEGMENT_ADDR[LINE_T_TEXT],
	 AED_T_CURLINE[LINE_T_TEXT]);
AED_T_CURLINE[LINE_V_REPLACE] = 1;

RETURN 1;

END;						! End of routine AED_COPSEGMENT

GLOBAL ROUTINE AED_REPSEGMENT =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine replaces the specified segment with the new one given.
!
! CALLING SEQUENCE:
!	AED_REPSEGMENT ()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT IMPUTS:
!	AED_L_STATUS: global return status
!	AED_T_CURLINE: segment working storage
!	AED_L_FIRSTLINE: address of first segment of ACE
!	AED_L_LASTLINE: address of last segment of ACE
!	AED_L_BEGINLINE: address of first line of display
!
! OUTPUT PARAMETERS:
!	ARG1: total size of all segments
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

BIND
	SEGMENT_SIZE	= AED_T_CURLINE[LINE_W_SIZE] : WORD;

LOCAL
	NEW_TEXT_LINE	: REF $BBLOCK,		! Address of new segment
	REMOVED_LINE	: REF $BBLOCK;		! Address of segment removed

AED_L_STATUS = ALLOCATE (.SEGMENT_SIZE + $BYTEOFFSET (LINE_T_TEXT),
			 NEW_TEXT_LINE);
IF NOT .AED_L_STATUS
THEN
    BEGIN
    SIGNAL (.AED_L_STATUS);
    RETURN 0;
    END;
CH$MOVE (.SEGMENT_SIZE + $BYTEOFFSET (LINE_T_TEXT),
	 AED_T_CURLINE, .NEW_TEXT_LINE);
IF .SEGMENT_SIZE EQL 0 THEN NEW_TEXT_LINE[LINE_V_DUMMY] = 1;
INSQUE (NEW_TEXT_LINE[LINE_L_FLINK], AED_T_CURLINE[LINE_L_FLINK]);
REMQUE (AED_T_CURLINE[LINE_L_FLINK], REMOVED_LINE);
AED_W_TOTALSIZE = .AED_W_TOTALSIZE + .SEGMENT_SIZE;
CH$FILL (0, 512 + $BYTEOFFSET (LINE_T_TEXT), AED_T_CURLINE);
IF .AED_L_BEGINLINE EQLA AED_T_CURLINE
THEN AED_L_BEGINLINE = .NEW_TEXT_LINE;
IF .AED_L_FIRSTLINE EQLA AED_T_CURLINE
THEN AED_L_FIRSTLINE = .NEW_TEXT_LINE;
IF .AED_L_LASTLINE EQLA AED_T_CURLINE
THEN AED_L_LASTLINE = .NEW_TEXT_LINE;
IF .NEW_TEXT_LINE[LINE_V_REPLACE]
THEN
    BEGIN
    NEW_TEXT_LINE[LINE_V_REPLACE] = 0;
    REMQUE (.NEW_TEXT_LINE[LINE_L_FLINK], REMOVED_LINE);
    AED_W_TOTALSIZE = .AED_W_TOTALSIZE - .REMOVED_LINE[LINE_W_SIZE];
    DEALLOCATE (.REMOVED_LINE[LINE_W_SIZE] +
		$BYTEOFFSET (LINE_T_TEXT),
		REMOVED_LINE);
    END;

RETURN .NEW_TEXT_LINE;

END;						! End of routine AED_REPSEGMENT

GLOBAL ROUTINE AED_POSITION (LINE_ADDRESS) : NOVALUE = 

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine positions the cursor to the selected line.  If necessary
!	it will also scroll up or down the display so that the selected line
!	may be viewed.
!
! CALLING SEQUENCE:
!	AED_POSITION (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of the line segment to position to
!
! IMPLICIT INPUTS:
!	AED_L_BEGINLINE: address of the first line of the display
!	AED_Q_LINETABLE: address of the line table list head
!	AED_B_LINE: the current line position within the display
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	AED_L_BEGINLINE: address of the first line of the display
!	AED_B_LINE: the current line position within the display
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	The display is scrolled as necessary to view the selected line
!	segment.
!
! --

BEGIN

MAP
	LINE_ADDRESS	: REF $BBLOCK;		! Address of the segment

MACRO
	POS_BEGIN_SEEN	= 0, 0, 1, 0 %;		! First line of display seen

LOCAL
	OUTPUT_DESC	: $BBLOCK [DSC$C_S_BLN],	! Output line descr
	NEXT_TEXT_LINE	: REF $BBLOCK,		! Address of next line segment
	POS_FLAGS	: $BBLOCK [1];		! Local positioning flags

! Quick check to see if the cursor must move at all.

AED_B_LINE = 1;
IF .LINE_ADDRESS EQL .AED_L_BEGINLINE THEN RETURN;

! Traverse the line segment table looking for the selected line segment and
! the current first line of the display.  This will determine if any scrolling
! is needed and what the direction will be.  If the selected line occurs before
! the first line of the display, it will be necessary to scroll down.  If the
! selected line occurs after the first line, it will be necessary to scroll up.

NEXT_TEXT_LINE = .AED_Q_LINETABLE[LINE_L_FLINK];
POS_FLAGS[POS_BEGIN_SEEN] = 0;

UNTIL .NEXT_TEXT_LINE EQL .LINE_ADDRESS
DO
    BEGIN
    IF .NEXT_TEXT_LINE EQL .AED_L_BEGINLINE
    THEN
	BEGIN
	POS_FLAGS[POS_BEGIN_SEEN] = 1;
	EXITLOOP;
	END;
    NEXT_TEXT_LINE = .NEXT_TEXT_LINE[LINE_L_FLINK];
    END;

NEXT_TEXT_LINE = .AED_L_BEGINLINE;

IF .POS_FLAGS[POS_BEGIN_SEEN]
THEN
    BEGIN					! Move forward/scroll up
    UNTIL .NEXT_TEXT_LINE EQL .LINE_ADDRESS
    DO
	BEGIN
	NEXT_TEXT_LINE = .NEXT_TEXT_LINE[LINE_L_FLINK];
	IF .AED_B_LINE LSS 20
	THEN AED_B_LINE = .AED_B_LINE + 1
	ELSE
	    BEGIN
	    AED_SET_CURSOR (20, 1);		! **** TEMP ****
	    SCR$UP_SCROLL ();
	    AED_L_BEGINLINE = .AED_L_BEGINLINE[LINE_L_FLINK];
	    AED_SET_CURSOR (20, 1);
	    OUTPUT_DESC[DSC$W_LENGTH] = .NEXT_TEXT_LINE[LINE_W_SIZE];
	    OUTPUT_DESC[DSC$A_POINTER] = NEXT_TEXT_LINE[LINE_T_TEXT];
	    AED_PUTOUTPUT (OUTPUT_DESC);
	    END;
	END;
    END
ELSE
    BEGIN					! Move backward/scroll down
    UNTIL .NEXT_TEXT_LINE EQL .LINE_ADDRESS
    DO
	BEGIN
	NEXT_TEXT_LINE = .NEXT_TEXT_LINE[LINE_L_BLINK];
	AED_SET_CURSOR (1, 1);			! **** TEMP ****
	SCR$DOWN_SCROLL ();
	SCR$ERASE_PAGE (21, 1);
	AED_SET_CURSOR (1, 1);
	OUTPUT_DESC[DSC$W_LENGTH] = .NEXT_TEXT_LINE[LINE_W_SIZE];
	OUTPUT_DESC[DSC$A_POINTER] = NEXT_TEXT_LINE[LINE_T_TEXT];
	AED_PUTOUTPUT (OUTPUT_DESC);
	END;
    AED_L_BEGINLINE = .NEXT_TEXT_LINE;
    END;

RETURN;

END;						! End of routine AED_POSITION

GLOBAL ROUTINE AED_UPDATEACL (TOTAL_SIZE) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes all the line segments from AED_L_FIRSTLINE
!	to AED_L_LASTLINE, mashes them together, converts the resulting
!	text ACE to a binary form, and then updates the in core copy
!	of the object's ACL.
!
! CALLING SEQUENCE:
!	AED_UPDATEACL (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: total size of the new ACE text
!
! IMPLICIT INPUTS:
!	AED_L_FIRSTLINE: address of the first list segment
!	AED_L_LASTLINE: address of the last line segment
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1 if success
!	error status otherwise
!
! SIDE EFFECTS:
!	The in core copy of the object's ACL is updated.  The object's
!	actual ACL is left untouched.  It gets updated at the end of the
!	editing session.
!
!--

BEGIN

LOCAL
	LOCAL_STATUS,				! Local routine exit status
	APPEND_INDEX,				! Index for combining segments
	CURRENT_LINE	: REF $BBLOCK,		! Address of current segment
	NEW_ACE		: $BBLOCK [ACL$S_READACL],	! Storage for converted ACE
	NEW_ACE_SIZE	: BYTE,			! Size of new binary ACE
	ACE_DESC	: $BBLOCK [DSC$C_S_BLN],	! Binary ACE descriptor
	ACE_TEXT_DESC	: $BBLOCK [DSC$C_S_BLN],	! Text ACE descriptor
	CHAR_PROCESSED	: WORD,			! Chars processed by ACL parser
	ATR_ARGLIST	: BLOCKVECTOR [3, ITM$S_ITEM, BYTE],	! ACL item list
	ACL_CONTEXT;				! ACL context

! If the total size of the ACE text segments is zero, determine if it is
! necessary to delete the corresponding binary ACE.

IF .TOTAL_SIZE EQL 0 THEN RETURN 1;

! Concatenate all of the text line segments together, and convert to a
! binary ACE.  Any errors are signaled as syntax errors.

AED_L_LASTLINE[LINE_V_ENDACE] = 1;
LOCAL_STATUS = ALLOCATE (.TOTAL_SIZE, AED_A_ACLBUFFER);
IF NOT .LOCAL_STATUS
THEN
    BEGIN
    SIGNAL (.LOCAL_STATUS);
    RETURN .LOCAL_STATUS;
    END;
CURRENT_LINE = .AED_L_FIRSTLINE[LINE_L_BLINK];
APPEND_INDEX = 0;
DO
    BEGIN
    CURRENT_LINE = .CURRENT_LINE[LINE_L_FLINK];
    CH$MOVE (.CURRENT_LINE[LINE_W_SIZE], CURRENT_LINE[LINE_T_TEXT],
	     AED_A_ACLBUFFER[.APPEND_INDEX, 0, 8, 0]);
    APPEND_INDEX = .APPEND_INDEX + .CURRENT_LINE[LINE_W_SIZE];
    END
UNTIL .CURRENT_LINE EQL .AED_L_LASTLINE;
ACE_DESC[DSC$W_LENGTH] = ACL$S_READACL;
ACE_DESC[DSC$A_POINTER] = NEW_ACE;
ACE_TEXT_DESC[DSC$W_LENGTH] = .TOTAL_SIZE;
ACE_TEXT_DESC[DSC$A_POINTER] = .AED_A_ACLBUFFER;
LOCAL_STATUS = $PARSE_ACL (ACLSTR = ACE_TEXT_DESC,
			   ACLENT = ACE_DESC,
			   ERRPOS = CHAR_PROCESSED);
IF NOT .LOCAL_STATUS
THEN
    BEGIN
    AED_L_FLAGS[AED_V_ACERROR] = 1;
    SIGNAL (AED$_SYNTAX, 2, .TOTAL_SIZE - .CHAR_PROCESSED,
			    AED_A_ACLBUFFER[.CHAR_PROCESSED, 0, 8, 0],
			    .LOCAL_STATUS, 0);
    RETURN AED$_SYNTAX;
    END;
NEW_ACE_SIZE = .NEW_ACE[ACE$B_SIZE];	! In case of a duplicate

! Check for a hidden ACE.  Since they are application specific, the ACL
! editor is not allowed to touch them.

IF .NEW_ACE[ACE$V_HIDDEN]
THEN
    BEGIN
    AED_L_FLAGS[AED_V_ACERROR] = 1;
    SIGNAL (AED$_NOHIDDEN);
    RETURN AED$_NOHIDDEN;
    END;

! Check for directory default ACEs.  If the object is not a directory file,
! note the error.

IF .NEW_ACE[ACE$V_DEFAULT] AND NOT .AED_L_FLAGS[AED_V_DIRECTORY]
THEN
    BEGIN
    AED_L_FLAGS[AED_V_ACERROR] = 1;
    SIGNAL (AED$_NODEFAULT);
    RETURN AED$_NODEFAULT;
    END;

! Check to see if the I am adding an already existing ACE.  If so, warn the
! user about the duplicate.  This means that the text display actually
! reflects the true state of the ACL.

CURRENT_LINE = .AED_Q_LINETABLE[LINE_L_FLINK];
UNTIL .CURRENT_LINE EQLA AED_Q_LINETABLE[LINE_L_FLINK]
DO
    BEGIN
    IF .CURRENT_LINE[LINE_V_BEGINACE]
    AND .CURRENT_LINE[LINE_L_BINACE] NEQ 0
    THEN IF CH$EQL (.NEW_ACE_SIZE, NEW_ACE,
		    .$BBLOCK[.CURRENT_LINE[LINE_L_BINACE], ACE$B_SIZE],
		    .CURRENT_LINE[LINE_L_BINACE], 0)
	 AND .CURRENT_LINE NEQ .AED_L_FIRSTLINE
	 THEN
	     BEGIN
	     SIGNAL (AED$_DUPLICATE);
	     DEALLOCATE (.NEW_ACE_SIZE, AED_L_FIRSTLINE[LINE_L_BINACE]);
	     RETURN AED$_DUPLICATE;
	     END;
    CURRENT_LINE = .CURRENT_LINE[LINE_L_FLINK];
    END;

! If there is an ACE already, deallocate it.

IF .AED_L_FIRSTLINE[LINE_L_BINACE] NEQ 0
THEN DEALLOCATE (.$BBLOCK[.AED_L_FIRSTLINE[LINE_L_BINACE], ACE$B_SIZE],
		 AED_L_FIRSTLINE[LINE_L_BINACE]);

! So far, so good.  Allocate storage for the binary ACE, and save it.

LOCAL_STATUS = ALLOCATE (.NEW_ACE_SIZE, AED_L_FIRSTLINE[LINE_L_BINACE]);
IF NOT .LOCAL_STATUS
THEN
    BEGIN
    SIGNAL (.LOCAL_STATUS);
    RETURN .LOCAL_STATUS;
    END;
CH$MOVE (.NEW_ACE_SIZE, NEW_ACE, .AED_L_FIRSTLINE[LINE_L_BINACE]);

RETURN 1;					! End of routine AED_UPDATEACL

END;

GLOBAL ROUTINE AED_SET_CURSOR (LINE, COLUMN) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the desired cursor position.  As a side effect,
!	it remembers the last position set.  This is to allow screen refresh
!	to correctly set the cursor position after repainting the screen.
!
! CALLING SEQUENCE:
!	AED_SET_CURSOR (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: line to which the cursor is set
!	ARG2: column to which the cursor is set
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	AED_B_SAVE_COL: saved column position
!	AED_B_SAVE_LIN: saves line position
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

! Remember the position being set.

AED_B_SAVE_LIN = .LINE;
AED_B_SAVE_COL = .COLUMN;

! Now, set the cursor.

SCR$SET_CURSOR (.LINE, .COLUMN);

RETURN 1;

END;						! End of routine AED_SET_CURSOR

END
ELUDOM
