%TITLE 'NML Read information module'
MODULE NML$READ (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
! ABSTRACT:
!
!    These routines dispatch NICE READ function requests to the entity
!    processing routine.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Kathy Perko
!
! CREATION DATE:  30-June-1982
!
! MODIFIED BY:
!
!	V03-007	MKP0007		Kathy Perko		7-Jan-1984
!		Add X25 Access Module entity.
!
!	V03-006	MKP0006		Kathy Perko		4-Aug-1983
!		Enhance node permanent database to use more ISAM keys - to
!		speed it up.
!
!	V03-005	MKP0005		Kathy Perko		28-April-1983
!		Add Adjacent service circuit database.
!
!	V03-004	MKP0004		Kathy Perko		17-Jan-1983
!		Add support for the NI Configurator Module.
!
!	V03-003	MKP0003		Kathy Perko		14-Nov-1982
!		Add circuit qualifier to SHOW KNOWN and ACTIVE NODES.
!
!	V03-002	MKP0002		Kathy Perko		8-Nov-1982
!		Add area entity.
!
!	V03-001	MKP0001		Kathy Perko		5-Oct-1982
!		Add show for adjacent nodes, and for circuits adjacent nodes.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	NML$READ		: NOVALUE,
	NML_READ		: NOVALUE,
	NML_READ_LOGGING	: NOVALUE,
	NML_READ_NODE		: NOVALUE,
	NML_READ_EXECUTOR	: NOVALUE,
	NML_READ_NETWORK	: NOVALUE,
	NML_READ_AREA		: NOVALUE,
	NML_SHOW_LINKS		: NOVALUE,
	NML_READ_PLURAL 	: NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL ROUTINE
    LIB$ESTABLISH : ADDRESSING_MODE (GENERAL),
    LIB$REVERT    : ADDRESSING_MODE (GENERAL),
    NML$OPENFILE,
    NML$BLD_REPLY,
    NML$MAINHANDLER,
    NML$ERROR_1,
    NML$ERROR_2,
    NML$LISTENTITY,
    NML$LIST_KNOWN_NODES,
    NML$LIST_TYPE_NODES,
    NML$LISTKNOWN,
    NML$READACTLOG,
    NML$READKNOLOG,
    NML$READLOGGING,
    NML$SEND,
    NML$SHOWMULTIPLE,
    NML$SHOW_MULTIPLE_NODES,
    NML$SHOW_KNOWN_LOOP,
    NML$SHOWENTITY,
    NML$SHOW_CIRCUIT,
    NML$SHOWNODEBYNAME,
    NML$SHOWEXECUTOR,
    NML$CALL_NI_CONFIG;

!
! Macro to build dispatch table for an entity.
!
MACRO $TAB (TAB,
    DISPATCH_RTN,
    SHOW_RTN,
    SHOW_W_QUAL_RTN,
    SHOW_KNO_RTN,
    SHOW_KNO_W_QUAL_RTN,
    SHOW_ACT_RTN,
    LIST_RTN,
    LIST_W_QUAL_RTN,
    LIST_KNO_RTN,
    LIST_KNO_W_QUAL_RTN) =

	OWN TAB : BBLOCK [%LENGTH * 4] INITIAL (
	$PIC (DISPATCH_RTN, TAB),
	$PIC (SHOW_RTN,TAB),
	$PIC (SHOW_W_QUAL_RTN,TAB),
	$PIC (SHOW_KNO_RTN,TAB),
	$PIC (SHOW_KNO_W_QUAL_RTN,TAB),
	$PIC (SHOW_ACT_RTN, TAB),
	$PIC (LIST_RTN,TAB),
	$PIC (LIST_W_QUAL_RTN,TAB),
	$PIC (LIST_KNO_RTN,TAB),
	$PIC (LIST_KNO_W_QUAL_RTN,TAB),
	0)  !There is never a LIST ACTIVE command.
		%,

    $PIC (ADDR,TAB) =
		%IF %IDENTICAL (ADDR, 0)
		%THEN	LONG (0)
		%ELSE LONG (%NAME (ADDR) - %NAME (TAB))
		%FI
		%;


!
! Dispatch tables.  There is one table for each internal NML entity (NML
! internal entities are broken down more that NICE entities).  The table
! specifies the following information about the entity:
!	The address of the dispatch routine in this module for the entity.
!		The dispatch routines vary depending on the different
!		formats the entities can have.
!	The addresses of the routines which perform the requested read:
!		- Show single entity
!		- Show single entity with specified qualifier
!		- Show known entities
!		- Show known entities with specified qualifier
!		- List single entity
!		- List single entity with specified qualifier
!		- List known entities
!		- List known entities with specified qualifier
!		- Show active entities
!		
!
$TAB (LINE_TAB,				! NML$C_LINE
	NML_READ,
	NML$SHOWENTITY,		0,	NML$SHOWMULTIPLE,	0,
	NML$SHOWMULTIPLE,
	NML$LISTENTITY,		0,	NML$LISTKNOWN,		0);

$TAB (LOGGING_TAB,			! NML$C_LOGGING
	NML_READ_LOGGING,
	NML$READLOGGING,	0,	NML$READKNOLOG,		0,
	NML$READACTLOG,
	NML$READLOGGING,	0,	NML$READKNOLOG,		0);

BIND SINK_TAB = UPLIT (0);

$TAB (NODE_TAB,				! NML$C_NODE
	NML_READ_NODE,
	NML$SHOWENTITY,		0,	NML$SHOW_MULTIPLE_NODES,
							NML$SHOW_MULTIPLE_NODES,
	NML$SHOW_MULTIPLE_NODES,
	NML$LISTENTITY,		0,	NML$LIST_KNOWN_NODES,	0);

$TAB (NODEBYNAME_TAB,			! NML$C_NODEBYNAME
	NML_READ_NODE,
	NML$SHOWNODEBYNAME,	0,	NML$SHOW_MULTIPLE_NODES,0,
	NML$SHOW_MULTIPLE_NODES,
	NML$LISTENTITY,		0,	NML$LIST_KNOWN_NODES,	0);

$TAB (LOOPNODE_TAB,			! NML$C_LOOPNODE
	NML_READ_NODE,
	0,			0,	NML$SHOW_KNOWN_LOOP,	0,
	0,
	0,			0,	NML$LIST_TYPE_NODES,	0);

$TAB (ADJACENT_TAB,			! NML$C_ADJACENT_NODE
	NML_READ_NODE,
	0,			0,	NML$SHOWMULTIPLE,  NML$SHOWMULTIPLE,
	0,
	0,			0,	0,		   0);

$TAB (EXECUTOR_TAB,			! NML$C_EXECUTOR
	NML_READ_EXECUTOR,
	NML$SHOWEXECUTOR,	0,	0,	0,
	0,
	NML$LISTENTITY,		0,	0,	0);

$TAB (OBJECT_TAB,			! NML$C_OBJECT
	NML_READ,
	NML$SHOWENTITY,		0,	NML$SHOWMULTIPLE,	0,
	NML$SHOWMULTIPLE,
	NML$LISTENTITY,		0,	NML$LISTKNOWN,		0);

$TAB (CIRCUIT_TAB,			! NML$C_CIRCUIT
	NML_READ,
	NML$SHOW_CIRCUIT, NML$SHOW_CIRCUIT, NML$SHOWMULTIPLE, NML$SHOWMULTIPLE,
	NML$SHOWMULTIPLE,
	NML$LISTENTITY,	  0,		    NML$LISTKNOWN,    0);

BIND CIRCUIT_ADJACENT_TAB = UPLIT (0);

BIND CIRCUIT_ADJ_SRV_TAB = UPLIT (0);

$TAB (AREA_TAB,			! NML$C_AREA
	NML_READ_AREA,
	NML$SHOWENTITY,		0,	NML$SHOWMULTIPLE,	0,
	NML$SHOWMULTIPLE,
	0,			0,	0,			0);


$TAB (ACCESS_TAB,			! NML$C_X25_ACCESS
	NML_READ_NETWORK,
	NML$SHOWENTITY,		0,	NML$SHOWMULTIPLE,	0,
	0,
	NML$LISTENTITY,		0,	NML$LISTKNOWN,		0);

$TAB (PROT_NET_TAB,			! NML$C_PROT_NET_TAB
	NML_READ_NETWORK,
	NML$SHOWENTITY,		0,	0,	0,
	0,
	NML$LISTENTITY,		0,	0,	0);

$TAB (PROT_DTE_TAB,			! NML$C_PROT_DTE
	NML_READ,
	NML$SHOWENTITY,		0,	NML$SHOWMULTIPLE,	0,
	NML$SHOWMULTIPLE,
	NML$LISTENTITY,		0,	NML$LISTKNOWN,		0);

$TAB (PROT_GRP_TAB,			! NML$C_PROT_GRP
	NML_READ,
	NML$SHOWMULTIPLE, NML$SHOWMULTIPLE, NML$SHOWMULTIPLE, NML$SHOWMULTIPLE,
	0,
	NML$LISTKNOWN,    NML$LISTKNOWN,    NML$LISTKNOWN,    NML$LISTKNOWN);

$TAB (SERV_TAB,				! NML$C_X25_SERV and NML$C_X29_SERV
	NML_READ,
	NML$SHOWENTITY,		0,	0,	0,
	0,
	NML$LISTENTITY,		0,	0,	0);

$TAB (SERV_DEST_TAB,		! NML$C_X25_SERV_DEST and NML$C_X29_SERV_DEST
	NML_READ,
	NML$SHOWENTITY,		0,	NML$SHOWMULTIPLE,	0,
	NML$SHOWMULTIPLE,
	NML$LISTENTITY,		0,	NML$LISTKNOWN,		0);

$TAB (TRACE_TAB,				! NML$C_TRACE
	NML_READ,
	NML$SHOWENTITY,		0,	0,	0,
	0,
	NML$LISTENTITY,		0,	0,	0);

$TAB (TRACEPNT_TAB,		! NML$C_TRACEPNT
	NML_READ,
	NML$SHOWENTITY,		0,	NML$SHOWMULTIPLE,	0,
	NML$SHOWMULTIPLE,
	NML$LISTENTITY,		0,	NML$LISTKNOWN,		0);

$TAB (NI_CONFIG_TAB,		! NML$C_NI_CONFIG
	NML_READ,
	NML$CALL_NI_CONFIG,	0,	NML$CALL_NI_CONFIG,	0,
	0,
	NML$LISTENTITY,		0,	NML$LISTKNOWN,		0);

$TAB (LINK_TAB,				! NML$C_LINK
	NML_SHOW_LINKS,
	NML$SHOWENTITY,		0,	NML$SHOWMULTIPLE,  NML$SHOWMULTIPLE,
	0,
	0,			0,	0,		   0);


!
! Table table.  Contains pointers to Dispatch tables for NML entities.
! Indexed by NML$C_entity definitions.
!
OWN TABLE_TAB : VECTOR [NML$C_MAXENTITY] INITIAL (
	$PIC (LINE_TAB, TABLE_TAB),
	$PIC (LOGGING_TAB,TABLE_TAB),
	$PIC (SINK_TAB,TABLE_TAB),
	$PIC (NODE_TAB,TABLE_TAB),
	$PIC (NODEBYNAME_TAB,TABLE_TAB),
	$PIC (LOOPNODE_TAB,TABLE_TAB),
	$PIC (ADJACENT_TAB,TABLE_TAB),
	$PIC (EXECUTOR_TAB,TABLE_TAB),
	$PIC (OBJECT_TAB,TABLE_TAB),
	$PIC (CIRCUIT_TAB,TABLE_TAB),
	$PIC (CIRCUIT_ADJACENT_TAB,TABLE_TAB),
	$PIC (CIRCUIT_ADJ_SRV_TAB,TABLE_TAB),
	$PIC (AREA_TAB,TABLE_TAB),
	$PIC (ACCESS_TAB,TABLE_TAB),		! X25
	$PIC (PROT_NET_TAB,TABLE_TAB),
	$PIC (PROT_DTE_TAB,TABLE_TAB),
	$PIC (PROT_GRP_TAB,TABLE_TAB),
	$PIC (SERV_TAB,TABLE_TAB),		! X25
	$PIC (SERV_DEST_TAB,TABLE_TAB),		! X25
	$PIC (TRACE_TAB,TABLE_TAB),
	$PIC (TRACEPNT_TAB,TABLE_TAB),
	$PIC (SERV_TAB,TABLE_TAB),		! X29
	$PIC (SERV_DEST_TAB,TABLE_TAB),		! X29
	$PIC (NI_CONFIG_TAB,TABLE_TAB),
	$PIC (LINK_TAB,TABLE_TAB));

%SBTTL 'NML$READ  Read parameters main routine'
GLOBAL ROUTINE NML$READ : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dispatches the NICE read parameters command to
!	the correct function handler.
!
! IMPLICIT INPUTS:
!
!	NML$GB_OPTIONS contains the option byte parsed from the NICE message.
!	NML$GB_ENTITY_CODE contains the entity code.
!
!--

BEGIN

MAP
    NML$GB_ENTITY_FORMAT : BYTE SIGNED,
    NML$GB_OPTIONS : BBLOCK [1];

LOCAL
    INDEX,			! Index into Information Table (in NMLDAT)
    ENT_TAB    : REF BBLOCK,	! Dispatch table reference
    READ_TABLE_ADR: REF BBLOCK,	! Address of SHOW or LIST portion of entity
				!	dispatch table.
    RTN_ADDR,			! Temporary routine address
    READ_RTN;			! Address of routine to perform
				!	read requested by NICE
				!	message.


!
! Get the index for information type requested by the NICE command.
!
SELECTONEU .NML$GB_INFO OF
    SET
    [NMA$C_OPINF_SUM]:
	INDEX = NML$C_SUMMARY;	! Summary
    [NMA$C_OPINF_STA]:
	INDEX = NML$C_STATUS;	! Status
    [NMA$C_OPINF_CHA]:
	INDEX = NML$C_CHARACTERISTICS; ! Characteristics
    [NMA$C_OPINF_COU]:
	!
	! Counters are kept only in the volatile data base.
	!
	IF .NML$GB_OPTIONS [NMA$V_OPT_PER] THEN
	    INDEX = -1
	ELSE
	    INDEX = NML$C_COUNTERS;
    [NMA$C_OPINF_EVE]:
	INDEX = NML$C_EVENTS;	! Events
    [OTHERWISE]:
	INDEX = -1;		! Option error
    TES;
!
! If the information type is illegal, signal an error response to NCP
!
IF .INDEX EQLU -1 THEN
    NML$ERROR_1 (NMA$C_STS_FUN);

!
! Get address of entity's dispatch table.  The addresses are stored as offsets
! to make NMLSHR PIC.  Change the offset into a useable address.
!
ENT_TAB = .TABLE_TAB [.NML$GL_NML_ENTITY] + TABLE_TAB;
IF .ENT_TAB NEQA 0 THEN
    BEGIN
    RTN_ADDR = .ENT_TAB [DT$L_DISPATCH] + .ENT_TAB;
    !
    !  Go to dispatch table for the entity specified in the NICE message.
    !  Get the address of the routine which performs the type of read
    !  requested.
    !
    IF .RTN_ADDR NEQA .ENT_TAB THEN
	BEGIN
	!
	! Get address of portion of entity's dispatch table containing
	! the change routine addresses for the function (SHOW or LIST)
	! specified by the NICE message.
	!
	IF .NML$GB_OPTIONS [NMA$V_OPT_PER] THEN
	    READ_TABLE_ADR = ENT_TAB [DT$A_LIST_ROUTINES]
	ELSE
	    READ_TABLE_ADR = ENT_TAB [DT$A_SHOW_ROUTINES];

	!
	! Each function's portion of the entity's dispatch table contains
	! the addresses of five read routines.  These routines do the
	! following:
	!	- Read a single entity
	!	- Read a single entity with the specified qualifier
	!	- Read known entities
	!	- Read known entities with the specified qualifier
	!	- Read active entities (never used for LIST because
	!	  the permanent data base does not maintain real state info.
	!
	SELECTONEU .NML$GB_ENTITY_FORMAT OF
	    SET
	    [NMA$C_ENT_KNO,		! read known
	     NMA$C_ENT_LOO,		! read loopnodes
	     NMA$C_ENT_ADJ]:		! read adjacent nodes
		IF .NML$GL_PRS_FLGS [NML$V_PRS_QUALIFIER] THEN
		    READ_RTN = .READ_TABLE_ADR [RD$L_KNOWN_W_QUAL]
		ELSE
		    READ_RTN = .READ_TABLE_ADR [RD$L_KNOWN];
	    [NMA$C_ENT_ACT]:		! read active
		READ_RTN = .READ_TABLE_ADR [RD$L_ACTIVE];
	    [0]:			! read active X25-Protocol network,
					!	node by address or single area.
		READ_RTN = .READ_TABLE_ADR [RD$L_ENTITY];
	    [1 TO 16]:			! read single entity
		IF .NML$GL_PRS_FLGS [NML$V_PRS_QUALIFIER] THEN
		    READ_RTN = .READ_TABLE_ADR [RD$L_ENTITY_W_QUAL]
		ELSE
		    READ_RTN = .READ_TABLE_ADR [RD$L_ENTITY];
	    [OTHERWISE]:
		READ_RTN = 0;		! Invalid entity format for SHOW
	    TES;
	!
	! The routine addresses are stored as offsets (to make NMLSHR PIC).
	! Make the offset into a callable routine address.
	!
	IF .READ_RTN NEQ 0 THEN
	    BEGIN
	    READ_RTN = .READ_RTN + .ENT_TAB;
	    !
	    ! Call read routine.
	    !
	    (.RTN_ADDR) (.NML$GL_NML_ENTITY,
		         .INDEX,
		         .READ_RTN);
	    END
	ELSE
	    NML$ERROR_2 (NMA$C_STS_IDE, .NML$GB_ENTITY_FORMAT);
	END
    ELSE
	NML$ERROR_2 (NMA$C_STS_IDE, .NML$GB_ENTITY_FORMAT);
    END
ELSE
    NML$ERROR_2 (NMA$C_STS_IDE, .NML$GB_ENTITY_FORMAT);
END;				! End of NML$READ

%SBTTL 'NML_READ  Read parameters'
ROUTINE NML_READ (ENTITY, INDEX, READ_RTN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dispatches to the routine which read the permanent
!	or volatile data base for the specified entity.
!
! INPUTS:
!	ENTITY		The internal NML index for the entity specified in
!			the NICE command.
!	INDEX		Entity information table (in NMLDAT) index code.
!	READ_RTN	Address of routine to perform read requested
!				by NICE message.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
!--

BEGIN

MAP
    NML$GB_ENTITY_FORMAT : BYTE SIGNED;

SELECTONEU .NML$GB_ENTITY_FORMAT OF
    SET
    [NMA$C_ENT_KNO,			! Known entities
     NMA$C_ENT_ACT]:			! or active entities
	NML_READ_PLURAL (.ENTITY, .READ_RTN, .INDEX,
			.NML$GB_ENTITY_FORMAT, 0,
			.NML$GL_QUALIFIER_PST,
			.NML$GB_QUALIFIER_FORMAT,
			NML$AB_QUALIFIER_ID);

    [1 TO 31]:				! Single entity
	NML_READ_PLURAL (.ENTITY, .READ_RTN, .INDEX,
			.NML$GB_ENTITY_FORMAT, NML$AB_ENTITY_ID,
			.NML$GL_QUALIFIER_PST,
			.NML$GB_QUALIFIER_FORMAT,
			NML$AB_QUALIFIER_ID);

    [OTHERWISE]:
	NML$ERROR_2 (NMA$C_STS_IDE, .NML$GB_ENTITY_CODE);
    TES;
END;				! End of NML_READ

%SBTTL 'NML_READ_LOGGING  Read logging volatile parameters'
ROUTINE NML_READ_LOGGING (ENTITY, INDEX, READ_RTN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the specified logging parameters from the volatile
!	or permanent data base.
!
! FORMAL PARAMETERS:
!
! INPUTS:
!	ENTITY		The internal NML index for the entity specified in
!			the NICE command.
!	INDEX		Entity information table (in NMLDAT) index code.
!	READ_RTN	Address of routine to perform read requested
!				by NICE message.
!
! IMPLICIT INPUTS:
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
!--

BEGIN

MAP
    NML$GB_ENTITY_FORMAT : BYTE SIGNED;

LOCAL
    LEN,
    ENTITY_ID;

SELECTONEU .NML$GB_ENTITY_FORMAT OF
    SET
    [NMA$C_ENT_KNO,
    NMA$C_ENT_ACT]:		! Known and active entities
	BEGIN
	LEN = 0;
	ENTITY_ID = 0;
	END;

    [NMA$C_SNK_CON,    		! Console
    NMA$C_SNK_FIL,		! File
    NMA$C_SNK_MON]:		! Monitor
	BEGIN
	LEN = .NML$GB_ENTITY_FORMAT;
	ENTITY_ID = 0;
	END;

    [OTHERWISE]:
	NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_LOG); ! Option error
    TES;
NML_READ_PLURAL (.ENTITY, .READ_RTN, .INDEX, .LEN, .ENTITY_ID, 0);

END;				! End of NML_SHOW_LOGGING

%SBTTL 'NML_READ_NODE  Read node parameters'
ROUTINE NML_READ_NODE (ENTITY, INDEX, READ_RTN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine dispatches to the routine which reads the permanent
!	or volatile data base for nodes.
!
! INPUTS:
!	ENTITY		The internal NML index for the entity specified in
!			the NICE command.
!	INDEX		Entity information table (in NMLDAT) index code.
!	READ_RTN	Address of routine to perform read requested
!				by NICE message.
!
! IMPLICIT INPUTS:
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
!--

BEGIN

MAP
    NML$GB_ENTITY_FORMAT : BYTE SIGNED,
    NML$GB_OPTIONS : BBLOCK [1];

SELECTONEU .NML$GB_ENTITY_FORMAT OF
    SET
    [NMA$C_ENT_LOO]:			! Loop nodes (SHOW only)
	NML_READ_PLURAL (.ENTITY, .READ_RTN, .INDEX,
			 0, 0);

    [NMA$C_ENT_KNO,			! Known nodes
     NMA$C_ENT_ACT,			! Active nodes
     NMA$C_ENT_ADJ]:			! Adjacent nodes
	NML_READ_PLURAL (.ENTITY, .READ_RTN, .INDEX,
			 .NML$GB_ENTITY_FORMAT, 0,
			 .NML$GL_QUALIFIER_PST,
			 .NML$GB_QUALIFIER_FORMAT,
			 NML$AB_QUALIFIER_ID);

    [NMA$C_ENT_ADD]:			! Node is specified by address
	IF .NML$GB_OPTIONS [NMA$V_OPT_PER] THEN
	    NML_READ_PLURAL (.ENTITY, .READ_RTN, .INDEX,
			     2, NML$AB_ENTITY_ID)
	ELSE
	    NML_READ_PLURAL (.ENTITY, .READ_RTN, .INDEX,
			     0, .NML$AB_ENTITY_ID);

    [1 TO 6]:
	NML_READ_PLURAL (.ENTITY, .READ_RTN, .INDEX,
			 .NML$GB_ENTITY_FORMAT,
			 NML$AB_ENTITY_ID);

    [OTHERWISE]:
	NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_NOD); ! Option error
    TES;
END;				! End of NML_READ_NODE

%SBTTL 'NML_READ_EXECUTOR  Read executor parameters'
ROUTINE NML_READ_EXECUTOR (ENTITY, INDEX, READ_RTN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine dispatches to the routine which reads the permanent
!	or volatile data base to get information about the executor node.
!
! INPUTS:
!	ENTITY		The internal NML index for the entity specified in
!			the NICE command.
!	INDEX		Entity information table (in NMLDAT) index code.
!	READ_RTN	Address of routine to perform read requested
!				by NICE message.
!
! IMPLICIT INPUTS:
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
!--

BEGIN

MAP
    NML$GB_ENTITY_FORMAT : BYTE SIGNED;

SELECTONEU .NML$GB_ENTITY_FORMAT OF
    SET
    [NMA$C_ENT_ADD]:			! Node address
	NML_READ_PLURAL (.ENTITY, .READ_RTN, .INDEX);

    [1 TO 6]:				! Node name
	NML_READ_PLURAL (.ENTITY, .READ_RTN, .INDEX);

    [OTHERWISE]:
	NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_NOD); ! Option error
    TES;

END;				! End of NML_READ_EXECUTOR

%SBTTL 'NML_READ_NETWORK  Read X25-Protocol network parameters'
ROUTINE NML_READ_NETWORK (ENTITY, INDEX, READ_RTN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine dispatches to the routine which reads the permanent
!	or volatile data base for X25-Protocol networks.
!
! INPUTS:
!	ENTITY		The internal NML index for the entity specified in
!			the NICE command.
!	INDEX		Entity information table (in NMLDAT) index code.
!	READ_RTN	Address of routine to perform read requested
!				by NICE message.
!
! IMPLICIT INPUTS:
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
!--

BEGIN

MAP
    NML$GB_ENTITY_FORMAT : BYTE SIGNED;

SELECTONEU .NML$GB_ENTITY_FORMAT OF
    SET
    [0]:			! Active network (internal NML-ACP format only)
	NML_READ_PLURAL (.ENTITY, .READ_RTN, .INDEX,
			0, 0,
			0, 0, 0);

    [NMA$C_ENT_KNO]:			! Known entities
	NML_READ_PLURAL (.ENTITY, .READ_RTN, .INDEX,
			.NML$GB_ENTITY_FORMAT, 0,
			0, 0, 0);

    [1 TO 16]:			! Single network
	NML_READ_PLURAL (.ENTITY, .READ_RTN, .INDEX, 
			.NML$GB_ENTITY_FORMAT, NML$AB_ENTITY_ID,
			0, 0, 0);

    [OTHERWISE]:
	NML$ERROR_2 (NMA$C_STS_IDE, .NML$GB_ENTITY_CODE);
    TES;
END;				! End of NML_READ_NETWORK

%SBTTL 'NML_READ_AREA	Read area parameters'
ROUTINE NML_READ_AREA (ENTITY, INDEX, READ_RTN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dispatches to the routine which read the 
!	volatile data base for areas.
!
! INPUTS:
!	ENTITY		The internal NML index for the entity specified in
!			the NICE command: NML$C_AREA
!	INDEX		Entity information table (in NMLDAT) index code.
!	READ_RTN	Address of routine to perform read requested
!				by NICE message.
!
! IMPLICIT INPUTS:
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
!--

BEGIN

MAP
    NML$GB_ENTITY_FORMAT : BYTE SIGNED;

SELECTONEU .NML$GB_ENTITY_FORMAT OF
    SET
    [NMA$C_ENT_KNO,			! Known entities
     NMA$C_ENT_ACT]:			! or active entities
	NML_READ_PLURAL (.ENTITY, .READ_RTN, .INDEX,
			.NML$GB_ENTITY_FORMAT, 0,
			0, 0, 0);	! No qualifiers for areas

    [0]:				! Single entity
	NML_READ_PLURAL (.ENTITY, .READ_RTN, .INDEX,
			0, .NML$AB_ENTITY_ID,
			0, 0, 0);	! No qualifiers for areas

    [OTHERWISE]:
	NML$ERROR_2 (NMA$C_STS_IDE, .NML$GB_ENTITY_CODE);
    TES;
END;				! End of NML_READ_AREA

%SBTTL 'NML_SHOW_LINKS  Show link volatile parameters'
ROUTINE NML_SHOW_LINKS (ENTITY, INDEX, READ_RTN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine shows the specified link parameters in the volatile
!	data base.
!
! INPUTS:
!	ENTITY		The internal NML index for the entity specified in
!			the NICE command.
!	INDEX		Entity information table (in NMLDAT) index code.
!	READ_RTN	Address of routine to perform read requested
!				by NICE message.
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS contains the parse flags.
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
!--

BEGIN

MAP
    NML$GB_ENTITY_FORMAT : BYTE SIGNED;

!
! All functions specifying the link entity must be system-specific.
!

IF .NML$GL_PRS_FLGS [NML$V_PRS_VMS] THEN
    SELECTONEU .NML$GB_ENTITY_FORMAT OF
	SET
	[NMA$C_ENT_KNO]:		! Known
	    NML_READ_PLURAL (.ENTITY,
				.READ_RTN,
				.INDEX,
				NMA$C_ENT_KNO, 0,
				.NML$GL_QUALIFIER_PST,
				.NML$GB_QUALIFIER_FORMAT,
				NML$AB_QUALIFIER_ID);

	[NMA$C_ENT_ADD]:
	    NML_READ_PLURAL (.ENTITY,
				.READ_RTN,
				.INDEX,
				0,
				.(NML$AB_ENTITY_ID)<0,16>);
	TES;

NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_SENT_LNK); ! Option error

END;				! End of NML_SHOW_LINKS

%SBTTL 'NML_READ_PLURAL Read plural entity parameters'
ROUTINE NML_READ_PLURAL (ENT, RTN, INF, PRM2, PRM3, PRM4, PRM5, PRM6) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs initialization for read operations.
!	The NICE framing messages (plural and done) are transmitted and
!	the SHOW or LIST routine is called.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	RTN		Address of routine to be called.
!	INF		Information code (SUMMARY, STATUS, CHARACTERISTICS,
!			or COUNTERS).
!	PRM2 - PRM6	Function-specific routine parameters.
!
! SIDE EFFECTS:
!
!	Several NICE messages are transmitted.
!
!--

BEGIN

MAP
    NML$GB_OPTIONS : BBLOCK [1];

LOCAL
    MSGSIZE;

IF .NML$GB_OPTIONS [NMA$V_OPT_PER] THEN
    !
    ! Open permanent data base file specified for write.
    !
    NML$OPENFILE (.NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID], NMA$C_OPN_AC_RO);
!
! Send success with multiple responses message.
!
NML$BLD_REPLY (UPLIT (0, NMA$C_STS_MOR), MSGSIZE); ! Build message
NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);	       ! Send it
!
! Enable condition handler to allow done message to be sent.
!
LIB$ESTABLISH (NML$MAINHANDLER);
!
! Call entity-specific routine.
!
(.RTN) (.ENT, .INF, .PRM2, .PRM3, .PRM4, .PRM5, PRM6);
!
! Signal done message.
!
LIB$REVERT ();			! Disable condition handler
NML$ERROR_1 (NMA$C_STS_DON);	! Signal no more responses

END;				! End of NML_READ_PLURAL

END					! End of module

ELUDOM
