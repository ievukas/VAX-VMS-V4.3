%TITLE	'X.25 Server Module Parsing'
MODULE NCPSTAMSE (IDENT = 'V04-000',LIST(NOOBJECT)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Control Program (NCP)
!
! ABSTRACT:
!
!	States and data for the parsing of NCP X.25 server module parameters
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Tim Halvorsen, July 1981
!
! MODIFIED BY:
!
!	V03-009	PRD0069		Paul R. DeStefano	24-Feb-1984
!		Accept "KNOWN" as "KNOWN DESTINATIONS".
!		Prompt for destination name when "DESTINATION"
!		parameter is entered without specifying a name.
!
!	V03-008	PRD0060		Paul R. DeStefano	05-Feb-1984
!		Allow OBJECT parameter to accept both name and number.
!
!	V03-007	RPG0007		Bob Grosso		11-Nov-1982
!		Make IPR 132 corrections.
!		Remove node and file name prompt.
!		
!	V03-006	RPG0006		Bob Grosso		15-Sep-1982
!		Flag qualifier for ALL check.
!
!	V03-005	RPG0005		Bob Grosso		08-Sep-1982
!		Change use of HXPS to HEX for CALL VALUE and CALL MASK.
!
!	V03-004	TMH0004		Tim Halvorsen		19-Aug-1982
!		Remove FILE from the list of X25-SERVER wide paramter
!		prompting list, since it's a destination parameter.
!		Fix CALL MASK and CALL VALUE, so that they are sent
!		as HI in the NICE message.
!
!	V03-003	RPG0003		Bob Grosso		03-Aug-1982
!		Prompt for ALL for CLEAR X-S DEST dest.
!		Add State and File.
!
!	V3-002	RPG0002		Bob Grosso		26-Jul-1982
!		Add X29-Server, using common parsing.
!
!	V001	TMH0001		Tim Halvorsen		05-Apr-1982
!		Fix prompting for DESTINATION parameters if none are
!		specified on the command line.
!--

%SBTTL	'Definitions'

!
! INCLUDE FILES:
!

	LIBRARY 'LIB$:NMALIBRY';
	LIBRARY 'LIB$:NCPLIBRY';
	LIBRARY 'SYS$LIBRARY:TPAMAC';

!
! EXTERNAL REFERENCES:
!

	ACT_DFN			! Action routine externals

EXTERNAL
	NCP$GL_QUALPRS;		! Record that a qualifier was present so that
				!  the check for ALL will work correctly

!
! LITERALS
!

LITERAL
	QUALPRESENT = 1;	! flag that a qualifier was present on the command line

%SBTTL	'Set Parameter blocks'

!
!	Set X25-SERVER Parameter Blocks
!

	BUILD_PCL

	(MSE,					! Module X25-SERVER

	DST, TKN,	PCXS_DST, ,

	CTM, NUMW,	PCXS_CTM, ,
	MCI, NUMW,	PCXS_MCI, ,
	NOD, NADR,	PCXS_NOD, ,
	USR, TKN,	PCXS_USR, ,
	PSW, TKN,	PCXS_SPW, ,
	ACC, TKN,	PCXS_ACC, ,
	OBJ, OBJ,	PCXS_OBJ, ,
	PRI, NUMB,	PCXS_PRI, ,
	CMK, HEX,	PCXS_CMK, ,
	CVL, HEX,	PCXS_CVL, ,
	GRP, TKN,	PCXS_GRP, ,
	NUM, TKN,	PCXS_NUM, ,
	SAD, SAD,	PCXS_SAD, ,

	STA, NUMB,	PCXS_STA, ,
	FIL, TKN,	PCXS_FIL, ,

	, END, , ,

	)

	BUILD_PBK

	(MSE,					! Module X25-SERVER

	CTM, NUMW, , ,
	DST, TKN, , ,
	KDS, LITB, NMA$C_ENT_KNO, MSE_DST,	! KNOWN DESTINATIONS
	MCI, NUMW, , ,
	NOD, NADR, , ,
	USR, TKN, , ,
	PSW, TKN, , ,
	ACC, TKN, , ,
	OBJ, OBJ, , ,
	PRI, NUMB, , ,
	CMK, HEX, , ,
	CVL, HEX, , ,
	GRP, TKN, , ,
	NUM, TKN, , ,
	SAD, SAD, , ,

	STAON, LITB, NMA$C_STATE_ON, MSE_STA,
	STAOFF, LITB, NMA$C_STATE_OFF, MSE_STA,
	FIL, TKN, , ,

	)

BIND	PDB$G_MSE_ENT = UPLIT BYTE(0, %ASCIC 'X25-SERVER');

	BUILD_SDB
	(MSE, NMA$C_ENT_MOD, MSE_ENT, MSE)

BIND	PDB$G_M9S_ENT = UPLIT BYTE(0, %ASCIC 'X29-SERVER');

	BUILD_SDB
	(M9S, NMA$C_ENT_MOD, M9S_ENT, MSE)

%SBTTL	'Clear Parameter blocks'

!
!	Clear X25-SERVER Parameter Blocks
!

	BUILD_PCL

	(CSE,					! Module X25-SERVER

	DST, TKN,	PCXS_DST, ,

	CTM, LITB,	PCXS_CTM, ,
	MCI, LITB,	PCXS_MCI, ,
	NOD, LITB,	PCXS_NOD, ,
	USR, LITB,	PCXS_USR, ,
	PSW, LITB,	PCXS_SPW, ,
	ACC, LITB,	PCXS_ACC, ,
	OBJ, LITB,	PCXS_OBJ, ,
	PRI, LITB,	PCXS_PRI, ,
	CMK, LITB,	PCXS_CMK, ,
	CVL, LITB,	PCXS_CVL, ,
	GRP, LITB,	PCXS_GRP, ,
	NUM, LITB,	PCXS_NUM, ,
	SAD, LITB,	PCXS_SAD, ,

	STA, LITB,	PCXS_STA, ,
	FIL, LITB,	PCXS_FIL, ,

	, END, , ,

	)

	BUILD_PBK

	(CSE,					! Module X25-SERVER

	ALL, LITB, 0, VRB_ALL,

	CTM, LITB, 0, ,
	DST, TKN, , ,
	KDS, LITB, NMA$C_ENT_KNO, CSE_DST,	! KNOWN DESTINATIONS
	MCI, LITB, 0, ,
	NOD, LITB, 0, ,
	USR, LITB, 0, ,
	PSW, LITB, 0, ,
	ACC, LITB, 0, ,
	OBJ, LITB, 0, ,
	PRI, LITB, 0, ,
	CMK, LITB, 0, ,
	CVL, LITB, 0, ,
	GRP, LITB, 0, ,
	NUM, LITB, 0, ,
	SAD, LITB, 0, ,

	STA, LITB, 0, ,
	FIL, LITB, 0, ,

	)

	BUILD_SDB

	(CSE, NMA$C_ENT_MOD, MSE_ENT, CSE)

	BUILD_SDB

	(C9S, NMA$C_ENT_MOD, M9S_ENT, CSE)

%SBTTL	'Prompt strings'

!
!	Build prompt strings
!

BIND

	PROMPT_STRINGS
	(MSE,

	DAT, '          (DESTINATION name, or KNOWN): ',
	DST, '         DESTINATION (1-16 characters): ',

	CTM, 'Counter timer        (1-65535 seconds): ',
	MCI, 'Maximum circuits             (1-65535): ',

	ACC, 'Account name         (1-39 characters): ',
	CMK, 'Call mask            (1-32 hex digits): ',
	CVL, 'Call value           (1-32 hex digits): ',
!!	FIL, 'File                    (filename.typ): ',
	GRP, 'Group name           (1-16 characters): ',
!!	NOD, 'Node name         (node-name, address): ',
	NUM, 'Number               (1-16 characters): ',
	OBJ, 'Object                (name or number): ',
	PSW, 'Password             (1-39 characters): ',
	PRI, 'Priority                       (0-255): ',
	SAD, 'Subaddress range               (Range): ',
	STA, 'State                        (ON, OFF): ',
	USR, 'User name            (1-16 characters): ',
	),

	PROMPT_STRINGS
	(CSE,

	DAT, '          (DESTINATION name, or KNOWN): ',
	DST, '         DESTINATION (1-16 characters): ',

	ALL, 'All X.25 server parameters      (Y, N): ',
	ALL2, 'All X.25 server destination parameters  (Y, N): ',

	CTM, 'Counter timer                   (Y, N): ',
	MCI, 'Maximum circuits                (Y, N): ',

	ACC, 'Account name                    (Y, N): ',
	CMK, 'Call mask                       (Y, N): ',
	CVL, 'Call value                      (Y, N): ',
	FIL, 'File                            (Y, N): ',
	GRP, 'Group name                      (Y, N): ',
	NOD, 'Node name                       (Y, N): ',
	NUM, 'Number                          (Y, N): ',
	OBJ, 'Object                          (Y, N): ',
	PSW, 'Password                        (Y, N): ',
	PRI, 'Priority                        (Y, N): ',
	SAD, 'Subaddress range                (Y, N): ',
	STA, 'State                           (Y, N): ',
	USR, 'User name                       (Y, N): ',
	);

%SBTTL	'Declare entry points to TPARSE tables'

!
!	Declare entry points to this TPARSE table
!

$INIT_STATE (NCP$G_STTBL_MSE, NCP$G_KYTBL_MSE);

FORWARD
	ST_M9S: VECTOR [0],	! Set X29-Server
	ST_CSE:	VECTOR [0],	! Clear X25-SERVER
	ST_C9S:	VECTOR [0];	! Clear X29-SERVER

GLOBAL BIND
	NCP$G_STTBL_M9S = ST_M9S,
	NCP$G_KYTBL_M9S = NCP$G_KYTBL_MSE,
	NCP$G_STTBL_CSE = ST_CSE,
	NCP$G_KYTBL_CSE = NCP$G_KYTBL_MSE,
	NCP$G_STTBL_C9S = ST_C9S,
	NCP$G_KYTBL_C9S = NCP$G_KYTBL_MSE;

%SBTTL	'SET X25-SERVER and X29-SERVER Module Parameters'

!
!	SET/DEFINE MODULE X25-SERVER parameter states
!

$STATE	(ST_MSE,
	((ST_MS_COMMON))
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_MSE),
	);


!
!	SET/DEFINE MODULE X29-SERVER parameter states
!

$STATE	(ST_M9S,
	((ST_MS_COMMON))
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_M9S),
	);

!
!	Share common states and data structures for X25-Server and X29-Server
!	X25-Server was here first and the naming convention was not changed to
!	reflect the shared nature of the states.
!
$STATE	(ST_MS_COMMON,
	(TPA$_EOS, ST_MSE_PMT_DAT),
	(TPA$_LAMBDA, ST_MSE_DAT)
	);

!
!	Determine which x25 server sub-database we are talking about
!	(due to grouping restrictions, the command must not mix
!	sub-database parameters).  The sub-database may be either
!	x25 server or destination parameters.
!

$STATE	(ST_MSE_PMT_DAT,
	(TPA$_LAMBDA,, ACT$PRMPT,,, PMT$G_MSE_DAT));

$STATE	(ST_MSE_DAT,		! Determine whether DESTINATION parameters
	('DESTINATION',	ST_MSE_DAT_DST),
	('KNOWN',	ST_MSE_DAT_KWN),
	(TPA$_LAMBDA));				! Else, assume SERVER-wide

!
!	Prompt for normal server parameters
!

$STATE	(,
	(TPA$_EOS),			! Start prompting if EOS
	(TPA$_LAMBDA,ST_MSE_PRC));	! Else, try parsing parameters

	PROMPT_STATES
	(MSE,

	CTM, MCI, STA)

$STATE	(,
	(TPA$_LAMBDA, ST_MSE_DOIT));

!
!	Prompt for destination parameters
!

$STATE	(ST_MSE_DAT_DST,
	(TPA$_LAMBDA));

	COMMAND_PROMPT
	(MSE, DST, NCP$_INVKEY,

	((SE_DEST_NAME),, ACT$SAVPRM, QUALPRESENT, NCP$GL_QUALPRS, PBK$G_MSE_DST));

$STATE	(ST_MSE_PMT_DST,
	(TPA$_EOS),			! Start prompting if EOS
	(TPA$_LAMBDA,ST_MSE_PRC));	! Else, try parsing parameters

	PROMPT_STATES
	(MSE,
	ACC, CMK, CVL, GRP, NUM, OBJ, PSW,
	PRI, SAD, USR)

$STATE	(ST_MSE_DOIT,
	(TPA$_LAMBDA, TPA$_EXIT),
	);

!
!	Dispatch on KNOWN keyword during prompting
!

$STATE	(ST_MSE_DAT_KWN,
	(TPA$_EOS, ST_MSE_PMT_DST, ACT$SAVPRM,,, PBK$G_MSE_KDS),
	('DESTINATIONS', ST_MSE_PMT_DST, ACT$SAVPRM,,, PBK$G_MSE_KDS),
	);


!
!	Dispatch States
!

$STATE	(ST_MSE_PRC,

	((SE_ALL), ST_MSE_DOIT),

	DISPATCH_STATES
	(MSE,

	ACC, 'ACCOUNT',
	CAL, 'CALL',
	CTM, 'COUNTER',
	DST, 'DESTINATION',
	FIL, 'FILE',
	GRP, 'GROUP',
	KWN, 'KNOWN',
	MCI, 'MAXIMUM',
	NOD, 'NODE',
	NUM, 'NUMBER',
	OBJ, 'OBJECT',
	PSW, 'PASSWORD',
	PRI, 'PRIORITY',
	SAD, 'SUBADDRESSES',
	STA, 'STATE',
	USR, 'USER',
	)

	,(TPA$_EOS, ST_MSE_DOIT)
	);


!
!	Dispatch on KNOWN keyword
!

$STATE	(ST_MSE_PRC_KWN,
	((SE_MSE_KWN), ST_MSE_PRC));

$STATE	(SE_MSE_KWN,

	KEYWORD_STATE
	(MSE,

	KDS, 'DESTINATIONS',

	));

!
!	Dispatch on CALL keyword
!

$STATE	(ST_MSE_PRC_CAL,

	DISPATCH_STATES
	(MSE,

	CMK, 'MASK',
	CVL, 'VALUE',

	));

!
!	Dispatch on STATE keyword
!

$STATE	(ST_MSE_STA,

	KEYWORD_STATE
	(MSE,

	STAON, 'ON',
	STAOFF, 'OFF',

	));


!
!	Process states
!

	PROCESS_STATES
	(MSE,

	ACC, ,
	CMK, ,
	CVL, ,
	CTM, 'TIMER',
	DST, ,
	FIL, ,
	GRP, ,
	MCI, 'CIRCUITS',
	NOD, ,
	NUM, ,
	OBJ, ,
	PSW, ,
	PRI, ,
	SAD, ,
	USR, ,
	STA, ,
	)

!
!	Subexpression states
!

	SUB_EXPRESSIONS
	(MSE,

	CTM, TPA$_DECIMAL,
	MCI, TPA$_DECIMAL,
	NOD, (SE_NODE_ID),
	USR, (SE_ACC_USR),
	PSW, (SE_ACC_PSW),
	ACC, (SE_ACC_ACC),
	OBJ, (SE_OBJECT_ID),
	PRI, TPA$_DECIMAL,
	CMK, (SE_HEX_NUM),
	CVL, (SE_HEX_NUM),
	GRP, (SE_GRP_NAME),
	NUM, (SE_DTE_NUMBER),
	SAD, (SE_SUBADR_RANGE),

	FIL, (SE_FILE_ID),

	)

%SBTTL	'CLEAR X25-SERVER Module Parameters'

!
!	CLEAR/PURGE MODULE X25-SERVER parameter states
!

$STATE	(ST_CSE,
	((ST_CS_COMMON))
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_CSE),
	);

!
!	CLEAR/PURGE MODULE X29-SERVER parameter states
!

$STATE	(ST_C9S,
	((ST_CS_COMMON))
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_C9S),
	);


!
!	Share common states and data structures for X25-Server and X29-Server
!	X25-Server was here first and the naming convention was not changed to
!	reflect the shared nature of the states.
!
$STATE	(ST_CS_COMMON,
	(TPA$_EOS, ST_CSE_PMT_DAT),
	(TPA$_LAMBDA, ST_CSE_DAT)
	);

!
!	Determine which x25 server sub-database we are talking about
!	(due to grouping restrictions, the command must not mix
!	sub-database parameters).  The sub-database may be either
!	x25 server or destination parameters.
!

$STATE	(ST_CSE_PMT_DAT,
	(TPA$_LAMBDA,, ACT$PRMPT,,, PMT$G_CSE_DAT));

$STATE	(ST_CSE_DAT,		! Determine whether DESTINATION parameters
	('DESTINATION',	ST_CSE_DAT_DST),
	('KNOWN',	ST_CSE_DAT_KWN),
	(TPA$_LAMBDA));				! Else, assume SERVER-wide

!
!	Prompt for normal server parameters
!

$STATE	(,
	(TPA$_EOS),			! Start prompting if EOS
	(TPA$_LAMBDA,ST_CSE_PRC));	! Else, try parsing parameters

	QUERY_STATES
	(CSE,

	ALL, CTM, FIL, MCI, STA)

$STATE	(,
	(TPA$_LAMBDA, ST_CSE_DOIT));

!
!	Prompt for destination parameters
!

$STATE	(ST_CSE_DAT_DST,
	(TPA$_LAMBDA));

	COMMAND_PROMPT
	(CSE, DST, NCP$_INVKEY,

	((SE_DEST_NAME),, ACT$SAVPRM,,, PBK$G_CSE_DST));

$STATE	(ST_CSE_PMT_DST,
	(TPA$_EOS),			! Start prompting if EOS
	(TPA$_LAMBDA,ST_CSE_PRC));	! Else, try parsing parameters

	QUERY_STATES_S
	(CSE,
	ALL, ALL2,
	ACC, ACC, CMK, CMK, CVL, CVL, GRP, GRP, NOD, NOD, NUM, NUM, 
	OBJ, OBJ, PSW, PSW, PRI, PRI, SAD, SAD, USR, USR)

$STATE	(ST_CSE_DOIT,
	(TPA$_LAMBDA, TPA$_EXIT),
	);

!
!	Dispatch on KNOWN keyword during prompting
!

$STATE	(ST_CSE_DAT_KWN,
	(TPA$_EOS, ST_CSE_PMT_DST, ACT$SAVPRM,,, PBK$G_CSE_KDS),

	('DESTINATIONS', ST_CSE_PMT_DST, ACT$SAVPRM,,, PBK$G_CSE_KDS),
	);


!
!	Dispatch States
!

$STATE	(ST_CSE_PRC,

	DISPATCH_STATES
	(CSE,

	ALL, 'ALL',
	ACC, 'ACCOUNT',
	CAL, 'CALL',
	CTM, 'COUNTER',
	DST, 'DESTINATION',
	FIL, 'FILE',
	GRP, 'GROUP',
	KWN, 'KNOWN',
	MCI, 'MAXIMUM',
	NOD, 'NODE',
	NUM, 'NUMBER',
	OBJ, 'OBJECT',
	PSW, 'PASSWORD',
	PRI, 'PRIORITY',
	SAD, 'SUBADDRESSES',
	STA, 'STATE',
	USR, 'USER',
	)

	,(TPA$_EOS, ST_CSE_DOIT)
	);


!
!	Dispatch on KNOWN keyword
!

$STATE	(ST_CSE_PRC_KWN,
	((SE_CSE_KWN), ST_CSE_PRC));

$STATE	(SE_CSE_KWN,

	KEYWORD_STATE
	(CSE,

	KDS, 'DESTINATIONS',

	));

!
!	Dispatch on CALL keyword
!

$STATE	(ST_CSE_PRC_CAL,

	DISPATCH_STATES
	(CSE,

	CMK, 'MASK',
	CVL, 'VALUE',

	));


!
!	Process states
!

	PROCESS_STATES
	(CSE,

	ALL, ,
	ACC, ,
	CMK, ,
	CVL, ,
	CTM, 'TIMER',
	DST, ,
	FIL, ,
	GRP, ,
	MCI, 'CIRCUITS',
	NOD, ,
	NUM, ,
	OBJ, ,
	PSW, ,
	PRI, ,
	SAD, ,
	STA, ,
	USR, ,

	)


!
!	Subexpression states
!

	SUB_EXPRESSIONS
	(CSE,

	ALL, TPA$_EOS,

	CTM, TPA$_LAMBDA,
	MCI, TPA$_LAMBDA,
	NOD, TPA$_LAMBDA,
	USR, TPA$_LAMBDA,
	PSW, TPA$_LAMBDA,
	ACC, TPA$_LAMBDA,
	OBJ, TPA$_LAMBDA,
	PRI, TPA$_LAMBDA,
	CMK, TPA$_LAMBDA,
	CVL, TPA$_LAMBDA,
	GRP, TPA$_LAMBDA,
	NUM, TPA$_LAMBDA,
	SAD, TPA$_LAMBDA,

	FIL, TPA$_LAMBDA,
	STA, TPA$_LAMBDA,
	)

%SBTTL	'Define Subexpressions'

!
!	Define Subexpressions from Library
!

	SEM_ALL			! All parameter
	SEM_NODE_ID		! Node ID
	SEM_DTE_NUMBER		! DTE call number string
	SEM_FILE_ID		! File spec
	SEM_GRP_NAME		! Group name
	SEM_DEST_NAME		! Destination name
	SEM_SUBADR_RANGE	! Subaddress range
	SEM_ACCESS		! Access control strings
	SEM_HEX_NUM		! Hex strings
	SEM_QUOT_STR		! Quoted string
	SEM_OBJECT_ID		! Object name/number
	SEM_QUERY		! Query state subexpressions

END
ELUDOM
