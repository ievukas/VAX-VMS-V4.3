%TITLE 'EDT$LRES - RESEQUENCE line-mode command'
MODULE EDT$LRES (				! RESEQUENCE line-mode command
		IDENT = 'V04-000'			! File: LRES.BLI Edit: STS1010
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module executes the line mode RESEQUENCE command.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: February 3, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 30-JAN-1981.  This module was created by
!	extracting the routine EDT$$RSEQ_CMD  from the module EXEC.BLI.
! 1-002	- Regularize headers.  JBS 20-Mar-1981
! 1-003	- Use new message codes.  JBS 04-Aug-1981
! 1-004 - Change the count to 48-bits.  SMB 05-Feb-1982
! 1-005 - Pass count by address - use new global for reseq. count printout.  SMB 07-Feb-1982
! 1-006	- Use EDT$$FMT_BUF instead of EDT$$OUT_FMTBUF.  JBS 05-Jul-1982
! 1-007 - Make edt$$tst_eob in line. STS 22-Sep-1982
! 1-008 - Modify to use new 48 bit macro. STS 01-Oct-1982
! 1-009 - Put edt$$rng_posfrst in line. STS 11-Oct-1982
! 1-010 - Convert to new compare macro. STS 20-Oct-1982
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$RSEQ_CMD : NOVALUE;			! Process the RESEQUENCE command

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$RSEQ_CMD  - RESEQUENCE line-mode command'

GLOBAL ROUTINE EDT$$RSEQ_CMD 			! RESEQUENCE line-mode command
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Command processing routine for RESEQUENCE.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$A_CUR_BUF
!	EDT$$L_LNO5
!	EDT$$Z_RNG_ORIGPOS
!	EDT$$A_WK_LN
!	EDT$$A_EXE_CURCMD
!	EDT$$G_EXE_SBITS
!	EDT$$Z_EXE_SBLK
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_CUR_BUF
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$FMT_STRCNT : NOVALUE,
	EDT$$FMT_CRLF,				! Terminate an output line
	EDT$$FMT_MSG,
	EDT$$FMT_STR,
	EDT$$NXT_LNRNG,
    	EDT$$RNG_REPOS,
	EDT$$RD_PRVLN,
	EDT$$RD_CURLN,
	EDT$$RD_NXTLN,
	EDT$$RSEQ;

    EXTERNAL
	EDT$$L_WK_RESCNT : LN_BLOCK,		! Actual count of lines resequenced
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,
	EDT$$L_LNO_ZERO : LN_BLOCK,
	EDT$$L_LNO5 : LN_BLOCK,
	EDT$$L_LNO0 : LN_BLOCK,
	EDT$$Z_RNG_ORIGPOS : POS_BLOCK,
    	EDT$$Z_RNG_SAVPOS : POS_BLOCK,
	EDT$$A_WK_LN : REF LIN_BLOCK,
	EDT$$A_EXE_CURCMD : REF NODE_BLOCK,	! Pointer to the current command.
    	EDT$$G_RNG_FRSTLN,
	EDT$$G_EXE_SBITS,			! The options switches.
    	EDT$$Z_EOB_LN,
	EDT$$Z_EXE_SBLK : REF NODE_BLOCK;	! The option switch value block.

    MESSAGES ((RANSPCSEQ));

    LOCAL
	COUNT : LN_BLOCK,			! The number of lines in the range.
	RANGE : REF NODE_BLOCK,			! Address of the range block
	SWB : NODE_BLOCK;			! Address of the switch value block.

!+
! Check for the /SEQ option.  If not specified, then default the values
! to 1 and 1.
!-

    IF ( NOT .EDT$$G_EXE_SBITS<OPB_SEQ>)
    THEN
	BEGIN
	EDT$$Z_EXE_SBLK = SWB;
	MOVELINE (EDT$$L_LNO5, SWB [SW_VAL1]);
	MOVELINE (EDT$$L_LNO5, SWB [SW_VAL2]);
	END;

!+
! Check for the null range, making it WHOLE.
!-
    RANGE = .EDT$$A_EXE_CURCMD [RANGE1];

    IF (.RANGE [RAN_TYPE] EQL RAN_NULL) THEN RANGE [RAN_TYPE] = RAN_WHOLE;

!+
! Position to the first line of the range.
!-

    EDT$$G_RNG_FRSTLN = 1;
    EDT$$CPY_MEM(POS_SIZE, .EDT$$A_CUR_BUF, EDT$$Z_RNG_ORIGPOS);
    IF ( NOT EDT$$RNG_REPOS (.RANGE)) THEN RETURN;

!+
! If there is a preceding line, then make sure the starting line number
! is okay.
!-

    IF EDT$$RD_PRVLN ()
    THEN
	BEGIN

	IF (CMPLNO (EDT$$A_WK_LN [LIN_NUM], EDT$$Z_EXE_SBLK [SW_VAL1]) GEQ 0)
	THEN
	    BEGIN
	    EDT$$FMT_MSG (EDT$_RANSPCSEQ);
	    EDT$$CPY_MEM (POS_SIZE, EDT$$Z_RNG_ORIGPOS, .EDT$$A_CUR_BUF);
	    EDT$$RD_CURLN ();
	    RETURN;
	    END;

	EDT$$RD_NXTLN ();
	END;

!+
! Count the lines in the range.
!-
    MOVELINE (EDT$$L_LNO_ZERO, COUNT);

    WHILE (EDT$$NXT_LNRNG (0) AND (.EDT$$A_WK_LN NEQA EDT$$Z_EOB_LN )) DO
	ADDLINE (NUMBER_ONE,COUNT);

!+
! Reposition to the first line of the range.
!-
    	EDT$$CPY_MEM(POS_SIZE, EDT$$Z_RNG_SAVPOS, .EDT$$A_CUR_BUF);
    	EDT$$RD_CURLN();
!+
! Do the resequence.
!-
    EDT$$RSEQ (COUNT, EDT$$Z_EXE_SBLK [SW_VAL1], EDT$$Z_EXE_SBLK [SW_VAL2]);
!+
! Reposition to our place before starting the command.
!-
    EDT$$CPY_MEM (POS_SIZE, EDT$$Z_RNG_ORIGPOS, .EDT$$A_CUR_BUF);
    EDT$$RD_CURLN ();
!+
! And display the number of lines processed.
!-
    EDT$$FMT_STRCNT (EDT$$L_WK_RESCNT, UPLIT (%STRING (' line')), 5);
    EDT$$FMT_STR (UPLIT (%STRING (' resequenced')), 12);
    EDT$$FMT_CRLF ();
    END;					! of routine EDT$$RSEQ_CMD

!<BLF/PAGE>

END						! of module EDT$LRES

ELUDOM
