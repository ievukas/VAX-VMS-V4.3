MODULE CHKPRO (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine checks the volume and file protection to see if the
!	user is authorized to perform the intended operation.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  2-May-1977  10:45
!
! MODIFIED BY:
!
!	V03-002	LMP0221		L. Mark Pilant,		29-Mar-1984  6:50
!		Change UCB$L_OWNUIC to ORB$L_OWNER and UCB$W_VPROT to
!		ORB$W_PROT.  Also, change over to the new CHKPRO interface.

!
!	V03-001	LMP0154		L. Mark Pilant,		13-Sep-1983  15:29
!		Re-write to use the common protection checking routine.
!
!	A0102	ACG0089		Andrew C. Goldstein,	6-Dec-1979  17:43
!		Fix uninitialized pointer
!
!	A0101	ACG0047		Andrew C. Goldstein,	8-Aug-1979  22:02
!		Add SYSPRV privilege, protection interface changes
!
!	A0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  20:02
!	Previous revision history moved to F11A.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

FORWARD ROUTINE
	CHECK_PROTECT,
	CHECK_PROT;

GLOBAL ROUTINE CHECK_PROTECT (ACCESS, HEADER, FCB, ALT_ACCESS, REQUIRED) =

BEGIN
LOCAL	STATUS;
STATUS = (IF ACTUALCOUNT GEQU 5
	THEN KERNEL_CALL (CHECK_PROT, .ACCESS, .HEADER, .FCB, .ALT_ACCESS, .REQUIRED)
	ELSE KERNEL_CALL (CHECK_PROT, .ACCESS, .HEADER, .FCB, 0, 0)
	);
IF NOT .STATUS THEN ERR_EXIT (.STATUS) ELSE RETURN .STATUS;
END;

ROUTINE CHECK_PROT (ACCESS, HEADER, FCB, ALT_ACCESS, REQUIRED) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks the volume and file protection to see if the
!	user is authorized to perform the intended operation.
!
! CALLING SEQUENCE:
!	CHECK_PROTECTION (ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)
!
! INPUT PARAMETERS:
!	ARG1: access mode
!		READ_ACCESS	= 0
!		WRITE_ACCESS	= 1
!		DELETE_ACCESS	= 2
!		CREATE_ACCESS	= 3
!		RDATT_ACCESS	= 4
!		WRATT_ACCESS	= 5
!	ARG2: address of file header, if any
!	ARG3: address of FCB or 0
!	ARG4: (optional) alternate access mask to test for
!	ARG5: (optional) 1 if alternate access if required
!			 0 if optional
!
! IMPLICIT INPUTS:
!	CURRENT_UCB: address of device UCB
!	IO_PACKET: I/O packet of this request
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	HEADER		: REF BBLOCK,	! File header arg
	FCB		: REF BBLOCK;	! FCB arg

LINKAGE
	L_CHKPRO_INT	= JSB (REGISTER = 0, REGISTER = 1,
			       REGISTER = 2, REGISTER = 3);

LABEL
	CHECK_BLOCK;			! body of a single check attempt

LOCAL
	STATUS,				! Local routine exit status
	FILE_ACCESS_BITS: BBLOCK [1],	! Actual access mask to file
	PROTECTION,			! Protection code of file
	OWNER_UIC,			! File owner UIC
	SEG_NUMBER,			! Segment number of file header
	CHPCTL		: BBLOCK [CHPCTL$C_LENGTH],	! CHKPRO control block
	CHPRET		: BBLOCK [CHPRET$C_LENGTH],	! CHKPRO return arg block
	ARB		: REF BBLOCK,	! Agent's rights block
	ORB		: REF BBLOCK,	! Object's rights block
	LOCAL_ORB	: BBLOCK [ORB$C_LENGTH],	! Needed when no FCB given
	MAP_AREA	: REF BBLOCK,	! Address of header map area
	PRIVS_USED	: BBLOCK [4];	! Privileges used

BIND					! Access mode tables
					! Write operation on volume
	WRITE_OP	= UPLIT (
			ARM$M_WRITE OR ARM$M_DELETE OR ARM$M_CONTROL),

					! no READALL privilege for operation
	NOREADALL	= UPLIT (
			ARM$M_WRITE OR ARM$M_DELETE),

					! Check for zero file segment number
	EXT_HEADER	= UPLIT BYTE (
			%B'100111'
			) : BITVECTOR,

					! Volume access bits
	VOL_ACCESS	= UPLIT BYTE (
			ARM$M_READ,
			ARM$M_READ OR ARM$M_WRITE,
			ARM$M_READ OR ARM$M_DELETE,
			ARM$M_READ OR ARM$M_WRITE,
			ARM$M_READ,
			ARM$M_READ OR ARM$M_WRITE
			) : VECTOR [,BYTE],

					! File access bits
	FILE_ACCESS	= UPLIT BYTE (
			ARM$M_READ,
			ARM$M_READ OR ARM$M_WRITE,
			ARM$M_DELETE,
			ARM$M_WRITE,
			ARM$M_READ,
			ARM$M_CONTROL
			) : VECTOR [,BYTE];


EXTERNAL
	CLEANUP_FLAGS	: BITVECTOR,	! Cleanup action and status flags
	CURRENT_UCB	: REF BBLOCK,	! Device UCB
	PRIMARY_FCB	: REF BBLOCK,	! Primary FCB address
	IO_PACKET	: REF BBLOCK,	! I/O packet of this request
	LOCAL_ARB	: BBLOCK;	! local copy of caller's ARB

EXTERNAL ROUTINE
	ALLOCATE,			! Get a block of non-paged pool
	DEALLOCATE,			! Release a block of non-paged pool
	EXE$CHKPRO_INT	: L_CHKPRO_INT ADDRESSING_MODE (GENERAL);
					! General purpose protection checker

! Initialize the CHKPRO control block and the return arg block.

CH$FILL (0, CHPCTL$C_LENGTH, CHPCTL);
CH$FILL (0, CHPRET$C_LENGTH, CHPRET);
CHPRET[CHPRET$L_PRIVS_USED] = PRIVS_USED;

! Derive the composite file access mask from the access type and
! the alternate access mask.
!

FILE_ACCESS_BITS = .FILE_ACCESS[.ACCESS] OR .ALT_ACCESS;

! We try the whole operation twice: once with the added alternate access
! mask, and if that fails, once without.
!

WHILE 1 DO
    BEGIN
    CHECK_BLOCK: BEGIN			! scope of one try

! If the requested operation is a write operation, check to make
! sure that the volume is not software write locked.

    IF (.WRITE_OP AND .FILE_ACCESS_BITS) NEQ 0
    AND .BBLOCK [CURRENT_UCB[UCB$L_DEVCHAR], DEV$V_SWL]
    THEN
	BEGIN
	STATUS = SS$_WRITLCK;
	LEAVE CHECK_BLOCK;
	END;

! Get the address of the Agent's Rights Block (ARB) and Object's Rights Block
! (ORB).

    ARB = .IO_PACKET[IRP$L_ARB];
    ORB = .CURRENT_UCB[UCB$L_ORB];

! Now check the volume protection to make sure that the requested operation
! is allowed.  If the attempted access is denied, return with the error.

    CHPCTL[CHPCTL$L_ACCESS] = .VOL_ACCESS[.ACCESS];
    IF .FILE_ACCESS_BITS[ARM$V_WRITE]
    OR .FILE_ACCESS_BITS[ARM$V_CONTROL]
    THEN BBLOCK [CHPCTL[CHPCTL$L_ACCESS], ARM$V_WRITE] = 1;
    IF .FILE_ACCESS_BITS[ARM$V_DELETE]
    THEN BBLOCK [CHPCTL[CHPCTL$L_ACCESS], ARM$V_DELETE] = 1;
    BBLOCK [CHPCTL[CHPCTL$L_FLAGS], CHP$V_READ] = 1;
    IF (.WRITE_OP AND .FILE_ACCESS_BITS) NEQ 0
    THEN BBLOCK [CHPCTL[CHPCTL$L_FLAGS], CHP$V_WRITE] = 1;
    IF (.NOREADALL AND .FILE_ACCESS_BITS) EQL 0
    THEN BBLOCK [CHPCTL[CHPCTL$L_FLAGS], CHP$V_USEREADALL] = 1;

! Items to return

    PRIVS_USED = 0;

    STATUS = EXE$CHKPRO_INT (.ARB, .ORB, CHPCTL, 0);
    IF NOT .STATUS
    THEN LEAVE CHECK_BLOCK;

! If there is no FCB specified and no header given, it is a volume access
! check.  In which case, control may be returned now.

    IF .FCB EQL 0 AND .HEADER EQL 0
    THEN LEAVE CHECK_BLOCK;

! Get the protection, owner, and segment number for the desired header.

    IF .FCB NEQ 0
    THEN
	BEGIN
	ORB = FCB[FCB$R_ORB];

! Note that control access is alwars denied for group and world access.

	LOCAL_ORB[ORB$L_GRP_PROT] = ORB[ORB$L_GRP_PROT];
	LOCAL_ORB[ORB$L_WOR_PROT] = ORB[ORB$L_WOR_PROT];
	BBLOCK [ORB[ORB$L_GRP_PROT], ARM$V_CONTROL] = 1;
	BBLOCK [ORB[ORB$L_WOR_PROT], ARM$V_CONTROL] = 1;
	SEG_NUMBER = .FCB[FCB$W_SEGN];
	END
    ELSE
	BEGIN
	CH$FILL (0, ORB$C_LENGTH, LOCAL_ORB);
	ORB = LOCAL_ORB;
	ORB[ORB$W_SIZE] = ORB$C_LENGTH;
	ORB[ORB$B_TYPE] = DYN$C_ORB;
	ORB[ORB$V_PROT_16] = 1;
	ORB[ORB$W_PROT] = .HEADER[FH1$W_FILEPROT];
	ORB[ORB$W_UICMEMBER] = .HEADER[FH1$B_UICMEMBER];
	ORB[ORB$W_UICGROUP] = .HEADER[FH1$B_UICGROUP];
	MAP_AREA = .HEADER + .HEADER[FH1$B_MPOFFSET]*2;
	SEG_NUMBER = .MAP_AREA[FM1$B_EX_SEGNUM];
	END;

! Next, if the operation is on an extension header, make sure that only the
! system is allowed access for most operations.

    IF .EXT_HEADER[.ACCESS]
    THEN
	BEGIN
	IF .SEG_NUMBER GTR 0 AND NOT .CLEANUP_FLAGS[CLF_SYSPRV]
	THEN
	    BEGIN
	    STATUS = SS$_NOPRIV;
	    LEAVE CHECK_BLOCK;
	    END;
	END;

! Now check the access requested to determine if access is to be granted or
! denied.

    CHPCTL[CHPCTL$L_ACCESS] = .FILE_ACCESS_BITS;
    PRIVS_USED = 0;

    STATUS = EXE$CHKPRO_INT (.ARB, .ORB, CHPCTL, CHPRET);

! Control implies read attribute access. The protection check needs
! to be retried in this case.
!

    IF NOT .STATUS
    THEN
	BEGIN
	IF .ACCESS EQL RDATT_ACCESS
	THEN
	    BEGIN
	    BBLOCK [CHPCTL[CHPCTL$L_ACCESS], ARM$V_READ] = 0;
	    BBLOCK [CHPCTL[CHPCTL$L_ACCESS], ARM$V_CONTROL] = 1;
	    PRIVS_USED = 0;
	    STATUS = EXE$CHKPRO_INT (.ARB, .ORB, CHPCTL, CHPRET);
	    END;
	END;

! If we just tried a protection check with alternate access and it
! failed, retry it with just the normal access. Otherwise, we are
! done.
!

    END;					! end of block CHECK_BLOCK

    IF .STATUS
    OR .REQUIRED
    OR .FILE_ACCESS_BITS EQL .FILE_ACCESS[.ACCESS]
    THEN EXITLOOP;

    FILE_ACCESS_BITS = .FILE_ACCESS[.ACCESS];
    END;					! end of retry loop

! Check if the alternate access check failed. If so, return alternate
! success status.
!

IF .STATUS
AND .ALT_ACCESS NEQ 0
AND .FILE_ACCESS_BITS EQL .FILE_ACCESS[.ACCESS]
THEN STATUS = SS$_NOTALLPRIV;

RETURN .STATUS

END;						! End of routine CHECK_PROTECT

END
ELUDOM
