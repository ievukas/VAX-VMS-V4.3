MODULE STR$FIND_FIRST_SUBSTRING (! Find first substring (in list of 
				 ! substrings) occuring in a given 
				 ! string.

		IDENT = '1-002'	! File: STRFINDSB.B32  Edit: RKR1002

		   ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT: This module contains a procedure to find the first substring
!	(in a provided list of substrings) occuring in a given string.
!
! ENVIRONMENT: User mode, AST reeentrant
!
! AUTHOR: R. Reichert, CREATION DATE: 11-AUG-1982
!
! MODIFIED BY:
!
! 1-001	- Original. RKR 11-AUG-1982.
! 1-002 - Code improvements.  RKR 24-NOV-1982.
!--
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!
REQUIRE 'RTLIN:STRLNK';		! Linkage to STR$ANALYZE_SDESC_R1
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$FIND_FIRST_SUBSTRING ;

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECTS code
REQUIRE 'RTLIN:STRMACROS';	! use string macros to write code
LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbols

!
! MACROS: NONE
!

!
! EQUATED SYMBOLS: NONE
!

!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (STR);

!
! OWN STORAGE: NONE
!

!
! EXTERNAL REFERENCES
!
EXTERNAL LITERAL
    STR$_WRONUMARG ;		! Wrong number of arguments

GLOBAL ROUTINE STR$FIND_FIRST_SUBSTRING ( ! Find first substring (in
					  ! list of substrings)
					  ! occuring in the given string.

			    STRING,  ! pointer to string descriptor
			    INDEX,   ! Position in which match was found
			    SUB_STRING_INDEX, ! Which substring was found
			    SUB_STRING1 ! pointer to first substring

			   ) : =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine finds the first occurrence of any of a number of
! substrings in a given string.  The given string is searched from left to
! right, character position by character position, against each of the 
! provided substrings in the order provided.  This is repeated until a 
! first match is made against one of the substrings.
!	This process is repeated until a match is found or the given
! string is exhausted.  If a match is found, the position within STRING
! where the match took place is returned in INDEX and SUB_STRING_INDEX 
! is set to the ordinal number of the matching sub_string.  If no match
! is found, both INDEX and SUB_STRING_INDEX are 0.
!	Note: behavior for zero-length strings:
! STRING length	  Nth-substring length	INDEX	SUB_STRING_INDEX  STATUS
! -------------   --------------------  -----   ----------------  ------
!	0		non-zero	  0		0	     0
!   non-zero		   0		  1		N	     1
!	0		   0		  1		N	     1
!
!
! CALLING SEQUENCE:
!
!	status.wlc.v = STR$FIND_FIRST_SUBSTRING ( STRING.rt.dx, 
!						  INDEX.wl.r,
!						  SUB_STRING_INDEX.wl.r,
!						  SUB_STRING1.rt.dx
!						  [,SUB_STRING2.rt.dx ]
!							...
!						  [,SUB_STRINGN.rt.dx ]
!
! FORMAL PARAMETERS:
!
!	STRING.rt.dx		pointer to string descriptor
!
!	INDEX.wl.r		Position within STRING where a match was
!				found, else 0.
!
!	SUB_STRING_INDEX.wl.r	Ordinal number of SUB_STRING that
!				matched ( 1 for 1st, 2 for 2nd, etc.)
!				else 0.
!
!	SUB_STRING1.rt.dx	First specified sub_string to be found
!				in STRING.
!
!	[SUB_STRING2.rt.dx ]	Optional.  One or more additional
!				sub_strings to take part in the search.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE STATUS:
!
!	1			If a match was found.
!	0			If no match was found.
!
! SIDE EFFECTS:
!
!	May signal STR$_ILLSTRCLA on bad string class.
!	           STR$_WRONUMARG if no substrings supplied.
!
!--
    BEGIN

    MAP STRING: REF BLOCK [ , BYTE] ;

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER ;

    LOCAL
	FIRST_OCCURING,			! Ordinal number of substring
					! that occurs earliest in
					! string (so far).
	LOWEST_INDEX,			! Address within string where
					! FIRST_OCCURRING substring
					! starts (so far)
	STR_LENGTH,			! Length of given STRING
	STR_ADDRESS ;			! Starting addr of given STRING

!+
! See if any substrings were supplied and signal if not.
!-
    IF ACTUALCOUNT () LSS 4
    THEN
	BEGIN		! Not enough arguments, no substrings supplied
	!+
	! Build a local fixed-length descriptor pointing to name of this
	! routine and use it to signal STR$_WRONUMARG.
	!-
	LOCAL
	    ROUT_NAME_DESC : $STR$DESCRIPTOR;

	ROUT_NAME_DESC [DSC$W_LENGTH] = 24 ;
	ROUT_NAME_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	ROUT_NAME_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	ROUT_NAME_DESC [DSC$A_POINTER] = UPLIT 
				(%ASCII'STR$FIND_FIRST_SUBSTRING');
	SIGNAL_STOP (STR$_WRONUMARG, 2, ACTUALCOUNT (), ROUT_NAME_DESC);
	END;		! Not enough arguments, no substrings supplied

!+
! Calc. length and starting address of given string
!-
    $STR$GET_LEN_ADDR ( STRING, STR_LENGTH, STR_ADDRESS ) ;

    LOWEST_INDEX = .STR_ADDRESS +.STR_LENGTH ; ! To impossibly high value

    FIRST_OCCURING = 0;	! Set to none
    INCR I FROM 4 TO ACTUALCOUNT ()
    DO
	BEGIN	! Search loop
	LOCAL
	    PTR,		! Pointer returned by CH$FIND_SUB
	    SUB_LENGTH,		! Length of nth substring
	    SUB_ADDRESS;	! Address of nth substring

	BIND
	    NTH_PARAMETER = ACTUALPARAMETER (.I) : BLOCK [,BYTE];

 	$STR$GET_LEN_ADDR ( NTH_PARAMETER, SUB_LENGTH, SUB_ADDRESS);

	IF .SUB_LENGTH EQL 0
	THEN
	    BEGIN	! Force to look like found
	    !+
	    ! If we are about to look up a null string, this one is
	    ! guaranteed to be the winner since a null string is
	    ! defined to be found anywhere -- in particular in the
	    ! first byte position.  Force an exit at this point.
	    !-
	    .INDEX = 1 ;		! Position 1
	    .SUB_STRING_INDEX = .I -3 ;  ! This substring
	    RETURN (1);			 ! Return success
	    END		! Force to look like found
	ELSE
	    BEGIN	! Use MATCHC
	    IF (PTR = CH$FIND_SUB ( .STR_LENGTH, .STR_ADDRESS,
				    .SUB_LENGTH, .SUB_ADDRESS)) NEQ 0
	    THEN
		BEGIN	! Found a new contender for first
		IF .PTR LSS .LOWEST_INDEX
		THEN
		    BEGIN	! Found an earlier
		    FIRST_OCCURING = .I - 3 ;   ! Record which substring
		    LOWEST_INDEX = .PTR ;	! Remember its address
		    END;	! Found an earlier
		END;	! Found a new contender for first
	    END;	! Use MATCHC
	END;	! Search loop

!+
! As we exit from the loop above, FIRST_OCCURING is the ordinal number
! of the substring that appears earliest in STRING.  LOWEST_INDEX is
! address within STRING where FIRST_OCCURING starts.
!-
    IF .FIRST_OCCURING EQL 0
    THEN
	BEGIN	! No matches found
	.INDEX = 0;
	.SUB_STRING_INDEX = 0;
	RETURN (0);
	END;	! No matches found

    .SUB_STRING_INDEX = .FIRST_OCCURING ;
    .INDEX = .LOWEST_INDEX - .STR_ADDRESS + 1;
    RETURN (1);
    END ;			! Procedure STR$FIND_FIRST_SUBSTRING

END				!End of module
ELUDOM
