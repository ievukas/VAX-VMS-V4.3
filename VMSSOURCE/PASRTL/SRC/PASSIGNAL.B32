MODULE PAS$$SIGNAL ( %TITLE 'Signal I/O errors'
		IDENT = '1-001'			! File: PASSIGNAL.B32 Edit: SBL1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains procedures which are called by the
!	VAX-11 Pascal Run-Time Library to signal error conditions.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
!--


%SBTTL 'Declarations'
!
! PROLOGUE  DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Linkages, externals, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$$SIGNAL: CALL_SIGNAL NOVALUE,		! Signals I/O error
    PAS$$BUGCHECK: NOVALUE;			! Signals PAS$_BUGCHECK

!
! MACROS:
!

!+
! Macros to read and write longwords that use autoincrementing.
!-

MACRO
    RLONG_A (src) = (src=.src+4; .(.src-4)<0,32>) %,
    WLONG_A (src,dst) = (dst=.dst+4; (.dst-4)<0,32>=src) %;

!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE

%SBTTL 'PAS$$SIGNAL - Signal PAS$_ERRACCFIL'
GLOBAL ROUTINE PAS$$SIGNAL (			! Signal I/O error
	PFV: VOLATILE REF $PAS$PFV_FILE_VARIABLE, ! File variable
    	MESSAGES: VECTOR [, LONG]		! Messages to signal
    ) : CALL_SIGNAL NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure is called by the Run-Time Library when it wishes
!	to signal an error during a Pascal I/O operation.  It adds
!	to the message the file "variable" name, filename, and
!	RMS statuses, if any.
!
! CALLING SEQUENCE:
!
!	CALL PAS$$SIGNAL (PFV.mr.r, 
!		MESSAGE1.rw.v [,ARGCNT1.rl.v [,FAOARGS.rz.z...]]
!		[, MESSAGE2.rlc.v, FAOCNT2.rl.v [, FAOARGS.rz.z...]])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed in R6.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	MESSAGE1	- The first message which gives more detail about the
!			  error.  This may be one of the PAS$K_xxx symbols
!			  which correspond to a PAS$_xxx I/O error message, in
!			  which case it is expanded into the full 32-bit form.
!
!	FAOCNT1		- The count of FAO arguments for MESSAGE1, if not zero.
!			  If zero, the RMS STS and STV are taken from the RAB
!			  or FAB.
!
!	FAOARG1		- The first FAO argument for MESSAGE1, if any, etc.
!
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	FCB$L_STATUS is set to the STATUS number of the error, unless
!	there is no FCB, in which case the STATUS number is stored
!	in PFV [PFV$L_STATUS];
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	Message indicated by caller
!
!--

    BEGIN

    LOCAL
	PFD: REF $PAS$PFD_FILE_DESCRIPTOR,	! Pascal File Descriptor
	MSG_PTR: REF VECTOR [, LONG],		! Pointer to MESSAGE_LIST
	ARG_PTR: REF VECTOR [, LONG],		! Pointer to argument list
	FILENAME_DSC: BLOCK [8, BYTE],		! Filename descriptor
	MESSAGE_LIST: VECTOR [20];		! Argument list to LIB$SIGNAL

    BIND
	PRIMARY_MESSAGE = MESSAGE_LIST [1]: BLOCK [4, BYTE];

    BUILTIN
	ACTUALCOUNT,
	CALLG;

    EXTERNAL ROUTINE
	LIB$SIGNAL;		! Can't use SIGNAL here

    !+
    ! Expand the first message from the PAS$K_value to the PAS$_ value if
    ! necessary.  Store the primary message in the message list.
    !-

    IF .MESSAGES [0] LEQU 65535	! Less than a word?
    THEN
	BEGIN
	PRIMARY_MESSAGE = PAS$_BASE;			! Get base message
	PRIMARY_MESSAGE = .PRIMARY_MESSAGE + (.MESSAGES [0]^3);	! Insert message number
	END
    ELSE
	PRIMARY_MESSAGE = .MESSAGES [0];		! Get full message

    !+
    ! Determine the number of signal arguments.  If we have more than one
    ! argument, the second argument is the count of additional FAO arguments
    ! for the first message.  Add two for possible RMS messages, plus the three
    ! implicit arguments for the first message.
    !-

    IF ACTUALCOUNT () GTRU 1
    THEN
        BEGIN
	MESSAGE_LIST [0] = ACTUALCOUNT () + 3;	! Total signal args
	MESSAGE_LIST [2] = 3 + .MESSAGES [1];	! FAO count for primary message
	MESSAGE_LIST [3] = PFV [PFV$R_PFV];	! PFV address goes here
	ARG_PTR = MESSAGES [2];			! Start of secondary arguments
	MSG_PTR = MESSAGE_LIST [4];		! Next place in MESSAGE_LIST

	!+
	! Move extra FAO arguments for primary message, if any.
	!-

	DECR I FROM (.MESSAGE_LIST [2] - 3) TO 1 DO
	    WLONG_A (RLONG_A (ARG_PTR), MSG_PTR);	! Copy an item
	END
    ELSE
	BEGIN
	MESSAGE_LIST [0] = 5;			! Total signal args
	MESSAGE_LIST [2] = 3;			! FAO count for primary message
	MESSAGE_LIST [3] = PFV [PFV$R_PFV];	! PFV address goes here
	MSG_PTR = MESSAGE_LIST [4];		! Next place in MESSAGE_LIST
	END;

    !+
    ! Get PFD address.  Take care that we have the "absolute" address and
    ! not the relative displacement!
    !-

    IF .PFV [PFV$V_RELPFD]	! Is it relative?
    THEN
	BEGIN
	!+
	! The PFD pointer in the PFV was self-relative when we
	! started - but it might not be now.  Fetch it, then test
	! again.  If RELPFD is still clear, then what we have really
	! is an offset.  If it is now set, get the now-absolute address
	! from the PFV.
	!-

	PFD = .PFV [PFV$A_PFD] + .PFV;	! Resolve address
	IF .PFV [PFV$V_RELPFD]	! Was it set in the meantime?
	THEN
	    PFD = .PFV [PFV$A_PFD];
	END
    ELSE
	PFD = .PFV [PFV$A_PFD];	! Get absolute address

    !+
    ! File variable name is in PFD.  If name has zero length, substitute a
    ! dummy name.
    !-

    IF .PFD [PFD$T_NAME] GTRU 0		! Name specified?
    THEN
	WLONG_A (PFD [PFD$T_NAME], MSG_PTR)	! Counted string
    ELSE
	WLONG_A (UPLIT BYTE (%CHARCOUNT('-unnamed-'), '-unnamed-'), MSG_PTR);

    !+
    ! See if we have a filename.  If so, add it to the message.
    ! At the same time, store the error number in the FCB.
    !-

    FILENAME_DSC [DSC$W_LENGTH] = 0;		! Initially, no filename
    WLONG_A (FILENAME_DSC, MSG_PTR);		! Address of descriptor

    IF .PFV [PFV$V_FCB_VALID] 
    THEN
	BEGIN
	LOCAL
	    FCB: REF $PAS$FCB_CONTROL_BLOCK,	! File control block
	    FAB: REF BLOCK [, BYTE],		! RMS FAB
	    NAM: REF BLOCK [, BYTE];		! RMS NAM

	BIND
	    RAB = FCB: REF BLOCK [, BYTE];	! RMS RAB

	FCB = .PFV [PFV$A_FCB];			! Get FCB address

	IF NOT .FCB [FCB$V_STRING]
	THEN
	    BEGIN
	    FAB = .RAB [RAB$L_FAB];		! Get FAB address
	    NAM = .FAB [FAB$L_NAM];		! Get NAM address
	    IF .NAM [NAM$B_RSL] GTRU 0		! Do we have an RSN?
	    THEN
		BEGIN
		FILENAME_DSC [DSC$W_LENGTH] = .NAM [NAM$B_RSL];
		FILENAME_DSC [DSC$A_POINTER] = .NAM [NAM$L_RSA];
		END
	    ELSE IF .NAM [NAM$B_ESL] GTRU 0	! Do we have an ESN?
	    THEN
		BEGIN
		FILENAME_DSC [DSC$W_LENGTH] = .NAM [NAM$B_ESL];
		FILENAME_DSC [DSC$A_POINTER] = .NAM [NAM$L_ESA];
		END
	    ELSE IF .FAB [FAB$B_FNS] GTRU 0	! Do we have a filename?
	    THEN
		BEGIN
		FILENAME_DSC [DSC$W_LENGTH] = .FAB [FAB$B_FNS];
		FILENAME_DSC [DSC$A_POINTER] = .FAB [FAB$L_FNA];
		END;
	    END;

	!+
	! If we have neither an RSN or a filename, we'll use a null string
	! by default.
	!-

	!+
	! Store error number in FCB so that STATUS can return it.
	!-

	FCB [FCB$L_STATUS] = .PRIMARY_MESSAGE [STS$V_CODE] - PAS$$K_MSGV2LO;
	END
    ELSE
	!+
	! Store error number in PFV.
	!-
	PFV [PFV$L_STATUS] = .PRIMARY_MESSAGE [STS$V_CODE] - PAS$$K_MSGV2LO;

    !+
    ! If any chained messages are to be signalled, copy them.
    !-

    IF ACTUALCOUNT () GTRU 1	! Any chained messages at all?
    THEN
	BEGIN
	IF (.MESSAGE_LIST [0] - (.MESSAGE_LIST [2] + 2)) GTR 0
	THEN
	    DECR I FROM (.MESSAGE_LIST [0] - (.MESSAGE_LIST [2] + 2)) TO 1 DO
		WLONG_A (RLONG_A (ARG_PTR), MSG_PTR)
	END
    ELSE
	!+
	! If there's an error in the FAB or RAB, copy that error to the message.
	!-
	IF .PFV [PFV$V_FCB_VALID]
	THEN
	    BEGIN
	    LOCAL
		FCB: REF $PAS$FCB_CONTROL_BLOCK,
		FAB: REF BLOCK [, BYTE];
	    BIND
		RAB = FCB: REF BLOCK [, BYTE];

	    FCB = .PFV [PFV$A_FCB];	
	    IF NOT .FCB [FCB$V_STRING]
	    THEN
		BEGIN
		FAB = .RAB [RAB$L_FAB];
		IF NOT .RAB [RAB$L_STS] AND (.RAB [RAB$L_STS] NEQ 0)
		THEN
		    BEGIN
		    WLONG_A (.RAB [RAB$L_STS], MSG_PTR);
		    WLONG_A (.RAB [RAB$L_STV], MSG_PTR);
		    MESSAGE_LIST [0] = .MESSAGE_LIST [0] + 2;
		    END
		ELSE IF NOT .FAB [FAB$L_STS] AND (.FAB [FAB$L_STS] NEQ 0)
		THEN
		    BEGIN
		    WLONG_A (.FAB [FAB$L_STS], MSG_PTR);
		    WLONG_A (.FAB [FAB$L_STV], MSG_PTR);
		    MESSAGE_LIST [0] = .MESSAGE_LIST [0] + 2;
		    END;
		END;
	    END;

    CALLG (MESSAGE_LIST, LIB$SIGNAL);		! Do the signal

    !+
    ! We can only return here if a user handler has returned SS$_CONTINUE.
    ! Our callers assume that we never return, so signal_stop the special
    ! condition code PAS$_CONTINUE.  This tells the appropriate incarnation
    ! of PAS$$IO_HANDLER to unwind to the caller of its establisher,
    ! effectively dismissing the error.
    !-

    SIGNAL_STOP (PAS$_CONTINUE,1,PFV [PFV$R_PFV]);

    RETURN;					! If handler continues
	
    END;					! End of routine PAS$$SIGNAL

!<BLF/PAGE>

%SBTTL 'PAS$$BUGCHECK - Signal PAS$_BUGCHECK'
GLOBAL ROUTINE PAS$$BUGCHECK (
    CODE
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure is called by the Run-Time Library when it wishes
!	to indicate an internal consistency check failure.  It signals
!	PAS$_BUGCHECK, internal consistency error <nnn> in Pascal Run-Time Library.
!
! CALLING SEQUENCE:
!
!	CALL PAS$$BUGCHECK (CODE.rlu.v)
!
! FORMAL PARAMETERS:
!
!	CODE		A longword integer denoting the particular error
!			being reported.  This is to help locate the problem
!			from SPR reports.  The code is generated by the
!			$PAS$BUGCHECK macro.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	PAS$_BUGCHECK
!
!--

    BEGIN

    SIGNAL_STOP (PAS$_BUGCHECK, 1, .CODE);	! Signal fatal error

    RETURN;					! Should never return here
	
    END;					! End of routine PAS$$BUGCHECK

!<BLF/PAGE>

END						! End of module PAS$$SIGNAL

ELUDOM
