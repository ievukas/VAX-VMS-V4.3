MODULE STR$COMPARE_CASE_BLIND (	! Compare Case-blind

		IDENT = '1-003'	! File: STRCOMCAS.B32  Edit: DG1003

		   ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: String support library
!
! ABSTRACT: This module contains a routine to perform case-blind 
!	comparisons of 2 input strings of any supported class and dtype.
!
! ENVIRONMENT: User mode, AST reentrant.
!
! AUTHOR: R. Reichert, CREATION DATE: 11-Aug-1982
!
! MODIFIED BY:
!
! 1-001	- Original. RKR 11-Aug-1982.
! 1-002 - Remove STR$CASE_BLIND_COMPARE_EQL.  Improvements to code
!	  in STR$CASE_BLIND_COMPARE.  RKR 24-Nov-1982.
! 1-003 - Enhance to support DEC Multinational Char. Set.  DG 1-Nov-1983.
!--
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE 
		(EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES
!
REQUIRE 'RTLIN:STRLNK';		! JSB linkages

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$CASE_BLIND_COMPARE;	! With blank fill for unequal lengths

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';	! Declare PSECTS code
REQUIRE 'RTLIN:STRMACROS';	! String macros
LIBRARY 'RTLSTARLE';		! STARLET library for macros and symbols

!
! MACROS
!
MACRO	UPCASE (IN_BYTE) =
	BEGIN
	    IF (CH$RCHAR(.IN_BYTE) GEQU %C'a' AND
	        CH$RCHAR(.IN_BYTE) LEQU %C'z')  OR
	       (CH$RCHAR(.IN_BYTE) GEQU %X'E0' AND
	        CH$RCHAR(.IN_BYTE) LEQU %X'FD' AND
	        CH$RCHAR(.IN_BYTE) NEQ  %X'F0')
	    THEN  CH$RCHAR_A(IN_BYTE) - (%C'a' - %C'A')
	    ELSE  CH$RCHAR_A(IN_BYTE)
	END % ;


!
! EQUATED SYMBOLS: NONE
!

!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (STR);

!
! OWN STORAGE: NONE
!

!
! EXTERNAL ROUTINE : NONE

GLOBAL ROUTINE STR$CASE_BLIND_COMPARE (	! Case-blind compare with 
					! blank fill

			    STRING1, ! pointer to 1st string descriptor
			    STRING2  ! pointer to 2nd string descriptor

			   ) : =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine compares two upcased source strings of any 
!	supported data type and class, and returns a 
!
!		-1   if string1 < string2
!		 0   if both are the same with blank fill for shorter
!		 1   if string1 > string2.
!
! CALLING SEQUENCE:
!
!	MATCH.wl.v = STR$CASE_BLIND_COMPARE ( STRING1.rt.dx, 
!					      STRING2.rt.dx)
!
! FORMAL PARAMETERS:
!
!	STRING1.rt.dx		pointer to 1st string descriptor
!	STRING2.rt.dx		pointer to 2nd string descriptor
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	MATCH.wl.v		-1 if string1 < string2
!				 0 if both are the same with blank fill
!				 1 if string1 > string2
!
! SIDE EFFECTS:
!
!	May signal STR$_ILLSTRCLA on bad string class
!--
    BEGIN
    MAP
	STRING1: REF BLOCK [ ,BYTE],
	STRING2: REF BLOCK [ ,BYTE] ;

    LOCAL
	STRING1_LEN : WORD,	! Length of STRING1
	STRING1_ADDR,		! Address of STRING1
	STRING2_LEN : WORD,	! Length of STRING2
	STRING2_ADDR,		! Address of STRING2
	STATUS,			! Status to be returned
	SHORTER ;		! shorter of STRING1_LEN and STRING2_LEN

!+
! Extract length and addresses of strings, and find length of shorter
!-
    $STR$GET_LEN_ADDR ( STRING1, STRING1_LEN, STRING1_ADDR ) ;
    $STR$GET_LEN_ADDR ( STRING2, STRING2_LEN, STRING2_ADDR ) ;

    SHORTER = MINU (.STRING1_LEN, .STRING2_LEN) ;

!+
! Compare two strings character by character, upcasing each character
! while inspecting it.
!-
    INCR I FROM 1 TO .SHORTER
    DO
	BEGIN	! loop
	LOCAL
	    CHAR1 : BYTE,
	    CHAR2 : BYTE ;
	CHAR1 = UPCASE (STRING1_ADDR) ;
	CHAR2 = UPCASE (STRING2_ADDR) ;
	IF .CHAR1 LSSU .CHAR2
	    THEN RETURN (-1)
	    ELSE IF .CHAR1 GTRU .CHAR2
		 THEN RETURN (1);
	END;	! loop

!+
! If we fall out of loop, strings matched all the way across to the 
! length of the shorter.  If their lengths are equal, they're equal.
    IF .STRING1_LEN EQLU .STRING2_LEN
    THEN	RETURN 0 ;	! length and contents match

!+
! If their lengths are not equal, and what remains of the longer is 
! blanks, then they are equal, else shorter is less.
!-

    IF .STRING1_LEN LSSU .STRING2_LEN
    THEN
	BEGIN	! STRING1 is shorter
	IF CH$EQL ( 0, .STRING2_ADDR, 
		    .STRING2_LEN - .SHORTER, .STRING2_ADDR,
		    STR$K_FILL_CHAR )
	THEN 	RETURN 0	! STRING1 (with blank fill) = STRING2
	ELSE	RETURN -1 ;	! STRING1 < STRING2
	END	! STRING1 is shorter
    ELSE
	BEGIN	! STRING2 is shorter
	IF CH$EQL ( 0, .STRING1_ADDR, 
		    .STRING1_LEN - .SHORTER, .STRING1_ADDR,
		    STR$K_FILL_CHAR )
	THEN	RETURN 0	! STRING1 = STRING2 (with blank fill)
	ELSE	RETURN 1 ;	! STRING1 > STRING2
	END ;	! STRING2 is shorter

    END ; 				! STR$CASE_BLIND_COMPARE

END				! of module STR$COMPARE_CASE_BLIND
ELUDOM
