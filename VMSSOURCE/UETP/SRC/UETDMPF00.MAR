	.TITLE UETDMPF00 VAX/VMS UETP DEVICE TEST FOR DMP 11/ DMF-32 Sync line
	.IDENT	'V04-001'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:
;	This module will be distributed with VAX/VMS under the [SYSTEST]
;	account.
;
; ABSTRACT:
;	This is the test program for DMP 11 / DMF 32 sync line device test
;
; ENVIRONMENT:
; 	This program will run in user access mode, with AST enabled except
;	during error processing. This program requires the following 
;	privileges and	quotas:  none.
;
;--
;
; AUTHOR: Paul Jenq,	CREATION DATE: Sep, 1981
;
; MODIFIED BY:
;
;	V04-001	RNH0009		Richard N. Holstein,	07-Sep-1984
;		Remove entirely the forced error for too big a buffer, since
;		either SS$_BADPARAM or SS$_EXQUOTA could be returned depending
;		on SYSGEN parameters.
;
;	V03-010	RNH0008		Richard N. Holstein,	07-Apr-1984
;		Adapt to driver fix which allocated write buffers dynamically -
;		we can't force an SS$_BADPARAM unless we exceed absolute max.
;
;	V03-009	RNH0007		Richard N. Holstein,	15-Feb-1984
;		Take advantage of the new UETP message codes.  Fix SSERROR
;		interaction with RMS_ERROR.
;
;	V03-008	RNH0006		Richard N. Holstein,	19-Dec-1983
;		Give correct sentinels to Test Controller.
;
;	V03-007	RNH0005		Richard N. Holstein,	11-Nov-1983
;		Use decimal conversion routine for unit numbers.
;
;	V03-006	RNH0004		Richard N. Holstein,	29-Jun-1983
;		Rework error messages and error processing.
;
;	V03-005	RNH0003		Richard N. Holstein,	11-Mar-1983
;		Don't signal ending message in EXIT_HANDLER.
;
;	V03-004	RNH0002		Richard N. Holstein,	01-Mar-1983
;		Fix ERROR_COUNT bug.
;
;	V03-003	LDJ0002		Larry D. Jones,		10-Feb-1983
;		Allow for longer device names.
;
;	V03-002	LDJ0001		Larry D. Jones,		06-Nov-1982
;		Fixed a loop mode assign channel bug.
;
;	V03-001	RNH0001		Richard N. Holstein,	15-Oct-1982
;		Miscellaneous fixes listed in the V3B UETP Workplan.
;
;**

	.SBTTL	Declarations
;
; INCLUDE FILES:
;
;	SYS$LIBRARY:LIB.MLB	for general definitions
;	SHRLIB$:UETP.MLB	for UETP definitions

;
; MACROS:
;
	$CHFDEF				; Condition handler frame definitions
	$DEVDEF				; Device definitions
	$DIBDEF				; Device Information Block
	$DVIDEF				; $GETDVI ITMLST item codes
	$SHRDEF				; Shared messages
	$SSDEF				; System Service status codes
	$STSDEF				; Status return
	$UETUNTDEF			; UETP unit block offset definitions
	$UETPDEF			; UETP
	$XMDEF				; XMDRIVER symbols
	$NMADEF				; Network management definition
;
; EQUATED SYMBOLS:
;
;   Facility number definitions:
	RMS$_FACILITY = 1

;   SHR message definitions:
	UETP = UETP$_FACILITY@STS$V_FAC_NO ; Define the UETP facility code
	UETP$_ABENDD = UETP!SHR$_ABENDD	; Define the UETP message codes
	UETP$_BEGIND = UETP!SHR$_BEGIND
	UETP$_ENDEDD = UETP!SHR$_ENDEDD
	UETP$_OPENIN = UETP!SHR$_OPENIN
	UETP$_TEXT   = UETP!SHR$_TEXT

;   Internal flag bits...:
	TEST_OVERV   = 1		; Set when test is over
	SAFE_TO_UPDV = 2		; Set if it's safe to update UETINIDEV
	BEGIN_MSGV   = 3		; Set if "BEGIN" msg has been printed
	MODE_IS_ONEV = 4		; Set when the MODE is ONE
	FLAG_SHUTDNV = 5		; Set to indicate device should be
					; shutdown if errors occur
;   ...and corresponding masks:
	TEST_OVERM   = 1@TEST_OVERV
	SAFE_TO_UPDM = 1@SAFE_TO_UPDV
	BEGIN_MSGM   = 1@BEGIN_MSGV
	MODE_IS_ONEM = 1@MODE_IS_ONEV
	FLAG_SHUTDNM = 1@FLAG_SHUTDNV

;   Miscellany:
	LC_BITM       = ^X20		; Mask to convert lower case to upper
	REC_SIZE      = 40		; UETINIDEV.DAT record size
	TEXT_BUFFER   = 250		; Internal text buffer size
	EFN2          = 4		; EFN used for three minute timer
	SS_SYNCH_EFN  = 3		; Synch miscellaneous system services
	MAX_PROC_NAME = 15		; Longest possible process name
	MAX_DEV_DESIG = 10		; Longest possible controller name
	MAX_UNIT_DESIG= 5		; Longest possible unit number
	MAX_MSG_LEN   = 512		; maximum message length
	TIME_ID_1     = 1               ; Timer id to prevent hung
	RW_TIME_ID    = 3		; Timer to prevent hung when Read/write
	LIMIT         = 16		; Loop count for each message length
	RECV_EFN      = 8
	XMIT_EFN      = 5		; EFN for QIO write
	PRM	      = 100		; AST parameter for test
	DEVDEP_SIZE   = 0		; Size of device dependent part of UETUNT
	WRITE_SIZE    = 0		; Size of device write buffer
	READ_SIZE     = 0		; Size of device read buffer

	PAGES = <<UETUNT$C_INDSIZ+-	; Add together all of the pieces...
		  DEVDEP_SIZE+-		; ...which make up a UETP unit block...
		  WRITE_SIZE+-		; ...to give to the $EXPREG service below
		  READ_SIZE+-
		  511>/512>

	ESC = ^X1B			; ESC character
	RECVPOOL_SIZ = 4		; Number of preallocated message block

	.SBTTL	Read-Only Data
	.PSECT	RODATA,NOEXE,NOWRT,PAGE

ACNT_NAME:				; Process name on exit
	.ASCID	/SYSTEST/

TEST_NAME:				; This test name
	.ASCID	/UETDMPF00/

SUPDEV_GBLSEC:				; How we access UETSUPDEV.DAT
	.ASCID	/UETSUPDEV/

CONTROLLER:				; Logical name of controller
	.ASCID	/CTRLNAME/

MODE:					; Run mode logical name
	.ASCID	/MODE/

NO_RMS_AST_TABLE:			; List of errors for which...
	.LONG	RMS$_BLN		; ...RMS cannot deliver an AST...
	.LONG	RMS$_BUSY		; ...even if one has an ERR= arg
	.LONG	RMS$_CDA		; Note that we can search table...
	.LONG	RMS$_FAB		; ...via MATCHC since <31:16>...
	.LONG	RMS$_RAB		; ...pattern can't be in <15:0>
NRAT_LENGTH = .-NO_RMS_AST_TABLE

SYS$INPUT:				; Name of device from which...
	.ASCID	/SYS$INPUT/		; ...the test can be aborted

INPUT_ITMLST:				; $GETDVI arg list for SYS$INPUT
	.WORD	64,DVI$_DEVNAM		; We need the equivalence name
	.LONG	BUFFER,BUFFER_PTR
	.LONG	0			; Terminate the list

CS1:					; Device class and type control string
	.ASCID	/!2XB !2XB /

CS3:					; Device class-only control string
	.ASCID	/!2XB **/

CNTRLCMSG:
	.ASCID	\Aborted via a user CTRL/C\

NO_CTRLNAME:
	.ASCID	/No controller specified./

DEAD_CTRLNAME:
	.ASCID	/Can't test controller !AS, marked as unusable in UETINIDEV.DAT./

NOUNIT_SELECTED:
	.ASCID	/No units selected for testing./

ILLEGAL_REC:
	.ASCID	/Illegal record format in file UETINIDEV.DAT!/

PASS_MSG:
	.ASCID	/End of pass !UL with !UL iterations at !%D./

INIDEV_UPDERR:				; Error during exit handler
	.ASCID	/Error updating UETINIDEV.DAT./

THREEMIN:				; 3 minute delta time
	.LONG	-10*1000*1000*180,-1

HALFMIN:				; 30 seconds delta time
	.LONG	-10*1000*1000*30,-1

UNIT_DESC:				; Descriptor used to convert unit #
	.LONG	5
	.ADDRESS BUFFER+6

CONT_DESC:				; Descriptor used to convert controller...
	.WORD	REC_SIZE,0		; ...from lowercase to uppercase
	.ADDRESS BUFFER

FILE:					; Fills in RMS_ERR_STRING
	.ASCID	/file/

RECORD:					; Fills in RMS_ERR_STRING
	.ASCID	/record/

RMS_ERR_STRING:				; Announces an RMS error
	.ASCID	/RMS !AS error in file !AD/

PROMPT:
	.ASCII	/Controller designation?: /
	PMTSIZ = .-PROMPT

START_TO_MSG:
	.ASCID	/Timeout trying to start !AS./

RW_TO_MSG:
	.ASCID	/Timeout while reading or writing !AS./

START_CONT_PRM:
	.ASCID	/Error starting up !AS as a controller./

START_TRIB_PRM:
	.ASCID	/Error starting up !AS as a tributary./

WRITE_PRM:
	.ASCID	/Error writing to !AS./

READ_PRM:
	.ASCID	/Error reading from !AS./

SENSE_PRM:
	.ASCID	/Error sensing characteristics of !AS./

SET_PRM:
	.ASCID	/Error setting characteristics of !AS./

DMF_IOSB_DUMP:
	.ASCID	\I/O status block completion status: !XW, transfer size: !XW,\-
		\!/!_characteristics: !XB, status: !XB, error summary: !XB.\

DMP_IOSB_DUMP:
	.ASCID	\I/O status block completion status: !XW, transfer size: !XW,\-
		\!/!_characteristics: !XB, status: !XB, error summary: !XB,\-
		\!/!_total number of errors: !XB.\

COMP_STATUS_MSG:
	.ASCID	/Failure during forced error tests,/<13><10><9>/expected: "/

RECEIVED_MSG:
	.ASCID	/",/<13><10><9>/received: "/

RECV_ERR_MSG:
	.ASCID	/Received message error, good data is !XB, bad data is !XB /

SENSE_ERRMSG:
	.ASCID	\Error in sense mode test, extended characteristic parameter\-
		\!/!_!XW with value !XL not matched by any of those returned.\

ERRTEST_MSG:
	.ASCID	/Error in error test /

	.SBTTL	Read/Write Data
	.PSECT	RWDATA,WRT,NOEXE,PAGE

TTCHAN:					; Channel associated with ctrl. term.
	.WORD	0

FLAG:					; Miscellaneous flag bits
	.WORD	0			; (See Equated Symbols for definitions)

FAO_BUF:				; FAO output string descriptor
	.WORD	TEXT_BUFFER,0
	.ADDRESS BUFFER

BUFFER_PTR:				; Fake .ASCID buffer for misc. strings
	.WORD	TEXT_BUFFER,0		; A word for length, a word for desc.
	.ADDRESS BUFFER

BUFFER:					; FAO output and other misc. buffer
	.BLKB	TEXT_BUFFER

ALT_FAO_BUF:				; FAO output string descriptor...
	.WORD	TEXT_BUFFER,0		; ...during ASTs
	.ADDRESS ALT_BUFFER

ALT_BUFFER_PTR:				; Fake .ASCID buffer for misc. strings
	.WORD	TEXT_BUFFER,0		; A word for length, a word for desc.
	.ADDRESS ALT_BUFFER		; Used during ASTs

ALT_BUFFER:				; FAO output and other misc. buffer...
	.BLKB	TEXT_BUFFER		; ...during ASTs

DEVDSC:					; Device name descriptor
	.WORD	MAX_DEV_DESIG,0
	.ADDRESS DEV_NAME

PROCESS_NAME:				; Process name
	.ASCID	/DMPF/

	PROCESS_NAME_FREE = MAX_PROC_NAME-<.-8-PROCESS_NAME>
	.BLKB	PROCESS_NAME_FREE

DEV_NAME:				; Device name buffer
	.BLKB	MAX_DEV_DESIG+MAX_UNIT_DESIG
	NAME_LEN = .-DEV_NAME

DIB:					; Device Information Block
	.WORD	DIB$K_LENGTH,0
	.ADDRESS DIBBUF
DIBBUF:
	.BLKB	DIB$K_LENGTH

ERROR_COUNT:				; Cumulative error count at runtime
	.LONG	0

STATUS:					; Status value on program exit
	.LONG	0

QUAD_STATUS:				; IO status block for misc sys. svcs.
	.QUAD	0

INADDRESS:				; $CRMPSC address storage
	.LONG	0,0
OUTADDRESS:
	.LONG	0,0

UNIT_NUMBER:				; Current dev unit number
	.WORD	0

DEVNAM_LEN:				; Current device name length
	.WORD	0

ITERATION:				; # of times all tests were executed
	.LONG	0

PASS:					; Pass count
	.LONG	0

MSG_BLOCK:				; Auxiliary $GETMSG info
	.BLKB	4

EXIT_DESC:				; Exit handler descriptor
	.LONG	0
	.ADDRESS EXIT_HANDLER
	.LONG	1
	.ADDRESS STATUS

ARG_COUNT:				; Argument counter used by ERROR_EXIT
	.LONG	0

XD_CHAN:				; DMP/F circuit channel
	.WORD	0

BUF_LEN:				; Length of primary chars
	.WORD	0

BUF_DESC:				; Get channnel char buffer descriptor
	.LONG	DIB$K_LENGTH
	.LONG	CHAN_BUF

CHAN_BUF:				; Channel char buffer
	.BLKB	DIB$K_LENGTH

P1BUF:					; P1 Device char buffer
	.QUAD	0

TR_P1BUF:				; p1 buufer for trib
	.QUAD	0

P2BUF_DESC:				; P2 extended char buffer
	.LONG	P2BUF_LEN
	.ADDRESS P2BUF

P2BUF:					; P2 extended buffer
	.WORD	NMA$C_PCLI_PRO		; Protocol mode
	.LONG	NMA$C_LINPR_POI		; DDCMP proint-to-point mode

	.WORD	NMA$C_PCLI_CON		; Controller mode
	.LONG	NMA$C_LINCN_LOO		; Loopback mode

P2BUF_LEN = .-P2BUF

TR_P2BUF_DESC:				; P2 extended char buffer for trib
	.LONG	TR_P2BUF_LEN
	.ADDRESS TR_P2BUF

TR_P2BUF:				; P2 extended buffer for trib
	.WORD	NMA$C_PCCI_TRI		; tributary address
	.LONG	1			; Address

TR_P2BUF_LEN = .-TR_P2BUF

SENSE_P1BUF:				; P1 buffer for sense mode test
	.QUAD	0

SENSE_P2DESC:				; P2 buffer descrip for sense mode test
	.LONG	SENSE_P2LEN
	.ADDRESS SENSE_P2BUF

SENSE_P2BUF:				; P2 buffer for sense mode test
	.BLKW	<3*24>			; 8 quad quad words for dev information
SENSE_P2LEN = .-SENSE_P2BUF		; P2 buffer length

ERRTST_P2DESC:				; P2 desc for error test
	.LONG	ERRTST_P2LEN
	.ADDRESS ERRTST_P2BUF

ERRTST_P2BUF:				; P2 buffer for error test
	.BLKQ	1
ERRTST_P2LEN = .-ERRTST_P2BUF

ERRCOUNT_DESC:				; Error counter buffer descrip
	.LONG	ERRCNT_LEN
	.ADDRESS ERRCNT_BUF

ERRCNT_BUF:				; Buffer for error counters
	.BLKQ	64
ERRCNT_LEN = .-ERRCNT_BUF		; Buffer length

XD_IOSB:				; QIO IO status block for transmit
	.BLKQ	1

RCV_IOSB:				; QIO Io status block for receive
	.BLKQ	1

XMIT_BUF:				; Transmit buffer
	.BLKB	MAX_MSG_LEN

RECV_BUF:				; Receive buffer
	.BLKB	MAX_MSG_LEN

BAD_DATA:				; Received wrong data
	.BYTE	0

GOOD_DATA:				; Data sent (good)
	.BYTE	0


;
; Head of self-relative UETP unit block queue.
;
	.ALIGN QUAD

UNIT_LIST:				; Head of unit block circular list
	.QUAD	0

NEW_NODE:				; Newly acquired node address
	.QUAD	0

	.SBTTL	RMS-32 Data Structures
	.ALIGN	LONG

SYSIN_FAB:				; Allocate FAB for SYS$INPUT
	$FAB-
	FNM = <SYS$INPUT>

SYSIN_RAB:				; Allocate RAB for SYS$INPUT
	$RAB-
	FAB = SYSIN_FAB,-
	ROP = PMT,-
	PBF = PROMPT,-
	PSZ = PMTSIZ,-
	UBF = DEV_NAME,-
	USZ = NAME_LEN

INI_FAB:				; Allocate FAB for UETINIDEV
	$FAB-
	FAC = <GET,PUT,UPD>,-
	RAT = CR,-
	SHR = <GET,PUT,UPI>,-
	FNM = <UETINIDEV.DAT>

INI_RAB:				; Allocate RAB for UETINIDEV
	$RAB-
	FAB = INI_FAB,-
	RBF = BUFFER,-
	UBF = BUFFER,-
	USZ = REC_SIZE

DDB_RFA:				; RFA storage for INI_RAB
	.BLKB	6

	.ALIGN	LONG
SUP_FAB:				; Allocate FAB for UETSUPDEV
	$FAB-
	FAC = GET,-
	SHR = <UPI,GET>,-
	RAT = CR,-
	FOP = UFO,-
	FNM = <UETSUPDEV.DAT>

;
; Dummy FAB and RAB to copy to the UETP unit blocks
; The following FAB and RAB must be contiguous and in this order!
;

DUMMY_FAB:
	$FAB

DUMMY_RAB:
	$RAB	RSZ = WRITE_SIZE,-
		USZ = READ_SIZE

	.SBTTL	Main Program
	.PSECT	DMPF,EXE,NOWRT,PAGE

	.DEFAULT DISPLACEMENT,WORD

.ENTRY UETDMPF00,^M<>			; Entry mask

	MOVAL	SSERROR,(FP)		; Declare exception handler
	$SETSFM_S ENBFLG = #1		; Enable system service failure mode
	$DCLEXH_S DESBLK = EXIT_DESC	; Declare an exit handler

	$OPEN	FAB = SYSIN_FAB,-	; Open SYS$INPUT
		ERR = RMS_ERROR
	$CONNECT RAB = SYSIN_RAB,-	; Connect RAB to SYS$INPUT
		 ERR = RMS_ERROR
	BBC	S^#DEV$V_TRM,-		; BR if SYS$INPUT is NOT a terminal
		SYSIN_FAB+FAB$L_DEV,10$
	$TRNLOG_S LOGNAM = CONTROLLER,-	; Allow terminal user to specify...
		  RSLLEN = DEVNAM_LEN,-	; ...a logial name...
		  RSLBUF = DEVDSC	; ...for the controller to test
	CMPL	R0,#SS$_NORMAL		; Was a controller specified?
	BEQL	PROC_CONT_NAME		; BR if it was - go process it
10$:
	$GET	RAB = SYSIN_RAB,-	; Read SYS$INPUT...
		ERR = RMS_ERROR		; ...for the controller name
	MOVW	SYSIN_RAB+RAB$W_RSZ,-	; Save the name length
		DEVNAM_LEN
	BNEQ	PROC_CONT_NAME		; BR if we got something
	MOVL	#SS$_BADPARAM,STATUS	; Save an exit status if not
	PUSHAL	NO_CTRLNAME		; Prepare for message...
	PUSHL	#1			; ...arg count
	PUSHL	#UETP$_TEXT!STS$K_ERROR ; ...signal name
	PUSHL	#3			; ...arg count
	BRW	ERROR_EXIT		; ...go tell of bad setup

PROC_CONT_NAME:
	MOVZWL	DEVNAM_LEN,DEVDSC	; Set the device name length
	PUSHAL	DEVDSC			; Make sure...
	PUSHAL	DEVDSC			; ...that the specified controller...
	CALLS	#2,G^STR$UPCASE		; ...is all uppercase for later comaparison
	ADDL3	#1,DEVDSC,R2		; Estimate the eventual...
	ADDW2	R2,PROCESS_NAME		; ...process name length (incl. "_")
	MOVAL	PROCESS_NAME+8-		; Locate first available byte...
		+MAX_PROC_NAME-		; ...in process name handle...
		-PROCESS_NAME_FREE,R0	; ...for device name
	SUBL3	#PROCESS_NAME_FREE,-	; Will the device name fit...
		R2,R1			; ...in the remaining space?
	BLEQ	10$			; BR if it will
	SUBL2	R1,R0			    ; Overwrite handle otherwise...
	MOVW	#MAX_PROC_NAME,PROCESS_NAME ; ...and define the maximum length
10$:
	MOVB	#^A/_/,(R0)+		; Separate handle from device name
	MOVC3	DEVDSC,DEV_NAME,(R0)	; Concatenate handle with device name
	CLRL	-(SP)			; Set the time stamp flag
	PUSHAL	TEST_NAME		; Set the test name
	PUSHL	#2			; Push the argument count
	PUSHL	#UETP$_BEGIND!STS$K_SUCCESS ; Set the message code
	CALLS	#4,G^LIB$SIGNAL		; Print the startup message
	BISW2	#BEGIN_MSGM,FLAG	; Set flag so we don't print it again
	$SETPRN_S PRCNAM = PROCESS_NAME	; Set the process name to UETDMPF00_x

	BBC	S^#DEV$V_TRM,-		; BR if SYS$INPUT is NOT a terminal
		SYSIN_FAB+FAB$L_DEV,20$
	$GETDVI_S DEVNAM = SYS$INPUT,-   ; Get the name of...
		  EFN    = #SS_SYNCH_EFN,- ; ...device which may abort test
		  ITMLST = INPUT_ITMLST,-
		  IOSB   = QUAD_STATUS
	BLBC	QUAD_STATUS,20$		; Avoid CTRL/C handler if any error
	$ASSIGN_S DEVNAM = BUFFER_PTR,-	; Set up for CTRL/C AST handler
		  CHAN   = TTCHAN
	$QIOW_S	CHAN     = TTCHAN,-	; Enable CTRL/C AST's...
		FUNC     = #IO$_SETMODE!IO$M_CTRLCAST,-
		P1       = CCASTHAND
	PUSHAL	PROCESS_NAME		; ...and tell the user...
	PUSHL	#1			; ...
	PUSHL	#UETP$_ABORTC!STS$K_SUCCESS ; ...how to abort gracefully...
	CALLS	#3,G^LIB$SIGNAL		; ...
20$:

;
; From UETINIDEV.DAT and UETSUPDEV.DAT, get information which gives controller
; and unit configuration and lets us know if the setup to run this test was
; done correctly.
;
	$OPEN	FAB = INI_FAB,-		; Open file "UETINIDEV.DAT"
		ERR = RMS_ERROR
	$CONNECT RAB = INI_RAB,-	; Connect the RAB and FAB
		 ERR = RMS_ERROR
	$MGBLSC_S  INADR = INADDRESS,-	; Connect to UETSUPDEV global section
		  RETADR = OUTADDRESS,-
		  GSDNAM = SUPDEV_GBLSEC,-
		   FLAGS = #SEC$M_EXPREG
	CMPL	R0,#SS$_NOSUCHSEC	; Was the section already there?
	BNEQ	30$			; BR if it was...
	$OPEN	FAB = SUP_FAB,-		; ...else open "UETSUPDEV.DAT"
		ERR = RMS_ERROR
	$CRMPSC_S CHAN = SUP_FAB+FAB$L_STV,- ; Create the global section
		 INADR = INADDRESS,-
		RETADR = OUTADDRESS,-
		GSDNAM = SUPDEV_GBLSEC,-
		 FLAGS = #SEC$M_EXPREG!SEC$M_GBL
30$:
	SUBL3	OUTADDRESS,OUTADDRESS+4,R6 ; Compute global section length

FIND_IT:
	$GET	RAB = INI_RAB,-		; Get the first record
		ERR = RMS_ERROR
	PUSHAL	CONT_DESC		; Make sure...
	PUSHAL	CONT_DESC		; ...that the controller name...
	CALLS	#2,G^STR$UPCASE		; ...is all uppercase letters
	CMPB	#^A/D/,BUFFER		; Is this a DDB?
	BEQL	10$			; Go on if not
	CMPB	#^A/E/,BUFFER		; Is this the end of the file?
	BNEQ	FIND_IT			; Continue on if not
	PUSHAL	DEVDSC			; Push device not supported message
	PUSHAL	PROCESS_NAME		; Parameters on the stack
	PUSHL	#2
	PUSHL	#UETP$_DENOSU
	INSV	#STS$K_ERROR,-		; Set the severity code...
		#STS$V_SEVERITY,-
		#STS$S_SEVERITY,(SP)
	MOVL	(SP),STATUS		; ...and save it as the exit status
	PUSHL	#4
	BRW	ERROR_EXIT		; Exit in error
10$:
	CMPC	DEVNAM_LEN,BUFFER+6,DEV_NAME	; Is this the right controller?
	BNEQ	FIND_IT			; BR if not
	MOVC3	#6,INI_RAB+RAB$W_RFA,DDB_RFA ; Save the Record File Address
	CMPB	#^A/T/,BUFFER+4		; Can we test this controller?
	BEQL	FOUND_IT		; BR if we can...
	$FAO_S	CTRSTR = DEAD_CTRLNAME,- ; ...and yell at user if we can't
		OUTLEN = BUFFER_PTR,-
		OUTBUF = FAO_BUF,-
		P1     = #DEVDSC
	MOVL	#SS$_BADPARAM,STATUS	; Set return status
	PUSHAL	BUFFER_PTR		; ...
	PUSHL	#1			; ...
	PUSHL	#UETP$_TEXT!STS$K_ERROR	; ...
	PUSHL	#3			; ...
	BRW	ERROR_EXIT		; We can't test what we can't test

FOUND_IT:
	$GET	RAB = INI_RAB,-		; Get a record
		ERR = RMS_ERROR
	PUSHAL	CONT_DESC		; Make sure...
	PUSHAL	CONT_DESC		; ...that this line...
	CALLS	#2,G^STR$UPCASE		; ...is all uppercase letters
	CMPB	#^A/U/,BUFFER		; Is this a UCB?
	BEQL	30$			; BR if it is
	CMPB	#^A/D/,BUFFER		; Is this a DDB?
	BEQL	20$			; BR if yes
	CMPB	#^A/E/,BUFFER		; Is this the end?
	BEQL	20$			; BR if yes
10$:
	PUSHAL	ILLEGAL_REC		; Then this is an error in the record
	PUSHL	#1			; Push the error message
	PUSHL	#UETP$_TEXT!STS$K_ERROR ; Push the signal name
	PUSHL	#3			; Push the temp arg count
	BRW	ERROR_EXIT		; Finish for good
20$:
	BRW	ALL_SET			; Found DDB or END
30$:
	CMPB	#^A/T/,BUFFER+4		; Is the unit testable?
	BNEQ	FOUND_IT		; BR if not
	PUSHL	#1			; Flag to ignore blanks when converting
	PUSHL	#2			; Set byte size of results
	PUSHAL	UNIT_NUMBER		; Set address to receive word
	PUSHAL	UNIT_DESC		; Push string address
	CALLS	#4,G^OTS$CVT_TI_L	; Convert ASCII unit # to decimal
	BLBC	R0,10$			; Don't allow bogus unit to pass
	SKPC	#^A/ /,#MAX_UNIT_DESIG,- ; Find out where unit number really is
		BUFFER+6
	DECL	R0			; Units must all be at least one digit
	SKPC	#^A/0/,R0,(R1)		; Skip leading zeroes on the unit
	INCL	R0			; Compensate for DECL above
	ADDW3	R0,DEVNAM_LEN,DEVDSC	; Calculate device'unit string length
	MOVZWL	DEVNAM_LEN,R2		; Offset to unit number in DEVDSC
	MOVC3	R0,(R1),DEV_NAME(R2)	; Append unit number to device
	$GETDEV_S DEVNAM = DEVDSC,-	; Get the device characteristics
		  PRIBUF = DIB
	MOVZBL	DIBBUF+DIB$B_DEVCLASS,R7 ; Save the device class
	MOVZBL	DIBBUF+DIB$B_DEVTYPE,R8	; Save the device type
	$FAO_S	CTRSTR = CS1,-
		OUTBUF = FAO_BUF,-
		P1     = R7,-
		P2     = R8		; Make it into a string
	MATCHC	#6,BUFFER,R6,@OUTADDRESS ; Find the device class and type
	BEQL	40$			; BR if it was found
	$FAO_S	CTRSTR = CS3,-		; Try for full class support
		OUTBUF = FAO_BUF,-
		    P1 = R7
	MATCHC	#6,BUFFER,R6,@OUTADDRESS ; Find the device class only
	BNEQ	50$			; BR if not found
40$:
	MOVZBL	TEST_NAME,R5		; Get the test name length
	CMPC3	R5,(R3),TEST_NAME+8	; Are we the right test?
	BEQL	60$			; BR if yes
50$:
	PUSHAL	DEVDSC			; Push device not supported message
	PUSHAL	PROCESS_NAME		; Parameters on the stack
	PUSHL	#2			; Push the argument count
	PUSHL	#UETP$_DENOSU
	INSV	#STS$K_ERROR,-
		#STS$V_SEVERITY,-
		#STS$S_SEVERITY,(SP)	; Set the severity code...
	MOVL	(SP),STATUS		; ...and save it as the exit status
	PUSHL	#4			; Push the partial arg count...
	BRW	ERROR_EXIT		; ...and split this scene

;+
; The following code dynamically allocates enough memory for a unit block,
; a device dependent parameter area and I/O buffers. The unit block is inserted
; into the queue header UNIT_LIST.  It then initializes the unit block.
; A comment indicates where the device dependent parameters should be
; initialized.  The unit block format is as follows:
;
;			+---------------+ -------
;	UETUNT$L_FLINK	!		!	^
;			+---------------+	!
;	UETUNT$L_BLINK	!		!	!
;			+-----------+---+	!
;	UETUNT$B_TYPE		    !   !	!
;			    +-------+---+	!
;	UETUNT$W_SIZE	    !   !   !    contains DEVDEP_SIZE + UETUNT$C_INDSIZ
;			+---+-------+		!
;	UETUNT$B_FLAGS  !   !			!
;			+---+   +-------+	!
;	UETUNT$W_CHAN	        !   !   !	!
;			+-------+-------+	!
;	UETUNT$W_FUNC	!   !   !		!
;			+-------+-------+	+----- UETUNT$C_SIZE
;	UETUNT$L_ITER	!		!	!
;			+---------------+	!
;	UETUNT$T_FILSPC	!		!	!
;			!/\/\/\/\/\/\/\/!	!
;			NAM$C_MAXRSS bytes	!
;			!/\/\/\/\/\/\/\/!	!
;			!		!	!
;	UETUNT$K_FAB	!---------------!	!
;			!		!	!
;			!/\/\/\/\/\/\/\/!	!
;			 FAB$C_BLN bytes	!
;			!/\/\/\/\/\/\/\/!	!
;			!		!	!
;	UETUNT$K_RAB	+---------------+	!
;			!		!	!
;			!\/\/\/\/\/\/\/\!	!
;			 RAB$C_BLN bytes	!
;			!\/\/\/\/\/\/\/\!	!
;			!		!	v
;	UETUNT$K_DEVDEP	+---------------+ -------
;			!		!	^
;			!\/\/\/\/\/\/\/\!	!
;			   user defined		+----- DEVDEP_SIZE
;			!\/\/\/\/\/\/\/\!	!
;			!		!	v
;			+---------------+ -------
;    READ/WRITE buffers !		!	^
;			!\/\/\/\/\/\/\/\!	!
;			   user defined		+----- WRITE_SIZE and READ_SIZE
;			!/\/\/\/\/\/\/\/!	!
;			!		!	v
;			+---------------+ -------
;-

60$:
	$EXPREG_S PAGCNT = #PAGES,-	; Get a new node of demand zero memory
		  RETADR = NEW_NODE
	INSQTI	@NEW_NODE,UNIT_LIST	; Put the new node in the unit list
	MOVL	NEW_NODE,R6		; Save a copy of its address
	MOVB	#1,UETUNT$B_TYPE(R6)	; Set the structure type
	MOVW	#UETUNT$C_INDSIZ+DEVDEP_SIZE,-
		UETUNT$W_SIZE(R6)	; Set the structure size
	MOVB	DEVDSC,UETUNT$T_FILSPC(R6) ; Set the device name size
	MOVC3	DEVDSC,@DEVDSC+4,-
		UETUNT$T_FILSPC+1(R6)	; Save the device name
	MOVC3	#FAB$C_BLN+RAB$C_BLN,-
		DUMMY_FAB,UETUNT$C_FAB(R6) ; Save a FAB and a RAB away
	MOVAL	UETUNT$K_FAB(R6),R7	; Save the FAB address
	MOVAL	UETUNT$K_RAB(R6),R8	; Save the RAB address
	MOVL	R7,RAB$L_FAB(R8)	; Set the FAB address in the RAB
	MOVB	UETUNT$T_FILSPC(R6),-
		FAB$B_FNS(R7)		; Set the FNS field in the FAB
	MOVAL	UETUNT$T_FILSPC+1(R6),-
		FAB$L_FNA(R7)		; Set the FNA field in the FAB
;
; Set the device dependent parameters in here
;
	BRW	FOUND_IT		; Do the next UCB

;
; Arrive here when we have the device configuration.  In normal or loop forever
; mode, set a timer far enough in the future such that we can do a reasonable
; set of tests before the timer expires, but if our device gets hung, the
; program won't waste too much time before noticing.  Let one-shot mode be a
; special case.
;
ALL_SET:
	TSTL	UNIT_LIST		; Anything to test?
	BNEQ	10$			; BR if yes
	PUSHAL	NOUNIT_SELECTED		; Else set up the error message...
	PUSHL	#1			; ...argument count...
	PUSHL	#UETP$_TEXT!STS$K_ERROR	; ...signal name...
	PUSHL	#3			; ...and parameter count
	MOVL	#SS$_BADPARAM,STATUS	; Set return status
	BRW	ERROR_EXIT		; ...and give up, complaining
10$:
	BISW2	#SAFE_TO_UPDM,FLAG	; OK safe to update UETINIDEV.DAT now

	.SBTTL	Test the DMP/DMF

START_TEST:

	$ASSIGN_S -			; Assign channel to the device
		DEVNAM = DEVDSC,-
		CHAN = XD_CHAN


	BLBS	R0,10$			; BR if no failure
	MOVL	R0,STATUS		; Save the failure status
	PUSHL	STATUS			; Push the error code...
	PUSHL	STATUS
	PUSHAL	DEVDSC			; ...and the device designation...
	PUSHAL	TEST_NAME		; ...and the test name...
	PUSHL	#3			; ...and the arg count...
	PUSHL	#UETP$_DEUNUS!STS$K_ERROR ; ...and the signal name...
	PUSHL	#6			; ...and the total argument count...
	BRW	ERROR_EXIT		; ...and bail out completely
10$:
;
; Set up P1 device char buffer, P2 buffer is set up in Read/write section
;
RESTART:
	MOVAL	P1BUF+2,R3			; Address of device char for p1
	MOVW	#MAX_MSG_LEN,(R3)+		; Maximum message length
	MOVB	#XM$M_CHR_LOOPB,(R3) 		; Set loop back mode in char 

	$SETIMR_S -				; Set up half minute timer 
		DAYTIM = HALFMIN,-		; to prevent hung
		ASTADR = TIME_ERR_OUT,-
		REQIDT = #START_TO_MSG
START_CONT:
	$QIOW_S -			; Start the controller
		CHAN = XD_CHAN,-
		FUNC = #IO$_SETMODE!IO$M_CTRL!IO$M_STARTUP,-
		IOSB = XD_IOSB,-
		ASTADR = CHK_QIO_AST,-
		ASTPRM = #START_CONT_PRM,-
		P1 = P1BUF,-
		P2 = #P2BUF_DESC,-
		P3 = #RECVPOOL_SIZ

START_TRI:
	$QIOW_S -			; Start the tributary
		CHAN = XD_CHAN,-
		FUNC = #IO$_SETMODE!IO$M_STARTUP,-
		IOSB = XD_IOSB,-
		ASTADR = CHK_QIO_AST,-
		ASTPRM = #START_TRIB_PRM,-
		P1 = TR_P1BUF,-
		P2 = #TR_P2BUF_DESC,-
		P3 = #RECVPOOL_SIZ	; Common receive pool = 4 buffer

	BISW2	#FLAG_SHUTDNM,FLAG	; Set flag to say shut down the
					; device if errors occur

	$CANTIM_S REQIDT = #START_TO_MSG ; Cancel hung timer

	$TRNLOG_S LOGNAM = MODE,-	; Get the run mode
		  RSLLEN = BUFFER_PTR,-
		  RSLBUF = FAO_BUF

	BICB2	#LC_BITM,BUFFER		; Convert to upper case
	CMPB	#^A/O/,BUFFER		; Is this a one shot?
	BNEQ	10$			; BR if not
	BISW2	#TEST_OVERM,FLAG	; End after one iteration
	BISW2	#MODE_IS_ONEM,FLAG	; Set mode is "ONE" flag
	BRW	LOOPBACK_TEST		; Skip the 3 min timer, mode is "one"
10$:					; Not one shot
	$SETIMR_S DAYTIM = THREEMIN,-	; Set 3 minutes timer for xmit/recv
		  ASTADR = TIME_SUC_OUT ; The test will do xmit/recv for about
					; 3 minutes
;
; Loopback test transmit and receive random data with different message length
;
LOOPBACK_TEST:
	MOVZBL	#^XAA,R2		; Random number 1
	MOVZBL	#^X2E,R3		; Random number 2
	MOVL	#MAX_MSG_LEN,R7		; Maximum message length
SET_XMIT_BUF:				; Set up transmit buffer
	MOVAL	XMIT_BUF,R6		; Transmit buffer address
	MOVL	R7,R4			; Message length in bytes
10$:
	ADDL2	R3,R2			; Random number as data
	MOVB	R2,(R6)+		; Fill in the transmit buffer
	SOBGTR	R4,10$			; Branch if more bytes to be filled

	$SETIMR_S -			; Set half minute timer to prevent hung
		DAYTIM = HALFMIN,-
		ASTADR = TIME_ERR_OUT,-
		REQIDT = #RW_TO_MSG

	MOVL	#LIMIT,R8		; Loop 16 times for each msg length
XMIT:
	$QIO_S -			; Transmit data message
		EFN = #XMIT_EFN,-	; Event flag
		CHAN = XD_CHAN,-	; Channel
		FUNC = #IO$_WRITEVBLK,- ; Transmit
		IOSB = XD_IOSB,-	; IOSB
		ASTADR = CHK_QIO_AST,-	; Completion ast routine
		ASTPRM = #WRITE_PRM,-	; Ast parameter
		P1 = XMIT_BUF,-		; Addr of transmit buffer
		P2 = R7			; message length in bytes

RECV:
	$QIOW_S -			; Read data message 
		EFN = #RECV_EFN,-	; Event flag
		CHAN = XD_CHAN,-	; Channel
		FUNC = #IO$_READVBLK,-	; Receive message
		IOSB = RCV_IOSB,-	; IOSB
		ASTADR = RECV_AST,-	; Completion ast to check data received
		ASTPRM = R7,-		; Ast parameter = message length
		P1 = RECV_BUF,-		; Receive buffer
		P2 = R7			; Message length in bytes

	INCL	ITERATION		; Increment iteration count

	$WAITFR_S EFN = #XMIT_EFN	; Wait until transmit done

	SOBGTR	R8,XMIT			; Loop for 16 times

	$CANTIM_S -			; Cancel hung timer
		REQIDT = #RW_TO_MSG

	BBS	#TEST_OVERV,FLAG,SENSE_TEST ; Is the test over?
	SOBGTR	R7,10$			; Decrement message length by one and
					; try again
	BRW	LOOPBACK_TEST		; Re-try from beginning
10$:	BRW	SET_XMIT_BUF		; Set  new data in tranmit buffer

SENSE_TEST:
	$QIOW_S -			; Read device (trib.) charracteristic
		CHAN = XD_CHAN,-
		FUNC = #IO$_SENSEMODE,-
		IOSB = XD_IOSB,-
		P1 = SENSE_P1BUF,-
		P2 = #SENSE_P2DESC

	$FAO_S	CTRSTR = SENSE_PRM,-
		OUTLEN = ALT_BUFFER_PTR,-
		OUTBUF = ALT_FAO_BUF,-
		P1     = #DEVDSC
	PUSHAL	ALT_BUFFER_PTR
	CALLS	#1,CHECK_IOSB		; Check status

	MOVZWL	XD_IOSB+2,R4		; Number of bytes returned for p2 buff
	MOVAL	TR_P2BUF,R5		; Address of P2 buff
	MOVL	#TR_P2BUF_LEN,R7	; P2 length
10$:
	MOVAL	SENSE_P2BUF,R6		; Address of P2 buff returned
	MATCHC  #6,(R5),R4,(R6)		; Check the parameters returned
	BNEQ	30$			; Br if not match
	MOVAL	6(R5),R5		; Next parameter
	SUBL2	#6,R7			; Index
	BNEQ	10$			; Br if more parameters to check
	BRW	ERROR_TEST		; Otherwise go to test error case
30$:
	$FAO_S	CTRSTR = SENSE_ERRMSG,-
		OUTLEN = BUFFER_PTR,-
		OUTBUF = FAO_BUF,-
		P1     = (R5),-
		P2     = 2(R5)
	PUSHAL	BUFFER_PTR		; Error message
	BRW	FAIL_OUT		; Failure exit

ERROR_TEST:	
	$SETSFM_S ENBFLG = #0		; Turn off system service mode

;
; Read data with IO$M_NOW specified but no data available
;
	$QIOW_S -			; Read data message 
		CHAN = XD_CHAN,-
		FUNC = #IO$_READVBLK!IO$M_NOW,-
		IOSB = XD_IOSB,-
		P1 = RECV_BUF,-
		P2 = #128

	MOVL	#SS$_ENDOFFILE,R7
	MOVZWL	XD_IOSB,R8
	CMPW	R8,R7			; Correct error code?
	BNEQ	ERRTST_ERR		; Br if not

;
; Buffer not enough to hold all information from IO$_SENSEMODE
;

	$QIOW_S -			; Read device (trib. ) charracteristic
		CHAN = XD_CHAN,-
		FUNC = #IO$_SENSEMODE,-
		IOSB = XD_IOSB,-
		P1 = SENSE_P1BUF,-
		P2 = #ERRTST_P2DESC

	MOVL	#SS$_BUFFEROVF,R7
	MOVZWL	XD_IOSB,R8
	CMPW	R8,R7			; Error code = buffer overflow?
	BNEQ	ERRTST_ERR		; Error if not
	BRW	READ_ERRCOUNT		; Br to read and clear error count

ERRTST_ERR:
	MOVC3	COMP_STATUS_MSG,-	; We need an error message...
		COMP_STATUS_MSG+8,BUFFER
	SUBW3	COMP_STATUS_MSG,-	; ...to compare...
		#TEXT_BUFFER,R9
	MOVZWL	R9,BUFFER_PTR
	MOVL	R3,BUFFER_PTR+4
	$GETMSG_S MSGID = R7,-		; ...the error we expected...
		 MSGLEN = BUFFER_PTR,-
		 BUFADR = BUFFER_PTR
	ADDL2	BUFFER_PTR,BUFFER_PTR+4
	SUBW2	BUFFER_PTR,R9
	MOVC3	RECEIVED_MSG,-
		RECEIVED_MSG+8,-
		@BUFFER_PTR+4
	MOVL	R3,BUFFER_PTR+4
	SUBW2	RECEIVED_MSG,R9
	MOVZWL	R9,BUFFER_PTR
	$GETMSG_S MSGID = R8,-		; ...with the one we received
		 MSGLEN = BUFFER_PTR,-
		 BUFADR = BUFFER_PTR
	SUBW2	BUFFER_PTR,R9
	SUBW3	R9,#TEXT_BUFFER,R9
	MOVZWL	R9,R9
	MOVW	#^A/"./,BUFFER(R9)
	ADDW3	#2,R9,BUFFER_PTR
	MOVAL	BUFFER,BUFFER_PTR+4
	PUSHAL	BUFFER_PTR		; Error message
	MOVL	R8,STATUS		; Save our actual error as exit status
	BRW	FAIL_OUT		; Failure exit

READ_ERRCOUNT:
	$SETSFM_S ENBFLG = #1		; Turn on  system service mode

	$QIOW_S -			; Read and clear the error counters
		CHAN = XD_CHAN,-
		FUNC = #IO$_SENSEMODE!IO$M_RD_COUNT!IO$M_CLR_COUNT,-
		IOSB = XD_IOSB,-
		P2 = #ERRCOUNT_DESC

	$FAO_S	CTRSTR = SENSE_PRM,-
		OUTLEN = ALT_BUFFER_PTR,-
		OUTBUF = ALT_FAO_BUF,-
		P1     = #DEVDSC
	PUSHAL	ALT_BUFFER_PTR
	CALLS	#1,CHECK_IOSB		; Check status

CLEAN_EXIT:

	BICW2	#FLAG_SHUTDNM,FLAG	; Clear the shutdown flag

	$QIOW_S -			; Shut down the device
		CHAN = XD_CHAN,-
		FUNC = #IO$_SETMODE!IO$M_CTRL!IO$M_SHUTDOWN,-
		IOSB = XD_IOSB

	$FAO_S	CTRSTR = SET_PRM,-
		OUTLEN = ALT_BUFFER_PTR,-
		OUTBUF = ALT_FAO_BUF,-
		P1     = #DEVDSC
	PUSHAL	ALT_BUFFER_PTR
	CALLS	#1,CHECK_IOSB		; Check status

SUC_EXIT:
	$TRNLOG_S LOGNAM = MODE,-
		  RSLLEN = BUFFER_PTR,-
		  RSLBUF = FAO_BUF	; Get the run mode
	BICB2	#LC_BITM,BUFFER		; Convert to upper case
	CMPB	#^A/L/,BUFFER		; Is this a loop for ever?
	BNEQ	10$			; BR if not
	BICW2	#TEST_OVERM,FLAG	; Reset the termination flag
	INCL	PASS			; Bump the pass count
	$FAO_S	CTRSTR = PASS_MSG,-
		OUTLEN = BUFFER_PTR,-
		OUTBUF = FAO_BUF,-
		P1     = PASS,-
		P2     = ITERATION,-
		P3     = #0		; Make the end of pass message
	PUSHAL	BUFFER_PTR		; Push the string desc.
	PUSHL	#1			; Push arg count
	PUSHL	#UETP$_TEXT!STS$K_INFO	; Push the signal name
	CALLS	#3,G^LIB$SIGNAL		; Print the end of pass message
	CLRL	ITERATION		; Reset the iteration count
	BRW	RESTART			; Do the next pass
10$:
	ADDL3	#UNIT_LIST,UNIT_LIST,R6	; Set the unit block list header
	BISB2	#UETUNT$M_TESTABLE,-
		UETUNT$B_FLAGS(R6)	; Set the testable bit
	MOVL	#SS$_NORMAL!STS$M_INHIB_MSG,STATUS ; Set successful exit status
	$EXIT_S STATUS			; Exit with the status

FAIL_OUT:				; Failure exit
	PUSHL	#1				; Arg count
	PUSHL	#UETP$_TEXT!STS$K_ERROR		; Signal name
	PUSHL	#3				; Arg count
	BRW	ERROR_EXIT			; Error exit


	.SBTTL	CHECKIOSB - Check IO status block
;++
; FUNCTIONAL DESCRIPTION:
; 	This routine checks the IO status block = #SS$_NORMAL
;
; CALLING SEQUENCE:
;	CALLS	#1,CHECK_IOSB
;
; INPUT PARAMETERS:
;	Address of error message
;
; IMPLICIT INPUTS:
;	XD_IOSB is the IOSB from some $QIO
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	Exit with status if IOSB not right
;
; COMPLETION CODES:
;	IO status in STATUS if error
;
; SIDE EFFECTS:
;	Program exit if error found
;
;--

CHECK_IOSB:
	.WORD	^M<R2>
	CMPW	XD_IOSB,#SS$_NORMAL	; Is the QIO O.K.?
	BNEQ	10$			; Br if not
	RET				; Return
10$:
	MOVZWL	XD_IOSB,-(SP)		; Push the error status code
	MOVL	(SP),STATUS		; Set return status
	MOVAL	DMP_IOSB_DUMP,R2	; Assume we're testing a DMP
	CMPB	S^#DT$_DMP11,-		; But are we?
		DIBBUF+DIB$B_DEVTYPE
	BEQL	20$
	MOVAL	DMF_IOSB_DUMP,R2	; Get a different string if not
20$:
	$FAO_S	CTRSTR = (R2),-		; Get the IOSB in plain text
		OUTLEN = BUFFER_PTR,-
		OUTBUF = FAO_BUF,-
		P1     = @#XD_IOSB,-
		P2     = @#XD_IOSB+2,-
		P3     = @#XD_IOSB+4,-
		P4     = @#XD_IOSB+5,-
		P5     = @#XD_IOSB+6,-
		P6     = @#XD_IOSB+7
	PUSHAL	BUFFER_PTR
	PUSHL	#1
	PUSHL	#UETP$_TEXT!STS$K_ERROR
	PUSHL	04(AP)
	PUSHL	#1
	PUSHL	#UETP$_TEXT!STS$K_ERROR
	PUSHL	#7			; Argument count
	BRW	ERROR_EXIT		; Error exit


	.SBTTL	Check QIO AST Routine
;++
; FUNCTIONAL DESCRIPTION:
;	This routine will be called as a QIO completion AST routine 
;	It checks IO status block and the AST parameter
;
; CALLING SEQUENCE:
;	Called via AST at $QIO completion
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	DEVDSC, ALT_BUFFER_PTR, ALT_FAO_BUF and ALT_BUFFER used in forming a
;		potential error message.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	Error message if error
;
; COMPLETION CODES:
;	IO status in STATUS if error
;
; SIDE EFFECTS:
;	Program exit if error
;	BUFFER_PTR and BUFFER used if error
;
;--
CHK_QIO_AST:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11> ; Entry mask

	$FAO_S	CTRSTR = @04(AP),-		; Form message for CHECK_IOSB
		OUTLEN = ALT_BUFFER_PTR,-
		OUTBUF = ALT_FAO_BUF,-
		P1     = #DEVDSC
	PUSHAL	ALT_BUFFER_PTR
	CALLS	#1,CHECK_IOSB			; Go check IO status block
	RET

	.SBTTL	Receive data AST routine
;++
; FUNCTIONAL DESCRIPTION:
;	This routine will be called as receive data AST routine
;	It checks IO status and compare the data in the receive buffer
;	against the transmit buffer
;
; CALLING SEQUENCE:
;	Called via AST at $QIO READ
;
; INPUT PARAMETERS:
;	AST parameter = message length
;
; IMPLICIT INPUTS:
;	DEVDSC and various text buffers are used in forming error messages
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	Error message if error found
;
; COMPLETION CODES:
;	in STATUS
;
; SIDE EFFECTS:
;	Program exit if error found
;
;--
RECV_AST:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11> ; Entry mask
	CMPW	RCV_IOSB,#SS$_NORMAL	; Is the QIO O.K.?
	BNEQ	10$			; Br if not
	CMPC3	4(AP),RECV_BUF,XMIT_BUF	; Compare the data
	BNEQ	20$
	RET
10$:
	$FAO_S	CTRSTR = READ_PRM,-
		OUTLEN = ALT_BUFFER_PTR,-
		OUTBUF = ALT_FAO_BUF,-
		P1     = #DEVDSC
	MOVQ	RCV_IOSB,XD_IOSB	; Set up a copy of our error status
	PUSHAL	ALT_BUFFER_PTR
	CALLS	#1,CHECK_IOSB		; Take advantage of existing routine
	; Note that we will not return!

20$:
	MOVZBL	(R1),-(SP)		; Save the bad data...
	MOVZBL	(R3),-(SP)		; ...the good data...
	SUBL3	R0,4(AP),-(SP)		; ...the offset of the mismatch...
	MOVZWL	UNIT_NUMBER,-(SP)	; ...the failing unit...
	PUSHAQ	DEVDSC			; ...the device name...
	PUSHL	#5			; ...and the count of parameters...
	PUSHL	#UETP$_DATAER!STS$K_ERROR ; ...for our error message
	PUSHL	#7
	BRW	ERROR_EXIT

	.SBTTL	Half Minute Timer Expiration Routine
;++
; FUNCTIONAL DESCRIPTION:
;	This routine will be called only if the timer which was set to prevent
;	program hangs goes off.
;
; CALLING SEQUENCE:
;	Called via AST at $SETIMR expiration.
;
; INPUT PARAMETERS:
;	04(AP)	Address of a descriptor for an error message
;
; IMPLICIT INPUTS:
;	DEVDSC and various text buffers are used to for error messages
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	Time out error message
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Program exit
;
;--

TIME_ERR_OUT:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11> ; Entry mask

	$FAO_S	CTRSTR = @04(AP),-
		OUTLEN = ALT_BUFFER_PTR,-
		OUTBUF = ALT_FAO_BUF,-
		P1     = #DEVDSC
	PUSHAL	ALT_BUFFER_PTR		; Set up our error message
	PUSHL	#1
	PUSHL	#UETP$_TEXT!STS$K_ERROR
	PUSHL	#3			; Push the argument count total
	BRW	ERROR_EXIT		; Bail out completely

	.SBTTL	Three Minutes Timer Expiration Routine
;++
; FUNCTIONAL DESCRIPTION:
;	This routine will be called when the device test has been run for
;	about three minutes. (that is, one normal run )
;
; CALLING SEQUENCE:
;	Called via AST at $SETIMR expiration.
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Get out the transmit /receive loop test
;
;--

TIME_SUC_OUT:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11> ; Entry mask
	BISW2	#TEST_OVERM,FLAG		; set test over bit
	RET


	.SBTTL	System Service Exception Handler
;++
; FUNCTIONAL DESCRIPTION:
;	This routine is executed if a software or hardware exception occurs or
;	if a LIB$SIGNAL system service is used to output a message.
;
; CALLING SEQUENCE:
;	Entered via an exception from the system
;
; INPUT PARAMETERS:
;	ERROR_COUNT   = previous cumulative error count
;	                -----------------
;	   AP ---->     !       2       !
;			!---------------!
;			! SIGNL ARY PNT !
;			!---------------!
;			! MECH  ARY PNT !
;			!---------------! ---------
;			!       4       !         ^
;			!---------------!         !
;			! ESTABLISH FP  !         !
;			!---------------!         !
;			!    DEPTH      ! Mechanism Array
;			!---------------!         !
;			!      R0       !         !
;			!---------------!         !
;			!      R1       !         v
;			!---------------! ---------
;			!       N       !         ^
;			!---------------!         !
;			! CONDITION NAME!         !
;			!---------------!         !
;			! N-3 ADDITIONAL!    Signal Array
;			! LONG WORD ARGS!         !
;			!---------------!         !
;			!      PC       !         !
;			!---------------!         !
;			!      PSL      !         v
;			!---------------! ---------
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	SS$_NORMAL if it's a UETP condition or RMS error.
;	Error status from exception, otherwise.
;
; SIDE EFFECTS:
;	May branch to ERROR_EXIT.
;	May print a message.
;--

SSERROR:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11> ; Entry mask

	$SETAST_S ENBFLG = #0		; Disable AST delivery
	PUSHL	#1			; Assume ASTs were enabled
	CMPL	S^#SS$_WASSET,R0	; Were ASTs enabled?
	BEQL	10$			; BR if they were
	CLRL	(SP)			; Set ASTs to remain disabled
10$:
	$SETSFM_S ENBFLG = #0		; Disable SS failure mode
	PUSHL	#1			; Assume SS failure mode was enabled
	CMPL	S^#SS$_WASSET,R0	; Was SS failure mode enabled?
	BEQL	20$			; BR if it was
	CLRL	(SP)			; Set SS failure mode to remain off
20$:
	MOVL	CHF$L_SIGARGLST(AP),R6	; Get the signal array pointer
	MOVQ	CHF$L_SIG_NAME(R6),R9	; Get NAME in R9 and ARG1 in R10
	CMPZV	#STS$V_FAC_NO,-		; Is this a message from LIB$SIGNAL?
		#STS$S_FAC_NO,-
		R9,#UETP$_FACILITY
	BNEQ	30$			; BR if this is not a UETP exception
	SUBL2	#2,CHF$L_SIG_ARGS(R6)	; Drop the PC and PSL
	$PUTMSG_S MSGVEC = CHF$L_SIG_ARGS(R6) ; Print the message
	BRB	40$			; Restore ASTs and SS fail mode
30$:
	CMPL	#SS$_SSFAIL,R9		; RMS failures are SysSvc failures
	BNEQ	50$			; BR if this can't be an RMS failure
	CMPZV	#STS$V_FAC_NO,-		; Is it an RMS failure?
		#STS$S_FAC_NO,-
		R10,#RMS$_FACILITY
	BNEQ	50$			; BR if not
	BICL2	#^XF0000000,R10		; Strip control bits from status code
	MATCHC	#4,CHF$L_SIG_ARG1(R6),-	; Is it an RMS failure for which...
		#NRAT_LENGTH,-
		NO_RMS_AST_TABLE	; ...no AST can be delivered?
	BEQL	50$			; BR if so - must give error here
40$:
	POPR	#^M<R0>			; Restore SS failure mode...
	$SETSFM_S ENBFLG = R0		; ...
	POPR	#^M<R0>			; Restore AST enable...
	$SETAST_S ENBFLG = R0		; ...
	MOVL	S^#SS$_NORMAL,R0	; Supply a standard status for exit
	RET				; Resume processing (or goto RMS_ERROR)
50$:
	MOVL	R9,STATUS		; Save the status
	CLRL	R8			; Assume for now it's not SS failure
	CMPL	#SS$_SSFAIL,R9		; But is it a System Service failure?
	BNEQ	70$			; BR if not - no special case message
	$GETMSG_S MSGID = R10,-		; Get SS failure code associated text
		 MSGLEN = BUFFER_PTR,-
		 BUFADR = FAO_BUF,-
		 FLAGS  = #14,-
		 OUTADR = MSG_BLOCK
	TSTB	MSG_BLOCK+1		; Get FAO arg count for SS failure code
	BEQL	60$			; Don't use $GETMSG if no $FAO args...
	PUSHAL	BUFFER_PTR		; ...else build up...
	PUSHL	#1			; ...a message describing...
	PUSHL	#UETP$_TEXT		; ...why the System Service failed
	INSV	R10,#STS$V_SEVERITY,-	; Give the message...
		#STS$S_SEVERITY,(SP)	; ...the correct severity code
	MOVL	#3,R8			; Count the number of args we pushed
	BRB	70$
60$:
	PUSHL	R10			; Save SS failure code
	MOVL	#1,R8			; Count the number of args we pushed
70$:
	MULL3	#4,CHF$L_SIG_ARGS(R6),R7 ; Convert longwords to bytes
	SUBL2	R7,SP			   ; Save the current signal array...
	MOVC3	R7,CHF$L_SIG_NAME(R6),(SP) ; ...on the stack
	ADDL3	R8,CHF$L_SIG_ARGS(R6),-(SP) ; Push the current arg count
	BRW	ERROR_EXIT

	.SBTTL	RMS Error Handler
;++
; FUNCTIONAL DESCRIPTION:
;	This routine handles error returns from RMS calls.
;
; CALLING SEQUENCE:
;	Called by RMS when a file processing error is found.
;
; INPUT PARAMETERS:
;	The FAB or RAB associated with the RMS call.
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	Error message
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	Program may exit, depending on severity of the error.
;
;--

RMS_ERROR:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11> ; Entry mask

	MOVL	4(AP),R6		; See whether we're dealing with...
	CMPB	#FAB$C_BID,FAB$B_BID(R6) ; ...a FAB or a RAB
	BNEQ	10$			; BR if it's a RAB
	MOVAL	FILE,R7			; FAB-specific code:  text string...
	MOVL	R6,R8			; ...address of FAB...
	PUSHL	FAB$L_STV(R6)		; ...STV field for error...
	PUSHL	FAB$L_STS(R6)		; ...STS field for error...
	MOVL	FAB$L_STS(R6),STATUS	; ...and save the error code
	BRB	COMMON			; FAB and RAB share other code
10$:
	MOVAL	RECORD,R7		; RAB-specific code:  text string...
	MOVL	RAB$L_FAB(R6),R8	; ...address of associated FAB...
	PUSHL	RAB$L_STV(R6)		; ...STV field for error...
	PUSHL	RAB$L_STS(R6)		; ...STS field for error...
	MOVL	RAB$L_STS(R6),STATUS	; ...and save the error code
COMMON:
	MOVZBL	FAB$B_FNS(R8),R10	; Get the file name size
	$FAO_S	CTRSTR = RMS_ERR_STRING,- ; Common code, prepare error message...
		OUTLEN = BUFFER_PTR,-
		OUTBUF = FAO_BUF,-
		P1     = R7,-
		P2     = R10,-
		P3     = FAB$L_FNA(R8)
	PUSHAL	BUFFER_PTR		; ...and arguments for ERROR_EXIT...
	PUSHL	#1			; ...
	PUSHL	#UETP$_TEXT		; ...
	EXTZV	#STS$V_SEVERITY,-
		#STS$S_SEVERITY,-
		STATUS,R9 		; ...get the severity code...
	BISB2	R9,(SP)			; ...and add it into the signal name
	PUSHL	#5			; Current arg count
	BRW	ERROR_EXIT

	.SBTTL	CTRL/C Handler
;++
; FUNCTIONAL DESCRIPTION:
;	This routine handles CTRL/C AST's
;
; CALLING SEQUENCE:
;	Called via AST
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

CCASTHAND:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11> ; Entry mask

	BBC	#FLAG_SHUTDNV,FLAG,10$  ; Have to shut down device?
	$QIO_S -			; Shut down the device
		CHAN = XD_CHAN,-
		FUNC = #IO$_SETMODE!IO$M_CTRL!IO$M_SHUTDOWN,-
		IOSB = XD_IOSB
10$:
	PUSHAL	CNTRLCMSG		; Set message pointer
	PUSHL	#1			; Set arg count
	PUSHL	#UETP$_TEXT!STS$K_WARNING ; Set signal name
	PUSHL	#0			; Indicate an abnormal termination
	PUSHAL	PROCESS_NAME		; ...
	PUSHL	#2			; ...
	PUSHL	#UETP$_ABENDD!STS$K_WARNING ; ...
	CALLS	#7,G^LIB$SIGNAL		; Output the message
	MOVL	#<STS$M_INHIB_MSG!-	; Set the exit status
		SS$_CONTROLC--
		STS$K_SUCCESS+STS$K_WARNING>,-
		STATUS
	$EXIT_S	STATUS			; Terminate program cleanly

	.SBTTL	Error Exit
;++
; FUNCTIONAL DESCRIPTION:
;	This routine prints an error message and exits.
;
; CALLING SEQUENCE:
;	MOVx  error status value,STATUS
;	PUSHx error specific information on the stack
;	PUSHL current argument count
;	BRW   ERROR_EXIT
;
; INPUT PARAMETERS:
;	Arguments to LIB$SIGNAL, as above
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	Message to SYS$OUTPUT and SYS$ERROR
;
; IMPLICIT OUTPUTS:
;	Program exit
;
; COMPLETION CODES:
;	Error in STATUS
;
; SIDE EFFECTS:
;	NONE
;
;--

ERROR_EXIT:

	$SETAST_S ENBFLG = #0		; ASTs can play havoc with messages
	BBS	#BEGIN_MSGV,FLAG,10$	; BR if "begin" msg already printed
	CLRL	-(SP)			; Set the time stamp flag
	PUSHAL	TEST_NAME		; Set the test name
	PUSHL	#2			; Push the argument count
	PUSHL	#UETP$_BEGIND!STS$K_SUCCESS ; Set the message code
	CALLS	#4,G^LIB$SIGNAL		; Print the startup message
10$:
	ADDL3	(SP)+,#8,ARG_COUNT	; Get total # args, pop partial count
	INCL	ERROR_COUNT		; Keep running error count
	PUSHL	#0			; Push the time parameter
	PUSHAL	PROCESS_NAME		; Push test name...
	PUSHL	#^XF0002		; ...arg count...
	PUSHL	#UETP$_ABENDD!STS$K_ERROR ; ...and signal name
	PUSHL	ERROR_COUNT		; Finish off arg list...
	PUSHAL	PROCESS_NAME		; ...
	PUSHL	#^X10002		; ...
	PUSHL	#UETP$_ERBOXPROC!STS$K_ERROR ; ...for error box message
	CALLS	ARG_COUNT,G^LIB$SIGNAL	; Truly bitch

	TSTL	STATUS			; Did we exit with an error code?
	BNEQ	20$			; BR if we did
	MOVL	#UETP$_ABENDD!STS$K_ERROR,- ; Supply a generic one otherwise
		STATUS
20$:
	BBC	#FLAG_SHUTDNV,FLAG,30$  ; Have to shut down device?
	$QIO_S -			; Shut down the device
		CHAN = XD_CHAN,-
		FUNC = #IO$_SETMODE!IO$M_CTRL!IO$M_SHUTDOWN
30$:
	BISL	#STS$M_INHIB_MSG,STATUS	; Don't print messages twice!
	$EXIT_S STATUS			; Exit in error

	.SBTTL	Exit Handler
;++
; FUNCTIONAL DESCRIPTION:
;	This routine handles cleanup at exit.  If the MODE logical name is
;	equated to "ONE", the routine will update the test flag in the
;	UETINIDEV.DAT file depending on the UETUNT$M_TESTABLE flag state in the
;	UETUNT$B_FLAGS field of the unit block for each unit for the device
;	under test.
;
; CALLING SEQUENCE:
;	Invoked automatically by $EXIT System Service.
;
; INPUT PARAMETERS:
;	STATUS  contains the exit status.
;	FLAG    has synchronizing bits.
;	DDB_RFA contains the RFA of the DDB record for this device in UETINIDEV.
;
; IMPLICIT INPUTS:
;	UNIT_LIST points to the head of a doubly linked circular list of unit
;		  blocks for the device under test.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	Various files are de-accessed, the process name is reset, and any
;	necessary synchronization with UETPDEV01 is carried out.
;	If the MODE logical name is equated to "ONE", the routine will update
;	the test flag in the UETINIDEV.DAT file depending on the 
;	UETUNT$M_TESTABLE flag state in the UETUNT$B_FLAGS field of the unit
;	block for each unit for the device under test.
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

EXIT_HANDLER:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11> ; Entry mask

	$SETSFM_S ENBFLG = #0		; Turn off System Service failure mode
	$SETAST_S ENBFLG = #0		; No more ASTs
	$TRNLOG_S LOGNAM = MODE,-	; Get the run mode
		  RSLLEN = BUFFER_PTR,-
		  RSLBUF = FAO_BUF
	BICB2	#LC_BITM,BUFFER		; Convert to upper case
	CMPB	#^A/O/,BUFFER		; Is this a one shot?
	BEQL	10$			; BR if yes...
	BRW	END_UPDATE		; ...else don't update UETINIDEV.DAT
10$:
	BBS	#SAFE_TO_UPDV,FLAG,20$	; Only update if it's safe
	BRW	END_UPDATE		; Else forget it
20$:
	MOVAL	INI_RAB,R10		; Set the RAB address
	MOVB	#RAB$C_RFA,RAB$B_RAC(R10) ; Set RFA mode
	MOVC3	#6,DDB_RFA,RAB$W_RFA(R10) ; Set RFA to DDB line
	$GET	RAB = (R10)		; Go back to the DDB record
	BLBC	R0,UPDATE_FAILED	; If failure then forget it
	MOVB	#RAB$C_SEQ,RAB$B_RAC(R10) ; Set back to sequential mode
	ADDL3	#UNIT_LIST,UNIT_LIST,R11 ; Set the unit block list header
	CLRL	R9			; Init a counter
UNIT_LOOP:
	BBC	#UETUNT$V_TESTABLE,-	; BR if this unit is not testable
		UETUNT$B_FLAGS(R11),10$
	INCL	R9			; Count testable units
10$:
	ADDL2	(R11),R11		; Next unit block
	CMPL	R11,#UNIT_LIST		; Are we full circle in the list?
	BNEQ	UNIT_LOOP		; BR if not
	TSTL	R9			; Any testable units?
	BNEQ	20$			; BR if yes...
	MOVB	#^A/N/,BUFFER+4		; ...else disable the DDB record...
	$UPDATE RAB = (R10)		; ...here
	BLBC	R0,UPDATE_FAILED	; If error then forget it
20$:
	ADDL2	(R11),R11		; Next unit block
	CMPL	R11,#UNIT_LIST		; Are we full circle in the list?
	BEQL	END_UPDATE		; BR if yes
	$GET	RAB = (R10)		; Get a record
	BLBC	R0,UPDATE_FAILED	; If error then forget it
	BICB2	#LC_BITM,BUFFER		; Convert to uppercase
	CMPB	#^A/U/,BUFFER		; Is it a UCB record?
	BNEQ	END_UPDATE		; BR if not
	BBS	#UETUNT$V_TESTABLE,-	; BR if this unit is testable...
		UETUNT$B_FLAGS(R11),20$
	MOVB	#^A/N/,BUFFER+4		; ...else disable the UCB record...
	$UPDATE RAB = (R10)		; ...here
	BLBS	R0,20$			; Look at the next record if no error
UPDATE_FAILED:
	PUSHL	RAB$L_STV(R10)		; Do a simple message...
	PUSHL	R0			; ...to tell of the failure
	PUSHAL	INIDEV_UPDERR
	PUSHL	#1
	EXTZV	#STS$V_SEVERITY,-	; Copy the severity from RMS status...
		#STS$S_SEVERITY,R0,-(SP)
	BISL2	#UETP$_TEXT,(SP)	; ...to our message
	CALLS	#5,G^LIB$SIGNAL
END_UPDATE:
	PUSHL	#0			; Set the time flag
	PUSHAL	TEST_NAME		; Push the test name
	PUSHL	#2			; Push arg count
	EXTZV	#STS$V_SEVERITY,-	; Push the proper exit severity...
		#STS$S_SEVERITY,-
		STATUS,-(SP)
	BISL2	#UETP$_ENDEDD,(SP)	; ...and use it in our message code
	PUSHL	#4
	MOVL	SP,R1
	$PUTMSG_S MSGVEC = (R1)		; Output the message
	$SETPRN_S PRCNAM = ACNT_NAME	; Reset the process name
	RET				; That's all folks!

	.END	UETDMPF00
