MODULE	CSPRCPCAC
		(IDENT = 'V04-000'
		,LANGUAGE (BLISS32)
		,ADDRESSING_MODE (EXTERNAL = GENERAL)
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!++
!
! FACILITY:	Cluster Server Process 
!
! ABSTRACT:	Action routine for Recovery Control Process control functions
!
! AUTHOR:	Paul R. Beck
!
! DATE:		 9-JUN-1983 		Last Edit:  29-JUL-1983 17:59:54 
!
! REVISION HISTORY:
!
!	V03-003	ADE0001		Alan D. Eldridge	 10-Feb-1984
!		Rename module
!
!	V03-002	PRB0233		Paul Beck		 29-JUL-1983 17:59
!		Renamed to CSPRCPCAC.B32 (9 char!) Also, get CSPDEF from LIB$.
!
!	V03-001	PRB0215		Paul Beck		 26-JUN-1983 21:10
!		Get CSPDEF from SHRLIB.
!--

! Require files:
!
LIBRARY
    'SYS$LIBRARY:LIB';			! define system services
REQUIRE
    'LIB$:CSPDEF';			! define CSD offsets
LINKAGE
    JSB_2	= JSB (REGISTER=2);
!+
! External references
!-
EXTERNAL
    CSP$GL_CURCTX;			! address of current context block
EXTERNAL LITERAL
    EXE$C_SYSEFN;			! system event flag

%SBTTL	'CSP$RCPCACT - action routine for Recovery Control Process'
!++
! CSP$RCPCACT
!
! FUNCTIONAL DESCRIPTION:
!	Action routine which runs in the context of the Cluster Server
!	Process to receive RCP control blocks from other RCPs in the
!	cluster and forward them to the local RCP through its input mailbox.
! CALLING SEQUENCE:
!	JSB	CSP$RCPCACT via CASE table
! FORMAL PARAMETERS:
!	P1 (R2)	= address of CSD received for RCPC action routine
! IMPLICIT PARAMETERS:
!	CSD$L_SENDOFF = address of RCP control structure.
! COMPLETION CODES:
!
!--
GLOBAL ROUTINE CSP$RCPCACT ( CSD: REF BLOCK [,BYTE] ): JSB_2 =
BEGIN
LOCAL
    RCPC	: REF BLOCK [,BYTE],		! portion of CSD to fwd to RCP
    CHANNEL	: WORD,				! channel to RCP input mailbox
    IOSB	: VECTOR [2,LONG],		! local IOSB
    STATUS;
EXTERNAL ROUTINE
    CSP$$WAIT,					! common stall routine
    CSP$$RESUME;				! common completion AST

STATUS = $ASSIGN ( DEVNAM = %ASCID 'JNL$RCP_INPUT', CHAN = CHANNEL );
IF NOT .STATUS THEN RETURN .STATUS;
RCPC = .CSD [CSD$L_SENDOFF];
STATUS = $QIO ( CHAN	= .CHANNEL,
		FUNC	= IO$_WRITEVBLK,
		IOSB	= IOSB,
		EFN	= EXE$C_SYSEFN,
		ASTADR	= CSP$$RESUME,		
		ASTPRM	= .CSP$GL_CURCTX,
		P1	= .RCPC,
		P2	= .RCPC [RRP$W_SIZE] );
!
! Wait for I/O to complete. Allow other threads to run.
!
IF .STATUS THEN CSP$$WAIT();
!
! That's all, folks.
!
RETURN $DASSGN ( CHAN = .CHANNEL );
END;

END
ELUDOM
