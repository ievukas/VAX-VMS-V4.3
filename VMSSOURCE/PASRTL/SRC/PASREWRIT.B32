MODULE PAS$REWRITE2 ( %TITLE 'REWRITE procedure'
		IDENT = '1-004'		! File: PASREWRIT.B32 Edit: SBL1004
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains PAS$REWRITE2, which implements the
!	VAX-11 Pascal REWRITE procedure.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
! 1-002 - Set FAB$V_TEF if $TRUNCATE successful on sequential files.  SBL 8-July-1982
! 1-003 - Don't $REWIND, etc., unless file is a disk or tape.  SBL 29-July-1982
! 1-004 - Clear RAB$V_NLK.  SBL 8-Apr-1983
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$REWRITE2: NOVALUE;			! Do a REWRITE

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE

%SBTTL 'PAS$REWRITE2 - REWRITE procedure'
GLOBAL ROUTINE PAS$REWRITE2 (				! Do a REWRITE
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	ERROR						! Error unwind address
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAS$REWRITE2 implements the VAX-11 Pascal REWRITE procedure.  It
!	opens the file if not already open, deletes all data from the file,
!	and enters Generation mode.
!
! CALLING SEQUENCE:
!
!	CALL PAS$REWRITE2 (PFV.mr.r [, ERROR.j.r])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	ERROR		- Optional.  If specified, the address to unwind to in
!			  case of an error.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Throws away partial line, if any.
!	Deletes all data from the file.
!	Positions to the beginning of the file.
!	Enters Generation mode.
!
! SIGNALLED ERRORS:
!
!	REWNOTALL - REWRITE not allowed without exclusive access
!	ERRDURREW - error during REWRITE
!	GENNOTALL - Generation mode not allowed
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,		! File control block
	PFV_ADDR: VOLATILE,				! Enable argument
	UNWIND_ACT: VOLATILE,				! Enable argument
	ERROR_ADDR: VOLATILE;				! Enable argument

    BIND
	RAB = FCB: REF BLOCK [, BYTE],			! RAB is also FCB address
	FAB = FCB: REF $PAS$FAB_FCB_STRUCT,		! FAB is based on FCB
	NAM = FCB: REF $PAS$NAM_FCB_STRUCT;		! NAM is based on FCB

    BUILTIN
	ACTUALCOUNT,
	TESTBITSS;

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    IF ACTUALCOUNT () GEQU 2
    THEN
	ERROR_ADDR = .ERROR;		! Set unwind address

    !+
    ! Set enable argument for PFV address.
    !-

    PFV_ADDR = PFV [PFV$R_PFV];

    !+
    ! Validate and lock PFV.
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Open file if it should be implicitly opened.
    !-

    IF NOT .PFV [PFV$V_VALID]
    THEN
	PAS$$OPEN_IMPLICIT (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! See if the file is open.  If not, open it.
    !-

    IF NOT .PFV [PFV$V_OPEN]	! Not open
    THEN
	PAS$$OPEN (PFV [PFV$R_PFV], PAS$K_HISTORY_NEW; FCB);

    !+
    ! If the file has the NOWRITE attribute, signal an error.
    !-

    IF .FCB [FCB$V_NOWRITE]
    THEN
	$PAS$IO_ERROR (PAS$_GENNOTALL,0);	! Generation mode not allowed

    !+
    ! If a textfile, and if in Generation mode, and if the buffer
    ! is not empty, do a WRITELN.
    !-

    IF .FCB [FCB$V_TEXT] AND .FCB [FCB$V_GENERATION] AND
	(.FCB [FCB$A_RECORD_CUR] GTRA .FCB [FCB$A_RECORD_BEG])
    THEN
	PAS$$WRITELN (PFV [PFV$R_PFV], FCB [FCB$R_FCB]);

    !+
    ! Cancel any lazy lookahead in progress.
    !-

    FCB [FCB$V_LAZY] = 0;

    !+
    ! Clear RAB$V_NLK which may have been set by PAS$GET_UNLOCK.
    !-

    RAB [RAB$V_NLK] = 0;

    !+
    ! Is the device a file oriented device and not process-permanent?  
    ! If so, proceed with rewind.
    !-

    IF .FCB [FCB$V_FOD] AND NOT .NAM [NAM$V_PPF]
    THEN
	BEGIN

	!+
	! If this is a sequential organization file, we rewind and truncate.
	! For relative and indexed organizations, we must rewind and delete
	! every record.
	!-
	
	RAB [RAB$B_RAC] = RAB$C_SEQ; ! Set sequential access
	RAB [RAB$B_KRF] = 0;	! Rewind primary key if indexed
	IF NOT $PAS$RMS_OP ($REWIND (RAB=.RAB))
	THEN
	    IF .RAB [RAB$L_STS] NEQ RMS$_IOP AND	! Inappropriate operation
	       .RAB [RAB$L_STS] NEQ RMS$_EOF AND	! End of file
	       .RAB [RAB$L_STS] NEQ RMS$_BOF		! Already at beginning of file
	    THEN
		$PAS$IO_ERROR (PAS$_ERRDURREW);		! Error during REWRITE

	!+
	! The file is now rewound.  If we got RMS$_IOP, there's nothing
	! more we need to do.  Otherwise, split on the file organization
	! to either truncate the file or delete all records.
	!-

	IF .RAB [RAB$L_STS] NEQ RMS$_IOP
	THEN
	    BEGIN
	    !+
	    ! Split depending on file organization
	    !-
	    IF .FAB [FAB$B_ORG] EQL FAB$C_SEQ	! Sequential
	    THEN
		BEGIN
		IF NOT $PAS$RMS_OP ($GET (RAB=.RAB))	! Read first record, if any
		THEN
		    BEGIN
		    IF .RAB [RAB$L_STS] NEQ RMS$_EOF 	! End of file?
		    THEN
			$PAS$IO_ERROR (PAS$_ERRDURREW);	! Error during REWRITE
		    END
		ELSE
		    BEGIN
		    !+
		    ! GET succeeded.  Do a $TRUNCATE.
		    !-

		    IF NOT $PAS$RMS_OP ($TRUNCATE (RAB=.RAB))
		    THEN
			$PAS$IO_ERROR (PAS$_ERRDURREW);	! Error during REWRITE

		    END;

		!+
		! So far, all we've done is set the end-of-file mark to the
		! beginning of the file.  The allocated space is still there.
		! Set FAB$V_TEF so that all unused allocated space will be
		! returned when the file is closed.
		!-

		FAB [FAB$V_TEF] = 1;

		END
	    ELSE
		BEGIN
		!+
		! Relative and Indexed organizations.  Get and Delete all
		! records.
		!-

		!+
		! Do an initial $GET to see if the file is empty.
		!-

		IF NOT $PAS$RMS_OP ($GET (RAB=.RAB))
		THEN
		    BEGIN
		    !+
		    ! If file is empty, then don't do anything else.
		    ! Otherwise, we'll have to require that the user have
		    ! exclusive access to the file.
		    !-

		    IF .RAB [RAB$L_STS] NEQ RMS$_EOF
		    THEN
			$PAS$IO_ERROR (PAS$_ERRDURREW);	! Error during REWRITE
		    END
		ELSE
		    BEGIN
		    !+
		    ! We can only scratch the data in the file if we have exclusive
		    ! access to it.  If not, give an error
		    !-
		
		    IF NOT .FAB [FAB$V_NIL]
		    THEN
			$PAS$IO_ERROR (PAS$_REWNOTALL);	! REWRITE not allowed
    
		    WHILE 1 DO
			BEGIN
			IF NOT $PAS$RMS_OP ($DELETE (RAB=.RAB))
			THEN
			    $PAS$IO_ERROR (PAS$_ERRDURREW);	! Error during REWRITE
			IF NOT $PAS$RMS_OP ($GET (RAB=.RAB))
			THEN
			    BEGIN
			    IF .RAB [RAB$L_STS] EQL RMS$_EOF
			    THEN
				EXITLOOP
			    ELSE
				$PAS$IO_ERROR (PAS$_ERRDURREW);	! Error during REWRITE
			    END;
			END;
		    END;
		END;
	    END;

	!+
	! Rewind again to put us at the beginning.
	!-
    
	$PAS$RMS_OP ($REWIND (RAB=.RAB));	! Ignore return status
	END;

    !+
    ! Set Generation mode.  Reset buffer pointers.
    ! Set "truncate-on-put" so that first $PUT will succeed to a magtape.
    ! An RMS restriction prevents ordinary $PUTs from succeeding if the
    ! magtape file is empty.  This bit will be cleared after the first
    ! $PUT.  It is ignored for non-sequential $PUTs.
    !-

    FCB [FCB$V_INSPECTION] = 0;
    FCB [FCB$V_GENERATION] = 1;
    FCB [FCB$A_RECORD_BEG] = .RAB [RAB$L_UBF];
    FCB [FCB$A_RECORD_CUR] = .FCB [FCB$A_RECORD_BEG];
    FCB [FCB$L_RECORD_LEN] = .RAB [RAB$W_USZ];
    FCB [FCB$A_RECORD_END] = .FCB [FCB$A_RECORD_BEG] + .FCB [FCB$L_RECORD_LEN];
    FCB [FCB$V_EOF] = 1;
    FCB [FCB$V_LOCATE] = 0;
    FCB [FCB$V_PARTIAL_LINE] = 0;
    RAB [RAB$V_TPT] = 1;

    !+
    ! Undefine the file buffer
    ! Validate the status bits
    ! Indicate successful completion
    ! Unlock the file
    !-

    PFV [PFV$V_EOF_DEFINED] = 1;    
    PFV [PFV$V_VALID] = 1;
    PFV [PFV$V_DFB] = 0;
    FCB [FCB$L_STATUS] = 0;
    PFV [PFV$V_LOCK] = 0;

    RETURN;

    END;					! End of routine PAS$REWRITE2

!<BLF/PAGE>

END						! End of module PAS$REWRITE2

ELUDOM
