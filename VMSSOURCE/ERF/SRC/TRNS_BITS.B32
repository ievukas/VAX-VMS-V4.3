MODULE TRANSLATE_BITS
(%TITLE 'Translate bits to text'
Ident = 'V04-000') =
Begin
	
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  ERF, Error Log Report Generator
!
! ABSTRACT:
!
! 	This module contains that translates bit to text for single  
!	bit fields.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, user mode.
!
! AUTHOR:  Sharon Reynolds,	CREATION DATE:	20-Feb-1984
!
!
!	V04-001	SAR0284		Sharon A. Reynolds	2-Jul-1984
!		- Added FAO string building as a function of this 
!		routine.
!--
REQUIRE 'SRC$:ERFDEF.REQ' ;

FORWARD ROUTINE
    Translate_bits ;

EXTERNAL ROUTINE
    Lib$get_vm ;

OWN
    Arglist: vector [31],
    Fao_string_desc:	$BBLOCK [8],
    Initial_execution:	Initial (0) ;


GLOBAL Routine TRANSLATE_BITS (register_contents,register_mask,desc_table,
				out_arglist,fao_string,control_flag) = 
Begin

!+
!
!    Functional Description:
!
!	Given the mask of bits to translate, this routine will translate
!	bit to text for a given register. It will build a list of the
!	addresses of the descriptors of the text that needs to be
!	output. If the 'control_flag' is '0' then all set bits are
!	translated; if the 'control_flag' is '1' then all clear bits
!	are translated. An FAO string will be built and the address 
!	returned to the calling routine.
!
!    Calling Sequence:
!
!	TRANSLATE_BITS (register_contents,register_mask,descriptor_table,
!			out_arglist,fao_string,control_flag) ;
!
!    Input Parameters:
!
!	register_contents = binary data,
!	register_mask     = longword indicating which bits should be translated 
!			    (bit set = bit translated),
!	descriptor_table  = address of descriptor table pointing to text,
!	control_flag      = if '0' then translate bits that are set, if '1'
!			    then translate bits that are clear
!
!    Output Parameters:
!
!	out_arglist = returns the address of a list of the addresses of 
!		      the descriptors for the text that should be output.
!	fao_string  = returns the address of descriptor for the FAO string
!		      that got built.
!
!--

LOCAL
    Blk_index:	Initial (0),
    Index:	Initial (0),
    Arg_index:	Byte
		Initial (0),
    End_bit:	Byte
		Initial (byte(31)),
    Start_bit:	Byte
		Initial (0),
    Bit_position: Initial (0),
    Field_size:	Byte,
    Start_position,
    Status ;

MAP
    Register_contents:		REF $BBLOCK,
    Register_mask:		REF $BBLOCK,
    Desc_table:			REF BLOCKVECTOR [,2,long] ;

BUILTIN
    FFS ;

!
! If first execution, then get the fao string storage.
!
If .initial_execution EQL 0
Then
    Begin
    Initial_execution  = 1 ;
    If NOT (status = LIB$GET_VM (%REF(500),fao_string_desc[dsc$a_pointer]))
    Then
	Signal_stop (.status) ;
    End ;	

!
! Find starting bit for the translation (from the mask).
!
Field_size = 32 ;
Start_position = 0 ;

Until .start_position GEQ 32 do
    Begin
    If NOT (FFS (start_position,field_size,
		    .register_mask,bit_position))
    Then
	Begin
	If .start_position EQL 0
	Then 
	    Start_bit = .bit_position
	Else
	    End_bit = .bit_position ;
	End ;

    Start_position = .bit_position + 1 ;
    Field_size = 32 - .start_position ;
    End ;

!
! Determine if the bits should be translated. If so, determine if the 
! bit is set/clear and whether it should be translated. If so, get the 
! address of the descriptor for the associated text.
!
Incr index from .start_bit to .end_bit do
    Begin
    If .register_mask[0,.index,1,0]
    Then
	Begin
	If (NOT ..control_flag AND .register_contents[0,.index,1,0]) 
	  OR ((..control_flag) AND (NOT .register_contents[0,.index,1,0]))
	Then
	    Begin
	    Arglist[.arg_index] = desc_table[.blk_index,0,0,0,0] ;
	    Arg_index = .arg_index + 1 ;
	    End ;

	Blk_index = .blk_index + 1 ;
	End ;
    End ;

!
! Determine whether any bits were translated, set up the output argument 
! address and the address of the descriptor for the FAO string for return 
! to the calling routine, build and FAO string, and return with a true value.
!
If .arg_index NEQ 0
Then
    Begin
    .Out_arglist = arglist ;
    .Fao_string = fao_string_desc ;

    Fao_string_desc[dsc$w_length] = 0 ;
    BUILD_FAO_STRING (1,'!39< !>!AS',fao_string_desc,
			(.arg_index - 1),'!/!39< !>!AS',fao_string_desc) ;
    Return true ;
    End ;

Return false ;

End ;	! Routine

End
ELUDOM
