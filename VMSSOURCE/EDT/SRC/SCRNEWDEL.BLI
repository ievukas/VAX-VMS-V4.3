%TITLE 'EDT$SCRNEWDEL - delete a line from the screen'
MODULE EDT$SCRNEWDEL (				! delete a line from the screen
		IDENT = 'V04-000'			! File: SCRNEWDEL.BLI Edit: JBS1007
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module updates the screen information data structure to
!	reflect the deletion of a line.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Sharon M. Burlingame, CREATION DATE: September 15, 1982
!
! MODIFIED BY:
!
! 1-001	- Original.  SMB 15-Sep-1982.
! 1-002 - Fix up the original to conform to new design.  SMB 10-Oct-1982
! 1-003 - Add more code to remove existing bugs.  SMB 26-Oct-1982
! 1-004	- Change updating of the screen pointers.  JBS 29-Oct-1982
! 1-005	- Don't set the rebuild flag.  JBS 03-Jan-1983
! 1-006	- Also invalidate EDT$$A_CSR_SCRPTR if it is deleted.  JBS 20-May-1983
! 1-007	- Improve the appearance of the listing.  JBS 17-Jun-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$SC_LNDEL : NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$SC_LNDEL  - delete a line from the screen'

GLOBAL ROUTINE EDT$$SC_LNDEL (			! Delete a line from the screen
    SCRPTR					! Screen pointer to delete
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Update the screen line information structure by
!	releasing the memory to the pool of available storage.
!	Update various screen line pointers as necessary.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$G_MEM_CNT
!	EDT$$A_BOT_SCRPTR
!	EDT$$A_EOB_SCRPTR
!	EDT$$A_TOP_SCRPTR
!	EDT$$A_FST_AVLN
!	EDT$$A_FST_SCRPTR
!	EDT$$A_LST_SCRPTR
!	EDT$$A_CSR_SCRPTR
!	EDT$$L_CUR_SCRLN
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_MEM_CNT
!	EDT$$A_BOT_SCRPTR
!	EDT$$A_EOB_SCRPTR
!	EDT$$A_TOP_SCRPTR
!	EDT$$A_FST_AVLN
!	EDT$$A_FST_SCRPTR
!	EDT$$A_LST_SCRPTR
!	EDT$$A_CSR_SCRPTR
!	EDT$$L_CUR_SCRLN
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL
	EDT$$G_MEM_CNT,				! Allocated memory count
	EDT$$A_BOT_SCRPTR : REF SCREEN_LINE,	! Bottom screen pointer
	EDT$$A_EOB_SCRPTR : REF SCREEN_LINE,	! EOB screen pointer
	EDT$$A_TOP_SCRPTR : REF SCREEN_LINE,	! Top screen pointer
	EDT$$A_CSR_SCRPTR : REF SCREEN_LINE,	! Current screen pointer
	EDT$$A_FST_AVLN : REF SCREEN_LINE,	! First available screen info memory
	EDT$$A_FST_SCRPTR : REF SCREEN_LINE,	! Pointer to first screen line info
	EDT$$A_LST_SCRPTR : REF SCREEN_LINE;	! Pointer to last screen line info

    MAP
	SCRPTR : REF SCREEN_LINE;		! Screen pointer parameter

    LOCAL
	NXT_ADDR : REF SCREEN_LINE,		! Address of next line info
	PREV_ADDR : REF SCREEN_LINE;		! Address of previous line info

!+
! Find the next and previous pointers of the line being deleted.
!-
    NXT_ADDR = .SCRPTR [SCR_NXT_LINE];
    PREV_ADDR = .SCRPTR [SCR_PRV_LINE];
!+
! Check for deleting the first line of the screen data base.
!-

    IF (.EDT$$A_FST_SCRPTR EQLA .SCRPTR)
    THEN
	BEGIN
	EDT$$A_FST_SCRPTR = .NXT_ADDR;
	EDT$$A_FST_SCRPTR [SCR_PRV_LINE] = 0;
	END;

!+
! Check for deleting the last line of the screen data base.
!-

    IF (.SCRPTR EQLA .EDT$$A_LST_SCRPTR)
    THEN
	BEGIN
	EDT$$A_LST_SCRPTR = .PREV_ADDR;
	EDT$$A_LST_SCRPTR [SCR_NXT_LINE] = 0;
	END;

!+
! Check for EOB deleted off the screen
!-

    IF (.EDT$$A_EOB_SCRPTR EQLA .SCRPTR) THEN EDT$$A_EOB_SCRPTR = 0;

!+
! Check for deleting the top line from the data base.
!-

    IF (.EDT$$A_TOP_SCRPTR EQLA .SCRPTR) THEN EDT$$A_TOP_SCRPTR = 0;

!+
! Check for deleting the bottom line from the data base.
!-

    IF (.EDT$$A_BOT_SCRPTR EQLA .SCRPTR) THEN EDT$$A_BOT_SCRPTR = 0;

!+
! Check for deleting the current line from the data base.  This will likely
! cause the screen data base to get rebuilt.
!-

    IF (.EDT$$A_CSR_SCRPTR EQLA .SCRPTR) THEN EDT$$A_CSR_SCRPTR = 0;

!+
! Fix up the previous and next pointers.
!-

    IF (.PREV_ADDR NEQA 0) THEN PREV_ADDR [SCR_NXT_LINE] = .NXT_ADDR;

    IF (.NXT_ADDR NEQA 0) THEN NXT_ADDR [SCR_PRV_LINE] = .PREV_ADDR;

!+
! The line being deleted is indicated by SCRPTR.  If there
! are no screen line buffers in the free list, then start
! a new list; otherwise add the memory to the front of the current list.
!-
    SCRPTR [SCR_NXT_LINE] = .EDT$$A_FST_AVLN;
    SCRPTR [SCR_PRV_LINE] = -1;			! For debugging
    EDT$$A_FST_AVLN = .SCRPTR;
    EDT$$G_MEM_CNT = .EDT$$G_MEM_CNT - 1;
!+
! Make sure the counter agrees with the data base.
!-

    IF 0
    THEN
	BEGIN

	LOCAL
	    COUNT,
	    SCRPTR1 : REF SCREEN_LINE,
	    SCRPTR2 : REF SCREEN_LINE;

	COUNT = 0;
	SCRPTR1 = .EDT$$A_FST_SCRPTR;
	ASSERT (.SCRPTR1 [SCR_PRV_LINE] EQL 0);

	WHILE (.SCRPTR1 NEQA 0) DO
	    BEGIN
	    COUNT = .COUNT + 1;
	    SCRPTR2 = .SCRPTR1;
	    SCRPTR1 = .SCRPTR1 [SCR_NXT_LINE];

	    IF (.SCRPTR1 NEQA 0)
	    THEN
		BEGIN
		ASSERT (.SCRPTR1 [SCR_PRV_LINE] EQLA .SCRPTR2);
		ASSERT (.SCRPTR1 NEQA .EDT$$A_FST_SCRPTR);
		END;

	    END;

	ASSERT (.SCRPTR2 EQLA .EDT$$A_LST_SCRPTR);
	ASSERT (.COUNT EQL .EDT$$G_MEM_CNT);
	END;

    END;					! of routine EDT$$SC_LNDEL

!<BLF/PAGE>

END						! of module EDT$SCRNEWDEL

ELUDOM
