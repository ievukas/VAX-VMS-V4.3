%TITLE 'Misc. error checks and messages.'
MODULE RSDERM (
		IDENT = 'V04-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Residual error messages.  Issues error messages for various
!	    error conditions for which no error messages have been
!	    issued.
!
!	    Also contains error detection and error message routines
!	    that are called from more than one location.
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: June, 1978
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	006	REM00006	Ray Marshall	22-June-1983
!		Modified routine TSTTFE to now look to see if we are within a
!		  .LITERAL.  If so, it issues an error and closes forces a
!		  .END LITERAL.
!
!	005	KFA00005	Ken Alden	18-Mar-1983
!		Made SAVE/RESTORE related items visible to DSR.
!
!	004	REM00004	Ray Marshall	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'

REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    tstblk : NOVALUE,
    tstcnd : NOVALUE,
    tstres : NOVALUE,
    tsttfe : NOVALUE,
    pntbac : NOVALUE,
    negind : NOVALUE,
    remneg : NOVALUE,
    xmarg  : NOVALUE,
    remmrg : NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    gca : gca_definition,
    ifstk : ifstack,
    savstk : savstack,
    irac : irac_definition;

EXTERNAL
    frmstd,
    frmstk : form_stack;

EXTERNAL LITERAL 				!Error messages
    rnfbak,
    rnflde,
    rnfmei,
    rnfmrc,
    rnfmrg,
    rnfmrs,
    rnfnia,
    rnfnic,
    rnfskc,
    rnftfe;

EXTERNAL ROUTINE
    erm,
    erml,
    ermn,
    lit,
    savres,
    stkfrm;



%SBTTL 'TSTBLK -- test for unclosed .NOTE or .LIST directives'
GLOBAL ROUTINE tstblk (depth) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION
!
!	This routine checks to see if FRMSTK is ok: i.e., certain open
!	.NOTE and .LIST commands have been closed.  If there are any
!	unclosed commands it issues an error message and pops the stack.
!
! FORMAL PARAMETERS:
!
!	DEPTH specifies the maximum allowed depth of .REQUIRE commands.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    IF .frmstd EQL 0  THEN
	RETURN;				!No unclosed lists, notes, or literals.

    IF .depth GTR .frmstk [.frmstd, frmstk_req_d]  THEN
	RETURN;				!Unclosed lists or notes, but in files still open.

    erm (rnftfe, 0, 0);			!There are unclosed lists/notes to be reported.
    !Now point the user back to those commands that have not been closed

    WHILE ((.frmstd GTR 0) AND (.depth LEQ .frmstk [.frmstd, frmstk_req_d])) DO
	BEGIN
	pntbac ();
	stkfrm (-1);			!Unstack one entry, regardless of identity.
	END;

    END;				!End of TSTBLK

%SBTTL 'TSTCND -- Check and report missing .ENDIFs'
GLOBAL ROUTINE tstcnd (depth) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION
!
!
! FORMAL PARAMETERS:
!
!	DEPTH specifies the maximum allowed depth of .REQUIRE commands.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN
    !Check for missing .ENDIF commands.  This is temporary coding. In a
    !later version this code should point back to the opening commands,
    !like the code above does for .LIST and .NOTE commands.

    IF 	.ifstk [0, ifstk_depth] EQL 0  THEN
	RETURN;				!There are no missing .ENDIF commands.

    IF .depth EQL 0  THEN
	erml (rnfmei)		! Missing .ENDIF commands, and end of file.
    ELSE
	IF .ifstk [.ifstk [0, ifstk_depth], ifstk_req_d] GEQ .depth  THEN
	    erml (rnfskc);	! Missing .ENDIF commands detected when
				! unstacking .REQUIRE files

    END;					!End of TSTCND

%SBTTL 'TSTRES -- Check for, report, and restore missing .RESTOREs'
ROUTINE tstres (depth) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION
!
!	This routine checks to see if SAVSTK is ok: i.e., certain open
!	.SAVE/SAVE ALL and .RESTORE commands have been closed.  If there are any
!	unclosed commands it issues an error message and pops the stack.
!
! FORMAL PARAMETERS:
!
!	DEPTH specifies the maximum allowed depth of .REQUIRE commands.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN
    OWN
      x;

    LOCAL
      hold_iseqn,
      hold_page;

    x = .savstk [0, savstk_depth];

    IF 	(.x EQL 0)  THEN
	RETURN;			! No unclosed .SAVEs.

    IF .depth GTR .savstk [.x, savstk_req_d]  THEN
	RETURN;			! Unclosed SAVEs but in files still open.

!There are unclosed saves to be reported.

    erml (rnfmrs);	! Missing .ReStore commands, at end of file.

! Now point the user back to the point where the corresponding
! SAVE/SAVEALL was made.

    WHILE ( (.savstk [0, savstk_depth]  GTR 0)
			AND
	  (.depth LEQ .savstk [.savstk [0, savstk_depth] , savstk_req_d]) ) DO
     	BEGIN	
	hold_page = .irac_ipagen;
	hold_iseqn = .irac_iseqn;
	irac_ipagen = .savstk [.savstk [0, savstk_depth], savstk_ipagen];
	irac_iseqn = .savstk [.savstk [0, savstk_depth], savstk_iseqn];

	IF .gca_req_depth NEQ 0  THEN   ! Still in a require file, rewind
	    erm (rnfbak			!  stack.  Otherwise just quit.
		 ,.savstk [.savstk [0, savstk_depth], savstk_fspecp]
		 ,.savstk [.savstk [0, savstk_depth], savstk_fspecc] );

	irac_ipagen = .hold_page;
	irac_iseqn = .hold_iseqn;
	savres (h_restore,-1);	    ! Unstack one entry, regardless of identity.
	END;

    END;				! End of TSTRES

GLOBAL ROUTINE tsttfe (depth) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION
!
!	This routine does nothing more than merely pass coontrol to each of 
!	the respective test routines to check for unclosed lists, saves, etc.
!	Oh, one exception:  It now checks for being within a .LITERAL.  If it
!	finds this to be true, it issues an error and closes the literal.
!
! FORMAL PARAMETERS:
!
!	DEPTH specifies the maximum allowed depth of .REQUIRE commands.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    IF .gca_literal THEN		! If within a literal;
	BEGIN
	erm (rnflde			!  say that it wasn't closed,
	      ,CH$PTR(UPLIT('At or near end of document'))!  and where
	      ,26);
	lit( h_end_literal )		!  and then close it.
	END;
    tstblk (.depth);			! Check for unclosed lists, notes, and literals.
    tstcnd (.depth);			! Check for unclosed ifs and ifnots.
    tstres (.depth)			! Check for unclosed saves.

    END;				! End of TSTTFE


GLOBAL ROUTINE pntbac : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION
!
!	This routine saves the input file line/page information.  It then
!	substitutes information from FRMSTK for that information.  Then ERM is
!	called to output a message indicating where to look in the input file
!	for the command that made the stack entry.  But ERM does not have
!	enough flexibility to accept all that information as parameters.
!	However, it can pick it up from IRAC, which it does.  In other words,
!	this routine fakes out ERM a bit.
!
!	After ERM returns, the original information is restored.
!
!--
    BEGIN

    LOCAL
	hold_iseqn,
	hold_page;

    hold_page = .irac_ipagen;
    hold_iseqn = .irac_iseqn;
    irac_ipagen = .frmstk [.frmstd, frmstk_ipagen];
    irac_iseqn = .frmstk [.frmstd, frmstk_iseqn];
    erm (rnfbak
	 ,.frmstk [.frmstd, frmstk_fspecp]
	 ,.frmstk [.frmstd, frmstk_fspecc] );
    irac_ipagen = .hold_page;
    irac_iseqn = .hold_iseqn;
    END;					!End of PNTBAC


GLOBAL ROUTINE negind : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	NEGIND keeps track of attempted indents past the left side of the page.
!	To avoid issuing so many error messages that the user would be annoyed,
!	it only issues an error message for the first such attempt.  Other
!	violations are simply counted; the summary count is output by REMNEG
!	later.
!
! FORMAL PARAMETERS;	None
!
! IMPLICIT INPUTS	None
!
! IMPLICIT OUTPUTS	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    IF	.gca_nia EQL 0  THEN
	erml (rnfnia);

    gca_nia = .gca_nia + 1;
    END;					!End of NEGIND


GLOBAL ROUTINE remneg : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Issues an error message indicating how many negative
! 	indents have been detected.  Then resets the count to zero.
!
!	Used together with NEGIND.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    IF	.GCA_NIA GTR 1 THEN		! 1 or zero means all accounted for.
	ermn (rnfnic, .gca_nia - 1);	! Subtract off reported negative indent

    gca_nia = 0;			! This starts the counting over again.
    END;				! End of REMNEG


%SBTTL 'XMARG -- Controls R/L margin violation error messages'
GLOBAL ROUTINE xmarg : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	XMARG keeps track of attempted margin crossings (i.e., left
!	margin exceeds right margin).  To avoid issuing so many
!	messages that the user would be annoyed, it only issues
!	an error message for the first such attempt.  Other violations
!	are simply counted; the summary count is output by REMMRG later.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    IF	.gca_xmarg EQL 0  THEN
	erml (rnfmrg);

    gca_xmarg = .gca_xmarg + 1;
    END;					!End of XMARG


%SBTTL 'REMMRG -- reports # of crossed margin errors'
GLOBAL ROUTINE REMMRG : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Issues an error message indicating how many crossed
! 	margins have been detected.  Then resets the count to zero.
!
!	Used together with XMARG.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    IF	.gca_xmarg GTR 1 THEN		! 1 or zero means all accounted for.
	ermn (rnfmrc, .gca_xmarg - 1);	! Subtract off reported negative indent

    gca_xmarg = 0;			! This starts the counting over again.
    END;				! End of REMMRG

END						!End of module
ELUDOM
