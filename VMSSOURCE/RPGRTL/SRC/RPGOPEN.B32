MODULE RPG$OPEN( %TITLE 'Locate key of reference'
		IDENT = '1-001'		! file:RPGOPEN.B32  EDIT:DJB1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	RPGII SUPPORT
!
! ABSTRACT:
!
!	This module contains 1 procedure to locate the appropriate key of
!	reference in an existing indexed file.
!
! ENVIRONMENT:	Vax-11 User Mode
!
! AUTHOR: D J Braffitt, CREATION DATE: 18-Mar-1983
!
! MODIFIED BY:
!
! 1-001 Original.						DJB 18-Mar-1983
!--

!<BLF/PAGE>

%SBTTL 'Declarations'
!+
! PROLOGUE FILE:
!-

REQUIRE 'RTLIN:RPGPROLOG';			! Switches, PSECTs, macros,
						!  linkages and LIBRARYs

!+
! LINKAGES
!	NONE
!-

!+
! TABLE OF CONTENTS:
!-

FORWARD ROUTINE
	RPG$OPEN_INDEXED;

!+
! INCLUDE FILES
!	NONE
!-

!+
! MACROS
!	NONE
!-

!+
! EXTERNAL REFERENCES
!-

EXTERNAL ROUTINE
	RPG$IOEXCEPTION;

EXTERNAL LITERAL
	RPG$_ORGNOTIND;

%SBTTL 'RPG$OPEN_INDEXED - Locate key of reference'
GLOBAL ROUTINE RPG$OPEN_INDEXED	(
				FAB:		REF BLOCK[,BYTE]	! Address of FAB
				)=

!++
!
! FUNCTIONAL DESCRIPTION:
!
! This routine is passed the FAB for an indexed file and opens the file
! based on the appropriate key of reference.  The XAB SIZ0, POS0, DTP and NSG
! fields describe the desired key of reference.  The goal of this module is to
! get the appropriate key of reference value into the XAB and RAB.  Any
! RMS error should be returned as the value of this routine so that
! the generated code will call RPG$IOEXCEPTION.  In the case that the file
! organization is not indexed (RMS does not check this, but this module does),
! then RPG$IOEXCEPTION is called directly from this module.
!
! The plan of attack is to OPEN or CREATE the file, and if the file exists,
! make sure that it is indexed and then cycle through
! the various key of reference values using $DISPLAY until the
! XAB is set up correctly.  Then the RAB key of reference is set
! to the key of reference that has been discovered.  The XAB and RAB
! are set initially to the primary key, so if this key matches the
! RPGII programmer's desired key, we are done.  The info on the RPGII
! programmer's desired key should be saved before the OPEN for later
! comparison.
!
! CALLING SEQUENCE:
!
!	CALL RPG$OPEN_INDEXED (fab.rr.r)
!
! FORMAL PARAMETERS:
!
!	fab		- Address of FAB
!
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	RMS status value
!
! SIDE EFFECTS:
!
!	The file pointed to by the fab is opened or created as appropriate.
!
!--

    BEGIN

    MAP
	FAB : REF BLOCK[, BYTE];

    LOCAL
	RAB : REF BLOCK[, BYTE],
	XAB : REF BLOCK[, BYTE],
	SAVE_KEY_POS0 : WORD,
	SAVE_KEY_SIZ0 : BYTE,
	SAVE_KEY_DTP  : BYTE,
	RMS_STATUS;

    RAB = .FAB - RAB$C_BLN;
    XAB = .FAB + FAB$C_BLN + NAM$C_BLN;
    SAVE_KEY_POS0 = .XAB[XAB$W_POS0];
    SAVE_KEY_SIZ0 = .XAB[XAB$B_SIZ0];
    SAVE_KEY_DTP  = .XAB[XAB$B_DTP];

!+
! If the CIF (Create IF) bit is set, call $CREATE which will create the
! file if the open fails.  The XAB checking should only be done if the
! RMS status is other than RMS$_CREATED.
! If the CIF bit is not set, call $OPEN and then perform XAB checking
! only on success return.
!-
    IF .FAB[FAB$V_CIF]
    THEN
	RMS_STATUS = $CREATE(FAB=.FAB)
    ELSE
	RMS_STATUS = $OPEN(FAB=.FAB);

    IF .RMS_STATUS AND (.RMS_STATUS NEQ RMS$_CREATED)
    THEN
	BEGIN
    !+
    ! If we get here, the file already exists and has been successfully
    ! opened.  Check that the file organization is indexed.
    !-
	IF .FAB[FAB$B_ORG] NEQ FAB$C_IDX
	THEN
	    BEGIN
	    RAB[RPG$L_CTX_ERROR] = RPG$_ORGNOTIND;
	    RPG$IOEXCEPTION(3, .RAB);		! The 3 indicates error is in
						!  the file context area
	    RETURN RPG$_ORGNOTIND;
	    END;

    !+
    ! If the XAB POS0, SIZ0 and DTP fields just filled in by the $OPEN match the
    ! requested POS0, SIZ0 and DTP fields and the NSG field is 1
    ! then the current key is to be
    ! the key of reference and we are done except for setting the RAB KRF
    ! byte to be the anem as the XAB REF byte; otherwise, we must change the
    ! key of reference in the XAB and then try a $DISPLAY on the next key
    ! if there is one.
    !-
	WHILE NOT ((.SAVE_KEY_POS0  EQL .XAB[XAB$W_POS0])
	       AND (.SAVE_KEY_SIZ0  EQL .XAB[XAB$B_SIZ0])
	       AND (.SAVE_KEY_DTP   EQL .XAB[XAB$B_DTP])
	       AND (.XAB[XAB$B_NSG] EQL 1)) DO
	    BEGIN
	    XAB[XAB$B_REF] = .XAB[XAB$B_REF] + 1;
	!+
	! Invalid key of reference terminates things.
	!
	! Maybe in the future, some more refined messaged could be given
	! such as invalid key.  In the case of a file that turns out to
	! have just one key, a message pointing to the specific attribute
	! of that key that is in error from the F spec (position, size, data
	! type or number of segments) could be given to the user.  For
	! now, invalid key of reference is returned if no key matching
	! the requested key is found.  This is compatible with PDP-11 RPGII.
	!-
	    RMS_STATUS = $DISPLAY(FAB=.FAB);
	    IF NOT .RMS_STATUS
	    THEN
		EXITLOOP
	    END;
    !+
    ! The RAB key of reference must be set in the case the RMS_STATUS
    ! is successful.
    !-
	IF .RMS_STATUS
	THEN
	    RAB[RAB$B_KRF] = .XAB[XAB$B_REF]
	END;

    RETURN .RMS_STATUS

    END;

END ELUDOM
