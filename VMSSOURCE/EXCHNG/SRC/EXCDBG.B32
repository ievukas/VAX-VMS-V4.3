MODULE	exch$dbg				%TITLE 'Conditionally assembled debugging routines'
		(
		IDENT = 'V04-000',
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE, NONEXTERNAL=WORD_RELATIVE)
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:	EXCHANGE - Foreign volume interchange facility
!
! ABSTRACT:	Miscellaneous debug and trace routines
!
! ENVIRONMENT:	VAX/VMS User mode
!
! AUTHOR:	CW Hobbs		CREATION DATE: 16-July-1982
!
! MODIFIED BY:
!
!	V03-002	CWH3002		CW Hobbs		12-Apr-1984
!		Add routines to dump FAB and NAM.
!
!
!--

! Include files:
!
MACRO $module_name_string = 'exch$dbg' %;	! The require file needs to know our module name
REQUIRE 'SRC$:EXCREQ'
    ;

PSECT
    OWN	 = exch$dbg_own	(WRITE)
    ;

%SBTTL 'Module table of contents'

! Module table of contents:
!
FORWARD ROUTINE
    exch$dbg_dump_dosv : NOVALUE,		! Format the contents of a DOS11$ block
    exch$dbg_fab_dev_print,			! Print device characteristics from FAB info
    exch$dbg_fab_dump,				! Hex dump of a fab
    exch$dbg_fab_name_print,			! Print the name information attached to a FAB
    exch$dbg_nam_dump,				! Hex dump of a nam
    exch$dbg_utl_print_devchar			! Explode a DEV device characteristics field (e.g. FAB$L_DEV)
    ;

! EXCHANGE facility routines
!
EXTERNAL ROUTINE
    exch$dos11_expand_filename,			! Expand filename info into a context block
    exch$util_dos11ctx_allocate,		! Grab a context block 
    exch$util_dos11ctx_release : NOVALUE	! Return the context block
    ;

! Bound declarations:
!
!BIND
!    ;

GLOBAL ROUTINE exch$dbg_dump_dosv (volb : $ref_bblock, flags) : NOVALUE =
BEGIN
$dbgtrc_prefix ('dbg_dump_dosv> ');

LOCAL
    ctx : $ref_bblock,
    ent : $ref_bblock,
    lcl : $bblock [4],
    first
    ;

BIND
    dosv = volb [volb$a_vfmt_specific]	: $ref_bblock
    ;

BUILTIN
    ACTUALCOUNT
    ;

IF ACTUALCOUNT () EQL 2
THEN
    lcl [0,0,32,0] = .flags
ELSE
    lcl [0,0,32,0] = -1;

IF .lcl [dmpdsv$v_volb]
THEN
    $print_fao ('    dump_dosv> entry - volb !XL,  dosv !XL', .volb, .dosv);

$block_check (2, .volb, volb, 623);
$block_check (2, .dosv, dos11, 624);

IF .lcl [dmpdsv$v_status]
THEN
    $print_fao ('    dump_dosv> status - posvalid !UL, bot !UL, tapemark !UL, eot !UL, dir !UL, curmrkd !UL',
		.dosv [dos11$v_position_valid], .dosv [dos11$v_beg_of_tape], .dosv [dos11$v_tape_mark],
		.dosv [dos11$v_end_of_tape], .dosv [dos11$v_directory], .dosv [dos11$v_current_marked]);

IF .lcl [dmpdsv$v_position]
THEN
    $print_fao ('    dump_dosv> .dos11$a_current_entry   !XL,  .dos11$l_current_file  !UL', 
		.dosv [dos11$a_current_entry], .dosv [dos11$l_current_file]);

IF .lcl [dmpdsv$v_entries]
THEN
    BEGIN

    ! If the pointer points to the queue header, we have reached the end of the list
    !
    ent = .dosv [dos11$a_entry_flink];
    ctx = exch$util_dos11ctx_allocate (.volb, 0);	! Grab a context block for the loop
    first = true;
    WHILE .ent NEQ dosv [dos11$q_entry_header]
    DO
	BEGIN

	IF .first
	THEN
	    BEGIN
	    $print_lit ('    dump_dosv> Num   Entry     Flink     Blink      Name             Block  Val');
	    $print_fao ('    dump_dosv> !3UL  !XL  !XL  !XL   !13AF    !5UL    !UL',
		    9999, dosv [dos11$q_entry_header], .dosv [dos11$a_entry_flink], .dosv [dos11$a_entry_blink],
		    12, UPLIT BYTE ('queue-header'), 999999, 99);
	    END;
	first = false;

	CH$MOVE (dos11ctx$s_entry, ent [dos11ent$l_filename_1], ctx [dos11ctx$t_entry]);
	exch$dos11_expand_filename (.ctx);

	$print_fao ('    dump_dosv> !3UL  !XL  !XL  !XL   !13AF    !5UL    !UL',
		    .ent [dos11ent$w_file_number], 	.ent, .ent [dos11ent$a_flink], .ent [dos11ent$a_blink], 
		    .ctx [dos11ctx$l_exp_fullname_len], ctx [dos11ctx$t_exp_fullname],
		    .ent [dos11ent$w_blocks], .ent [dos11ent$v_blocks_valid]);

	ent = .ent [dos11ent$a_flink];		! Move to the next
	END;

    exch$util_dos11ctx_release (.ctx);		! Return the context block
    END;

RETURN;
END;

GLOBAL ROUTINE exch$dbg_fab_dev_print (fabb : $ref_bblock) =	%SBTTL 'exch$dbg_fab_dev_print'
BEGIN

$dbgtrc_prefix ('fab_dev_print > ');

OWN
    devbufsiz,
    devchar,
    devclass,
    devdepend,
    devnam	: $bblock [64],
    devnamlen,
    devtype,
    maxblock;

OWN
    dev_item : VECTOR [22, LONG] INITIAL (
			WORD (dvi$_devbufsiz, 4),	LONG (devbufsiz,0),
			(dvi$_devchar^16 OR 4),		devchar,	0,
			(dvi$_devclass^16 OR 4),	devclass,	0,
			(dvi$_devdepend^16 OR 4),	devdepend,	0,
			(dvi$_fulldevnam^16 OR 64),	devnam,		devnamlen,
			(dvi$_devtype^16 OR 4),		devtype,	0,
			(dvi$_maxblock^16 OR 4),	maxblock,	0,
			0);

LOCAL
    status,
    inp_desc : $desc_block,
    tmp_desc : $desc_block,
    nam : $ref_bblock;			! Pointer to the name block

nam = .fabb [fab$l_nam];			! Get pointer to the name block
$stat_str_desc_init (inp_desc, .nam [nam$b_dev], .nam [nam$l_dev]);	! Input Device name address

status = $getdviw (efn=0, devnam=inp_desc, itmlst=dev_item);
IF NOT .status
THEN
    BEGIN
    $print_fao ('*****  Error in $GETDVI for device "!AS"  *****', inp_desc);
    status = ((.status AND %X'FFFFFFF8') OR 1);
    SIGNAL ($warning_stat (status));
    RETURN 0;
    END;

tmp_desc [dsc$w_length]  = .devnamlen;
tmp_desc [dsc$a_pointer] = devnam;
$print_fao ('Getdvi for name "!AS" resolved to device "!AS"',inp_desc,tmp_desc);
$print_fao ('Bufsiz = !UL,  Maxblocks = !UL,  Class = !XB,  Type = !XB', .devbufsiz, .maxblock, .devclass, .devtype);
BEGIN
BIND
    dep = devdepend : $bblock,
    dev = devchar   : $bblock;
$print_fao ('Cylinders = !UL, Tracks = !UL, Sectors = !UL, DevChar = !XL',
	    .dep[0,16,16,0], .dep[0,8,8,0], .dep[0,0,8,0], .dev [0,0,32,0]);
END;

exch$dbg_utl_print_devchar  (.devchar);

RETURN 1;
END;

GLOBAL ROUTINE exch$dbg_fab_dump (fab : $ref_bblock) =	%SBTTL 'exch$dbg_fab_dump'
BEGIN

$dbgtrc_prefix ('fab_dump> ');

    $print_fao ('    Dump of fab at !XL:', .fab);
!   $print_fao ('        !15AS      !XB          - block id  ', %ASCID 'FAB$B_BID', .fab[FAB$B_BID]);
!   $print_fao ('        !15AS      !XB          - block len  ', %ASCID 'FAB$B_BLN', .fab[FAB$B_BLN]);
    $print_fao ('        !15AS      !XW        - internal file index  ', %ASCID 'FAB$W_IFI', .fab[FAB$W_IFI]);
    $print_fao ('        !15AS      !XL    - file options  ', %ASCID 'FAB$L_FOP', .fab[FAB$L_FOP]);
    $print_fao ('        !15AS      !XL    - status  ', %ASCID 'FAB$L_STS', .fab[FAB$L_STS]);
    $print_fao ('        !15AS      !XL    - status value  ', %ASCID 'FAB$L_STV', .fab[FAB$L_STV]);
!   $print_fao ('        !15AS      !XL    - allocation quantity  ', %ASCID 'FAB$L_ALQ', .fab[FAB$L_ALQ]);
!   $print_fao ('        !15AS      !XW        - default allocation quantity  ', %ASCID 'FAB$W_DEQ', .fab[FAB$W_DEQ]);
    $print_fao ('        !15AS      !XB          - file access  ', %ASCID 'FAB$B_FAC', .fab[FAB$B_FAC]);
    $print_fao ('        !15AS      !XB          - file sharing  ', %ASCID 'FAB$B_SHR', .fab[FAB$B_SHR]);
    $print_fao ('        !15AS      !XL    - user context  ', %ASCID 'FAB$L_CTX', .fab[FAB$L_CTX]);
    $print_fao ('        !15AS      !XB          - file organization  ', %ASCID 'FAB$B_ORG', .fab[FAB$B_ORG]);
    $print_fao ('        !15AS      !XB          - record format  ', %ASCID 'FAB$B_RAT', .fab[FAB$B_RAT]);
    $print_fao ('        !15AS      !XB          - record format  ', %ASCID 'FAB$B_RFM', .fab[FAB$B_RFM]);
    $print_fao ('        !15AS   !XB !XL    "!AF"', %ASCID 'filename',
					.fab[FAB$B_FNS], .fab[FAB$L_FNA], .fab[fab$b_fns], .fab[fab$l_fna]);
    $print_fao ('        !15AS   !XB !XL    "!AF"', %ASCID 'default name',
					.fab[FAB$B_DNS], .fab[FAB$L_DNA], .fab[fab$b_dns], .fab[fab$l_dna]);
    $print_fao ('        !15AS      !XL    - device characteristics  ', %ASCID 'FAB$L_DEV', .fab[FAB$L_DEV]);
    exch$dbg_utl_print_devchar (.fab[FAB$L_DEV]);
    $print_fao ('        !15AS      !XL    - nam block address  ', %ASCID 'FAB$L_NAM', .fab[FAB$L_NAM]);
    IF .fab[fab$l_nam] NEQ 0
    THEN exch$dbg_nam_dump (.fab[fab$l_nam]);

RETURN 1;
END;

GLOBAL ROUTINE exch$dbg_fab_name_print (fabb : $ref_bblock) =	%SBTTL 'exch$dbg_fab_name_print'
BEGIN

$dbgtrc_prefix ('fab_name_print> ');

LOCAL
    tmp_desc : $desc_block,		! A descriptor for the total file name
    dev_desc : $desc_block,		! A descriptor for the device name
    dir_desc : $desc_block,		! A descriptor for the directory name
    dvi_desc : $desc_block,		! A descriptor for the full device name
    nam_desc : $desc_block,		! A descriptor for the name name
    nod_desc : $desc_block,		! A descriptor for the node name
    typ_desc : $desc_block,		! A descriptor for the type name
    ver_desc : $desc_block;		! A descriptor for the version number

BIND
    nam = .fabb [fab$l_nam] : $bblock;	! Get pointer to the name block

tmp_desc [0,0,32,0] = dsc$k_class_s^24 OR dsc$k_dtype_t^16;  ! Static desc
dev_desc [0,0,32,0] = dsc$k_class_s^24 OR dsc$k_dtype_t^16;  ! Static desc
dir_desc [0,0,32,0] = dsc$k_class_s^24 OR dsc$k_dtype_t^16;  ! Static desc
dvi_desc [0,0,32,0] = dsc$k_class_s^24 OR dsc$k_dtype_t^16;  ! Static desc
nam_desc [0,0,32,0] = dsc$k_class_s^24 OR dsc$k_dtype_t^16;  ! Static desc
nod_desc [0,0,32,0] = dsc$k_class_s^24 OR dsc$k_dtype_t^16;  ! Static desc
typ_desc [0,0,32,0] = dsc$k_class_s^24 OR dsc$k_dtype_t^16;  ! Static desc
ver_desc [0,0,32,0] = dsc$k_class_s^24 OR dsc$k_dtype_t^16;  ! Static desc

IF .fabb [fab$b_fns] NEQ 0
THEN
    BEGIN
    tmp_desc [dsc$w_length]  = .fabb [fab$b_fns];	! Create file name desc
    tmp_desc [dsc$a_pointer] = .fabb [fab$l_fna];	! ...
    $print_fao ('FAB filename "!AS"', tmp_desc);
   END
ELSE
    $print_lit ('FAB filename "" (null)');

IF NOT (.fabb [fab$l_sts])
THEN
    $print_fao ('FAB$L_STS = !XL    FAB$L_STV = !XL',
		.fabb [fab$l_sts], .fabb [fab$l_stv]);

IF nam EQL 0
THEN
    BEGIN
    $print_lit ('No nam block');
    RETURN 1;
    END;

IF .nam [nam$b_esl] GTRU 0
THEN
    BEGIN
    tmp_desc [dsc$w_length]  = .nam [nam$b_esl];	! Create file name desc
    tmp_desc [dsc$a_pointer] = .nam [nam$l_esa];	! ...
    $print_fao ('Expanded string "!AS"', tmp_desc);
    END
ELSE
    $print_lit ('Expanded string "" (null)');

IF .nam [nam$b_rsl] GTRU 0
THEN
    BEGIN
    tmp_desc [dsc$w_length]  = .nam [nam$b_rsl];	! Create file name desc
    tmp_desc [dsc$a_pointer] = .nam [nam$l_rsa];	! ...
    $print_fao ('Result string   "!AS"', tmp_desc);
    END;

dev_desc [dsc$w_length]  = .nam [nam$b_dev];	! Create file name desc
dev_desc [dsc$a_pointer] = .nam [nam$l_dev];	! ...
dir_desc [dsc$w_length]  = .nam [nam$b_dir];	! Create file name desc
dir_desc [dsc$a_pointer] = .nam [nam$l_dir];	! ...
BEGIN
    BIND
	len = nam [nam$t_dvi] : BYTE;
    dvi_desc [dsc$w_length]  = .len;			! Create file name desc
END;
dvi_desc [dsc$a_pointer] = nam [nam$t_dvi]+1;	! ...
nam_desc [dsc$w_length]  = .nam [nam$b_name];	! Create file name desc
nam_desc [dsc$a_pointer] = .nam [nam$l_name];	! ...
nod_desc [dsc$w_length]  = .nam [nam$b_node];	! Create file name desc
nod_desc [dsc$a_pointer] = .nam [nam$l_node];	! ...
typ_desc [dsc$w_length]  = .nam [nam$b_type];	! Create file name desc
typ_desc [dsc$a_pointer] = .nam [nam$l_type];	! ...
ver_desc [dsc$w_length]  = .nam [nam$b_ver];	! Create file name desc
ver_desc [dsc$a_pointer] = .nam [nam$l_ver];	! ...

$print_fao ('"!AS" "!AS" "!AS" "!AS" "!AS" "!AS" "!AS"',
	nod_desc, dev_desc, dir_desc, nam_desc, typ_desc, ver_desc, dvi_desc);

RETURN 1;
END;

GLOBAL ROUTINE exch$dbg_dump_rt11_file (filb : $ref_bblock) =	%SBTTL 'exch$dbg_dump_rt11_file'
BEGIN

LOCAL
    buf	: VECTOR [512, BYTE],
    pbn,
    cnt,
    status;

EXTERNAL ROUTINE
    exch$io_rt11_read;

BIND
    bufw = buf : VECTOR [256, WORD],
    ctx  = filb [filb$a_context] : $ref_bblock,
    volb = filb [filb$a_assoc_volb] : $ref_bblock;

$dbgtrc_prefix ('dbg_dump_rt11_file> ');

$block_check (2, .filb, filb, 414);
$block_check (2, .volb, volb, 415);
$block_check (2, .ctx, rt11ctx, 416);
$logic_check (2, (.ctx [rt11ctx$a_assoc_filb] EQL .filb), 106);
$logic_check (2, (.ctx [rt11ctx$a_assoc_volb] EQL .volb), 107);

pbn = .ctx [rt11ctx$l_start_block];
cnt = .ctx [rt11ctx$w_blocks];

INCRU blk FROM .pbn TO .pbn + .cnt - 1
DO
    BEGIN

    IF NOT (status = exch$io_rt11_read (.volb, .blk, 1, buf))
    THEN
	$exch_signal_return (.status);

    $print_fao ('> !XW Vbn   (!XW Pbn)', .blk-.pbn, .blk);

    INCRU i FROM 0 TO 15
    DO
	BEGIN
	REGISTER  off, offw;

	off  = .i * 32;		offw = .i * 16;

	$print_fao ('>    !16(5XW) - !XW - "!AF"',
		.bufw [.offw + 15],	.bufw [.offw + 14],	.bufw [.offw + 13],	.bufw [.offw + 12],
		.bufw [.offw + 11],	.bufw [.offw + 10],	.bufw [.offw + 9],	.bufw [.offw + 8],
		.bufw [.offw + 7],	.bufw [.offw + 6],	.bufw [.offw + 5],	.bufw [.offw + 4],
		.bufw [.offw + 3],	.bufw [.offw + 2],	.bufw [.offw + 1],	.bufw [.offw],
		.off, 32, buf [.off]);

	END;
    END;

RETURN 1;
END;

GLOBAL ROUTINE exch$dbg_nam_dump (nam : $ref_bblock) =	%SBTTL 'exch$dbg_nam_dump'
BEGIN

$dbgtrc_prefix ('nam_dump> ');

!
! A macro to add successive ASCII items to a string buffer, and update the 
! descriptor for the string.
!
MACRO
    add_to_list (string) =
    	BEGIN
	BIND desc = %ASCID string : $BBLOCK;
	CH$MOVE(.desc[dsc$w_length],
		.desc[dsc$a_pointer],
		.ptr[1] + .ptr[0]);
	ptr[0] = .ptr[0] + .desc[dsc$w_length];
    	END%;

LOCAL
    buffer : VECTOR [255, BYTE],
    ptr : VECTOR [2, LONG];

    $print_fao ('    Dump of nam at !XL:', .nam);
!   $print_fao ('        !15AS      !XB          - block id  ', %ASCID 'NAM$B_BID', .nam[NAM$B_BID]);
!   $print_fao ('        !15AS      !XB          - block length  ', %ASCID 'NAM$B_BLN', .nam[NAM$B_BLN]);
!   $print_fao ('        !15AS      !XB          - resultant string area size  ', %ASCID 'NAM$B_RSS', .nam[NAM$B_RSS]);
    $print_fao ('        !15AS      !XB          - name options ', %ASCID 'NAM$B_NOP', .nam[NAM$B_NOP]);
    $print_fao ('        !15AS      !XL    - wild card context  ', %ASCID 'NAM$L_WCC', .nam[NAM$L_WCC]);
    ptr [0] = 0;
    ptr [1] = buffer;
    IF .nam[nam$l_fnb] NEQ 0
    THEN
	BEGIN
	IF .nam[NAM$V_EXP_VER]		THEN add_to_list('xver ');
	IF .nam[NAM$V_EXP_TYPE]		THEN add_to_list('xtyp ');
	IF .nam[NAM$V_EXP_NAME]		THEN add_to_list('xnam ');
	IF .nam[NAM$V_WILD_VER]		THEN add_to_list('*ver ');
	IF .nam[NAM$V_WILD_TYPE]	THEN add_to_list('*typ ');
	IF .nam[NAM$V_WILD_NAME]	THEN add_to_list('*nam ');
	IF .nam[NAM$V_EXP_DIR]		THEN add_to_list('xdir ');
	IF .nam[NAM$V_EXP_DEV]		THEN add_to_list('xdev ');
	IF .nam[NAM$V_WILDCARD]		THEN add_to_list('*** ');
	IF .nam[NAM$V_SEARCH_LIST]	THEN add_to_list('schl ');
	IF .nam[NAM$V_CNCL_DEV]		THEN add_to_list('cncl ');
	IF .nam[NAM$V_ROOT_DIR]		THEN add_to_list('root ');
	IF .nam[NAM$V_LOWVER]		THEN add_to_list('lowv ');
	IF .nam[NAM$V_HIGHVER]		THEN add_to_list('hiv ');
	IF .nam[NAM$V_PPF]		THEN add_to_list('ppf ');
	IF .nam[NAM$V_NODE]		THEN add_to_list('nod ');
	IF .nam[NAM$V_QUOTED]		THEN add_to_list('quot ');
	IF .nam[NAM$V_WILD_DIR]		THEN add_to_list('*dir ');
	IF .nam[NAM$V_GRP_MBR] THEN	BEGIN
					add_to_list('grpmem ');
					IF .nam[NAM$V_WILD_GRP]	THEN add_to_list('*grp ');
					IF .nam[NAM$V_WILD_MBR]	THEN add_to_list('*mbr ');
					END;
	IF .ptr[0] GTR 0 THEN ptr[0] = .ptr[0] - 1; 	! Remove final space
	END;
    $print_fao ('        !15AS      !XL    - name bits "!AS"', %ASCID 'NAM$L_FNB', .nam[NAM$L_FNB], ptr);
    $print_fao ('        !15AS   !XB !XL    "!AF"', %ASCID 'expanded string',
					.nam[NAM$B_ESL], .nam[NAM$L_ESA], .nam[nam$b_esl], .nam[nam$l_esa]);
    $print_fao ('        !15AS   !XB !XL    "!AF"', %ASCID 'result string',
					.nam[NAM$B_RSL], .nam[NAM$L_RSA], .nam[nam$b_rsl], .nam[nam$l_rsa]);
    $print_fao ('        !15AS      "!AC"   - device name', %ASCID 'NAM$T_DVI', nam[NAM$T_DVI]);
    $print_fao ('        "!AF" "!AF" "!AF" "!AF" "!AF" "!AF"',
				.nam[NAM$B_NODE], .nam[NAM$L_NODE],
				.nam[NAM$B_DEV], .nam[NAM$L_DEV],
				.nam[NAM$B_DIR], .nam[NAM$L_DIR],
				.nam[NAM$B_NAME], .nam[NAM$L_NAME],
				.nam[NAM$B_TYPE], .nam[NAM$L_TYPE],
				.nam[NAM$B_VER], .nam[NAM$L_VER]);
    $print_fao ('        !15AS      !XL    - related file nam block addr  ', %ASCID 'NAM$L_RLF', .nam[NAM$L_RLF]);
    IF .nam[NAM$L_RLF] NEQ 0
    THEN exch$dbg_nam_dump (.nam[NAM$L_RLF]);

RETURN 1;
END;

GLOBAL ROUTINE exch$dbg_utl_print_devchar (dev : $bblock) =	%SBTTL 'exch$dbg_utl_print_devchar'
BEGIN

    $dbgtrc_prefix ('dbg_utl_print_devchar> ');
    $trace_print_fao ('characteristics longword !XL', .dev [0,0,32,0]);

    IF .dev [dev$v_rec]
    THEN
	$print_lit ('	rec - device is record oriented');
    IF .dev [dev$v_ccl]
    THEN
	$print_lit ('	ccl - carriage control device');
    IF .dev [dev$v_trm]
    THEN
	$print_lit ('	trm - device is a terminal');
    IF .dev [dev$v_dir]
    THEN
	$print_lit ('	dir - device is directory structured');
    IF .dev [dev$v_sdi]
    THEN
	$print_lit ('	sdi - device is single directory structured');
    IF .dev [dev$v_sqd]
    THEN
	$print_lit ('	sqd - sequential block-oriented device (i.e., magtape)');
    IF .dev [dev$v_spl]
    THEN
	$print_lit ('	spl - device being spooled');
    IF .dev [dev$v_opr]
    THEN
	$print_lit ('	opr - device is an operator');
    IF .dev [dev$v_rct]
    THEN
	$print_lit ('	rct - disk contains rct (dec standard 166 disk)');
    IF .dev [dev$v_net]
    THEN
	$print_lit ('	net - network device');
    IF .dev [dev$v_fod]
    THEN
	$print_lit ('	fod - files-oriented device (i.e., disk and mt)');
    IF .dev [dev$v_dua]
    THEN
	$print_lit ('	dua - device is dual ported');
    IF .dev [dev$v_shr]
    THEN
	$print_lit ('	shr - device shareable');
    IF .dev [dev$v_gen]
    THEN
	$print_lit ('	gen - device is a generic device');
    IF .dev [dev$v_avl]
    THEN
	$print_lit ('	avl - device available for use');
    IF .dev [dev$v_mnt]
    THEN
	$print_lit ('	mnt - device is mounted');
    IF .dev [dev$v_mbx]
    THEN
	$print_lit ('	mbx - device is a mailbox');
    IF .dev [dev$v_dmt]
    THEN
	$print_lit ('	dmt - device marked for dismount');
    IF .dev [dev$v_elg]
    THEN
	$print_lit ('	elg - device has error logging enabled');
    IF .dev [dev$v_all]
    THEN
	$print_lit ('	all - device is allocated');
    IF .dev [dev$v_for]
    THEN
	$print_lit ('	for - device is mounted foreign (i.e., non-file structured)');
    IF .dev [dev$v_swl]
    THEN
	$print_lit ('	swl - device is software write locked');
    IF .dev [dev$v_idv]
    THEN
	$print_lit ('	idv - device capable of providing input');
    IF .dev [dev$v_odv]
    THEN
	$print_lit ('	odv - device capable of providing output');
    IF .dev [dev$v_rnd]
    THEN
	$print_lit ('	rnd - device allows random access');
    IF .dev [dev$v_rtm]
    THEN
	$print_lit ('	rtm - device is realtime in nature');
    IF .dev [dev$v_rck]
    THEN
	$print_lit ('	rck - device has read checking enabled');
    IF .dev [dev$v_wck]
    THEN
	$print_lit ('	wck - device has write checking enabled');

RETURN 1;
END;

END
ELUDOM
