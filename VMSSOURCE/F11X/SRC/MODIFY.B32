MODULE MODIFY (
		LANGUAGE (BLISS32),
		IDENT = 'V04-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine implements the MODIFY function.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  6-Jan-1977  23:03
!
! MODIFIED BY:
!
!	V04-001	ACG65998	Andrew C. Goldstein,	6-Sep-1984  15:33
!		Checksum file header after setting revision date
!
!	V03-014	CDS0007		Christian D. Saether	14-Aug-1984
!		Modify handling of extension fcbs.
!
!	V03-013	CDS0006		Christian D. Saether	22-Apr-1984
!		Modify access arbitration.
!
!	V03-012	ACG0412		Andrew C. Goldstein,	22-Mar-1984  18:26
!		Implement agent access mode support; add access mode to
!		protection check call
!
!	V03-011	CDS0005		Christian D. Saether	19-Dec-1983
!		Use BIND_COMMON macro to reduce number
!		of external COMMON declarations.
!
!	V03-010	CDS0004		Christian D. Saether	25-Sep-1983
!		Modify SERIAL_FILE interface.
!
!	V03-009	CDS0003		Christian D. Saether	25-Sep-1983
!		Manually merge ACG0343, ACG56916.
!
!	V03-008	ACG0343		Andrew C. Goldstein,	19-Jul-1983  16:44
!		Inhibit revision counting if NORECORD is specified
!
!	V03-007	ACG56916	Andrew C. Goldstein,	21-Jun-1983  14:11
!		Update file revision and expiration when modified
!
!	V03-006	LMP0149		L. Mark Pilant,		13-Sep-1983  11:27
!		Correct a logic problem that caused problems during the
!		protection check of a write attribute operation.
!
!	V03-005	CDS0002		Christian D. Saether	 4-May-1983
!		Add call to SERIAL_FILE to interlock file processing.
!
!	V03-004	CDS0001		Christian D. Saether	20-Apr-1983
!		Changes to arbitrate extend and truncate access
!		in a cluster.  Truncate now requires exclusive
!		access to the file to succeed.
!		Change interface to TRUNCATE routine.
!
!	V03-003	LMP0059		L. Mark Pilant,		21-Dec-1982  11:37
!		Always create an FCB for a file header.  This eliminates
!		a lot of special case FCB handling.
!
!	V03-002	LMP0036		L. Mark Pilant,		17-Aug-1982  10:15
!		Add support for ACL's.
!
!	V03-001	ACG0282		Andrew C. Goldstein,	6-Apr-1982  16:08
!		Check for device write-locked before attempting operations
!
!	V02-007	ACG0223		Andrew C. Goldstein,	17-Nov-1981  21:49
!		Allow modification of directory version limit
!
!	V02-006	ACG0171		Andrew C. Goldstein,	7-May-1980  18:34
!		Condition check of truncate lock count on presence of FCB
!
!	V02-005	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:27
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


GLOBAL ROUTINE MODIFY  : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine implements the MODIFY function.
!
! CALLING SEQUENCE:
!	MODIFY ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_WINDOW: window for file
!	PRIMARY_FCB: FCB of file
!	IO_PACKET: I/O packet in process
!	FILE_HEADER: address of current file header
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	file and FCB modified
!
!--

BEGIN

LOCAL
	FCB_CREATED,			! flag indicating new FCB created
	FIND_MODE,			! mode for FIND call
	ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH],
					! buffer descriptors
	FIB		: REF BBLOCK,	! FIB
	FCB		: REF BBLOCK,	! FCB of file
	HEADER		: REF BBLOCK,	! file header
	STATUS;				! Routine exit status

BIND_COMMON;

EXTERNAL ROUTINE
	REBLD_PRIM_FCB	: L_NORM NOVALUE, ! rebuild primary fcb from header
	BUILD_EXT_FCBS	: L_NORM NOVALUE, ! build extension fcb chain.
	ARBITRATE_ACCESS : L_JSB_2ARGS,	! arbitrate access interlocks.
	CONV_ACCLOCK	: L_NORM,	! convert file access lock
	LOCK_COUNT	: L_NORM,	! determine number of locks.
	SERIAL_FILE	: L_NORM,	! interlock file processing.
	GET_FIB		: L_NORM,	! get FIB of request
	GET_LOC_ATTR	: L_NORM,	! get placement data from attribute list
	GET_LOC		: L_NORM,	! get placament data
	FIND		: L_NORM,	! find name in directory
	SWITCH_VOLUME	: L_NORM,	! switch context to right volume
	SEARCH_FCB	: L_NORM,	! search FCB list
	READ_HEADER	: L_NORM,	! read file header
	CREATE_FCB	: L_NORM,	! create an FCB
	CHECK_PROTECT	: L_NORM,	! check file protection
	SET_REVISION	: L_NORM,	! set file revision end expiration
	WRITE_ATTRIB	: L_NORM,	! write file attributes
	EXTEND		: L_NORM,	! extend file
	TRUNCATE	: L_NORM,	! truncate file
	CHECKSUM	: L_NORM,	! checksum the file header
	UPDATE_FCB	: L_NORM;	! rebuild fcb from header


! First find the buffer descriptor, FIB, FCB, etc., and read the header.
!

					! pointer to buffer descriptors
ABD = .BBLOCK [.IO_PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];
FIB = GET_FIB (.ABD);
IF .FIB[FIB$W_VERLIMIT] GTRU 32767
THEN ERR_EXIT (SS$_BADPARAM);

IF .FIB[FIB$V_ALLOCATR]
THEN GET_LOC_ATTR (.ABD, .FIB);
GET_LOC (.FIB, LOC_RVN, LOC_LBN);

! If a directory ID is present, do a directory search first.
!

FIND_MODE = 0;
IF .FIB[FIB$W_VERLIMIT] NEQ 0
THEN FIND_MODE = 2;
IF .CLEANUP_FLAGS[CLF_DIRECTORY]
THEN FIND (.ABD, .FIB, .FIND_MODE);
SWITCH_VOLUME (.FIB[FIB$W_FID_RVN]);

! If there is a file open on the channel, check the file ID returned by the
! FIND against the file ID that is open. If they are different, drop the FCB
! and window addresses on the floor.
!

IF .PRIMARY_FCB NEQ 0
THEN
    IF .PRIMARY_FCB[FCB$W_FID_NUM] NEQ .FIB[FIB$W_FID_NUM]
    OR .PRIMARY_FCB[FCB$W_FID_RVN] NEQ .FIB[FIB$W_FID_RVN]
    THEN
	BEGIN
	PRIMARY_FCB = 0;
	CURRENT_WINDOW = 0;
	END;

! Sychronize further processing on this FID.
!

PRIM_LCKINDX = SERIAL_FILE (FIB [FIB$W_FID]);

FCB = SEARCH_FCB (FIB[FIB$W_FID]);
HEADER = READ_HEADER (FIB[FIB$W_FID], .FCB);

! At this point build the necessary FCB list if the file is not accessed.
! This is necessary to allow the ACL to be built.
!

FCB_CREATED = 0;
IF .FCB EQL 0
THEN 
    BEGIN
    FCB_CREATED = 1;
    FCB = KERNEL_CALL (CREATE_FCB, .HEADER);
    END;
PRIMARY_FCB = .FCB;				! Record FCB for external use

! If the file is multi-header, read the extension headers and create
! extension FCB's as necessary.  Finally, read back the primary header.
!

IF .FCB_CREATED
THEN
    BUILD_EXT_FCBS (.HEADER)
ELSE
    IF .FCB [FCB$V_STALE]
    THEN
	BEGIN

	REBLD_PRIM_FCB (.FCB, .HEADER);

	BUILD_EXT_FCBS (.HEADER);

	END;

! Check that the volume is write enabled.
!

IF .BBLOCK [CURRENT_UCB[UCB$L_DEVCHAR], DEV$V_SWL]
THEN ERR_EXIT (SS$_WRITLCK);

! Arbitrate access interlocks. If this is the accessor, then the file
! must be write accessed. Count a write to the file.
!

IF .CURRENT_WINDOW NEQ 0
THEN
    BEGIN

    IF NOT .CURRENT_WINDOW[WCB$V_WRITE]
    THEN ERR_EXIT (SS$_NOPRIV);

    IF .FIB [FIB$V_TRUNC]
    THEN
	IF .FCB [FCB$W_REFCNT] NEQ 1
	    OR LOCK_COUNT (.FCB [FCB$L_ACCLKID]) NEQ 1
	THEN
	    ERR_EXIT (SS$_ACCONFLICT);

    IF NOT .FIB[FIB$V_NORECORD]
    THEN
	CURRENT_WINDOW [WCB$L_WRITES] = .CURRENT_WINDOW [WCB$L_WRITES] + 1;

    END

! If it is not, then the file must not be locked against modification
! and the caller must pass file protection. Count a revision to the file.
!

ELSE
    BEGIN

    IF .FIB [FIB$V_EXTEND] OR .FIB [FIB$V_TRUNC]
    THEN
	BEGIN
	LOCAL
	    CURR_LKMODE;

	CHECK_PROTECT (WRITE_ACCESS, .HEADER, .FCB,
		       MAXU (.IO_PACKET[IRP$V_MODE], .FIB[FIB$B_AGENT_MODE]));

	CURR_LKMODE = .FCB [FCB$B_ACCLKMODE];

	IF .FIB [FIB$V_EXTEND]
	THEN
	    BEGIN

	    IF .FIB[FIB$V_TRUNC]
	    THEN ERR_EXIT (SS$_BADPARAM);

	    IF NOT ARBITRATE_ACCESS (FIB$M_WRITE, .FCB)
	    THEN
		ERR_EXIT (SS$_ACCONFLICT);
	    END
	ELSE

! This is a truncation.  Truncation is only allowed if there is no other
! access to the file whatever.
!

	    BEGIN
	    IF NOT ARBITRATE_ACCESS (FIB$M_NOREAD, .FCB)
	    THEN
		ERR_EXIT (SS$_ACCONFLICT);

	    IF .FCB [FCB$W_REFCNT] NEQ 0
		OR LOCK_COUNT (.FCB [FCB$L_ACCLKID]) NEQ 1
	    THEN
		BEGIN
		CONV_ACCLOCK (.CURR_LKMODE, .FCB);
		ERR_EXIT (SS$_ACCONFLICT);
		END;

	    END;	! of trunc

	CONV_ACCLOCK (.CURR_LKMODE, .FCB);

	END;		! of trunc or extend

    IF NOT .FIB[FIB$V_NORECORD]
    THEN
	BEGIN
	SET_REVISION (.HEADER, 1);
	CHECKSUM (.HEADER);
	END;
    END;

! If an attribute list exists, perform the write attributes operation.
!

IF .IO_PACKET[IRP$W_BCNT] GTR ABD$C_ATTRIB
THEN
    BEGIN
    WRITE_ATTRIB (.HEADER, .ABD, 1);
    HEADER = .FILE_HEADER;
    CHECKSUM (.HEADER);
    END;

! If the extend enable bit is on, perform the extend operation.
! If the truncate bit is on, perform the truncate operation. If both are
! on, it is an error.
!

IF (.FIB[FIB$V_EXTEND] OR .FIB[FIB$V_TRUNC])
AND .CURRENT_VCB[VCB$V_NOALLOC]
THEN ERR_EXIT (SS$_WRITLCK);

IF .FIB[FIB$V_EXTEND]
THEN
    BEGIN
    EXTEND (.FIB, .HEADER);
    END;

IF .FIB[FIB$V_TRUNC]
THEN
    TRUNCATE (.FIB, .HEADER, .FIB [FIB$L_EXVBN]);

HEADER = .FILE_HEADER;
CHECKSUM (.HEADER);			! checksum the file header
UPDATE_FCB (.HEADER);

RETURN 1;

END;					! end of routine MODIFY

END
ELUDOM
