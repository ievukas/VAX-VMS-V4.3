	.TITLE	CTDVMSPEC - CTDRIVER VMS specific protocol extensions
	.IDENT	'V04-000'
; *** DEBUG = 1
.IF DF DEBUG
.PRINT 0 ; CTVMSMODE being assembled WITH debug code
.IFF
;*** .PRINT 0 ; CTVMSMODE being assembled WITHOUT debug code
.ENDC
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; FACILITY:
;
;	VAX/VMS remote terminal driver
;
; ABSTRACT:
;
;	This module contains code to format and decode VMS to VMS specific
;	protocol used with the CTERM protocol.
;
; ENVIRONMENT:
;
;--
;
; AUTHOR: Jake VanNoy, CREATION DATE: 30-Dec-1982
;
; MODIFIED BY:
;
;	V03-002	JLV0290		Jake VanNoy		28-JUL-1983
;		Add upline broadcasts.
;
;	V03-001	JLV0262		Jake VanNoy		26-MAY-1983
;		Add missing branch in post processing.
;
;**

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$DDBDEF			; device data block
	$IRPDEF			; I/O request packet
	$TSADEF			; cterm protocol 
	$TT2DEF			; for DCL bit hacking
	$UCBDEF			; unit control block
	$TTYUCBDEF		; terminal UCB extension

; MACROS:
;

;
; EQUATED SYMBOLS:
;

P1 = 0
P2 = 4
P3 = 8
P4 = 12
P5 = 16
P6 = 20

	.PSECT $$$115_DRIVER,LONG

;
; OWN STORAGE:
;


	.SBTTL	CT_VMS_SETMODE - Packet VMS SET MODE

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	A mode message #10 is formatted with generic QIO format.
;
; CALLING SEQUENCE:
;	BSBW	CT_VMS_SETMODE
;
; INPUT PARAMETERS:
;
;	R1 - address of characteristics buffer
;	R2 - length of characteristics buffer (8 or 12)
;	R3 - IRP
;	R5 - UCB
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R2 - address of byte after message
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

CT_VMS_SETMODE::

	MOVQ	R1,R9			; Move R1,R2 to R9,R10
	MOVL	#<CTP$W_VMS_PLEN+<5*<6+4>>>,R1 ; overhead size
	ADDL	R10,R1			; plus 8 or 12
	BSBW	FDT_ALLOC_MESSAGE	; Get a CTP

	MOVZBW	#PRO$C_DATA,-
		CTP$B_PRO_MSGTYPE(R2)	; Set mode message
	MOVZBW	#CTP$C_MT_VMSQIO,-
		CTP$B_MSGTYPE(R2)	; Set VAX generic qio message
	MOVB	#CTP$C_MT_VMSQIO,-
		IRP$B_CT_RESPTYPE(R3)	; Mark as VMS QIO message
	MOVL	IRP$L_SEQNUM(R3),-
		CTP$L_VMS_REQID(R2)	; Set response from server
	CLRL	IRP$L_MEDIA(R3)		; but no return data address (IOSB only)
	MOVW	IRP$W_FUNC(R3),-
		CTP$W_VMS_FUNC(R2)	; Set qio function code
	MOVAB	CTP$W_VMS_PLEN(R2),R0	; Address of first parameter
	;
	; Do P1
	;
	MOVW	R10,(R0)+		; Length
	MOVW	#CTP$M_VMS_REF,(R0)+	; Pass by reference
	MOVW	#1,(R0)+		; P1
	MOVQ	(R9),(R0)+		; first 8 bytes
	MOVQ	(R9)+,UCB$B_DEVCLASS(R5); copy into UCB
	CMPL	#12,R10			; Is there 12?
	BNEQ	20$			; Branch if not
	MOVL	(R9),(R0)+		; Last 4 bytes
	MOVL	(R9),UCB$L_DEVDEPND2(R5); copy into UCB
20$:
	;
	; Do P2
	;
	MOVL	#4,(R0)+		; Length
	MOVW	#2,(R0)+		; P2
	MOVL	R10,(R0)+		; 8 or 12
	;
	; Do P3
	;
	MOVL	#4,(R0)+		; Length
	MOVW	#3,(R0)+		; P3
	MOVL	P3(AP),(R0)+		; parameter
	;
	; Do P4
	;
	MOVL	#4,(R0)+		; Length
	MOVW	#4,(R0)+		; P4
	MOVL	P4(AP),(R0)+		; parameter
	;
	; Do P5
	;
	MOVL	#4,(R0)+		; Length
	MOVW	#5,(R0)+		; P5
	MOVL	P5(AP),(R0)+		; parameter

	MOVL	R0,R2			; Set address of next byte
	RSB				; return

	.SBTTL	CT_VMS_SENSEMODE - Packet VMS SENSE MODE

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	A VMS specific cterm message is formatted with generic QIO format.
;
; CALLING SEQUENCE:
;	BSBW	CT_VMS_SENSEMODE
;
; INPUT PARAMETERS:
;
;	R1 - address of characteristics buffer
;	R2 - length of characteristics buffer (8 or 12)
;	R3 - IRP
;	R5 - UCB
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R2 - address of byte after message
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

CT_VMS_SENSEMODE::

	MOVQ	R1,R9			; Move R1,R2 to R9,R10
	MOVL	#<CTP$W_VMS_PLEN+<2*<6+4>>>,R1 ; overhead size
	ADDL	R10,R1			; plus 8 or 12
	BSBW	FDT_ALLOC_MESSAGE	; Get a CTP

	MOVZBW	#PRO$C_DATA,-
		CTP$B_PRO_MSGTYPE(R2)	; Set mode message
	MOVZBW	#CTP$C_MT_VMSQIO,-
		CTP$B_MSGTYPE(R2)	; Set VAX generic qio message
	MOVB	#CTP$C_MT_VMSQIO,-
		IRP$B_CT_RESPTYPE(R3)	; Mark as VMS QIO message
	MOVL	IRP$L_SEQNUM(R3),-
		CTP$L_VMS_REQID(R2)	; Set response from server
	MOVW	IRP$W_FUNC(R3),-
		CTP$W_VMS_FUNC(R2)	; Set qio function code
	MOVAB	CTP$W_VMS_PLEN(R2),R0	; Address of first parameter
	;
	; Do P1
	;
	MOVW	R10,(R0)+		; Length (not used in RTPAD***)
	MOVW	#CTP$M_VMS_BUFFER,(R0)+	; Generate buffer in server, return data
	MOVW	#1,(R0)+		; P1
					; null data region
	;
	; Do P2
	;
	MOVL	#4,(R0)+		; Length
	MOVW	#2,(R0)+		; P2
	MOVL	R10,(R0)+		; 8 or 12

	MOVL	R0,R2			; Set address of next byte
	RSB				; return

	.SBTTL	CT_VMSQIO_MSG - Handle Mode message 

;++
;
; FUNCTIONAL DESCRIPTION:
;
;
;
; CALLING SEQUENCE:
;
;	BSBW	CT_VMSQIO_MSG 
;
; INPUT PARAMETERS:
;
;	R1 - CTP
;	R3 - Net read IIRP
;	R5 - CT UCB
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

;
; ??? IRP queue is assumed to be in order for reads, characteristics,
; ??? and input counts. All these packets have the FUNC bit set in the 
; ??? queued IRP. The write packets can complete asynchronously to all
; ??? these other types, and they do not have the FUNC bit set. Search
; ??? for the associated IRP:
;

MODE_ERR:	
	CLRL	R0			; return error here... (***new 8-jun-83)
	RSB

CT_VMSQIO_MSG::

	MOVAQ	UCB$L_RTT_IRPFL(R5),R4	; Look through the irps for ours
	MOVL	R4,R0			; head of queue here

30$:	MOVL	(R4),R4			; Link through chain
	CMPL	R4,R0			; end of irps?
	BEQL	MODE_ERR		; Yes, could not find it, hangup 

	CMPB	#CTP$C_MT_VMSQIO, -
		IRP$B_CT_RESPTYPE(R4)	; Does it match? 
	BNEQ	30$			; Branch if no
	CMPL	CTP$L_VMS_REQID(R1),-
		IRP$L_SEQNUM(R4)	; Sequence number match?
	BNEQ	30$			; Loop if not
;
; A match has been found
;
	CLRL	IRP$L_SVAPTE(R3)	; Buffer not in net iirp now
	MOVW	IRP$W_BCNT(R3),-
		IRP$L_IOST2(R4)		; Set size of buffer read from net
	REMQUE	(R4),R3			; Remove the CT irp from queue
	MOVL	R2,IRP$L_SVAPTE(R3)	; stick buffer there
;
; Function as "interrupt routine"
;
	BISW	#IRP$M_TERMIO,-
		IRP$W_STS(R3)		; Set terminal I/O
	MOVL	IRP$L_MEDIA(R3),R4	; User buffer return address
	BEQL	50$			; Branch if no data (IOSB only)
	MOVAB	CTP$T_VMS_RDATA(R1),(R2); Set address of data
	MOVL	R4,4(R2)		; Set user address to return data
50$:
;
; Set IRP$W_BCNT
;
	MOVZWL	IRP$L_IOST2(R3),R0	; Set size of buffer read from net
	SUBL2	#<CTP$T_VMS_RDATA- -
		CTP$B_PRO_MSGTYPE>,R0	; Subtract out header size
	CMPW	R0,IRP$W_BCNT(R3)	; Compare to user buffer size
	BGTRU	80$			; If greater, leave user size
	MOVW	R0,IRP$W_BCNT(R3)	; Set return size
80$:
	MOVQ	CTP$Q_VMS_IOSB(R1),-
		IRP$L_IOST1(R3)		; Copy IOSB

	CMPZV	#IRP$V_FCODE,#IRP$S_FCODE,-
		IRP$W_FUNC(R3),#IO$_SENSEMODE	; sense mode qio?
	BNEQ	90$			; branch if not
	BSBB	SENSE_SPAWN		; Set DCL bits ***
90$:	
	JSB	G^COM$POST		; POST I/O
	MOVL	#1,R0			; success
	RSB				; return to FOUNDATION message code


	.SBTTL	SENSE_SPAWN  Sense for spawn

;	Sense special characteristics bits for DCL spawn command.
;	Return bits for ctrl/c ast, outofband ast and associated mailbox.
;	These bits may be reused later and are not for customer application
;	consumption.
;
; inputs:
;	r1 -> CTP
;

SENSE_SPAWN:
	MOVAB	CTP$T_VMS_RDATA+8(R1),R0 ; Set address of data

	BICW	#TT2$M_DCL_MAILBX,(R0)	; Reset mailbox bit
	TSTL	UCB$L_AMB(R5)		; Any associated mailbox?
	BEQL	10$			; No
	BISW	#TT2$M_DCL_MAILBX,(R0)	; Yes, so set characteristic
10$:
	RSB

.SBTTL	CT_VMS_BRDCST - Handle upline dump of broadcast text
;+
; CT_VMS_BRDCST - 
;
; Deliver broadcast message to the mailbox.
;	
; If RTPAD receives a broadcast message in it's mailbox, it dumps it up
; to the remote terminal and it gets here for delivery to the real 
; application broadcast mailbox.
;
; The unit number and name of the device is fixed up in the packet first.
;
;-

CT_VMS_BRDCST::

	BBC	#TT2$V_BRDCSTMBX, -		; If we are allowing mailbox
		UCB$L_DEVDEPND2(R5),10$		; to receive the messages
	TSTL	UCB$L_AMB(R5)			; and we have a mailbox
	BEQL	10$				; Nope
	MOVW	UCB$W_UNIT(R5), -		; Then fix the unit number
		CTP$W_BR_UNITNUM(R1)		; in the message
	MOVL	UCB$L_DDB(R5), R2		; and get the proper name of
	EXTZV	#0, #4, DDB$T_NAME(R2), R0	; this device for the message
	INCL	R0				; including the count

	PUSHR	#^M<R0, R1, R2, R3, R4, R5>	; Copy the new name and
	MOVC5	R0, DDB$T_NAME(R2), #0, -	; clobber the remainder of the
		#CTP$S_BR_DEVNAME, -		; stuff in the fixed length
		CTP$T_BR_DEVNAME(R1)		; field
	POPR	#^M<R0, R1, R2, R3, R4, R5>	; restore the regs

	PUSHR	#^M<R3, R4, R5>			; Save a few
	MOVZWL	CTP$W_MSGSIZE(R1), R3		; Size of the message
	MOVAB	CTP$W_BR_MSGCODE(R1), R4	; Address of the message
	MOVL	UCB$L_AMB(R5), R5		; Mailbox ucb address
	JSB	G^EXE$WRTMAILBOX		; Write the message to it
	POPR	#^M<R3, R4, R5>			; and ignore the errors

10$:	RSB

.END
