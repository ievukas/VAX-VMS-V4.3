	.title	pli$rewrite - pl1 runtime rewrite file
	.ident	/1-003/					; Edit DSB1003

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;


;++
; facility:
;
;	VAX/VMS PL1 runtime library.
; abstract:
;
;	This module contains the pl1 runtime routine for rewriting a record to
;	a file.
;
; author: c. spitz 18-jul-79
;
; modified:
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;	1-003	Dave Blickstein	21-February-1984
;
;		Do a $FIND if RECORD_ID was specified.  RECORD_ID was 
;		being "ignored" because RMS does not allow it for $UPDATE.
;
;--


;+
; external definitions
;-

	$deffcb				;define file control block offsets
	$defdat				;define operand node data types
	$defpl1rtcons			;define pl1 runtime constants
	$rabdef				;define rab offsets
	$fabdef				;define fab offsets
	$rmsdef				;define rms error codes

;+
; local definitions
;-
$offset	4,positive,<-			;define arguments
	<fcbaddr,4>,-			;addr of fcb
	<fromaddr,4>,-			;addr of from
	<fromlen,2>,-			;length of from
	<fromtyp,2>,-			;data type of from
	<keyaddr,4>,-			;addr of key
	<keylen,4>,-			;length of key
	<keytyp,4>,-			;data type of key
	<keynum,4>,-			;addr of key number
	<matchgtr,4>,-			;addr of match greater
	<matchgeq,4>,-			;addr of match greater equal
	<recidfrom,4>,-			;addr of record id from
	<recidto,4>,-			;addr of record id to
	<fxcaddr,4>,-			;addr of fixed control
	<fxclen,2>,-			;length of fixed control
	<fxctyp,2>,-			;data type of fixed control
	>				;

	rtshare				;sharable

	.page

;++
; pli$rewrite -- rewrite a record to a file
;
; functional description:
;
; This routine rewrites a record to a pl1 file.
;
; inputs:
;	(ap) - number of arguments
;		1 if no from, no key and no options
;		3 if from, no key and no options
;		6 if from, key, and no options
;		13 if any options
;	4(ap) - addr of fcb
;	8(ap) - addr of from
;	12(ap) - word length of from
;	 14(ap) - word data type of from
;	16(ap) - addr of key
;	20(ap) - size/prec of key
;	24(ap) - data type of key
;	28(ap) - addr of key number
;	32(ap) - addr of match greater
;	36(ap) - addr of match greater
;	40(ap) - addr of record id from
;	44(ap) - addr of record id to
;	48(ap) - addr of fixed control
;	52(ap) - length of fixed control
;	 54(ap) - data type of fixed control
;
; outputs:
;	fcb_l_attr
;		atr_m_bfall, atr_m_delete, atr_m_virgin and atr_m_write are set
;			to false
;		atr_m_currec is set true
;	fcb_q_rfa is set to the rfa of the record that was rewritten
;
; side effects:
;	the record is rewritten in the file.
;
;--

	.entry	pli$rewrite,^m<r2,r3,r4,r5,r6>
;
; check arguments
;
	cmpl	(ap),#1			;enough arguments?
	beql	10$			;if eql, yes
	cmpl	(ap),#3			;correct number of args?
	beql	10$			;if eql, no
	cmpl	(ap),#6			;correct number?
	beql	10$			;if eql, yes, cont
	cmpl	(ap),#13		;correct number?
	beql	10$			;if neq, no
	clrl	r0			;indicate not enough parms
	brw	fail			;and fail
10$:	movl	fcbaddr(ap),r2		;get address of fcb
	movl	fcb_l_attr(r2),r3	;get attributes
;
; open the file if necessary. it will be opened with record and update.
; if the file is still closed after calling open, the error condition is
; signaled.
;
	bbs	#atr_v_opened,r3,30$	;if file opened, continue
	pushl	#atr_m_record!atr_m_update ;file must have record and update
20$:	pushl	r2			;push address of fcb
	calls	#2,g^pli$open		;open the file
	movl	fcb_l_attr(r2),r3	;get attributes
	bbs	#atr_v_opened,r3,30$	;if file opened, continue
	movl	#pli$_open,r0		;set open failure
	brw	fail			;and fail
;
; check statndard attributes of file. record and update must be present.
; delete must be absent.
;
30$:	bbs	#atr_v_record,r3,40$	;if file has record, continue
	movl	#pli$_notrec,r0		;set not record file
	brw	fail			;and fail
40$:	bbs	#atr_v_update,r3,5000$	;if file doesn't have update
	movl	#pli$_notupdate,r0	;set not update file
	brw	fail			;and fail
;
; process options
;
5000$:	movab	fcb_b_rab(r2),r4	;get address of rab
	clrl	rab$l_rhb(r4)		;assume no fixed control from
	bicl	#<rab$m_kge!rab$m_kgt>,rab$l_rop(r4) ;clear kge and kgt
	cmpl	(ap),#13		;options passed?
	blss	60$			;if lss, no
; fixed control
	movab	fxcaddr(ap),r0		;get addr of fixed control
	jsb	g^pli$$fxdctlfrom	;process fixed control
; key number
	movl	keynum(ap),r0		;get addr of key num
	movl	keyaddr(ap),r1		;get addr of key
	jsb	g^pli$$keynum		;process keynumber
; match greater
	movl	matchgtr(ap),r0		;get addr of match greater
	jsb	g^pli$$matchgtr		;process match greater
; match greater equal
	movl	matchgeq(ap),r0		;get addr of match greater equal
	jsb	g^pli$$matchgeq		;process match greater equal
; record id to
	movl	recidto(ap),r0		;get addr of record id to
	jsb	g^pli$$valrecidto	;validate record id to
; record id from
	movl	recidfrom(ap),r0	;get addr of record id from
	jsb	g^pli$$recidfrom	;process record id from
;
; if from option is not present, try to use allocated buffer.
;
60$:	cmpl	(ap),#1			;from specified?
	bgtr	90$			;if gtr, then maybe
70$:	bbs	#atr_v_bfall,r3,80$	;if buffer not allocated
75$:	movl	#pli$_nofrom,r0		;set no from specified
	brw	fail			;and fail
80$:	cmpl	(ap),#6			;key specified?
	blss	85$			;if lss, no, cont
	tstl	keyaddr(ap)		;key specified?
	bneq	75$			;if neq, yes, fail, it requires from
85$:	movl	fcb_l_buf(r2),rab$l_rbf(r4) ;copy address of buffer
	movw	fcb_l_buf_pt(r2),rab$w_rsz(r4) ;copy size of buffer to rab
	brb	120$			;cont
;
; process from option.
;
90$:	movl	fromaddr(ap),rab$l_rbf(r4) ;copy address of buffer
	beql	70$			;if eql, then not specified
	pushl	fromlen(ap)		;push size and data type of from ref
	calls	#1,g^pli$$bytesize	;get byte size
	blbs	r0,95$			;if invalid data type
	brw	fail			;then fail
95$:	movw	r1,rab$w_rsz(r4)	;set size in rab
	cmpw	#dat_k_char_var,fromtyp(ap) ;if from is char var
	bneq	100$			;then
	bbs	#atr_v_scalvar,r3,96$	;if scalar varying set, write it all
	movw	@fromaddr(ap),rab$w_rsz(r4) ;set current size
	addl	#2,rab$l_rbf(r4)	;bump address so we don't write length
	brb	100$			;cont
96$:	addw	#2,rab$w_rsz(r4)	;include size of vcha
;
; process key option.
;
100$:	cmpl	(ap),#6			;key specified?
	blss	120$			;if lss, then no, continue
	movl	keyaddr(ap),r0		;copy address of key
	beql	120$			;if eql, then no key
	bbs	#atr_v_keyed,r3,110$	;if file is keyed, continue
	movl	#pli$_notkeyd,r0	;set not keyed file
	brw	fail			;and fail
110$:	movab	keyaddr(ap),r0		;point to key descr
	jsb	g^pli$$readkey_r6	;process key
	bbs	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),160$ ;if blockio, cont
	jsb	g^pli$$smallget		;find the record
	brb	160$			;cont
;
; set up for sequential rewrite. if current record not correct, find the
; correct one.
;
120$:	cmpl	(ap),#13		;options passed?
	blss	125$			;if lss, no, cont
	tstl	recidfrom(ap)		;record id from specified?
	bneq	140$			;if neq, yes, cont
125$:	bbs	#atr_v_seql,r3,130$	;if seql file, continue
	movl	#pli$_notsql,r0		;set not sequential file
	brw	fail			;and fail
130$:	bbc	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),135$ ;if block io
	clrl	rab$l_bkt(r2)		;set for seql write
	brb	160$			;cont;
135$:	bbc	#atr_v_delete,r3,137$	;if file has delete
136$:	movl	#pli$_nocurrec,r0	;set no current record
	brw	fail			;and fail
137$:	bbc	#atr_v_currec,r3,150$	;if current record not correct
	movb	#rab$c_rfa,rab$b_rac(r4) ;set for rfa access
	movq	fcb_q_rfa(r2),rab$w_rfa(r4) ;set rfa in rab
	bbs	#atr_v_virgin,r3,136$	;if file just opened, fail
140$:	$find	r4			;find the pl1 current record
	blbc	r0,170$			;if find failed, then fail
150$:	movb	#rab$c_seq,rab$b_rac(r4) ;set sequential access in rab
;
; update record.
;
160$:	bbc	#fab$v_bio,<fcb_b_fab+fab$b_fac>(r2),161$ ;if block io
	$write	r4			;do a write
	brb	165$			;cont
161$:	$update	r4			;update the record
165$:	blbs	r0,180$			;if lbs, continue
170$:	movl	#pli$_rmsr,r0		;set error code
	brw	fail			;and fail
180$:	bicl	#<atr_m_bfall!atr_m_delete! - ;'deallocate' buffer, clear del,
		atr_m_virgin!atr_m_write>,fcb_l_attr(r2) ;virgin and write
	bisl	#atr_m_currec,fcb_l_attr(r2) ;set current record not correct
	movq	rab$w_rfa(r4),fcb_q_rfa(r2) ;save correct current record's rfa
	cmpl	(ap),#13		;options passed?
	blss	185$			;if lss, no
	movl	recidto(ap),r0		;get addr of recid to
	beql	185$			;if eql, not specified
	movq	rab$w_rfa(r4),(r0)	;set recid to
185$:	movl	#1,r0			;set success
	ret				;return

	.page

fail:	bneq	10$			;if neq, then enough parms, continue
	movl	#pli$_parm,r0		;set not enough parms
	clrl	r2			;assume no fcb specified
	cmpl	(ap),#1			;was there a fcb specified?
	blss	40$			;if lss, then no
	movl	fcbaddr(ap),r2		;get address of fcb
10$:	cmpl	#pli$_rmsr,r0		;rms rab error code?
	bneq	40$			;if neq, then no, raise error
	cmpl	#rms$_eof,rab$l_sts(r4)	;end of file?
	bneq	20$			;if neq, then no
	pushl	r2			;set fcb addr
	pushl	r0			;set error code
	pushl	#pli$_endfile		;raise endfile condition
	brb	50$			;continue
20$:	cmpl	(ap),#6			;key specified?
	blss	40$			;if lss, no, cont
	movab	keyaddr(ap),r3		;set addr of key descr for onkey
	jsb	g^pli$$chk_keycnd	;check for key condition
40$:	pushl	r2			;set fcb addr
	pushl	r0			;set error code
	pushl	#pli$_error		;set error condition
50$:	calls	#3,g^pli$io_error	;signal the condition
	ret				;return


	.end

