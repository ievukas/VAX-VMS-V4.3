	$BEGIN	RM2CREATE,000,RM$RMS2,<RELATIVE-SPECIFIC CREATE>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility: rms32
;
; Abstract:
;
;	this routine performs the relative file
;	organization-specific create processing.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 Creation Date: 7-DEC-1977
;
; Modified By:
;
;	V03-011	RAS0284		Ron Schaefer		30-Mar-1984
;		Fix STV value on error paths for RMS$_RPL and RMS$_WPL errors.
;
;	V03-010	RAS0265		Ron Schaefer		 9-Mar-1984
;		Bump IFB$W_AVLCL to count the BDB & buffer we allocate.
;
;	V03-009	KPL0002		Peter Lieberwirth	30-Jul-1983
;		If AI journaling, journal the prolog.
;
;	V03-008 MCN0003		Maria del C. Nasr	08-Mar-1983
;		I forgot to include $BKTDEF for MCN0002.
;
;	V03-007 MCN0002		Maria del C. Nasr	07-Mar-1983
;		Use symbolic name for maximum bucket size.
;
;	V03-006	KBT0462		Keith B. Thompson	13-Jan-1983
;		Allocate a bdb and buffer to read in prologue
;
;	V03-005 MCN0001		Maria del C. Nasr	16-Dec-1982
;		Maximum number of blocks per bucket was increased from
;		32 to 127.
;
;	V03-004	KBT0332		Keith B. Thompson	10-Sep-1982
;		Remove $FRBDEF
;
;	V03-003	KBT0132		Keith B. Thompson	20-Aug-1982
;		Reorganize psects
;
;	V03-002	KBT0116		Keith B. Thompson	6-Aug-1982
;		Remove ref. to set_sifb_ptr
;
;	V03-001	KBT0097		Keith B. Thompson	13-Jul-1982
;		Clean up psects
;
;	V02-017	CDS0012		C Saether	 5-Feb-1982
;		Back out V02-016.  GBC now in record attributes.
;
;	V02-016 CDS0011		C Saether	 3-Jan-1982
;		Store GBC field from FAB to plg.
;
;	V02-015	CDS0010		C Saether	25-Aug-1981
;		Replace call to RM$ALLOC_BCB with RM$ALBLB.
;
;	V02-014 RAS0028		Ron Schaefer	20-Aug-1981
;		Change FAB$C_STM11 to FAB$C_STM.
;
;	V02-013 RAS0015		Ron Schaefer	7-Jul-1981
;		Correct record format check for stream format files.
;
;	V02-012	KPL0001		Peter Lieberwirth	24-Jul-1981
;		Fix broken branches.
;
;	V02-011	CDS0012		C SAETHER	28-Aug-1980	16:00
;		Fix sense of test in V009.
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$FABDEF
	$IFBDEF
	$BKTDEF
	$CSHDEF
	$DEVDEF
	$BDBDEF
	$PLGDEF
	$RLSDEF
	$RMSDEF
	$RJRDEF
	$CJFDEF

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8			; bit offset to fop

;
; Own Storage:
;


	.SBTTL	RM$CREATE2 - RELATIVE CREATE ROUTINE

;++
;
; RM$CREATE2
;
;	RM$CREATE2 -
;
;	this routine performs all of the file create
;	functions that are specific to the relative
;	file organization, including:
;
;	1. checking that sharing has not been specified in such a way
;	    that inter-process record locking is required.
;	2. checking that device is a disk if not bio mode
;	3. checking that record format is not undefined or stream
;	4. checking that bucket size and maximum record size are compatible
;	5. verifying maximum record number
;	6. checking xab chain validity
;	7. calling the common create routine
;	8. locking the prolog, initial formatting of the data buckets to zeroes
;	9. initializing and unlocking the prolog
;
; Calling sequence:
;
;	entered via case branch from rm$open
;	returns by jumping to rm$createxit
;
; Input Parameters:
;
;	r11	impure area address
;	r10	fwa address
;	r9	ifab address
;	r8	fab address
;
; Implicit Inputs:
;
;	the contents of the fab, ifab, & fwa.
;
; Output Parameters:
;
;	r0	status code
;	r1-r7	destroyed
;
; Implicit Outputs:
;
;	various fields in the ifab & fab are initialized.
;
; Completion Codes:
;
;	standard rms
;
; Side Effects:
;
;	none
;
;--



;
;  code to handle error conditons.
;  (note: this is not the entry point for the rm$create2 routine.)
;

ERRDEV:
	RMSERR	DEV			; device not disk
ERRXIT:	BRW	RM$CREATEXIT		; go clean up

ERRRFM:	BRW	RM$CRE_ERRRFM		; rfm = udf or > vfc

ERRMRS:	BRW	RM$CRE_ERRMRS		; mrs < or = 0

ERRBKS:
	RMSERR	BKS			; bks > BKT$C_MAXBKTSIZ or < cell size
	BRB	ERRXIT			; go clean up

ERRMRN:
	RMSERR	MRN			; mrn < 0
	BRB	ERRXIT			; go clean up



;++
;  entry point for relative-specific create
;
;--

RM$CREATE2::
	$TSTPT	CREATE2

;
;  check that device is disk
;

	BBS	#IFB$V_BIO,IFB$B_FAC(R9),-
		5$			; allow bio on any dev
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R9),-
		ERRDEV			; branch if not disk

;
;  handle allocation request, if any
;

5$:	BSBW	RM$SETALLOC		; handle allocation xab and
					;  set deq and rtdeq
ERRXIT1:
	BLBC	R0,ERRXIT		; get out on error
	TSTL	FAB$L_ALQ(R8)		; any initial allocation?
	BNEQ	10$			; branch if yes
	INCL	FAB$L_ALQ(R8)		; no - need 1 block for prolog

;
;  check rfm and mrs parameters
;
; assume rfm already checked for gtr than maxrfm
;

	ASSUME	FAB$C_UDF	EQ	0

10$:	TSTB	IFB$B_RFMORG(R9)	; is rfm undefined?
	BEQL	ERRRFM			; branch if yes

	ASSUME	FAB$C_STM	GT	FAB$C_VFC

	CMPB	IFB$B_RFMORG(R9),-
		#FAB$C_STM 		; is rfm stream?
	BGEQU	ERRRFM			; branch if yes

	MOVW	FAB$W_MRS(R8),IFB$W_LRL(R9)-
					; set lrl from fab mrs
	BLEQ	ERRMRS			; branch if not > 0

;
;  compute cell size
;

	ADDW3	FAB$W_MRS(R8),#1,R0	; add in delete ctrl byte
	CMPB	IFB$B_RFMORG(R9),-
		#FAB$C_FIX		; fixed rec len?
	BEQL	30$			; branch if yes
	ADDW2	#2,R0			; add in record length field
	MOVZBL	IFB$B_FSZ(R9),R1	; get fsz
	ADDW2	R1,R0			; and add in giving tot. size

;
;  check cell size against bks
;

30$:	MOVZBL	FAB$B_BKS(R8),R1	; copy bucket size from fab
	BNEQ	40$			; branch if speced

;
; default bucket size to min.
; required to contain 1 record
;

	DECW	R0			; round down
	DIVW3	#512,R0,R1		; get # blks - 1 for 1 record
	INCW	R1			; get # blks for 1 record
	INCW	R0			; restore cell size
40$:	MOVB	R1,IFB$B_BKS(R9)	; copy bucket size to ifab
	CMPB	R1,#BKT$C_MAXBKTSIZ	; in range?
	BGTRU	ERRBKS			; branch if not
	ASHL	#9,R1,R1		; compute bucket size in bytes
	CMPW	R0,R1			; cell size < or = bucket size?
	BGTRU	ERRBKS			; branch if not
					;  set mrn value
	MOVL	FAB$L_MRN(R8),IFB$L_MRN(R9)
					; set mrn from fab
	BGTR	50$			; branch if > 0
	BLSS	ERRMRN			; error if < 0
	MOVL	#^X7FFFFFFF,IFB$L_MRN(R9)
					; default to max. pos #

;
;  go do create.
;  (note: this may be a 'create if', in which case return will be
;   made to rms0open if actually opened rather than created.)
;

50$:	BSBW	RM$CREATECOM		; do common create
	BLBC	R0,ERRXIT1		; get out on error
	PUSHL	R0			; save status code

;
;  file has been created.
;  allocate a lock bdb and bcb and lock the prolog.
;

	MOVL	R9,R10			; set r10 to ifab addr
	BBC	#IFB$V_BIO,IFB$B_FAC(R9),-
		52$			; continue unless block i/o
	BRW	EXIT			; avoid formatting for block io
52$:	MOVZWL	#512,R5			; ask for 1 block to read prologue
	BSBW	RM$ALDBUF		; get bdb and buffer
	BLBC	R0, 70$			; Branch on error.
	INCW	IFB$W_AVLCL(R9)		; count BDB & buffer
	BBS	#IFB$V_NORECLK,(R10),55$ ; Branch if not locking.
	BSBW	RM$ALBLB		; Get a lock BLB.
	BLBC	R0, 70$			; Branch on error.
55$:	$CACHE	VBN=#1,-
		SIZE=#0,-
		FLAGS=<LOCK,NOREAD,NOBUFFER>
	BLBC	R0,70$			; branch on error

;
;  format file by writing zeroes to allocated space
;

	MOVL	#2,IFB$L_DVBN(R9)	; set first data vbn
	MOVL	#2,R1			; 1st block for zeroing
	ADDL3	#1,IFB$L_HBK(R9),R6	; compute eof block
	MOVL	R6,IFB$L_EBK(R9)	; save it
	CMPL	R6,#2			; eof in vbn 2?
	BEQL	60$			; branch if yes (no need to zero)
	BSBW	RM$FMT_BKT2		; format (zero) data buckets
	BLBC	R0,RLNERR		; branch on error

;
;  get buffer for prolog and initialize prolog.
;

60$:	$CACHE	VBN=#1,-
		SIZE=#512,-
		FLAGS=<LOCK,NOREAD>	; get buffer for prolog
70$:	BLBC	R0,ERRBUG		; branch on error
	PUSHR	#^M<R4,R5>		; save bdb and buffer addr
	MOVC5	#0,(SP),#0,#512,(R5)	; zero buffer
	POPR	#^M<R4,R5>		; restore bdb and buffer addr
	MOVW	#PLG$C_VER_NO,PLG$W_VER_NO(R5)
					; set version #
	MOVL	R6,PLG$L_EOF(R5)	; and eof vbn
	MOVW	IFB$L_DVBN(R9),PLG$W_DVBN(R5)
					; and first data vbn
	MOVL	IFB$L_MRN(R9),PLG$L_MRN(R5)
					; and max record number
	BSBW	RM$MAKSUM		; calculate and set checksum
	BISB2	#BDB$M_DRT!BDB$M_VAL,BDB$B_FLGS(R4)
					; say valid and dirty
	MOVL	#RLS$M_WRT_THRU,R3	; cause immediate write
	MOVL	R5,-(SP)		; protect PLG address from RELEASE
	BSBW	RM$RELEASE		; release prolog
	MOVL	(SP)+,R5		; restore PLG address
	BLBC	R0,RLSERR		; branch on error

;
; If AI journaling, journal the prolog so that the CREATE can be AI recovered.
;

	BBC	#IFB$V_AI,IFB$B_JNLFLG(R9),EXIT ; skip if not AI journaling
	BSBW	JNL_REL_PLG		; journal the prolog
	BLBC	R0,ERRJNL		; branch on error
EXIT:	BRW	RM$CREATEXIT1		; Finish up create

;
; handle errors
;

ERRBUG:
RLNERR:					; failed zero data buckets
	PUSHL	R0			; store status
	$CACHE	VBN=#1,-
		SIZE=#0,-
		ERR=EXIT		; re-get prolog bdb
	JSB	RM$RLNERR		; unlock prolog
	BRB	EXIT			; and get out

RLSERR:	TSTL	FAB$L_STV(R8)		; do we have an stv?
	BNEQ	10$			; okay use it
	BISL3	#^X1000,(SP),FAB$L_STV(R8); else set the RMS error there
10$:	RMSERR	WPL,(SP)		; prolog write error
	BRB	EXIT			; go clean up

ERRJNL:	RMSERR	CJF,(SP)		; journal write error
	MOVL	R0,FAB$L_STV(R8)	; save CJF status where user can find it
	BRB	EXIT			; go clean up

	.SUBTITLE JNL_REL_PLG - Journal the relative Prolog
;++
; JNL_REL_PLG
;
;	This routine writes the prolog as a block entry to the AI journal.
;
; Inputs:
;
;	r9	IFAB
;	r5	PLG
;
; Outputs:
;
;	r0	status
;
;	PROLOG witten to the journal.
;
;--

JNL_REL_PLG:

	MOVL	IFB$L_JNLBDB(R9),R3		; get address of BDB/Buffer
	MOVL	BDB$L_ADDR(R3),R2		; get RJR address

;
; Set up the common RJR overhead.
;
	MOVB	#RJR$C_BLOCK,RJR$B_ENTRY_TYPE(R2)	; block IO
	MOVB	#RJR$C_REL,RJR$B_ORG(R2)		; file organization
	MOVB	#RJR$_WRITE,RJR$B_OPER(R2)		; operation

;
; Set up the block IO entry.
;
	MOVL	#1,RJR$L_BLOCK_VBN(R2)		; PROLOG is VBN 1
	MOVL	#512,RJR$L_BLOCK_SIZE(R2)	; size of PROLOG is 512 bytes
	PUSHR	#^M<R2,R3,R4,R5>		; save MOVC3 regs
	MOVC3	#512,(R4),RJR$T_BLOCK(R2)	; copy the prolog
	POPR	#^M<R2,R3,R4,R5>		; restore MOVC3 regs

;
; Set up the WRTJNL call parameters.
;
	MOVL	R3,-(SP)			; JNLBDB address
	MOVL	#CJF$_AI,-(SP)			; AI journaling
	JSB	RM$WRTJNL			; write entry to journal

	ADDL2	#8,SP				; pop parameters off stack
	RSB					; return WRTJNL status to caller

	.END
