; *********************************************************************************************************************************
;  Created 15-SEP-1984 22:52:04  by  VAX-11 SDL V2.0       Source: 15-SEP-1984 22:49:47 _$255$DUA28:[SMGRTL.SRC]SMGDEF.SDL;1       
; *********************************************************************************************************************************
 
 
	.MACRO	$SMGDEF,$GBL
	$DEFINI	SMG,$GBL
;  Definitions for RTL Screen Management
; 
;  Input terminator codes
; 
;  Control characters
$EQU	SMG$K_TRM_CTRLA	1               ;  SOH
$EQU	SMG$K_TRM_CTRLB	2               ;  STX
$EQU	SMG$K_TRM_CTRLC	3               ;  ETX
$EQU	SMG$K_TRM_CTRLD	4               ;  EOT
$EQU	SMG$K_TRM_CTRLE	5               ;  ENQ
$EQU	SMG$K_TRM_CTRLF	6               ;  ACK
$EQU	SMG$K_TRM_CTRLG	7               ;  BEL
$EQU	SMG$K_TRM_CTRLH	8               ;  BS
$EQU	SMG$K_TRM_CTRLI	9               ;  HT
$EQU	SMG$K_TRM_CTRLJ	10              ;  LF
$EQU	SMG$K_TRM_CTRLK	11              ;  VT
$EQU	SMG$K_TRM_CTRLL	12              ;  FF
$EQU	SMG$K_TRM_CTRLM	13              ;  CR
$EQU	SMG$K_TRM_CTRLN	14              ;  SO
$EQU	SMG$K_TRM_CTRLO	15              ;  SI
$EQU	SMG$K_TRM_CTRLP	16              ;  DLE
$EQU	SMG$K_TRM_CTRLQ	17              ;  DC1
$EQU	SMG$K_TRM_CTRLR	18              ;  DC2
$EQU	SMG$K_TRM_CTRLS	19              ;  DC3
$EQU	SMG$K_TRM_CTRLT	20              ;  DC4
$EQU	SMG$K_TRM_CTRLU	21              ;  NAK
$EQU	SMG$K_TRM_CTRLV	22              ;  SYN
$EQU	SMG$K_TRM_CTRLW	23              ;  ETB
$EQU	SMG$K_TRM_CTRLX	24              ;  CAN
$EQU	SMG$K_TRM_CTRLY	25              ;  EM
$EQU	SMG$K_TRM_CTRLZ	26              ;  SUB
;  Synonyms for control characters
$EQU	SMG$K_TRM_BS	8
$EQU	SMG$K_TRM_HT	9
$EQU	SMG$K_TRM_LF	10
$EQU	SMG$K_TRM_CR	13
;  Keypad keys
$EQU	SMG$K_TRM_PF1	256
$EQU	SMG$K_TRM_PF2	257
$EQU	SMG$K_TRM_PF3	258
$EQU	SMG$K_TRM_PF4	259
$EQU	SMG$K_TRM_KP0	260
$EQU	SMG$K_TRM_KP1	261
$EQU	SMG$K_TRM_KP2	262
$EQU	SMG$K_TRM_KP3	263
$EQU	SMG$K_TRM_KP4	264
$EQU	SMG$K_TRM_KP5	265
$EQU	SMG$K_TRM_KP6	266
$EQU	SMG$K_TRM_KP7	267
$EQU	SMG$K_TRM_KP8	268
$EQU	SMG$K_TRM_KP9	269
$EQU	SMG$K_TRM_ENTER	270
$EQU	SMG$K_TRM_MINUS	271
$EQU	SMG$K_TRM_COMMA	272
$EQU	SMG$K_TRM_PERIOD	273     ;  Cursor positioning keys
$EQU	SMG$K_TRM_UP	274
$EQU	SMG$K_TRM_DOWN	275
$EQU	SMG$K_TRM_LEFT	276
$EQU	SMG$K_TRM_RIGHT	277
;  Function keys
$EQU	SMG$K_TRM_F6	286
$EQU	SMG$K_TRM_F7	287
$EQU	SMG$K_TRM_F8	288
$EQU	SMG$K_TRM_F9	289
$EQU	SMG$K_TRM_F10	290
$EQU	SMG$K_TRM_F11	291
$EQU	SMG$K_TRM_F12	292
$EQU	SMG$K_TRM_F13	293
$EQU	SMG$K_TRM_F14	294
$EQU	SMG$K_TRM_HELP	295             ;  F15
$EQU	SMG$K_TRM_DO	296             ;  F16
$EQU	SMG$K_TRM_F17	297
$EQU	SMG$K_TRM_F18	298
$EQU	SMG$K_TRM_F19	299
$EQU	SMG$K_TRM_F20	300
;  Editing keys
$EQU	SMG$K_TRM_FIND	311             ;  E1
$EQU	SMG$K_TRM_INSERT_HERE	312     ;  E2
$EQU	SMG$K_TRM_REMOVE	313     ;  E3
$EQU	SMG$K_TRM_SELECT	314     ;  E4
$EQU	SMG$K_TRM_PREV_SCREEN	315     ;  E5
$EQU	SMG$K_TRM_NEXT_SCREEN	316     ;  E6
;  Synonyms for editing keys
$EQU	SMG$K_TRM_E1	311             ;  FIND
$EQU	SMG$K_TRM_E2	312             ;  INSERT_HERE
$EQU	SMG$K_TRM_E3	313             ;  REMOVE
$EQU	SMG$K_TRM_E4	314             ;  SELECT
$EQU	SMG$K_TRM_E5	315             ;  PREV_SCREEN
$EQU	SMG$K_TRM_E6	316             ;  NEXT_SCREEN
;  Conditions
$EQU	SMG$K_TRM_CANCELLED	508     ;  I/O cancelled by SMG$CANCEL_INPUT
$EQU	SMG$K_TRM_TIMEOUT	509     ;  Timeout period expired
$EQU	SMG$K_TRM_BUFFER_FULL	510     ;  Buffer is full
$EQU	SMG$K_TRM_UNKNOWN	511     ;  Unknown terminator
; 
;  Key definition attributes
; 
$EQU	SMG$M_KEY_NOECHO	1
$EQU	SMG$M_KEY_TERMINATE	2
$EQU	SMG$M_KEY_LOCK	4
$EQU	SMG$M_KEY_PROTECTED	8
$EQU	SMG$M_KEY_SETSTATE	16
$EQU	SMG$S_KEY_DEF_ATTR	4
$EQU	SMG$V_KEY_NOECHO	0       ;  Don't echo strings
$EQU	SMG$V_KEY_TERMINATE	1       ;  This key terminates read
$EQU	SMG$V_KEY_LOCK	2               ;  Lock new state
$EQU	SMG$V_KEY_PROTECTED	3       ;  Definition is protected
$EQU	SMG$V_KEY_SETSTATE	4       ;  Definition sets a state (output only)
;  SCREEN MANAGEMENT REQUEST TYPES 
$EQU	SMG$C_CHANGE_RENDITION	10      ;  SMG$CHANGE_RENDITION
$EQU	SMG$C_DELETE_CHARS	11      ;  SMG$DELETE_CHARS
$EQU	SMG$C_ERASE_DISPLAY	12      ;  SMG$ERASE_DISPLAY
$EQU	SMG$C_ERASE_LINE	13      ;  SMG$ERASE_LINE
$EQU	SMG$C_HOME_CURSOR	14      ;  SMG$HOME_CURSOR
$EQU	SMG$C_INSERT_CHARS	15      ;  SMG$INSERT_CHARS
$EQU	SMG$C_INSERT_LINE	16      ;  SMG$INSERT_LINE
$EQU	SMG$C_PUT_CHARS	17              ;  SMG$PUT_CHARS
$EQU	SMG$C_PUT_LINE	18              ;  SMG$PUT_LINE
$EQU	SMG$C_PUT_DISPLAY_ENCODED	19 ;  SMG$PUT_VIRTUAL_DISPLAY_ENCODED
$EQU	SMG$C_RETURN_CURSOR_POS	20      ;  SMG$RETURN_CURSOR_POS
$EQU	SMG$C_PUT_WITH_SCROLL	21      ;  SMG$PUT_WITH_SCROLL
$EQU	SMG$C_SET_CURSOR_ABS	22      ;  SMG$SET_CURSOR_ABS
$EQU	SMG$C_SET_CURSOR_REL	23      ;  SMG$SET_CURSOR_REL
$EQU	SMG$C_DELETE_LINE	24      ;  SMG$DELETE_LINE
$EQU	SMG$C_ERASE_CHARS	25      ;  SMG$ERASE_CHARS
$EQU	SMG$C_SCROLL_DISPLAY_AREA	26 ;  SMG$SCROLL_DISPLAY_AREA
$EQU	SMG$C_CHANGE_VIRTUAL_DISPLAY	27 ;  SMG$CHANGE_VIRTUAL_DISPLAY
$EQU	SMG$C_LABEL_BORDER	28      ;  SMG$LABEL_BORDER
$EQU	SMG$C_END_DISPLAY_UPDATE	29 ;  SMG$END_DISPLAY_UPDATE
;  Character Set Codes
$EQU	SMG$C_UNITED_KINGDOM	0
$EQU	SMG$C_ASCII	1
$EQU	SMG$C_SPEC_GRAPHICS	2       ;  Special Graphics
$EQU	SMG$C_ALT_CHAR	3               ;  Alternate - Standard Char.
$EQU	SMG$C_ALT_GRAPHICS	4       ;  Alternate - Special Graphics
; 
; 	The following constants define corner cursor positions used in
; 	SMG$HOME_CURSOR.
; 
$EQU	SMG$C_UPPER_LEFT	0
$EQU	SMG$C_LOWER_LEFT	1
$EQU	SMG$C_UPPER_RIGHT	2
$EQU	SMG$C_LOWER_RIGHT	3
; 
; 	The following constants define label positions used in
; 	SMG$LABEL_BORDER.
; 
$EQU	SMGK_TOP	0
$EQU	SMGK_BOTTOM	1
$EQU	SMGK_LEFT	2
$EQU	SMGK_RIGHT	3
; 
;         DEFINE BIT MASKS AND VALUES FOR SCREEN ATTRIBUTES
; 
$EQU	SMG$M_BOLD	1
$EQU	SMG$M_REVERSE	2
$EQU	SMG$M_BLINK	4
$EQU	SMG$M_UNDERLINE	8
$EQU	SMG$M_NORMAL	0               ;  no bits set 
; 
; 	DEFINE BITS, MASKS, AND FIELDS FOR THE CONTROL MODES.
; 
$EQU	SMG$M_BUF_ENABLED	1
$EQU	SMG$M_MINUPD	2
$EQU	SMG$M_CLEAR_SCREEN	4
$EQU	SMG$M_NOTABS	8
$EQU	SMG$K_BUF_ENABLED	0       ;  Enable Buffering bitvector index
$EQU	SMG$K_MINUPD	1               ;  Enable minimal update bitvector index
$EQU	SMG$K_CLEAR_SCREEN	2       ;  Clear screen on exit
$EQU	SMG$K_NOTABS	3               ;  Don't use physical tabs
; 
; 	Master color wheel for screen background colors.
; 
$EQU	SMG$C_COLOR_UNKNOWN	0
$EQU	SMG$C_COLOR_WHITE	1
$EQU	SMG$C_COLOR_BLACK	2
; 
;  The following constants correspond to the internal types defined
;  in SMGTERM.REQ.  These names used to be for public use - the SMGTERM names
;  used to be needed for compatibility with SCR$ and SMG$ code.
;  Use of these names is now very highly discouraged.
; 
$EQU	SMG$K_UNKNOWN	0               ;  non-graphics or unknown type
$EQU	SMG$K_VT05	1               ;  vt05 series terminal
$EQU	SMG$K_VT52	2               ;  vt52 series terminal
$EQU	SMG$K_VT100	3               ;  vt100 series terminal
$EQU	SMG$K_VTFOREIGN	4               ;  foreign terminal (ft1-8)
$EQU	SMG$K_HARDCOPY	5               ;  hardcopy device
; 
; 	The following masks define values to be used
; 	to specify a display attribute.  These may be added
; 	together to specify multiple attributes.
; 
$EQU	SMG$M_BORDER	1
$EQU	SMG$M_TRUNC_ICON	2
$EQU	SMG$M_DISPLAY_CONTROLS	4
$EQU	SMG$M_UP	1
$EQU	SMG$M_DOWN	2
$EQU	SMG$M_RIGHT	4
$EQU	SMG$M_LEFT	8
$EQU	SMG$K_FIRST_PRIV_TYPE	191
$EQU	SMG$S_SMGDEF	32
$EQU	SMG$R_SMGDEF_BITS	0
$EQU	SMG$V_BOLD	0               ;  Bold rendition
$EQU	SMG$V_REVERSE	1               ;  Reverse video rendition
$EQU	SMG$V_BLINK	2               ;  Blink rendition
$EQU	SMG$V_UNDERLINE	3               ;  Underline rendition
$EQU	SMG$R_SMGMODE_BITS	0
$EQU	SMG$V_BUF_ENABLED	0       ;  Enable buffering
$EQU	SMG$V_MINUPD	1               ;  Enable minimal update (default)
$EQU	SMG$V_CLEAR_SCREEN	2       ;  Clear screen on exit
$EQU	SMG$V_NOTABS	3               ;  Don't use physical tabs
$EQU	SMG$S_DISPLAY_ATTRIBUTES	1
$EQU	SMG$R_DISPLAY_ATTRIBUTES	0
$EQU	SMG$V_BORDER	0               ;  Display is bordered
$EQU	SMG$V_TRUNC_ICON	1       ;  Truncation icon enabled if set
$EQU	SMG$V_DISPLAY_CONTROLS	2       ;  Display carriage controls if set
; 
; 	When an out-of-band AST triggers, the user's AST routine
; 	will get called.  The first argument passed to his
; 	routine is the address of a Band Information Table.
; 	The offsets into this table are described below.
; 	To make it easy to access from certain languages,
; 	the table is arranged so that it is convenient to
; 	reference it as a longword vector as well as a byte block.
; 
$EQU	SMG$S_BAND_INFORMATION_TABLE	12
$EQU	SMG$R_BAND_INFORMATION_TABLE	0
$EQU	SMG$L_PASTEBOARD_ID	0       ;  Pasteboard ID
$EQU	SMG$L_ARG	4               ;  User's AST argument
$EQU	SMG$R_CHARACTER_OVERLAY	8
$EQU	SMG$B_CHARACTER	8               ;  The character typed
$EQU	SMG$L_CHARACTER	8               ;  The character and 3 spaces
; 	When SMG$GET_PASTEBOARD_ATTRIBUTES is called,
; 	it returns data in a pasteboard information block.
; 	The following structure is used to reference fields
; 	in this block.
; 	Items marked with a plus (+) will be 0 unless the
; 	device is a terminal (DEVCLASS=DC$_TERM).
$EQU	SMG$S_PASTEBOARD_INFO_BLOCK	32
$EQU	SMG$R_PASTEBOARD_INFO_BLOCK	0
$EQU	SMG$L_DEVCHAR	0               ;  Device characteristics
$EQU	SMG$L_DEVDEPEND	4               ;  Specific characteristics (1)
$EQU	SMG$L_DEVDEPEND2	8       ;  Specific characteristics (2)
$EQU	SMG$B_DEVCLASS	12              ;  Device class (e.g. DC$_TERM)
$EQU	SMG$B_SMG_DEVTYPE	13      ;  Internal SMG device type
$EQU	SMG$B_PHY_DEVTYPE	14      ;  Physical device type (e.g. DT$_VT100)
$EQU	SMG$B_ROWS	15              ;  Number of rows on device
$EQU	SMG$W_WIDTH	16              ;  Terminal width
$EQU	SMG$B_COLOR	18              ;  Reserved for future use
$EQU	SMG$B_PARITY	19              ;  Parity attributes (+)
$EQU	SMG$W_SPEED	20              ;  Terminal Speed (+)
$EQU	SMG$W_FILL	22              ;  Fill characteristics (+)
$EQU	SMG$W_CURSOR_ROW	24      ;  Row where physical cursor is
;  (1-origin)
$EQU	SMG$W_CURSOR_COL	26      ;  Col where physical cursor is
;  (1-origin)
$EQU	SMG$L_CURSOR_DID	28      ;  Display id of topmost
;  display that cursor is in.
;  0 if cursor is not in a
;  virtual display
; 
; 	Directions are set up as a structure, assuming that directions
; 	may be combined in the future (ie. diagonal movement).
; 
$EQU	SMG$S_SCROLL_DIRS	1
$EQU	SMG$R_SCROLL_DIRS	0
$EQU	SMG$V_UP	0               ;  Scroll up
$EQU	SMG$V_DOWN	1               ;  Scroll down
$EQU	SMG$V_RIGHT	2               ;  Scroll right
$EQU	SMG$V_LEFT	3               ;  Scroll left
	$DEFEND	SMG,$GBL,DEF
	.ENDM
