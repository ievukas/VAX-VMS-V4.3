	$BEGIN	NT0CONN,000,NF$NETWORK,<NETWORK CONNECT STREAM>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module communicates with the file access listener at the remote
;	node to establish a record stream for the specified file.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	09-DEC-1977
;
; Modified By:
;
;
;	V03-004	JEJ0009		J E Johnson	16-Mar-1984
;		Increase the level of checking on the interaction of the
;		SQO bit and the various RAC options.
;
;	V03-003 JEJ0004		J E Johnson	01-Mar-1984
;		Disable file transfer mode for access of image indirect
;		process permanent files to permit proper network action
;		across various image invocations, as in the handling of
;		$DISPLAY.
;
;	V03-002	JAK0124		J A Krycka	06-SEP-1983
;		Make corresponding source code change for VMS V3.5 patch in
;		support of VAXELAN.
;
;	V03-001	JAK0123		J A Krycka	29-AUG-1983
;		Remove check for a MBX device in NT$CHK_SQO to permit use of
;		DAP file transfer mode during access to the null device or to
;		a mailbox on the remote node.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPCNFDEF			; Define DAP Configuration message
	$DAPCTLDEF			; Define DAP Control message
	$IFBDEF				; Define IFAB symbols
	$IRBDEF				; Define IRAB symbols
	$NWADEF				; Define Network Work Area symbols
	$RABDEF				; Define Record Access Block symbols
	$RMSDEF				; Define RMS error code symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	NWA$Q_FLG EQ 0

	PARTNER = DAP$W_PARTNER * 8	; Offset to PARTNER field

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$CONNECT - PERFORM NETWORK CONNECT FUNCTION

;++
; NT$CONNECT - engages in a DAP dialogue with the remote FAL to establish a
;	record stream for the specified file.
;
; Calling Sequence:
;
;	BSBW	NT$CONNECT
;
; Input Parameters:
;
;	R8	RAB address
;	R9	IRAB address
;	R10	IFAB address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	DAP$Q_SYSCAP bits APPEND, SEQRAC, SEQFIL, SWMODE,
;			  RANRRN, RANKEY, RANRFA, RANVBN
;	DAP$V_GEQ_V52, DAP$V_GEQ_54, DAP$V_GEQ_60
;	DAP$V_VAXVMS, DAP$V_VAXELAN
;	IFB$V_BIO
;	IFB$V_BRO
;	IFB$V_SQO
;	RAB$B_KRF
;	RAB$B_RAC
;	RAB$L_ROP bits
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	IFB$V_BIO
;	IRB$V_DAP_CONN
;	NWA$V_FTM_EOF
;	NWA$V_FTM_INIT
;	NWA$V_RAC_FLG
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$CONNECT::				; Entry point
	$TSTPT	NTCONN			;
	MOVL	IFB$L_NWA_PTR(R10),R7	; Get address of NWA (and DAP)
	BBC	#RAB$V_BIO,-		; Set internal block I/O flag if
		RAB$L_ROP(R8),SEND_CTL	;  partner supports BRO and user set
	BBC	#IFB$V_BRO,-		;  both FAC BRO and ROP BIO bits, thus
		IFB$B_FAC(R10),SEND_CTL	;  declaring block I/O mode on connect
	BITW	#<<1@<DAP$V_VAXVMS-PARTNER>>!-
		  <1@<DAP$V_VAXELAN-PARTNER>>!-
		0>,DAP$W_PARTNER(R7)	; Branch if partner is neither VAX/VMS
	BEQL	SEND_CTL		;  nor VAXELAN
	$SETBIT	#IFB$V_BIO,IFB$B_FAC(R10)

;+
; Build and send DAP Control message to partner.
;-

SEND_CTL:				;
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_CONNECT,(R5)+	; Store CTLFUNC field
	MOVB	#DAP$M_ROP,(R5)+	; Store CTLMENU field
	BBS	#IFB$V_BIO,-		; Branch if block I/O specified
		IFB$B_FAC(R10),10$	;
	CMPB	NWA$B_ORG(R7),#NWA$K_IDX; Branch if not IDX organization
	BNEQ	10$			;
	BISB2	#DAP$M_KRF,-1(R5)	; Add KRF field to menu
	MOVB	RAB$B_KRF(R8),(R5)+	; Store key of reference field
10$:	BSBW	NT$MAP_ROP		; Store ROP field
	BBC	#RAB$V_EOF,-		; Branch if position to end-of-file
		RAB$L_ROP(R8),20$	;  was not specified
	BBC	#DAP$V_APPEND,-		; Branch if partner does not support
		DAP$Q_SYSCAP(R7),ERRSUP	;  file append
20$:	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Control message to FAL
	BLBC	R0,EXIT			; Branch on failure

;+
; Receive DAP Acknowledge message from partner.
;-

RECV_ACK:				;
	$SETBIT	#DAP$K_ACK_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Acknowledge message
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,EXIT			; Branch on failure

;+
; Perform initialization functions.
;-

	$SETBIT	#IRB$V_DAP_CONN,(R9)	; Yes, FAL has completed connect
	$SETBIT	#NWA$V_RAC_FLG,(R7)	; Set first-time-thru flag for
					;  NT$CHK_RAC
	BSBB	NT$CHK_SQO		; Reverse sense of SQO bit as required
	BBC	#IFB$V_SQO,(R10),10$	; Branch if not sequential-only
	$SETBIT	#NWA$V_FTM_INIT,(R7)	; Set SEQ file transfer one-shot flag
	$CLRBIT	#NWA$V_FTM_EOF,(R7)	; Initialize EOF flag
10$:	RMSSUC				; Return success
EXIT:	RSB				; Exit with RMS code in R0
ERRSUP:	BRW	NT$RMT_ROP		; Branch aid

	.SBTTL	NT$CHK_SQO

;++
; NT$CHK_SQO will override the user's setting of the SQO bit in the FOP field
; if any of the following conditions are met:
;
;   (1)	IFB$V_SQO is set (forcing DAP file transfer mode) if RAC=SEQ, record
;	access is requested and the remote node does not support DAP record
;	access mode.  This is useful for communicating with many non-VAX nodes
;	through higher-level language programs that sequentially access remote
;	files.
;
;   (2)	IFB$V_SQO is set (forcing DAP file transfer mode) if the remote node
;	does not support access by virtual block number (VBN) and the requested
;	access is block I/O
;
;   (3)	IFB$V_SQO is cleared (forcing DAP record access mode) if remote device
;	is a terminal, the requested access is record access and the remote
;	node supports DAP record access mode.  This allows programs to perform
;	bi-directional I/O to VMS terminals with SQO set. This is important to
;	higher-level languages such as FORTRAN, whose run-time library sets
;	SQO if RAC=SEQ.
;
;   (4)	IFB$V_SQO is cleared in either record access or block mode access if
;	the accessed file is an image indirect PPF, thus allowing successful
;	completion of control operations, such as $DISPLAY.
;--

NT$CHK_SQO::				; Entry point
	BBS	#IFB$V_BIO,-		; Branch if block I/O specified
		IFB$B_FAC(R10),20$

;
; Enable DAP file transfer mode for record I/O if conditions in (1) are met.
;

	BBS	#DAP$V_SEQRAC,-		; Branch if remote node supports
		DAP$Q_SYSCAP(R7),30$	;  DAP record access mode
	CMPB	RAB$B_RAC(R8),#RAB$C_SEQ; Branch if access mode is not
	BNEQ	10$			;  sequential
	$SETBIT	#IFB$V_SQO,(R10)	; Internally set SQO, overriding user
10$:	RSB

;
; Enable DAP file transfer mode for block I/O if conditions in (2) are met.
;

20$:	BBS	#DAP$V_RANVBN,-		; Branch if remote node supports random
		DAP$Q_SYSCAP(R7),40$	;  access by VBN
	$SETBIT	#IFB$V_SQO,(R10)	; Internally set SQO, overriding user
	RSB

;
; Disable DAP file transfer mode if conditions in (3) or (4) are met.
;

30$:	BBS	#NWA$V_DEVTRM,(R7),50$	; Leave the SQO bit alone if we are
40$:	BBC	#IFB$V_PPF_IMAGE,(R10),60$ ; not a terminal or an image PPF.
50$:	$CLRBIT	#IFB$V_SQO,(R10)	; Internally clear SQO, overriding user
60$:	RSB

	.SBTTL	NT$CHK_RAC

;++
; NT$CHK_RAC compares the current RMS RAC value with the previous RAC value used
; to check for a switch in access mode.
;--

NT$CHK_RAC::				; Entry point
	BBSC	#NWA$V_RAC_FLG,(R7),10$	; Check and clear first-time-thru flag
	CMPB	RAB$B_RAC(R8),-		; Branch if no switch in access mode
		NWA$B_RMS_RAC(R7)	;
	BEQL	20$			;
	BBC	#DAP$V_SWMODE,-		; Branch if switching of access mode
		DAP$Q_SYSCAP(R7),40$	;  is not supported by FAL
10$:	MOVB	RAB$B_RAC(R8),-		; Save user RAC value
		NWA$B_RMS_RAC(R7)	;
	BSBB	GET_RAC			; Get DAP RAC value
	BLBC	R0,30$			; Branch on error
	MOVB	R1,NWA$B_DAP_RAC(R7)	; Save DAP RAC value
20$:	RMSSUC				; Return success
30$:	RSB				; Exit
40$:	BRW	NT$RMT_RAC		; Declare error and exit

;++
; GET_RAC returns the DAP RAC value in R1 if supported by the remote FAL.
; The DAP value is determined by the combination of IFB$V_BIO, IFB$V_SQO,
; and RAB$B_RAC.
;--

GET_RAC:
	RMSSUC				; Anticipate success
	BBC	#IFB$V_SQO,(R10),20$	; Branch if not in file xfer mode
	CMPB	#RAB$C_SEQ,-		; Sequential access is the only one
		RAB$B_RAC(R8)		; allowed in FTM.
	BNEQ	90$			; If not sequential return an error

	MOVZBL	#DAP$K_BLK_FILE,R1	; BIO=1; SQO=1; RAC=SEQ (assumed)
	BBS	#IFB$V_BIO,-		; Determine if record or block seql.
		IFB$B_FAC(R10),10$
	MOVZBL	#DAP$K_SEQ_FILE,R1	; BIO=0; SQO=1; RAC=SEQ
10$:	BBC	#DAP$V_SEQFIL,-		; Branch if not supported by FAL
		DAP$Q_SYSCAP(R7),80$	; Note:	there is no BLKFIL bit defined
	RSB				;	(i.e., block I/O file xfer mode)

20$:	BBS	#IFB$V_BIO,-		; Branch if block I/O specified
		IFB$B_FAC(R10),60$
	$CASEB	SELECTOR=RAB$B_RAC(R8)-	; Access mode:
		DISPL=<-		;
		    30$-		;  Sequential access
		    40$-		;  Random access by key value
		    50$-		;  Random access by RFA
		>			;
30$:	MOVZBL	#DAP$K_SEQ_ACC,R1	; BIO=0; SQO=0; RAC=SEQ
	BBC	#DAP$V_SEQRAC,-		; Branch if not supported by FAL
		DAP$Q_SYSCAP(R7),80$
	RSB
40$:	MOVZBL	#DAP$K_KEY_ACC,R1	; BIO=0; SQO=0; RAC=KEY
	BBC	#DAP$V_RANKEY,-		; Branch if not supported by FAL
		DAP$Q_SYSCAP(R7),45$	;  (random access by key for IDX org)
	RSB
45$:	BBC	#DAP$V_RANRRN,-		; Branch if not supported by FAL
		DAP$Q_SYSCAP(R7),80$	;  (random access by RRN for REL org)
	RSB
50$:	MOVZBL	#DAP$K_RFA_ACC,R1	; BIO=0; SQO=0; RAC=RFA
	BBC	#DAP$V_RANRFA,-		; Branch if not supported by FAL
		DAP$Q_SYSCAP(R7),80$
	RSB
60$:	MOVZBL	#DAP$K_BLK_VBN,R1	; BIO=1; SQO=0; RAC=xxx
	BBC	#DAP$V_RANVBN,-		; Branch if not supported by FAL
		DAP$Q_SYSCAP(R7),80$
	RSB

80$:	BRW	NT$RMT_RAC		; Declare error and exit
90$:	RMSERR	FTM			; Declare a File Transfer Mode error.
	RSB

	.SBTTL	NT$MAP_ROP

;++
; Encode the ROP field.
;--

NT$MAP_ROP::				; Entry point
	MOVL	RAB$L_ROP(R8),R1	; Get ROP bits
	CLRL	R2			; Clear resultant ROP bits

;
; The following DAP bits are defined in the DAP V4.1 specification.
; These will be mapped.
;

	$MAPBIT	RAB$V_EOF,DAP$V_EOF	; Map EOF bit

;
; The following DAP bits are defined in the DAP V5.2 specification.
; These will be mapped iff partner has implemented to DAP since V5.2 and for
; UIF and TPT additional checks will be made.
;

	BBC	#DAP$V_GEQ_V52,(R7),10$	; Branch if partner uses DAP before V5.2
	$MAPBIT	RAB$V_FDL,DAP$V_FDL	; Map FDL bit
	$MAPBIT	RAB$V_LOA,DAP$V_LOA	; Map LOA bit
	$MAPBIT	RAB$V_KGE,DAP$V_KGE	; Map KGE bit
	$MAPBIT	RAB$V_KGT,DAP$V_KGT	; Map KGT bit
	BBC	#DAP$V_RMS,(R7),10$	; Branch if partner is not RMS based
	$MAPBIT	RAB$V_UIF,DAP$V_UIF	; Map UIF bit
	BITW	#<<1@<DAP$V_VAXVMS-PARTNER>>!-
		  <1@<DAP$V_VAXELAN-PARTNER>>!-
		0>,DAP$W_PARTNER(R7)	; Branch if partner is neither VAX/VMS
	BEQL	10$			;  nor VAXELAN
	$MAPBIT	RAB$V_TPT,DAP$V_TPT	; Map TPT bit
; *****	$MAPBIT	RAB$V_RAH,DAP$V_RAH	; Map RAH bit
; *****	$MAPBIT	RAB$V_WBH,DAP$V_WBH	; Map WBH bit

;
; The following DAP bits are defined in the DAP V5.4 specification.
; These will be mapped iff partner has implemented to DAP since V5.4 and
; partner is VAX/VMS.
;

10$:	BBC	#DAP$V_GEQ_V54,(R7),20$	; Branch if partner uses DAP before V5.4
	BITW	#<<1@<DAP$V_VAXVMS-PARTNER>>!-
		  <1@<DAP$V_VAXELAN-PARTNER>>!-
		0>,DAP$W_PARTNER(R7)	; Branch if partner is neither VAX/VMS
	BEQL	20$			;  nor VAXELAN
	$MAPBIT	RAB$V_ULK,DAP$V_ULK	; Map ULK bit
	$MAPBIT	RAB$V_NLK,DAP$V_NLK	; Map NLK bit
	$MAPBIT	RAB$V_RLK,DAP$V_RLK	; Map RLK bit
	$MAPBIT	RAB$V_BIO,DAP$V_ROPBIO	; Map BIO bit

;
; The following DAP bits are defined in the DAP V6.0 specification.
; These will be mapped iff partner has implemented to DAP since V6.0 and
; (except for LIM) partner is VAX/VMS.
;

20$:	BBC	#DAP$V_GEQ_V60,(R7),30$	; Branch if partner uses DAP before V6.0
	$MAPBIT	RAB$V_LIM,DAP$V_LIM	; Map LIM bit
	BBC	#DAP$V_VAXVMS,(R7),30$	; Branch if partner is not VAX/VMS
	$MAPBIT	RAB$V_NXR,DAP$V_NXR	; Map NXR bit
	$MAPBIT	RAB$V_WAT,DAP$V_ROPWAT	; Map WAT bit
	$MAPBIT	RAB$V_RRL,DAP$V_RRL	; Map RRL bit
	$MAPBIT	RAB$V_REA,DAP$V_REA	; Map REA bit
30$:	MOVL	R2,R1			; Move data to correct register
	BSBW	NT$CVT_BN4_EXT		; Store ROP as an extensible field
	RSB				; Exit

	.END				; End of module
