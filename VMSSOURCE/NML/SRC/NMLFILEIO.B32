%TITLE 'NML File I/O modules'
MODULE NML$FILEIO (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines to handle I/O for the permanent
!	data base files.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-DEC-1979
!
! MODIFIED BY:
!	V03-003	MKP0003		Kathy Perko	4-July-1983
!		Convert node permanant database to four ISAM keys.
!		This will make it much faster.
!
!	V03-002	MKP0002		Kathy Perko	29-June-1982
!		Modify entity qualifier handling to use the qualifier's
!		Parameter Semantic Table (PST) entry address instead of
!		the Network Management parameter ID as input.
!		Fix bug in NML$MATCHRECORD so it quits looking if there's
!		no qualifier.
!
!	V03-001	MKP0001		Kathy Perko	3-May-1982
!		Change NML$MATCHRECORD to handle entity qualifiers.
!
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$OPENFILE,
    NML$CLOSEFILE,
    NML$READRECORD,
    NML$MATCHRECORD,
    NML$WRITERECORD,
    NML$DELETRECORD,
    NML$CHKFILEIO;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL LITERAL
    NML$_READERR,
    NML$_WRITERR,
    NML$_DELETERR,
    NML$_RECREPLC,
    NML$_RECADDED,
    NML$_RECDELET,
    NML$_NORECOWN;

EXTERNAL
    nml$gq_proprvmsk : BBLOCK [8];

EXTERNAL ROUTINE
    nma$closefile,
    nma$deleterec,
    nma$matchrec,
    nma$openfile,
    nma$readrec,
    nma$writerec,
    nma$searchfld,
    nml$bld_reply,
    nml$error_1,
    nml$close_node_file,
    nml$delete_node_rec,
    nml$open_node_file,
    nml$read_node_rec,
    nml$send,
    nml$write_node_rec;


%SBTTL 'NML$OPENFILE  Open permanent data base file'
GLOBAL ROUTINE nml$openfile (fid, access) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine opens the permanent data base file(s) specified by
!	the code in FID with the required access as specified by the
!	code in ACCESS.
!
! FORMAL PARAMETERS:
!
!	FID 		Permanent data base file identification code
!			(NMA$C_OPN_xxxx).
!	ACCESS 		File access code (NMA$C_OPN_AC_RO=>read,
!			NMA$C_OPN_AC_RW=>read/write).
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns a code indicating success.
!
! SIDE EFFECTS:
!
!	Causes errors to be signaled.
!
!--

BEGIN

LOCAL
    status;
!
! Require OPERATOR privilege to write to permanent database files.  Since
! the files get left open for the entire NCP session, if the caller has
! OPERATOR privilege, always open the files for read and write.  If the
! caller doesn't have OPER privilege, and is trying to open the file for
! write access, return a privilege violation.
!
IF .nml$gq_proprvmsk [prv$v_oper] THEN
    access = nma$c_opn_ac_rw
ELSE
IF .access EQLU nma$c_opn_ac_rw THEN
    nml$error_1 (nma$c_sts_pri);
!
! Open the permanent data base file.  Since the node permanent database
! structure is quite different from the others, it is handled by separate
! routines.  It's different because it's so much larger, it must be faster.
!
IF .fid EQL nma$c_opn_node THEN
    status = nml$open_node_file ()
ELSE
    status = nma$openfile (.fid,
			.access);
!
! Check the status and return it if it is success.  If an error
! has occurred then a file open error will be signalled.
!
RETURN nml$chkfileio (nma$c_sts_fop,
			  .status);

END;				! End of NML$OPENFILE

%SBTTL 'NML$CLOSEFILE  Close permanent data base file'
GLOBAL ROUTINE nml$closefile (fid) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine closes the permanent data base file(s) specified by
!	the code in FID.
!
! FORMAL PARAMETERS:
!
!	FID 		Permanent data base file identification code
!			(NMA$C_OPN_xxxx).
! ROUTINE VALUE:
! COMPLETION CODES:
!	Returns a code indicating success.
!
! SIDE EFFECTS:
!	Causes errors to be signaled.
!
!--

BEGIN

LOCAL
    status;

IF .fid EQL nma$c_opn_all THEN		! If it failed because of ALL
    BEGIN
    INCRU idx FROM nma$c_opn_min		! Close all the files by
		TO nma$c_opn_max DO		! Calling ourselves
	BEGIN
	IF .idx EQL nma$c_opn_node THEN
	    status = nml$close_node_file (.idx)
	ELSE
	    status = nma$closefile (.idx);
	END;
    END
ELSE
    BEGIN
    IF .fid EQL nma$c_opn_node THEN
	status = nml$close_node_file (.fid)
    ELSE
	status = nma$closefile (.fid);
    END;
RETURN .status;
END;		! OF  nml$closefile

%SBTTL 'NML$READRECORD  Read record from permanent data base file'
GLOBAL ROUTINE nml$readrecord (fid, key, key_value_dsc,
				bufdsc, rtndsc, node_type) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads a record from a permanent data base file.
!
! FORMAL PARAMETERS:
!
!	FID	 	Permanent data base file identification code.
!	KEY		Address of buffer to hold the record key.
!	KEY_VALUE_DSC	Node database only - address of descriptor of node
!			to read.
!	BUFDSC		Descriptor of buffer to hold record.
!	RTNDSC		Descriptor of data in record.
!	NODE_TYPE	Node database only - address at which to return
!			node type (executor, remote, or loopnode).
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns a code indicating success or end of file.
!
! SIDE EFFECTS:
!
!	Signals error.
!
!--

BEGIN

LOCAL
    status;
!
! Read record.
!
IF .fid NEQ nma$c_opn_node THEN
    status = nma$readrec (.fid, .key, .bufdsc, .rtndsc)
ELSE
    status = nml$read_node_rec (..key, .key_value_dsc, .node_type,
				.bufdsc, .rtndsc);
!
! If the operation was successful or the end of the file was reached (record
! not found) then return the success code.  Otherwise, cause a file I/O error
! message to be signalled.
!
IF .status OR
   (.status EQLU rms$_rnf) THEN
    RETURN .status
ELSE
    RETURN nml$chkfileio (nma$c_sts_fio,
			      .status);
END;				! End of NML$READRECORD

%SBTTL 'NML$MATCHRECORD  Match record from permanent data base file'
GLOBAL ROUTINE nml$matchrecord (fid, bufdsc, key_adr, 
				id, id_len, id_adr,
				qual_pst, qual_len, qual_adr, rtndsc) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine matches a record from a permanent data base file.
!
! FORMAL PARAMETERS:
!
!	FID 		Permanent data base file identification code.
!	BUFDSC		Descriptor of buffer to contain the record.
!	KEY_ADR		Address of buffer for record key.
!
!	ID		Code of parameter to match.
!	ID_LEN		Length of parameter value to match.
!	ID_ADR		Address of parameter value string to match.
!
!	QUAL_PST	Parameter Semantic Table entry address of qualifier
!			parameter to match.
!	QUAL_LEN	Length of qualifier parameter value to match.
!	QUAL_ADR	Address of qualifier parameter value string to match.
!
!	RTNDSC		Descriptor of data in record.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	A success code or an error indicating end of file will be returned.
!
! SIDE EFFECTS:
!
!	Any errors will cause a status message to be signalled.
!
!--

BEGIN

LOCAL
    rec_qual_len,
    rec_qual_adr,
    field_len,
    status;

status = 1;
!
! If looking for KNOWN entities, set up to do a wildcard match.
!
IF .id_len EQL nma$c_ent_kno THEN
    field_len = 0
ELSE
    field_len = .id_len;
!
! Read records in the permanent data base until one is found which has
! fields which match the ID and qualifier (if it's specified) parameters,
! or until end-of-file.
!
WHILE .status NEQU rms$_rnf DO
    BEGIN
    !
    ! Get a record with a field that matches the ID.
    !
    status = nma$matchrec (.fid, .bufdsc, .key_adr,
				.id, .field_len, .id_adr, .rtndsc);
    IF .status THEN
	BEGIN
	MAP qual_pst: REF BBLOCK;
	!
	! If there's no qualifier to match, or the record contains
	! a field that matches the qualifier specified, return success.
	!
	IF .nml$gl_prs_flgs [nml$v_prs_qualifier] THEN
	    BEGIN
	    rec_qual_adr = 0;		! Search from beginning of record.
	    IF nma$searchfld (.rtndsc, .qual_pst [pst$w_dataid],
				rec_qual_len, rec_qual_adr) THEN
		BEGIN
		IF CH$EQL (.rec_qual_len, .rec_qual_adr,
				.qual_len, .qual_adr) THEN
		    RETURN .status;
		END;
	    END
	ELSE
	    RETURN .status;
	END
    ELSE
	!
	! If the error wasn't "record not found", cause a file I/O error
	! message to be signalled.  (When DEFINEing an entity not already
	! in the permanent database, RMS$_RNF will be returned).
	!
	IF .status NEQU rms$_rnf THEN
	    RETURN nml$chkfileio (nma$c_sts_fio,
				.status);
    !
    ! The ID or qualifier did not match.  Continue searching the file for a
    ! record with both an ID and qualifier that match the ones specified.
    !
    (.key_adr) <0,16> = .(.key_adr)<0,16> + 1;
    END;
RETURN .status;
END;				! End of NML$MATCHRECORD

%SBTTL 'NML$WRITERECORD  Write record to permanent data base file'
GLOBAL ROUTINE nml$writerecord (fid, entity, key, recdsc, write_type) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes the record with the specified key into a
!	permanent data base file.
!
! FORMAL PARAMETERS:
!
!	FID 		Permanent data base file identification code.
!	ENTITY		Entity type.
!	KEY		Address of key of record to be written.
!	RECDSC		Descriptor of record data to be written.
!	WRITE_TYPE	Node database only - specifies whether write is
!			an update of an existing record, or addition of
!			a new one.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	A code indicating success will be returned.
!
! SIDE EFFECTS:
!
!	Any errors will cause a file I/O error to be signalled.
!
!--

BEGIN

LOCAL
    status;
!
! Write record.
!
IF .fid NEQ nma$c_opn_node THEN
    status = nma$writerec (.fid, .key, .recdsc)
ELSE
    BEGIN
    status = nml$write_node_rec (.write_type, .entity, .recdsc);
    !
    ! If a duplicate key was detected, it must be a duplicate node
    ! name (that's the only key that can't have a duplicate).  Return
    ! the error to the caller so it can be returned to NCP the same way
    ! duplicate addresses are.
    !
    IF .status EQL rms$_dup THEN
	RETURN .status;
    END;
!
! Check the status and return if it is success.  Otherwise, cause a
! file I/O error message to be signalled.
!
RETURN nml$chkfileio (nma$c_sts_fio, .status);
END;				! End of NML$WRITERECORD

%SBTTL 'NML$DELETRECORD  Delete record from permanent data base file'
GLOBAL ROUTINE nml$deletrecord (fid, key, key_value_dsc) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine deletes the record with the specified key from
!	the permanent data base file.
!
! FORMAL PARAMETERS:
!
!	FID 		Permanent data base file identification code.
!	KEY		Address of key of record to be written.
!	KEY_VALUE_DSC	Node database only - address of descriptor of node
!			ID.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	A code indicating success will be returned.
!
! SIDE EFFECTS:
!
!	Any errors will cause a file I/O error to be signalled.
!
!--

BEGIN

LOCAL
    status;
!
! Delete record from the permanent data base file.
!
IF .fid NEQ nma$c_opn_node THEN
    status = nma$deleterec (.fid, .key)
ELSE
    status = nml$delete_node_rec (..key, .key_value_dsc);
!
! Check the status and return if it is success.  Otherwise, cause a
! file I/O error message to be signalled.
!
RETURN nml$chkfileio (nma$c_sts_fio, .status);
END;					! End of NML$DELETRECORD

%SBTTL 'NML$CHKFILEIO  Return file I/O status'
GLOBAL ROUTINE nml$chkfileio (opcode, status) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks the status of file I/O operations and
!	signals a status message if an error occurs.
!
! FORMAL PARAMETERS:
!
!	OPCODE		Operation error code to return in message.
!	STATUS		Operation status to be examined.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns success (NML$_STS_SUC) if the STATUS indicates success.
!
! SIDE EFFECTS:
!
!	Signals an error message if STATUS indicates error.
!
!--

BEGIN

LOCAL
    msgsize;			! Message size
!
! If the status is not success then build a status message and signal it.
!
IF NOT .status THEN
    BEGIN
    !
    ! File operation failed, so signal error message.
    !
    nml$ab_msgblock [msb$l_flags] = msb$m_det_fld OR msb$m_msg_fld;
    !
    ! If the file was not opened for the specified access, the calling process
    ! doesn't have OPER privilege (or the file would have been opened for any
    ! access).
    !
    IF .status EQL rms$_fac THEN
	nml$ab_msgblock [msb$b_code] = nma$c_sts_pri	! Privilege violation.
    ELSE
    !
    ! For any other file access error, return the error supplied by the calling
    ! routine.
    !
	BEGIN
	nml$ab_msgblock [msb$l_flags] =	.nml$ab_msgblock [msb$l_flags] OR
					msb$m_sysm_fld;
	nml$ab_msgblock [msb$b_code] = .opcode;	! Add error code
	nml$ab_msgblock [msb$l_text] = .status;
	END;
    nml$ab_msgblock [msb$w_detail] = nma$c_fopdtl_pdb; ! Add file id code
    nml$bld_reply (nml$ab_msgblock, msgsize);
    $signal_msg (nml$ab_sndbuffer, .msgsize);
    END;

RETURN nml$_sts_suc
END;				! End of NML$CHKFILEIO

END					! End of module

ELUDOM
