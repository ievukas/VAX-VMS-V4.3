MODULE PAS$PAGE2 ( %TITLE 'PAGE procedure'
		IDENT = '1-002'		! File: PASPAGE2.B32 Edit: SBL1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module implements the Pascal PAGE procedure.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
! 1-002 - Correct argument count check.  SBL 21-Feb-1983
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$PAGE2: NOVALUE;				! Skip to top of page

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!

%SBTTL 'PAS$PAGE2 - Skip to top of page'
GLOBAL ROUTINE PAS$PAGE2 (
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	ERROR						! Error unwind address
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure implements the Pascal PAGE procedure for textfiles.
!	It flushes the current buffer (if any), causes a "page eject" in
!	a manner appropriate for the carriage control, and begins a new line.
!
! CALLING SEQUENCE:
!
!	CALL PAS$PAGE2 (PFV.mr.r [, ERROR.j.r]])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  in case of an error.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	If the file is the standard file INPUT or OUTPUT, it is implicitly opened.
!
! SIGNALLED ERRORS:
!
!	LINTOOLON - line too long
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,! File Control block
	PFV_ADDR: VOLATILE,		! Enable argument
	UNWIND_ACT: VOLATILE,		! Enable argument
	ERROR_ADDR: VOLATILE;		! Enable argument

    BIND
	RAB = FCB: REF BLOCK [, BYTE];	! RAB is FCB

    BUILTIN
	ACTUALCOUNT;			! Count of arguments

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    !+
    ! Get ERROR parameter, if present.
    !-

    IF ACTUALCOUNT () GEQU 2
    THEN
	ERROR_ADDR = .ERROR;		! Set unwind address

    PFV_ADDR = PFV [PFV$R_PFV];		! Set PFV address

    !+
    ! Validate PFV and get PFV.
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Do common initialization.
    !-

    PAS$$INIT_WRITE (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! If the buffer has a partial line, flush it.
    !-

    IF .FCB [FCB$A_RECORD_CUR] GTRA .FCB [FCB$A_RECORD_BEG]
    THEN
	PAS$$WRITELN (PFV [PFV$R_PFV], FCB [FCB$R_FCB]);

    !+
    ! If buffer length is zero, signal an error because there is no
    ! room to put the page-eject character.
    !-

    IF .FCB [FCB$L_RECORD_LEN] EQL 0
    THEN
	$PAS$IO_ERROR (PAS$_LINTOOLON,1,1);

    !+
    ! If the carriagecontrol attribute is FTN, move a '1' to the first
    ! byte of the buffer, otherwise an <FF>.
    !-

	BEGIN
	LOCAL
	    FAB: REF BLOCK [, BYTE];
	FAB = .RAB [RAB$L_FAB];	! Get FAB address
	IF .FAB [FAB$V_FTN]
	THEN
	    CH$WCHAR_A (%C'1', FCB [FCB$A_RECORD_CUR])
	ELSE
	    CH$WCHAR_A (%X'0C', FCB [FCB$A_RECORD_CUR]);
	END;

    !+
    ! Do a WRITELN to write the record.
    !-

    PAS$$WRITELN (PFV [PFV$R_PFV], FCB [FCB$R_FCB]);

    !+
    ! Undefine the file buffer.
    ! Indicate successful completion
    ! Unlock the file variable.
    !-

    FCB [FCB$L_STATUS] = 0;
    PFV [PFV$V_DFB] = 0;
    PFV [PFV$V_LOCK] = 0;

    RETURN;

    END;					! End of routine PAS$PAGE2

!<BLF/PAGE>

END						! End of module PAS$PAGE2

ELUDOM

