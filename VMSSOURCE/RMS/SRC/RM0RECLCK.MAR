	$BEGIN	RM0RECLCK,000,RM$RMS0,<RECORD LOCK LIST (RLB) PROCESSING>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;		This module performs all the functions needed to implement
;		and process the record lock list (rlb).
;
; Environment:
;		Star processor running starlet exec.
;
; Author: E. H. Marison,	creation date:  28-SEP-1977
;
; Modified By:
;
;	V03-014	JEJ0043		J E Johnson		21-Jun-1984
;		Tweak the instruction stream for a little
;		performance boost.
;
;	V03-013	JWT0160		Jim Teague		29-Feb-1984
;		Remove calls to RM$DEALLEFN.
;
;	V03-012	JWT0141		Jim Teague		11-Nov-1983
;		Change IFB$V_RUM to IFB$V_ONLY_RU
;
;	V03-011	DAS0004		David Solomon		27-Jun-1983
;		Correct typo in V03-010.
;
;	V03-010	KPL0008		Peter Lieberwirth	21-Jun-1983
;		Set LCK$M_PROTECT if file can be recovery unit journaled.
;		Set LCK$M_RECOVER if recovery unit is being recovered.  These
;		flags are used to coordinate failover between the lock manager
;		and the RCP.
;
;	V03-009	KPL0007		Peter Lieberwirth	20-Jun-1983
;		Change some references to JNLFLG to JNLFLG2.
;
;	V03-008	JWH0198		Jeffrey W. Horn		21-Mar-1983
;		Restructure RULOCK list so that the RLBs hang off
;		of FLBs (File lock blocks).
;		Add RM$SAVE_FL to save the file lock on the RULOCK
;		list in a FLB.
;
;	V03-007	DAS0003		David Solomon		24-Feb-1983
;		Add timeout on record lock wait capability.
;
;	V03-006	JWH0181		Jeffrey W. Horn		03-Feb-1983
;		Add check for IFB$V_RU_RLK to QUERY.
;
;	V03-005	JWH0175		Jeffrey W. Horn		26-Jan-1983
;		Fix bad branch destination in RUSCAN when the RLB
;		is not found.
;		Always make sure IFB$V_NO_Q_WAIT is clear when exiting
;		RM$QUERY_PROC and RM$QUERY_LCK.
;
;	V03-004	JWH0169		Jeffrey W. Horn		10-Jan-1983
;		If giving back a Recovery Unit held lock then return
;		alternate status of OK_RULK.
;
;		Add RM$QUERY_PROC to search for a lock on the RU list regardless
;		of stream and then if not found join QUERY.
;
;		For QUERY, if we had to do an $ENQ, then always deque the 
;		lock, regardless of RU.
;
;		If the bit IFB$V_RU_RLK is set then do not perform $ENQs.
;
;		If the bit IRB$V_NO_Q_WAIT is set then do not wait on $ENQs
;		within QUERY.
;
;	V03-003	JWH0001		Jeffrey W. Horn		19-Aug-1982
;		Put in Recovery Unit Lock support:
;
;			1.	If stream releases lock in RU hold lock
;				in PIO$GL_RULOCK list.
;
;			2.	If same steam trys to re-access lock
;				released in that RU, give it back after
;				conversion if necessary.
;
;			3.	Put in RM$RU_UNLOCK routine to release
;				all locks held for the durration of an RU.
;
;			4.	RLB$L_OWNER now contains the value of
;				IRB$L_IDENT for the owning stream, which
;				is a unique (for the life of the process)
;				identifier for each stream.
;
;	V03-002	KBT0307		Keith B. Thompson	25-Aug-1982
;		Reorganize psects
;
;	V03-001	CDS0001		C Saether		 1-Mar-1982
;		Save R2 when stalling for a record lock.
;
;	V02-011	KPL0006		Peter Lieberwirth	21-Oct-1981
;		Add additional entry points so that query_lck and unlock
;		will return a RNL status in those places where a REA lock
;		is held and the caller expects to get away with doing an
;		update or delete after a get or find (that only applied a
;		REA lock).  This is important because several streams can
;		hold a REA lock on a single record, so if any can update
;		the record, consistency is lost.
;
;		This wasn't a problem before because REA locks weren't
;		really being applied properly (see next paragraph), and REA
;		will now be permitted in files opened for write access.
;
;		Fix implementation of REA lock; it should map to PR (protected
;		read) not PW (protected write).  If both REA and RLK are set,
;		REA takes precedence.
;
;		Remove bugcheck on DEQ_S failure, it doesn't do anything good.
;
;		Fix some commentary.
;
;	V02-010	kpl0005		Peter Lieberwirth	30-Sep-1981
;		Always release curbdb on record lock stall.
;
;	V02-009	kpl0004		Peter Lieberwirth	 3-Aug-1981
;		Make the following changes:
;
;		1. move RLBs to a list off the IRAB from the IFAB
;		2. zero CURBDB so GET doesn't try to deaccess again
;		   on errors (WAT only)
;		3. when WAT not taken, deallocate the sync efn as well
;		   as set it
;		4. redesign and fix bugs regarding RRL and REA
;		5. remove RM$UNLOCK_ALT entry point since its no longer
;		   needed
;
;	V02-008	mcn0006		Maria del C. Nasr	23-Jul-1981
;		record id size changes from a byte to a word
;
;	V02-007	kpl0003		Peter Lieberwirth	 7-Jul-1981
;		Add testpoints to count number of times RM$LOCK and
;		RM$QUERY_LCK are called.  Also add a testpoint to see
;		how many times we do a wait on a record lock conflict.
;		(This last depends on user setting the ROP WAT bit.)
;
;	V02-006 kpl0002		Peter Lieberwirth	 5-Jan-1981
;		Rewrite to use $enq/$deq to lock and unlock records.
;		rm$query_lock can now return ok_rrl if ROP function
;		RRL is specified and record is locked against readers.
;
;	V02-005	REFORMAT	Maria del C. Nasr	24-Jul-1980
;
;	V004	RAN0003		R A NEWELL		9-nov-1978	10:14
;		file sharing code enhancements
;
; Revision History:
;
;	L F LAVERDURE,      9-oct-1978  17:16
;		add shared file code
;
;--
;

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$RABDEF
	$RLBDEF
	$IRBDEF
	$IFBDEF
	$RMSDEF
	$SFSBDEF
	$SSDEF
	$ENQDEF
	$LCKDEF
	$FLBDEF
	
;
; Macros:
;
;
; Equated Symbols:
;

	ROP		=	RAB$L_ROP*8


;
; Own Storage:
;

	.SBTTL	RM$LOCK AND RM$QUERY_LCK

;++
;
; RM$LOCK	- make entry in the lock list for specified record
; RM$QUERY_LCK	- search rlb for specified record and report status
;
; Calling sequence:
;		bsbw	rm$lock
;		bsbw	rm$query_lck
;
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r9	irab address *** please note always irab ***
;	r8	rab address
;	r1	1'st and 2'nd word of record's rfa
;	r2	3'rd word of record's rfa
;		 seq f.o.	offset (always positive value)
;		 relative f.o.	always 0
;		 index f.o.	low byte = record id
;
;
; Implied Input:
;	rm$lock
;		the wat bit in rop (ie queue the request if it can't
;				    be granted immediately)
;		the tmo bit in rop (if WAT is set, wait for a specific amount
;				    of time before returning timeout error).
;		the rlk bit in rop (ie lock for write, allow readers)
;		the rea bit in rop (ie lock for read, allow readers)
;	rm$query_lck
;		the rrl bit in rop (ie read record regardless of lock)
;
; Output Parameters:
;
;	r3 is destroyed
;
;	r0	internal rms status code
;		rm$lock:
;		 rms$_suc&^xffff	record lock entry made
;		 rms$_ok_wat&^xffff	record lock entry was made, but we had
;					to wait to get it, caller must reaccess
;					buffer
;		 rms$_ok_alk&^xffff	record was already locked by caller
;		 rms$_rlk&^xffff	record is locked by another
;					process-stream
;		 rms$_dme&^xffff	could not get space for new rlb block
;		 rms$_tmo&^xffff	record lock timed out
;
;		rm$query_lck:
;		 rms$_suc&^xffff	record not locked
;		 rms$_ok_alk&^xffff 	record was already locked by caller
;		 rms$_ok_rlk&^xffff 	record is locked by another
;					process-stream but read is allowed
;		 rms$_ok_rrl&^xffff	record is locked by another
;					process-stream, but RRL overrides lock
;		 rms$_rlk&^xffff 	record is locked by another
;					process-stream
;
;
; Side Effects:
;
;	If success code rms$_ok_wat is returned from RM$LOCK, record was
;	successfully locked, but access to the buffer was given up to do
;	a stall.  The caller must reaccess the buffer.
;
;--

RM$LOCK::
	$TSTPT	LOCK			; count this call
					;
	BBC	#IFB$V_RUP,IFB$B_JNLFLG2(R10),5$ ; branch if not in RU
	BSBW	RUSCAN			; scan RU lock list
	BLBS	R0,50$			; get out if one found
	TSTL	R0			; was it an error instead?
	BNEQ	50$			; yes, get out.
5$:	BSBW	SCAN			; scan lock list
	BLBC	R0,10$			; only success codes are ok_alk and ok_rlk
	CMPW	#<RMS$_OK_ALK&^XFFFF>,R0; already locked?
	BEQL	50$			; branch if yes
	RMSERR	RLK			; otherwise change it to rlk
10$:	CLRL	R3			; if we get here don't want this rlb
	CMPW	#<RMS$_RNL&^XFFFF>,R0	; record not in local lock list?
	BNEQ	50$			; exit if record is locked
	BSBW	GET_RLB			; find an RLB
	BLBC	R0,50$			; branch on any error
					;
	BBC	#RAB$V_LV2+ROP,(R8),15$ ; propigate LV2 bit to RLB
	SSB	#RLB$V_LV2,RLB$B_FLAGS(R3)

15$:	BBC	#RAB$V_REA+ROP,(R8),20$	; is it a REA type lock?  branch if no
	BBCS	#RLB$V_PR,-		; map REA to protected read
		RLB$B_FLAGS(R3),30$	; 
					;
20$:	BBC	#RAB$V_RLK+ROP,(R8),30$	; is it a RLK type lock?  branch if no
	BBCS	#RLB$V_PW,-		; map RLK to protected write
		RLB$B_FLAGS(R3),30$	;

;+
; Save record lock wait/timeout information in RLB. If the ROP WAT
; bit is not set, don't even look at the TMO bit.
;-

30$:	BBC	#RAB$V_WAT+ROP,(R8),40$	; Should we wait on record lock?
	BBCS	#RLB$V_WAIT,-		; Yes, propagate bit to RLB.
		RLB$B_FLAGS(R3),35$	;

35$:	BBC	#RAB$V_TMO+ROP,(R8),40$	; Is a timeout specified?
	BBCS	#RLB$V_TMO,-		; Propagate bit to RLB.
		RLB$B_FLAGS(R3),37$
37$:	MOVB	RAB$B_TMO(R8),-		; Store timeout value in RLB.
		RLB$B_TMO(R3)

40$:	BSBW	DO_ENQ			; lock the record
	BRW	RRL			; go check for read-regardless
50$:	RSB				; return all status to caller

;++
; RM$QUERY_LCK
;
;	If the record is not locked locally, see if its locked by
;	another process by requesting a lock on it.  If the lock
;	is granted, the record may be read.  Also, immediately unlock
;	the record if lock granted, so extraneous junk doesn't fill
;	up the lock database.
;
; RM$QUERY_HARD
;
;	Same as QUERY_LCK, but map OK_ALK when lock is REA type to RNL so
;	any writers of the file holding a REA lock on the record can't get
;	away with updating or deleting it.
;
;	Algorithmn for query_lock
;
;		first try PR - if this succeeds, it means there
;		was no lock, and its OK to read.
;
;		if PR fails, it means either an EX or PW lock is
;		held on the record, so try CR, with WAIT if the
;		user said to.  If CR succeeds, then the lock must
;		have been PW, so its OK to read.
;
;	Also, read-regardless of lock (RRL) is handled here.  If all
;	indications are that the record is locked, then if RRL is
;	specified, access to that record is permitted.
;
;
; RM$QUERY_PROC
;
;	Scan RU Lock list for lock regardless of stream, if found
;	return OK_RULK otherwise join RM$QUERY_LCK code.
;
;--

RM$QUERY_HARD::
	$TSTPT	QUERY_LCK		; count this call
	BSBW	SCAN			; scan for record
	CMPW	#<RMS$_OK_ALK&^XFFFF>,R0; is record locked by caller?
	BNEQ	10$			; if NEQ no
	BBC	#RLB$V_PR,-		; yes, but is it only REA?
		RLB$B_FLAGS(R3),10$	;  branch if not REA
	RMSERR	RNL			; map OK_ALK to RNL if its locked REA
10$:	RSB				; return to caller

RM$QUERY_PROC::
	$TSTPT	QUERY_LCK		; count this call
	BSBW	PRSCAN			; scan RU list for lock
	BLBC	R0,RM$QUERY_LCK		; continue with Query lock if not there
	RMSSUC	OK_RULK			; set alternate success
	CSB	#IRB$V_NO_Q_WAIT,(R9)	; make sure this bit is clear
	RSB

RM$QUERY_LCK::
	$TSTPT	QUERY_LCK		; count this call
	BSBW	SCAN			; scan for record
	CMPW	#<RMS$_RNL&^XFFFF>,R0	; if RNL, record may be locked by
					; another process
	BNEQ	10$			; return status of scan
	BBS	#IFB$V_RU_RLK,-		; get out if 'fake' record locking
		IFB$B_JNLFLG2(R10),10$
	BSBW	GET_RLB			; find an RLB to use
	BLBC	R0,10$			; pass along possible DME error
	MOVB	#RLB$M_PR,-		;
		RLB$B_FLAGS(R3) 	; ask only to read
	PUSHL	R1			; save RFA across enq
	BSBB	DO_ENQ			; go try to lock the record
	POPL	R1			; restore RFA
	BLBC	R0,20$			; if error, go try CR
	BSBW	DEQUE_QUERY		; got the lock, so give it up now
	RMSSUC				; permission to read record
10$:	CSB	#IRB$V_NO_Q_WAIT,(R9)	; make sure this bit is clear
	RSB				; return to caller
					;
20$:	BSBW	SETOWNRFA		; reset ownership and rfa
					; try again for lock
	MOVB	#RLB$M_CR,-		;
		RLB$B_FLAGS(R3)		; try for concurrent read

;+
; Save record lock wait/timeout information in RLB. If the ROP WAT
; bit is not set, don't even look at the TMO bit.
;-

30$:	BBSC	#IRB$V_NO_Q_WAIT,(R9),40$ ; branch if no queuing
	BBC	#RAB$V_WAT+ROP,(R8),40$	; is queuing disabled
	SSB	#RLB$V_WAIT,-
		RLB$B_FLAGS(R3)

	BBC	#RAB$V_TMO+ROP,(R8),40$	; Is a timeout specified?
	SSB	#RLB$V_TMO,-		; Propagate bit to RLB.
		RLB$B_FLAGS(R3)
	MOVB	RAB$B_TMO(R8),-		; Store timeout value in RLB.
		RLB$B_TMO(R3)

40$:	BSBB	DO_ENQ			; go try to lock the record
	BLBC	R0,50$			; branch on record lock error
	PUSHL	R0			; save status of lock operation
	BSBW	DEQUE_QUERY		; go unlock record we just locked
	POPL	R0			; restore lock status
	CMPW	#<RMS$_OK_WAT&^XFFFF>,R0; did we wait for the record?
	BEQL	45$			; if eql we waited for the lock
	RMSSUC	OK_RLK			; record locked, but ok to read
45$:	RSB				; return to caller
					;	
50$:	BSBW	RESET_RLB		; free the RLB

;
; read regardless of lock:
;
; If the record is locked, then if the user specified RRL
; we'll return the record with the code OK_RRL.
;
RRL:					;
	CMPW	#<RMS$_RLK&^XFFFF>,R0	; is the error RLK?
	BNEQ	10$			; if neq no, don't try read regardless
	BBC	#RAB$V_RRL+ROP,(R8),10$	; has rrl been specified
	RMSSUC	OK_RRL			; yes
10$:	RSB				; return to caller

	.SBTTL	DO_ENQ
;++
; DO_ENQ
;	- build the enq on the stack, perform it, and handle any errors
;
; Calling Sequence:
;		bsbb	do_enq
;
; Input Parameters
;
;	r10	ifab address
;	r9	irab address
;	r8	rab/fab address (not needed by this routine, but
;				must preserve this register)
;	r3	rlb address
;
; Output Parameters:
;
;	r0	status of enq
;	rlb fields filled in: lock_id, lksb
;	
;
; Side Effects:
;
;	If success, record is locked.  If status is OK_WAT, bucket has been
;	deaccessed, and caller must reaccess.
;
;--

DO_ENQ:					; perform the sys$enq
	RMSSUC				; assume success for the next check
	BBC	#IFB$V_RU_RLK,IFB$B_JNLFLG2(R10),-
		5$			; only do enq if sharing file
	SSB	#RLB$V_FAKE,RLB$B_FLAGS(R3) ; set as 'fake' RLB
	RSB				; return to caller

5$:	BBC	#IFB$V_NORECLK,-	; only do enq if record locking
		(R10),10$		;
	RSB				; return to caller

;
; Build RESNAM and descriptor for it on stack.  Warning, if any parameters to
; SYS$ENQ are added or removed prior to RESNAM descriptor address, offset to
; RESNAM descriptor will change...
;

10$:	SUBL2	#16,SP			; make room for record RESAM and
					; descriptor on stack
	MOVL	#8,(SP)			; length of RESNAM in descriptor
					; RFA is only 6, but $enq optimizes 8
	MOVAL	8(SP),4(SP)		; address of RESNAM in descriptor
	MOVZWL	RLB$W_RFA4(R3),8(SP)	; second longword of RESNAM is 3rd
					; word of RFA
	MOVL	RLB$L_RFA0(R3),12(SP)	; first longword of RESNAM is 1st
					; longword of RFA
;++
;
; Perform the sys$enq function, building the parameter list on the stack.
;
; First, verify assumptions about order of arguments on stack
;
;--

	ASSUME ENQ$_EFN       EQ <ENQ$_LKMODE - 4>
	ASSUME ENQ$_LKMODE    EQ <ENQ$_LKSB   - 4>
	ASSUME ENQ$_LKSB      EQ <ENQ$_FLAGS  - 4>
	ASSUME ENQ$_FLAGS     EQ <ENQ$_RESNAM - 4>
	ASSUME ENQ$_RESNAM    EQ <ENQ$_PARID  - 4>
	ASSUME ENQ$_PARID     EQ <ENQ$_ASTADR - 4>
	ASSUME ENQ$_ASTADR    EQ <ENQ$_ASTPRM - 4>
	ASSUME ENQ$_ASTPRM    EQ <ENQ$_BLKAST - 4>
	ASSUME ENQ$_BLKAST    EQ <ENQ$_ACMODE - 4>
	ASSUME ENQ$_ACMODE    EQ <ENQ$_PROT   - 4>

	ASSUME ENQ$_NARGS     EQ 11

	CLRQ	-(SP)			; let the protection and mode default
	CLRL	-(SP)			; no blocking ast for records
	PUSHL	R9			; astprm = irab
	PUSHAL	W^RM$STALLAST		; ast address
	MOVL	IFB$L_SFSB_PTR(R10),R0	; get SFSB address
	BEQL	27$			; error if there is none
	PUSHL	SFSB$L_LOCK_ID(R0)	; parent_id is SFSB lock id
	PUSHAL	24(SP)			; resnam descriptor address
	PUSHL	#LCK$M_SYNCSTS!LCK$M_NOQUEUE!LCK$M_SYSTEM
					; don't take ast if enq completes fast
					; don't wait unless user tells us to
					; lock is not to be qualified by group
	BITB	#<IFB$M_RU!IFB$M_ONLY_RU>,-	; recovery unit journaled?
		IFB$B_JNLFLG(R10) 	; 
	BEQL	17$			; if EQL not marked for RU journaling
	SSB	#LCK$V_PROTECT,(SP)	; lock is protected for failover

	ASSUME	IFB$V_RU_RECVR EQ 0

17$:	BLBC	IFB$B_RECVRFLGS(R10),18$; RU recovery in progress on this file?
	SSB	#LCK$V_RECOVER,(SP)	; lock is interesting during failover

	ASSUME	RLB$V_WAIT EQ 0

18$:	BLBC	RLB$B_FLAGS(R3),20$	; branch if not ok to wait
	BICL2	#LCK$M_NOQUEUE,(SP)	; wait for lock if not immediately
					; available
20$:	BBC	#RLB$V_CONV,-
		RLB$B_FLAGS(R3),25$	; branch if not converting a lock
	BISL2	#LCK$M_CONVERT,(SP)	; set lock convert
25$:	PUSHAL	RLB$L_LKSB(R3)		; address of lock status block
	PUSHL	#LCK$K_EXMODE		; assume exclusive lock for now
	BBC	#RLB$V_PW,-		;
		RLB$B_FLAGS(R3),30$	; is it protected write?
	MOVL	#LCK$K_PWMODE,(SP)	; make lkmode protected write
	BRB	50$			; go allocate efn
27$:	BRW	ERRENQ			; branch aid
30$:	BBC	#RLB$V_PR,-		;
		RLB$B_FLAGS(R3),40$	; is it protected read?
	MOVL	#LCK$K_PRMODE,(SP)	; make lkmode protected read
	BRB	50$			; go allocate efn
40$:	BBC	#RLB$V_CR,-		;
		RLB$B_FLAGS(R3),50$	; is it concurrent read?
	MOVL	#LCK$K_CRMODE,(SP)	; make lkmode concurrent read
50$:	BSBW	RM$SETEFN		; allocate a synchronous event flag
					;
	CALLS	#11,@#SYS$ENQ		; do the enq
	ADDL2	#16,SP			; pop RESNAM and its descriptor
	BLBC	R0,110$			; branch on error
	CMPW	R0,#SS$_SYNCH		; synchronous completion?
	BNEQ	90$			; no, go stall
					;
	$SETEF_S	IRB$B_EFN(R9)	; set event flag we didn't stall for
	RMSSUC				; indicate successful lock
	RSB				; and return
					;
80$:	BRW	ERRENQ			; branch aid

;+
; If timeout on record lock specified, set up timer.
;-

90$:	BBC	#RLB$V_TMO,-		; If timeout not specified, skip this.
		RLB$B_FLAGS(R3),95$
	BSBW	RM$SET_LOCK_TMO		; Set timer for lock.
	BLBS	R0, 95$			; If successful, continue.
	PUSHL	R0			; Save $SETIMR error status
	$DEQ_S	LKID=RLB$L_LOCK_ID(R3)	; Else $SETIMR failed; cancel $ENQ.
	POPL	R0			; Restore error status
	RMSERR	TMR, R1			; Unexpected $SETIMR error.
	BRB	125$			; Go map error and exit.

95$:	PUSHR	#^M<R2,R3,R4>		; save registers

;++
; Release curbdb because we don't want the bucket locked while we are waiting
; (possibly for a long time) for the record.  No one can even get in to unlock
; the record if we have the bucket locked.
;
; The extremely important assumption is made here that no STALL will be done in
; RM$RELEASE.  No bucket will be written for example.  This call should only
; deaccess the buffer.  If this assumption is invalid, then all $ENQ
; synchronization is blown because there aren't enough EFNs to go around.
;--

	MOVL	IRB$L_CURBDB(R9),R4	; point to current bdb
	BEQL	NOBDB			; error if there is none
					;
	CLRL	IRB$L_CURBDB(R9)	; zero CURBDB so error pats don't try
					; to release it again
	$TSTPT	REC_WAT			; count number of times WAT waits
					;
	CLRL	R3			; no flags for rm$release
	BSBW	RM$RELEASE		; deaccess the buffer - no IO
100$:	BSBW	RM$STALL		; await completion of enqueue
	POPR	#^M<R2,R3,R4>		; restore registers

;+
; If a timer was still outstanding, cancel the request.
;
; Note: if the timer fires after the BBCC instruction, but before the $CANTIM,
; the timer AST routine will simply exit since the RLB$V_TIMER_INPROG flag will
; be clear. If the timer fires before the BBCC instruction, the $DEQ will fail
; with SS$_IVLOCKID, which is expected.
;-

	BBCC	#RLB$V_TIMER_INPROG,-	; Continue if no $SETIMR outstanding.
		RLB$W_FLAGS2(R3),105$
	$CANTIM_S -			; Cancel timer request.
		REQIDT=R3

105$:	MOVZWL	RLB$W_STATUS(R3),R0	; copy enq status
	BLBC	R0,110$			; branch on any error
	RMSSUC	OK_WAT			; success, but we waited
	RSB
					;
110$:	CMPL	R0, #SS$_ABORT		; Was the lock request cancelled?
	BNEQ	120$			; No; go map error.
	RMSERR	TMO			; Primary status is timeout.
	BRB	130$			; Join exit code.
120$:	RMSERR	ENQ,R1			; default to ENQ for RM$MAPERR
125$:	BSBW	RM$MAPERR		; note subroutine call, not branch!
130$:	BSBW	RESET_RLB		; clear rlb, since we didn't get a lock
	RSB				; go return

NOBDB:	RMSPBUG	FTL$_NOCURBDB		; there should be a current BDB

	.SBTTL	SCAN

;++
; SCAN
;	- scan the rlb for the requested record (rfa <>0)
;	- scan for first record locked by caller if rfa = 0
;	- report staus of scan
;
;
; Calling sequence:
;		bsbb	scan
;
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r9	irab address *** please note always irab ***
;	r8	rab/fab address
;
;	rfa <> 0 :	scan for record
;	r1	1'st and 2'nd word of record's rfa
;	r2	3'rd word of record's rfa
;		 seq f.o.	offset (always positive value)
;		 relative f.o.	always 0
;		 index f.o.	low byte = record id
;
;	rfa = 0 :	scan for record locked by caller
;	r1	is zeroed (0)
;	r2	don't care
;
; Output Parameters:
;
;	r3 is rlb found on scan or 0 if none found in scan
;	r0	internal rms status code:
;
;		rms$_ok_alk&^xffff record was already locked by caller
;
;		rms$_rnl$^xffff record not locked by caller
;
; Side Effects:
;
;--

SCAN:					;
	ADDL3	#IRB$L_RLB_LNK,R9,R3	; get rlb header address into r3
	TSTL	R1			; owner scan
	BEQL	SCAN_OWNER		; branch if yes

;
; Scan for record match.
;
SCANLOOP:
	ASSUME	RLB$L_LNK EQ 0
	MOVL	(R3),R3			; get next rlb in list
	BEQL	NOTFOUND		; branch if at end of list
	CMPL	RLB$L_RFA0(R3),R1	; compare vbn/rec#/start vbn
	BNEQ	SCANLOOP		; branch if no match

;
; Scans for sequential, relative, and index sequential file organization.
; Note:  For relative file organization only need to match record number.
;

	CASE	TYPE=B,SRC=IFB$B_ORGCASE(R10),DISPLIST=<SCANSEQ,FOUND,SCANIDX>

;
; Scan for sequential file organization.
;
SCANSEQ:
	CMPW	RLB$W_RFA4(R3),R2	; compare offset
	BEQL	FOUND			; branch if match
	BRB	SCANLOOP		; otherwise, loop back for next

;
; Scan for indexed file organization.
;
SCANIDX:
	CMPW	RLB$W_ID(R3),R2		; compare id
	BNEQ	SCANLOOP		; branch if no match
					;
;
; Match has been found - report status.
;
FOUND:					; ref tag
	RMSSUC	OK_ALK			; OK_ALK if caller already owns lock
	RSB				; and return

;
; No match found.
;
NOTFOUND:
	RMSERR	RNL			; set status and return
	RSB				;

;
; Scan rlb list for owner match.
;
SCAN_OWNER:
	ASSUME	RLB$L_LNK EQ 0
	MOVL	(R3),R3			; get next rlb in list
	BEQL	NOTFOUND		; branch if at end of list
	TSTL	RLB$L_OWNER(R3)		; is RLB in use?
	BEQL	SCAN_OWNER		; branch if not
	RMSSUC	OK_ALK			; set status and return
	RSB

	.SBTTL	RUSCAN

;++
; RUSCAN
;	Look for RLB in RU lock list
;
;
; Calling sequence:
;		bsbb	ruscan
;
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r9	irab address *** please note always irab ***
;	r8	rab/fab address
;	r1	1'st and 2'nd word of record's rfa
;	r2	3'rd word of record's rfa
;		 seq f.o.	offset (always positive value)
;		 relative f.o.	always 0
;		 index f.o.	low byte = record id
;
; Output Parameters:
;
;	r3 is rlb found on scan
;	r0 
;		RMSSUC	- RLB found
;		0	- RLB not found
;		any error code - Returned from $ENQ service.
;
; Side Effects:
;
;--

ERRS:	BRW	ERRENQ


RUSCAN:	
	PUSHR	#^M<R1,R2>				; save R1,R2
	BSBW	FLB_SCAN				; find FLB for this file
	BLBC	R0,110$					; error if none
	CLRL	R0					; assume failure
	MOVAL	FLB$L_RLB_LNK(R1),R2			; get first RLB

10$:	MOVL	(R2),R2					; next RLB into R2
	BEQL	110$					; error if none
	CMPL	RLB$L_OWNER(R2),IRB$L_IDENT(R9)		; locked by this stream?
	BNEQ	10$					; branch if not
	CMPL	RLB$L_RFA0(R2),(SP)			; compare VBN/REC#/start vbn
	BNEQ	10$					; branch if no match

;
; Scans for sequential, relative, and index sequential file organization.
; Note: For relative fiel organization only need to match record number.
;

	CASE	TYPE=B,SRC=IFB$B_ORGCASE(R10),DISPLIST=<30$,50$,40$>

;
; Scan for sequental file organization.
;

30$:	CMPW	RLB$W_RFA4(R2),4(SP)			; compare offset
	BNEQ	10$					; branch if no match
	BRB	50$					; match found

;
; Scan for indexed file organization
;

40$:	CMPW	RLB$W_ID(R2),4(SP)			; compare id
	BNEQ	10$					; branch if no match

;
; RLB found, remove from RU RLB list, insert in IRB RLB list
;

50$:	BSBW	GET_RLB					; get a RLB
	PUSHR	#^M<R1,R2,R3,R4,R5>			; save registers
	MOVC3	#RLB$C_BLN-4,4(R2),4(R3)		; copy saved RLB
	MOVL	4(SP),R3				; get saved RLB address
	BSBW	RESET_RLB				; clear it out
	POPR	#^M<R1,R2,R3,R4,R5>			; restore registers	
	BICL	#<RLB$M_WAIT!RLB$M_LV2>,RLB$B_FLAGS(R3) ; clear WAIT, LV2
	BBC	#RAB$V_LV2+ROP,(R8),60$			; branch if no LV2 now
	SSB	#RLB$V_LV2,RLB$B_FLAGS(R3)		; set LV2
;
; Find out if we have the lock in the right mode
;

60$:	BBC	#RAB$V_REA+ROP,(R8),70$			; branch if not REA lock
	BBCS	#RLB$V_PR,RLB$B_FLAGS(R3),90$		; branch if not already PR

70$:	BBC	#RAB$V_RLK+ROP,(R8),80$			; branch if not RLK lock
	BBCS	#RLB$V_PW,RLB$B_FLAGS(R3),90$		; branch if not alread PW
80$:	RMSSUC						; set success
	BRB	110$					; lock in correct mode, get out

;
; We have to change the mode of the lock
;

90$:	BBC	#RAB$V_WAT+ROP,(R8),100$		; branch if not wait
	SSB	#RLB$V_WAIT,RLB$B_FLAGS(R3)		; set wait
100$:	SSB	#RLB$V_CONV,RLB$B_FLAGS(R3)		; set convert
	BSBW	DO_ENQ					; go do ENQ
	BSBW	RRL					; set codes 

110$:	POPR	#^M<R1,R2>				; restore R1,R2
	BLBC	R0,120$					; get out on error
	RMSSUC	OK_RULK					; alternate success code

120$:	RSB

	.SBTTL	FLB_SCAN
;++
; FLB_SCAN
;	Search for an FLB which matches the current IFB address
;--

FLB_SCAN:
	CLRL	R0					; assume failure
	MOVAL	@#PIO$GL_RULOCK,R1			; get FLB list

10$:	MOVL	(R1),R1					; get next FLB
	BEQL	20$					; get out if none
	CMPL	R10,FLB$L_IFB_PTR(R1)			; see if this IFB
	BNEQ	10$					; branch if not
	TSTL	FLB$L_LOCK_ID(R1)			; saved file lock here?
	BNEQ	10$					; skip it if so.
	RMSSUC

20$:	RSB

	.SBTTL	PRSCAN

;++
; PRSCAN
;	Look for RLB in RU lock list, disregarding stream, not returning lock
;
;
; Calling sequence:
;		bsbb	prscan
;
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r9	irab address *** please note always irab ***
;	r8	rab/fab address
;	r1	1'st and 2'nd word of record's rfa
;	r2	3'rd word of record's rfa
;		 seq f.o.	offset (always positive value)
;		 relative f.o.	always 0
;		 index f.o.	low byte = record id
;
; Output Parameters:
;
;	r0 
;		RMSSUC	- RLB found
;		0	- RLB not found
;
; Side Effects:
;
;--
PRSCAN:	PUSHR	#^M<R2>					; save R2
	BSBB	FLB_SCAN				; get FLB address
	BLBC	R0,60$					; get out if none
	MOVAL	FLB$L_RLB_LNK(R1),R2			; get pointer to RLBs
	CLRL	R0					; assume failure
	
10$:	MOVL	(R2),R2					; next RLB into R2
	BEQL	60$					; get out if none
	CMPL	RLB$L_RFA0(R2),R1			; compare VBN/REC#/start vbn
	BNEQ	10$					; branch if no match

;
; Scans for sequential, relative, and index sequential file organization.
; Note: for relative file organization only need to match record number.
;

	CASE	TYPE=B,SRC=IFB$B_ORGCASE(R10),DISPLIST=<30$,50$,40$>

;
; Scan for sequential file organization
;

30$:	CMPW	RLB$W_RFA4(R2),(SP)			; compare offset
	BNEQ	10$					; branch if no match
	BRB	50$					; match found

;
; Scan for indexed file organization
;

40$:	CMPW	RLB$W_ID(R2),(SP)			; compare id
	BNEQ	10$					; branch if no match


50$:	RMSSUC

60$:	POPR	#^M<R2>
	RSB

	.SBTTL	GET_RLB AND RESET_RLB
;++
; GET_RLB	- find an available rlb, if none available allocate one
; RESET_RLB	- clear the RLB and indicate its free
;
; Calling Sequence:
;		bsbb	get_rlb
;		bsbb	reset_rlb
;
; Input Parameters:
;
;	get_rlb:
;	r10	ifab address
;	r9	irab address
;	r1	1'st and 2'nd word of record's rfa
;	r2	3'rd word of record's rfa
;		 seq f.o.	offset (always positive value)
;		 relative f.o.	always 0
;		 index f.o.	low byte = record id
;	
; Output Parameters:
;
;	get_rlb:
;	r3 points to RLB if success, else zero
;
;	r0 internal RMS status code:
;		DME - couldn't allocate an RLB
;		SUC - r3 points to RLB
;
; Side Effects:
;
;	If success, RLB owner and RFA fields initialized.
;--

;
; Record is not in local list of locked records, so scan the rlb list for
; an available rlb.
;

GET_RLB:				; find an rlb
	ADDL3	#IRB$L_RLB_LNK,R9,R3	; get rlb header address
	ASSUME	RLB$L_LNK EQ 0
10$:	MOVL	(R3),R3			; get next rlb in list
	BEQL	20$			; if eql end of list, go allocate one
	TSTL	RLB$L_OWNER(R3)		; is rlb available
	BNEQ	10$			; loop back for next if not
	BRB	30$			; success, r3 points to rlb

;
; No available rlb so we must allocate a new one.
;
20$:	PUSHR	#^M<R1,R2,R4>		; save registers
	MOVL	R10,R1			; set addr in page = ifab
	MOVZBL	#RLB$C_BLN/4,R2		; set # of long words
	BSBW	RM$GETBLK		; get rlb block and fill in length
	MOVL	R1,R3			; copy address if any
	POPR	#^M<R1,R2,R4>		; restore registers
	BLBC	R0,ERRDME		; if we failed then exit
	ASSUME	RLB$B_BLN EQ RLB$B_BID+1
	MOVW	#RLB$C_BID+<RLB$C_BLN@6>,-
		RLB$B_BID(R3)		; set block id code
	MOVL	R3,R0			; save new rlb address
	ADDL3	#IRB$L_RLB_LNK,R9,R3	; get rlb header address
	ASSUME	RLB$L_LNK EQ 0
	MOVL	(R3),(R0)		; set ptr to next in new rlb
	MOVL	R0,(R3)			; put new rlb at front of list
	MOVL	R0,R3			; restore new rlb address
30$:					; initialize RLB
SETOWNRFA:				; can be called here by QUERY_LCK
	MOVL	IRB$L_IDENT(R9),-	;
		RLB$L_OWNER(R3)		; set owner isi
	MOVL	R1,RLB$L_RFA0(R3)	; set records rfa in rlb
	MOVW	R2,RLB$W_RFA4(R3)	;
	RMSSUC				; indicate success
	RSB				; and return

;
; error allocating rlb
;
ERRDME:	RMSERR	DME			; no dynamic memory
	RSB				; return to caller


;++
; RESET_RLB
;
; Indicate the RLB is free, and clean it up. Called from UNLOCK and errors
; on LOCK.
;
;	r0 must be preserved by this routine
;	r3 points to the RLB
;
; Note that RLB$B_TMO is not cleared, since it is only meaningful when
; RLB$V_TMO is set in RLB$B_FLAGS, which is cleared here.
;--

	ASSUME	<RLB$L_RFA0+4> EQ RLB$L_OWNER
RESET_RLB:
	CLRL	RLB$L_MISC(R3)		; Clears RLB$W_FLAGS2.
	CLRQ	RLB$L_RFA0(R3)		;
	CLRB	RLB$B_FLAGS(R3)		;
	RSB				; return to caller

	.SBTTL	RM$UNLOCK AND RM$UNLOCKALL

;++
; RM$UNLOCK
; RM$UNLOCKALL
;
;	Deletes entries in the record lock list
;
; RM$UNLOCK_HARD
;
;	Deletes an entry in the record lock list, but maps a REA lock held by
;	the caller to RNL so a writer holding a REA lock does not attempt an
;	update or delete.
;
; Calling sequence:
;		bsbw	rm$unlock
;		bsbw	rm$unlockall
;		bsbw	rm$unlock_hard
;
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab (shared ifab) address
;	r9	irab address *** please note always irab ***
;	r8	rab/fab address
;
;	rfa <> 0 :	unlock record
;	r1	1'st and 2'nd word of record's rfa
;	r2	3'rd word of record's rfa
;		 seq f.o.	offset (always positive value)
;		 relative f.o.	always 0
;		 index f.o.	low byte = record id
;
;	rm$unlockall entry
;	r1,r2 don't care
;
; Output Parameters:
;
;	r3 is destroyed
;
;	r0	internal rms status code
;		rms$_suc&^xffff record(s) unlocked
;		rms$_rnl&^xffff record was not locked
;				or no record was locked (unlock all call)
;	rm$unlockall:
;	the irb$v_unlock_rp  irab bookeeping bit is cleared
;	r1 is zeroed
;
;
; Side Effects:
;
;--

RM$UNLOCK_HARD::
	BSBW	SCAN			; find record
	CMPW	#<RMS$_OK_ALK&^XFFFF>,R0; caller locked record?
	BNEQ	10$			; if neq no, return RNL error
	BBC	#RLB$V_PR,-		; did caller lock record REA?
		RLB$B_FLAGS(R3),DEQUE	; no, continue usual path
	BSBB	DEQUE			; yes, go unlock the sucker and...
	RMSERR	RNL			; return RNL so no update is attempted
10$:	RSB				; return to caller

DEQUE_QUERY:				; called here from QUERY
	BBC	#IFB$V_NORECLK,(R10),DEQ ; do a deq if record locking
	BRB	DEQ_RS			; go release RLB

RM$UNLOCK::				;
UNLOCK:					; ref tag
	BSBW	SCAN			; scan for record
	CMPW	#<RMS$_OK_ALK&^XFFFF>,R0; did we find a locked record for stream
	BNEQ	NOTLOCK			; branch if no

;++
;
; Perform the $DEQ_S
;
;--

DEQUE:	BBS	#RLB$V_FAKE,-		; if 'fake' RLB then maybe RUSAVE
		RLB$B_FLAGS(R3),10$
	BBS	#IFB$V_NORECLK,-	; dont do a deq if no record locking
		(R10),DEQ_RS		;
					;
10$:	BBC	#IFB$V_RUP,-
		IFB$B_JNLFLG2(R10),DEQ	; branch if not in RU
	BBC	#RLB$V_LV2,-
		RLB$B_FLAGS(R3),RUSAVE	; save lock if not Level 2
	BBC	#RLB$V_PR,-		; if level 2 save all but 
		RLB$B_FLAGS(R3),RUSAVE	; 	PR locks.
DEQ:	BBS	#RLB$V_FAKE,RLB$B_FLAGS(R3),DEQ_RS ; branch if fake RLB
	$DEQ_S	LKID=RLB$L_LOCK_ID(R3)	; lock id of lock to unlock
					; ignore errors...
					;
DEQ_RS:	BSBB	RESET_RLB		; free the rlb
	RMSSUC				; say success
	RSB				; and return
					;
NOTLOCK:				;
	RMSERR	RNL			; say record not locked
	RSB				; and exit

;
; Save locks given up in Recovery Units
;

	ASSUME	<RLB$C_BLN+1> GT FLB$C_BLN

RUSAVE:	PUSHR	#^M<R1,R2,R3,R4,R5>	; save registers
	BSBW	FLB_SCAN		; see if there is already an FLB
	BLBS	R0,10$			; branch if so
	BSBB	ALOCPBLK		; get an FLB
	BLBC	R0,50$			; get out on error
	MOVL	@#PIO$GL_RULOCK,(R1)	; set successor to first FLB
	MOVL	R1,@#PIO$GL_RULOCK	; set new FLB as first FLB
	MOVB	#FLB$C_BID,FLB$B_BID(R1)	; set block id in FLB
	MOVL	R10,FLB$L_IFB_PTR(R1)	; set IFAB address in FLB

10$:	MOVL	R1,R2			; save FLB address
	MOVAL	FLB$L_RLB_LNK(R2),R1	; get RLB pointer
	
20$:	MOVL	(R1),R1			; get RLB
	BEQL	30$			; branch if none
	TSTL	RLB$L_OWNER(R1)		; is RLB available
	BNEQ	20$			; branch if not
	BRB	40$			; go use it otherwise

30$:	BSBB	ALOCPBLK		; get an RLB
	BLBC	R0,50$			; get out on error
	MOVL	FLB$L_RLB_LNK(R2),(R1)	; set successor to first RLB
	MOVL	R1,FLB$L_RLB_LNK(R2)	; set new RLB as first RLB	

40$:	MOVC3	#RLB$C_BLN-4,4(R3),4(R1); copy old RLB
	RMSSUC

50$:	POPR	#^M<R1,R2,R3,R4,R5>
	BSBW	RESET_RLB		; remove lock from IFB RLB list
	BLBS	R0,60$			; return on success
	BRW	ERRDME			; only error possible is DME
60$:	RSB

;
; ALOCPBLK - Allocate a block for the RULOCK list
;

ALOCPBLK:
	PUSHR	#^M<R2,R3,R4,R5,R11>	; save registers
	MOVAL	@#PIO$GW_PIOIMPA,R11	; PIO free list header
	MOVL	R11,R1
	MOVZBL	#RLB$C_BLN/4,R2		; set # of long words
	BSBW	RM$GETBLK		; get block
	POPR	#^M<R2,R3,R4,R5,R11>	; restore registers
	RSB

;
; DEAPBLK - Deallocate a RULOCK block
;

DEAPBLK:
	PUSHR	#^M<R2,R3,R4,R5,R11>
	MOVAL	@#PIO$GW_PIOIMPA,R11	; PIO free list header
	MOVL	R11,R3
	MOVL	R1,R4
	BSBW	RM$RETBLK		; return space
	POPR	#^M<R2,R3,R4,R5,R11>
	RSB

;
; Unlock all records for the caller.
;

RM$UNLOCKALL::				;
	CSB	#IRB$V_UNLOCK_RP,(R9)	; rp will be unlocked so note that
					; it was done
	CLRL	R1			; flag owner scan
	BSBW	UNLOCK			; unlock first record
	BLBC	R0,NTLK			; if we failed then exit
10$:	CLRL	R1			; re-flag owner scan, since DEQ blew R1
	BSBW	UNLOCK			; unlock next record
	BLBS	R0,10$			; loop back if success
	RMSSUC				; exit with success
	RSB

NTLK:	BRW	NOTLOCK
					;
ERRENQ:	RMSPBUG FTL$_ENQDEQFAIL		; the deq failed

	.SBTTL	RM$SAVE_FL
;++
; RM$SAVE_FL - Save the file lock in the RULOCK list
;
; Calling sequence:
;		BSBW	RM$SAVE_FL
;
; Input Parameters:
;	R4	-	SFSB address
;	R9	-	IFAB address
; 
; Output Parameters:
;	R1	-	Destroyed
;
; Side Effects:
;	None.
;
;--

RM$SAVE_FL::
	PUSHL	R10				; save R10
	MOVL	R9,R10				; move IFB address for FLB_SCAN
	BSBW	FLB_SCAN			; see if there is an FLB
	BLBS	R0,10$				; branch if one
	BSBB	ALOCPBLK			; get an FLB
	BLBC	R0,20$				; get out on error
	MOVL	@#PIO$GL_RULOCK,(R1)		; set successor to first FLB
	MOVL	R1,@#PIO$GL_RULOCK		; set new FLB as first FLB
	MOVB	#FLB$C_BID,FLB$B_BID(R1)	; set block id in FLB
	MOVL	R9,FLB$L_IFB_PTR(R1)		; set IFAB address in FLB

10$:	MOVL	SFSB$L_LOCK_ID(R4),FLB$L_LOCK_ID(R1) ; save lock

20$:	POPL	R10				; restore R10
	RSB

	.SBTTL	RM$RU_UNLOCK

;++
; RM$RU_UNLOCK - Unlocks all locks held for recovery unit
;
; Calling sequence:
;		BSBW	RM$RU_UNLOCK
;
; Input Parameters:
;	None.
;
; Ouput Parameters:
;	R0-R5	Destroyed
;
; Side Effects:
;	None.
;
;--

RM$RU_UNLOCK::
	PUSHL	R11					; save impure area address
	MOVAL	@#PIO$GW_PIOIMPA,R11			; point to process I/O set
	MOVL	@#PIO$GL_RULOCK,R3			; get first FLB

10$:	BEQL	60$					; branch if none
	MOVL	FLB$L_RLB_LNK(R3),R4			; get RLB address
	
20$:	BEQL	40$					; branch if at end of list
	$DEQ_S	LKID=RLB$L_LOCK_ID(R4)			; deque record lock
	PUSHL	(R4)					; save next RLB address
	MOVL	R4,R1					; return RLB
	BSBW	DEAPBLK
	MOVL	(SP)+,R4				; get next RLB
	BRB	20$					; go process next RLB

40$:	TSTL	FLB$L_LOCK_ID(R3)			; was a file lock saved?
	BEQL	50$					; branch if not
	$DEQ_S	LKID=FLB$L_LOCK_ID(R3)			; deque file lock
50$:	PUSHL	(R3)					; save next FLB address
	MOVL	R3,R1					; return FLB
	BSBW	DEAPBLK
	MOVL	(SP)+,R3				; get next FLB address
	BRB	10$					; go process it

60$:	CLRL	@#PIO$GL_RULOCK				; clear list header
	MOVL	(SP)+,R11				; restore R11
	RSB

	.END
