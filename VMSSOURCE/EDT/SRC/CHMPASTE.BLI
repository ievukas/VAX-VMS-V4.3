%TITLE 'EDT$CHMPASTE - change mode PASTE command'
MODULE EDT$CHMPASTE (				! Change mode PASTE command
		IDENT = 'V04-000'			! File: CHMPASTE.BLI Edit: JBS1014
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module executes the change mode PASTE command.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: Unknown
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 04-Feb-1981.  This module was created by
!	extracting the routine EDT$$PST_CMD  from the module CHANGE.BLI.
! 1-002	- Regularize headers.  JBS 03-Mar-1981
! 1-003	- Change SPLIT_LINE to EDT$$SPLT_LNINS .  JBS 30-Mar-1981
! 1-004 - Use new message codes.  JBS 06-Aug-1981 (this note added 24-May-1982)
! 1-005	- Set a flag if control C actually aborts something.  JBS 24-May-1982
! 1-006	- New screen update logic.  JBS 13-Sep-1982
! 1-007	- Remove EDT$$G_LN_NO for new screen update logic.  JBS 29-Sep-1982
! 1-008 - Convert to new line number compare macro. STS 20-Oct-1982
! 1-009 - Add a parameter to the split line routines.  SMB 16-Nov-1982
! 1-010	- Remove parameter from EDT$$SPLT_LN.  JBS 17-Nov-1982
! 1-011	- Add a parameter to EDT$$COMB_LN.  JBS 28-Dec-1982
! 1-012	- Improve efficiency by accumulating blank lines until they are needed.  JBS 05-Apr-1983
! 1-013	- Do a single insertion sequence, to avoid problems with sequence numbers.  JBS 01-Jun-1983
! 1-014	- Decrement the insert count if we end by combining lines.  JBS 01-Jun-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$PST_CMD;				! Execute the paste command

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$PST_CMD  - change mode PASTE command'

GLOBAL ROUTINE EDT$$PST_CMD 			! Change mode PASTE command
    =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine executes the paste command.  The variable EDT$$A_ALT_BUF  has
!	the address of the TBCB for the buffer to be pasted.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$A_ALT_BUF
!	EDT$$A_CUR_BUF
!	EDT$$L_LNO0
!	EDT$$L_LNO1
!	EDT$$A_WK_LN
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_PST_CNT
!	EDT$$G_CC_DONE
!	EDT$$L_WK_INSCNT
!
! ROUTINE VALUE
!
!	A value of 0 is returned if the paste failed.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$INS_STR,				! Insert a string of characters at the current position
	EDT$$MSG_BELL : NOVALUE,		! Output a message to the terminal with a warning bell
	EDT$$CHK_CC,				! Check to see if a CTRL/C has been typed
	EDT$$COMB_LN : NOVALUE,			! Combine the current line with the one immediately above it
	EDT$$CS_DWN,				! Move down a line
	EDT$$CS_LEFT,				! Move left a character
	EDT$$CS_RIGHT,				! Move right a character
	EDT$$SPLT_LN : NOVALUE,			! Split a line of text at the current cursor position
	EDT$$END_INS,				! End an insert sequence
	EDT$$RD_CURLN,				! Get the current line
	EDT$$RD_NXTLN,				! Move forward a line
	EDT$$START_INS,				! Start an insert sequence
	EDT$$TOP_BUF;				! Go to top of buffer

    EXTERNAL
	EDT$$G_PST_CNT,				! No. of characters pasted.
	EDT$$A_ALT_BUF : REF TBCB_BLOCK,	! Alternate buffer used for cut/paste.
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,	! The current buffer tbcb
	EDT$$L_LNO0 : LN_BLOCK,			! Line number 10**0 (1)
	EDT$$A_WK_LN : REF LIN_BLOCK,		! Current line pointer
	EDT$$G_CC_DONE,				! Set to 1 if control C actually aborts something
	EDT$$L_WK_INSCNT : LN_BLOCK;		! Number of records inserted in this insert sequence

    MESSAGES ((ATTPASCUR));

    LOCAL
	SAVE_TBCB,
	BLANK_LINES;

    IF (.EDT$$A_ALT_BUF EQL 0) THEN RETURN (0);

!+
! Check for paste of the current buffer.
!-

    IF (.EDT$$A_ALT_BUF EQL .EDT$$A_CUR_BUF)
    THEN
	BEGIN
	EDT$$MSG_BELL (EDT$_ATTPASCUR);
	RETURN (0);
	END;

!+
! Save the address of the current text buffer.
!-
    SAVE_TBCB = .EDT$$A_CUR_BUF;
    EDT$$G_PST_CNT = 0;
!+
! Check for empty buffer.
!-

    IF (CMPLNO (EDT$$L_LNO0, EDT$$A_ALT_BUF [TBCB_LINE_COUNT]) EQL 1) THEN RETURN (1);

    EDT$$START_INS ();				! Perform initialization for text insertion
!+
! Split the current line, so we can find our current point again.
!-
    EDT$$SPLT_LN ();
    EDT$$CS_LEFT ();
!
    BLANK_LINES = 0;
!+
! Position to the front of the paste buffer.
!-
    EDT$$A_CUR_BUF = .EDT$$A_ALT_BUF;
    EDT$$TOP_BUF ();

    WHILE 1 DO 					! Loop through all of the paste buffer.
	BEGIN
!+
! Handle the next line.  If the line is of zero length just count the blank lines counter.
! Otherwise insert all of the blank lines counted plus this line.
!-

	IF (.EDT$$A_WK_LN [LIN_LENGTH] NEQ 0)
	THEN
	    BEGIN
	    EDT$$A_CUR_BUF = .SAVE_TBCB;
	    EDT$$RD_CURLN ();

	    WHILE (.BLANK_LINES GTR 0) DO
		BEGIN
		EDT$$SPLT_LN ();
		BLANK_LINES = .BLANK_LINES - 1;
		END;

	    EDT$$A_CUR_BUF = .EDT$$A_ALT_BUF;
	    EDT$$RD_CURLN ();
	    EDT$$INS_STR (EDT$$A_WK_LN [LIN_TEXT], .EDT$$A_WK_LN [LIN_LENGTH]);
	    END;

	EDT$$G_PST_CNT = .EDT$$G_PST_CNT + .EDT$$A_WK_LN [LIN_LENGTH] + 1;

	IF ( NOT EDT$$RD_NXTLN ()) THEN EXITLOOP;

!+
! Check for CTRL/C.
!-

	IF EDT$$CHK_CC ()
	THEN
	    BEGIN
	    EDT$$G_CC_DONE = 1;
	    EXITLOOP;
	    END;

	BLANK_LINES = .BLANK_LINES + 1;
	END;

!+
! We have completed the insertion except for possible trailing blank lines.  We must also
! undo the initial split.  If the last line to be inserted was blank we don't need to
! undo the initial split.
!-
    EDT$$A_CUR_BUF = .SAVE_TBCB;
    EDT$$RD_CURLN ();

    WHILE (.BLANK_LINES GTR 1) DO
	BEGIN
	EDT$$SPLT_LN ();
	BLANK_LINES = .BLANK_LINES - 1;
	END;

    IF (.BLANK_LINES EQL 0)
    THEN
	BEGIN
	EDT$$CS_DWN ();
	EDT$$COMB_LN (0);
	SUBLINE (NUMBER_ONE, EDT$$L_WK_INSCNT);
	EDT$$G_PST_CNT = .EDT$$G_PST_CNT - 1;
	END
    ELSE
	EDT$$CS_RIGHT ();

    EDT$$END_INS ();				! End the text insertion sequence
    RETURN (1)
    END;					! of routine EDT$$PST_CMD

!<BLF/PAGE>

END						! of module EDT$CHMPASTE

ELUDOM
