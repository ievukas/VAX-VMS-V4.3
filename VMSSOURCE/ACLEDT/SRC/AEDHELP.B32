MODULE AED$HELP (
		 LANGUAGE (BLISS32),
		 IDENT = 'V04-000'
		 ) =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	Miscellaneous utilities
!
! ABSTRACT:
!
!	This module contains the routines necessary to provide interactive
!	help on the ACL editor.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, user mode utilities.
!
!--
!
!
! AUTHOR:	L. Mark Pilant		CREATION DATE:	15-Sep-1982  15:30
!
! MODIFIED BY:
!
!	V03-005	LMP0279		L. Mark Pilant,		13-Jul-1984  16:12
!		Fix the text of the suffix message given in format mode.
!
!	V03-004	LMP0213		L. Mark Pilant,		24-Mar-1984  12:23
!		Add support for locking and unlocking the object's ACL.
!
!	V03-003	LMP0172		L. Mark Pilant,		29-Nov-1983  12:42
!		Add support for VT2xx terminals.
!
!	V03-002	LMP0103		L. Mark Pilant,		29-Apr-1983  8:48
!		Add support for HIDDEN and PROTECTED ACEs.
!
!	V03-001	LMP0076		L. Mark Pilant,		28-Jan-1983  12:15
!		Add support for a key definition file.
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:ACLEDTDEF';

FORWARD ROUTINE
	AED_GIVEHELP,				! Provide the user with help
	AED_HELPOUTPUT;				! Output routine for help

EXTERNAL ROUTINE
	AED_DECODEKEY,				! Key action decoder
	AED_PUTOUTPUT,				! General purpose output routine
	LBR$INI_CONTROL	: ADDRESSING_MODE (GENERAL),	! Initialize the control block
	LBR$OPEN	: ADDRESSING_MODE (GENERAL),	! Open the help file
	LBR$GET_HELP	: ADDRESSING_MODE (GENERAL),	! Get the desired help text
	LBR$CLOSE	: ADDRESSING_MODE (GENERAL);	! Close the help file

OWN
	NO_TEXT;				! Text present indication flag

GLOBAL ROUTINE AED_GIVEHELP =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the main routine for providing interactive help.
!	It displays the appropriate keypad layout, and waits for the user
!	to type in some character (or characters) to determine what help
!	is to be provided.
!
! CALL SEQUENCE:
!	AED_GIVEHELP ()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	AED_W_TERMIN: terminal input channel
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1 if successful
!	status code otherwise
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

LOCAL
	LIBR_INDEX,				! Library index
	HELP_TYPE,				! Type of help (keypad or format)
	HELP_KEY,				! Addr of the sub-key descr
	FIELD_INDEX,				! Field index in ACE
	ITEM_INDEX,				! Item index within field in ACE
	ITEM_LIMIT,				! Largest item index allowed
	LOCAL_STATUS,				! Local routine exit status
	TERM_CHAR,				! Terminator character/action number
	TERM_DESCR	: $BBLOCK [DSC$C_S_BLN],	! Terminator descr
	TERM_TABLE	: VECTOR [4]		! Terminator table
			  INITIAL (REP 4 of (-1));	! All are terminators

BIND
	HELP_FILE	= $DESCRIPTOR ('SYS$HELP:ACLEDT.HLB'),

	NEW_KEY_MSG	= $DESCRIPTOR (%CHAR (AED_C_CHAR_CR, AED_C_CHAR_LF),
				       '----------------',
				       %CHAR (AED_C_CHAR_CR, AED_C_CHAR_LF),
				       'To return to the keypad diagram, ',
				       'press the return key',
				       %CHAR (AED_C_CHAR_CR, AED_C_CHAR_LF),
				       'To exit from HELP, press the spacebar',
				       %CHAR (AED_C_CHAR_CR, AED_C_CHAR_LF),
				       'For help on the ACE format press the ',
				       'tab key',
				       %CHAR (AED_C_CHAR_CR, AED_C_CHAR_LF),
				       'For help on any other keypad key, ',
				       'press the key'),

	NEW_KEY_MSG1	= $DESCRIPTOR (%CHAR (AED_C_CHAR_CR, AED_C_CHAR_LF),
				       '----------------',
				       %CHAR (AED_C_CHAR_CR, AED_C_CHAR_LF),
				       'To return to the keypad diagram, ',
				       'press the return key',
				       %CHAR (AED_C_CHAR_CR, AED_C_CHAR_LF),
				       'To exit from HELP, press the spacebar',
				       %CHAR (AED_C_CHAR_CR, AED_C_CHAR_LF),
				       'To select the next field, press the ',
				       'keypad 7',
				       %CHAR (AED_C_CHAR_CR, AED_C_CHAR_LF),
				       'To select the next item, press the ',
				       'keypad period');

CH$FILL (0, DSC$C_S_BLN, TERM_DESCR);
TERM_DESCR[DSC$W_LENGTH] = 4*4;
TERM_DESCR[DSC$A_POINTER] = TERM_TABLE;

AED_L_FLAGS[AED_V_GOLDKEY] = 0;
SCR$ERASE_PAGE (1, 1);

! Open the help file if not already open.

LOCAL_STATUS = LBR$INI_CONTROL (LIBR_INDEX, %REF (LBR$C_READ));
IF NOT .LOCAL_STATUS
THEN
    BEGIN
    SIGNAL (.LOCAL_STATUS);
    RETURN .LOCAL_STATUS;
    END;

LOCAL_STATUS = LBR$OPEN (LIBR_INDEX, HELP_FILE);
IF NOT .LOCAL_STATUS
THEN
    BEGIN
    SIGNAL (.LOCAL_STATUS);
    RETURN .LOCAL_STATUS;
    END;

HELP_TYPE = (IF .AED_L_FLAGS[AED_V_ACEFORMAT]
	     THEN $DESCRIPTOR ('ACE_FORMAT')
	     ELSE IF .AED_L_FLAGS[AED_V_VT2XX]
	     THEN $DESCRIPTOR ('VT200')
	     ELSE IF .AED_L_FLAGS[AED_V_VT1XX]
	     THEN $DESCRIPTOR ('VT100')
	     ELSE IF .AED_L_FLAGS[AED_V_VT5X]
	     THEN $DESCRIPTOR ('VT52')
	     ELSE 0);
IF .HELP_TYPE EQL 0 THEN RETURN 0;
SCR$SET_CURSOR (1, 1);
LBR$GET_HELP (LIBR_INDEX, AED_L_PAGEWIDTH, AED_HELPOUTPUT, 0, .HELP_TYPE);
IF .AED_L_FLAGS[AED_V_ACEFORMAT] THEN AED_PUTOUTPUT (NEW_KEY_MSG1);
SCR$SET_CURSOR (24, 1);

! Loop getting input characters to give help on until a space is seen.

WHILE 1
DO
    BEGIN
    HELP_KEY = -1;
    TERM_CHAR = AED_DECODEKEY ();
    AED_L_FLAGS[AED_V_GOLDKEY] = 0;
    IF .TERM_CHAR EQL 0 THEN RETURN 0;

! Choose the appropriate action based upon the character typed.

    IF NOT .AED_L_FLAGS[AED_V_ACTIONKEY]
    THEN
	BEGIN
	SELECTONE .TERM_CHAR OF
	SET

! Space - no further help required.

	    [%X'20']:
		BEGIN
		AED_L_FLAGS[AED_V_ACEFORMAT] = 0;
		SCR$ERASE_PAGE (1, 1);
		RETURN LBR$CLOSE (LIBR_INDEX);
		END;

! Tab key

	    [%X'09']:
		BEGIN
		HELP_TYPE = $DESCRIPTOR ('ACE_FORMAT');
		HELP_KEY = 0;
		AED_L_FLAGS[AED_V_ACEFORMAT] = 1;
		FIELD_INDEX = ITEM_INDEX = 0;
		END;

! Carriage return - put up the keypad display.

	    [%X'0D']:
		BEGIN
		HELP_TYPE = (IF .AED_L_FLAGS[AED_V_VT2XX]
			     THEN $DESCRIPTOR ('VT200')
			     ELSE IF .AED_L_FLAGS[AED_V_VT1XX]
			     THEN $DESCRIPTOR ('VT100')
			     ELSE $DESCRIPTOR ('VT52'));
		HELP_KEY = 0;
		AED_L_FLAGS[AED_V_ACEFORMAT] = 0;
		END;

! Question mark - starting up help.

	    [%C'?']:
		BEGIN
		HELP_TYPE = $DESCRIPTOR ('STARTING_UP');
		HELP_KEY = 0;
		END;
	TES;
	END
    ELSE
	BEGIN
	CASE .TERM_CHAR FROM 1 TO KEY_C_MAX_CODE-1 OF
	SET

! Backspace

	    [KEY_C_MOVE_BOL]:	HELP_KEY = $DESCRIPTOR ('017');

! Linefeed

	    [KEY_C_RUB_WRD]:	HELP_KEY = $DESCRIPTOR ('018');

! Ctrl/R or Ctrl/W

	    [KEY_C_REFRESH]:	HELP_KEY = $DESCRIPTOR ('019');

! Ctrl/U or Ctrl/X

	    [KEY_C_RUB_BOL]:	HELP_KEY = $DESCRIPTOR ('020');

! Ctrl/Z

	    [KEY_C_EXIT]:	HELP_KEY = $DESCRIPTOR ('022');

! Ctrl/A

	    [KEY_C_OVERSTRIKE]:	HELP_KEY = $DESCRIPTOR ('025');

! Rubout character

	    [KEY_C_RUB_CHR]:	HELP_KEY = $DESCRIPTOR ('000');

	    [KEY_C_INSERT,
	     KEY_C_MOVE_ACE]:	HELP_KEY = $DESCRIPTOR ('001');

	    [KEY_C_MOVE_WRD]:	HELP_KEY = $DESCRIPTOR ('002');

	    [KEY_C_MOVE_EOL]:	HELP_KEY = $DESCRIPTOR ('003');

	    [KEY_C_ENTER]:	HELP_KEY = $DESCRIPTOR ('004');

	    [KEY_C_ADVANCE,
	     KEY_C_BOTTOM]:	HELP_KEY = $DESCRIPTOR ('005');

	    [KEY_C_BACKUP,
	     KEY_C_TOP]:	HELP_KEY = $DESCRIPTOR ('006');

	    [KEY_C_DEL_CHR,
	     KEY_C_UNDEL_CHR]:	HELP_KEY = $DESCRIPTOR ('007');

	    [KEY_C_DEL_WRD,
	     KEY_C_UNDEL_WRD]:	HELP_KEY = $DESCRIPTOR ('008');

	    [KEY_C_GOLD]:	HELP_KEY = $DESCRIPTOR ('009');

	    [KEY_C_HELP,
	     KEY_C_HELPFMT]:	HELP_KEY = $DESCRIPTOR ('010');

	    [KEY_C_FIND_STR,
	     KEY_C_FIND_NXT]:	HELP_KEY = $DESCRIPTOR ('011');

	    [KEY_C_DEL_ACE,
	     KEY_C_UNDEL_ACE]:	HELP_KEY = $DESCRIPTOR ('012');

	    [KEY_C_UP]:		HELP_KEY = $DESCRIPTOR ('013');

	    [KEY_C_DOWN]:	HELP_KEY = $DESCRIPTOR ('014');

	    [KEY_C_LEFT]:	HELP_KEY = $DESCRIPTOR ('015');

	    [KEY_C_RIGHT]:	HELP_KEY = $DESCRIPTOR ('016');

	    [KEY_C_SEL_FIELD,
	     KEY_C_ADV_FIELD]:
		BEGIN
		IF NOT .AED_L_FLAGS[AED_V_ACEFORMAT]
		THEN HELP_KEY = $DESCRIPTOR ('023')
		ELSE
		    BEGIN
		    HELP_TYPE = (CASE .FIELD_INDEX FROM 0 TO 2 OF
				 SET
				    [0]:	$DESCRIPTOR ('ACE_TYPES');
				    [1]:	$DESCRIPTOR ('ACE_FLAGS');
				    [2]:	$DESCRIPTOR ('ACCESS_TYPES');
				    [OUTRANGE]:	BEGIN
						FIELD_INDEX = 0;
						$DESCRIPTOR ('ACE_TYPES')
						END;
				 TES);
		    HELP_KEY = 0;
		    FIELD_INDEX = .FIELD_INDEX + 1;
		    ITEM_INDEX = 0;
		    END;
		END;

	    [KEY_C_SEL_ITEM]:
		BEGIN
		IF NOT .AED_L_FLAGS[AED_V_ACEFORMAT]
		THEN HELP_KEY = $DESCRIPTOR ('024')
		ELSE
		    BEGIN
		    ITEM_INDEX = .ITEM_INDEX + 1;
		    HELP_KEY = (CASE .ITEM_INDEX FROM 0 TO 8 OF
				SET
				    [0]:	0;
				    [1]:	$DESCRIPTOR ('000');
				    [2]:	$DESCRIPTOR ('001');
				    [3]:	$DESCRIPTOR ('002');
				    [4]:	$DESCRIPTOR ('003');
				    [5]:	$DESCRIPTOR ('004');
				    [6]:	$DESCRIPTOR ('005');
				    [7]:	$DESCRIPTOR ('006');
				    [8]:	$DESCRIPTOR ('007');
				    [OUTRANGE]:	BEGIN
						ITEM_INDEX = 0;
						$DESCRIPTOR ('000')
						END;
				TES);
		    END;
		END;

! Unknown terminator codes

	    [INRANGE,OUTRANGE]:	HELP_KEY = -1;

	TES;
	END;

    IF .HELP_KEY GEQ 0
    THEN
	BEGIN
	SCR$ERASE_PAGE (1, 1);
	SCR$SET_CURSOR (1, 1);
	NO_TEXT = 0;
	LBR$GET_HELP (LIBR_INDEX, AED_L_PAGEWIDTH, AED_HELPOUTPUT, 0,
		      .HELP_TYPE, .HELP_KEY);
	IF .NO_TEXT
	THEN
	    BEGIN
	    ITEM_INDEX = 1;
	    NO_TEXT = 0;
	    LBR$GET_HELP (LIBR_INDEX, AED_L_PAGEWIDTH, AED_HELPOUTPUT, 0,
			  .HELP_TYPE, (IF .AED_L_FLAGS[AED_V_ACEFORMAT]
				       THEN $DESCRIPTOR ('000') ELSE 0));
	    IF .NO_TEXT THEN LBR$GET_HELP (LIBR_INDEX, AED_L_PAGEWIDTH,
					   AED_HELPOUTPUT, 0, .HELP_TYPE);
	    END;
	IF .AED_L_FLAGS[AED_V_ACEFORMAT]
	THEN AED_PUTOUTPUT (NEW_KEY_MSG1)
	ELSE IF .HELP_KEY NEQ 0 THEN AED_PUTOUTPUT (NEW_KEY_MSG);
	SCR$SET_CURSOR (24, 1);
	END;
    END;

RETURN 1;

END;						! End of routine AED_GIVEHELP

ROUTINE AED_HELPOUTPUT (DESCR, FLAGS, DATA_ARG, KEY_LEVEL) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine does the necessary checking to insure that only the
!	useful information from the help library is put on the screen.
!
! CALLING SEQUENCE:
!	AED_HELPOUTPUT (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: addr of the descr for the line to output
!	ARG2: addr of a flag longword
!	ARG3: address of the data argument (unused here)
!	ARG4: address of the current key level
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1 if successful,
!	status code otherwise
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

MAP
	DESCR		: REF $BBLOCK,		! Text string descriptor
	FLAGS		: REF VECTOR;		! Text data type flags

IF (.FLAGS[0] AND HLP$M_NOHLPTXT) NEQ 0 THEN NO_TEXT = 1;
IF .FLAGS[0] NEQ 0 THEN RETURN 1;

AED_PUTOUTPUT ($DESCRIPTOR (%CHAR(AED_C_CHAR_CR), %CHAR(AED_C_CHAR_LF)));
AED_PUTOUTPUT (.DESCR);
RETURN 1;

END;						! End of routine AED_HELPOUTPUT

END
ELUDOM

