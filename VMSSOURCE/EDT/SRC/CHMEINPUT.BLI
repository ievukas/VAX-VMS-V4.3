%TITLE 'EDT$CHMEINPUT - read with echo if possible'
MODULE EDT$CHMEINPUT (				! Read with echo if possible
		IDENT = 'V04-000'			! File: CHMEINPUT.BLI Edit: JBS1040
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module determines whether a special read can be performed
!	which leaves character echoing to the terminal driver, and does the
!	read if so.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: Unknown
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 04-Feb-1981.  This module was created by
!	extracting the routine EDT$$RD_ECHO  from module CHANGE.BLI.
! 1-002	- regularize headers.  JBS 27-Feb-1981
! 1-003	- Fix module name.  JBS 02-Mar-1981
! 1-004	- Revise journaling, and only do line reads if we can read at least
!	   four characters.  JBS 18-Jun-1981
! 1-005	- Prompt from the global string, if requested.  JBS 21-Oct-1981
! 1-006	- Remove length of prompt string.  JBS 23-Oct-1981
! 1-007	- Make the reads shorter to allow for the cursor positioning sequence.
!	   JBS 29-Jan-1982
! 1-008	- Don't make the lengths of the reads depend on the special prompt;
!	   otherwise the QA system has trouble.  JBS 29-Jan-1982
! 1-009	- Add EDT$$G_JOU_VALID.  JBS 09-Apr-1982
! 1-010	- Worry about control C.  JBS 24-May-1982
! 1-011	- New screen update logic.  JBS 13-Sep-1982
! 1-012	- Include the EOL test routine, since it was only called from here.  JBS 22-Sep-1982
! 1-013	- Correct a misspelling in edit 1-012.  JBS 23-Sep-1982
! 1-014	- Add insert mode for VT102s.  JBS 27-Sep-1982
! 1-015	- Use a local text buffer, to avoid clobbering text if we are inserting.  JBS 27-Sep-1982
! 1-016	- Fix journaling of inserted text.  JBS 28-Sep-1982
! 1-017	- Remove EDT$$G_LN_NO for new screen update logic.  JBS 29-Sep-1982
! 1-018	- Keep EDT$$G_PRV_COL up to date.  JBS 05-Oct-1982
! 1-019	- Allow for fat characters to the right of the cursor.  JBS 06-Oct-1982
! 1-020	- Don't do optimized input if there is text on the message line.  JBS 06-Oct-1982
! 1-021 - Don't write out to the journal file here. STS 07-Oct-1982
! 1-022	- Fix call to EDT$$FMT_CHWID.  JBS 13-Oct-1982
! 1-023	- Don't send the CR and reposition the cursor unless the terminal
!	   driver needs it.  JBS 16-Oct-1982
! 1-024	- Handle some cases of DEL.  JBS 10-Nov-1982
! 1-025	- Don't redundently enter insert mode.  JBS 11-Nov-1982
! 1-026	- Take into account characters already read when allowing for end of line.  JBS 16-Nov-1982
! 1-027	- Take into account characters already read when positioning the cursor.  JBS 22-Nov-1982
! 1-028	- Don't forget that DEL also repositions the cursor.  JBS 24-Nov-1982
! 1-029	- Don't forget to journal the DEL.  Also, repaint the line if NOTRUNCATE.  JBS 25-Nov-1982
! 1-030	- Journal the correct text after DEL.  JBS 25-Nov-1982
! 1-031	- Change the call to EDT$$TST_KEYDEF.  JBS 14-Dec-1982
! 1-032	- Remove EDT$$G_SHF.  JBS 14-Dec-1982
! 1-033	- Don't do it at the front of any line, even a continuation line.  JBS 20-Dec-1982
! 1-034	- Change the call to EDT$$MRK_LNCHG.  JBS 27-Dec-1982
! 1-035	- Maintain EDT$$G_CS_OLDCHNO.  JBS 27-Dec-1982
! 1-036	- If the screen is shifted don't do it.  JBS 29-Dec-1982
! 1-037	- Start on improving quality by going closer to the right margin before quitting.  JBS 14-Jan-1982
! 1-038	- Never read more than 70 characters at a time.  JBS 08-Feb-1983
! 1-039	- Read closer to the right margin.  JBS 09-Feb-1983
! 1-040	- Use EDT$$SC_INS_MODE to avoid entering and leaving insert mode so often.  JBS 01-Apr-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$RD_ECHO;				! Try to optimize terminal input

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    CHAR_LIMIT_1 = 2,			! Do optimized input even if only this many characters can be read
    CHAR_LIMIT_2 = 1;				! Read this many chars less than we can

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$RD_ECHO  - read with echo if possible'

GLOBAL ROUTINE EDT$$RD_ECHO 			! Read with echo if possible
    =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine determines whether or not an optimization for terminal
!	input can be done.  If we are currently positioned at the end of a line,
!	or if the terminal has the VT102 "insert character mode" feature,
!	then it is possible to let the terminal driver do the echoing of printable
!	characters for us up to the input of a character which may be a definable
!	key, or to near the end of the line, where even a non-definable key needs
!	special handling, such as wrap or display of a diamond.  This is much more
!	efficient than the single character input with no echo which is normally done.
!
!	This routine checks a whole series of conditions which must be met before
!	optimized input is possible, then comes up with the number of
!	characters which can be read with echo.  If this is large enough then a special
!	read routine is called to do the input.  If the input is terminated by an
!	escape or control character, that character will be put in the type-ahead
!	character, so it will be the next character returned by EDT$$TI_INPCH.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$G_CUR_COL
!	EDT$$G_CS_LNO
!	EDT$$A_SEL_BUF
!	EDT$$G_KPAD
!	EDT$$G_RCOV_MOD
!	EDT$$A_CUR_BUF
!	EDT$$G_TI_WID
!	EDT$$G_WD_WRAP
!	EDT$$T_LN_BUF
!	EDT$$A_LN_PTR
!	EDT$$A_LN_END
!	EDT$$A_WK_LN
!	EDT$$G_PRV_COL
!	EDT$$T_PMT_KPD
!	EDT$$G_TI_EDIT
!	EDT$$G_MSGFLG
!	EDT$$G_TI_DUMB
!	EDT$$G_RDAHED
!	EDT$$T_RDAHED
!	EDT$$G_TRUN
!	EDT$$A_CSR_SCRPTR
!	EDT$$G_SHF
!	EDT$$G_INSERT_MODE
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_LN_PTR
!	EDT$$G_PRV_COL
!	EDT$$G_LN_CHGD
!	EDT$$G_JOU_VALID
!	EDT$$G_CC_DONE
!	EDT$$G_RDAHED
!	EDT$$G_VERT
!	EDT$$T_DEL_CH
!	EDT$$G_DEL_CHLEN
!	EDT$$G_CS_OLDCHNO
!
! ROUTINE VALUE:
!
!	0 = read with echo not possible, 1 = read with echo done.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$CHK_CC,				! Test for a control C
	EDT$$FMT_LIT : NOVALUE,			! Format a literal string
	EDT$$TI_RDSTR : NOVALUE,		! Read with echo
	EDT$$TI_BUFCH : NOVALUE,		! Put characters in the journal buffer
	EDT$$UPD_LNLEN : NOVALUE,		! Update the length of the current line
	EDT$$SC_POSCSIF : NOVALUE,		! Position the cursor if necessary
	EDT$$SC_NONREVID : NOVALUE,		! End reverse video
	EDT$$SC_REVID : NOVALUE,		! Start reverse video
	EDT$$SEL_RNGPOS,			! Compare the select line with the current line
	EDT$$FMT_CHWID,				! Compute the width of a character
	EDT$$TST_KEYDEF,			! Test a key for a given definition
	EDT$$SC_ERATOEOL : NOVALUE,		! Erase to end of line
	EDT$$MRK_LNCHG : NOVALUE,		! Mark a line as having changed
	EDT$$SC_INS_MODE : NOVALUE;		! Enter insert mode

    EXTERNAL
	EDT$$G_CUR_COL,				! current column
	EDT$$G_LN_CHGD,				! Indicates current line has changed.
	EDT$$G_CS_LNO,				! cursor line.
	EDT$$A_SEL_BUF,				! Pointer to select buffer.
	EDT$$G_VERT,				! Last entity was VERT flag.
	EDT$$G_KPAD,				! Keypad activated?
	EDT$$G_RCOV_MOD,			! In recovery mode?
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,	! The current buffer tbcb
	EDT$$G_TI_WID,				! Width of terminal line
	EDT$$G_WD_WRAP,				! Word wrap
	EDT$$T_LN_BUF,				! Current line buffer
	EDT$$A_LN_PTR : REF VECTOR [, BYTE],	! Current character pointer
	EDT$$A_LN_END,				! Pointer to end of current line
	EDT$$G_PRV_COL,				! Previous column number
	EDT$$T_PMT_KPD : VECTOR [, BYTE],	! Counted ASCII string for keypad prompt
	EDT$$G_JOU_VALID,			! The journal record is valid
	EDT$$G_CC_DONE,				! Control C actually aborted something
	EDT$$A_WK_LN,				! The current work line
	EDT$$Z_EOB_LN,				! The special line that marks end of buffer
	EDT$$G_TI_EDIT,				! 1 = this terminal has Insert Character Mode
	EDT$$G_MSGFLG,				! 1 = there is text on the message line
	EDT$$G_TI_DUMB,				! 1 = terminal driver needs CR to avoid wrapping lines
	EDT$$G_RDAHED,				! Number of chars in read-ahead buffer
	EDT$$T_RDAHED,				! The read-ahead buffer
	EDT$$T_DEL_CH : VECTOR [2, BYTE],	! Deleted character buffer.
	EDT$$G_DEL_CHLEN,			! Length of deleted character buffer
	EDT$$G_TRUN,				! 0 = NOTRUNCATE mode
	EDT$$A_CSR_SCRPTR : REF SCREEN_LINE,	! Pointer to current screen info for current line
	EDT$$G_CS_OLDCHNO,			! Old character position on the line
	EDT$$G_SHF,				! Screen shift amount
	EDT$$G_INSERT_MODE;			! 1 = screen is in insert mode

    LOCAL
	BUF_LEFT,
	NUM_CHARS,
	READ,
	NUM_READ,
	READ_DONE,
	TERMINATOR_PROCESSED,
	TEXT_BUF : VECTOR [132, BYTE];

!+
! We can only do this in keypad mode.
!-

    IF ( NOT .EDT$$G_KPAD) THEN RETURN (0);

!+
! If we are on a continuation line don't do it.
!-

    IF (.EDT$$A_CSR_SCRPTR EQLA 0) THEN RETURN (0);

    IF (.EDT$$A_CSR_SCRPTR [SCR_CHR_FROM] NEQ 0) THEN RETURN (0);

!+
! If we are at the left margin don't do it.
!-

    IF (.EDT$$A_CSR_SCRPTR [SCR_CHR_FROM] EQL (.EDT$$A_LN_PTR - EDT$$T_LN_BUF)) THEN RETURN (0);

!+
! If in recovery mode don't do it.
!-

    IF .EDT$$G_RCOV_MOD THEN RETURN (0);

!+
! If at end of buffer don't do it.
!-

    IF (.EDT$$A_WK_LN EQLA EDT$$Z_EOB_LN) THEN RETURN (0);

!+
! If there is text on the message line don't do it, since we want
! to erase the text at the next keystroke.  After that keystroke
! the message line will be erased and we will come back here to
! check again for optimized input.
!-

    IF (.EDT$$G_MSGFLG) THEN RETURN (0);

!+
! If the screen is shifted don't do it.
!-

    IF (.EDT$$G_SHF NEQ 0) THEN RETURN (0);

!+
! If this terminal has editing features don't do it if there is
! a tab to the right of the cursor.  If this terminal does not
! have editing features, don't do it if there is anything to the
! right of the cursor.
!-

    IF .EDT$$G_TI_EDIT
    THEN
	BEGIN

	IF ( NOT CH$FAIL (CH$FIND_CH (CH$DIFF (.EDT$$A_LN_END, .EDT$$A_LN_PTR), .EDT$$A_LN_PTR, ASC_K_TAB)))
	THEN
	    RETURN (0);

	END
    ELSE

	IF (CH$DIFF (.EDT$$A_LN_END, .EDT$$A_LN_PTR) NEQ 0) THEN RETURN (0);

!+
! Finally, it looks possible.  Keep doing it as long as we can.
!-
    READ_DONE = 0;
    READ = 0;

    DO
	BEGIN
	TERMINATOR_PROCESSED = 0;
!+
! Compute the number of characters left on the line.
!-
	NUM_CHARS = .EDT$$G_TI_WID - 1;
!+
! If we are in wrap mode, make sure we get control at the wrap column.
!-

	IF (.EDT$$G_WD_WRAP LSS .NUM_CHARS) THEN NUM_CHARS = .EDT$$G_WD_WRAP;

!+
! Subtract the current cursor position.
!-
	NUM_CHARS = .NUM_CHARS - .EDT$$G_CUR_COL - .READ;
!+
! Subtract the width of the characters to the right of the cursor.  Note that
! unless we are on a terminal with screen editing features this will always
! be zero.  Note also that there can be no HTs to the right of the cursor,
! so the widths of the characters are independent of their position on the line.
! Hence the second parameter to EDT$$FMT_CHWID will not be used.
!-

	INCR CPTR FROM .EDT$$A_LN_PTR TO .EDT$$A_LN_END - 1 DO
	    NUM_CHARS = .NUM_CHARS - EDT$$FMT_CHWID (CH$RCHAR (.CPTR), 0);

!+
! Make sure there is enough room left in the line buffer.
!-
	BUF_LEFT = 255 - CH$DIFF (.EDT$$A_LN_PTR, EDT$$T_LN_BUF);

	IF (.BUF_LEFT LSS .NUM_CHARS) THEN NUM_CHARS = .BUF_LEFT;

!+
! Don't try to read more than the space we have in our local buffer.
!-

	IF ((.NUM_CHARS + .READ) GTR 132) THEN NUM_CHARS = 132 - .READ;

!+
! Now, if we have a reasonable size, we can read with echo.
!-

	IF (.NUM_CHARS GTR CHAR_LIMIT_1)
	THEN
	    BEGIN
!+
! We will do a read with echo.  Make sure the video attributes are right.
!-

	    IF (.EDT$$A_SEL_BUF EQL .EDT$$A_CUR_BUF)
	    THEN
		BEGIN

		IF (EDT$$SEL_RNGPOS () LEQ 0) THEN EDT$$SC_REVID () ELSE EDT$$SC_NONREVID ()

		END
	    ELSE
		EDT$$SC_NONREVID ();

!+
! If we are not at the end of the line, put the terminal in insert mode.  This can only
! be done on terminals that have the 'edit' feature.
!-

	    IF ((CH$DIFF (.EDT$$A_LN_END, .EDT$$A_LN_PTR) NEQ 0) AND (.EDT$$G_INSERT_MODE EQL 0))
	    THEN
		EDT$$SC_INS_MODE ();

!+
! Put out a carriage return to make the terminal driver think we are at the
! beginning of a line, then reposition the cursor.  This is needed only for
! some terminal drivers, that lose track of the cursor and output a CRLF
! if they think that the user is about to type to the right of the screen.
!-

	    IF .EDT$$G_TI_DUMB
	    THEN
		BEGIN
		EDT$$FMT_LIT (UPLIT (%STRING (%CHAR (ASC_K_CR))), 1);
		EDT$$G_PRV_COL = 0;
		END;

!+
! Make sure the cursor is positioned correctly.
!-
	    EDT$$SC_POSCSIF (.EDT$$G_CS_LNO, .EDT$$G_CUR_COL + .READ);
!+
! Do the special read with echo.  Optionally prompt.  Since the terminal driver may
! count the length of the prompt, it must be short enough that our "worst case" estimate
! of 10 characters in the repositioning allows for it.  Don't read more than 70 characters
! at a time.
!-

	    IF (.EDT$$T_PMT_KPD [0] GTR 0) THEN EDT$$FMT_LIT (EDT$$T_PMT_KPD [1], .EDT$$T_PMT_KPD [0]);

	    EDT$$TI_RDSTR (TEXT_BUF [.READ], MIN (70, .NUM_CHARS - CHAR_LIMIT_2), NUM_READ);
	    EDT$$G_PRV_COL = .EDT$$G_PRV_COL + .NUM_READ;
	    READ_DONE = 1;
	    END
	ELSE
	    NUM_READ = 0;

!+
! Cause the characters to appear in the next journal record.
!-

	INCR COUNTER FROM 0 TO (.NUM_READ - 1) DO
	    EDT$$TI_BUFCH (.TEXT_BUF [.READ + .COUNTER]);

	EDT$$G_JOU_VALID = 1;
	READ = .READ + .NUM_READ;
!+
! If the line was terminated by a control C bail out.  If any characters were
! read the insert is aborted; otherwise the control C is effectively ignored.
!-

	IF EDT$$CHK_CC ()
	THEN
	    BEGIN

	    IF (.READ GTR 0) THEN EDT$$G_CC_DONE = 1;

	    RETURN (0);
	    END;

!+
! If there is a single terminator, and if it is defined to delete
! the last character, shorten the string by one and do another read.
!-

	IF ((.EDT$$G_RDAHED EQL 1) AND 		!
	    EDT$$TST_KEYDEF (CH$RCHAR (EDT$$T_RDAHED), UPLIT (BYTE ('D-C.')), 4, 0) AND 	!
	    (.READ GEQ 1))
	THEN
	    BEGIN
!+
! Make sure the delete character appears in the journal.
!-
	    EDT$$TI_BUFCH (CH$RCHAR (EDT$$T_RDAHED));
	    READ = .READ - 1;
	    EDT$$SC_POSCSIF (.EDT$$G_CS_LNO, .EDT$$G_PRV_COL - 1);

	    IF (.EDT$$G_INSERT_MODE NEQ 0)
	    THEN
		BEGIN
!+
! We must delete exactly one character.
!-
		EDT$$FMT_LIT (UPLIT (BYTE (ASC_K_ESC, %C'[', %C'P')), 3);
		END
	    ELSE
		BEGIN
!+
! We are just before the character to delete, and there are no visible characters after
! the character to delete.  We can erase to end of line.
!-
		EDT$$SC_ERATOEOL ();
		END;

!+
! Store the character deleted in the delete character buffer.
!-
	    EDT$$G_DEL_CHLEN = 1;
	    EDT$$T_DEL_CH [0] = DIR_BACKWARD;
	    EDT$$T_DEL_CH [1] = .TEXT_BUF [.READ];
	    EDT$$G_RDAHED = 0;
	    EDT$$G_VERT = 0;
	    TERMINATOR_PROCESSED = 1;
	    END;

!+
! Keep reading if we processed the terminator.
!-
	END
    UNTIL ( NOT .TERMINATOR_PROCESSED);

!+
! Insert the characters read into the line.
!-
    EDT$$CPY_MEM (CH$DIFF (.EDT$$A_LN_END, .EDT$$A_LN_PTR), .EDT$$A_LN_PTR, 	!
	CH$PLUS (.EDT$$A_LN_PTR, .READ));
    EDT$$CPY_MEM (.READ, TEXT_BUF [0], .EDT$$A_LN_PTR);
!+
! Add the number of characters read to the line size.
!-
    EDT$$UPD_LNLEN (.READ);
!+
! If we actually read some characters update the cursor position.
!-

    IF (.READ NEQ 0)
    THEN
	BEGIN
	EDT$$G_CUR_COL = .EDT$$G_CUR_COL + .READ;
	EDT$$G_VERT = 0;
!+
! Note that the line is not marked as changed for the screen
! updater, since the modification to the screen has already
! been made.  However, we must note for the work file system
! that the current line has been changed.
!-
	EDT$$G_LN_CHGD = 1;
	END;

!+
! Update the current character pointer.
!-
    EDT$$A_LN_PTR = CH$PLUS (.EDT$$A_LN_PTR, .READ);
    EDT$$G_CS_OLDCHNO = .EDT$$G_CS_OLDCHNO + .READ;
    RETURN (.READ_DONE);
    END;					! of routine EDT$$RD_ECHO

!<BLF/PAGE>

END						! of module EDT$CHMEINPUT

ELUDOM
