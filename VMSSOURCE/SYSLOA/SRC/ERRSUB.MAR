	.NOSHOW	CONDITIONALS
	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
	.TITLE	ERRSUB780 - ERROR SUBROUTINES FOR VAX 11/780
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	.TITLE	ERRSUB750 - ERROR SUBROUTINES FOR VAX 11/750
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
	.TITLE	ERRSUB730 - ERROR SUBROUTINES FOR VAX 11/730
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
	.TITLE	ERRSUB790 - ERROR SUBROUTINES FOR VAX 11/790
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
	.TITLE	ERRSUBUV1 - ERROR SUBROUTINES FOR MICRO-VAX I
	.ENDC

	.IDENT	'V04-002'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:
;
;	EXECUTIVE,  LOADABLE SUBROUTINES USED BY POWERFAIL AND BUGCHECK.
;
; ABSTRACT:
;
; LOADABLE SUBROUTINES USED BY POWERFAIL AND BUGCHECK.
;
; AUTHOR:
;
;	N. KRONENBERG, JULY 2, 1979.
;
; MODIFIED BY:
;
;	V04-003	WMC00001	Wayne Cardoza		13-Sep-1984
;		CRD reporting must not be turned off for VENUS.
;
;	V04-002	CWH4002		CW Hobbs		08-Sep-1984
;		Correct typo in TCM0010, use "-" instead of "="
;
;	V04-001	TCM0010		Trudy C. Matthews	07-Sep-1984
;		For the venus processor: move turning on cache from routine
;		EXE$INIPROCREG to a new routine: INI$CACHE.  Correct the
;		order in which registers are saved on the stack in EXE$REGSAVE.
;
;	V03-022	TCM0009		Trudy C. Matthews	30-Jul-1984
;		When turning off CRD interrupts in EXE$INIPROCREG for VENUS,
;		read the processor register and write it back to preserve
;		the state of other bits in the register.
;
;	V03-021	TCM0008		Trudy C. Matthews	23-Jul-1984
;		Remove venus code that queries the console for how to set up
;		cache and FBOX state.  Instead always turn the cache and
;		FBOX on (and let the normal error handling code turn it off
;		if its bad).
;
;	V03-020	DWT0214		David W. Thiel		02-May-1984
;		Revise MicroVAX I TODR register simulation.
;
;	V03-019	KDM0096		Kathleen D. Morse	27-Mar-1984
;		Add missing indirection in MicroVAX I memory CSR
;		CRD enabling.
;
;	V03-018	KPL0101		Peter Lieberwirth	 4-Mar-1984
;		Add extra vectors now defined in SYSLOAVEC.  These vectors
;		are insurance for v4.x
;
;	V03-017	KPL0100		Peter Lieberwirth	12-Feb-1984
;		Change RPB$B_BOOTNDT to RPB$W_BOOTNDT, since BI devices
;		will have 16-bit device types.
;
;	V03-016	KDM0092		Kathleen D. Morse	23-Jan-1984
;		Correct the number of cpu-specific IPRs logged for the
;		11/730 and MicroVAX I cpus.
;
;	V03-015	CWH8001		CW Hobbs		5-Dec-1983
;		Add entry points for EXE$READP_TODR and EXE$WRITEP_TODR
;		to access physical TODR register for Nautilus CPU.  For
;		other processors, these amount to duplicate labels on
;		EXE$READ_TODR and EXE$WRITE_TODR.
;
;	V03-014	KTA3088		Kerbey T. Altmann	17-Oct-1983
;		Fix bug in 730 conditional for EXE$INIBOOTADP.
;
;	V03-013	KDM0081		Kathleen D. Morse	13-Sep-1983
;		Create Micro-VAX I version.
;
;	V03-012	KDM0055		Kathleen D. Morse	12-Jul-1983
;		Move IPR PME into the cpu-dependent register save and
;		restore routines.
;
;	V03-011	KDM0049		Kathleen D. Morse	07-Jul-1983
;		Add the following processor registers to the cpu-specific
;		dump IPRs routine:  ICR, TODR, ACCS.  Add usage of
;		register:  EXE$READ_TODR and EXE$WRITE_TODR.
;
;	V03-010	KDM0048		Kathleen D. Morse	07-Jul-1983
;		Add loadable routines for referencing the time-of-day
;		clock:  EXE$READ_TODR, EXE$WRITE_TODR.
;
;	V03-009	TCM0007		Trudy C. Matthews	02-Jun-1983
;		Fix routine SYSL$CLRSBIA so that it calculates the address
;		of SBI adapter register space correctly.
;
;	V03-008	TCM0006		Trudy C. Matthews	9-Feb-1983
;		Store enable/disable state of 11/790 cache and FBOX in
;		EXE$GB_CPUDATA cell during system initialization.
;
;	V03-007	TCM0005		Trudy C. Matthews	11-Jan-1983
;		Add routine SYSL$CLRSBIA.  Add SBIA register initialization
;		to EXE$INIPROCREG.  Add 11/790 machine check handler to
;		EXE$TEST_CSR.  Change 11/780 machine check handler to
;		write PR$_SBIFS back to itself to clear error bits.
;		Add labels for two "extra" routines, that can be patched
;		if extra vectors from SYS to SYSLOA are needed in between
;		major releases.  Make EXE$DUMPCPUREG log the SBI registers
;		from the SBI the 11/790 system disk is on.
;
;	V03-006	TCM0004		Trudy C. Matthews	3-Jan-1983
;		Add more 11/790-specific code.
;
;	V03-005	TCM0003		Trudy C. Matthews	17-Dec-1982
;		Add conditional assembly switch to the invocations
;		of 11/790-specific definition macros.
;
;	V03-004	TCM0002		Trudy C. Matthews	15-Dec-1982
;		Added 11/790-specific code to EXE$INIPROCREG.
;
;	V03-003	TCM0001		Trudy C. Matthews	13-Dec-1982
;		Added 11/790-specific code to power down/power up
;		routines.
;
;	V03-002	KTA3018		Kerbey T. Altmann	30-Oct-1982
;		Remove CI and UBA routines to another module.
;
;--


;
; MACRO LIBRARY CALLS:
;

	$ADPDEF				;DEFINE ADAPTER OFFSETS
	$BQODEF				;DEFINE BOOT QIO OFFSETS
	$BTDDEF				;DEFINE BOOT DEVICE TYPES
	$EMBCRDEF			;DEFINE ERROR MSG BUFFER OFFSETS
	$IDBDEF				;DEFINE INTERRUPT DISPACH OFFSETS
	$IPLDEF				;DEFINE INTERRUPT PRIORITY LEVELS
	$MBADEF				;DEFINE MASSBUS ADAPTER OFFSETS
	$NDTDEF				;DEFINE NEXUS DEVICE TYPES
	$PRDEF				;DEFINE INTERNAL PROCESSOR REGISTERS
	$RPBDEF				;DEFINE RESTART PARAM BLOCK OFFSETS
	$SSDEF				;DEFINE SYSTEM STATUS CODES
	$UBADEF				;DEFINE UNIBUS ADAPTER OFFSETS
	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
	$ACCSDEF			;DEFINE 11/790 FBOX STATUS REGISTER
	$CSWPDEF			;DEFINE 11/790 CACHE SWEEP REGISTER
	$EHSRDEF			;DEFINE 11/790 ERROR HANDLING STATUS REG
	$IO790DEF			;DEFINE 11/790 I/O ADDRESS SPACE
	$MCF790DEF			;DEFINE 11/790 MACHINE CHECK STACK FRAME
	$MERGDEF			;DEFINE 11/790 MEMORY ERROR REGISTER
	$MSTAT2DEF			;DEFINE 11/790 MEMORY STATUS REGISTER
	$PR790DEF			;DEFINE 11/790 INTERNAL PROCESSOR REGS
	$SBIADEF			;DEFINE 11/790 SBIA REGISTERS
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
	$PR780DEF			;DEFINE 11/780 INTERNAL PROCESSOR REGS
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	$PR750DEF			;DEFINE 11/750 INTERNAL PROCESSOR REGS
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
	$PR730DEF			;DEFINE 11/730 INTERNAL PROCESSOR REGS
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
	$PRUV1DEF			;DEFINE MICRO-VAX I INTERNAL PROC REGS
	.ENDC
;
; EQUATED SYMBOLS:
;
	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
	C780_LIKE = 1
	C750_LIKE = 0
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	C780_LIKE = 0
	C750_LIKE = 1
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
	C780_LIKE = 0
	C750_LIKE = 1
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
	C780_LIKE = 1
	C750_LIKE = 0
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
	C780_LIKE = 0
	C750_LIKE = 1
	.ENDC

;
; Define labels for two "extra" routines.  This reserves some vectors from
; SYS.EXE into SYSLOAxxx.EXE that can be patched if another routine must
; be added in between major releases.
;
EXE$EXTRA1::				; aligned
EXE$EXTRA2::				;  aligned
EXE$EXTRA3::				;   aligned
EXE$EXTRA4::				;    aligned
EXE$EXTRA5::				;     aligned
EXE$EXTRA6::				; packed
EXE$EXTRA7::				;  packed
EXE$EXTRA8::				;   packed
EXE$EXTRA9::				;    packed
EXE$EXTRA10::				;     packed (think this is enough?)

	HALT				; Error if these labels are used.

	.SBTTL	EXE$INIBOOTADP - INITIALIZE THE BOOT DEVICE ADAPTER
;+
; EXE$INIBOOTADP - GET THE SYSTEM BOOT DEVICE ADAPTER AND INIT IT.
;	THIS ROUTINE IS CALLED FROM BUGCHECK BEFORE THE BOOTDRIVER IS CALLED.
;
; INPUTS:
;
;	R6 = RPB ADDRESS
;
; OUTPUTS:
;
;	R0-R2 DESTROYED
;	OTHER REGISTERS PRESERVED
;-

	.PSECT	SYSLOA,LONG
	.ENABLE	LSB

EXE$INIBOOTADP::			;SUBROUTINE ENTRY
	.IF	NE,CPU_TYPE-PR$_SID_TYPUV1

	CMPB	RPB$B_DEVTYP(R6),-	;IS BOOT DEVICE THE CONSOLE
		#BTD$K_CONSOLE		;BLOCK STORAGE DEVICE?
	BEQL	40$			;YES, RETURN
	MOVL	RPB$L_ADPVIR(R6),R0	;GET ADDR OF ADAPTER REG SPACE

	.IF	NE,CPU_TYPE-PR$_SID_TYP730	; 730 HAS ONLY UNIBUS

	BICW3	#3,RPB$W_BOOTNDT(R6),R2	;GET GENERIC ADAPTER TYPE
	CMPW	R2,#NDT$_CI		;CI ADAPTER?
	BEQL	20$			;YES, RETURN
	CMPW	R2,#NDT$_MB		;MASS BUS ADAPTER?
	BNEQ	INI_UBADP		;BRANCH IF NOT
	MOVL	#MBA$M_CR_ABORT,-	;ABORT ACTIVE TRANSFER
		MBA$L_CR(R0)		;

	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
	MFPR	#PR780$_TODR,R1		;GET CURRENT TIME (10 MS UNITS)
	.ENDC				;END 780 CONDITIONAL

	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	MFPR	#PR750$_TODR,R1		;GET CURRENT TIME (10 MS UNITS)
	.ENDC				;END 750 CONDITIONAL

	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
	MFPR	#PR790$_TODR,R1		;GET CURRENT TIME (10 MS UNITS)
	.ENDC				;END 790 CONDITIONAL
	MOVAB	100(R1),R1		;ALLOW ONE SECOND
10$:	TSTL	MBA$L_SR(R0)		;WAIT UNTIL TRANSFER
	BGEQ	15$			; IS COMPLETE

	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
	MFPR	#PR780$_TODR,R2		;GET CURRENT TIME
	.ENDC				;END 780 CONDITIONAL

	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	MFPR	#PR750$_TODR,R2		;GET CURRENT TIME
	.ENDC				;END 750 CONDITIONAL

	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
	MFPR	#PR790$_TODR,R2		;GET CURRENT TIME
	.ENDC				;END 790 CONDITIONAL

	CMPL	R1,R2			;CHECK FOR INTERVAL EXPIRED
	BGTRU	10$			;NOT YET, WAIT SOME MORE
15$:	MOVL	#MBA$M_CR_INIT,-	;NOW INIT MBA
		MBA$L_CR(R0)		;
20$:	RSB				;DONE

	.ENDC				;END "NOT" 730 CONDITIONAL

	.IFF				;ELSE UV1 CONDITIONAL
	RSB
	.ENDC				;END UV1 CONDITIONAL

INI_UBADP:				;INIT UBA

	.IF	NE,C780_LIKE
	MOVL	#UBA$M_CR_INIT,-
		UBA$L_CR(R0) 		;INIT UBA
25$:	BITL	#UBA$M_CSR_UBIC,-
		UBA$L_CSR(R0) 		;WAIT FOR UBA INIT
	BEQL	25$			; TO COMPLETE
	.ENDC				;END 780_LIKE CONDITIONAL

	.IF	NE,C750_LIKE

	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	MTPR	#0,#PR750$_UBRESET	;INIT UBI AND UNIBUS
	.ENDC				;END 750 CONDITIONAL

	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
	MTPR	#0,#PR730$_UBRESET	;INIT UBI AND UNIBUS
	.ENDC				;END 730 CONDITIONAL

	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
;**temp broken**
;	MTPR	#0,#PRUV1$_IORESET	;INITIALIZE QBUS
	.ENDC				;END UV1 CONDITIONAL

	.ENDC				;END C750_LIKE CONDITIONAL

	.IF	NE,CPU_TYPE-PR$_SID_TYPUV1
;
; CHECK THE VMB VERSION NUMBER.  IF IT EXISTS AND IF IT IS 7 OR GREATER, THEN
; SEE IF ANY UNIBUS MAP REGISTERS TO DISABLE.
;

	MOVL	RPB$L_IOVEC(R6),R2	;PICK UP THE IOVECTOR FROM RPB
	MCOMW	BQO$W_VERSION(R2),R1	;GET VMB VERSION NUMBER 1'S COMPLEMENTED
	CMPW	R1,BQO$W_VERSION+2(R2)	;CHECK AGAINST CHECK WORD IN VMB
	BNEQ	40$			;IF NOT, ASSUME NO VERSION NUMBER
	CMPW	BQO$W_VERSION(R2),#7	;VERSION 7 OR GREATER OF VMB?
	BLSSU	40$			;NO, DON'T BOTH WITH UMR'S
	MOVL	BQO$L_UMR_DIS(R2),R2	;GRAB THE NUMBER OF UMR'S TO DISABLE
	BEQL	40$			;NONE, LEAVE

	.IF	NE,C780_LIKE
	ASHL	#22,R2,UBA$L_CR(R0)	;SET THE UMR DISABLE BITS
	.ENDC

;
; THIS CODE IS EXECUTED FOR ALL PROCESSORS.  ITS DISABLES ANY UNIBUS MAP
; REGISTERS ASSOCIATED WITH UNIBUS MEMORY TO PREVENT CONTENTION BETWEEN
; SBI AND UNIBUS ADDRESSES.
;

	MOVAL	UBA$L_MAP(R0),R1	;ADDRESS OF FIRST REGISTER
30$:	CLRL	(R1)+			;DISABLE IT
	SOBGTR	R2,30$			;LOOP UNTIL ALL DONE
	.ENDC				;END "NOT" UV1 CONDITIONAL
40$:	RSB				;DONE WITH UBA INIT
	.DISABLE LSB

	.SBTTL	EXE$SHUTDWNADP - SHUTDOWN ANY ADAPTERS DURING BUGCHECK
	.SBTTL	EXE$STARTUPADP - STARTUP ANY ADAPTERS
;+
; EXE$SHUTDWNADP - SHUTDOWN ANY ADAPTERS DURING BUGCHECK
;	THIS ROUTINE IS CALLED FROM BUGCHECK BEFORE THE DUMP IS TAKEN TO
;	ENSURE THAT ALL ADAPTERS THAT NEED TO BE QUIESENT ARE.
;
; INPUTS:
;
;	IPL = 31
;
; OUTPUTS:
;
;	OTHER REGISTERS PRESERVED
;-
	.ENABLE LSB

EXE$STARTUPADP::
	PUSHR	#^M<R0,R1,R2,R4>	; Save a register
	MOVAL	B^ADP_TBL_UP,R1		; Address of startup table
	BRB	5$			; Join common code

EXE$SHUTDWNADP::
	PUSHR	#^M<R0,R1,R2,R4>	; Save a register
	MOVAL	B^ADP_TBL_DWN,R1	; Address of shutdown table
5$:	MOVAL	@#<IOC$GL_ADPLIST- -
		   ADP$L_LINK>,R2	; Get pointer to head of adapter list
10$:	MOVL	ADP$L_LINK(R2),R2	; Flink onward
	BEQL	20$			; Branch if at end of list
	MOVL	ADP$L_CSR(R2),R4	; Get address of CSR
	MOVZWL	ADP$W_ADPTYPE(R2),R0	; Get adapter type code
	MOVAL	(R1)[R0],R0		; Get table entry of adap shutdown
	JSB	@(R0)[R0]		; Call adapter shutdown
	BRB	10$			; Next adapter

20$:	POPR	#^M<R0,R1,R2,R4>
30$:	RSB

;
; Table of addresses of adapter shutdown routines ordered
; by adapter type in ADP$W_ADPTYPE.
;

ADP_TBL_DWN:				; Address table start
	.LONG	30$-.			; 0-MBA
	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
	.LONG	INI_UBADP-.		; 1-UBA (QBUS is different than UNIBUS)
	.IFF				; IF NOT UV1
	.LONG	30$-.			; 1-UBA
	.ENDC				; END UV1 CONDITIONAL
	.LONG	30$-.			; 2-DR32
	.LONG	30$-.			; 3-MA780
	.LONG	CI$SHUTDOWN-.		; 4-CI
	.LONG	30$-.			; Rsvrd for future expansion

;
; Table of addresses of adapter startup routines ordered
; by adapter type in ADP$W_ADPTYPE.
;

ADP_TBL_UP:				; Address table start
	.LONG	MBA$INITIAL-.		; 0-MBA
	.LONG	UBA$INITIAL-.		; 1-UBA
	.LONG	30$-.			; 2-DR32
	.LONG	MA$INITIAL-.		; 3-MA780
	.LONG	30$-.			; 4-CI
	.LONG	30$-.			; Rsvrd for future expansion

	.DISABLE LSB

	.SBTTL	EXE$DUMPCPUREG - DUMP CPU-SPECIFIC IPR'S
;+
; DUMP CPU-SPECIFIC IPR'S INTO ERROR MESSAGE BUFFER.
;
; TWENTY-FOUR LONGWORDS ARE RESERVED IN THE EMB FOR CPU-SPECIFIC
; IPR'S.  THE FORMATS FOR VARIOUS CPU'S ARE:
;
; 11/780:	11/750:		11/730:		11/790:			uVAX I:
;
; ICR		ICR		ICR		ICR			UNUSED(0)
; TODR		TODR		TODR		TODR			APPROX TODR
; ACCS		ACCS		ACCS		ACCS			UNUSED(0)
; SBIFS		TBDR		21 UNUSED(0)	SBISTS	(1st SBI)	21 UNUSED(0)
; SBISC		CADR				SILOCMP	    "
; SBIMT		MCESR				MAINT	    "
; SBIER		CAER				SBIERR	    "
; SBIS		CMIERR				TMOADDRS    "
; 16 SBI SILO	16 UNUSED(0)			16 SBI SILO "
;
; INPUTS:
;
;	R0 - ADDR IN EMB OF START OF CPU-SPECIFIC REGISTERS=
;	     OFFSET EMB$L_CR_CPUREG
;
; OUTPUTS:
;
;	R0,R1 DESTROYED
;	ALL OTHER REGISTERS PRESERVED
;-

	.ENABL	LSB

EXE$DUMPCPUREG::			;SUBROUTINE ENTRY


	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
	MFPR	#PR780$_ICR,(R0)+	;LOG INTERVAL COUNT REG,
	MFPR	#PR780$_TODR,(R0)+	; TIME-OF-DAY REG,
	MFPR	#PR780$_ACCS,(R0)+	; ACCELERATOR CONTROL REG,
	MFPR	#PR780$_SBIFS,(R0)+	; SBI FAULT REG,
	MFPR	#PR780$_SBISC,(R0)+	; SBI COMPARATOR REG
	MFPR	#PR780$_SBIMT,(R0)+	; SBI MAINT REG,
	MFPR	#PR780$_SBIER,(R0)+	; SBI ERROR REG,
	MFPR	#PR780$_SBIS,(R0)+	; SBI TIMEOUT REG.
	MOVL	#16,R1			;GET # SILO ENTRIES TO DUMP
10$:	MFPR	#PR780$_SBIS,(R0)+	;DUMP SILO TO EMB
	SOBGTR	R1,10$			;
	.ENDC				;END 780 CONDITIONAL


	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	MFPR	#PR750$_ICR,(R0)+	;LOG INTERVAL COUNT REG,
	MFPR	#PR750$_TODR,(R0)+	; TIME-OF-DAY REG,
	MFPR	#PR750$_ACCS,(R0)+	; ACCELERATOR CONTROL REG,
	MFPR	#PR750$_TBDR,(R0)+		; TB DISABLE REG,
	MFPR	#PR750$_CADR,(R0)+	; CACHE DISABLE REG,
	MFPR	#PR750$_MCESR,(R0)+	; MCHECK ERROR SUMMARY REG
	MFPR	#PR750$_CAER,(R0)+	; CACHE ERROR REG
	MFPR	#PR750$_CMIERR,(R0)+	; CMI ERROR SUMMARY REGISTER
	MOVL	#<EMB$L_CR_CODE-<EMB$L_CR_CMIERR+4>>/4,R1 ;GET # LONGWDS OF
10$:	CLRL	(R0)+			; CPU-SPECIFIC REG LEFT IN EMB
	SOBGTR	R1,10$			; AND ZERO THEM
	.ENDC				;END 750 CONDITIONAL


	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
	MFPR	#PR730$_ICR,(R0)+	;LOG INTERVAL COUNT REG,
	MFPR	#PR730$_TODR,(R0)+	; TIME-OF-DAY REG,
	MFPR	#PR730$_ACCS,(R0)+	; ACCELERATOR CONTROL REG.
	MOVL	#<<EMB$L_CR_CODE - EMB$L_CR_CPUREG>/4>-3, R1 ;-3 FOR ICR,
					; TODR, AND ACCS ALREADY LOGGED.
					;THERE ARE NO OTHER CPU-SPECIFIC
10$:	CLRL	(R0)+			; REGISTERS TO LOG, SO ZERO THE
	SOBGTR	R1, 10$			; SPACE IN THE ERROR MSG BUFFER
	.ENDC				;END 730 CONDITIONAL


	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
	MFPR	#PR790$_ICR,(R0)+	; LOG INTERVAL COUNT REG,
	MFPR	#PR790$_TODR,(R0)+	; TIME-OF-DAY REG,
	MFPR	#PR790$_ACCS,(R0)+	; ACCELERATOR CONTROL REG.
	MOVL	G^EXE$GL_RPB,R1		; GET ADDRESS OF RPB
	MOVL	RPB$L_BOOTR1(R1),R1	; GET R1 INPUT TO VMB
	EXTZV	#RPB$V_ABUS,#RPB$S_ABUS,-; GET ABUS SLOT NUMBER OF SBI THAT
		R1,R1			; WE BOOTED FROM
	MOVL	W^ABUS_VA[R1],R1	; GET VIRTUAL ADDRESS OF SBI REGISTERS
	BEQL	90$			; BRANCH IF SBI NOT MAPPED
	MOVL	SBIA$L_SBISTS(R1),(R0)+	; SBI FAULT STATUS REGISTER
	MOVL	SBIA$L_SILOCMP(R1),(R0)+; SBI SILO COMPARATOR
	MOVL	SBIA$L_MAINT(R1),(R0)+	; SBI MAINTENANCE REGISTER
	MOVL	SBIA$L_SBIERR(R1),(R0)+	; SBI ERROR REGISTER
	MOVL	SBIA$L_TMOADDRS(R1),(R0)+; SBI TIMEOUT ADDRESS
	MOVL	#16,-(SP)		; GET NUMBER OF SILO ENTRIES TO DUMP
10$:	MOVL	SBIA$L_SBISILO(R1),(R0)+; READ THE SILO 16 TIMES
	SOBGTR	(SP),10$		; LOOP
	TSTL	(SP)+			; POP TEMPORARY FROM STACK
	.ENDC				;END 790 CONDITIONAL


	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
	CLRL	(R0)+			;NO ICR TO LOG.
	MOVL	R0,R1			;SAVE R0.
	JSB	EXE$READ_TODR		;GET APPROXIMATE TODR VALUE.
	MOVL	R0,(R1)+		;LOG THE APPROXIMATE TODR VALUE.
	MOVL	R1,R0			;RESTORE R0.
	MOVL	#<<EMB$L_CR_CODE - EMB$L_CR_CPUREG>/4>-2, R1 ;-2 FOR THE
					; UNUSED ICR AND TODR ALREADY LOGGED.
					;THERE ARE NO OTHER CPU-SPECIFIC
10$:	CLRL	(R0)+			; REGISTERS TO LOG, SO ZERO THE
	SOBGTR	R1, 10$			; SPACE IN THE ERROR MSG BUFFER
	.ENDC				;END UV1 CONDITIONAL
90$:
	RSB
	.DISABLE LSB


	.SBTTL	EXE$READ_TODR (P) - READ TIME-OF-DAY CLOCK
;+
; READS THE TIME-OF-DAY CLOCK, SINCE IT MAY BE ACCESSED IN
; DIFFERENT WAYS:  AS AN INTERNAL PROCESSOR REGISTER, AS PART
; OF THE CONSOLE, OR BY READING AN ADDRESS IN I/O SPACE.  IT
; MAY ALSO BE IN DIFFERENT FORMATS AND HAVE TO BE CONVERTED.
;
; INPUTS:
;
;	NONE.
;
; OUTPUTS:
;
;	R0 - TODR VALUE
;	ALL OTHER REGISTERS PRESERVED
;-

EXE$READP_TODR::			; SUBROUTINE ENTRY

	; NAUTILUS PROCESSOR NEEDS TO USE A SEPARATE ROUTINE TO ACCESS PHYSICAL TODR
	; REGISTER IN THE CONSOLE PROCESSOR FOR TWO REASONS.  FIRST, THE PHYSICAL
	; TODR HAS ONE SECOND RESOLUTION INSTEAD OF 10 MSEC RESOLUTION.  SECOND, A
	; REFERENCE TO THE PHYSICAL TODR IS A VERY SLOW, NON-INTERRUPTIBLE ACTION.
	; NON-PHYSICAL NAUTILUS TODR REFERENCES WILL USE THE EXE$READ_TODR ENTRY
	; WHICH WILL FABRICATE THE TIME FROM THE QUADWORD SYSTEM TIME.

					; NOT NAUTILUS - FALL THROUGH TO READ_TODR

EXE$READ_TODR::				; SUBROUTINE ENTRY


	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
	MFPR	#PR780$_TODR,R0		; TODR IS A PROCESSOR REGISTER.
	.ENDC


	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	MFPR	#PR750$_TODR,R0		; TODR IS A PROCESSOR REGISTER.
	.ENDC


	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
	MFPR	#PR730$_TODR,R0		; TODR IS A PROCESSOR REGISTER.
	.ENDC


	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
	MFPR	#PR790$_TODR,R0		; TODR IS A PROCESSOR REGISTER.
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
	;
	; Simulated TODR value is the last value stored into "TODR"
	; (EXE$GL_TODR) plus the number of ticks that have occurred
	; since then ((EXE$GQ_SYSTIME-EXE$GQ_TODCBASE)/100000).
	; 100000 is the number of 100 ns. in a TODR tick (10 ms).
	;
	PUSHR	#^M<R1,R2>		;SAVE REGISTERS
	DSBINT	#IPL$_POWER,R2		;SYNCHRONIZE WITH SET TIME AND RECAL
	MOVQ	G^EXE$GQ_SYSTIME,R0	;GET CURRENT SYSTEM TIME
	SUBL2	G^EXE$GQ_TODCBASE,R0	;COMPUTE DELTA SINCE LAST
	SBWC	G^EXE$GQ_TODCBASE+4,R1	; SET TIME
	PUSHL	G^EXE$GL_TODR		;ORIGINAL "TODR" VALUE CORRESPONDING
					; TO EXE$GQ_TODCBASE VALUE
	ENBINT	R2			;RESTORE IPL LEVEL
	;
	; HAVE 100 NS. TICKS SINCE EXE$GL_TODR IN R0,R1.
	; SCALE 100 NS. TICKS TO 10 MS. TICKS AND ADD TO EXE$GL_TODR.
	; THE NEED TO OBTAIN AN UNSIGNED LONGWORD RESULT MAKES THIS NON-TRIVIAL.
	;
	; FACT:
	;	((A*2**32 + B) / C) MOD 2**32
	;    =
	;	(((A MOD C)*2**32 + B) / C) MOD 2**32
	;
	CLRL	R2			;MAKE R1/R2 QUADWORD
	EDIV	#100000,R1,R2,R1	;HIGH DIGIT MOD 100000
	EDIV	#100000*2,R0,R0,R1	;SCALE TO 20 MS UNITS
					; R1 IS 0 OR 100000
	MNEGL	R1,R1			;SET CARRY IFF R1 .NE. 0
	ADWC	R0,R0			;SCALE TO 10 MS. UNITS, ADD
					; OPTIONAL TICK
	ADDL2	(SP)+,R0		;ADD BASE TODR VALUE
	POPR	#^M<R1,R2>		;RESTORE REGISTERS
	.ENDC				;END OF UV1 CONDITIONAL

	RSB


	.SBTTL	EXE$WRITE_TODR (P) - WRITES TIME-OF-DAY CLOCK
;+
; WRITES THE TIME-OF-DAY CLOCK, SINCE IT MAY BE ACCESSED IN
; DIFFERENT WAYS:  AS AN INTERNAL PROCESSOR REGISTER, AS PART
; OF THE CONSOLE, OR BY READING AN ADDRESS IN I/O SPACE.  IT
; MAY ALSO BE IN DIFFERENT FORMATS AND HAVE TO BE CONVERTED.
;
; INPUTS:
;
;	R0 - CONTAINS VALUE TO BE WRITTEN INTO TODR
;
; OUTPUTS:
;
;	NEW TIME VALUE WRITTEN INTO TODR.
;	ALL REGISTERS PRESERVED.
;-

EXE$WRITEP_TODR::			; SUBROUTINE ENTRY

	; NAUTILUS PROCESSOR NEEDS TO USE A SEPARATE ROUTINE TO ACCESS PHYSICAL TODR
	; REGISTER IN THE CONSOLE PROCESSOR FOR TWO REASONS.  FIRST, THE PHYSICAL
	; TODR HAS ONE SECOND RESOLUTION INSTEAD OF 10 MSEC RESOLUTION.  SECOND, A
	; REFERENCE TO THE PHYSICAL TODR IS A VERY SLOW, NON-INTERRUPTIBLE ACTION.
	; NON-PHYSICAL NAUTILUS TODR REFERENCES WILL USE THE EXE$WRITE_TODR ENTRY
	; WHICH WILL FABRICATE A NEW QUADWORD SYSTEM TIME.

					; NOT NAUTILUS - FALL THROUGH TO WRITE_TODR

EXE$WRITE_TODR::			; SUBROUTINE ENTRY


	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
	MTPR	R0,#PR780$_TODR		; TODR IS A PROCESSOR REGISTER.
	.ENDC


	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	MTPR	R0,#PR750$_TODR		; TODR IS A PROCESSOR REGISTER.
	.ENDC


	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
	MTPR	R0,#PR730$_TODR		; TODR IS A PROCESSOR REGISTER.
	.ENDC


	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
	MTPR	R0,#PR790$_TODR		; TODR IS A PROCESSOR REGISTER.
	.ENDC


	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
					;DO NOTHING TO SIMULATE WRITING A
					; NON-EXISTENT REGISTER
	.ENDC				;END OF UV1 CONDITIONAL

	RSB

	.SBTTL	EXE$REGSAVE - SAVE CPU-SPECIFIC IPR'S
;+
; EXE$REGSAVE - CALLED BY POWERFAIL TO SAVE CPU-SPECIFIC IPR'S ON
;		THE STACK
;
; INPUTS: NONE
;
; OUTPUTS:
;
;		R0 DESTROYED
;		OTHER GENERAL REGISTERS PRESERVED
;		IPR'S SAVED ON THE STACK AS FOLLOWS:
;
;	 11/780:      11/750:         11/730:         11/790:	uVAX I:
;
; 0(SP)	  PME		PME		PME            ACCS	 (none)
; 4(SP)	  SBIMT		TBDR                           CSWP
; 8(SP)			CADR                           PME
;
;-

	.ENABL	LSB

EXE$REGSAVE::				;SUBROUTINE ENTRY
	.IF	NE,CPU_TYPE-PR$_SID_TYPUV1
	POPR	#^M<R0>			;CLEAR RETURN FROM STACK


	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
	MFPR	#PR780$_PME,-(SP)	;SAVE PERFORMANCE MONITOR ENABLE
	MFPR	#PR780$_SBIMT,-(SP)	;SAVE SBI MAINT REG
	.ENDC				;END 780 CONDITIONAL


	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	MFPR	#PR750$_PME,-(SP)	;SAVE PERFORMANCE MONITOR ENABLE
	MFPR	#PR750$_CADR,-(SP)	;SAVE CACHE DISABLE REG,
	MFPR	#PR750$_TBDR,-(SP)	; AND TB DISABLE REG
	.ENDC				;END 750 CONDITIONAL


	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
	MFPR	#PR730$_PME,-(SP)	;SAVE PERFORMANCE MONITOR ENABLE
	.ENDC				;END 730 CONDITIONAL


	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
	MFPR	#PR790$_PME,-(SP)	;SAVE PERFORMANCE MONITOR ENABLE
	MFPR	#PR790$_CSWP,-(SP)	;SAVE CACHE STATE
	MFPR	#PR790$_ACCS,-(SP)	;SAVE FBOX STATE
	MTPR	#CSWP$M_VAL,#PR790$_CSWP ;SWEEP AND DISABLE CACHE
	.ENDC				;END 790 CONDITIONAL

	JMP	(R0)			;DONE, RETURN
	.ENDC				;END "NOT" UV1 CONDITIONAL

	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
	RSB
	.ENDC				;END UV1 CONDITIONAL

	.DSABL	LSB

	.SBTTL	EXE$REGRESTOR - RESTORE CPU-SPECIFIC IPR'S
;+
; EXE$REGRESTOR - CALLED BY POWERFAIL RECOVERY TO RESTORE CPU-SPECIFIC
;		  IPR'S FROM THE STACK.
;
; INPUTS:
;
;		R6 - TOP OF STACK
;		STACK SET UP AS DEFINED IN OUTPUTS OF EXE$REGSAVE.
;
; OUTPUTS:
;
;		R0 DESTROYED
;		OTHER GENERAL REGISTERS PRESERVED
;		CPU-SPECIFIC IPR'S RESTORED FROM STACK
;		R6 - ADDRESS OF 1ST CPU-INDEPENDENT SAVED IPR
;
;-

	.ENABL	LSB

EXE$REGRESTOR::				;SUBROUTINE ENTRY
	.IF	NE,CPU_TYPE-PR$_SID_TYPUV1
	POPR	#^M<R0>			;CLEAR RETURN FROM STACK


	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
	MTPR	(R6)+,#PR780$_SBIMT	;RESTORE SBI MAINT REGISTER
	MTPR	(R6)+,#PR780$_PME	;RESTORE PERFORMANCE MONITOR ENABLE
	.ENDC				;END 780 CONDITIONAL


	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	MTPR	(R6)+,#PR750$_TBDR	;RESTORE TB DISABLE REG,
	MTPR	(R6)+,#PR750$_CADR	; AND CACHE DISABLE REG
	MTPR	(R6)+,#PR750$_PME	;RESTORE PERFORMANCE MONITOR ENABLE
	.ENDC				;END 750 CONDITIONAL


	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
	MTPR	(R6)+,#PR730$_PME	;RESTORE PERFORMANCE MONITOR ENABLE
	.ENDC				;END 730 CONDITIONAL


	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
	BICL	#^C<ACCS$M_ENABLE>,(R6)	;ONLY WRITE FBOX ENABLE BIT
	MTPR	(R6)+,#PR790$_ACCS	;RESTORE FBOX STATE
	BISL	#CSWP$M_INV,(R6)	;CAUSE CACHE SWEEP AND INVALIDATE
	MTPR	(R6)+,#PR790$_CSWP	;SWEEP CACHE AND RESTORE ITS STATE
	MTPR	(R6)+,#PR790$_PME	;RESTORE PERFORMANCE MONITOR ENABLE
	.ENDC				;END 790 CONDITIONAL

	JMP	(R0)			;DONE, RETURN
	.ENDC				;END "NOT" UV1 CONDITIONAL
	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
	RSB				;NOTHING TO DO, RETURN
	.ENDC				;END UV1 CONDITIONAL

	.DSABL	LSB

	.SBTTL	EXE$INIPROCREG - CPU-DEPENDENT INITIALIZATION OF IPR'S
;+
; EXE$INIPROCREG - PERFORM INITIALIZATION OF INTERVAL TIMER AND 
;	CPU-DEPENDENT REGISTERS. CALLED FROM INIT AND POWERFAIL.
;
; INPUTS:
;
;	NONE
;
; OUTPUTS:
;
;	NONE
;-

EXE$INIPROCREG::			; INIT PROCESSOR REGISTERS

	.IF	NE,CPU_TYPE-PR$_SID_TYPUV1
	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
					; FOR 11/780, CONTINUE
					;
	BBC	S^#EXE$V_CRDENABL,-
		@#EXE$GL_FLAGS,10$  	; IF CLR, IGNORE CRD ERRORS
	MTPR	#<3@14>,S^#PR780$_SBIER	; SET CRD INTERRUPT ENABLE
10$:	BBC	S^#EXE$V_SBIERR,-
		@#EXE$GL_FLAGS,20$    	; IF CLR, IGNORE SBI ERRORS
	MTPR	#<1@18>,S^#PR780$_SBIFS	; SET SBI FAULT ENABLE

	.ENDC				;END 780 CONDTIONAL
	.IF	NE,C750_LIKE		; FOR 11/730, 11/750

	BBC	S^#EXE$V_CRDENABL,-	; BRANCH IF FLAG CLEAR
		@#EXE$GL_FLAGS,20$	;  (IGNORE ERRORS)
	MOVL	@#MMG$GL_SBICONF,R0	; GET ADDR OF MEMORY CONTROLLER
	MOVL	(R0),R0			;  CONFIG REGISTER (1ST SLOT)
	BISL	#<1@28>,4(R0)		; SET CRD REPORT BIT
					;
	.ENDC				;END C750_LIKE CONDITIONAL
	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
					; FOR 11/790:
;
; Find all SBIAs and initialize their registers.
;
	PUSHR	#^M<R0,R1,R2,R3>	; PRESERVE REGISTERS
	CLRL	R2			; INDEX INTO ABUS ARRAYS
5$:
	CMPB	#IO790$C_SBIA,W^ABUS_TYPE[R2]	; IS THIS AN SBIA?
	BNEQ	8$			; NO, KEEP LOOKING
	MOVL	W^ABUS_VA[R2],R1	; GET VA OF SBIA REGISTER SPACE
	MOVL	#SBIA$M_BEL, -		; CLEAR BUFFER ERROR LOCK BIT
		SBIA$L_SUMRY(R1)	; IN ERROR SUMMARY REGISTER
	MOVL	#SBIA$M_CTO, -		; CLEAR CPU TIMEOUT ERROR
		SBIA$L_SBIERR(R1)	; IN SBI ERROR REGISTER
	MOVL	#<SBIA$M_FLTLA!SBIA$M_FIE>, -; CLEAR FAULT LATCH AND ENABLE
		SBIA$L_SBISTS(R1)	; FAULT INTERRUPTS IN SBI FLT/STS REG
8$:
	AOBLSS	#4,R2,5$		; LOOP THROUGH ALL ABUS ADAPTERS
;
; Enable CRD interrupts if requested.
;
; Due to a hardware bug, we must never run with CRD errors turned off
;
;	BBC	S^#EXE$V_CRDENABL,-
;		@#EXE$GL_FLAGS,10$  	; IF CLR, IGNORE CRD ERRORS
	MFPR	#PR790$_MERG,R1		; READ MEMORY ERROR REGISTER
	BBCC	#MERG$V_INHCRD,R1,10$	; CLEAR CRD INHIBIT (ENABLE INTERRUPTS)
	MTPR	R1,#PR790$_MERG		; WRITE VALUE BACK TO THE REGISTER
10$:
;
; For VENUS, the cache and FBOX are turned OFF at the beginning of booting.
; Cache was turned on by calling the routine INI$CACHE; turn the fbox on now.
; We wait until now so that we can still boot if there are
; severe problems with the cache or FBOX; MCHECK790's error handling
; mechanisms are in place now.
;
	MTPR	#ACCS$M_ENABLE, -	; TURN ON FLOATING POINT ACCELERATION
		#PR790$_ACCS
	POPR	#^M<R0,R1,R2,R3>	; RESTORE REGISTERS

	.ENDC				;END 790 CONDITIONAL
20$:	BBS	S^#EXE$V_NOCLOCK,-
		@#EXE$GL_FLAGS,30$ 	; BRANCH IF NOT USING CLOCK

	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
	MTPR	#-<10*1000>,S^#PR790$_NICR ; LOAD NEXT INTERVAL REGISTER
	.ENDC				;END 790 CONDITIONAL

	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
	MTPR	#-<10*1000>,S^#PR780$_NICR ; LOAD NEXT INTERVAL REGISTER
	.ENDC				;END 780 CONDITIONAL

	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	MTPR	#-<10*1000>,S^#PR750$_NICR ; LOAD NEXT INTERVAL REGISTER
	.ENDC				;END 750 CONDITIONAL

	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
	MTPR	#-<10*1000>,S^#PR730$_NICR ; LOAD NEXT INTERVAL REGISTER
	.ENDC				;END 730 CONDITIONAL

	MTPR	#^X800000D1,S^#PR$_ICCS	; CLEAR ERROR AND START CLOCK
30$:	RSB				; AND RETURN

	.ENDC				;END "NOT" UV1 CONDITIONAL
	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
	BBC	S^#EXE$V_CRDENABL,-
		@#EXE$GL_FLAGS,20$  	; If clear, ignore CRD errors.
	MOVQ	R0,-(SP)		; Save working registers.
	MOVAL	G^EXE$AL_MEMCSRS,R1	; Get address of memory CSR array.
	MOVL	(R1)+,R0		; Get count of memory CSRs.
10$:	BISW	#1,@(R1)		; Reenable parity errors.
	ADDL	#4,R1			; Get VA of next memory controller CSR.
	SOBGTR	R0,10$			; Loop through all CSRs.
	MOVQ	(SP)+,R0		; Restore working registers.

20$:	MTPR	#^X40,S^#PR$_ICCS	; Enable 10ms interrupts.
	RSB				; Return.
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP790

	.SBTTL	INI$CACHE
;++
; INI$CACHE	- ON 11/790, INITIALIZE AND TURN ON CACHE
;		- THIS ROUTINE NOT USED FOR OTHER PROCESSORS
;
; THIS ROUTINE IS CALLED TO INITIALIZE AND TURN ON THE CACHE.  FOR THE VENUS
; PROCESSOR, CACHE IS DISABLED WHILE WE ARE BOOTING.  IT IS ONLY ENABLED
; AFTER THE VENUS MACHINE CHECK HANDLER IS CONNECTED, SO THAT RECOVERABLE
; CACHE ERRORS DO NOT PREVENT THE SYSTEM FROM BOOTING.
;
; HOWEVER, CACHE MUST BE ENABLED BEFORE THE EXE$GL_UBDELAY AND EXE$GL_TENUSEC
; CELLS (USED BY DRIVERS WHEN THEY USE THE TIMEDWAIT MACRO) ARE CALIBRATED.
;
;--
INI$CACHE::
	MTPR	#<CSWP$M_C0ENA+CSWP$M_C1ENA+CSWP$M_INV>, -
		#PR790$_CSWP		; TURN ON BOTH HALVES OF CACHE
	RSB
	.ENDC

	.SBTTL	SYSL$CLRSBIA
;++
; SYSL$CLRSBIA	- ON 11/790, CLEAR SBIA ERROR REGISTERS
;		- ON 11/780, 11/750, 11/730, AND MICRO-VAX I, THIS IS A NOP
;
; THIS ROUTINE IS CALLED TO CLEAR OUT SBIA ERROR BITS AFTER A MACHINE CHECK
; OCCURS (WHEN MACHINE CHECK IS HANDLED LOCALLY).
;
; THIS ROUTINE SHOULD BE CALLED AT IPL 31.
;
; INPUTS:
;	ABUS_TYPE	- AN ARRAY TYPE CODES; IDENTIFIES EACH ADAPTER ON THE
;			  ABUS.
;	ABUS_VA		- AN ARRAY OF ADAPTER SPACE VA'S FOR EACH ADAPTER
;			  ON THE ABUS.
;
; OUTPUTS:
;	SBI ERROR BITS ARE CLEARED FOR EACH SBIA ON THE ABUS.
;	ALL REGISTERS PRESERVED.
;++
SYSL$CLRSBIA::
	.IF	EQ,CPU_TYPE-PR$_SID_TYP790 ; FOR 11/790:
	PUSHR	#^M<R1,R2>		; SAVE SOME REGISTERS
	CLRL	R2			; INDEX INTO ABUS ARRAYS
10$:
	CMPB	#IO790$C_SBIA,W^ABUS_TYPE[R2]	; IS THIS AN SBIA?
	BNEQ	20$			; NO, KEEP LOOKING
	MOVL	W^ABUS_VA[R2],R1	; GET VA OF SBIA REGISTER SPACE
	MOVL	SBIA$L_SUMRY(R1), -	; CLEAR ERRORS
		SBIA$L_SUMRY(R1)	; IN ERROR SUMMARY REGISTER
	MOVL	SBIA$L_SBIERR(R1), -	; CLEAR ERRORS
		SBIA$L_SBIERR(R1)	; IN SBI ERROR REGISTER
	MOVL	SBIA$L_SBISTS(R1), -	; CLEAR ERRORS
		SBIA$L_SBISTS(R1)	; IN SBI FAULT/STATUS REGISTER
20$:
	AOBLSS	#4,R2,10$		; LOOP THROUGH ALL ABUS ADAPTERS
	POPR	#^M<R1,R2>		; RESTORE REGISTERS
	.ENDC				;END 790 CONDITIONAL
	RSB				; AND RETURN

	.SBTTL	EXE$TEST_CSR
;+
	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
; EXE$TEST_CSR - TEST A QBUS CONTROLLER CSR FOR EXISTENCE
	.ENDC				;END UV1 CONDITIONAL
	.IF	NE,CPU_TYPE-PR$_SID_TYPUV1
; EXE$TEST_CSR - TEST A UNIBUS CONTROLLER CSR FOR EXISTENCE
	.ENDC				;END "NOT" UV1 CONDITIONAL
;
; THIS TEST IS CPU-DEPENDENT.  THE FOLLOWING CPU'S ARE SUPPORTED:
;
;	11/780	-TEST CSR AND CHECK RESULT IN THE UBA STATUS REGISTER.
;	11/750	-NON-EXISTENT CSR IS REPORTED VIA MACHINE CHECK AS A
;		 NON-EXISTENT MEMORY REFERENCE.  CONNECT A TEMPORARY
;		 MACHINE CHECK HANDLER, TEST THE CSR, AND RESTORE THE
;		 ORIGINAL MACHINE CHECK HANDLER.
;	11/730	-ACTION IS THE SAME AS FOR THE 11/750.
;	11/790	-ACTION IS THE SAME AS FOR THE 11/780.
;	MICRO-VAX I -ACTION IS SAME AS FOR THE 11/750.
;
; THIS SUBROUTINE SHOULD BE CALLED VIA BRANCH OR JUMP TO SUBROUTINE AT IPL 31.
;
; INPUTS:
;
;	R0 = CSR ADDRESS
;	R6 = ADAPTER CONFIGURATION REGISTER ADDRESS
;
; OUTPUTS:
;
;	R0 LOW BIT SET/CLEAR FOR EXISTENT/NONEX CSR
;	OTHER REGISTERS PRESERVED.
;-

	.ENABL	LSB

EXE$TEST_CSR::				;SUBROUTINE ENTRY

	PUSHR	#^M<R1,R2>		;SAVE REGISTERS

	.IF	NE,C780_LIKE		;FOR 11/780 AND 11/790
;
; This next line of code is present so that this routine continues to function
; correctly when the UNIBUS adapter is powered down.  Moving 0 into the UBA
; Status Register has no effect when addressing the actual adapter register,
; and clears out any garbage bits in memory when UNIBUS space is re-mapped to
; the "black hole" page.
;
	MOVL	#0,UBA$L_SR(R6)		;WHEN UBA IS REMAPPED
	MOVL	G^EXE$GL_SCB,R1		;GET SCB ADDRESS
	PUSHL	4(R1)			;SAVE CURRENT MCHECK HANDLER ADDR
	MOVL	SP,R2			;MARK CURRENT STACK POSITION
	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
	MOVAL	B^MCHK_780,4(R1)	;CONNECT TEMP 11/780 MCHECK HANDLER
	.ENDC
	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
	MOVAL	B^MCHK_790,4(R1)	;CONNECT TEMP 11/790 MCHECK HANDLER
	.ENDC
	TSTW	(R0)			;ATTEMPT TO READ CSR
	MOVL	UBA$L_SR(R6),UBA$L_SR(R6) ;CLEAR AND CHECK FOR ERROR
	BNEQ	NONEX_DEV		;BRANCH IF ERROR
OK:	MOVZBL	#SS$_NORMAL,R0		;SET STATUS TO SUCCESS
	BRB	TEST_DONE		;JOIN COMMON EXIT

	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
;
; TEMPORARY CSR TEST MACHINE CHECK HANDLER FOR THE 11/780:
;

	.ALIGN	LONG
MCHK_780:
	MFPR	S^#PR780$_SBIFS,-(SP)	;GET SBI FAULT STATUS REGISTER
	BBCC	#25,(SP),10$		;CLEAR ERROR 1ST PASS BIT
10$:	MTPR	(SP)+,S^#PR780$_SBIFS	;WRITE BACK TO CLEAR THE FAULT
	MOVL	4(SP),R0		;PICK UP SUMMARY PARAMETER
	MOVL	R2,SP			;CLEAR MCHECK FRAME OFF STACK
	CMPL	R0,#5			;IS IT READ DATA SUBSTITUTE?
	BEQL	OK			;YES, THEN IT IS READ W/BAD PARITY
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
;
; TEMPORARY CSR TEST MACHINE CHECK HANDLER FOR THE 11/790:
;
	.ALIGN	LONG
MCHK_790:
	MFPR	#PR790$_EHSR,R0		;GET ERROR HANDLING STATUS REG
	BBCC	#EHSR$V_VMS,R0,10$	;CLEAR VMS ENTERED BIT
10$:	MTPR	R0,#PR790$_EHSR		;WRITE BACK TO REGISTER
	BSBW	SYSL$CLRSBIA		;CLEAR SBIA ERROR BITS
	MOVL	MCF790$L_MSTAT2(SP),R0	;PICK UP MEMORY STATUS REGISTER
	MOVL	R2,SP			;CLEAR MACHINE CHECK FRAME OFF STACK
	BBC	#MSTAT2$V_IOBUFF,R0,OK	;IF NOT NXM THEN SOMETHING'S THERE
	.ENDC

	.ENDC
	.IF	NE,C750_LIKE
	.IF	NE,CPU_TYPE-PR$_SID_TYPUV1

	MCK_BER	= ^X24			;OFFSET INTO 750 MACHINE CHECK FRAME
					; FOR BUS ERROR REGISTER
	NEX	= 3			; BIT POSITION FOR NON-EXISTENT MEMORY
	.ENDC				;END "NOT" UV1 CONDITIONAL
	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
	NEX	= 2			;MACHINE-CHECK CODE FOR NON-EXIST MEM
	.ENDC				;END UV1 CONDITIONAL

	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
;
; Test for non-UNIBUS I/O space addres first (IDC specific code)
;
	ADDL3	#512*4,R6,R1		;GET LOWEST LEGAL ADDRESS
	CMPL	R0,R1			;IS CSR GREATER ?
	BGTRU	10$			;IF YES, DO CHECK
	MOVZBL	#SS$_NORMAL,R0		;NO CHECK TO DO, EXIT
	BRB	TEST_DONE_2		;
	.ENDC				;END 730 CONDITIONAL

10$:	MOVL	G^EXE$GL_SCB,R1		;GET SCB ADDRESS
	PUSHL	4(R1)			;SAVE CURRENT MCHECK HANDLER ADDR
	MOVL	SP,R2			;MARK CURRENT STACK POSITION
	MOVAL	B^MCHK_HANDLER,4(R1)	;CONNECT TEMP MCHECK HANDLER
	TSTW	(R0)			;ATTEMPT TO READ CSR
OK:	MOVZBL	#SS$_NORMAL,R0		;IF NO MCHECK, SET STATUS TO 
					; SUCCESS
	BRB	TEST_DONE		;JOIN COMMON EXIT

;
; TEMPORARY CSR TEST MACHINE CHECK HANDLER
;

	.ALIGN	LONG			;REQ'D MACHINE CHECK ALIGNMENT
MCHK_HANDLER:				;

	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	MTPR	#^XF,#PR750$_MCESR	;CLEAR NON-EX MEMORY CONDITION
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
	MTPR	#^XF,#PR730$_MCESR	;CLEAR NON-EX MEMORY CONDITION
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
	MTPR	#^XF,#PRUV1$_MCESR	;CLEAR MACHINE-CHECK STATE
	.ENDC


	.IF	NE,CPU_TYPE-PR$_SID_TYPUV1
	MOVL	#<1@NEX>,R0		;SETUP
	CMPL	(SP),#^X0C		;IS THIS A 730 FRAME?
	BEQL	50$			;YES, THEN DON'T CHECK FURTHER
	MOVL	MCK_BER(SP),R0		;SAVE BUS ERROR REGISTER
50$:	MOVL	R2,SP			;CLEAR MCHECK INFO FROM STACK
	BBC	#NEX,R0,OK		;MEMORY EXISTS, PARITY FAILURE
	.ENDC				;END "NOT" UV1 CONDITIONAL

	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
	MOVL	4(SP),R0		;GET MACHINE-CHECK CODE
	MOVL	R2,SP			;CLEAN MCHECK FRAME FROM STACK
	CMPL	R0,#NEX			;IS MCHK CODE = NON-EXISTENT MEM?
	BNEQ	OK			;BR IF NO, MUST HAVE BEEN PARITY ERR
	.ENDC				;END UV1 CONDITIONAL

	.ENDC				;END C750_LIKE CONDITIONAL
NONEX_DEV:				;
	CLRL	R0			;SET STATUS TO FAILURE
TEST_DONE:
	POPL	4(R1)			;RESTORE SYSTEM MCHECK HANDLER
TEST_DONE_2:
	POPR	#^M<R1,R2>		;RESTORE REGISTERS
	RSB				;RETURN RESULT TO CALLER
	.DISABLE LSB

	.SBTTL	ADPLINK - LINK ADAPTER CONTROL BLOCK INTO ADP LIST
;+
; ADPLINK LINKS THE ADAPTER CONTROL BLOCK TO THE END OF THE ADP LIST
;
; INPUT:
;	R2 - ADDRESS OF NEW ADP
; OUTPUTS:
;	ADP IS LINK TO THE END OF THE ADPLIST LOCATED BY IOC$GL_ADPLIST.
;	R0,R1 destroyed.
;-

ADPLINK::				;
	MOVAB	@#<IOC$GL_ADPLIST-ADP$L_LINK>,R0
					; START OF LIST
10$:	MOVL	ADP$L_LINK(R0),R1	; FLINK TO FIRST ENTRY
	BEQL	20$			; AT END
	MOVL	R1,R0			; TRY AGAIN
	BRB	10$			;
20$:	MOVL	R2,ADP$L_LINK(R0)	; CHAIN NEW ADP TO END OF LIST
	RSB				; AND RETURN

	.END
