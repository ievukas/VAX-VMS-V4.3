	.TITLE	RMSRESET - RMS IMAGE I/O SEGMENT REINITIALIZE ROUTINE
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:	EXECUTIVE, IMAGE ACTIVE AND RESET ROUTINES
;
; ABSTRACT:	REINITIALIZES RMS IMAGE IO SEGMENT LIST HEADERS.
;
; ENVIRONMENT:	KERNEL MODE.
;
;--
;
	.SBTTL	HISTORY			; DETAILED
;
; AUTHOR: LEO LAVERDURE	, CREATION DATE: 21-FEB-78
;
; MODIFIED BY:
;
;	V03-002	WMC0001		Wayne Cardoza		19-Mar-1984
;		RM$SET routine to initialize the image I/O area.
;
;	V03-001	SRB0111		Steve Beckhardt		10-Feb-1984
;		Added blocking AST routine for RMS directory cache
;		invalidate.
;
;--
	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
	$DYNDEF				;DATA STRUCTURE TYPE CODES
	$IHDDEF				;IMAGE HEADER DEFINITIONS
	$IMPDEF				;RMS IMPURE AREA DEFINITIONS
	$SSDEF				;SYSTEM STATUS DEFINITIONS
	$UCBDEF				;UCB DEFINITIONS

;
; EXTERNAL SYMBOLS:
;

;
; MACROS:
;
;
; EQUATED SYMBOLS:
;
;
; OWN STORAGE:
;

	.SBTTL	RMSRESET - IMAGE I/O SEGMENT RESET

;++
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;
;	BSBW	RM$RESET
;		MAY BE CALLED FROM EITHER EXEC OR KERNEL MODE
;
;
; INPUT PARAMETERS:
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	RESETS THE IMAGE I/O FREE PAGE LIST TO EMPTY
;	RESETS THE IMAGE I/O FREE SPACE LIST TO EMPTY
;	ZEROES THE IMAGE I/O SEGEMENT BASE ADDRESS AND LENGTH
;	ZEROES THE IMAGE I/O IFAB AND IRAB TABLE LINK ADDRESSES
;	IF NO ACTIVE IMAGE I/O IFABS, EXITS WITH SUCCESS, ELSE
;		ZEROES THE # OF ACTIVE IFABS
;		ZEROES THE IMAGE I/O IFAB AND IRAB TABLES
;		EXIT WITH STATUS SS$_MUSTCLOSEFL
;
;	R0 = ERROR STATUS CODE
;	R1,R2 ARE DESTROYED
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	SEE ABOVE
;
; SIDE EFFECTS:
;	
;	IF AN ERROR IS RETURNED, THE IMAGE I/O FILES CANNOT BE RUN DOWN.
;	THIS IS OF LITTLE CONSEQUENCE AS THIS IS AN ERROR CONDITION
;	ARISING FROM THE CLI'S FAILURE TO DO THE RUNDOWN BEFORE STARTING
;	ANOTHER IMAGE.  THE IMAGE MAY BE STARTED.
;
;--

;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MAY BE PAGED *****************
;
	.PSECT	Y$EXEPAGED
;
; **********************************************************************
;
RM$RESET::
	MOVAL	@#PIO$GL_IIOFSPLH,R2	;RMS FREE PAGE LIST HEAD
	MOVL	R2,(R2)			;MAKE THIS LIST EMPTY
	MOVL	R2,4(R2)		;TAIL POINTS AT HEAD
	MOVAL	W^<PIO$GW_IIOIMPA -	;FORM ADDRESS OF IMAGE I/O
		+IMP$L_FREEPGLH-PIO$GL_IIOFSPLH>(R2),R2 ;FREE PAGE LIST
	MOVL	R2,(R2)			;MAKE THE LIST EMPTY
	MOVL	R2,4(R2)		;TAIL POINTS AT HEAD

	ASSUME	IMP$L_IOSEGLEN EQ IMP$L_IOSEGADDR+4
	CLRQ	<IMP$L_IOSEGADDR-IMP$L_FREEPGLH>(R2)	;NO IMAGE I/O SEGMENT
	CLRL	@IMP$L_IFABTBL-IMP$L_FREEPGLH(R2)	;ZERO IFAB TABLE LINK
	CLRL	@IMP$L_IRABTBL-IMP$L_FREEPGLH(R2)	;ZERO IRAB TABLE LINK
	TSTW	IMP$W_NUM_IFABS-IMP$L_FREEPGLH(R2)	;ANY ACTIVE IFABS?
	BNEQ	10$					;BRANCH IF NOT
	MOVL	#1,R0					;SHOW SUCCESS
	RSB						;BACK TO CALLER
;
;  I/O RUNDOWN NOT DONE!!
;
;  JUST CLEAR THE IFAB AND IRAB TABLE POINTERS SO THAT RMS CAN CONTINUE.
;
;  (ASSUMES THAT THE IFAB TABLE IS IMMEDIATELY FOLLOWED BY THE IRAB TABLE.)
;
10$:	CLRW	IMP$W_NUM_IFABS-IMP$L_FREEPGLH(R2)	;SAY NO ACTIVE IFABS
	MOVL	IMP$L_IFABTBL-IMP$L_FREEPGLH(R2),R2	;GET ADDR OF IFAB TABLE
	MOVL	#IMP$C_ENTPERSEG+1,R1			; # OF QUADWORDS TO ZERO
20$:	CLRQ	(R2)+					;ZERO IFAB AND IRAB ADDRS
	SOBGTR	R1,20$					;LOOP
	MOVZWL	#SS$_MUSTCLOSEFL,R0			;FAILURE STATUS
	RSB

	.SBTTL	RM$SET - INITIALIZE IMAGE I/O SEGMENT 

;++
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;
;	BSBW	RM$SET
;		MAY BE CALLED FROM EITHER EXEC OR KERNEL MODE
;
;
; INPUT PARAMETERS:
;
;	R0 =  IMAGE HEADER LINK FLAGS
;	R1 -> DESCRIPTOR OF EXTRA IMAGE I/O SEGMENT SPACE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0,R1,R2 ARE DESTROYED
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	
;	NONE
;--

;
; **********************************************************************
;
; **************** THE FOLLOWING CODE MAY BE PAGED *****************
;
	.PSECT	Y$EXEPAGED
;
; **********************************************************************
;
RM$SET::
	MOVAL	PIO$GW_IIOIMPA,R2		;IMAGE I/O IMPURE AREA
	BBCC	#IMP$V_NOP0BUFS,(R2),5$		;ASSUME NO P0 BUFFERS ALLOWED
5$:	BBC	#IHD$V_NOP0BUFS,R0,10$		;CHECK LINK FLAGS
	BBSS	#IMP$V_NOP0BUFS,(R2),10$	;NONE ALLOWED
10$:	MOVL	PIO$GQ_IIODEFAULT,IMP$L_IOSEGLEN(R2) ;DEFAULT I/O SEGMENT LENGTH
	MOVL	PIO$GQ_IIODEFAULT+4,IMP$L_IOSEGADDR(R2) ;SEGMENT ADDRESS
	TSTL	(R1)				;IS AN ADDITIONAL SEGMENT SPECIFIED
	BEQL	20$
	MOVL	4(R1),R0			;ADDITIONAL AREA
	MOVL	(R1),8(R0)			;LENGTH OF SEGMENT
	INSQUE	(R0),IMP$L_FREEPGLH(R2)		;PUT IT ON FREE LIST
20$:	RSB

	.SBTTL	RM$DIRCACHE_BLKAST - DIRECTORY CACHE BLOCKING AST
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE IS THE SYSTEM BLOCKING AST ROUTINE FOR THE RMS DIRECTORY
;	CACHE. IT IS LOCATED HERE BECAUSE IT IS CALLED AT IPL$_SYNCH.
;	THIS ROUTINE BUMPS THE DIRECTORY SEQUENCE COUNTER IN THE UCB
;	AND CLEARS THE CACHE ARMED BIT.  THEN THE FIRST RMS TO NOTICE
;	THE CACHE ISN'T VALID WILL DO A LOCK CONVERSION TO REARM THE LOCK.
;
; CALLING SEQUENCE:
;
;	JSB	RM$DIRCACHE_BLKAST AT IPL$_SYNCH
;
; INPUT PARAMETERS:
;
;	R1	ADDRESS OF UCB
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;--

	.PSECT	AEXENONPAGED

RM$DIRCACHE_BLKAST::
	CMPB	#DYN$C_UCB,-		; MAKE SURE WE ARE POINTING
		UCB$B_TYPE(R1)		; AT A UCB
	BNEQ	10$
	INCW	UCB$W_DIRSEQ(R1)	; INCREMENT SEQ. #
	BICW	#UCB$M_AST_ARMED,-	; INDICATE AST IS NO LONGER ARMED
		UCB$W_DIRSEQ(R1)
	RSB

10$:	BUG_CHECK	NOTUCBUCB,FATAL


 

	.END
