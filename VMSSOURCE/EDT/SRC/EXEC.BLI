%TITLE 'EDT$EXEC - enter and exit line and change mode'
MODULE EDT$EXEC (				! Enter and Exit Line and Change Mode
		IDENT = 'V04-000'			! File: EXEC.BLI Edit: JBS1024
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module provides the initialization and termination
!	processing for entering and exiting line and change mode.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: 6-AUG-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 18-FEB-1981.  This module was created by
!	extracting routine EDT$$EXE_CMD  from module EDTCTRL.
! 1-002	- Regularized the headers.  JBS 24-Feb-1981
! 1-003	- Fix the file name and module name, and remove control C handling.
!	   JBS 04-Mar-1981
! 1-004	- Use the ASSERT macro.  JBS 01-Jun-1981
! 1-005	- Don't change the current mode to line just because the change mode
!	   processor exits, since it now exits at the end of the journal file.
!	   Rearrange the looping logic to take the new recovery procedure into
!	   account; this means this module no longer has EDT$$G_RCOV_MOD as an
!	   implicit input.  Also, remove L_LINE and L_CHANGE.  JBS 02-Oct-1981
! 1-006	- Don't fail to enter change mode if the terminal is unknown or hard copy.
!	   JBS 20-Oct-1981
! 1-007	- Take the prompt from the global rather than from a constant.  JBS 21-Oct-1981
! 1-008	- Remove length of prompt string.  JBS 23-Oct-1981
! 1-009	- Correct an error in a comment.  JBS 17-Nov-1981
! 1-010 - Put L_LINE and L_CHANGE back TMV 7-Dec-81
! 1-011	- Add control C handling for line mode.  JBS 21-Dec-1981
! 1-012	- Debug control C handling.  JBS 24-Dec-1981
! 1-013	- Before returning load MACCAL into memory, in case we are returning
!	   to it on the PDP-11.  JBS 10-Mar-1982
! 1-014	- Revise the nooverlay logic to avoid undefined symbols at build time.
!	   JBS 15-Mar-1982
! 1-015	- Remove the reference to EDT$$LOAD_MACCAL.  JBS 18-Mar-1982
! 1-016	- Add alternative control C message.  JBS 24-May-1982
! 1-017	- Remove L_LINE and L_CHANGE.  JBS 03-Jun-1982
! 1-018 - Reset command buffer if ^c seen from terminal. STS 15-Jul-1982
! 1-019	- Don't clear the control C counters unless we are reading from
!	   a terminal.  Also, treat the startup file like a macro for
!	   control C processing.  JBS 28-Jul-1982
! 1-020	- Improve the control Z ignoring logic: don't journal ignored
!	   control Z's, since three in a row will be mistaken for the
!	   end of the journal file on a /RECOVER.  JBS 29-Jul-1982
! 1-021	- Simplify the call to initialize the keypad.  JBS 13-Jul-1982
! 1-022 - Clear control C if we don't have a macro. STS 06-Oct-1982
! 1-023	- Improve the appearance of the listing.  JBS 14-Jun-1983
! 1-024	- Exit on control Z from terminal.  JBS 20-Jun-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$EXE_CMD;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!+
! EDT$$MACCAL uses this symbol indirectly to refer to this routine, so that it
! can be excluded from the overlay analysis.
!-

GLOBAL BIND
    ROUTINE
    EDT$$EXE_CMD_NOOVERLAY_REF = EDT$$EXE_CMD;

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$EXE_CMD  - execute commands'

GLOBAL ROUTINE EDT$$EXE_CMD (			! Execute commands
    SOURCE					! New input source
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Enter and exit line and change mode.
!
! FORMAL PARAMETERS:
!
!  SOURCE		new input source
!
! IMPLICIT INPUTS:
!
!	EDT$$G_TRN_TBLINIT
!	EDT$$A_CMD_END
!	EDT$$T_CMD_BUF
!	EDT$$G_CMD_LEN
!	EDT$$G_EXITD
!	EDT$$G_EDIT_MOD
!	EDT$$G_TI_TYP
!	EDT$$G_TXT_ONSCR
!	EDT$$Z_PA_STK
!	EDT$$T_PMT_LINE
!	EDT$$G_CC_DONE
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_INP_SRC
!	EDT$$A_CMD_BUF
!	EDT$$G_TXT_ONSCR
!	EDT$$A_CMD_END
!	EDT$$G_CC_DONE
!
! ROUTINE VALUE:
!
!	0 - We have seen an EXIT command; EDT$$G_EXITD will be set
!	1 - We have reached end of file.
!	2 - We saw a control C
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$DEF_DFLTK,				! Define the default keys
	EDT$$CHM_EXE,				! Execute change mode commands
	EDT$$GET_LN,				! Get a line from the input device
	EDT$$PA_CMD,				! Parse a line-mode command
	EDT$$LNM_CMD,				! Execute a line mode command
	EDT$$CHK_CC,				! Check for control C
	EDT$$MSG_TOSTR : NOVALUE,		! Convert a message code to a string
	EDT$$OUT_FMTBUF : NOVALUE,		! Print the format buffer
	EDT$$CLR_CC : NOVALUE,			! Clear control C flag
	EDT$$FMT_CRLF : NOVALUE;		! End of output line

    EXTERNAL
	EDT$$G_TRN_TBLINIT,			! Translate table init flag
	EDT$$A_CMD_END,				! Pointer to end of command line
	EDT$$T_CMD_BUF,				! Command line buffer
	EDT$$A_CMD_BUF,				! Pointer into command line buffer
	EDT$$G_CMD_LEN,				! Length of current command
	EDT$$G_EXITD,				! Did we exit with the last command?
	EDT$$G_INP_SRC,				! Source of input commands
	EDT$$G_EDIT_MOD,			! Current editing mode
	EDT$$G_TI_TYP,				! Type of terminal
	EDT$$G_TXT_ONSCR,			! Text was written to screen
	EDT$$Z_PA_STK,				! Parser semantic stack
	EDT$$T_PMT_LINE : VECTOR [, BYTE],	! Counted ASCII string of line-mode prompt
	EDT$$G_CC_DONE,				! Set if control C actually aborted anything
	EDT$$G_TIN_OBUFPOS,			! Current length of journal record
	EDT$$G_JOU_VALID;			! Set to 1 if there is a record in the journal buffer

!+
! Specify the messages used in this routine.
!-
    MESSAGES ((ABOBYCC, CTRC__IGN));

    LOCAL
	SAVE_SOURCE,
	EOF_FLAG;				! 1 = reached end of file, 2 = control C

!+
! If we are not coming from the terminal but a control C has been typed, get out now.
!-

    IF ((.EDT$$G_INP_SRC NEQ INP_TERM) AND (.EDT$$G_INP_SRC NEQ INP_JOURNAL))
    THEN

	IF EDT$$CHK_CC ()
	THEN
	    BEGIN
	    EDT$$G_CC_DONE = 1;
	    RETURN (2);
	    END;

    SAVE_SOURCE = .EDT$$G_INP_SRC;
    EDT$$G_INP_SRC = .SOURCE;
    EDT$$A_CMD_BUF = CH$PTR (EDT$$T_CMD_BUF);
    CH$WCHAR ('!', EDT$$T_CMD_BUF);
    EOF_FLAG = 0;

    WHILE ((.EOF_FLAG EQL 0) AND ( NOT .EDT$$G_EXITD)) DO

	IF (.EDT$$G_EDIT_MOD EQL CHANGE_MODE)
	THEN
!+
! We are in change mode, go into the change mode processor.
!-
	    BEGIN

	    LOCAL
		STATUS;

!+
! Init the keypad translation table if necessary.
! If the initialization fails, drop into line mode.
!-
	    STATUS = 1;

	    IF ( NOT .EDT$$G_TRN_TBLINIT) THEN STATUS = EDT$$DEF_DFLTK ();

	    IF .STATUS
	    THEN
		EOF_FLAG = EDT$$CHM_EXE ()
	    ELSE
		BEGIN
		EDT$$MSG_TOSTR (.STATUS);
		EDT$$FMT_CRLF ();
		EDT$$G_EDIT_MOD = LINE_MODE;
		END;

!+
! EDT$$CHM_EXE returns after a series of commands.  It returns on the EXIT
! command (which sets EDT$$G_EDIT_MOD to LINE_MODE) and at the end of the
! journal file.  In the latter case it returns a 1; if it returns because
! of exiting it returns a 0.
!-
	    END
	ELSE
	    BEGIN

	    IF (.EDT$$G_INP_SRC NEQ INP_MACRO) THEN EDT$$CLR_CC ();

	    ASSERT (.EDT$$G_EDIT_MOD EQL LINE_MODE);	! We are in line mode
!+
! See if we must read a line.
!-

	    IF (CH$RCHAR (.EDT$$A_CMD_BUF) EQL %C'!')
	    THEN
		BEGIN

		LOCAL
		    LOOP_DONE,
		    EOF_COUNTER;

		EOF_COUNTER = 0;
		LOOP_DONE = 0;
!+
! We stay in the following loop until we either have a command to process or we have
! end of file from somewhere other than the terminal.  In the later case EOF_FLAG is set.
!-

		WHILE ( NOT .LOOP_DONE) DO
		    BEGIN

		    IF (EDT$$GET_LN (EDT$$T_PMT_LINE [1], .EDT$$T_PMT_LINE [0]) EQL 0)
		    THEN
			LOOP_DONE = 1
		    ELSE
			BEGIN

			IF (.EDT$$G_INP_SRC NEQ INP_TERM)
			THEN
			    BEGIN
			    EOF_FLAG = 1;
			    LOOP_DONE = 1;
			    END
			ELSE
			    BEGIN
!+
! This is an EOF from the terminal, invalidate the journal buffer.
! If we journal this it may be confused with the end of the journal file.
!-
			    EDT$$G_TIN_OBUFPOS = 0;
			    EDT$$G_JOU_VALID = 0;
!+
! Convert three EOFs in a row into a QUIT/SAVE command.   The purpose
! of this feature is to prevent a batch job from getting into an endless
! loop if EDT runs into the end of the command file.
! Note that the command is not placed in the journal file.
!-
			    EOF_COUNTER = .EOF_COUNTER + 1;

			    IF (.EOF_COUNTER GEQ 3)
			    THEN
				BEGIN
				CH$MOVE (10, UPLIT (BYTE ('QUIT/SAVE!')), .EDT$$A_CMD_END);
				EDT$$A_CMD_END = CH$PLUS (.EDT$$A_CMD_END, 9);
				EDT$$G_CMD_LEN = .EDT$$G_CMD_LEN + 9;
				LOOP_DONE = 1;
				END;

			    END;

			END;

		    END;

		END;

!+
! Parse and execute the command. (Unless it is a comment or we have reached EOF.)
!-

	    IF ( NOT .EOF_FLAG)
	    THEN
		BEGIN

		IF ((.EDT$$G_CMD_LEN EQL 0) OR (CH$RCHAR (EDT$$T_CMD_BUF) NEQ %C'!'))
		THEN

		    IF EDT$$PA_CMD ()
		    THEN
			EDT$$LNM_CMD (EDT$$Z_PA_STK)
		    ELSE
			EDT$$G_TXT_ONSCR = .EDT$$G_TXT_ONSCR + 1;

!+
! If the control C flag is set, it is likely that the command was aborted
! by a control C.
!-

		IF EDT$$CHK_CC ()
		THEN
		    BEGIN

		    IF ((.EDT$$G_INP_SRC EQL INP_TERM) OR (.EDT$$G_INP_SRC EQL INP_JOURNAL))
		    THEN
			BEGIN

			IF (.EDT$$G_CC_DONE)
			THEN
			    EDT$$MSG_TOSTR (EDT$_ABOBYCC)
			ELSE
			    EDT$$MSG_TOSTR (EDT$_CTRC__IGN);

			EDT$$OUT_FMTBUF ();
!+
! We've seen a control C from the terminal, so clear out the command buffer.
!-
			EDT$$A_CMD_BUF = EDT$$T_CMD_BUF;
			EDT$$A_CMD_END = .EDT$$A_CMD_BUF;
			CH$WCHAR ('!', .EDT$$A_CMD_END);
			END
		    ELSE
!+
! We have seen a control C but we are not reading from the terminal.  Return to our caller, who
! will arrange to print an appropriate message.
!-
			BEGIN
			EDT$$G_CC_DONE = 1;
			EOF_FLAG = 2;
			END;

		    END;

		END;

	    END;

!+
! When the loop falls through we have either reached an end of file or
! seen an EXIT command.  Tell the caller which.
!-
    EDT$$G_INP_SRC = .SAVE_SOURCE;
    RETURN (.EOF_FLAG);
    END;					! of routine EDT$$EXE_CMD

!<BLF/PAGE>

END						! of module EDT$EXEC

ELUDOM
