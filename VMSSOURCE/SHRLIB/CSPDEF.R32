! *********************************************************************************************************************************
!  Created 15-SEP-1984 23:10:10  by  VAX-11 SDL V2.0       Source: 15-SEP-1984 22:50:54 _$255$DUA28:[SYSLOA.SRC]CSPDEF.SDL;1       
! *********************************************************************************************************************************
 
 
!*** MODULE CSP ***
! 
!  CSP - Codes used for communication between the CSP process and the loadable
! 	 Exec code
! 
literal csp$_nop = 0;                   !  No-op.  Should never be used
literal csp$_init = 1;                  !  Initialize loadable code and data
literal csp$_abort = 2;                 !  CSP process is gone or going away
literal csp$_badcsd = 3;                !  Something wrong with CSD structure
literal csp$_done = 4;                  !  Block transfer exchange has finished
literal csp$_reply = 5;                 !  Send a block transfer and terminate
literal csp$_reject = 6;                !  Don't engage in block transfer
literal csp$_local = 7;                 !  Request to pass local CSD to CSP
literal csp$k_max_flwctl = 8;           !  Maximum allowed active requests
literal csp$k_max_csdlng = 4096;        !  Maximum allowed CSD length
 
!*** MODULE CLX ***
! 
! +
!  CLX - Scheduling context for CSP
! 
!  Registers are saved by dint of the CALL to the routine which
!  creates the CLX block, and are restored by the RET. R0 and R1
!  must be saved and restored explicitly.
!  
! -
literal clx$m_queued = 1;
literal clx$m_mutex = 2;
literal clx$m_resume_req = 4;
literal clx$m_local_stack = 8;
literal clx$k_local_stack = 256;
literal clx$k_length = 320;             !  length of data structure
literal clx$S_$clxdef = 320;
macro clx$a_flink = 0,0,32,0 %;         !  forward link
macro clx$a_blink = 4,0,32,0 %;         !  reverse link
macro clx$w_size = 8,0,16,0 %;          !  size of structure
macro clx$b_type = 10,0,8,0 %;          !  structure type (DYN$C_xxx)
macro clx$r_flags_overlay = 11,0,8,0 %;
literal clx$s_flags_overlay = 1;
macro clx$b_flags = 11,0,8,0 %;         !  Flags
macro clx$r_flags_bits = 11,0,8,0 %;
literal clx$s_flags_bits = 1;           !  
macro clx$v_queued = 11,0,1,0 %;        !  CLX queue linkage in used
macro clx$v_mutex = 11,1,1,0 %;         !  mutex between RESUME and WAIT routine
macro clx$v_resume_req = 11,2,1,0 %;    !  signal flag between RESUME and WAIT 
macro clx$v_local_stack = 11,3,1,0 %;   !  local stack in use.
macro clx$a_s0_csd = 12,0,32,0 %;       !  Pointer to S0 space CSD
macro clx$a_p0_csd = 16,0,32,0 %;       !  Pointer to P0 space CSD
macro clx$L_P1 = 20,0,32,0 %;           !  Parameter for use by client code
macro clx$L_P2 = 24,0,32,0 %;           !  Parameter for use by client code
macro clx$L_P3 = 28,0,32,0 %;           !  Parameter for use by client code
macro clx$L_P4 = 32,0,32,0 %;           !  Parameter for use by client code
macro clx$l_index = 36,0,32,0 %;        !  context ID for debugging purposes
macro clx$l_r0 = 40,0,32,0 %;           !  saved R0
macro clx$l_r1 = 44,0,32,0 %;           !  saved R1
macro clx$r_iosb_overlay = 48,0,0,0 %;
literal clx$s_iosb_overlay = 8;
macro clx$q_iosb = 48,0,0,0 %;
literal clx$s_iosb = 8;                 !  I/O status block 
macro clx$r_iosb_structure = 48,0,0,0 %;
literal clx$s_iosb_structure = 8;
macro clx$w_iosb_stat = 48,0,16,0 %;    !  IOSB completion status 
macro clx$w_iosb_size = 50,0,16,0 %;    !  IOSB size of completed operation
macro clx$l_iosb_devdata = 52,0,32,0 %; !  IOSB device-dependent data
macro clx$l_stacksize = 56,0,32,0 %;    !  size of saved stack + registers
macro clx$a_stack = 60,0,32,0 %;        !  addr of saved stack area 
macro clx$r_stackblock = 64,0,0,0 %;
literal clx$s_stackblock = 256;         !  allow local stack of 64 longwords
macro clx$B_local_stack = 64,0,0,0 %;
literal clx$s_local_stack = 256;
 
!*** MODULE CSD ***
! 
! +
!  CSD - Cluster Server Data
! 
!  Defines client data to send to the cluster server in the indicated node.
! -
literal DYN$C_CSD = 100;                !  *** TEMPORARY ***
! 
!  Caller-supplied data
! 
literal csd$m_sts_rem = 1;
literal csd$K_LENGTH = 82;              !  start of buffers
! 
!  Define some default offsets for client-supplied data
! 
literal csd$k_test = 1;
literal csd$k_brkthru = 2;
literal csd$k_rcpc = 3;
literal csd$k_jnl_master = 4;
literal csd$k_opcom = 5;
literal csd$k_mount = 6;
literal csd$k_quorum = 7;
! 
!  $BRKTHRU message definitions
! 
literal csd$S_$csddef = 114;
macro csd$r_messages = 0,0,0,0 %;
literal csd$s_messages = 114;
macro csd$r_maincsd = 0,0,0,0 %;
literal csd$s_maincsd = 114;
macro csd$a_flink = 0,0,32,0 %;         !  forward link
macro csd$a_blink = 4,0,32,0 %;         !  reverse link
macro csd$w_size = 8,0,16,0 %;          !  size of structure
macro csd$b_type = 10,0,8,0 %;          !  structure type    (DYN$C_CLU)
macro csd$b_subtype = 11,0,8,0 %;       !  structure subtype (DYN$C_CSD)
macro csd$w_code = 12,0,16,0 %;         !  client code - who gets the msg in CSP
macro csd$r_csid_overlay = 14,0,32,0 %;
literal csd$s_csid_overlay = 4;
macro csd$l_csid = 14,0,32,0 %;         !  Cluster ID
macro csd$r_csid_structure = 14,0,32,0 %;
literal csd$s_csid_structure = 4;
macro csd$w_csid_index = 14,0,16,0 %;   !  index into CLU$GL_CLUSVEC
macro csd$w_csid_seq = 16,0,16,0 %;     !  sequence number
macro csd$l_sendlen = 18,0,32,0 %;      !  length of send buffer
macro csd$l_sendoff = 22,0,32,0 %;      !  offset (self relative) to send buffer
macro csd$l_recvlen = 26,0,32,0 %;      !  length of recv buffer
macro csd$l_recvoff = 30,0,32,0 %;      !  offset (self relative) to recv buffer
macro csd$a_astadr = 34,0,32,0 %;       !  address of caller AST
macro csd$a_user_astadr = 38,0,32,0 %;  !  address of caller's caller's AST
macro csd$l_user_astprm = 42,0,32,0 %;  !  param...
macro csd$a_user_iosb = 46,0,32,0 %;    !  caller's caller's IOSB
macro csd$b_user_efn = 50,0,8,0 %;      ! 
macro csd$b_efn = 51,0,8,0 %;
! 
!  Internal data (filled in by EXE$ALLOC_CSD)
! 
macro csd$r_sts_overlay = 52,0,16,0 %;
literal csd$s_sts_overlay = 2;
macro csd$w_sts = 52,0,16,0 %;          !  Status flags
macro csd$r_sts_bits = 52,0,8,0 %;
literal csd$s_sts_bits = 1;
macro csd$v_sts_rem = 52,0,1,0 %;       !  Request is from remote node
macro csd$r_ipid_overlay = 54,0,32,0 %;
literal csd$s_ipid_overlay = 4;
macro csd$l_ipid = 54,0,32,0 %;         !  Local Process ID
macro csd$r_ipid_structure = 54,0,32,0 %;
literal csd$s_ipid_structure = 4;
macro csd$w_ipid_index = 54,0,16,0 %;   !  index
macro csd$w_ipid_seq = 56,0,16,0 %;     !  sequence number
macro csd$r_iosb_overlay = 58,0,0,0 %;
literal csd$s_iosb_overlay = 8;
macro csd$q_int_iosb = 58,0,0,0 %;
literal csd$s_int_iosb = 8;             !  Internal I/O status block 
macro csd$r_iosb_structure = 58,0,0,0 %;
literal csd$s_iosb_structure = 8;
macro csd$w_iosb_stat = 58,0,16,0 %;    !  IOSB completion status 
macro csd$w_iosb_size = 60,0,16,0 %;    !  IOSB size of completed operation
macro csd$l_iosb_devdata = 62,0,32,0 %; !  IOSB device-dependent data
macro csd$q_procpriv = 66,0,0,0 %;
literal csd$s_procpriv = 8;             !  process privileges of caller
macro csd$l_procuic = 74,0,32,0 %;      !  UIC of caller
macro csd$l_imgcnt = 78,0,32,0 %;       !  used to detect new image
! 
!  Start of caller-supplied message
! 
macro csd$r_client_data = 82,0,0,0 %;
literal csd$s_client_data = 32;
macro csd$AB_data = 82,0,8,0 %;         !  ...
macro csd$r_default_data = 82,0,0,0 %;
literal csd$s_default_data = 32;        !  allow clients to specify...
macro csd$l_p1 = 82,0,32,0 %;           !  ... CSD$L_P1 - CSD$L_P8
macro csd$l_p2 = 86,0,32,0 %;           !  ... so they don't need to edit this
macro csd$l_p3 = 90,0,32,0 %;           !  ... file.
macro csd$l_p4 = 94,0,32,0 %;
macro csd$l_p5 = 98,0,32,0 %;
macro csd$l_p6 = 102,0,32,0 %;
macro csd$l_p7 = 106,0,32,0 %;
macro csd$l_p8 = 110,0,32,0 %;
! 
!  Client codes
! 
macro csd$r_brkthru = 0,0,0,0 %;
literal csd$s_brkthru = 32;
macro csd$l_brk_carcon = 0,0,32,0 %;    !  carriage control
macro csd$l_brk_flags = 4,0,32,0 %;     !  flags
macro csd$t_brk_sendto = 8,0,0,0 %;
literal csd$s_brk_sendto = 16;          !  counted string
macro csd$w_brk_sndtyp = 24,0,16,0 %;   !  send to value
macro csd$w_brk_reqid = 26,0,16,0 %;    !  class request id
macro csd$w_brk_timout = 28,0,16,0 %;   !  seconds of timeout 
macro csd$w_brk_msglen = 30,0,16,0 %;   !  message length
macro csd$t_brk_msgbuf = 32,0,0,0 %;    !  text string
! 
!  ... next caller def goes here...
!  
!  end of main UNION
