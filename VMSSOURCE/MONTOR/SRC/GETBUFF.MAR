	.TITLE	GETBUFF - Obtain Collection & Stat Buffers
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:  VAX/VMS MONITOR Utility
;
; ABSTRACT:
;	Called at request initialization time to obtain Collection 
;	and Stat buffers
;
; ENVIRONMENT: Unprivileged user mode.
;
; AUTHOR: Henry M. Levy		, CREATION DATE: 28-March-1977
;	  Thomas L. Cafarella
;
; MODIFIED BY:
;
;	V03-003	TLC1090		Thomas L. Cafarella	02-Aug-1984	15:00
;		Correct ACCVIOs in SYSTEM and PROCESSES classes.
;
;	V03-002	TLC1066		Thomas L. Cafarella	01-Apr-1984	11:00
;		Add SYSTEM class.
;
;	V03-001	PRS1008		Paul R. Senn		17-FEB-1984	14:00
;		Split out GET_BUFFERS and associated subroutines from 
;		MONITOR.MAR into separate module.
;
;
;
;--

	.SBTTL	DECLARATIONS
	.PSECT	MONDATA,QUAD,NOEXE
;
; INCLUDE FILES:
;

	$CDBDEF				; Define Class Descriptor Block
	$CDXDEF				; Define CDB Extension
	$MRBDEF				; Define Monitor Request Block
	$MBPDEF				; Define Monitor Buffer Pointers
	$MONDEF				; Monitor Recording File Definitions
	$SCBDEF				; Define STATS Control Block

;

	.SBTTL	GET_BUFFERS - Obtain Collection & Stat Buffers
	.PSECT	$$MONCODE,NOWRT,EXE
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Standard classes:
;
;	This routine obtains a number of collection and statistical buffers
;	using the LIB$GET_VM facility. For heterogeneous classes, the number
;	of buffers obtained is determined by the 3 symbols COLL_BUFS,
;	REG_BUFS and PC_BUFS. The buffers are contiguous, forming a block
;	which includes at its beginning, a set of longword pointers to the
;	buffers which follow immediately thereafter. The buffer block always
;	includes COLL_BUFS collection buffers and REG_BUFS regular stats
;	buffers. If percent data is being maintained, PC_BUFS percent stats
;	buffers are also included. The buffer block is pointed to by
;	CDB$A_BUFFERS.
;
;	For homogeneous classes, the entire buffer block above is repeated
;	once for each item being displayed. A set of contiguous pointers
;	to the buffer blocks is stored immediately preceding the blocks,
;	and is pointed to by CDB$A_BUFFERS. In addition, following the
;	buffer blocks are the SCB (STATS Control Block) and Element ID
;	Table.
;
;	Non-standard class (PROCESSES):
;
;	For the regular PROCESSES display, only one collection
;	buffer, and the display buffer will be obtained.
;
;	For the TOP PROCESSES displays, one collection buffer
;	and the 5 arrays (DATA, DIFF, ORDER, PID, ADDR) will
;	be obtained. Space for the FAO control string will also
;	be obtained, but will not be part of the buffer block.
;
; CALLING SEQUENCE:
;
;	JSB GET_BUFFERS
;
; INPUTS:
;
;	None
;
; IMPLICIT INPUTS:
;
;	COLL_BUFS global symbol -- number of collection buffers to obtain
;	REG_BUFS  global symbol -- number of regular stats buffers to obtain
;	PC_BUFS   global symbol -- number of percent stats buffers to obtain
;	MAXELTS   global symbol -- maximum number of homogeneous elements
;	SPTR -- pointer to SYI (System Information Area)
;
;	R6 -- pointer to CDB
;	R7 -- pointer to MRB
;	R11 -- pointer to MCA
;
; OUTPUTS:
;
;	None
;
; IMPLICIT OUTPUTS:
;
;	CDB$A_BUFFERS and CDB$L_BUFFERS fields of CDB will contain pointer
;	and length, respectively, of entire chunk of memory obtained.
;
;	SUM, MIN and MAX buffers (and PCSUM buffer, if percent requested)
;	are cleared to 0.
;
;	For TOP PROCESSES class, the DATA array will be cleared to 0.
;
; ROUTINE VALUE:
;
;	R0 = NORMAL, or error status from LIB$GET_VM, if any.
;
; SIDE EFFECTS:
;
;	Registers R0,R1,R2,R3,R4,R5,R8,R9,R10 altered.
;
;--
GET_BUFFERS::

	PUSHR	#^M<R7,R11>			; Save regs

;
; Get buffers for non-standard class (PROCESSES)
;

	BBC	#CDB$V_STD,CDB$L_FLAGS(R6),5$	; Continue if a non-standard class
	BRW	90$				; Otherwise, go process standard
5$:
	MOVL	SPTR,R2				; Get pointer to SYI
	MOVZWL	MNR_SYI$W_MAXPRCCT(R2),R2	; Get max process count
	MOVZWL	CDB$W_BLKLEN(R6),R9		; Get size of one data block
	MULL2	R2,R9				; Compute bytes for data blocks
	ADDL2	#<MNR_PRO$K_PSIZE+MNR_CLS$K_HSIZE>,R9 ; Add prefix and class header ...
						; ... to get collection buffer size
	CLRL	R4				; Clear FAO stack (display buffer) byte counter
	BITW	#<MRB$M_DISPLAY+MRB$M_SUMMARY>,MRB$W_FLAGS(R7) ; Displaying or summarizing?
	BEQL	10$				; No -- just need collection buffers
	BBC	#MRB$V_PROC_REQ,MRB$W_FLAGS(R7),10$ ; Br if PROCESSES not requested
	CMPB	#REG_PROC,CDB$B_ST(R6)		; Regular PROCESSES display ?
	BNEQ	30$				; No -- go get TOP arrays

;
; Regular PROCESSES display -- get display buffer (FAO stack)
;

	MULL3	#MNR_PRO$K_FSIZE,R2,R4		; Calc FAO stack (display buffer) size
10$:
	ADDL2	R9,R4				; Add size of both collection buffers
	ADDL2	R9,R4				; ... to FAO stack size
	ADDL3	#12,R4,CDB$L_BUFFERS(R6)	; ... add enough for 3 pointers
	BSBW	GET_MEM				; Obtain the virtual memory
	BLBS	R0,20$				; Continue if obtained OK
	BRW	GB_RSB				; Else, go exit with error
20$:
	MOVL	CDB$A_BUFFERS(R6),R5		; Now prepare to load 3 pointers
	MOVAL	12(R5),(R5)			; Point first ptr to collection buffer	
	ADDL3	(R5),R9,4(R5)			; Point 2nd ptr to 2nd coll buffer
	ADDL3	4(R5),R9,8(R5)			; Point 3rd ptr to FAO stack
	BRW	GB_NRSB				; ... and take normal return

;
; TOP PROCESSES display -- get 5 arrays consisting of "MAX PROCESS COUNT"
; longwords each.
;

30$:
	MULL3	#4,R2,R8			; Compute size of one array
	MULL3	#5,R8,R4			; Need 5 arrays
	ADDL2	R9,R4				; Add in size of 2 coll buffs to
	ADDL2	R9,R4				; ... get total bytes required
	ADDL3	#<4*7>,R4,CDB$L_BUFFERS(R6)	; ... add enough for 7 pointers
	BSBW	GET_MEM				; Obtain the virtual memory
	BLBS	R0,40$				; Continue if obtained OK
	BRW	GB_RSB				; Else, go exit with error
40$:
	MOVL	CDB$A_BUFFERS(R6),R5		; Now prepare to load the 7 pointers
	MOVAL	<4*7>(R5),(R5)+			; Point 1st ptr to 1st coll buffer	
	ADDL3	R9,-4(R5),(R5)+			; Point 2nd ptr to 2nd coll buffer
	ADDL2	-4(R5),R9			; Compute addr of first of 5 arrays
	MOVL	#5,R1				; Loop counter

50$:
	MOVL	R9,(R5)+			; Store array pointer and advance R5
	ADDL2	R8,R9				; Compute addr of next array
	SOBGTR	R1,50$				; Loop storing 5 pointers

	MULL3	#4,R2,R8			; Compute size of DATA array
	MOVL	CDB$A_BUFFERS(R6),R9		; ... and get its address
	MOVL	MBP$A_DATA(R9),R9		; ...
	BSBW	CLEAR_DATA			; Clear DATA array

;
; Obtain an FAO control string for PROCESSES/TOP. This buffer
; will not be part of the buffer block, but, instead, will be
; described by the CDB$A_FAOCTR and CDB$L_FAOCTR fields of the
; CDB. The FAO control string for STANDARD classes is obtained
; in the TEMPLATE (BLISS-32) routine.
;

	MOVL	#FAOCTR_SIZE,CDB$L_FAOCTR(R6)	; Store size of FAO control string
	PUSHAL	CDB$A_FAOCTR(R6)		; Push addr of longword to hold
						; ... FAO control string pointer
	PUSHAL	CDB$L_FAOCTR(R6)		; Now push addr of # of bytes needed
	CALLS	#2,G^LIB$GET_VM			; Allocate space
	BLBC	R0,80$				; Branch if failed
	BRW	GB_NRSB				; Else take normal return
80$:
	BRW	GB_RSB				; Take common error exit

;
; Get buffers for standard class
;

90$:

;
; Get DATA arrays for the special SYSTEM class.
;

	BBC	#CDB$V_SYSCLS,CDB$L_FLAGS(R6),93$ ; Br if not SYSTEM class
	BITW	#<MRB$M_DISPLAY+MRB$M_SUMMARY>,MRB$W_FLAGS(R7) ; Displaying or summarizing?
	BEQL	93$			; Br if no -- don't need DATA arrays
	CMPB	CDB$B_ST(R6),#ALL_STAT	; ALL stat requested ?
	BEQL	93$			; Br if yes -- don't need DATA arrays
	BSBW	GET_SYS_DATA_ARRAYS	; Do what it says
	BLBS	R0,93$			; Br if successful
	BRW	GB_RSB			; Else take error exit
;
; Compute number of bytes to allocate for heterogeneous class buffer block.
;

93$:
	BBC	#CDB$V_HOMOG,CDB$L_FLAGS(R6),95$ ; Br if hetero class
	BRW	HOM_BUFFS			; Else go do homogeneous
95$:
	MOVL	#<COLL_BUFS+REG_BUFS>,R4	; Number of buffers to obtain
	BBC	#CDB$V_PERCENT,CDB$W_QFLAGS(R6),100$ ; If percent not requested, skip PC_BUFS
	ADDL2	#PC_BUFS,R4			; Include PC_BUFS in count of buffers
100$:
	ADDL3	CDB$L_ICOUNT(R6),#1,R9		; Compute number of data items per buffer
						; ... + 1 for buffer pointer	
	MULL2	#4,R9				; ... times 4 since items are longwords
	MULL2	R4,R9				; ... times # of buffers
	ADDL3	#COLL_BUFS*MNR_CLS$K_HSIZE,R9,CDB$L_BUFFERS(R6)	; Collection buffers need headers
	BSBW	GET_MEM				; Obtain the virtual memory
	BLBS	R0,105$				; Br if status OK
	BRW	GB_RSB				; Else exit with error if failed

;
; Store values for the buffer pointers at the beginning of the buffer block
; just allocated.
;
; Register Usage:
;
;	R2  = size of most recent buffer
;	R3  = address of most recent buffer
;	R4  = number of buffers; later used as loop control
;	R5  = pointer into block of pointers 
;	R6  = CDB pointer
;	R10  = buffer block pointer
;

105$:
	MOVL	CDB$A_BUFFERS(R6),R5	; Store address of 1st pointer
	MOVL	R5,R10			; Remember buffer block addr for later MOVC5
	MULL2	#4,R4			; Compute address of ...
	ADDL3	R4,R5,R3		; ... 1st buffer
	MOVL	R3,(R5)+		; Move it into 1st pointer
	MULL3	#4,CDB$L_ICOUNT(R6),R2	; Calculate size of next buffer
	ADDL2	#MNR_CLS$K_HSIZE,R2	; Add in the header size
	MOVZBL	#COLL_BUFS,R4		; Loop COLL_BUFS times
110$:
	ADDL2	R2,R3			; Calculate address of next buffer
	MOVL	R3,(R5)+		; ... and store it into next pointer
	SOBGTR	R4,110$			; ....

	SUBL2	#MNR_CLS$K_HSIZE,R2	; Next group don't have headers
	MOVL	R2,R8			; Save size of a buffer for later MOVC5
	MOVZBL	#REG_BUFS-1,R4		; Loop REG_BUFS-1 times
120$:
	ADDL2	R2,R3			; Calculate address of next buffer
	MOVL	R3,(R5)+		; ... and store it into next pointer
	SOBGTR	R4,120$			; ....
	BBC	#CDB$V_PERCENT,CDB$W_QFLAGS(R6),150$ ; If percent not requested, skip pc buffs
	MOVZBL	#PC_BUFS,R4		; Loop PC_BUFS times
130$:
	ADDL2	R2,R3			; Calculate address of next buffer
	MOVL	R3,(R5)+		; ... and store it into next pointer
	SOBGTR	R4,130$			; ....
	MOVC5	#0,.,#0,R8,@MBP$A_PCSUM(R10) ; Zero out PCSUM buffer
	MOVC5	#0,.,#0,R8,@MBP$A_PCMAX(R10) ; Zero out PCMAX buffer

;
; Store large positive number (suitable for integer or floating)
; into each longword of PCMIN.
;

	MOVL	MBP$A_PCMIN(R10),R1	; Get addr of PCMIN buffer
	MOVL	CDB$L_ICOUNT(R6),R0	; ... and number of longwords
140$:
	MOVL	#LARGE_NO,(R1)+		; Move in a large value
	SOBGTR	R0,140$			; Loop back for next one

150$:
	MOVC5	#0,.,#0,R8,@MBP$A_SUM(R10) ; Zero out SUM buffer
	MOVC5	#0,.,#0,R8,@MBP$A_MAX(R10) ; Zero out MAX buffer

;
; Store large positive number (suitable for integer or floating)
; into each longword of MIN.
;

	MOVL	MBP$A_MIN(R10),R1	; Get addr of MIN buffer
	MOVL	CDB$L_ICOUNT(R6),R0	; ... and number of longwords
160$:
	MOVL	#LARGE_NO,(R1)+		; Move in a large value
	SOBGTR	R0,160$			; Loop back for next one


GB_NRSB:				; Normal return point
	MOVL	NORMAL,R0		; Indicate successful status

GB_RSB:					; Error return point
	POPR	#^M<R7,R11>		; Restore regs
	RSB				; Return

HOM_BUFFS:

;
; Compute number of bytes to allocate for homog class buffer block
;

	MOVZWL	CDB$W_BLKLEN(R6),R4			; .... Compute
	MULL2	#MAXELTS,R4				; .... collection
	ADDL2	#<MNR_CLS$K_HSIZE+MNR_HOM$K_PSIZE>,R4	; .... buffers
	MULL3	#COLL_BUFS,R4,R0			; .... size

	MOVL	#<<<<PC_BUFS+REG_BUFS> * <MAXELTS+1>> + COLL_BUFS+1> * 4>,R1

	BBS	#CDB$V_PERCENT,CDB$W_QFLAGS(R6),10$	; .... Add in
	SUBL2	#<4 * PC_BUFS * <MAXELTS + 1>>,R1	; .... MBP
10$:							; .... and
	MOVL	CDB$A_CDX(R6),R3			; ....
	MOVZBL	CDX$B_IDISCT(R3),R8			; .... transformation
	MULL2	R8,R1					; .... buffers
	ADDL2	R1,R0					; .... size

	MOVZBL	CDX$B_ELIDLEN(R3),R1			; .... Add in Element
	ADDL2	#SCB$K_SIZE,R1				; .... ID Table and
	MULL2	#MAXELTS,R1				; .... STATS Control
	ADDL3	R1,R0,CDB$L_BUFFERS(R6)			; .... Block size

	BSBW	GET_MEM			; Obtain the virtual memory
	BLBC	R0,GB_RSB		; Exit with error if failed

;
; Now store values for the buffer pointers at the beginning of
; the buffer block just allocated, and in each of the MBPs (Monitor
; Buffer Pointer blocks).
;

	MOVL	CDB$A_BUFFERS(R6),R11	; Store addr of 1st ptr
	MULL3	#4,R8,R1		; Compute addr of ...
	ADDL3	R1,R11,CB_ADDRS		; ... 1st coll buff
	ADDL3	R4,CB_ADDRS,CB_ADDRS+4	; ... 2nd coll buff
	ADDL3	R4,CB_ADDRS+4,R7	; ... and 1st MBP

	MOVL	#REG_BUFS,R9				; Get number of xform
	BBC	#CDB$V_PERCENT,CDB$W_QFLAGS(R6),20$	; buffers for use in
	ADDL2	#PC_BUFS,R9				; the MBP_FILL routine

20$:
	MOVL	R7,(R11)+		; Store away MBP ptr
	BSBB	MBP_FILL		; Fill the current MBP block
	SOBGTR	R8,20$			; Loop back to fill next MBP

;
; Now store addresses of the Element ID Table and the SCB Table.
;

	MOVL	CDB$A_CDX(R6),R0	; Get addr of CDB eXtension
	MOVL	R7,CDX$A_SCBTABLE(R0)	; Store SCB Table address
	ADDL3	#<SCB$K_SIZE*MAXELTS>,-	; ... and Element ID Table address
		R7,CDX$A_ELIDTABLE(R0)

	BRW	GB_NRSB			; All done -- go return

MBP_FILL:

;
; Fill an MBP (Monitor Buffer Pointers block) with the addresses
; of the transformation buffers immediately following it. There
; is one MBP for each item being displayed.
;
;
; Input Registers:
;
;	R7 = current MBP addr
;	R9 = number of transformation buffers
;

	MOVL	R7,R10			; Save MBP address for MOVC5 below
	MOVQ	CB_ADDRS,(R7)+		; Store coll buff ptrs in MBP

	MULL3	#4,R9,R5		; Compute address of buffer ...
	ADDL2	R7,R5			; ... portion of MBP

;
; Move in xform buffer ptrs for the "regular" buffers
;

	MOVZBL	#REG_BUFS,R0		; Loop REG_BUFS times
10$:
	MOVL	R5,(R7)+		; Store address of buffer into next ptr
	ADDL2	#<4*MAXELTS>,R5		; Calculate address of next buffer
	SOBGTR	R0,10$			; ....

;
; Move in xform buffer ptrs for the percent buffers if needed
;

	BBC	#CDB$V_PERCENT, -
		CDB$W_QFLAGS(R6),30$	; If percent not requested, skip pc buffs

	MOVZBL	#PC_BUFS,R0		; Loop PC_BUFS times
20$:
	MOVL	R5,(R7)+		; Store address of buffer into next ptr
	ADDL2	#<4*MAXELTS>,R5		; Calculate address of next buffer
	SOBGTR	R0,20$			; ....

30$:
	MOVL	R5,R7			; Save ptr to next MBP for next call

;
; Initialize buffers which require it.
;

	BBC	#CDB$V_PERCENT, -	; If percent not requested, skip pc buffs
		CDB$W_QFLAGS(R6),50$
	MOVC5	#0,.,#0,#<4*MAXELTS>,@MBP$A_PCSUM(R10) ; Zero out PCSUM buffer
	MOVC5	#0,.,#0,#<4*MAXELTS>,@MBP$A_PCMAX(R10) ; Zero out PCMAX buffer

;
; Store large positive number (suitable for integer or floating)
; into each longword of PCMIN.
;

	MOVL	MBP$A_PCMIN(R10),R1	; Get addr of PCMIN buffer
	MOVL	#MAXELTS,R0		; ... and number of longwords
40$:
	MOVL	#LARGE_NO,(R1)+		; Move in a large value
	SOBGTR	R0,40$			; Loop back for next one

50$:
	MOVC5	#0,.,#0,#<4*MAXELTS>,@MBP$A_SUM(R10) ; Zero out SUM buffer
	MOVC5	#0,.,#0,#<4*MAXELTS>,@MBP$A_MAX(R10) ; Zero out MAX buffer

;
; Store large positive number (suitable for integer or floating)
; into each longword of MIN.
;

	MOVL	MBP$A_MIN(R10),R1	; Get addr of MIN buffer
	MOVL	#MAXELTS,R0		; ... and number of longwords
60$:
	MOVL	#LARGE_NO,(R1)+		; Move in a large value
	SOBGTR	R0,60$			; Loop back for next one

	RSB


GET_MEM:

;
; Obtain virtual memory for required buffers.
;

;
; Push 2 addresses required by LIB$GET_VM and issue request
;

	PUSHAL	CDB$A_BUFFERS(R6)		; Push addr of longword to hold
						; ... buffer block pointer
	PUSHAL	CDB$L_BUFFERS(R6)		; Now push addr of # of bytes needed
	CALLS	#2,G^LIB$GET_VM			; Allocate buffers
	RSB					; Return


CLEAR_DATA::

;
; Initialize the DATA array to zero.
;
; Input Registers:
;
;	R8 = size of DATA array
;	R9 = address of DATA array
;
; Registers R0-R5 and R8,R9 are destroyed.
;
; The only output of this subroutine is that the
; DATA array is cleared to zeroes.
;

10$:
	CMPL	#32000,R8			; Is a large MOVC5 required?
	BGEQ	20$				; No -- go do a smaller one
	MOVC5	#0,.,#0,#32000,(R9)		; Yes -- clear 32000 bytes
	SUBL2	#32000,R8			; Calc bytes left to clear
	ADDL2	#32000,R9			; ... and starting byte addr
	BRB	10$				; Go check size of next move
20$:
	MOVC5	#0,.,#0,R8,(R9)			; Clear remainder of DATA array

	RSB					; Return

GET_SYS_DATA_ARRAYS:

	MOVL	SPTR,R2				; Get pointer to SYI
	MOVZWL	MNR_SYI$W_MAXPRCCT(R2),R2	; Get max process count
	MULL3	#4,R2,R11			; Compute size of one array
	MULL3	#16,R11,SYS_DATA_LEN		; Need 16 arrays
	PUSHAL	SYS_DATA_ADDR			; Push addr of longword to hold
						; ... SYSTEM DATA arrays ptr
	PUSHAL	SYS_DATA_LEN			; Now push addr of # of bytes needed
	CALLS	#2,G^LIB$GET_VM			; Allocate space
	BLBS	R0,10$				; Branch if successful
	RSB					; Else return with error
10$:
	MOVAL	SYS_TOP_VEC,R2			; Get addr of vector of ptrs
	MOVL	SYS_DATA_ADDR,R3		; Get ptr to first array
	MOVL	#16,R4				; Number of pointers to save
20$:
	MOVL	R3,(R2)+			; Save ptr to first array
	ADDL2	R11,R3				; Point to next one
	SOBGTR	R4,20$				; Loop back to save next ptr

;
; Now clear the four DATA arrays
;

	MOVAL	SYS_TOP_VEC,R10			; Get addr of vector of ptrs
	MOVL	#4,R7				; Number of arrays to clear
30$:
	MOVL	(R10),R9			; R9 must contain array addr
	MOVL	R11,R8				; R8 gets array length
	BSBW	CLEAR_DATA			; Clear the data
	ADDL2	#16,R10				; Point to next array
	SOBGTR	R7,30$				; Loop back to process next one
	MOVL	#SS$_NORMAL,R0			; Load up normal status
	RSB

.END
