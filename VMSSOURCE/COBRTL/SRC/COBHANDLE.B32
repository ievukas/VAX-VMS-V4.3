MODULE COB$$HANDLER (
		IDENT = '1-022'		! FILE: COBHANDLE.B32 EDIT:PDG1022
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
! FACILITY:	COBOL SUPPORT
!
! ABSTRACT:	This procedure is the error handler for COBOL error
!		conditions.  It gets invoked as a result of a call
!		to LIB$SIGNAL.
!
!
! ENVIRONMENT:	Vax-11 User Mode
!
! AUTHOR: MLJ , CREATION DATE: 03-MAY-1979
!
! MODIFIED BY:
!
! 1-001 - Original. MLJ  03-MAY-1979
! 1-002 - Added boilerplate and comments. RKR 18-JULY-1979
! 1-003 - Declare psects via library macro. RKR 23-AUG-1979
! 1-004 - Change symbolic name of LIBRARY file. RKR 1-OCT-79
! 1-005 - Change name of entry point to COB$$HANDLER. RKR 18-OCT-79
! 1-006 - Remove definition of COB$_USE_EXIT. Cosmetic changes.
!	  RKR 20-OCT-79
! 1-007 - But forgot to declare it as EXTERNAL LITERAL.
!	  RKR 20-OCT-79
! 1-008 - Check for COB$_USE_EXIT by using LIB$MATCH_COND.
!	  RKR 22-OCT-79
! 1-009 - Make arguments to LIBMATCHCOND be by REF.  RKR 31-OCT-79
! 1-010 - Add code to resignal a COBOL-specific error message if
!	  signal is SS$_ROPRAND and associated opcode was
!	  CVTTP or CVTSP.  RKR 21-NOV-79
! 1-011 - Correct resignaling code.  RKR 27-NOV-79
! 1-012 - Added abstract, functional description, comments and made
!	  cosmetic changes.  Added code that breaks up the CASE code
!	  for a USE procedure condition value into the appropriate types -
!	  file specific and mode specific.  This addition of code
!	  also involved introducing two new condition values and
!	  symbolic names for those values.  LB  3-MAR-81
! 1-013 - Added comments.  LB 09-MAR-81
! 1-014 - Added code for handling a data base USE procedure condition
!	  code (as a result of the new routine COB$DBEXCEPTION).  Also
!	  changed the range of the CASE statement from 0-3 to 0-5 to
!	  account for new error conditions.  And added yet more
!	  comments.  LB  12-MAR-81
! 1-015 - Added code to check for the DB code (check that COB$B_USE_CODE
!	  equals COB$K_DBUSE_CODE) before searching for the DB entry.
!	  This code used to reside in routine COB$DBEXCEPTION.  LB  16-MAR-81
! 1-016 - Replaced arbitrary signalled values for USE procedure checking
!	  code with appropriate symbol names which are now defined in
!	  COBMSGDEF.  Added corresponding entries in the EXTERNAL LITERAL
!	  declarations for this module.  LB  24-MAR-81
! 1-017 - Changed names of the external literals to correspond to changes
!	  made in COBMSG.MDL.  Deleted call to LIB$MATCH_COND and changed
!	  the CASE stmt to a SELECTONE stmt.  Changed labels in the
!	  SELECTONE stmt (used to be a CASE) to be mnemonics instead of
!	  numbers.  Added comments.  LB  16-APR-81
! 1-018 - Deleted the external literals COB$_LSTHNDLOP and LSTHNDLFL and
!	  added LSTHNDUSE.  This was done as a result of a change made
!	  in COBOL regarding the scoping rules for USE procedures.  Also
!	  changed the macro name for the signalling arguments in the signal
!	  array to reflect changes made to COBDEF (the reference had been
!	  [COB$A_CHK_PROC] which has been changed and extended to the fields
!	  [COB$A_OPN_PROC] and [COB$A_FIL_PROC]).  LB  21-APR-81
! 1-019 - Entry point changed to COB$$HANDLER.  For some reason, it had
!	  remained a single $ entry point.  Resolves duplicate symbol
!	  problem with COBDHANDL.  LB 3-AUG-81
! 1-020 - Added external routine declaration for COB$HANDLER.  LB 4-AUG-81
!
! 1-021 - Added handling of SORT/MERGE signalled errors.  Currently
!	  using literal SORT_FAC_CODE until the literal SORT$_FACILITY
!	  is put into STARLET.  ER 16-MAR-84
! 1-022	- Move handling of SORT/MERGE errors to end of SELECTONE, and
!	  resignal the errors prefixed with the COB$_ERRDURSOR message.
!	  Remove unreferenced variables.  Change indentation, and reword the
!	  checks that validate the addresses of the USE lists.  Add comments.
!	  PDG 9-Apr-84
!--

!<BLF/PAGE>

!+
! SWITCHES
!-

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!+
! LINKAGES
!	NONE
!-

!+
! TABLE OF CONTENTS:
!-

FORWARD ROUTINE

! changed name to cob$$handler
	COB$$HANDLER;

!+
! INCLUDE FILES
!-

REQUIRE 'RTLIN:RTLPSECT';		! Macros for declaring psects
LIBRARY 'RTLSTARLE';			! RTL routines
REQUIRE 'RTLIN:COBDEF';			! COBOL specific RTL macros and literals

!+
! MACROS
!	NONE
!-

!+
! EQUATED SYMBOLS
!-

LITERAL
	CVTTP_OPCODE = %X'26',		! Opcode value for CVTTP instruction
	CVTSP_OPCODE = %X'09';		! Opcode value for CVTSP instruction

!+
! PSECT DECLARATIONS:
!-

DECLARE_PSECTS (COB);			! Psects for COB$ facility

!+
! EXTERNAL REFERENCES
!-

EXTERNAL ROUTINE
	LIB$STOP,
	LIB$SIGNAL,
	COB$$INVOKE_USE: NOVALUE,	! Invoke the USE procedure
	COB$HANDLER;

EXTERNAL LITERAL
	COB$_ERRDURSOR,
	COB$_NO_USEPRO,			! No USE procedure available - error on file !AS
	COB$_LSTHNDUSE,			! Lost handler for a USE procedure - environment corrupted !2(+)
	COB$_LSTHNDLDB,			! Lost handler for data base exception - environment corrupted !+
	COB$_USE_EXIT,			! Special signal from COB$$INVOKE_USE
	COB$_INVDECDAT;			! Invalid decimal data signal
LITERAL
	SORT$_FACILITY = 28;		! Delete when SORT$_FACILITY is in STARLET 1-021 ER

! changed name to cob$$handler
GLOBAL ROUTINE COB$$HANDLER(SIGNAL,MECHANISM)=


!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the error handler for COBOL error conditions.
!	It gets invoked as a result of a call to LIB$SIGNAL.
!
! CALLING SEQUENCE:
!
!	COB$$HANDLER (signal.rr.r, mechanism.rr.r)
!
! FORMAL PARAMETERS:
!
!	SIGNAL.rr.r	Address of vector of longwords indicating
!			nature of condition.
!
!	MECHANISM.rr.r	Address of vector of longwords indicating
!			the state of the process.
!
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
! NOTES:
!
!	The macro field references beginning with 'CHF' refer to
!	condition handling argument list offsets.
!
!--

    BEGIN

    MAP
	MECHANISM:	REF BLOCK[,BYTE],
	SIGNAL:		REF BLOCK[,BYTE];
    LOCAL
	CONDITION;	! Condition that was signalled
    LITERAL
	FALSE = 0,
	TRUE = 1;
!+
! Find out if it is a signal of interest.
!-


    CONDITION = .SIGNAL[CHF$L_SIG_NAME];	! Fetch condition value from signal array


!+
! Select appropriate action based on which one we have.
!-

    SELECTONE .CONDITION OF
	SET

	[COB$_USE_EXIT]:	! Special COBOL unwind signal

	    $UNWIND();		! Just unwind

	[SS$_ROPRAND]:		! Was a SS$_ROPRAND
	    BEGIN

	    LOCAL
		USER_PC;	! Program counter where exception took place

	    !+
	    ! Using the signal argument vector, extract the
	    ! program counter at the time the SS$_ROPRAND occurred.
	    ! The PC is the second-to-last argument in the signal vector.
	    ! Note that %BPVAL and %UPVAL are pre-declared BLISS literals
	    ! defining bits per BLISS value and units per BLISS value.
	    !-

	    USER_PC = .SIGNAL[ (.SIGNAL[CHF$L_SIG_ARGS]-1)*%UPVAL,0,%BPVAL,0 ];

	    !+
	    ! Check to see if a CVTTP or a CVTSP instruction
	    ! was the generator of the signal.  Note that the
	    ! PC is pointing to the instruction that caused the fault.
	    ! If the debugger had a breakpoint set on this instruction,
	    ! this check will fail, but that's okay.
	    !-

	    IF (  .(.USER_PC)<0,8> EQL CVTTP_OPCODE  OR
		  .(.USER_PC)<0,8> EQL CVTSP_OPCODE     )
	    THEN

		!+
		! Set the first longword of the signal argument
		! vector (the condition value field) to the condition
		! name we want the user to see, invalid decimal data.
		!-

		SIGNAL[CHF$L_SIG_NAME] = COB$_INVDECDAT;
	    END;

	!+
	! The following code handles the case of file specific
	! and open-mode specific GLOBAL USE procedure conditions.
	! Search through the entries for a match.  If there is a match,
	! then invoke the USE procedure and return SS$_CONTINUE;
	! otherwise, re-signal the error (return SS$_RESIGNAL).
	!-

	[COB$_LSTHNDUSE]:
	    BEGIN

	    LOCAL
		FP:		REF BLOCK[,BYTE],
		SFP:		REF BLOCK[,BYTE];	! Saved FP
	    REGISTER
		USE = 2:	REF BLOCK[,BYTE],	! Pointer to USE list
		USEENT = 3:	REF BLOCK[,BYTE];	! Pointer to USE list entry

	    FP = .MECHANISM[CHF$L_MCH_FRAME];		! Get FP of this program
	    SFP = .FP[SF$L_SAVE_FP];			! Get FP of program we want to look at
	    IF  BEGIN
		!+
		! This check is to ensure that the only way
		! you could get here is from a COBOL program.
		! Note that we check for COB$HANDLER, rather than COB$$HANDLER;
		! COB$HANDLER is the symbol that COBOL programs reference - it
		! may be in a transfer vector or a fixup section; ie, the frame
		! may not hold a direct reference to COB$$HANDLER.
		! Also, get the USE list.
		! Note that, if we get here, the USE list won't be zero.
		!-
		IF .SFP EQL 0 THEN FALSE
		ELSE IF .SFP[SF$A_HANDLER] NEQA COB$HANDLER THEN FALSE
		ELSE IF (USE = .SFP[COB$A_SF_USE]) EQL 0 THEN FALSE
		ELSE TRUE
		END
	    THEN
		BEGIN

		!+
		! Search for a USE procedure declared for the specific file
		! on which the exception occurred.  Note that the
		! COB$A_USE_FILES reference is the base of the 1st file
		! entry and COB$B_GUSE_COUNT is the count of global
		! file entries.
		!-

		USEENT = USE[COB$A_USE_FILES];	! Point to first file entry
		DECR I FROM .USE[COB$B_GUSE_COUNT]-1 TO 0 DO
		    BEGIN				! Loop over files
		    IF .USEENT[COB$A_USE_PROC] EQLA .SIGNAL[COB$A_FIL_PROC]
		    THEN
			BEGIN
			COB$$INVOKE_USE(		! Invoke USE
			    .USEENT[COB$A_USE_PROC],	! Addr of USE procedure
			    .USE,			! Ptr to USE list
			    .FP[SF$L_SAVE_AP],		! Argument pointer
			    .USEENT[COB$A_USE_EOPR],	! Addr of EOPR block
			    .USE[COB$A_USE_PNC]);	! Addr of Perform Nest Ctr
			RETURN SS$_CONTINUE;
			END;
		    USEENT = .USEENT + COB$S_USE_FILES;	! Step to next
		    END;


		!+
		! Open Mode Only.
		!
		! See if a procedure has been declared for the
		! open mode.  Note that COB$A_USE_MODES refers to
		! the base of the open mode entries.  There are four
		! open modes, i.e. INPUT, OUTPUT, I-O, and EXTEND.
		!-

		USEENT = USE[COB$A_USE_MODES];	! Point to first mode entry
		DECR I FROM 3 TO 0 DO
		    BEGIN				! Loop over modes

		    !+
		    ! The check here for EOPR not equal to zero is
		    ! to ensure that the program is a local one.  If
		    ! EOPR equals zero, then the USE procedure is an
		    ! up-level reference; then the original condition
		    ! that was signalled, should be re-signalled.
		    ! Else, if EOPR is not equal to zero and the USE
		    ! procedure has been found, then call COB$INV_USE.
		    !-

		    IF .USEENT[COB$A_USE_PROC] EQLA .SIGNAL[COB$A_OPN_PROC]
			AND .USEENT[COB$A_USE_EOPR] NEQ 0
		    THEN
			BEGIN
			COB$$INVOKE_USE(		! Invoke USE
			    .USEENT[COB$A_USE_PROC],	! Addr of USE procedure
			    .USE,			! Ptr to USE list
			    .FP[SF$L_SAVE_AP],		! Argument ptr
			    .USEENT[COB$A_USE_EOPR],	! Addr of EOPR block
			    .USE[COB$A_USE_PNC]);	! Addr of Perform Nest Ctr
			RETURN SS$_CONTINUE;
			END;
		    USEENT = .USEENT + COB$S_USE_MODES;	! Step to next
		    END;
		END;
	    END;

	!+
	! The following code handles the case of a Data Base
	! GLOBAL USE procedure condition.  Search through the COB$GDBUSE_CNT
	! entries and check for a match for the entry address with the
	! address of the USE procedure passed to this handler in the
	! signal argument vector.  If there is a match, then invoke the
	! USE procedure and return SS$_CONTINUE; otherwise, re-signal the
	! error (return SS$_RESIGNAL).
	!-

	[COB$_LSTHNDLDB]:
	    BEGIN

	    LOCAL
		FP:		REF BLOCK[,BYTE],
		SFP:		REF BLOCK[,BYTE];	! Saved FP
	    REGISTER
		USE = 2:	REF BLOCK[,BYTE],	! Ptr to Data Base USE list
		USEENT = 3:	REF BLOCK[,BYTE];	! Ptr to Data Base USE list entry

	    FP = .MECHANISM[CHF$L_MCH_FRAME];		! Get FP of this program
	    SFP = .FP[SF$L_SAVE_FP];			! Get FP of program we want to look at
	    IF  BEGIN
		!+
		! This check is to ensure that the only way
		! you could get here is from a COBOL program.
		! Also, get the DB USE list.
		!
		! Check if this is a DB USE list.
		! The COB$B_USE_CODE field should contain
		! the generic code for the class of data base
		! exceptions (equal to COB$K_DBUSE_CODE).
		! This allows new kinds of USE procedures to be added,
		! without requiring more longwords on the COBOL stack frame.
		!-
		IF .SFP EQL 0 THEN FALSE
		ELSE IF .SFP[SF$A_HANDLER] NEQA COB$HANDLER THEN FALSE
		ELSE IF (USE = .SFP[COB$A_DB_USE]) EQL 0 THEN FALSE
		ELSE IF .USE[COB$B_USE_CODE] NEQ COB$K_DBUSE_CODE THEN FALSE
		ELSE TRUE
		END
	    THEN
		BEGIN

		!+
		! Search for a USE procedure for the corresponding
		! Data Base exception.  Note that the COB$A_DB_USE
		! reference is the address of the data base entry while
		! COB$B_DBUSE_CNT is the count of global Data Base
		! USE procedures defined in the local program.
		!_

		USEENT = USE[COB$A_DBUSE_ENT];	! Point to 1st data base entry
		DECR I FROM .USE[COB$B_GDBUSE_CNT] - 1 TO 0 DO
		    BEGIN
		    IF .USEENT[COB$A_USE_PROC] EQLA .SIGNAL[COB$A_DBCHK_PROC]
		    THEN
			BEGIN
			COB$$INVOKE_USE (		! Invoke the USE procedure
			    .USEENT[COB$A_USE_PROC],	! Addr of DB USE procedure
			    .USE,			! Ptr to DB USE list
			    .FP[SF$L_SAVE_AP],		! Argument pointer
			    .USEENT[COB$A_USE_EOPR],	! Addr of EOPR block
			    .USE[COB$A_DBUSE_PNC]);	! Addr of Perform Nest Ctr
			RETURN SS$_CONTINUE;
			END;
		    USEENT = .USEENT + COB$S_DBUSE;	! Step to next entry
		    END;
		END;
	    END;

	!+
	! Check for other errors that are handled specially.
	! Currently, these only include errors from Sort/Merge.
	!-

	[OTHERWISE]:				! No match occurred
	    BEGIN
	    MAP
		CONDITION:	BLOCK[,BYTE];	! Condition that was signalled

	    !+
	    ! Is it a SORT/MERGE error signal?
	    !-
	    IF  .CONDITION[STS$V_FAC_NO] EQL SORT$_FACILITY
	    THEN
		BEGIN
		IF .CONDITION[STS$V_SEVERITY] LSS STS$K_SEVERE
		THEN
		    BEGIN
		    !
		    ! These errors are continuable.
		    !
		    RETURN SS$_CONTINUE		! Ignore the error
		    END
		ELSE
		    BEGIN
		    !
		    ! Resignal the error, prefixing the Cobol-specific
		    ! error message, and removing the PC and PSL.
		    !
		    ! Note that, although we don't need to increase the size
		    ! of the SIGNAL vector, we can't use it for the new signal,
		    ! since we musn't just mung the PC and PSL in this vector.
		    !
		    ! We assume that ARG_K_SIZE longwords suffice.  If not,
		    ! the displayed message will look tacky, that's all.
		    !
		    LITERAL ARG_K_SIZE = 12;		! Should be large enough
		    LOCAL ARGS:	VECTOR[ARG_K_SIZE];
		    BUILTIN CALLG;

		    ARGS[0] = MINU(.SIGNAL[CHF$L_SIG_ARGS], ARG_K_SIZE-1);
		    ARGS[1] = COB$_ERRDURSOR;
		    ARGS[2] = 0;

		    CH$MOVE(.ARGS[0] * %UPVAL	! Everything ...
			    - 2*%UPVAL,		! Less bytes for PC and PSL
			SIGNAL[CHF$L_SIG_NAME],
			ARGS[3]);
		    CALLG( ARGS[0], LIB$STOP );

		    RETURN SS$_CONTINUE		! Ignore the original error

		    END;
		END;
	    END;

	TES;

    !+
    ! Resignal the error if the signalled condition was not one
    ! of the expected conditions to be handled.  Also resignal the
    ! error if a USE procedure wasn't found or if the error had been
    ! a SS$_ROPRAND since the signal name has been changed.
    !-

    RETURN SS$_RESIGNAL
    END;

END
ELUDOM
