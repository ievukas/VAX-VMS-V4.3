	.TITLE	PAS$SQR - Return Square of Value
	.IDENT	/1-001/			; File: PASSQR.MAR Edit: SBL1001

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Pascal Language Support
;
; ABSTRACT:
;
;	This module contains six routines which return the square of
;	their argument.
;
; ENVIRONMENT: Runs at any access mode, AST Reentrant
;
; AUTHOR: Steven B. Lionel, CREATION DATE: 6-Nov-1980
;
; MODIFIED BY:
;
; 1-001	- Original. SBL 6-Nov-1980
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
	$SFDEF			; Stack frame definitions
	$PSLDEF			; Processor status longword definitions
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL		; Force all external symbols to be declared
;	NONE
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _PAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	PAS$SQR_L - Return square of a signed longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine returns the square of a signed longword
;
; CALLING SEQUENCE:
;
;	Result.wl.v = PAS$SQR_L (Long.rl.r)
;
; FORMAL PARAMETERS:
;
;	Long	- Signed longword argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The square of the argument
;
; SIDE EFFECTS:
;
;	SS$_INTOVF	- Integer overflow
;
;--

	.ENTRY	PAS$SQR_L, ^M<IV>	; Integer overflow must be enabled

	MULL3	@4(AP), @4(AP), R0	; Compute result
	RET				; End of routine PAS$SQR_L

	.SBTTL	PAS$SQR_LU - Return square of an unsigned longword
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine returns the square of an unsigned longword
;
; CALLING SEQUENCE:
;
;	Result.wlu.v = PAS$SQR_LU (Long.rlu.r)
;
; FORMAL PARAMETERS:
;
;	Long	- Unsigned longword argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The square of the argument
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	PAS$SQR_LU, ^M<>	; Integer overflow must be disabled

	MULL3	@4(AP), @4(AP), R0	; Compute result
	RET				; End of routine PAS$SQR_LU

	.SBTTL	PAS$SQR_F - Return square of an F_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine returns the square of an F_floating value.
;
; CALLING SEQUENCE:
;
;	Result.wf.v = PAS$SQR_F (Single.rf.r)
;
; FORMAL PARAMETERS:
;
;	Single	- F_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The square of the argument
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND	- if the argument is a reserved operand
;	SS$_FLTOVF	- floating overflow trap
;	SS$_FLTOVF_F	- floating overflow fault
;	SS$_FLTUND	- floating underflow trap if caller has enabled FU
;	SS$_FLTUND_F	- floating underflow fault if caller has enabled FU
;
;--

	.ENTRY	PAS$SQR_F, ^M<>		; Entry point

	BBC	#SF$V_FU, SF$W_SAVE_PSW(FP), 10$	; Skip if FU disabled
	BISPSW	#PSL$M_FU		; Enable FU because caller did
10$:	MULF3	@4(AP), @4(AP), R0	; Compute square
	RET				; End of routine PAS$SQR_F

	.SBTTL	PAS$SQR_D - Return square of a D_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine returns the square of a D_floating value.
;
; CALLING SEQUENCE:
;
;	Result.wd.v = PAS$SQR_D (Double.rd.r)
;
; FORMAL PARAMETERS:
;
;	Double	- D_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The square of the argument
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND	- if the argument is a reserved operand
;	SS$_FLTOVF	- floating overflow trap
;	SS$_FLTOVF_F	- floating overflow fault
;	SS$_FLTUND	- floating underflow trap if caller has enabled FU
;	SS$_FLTUND_F	- floating underflow fault if caller has enabled FU
;
;--

	.ENTRY	PAS$SQR_D, ^M<>		; Entry point

	BBC	#SF$V_FU, SF$W_SAVE_PSW(FP), 10$	; Skip if FU disabled
	BISPSW	#PSL$M_FU		; Enable FU because caller did
10$:	MULD3	@4(AP), @4(AP), R0	; Compute square
	RET				; End of routine PAS$SQR_D

	.SBTTL	PAS$SQR_G - Return square of a G_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine returns the square of a G_floating value.
;
; CALLING SEQUENCE:
;
;	Result.wg.v = PAS$SQR_G (Double.rg.r)
;
; FORMAL PARAMETERS:
;
;	Double	- G_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The square of the argument
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND	- if the argument is a reserved operand
;	SS$_FLTOVF_F	- floating overflow fault
;	SS$_FLTUND_F	- floating underflow fault if caller has enabled FU
;
;--

	.ENTRY	PAS$SQR_G, ^M<>		; Entry point

	BBC	#SF$V_FU, SF$W_SAVE_PSW(FP), 10$	; Skip if FU disabled
	BISPSW	#PSL$M_FU		; Enable FU because caller did
10$:	MULG3	@4(AP), @4(AP), R0	; Compute square
	RET				; End of routine PAS$SQR_G

	.SBTTL	PAS$SQR_H - Return square of an H_floating
;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine returns the square of an H_floating value.
;
; CALLING SEQUENCE:
;
;	CALL PAS$SQR_H (Result.wh.r, Quad.rh.r)
;
; FORMAL PARAMETERS:
;
;	Result	- H_floating result
;	Quad	- H_floating argument
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; ROUTINE VALUE:
;
;	The square of the argument
;
; SIDE EFFECTS:
;
;	SS$_ROPRAND	- if the argument is a reserved operand
;	SS$_FLTOVF_F	- floating overflow fault
;	SS$_FLTUND_F	- floating underflow fault if caller has enabled FU
;
;--

	.ENTRY	PAS$SQR_H, ^M<>		; Entry point

	BBC	#SF$V_FU, SF$W_SAVE_PSW(FP), 10$	; Skip if FU disabled
	BISPSW	#PSL$M_FU		; Enable FU because caller did
10$:	MULH3	@8(AP), @8(AP), @4(AP)	; Compute square
	RET				; End of routine PAS$SQR_H

	.END				; End of module PAS$SQR
