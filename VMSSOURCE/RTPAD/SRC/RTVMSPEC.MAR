	.TITLE	RTVMSPEC - RTPAD/CTERM VMS specific protocol
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; FACILITY:
;
; ABSTRACT:
;
;
; ENVIRONMENT:
;
;
;--
;
; AUTHOR: Jake VanNoy, CREATION DATE: 5-Jan-83
;
; MODIFIED BY:
;
;	V03-003	JLV0291		Jake VanNoy		28-JUL-1983
;		Changes to align this module with ECO's specified in
;		January for CTERM extensions.
;
;	V03-002	JLV0238		Jake VanNoy		29-MAR-1983
;		Change name of module from CTVMSQIO.
;
;	V03-001	MHB0090		Mark Bramhall		 2-Mar-1983
;		Added correct .PSECT usage.
;**


	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$RTPADDEF
	$TSADEF

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

	.PSECT	_RTPAD,LONG		; Read/Write data

QREGISTERS:
QR1:		.BLKL	1
QR2:		.BLKL	1
QR3:		.BLKL	1
QR4:		.BLKL	1
QR5:		.BLKL	1
QR6:		.BLKL	1
QCHAN:		.BLKL	1
QFUNC:		.BLKL	1

	.PSECT	RTPAD,NOWRT		; Code

	.SBTTL	CTERM_VMSQIO - Handle VMS Qio

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Take VAX/VMS "mode message" and format it into a QIO.
;	*** This module may also handle RTPAD/TTMODExxx interactions.
;
; CALLING SEQUENCE:
;	BSBW	CTERM_VMSQIO
;
; INPUT PARAMETERS:
;	R0 	- AST BLOCK
;	R1-R6 	- zero
;	R7	- READCHAN
;	R8	- uninitialized
;	R11	- data block
;
; IMPLICIT INPUTS:
;	WRITECHAN
;	
;
; OUTPUT PARAMETERS:
;	R0	- preserved
;	R1-R6	- P1-P6 of QIO
;	R7	- channel number
;	R8	- function code
;	R11	- preserved
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

CTERM_VMSQIO::	

	CLRQ	W^QR1			; Initialize outputs
	CLRQ	W^QR3			;
	CLRQ	W^QR5			;
	MOVL	R7,W^QCHAN		; Save
	CLRL	W^QFUNC			; 
	CLRL	AST$L_ODATA(R0)		; assume no buffer

	MOVZWL	CTP$W_MSGSIZE(R11),R9	; Get length of message
	SUBL2	#<CTP$W_VMS_PLEN-CTP$B_MSGTYPE>,R9 
					; minus overhead

	CMPW	#CTP$C_MT_VMSQIO,-
    		CTP$B_MSGTYPE(R11)	; Compare to VMS QIO
	BEQL	20$

; *** Alternate mode must be handled here ***

	; MINOR_ERROR
	PUSHL	#shr$_valerr
	CALLS	#1,G^LIB$SIGNAL		; error ***
	; *** what to do here?

	;
	; VMS mode qio
	; 
20$:
	MOVZWL	CTP$W_VMS_FUNC(R11),-
		W^QFUNC			; Function code
	MOVAB	CTP$W_VMS_PLEN(R11),R10	; Get address of first paramter
	ADDL2	R10,R9			; end address = base + size 
	;
	; Loop through paramter descriptors
	;
PARAM_LOOP:
	CMPL	R9,R10			; address at or past end ?
	BLEQ	200$			; Branch if run out of data
	MOVZWL	VMS$W_PLEN(R10),R8	; Get length

	BBC	#CTP$V_VMS_BUFFER,-
    		VMS$W_PFLAGS(R10),35$	; branch if data is present
;
; This is a return buffer, must supply buffer
;
	PUSHL	R0			; Save
	BSBW	GETBUF			; Get buffer
	MOVL	R0,R2			; Move address to R2
	POPL	R0			; Restore
	MOVAB	CTP$T_VMS_RDATA(R2),R1	; Set address
	MOVL	R2,AST$L_ODATA(R0)	; save address of buffer
	MOVW	R8,CTP$W_VMS_PLEN(R11)	; Save requested length ***
	clrl	r8			; *** null data...
	BRB	40$			; Skip 
35$:	
	MOVAB	VMS$T_PDATA(R10),R1	; Assume passed by reference
	BBS	#CTP$V_VMS_REF,-
    		VMS$W_PFLAGS(R10),40$	; Branch if passed by referernce
	MOVL	VMS$T_PDATA(R10),R1	; Set data
40$:	
	; *** assumes qio parameter, should use flag #1 to validate

	MOVZWL	VMS$W_PCODE(R10),R2	; Fetch paramter number (PCODE ???)
	MOVAB	W^QREGISTERS,R3		; base address
	MOVL	R1,-4(R3)[R2]		; set value

	MOVAB	VMS$T_PDATA(R10),R10	; add offset to R10
	ADDL2	R8,R10			; Add size of data field
	BRW	PARAM_LOOP		; Loop

200$:	; return to do qio

	MOVQ	W^QR1,R1		; Set outputs
	MOVQ	W^QR3,R3		;
	MOVQ	W^QR5,R5		;
	MOVQ	W^QCHAN,R7		; 
	RSB

	.SBTTL	CT_VMSQIO_DONE - complete VMS qio

;++
;
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;	NONE
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--

CT_VMSQIO_DONE::

;
; *** should validate that this is a VAX QIO mode message
; 
	DECL	WRITEQIO		; 
	TSTL	CTP$L_VMS_REQID(R11)	; response expected?
	BNEQ	110$			; branch if yes
	BRW	VMSQIO_DONE_EXIT	; done
110$:
	MOVL	AST$L_ODATA(R0),R3	; Buffer address
	BNEQ	120$			; Branch if there is one (data returned)
	;
	; There is no data to return, only status (i.e. IOSB)
	;
	PUSHL	R0			; Save R0
	BSBW	GETBUF			; Get buffer to write to net with
	MOVL	R0,R3			; Set address
	POPL	R0			; Retstore R0
	;
	; Intialize header of message to be written and copy IOSB
	;
120$:
	MOVZBW	#PRO$C_DATA,-
		CTP$B_PRO_MSGTYPE(R3)	; mode message, clear flags
	MOVZBW	#CTP$C_MT_VMSQIO,-
		CTP$B_MSGTYPE(R3)	; qio request message
	MOVL	CTP$L_VMS_REQID(R11),-
		CTP$L_VMS_REQID(R3)	; Set request ID
	MOVQ	AST$Q_IOSB(R0),-
		CTP$Q_VMS_IOSB(R3)	; set iosb
	;
	; set up for writing to net, calculate length
	;
	MOVZBL	#<CTP$T_VMS_RDATA-CTP$B_MSGTYPE>,R1
					; Size of message up to data
	TSTL	AST$L_ODATA(R0)		; Was data returned from QIO?
	BEQL	140$			; Branch if not, IOSB only
	BBS	#CTP$V_VMS_USEIOSB,-
		CTP$B_VMS_FLAGS(R11),125$ ; Branch if should use IOSB for len
	MOVZWL	CTP$W_VMS_PLEN(R11),-(SP) ; fetch length requested
	ADDL2	(SP)+,R1		  ; add to overhead
	BRB	140$
	;
	; There are two types of IOSB's to understand to calculate length
	; of the data returned. The host driver has set the READLEN flag
	; if the format is (IOSB+2)+(IOSB+6), otherwise, length is
	; contained in (IOSB+2), as in a WRITE QIO.
	;
125$:
	BBC	#CTP$V_VMS_READLEN,-
    		CTP$B_VMS_FLAGS(R11),130$ ; Branch if right 
	ADDW2	AST$Q_IOSB+6(R0),R1	; len is (IOSB+2)+(IOSB+6)
130$:
	ADDW2	AST$Q_IOSB+2(R0),R1	; add in (IOSB+2)
140$:
	MOVAB	CTP$B_PRO_MSGTYPE(R3),R2 ; Address of message

VMSQIO_DONE_EXIT:
	RSB


	.SBTTL	XXX -

;++
;
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;	NONE
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


;	.ENTRY	XXX,^M<>


	.END
