	.TITLE	INQUIRE - INQUIRE DCLS COMMAND EXECUTION
	.IDENT	'V04-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; W. H. BROWN 28-JUN-1977
;
; INQUIRE DCLS COMMAND EXECUTION
;
; MODIFIED BY:
;
;	V03-007	PCG0008		Peter George		18-Jan-1984
;		Preserve R5 across calls to input routines.
;
;	V03-006	PCG0007		Peter George		12-Jul-1983
;		Fix bug in prompt string parsing.
;		Validate symbol length.
;
;	V03-005	PCG0006		Peter George		27-May-1983
;		Tighten symbol name checking.
;
;	V03-004	PCG0005		Peter George		13-Apr-1983
;		Insert CR/LF before the prompt string.
;
;	V03-003	PCG0004		Peter George		17-Feb-1983
;		Remove reference to $CLIDEFQUALINQU.
;		Use PTR_B_NUMBER to get qualifier numbers.
;
;	V03-002	PCG0003		Peter George		03-Dec-1982
;		Correct bug chopping off first character of the prompt.
;
;	V03-001	PCG0002		Peter George		23-Nov-1982
;		Use prompt descriptor instead of WRK_L_PROMPT.
;---

;
; MACRO LIBRARY CALLS
;
 
	PRCDEF				; DEFINE PROCESS WORK AREA
	WRKDEF				; DEFINE COMMAND WORK AREA
	PTRDEF				; DEFINE RESULT PARSE DESCRIPTOR
	SYMDEF				; DEFINE TYPES OF SYMBOLS
	$CLIMSGDEF			; DEFINE ERROR/STATUS CODES

	.SBTTL	INQUIRE COMMAND 
;+
; DCL$INQUIRE - INQUIRE COMMAND
;
; THIS ROUTINE IS CALLED AS AN INTERNAL COMMAND TO EXECUTE THE INQUIRE
;	DCLS COMMAND.
;
; INPUTS:
;
;	R8 = ADDRESS OF SCRATCH BUFFER DESCRIPTOR.
;	R9 = ADDRESS OF SCRATCH STACK.
;	R10 = BASE ADDRESS OF COMMAND WORK AREA.
;	R11 = BASE ADDRESS OF PROCESS WORK AREA.
;
; OUTPUTS:
;
;
;	R0 LOW BIT CLEAR INDICATES COMMAND FAILURE
;
;	R0 LOW BIT SET INDICATES SUCCESSFUL COMPLETION.
;
;		R0 = DCL$_NORMAL - NORMAL COMPLETION.
;-
 
	.PSECT	DCL$ZCODE,BYTE,RD,NOWRT
 
TERMS:	.ASCII	\ /\<0>			; VALID TERMINATORS-BLANK, SLASH, EOL
PUNC:	.ASCIC	/: /			; TRAILING PUNCTUATION
 
DCL$INQUIRE::				; INQUIRE COMMAND
	MOVAB	PUNC,R4			; ASSUME TO BE PUNCTUATED
	MOVAB	PRC_Q_LOCAL(R11),R5	; SET DEFAULT TABLE ADDRESS
	BSBW	100$			; HANDLE QUALIFIERS IF PRESENT
	CMPB	#^A/ /,R0		; TERMINATE WITH A SPACE?
	BEQL	20$			; IF EQL YES
8$:	BRW	80$			; ELSE REPORT ERROR
9$:	STATUS	SYMLNG			; ASSUME SYMBOL IS TOO LONG
10$:	BRW	90$			;
20$:	BSBW	DCL$MARK		; MARK CURRENT PARSE POSITION
	BSBW	DCL$MOVTOKN		; GET THE SYMBOL NAME TOKEN INTO BUFFER
	BEQL	8$			; BR IF NO SYMBOL NAME
	CMPL	R1,#255			; SYMBOL NAME TOO LARGE?
	BGTRU	9$			; IF GTRU YES
	MOVQ	R1,R7			; SAVE DESCRIPTOR FOR SYMBOL
	LOCC	R0,#3,TERMS		; CHECK FOR VALID TERMINATOR
	BEQL	8$			; BR IF INVALID TERMINATOR
	BSBW	DCL$CHKALPHA		; VERIFY THAT IT IS ACCEPTABLE
	BLBC	R0,10$			; BR IF NO-REPORT ERROR
	BSBW	100$			; ATTEMPT TO CHANGE THE TABLE ASSIGNMENT
	LOCC	R0,#3,TERMS		; CHECK FOR VALID TERMINATOR
	BEQL	8$			; BR IF NO-SYNTAX ERROR
	BSBW	DCL$MOVCHAR		; MOVE DELIMITER (SPACE OR EOL)
	BNEQ	30$			; BRANCH IF PROMPT SPECIFIED
	MOVQ	R7,R1			; NO PROMPT-GET DESCRIPTOR FOR SYMBOL
	INCL	R1			; ADD 1 FOR TERMINATOR
	TSTL	R4			; PUNCTUATION REQUIRED?
	BEQL	57$			; IF EQL NO
	BRB	50$			; IF NEQ YES

30$:	BSBW	DCL$MARK		; MARK CURRENT PARSE POSITION
40$:	BSBW	DCL$MOVCHAR		; COPY A BYTE INTO THE EXPANSION BUFFER
	BBS	#WRK_V_QUOTE,WRK_W_FLAGS(R10),40$  ; WHILE WITHIN QUOTES
	CMPB	R0,#^X20		; BLANK DETECTED OUTSIDE QUOTES?
	BEQL	8$			; YES, THEN SYNTAX ERROR
	TSTL	R0			; END OF LINE?
	BNEQ	40$			; NO, CONTINUE
	BSBW	DCL$MARKEDTOKEN		; GET DESCRIPTOR OF STRING
	DECL	R1			; DISCOUNT EOL CHARACTER

50$:	PUSHL	R4			; SAVE PUNCTUATION INDICATOR
	BSBW	DCL$COMPRESS		; COMPRESS THE STRING
	POPL	R4			; RETRIEVE PUNC. INDICATOR - ANY REQUIRED?
	BEQL	57$			; IF EQL, NO
	ADDB	(R4)+,R1		; ADD LENGTH OF PUNCTUATION
	MOVL	WRK_L_EXPANDPTR(R10),R0	; GET EXPANSION BUFFER POINTER
	MOVB	(R4)+,(R0)+		; MOVE FIRST BYTE TO EOL MARKER
	MOVZBL	(R4),(R0)+		; MOVE IN 4 MORE BYTES OF IT
	ADDL	#5,WRK_L_EXPANDPTR(R10)	; INCREMENT EXPANSION POINTER

57$:	CMPL	R1,#WRK_C_SCRSTKSIZ-2	; WILL STRING FIT IN PROMPT BUFFER?
	BGTRU	75$			; NO, THEN SIGNAL ERROR
	MOVW	R1,WRK_W_PMPTLEN(R10)   ; SET PROMPT STRING LENGTH
	MOVAB	-WRK_C_SCRSTKSIZ(R9),R9	; GET BASE OF SCRATCH STACK
	MOVL	R9,WRK_L_PMPTADDR(R10)	; SET PROMPT STRING POINTER
	MOVW	#^X0A0D,(R9)		; MOVE CR/LF ONTO THE SCRATCH STACK
	ADDW	#2,WRK_W_PMPTLEN(R10)	; ADD IN LENGTH OF CR/LF
	PUSHL	R5			; SAVE SYMBOL TABLE ADDRESS
	MOVC3	R1,(R2),2(R9)		; MOVE PROMPT ONTO THE SCRATCH STACK
	SETBIT	WRK_V_INQUIRE,WRK_W_FLAGS(R10) ; INDICATE DOING A INQUIRE
	SETBIT	PRC_V_IND,PRC_W_FLAGS(R11)     ; DISABLE INDIRECT RECOGNITION
	BSBW	DCL$FORNBLK		; MAKE AN INPUT HAPPEN
	BSBW	DCL$MARK		; MARK CURRENT POSITION IN BUFFER
60$:	BSBW	DCL$MOVCHAR		; GET THE ANSWER
	BNEQ	60$			; UNTIL END OF LINE
	BSBW	DCL$MARKEDTOKEN		; GET DESCRIPTOR OF STRING
	DECL	R1			; REMOVE COUNT FOR EOL
	BEQL	70$			; BR IF NULL STRING IS THE ANSWERE
	BSBW	DCL$COMPRESS		; COMPRESS QUOTES
70$:	MOVQ	R7,R3			; SET DESCRIPTOR FOR SYMBOL
	MOVL	#SYM_K_STRING,R0	; SET TYPE IS STRING
	POPL	R5			; RESTORE SYMBOL TABLE ADDRESS
	BISW	#PRC_M_DISABL,PRC_W_FLAGS(R11) ; DISABLE CONTROL Y/C AST'S
	BRW	DCL$ALLOCSYM		; CREATE THE SYMBOL DEFINTION
;
; COMMAND ERROR
;
75$:	STATUS	BUFOVF			; BUFFER OVERFLOW
	BRB	90$			;
80$:	STATUS	PARMDEL			; ERROR STATUS
90$:	RSB				; RETURN WITH ERROR

;
; LOCAL SUBROUTINE TO PROCESS QUALIFIERS
;
;	OUTPUTS:
;		R0 = TERMINATING CHARACTER
;		R4 = 0 IF /NOPUNCTUATION
;			ADDRESS OF PUNCTUATION STRING IF /PUNCT
;		R5 = ADDRESS OF GLOBAL SYMBOL TABLE DESCRIPTOR
;			IF /GLOBAL SPECIFIED.
;			ADDRESS OF LOCAL SYMBOL TABLE IF /LOCAL
;
100$:	BSBW	DCL$SETCHAR		; PEEK AT NEXT CHARACTER IN INPUT
	BSBW	DCL$MARK		; MARK CURRENT PARSE POSITION
	CMPB	R0,#^A\/\		; QUALIFIER?
	BNEQ	120$			; BR IF NO QUALIFIER IN SIGHT
	PUSHR	#^M<R4,R5,R9>		; SAVE INDICATORS
	BSBW	DCL$PROCQUAL		; PROCESS THE QUALIFIER
	POPR	#^M<R4,R5,R9>		; RETRIEVE INDICATORS
	BLBC	R0,110$			; BR IF ERROR IN QUALIFIER
	SUBL3	#PTR_C_LENGTH,WRK_L_RSLNXT(R10),R1 ; ADDRESS OF PREVIOUS TOKEN DESCRIPTOR
	CMPB	PTR_B_NUMBER(R1),#CLI$K_INQU_PUNC ; PUNCTUATION QUALIFIER?
	BNEQ	105$			; IF NEQ NO
	BBC	#PTR_V_NEGATE,(R1),102$	; BRANCH IF NOT NEGATED?
	CLRL	R4			; INDICATE NO PUNCTUATION
	BRB	100$
102$:
	MOVAB	PUNC,R4			; SET PUNC STRING ADDRESS
	BRB	100$
105$:
	CMPB	PTR_B_NUMBER(R1),#CLI$K_INQU_GLOB ; GLOBAL QUALIFIER?
	BNEQ	107$			; IF NEQ NO
	MOVAB	PRC_Q_GLOBAL(R11),R5	; SET PROPER TABLE ADDRESS
	BRB	100$			; TRY FOR MORE
107$:
	CMPB	PTR_B_NUMBER(R1),#CLI$K_INQU_LOCA ; LOCAL QUALIFIER?
	BNEQ	100$			; IF NEQ NO, IGNORE IT
	MOVAB	PRC_Q_LOCAL(R11),R5	; SET LOCAL SYMBOL TABLE
	BRB	100$
110$:	TSTL	(SP)+			; CLEAR RETURN ADDRESS
120$:	RSB				; RETURN TO CALLER
 
	.END
