MODULE RM3POSKEY (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 index sequential file organization
!
! ABSTRACT:
!                This module positions to a record by key value.
!
!
! ENVIRONMENT:
!
!		VAX/VMS Operating System
!
!--

!
! AUTHOR:        Todd M. Katz		RE-CREATION DATE:	17-Jan-83
!
!
! MODIFIED BY:
!
!	V03-007 TSK0001		Tamar Krichevsky	15-Jun-1983
!		Change addressing mode for RM$RU_RECLAIM to long relative.
!
!	V03-006 MCN0002		Maria del C. Nasr	22-Mar-1983
!		More changes in the linkages
!
!	V03-005 MCN0001		Maria del C. Nasr	24-Feb-1983
!		Reorganize linkages
!
!	V03-004	TMK0003		Todd M. Katz		17-Jan-1983
!		Re-write the routines within this module adding support for
!		Recovery Unit Journalling and RU ROLLBACK Recovery of ISAM
!		files.
!		
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! Define default PSECTS for code.
!
PSECT
    CODE = RM$RMS3(PSECT_ATTR),
    PLIT = RM$RMS3(PSECT_ATTR);

! Linkages.
!
LINKAGE
    L_RABREG_67,
    L_PRESERVE1;

! External Routines.
!
EXTERNAL ROUTINE
    RM$CSEARCH_TREE	: RL$RABREG_67,
    RM$GETNEXT_REC	: RL$RABREG_67,
    RM$RLSBKT		: RL$PRESERVE1,
    RM$RU_RECLAIM	: RL$RABREG_67 ADDRESSING_MODE( LONG_RELATIVE ),
    RM$SEARCH_SIDR	: RL$RABREG_67;

GLOBAL ROUTINE RM$POS_KEY : RL$RABREG_67 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is responsible for positioning to the first non-deleted
!	primary data record that matches the key in keybuffer 2 according to
!	a well-defined set of search characterictics.
!
!	If RMS encounters a record that is marked RU_DELETE and the Recovery 
!	Unit in which the record was deleted it still active, then RMS returns
!	this record as the non-deleted primary data record and lets a higher
!	level routine decide what to do. If the Recovery Unit in which the 
!	record was deleted has successfully terminated, then RMS will continue
!	its search for a non-deleted primary data record after deleting this
!	RU_DELETEd record (the latter if it has write access to the file).
!
!	If RMS encounters a record that is marked RU_UPDATE and is in a special
!	format then RMS will return this record as the non-deleted primary data
!	record after reformatting it. The reformatting is done if RMS has write
!	access to the file, and the Recovery Unit in which it was updated has
!	has successfully terminated.
!	
! CALLING SEQUENCE:
!
!	RM$POS_KEY()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	IDX_DFN			- address of current index descriptor
!	    IDX$B_KEYREF	- key of reference
!
!	IFAB			- address of IFAB
!	    IFB$V_WRTACC	- if set, file is open for write access
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	IRAB
!	    IRB$L_CURBDB	- address of BDB for current primary data bucket
!	    IRB$W_RFA_ID	- ID of current record (primary only)
!	    IRB$L_RFA_VBN	- VBN of current record
!	    IRB$B_STOPLEVEL	- 0
!
!	REC_ADDR		- address of primary data record
!
! ROUTINE VALUE:
!
!	RNF	- unable to position to a primary data record by key value.
!	SUC	- successfully positioned to a primary data record by key value.
!
! SIDE EFFECTS:
!
!	On success, REC_ADDR points to the non-deleted primary data record
!	    and the BDB of the primary data bucket maybe found in IRB$L_CURBDB.
!	On failures, all accessed buckets are released.
!	If RU_DELETEd records are encountered, they might have been deleted.
!	If RU_UPDATEd records are encountered, they might have been reformatted.
!
!--

    BEGIN

    BUILTIN
	AP;

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    ! Initialize several variables, and then position to the (primary or 
    ! secondary) data record by key value.
    !
    IRAB[IRB$B_STOPLEVEL] = 0;
    IRAB[IRB$L_CURBDB] = 0;
    IRAB[IRB$W_SAVE_POS] = 0;

    RETURN_ON_ERROR (RM$CSEARCH_TREE());

    ! If RMS is to position by primary key, then position to the first 
    ! non-deleted primary data record whose primary key matches the search key
    ! according to the characteristics of the search.
    !
    IF .IDX_DFN[IDX$B_KEYREF] EQLU 0
    THEN
	BEGIN

	WHILE   (.REC_ADDR[IRC$V_DELETED]
		 OR
		.REC_ADDR[IRC$V_RU_DELETE])
	DO
	    BEGIN

	    ! If RMS finds that the current record has been deleted within a 
	    ! Recovery Unit, then it subjects this record to further processing
	    ! before deciding whether to return this record as the non-deleted 
	    ! primary data record, or to continue with the search.
	    !
	    IF .REC_ADDR[IRC$V_RU_DELETE]
	    THEN
		BEGIN

		LOCAL
		    RECORD_ID : WORD,
		    STATUS;

		RECORD_ID = .REC_ADDR[IRC$W_ID];

		! If RMS finds that Recovery Unit in which this record was 
		! locked is still active or the file has nor been opened for
		! write access, then RMS can not delete this record. If another 
		! stream has the current record locked, RMS returns the record 
		! as the non-deleted primary data record, and lets a higher 
		! level routine decide what to do with it. However, if it is 
		! the current stream that has the record locked, or if the
		! current stream is able to lock the record but does not have
		! write access to the file, then RMS considers the current 
		! record to be deleted, and positions to the next record in 
		! order to continue the search.
		!
		IF NOT (STATUS = RM$RU_RECLAIM())
		THEN
		    IF .STATUS<0,16> EQLU RMSERR(RLK)
		    THEN
			EXITLOOP
		    ELSE
			RM$GETNEXT_REC()

		! If RMS is able to reclaim only some of the space occupied 
		! by the current primary data record it proceeds to 
		! position to the next record; otherwise, it is already 
		! positioned there.
		!
		ELSE
		    IF .RECORD_ID EQLU .REC_ADDR[IRC$W_ID]
		    THEN
			RM$GETNEXT_REC();
		END

	    ! If the current record is marked deleted, then continue the search
	    ! for a non-deleted primary data record with the next record in the
	    ! bucket.
	    !
	    ELSE
		RM$GETNEXT_REC();

	    ! The previous records RMS has looked at were all deleted. If the
	    ! record RMS has positioned to matches the key in keybuffer 2
	    ! according to the search characteristics then continue with the
	    ! search to see if it too is marked deleted, or whether it maybe
	    ! returned as the non-deleted primary data record.
	    !
	    RETURN_ON_ERROR (RM$CSEARCH_TREE());
	    END;

	! RMS has found a record to return as the non-deleted primary data 
	! record. If this record was updated within a Recovery Unit, then 
	! re-format the record provided the Recovery Unit has completed and the
	! stream has write access to the file.
	!
	IF .REC_ADDR[IRC$V_RU_UPDATE]
	    AND
	   .IFAB[IFB$V_WRTACC]
	    AND
	   NOT .REC_ADDR[IRC$V_RU_DELETE]
	THEN
	    RM$RU_RECLAIM();

	! RMS has found a record to return. Extract the record's ID and the
	! VBN of the bucket it is in for use in updating the NRP, and then
	! return success.
	!
	IRAB[IRB$W_RFA_ID] = IRC$_ID(REC_ADDR);
	IRAB[IRB$L_RFA_VBN] = .BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_VBN];
	RETURN RMSSUC();
	END;

    ! RMS is to position to a non-deleted primary data record by an alternate
    ! key value.
    !
    BEGIN

    LOCAL
	STATUS;

    ! Search all the SIDR arrays whose keys match the key in keybuffer 2 
    ! according to the characteristics of the search until either a non-deleted
    ! primary data record is found, or all SIDRs with appropriate keys are
    ! exhausted.
    !
    STATUS = RM$SEARCH_SIDR();

    IF .STATUS<0, 16> EQL RMSERR(RNF)
    THEN
	BEGIN

	GLOBAL REGISTER
	    R_BDB_STR;

	IF .IRAB[IRB$L_CURBDB] NEQ 0
	THEN
	    RELEASE(IRAB[IRB$L_CURBDB]);
	END;

    RETURN .STATUS

    END;

    END;

END

ELUDOM
