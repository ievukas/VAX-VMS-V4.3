	$BEGIN	RM1PUTBLD,000,RM$RMS1,<SEQ. ORG. PUT TO BLOCK DEVICE>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: RMS32
;
; Abstract:
;		This routine is called by RM1PUT to handle the
;		blocking of records required when doing $PUTS to
;		a block device.
;
; Environment:
;		Star processor running Starlet exec.
;
; Author: L. F. Laverdure	 Creation Date: 25-MAR-1977
;
; Modified By:
;
;	V03-009	JWT0190		Jim Teague		31-Jul-1984
;		Undo JEJ0049 temporarily until some unexpected side
;		effects can be better understood.
;
;	V03-008	JEJ0049		J E Johnson		23-Jul-1984
;		Alter the BLDREC logic to force the current buffer to be
;		flushed when it is exactly filled, rather than waiting
;		for the next operation to force it out.
;
;	V03-007	DAS0002		David Solomon		28-Jun-1984
;		Don't get the RSZ from the user's RAB after we've stalled. It
;		may change.
;
;	V03-006	DAS0001		David Solomon		08-Feb-1984
;		Re-lay out code to improve performance for sequential VAR case.
;		Some formatting cleanup.
;
;	V03-005	TSK0052		Tamar Krichevsky	22-Jun-1983
;		Fix broken branch to RM$SEQJNL.
;
;	V03-004	TSK0051		Tamar Krichevsky	30-May-1983
;		Add support for journaling of $PUT operations.
;
;	V03-003	SHZ0001		Stephen H. Zalewski	17-Dec-1982
;		Fix assume statement to reflect change in ifb.  Change
;		way eof is updated from MOVC to MOVL.
;
;	V03-002	KBT0144		Keith B. Thompson	20-Aug-1982
;		Reorganize psects
;
;	V03-001	RAS0090		Ron Schaefer		8-Jun-1982
;		Fix potential bugcheck caused by having the NRP_OFF
;		be odd-aligned for VAR and VFC files.
;
;	V02-024	CDS0001		C Saether		3-Nov-1981
;		Fix broken branch.
;
;	V02-023	RAS0028		Ron Schaefer		20-Aug-1981
;		Change FAB$C_STM11 to FAB$C_STM.
;
;	V02-022	RAS0027		Ron Schaefer		20-Aug-1981
;		Do not pad UDF files to magtape.
;
;	V02-021	RAS0025		Ron Schaefer		18-Aug-1981
;		Add support for $PUT to UDF files.
;
;	V02-020	RAS0019		Ron Schaefer		6-Aug-1981
;		Fix block padding algorithm for magtape and stream.
;
;	V02-019	RAS0016		Ron Schaefer		31-Jul-1981
;		Add stream format support.
;
;	V02-018	REFORMAT	K. E. Kinnear		31-Jul-1980	9:04
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IFBDEF
	$DEVDEF
	$IRBDEF
	$RABDEF
	$FABDEF
	$IMPDEF
	$BDBDEF
	$RMSDEF
    	$RJRDEF

;
; Equated Symbols:
;
    	ROP=RAB$L_ROP*8
	LF=10
	CR=13
;
; Own Storage:
;

;
; Stream format default terminators (DFT)
;
STM_FMT_DFT:
	.BYTE	2, CR, LF, 0
	.BYTE	1, LF,  0, 0
	.BYTE	1, CR,  0, 0
	

	.SBTTL	RM$PUT_BLK_DEV - ROUTINE TO PERFORM SEQ. ORG PUT TO FILES DEVICE

;++
; RM$PUT_BLK_DEV -- Routine to Performa Seq. Organization Put to Files Device.
;
;	This module performs the $put record processing for
;	the sequential file organization to a files-oriented
;	(i.e., blocked) device, performing the required record
;	blocking.
;
; Calling Sequence:
;
;	BSBW	RM$PUT_BLK_DEV
;
; Input Parameters:
;
;	R11	impure area addr
;	R10	IFAB addr
;	R9	IRAB addr
;	R8	rab addr
;	R6	record data length in bytes
;	R5	record address
;
; Implicit Inputs:
;
;	Sequential org temp.
;		IRB$W_ROVHDSZ:	record overhead size in bytes
;		IRB$W_RTOTLSZ:	total record length including
;				overhead bytes
;	First block of user buffer probed
;	Record size checked for validity
;
; Output Parameters:
;
;	R0	status code
;	R1-R7	destroyed
;
; Implicit Outputs:
;
;	RAB$W_RFA
;	Updates IRAB and bdb(s) as per the put.
;
; Completion Codes:
;
;	standard rms
;
; Side Effects:
;
;	none
;
;--

SEQJNL_BR:
	BRW	SEQJNL
CHKBLK1_BR:
	BRW	CHKBLK1
ANSIZE_BR:
	BRW	ANSIZE

RM$PUT_BLK_DEV::
	$TSTPT	PUTBLD

;
; For non-magtape devices, fix potential odd-aligned NRP_OFF values,
; for VAR and VFC files.
;

	BBS	#DEV$V_SQD,-		; don't worry if tape
		IFB$L_PRIM_DEV(R10),6$
	CMPB	IFB$B_RFMORG(R10),-	; VAR format?
		#FAB$C_VAR
	BEQL	5$			; yes
	CMPB	IFB$B_RFMORG(R10),-	; or VFC?
		#FAB$C_VFC
	BNEQ	6$			; not VFC or VAR
5$:	INCW	IRB$W_NRP_OFF(R9)	; round offset
	BICW2	#1,IRB$W_NRP_OFF(R9)

;
; The following code causes the current buffer to be set up correctly
; dependent upon whether the corresponding block must be read or not.
;

6$:	CLRL	R3			; indicate read required
	TSTW	IRB$W_NRP_OFF(R9)	; check for non-zero offset
	BNEQ	20$			; and branch if so
	INCL	R3			; zero offset - flag no read required
20$:	BSBW	RM$GETBLKNRP		; get the block
	BLBC	R0,ZERO_RFA_BR2		; continue if successful

;
; Current register contents:
;
;	R8-R11	same as upon entry
;	R7	end of block addr + 1
;	R6	data record size
;	R5	data record addr
;	R4	bdb addr
;	R1	addr of block buffer
;

;
; Make R1 into addr of location to build the record.
;

PUT00:	ADDL2	IRB$L_NRP_OFF(R9),R1	; make into address

;
; Set rp from nrp.
;

	MOVQ	IRB$L_NRP_VBN(R9),IRB$L_RP_VBN(R9)

;
; Compute # bytes left in block and check for fit
; if records not allowed to cross block boundaries.
;

	SUBL3	R1,R7,R0		; compute # bytes remaining
	BBS	#FAB$V_BLK,-		; branch if boundary restrictions
		IFB$B_RAT(R10),-
		CHKBLK1_BR

;
; If journaling is enabled for this file, create and write the journal entry
; for the current record.
;

CHKJNL:	TSTB	IFB$B_JNLFLG(R10)	; Any journaling enabled?
	BNEQ	SEQJNL_BR		; yes, journal record

;
; Build record starting at the address noted in R3.
;

BUILD:	TSTW	IRB$W_ROVHDSZ(R9)	; any overhead size?
	BEQL	MOVREC			; branch if none

;
; Rec format is not fixed.
; Must write out size field if ANSI, or var or vfc.
;

	BBS	#IFB$V_ANSI_D,(R10),-	; branch if ansi
		ANSIZE_BR

;
; Store binary size field.
;

SETSIZ:	ASSUME	FAB$C_VFC GT FAB$C_VAR
	ASSUME	FAB$C_STM GT FAB$C_VFC
	CMPB	IFB$B_RFMORG(R10),-	; stream format?
		#FAB$C_STM
	BGEQU	MOVREC			; no prefix for stream
	CMPL	R0,#2			; room for count?
	BLSS	N_BLK_BR		; nope
	SUBW3	#2,IRB$W_RTOTLSZ(R9),-	; store size of data + rhb
		(R1)+

;
; If vfc format store record header data.
;

CHKVFC:	CMPB	IFB$B_RFMORG(R10),-	; is it vfc?
		#FAB$C_VFC
	BEQL	VFCRH_BR

;
; Now move the data record.
;

MOVREC:	BSBW	BLDREC			; go move it
ZERO_RFA_BR2:				; branch aid
	BLBC	R0,ZERO_RFA_BR		; get out on error

;
; Now append DFT to stream format if necessary
;

	ASSUME	FAB$C_UDF EQ 0
	ASSUME	FAB$C_STM GT FAB$C_VFC
	ASSUME	<FAB$C_STM+1> EQ FAB$C_STMLF
	ASSUME	<FAB$C_STMLF+1> EQ FAB$C_STMCR

	MOVZBL	IFB$B_RFMORG(R10),R5	; get format type
	BEQL	20$			; skip to not round for UDF
	SUBL2	#FAB$C_STM,R5		; normalize type
	BLSSU	10$			; not stream format
	TSTW	IRB$W_ROVHDSZ(R9)	; anything to add?
	BEQL	20$			; nope
	MOVAL	W^STM_FMT_DFT[R5],R5	; point to DFT table
	MOVZBL	(R5)+,R6		; get length
	BSBW	BLDREC			; append the DFT
	BLBC	R0,ZERO_RFA_BR		; quit on failure
	BRB	20$			; rejoin main flow

;
; PUT operation now complete.
; Calculate new value for nrp.
;
; Round up to word boundary unless stream or magtape.
;

10$:	BBS	#DEV$V_SQD,-
		IFB$L_PRIM_DEV(R10),20$	; branch if magtape
	INCL	R1			; round up
	BICL2	#1,R1			; round up
20$:	MOVL	IRB$L_CURBDB(R9),R4	; get current bdb
	SUBL3	BDB$L_CURBUFADR(R4),-	; save offset in nrp
		R1,IRB$L_NRP_OFF(R9)
	SUBL3	R1,R7,R0		; set r0 to # of bytes remaining in block
	BEQL	BLK_FULL_BR		; and branch if full

;
; Make sure there is sufficient room in block for
; ansi_d byte count or entire fixed length record if
; records not allowed to cross block boundaries.
;

	BBS	#FAB$V_BLK,-		; branch if boundary restriction
		IFB$B_RAT(R10),-
		CHKBLK2_BR

;
; Update eof data in IFAB.
;

PUT01:	MOVL	IRB$L_NRP_VBN(R9),-	; update ebk
		IFB$L_EBK(R10)
	MOVW	IRB$W_NRP_OFF(R9),-	; update first free byte in block
		IFB$W_FFB(R10)
	SSB	#IFB$V_RW_ATTR,(R10)	; flag rewrite of attr. needed

;
; Update largest record in file.
;

	SUBW3	IRB$W_ROVHDSZ(R9),-	; get actual record size
		IRB$W_RTOTLSZ(R9),-	;
		R0			;
	CMPW	R0,IFB$W_LRL(R10)	; new largest?
	BLEQU	10$			; branch if not
	MOVW	R0,IFB$W_LRL(R10)	; yes - save size

;
; Return rfa to user and exit.
;

10$:	ASSUME	IRB$W_RP_OFF EQ IRB$L_RP_VBN+4
	MOVQ	IRB$L_RP_VBN(R9),-	; return RFA to user
		RAB$W_RFA(R8)
	BRW	RM$EXSUC		; exit with success

;
; Branch aids.
;

ZERO_RFA_BR:
	BRW	ZERO_RFA
N_BLK_BR:
	BRB	N_BLK
VFCRH_BR:
	BRB	VFCRH
BLK_FULL_BR:
	BRW	BLK_FULL
CHKBLK2_BR:
	BRW	CHKBLK2
CHKJNL_BR:
	BRW	CHKJNL
PUT00_BR:
	BRW	PUT00

;
; Check for fit if records not allowed to cross block boundaries.
;

CHKBLK1:
	CMPW	IRB$W_RTOTLSZ(R9),R0	; does record fit?
	BLEQU	CHKJNL_BR		; branch if yes
N_BLK:	BSBW	RM$PADBLK1		; pad out block if necc.
	MOVL	#1,R3			; flag no read required
	BSBW	RM$NXTBLK1		; call & return from next block routine
	BLBS	R0,PUT00_BR		; and continue if ok.
	BRW	ZERO_RFA		; get out on error

;
; Size field is ansi_d format, i.e., 4-decimal ascii bytes.
;

ANSIZE:	MOVL	#3,R0			; counter for 4 digits
	MOVZWL	IRB$W_RTOTLSZ(R9),R2	; get total record size
	CLRL	R3			; zero extend  "
10$:	EDIV	#10,R2,R2,AP		; divide out next digit
	ADDB3	#^A/0/,AP,(R1)[R0]	; convert to ascii and store
	SOBGEQ	R0,10$			; continue if more
	ADDL2	#4,R1			; advance past count
	BRW	CHKVFC			; and continue

;
; Process vfc record header.
;

VFCRH:	MOVQ	R5,-(SP)		; save record addr & size
	MOVZBL	IFB$B_FSZ(R10),R6	; get header length
	BBC	#FAB$V_PRN,IFB$B_RAT(R10),RHBADR; branch if not print file

	ASSUME	IMP$W_RMSSTATUS EQ 0
	ASSUME	IMP$V_IIOS EQ 0

	BLBS	(R11),RHBADR		; branch if image io seg.

;
; This is a process-permanent 'print' file.
; Use the connect-set rat from isi and convert the specified
; carriage control to print file format and store in rhb.
;

	OFF=<RAB$W_ISI*8>+RAB$V_PPF_RAT	; define offset to isi rat

	BBS	#FAB$V_PRN+OFF,(R8),RHBADR; branch if 'prn'
	BBS	#FAB$V_CR+OFF,(R8),1$	; branch if 'cr'
	BBC	#FAB$V_FTN+OFF,(R8),ZERO_RHB; branch if not 'ftn'

;
; Fortran carriage control:
; interpret fortran carriage control byte in record and convert to prn format.
;

	TSTL	4(SP)			; zero length record?
	BEQL	1$			; branch if yes (lf-rec-cr)
	DECL	4(SP)			; decr size of record
	DECW	-2(R1)			; decr size of record in buffer
	BBC	#IFB$V_ANSI_D,(R10),10$	; branch if not ansi magtape
	DECW	IRB$W_RTOTLSZ(R9)	; decrement total record size
	TSTL	-(R1)			; back up to length field
	BSBB	ANSIZE			; store adjusted record length
10$:	MOVB	(R5),R0			; get fortran byte
	INCL	(SP)			; and incr rec addr
	BSBW	RM$MAPFTN		; map fortran to pre/post format
	BRB	2$

;
; LF - record - CR carriage control required.
;

1$:	MOVW	#1+<<128+13>@8>,R2	; lf-rec-cr in pre/post
2$:	MOVW	R2,RAB$L_STV(R8)	; copy carriage ctl to stv area

;
; No record header specified so zero it.
;

ZERO_RHB:
	PUSHL	R6			; save rhb size
ZERO_RHB1:
	MOVAL	RAB$L_STV(R8),R5	; get address of 4 zero bytes
	CMPL	R6,#4			; rhb > 4 bytes?
	BLEQU	SETVFC			; branch if not
	MOVL	#4,R6			; just move 4 bytes this time
SETVFC:	SUBL2	R6,(SP)			; adjust remaining count
	BSBW	BLDREC			; move the zeroes
	BLBC	R0,30$			; branch on error
	CLRL	RAB$L_STV(R8)		; re-zero stv
	MOVL	(SP),R6			; get remaining count
	BNEQ	ZERO_RHB1		; and continue if not done
30$:	TSTL	(SP)+			; pop temporary count
	BRB	CHKERR

;
; Handle bad record header buffer.
;

ERRRHB:	RMSERR	RHB			; change error code
	BRB	ZERO_RFA		; & get out

;
; Get address of record header buffer and process it.
;

RHBADR:	MOVL	RAB$L_RHB(R8),R5	; get address
	BEQL	ZERO_RHB		; branch if none
	IFNORD	R6,(R5),ERRRHB		; probe it

;
; Move the fixed header and reprobe user buffer.
;

	BSBB	BLDREC			; just like normal record
CHKERR:	MOVQ	(SP)+,R5		; restore user buffer regs
	BLBC	R0,ZERO_RFA		; get out on error
	BSBW	RM$PROBEREAD		; reprobe it
	BLBC	R0,ZERO_RFA
	BRW	MOVREC			; move the data record

;
; Check for fit if records not allowed to cross block boundaries.
;

CHKBLK2:
	CMPB	IFB$B_RFMORG(R10),-	; fixed format?
		#FAB$C_FIX
	BEQL	FIXRFM			; branch if yes
	BBC	#IFB$V_ANSI_D,(R10),-	; branch if not ansi
		PUT01_BR		;  as there is at least
					;  the required word left
	CMPL	R0,#4			; ansi d requires 4 bytes min.
	BGEQ	PUT01_BR		; a.o.k.
	BRB	BLK_FULL

;
; Make sure there is room for fixed length record.
;

FIXRFM:	CMPW	R0,IFB$W_LRL(R10)
	BGEQU	PUT01_BR		; branch if sufficient room

;
; This block is full or at least the next record can't possibly
; fit in it, so change to next block.
;

BLK_FULL:
	BBS	#DEV$V_RND,-		; branch if disk
		IFB$L_PRIM_DEV(R10),-
		B_FULL
	BSBW	RM$PADBLK1		; pad out buffer
	MOVL	#1,R3			; flag no read required
	BSBW	RM$NXTBLK1		; call & return from next block routine
	BLBS	R0,PUT01_BR		; continue if ok
	BRW	ZERO_RFA		; process error
B_FULL:	INCL	IRB$L_NRP_VBN(R9)	; bump vbn
	CLRW	IRB$W_NRP_OFF(R9)	; and zero offset
	INCB	BDB$B_REL_VBN(R4)	; increment relative vbn
	BICB2	#BDB$M_VAL,-		; make invalid
		BDB$B_FLGS(R4)
PUT01_BR:
	BRW	PUT01			; rejoin code

;
; Error during put - zero rfa and exit.
;

ZERO_RFA:
	CLRL	RAB$W_RFA(R8)
	CLRW	RAB$W_RFA+4(R8)

;
; Restore IRB$L_NRP_VBN and IRB$L_NRP_OFF  to the ebk and ffb values
; since $PUT failed and the next $PUT may succeed.
;

	MOVL	IFB$L_EBK(R10),IRB$L_NRP_VBN(R9)
	MOVW	IFB$W_FFB(R10),IRB$W_NRP_OFF(R9)
	CLRW	IRB$W_CSIZ(R9)		; make sure there is no current
					; record, in case anyone wants to
					; try an update
	BRW	RM$EXRMS

;++
; BLDREC -- Build Record Routine.
;
; This subroutine moves a record from the user record buffer
; to the rms i/o buffer, crossing block boundaries as needed.
;
; Calling Sequence:
;
;	BSBW	BLDREC
;
; Input Parameters:
;
;	R11	impure area address
;	R10	ifab address
;	R9	irab address
;	R8	rab address
;	R7	end of block address + 1
;	R6	# of bytes in record
;	R5	address of record (source)
;	R1	address in rms i/o buffer (destination)
;
; Implicit Inputs:
;
;	The contents of the various structures,
;	in particular, IRB$L_CURBDB.
;
; Output Parameters:
;
;	R1	address of byte following the moved record
;		in rms i/o buffer
;	R0	status code
;	R2-R6	destroyed
;
; Implicit Outputs:
;
;	BDB$B_FLGS - marked dirty
;	IRB$L_CURBDB - updated if block boundary crossed
;
;	IRB$L_NRP_VBN - updated if block boundary crossed
;	IRB$W_NRP_OFF - updated if block boundary crossed
;
; Completion Codes:
;
;	standard rms.
;
; Side Effects:
;
;	If i/o stall occurs will have changed to
;	running at ast level; reprobing any non-rab
;	user address will be required.
;--


BLDREC:
	SUBL3	R1,R7,R0		; get # bytes left in buffer
	CMPL	R0,R6			; < record size?
	BLEQU	20$			; branch if so
	MOVL	R6,R0			; no - just use buffer size
20$:	SUBL2	R0,R6			; adjust remaining count
	MOVC3	R0,(R5),(R1)		; move (partial) record to buffer
	MOVL	IRB$L_CURBDB(R9),R4	; get current bdb
	BISB2	#BDB$M_VAL!BDB$M_DRT,BDB$B_FLGS(R4); say valid & dirty
	TSTL	R6			; done?
	BEQL	40$			; branch if yes
	PUSHL	R1			; save source addr
	MOVL	#1,R3			; flag no read required
	BSBW	RM$NXTBLK1		; call & return from next block routine
	POPL	R5			; restore source addr
	BLBC	R0,50$			; get out on error
	BSBW	RM$PROBEREAD		; reprobe user buffer
	BLBS	R0,BLDREC		; and go again if no error
	RSB

;
; Move to buffer is complete.
;

;40$:	CMPL	R7,R3			; Did we exactly fill the buffer?
;	BEQL	60$			; If they're equal then yes we did.
40$:	MOVL	R3,R1			; next byte pointer to correct reg.
	RMSSUC				; indicate success
50$:	RSB

;60$:	MOVL	#1,R3			; flag no read required
;	BSBW	RM$NXTBLK1		; call & return from next block routine
;	BLBC	R0,50$			; get out on error
;	BSBW	RM$PROBEREAD		; reprobe user buffer
;	RSB

;++
; Journal record.
;
; Be sure the record will be written to the current record postion.  The count
; field cannot span block boundaries.  So, if the record has a byte_count prefix
; (VAR or VFC format), at least two bytes must remain in the buffer.  If there
; is not enough room, don't journal the record yet.  The RFA which we have in
; hand is not correct.
;	
; ************ NOTE:  When journaling is permitted for magtape devices, the
; ************        next section of code will have to be modified.
;--

ZERO_RFA_BR1:
	BRW	ZERO_RFA

SEQJNL:	ASSUME	FAB$C_VFC GT FAB$C_VAR
	ASSUME	FAB$C_STM GT FAB$C_VFC

	TSTW	IRB$W_ROVHDSZ(R9)	; Any overhead for the record
    	BEQL	5$			; No, then no byte-count prefix
	CMPB	IFB$B_RFMORG(R10),-	; Stream format?
		#FAB$C_STM
	BGEQU	5$			; Yes, stream has no prefix
	CMPL	R0,#2			; Room for count?
	BGEQ	5$			; Yes, continue
	BRW	BUILD			; No, get next possible record position

;
; The record will be written at the current record position.  
;

5$:	PUSHR	#^M<R0,R1>		; Yes, save # bytes in blk, nxt byte ptr
	BBC	#<RAB$V_TPT + ROP>, -	; Was this the TPT bit set?
		  (R8), 10$
	PUSHL	#RJR$_TPT		; Yes, operation is $PUT w/ truncate
	BRB	15$			; Set up journal entry & write it out
10$:	PUSHL	#RJR$_PUT		; Operation to be journaled is a $PUT
15$:	JSB	RM$SEQJNL		; Journal record
	MOVL	R0, R2			; Save the status
	ADDL2	#4, SP			; Remove argument from stack
	POPR	#^M<R0,R1>		; Restore # bytes in blk & next byte ptr
	BLBC	R2, ZERO_RFA_BR1	; Clean up and exit on error
	BRW	BUILD			; rejoin main path

;++
; RM$PADBLK1 -- Pad Out Buffer Routine.
;
; Inputs:
;	R1	address in buffer to start padding
;	R0	# bytes left in block
;	R4	bdb address
;	R10	ifab address
;
; Outputs:
;
;	Block padded, if needed, and marked dirty
;	R0-R3	destroyed
;--

RM$PADBLK1::
	CLRL	R2			; NUL padding for stream
	MOVB	IFB$B_RFMORG(R10),R3	; get record format (set CCs)
	BBS	#IFB$V_ANSI_D,(R10),-
		PADANS			; branch if ansi d
	CASE	TYPE=B,SRC=R3,-		; dispatch on rfm
		LIMIT=#FAB$C_UDF -
		DISPLIST=<-
		PADBLK,-		; UDF (pads like STMx)
		PADXIT,-		; FIX
		PADVAR,-		; VAR
		PADVAR,-		; VFC
		PADBLK,-		; STM
		PADBLK,-		; STMLF
		PADBLK>			; STMCR

;
; Var or vfc record format and not ansi.
; Just put a -1 in word pointed at by r1.
;

PADVAR:	MNEGW	#1,(R1)			; end block flag

;
; Flag block dirty and return
;

PADIRT:	BISB2	#BDB$M_VAL!BDB$M_DRT,BDB$B_FLGS(R4)
PADXIT:	RSB

;
; pad out the block
;
PADANS:	BEQL	PADXIT			; UDF is not padded on tape
	MOVB	#^A\^\,R2		; set ansi padding
PADBLK:	PUSHR	#^M<R4,R5>		; save regs
	MOVC5	#0,(SP),R2,R0,(R1)	; pad it
	POPR	#^M<R4,R5>		; restore regs
	BRB	PADIRT

	.END
