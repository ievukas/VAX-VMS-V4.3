	.title	pli$getlistitem
	.ident	/1-002/					; Edit WHM1002
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;

;++
; facility:
;
;	VAX/VMS PL1 runtime library
;
; abstract:
;
;	This module contains the pl1 runtime routines to get items from
;	pl1 stream file under list directed i/o.
;
;
; author: c. spitz 28-nov-79
;
; modified:
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;--

;
; external definitions
;
	$deffcb				;define file control block
	$defstk				;define stack frame offsets
	$defstr				;define stream block offsets
	$defdat				;define operand node data types
	$defgetopt			;define get options block
	$defcvtind			;define convert indices
	$rabdef				;define rms rab offsets
	$rmsdef				;define rms error codes

; 
; local data
;

	rtshare			;sharable


;++
; pli$getl****
; 
; the pli$getl**** routines are called by the compiled code to get items
; from a stream input file under list directed transmission. each routine
; saves the target item descriptor, calls pli$$getnlis_r6 to get the
; next field, and then calls pli$cvrt_cg_r3 to store the item in the target.
;--


;pli$getlchar_r6
; inputs:
;	r0 - address of element to get
;	r1 - size/precision
pli$getlchar_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursive flag
	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getnlis_r6	;get input field
	movq	(sp)+,r2		;get destination back
	tstl	r0			;skip field?
	beql	20$			;if eql, then yes
	addl	#cvt_k_dst_char,r4	;set for char dest
	calls	#0,g^pli$cvrt_cg_r3	;convert field to dest
20$:	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursive flag
	rsb				;return

;pli$getlvcha_r6
; inputs:
;	r0 - address of element to get
;	r1 - size/precision
pli$getlvcha_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursive flag
	clrw	(r0)			;clear length
	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getnlis_r6	;get input field
	movq	(sp)+,r2		;get destination back
	tstl	r0			;skip field?
	beql	20$			;if eql, then yes
	addl	#cvt_k_dst_vcha,r4	;set for vcha dest
	calls	#0,g^pli$cvrt_cg_r3	;convert field to dest
20$:	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursive flag
	rsb				;return

;pli$getlfixb_r6
; inputs:
;	r0 - address of element to get
;	r1 - size/precision
pli$getlfixb_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursive flag
	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getnlis_r6	;get input field
	movq	(sp)+,r2		;get destination back
	tstl	r0			;skip field?
	beql	20$			;if eql, then yes
	addl	#cvt_k_dst_fixb,r4	;set for fixb dest
	calls	#0,g^pli$cvrt_cg_r3	;convert field to dest
20$:	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursive flag
	rsb				;return

;pli$getlfixd_r6
; inputs:
;	r0 - address of element to get
;	r1 - size/precision
pli$getlfixd_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursive flag
	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getnlis_r6	;get input field
	movq	(sp)+,r2		;get destination back
	tstl	r0			;skip field?
	beql	20$			;if eql, then yes
	addl	#cvt_k_dst_fixd,r4	;set for fixd dest
	calls	#0,g^pli$cvrt_cg_r3	;convert field to dest
20$:	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursive flag
	rsb				;return

;pli$getlbit_r6
; inputs:
;	r0 - address of element to get
;	r1 - size/precision
;	r2 - offset of target
pli$getlbit_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursive flag
	movq	r0,-(sp)		;save destination
	pushl	r2			;save offset
	jsb	g^pli$$getnlis_r6	;get input field
	popl	r6			;set offset of dest
	movq	(sp)+,r2		;get destination back
	tstl	r0			;skip field?
	beql	20$			;if eql, then yes
	addl	#cvt_k_dst_bit,r4	;set for bit dest
	calls	#0,g^pli$cvrt_cg_r3	;convert field to dest
20$:	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursive flag
	rsb				;return

;pli$getlabit_r6
; inputs:
;	- address of element to get
;	- size/precision
pli$getlabit_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursive flag
	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getnlis_r6	;get input field
	movq	(sp)+,r2		;get destination back
	tstl	r0			;skip field?
	beql	20$			;if eql, then yes
	addl	#cvt_k_dst_abit,r4	;set for abit dest
	calls	#0,g^pli$cvrt_cg_r3	;convert field to dest
20$:	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursive flag
	rsb				;return

;pli$getlfltb_r6
; inputs:
;	- address of element to get
;	- size/precision
pli$getlfltb_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursive flag
	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getnlis_r6	;get input field
	movq	(sp)+,r2		;get destination back
	tstl	r0			;skip field?
	beql	20$			;if eql, then yes
	addl	#cvt_k_dst_fltb,r4	;set for fltb dest
	calls	#0,g^pli$cvrt_cg_r3	;convert field to dest
20$:	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursive flag
	rsb				;return

;pli$getlfltd_r6
; inputs:
;	- address of element to get
;	- size/precision
pli$getlfltd_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursive flag
	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getnlis_r6	;get input field
	movq	(sp)+,r2		;get destination back
	tstl	r0			;skip field?
	beql	20$			;if eql, then yes
	addl	#cvt_k_dst_fltd,r4	;set for fltd dest
	calls	#0,g^pli$cvrt_cg_r3	;convert field to dest
20$:	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursive flag
	rsb				;return


;pli$getlpic_r6
; inputs:
;	- address of element to get
;	- size/precision
pli$getlpic_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursive flag
	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getnlis_r6	;get input field
	movq	(sp)+,r2		;get destination back
	tstl	r0			;skip field?
	beql	20$			;if eql, then yes
	addl	#cvt_k_dst_pic,r4	;set for pic dest
	calls	#0,g^pli$cvrt_cg_r3	;convert field to dest
20$:	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursive flag
	rsb				;return

	.end
