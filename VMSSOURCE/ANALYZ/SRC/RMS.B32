%title 'RMS - Main Module for ANALYZE/RMS_FILE'
	module rms	(main=anl$rms,
			ident='V04-000') = begin

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! Facility:	VAX/VMS Analyze Facility, Main Module for ANALYZE/RMS_FILE
!
! Abstract:	This is the main module for the ANALYZE/RMS_FILE command.
!		It contains the routine that determines which mode we are
!		to operate in.  It also contains routines that don't fit
!		anywhere else.
!
!
! Environment:
!
! Author: Paul C. Anagnostopoulos, Creation Date: 18 February 1981
!
! Modified By:
!
!	V03-003	DGB0046		Donald G. Blair		08-May-1984
!		Fix condition handling for ANALYZRMS so that it
!		returns status correctly upon image exit.  Rather
!		than always return anlrms$_notok, return the first
!		error that occurs of the highest severity.
!
!	V03-002	PCA1011		Paul C. Anagnostopoulos  1-Apr-1983
!		Change the message prefix to ANLRMS$_ to ensure that
!		message symbols are unique across all ANALYZEs.  This
!		is necessitated by the new merged message files.
!
!	V03-001	PCA1002		Paul C. Anagnostopoulos	25-Oct-1982
!		Add the ANL$PREPARE_QUOTED_STRING routine to format a
!		quoted string for inclusion in an FDL specification.
!		Add code for /SUMMARY mode.
!--

%sbttl 'Module Declarations'
!
! Libraries and Requires:
!

library 'lib';
require 'rmsreq';

!
! Table of Contents:
!

forward routine
	anl$rms: novalue,
	anl$unwind_handler,
	anl$worst_error_handler,
	anl$internalize_number,
	anl$check_flags: novalue,
	anl$prepare_quoted_string: novalue;

!
! External References:
!

external routine
	anl$check_mode,
	anl$fdl_mode,
	anl$format_error,
	anl$interactive_mode,
	cli$present: addressing_mode(general),
	lib$establish: addressing_mode(general),
	ots$cvt_ti_l: addressing_mode(general),
	ots$cvt_tz_l: addressing_mode(general);

!
! Global Variables:
!

global
	anl$gb_mode: byte, 	! current mode of operation
	anl$worst_error: 	! this contains either success status or if
	  initial(anlrms$_ok);	! errors occurred, it contains the first error
				! of the worst severity that occurred.

!
! Own Variables:
!


%sbttl 'ANL$RMS - Main Routine for ANALYZE/RMS_FILE'
!++
! Functional Description:
!	This is the main routine, entered when the user performs an
!	ANALYZE/RMS_FILE command.  We decide which mode of operation
!	has been requested and do it.
!
! Formal Parameters:
!	none
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$rms: novalue = begin

lib$establish(anl$worst_error_handler);

! See which mode the user has requested.  The default is /CHECK.

if cli$present(describe('FDL')) then (
	anl$gb_mode = anl$k_fdl;
	anl$fdl_mode();
)
else if cli$present(describe('INTERACTIVE')) then (
	anl$gb_mode = anl$k_interactive;
	anl$interactive_mode();
)
else if cli$present(describe('STATISTICS')) then (
	anl$gb_mode = anl$k_statistics;
	anl$check_mode();
)
else if cli$present(describe('SUMMARY')) then (
	anl$gb_mode = anl$k_summary;
	anl$check_mode();
)
else (
	anl$gb_mode = anl$k_check;
	anl$check_mode();
);

! if it was an interactive session, always return success.  otherwise 
! return worst error

if .anl$gb_mode eql anl$k_interactive then
	$exit(code=anlrms$_ok) 
else
	$exit(code=.anl$worst_error or sts$m_inhib_msg);

end;

%sbttl 'ANL$UNWIND_HANDLER - Unwind to Caller'
!+++
!
! Functional Description:
! 	This condition handler is established at various points
!	in analyzrms and allows the stack to be unwound 
!	and execution continued after any of an assortment 
!	of serious errors occurs.
!
! Formal Paramters:
!	signal_args = Address of signal argument list
!	mechanism_args = Address of mechanism argument list
!
! Implicit Inputs:
!	none
!
! Returned Value:
!	ss$_resignal	This was not an anlrms$_unwind condition.
!	ss$_continue	
!
! Side Effects:
!	anl$worst_error is updated with highest severity error.
!
!---

global routine anl$unwind_handler (signal_args, mechanism_args) = begin

map
    signal_args:	ref bblock,	! Address of signal argument list
    mechanism_args:	ref bblock;	! Address of mechanism argument list

local
    code:		bblock [long],	! Condition code (longword)
    status;

code = .signal_args [chf$l_sig_name];	! Get condition code

! If the condition is not anlrms$unwind, then we resignal it.

if .code nequ anlrms$_unwind then
    return ss$_resignal

! It's a drastic structure error.  We can no longer continue what we
! were doing.  In interactive mode, we want to return to user command
! level.  In check mode, we want to quit analyzing this file and
! go on to the next file.  In FDL mode, since there can only be 1
! file spec, we just quit.  In all cases, we put out an error message
! and back out by unwinding to the frame of the caller of the routine
! that called lib$establish.  Note that since we do not resignal 
! the error to allow anl$worst_error_handler to save the anl$worst_error, 
! we must save it here.

else (
    if   severity_level (.code) gtr 
         severity_level (.anl$worst_error)	! If higher than watermark
    then anl$worst_error = .code;		!  -then set new worst error

    anl$format_error(anlrms$_unwind);
    status=$unwind();
    check (.status,.status);
 
    return ss$_continue;
);

end;

%sbttl 'ANL$WORST_ERROR_HANDLER - Baddest error handler in the West'
!++
! Functional Description:
!	This condition handler is established by the main routine in 
!	analyzrms.  It gains control when any error is signaled except
!	for ANLRMS$_UNWIND, which is handled specially by the 
!	ANL$UNWIND_HANDLER.  If the error signaled is more severe than any
!	which has preceded it, save the error status as the 
!	anl$worst_error.  The resignal the error so the last-chance
! 	condition handler can get a crack at the error.
!
! Formal Paramters:
!	signal_args = Address of signal argument list
!	mechanism_args = Address of mechanism array
!
! Implicit Inputs:
!	none
!
! Returned Value:
!	ss$_resignal	Continue to search call frames.
!
! Side Effects:
!	anl$worst_error is updated with highest severity error.
!
!---

global routine anl$worst_error_handler (signal_args, mechanism_args) = begin

map
    signal_args:	ref bblock,	! Address of signal argument list
    mechanism_args:	ref bblock;	! Address of mechanism argument list

local
    code:		bblock [long];	! Condition code (longword)

code =	.signal_args [chf$l_sig_name];		! Get condition code
if   severity_level (.code) gtr 
    severity_level (.anl$worst_error)		! If higher than watermark
then anl$worst_error = .code;			!  -then set new worst error

return ss$_resignal;

end;

%sbttl 'ANL$INTERNALIZE_NUMBER - Convert String to Longword'
!++
! Functional Description:
!	This routine will convert the ASCII representation of a decimal
!	or hexadecimal number to a longword.  It is here for lack of a
!	better place.
!
! Formal Parameters:
!	string		Address of descriptor of ASCII number.  Decimal
!			numbers are just digits, while hexadecimal numbers
!			begin with %X or are enclosed in %X'...'.
!	longword	Address of longword in which to return value.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	True if number was valid, false if invalid.
!
! Side Effects:
!
!--


global routine anl$internalize_number(string,longword) = begin

bind
	string_dsc = .string: descriptor;

local
	status: long,
	sp: ref block[,byte],
	hex_dsc: descriptor;


! If the string is null, then it's invalid.

if .string_dsc[len] eqlu 0 then
	return false;

! Split up depending upon whether it's a decimal or hex number.

if ch$eql(minu(.string_dsc[len],2),.string_dsc[ptr], 2,uplit byte('%X'), ' ') then (

	! We have a hex number.  Build a descriptor of the actual digits.
	! If the third character is an apostrophe, then we must find the
	! matching apostrophe.

	if ch$rchar(.string_dsc[ptr]+2) eqlu '''' then (
		sp = ch$find_ch(.string_dsc[len]-3,.string_dsc[ptr]+3, '''');
		if .sp eqlu 0 then
			return false;
		build_descriptor(hex_dsc,.sp-.string_dsc[ptr]-3,.string_dsc[ptr]+3);
	) else
		build_descriptor(hex_dsc,.string_dsc[len]-2,.string_dsc[ptr]+2);
	status = ots$cvt_tz_l(hex_dsc,.longword,4,%b'1');

) else

	! We have a decimal number.  Convert it and return the status.

	status = ots$cvt_ti_l(string_dsc,.longword,4,%b'11');

return .status;

end;

%sbttl 'ANL$CHECK_FLAGS - Check Flag Usage'
!++
! Functional Description:
!	This routine is called to check the usage of flags in a flag
!	byte/word/longword.  This routine is here for no better place.
!
! Formal Parameters:
!	vbn		VBN of the bucket containing the flags.
!	flags		A longword containing the flags to be checked.
!	flag_def	A longword vector defining the valid flags.  The
!			zeroth longword contains the bit number of the
!			last valid flag.  The remaining longwords contain
!			zero if the flag is unused, non-zero otherwise.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$check_flags(vbn,flags,flag_def): novalue = begin

bind
	flags_vector = flags: bitvector[],
	flag_def_vector = .flag_def: vector[,long];

local
	i: long;


! We will simply sit in a loop scanning the flag bits.  If any flag is
! set but undefined, we will issue an error message.

incru i from 0 to 31 do (
	if .flags_vector[.i] then
		if .i lequ .flag_def_vector[0] then (
			if .flag_def_vector[.i+1] eqlu 0 then
				anl$format_error(anlrms$_flagerror,.vbn,.i)
		) else
			anl$format_error(anlrms$_flagerror,.vbn,.i);
);

return;

end;

%sbttl 'ANL$PREPARE_QUOTED_STRING - Prepare a Quoted String'
!++
! Functional Description:
!	This routine is called to prepare a quoted string for inclusion in
!	an FDL specification, or perhaps in a formatted message.  Preparing
!	the string includes stripping trailing whitespace, doubling any
!	quotation marks, and enclosing it in quotation marks.
!
! Formal Parameters:
!	input_dsc	Descriptor of buffer with input string.
!	output_dsc	Descriptor of buffer to receive output string.
!			The length is set correctly.
!
! Implicit Inputs:
!	global data
!
! Implicit Outputs:
!	global data
!
! Returned Value:
!	none
!
! Side Effects:
!
!--


global routine anl$prepare_quoted_string(input_dsc: ref descriptor,
					 output_dsc: ref descriptor):
								novalue = begin

bind
	input_vector = .input_dsc[ptr]: vector[,byte],
	output_vector = .output_dsc[ptr]: vector[,byte];

local
	i: signed long,
	trimmed_length: long;


! Begin by scanning the input string from the end in order to eliminate
! any trailing whitespace.  We actually eliminate all control characters
! so that we'll catch NULs too.

i =	(decru i from .input_dsc[len]-1 to 0 do
		if .input_vector[.i] gtru ' ' then exitloop .i);
trimmed_length = .i + 1;

! Put the opening quotation mark in the output buffer.

output_vector[0] = '"';
output_dsc[len] = 1;

! Scan the input string from the beginning, moving each character into the
! output buffer.  Quotation marks must be doubled.

incr i from 0 to .trimmed_length-1 do (
	if .input_vector[.i] eqlu '"' then (
		output_vector[.output_dsc[len]] = '"';
		increment(output_dsc[len]);
	);
	output_vector[.output_dsc[len]] = .input_vector[.i];
	increment(output_dsc[len]);
);

! Add the closing quotation mark to the output buffer.

output_vector[.output_dsc[len]] = '"';
increment(output_dsc[len]);

return;

end;

end eludom
