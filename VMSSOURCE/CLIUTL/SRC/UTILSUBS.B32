MODULE utilsubs ( IDENT = 'V04-000',
		ADDRESSING_MODE (EXTERNAL = GENERAL,
    				 NONEXTERNAL = LONG_RELATIVE)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  SET and SHOW Command utility routines
!
! ABSTRACT:
!
!	This module contains support routines to manipulate 
!	UICs, as well as file and device protections.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, user mode
!
! AUTHOR:  Gerry Smith				23-Feb-1983
!
! Modified by:
!
!	V03-004	LMP0191		L. Mark Pilant,		13-Feb-1984  9:29
!		Return the status from the UIC parse.
!
!	V03-003	GAS0179		Gerry Smith		 7-Sep-1983
!		Make non-external references longword references instead
!		of word references.  
!
!	V03-002	LMP0140		L. Mark Pilant,		23-Aug-1983  10:10
!		Add support for alphanumeric UICs.
!
!	V03-001	GAS0119		Gerry Smith		14-Apr-1983
!		Fix sense of KEY in EXPAND_PROT.
!
!--

!
! Include files
!
LIBRARY 'SYS$LIBRARY:STARLET';			! VAX/VMS common definitions
LIBRARY 'SYS$LIBRARY:TPAMAC';			! TPARSE macros



!
! Table of contents
!

FORWARD ROUTINE
    parse_uic,				! Convert ASCII UIC to longword
    get_prot : NOVALUE,			! Convert ASCII protection to binary
    parse_class,			! Parse one class of user protection
    expand_prot : NOVALUE;		! Convert binary prot to ASCII

!
! External routines
!
EXTERNAL ROUTINE
    cli$present,			! Detect presence of value from CLI
    cli$get_value,			! Get value from CLI
    LIB$TPARSE;				! General purpose parser

!
! External symbols
!
EXTERNAL LITERAL
    cli$_ivprot;			! Invalid protection specification

OWN
	CONVERTED_UIC;			! Converted UIC value

!
! Parse the UIC string and store the binary value.
!
$INIT_STATE	(UIC_STB, UIC_KTB);

$STATE	(,
	(TPA$_IDENT,,,,CONVERTED_UIC)
	);
$STATE	(,
	(TPA$_EOS,TPA$_EXIT)
	);

GLOBAL ROUTINE parse_uic (desc, uic) =
BEGIN

!---
!
! This routine takes an ASCII string of the form [m,n] and attempts to parse
! the pieces into a longword UIC.  If any errors are detected, an error is
! returned.
!
! Inputs
!	DESC - address of ASCII descriptor of UIC string
!
! Outputs
!	UIC  - the longword representation is returned here.
!
!---

MAP
    desc : REF $BBLOCK,
    uic : REF VECTOR;

BIND string = .desc[dsc$a_pointer] : VECTOR[,BYTE];

LOCAL
    TPARSE_BLOCK	: $BBLOCK [TPA$K_LENGTH0]	! TPARSE
			  INITIAL (TPA$K_COUNT0,	!  PARAMETER
				   TPA$M_BLANKS OR	!  BLOCK
				   TPA$M_ABBREV),
    STATUS;					! Routine return status

TPARSE_BLOCK[TPA$L_STRINGCNT] = .DESC[DSC$W_LENGTH];
TPARSE_BLOCK[TPA$L_STRINGPTR] = .DESC[DSC$A_POINTER];

IF NOT (STATUS = LIB$TPARSE (TPARSE_BLOCK, UIC_STB, UIC_KTB))
THEN RETURN .STATUS;

UIC[0] = .CONVERTED_UIC;			! MAKE THE UIC LONGWORD

RETURN 1;
END;

GLOBAL ROUTINE get_prot (class, prot) : NOVALUE =
BEGIN

!---
!
! This routine interrogates the CLI to get the requested protection, and then
! converts that ASCII representation to a word of binary data which is the 
! representation of protection used by the system.
!
! Inputs:
!	None.
!
! Outputs:
!
!	CLASS - a word bitmask indicating what classes of protection were
!	        referenced.
!	PROT  - a word bitmask representing the requested protection
!
!---

LOCAL
    status,
    desc : $BBLOCK[dsc$c_s_bln];	! Descriptor

MAP
    class : REF VECTOR[,WORD],
    prot : REF VECTOR[,WORD];

!
! Define the tables of ASCII descriptors, to be used by the CLI.
!
OWN class_table : VECTOR[4] INITIAL(%ASCID 'OPTION.PROTECTION.SYSTEM',
    				    %ASCID 'OPTION.PROTECTION.OWNER',
    				    %ASCID 'OPTION.PROTECTION.GROUP',
    				    %ASCID 'OPTION.PROTECTION.WORLD');


!
! Initialize the descriptor.  Clear the mask and protection word.
!
$init_dyndesc(desc);
class[0] = prot[0] = 0;

!
! For each class (SYSTEM, OWNER, GROUP, and WORLD), see if a protection
! was given.  If so, parse that into a binary representation.
!
INCR index FROM 0 TO 3 DO
    BEGIN
    IF cli$present(.class_table[.index])
    THEN
	BEGIN
	class[0] = .class[0] OR ((%X'F')^(.index*4));
	IF cli$get_value(.class_table[.index], desc)
	THEN prot[0] = .prot[0] OR (parse_class(desc)^(.index*4));
	END;
    END;

!
! Complement the protection value since at this point, a bit set true 
! indicates that we want to ALLOW access, while the system convention
! is that a bit set true indicates that we want to DENY access.
!
IF .class[0] NEQ 0				! If any protections specified
THEN prot[0] = NOT .prot[0];			! then get the complement

RETURN 1;
END;

ROUTINE parse_class (desc) =
BEGIN

!---
!
! This routine parses one class of user (e.g. SYSTEM, OWNER, GROUP, WORLD)
! to see what protection is allowed.  The value returned in the low 4 bits 
! is the protection code, with the bits set to reflect that access is 
! requested.  Note that this is exactly the opposite of what the system wants.
!
! Inputs:
!
!	DESC - a descriptor pointing to the ASCII representation of the
!	       protection desired
!
!---

MAP desc : REF $BBLOCK;

LOCAL
    result,
    string : REF VECTOR[,BYTE];		! String pointer

!
! Initially set the value to all zeros, no access
!
result = 0;

!
! Scan for the occurrence of each keyletter, and, if it is there, set the
! appropriate bit.
!
string = .desc[dsc$a_pointer];
INCR index FROM 0 to (.desc[dsc$w_length] -1) DO
    BEGIN
    IF .string[.index] EQL'R'
    THEN result = .result OR %X'1'
    ELSE IF .string[.index] EQL  'W'
    THEN result = .result OR %X'2'
    ELSE IF .string[.index] EQL 'E'
    	 OR .string[.index] EQL 'P'
    THEN result = .result OR %X'4'
    ELSE IF .string[.index] EQL 'D'
    	 OR .string[.index] EQL 'L'
    THEN result = .result OR %X'8'
    ELSE SIGNAL_STOP(cli$_ivprot);
    END;

RETURN .result;
END;

GLOBAL ROUTINE expand_prot (table, prot, key) : NOVALUE =
BEGIN

!----
!
! Functional description
!
!	This routine fills a given VECTOR with the addresses of
!	strings corresponding to a given protection word.
!
! Input parameters
!
!	TABLE - address of the table to be filled in
!	PROT  - protection word
!	KEY   - flag to indicate how to translate the protection
!		0 => RWED (file protection)
!		1 => RWPL (device protection)
!
! Output parameters
!
!	TABLE has been filled in with the addresses of descriptors
!	of strings describing each type of user (SYS,OWN,GRP,WORLD).
!
!----

BIND
    prot_table = .table: VECTOR[4];	! Table of addresses

OWN
    rwed_values: VECTOR[16] INITIAL(%ASCID 'RWED',	! File
				    %ASCID 'WED',	! protection
				    %ASCID 'RED',	! descriptions
				    %ASCID 'ED',
				    %ASCID 'RWD',
				    %ASCID 'WD',
				    %ASCID 'RD',
				    %ASCID 'D',
				    %ASCID 'RWE',
				    %ASCID 'WE',
				    %ASCID 'RE',
				    %ASCID 'E',
				    %ASCID 'RW',
				    %ASCID 'W',
				    %ASCID 'R',
				    %ASCID ''),

    rwpl_values: VECTOR[16] INITIAL(%ASCID 'RWLP',	! Device
				    %ASCID 'WLP',	! protection
				    %ASCID 'RLP',	! descriptions
				    %ASCID 'LP',
				    %ASCID 'RWL',
				    %ASCID 'WL',
				    %ASCID 'RL',
				    %ASCID 'L',
				    %ASCID 'RWP',
				    %ASCID 'WP',
				    %ASCID 'RP',
				    %ASCID 'P',
				    %ASCID 'RW',
				    %ASCID 'W',
				    %ASCID 'R',
				    %ASCID '');

!
! Based on the value of KEY, use the appropriate device protection description
! table.  For each class (SYSTEM, OWNER, GROUP, WORLD), use the 4-bit 
! protection pattern as an index into the protection table.
!
IF .key EQL 0
THEN INCR index FROM 0 TO 3 DO
    (prot_table[.index] = .rwed_values [.prot<.index*4,4>])
ELSE INCR index FROM 0 TO 3 DO
    (prot_table[.index] = .rwpl_values [.prot<.index*4,4>]);

RETURN;
END;

END
ELUDOM
