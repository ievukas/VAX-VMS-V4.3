%TITLE 'EDT$EXTEND - EXTEND change-mode command'
MODULE EDT$EXTEND (				! EXTEND change-mode command
		IDENT = 'V04-000'			! File: EXTEND.BLI Edit: REM1024
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Do the EXTEND change-mode command, which allows a line-mode
!	command to be executed from change mode.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: 6-AUG-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 18-FEB-1981.  This module was created by
!	extracting routine EDT$$EXT_CMD  from module EDTCTR.
! 1-002	- Regularize headers.  JBS 04-Mar-1981
! 1-003	- Do prompting from a global and remove LLINE and LCHANGE.  JBS 23-Oct-1981
! 1-004 - Replace L_LINE and L_CHANGE 7-Dec-81
! 1-005	- Add EDT$$LOAD_EXTEND, so that EDT$LNM_CMD can reload this routine into
!	   memory prior to returning to it.  Also, use a different symbol
!	   for EDT$$LNM_CMD, so the overlay analyzer can be told to ignore it.
!	   JBS 12-Mar-1982
! 1-006	- Do the same for EDT$$PA_CMD.  JBS 16-Mar-1982
! 1-007	- Remove L_LINE and L_CHANGE.  JBS 03-Jun-1982
! 1-008 - Allow any key to terminate the "Continue" message.  SMB 10-Jun-1982
! 1-009 - Fix bug in /RECOVER associated with above change.  SMB 16-Jun-1982
! 1-010 - Position the cursor better when waiting for a command to execute.
!	  SMB 28-Jun-1982
! 1-011- We can't use TI_WRSTR unless this is a VT100/52.  SMB 02-Jul-1982
! 1-012	- Use new formatting flags to control output at the bottom
!	   of the screen.  JBS 05-Jul-1982
! 1-013	- Fix up response to PRTC when reading the journal file.  JBS 06-Jul-1982
! 1-014 - Check for control C. STS 15-Jul-1982
! 1-015	- Write out the journal buffer before asking for input.  JBS 03-Aug-1982
! 1-016 - Force a cursor positioning sequence and reverse video.  SMB 30-Aug-1982
! 1-017 - Output the format buffer after turning off reverse video.  SMB 01-Sept-1982
! 1-018	- Don't destory EDT$$G_PRV_COL, it is now being maintained accurately.  JBS 05-Oct-1982
! 1-019 - Force a write to the journal file after return is pressed. STS 07-Oct-1982
! 1-020	- Don't clear EDT$$G_SCR_CHGD.  JBS 09-Oct-1982
! 1-021 - Check for hardcopy terminal. STS 02-Dec-1982
! 1-022 - Also check for terminal type unknown. STS 03-Dec-1982
! 1-023	- Don't permit a long response to destroy the stack.  JBS 13-Dec-1982
! 1-024 - Added logic to maintain EDT$$G_TIN_OBUFPOS durring /RECOVERY mode.
!	  REM 10-Oct-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$EXT_CMD : NOVALUE,
    EDT$$LOAD_EXTEND : NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$EXT_CMD  - EXTEND change-mode command'

GLOBAL ROUTINE EDT$$EXT_CMD 			! EXTEND change-mode command
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Do the EXTEND change-mode command.  This allows a line-mode
!	command to be executed from change mode.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$G_MESSAGE_LINE
!	EDT$$G_EXI
!	EDT$$T_CMD_BUF
!	EDT$$A_CMD_BUF
!	EDT$$A_CMD_END
!	EDT$$G_EXITD
!	EDT$$G_RCOV_MOD
!	EDT$$Z_PA_STK
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_SCR_CHGD
!	EDT$$G_TXT_ONSCR
!	EDT$$G_FMT_LNPOS
!	EDT$$G_LASTMSG
!	EDT$$G_TIN_OBUFPOS
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	MANY
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$SC_REVID,
	EDT$$SC_NONREVID,
	EDT$$SC_POSCSIF,
	EDT$$FMT_CRLF,
	EDT$$STOP_WKINGMSG,
	EDT$$RD_JOUTXT,
	EDT$$TI_WRSTR,
	EDT$$KPAD_INP,
	EDT$$TI_INPCH,
	EDT$$CHK_CC,
	EDT$$MSG_TOSTR,
	EDT$$OUT_FMTBUF,
	EDT$$PA_CMD_NOOVERLAY,
	EDT$$LNM_CMD_NOOVERLAY,
	EDT$$TI_FLUSHJOUFI : NOVALUE,		! Write out the journal file's buffer
	EDT$$FMT_MSG : NOVALUE,			! Output a message
	EDT$$ALO_HEAP,				! Allocate heap storage
	EDT$$DEA_HEAP : NOVALUE;		! Deallocate heap storage

    EXTERNAL
	EDT$$G_PUT_JOU,				! force a write to journal file
	EDT$$G_MESSAGE_LINE,			! Message lines are this + 1
	EDT$$G_EXI,				! Change mode has been exited
	EDT$$A_FMT_WRRUT,			! Output format routine
	EDT$$T_CMD_BUF,				! Command line buffer
	EDT$$A_CMD_BUF,				! Pointer into command line buffer
	EDT$$A_CMD_END,				! End of current command
	EDT$$G_EXITD,				! Did we exit with the last command?
	EDT$$G_EDIT_MOD,			! Current editing mode
	EDT$$G_RCOV_MOD,			! Are we in recovery mode?
	EDT$$G_SCR_CHGD,			! Screen must be completely rebuilt
	EDT$$G_TXT_ONSCR,			! Text was written to screen
	EDT$$G_CC_DONE,				! Control c acted upon
	EDT$$G_TI_TYP,				! kind of terminal
	EDT$$Z_PA_STK,				! Parser semantic stack
	EDT$$G_FMT_BOT,				! 1 = messages at bottom of screen
	EDT$$G_FMT_LCNT,			! Number of lines printed at the bottom of the screen
	EDT$$G_FMT_LNPOS,			! Position on the output line
	EDT$$G_TIN_OBUFPOS,			! Position in journal output buffer
	EDT$$G_LASTMSG;				! The last message printed, 1 = none

    MESSAGES ((PRERETCON, INSMEM));

    LOCAL
	CONT_RESP : REF VECTOR [256, BYTE],
	C,
	TERM,
	LEN;

    CH$WCHAR ('!', .EDT$$A_CMD_END);
    EDT$$G_TXT_ONSCR = 0;
    EDT$$G_EDIT_MOD = LINE_MODE;
!+
! Position the cursor to the message line.
!-

    IF ((.EDT$$G_TI_TYP NEQ TERM_HCPY) AND (.EDT$$G_TI_TYP NEQ TERM_UNKNOWN))
    THEN
	BEGIN
	EDT$$SC_POSCSIF (.EDT$$G_MESSAGE_LINE + 1, 0);
	EDT$$G_FMT_LNPOS = 0;
	EDT$$G_FMT_BOT = 1;
	EDT$$G_FMT_LCNT = 0;
	EDT$$SC_REVID ();
	END;

    DO
	BEGIN

	IF EDT$$PA_CMD_NOOVERLAY () THEN EDT$$LNM_CMD_NOOVERLAY (EDT$$Z_PA_STK) ELSE EDT$$G_TXT_ONSCR = 1;

	END
    UNTIL ((CH$RCHAR (.EDT$$A_CMD_BUF) EQL %C'!') OR (.EDT$$G_EDIT_MOD EQL CHANGE_MODE) OR (EDT$$CHK_CC ()));

!+
! See if the reason we are exiting is because of a control C seen.
!-

    IF ( NOT ((CH$RCHAR (.EDT$$A_CMD_BUF) EQL %C'!') OR (.EDT$$G_EDIT_MOD EQL CHANGE_MODE)))
    THEN
	EDT$$G_CC_DONE = 1;

!+
! Text on the screen means we have more than 2 lines of messages and that
! we need to issue the Press return to continue message.
!-

    IF (.EDT$$G_TXT_ONSCR NEQ 0) AND (.EDT$$A_FMT_WRRUT EQL EDT$$TI_WRSTR)
    THEN
	BEGIN
!+
! Allocate heap storage for the response, even though we use so much space only in /RECOVER mode,
! so that if we run out of storage during /RECOVER we will also run out in the original session.
!-

	IF ( NOT EDT$$ALO_HEAP (%REF (256), CONT_RESP))
	THEN
	    BEGIN
	    EDT$$FMT_MSG (EDT$_INSMEM);
	    END
	ELSE
	    BEGIN

	    IF (.EDT$$G_RCOV_MOD EQL 0)
	    THEN
		BEGIN
		EDT$$STOP_WKINGMSG ();
!+
! Output the "Press return to continue"
! message and wait for ANY key to be pressed before refreshing the screen
! and returning to change mode.
!-
		EDT$$FMT_CRLF ();
!+
! Don't call FMT_MSG because we don't want the bell to ring.
!-
		EDT$$SC_REVID ();
		EDT$$MSG_TOSTR (EDT$_PRERETCON);
		EDT$$OUT_FMTBUF ();
!+
! Make sure the journal buffer has been written to the journal file,
! since we are about to wait for terminal input.
!-
		EDT$$TI_FLUSHJOUFI (%C'T');
!+
! Get the next character of input, including any characters generated by
! striking a keypad key.
!-
		EDT$$TI_INPCH (C);
		EDT$$KPAD_INP (.C, .C, TERM);
		END
	    ELSE
		BEGIN
		edt$$g_tin_obufpos = 0;
		edt$$rd_joutxt (cont_resp [0], len)
		END;

	    EDT$$DEA_HEAP (%REF (256), CONT_RESP);
	    END;

	EDT$$G_LASTMSG = 1;
	EDT$$G_SCR_CHGD = 1;
	END;

    IF (.EDT$$G_EXITD NEQ 0) THEN EDT$$G_EXI = 1;

    EDT$$G_PUT_JOU = 1;				! make sure the response gets written out alone
    EDT$$SC_NONREVID ();
    EDT$$OUT_FMTBUF ();
    EDT$$G_FMT_BOT = 0;
    EDT$$G_EDIT_MOD = CHANGE_MODE;
    END;					! of routine EDT$$EXT_CMD


%SBTTL 'EDT$$LOAD_EXTEND - load this module into memory'

GLOBAL ROUTINE EDT$$LOAD_EXTEND 		! Load this module into memory
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine has no function.  It exists as an entry point so that
!	EDT$$XXX_NOOVERLAY can call this module back into memory before
!	returning to it.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    0
    END;					! of routine EDT$$LOAD_EXTEND

!<BLF/PAGE>

END						! of module EDT$EXTEND

ELUDOM
