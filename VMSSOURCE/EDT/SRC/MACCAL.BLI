%TITLE 'EDT$MACCAL - macro call'
MODULE EDT$MACCAL (				! Macro call
		IDENT = 'V04-000'			! File: MACCAL.BLI Edit: JBS1008
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Macro call
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: 6-AUG-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 18-FEB-1981.  This module was created by
!	extracting routine EDT$$MAC_CALL  from module EDTCTR.
! 1-002	- Regularize headers and fix file and module name.  JBS 04-Mar-1981
! 1-003	- Remove L_LINE.  JBS 01-Oct-1981
! 1-004 - Replace L_LINE. TMV 7-Dec-81
! 1-005	- Add an entry point so that EDT$$EXE_CMD_NOOVERLAY can
!	   get this mdoule back into memory after a macro has been executed.  JBS 10-Mar-1982
! 1-006	- Save and restore the command line over a macro call, so another
!	   command can be after the macro name.  JBS 03-Jun-1982
! 1-007 - See if a control C was found and reset command buffer. STS 16-Jul-1982
! 1-008 - Improve the appearance of the listing.  JBS 14-Jun-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$MAC_CALL : NOVALUE,
    EDT$$LOAD_MACCAL : NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$MAC_CALL  - macro call'

GLOBAL ROUTINE EDT$$MAC_CALL (			! Macro call
    MAC						! Address of the macro
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Call a macro.  A macro is a buffer which contains line-mode
!	commands.
!
! FORMAL PARAMETERS:
!
!  MAC			Address of the macro
!
! IMPLICIT INPUTS:
!
!	EDT$$A_CUR_BUF
!	EDT$$A_MAC_BUF
!	EDT$$A_CMD_BUF
!	EDT$$G_CMD_LEN
!	EDT$$T_CMD_BUF
!	EDT$$A_CMD_END
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_CUR_BUF
!	EDT$$A_MAC_BUF
!	EDT$$A_CMD_BUF
!	EDT$$A_CMD_END
!	EDT$$G_CC_DONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Saves and restores the command line.
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$EXE_CMD_NOOVERLAY,			! Same as EDT$$EXE_CMD but no overlay analysis
	EDT$$RD_CURLN : NOVALUE,
	EDT$$TOP_BUF : NOVALUE,
	EDT$$ALO_HEAP,				! Allocate heap storage
	EDT$$DEA_HEAP : NOVALUE,		! Deallocate heap storage
	EDT$$FMT_MSG : NOVALUE;			! Format a message

    EXTERNAL
	EDT$$G_CC_DONE,
	EDT$$A_CUR_BUF,				! Current tbcb
	EDT$$G_CMD_LEN,
	EDT$$T_CMD_BUF,
	EDT$$A_MAC_BUF,				! Current macro buffer pointer
	EDT$$A_CMD_BUF,				! Pointer to the current command
	EDT$$A_CMD_END;				! End of the current command

    LOCAL
	STATUS,
	SAVE_TBCB,
	SAVE_MACRO,
	SAVE_CMD_BUF,
	SAVE_CMD_END,
	CMD_TEXT : REF VECTOR [, BYTE],
	CMD_LENGTH;

    MESSAGES ((INSMEM));
!+
! Save the current command line.
!-
    SAVE_CMD_BUF = .EDT$$A_CMD_BUF;
    SAVE_CMD_END = .EDT$$A_CMD_END;
    CMD_LENGTH = CH$DIFF (CH$PLUS (.SAVE_CMD_END, 1), .SAVE_CMD_BUF);

    IF (.CMD_LENGTH GTR 0)
    THEN
	BEGIN

	IF EDT$$ALO_HEAP (CMD_LENGTH, CMD_TEXT)
	THEN
	    CH$MOVE (.CMD_LENGTH, .SAVE_CMD_BUF, .CMD_TEXT)
	ELSE
	    BEGIN
	    EDT$$FMT_MSG (EDT$_INSMEM);
	    RETURN;
	    END;

	END;

!+
! Point the command processor to the macro without destroying
! the current buffer or the current macro.
!-
    SAVE_TBCB = .EDT$$A_CUR_BUF;
    EDT$$A_CUR_BUF = .MAC;
    EDT$$TOP_BUF ();
    EDT$$A_CUR_BUF = .SAVE_TBCB;
    EDT$$RD_CURLN ();
    SAVE_MACRO = .EDT$$A_MAC_BUF;
    EDT$$A_MAC_BUF = .MAC;
!+
! Execute the commands in the specified buffer.
!-
    STATUS = EDT$$EXE_CMD_NOOVERLAY (INP_MACRO);
!+
! Restore the former macro.
!-
    EDT$$A_MAC_BUF = .SAVE_MACRO;
!+
! Restore the former command line contents, if any.
!-
    EDT$$A_CMD_BUF = .SAVE_CMD_BUF;
    EDT$$A_CMD_END = .SAVE_CMD_END;

    IF (.CMD_LENGTH GTR 0)
    THEN
	BEGIN
	CH$MOVE (.CMD_LENGTH, .CMD_TEXT, .SAVE_CMD_BUF);
	EDT$$DEA_HEAP (CMD_LENGTH, CMD_TEXT);
	END;

    IF (.STATUS EQL 2)				! if we saw a control C
    THEN
	BEGIN

	IF (.EDT$$A_CMD_END NEQ .EDT$$A_CMD_BUF) THEN EDT$$G_CC_DONE = 1;

	EDT$$A_CMD_BUF = EDT$$T_CMD_BUF;
	EDT$$A_CMD_END = .EDT$$A_CMD_BUF;
	CH$WCHAR (%C'!', .EDT$$A_CMD_END);
	END;

    END;					! of routine EDT$MAC_CALL


%SBTTL 'EDT$$LOAD_MACCAL - load this module into memory'

GLOBAL ROUTINE EDT$$LOAD_MACCAL 		! Load this module into memory
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine has no function.  It exists as an entry point so that
!	EDT$$EXE_CMD_NOOVERLAY can call this module back into memory before
!	returning to it.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    0
    END;					! of routine EDT$$LOAD_MACCAL

!<BLF/PAGE>

END						! of module EDT$MACCAL

ELUDOM
