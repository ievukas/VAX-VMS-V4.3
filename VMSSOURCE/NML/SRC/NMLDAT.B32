MODULE NML$DAT (IDENT = 'V04-000') =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
!
! ABSTRACT:
!
!	This module contains all global data referenced by
!	NML modules.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  3-Oct-1979
!
! MODIFIED BY:
!
!	V03-023	MKP0035		Kathy Perko		2-Mar-1984
!		Fix SET EXEC NAME command, which was broken when the
!		permanent database changes were made.
!
!	V03-022	MKP0034		Kathy Perko		27-Feb-1984
!		Put SERVICE NODE VERSION back in for SHOW commands now
!		that the parameter is in NETACP.
!
!	V03-021	MKP0033		Kathy Perko		7-Jan-1984
!		Add X-25 Access entity.
!
!	V03-020	MKP0032		Kathy Perko		7-Jan-1984
!		Comment out SERVICE NODE VERSION for SHOW commands until
!		the parameter is added to NETACP.
!
!	V03-019	MKP0031		Kathy Perko		3-Aug-1983
!		Convert node permanent database to use multiple ISAM
!		keys instead of one.  This change is for performance.
!		Add SERVICE NODE VERSION parameter.
!
!	V03-018	MKP0030		Kathy Perko		6-June-1983
!		Add events 4.8-9 to KNOWN events.  Add ALIAS parameter
!		to node database.
!
!	V03-017	MKP0029		Kathy Perko		6-May-1983
!		Add service substate to SHO CIRC SUMMARY.  Also, fix SHOW
!		CIRCUIT to only return service adjacency info (SDI database)
!		for NI circuits.
!
!	V03-016	MKP0028		Kathy Perko		30-April-1983
!		Add circuit ID to Configurator Module SET ALL parameter list.
!		Also, add service substate and physical address to SHOW CIRCUIT
!		display.
!
!	V03-015	MKP0027		Kathy Perko		19-April-1983
!		Delete service function buffers and NFBs (they've been moved
!		to MOM).  Add events 4.18 and 19.
!
!	V03-014	MKP0026		Kathy Perko		2-March-1983
!		Get rid of duplicate symbol, NMA$C_OPN_CNF, and check in
!		whole new source, since the update packet is getting huge.
!
!	V03-013	MKP0025		Kathy Perko		22-Feb-1983
!		Delete SHOW Node PROXY parameter.  Leave LIST and PURGE,
!		so customers can clean up their databases.  Add LINE BUFFER
!		SIZE parameter.
!
!	V03-012	MKP0024		Kathy Perko		17-Jan-1983
!		Add support for NI configurator module.
!
!	V03-011	MKP0023		Kathy Perko		19-Dec-1982
!		Add Ethernet protocol type parameter (EPT) to line database,
!		and delete listen timer and block size from circuit database
!		(they have been moved to the adjacency database).
!
!	V03-010	MKP0022		Kathy Perko		28-Nov-1982
!		Add NNN (Next node to destination address) to speed up
!		SHOW NODE STATUS and SUMMARY commands.
!		Add support for down line load over the Ethernet.
!
!	V03-009	MKP0021		Kathy Perko		9-Nov-1982
!		Add MODULE as a source for logging events and then add
!		events 128.2-4 to KNOWN events.
!		Add word for mailbox channel for logging all NICE messages
!		if NML$WATCHER is defined.
!
!	V03-008	MKP0020		Kathy Perko		4-Nov-1982
!		Add area entity.
!
!	V03-007	MKP0019		Kathy Perko		12-Oct-1982
!		Change circuit adjacency parameters returned.
!
!	V03-006	MKP0018		Kathy Perko		27-Sept-1982
!		Add all events in DNA to KNOWN EVENTS.
!		Make the circuit parameter, Designated Router, a characteristics
!		parameter instead of status (this is in violation of the
!		architecture).
!
!	V03-005	MKP0017		Kathy Perko		20-Sept-1982
!		Make changes to utilize full multiple show capabilities
!		of new NETACP QIO interface for SHOW NODES.
!
!	V03-004	MKP0016		Kathy Perko		1-Sept-1982
!		Fix SET X29-SERVER [KNOWN DESTINATION] ALL so that X29
!		field IDs are put into the NFB instead of X25 field IDs.
!
!	V03-003	MKP0015		Kathy Perko		21-June-1982
!		Add NI parameters for lines, nodes, and circuits.
!		Return DTE IDs with SHOW DTE responses.  Also, enhance
!		the Entity Information Table (NML$AB_ENTITYDATA) to include
!		the SHOW ACTIVE and KNOWN search key ID, length, value, and
!		operator.
!		Add X29-Server entity.
!		Add loop PSI line data fields.
!
!	V03-002	MKP0014		Kathy Perko		26-May-1982
!		Add X-25 Modules and double search keys.
!
!	V03-001	MKP0013		Kathy Perko		16-Feb-1982
!		Add autoservice event to list of KNOWN EVENTS.
!
!	V02-013	MKP0012		Kathy Perko		15-Feb-1982
!		Reinstate pipeline quota parameters for executor node.
!
!	V02-012	MKP0011		Kathy Perko		4-Feb-1982
!		Fix macro that builds the KNOWN EVENTS tables so that
!		it distinguishes between events with a source type of "none"
!		and events with a source type of "any"
!
!	V02-011	MKP0010		Kathy Perko		19-Jan-1982
!		Add circuit parameter, Transport protocol (NMA$C_PCCI_XPT).
!
!	V02-010	MKP0009		Kathy Perko		7-Jan-1982
!		One more time now -- move the RTT parameter from
!		circuits back to lines. Sigh.
!
!	V02-009	MKP0008		Kathy Perko		3-Jan-1982
!		Add LAD parameter to link semantic tables so NML can
!		handle SHOW LINKS commands from V2 nodes.
!
!	V02-008	MKP0007		Kathy Perko		31-Dec-1981
!		Fix order of node parameters so they are returned to NPC
!		in ascending order.  Also, set up Entity Table so that
!		the search key for the executor node is always wildcard
!		(since there is only the one entry in NETACPs executor
!		data base.)
!
!	V02-007	MKP0006		Kathy Perko		2-Dec-1981
!		Move Line parameter, receive buffers to return in the
!		correct order for SHOWs and LISTs. Also, add the
!		ACCESS parameter to executor node shows and lists.
!		Add proxy login parameters for objects and nodes.
!
!	V02-006	MKP0005		Kathy Perko		1-Dec-1981
!		Move retransmit timer parameter from circuits to lines.
!		Also, add State and Remote Process ID parameters to links.
!
!	V02-005	MKP0004		Kathy Perko		17-Nov-1981
!		Add circuits to logging event table.
!
!	V02-005	MKP0003		Kathy Perko		13-Nov-1981
!		Add line clock parameter.
!
!	V02-004	MKP0002		Kathy Perko		4-Nov-1981
!		Fix parameter mapping tables size.
!
!	V02-003	TMH0003		Tim Halvorsen		12-Oct-1981
!		Define new cell to contain NCP version number.  Make
!		changes to add V2 compatibility.
!
!	V02-002	MKP0001		Kathy Perko		6-Sept-1981
!		Add new VMS specific parameters: CIRCUIT VERIFICATION,
!		NODE ACCESS, EXECUTOR DEFAULT ACCESS and PIPELINE QUOTA.
!		Also, fix executor node counter reporting, and add a
!		patch area.
!
!	V02-001	LMK0001		Len Kawell		18-Jul-1981
!		Add CIRCUITS and modify LINES.
!--

%SBTTL 'Global data declarations'

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SHRLIB$:EVCDEF.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! Patch area.
!

PSECT GLOBAL = PATCH_AREA;

GLOBAL
	NML$PATCH_AREA : BBLOCK [300];

PSECT GLOBAL = $GLOBAL$;

!
! OWN STORAGE:
!
GLOBAL
    NML$GQ_PROPRVMSK : BBLOCK [8],		! Process privilege mask
    NML$GW_ACP_CHAN;				! ACP control channel

!
! Debugging log mask.  The bit mask is set up at NML initialization
! by translating the logical name NML$LOG.  The resulting ASCII hex number
! is converted to binary to provide the appropriate mask bit settings.
!
! The values for NML$LOG are defined as follows:
!
!	    1	NICE message network I/O.
!	    2	Permanent data base file I/O.
!	    4	NPARSE state transitions.
!	    8	Test (node loopback) message network I/O.
!	   10	Volatile data base I/O (NETACP QIOs).
!	   20	MOP direct line I/O.
!	   40	Trace service operation.
!	   80	Raw event data.
!
!		100 through 8000 are not used.
!
!	10000	Dump node permanent data base file at initialization.
!	20000	Dump line permanent data base file at initialization.
!	40000	Dump logging permanent data base file at initialization.
!	80000	Dump object permanent data base file at initialization.
!
!		100000 through 80000000 are not used.
!
GLOBAL
    NML$GL_LOGMASK   : BLOCK [1] INITIAL (0),	! Internal logging mask
    NML$GW_WATCHER_CHAN:	WORD;		! Watcher mailbox logging
						!	channel.
GLOBAL BIND					! Descriptor for watcher's
						!	mailbox.
    NML$GQ_WATCHER_DSC = $ASCID ('NML$WATCHER');
!
! Network Management version number storage
!
GLOBAL BIND
    NML$AB_NML_NMV = UPLIT BYTE (NML$K_VERSION,
				 NML$K_DEC_ECO,
				 NML$K_USER_ECO);
!
! Network device name.
!
GLOBAL BIND
    NML$GQ_NETNAMDSC = $ASCID ('_NET:');
!
! Command link channel data
!
GLOBAL
    NML$GB_CMD_VER   : BYTE,			! Command node phase type
						! (2 = Phase II, 3 = Phase III)
    NML$GB_NCP_VERSION: VECTOR [3,BYTE],	! NICE version # of NCP
    NML$GL_RCVDATLEN;				! Length of received data
!
! Network I/O buffers
!
GLOBAL
    NML$AB_RCVBUFFER : VECTOR [NML$K_RCVBFLEN, BYTE],	! Receive buffer
    NML$AB_SNDBUFFER : VECTOR [NML$K_SNDBFLEN, BYTE];	! Send buffer
GLOBAL BIND
    NML$GQ_RCVBFDSC =
	UPLIT (NML$K_RCVBFLEN, NML$AB_RCVBUFFER), ! Receive buffer descriptor
    NML$GQ_SNDBFDSC =
	UPLIT (NML$K_SNDBFLEN, NML$AB_SNDBUFFER); ! Send buffer descriptor
!
! NICE command parsing data
!
GLOBAL
    NML$GB_FUNCTION  :		BYTE,		! NICE function code
    NML$GB_INFO      :		BYTE,		! NICE information code
    NML$GB_OPTIONS   :		BYTE,		! NICE option flags
    NML$GB_ENTITY_CODE,				! NICE entity code
    NML$AB_ENTITY_ID : 		BBLOCK [31],	! NICE entity id
    NML$GB_ENTITY_FORMAT:	BYTE,		! NICE entity format code
    NML$GL_QUALIFIER_PST,			! NICE qualifier PST entry address
    NML$AB_QUALIFIER_ID:	BBLOCK [16],	! NICE qualifier ID
    NML$GB_QUALIFIER_FORMAT:	BYTE,		! NICE qualifier format
    NML$GL_PRMCODE,				! Parameter code for parsing
    NML$GL_PRS_FLGS  :		BLOCK [1],	! Message parsing flags
    NML$GQ_ENTSTRDSC :		DESCRIPTOR,	! Entity-specific string descriptor
    NML$AB_NPA_BLK   : 		$NPA_BLKDEF 	! NPARSE argument block
		       			INITIAL (NPA$K_COUNT0),
    NML$GL_NML_ENTITY;				! Internal NML entity code.
!
! The following data is used for parameter applicability control.
! It is set during parsing for singular entity operations or during
! the processing of plural entity operations.
!

!
! The following data is used for logging data base operations.  It is
! set up during parsing (primarily).
!
GLOBAL
    NML$GB_EVTSRCTYP : BYTE,		! Event source type
    NML$GQ_EVTSRCDSC : DESCRIPTOR,	! Event source descriptor
    NML$GW_EVTCLASS  : WORD,		! Event class
    NML$GB_EVTMSKTYP : BYTE,		! Mask type
    NML$GQ_EVTMSKDSC : DESCRIPTOR,	! Mask descriptor
    NML$GW_EVTSNKADR : WORD;		! Sink node address
!
! Record buffer for permanent data base access.
!
GLOBAL
    NML$AB_RECBUF : BBLOCK [NML$K_RECBFLEN];
GLOBAL BIND
    NML$GQ_RECBFDSC = UPLIT (NML$K_RECBFLEN, NML$AB_RECBUF);
!
! QIO buffer for volatile data base access.
!
GLOBAL
    NML$AB_QIOBUFFER : BBLOCK [NML$K_QIOBFLEN];
GLOBAL BIND
    NML$GQ_QIOBFDSC = UPLIT (NML$K_QIOBFLEN, NML$AB_QIOBUFFER);
!
! Executor information buffer and descriptors.
! NML$GQ_EXEBFDSC describes the buffer to contain the executor data.
! NML$GQ_EXEDATDSC describes the executor data once it is in the buffer.
! NML$GL_EXEDATPTR is the current pointer into the executor data buffer.
! These structures are used to handle the second set of executor parameters
! that are not common to other nodes.
!
GLOBAL
    NML$AB_EXEBUFFER : VECTOR [NML$K_QIOBFLEN, BYTE],
    NML$GL_EXEDATPTR,
    NML$GQ_EXEDATDSC : DESCRIPTOR INITIAL (0, NML$AB_EXEBUFFER);
GLOBAL BIND
    NML$GQ_EXEBFDSC = UPLIT (NML$K_QIOBFLEN, NML$AB_EXEBUFFER);
!
! Parameter descriptor buffer.  Each entry consists of two words containing
! the semantic table index, a count, and a longword pointer to the parameter
! in the receive buffer.
!
GLOBAL
    NML$GW_PRMDESCNT : WORD,		! Current parameter descriptor count
    NML$AW_PRM_DES : BLOCKVECTOR [PDB$K_NUMBER, 4, WORD];
!
! The following structure is used for building a message segment block (MSB).
! NML$BLD_REPLY is called with this block as input to construct a NICE reply
! message.
!
GLOBAL
    NML$AB_MSGBLOCK : BBLOCK [MSB$K_LENGTH];

%SBTTL 'Macros to build event table'

MACRO
    EVT_LIST (TAB) =

	COMPILETIME
	    $G1 = 0, $G2 = 0,
	    $C1 = 0, $C2 = 0,
	    $L1 = 0, $L2 = 0,
	    $M1 = 0, $M2 = 0,
	    $N1 = 0, $N2 = 0;

	PSECT GLOBAL = NML$EVENTS;

	GLOBAL
	    %NAME (TAB) : BBLOCKVECTOR [(%LENGTH - 1) / 2, 22]
			  INITIAL ($EVL (%REMAINING));

	GLOBAL LITERAL
	    NML$GK_EVENTS = (%LENGTH - 1) / 2;

	PSECT GLOBAL = $GLOBAL$;

	UNDECLARE
	    $G1, $G2,
	    $C1, $C2,
	    $L1, $L2,
	    $M1, $M2,
	    $N1, $N2;
    %,

    $EVL [CLS, EVE] =
	%ASSIGN ($N1, 0)
	%ASSIGN ($N2, 0)
	%ASSIGN ($C1, 0)
	%ASSIGN ($C2, 0)
	%ASSIGN ($L1, 0)
	%ASSIGN ($L2, 0)
	%ASSIGN ($M1, 0)
	%ASSIGN ($M2, 0)
	%ASSIGN ($G1, 0)
	%ASSIGN ($G2, 0)

	%IF %NULL($EVC (CLS, %REMOVE (EVE)))
	%THEN
	WORD  (%NAME ('EVC$C_CLS_', CLS)),
	UPLIT ($G1, $G2),
	UPLIT ($N1, $N2),
	UPLIT ($C1, $C2),
	UPLIT ($L1, $L2),
	UPLIT ($M1, $M2)
	%FI
    %,

    $EVC (CLS) [EVT, SRC] =

	$EVE ((%NAME ('EVC$C_', CLS, '_', EVT) -
		 (%NAME ('EVC$C_CLS_', CLS) ^ 6)),
	      %REMOVE (SRC))
  	
    %,

    $EVE (BNUM) [SRC] =

	%IF BNUM LSSU 32
	%THEN %ASSIGN ($G1, $G1 OR (1 ^ BNUM))
	%ELSE %ASSIGN ($G2, $G2 OR (1 ^ (BNUM - 32)))
	%FI

	!
	! If the event has a source type of "none" then don't add it to
	! the source specific known event masks.
	!
	%IF NOT %IDENTICAL (SRC, 'NONE')
	%THEN
	    %IF %IDENTICAL (SRC, 'NODE') OR
		%IDENTICAL (SRC, 'ANY')
	    %THEN
		%IF BNUM LSSU 32
		%THEN %ASSIGN ($N1, $N1 OR (1 ^ BNUM))
		%ELSE %ASSIGN ($N2, $N2 OR (1 ^ (BNUM - 32)))
		%FI
	    %FI

	    %IF %IDENTICAL (SRC, 'LINE') OR
		%IDENTICAL (SRC, 'ANY')
	    %THEN
		%IF BNUM LSSU 32
	    	%THEN %ASSIGN ($L1, $L1 OR (1 ^ BNUM))
	    	%ELSE %ASSIGN ($L2, $L2 OR (1 ^ (BNUM - 32)))
	    	%FI
	    %FI

	    %IF %IDENTICAL (SRC, 'CIRCUIT') OR
		%IDENTICAL (SRC, 'ANY')
	    %THEN
		%IF BNUM LSSU 32
	    	%THEN %ASSIGN ($C1, $C1 OR (1 ^ BNUM))
	    	%ELSE %ASSIGN ($C2, $C2 OR (1 ^ (BNUM - 32)))
	    	%FI
	    %FI

	    %IF %IDENTICAL (SRC, 'MODULE') OR
		%IDENTICAL (SRC, 'ANY')
	    %THEN
		%IF BNUM LSSU 32
	    	%THEN %ASSIGN ($M1, $M1 OR (1 ^ BNUM))
	    	%ELSE %ASSIGN ($M2, $M2 OR (1 ^ (BNUM - 32)))
	    	%FI
	    %FI

	%FI
    %;


%SBTTL 'Event table'
!
! Event table.
!
!			+-------------+
! ETB$W_CLASS		|    class    |
!			+-------------+-------------+
! ETB$A_GLOBAL		|  known global event mask  |
!			+---------------------------+
! ETB$A_NODE		|   known node event mask   |
!			+---------------------------+
! ETB$A_LINE		|   known line event mask   |
!			+---------------------------+
!
PSECT
    OWN = NML$EVENTS (NOWRITE, ALIGN (0));
OWN
    Z$ : VECTOR [0];
UNDECLARE
    Z$;
PSECT
    OWN = $OWN$;
!
! Initialize the event table.
!
EVT_LIST (NML$AB_EVENTS,
!
! Network management layer
!
    NMA,(
	LOS,	('NONE'),	! Event records lost
	ANC,	('NODE'),	! Automatic node counters
	ALC,	('LINE'),	! Automatic line counters
	ALS,	('LINE'),	! Automatic line service
	LCZ,	('LINE'),	! Line counters zeroed
	NCZ,	('NODE'),	! Node counters zeroed
	PSL,	('CIRCUIT'),	! Passive loopback
	ABS,	('CIRCUIT'),	! Aborted service request
	CTR,	('ANY'),	! Automatic counters
	ZER,	('ANY')		! Counters zeroed.
	),
!
! Session control layer
!
    SCL,(
	LNS,	('NONE'),	! Local node state change
	ACR,	('NONE')	! Access control reject
	),
!
! Network services layer
!
    NSL,(
	IMS,	('NONE'),	! Invalid message
	IFC,	('NONE'),	! Invalid flow control
	DBR,	('NODE')	! Data base reused
	),
!
! Transport layer
!
    TPL,(
	APL,	('NONE'),	! Aged packet loss
	UPL,	('CIRCUIT'),	! Node unreachable packet loss
	RPL,	('CIRCUIT'),	! Node out-of-range packet loss
	OPL,	('CIRCUIT'),	! Oversized packet loss
	PFM,	('CIRCUIT'),	! Packet format error
	PRU,	('CIRCUIT'),	! Partial routing update loss
	VFR,	('CIRCUIT'),	! Verification reject
	LDF,	('CIRCUIT'),	! Circuit down, circuit fault
	CDS,	('CIRCUIT'),	! Circuit down
	CDO,	('CIRCUIT'),	! Circuit down, operator initiated
	LDS,	('CIRCUIT'),	! Circuit down, software fault
	LDO,	('CIRCUIT'),	! Circuit down, operator fault
	LUP,	('CIRCUIT'),	! Circuit up
	ILF,	('CIRCUIT'),	! Initialization failure, circuit fault
	ISF,	('CIRCUIT'),	! Initialization failure, software fault
	IOF,	('CIRCUIT'),	! Initialization failure, operator fault
	RCH,	('NODE'),	! Node reachability change
	AUP,	('NODE'),	! Adjacent node up
	ARJ,	('NODE'),	! Adjacency rejected
!****  Change this to AREA later.
	ACH,	('NODE'),	! Area reachablilty change
	LDS,	('CIRCUIT'),	! Adjacency down
	LDO,	('CIRCUIT')	! Adjacency down, operator initiated
	),
!
! Data link layer
!
      DLL,(
	LSC,	('CIRCUIT'),	! Locally initiated state change
	RSC,	('CIRCUIT'),	! Remotely initiated state change
	PRS,	('CIRCUIT'),	! Protocol restart received in maintenance mode
	SND,	('CIRCUIT'),	! Send error threshold
	RET,	('CIRCUIT'),	! Receive error threshold
	SLC,	('CIRCUIT'),	! Select error threshold
	BHF,	('CIRCUIT'),	! Block header format error
	SAD,	('CIRCUIT'),	! Selection address error
	STT,	('CIRCUIT'),	! Streaming tributary
	LBS,	('CIRCUIT'),	! Local buffer too small
	RST,	('MODULE'),	! Restart (X.25 protocol)
	STC,	('MODULE'),	! State change (X.25 protocol)
	RME,	('MODULE'),	! Retransmit maximum exceeded (X.25)
	IFL,	('LINE'),	! Initialization failure
	SFL,	('LINE'),	! Send failed
	RFL,	('LINE'),	! Receive failed
	CDC,	('LINE'),	! Collision detect check failed
	DTU,	('MODULE'),	! DTE up (X.25 protocol)
	DTD,	('MODULE')	! DTE down (X.25 protocol)
	),
!
! Physical link layer
!
    PLL,(
	DSR,	('LINE'),	! Data set ready transition
	RIN,	('LINE'),	! Ring indicator transition
	CAR,	('LINE'),	! Unexpected carrier transition
	MEM,	('LINE'),	! Memory access error
	COM,	('LINE'),	! Communications interface error
	PFM,	('LINE')	! Performance error
	),
!
! VMS specific
!
      VMS,(
	DBC,	('NONE'),	! Logging data base change
	DPC,	('NONE'),	! DAP CRC error
	DP2,	('NONE'),	! Duplicate Phase II initialization
	PCR,	('NONE'),	! Process creation
	PTR,	('NONE')	! Process termination
	)

    );
!
! Undeclare all the macros used to build the event table.
!
UNDECLARE
    %QUOTE EVT_LIST,
    %QUOTE $EVL,
    %QUOTE $EVC,
    %QUOTE $EVE;


%SBTTL 'Parameter semantic table'
!
! This table contains information about all entity parameters.
!
!
! PST$W_DATAID		+------+------+-------------+
! PST$B_FORMAT		! dty  ! frm  !    id       !
! PST$B_DATATYPE	+------+------+-------------+
! PST$L_MINVALUE	!          minval           !
!			+---------------------------+
! PST$L_MAXVALUE	!          maxval           !
! PST$W_IDENT		+-------------+------+------+
! PST$L_NFBID		!         nfb id            !
!			+---------------------------+
!
!
! PST$W_DATAID		The network management parameter code.
!
! PST$B_FORMAT		The parameter format.  This field can have one
!			of the following values:
!
!				NML$K_BYTE
!				NML$K_WORD
!				NML$K_LONG
!				NML$K_STRING
!
! PST$B_DATATYPE	The network management automatic parsing code
!			for the parameter on output.  For some parameters
!			(such as coded multiple fields) this value is
!			combined with more information before it is moved
!			into the output message.
!
! PST$L_MINVALUE	This is the minimum parameter value.  For strings
!			(NML$K_STRING) this is the minimum length.
!
! PST$L_MAXVALUE	This is the maximum parameter value.  For strings
!			(NML$K_STRING) this is the maximum length.  If the
!			value is zero, the maximum value is determined by
!			the storage unit.
!
! PST$L_NFBID		The ACP control QIO field ID for this parameter.
!
! PST$K_ENTRYLEN	The number of bytes in a single PST entry.
!
!
! Macro to build parameter semantic table entries.
!
MACRO
    PST_ENTRY (PREF) [ID, FRM, DTY, MIN, MAX, DB, NFBID] = 

	SWITCHES UNAMES;
	PSECT OWN = NML$SEMANTICS;

	OWN
	    ENTRY :	VECTOR [PST$K_ENTRYLEN, BYTE]
			ALIGN (0)
			INITIAL (
			    WORD (%NAME ('NMA$C_', PREF, '_', ID)),
			    BYTE (%NAME ('NML$K_', FRM)),
			    BYTE (DTY),
			    LONG (MIN),
			    LONG (MAX),
			    LONG (
				%IF %NULL (DB, NFBID)
				%THEN
					0
				%ELSE
					$FIELD_ID (DB, NFBID)
				%FI
				));

	GLOBAL LITERAL
	    %NAME ('PST$K_', PREF, '_', ID) = PRM_SEM_CNT;

	%ASSIGN (PRM_SEM_CNT, PRM_SEM_CNT+1);

	PSECT OWN = $OWN$;
	SWITCHES NOUNAMES;
	UNDECLARE ENTRY;
    %;

MACRO
    $COU (W) =
	((NMA$M_CNT_COU OR (W ^ 13)) ^ -12)
    %;
!
! Parameter semantic table.
!
COMPILETIME
    PRM_SEM_CNT = 0;			! Initialize table entry count
PSECT
    GLOBAL = NML$SEMANTICS (NOWRITE, ALIGN (0));
GLOBAL
    NML$AB_PRMSEM : BBLOCKVECTOR [0, PST$K_ENTRYLEN];
PSECT
    GLOBAL = $GLOBAL$;
!
! Circuit parameter semantic table entries
!
LITERAL
    NMA$C_PCCI_AJ$ = NMA$C_PCCI_ADJ;	! Adjacent node name

PST_ENTRY (PCCI

    ,STA, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, STA
    ,SUB, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, SUB !RO
    ,SER, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, SER
    ,LCT, WORD,   2,			1,     0,    CRI, LCT
    ,SPY, STRING, NMA$C_PTY_HI,		0,     0,    SDI, PHA !RO
    ,SSB, BYTE,   NMA$M_PTY_COD+1,	0,     0,    SDI, SUB !RO
!?  ,CNO, STRING, NMA$C_PTY_CM2,	0,     0,    CRI, CNO !RO
!?  ,COB, STRING, NMA$M_PTY_CMU,	0,     0,    CRI, COB !RO
    ,LOO, STRING, NMA$M_PTY_ASC,	0,     0,    CRI, PNN !RO
    ,ADJ, STRING, NMA$C_PTY_CM2,	0,     0,    AJI, ADD !RO
    ,AJ$, STRING, NMA$C_PTY_CM2,	0,     0,    AJI, NNA !RO
    ,DRT, STRING, NMA$C_PTY_CM2,	0,     0,    CRI, DRT !RO
    ,BLO, WORD,   2,			0,     0,    AJI, BLO !RO
    ,COS, BYTE,   1,			1,     25,   CRI, COS
    ,MRT, BYTE,   1,            	0,     0,    CRI, MRT
    ,RPR, BYTE,	  1,			0,     0,    CRI, RPR
    ,HET, WORD,   2,			0,     0,    CRI, HET
    ,LIT, WORD,   2,			0,     0,    CRI, LIT !RO
    ,BLK, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, BLK
    ,MRC, BYTE,   1,			0,     0,    CRI, MRC
    ,RCT, WORD,   2,			0,     0,    CRI, RCT
    ,NUM, STRING, NMA$M_PTY_ASC,	0,     0,    CRI, NUM
!?  ,USR, STRING, NMA$M_PTY_CMU,	0,     0,    CRI, USR !RO
    ,POL, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, POL
    ,PLS, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, PLS !RO
    ,OWN, STRING, NMA$M_PTY_CMU,	0,     0,    CRI, DLM
    ,USE, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, USE
    ,TYP, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, TYP
    ,DTE, STRING, NMA$M_PTY_ASC,	0,     0,    CRI, DTE
    ,CHN, WORD,   2,			0,     0,    CRI, CHN
    ,MBL, WORD,   2,			0,     0,    CRI, MBL
    ,MWI, BYTE,   1,			0,     0,    CRI, MWI
    ,TRI, BYTE,   1,			0,     0,    CRI, TRI
    ,BBT, WORD,   2,			0,     0,    CRI, BBT
    ,TRT, WORD,   2,			0,     0,    CRI, TRT
    ,MRB, BYTE,   1,			0,     0,    CRI, MRB
    ,MTR, BYTE,   1,			0,     0,    CRI, MTR
    ,ACB, BYTE,   1,			0,     0,    CRI, ACB
    ,ACI, BYTE,   1,			0,     0,    CRI, ACI
    ,IAB, BYTE,   1,			0,     0,    CRI, IAB
    ,IAI, BYTE,   1,			0,     0,    CRI, IAI
    ,IAT, BYTE,   1,			0,     0,    CRI, IAT
    ,DYB, BYTE,   1,			0,     0,    CRI, DYB
    ,DYI, BYTE,   1,			0,     0,    CRI, DYI
    ,DYT, BYTE,   1,			0,     0,    CRI, DYT
    ,DTH, BYTE,   1,			0,     0,    CRI, DTH
    ,VER, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, VER ! VMS specific.
    ,XPT, BYTE,   NMA$M_PTY_COD+1,	0,     0,    CRI, XPT ! VMS specific.

    ,CC$, STRING, 0,			0,     0,    CRI, CNT !internal
  
	);
!
! Line parameter semantic table entries
!
EXTERNAL LITERAL
    NMA$C_PCLI_BF$;		! V2 receive buffers parameter.

!
! For loop line commands, NCP passes the PCNO parameter codes for Loop
! count, Loop data, and Loop length.  Set up pseudo NMA values to map
! them to the ACPs PLI (line) database.
!
LITERAL
    NMA$C_PCLI_L$C = NMA$C_PCNO_LPC,	! loop count
    NMA$C_PCLI_L$L = NMA$C_PCNO_LPL,	! loop length
    NMA$C_PCLI_L$D = NMA$C_PCNO_LPD;	! loop data type

PST_ENTRY (PCLI

    ,STA, BYTE,   NMA$M_PTY_COD+1,	0,     0,    PLI, STA
    ,SUB, BYTE,   NMA$M_PTY_COD+1,	0,     0,    PLI, SUB !RO
    ,SER, BYTE,   NMA$M_PTY_COD+1,	0,     0,    PLI, SER
    ,LCT, WORD,   2,			1,     0,    PLI, LCT
    ,BFN, WORD,   2,			0,     0,    PLI, BFN
    ,CON, BYTE,   NMA$M_PTY_COD+1,	0,     0,    PLI, CON
    ,DUP, BYTE,   NMA$M_PTY_COD+1,	0,     0,    PLI, DUP
    ,PRO, BYTE,   NMA$M_PTY_COD+1,	0,     0,    PLI, PRO
    ,CLO, BYTE,   NMA$M_PTY_COD+1,      0,     0,    PLI, CLO
    ,STI, WORD,   2,			1,     0,    PLI, STI
    ,RTT, WORD,   2,                    0,     0,    PLI, RTT
    ,HTI, WORD,   2,			0,     0,    PLI, HTI
    ,MBL, WORD,   2,			0,     0,    PLI, MBL
    ,MRT, BYTE,   1,			0,     0,    PLI, MRT
    ,MWI, BYTE,   1,			0,     0,    PLI, MWI
    ,SLT, WORD,   2,			0,     0,    PLI, SLT
    ,DDT, WORD,   2,			0,     0,    PLI, DDT
    ,DLT, WORD,   2,			0,     0,    PLI, DLT
    ,SRT, WORD,   2,			0,     0,    PLI, SRT
    ,HWA, STRING, NMA$C_PTY_HI,	        0,     0,    PLI, HWA
    ,MCD, STRING, 0,                    0,     0,    PLI, MCD ! WO
    ,XMD, BYTE,   NMA$M_PTY_COD+1,      0,     0,    PLI, MOD ! VMS specific
    ,EPT, WORD,	  NMA$C_PTY_H2,		0,     0,    PLI, EPT ! VMS specific
    ,BSZ, WORD,	  2,			0,     0,    PLI, BFS ! VMS specific
    ,BF$, WORD,   2,                    0,     0,    PLI, BFN ! V2 VMS

    ,LC$, STRING, 0,			0,     0,    PLI, CNT !internal
    ,L$C, WORD,   2,			0,     0,    PLI, LPC !internal
    ,L$L, WORD,   2,			0,     0,    PLI, LPL !internal
    ,L$D, BYTE,   1,			0,     0,    PLI, LPD !internal
  
	);
!
! Logging parameter semantic table entries
!
PST_ENTRY (PCLO

    ,STA, BYTE,   NMA$M_PTY_COD+1,	0,     0,    ESI, STA
    ,LNA, STRING, NMA$M_PTY_ASC,	1,     255,  ESI, LNA
    ,SIN, STRING, NMA$M_PTY_CMU,	0,     0,    EFI, SIN
    ,EVE, STRING, NMA$M_PTY_CMU,	0,     0,    EFI, EVE

	);
!
! Node parameter semantic table entries
!
LITERAL
    NMA$C_PCNO_AD$ = NMA$C_PCNO_ADD,	! Process executor address differently
					!	than a remote node's.
    NMA$C_PCNO_NN$ = NMA$C_PCNO_NNA;	! Process executor name differently
					!	than a remote node's.

PST_ENTRY (PCNO

    ,STA, BYTE,   NMA$M_PTY_COD+1,	0,     0,    LNI, STA
    ,PHA, STRING, NMA$C_PTY_HI,		0,     0,    LNI, PHA   !RO
    ,IDE, STRING, NMA$M_PTY_ASC,	1,     32,   LNI, IDE
    ,MVE, STRING, NMA$M_PTY_CMU,	0,     0,       , 	!RO
    ,SLI, STRING, NMA$M_PTY_ASC,	1,     16,   NDI, SLI
    ,SPA, STRING, %X'20',		1,     8,    NDI, SPA
    ,SDV, BYTE,   NMA$M_PTY_COD+1,	0,     0,    NDI, SDV
    ,CPU, BYTE,   NMA$M_PTY_COD+1,	0,     0,    NDI, CPU
    ,HWA, STRING, NMA$C_PTY_HI,		0,     0,    NDI, HWA
    ,SNV, BYTE,	  NMA$M_PTY_COD+1,	0,     0,    NDI, SNV
    ,LOA, STRING, NMA$M_PTY_ASC,	1,     255,  NDI, LOA
    ,SLO, STRING, NMA$M_PTY_ASC,	1,     255,  NDI, SLO
    ,TLO, STRING, NMA$M_PTY_ASC,	1,     255,  NDI, TLO
    ,DFL, STRING, NMA$M_PTY_ASC,	0,     0,    NDI, DFL
    ,STY, BYTE,   NMA$M_PTY_COD+1,	0,     0,    NDI, STY
    ,SID, STRING, NMA$M_PTY_ASC,	1,     16,   NDI, SID
    ,DUM, STRING, NMA$M_PTY_ASC,	1,     255,  NDI, DUM
    ,SDU, STRING, NMA$M_PTY_ASC,	1,     255,  NDI, SDU
    ,DAD, LONG,   4,			0,     0,    NDI, DAD
    ,DCT, LONG,   4,			0,     0,    NDI, DCT
    ,OHO, STRING, NMA$C_PTY_CM2,	0,     0,    NDI, OHO !RO
    ,IHO, STRING, NMA$C_PTY_CM2,	0,     0,    NDI, IHO !WO*
    ,LPC, WORD,   2,			0,     0,    ,
    ,LPL, WORD,   2,			0,     0,    ,
    ,LPD, BYTE,   1,			0,     0,    ,
    ,LPA, STRING, NMA$C_PTY_HI,		0,     0,    ,
    ,LPH, BYTE,   1,			0,     0,    ,
    ,CTI, WORD,   2,			1,     0,    NDI, CTI
    ,NNA, STRING, 0,			1,     6,    NDI, NNA !WO
    ,NN$, STRING, 0,			1,     6,    NDI, NNA
    ,NLI, STRING, NMA$M_PTY_ASC,	1,     16,   NDI, NLI
    ,ADD, WORD,   0,			0,     0,    NDI, ADD !WO
    ,AD$, WORD,   0,			0,     0,    LNI, ADD !WO internal
    ,A$$, WORD,   0,			0,     0,    NDI, ADD !WO internal
    ,ITI, WORD,   2,			1,     0,    LNI, ITI
    ,OTI, WORD,   2,			1,     0,    LNI, OTI
    ,ACL, WORD,   2,			0,     0,    NDI, ACL !RO
    ,DEL, BYTE,   1,			0,     0,    NDI, DEL !RO
    ,NVE, STRING, NMA$M_PTY_CMU,	0,     0,    LNI, NVE !RO
    ,MLK, WORD,   2,			1,     0,    LNI, MLK
    ,DFA, BYTE,   1,			1,     0,    LNI, DFA
    ,DWE, BYTE,   1,			1,     0,    LNI, DWE
    ,IAT, WORD,   2,			1,     0,    LNI, IAT
    ,RFA, WORD,   2,			1,     0,    LNI, RFA
    ,DTY, BYTE,   NMA$M_PTY_COD+1,	0,     0,    NDI, DTY !RO
    ,DCO, WORD,   2,			0,     0,    NDI, DCO !RO
    ,DHO, BYTE,   1,			0,     0,    NDI, DHO !RO
    ,DLI, STRING, NMA$M_PTY_ASC,	0,     16,   NDI, DLI !RO
    ,NND, WORD,   NMA$C_PTY_CM2,	0,     0,    NDI, NND
    ,RVE, STRING, NMA$M_PTY_CMU,	0,     0,    LNI, RVE !RO
    ,ETY, BYTE,   NMA$M_PTY_COD+1,	0,     0,    LNI, ETY
    ,RTI, WORD,   2,			1,     0,    LNI, RTI
    ,SAD, LONG,   NMA$M_PTY_CMU,	0,     0,    LNI, SAD
    ,BRT, WORD,   2,			0,     0,    LNI, BRT
    ,MAD, WORD,   2,			1,     0,    LNI, MAD
    ,MLN, WORD,   2,			1,     0,    LNI, MLN
    ,MCO, WORD,   2,			1,     1022, LNI, MCO
    ,MHO, BYTE,   1,			1,     30,   LNI, MHO
    ,MVI, BYTE,   1,			1,     0,    LNI, MVI
    ,MAR, BYTE,   1,			0,     0,    LNI, MAR
    ,MBE, WORD,   2,			0,     0,    LNI, MBE
    ,MBR, WORD,   2,			0,     0,    LNI, MBR
    ,AMC, WORD,   2,			0,     0,    LNI, AMC
    ,AMH, BYTE,   1,			0,     0,    LNI, AMH
    ,MBU, WORD,   2,			0,     0,    LNI, MBU
    ,BUS, WORD,   2,			1,     0,    LNI, BUS
    ,SBS, WORD,   2,			0,     0,    LNI, SBS
    ,PUS, STRING, NMA$M_PTY_ASC,	1,     39,   NDI, PUS !VMS
    ,PAC, STRING, NMA$M_PTY_ASC,	1,     39,   NDI, PAC !VMS
    ,PPW, STRING, NMA$M_PTY_ASC,	1,     39,   NDI, PPW !VMS
    ,NUS, STRING, NMA$M_PTY_ASC,	1,     39,   NDI, NUS !VMS
    ,NAC, STRING, NMA$M_PTY_ASC,	1,     39,   NDI, NAC !VMS
    ,NPW, STRING, NMA$M_PTY_ASC,	1,     39,   NDI, NPW !VMS
    ,RPA, STRING, NMA$M_PTY_ASC,	1,     8,    NDI, RPA !VMS
    ,TPA, STRING, NMA$M_PTY_ASC,	1,     8,    NDI, TPA !VMS
    ,ACC, BYTE,   NMA$M_PTY_COD+1,      0,     0,    NDI, ACC !VMS
    ,DAC, BYTE,   NMA$M_PTY_COD+1,      0,     0,    LNI, DAC !VMS
    ,PIQ, WORD,   2,                    0,     0,    LNI, PIQ !VMS
    ,ALI, WORD,   NMA$C_PTY_CM2,	0,     0,    LNI, ALI !VMS
    ,PRX, BYTE,   NMA$M_PTY_COD+1,      0,     0,    NDI, PRX !VMS
    ,DPX, BYTE,   NMA$M_PTY_COD+1,      0,     0,    LNI, DPX !VMS

    ,NC$, STRING, 0,			0,     0,    NDI, CNT !internal
 
	);

!
! Area semantic table entries (all parameters are read only)
!
PST_ENTRY (PCAR

    ,STA, BYTE,   NMA$M_PTY_COD+1,	0,     0,    ARI, REA	!RO
    ,COS, WORD,   2,			0,     0,    ARI, DCO	!RO
    ,HOP, BYTE,   1,			0,     0,    ARI, DHO	!RO
    ,CIR, STRING, NMA$M_PTY_ASC,	0,     0,    ARI, DLI	!RO
    ,NND, WORD,   NMA$C_PTY_CM2,	0,     0,    ARI, NND	!RO
	);

!
! X-25 Access Module semantic table entries
!
PST_ENTRY(PCXA
    ,NET, STRING, NMA$M_PTY_ASC,	0,     16,   XAI, NET
    ,NOD, STRING, NMA$C_PTY_CM2, 	0,     16,   XAI, NDA
    ,USR, STRING, NMA$M_PTY_ASC,        0,     16,   XAI, USR
    ,PSW, STRING, NMA$M_PTY_COD+1,      0,     16,   XAI, PSW
    ,ACC, STRING, NMA$M_PTY_ASC,        0,     16,   XAI, ACC
    );


PST_ENTRY(PCXP
    ,STA, BYTE,   NMA$M_PTY_COD+1,	0,     0,    XDI, STA
    ,CTM, WORD,   2,                    0,     0,    XDI, CTM
    ,ACH, WORD,   2,                    0,     0,    XDI, ACH ! RO
    ,ASW, WORD,   2,                    0,     0,    XDI, ASW ! RO
    ,DTE, STRING, NMA$M_PTY_ASC,        0,     16,   XDI, DTE
    ,GRP, STRING, NMA$M_PTY_ASC,        0,     16,   XGI, GRP
    ,NET, STRING, NMA$M_PTY_ASC,        0,     0,    XNI, NET
    ,LIN, STRING, NMA$M_PTY_ASC,        0,     0,    XDI, LIN
    ,CHN, LONG,   NMA$M_PTY_CMU+2,      0,     0,    XDI, CHN
    ,MCH, WORD,   2,                    0,     0,    XDI, MCH ! RO
    ,DBL, WORD,   2,                    0,     0,    XNI, DBL
    ,DWI, BYTE,   1,                    0,     0,    XNI, DWI
    ,MBL, WORD,   2,                    0,     0,    XNI, MBL
    ,MWI, BYTE,   1,                    0,     0,    XNI, MWI
    ,MCL, BYTE,   1,                    0,     0,    XNI, MCL
    ,MRS, BYTE,   1,                    0,     0,    XNI, MRS
    ,MST, BYTE,   1,                    0,     0,    XNI, MST
    ,CAT, BYTE,   1,                    0,     0,    XNI, CAT
    ,CLT, BYTE,   1,                    0,     0,    XNI, CLT
    ,RST, BYTE,   1,                    0,     0,    XNI, RST
    ,STT, BYTE,   1,                    0,     0,    XNI, STT
    ,GDT, STRING, NMA$M_PTY_ASC,        0,     16,   XGI, GDT
    ,GNM, WORD,   2,                    0,     0,    XGI, GNM
    ,GTY, BYTE,   NMA$M_PTY_COD+1,      0,     0,    XGI, GTY
    ,MNS, BYTE,   NMA$M_PTY_COD+1,      0,     0,    XNI, MNS ! VMS specific
    ,MCI, WORD,   2,                    0,     0,    XDI, MCI ! VMS specific
    ,SBS, BYTE,   NMA$M_PTY_COD+1,      0,     0,    XDI, SUB ! VMS specific RO
    ,PC$, STRING, 0,                    0,     0,    XDI, CNT !internal
	);

!
! X-25 Server Module semantic table entries
!
PST_ENTRY(PCXS
    ,CTM, WORD,   2,	                0,     0,    XS5, CTM
    ,ACI, WORD,   2,                    0,     0,    XS5, ACI ! RO
    ,DST, STRING, NMA$M_PTY_ASC,        0,     0,    XD5, DST
    ,MCI, WORD,   2,                    0,     0,    XS5, MCI
    ,NOD, STRING, NMA$C_PTY_CM2,        0,     16,   XD5, NOD
    ,USR, STRING, NMA$M_PTY_ASC,        1,     39,   XD5, USR
    ,SPW, STRING, NMA$M_PTY_CMU,        1,     39,   XD5, PSW
    ,RPW, BYTE,   1,                    0,     0,    ,	      ! RO
    ,ACC, STRING, NMA$M_PTY_ASC,        1,     39,   XD5, ACC
    ,OBJ, STRING, NMA$M_PTY_ASC,        0,     0,    XD5, OBJ
    ,PRI, BYTE,   1,                    0,     0,    XD5, PRI
    ,CMK, STRING, NMA$C_PTY_HI,         0,     0,    XD5, CMK
    ,CVL, STRING, NMA$C_PTY_HI,         0,     0,    XD5, CVL
    ,GRP, STRING, NMA$M_PTY_ASC,        0,     0,    XD5, GRP
    ,NUM, STRING, NMA$M_PTY_ASC,        0,     0,    XD5, NUM
    ,SAD, LONG,   NMA$M_PTY_CMU,        0,     0,    XD5, SAD
    ,STA, BYTE,   NMA$M_PTY_COD+1,      0,     0,    XS5, STA ! VMS specific
    ,FIL, STRING, NMA$M_PTY_ASC,        0,     0,    XD5, FIL ! VMS specific
    ,SC$, STRING, 0,                    0,     0,    XS5, CNT ! RO
    );


!
! X-25 Trace Module semantic table entries
!
PST_ENTRY(PCXT
    ,STA, BYTE,   NMA$M_PTY_COD+1,      0,     0,    XTI, STA
    ,BSZ, WORD,   2,	                0,     0,    XTI, BFZ
    ,MBK, WORD,   2,	                0,     0,    XTI, MBK
    ,FNM, STRING, NMA$M_PTY_ASC,        0,     0,    XTI, FNM
    ,MBF, WORD,   2,	                0,     0,    XTI, MBF
    ,CPL, WORD,   2,	                0,     0,    XTI, CPL
    ,MVR, WORD,   2,	                0,     0,    XTI, MVR
    ,TPT, STRING, NMA$M_PTY_ASC,	0,     0,    XTT, TPT
    ,CPS, WORD,   2,	                0,     0,    XTT, CPS
    ,TST, BYTE,   NMA$M_PTY_COD+1,      0,     0,    XTT, TST
	);

!
! X29-Server Module parameters.
!

!
! The NICE X-29 Server database is identical to the X25-Server database.  It
! uses the same NICE parameter IDs.  But the ACP database distinguishes between
! the two.  Therefore, a set of pseudo NICE codes are defined here for X-29,
! which are identical to the X-25 codes, but, in the following table, are
! mapped to different ACP field IDs for change functions.
!
LITERAL
    NMA$C_PCXS9_CTM = NMA$C_PCXS_CTM,
    NMA$C_PCXS9_ACI = NMA$C_PCXS_ACI,
    NMA$C_PCXS9_DST = NMA$C_PCXS_DST,
    NMA$C_PCXS9_MCI = NMA$C_PCXS_MCI,
    NMA$C_PCXS9_NOD = NMA$C_PCXS_NOD,
    NMA$C_PCXS9_USR = NMA$C_PCXS_USR,
    NMA$C_PCXS9_SPW = NMA$C_PCXS_SPW,
    NMA$C_PCXS9_RPW = NMA$C_PCXS_RPW,
    NMA$C_PCXS9_ACC = NMA$C_PCXS_ACC,
    NMA$C_PCXS9_OBJ = NMA$C_PCXS_OBJ,
    NMA$C_PCXS9_PRI = NMA$C_PCXS_PRI,
    NMA$C_PCXS9_CMK = NMA$C_PCXS_CMK,
    NMA$C_PCXS9_CVL = NMA$C_PCXS_CVL,
    NMA$C_PCXS9_GRP = NMA$C_PCXS_GRP,
    NMA$C_PCXS9_NUM = NMA$C_PCXS_NUM,
    NMA$C_PCXS9_SAD = NMA$C_PCXS_SAD,
    NMA$C_PCXS9_STA = NMA$C_PCXS_STA,
    NMA$C_PCXS9_FIL = NMA$C_PCXS_FIL,
    NMA$C_PCXS9_SC$ = NMA$C_PCXS_SC$;

PST_ENTRY(PCXS9
    ,CTM, WORD,   2,	                0,     0,    XS9, CTM
    ,ACI, WORD,   2,                    0,     0,    XS9, ACI ! RO
    ,DST, STRING, NMA$M_PTY_ASC,        0,     0,    XD9, DST
    ,MCI, WORD,   2,                    0,     0,    XS9, MCI
    ,NOD, STRING, NMA$M_PTY_CMU+2,      0,     16,   XD9, NOD
    ,USR, STRING, NMA$M_PTY_ASC,        1,     39,   XD9, USR
    ,SPW, STRING, NMA$M_PTY_CMU,        1,     39,   XD9, PSW
    ,RPW, BYTE,   NMA$M_PTY_COD+1,      0,     0,    ,	      ! RO
    ,ACC, STRING, NMA$M_PTY_ASC,        1,     39,   XD9, ACC
    ,OBJ, STRING, NMA$M_PTY_CMU+2,      0,     0,    XD9, OBJ
    ,PRI, BYTE,   1,                    0,     0,    XD9, PRI
    ,CMK, STRING, NMA$M_PTY_ASC,        0,     0,    XD9, CMK
    ,CVL, STRING, NMA$M_PTY_ASC,        0,     0,    XD9, CVL
    ,GRP, STRING, NMA$M_PTY_ASC,        0,     0,    XD9, GRP
    ,NUM, STRING, NMA$M_PTY_ASC,        0,     0,    XD9, NUM
    ,SAD, LONG,   NMA$M_PTY_CMU+2,      0,     0,    XD9, SAD
    ,STA, BYTE,   NMA$M_PTY_COD+1,      0,     0,    XS9, STA ! VMS specific
    ,FIL, STRING, NMA$M_PTY_ASC,        0,     0,    XD9, FIL ! VMS specific
    ,SC$, STRING, 0,                    0,     0,    XS9, CNT ! RO
    );

!
! Configurator Module semantic table entries.  NETACP fields are omitted
! because the database is maintined by the NI Configurator Module and NETACP
! doesn't get involved at all.
!
PST_ENTRY(PCCN
    ,CIR, STRING, NMA$M_PTY_ASC,        0,     0,    ,
    ,SUR, BYTE,   NMA$M_PTY_COD+1,      0,     0,    ,
    );

!
! Object parameter semantic table entries (Objects are an entity for VMS only).
!
PST_ENTRY (PCOB

    ,NUM, BYTE,   1,			0,     0,    OBI, NUM
    ,FID, STRING, NMA$M_PTY_ASC,	1,     64,   OBI, FID
    ,PID, LONG,   %X'20'+4,		0,     0,    OBI, PID !RO
    ,PRV, STRING, NMA$M_PTY_COD,	0,     0,    OBI, LPR
    ,USR, STRING, NMA$M_PTY_ASC,	1,     39,   OBI, USR
    ,ACC, STRING, NMA$M_PTY_ASC,	1,     39,   OBI, ACC
    ,PSW, STRING, NMA$M_PTY_ASC,	1,     39,   OBI, PSW
    ,PRX, BYTE,   NMA$M_PTY_COD+1,      0,     0,    OBI, PRX

	);
!
! Link parameter semantic table entries.
!
GLOBAL LITERAL
    NMA$C_PCLK_PN$ = NMA$C_PCLK_NID;	! Partner node address (NETACP
					!	database only)

PST_ENTRY (PCLK

    ,STA, BYTE,   NMA$M_PTY_COD+1,      0,     0,     ,
    ,PID, LONG,   %X'20'+4,		0,     0,     ,
    ,NID, STRING, NMA$C_PTY_CM2,	0,     0,     LLI, PNN
    ,LAD, STRING, NMA$M_PTY_CMU,        0,     0,     ,  ! V2 only
    ,DLY, BYTE,   1,                    0,     0,     ,
    ,RLN, WORD,   2,                    0,     0,     ,
    ,RID, STRING, NMA$M_PTY_ASC,        0,     0,     ,
    ,USR, STRING, NMA$M_PTY_ASC,        0,     0,     ,
    ,PRC, STRING, NMA$M_PTY_ASC,        0,     0,     ,
    ,PN$, WORD,   2,             	0,     0,     LLI, PNA

	);
LITERAL
    PST$K_NUMBER = PRM_SEM_CNT;

UNDECLARE
    PRM_SEM_CNT,
    %QUOTE PST_ENTRY,
    %QUOTE $COU;

%SBTTL 'Change parameter tables'
!
! Macro to build parameter table entries.
!
!
!			+-------------+
! CPT$W_PSTINDEX	!    index    !
!			+-------------+-------------+
! CPT$A_DEFINE_RTN	! DEFINE routine address    !
!			+---------------------------+
! CPT$A_PURGE_RTN	! PURGE routine address     !
!			+---------------------------+
!
!
! CPT$W_PSTINDEX	Index into parameter semantic table (PST) 
!			blockvector.
!
! CPT$A_DEFINE_RTN	Address of routine to be called to perform
!			parameter value checking and to add the parameter
!			to the permanent data base record if it is valid.
!
! CPT$A_PURGE_RTN	Address of routine to be called to perform
!			parameter applicability checking and to remove
!			the parameter from the permanent data base record.
!
! CPT$K_ENTRYLEN	Length in bytes of a single CPT entry.
!


MACRO
    CPT_ENTRY (PREF) [ID, DEFRTN, PURRTN] =

	SWITCHES UNAMES;
	PSECT OWN = NML$CPTDATA;

	OWN
	    ENTRY :	VECTOR [CPT$K_ENTRYLEN, BYTE]
			ALIGN (0)
			INITIAL (
			    WORD (%NAME ('PST$K_', PREF, '_', ID)),
			    LONG (DEFRTN),
			    LONG (PURRTN)
				);

	GLOBAL LITERAL
	    %NAME ('CPT$GK_', PREF, '_', ID) = CPT_ENTRY_COUNT;

	%ASSIGN (CPT_ENTRY_COUNT, CPT_ENTRY_COUNT+1);

	PSECT OWN = $OWN$;
	SWITCHES NOUNAMES;
	UNDECLARE ENTRY;
%;
!
! Initialize change parameter tables. 
!
COMPILETIME
    CPT_ENTRY_COUNT = 0;
PSECT
    GLOBAL = NML$CPTDATA (NOWRITE, ALIGN (0));
GLOBAL
    NML$AB_CPTABLE : BBLOCKVECTOR [0, CPT$K_ENTRYLEN];
PSECT
    GLOBAL = $GLOBAL$;
!
! Declare external define/purge routines.
!
EXTERNAL ROUTINE
    NML$DEFLINLTY,
    NML$DEFLINTRI,
    NML$DEF_NODE_ADDR,
    NML$DEF_EXEC_ID,
    NML$DEFNODNLI,
    NML$DEFOBJNUM,
    NML$DEFPARAM,
    NML$PURNODNNA,
    NML$PURPARAM;
!
! Circuit table entries.
!
CPT_ENTRY (PCCI

    ,STA, NML$DEFPARAM,	 NML$PURPARAM	! State
    ,SER, NML$DEFPARAM,  NML$PURPARAM	! Service
    ,LCT, NML$DEFPARAM,  NML$PURPARAM	! Counter timer
    ,SPY, 0,		 0		! Service physical address
    ,SSB, 0,		 0		! Service substate
    ,ADJ, 0,		 0		! Adjacent node number
    ,AJ$, 0,		 0		! Adjacent node name
    ,DRT, NML$DEFPARAM,  NML$PURPARAM	! Designated router
    ,BLO, NML$DEFPARAM,  NML$PURPARAM	! Block size
    ,COS, NML$DEFPARAM,  NML$PURPARAM	! Cost
    ,MRT, NML$DEFPARAM,  NML$PURPARAM	! Maximum routers on NI
    ,RPR, NML$DEFPARAM,  NML$PURPARAM	! Router priority on NI
    ,HET, NML$DEFPARAM,  NML$PURPARAM	! Hello timer
    ,LIT, NML$DEFPARAM,  NML$PURPARAM	! Listen timer
    ,BLK, NML$DEFPARAM,  NML$PURPARAM	! Blocking
    ,MRC, NML$DEFPARAM,  NML$PURPARAM	! Maximum recalls
    ,RCT, NML$DEFPARAM,  NML$PURPARAM	! Recall timer
    ,NUM, NML$DEFPARAM,  NML$PURPARAM	! Number
    ,POL, NML$DEFPARAM,  NML$PURPARAM	! Polling state
    ,OWN, NML$DEFPARAM,  NML$PURPARAM	! Owner entity id
    ,USE, NML$DEFPARAM,  NML$PURPARAM	! Usage
    ,TYP, NML$DEFLINLTY, NML$PURPARAM	! Type
    ,DTE, NML$DEFPARAM,  NML$PURPARAM	! DTE
    ,CHN, NML$DEFPARAM,  NML$PURPARAM	! Channel
    ,MBL, NML$DEFPARAM,  NML$PURPARAM	! Maximum block
    ,MWI, NML$DEFPARAM,  NML$PURPARAM	! Maximum window
    ,TRI, NML$DEFPARAM,  NML$PURPARAM	! Tributary
    ,BBT, NML$DEFPARAM,  NML$PURPARAM	! Babble timer
    ,TRT, NML$DEFPARAM,  NML$PURPARAM	! Transmit timer
    ,MRB, NML$DEFPARAM,  NML$PURPARAM	! Maximum receive buffers
    ,MTR, NML$DEFPARAM,  NML$PURPARAM	! Maximum transmits
    ,ACB, NML$DEFPARAM,  NML$PURPARAM	! Active base
    ,ACI, NML$DEFPARAM,  NML$PURPARAM	! Active increment
    ,IAB, NML$DEFPARAM,  NML$PURPARAM	! Inactive base
    ,IAI, NML$DEFPARAM,  NML$PURPARAM	! Inactive increment
    ,IAT, NML$DEFPARAM,  NML$PURPARAM	! Inactive threshold
    ,DYB, NML$DEFPARAM,  NML$PURPARAM	! Dying base
    ,DYI, NML$DEFPARAM,  NML$PURPARAM	! Dying increment
    ,DYT, NML$DEFPARAM,  NML$PURPARAM	! Dying threshold
    ,DTH, NML$DEFPARAM,  NML$PURPARAM	! Dead threshold
    ,VER, NML$DEFPARAM,  NML$PURPARAM	! Verification - VMS specific
    ,XPT, NML$DEFPARAM,  NML$PURPARAM	! Transport protocol - VMS specific

	);
!
! Line table entries.
!
CPT_ENTRY (PCLI

    ,STA, NML$DEFPARAM,	 NML$PURPARAM	! State
    ,SER, NML$DEFPARAM,  NML$PURPARAM	! Service
    ,LCT, NML$DEFPARAM,  NML$PURPARAM	! Counter timer
    ,BFN, NML$DEFPARAM,  NML$PURPARAM	! Number of buffers
    ,CON, NML$DEFPARAM,  NML$PURPARAM	! Controller mode
    ,DUP, NML$DEFPARAM,  NML$PURPARAM	! Duplex
    ,PRO, NML$DEFLINLTY, NML$PURPARAM	! Protocol type
    ,CLO, NML$DEFPARAM,  NML$PURPARAM	! Clock
    ,STI, NML$DEFPARAM,  NML$PURPARAM	! Service timer
    ,RTT, NML$DEFPARAM,  NML$PURPARAM	! Retransmit timer
    ,HTI, NML$DEFPARAM,  NML$PURPARAM	! Holdback timer
    ,MBL, NML$DEFPARAM,  NML$PURPARAM	! Maximum block
    ,MRT, NML$DEFPARAM,  NML$PURPARAM	! Maximum retransmissions
    ,MWI, NML$DEFPARAM,  NML$PURPARAM	! Maximum window
    ,SLT, NML$DEFPARAM,  NML$PURPARAM	! Scheduling timer
    ,DDT, NML$DEFPARAM,  NML$PURPARAM	! Dead timer
    ,DLT, NML$DEFPARAM,  NML$PURPARAM	! Delay timer
    ,SRT, NML$DEFPARAM,  NML$PURPARAM	! Stream timer
    ,HWA, NML$DEFPARAM,  NML$PURPARAM	! Hardware address on NI
    ,MCD, 0,             0		! Microcode dump filespec (WO)
    ,XMD, NML$DEFPARAM,  NML$PURPARAM   ! PCL address mode
    ,EPT, NML$DEFPARAM,  NML$PURPARAM	! Ethernet Protocol type for datalink
    ,BSZ, NML$DEFPARAM,  NML$PURPARAM	! Ethernet Buffer Size
    ,BF$, 0,             0              ! V2 Number of buffers
    ,L$C, 0,     	 0    		! Loop PSI line count
    ,L$L, 0,     	 0    		! Loop PSI line length
    ,L$D, 0,     	 0		! Loop PSI line data type

	);
!
! Logging table entries.
!
CPT_ENTRY (PCLO

    ,STA, NML$DEFPARAM,  NML$PURPARAM	! State
    ,LNA, NML$DEFPARAM,  NML$PURPARAM	! Name
    ,SIN, 0, 0				! Sink node
    ,EVE, 0, 0				! Events

	);
!
! Node table entries.
!
CPT_ENTRY (PCNO

    ,STA, NML$DEFPARAM,  NML$PURPARAM	! State
    ,PHA, NML$DEFPARAM,	 NML$PURPARAM	! Physical address on NI
    ,IDE, NML$DEFPARAM,  NML$PURPARAM	! Identification
    ,SLI, NML$DEFPARAM,  NML$PURPARAM	! Service circuit
    ,SPA, NML$DEFPARAM,  NML$PURPARAM	! Service password
    ,SDV, NML$DEFPARAM,  NML$PURPARAM	! Service device
    ,CPU, NML$DEFPARAM,  NML$PURPARAM	! CPU type
    ,HWA, NML$DEFPARAM,  NML$PURPARAM	! Hardware address on NI
    ,SNV, NML$DEFPARAM,  NML$PURPARAM	! Service Node Version
    ,LOA, NML$DEFPARAM,  NML$PURPARAM	! Load file
    ,SLO, NML$DEFPARAM,  NML$PURPARAM	! Secondary loader
    ,TLO, NML$DEFPARAM,  NML$PURPARAM	! Tertiary loader
    ,DFL, NML$DEFPARAM,  NML$PURPARAM	! Diagnostic file
    ,STY, NML$DEFPARAM,  NML$PURPARAM	! Software type
    ,SID, NML$DEFPARAM,  NML$PURPARAM	! Software identification
    ,DUM, NML$DEFPARAM,  NML$PURPARAM	! Dump file
    ,SDU, NML$DEFPARAM,  NML$PURPARAM	! Secondary dumper
    ,DAD, NML$DEFPARAM,  NML$PURPARAM	! Dump address
    ,DCT, NML$DEFPARAM,  NML$PURPARAM	! Dump count
    ,IHO, NML$DEFPARAM,  NML$PURPARAM	! Host
    ,LPC, 0,  		 0		! Loop count
    ,LPL, 0,  		 0		! Loop length
    ,LPD, 0,  		 0		! Loop data
    ,LPA, 0,		 0		! Loop assistant physical address
    ,LPH, 0,		 0		! Loop help type
    ,CTI, NML$DEFPARAM,  NML$PURPARAM	! Counter timer
    ,NNA, NML$DEFPARAM,	 NML$PURNODNNA	! Remote node name
    ,NN$, NML$DEF_EXEC_ID,NML$PURNODNNA	! Executor node name
    ,NLI, NML$DEFNODNLI, 0		! Line
    ,ADD, NML$DEF_NODE_ADDR,0		! Remote node address
    ,AD$, NML$DEF_EXEC_ID,NML$PURPARAM	! Executor node address
    ,A$$, NML$DEFPARAM,  0		! Loop node address
    ,ITI, NML$DEFPARAM,  NML$PURPARAM	! Incoming timer
    ,OTI, NML$DEFPARAM,  NML$PURPARAM	! Outgoing timer
    ,MLK, NML$DEFPARAM,  NML$PURPARAM	! Maximum links
    ,DFA, NML$DEFPARAM,  NML$PURPARAM	! Delay factor
    ,DWE, NML$DEFPARAM,  NML$PURPARAM	! Delay weight
    ,IAT, NML$DEFPARAM,  NML$PURPARAM	! Inactivity timer
    ,RFA, NML$DEFPARAM,  NML$PURPARAM	! Retransmit factor
    ,DLI, 0,             0		! Destination circuit
    ,NND, NML$DEFPARAM,  NML$PURPARAM	! Next node to destination address
    ,ETY, NML$DEFPARAM,  NML$PURPARAM	! Executor type
    ,RTI, NML$DEFPARAM,  NML$PURPARAM	! Routing timer
    ,SAD, NML$DEFPARAM,  NML$PURPARAM	! Subaddress
    ,BRT, NML$DEFPARAM,  NML$PURPARAM	! Broadcast routing timer
    ,MAD, NML$DEFPARAM,  NML$PURPARAM	! Maximum address
    ,MLN, NML$DEFPARAM,  NML$PURPARAM	! Maximum lines
    ,MCO, NML$DEFPARAM,  NML$PURPARAM	! Maximum cost
    ,MHO, NML$DEFPARAM,  NML$PURPARAM	! Maximum hops
    ,MVI, NML$DEFPARAM,  NML$PURPARAM	! Maximum visits
    ,MAR, NML$DEFPARAM,  NML$PURPARAM	! Maximum areas
    ,MBE, NML$DEFPARAM,  NML$PURPARAM	! Maximum broadcast endnodes
    ,MBR, NML$DEFPARAM,  NML$PURPARAM	! Maximum broadcast routers
    ,AMC, NML$DEFPARAM,  NML$PURPARAM	! Area maximum cost
    ,AMH, NML$DEFPARAM,  NML$PURPARAM	! Area maximum hops
    ,MBU, NML$DEFPARAM,  NML$PURPARAM	! Maximum buffers
    ,BUS, NML$DEFPARAM,  NML$PURPARAM	! Buffer size
    ,SBS, NML$DEFPARAM,  NML$PURPARAM	! Segment buffer size
    ,PUS, NML$DEFPARAM,  NML$PURPARAM	! Privileged user id
    ,PAC, NML$DEFPARAM,  NML$PURPARAM	! Privileged account
    ,PPW, NML$DEFPARAM,  NML$PURPARAM	! Privileged password
    ,NUS, NML$DEFPARAM,  NML$PURPARAM	! Nonprivileged user id
    ,NAC, NML$DEFPARAM,  NML$PURPARAM	! Nonprivileged account
    ,NPW, NML$DEFPARAM,  NML$PURPARAM	! Nonprivileged password
    ,RPA, NML$DEFPARAM,  NML$PURPARAM	! Receive password
    ,TPA, NML$DEFPARAM,  NML$PURPARAM	! Transmit password
    ,ACC, NML$DEFPARAM,  NML$PURPARAM	! Access
    ,DAC, NML$DEFPARAM,  NML$PURPARAM   ! Default access
    ,PIQ, NML$DEFPARAM,  NML$PURPARAM   ! Pipeline quota
    ,ALI, NML$DEFPARAM,  NML$PURPARAM   ! Node alias
    ,PRX, 0,		 NML$PURPARAM   ! Proxy access
    ,DPX, NML$DEFPARAM,  NML$PURPARAM   ! Default proxy access

	);

!
! Area Change Paramter table entries (all parameters are read only)
!
CPT_ENTRY (PCAR

    ,STA, 0,		 0		! State
    ,COS, 0,		 0		! Cost
    ,HOP, 0,		 0		! Hops
    ,CIR, 0,		 0		! Circuit
    ,NND, 0,		 0		! Next node to destination
	);



!
! X-25 Access Module Change Parameter table entries
!
CPT_ENTRY(PCXA

    ,NET, NML$DEFPARAM, NML$PURPARAM	! Network
    ,NOD, NML$DEFPARAM, NML$PURPARAM	! Node
    ,USR, NML$DEFPARAM, NML$PURPARAM	! User
    ,PSW, NML$DEFPARAM, NML$PURPARAM	! Password
    ,ACC, NML$DEFPARAM, NML$PURPARAM	! Account
    );

!
! X-25 Protocol Module Change Parameter table entries.
!
CPT_ENTRY (PCXP

    ,STA, NML$DEFPARAM,  NML$PURPARAM	! State
    ,CTM, NML$DEFPARAM,  NML$PURPARAM	! Counter timer
    ,ACH, NML$DEFPARAM,  NML$PURPARAM	! Active channels
    ,ASW, NML$DEFPARAM,  NML$PURPARAM	! Active switched
    ,DTE, NML$DEFPARAM,  NML$PURPARAM	! DTE
    ,GRP, NML$DEFPARAM,  NML$PURPARAM	! Group
    ,NET, NML$DEFPARAM,  NML$PURPARAM	! Network
    ,LIN, NML$DEFPARAM,  NML$PURPARAM	! Line
    ,CHN, NML$DEFPARAM,  NML$PURPARAM	! Channels
    ,MCH, NML$DEFPARAM,  NML$PURPARAM	! Maximum channels
    ,DBL, NML$DEFPARAM,  NML$PURPARAM	! Default block
    ,DWI, NML$DEFPARAM,  NML$PURPARAM	! Default window
    ,MBL, NML$DEFPARAM,  NML$PURPARAM	! Maximum block
    ,MWI, NML$DEFPARAM,  NML$PURPARAM	! Maximum window
    ,MCL, NML$DEFPARAM,  NML$PURPARAM	! Maximum clears
    ,MRS, NML$DEFPARAM,  NML$PURPARAM	! Maximum resets
    ,MST, NML$DEFPARAM,  NML$PURPARAM	! Maximum restarts
    ,CAT, NML$DEFPARAM,  NML$PURPARAM	! Call timer
    ,CLT, NML$DEFPARAM,  NML$PURPARAM	! Clear timer
    ,RST, NML$DEFPARAM,  NML$PURPARAM	! Reset timer
    ,STT, NML$DEFPARAM,  NML$PURPARAM	! Restart timer
    ,GDT, NML$DEFPARAM,  NML$PURPARAM	! Group DTE
    ,GNM, NML$DEFPARAM,  NML$PURPARAM	! Group number
    ,GTY, NML$DEFPARAM,  NML$PURPARAM	! Group type
    ,MNS, NML$DEFPARAM,  NML$PURPARAM   ! Multinetwork support
    ,MCI, NML$DEFPARAM,  NML$PURPARAM   ! Maximum circuits
    ,SBS, NML$DEFPARAM,  NML$PURPARAM   ! DTE Substate
	);

!
! X-25 Server Module Change Parameter table entries.
!
CPT_ENTRY (PCXS
    ,CTM, NML$DEFPARAM,  NML$PURPARAM	! Counter timer
    ,ACI, 0,  		 0		! Active circuits
    ,DST, NML$DEFPARAM,  NML$PURPARAM	! Destination
    ,MCI, NML$DEFPARAM,  NML$PURPARAM	! Maximum circuits
    ,NOD, NML$DEFPARAM,  NML$PURPARAM	! Node
    ,USR, NML$DEFPARAM,  NML$PURPARAM	! Username
    ,SPW, NML$DEFPARAM,  NML$PURPARAM	! Password to set
    ,RPW, 0,		 0		! Password to read
    ,ACC, NML$DEFPARAM,  NML$PURPARAM	! Account
    ,OBJ, NML$DEFPARAM,  NML$PURPARAM	! Object
    ,PRI, NML$DEFPARAM,  NML$PURPARAM	! Priority
    ,CMK, NML$DEFPARAM,  NML$PURPARAM	! Call mask
    ,CVL, NML$DEFPARAM,  NML$PURPARAM	! Call value
    ,GRP, NML$DEFPARAM,  NML$PURPARAM	! Group
    ,NUM, NML$DEFPARAM,  NML$PURPARAM	! Number
    ,SAD, NML$DEFPARAM,  NML$PURPARAM	! Subaddresses
    ,STA, NML$DEFPARAM,  NML$PURPARAM	! State
    ,FIL, NML$DEFPARAM,  NML$PURPARAM	! File for object startup
    );

!
! X-25 Trace Module Change Parameter table entries
!
CPT_ENTRY(PCXT
    ,STA, NML$DEFPARAM,  NML$PURPARAM	! Trace State
    ,BSZ, NML$DEFPARAM,  NML$PURPARAM	! Buffer size
    ,MBK, NML$DEFPARAM,  NML$PURPARAM	! Maximum blocks/size
    ,FNM, NML$DEFPARAM,  NML$PURPARAM	! Filename
    ,MBF, NML$DEFPARAM,  NML$PURPARAM	! Maximum number of buffers
    ,CPL, NML$DEFPARAM,  NML$PURPARAM	! Global data capture limit
    ,MVR, NML$DEFPARAM,  NML$PURPARAM	! Maximum trace file version
    ,TPT, NML$DEFPARAM,  NML$PURPARAM	! Trace point name
    ,CPS, NML$DEFPARAM,  NML$PURPARAM	! Per-trace capture size
    ,TST, NML$DEFPARAM,  NML$PURPARAM	! Tracepoint state
	);
!
! X-29 Server Module Change Parameter table entries.
!
CPT_ENTRY (PCXS9
    ,CTM, NML$DEFPARAM,  NML$PURPARAM	! Counter timer
    ,ACI, 0,  		 0		! Active circuits
    ,DST, NML$DEFPARAM,  NML$PURPARAM	! Destination
    ,MCI, NML$DEFPARAM,  NML$PURPARAM	! Maximum circuits
    ,NOD, NML$DEFPARAM,  NML$PURPARAM	! Node
    ,USR, NML$DEFPARAM,  NML$PURPARAM	! Username
    ,SPW, NML$DEFPARAM,  NML$PURPARAM	! Password to set
    ,RPW, 0,		 0		! Password to read
    ,ACC, NML$DEFPARAM,  NML$PURPARAM	! Account
    ,OBJ, NML$DEFPARAM,  NML$PURPARAM	! Object
    ,PRI, NML$DEFPARAM,  NML$PURPARAM	! Priority
    ,CMK, NML$DEFPARAM,  NML$PURPARAM	! Call mask
    ,CVL, NML$DEFPARAM,  NML$PURPARAM	! Call value
    ,GRP, NML$DEFPARAM,  NML$PURPARAM	! Group
    ,NUM, NML$DEFPARAM,  NML$PURPARAM	! Number
    ,SAD, NML$DEFPARAM,  NML$PURPARAM	! Subaddresses
    ,STA, NML$DEFPARAM,  NML$PURPARAM	! State
    ,FIL, NML$DEFPARAM,  NML$PURPARAM	! File for object startup
    );


!
! Configurator module table entries.
!
CPT_ENTRY (PCCN

    ,CIR, NML$DEFPARAM, NML$PURPARAM	! Circuit ID
    ,SUR, NML$DEFPARAM, NML$PURPARAM	! Surveillance
    );

!
! Object table entries.
!
CPT_ENTRY (PCOB

    ,NUM, NML$DEFOBJNUM, NML$PURPARAM	! Number
    ,FID, NML$DEFPARAM,  NML$PURPARAM	! File
    ,PRV, NML$DEFPARAM,  NML$PURPARAM	! Privileges
    ,USR, NML$DEFPARAM,  NML$PURPARAM	! User id
    ,ACC, NML$DEFPARAM,  NML$PURPARAM	! Account
    ,PSW, NML$DEFPARAM,  NML$PURPARAM	! Password
    ,PRX, NML$DEFPARAM,  NML$PURPARAM   ! Proxy access

	);
!
! Link table entries (Links are not in the permament data base).
!
CPT_ENTRY (PCLK

    ,STA, 0,     0
    ,PID, 0,     0
    ,NID, 0,     0
    ,DLY, 0,     0
    ,RLN, 0,     0
    ,RID, 0,     0
    ,USR, 0,     0
    ,PRC, 0,     0
    ,PN$, 0,     0

	);

GLOBAL LITERAL
    CPT$GK_NUMBER = CPT_ENTRY_COUNT;

UNDECLARE
    CPT_ENTRY_COUNT,
    %QUOTE CPT_ENTRY;


%SBTTL 'LIST parameter tables'
!
! Parameter list definition macro.
!
MACRO
    PRM_LIST (TAB, TYP, PRM) []  =

	SWITCHES UNAMES;
	PSECT
	    PLIT = NML$PARAMLISTS;

	BIND
	    %NAME ('NML$Q_P_', TAB, TYP, '_TABDES') =
		UPLIT ((%LENGTH - 2) / 2,
			UPLIT BYTE ($DEXTN (PRM, %REMAINING)));

	PSECT PLIT = $PLIT$;
	SWITCHES NOUNAMES;
    %,

    $DEXTN (TAB) [A, B] =
	WORD (%NAME ('PST$K_', TAB, '_', A)),
	LONG (B)
    %;
!
! Initialize psect.
!
PSECT
    OWN = NML$PARAMLISTS (NOWRITE, ALIGN (0));
OWN
    $Z : VECTOR [0];
PSECT
    OWN = $OWN$;
UNDECLARE
    $Z;
!
! Declare routines used to get parameters.
!
EXTERNAL ROUTINE
    NML$LISNODEID,
    NML$LISLOONAM,
    NML$LISPARAM,
    NML$LISPASSWORD,
    NML$LISNMLVER,
    NML$LISPWSET,
    NML$LISRANGE,
    NML$LISOWNER;
!
!    Circuit summary and status
!
PRM_LIST (CIR, SUM, PCCI

	,STA, NML$LISPARAM	! State
	,LOO, NML$LISLOONAM	! Loopback name

	);
!
!    Circuit characteristics
!
PRM_LIST (CIR, CHA, PCCI

	,SER, NML$LISPARAM	! Service
	,LCT, NML$LISPARAM	! Counter timer
	,DRT, NML$LISNODEID	! Designated router
	,COS, NML$LISPARAM	! Cost
	,MRT, NML$LISPARAM	! Maximum routers on NI
	,RPR, NML$LISPARAM	! Router priority on NI
	,HET, NML$LISPARAM	! Hello timer
	,BLK, NML$LISPARAM	! Blocking
	,MRC, NML$LISPARAM	! Maximum recalls
	,RCT, NML$LISPARAM	! Recall timer
	,NUM, NML$LISPARAM	! Number
	,POL, NML$LISPARAM	! Polling state
	,OWN, NML$LISOWNER	! Owner entity id
	,USE, NML$LISPARAM	! Usage
	,TYP, NML$LISPARAM	! Type
	,DTE, NML$LISPARAM	! DTE
	,CHN, NML$LISPARAM	! Channel
	,MBL, NML$LISPARAM	! Maximum block
	,MWI, NML$LISPARAM	! Maximum window
	,TRI, NML$LISPARAM	! Tributary
	,BBT, NML$LISPARAM	! Babble timer
	,TRT, NML$LISPARAM	! Transmit timer
	,MRB, NML$LISPARAM	! Maximum receive buffers
	,MTR, NML$LISPARAM	! Maximum transmits
	,ACB, NML$LISPARAM	! Active base
	,ACI, NML$LISPARAM	! Active increment
	,IAB, NML$LISPARAM	! Inactive base
	,IAI, NML$LISPARAM	! Inactive increment
	,IAT, NML$LISPARAM	! Inactive threshold
	,DYB, NML$LISPARAM	! Dying base
	,DYI, NML$LISPARAM	! Dying increment
	,DYT, NML$LISPARAM	! Dying threshold
	,DTH, NML$LISPARAM	! Dead threshold
	,VER, NML$LISPARAM	! Verification (VMS specific)
	,XPT, NML$LISPARAM	! Transport protocol (VMS specific)

	);
!
!    line status
!
PRM_LIST (LIN, STA, PCLI

	,STA, NML$LISPARAM	! State

	);
!
!    line summary
!
PRM_LIST (LIN, SUM, PCLI

	,STA, NML$LISPARAM	! State

	);
!
!    line characteristics
!
PRM_LIST (LIN, CHA, PCLI

	,SER, NML$LISPARAM	! Service
	,LCT, NML$LISPARAM	! Counter timer
	,BFN, NML$LISPARAM	! Number of buffers
	,CON, NML$LISPARAM	! Controller
	,DUP, NML$LISPARAM	! Duplex
	,PRO, NML$LISPARAM	! Protocol type
	,CLO, NML$LISPARAM	! Clock
	,STI, NML$LISPARAM	! Service timer
	,RTT, NML$LISPARAM	! Retransmit timer
	,HTI, NML$LISPARAM	! Holdback timer
	,MBL, NML$LISPARAM	! Maximum block
	,MRT, NML$LISPARAM	! Maximum retransmits
	,MWI, NML$LISPARAM	! Maximum window
	,SLT, NML$LISPARAM	! Scheduling timer
	,DDT, NML$LISPARAM	! Dead timer
	,DLT, NML$LISPARAM	! Delay timer
	,SRT, NML$LISPARAM	! Stream timer
	,HWA, NML$LISPARAM	! Hardware address on NI
	,XMD, NML$LISPARAM	! PCL address mode
	,EPT, NML$LISPARAM	! Ethernet Protocol type
	,BSZ, NML$LISPARAM	! Ethernet Buffer Size

	);
!
! Logging
!
! Logging is not handled using this type of table.  Another mechanism
! is provided elsewhere.
!

!
!    executor status
!
PRM_LIST (EXE, STA, PCNO

	,STA, NML$LISPARAM	! State
	,PHA, NML$LISPARAM	! Physical address on NI

	);
!
!    executor summary
!
PRM_LIST (EXE, SUM, PCNO

	,STA, NML$LISPARAM	! State

	);
!
!    executor characteristics
!
PRM_LIST (EXE, CHA, PCNO

	,IDE, NML$LISPARAM	! Identification
	,MVE, NML$LISNMLVER	! Management version
	,CTI, NML$LISPARAM	! Counter timer
	,ITI, NML$LISPARAM	! Incoming timer
	,OTI, NML$LISPARAM	! Outgoing timer
	,MLK, NML$LISPARAM	! Maximum links
	,DFA, NML$LISPARAM	! Delay factor
	,DWE, NML$LISPARAM	! Delay weight
	,IAT, NML$LISPARAM	! Inactivity timer
	,RFA, NML$LISPARAM	! Retransmit factor
	,ETY, NML$LISPARAM	! Executor node type
	,RTI, NML$LISPARAM	! Routing timer
	,SAD, NML$LISRANGE	! Subaddresses
	,BRT, NML$LISPARAM	! Broadcast routing timer
	,MAD, NML$LISPARAM	! Maximum address
	,MLN, NML$LISPARAM	! Maximum lines
	,MCO, NML$LISPARAM	! Maximum cost
	,MHO, NML$LISPARAM	! Maximum hops
	,MVI, NML$LISPARAM	! Maximum visits
	,MAR, NML$LISPARAM	! Maximum areas
	,MBE, NML$LISPARAM	! Maximum broadcast endnodes
	,MBR, NML$LISPARAM	! Maximum broadcast routers
	,AMC, NML$LISPARAM	! Area maximum cost
	,AMH, NML$LISPARAM	! Area maximum hops
	,MBU, NML$LISPARAM	! Maximum buffers
	,BUS, NML$LISPARAM	! Buffer size
	,SBS, NML$LISPARAM	! Segment buffer size
	,PUS, NML$LISPARAM	! Privileged user id
	,PAC, NML$LISPARAM	! Privileged account
	,PPW, NML$LISPASSWORD	! Privileged password
	,NUS, NML$LISPARAM	! Non-privileged user id
	,NAC, NML$LISPARAM	! Non-privileged account
	,NPW, NML$LISPASSWORD	! Non-privileged password
	,RPA, NML$LISPASSWORD	! Receive password
	,TPA, NML$LISPASSWORD	! Transmit password
	,ACC, NML$LISPARAM	! Transmit password
	,DAC, NML$LISPARAM	! Default access
 	,PIQ, NML$LISPARAM	! Pipeline quota
 	,ALI, NML$LISPARAM	! Node alias
	,PRX, NML$LISPARAM	! Proxy access
	,DPX, NML$LISPARAM	! Default proxy access

	);
!
!    node status
!
PRM_LIST (NOD, STA, PCNO

	,NLI, NML$LISPARAM	! Line
	,NND, NML$LISNODEID	! Next node to destination

	);
!
!    node summary
!
PRM_LIST (NOD, SUM, PCNO

	,NLI, NML$LISPARAM	! Line
	,NND, NML$LISNODEID	! Next node to destination

	);
!
!    node characteristics
!
PRM_LIST (NOD, CHA, PCNO

	,SLI, NML$LISPARAM	! Service circuit
	,SPA, NML$LISPARAM	! Service password
	,SDV, NML$LISPARAM	! Service device
	,CPU, NML$LISPARAM	! CPU type
	,HWA, NML$LISPARAM	! Hardware address on NI
	,SNV, NML$LISPARAM	! Service node version
	,LOA, NML$LISPARAM	! Load file
	,SLO, NML$LISPARAM	! Secondary loader
	,TLO, NML$LISPARAM	! Tertiary loader
	,DFL, NML$LISPARAM	! Diagnostic file
	,STY, NML$LISPARAM	! Software type
	,SID, NML$LISPARAM	! Software id
	,DUM, NML$LISPARAM	! Dump file
	,SDU, NML$LISPARAM	! Secondary dumper
	,DAD, NML$LISPARAM	! Dump address
	,DCT, NML$LISPARAM	! Dump count
	,IHO, NML$LISNODEID	! Host
	,CTI, NML$LISPARAM	! Counter timer
	,NLI, NML$LISPARAM	! Line
	,PUS, NML$LISPARAM	! Privileged user id
	,PAC, NML$LISPARAM	! Privileged account
	,PPW, NML$LISPASSWORD	! Privileged password
	,NUS, NML$LISPARAM	! Non-privileged user id
	,NAC, NML$LISPARAM	! Non-privileged account
	,NPW, NML$LISPASSWORD	! Non-privileged password
	,RPA, NML$LISPASSWORD	! Receive password
	,TPA, NML$LISPASSWORD	! Transmit password
	,ACC, NML$LISPARAM	! Access
	,PRX, NML$LISPARAM	! Proxy access

	);
!
!    node status (by name)
!
BIND
    NML$Q_P_NDNSTA_TABDES = NML$Q_P_NODSTA_TABDES;
!
!    node summary (by name)
!
BIND
    NML$Q_P_NDNSUM_TABDES = NML$Q_P_NODSUM_TABDES;
!
!    node characteristics (by name)
!
BIND
    NML$Q_P_NDNCHA_TABDES = NML$Q_P_NODCHA_TABDES;
!
!    loop node status
!
PRM_LIST (LOO, SUM, PCNO

	,NLI, NML$LISPARAM	! Line

	);

!
! X-25 Access Module Network - characteristics
!
PRM_LIST (ACC, CHA, PCXA

	,NOD, NML$LISNODEID	! Node number
	,USR, NML$LISPARAM	! User
	,PSW, NML$LISPWSET	! Password
	,ACC, NML$LISPARAM	! Account
	);
!
!    X25-Access Network characteristics
!
BIND
    NML$Q_P_ACCSTA_TABDES = NML$Q_P_ACCCHA_TABDES,
    NML$Q_P_ACCSUM_TABDES = NML$Q_P_ACCCHA_TABDES;

!
!    List X-25 Protocol network params - characteristics
!
PRM_LIST (NET, CHA, PCXP
	,DBL, NML$LISPARAM	! Default data
	,DWI, NML$LISPARAM	! Default window
	,MBL, NML$LISPARAM	! Maximum data
	,MWI, NML$LISPARAM	! Maximum window
	,MCL, NML$LISPARAM	! Maximum clears
	,MRS, NML$LISPARAM	! Maximum resets
	,MST, NML$LISPARAM	! Maximum restarts
	,CAT, NML$LISPARAM	! Call timer
	,CLT, NML$LISPARAM	! Clear timer
	,RST, NML$LISPARAM	! Reset timer
	,STT, NML$LISPARAM	! Restart timer
	,MNS, NML$LISPARAM	! Multinetwork support
	);

!
!    X-25 Protocol DTE status
!
PRM_LIST (DTE, STA, PCXP
	,STA, NML$LISPARAM	! State
	);

!
!    X-25 Protocol DTE characteristics
!
PRM_LIST (DTE, CHA, PCXP
	,CTM, NML$LISPARAM	! Counter timer
	,LIN, NML$LISPARAM	! Line
	,CHN, NML$LISRANGE	! Channels
	);

!
!    X-25 Protocol Group characteristics
!
PRM_LIST (GRP, CHA, PCXP
	,GDT, NML$LISPARAM	! DTE number
	,GNM, NML$LISPARAM	! Group number
	,GTY, NML$LISPARAM	! Group type
	);
!
! X-25 and X-29 Server Module status and summary
!
PRM_LIST (SVR, SUM, PCXS
	,STA, NML$LISPARAM	! State
	);

!
! X-25 and X-29 Server Module characteristics
!
PRM_LIST (SVR, CHA, PCXS
	,CTM, NML$LISPARAM	! Counter timer
	,MCI, NML$LISPARAM	! Maximum circuits
	);
!
! X-25 Server Module Destination characteristics
!
PRM_LIST (DST, CHA, PCXS
	,NOD, NML$LISNODEID	! Node
	,USR, NML$LISPARAM	! Username
	,SPW, NML$LISPWSET	! Password set indication
	,ACC, NML$LISPARAM	! Account
	,OBJ, NML$LISPARAM	! Object
	,PRI, NML$LISPARAM	! Priority
	,CMK, NML$LISPARAM	! Call mask
	,CVL, NML$LISPARAM	! Call value
	,GRP, NML$LISPARAM	! Group
	,NUM, NML$LISPARAM	! Number
	,SAD, NML$LISRANGE	! Subaddresses
	,FIL, NML$LISPARAM	! Object startup file
	);

!
! X-25 Trace Module summary and status
!
PRM_LIST (TRA, SUM, PCXT
	,STA, NML$LISPARAM	! State
	,FNM, NML$LISPARAM	! File name
	);
!
! X-25 Trace Module characteristics
!
PRM_LIST (TRA, CHA, PCXT

	,BSZ, NML$LISPARAM	! Buffer size
	,MBK, NML$LISPARAM	! Maximum blocks/file
	,FNM, NML$LISPARAM	! File name
	,MBF, NML$LISPARAM	! Maximum number of buffers
	,CPL, NML$LISPARAM	! Global data capture limit
	,MVR, NML$LISPARAM	! Maximum trace file version
	);
!
! X-25 Tracepoint Module summary and status
!
PRM_LIST (TPT, SUM, PCXT
	,TST, NML$LISPARAM	! Per-trace state
	);
!
! X-25 Tracepoint Module characteristics
!
PRM_LIST (TPT, CHA, PCXT
	,CPS, NML$LISPARAM	! Per-trace capture size
	,TST, NML$LISPARAM	! Per-trace state
	);

!
!    configurator module status
!
PRM_LIST (CNF, STA, PCCN

	,SUR, NML$LISPARAM	! Surveillance
	);

!
!    object status
!
PRM_LIST (OBJ, STA, PCOB

	,NUM, NML$LISPARAM	! Number
	,FID, NML$LISPARAM	! File id
	,PRV, NML$LISPARAM	! Privilege list
	,USR, NML$LISPARAM	! User id
	,ACC, NML$LISPARAM	! Account
	,PSW, NML$LISPASSWORD	! Password

	);
!
!    object summary
!
PRM_LIST (OBJ, SUM, PCOB

	,NUM, NML$LISPARAM	! Number
	,FID, NML$LISPARAM	! File id
	,PRV, NML$LISPARAM	! Privilege list
	,USR, NML$LISPARAM	! User id
	,ACC, NML$LISPARAM	! Account
	,PSW, NML$LISPASSWORD	! Password

	);
!
!    object characteristics
!
PRM_LIST (OBJ, CHA, PCOB

	,NUM, NML$LISPARAM	! Number
	,FID, NML$LISPARAM	! File id
	,PRV, NML$LISPARAM	! Privilege list
	,USR, NML$LISPARAM	! User id
	,ACC, NML$LISPARAM	! Account
	,PSW, NML$LISPASSWORD	! Password
	,PRX, NML$LISPARAM	! Proxy access

	);

UNDECLARE
    %QUOTE PRM_LIST,
    %QUOTE $DEXTN;


%SBTTL 'SHOW parameter tables'
!
! Parameter list definition macro.
!
MACRO
    PRM_SHOW (TAB, TYP, PRM) []  =

	SWITCHES UNAMES;
	PSECT
	    PLIT = NML$PARAMLISTS;

	GLOBAL BIND
	    %NAME ('NML$Q_',TAB, TYP, '_TABDES') =
		UPLIT ((%LENGTH - 2) / 2,
			UPLIT BYTE ($DEXTN (PRM, %REMAINING)));

	PSECT PLIT = $PLIT$;
	SWITCHES NOUNAMES;
    %,

    $DEXTN (TAB) [A, B] =
	WORD (%NAME ('PST$K_', TAB, '_', A)),
	LONG (B)
    %;
!
! Declare routines used to get parameters.
!
EXTERNAL ROUTINE
    NML$SHOPARAM,
    NML$SHOEXEPARAM,
    NML$SHOCOUNTERS,
    NML$SHONODEID,
    NML$SHOOBJPRV,
    NML$SHOSERVPASS,
    NML$SHONMLVER,
    NML$SHOREMSTA,
    NML$SHOVERSION,
    NML$SHOPWSET,
    NML$SHORANGE,
    NML$SHOCHANNELS,
    NML$SHOOWNER,
    NML$SKIPLONG,
    NML$SKIPSTRING;
!
!***************************************************************************
!
! NOTE:  Any changes to a table (order or content) must be reflected in
!	 the NFB corresponding to that table.
!
!***************************************************************************
!
!    Circuit summary and status
!
PRM_SHOW (CIR, SUM, PCCI

	,STA, NML$SHOPARAM	! State
	,SUB, NML$SHOPARAM	! Substate
	,LOO, NML$SHOPARAM	! Loopback name

	);

!
!    Circuit characteristics
!
PRM_SHOW (CIR, CHA, PCCI

	,STA, NML$SHOPARAM	! State
	,SUB, NML$SHOPARAM	! Substate
	,SER, NML$SHOPARAM	! Service
	,LCT, NML$SHOPARAM	! Counter timer
!?	,CNO, NML$SHONODEID	! Connected node 	!??
!?	,COB, NML$SHOPARAM	! Connected object 	!??
	,LOO, NML$SHOPARAM	! Loopback name
	,DRT, NML$SHONODEID	! Designated router on NI
	,COS, NML$SHOPARAM	! Cost
	,MRT, NML$SHOPARAM	! Maximum routers on NI
	,RPR, NML$SHOPARAM	! Router priority on NI
	,HET, NML$SHOPARAM	! Hello timer
	,BLK, NML$SHOPARAM	! Blocking
	,MRC, NML$SHOPARAM	! Maximum recalls
	,RCT, NML$SHOPARAM	! Recall timer
	,NUM, NML$SHOPARAM	! Number
!?	,USR, NML$SHOPARAM	! User  		!??
	,POL, NML$SHOPARAM	! Polling state
	,PLS, NML$SHOPARAM	! Polling substate
	,OWN, NML$SHOOWNER	! Owner entity id
	,USE, NML$SHOPARAM	! Usage
	,TYP, NML$SHOPARAM	! Type
	,DTE, NML$SHOPARAM	! DTE
	,CHN, NML$SHOPARAM	! Channel
	,MBL, NML$SHOPARAM	! Maximum block
	,MWI, NML$SHOPARAM	! Maximum window
	,TRI, NML$SHOPARAM	! Tributary
	,BBT, NML$SHOPARAM	! Babble timer
	,TRT, NML$SHOPARAM	! Transmit timer
	,MRB, NML$SHOPARAM	! Maximum receive buffers
	,MTR, NML$SHOPARAM	! Maximum transmits
	,ACB, NML$SHOPARAM	! Active base
	,ACI, NML$SHOPARAM	! Active increment
	,IAB, NML$SHOPARAM	! Inactive base
	,IAI, NML$SHOPARAM	! Inactive increment
	,IAT, NML$SHOPARAM	! Inactive threshold
	,DYB, NML$SHOPARAM	! Dying base
	,DYI, NML$SHOPARAM	! Dying increment
	,DYT, NML$SHOPARAM	! Dying threshold
	,DTH, NML$SHOPARAM	! Dead threshold
	,VER, NML$SHOPARAM	! Verification (VMS specific)
	,XPT, NML$SHOPARAM	! Transport protocol (VMS specific)

	);

!
!    Circuit counters
!
PRM_SHOW (CIR, COU, PCCI

	,CC$, NML$SHOCOUNTERS

	);
!
! Circuit Adjacency summary
!
PRM_SHOW (CAJ, SUM, PCCI

	,ADJ, NML$SHONODEID	! Adjacent node
	);
!
! Circuit Adjacency status
!
PRM_SHOW (CAJ, STA, PCCI

	,ADJ, NML$SHONODEID	! Adjacent node
	,BLO, NML$SHOPARAM	! Block size
	);
!
! Circuit Adjacency characteristics
!
PRM_SHOW (CAJ, CHA, PCCI

	,ADJ, NML$SHONODEID	! Adjacent node
	,LIT, NML$SHOPARAM	! Listen Timer
	);
!
! Circuit Service Adjacency status
!
PRM_SHOW (CSA, SUM, PCCI

	,SPY, NML$SHOPARAM	! Service Physical Address
	,SSB, NML$SHOPARAM	! Service Substate
	);
!
!    zero circuit counters
!
BIND
    NML$Q_CIRZER_TABDES = 0;

!
!    line status
!
PRM_SHOW (LIN, STA, PCLI

	,STA, NML$SHOPARAM	! State
	,SUB, NML$SHOPARAM	! Substate

	);
!
!    line summary
!
PRM_SHOW (LIN, SUM, PCLI

	,STA, NML$SHOPARAM	! State
	,SUB, NML$SHOPARAM	! Substate

	);
!
!    line characteristics
!
PRM_SHOW (LIN, CHA, PCLI

	,SER, NML$SHOPARAM	! Service
	,LCT, NML$SHOPARAM	! Counter timer
	,BFN, NML$SHOPARAM	! Number of buffers
	,CON, NML$SHOPARAM	! Controller
	,DUP, NML$SHOPARAM	! Duplex
	,PRO, NML$SHOPARAM	! Protocol type
	,CLO, NML$SHOPARAM	! Clock
	,STI, NML$SHOPARAM	! Service timer
	,RTT, NML$SHOPARAM	! Retransmit timer
	,HTI, NML$SHOPARAM	! Holdback timer
	,MBL, NML$SHOPARAM	! Maximum block
	,MRT, NML$SHOPARAM	! Maximum retransmits
	,MWI, NML$SHOPARAM	! Maximum window
	,SLT, NML$SHOPARAM	! Scheduling timer
	,DDT, NML$SHOPARAM	! Dead timer
	,DLT, NML$SHOPARAM	! Delay timer
	,SRT, NML$SHOPARAM	! Stream timer
	,HWA, NML$SHOPARAM	! Hardware address on NI
	,XMD, NML$SHOPARAM	! PCL address mode
	,EPT, NML$SHOPARAM	! Ethernet protocol type
	,BSZ, NML$SHOPARAM	! Ethernet Buffer Size

	);
!
!    line counters
!
PRM_SHOW (LIN, COU, PCLI

	,LC$, NML$SHOCOUNTERS

	);
!
!    zero line counters
!
BIND
    NML$Q_LINZER_TABDES = 0;

!
!    logging
!
! Logging is handled by another mechanism but these symbols must be defined
! to allow the information table to work correctly.
!
BIND
    NML$Q_LOGSUM_TABDES = 0,
    NML$Q_LOGSTA_TABDES = 0,
    NML$Q_LOGCHA_TABDES = 0,
    NML$Q_LOGEVE_TABDES = 0,
    NML$Q_SNKSUM_TABDES = 0,
    NML$Q_SNKSTA_TABDES = 0,
    NML$Q_SNKCHA_TABDES = 0,
    NML$Q_SNKEVE_TABDES = 0;
!
!    executor status
!
PRM_SHOW (EXE, STA, PCNO

	,STA, NML$SHOEXEPARAM	! State
	,STA, NML$SKIPLONG	! *skip*
	,PHA, NML$SHOEXEPARAM	! Physical NI address
	,ACL, NML$SHOPARAM	! Active links
	,DEL, NML$SHOPARAM	! Delay

	);
!
!    executor summary
!
PRM_SHOW (EXE, SUM, PCNO

	,STA, NML$SHOEXEPARAM	! State
	,IDE, NML$SHOEXEPARAM	! Identification
	,STA, NML$SKIPLONG	! *skip*
	,NLI, NML$SKIPSTRING	! *skip*
	,ACL, NML$SHOPARAM	! Active links

	);
!
!    executor characteristics
!
PRM_SHOW (EXE, CHA, PCNO

	,IDE, NML$SHOEXEPARAM	! Identification
	,MVE, NML$SHONMLVER	! Management version
	,SLI, NML$SKIPSTRING	! *skip*
	,SPA, NML$SKIPSTRING	! *skip*
	,SDV, NML$SKIPLONG	! *skip*
	,CPU, NML$SKIPLONG	! *skip*
	,HWA, NML$SKIPSTRING	! *skip*
	,SNV, NML$SKIPLONG	! *skip*
	,LOA, NML$SKIPSTRING	! *skip*
	,SLO, NML$SKIPSTRING	! *skip*
	,TLO, NML$SKIPSTRING	! *skip*
	,DFL, NML$SKIPSTRING	! *skip*
	,STY, NML$SKIPLONG	! *skip*
	,SID, NML$SKIPSTRING	! *skip*
	,DUM, NML$SKIPSTRING	! *skip*
	,SDU, NML$SKIPSTRING	! *skip*
	,DAD, NML$SKIPLONG	! *skip*
	,DCT, NML$SKIPLONG	! *skip*
	,OHO, NML$SKIPLONG	! *skip*
	,CTI, NML$SHOPARAM	! Counter timer
	,NLI, NML$SKIPSTRING	! *skip*
	,ITI, NML$SHOEXEPARAM	! Incoming timer
	,OTI, NML$SHOEXEPARAM	! Outgoing timer
	,NVE, NML$SHOVERSION	! NSP version
	,MLK, NML$SHOEXEPARAM	! Maximum links
	,DFA, NML$SHOEXEPARAM	! Delay factor
	,DWE, NML$SHOEXEPARAM	! Delay weight
	,IAT, NML$SHOEXEPARAM	! Inactivity timer
	,RFA, NML$SHOEXEPARAM	! Retransmit factor
	,RVE, NML$SHOVERSION	! Routing version
	,ETY, NML$SHOEXEPARAM	! Executor node type
	,RTI, NML$SHOEXEPARAM	! Routing timer
	,SAD, NML$SHOEXEPARAM	! Subaddresses
	,BRT, NML$SHOEXEPARAM	! Broadcast routine timer
	,MAD, NML$SHOEXEPARAM	! Maximum address
	,MLN, NML$SHOEXEPARAM	! Maximum lines
	,MCO, NML$SHOEXEPARAM	! Maximum cost
	,MHO, NML$SHOEXEPARAM	! Maximum hops
	,MVI, NML$SHOEXEPARAM	! Maximum visits
	,MAR, NML$SHOEXEPARAM	! Maximum areas
	,MBE, NML$SHOEXEPARAM	! Maximum broadcast endnodes
	,MBR, NML$SHOEXEPARAM	! Maximum broadcast routers
	,AMC, NML$SHOEXEPARAM	! Area maximum cost
	,AMH, NML$SHOEXEPARAM	! Area maximum hops
	,MBU, NML$SHOEXEPARAM	! Maximum buffers
	,SBS, NML$SHOEXEPARAM	! Segment buffer size
	,BUS, NML$SHOEXEPARAM	! Buffer size
	,PUS, NML$SHOPARAM	! Privileged user id
	,PAC, NML$SHOPARAM	! Privileged account
	,PPW, NML$SHOPARAM	! Privileged password
	,NUS, NML$SHOPARAM	! Non-privileged user id
	,NAC, NML$SHOPARAM	! Non-privileged account
	,NPW, NML$SHOPARAM	! Non-privileged password
	,RPA, NML$SHOPARAM	! Receive password
	,TPA, NML$SHOPARAM	! Transmit password
	,ACC, NML$SHOPARAM	! Access
	,DAC, NML$SHOEXEPARAM	! Default access
 	,PIQ, NML$SHOEXEPARAM	! Pipeline quota
 	,ALI, NML$SHOEXEPARAM	! Node alias
	,DPX, NML$SHOEXEPARAM	! Default proxy access

	);
!
!    show executor counters - use node counters
!

!
!    zero executor counters
!
BIND
    NML$Q_EXEZER_TABDES = 0;
!
!    node status
!
PRM_SHOW (NOD, STA, PCNO

	,STA, NML$SHOREMSTA	! State
	,ACL, NML$SHOPARAM	! Active links
	,DEL, NML$SHOPARAM	! Delay
	,DTY, NML$SHOPARAM	! Type
	,DCO, NML$SHOPARAM	! Cost
	,DHO, NML$SHOPARAM	! Hops
	,DLI, NML$SHOPARAM	! Line (path)
	,NND, NML$SHONODEID	! Next node to destination

	);
!
!    node summary
!
PRM_SHOW (NOD, SUM, PCNO

	,STA, NML$SHOREMSTA	! State
	,NLI, NML$SHOPARAM	! Line
	,ACL, NML$SHOPARAM	! Active links
	,DEL, NML$SHOPARAM	! Delay
	,DLI, NML$SHOPARAM	! Line
	,NND, NML$SHONODEID	! Next node to destination

	);
!
!    node characteristics
!
PRM_SHOW (NOD, CHA, PCNO

	,SLI, NML$SHOPARAM	! Service circuit
	,SPA, NML$SHOSERVPASS	! Service password
	,SDV, NML$SHOPARAM	! Service device
	,CPU, NML$SHOPARAM	! CPU type
	,HWA, NML$SHOPARAM	! Hardware address on NI
	,SNV, NML$SHOPARAM	! Service node version
	,LOA, NML$SHOPARAM	! Load file
	,SLO, NML$SHOPARAM	! Secondary loader
	,TLO, NML$SHOPARAM	! Tertiary loader
	,DFL, NML$SHOPARAM	! Diagnostic file
	,STY, NML$SHOPARAM	! Software type
	,SID, NML$SHOPARAM	! Software id
	,DUM, NML$SHOPARAM	! Dump file
	,SDU, NML$SHOPARAM	! Secondary dumper
	,DAD, NML$SHOPARAM	! Dump address
	,DCT, NML$SHOPARAM	! Dump count
	,OHO, NML$SHONODEID	! Host
	,CTI, NML$SHOPARAM	! Counter timer
	,NLI, NML$SHOPARAM	! Line
	,PUS, NML$SHOPARAM	! Privileged user id
	,PAC, NML$SHOPARAM	! Privileged account
	,PPW, NML$SHOPARAM	! Privileged password
	,NUS, NML$SHOPARAM	! Non-privileged user id
	,NAC, NML$SHOPARAM	! Non-privileged account
	,NPW, NML$SHOPARAM	! Non-privileged password
	,RPA, NML$SHOPARAM	! Receive password
	,TPA, NML$SHOPARAM	! Transmit password
	,ACC, NML$SHOPARAM	! Access

	);
!
!    node counters
!
PRM_SHOW (NOD, COU, PCNO

	,NC$, NML$SHOCOUNTERS

	);

BIND
	NML$Q_EXECOU_TABDES = NML$Q_NODCOU_TABDES;
!
!    zero node counters
!
BIND
    NML$Q_NODZER_TABDES = 0;
!
! Node by name tables
!
BIND
    NML$Q_NDNSUM_TABDES = NML$Q_NODSUM_TABDES,
    NML$Q_NDNSTA_TABDES = NML$Q_NODSTA_TABDES,
    NML$Q_NDNCHA_TABDES = NML$Q_NODCHA_TABDES,
    NML$Q_NDNCOU_TABDES = NML$Q_NODCOU_TABDES,
    NML$Q_NDNZER_TABDES = NML$Q_NODZER_TABDES;

!
!    loop node summary, status, and characteristics.
!
PRM_SHOW (LOO, SUM, PCNO

	,NLI, NML$SHOPARAM	! Line

	);

!
!    Area status
!
PRM_SHOW (ARE, SUM, PCAR

	,STA, NML$SHOREMSTA	! State
	,CIR, NML$SHOPARAM	! Circuit
	,NND, NML$SHONODEID	! Next node to destination

	);

!
!    Area summary and characteristics
!
PRM_SHOW (ARE, STA, PCAR

	,STA, NML$SHOREMSTA	! State
	,COS, NML$SHOPARAM	! Cost
	,HOP, NML$SHOPARAM	! Hops
	,CIR, NML$SHOPARAM	! Circuit
	,NND, NML$SHONODEID	! Next node to destination

	);
!
! X-25 Access Module Network - characteristics
!
PRM_SHOW (ACC, CHA, PCXA

	,NET, NML$SHOPARAM	! Network name
	,NOD, NML$SHONODEID	! Node number and name
	,USR, NML$SHOPARAM	! User
	,PSW, NML$SHOPWSET	! Password
	,ACC, NML$SHOPARAM	! Account
	);

BIND
	NML$Q_ACCSUM_TABDES = NML$Q_ACCCHA_TABDES,
	NML$Q_ACCSTA_TABDES = NML$Q_ACCCHA_TABDES;

!
!    Show X-25 Protocol network params - characteristics
!
PRM_SHOW (NET, CHA, PCXP
	,NET, NML$SHOPARAM	! Network
	,DBL, NML$SHOPARAM	! Default data
	,DWI, NML$SHOPARAM	! Default window
	,MBL, NML$SHOPARAM	! Maximum data
	,MWI, NML$SHOPARAM	! Maximum window
	,MCL, NML$SHOPARAM	! Maximum clears
	,MRS, NML$SHOPARAM	! Maximum resets
	,MST, NML$SHOPARAM	! Maximum restarts
	,CAT, NML$SHOPARAM	! Call timer
	,CLT, NML$SHOPARAM	! Clear timer
	,RST, NML$SHOPARAM	! Reset timer
	,STT, NML$SHOPARAM	! Restart timer
	,MNS, NML$SHOPARAM	! Multinetwork support
	);


!
!    X-25 Protocol DTE status
!
PRM_SHOW (DTE, STA, PCXP
	,DTE, NML$SHOPARAM	! DTE ID
	,STA, NML$SHOPARAM	! State
	,ACH, NML$SHOPARAM	! Active channels
	,ASW, NML$SHOPARAM	! Active switched
	,SBS, NML$SHOPARAM	! Substate
	);


!
!    X-25 Protocol DTE characteristics
!
PRM_SHOW (DTE, CHA, PCXP
	,DTE, NML$SHOPARAM	! DTE ID
	,CTM, NML$SHOPARAM	! Counter timer
	,LIN, NML$SHOPARAM	! Line
	,CHN, NML$SHOCHANNELS	! Channels
	,MCH, NML$SHOPARAM	! Maximum channels
	,MCI, NML$SHOPARAM	! Maximum circuits
	);
!
! X-25 Protocol DTE Counters
!
PRM_SHOW (DTE, COU, PCXP
	,DTE, NML$SHOPARAM	! DTE ID
	,PC$, NML$SHOCOUNTERS	! Counters
	);
!
!    X-25 Protocol zero counters
!
BIND
    NML$Q_DTEZER_TABDES = 0;


!
!    X-25 Protocol Group characteristics
!
PRM_SHOW (GRP, CHA, PCXP
	,GRP, NML$SHOPARAM	! Group name
	,GDT, NML$SHOPARAM	! DTE number
	,GNM, NML$SHOPARAM	! Group number
	,GTY, NML$SHOPARAM	! Group type
	);


!
! X-25 Server Module status and summary
!
PRM_SHOW (SV5, SUM, PCXS
	,ACI, NML$SHOPARAM	! Active circuits
	,STA, NML$SHOPARAM	! State
	);
!
! X-25 Server Module characteristics
!
PRM_SHOW (SV5, CHA, PCXS
	,CTM, NML$SHOPARAM	! Counter timer
	,MCI, NML$SHOPARAM	! Maximum circuits
	);
!
! X-25 Server Module Counters
!
PRM_SHOW (SV5, COU, PCXS
	,SC$, NML$SHOCOUNTERS
	);
!
! X-25 Server Module zero counters
!
BIND
    NML$Q_SV5ZER_TABDES = 0;


!
! X-25 Server Module Destination characteristics
!
PRM_SHOW (DST5, CHA, PCXS
	,DST, NML$SHOPARAM	! Destination
	,NOD, NML$SHONODEID	! Node address and name
	,USR, NML$SHOPARAM	! Username
	,RPW, NML$SHOPWSET	! Password setting
	,ACC, NML$SHOPARAM	! Account
	,OBJ, NML$SHOPARAM	! Object
	,PRI, NML$SHOPARAM	! Priority
	,CMK, NML$SHOPARAM	! Call mask
	,CVL, NML$SHOPARAM	! Call value
	,GRP, NML$SHOPARAM	! Group
	,NUM, NML$SHOPARAM	! Number
	,SAD, NML$SHORANGE	! Subaddresses
	,FIL, NML$SHOPARAM	! Object startup file
	);
!
! X-25 Trace Module status and summary
!
PRM_SHOW(TRA, SUM, PCXT
	,STA, NML$SHOPARAM	! Trace state
	,FNM, NML$SHOPARAM	! File name
	);
!
! X-25 Trace Module characteristics
!
PRM_SHOW(TRA, CHA, PCXT
	,BSZ, NML$SHOPARAM	! Buffer size
	,MBK, NML$SHOPARAM	! Maximum blocks/file
	,FNM, NML$SHOPARAM	! File name
	,MBF, NML$SHOPARAM	! Maximum number of buffers
	,CPL, NML$SHOPARAM	! Global data capture limit
	,MVR, NML$SHOPARAM	! Maximum trace file version
	);

!
! X-25 Tracepoint Module status and summary
!
PRM_SHOW(TPT, SUM, PCXT
	,TPT, NML$SHOPARAM	! Tracepoint name
	,TST, NML$SHOPARAM	! Per-Trace state
	);
!
! X-25 Tracepoint Module characteristics
!
PRM_SHOW(TPT, CHA, PCXT
	,TPT, NML$SHOPARAM	! Tracepoint name
	,CPS, NML$SHOPARAM	! Per-trace capture size
	,TST, NML$SHOPARAM	! Per-trace state
	);
!
! X-29 Server Module status, characteristics, read counters,
! and zero counters.
!
BIND
    NML$Q_SV9SUM_TABDES = NML$Q_SV5SUM_TABDES,
    NML$Q_SV9CHA_TABDES = NML$Q_SV5CHA_TABDES,
    NML$Q_SV9COU_TABDES = NML$Q_SV5COU_TABDES,
    NML$Q_SV9ZER_TABDES = NML$Q_SV5ZER_TABDES;

!
! X-29 Server Module Destination characteristics
!
BIND
    NML$Q_DST9CHA_TABDES = NML$Q_DST5CHA_TABDES;

!
!    object status
!
PRM_SHOW (OBJ, STA, PCOB

	,NUM, NML$SHOPARAM	! Number
	,FID, NML$SHOPARAM	! File id
	,PID, NML$SHOPARAM	! Process id
	,USR, NML$SHOPARAM	! User id
	,PSW, NML$SHOPARAM	! Password

	);
!
!    object summary
!
PRM_SHOW (OBJ, SUM, PCOB

	,NUM, NML$SHOPARAM	! Number
	,FID, NML$SHOPARAM	! File id
	,PID, NML$SHOPARAM	! Process id
	,USR, NML$SHOPARAM	! User id
	,PSW, NML$SHOPARAM	! Password

	);
!
!    object characteristics
!
PRM_SHOW (OBJ, CHA, PCOB

	,NUM, NML$SHOPARAM	! Number
	,FID, NML$SHOPARAM	! File id
	,PID, NML$SHOPARAM	! Process id
	,PRV, NML$SHOOBJPRV	! Privilege list
	,USR, NML$SHOPARAM	! User id
	,ACC, NML$SHOPARAM	! Account
	,PSW, NML$SHOPARAM	! Password
	,PRX, NML$SHOPARAM	! Proxy access

	);
!
!	link status
!
PRM_SHOW (LNK, STA, PCLK

	,STA, NML$SHOPARAM	! State
	,PID, NML$SHOPARAM	! Process ID
	,NID, NML$SHONODEID	! Partner node ID
	,RLN, NML$SHOPARAM	! Remote link number
	,PRC, NML$SHOPARAM	! Process name

	);
!
! 	link summary
!
PRM_SHOW (LNK, SUM, PCLK

	,PID, NML$SHOPARAM	! Process ID
	,NID, NML$SHONODEID	! Partner node ID
	,RLN, NML$SHOPARAM	! Remote link number
	,RID, NML$SHOPARAM	! Remote identification
	,PRC, NML$SHOPARAM	! Process name

	);
!
!	link characteristics
!
PRM_SHOW (LNK, CHA, PCLK

	,STA, NML$SHOPARAM	! State
	,PID, NML$SHOPARAM	! Process ID
	,NID, NML$SHONODEID	! Partner node ID
	,DLY, NML$SHOPARAM	! Round trip delay time
	,RLN, NML$SHOPARAM	! Remote link number
	,RID, NML$SHOPARAM	! Remote identification
	,USR, NML$SHOPARAM	! User name
	,PRC, NML$SHOPARAM	! Process name

	);

UNDECLARE
    %QUOTE PRM_SHOW,
    %QUOTE $DEXTN;


%SBTTL 'NFB data for showing volatile entity information'
!
! Each NFB is used to retrieve a specific set of volatile data base 
! information for the specified entity.
!
!***************************************************************************
!
! NOTE:  Any changes to an NFB (order or content) must be reflected in
!	 the SHOW parameter table corresponding to that NFB.
!
!***************************************************************************

!
! Circuit status and summary
!
$NFBDSC (NML$Q_CIRSUM_NFBDSC, SHOW, , CRI

	,NAM,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,TYP		! Type - determines whether to look at SDI database
	,NAM		! Name
	,STA		! State
	,SUB		! Substate
	,LOO		! Loopback name

	);
!
! Circuit characteristics
!
$NFBDSC (NML$Q_CIRCHA_NFBDSC, SHOW, , CRI

	,NAM,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,TYP		! Type - determines whether to look at SDI database
	,NAM		! Name
	,STA		! State
	,SUB		! Substate
	,SER		! Service control
	,LCT		! Counter timer
!?	,CNO		! Connected node
!?	,COB		! Connected object
	,LOO		! Loopback name
	,DRT		! Designated router
	,COS		! Cost
	,MRT		! Maximum routers on NI
	,RPR		! Router priority on NI
	,HET		! Hello timer
	,BLK		! Blocking
	,MRC		! Maximum recalls
	,RCT		! Recall timer
	,NUM		! Number
!?	,USR		! User
	,POL		! Polling state
	,PLS		! Polling substate
	,DLM		! Data Link Mapping (Owner entity id)
	,USE		! Usage
	,TYP		! Type
	,DTE		! DTE
	,CHN		! Channel
	,MBL		! Maximum block
	,MWI		! Maximum window
	,TRI		! Tributary
	,BBT		! Babble timer
	,TRT		! Transmit timer
	,MRB		! Maximum receive buffers
	,MTR		! Maximum transmits
	,ACB		! Active base
	,ACI		! Active increment
	,IAB		! Inactive base
	,IAI		! Inactive increment
	,IAT		! Inactive threshold
	,DYB		! Dying base
	,DYI		! Dying increment
	,DYT		! Dying threshold
	,DTH		! Dead threshold
	,VER		! Verification
	,XPT		! Transport protocol

	);
!
! Circuit counters
!
$NFBDSC (NML$Q_CIRCOU_NFBDSC, SHOW, , CRI

	,NAM,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,TYP		! Type - determines whether to look at SDI database
	,NAM		! Name
	,CNT		! Counters

	);
!
! Zero circuit counters
!
$NFBDSC (NML$Q_CIRZER_NFBDSC, ZERCOU, , CRI

	,NAM,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CNT		! Counters

	);
!
! Circuit Adjacency summary
!
$NFBDSC (NML$Q_CAJSUM_NFBDSC, SHOW, , AJI

	,CIR,		! Search key one = circuit ID, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CIR		! Circuit ID (entity ID)
	,ADD		! Adjacent node address
	,NNA		! Adjacent node name

	);

!
! Circuit Adjacency status
!
$NFBDSC (NML$Q_CAJSTA_NFBDSC, SHOW, , AJI

	,CIR,		! Search key one = circuit ID, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CIR		! Circuit ID (entity ID)
	,ADD		! Adjacent node address
	,NNA		! Adjacent node name
	,BLO		! Block size

	);
!
! Circuit Adjacency characteristics
!
$NFBDSC (NML$Q_CAJCHA_NFBDSC, SHOW, , AJI

	,CIR,		! Search key one = circuit ID, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CIR		! Circuit ID (entity ID)
	,ADD		! Adjacent node address
	,NNA		! Adjacent node name
	,LIT		! Listen timer

	);
!
! Circuit Service Adjacency summary
!
$NFBDSC (NML$Q_CSASUM_NFBDSC, SHOW, , SDI

	,CIR,		! Search key one = circuit ID, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CIR		! Circuit ID (entity ID)
	,PHA		! Service physical address
	,SUB		! Service substate

	);
!
! Line status.
!
$NFBDSC (NML$Q_LINSTA_NFBDSC, SHOW, , PLI

	,NAM,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,NAM		! Name
	,STA		! State
	,SUB		! Substate

	);
!
! Line summary
!
$NFBDSC (NML$Q_LINSUM_NFBDSC, SHOW, , PLI

	,NAM,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,NAM		! Name
	,STA		! State
	,SUB		! Substate

	);
!
! Line characteristics
!
$NFBDSC (NML$Q_LINCHA_NFBDSC, SHOW, , PLI

	,NAM,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,NAM		! Name
	,SER		! Service control
	,LCT		! Counter timer
	,BFN		! Buffers
	,CON		! Controller mode
	,DUP		! Duplex
	,PRO		! Line type
	,CLO		! Clock
	,STI		! Service timer
	,RTT		! Retransmit timer
	,HTI		! Holdback timer
	,MBL		! Maximum block
	,MRT		! Maximum retransmits
	,MWI		! Maximum window
	,SLT		! Scheduling timer
	,DDT		! Dead timer
	,DLT		! Delay timer
	,SRT		! Stream timer
	,HWA		! Hardware address on NI
	,MOD		! PCL address mode
	,EPT		! Ethernet protocol type
	,BFS		! Ethernet buffer size

	);
!
! Line counters
!
$NFBDSC (NML$Q_LINCOU_NFBDSC, SHOW, , PLI

	,NAM,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,NAM		! Name
	,CNT		! Counters

	);
!
! Zero line counters
!
$NFBDSC (NML$Q_LINZER_NFBDSC, ZERCOU, , PLI

	,NAM,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CNT		! Counters

	);
!
! Node status (remote node by address)
!
$NFBDSC (NML$Q_NODSTA_NFBDSC, SHOW, , NDI

	,ADD,		! Search key one = address, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,TAD		! Address
	,NNA		! Name
	,REA		! State
	,ACL		! Active links
	,DEL		! Delay
	,DTY		! Type
	,DCO		! Cost
	,DHO		! Hops
	,DLI		! Line
	,NND		! Next node to destination address
	,NNN		! Next node to destination name

	);
!
! Node summary (remote node by address)
!
$NFBDSC (NML$Q_NODSUM_NFBDSC, SHOW, , NDI

	,ADD,		! Search key one = address, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,TAD		! Address
	,NNA		! Name
	,REA		! State
	,NLI		! Loopback line name
	,ACL		! Active links
	,DEL		! Delay
	,DLI		! Line
	,NND		! Next node to destination address
	,NNN		! Next node to destination name

	);
!
! Node characteristics (remote node by address)
!
$NFBDSC (NML$Q_NODCHA_NFBDSC, SHOW, , NDI

	,ADD,		! Search key one = address, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,TAD		! Address
	,NNA		! Name
	,SLI		! Service circuit
	,SPA		! Service password
	,SDV		! Service device
	,CPU		! CPU type
	,HWA		! Hardware address on NI
	,SNV		! Service node version
	,LOA		! Load file
	,SLO		! Secondary loader
	,TLO		! Tertiary loader
	,DFL		! Diagnostic file
	,STY		! Software type
	,SID		! Software id
	,DUM		! Dump file
	,SDU		! Secondary dumper
	,DAD		! Dump address
	,DCT		! Dump count
	,IHO		! Host
	,CTI		! Counter timer
	,NLI		! Loopback Line Name
	,PUS		! Privileged user id
	,PAC		! Privileged account
	,PPW		! Privileged password
	,NUS		! Non-privileged user id
	,NAC		! Non-privileged account
	,NPW		! Non-privileged password
	,RPA		! Receive password
	,TPA		! Transmit password
	,ACC		! Access

	);
!
! Node counters (remote node by address)
!
$NFBDSC (NML$Q_NODCOU_NFBDSC, SHOW, , NDI

	,ADD,		! Search key one = address, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,TAD		! Address
	,NNA		! Name

	,CNT		! Counters

	);
!
! Zero node counters (remote node by address)
!
$NFBDSC (NML$Q_NODZER_NFBDSC, ZERCOU, , NDI

	,ADD,		! Search key one = address, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CNT		! Counters

	);
!
! Node status (remote node by name)
!
$NFBDSC (NML$Q_NDNSTA_NFBDSC, SHOW, , NDI

	,NNA,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper 2 = eql

	,LOO		! Loop node flag
	,TAD		! Address
	,NNA		! Name
	,REA		! State
	,ACL		! Active links
	,DEL		! Delay
	,DTY		! Type
	,DCO		! Cost
	,DHO		! Hops
	,DLI		! Line
	,NND		! Next node to destination address
	,NNN		! Next node to destination name

	);
!
! Node summary (remote node by name)
!
$NFBDSC (NML$Q_NDNSUM_NFBDSC, SHOW, , NDI

	,NNA,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,LOO		! Loop node flag
	,TAD		! Address
	,NNA		! Name
	,REA		! State
	,NLI		! Loopback Line Name
	,ACL		! Active links
	,DEL		! Delay
	,DLI		! Line
	,NND		! Next node to destination address
	,NNN		! Next node to destination name

	);
!
! Node characteristics (remote node by name)
!
$NFBDSC (NML$Q_NDNCHA_NFBDSC, SHOW, , NDI

	,NNA,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,LOO		! Loop node flag
	,TAD		! Address
	,NNA		! Name
	,SLI		! Service circuit
	,SPA		! Service password
	,SDV		! Service device
	,CPU		! CPU type
	,HWA		! Hardware address
	,SNV		! Service node version
	,LOA		! Load file
	,SLO		! Secondary loader
	,TLO		! Tertiary loader
	,DFL		! Diagnostic file
	,STY		! Software type
	,SID		! Software id
	,DUM		! Dump file
	,SDU		! Secondary dumper
	,DAD		! Dump address
	,DCT		! Dump count
	,IHO		! Host
	,CTI		! Counter timer
	,NLI		! Looback Line Name
	,PUS		! Privileged user id
	,PAC		! Privileged account
	,PPW		! Privileged password
	,NUS		! Non-privileged user id
	,NAC		! Non-privileged account
	,NPW		! Non-privileged password
	,RPA		! Receive password
	,TPA		! Transmit password
	,ACC		! Access

	);
!
! Node counters (remote node by name)
!
$NFBDSC (NML$Q_NDNCOU_NFBDSC, SHOW, , NDI

	,NNA,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,LOO		! Loop node flag
	,TAD		! Addess
	,NNA		! Name
	,CNT		! Counters

	);
!
! Zero node counters (remote node by name)
!
$NFBDSC (NML$Q_NDNZER_NFBDSC, ZERCOU, , NDI

	,NNA,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CNT		! Counters

	);

!
! Area Summary and characteristics
!
$NFBDSC (NML$Q_ARESUM_NFBDSC, SHOW, , ARI

	,ADD,		! Search key one = area address, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,ADD		! Area address
	,REA		! State
	,DLI		! Circuit used for normal traffic to area.
	,NND		! Address of next node to area.

	);

!
! Area Status
!
$NFBDSC (NML$Q_ARESTA_NFBDSC, SHOW, , ARI

	,ADD,		! Search key one = area address, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,ADD		! Area address
	,REA		! State
	,DCO		! Destination cost
	,DHO		! Destination hops
	,DLI		! Circuit used for normal traffic to area.
	,NND		! Address of next node to area.

	);
!
! Logging summary
!
$NFBDSC (NML$Q_LOGSUM_NFBDSC, SHOW, , EFI

	,SIN,		! Search key one = sink node address, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,EVE		! Events

	);

$NFBDSC (NML$Q_SNKSUM_NFBDSC, SHOW, , ESI

	,SNK,		! Search key one = sink type, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,STA		! State
	,LNA		! Name

	);
!
! Logging status
!
BIND
    NML$Q_LOGSTA_NFBDSC = NML$Q_LOGSUM_NFBDSC,
    NML$Q_SNKSTA_NFBDSC = NML$Q_SNKSUM_NFBDSC;
!
! Logging characteristics
!
BIND
    NML$Q_LOGCHA_NFBDSC = NML$Q_LOGSUM_NFBDSC,
    NML$Q_SNKCHA_NFBDSC = NML$Q_SNKSUM_NFBDSC;
!
! Logging events
!
BIND
    NML$Q_LOGEVE_NFBDSC = NML$Q_LOGSUM_NFBDSC,
    NML$Q_SNKEVE_NFBDSC = NML$Q_LOGSUM_NFBDSC;
!
! Loop node summary, status, and characteristics
!
$NFBDSC (NML$Q_LOOSUM_NFBDSC, SHOW, , NDI

	,NNA,		! Search key one = node name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,TAD		! Node address
	,NNA		! Node name
	,NLI		! Circuit ID
	);
!
! Executor node status
!
$NFBDSC (NML$Q_EXESTA_NFBDSC, SHOW, , LNI

	,NFB$C_WILDCARD,! Any entry (there's only one), oper1 = eql
	,,		! Null search key two, oper2 = eql

	,STA		! State
	,PHA		! Physical address on NI

	);
!
! Executor node summary
!
$NFBDSC (NML$Q_EXESUM_NFBDSC, SHOW, , LNI

	,NFB$C_WILDCARD,! Any entry (there's only one), oper1 = eql
	,,		! Null search key two, oper2 = eql

	,STA		! State
	,IDE		! Identification

	);
!
! Executor node characteristics
!
$NFBDSC (NML$Q_EXECHA_NFBDSC, SHOW, , LNI

	,NFB$C_WILDCARD,! Any entry (there's only one), oper1 = eql
	,,		! Null search key two, oper2 = eql

	,IDE		! Identification
	,ITI		! Incoming timer
	,OTI		! Outgoing timer
	,NVE		! NSP version
	,MLK		! Maximum links
	,DFA		! Delay factor
	,DWE		! Delay weight
	,IAT		! Inactivity timer
	,RFA		! Retransmit factor
	,RVE		! Routing version
	,ETY		! Type
	,RTI		! Routing timer
	,SAD		! Subaddresses
	,BRT		! Broadcast routine timer
	,MAD		! Maximum address
	,MLN		! Maximum lines
	,MCO		! Maximum cost
	,MHO		! Maximum hops
	,MVI		! Maximum visits
	,MAR		! Maximum areas
	,MBE		! Maximum broadcast endnodes
	,MBR		! Maximum broadcast routers
	,AMC		! Area maximum cost
	,AMH		! Area maximum hops
	,MBU		! Maximum buffers
	,SBS		! Segment buffer size
	,BUS		! Buffer size
	,DAC		! Default access
	,PIQ		! Pipeline quota
	,ALI		! Node alias
	,DPX		! Default proxy access

	);
!
! Executor node counters - use node by address counters.
!
BIND
	NML$Q_EXECOU_NFBDSC = NML$Q_NODCOU_NFBDSC;
!
! Zero executor node counters
!
$NFBDSC (NML$Q_EXEZER_NFBDSC, ZERCOU, , LNI

	,NFB$C_WILDCARD,! Any entry (there's only one), oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CNT		! Counters

	);
!
! X-25 Access Module Network - characteristics
!
$NFBDSC (NML$Q_ACCCHA_NFBDSC, SHOW, , XAI

	,NET,		! Search Key value = network name.  Azero length
			!	string indicates the active network.
	,,		! Null search key two, oper2 = eql

	,NET		! Network
	,NDA		! Node address
	,USR		! User
	,PSW		! Password
	,ACC		! Account

	);
!
!    X-25 Access Network summary and status
!
BIND
    NML$Q_ACCSUM_NFBDSC = NML$Q_ACCCHA_NFBDSC,
    NML$Q_ACCSTA_NFBDSC = NML$Q_ACCCHA_NFBDSC;

!
!    Show X-25 Protocol network params - characteristics
!
$NFBDSC (NML$Q_NETCHA_NFBDSC, SHOW, , XNI

	,NET,		! Search Key value will be a zero length string,
			!	to indicate the active network, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,NET		! Network
	,DBL		! Default data
	,DWI		! Default window
	,MBL		! Maximum data
	,MWI		! Maximum window
	,MCL		! Maximum clears
	,MRS		! Maximum resets
	,MST		! Maximum restarts
	,CAT		! Call timer
	,CLT		! Clear timer
	,RST		! Reset timer
	,STT		! Restart timer
	,MNS		! Multinetwork support
	);

!
!    X-25 Protocol Network summary
!
BIND
    NML$Q_NETSUM_NFBDSC= NML$Q_NETCHA_NFBDSC;

!
!    X-25 Protocol Network summary
!
BIND
    NML$Q_NETSTA_NFBDSC= NML$Q_NETCHA_NFBDSC;

!
!    X-25 Protocol DTE status
!
$NFBDSC (NML$Q_DTESTA_NFBDSC, SHOW, , XDI

	,DTE,		! Search key one = DTE number, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,DTE		! DTE
	,STA		! State
	,ACH		! Active channels
	,ASW		! Active switched
	,SUB		! Substate
	);

!
!    X-25 Protocol DTE summary
!
BIND
    NML$Q_DTESUM_NFBDSC = NML$Q_DTESTA_NFBDSC;

!
!    X-25 Protocol DTE characteristics
!
$NFBDSC (NML$Q_DTECHA_NFBDSC, SHOW, , XDI

	,DTE,		! Search key one = DTE number, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,DTE		! DTE
	,CTM		! Counter timer
	,LIN		! Line
	,CHN		! Channels
	,MCH		! Maximum channels
	,MCI		! Maximum circuits
	);

!
!    X-25 Protocol DTE show counters
!
$NFBDSC (NML$Q_DTECOU_NFBDSC, SHOW, , XDI

	,DTE,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,DTE		! DTE
	,CNT		! Counters

	);
!
!    X-25 Protocol DTE zero counters
!
$NFBDSC (NML$Q_DTEZER_NFBDSC, ZERCOU, , XDI
	,DTE,		! Search key one = DTE number, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CNT		! Counters
	);

!
!    X-25 Protocol Group characteristics
!
$NFBDSC (NML$Q_GRPCHA_NFBDSC, SHOW, , XGI

	,GRP,		! Search key one = DTE number, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,GRP		! Group name
	,GDT		! DTE number
	,GNM		! Group number
	,GTY		! Group type
	);


!
!    X-25 Server Module status and summary
!
$NFBDSC (NML$Q_SV5SUM_NFBDSC, SHOW, , XS5

	,NFB$C_WILDCARD,! Only one entry, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,ACI		! Active circuits
	,STA		! State
	);


!
!    X-25 Server Module characteristics
!
$NFBDSC (NML$Q_SV5CHA_NFBDSC, SHOW, , XS5

	,NFB$C_WILDCARD,! Only one entry, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CTM		! Counter timer
	,MCI		! Maximum circuits
	);

!
!    X-25 Server Module show counters
!
$NFBDSC (NML$Q_SV5COU_NFBDSC, SHOW, , XS5

	,NFB$C_WILDCARD,! Only one entry, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CNT		! Counters

	);
!
!    X-25 Server Module zero counters
!
$NFBDSC (NML$Q_SV5ZER_NFBDSC, ZERCOU, , XS5
	,NFB$C_WILDCARD,! Wildcard search key one, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CNT		! Counters
	);


!
!    X-25 Server Destination characteristics
!
$NFBDSC (NML$Q_DST5CHA_NFBDSC, SHOW, , XD5

	,DST,		! Search key one = Destination ID, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,DST		! Destination
	,NOD		! Node
	,USR		! Username
	,PSW		! Password setting
	,ACC		! Account
	,OBJ		! Object
	,PRI		! Priority
	,CMK		! Call mask
	,CVL		! Call value
	,GRP		! Group
	,NUM		! Number
	,SAD		! Subaddresses
	,FIL		! Object startup file
	);

!
!    X-25 Trace module status and summary
!
$NFBDSC (NML$Q_TRASUM_NFBDSC, SHOW, , XTI

	,NFB$C_WILDCARD,! Search key one = Wildcard, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,STA	! State
	,FNM	! Filename
	);
!
!    X-25 Trace module characteristics
!
$NFBDSC (NML$Q_TRACHA_NFBDSC, SHOW, , XTI

	,NFB$C_WILDCARD,! Search key one = Wildcard, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,BFZ	! Buffer size
	,MBK	! Maximum blocks/file
	,FNM	! File name
	,MBF	! Maximum number of buffers
	,CPL	! Global data capture limit
	,MVR	! Maximum trace file version
	);
!
!    X-25 Tracepoint module status and summary
!
$NFBDSC (NML$Q_TPTSUM_NFBDSC, SHOW, , XTT

	,TPT,	! Search key one = Tracepoint, oper1 = eql
	,,	! Null search key two, oper2 = eql

	,TPT	! Tracepoint name
	,TST	! Per-trace state
	);
!
!    X-25 Tracepoint module characteristics
!
$NFBDSC (NML$Q_TPTCHA_NFBDSC, SHOW, , XTT

	,TPT,	! Search key one = Tracepoint, oper1 = eql
	,,	! Null search key two, oper2 = eql

	,TPT	! Tracepoint name
	,CPS	! Per-trace capture size
	,TST	! Per-trace state
	);
!
!    X-29 Server Module summary and status
!
$NFBDSC (NML$Q_SV9SUM_NFBDSC, SHOW, , XS9

	,NFB$C_WILDCARD,! Only one entry, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,ACI		! Active circuits
	,STA		! State
	);


!
!    X-29 Server Module characteristics
!
$NFBDSC (NML$Q_SV9CHA_NFBDSC, SHOW, , XS9

	,NFB$C_WILDCARD,! Only one entry, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CTM		! Counter timer
	,MCI		! Maximum circuits
	);

!
!    X-29 Server Module show counters
!
$NFBDSC (NML$Q_SV9COU_NFBDSC, SHOW, , XS9

	,NFB$C_WILDCARD,! Only one entry, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CNT		! Counters

	);
!
!    X-29 Server Module zero counters
!
$NFBDSC (NML$Q_SV9ZER_NFBDSC, ZERCOU, , XS9
	,NFB$C_WILDCARD,! Wildcard search key one, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,CNT		! Counters
	);


!
!    X-29 Server Destination characteristics
!
$NFBDSC (NML$Q_DST9CHA_NFBDSC, SHOW, , XD9

	,DST,		! Search key one = Destination ID, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,DST		! Destination
	,NOD		! Node
	,USR		! Username
	,PSW		! Password setting
	,ACC		! Account
	,OBJ		! Object
	,PRI		! Priority
	,CMK		! Call mask
	,CVL		! Call value
	,GRP		! Group
	,NUM		! Number
	,SAD		! Subaddresses
	,FIL		! Object startup file
	);

!
! Object status
!
$NFBDSC (NML$Q_OBJSTA_NFBDSC, SHOW, , OBI

	,NAM,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,NAM		! Name
	,NUM		! Number
	,FID		! File
	,PID		! Process id
	,USR		! User id
	,PSW		! Password

	);
!
! Object summary
!
$NFBDSC (NML$Q_OBJSUM_NFBDSC, SHOW, , OBI

	,NAM,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,NAM		! Name
	,NUM		! Number
	,FID		! File
	,PID		! Process id
	,USR		! User id
	,PSW		! Password

	);
!
! Object characteristics
!
$NFBDSC (NML$Q_OBJCHA_NFBDSC, SHOW, , OBI

	,NAM,		! Search key one = name, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,NAM		! Name
	,NUM		! Name
	,FID		! File
	,PID		! Process id
	,LPR		! Low order privileges
	,USR		! User id
	,ACC		! Account
	,PSW		! Password
	,PRX		! Proxy access

	);
!
! Link summary
!
$NFBDSC (NML$Q_LNKSUM_NFBDSC, SHOW, , LLI

	,LLN,		! Search key one = logical link number, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,LLN		! Link number (entity ID)
	,PID		! Process ID
	,PNA		! Partner node's address
	,PNN		! Partner node's name
	,RLN		! Remote link number.
	,RID		! Remote identification
	,PRC		! Process name

	);
!
! Link status
!
$NFBDSC (NML$Q_LNKSTA_NFBDSC, SHOW, , LLI

	,LLN,		! Search key one = logical link number, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,LLN		! Link number (entity ID)
	,STA		! Link state
	,PID		! Process ID
	,PNA		! Partner node's address
	,PNN		! Partner node's name
	,RLN		! Remote link number.
	,PRC		! Process name

	);
!
! Link characteristics
!
$NFBDSC (NML$Q_LNKCHA_NFBDSC, SHOW, , LLI

	,LLN,		! Search key one = logical link number, oper1 = eql
	,,		! Null search key two, oper2 = eql

	,LLN		! Link number (entity ID)
	,STA		! Link state
	,PID		! Process ID
	,PNA		! Partner node's address
	,PNN		! Partner node's name
	,DLY		! Round trip delay time
	,RLN		! Remote link number
	,RID		! Remote identification
	,USR		! User name
	,PRC		! Process name

	);


%SBTTL 'Permanent entity information table'

MACRO
    $INFTAB (NAM) =

	GLOBAL BIND
	    %NAME (NAM) =
		UPLIT ($DEXTN (%REMAINING)) : VECTOR [(%LENGTH - 1) / 2] %,

    $DEXTN [ENT, INF] =
	LONG (UPLIT ($ENTRY (ENT, %REMOVE (INF))))
    %,

    $ENTRY (ENT) [INF] =
	%IF %IDENTICAL (INF, $)
	%THEN
	    LONG (0)
	%ELSE
	    LONG (%NAME ('NML$Q_P_', ENT, INF, '_TABDES'))
	%FI
    %;
!
! Entity information table.  This structure is a vector of table addresses.
! The internal entity code is the index to the table of parameter
! sets for that entity.  The index values are the symbols:
!
!	NML$C_LINE
!	NML$C_LOGGING
!	NML$C_SINK
!	NML$C_NODE
!	NML$C_NODEBYNAME
!	NML$C_LOOPNODE
!	NML$C_ADJACENT_NODE
!	NML$C_EXECUTOR
!	NML$C_OBJECT
!	NML$C_CIRCUIT
!	NML$C_CIRC_ADJACENCIES
!	NML$C_AREA
!	NML$C_X25_ACCESS
!	NML$C_PROT_NET
!	NML$C_PROT_DTE
!	NML$C_PROT_GRP
!	NML$C_X25_SERV
!	NML$C_X25_SERV_DEST
!	NML$C_TRACE
!	NML$C_TRACEPNT
!	NML$C_X29_SERV
!	NML$C_X29_SERV_DEST
!	NML$C_CONFIG
!
! This index is used to get the address of the vector of information sets
! for the entity.  This structure is indexed using the internal 
! information type code which is one of the following values:
!
!	NML$C_SUMMARY
!	NML$C_STATUS
!	NML$C_CHARACTERISTICS
!	NML$C_COUNTERS
!	NML$C_EVENTS
!
!
!***************************************************************************
!
    $INFTAB (NML$AL_PERMINFTAB,

	LIN, (SUM, STA, CHA, $,   $  ),	! Line
	LOG, ($,   $,   $,   $,   $  ),	! Logging
	SNK, ($,   $,   $,   $,   $  ),	! Logging sink
	NOD, (SUM, STA, CHA, $,   $  ),	! Node
	NDN, (SUM, STA, CHA, $,   $  ),	! Node by name
	LOO, (SUM, SUM, SUM, $,   $  ),	! Loop node
	NAJ, ($,   $,   $,   $,   $  ),	! Adjacent nodes
	EXE, (SUM, STA, CHA, $,   $  ),	! Executor node
	OBJ, (SUM, STA, CHA, $,   $  ),	! Object
	CIR, (SUM, SUM, CHA, $,   $  ),	! Circuit
	CAJ, ($,   $,   $,   $,   $  ),	! Circuit Adjacencies (Volatile only)
	CAS, ($,   $,   $,   $,   $  ),	! Circuit Service Adjacencies (Volatile only)
	ARE, ($,   $,   $,   $,   $  ), ! Area (Volatile only)
	ACC, (SUM, STA, CHA, $,   $  ),	! X-25 Access
	NET, (CHA, CHA, CHA, $,   $  ),	! X-25 Protocol Networks
 	DTE, (STA, STA, CHA, $,   $  ),	! X-25 Protocol DTE
	GRP, (CHA, CHA, CHA, $,   $  ),	! X-25 Protocol Group
	SVR, (SUM, SUM, CHA, $,   $  ),	! X-25 Server
	DST, (CHA, CHA, CHA, $,   $  ),	! X-25 Server Destinations
	TRA, (SUM, SUM, CHA, $,   $  ), ! X-25 Trace	
	TPT, (SUM, SUM, CHA, $,   $  ), ! X-25 Tracepoint
	SVR, (SUM, SUM, CHA, $,   $  ),	! X-29 Server
	DST, (CHA, CHA, CHA, $,   $  ),	! X-29 Server Destinations
	CNF, (STA, STA, STA, $,   $  ),	! Configurator Module

	);

UNDECLARE
    %QUOTE $INFTAB,
    %QUOTE $DEXTN,
    %QUOTE $ENTRY;

%SBTTL 'Volatile entity information table'

MACRO
    $INFTAB (NAM) =

	GLOBAL BIND
	    %NAME (NAM) =
		UPLIT ($DEXTN (%REMAINING)) : VECTOR [(%LENGTH - 1) / 2] %,

    $DEXTN [ENT, INF] =
	LONG (UPLIT ($ENTRY (ENT, %REMOVE (INF))))
    %,

    $ENTRY (ENT) [INF] =
	%IF %IDENTICAL (INF, $)
	%THEN
	    LONG (0),
	    LONG (0)
	%ELSE
	    LONG (%NAME ('NML$Q_', ENT, INF, '_NFBDSC')),
	    LONG (%NAME ('NML$Q_', ENT, INF, '_TABDES'))
	%FI
    %;
!
! Entity information table.  This structure is a vector of table addresses.
! The internal entity code is the index to the table of parameter
! sets for that entity.  The index values are the symbols:
!
!	NML$C_LINE
!	NML$C_LOGGING
!	NML$C_SINK
!	NML$C_NODE
!	NML$C_NODEBYNAME
!	NML$C_LOOPNODE
!	NML$C_ADJACENT_NODE
!	NML$C_EXECUTOR
!	NML$C_OBJECT
!	NML$C_CIRCUIT
!	NML$C_CIRCUIT_ADJACENCIES
!	NML$C_AREA
!	NML$C_X25_ACCESS
!	NML$C_PROT_NET
!	NML$C_PROT_DTE
!	NML$C_PROT_GRP
!	NML$C_X25_SERV
!	NML$C_X25_SERV_DEST
!	NML$C_TRACE
!	NML$C_TRACEPNT
!	NML$C_X29_SERV
!	NML$C_X29_SERV_DEST
!	NML$C_CONFIG
!	NML$C_LINKS
!
! This index is used to get the address of the blockvector of information sets
! for the entity.  The address points to a table of NFB descriptors and
! table descriptors.  This structure is indexed using the internal 
! information type code which is one of the following values:
!
!	NML$C_SUMMARY
!	NML$C_STATUS
!	NML$C_CHARACTERISTICS
!	NML$C_COUNTERS
!	NML$C_EVENTS
!	NML$C_ZERO
!
! The first longword in the entry is the address of the descriptor of the
! NFB used to retrieve the specified set of volatile information.  The
! second longword is the address of the descriptor of the table used for
! processing the data returned.
!
!
!
!***************************************************************************
!
! NOTE:	The order of the entries in this table corresponds to the numeric
!	order of the entity codes.  DO NOT change the order of the entries
!	or add new ones without verifying that the order is correct.
!	Also, the information types within each entry correspond to the
!	numeric order of the information codes.
!

    $INFTAB (NML$AL_ENTINFTAB,

	LIN, (SUM, STA, CHA, COU, $,   ZER),	! Line
	LOG, (SUM, STA, CHA, $,   EVE, $),	! Logging
	SNK, (SUM, STA, CHA, $,   EVE, $),	! Logging sink
	NOD, (SUM, STA, CHA, COU, $,   ZER),	! Node
	NDN, (SUM, STA, CHA, COU, $,   ZER),	! Node by name
	LOO, (SUM, SUM, SUM, $,   $,   $),	! Loop node
	NOD, (SUM, STA, CHA, COU, $,   $),	! Adjacent Nodes
	EXE, (SUM, STA, CHA, COU, $,   ZER),	! Executor node
	OBJ, (SUM, STA, CHA, $,   $,   $),	! Object
	CIR, (SUM, SUM, CHA, COU, $,   ZER),	! Circuit
	CAJ, (SUM, STA, CHA, $,   $,   $),	! Circuit Adjacencies
	CSA, (SUM, SUM, SUM, $,   $,   $),	! Circuit Service Adjacencies
	ARE, (SUM, STA, SUM, $,   $,   $),	! Area
	ACC, (SUM, STA, CHA, $,   $,   $),	! X-25 Access
	NET, (CHA, CHA, CHA, $,   $,   $),	! X-25 Protocol Network
 	DTE, (STA, STA, CHA, COU, $,   ZER),	! X-25 Protocol DTE
	GRP, (CHA, CHA, CHA, $,   $,   $),	! X-25 Protocol Group
	SV5, (SUM, SUM, CHA, COU, $,   ZER),	! X-25 Server
	DST5,(CHA, CHA, CHA, $,   $,   $),	! X-25 Server Destinations
	TRA, (SUM, SUM, CHA, $,   $,   $),	! X-25 Trace
	TPT, (SUM, SUM, CHA, $,   $,   $),	! X-25 Tracepoint
	SV9, (SUM, SUM, CHA, COU, $,   ZER),	! X-29 Server
	DST9,(CHA, CHA, CHA, $,   $,   $),	! X-29 Server Destinations
	CNF, (  $,   $,   $, $,   $,   $),	! Configurator Module
	LNK, (SUM, STA, CHA, $,   $,   $)	! Links

	);

UNDECLARE
    %QUOTE $INFTAB,
    %QUOTE $DEXTN,
    %QUOTE $ENTRY;

%SBTTL 'SET ALL parameter tables'
!
! Parameter list definition macro.
!
MACRO
    PRM_ALL (TAB, TYP) []  =

	SWITCHES UNAMES;
	PSECT
	    PLIT = NML$ALLPARAMS;

	BIND
	    %NAME ('NML$Q_ALL', TAB, 'DES') =
		UPLIT (	%LENGTH - 2,
			UPLIT BYTE ($DEXTN (TYP, %REMAINING)));

	PSECT PLIT = $PLIT$;
	SWITCHES NOUNAMES;
    %,

    $DEXTN (TAB) [PRM] =
	WORD (%NAME ('NMA$C_', TAB, '_', PRM)), 
	WORD (%NAME ('CPT$GK_', TAB, '_', PRM))
    %;
!
! Initialize psect.
!
PSECT
    OWN = NML$ALLPARAMS (NOWRITE, ALIGN(0));
OWN
    $Z : VECTOR [0];
PSECT
    OWN = $OWN$;
UNDECLARE
    $Z;
!
! Circuit parameters.
!
    PRM_ALL (CIR, PCCI

	,STA	! State
	,SER	! Service state
	,LCT	! Counter timer
	,COS	! Cost
	,MRT	! Maximum routers on NI
	,RPR	! Router priority on NI
	,HET	! Hello timer
	,BLK	! Blocking
	,MRC	! Maximum recalls
	,RCT	! Recall timer
	,NUM	! Number
	,POL	! Polling state
	,OWN	! Owner entity ID (Data Link Mapping)
	,USE	! Usage
	,TYP	! Type
	,DTE	! DTE
	,CHN	! Channel
	,MBL	! Maximum block
	,MWI	! Maximum window
	,TRI	! Tributary
	,BBT	! Babble timer
	,TRT	! Transmit timer
	,MRB	! Maximum receive buffers
	,MTR	! Maximum transmits
	,ACB	! Active base
	,ACI	! Active increment
	,IAB	! Inactive base
	,IAI	! Inactive increment
	,IAT	! Inactive threshold
	,DYB	! Dying base
	,DYI	! Dying increment
	,DYT	! Dying threshold
	,DTH	! Dead threshold
	,VER	! Verification
	,XPT	! Transport protocol

	);
!
! Line parameters.
!
    PRM_ALL (LIN, PCLI

	,STA	! State
	,SER	! Service
	,LCT	! Counter timer
	,BFN	! Number of buffers
	,CON	! Controller mode
	,DUP	! Duplex
	,PRO	! Type
	,CLO	! Clock
	,STI	! Service timer
	,RTT	! Retransmit timer
	,HTI 	! Holdback timer
	,MBL 	! Maximum block
	,MRT 	! Maximum retransmits
	,MWI 	! Maximum window
	,SLT 	! Scheduling timer
	,DDT 	! Dead timer
	,DLT 	! Delay timer
	,SRT 	! Stream timer
	,HWA	! Hardware address on NI
	,XMD	! PCL address mode
	,EPT	! Ethernet Protocol Type
	,BSZ	! Ethernet buffer size

	);
!
! Logging parameters.
!
PRM_ALL (LOG, PCLO

	,EVE	! Events

	);

PRM_ALL (SNK, PCLO

	,STA	! State
	,LNA	! Name

	);
!
! Executor node parameters.
!
PRM_ALL (EXE, PCNO

	,STA	! State
	,IDE	! Identification
	,AD$	! Address
	,ITI	! Incoming timer
	,OTI	! Outgoing timer
	,MLK	! Maximum links
	,DFA	! Delay factor
	,DWE	! Delay weight
	,IAT	! Inactivity timer
	,RFA	! Retransmit factor
	,ETY	! Executor type
	,RTI	! Routing timer
	,SAD	! Subaddresses
	,BRT	! Broadcast routing timer
	,MAD	! Maximum address
	,MLN	! Maximum lines
	,MCO	! Maximum cost
	,MHO	! Maximum hops
	,MVI	! Maximum visits
	,MAR	! Maximum areas
	,MBE	! Maximum broadcast endnodes
	,MBR	! Maximum broadcast routers
	,AMC	! Area maximum cost
	,AMH	! Area maximum hops
	,MBU	! Maximum buffers
	,BUS	! Buffer size
	,SBS	! Segment buffer size
	,DAC	! Default access
	,PIQ	! Pipeline quota
	,ALI	! Node alias
	,DPX	! Default proxy access

	);
!
! Node parameters.
!
PRM_ALL (NOD, PCNO

	,SLI	! Service circuit
	,SPA	! Service password
	,SDV	! Service device
	,CPU	! CPU type
	,HWA	! Hardware address on NI
	,SNV	! Service node version
	,LOA	! Load file
	,SLO	! Secondary loader
	,TLO	! Tertiary loader
	,DFL	! Diagnostic file
	,STY	! Software type
	,SID	! Software identification
	,DUM	! Dump file
	,SDU	! Secondary dumper
	,DAD	! Dump address
	,DCT	! Dump count
	,IHO	! Host
	,CTI	! Counter timer
	,NNA	! Name
	,NLI	! Line
	,ADD	! Address
	,A$$	! Loop node address
	,PUS	! Privileged user id
	,PAC	! Privileged account
	,PPW	! Privileged password
	,NUS	! Nonprivileged user id
	,NAC	! Nonprivileged account
	,NPW	! Nonprivileged password
	,RPA	! Receive password
	,TPA	! Transmit password
	,ACC	! Access
	,PRX	! Proxy access

	);

!
! X-25 Access Module Network
!
PRM_ALL (ACC, PCXA

	,NOD 	! Node number
	,USR	! User
	,PSW	! Password
	,ACC	! Account

	);
!
! X-25 Protocol Network parameters for SET ALL
!
PRM_ALL (NET, PCXP
	,DBL	! Default block
	,DWI	! Default window
	,MBL	! Maximum block
	,MWI	! Maximum window
	,MCL	! Maximum clears
	,MRS	! Maximum resets
	,MST	! Maximum restarts
	,CAT	! Call timer
	,CLT	! Clear timer
	,RST	! Reset timer
	,STT	! Restart timer
	);

!
! X-25 Protocol DTE parameters for SET ALL
!
PRM_ALL (DTE, PCXP
	,STA	! State
	,CTM	! Counter timer
	,LIN	! Line
	,CHN	! Channels
	);

!
! X-25 Protocol Group parameters for SET ALL
!
PRM_ALL (GRP, PCXP
	,GDT	! Group DTE number
	,GNM	! Group number
	,GTY	! Group type
	);

!
! X-25 Server parameters for SET ALL
!
PRM_ALL (SV5, PCXS
	,CTM	! Counter timer
	,MCI	! Maximum channels
	,STA	! State
	);

!
! X-25 Server Destination parameters for SET ALL
!
PRM_ALL (DST5, PCXS
	,NOD	! Node
	,USR	! User
	,SPW	! Password
	,ACC	! Account
	,OBJ	! Object
	,PRI	! Priority
	,CMK	! Call mask
	,CVL	! Call value
	,GRP	! Group
	,NUM	! Number
	,SAD	! Subaddresses
	,FIL	! Object startup file
	);
!
! X-25 Trace parameters for SET ALL
!
PRM_ALL (TRA, PCXT
	,STA	! State
	,BSZ	! Buffer size
	,MBK	! Maximum blocks
	,FNM	! Filename
	,MBF	! Maximum number of buffers
	,CPL	! Global data capture limit
	,MVR	! Maximum trace file version
	);

!
! X-25 Tracepoint parameters for SET ALL
!
PRM_ALL (TPT, PCXT
	,CPS	! Per-trace capture size
	,TST	! Per-trace state
	);

!
! X-29 Server parameters for SET ALL
!
PRM_ALL (SV9, PCXS9
	,CTM	! Counter timer
	,MCI	! Maximum channels
	,STA	! State
	);

!
! X-29 Server Destination parameters for SET ALL
!
PRM_ALL (DST9, PCXS9
	,NOD	! Node
	,USR	! User
	,SPW	! Password
	,ACC	! Account
	,OBJ	! Object
	,PRI	! Priority
	,CMK	! Call mask
	,CVL	! Call value
	,GRP	! Group
	,NUM	! Number
	,SAD	! Subaddresses
	,FIL	! Object startup file
	);

!
! Configurator module parameters.
!
PRM_ALL (CNF, PCCN

	,CIR	! Circuit ID
	,SUR	! Surveillance
	);

!
! Object parameters.
!
PRM_ALL (OBJ, PCOB

	,FID	! File
	,NUM	! Number
	,PRV	! Privileges
	,USR	! User id
	,ACC	! Account
	,PSW	! Password
	,PRX	! Proxy access

	);

UNDECLARE
    %QUOTE PRM_ALL,
    %QUOTE $DEXTN;


%SBTTL 'Entity information table'
!
! This table provides a variety of information for operations that can
! be performed on entities in the volatile and permanent data bases.
!
MACRO
    $ENTDATA [] =
	UPLIT BYTE ($EXP (%REMAINING))
	: BBLOCKVECTOR [%LENGTH, EIT$K_ENTRYLEN];
    %,

    $EXP [ENT] =
	$ENTRY (%REMOVE (ENT))
    %,

    $ENTRY [FID, DET, KEY, NFBDB, SRCH_ID_1, SRCH_ID_2,
		KNO_SRCH_ID_1, KNO_SRCH_LEN_1, KNO_SRCH_VAL_1, KNO_OPER1,
		ACT_SRCH_ID_1, ACT_SRCH_LEN_1, ACT_SRCH_VAL_1, ACT_OPER1,
		TAB] =
	BYTE (%IF %NULL (FID)
		%THEN 0
		%ELSE %NAME ('NMA$C_OPN_', FID)
		%FI),
	WORD (%NAME ('NMA$C_', DET)),
	WORD (%IF %NULL (KEY)
		%THEN 0
		%ELSE KEY
		%FI),
	BYTE (%IF %NULL (NFBDB)
		%THEN 0
		%ELSE %NAME ('NFB$C_DB_', NFBDB)
		%FI),
	$SRCH_KEY (NFBDB, SRCH_ID_1),		! Single entity search key one ID
	$SRCH_KEY (NFBDB, SRCH_ID_2),		! Single entity search key two ID
	$SRCH_KEY (NFBDB, KNO_SRCH_ID_1),	! KNOWN search key one ID
	LONG (KNO_SRCH_LEN_1),			! KNOWN search value one length.
	LONG ( %IF %NULL (KNO_SRCH_VAL_1)
		%THEN 0
		%ELSE KNO_SRCH_VAL_1		! KNOWN search key one value
		%FI ),
	BYTE (KNO_OPER1),			! KNOWN search operator
	$SRCH_KEY (NFBDB, ACT_SRCH_ID_1),	! ACTIVE search key one ID
	LONG (ACT_SRCH_LEN_1),			! ACTIVE search value one length.
	LONG ( %IF %NULL (ACT_SRCH_VAL_1)
		%THEN 0
		%ELSE ACT_SRCH_VAL_1		! ACTIVE search key one value
		%FI ),
	BYTE (ACT_OPER1),			! ACTIVE search operator
	LONG (%IF %NULL (TAB)
		%THEN 0
		%ELSE %NAME ('NML$Q_ALL', TAB, 'DES')
		%FI)
    %;
!
!***************************************************************************
!
! NOTE:	The order of the entries in this table corresponds to the numeric
!	order of the entity codes.  DO NOT change the order of the entries
!	or add new ones without verifying that the order is correct.
!
!***************************************************************************

GLOBAL BIND
    NML$AB_ENTITYDATA = $ENTDATA (

!
! Line entity table (Index = NML$C_LINE)
!
(LINE, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_LIN,	! EIT$W_DETAIL - NICE error detail entity code
NML$C_KEY_LINE,	! EIT$W_KEY - Permanent data base search key
PLI,		! EIT$B_DATABASE - Volatile data base ID
NAM,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

STA,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = state.
0,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = longword.
NMA$C_STATE_OFF,! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = off.
NFB$C_OP_NEQ,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
LIN),		! Parameter table for SET ALL


!
! Logging entity table (Index = NML$C_LOGGING)
!
(LOG, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_LOG,	! EIT$W_DETAIL - NICE error detail entity code
NMA$C_PCLO_SIN,	! EIT$W_KEY - Permanent data base search key
EFI,		! EIT$B_DATABASE - Volatile data base ID
SIN,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = wildcard.
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = no value.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = null.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
LOG),		! Parameter table for SET ALL

!
! Sink logging entity table (Index = NML$C_SINK)
!
(LOG, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_LOG,	! EIT$W_DETAIL - NICE error detail entity code
NML$C_KEY_SINK,	! EIT$W_KEY - Permanent data base search key
ESI,		! EIT$B_DATABASE - Volatile data base ID
SNK,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

STA,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = state.
0,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = longword.
NMA$C_STATE_OFF,! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = off.
NFB$C_OP_NEQ,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
SNK),		! Parameter table for SET ALL

!
! Node by address entity table (Index = NML$C_NODE)
!
(NODE, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_NOD,	! EIT$W_DETAIL - NICE error detail entity code
NMA$C_PCNO_ADD, ! EIT$W_KEY - Permanent data base search key
NDI,		! EIT$B_DATABASE - Volatile data base ID
ADD,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

REA,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = reachable.
0,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = longword.
1,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = on.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
NOD),		! Parameter table for SET ALL

!
! Node by name entity table (Index = NML$C_NODEBYNAME)
!
(NODE, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_NOD,	! EIT$W_DETAIL - NICE error detail entity code
NMA$C_PCNO_NNA, ! EIT$W_KEY - Permanent data base search key
NDI,		! EIT$B_DATABASE - Volatile data base ID
NNA,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = node name.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard.
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

REA,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = reachable.
0,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = longword.
1,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = on.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
NOD),		! Parameter table for SET ALL

!
! Loopnode entity table (Index = NML$C_LOOPNODE)
!
(NODE, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_NOD,	! EIT$W_DETAIL - NICE error detail entity code
NMN$C_TYP_KEY_REF,! EIT$W_KEY - Permanent data base search key
NDI,		! EIT$B_DATABASE - Volatile data base ID
NNA,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = node name.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard.
LOO,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = loopnode bit.
0,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = longword.
1,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = on.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

LOO,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = loopnode bit.
0,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = longword.
1,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = on.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
NOD),		! Parameter table for SET ALL

!
! Adjacent Nodes entity table (Index = NML$C_ADJACENT_NODE).  Used only
! for SHOWs.
!
(, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_NOD,	! EIT$W_DETAIL - NICE error detail entity code
,		! EIT$W_KEY - Permanent data base search key
NDI,		! EIT$B_DATABASE - Volatile data base ID
,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity - not used
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard
DHO,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = Destination hops
0,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
1,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = wildcard.
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = no value.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
),		! Parameter table for SET ALL

!
! Executor entity table (Index = NML$C_EXECUTOR)
!
(NODE, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_NOD,	! EIT$W_DETAIL - NICE error detail entity code
NMN$C_TYP_KEY_REF,! EIT$W_KEY - Permanent data base search key
LNI,		! EIT$B_DATABASE - Volatile data base ID
,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = wildcard (there's only one entry).
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard.
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = wildcard
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = no value.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = null.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
EXE),		! Parameter table for SET ALL

!
! Object entity table (Index = NML$C_OBJECT)
!
(OBJ, 		! EIT$B_FILEID - Permanent data base file ID code
SENT_OBJ,	! EIT$W_DETAIL - NICE error detail entity code
NMA$C_PCOB_NAM,	! EIT$W_KEY - Permanent data base search key
OBI,		! EIT$B_DATABASE - Volatile data base ID
NAM,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = name.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard.
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = wildcard.
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = no value.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = null.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
OBJ),		! Parameter table for SET ALL

!
! Circuit entity table (Index = NML$C_CIRCUIT)
!
(CIR, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_CIR,	! EIT$W_DETAIL - NICE error detail entity code
NML$C_KEY_CIR,	! EIT$W_KEY - Permanent data base search key
CRI,		! EIT$B_DATABASE - Volatile data base ID
NAM,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = name.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard.
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

STA,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = state.
0,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = longword.
NMA$C_STATE_OFF,! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = off.
NFB$C_OP_NEQ,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
CIR),		! Parameter table for SET ALL

!
! Circuit Adjacency entity table (Index = NML$C_CIRCUIT_ADJACENT).  The
! Circuit Adjacency database is useful on the NI, where there are many
! nodes on a single circuit.  It's in the volatile database only and is read
! only.  
!
(, 		! No permanent data base file.  Database is volatile RO.
ENT_CIR,	! EIT$W_DETAIL - NICE error detail entity code
,		! EIT$W_KEY - No permanent data base search key
AJI,		! EIT$B_DATABASE - Volatile data base ID
CIR,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = circuit name.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard.
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

REA,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = reachable nodes.
0,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = longword.
1,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = on.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
),		! Parameter table for SET ALL


!
! Circuit Service Adjacencies entity table (Index = NML$C_CIRCUIT_ADJ_SRV).  The
! Circuit Service Adjacency database is used on the NI, where there are many
! nodes on a single circuit.  It's in the volatile database only and is read
! only.  It contains information about nodes which are being down line loaded,
! upline dumped, etc. (service functions).
!
(, 		! No permanent data base file.  Database is volatile RO.
ENT_CIR,	! EIT$W_DETAIL - NICE error detail entity code
,		! EIT$W_KEY - No permanent data base search key
SDI,		! EIT$B_DATABASE - Volatile data base ID
CIR,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = circuit name.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard.
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = reachable nodes.
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = longword.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = on.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
),		! Parameter table for SET ALL

!
! Area entity table (Index = NML$C_AREA)
! For now, it's the same as for circuits, until it get's put in NMADEF and
! NETUSR.
!
(, 		! No permanent data base file.  Database is volatile RO.
ENT_ARE,	! EIT$W_DETAIL - NICE error detail entity code
,		! EIT$W_KEY - No permanent data base search key
ARI,		! EIT$B_DATABASE - Volatile data base ID
ADD,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = name.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard.
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

REA,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = state.
0,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = longword.
1,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = on.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
),		! Parameter table for SET ALL


!
! X25-Access Network entity table (Index = NML$C_X25_ACCESS)
!
(X25, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_MOD,	! EIT$W_DETAIL - NICE error detail entity code
NML$C_KEY_X25_ACCESS,! EIT$W_KEY - Permanent data base search key
XAI,		! EIT$B_DATABASE - Volatile data base ID
NET,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = network.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = state.
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = no value.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = null.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
ACC),		! Parameter table for SET ALL

!
! X25-Protocol Network entity table (Index = NML$C_PROT_NET)
!
(X25, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_MOD,	! EIT$W_DETAIL - NICE error detail entity code
NMA$C_PCXP_NET,	! EIT$W_KEY - Permanent data base search key
XNI,		! EIT$B_DATABASE - Volatile data base ID
NET,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = network.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = state.
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = no value.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = null.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
NET),		! Parameter table for SET ALL

!
! X25-Protocol DTE entity table (Index = NML$C_PROT_DTE)
!
(X25, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_MOD,	! EIT$W_DETAIL - NICE error detail entity code
NMA$C_PCXP_DTE,	! EIT$W_KEY - Permanent data base search key
XDI,		! EIT$B_DATABASE - Volatile data base ID
DTE,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = DTE number.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard.
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = wildcard.
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = no value.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = null.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
DTE),		! Parameter table for SET ALL

!
! X25-Protocol Group entity table (Index = NML$C_PROT_GRP)
!
(X25, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_MOD,	! EIT$W_DETAIL - NICE error detail entity code
NMA$C_PCXP_GRP,	! EIT$W_KEY - Permanent data base search key
XGI,		! EIT$B_DATABASE - Volatile data base ID
GRP,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = group name.
GDT,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = DTE number.
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = wildcard.
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = longword.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = null.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
GRP),		! Parameter table for SET ALL

!
! X25-Server entity table (Index = NML$C_X25_SERV)
!
(X25, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_MOD,	! EIT$W_DETAIL - NICE error detail entity code
NML$C_KEY_X25_SERV,	! EIT$W_KEY - Permanent data base search key
XS5,		! EIT$B_DATABASE - Volatile data base ID
,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = wildcard.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = wildcard.
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = no value.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = null.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
SV5),		! Parameter table for SET ALL

!
! X25-Server Destination entity table (Index = NML$C_X25_SERV_DEST)
!
(X25, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_MOD,	! EIT$W_DETAIL - NICE error detail entity code
NMA$C_PCXS_DST,	! EIT$W_KEY - Permanent data base search key
XD5,		! EIT$B_DATABASE - Volatile data base ID
DST,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = destination.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = wildcard.
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = no value.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = none.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
DST5),		! Parameter table for SET ALL


!
! X25 Trace entity table (Index = NML$C_TRACE)
!
(X25, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_MOD,	! EIT$W_DETAIL - NICE error detail entity code
NML$C_KEY_TRACE,! EIT$W_KEY - Permanent data base search key
XTI,		! EIT$B_DATABASE - Volatile data base ID
,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = wildcard.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = wildcard.
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = no value.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = none.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
TRA),		! Parameter table for SET ALL


!
! X25 Tracepoint entity table (Index = NML$C_TRACE)
!
(X25, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_MOD,	! EIT$W_DETAIL - NICE error detail entity code
NMA$C_PCXT_TPT, ! EIT$W_KEY - Permanent data base search key
XTT,		! EIT$B_DATABASE - Volatile data base ID
TPT,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = tracepoint name.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = wildcard.
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = no value.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = none.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
TPT),		! Parameter table for SET ALL


!
! X29-Server entity table (Index = NML$C_X29_SERV)
!
(X29, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_MOD,	! EIT$W_DETAIL - NICE error detail entity code
NML$C_KEY_X29_SERV,	! EIT$W_KEY - Permanent data base search key
XS9,		! EIT$B_DATABASE - Volatile data base ID
,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = wildcard.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = wildcard.
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = no value.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = null.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
SV9),		! Parameter table for SET ALL

!
! X29-Server Destination entity table (Index = NML$C_X29_SERV_DEST)
!
(X29, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_MOD,	! EIT$W_DETAIL - NICE error detail entity code
NMA$C_PCXS_DST,	! EIT$W_KEY - Permanent data base search key
XD9,		! EIT$B_DATABASE - Volatile data base ID
DST,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = destination.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = wildcard.
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = no value.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = none.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
DST9),		! Parameter table for SET ALL

!
! Configurator module entity table (Index = NML$C_CONFIG)
! Volatile database is maintained by Configurator Module rather than NETACP,
! and is accessed via a logical link using NICE.  Therefore, none of the
! fields for issuing QIOs to NETACP are useful here.
!
(CNF, 		! EIT$B_FILEID - Permanent data base file ID code
ENT_MOD,	! EIT$W_DETAIL - NICE error detail entity code
NMA$C_PCCN_CIR,	! EIT$W_KEY - Permanent data base search key
,		! EIT$B_DATABASE - Volatile data base ID
,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity.
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities.
0,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities.
0,		! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities.
0,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities.
0,		! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
CNF),		! Parameter table for SET ALL

!
! Link entity table (Index = NML$C_LINK)
!
(, 		! EIT$B_FILEID - No permanent data base file ID code
SENT_LNK,	! EIT$W_DETAIL - NICE error detail entity code
,		! EIT$W_KEY - No permanent data base search key
LLI,		! EIT$B_DATABASE - Volatile data base ID
LLN,		! EIT$L_SRCH_ID1 - Volatile data base search key one ID for
		!	a single entity = logical link number.
,		! EIT$L_SRCH_ID2 - Volatile data base search key two ID for
		!	a single entity = wildcard
,		! EIT$L_KNO_SRCH_ID1 - Volatile data base search key one ID
		!	for KNOWN entities = wildcard
-1,		! EIT$L_KNO_SRCH_LEN1 - Volatile data base length of search
		!	one value for KNOWN entities = no value.
,		! EIT$L_KNO_SRCH_VAL1 -  Volatile data base search one value
		!	for KNOWN entities = none.
NFB$C_OP_EQL,	! EIT$B_KNO_OPER1 - Sense of search one for KNOWN.

,		! EIT$L_ACT_SRCH_ID1 - Volatile data base search key one ID
		!	for ACTIVE entities = wildcard.
-1,		! EIT$L_ACT_SRCH_LEN1 - Volatile data base length of search
		!	one value for ACTIVE entities = no value.
,		! EIT$L_ACT_SRCH_VAL1 - Volatile data base search one value
		!	for ACTIVE entities = none.
NFB$C_OP_EQL,	! EIT$B_ACT_OPER1 - Sense of search one for ACTIVE.
),		! No parameter table for SET ALL

    );	! End of NML$AB_ENTITYDATA  (Entity Table)

UNDECLARE
    %QUOTE $ENTDATA,
    %QUOTE $EXP,
    %QUOTE $ENTRY;

%SBTTL 'QIO parameter mapping tables'
!
! Tables to map returned QIO parameter ID's to NICE parameter ID's for
! QIO error reporting.
!

!
! Parameter list definition macro.
!
MACRO
    PRM_MAP (TAB, TYP) []  =

	SWITCHES UNAMES;
	PSECT
	    PLIT = NML$QIOPRMMAP;

	GLOBAL BIND
	    %NAME ('NML$GQ_', TAB, 'MAPDES') =
		UPLIT (	(%LENGTH - 2) / 2,
			UPLIT BYTE ($DEXTN (TAB, TYP, %REMAINING)));

	PSECT PLIT = $PLIT$;
	SWITCHES NOUNAMES;
    %,

    $DEXTN (TAB, TYP) [QP, PRM] =
		LONG ($FIELD_ID( TAB, QP)),
		WORD (%NAME ('PST$K_', TYP, '_', PRM))
    %;
!
! Initialize psect.
!
PSECT
    OWN = NML$QIOPRMMAP (NOWRITE, ALIGN(0));
OWN
    $Z : VECTOR [0];
PSECT
    OWN = $OWN$;
UNDECLARE
    $Z;
!
! Circuit parameters.
!
    PRM_MAP (CRI, PCCI

	,STA,	STA	! State
	,SUB,	SUB	! Substate
	,SER,	SER	! Service state
	,LCT,	LCT	! Counter timer
!?	,CNO,	CNO	! Connected node
!?	,COB,	COB	! Connected object
	,LOO,	LOO	! Loopback name
!?	,PNN,	ADJ	! Adjacent node
	,DRT,	DRT	! Designated router
	,BLO,	BLO	! Block size
	,COS,	COS	! Cost
	,MRT,	MRT	! Maximum routers on NI
	,RPR,	RPR	! Router priority on NI
	,HET,	HET	! Hello timer
	,LIT,	LIT	! Listen timer
	,BLK,	BLK	! Blocking
	,MRC,	MRC	! Maximum recalls
	,RCT,	RCT	! Recall timer
	,NUM,	NUM	! Number
!?	,USR,	USR	! User
	,POL,	POL	! Polling state
	,PLS,	PLS	! Polling substate
	,DLM,	OWN	! Data Link Mapping => Owner entity id
	,USE,	USE	! Usage
	,TYP,	TYP	! Type
	,DTE,	DTE	! DTE
	,CHN,	CHN	! Channel
	,MBL,	MBL	! Maximum block
	,MWI,	MWI	! Maximum window
	,TRI,	TRI	! Tributary
	,BBT,	BBT	! Babble timer
	,TRT,	TRT	! Transmit timer
	,MRB,	MRB	! Maximum receive buffers
	,MTR,	MTR	! Maximum transmits
	,ACB,	ACB	! Active base
	,ACI,	ACI	! Active increment
	,IAB,	IAB	! Inactive base
	,IAI,	IAI	! Inactive increment
	,IAT,	IAT	! Inactive threshold
	,DYB,	DYB	! Dying base
	,DYI,	DYI	! Dying increment
	,DYT,	DYT	! Dying threshold
	,DTH,	DTH	! Dead threshold
	,VER,   VER	! Verification
	,XPT,   XPT	! Transport protocol

	);

!
! Line parameters.
!
    PRM_MAP (PLI, PCLI

	,STA,	STA	! State
	,SUB,	SUB	! Substate
	,SER,	SER	! Service
	,LCT,	LCT	! Counter timer
	,BFN,	BFN	! Number of buffers
	,CON,	CON	! Controller
	,DUP,	DUP	! Duplex
	,PRO,	PRO	! Type
	,CLO,	CLO	! Clock
	,STI,	STI	! Service timer
	,RTT,   RTT	! Retransmit timer
	,HTI,	HTI	! Holdback timer
	,MBL,	MBL	! Maximum block
	,MRT,	MRT	! Maximum retransmits
	,MWI,	MWI	! Maximum window
	,SLT,	SLT	! Scheduling timer
	,DDT,	DDT	! Dead timer
	,DLT,	DLT	! Delay timer
	,SRT,	SRT	! Stream timer
	,HWA,   HWA	! Hardware address on NI
	,MCD,   MCD	! Microcode dump filespec (WO)
	,MOD,   XMD	! PCL address mode

	);
!
! Logging parameters.
!
PRM_MAP (EFI, PCLO

	,SIN,	SIN	! Sink node
	,EVE,	EVE	! Events

	);

PRM_MAP (ESI, PCLO

	,STA,	STA	! State
	,LNA,	LNA	! Name

	);
!
! Executor parameters.
!
PRM_MAP (LNI, PCNO

	,STA,	STA	! State
	,IDE,	IDE	! Identification
	,ADD,	ADD	! Address
	,ITI,	ITI	! Incoming timer
	,OTI,	OTI	! Outgoing timer
	,NVE,	NVE	! NSP version
	,MLK,	MLK	! Maximum links
	,DFA,	DFA	! Delay factor
	,DWE,	DWE	! Delay weight
	,IAT,	IAT	! Inactivity timer
	,RFA,	RFA	! Retransmit factor
	,RVE,	RVE	! Routing version
	,ETY,	ETY	! Type
	,RTI,	RTI	! Routing timer
	,SAD,	SAD	! Subaddresses
	,BRT,	BRT	! Broadcast routing timer
	,MAD,	MAD	! Maximum address
	,MLN,	MLN	! Maximum lines
	,MCO,	MCO	! Maximum cost
	,MHO,	MHO	! Maximum hops
	,MVI,	MVI	! Maximum visits
	,MAR,	MAR	! Maximum areas
	,MBE,	MBE	! Maximum broadcast endnodes
	,MBR,	MBR	! Maximum broadcast routers
	,AMC,	AMC	! Area maximum cost
	,AMH,	AMH	! Area maximum hops
	,MBU,	MBU	! Maximum buffers
	,BUS,	BUS	! Buffer size
	,SBS,	SBS	! Segment buffer size
	,DAC,   DAC	! Default access
	,PIQ,	PIQ	! Pipeline quota
	,ALI,	ALI	! Node alias
	,DPX,	DPX	! Default proxy access

	);
!
! Node parameters.
!
PRM_MAP (NDI, PCNO

	,REA,	STA	! State
	,SLI,	SLI	! Service circuit
	,SPA,	SPA	! Service password
	,SDV,	SDV	! Service device
	,CPU,	CPU	! CPU type
	,HWA,	HWA	! Hardware address on NI
	,SNV,	SNV	! Service node version
	,LOA,	LOA	! Load file
	,SLO,	SLO	! Secondary loader
	,TLO,	TLO	! Tertiary loader
	,DFL,	DFL	! Diagnostic file
	,STY,	STY	! Software type
	,SID,	SID	! Software id
	,DUM,	DUM	! Dump file
	,SDU,	SDU	! Secondary dumper
	,DAD,	DAD	! Dump address
	,DCT,	DCT	! Dump count
	,IHO,	IHO	! Host
	,CTI,	CTI	! Counter timer
	,NNA,	NNA	! Name
	,LOO,	NLI	! Line
	,ADD,	ADD	! Address
	,ACL,	ACL	! Active links
	,DEL,	DEL	! Delay
	,DTY,	DTY	! Destination node type
	,DCO,	DCO	! Cost
	,DHO,	DHO	! Hops
	,NLI,	DLI	! Line
	,PUS,	PUS	! Privileged user id
	,PAC,	PAC	! Privileged account
	,PPW,	PPW	! Privileged password
	,NUS,	NUS	! Non-privileged user id
	,NAC,	NAC	! Non-privileged account
	,NPW,	NPW	! Non-privileged password
	,RPA,	RPA	! Receive password
	,TPA,	TPA	! Transmit password
	,ACC,	ACC	! Access
	,PRX,   PRX	! Proxy access

	);
!
! Map Area Network NETACP parameters to NICE.
!
PRM_MAP (ARI, PCAR
	,REA,	STA	! State
	,DCO,	COS	! Cost
	,DHO,	HOP	! Hops
	,DLI,	CIR	! Circuit
	,NND,	NND	! Next node to area
	);

!
! Map X-25 Access Module Network parameters to NICE
!
PRM_MAP (XAI, PCXA

	,NDA,	NOD 	! Node number
	,USR,	USR	! User
	,PSW,	PSW	! Password
	,ACC,	ACC	! Account

	);
!
! Map X-25 Protocol Network NETACP parameters to NICE
!
PRM_MAP (XNI, PCXP
	,NET,	NET	! Network
	,DBL,	DBL	! Default block
	,DWI,	DWI	! Default window
	,MBL,	MBL	! Maximum block
	,MWI,	MWI	! Maximum window
	,MCL,	MCL	! Maximum clears
	,MRS,	MRS	! Maximum resets
	,MST,	MST	! Maximum restarts
	,CAT,	CAT	! Call timer
	,CLT,	CLT	! Clear timer
	,RST,	RST	! Reset timer
	,STT,	STT	! Restart timer
	);

!
! Map X-25 Protocol DTE NETACP parameters to NICE parameters
!
PRM_MAP (XDI, PCXP
	,DTE,	DTE	! DTE
	,NET,	NET	! Network (returned only if net not turned on).
	,ACH,	ACH	! Active channels
	,ASW,	ASW	! Active switched
	,STA,	STA	! State
	,CTM,	CTM	! Counter timer
	,MCH,	MCH	! Maximum channels
	,LIN,	LIN	! Line
	,CHN,	CHN	! Channels
	);

!
! Map X-25 Protocol Group NETACP parameters to NICE parameters
!
PRM_MAP (XGI, PCXP
	,GRP,	GRP	! Group name
	,GDT,	GDT	! Group DTE
	,GNM,	GNM	! Group number
	,GTY,	GTY	! Group type
	);

!
! Map X-25 Server NETACP parameters to NICE parameters
!
PRM_MAP (XS5, PCXS
	,CTM,	CTM	! Counter timer
	,ACI,	ACI	! Active circuits
	,MCI,	MCI	! Maximum channels
	);

!
! X-25 Server Destination parameters for SET ALL
!
PRM_MAP (XD5, PCXS
	,DST,	DST	! Destination
	,NOD,	NOD	! Node
	,USR,	USR	! User
	,PSW,	SPW	! Password
	,ACC,	ACC	! Account
	,OBJ,	OBJ	! Object
	,PRI,	PRI	! Priority
	,CMK,	CMK	! Call mask
	,CVL,	CVL	! Call value
	,GRP,	GRP	! Group
	,NUM,	NUM	! Number
	,SAD,	SAD	! Subaddresses
	);

!
! X-25 Trace parameters for SET ALL
!
PRM_MAP (XTI, PCXT
	,STA,	STA	! State
	,BFZ,	BSZ	! Buffer size
	,MBK,	MBK	! Maximum blocks/file
	,FNM,	FNM	! Filename
	,MBF,	MBF	! Maximum number of buffers
	,CPL,	CPL	! Capture limit
	,MVR,	MVR	! Maximum trace file version
	);
!
! X25-Tracepoint parameters for SET ALL
!
PRM_MAP (XTT, PCXT
	,TST,	TST	! Tracepoint state
	,CPS,	CPS	! Per-trace capture size
	,TPT,	TPT	! Trace point name
	);

!
! Map X-29 Server NETACP parameters to NICE parameters
!
PRM_MAP (XS9, PCXS
	,CTM,	CTM	! Counter timer
	,ACI,	ACI	! Active circuits
	,MCI,	MCI	! Maximum channels
	);

!
! X-29 Server Destination parameters
!
PRM_MAP (XD9, PCXS
	,DST,	DST	! Destination
	,NOD,	NOD	! Node
	,USR,	USR	! User
	,PSW,	SPW	! Password
	,ACC,	ACC	! Account
	,OBJ,	OBJ	! Object
	,PRI,	PRI	! Priority
	,CMK,	CMK	! Call mask
	,CVL,	CVL	! Call value
	,GRP,	GRP	! Group
	,NUM,	NUM	! Number
	,SAD,	SAD	! Subaddresses
	);

!
! Object parameters.
!
PRM_MAP (OBI, PCOB

	,FID,	FID	! File
	,PID,	PID	! Process id
	,NUM,	NUM	! Number
	,LPR,	PRV	! Privileges
	,USR,	USR	! User id
	,ACC,	ACC	! Account
	,PSW,	PSW	! Password
	,PRX,	PRX	! Proxy access

	);

PRM_MAP (LLI, PCLK

	,STA,	STA	! State
	,PID,	PID	! Process ID
	,PNN,	NID	! Partner node number
	,PNA,	NID	! Parter node name
	,DLY,	DLY	! Round trip delay time
	,RLN,	RLN	! Remote link number
	,USR,	USR	! Username of link owner
	,PRC,	PRC	! Process name of link owner

	);

PRM_MAP (AJI, PCCI

	,ADD,	ADJ	! Adjacent node address
	,LIT,	LIT	! Listen timer
	,BLO,	BLO	! Block size
	,NNA,	ADJ	! Adjacent node name
	);

UNDECLARE
    %QUOTE PRM_MAP,
    %QUOTE $DEXTN;


END						! End of module

ELUDOM
