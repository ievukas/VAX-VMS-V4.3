	.title	pli$time_date -  pl1 runtime routines for date and time
	.ident	/1-002/					; Edit WHM1002
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
;++
; facility:
;
;	VAX/VMS pl1 runtime library.
;
; abstract:
;
;	This module contains the pl1 runtime routines that format
;	date and time
;
; author:
;	r. heinen 16-feb-1979
; modifications:
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;--
 
;
; external definitions
;
 
;
; local data
;
 
	rtshare
	.page
	.sbttl	pli$date - return date
;++
; pli$date - routine to return date
;
; functional decription:
;
; This routine returns the date in YYMMDD format.
;
; inputs:
;
;	r1 = address to return string - char(6)
;
; outputs:
;
;	string is returned.
;--
	.entry	pli$date,^m<r2,r3>
	subl	#14,sp			; allocate buffer
	movl	sp,r2			;
	movl	r1,r3			; save buffer address
	$numtim_s timbuf= (r2)		; get the time
	movzwl	(r2)+,r0		; get year
	clrl	r1			; setup quad word
	ediv	#100,r0,r0,r1		; get remainder from 100
	bsbw	cvrt_two_char		; convert two characters
	movzwl	(r2)+,r1		; get year
	bsbw	cvrt_two_char		; convert to 2 chars
	movzwl	(r2)+,r1		; get day
	bsbw	cvrt_two_char		; convert
	ret				; done
	.sbttl	pli$time - return time
;++
; pli$time - routine to return time
;
; functional decription:
;
; This routine returns the time in HHMMSS format.
;
; inputs:
;
;	r1 = address to return string - char(6)
;
; outputs:
;
;	string is returned.
;--
	.entry	pli$time,^m<r2,r3>
	subl	#14,sp			; allocate buffer
	movl	sp,r2			; address buffer
	movl	r1,r3			; save buffer address
	$numtim_s timbuf= (r2)		; get the time
	addl	#6,r2			; point to time data
	movzwl	(r2)+,r1		; get hour
	bsbw	cvrt_two_char		; convert two characters
	movzwl	(r2)+,r1		; get minute
	bsbw	cvrt_two_char		; convert to 2 chars
	movzwl	(r2)+,r1		; get second
	bsbw	cvrt_two_char		; convert
	movzwl	(r2)+,r1		; convert hundreths
	bsbw	cvrt_two_char		;
	ret				; done
	.page
	.sbttl subroutines
;++
; cvrt_two_char - convert number to two ascii characters
;
; inputs:
;
;	r1 = number to convert
;	r3 = address to store data
;
; outputs:
;
;	r3 = updated address
;--
cvrt_two_char:
	divl3	#10,r1,r0		; get tens digit
	addb3	#^a/0/,r0,(r3)+		; insert character
	mull	#10,r0			; 
	subl	r0,r1			; remove tens value
	addb3	#^a/0/,r1,(r3)+		; insert ones digit
	rsb
; 
	.end
