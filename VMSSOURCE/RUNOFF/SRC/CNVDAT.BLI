%TITLE 'CNVDAT - Converts binary date and time into ascii'
MODULE CNVDAT (	IDENT = 'V04-000'
    		%BLISS32 [ , ADDRESSING_MODE ( EXTERNAL	=    LONG_RELATIVE,
    					       NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Convert binary and date and time into something
!		more legible (i.e., ASCII).
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: February, 1979
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	009	REM00009	Ray Marshall	30-Mar-1984
!		Added conditionals for foreign language support.  Provided
!		  German translations for the names of the months.
!
!	008	KFA00008	Ken Alden	16-Sep-1983
!		Did the same as 007 but did it for RUNOFF.
!
!	007	KFA00007	Ken Alden	8-Jul-1983
!		Removed hack that always assumed that the date was 
!		  two characters long.
!
!	006	KFA00006	Ken Alden	8-Jul-1983
!		Removed the leading '0' from the date (if any).
!
!	005	KFA00005	Ken Alden	13-April-1983
!		For DSRPLUS: Format of the date will now read like
!		the date of this rev. history.(without the hyphens)
!	
!	004	KFA00004	Ken Alden	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!
EXTERNAL
    GCA : GCA_DEFINITION;

EXTERNAL ROUTINE
    CONVBB;

%sbttl 'CNVDAT -- convert date to ASCII string'
GLOBAL ROUTINE CNVDAT (PIECES, RESULT, RESULT_LENGTH) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Converts a binary date into something legible.
!
! FORMAL PARAMETERS:
!
!	PIECES are the separated month, day, and year.
!	It's really the complete binary date and time, but only the
!	date portion is used.
!	RESULT is a CH$PTR to where the results are to go.
!	RESULT_LENGTH is the number of characters in the result.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:
!
!	Advances the pointer, RESULT.
!
!--

    BEGIN

    LOCAL
	CHARS : VECTOR [20],
	COUNT;

    MAP
	PIECES : REF VECTOR;

    BIND
	YEAR = PIECES[0],
	MONTH = PIECES[1],
	DAY = PIECES[2];

    !Convert the day to ASCII.
    CONVBB(.DAY,CHARS,COUNT, 10);

!!    !Insist that the day be two digits.
!!    IF!
!!	.COUNT NEQ 2
!!    THEN
!!	CH$WCHAR_A(%C'0', .RESULT);

    !Now copy over what was actually converted.
    DECR I FROM .COUNT TO 1 DO
	CH$WCHAR_A(.CHARS[.I-1], .RESULT);

    !Now, add an appropriate separator.
    CH$WCHAR_A(%C' ', .RESULT);

    !Add the name of the month.
    BEGIN
    BIND
    	MONTH_NAME= UPLIT (
%(		The following block of code is commented out because the
		one that follows defines the month names in their fully
		spelled out forms.
%IF german %THEN
			    CH$PTR(UPLIT('Jan')),
			    CH$PTR(UPLIT('Feb')),
			    CH$PTR(UPLIT('Mar')),
			    CH$PTR(UPLIT('Apr')),
			    CH$PTR(UPLIT('Mai')),
			    CH$PTR(UPLIT('Jun')),
			    CH$PTR(UPLIT('Jul')),
			    CH$PTR(UPLIT('Aug')),
			    CH$PTR(UPLIT('Sep')),
			    CH$PTR(UPLIT('Okt')),
			    CH$PTR(UPLIT('Nov')),
			    CH$PTR(UPLIT('Dez'))
%ELSE
%IF french %THEN
			    CH$PTR(UPLIT('Jan')),
			    CH$PTR(UPLIT('Feb')),
			    CH$PTR(UPLIT('Mar')),
			    CH$PTR(UPLIT('Apr')),
			    CH$PTR(UPLIT('May')),
			    CH$PTR(UPLIT('Jun')),
			    CH$PTR(UPLIT('Jul')),
			    CH$PTR(UPLIT('Aug')),
			    CH$PTR(UPLIT('Sep')),
			    CH$PTR(UPLIT('Oct')),
			    CH$PTR(UPLIT('Nov')),
			    CH$PTR(UPLIT('Dec'))
%ELSE
%IF italian %THEN
			    CH$PTR(UPLIT('Jan')),
			    CH$PTR(UPLIT('Feb')),
			    CH$PTR(UPLIT('Mar')),
			    CH$PTR(UPLIT('Apr')),
			    CH$PTR(UPLIT('May')),
			    CH$PTR(UPLIT('Jun')),
			    CH$PTR(UPLIT('Jul')),
			    CH$PTR(UPLIT('Aug')),
			    CH$PTR(UPLIT('Sep')),
			    CH$PTR(UPLIT('Oct')),
			    CH$PTR(UPLIT('Nov')),
			    CH$PTR(UPLIT('Dec'))
%ELSE
			    CH$PTR(UPLIT('Jan')),
			    CH$PTR(UPLIT('Feb')),
			    CH$PTR(UPLIT('Mar')),
			    CH$PTR(UPLIT('Apr')),
			    CH$PTR(UPLIT('May')),
			    CH$PTR(UPLIT('Jun')),
			    CH$PTR(UPLIT('Jul')),
			    CH$PTR(UPLIT('Aug')),
			    CH$PTR(UPLIT('Sep')),
			    CH$PTR(UPLIT('Oct')),
			    CH$PTR(UPLIT('Nov')),
			    CH$PTR(UPLIT('Dec'))
%FI %FI %FI
)%
%IF german %THEN
			    CH$PTR(UPLIT('Jaenner')),
			    CH$PTR(UPLIT('Februar')),
			    CH$PTR(UPLIT('Maerz')),
			    CH$PTR(UPLIT('April')),
			    CH$PTR(UPLIT('Mai')),
			    CH$PTR(UPLIT('Juni')),
			    CH$PTR(UPLIT('Juli')),
			    CH$PTR(UPLIT('August')),
			    CH$PTR(UPLIT('September')),
			    CH$PTR(UPLIT('Oktober')),
			    CH$PTR(UPLIT('November')),
			    CH$PTR(UPLIT('Dezember'))
%ELSE
%IF french %THEN
    			    CH$PTR(UPLIT('January')),
    			    CH$PTR(UPLIT('February')),
    			    CH$PTR(UPLIT('March')),
    			    CH$PTR(UPLIT('April')),
    			    CH$PTR(UPLIT('May')),
    			    CH$PTR(UPLIT('June')),
    			    CH$PTR(UPLIT('July')),
    			    CH$PTR(UPLIT('August')),
    			    CH$PTR(UPLIT('September')),
    			    CH$PTR(UPLIT('October')),
    			    CH$PTR(UPLIT('November')),
    			    CH$PTR(UPLIT('December'))
%ELSE
%IF italian %THEN
    			    CH$PTR(UPLIT('January')),
    			    CH$PTR(UPLIT('February')),
    			    CH$PTR(UPLIT('March')),
    			    CH$PTR(UPLIT('April')),
    			    CH$PTR(UPLIT('May')),
    			    CH$PTR(UPLIT('June')),
    			    CH$PTR(UPLIT('July')),
    			    CH$PTR(UPLIT('August')),
    			    CH$PTR(UPLIT('September')),
    			    CH$PTR(UPLIT('October')),
    			    CH$PTR(UPLIT('November')),
    			    CH$PTR(UPLIT('December'))
%ELSE
    			    CH$PTR(UPLIT('January')),
    			    CH$PTR(UPLIT('February')),
    			    CH$PTR(UPLIT('March')),
    			    CH$PTR(UPLIT('April')),
    			    CH$PTR(UPLIT('May')),
    			    CH$PTR(UPLIT('June')),
    			    CH$PTR(UPLIT('July')),
    			    CH$PTR(UPLIT('August')),
    			    CH$PTR(UPLIT('September')),
    			    CH$PTR(UPLIT('October')),
    			    CH$PTR(UPLIT('November')),
    			    CH$PTR(UPLIT('December'))
%FI %FI %FI
    			    ) : VECTOR;
    OWN
    	MONTHL : VECTOR [12] 
%IF german %THEN
		INITIAL (7, 7, 5, 5, 3, 4, 4, 6, 9, 7, 8, 8);
%ELSE
%IF french %THEN
		INITIAL (7, 8, 5, 5, 3, 4, 4, 6, 9, 7, 8, 8);
%ELSE
%IF italian %THEN
		INITIAL (7, 8, 5, 5, 3, 4, 4, 6, 9, 7, 8, 8);
%ELSE
		INITIAL (7, 8, 5, 5, 3, 4, 4, 6, 9, 7, 8, 8);
%FI %FI %FI


    LOCAL
    	len,
	ptr;

    len = .monthl[.month-1];
    PTR = .MONTH_NAME[.MONTH-1];
    INCR I FROM 1 TO .len DO CH$WCHAR_A(CH$RCHAR_A(PTR), .RESULT);

!!    INCR I FROM 1 TO 3 DO CH$WCHAR_A(CH$RCHAR_A(PTR), .RESULT);
   
    !Add a separator.
    CH$WCHAR_A(%C' ', .RESULT);

    !Result length prior to year string:
    .RESULT_LENGTH = .count + 1 + .len + 1;
    END;

    !Put in the year.
    CONVBB(.YEAR,CHARS,COUNT, 10);


    IF .count EQL 1 THEN
	BEGIN
	CH$WCHAR_A(%C'0', .RESULT);
	CH$WCHAR_A(.CHARS[0], .RESULT);
	.RESULT_LENGTH = ..RESULT_LENGTH + 2
	END;

    IF .count GTR 1 THEN

!%IF DSRPLUS %THEN
	    BEGIN
	    DECR i FROM .count TO 1 DO
		CH$WCHAR_A(.CHARS[.I-1], .RESULT);
	    .RESULT_LENGTH = ..RESULT_LENGTH + .count;
	    END;
!%ELSE
!	    BEGIN
!	    CH$WCHAR_A(.CHARS[1], .RESULT);
!	    CH$WCHAR_A(.CHARS[0], .RESULT);
!	    .RESULT_LENGTH = ..RESULT_LENGTH + 2
!	    END
!%FI;

    RETURN;



    END;			!End of CNVDAT

%sbttl 'CNVTIM -- Convert time to ASCII string'
GLOBAL ROUTINE CNVTIM (PIECES, RESULT, RESULT_LENGTH) : NOVALUE = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Converts a binary time into something legible.
!
! FORMAL PARAMETERS:
!
!	PIECES is the complete binary date and time.  This routine
!	uses only the time information.
!	RESULT is a CH$PTR to where the results are to go.
!	RESULT_LENGTH is the number of characters in the result.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:
!
!	Advances the pointer, RESULT.
!
!--

    BEGIN

    LOCAL
	CHARS : VECTOR[20],
	COUNT;

    MAP
	PIECES : REF VECTOR;

    BIND
	HOURS = PIECES[3],
	MINUTES = PIECES [4],
	SECONDS = PIECES [5];

    !Convert the hours.
    CONVBB(.HOURS,CHARS,COUNT, 10);

    !Put the characters into the string.  Force it to be exactly
    !two digits.
    INCR I FROM 1 TO (2 - .COUNT) DO
	CH$WCHAR_A(%C'0', .RESULT);
    DECR I FROM .COUNT TO 1 DO
	CH$WCHAR_A(.CHARS[.I-1], .RESULT);

    !Insert a separator
    CH$WCHAR_A(%C':', .RESULT);

    !Convert the minutes
    CONVBB(.MINUTES,CHARS,COUNT, 10);

    !Put the characters into the string.  Force it to be exactly
    !two digits.
    INCR I FROM 1 TO (2 - .COUNT) DO
	CH$WCHAR_A(%C'0', .RESULT);
    DECR I FROM .COUNT TO 1 DO
	CH$WCHAR_A(.CHARS[.I-1], .RESULT);

    !Insert a separator
    CH$WCHAR_A(%C':', .RESULT);

    !Convert the seconds
    CONVBB(.SECONDS,CHARS,COUNT, 10);

    !Put the characters into the string.  Force it to be exactly
    !two digits.
    INCR I FROM 1 TO (2 - .COUNT) DO
	CH$WCHAR_A(%C'0', .RESULT);
    DECR I FROM .COUNT TO 1 DO
	CH$WCHAR_A(.CHARS[.I-1], .RESULT);

    !Return the length.
    .RESULT_LENGTH = 2 + 1 + 2 + 1 + 2;

    RETURN;

    END;			!End of CNVTIM
END				!End of module
ELUDOM
