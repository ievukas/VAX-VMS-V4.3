%TITLE 'EDT$LCLEAR - CLEAR command'
MODULE EDT$LCLEAR (				! CLEAR command
		IDENT = 'V04-000'			! File: LCLEAR.BLI Edit: JBS1009
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module executes the line mode CLEAR command.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: February 3, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 02-FEB-1981.  This module was created by
!	extracting the routine EDT$$CLR_CMD  from the routine EXEC.BLI.
! 1-002	- Regularize headers.  JBS 19-Mar-1981
! 1-003 - Implement virtual memory deallocation TMV 5-Aug-81
! 1-004 - Close the input buffer on a CLEAR MAIN.  SMB 3-May-1982
! 1-005	- Regularize format.  JBS 04-May-1982
! 1-006	- Flag the screen as changed if we delete the current buffer.  JBS 07-Jul-1982
! 1-007	- Change EDT$$G_SCR_CHGD to EDT$$G_SCR_REBUILD.  JBS 09-Oct-1982
! 1-008	- Don't let EDT$$A_PRV_BUF point to limbo.  JBS 14-Apr-1983
! 1-009	- When deleting a buffer, put all its blocks on the available list.  JBS 20-Jun-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$CLR_CMD : NOVALUE;			! Process the CLEAR command

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    EDT$K_INPUT_FILE,
    EDT$K_CLOSE;

! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$CLR_CMD  - CLEAR command'

GLOBAL ROUTINE EDT$$CLR_CMD 			! CLEAR line-mode command
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Command processing for CLEAR.   Position to the buffer to
!	be cleared, then call the work file system to clear it.
!	If we are deleting the buffer header, delete the first block
!	of the buffer also.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$A_CUR_BUF
!	EDT$$A_EXE_CURCMD
!	EDT$$A_WK_BUK
!	EDT$$G_WK_AVAIL
!	EDT$$G_WK_CURBUK
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_SCR_REBUILD
!	EDT$$A_WK_BUK
!	EDT$$G_WK_AVAIL
!	EDT$$G_WK_CURBUK
!	EDT$$A_PRV_BUF
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	The input file is closed (if not already) when a CLEAR MAIN occurs.
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$FMT_MSG,				! Print a message
	EDT$$CALLFIO,				! Do file I/O
	EDT$$DEA_HEAP,				! Deallocate heap storage
	EDT$$FND_BUF,				! Find a buffer
	EDT$$WF_CLRBUF,				! Clear a buffer
	EDT$$RD_CURLN;				! Read the current line

    EXTERNAL
	EDT$$G_INPUT_OPN,			! input file is still open
	EDT$$G_SCR_REBUILD,			! Set if the screen must be rebuilt
	EDT$$A_BUF_LST,				! The list of buffers
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,	! Pointer to the current buffer
	EDT$$A_EXE_CURCMD : REF NODE_BLOCK,	! Pointer to the current command.
	EDT$$A_PRV_BUF : REF TBCB_BLOCK,	! Pointer to the previous buffer
	EDT$$A_WK_BUK : REF BLOCK [WF_BUKT_SIZE, BYTE] FIELD (WFB_FIELDS),	! Current bucket
	EDT$$G_WK_AVAIL,			! Next available bucket
	EDT$$G_WK_CURBUK;			! Current bucket

    MESSAGES ((INPFILCLO));

    LOCAL
	LEN : BYTE,
	SAVE_TBCB,
	PREV : REF TBCB_BLOCK,
	NEXT : REF TBCB_BLOCK,
	RANGE : REF NODE_BLOCK;

    BIND
	MAIN_TXT = UPLIT (BYTE ('MAIN')),
	PASTE_TXT = UPLIT (BYTE ('PASTE'));

!+
! Save the current TBCB so we can get back.
!-
    SAVE_TBCB = .EDT$$A_CUR_BUF;
    RANGE = .EDT$$A_EXE_CURCMD [RANGE1];
!+
! Did we find or allocate a buffer successfully?
!-

    IF EDT$$FND_BUF (.RANGE [BUF_NAME], .RANGE [BUF_LEN])
    THEN
	BEGIN
!+
! The MAIN and the PASTE buffers cannot be deleted, they can be cleared only.
!-

	IF (CH$EQL (.RANGE [BUF_LEN], .RANGE [BUF_NAME], 4, MAIN_TXT)) OR 	!
	    (CH$EQL (.RANGE [BUF_LEN], .RANGE [BUF_NAME], 5, PASTE_TXT))
	THEN
	    BEGIN
!+
! If MAIN is being CLEARed and the input file is still open, then close it.
!-

	    IF ((CH$EQL (.RANGE [BUF_LEN], .RANGE [BUF_NAME], 4, MAIN_TXT)) AND .EDT$$G_INPUT_OPN)
	    THEN

		IF EDT$$CALLFIO (EDT$K_CLOSE, EDT$K_INPUT_FILE, 0, 0)
		THEN
		    BEGIN
		    EDT$$A_CUR_BUF [TBCB_INPUT_RAB] = 0;
		    EDT$$G_INPUT_OPN = 0;
		    END
		ELSE
		    EDT$$FMT_MSG (EDT$_INPFILCLO);

	    EDT$$WF_CLRBUF ();			! Delete all but first block
	    END
	ELSE
	    BEGIN
	    EDT$$WF_CLRBUF ();			! Delete all but first block
!+
! Put the first block of the buffer on the available list.
!-
	    EDT$$A_WK_BUK [WFB_NEXT_BUKT] = .EDT$$G_WK_AVAIL;
	    EDT$$G_WK_AVAIL = .EDT$$G_WK_CURBUK;
!+
! Delete the buffer by disconnecting the TBCB header from the list
!-
	    PREV = .EDT$$A_CUR_BUF [TBCB_PREV_BUF];
	    NEXT = .EDT$$A_CUR_BUF [TBCB_NEXT_BUF];
!+
! If we want to clear the first buffer which is not MAIN we have to
! readjust the buffer list header pointer.
!-

	    IF (.PREV EQLA 0) THEN EDT$$A_BUF_LST = .NEXT;

!+
! Unlink the deleted buffer header
!-

	    IF (.NEXT NEQA 0) THEN NEXT [TBCB_PREV_BUF] = .PREV;

	    IF (.PREV NEQA 0) THEN PREV [TBCB_NEXT_BUF] = .NEXT;

!+
! Get the name length, and the beginning address, then deallocate header.
!-
	    LEN = .EDT$$A_CUR_BUF [TBCB_NAME_LEN];
	    EDT$$DEA_HEAP (%REF (TBCB_SIZE + .LEN), EDT$$A_CUR_BUF);
	    END;

!+
! If the current buffer other than MAIN was deleted, go to the MAIN buffer and don't let
! LAST point to a deleted buffer.  Also, if the current buffer was deleted then the
! text part of the screen must be rebuilt.
!-

	IF (.EDT$$A_CUR_BUF EQLA .SAVE_TBCB)
	THEN
	    BEGIN
	    EDT$$FND_BUF (MAIN_TXT, 4);
	    EDT$$A_PRV_BUF = .EDT$$A_CUR_BUF;
	    EDT$$G_SCR_REBUILD = 1;
	    END
!+
! Otherwise go back to the original buffer.
!-
	ELSE
	    EDT$$A_CUR_BUF = .SAVE_TBCB;

	END;

    EDT$$RD_CURLN ();
    END;					! of routine EDT$$CLR_CMD

!<BLF/PAGE

END						! of module EDT$LCLEAR

ELUDOM
