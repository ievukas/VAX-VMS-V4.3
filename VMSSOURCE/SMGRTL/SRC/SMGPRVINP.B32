%TITLE 'SMG$$PRVINP - Private Input support routines'
MODULE SMG$$PRVINP (
		IDENT = '1-001'	! File: SMGPRVINP.B32 Edit: STAN1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Screen Management
!
! ABSTRACT:
! 	The procedures in this module act as interfaces between the
! virtual displays and pasteboards and associated data structures, and
! the keyboard input side of SMG.  These routines are called to pass
! information about changes to the physical screen that have been
! brought about by input-related activities.
! These are in a module by themselves so that they can be explicitly
! linked into programs that need them (like WHAT) since they
! will not be in the SMGSHR vector.
!
! ENVIRONMENT:	User mode, Shared library routines.
!
! AUTHOR: R. Reichert, CREATION DATE: 9-Mar-1983
!
! MODIFIED BY:
!
! 1-001	- Original.  Moved out of other modules. STAN 7-Mar-1984.
!--

%SBTTL 'Declarations'
!
! SWITCHES:
!

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE

! Private entry points:

    SMG$$INVALIDATE_DISPLAY,		! Mark contents of display as unknown

    SMG$$REPORT_CHANGE_INSERT,		! Report change to physical
					! screen in insert mode.

    SMG$$REPORT_CHANGE_REPLACE;		! Report change to physical
					! screen in replaec mode.

!
! INCLUDE FILES
!

REQUIRE 'RTLIN:SMGPROLOG';		! defines psects, macros, tcb,
					!  wcb, & terminal symbols

!
! EXTERNAL REFERENCES
!

EXTERNAL
    PBD_L_COUNT,	! No. of pasteboards we currently have

    PBD_A_PBCB : VECTOR [PBD_K_MAX_PB, LONG],
			! Table of addresses of PBCB's

    PBD_V_PB_AVAIL : BITVECTOR [PBD_K_MAX_PB];
			! Bit vector or pasteboard id numbers in use.

EXTERNAL ROUTINE
    LIB$GET_VM,		! Allocate heap storage

    SMG$INSERT_CHARS,		! Insert char in virtual display buffer
				! and cause output.

    SMG$$FILL_WINDOW_BUFFER,	! Map all virtual display buffers to
				! the window buffer for a given PBCB

    SMG$$FLUSH_BUFFER,	! Flush any pending output to terminal

    SMG$$FORCE_SCROLL_REG,	! Force scroll region to specified
				! lines.

    SMG$$LOCATE_PP,	! Locate pasting packet that joins a virtual
			! display to a pasteboard.

    SMG$$MOVE_TEXT_TO_SCREEN_BUF,

    SMG$$MOVE_TEXT_TO_WINDOW_BUF, 	! Map single virtual display to
				     	! window buffer.

    SMG$$OCCLUDE,	! Determine overlap between two rectangular
			! areas.
    SMG$$MIN_UPD,	! Minimum output routine

    SMG$$PUT_TEXT_TO_BUFFER;	! Text to virtual display buffer

EXTERNAL LITERAL

    SMG$_FATERRLIB,	! Fatal error in library procedure
    SMG$_INVARG,	! Invalid argument
    SMG$_INVCOL,	! Invalid column number
    SMG$_INVDIS_ID,	! Invalid virtual display id
    SMG$_INVPAS_ID,	! Invalid pasteboard id
    SMG$_INVROW;	! Invalid row number

%SBTTL 'SMG$$INVALIDATE_DISPLAY - Mark display as being privately used'
GLOBAL ROUTINE SMG$$INVALIDATE_DISPLAY ( DISPLAY_ID) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called when ever a change has been completed
!	to a given virtual display and the user had previously
!	written into that display on his own, without using
!	SMG routines.
!
!	The virtual display must not be occluded.
!
!	Each pasteboard to which this display is pasted is isolated and
!	its window image must be redrawn.
!	The new physical pasteboard cursor position gets set.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SMG$$INVALIDATE_DISPLAY ( DISPLAY_ID.rl.r)
!
! FORMAL PARAMETERS:
!
!	DISPLAY_ID.rl.r		Display ID of virtual display.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!
! SIDE EFFECTS:
!
!	NONE
!--

BEGIN

LOCAL

	DCB	: REF BLOCK [,BYTE],	! Addr of display control block
	CURR_PP : REF BLOCK [,BYTE],	! Addr of pasting packet under
					! inspection

	STATUS;	! Status of subroutine calls

!+
! This routine is independent of buffering.
!-

$SMG$GET_DCB (.DISPLAY_ID, DCB);	! Get DCB address

CURR_PP = .DCB [DCB_A_PP_NEXT];		! Start of chain of pasting
					! packets to which this display
					! is pasted.

!+
! Deal with each pasteboard that this virtual display is pasted to...
!-

WHILE .CURR_PP NEQ DCB [DCB_A_PP_NEXT]
DO
	BEGIN	! Overall loop

	LOCAL
	    PBCB : REF BLOCK [,BYTE],	! Address of pasteboard control
	    WCB  : REF BLOCK [,BYTE],	! Address of window control block
	    TO_INDEX;			! Index into destination

	PBCB = .CURR_PP [PP_A_PBCB_ADDR]; ! Select this pasteboard and WCB
	WCB  = .PBCB	[PBCB_A_WCB];	  ! whose window needs rebuilding.

	TO_INDEX   = .CURR_PP [PP_W_TO_INDEX];

	INCR R FROM 1 TO .CURR_PP [PP_W_ROWS_TO_MOVE]
	DO
		BEGIN	! For all rows in this display
		!+
		! Zero out the display buffer.
		!-
		CH$FILL (0,
			 .CURR_PP [PP_W_MOVE_LENGTH],
		         .WCB [WCB_A_SCR_TEXT_BUF] + .TO_INDEX);

		TO_INDEX   = .TO_INDEX   + .WCB [WCB_W_NO_COLS];
		END;	! For all rows to move

	CURR_PP = .CURR_PP [PP_A_NEXT_DCB];	! Walk the DCB side of
						! the chain from front
						! to back.
	END;	! Overall loop

RETURN	SS$_NORMAL

END;		! End of routine SMG$$INVALIDATE_DISPLAY

%SBTTL 'SMG$$REPORT_CHANGE_INSERT - Report change to screen -- insert'
GLOBAL ROUTINE SMG$$REPORT_CHANGE_INSERT ( 
				    DISPLAY_ID,
				    PASTEBOARD_ID,
				    CHANGED_CHAR,
				    CHANGED_ROW,
				    CHANGED_COL,
				    TERMINATING_CHAR
				  ) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to report a change made to the physical
!	screen via an input action involving insertion.  The character
!	identified by CHANGED_CHAR has been positioned on the screen in
!	a position corresponding to the virtual display coordinates 
!	CHANGED_ROW and CHANGED_COL.
!
!	TERMINATING_CHAR specifies the details of the change.
!
!	If TERMINATING_CHAR has not been specified, then CHANGED_CHAR 
!	has been echoed in the position indicated.  The original 
!	contents of the line from CHANGED_COL to the right-hand edge of
!	the virtual display need to be shifted to the right by one
!	character.  The new contents of CHANGED_COL+1 through the
!	right-hand edge need to be redisplayed on the screen.
!	Current cursor position is changed to reflect that one beyond 
!	that indicated by CHANGED_COL.  If this new position is now 
!	beyond the bounds of the virtual display's dimensions
!	then ?????.
!
!	If TERMINATING_CHAR was specified, CHANGED_CHAR has been echoed
!	in the position indicated.  Futhermore, this character was 
!	followed by a TERMINATING_CHAR.  The original contents of the 
!	line from CHANGED_COL to the right-hand edge of the virtual 
!	display need to be shifted to the right by one character.  The 
!	new contents of CHANGED_COL+1 through the right-hand edge need 
!	to be redisplayed on the screen.
!	Current cursor position is changed to reflect the effects of 
!	the TERMINATING_CHAR.  If this new position is now beyond the 
!	bounds of the virtual display's dimensions then ????.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SMG$$REPORT_CHANGE_INSERT (
!					DISPLAY_ID.rl.r,
!				        PASTEBOARD_ID.rl.r,
!			    		CHANGED_CHAR.rb.r,
!			    		CHANGED_ROW.rl.r,
!			    		CHANGED_COL.rl.r
!			    		[,TERMINATING_CHAR.rb.r])
! FORMAL PARAMETERS:
!
!	DISPLAY_ID.rl.r		Display id of virtual display.
!
!	PASTEBOARD_ID.rl.r	Pasteboard id.
!
!	CHANGED_CHAR.rb.r	The character that modified the screen.
!
!	CHANGED_ROW.rl.r	Row number within the virtual display in
!				which CHANGED_CHAR was written.
!
!	CHANGED_COL.rl.r	Column number within the virtual display
!				where CHANGED_CHAR was written.
!
!	[,TERMINATING_CHAR.rb.r] 	[Optional].  
!				If supplied, the terminating character 
!				that followed CHANGED_CHAR  (See 
!				functional description for meaning).
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	SMG$_INVDIS_ID	Invalid Display Id
!	SMG$_INVPAS_ID	Invalid Pasteboard Id
!	SMG$_INVROW	Invalid row specified
!	SMG$_INVCOL	Invalid column specified
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN
    BUILTIN
	NULLPARAMETER;

    LOCAL
	DESC : BLOCK [8,BYTE],		! Local descriptor
	STATUS,				! Status of subroutine calls
	DCB  : REF $DCB_DECL,		! Addr of display control block
	PBCB : REF $PBCB_DECL,		! Addr of pasteboard control
					! block.
	PP   : REF $PP_DECL;		! Addr of pasting packet

    $SMG$VALIDATE_ARGCOUNT (5, 6);	! Test for right no. of args

!+
! Get addresses of control blocks we need
!-
    $SMG$GET_DCB (.DISPLAY_ID, DCB);		       ! Get DCB addr.
    $SMG$GET_PBCB ( .PASTEBOARD_ID, PBCB) ;	       ! Get PBCB addr.
    IF NOT (STATUS = SMG$$LOCATE_PP (.DCB, .PBCB, PP)) ! Get PP addr.
    THEN
	RETURN (.STATUS);

    $SMG$VALIDATE_ROW_COL (..CHANGED_ROW, ..CHANGED_COL); ! Valid Pos.?

!+
! Initialize our local descriptor to point to the changed character.
!-
    DESC [DSC$W_LENGTH] = 1;
    DESC [DSC$B_CLASS]  = DSC$K_CLASS_S;
    DESC [DSC$B_DTYPE]  = DSC$K_DTYPE_T;
    DESC [DSC$A_POINTER]= .CHANGED_CHAR;

!+
! Reflect this change in the virtual display text and attribute buffer,
! including new virtual display cursor position.
! Data from the affected column to the last-1 column of this line need
! to be moved one character position to the right and the changed
! character inserted at the indicated position.  The attributes for the
! moved bytes must be moved as well.
!-
    IF NOT (STATUS = SMG$INSERT_CHARS ( .DISPLAY_ID,
					.CHANGED_ROW,
					.CHANGED_COL,
					DESC))
    THEN
	RETURN (.STATUS);

    IF NOT NULLPARAMETER (6)
    THEN
	BEGIN	! Terminator supplied
	!+
	! Inspect supplied terminator to determine effect on cursor
	! position in virtual display.
	!-
	!+
	! ***** For now pretend the terminator is a <CR>. *****
	! ***** This needs to act like a <CR><LF> pair.
	!-
	IF NOT (STATUS = SMG$$PUT_TEXT_TO_BUFFER (
				.DCB,
				.DCB [DCB_B_DEF_VIDEO_ATTR],
				1,
				%REF (CR^8 + LF),	! <CR><LF>
				.DCB [DCB_B_DEF_CHAR_SET]))
	THEN
	    RETURN (.STATUS);
	END;	! Terminator supplied

!+
! Reflect this change in the appropriate positions of the window screen
! text and attribute buffers, including new screen cursor position.
!-
    IF NOT (STATUS = SMG$$MOVE_TEXT_TO_WINDOW_BUF ( .PP))
    THEN
	RETURN (.STATUS);

!+
! Record what has happened to screen buffer as well.
!-
    IF NOT (STATUS = SMG$$MOVE_TEXT_TO_SCREEN_BUF ( .PP))
    THEN
	RETURN (.STATUS);

!+
! Must now force the changes to be output.
!-
    IF .PP [PP_W_ROWS_TO_MOVE] NEQ 0
    THEN
	BEGIN
	! Assume damage confined to single row.
	PBCB [PBCB_W_FIRST_CHANGED_ROW] = ..CHANGED_ROW;
	PBCB [PBCB_W_LAST_CHANGED_ROW]  = ..CHANGED_ROW;

	! Assume damage in row from given pos. to end of line
	PBCB [PBCB_W_FIRST_CHANGED_COL] = ..CHANGED_COL;
	PBCB [PBCB_W_LAST_CHANGED_COL]  = .PBCB [PBCB_W_WIDTH];
	END;

    STATUS = SMG$$MIN_UPD ( .PBCB);

!+
! If this virtual display is pasted to pasteboards other than the one
! identified in the call list, these additional pasteboard's window
! buffers must be updated as well.  For these additional pasteboards,
! the changed byte in addition to the shifted remainder of the line
! must be output -- since they did not receive the originally echoed
! character.
!-
    PP = .DCB [DCB_A_PP_NEXT];		! 1st in chain
    WHILE .PP NEQ DCB [DCB_A_PP_NEXT]	! While any packets remain...
    DO
	BEGIN	! Loop through all pasting packets for this DCB
	LOCAL
	    NEW_PBCB : REF $PBCB_DECL;    ! PBCB being considered

	NEW_PBCB = .PP [PP_A_PBCB_ADDR];	! PBCB for this packet
	IF .NEW_PBCB NEQ .PBCB	! If this isn't the one we started with
	THEN
	    BEGIN	! Needs to be output
	    IF NOT (STATUS = SMG$$FILL_WINDOW_BUFFER (.NEW_PBCB))
	    THEN
		RETURN (.STATUS);

	    IF .PP [PP_W_ROWS_TO_MOVE] NEQ 0
	    THEN
		BEGIN
		! Assume damage confined to single row.
		PBCB [PBCB_W_FIRST_CHANGED_ROW] = ..CHANGED_ROW;
		PBCB [PBCB_W_LAST_CHANGED_ROW]  = ..CHANGED_ROW;

		! Assume damage in row from given pos. to end of line
		PBCB [PBCB_W_FIRST_CHANGED_COL] = ..CHANGED_COL;
		PBCB [PBCB_W_LAST_CHANGED_COL]  = .PBCB [PBCB_W_WIDTH];
		END;

	    IF NOT (STATUS = SMG$$MIN_UPD ( .NEW_PBCB))
	    THEN
		RETURN (.STATUS);
	    END;	! Needs to be output

	PP = .PP [PP_A_NEXT_DCB];	! Step to next packet in chain
	END;	! Loop through all pasting packets for this DCB

    RETURN (SS$_NORMAL);
    END;		! End of routine SMG$$REPORT_CHANGE_INSERT
!<BLF/PAGE>

%SBTTL 'SMG$$REPORT_CHANGE_REPLACE - Report change to screen -- replace'
GLOBAL ROUTINE SMG$$REPORT_CHANGE_REPLACE ( 
				    DISPLAY_ID,
				    PASTEBOARD_ID,
				    NUM_CHARS     : REF VECTOR [,WORD],
				    CHANGED_CHARS : REF VECTOR [,BYTE],
				    CHANGED_ROW,
				    CHANGED_COL,
				    TERMINATING_CHAR
				  ) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to report a change made to the physical
!	screen via an input action involving replacement.  The 
!	characters identified by CHANGED_CHARS and NUM_CHARS have been 
!	positioned on the screen in a position corresponding to the 
!	virtual display coordinates CHANGED_ROW and CHANGED_COL.
!
!	TERMINATING_CHAR specifies the details of the change.
!
!	If TERMINATING_CHAR has not been specified, then the changed
!	characters have been echoed in the position indicated.  No 
!	further output is required.  Just need to update internal data 
!	bases to reflect that change.  Current cursor position is 
!	changed to reflect that beyond the changed text.  If this new 
!	position is now beyond the bounds of the virtual display's 
!	dimensions then ?????.
!
!	If TERMINATING_CHAR was specified, the changed characters have 
!	been echoed in the positions indicated.  Futhermore, these 
!	character were followed by a TERMINATING_CHAR.  Just need to 
!	update internal data bases to reflect that change.  Current 
!	cursor position is changed to reflect the effects of the 
!	TERMINATING_CHAR.  If this new position is now beyond the 
!	bounds of the virtual display's dimensions then ????.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SMG$$REPORT_CHANGE_REPLACE (
!					DISPLAY_ID.rl.r,
!				        PASTEBOARD_ID.rl.r,
!					NUM_CHARS.rwu.r,
!			    		CHANGED_CHARS.rab.r
!			    		[,CHANGED_ROW.rl.r]
!			    		[,CHANGED_COL.rl.r]
!			    		[,TERMINATING_CHAR.rb.r])
! FORMAL PARAMETERS:
!
!	DISPLAY_ID.rl.r		Display id of virtual display.
!
!	PASTEBOARD_ID.rl.r	Pasteboard id.
!
!	NUM_CHARS.rwu.r		The number of characters that changed.
!
!	CHANGED_CHARS.rab.r	Address of the characters that modified
!				the screen.
!
!	CHANGED_ROW.rl.r	Row number within the virtual display in
!				which CHANGED_CHARS were written.
!
!	CHANGED_COL.rl.r	Column number within the virtual display
!				where CHANGED_CHARS were written.
!
!	[,TERMINATING_CHAR.rb.r] 	[Optional].  
!				If supplied, the terminating character 
!				that followed CHANGED_CHAR  (See 
!				functional description for meaning).
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	SMG$_INVDIS_ID	Invalid Display Id
!	SMG$_INVPAS_ID	Invalid Pasteboard Id
!	SMG$_INVROW	Invalid row specified
!	SMG$_INVCOL	Invalid column specified
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN
    BUILTIN
	NULLPARAMETER;

    LOCAL
	STATUS,				! Status of subroutine calls
	C_ROW,				! Working row
	C_COL,				! Working col
	DCB  : REF $DCB_DECL,		! Addr of display control block
	PBCB : REF BLOCK [,BYTE],	! Addr of pasteboard control
					! block.
	WCB  : REF BLOCK [,BYTE],	! Address of window block
	PP   : REF BLOCK [,BYTE];	! Addr of pasting packet.

    $SMG$VALIDATE_ARGCOUNT (4, 7);	! Test for right no. of args

!+
! Get addresses of control blocks needed.
!-
    $SMG$GET_DCB (.DISPLAY_ID, DCB);		       ! Get DCB addr.
    $SMG$GET_PBCB ( .PASTEBOARD_ID, PBCB) ;	       ! Get PBCB addr.
    IF NOT (STATUS = SMG$$LOCATE_PP (.DCB, .PBCB, PP)) ! Get PP addr.
    THEN
	RETURN (.STATUS);

    IF NOT NULLPARAMETER (5) 
    THEN
	BEGIN
	C_ROW = ..CHANGED_ROW;
	DCB [DCB_W_CURSOR_ROW] = .C_ROW;
	END
    ELSE
	C_ROW = .DCB [DCB_W_CURSOR_ROW];

    IF NOT NULLPARAMETER (6)
    THEN
	BEGIN
	C_COL = ..CHANGED_COL;
	DCB [DCB_W_CURSOR_COL] = .C_COL;
	END
    ELSE
	C_COL = .DCB [DCB_W_CURSOR_COL];

    $SMG$VALIDATE_ROW_COL (.C_ROW, .C_COL); ! Valid posit?

!+
! Reflect this change in the virtual display text and attribute buffers.
!-

    !+
    ! Invalidate physical cursor position.
    ! This will force output to begin with a direct cursor
    ! movement to the proper place.
    !-

    WCB = .PBCB [PBCB_A_WCB];
    WCB [WCB_W_OLD_CUR_ROW] = 0;
    WCB [WCB_W_OLD_CUR_COL] = 0;

    IF NOT (STATUS = SMG$$PUT_TEXT_TO_BUFFER (
				.DCB,
				.DCB [DCB_B_DEF_VIDEO_ATTR],
				.NUM_CHARS[0],
				.CHANGED_CHARS,
				.DCB [DCB_B_DEF_CHAR_SET]))
    THEN
	RETURN (.STATUS);

    IF NOT NULLPARAMETER (7)
    THEN
	BEGIN	! Terminator supplied
	!+
	! Inspect supplied terminator to determine effect on cursor
	! position in virtual display.
	!-
	IF NOT (STATUS = SMG$$PUT_TEXT_TO_BUFFER (
				.DCB,
				.DCB [DCB_B_DEF_VIDEO_ATTR],
				1,
				%REF (CR^8 + LF),	! <CR><LF>
				.DCB [DCB_B_DEF_CHAR_SET]))
	THEN
	    RETURN (.STATUS);
	END;	! Terminator supplied

!+
! Reflect this change in the appropriate positions of the window 
! text and attribute buffers, including new screen cursor position.
!-
    IF NOT (STATUS = SMG$$MOVE_TEXT_TO_WINDOW_BUF ( .PP))
    THEN
	RETURN (.STATUS);

!+
! Update screen buffers as well.
!-
    IF NOT (STATUS = SMG$$MOVE_TEXT_TO_SCREEN_BUF ( .PP))
    THEN
	RETURN (.STATUS);

!+
! If this virtual display is pasted to pasteboards other than the one
! identified in the call list, these additional pasteboard's window
! buffers must be updated as well.  For these additional pasteboards,
! the changed bytes must be output -- since they did not receive the 
! originally echoed characters.
!-
    PP = .DCB [DCB_A_PP_NEXT];		! 1st in chain
    WHILE .PP NEQ DCB [DCB_A_PP_NEXT]	! While any packets remain...
    DO
	BEGIN	! Loop through all pasting packets for this DCB
	LOCAL
	    NEW_PBCB : REF $PBCB_DECL;    ! PBCB being considered

	NEW_PBCB = .PP [PP_A_PBCB_ADDR];	! PBCB for this packet
	IF .NEW_PBCB NEQ .PBCB	! If this isn't the one we started with
	THEN
	    BEGIN	! Needs to be output
	    IF NOT (STATUS = SMG$$FILL_WINDOW_BUFFER (.NEW_PBCB))
	    THEN
		RETURN (.STATUS);

	    IF .PP [PP_W_ROWS_TO_MOVE] NEQ 0
	    THEN
		BEGIN
		! Assume damage confined to single row.
		NEW_PBCB [PBCB_W_FIRST_CHANGED_ROW] = .C_ROW;
		NEW_PBCB [PBCB_W_LAST_CHANGED_ROW]  = .C_ROW;

		! Assume damage in row from given pos. to end of line
		NEW_PBCB [PBCB_W_FIRST_CHANGED_COL] = .C_COL;
		NEW_PBCB [PBCB_W_LAST_CHANGED_COL]  = 
					.NEW_PBCB [PBCB_W_WIDTH];
		END;

	    IF NOT (STATUS = SMG$$MIN_UPD (.NEW_PBCB))
	    THEN
		RETURN (.STATUS);

	    END;	! Needs to be output

	PP = .PP [PP_A_NEXT_DCB];	! Step to next packet in chain
	END;	! Loop through all pasting packets for this DCB

    RETURN (SS$_NORMAL);
    END;		! End of routine SMG$$REPORT_CHANGE_REPLACE
!<BLF/PAGE>

END			! End of module SMG$$PRVINP

ELUDOM
