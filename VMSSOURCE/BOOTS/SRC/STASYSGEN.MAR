	.TITLE	STASYSGEN - MAIN PROGRAM FOR STANDALONE SYSGEN
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	STANDALONE SYSGEN
;
; ABSTRACT:
;	THIS ROUTINE IS THE MAIN PROGRAM AND SUBROUTINES FOR
;	STANDALONE SYSGEN.  STANDALONE SYSGEN IS USED IN STANDALONE
;	BACKUP TO AUTOCONFIGURE ALL DISKS AND TAPES.
;
; ENVIRONMENT:	USER, EXEC, AND KERNEL MODE
;
; AUTHOR:  STEVE BECKHARDT,	CREATION DATE:	18-SEP-1979
;
; MODIFIED BY:
;
;	V03-016	CWH3016		CW Hobbs		26-Aug-1984
;		Move the fix in KDM0091 so that the device will be
;		available when the attempt is made to read its volume
;		label for the 'Resuming operation on volume "" message'
;
;	V03-015	WHM0001		Bill Matthews		14-Apr-1984
;		Added definitions of dummy entry points for BOO$SETASCII,
;		BOO$GT_SYSPARFILE, and BOO$WRTSYSPARFILE.
;
;	V03-014	CWH3014		CW Hobbs		15-Mar-1984
;		Require a Yes response to the prompt requesting the next
;		piece of media.  Print a message telling which piece to
;		remove, which has the side effect of rewinding the
;		previous volume.  This is necessary to prevent timeouts
;		while a VAX-11/750 is rewinding the TU58 device.
;
;	V03-013	KDM0091		Kathleen D. Morse	11-Nov-1983
;		For MSCP devices, the drive must be set back online after
;		replacing one piece of media with another.
;
;	V03-012	KDM0090		Kathleen D. Morse	10-Nov-1983
;		Align psect BOO$SYSGEN on word boundry so that STASYSGEN
;		works on MicroVAX I.
;
;	V03-011	KDM0089		Kathleen D. Morse	09-Nov-1983
;		Add MicroVAX I and II support to the test for a small
;		console as a boot device.
;
;	V03-010	CWH3010		CW Hobbs		25-Sep-1983
;		Change messages about the configure process.  Start
;		STANDCONF with the process name "STANDLOAD" and wait
;		until it changes its name to "STANDCONF" before proceeding.
;		This is to prevent asking the user to insert the next
;		console volume while still loading STANDCONF.
;		
;	V03-009	CWH3009		CW Hobbs		29-Aug-1983
;		Add call to BOO$USEACT to perform an implicit USE /ACTIVE
;		Other changes to support V3b packaging changes (i.e. 3 pieces
;		of console media).
;
;	V03-008	WMC0002		Wayne Cardoza		01-Aug-1983
;		Fix a typo.
;
;	V03-007	KDM0057		Kathleen D. Morse	28-Jul-1983
;		Replace SIP_SETTIME logic with a call to a loadable,
;		cpu-dependent routine, EXE$INIT_TODR.
;
;	V03-006	WMC0001		Wayne Cardoza		27-Jul-1983
;		Definitions for BOO$FILCLOSE, BOO$UFOOPEN, EXE$LOAD_CODE
;
;	V03-005 MSH0003		Maryann Hinden		07-Jul-1983
;		Move PUTERROR, IOGEN$READDRIV to separate modules.
;
;	V03-004	MSH0002		Maryann Hinden		23-Jun-1983
;		Use $BOOCMDDEF in other modules - global definition here 
;		not needed.
;
;	V03-003	MSH0001		Maryann Hinden		15-Feb-1983
;		Configure TU81.
;
;	V03-002	ACG53600	Andrew C. Goldstein,	10-Feb-1983  16:57
;		Add code to prompt for system date
;
;	V03-001	MLJ0086		Martin L. Jack,	5-Apr-1982  10:56
;		Add PU to device select list.
;
;	V02-011	MLJ0065		Martin L. Jack,	23-Dec-1981  3:07
;		Rearrange order of operations so that volume switching occurs
;		before autoconfigure, to support repackaging of most drivers on
;		second volume.
;
;	V02-010	MLJ0034		Martin L. Jack,	27-Aug-1981  16:06
;		Improve wording of volume switch prompt.
;
;	V02-009	MLJ0032		Martin L. Jack,	10-Aug-1981  14:35
;		Change image name to STABACKUP.  Autoconfigure line printers.
;		Issue prompt to switch volumes only if booting from console.
;
;	V02-008	JLV0037		Jake VanNoy		7-Jul-1981
;		Added dummy entry point for LBR$OUTPUT_HELP, the new
;		SYSGEN help routine.
;
;	V02-007	JLV0030		Jake VanNoy 		27-June-1981
;		Added RIO_INPNAM symbol to resolve SYSGEN reference.
;
;	V006	TCM0001		Trudy C. Matthews	18-Jun-1981
;		Added code to disable and deallocate boot file cacheing,
;		so that the DSC.EXE image on the second floppy can be
;		found.
;
;	V005	JLV0011		Jake VanNoy		7-May-1981
;		ADDED BOO$V&M_AUTOLOG OFFSETS TO RESOLVE SYSGEN SYMBOLS.
;
;	V004	JLV0003		JAKE VANNOY		27-FEB-1981
;		ADDED BOO$_ OFFSETS TO RESOLVE SYSGEN SYMBOLS.
;
;	V003	JLV0002		Jake VanNoy		11-Feb-1981
;		Added a BOO$GL_DOT label so stand alone sysgen can
;		link with SYSGEN modules. Connected to a bug fix in
;		the USE <filespec> in SYSGEN.
;
;	V002	LMK0001		LEN KAWELL		09-FEB-1980
;		CHANGE IOGEN$READDRIV TO READ THE IMAGE HEADER.
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$BTDDEF
	$DPTDEF
	$JPIDEF
	$PQLDEF
	$PRDEF
	$RPBDEF				; Define RPB offsets
	$UCBDEF				; Define UCB offsets

;
; MACROS:
;
	.MACRO	ERROR	MSG
	BSBW	ERROR_HALT
	.ASCIZ	\'MSG'\
	.ENDM	ERROR

;
; EQUATED SYMBOLS:
;

CR=^XD					; ASCII carriage return
LF=^XA					; ASCII line feed

;
; OWN STORAGE:
;

	.PSECT	BOO$SYSGEN,WRT,WORD

BOO$GL_CMDOPT::	.LONG 0			; Options longword
BOO$GL_DOT::	.LONG 0			; Dummy label, "." 	
RIO_INPNAM::	.LONG 0			; Dummy label
					; not used in stand alone version

BOOTFLAGS:				; Boot flags
	.BLKL	1
BOOT_SMALL_CONSOLE:
	.BLKL	1			; Will have to do volume switch

INPBUF:	.BLKL	1			; Dummy input buffer

SYSDISK_CHAN:
	.BLKL	1

SYSDISK_NAME:
	.ASCID	"SYS$DISK:"

; Prompt string for switching console media

SWITCHPROMPT:	.ASCII	<CR><LF><7>/Insert the standalone application volume /
		.ASCIZ	/and enter "YES" when ready: /

REMOVEPROMPT1:	.ASCIZ	<CR><LF><7>/Please remove the volume "/<7>
REMOVEPROMPT2:	.ASCIZ	/" from the console device./<7><CR><LF>

RESUMEPROMPT1:	.ASCIZ	<CR><LF><LF>/Resuming load operation on volume "/
RESUMEPROMPT2:	.ASCIZ	/", please stand by . . ./<CR><LF><LF>

IMAGENAME:				; Image name to activate after
	.ASCID	/STANDALON.EXE/		; SYSGEN is finished

SELECT_LIST:				; Select list for AUTOCONFIGURE ALL
	.ASCIC	/D/			; All disks
	.ASCIC	/M/			; All tapes
	.ASCIC	/LP/			; Line printers
	.ASCIC	/LC/			;
	.ASCIC	/P/			; All port drivers plus paper tape
	.BYTE	0			; End of list

;
; Data used by the autoconfigure.
;

TIMER:		.LONG	-10*1000*1000,-1	; One second
PA_POLL_INT:	.LONG	0			; Number of seconds in port poll interval
PRC_POLL_INT:	.LONG	0			; Number of seconds in process poll interval
CONFCRLF:	.ASCIZ	<CR><LF>
CONFLOAD:	.ASCIZ	/Creating process to configure remote devices . . ./<CR><LF>
CONFWAIT:	.ASCIZ	/Now configuring HSC and MSCP-served devices . . ./<CR><LF>

;
; The following data is used in creating the stand-alone Configure Process
;
STAC_IMAGE:	.ASCID	/STANDCONF.EXE/	; Image name
STAC_OPER:	.ASCID  /_OPA0:/	; Input/output device
STAC_PRV_MSK:	.LONG	-1,-1		; Let it do anything it wants to do
STAC_PRC:	.ASCID  /STANDLOAD/	; Initial process name
STAC_PID:	.LONG	0		; Gets the process pid
STAC_QLIST:				; And a generous list of quotas
	.BYTE	PQL$_ASTLM
	.LONG	200
	.BYTE	PQL$_BIOLM
	.LONG	200
	.BYTE	PQL$_BYTLM
	.LONG	100000
	.BYTE	PQL$_CPULM
	.LONG	0
	.BYTE	PQL$_DIOLM
	.LONG	200
	.BYTE	PQL$_ENQLM
	.LONG	200
	.BYTE	PQL$_FILLM
	.LONG	200
	.BYTE	PQL$_PGFLQUOTA
	.LONG	20480
	.BYTE	PQL$_PRCLM
	.LONG	200
	.BYTE	PQL$_TQELM	
	.LONG	200
	.BYTE	PQL$_WSDEFAULT
	.LONG	1000
	.BYTE	PQL$_WSQUOTA
	.LONG	1000
	.BYTE	PQL$_LISTEND
;
; Some data needed so that we will see when STANDCONF changes it's name
;
STANDCONF:	.ASCII	"STANDCONF"
JPI_LENGTH:	.LONG	0
JPI_NAME:	.BLKB	16
JPI_ITEM:	.WORD	16		; Buffer is 16 bytes long
		.WORD	JPI$_PRCNAM	; Item desired is process name
		.ADDRESS JPI_NAME	; Output buffer
		.ADDRESS JPI_LENGTH	; Output length
		.LONG	0		; End of list

	.SBTTL	BOO$SYSGEN - main program
;++
; FUNCTIONAL DESCRIPTION:
;	This is the main program for standalone SYSGEN.  It does the
;	following:
;
;		1)  Locks the entire image into the working set.
;		2)  Sets up the system time and saves the current
;		    SYSGEN parameters in SYS.EXE.
;		3)  Autoconfigures disks, tapes, and line printers.
;		4)  Optionally does a SHOW/DEVICES.
;		5)  Activates the next image, STABACKUP.
;
; CALLING SEQUENCE:
;
;	Called by the Image activator
;
; INPUT PARAMETERS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	R0	Completion code
;
; COMPLETION CODES:
;
;	Various errors
;
;--

	.ENTRY	BOO$SYSGEN,^M<>
	$LKWSET_S -			; Lock entire image in working set
		INADR=BOO$GQ_LIMITS, -	;
		RETADR=BOO$GQ_RETADR	;
;
; Set up the system time
;
	$CMKRNL_S W^SIP_SETTIME		; Set up the system time
;
; Get boot flags and boot device type
;
	$CMKRNL_S  W^GET_RPB_INFO	; Get boot flags and device type
;
; Initialize various other things which need kernel mode
;
	$CMKRNL_S  W^KERNEL_INIT
;
; Autoconfigure disks, tapes, and line printers.
;
	CALLS	#0,BOO$USEACT		; Get current values for local SYSPARAM
	MOVAB	SELECT_LIST,BOO$GL_SELECT ; Use builtin select list
	CALLS	#0,BOO$CONFIGALL	; Autoconfigure all adapters
;
; Check if there is a CI on system, if so wait for devices to show up.
;
	$CMKRNL_S  W^FINDCI		; Find any CI adapter
	BLBS	R0,10$			; None
	BRW	30$
10$:	$CREPRC_S -			; Start up the STANDCONF process to
		IMAGE = STAC_IMAGE,-	;  asynchronously find and configure
		INPUT = STAC_OPER,-	;  all devices served by HSC and MSCP-server
		OUTPUT = STAC_OPER,-	;  hosts.
		ERROR = STAC_OPER,-
		PRVADR = STAC_PRV_MSK,-
		QUOTA = STAC_QLIST,-
		PRCNAM = STAC_PRC,-
		PIDADR = STAC_PID,-
		BASPRI = #8,-
		UIC = #^x10004
	BLBC	R0,23$
;
; STANDCONF has been created with the process name "STANDLOAD".  We will now
; wait for it to change its process name to "STANDCONF".  This will let us know
; that it is loaded and executing, so that we won't ask the human to load the
; next piece of console media while the STANDCONF image is still being read.
;
20$:	CLRQ	-(SP)			; No input buffer
	PUSHAB	CONFCRLF		; Output a blank line
	CALLS	#3,BOO$READPROMPT	; Print it		
	TSTB	BOOT_SMALL_CONSOLE	; Booting from a small console?
	BEQL	21$			; Disk boot, no need for encouragement
	CLRQ	-(SP)			; No input buffer
	PUSHAB	CONFLOAD		; Output a line to tickle the user
	CALLS	#3,BOO$READPROMPT	; Print it		
21$:	CLRL	R5			; Clear a counter
22$:	$SETIMR_S EFN=#3,DAYTIM=TIMER	; Set a timer for one second
	$WAITFR_S EFN=#3		;  ... and wait for it.
	$GETJPIW_S EFN=#3,-		; Get the process name using the PID 
		   PIDADR=STAC_PID,-	;  returned by creprc.
		   ITMLST=JPI_ITEM
	BLBC	R0,23$			; Blow up if we can't do the getjpi
	CMPC5	#9,STANDCONF,#0,-	; Compare the name against "STANDCONF"
		JPI_LENGTH,JPI_NAME	;  to see if the process is active
	BEQL	25$			; The name we want, go do something
	INCL	R5			; Increment our count
	CMPW	#300,R5			; Have we been doing this for 5 minutes?
	BGTR	22$			; Less than 5 minutes, do it again
23$:	ERROR	<Configure process failed to initialize>
;
; STANDCONF is up and running, now wait for several polling intervals so that most
; devices should be configured before we give the BACKUP prompt.  Print a message
; that we are configuring so that the human won't give up hope.
;
25$:	CLRQ	-(SP)			; No input buffer
	PUSHAB	CONFWAIT		; Output string
	CALLS	#3,BOO$READPROMPT	; Print it		
	MULL3	#3,PA_POLL_INT,R0	; Thrice the port poll interval
	ADDL2	PRC_POLL_INT,R0		; Plus the process poll interval
	MULL2	R0,TIMER		; Make into delta time
	$SETIMR_S #3,TIMER		; Set a timer
	$WAITFR_S #3			; ... and wait for it.
;
; If XDELTA is mapped into the system, do a SHOW/DEVICES.
;
30$:	BBC	#RPB$V_DEBUG,BOOTFLAGS,40$ ; Branch if no XDELTA
	CLRQ	-(SP)			; Set up fake TPARSE parameter block
	CLRQ	-(SP)			;
	CLRQ	-(SP)			;
	CLRQ	-(SP)			;
	CALLS	#8,BOO$SHODEV_ALL	; Show devices
;
; Request operator to switch to second floppy or cartridge if necessary.
;
40$:	TSTB	BOOT_SMALL_CONSOLE	; Do we have to switch volumes?
	BEQL	50$			; Branch if no
	PUSHAB	REMOVEPROMPT2		; Pass address of second half of message
	PUSHAB	REMOVEPROMPT1		; Pass address of first half of message
	CALLS	#2,LABELMSG		; Tell s/he to remove
45$:	PUSHAB	INPBUF			; Push address of input buffer
	PUSHL	#4			; Push size of input buffer
	PUSHAB	SWITCHPROMPT		; Push address of message
	CALLS	#3,BOO$READPROMPT	; Prompt and wait for return
	BICB	#32,INPBUF+1		; Force to upper case (ASCIC string returned)
	CMPB	INPBUF+1,#^A"Y"		; Look for the Y
	BNEQ	45$			; Loop until a Y is entered
;
; If device is MSCP, then it goes offline when we replace it with
; another piece of media.  A PACKACK must be sent to the device to
; allow us to continue.  Note:  mount verification cannot take care
; of this for us, because there is no VCB and the system disk does not
; have the "mounted" characteristic set.
;
	BSBW  W^MSCP_PACKACK		; Set device back on line
	PUSHAB	RESUMEPROMPT2		; Pass address of second half of message
	PUSHAB	RESUMEPROMPT1		; Pass address of first half of message
	CALLS	#2,LABELMSG		; Tell that we are resuming
;
; Disable file caching so FIL$OPENFILE will be forced to look
; at the new floppy or cartridge.
;
	$CMKRNL_S  W^DISABLE_FILE_CACHE	; Disable and de-allocate file cache
;
; Activate STABACKUP image.
;
50$:	PUSHAQ	IMAGENAME		; Push address of image name descriptor
	CALLS	#1,BOO$ACTIMAGE		; Activate next image
	RET				; Should never return here

;
; Print a message, giving the volume label in the middle
; Inputs:	4(AP)  Pointer to ASCIZ string for front of message
;		8(AP)  Pointer to second half of message
;
LABELMSG:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVAB	-512(SP),SP		; Make a buffer on the stack
	MOVL	SP,R6			; Save the buffer address
	$ASSIGN_S -			; Assign a channel to sys$disk
		DEVNAM=SYSDISK_NAME,-
		CHAN=SYSDISK_CHAN
	BLBC	R0,100$
	$QIOW_S -			; Read the home block
		EFN=#16,-		;  Use event flag 16, easy to see
		CHAN=SYSDISK_CHAN,-	;  Use the channel we just assigned
		FUNC=#IO$_READLBLK,-	;  Read logical block
		P1=(R6),-		;  Buffer space reserved on the stack
		P2=#512,-		;  Read one block
		P3=#1			;  Logical block number 1
	BLBC	R0,100$
	$DASSGN_S CHAN=SYSDISK_CHAN	; Return the channel
	BLBC	R0,100$
	CLRQ	-(SP)			; No buffer means print only
	PUSHL	4(AP)			; Push address of first part of message
	CALLS	#3,BOO$READPROMPT	; Prompt and wait for return
	MOVAB	472(R6),R5		; Point R5 at the volume label
	MOVL	#12,R0			; Length of volume label
	MOVAB	(R5)[R0],R1		; Point R1 one past the end
20$:	MOVB	-(R1),R2		; R2 contains the byte
	BEQL	30$			; Byte is null, skip it
	CMPB	#^A" ",R2		; Is it a space
	BNEQ	40$			; End of name found, print it
30$:	SOBGTR	R0,20$			; Do the whole string
	BRB	50$			; No name, don't bother not printing it
40$:	CLRB	1(R1)			; Put a null after the string
	CLRQ	-(SP)			; Null buffer is print only
	PUSHL	R5			; R5 -> front of volume label
	CALLS	#3,BOO$READPROMPT	; Type the first string
50$:	CLRQ	-(SP)			; Null buffer is print only
	PUSHL	8(AP)			; Push address of message
	CALLS	#3,BOO$READPROMPT	; Prompt and wait for return
	RET
100$:	ERROR	<Unable to read application volume>

;
; Local kernel mode routine to get RPB information.
;
GET_RPB_INFO:
	.WORD	^M<>
	MOVL	MMG$A_SYSPARAM+<EXE$GL_RPB-EXE$A_SYSPARAM>,R0
					; Point to RPB (use SYS.EXE copy)
	MOVL	RPB$L_BOOTR5(R0),BOOTFLAGS  ; Get boot flags
	CMPL	G^SYS$GL_BOOTUCB+UCB$L_MAXBLOCK,#1000 ; Is this a small boot
	BGTR	10$			; boot device (console)? Br if not.
	MOVB	#1,BOOT_SMALL_CONSOLE	; Remember that boot console is small.
10$:	MOVL	#1,R0			; Return success
	RET				;
;
; Local kernel mode routine to do various inits
;
KERNEL_INIT:
	.WORD	^M<>
;
; Enable unrestricted locking
;
	CLRB	G^LCK$GB_STALLREQS

	JSB	G^INI$BRK
	MOVL	#1,R0			; Return success
	RET				;
;
; For MSCP devices, a PACKACK must be sent to the device before attempting
; to read the new piece of media.  Putting in the new media has made the
; device go offline.
;
MSCP_PACKACK:
	MOVQ	R0,-(SP)		; Save registers.
	MOVQ	R2,-(SP)		; Save registers.
	CLRL	-(SP)			; Place to hold channel number.
	MOVL	SP,R2			; Remember address of channel.
	$ASSIGN_S	-		; Assign a channel to system disk.
		DEVNAM=DSC,-		;  Adr of str dsc for dev name str.
		CHAN=(R2)		;  Adr of a word to receive chan number.
	BLBC	R0,10$			; Br if error.
	CLRQ	-(SP)			; Set up IOSB.
	MOVL	SP,R3			; Remember address of IOSB.
	$QIOW_S		-		; Send PACKACK to system device.
		CHAN=(R2),-		;  Channel number.
		FUNC=#IO$_PACKACK,-	;  Function code.
		IOSB=(R3)		;  I/O Status block.
	BLBC	R0,10$			; Br if error.
	BLBC	(R3),10$		; Br if error.
	$DASSGN_S	-		; Deassign the channel.
		CHAN=(R2)			;  Channel number.
	BLBC	R0,10$			; Br if error.
10$:					; If error, nothing to do...
	ADDL	#12,SP			; Clean off IOSB.
	MOVQ	(SP)+,R2		; Save registers.
	MOVQ	(SP)+,R0		; Save registers.
	RSB				; Return
DSC:	.ASCID	/SYS$SYSDEVICE:/	; Logical name descriptor for
					; system device for $ASSIGN.
;
; Local kernel mode routine to disable and de-allocate FIL$OPENFILE cache.
;
DISABLE_FILE_CACHE:
	.WORD	^M<R2,R3>
	MOVQ	G^FIL$GQ_CACHE,R1	; R1=size, R2=address of cache
	BEQL	10$			; Branch if cache not present
	CLRQ	G^FIL$GQ_CACHE		; Disable the cache
	MOVL	R2,R0			; Copy address of cache
	MOVL	G^EXE$GL_NONPAGED+4,R3	; Address of free non-paged pool
	JSB	G^EXE$DEALLOCATE	; Deallocate FIL$OPENFILE cache
10$:	MOVL	#1,R0			; Return success
	RET				;
;
; Local kernel mode routine to determine if any CI's on system.
;
FINDCI:	.WORD	^M<>
	CLRL	R0
	TSTL	G^SCS$GL_BDT		; Is the buffer descriptor table there?
	BEQL	10$			; No, so no CI
	MOVZWL	G^SCS$GW_PAPOLINT,PA_POLL_INT ; Yes, pick up port poller interval
	MOVZWL	G^SCS$GW_PRCPOLINT,PRC_POLL_INT ; Yes, pick up process poller interval
	INCL	R0
10$:	RET
;+
; Print an error message and halt
;-
ERRHDR:	.ASCIZ	"%STANDALONE-F-"
ERROR_HALT:
	CLRQ	-(SP)			; Null buffer, print only
	PUSHAB	ERRHDR			; Print the header
	CALLS	#3,BOO$READPROMPT	; Now do it
	MOVL	SP,R7			; Copy message address
	CLRQ	-(SP)			; Null buffer, print only
	PUSHL	R7			; Pass the error message address
	CALLS	#3,BOO$READPROMPT	; Now do it
	$CMKRNL_S B^10$			; Change mode to kernel and halt
10$:	.WORD	0
	HALT

	.SBTTL	SIP_SETTIME - Set system time
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS ROUTINE CALLS THE LOADABLE, CPU-DEPENDENT ROUTINE, EXE$INIT_TODR,
;	TO INITIALIZE THE TIME-OF-DAY REGISTER AND SYSTEM TIME.
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	TIME-OF-DAY PROCESSOR CLOCK.
;
; OUTPUT PARAMETERS:
;
;	R0,R1 - DESTROYED
;
; IMPLICIT OUTPUTS:
;
;	EXE$GQ_SYSTIME - SET TO CURRENT TIME IN 100 NANOSECOND UNITS SINCE
;			 17-NOV-1858 00:00:00.
;
;	SYSTEM PARAMETER PAGE(S) ARE WRITTEN BACK TO SYS$SYSTEM:SYS.EXE.
;
;--

SIP_SETTIME:				; SET CORRECT TIME
	.WORD	0			; ENTRY MASK
	JSB	EXE$INIT_TODR		; CALL CPU-DEPENDENT ROUTINE
	MOVZWL	#SS$_NORMAL,R0		; INDICATE SUCCESS
	RET				;

	.SBTTL	Dummy entry points

;
; These entry points are need to resolve references to routines
; not linked with the standalone version of SYSGEN.
;

BOO$GT_SYSNAME::
BOO$GT_SYSPARNAME::
BOO$GQ_FILDESC::

LBR$OUTPUT_HELP::
LBR$INI_CONTROL::
LBR$OPEN::
LBR$GET_HELP::
BOO$SEARCH::
BOO$SETASCII::
BOO$SETVALUE::
BOO$WRTSYSPARFILE::
EXE$LOAD_CODE::
LIB$GET_INPUT::
LIB$PUT_OUTPUT::
	.WORD	0			; ENTRY MASK
	CLRL	R0
	RET

BOO$MSGOUT::
BOO$FILOPEN::
BOO$FILOPENW::
BOO$READFILE::
BOO$WRITEFILE::
BOO$FILCLOSE::
BOO$UFOOPEN::
BOO$EXEOPEN::
	CLRL	R0
	RSB

	.END	BOO$SYSGEN
