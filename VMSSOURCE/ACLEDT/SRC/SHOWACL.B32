MODULE SHOW$ACL (
		 LANGUAGE (BLISS32),
		 IDENT = 'V04-000',
		 ADDRESSING_MODE (EXTERNAL = GENERAL)
		 ) =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	SHOW utility
!
! ABSTRACT:
!
!	This module contains all the routines necessary to support the
!	DCL command SHOW ACL.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, user mode utilities.
!
!--
!
!
! AUTHOR:	L. Mark Pilant		CREATION DATE:	17-Jan-1984
!
! MODIFIED BY:
!
!	V03-003	LMP0230		L. Mark Pilant,		16-Apr-1984  10:53
!		Track interface changes to $CHANGE_ACL system service.
!
!	V03-002	LMP0223		L. Mark Pilant,		6-Apr-1984  12:53
!		Use the correct amount of storage for the lock block.
!
!	V03-001	LMP0213		L. Mark Pilant,		24-Mar-1984  12:23
!		Add support for locking and unlocking the object's ACL.
!		Also, modify it so that the DCL commands SET ACL and SHOW
!		ACL call the same image.
!
!**

LIBRARY	'SYS$LIBRARY:LIB';

! Routines contained within this module.

FORWARD ROUTINE
	SHOW_ACL;				! Main processing routine

! Define common error message codes.

$SHR_MSGDEF	(SHOW, 120, LOCAL,
		(READERR, SEVERE)
		);

! Define necessary macros.

MACRO	SIGNAL	(ARG) =
		BEGIN
		EXTERNAL ROUTINE	LIB$SIGNAL;
		LIB$SIGNAL (ARG %IF %LENGTH-1 GTR 0 %THEN, %REMAINING %FI);
		END
		%;

! External routine definitions.

EXTERNAL ROUTINE
	CLI$GET_VALUE,				! Get qualifier value
	CLI$PRESENT,				! See if qualifier present
	LIB$PUT_OUTPUT;				! General output routine

GLOBAL ROUTINE SHOW_ACL =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the main routine.  It parses the command line to
!	determine the name and type of the object whose ACL is to be
!	displayed.
!
!--

BEGIN

LOCAL
	ACL_LOCKID	: $BBLOCK [ACL$S_RLOCK_ACL],	! Lock-id for ACL lock
	OBJECT_TYPE,				! Object's type code
	OBJECT_NAME	: $BBLOCK [DSC$C_S_BLN],	! Object name descr
	OBJECT_FAB	: $FAB_DECL,		! Object FAB
	OBJECT_NAM	: $NAM_DECL,		! Object NAMe block
	OBJECT_EXP_NAME	: $BBLOCK [NAM$C_MAXRSS],	! Expanded name string
	OBJECT_RES_NAME	: $BBLOCK [NAM$C_MAXRSS],	! Resultant name string
	OBJECT_CHAN,				! Channel for object
	GETDVI_ARGS	: BLOCKVECTOR [3, ITM$S_ITEM, BYTE],	! $GETDVI item list
	DEVICE_CLASS,				! Output device class
	DISPLAY_WIDTH,				! Output device width
	ACE_BIN_DESC	: $BBLOCK [DSC$C_S_BLN],	! Binary ACE descr
	ACE_STORAGE	: $BBLOCK [ACL$S_READACE] VOLATILE,	! Binary ACE storage
	ACE_TXT_DESC	: $BBLOCK [DSC$C_S_BLN],	! Text ACE descr
	ACE_TEXT	: VECTOR [512, BYTE],	! Text ACE storage
	ATR_ARGLIST	: BLOCKVECTOR [2, ITM$S_ITEM, BYTE],	! $CHANGE_ACL item list
	ACL_CONTEXT,				! $CHANGE_ACL context
	OUTPUT_DESC	: $BBLOCK [DSC$C_S_BLN],	! Output line descr
	OUTPUT_TEXT	: VECTOR [512, BYTE],	! Output line storage
	IO_STATUS	: VECTOR [4, WORD],	! I/O status block
	STATUS;					! Routine return status

EXTERNAL LITERAL
	SHOW$_OBJLOCKED;			! object locked error message

BIND
	OBJ_TYPE_NAMES	= UPLIT (
				0,
				$DESCRIPTOR ('file'),
				$DESCRIPTOR ('device'),
				$DESCRIPTOR ('print/batch queue'),
				$DESCRIPTOR ('event cluster'),
				$DESCRIPTOR ('logical name table'),
				$DESCRIPTOR ('process'),
				$DESCRIPTOR ('global section')
				) : VECTOR;

! Initialize all necessary storage.

CH$FILL (0, DSC$C_S_BLN, OBJECT_NAME);
CH$FILL (0, DSC$C_S_BLN, ACE_BIN_DESC);
CH$FILL (0, DSC$C_S_BLN, ACE_TXT_DESC);
CH$FILL (0, DSC$C_S_BLN, OUTPUT_DESC);
CH$FILL (0, 3*ITM$S_ITEM, GETDVI_ARGS);
CH$FILL (0, 2*ITM$S_ITEM, ATR_ARGLIST);
CH$FILL (0, 4*2, IO_STATUS);

OBJECT_NAME[DSC$B_CLASS] = DSC$K_CLASS_D;
OBJECT_CHAN = 0;
ACE_BIN_DESC[DSC$A_POINTER] = ACE_STORAGE;
ACE_TXT_DESC[DSC$A_POINTER] = ACE_TEXT;
OUTPUT_DESC[DSC$A_POINTER] = OUTPUT_TEXT;
OUTPUT_TEXT[0] = 0;				! Indicates first time through

ACL_CONTEXT = 0;

! Get the type code and name of the desired object.

OBJECT_TYPE = ACL$C_FILE;			! Set default type
IF CLI$PRESENT ($DESCRIPTOR ('OBJECT_TYPE.FILE')) THEN OBJECT_TYPE = ACL$C_FILE;
IF CLI$PRESENT ($DESCRIPTOR ('OBJECT_TYPE.DEVICE')) THEN OBJECT_TYPE = ACL$C_DEVICE;
IF CLI$PRESENT ($DESCRIPTOR ('OBJECT_TYPE.QUEUE')) THEN OBJECT_TYPE = ACL$C_JOBCTL_QUEUE;
IF CLI$PRESENT ($DESCRIPTOR ('OBJECT_TYPE.EVENT_CLUSTER')) THEN OBJECT_TYPE = ACL$C_COMMON_EF_CLUSTER;
IF CLI$PRESENT ($DESCRIPTOR ('OBJECT_TYPE.LOGICAL_NAME_TABLE')) THEN OBJECT_TYPE = ACL$C_LOGICAL_NAME_TABLE;
IF CLI$PRESENT ($DESCRIPTOR ('OBJECT_TYPE.PROCESS')) THEN OBJECT_TYPE = ACL$C_PROCESS;
IF CLI$PRESENT ($DESCRIPTOR ('OBJECT_TYPE.GLOBAL_SECTION')) THEN OBJECT_TYPE = ACL$C_GLOBAL_SECTION;

CLI$GET_VALUE ($DESCRIPTOR ('INPUT'), OBJECT_NAME);

! Attempt to obtain a read lock for the object.

ATR_ARGLIST[0, ITM$W_ITMCOD] = ACL$C_RLOCK_ACL;
ATR_ARGLIST[0, ITM$W_BUFSIZ] = ACL$S_RLOCK_ACL;
ATR_ARGLIST[0, ITM$L_BUFADR] = ACL_LOCKID;
STATUS = $CHANGE_ACL (CHAN = .OBJECT_CHAN,
		      OBJTYP = OBJECT_TYPE,
		      OBJNAM = OBJECT_NAME,
		      ITMLST = ATR_ARGLIST);
IF NOT .STATUS
THEN
    BEGIN
    IF .STATUS EQL SS$_NOTQUEUED THEN STATUS = SHOW$_OBJLOCKED;
    SIGNAL (.STATUS);
    RETURN .STATUS OR STS$M_INHIB_MSG;
    END;

! If the object is a file, open it to improve performance.

IF .OBJECT_TYPE EQL ACL$C_FILE
THEN
    BEGIN
    $FAB_INIT (FAB = OBJECT_FAB,
	       FAC = GET,
	       FNA = .OBJECT_NAME[DSC$A_POINTER],
	       FNS = .OBJECT_NAME[DSC$W_LENGTH],
	       FOP = UFO,
	       NAM = OBJECT_NAM,
	       SHR = <GET, PUT, UPI>);
    $NAM_INIT (NAM = OBJECT_NAM,
	       ESA = OBJECT_EXP_NAME,
	       ESS = NAM$C_MAXRSS,
	       RSA = OBJECT_RES_NAME,
	       RSS = NAM$C_MAXRSS);
    STATUS = $OPEN (FAB = OBJECT_FAB);

! Get the actual name of the file, if possible.

    IF .OBJECT_NAM[NAM$B_RSL] NEQ 0
    THEN
	BEGIN
	OBJECT_NAME[DSC$W_LENGTH] = .OBJECT_NAM[NAM$B_RSL];
	OBJECT_NAME[DSC$A_POINTER] = .OBJECT_NAM[NAM$L_RSA];
	END
    ELSE IF .OBJECT_NAM[NAM$B_ESL] NEQ 0
    THEN
	BEGIN
	OBJECT_NAME[DSC$W_LENGTH] = .OBJECT_NAM[NAM$B_ESL];
	OBJECT_NAME[DSC$A_POINTER] = .OBJECT_NAM[NAM$L_ESA];
	END
    ELSE
	BEGIN
	OBJECT_NAME[DSC$W_LENGTH] = .OBJECT_FAB[FAB$B_FNS];
	OBJECT_NAME[DSC$A_POINTER] = .OBJECT_FAB[FAB$L_FNA];
	END;

! If any errors occurred, abort now.

    IF NOT .STATUS
    THEN
	BEGIN
	SIGNAL (SHOW$_READERR, 1, OBJECT_NAME, .OBJECT_FAB[FAB$L_STS],
					       .OBJECT_FAB[FAB$L_STV]);
	RETURN .STATUS OR STS$M_INHIB_MSG;
	END;
    OBJECT_CHAN = .OBJECT_FAB[FAB$L_STV];
    END;

! Get the width of SYS$OUTPUT, the display device.

GETDVI_ARGS[0, ITM$W_ITMCOD] = DVI$_DEVCLASS;
GETDVI_ARGS[0, ITM$W_BUFSIZ] = 4;
GETDVI_ARGS[0, ITM$L_BUFADR] = DEVICE_CLASS;
GETDVI_ARGS[1, ITM$W_ITMCOD] = DVI$_DEVBUFSIZ;
GETDVI_ARGS[1, ITM$W_BUFSIZ] = 4;
GETDVI_ARGS[1, ITM$L_BUFADR] = DISPLAY_WIDTH;

STATUS = $GETDVI (DEVNAM = $DESCRIPTOR ('SYS$OUTPUT'),
		  ITMLST = GETDVI_ARGS,
		  IOSB = IO_STATUS);
IF .STATUS THEN STATUS = .IO_STATUS[0];
IF NOT .STATUS
THEN
    BEGIN
    SIGNAL (.STATUS);
    RETURN .STATUS OR STS$M_INHIB_MSG;
    END;
IF .DEVICE_CLASS NEQ DC$_TERM THEN DISPLAY_WIDTH = 132;

! Read, format, and display all the ACEs in the object's ACL until the end
! of the ACL is seen.  Or until an error occurs.

WHILE 1
DO
    BEGIN
    ATR_ARGLIST[0, ITM$W_ITMCOD] = ACL$C_READACE;
    ATR_ARGLIST[0, ITM$W_BUFSIZ] = ACL$S_READACE;
    ATR_ARGLIST[0, ITM$L_BUFADR] = ACE_STORAGE;
    STATUS = $CHANGE_ACL (CHAN = .OBJECT_CHAN,
			  OBJTYP = OBJECT_TYPE,
			  OBJNAM = OBJECT_NAME,
			  ITMLST = ATR_ARGLIST,
			  CONTXT = ACL_CONTEXT);
    IF NOT .STATUS
    THEN
	BEGIN
	IF .STATUS EQL SS$_ACLEMPTY OR .STATUS EQL SS$_NOMOREACE THEN EXITLOOP;
	SIGNAL (SHOW$_READERR, 1, OBJECT_NAME, .STATUS);
	RETURN SHOW$_READERR OR STS$M_INHIB_MSG;
	END;

! If the ACE is tagged as being hidden, don't display it.

    IF NOT .ACE_STORAGE[ACE$V_HIDDEN]
    THEN
	BEGIN

! Type out the banner line indicating the object type, name, and the current
! date and time if this is the first ACE.

	IF .OUTPUT_TEXT[0] EQL 0
	THEN
	    BEGIN
	    OUTPUT_DESC[DSC$W_LENGTH] = 512;
	    STATUS = $FAO ($DESCRIPTOR ('Object type: !AS,  Object name: !AS,  on !%D!/'),
			   OUTPUT_DESC,
			   OUTPUT_DESC,
			   .OBJ_TYPE_NAMES[.OBJECT_TYPE],
			   OBJECT_NAME,
			   0);
	    LIB$PUT_OUTPUT (OUTPUT_DESC);
	    END;

! Format and display the ACE.

	ACE_BIN_DESC[DSC$W_LENGTH] = .ACE_STORAGE[ACE$B_SIZE];
	ACE_TXT_DESC[DSC$W_LENGTH] = 512;
	STATUS = $FORMAT_ACL (ACLENT = ACE_BIN_DESC,
			      ACLLEN = ACE_TXT_DESC[DSC$W_LENGTH],
			      ACLSTR = ACE_TXT_DESC,
			      WIDTH = DISPLAY_WIDTH,
			      TRMDSC = $DESCRIPTOR (%CHAR (13), %CHAR (10)),
			      INDENT = %REF (10));
	IF NOT .STATUS
	THEN
	    BEGIN
	    SIGNAL (.STATUS);
	    RETURN .STATUS OR STS$M_INHIB_MSG;
	    END;
	LIB$PUT_OUTPUT (ACE_TXT_DESC);
	END;
    END;

! Check for an empty ACL.

IF .STATUS EQL SS$_ACLEMPTY
THEN RETURN SS$_ACLEMPTY
ELSE RETURN 1;

END;						! End of routine SHOW_ACL

END
ELUDOM
