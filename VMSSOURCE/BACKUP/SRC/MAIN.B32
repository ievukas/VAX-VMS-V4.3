MODULE MAIN	(%TITLE	'Main module'
		MAIN = MAIN,
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Backup/Restore
!
! ABSTRACT:
!	This is the main module.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 25-Aug-1980
!
! MODIFIED BY:
!
!	V03-005	JEP0003		J. Eric Pollack,	23-Apr-1983  10:53
!		Add support for encrypted savesets.
!
!	V03-004	ACG0313		Andrew C. Goldstein,	12-Feb-1983  16:24
!		Add routine subtitles
!
!	V03-003	LMP0044		L. Mark Pilant,		21-Oct-1982  15:15
!		Add support for saving and restoring ACL's.
!
!	V03-002	LMP0032		L. Mark Pilant,		22-Jun-1982  10:36
!		Add support for wildcard save set names on a LIST or RESTORE
!		operation.
!
!	V03-001	MLJ0088		Martin L. Jack,	13-Apr-1982  15:27
!		Avoid access violation for /LIST/VERIFY.
!
!	V02-006	MLJ0054		Martin L. Jack,	15-Oct-1981  17:06
!		Exit with proper $STATUS value.  Implement /VOLUME.  Move
!		STAACP globals to common.
!
!	V02-005	MLJ0037		Martin L. Jack,	29-Aug-1981  16:06
!		Avoid STA_MOUNT of output for /IMAGE/COMPARE.
!
!	V02-004	ACG0211		Andrew C. Goldstein,	16-Jul-1981  10:29
!		Implement sequential disk support
!
!	V02-003	MLJ0020		Martin L. Jack,	20-Apr-1981  22:07
!		Implement /JOURNAL qualifier.
!
!	V02-002	MLJ0012		Martin L. Jack,	27-Mar-1981  16:06
!		Force /VERIFY off if /COMPARE specified
!
!	V02-001	MLJ0010		Martin L. Jack,	25-Mar-1981  16:12
!		Reorganize global storage.  Add capability for listing
!		concurrent with another operation.  Add image restore.
!		Add standalone operation.
!
!**

REQUIRE 'SRC$:COMMON';
LIBRARY 'SYS$LIBRARY:STARLET';
REQUIRE 'LIB$:BACKDEF';


FORWARD ROUTINE
	MAIN_HANDLER,			! Condition handler for main routine
	MAIN;				! Main routine


EXTERNAL ROUTINE
	LIB$CRC_TABLE:	ADDRESSING_MODE(GENERAL),
					! Compute CRC vectors
	STA_INIT:	NOVALUE WEAK,	! Initialize standalone version
	STA_RESTART:	NOVALUE WEAK,	! Restart standalone version
	STA_MOUNT:	NOVALUE,	! Mount a volume
	COMMAND:	NOVALUE,	! Parse command
	SAVE:		NOVALUE,	! Driver for save
	RESTORE:	NOVALUE,	! Driver for restore
	INIT_LIST:	NOVALUE,	! Initialize listing
	FIN_LIST:	NOVALUE,	! Finish listing
	OPEN_JOURNAL:	NOVALUE WEAK,	! Open journal file
	CLOSE_JOURNAL:	NOVALUE WEAK,	! Close journal file
	LIST:		NOVALUE,	! Driver for list-only
	LIST_JOURNAL:	NOVALUE WEAK,	! List journal file
	ANALYZE:	NOVALUE,	! Driver for analysis
	FILE_ERROR,			! Signal a file realated error
	CRYPTO_INIT:	NOVALUE WEAK,	! Initialize saveset encryption
	CRYPTO_FINI:	NOVALUE WEAK;	! Finalize encrytion streams

EXTERNAL LITERAL
	BACKUP$_BADSETCNT,
	BACKUP$_OPENIN,
	BACKUP$_NOFILES;


OWN
	EXIT_STATUS:	BBLOCK[4];	! Image exit status


G$DEFINE(GBL);		! Define global common area

%SBTTL 'MAIN_HANDLER - main condition handler'
ROUTINE MAIN_HANDLER(SIG,MECH)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is established as the condition handler for routine MAIN.
!	It saves the most severe error for the image exit status.
!
! INPUT PARAMETERS:
!	SIG		- Standard VMS condition handler parameters.
!	MECH
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	EXIT_STATUS	- The most severe error status.
!
! ROUTINE VALUE:
!	SS$_RESIGNAL.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	SIG:		REF BBLOCK,	! Signal parameters
	MECH:		REF BBLOCK;	! Mechanism parameters
BIND
	COND= 		SIG[CHF$L_SIG_NAME]: BBLOCK;	! Condition


IF
    NOT .COND AND
    (.COND[STS$V_SEVERITY] GTRU .EXIT_STATUS[STS$V_SEVERITY] OR
	.EXIT_STATUS[STS$V_SEVERITY])
THEN
    EXIT_STATUS = .COND;


SS$_RESIGNAL
END;

%SBTTL 'MAIN - main routine for BACKUP'
ROUTINE MAIN=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This is the main routine.  It provides the top-level control.
!
! INPUT PARAMETERS:
!	Standard VMS activation parameters (not used).
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Exit status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
BUILTIN
	FP;

LOCAL
	FAB		: REF BBLOCK;	! Pointer to the input FAB

! Establish the handler.
!
EXIT_STATUS = SS$_NORMAL;
.FP = MAIN_HANDLER;


! Initialize the standalone version if STA_INIT is present.  (This will
! reestablish the handler in STA_INIT for this routine.)
!
IF STA_INIT NEQ 0 THEN STA_INIT();


! Get the command.
!
COMMAND();


! Initialize various globals.
!
LIB$CRC_TABLE(UPLIT(%O'120001'), RWSV_CRC16);
LIB$CRC_TABLE(UPLIT(%X'EDB88320'), RWSV_AUTODIN);
INPUT_FUNC = IO$_READVBLK;
INPUT_RTYPE = BRH$K_VBN;
OUTPUT_FUNC = IO$_WRITEVBLK;
COM_VALID_TYPES =
    1^BRH$K_NULL +
    1^BRH$K_SUMMARY +
    1^BRH$K_VOLUME +
    1^BRH$K_FILE +
    1^BRH$K_VBN +
    1^BRH$K_FID +
    1^BRH$K_FILE_EXT;
IF .QUAL[QUAL_PHYS]
THEN
    BEGIN
    INPUT_FUNC = IO$_READLBLK;
    INPUT_RTYPE = BRH$K_LBN;
    OUTPUT_FUNC = IO$_WRITELBLK;
    COM_VALID_TYPES =
	1^BRH$K_NULL +
	1^BRH$K_SUMMARY +
	1^BRH$K_PHYSVOL +
	1^BRH$K_LBN;
    END;

! Initialize the saveset encryption context if required
!
IF .QUAL[QUAL_SS_ENCRYP] AND CRYPTO_INIT NEQA 0 THEN CRYPTO_INIT();

! Call the standalone ACP to mount the input and output volumes if required.
!
IF NOT .QUAL[QUAL_PHYS]
THEN
    BEGIN
    IF .QUAL[QUAL_IF11] AND .COM_FLAGS[COM_STANDALONE]
    THEN
	STA_MOUNT(0);


    IF .QUAL[QUAL_OF11] AND (.COM_FLAGS[COM_STANDALONE] OR (.QUAL[QUAL_IMAG] AND NOT .QUAL[QUAL_COMP]))
    THEN
	BEGIN
	IF .QUAL[QUAL_VOLU]
	THEN
	    BEGIN
	    LOCAL
		MTL:	REF BBLOCK;	! Pointer to MTL entry

	    STA_MOUNT(1, 0);
	    MTL = .OUTPUT_MTL;
	    IF .MTL[MTL_SETCOUNT] NEQ 1 THEN SIGNAL(BACKUP$_BADSETCNT);
	    MTL[MTL_RVN_BASE] = .QUAL[QUAL_VOLU_VALUE];
	    STA_MOUNT(1, .QUAL[QUAL_VOLU_VALUE]);
	    END
	ELSE
	    STA_MOUNT(1);
	END;
    END;


! Initialize the listing if required.
!
IF .QUAL[QUAL_LIST] THEN INIT_LIST();


! Execute the command.
!

INPUT_FLAGS[INPUT_SSFOUND] = FALSE;		! No save set found as yet

DO
    BEGIN
    IF .QUAL[QUAL_LIST] AND .QUAL[QUAL_OUTP_LIST] EQL 0
    THEN
	BEGIN
	IF .QUAL[QUAL_INPU_LIST] EQL 0
	THEN
	    BEGIN
	    !
	    ! List journal.
	    !
	    IF .QUAL[QUAL_JOUR] THEN LIST_JOURNAL();
	    END
	ELSE
	    BEGIN
	    !
	    ! List save set.
	    ! Set all record types valid and call LIST or ANALYZE as appropriate.
	    !
	    QUAL[QUAL_VERI] = FALSE;
	    COM_VALID_TYPES = -1;
	    IF .QUAL[QUAL_ANAL]
	    THEN
		ANALYZE()
	    ELSE
		LIST()
	    END;
	IF NOT .COM_FLAGS[COM_EOV] THEN FIN_LIST(FALSE);
	END
    ELSE
	BEGIN
	!
	! If disk-to-disk or disk-to-tape operation, call SAVE.  If tape-to-disk
	! operation, call RESTORE.
	!
	IF .QUAL[QUAL_IF11]
	THEN
	    BEGIN
	    IF NOT .QUAL[QUAL_OSAV] THEN QUAL[QUAL_JOUR] = FALSE;
	    IF .QUAL[QUAL_JOUR] THEN OPEN_JOURNAL(TRUE);
	    SAVE();
	    IF .QUAL[QUAL_JOUR] THEN CLOSE_JOURNAL(TRUE);
	    END
	ELSE
	    RESTORE();
	END;
    END
WHILE NOT .COM_FLAGS[COM_EOV] AND .INPUT_FLAGS[INPUT_WILDSAVE];

IF NOT .COM_FLAGS[COM_VERIFYING]
THEN
    BEGIN
    IF .INPUT_FLAGS[INPUT_WILDSAVE]
    THEN IF NOT .INPUT_FLAGS[INPUT_SSFOUND]
    THEN
	BEGIN
	FAB = .RWSV_SAVE_FAB;
	FILE_ERROR (BACKUP$_OPENIN+STS$K_SEVERE, .FAB, SS$_NOSUCHFILE);
	END
    ELSE IF NOT .QUAL[QUAL_PHYS] AND NOT .COM_FLAGS[COM_FILESEEN] AND NOT .QUAL[QUAL_LIST]
    THEN SIGNAL (BACKUP$_NOFILES, 1,
		 BBLOCK[.QUAL[QUAL_INPU_LIST], QUAL_EXP_DESC]);
    END;

! Finish the listing if required.
!
IF .QUAL[QUAL_LIST] THEN FIN_LIST(TRUE);


! If this is the standalone version, restart the image.
!
IF .COM_FLAGS[COM_STANDALONE] THEN STA_RESTART();

! Close any remaining encryption contexts
!
IF .QUAL[QUAL_SS_ENCRYP] AND crypto_fini NEQA 0 THEN crypto_fini() ;

! Return to operating system.
!
.EXIT_STATUS OR STS$M_INHIB_MSG
END;

END
ELUDOM
