MODULE TPR (					!
		IDENT = 'V04-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Routines for checking how full the text portion of a page is.
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: May, 1978
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	007	KAD00007	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'

!
! TABLE OF CONTENTS:
!
!
FORWARD ROUTINE
    TPR,
    TPBEQL,
    TPFEQL,
    TPFFIT,
    TPFSKP,
    TPFSIZ;

! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FNCT : FNCT_DEFINITION,
    FNESIZ : FN_EXT_SIZE_DEFINITION,
    FNISIZ : FN_INT_SIZE_DEFINITION,
    HCT : HCT_DEFINITION,
    PHAN : PHAN_DEFINITION;

%SBTTL 'Routine TPR'
GLOBAL ROUTINE TPR (COUNT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!    TPR is used to see if COUNT lines are still available in
!    the text portion of a page.  The text portion include footnotes.
!
! FORMAL PARAMETERS:
!
!	COUNT indicates how many lines are to be available.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if the specified number of lines are available,
!	otherwise returns FALSE.
!
! SIDE EFFECTS:	None
!
!--

    BEGIN

    IF .phan_top_page
	OR (NOT .phan_paging)
    THEN
	RETURN true;

    IF (.count + .phan_lines_tp + .hct_layoutn) GTR .phan_llines
    THEN
	RETURN false
    ELSE
	RETURN true

    END;					!End of TPR

%SBTTL 'Routine TPBEQL'
GLOBAL ROUTINE TPBEQL (COUNT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!    TPBEQL is used to see if exactly COUNT lines are still available in
!    the text portion of a page.  The text portion include footnotes.
!
! FORMAL PARAMETERS:
!
!	COUNT indicates how many lines are to be available.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if exactly the specified number of lines are available,
!	otherwise returns FALSE.
!
! SIDE EFFECTS:	None
!
!--

    BEGIN

    IF (.count + .phan_lines_tp + .hct_layoutn) NEQ .phan_llines
    THEN
	RETURN false
    ELSE
	RETURN true

    END;					!End of TPBEQL

%SBTTL 'Routine TPFEQL'
GLOBAL ROUTINE TPFEQL =

!++
! FUNCTIONAL DESCRIPTION:
!
!    TPFEQL is used to see if exactly enough space is available in the
!    text portion of the page to fit one or more footnotes there.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns the number of footnotes for which exactly enough room is 
!	available. Returns 0 if no footnotes will fit.
!
! SIDE EFFECTS:	None
!
!--

    BEGIN

    LOCAL
	total_fit_size;

    total_fit_size = 0;		!Don't know if any footnotes will fit yet.

    !Now, loop through the list of footnotes that are elegible to go out.
    !Quit either when you run out of footnotes to look at, or you run out
    !of footnotes that will fit.
    INCR i FROM 1 TO .fnct_ready DO
	BEGIN
	!First check to see if there is enough room at all for this footnote.
	IF
	    .phan_llines geq (.total_fit_size + .fnesiz [.i - 1 + .fnct_old] + .phan_lines_tp + .hct_layoutn)
	THEN
	    !Ok, we know there's a chance.  Now check to see if we're exactly at the
	    !right spot.
	    IF
		tpbeql (.total_fit_size + .fnesiz [.i - 1 + .fnct_old])
	    THEN
		!Found the exact position where some footnotes can be output
		BEGIN
		!Ideally, we could just exit with the value of I indicating the
		!number of footnotes that will exactly fit.  However, there is a
		!strange case in which the footnote generates no text.  For example,
		!the user might have input a footnote containing only indexing commands.
		!The following adjusts for that, if that is the case.
		INCR j FROM .I TO .fnct_ready - 1 DO
		    IF .fnesiz [.j  + .fnct_old] EQL 0	!Look ahead one more footnote
		    THEN
			!Ok, the next footnote is a zero-length one.
			i = .i + 1
		    ELSE
			EXITLOOP;
		
		!Now, finally, we've included any zero-length footnotes.
		RETURN .i
		END
	    ELSE
		!Didn't fit exactly, but still fit.  Add its size to the total
		!size of footnotes that will fit so far at this spot.
		BEGIN
		total_fit_size = .total_fit_size + .fnesiz [.i - 1 + .fnct_old];
		END
	ELSE
	    !Nothing fits.  Some previous footnotes may have fitted, but this one
	    !is just a bit too large.
	    RETURN 0
	END;

    !Falling through the loop means either no footnotes at all were found,
    !or, we were not exactly at the correct position for outputting at
    !least one footnote, even though there might be footnotes ready.
    RETURN 0

    END;					!End of TPFEQL

%SBTTL 'Routine TPFFIT'
GLOBAL ROUTINE TPFFIT =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Checks to see how many footnotes could be output in the space remaining on the page.
!	This routine doesn't check as closely as TPFEQL: it's ok for extra space to be available.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns the number of footnotes for which sufficient space is available on
!	the current page.
!
! SIDE EFFECTS:	None
!
!--

    BEGIN

    LOCAL
	total_fit_size;

    total_fit_size = 0;				!Don't know if any footnotes will fit yet.

    !Loop through the list of read footnotes, and quit when you find the first one
    !that won't fit anymore.
    INCR i FROM 1 TO .fnct_ready DO

	!NOTE: The following logical expression is almost equivalent to
	!TPR (.TOTAL_FIT_SIZE + .FNESIZ [.I - 1 + .FNCT_OLD]) except that 
	!you can't use TPR when checking for space for footnotes. That's
	!because when it's time to check for footnote space, PHAN_TOP_PAGE
	!is TRUE, and when that's the case TPR always returns TRUE, which
	!would ultimately result in all ready footnotes being output, even
	!if there's not enough space. 
	IF .phan_llines GEQ (.total_fit_size + .fnesiz [.i - 1 + .fnct_old] + .phan_lines_tp + .hct_layoutn)
	THEN
	    total_fit_size = .total_fit_size + .fnesiz [.i - 1 + .fnct_old]	!Add size to running total.
	ELSE
	    RETURN .i - 1;			!The last footnote looked at is the last one that will fit.

    !Falling through the loop means that all the footnotes will fit.
    RETURN .fnct_ready

    END;					!End of TPFFIT

%SBTTL 'Routine TPFSKP'
GLOBAL ROUTINE TPFSKP (FOOTNOTE_COUNT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Computes how many lines need to be skipped in order to be precisely 
!	at the position for outputting a certain number of footnotes.
!
! FORMAL PARAMETERS:
!
!	FOOTNOTE_COUNT indicates how many of the ready footnotes are to be output.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:	None
!
!--

    BEGIN

    LOCAL
	total_fit_size;

    total_fit_size = 0;
    !Add up sizes of the specified number of footnotes.
    INCR i FROM 1 TO .footnote_count DO
	!(Forget old footnotes.)
	total_fit_size = .total_fit_size + .fnesiz [.i - 1 + .fnct_old];

    RETURN (.phan_llines - (.total_fit_size + .phan_lines_tp + .hct_layoutn))

    END;					!End of TPFSKP

%SBTTL 'Routine TPFSIZ'
GLOBAL ROUTINE TPFSIZ (FOOTNOTE_COUNT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Computes how many lines a specified number of footnotes occupies.
!
! FORMAL PARAMETERS:
!
!	FOOTNOTE_COUNT indicates how many of the ready footnotes are to be counted.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns the number of lines that the footnotes will take up.
!
! SIDE EFFECTS:	None
!
!--

    BEGIN

    LOCAL
	total_fit_size;

    total_fit_size = 0;
    !Add up sizes of the specified number of footnotes.
    INCR i FROM 1 TO .footnote_count DO
	!(Forget old footnotes.)
	total_fit_size = .total_fit_size + .fnesiz [.i - 1 + .fnct_old];

    RETURN .total_fit_size

    END;					!End of TPFSIZ

END						!End of module
ELUDOM
