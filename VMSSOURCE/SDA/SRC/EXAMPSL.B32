MODULE FORMAT_PSL ( IDENT = 'V04-000') =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	SDA
!
!++
! FUNCTIONAL DESCRIPTION:
!
!	Given a longword value, format as a PSL.
!
!	Author:
!		Jake VanNoy (taken from DEBUG sources)
!
!	Modified by:
!
!	V03-001	JLV0222		Jake VanNoy		21-JAN-1983
!		Add module to SDA sources.
!--

LIBRARY
	'SYS$LIBRARY:STARLET';

REQUIRE
	'SHRLIB$:UTILDEF';

EXTERNAL ROUTINE
	SYS$FAOL	: ADDRESSING_MODE (GENERAL),
	LIB$PUT_OUTPUT	: ADDRESSING_MODE (GENERAL);

FORWARD ROUTINE
	fao_put		: NOVALUE,
	format_psl      : NOVALUE;	! ROUTINE TO OUTPUT PSL IN SPECIAL FORMAT


GLOBAL ROUTINE format_psl (value, buffer) : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!	Formats and outputs two lines of specially
!	formatted data contained in the PSL. The fields shown are
!
!		CMP	- compatibility mode
!		TP	- trace trap pending
!		FPD	- first part done
!		IS	- interrupt stack
!		CURMOD	- current access mode
!		PRVMOD	- previous access mode
!		IPL	- interrupt priority level
!		DV	- decimal overflow trap enable
!		FU	- floating underflow trap enable
!		IV	- integer overflow trap enable
!		T	- trace trap
!		N	- condition code
!		Z	- condition code
!		V	- condition code
!		C	- condition code
!
! CALLING SEQUENCE:
!	FORMAT_PSL ( .psl, buffer)
!
! INPUTS:
!	value	-The current contents of the PSL
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUTS:
!	buffer is returned with length and address of psl line.
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE value:
!	NOVALUE
!
! SIDE EFFECTS:
!--

BEGIN
	MAP
		buffer	: REF vector[2],
		value	: block;
	MACRO
		position_field	= 0, 8, 1%,
		size_field	= 8, 8, 1%,
		mode_field	= 16, 4, 1%,
		blanks_field	= 20, 4, 1%,
		width_field	= 24, 8, 1%,

		psl_field (name, position, size, mode, width, leading_blanks) =
			position, size, mode OR (leading_blanks ^ 4), width%;

	LITERAL
		decimal		= 0,
		max_psl_field	= 15;

	BIND
		psl_table = UPLIT BYTE (

		psl_field (CMP, 31, 1, 0, 1, 1),
		psl_field (TP, 30, 1, 0, 1, 3),
		psl_field (FPD, 27, 1, 0, 1, 2),
		psl_field (IS, 26, 1, 0, 1, 3),
		psl_field (CURMOD, 24, 2, 1, 4, 2),
		psl_field (PRVMOD, 22, 2, 1, 4, 3),
		psl_field (IPL, 16, 5, 0, 2, 3),
		psl_field (DV, 7, 1, 0, 1, 2),
		psl_field (FU, 6, 1, 0, 1, 2),
		psl_field (IV, 5, 1, 0, 1, 2),
		psl_field (T, 4, 1, 0, 1, 1),
		psl_field (N, 3, 1, 0, 1, 1),
		psl_field (Z, 2, 1, 0, 1, 1),
		psl_field (V, 1, 1, 0, 1, 1),
		psl_field (C, 0, 1, 0, 1, 1))

		: BLOCK,

		hex_number	= UPLIT BYTE (%ASCIC '!AD!#XB'),
		stg_desc	= UPLIT BYTE (%ASCIC '!AD!AD'),
		blanks		= UPLIT BYTE (%ASCII '    '),

		priv_modes	= UPLIT BYTE (

		%ASCII 'KERN',
		%ASCII 'EXEC',
		%ASCII 'SUPR',
		%ASCII 'USER')

		: VECTOR;

	LOCAL
		SAVE_BUFFER	: VECTOR[2];	! save buffer descriptor

	save_buffer[0] = .buffer[0];
	save_buffer[1] = .buffer[1];

	! Write out the standard title which describes the PSL fields.

	fao_put (.buffer,
	 UPLIT (%ASCIC '!_CMP TP FPD IS CURMOD PRVMOD IPL DV FU IV T N Z V C!/!_'));
	INCR count FROM 0 TO max_psl_field - 1 DO
		IF .psl_table [.count, mode_field] EQL decimal
		THEN
			BEGIN
			fao_put (.buffer, hex_number,
				.psl_table [.count, blanks_field], blanks,
				.psl_table [.count, width_field],
				.value [0, .psl_table [.count, position_field],
				.psl_table [.count, size_field], 0]);
			END
		ELSE
			BEGIN
			fao_put (.buffer, stg_desc,
				.psl_table [.count, blanks_field], blanks,
				.psl_table [.count, width_field],
				priv_modes [.value [0, .psl_table [.count, position_field],
					.psl_table [.count, size_field], 0]]);
			END;

	buffer[0] = .save_buffer[0] - .buffer[0];	! length is starting length minus remaining length
	buffer[1] = .save_buffer[1] 			! address is reset

END;	! EXAM_PSL



ROUTINE fao_put( buffer, STRING, ARGUMENTS ) : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION
!
! INPUTS:
!	STRING	  - A COUNTED STRING WHICH CONTAINS THE DIRECTIVES FOR $FAO.
!	ARGUMENTS - THE ARGS FOR $FAO.
!	buffer	  - The address of the beginning of the current output buffer.
!
! OUTPUTS:
!	THE $FAO OUTPUT IS PUT INTO THE OUTPUT BUFFER, and
!	the buffer pointers are updated.
!
! IMPLICIT OUTPUTS:
!
! ROUTINE VALUE:
!	NONE.
!
!--

	BEGIN
	MAP
		buffer	: REF VECTOR[2],	! OUTPUT DESC FOR $FAO.
		string	: REF VECTOR[,BYTE];	! The string to be formatted
    						! for output
	LOCAL
		INP_DESC : VECTOR[2],		! INPUT DESC FOR $FAO.
		STR_SIZE : WORD;		! $FAO RETURNS OUTPUT SIZE HERE


	inp_desc[0] = .string[0];
	inp_desc[1] = string[1];

	Signal_if_error (sys$faol( inp_desc, str_size, .buffer, arguments));

	buffer[0] = .buffer[0] - .str_size;
	buffer[1] = .buffer[1] + .str_size;

END;


END
ELUDOM
