	.title	CONIO - console input output routines
	.ident	/V04-000/
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; Facility:  system bootstrapping
;
; Abstract: CONIO provides basic console read, readprompt and write facilities.
;
; Author:  Richard I. Hustvedt, creation date:  27-apr-1978
;
; Modified by:
;
;	V03-002	WHM0001		Bill Matthews		9-Jul-84
;
;		Add generalized alternate console terminal support
;
;	V03-001	DNC0001		David N. Cutler		29-Dec-83
;
;		Add support for QVSS as the console terminal on MicroVax I.
;
; Include files:
;
 
	$prdef				; define processor registers
	$ssdef				; define status code values

;
; Equated symbols:
;
 
	cr     = 13			; character code for carriage return
	lf     = 10			; character code for line feed
	control_u = 21			; character code for control-u
	control_s = 19			; control s (xoff)
	control_q = 17			; control q (xon)
	rubout = 127			; character code for rubout
	v_rub  = 0			; rubout sequence in progress
	.page
	.sbttl	boo$readprompt - prompt and read input string
;+
;	boo$readprompt outputs the specified asciz prompt string on the
;	console terminal then checks the count of characters to be read.
;	If zero it exits, otherwise it reads the console terminal until
;	either a carriage return is encountered or the character count
;	is satisfied.  The specified buffer is filled with an ascic
;	string containing the characters read but not including the
;	terminating carriage return.
;
; Calling sequence:
;
;	callx	arglist,boo$readprompt
;
; Input parameters:
;
;	prompt(ap)  -  address of asciz prompt string
	prompt	=  4
;
;	size(ap)    -  maximum length of input string
	size	=  8
;			note: if size is zero, then nothing is read
;			      and only the prompt string is written.
;
;	buf(ap)     -  address of input buffer
	buf	=  12
;
;
; Output parameters:
;
;	r0 - completion status code (always ss$_normal)
;
;	Buffer located by buf(ap) will be filled with the string
;	read as an ascic string.
;
 
	.psect	$conio,byte
	.entry	boo$readprompt,^m<r2,r4,r8,r9>
10$:	movl	prompt(ap),r8		;get prompt string address
	clrl	r4			;clear control flags
20$:	movzbl	(r8)+,r0		;get next output character
	beql	30$			;if eql none
	bsbw	con$putchar		;output character
	brb	20$			;
 
30$:	movzbl	size(ap),r2		;maximum number of characters to read
	beql	120$			;if eql none
	movl	buf(ap),r9		;set address of input buffer
	clrb	(r9)+			;initialize string count
	sobgtr	r2,40$			;decrement and test character count
	brb	110$			;end of read
 
40$:	bsbw	con$getchar		;get a character
	bicb3	#^x80,r0,r8		;clear parity bit
	cmpb	#rubout,r8		;rubout?
	bneq	80$			;if neq no
	movzbl	-(r9),r8		;get character to rubout
	beql	30$			;if eql none
	bbss	#v_rub,r4,70$		;set start of rubout sequence
	bsbb	outbslsh		;output back slash
70$:	bsbb	outr8			;output rubbed out character
	incl	r2			;adjust remaining character count
	brb	40$			;
 
80$:	bbcc	#v_rub,r4,90$		;terminate rubout sequence
	bsbb	outbslsh		;output backslash
90$:	cmpb	#control_u,r8		;control u?
	beql	10$			;if eql yes
	bbc	#6,r8,100$		;if clr, then graphic
	bicb	#32,r8			;convert to upper case
100$:	cmpb	#cr,r8			;carriage return?
	beql	110$			;if eql yes
	tstl	r2			;any space left in buffer?
	beql	40$			;if eql no
	bsbb	outr8			;echo character
	movb	r8,(r9)+		;buffer new character
	sobgeq	r2,40$			;reduce space remaining (always loop)
 
110$:	movzbl	#cr,r8			;set carriage return character
	bsbb	con$putchar		;
	movzbl	#lf,r0			;yes send line feed also
	bsbb	con$putchar		;output character in r0
	subl	buf(ap),r9		;compute character count + 1
	subb3	#1,r9,@buf(ap)		;set actual character count
120$:	movzwl	#ss$_normal,r0		;return normal completion status
	ret				;
 
outbslsh:				;output back slash
	movzbl	#^a%\%,r0		;set character code
	brb	con$putchar			;and output it
 
outr8:	movzbl	r8,r0			;get character to output

con$putchar::				;output character in r0
	brw	w^10$			;console terminal output vector
 
10$:	mfpr	#pr$_rxcs,r1		;receiver ready?
	bbc	#7,r1,30$		;if clr, receiver not ready
	mfpr	#pr$_rxdb,r1		;read input character.
	cmpzv	#0,#7,r1,#control_s	;control-s?
	bneq	30$			;if neq no
20$:	mfpr	#pr$_rxcs,r1		;receiver ready?
	bbc	#7,r1,20$		;if clr, receiver not ready
	mfpr	#pr$_rxdb,r1		;read input character
	cmpzv	#0,#7,r1,#control_q	;is it a control-q?
	bneq	20$			;no, wait for another character.
30$:	mfpr	#pr$_txcs,r1		;transmitter done?
	bbc	#7,r1,30$		;if clr, transmitter not done
	mtpr	r0,#pr$_txdb		;write output character
	rsb				;return

 
con$getchar::
	brw	w^10$			;console terminal input vector

10$:	mfpr	#pr$_rxcs,r0		;receiver ready?
	bbc	#7,r0,10$		;if clr, receiver not ready
	mfpr	#pr$_rxdb,r0		;read input character
	rsb				;return

con$owncty::				;these routines are noops in SYSBOOT
con$releasecty::
	rsb

	.end

