%TITLE 'EDT$PRAPPNUM - include digits in a token'
MODULE EDT$PRAPPNUM (				! Include digits in a token
		IDENT = 'V04-000'			! File: PRAPPNUM.BLI Edit: JBS1004
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Include digits in a token.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: December 12, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 25-Feb-1981.  This module was created by
!	extracting routine APPEND_NUM from module PARSER.
! 1-002	- Regularize headers.  JBS 12-Mar-1981
! 1-003	- Change alphanumeric test.  JBS 19-Jul-1982
! 1-004	- Add VT220 support conditional.  JBS 11-Feb-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$PA_APPDIG;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

REQUIRE 'EDTSRC:PARLITS';

LIBRARY 'EDTSRC:SUPPORTS';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$PA_APPDIG  - include digits in a token'

GLOBAL ROUTINE EDT$$PA_APPDIG 			! Include digits in a token
    =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Append a string of digits and letters to the current token.  Normally,
!	CL_NAME type tokens are terminated by a digit.  In some cases we want
!	to allow digits in the token.  This routine expands the length of the
!	current token to include all digits and letters which immediately follow.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$A_CMD_BUF
!	EDT$$C_PA_CH
!	EDT$$G_PA_CURTOKLEN
!	EDT$$G_PA_TOKCLASS
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_PA_CURTOKLEN
!
! ROUTINE VALUE:
!
!	1 = token is a CL_NAME
!	0 = token is not a CL_NAME, no action taken
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$PA_GETCH : NOVALUE;		! Get the next character from the input line

    EXTERNAL
	EDT$$A_CMD_BUF,				! Pointer into command buffer.
	EDT$$C_PA_CH,				! the currently being processed character
	EDT$$G_PA_CURTOKLEN,			! length of current token

%IF SUPPORT_VT220
%THEN
	EDT$$B_CHAR_INFO : BLOCKVECTOR [256, 1, BYTE],	! Information about characters
%FI

	EDT$$G_PA_TOKCLASS;			! class of current token

    IF (.EDT$$G_PA_TOKCLASS NEQ CL_NAME) THEN RETURN (0);

%IF SUPPORT_VT220
%THEN

    WHILE ((.EDT$$B_CHAR_INFO [.EDT$$C_PA_CH, 0, 0, 2, 0] NEQ 0)	! Alphabetic
	OR (.EDT$$B_CHAR_INFO [.EDT$$C_PA_CH, 0, 0, 8, 0] EQL %X'F0'))	! Numeric
    DO
%ELSE

	WHILE (((.EDT$$C_PA_CH GEQ %C'A') AND (.EDT$$C_PA_CH LEQ %C'Z')) OR 	!
	    ((.EDT$$C_PA_CH GEQ %C'a') AND (.EDT$$C_PA_CH LEQ %C'a')) OR 	!
	    ((.EDT$$C_PA_CH GEQ %C'0') AND (.EDT$$C_PA_CH LEQ %C'9'))) DO
%FI

	    BEGIN
	    EDT$$PA_GETCH ();
	    CH$WCHAR (.EDT$$C_PA_CH, CH$PLUS (.EDT$$A_CMD_BUF, -1));
	    EDT$$G_PA_CURTOKLEN = .EDT$$G_PA_CURTOKLEN + 1;
	    END;

    RETURN (1);
    END;					! of routine EDT$$PA_APPDIG

!<BLF/PAGE>

END						! of module EDT$PRAPPNUM

ELUDOM
