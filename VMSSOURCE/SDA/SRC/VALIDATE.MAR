	.TITLE	VALIDATE - Structure Validation module
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; FACILITY:
;
;	SDA
;
; ABSTRACT:
;
;	This module contains code which verifies the consistency of
;	certain VMS internal structues.
;
; ENVIRONMENT:
;
;	VMS user mode.
;
;--
;
; AUTHOR: Jake VanNoy, CREATION DATE: 21-Jan-1983
;
; MODIFIED BY:
;
;	V03-000	JLV0226		Jake VanNoy		21-JAN-1983
;		Initial coding.
;**

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$OPTDEF
	$TPADEF

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;
NEWFL = 0
NEWBL = 4
HEADFL = 8
HEADBL = 12
LOCAL_STORAGE = 16

;
; OWN STORAGE:
;

VALIDATE_MAX:	.LONG	400


	.SBTTL	VAL_SET_MAX - Set maximum number of links to traverse

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Tparse action routine which sets value of VALIDATE_MAX.
;	*** Note that the VALIDATE_QUEUE code does not use this
;	*** as input. It has not been proven that there are "infinite"
;	*** queues which the algorithm does not detect.
;
; CALLING SEQUENCE:
;	NONE
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


.Entry	VAL_SET_MAX, 0

	MOVL	TPA$L_NUMBER(AP),VALIDATE_MAX ; set max
	MOVL	#1,R0
	RET

	.SBTTL	VALIDATE_QUEUE - Validate queue structure

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	The algorithm used to validate a doubly linked list queue
;	starts by copying the head (or starting point specified)
;	into a known location. It then proceeds by following the 
;	forward link checking that the backward link points to where
;	the last forward link was.  
;
; CALLING SEQUENCE:
;	CALLS from tparse.
;
; INPUT PARAMETERS:
;	TPA$L_NUMBER(AP) - address to start search from
;
; IMPLICIT INPUTS:
;
;	OPTIONS - can specify SELF RELATIVE QUEUE 
;	*** code not writeen for this as yet.
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	
;	no such memory, or success
;
; SIDE EFFECTS:
;	NONE
;
;--



.Entry	VALIDATE_QUEUE, ^M<R2,R3,R4,R5,R6,R7>

	MOVL	TPA$L_NUMBER(AP),R0	; Address to start at
	MOVL	R0,ADDRESS		; Set "current"

;	MOVL	VALIDATE_MAX,R1		; Max number of links *** not used

	SUBL2	#local_storage,SP	; allocate storage from stack
	MOVL	SP,R2			; Allocate on stack
	CLRL	R6			; Counter

	MOVL	R0,R3			; init last pointer
	TRYMEM	(R0),HEADFL(R2),#8	; try memory at head of queue
	MOVL	HEADFL(R2),R4		; next address
	;
	; Loop through flinks
	;
20$:	
	TRYMEM	(R4),NEWFL(R2),#8	; try memory
	BLBC	R0,mem_err		; Error
	CMPL	newfl(R2),headfl(R2)	; Same as listhead?
	BEQL	100$			; Done with flinks
	INCL	R6			; Increment counter
	CMPL	R3,NEWBL(R2)		; back link ok?
	BNEQ	bad_blink		; branch if not
	MOVL	R4,R3			; save last pointer
	MOVL	NEWFL(R2),R4		; move to next element
	BRB	20$			; Loop
	;
	; Search completed successfully, do final validation
	;
100$:	CMPL	NEWBL(R2),HEADBL(R2)	; Same as listhead? 
	BNEQ	bad_blink		; Done with list
	CMPL	R3,HEADBL(R2)		; does this check out?
	BNEQ	bad_blink
	;
	; Queue is ok, check for empty queue
	;
110$:	TSTL	R6
	BNEQ	queue_ok
	PRINT	0,<The queue is empty>	;
	BRW	VAL_Q_EXIT

mem_err:	
	PUSHL	R4
	SIGNAL	1,NOTINPHYS		; Not in physical memory error	
	RET

bad_blink:
	PUSHL	R3
	PRINT	1,-
<Error comparing backward link to previous structure address (!XL)>
	PUSHL	R6
	PUSHL	R4
	PRINT	2,-
<Error occured in queue element at address !XL, after tracing !UL element!%S>
	brb	val_q_exit
	
queue_ok:
	PUSHL	R6			; Count
	PRINT	1, <Queue is complete, total of !UL element!%S in the queue>

val_q_exit:
	MOVL	#1,R0
	RET

.END 	; 	VALIDATE
