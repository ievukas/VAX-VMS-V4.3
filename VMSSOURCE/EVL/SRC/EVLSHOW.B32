%TITLE	'Routines to Obtain Data from NETACP'
MODULE EVLSHOW (IDENT = 'V04-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DECnet Event Logging (EVL)
!
! ABSTRACT:
!
!	This module contains routines and data to obtain information
!	from the network.
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE:  7-July-1980
!
! MODIFIED BY:
!
!	V001	TMH0001		Tim Halvorsen	02-Jun-1982
!		Convert to use new format NETACP control QIO interface.
!--

%SBTTL	'Definitions'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	EVL$OBTAINNETCHAN	: NOVALUE,
	EVL$NETSHOW,
	EVL$INITLOCALNODE	: NOVALUE
	;

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:STARLET';		! VMS common definitions
LIBRARY 'LIB$:EVLIBRARY';		! BLISS definitions
LIBRARY	'SHRLIB$:NET';			! Network ACP interface

!
! OWN STORAGE:
!

GLOBAL
    EVL$GW_NETSHOCHAN	: WORD		! Channel to network for show
    ;

!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL			! Error codes
	EVL$_NETASN,			! Netdevice could not be assigned
	EVL$_ACPSHO			! Error from ACP show function
	;

EXTERNAL
    EVL$GT_LOCALNODE,			! Buffer for local node address
					! and name
    EVL$GB_LOCALNODE : BYTE		! Length of data in bytes
    ;

%SBTTL	'EVL$OBTAINNETCHAN  Obtain a Channel to NET'
GLOBAL ROUTINE EVL$OBTAINNETCHAN (CHANADR) :NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Obtain a channel to the network.  Probably for control qio
!	functions.  This routine performs the error signalling
!	in case something is wrong with the network.
!
! FORMAL PARAMETERS:
!
!	CHANADR		Address of a word to return channel
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	STATUS
	;

    IF NOT
	( STATUS = $ASSIGN			! Obtain the channel
	    (
	    CHAN = .CHANADR,
	    DEVNAM = %ASCID '_NET:'
	    )
	)
    THEN
	SIGNAL_STOP (EVL$_NETASN, 0, .STATUS)	! Signal any error loudly


    END;

%SBTTL	'EVL$NETSHOW  Perform a Net Show QIO'
GLOBAL ROUTINE EVL$NETSHOW (DATABASE, SEARCHID, SEARCHVAL,
	CONTEXT, FIELDS, FIELDSADR, RTNBFR, RTNLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Perform a net show qio function.  The nfb and related structures
!	are built from the parameter list of the routine and the return
!	length and buffer are returned in the specified areas.
!
! FORMAL PARAMETERS:
!
!	DATABASE		NFB$C_DB_LNI, OBI, NDI, CRI, PLI, EVI...
!	SEARCHID		Field id of search key
!	SEARCHVAL		Address of search key
!	CONTEXT			Address of context buffer (NFB$C_CTX_SIZE bytes)
!				updated to the current position on exit
!	FIELDS			Number of fields in fields list
!	FIELDSADR		Address of list of fields id's
!	RTNBFR			Address of descriptor of buffer
!	RTNLEN (Optional)	Address of longword to return bytes in buffer
!
! IMPLICIT INPUTS:
!
!	EVL$GW_NETSHOCHAN	Channel to use to perform function
!
! ROUTINE VALUE:
!
!	Status of SS$_NORMAL or SS$_ENDOFFILE
!--

BEGIN

BUILTIN
    NULLPARAMETER;				! True if parameter unspecified

MAP
    SEARCHID:	BBLOCK,				! Get at subfields of longword
    FIELDSADR:	REF VECTOR;			! Vector of field ids

LITERAL
    MAXFIELDS = 20;				! Max number of field ids

LOCAL
    NFB:					! Network Function Block
	BBLOCK [NFB$C_LENGTH + MAXFIELDS*4],
    NFBDSC:	VECTOR [2],			! Descriptor of same
    KEY:	VECTOR [128, BYTE],		! Key block
    KEYDSC:	VECTOR [2],			! and its descriptor
    RTNLENGTH:	WORD,				! Return length of buffer
    IOSB:	BBLOCK [IOSB$C_SIZE],		! Iosb for use here
    PTR:	REF VECTOR,			! Pointer to something
    NUMFIELDS,					! Number of fields
    STATUS;					! Status return

CH$FILL(0, NFB$C_LENGTH, NFB);			! Pre-zero NFB fields
NFB [NFB$B_FCT] = NFB$C_FC_SHOW;		! Build function code
NFB [NFB$B_DATABASE] = .DATABASE;		! and parameter code of nfb

PTR = KEY+4;					! Build the key block
NFB [NFB$L_SRCH_KEY] = .SEARCHID;		! Search key first
IF .SEARCHVAL NEQ 0				! If there is one
THEN
    BEGIN
    PTR = CH$MOVE(				! Move it in
	    (IF .SEARCHID [NFB$V_TYP] EQL NFB$C_TYP_STR ! Special case the string
	    THEN .(.SEARCHVAL) <0, 16> + 2
	    ELSE 4),
	    .SEARCHVAL, .PTR);			! Copy the data
    END;

IF .CONTEXT NEQ 0				! If there is a context area,
THEN
    PTR = CH$MOVE(				! Copy it as before
	    .(.CONTEXT) <0, 16> + 2,
	    .CONTEXT, .PTR)
ELSE
    NFB [NFB$V_NOCTX] = TRUE;			! If not, indicate no context

KEYDSC [0] = .PTR - KEY;			! Build the key descriptor
KEYDSC [1] = KEY;
IF .CONTEXT NEQ 0				! If updating current position,
THEN
    KEYDSC [0] = MAXU(.KEYDSC [0], 4+NFB$C_CTX_SIZE); ! Make at least this big

NUMFIELDS = MIN (MAXFIELDS, .FIELDS);		! Adjust number of fields
PTR = NFB [NFB$L_FLDID];			! Set pointer into NFB
INCRU I FROM 0 TO .NUMFIELDS-1			! Copy the field id's
DO
    PTR [.I] = .FIELDSADR [.I];

NFBDSC [0] = $BYTEOFFSET(NFB$L_FLDID) + 4*.NUMFIELDS; ! Build NFB descriptor
NFBDSC [1] = NFB;

STATUS = $QIOW(					! Perform the qio
		EFN = EVL$C_SYNCH_EFN,
		CHAN = .EVL$GW_NETSHOCHAN,
		FUNC = IO$_ACPCONTROL,
		IOSB = IOSB,
		P1 = NFBDSC,
		P2 = KEYDSC,
		P3 = RTNLENGTH,
		P4 = .RTNBFR);

IF .STATUS					! Obtain the worst status
THEN
    STATUS = .IOSB [IOSB$W_STS];

IF NOT .STATUS					! Check it out
    AND	.STATUS NEQ SS$_ENDOFFILE
THEN
    SIGNAL_STOP (EVL$_ACPSHO, 0, .STATUS);	! Report the error

IF .CONTEXT NEQ 0				! If current position updated,
THEN
    CH$MOVE(.(KEY+4) <0,16> + 2, KEY+4, .CONTEXT); ! Copy it back to context area

IF NOT NULLPARAMETER(9)				! If caller wants buffer size,
THEN 
    .RTNLEN = .RTNLENGTH;			! Return the length

RETURN .STATUS;					! and the status

END;

%SBTTL	'EVL$INITLOCALNODE  Obtain Local Node Address and Name'
GLOBAL ROUTINE EVL$INITLOCALNODE :NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Obtain the local nodes address and name and format in DNA form.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	EVL$GT_LOCALNODE
!
! ROUTINE VALUE:
!
!	NONE
!--

    BEGIN

    LOCAL
	DPTR,
	RETDSC : VECTOR [2],		! Return buffer descriptor
	RETBFR : VECTOR [16, BYTE];	! Return buffer

    RETDSC [0] = 16;			! Setup return descriptor
    RETDSC [1] = RETBFR;

    EVL$NETSHOW(			! Obtain the data
	NFB$C_DB_LNI,
	NFB$C_WILDCARD, 0,
	0,
	2, UPLIT (NFB$C_LNI_ADD, NFB$C_LNI_NAM),
	RETDSC);

    DPTR = EVL$GT_LOCALNODE;		! Set pointers
    DPTR = CH$MOVE (2, RETBFR, .DPTR);	! Address for two bytes
    CH$WCHAR_A(CH$RCHAR(RETBFR+4),DPTR); ! Copy the count
    DPTR = CH$MOVE (CH$RCHAR(RETBFR+4), RETBFR+6, .DPTR); ! Copy name
    EVL$GB_LOCALNODE = .DPTR - EVL$GT_LOCALNODE; ! Set count

    END;

END				!End of module
ELUDOM
