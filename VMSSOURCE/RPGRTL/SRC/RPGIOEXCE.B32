MODULE RPG$IOEXCEPTION( %TITLE 'Signal I/O errors'
		IDENT = '1-003'		! file:RPGIOEXCE.B32  EDIT:DG1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	RPGII SUPPORT
!
! ABSTRACT:
!
!	This procedure is called to process a wide variety of I/O
! exceptions.  It retrieves the file name string and signals the errors.
!
!
! ENVIRONMENT:	Vax-11 User Mode
!
! AUTHOR: Debess Grabazs, CREATION DATE: 18-Jan-1983
!
! MODIFIED BY:
!
! 1-001 - Original. DG 18-Jan-1983
! 1-002 - Reference to RPG$_INVDATTYP taken out. 
!	  Reference to RMS$_KRF changed to RMS$_REF. DG 11-Jul-1983
! 1-003 - Remove mapping of RMS$_KEY to RPG specific error. DG 10-Aug-1983
!--

!<BLF/PAGE>

%SBTTL 'Declarations'
!+
! PROLOGUE FILE:
!-

REQUIRE 'RTLIN:RPGPROLOG';			! Switches, PSECTs, macros,
						!  linkages and LIBRARYs

!+
! LINKAGES
!	NONE
!-

!+
! TABLE OF CONTENTS:
!-

FORWARD ROUTINE
	RPG$IOEXCEPTION : NOVALUE ;

!+
! INCLUDE FILES
!	NONE
!-

!+
! MACROS
!-

MACRO
	RETRIEVE = 0,0,2,0%;

!+
! EXTERNAL REFERENCES
!-

EXTERNAL ROUTINE
	LIB$STOP:NOVALUE;			! Signal fatal error

EXTERNAL LITERAL
	RPG$_ENDOF_FIL,				! End of file error
	RPG$_EXTINDOFF,				! File not open error
	RPG$_FATINTERR,				! Fatal internal error
	RPG$_FORFILE,				! for file 'filename' error
	RPG$_KEYNOTFND,				! Key not found error
	RPG$_KEYNOTMAT,				! Key doesn't match error
	RPG$_NONASCKEY,				! Out of sequence error
	RPG$_UPDNO_CUR;				! No current record error


%SBTTL 'RPG$IOEXCEPTION - Signal I/O errors'
GLOBAL ROUTINE RPG$IOEXCEPTION (
				FLAGS:		BLOCK[,BYTE],		! Error  value location indicator
				RAB:		REF BLOCK[,BYTE]	! Address of RAB
				): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This procedure is called to process a wide variety of I/O
! exceptions.  It retrieves the file name string and signals the errors.
!
! CALLING SEQUENCE:
!
!	CALL RPG$IOEXCEPTION (flags.rl.v, rab.rr.r)
!
! FORMAL PARAMETERS:
!
!	flags		- Indication of where to retrieve the condition value
!
!	rab		- Address of RAB
!
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	CONDITION,				! Longword RPG$ error number
	FAB:		REF BLOCK[,BYTE],	! Address of FAB
	NAM:		REF BLOCK[,BYTE],	! Address of NAM block-used to
						! communicate optional filename
						! related information.
	RMS_STS,				! RMS STS value
	RMS_STV,				! RMS STV value
	RSADESC:	VECTOR[2];		! Descriptor for RSA (resultant string area)

    !+
    ! Ensure that the RMS structures are valid.
    !-
    IF .RAB EQL 0 
    THEN 
	LIB$STOP (RPG$_FATINTERR);			! Error if RAB addr = 0

    FAB = .RAB[RAB$L_FAB];				! Fetch FAB address
    IF .FAB EQL 0 
    THEN 
	LIB$STOP (RPG$_FATINTERR);			! Error if FAB addr = 0

    NAM = .FAB[FAB$L_NAM];				! Fetch addr of NAM block
    IF .NAM EQL 0 
    THEN 
	LIB$STOP (RPG$_FATINTERR);			! Error if addr of NAM block = 0

    !+
    ! Fetch the address and length of the RSA as defined in the NAM block.
    ! If the length field is zero, then fetch the extended string length field.
    ! If that too has a zero length, then just use the FAB file name string
    ! name and string length.
    !-

    RSADESC[0] = .NAM[NAM$B_RSL];			! Resultant string length
    IF .RSADESC[0] EQL 0
    THEN
	BEGIN

	RSADESC[0] = .NAM[NAM$B_ESL];			! Expanded string length
	IF .RSADESC[0] EQL 0
 	THEN
	    BEGIN

	    RSADESC[0] = .FAB[FAB$B_DNS];		! Default file spec string length
	    RSADESC[1] = .FAB[FAB$L_DNA];		! Default file spec string addr

	    END
	ELSE
	    RSADESC[1] = .NAM[NAM$L_ESA];		! Expanded string addr

	END
    ELSE
        RSADESC[1] = .NAM[NAM$L_RSA];			! Resultant string addr


    !+
    ! Case on retrieve indicator.
    !-

    CASE .FLAGS[RETRIEVE] FROM RPG$K_ERR_RAB TO RPG$K_ERR_FILE_CNTXT OF
	SET

	[OUTRANGE]:					! Invalid value
	    LIB$STOP (RPG$_FATINTERR);

	[RPG$K_ERR_RAB, RPG$K_ERR_FAB]:			! RMS RAB/FAB error
	    BEGIN

	    !+
	    ! RMS error.  Pick up the appropriate STS and STV.
	    !-

	    IF .FLAGS[RETRIEVE] EQL RPG$K_ERR_RAB	! Check specifically for RAB error
	    THEN
		BEGIN

	    	!+
	    	! Here we know that we have a RAB error.
	    	!-

		IF .RAB[RAB$L_STS] EQL 0		!\If status of RAB = 0 
		THEN 					! then signal as a
		    LIB$STOP (RPG$_FATINTERR);		!/fatal internal error.
		RMS_STS = .RAB[RAB$L_STS];		! Load status code from RAB
		RMS_STV = .RAB[RAB$L_STV];		! Load status value from RAB

		END
	    ELSE
		BEGIN

	    	!+
	    	! Here we know that we have a FAB error.
	    	!-

		IF .FAB[FAB$L_STS] EQL 0 		!\If status of FAB = 0,
		THEN 					! then signal a
		    LIB$STOP (RPG$_FATINTERR);		!/fatal internal error.
		RMS_STS = .FAB[FAB$L_STS];		! Load status code from FAB
		RMS_STV = .FAB[FAB$L_STV];		! Load status value from FAB

		END;

	    !+
	    ! Map the STS value into the appropriate RPG file status.
	    !-

	    CONDITION = (SELECTONE .RMS_STS OF
      	 	SET

		[RMS$_EOF]:		RPG$_ENDOF_FIL;

		[RMS$_ISI]:		RPG$_EXTINDOFF;

		[RMS$_REF]:		RPG$_KEYNOTMAT;

		[RMS$_RNF]:		RPG$_KEYNOTFND;

		[RMS$_SEQ]:		RPG$_NONASCKEY;

		[RMS$_CUR]:		RPG$_UPDNO_CUR;

	  	[OTHERWISE]:		0;

		TES);

	    !+
	    ! Signal the error.
	    !-

	    IF .CONDITION NEQ 0
	    THEN
		LIB$STOP (.CONDITION, 0, RPG$_FORFILE, 1, RSADESC)
	    ELSE
		LIB$STOP (.RMS_STS, .RMS_STV, RPG$_FORFILE, 1, RSADESC);

	    END;

	[RPG$K_ERR_FILE_CNTXT]:

	    !+
	    ! Fetch condition value from the RPG$L_CTX_ERROR field
	    ! and signal the error.
	    !-

	    LIB$STOP (.RAB[RPG$L_CTX_ERROR], 0, RPG$_FORFILE, 1, RSADESC);
	
	TES;

    END;

END ELUDOM
