	.TITLE	OPCCRASH -- CRASH SYSTEM IMAGE
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;++
;
; FACILITY:
;
;	VAX/VMS OPERATOR COMMUNICATIONS PROCESS
;
; ABSTRACT:
;
; 	CRASH SYSTEM WITH BUG CHECK
;
; AUTHOR: R.HEINEN 12-JUN-78 (V06)
;
; MODIFIED BY:
;
;	V03-005	DWT0226		David W. Thiel	24-Jul-1984
;		Correct wait for modified page flush.
;		Improve addressing modes.
;		Remove quorum disk check when dismounting system disk.
;
;	V03-004	PRB0329		Paul Beck	11-Apr-1984  1:20
;		Don't dismount system disk if it's also the cluster 
;		quorum disk and its votes are needed to maintain the quorum.
;
;	V03-003	DWT0205		David W. Thiel	05-Apr-1984
;		Update interface for quorum adjustment.
;
;	V03-002	PRB0323		Paul Beck	11-Mar-1984  16:17
;		Add support for cluster-wide shutdown and for quorum reduction 
;		when a cluster node is permanently removed from the cluster.
;
;	V03-001	KDM0002		Kathleen D. Morse	28-Jun-1982
;		Added $PRDEF.
;
;--
	$CCBDEF				; DEFINE CCB STRUCTURE
	$DEVDEF				; DEFINE DEVICE CHARACTEROSTICS
	$IODEF				; DEFINE I/O FUNCTION CODES
	$IPLDEF				; DEFINE IPL LEVELS
	$PRDEF				; DEFINE PROCESSOR REGISTERS
	$RSNDEF				; DEFINE WAIT REASON CODES
	$RVTDEF				; DEFINE RVT STRUCTURE
	$UCBDEF				; DEFINE UCB STRUCTURE
	$VCBDEF				; DEFINE VCB STRUCTURE
	$CLUBDEF			; DEFINE CLUB STRUCTURE
	$CSBDEF				; DEFINE CSB STRUCTURE


	.SBTTL CRASH SYSTEM ROUTINE
	.PSECT	OPCOM_CRASH,NOWRT
;++
; THIS IMAGE IS RUN TO CRASH THE SYSTEM WITH A BUGCHECK
;
; FUNCTIONAL DESCRIPTION:
;
; INPUTS:
;
;	NONE
;
; OUTPUTS:
;
;	NONE
;--
	.PSECT	OPCOM_CODE,PAGE
	.ALIGN PAGE
;
; MESSAGE TO PRINT
;
CRASH_MESSAGE:	.ASCIC	/Operator requested system shutdown/
CHANNEL:	.BLKL	1		; channel number for dismount QIO's
UNLOAD:		.ASCID	'OPC$UNLOAD'	; logical name of unload flag
REBOOT:		.ASCID	'OPC$REBOOT'	; logical name of reboot flag
CLUSTER_SHUT:	.ASCID	'OPC$CLUSTER_SHUTDOWN' ; logical name of cluster shutdown
CLUSTER_REMOVE:	.ASCID	'OPC$REMOVE_NODE' ; logical name of remove node from cluster
NAMDESC:	.LONG	4		; descriptor for result string
		.ADDRESS NAMBUF
NAMBUF	:	.BLKL	1		; buffer for unload flag
;
; Define timer for 1/10 second
;
ONE_TENTH:	.LONG	-1*1000*1000*1, -1


	.ENTRY CRASH,^M<>
	$CMKRNL_S	B^10$		; GOTO KERNEL MODE
	RET


10$:	.WORD	^M<>
;
; We must cause the caches for the system disk(s) to be flushed. This is
; done by assigning a channel, marking the volume for dismount, and issuing
; a dismount QIO. We also set the unload bit in each UCB according to the
; unload flag provided from the shutdown procedure. If the system disk is a
; volume set, do this for all the volumes. The channel is assigned by hand,
; to circumvent any logical name screw-ups that could get in the way.
;
	JSB	G^IOC$FFCHAN		; get an available channel number
	BLBC	R0,80$			; if no channel, tough luck
	MOVW	R1,CHANNEL		; store channel number
	MOVB	#1,CCB$B_AMOD(R2)	; and mark in use
	MOVAQ	UNLOAD,R0		; get address of OPC$UNLOAD string
	BSBW	GET_FLAG		; get the boolean value of OPC$UNLOAD
	MOVL	R0,R10			; save the value in R10
	MOVL	G^EXE$GL_SYSUCB,R1	; get system UCB address
	MOVL	UCB$L_VCB(R1),R0	; get VCB address...
	MOVL	VCB$L_RVT(R0),R3	; to get RVT address
	MOVL	#1,R5			; assume 1 volume
	CLRL	R4			; clear loop and RVT index
	CMPL	R1,R3			; if RVT eql UCB,
	BEQL	40$			; then this is not a volume set
	MOVZBL	RVT$B_NVOLS(R3),R5	; get count of volumes
30$:	MOVL	RVT$L_UCBLST(R3)[R4],R1 ; get next UCB address
	BEQL	70$			; branch if not mounted
40$:	INSV	R10,#UCB$V_UNLOAD,#1,-	; set the unload bit accordingly
		UCB$W_STS(R1)		;
	MOVL	R1,CCB$L_UCB(R2)	; "assign" the channel
	BBSS	#DEV$V_DMT,UCB$L_DEVCHAR(R1),60$ ; mark volume for dismount
60$:	$QIOW_S	CHAN=CHANNEL,FUNC=#IO$_ACPCONTROL!IO$M_DMOUNT
70$:	AOBLSS	R5,R4,30$		; loop through RVT
;
;	SET THE REBOOT FLAG DEPENDING ON THE BOOLEAN VALUE OF OPC$REBOOT.
;
80$:	MOVAQ	REBOOT,R0		; get lognam descriptor address
	BSBW	GET_FLAG		; get the value of OPC$REEBOT
	INSV	R0,S^#EXE$V_BUGREBOOT,#1,-; set the system reboot flag accordingly
		G^EXE$GL_FLAGS		;
;
; WRITE MODIFIED PAGE LIST AND
; WAIT FOR IT TO COMPLETE
;
	MOVPSL	-(SP)			; RESUME PSL MUST BE ON STACK
	SETIPL	B^140$			; RAISE TO IPL SYNCH
	CLRL	G^SCH$GL_MFYLIM		; FORCE SWAPPER ACTIVITY
	CLRL	G^SCH$GL_MFYLOLIM	;
	MOVL	G^SCH$GL_CURPCB,R4	; PCB ADDRESS
	MOVZWL	#RSN$_MPLEMPTY,R0	; EVENT = MODIFIED PAGE LIST EMPTY
	JSB	G^SCH$RWAIT		; WAIT FOR EVENT
;
; If we're in a cluster, test for two special cases:
;	1. Cluster-wide shutdown. 
;	2. Node being removed from cluster necessitating quorum reduction.
;
100$:	TSTL	G^CLU$GL_CLUB		; Are we in a VAXcluster?
	BEQL	109$			; if EQL, no.
	MOVAQ	CLUSTER_SHUT,R0		; get lognam descriptor address
	BSBW	GET_FLAG		; get the value of OPC$CLUSTER_SHUTDOWN
	BLBS	R0,120$			; If LBS, a cluster shutdown
	MOVAQ	CLUSTER_REMOVE,R0	; get logname descriptor address
	BSBW	GET_FLAG		; get the value of OPC$CLUSTER_REMOVE
	BLBS	R0,200$			; If LBS, removing node: reduce quorum
;
; BUG CHECK SYSTEM
;
109$:	SETIPL	B^110$			; LOCK OUT INTERRUPTS
	BUG_CHECK OPERATOR,TYPE=FATAL	; CRASH THE SYSTEM
110$:	.BYTE	IPL$_POWER		; END OF CODE THAT RUNS AT ELEVATED IPL
;
;	*** CLUSTER-WIDE SHUTDOWN ***
;
120$:	SETIPL	B^140$			; Make sure code won't page at SYNCH
;
; First, notify the connection manager that this is a cluster-wide shutdown.
;
	JSB	G^CNX$SHUTDOWN		; Inform cnx man
;
; The connection manager will tell all other nodes that we are shutting down.
; Other nodes will do the same; as they do, CSB$V_SHUTDOWN gets set. When
; this flag is set for all active nodes in the cluster, we're done.
;
; Fortunately, the connection manager does all that, including the bugcheck.
; All we have to do is give it room to breathe.
;
	SETIPL	#0			; Desynchronize/allow paging
130$:	$HIBER_S			; Wait for connection manager to crash
	BRB	130$			; ...

140$:	.LONG	IPL$_SYNCH		; End of locked page(s)

;
; 	*** REDUCE QUORUM, USING THIS NODE'S VOTES ***
;
200$:	SETIPL	B^230$			; Synchronize with connection manager
	MOVL	G^CLU$GL_CLUB,R2	; Get address of CLUB
	MOVL	CLUB$L_LOCAL_CSB(R2),R1	; Get address of local CSB.
;
; We have located the CSB for this node. Use its votes to calculate
; a new value for Quorum. 
;
; New quorum calculation:	Q' = (2Q+1-V)/2
;
	MOVZWL	CSB$W_VOTES(R1),R1	; V
	MOVZWL	CLUB$W_QUORUM(R2),R0	; Q
	ASHL	#1,R0,R0		; 2Q
	INCL	R0			; 2Q+1
	SUBL2	R1,R0			; 2Q+1-V
	ASHL	#-1,R0,R1		; R1 = new quorum
;
; Tell the connection manager to set a new quorum. The connection manager
; must handle this since it is done in a coordinated fashion across the
; cluster. The quorum value is passed in R1.
;
	JSB	G^CNX$CHANGE_QUORUM	; Set new active quorum
	MOVL	R0,R3			; Save status -- failure means try again later
;
; Wait for the connection manager to effect the change (CLUB$V_ADJ_QUORUM flag)
;
	SETIPL	#0			; Desynchronize/allow paging
;
; At this point, we wait in kernel mode for a short time, then test to see
; if the connection manager has completed its work.
;
210$:	$SETIMR_S -			; Define a tick
		efn	= S^#EXE$C_SYSEFN - ; ...use system event flag
		daytim	= ONE_TENTH	  ; ...shouldn't be perceptible
	BLBC	R0,220$			; ...
	$WAITFR_S -
		efn	= S^#EXE$C_SYSEFN	; Wait a tick
	BLBC	R0,220$			; ...

	BLBC	R3,200$			; Branch if a retry is required
	BBS	#CLUB$V_ADJ_QUORUM, -	; If BS, not done yet.
		CLUB$L_FLAGS(R2),210$ 
220$:	BRW	109$			; BugCheck

230$:	.LONG	IPL$_SYNCH		; End of page locking.

;++
; GET_FLAG
;
; Functional description:
;
;	This routine will translate a given logical name, and return a
;	status code that will reflect whether the logical name was set
;	to the DCL equivalent of the boolean condtion TRUE.  To wit, if
;	the logical name translates to a string that begins with a "T",
;	"Y", or "1", then return a success status.
;
; Input:
;
;	R0 = address of the logical name descriptor
;
; Output:
;
;	None.
;
; Implicit output:
;
;	The output buffer described by the RSLBUF parameter to the $TRNLOG
;	system service will contain the (possibly truncated) translation of
;	the input logical name.  Only the first character is significant.
;
; Routine value:
;
;	The low bit of R0 will reflect the boolean value of the logical name.
;	Note that if the logical name is not defined, then the value is false.
;--

GET_FLAG:
	$TRNLOG_S	LOGNAM=(R0),-	; Translate the logical name
			RSLBUF=NAMDESC	; (only the first 4 bytes are returned)
	BLBC	R0,13$			; Exit if error
	CMPW	#SS$_NOTRAN,R0		; Did the name translate?
	BEQL	13$			; Exit if no translation
	MOVL	#1,R0			; Assume TRUE
	MOVZBL	NAMBUF,R1		; Get the first byte of the string
	CMPB	#^A/Y/,R1		; Is it a "Y"?
	BEQL	14$			;
	CMPB	#^A/y/,R1		; Is it a "y"?
	BEQL	14$			;
	CMPB	#^A/T/,R1		; Is is a "T"?
	BEQL	14$			;
	CMPB	#^A/t/,R1		; Is it a "t"?
	BEQL	14$			;
	CMPB	#^A/1/,R1		; Is it a "1"?
	BEQL	14$			;
13$:	CLRL	R0			; Indicate FALSE
14$:	RSB				; Return


	.END	CRASH

