	$BEGIN	RM0FWASET,000,RM$RMS0,<ALLOCATE AND INITIALIZE FWA>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS32
;
; Abstract:
;
;	This module allocates and initializes a file work
;	area (fwa) page.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 3-MAR-1977
;
; Modified By:
;
;	V03-019	RAS0321		Ron Schaefer		 9-Jul-1984
;		Eliminate access mode itemlist entry for $TRNLNM.
;		Initialize logical name translation mode from FAB.
;
;	V03-018	RAS0296		Ron Schaefer		18-Apr-1984
;		Initialize the secondary device name descriptor.
;
;	V03-017	RAS0298		Ron Schaefer		24-Apr-1984
;		Save/restore FWA$L_ATR_WORK when re-initializing a FWA
;		for searchlists.  Logical complement of JWT0175.
;
;	V03-016	JWT0175		Jim Teague		12-Apr-1984
;		Added extra check when deallocating FWA to see if
;		the ATR work page is still allocated for some reason.
;
;	V03-015	RAS0261		Ron Schaefer		 8-Mar-1984
;		Eliminate initialization of FWA$Q_QUOTED as it is
;		now synonymous with FWA$Q_NAME.
;
;	V03-014	RAS0234		Ron Schaefer		11-Jan-1984
;		Add support for SLBHs, revise filename string storage
;		in order to implement multi-line input sticky searchlists.
;
;	V03-013	RAS0226		Ron Schaefer		29-Dec-1983
;		Add FWA $TRNLNM mode processing back in for correct PPF
;		processing.   This was deleted by RAS0219 incorrectly.
;
;	V03-012	RAS0219		Ron Schaefer		 8-Dec-1983
;		Reorganize FWA fields and change BID values:
;		Allocate and free new dynamically allocated fields:
;		XLTBUFF1, XLTBUFF2, DN, FN, RN, SWB.
;		Init FWA$T_CDIRxBUF fields for rooted directory names.
;		Init FWA$T_CDEVICEBUF for concealed device name.
;
;	V03-011	SHZ0001		Stephen H. Zalewski	12-Sep-1983
;		Initialize a descriptor to point to the file lock name buffer in
;		the FWA.
;
;	V03-010	KBT0568		Keith B. Thompson	29-Jul-1983
;		Fwa$l_xltsiz changed to a word
;
;	V03-009	KBT0537		Keith B. Thompson	1-Jun-1983
;		Do not zero the FN, DN or RN buffers on a search
;		list operation and set up FWA$L_SLB_PTR correctly
;
;	V03-008	KBT0525		Keith B. Thompson	23-May-1983
;		Fix a bug
;
;	V03-007	KBT0507		Keith B. Thompson	3-May-1983
;		Add some new fields to the fwa, add RM$DEALLOCATE_FWA
;		and put in code to handle search list processing
;
;	V03-006	KBT0458		Keith B. Thompson	10-Jan-1983
;		Allocate fwa as a real structure
;
;	V03-005	KBT0433		Keith B. Thompson	3-Dec-1982
;		Init fwa$q_shrfil
;
;	V03-004	KBT0406		Keith B. Thompson	30-Nov-1982
;		Init fwa$q_dir and fix v3 revision histories
;
;	V03-003	KBT0399		Keith B. Thompson	5-Nov-1982
;		Forget doing the offset optimazition since the fwa is
;		beyond all reasonable size
;
;	V03-002	KBT0209		Keith B. Thompson	23-Aug-1982
;		Reorganize psects
;
;	V03-001	KRM0056		K Malik			10-Aug-1982
;		NWA$T_NODEBUF, NWA$T_QUOTEDBUF and NWA$B_UNDER_NOD
;		were moved to the FWA, so initialize them here.
;		Also, FWA$B_UNDERLINE changed to FWA$B_UNDER_DEV.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$FABDEF
	$FWADEF
	$IFBDEF
	$LNMDEF
	$PSLDEF
	$SLBDEF
	$SLBHDEF

;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RM$FWASET, Allocate and Initialize FWA
;++
;
;  RM$FWASET	-
;
;	This routine does all kinds of things.
;
;    1. If it is a generic call, i.e. there is no fwa, it calls RM$GETSPC
;	to allocate a fwa and then intializes the various fields
;
;    2.	If there is alreay a fwa but this is not a search list operation
;	it allocates and inits a second fwa and chains them together
;
;    3.	If there is a fwa and it says it's a search list operation then
;	we simply zero the sucker and continue (saving the SLBH, 
;	ATR_WORK and SWB pointers)
;
; Calling sequence:
;
;	BSBW	RM$FWASET
;
; Input Parameters:
;
;	R11	impure area pointer
;	R9	ifab address
;	R8	fab address
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;
;	R10	fwa buffer address
;	R1-R5	destroyed
;	R0	status code
;
; Implicit Outputs:
;
;	fwa buffer descriptors initialized:
;
;		FWA$Q_XLTBUF1
;		FWA$Q_XLTBUF2
;		FWA$Q_SHRFIL
;		FWA$Q_SHRFIL_LCK
;		FWA$Q_AS_SHRFIL
;		FWA$Q_DIR
;		FWA$Q_NODE
;		FWA$Q_QUOTED
;		FWA$Q_DEVICE
;		FWA$Q_DIR1 and all sub directories
;		FWA$Q_NAME
;		FWA$Q_TYPE
;		FWA$Q_VERION
;
;	FWA$T_ITMLST static fields initialized
;	FWA$L_SLBH_xLINK queue header initialized
;	FWA$B_UNDER_DEV initialized to the character '_'
;
; Completion Codes:
;
;	SUC or DME
;
; Side Effects:
;
;	Uses up tons of memory - have you looked at FWA$C_BLN lately?
;
;--

RM$FWASET::
	MOVL	IFB$L_FWA_PTR(R9),R10		; get addr of fwa if any
	BEQL	10$				; branch if none
	BBC	#FWA$V_SL_PASS,(R10),10$	; branch if not search list pass

;
; We are here for the nth time parsing search list.  Clear the fwa and reinit
; it so we can do a clean parse
;

	PUSHL	FWA$L_ATR_WORK(R10)		; save attr scratch page ptr
	PUSHL	FWA$L_SWB_PTR(R10)		; save SWB ptr
	MOVQ	FWA$L_SLBH_FLINK(R10),-(SP)	; save the SLBH ptrs
	MOVC5	#0,(SP),#0,#FWA$C_BLN,(R10)	; zero the fwa 
	MOVQ	(SP)+,FWA$L_SLBH_FLINK(R10)	; restore SLBH ptrs
	POPL	FWA$L_SWB_PTR(R10)		;  and SWB ptr
	POPL	FWA$L_ATR_WORK(R10)		;  and attr scratch page ptr
	SSB	#FWA$V_SL_PASS,(R10)		;  and sl pass flag
	BRB	INIT_FWA

10$:	MOVL	R9,R1				; copy address of ifab
	MOVZWL	#FWA$C_BLN,R2			; # of bytes
	BSBW	RM$GETSPC			; allocate FWA => R1
	BLBS	R0,20$				; success continue
	RSB					; get out on error

;
; If there is already a fwa present ($RENAME) chain them so we can deallocate
;

20$:	MOVL	R10,FWA$L_FWA_PTR(R1)		; chan the fwas
	MOVL	R1,IFB$L_FWA_PTR(R9)		; stuff the ifab with new fwa
	MOVL	R1,R10				; put fwa in right reg

	MOVAL	FWA$L_SLBH_FLINK(R10),R0	; init SLBH queue
	MOVL	R0,(R0)				; fwd link
	MOVL	(R0)+,(R0)			; back link

;
; Initialize the various fwa buffer descriptors with the size and address
; of the related buffer.
;

INIT_FWA:
	MOVB	#FWA$C_BID,FWA$B_BID(R10)	; set the id
	MOVZWL	#FWA$S_WILD,FWA$Q_DIR(R10)	; scratch dir buffer	
	MOVAB	FWA$T_WILD(R10),FWA$Q_DIR+4(R10)

;
; Don't need to set the size field. it is set in getdev_char by $getdvi
;

	MOVAB	FWA$T_SHRFILBUF(R10),FWA$Q_SHRFIL+4(R10)
	MOVAB	FWA$T_SHRFIL_LCKNAM(R10),FWA$Q_SHRFIL_LCK+4(R10)
	MOVAB	FWA$T_AS_SHRFILBUF(R10),FWA$Q_AS_SHRFIL+4(R10)

;
; Now all the parsed filename element descriptors (address only)
; (FWA$Q_NODE1-8 descriptors are initialized in RM0XPFN as they are needed)
;

	MOVAB	FWA$T_NODEBUF(R10),FWA$Q_NODE+4(R10)	; Store NODEBUF addr
	MOVAB	FWA$T_DEVICEBUF(R10),FWA$Q_DEVICE+4(R10)
	MOVAB	FWA$T_CDEVICEBUF(R10),FWA$Q_CONCEAL_DEV+4(R10)
	MOVAB	FWA$T_DIR1BUF(R10),R5		; get address of directory buffers
	MOVAB	FWA$Q_DIR1+4(R10),R4		; get address of directory descr
	MOVAB	FWA$T_CDIR1BUF(R10),R3		; get address of root directory buffers
	MOVAB	FWA$Q_CDIR1+4(R10),R2		; get address of directory descr
	CLRL	R1				; directories counter
10$:	MOVAQ	(R5),(R4)			; store buffer address in descriptor
	ADDL2	#FWA$C_DIRBUFSIZ,R5		; address of next directory buffer
	ADDL2	#8,R4				; address of next directory descr
	MOVAQ	(R3),(R2)			; store buffer address in descriptor
	ADDL2	#FWA$C_DIRBUFSIZ,R3		; address of next directory buffer
	ADDL2	#8,R2				; address of next directory buffer
	AOBLEQ	#FWA$C_MAXSUBDIR,R1,10$		; loop if more
	MOVAB	FWA$T_NAMEBUF(R10),FWA$Q_NAME+4(R10)
	MOVAB	FWA$T_TYPEBUF(R10),FWA$Q_TYPE+4(R10)
	MOVAB	FWA$T_VERBUF(R10),FWA$Q_VERSION+4(R10)

;
; Initalize the static fields of the item list for logical name services
;

	MOVL	#<LNM$_INDEX@16>+4,-		; set index item code
		FWA$T_ITM_INDEX(R10)		;  and length
	MOVL	#<LNM$_ATTRIBUTES@16>+4,-	; set attributes item code
		FWA$T_ITM_ATTR(R10)		;  and length
	MOVL	#<LNM$_STRING@16>+255,-		; set string item code
		FWA$T_ITM_STRING(R10)		;  and length
	MOVAW	FWA$W_XLTSIZ(R10),-		; set result lenght address
		FWA$T_ITM_STRING+8(R10)
	MOVL	#<LNM$_MAX_INDEX@16>+4,-	; set max index item code
		FWA$T_ITM_MAX_INDEX(R10)	;  and length

;
; Init the logical name translation access mode field.
;
	EXTZV	#FAB$V_LNM_MODE,-	; search name tables desired
		#FAB$S_LNM_MODE,-	;
		FAB$B_ACMODES(R8),R0	;
	BNEQ	40$			;
	MOVZBL	#PSL$C_USER,R0		; if none specified, default to user
40$:	MOVB	R0,FWA$B_XLTMODE(R10)	; set mode of translation


;
; Init the 'fake' SLB in the FWA
;

	MOVAL	FWA$T_SLB(R10),R0		; get the addr of the fake

	ASSUME	SLB$L_FLINK	EQ	0
	ASSUME	SLB$L_BLINK	EQ	SLB$L_FLINK+4

	MOVL	R0,(R0)				; set up flink
	MOVL	(R0)+,(R0)			; set up blink

;
; Move an underscore character to FWA$B_UNDER_DEV & FWA$B_UNDER_NOD
;

	MOVB	#^A/_/,FWA$B_UNDER_DEV(R10)
	MOVB	#^A/_/,FWA$B_UNDER_NOD(R10)
	RMSSUC
	RSB


	.SBTTL	RM$DEALLOCATE_FWA, Deallocate FWA
;++
;
;  RM$DEALLOCATE_FWA -
;
;	This routine deallocates the fwa(s) and any associated structures
;
; Calling sequence:
;
;	BSBW	RM$DEALLOCATE_FWA
;
; Input Parameters:
;
;	R11	impure area pointer
;	R9	ifab address
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Completion Codes:
;	none
;
; Side Effects:
;
;	R0-R5 destroyed
;
;--

RM$DEALLOCATE_FWA::
	MOVQ	R6,-(SP)		; save R6/R7
	MOVL	IFB$L_FWA_PTR(R9),R7	; get the addr of the fwa
	BEQL	100$			; none, then exit

;
; We have a fwa, check for SLBs
;

10$:	REMQUE	@FWA$L_SLBH_FLINK(R7),R6; get slbh list entry
	BVS	50$			; skip if no more
	BSBB	DEALLOCATE_SLBS
	MOVZBL	SLBH$B_BLN(R6),R2	; get size of slbh string
	ADDL2	#SLBH$C_BLN,R2		; add ovhd
	MOVL	R6,R4			; get into right register
	BSBW	RM$RETSPC1		; return slbh
	BRB	10$			; next!

;
;  release the SWB if present
;

50$:	MOVL	FWA$L_SWB_PTR(R7),R4	; get swb ptr
	BEQL	90$			; if there is one
	BSBW	RM$RETBLK1		; return swb

90$:	MOVL	FWA$L_ATR_WORK(R7),R4	; Is the ATR work area allocated?
	BEQL	95$			; If not, continue
	BSBW	RM$RET1PAG		; Otherwise, deallocate it

95$:	PUSHL	FWA$L_FWA_PTR(R7)	; save the address of the next
	MOVL	R7,R4			; set fwa addr is proper reg
	MOVZWL	#FWA$C_BLN,R2		; set size of fwa
	BSBW	RM$RETSPC1		; return space
	POPL	R7			; get next fwa
	BNEQ	10$			; branch if there is one
	CLRL	IFB$L_FWA_PTR(R9)	; clear the ifab pointer
100$:	MOVQ	(SP)+,R6		; restore R6/R7
	RSB				; exit

DEALLOCATE_SLBS:
	MOVL	SLBH$L_SLB_QUE(R6),R4	; get slb ptr into R4
	BEQL	20$

	ASSUME	SLB$L_FLINK	EQ	0

10$:	PUSHL	(R4)			; save link
	BSBW	RM$RETBLK1		; return slb
	POPL	R4			; retrieve link
	CMPL	R4,SLBH$L_SLB_QUE(R6)	; was that the last one?
	BNEQ	10$			; no
20$:	RSB				; exit

	.END
