MODULE showsystem (IDENT = 'V04-000',
		  ADDRESSING_MODE (EXTERNAL = GENERAL)) =

BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:  SHOW utility
!
! ABSTRACT:
!	This module contains the routines for the SHOW SYSTEM command
!
! ENVIRONMENT:
!	VAX native, user and kernel mode
!
! AUTHOR:  Gerry Smith		 CREATION DATE:  30-Jul-1982
!
! MODIFIED BY:
!
!       V03-007 AEW0002         Anne E. Warner          27-Feb-1984
!               Reorganize 'Ph.Mem' format to handle increased process
!               working set sizes.
!
!       V03-006 AEW0001         Anne E. Warner          02-Feb-1984
!               Reorganize the SHOW SYSTEM display.
!                  - Make the display fit on an 80 character display by
!                    taking out the UIC.
!                  - Add the qualifier /FULL to display all information
!                    plus add a second line with the UIC.
!                  - Add the system node name to the header.
!                  - Add the number of days to each process CPU time.
!                  - Add buffered I/O to the direct I/O for each process.
!
!	V03-005	LMP0140		L. Mark Pilant,		23-Aug-1983  23:29
!		Add support for alphanumeric UICs.
!
!	V03-004	GAS0117		Gerry Smith		12-Apr-1983
!		Instead of displaying MWAIT, display which resource
!		the process is awaiting, or MUTEX if waiting for that.
!
!	V03-003	CWH1002		CW Hobbs		25-Feb-1983
!		Use extended pids for the process ids.
!
!	V03-002	GAS0107			Gerry Smith	 8-Feb-1983
!		Collect all the qualifiers before making checks on
!		whether or not any were set.  
!
!	V03-001	GAS00103			17-Jan-1983
!		Initialize the PCB before going into the PIX loop.
!
!--


!
! Include files
!

LIBRARY 'SYS$LIBRARY:LIB';		! VAX/VMS system definitions
REQUIRE 'SRC$:SHOWDEF';			! SHOW common definitions

! Define macro to make a string descriptor:  sd_A

MACRO
    SD[A] =
           BIND %NAME('SD_',A) = $DESCRIPTOR(A)%;

!
! Define the flags for SHOW SYSTEM
!
MACRO
    sys$v_proc	= 0, 0, 1, 0%,
    sys$v_subp	= 0, 1, 1, 0%,
    sys$v_net	= 0, 2, 1, 0%,
    sys$v_batch	= 0, 3, 1, 0%,
    sys$v_full  = 0, 4, 1, 0%;

!
! Macros to define the layout of the data block to used to
! hold information on a particular process
!
MACRO
    d$l_pid	=  0, 0, 32, 0%,		! Process ID
    d$l_owner	=  4, 0, 32, 0%,		! Temp owner storage/process name length
    d$a_name	=  8, 0, 32, 0%,		! Pointer to process name string
    d$l_state	= 12, 0, 32, 0%,		! Process state
    d$l_pri	= 16, 0, 32, 0%,		! Current priority
    d$l_iocnt	= 20, 0, 32, 0%,		! Direct plus Buffered I/O count
    d$l_cputim	= 24, 0, 32, 0%,		! CPU time
    d$l_pflts	= 28, 0, 32, 0%,		! Page fault count
    d$l_pgcnt	= 32, 0, 32, 0%,		! Global page count
    d$l_sts	= 36, 0, 32, 0%,		! Status
    d$l_uic	= 40, 0, 32, 0%,		! Process UIC
    d$l_lef	= 44, 0, 32, 0%,		! Local event flag
    d$t_name	= 48, 0,  8, 0%;		! Process name

!
! The following literal depends on D$T_NAME being the last field in the
! locked data area.
!
LITERAL d$k_length = $BYTEOFFSET(d$t_name) + pcb$s_lname;

!
! Define two bits in the data area, D$V_NETWRK and D$V_BATCH, which
! correspond to PCB$V_NETWORK and PCB$V_BATCH, except that they reference
! the process status from the PCB status longword, rather than from the
! beginning of the PCB.
!
MACRO
    d$v_netwrk = 0, $BITPOSITION(pcb$v_netwrk), $FIELDWIDTH(pcb$v_netwrk), $EXTENSION(pcb$v_netwrk)%,
    d$v_batch  = 0, $BITPOSITION(pcb$v_batch),  $FIELDWIDTH(pcb$v_batch),  $EXTENSION(pcb$v_batch)%;

!
! Construct a table of process states.  THIS IS AN ORDERED TABLE.
!
LITERAL rsn_cnt = 14;
OWN
    state_table : VECTOR[14]
    INITIAL (cstring('COLPG'),
	     cstring('MUTEX'),
	     cstring('CEF'),
	     cstring('PFW'),
	     cstring('LEF'),
	     cstring('LEFO'),
	     cstring('HIB'),
	     cstring('HIBO'),
	     cstring('SUSP'),
	     cstring('SUSPO'),
	     cstring('FPG'),
	     cstring('COM'),
	     cstring('COMO'),
	     cstring('CUR')),
    rsn_table : VECTOR[rsn_cnt]
    INITIAL (cstring('RWAST'),			! AST wait
	     cstring('RWMBX'),			! Mailbox full
	     cstring('RWNPG'),			! Non-paged pool
	     cstring('RWPFF'),			! Page file full
	     cstring('RWPAG'),			! Paged pool
	     cstring('RWBRK'),			! Waiting for BROADCAST to finish
	     cstring('RWIMG'),			! Image activation lock
	     cstring('RWQUO'),			! Pooled quota
	     cstring('RWLCK'),			! Lock ID data base
	     cstring('RWSWP'),			! Swap file space
	     cstring('RWMPE'),			! Modified page list empty
	     cstring('RWMPB'),			! Modified page writer busy
	     cstring('RWSCS'),			! SCS wait
	     cstring('RWCLU'));			! Cluster translation wait

!
! This ASSUME macro makes sure that we have all the miscellaneous resource
! waits in this table.
!
$ASSUME(rsn_cnt, EQL, rsn$_max-1)


!
! Table of contents
!

FORWARD ROUTINE
    show$system : NOVALUE,
    get_data,
    print_data : NOVALUE;

FORWARD
    lock_start : VECTOR[0],
    lock_end : VECTOR[0];

EXTERNAL
    scs$ga_localsb,				! Local system block
    sys$gq_version,				! System version
    exe$gl_abstim,				! Time system has been up
    sch$gl_pcbvec : REF VECTOR,			! PCB vector 
    sch$gl_maxpix;				! Maximum process index count

EXTERNAL ROUTINE
    lib$get_vm,
    cli$present,
    show$write_line : NOVALUE;

GLOBAL ROUTINE show$system : NOVALUE =
BEGIN

!---
!
! This is the driver routine for the SHOW SYSTEM function.  The command
! qualifiers are gathered, scratch space is allocated, the data-gathering
! routine is called via $CMKRNL, and then the data is printed.
!
!---

LOCAL
    status,				! General status return
    size,				! Size of scratch area
    flags : $BBLOCK[2],			! Flags byte
    desc : VECTOR[2],			! Argument list for calls
    data : VECTOR[2];			! Address limits of scratch area

!
! Collect qualifiers.
!
flags[sys$v_full]  = cli$present(%ASCID 'FULL');
flags[sys$v_subp]  = cli$present(%ASCID 'SUBPROCESS');
flags[sys$v_net]   = cli$present(%ASCID 'NETWORK');
flags[sys$v_batch] = cli$present(%ASCID 'BATCH');
IF NOT (.flags[sys$v_subp] OR
	.flags[sys$v_net] OR 
	.flags[sys$v_batch])
THEN flags[sys$v_proc] = true;

!
! Allocate a scratch area in which to put data about the processes.
! The size of the scratch area is determined by taking the amount of 
! bytes of information per process (D$K_LENGTH), multiplying that by
! the maximum number of processes in the system, and then adding a few
! pages for slop.  The beginning and ending addresses of the area will
! be returned in DATA.
!
size = (.sch$gl_maxpix * d$k_length) + (3 * 512);

IF NOT (status = LIB$GET_VM(size,		! This many bytes
			     data))		! Put starting address here
THEN SIGNAL_STOP(show$_insvirmem, 0, .status);	! Stop if error
data[1] = .data[0] + .size - 1;			! Put ending address here

!
! Lock the first page of the scratch area, and the code that runs at elevated
! IPL, into the process working set. 
!
desc[0] = lock_start;
desc[1] = lock_end;
IF NOT (status = $LKWSET(INADR = desc))
THEN SIGNAL_STOP(.status);

desc[0] = .data[0];
desc[1] = .data[0] + d$k_length;
IF NOT (status = $LKWSET(INADR = desc))
THEN SIGNAL_STOP(.status);

!
! Call the data-gathering routine in kernel mode, passing the address 
! limits as an argument.
!
desc[0] = 2;
desc[1] = data;
desc[2] = flags;
IF NOT (status = $CMKRNL(ROUTIN = get_data,
			 ARGLST = desc))
THEN
    BEGIN
    SIGNAL(.status);
    RETURN;
    END;

!
! Format and print the data.
!
print_data(data, flags);

RETURN;
END;						! End of show$error

OWN lock_start : VECTOR[0] PSECT ($CODE$);	! Beginning of locked code
ROUTINE get_data (data, flags) =
BEGIN

!---
!
! This routine executes in KERNEL mode.  It scans all the processes in the
! system, gathering information on them.
!
! Inputs
!	DATA  -- address of the scratch area
!	FLAGS -- options longword, to tell what kind of processes are desired
!
! Outputs
!	DATA -- will contain information on the processes
!
!--

MAP
    data : REF VECTOR,
    flags : REF $BBLOCK;

REGISTER
    locked : REF $BBLOCK,			! Pointer to locked page
    scratch : REF $BBLOCK,			! Pointer to scratch area
    pcb : REF $BBLOCK,				! Pointer to PCB
    null,					! Null process PCB address
    pix;					! Process index

!
! The first page of the scratch area is locked, so that it can be accessed at
! elevated IPL.  This locked portion will be a temporary storage place for 
! information about one process at a time.  The remainder of the scratch area
! will contain information on the processes which are to be displayed.
! Set up these areas so that they can be addressed easily.
!
locked = .data[0];				! Point to locked area
scratch = .data[0] + d$k_length;		! Scratch area is just beyond
						! the locked data

null = pcb = .sch$gl_pcbvec[0];			! Save address of NULL PCB

INCR pix FROM 0 TO .sch$gl_maxpix
DO
    BEGIN
    SET_IPL(IPL$_SYNCH);			! Raise IPL
    IF .pix EQL 0 
    OR (pcb = .sch$gl_pcbvec[.pix]) NEQ .null
    THEN
	BEGIN
	locked[d$l_pid] = .pcb[pcb$l_epid];	! Use the extended pid
	locked[d$l_owner] = .pcb[pcb$l_owner];
	locked[d$l_uic] = .pcb[pcb$l_uic];
	locked[d$l_state] = .pcb[pcb$w_state];
	locked[d$l_pri] = .pcb[pcb$b_pri];
	locked[d$l_pgcnt] = .pcb[pcb$w_ppgcnt] + .pcb[pcb$w_gpgcnt];
	locked[d$l_lef] = .pcb[pcb$l_efwm];
	IF (locked[d$l_sts] = .pcb[pcb$l_sts])
	THEN
	    BEGIN
	    locked[d$l_iocnt] = .$BBLOCK[.pcb[pcb$l_phd], phd$l_diocnt] +
                                .$BBLOCK[.pcb[pcb$l_phd], phd$l_biocnt];
	    locked[d$l_pflts] = .$BBLOCK[.pcb[pcb$l_phd], phd$l_pageflts];
	    locked[d$l_cputim] = .$BBLOCK[.pcb[pcb$l_phd], phd$l_cputim];
	    END;
	CH$MOVE(pcb$s_lname, 
		pcb[pcb$t_lname],
		locked[d$t_name]);
	SET_IPL(0);

	IF .flags[sys$v_proc]
	OR (.flags[sys$v_subp] AND .locked[d$l_owner] NEQ 0)
	OR (.flags[sys$v_batch] AND .$BBLOCK[locked[d$l_sts], d$v_batch])
	OR (.flags[sys$v_net] AND .$BBLOCK[locked[d$l_sts], d$v_netwrk])
	THEN scratch = CH$MOVE(d$k_length, .locked, .scratch);
	END;

    SET_IPL(0);
    END;

RETURN 1;						! Return 
END;						! End of GET_DATA
OWN lock_end : VECTOR[0] PSECT ($CODE$);	! End of locked code

ROUTINE print_data (data,flags) : NOVALUE =
BEGIN

!---
!
! This routine prints the data contained in DATA, the scratch area
!
! Inputs
!	DATA -- scratch area, contains the process information (didn't I 
!		just say that?)
!
!       FLAGS -- contains the bits set for the qualifiers.  It is specifically
!                used in this routine to determine if the /FULL qualifier is
!                set.
!
! Outputs
!	The process data is printed.
!
!--

MAP
    data : REF VECTOR,
    flags: REF $BBLOCK;

LOCAL
    scratch : REF $BBLOCK,			! Pointer to scratch area
    status,					! General status
    time : VECTOR[2],				! Place to put system time
    desc : VECTOR[2],				! Descriptor for $FAOL
    proctim : VECTOR[4],                        ! Storage area for process time
    arglist : VECTOR[4],			! Argument list for $FAOL
    sysnodebuf : VECTOR[16,BYTE],		! 16 byte buffer to receive system node
    desc_sysnode: $BBLOCK[DSC$C_S_BLN],	        ! String descriptor pointing to
						! sysnodebuf
    trnlnmlst : $ITMLST_DECL (ITEMS = 1);	! Item list for translating system
						! node.  [vms.lib]utldef.b32

! Set up string descriptor to find the logical name system table

sd ('LNM$SYSTEM');

!
! Set up the scratch area, which contains all the data about the processes.
! The data is located beyond the locked segment.
!
scratch = .data[0] + d$k_length;			! Process data begins here.

!
! If there is no data in the scratch area, then simply return.
!
IF .scratch[d$l_pid] EQL 0
THEN RETURN;

!
! Determine the time the system has been up.  This is done using the 
! value of EXE$GL_ABSTIM, multiplying it by the right constant and 
! handing it to $ASCTIM.
!
EMUL(%REF(.exe$gl_abstim), %REF(-10000000), %REF(0), time); ! Get the uptime
desc[0] = d$k_length;				! Set up a descriptor pointing
desc[1] = .data[0];				! to the locked (scratch) area
IF NOT (status = $ASCTIM(TIMADR = time,		! Convert the uptime
    			 TIMBUF = desc,		! to ASCII, storing here,
    			 TIMLEN = desc,		! put length here,
    			 CVTFLG = 0))		! and give full date and time
THEN
    BEGIN
    SIGNAL(.status);
    RETURN;
    END;

! Initialize the descriptor for system node.

desc_sysnode = 16;		                ! Address of space containing
desc_sysnode[dsc$a_pointer] = sysnodebuf;       ! system node

! Initialize item list used to find system node

$ITMLST_INIT (ITMLST = trnlnmlst,		! Pre-declared address for item list 
                    (ITMCOD = LNM$_STRING,      ! Logical name translation string
                                                ! is to be obtained
                     BUFADR = sysnodebuf,       ! Address to put system node
                     BUFSIZ = 16,               ! Length of BUFADR
                     RETLEN = desc_sysnode)     ! Length of returned node
              );

! Get system node.  Documented in Specification for VMS Logical Name Extension

IF NOT (status = $TRNLNM 
               (ATTR   = %REF(lnm$m_case_blind), ! Letter case makes no difference 
                TABNAM = SD_LNM$SYSTEM,          ! Logical name table to be searched
                LOGNAM = $DESCRIPTOR('SYS$NODE'),! What to translate
                ACMODE = %REF(PSL$C_EXEC),       ! Access mode to use
                ITMLST = trnlnmlst               ! Predefined item list
                )
         )
    THEN desc_sysnode[dsc$w_length] = 0
    ELSE

! Strip leading underscore and trailing colons, if either, from node name

    BEGIN
      IF .sysnodebuf[0] EQL '_'
      THEN
      BEGIN
        desc_sysnode[dsc$w_length] = .desc_sysnode[dsc$w_length] - 1;
        desc_sysnode[dsc$a_pointer] = .desc_sysnode[dsc$a_pointer] + 1;
      END;
      
      INCRU I FROM 0 TO 1
        DO IF NOT CH$FAIL(CH$FIND_CH(.desc_sysnode[dsc$w_length],
                         .desc_sysnode[dsc$a_pointer], ':'))
           THEN desc_sysnode[dsc$w_length] = .desc_sysnode[dsc$w_length] - 1;
     END;
!
! Set up the $FAOL parameter list, with the addresses of the descriptors of
! the system version, the system node name, and the uptime. 
!

arglist[0] = UPLIT(4, sys$gq_version);		! Version number is 4 bytes
arglist[1] = desc_sysnode;			! System node name string desc
arglist[2] = 0;					! Zero to get current date
arglist[3] = desc;				! Uptime string desc
desc[0] = .desc[0] - 3;				! Get rid of trailing ".00"

!
! Now format and print the header lines.
!
show$write_line(%ASCID 'VAX/VMS !AS  on node !AS !%D   Uptime !AS',
		arglist,
		%ASCID '  Pid    Process Name    State  Pri      I/O       CPU       Page flts Ph.Mem',
		0);

!
! Loop thru the scratch area, formatting and outputting the data one process
! at a time.  The data block for each process is set up in as an ordered 
! sequence of longwords, in the order of the arguments to $FAOL, so that the
! data block itself can be used as the parameter list to $FAOL.  All that is
! required is some minor fixup.
!
WHILE .scratch[d$l_pid] NEQ 0			! Loop thru all processes
DO
    BEGIN
!
! Get the state.
!
    IF .scratch[d$l_state] GEQ sch$c_colpg
    AND .scratch[d$l_state] LEQ sch$c_cur
    THEN
	BEGIN
	IF .scratch[d$l_state] EQL sch$c_mwait
	AND .scratch[d$l_lef] GEQ 0
	THEN
	    BEGIN
	    IF .scratch[d$l_lef] GEQ 1
	    AND .scratch[d$l_lef] LEQ rsn_cnt
	    THEN scratch[d$l_state] = .rsn_table[.scratch[d$l_lef] - 1]
	    ELSE scratch[d$l_state] = cstring('RWUNK');
	    END
	ELSE  scratch[d$l_state] = .state_table[.scratch[d$l_state] - 1];
	END
    ELSE scratch[d$l_state] = cstring('UNK');

!
! If the owner field is not empty, then the process is a subprocess; 
! otherwise, check the status bits for a network or batch process.
!
    status = .scratch[d$l_sts];			! Save the status
    IF .scratch[d$l_owner] NEQ 0
    THEN scratch[d$l_sts] = cstring('S')
    ELSE IF .$BBLOCK[scratch[d$l_sts], d$v_netwrk]
    THEN scratch[d$l_sts] = cstring('N')
    ELSE IF .$BBLOCK[scratch[d$l_sts], d$v_batch]
    THEN scratch[d$l_sts] = cstring('B')
    ELSE scratch[d$l_sts] = cstring(' ');

!
! Convert the priority from the internal format to the external format.
!
    scratch[d$l_pri] = 31 - .scratch[d$l_pri];

!
! The process name string should be converted from the counted string
! format used in the PCB to a length/address descriptor, so that $FAO
! can print non-alphanumerics as periods.  To do this, use the OWNER
! field in the scratch area as the count, and point to the beginning
! of the saved string, instead of the count.
!
    scratch[d$l_owner] = .scratch[d$t_name];
    scratch[d$a_name] = scratch[d$t_name] + 1;

!
! Multiply the CPU time for the process by -100000, setting it up for
! conversion into ASCII form.
!
    IF .status
    THEN
	BEGIN
	EMUL(scratch[d$l_cputim], %REF(-100000), %REF(0), time);
        desc[0] = 16;
        desc[1] = proctim;                      ! Desc will contain the address
                                                ! of where the actual time is.
	IF NOT (status = $ASCTIM(TIMADR = time,		! Convert the uptime
    			 TIMBUF = desc,		! to ASCII, storing here,
    			 TIMLEN = desc,		! put length here,
    			 CVTFLG = 0))		! and give full date and time
        THEN
        BEGIN
          SIGNAL(.status);
          RETURN;
        END
        ELSE
          scratch[d$l_cputim] = desc;
	END;
!
! Now produce the line of text and output it.
!
    IF .status
    THEN
    BEGIN
      IF .flags[sys$v_full]
      THEN show$write_line(%ASCID '!8XL !15AF !5AC  !3UB!9UL!AS !9UL  !5UW  !AC!/         !%I',
           .scratch)
      ELSE show$write_line(%ASCID '!8XL !15AF !5AC  !3UB!9UL!AS !9UL  !5UW  !AC',
           .scratch)
    END
       ELSE
       BEGIN
         IF .flags[sys$v_full]
         THEN show$write_line(%ASCID '!8XL !15AF !5AC  !3UB!3(+)       --  swapped  out  --          !5UW  !AC!/         !%I',
              .scratch)
         ELSE show$write_line(%ASCID '!8XL !15AF !5AC  !3UB!3(+)       --  swapped  out  --          !5UW  !AC',
              .scratch)
       END;
!
! Adjust the scratch pointer to point to the next block of process info.
!
    scratch = .scratch + d$k_length;
    END;

RETURN;
END;						! End of PRINT_DATA

END
ELUDOM
