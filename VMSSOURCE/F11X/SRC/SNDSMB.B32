MODULE SNDSMB (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11XQP Structure Level 2
!
! ABSTRACT:
!
!	This routine constructs and sends a message to the symbiont manager
!	to cause a file to be spooled and deleted.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  5-Jun-1978  11:23
!
! MODIFIED BY:
!
!	V03-007	ACG0408		Andrew C. Goldstein,	23-Mar-1984  14:48
!		Add AST parameter so that impure storage is fully based
!
!	V03-006	CDS0005		Christian D. Saether	30-Dec-1983
!		Use L_NORM linkage and BIND_COMMON macro.
!
!	V03-005	CDS0004		Christian D. Saether	26-Jul-1983
!		Use new send job controller service.
!
!	V03-004	CDS0003		Christian D. Saether	13-May-1983
!		Reflect change to IOC$CVT_DEVNAM interface.
!
!	V03-003	CWH1002		CW Hobbs		1-Mar-1983
!		Use extended pid and owner in symbiont message
!
!	V03-002	CDS0002		Christian D. Saether	16-Dec-1982
!		Make item list generation pic.
!
!	V03-001	CDS0001		C Saether		30-Jul-1982
!		Changes for ACP to XQP.
!		No timer on waiting for job controller reply.
!
!	V02-004	ACG0245		Andrew C. Goldstein,	23-Dec-1981  21:21
!		Check error return from queue manager
!
!	V02-003	SPF0025		Steve Forgey		08-Sep-1981
!		Add new header fields to symbiont manager message.
!
!	V02-001	GWF0043		Gary W. Fowler		12-May-1981  15:20
!		Add file size option and file size to message sent to job
!		controller.
!
!	V02-000	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to [F11B.SRC]F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


MACRO

! Layout of item list for job controller.
! The first item is the queue name.
! The second item is the file identification.
! The third item is the delete file item code.
! Only fields that are filled in with non-zero values are defined.
!

	ITM_QNAMSIZ	= 0, 0, 16, 0 %,	! queue name size
	ITM_QNAMCODE	= 2, 0, 16, 0 %,	! queue name item code
	ITM_QNAMADDR	= 4, 0, 32, 0 %, 	! queue name address

	ITM_FILEINFOSIZ	= 12, 0, 16, 0 %,	! file identification size
	ITM_FILEINFOCODE = 14, 0, 16, 0 %,	! file id item code
	ITM_FILEINFOADDR = 16, 0, 32, 0 %, 	! file id address

	ITM_DELFILECODE	= 26, 0, 16, 0 % ;	! delete file item code.


LITERAL
	ITM_LENGTH	= 3*12 + 4,		! 3 item codes + stopper.
	FS_LENGTH	= 16 + 2*FID$C_LENGTH + 4 + 4 + 2
			+ 16 + 2 + FI2$S_FILENAME + FI2$S_FILENAMEXT;

GLOBAL ROUTINE SEND_SYMBIONT (HEADER, FCB) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine constructs and sends a message to the symbiont manager
!	to cause a file to be spooled and deleted.
!
!
! CALLING SEQUENCE:
!	SEND_SYMBIONT (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of file header
!	ARG2: address of file control block
!
! IMPLICIT INPUTS:
!	IO_PACKET: address of I/O packet of this request
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	message sent to symbiont manager
!
!--

BEGIN

MAP
	HEADER		: REF BBLOCK,	! file header arg
	FCB		: REF BBLOCK;	! file control block arg

BUILTIN
	LOCC;

LINKAGE
	L_IOC_CVT	= JSB (REGISTER = 0, REGISTER = 1, REGISTER = 5,
				REGISTER = 4; REGISTER = 1) :
			  NOTUSED (6, 7, 8, 9, 10, 11);

LOCAL
	ITEMLIST	: BBLOCK [ITM_LENGTH], ! item list for jbc.
	FILEINFO_STR	: VECTOR [FS_LENGTH, BYTE], ! everything the jbc wants
					! to know about the file.
	P,				! string scan pointer
	JBCSTS		: VECTOR [2],	! io status block for SNDJBC
	LENGTH,				! length of converted device name
	IDENT_AREA	: REF BBLOCK,	! address of file header ident area
	UCB		: REF BBLOCK,	! UCB of spooled device
	VCB		: REF BBLOCK;	! VCB of spooled device

BIND_COMMON;

EXTERNAL ROUTINE
	WAIT_FOR_AST	: L_NORM NOVALUE, ! wait for completion AST
	CONTINUE_THREAD	: L_NORM NOVALUE, ! completion AST to resume thread
	IOC$CVT_DEVNAM	: L_IOC_CVT ADDRESSING_MODE (GENERAL);
					! get device name of UCB

! Initialize item list to zeroes.
!

CH$FILL (0, ITM_LENGTH, ITEMLIST);

! Get UCB and VCB addresses for the spooled device.
!

UCB = .IO_PACKET[IRP$L_MEDIA];
VCB = .UCB[UCB$L_VCB];

! Point the first item at the queue name in the spooled device's VCB.
! This might be a little racy in that we could become unscheduled and
! the device set non-spooled or changed before the sndjbc service gets
! a chance to look at it, but that should be no more harmful than if
! we copied it off to local storage and it changed before the service
! executed anyway.  At worst the VCB gets deallocated and some garbage
! is picked up for the name.  BFD.
!

ITEMLIST [ITM_QNAMSIZ] = .VCB [VCB$B_QNAMECNT];
ITEMLIST [ITM_QNAMCODE] = SJC$_QUEUE;
ITEMLIST [ITM_QNAMADDR] = VCB [VCB$B_QNAMECNT] + 1;

! Fill in the file identification string.
! "Normal" callers of this service supply only the counted device
! string, the file ID and the directory ID.  The service then performs
! an access function on that file to recover other information it needs
! in a trustworthy manner.
! However, we ARE the file system, and therefore can be trusted.  Also,
! an attempt to call us back recursively with an access function just
! flat out will not work, because we'll be sitting here waiting for the
! SNDJBC service to finish.
! Therefore, we will also put the end of file block, access mask,
! and expanded file spec in this string also.  SNDJBC will look at it
! because we are calling from exec mode or better and use this info
! rather than doing an access function on the file.
!

! First get the counted device string.   Leave the trailing ":" on
! the string for now, because we'll want it a little later when
! the full file name string is built.
!

IOC$CVT_DEVNAM (15, FILEINFO_STR [1],
		.CURRENT_UCB, 0; LENGTH);
FILEINFO_STR [0] = .LENGTH;

! Pick up the file ID from the FCB instead of the file header
! because the RVN has already been normalized in the FCB, i.e.,
! APPLY_RVN has already been called.
! Also zero out the DID while we're at it.
!

CH$COPY (FID$C_LENGTH, FCB[FCB$W_FID], 0, 2*FID$C_LENGTH, FILEINFO_STR [16]);

! Next is the end of file block for the file.
!

(FILEINFO_STR [28])<0,32> = ROT (.BBLOCK[HEADER[FH2$W_RECATTR],FAT$L_EFBLK], 16);
IF .(FILEINFO_STR [28])<0,32> NEQ 0
AND .BBLOCK[HEADER[FH2$W_RECATTR],FAT$W_FFBYTE] EQL 0
THEN
    (FILEINFO_STR [28])<0,32> = .(FILEINFO_STR [28])<0,32> - 1;

! File access mask (everything allowed).
!

(FILEINFO_STR [32])<0,32> = %X'FFFFFFFF';

! Build an expanded file name string including the device, null directory
! spec, and the file name.
!

P = CH$MOVE (.FILEINFO_STR [0], FILEINFO_STR [1], FILEINFO_STR [38]);

! Now that the entire device spec has been copied, adjust the count
! on the first string to drop the trailing ":", just like RMS does
! for the DVI field in the NAM block.
!

FILEINFO_STR [0] = .FILEINFO_STR [0] - 1;

! Add in null directory spec.
!

(.P)<0,16> = '[]';
P = .P + 2;

! Now pick up the file name from the ident area in the header.
!

IDENT_AREA = .HEADER + .HEADER[FH2$B_IDOFFSET] * 2;

P = CH$MOVE (FI2$S_FILENAME, IDENT_AREA [FI2$T_FILENAME], .P);
P = CH$MOVE (FI2$S_FILENAMEXT, IDENT_AREA [FI2$T_FILENAMEXT], .P);

! Find the end of the filename.  It is delimited by the space character
! if less than the full filename size.
! Turns out that the maximum legal filename is 39 + 1 + 39 + 1 + 5, or
! 85, whereas the filename plus filenamext add up to 86.
! Scan for 85 characters from the beginning of the concatenated filename.
! Set P back to the beginning of the string we just copied and scan.
! Using P as the second output argument causes it to get the address
! of the located space character after the locc executes, which will
! either be at the space character, if found, or at the 86'th byte.
!

LOCC (%REF(' '), %REF (85), (.P - FI2$S_FILENAME - FI2$S_FILENAMEXT) ; ,P);

! We skipped filling in the size field at byte 36 in this string so
! get it now.  The filename string started at byte 38.

(FILEINFO_STR [36])<0,16> = .P - FILEINFO_STR [38];

! Set up the item list entry for the file information string.
!

ITEMLIST [ITM_FILEINFOSIZ] = .P - FILEINFO_STR [0];
ITEMLIST [ITM_FILEINFOCODE] = SJC$_FILE_IDENTIFICATION;
ITEMLIST [ITM_FILEINFOADDR] = FILEINFO_STR [0];

! Finally the item code to delete the file after printing.
!

ITEMLIST [ITM_DELFILECODE] = SJC$_DELETE_FILE;

! The status from the service is always written to the iosb and the
! completion ast is always delivered, regardless of status, so we
! do not need to separately check the status of the service call.
!

$SNDJBC (EFN = EFN,
	FUNC = SJC$_ENTER_FILE,
	IOSB = JBCSTS,
	ASTADR = CONTINUE_THREAD,
	ASTPRM = .BASE,
	ITMLST = ITEMLIST);

! The completion ast is always delivered, so we must always wait for it.
!

WAIT_FOR_AST ();

! A full longword of status is returned from sndjbc.
!

IF NOT .JBCSTS [0]
THEN
    BEGIN
    CLEANUP_FLAGS[CLF_DELFILE] = 1;
    USER_STATUS[1] = .JBCSTS [0];
    ERR_EXIT (SS$_NOTPRINTED);
    END;

END;					! end of routine SEND_SYMBIONT

END
ELUDOM
