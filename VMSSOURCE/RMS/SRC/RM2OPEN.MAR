	$BEGIN	RM2OPEN,000,RM$RMS2,<RELATIVE SPECIFIC OPEN>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility: RMS32
;
; Abstract:
;	this module provides the organization-specific
;	open processing for relative files.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 10-OCT-1977
;
; Modified By:
;
;	V03-007	RAS0284		Ron Schaefer		30-Mar-1984
;		Fix STV value on error paths for RMS$_RPL and RMS$_WPL errors.
;
;	V03-006	DAS0001		David Solomon		25-Mar-1984
;		Fix broken branches to RM$COPRTN.
;
;	V03-005	RAS0265		Ron Schaefer		 9-Mar-1984
;		Bump IFB$W_AVLCL to count the BDB & buffer we allocate.
;
;	V03-004	KBT0475		Keith B. Thompson	26-Jan-1983
;		Remove check for ppf open.
;
;	V03-003	KBT0463		Keith B. Thompson	13-Jan-1983
;		Allocate a bdb and buffer to read in prologue
;
;	V03-002	KBT0130		Keith B. Thompson	20-Aug-1982
;		Reorganize psect
;
;	V03-001	KBT0112		Keith B. Thompson	6-Aug-1982
;		Remove ref to upd_sifb_eof
;
;	V02-013	CDS0002		C Saether		 5-Feb-1982
;		Back out V02-012.  GBC is now a record attribute.
;
;	V02-012	CDS0001		C Saether		 3-Jan-1982
;		Return GBC field from prologue to FAB.
;		Fix comment fields.
;
;	V02-011	REFORMAT	Keith B. Thompson	29-Jul-1980
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$BDBDEF
	$FABDEF
	$IFBDEF
	$PLGDEF
	$RMSDEF

;
; Equated Symbols:
;

;
; Own Storage:
;


	.SBTTL	RM$OPEN2 - PROCESS RELATIVE FILE PROLOG

;++
;
;  RM$OPEN2	-
;
;	this routine performs the file open functions that are
;	specific to the relative file organization, including:
;
;	1  -  verify inter-process record locking not specified
;	      since not yet implemented
;	2  -  reading in the prolog and setting the ebk,dvbn,
;	      and mrn ifab fields based upon its contents.
;	3  -  setting the mrn fab field.
;
; Calling sequence:
;
;	entered via case branch from RMS$OPEN. returns by
;	jumping to RM$COPRTN.
;
; Input Parameters:
;
;	R11	impure area address
;	R9	ifab address
;	R8	fab address
;
; Implicit Inputs:
;
;	the contents of the ifab
;
; Output Parameters:
;
;	R0		status code
;	R10		ifab addr
;	R1-R5,AP	destroyed
;
; Implicit Outputs:
;
;	various fields in the ifab and fab are initialized.
;
; Completion Codes:
;
;	standard rms, in particular suc,plg,shr,rpl, and ver.
;
; Side Effects:
;
;	may wait quite some time for prolog to become
;	free initially. leaves prolog locked.
;
;--

RM$OPEN2::
	TSTB	IFB$B_BKS(R9)		; make sure bks non-zero
	BEQL	ERRIFA			; if yes, is error
	BITB	#FAB$C_REL,-		; really relative?
		IFB$B_RFMORG(R9)
	BEQL	EXIT			; aha - a bogus seq file posing
					; as relative for sharing
;
; if bio access, then prolog read is not required.
;

	BBS	#IFB$V_BIO,-		; leave successfully
		IFB$B_FAC(R9),SEXIT

;
; read and process prolog
;

	MOVL	R9,R10			; set ifab addr
	MOVZWL	#512,R5			; ask for one block to read prologue
	BSBW	RM$ALDBUF		; allocate bdb and buffer
	BLBC	R0,EXIT			; get out on error
	INCW	IFB$W_AVLCL(R9)		; count BDB & buffer
	$CACHE	VBN=#1,-		; read the prolog
		SIZE=#512,-		; (R5=buffer addr)
		FLAGS=LOCK,-
		ERR=ERRRPL
	BSBW	RM$CHKSUM		; validate its checksum
	BLBC	R0,EXIT			; get out on error
	CMPW	PLG$W_VER_NO(R5),-	; supported version?
		#PLG$C_VER_NO
	BNEQ	ERRPLV			; branch if not

;
; set up ifab values
;

	MOVL	PLG$L_EOF(R5),-		; copy eof vbn
		IFB$L_EBK(R9)
	MOVZWL	PLG$W_DVBN(R5),-	; copy vbn of first data bucket
		IFB$L_DVBN(R9)
	MOVL	PLG$L_MRN(R5),-		; copy max. record number
		IFB$L_MRN(R9)
	CLRW	IFB$W_FFB(R9)		; set blk offset=0

;
; set mrn, gbc in fab
;

SET:	MOVL	IFB$L_MRN(R9),-		; set mrn
		FAB$L_MRN(R8)
SEXIT:	RMSSUC				; show success
EXIT:	JMP	RM$COPRTN		; & rejoin common open code
					; note: the bdb will
					; be released there


;
; handle errors
;

ERRIFA:
	MOVL	#RMS$_BKS,FAB$L_STV(R8)	; set secondary error info
	RMSERR	IFA			; illegal file attributes
	BRB	ERRXIT

ERRORG:
	RMSERR	ORG			; trying to open a ppf
	BRB	ERRXIT

ERRRPL:
	TSTL	FAB$L_STV(R8)		; do we have an stv?
	BNEQ	10$			; okay use it
	BISL3	#^X1000,R0,FAB$L_STV(R8); else set the RMS error there
10$:	RMSERR	RPL			; prolog read error

;
; (stv has ss error code)
;

ERRXIT:	JMP	RM$COPRTN		; go clean up


ERRPLV:
	RMSERR	PLV			; unsupported prolog version
	BRB	ERRXIT

	.END
