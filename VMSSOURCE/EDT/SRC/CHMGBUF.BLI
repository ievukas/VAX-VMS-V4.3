%TITLE 'EDT$CHMGBUF - look for a buffer name'
MODULE EDT$CHMGBUF (				! Look for a buffer name
		IDENT = 'V04-000'			! File: CHMGBUF.BLI Edit: JBS1006
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module scans the command buffer for a buffer name.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: Unknown
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 04-Feb-1981.  This module was created by
!	extracting the routine EDT$$GET_BUF  from the module CHANGE.BLI.
! 1-002	- Regularize headers.  JBS 02-Mar-1981
! 1-003	- Use new message codes.  JBS 04-Aug-1981
! 1-004 - Check first to see if there are more characters on command line.
!	    STS 21-Jun-1982
! 1-005	- Change alphabetic test.  JBS 19-Jul-1982
! 1-006	- Add conditional for VT220 support.  JBS 11-Feb-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$GET_BUF : NOVALUE;	! Look for a buffer specification for the cut, paste, and append commands

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

LIBRARY 'EDTSRC:SUPPORTS';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$GET_BUF  - look for a buffer name'

GLOBAL ROUTINE EDT$$GET_BUF 			! Look for a buffer name
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine looks for a buffer spec for use by cut paste and append.
!	If an '=' is seen, an explicit buffer spec is there, otherwise, use
!	the paste buffer.  The routine places the address of the buffer in
!	EDT$$A_ALT_BUF , with a zero indicating failure.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$A_CMD_END
!	EDT$$A_CMD_BUF
!	EDT$$A_PST_BUF
!	EDT$$A_CUR_BUF
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_ALT_BUF
!	EDT$$A_CMD_BUF
!
! ROUTINE VALUE:
!
!	1 = buffer spec seen, 0 = no buffer spec seen
!
! SIDE EFFECTS:
!
!	Uses EDT$$FND_BUF  to create the buffer if necessary.  If it fails,
!	gives an error message.
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$MSG_BELL : NOVALUE,		! Output a message to the terminal with a warning bell
	EDT$$CNV_UPC,				! Convert string to upper case
	EDT$$FND_BUF,				! Search for a text buffer
	EDT$$RD_CURLN;				! Get the current line

    EXTERNAL
	EDT$$A_CMD_END,				! End of command pointer
	EDT$$A_CMD_BUF,				! Command string pointer
	EDT$$A_ALT_BUF : REF TBCB_BLOCK,	! Alternate buffer used for cut/paste.
	EDT$$A_PST_BUF : REF TBCB_BLOCK,	! The paste buffer tbcb
	EDT$$A_CUR_BUF : REF TBCB_BLOCK 	! The current buffer tbcb

%IF SUPPORT_VT220
%THEN
	,
	EDT$$B_CHAR_INFO : BLOCKVECTOR [256, 1, BYTE]	! Information about characters
%FI

    ;

    MESSAGES ((INVBUFNAM, INSMEM));

    LOCAL
	SAVE_TBCB,
	NEW,
	NAME_LEN,
	NAME_START,
	CHAR;

    NAME_LEN = 0;
    CHAR = CH$RCHAR (.EDT$$A_CMD_BUF);

    IF (.CHAR EQL %C'=') AND (.EDT$$A_CMD_BUF LSSU .EDT$$A_CMD_END)
    THEN
	BEGIN
	EDT$$A_CMD_BUF = CH$PLUS (.EDT$$A_CMD_BUF, 1);
	NAME_START = .EDT$$A_CMD_BUF;

	WHILE CH$PTR_LSS (.EDT$$A_CMD_BUF, .EDT$$A_CMD_END) DO
	    BEGIN
	    CHAR = CH$RCHAR (.EDT$$A_CMD_BUF);

%IF SUPPORT_VT220
%THEN

	    IF ((.EDT$$B_CHAR_INFO [.CHAR, 0, 0, 2, 0] EQL 0)	! Not alphabetic
		AND (.EDT$$B_CHAR_INFO [.CHAR, 0, 0, 8, 0] NEQ %X'F0')	! Not numeric
		AND (.CHAR NEQ %C'_')		! Not an underscore
		)
	    THEN
		EXITLOOP;

%ELSE

	    IF (((.CHAR LSS %C'0') OR 		!
		((.CHAR GTR %C'9') AND (.CHAR LSS %C'A')) OR 	!
		((.CHAR GTR %C'Z') AND (.CHAR LSS %C'a')) OR 	!
		(.CHAR GTR %C'z')) AND (.CHAR NEQ %C'_'))
	    THEN
		EXITLOOP;

%FI

	    NAME_LEN = .NAME_LEN + 1;
	    EDT$$A_CMD_BUF = CH$PLUS (.EDT$$A_CMD_BUF, 1);
	    END;

	CHAR = CH$RCHAR (.NAME_START);

%IF SUPPORT_VT220
%THEN

	IF ((.NAME_LEN EQL 0) OR (.EDT$$B_CHAR_INFO [.CHAR, 0, 0, 2, 0] EQL 0))
	THEN
%ELSE

	    IF ((.NAME_LEN EQL 0) OR 		!
		(.CHAR LSS %C'A') OR ((.CHAR GTR %C'Z') AND (.CHAR LSS %C'a')) OR (.CHAR GTR %C'z'))
	    THEN
%FI

		BEGIN
		EDT$$MSG_BELL (EDT$_INVBUFNAM);
		RETURN;
		END;

	EDT$$CNV_UPC (.NAME_START, .NAME_LEN);
	SAVE_TBCB = .EDT$$A_CUR_BUF;

	IF EDT$$FND_BUF (.NAME_START, .NAME_LEN)
	THEN
	    EDT$$A_ALT_BUF = .EDT$$A_CUR_BUF
	ELSE
	    EDT$$MSG_BELL (EDT$_INSMEM);

	EDT$$A_CUR_BUF = .SAVE_TBCB;
	EDT$$RD_CURLN ();
	END
    ELSE
	EDT$$A_ALT_BUF = .EDT$$A_PST_BUF;

    END;					! of routine EDT$$GET_BUF

!<BLF/PAGE>

END						! of module EDT$CHMGBUF

ELUDOM
