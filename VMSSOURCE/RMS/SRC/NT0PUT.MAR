	$BEGIN	NT0PUT,000,NF$NETWORK,<NETWORK PUT/UPDATE/DELETE RECORD>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module communicates with the file access listener at the remote
;	node to perform the put, udpate, and delete functions.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	09-DEC-1977
;
; Modified By:
;
;	V03-005	RAS0315		Ron Schaefer	22-Jun-1984
;		Eliminate tiny data psect.
;
;	V03-004	JAK0145		J A Krycka	12-APR-1984
;		Track changes in DAP message building algorithm.
;
;	V03-003	JAK0126		J A Krycka	08-SEP-1983
;		Return relative record number in RAB$L_BKT field on sequential
;		$PUT operations to a relative file (per RMS documentation).
;
;	V03-002	JAK0122		J A Krycka	22-AUG-1983
;		On $PUT failure, verify that FAL has sent a Status message
;		before sending a Continue Transfer message to unlock FAL.
;		Move NT$RESUME_FAL routine to NT0DISCON module and perform
;		other miscellaneous cleanup edits.
;
;	V03-001	KRM0092		Karl Malik	18-Mar-1983
;		Add support for STMLF and STMCR formats.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$BDBDEF				; Define BDB symbols
	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPCNFDEF			; Define DAP Configuration message
	$DAPCTLDEF			; Define DAP Control message
	$DAPDATDEF			; Define DAP Data message
	$FABDEF				; Define File Access Block symbols
	$IFBDEF				; Define IFAB symbols
	$IRBDEF				; Define IRAB symbols
	$NWADEF				; Define Network Work Area symbols
	$RABDEF				; Define Record Access Block symbols
	$RMSDEF				; Define RMS completion codes

;
; Macros:
;
;	None
;
; Equated Symbols:
;

LF=10					; Line feed
VT=11					; Vertical tab
FF=12					; Form feed
DLE=16					; Data link error  (Control-P)
DC1=17					; Device control 1 (Control-Q)
DC2=18					; Device control 2 (Control-R)
DC3=19					; Device control 3 (Control-S)
DC4=20					; Device control 4 (Control-T)
CTRLZ=26				; Control-Z
ESC=27					; Escape

CRLF=^X0A0D				; ASCII codes for CR and LF
LF=^X0A					; ASCII code for LF
CR=^X0D					; ASCII code for CR

	ASSUME	DAP$Q_DCODE_FLG EQ 0
	ASSUME	NWA$Q_FLG EQ 0

;
; Own Storage:
;


;
; The following bitmask represents the DAP terminator set for stream (STM)
; format files where each bit position corresponds to an ASCII character code
; for a single-character terminator. Note that the default terminator, CRLF,
; is not expressed in this mask.
;

NT$STM_MASK::				; DAP stream terminator bitmask
	.LONG	<<1@LF> + <1@FF> + <1@VT> + <1@CTRLZ> + <1@ESC> + -
		<1@DLE> + <1@DC1> + <1@DC2> + <1@DC3> + <1@DC4>>


	.SBTTL	NT$PUT - PERFORM NETWORK PUT FUNCTION

;++
; NT$PUT - engages in a DAP dialogue with the remote FAL to put (store) the
;	specified record of a sequential, relative, or indexed file. This
;	routine supports both DAP file transfer and record transfer modes.
;
; Calling Sequence:
;
;	BSBW	NT$PUT
;
; Input Parameters:
;
;	R4	BDB address
;	R8	RAB address
;	R9	IRAB address
;	R10	IFAB address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	BDB buffer contents
;	BDB$L_ADDR
;	BDB$W_NUMB
;	DAP$V_DAPCRC
;	DAP$V_GEQ_V56
;	DAP$L_CRC_RSLT
;	IFB$L_NWA_PTR
;	IFB$V_SQO
;	IRB$B_MODE
;	NWA$V_FTM_INIT
;	NWA$V_FTM_RETRV
;	NWA$W_DAPBUFSIZ
;	NWA$B_RFM
;	NWA$B_ORG
;	NWA$Q_BLD
;	RAB$B_KSZ
;	RAB$B_RAC
;	RAB$L_ROP
;	RAB$L_KBF
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R3	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	BDB$B_FLGS
;	DAP$L_CRC_RSLT
;	IRB$L_IOS and IRB$L_IOS4 zeroed
;	NWA$V_FTM_INIT cleared
;	NWA$V_FTM_STORE
;	RAB$L_BKT
;	RAB$W_RFA
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$PUT::				; Entry point
	$TSTPT	NTPUT			;
	PUSHR	#^M<R4,R5,R6,R7>	; Save registers
	MOVL	R4,R6			; Copy BDB address
	MOVL	IFB$L_NWA_PTR(R10),R7	; Get address of NWA (and DAP)
	BSBW	NT$CHK_RAC		; Validate record access mode
	BLBC	R0,10$			; Branch on failure
	BBS	#NWA$V_FTM_RETRV,(R7),20$;$PUT after $GET not allowed in FTM

	ASSUME	RAB$C_SEQ EQ 0
	ASSUME	RAB$C_KEY EQ 1
	ASSUME	RAB$C_RFA EQ 2

	$CASEB	SELECTOR=RAB$B_RAC(R8)-	; Dispatch on access mode:
		DISPL=<-		;
		    PUT_SEQ-		;  Sequential record access
		    PUT_KEY-		;  Access by key value
		>			;  Access by record file address
	BRW	ERRRAC			; Branch aid
10$:	BRW	EXIT			; Branch aid
20$:	BRW	ERRFTM			; Branch aid

;+
; Sequential access has been requested.
;
; Note:	In record transfer mode a Control message must be sent for each record
;	retrieved, whereas, in file transfer mode only an initial Control
;	message is required.
;-

PUT_SEQ:				;
	BBS	#IFB$V_SQO,(R10),10$	; Branch if in file transfer mode
	MOVZBL	#DAP$K_SEQ_ACC,R1	; Set RAC for DAP message
	BRB	PUT_SEQ_COMMON		; Join common code
10$:	BBCC	#NWA$V_FTM_INIT,(R7),-	; Branch if no Control message required
		PUT_SEND_DAT		;  and turn off single-shot flag
	$SETBIT	#NWA$V_FTM_STORE,(R7)	; Set file transfer mode storage flag
	MOVZBL	#DAP$K_SEQ_FILE,R1	; Set RAC for DAP message

PUT_SEQ_COMMON:				; Common code for put operation
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_PUT_WRITE,(R5)+	; Store CTLFUNC field
	MOVB	#<<DAP$M_RAC>!-		; Store CTLMENU field
		  <DAP$M_ROP>!-		;
		0>,(R5)+		;
	MOVB	R1,(R5)+		; Store RAC field

;+
; Common code to build rest of the Control message and send it to partner.
;-

PUT_SEND_CTL_COMMON:			; Used for both put and update
	BSBW	NT$MAP_ROP		; Store ROP as an extensible field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Control message to FAL
	BLBS	R0,PUT_SEND_DAT		; Branch on success
	BRW	EXIT			; Branch aid

;+
; Build and send DAP Data message to partner containing user record.
;-

PUT_SEND_DAT:				;
	BBS	#IFB$V_SQO,(R10),10$	; Branch if in file transfer mode
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
10$:	MOVL	#DAP$K_DAT_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVL	NWA$Q_BLD+4(R7),R4	; Get address of build message buffer
	CLRB	(R5)+			; Zero RECNUM field
	MOVL	R5,R3			; Save next byte pointer
	MOVZWL	BDB$W_NUMB(R6),R2	; Get record size
	SUBL3	R4,R5,R1		; Compute # DAP overhead bytes in msg
	ADDL3	R2,R1,R5		; Compute projected size of DAP message
	CMPW	R5,NWA$W_DAPBUFSIZ(R7)	; Make sure message will fit in buffer
	BGTRU	40$			; Branch if record is too big
	MOVQ	R2,NWA$Q_SAVE_DESC(R7)	; Save descriptor of user record
	PUSHR	#^M<R5>			; Save register
	MOVC3	R2,@BDB$L_ADDR(R6),(R3)	; Move record into DAP message
	POPR	#^M<R5>			; Restore register

	ASSUME	FAB$C_UDF EQ 0
	ASSUME	FAB$C_FIX EQ 1
	ASSUME	FAB$C_VAR EQ 2
	ASSUME	FAB$C_VFC EQ 3
	ASSUME	FAB$C_STM EQ 4
	ASSUME	FAB$C_STMLF EQ 5
	ASSUME	FAB$C_STMCR EQ 6

	$CASEB	SELECTOR=NWA$B_RFM(R7)-	; Dispatch on record format:
		BASE=#FAB$C_STM-	;
		DISPL=<-		;
		    20$-		;  STM
		    60$-		;  STMLF
		    70$-		;  STMCR
		>			;  UDF, FIX, VAR, VFC
	BRB	100$			; Bypass stream specific processing

;
; The remote file is in stream format--add a CRLF to the user record if it
; does not end in a stream form effector character.
;

20$:	TSTW	BDB$W_NUMB(R6)		; Branch if this is a null record
	BEQL	30$			;
	MOVZBL	-1(R3),R0		; Get record terminator character
	CMPB	R0,#31			; Branch if out-of-range for a stream
	BGTRU	30$			;  terminator character
	BBS	R0,W^NT$STM_MASK,60$	; Branch on stream terminator
30$:	ADDL2	#2,R5			; Increase record length for CRLF
	CMPW	R5,NWA$W_DAPBUFSIZ(R7)	; Make sure message will fit in buffer
40$:	BLEQU	50$			; Branch if record will fit
	BRW	ERRRSZ			; Branch (record is too big)
50$:	MOVW	#CRLF,(R3)+		; Add CRLF to terminate record
	ADDL2	#2,NWA$Q_SAVE_DESC(R7)	; Update record length in descriptor
	BRB	100$			; Branch to common code

;
; The remote file is in STMLF or STMCR format--add a CR or LF to the user
; record if it does not end in a proper terminator.
;

60$:	MOVZBL	#LF,R0			; Setup terminator to add
	BRB	80$			; 
70$:	MOVZBL	#CR,R0			; Setup terminator to add
80$:	TSTW	BDB$W_NUMB(R6)		; Is it a null record?
	BEQL	90$			; Branch if yes
	CMPB	R0,-1(R3)		; Is the proper terminator present?
	BEQL	100$			; Branch if yes
90$:	INCL	R5			; Increase record length
	CMPW	R5,NWA$W_DAPBUFSIZ(R7)	; Will message fit in buffer?
	BGTRU	ERRRSZ			; Branch if record is too big
	MOVB	R0,(R3)+		; Add the terminator
	INCL	NWA$Q_SAVE_DESC(R7)	; Update record length in descriptor

;
; End of record conversion.
;

100$:	MOVL	R3,R5			; Save next byte pointer
	BSBW	NT$BUILD_TAIL		; Finish building message
	BBC	#DAP$V_DAPCRC,-		; Branch if partner does not support
		DAP$Q_SYSCAP(R7),110$	;  file level CRC checksum
	MOVQ	NWA$Q_SAVE_DESC(R7),R2	; Put descriptor of record in <R2,R3>
	CRC	W^NT$CRC_TABLE,-	; Compute CRC (destroying R0-R3)
		DAP$L_CRC_RSLT(R7),-	;  using result of previous CRC
		R2,(R3)			;  calculation as initial CRC value
	MOVL	R0,DAP$L_CRC_RSLT(R7)	; Store CRC resultant value
110$:	BSBW	NT$TRANSMIT		; Send record
	BLBC	R0,CHKSTS		; Branch on failure
	BICB2	#<1@BDB$V_DRT>,BDB$B_FLGS(R6) ; Say not dirty anymore

;+
; Receive DAP Status message from partner if we are in record transfer mode
; and return record file address of the first block accessed.
;-

PUT_RECV_STS:				;
	BBS	#IFB$V_SQO,(R10),EXIT	; Branch if in file transfer mode
	BBC	#DAP$V_GEQ_V56,(R7),EXIT; Branch if partner uses DAP before V5.6
; *****	$SETBIT	#DAP$K_STS_MSG,DAP$L_MSG_MASK(R7); Implied for receive
	BSBW	NT$RECEIVE		; Obtain status of put/update request
	BLBC	R0,CHKSTS		; Branch on failure
	BSBW	NT$RET_RFA		; Return RFA value to user RAB
	BSBW	NT$RET_RRN		; Return relative record number in BKT
					;  field (if appropriate)
	BRB	EXIT			; Branch aid

;+
; Access by relative record number or by key value has been requested.
; This operation must be performed in DAP record transfer mode.
;-

PUT_KEY:				;
	BBS	#IFB$V_SQO,(R10),ERRFTM	; Disallow file transfer mode
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_PUT_WRITE,(R5)+	; Store CTLFUNC field
	CMPB	NWA$B_ORG(R7),#NWA$K_IDX; Branch if IDX organization
	BEQL	10$			;
	MOVB	#<<DAP$M_RAC>!-		; Store CTLMENU field
		  <DAP$M_KEY>!-		;  (must send relative record number
		  <DAP$M_ROP>!-		;  in key field)
		0>,(R5)+		;
	MOVB	#DAP$K_KEY_ACC,(R5)+	; Store RAC field
	BSBW	NT$OBTAIN_KEY		; Store key value
	BRW	PUT_SEND_CTL_COMMON	; Join common code
10$:	MOVB	#<<DAP$M_RAC>!-		; Store CTLMENU field
		  <DAP$M_ROP>!-		;  (key string is implicit in data)
		0>,(R5)+		;
	MOVB	#DAP$K_KEY_ACC,(R5)+	; Store RAC field
	BRW	PUT_SEND_CTL_COMMON	; Join common code

;+
; Common exit code for $PUT and $UPDATE.
;-

CHKSTS:	BBS	#NWA$V_UPDATE,(R7),EXIT	; Branch if this is an update operation
	CMPB	DAP$B_TYPE(R7),-	; Branch if failure was not the result
		#DAP$K_STS_MSG		;  of Status message returned by FAL
	BNEQ	EXIT			;
	PUSHR	#^M<R0>			; Save primary error code
	BSBW	NT$RESUME_FAL		; Tell FAL what to do on put error via
					;  interrupt Continue Transfer message
	POPR	#^M<R0>			; Restore primary error code
	BRB	EXIT			;
ERRRSZ:	RMSERR	RSZ			; Invalid record size
	BRB	EXIT			;	
ERRRAC:	RMSERR	RAC			; Invalid record access value
	BRB	EXIT			;
ERRFTM:	RMSERR	FTM			; File transfer mode error
EXIT:	$CLRBIT	#NWA$V_UPDATE,(R7)	; Initialize flag for next time thru
	CLRQ	IRB$L_IOS(R9)		; Zero I/O status block
					;  (pertinent status info is already
					;  in R0 and RAB$L_STV)
	POPR	#^M<R4,R5,R6,R7>	; Restore registers
	RSB				; Exit with RMS code in R0

	.SBTTL	NT$UPDATE - PERFORM NETWORK UPDATE FUNCTION

;++
; NT$UPDATE - engages in a DAP dialogue with the remote FAL to update (modify)
;	the specified record of a sequential, relative, or indexed file.
;
; Calling Sequence:
;
;	BSBW	NT$UPDATE
;
; Input Parameters:
;
;	R4	BDB address
;	R8	RAB address
;	R9	IRAB address
;	R10	IFAB address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	BDB buffer contents
;	BDB$L_ADDR
;	BDB$W_NUMB
;	DAP$V_DAPCRC
;	DAP$V_GEQ_V56
;	DAP$L_CRC_RSLT
;	IFB$L_NWA_PTR
;	IFB$V_SQO
;	NWA$B_RFM
;	NWA$W_DAPBUFSIZ
;	NWA$Q_BLD
;	RAB$B_RAC
;	RAB$L_ROP
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	BDB$B_FLGS
;	DAP$L_CRC_RSLT
;	IRB$L_IOS and IRB$L_IOS4 zeroed
;	RAB$W_RFA
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$UPDATE::				; Entry point
	$TSTPT	NTUPDATE		;
	PUSHR	#^M<R4,R5,R6,R7>	; Save registers
	BBS	#IFB$V_SQO,(R10),ERRFTM	; Network update function not allowed
					;  if file transfer mode selected
	MOVL	R4,R6			; Copy BDB address
	MOVL	IFB$L_NWA_PTR(R10),R7	; Get address of NWA (and DAP)
	$SETBIT	#NWA$V_UPDATE,(R7)	; Denote this is an update operation

;+
; Build and send DAP Control message to partner.
;-

UPD_SEND_CTL:				;
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_UPDATE,(R5)+	; Store CTLFUNC field
	MOVB	#<<DAP$M_RAC>!-		; Store CTLMENU field
		  <DAP$M_ROP>!-		;
		0>,(R5)+		;
	MOVB	#DAP$K_SEQ_ACC,(R5)+	; Store RAC field--assume SEQ access
	CMPB	RAB$B_RAC(R5),#RAB$C_KEY; Keyed access specified?
	BNEQ	10$			; Branch if not
	MOVB	#DAP$K_KEY_ACC,-1(R5)	; Change RAC field
10$:	BRW	PUT_SEND_CTL_COMMON	; Join common code

	.SBTTL	NT$DELETE - PERFORM NETWORK DELETE FUNCTION

;++
; NT$DELETE - engages in a DAP dialogue with the remote FAL to delete the
;	specified record of a relative or indexed file.
;
; Calling Sequence:
;
;	BSBW	NT$DELETE
;
; Input Parameters:
;
;	R8	RAB address
;	R9	IRAB address
;	R10	IFAB address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	DAP$V_GEQ_V56
;	IFB$L_NWA_PTR
;	IFB$V_SQO
;	NWA$B_ORG
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R3	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$DELETE::				; Entry point
	$TSTPT	NTDELETE		;
	PUSHR	#^M<R4,R5,R6,R7>	; Save registers
	BBS	#IFB$V_SQO,(R10),ERRFTM2; Network delete function not allowed
					;  if file transfer mode selected
	MOVL	R4,R6			; Copy BDB address
	MOVL	IFB$L_NWA_PTR(R10),R7	; Get address of NWA (and DAP)
	CMPB	NWA$B_ORG(R7),#NWA$K_SEQ; Screen out SEQ file organization
	BEQL	ERRIOP			; Branch on error

;+
; Build and send DAP Control message to partner.
;-

DEL_SEND_CTL:				;
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_DELETE,(R5)+	; Store CTLFUNC field
	MOVB	#DAP$M_RAC,(R5)+	; Store CTLMENU field
	MOVB	#DAP$K_SEQ_ACC,(R5)+	; Store RAC field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Control message to FAL
	BLBC	R0,EXIT2		; Branch on failure

;+
; Receive DAP Status message from partner.
;-

DEL_RECV_STS:				;
	BBC	#DAP$V_GEQ_V56,(R7),EXIT2;Branch if partner uses DAP before V5.6
; *****	$SETBIT	#DAP$K_STS_MSG,DAP$L_MSG_MASK(R7); Implied for receive
	BSBW	NT$RECEIVE		; Obtain status of delete request

;+
; Exit code for $DELETE.
;-

EXIT2:	POPR	#^M<R4,R5,R6,R7>	; Restore registers
	BRW	NT$EXRMS		; Exit with RMS code in R0
ERRFTM2:RMSERR	FTM			; File transfer mode error
	BRB	EXIT2			;
ERRIOP:	RMSERR	IOP			; Illegal I/O operation
	BRB	EXIT2			;

	.END				; End of module
