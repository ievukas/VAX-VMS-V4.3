! 
! ****************************************************************************
! *									    *
! *  Copyright (c) 1982, 1983		                                    *
! *  by DIGITAL Equipment Corporation, Maynard, Mass.			    *
! * 									    *
! *  This software is furnished under a license and may be used and  copied  *
! *  only  in  accordance  with  the  terms  of  such  license and with the  *
! *  inclusion of the above copyright notice.  This software or  any  other  *
! *  copies  thereof may not be provided or otherwise made available to any  *
! *  other person.  No title to and ownership of  the  software  is  hereby  *
! *  transferred.							    *
! * 									    *
! *  The information in this software is subject to change  without  notice  *
! *  and  should  not  be  construed  as  a commitment by DIGITAL Equipment  *
! *  Corporation.							    *
! * 									    *
! *  DIGITAL assumes no responsibility for the use or  reliability  of  its  *
! *  software on equipment which is not supplied by DIGITAL.		    *
! *									    *
! ****************************************************************************
! *********************************************************************************************************************************
!  Created 15-SEP-1984 22:55:15  by  VAX-11 SDL V2.0       Source: 15-SEP-1984 22:50:36 _$255$DUA28:[RMS.SRC]RMSFILSTR.SDL;1       
! *********************************************************************************************************************************
 
 
!*** MODULE $PLGDEF ***
literal PLG$C_VER_NO = 1;               !  current prolog version number 
literal PLG$C_VER_IDX = 2;              !  new plg for indexed files 
literal PLG$C_VER_3 = 3;                !  new plg for compression, space reclamation (plg 3) 
literal PLG$K_BLN = 120;
literal PLG$C_BLN = 120;
literal PLG$S_PLGDEF = 120;
macro PLG$B_DBKTSIZ = 11,0,8,0 %;       !  data bucket size 
macro PLG$R_FLAGS_OVERLAY = 16,0,8,0 %;
macro PLG$B_FLAGS = 16,0,8,0 %;         !  flag bits 
macro PLG$R_FLAGS_BITS = 16,0,8,0 %;
macro PLG$V_NOEXTEND = 16,0,1,0 %;      !  no extend allowed (rel) 
macro PLG$B_AVBN = 102,0,8,0 %;         !  vbn of first area descriptor 
macro PLG$B_AMAX = 103,0,8,0 %;         !  maximum number of areas 
macro PLG$W_DVBN = 104,0,16,0 %;        !  first data bucket vbn 
macro PLG$L_MRN = 108,0,32,0 %;         !  maximum record number (rel) 
macro PLG$L_EOF = 112,0,32,0 %;         !  eof vbn (rel) 
macro PLG$W_VER_NO = 116,0,16,0 %;      !  version number 
macro PLG$W_GBC = 118,0,16,0 %;         !  default global buffer count 
 
!*** MODULE $DLCDEF ***
! 
! 
!   relative file deletion control byte bit definitions
! 
literal DLC$M_DELETED = 4;
literal DLC$M_REC = 8;
literal DLC$S_DLCDEF = 1;
macro DLC$R_DLCDEF_BITS = 0,0,8,0 %;
macro DLC$V_DELETED = 0,2,1,0 %;        !  record deleted 
macro DLC$V_REC = 0,3,1,0 %;            !  record exists (but may have been deleted) 
 
!*** MODULE $BKTDEF ***
! 
!  index bucket definition
! 
!  this is the bucket format for RMS-11/RMS-32 index files.
! 
literal BKT$K_OVERHDSZ = 14;            !  length of bucket overhead 
literal BKT$C_OVERHDSZ = 14;            !  length of bucket overhead 
literal BKT$M_LASTBKT = 1;
literal BKT$M_ROOTBKT = 2;
literal BKT$M_PTR_SZ = 24;
literal BKT$C_ENDOVHD = 4;              !  end of bucket overhead 
literal BKT$C_DATBKTOVH = 2;            !  end of bucket overhead for data buckets 
literal BKT$C_DUPBKTOVH = 4;            !  additional end of data bucket overhead 
!   when duplicates are allowed (LCB pointer
literal BKT$C_MAXBKTSIZ = 63;           !  maximum bucket size
literal BKT$S_BKTDEF = 14;
macro BKT$B_CHECKCHAR = 0,0,8,0 %;      !  bucket check character 
macro BKT$R_AREANO_OVERLAY = 1,0,8,0 %;
macro BKT$B_AREANO = 1,0,8,0 %;         !  area number form which bucket was allocated 
macro BKT$B_INDEXNO = 1,0,8,0 %;        !  index to which this bucket belongs (plg 3) 
macro BKT$W_ADRSAMPLE = 2,0,16,0 %;     !  address sample - low 16 bits of first vbn in bucket 
macro BKT$R_FREESPACE_OVERLAY = 4,0,16,0 %;
macro BKT$W_FREESPACE = 4,0,16,0 %;     !  displacement in bucket of first free byte 
macro BKT$W_KEYFRESPC = 4,0,16,0 %;     !  pointer to key's free space (plg 3) 
macro BKT$R_NXTRECID_OVERLAY = 6,0,16,0 %;
macro BKT$W_NXTRECID = 6,0,16,0 %;      !  next available word record id (plg 3) 
macro BKT$R_NXTRECID_FIELDS = 6,0,16,0 %;
macro BKT$B_NXTRECID = 6,0,8,0 %;       !  next available record id 
macro BKT$B_LSTRECID = 7,0,8,0 %;       !  last id in range 
macro BKT$L_NXTBKT = 8,0,32,0 %;        !  vbn of next bucket 
macro BKT$B_LEVEL = 12,0,8,0 %;         !  bucket level number 
macro BKT$R_BKTCB_OVERLAY = 13,0,8,0 %;
macro BKT$B_BKTCB = 13,0,8,0 %;         !  bucket control bits 
macro BKT$R_BKTCB_BITS = 13,0,8,0 %;
macro BKT$V_LASTBKT = 13,0,1,0 %;       !  last bucket in horizontal chain 
macro BKT$V_ROOTBKT = 13,1,1,0 %;       !  root bucket 
macro BKT$V_PTR_SZ = 13,3,2,0 %;
literal BKT$S_PTR_SZ = 2;               !  size of vbn pointers in this bucket 
 
!*** MODULE $IRCDEF ***
! 
!  index record definition
! 
!  this is the definition of RMS-11/RMS-32 index file record formats
! 
literal IRC$M_PTRSZ = 3;
literal IRC$M_RECORDCB = 252;
literal IRC$M_DELETED = 4;
literal IRC$M_NOPTRSZ = 16;
literal IRC$M_FIRST_KEY = 128;
literal IRC$M_RRV = 8;
literal IRC$M_NODUPCNT = 16;
literal IRC$M_RU_DELETE = 32;
literal IRC$M_RU_UPDATE = 64;
literal IRC$C_IDXPTRBAS = 2;            !  used to determine size of pointer in index 
literal IRC$C_IDXOVHDSZ = 1;            !  includes record control byte 
! 
!  data bucket record
! 
literal IRC$S_IRCDEF = 1;
macro IRC$B_CONTROL = 0,0,8,0 %;        !  record control byte 
macro IRC$R_CONTROL_BITS0 = 0,0,8,0 %;
macro IRC$V_PTRSZ = 0,0,2,0 %;
literal IRC$S_PTRSZ = 2;                !  size of pointer 
macro IRC$V_RECORDCB = 0,2,6,0 %;
literal IRC$S_RECORDCB = 6;             !  record control bits 
! 
!  record control bits used only in primary data record and SIDR array element
!  control bytes
! 
macro IRC$R_CONTROL_BITS1 = 0,0,8,0 %;
macro IRC$V_DELETED = 0,2,1,0 %;        !  record is deleted 
macro IRC$V_NOPTRSZ = 0,4,1,0 %;        !  no RRV
macro IRC$V_FIRST_KEY = 0,7,1,0 %;
! 
!  record control bits used only in primary data record control bytes
! 
macro IRC$R_CONTROL_BITS2 = 0,0,8,0 %;
macro IRC$V_RRV = 0,3,1,0 %;            !  rrv record 
! 
!  record control bits used only in prologue 2 SIDR record control bytes
! 
macro IRC$R_CONTROL_BITS3 = 0,0,8,0 %;
macro IRC$V_NODUPCNT = 0,4,1,0 %;       !  DUP_CNT field absent
! 
!  record control bits used only in prologue 3 RRV, UDR and SIDR record control
!  bytes of RU journalled files. (RU_UPDATE is set only in UDR record control
!  bytes)
! 
macro IRC$R_CONTROL_BITS4 = 0,0,8,0 %;
macro IRC$V_RU_DELETE = 0,5,1,0 %;      !  record is RU deleted
macro IRC$V_RU_UPDATE = 0,6,1,0 %;      !  record is RU updated
! 
!  record control bits reserved for RMS-11 use only (these may not be re-defined
!  except for prologue 3 records)
! 
!  Bit number 5
!  Bit number 6
! 
! 
!  index bucket record
! 
macro IRC$R_CONTROL_FIELDS4 = 0,0,8,0 %;
macro IRC$T_BUCKETPTR = 1,0,0,0 %;      !  bucket pointer (not referenced in the code, 
!   just present for consistency)
literal IRC$S_IRCDEF1 = 3;
macro IRC$B_ID = 1,0,8,0 %;             !  record id 
macro IRC$B_RRV_ID = 2,0,8,0 %;         !  rrv's id -- always in the same place 
! 
!  prologue 3 data bucket record
! 
literal IRC$C_DATSZFLD = 2;             !  size of size field in variable length records 
literal IRC$C_DATPTRBAS = 3;            !  used to determine size of RRV in data buckets
literal IRC$C_DCNTSZFLD = 4;            !  size of duplicate count field in Plg 2 SIDRs
literal IRC$C_DATOVHDSZ = 2;            !  includes the record control byte, and the id 
literal IRC$C_FIXOVHDSZ = 7;            !  the record overhead for fixed record 
literal IRC$C_VAROVHDSZ = 9;            !  record overhead for variable records 
literal IRC$C_RRVOVHDSZ = 7;            !  size of RRV
! 
!  prologue 3 constants
! 
literal IRC$C_DATPTRBS3 = 4;            !  used to determine size of RRV in data buckets 
literal IRC$C_DATOVHSZ3 = 3;            !  record control byte, and id 
literal IRC$C_FIXOVHSZ3 = 9;            !  record overhead for fixed length records
literal IRC$C_VAROVHSZ3 = 11;           !  record overhead for variable length records
literal IRC$C_RRVOVHSZ3 = 9;            !  size of RRV
literal IRC$C_SDROVHSZ3 = 2;            !  record overhead for SIDRs
literal IRC$C_KEYCMPOVH = 2;            !  key compression overhead 
literal IRC$C_DATCMPOVH = 3;            !  data compression overhead 
literal IRC$S_IRCDEF2 = 5;
macro IRC$W_ID = 1,0,16,0 %;            !  record id 
macro IRC$W_RRV_ID = 3,0,16,0 %;        !  rrv's id -- always in the same place 
! 
!  constants
! 
 
!*** MODULE $KEYDEF ***
! 
!  definitions for the key descriptors in the prologue
! 
!  these definitions are associated w/ the plg and area definitions
! 
literal KEY$M_DUPKEYS = 1;
literal KEY$M_CHGKEYS = 2;
literal KEY$M_NULKEYS = 4;
literal KEY$M_IDX_COMPR = 8;
literal KEY$M_INITIDX = 16;
literal KEY$M_KEY_COMPR = 64;
literal KEY$M_REC_COMPR = 128;
literal KEY$C_MAX_DAT = 10;             !  (PLG3) Maximum size of a non-compressed data 
!   record
literal KEY$C_MAX_PRIMARY = 6;          !  (PLG3) Maximum size of a non-compressed 
!   primary key
literal KEY$C_MAX_INDEX = 6;            !  (PLG3) Maximum size of a non-compressed 
!   index and SIDR key
literal KEY$C_STRING = 0;               !  string data type 
literal KEY$C_SGNWORD = 1;              !  signed binary word 
literal KEY$C_UNSGNWORD = 2;            !  unsigned binary word 
literal KEY$C_SGNLONG = 3;              !  signed binary long word 
literal KEY$C_UNSGNLONG = 4;            !  unsigned binary long word 
literal KEY$C_PACKED = 5;               !  packed decimal
literal KEY$C_SGNQUAD = 6;              !  signed binary quadword
literal KEY$C_UNSGNQUAD = 7;            !  unsigned binary quadword
literal KEY$C_MAX_DATA = 7;             !  maximum data type value allowed 
literal KEY$K_BLN = 96;                 !  length of key descriptor in the prologue (plg 3) 
literal KEY$C_BLN = 96;                 !  length of key descriptor in the prologue (plg 3) 
literal KEY$C_SPARE = 6;                !  these are spare words in key block (plg 3) 
literal KEY$S_KEYDEF = 96;
macro KEY$L_IDXFL = 0,0,32,0 %;         !  vbn for next key descriptor 
macro KEY$W_NOFF = 4,0,16,0 %;          !  offset to next key descriptor 
macro KEY$B_IANUM = 6,0,8,0 %;          !  index area number 
macro KEY$B_LANUM = 7,0,8,0 %;          !  level 1 area number 
macro KEY$B_DANUM = 8,0,8,0 %;          !  data area number 
macro KEY$B_ROOTLEV = 9,0,8,0 %;        !  root level 
macro KEY$B_IDXBKTSZ = 10,0,8,0 %;      !  index bucket size 
macro KEY$B_DATBKTSZ = 11,0,8,0 %;      !  data bucket size 
macro KEY$L_ROOTVBN = 12,0,32,0 %;      !  root bucket pointer 
macro KEY$R_FLAGS_OVERLAY = 16,0,8,0 %;
macro KEY$B_FLAGS = 16,0,8,0 %;         !  flag bits 
macro KEY$R_FLAGS_BITS0 = 16,0,8,0 %;
macro KEY$V_DUPKEYS = 16,0,1,0 %;       !  duplicate key values allowed 
macro KEY$V_CHGKEYS = 16,1,1,0 %;       !  key value may change on $update operation 
macro KEY$V_NULKEYS = 16,2,1,0 %;       !  null key character enabled 
macro KEY$V_IDX_COMPR = 16,3,1,0 %;     !  index is compressed 
macro KEY$V_INITIDX = 16,4,1,0 %;       !  index must be initialized 
macro KEY$V_KEY_COMPR = 16,6,1,0 %;     !  (PLG3) key is compressed in data record 
macro KEY$R_FLAGS_BITS1 = 16,0,8,0 %;
macro KEY$V_REC_COMPR = 16,7,1,0 %;     !  (PLG3) Data record is compressed 
macro KEY$B_DATATYPE = 17,0,8,0 %;      !  data type for key 
macro KEY$B_SEGMENTS = 18,0,8,0 %;      !  number of segments in key 
macro KEY$B_NULLCHAR = 19,0,8,0 %;      !  "null" character 
macro KEY$B_KEYSZ = 20,0,8,0 %;         !  total key size 
macro KEY$B_KEYREF = 21,0,8,0 %;        !  key of reference 
macro KEY$W_MINRECSZ = 22,0,16,0 %;     !  minimum record length 
macro KEY$W_IDXFILL = 24,0,16,0 %;      !  index fill quantity 
macro KEY$W_DATFILL = 26,0,16,0 %;      !  data fill quantity 
macro KEY$R_POSITION_OVERLAY = 28,0,16,0 %;
macro KEY$W_POSITION = 28,0,16,0 %;     !  key seg position 
macro KEY$W_POSITION0 = 28,0,16,0 %;    !  another name for position 0 
macro KEY$W_POSITION1 = 30,0,16,0 %;    !  position 1 
macro KEY$W_POSITION2 = 32,0,16,0 %;    !  position 2 
macro KEY$W_POSITION3 = 34,0,16,0 %;    !  position 3 
macro KEY$W_POSITION4 = 36,0,16,0 %;    !  position 4 
macro KEY$W_POSITION5 = 38,0,16,0 %;
macro KEY$W_POSITION6 = 40,0,16,0 %;
macro KEY$W_POSITION7 = 42,0,16,0 %;
macro KEY$R_SIZE_OVERLAY = 44,0,8,0 %;
macro KEY$B_SIZE = 44,0,8,0 %;          !  key segment size 
macro KEY$B_SIZE0 = 44,0,8,0 %;         !  another name for size 
macro KEY$B_SIZE1 = 45,0,8,0 %;         !  size 1 
macro KEY$B_SIZE2 = 46,0,8,0 %;
macro KEY$B_SIZE3 = 47,0,8,0 %;
macro KEY$B_SIZE4 = 48,0,8,0 %;
macro KEY$B_SIZE5 = 49,0,8,0 %;
macro KEY$B_SIZE6 = 50,0,8,0 %;
macro KEY$B_SIZE7 = 51,0,8,0 %;
macro KEY$T_KEYNAM = 52,0,0,0 %;
literal KEY$S_KEYNAM = 32;              !  key name 
macro KEY$L_LDVBN = 84,0,32,0 %;        !  first data bucket 
macro KEY$R_TYPE_OVERLAY = 88,0,8,0 %;
macro KEY$B_TYPE = 88,0,8,0 %;          !  key segment datatype (plg 3) 
macro KEY$B_TYPE0 = 88,0,8,0 %;         !  another name for first datatype (plg 3) 
macro KEY$B_TYPE1 = 89,0,8,0 %;         !  (plg 3) 
macro KEY$B_TYPE2 = 90,0,8,0 %;         !  (plg 3) 
macro KEY$B_TYPE3 = 91,0,8,0 %;         !  (plg 3) 
macro KEY$B_TYPE4 = 92,0,8,0 %;         !  (plg 3) 
macro KEY$B_TYPE5 = 93,0,8,0 %;         !  (plg 3) 
macro KEY$B_TYPE6 = 94,0,8,0 %;         !  (plg 3) 
macro KEY$B_TYPE7 = 95,0,8,0 %;         !  (plg 3) 
 
!*** MODULE $AREADEF ***
! 
! 
!  definitions for the area descriptor in the prologue
! 
! 
literal AREA$C_CYL = 1;                 !  cylinded alignment 
literal AREA$C_LBN = 2;                 !  logical block alignment 
literal AREA$C_VBN = 3;                 !  virtual block alignment 
literal AREA$C_RFI = 4;                 !  allocate close to related file by fid 
literal AREA$M_HARD = 1;
literal AREA$M_ONC = 2;
literal AREA$M_CBT = 32;
literal AREA$M_CTG = 128;
literal AREA$K_BLN = 64;                !  length of area descriptor in the prologue 
literal AREA$C_BLN = 64;                !  length of area descriptor in the prologue 
literal AREA$S_AREADEF = 64;
macro AREA$B_FLAGS = 1,0,8,0 %;         !  not currently used 
macro AREA$B_AREAID = 2,0,8,0 %;        !  area id 
macro AREA$B_ARBKTSZ = 3,0,8,0 %;       !  bucket size for area 
macro AREA$W_VOLUME = 4,0,16,0 %;       !  relative volume number 
macro AREA$B_ALN = 6,0,8,0 %;           !  extend allocation alignment 
macro AREA$R_AOP_OVERLAY = 7,0,8,0 %;
macro AREA$B_AOP = 7,0,8,0 %;           !  alignment options 
macro AREA$R_AOP_BITS = 7,0,8,0 %;
macro AREA$V_HARD = 7,0,1,0 %;          !  absolute alignment or nothing 
macro AREA$V_ONC = 7,1,1,0 %;           !  locate on cylinder 
macro AREA$V_CBT = 7,5,1,0 %;           !  contiguous best try 
macro AREA$V_CTG = 7,7,1,0 %;           !  contiguous 
macro AREA$L_AVAIL = 8,0,32,0 %;        !  available (returned) buckets 
macro AREA$L_CVBN = 12,0,32,0 %;        !  start vbn for current extent 
macro AREA$L_CNBLK = 16,0,32,0 %;       !  number of blocks in current extent 
macro AREA$L_USED = 20,0,32,0 %;        !  number of blocks used 
macro AREA$L_NXTVBN = 24,0,32,0 %;      !  next vbn to use 
macro AREA$L_NXT = 28,0,32,0 %;         !  start vbn for next extent 
macro AREA$L_NXBLK = 32,0,32,0 %;       !  number of blocks in next extent 
macro AREA$W_DEQ = 36,0,16,0 %;         !  default extend quantity 
macro AREA$L_LOC = 40,0,32,0 %;         !  start lbn on volume 
macro AREA$W_RFI = 44,0,0,0 %;
literal AREA$S_RFI = 6;                 !  related file id 
macro AREA$L_TOTAL_ALLOC = 50,0,32,0 %; !  total block allocation
macro AREA$W_CHECK = 62,0,16,0 %;       !  checksum 
 
!*** MODULE $RJRDEF ***
! 
! 
!  definitions for the journaling records in RMS journals
! 	for performance reasons, the BKT and BLK forms
! 	should be an integral number of quadwords.
! 
! 
literal RJR$C_VER1 = 1;                 !  journal version 1
literal RJR$C_VER2 = 2;                 !  journal version 2
literal RJR$C_MAXVER = 2;               !  version limit
literal RJR$C_NOENT = 0;                !  null type
literal RJR$C_MAPPING = 1;              !  mapping entry
literal RJR$C_FILENAME = 1;             !  mapping entry synonym
literal RJR$C_RECORD = 2;               !  record entry
literal RJR$C_BLOCK = 3;                !  block IO entry (at, etc...)
literal RJR$C_BUCKET = 4;               !  ISAM bucket
literal RJR$C_EXTEND = 5;               !  extend (AT, AI)
literal RJR$C_AT_RECORD = 6;            !  audit trail record
literal RJR$C_MAXTYP = 6;               !  entry-type limit
literal RJR$C_SEQ = 0;                  !  sequential file org
literal RJR$C_REL = 1;                  !  relative file org
literal RJR$C_IDX = 2;                  !  indexed file org
literal RJR$C_HSH = 3;                  !  hashed file org
literal RJR$C_MAXORG = 3;               !  org limit
literal RJR$_NOOP = 0;                  !  null operation
literal RJR$_BUCKET = 1;                !  bucket-level I/O
literal RJR$_CLOSE = 2;                 !  close
literal RJR$_CONNECT = 3;               !  connect
literal RJR$_CREATE = 4;                !  create
literal RJR$_DELETE = 5;                !  delete
literal RJR$_DISCONNECT = 6;            !  disconnect
literal RJR$_DISPLAY = 7;               !  display
literal RJR$_ENTER = 8;                 !  enter
literal RJR$_ERASE = 9;                 !  erase
literal RJR$_EXTEND = 10;               !  extend
literal RJR$_FIND = 11;                 !  find
literal RJR$_FLUSH = 12;                !  flush
literal RJR$_FREE = 13;                 !  free
literal RJR$_GET = 14;                  !  get
literal RJR$_MODIFY = 15;               !  modify
literal RJR$_NXTVOL = 16;               !  next volume
literal RJR$_OPEN = 17;                 !  open
literal RJR$_PARSE = 18;                !  parse
literal RJR$_PUT = 19;                  !  put
literal RJR$_READ = 20;                 !  block I/O read
literal RJR$_RELEASE = 21;              !  release
literal RJR$_REMOVE = 22;               !  remove
literal RJR$_RENAME = 23;               !  rename
literal RJR$_REWIND = 24;               !  rewind
literal RJR$_SEARCH = 25;               !  search
literal RJR$_SPACE = 26;                !  block I/O space
literal RJR$_TRUNCATE = 27;             !  truncate
literal RJR$_UPDATE = 28;               !  update
literal RJR$_WAIT = 29;                 !  wait
literal RJR$_WRITE = 30;                !  block I/O write
literal RJR$_TPT = 31;                  !  truncate on PUT
literal RJR$_MAXOPER = 31;              !  oper limit
literal RJR$C_NOJNL = 0;                !  null jnl type
literal RJR$C_RMS_AI = 1;               !  after-image journal
literal RJR$C_RMS_BI = 2;               !  before-image journal
literal RJR$C_RMS_RU = 3;               !  recovery unit
literal RJR$C_MAXJNL = 3;               !  jnl type limit
literal RJR$K_HDRLEN = 56;              !  common header len
literal RJR$C_HDRLEN = 56;              !  common header len
literal RJR$K_C_FIBLEN = 64;
literal RJR$C_C_FIBLEN = 64;
literal RJR$K_RECATRLEN = 32;
literal RJR$C_RECATRLEN = 32;
literal RJR$K_FILNAMLEN = 452;
literal RJR$C_FILNAMLEN = 452;
literal RJR$K_RECLEN = 72;              !  record entry len
literal RJR$C_RECLEN = 72;              !  record entry len
literal RJR$K_BLKLEN = 68;              !  block i/o entry len
literal RJR$C_BLKLEN = 68;              !  block i/o entry len
literal RJR$K_EXTLEN = 122;             !  extend entry len
literal RJR$C_EXTLEN = 122;             !  extend entry len
literal RJR$K_BKTLEN = 68;              !  bucket entry len
literal RJR$C_BKTLEN = 68;              !  bucket entry len
literal RJR$K_AT_RECLEN = 76;
literal RJR$C_AT_RECLEN = 76;
literal RJR$K_BLN = 452;                !  length of RJR descriptor in the prologue 
literal RJR$C_BLN = 452;                !  length of RJR descriptor in the prologue 
literal RJR$S_RJRDEF = 452;
macro RJR$R_FLAGS_OVERLAY = 0,0,16,0 %; !  control flags
macro RJR$W_FLAGS = 0,0,16,0 %;
macro RJR$R_FLAGS_BITS = 0,0,16,0 %;
macro RJR$B_VERSION = 2,0,8,0 %;        !  RMS journal version #
macro RJR$B_ENTRY_TYPE = 3,0,8,0 %;     !  journal entry type
macro RJR$B_ORG = 4,0,8,0 %;            !  file organization
macro RJR$B_OPER = 5,0,8,0 %;           !  RMS operation id
macro RJR$B_JNL_TYPE = 6,0,8,0 %;       !  journaling type
macro RJR$T_JNLID = 8,0,0,0 %;
literal RJR$S_JNLID = 28;               ! 
macro RJR$T_VOLNAM = 8,0,0,0 %;
literal RJR$S_VOLNAM = 12;              !  volume name
macro RJR$T_FID = 20,0,0,0 %;
literal RJR$S_FID = 6;                  !  file id
macro RJR$Q_ID_DATE = 28,0,0,0 %;
literal RJR$S_ID_DATE = 8;              !  time
macro RJR$L_AT_STS = 36,0,32,0 %;       !  status of operation
macro RJR$L_AT_STV = 40,0,32,0 %;       !  secondary status
macro RJR$L_AT_CTX = 44,0,32,0 %;       !  user FAB/RAB CTX field
macro RJR$R_ENTRY_OVERLAY = 56,0,0,0 %;
macro RJR$R_FILENAME_ENTRY = 56,0,0,0 %;
literal RJR$S_FILENAME_ENTRY = 396;
macro RJR$R_ATR_FLAGS_OVERLAY = 60,0,32,0 %;
macro RJR$L_ATR_FLAGS = 60,0,32,0 %;
macro RJR$R_ATR_FLAGS_BITS = 60,0,8,0 %;
macro RJR$V_ATR_UCHAR = 60,0,1,0 %;     !  UCHAR attribute present
macro RJR$V_ATR_PROT = 60,1,1,0 %;      !  PROT attribute present
macro RJR$V_ATR_UIC = 60,2,1,0 %;       !  UIC attribute present
macro RJR$V_ATR_REC = 60,3,1,0 %;       !  RECORD attributes present
macro RJR$V_ATR_EXPIRE = 60,4,1,0 %;    !  EXPIRATION present
macro RJR$L_UIC = 64,0,32,0 %;          !  owner UIC
macro RJR$L_PROT = 68,0,32,0 %;         !  prot mask
macro RJR$L_ALLOC = 72,0,32,0 %;        !  initial allocation (audit)
macro RJR$L_UCHAR = 76,0,32,0 %;        !  user characteristics (create)
macro RJR$Q_EXPIRE = 80,0,0,0 %;
literal RJR$S_EXPIRE = 8;               !  expiration date (create)
macro RJR$B_FNS = 88,0,8,0 %;           !  size of file name
macro RJR$B_FAC = 90,0,8,0 %;           !  file access (audit)
macro RJR$B_SHR = 91,0,8,0 %;           !  sharing allowed (audit)
macro RJR$W_DID = 92,0,0,0 %;
literal RJR$S_DID = 6;                  !  directory ID (create, volume recovery)
macro RJR$T_C_FIB = 100,0,0,0 %;
literal RJR$S_C_FIB = 64;               !  FIB (create)
macro RJR$T_REC_ATTR = 164,0,0,0 %;
literal RJR$S_REC_ATTR = 32;            !  record attributes (create)
macro RJR$T_FILENAME = 196,0,0,0 %;
literal RJR$S_FILENAME = 256;           !  full filename
macro RJR$R_RECORD_ENTRY = 56,0,0,0 %;
literal RJR$S_RECORD_ENTRY = 16;        !  record entry
macro RJR$L_CHKSUM = 60,0,32,0 %;       !  checksum of old record
macro RJR$R_RFA_OVERLAY = 64,0,0,0 %;
macro RJR$W_RFA = 64,0,0,0 %;
literal RJR$S_RFA = 6;                  !  RFA of record
macro RJR$R_RFA_FIELDS = 64,0,0,0 %;
macro RJR$L_RFA0 = 64,0,32,0 %;         !  alternate RFA def
macro RJR$W_RFA4 = 68,0,16,0 %;
macro RJR$L_RRN = 64,0,32,0 %;          !  relative record number
macro RJR$W_RSIZE = 70,0,16,0 %;        !  record size
macro RJR$T_RIMAGE = 72,0,0,0 %;        !  record date
! 
!  The block entry is common to both AT and block IO journaling.
! 
macro RJR$R_BLOCK_ENTRY = 56,0,0,0 %;
literal RJR$S_BLOCK_ENTRY = 12;         !  block entry
macro RJR$L_BLOCK_VBN = 60,0,32,0 %;    !  vbn of block
macro RJR$L_BLOCK_SIZE = 64,0,32,0 %;   !  transfer size (AT)
macro RJR$T_BLOCK = 68,0,0,0 %;         !  block data
! 
!  The extend entry is common to both AT and AI journaling.
! 
macro RJR$R_EXTEND_ENTRY = 56,0,0,0 %;
literal RJR$S_EXTEND_ENTRY = 66;        !  extend entry
macro RJR$T_FILL_EXT2 = 60,0,0,0 %;
literal RJR$S_FILL_EXT2 = 32;           !  no longer FIB
!  currently unused
macro RJR$R_EXT_FLAGS_OVERLAY = 92,0,32,0 %;
macro RJR$L_EXT_FLAGS = 92,0,32,0 %;
macro RJR$R_EXT_FLAGS_BITS = 92,0,8,0 %;
macro RJR$V_EXT_USE_XAB = 92,0,1,0 %;   !  ALL XAB fields present
! 
!  Fields EXT_AOP (unused) through EXT_RFI are in same relative locations as
!  the same fields in allocation XAB.
! 
macro RJR$B_EXT_AOP = 100,0,8,0 %;      !  align options
macro RJR$B_EXT_ALN = 101,0,8,0 %;      !  alignment boundary
macro RJR$W_EXT_VOL = 102,0,16,0 %;     !  relative volume number
macro RJR$L_EXT_LOC = 104,0,32,0 %;     !  location
macro RJR$L_EXT_ALQ = 108,0,32,0 %;     !  allocation quantity
macro RJR$W_EXT_DEQ = 112,0,16,0 %;     !  default extension
macro RJR$B_EXT_BKZ = 114,0,8,0 %;      !  bucket size
macro RJR$B_EXT_AID = 115,0,8,0 %;      !  area ID
macro RJR$W_EXT_RFI = 116,0,0,0 %;
literal RJR$S_EXT_RFI = 6;              !  related file IFI
macro RJR$T_EXT_ENDALL = 122,0,0,0 %;   !  end of all info
macro RJR$R_BUCKET_ENTRY = 56,0,0,0 %;
literal RJR$S_BUCKET_ENTRY = 12;        !  BUCKET entry
macro RJR$L_BKT_VBN = 60,0,32,0 %;      !  bucket vbn
macro RJR$W_BKT_SIZE = 64,0,16,0 %;     !  bucket size
macro RJR$W_JBKT_SIZE = 66,0,16,0 %;    !  actual size of
!  journaled bucket data
macro RJR$T_BUCKET = 68,0,0,0 %;        !  bucket data
macro RJR$R_AT_RECORD = 56,0,0,0 %;
literal RJR$S_AT_RECORD = 20;
macro RJR$L_AT_ROP = 60,0,32,0 %;       !  record options
macro RJR$B_AT_KRF = 64,0,8,0 %;        !  key of reference
macro RJR$B_AT_KSZ = 65,0,8,0 %;        !  key size
macro RJR$B_AT_RAC = 66,0,8,0 %;        !  record access mode
macro RJR$R_AT_RFA_OVERLAY = 68,0,0,0 %;
macro RJR$W_AT_RFA = 68,0,0,0 %;
literal RJR$S_AT_RFA = 6;               !  RFA of record
macro RJR$R_AT_RFA_FIELDS = 68,0,0,0 %;
macro RJR$L_AT_RFA0 = 68,0,32,0 %;      !  alternate RFA def
macro RJR$W_AT_RFA4 = 72,0,16,0 %;
macro RJR$L_AT_RRN = 68,0,32,0 %;       !  relative record number
macro RJR$T_AT_KEY = 76,0,0,0 %;        !  key if used
! 
!  The FILENAME entry is used to describe filename information required to:
! 
!  1.	Identify a stream of journal entries with a particular file.
! 	Used in particular for AI volume recovery or roll back RUs on remount.
! 
!  2.	Record the information required to re-create a file for AI journaling.
! 
!  3.	Record all the required audit-trail information for a $CREATE.
! 
