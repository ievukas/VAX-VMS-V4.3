	.TITLE	MPINTEXC - SECONDARY PROCESSOR INTERRUPT AND EXCEPTIONS
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:  Executive , Hardware fault handling
;
; Abstract:  Unhandled exception and interrupt routines
;
; Environment: MODE=Kernel 
;
; Author:  RICHARD I. HUSTVEDT, Creation date:  15-May-1979
;
; Modified by:
;
;	V03-005	KDM0030		Kathleen D. Morse	18-Nov-1982
;		Add logic that allows primary to continue execution
;		of secondary-specific code without turning into a
;		secondary processor.  Remove pagefault handler as no
;		longer needed.
;
;	V03-004	KDM0018		Kathleen D. Morse	08-Oct-1982
;		Move all logic to handle kernel mode system services
;		on secondary to MPCMOD.MAR.  This includes the AST
;		exit system service and the code that special-cased it.
;
;	V03-003	KDM0005		Kathleen D. Morse	31-Aug-1982
;		Add a secondary pagefault handler, to allow backing out
;		of MPS$COMPAT if it takes a pagefault.
;
;	V03-002	RIH0001		Richard I. Hustvedt	1-Jun-1982
;		Correct handling of AST queue by secondary processor to
;		avoid losing some AST notifications by incorrectly computing
;		PHD$B_ASTLVL.
;
;
; 01	- 
;--
	.PAGE
;
; INCLUDE FILES:
;
 
;
; MACROS:
;


;
; Macro to define an interrupt service routine label
; for unexpected interrupts
;
	.MACRO	ISRDEF,VNUM
	.ALIGN	LONG			; Make all vectors long word alligned
ERL$VEC'VNUM::				; Unexpected interrupt service rtn label
	.ENDM	ISRDEF
;
; Macro to define the interrupt service routine labels
; for an adapter
;
	.MACRO	ADPISR,SLOT
VECTOR = SLOT * 4 + 256
	.REPT	4
	ISRDEF	\VECTOR
VECTOR = VECTOR + <16 * 4>
	.ENDR
	BSBB	ADP_HANDLER		; Call interrupt service routine
	.BYTE	SLOT			; TR index for this int srv rtn
	.ENDM	ADPISR

;
; EQUATED SYMBOLS:
;
 
	$EMBDEF	<UI>			; Error log message buffer offsets
	$IPLDEF				; Interrupt priority levels
	$PCBDEF				; Process control block offsets
	$PHDDEF				; Process header block offsets
	$PRDEF				; Define processor register numbers
	$PSLDEF				; Define PSL fields
	$RPBDEF				; Define reboot parameter block
	$SSDEF				; Define system status codes

					;***
;DEBUG=1				;***If defined, enable unexpected
					;*** interrupt identifies vector #

;
; OWN STORAGE:
;
	.PAGE
	.SBTTL	MPS$UNEXPINT - Unexpected interrupt routine

;+
; ERL$VEC'VNUM - INTERRUPT SERVICE FOR SCB VECTOR VNUM.
; MPS$UNEXPINT - General unexpected interrupt service routine
;
; These interrupt service routines are executed for unused SCB vectors.
; If DEBUG is defined, each interrupt service calls ERL$UNEXP with
; the <vector offset>/2 into the SCB as a 1 byte argument.  If
; DEBUG is not defined, all interrupt service routines collapse to
; global labels equal to ERL$UNEXP.  There are enought interrupt
; service routines for the architectural page of the SCB, i.e.,
; 128 routines.
;
; INPUTS:
;
;	0(SP) - PC at interrupt
;	4(SP) - PSL at interrupt
;
; OUTPUTS:
;
;
;-

	.PSECT	$AEXNONPAGED,LONG

	.ALIGN	LONG

;
; All unused vectors in the SCB point to locations in the following table.
; There is one longword for each longword in the SCB.  The unused vectors
; may sometimes receive interrupts which must be handled in some way.  For
; all cpu-type interrupts, the routine MPS$UNEXPINT is executed.  For all
; adapter interrupts, the routine ADP_HANDLER is executed.  The former
; passes the process currently executing back to the primary or bugchecks,
; depending upon whether or not it is on the interrupt stack.  The latter
; routine creates and error log entry for the unexpected interrupt and REIs.
;
	.ALIGN	LONG
CPU_UNEXP:
	VNUM=000			; First vector = 0
	.REPT	64			; ISRs for cpu interrupts only
	ISRDEF	\VNUM			; Define ERL$VEC'VNUM label and ISR
	BSBW	MPS$UNEXPINT		; Call unexpected interrupt service rtn
	.BYTE	<VNUM>/2		; Identify vector offset into SCB
	VNUM=VNUM+4			; Next vector
	.ENDR
ADP_UNEXP:
	NEXUS = 0			; First adapter = 0
	.REPT	16			; ISR's for 16 adapters only
	ADPISR	\NEXUS			; Define ERL$VEC'VNUM labels and ISRs
	NEXUS = NEXUS + 1		; Next adapter
	.ENDR
;
; Unexpected adapter interrupt handler:
;
; This routine is entered whenever an adapter on the secondary interrupts.
; It logs the unexpected interrupt by creating an error log entry and then
; attempts to clear the interrupt.
;

	.ALIGN	LONG
ADP_HANDLER:
	SUBL	#ADP_UNEXP+2,(SP)	; Compute adapter offset
	DIVL	#2,(SP)			; Compute adapter slot/TR number
	PUSHR	#^M<R0,R1,R2,R3,R4>	; Save registers
	MOVL	5*4(SP),R3		; Retrieve slot number
	MOVL	@MMG$GL_SBICONF[R3],R4	; Get address of adapter registers
	CLRL	4(R4)			; Disable adapter interrupts
	MOVL	(R4),R4			; Get the adapter's configuration reg
10$:
	MOVL	#EMB$C_UI_LENGTH,R1	; Set size of message to allocate
	BSBW	MPS$ALLOCEMB		; Allocate an error log buffer
	BLBC	R0,20$			; Branch if none available
	MOVW	#EMB$C_UI,EMB$W_UI_ENTRY(R2) ; Set message type
	MOVL	R3,EMB$L_UI_TR(R2)	; Set slot/TR number
	MOVL	R4,EMB$L_UI_CSR(R2)	; Set configuration register value
	BSBW	MPS$RELEASEMB		; Release buffer
20$:	POPR	#^M<R0,R1,R2,R3,R4>	; Restore registers
	ADDL	#4,SP			; Remove slot number
	REI				;

	.PAGE
;+
; FUNCTIONAL DESCRIPTION:
;
; This routine is the unexpected interrupt handler.  It will halt
; if vector identification (DEBUG) is enabled.  On the top of the
; stack will be the <vector offset>/2 into the SCB.
;
; At the time the routine is entered, the stack looks like the following:
;
;		+--------------------------+
;		!   PC from a BSBW in SCB  !
;		+--------------------------+
;		!                          !
;		\         optional         \
;		\        parameters        \
;		!                          !
;		+--------------------------+
;		! PC at time of exception  !
;		+--------------------------+
;		! PSL at time of exception !
;		+--------------------------+
;
; The secondary processor computes the address of the vector for
; this particular interrupt in the primary's SCB.  It places this
; PC and the current PSL on the stack and returns the process to
; the primary processor.  A SVPCTX is done by the secondary, which
; takes the PC-PSL pair and places them in the hardware PCB.  The
; primary will immediately handle the interrupt when it starts
; executing this process.
;
; This code is executed for any exception that happens on the secondary,
; e.g., access violation, pagefault, change mode to kernel, etc.
;
; ENVIRONMENT:
;
;	Executes on the secondary processor.
;
;-

	.ALIGN	LONG
MPS$UNEXPINT::				;
	MOVZBL	@(SP),(SP)		;***Overlay return with vector offset
	MULL	#2,(SP)			;***Convert arg to vector offset

	.IF	DF,MPPFMSWT
	BSBW	MPS$PFM_UNEXP		; Gather performance statistics
	.ENDC

	ADDL3	G^EXE$GL_SCB,(SP),-(SP)	; Compute proper PC for continue
					;  in primary processor
	BICL3	#3,@(SP),(SP)		; Continuation PC is the SCB vector
					; Location in the primary less int stk bit
	MOVPSL	4(SP)			; Save current PSL
	BBS	#PSL$V_IS,4(SP),10$	; Br if on interrupt stack
	BICL	#PSL$M_IPL,4(SP)	; Force IPL to zero
;
; Now drop the current process and ask the primary processor for another.
;
	BRW	MPS$MPSCHED2		; And get another

10$:	SECBUG_CHECK MPUNEXPINT,FATAL	; Unexpected interrupt or exception
	.PAGE
	.SBTTL AST DELIVERY INTERRUPT SERVICE
;+
; FUNCTIONAL DESCRIPTION:
;
; This routine is entered from the AST delivery interrupt.  If it
; interrupts some kernel mode execution, then the AST delivery cannot
; be handled now and it merely sets the hardware register ASTLVL so
; that the interrupt is canceled.  If any other mode is interrupted, then 
; the process is folded up and returned to the primary processor.  When
; the primary processor does a LDPCTX and an REI to start executing this
; process, the REI finds that the hardware register ASTLVL differs from
; that in the process header and the AST is delivered.
;
;
; INPUTS:
;
;	 (SP) - PC at time of interrupt
;	4(SP) - PSL at time of interrupt
;
; ENVIRONMENT:
;
;	Executes on the secondary processor.
;
;-

	.ALIGN	LONG			; Longword align interrupt routines
MPS$ASTDEL::
	BITB	#<PSL$M_CURMOD -	; Check if a kernel mode routine
		@<-PSL$V_CURMOD>>, -	;  was interrupted
		4+<PSL$V_CURMOD@-3>(SP)	;
	BNEQ	MPS$UNEXPINT1		; Br if not kernel, go handle AST now
	MTPR	#4,#PR$_ASTLVL		; Don't handle the AST delivery now,
					;  and disable the interrupt
	REI				; Return from interrupt

;
; The following is in the format of the SCB vectors.
;
MPS$UNEXPINT1:
	PUSHL	#<IPL$_ASTDEL @ PSL$V_IPL> ; Return process to primary to do AST
	PUSHAB	G^SCH$ASTDEL		; delivery and execution

	.IF	DF,MPPFMSWT
	BSBW	MPS$PFM_ASTDEL		; Gather performance measurement data
	.ENDC

	BRW	MPS$MPSCHED2		; Go fold up the process & hand it back
	.PAGE
	.SBTTL	MPS$KERSTKNV - KERNEL STACK NOT VALID FAULT
;+
; MPS$KERSTKNV - KERNEL STACK NOT VALID FAULT
;
; FUNCTIONAL DESCRIPTION:
;
; This routine is automatically vectored to when a kernel stack not
; valid is detected during a change mode instruction, during an REI
; instruction, or during an attempt to push exception information on
; the kernel stack.  This exception runs on the interrupt stack.  The
; state of the stack on entry is:
;
;	00(SP) - Exception PC
;	04(SP) - Exception PSL
;
; A fatal kernel stack not valid bugcheck is declared.
;
; ENVIRONMENT:
;
;	Executes on the secondary processor.
;
;-
 
	.ALIGN	LONG
MPS$KERSTKNV::				; Kernel stack not valid fault
	SECBUG_CHECK MPKNLSTKNV,FATAL	; Kernel stack not valid bugcheck

	.PAGE
	.SBTTL	SECONDARY PROCESSOR COMPATIBILITY MODE FAULT HANDLER
;+
; FUNCTIONAL DESCRIPTION:
;
; This routine is automatically vectored to when a compatibility mode
; exception is detected for a process executing on the secondary.  The
; state of the stack on entry is:
;
;	00(SP) - Compatibility exception code
;	04(SP) - Exception PC
;	08(SP) - Exception PSL
;
; Possible compatibility exception codes are:
;
;	0 - Reserved instruction execution
;	1 - BPT instruction execution
;	2 - IOT instruction execution
;	3 - EMT instruction execution
;	4 - Trap instruction execution
;	5 - Illegal instruction execution
;	6 - Odd address fault
;	7 - Tbit trap
;
; The exception name followed by the number of exception arguments are
; pushed on the stack.  Final processing is accomplished in common code.
;
; If there is no compatibility mode handler declared, then the process
; is folded up and handed back to the primary, in such a way that the
; primary will execute in EXCEPTION.
;
; Environment:
;
;	Executed by the secondary processor, in kernel mode, on kernel stack.
;	If interrupted at any point, can continue execution on primary.
;
;-
 
	.ALIGN	LONG
MPS$COMPAT::				; Compatibility mode faults on secondary
	MOVQ	R0,@#CTL$AL_CMCNTX	; Save R0,R1 in compat context region
	MOVAL	@#CTL$AL_CMCNTX+8,R0	; Get addr of compatibility context area
	MOVQ	R2,(R0)+		; Save R2 and R3
	MOVQ	R4,(R0)+		; Save R4 and R5
	MOVL	R6,(R0)+		; Save R6
	MOVL	(SP)+,(R0)+		; Save exception code & clean off stack
	MOVQ	(SP)+,(R0)		; Save PC/PSL and clean off stack
	PUSHL	#<PSL$C_USER@PSL$V_PRVMOD>!<PSL$C_USER@PSL$V_CURMOD> ; Fabricate
					; a PSL for CME
	PUSHL	@#CTL$GL_CMHANDLR	; Compatibility mode handler address
	BEQL	20$			; Branch if none specified
	REI				; Jump to compatibility handler

;
; No compatibility mode handler was declared.  Restore the stack and
; saved register, and return process to primary to continue through
; normal exception code.  R0 now points to the saved PC in the
; compatibility context area.  
;

20$:	MOVQ	(R0),(SP)		; Restore exception PC/PSL
	PUSHL	-(R0)			; Push exception code again
	MOVL	-28(R0),R0		; Restore R0 from context area
	MOVZWL	#SS$_COMPAT,-(SP)	; Set exception name
	PUSHL	#4			; Set number of signal arguments
	IFPRIMARY <JMP G^EXE$EXCEPTION>	;IF PRIMARY, CONTINUE WITH EXCEPTION
					;IF SECONDARY, RETURN PROCESS TO PRIMARY
	EXTZV	#PSL$V_CURMOD,#PSL$S_CURMOD,16(SP),-(SP) ;Create PC/PSL w/prev
	ROTL	#PSL$V_PRVMOD,(SP),(SP)	; mode correct & current mode of kernel
	PUSHAB	G^EXE$EXCEPTION		; Adr where primary will execute
	BRW	MPS$MPSCHED2		; Hand process back to primary

	.PAGE
	.SBTTL	SYMBOLS NEEDED FOR XDELTA
;
; The following symbols are defined so that XDELTA can be linked
; into MP.EXE for debugging the secondary processor.
;
EXE$ROPRAND==ERL$VEC24
EXE$ACVIOLAT==ERL$VEC32
MMG$PAGEFAULT==ERL$VEC36
EXE$TBIT==ERL$VEC40
EXE$BREAK==ERL$VEC44
	.END
