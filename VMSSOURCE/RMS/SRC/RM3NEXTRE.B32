
MODULE RM3NEXTRE (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!	This module contains routines to skip records and skip
!	overhead for key compares
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:  Todd M. Katz			RECREATION DATE:  05-Sep-1982
!
! Modified by:
!
!	V03-011 DGB0001		Donald G. Blair		05-Dec-1983
!		The routine RM$REC_OVHD was found to be critical to performance.
!		Therefore, I've rewritten/reorganized the routine to make it
!		faster, somewhat at the expense of ease of understanding the
!		code. 
!
!	V03-010	MCN0002		Maria del C. Nasr	22-Mar-1983
!		More linkages changes, in particular, RM$REC_OVHD.
!
!	V03-009 MCN0001		Maria del C. Nasr	24-Feb-1983
!		Reorganize linkages
!
!	V03-008	TMK0006		Todd M. Katz		28-Sep-1982
!		Fix an error in RM$REC_OVHD. For prologue 3 files, all types
!		of primary data records have a record size field except for
!		the fixed length formatted records of those files that have 
!		both key compression and data compression turned off. I was not 
!		checking the compression bits; but rather, just that the record 
!		format was fixed before treated the records as if they did not 
!		have a record size field. Of course, this caused problems 
!		because both the record overhead and the size of the record 
!		would be incorrectly determined.
!
!	V03-007	TMK0005		Todd M. Katz		05-Sep-1982
!		Re-write the remaining routines in this module (RM$REC_OVHD,
!		RM$GETNEXT_REC, RM$COMPARE_REC), and check in a new source
!		since all the routines in this module will have been newly
!		added or re-written. While doing this, add support for Prologue
!		3 SIDRs to those routines which require modification.
!
!**

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! Define default PSECTS for code
!
PSECT
    CODE = RM$RMS3(PSECT_ATTR),
    PLIT = RM$RMS3(PSECT_ATTR);

! Linkage
!
LINKAGE
    L_COMPARE_KEY,
    L_PRESERVE1,
    L_RABREG_67,
    L_REC_OVHD,
    L_SIDR_FIRST;

! External routines
!
EXTERNAL ROUTINE
    RM$COMPARE_KEY	: RL$COMPARE_KEY,
    RM$RECORD_KEY	: RL$PRESERVE1,
    RM$RECORD_VBN	: RL$PRESERVE1;

! Forward Routine
!
FORWARD ROUTINE
    RM$REC_OVHD		: RL$REC_OVHD;

%SBTTL 'RM$COMPARE_REC'
GLOBAL ROUTINE RM$COMPARE_REC (SRCH_KEY_ADDR, SRCH_KEY_SIZE, LEVEL) :
    RL$RABREG_67 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine compares a key within a primary data or SIDR record with
!	a search key. There are three possible comparisons that can take place
!	depending upon the key of reference of the index descriptor and the
!	level of the bucket containing the record as represented by the input
!	parameter LEVEL:
!
!	1. Search Key vs. Primary Key in Primary Data Record.
!	   In this case either both the key of reference and LEVEL are 0, or
!	   the key of reference is 0, and LEVEL is -1. 
!
!	2. Search Key vs. Secondary Key in Primary Data Record.
!	   In this case the key of reference will be other than the primary key,
!	   and LEVEL will be -1 indicating that the record is a primary data
!	   record.
!
!	3. Search Key vs. Secondary Key in Secondary Data Record (SIDR).
!	   In this case the key of reference will be other than the primary key,
!	   and LEVEL will be 0. There is of course, only one key in such a 
!	   record.
!
!	One special note: A LEVEL of -1 indicates that RMS will have to compare 
!	the search key with some key in this primary data record, but which key 
!	depends upon the key of reference of the input index descriptor. If the
!	file is a prologue 3 file, then the primary key will "look" different
!	from the alternate keys since it will be at the front of the record, and
!	might also be compressed. What is more important is that because
!	the primary key has been extracted from the rest of the primary data 
!	record, and the primary data record itself might be compressed, if the
!	comparison is to be made between the search key and a secondary key in
!	the primary data record, it will be impossible to find the secondary 
!	key in the record. In fact, it will be impossible to find any secondary
!	key in the record. Therefore, If the file is a prologue 3 file, and the
!	LEVEL is -1, this routine requires that REC_ADDR point to an unpacked 
!	version of the primary data record.
!
! CALLING SEQUENCE:
!
!	RM$COMPARE_REC ()
!
! INPUT PARAMETERS:
!
!	SRCH_KEY_ADDR	- address of the search key
!	SRCH_KEY_SIZE	- size of the search key
!	LEVEL		- if  0, then the record is primary data record or SIDR
!			  if -1, then the record is a primary data record
!
! IMPLICIT INPUTS:
!
!	IDX_DFN			- address of index descriptor
!	    IDX$V_KEY_COMPR	- if set, key compression is enabled
!	    IDX$B_KEYREF	- key of reference
!
!	IFAB			- address of IFAB
!	    IFB$W_KBUFSZ	- size of a keybuffer
!	    IFB$B_PLG_VER	- prologue version of file
!
!	IRAB			- address of IRAB
!	    IRB$L_KEYBUF	- address of the contigious keybuffers
!
!	REC_ADDR		- address of data record
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!
!	-1	- search key < key of data record
!	 0	- search key = key of data record
!	 1	- search key > key of data record
!
! SIDE EFFECTS:
!
!	AP will be trashed.
!	If key compression is enabled, and LEVEL = 0, then the key of the data
!	record maybe found in its expanded form in keybuffer 5.
!
!--

    BEGIN

    BUILTIN
	AP;

    EXTERNAL REGISTER
	R_IDX_DFN_STR,
	R_IFAB_STR,
	R_IRAB_STR,
	R_REC_ADDR;

    LOCAL
	COMPARE_KEY;

    ! Either the search key is to be compared with the the primary key of the
    ! the primary data record or the secondary (and only) key of the SIDR.
    !
    IF .LEVEL EQLU 0
    THEN

	! If key compression is enabled, then the primary or secondary key of
	! the data record must be extracted and re-expanded before it can be
	! compared with the search key. A contigious key - contigious key
	! comparison will be made between the search key, and the key of the
	! data record in its expanded form in keybuffer 5.
	!
	IF .IDX_DFN[IDX$V_KEY_COMPR]
	THEN
	    BEGIN

	    GLOBAL REGISTER
		R_BDB,
		R_RAB,
		R_IMPURE;

	    AP = 0;
	    RM$RECORD_KEY (KEYBUF_ADDR(5));

	    AP = 3;
	    COMPARE_KEY = KEYBUF_ADDR(5);
	    END

	! Key compression is not enabled, therefore there is no need to 
	! re-expand the key of the data record.
	!
	ELSE
	    BEGIN

	    AP = 3;

	    ! The comparison will be made between the search key and the primary
	    ! key of a primary data record. If the file is a prologue 3 file,
	    ! then RMS will position directly to the contigious primary key in
	    ! the primary data record before the comparison, and a contigious 
	    ! key - contigious key comparison will be performed; otherwise, RMS
	    ! will position past the record overhead directly to the primary 
	    ! data record before the comparison is made, and a contigious 
	    ! search key - data record comparison is performed.
	    !
	    IF .IDX_DFN[IDX$B_KEYREF] EQLU 0
	    THEN
		BEGIN
		IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
		THEN
		    AP = 2;
		END

	    ! The comparison will be made between the search key and the 
	    ! secondary key in the SIDR. Regardless of the prologue version
	    ! of the file, RMS must position past the record overhead to the
	    ! secondary key itself, and perform a contigious key - contigious
	    ! key comparison.
	    !
	    ELSE
		LEVEL = -1;

	    ! Position past the record overhead either directly to the key 
	    ! the search key is to be compared with, or to the beginning of the
	    ! primary data record proper.
	    !
	    COMPARE_KEY = .REC_ADDR + RM$REC_OVHD(.LEVEL);
	    END

    ! The search key will be compared with a key in a primary data record.
    ! Which key it is compared with will depend upon the key of reference of the
    ! index descriptor.
    !
    ELSE
	BEGIN
	AP = 2;

	! If the file is a prologue 2 file, then it will be necessary to 
	! position past the record overhead (and do so) before the search key 
	! is compared with the a key in the primary data record by means of a 
	! contigious search key - data record comparison. 
	!
	IF .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
	THEN
	    BEGIN
	    COMPARE_KEY = .REC_ADDR + RM$REC_OVHD(0);
	    END

	! If the file is a prologue 3 file, then REC_ADDR points directly to an
	! unpacked version of the primary data record. There will be no need to
	! perform any initial positioning, and the type of comparison which 
	! will be required will be contigious search key - data record.
	!
	ELSE
	    COMPARE_KEY = .REC_ADDR;
	END;

    ! Perform the required comparison, and return the result.
    !
    RETURN RM$COMPARE_KEY (.COMPARE_KEY, .SRCH_KEY_ADDR, .SRCH_KEY_SIZE);
    END;

%SBTTL 'RM$EXT_ARRY_RFA'
GLOBAL ROUTINE RM$EXT_ARRY_RFA (VBN, ID) : RL$RABREG_67 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine's responsibility is to extract out and return the
!	components of the current SIDR array element's RFA pointer, provided
!	the current element has not been flattened, and there is a RFA
!	pointer to extract.
!
! CALLING SEQUENCE:
!	BSBW RM$EXT_ARRY_RFA()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	IFAB			- address of the IFAB
!	    IFB$B_PLG_VER	- prologue version of the ISAM file
!
!	REC_ADDR		- address of the current SIDR array element
!
! OUTPUT PARAMETERS:
!
!	VBN	- VBN of the current SIDR array element's RFA pointer
!	ID	- ID of the current SIDR array element's RFA pointer
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!
!	SUC	- if the RFA has been successfully extracted.
!	DEL	- if the current SIDR array element is marked deleted.
!	0	- if the cuurent SIDR array element is flattened 
!		  (ie no RFA pointer is present).
!
! SIDE EFFECTS:
!	If SUC is returned, the SIDR array's RFA is returned too.
!	If DEL is returned, the SIDR array's RFA is returned too.
!	If 0   is returned, the SIDR array's RFA is not returned.
!	AP is trashed.
!
!--

    BEGIN

    BUILTIN
	AP;

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    GLOBAL REGISTER
	R_BDB;

    ! If there is no SIDR array RFA to extract, return 0.
    !
    IF .REC_ADDR[IRC$V_NOPTRSZ]
    THEN
	RETURN 0;

    ! Extract the VBN and ID from the RFA pointer of the CURRENT SIDR element.
    !
    AP = 2;
    .VBN = RM$RECORD_VBN();

    IF .IFAB[IFB$B_PLG_VER] GEQU PLG$C_VER_3
    THEN
	.ID = .REC_ADDR[IRC$W_ID]
    ELSE
	.ID = .REC_ADDR[IRC$B_ID];

    ! If the current SIDR array element is marked deleted, return that status.
    !
    IF .REC_ADDR[IRC$V_DELETED]
    THEN
	RETURN RMSERR(DEL)

    ! Otherwise, return success.
    !
    ELSE
	RETURN RMSSUC();

    END;

%SBTTL 'RM$GETNEXT_REC'
GLOBAL ROUTINE RM$GETNEXT_REC : RL$RABREG_67 NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine accepts as input the address of a current index, primary
!	data, or SIDR record. It positions past this current record to a new
!	current record, the next record in the bucket. If there is no next 
!	record, RMS positions to the first byte past the current record.
!
! CALLING SEQUENCE:
!
!	RM$GETNEXT_REC()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	IDX_DFN			- address of index descriptor
!	    IDX$B_KEYREF	- key of reference
!
!	IFAB			- address of IFAB
!	    IFB$B_PLG_VER	- prologue version of file
!
!	IRAB			- address of IRAB
!	    IRB$L_CURBDB	- address of BDB for current record's bucket
!	    IRB$L_REC_COUNT	- number of preceeding index records
!
!	REC_ADDR		- address of current record
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	IRAB			- address of IRAB
!	    IRB$L_REC_COUNT	- number of preceeding index records
!
!	REC_ADDR		- address of the new record
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!
!	If the current record is a prologue 3 index record, then the count
!	of the number of records preceeding the current record is incremented
!	(there is a new current record, the next one in the bucket).
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IDX_DFN_STR,
	R_IFAB_STR,
	R_IRAB_STR,
	R_REC_ADDR_STR;

    LOCAL
	REC_SIZE;

    ! Set the global register REC_SIZE according to whether the current record
    ! is a:
    !
    ! 1. Primary data record	-	REC_SIZE <-  0
    ! 2. SIDR			-	REC_SIZE <- -1
    ! 3. Index record		-	REC_SIZE <- level of index bucket
    !
    REC_SIZE = .BBLOCK[.BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_ADDR], BKT$B_LEVEL];

    IF  (.REC_SIZE EQLU 0)
    	 AND
	(.IDX_DFN[IDX$B_KEYREF] GTRU 0)
    THEN
	REC_SIZE = -1;

    ! If the current record is a prologue 3 index record, then along with 
    ! positiong past it to what hopefully is the next record in the bucket,
    ! RMS increments a count of the number of index records preceeding the
    ! new current record in the index bucket,
    !
    IF  (.REC_SIZE GTRU 0)
	 AND
	(.IFAB[IFB$B_PLG_VER] GEQU PLG$C_VER_3)
    THEN
	IRAB[IRB$L_REC_COUNT] = .IRAB[IRB$L_REC_COUNT] + 1;

    ! Position past the current record either to next record, or to the first
    ! byte past the current record, if there is no next record.
    !
    REC_ADDR = .REC_ADDR + RM$REC_OVHD(.REC_SIZE; REC_SIZE);
    REC_ADDR = .REC_ADDR + .REC_SIZE;
    END;

%SBTTL 'RM$GETNXT_ARRAY'
GLOBAL ROUTINE RM$GETNXT_ARRAY : RL$RABREG_67 NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine's purpose, is given a pointer to a current SIDR array
!	element, position to the SIDR array element that follows, or to the
!	first byte past the current element if there is no next element
!
! CALLING SEQUENCE:
!	BSBW RM$GETNXT_ARRAY()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	IFAB			- address of IFAB
!	    IFB$B_PLG_VER	- prologue version of the ISAM file
!
!	REC_ADDR		- address of the current SIDR array element
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	REC_ADDR		- address of the next SIDR array element
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IFAB_STR,
	R_REC_ADDR_STR;

    ! The current SIDR array element consists of just 1 control byte.
    !
    IF .REC_ADDR[IRC$V_NOPTRSZ]
    THEN
	REC_ADDR = .REC_ADDR + 1
    ELSE

	! The file is a prologue 3 file, and the current array element consists
	! of a control byte, a one word ID, and a 2, 3, or 4 byte VBN.
	!
	IF .IFAB[IFB$B_PLG_VER] GEQU PLG$C_VER_3
	THEN
	    REC_ADDR = .REC_ADDR + (.REC_ADDR[IRC$V_PTRSZ] + 1) 
				 + IRC$C_DATPTRBS3

	! The file is a prologue 2 file, and the current array element consists
	! if a control byte, a one byte ID, and a 2, 3, or 4 byte VBN.
	!
	ELSE
	    REC_ADDR = .REC_ADDR + (.REC_ADDR[IRC$V_PTRSZ] + 1) 
				 + IRC$C_DATPTRBAS;

    END;

%SBTTL 'RM$REC_OVHD'
GLOBAL ROUTINE RM$REC_OVHD (REC_TYPE; REC_SIZE) : RL$REC_OVHD =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine accecpts as input the address of a record and the record's
!	type, and returns the number of bytes of record overhead after setting
!	the global register REC_SIZE to the size of record itself minus this 
!	overhead. 
!
! CALLING SEQUENCE:
!
!	RM$REC_OVHD()
!
! INPUT PARAMETERS:
!	REC_TYPE		- type of record REC_ADDR points to
!		   < 0		- SIDR 
!		   = 0		- primary data record
!		   > 0		- index record
!
!
! IMPLICIT INPUTS:
!
!	IDX_DFN			- address of index descriptor for this key
!	    IDX$B_DATBKTYP	- type of data bucket 
!	    IDX$V_KEY_COMPR	- if set, index key compression is enabled
!	    IDX$B_KEYSZ		- key size
!
!	IFAB			- address of IFAB
!	    IFB$W_LRL		- record size if fixed length record format
!	    IFB$B_RFMORG	- record format of primary data records
!	    IFB$B_PLG_VER	- prologue version of file
!
!	REC_ADDR		- address of record
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	REC_SIZE	- size of the entire record minus the overhead
!
! ROUTINE VALUE:
!
!	The number of bytes of record overhead. This overhead never includes 
!	the key or key compression overhead.
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IDX_DFN_STR,
	R_IFAB_STR,
	R_REC_ADDR_STR;

    LOCAL
	OVERHEAD;

    ! CASE 1:  Determine size and overhead for an INDEX RECORD.
    !
    IF .REC_TYPE GTR 0
    THEN
        BEGIN ! CASE 1

	! The overhead for a prologue 3 index record is 0 while the record
	! size is the size of the key including compression bits if index
	! key compression is enabled. NOTE for the purpose of determining
	! record overhead and size, RMS does not consider the VBN
	! downpointer, located separately from the key at the other end of 
	! the bucket, to be a part of the index record.
	!
	IF .IFAB[IFB$B_PLG_VER] GEQ PLG$C_VER_3
	THEN
	    BEGIN
	    OVERHEAD = 0;
	    IF .IDX_DFN[IDX$V_IDX_COMPR]
	    THEN
	        REC_SIZE = .(.REC_ADDR)<0,8> + 2
	    ELSE
	        REC_SIZE = .IDX_DFN[IDX$B_KEYSZ];
	    END

	! The overhead for a prologue 1 or 2 index record is the one-byte
	! control byte and the VBN downpointer while the record size is the
	! size of the key.
	! 
	ELSE
	    BEGIN
	    OVERHEAD = .REC_ADDR[IRC$V_PTRSZ] + IRC$C_DATPTRBAS;
	    REC_SIZE = .IDX_DFN[IDX$B_KEYSZ];
	    END
        END ! CASE 1

    ! CASE 2:  Return size and overhead for a PRIMARY DATA RECORD.
    !
    ELSE IF .REC_TYPE EQL 0
    THEN 
	BEGIN ! CASE 2

	! Determine the amount of record overhead in a prologue 3 primary 
	! data record.
	!
 	IF .IFAB[IFB$B_PLG_VER] GEQ PLG$C_VER_3
	THEN
	    BEGIN

	    ! If the record is not a RRV then the amount of record overhead
	    ! will depend on whether the file contains fixed length data 
	    ! records with neither the primary key nor the data portion 
	    ! compressed, or any other type of record. The difference is 
	    ! in whether a two-byte record size overhead field is present
	    ! or not.
	    !
	    ! If the file contains fixed length records and both key and
	    ! data compression are disabled, then the record's size (minus 
	    ! the record overhead's contribustion) is a known constant; 
	    ! otherwise, for the remaining record types the size maybe 
	    ! obtained from the last two bytes of the record's overhead 
	    !
	    IF NOT .REC_ADDR[IRC$V_RRV] 
	    THEN
		IF NOT ((.IFAB[IFB$B_RFMORG] EQLU FAB$C_FIX)
		  AND (.IDX_DFN[IDX$B_DATBKTYP] EQLU IDX$C_NCMPNCMP))
		THEN
		    BEGIN
		    OVERHEAD = IRC$C_VAROVHSZ3;
		    REC_SIZE = .(.REC_ADDR + .OVERHEAD 
					   - IRC$C_DATSZFLD)<0,16>;
		    END
		ELSE
		    BEGIN
		    OVERHEAD = IRC$C_FIXOVHSZ3;
		    IF NOT .REC_ADDR[IRC$V_DELETED]
		    THEN
			REC_SIZE = .IFAB[IFB$W_LRL]
		    ELSE
			REC_SIZE = .IDX_DFN[IDX$B_KEYSZ];
		    END

	    ! If the record is a RRV then the overhead will consist of a 
	    ! one-byte control byte, a two-byte record ID, and a six-byte
	    ! RRV provided the record contains an RRV.  Note that for an 
	    ! RRV, the record's size is always 0.
	    !
	    ELSE
		IF .REC_ADDR[IRC$V_NOPTRSZ]
		THEN
		    OVERHEAD = IRC$C_DATOVHSZ3
		ELSE
		    OVERHEAD = IRC$C_RRVOVHSZ3;

	    END

	! Determine the amount of record overhead in a prologue 1 or 2 
	! primary data record.
	!
	ELSE
	    BEGIN

	    ! If the record is not a RRV then the amount of record overhead
	    ! will depend on whether the file contains fixed length data 
	    ! records or variable length data records. The difference is 
	    ! in whether a two-byte record size overhead field is present 
	    ! or not.
	    !
	    ! If the file contains fixed length records then the record's 
	    ! size (minus the record overhead's contribution) is a known 
	    ! constant; otherwise, for variable length records the size 
	    ! maybe obtained from the last two bytes of the record's 
	    ! overhead.
	    !
	    IF NOT .REC_ADDR[IRC$V_RRV]
	    THEN
		IF .IFAB[IFB$B_RFMORG] EQLU FAB$C_FIX
		THEN
		    BEGIN
		    OVERHEAD = IRC$C_FIXOVHDSZ;
		    REC_SIZE = .IFAB[IFB$W_LRL];
		    END
		ELSE
		    BEGIN
		    OVERHEAD = IRC$C_VAROVHDSZ;
		    REC_SIZE = .(.REC_ADDR + .OVERHEAD 
					       - IRC$C_DATSZFLD)<0,16>;
		    END

	    ! If the record is a RRV then the overhead will consist of a 
	    ! one-byte control byte, a one-byte record ID, and a five-byte
	    ! RRV provided the record contains an RRV.  The record's size
	    ! is 0.
	    !
	    ELSE
		IF .REC_ADDR[IRC$V_NOPTRSZ]
		THEN
		    OVERHEAD = IRC$C_DATOVHDSZ
		ELSE
		    OVERHEAD = IRC$C_RRVOVHDSZ;

	    END;
	END ! CASE 2

    ! CASE 3:  Determine size and overhead for a SIDR.
    !
    ELSE  ! .REC_TYPE LSS 0
	BEGIN ! CASE 3

	! The overhead of a prologue 3 SIDR is fixed regardless of whether
	! duplicate alternate keys are, or are not allowed.
	!
	IF .IFAB[IFB$B_PLG_VER] GEQ PLG$C_VER_3
	THEN
	    OVERHEAD = IRC$C_SDROVHSZ3

	! The overhead of a prologue 2 SIDR will depend upon whether 
	! duplicate alternate keys are allowed or not, and if so, whether
	! an unused duplicate count field is present in the record or not.
	!
	ELSE
	    IF .REC_ADDR[IRC$V_NODUPCNT]
	    THEN
		OVERHEAD = IRC$C_DATOVHDSZ + IRC$C_DATSZFLD
	    ELSE
		OVERHEAD = IRC$C_DATOVHDSZ + IRC$C_DATSZFLD 
					   + IRC$C_DCNTSZFLD;

	! The record's size (minus the overhead's contribution) may be 
	! obtained from the last two bytes of the SIDR overhead regardless
	! of the prologue version of the file.
	!
	REC_SIZE = .(.REC_ADDR + .OVERHEAD - 2)<0,16>;
	END; ! CASE 3


    ! Return the number of bytes of record overhead.
    !
    RETURN .OVERHEAD;
    END;

%SBTTL 'RM$SIDR_END'
GLOBAL ROUTINE RM$SIDR_END : RL$RABREG_67 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	The purpose of this routine is to return the address of the first
!	past the end of the current SIDR.
!
! CALLING SEQUENCE:
!	BSBW RM$SIDR_END()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	REC_ADDR		- address of the SIDR
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!
!	Address of the first byte past the current SIDR's last array element.
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RABREG,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    LOCAL
	END_OF_SIDR,
	SAVE_REC_ADDR;

    ! Save the address of the beginning of the SIDR.
    !
    SAVE_REC_ADDR = .REC_ADDR;

    ! Obtain the address of the next record in the bucket.
    !
    RM$GETNEXT_REC();
    END_OF_SIDR = .REC_ADDR;

    ! Restore the address of the beginning of the SIDR, and return the address
    ! of the next record - effectively the end of the current SIDR.
    !
    REC_ADDR = .SAVE_REC_ADDR;
    RETURN .END_OF_SIDR;

    END;

%SBTTL 'RM$SIDR_FIRST'
GLOBAL ROUTINE RM$SIDR_FIRST (FLAGS;RFA_VBN, RFA_ID) : RL$SIDR_FIRST =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	The purpose of this routine is to return the address and optionally the
!	RFA pointer ofthe first element of the inputed SIDR. The components of
!	the RFA pointer are returned separately (VBN and ID), and in the RMS 
!	cluster environment, uniquely identifies the SIDR from among all SIDRs
!	with that key value.
!
! CALLING SEQUENCE:
!	BSBW RM$SIDR_FIRST()
!
! INPUT PARAMETERS:
!
!	FLAGS		- if 1, return the RFA pointer of the first element
!
! IMPLICIT INPUTS:
!
!	IDX_DFN			- index descriptor for the SIDR
!	    IDX$V_KEY_COMPR	- if set, SIDR key compression is enabled
!	    IDX$B_KEYSZ		- size of a fully expanded SIDR key
!
!	REC_ADDR		- address of the SIDR
!
! OUTPUT PARAMETERS:
!
!	RFA_VBN		- VBN of the SIDR's first array element RFA pointer
!	RFA_ID		- ID of the SIDR's first array element RFA pointer
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!
!	Address of the first array element of the SIDR.
!
! SIDE EFFECTS:
!
!	AP is trashed
!
!--

    BEGIN

    BUILTIN
	AP;

    EXTERNAL REGISTER
	COMMON_RABREG,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    LOCAL
	BEGIN_SIDR,
	FIRST_ELEMENT;

    ! After saving the address of the SIDR, position to the SIDR's first
    ! array element.
    !
    BEGIN_SIDR = .REC_ADDR;

    REC_ADDR = .REC_ADDR + RM$REC_OVHD(-1);

    IF .IDX_DFN[IDX$V_KEY_COMPR]
    THEN
	REC_ADDR = .REC_ADDR + .(.REC_ADDR)<0,8> + IRC$C_KEYCMPOVH
    ELSE
	REC_ADDR = .REC_ADDR + .IDX_DFN[IDX$B_KEYSZ];

    ! If the caller has requested that the VBN and ID of the first element's
    ! RFA pointer be returned, extract them from the RFA pointer of the first 
    ! element of the SIDR.
    !
    IF .FLAGS<0,1>
    THEN
	RM$EXT_ARRY_RFA (RFA_VBN, RFA_ID);

    ! Restore to REC_ADDR the address of the SIDR and return the address of the
    ! first element.
    !
    FIRST_ELEMENT = .REC_ADDR;
    REC_ADDR = .BEGIN_SIDR;

    RETURN .FIRST_ELEMENT;

    END;


END

ELUDOM
