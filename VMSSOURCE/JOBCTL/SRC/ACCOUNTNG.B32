MODULE ACCOUNTNG(%TITLE	'Accounting manager'
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Job controller.
!
! ABSTRACT:
!	This module contains the accounting management routines.
!
! ENVIRONMENT:
!	VAX/VMS user and kernel mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 16-Feb-1982
!
! MODIFIED BY:
!
!	V03-005	MHB0140		Mark Bramhall,	20-Apr-1984
!		Change account name handling, especially the determination
!		logic for generating SYSINIT and LOGFAIL records.
!
!	V03-004	MLJ0114		Martin L. Jack,	23-Jun-1983  4:48
!		Changes for job controller baselevel.
!
!	V03-003	MLJ0113		Martin L. Jack,	26-May-1983  21:05
!		Changes for job controller baselevel.
!
!	V03-002	MLJ0112		Martin L. Jack,	29-Apr-1983  2:48
!		Changes for job controller baselevel.
!
!	V03-001	MLJ0109		Martin L. Jack,	14-Apr-1983  12:45
!		Changes for job controller baselevel.
!
!**

REQUIRE 'SRC$:JOBCTLDEF';


LITERAL
	ACCT_ACM_REG=	6,
	ACCT_ACR_REG=	7,
	ACCT_APK_REG=	8,
	ACCT_SJH_REG=	9,
	ACCT_SMQ_REG=	11;


LINKAGE
	L_WRITE_ACCOUNTING_FILE=	CALL: GLOBAL(
					    ACR = ACCT_ACR_REG),

	L_IDENT_PACKET=			CALL: GLOBAL(
					    ACM = ACCT_ACM_REG,
					    ACR = ACCT_ACR_REG,
					    SJH = ACCT_SJH_REG,
					    SMQ = ACCT_SMQ_REG),

	L_RESOURCE_PACKET=		CALL: GLOBAL(
					    ACM = ACCT_ACM_REG,
					    ACR = ACCT_ACR_REG);


FORWARD ROUTINE
	WRITE_ACCOUNTING_FILE:		L_WRITE_ACCOUNTING_FILE NOVALUE,
	OPEN_ACCOUNTING_FILE:		NOVALUE,
	CLOSE_ACCOUNTING_FILE:		NOVALUE,
	IDENT_PACKET:			L_IDENT_PACKET NOVALUE,
	RESOURCE_PACKET:		L_RESOURCE_PACKET NOVALUE,
	WRITE_USER_ACCOUNTING_RECORD:	NOVALUE,
	WRITE_FILE_LINK_RECORD:		NOVALUE,
	WRITE_ACCOUNTING_RECORD:	NOVALUE,
	WRITE_PRINT_RECORD:		NOVALUE,
	WRITE_PROCESS_RECORD:		NOVALUE,
	PROCESS_ACCOUNTING:		NOVALUE;


EXTERNAL ROUTINE
	FIND_PROCESS_DATA:		L_OUTPUT_3,
	LOCK_QUEUE_FILE:		NOVALUE,
	READ_RECORD,
	SIGNAL_FILE_ERROR:		NOVALUE,
	UNLOCK_QUEUE_FILE:		NOVALUE;


EXTERNAL
	EXE$GL_ACMFLAGS:		BBLOCK ADDRESSING_MODE(GENERAL);


BUILTIN
	LOCC,
	MOVC3,
	SKPC,
	TESTBITCC,
	TESTBITSC;

ROUTINE WRITE_ACCOUNTING_FILE: L_WRITE_ACCOUNTING_FILE NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine writes the accounting file.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	ACR		- Pointer to accounting record.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Accounting record written.
!
!--

BEGIN
EXTERNAL REGISTER
	ACR = ACCT_ACR_REG:	REF BBLOCK;	! Pointer to accounting record


! The following loop is executed up to MAXFILERR times or until the accounting
! record is successfully written, provided that an accounting file is open and
! the record type is selected by the accounting control flags.
!
DECR I FROM JBC$K_MAXFILERR TO 1 DO
    BEGIN
    LOCAL
	FAB:		REF BBLOCK;	! Pointer to FAB


    ! Pick up a pointer to the current accounting FAB.  If the file is closed,
    ! return.
    !
    FAB = .ACCOUNTING_FABS[0];
    IF .FAB[FAB$W_IFI] NEQ 0
    THEN
	BEGIN

	! Evaluate the accounting control flags to determine whether the
	! record type is currently selected.
	!
	IF
	    BEGIN
	    CASE .ACR[ACR$V_TYPE] FROM ACR$K_PRCDEL TO ACR$K_FILE_BL OF
		SET


		[OUTRANGE]:
		    FALSE;


		[ACR$K_PRCDEL, ACR$K_PRCPUR]:
		    IF .EXE$GL_ACMFLAGS[ACM$V_PROCESS]
		    THEN
			CASE .ACR[ACR$V_SUBTYPE] FROM ACR$K_INTERACTIVE TO ACR$K_NETWORK OF
			    SET
			    [OUTRANGE]:			FALSE;
			    [ACR$K_INTERACTIVE]:	.EXE$GL_ACMFLAGS[ACM$V_INTERACTIVE];
			    [ACR$K_SUBPROCESS]:		.EXE$GL_ACMFLAGS[ACM$V_SUBPROCESS];
			    [ACR$K_DETACHED]:		.EXE$GL_ACMFLAGS[ACM$V_DETACHED];
			    [ACR$K_BATCH]:		.EXE$GL_ACMFLAGS[ACM$V_BATCH];
			    [ACR$K_NETWORK]:		.EXE$GL_ACMFLAGS[ACM$V_NETWORK];
			    TES
		    ELSE
			FALSE;


		[ACR$K_IMGDEL, ACR$K_IMGPUR]:
		    CASE .ACR[ACR$V_SUBTYPE] FROM ACR$K_INTERACTIVE TO ACR$K_NETWORK OF
			SET
			[OUTRANGE]:			FALSE;
			[ACR$K_INTERACTIVE]:		.EXE$GL_ACMFLAGS[ACM$V_INTERACTIVE];
			[ACR$K_SUBPROCESS]:		.EXE$GL_ACMFLAGS[ACM$V_SUBPROCESS];
			[ACR$K_DETACHED]:		.EXE$GL_ACMFLAGS[ACM$V_DETACHED];
			[ACR$K_BATCH]:			.EXE$GL_ACMFLAGS[ACM$V_BATCH];
			[ACR$K_NETWORK]:		.EXE$GL_ACMFLAGS[ACM$V_NETWORK];
			TES;


		[ACR$K_SYSINIT, ACR$K_SETTIME, ACR$K_ENABLE, ACR$K_DISABLE,
		 ACR$K_ALTACM, ACR$K_FILE_FL, ACR$K_FILE_BL]:
		    TRUE;


		[ACR$K_LOGFAIL]:
		    .EXE$GL_ACMFLAGS[ACM$V_LOGFAIL];


		[ACR$K_PRINT]:
		    .EXE$GL_ACMFLAGS[ACM$V_PRINT];


		[ACR$K_USER]:
		    .EXE$GL_ACMFLAGS[ACM$V_USER_DATA];


		TES
	    END
	THEN
	    BEGIN
	    LABEL
		WRITE_RECORD;
	    LOCAL
		RAB:		REF BBLOCK;	! Pointer to RAB


WRITE_RECORD:
	    BEGIN

	    ! Pick up a pointer to the RAB.
	    !
	    RAB = .ACCOUNTING_RABS[0];


	    ! If there is a previous asynchronous operation in progress, wait
	    ! for its completion.
	    !
	    IF TESTBITSC(RAB[RAB$V_ASY])
	    THEN
		BEGIN
		IF NOT $WAIT(RAB=.RAB) THEN LEAVE WRITE_RECORD;
		END;


	    ! Initialize the record descriptor and write this record.
	    !
	    RAB[RAB$W_RSZ] = .ACR[ACR$W_LENGTH];
	    RAB[RAB$L_RBF] = .ACR;
	    IF NOT $PUT(RAB=.RAB) THEN LEAVE WRITE_RECORD;


	    ! Unless this is an image accounting record, start an asynchronous
	    ! $FLUSH to write this record to disk.
	    !
	    IF NOT ONEOF_(.ACR[ACR$V_TYPE], BMSK_(ACR$K_IMGDEL, ACR$K_IMGPUR))
	    THEN
		BEGIN
		RAB[RAB$V_ASY] = TRUE;
		IF NOT $FLUSH(RAB=.RAB) THEN LEAVE WRITE_RECORD;
		END;


	    ! Completed successfully -- return.
	    !
	    RETURN;
	    END;	! block WRITE_RECORD


	    ! An error occurred writing the record.  Report it.
	    !
	    SIGNAL_FILE_ERROR(JBC$_WRITEERR + STS$K_ERROR, .FAB, .RAB);


	    ! Unless the error is "device full", close this accounting file,
	    ! try to open a new one, and then try to write the record again.
	    !
	    IF .RAB[RAB$L_STS] EQL RMS$_FUL
	    THEN
		EXITLOOP
	    ELSE
		OPEN_ACCOUNTING_FILE(TRUE);
	    END
	ELSE
	    RETURN;
	END
    ELSE
	RETURN;
    END;


! Writing has failed.  Implicitly disable accounting.
!
SIGNAL(JBC$_ACCDISERR OR STS$K_INFO);
CLOSE_ACCOUNTING_FILE();
END;

GLOBAL ROUTINE OPEN_ACCOUNTING_FILE(NEW): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine opens an accounting file.  If one is already open, it is
!	closed and a new copy created.
!
! INPUT PARAMETERS:
!	NEW		- True if a new file must be created.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Accounting file opened.
!
!--

BEGIN
LOCAL
	OLD_IFI,			! Previous IFI value for current file
	OLD_FAB:	REF BBLOCK,	! Current FAB
	OLD_RAB:	REF BBLOCK,	! Current RAB
	NEW_FAB:	REF BBLOCK,	! Next FAB
	NEW_RAB:	REF BBLOCK;	! Next RAB


! If this is the first call, initialize.
!
IF .ACCOUNTING_FABS[0] EQL 0
THEN
    BEGIN
    ACCOUNTING_FABS[0] = ACCOUNT_FAB_A;
    ACCOUNTING_FABS[1] = ACCOUNT_FAB_B;
    ACCOUNTING_RABS[0] = ACCOUNT_RAB_A;
    ACCOUNTING_RABS[1] = ACCOUNT_RAB_B;
    $FAB_INIT(FAB=ACCOUNT_FAB_A,
	FAC=PUT,
	FNA=UPLIT BYTE('ACCOUNTNG'),
	FNS=%CHARCOUNT('ACCOUNTNG'),
	DNA=UPLIT BYTE('SYS$MANAGER:.DAT'),
	DNS=%CHARCOUNT('SYS$MANAGER:.DAT'),
	FOP=CIF,
	DEQ=25,
	ORG=SEQ,
	RFM=VAR,
	NAM=ACCOUNT_NAM_A,
	SHR=<GET,UPI>);
    $RAB_INIT(RAB=ACCOUNT_RAB_A,
	FAB=ACCOUNT_FAB_A,
	MBC=1,
	MBF=2,
	RAC=SEQ,
	ROP=<EOF,WBH>);
    $NAM_INIT(NAM=ACCOUNT_NAM_A,
	RSA=ACCOUNT_RSA_A,
	RSS=NAM$C_MAXRSS);
    CH$MOVE(FAB$C_BLN, ACCOUNT_FAB_A, ACCOUNT_FAB_B);
    CH$MOVE(RAB$C_BLN, ACCOUNT_RAB_A, ACCOUNT_RAB_B);
    CH$MOVE(NAM$C_BLN, ACCOUNT_NAM_A, ACCOUNT_NAM_B);
    ACCOUNT_FAB_B[FAB$L_NAM] = ACCOUNT_NAM_B;
    ACCOUNT_RAB_B[RAB$L_FAB] = ACCOUNT_FAB_B;
    ACCOUNT_NAM_B[NAM$L_RSA] = ACCOUNT_RSA_B;
    END;


! Pick up pointers to the current and new FAB and RAB.
!
OLD_FAB = .ACCOUNTING_FABS[0];
NEW_FAB = .ACCOUNTING_FABS[1];
OLD_RAB = .ACCOUNTING_RABS[0];
NEW_RAB = .ACCOUNTING_RABS[1];


! If an accounting file is currently open, unconditionally create a new file.
! Otherwise, use the CIF option to connect to the end of the existing file.
! Set up ALQ for no initial allocation.
!
NEW_FAB[FAB$V_CIF] = TRUE;
OLD_IFI = .OLD_FAB[FAB$W_IFI];
IF .OLD_IFI NEQ 0 OR .NEW THEN NEW_FAB[FAB$V_CIF] = FALSE;


! Create or open the file.  Accept an error that occurs during a create-if,
! and loop to create a new version.
!
WHILE TRUE DO
    BEGIN
    NEW_FAB[FAB$L_ALQ] = 0;
    IF NOT $CREATE(FAB=.NEW_FAB)
    THEN
	BEGIN
	IF TESTBITCC(NEW_FAB[FAB$V_CIF])
	THEN
	    BEGIN
	    SIGNAL_FILE_ERROR(JBC$_OPENOUT + STS$K_ERROR, .NEW_FAB, .NEW_FAB);
	    EXITLOOP;
	    END;
	END
    ELSE
	BEGIN
	IF NOT $CONNECT(RAB=.NEW_RAB)
	THEN
	    BEGIN
	    SIGNAL_FILE_ERROR(JBC$_OPENOUT + STS$K_ERROR, .NEW_FAB, .NEW_RAB);
	    $CLOSE(FAB=.NEW_FAB);
	    NEW_FAB[FAB$W_IFI] = 0;
	    END;
	EXITLOOP;
	END;
    END;


! If an accounting file was previously open and a new file has been created,
! write the file forward link record.  Omit this if forced creation of a new
! file is requested, since the previous file sustained an error.
!
IF (NOT .NEW_FAB[FAB$V_CIF] OR .NEW_FAB[FAB$L_STS] EQL RMS$_CREATED)
AND .OLD_IFI NEQ 0
THEN
    BEGIN
    IF NOT .NEW THEN WRITE_FILE_LINK_RECORD(ACR$K_FILE_FL, .NEW_FAB);
    CLOSE_ACCOUNTING_FILE();
    END;


! Exchange FAB and RAB pointers.
!
ACCOUNTING_FABS[0] = .NEW_FAB;
ACCOUNTING_FABS[1] = .OLD_FAB;
ACCOUNTING_RABS[0] = .NEW_RAB;
ACCOUNTING_RABS[1] = .OLD_RAB;


! If an accounting file was previously open, write the file back link record.
!
IF .OLD_IFI NEQ 0 THEN WRITE_FILE_LINK_RECORD(ACR$K_FILE_BL, .OLD_FAB);
END;

GLOBAL ROUTINE CLOSE_ACCOUNTING_FILE: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine closes an accounting file, if one is open.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Accounting file closed.
!
!--

BEGIN
LOCAL
	FAB:		REF BBLOCK,	! Pointer to FAB
	RAB:		REF BBLOCK;	! Pointer to RAB


FAB = .ACCOUNTING_FABS[0];
RAB = .ACCOUNTING_RABS[0];


IF .FAB[FAB$W_IFI] NEQ 0
THEN
    BEGIN
    IF TESTBITSC(RAB[RAB$V_ASY])
    THEN
	IF NOT $WAIT(RAB=.RAB)
	THEN
	    SIGNAL_FILE_ERROR(JBC$_WRITEERR + STS$K_ERROR, .FAB, .RAB);


    IF NOT $CLOSE(FAB=.FAB)
    THEN
	SIGNAL_FILE_ERROR(JBC$_CLOSEOUT + STS$K_ERROR, .FAB, .FAB);


    FAB[FAB$W_IFI] = 0;
    END;
END;

MACRO ACM_RECORD(TYPE,SUBTYPE,TIME,ACR)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This macro builds the record header.
!
! INPUT PARAMETERS:
!	TYPE		- Record type.
!	SUBTYPE		- Record subtype.
!	TIME		- Pointer to quadword event time.
!	ACR		- Pointer to accounting record buffer.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	Record header built in record buffer.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
BBLOCK[ACR, ACR$W_LENGTH] = ACR$K_HDRLEN;
%IF %CTCE(TYPE) AND %CTCE(SUBTYPE)
%THEN
    BBLOCK[ACR, ACR$W_TYPE] =
	(TYPE) ^ $BITPOSITION(ACR$V_TYPE) OR
	(SUBTYPE) ^ $BITPOSITION(ACR$V_SUBTYPE) OR
	ACR$K_CURVER ^ $BITPOSITION(ACR$V_VERSION)
%ELSE
    %IF %CTCE(SUBTYPE)
    %THEN
	BBLOCK[ACR, ACR$W_TYPE] =
	    (SUBTYPE) ^ $BITPOSITION(ACR$V_SUBTYPE) OR
	    ACR$K_CURVER ^ $BITPOSITION(ACR$V_VERSION);
	BBLOCK[ACR, ACR$V_TYPE] = (TYPE)
    %ELSE
	BBLOCK[ACR, ACR$W_TYPE] =
	    ACR$K_CURVER ^ $BITPOSITION(ACR$V_VERSION);
	BBLOCK[ACR, ACR$V_TYPE] = (TYPE);
	BBLOCK[ACR, ACR$V_SUBTYPE] = (SUBTYPE)
    %FI
%FI;
(BBLOCK[ACR, ACR$Q_SYSTIME]+0) = .VECTOR[TIME, 0];
(BBLOCK[ACR, ACR$Q_SYSTIME]+4) = .VECTOR[TIME, 1];
END %;

MACRO ACM_PACKET(TYPE,SUBTYPE,ACR,APK)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This macro builds the packet header.
!
! INPUT PARAMETERS:
!	TYPE		- Packet type.
!	SUBTYPE		- Packet subtype.
!	ACR		- Pointer to accounting record buffer.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	APK		- Pointer to packet.
!
! IMPLICIT OUTPUTS:
!	Packet header built in record buffer.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
APK = (ACR) + .BBLOCK[ACR, ACR$W_LENGTH];
APK[ACR$W_LENGTH] = 0;
%IF %CTCE(TYPE) AND %CTCE(SUBTYPE)
%THEN
    APK[ACR$W_TYPE] =
	ACR$M_PACKET OR
	(TYPE) ^ $BITPOSITION(ACR$V_TYPE) OR
	(SUBTYPE) ^ $BITPOSITION(ACR$V_SUBTYPE) OR
	ACR$K_CURVER ^ $BITPOSITION(ACR$V_VERSION)
%ELSE
    APK[ACR$W_TYPE] =
	ACR$M_PACKET OR
	ACR$K_CURVER ^ $BITPOSITION(ACR$V_VERSION);
    APK[ACR$V_TYPE] = (TYPE);
    APK[ACR$V_SUBTYPE] = (SUBTYPE)
%FI;
END %;

ROUTINE IDENT_PACKET: L_IDENT_PACKET NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine builds the identification packet.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	ACM		- Pointer to mailbox message.
!	ACR		- Pointer to accounting record buffer.
!	SJH		- Pointer to SJH or 0.
!	SMQ		- Pointer to SMQ or 0.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	Identification packet built in record buffer.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
EXTERNAL REGISTER
	ACM = ACCT_ACM_REG:	REF BBLOCK,	! Pointer to mailbox message
	ACR = ACCT_ACR_REG:	REF BBLOCK,	! Pointer to record buffer
	SJH = ACCT_SJH_REG:	REF BBLOCK,	! Pointer to SJH
	SMQ = ACCT_SMQ_REG:	REF BBLOCK;	! Pointer to SMQ
LOCAL
	APK:		REF BBLOCK;	! Pointer to packet
REGISTER
	P = 3;				! Pointer to free byte


ACM_PACKET(ACR$K_ID, 0, .ACR, APK);
APK[ACR$L_PID] = .ACM[ACM$L_PID];
APK[ACR$L_OWNER] = .ACM[ACM$L_OWNER];
APK[ACR$L_UIC] = .ACM[ACM$L_UIC];
(APK[ACR$Q_PRIV]+0) = .(ACM[ACM$Q_PRVMSK]+0);
(APK[ACR$Q_PRIV]+4) = .(ACM[ACM$Q_PRVMSK]+4);
APK[ACR$B_PRI] = .ACM[ACM$B_PROCPRI];
(APK[ACR$B_PRI]+1)<0,8> = 0;


APK[ACR$W_ACCOUNT] = 0;
APK[ACR$W_NODENAME] = 0;
APK[ACR$W_TERMINAL] = 0;
APK[ACR$W_JOBNAME] = 0;
APK[ACR$L_JOBID] = 0;
APK[ACR$W_QUEUE] = 0;
APK[ACR$W_NODEADDR] = 0;
APK[ACR$W_REMOTEID] = 0;
P = APK[ACR$K_IDVAR,0,0,0];


BEGIN ! block to use output registers
REGISTER
    R0 = 0;

APK[ACR$W_USERNAME] = .P - .APK;
LOCC(%REF(%C' '), %REF(ACM$S_USERNAME), ACM[ACM$T_USERNAME]; R0);
R0 = ACM$S_USERNAME - .R0;
(.P)<0,8> = .R0;
P = .P + 1;
MOVC3(R0, ACM[ACM$T_USERNAME], .P; ,,, P);
END; ! block to use output registers


BEGIN ! block to use output registers
REGISTER
    R0 = 0,
    R1 = 1 : REF VECTOR[,BYTE];

!
! Strip leading binary nulls and trailing blanks from the account name.
! Don't move over the account name at all if it is totally binary nulls.
!
IF SKPC(%REF(0), %REF(ACM$S_ACCOUNT), ACM[ACM$T_ACCOUNT]; R0, R1)
THEN
    BEGIN
    DO
	BEGIN
	IF .R1[.R0 - 1] NEQ %C' '
	THEN
	    EXITLOOP;
	R0 = .R0 - 1;
	END
    WHILE .R0 GTR 0;
    APK[ACR$W_ACCOUNT] = .P - .APK;
    (.P)<0,8> = .R0;
    P = .P + 1;
    MOVC3(R0, .R1, .P; ,,, P);
    END;
END; ! block to use output registers


IF ONEOF_(.ACR[ACR$V_TYPE], BMSK_(
    ACR$K_PRCDEL, ACR$K_LOGFAIL, ACR$K_IMGDEL, ACR$K_PRCPUR, ACR$K_IMGPUR))
THEN
    BEGIN
    IF .ACM[ACM$W_NODEADDR] NEQ 0
    THEN
	BEGIN
	LOCAL
	    Q:		REF VECTOR[,BYTE],	! Pointer to ASCIC data
	    L;					! Length of data
    
	Q = .ACM + .ACM[ACM$W_NODEADDR];
	L = .Q[0];
	IF .L NEQ 0
	THEN
	    BEGIN
	    APK[ACR$W_NODEADDR] = .P - .APK;
	    MOVC3(%REF(.L + 1), .Q, .P; ,,, P);
	    END;
	END;


    IF .ACM[ACM$W_NODENAME] NEQ 0
    THEN
	BEGIN
	LOCAL
	    Q:		REF VECTOR[,BYTE],	! Pointer to ASCIC data
	    L;					! Length of data
    
	Q = .ACM + .ACM[ACM$W_NODENAME];
	L = .Q[0];
	IF .L NEQ 0
	THEN
	    BEGIN
	    APK[ACR$W_NODENAME] = .P - .APK;
	    MOVC3(%REF(.L + 1), .Q, .P; ,,, P);
	    END;
	END;


    IF .ACM[ACM$W_REMOTEID] NEQ 0
    THEN
	BEGIN
	LOCAL
	    Q:		REF VECTOR[,BYTE],	! Pointer to ASCIC data
	    L;					! Length of data
    
	Q = .ACM + .ACM[ACM$W_REMOTEID];
	L = .Q[0];
	IF .L NEQ 0
	THEN
	    BEGIN
	    APK[ACR$W_REMOTEID] = .P - .APK;
	    MOVC3(%REF(.L + 1), .Q, .P; ,,, P);
	    END;
	END;
    END;


IF CH$RCHAR(ACM[ACM$T_TERMINAL]) NEQ 0
THEN
    BEGIN
    APK[ACR$W_TERMINAL] = .P - .APK;
    MOVC3(%REF(CH$RCHAR(ACM[ACM$T_TERMINAL]) + 1), ACM[ACM$T_TERMINAL], .P; ,,, P);
    END;


IF .SJH NEQ 0
THEN
    BEGIN
    APK[ACR$L_JOBID] = .SJH[SYM$L_ENTRY_NUMBER];
    APK[ACR$W_JOBNAME] = .P - .APK;
    MOVC3(%REF(CH$RCHAR(SJH[SJH$T_NAME]) + 1), SJH[SJH$T_NAME], .P; ,,, P);
    APK[ACR$W_QUEUE] = .P - .APK;
    MOVC3(%REF(CH$RCHAR(SMQ[SMQ$T_NAME]) + 1), SMQ[SMQ$T_NAME], .P; ,,, P);
    END;


APK[ACR$W_LENGTH] = .P - .APK;
ACR[ACR$W_LENGTH] = .P - .ACR;
END;

ROUTINE RESOURCE_PACKET: L_RESOURCE_PACKET NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine builds the resource usage packet.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	ACM		- Pointer to mailbox message.
!	ACR		- Pointer to accounting record buffer.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	Resource packet built in record buffer.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
EXTERNAL REGISTER
	ACM = ACCT_ACM_REG:	REF BBLOCK,	! Pointer to mailbox message
	ACR = ACCT_ACR_REG:	REF BBLOCK;	! Pointer to record buffer
LOCAL
	APK:		REF BBLOCK;	! Pointer to packet
REGISTER
	P = 3;				! Pointer to free byte


ACM_PACKET(ACR$K_RESOURCE, 0, .ACR, APK);
MOVC3(
    %REF($BYTEOFFSET(ACM$L_VOLUMES) + 4 - $BYTEOFFSET(ACM$Q_LOGIN)),
    ACM[ACM$Q_LOGIN],
    APK[ACR$Q_LOGIN]; ,,, P);
APK[ACR$W_LENGTH] = .P - .APK;
ACR[ACR$W_LENGTH] = .P - .ACR;
END;

GLOBAL ROUTINE WRITE_USER_ACCOUNTING_RECORD(PACM,PSJH,PSMQ,LENGTH,ADDRESS): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine builds the user data record.
!
! INPUT PARAMETERS:
!	PACM		- Pointer to mailbox message.
!	PSJH		- Pointer to SJH or 0.
!	PSMQ		- Pointer to SMQ or 0.
!	LENGTH		- Descriptor for user data.
!	ADDRESS		-
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	ACR_BUFFER:	BBLOCK[JBC$K_MAXACCREC],	! Record buffer
	APK:		REF BBLOCK;		! Pointer to packet
REGISTER
	P = 3;					! Pointer to free byte
GLOBAL REGISTER
	ACM = ACCT_ACM_REG:	REF BBLOCK,	! Pointer to mailbox message
	ACR = ACCT_ACR_REG:	REF BBLOCK,	! Pointer to record buffer
	SJH = ACCT_SJH_REG:	REF BBLOCK,	! Pointer to SJH or 0
	SMQ = ACCT_SMQ_REG:	REF BBLOCK;	! Pointer to SMQ or 0


ACM = .PACM;
ACR = ACR_BUFFER;
SJH = .PSJH;
SMQ = .PSMQ;
ACM_RECORD(ACR$K_USER, 0, CUR_TIME, .ACR);
IDENT_PACKET();
ACM_PACKET(ACR$K_USER_DATA, 0, .ACR, APK);
CH$WCHAR(.LENGTH, APK[ACR$T_USER_DATA]);
MOVC3(LENGTH, .ADDRESS, APK[ACR$T_USER_DATA]+1; ,,, P);
APK[ACR$W_LENGTH] = .P - .APK;
ACR[ACR$W_LENGTH] = .P - .ACR;
WRITE_ACCOUNTING_FILE();
END;

ROUTINE WRITE_FILE_LINK_RECORD(TYPE,FAB): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine builds the accounting file forward and back link records.
!
! INPUT PARAMETERS:
!	TYPE		- Record type (ACR$K_FILE_FL, ACR$K_FILE_BL).
!	FAB		- Pointer to FAB from which to obtain filespec.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Accounting record written.
!
!--

BEGIN
MAP
	FAB:		REF BBLOCK;	! Pointer to FAB
LOCAL
	ACR_BUFFER:	BBLOCK[JBC$K_MAXACCREC],	! Record buffer
	APK:		REF BBLOCK,	! Pointer to packet
	NAM:		REF BBLOCK,	! Pointer to NAM block
	L;				! Length of filename
REGISTER
	P = 3;				! Pointer to free byte
GLOBAL REGISTER
	ACR = ACCT_ACR_REG:	REF BBLOCK;	! Pointer to record buffer


ACR = ACR_BUFFER;
ACM_RECORD(.TYPE, 0, CUR_TIME, .ACR);
ACM_PACKET(ACR$K_FILENAME, 0, .ACR, APK);
P = APK[ACR$T_FILENAME];
NAM = .FAB[FAB$L_NAM];
L = .NAM[NAM$B_RSL];
(.P)<0,8> = .L;
P = .P + 1;
MOVC3(L, .NAM[NAM$L_RSA], .P; ,,, P);
APK[ACR$W_LENGTH] = .P - .APK;
ACR[ACR$W_LENGTH] = .P - .ACR;
WRITE_ACCOUNTING_FILE();
END;

GLOBAL ROUTINE WRITE_ACCOUNTING_RECORD(SJH,SMQ,ACM,STS): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine builds and writes an accounting record for a process, a
!	completed batch or symbiont job, or an incomplete job.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	SJH		- Pointer to SJH or 0.
!	SMQ		- Pointer to SMQ or 0.
!	ACM		- Pointer to ACM or 0.
!	STS		- (Optional) Forced completion status.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Accounting record written.
!
!--

BEGIN
MAP
	SJH:		REF BBLOCK,	! Pointer to SJH
	SMQ:		REF BBLOCK;	! Pointer to SMQ
LOCAL
	LACM:		BBLOCK[$BYTEOFFSET(ACM$W_IMAGENAME)+2];	! Fake message
BUILTIN
	ACTUALCOUNT;


IF .SMQ EQL 0
THEN
    WRITE_PROCESS_RECORD(0, 0, .ACM)
ELSE
    IF .SMQ[SMQ$V_BATCH]
    THEN
	IF .ACM NEQ 0
	THEN
	    WRITE_PROCESS_RECORD(.SJH, .SMQ, .ACM)
	ELSE
	    BEGIN
	    CH$FILL(0, %ALLOCATION(LACM), LACM);
	    LACM[ACM$W_TYPE] = MSG$_DELPROC;
	    LACM[ACM$L_UIC] = .SJH[SJH$L_UIC];
	    CH$MOVE(SJH$S_USERNAME, SJH[SJH$T_USERNAME], LACM[ACM$T_USERNAME]);
	    CH$MOVE(SJH$S_ACCOUNT, SJH[SJH$T_ACCOUNT], LACM[ACM$T_ACCOUNT]);
	    BITVECTOR[LACM[ACM$L_STS], $BITPOSITION(PCB$V_BATCH)] = TRUE;
	    COPY_TIME(CUR_TIME, LACM[ACM$Q_LOGIN]);
	    IF ACTUALCOUNT() GTRU 3
	    THEN
		BEGIN
		LACM[ACM$L_FINALSTS] = .STS;
		SJH[SJH$L_CONDITION_1] = .STS;
		SJH[SJH$L_CONDITION_2] = 0;
		SJH[SJH$L_CONDITION_3] = 0;
		END;
	    WRITE_PROCESS_RECORD(.SJH, .SMQ, LACM);
	    END
    ELSE
	BEGIN
	IF ACTUALCOUNT() GTRU 3
	THEN
	    BEGIN
	    SJH[SJH$L_CONDITION_1] = .STS;
	    SJH[SJH$L_CONDITION_2] = 0;
	    SJH[SJH$L_CONDITION_3] = 0;
	    END;
	IF .(SMQ[SMQ$Q_ACM_BEGTIM]) EQL 0
	THEN
	    COPY_TIME(CUR_TIME, SMQ[SMQ$Q_ACM_BEGTIM]);
	WRITE_PRINT_RECORD(.SJH, .SMQ);
	END;
END;

ROUTINE WRITE_PRINT_RECORD(PSJH,PSMQ): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine builds the print accounting record.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	PSJH		- Pointer to SJH.
!	PSMQ		- Pointer to SMQ.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Print accounting record written.
!
!--

BEGIN
LOCAL
	ACM_BUFFER:	BBLOCK[$BYTEOFFSET(ACM$W_USERREQ)],	! Fake message
	ACR_BUFFER:	BBLOCK[JBC$K_MAXACCREC],	! Record buffer
	APK:		REF BBLOCK;		! Pointer to packet
GLOBAL REGISTER
	ACM = ACCT_ACM_REG:	REF BBLOCK,	! Pointer to accounting message
	ACR = ACCT_ACR_REG:	REF BBLOCK,	! Pointer to record buffer
	SJH = ACCT_SJH_REG:	REF BBLOCK,	! Pointer to SJH
	SMQ = ACCT_SMQ_REG:	REF BBLOCK;	! Pointer to SMQ


ACM = ACM_BUFFER;
SJH = .PSJH;
SMQ = .PSMQ;
CH$FILL(0, %ALLOCATION(ACM_BUFFER), .ACM);
ACM[ACM$L_PID] = .SJH[SJH$L_PID];
ACM[ACM$L_UIC] = .SJH[SJH$L_UIC];
ACM[ACM$B_PROCPRI] = .SJH[SJH$B_PRIORITY];
CH$MOVE(ACM$S_USERNAME, SJH[SJH$T_USERNAME], ACM[ACM$T_USERNAME]);
CH$MOVE(ACM$S_ACCOUNT, SJH[SJH$T_ACCOUNT], ACM[ACM$T_ACCOUNT]);


ACR = ACR_BUFFER;
ACM_RECORD(ACR$K_PRINT, 0, CUR_TIME, .ACR);
IDENT_PACKET();
ACM_PACKET(ACR$K_PRINT, 0, .ACR, APK);
APK[ACR$L_PRINTSTS] = .SJH[SJH$L_CONDITION_1];
COPY_TIME(SJH[SJH$Q_TIME], APK[ACR$Q_QUETIME]);
COPY_TIME(SMQ[SMQ$Q_ACM_BEGTIM], APK[ACR$Q_BEGTIME]);
APK[ACR$L_SYMCPUTIM] = .SMQ[SMQ$L_ACM_SYMCPUTIM];
APK[ACR$L_PAGECNT] = .SMQ[SMQ$L_ACM_PAGECNT];
APK[ACR$L_QIOCNT] = .SMQ[SMQ$L_ACM_QIOCNT];
APK[ACR$L_GETCNT] = .SMQ[SMQ$L_ACM_GETCNT];
APK[ACR$W_LENGTH] = $BYTEOFFSET(ACR$L_GETCNT) + 4;
ACR[ACR$W_LENGTH] = .APK + $BYTEOFFSET(ACR$L_GETCNT) + 4 - .ACR;
WRITE_ACCOUNTING_FILE();


CLEAR_TIME(SMQ[SMQ$Q_ACM_BEGTIM]); 
SMQ[SMQ$L_ACM_SYMCPUTIM] = 0;
SMQ[SMQ$L_ACM_PAGECNT] = 0;
SMQ[SMQ$L_ACM_QIOCNT] = 0;
SMQ[SMQ$L_ACM_GETCNT] = 0;
END;

ROUTINE WRITE_PROCESS_RECORD(PSJH,PSMQ,PACM): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine builds process deletion, process purge, image deletion,
!	image purge, login failure, and system initialization records.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	PSJH		- Pointer to SJH or 0.
!	PSMQ		- Pointer to SMQ or 0.
!	PACM		- Pointer to mailbox message.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	ACR_BUFFER:	BBLOCK[JBC$K_MAXACCREC],	! Record buffer
	TYPE,				! Record type
	SUBTYPE;			! Record subtype
GLOBAL REGISTER
	ACM = ACCT_ACM_REG:	REF BBLOCK,	! Pointer to mailbox message
	ACR = ACCT_ACR_REG:	REF BBLOCK,	! Pointer to record buffer
	SJH = ACCT_SJH_REG:	REF BBLOCK,	! Pointer to SJH or 0
	SMQ = ACCT_SMQ_REG:	REF BBLOCK;	! Pointer to SMQ or 0


ACM = .PACM;
ACR = ACR_BUFFER;
SJH = .PSJH;
SMQ = .PSMQ;
IF .SJH NEQ 0 THEN ACM[ACM$L_FINALSTS] = .SJH[SJH$L_CONDITION_1];
SUBTYPE = 0;
IF
    BEGIN
    CASE .ACM[ACM$W_TYPE] FROM MSG$_DELPROC TO MSG$_PURIMAG OF
	SET

	[INRANGE, OUTRANGE]:
	    RETURN;

!+
! DELPROC messages generate one of the following accounting records:
!
!    SYSINIT	System Initialization; the STARTUP process terminated
!    LOGFAIL	Login Failure; LOGINOUT terminated with an authorization error
!    PRCDEL	Normal process termination
!
! Account names starting with a binary null are special, reserved to
! Digital, account names.  These special account names are used to determine
! what kind to accounting record to generate here.
!
! The system STARTUP process starts out life with an account name of all
! binary nulls.  This is changed to a single binary null followed by
! '<start>' when it gets set logged in by LOGINOUT.  Furthermore, the
! STARTUP process has no terminal and a username of SYSTEM.  These
! characteristics are checked and, if met, cause a SYSINIT record.
!
! A login failure has an account name starting with a single binary
! null followed by some descriptive keyword enclosed by <>'s.  This
! special account name is set up by LOGINOUT whenever it must terminate
! due to an authorization failure.  Account names of this special
! form cause a LOGFAIL record.  The following special account name
! descriptive keywords are currently used:
!
!    <batch>	Batch job login failure
!    <det>	Detached process login failure
!    <login>	Interactive login failure
!    <net>	Network login failure
!
! Otherwise, a PRCDEL record is generated.
!-

	[MSG$_DELPROC]:
	    BEGIN
	    MACRO
		SYSINIT_ACCOUNT = %STRING(%CHAR(0), '<start>')%;
	    LOCAL
		NON_NULLS;
	    SKPC(%REF(0), %REF(ACM$S_ACCOUNT), ACM[ACM$T_ACCOUNT]; NON_NULLS);
	    IF (.NON_NULLS EQL 0
		    OR
		CH$EQL(
		ACM$S_ACCOUNT, ACM[ACM$T_ACCOUNT],
		%CHARCOUNT(SYSINIT_ACCOUNT), UPLIT BYTE(SYSINIT_ACCOUNT),
		%C' '))
	    AND CH$RCHAR(ACM[ACM$T_TERMINAL]) EQL 0
	    AND CH$EQL(
		ACM$S_USERNAME, ACM[ACM$T_USERNAME],
		%CHARCOUNT('SYSTEM'), UPLIT BYTE('SYSTEM'),
		%C' ')
	    THEN
		BEGIN
		ACM_RECORD(ACR$K_SYSINIT, 0, CUR_TIME, .ACR);
		IDENT_PACKET();
		RESOURCE_PACKET();
		WRITE_ACCOUNTING_FILE();
		RETURN;
		END;
	    IF (.NON_NULLS EQL 0
		    AND
		CH$RCHAR(ACM[ACM$T_TERMINAL]) NEQ 0)
	    OR .NON_NULLS EQL ACM$S_ACCOUNT - 1
	    THEN
		BEGIN
		TYPE = ACR$K_LOGFAIL;
		FALSE
		END
	    ELSE
		BEGIN
		TYPE = ACR$K_PRCDEL;
		TRUE
		END
	    END;

	[MSG$_PURPROC]:
	    BEGIN
	    TYPE = ACR$K_PRCPUR;
	    TRUE
	    END;

	[MSG$_DELIMAG]:
	    BEGIN
	    TYPE = ACR$K_IMGDEL;
	    TRUE
	    END;

	[MSG$_PURIMAG]:
	    BEGIN
	    TYPE = ACR$K_IMGPUR;
	    TRUE
	    END;

	TES
    END
THEN
    BEGIN
    IF CH$RCHAR(ACM[ACM$T_TERMINAL]) NEQ 0
    THEN
	SUBTYPE = ACR$K_INTERACTIVE

    ELSE IF .BITVECTOR[ACM[ACM$L_STS], $BITPOSITION(PCB$V_BATCH)]
    THEN
	SUBTYPE = ACR$K_BATCH

    ELSE IF .BITVECTOR[ACM[ACM$L_STS], $BITPOSITION(PCB$V_NETWRK)]
    THEN
	SUBTYPE = ACR$K_NETWORK

    ELSE IF .ACM[ACM$L_OWNER] NEQ 0
    THEN
	SUBTYPE = ACR$K_SUBPROCESS

    ELSE
	SUBTYPE = ACR$K_DETACHED;
    END;


ACM_RECORD(.TYPE, .SUBTYPE, CUR_TIME, .ACR);
IDENT_PACKET();
RESOURCE_PACKET();


IF ONEOF_(.TYPE, BMSK_(ACR$K_IMGPUR, ACR$K_IMGDEL))
THEN
    BEGIN
    LOCAL
	APK:		REF BBLOCK,		! Pointer to packet
	Q:		REF VECTOR[,BYTE];	! Pointer to image name string
    REGISTER
	P = 3;					! Pointer to free byte


    ACM_PACKET(ACR$K_IMAGENAME, 0, .ACR, APK);
    Q = .ACM + .ACM[ACM$W_IMAGENAME];
    MOVC3(%REF(.Q[0] + 1), .Q, APK[ACR$T_IMAGENAME]; ,,, P);
    APK[ACR$W_LENGTH] = .P - .APK;
    ACR[ACR$W_LENGTH] = .P - .ACR;
    END;


WRITE_ACCOUNTING_FILE();
END;

GLOBAL ROUTINE PROCESS_ACCOUNTING: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine processes the message types:
!		MSG$_PURPROC		process purge
!		MSG$_DELIMAG		image deletion
!		MSG$_PURIMAG		image purge
!	by writing an accounting record.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	MBX		- Pointer to buffered mailbox message.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Accounting record written.
!
!--

BEGIN
LOCAL
	SJH_N,				! Record number of SJH
	SMQ_N;				! Record number of SMQ


IF
    BEGIN
    IF .BITVECTOR[MBX[ACM$L_STS], $BITPOSITION(PCB$V_BATCH)]
    THEN
	FIND_PROCESS_DATA(
	    PDE_K_BATCH, .MBX[ACM$L_PID], FALSE;
	    , SMQ_N, SJH_N)
    ELSE
	FALSE
    END
THEN
    BEGIN
    LOCK_QUEUE_FILE();
    WRITE_PROCESS_RECORD(
	READ_RECORD(.SJH_N),
	READ_RECORD(.SMQ_N),
	.MBX);
    UNLOCK_QUEUE_FILE();
    END
ELSE
    WRITE_PROCESS_RECORD(0, 0, .MBX);
END;

END
ELUDOM
