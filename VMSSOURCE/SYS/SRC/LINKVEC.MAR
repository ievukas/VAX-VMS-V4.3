	.TITLE	LINKVEC - link loadable EXEC to vectors
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: VMS Executive, system initialization services.
;
; ABSTRACT:
;
;	This module contains the code to connect various pieces of the
;	loadable EXEC up to their system vectors.  This code is used
;	at system boot time by the module INIT, but may be used later
;	in the life of the system as well.
;
; ENVIRONMENT:
;
;	Kernel Mode
;
; AUTHOR:
;
;	Steven T. Jeffreys
;
; CREATION DATE:
;
;	 27 November, 1982
;
; MODIFIED BY:
;
;	V03-001	JWH0205		Jeffrey W. Horn		24-Mar-1983
;		Add two vector type codes, SLV$K_SDATA and SLV$K_SJUMP.
;		Also fix bug in ADATA vector processing, code was not
;		accounting for bytes skiped in SYS.EXE because of .ALIGN
;		directives.
;
;
;--

;
; Declarations:
;

	$DYNDEF				; Define data structure id codes
	$SLVDEF				; Define system loadable vector offsets
	$SSDEF				; define status codes
	.PAGE
	.SBTTL	EXE$LINK_VEC - Connect vector to loaded code
;++	
;		
; FUNCTIONAL DESCRIPTION:
;	
;	Given a list of self-relative offsets to loadable routines/data,
;	and a parallel list of system vectors, ensure that both lists
;	look reasonable, then relocate the info and plug it into the
;	appropriate system vector.
;
; CALLING SEQUENCE:	
;
;	JSB/BSB	EXE$LINK_VEC
;
; INPUTS:
;
;	R2 = pointer into list of self-relative offsets into loaded code
;	R3 = address at which calculated address of loaded routines/data
;	     structures should be written
;
; OUTPUTS:
;
;	The contents of all registers, save R0, are preserved.
;
; SIDE EFFECTS:
;
;	None.
;
; ROUTINE VALUE:
;
;	R0 = SS$_BADIMGHDR	: bad data structure pointed to be R2, no load.
;
;	All other status codes are returned by called routines, and are simply
;	passed back to the caller of EXE$LINK_VEC.  They are listed here for
;	convenience sake, and also in the appropriate routine header.
;
;	R0 = SS$_NORMAL		: normal successful completion, code loaded.
;	   = SS$_BADVEC		: data structure has a bad vector, no load.
;--

	.PSECT	Z$INIT			; This code must be part of INIT

EXE$LINK_VEC::
	;
	;
	; The list of self-relative offsets has a fixed header.
	; Perform some sanity checks on that header.
	;
	;
	MOVZWL	#SS$_BADIMGHDR,R0	; Assume not the right kind of image
	CMPW	SLV$L_CODESIZE(R2),-	; Check redundant code size info
		SLV$W_SIZE(R2)	;
	BNEQ	69$			; Branch if error
	CMPB	#DYN$C_LOADCODE,-	; Check the data structure type
		SLV$B_TYPE(R2)		;
	BNEQ	69$			; Branch if error
	;
	;
	; Make two passes through the fixup vector information; the
	; first to verify that the information is valid, the second
	; to actually plug the information into the system vectors.
	;
	;
	PUSHR	#^M<R2,R3,R4>		; Save R2..R4
	MOVAL	SLV$T_LIST(R2),R2	; Step past the header
	CLRL	R4			; Indicate test mode
	BSBB	SCAN_VEC_LIST		; Check the fixup info
	BLBC	R0,69$			; Exit if error
	INCL	R4			; Indicate fixup mode
	MOVQ	(SP),R2			; Restore R2 and R3
	MOVAL	SLV$T_LIST(R2),R2	; Step past the header
	BSBB	SCAN_VEC_LIST		; Plug the system vectors
69$:	POPR	#^M<R2,R3,R4>		; Restore R2..R4
	RSB				; Return
	.PAGE
	.SBTTL	SCAN_VEC_LIST - scan fixup vector list
;++	
;		
; FUNCTIONAL DESCRIPTION:
;	
;	Scan through a list of self relative vectors, and conditionally
;	check the validity of the list or load the information in the list
;	into a system vector.
;
; CALLING SEQUENCE:	
;
;	JSB/BSB	SCAN_VEC_LIST
;
; INPUTS:
;
;	R2 = pointer into list of self-relative offsets into loaded code
;	R3 = address at which calculated address of loaded routines/data
;	     structures should be written
;	R4 = action indicator. 0 implies sanity check, 1 implies load vectors.
;
; SIDE EFFECTS:
;
;	None.
;
; ROUTINE VALUE:
;
;	R0 = SS$_NORMAL		: normal successful completion, code loaded.
;	   = SS$_BADVEC		: data structure has a bad vector, no load.
;
;--

SCAN_VEC_LIST:				; Scan fixup vector list
	PUSHL	R1			; Save R1
	MOVZWL	#SLV$K_MAXVEC,R1	; Set loop limit
1$:	CVTBL	(R2)+,R0		; Pick up the type byte
	BLEQ	11$			; Leave if <= 0
	BSBB	PROCESS_VECTOR		; Perform vector type-dependent work
	BLBC	R0,13$			; Branch if error
	SOBGTR	R1,1$			; Branch if more to go
	MOVZWL	#SS$_BADVEC,R0		; Assume bad vector
	BRB	13$			; Return with error status
11$:	MOVZWL	#SS$_NORMAL,R0		; Set success status
13$:	POPR	#^M<R1>			; Restor R1
	RSB				; Return
	.PAGE
	.SBTTL	PROCESS_VECTOR - vector type-dependent processing
;++	
;		
; FUNCTIONAL DESCRIPTION:
;	
;
; CALLING SEQUENCE:	
;
;	JSB/BSB	PROCESS_VECTOR
;
; INPUTS:
;
;	R0 = vector type code
;	R2 = pointer into list of self-relative offsets into loaded code
;	R3 = address of the system vector
;	R4 = action indicator. 0 implies sanity check, 1 implies load vectors.
;
; OUTPUT:
;
;	R2 and R3 are updated to point to the next entries
;	in their respective lists.  However, if an error is
;	detected, the contents of R2 and R3 are unpredictable.
;
; SIDE EFFECTS:
;
;	None.
;
; ROUTINE VALUE:
;
;	R0 = SS$_NORMAL		: normal successful completion, code loaded.
;	   = SS$_BADVEC		: data structure has a bad vector, no load.
;
;--

ABSOLUTE_JMP	= ^X9F17		; Hex equivalent of "JMP @#"

PROCESS_VECTOR:				; Vector type-dependent checks
	;
	;
	; CASE on the vector type code to the appropriate vector handler.
	;
	;

	ASSUME	SLV$K_LDATA EQ SLV$K_MINTYPE
	ASSUME  SLV$K_AJUMP EQ SLV$K_MINTYPE+1
	ASSUME	SLV$K_UJUMP EQ SLV$K_MINTYPE+2
	ASSUME	SLV$K_SDATA EQ SLV$K_MINTYPE+3
	ASSUME  SLV$K_SJUMP EQ SLV$K_MINTYPE+4
	ASSUME  SLV$K_SJUMP EQ SLV$K_MAXTYPE

	CASEW	R0,#SLV$K_MINTYPE,#SLV$K_MAXTYPE
					; Branch displacement table
1$:	.WORD	100$-1$			; If SLV$K_LDATA
	.WORD	200$-1$			; If SLV$K_AJUMP
	.WORD	300$-1$			; If SLV$K_UJUMP
	.WORD	400$-1$			; If SLV$K_SDATA
	.WORD	500$-1$			; If SLV$K_SJUMP
					; Fall through if value out of range
	BRB	696969$			; Branch to common failure path
	;
	;
	; R0 = SLV$K_LDATA
	; The vector is for a longword of data, and has the form
	;
	;	.ALIGN
	;	.LONG	0
	;
100$:	ADDL	#3,R3			; Round up to nex longword boundry
	BICL	#3,R3			; 
	BRB	10000$			; continue with common code
	;
	;
	; R0 = SLV$K_AJUMP
	; The vector is for an aligned jump, and has the form
	;
	;	.ALIGN
	;	JMP	@#<32 bit address>
	;
	;
200$:	ADDL	#3,R3			; Round up to next longword boundary
	BICL	#3,R3			;
					; Fall through to common code
	;
	;
	; R0 = SLV$K_UJUMP
	; The vector is for an unligned jump, and has the form
	;
	;	JMP	@#<32 bit address>
	;
	;
300$:	CMPW	#ABSOLUTE_JMP,(R3)+	; First two bytes must be JMP @#
	BNEQ	696969$			; Branch if error


10000$:	MOVAL	(R3)+,R0		; get system vector address
	BRB	20000$

	;
	; R0 = SLV$K_SDATA
	; The system vector is for a longword of data, and has the form
	;
	;	.ALIGN
	;ENTRY::.LONG	0
	;
	; The load vector has the form:
	;
	;	.BYTE	SLV$K_SDATA
	;	.ADDRESS ENTRY
	;	.LONG	offset_to_data
	;
400$:	MOVL	(R2)+,R0		; get address
	BRB	20000$			; no special processing

	;
	; The system vector is for a jump, and has the form
	;
	;	.ALIGN
	;ENTRY::JMP	@#<32 bit address>
	;
	; The load vector has the form:
	;
	;	.BYTE	SLV$K_SJUMP
	;	.ADDRESS ENTRY
	;	.LONG	offset_to_routine
	;

500$:	MOVL	(R2)+,R0
	CMPW	(R0)+,#ABSOLUTE_JMP	; First two bytes must be JMP @#
	BNEQ	696969$			; Branch if error

	;
	; Common code for processing a longword of information
	; If R4 is 0, the contents of the system vector are not modified.
	; At this point.
	;	R0 = pointer to a longword system vector
	;	R2 = pointer to longword of loadable info
	;	R4 = action indicator. 0 impies CHECK, 1 implies LOAD

20000$:
	TSTL	R4			; CHECK mode?
	BNEQ	20001$			; Branch if not
	ADDL	#4,R2			; point to next item
	BRB	20002$			; Rejoin common code
20001$:	ADDL3	R2,(R2)+,(R0)		; Relocate info and plug the vector
20002$:	MOVZWL	#SS$_NORMAL,R0		; Set success status
	RSB
	;
	;
	; Common failure path.
	;
	;
696969$:MOVZWL	#SS$_BADVEC,R0		; Set failure status
	RSB				; Return with error
	.END
