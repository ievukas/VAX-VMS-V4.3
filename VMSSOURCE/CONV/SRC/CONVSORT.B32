%TITLE	'VAX-11 CONVERT'
MODULE	CONV$SORT	( IDENT='V04-000',
			OPTLEVEL=3
			) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT
!
! Abstract:	CONVERT routines wich sort the input file on the output
!		files primary key and to sort the output file by it's
!		secondary key
!
! Contents:
!		SORT_PRIMARY
!		SORT_SECONDARY
!		SET_UP_SORT
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Keith B Thompson	Creation date:	August-1980
!
!
! Modified by:
!
!	V03-013	RAS0272		Ron Schaefer		16-Mar-1984
!		Allow CONVERT to fastload/sort network files, now that
!		SORT-32 can handle them.
!
!	V03-012	RAS0260		Ron Schaefer		 6-Mar-1984
!		Modify input file specs for SORT for LIB$FIND_FILE.
!
!	V03-011	KBT0502		Keith B. Thompson	19-Apr-1983
!		Remove reference to SOR$M_SIGNAL
!
!	V03-010	KBT0467		Keith B. Thompson	21-Jan-1983
!		Don't bother calling set_key_desc in sort_primary because
!		we don't know if the file is still open for block io and
!		set_key_desc does a $read.  Also use the new sort interface.
!
!	V03-009	KBT0426		Keith B. Thompson	30-Nov-1982
!		Fix a naming problem with the convert termorary file
!		and remove sort error routine to get ready for the new
!		sort interface which will signal errors.
!
!	V03-008	KBT0393		Keith B. Thompson	29-Oct-1982
!		Use new set_key_desc routine
!
!	V03-007	KBT0379		Keith B. Thompson	21-Oct-1982
!		Fix the linkage definition to set_key_block
!
!	V03-006	KBT0348		Keith B. Thompson	4-Oct-1982
!		Use new linkage definitions (and fix history error
!		in cwh0001!)
!
!	V03-005	CWH0001		CW Hobbs		17-Aug-1982
!		Fix a history error in the last packet.
!
!	V03-004	KBT0125		Keith B. Thompson	10-Aug-1982
!		Get the file name length from RSL not RSS
!
!	V03-003	KBT0045		Keith Thompson		9-Apr-1982
!		Correct the way packed decimal sizes are given to sort
!		Also fix when we do stable sorts ie. only with dups
!
!	V03-002	KBT0027		Keith Thompson		30-Mar-1982
!		Chain the sort error messages
!
!	V03-001	KBT0014		Keith Thompson		17-Mar-1982
!		Pass sort a lrl so it will not choke on sys$input
!
!****


PSECT
	OWN	= _CONV$OWN	(PIC),
	GLOBAL	= _CONV$GLOBAL	(PIC),
	PLIT	= _CONV$PLIT	(SHARE,PIC),
	CODE	= _CONV$CODE	(SHARE,PIC);

LIBRARY	'SYS$LIBRARY:LIB.L32';
LIBRARY	'SRC$:CONVERT';

FORWARD ROUTINE
	CONV$$SORT_PRIMARY	: CL$SORT_PRIMARY,
	CONV$$SORT_SECONDARY	: CL$SORT_SECONDARY,
	SET_UP_SORT		: CL$JSB_REG_11	NOVALUE;

DEFINE_ERROR_CODES;

EXTERNAL ROUTINE
	CONV$$GET_VM		: CL$GET_VM,
	CONV$$OPEN_IN,
	CONV$$RMS_OPEN_ERROR,
	CONV$$SET_KEY_DESC	: CL$SET_KEY_DESC,
	CONV$$SEARCH_FILE,
	LIB$PUT_OUTPUT		: ADDRESSING_MODE(GENERAL),
	SOR$BEGIN_SORT		: ADDRESSING_MODE(GENERAL),
	SOR$PASS_FILES		: ADDRESSING_MODE(GENERAL),
	SOR$SORT_MERGE		: ADDRESSING_MODE(GENERAL),
	SOR$END_SORT		: ADDRESSING_MODE(GENERAL);

EXTERNAL
	CONV$GL_SORT		: LONG,
	CONV$GL_WORK_F		: LONG,

	CONV$AB_FLAGS		: BLOCK [ ,BYTE ],
	
	CONV$AR_OUT_FILE_NAM	: REF DESC_BLK,		! Output File
	CONV$GB_CURRENT_FILE	: BYTE,
	CONV$GL_FILE_COUNT,
	CONV$AR_PROLOGUE,
	CONV$GW_MAX_REC_SIZ	: WORD,

	CONV$AB_IN_NAM		: $NAM_DECL,
	CONV$AB_IN_FAB		: $FAB_DECL,
	CONV$AB_IN_RAB		: $RAB_DECL,
	CONV$AB_OUT_NAM		: $NAM_DECL,
	CONV$AB_OUT_FAB		: $FAB_DECL,
	CONV$AB_OUT_RAB		: $RAB_DECL;

EXTERNAL LITERAL
	SOR$M_STABLE,
	SOR$GK_RECORD,
	SOR$GK_ADDRESS,
	SOR$GK_INDEX;

!	SORT Temporary File Name Data
!
BIND
	CONV_TMP_STR	= UPLIT ('CONVWORK'),		! Convert Temp. File Name
	CONV_DEF_STR	= UPLIT ('SYS$SCRATCH:.TMP');	! Default name

LITERAL
	CONV_TMP_SIZ = 8,
	CONV_DEF_SIZ = 16;

OWN
	CONV_TMP_DESC	: DESC_BLK,		! Convert temp. file desc.
	TEMP_DESC	: DESC_BLK,		! Expanded input file desc

	! Name block
	!
	RFA_NAM		: $NAM_DECL,		! RFA Name Block

	! The fop bits are: Truncate eof - so to shrink file on multiple sorts
	!		    Defered write - of course
	!		    Create if - We know sort is doing a create but we
	!				have created the file for him
	!
	FOP		: LONG INITIAL( FAB$M_TEF+FAB$M_DFW+FAB$M_CIF ),
	FILETYPE	: BYTE,
	RECORDFMT	: BYTE,
	RECORDSIZ	: WORD;

GLOBAL

	CONV$GL_RFA_BUFFER	: LONG,			! Pointer to RFA Buffer

	! Work Files
	!
	CONV$AB_RFA_FAB		: $FAB_DECL,		! RFA File FAB

	CONV$AB_RFA_RAB		: $RAB_DECL;		! RFA File RAB


%SBTTL	'INIT_SORT'
ROUTINE	INIT_SORT : NOVALUE =
!++
!
! Functional Description:
!
!	Initializes the rfa rms blocks which are used for sorting
!
! Calling Sequence:
!
!	INIT_SORT()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!
!	CONV$$GET_VM
!
! Routine Value:
!	none
!
! Side Effects:
!
!	Clears the CONV$V_SORTINIT flag
!
!--

    BEGIN

    LOCAL
	BYTES,
	VM_POINTER;

    ! If sort has already been initialized then exit
    !
    IF NOT .CONV$AB_FLAGS [ CONV$V_SORTINIT ]
    THEN
	BEGIN

	CONV$AB_FLAGS [ CONV$V_SORTINIT ] = _SET;

	! Allocate name block buffers and the rfa buffer
	!
	BYTES = ESA_BUF_SIZ + RSA_BUF_SIZ + RFA_BUF_SIZ;

	CONV$GL_RFA_BUFFER = CONV$$GET_VM( .BYTES );

	VM_POINTER = .CONV$GL_RFA_BUFFER + RFA_BUF_SIZ;

	! Init the name block
	!
	$NAM_INIT ( NAM = RFA_NAM,
		    ESA = .VM_POINTER,
		    ESS = ESA_BUF_SIZ,
		    RSA = .VM_POINTER + ESA_BUF_SIZ,
		    RSS = RSA_BUF_SIZ );

	! Init the FAB
	!
	$FAB_INIT ( FAB = CONV$AB_RFA_FAB,
		    DNA = CONV_DEF_STR,
		    DNS = CONV_DEF_SIZ,
		    FAC = <BRO,GET>,
		    FNA = CONV_TMP_STR,
		    FNS = CONV_TMP_SIZ,
		    FOP = <CBT,SQO>,
		    NAM = RFA_NAM );

	! Init the RAB
	!
	$RAB_INIT ( RAB = CONV$AB_RFA_RAB,
		    FAB = CONV$AB_RFA_FAB,
		    ROP = BIO,
		    UBF = .CONV$GL_RFA_BUFFER,
		    USZ = RFA_BUF_SIZ )

	END;

    ! Set the record format and the record size
    !
    CONV$AB_RFA_FAB [ FAB$B_RFM ] = .RECORDFMT;
    CONV$AB_RFA_FAB [ FAB$W_MRS ] = .RECORDSIZ;

    ! Clear the delete flag so that we don't delete the temp file this time
    !
    CONV$AB_RFA_FAB [ FAB$V_DLT ] = _CLEAR;

    ! Signal create error
    !
    CONV$AB_RFA_FAB [ FAB$L_CTX ] = CONV$_CREA_ERR;

    ! Create the file so that we get logical name direction to work and
    ! we pass a good file name to sort
    !
    $CREATE( FAB=CONV$AB_RFA_FAB,ERR=CONV$$RMS_OPEN_ERROR );

    $CLOSE( FAB=CONV$AB_RFA_FAB );

    ! Set the delete flag so that we get rid of the temp file the next time
    ! we open it
    !
    CONV$AB_RFA_FAB [ FAB$V_DLT ] = _SET;

    ! Stuff the expanded file name into the tempory file descriptor
    !
    CONV_TMP_DESC [ DSC$W_LENGTH ] = .RFA_NAM [ NAM$B_RSL ];
    CONV_TMP_DESC [ DSC$A_POINTER ] = .RFA_NAM [ NAM$L_RSA ];

    RETURN

    END;

%SBTTL	'SORT_PRIMARY'
GLOBAL ROUTINE	CONV$$SORT_PRIMARY : CL$SORT_PRIMARY =
!++
!
! Functional Description:
!
!	This routine will sort the input file, pointed to by in_fab, according
!	to the primary key of the output file.
!
! Calling Sequence:
!
!	CONV$$SORT_PRIMARY()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	input and output rms blocks
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!
!	INIT_SORT
!	SOR$PASS_FILES
!	SORT_ERROR
!	CONV$$SEARCH_FILE
!	SET_UP_SORT
!	SOR$SORT_MERGE
!	SOR$END_SORT
!
! Routine Value:
!
!	Success of random errors
!
! Side Effects:
!
!	Open the rfa file if CONV$V_RFA is set
!
!--

    BEGIN

    DEFINE_KEY_DESC;

    LOCAL
	IN_DEVICE	: BLOCK [ 1,LONG ],
	RFA		: LONG;

    ! Set the key descriptor to key = 0 (always in prologue)
    !
    KEY_DESC = .CONV$AR_PROLOGUE;

    ! If the input file is open close it
    !
    IF .CONV$AB_FLAGS [ CONV$V_IN ]
    THEN
	BEGIN
	$DISCONNECT( RAB=CONV$AB_IN_RAB );
	$CLOSE( FAB=CONV$AB_IN_FAB );
	CONV$AB_FLAGS [ CONV$V_IN ] = _CLEAR
	END;

    IN_DEVICE = .CONV$AB_IN_FAB [ FAB$L_DEV ];

    ! If the device char. are zero (process perminant files) or
    ! if the input file is not from disk or
    ! it is a record orented device (terminals) or
    ! it's a network file or
    ! it's a terminal (be reduntandt) or
    ! there is more than one input file
    ! then we do a normal record sort otherwise we do a RFA sort to save time
    !
    IF ( .IN_DEVICE EQLU 0 ) OR
	.IN_DEVICE [ DEV$V_SQD ] OR
	.IN_DEVICE [ DEV$V_NET ] OR
	.IN_DEVICE [ DEV$V_REC ] OR
	.IN_DEVICE [ DEV$V_TRM ] OR
	( .CONV$GL_FILE_COUNT GTR 1 )
    THEN
	BEGIN
	RFA = _CLEAR;
	RECORDFMT = FAB$C_VAR;
	RECORDSIZ = 0;
	END
    ELSE
	BEGIN
	RFA = _SET;
	RECORDFMT = FAB$C_FIX;
	RECORDSIZ = 6;
	END;

    ! Initialize the RMS blocks used in the sort
    !
    INIT_SORT();

    ! Pass the file names 1st input and output
    !
    TEMP_DESC [ DSC$W_LENGTH ] = .CONV$AB_IN_FAB [ FAB$B_FNS ];
    TEMP_DESC [ DSC$A_POINTER ] = .CONV$AB_IN_FAB [ FAB$L_FNA ];

    SOR$PASS_FILES( TEMP_DESC,
		    CONV_TMP_DESC,
		    FILETYPE,
		    RECORDFMT,
		    0,
		    0,
		    0,
		    0,
		    FOP );

    CONV$GB_CURRENT_FILE = 1;

    ! Pass the rest of the input names
    !
    UNTIL .CONV$GB_CURRENT_FILE GTR ( .CONV$GL_FILE_COUNT - 1 )
    DO
	BEGIN

	! Parse and search for the file (This uses the IN_FAB and IN_NAM
	! since they are not used again)
	!
	RET_ON_ERROR( CONV$$SEARCH_FILE() );

	! Pass the file spec
	!
	TEMP_DESC [ DSC$W_LENGTH ] = .CONV$AB_IN_FAB [ FAB$B_FNS ];
	TEMP_DESC [ DSC$A_POINTER ] = .CONV$AB_IN_FAB [ FAB$L_FNA ];

	SOR$PASS_FILES( TEMP_DESC );

	CONV$GB_CURRENT_FILE = .CONV$GB_CURRENT_FILE + 1

	END;

    ! If useing rfa file as index file do an index sort else do record sort
    !
    IF .RFA
    THEN
	SET_UP_SORT( SOR$GK_ADDRESS )
    ELSE
	SET_UP_SORT( SOR$GK_RECORD );

    ! Do the sort
    !
    SOR$SORT_MERGE();

    SOR$END_SORT();

    ! Reopen the correct input files
    !
    IF .RFA
    THEN
	BEGIN

	! OPEN the input file and the new RFA file
	!
	RET_ON_ERROR( CONV$$OPEN_IN() );

	! Connect the additional file containing the RFAs pointing th the real
	! file
	!
	$OPEN( FAB=CONV$AB_RFA_FAB );
	$CONNECT( RAB=CONV$AB_RFA_RAB );

	CONV$AB_FLAGS [ CONV$V_RFA ] = _SET;

	! Set access to the real input file to RFA
	!
	CONV$AB_IN_RAB [ RAB$B_RAC ] = RAB$C_RFA

	END
    ELSE

	! OPEN the sorted file as if it was the input file
	!
	BEGIN

	! The real input RAB points to the RFA FAB
	!
	CONV$AB_IN_RAB [ RAB$L_FAB ] = CONV$AB_RFA_FAB;

	! Open the RFA fab which is the new sorted input file NOTE: This is
	! not a file of RFAs an above
	!
	$OPEN( FAB=CONV$AB_RFA_FAB );
	$CONNECT( RAB=CONV$AB_IN_RAB );

	CONV$AB_FLAGS [ CONV$V_SOR ] = _SET

	END;

    ! Since it only makes sence to sort once
    !
    CONV$GL_SORT = _CLEAR;

    RETURN CONV$_SUCCESS

    END;

%SBTTL	'SORT_SECONDARY'
GLOBAL ROUTINE	CONV$$SORT_SECONDARY : CL$SORT_SECONDARY =
!++
!
! Functional Description:
!
!	This routine will sort the OUTPUT file according to a specified
!	key of the OUTPUT file.
!
! Calling Sequence:
!
!	CONV$$SORT_SECONDARY()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!
!	INIT_SORT
!	SOR$PASS_FILES
!	SET_UP_SORT
!	SOR$SORT_MERGE
!	SOR$END_SORT
!
! Routine Value:
!
!	Success or random errors
!
! Side Effects:
!
!	Closes and reopens the output file
!	Closes the rfa file if it was open then opens it
!
!--

    BEGIN

    DEFINE_KEY_DESC;

    ! If the RFA file was open close it. The file will be used as output of sort.
    !
    IF .CONV$AB_FLAGS [ CONV$V_RFA ]
    THEN
	BEGIN
	ERRCHK( $DISCONNECT( RAB=CONV$AB_RFA_RAB ),CONV$_BADLOGIC );
	ERRCHK( $CLOSE( FAB=CONV$AB_RFA_FAB ),CONV$_BADLOGIC );

	CONV$AB_FLAGS [ CONV$V_RFA ] = _CLEAR;

	! Also remove the entry in the directory
	!
	$ERASE( FAB=CONV$AB_RFA_FAB )

	END;

    ! Secondary key sorts are always tag sorts therefore we need a var. file
    !
    RECORDFMT = FAB$C_VAR;
    RECORDSIZ = 0;

    ! Init sort if necc. and get a file name
    !
    INIT_SORT();

    ! To conserve space ect. use the RFA fab and rab therefore reset
    ! the RFA rab so we can do record I/O on it.  We can use the rfa buffer
    ! since it is at least 512 bytes long and a key is only 256 + 6 byte rfa
    !
    ! Clear the BIO flag
    !
    CONV$AB_RFA_RAB [ RAB$V_BIO ] = _CLEAR;

    ! Close the current output file so that SORT can get at it
    !
    $DISCONNECT( RAB=CONV$AB_OUT_RAB );
    ERRCHK( $CLOSE( FAB=CONV$AB_OUT_FAB ),CONV$_BADLOGIC );

    CONV$AB_FLAGS [ CONV$V_OUT ] = _CLEAR;

    ! Pass the file names
    !
    ! To avoid some file name problems pass the expanded string of the
    ! output file
    !
    TEMP_DESC [ DSC$W_LENGTH ] = .CONV$AB_OUT_NAM [ NAM$B_RSL ];
    TEMP_DESC [ DSC$A_POINTER ] = .CONV$AB_OUT_NAM [ NAM$L_RSA ];

    SOR$PASS_FILES( TEMP_DESC,
		    CONV_TMP_DESC,
		    FILETYPE,
		    RECORDFMT,
		    0,
		    0,
		    0,
		    0,
		    FOP );

    ! Get ready to do a index sort of the file
    !
    SET_UP_SORT( SOR$GK_INDEX );

    ! Start the sort and finish it
    !
    SOR$SORT_MERGE();
    SOR$END_SORT();

    ! ReOPEN the output file and the new RFA-INDEX file
    !
    $OPEN( FAB=CONV$AB_OUT_FAB );
    $CONNECT( RAB=CONV$AB_OUT_RAB );
    CONV$AB_FLAGS [ CONV$V_OUT ] = _SET;

    $OPEN( FAB=CONV$AB_RFA_FAB );
    $CONNECT( RAB=CONV$AB_RFA_RAB );
    CONV$AB_FLAGS [ CONV$V_RFA ] = _SET;

    RETURN SS$_NORMAL
    END;

%SBTTL	'SET_UP_SORT'
ROUTINE	SET_UP_SORT ( S_TYPE ) : CL$JSB_REG_11 NOVALUE =
!++
!
! Functional Description:
!
!	Initializes the control blocks for the sort utility
!
! Calling Sequence:
!
!	SET_UP_SORT( sort_type )
!
! Input Parameters:
!
!	sort_type - The sort code for the type of sort wanted.  Valid
!		    codes are:
!			SOR$GK_RECORD = Record sort (Primary key from non-
!					disk device or multiple input files)
!			SOR$GK_ADDRESS = Rfa sort (Primary key form disk)
!			SOR$GK_INDEX = Index sort (Secondary keys only)
!
! Implicit Inputs:
!
!	KEY_DESC
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!
!	SOR$BEGIN_SORT
!
! Routine Value:
!
!	Success of error from sor$begin_sort
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_KEY_DESC;

    ! Sort parameters
    !
    OWN
	KEY_BUFFER	: VECTOR [ 33,WORD ],
	LRL		: WORD,
	SORT_OPTIONS	: LONG,
	SORT_TYPE	: BYTE,
	WORK_FILES	: BYTE;

    BIND
	SEGMENTS	= KEY_BUFFER [ 0 ] : WORD,
	SORT_KEY	= KEY_BUFFER [ 1 ] : BLOCKVECTOR [ 8,4,WORD ];

    LOCAL
	KEY_TYPE;

    SORT_TYPE	= .S_TYPE;
    WORK_FILES	= .CONV$GL_WORK_F;
    LRL		= .CONV$GW_MAX_REC_SIZ;

    ! If the key allows dups do a stable sort
    !
    IF .KEY_DESC [ KEY$V_DUPKEYS ]
    THEN
	SORT_OPTIONS = SOR$M_STABLE
    ELSE
	SORT_OPTIONS = _CLEAR;

    ! Get the number of segments
    !
    SEGMENTS = .KEY_DESC [ KEY$B_SEGMENTS ];

    ! Find the key type from the key descriptor and set key_type to the
    ! appropiate SORT-32 code
    !
    KEY_TYPE = ( SELECTONE .KEY_DESC [ KEY$B_DATATYPE ] OF
	SET
	[ KEY$C_STRING ]	: DSC$K_DTYPE_T;
	[ KEY$C_SGNWORD ]	: DSC$K_DTYPE_W;
	[ KEY$C_SGNLONG ]	: DSC$K_DTYPE_L;
	[ KEY$C_SGNQUAD ]	: DSC$K_DTYPE_Q;
	[ KEY$C_UNSGNWORD ]	: DSC$K_DTYPE_WU;
	[ KEY$C_UNSGNLONG ]	: DSC$K_DTYPE_LU;
	[ KEY$C_UNSGNQUAD ]	: DSC$K_DTYPE_QU;
	[ KEY$C_PACKED ]	: DSC$K_DTYPE_P;
	TES );

    ! Load the sort parameter block with the right stuff for each segment
    !
    INCR I FROM 0 TO ( .SEGMENTS - 1 ) BY 1
    DO
	BEGIN
	SORT_KEY [ .I,SORTKEY$W_TYPE ] = .KEY_TYPE;
	SORT_KEY [ .I,SORTKEY$W_ORDER ] = 0;

	! NOTE: The 28 is the offset to the first segment position descriptor
	!	in the key descriptor block the 44 is the offset to the segment
	!	size.  If the macros for these ever change, ie. KEY$W_POSITION and
	!	KEY$B_SIZE, the code offsets here must be changed!
	!
	SORT_KEY [ .I,SORTKEY$W_START ] = .KEY_DESC [ ( 28 + (.I*2) ),WORD_U ];
	SORT_KEY [ .I,SORTKEY$W_LENGH ] = .KEY_DESC [ ( 44 + .I ),BYTE_U ];

	! If the key is packed decimal then sort wants the size in nibbles NOT
	! counting the sign
	!
	IF .KEY_DESC [ KEY$B_DATATYPE ] EQLU KEY$C_PACKED
	THEN
	    SORT_KEY [ .I,SORTKEY$W_LENGH ] =
			( .SORT_KEY [ .I,SORTKEY$W_LENGH ] * 2 ) - 1

	END;

    ! Begin the sort
    !
    SOR$BEGIN_SORT( KEY_BUFFER,		! Key buffer address
		    LRL,		! Longest record length
		    SORT_OPTIONS,	! Sort options
		    0,			! Input file size
		    0,			! Comp. routine addr.
		    0,			! Equal routine addr.
		    SORT_TYPE,		! Sort type
		    WORK_FILES );	! Number of work files

    RETURN

    END;

END	ELUDOM
