	.TITLE	BAS$DET			; fetch and store DET
	.IDENT	/1-008/			; File: BASDET.MAR	Edit: MDL1008

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: BASIC Language Support
;
; ABSTRACT:
;
; This module has routines to store a double, gfloat, or hfloat value into the
; OWN storage that has the determinant of the last matrix inverted.  The store
; entry point is used by the BASIC initializer to initialize the DET to 0
; and by the matrix inversion routines to store the determinant.  There are
; entry points to retrieve the determinant as either a float, double, g floating,
; or h floating.  (The proper entry point depends on how the determinant was
; saved.)
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. Will, CREATION DATE:  24-Jul-79
;
; MODIFIED BY:
;
;++	, : VERSION 1
; 1-001	- Original 
; 1-002	- Correct some typos.  JBS 25-JUL-1979
; 1-003 - Add scaling comments.  RW  31-Dec-1979
; 1-004 - Add entry points for g and h floating.  PL 30-Sep-81
; 1-005 - Change entry point BAS$DET_H_R3 to BAS$DET_H since it is
;	  a CALL entry point.  PL 15-Oct-81
; 1-006 - Add G^ to BAS$$SCALE_R1 call.  PLL 22-Mar-1982
; 1-007 - store the determinant in H_floating, and then convert it to the
;	  desired data type when called for.  MDL 16-Jan-1984
; 1-008 - fix a bug in BAS$$STORE_DET.  MDL 6-Mar-1984
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$SFDEF					; use to get scale
;
; EXTERNAL DECLARATIONS:
;
	.DSABL	GBL				; Prevent undeclared
						; symbols from being
						; automatically global.
	.EXTRN	BAS$$SCALE_R1			; get the scale for double
;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

	.PSECT _BAS$DATA PIC, USR, CON, REL, LCL, NOSHR, NOEXE, -
			RD, WRT
DET:	.BLKL	4		; 4 longwords can contain hfloat,
				; gfloat, or dbl determinant

;
; PSECT DECLARATIONS:
;
	.PSECT _BAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	BAS$DET_F  -  Fetch the determinant as a floating point value
;++
; FUNCTIONAL DESCRIPTION:
;
;	The determinant is stored in H_floating. Convert it to F_floating and
;	return the value in R0.
;
; CALLING SEQUENCE:
;
;	CALL BAS$DET_F
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	The rounded floating point value of the OWN storage
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY BAS$DET_F, ^M<R2,R3,R4>	; Entry point

	MOVL	SF$L_SAVE_FP(FP), R0	; pass FP to get scale
	JSB	G^BAS$$SCALE_R1		; get scale in R0 & R1
	CVTDF	R0, R4			; cvt scale factor to desired data type
	CVTHF	DET, R0			; cvt determinant to desired data type 
	DIVF2	R4, R0 			; descale 
	RET

	.SBTTL	BAS$DET_D  -   Return the double precision value of DET
;++
; FUNCTIONAL DESCRIPTION:
;
;	The determinant is stored in H_floating. Convert it to D_floating and
;	return the value in R0.
;
; CALLING SEQUENCE:
;
;	CALL BAS$DET_D
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	The double precision value in DET, scaled if scaling is present
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY BAS$DET_D, ^M<>		; Entry point

	CVTHD	DET, R0
	RET

	.SBTTL	BAS$DET_G  -   Return the gfloat value of DET
;++
; FUNCTIONAL DESCRIPTION:
;
;	The determinant is stored in H_floating. Convert it to D_floating and
;	return the value in R0.
;
; CALLING SEQUENCE:
;
;	CALL BAS$DET_G
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	The g floating value in DET
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY BAS$DET_G, ^M<R2,R3,R4,R5,R6,R7>	; Entry point

	MOVL	SF$L_SAVE_FP(FP), R0	; pass FP to get scale
	JSB	G^BAS$$SCALE_R1		; get scale in R0 & R1
	CVTDH	R0, R4			; cvt scale factor to desired data type
					; no CVTDG so we promote to H
	MOVH	DET, R0			; cvt determinant to desired data type 
	DIVH2	R4, R0 			; descale 
	MOVH	R0, R4			; move out of the way
	CVTHG	R4, R0			; cvt to desired data type
	RET

	.SBTTL	BAS$DET_H  -   Return the hfloat value of DET
;++
; FUNCTIONAL DESCRIPTION:
;
;	Return the value in DET
;
; CALLING SEQUENCE:
;
;	CALL BAS$DET_H
;
; INPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	The h floating value in DET
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY BAS$DET_H, ^M<R2,R3,R4,R5,R6,R7>		; Entry point

	MOVL	SF$L_SAVE_FP(FP), R0	; pass FP to get scale
	JSB	G^BAS$$SCALE_R1		; get scale in R0 & R1
	CVTDH	R0, R4			; cvt scale factor to desired data type
	MOVH	DET, R0			; cvt determinant to desired data type 
	DIVH2	R4, R0 			; descale 
	RET

	.SBTTL	BAS$$STORE_DET	- Put a value into the OWN storage
;++
; FUNCTIONAL DESCRIPTION:
;
;	Store the value passed.
;
; CALLING SEQUENCE:
;
;	CALL BAS$$STORE_DET (determinant_value.rd.r)
;
; INPUT PARAMETERS:
;

	determinant = 4			; determinant must already be scaled
					; if scaling is present

;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY BAS$$STORE_DET, ^M<>		; Entry point

	CVTDH 	@determinant(AP), DET	; store the value
	RET


	.SBTTL	BAS$$STORE_DET_G - Put a value into the OWN storage
;++
; FUNCTIONAL DESCRIPTION:
;
;	Store the value passed.
;
; CALLING SEQUENCE:
;
;	CALL BAS$$STORE_DET_G (determinant_value.rg.r)
;
; INPUT PARAMETERS:
;

	determinant = 4			

;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY BAS$$STORE_DET_G, ^M<>		; Entry point

	CVTGH 	@determinant(AP), DET		; store the value
	RET


	.SBTTL	BAS$$STORE_DET_H -  Put a value into the OWN storage
;++
; FUNCTIONAL DESCRIPTION:
;
;	Store the value passed.
;
; CALLING SEQUENCE:
;
;	CALL BAS$$STORE_DET_H (determinant_value.rh.r)
;
; INPUT PARAMETERS:
;

	determinant = 4			

;
; IMPLICIT INPUTS:
;
;	NONE
;
; OUTPUT PARAMETERS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY BAS$$STORE_DET_H, ^M<>		; Entry point

	MOVH	@determinant(AP), DET		; store the value
	RET

	.END

