MODULE RM3POSRFA (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 index sequential file organization
!
! ABSTRACT:
!                This module positions to a record by RFA.
!
!
! ENVIRONMENT:
!
!		VAX/VMS Operating System
!
!--

!
! AUTHOR:        Todd M. Katz		CREATION DATE:		14-Jan-83
!
!
! MODIFIED BY:
!
!	V03-003	TSK0001		Tamar Krichevsky	15-Jun-1983
!		Change addressing mode for RM$RU_RECLAIM to log relative.
!
!	V03-002	TMK0001		Todd M. Katz		11-Mar-1983
!		If it possible that some reclamation will be required (the
!		file is write accessed and RU Jouranallable), then make sure
!		the primary data bucket is accessed exclusively.
!
!	V03-001	MCN0001		Maria del C. Nasr	24-Feb-1983
!		Reorganize linkages
!
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! Define default PSECTS for code.
!
PSECT
    CODE = RM$RMS3(PSECT_ATTR),
    PLIT = RM$RMS3(PSECT_ATTR);

! Linkages.
!
LINKAGE
    L_RABREG_67,
    L_PRESERVE1;

! External Routines.
!
EXTERNAL ROUTINE
    RM$FIND_BY_RRV	: RL$RABREG_67,
    RM$RLSBKT		: RL$PRESERVE1,
    RM$RU_RECLAIM	: RL$RABREG_67 ADDRESSING_MODE( LONG_RELATIVE );


GLOBAL ROUTINE RM$POS_RFA : RL$RABREG_67 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine positions to a primary data record by its RFA.
!
!	If RMS finds that the record with the appropriate RFA is marked 
!	RU_DELETE and the Recovery Unit in which the record was deleted is
!	still active, then RMS returns positioned to this record and lets a 
!	higher level routine decide what to do. If the Recovery Unit in which 
!	the record was deleted has successfully terminated, then RMS will 
!	return an error of DEL after deleting this RU_DELETEd record (if it has 
!	write access to the file), and releasing the primary data bucket.
!
!	If RMS encounters a record that is marked RU_UPDATE and is in a special
!	format then RMS will return positioned to this record after
!	reformatting it. The reformatting is done if RMS has write access to 
!	the file, and the Recovery Unit in which it was updated has 
!	successfully terminated.
!
! CALLING SEQUENCE:
!
!	RM$POS_RFA()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	IFAB			- address of IFAB
!	    IFB$V_RU		- if set, the file is Recovery Unit Journallable
!	    IFB$V_WRTACC	- if set, file is open for write access
!
!	RAB			- address of RAB
!	    RAB$L_RFA0		- RFA VBN of primary data record to be retrieved
!	    RAB$W_RFA4		- RFA IF of primary data record to be retrieved
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	IRAB			- address of IRAB
!	    IRB$L_CURBDB	- address of BDB for primary data bucket
!	    IRB$W_RFA_ID	- ID of current primary data record
!	    IRB$L_RFA_VBN	- VBN of current primary data bucket
!
!	REC_ADDR		- address of primary data record
!
! ROUTINE VALUE:
!
!	SUC	- the primary data record with this RFA has been found.
!	DEL	- the primary data record with this RFA has been deleted.
!	RNF	- the primary data record with this RFA has not been found.
!
! SIDE EFFECTS:
!
!	On success, REC_ADDR points to the non-deleted primary data record
!	    and the BDB of the primary data bucket maybe found in IRB$L_CURBDB.
!	On failures, all accessed buckets are released.
!	If the record is marked RU_DELETEd, it might have been deleted.
!	If the record is marked RU_UPDATEd, it might have been reformatted.
!
!--

    BEGIN

    BUILTIN
	AP;

    EXTERNAL REGISTER
	COMMON_RAB_STR,
	R_IDX_DFN_STR,
	R_REC_ADDR_STR;

    LOCAL
	STATUS;

    ! If it possible that some reclamation will be required (the file is write 
    ! accessed and RU Jouranallable), then make sure the primary data bucket is 
    ! accessed exclusively.
    !
    IF  .IFAB[IFB$V_WRTACC]
	 AND
	.IFAB[IFB$V_RU]
    THEN
	IRAB[IRB$B_CACHEFLGS] = CSH$M_LOCK;

    ! RMS is successful at positioning to the primary data record by its RFA.
    !
    IF (STATUS = RM$FIND_BY_RRV (.RAB[RAB$L_RFA0], .RAB[RAB$W_RFA4], 0))
    THEN
	BEGIN

	! If RMS finds that the record with this RFA has been deleted within a 
	! Recovery Unit, then it subjects this record to further processing
	! before deciding whether to return this record, or to return an error
	! of record deleted.
	!
	IF .REC_ADDR[IRC$V_RU_DELETE]
	THEN
	    BEGIN

	    LOCAL
		TEMP_STATUS;

	    ! If the Recovery Unit in which the record was deleted has
	    ! not completed or if the file has not been opened for write
	    ! access then no space can be reclaimed. Return an error of
	    ! RMS$_DEL unless the record itself could not be locked in which
	    ! case return the record so that caller may decide what to do with 
	    ! it.
	    !
	    IF NOT (TEMP_STATUS = RM$RU_RECLAIM())
	    THEN
		BEGIN

		IF .TEMP_STATUS<0,16> NEQU RMSERR(RLK)
		THEN
		    STATUS = RMSERR(DEL);
		END

	    ! If the Recovery Unit in which the record was deleted has
	    ! successfully terminated, then RMS will be able to delete the
	    ! record at this time. In this case, change the return status
	    ! to RMS$_DEL.
	    !
	    ELSE
		STATUS = RMSERR(DEL);
	    END

	! If the primary data record RMS has positioned was updated within a
	! Recovery Unit, then re-format the record at this time provided
	! the file is opened for write access, and the Recovery Unit has
	! terminated successfully.
	!
	ELSE
	    IF  .REC_ADDR[IRC$V_RU_UPDATE]
		 AND
	   	.IFAB[IFB$V_WRTACC]
	    THEN
		RM$RU_RECLAIM();

	! If the record originally positioned to has been found to be deleted,
	! then release the primary data bucket in which it was found.
	!
	IF .STATUS<0,16> EQLU RMSERR(DEL)
	THEN
	    BEGIN

	    GLOBAL REGISTER
		R_BDB_STR;

	    RELEASE (IRAB[IRB$L_CURBDB])
	    END

	! Otherwise, setup to update the NRP context with the current address
	! in the file of this primary data record.
	!
	ELSE
	    BEGIN
	    IRAB[IRB$L_RFA_VBN] = .BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_VBN];
	    IRAB[IRB$W_RFA_ID]  = IRC$_ID(REC_ADDR);
	    END;
	END

    ! RMS was not successful at positioning to the primary data record by its
    ! RFA. Setup to return the reason why.
    !
    ELSE
	BEGIN
	IRAB[IRB$L_CURBDB] = 0;

	IF .STATUS<0,16> EQLU RMSERR(EOF)
	THEN
	    STATUS = RMSERR(RNF);
	END;

    ! Return status.
    !
    RETURN .STATUS;
    END;

END

ELUDOM
