%TITLE 'EDT$SCRCURS - conditionally position the cursor'
MODULE EDT$SCRCURS (				! Conditionally position the cursor
		IDENT = 'V04-000'			! File: SCRCURS.BLI Edit: JBS1012
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module puts out a cursor position sequence to a specified
!	line and column, unless the cursor is already there.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: September 8, 1979
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 12-Feb-1981.  This module was created by
!	extracting the routine EDT$$SC_POSCSIF  from module SCREEN.
! 1-002	- Regularize headers and don't store into the parameter list.  This
!	   change saved two words on the PDP-11.  JBS 13-Mar-1981
! 1-003	- Always position to the last column, to avoid autowrap problems.
!	   JBS 15-Apr-1982
! 1-004	- Remove edit 1-003, since it doesn't help a VT100, and add some
!	   cursor positioning optimizations.  For now, turn off the cursor
!	   positioning optimizations, until EDT passes the QA system.  JBS 05-Oct-1982
! 1-005	- Turn the cursor positioning optimizations on, to see if EDT still
!	   passes the QA system.  JBS 15-Oct-1982
! 1-006	- When positioning below the scrolling region don't use the
!	   relative cursor motion commands.  JBS 15-Oct-1982
! 1-007	- Fix a bug involving BS.  JBS 17-Oct-1982
! 1-008	- For dumb terminal drivers, always use absolute cursor positioning.
!	   JBS 17-Oct-1982
! 1-009	- Preserve EDT$$G_FMT_LNPOS.  JBS 28-Oct-1982
! 1-010	- Changed test for being outside scrolling region.  JBS for SB 17-Jan-1983
! 1-011	- Add more error checking.  JBS 17-Jan-1983
! 1-012	- If we are coming from the right margin, always do an absolute cursor
!	   positioning sequence, since the right margin may not be where we think
!	   it is, and the cursor may be misplaced.  JBS 08-Apr-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$SC_POSCSIF : NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$SC_POSCSIF  - conditionally position the cursor'

GLOBAL ROUTINE EDT$$SC_POSCSIF (		! Conditionally position the cursor
    LINE, 					! Desired line
    POS						! Desired column
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine positions the cursor to [LINE, POS].  No output is
!	produced if the cursor is already positioned correctly.
!
! FORMAL PARAMETERS:
!
!  LINE			Desired line
!
!  POS			Desired column
!
! IMPLICIT INPUTS:
!
!	EDT$$G_PRV_LN
!	EDT$$G_PRV_COL
!	EDT$$G_BOT_SCREG
!	EDT$$G_TI_DUMB
!	EDT$$G_TI_WID
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	May position the cursor.
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$SC_POSABS : NOVALUE,		! Force a cursor position sequence to the output buffer
	EDT$$STORE_FMTCH : NOVALUE,		! Store a character in the format buffer
	EDT$$FMT_DCML : NOVALUE;		! Place a decimal number in the format buffer

    EXTERNAL
	EDT$$G_BOT_SCREG,			! Bottom of current scrolling region
	EDT$$G_PRV_LN,				! Previous line number
	EDT$$G_PRV_COL,				! Previous column number
	EDT$$G_TI_TYP,				! Terminal type, either VT52 or VT100
	EDT$$G_TI_DUMB,				! 1 = this is a dumb terminal driver
	EDT$$G_FMT_LNPOS,			! Cursor position, for formatting purposes.
	EDT$$G_TI_WID;				! Terminal width

    LOCAL
	SAVE_FMTLNPOS;

    ASSERT (.LINE GEQ 0);
!+
! If we are already positioned correctly, do nothing.
!-

    IF ((.LINE EQL .EDT$$G_PRV_LN) AND (.POS EQL .EDT$$G_PRV_COL)) THEN RETURN;

!+
! Preserve EDT$$G_FMT_LNPOS, since the calls to EDT$$FMT_DCML will increment it,
! but those characters do not in fact move the cursor, since they are in a control sequence.
!-
    SAVE_FMTLNPOS = .EDT$$G_FMT_LNPOS;
!+
! If this is a dumb terminal driver, we are positioning below the scrolling
! region, or coming from the right margin, issue an absolute cursor position.
! A dumb terminal driver is one which does not permit its autowrap logic to be disabled.
!-

    IF (((.LINE + 1) GEQ .EDT$$G_BOT_SCREG) OR (.EDT$$G_PRV_COL EQL (.EDT$$G_TI_WID - 1)) OR .EDT$$G_TI_DUMB)
    THEN
	BEGIN
	EDT$$SC_POSABS (.LINE, .POS);
	EDT$$G_FMT_LNPOS = .SAVE_FMTLNPOS;
	RETURN;
	END;

!+
! If the desired column is zero, but the current column is non-zero, issue a
! carriage return provided that the rows match, so that we will not be issuing
! an absolute cursor position later.
!-

    IF ((.POS EQL 0) AND (.EDT$$G_PRV_COL NEQ 0) AND 	!
	((.LINE EQL .EDT$$G_PRV_LN) OR (.LINE EQL (.EDT$$G_PRV_LN + 1))))
    THEN
	BEGIN
	EDT$$STORE_FMTCH (ASC_K_CR);
	EDT$$G_PRV_COL = 0;
	END;

!+
! If the column is correct but the row is incorrect, issue an appropriate
! sequence.
!-

    IF ((.POS EQL .EDT$$G_PRV_COL) AND (.LINE NEQ .EDT$$G_PRV_LN))
    THEN
	BEGIN
!+
! If we are moving down one, issue a line feed.
!-

	IF (.LINE EQL (.EDT$$G_PRV_LN + 1))
	THEN
	    BEGIN
	    EDT$$STORE_FMTCH (ASC_K_LF);
	    EDT$$G_PRV_LN = .EDT$$G_PRV_LN + 1;
	    END
	ELSE
!+
! Otherwise issue an appropriate relative cursor motion command.  Note that the VT52
! can only move by one.
!-

	    IF ((.EDT$$G_TI_TYP EQL TERM_VT100) OR (ABS (.LINE - .EDT$$G_PRV_LN) EQL 1))
	    THEN
		BEGIN
		EDT$$STORE_FMTCH (ASC_K_ESC);

		IF (.EDT$$G_TI_TYP EQL TERM_VT100) THEN EDT$$STORE_FMTCH (%C'[');

		IF (.LINE LSS .EDT$$G_PRV_LN)
		THEN
		    BEGIN

		    IF ((.EDT$$G_PRV_LN - .LINE) NEQ 1) THEN EDT$$FMT_DCML (.EDT$$G_PRV_LN - .LINE);

		    EDT$$STORE_FMTCH (%C'A');
		    EDT$$G_PRV_LN = .LINE;
		    EDT$$G_PRV_COL = .POS;
		    END
		ELSE
		    BEGIN
		    EDT$$FMT_DCML (.LINE - .EDT$$G_PRV_LN);
		    EDT$$STORE_FMTCH (%C'B');
		    EDT$$G_PRV_LN = .LINE;
		    EDT$$G_PRV_COL = .POS;
		    END;

		END;

	END;

!+
! Now check for moving left or right.  Note again that the VT52 can only
! move by one.
!-

    IF ((.POS NEQ .EDT$$G_PRV_COL) AND (.LINE EQL .EDT$$G_PRV_LN))
    THEN
	BEGIN
!+
! If we are just going back one, use BS.
!-

	IF (.POS EQL (.EDT$$G_PRV_COL - 1))
	THEN
	    BEGIN
	    EDT$$STORE_FMTCH (ASC_K_BS);
	    EDT$$G_PRV_COL = .EDT$$G_PRV_COL - 1;
	    END
	ELSE

	    IF ((.EDT$$G_TI_TYP EQL TERM_VT100) OR (ABS (.POS - .EDT$$G_PRV_COL) EQL 1))
	    THEN
		BEGIN
!+
! Otherwise, use a relative cursor motion command.
!-
		EDT$$STORE_FMTCH (ASC_K_ESC);

		IF (.EDT$$G_TI_TYP EQL TERM_VT100) THEN EDT$$STORE_FMTCH (%C'[');

		IF (.POS LSS .EDT$$G_PRV_COL)
		THEN
		    BEGIN
		    EDT$$FMT_DCML (.EDT$$G_PRV_COL - .POS);
		    EDT$$STORE_FMTCH (%C'D');
		    EDT$$G_PRV_COL = .POS;
		    END
		ELSE
		    BEGIN

		    IF ((.POS - .EDT$$G_PRV_COL) NEQ 1) THEN EDT$$FMT_DCML (.POS - .EDT$$G_PRV_COL);

		    EDT$$STORE_FMTCH (%C'C');
		    EDT$$G_PRV_COL = .POS;
		    END;

		END;

	END;

!+
! If the above logic does not succeed in getting the cursor positioned correctly,
! do it using an absolute cursor position sequence.
!-

    IF ((.LINE NEQ .EDT$$G_PRV_LN) OR (.POS NEQ .EDT$$G_PRV_COL))	!
    THEN
	EDT$$SC_POSABS (.LINE, .POS);

!+
! Restore the format line position.
!-
    EDT$$G_FMT_LNPOS = .SAVE_FMTLNPOS;
    RETURN;
    END;					! of routine EDT$$SC_POSCSIF

!<BLF/PAGE>

END						! of module EDT$SCRCURS

ELUDOM
