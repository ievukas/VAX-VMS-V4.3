	.TITLE LIB$MERGE - Merge Image Activate an Image
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	VMS-specific library
;
; ABSTRACT:	The routines in this module merge an image into P0 or P1 space.
;
; ENVIRONMENT:
;
; AUTHOR: Kathleen D. Morse , CREATION DATE: 10-Jan-80
;
; MODIFIED BY:
;
;	V03-002	LJK0277		Lawrence J. Kenah	1-May-1984
;		Do not reorder privileged vectors until $IMGFIX has been called.
;		This change reflects the change in the way that privileged
;		vectors are added to the dispatch lists.
;
;	V03-001	LJK0261		Lawrence J. Kenah	8-Feb-1984
;		Allow message and change mode vectors that are part of an
;		image mapped into P1 space to survive image rundown.
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$IACDEF				;IMAGE ACTIVATION FLAGS
	$PHDDEF				;PROCESS HEADER DEFINITIONS
	$OPDEF				;SYMBOLIC OPCODE DEFINITIONS
	$SSDEF				;SYSTEM SERVICE STATUS CODES

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OFFSETS (FROM AP) FOR INPUT ARGUMENT LIST FOR LIB$Px_MERGE 
;

FILNAM=4				; Address of image file name descriptor
DFLTNAM=8				; Address of default file name descriptor
HDRBUF=12				; Address of image header buffer
RETADR=16				; Address of quadword for range of
					;  virtual addresses actually mapped

;
; OWN STORAGE:
;

	.SBTTL LIB$Px_MERGE - Merge an Image into P0 or P1 Space
;+
; FUNCTIONAL DESCRIPTION:
;
; This routine merges an image into P0 or P1 space. 
;
; If called at LIB$P0_MERGE, a simple merged image activation is performed,
; placing the designated image at the high address end of P0 space.
;
; A more complicated sequence of events is required to merge an image into
; the low address end of P1 space. Because the image activator must know the
; exact amount of P1 space needed for the image being merged, LIB$P1_MERGE
; first merges the image into P0 space with the expand region option.  After
; this merge is completed, the routine computes the P1 range that will hold
; the image.  This is done by finding the first free P1 page and computing
; the number of pages just mapped into P0 space.  A P1 virtual address range
; is then computed.  The pages mapped into P0 space are deleted and second
; merge image activate is done.  This time the expand region option is turned
; off and the exact P1 range needed is specified. 
;
; CALLING SEQUENCE:
;
;	CALLS	#4,LIB$Px_MERGE
;
; INPUT PARAMETERS:
;
;	FILNAM(AP)  = Address of image file name descriptor
;	DFLTNAM(AP) = Address of default file name descriptor
;	HDRBUF(AP)  = Address of 512-byte image header buffer
;	RETADR(AP)  = Address of quadword for range of virtual addresses mapped
;
; IMPLICIT INPUT:
;
;	none
;
; OUTPUT PARAMETERS:
;
;	none
;
; IMPLICIT OUTPUT:
;
;	The address range actually mapped is returned in the RETADR quadword
;	provided as an input parameter.
;
;	The first block of the image header is copied to the 512-byte buffer
;	provided as an input parameter.
;
; COMPLETION CODES:
;
;	R0 low bit set => Image successfully merged
;
;		SS$_NORMAL
;
;	R0 low bit clear => Error occurred while activating image
;
;		SS$_NOPRIV	Entry was as LIB$P1_MERGE and process
;				does not have CMKRNL privilege.
;
;		Various errors returned by $IMGACT and $DELTVA
;
; SIDE EFFECTS:
;
;	If entry is at LIB$P1_MERGE, the permanent portion of P1 space is
;	expanded to accommodate the merged image. The message and change
;	mode vectors are reordered and the reset points are adjusted to
;	allow any such vectors in a P1 image to survive image rundown.
;-

	.ENABL		LOCAL_BLOCK

	.PSECT	_LIB$CODE PIC,SHR,BYTE,RD,EXE,NOWRT

LIB$P0_MERGE::
	.WORD	^M<R2,R3,R4,R5,R6,R7>	;REGISTER SAVE MASK
	MOVL	#<IAC$M_MERGE!IAC$M_EXPREG>,R7 ;IMAGE ACTIVATION FLAGS
	BRB	10$			;JOIN COMMON CODE PATH

LIB$P1_MERGE::
	.WORD	^M<R2,R3,R4,R5,R6,R7>	;REGISTER SAVE MASK
	MOVL	#<IAC$M_MERGE!IAC$M_EXPREG!IAC$M_P1MERGE>,R7
10$:	MOVZWL	#^X3FF,-(SP)		;END VA FOR BLUEPRINT P0 VA RANGE
	MOVZWL	#^X200,-(SP)		;START VA FOR BLUEPRINT P0 VA RANGE
	MOVL	SP,R4			;ADR OF INPUT VA RANGE
	CLRQ	-(SP)			;RETURN VA RANGE
	MOVL	SP,R5			;ADR OF RETURN VA RANGE
	CLRQ	-(SP)			;PLACE TO HOLD IDENT
	MOVL	SP,R6			;ADR OF IDENT QUADWORD
	$IMGACT_S	-		;P0 MERGE IMAGE ACTIVATE CALL
		NAME=@FILNAM(AP),-	;FILE NAME
		DFLNAM=@DFLTNAM(AP),-	;DEFAULT FILE NAME
		HDRBUF=@HDRBUF(AP),-	;IMAGE HEADER BUFFER ADDRESS
		IMGCTL=R7,-		;IMAGE ACTIVATION FLAGS
		INADR=(R4),-		;INPUT BLUEPRINT P0 RANGE
		RETADR=(R5),-		;RETURN VA RANGE
		IDENT=(R6)		;NO IDENT PARAMETER
	BLBC	R0,IMGACT_ERR		;BR IF ERROR IN $IMGACT
	BBC	#IAC$V_P1MERGE,R7,50$	;ALL DONE IF P0 MERGE
	MOVQ	(R5),R2			;R2=START VA, R3=END VA  (MAPPED)
	SUBL2	R2,R3			;GET # OF BYTES MAPPED
	MOVL	@#CTL$GL_PHD,R0		;GET ADR OF PROCESS HEADER
	ADDL3	#^X1FF,PHD$L_FREP1VA(R0),4(R4) ;GET END VA IN P1 SPACE
	SUBL3	R3,4(R4),(R4)		;GET START VA IN P1 SPACE
	$DELTVA_S	-		;DELETE P0 VIRTUAL ADDRESS RANGE MAPPED
		INADR=(R5)		;VA RANGE RETURNED BY $IMGACT
	BLBC	R0,100$			;BRANCH IF ERROR IN $DELTVA
	ASSUME	IAC$V_EXPREG LE 7	;BIT MUST BE IN LOW-ORDER BYTE
	BICB2	#IAC$M_EXPREG,R7	;TURN OFF EXPREG BIT BEFORE P1 ACTIVATE
	$IMGACT_S	-		;NOW ACTIVATE IMAGE INTO P1 SPACE
		NAME=@FILNAM(AP),-	;FILE NAME
		DFLNAM=@DFLTNAM(AP),-	;DEFAULT FILE NAME
		HDRBUF=@HDRBUF(AP),-	;IMAGE HEADER BUFFER ADDRESS
		IMGCTL=R7,-		;IMAGE ACTIVATION FLAGS
		INADR=(R4),-		;INPUT EXACT P1 RANGE
		RETADR=(R5),-		;RETURN VA RANGE
		IDENT=(R6)		;NO IDENT PARAMETER
	BLBC	R0,IMGACT_ERR		;BRANCH IF ERROR IN $IMGACT
50$:	$IMGFIX_S			;PERFORM ADDRESS RELOCATION
	BLBC	R0,IMGACT_ERR		;QUIT IF ERROR OCCURS
	BBC	#IAC$V_P1MERGE,R7,75$	;ALL DONE IF P0 MERGE
	PUSHL	R5			;PASS RETADR ARRAY TO KERNEL MODE
	PUSHL	#1			;ONE ARGUMENT FOR ROUTINE
	$CMKRNL_S -			;SET A NEW CONTROL REGION BASE
		ROUTIN=REORDER_VECTOR,- ; AND MANIPULATE VECTORS
		ARGLST=(SP)	
75$:	MOVQ	(R5),@RETADR(AP)	;SET RETURN VA RANGE ACTUALLY MAPPED
	MOVZBL	#SS$_NORMAL,R0		;REPORT SUCCESSFUL MERGE IMAGE ACTIVATE
100$:	RET				; AND RETURN TO CALLER

IMGACT_ERR:
	ADDL3	#1,(R5),R1		;ANYTHING AT ALL MAPPED?
	BEQL	100$			;BR IF NOTHING MAPPED (SKIP $DELTVA)
	PUSHL	R0			;REMEMBER RETURN STATUS CODE
	$DELTVA_S	-		;DELETE P0 VIRTUAL ADDRESS RANGE MAPPED
		INADR=(R5)		;VA RANGE RETURNED BY $IMGACT
	MOVL	(SP)+,R0		;RESTORE ORIGINAL ERROR CODE
	BRB	100$			;JOIN COMMON CODE
	.DSABL	LSB

	.SUBTITLE	REORDER_VECTOR - Reorder Privileged Vector List
;+
; Functional Description:
;
;	This routine scans the various privileged vector lists and reorders
;	each list so that the vectors that point into the image that was just
;	activated into P1 space precede the other vectors. In addition, the
;	cells that contain the reset points are altered to locate the first
;	vector that is NOT in the image just mapped. 
;
;	The net result of this change is that the vectors associated with an
;	image permanently mapped into P1 space survive image rundown. 
;
; Input Parameter:
;
;	4(AP) - Address of two-longword array that describes the address
;		range into which the image was just mapped.
;
; Implicit Input:
;
;	CTL$A_DISPVEC - The address of two pages devoted to dispatch vectors
;		for kernel, exec, rundown, and message sections.
;
;	IAC$AW_VECRESET - The address of a four-word array that contains the
;		reset points for each of the four dispatch tables.
;
; Output Parameters:
;
;	none
;
; Implicit Output:
;
;	If any of the addresses in any of the vectors below the reset point
;	are located in the image just mapped into P1 space, these vectors are
;	switched around and the reset point modified so that the vectors
;	survive image rundown. 
;
; Calling Sequence:
;
;	$CMKRNL	routin = REORDER_VECTOR 
;-

ABSOLUTE_MODE = ^X9F
JSB_ABSOLUTE = ABSOLUTE_MODE@8 ! OP$_JSB ; Opcode and mode for JSB @#address
VECTOR_SIZE  = 6			; Six bytes in such an instruction
VECTOR_PAGE  = 256			; One half page for each vector
VECTOR_COUNT = 4			; There are four of them

REORDER_VECTOR:
	.WORD	^M<R2,R3,R4,R5>
	MOVL	4(AP),R2		; Save address range pointer in R2
	MOVAL	@#CTL$A_DISPVEC,R4	; Get base address of vector pages
	CLRL	R5			; R5 is an index on the section type

; The outer loop is executed for each different type of dispatch vector

10$:	MOVZWL	@#IAC$AW_VECRESET[R5],-	; Get initial reset point
		R0
	ADDL2	R4,R0			; Convert offset to an address
	MOVAB	2(R0),R1		; Point R1 to first JSB destination

; The inner loop is executed for each vector in the page

20$:	CMPW	(R0)+,#JSB_ABSOLUTE	; First two bytes of JSB @#address?
	BNEQ	50$			; Nope. Must be end of list
	CMPL	(R0),(R2)		; Is address below lower limit?
	BLSSU	40$			; Yup, skip to next vector
	CMPL	(R0),4(R2)		; Is address above upper limit?
	BGTRU	40$			; Yup, skip to next vector
	CMPL	R0,R1			; Does RESET locate the same place?
	BEQL	30$			; Yes. No exchange necessary

; The next three instructions exchange the two vectors located by R0 and R1.

	MOVL	(R1),R3			; Save a vector
	MOVL	(R0),(R1)		; Move the new vector up the list
	MOVL	R3,(R0)			; Restore the saved vector in a new home

30$:	ADDL	#VECTOR_SIZE,R1		; Advance the reset point

40$:	ADDL	#4,R0			; Skip over address
	BRB	20$			; ... and get the next vector

; At this point, we have successfully traversed a vector page. We need
; to establish a new reset point.

50$:	SUBL	R4,R1			; Get new reset offset
	SUBW3	#2,R1,IAC$AW_VECRESET[R5]	; Store it minus bias
	ADDL	#VECTOR_PAGE,R4		; Advance base of next "page"
	AOBLSS	#VECTOR_COUNT,R5,10$	; Have we done all vector sections?

	MOVL	(R2),G^CTL$GL_CTLBASVA	; Set new control region base address 
	MOVZWL	#SS$_NORMAL,R0		; Indicate success
	RET				; ... and return

	.END
