MODULE CREATE (
		LANGUAGE (BLISS32),
		IDENT = 'V04-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This module processes the create function. It creates a file with the
!	attributes requested, enters it in a directory if desired, and
!	accesses it if requested.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  28-Mar-1977  15:05
!
! MODIFIED BY:
!
!	V04-001	CDS0006		Christian D. Saether	12-Sep-1984
!		Modify test for re-reading file header after ENTER
!		(CDS0004).
!
!	V03-042	CDS0005		Christian D. Saether	31-Aug-1984
!		Defer building of ACL's until after initial extend
!		takes place so that the map pointer for a contiguous
!		file is in the primary header.
!
!	V03-041	CDS0004		Christian D. Saether	30-Aug-1984
!		Reread newly created header after ENTER because
!		it may have been flushed from the cache by a multi
!		header directory file.
!
!	V03-040	CDS0013		Christian D. Saether	14-Aug-1984
!		Modify creation of extension fcb chain, if necessary.
!
!	V03-039	LMP0298		L. Mark Pilant,		7-Aug-1984  16:22
!		Add the necessary protection checks for create-if.
!
!	V03-038	ACG0438		Andrew C. Goldstein,	1-Aug-1984  21:23
!		Fix link truncation error; release any existing
!		serialization lock before starting create
!
!	V03-037	LMP0288		L. Mark Pilant,		29-Jul-1984  13:56
!		Make sure that the ACL queue head of the new file is properly
!		initialized when copying the ACL from a prior version (this
!		bug introcuded in LMP0284.)
!
!	V03-036	LMP0284		L. Mark Pilant,		26-Jul-1984  12:14
!		Fix call to ACL_INIT_QUEUE, since it was moved to ACLSUBR.
!
!	V03-035	ACG0440		Andrew C. Goldstein,	25-Jul-1984  14:27
!		Move setup of default access ACE to after attributes are written
!
!	V03-034	LMP0275		L. Mark Pilant,		23-Jul-1984  14:40
!		Don't try to propagate an ACL if there isn't one.
!
!	V03-033	ACG0437		Andrew C. Goldstein,	13-Jul-1984  15:27
!		Corrections to alternate file ownership: fix interface to
!		CHANGE_OWNER so that next version propagation works and
!		so that space charging is done correctly. Also add an
!		ACL entry for the creator to guarantee access.
!
!	V03-032	CDS0012		Christian D. Saether	29-Jun-1984
!		Add another call to read_header after copying info
!		in propagate_attr because primary header may have
!		been flushed from the cache.
!
!	V03-031	CDS0011		Christian D. Saether	22-Apr-1984
!		Modify access arbitration.
!
!	V03-030	CDS0010		Christian D. Saether	11-Apr-1984
!		Remove call to allocation_unlock after create_header
!		call because that routine does it now.
!
!	V03-029	CDS0009		Christian D. Saether	 1-Apr-1984
!		Call ALLOCATION_UNLOCK prior to deleting previous file
!		version in supersede operations to eliminate possible
!		deadlock condition if the previous version is being
!		extended at the same time.
!		Also call ALLOCATION_UNLOCK after an ENTER because it
!		may have extended the directory and thus be holding the
!		allocation lock, also causing potential deadlock further
!		on in a number of ways.
!
!	V03-028	ACG0412		Andrew C. Goldstein,	22-Mar-1984  18:19
!		Implement agent access mode support; add access mode to
!		check protection call; make attribute propagation to self
!		a NOP (when a file is entered as a new version of itself).
!
!	V03-027	ACG0408		Andrew C. Goldstein,	20-Mar-1984  17:54
!		Make APPLY_RVN and DEFAULT_RVN macros;
!		Make rest of global storage based.
!
!	V03-026	ACG0405		Andrew C. Goldstein,	16-Mar-1984  15:12
!		Fix handling of file headers in CHANGE_OWNER
!
!	V03-025	CDS0008		Christian D. Saether	 9-Mar-1984
!		Remember CURR_LCKINDX from primary context and set
!		it in secondary after OPEN_FILE so that copy_info
!		has the right lock basis when writing acl's to the
!		primary file's header.
!
!	V03-024	LMP0203		L. Mark Pilant,		29-Feb-1984  10:34
!		Add support for FIB$V_PROPAGATE.  This allow the propagation
!		rules to apply on an enter operation as well as a create
!		operation.
!
!	V03-023	LMP0189		L. Mark Pilant,		6-Feb-1984  13:54
!		Add support for FIB$V_DIRACL.  This allows the ACL of a
!		directory file parent to be copied directly to the
!		children (with the exception of NOPROPAGATE ACEs).
!
!	V03-022	LMP0188		L. Mark Pilant,		3-Feb-1984  16:08
!		Add support for a classification block.
!
!	V03-021	CDS0007		Christian D. Saether	17-Jan-1984
!		Modify interface to DEFAULT_RVN.
!
!	V03-020	CDS0006		Christian D. Saether	27-Dec-1983
!		Use BIND_COMMON macro.
!
!	V03-019	LMP0174		L. Mark Pilant,		1-Dec-1983  14:01
!		Change routine name for default ACE propagation.  Also,
!		Add a call to a routine to do general propagation.
!
!	V03-018	CDS0005		Christian D. Saether	14-Sep-1983
!		Modify interface to SERIAL_FILE routine.
!
!	V03-017	ACG56916	Andrew C. Goldstein,	21-Jun-1983  18:25
!		Use central routine for date management
!
!	V03-016	LMP0156		L. Mark Pilant,		19-Sep-1983  15:43
!		Files not entered into a directory now get the process
!		default protection.
!
!	V03-015	LMP0149		L. Mark Pilant,		13-Sep-1983  11:25
!		Correct a logic problem that caused problems during the
!		protection check of a write attribute operation.
!
!	V03-014	LMP0148		L. Mark Pilant,		31-Aug-1983  13:29
!		Make sure propagated attributes make it to the header.
!
!	V03-013	CDS0004		Christian D. Saether	16-May-1983
!		Release allocation lock after newly allocated file
!		header is locked.
!
!	V03-012	CDS0003		Christian D. Saether	 4-May-1983
!		Add call to SERIAL_FILE routine to interlock file
!		processing.
!
!	V03-011	CDS0002		Christian D. Saether	 9-Apr-1983
!		Reflect change to ACCESS_LOCK interface.
!
!	V03-010	ACG0323		Andrew C. Goldstein,	25-Mar-1983  15:51
!		Simplify backlink handling to track RENAME changes
!
!	V03-009	ACG53759	Andrew C. Goldstein,	24-Mar-1983  15:10
!		Update revision date & count & expiration on ENTER
!
!	V03-008	LMP0091		L. Mark Pilant,		18-Mar-1983  16:14
!		Add a condition handler to the attribute propagation to
!		catch non-existant files.  Also, copy the entire file name
!		when creating a long file named file.
!
!	V03-007	LMP0080		L. Mark Pilant,		14-Feb-1983  16:16
!		Add a new routine that is called to propagate the attributes
!		from either the previous version of the file or the parent
!		directory as necessary.
!
!	V03-006	ACG53050	Andrew C. Goldstein,	31-Jan-1983  13:59
!		Remove RVN check from check for dummy file ID
!
!	V03-005	CDS0001		Christian D. Saether	12-Jan-1983
!		Call routine to take out file access lock.
!
!	V03-004	LMP0059		L. Mark Pilant,		21-Dec-1982  11:17
!		Always create an FCB when accessing a file header.  This
!		eliminates a lot of special casing in FCB handling.
!
!	V03-003	LMP0047		L. Mark Pilant,		29-Sep-1982  12:05
!		Put back in the volume protection check deleted by LMP0036.
!
!	V03-002	LMP0036		L. Mark Pilant,		 5-Aug-1982  13:50
!		Shuffle the order that the protection checks are done to
!		allow for ACL's.
!
!	V03-001	LMP0016		L. Mark Pilant,		25-Mar-1982  13:18
!		Remove diddling of the COMPLETE bit in the window segments.
!
!	V02-021	ACG0265		Andrew C. Goldstein,	15-Feb-1982  9:50
!		Fix order of expiration date handling
!
!	V02-020	ACG0258		Andrew C. Goldstein,	26-Jan-1982  16:57
!		Fix reference to RVN 1 in expiration date processing
!
!	V02-019	ACG0230		Andrew C. Goldstein,	23-Dec-1981  22:59
!		Add expiration date support
!
!	V02-018	ACG0247		Andrew C. Goldstein,	23-Dec-1981  20:44
!		Set revision date to creation date
!
!	V02-017	ACG0245		Andrew C. Goldstein,	23-Dec-1981  20:40
!		Don't write back link if file is a spool file
!
!	V02-016	LMP0003		L. Mark Pilant,	 8-Dec-1981  10:20
!		Added byte limit quota check on window creation.
!
!	V02-015	ACG0238		Andrew C. Goldstein,	11-Dec-1981  23:30
!		Allow creation of dummy directory entries
!
!	V02-014	ACG0208		Andrew C. Goldstein,	17-Nov-1981  15:16
!		Add segmented directory record support
!
!	V02-013	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	CREATE		: L_NORM,	! CREATE function routine
	PROPAGATE_ATTR	: L_NORM,	! Propagate file attributes
	PROPAGATE_HANDLER,		! condition handler for above
	COPY_INFO	: L_NORM;	! Copy info from old to new file

GLOBAL ROUTINE CREATE : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine processes the CREATE function. It creates a file with the
!	attributes requested, enters it in a directory if desired, and
!	accesses the file if requested.
!
! CALLING SEQUENCE:
!	CREATE ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!	IO_PACKET: packet of this I/O request
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	PRIMARY_FCB: FCB of file if accessed
!	CURRENT_WINDOW: window of file if accessed
!	USER_STATUS: I/O status block of user
!
! ROUTINE VALUE:
!	1 if successful
!	0 if error
!
! SIDE EFFECTS:
!	File created, blocks allocated, directory modified, file accessed, etc.
!
!--

BEGIN

LITERAL
	ACE_LENGTH	= $BYTEOFFSET (ACE$L_KEY) + 4;

LOCAL
	STATUS,				! general return status
	K,				! miscellaneous constant
	FCB_CREATED,			! flag indicating new FCB created
	PACKET		: REF BBLOCK,	! address of I/O packet
	ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH],
					! buffer descriptors
	FIB		: REF BBLOCK,	! file identification block
	RESULT_LENGTH,			! length of result string from ENTER
	RESULT		: VECTOR [FILENAME_LENGTH+6, BYTE],
					! result string from ENTER
	LINK_DID	: BBLOCK [FID$C_LENGTH], ! header back link
	IDENT_AREA	: REF BBLOCK,	! pointer to file header ident area
	PCB		: REF BBLOCK,	! requestor PCB address
	ARB		: REF BBLOCK,	! access rights block of caller
	MAP_AREA	: REF BBLOCK,	! file header map area
	IDX_FCB		: REF BBLOCK,	! FCB of index file
	FCB		: REF BBLOCK,	! FCB address
	UCB		: REF BBLOCK,	! UCB pointer for RVN 1
	PRIMARY_VCB	: REF BBLOCK,	! VCB of root volume
	HEADER		: REF BBLOCK,	! address of file header
	NEW_HEADER	: REF BBLOCK,	! Address of extension header
	ACL_CONTEXT,			! dummy ACL context longword
	ACE		: BBLOCK [ACE_LENGTH], ! buffer for ACE for file creator
	FUNCTION	: BLOCK [1];	! function code qualifiers

EXTERNAL
	ACP$GB_WRITBACK	: BITVECTOR ADDRESSING_MODE (ABSOLUTE),
					! ACP write back cache enable
	SCH$GL_PCBVEC	: REF VECTOR ADDRESSING_MODE (ABSOLUTE), ! PCB vector
	EXE$GL_DYNAMIC_FLAGS	: ADDRESSING_MODE (ABSOLUTE);
					! Dynamic SYSGEN flags

EXTERNAL LITERAL
	EXE$V_CLASS_PROT;		! Set if doing non-discretionary checks

BIND_COMMON;

EXTERNAL ROUTINE
	ACL_DELETEACL	: ADDRESSING_MODE (GENERAL),! delete acls
	UPDATE_FCB	: L_NORM,	! rebuild fcb from header
	REBLD_PRIM_FCB	: L_NORM NOVALUE, ! rebuild primary fcb from header
	BUILD_EXT_FCBS	: L_NORM NOVALUE, ! build extension fcb chain
	RELEASE_SERIAL_LOCK : L_NORM,	! release file synchronization lock
	ALLOCATION_UNLOCK : L_NORM,	! synchronize allocation/deallocation
	ARBITRATE_ACCESS : L_JSB_2ARGS,	! establish file access.
	CONV_ACCLOCK	: L_NORM,	! convert/dequeue access lock.
	SERIAL_FILE	: L_NORM,	! interlock file processing.
	GET_FIB		: L_NORM,	! get FIB for operation
	GET_LOC_ATTR	: L_NORM,	! get placement data form attribute list
	GET_LOC		: L_NORM,	! get placament data
	SWITCH_VOLUME	: L_NORM,	! switch context to specified volume
	SELECT_VOLUME	: L_NORM,	! find volume in volume set for create
	CHECK_PROTECT	: L_NORM,	! check file protection
	CHARGE_QUOTA	: L_NORM,	! charge blocks to user's disk quota
	CREATE_HEADER	: L_NORM,	! create a file ID and header
	CHECKSUM	: L_NORM,	! compute header checksum
	MARK_DIRTY	: L_NORM,	! mark buffer for write-back
	ACL_INIT_QUEUE	: ADDRESSING_MODE (GENERAL),	! Initialize ACL queue
	ACL_ADDENTRY	: ADDRESSING_MODE (GENERAL),	! add entry to ACL
	ACL_BUILDACL	: ADDRESSING_MODE (GENERAL) L_NORM, ! build ACL into file headers
	READ_HEADER	: L_NORM,	! read file header
	ENTER		: L_NORM,	! enter file in directory
	COPY_NAME	: L_NORM,	! copy file name to result string
	SET_REVISION	: L_NORM,	! set file revision and exp dates
	CREATE_FCB	: L_NORM,	! create an FCB
	CREATE_WINDOW	: L_NORM,	! create a window
	SET_EXPIRE	: L_NORM,	! enable expiration date recording
	MAKE_ACCESS	: L_NORM,	! complete the access
	MARKDEL_FCB	: L_NORM,	! mark FCB for delete
	WRITE_ATTRIB	: L_NORM,	! write attributes
	EXTEND		: L_NORM,	! extend the file
	SAVE_CONTEXT	: L_NORM,	! save reentrant context area
	RESTORE_CONTEXT	: L_NORM,	! restore reentrant context area
	MARK_DELETE	: L_NORM,	! mark file for delete
	REMAP_FILE	: L_NORM,	! remap the file completely
	SEARCH_FCB	: L_NORM ADDRESSING_MODE (GENERAL); ! Search FCB list


! Enable the deaccess cleanup if an access is taking place.
!

PACKET = .IO_PACKET;
FUNCTION = .PACKET[IRP$W_FUNC];
IF .FUNCTION[IO$V_ACCESS]
THEN
    BEGIN
    CLEANUP_FLAGS[CLF_ZCHANNEL] = 1;
    CLEANUP_FLAGS[CLF_DELWINDOW] = 1;
    END;

! Set up pointers to interesting control blocks.
!

PCB = .SCH$GL_PCBVEC[.(IO_PACKET[IRP$L_PID])<0,16>];
ABD = .BBLOCK [.PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];
					! pointer to buffer descriptors
FIB = GET_FIB (.ABD);			! pointer to FIB

IF .FIB[FIB$V_TRUNC]
OR .FIB[FIB$W_VERLIMIT] GTRU 32767
OR (.FUNCTION[IO$V_DELETE] AND NOT .FUNCTION[IO$V_ACCESS])
OR (NOT .FUNCTION[IO$V_CREATE]
    AND (.FIB[FIB$V_EXTEND]
	OR .PACKET[IRP$W_BCNT] GTR ABD$C_ATTRIB
	OR .FUNCTION[IO$V_ACCESS]
	)
    )
THEN ERR_EXIT (SS$_BADPARAM);

IF .CURRENT_VCB[VCB$V_NOALLOC]
THEN ERR_EXIT (SS$_WRITLCK);

! Do the create if requested. Start by allocating a file number from the
! index file bitmap and reading in the initial file header.
!

IF .FUNCTION[IO$V_CREATE]
THEN
    BEGIN

! Deal with special cases related to create-if. Release any serialization
! lock we are holding, and force supersede mode to dispose of bad
! directory entries.
!

    IF .PACKET[IRP$V_FCODE] EQL IO$_ACCESS
    THEN
	BEGIN
	IF .PRIM_LCKINDX NEQ 0
	THEN
	    BEGIN
	    RELEASE_SERIAL_LOCK (.PRIM_LCKINDX);
	    PRIM_LCKINDX = 0;
	    END;
	FIB[FIB$V_SUPERSEDE] = 1;

! Finally, the protection check if the directory has been accessed.  This
! is because the protection check is not done in DIR_ACCESS (via ENTER) if
! the directory file has already been accessed.
!

	IF .DIR_FCB NEQ 0
	AND .CLEANUP_FLAGS[CLF_DIRECTORY]
	AND NOT .CLEANUP_FLAGS[CLF_SPOOLFILE]
	THEN
	    BEGIN
	    STATUS = CHECK_PROTECT (WRITE_ACCESS, 0, .DIR_FCB, 0,
				    (IF .BBLOCK [FIB[FIB$L_ALT_ACCESS], ARM$V_DELETE]
				     THEN ARM$M_WRITE ELSE 0),
				     .FIB[FIB$V_ALT_REQ]);
	    IF .STATUS EQL SS$_NOTALLPRIV
	    THEN FIB[FIB$V_ALT_GRANTED] = 0;
	    END;
	END;

! Handle any placement specified and find a suitable volume for the
! file in a volume set.
!

    FIB[FIB$V_PROPAGATE] = 0;			! Since propagation is implied
    IF .FIB[FIB$V_ALLOCATR]
    THEN GET_LOC_ATTR (.ABD, .FIB);
    GET_LOC (.FIB, LOC_RVN, LOC_LBN);
    IF .LOC_RVN NEQ 0
    AND .FIB[FIB$V_EXACT]
    THEN
	SWITCH_VOLUME (.LOC_RVN)
    ELSE
	SELECT_VOLUME (.FIB, (IF .FIB[FIB$V_EXTEND]
			      THEN .FIB[FIB$L_EXSZ]
			      ELSE 0));

    CHECK_PROTECT (CREATE_ACCESS, 0, 0, 0);	! Check volume protection
    IF .BBLOCK [CURRENT_UCB[UCB$L_DEVCHAR], DEV$V_SWL]
    OR .CURRENT_VCB[VCB$V_NOALLOC]
    THEN ERR_EXIT (SS$_WRITLCK);

    HEADER = CREATE_HEADER (FIB[FIB$W_FID]);

! Now build an initialized file header in the buffer.
!

    ARB = .PACKET[IRP$L_ARB];

    IF .EXE$GL_DYNAMIC_FLAGS<EXE$V_CLASS_PROT,1>
    THEN HEADER[FH2$B_IDOFFSET] = FH2$C_FULL_LENGTH / 2
    ELSE HEADER[FH2$B_IDOFFSET] = FH2$C_LENGTH / 2;
    HEADER[FH2$B_MPOFFSET] = .HEADER[FH2$B_IDOFFSET] + FI2$C_LENGTH / 2;
    HEADER[FH2$B_ACOFFSET] = ($BYTEOFFSET (FH2$W_CHECKSUM)) / 2;
    HEADER[FH2$B_RSOFFSET] = ($BYTEOFFSET (FH2$W_CHECKSUM)) / 2;
    HEADER[FH2$W_SEG_NUM] = 0;
    HEADER[FH2$W_STRUCLEV] = FH2$C_LEVEL2 + 1;

    CH$FILL (0, 512 - $BYTEOFFSET(FH2$W_EXT_FID), HEADER[FH2$W_EXT_FID]);
    HEADER[FH2$L_FILEOWNER] = .ARB[ARB$L_UIC];
    HEADER[FH2$W_FILEPROT] = .PCB[PCB$L_DEFPROT];

    IF .FUNCTION[IO$V_DELETE]
    THEN HEADER[FH2$V_MARKDEL] = 1;

    IF .CLEANUP_FLAGS[CLF_SPOOLFILE]
    THEN HEADER[FH2$V_SPOOL] = 1;

    $ASSUME (ARB$S_CLASS EQL FH2$S_CLASS_PROT);

    IF .EXE$GL_DYNAMIC_FLAGS<EXE$V_CLASS_PROT,1>
    THEN CH$MOVE (ARB$S_CLASS, ARB[ARB$R_CLASS], HEADER[FH2$R_CLASS_PROT]);

    NEW_FID = 0;			! new file ID is no longer unrecorded
    CLEANUP_FLAGS[CLF_DELFILE] = 1;
    CLEANUP_FLAGS[CLF_HDRNOTCHG] = 1;
    FILE_HEADER = .HEADER;		! record header address for cleanup
    CHECKSUM (.HEADER);

! At this point build the necessary FCB, even if the file is not accessed.
! This is necessary to allow the ACL to be built.
!

    FCB = KERNEL_CALL (CREATE_FCB, .HEADER);
    PRIMARY_FCB = .FCB;
    END;

! If a non-zero directory ID is supplied, enter the file in the directory.
! Otherwise, just copy down the name string (if any) into the result string.
! Note that directory operations are also nooped on spool files operations.
!

IF .CLEANUP_FLAGS[CLF_DIRECTORY] AND NOT .CLEANUP_FLAGS[CLF_SPOOLFILE]
THEN
    BEGIN
    CH$FILL (0, FID$C_LENGTH, OLD_VERSION_FID);
    ENTER (.ABD, .FIB, RESULT_LENGTH, RESULT);

! Always attempt to release the allocation lock here.  We will be holding
! it if the directory was extended.  It might make more sense to release
! it in the directory extension, but the call is relatively cheap.
!

    ALLOCATION_UNLOCK ();

! ENTER may have flushed the new buffer from the cache if either the
! directory file header(s) and quota file header(s) were accessed and
! there were multiple headers.  Make sure FILE_HEADER is what we think
! it is.
!

    IF .FUNCTION [IO$V_CREATE]
    THEN
	FILE_HEADER = READ_HEADER (0, .FCB);

    IF .FUNCTION[IO$V_CREATE] OR .FIB[FIB$V_PROPAGATE]
    THEN
	BEGIN

! If the CREATE modifier was not specified, then this must be a directory
! entry operation.  In which case it is necessary to actually access the
! file being entered, so that an FCB will exist for the propagation to
! occur.

	IF NOT .FUNCTION[IO$V_CREATE]
	THEN
	    BEGIN

! Switch context to the volume of the specified RVN.
!

	    SWITCH_VOLUME (.FIB[FIB$W_FID_RVN]);

! Synchronize further processing on this file.
!

	    PRIM_LCKINDX = SERIAL_FILE (FIB [FIB$W_FID]);

! Find the FCB of the file, if one exists. then read the file
! header. If there is no FCB, create one.
!

	    FCB = SEARCH_FCB (FIB[FIB$W_FID]);
	    HEADER = READ_HEADER (FIB[FIB$W_FID], .FCB);
	    FCB_CREATED = 0;

	    IF .FCB EQL 0
	    THEN
		BEGIN
		FCB_CREATED = 1;
		FCB = KERNEL_CALL (CREATE_FCB, .HEADER);
		END;
	    PRIMARY_FCB = .FCB;			! record FCB for external use

! If the file is multi-header, read the extension headers and create
! extension FCB's as necessary. Finally read back the primary header.
!

	    IF .FCB_CREATED
	    THEN
		BUILD_EXT_FCBS (.HEADER)
	    ELSE
		IF .FCB [FCB$V_STALE]
		THEN
		    BEGIN
		    REBLD_PRIM_FCB (.PRIMARY_FCB, .HEADER);
		    BUILD_EXT_FCBS (.HEADER);
		    END;

! Wipe out any acls that may have existed, because they are going
! to be propagated.
!

	    IF .BBLOCK [FCB [FCB$R_ORB], ORB$V_ACL_QUEUE]
	    THEN
		ACL_DELETEACL (FCB [FCB$L_ACLFL], 0);

	    END;

! Now propagate the file attributes to the file just entered.

	STATUS = PROPAGATE_ATTR (.FIB);
	IF NOT .STATUS THEN ERR_EXIT (.STATUS);
	HEADER = .FILE_HEADER;
	HEADER[FH2$L_FILEOWNER] = .PRIMARY_FCB[FCB$L_FILEOWNER];
	HEADER[FH2$W_FILEPROT] = .PRIMARY_FCB[FCB$W_FILEPROT];
	CHECKSUM (.HEADER);
	MARK_DIRTY (.HEADER);
	END;
    END
ELSE
    BEGIN
    KERNEL_CALL (COPY_NAME, .ABD);
    RESULT_LENGTH = MINU (.ABD[ABD$C_NAME, ABD$W_COUNT], FI2$S_FILENAME+FI2$S_FILENAMEXT);
    CH$MOVE (.RESULT_LENGTH,
	.ABD[ABD$C_NAME, ABD$W_TEXT] + ABD[ABD$C_NAME, ABD$W_TEXT] + 1, RESULT);
    END;

! Read the file header, regardless of the operation. Do a protection check
! on the directory pointed to by the present back link. If it is not valid,
! or if write access is allowed, then overwrite the back link with the new
! directory ID. Copy the file string into the header ident area. Then write
! attributes as specified.
!

IF .FIB[FIB$W_FID_NUM] NEQ 65535
OR .FIB[FIB$W_FID_SEQ] NEQ 65535
OR .FIB[FIB$B_FID_NMX] NEQ 255
THEN
    BEGIN
    PRIMARY_VCB = .CURRENT_VCB;
    IF .PRIMARY_VCB[VCB$W_RVN] NEQ 0
    THEN
	BEGIN
	UCB = .VECTOR [CURRENT_RVT[RVT$L_UCBLST], 0];
	IF .UCB EQL 0
	THEN ERR_EXIT (SS$_DEVNOTMOUNT);
	PRIMARY_VCB = .UCB[UCB$L_VCB];
	END;

    IF .PRIM_LCKINDX EQL 0
    THEN
	PRIM_LCKINDX = SERIAL_FILE (FIB [FIB$W_FID]);

    HEADER = READ_HEADER (FIB[FIB$W_FID], 0);
    IDENT_AREA = .HEADER + .HEADER[FH2$B_IDOFFSET]*2;

    CH$MOVE (FID$C_LENGTH, HEADER[FH2$W_BACKLINK], PREV_LINK);
    IF .PREV_LINK[FID$W_NUM] EQL 0
    AND .PREV_LINK[FID$W_RVN] EQL 0
    THEN
	BEGIN
	IF NOT .CLEANUP_FLAGS[CLF_SPOOLFILE]
	THEN
	    BEGIN
	    CH$MOVE (FID$C_LENGTH, FIB[FIB$W_DID], HEADER[FH2$W_BACKLINK]);
	    DEFAULT_RVN (HEADER[FH2$W_BK_FIDRVN],.CURRENT_RVN);
	    CLEANUP_FLAGS[CLF_FIXLINK] = 1;
	    END;

	CH$MOVE (FI2$S_FILENAME, IDENT_AREA[FI2$T_FILENAME], PREV_INAME);
	CH$MOVE (FI2$S_FILENAMEXT, IDENT_AREA[FI2$T_FILENAMEXT],
				   PREV_INAME[FI2$S_FILENAME]);
	CH$COPY (.RESULT_LENGTH, RESULT, ' ', FI2$S_FILENAME, IDENT_AREA[FI2$T_FILENAME]);
	IF .HEADER[FH2$B_MPOFFSET] - .HEADER[FH2$B_IDOFFSET]
	   GEQU ($BYTEOFFSET (FI2$T_FILENAMEXT) + FI2$S_FILENAMEXT) / 2
	THEN
	    BEGIN
	    K = MAX (.RESULT_LENGTH - FI2$S_FILENAME, 0);
	    CH$COPY (.K, RESULT[FI2$S_FILENAME], ' ',
		     FI2$S_FILENAMEXT, IDENT_AREA[FI2$T_FILENAMEXT]);
	    END;

! Update revision count and date and expiration date as appropriate.
!

	SET_REVISION (.HEADER, 3);
	END;

! Set up file dates; then write the attributes.
!

    IF .FUNCTION[IO$V_CREATE]
    THEN
	BEGIN
	IDENT_AREA[FI2$W_REVISION] = 0;
	CH$MOVE (FI2$S_CREDATE, IDENT_AREA[FI2$Q_REVDATE], IDENT_AREA[FI2$Q_CREDATE]);

	IF .PACKET[IRP$W_BCNT] GTR ABD$C_ATTRIB
	THEN
	    BEGIN
	    WRITE_ATTRIB (.HEADER, .ABD, 0);
	    HEADER = .FILE_HEADER;
	    END;

! If the file is now owned by a UIC other than the creator, add an ACL
! entry granting owner's access to the creator. Then write the modified
! ACL into the header.

	IF .HEADER[FH2$L_FILEOWNER] NEQ .ARB[ARB$L_UIC]
	AND NOT .CLEANUP_FLAGS[CLF_SYSPRV]
	THEN
	    BEGIN
	    ACL_INIT_QUEUE (PRIMARY_FCB[FCB$R_ORB]);
	    ACL_CONTEXT = 0;
	    ACE[ACE$B_SIZE] = ACE_LENGTH;
	    ACE[ACE$B_TYPE] = ACE$C_KEYID;
	    ACE[ACE$W_FLAGS] = ACE$M_NOPROPAGATE;
	    ACE[ACE$L_ACCESS] = ACE$M_CONTROL OR
				(.(HEADER[FH2$W_FILEPROT])<4,4> XOR %B'1111');
	    ACE[ACE$L_KEY] = .ARB[ARB$L_UIC];
	    ACL_ADDENTRY (PRIMARY_FCB[FCB$L_ACLFL], ACL_CONTEXT, ACE_LENGTH, ACE);
	    STATUS = ACL_BUILDACL (.PRIMARY_FCB);
	    IF NOT .STATUS THEN ERR_EXIT (.STATUS);
	    END;

	CHARGE_QUOTA (.HEADER[FH2$L_FILEOWNER], 1, BITLIST (QUOTA_CHECK, QUOTA_CHARGE));
	CLEANUP_FLAGS[CLF_HDRNOTCHG] = 0;

! If access is requested, access the file.
!

	IF .FUNCTION[IO$V_ACCESS]
	THEN
	    BEGIN

	    IF NOT ARBITRATE_ACCESS (.FIB [FIB$L_ACCTL], .FCB)
	    THEN
		BUG_CHECK (XQPERR, 'how can we fail to access a new file?');

	    CURRENT_WINDOW = CREATE_WINDOW (.FIB[FIB$L_ACCTL],
		.FIB[FIB$B_WSIZE], .HEADER, .PACKET[IRP$L_PID], .FCB);

	    IF .CURRENT_WINDOW EQL 0
	    THEN
		BEGIN

! This will dequeue the access lock we may have taken above (if a cluster
! device) because the refcnt will be zero.
!

		CONV_ACCLOCK (0, .FCB);
		ERR_EXIT (SS$_EXBYTLM);
		END;

	    MAKE_ACCESS (.FCB, .CURRENT_WINDOW, .ABD);

	    IF .FUNCTION[IO$V_DELETE]
	    THEN KERNEL_CALL (MARKDEL_FCB, .FCB);
	    IF .(PRIMARY_VCB[VCB$Q_RETAINMAX]+4) NEQ 0
	    THEN KERNEL_CALL (SET_EXPIRE);
	    END;

! Now extend the file if requested.
!

	IF .FIB[FIB$V_EXTEND] THEN EXTEND (.FIB, .HEADER);
	HEADER = .FILE_HEADER;
	KERNEL_CALL (UPDATE_FCB, .HEADER);
	END;

    CHECKSUM (.HEADER);
    MARK_DIRTY (.HEADER);

    IF (.FUNCTION[IO$V_CREATE] OR .FIB[FIB$V_PROPAGATE])
	AND .PRIMARY_FCB NEQ 0
    THEN
	IF .BBLOCK[PRIMARY_FCB[FCB$R_ORB], ORB$V_ACL_QUEUE]
	THEN
	    BEGIN
	    STATUS = ACL_BUILDACL (.PRIMARY_FCB);
	    IF NOT .STATUS THEN ERR_EXIT (.STATUS);
	    END;

! Perform the remap operation if necessary to account for any initial extend.
!

    IF .FUNCTION[IO$V_ACCESS] AND .FIB[FIB$V_EXTEND]
    THEN IF .CURRENT_WINDOW[WCB$V_CATHEDRAL]
    THEN REMAP_FILE ();
    END;

! If this is a supersede operation, delete the file that was removed during
! the enter operation above. This must be done last since we cannot undo
! a delete in cleaning up from a subsequent error. We first copy the primary
! context into the context save area since this is a secondary operation.
!

IF .CLEANUP_FLAGS[CLF_SUPERSEDE]
THEN
    BEGIN
    ALLOCATION_UNLOCK ();
    SAVE_CONTEXT ();
    CH$COPY (FID$C_LENGTH, SUPER_FID, 0,
	     FIB$C_LENGTH - $BYTEOFFSET (FIB$W_FID), SECOND_FIB[FIB$W_FID]);
    SECOND_FIB[FIB$B_AGENT_MODE] = .FIB[FIB$B_AGENT_MODE];
    MARK_DELETE (SECOND_FIB, 1, 0, 0);
    RESTORE_CONTEXT ();
    END;


RETURN 1;

END;					! end of routine CREATE

ROUTINE PROPAGATE_ATTR (FIB) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to propagate the file attributes from one
!	file to another.  This may be from one version of a file to another
!	version of the file (either higher or lower) or from the parent
!	directory to the newly created file.  The following attributes are
!	currently copied:
!	    1)	File owner UIC
!	    2)	File Access Control List (ACL)
!	    3)	File protection (With some twiddling)
!
! CALLING SEQUENCE:
!	PROPAGATE_ATTR (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of the supplied FIB
!
! IMPLICIT INPUTS:
!	PRIMARY_FCB: address of the new file's FCB
!	DIR_FCB: address of the directory file's FCB
!	OLD_VERSION_FID: FID of the old version of the file
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1 if success
!	error code otherwise
!
! SIDE EFFECTS:
!	The attributes in the file header of the new file are modified
!	according to the attribute of the old version or parent directory.
!
!--

BEGIN

MAP
	FIB		: REF BBLOCK;		! Address of the FIB

LOCAL
	STATUS,					! Routine exit status
	WINDOW		: REF BBLOCK,		! Address of created window
	FILE_FCB	: REF BBLOCK,		! FCB for newly created file
	FCB		: REF BBLOCK;		! Address of FCB from window

BIND_COMMON;

EXTERNAL ROUTINE
	READ_HEADER	: L_NORM,		! read file header
	SAVE_CONTEXT	: L_NORM,		! Save reentrant context area
	RESTORE_CONTEXT	: L_NORM,		! Restore reentrant context area
	OPEN_FILE	: L_NORM,		! Open a file
	CLOSE_FILE	: L_NORM,		! Close a file
	CHECK_PROTECT	: L_NORM;		! Perform a protection check

ENABLE PROPAGATE_HANDLER;


! What we do depends on whether there is an old version present.
! If it exists, we copy attributes from it. If not, we copy attributes
! from the directory. If the old version is the same as the file being
! entered, we do nothing, because the net effect would be a NOP anyway,
! and we can't open the same file in both promary and secondary context.
!

IF CH$EQL (FID$C_LENGTH, OLD_VERSION_FID,
	   FID$C_LENGTH, PRIMARY_FCB[FCB$W_FID])
THEN RETURN 1;

IF .OLD_VERSION_FID[FID$W_NUM] NEQ 0
OR .OLD_VERSION_FID[FID$B_NMX] NEQ 0
THEN
    BEGIN
    LOCAL SAVCURRINDX;
    SAVE_STATUS = .USER_STATUS;
    FILE_FCB = .PRIMARY_FCB;			! Save created file FCB address
    SAVCURRINDX = .CURR_LCKINDX;
    SAVE_CONTEXT ();
    WINDOW = OPEN_FILE (OLD_VERSION_FID, 2);
    IF .WINDOW NEQ 0
    THEN
	BEGIN
	FCB = .WINDOW[WCB$L_FCB];
	IF CHECK_PROTECT (RDATT_ACCESS, 0, .PRIMARY_FCB,
			  MAXU (.IO_PACKET[IRP$V_MODE], .FIB[FIB$B_AGENT_MODE]))
	THEN
	    BEGIN

! Restore the current lock index we had from primary context.
! COPY_INFO may need to read the primary file's headers.
!

	    CURR_LCKINDX = .SAVCURRINDX;
	    STATUS = KERNEL_CALL (COPY_INFO, .FCB, .FILE_FCB, .FIB, 0);
	    CLOSE_FILE (.WINDOW);
	    RESTORE_CONTEXT ();
	    READ_HEADER (CURRENT_FIB[FIB$W_FID], .PRIMARY_FCB);
	    RETURN .STATUS;
	    END;
	END;
    RESTORE_CONTEXT ();
    USER_STATUS = .SAVE_STATUS;
    READ_HEADER (CURRENT_FIB[FIB$W_FID], .PRIMARY_FCB);
    END;

! If we make it this far, it means that: 1) there was no previous version of
! the file; 2) the previous version of the file is not accessable; or 3) the
! current process does not have access to the previous version.  In any of
! these cases, propagate as a newly created file.

STATUS = KERNEL_CALL (COPY_INFO, .DIR_FCB, .PRIMARY_FCB, .FIB, 1);

RETURN .STATUS;

END;						! End of routine PROPAGATE_ATTR

ROUTINE PROPAGATE_HANDLER (SIGNAL, MECHANISM) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is the condition handler for the file attribute
!	propagation.  It unwinds and returns a value of zero to
!	indicate a failure.
!
! CALLING SEQUENCE:
!	PROPAGATE_HANDLER (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of the signal array
!	ARG2: address of the mechanism array
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	Value of the routine that caused the exception is returned as zero.
!
! ROUTINE VALUE:
!	SS$_RESIGNAL or none
!
! SIDE EFFECTS:
!	none
!
!--

BEGIN

MAP
	SIGNAL		: REF BBLOCK,		! Signal argument array
	MECHANISM	: REF BBLOCK;		! Mechanism argument array

! If the condition is change mode to user (ERR_EXIT) set the saved value
! of R0 to zero (indicating a failure) and unwind to the PROPAGATE_ATTR
! routine.

IF .SIGNAL[CHF$L_SIG_NAME] EQL SS$_CMODUSER
THEN
    BEGIN
    MECHANISM[CHF$L_MCH_SAVR0] = 0;		! Note failure
    $UNWIND (DEPADR = MECHANISM[CHF$L_MCH_DEPTH],
	     NEWPC = 0);
    END;

RETURN SS$_RESIGNAL;				! Ignored when unwinding

END;						! End of routine PROPAGATE_HANDLER

ROUTINE COPY_INFO (OLD_FILE_FCB, NEW_FILE_FCB, FIB, NEW_FILE) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine actually copies the propagated information.  This
!	routine must be called in kernel mode.  The propagation takes
!	place according to the following rules:
!
!	UIC	- For a newly created file, the file takes the UIC of the
!		  creator unless the creator has resource rights to the
!		  owner of the directory.  In which case, the UIC of the
!		  directory owner is used.  For a new version of an
!		  existing file, the UIC of the creator is used if the
!		  creator does not have resource rightss to either the
!		  old version owner or the directory owner.  If the
!		  creator has resource rights to the old version owner,
!		  that UIC is used.  If not, and the creator has resource
!		  rights to the directory owner, the directory owner
!		  UIC is used.
!
!	Protection - For a newly created file, the protection is taken from
!		  the directory default protection ACE, if it exists.  If
!		  it does not exist, the process default protection is used.
!		  For a new version of an existing file, the protection is
!		  taken from the old version of the file.
!
!	ACL	- For a newly created file, the ACL is taken from the
!		  directory default ACL.  If no directory default ACL
!		  exists, no ACL is propagated.  For a new version of
!		  an existing file, the ACL is taken from the old
!		  version of the file.
!
! CALLING SEQUENCE:
!	COPY_INFO (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: address of the old file's FCB (if one)
!	ARG2: address of the new file's FCB
!	ARG3: address of the FIB
!	ARG4: 1 if defaults for a new file
!	      0 if defaults for a new version of an existing file
!
! IMPLICIT INPUTS:
!	DIR_FCB: address of parent directory FCB
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	The ACL building routine is called to update the new file's file
!	headers with the copied ACL.
!
!--

BEGIN

MAP
	OLD_FILE_FCB	: REF BBLOCK,		! Address of old file's FCB
	NEW_FILE_FCB	: REF BBLOCK,		! Address of new file's FCB
	FIB		: REF BBLOCK;		! Address of the FIB

LINKAGE
	L_SEARCH_RIGHT	= JSB (REGISTER = 2, REGISTER = 4;
			       REGISTER = 1, REGISTER = 5),

	L_FINDACL	= JSB (REGISTER = 3, REGISTER = 5,
			       REGISTER = 6, REGISTER = 1;
			       REGISTER = 1);

LOCAL
	PCB		: REF BBLOCK,		! PCB address of I/O packet owner
	ARB		: REF BBLOCK,		! Access rights block address
	IDENTIFIER,				! Identifier being sought
	RIGHTS_DESC,				! Rights list descr addr
	ID_FOUND	: REF BBLOCK,		! Addr of ID found
	RIGHTS_SEG	: REF BBLOCK,		! Addr of rights segment
	ACE_ADDRESS	: REF BBLOCK,		! Pointer to default protection ACE
	OLD_ACL_SEGMENT	: REF BBLOCK,		! Address of old ACL segment
	NEW_ACL_SEGMENT	: REF BBLOCK;		! Address of new ACL segment

EXTERNAL
	SCH$GL_PCBVEC	: REF VECTOR ADDRESSING_MODE (ABSOLUTE);	! PCB vector

BIND_COMMON;

EXTERNAL ROUTINE
	EXE$SEARCH_RIGHT	: L_SEARCH_RIGHT ADDRESSING_MODE (GENERAL),
						! Seach for specified ID
	EXE$FINDACL	: L_FINDACL ADDRESSING_MODE (GENERAL),	! Locate an ACE
	ACL_INIT_QUEUE	: ADDRESSING_MODE (GENERAL),	! Initialize ACL queue
	ACL_COPYACL	: L_NORM,		! Routine to propagate desired ACEs
	CHANGE_OWNER	: L_NORM;		! Change file owner UIC

ENABLE PROPAGATE_HANDLER;

! Initialize some necessary pointers.

PCB = .SCH$GL_PCBVEC[.(IO_PACKET[IRP$L_PID])<0,16>];
ARB = .IO_PACKET[IRP$L_ARB];
RIGHTS_DESC = ARB[ARB$L_RIGHTSLIST];

! If is a new file, propagate the information from the parent directory
! or the creator of the file as necessary.

IF .NEW_FILE
THEN
    BEGIN
    IF .DIR_FCB NEQ 0
    THEN
	BEGIN
	CHANGE_OWNER (.DIR_FCB[FCB$L_FILEOWNER], .NEW_FILE_FCB, 0);
	NEW_FILE_FCB[FCB$W_FILEPROT] = .PCB[PCB$L_DEFPROT];
	IF .BBLOCK[DIR_FCB[FCB$R_ORB], ORB$V_ACL_QUEUE]
	THEN
	    BEGIN
	    OLD_ACL_SEGMENT = .DIR_FCB[FCB$L_ACLFL];
	    UNTIL .OLD_ACL_SEGMENT EQLA DIR_FCB[FCB$L_ACLFL]
	    DO
		BEGIN
		ACE_ADDRESS = 0;
		IF EXE$FINDACL (ACE$C_DIRDEF,
				.OLD_ACL_SEGMENT[ACL$W_SIZE] - ACL$C_LENGTH,
				OLD_ACL_SEGMENT[ACL$L_LIST], .ACE_ADDRESS;
				ACE_ADDRESS)
		THEN
		    BEGIN
		    (NEW_FILE_FCB[FCB$W_FILEPROT])<0,4> = .ACE_ADDRESS[ACE$L_SYS_PROT];
		    (NEW_FILE_FCB[FCB$W_FILEPROT])<4,4> = .ACE_ADDRESS[ACE$L_OWN_PROT];
		    (NEW_FILE_FCB[FCB$W_FILEPROT])<8,4> = .ACE_ADDRESS[ACE$L_GRP_PROT];
		    (NEW_FILE_FCB[FCB$W_FILEPROT])<12,4> = .ACE_ADDRESS[ACE$L_WOR_PROT];
		    EXITLOOP;
		    END;
		OLD_ACL_SEGMENT = .OLD_ACL_SEGMENT[ACL$L_FLINK];
		END;
	    ACL_INIT_QUEUE (NEW_FILE_FCB[FCB$R_ORB]);
	    RETURN ACL_COPYACL (.DIR_FCB, .NEW_FILE_FCB, (IF .FIB[FIB$V_DIRACL]
							  THEN 2 ELSE 1));
	    END;
	RETURN 1;
	END;
    END;

! If it is a new version of an existing file, propagate the information
! from the old version of the file, the parent directory, or the creator
! of the file.

! First, set the owner of the new file.

IF NOT CHANGE_OWNER (.OLD_FILE_FCB[FCB$L_FILEOWNER], .NEW_FILE_FCB, 0)
AND .DIR_FCB NEQ 0
THEN CHANGE_OWNER (.DIR_FCB[FCB$L_FILEOWNER], .NEW_FILE_FCB, 0);

! Next, propagate the protection from the old file.

NEW_FILE_FCB[FCB$W_FILEPROT] = .OLD_FILE_FCB[FCB$W_FILEPROT];

! Last, but not least, copy the ACL (excluding ACEs marked as NOPROPAGATE).

IF .BBLOCK[OLD_FILE_FCB[FCB$R_ORB], ORB$V_ACL_QUEUE]
THEN
    BEGIN
    ACL_INIT_QUEUE (NEW_FILE_FCB[FCB$R_ORB]);
    RETURN ACL_COPYACL (.OLD_FILE_FCB, .NEW_FILE_FCB, 2)
    END
ELSE RETURN 1;

END;						! End of routine COPY_INFO

END
ELUDOM
