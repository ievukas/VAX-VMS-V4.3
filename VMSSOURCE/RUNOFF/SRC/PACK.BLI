%TITLE 'Number outputting routines'
MODULE PACK (		IDENT = 'V04-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:
!
!	Routines to output numbers, a RUNOFF style page number,
!	RUNOFF style section numbers, and ordinary strings.
!
! ENVIRONMENT:  Transportable
!
! AUTHOR:  D. Knight	, CREATION DATE:  June 1978
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	008	REM00008	Ray Marshall	21-Mar-1984
!		Implemented the foreign language conditionals for compiling
!		  fixed output words.  At this time, we only have the German
!		  translations available.  But, since the German word for INDEX
!		  is the same as in English, that conditional isn't used.
!
!	007	KAD00007	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	PACBAS,				!Convert to specified base and pack
	PACLET,				!Convert to letters and pack
	PACPAG,				!Convert page number to ASCII
	PACROM,				!Convert string to Roman numerals.
	PACSTR,				!Pack string into print line
	PACSEC,				!Convert section number to ASCII
	PACXXX;				!Convert any counter to whatever XXX indicates.

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    CONVBB,					!Convert Binary to specified base
    CONVBL,					!Convert binary to letters.
    CONVBR;					!Convert binary to Roman.


%SBTTL 'Routine PACBAS'
GLOBAL ROUTINE PACBAS (VALUE, LINE_PTR, BASE) = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Convert a decimal number to ASCII and place it in the
!	output text.
!
! FORMAL PARAMETERS:
!
!	VALUE - number to be converted (no negative numbers allowed)
!	LINE_PTR - string pointer into output line for text
!	BASE - base in which number is to be expressed.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The length of the converted string is returned
!
! SIDE EFFECTS:	None
!
!--

    BEGIN

    LOCAL
	COUNT,
	TEXT : VECTOR [10];

    !Convert to decimal
    CONVBB (.VALUE, TEXT, COUNT, .BASE);
    !Now pack it into the output line

    DECR I FROM .COUNT TO 1 DO
	CH$WCHAR_A (.TEXT [.I - 1], .LINE_PTR);

    .COUNT
    END;					!End of PACBAS


%SBTTL 'Routine PACLET'
GLOBAL ROUTINE PACLET (VALUE,LINE_PTR,ULM) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Convert a decimal number to letters and place it in the
!	output text.
!
! FORMAL PARAMETERS:
!
!	VALUE - number to be converted (no negative numbers allowed)
!	LINE_PTR - string pointer into output line for text
!	ULM - indicates whether result is to be in upper, lower, or mixed case.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The length of the converted string is returned
!
! SIDE EFFECTS:	None
!
!--

    BEGIN

    LOCAL
	COUNT,
	TEXT:	VECTOR[10];

    !Convert to letters
    CONVBL(.VALUE,TEXT,COUNT,.ULM);

    !Now pack it into the output line
    DECR I FROM .COUNT TO 1 DO
	CH$WCHAR_A(.TEXT[.I-1],.LINE_PTR);

    .COUNT

    END;			!End of PACLET

%SBTTL 'Routine PACPAG'
GLOBAL ROUTINE PACPAG (LINE_NO,LINE_PTR) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Pack multiple part page number into print line.
!
! FORMAL PARAMETERS:
!
!	LINE_NO	 - Address of line number to be packed
!	LINE_PTR - String pointer to print line.
!
! IMPLICIT INPUTS:	None.
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The number of characters generated is returned.
!
! SIDE EFFECTS:	None
!
!--

    BEGIN
    MAP
	LINE_NO: REF BLOCK;
    LOCAL
	CHAR_COUNT;

    CHAR_COUNT=0;

    !Pack section into line
    IF .LINE_NO[SCT_TYP] NEQ 0
    THEN
	BEGIN

	CHAR_COUNT=.CHAR_COUNT+PACSEC(.LINE_NO,.LINE_PTR);

	!Now put in the "-" for separator
	CH$WCHAR_A(%C'-',.LINE_PTR);
	CHAR_COUNT=.CHAR_COUNT+1;

	END;

    !Pack page number into line
    CHAR_COUNT=.CHAR_COUNT+PACXXX(.LINE_NO[SCT_PAGE],.LINE_PTR,.LINE_NO[SCT_PAGE_D]);

    !Place sub-page into line
    IF .LINE_NO[SCT_SUB_PAGE] NEQ 0
    THEN
	BEGIN
	CHAR_COUNT=.CHAR_COUNT+PACXXX(.LINE_NO[SCT_SUB_PAGE],.LINE_PTR,.LINE_NO[SCT_SUBPG_D]);
	END;

    .CHAR_COUNT

    END;			!End of PACPAG

%SBTTL 'Routine PACROM'
GLOBAL ROUTINE PACROM (VALUE,LINE_PTR,ULM) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Convert a decimal number to roman numerals and place it in the
!	output text.
!
! FORMAL PARAMETERS:
!
!	VALUE - number to be converted (no negative numbers allowed)
!	LINE_PTR - string pointer into output line for text
!	ULM - indicates whether result is to be in upper, lower, or mixed case.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The length of the converted string is returned
!
! SIDE EFFECTS:	None
!
!--

    BEGIN
    LOCAL
	COUNT,
	TEXT:	VECTOR[10];

    !Convert to Roman
    CONVBR(.VALUE,TEXT,COUNT,.ULM);

    !Now pack it into the output line
    INCR I FROM 1 TO .COUNT DO
	CH$WCHAR_A(.TEXT[.I-1],.LINE_PTR);

    .COUNT

    END;			!End of PACROM

%SBTTL 'Routine PACSEC'
GLOBAL ROUTINE PACSEC (LINE_NO,STRING_PTR) =	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Pack section number into string.
!
! FORMAL PARAMETERS:
!
!	LINE_NO	 - Address of line number to be packed
!	STRING_PTR - String pointer to output string.
!
! IMPLICIT INPUTS:	None.
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The number of characters generated is returned.
!
! SIDE EFFECTS:	None
!
!--

    BEGIN
    MAP
	LINE_NO: REF BLOCK;
    LOCAL
	CHAR_COUNT;

    CHAR_COUNT=0;

    !Figure out which kind of section
    CASE .LINE_NO[SCT_TYP] FROM SCT_LOW TO SCT_HIGH OF
    SET

    [SCT_CHAPT]:
	    !Chapter
	    CHAR_COUNT=PACXXX(.LINE_NO[SCT_NUMBER],.STRING_PTR,.LINE_NO[SCT_CHAPT_D]);

    [SCT_INDEX]:
	    !INDEX
	    BEGIN
	    LOCAL
		PTR;

	    IF .LINE_NO[SCT_INDEX_D] EQL TCONVRT_LET_UPP
	    THEN
%IF french %THEN
		PTR = CH$PTR(UPLIT('INDEX'))
%ELSE
%IF italian %THEN
		PTR = CH$PTR(UPLIT('INDEX'))
%ELSE	! German and English are the same word here:
		PTR = CH$PTR(UPLIT('INDEX'))
%FI %FI
	    ELSE
		IF .LINE_NO[SCT_INDEX_D] EQL TCONVRT_LET_LOW
		THEN
%IF french %THEN
		    PTR = CH$PTR(UPLIT('index'))
%ELSE
%IF italian %THEN
		    PTR = CH$PTR(UPLIT('index'))
%ELSE	! German and English are the same word here:
		    PTR = CH$PTR(UPLIT('index'))
%FI %FI
		ELSE
		!Everything else is interpreted as "mixed"
%IF french %THEN
		    PTR = CH$PTR(UPLIT('Index'));
%ELSE
%IF italian %THEN
		    PTR = CH$PTR(UPLIT('Index'));
%ELSE	! German and English are the same word here:
		    PTR = CH$PTR(UPLIT('Index'));
%FI %FI

	    CHAR_COUNT=PACSTR(	 .PTR
%IF french %THEN
				,5
%ELSE
%IF italian %THEN
				,5
%ELSE	! German and English are the same word here:
				,5
%FI %FI
				,.STRING_PTR);
	    END;

    [SCT_APPEND]:
	    !Appendix
	    CHAR_COUNT=PACXXX(.LINE_NO[SCT_NUMBER],.STRING_PTR,.LINE_NO[SCT_APPEN_D]);

    TES;

    .CHAR_COUNT

    END;			!End of PACSEC

%SBTTL 'Routine PACSTR'
GLOBAL ROUTINE PACSTR (STG_PTR, STG_SIZE, LINE_PTR) = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Pack string into print line.
!
! FORMAL PARAMETERS:
!
!	STG_PTR - ch$ptr to string to be packed.
!	STG_SIZE - size of string to be packed.
!	LINE_PTR - string pointer to output print line.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Number of characters placed in print line.
!
! SIDE EFFECTS:	None
!
!--

    BEGIN
    LOCAL
	CHAR_COUNT,
	C_PTR;

    CHAR_COUNT = 0;
    C_PTR = .STG_PTR;
    !Now pack the string

    INCR I FROM 1 TO .STG_SIZE DO
	BEGIN
	LOCAL
	    CHAR;

	CHAR = CH$RCHAR_A (C_PTR);

	IF (.CHAR LSS %C' '
	    OR .CHAR GTR %O'176')
	THEN
	!Substitute printables for control character
	    BEGIN
	    CH$WCHAR_A (%C'^', .LINE_PTR);
	    CHAR_COUNT = .CHAR_COUNT + 1;
	    CHAR = %C'@' + .CHAR
	    END;

	CH$WCHAR_A (.CHAR, .LINE_PTR);
	CHAR_COUNT = .CHAR_COUNT + 1
	END;

    .CHAR_COUNT
    END;					!End of PACSTR

%SBTTL 'Routine PACXXX'
GLOBAL ROUTINE PACXXX (VALUE, LINE_PTR, DISPLAY_CODE) = 	!

!++
! FUNCTIONAL DESCRIPTION:
!
!	Convert a decimal number to whatever and place it in the
!	output text.
!
! FORMAL PARAMETERS:
!
!	VALUE - number to be converted (no negative numbers allowed)
!	LINE_PTR - string pointer into output line for text
!	DISPLAY_CODE - indicates type of conversion desired.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	The length of the converted string is returned
!
! SIDE EFFECTS:	None
!
!--

    BEGIN

    CASE .DISPLAY_CODE FROM TCONVRT_LOW TO TCONVRT_HIGH OF
	SET
	[TCONVRT_DEC_NOZ, TCONVRT_DEC_ZER] :
	    PACBAS (.VALUE, .LINE_PTR, 10);

	[TCONVRT_OCT_NOZ] :
	    PACBAS (.VALUE, .LINE_PTR, 8);

	[TCONVRT_HEX_NOZ] :
	    PACBAS (.VALUE, .LINE_PTR, 16);

	[TCONVRT_LET_UPP] :
	    PACLET (.VALUE, .LINE_PTR, -1);

	[TCONVRT_LET_LOW] :
	    PACLET (.VALUE, .LINE_PTR, 0);

	[TCONVRT_LET_MIX] :
	    PACLET (.VALUE, .LINE_PTR, +1);

	[TCONVRT_ROM_UPP] :
	    PACROM (.VALUE, .LINE_PTR, -1);

	[TCONVRT_ROM_LOW] :
	    PACROM (.VALUE, .LINE_PTR, 0);

	[TCONVRT_ROM_MIX] :
	    PACROM (.VALUE, .LINE_PTR, +1);

	TES
    END;					!End of PACXXX

END						!End of module
ELUDOM
