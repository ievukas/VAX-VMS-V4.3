	.TITLE	NETTREE  -  Subroutines for processing BINARY TREES
	.IDENT	'V04-000'
	.DEFAULT DISPLACEMENT,LONG

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;


;++
; FACILITY:	NETWORK ACP
;
; ABSTRACT:
; 
;
; ENVIRONMENT:
;
;	Kernel mode 
;
; AUTHOR:	Rod Gamache, CREATION DATE: 25-Mar-1983
;
; MODIFIED BY:
;
;	V03-002	RNG0002		Rod Gamache	27-Apr-1983
;		Skip current NDI entry on scan of NDI database only
;		if NDI is not the CNR.
;
;	V03-001	RNG0001		Rod Gamache	20-Apr-1983
;		Stop using the special macros with optional JSBs.
;--

;
; Library definitions
;
	$CNFDEF
	$CNRDEF
	$NFBDEF

;
; Own storage
;
	.PSECT	NET_IMPURE,WRT,NOEXE

NAME_BUF:.BLKL	1			; String storage for executor name

	.PSECT	NET_CODE1,NOWRT,EXE
;
; Local definitions
;
	$DEFINI	BTE	GLOBAL		; Define Binary Tree Elements

$DEF	BTE$L_LEFT	.BLKL	1	; Left subtree pointer
$DEF	BTE$L_RIGHT	.BLKL	1	; Right subtree pointer
$DEF	BTE$W_SIZE	.BLKW	1	; Size of BTE structue
$DEF	BTE$B_TYPE	.BLKB	1	; Structue type (FF or FE)
$DEF	BTE$B_BAL	.BLKB	1	; Subtree balance (-1, 0 or +1)
$DEF	BTE$L_BTEPTR	.BLKL	1	; Pointer to node in other AVL tree
$DEF	BTE$L_PTR	.BLKL	1	; Pointer to NDI database
$DEF	BTE$T_DATA	.BLKB	15+3+1	; BTE data CIRCUIT NAME + ADDRESS +
					;  COUNT
	BTE$C_DATA_SIZE = <.-BTE$T_DATA> ; Size of data portion of BTE
$DEF	BTE$C_LENGTH			; Size of BTE
	$DEFEND	BTE

	.SBTTL	NET$TRAVERSE_NDI - Traverse NDI collate tree routine
;++
; NET$TRAVERSE_NDI - Traverse NDI collate tree routine
;
; This routine traverses the collate tree, calling back the caller with
; the next node address. The search is done in inorder fashion.
;
; INPUTS:
;
;	R11 = Address of CNR
;	R10 = Address of start CNF (or zero if start at begining)
;
; OUTPUTS:
;
;	R10 = Address of CNF if found, else same as on input.
;	R0 = True if success, else false
;
;	R1,R2 are destroyed
;
;--
	.ENABL	LSB
NET$TRAVERSE_NDI::			; Co-routine to traverse the tree
	MOVL	(SP),R1			; Save return address
	MOVL	NET$GL_COL_TREE,R2	; Assume we should start at begining
	TSTL	R10			; Should we start at begining?
	BEQL	TRAVERSE		; Br if yes

	ASSUME	CNF$L_COLBTE EQ CNR$L_COLBTE
	MOVL	CNF$L_COLBTE(R10),R2	; Copy start BTE address
	BEQL	90$			; Br if none

TRAVERSE:				; Recursive to traverse the tree
	TSTL	R2			; Bottom of tree?
	BEQL	90$			; Br if yes
	PUSHL	R2			; Save last BTE address
	MOVL	BTE$L_LEFT(R2),R2	; Get address of left subtree
	BSBB	TRAVERSE		; Traverse the tree
RESUME_CONT:
	POPL	R2			; Restore previous BTE address
	MOVL	BTE$L_PTR(R2),R10	; Get the CNF address of the NDI
	MOVZBL	#1,R0			; Indicate more to come
	JSB	(R1)			; Call back caller with CNF in R10

NET$TRAVERSE_ALT::			; Alternate entry point, stack reset
	MOVL	(SP)+,R1		; Pop return address from stack
	MOVL	BTE$L_RIGHT(R2),R2	; Point to right subtree
	BNEQ	TRAVERSE		; Traverse left subtree of right half
90$:	CLRL	R0			; Indicate no more
	RSB

	.DSABL	LSB


	.SBTTL	NET$RESUME_NDI - Resume traversal of NDI collate tree routine
;++
; NET$RESUME_NDI - Resume traversal of NDI collate tree routine
;
; This routine traverses the collate tree, looking for the CNF address that
; was given. On it's way, it builds a new stack just as if it was in the
; middle of the co-routine NET$TRAVERSE NDI. This way, we can resume where
; we left off. If the tree element is not found then the stack is left in
; tack so we can proceed, this is in case we are deleting the BTEs.
;
; INPUTS:
;
;	R11 = Address of CNR
;	R10 = Address of start CNF, cannot be zero
;	R7,R8 = Desciptor of collating string
;
; OUTPUTS:
;
;	R0 = Bit 0: True if element found or we can proceed, else false
;	     Bit 1: Clear if we must proceed to next, else take current
;
;	R1,R2 are destroyed
;
;--
	.ENABL	LSB
NET$RESUME_NDI::			; Routine to traverse the tree
	MOVL	(SP)+,R1		; Save return address
	MOVL	NET$GL_COL_TREE,R2	; Start at begining
	CLRL	R0			; Assume failure

RESUME:					; Recursive routine to traverse tree
	TSTL	R2			; Bottom of tree?
	BEQL	70$			; Br if yes, error
	BSBW	COMPARE_COLLATE1	; Compare key on current node
	BGTRU	30$			; Br if to the right
	BEQL	90$			; Br if found, leave
	PUSHL	R2			; Save current BTE address
	MOVL	BTE$L_LEFT(R2),R2	; Get address of left subtree
	PUSHAB	RESUME_CONT		; Push address of continuation
	MOVZBL	#1,R0			; Indicate success, something on stack
	BRB	RESUME			; Traverse the tree
30$:	MOVL	BTE$L_RIGHT(R2),R2	; Point to right subtree
	BRB	RESUME			; Traverse left subtree of right half
70$:	BLBC	R0,100$			; Br if nothing on stack, return error
	ADDL	#4,SP			; Pop last address from stack
	MOVL	(SP)+,R2		; Else, pick up last BTE on stack
	MOVL	BTE$L_PTR(R2),R10	; Take the current BTE
	SETBIT	#1,R0			; Set flag to take the current BTE
90$:	SETBIT	#0,R0			; Indicate success
100$:	JMP	(R1)			; Return to caller

	.DSABL	LSB


	.SBTTL	NET$FIND_NDI - Use collating tree to find an NDI
	.SBTTL	NET$FIND_COL - Traverse NDI collate tree to find NDI
;++
; NET$FIND_NDI - Use collating tree to find an NDI
; NET$FIND_COL - Traverse NDI collate tree to find an NDI
;
; This routine traverses the collate tree, searching for a match on the input
; key value.
;
; INPUTS:
;
;	R11 = Address of CNR
;	R10 = Address of CNF to start searching from
;	R7,R8  = Descriptor for key value
;
; OUTPUTS:
;
;	R10 = Address of CNF found else the starting CNF.
;	R3 = Address of BTE who's key was LSSU but closest to the given key.
;	R4 = Address of BTE who's key was GTRU but closest to the given key,
;		or zero if end of tree.
;	R0 = True if success, else false
;
;--

NET$FIND_NDI::				; Use the collating tree to find an NDI
NET$FIND_COL::				; Traverse the Collate tree for a match
	PUSHL	R9			; Save registers
	CLRL	R0			; Assume failure
	MOVL	NET$GL_COL_TREE,R9	; Assume we start from begining
	BEQL	90$			; Br if no root, yet
	TSTL	R10			; Start from begining?
	BEQL	50$			; Br if yes
	CLRL	R0			; Assume failure

	ASSUME	CNF$L_COLBTE EQ CNR$L_COLBTE
	MOVL	CNF$L_COLBTE(R10),R9	; Else, pick up starting BTE
	BEQL	90$			; Br if no BTE
	CMPL	R10,R11			; Is this the CNR?
	BEQL	50$			; Br if yes, don't skip first BTE
	MOVL	BTE$L_RIGHT(R9),R9	; Else, skip current and continue
50$:	CLRL	R4			; Assume end of tree
	BSBB	FIND			; Find a match
	BLBC	R0,90$			; Br if failure
	MOVL	BTE$L_PTR(R9),R10	; Else, get the CNF address
90$:	POPL	R9			; Restore registers
	RSB				; Return to caller

	.SBTTL	NET$FIND_NAME - Traverse NDI name tree to find NDI
;++
; NET$FIND_NAME - Traverse NDI name tree to find an NDI
;
; This routine traverses the name tree, searching for a match on the input
; key value.
;
; INPUTS:
;
;	R11 = Address of CNR
;	R10 = Address of CNF to start searching from
;	R7,R8  = Descriptor for key value
;
; OUTPUTS:
;
;	R10 = Address of CNF found else the starting CNF address
;	R0 = True if success, else false
;
;--

NET$FIND_NAME::				; Traverse the name tree for a match
	PUSHR	#^M<R3,R4,R9>		; Save registers
	MOVL	NET$GL_NAME_TREE,R9	; Assume we start from begining
	TSTL	R10			; Start from begining?
	BEQL	50$			; Br if yes
	CLRL	R0			; Assume failure

	ASSUME	CNF$L_COLBTE EQ CNR$L_COLBTE
	MOVL	CNF$L_NAMEBTE(R10),R9	; Else, pick up starting BTE
	BEQL	90$			; Br if no BTE
	CMPL	R10,R11			; Is this the CNR?
	BEQL	50$			; Br if yes, don't skip first BTE
	MOVL	BTE$L_RIGHT(R9),R9	; Else, skip current and continue
50$:	BSBB	FIND			; Find a match
	BLBC	R0,90$			; Br if failure
	MOVL	BTE$L_PTR(R9),R10	; Else, get the CNF address
90$:	POPR	#^M<R3,R4,R9>		; Restore registers
	RSB				; Return to caller

	
;+
; Recursive routine to find an entry in the collated tree. This routine
; will return the address of the BTE that is closest to the request key value,
; but less than the requested key value.
;
; Inputs:
;	R9  = Address of first BTE
;	R7,R8  = Descriptor for key value
;
; Outputs:
;	R3 = Address of BTE who's key was LSSU but closest to the given key.
;	R4 = Address of BTE who's key was GTRU but closest to the given key,
;		or zero if end of tree.
;
;-
FIND:					; Recursive routine to find a BTE
	TSTL	R9			; End of tree?
	BNEQ	10$			; Br if no
	CLRL	R0			; Else, return failure
	RSB				; Return to caller

10$:	BSBW	COMPARE_COLLATE		; Compare key on current node
	BGTRU	50$			; Br if to the right
	BLSSU	30$			; Br if to the left
	MOVZBL	#1,R0			; Indicate success
	RSB
	;
	;	Search the left subtree
	;
30$:	MOVL	BTE$L_LEFT(R9),R9	; Point to left subtree
	BSBB	FIND			; Keep trying
	RSB				; All done
	;
	;	Search the right subtree
	;
50$:	MOVL	R9,R3			; Save LSSU BTE address
	MOVL	BTE$L_RIGHT(R9),R9	; Point to right subtree
	MOVL	R9,R4			; Save address of current for GTRU BTE
	BSBB	FIND			; Keep looking
	RSB

	.SBTTL	NET$ADD_NDI - Add entry to collate tree and name tree
;++
; NET$ADD_NDI - Add an entry to the COLLATE TREE and the NAME TREE
;
; This routine adds a node address to the collate tree, and at the
; same time it adds a name entry to the name tree.
;
; INPUTS:
;
;	R11 = Address of CNR
;	R10 = Address of CNF to be added
;
; OUTPUTS:
;
;	R0 = True if success, else false
;
;--

NET$ADD_NDI::				; Add new BTE to NDI trees
	PUSHR	#^M<R1,R2,R3,R4,R5,R6,R7,R8,R9> ; Save registers
	$GETFLD	ndi,s,col		; Get the collating value
	CMPB	#BTE$C_DATA_SIZE-1,R7	; Check the string size
	BGEQ	20$			; Br if okay
	BUG_CHECK NETNOSTATE,FATAL	; Else, bug check

20$:	MOVL	NET$GL_COL_TREE,R9	; Get address of COLLATE tree root
	BSBB	ADD_NEW_BTE		; Add new BTE to COLLATE tree
	MOVL	R9,NET$GL_COL_TREE	; Set new root of tree
	PUSHL	R6			; Save address of BTE
	$GETFLD	ndi,s,nna		; Get the node name descriptor
	BLBS	R0,40$			; Br if present
	MOVAB	NAME_BUF,R8		; Get address of temporary name buffer
	MOVL	#^A"----",(R8)		; Use ficticous name (for exec)
	MOVZBL	#4,R7			; Set size of string
40$:	MOVL	NET$GL_NAME_TREE,R9	; Get address of NAME tree root
	BSBB	ADD_NEW_BTE		; Add new entry to NAME tree
	MOVL	R9,NET$GL_NAME_TREE	; Set new root of tree
	MOVB	#1,BTE$B_TYPE(R6)	; Set different structure type
	POPL	R5			; Restore address of COLLATE BTE
	MOVL	R6,BTE$L_BTEPTR(R5)	; Set the cross pointers
	MOVL	R5,BTE$L_BTEPTR(R6)	;
	MOVL	R5,CNF$L_COLBTE(R10)	; Set pointers in CNF to tree structs.
	MOVL	R6,CNF$L_NAMEBTE(R10)	;
90$:	POPR	#^M<R1,R2,R3,R4,R5,R6,R7,R8,R9> ; Restore registers
	RSB				; Exit with status

	.SBTTL	ADD_NEW_BTE - Add new entry to AVL tree
;++
; ADD_NEW_BTE - Add new entry to AVL tree
;
; INPUTS:
;
;	R10 = Address of CNF to be added
;	R9  = Root of tree to insert onto or zero if no root yet
;	R7,R8  = Descriptor for key value
;
; OUTPUTS:
;
;	Entry inserted into correct position of collate tree.
;
;	R9 = Address of new root of tree
;	R6 = Address of BTE added.
;	R1-R5 are destroyed.
;--
	ASSUME	BTE$L_LEFT   EQ  0
	ASSUME	BTE$L_RIGHT  EQ  4+BTE$L_LEFT
	ASSUME	BTE$W_SIZE   EQ  4+BTE$L_RIGHT
	ASSUME	BTE$B_TYPE   EQ  2+BTE$W_SIZE
	ASSUME	BTE$B_BAL    EQ  1+BTE$B_TYPE
	ASSUME	BTE$L_BTEPTR EQ  1+BTE$B_BAL
	ASSUME	BTE$L_PTR    EQ  4+BTE$L_BTEPTR
	ASSUME	BTE$T_DATA   EQ  4+BTE$L_PTR

BUG_OUT:
	BUG_CHECK NETNOBUF,FATAL	; Fatal error

ADD_NEW_BTE:				; Add new entry to AVL tree
	MOVZBL	#BTE$C_LENGTH,R1	; Set size of needed BTE
	JSB	NET$ALLOCATE		; Allocate a BTE
	BLBC	R0,BUG_OUT		; Bug check on failure
	MOVL	R2,R6			; Point R6 to new BTE
	CLRQ	(R2)+			; Clear pointers
	MOVL	R1,(R2)+		; Set size of BTE, TYPE 0, clear BAL
	CLRL	(R2)+			; Clear BTEPTR
	MOVL	R10,(R2)+		; Set PTR
	MOVB	R7,(R2)+		; Set size of string
	MOVC3	R7,(R8),(R2)		; Store the collating value
	;
	;	INSERT ENTRY INTO ASCENDING VALUE ORDERED TREE
	;
;;	BRB	INSERT			; Insert new entry


	.SBTTL	INSERT - Recursive routine to insert BTE into TREE
;++
; INSERT - Recursive routine to insert BTE into TREE
;
;	This routine is called to insert the entry for a given key into
;	an AVL tree.  It returns the appropriate tree node, then
;	rebalances the tree as required.  For a full explanation of
;	what is involved, see WIRTH, 'Algorithm + Data Structures = Programs'.
;	Basically, we scan the tree until we find the node with the
;	given key.  We then look for the rightmost decendent of the
;	the left subtree and delete that entry, putting its associated value
;	(pointer) in the original node.  This avoids a lot of node shuffling.
;	Then, we go up the tree	until we find a node which remains in
;	acceptable balance when the subtree gets lower.
;
; INPUTS:
;
;	R9 = Pointer to current node in TREE
;	R7,R8 = Desciptor of Key value for insertion
;	R6 = Pointer to new BTE entry
;
; OUTPUTS:
;
;	R9 = Address of new root of tree
;	R6 = New pointer to current node in tree
;	R0-R2 are destroyed.
;--

INSERT:					; Recursive routine to insert
	TSTL	R9			; Null pointer? (BOTTOM OF TREE)
	BNEQ	10$			; Br if not
	;
	;	REACHED BOTTOM OF TREE - INSERT INTO TREE AT BOTTOM
	;
	MOVL	R6,R9			; Set address of new node
	MOVL	#1,R0			; Indicate not balanced
	RSB
	;
	;	CHECK IF KEY IS TO THE LEFT OR RIGHT SUBTREE
	;
10$:	BSBW	COMPARE_COLLATE		; Compare key on current node
	BGTRU	200$			; Br if to the right side
;;	BEQL	300$			; Br if already exists
	;
	;	INSERT THE NODE INTO THE LEFT SUBTREE
	;
	PUSHL	R9			; Save pointer of father
	MOVL	BTE$L_LEFT(R9),R9	; Setup pointer to left son
	BSBB	INSERT			; Insert into left subtree
	MOVL	R9,R1			; Save new address of subtree
	POPL	R9			; Return to father node
	MOVL	R1,BTE$L_LEFT(R9)	; Point to new left subtree
	BLBS	R0,110$			; Br if not balanced
40$:	BRW	90$			; Exit
50$:	BRW	80$			; Exit - mark in balance
	;
	;	THE LEFT SUBTREE HAS GROWN HIGHER - RESTORE BALANCE
	;
110$:	DECB	BTE$B_BAL(R9)		; Perform left shift of tree
	BEQL	50$			; Exit if in perfect balance
	BLBS	BTE$B_BAL(R9),40$	; Exit if avl balanced
	MOVL	BTE$L_LEFT(R9),R1	; Get pointer to left subtree
	TSTB	BTE$B_BAL(R1)		; Test balance on that side
	BGEQ	120$			; Br if need double rotation
	;
	; PERFORM SINGLE LL ROTATION
	;
	MOVL	BTE$L_RIGHT(R1),BTE$L_LEFT(R9)
	MOVL	R9,BTE$L_RIGHT(R1)
	CLRB	BTE$B_BAL(R9)		; Mark in balance
	MOVL	R1,R9			; Set new root of subtree
	BRW	250$			; Indicate in perfect balance
	;
	; PERFORM DOUBLE LR ROTATION
	;
120$:	MOVL	BTE$L_RIGHT(R1),R2	; Get right son of left subtree
	MOVL	BTE$L_LEFT(R2),BTE$L_RIGHT(R1)
	MOVL	R1,BTE$L_LEFT(R2)
	MOVL	BTE$L_RIGHT(R2),BTE$L_LEFT(R9)
	MOVL	R9,BTE$L_RIGHT(R2)
	CLRB	BTE$B_BAL(R9)		; Initialize balance indicators
	CLRB	BTE$B_BAL(R1)
	TSTB	BTE$B_BAL(R2)		; Check balance of new subtree
	BEQL	240$			; Skip if in balance
	BGTR	130$			; Br if left side heavy
	MOVB	#1,BTE$B_BAL(R9)	; Mark right side heavy
	BRB	240$			; Set new subtree and exit
130$:	MNEGB	#1,BTE$B_BAL(R1)	; Mark left side heavy
	BRB	240$			; Set new subtree and exit
	;
	;	INSERT NEW NODE INTO RIGHT SUBTREE
	;
200$:	PUSHL	R9			; Save pointer of father
	MOVL	BTE$L_RIGHT(R9),R9	; Setup pointer to right son
	BSBW	INSERT			; Insert into left subtree
	MOVL	R9,R1			; Save new address of subtree
	POPL	R9			; Return to father node
	MOVL	R1,BTE$L_RIGHT(R9)	; Point to new right subtree
	BLBC	R0,90$			; Exit if balanced
	;
	;	THE RIGHT SUBTREE HAS GROWN HIGHER - RESTORE BALANCE
	;
	INCB	BTE$B_BAL(R9)		; Perform right shift of tree
	BEQL	80$			; Exit if in perfect balance
	BLBS	BTE$B_BAL(R9),90$	; Exit if avl blanaced
	MOVL	BTE$L_RIGHT(R9),R1	; Get pointer to right subtree
	TSTB	BTE$B_BAL(R1)		; Test balance on that side
	BLEQ	220$			; Br if need double rotation
	;
	; PERFORM SINGLE RR ROTATION
	;
	MOVL	BTE$L_LEFT(R1),BTE$L_RIGHT(R9)
	MOVL	R9,BTE$L_LEFT(R1)
	CLRB	BTE$B_BAL(R9)		; Mark in balance
	MOVL	R1,R9			; Set new root of subtree
	BRB	250$			; Indicate in perfect balance
	;
	; PERFORM DOUBLE RL ROTATION
	;
220$:	MOVL	BTE$L_LEFT(R1),R2	; Get left son of right subtree
	MOVL	BTE$L_RIGHT(R2),BTE$L_LEFT(R1)
	MOVL	R1,BTE$L_RIGHT(R2)
	MOVL	BTE$L_LEFT(R2),BTE$L_RIGHT(R9)
	MOVL	R9,BTE$L_LEFT(R2)
	CLRB	BTE$B_BAL(R9)		; Initialize balance indicators
	CLRB	BTE$B_BAL(R1)
	TSTB	BTE$B_BAL(R2)		; Check balance of new subtree
	BEQL	240$			; Skip if in balance
	BGTR	230$			; Br if left side heavy
	MOVB	#1,BTE$B_BAL(R1)	; Mark right side heavy
	BRB	240$			; Set new subtree and exit
230$:	MNEGB	#1,BTE$B_BAL(R9)	; Mark left side heavy
	;
	;	SET NEW POINTER TO SUBTREE
	;
240$:	MOVL	R2,R9			; Set new subtree
	;
	;	MARK SUBTREE IN PERFECT BALANCE
	;
250$:	CLRB	BTE$B_BAL(R9)		; Mark in perfect balance
	;
	;	RETURN R0 FALSE TO INDICATE NEITHER SIDE IS HEAVY
	;
80$:	CLRL	R0			; Mark in balance
90$:	RSB

	.SBTTL	NET$DELETE_BTE - Delete BTEs from the COLLATE and NAME TREEs
;++
; NET$DELETE_BTE - Delete BTEs from the COLLATE and NAME TREEs
;
; This routine deletes the collate and name BTEs from the corresponding AVL
; trees.
;
; INPUTS:
;
;	R11 = Address of CNR
;	R10 = Address of CNF to be deleted
;
; OUTPUTS:
;
;	R0 = True if success, else false
;
;	R9 is destroyed.
;
;--

NET$DELETE_BTE::			; Delete the BTEs for collate and names
	PUSHQ	R7			; Save registers
	$GETFLD	ndi,s,col		; Get the collating value
	MOVQ	R7,-(SP)		; Push descriptor of key value
	PUSHAL	NET$GL_COL_TREE		; Push address of collate tree
	CALLS	#3,DELETE_BTE		; Delete the BTEs
90$:	POPQ	R7			; Restore registers
	RSB				; Exit with status

	.SBTTL	DELETE_BTE - Delete element from AVL tree
;++
; DELETE_BTE - Delete an element from an AVL tree
;
;	This routine is called to delete the entry for a given key from
;	an AVL tree.  It returns the appropriate tree node, then
;	rebalances the tree as required.  For a full explanation of
;	what is involved, see WIRTH, 'Algorithm + Data Structures = Programs'.
;	Basically, we scan the tree until we find the node with the
;	given key.  We then look for the rightmost decendent of the
;	the left subtree and delete that entry, putting its associated value
;	(pointer) in the original node.  This avoids a lot of node shuffling.
;	Then, we go up the tree	until we find a node which remains in
;	acceptable balance when the subtree gets lower.
;
; INPUTS:	4(AP)	Address of root of tree
;		8(AP)	Length of string for key value
;		12(AP)	Address of string for key value
;
; OUTPUTS:
;		R0	True if node in tree, else false
;
; SIDE EFFECTS:
;
;	Root address of tree possibly updated.
;	Node deleted from tree, if present.
;--

DELETE_BTE:				; Delete a binary tree element (BTE)
	.WORD	^M<R1,R2,R3,R4,R5,R6,R7,R8,R9> ; Save registers
	CLRL	R0			; Assume failure
	MOVL	@4(AP),R9		; Get address of first BTE
	BEQL	10$			; Br if none, exit with error
	MOVQ	8(AP),R7		; Get value to pass to comparison routine
	CLRL	R6			; Indicate node not found yet
	BSBB	DELETE			; Call routine which does the work
	MOVL	R1,@4(AP)		; Set new root of tree
	MOVZBL	#1,R0			; Return success
10$:	RET				; Exit with status
	

;+
;	Auxiliary routine to go down the tree recursively.  If it finds
;	the matching node, it passes its address down.  On the way up,
;	this routine rebalances the tree.
;
; Inputs:	R9	Address of node in tree to start searching from
;		R7,R8	Descriptor of parameter to pass to comparison routine
;		R6	Address of node that matched or zero
;
; Outputs:
;		R2	Change in height indicator (zero if no change, else -1)
;		R1	Address of new parent for tree/subtree
;-

DELETE:
	;
	;	Call the comparison routine to check for match
	;		R9	Address of node to check
	;		R7,R8	Descriptor of key value
	;
	BSBW	COMPARE_COLLATE		; Call compare routine
	BGTRU	40$			; Br if key was greater, go to right
	BLSSU	20$			; Br if key was less, go to left
	;
	;	Found match, save node address
	;
	MOVL	R9,R6			; Else remember that this is the node
20$:	;
	;	See if we can traverse the left subtree
	;
	MOVL	BTE$L_LEFT(R9),R0	; Get left subtree
	BNEQ	30$			; Br if there is one
	MOVL	BTE$L_RIGHT(R9),R1	; Else get right subtree
	BRB	50$			; And go to common code
	;
	;	Traverse left subtree, with subtree present
	;
30$:	PUSHL	R9			; Save current BTE
	MOVL	R0,R9			; Get subtree pointer
	BSBB	DELETE			; Make recursive call (finds leaf)
	POPL	R9			; Get current BTE back
	MOVL	R1,BTE$L_LEFT(R9)	; And set new subtree ptr
	SUBB	R2,BTE$B_BAL(R9)	; Adjust balance
	TSTB	R2			; Any change in height?
	BNEQ	35$			; Br if yes - rebalance
	MOVL	R9,R1			; Set new parent (leave R2 = 0)
	RSB

35$:	BRW	DEL_REBAL_L		; Else, go and rebalance

40$:	;
	;	See if we can traverse right subtree
	;
	MOVL	BTE$L_RIGHT(R9),R0	; Get right subtree
	BNEQ	60$			; Br if there is one
	MOVL	BTE$L_LEFT(R9),R1	; Else get left subtree
50$:	;
	;  Common processing
	;
	TSTL	R6			; Did we find a matching node?
	BNEQ	55$			; Br if so - all OK
	CLRL	R0			; Else say we failed
	RET				; And exit with status
55$:	;
	;	Found a match, copy leaf's data to last BTE and
	;	delete the leaf.
	;
	; Inputs:	R9	BTE address of leaf to delete
	;		R6	BTE address of node that matches
	;
	MOVL	BTE$L_BTEPTR(R6),R3	; Save pointer to alternate BTE
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; Save registers
	SUBW3	#BTE$L_BTEPTR,BTE$W_SIZE(R9),R3 ; Compute size of DATA to move
	MOVC3	R3,BTE$L_BTEPTR(R9),BTE$L_BTEPTR(R6) ; Copy the BTE data
	POPR	#^M<R0,R1,R2,R3,R4,R5>	; Save registers
	;
	;	Now we must go to the other BTE to update it's pointer to
	;	the new BTE we just reset.
	;
	MOVL	R3,BTE$L_BTEPTR(R9)	; Point other's BTE at new leaf
	MOVL	BTE$L_BTEPTR(R6),R4	; Get address of other BTE
	BEQL	58$			; Br if end of recursion
	MOVL	R6,BTE$L_BTEPTR(R4)	; Update pointer to moved BTE
	TSTL	R3			; All done?
	BEQL	58$			; Br if yes, stop recursing
	CLRL	BTE$L_BTEPTR(R3)	; Clear the return pointer
	;
	;	Now we will delete the other BTE.
	;
56$:	MOVAB	BTE$T_DATA+1(R3),-(SP)	; Push address of data portion of BTE
	MOVZBL	BTE$T_DATA(R3),-(SP)	; Push length of data portion of BTE
	PUSHAL	NET$GL_NAME_TREE	; Push address of root of name tree
	BLBS	BTE$B_TYPE(R3),57$	; Br if name element
	MOVAL	NET$GL_COL_TREE,(SP)	; Else, set address of other root
57$:	CALLS	#3,DELETE_BTE		; Delete the other BTE first
58$:	MOVL	R9,R0			; Address of BTE to delete
	JSB	NET$DEALLOCATE		; Delete the BTE
	MNEGL	#1,R2			; Set height change
	RSB				; And return with New decendent in R1
60$:	;
	;	Traverse right subtree
	;
	PUSHL	R9			; Save current BTE
	MOVL	R0,R9			; Get subtree pointer
	BSBW	DELETE			; Make recursive call (finds leaf)
	POPL	R9			; Get current BTE back
	MOVL	R1,BTE$L_RIGHT(R9)	; Else, set new subtree ptr
	ADDB	R2,BTE$B_BAL(R9)	; Adjust balance
	TSTB	R2			; Any height change?
	BEQL	70$			; Br if not
	BRW	DEL_REBAL_R		; Else, rebalance if necessary
70$:	MOVL	R9,R1			; Set new parent (leave R2=0)
	RSB				; And exit


	.SBTTL	DEL_REBAL_L - Rebalance after left deletion
;+
; DEL_REBAL_L - Rebalance after left deletion
;
;	Check the balance of the node.  If it is out of balance, rebalance
;	it with its right decendent
;
; Inputs:	R9	Address of subtree to be rebalanced
;
; Outputs:	R2	Change in height of subtree (0 or -1)
;		R1	New parent node of subtree
;
;		R6	destroyed
;-

DEL_REBAL_L:
	CMPB	BTE$B_BAL(R9),#1	; Node gone overweight to the right?
	BGTR	10$			; Br if so
	SUBB3	#1,BTE$B_BAL(R9),R2	; Else set height change according to
					; balance state
	CVTBL	R2,R2			; Produce longword result
	MOVL	R9,R1			; Set new root node
	RSB				; And exit

10$:	MOVL	BTE$L_RIGHT(R9),R6	; Get right subtree
	TSTB	BTE$B_BAL(R6)		; Test its balance state
	BLSS	DRL_L			; Subtree is left-heavy
	BEQL	DRL_B			; Subtree is balanced
;;	BGTR	DRL_R			; Subtree is right-heavy

;+
; Rebalance right-heavy node with right-heavy decendent.  Make decendent into
; parent (single rotation)
;-
DRL_R:
	MOVL	BTE$L_LEFT(R6),BTE$L_RIGHT(R9) ; Make R-son's L-son into R-son
	MOVL	R9,BTE$L_LEFT(R6)	; make node into R-son's L-son
	MOVL	R6,R1			; L-son is new parent
	CLRB	BTE$B_BAL(R6)		; Both nodes are now balanced
	CLRB	BTE$B_BAL(R9)		; ...
	MNEGL	#1,R2			; Height has decreased
	RSB				; Done

;+
; Rebalance right-heavy node with balanced son.  Single rotation as above, but
; both nodes are unbalanced and there is no overall height change.
;-
DRL_B:
	MOVL	BTE$L_LEFT(R6),BTE$L_RIGHT(R9) ; Make R-son's L-son into R-son
	MOVL	R9,BTE$L_LEFT(R6)	; make node into R-son's L-son
	MOVL	R6,R1			; L-son is new parent
	MOVB	#1,BTE$B_BAL(R9)	; Node is now right unbalanced
	MNEGB	#1,BTE$B_BAL(R6)	; New parent is left unbalanced
	CLRL	R2			; No height change
	RSB				; Done

;+
; Rebalance right-heavy node with left heavy son.  Do double rotation, in
; which R-son's L-son becomes new parent.
;-
DRL_L:
	MOVL	BTE$L_LEFT(R6),R0	; get 'middle son'
	MOVL	BTE$L_LEFT(R0),BTE$L_RIGHT(R9) ; make its L-son be new R-son
	MOVL	BTE$L_RIGHT(R0),BTE$L_LEFT(R6) ; give R-son to existing son
	MOVL	R9,BTE$L_LEFT(R0)	; Make old parent new L-son
	MOVL	R6,BTE$L_RIGHT(R0)	; And old R-son be new R-son
	CLRB	BTE$B_BAL(R9)		; Assume new parent is not R-heavy
	TSTB	BTE$B_BAL(R0)		; Was it R-heavy?
	BLEQ	10$			; Br if not - all OK
	DECB	BTE$B_BAL(R9)		; Else, old parent is L-heavy
10$:	CLRB	BTE$B_BAL(R6)		; Assume new parent is not L-heavy
	TSTB	BTE$B_BAL(R0)		; Was it?
	BGEQ	20$			; Br if not - all OK
	INCB	BTE$B_BAL(R6)		; Else, old R-son is R-heavy
20$:	CLRB	BTE$B_BAL(R0)		; New parent is balanced
	MOVL	R0,R1			; Set new parent
	MNEGL	#1,R2			; Indicate height change
	RSB				; All done

	.SBTTL	DEL_REBAL_R - Rebalance after right deletion
;+
; DEL_REBAL_R - Rebalance after right deletion
;
;	Check the balance of the node.  If it is out of balance, rebalance
;	it with its left son
;
; Inputs:	R9	Node to be rebalanced
;
; Outputs:	R2	Change in height of subtree (0 or -1)
;		R1	New parent node of subtree
;
;		R6	destroyed
;-

DEL_REBAL_R:
	CMPB	BTE$B_BAL(R9),#-1	; Node gone overweight to the left?
	BLSS	10$			; Br if so
	SUBB3	BTE$B_BAL(R9),#-1,R2	; Else set height change according to
					; balance state
	CVTBL	R2,R2			; Produce longword result
	MOVL	R9,R1			; Set new subtree root
	RSB				; And return to caller

10$:	MOVL	BTE$L_LEFT(R9),R6	; Get left subtree
	TSTB	BTE$B_BAL(R6)		; And look at its balance state
	BGTR	DLR_R			; Subtree is right-heavy
	BEQL	DLR_B			; Subtree is balanced
;;	BLSS	DLR_L			; Subtree is left-heavy

;+
; Rebalance left-heavy node with left-heavy subtree.  Make decendent into
; parent (single rotation)
;-
DLR_L:
	MOVL	BTE$L_RIGHT(R6),BTE$L_LEFT(R9) ; Make L-son's R-son into L-son
	MOVL	R9,BTE$L_RIGHT(R6)	; Make node into L-son's R-son
	MOVL	R6,R1			; L-son is new parent
	CLRB	BTE$B_BAL(R6)		; Both nodes are now balanced
	CLRB	BTE$B_BAL(R9)		; ...
	MNEGL	#1,R2			; Height has decreased
	RSB				; Done

;+
; Rebalance left-heavy node with balanced subtree.  Single rotation as above,
; but both nodes are unbalanced and there is no overall height change.
;-
DLR_B:
	MOVL	BTE$L_RIGHT(R6),BTE$L_LEFT(R9) ; Make L-son's R-son into L-son
	MOVL	R9,BTE$L_RIGHT(R6)	; make node into L-son's R-son
	MOVL	R6,R1			; L-son is new parent
	MNEGB	#1,BTE$B_BAL(R9)	; Node is now left unbalanced
	MOVB	#1,BTE$B_BAL(R6)	; New parent is right unbalanced
	CLRL	R2			; No height change
	RSB

;+
; Rebalance left-heavy node with right heavy subtree.  Do double rotation, in
; which L-son's R-son becomes new parent.
;-
DLR_R:
	MOVL	BTE$L_RIGHT(R6),R0	; Get 'middle son'
	MOVL	BTE$L_RIGHT(R0),BTE$L_LEFT(R9) ; Make its R-son be new L-son
	MOVL	BTE$L_LEFT(R0),BTE$L_RIGHT(R6) ; Give L-son to existing son
	MOVL	R9,BTE$L_RIGHT(R0)	; Make old parent new R-son
	MOVL	R6,BTE$L_LEFT(R0)	; And old L-son be new L-son
	CLRB	BTE$B_BAL(R9)		; Assume new parent was not L-heavy
	TSTB	BTE$B_BAL(R0)		; Was it L-heavy?
	BGEQ	10$			; Br if not - all OK
	INCB	BTE$B_BAL(R9)		; Else, old parent is R-heavy
10$:	CLRB	BTE$B_BAL(R6)		; Assume new parent was not R-heavy
	TSTB	BTE$B_BAL(R0)		; Was it R-heavy?
	BLEQ	20$			; Br if not - all OK
	DECB	BTE$B_BAL(R6)		; Else, old L-son is L-heavy
20$:	CLRB	BTE$B_BAL(R0)		; New parent is balanced
	MOVL	R0,R1			; Set new parent
	MNEGL	#1,R2			; Indicate height change
	RSB				; All done

	.SBTTL	COMPARE_COLLATE - COMPARE BTE DATA ENTRIES BY COLLATING VALUE
	.SBTTL	COMPARE_COLLATE1 - COMPARE BTE DATA ENTRIES BY COLLATING VALUE
;++
;
;	COMPARE THE VALUES OF THE BTE AGAINST THE INPUT KEY
;
; INPUTS:
;
;	R9 = ADDRESS OF CURRENT NODE, IF COMPARE_COLLATE
;	R2 = ADDRESS OF CURRENT NODE, IF COMPARE_COLLATE1
;	R7,R8 = DESCRIPTOR OF STRING TO COMPARE
;
; OUTPUTS:
;
;	PSL CONDITIONS SET.
;--

COMPARE_COLLATE:
	CMPB	(R8),BTE$T_DATA+1(R9)	; Check 1st char
	BNEQ	90$			; Br if thats enough
	PUSHR	#^M<R1,R2,R3,R4,R5>	; Save registers
	MOVZBL	BTE$T_DATA(R9),R1	; Get length of current name
	CMPC5	R7,(R8),#0,-		; Compare strings
		R1,BTE$T_DATA+1(R9)
	POPR	#^M<R1,R2,R3,R4,R5>	; Restore registers
90$:	RSB


COMPARE_COLLATE1:
	CMPB	(R8),BTE$T_DATA+1(R2)	; Check 1st char
	BNEQ	90$			; Br if thats enough
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; Save registers
	MOVZBL	BTE$T_DATA(R2),R1	; Get length of current name
	CMPC5	R7,(R8),#0,-		; Compare strings
		R1,BTE$T_DATA+1(R2)
	POPR	#^M<R0,R1,R2,R3,R4,R5>	; Restore registers
90$:	RSB


	.END
