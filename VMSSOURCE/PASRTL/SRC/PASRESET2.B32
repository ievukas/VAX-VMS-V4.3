MODULE PAS$RESET2 ( %TITLE 'RESET procedure'
		IDENT = '1-002'			! File: PASRESET2.B32 Edit: SBL1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains PAS$RESET2, which implements the
!	VAX-11 Pascal RESET procedure.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
! 1-002 - Only do $REWIND on file oriented devices.  SBL 29-July-1982
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$RESET2: NOVALUE;			! Do a RESET

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE

%SBTTL 'PAS$RESET2 - RESET procedure'
GLOBAL ROUTINE PAS$RESET2 (				! Do a RESET
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
        ERROR						! Error unwind address
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAS$RESET2 implements the VAX-11 Pascal RESET procedure.  It
!	opens the file if not already open, rewinds to the beginning of
!	the file, enters Inspection mode and does a GET.
!
! CALLING SEQUENCE:
!
!	CALL PAS$RESET2 (PFV.mr.r)
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  in case of an error.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Throws away partial line contents, if any.
!	Positions to beginning of file.
!	Switches to Inspection mode.
!	Does a GET.
!
! SIGNALLED ERRORS:
!
!	ERRDURRES - Error during RESET
!	RESNOTALL - RESET not allowed on unopened internal file
!	INSNOTALL - Inspection mode not allowed for WRITEONLY file
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,		! File control block
	PFV_ADDR: VOLATILE,				! Enable argument
	UNWIND_ACT: VOLATILE,				! Enable argument
	ERROR_ADDR: VOLATILE;				! Enable argument

    BIND
	RAB = FCB: REF BLOCK [, BYTE];			! RAB is also FCB address

    BUILTIN
	ACTUALCOUNT;

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    IF ACTUALCOUNT () GEQU 2
    THEN
	ERROR_ADDR = .ERROR;		! Set unwind address

    !+
    ! Set enable argument for PFV address.
    !-

    PFV_ADDR = PFV [PFV$R_PFV];

    !+
    ! Validate and lock PFV.
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Open file if it should be implicitly opened.
    !-

    IF NOT .PFV [PFV$V_VALID]
    THEN
	PAS$$OPEN_IMPLICIT (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! See if the file is open.  If not, open it.
    !-

    IF NOT .PFV [PFV$V_OPEN]	! Not open
    THEN
	BEGIN
	LOCAL
	    PFD: REF $PAS$PFD_FILE_DESCRIPTOR;	! File descriptor

	!+
	! If PFD address is relative, make it absolute.
	!-

	IF .PFV [PFV$V_RELPFD]
	THEN
	    BEGIN
	    PFV [PFV$A_PFD] = .PFV [PFV$A_PFD] + PFV [PFV$R_PFV];
	    PFV [PFV$V_RELPFD] = 0;
	    END;

	PFD = .PFV [PFV$A_PFD];	! Get PFD address

	IF .PFD [PFD$V_EXTERN]	! Is it an external file?
	THEN
	    PAS$$OPEN (PFV [PFV$R_PFV], PAS$K_HISTORY_OLD; FCB)
	ELSE
	    $PAS$IO_ERROR (PAS$_RESNOTALL,0);	! RESET not allowed
	END;

    !+
    ! If the file has the NOREAD attribute, signal an error.
    !-

    IF .FCB [FCB$V_NOREAD]
    THEN
	$PAS$IO_ERROR (PAS$_INSNOTALL,0);	! Inspection mode not allowed

    !+
    ! If a textfile, and if in Generation mode, and if the buffer
    ! is not empty, do a WRITELN.
    !-

    IF .FCB [FCB$V_TEXT] AND .FCB [FCB$V_GENERATION] AND
	(.FCB [FCB$A_RECORD_CUR] GTRA .FCB [FCB$A_RECORD_BEG])
    THEN
	PAS$$WRITELN (PFV [PFV$R_PFV], FCB [FCB$R_FCB]);

    !+
    ! Cancel any lazy lookahead in progress.
    !-

    FCB [FCB$V_LAZY] = 0;

    !+
    ! Is the device a file oriented device?  If so, proceed with rewind.
    !-

    IF .FCB [FCB$V_FOD] 	! File Oriented Device
    THEN
	BEGIN

	RAB [RAB$B_RAC] = RAB$C_SEQ;! Set sequential access
	RAB [RAB$V_NLK] = 0;	! Cancel previous no-lock
	RAB [RAB$B_KRF] = 0;	! Rewind primary key if indexed
	IF NOT $PAS$RMS_OP ($REWIND (RAB=.RAB))
	THEN
	    IF .RAB [RAB$L_STS] NEQ RMS$_IOP AND	! Inappropriate operation
	       .RAB [RAB$L_STS] NEQ RMS$_EOF AND	! End of file
	       .RAB [RAB$L_STS] NEQ RMS$_BOF		! Already at beginning of file
	    THEN
		$PAS$IO_ERROR (PAS$_ERRDURRES);		! Error during RESET
	END;

    !+
    ! Set Inspection mode.
    !-

    FCB [FCB$V_INSPECTION] = 1;
    FCB [FCB$V_GENERATION] = 0;
    FCB [FCB$V_EOF] = 0;
    FCB [FCB$V_LOCATE] = 0;
    FCB [FCB$V_PARTIAL_LINE] = 0;

    !+
    ! File is now rewound, do a GET (or set lazy-lookahead if textfile).
    !-

    IF .FCB [FCB$V_TEXT]
    THEN
	BEGIN
	FCB [FCB$V_LAZY] = 1;	! Lazy lookahead in progress
	PFV [PFV$V_VALID] = 0;	! Buffer is not valid
	FCB [FCB$L_RECORD_NUMBER] = 0;	! Reset record number
	END
    ELSE
	PAS$$GET (PFV [PFV$R_PFV], FCB [FCB$R_FCB]);

    !+
    ! Indicate successful completion
    ! Unlock the file
    !-

    FCB [FCB$L_STATUS] = 0;
    PFV [PFV$V_LOCK] = 0;

    RETURN;

    END;					! End of routine PAS$RESET2

!<BLF/PAGE>

END						! End of module PAS$RESET2

ELUDOM
