MODULE UNSOLICIT(%TITLE	'Respond to unsolicited input'
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Job controller.
!
! ABSTRACT:
!	This module contains the routines that respond to unsolicited input.
!
! ENVIRONMENT:
!	VAX/VMS user and kernel mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 16-Feb-1982
!
! MODIFIED BY:
!
!	V03-007	RAS0194		Ron Schaefer	22-Sep-1983
!		Fix itemlist for RAS0181.   Swap itemcode and length.
!
!	V03-006	RAS0181		Ron Schaefer	18-Aug-1983
!		Change definitions of logical names SYS$INPUT, SYS$OUTPUT
!		and SYS$ERROR to use new PQB logical name attributes.
!
!	V03-005	MLJ0115		Martin L. Jack,	30-Jul-1983  15:20
!		Changes for job controller baselevel.
!
!	V03-004	MLJ0114		Martin L. Jack,	23-Jun-1983  5:05
!		Changes for job controller baselevel.
!
!	V03-003	WMC0001		Wayne Cardoza	14-Apr-1983
!		Set interactive flag in CREPRC when appropriate.
!
!	V03-002	MLJ0109		Martin L. Jack,	14-Apr-1983  12:50
!		Changes for job controller baselevel.
!
!	V03-001	MLJ0106		Martin L. Jack,	1-Mar-1983  13:52
!		Changes for extended PIDs.
!
!**

REQUIRE 'SRC$:JOBCTLDEF';


FORWARD ROUTINE
	UNSOLICITED_INPUT:		NOVALUE,
	CREATE_ERROR_AST:		NOVALUE,
	CREATE_ERROR_MESSAGE;


EXTERNAL
	ALL_PRIVILEGES;


EXTERNAL
	EXE$GL_FLAGS:	BITVECTOR	ADDRESSING_MODE(GENERAL),
	SYS$GB_DEFPRI:	BYTE		ADDRESSING_MODE(GENERAL);


EXTERNAL LITERAL
	EXE$V_CONCEALED:		UNSIGNED(6);

GLOBAL ROUTINE UNSOLICITED_INPUT: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine processes the message types:
!		MSG$_TRMUNSOLIC		unsolicited terminal input
!		MSG$_CRUNSOLIN		unsolicited card reader input
!	by creating a detached process running LOGINOUT or INPSMB.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	MBX_BUFFER	- Mailbox message.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Detached process created.
!
!--

BEGIN
LOCAL
	IMAGE_DESC:	REF VECTOR,	! Pointer to descriptor for image name
	DEVICE_DESC:	VECTOR[2],	! Descriptor for device name
	DEVICE_BUFFER:	VECTOR[12,BYTE],! Buffer for device name
	STSFLG,				! STSFLG argument for CREPRC
	ITMLST,				! ITMLST argument for CREPRC
	PRCNAM_DESC:	VECTOR[2],	! Descriptor for process name
	PRCNAM:		REF VECTOR;	! Pointer to PRCNAM_DESC, or 0
MACRO
	UNS_W_UNIT=	2,0,16,0 %,	! Binary unit number
	UNS_T_DEVICE=	4,0,0,0 %;	! Counted ASCII controller name
	
OWN
	TERMINAL_ATTR:	BLOCK[7,LONG]	! Create 3 quadword itemlist entries
			INITIAL(	! for input, output and error
			PRC$_INPUT_ATT^16 + 4,
			LNM$M_TERMINAL,
			PRC$_OUTPUT_ATT^16 + 4,
			LNM$M_TERMINAL,
			PRC$_ERROR_ATT^16 + 4,
			LNM$M_TERMINAL,
			PRC$_LISTEND),
	TERM_CNCL_ATTR:	BLOCK[7,LONG]	! Create 3 quadword itemlist entries
			INITIAL(	! for input, output and error
			PRC$_INPUT_ATT^16 + 4,
			LNM$M_TERMINAL+LNM$M_CONCEALED,
			PRC$_OUTPUT_ATT^16 + 4,
			LNM$M_TERMINAL+LNM$M_CONCEALED,
			PRC$_ERROR_ATT^16 + 4,
			LNM$M_TERMINAL+LNM$M_CONCEALED,
			PRC$_LISTEND);

! Set up the process name as "_ddcu:".
!
PRCNAM_DESC[0] = %ALLOCATION(DEVICE_BUFFER);
PRCNAM_DESC[1] = DEVICE_BUFFER;
$FAO(
    $DESCRIPTOR('_!AC!UW:'),
    PRCNAM_DESC,
    PRCNAM_DESC,
    MBX_BUFFER[UNS_T_DEVICE],
    .MBX_BUFFER[UNS_W_UNIT]);
PRCNAM = PRCNAM_DESC;


! Set up the device name as "ddcu:".
!
DEVICE_DESC[0] = .PRCNAM_DESC[0] - 1;
DEVICE_DESC[1] = .PRCNAM_DESC[1] + 1;


ITMLST = TERMINAL_ATTR;

! Set up the image name, and reset the itmlst if using concealed
! devices.  The interactive flag is set for terminals.
!
IF .MBX_BUFFER[MSG_W_TYPE] EQL MSG$_TRMUNSOLIC
THEN
    BEGIN
    STSFLG = PRC$M_INTER;
    IMAGE_DESC = $DESCRIPTOR('SYS$SYSTEM:LOGINOUT.EXE');
    IF .EXE$GL_FLAGS[EXE$V_CONCEALED]
    THEN
	ITMLST = TERM_CNCL_ATTR;	
    END
ELSE
    BEGIN
    STSFLG = 0;
    IMAGE_DESC = $DESCRIPTOR('SYS$SYSTEM:INPSMB.EXE');
    END;


! The following loop is executed at most twice.
!
WHILE TRUE DO
    BEGIN
    LOCAL
	PID,					! PID of created process
	STATUS;					! Status return


    ! Create the process.
    !
    STATUS = $CREPRC(
	PIDADR=PID,
	IMAGE=.IMAGE_DESC,
	INPUT=DEVICE_DESC,
	OUTPUT=DEVICE_DESC,
	ERROR=DEVICE_DESC,
	PRVADR=ALL_PRIVILEGES,
	PRCNAM=.PRCNAM,
	BASPRI=.SYS$GB_DEFPRI,
	UIC=.JBC_UIC,
	STSFLG=.STSFLG,
	ITMLST=.ITMLST);


    IF NOT .STATUS
    THEN
	BEGIN

	! Create failed.  If the status is not "duplicate process name", or if
	! a create has already been tried with no name, give up.
	!
	IF .STATUS<0,16> NEQ SS$_DUPLNAM OR .PRCNAM EQL 0
	THEN
	    BEGIN

	    ! If the device is a terminal, issue a "process create error"
	    ! message to it on a best-effort basis.  Otherwise, signal the error
	    ! to the operator.
	    !
	    IF .MBX_BUFFER[MSG_W_TYPE] EQL MSG$_TRMUNSOLIC
	    THEN
		BEGIN
		LOCAL
		    CHANNEL:	WORD;	! Channel assigned to terminal

		IF $ASSIGN(DEVNAM=DEVICE_DESC, CHAN=CHANNEL)
		THEN
		    $PUTMSG(
			MSGVEC=UPLIT(1, JBC$_PRCREAT OR STS$K_SEVERE),
			ACTRTN=CREATE_ERROR_MESSAGE,
			ACTPRM=.CHANNEL);
		END
	    ELSE
		BEGIN
		SIGNAL(
		    JBC$_SYMCREPRC OR STS$K_ERROR, 1, DEVICE_DESC,
		    .STATUS);
		END;
	    RETURN;
	    END;


	! Create failed with a "duplicate process name" status.  Loop to retry
	! the create with no name.
	!
	PRCNAM = 0;
	END
    ELSE
	BEGIN

	! Create succeeded.
	!
	RETURN;
	END;
    END;
END;

ROUTINE CREATE_ERROR_AST(CHANNEL): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This is a completion AST routine for the $QIO that issues a "process
!	create error" message to a terminal on which unsolicited input has
!	been received.  Its purpose is to deassign the channel.
!
! INPUT PARAMETERS:
!	CHANNEL		- Channel number, passed as ASTPRM.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Channel deassigned.
!
!--

BEGIN
$DASSGN(CHAN=.CHANNEL);
END;

ROUTINE CREATE_ERROR_MESSAGE(MSG_DESC,CHANNEL)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This is an action routine for the $PUTMSG that issues a "process
!	create error" message to a terminal on which unsolicited input has
!	been received.  Its purpose is to issue the $QIO to write the message.
!
! INPUT PARAMETERS:
!	MSG_DESC	- Descriptor for message.
!	CHANNEL		- Channel number, passed as ACTPRM.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	FALSE, to signal $PUTMSG not to write the message.
!
! SIDE EFFECTS:
!	Message written to terminal.
!
!--

BEGIN
MAP
	MSG_DESC:		REF BBLOCK;	! Descriptor for message


! Issue the $QIO to write the message.  If the $QIO service fails, deassign
! the channel.
!
IF NOT $QIO(
    FUNC=IO$_WRITEVBLK,
    CHAN=.CHANNEL,
    ASTADR=CREATE_ERROR_AST,
    ASTPRM=.CHANNEL,
    P1=.MSG_DESC[DSC$A_POINTER],
    P2=.MSG_DESC[DSC$W_LENGTH],
    P3=%C' ')
THEN
    $DASSGN(CHAN=.CHANNEL);


! Return false, to signal $PUTMSG not to write the message.
!
FALSE
END;

END
ELUDOM
