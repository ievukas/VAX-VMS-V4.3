MODULE DBGCALL(IDENT = 'V04-000') =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! WRITTEN BY
!	Ping Sager	Oct. 1982
!
! MODULE FUNCTION
!	This module contains the parse and execution routines to support the
!	CALL command.  Parsing is done by means of ATN's.  A command execution
!	tree is constructed during parsing.  This tree is passed as input to
!	the command execution network.  The CALL command allows the user to
!	call a subroutine from DEBUG, have it execute, and then view its
!	return value.  The CALL command is language independent, and does not
!	understand the argument passing conventions used by the various
!	languages.  Hence the %ADDR, %REF, %VAL, and %DESCR constructs are
!	are provided by DEBUG.  %ADDR allows the user to specify an address
!	expression and pass in the value of that expression as the parameter,
!	%REF allows the user to specify a language expresion and pass in
!	the address of the expression result (pass by reference), %VAL allows
!	the user to specify a language expresion and pass in the value of the
!	expression as an immediate parameter, and %DESCR allows the user to
!	specify a language expression and pass in the expression result by
!	VAX standard descriptor.  %ADDR, %REF, %VAL, and %DESCR are treated
!	as keywords (not abbreviations), so the user must enter them with
!	those exact spellings.
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

FORWARD ROUTINE
    DBG$NEXECUTE_CALL,			! Command execution network
    DBG$NPARSE_CALL;			! Parse network

EXTERNAL ROUTINE
    DBG$GET_MEMORY,			! Get a memory block
    DBG$GET_TEMPMEM,			! Get temporary memory
    DBG$MAKE_VMS_DESC,			! Convert Primary Descriptor to
    					!	VAX standard descriptor
    DBG$NCOPY_DESC,			! Copies primary and value descriptor
    DBG$NMATCH,				! Counted string matching routine
    					!	for parsing
    DBG$NNEXT_WORD,			! Isolate next word of input for
    					!	syntax errors
    DBG$NPARSE_ADDRESS,			! Address Expression Parser
    DBG$NPARSE_EXPRESSION,		! Language Expression Parser
    DBG$NSAVE_STRING,			! Store a ASCIC string from input buffer
    DBG$PRIM_TO_ADDR;			! Convert Primary Descriptor to
    					!	Value Descriptor containing
    					!	address of descriptor

EXTERNAL
    DBG$GB_TAKE_CMD: BYTE,		! Flag that says take further commands
    DBG$PSEUDO_PROG,			! Address of phony user code
    DBG$RUNFRAME: BLOCK[,BYTE],		! Current user runframe context
    DBG$GB_UNHANDLED_EXC: VECTOR[10,BYTE];! Flags set to TRUE on an unhandled
    					! exception.

GLOBAL
    DBG$GL_CALL_CONTEXT: INITIAL(0),	! Used for Bound Procedure
    DBG$GB_CALL_NORMAL_RET: BYTE	! Normal return from CALL command flag
			INITIAL(0);	!      used to suppress regeneration
					!      of screen displays on normal
					!      return from the CALL command
					! This flag can have these values:
					!      0 = Not in a CALL command
					!      1 = In a CALL command, but call
					!          has not returned normally
					!      2 = CALL command just returned
					!          normally without intervening
					!          breaks or exceptions

OWN
    SAVE_CALL_CONTEXT: INITIAL(0);

GLOBAL ROUTINE DBG$NEXECUTE_CALL(VERB_NODE, MESSAGE_VECT) =
!
! FUNCTION
!	This routine accepts a command execution tree as input and performs the
!	semantic actions associated with the CALL command.  This routine
!	builds a standard VAX call frame for the user-specified called-address.
!	
!	Adverb Node in the command execution tree specifies the called-address.
!	The arguments to the called-address are found in the Noun Nodes in the
!	command execution tree.  The arguments are counted, and if any exist,
!	a standard VAX call frame argument list is constructed.  The the
!	called-address is called via a CALLG instruction, and the returned
!	value from the CALLG is displayed.
!
! INPUTS
!	VERB_NODE	- A longword containing the address of the verb
!			  node of the command execution tree. (CALL)
!
!	MESSAGE_VECT	- The address of a longword to contain the address
!			  of a standard message argument vector on errors.
!
! OUTPUTS
!	STS$K_SUCCESS (1)	- Success.  The parsed command was executed.
!
!	STS$K_SEVERE  (4)	- Failure.  The command could not be executed.
!

    BEGIN

    MAP
    	VERB_NODE: REF DBG$VERB_NODE;	! Pointer to the Verb Node

    LOCAL
    	ADVERB_NODE: REF DBG$ADVERB_NODE,! Pointer to the Adverb Node
    	ARG_LIST_PTR: REF VECTOR[,LONG],! Pointer to argument list
    	AST_FLAG,			! TRUE for CALL/AST
    	BUF: REF VECTOR[,BYTE],		! Pointer to ASCIC string
    	CALARG_PERMEM: REF VECTOR[,LONG],! Pointer to a vector of memory useage
    					!	pointers
	CALL_ADDRESS,			! User specified Call-Address
    	I,				! Index to the argument
    	NOUN_NODE: REF DBG$NOUN_NODE,	! Pointer to the Noun Node
    	SAVED_RUNFRAME: REF BLOCK[,BYTE],! Pointer to saved runframe context
    	VALUE_DESC: REF DBG$VALDESC;	! Pointer to Value Descriptor


    LITERAL
    	STOCK_USER_PSL = %X'03C00000';	! Standard user PSL value

    BUILTIN
    	PROBER;	



    ! Recover the flag that says whether we are to enable ASTs during
    ! the call.
    !
    AST_FLAG = .VERB_NODE[DBG$B_VERB_COMPOSITE];

    ! Recover the routine address to call.  If the address is given by a
    ! Primary Descriptor, convert it to a Value Descriptor and get the
    ! address of the routine to call from that descriptor.
    !
    ADVERB_NODE = .VERB_NODE[DBG$L_VERB_ADVERB_PTR];
    VALUE_DESC = .ADVERB_NODE[DBG$L_ADVERB_VALUE];
    IF .VALUE_DESC[DBG$B_DHDR_TYPE] EQL DBG$K_PRIMARY_DESC
    THEN
    	BEGIN
    	IF NOT DBG$PRIM_TO_ADDR(.VALUE_DESC, DSC$K_DTYPE_L, VALUE_DESC)
    	THEN
    	    $DBG_ERROR('DBGCALL\DBG$NEXECUTE_CALL 10');

        CALL_ADDRESS = ..VALUE_DESC[DBG$L_VALUE_POINTER];
    	END


    ! If the address to call is given by a Value Descriptor in the first place,
    ! get it from that descriptor right away.
    !
    ELSE
    	BEGIN
    	IF .VALUE_DESC[DBG$B_DHDR_TYPE] NEQ DBG$K_V_VALUE_DESC
    	THEN
    	    $DBG_ERROR('DBGCALL\DBG$NEXECUTE_CALL 20');

	CALL_ADDRESS = .VALUE_DESC[DBG$L_VALUE_POINTER];
    	END;


    ! Check for read access to the user specified call address.
    !
    IF NOT PROBER(%REF(0), %REF(1), .CALL_ADDRESS)
    THEN
    	SIGNAL(DBG$_BADSTARTPC, 1, .CALL_ADDRESS);


    ! Allocate spaces for Argument list.
    !
    ARG_LIST_PTR = DBG$GET_MEMORY(.ADVERB_NODE[DBG$B_ADVERB_LITERAL] + 1);
    CALARG_PERMEM = 0;
    IF .ADVERB_NODE[DBG$B_ADVERB_LITERAL] NEQ 0
    THEN
    	CALARG_PERMEM = DBG$GET_MEMORY(.ADVERB_NODE[DBG$B_ADVERB_LITERAL]);


    ! Construct the Argument List.
    !
    I = 0;
    ARG_LIST_PTR[.I] = .ADVERB_NODE[DBG$B_ADVERB_LITERAL];
    NOUN_NODE = .VERB_NODE[DBG$L_VERB_OBJECT_PTR];
    WHILE TRUE DO
    	BEGIN
    	IF .NOUN_NODE EQL 0 THEN EXITLOOP;
	VALUE_DESC = .NOUN_NODE[DBG$L_NOUN_VALUE];
    	BUF = .NOUN_NODE[DBG$L_NOUN_VALUE2];
    	I = .I+1;
    	SELECTONE TRUE OF
    	    SET
    	    [CH$EQL(5, BUF[1], 5, UPLIT BYTE('%ADDR'))]:
    		BEGIN
    		IF .VALUE_DESC[DBG$B_DHDR_TYPE] EQL DBG$K_PRIMARY_DESC
    		THEN
    		    BEGIN
	    	    IF NOT DBG$PRIM_TO_ADDR(.VALUE_DESC, DSC$K_DTYPE_L, VALUE_DESC)
    		    THEN
    			$DBG_ERROR('DBGCALL\DBGNEXECUTE_CALL, prim to addr failed');

    		    ARG_LIST_PTR[.I] = ..VALUE_DESC[DBG$L_VALUE_POINTER];
    		    END

    		ELSE
    		    BEGIN
    		    IF .VALUE_DESC[DBG$B_DHDR_TYPE] EQL DBG$K_V_VALUE_DESC
    		    THEN
    			BEGIN
    			ARG_LIST_PTR[.I] = .VALUE_DESC[DBG$L_VALUE_POINTER];
    			END

    		    ELSE
    			BEGIN
    			$DBG_ERROR('DBGCALL\DBG$NEXECUTE_CALL, invalid addr. desc.');
    			END;

    		    END;

    		END;

    	    [CH$EQL(6, BUF[1], 6, UPLIT BYTE('%DESCR'))]:
    		BEGIN
    		IF .VALUE_DESC[DBG$B_DHDR_TYPE] EQL DBG$K_V_VALUE_DESC OR
    		   .VALUE_DESC[DBG$B_DHDR_TYPE] EQL DBG$K_VALUE_DESC
    		THEN
    		    BEGIN
	    	    DBG$NCOPY_DESC(.VALUE_DESC, VALUE_DESC);
	            ARG_LIST_PTR[.I] = VALUE_DESC[DBG$A_VALUE_VMSDESC];
    		    CALARG_PERMEM[.I - 1] = .VALUE_DESC;
    		    END

    		ELSE
    		    $DBG_ERROR('DBGCALL\DBG$NEXECUTE invalid val. desc.');

    		END;

    	    [CH$EQL(4, BUF[1], 4, UPLIT BYTE('%REF'))]:
    		BEGIN
    		IF .VALUE_DESC[DBG$B_DHDR_TYPE] EQL DBG$K_V_VALUE_DESC
    		THEN
	            ARG_LIST_PTR[.I] = .VALUE_DESC[DBG$L_VALUE_POINTER]
    		ELSE
    		    IF .VALUE_DESC[DBG$B_DHDR_TYPE] EQL DBG$K_VALUE_DESC
    		    THEN
    		     	BEGIN
    		    	DBG$NCOPY_DESC(.VALUE_DESC, VALUE_DESC);
    		    	ARG_LIST_PTR[.I] = .VALUE_DESC[DBG$L_VALUE_POINTER];
    			CALARG_PERMEM[.I - 1] = .VALUE_DESC;
    			END

    		    ELSE
    			$DBG_ERROR('DBGCALL\DBG$NEXECUTE_CALL, invalid val. desc');

    		END;

    	    [CH$EQL(4, BUF[1], 4, UPLIT BYTE('%VAL'))]:
    		BEGIN
    		IF .VALUE_DESC[DBG$B_DHDR_TYPE] EQL DBG$K_VALUE_DESC
    		THEN
    		    BEGIN
	            ARG_LIST_PTR[.I] = ..VALUE_DESC[DBG$L_VALUE_POINTER];
    		    IF .VALUE_DESC[DBG$B_VALUE_DTYPE] EQL DSC$K_DTYPE_V OR
    		       .VALUE_DESC[DBG$B_VALUE_DTYPE] EQL DSC$K_DTYPE_VU
    		    THEN
    		        BEGIN
    		        IF .VALUE_DESC[DBG$W_VALUE_LENGTH] GTR 32 ! bits
    		        THEN
    			    SIGNAL(DBG$_SIZETRUNC);
    		        END

    		    ELSE
    		        IF .VALUE_DESC[DBG$B_VALUE_DTYPE] EQL DSC$K_DTYPE_P
    		        THEN
    			    BEGIN
    		            IF .VALUE_DESC[DBG$W_VALUE_LENGTH] GTR 8 ! digits
    		            THEN
    			        SIGNAL(DBG$_SIZETRUNC);
    			    END

    		        ELSE
    			    IF .VALUE_DESC[DBG$W_VALUE_LENGTH] GTR 4 ! bytes
    			    THEN
    			        SIGNAL(DBG$_SIZETRUNC);

    		    END

    		ELSE
    		    $DBG_ERROR('DBGCALL\DBG$NEXECUTE_CALL, invalid val. desc');

		END;

    	    TES;

    	NOUN_NODE = .NOUN_NODE[DBG$L_NOUN_LINK];

    	END;			! End of WHILE constructing argument list.


    ! Save the current run frame context.  Keep the current register
    ! contents, set user PC to the special routine DBG$PSEUDO_PROG
    ! in DBGSTART that will call the user-specified call-address,
    ! and clear all flags.
    ! 
    SAVED_RUNFRAME = DBG$GET_MEMORY((DBG$K_RUNFR_LEN + 3) / %UPVAL);
    CH$MOVE(DBG$K_RUNFR_LEN, DBG$RUNFRAME[0,0,0,0], .SAVED_RUNFRAME);
    DBG$RUNFRAME[DBG$L_NEXT_LINK] = .SAVED_RUNFRAME;
    DBG$RUNFRAME[DBG$L_USER_PC] = DBG$PSEUDO_PROG;
    DBG$RUNFRAME[DBG$L_USER_PSL] = STOCK_USER_PSL;
    CH$FILL(0,
    	DBG$RUNFRAME[DBG$K_RUNFR_LEN,0,0,0] - DBG$RUNFRAME[DBG$W_RUN_STAT],
    	CH$PTR(DBG$RUNFRAME[DBG$W_RUN_STAT]));
    IF .AST_FLAG 
    THEN 
    	DBG$RUNFRAME[DBG$V_ENAB_AST] = .SAVED_RUNFRAME[DBG$V_ENAB_AST];
    DBG$RUNFRAME[DBG$L_FRAME_PTR] = .ARG_LIST_PTR;
    DBG$RUNFRAME[DBG$L_CALL_ADDR] = .CALL_ADDRESS;
    DBG$RUNFRAME[DBG$L_SAVE_FLD] = .CALARG_PERMEM;
    DBG$RUNFRAME[DBG$L_USER_R1] = .SAVE_CALL_CONTEXT;


    ! Also "push" the stack of flags saying whether an unhandled exception
    ! has been encountered. The way this works is that we have a byte
    ! vector called DBG$GB_UNHANDLED_EXC. If a serious error gets to
    ! our final handler, then DBG$GB_UNHANDLED_EXC[0] gets set to 1
    ! in DBGSTART. In DBGSTEPGO, this byte is tested when we see a 
    ! STEP or GO, and an informational is signalled.
    ! The only complication is that we need to stack these flags
    ! for CALL. This is what we do here. This code assumes we will
    ! not get calls more than 10 levels deep.
    !
    DECR I FROM 9 TO 1 DO
    	DBG$GB_UNHANDLED_EXC[.I] = .DBG$GB_UNHANDLED_EXC[.I-1];
    DBG$GB_UNHANDLED_EXC[0] = 0;


    ! Set flag saying that we are leaving DEBUG through a CALL command, turn
    ! off taking commands from the user, and return successfully.
    !
    DBG$GB_CALL_NORMAL_RET = 1;
    DBG$GB_TAKE_CMD = FALSE;
    RETURN STS$K_SUCCESS;
    END;

GLOBAL ROUTINE DBG$NPARSE_CALL(INPUT_DESC, VERB_NODE, MESSAGE_VECT) =
!
! FUNCTION
!	Parse network for the CALL command.  The parsing method used is
!	that of ATN's.  This network constructs a command execution tree to
!	be executed by DBG$NEXECUTE_CALL.
!
!	CALL addr-exp(addr-exp, %ADDR addr-exp, %REF lang-exp, %VAL lang-exp,
!			%DESCR lang-exp, ...)
!
! INPUTS
!	INPUT_DESC	- A longword containing the address of a standard
!			  string descriptor which reflects the input string.
!
!	VERB_NODE	- A longword containing the address of the verb
!			  node of the command execution tree. (CALL)
!
!	MESSAGE_VECT	- The address of a longword to contain the address
!			  of a message argument vector.
!
! OUTPUTS
!	STS$K_SUCCESS (1)	- Success.  Input parsed and execution tree
!				  constructed.
!
!	STS$K_SEVERE  (4)	- Failure.  Tree not constructed.  Message
!				  vector constructed.
!
    BEGIN

    MAP
    	INPUT_DESC: REF BLOCK[,BYTE],	! Pointer to Input Descriptor
    	VERB_NODE: REF DBG$VERB_NODE;	! Pointer to Command Verb Node

    BIND
    	DBG$CS_AST	  = UPLIT BYTE (%ASCIC 'AST'),
    	DBG$CS_NOAST	  = UPLIT BYTE (%ASCIC 'NOAST'),
    	DBG$CS_COMMA      = UPLIT BYTE(1, DBG$K_COMMA),
    	DBG$CS_CR         = UPLIT BYTE(1, DBG$K_CAR_RETURN),
    	DBG$CS_LEFT_PAREN = UPLIT BYTE(1, DBG$K_LEFT_PARENTHESIS),
    	DBG$CS_RGHT_PAREN = UPLIT BYTE(1, DBG$K_RIGHT_PARENTHESIS),
    	DBG$CS_SLASH	  = UPLIT BYTE(1, '/');

    LOCAL
    	ADVERB_NODE: REF DBG$ADVERB_NODE,! Pointer to Command Adverb Node
    	AST_FLAG,			! TRUE for CALL/AST
    	BUF: REF VECTOR[,BYTE],		! ASCIC string
    	NOUN_NODE: REF DBG$NOUN_NODE,	! Pointer to Command Noun Node
    	LINK,				! Pointer to next noun node
    	SAVE_INPUT_DESC: DBG$STG_DESC,	! Save the Input Descriptor
    	STATUS;				! Returned status
    

    ! Check for /AST or /NOAST, which controls whether we will re-enable
    ! ASTs while the user program that is CALLed is running.
    ! If we see /AST then we set AST_FLAG to TRUE, if we
    ! see /NOAST then we set AST_FLAG to FALSE. 
    ! AST_FLAG is initially TRUE, meaning that the default is /AST.
    ! This information is put in the VERB_COMPOSITE field and looked
    ! at in DBG$NEXECUTE_CALL.
    !
    AST_FLAG = TRUE;
    WHILE DBG$NMATCH(.INPUT_DESC, DBG$CS_SLASH, 1) DO
    	BEGIN
    	SELECTONE TRUE OF
    	    SET
    	    [DBG$NMATCH(.INPUT_DESC, DBG$CS_AST, 1)]:
    		AST_FLAG = TRUE;
    	    [DBG$NMATCH(.INPUT_DESC, DBG$CS_NOAST, 1)]:
    		AST_FLAG = FALSE;
    	    [OTHERWISE]:
    		SIGNAL(DBG$_CMDSYNERR, 1, DBG$NNEXT_WORD(.INPUT_DESC));
    	    TES;
    	END;
    VERB_NODE[DBG$B_VERB_COMPOSITE] = .AST_FLAG;

    ! Signal an error if no parameters are present at all.
    !
    IF DBG$NMATCH(.INPUT_DESC, DBG$CS_CR, 1) THEN SIGNAL(DBG$_NEEDMORE);


    ! Pick up the routine address to call.
    !
    ADVERB_NODE = DBG$GET_TEMPMEM(DBG$K_ADVERB_NODE_SIZE);
    VERB_NODE[DBG$L_VERB_ADVERB_PTR] = .ADVERB_NODE;
    DBG$GL_CALL_CONTEXT = .DBG$RUNFRAME[DBG$L_USER_R1];
    STATUS = DBG$NPARSE_ADDRESS(.INPUT_DESC, ADVERB_NODE[DBG$L_ADVERB_VALUE], 
    		DBG$K_DEFAULT, TOKEN$K_TERM_OPEN);
    SAVE_CALL_CONTEXT = DBG$GL_CALL_CONTEXT;


    ! Initialize the argument count to zero.
    !
    ADVERB_NODE[DBG$B_ADVERB_LITERAL] = 0;


    ! Check for the returned status.  If STS$K_WARNING is returned, then the
    ! CALL command must have arguments.
    !
    IF .STATUS NEQ STS$K_SUCCESS
    THEN
    	BEGIN


    	! Check for the valid syntax ('(' before the arguments).
    	!
    	IF DBG$NMATCH(.INPUT_DESC, DBG$CS_LEFT_PAREN, 1)
    	THEN
    	    BEGIN
    	    LINK = VERB_NODE[DBG$L_VERB_OBJECT_PTR];
    	    WHILE TRUE DO
    		BEGIN
    		LOCAL
    		    COUNT;

    		ADVERB_NODE[DBG$B_ADVERB_LITERAL] =
    		    .ADVERB_NODE[DBG$B_ADVERB_LITERAL] + 1;
    		CH$MOVE(8, .INPUT_DESC, SAVE_INPUT_DESC);
    		BUF = .SAVE_INPUT_DESC[DSC$A_POINTER];
    		COUNT = 0;
    		WHILE .BUF[0] EQL %C' ' DO
    		    BEGIN
    		    BUF = .BUF + 1;
    		    COUNT = .COUNT + 1;
    		    END;
    		SAVE_INPUT_DESC[DSC$W_LENGTH] 
    		    = .SAVE_INPUT_DESC[DSC$W_LENGTH] - .COUNT;
    		SAVE_INPUT_DESC[DSC$A_POINTER] = .BUF;

    	        NOUN_NODE = DBG$GET_TEMPMEM(DBG$K_NOUN_NODE_SIZE);
    	        .LINK = .NOUN_NODE;
    	        LINK = NOUN_NODE[DBG$L_NOUN_LINK];
    		IF NOT DBG$NSAVE_STRING(.INPUT_DESC,
    			NOUN_NODE[DBG$L_NOUN_VALUE2], .MESSAGE_VECT)
    		THEN
    		    RETURN STS$K_SEVERE;
    		BUF = .NOUN_NODE[DBG$L_NOUN_VALUE2];
    	        SELECTONE TRUE OF
    		    SET
    		    [CH$EQL(5, BUF[1], 5, UPLIT BYTE('%ADDR'))]:
    		        BEGIN
    			INPUT_DESC[DSC$W_LENGTH] 
    			    = .SAVE_INPUT_DESC[DSC$W_LENGTH] - 5;
    			INPUT_DESC[DSC$A_POINTER]
    			    = .SAVE_INPUT_DESC[DSC$A_POINTER] + 5;
    			STATUS = DBG$NPARSE_ADDRESS(.INPUT_DESC, 
    					NOUN_NODE[DBG$L_NOUN_VALUE], 
    					DBG$K_DEFAULT, 
    					TOKEN$K_TERM_COMPAREN); 
    		        END;

    		    [CH$EQL(6, BUF[1], 6, UPLIT BYTE('%DESCR'))]:
    		        BEGIN
    			INPUT_DESC[DSC$W_LENGTH] 
    			    = .SAVE_INPUT_DESC[DSC$W_LENGTH] - 6;
    			INPUT_DESC[DSC$A_POINTER]
    			    = .SAVE_INPUT_DESC[DSC$A_POINTER] + 6;
    			STATUS = DBG$NPARSE_EXPRESSION(.INPUT_DESC, 
    					DBG$K_DEFAULT, 
    					NOUN_NODE[DBG$L_NOUN_VALUE], 
    					TOKEN$K_TERM_COMPAREN); 
    		        END;

    		    [CH$EQL(4, BUF[1], 4, UPLIT BYTE('%REF'))]:
    		        BEGIN
    			INPUT_DESC[DSC$W_LENGTH] 
    			    = .SAVE_INPUT_DESC[DSC$W_LENGTH] - 4;
    			INPUT_DESC[DSC$A_POINTER]
    			    = .SAVE_INPUT_DESC[DSC$A_POINTER] + 4;
    			STATUS = DBG$NPARSE_EXPRESSION(.INPUT_DESC, 
    					DBG$K_DEFAULT, 
    					NOUN_NODE[DBG$L_NOUN_VALUE], 
    					TOKEN$K_TERM_COMPAREN); 
    		        END;

    		    [CH$EQL(4, BUF[1], 4, UPLIT BYTE('%VAL'))]:
    		        BEGIN
    			INPUT_DESC[DSC$W_LENGTH] 
    			    = .SAVE_INPUT_DESC[DSC$W_LENGTH] - 4;
    			INPUT_DESC[DSC$A_POINTER]
    			    = .SAVE_INPUT_DESC[DSC$A_POINTER] + 4;
    			STATUS = DBG$NPARSE_EXPRESSION(.INPUT_DESC, 
    					DBG$K_DEFAULT, 
    					NOUN_NODE[DBG$L_NOUN_VALUE], 
    					TOKEN$K_TERM_COMPAREN); 
    		        END;

    		    [OTHERWISE]:
    		        BEGIN
    			NOUN_NODE[DBG$L_NOUN_VALUE2] = UPLIT BYTE(%ASCIC '%ADDR');
    			CH$MOVE(8, SAVE_INPUT_DESC, .INPUT_DESC);
    			STATUS = DBG$NPARSE_ADDRESS(.INPUT_DESC, 
    					NOUN_NODE[DBG$L_NOUN_VALUE], 
    					DBG$K_DEFAULT, 
    					TOKEN$K_TERM_COMPAREN); 
    		        END;

    		    TES;

    	        IF .STATUS EQL STS$K_SUCCESS THEN SIGNAL(DBG$_NEEDMORE);
    		IF DBG$NMATCH(.INPUT_DESC, DBG$CS_RGHT_PAREN, 1) THEN EXITLOOP;
    		IF NOT DBG$NMATCH(.INPUT_DESC, DBG$CS_COMMA, 1)
    		THEN
    		    SIGNAL(DBG$_CMDSYNERR, 1, DBG$NNEXT_WORD(.INPUT_DESC));

    		END;			! End of WHILE parsing (...) loop.

    	    END

    	ELSE
    	    SIGNAL(DBG$_CMDSYNERR, 1, DBG$NNEXT_WORD(.INPUT_DESC));

    	END;

    IF NOT DBG$NMATCH(.INPUT_DESC, DBG$CS_CR, 1)
    THEN
    	SIGNAL(DBG$_CMDSYNERR, 1, DBG$NNEXT_WORD(.INPUT_DESC));

    RETURN STS$K_SUCCESS;

    END;

END ELUDOM
