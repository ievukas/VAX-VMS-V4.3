MODULE CHKPRO (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine checks the volume and file protection to see if the
!	user is authorized to perform the intended operation.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:	L. Mark Pilant,		CREATION DATE: 31-Mar-1983  10:10
!
! MODIFIED BY:
!
!	V03-021	LMP0259		L. Mark Pilant,		25-Jun-1984  11:24
!		Remove the clearing of the matching ACE storage.  It has moved
!		to the READ_ATTRIB routine.
!
!	V03-020	ACG0427		Andrew C. Goldstein,	8-May-1984  11:58
!		Finish security auditing. Restructure the saved audit
!		block to save space.
!
!	V03-019	ACG0424		Andrew C. Goldstein,	27-Apr-1984  14:28
!		Filter out local setting of SYSPRV; go back to LOCAL_ARB
!		for access rights.
!
!	V03-018	LMP0228		L. Mark Pilant,		10-Apr-1984  9:18
!		Ignore a corrupted ACL during a protection check.
!
!	V03-017	LMP0221		L. Mark Pilant,		7-Apr-1984  13:23
!		Change the actual protection check to use the new CHKPRO
!		interface.
!
!	V03-016	RSH0118		R. Scott Hanna		30-Mar-1984
!		Enable security alarms and make changes due to the new
!		auditing argument list. Move the READ_HEADER, FID_TO_SPEC,
!		and NSA$EVENT_AUDIT calls to the DISPAT module.
!
!	V03-015	ACG0412		Andrew C. Goldstein,	25-Mar-1984  17:43
!		Make all of global storage based, add access mode arg
!
!	V03-014	LMP0208		L. Mark Pilant,		9-Mar-1984  9:16
!		Don't include the ACL in the protection check if it is
!		corrupt.  It is still built, however.
!
!	V03-013	LMP0195		L. Mark Pilant,		27-Feb-1984  14:41
!		Modify the protection checking routine to get the
!		classification info from the correct place (FCB or header).
!
!	V03-012	LMP0188		L. Mark Pilant,		4-Feb-1984  11:40
!		Add support for a classification protection check.
!
!	V03-011	RSH0095		R. Scott Hanna		02-Feb-1984
!		Temporary disable of security auditing.
!
!	V03-010	CDS0001		Christian D. Saether	19-Dec-1983
!		Use L_NORM linkage and BIND_COMMON macro.
!
!	V03-009	LMP0164		L. Mark Pilant,		10-Oct-1983  15:40
!		Un-do a bug introduced by ACG0354.  The problem was that you
!		always got a 5 (ACL) segment descriptor, rather than what was
!		actually needed.
!
!	V03-008	LMP0158		L. Mark Pilant,		28-Sep-1983  11:19
!		Insure block type and size are cleared where needed.  (This
!		was undone by ACG0354.
!
!	V03-007	ACG0354		Andrew C. Goldstein,	12-Sep-1983  18:30
!		Add CONTROL access via READALL privilege; add
!		alternate access mask; add ACL driven audit support.
!
!	V03-006	ACG0354		Andrew C. Goldstein,	24-Aug-1983  20:37
!		Fix setup of protection mask and privilege mask
!
!	V03-005	LMP0134		L. Mark Pilant,		5-Aug-1983  12:30
!		Fix a problem that caused the access allowed to be incorrectly
!		returned.
!
!	V03-004	RSH0034		R. Scott Hanna		05-Jul-1983
!		Add security auditing support.
!
!	V03-003	LMP0121		L. Mark Pilant,		16-Jun-1983  15:52
!		Correct problems with implied protection.
!
!	V03-002	LMP0110		L. Mark Pilant,		3-May-1983  12:15
!		Add support for returning access allowed, privileges used,
!		and the ACE used to gain access (if any).
!
!	V03-001	LMP0104		L. Mark Pilant,		22-Apr-1983  8:50
!		Correct some problem with the rewrite to use $CHKPRO.
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:FCPDEF.B32';

FORWARD ROUTINE
	CHECK_PROT	: L_NORM;

BIND					! File access bits
	FILE_ACCESS	= UPLIT BYTE (
			ARM$M_READ,
			ARM$M_READ OR ARM$M_WRITE,
			ARM$M_DELETE,
			ARM$M_WRITE,
			ARM$M_READ,
			ARM$M_CONTROL,
			ARM$M_EXECUTE
			) : VECTOR [,BYTE];

GLOBAL ROUTINE CHECK_PROTECT (ACCESS, HEADER, FCB, ACMODE, ALT_ACCESS, REQUIRED) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine calls CHECK_PROT and then, if enabled, collects data
!	for file access auditing.
!
! CALLING SEQUENCE:
!	CHECK_PROTECT (ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)
!
! INPUT PARAMETERS:
!	The input parameters are passed unmodified to CHECK_PROT. A description
!	of the parameters may be found there.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	If auditing is enabled for the requested file access, a partial
!	auditing argument list is built in AUDIT_ARGLIST and the counter
!	AUDIT_COUNT is updated. The DISPAT module contains the code which
!	completes the argument list and calls the auditing routine
!	NSA$EVENT_AUDIT.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	FCB		: REF BBLOCK;	! FCB arg

LOCAL
	STATUS,				! Status returned from CHECK_PROT
	LOC_ALT_ACCESS,			! Local copy of ALT_ACCESS arg
	LOC_REQUIRED,			! Local copy of REQUIRED arg
	LOC_ACCESS,			! local version of access mask
	ACL_FLAGS	: BITVECTOR [8], ! Audit request flags from ACL
	AUDIT_FLAGS	: BITVECTOR [8], ! Flags for audit call
	JOURN_MASK,			! Accumulated mask of eligible journal events
	ALARM_MASK,			! Accumulated mask of eligible alarm events
	PCB		: REF $BBLOCK,	! Address of PCB
	ARGLIST 	: REF $BBLOCK,	! Argument list pointer
	J;

EXTERNAL
	NSA$GR_JOURNVEC	: $BBLOCK ADDRESSING_MODE (GENERAL),
					! Journaling enable bit vector
	NSA$GR_ALARMVEC	: $BBLOCK ADDRESSING_MODE (GENERAL),
					! Alarm enable bit vector
	SCH$GL_CURPCB	: LONG ADDRESSING_MODE (GENERAL);
					! Current PCB address

BIND_COMMON;

! Default the optional arguments to zero.
!

LOC_ALT_ACCESS = 0;
LOC_REQUIRED = 0;
IF ACTUALCOUNT GEQU 6
THEN
    BEGIN
    LOC_ALT_ACCESS = .ALT_ACCESS;
    LOC_REQUIRED = .REQUIRED;
    END;

! Perform protection check

STATUS = CHECK_PROT (.ACCESS, .FCB, .ACMODE, .LOC_ALT_ACCESS, .LOC_REQUIRED, ACL_FLAGS);

! If the FCB is zero, this is a volume check and no
! security auditing is performed.

IF .FCB NEQ 0
THEN
    BEGIN

    LOC_ACCESS = .FILE_ACCESS[.ACCESS];
    IF (
	IF .STATUS
	THEN .STATUS NEQ SS$_NOTALLPRIV
	ELSE .REQUIRED
	)
    THEN LOC_ACCESS = .LOC_ACCESS OR .LOC_ALT_ACCESS;

! Determine if journaling or alarms are enabled for the
! specified file access.
!

    AUDIT_FLAGS = 0;
    JOURN_MASK = .NSA$GR_JOURNVEC[NSA$L_EVT_FAILURE];
    ALARM_MASK = .NSA$GR_ALARMVEC[NSA$L_EVT_FAILURE];
    IF .STATUS
    THEN
	BEGIN
	JOURN_MASK = .NSA$GR_JOURNVEC[NSA$L_EVT_SUCCESS];
	ALARM_MASK = .NSA$GR_ALARMVEC[NSA$L_EVT_SUCCESS];
	INCR J FROM 0 TO $BITPOSITION (CHP$V_READALL) DO
	    BEGIN
	    IF (.PRIVS_USED AND 1^.J) NEQU 0
	    THEN
		BEGIN
		JOURN_MASK = .JOURN_MASK OR .VECTOR [NSA$GR_JOURNVEC[NSA$L_EVT_SYSPRV], .J];
		ALARM_MASK = .ALARM_MASK OR .VECTOR [NSA$GR_ALARMVEC[NSA$L_EVT_SYSPRV], .J];
		END;
	    END
	END;

    PCB = .SCH$GL_CURPCB;
    IF .PCB[PCB$V_SECAUDIT]
    THEN
	AUDIT_FLAGS[$BITPOSITION (NSA$V_ARG_FLAG_MANDY)] = 1;

    IF ((.JOURN_MASK AND .LOC_ACCESS) NEQU 0) OR
       (.NSA$GR_JOURNVEC[NSA$V_EVT_ACL] AND .ACL_FLAGS[0])
    THEN
	AUDIT_FLAGS[$BITPOSITION (NSA$V_ARG_FLAG_JOURN)] = 1;

    IF ((.ALARM_MASK AND .LOC_ACCESS) NEQU 0) OR
       (.NSA$GR_ALARMVEC[NSA$V_EVT_ACL] AND .ACL_FLAGS[1])
    THEN
	AUDIT_FLAGS[$BITPOSITION (NSA$V_ARG_FLAG_ALARM)] = 1;

! If journaling, alarms, or mandatory auditing are enabled, find an
! available audit block and fill it in. Acquiring the file name and
! sending the audit record is done later.
!

    IF .AUDIT_FLAGS NEQ 0
    THEN
	BEGIN
	IF
	    BEGIN
	    ARGLIST = AUDIT_ARGLIST;
	    DECR J FROM MAX_AUDIT_COUNT TO 1
	    DO
		BEGIN
		IF .ARGLIST[AUDIT_TYPE] EQL 0
		THEN EXITLOOP 0;
		ARGLIST = .ARGLIST + AUDIT_LENGTH;
		END
	    END
	THEN BUG_CHECK (NOBUFPCKT, 'Out of audit list entries');

	AUDIT_COUNT = .AUDIT_COUNT + 1;
	ARGLIST[AUDIT_TYPE] = .AUDIT_FLAGS;
	ARGLIST[AUDIT_SUCCESS] = .STATUS;
	ARGLIST[AUDIT_ACCESS] = .LOC_ACCESS;
	ARGLIST[AUDIT_PRIVS] = .PRIVS_USED;
	CH$MOVE (FCB$S_FID, FCB[FCB$W_FID], ARGLIST[AUDIT_FID]);
	END;
    END;

IF NOT .STATUS THEN ERR_EXIT (.STATUS) ELSE RETURN .STATUS;
END;

ROUTINE CHECK_PROT (ACCESS, FCB, ACMODE, ALT_ACCESS, REQUIRED, AUDIT_FLAGS)
	: L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks the volume and file protection to see if the
!	user is authorized to perform the intended operation.
!
! CALLING SEQUENCE:
!	CHECK_PROTECTION (ARG1, ARG2, ARG3, ARG4, ARG5, ARG6)
!
! INPUT PARAMETERS:
!	ARG1: access mode
!		READ_ACCESS	= 0
!		WRITE_ACCESS	= 1
!		DELETE_ACCESS	= 2
!		CREATE_ACCESS	= 3
!		RDATT_ACCESS	= 4
!		WRATT_ACCESS	= 5
!		EXEC_ACCESS	= 6
!	ARG2: address of FCB or 0
!	ARG3: access mode of the accessor
!	ARG4: alternate access mask to test for
!	ARG5: 1 if alternate access if required
!
! IMPLICIT INPUTS:
!	CURRENT_UCB: address of device UCB
!	IO_PACKET: I/O packet of this request
!
! OUTPUT PARAMETERS:
!	ARG6: address in which to store audit enable flags
!	      bit 0 = enable audit
!	      bit 1 = enable alarm
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	FCB		: REF BBLOCK,	! FCB arg
	AUDIT_FLAGS	: REF BITVECTOR; ! audit and alarm flags

LINKAGE
	L_CHKPRO_INT	= JSB (REGISTER = 0, REGISTER = 1,
			       REGISTER = 2, REGISTER = 3);

LABEL
	CHECK_BLOCK;			! body of a single check attempt

LOCAL
	STATUS,				! Local routine exit status
	FILE_ACCESS_BITS: BBLOCK [1],	! Actual access mask to file
	PROTECTION,			! Protection code of file
	OWNER_UIC,			! File owner UIC
	SEG_NUMBER,			! Segment number of file header
	AUDIT_BUFFER,			! Audit name string buffer
	ALARM_BUFFER,			! Alarm name string buffer
	CHPCTL		: BBLOCK [CHPCTL$C_LENGTH],	! CHKPRO control block
	CHPRET		: BBLOCK [CHPRET$C_LENGTH],	! CHKPRO return arg block
	ORB		: REF BBLOCK,	! Object's rights block
	LOCAL_ORB	: BBLOCK [ORB$C_LENGTH];	! Used for BADACL checks

BIND					! Access mode tables
					! Write operation on volume
	WRITE_OP	= UPLIT (
			ARM$M_WRITE OR ARM$M_DELETE OR ARM$M_CONTROL),

					! no READALL privilege for operation
	NOREADALL	= UPLIT (
			ARM$M_WRITE OR ARM$M_DELETE),

					! Check for zero file segment number
	EXT_HEADER	= UPLIT BYTE (
			%B'1100111'
			) : BITVECTOR,

					! Volume access bits
	VOL_ACCESS	= UPLIT BYTE (
			ARM$M_READ,
			ARM$M_READ OR ARM$M_WRITE,
			ARM$M_READ OR ARM$M_DELETE,
			ARM$M_READ OR ARM$M_WRITE OR ARM$M_EXECUTE,
			ARM$M_READ,
			ARM$M_READ OR ARM$M_WRITE,
			ARM$M_READ
			) : VECTOR [,BYTE];


EXTERNAL
	EXE$GL_DYNAMIC_FLAGS	: BITVECTOR ADDRESSING_MODE (ABSOLUTE);

EXTERNAL LITERAL
	EXE$V_CLASS_PROT;

BIND_COMMON;

EXTERNAL ROUTINE
	EXE$CHKPRO_INT	: L_CHKPRO_INT ADDRESSING_MODE (GENERAL);
					! General purpose protection checker

! Initialize storage.

MATCHING_ACE[ACE$B_SIZE] = 0;			! Only the size needs initializing

AUDIT_BUFFER = 0;
ALARM_BUFFER = 0;
PRIVS_USED = 0;

! Items to return

CHPRET[CHPRET$W_MATCHED_ACELEN] = ATR$S_READACE;
CHPRET[CHPRET$L_MATCHED_ACE] = MATCHING_ACE;
CHPRET[CHPRET$L_MATCHED_ACERET] = 0;
CHPRET[CHPRET$W_AUDITLEN] = 4;
CHPRET[CHPRET$L_AUDIT] = AUDIT_BUFFER;
CHPRET[CHPRET$L_AUDITRET] = 0;
CHPRET[CHPRET$W_ALARMLEN] = 4;
CHPRET[CHPRET$L_ALARM] = ALARM_BUFFER;
CHPRET[CHPRET$L_ALARMRET] = 0;
CHPRET[CHPRET$L_PRIVS_USED] = PRIVS_USED;

! Derive the composite file access mask from the access type and
! the alternate access mask.
!

FILE_ACCESS_BITS = .FILE_ACCESS[.ACCESS] OR .ALT_ACCESS;

! We try the whole operation twice: once with the added alternate access
! mask, and if that fails, once without.
!

WHILE 1 DO
    BEGIN
    CHECK_BLOCK: BEGIN			! scope of one try

! If the requested operation is a write operation, check to make
! sure that the volume is not software write locked.

    IF (.WRITE_OP AND .FILE_ACCESS_BITS) NEQ 0
    AND .BBLOCK [CURRENT_UCB[UCB$L_DEVCHAR], DEV$V_SWL]
    THEN
	BEGIN
	STATUS = SS$_WRITLCK;
	LEAVE CHECK_BLOCK;
	END;

! Get the address of the Object's Rights Block (ORB).

    ORB = .CURRENT_UCB[UCB$L_ORB];

! Now check the volume protection to make sure that the requested operation
! is allowed.  If the attempted access is denied, return with the error.

    CHPCTL[CHPCTL$L_ACCESS] = .VOL_ACCESS[.ACCESS];
    IF .FILE_ACCESS_BITS[ARM$V_WRITE]
    OR .FILE_ACCESS_BITS[ARM$V_CONTROL]
    THEN BBLOCK [CHPCTL[CHPCTL$L_ACCESS], ARM$V_WRITE] = 1;
    IF .FILE_ACCESS_BITS[ARM$V_DELETE]
    THEN BBLOCK [CHPCTL[CHPCTL$L_ACCESS], ARM$V_DELETE] = 1;
    CHPCTL[CHPCTL$B_MODE] = 0;
    CHPCTL[CHPCTL$L_FLAGS] = CHP$M_READ;
    IF (.WRITE_OP AND .FILE_ACCESS_BITS) NEQ 0
    THEN BBLOCK [CHPCTL[CHPCTL$L_FLAGS], CHP$V_WRITE] = 1;
    IF (.NOREADALL AND .FILE_ACCESS_BITS) EQL 0
    THEN BBLOCK [CHPCTL[CHPCTL$L_FLAGS], CHP$V_USEREADALL] = 1;

    STATUS = EXE$CHKPRO_INT (LOCAL_ARB, .ORB, CHPCTL, 0);
    IF NOT .STATUS
    THEN LEAVE CHECK_BLOCK;

! If there is no FCB specified, it is a volume access
! check.  In which case, control may be returned now.

    IF .FCB EQL 0
    THEN LEAVE CHECK_BLOCK;

! Get the protection, owner, and segment number for the desired header.
! Also, get the classification information if doing classification checks.

    IF .FCB[FCB$V_BADACL]
    THEN
	BEGIN
	CH$MOVE (ORB$C_LENGTH, FCB[FCB$R_ORB], LOCAL_ORB);
	LOCAL_ORB[ORB$V_ACL_QUEUE] = 0;
	LOCAL_ORB[ORB$L_ACLFL] = LOCAL_ORB[ORB$L_ACLBL] = 0;
	ORB = LOCAL_ORB;
	END
    ELSE ORB = FCB[FCB$R_ORB];
    SEG_NUMBER = .FCB[FCB$W_SEGN];

! Next, if the operation is on an extension header, make sure that only the
! system is allowed access for most operations.

    IF .EXT_HEADER[.ACCESS]
    THEN
	BEGIN
	IF .SEG_NUMBER GTR 0 AND NOT .CLEANUP_FLAGS[CLF_SYSPRV]
	THEN
	    BEGIN
	    STATUS = SS$_NOPRIV;
	    LEAVE CHECK_BLOCK;
	    END;
	END;

! Now check the access requested to determine if access is to be granted or
! denied.

    CHPCTL[CHPCTL$L_ACCESS] = .FILE_ACCESS_BITS;
    CHPCTL[CHPCTL$B_MODE] = .ACMODE;

    STATUS = EXE$CHKPRO_INT (LOCAL_ARB, .ORB, CHPCTL, CHPRET);

! Certain operations may be permitted by more than one access type.
! Read implies execute, and control implies read attributes. The
! protection check needs to be retried in these cases.
!

    IF NOT .STATUS
    THEN
	BEGIN
	IF .ACCESS EQL EXEC_ACCESS
	THEN
	    BEGIN
	    BBLOCK [CHPCTL[CHPCTL$L_ACCESS], ARM$V_EXECUTE] = 0;
	    BBLOCK [CHPCTL[CHPCTL$L_ACCESS], ARM$V_READ] = 1;
	    AUDIT_BUFFER = 0;
	    ALARM_BUFFER = 0;
	    PRIVS_USED = 0;
	    STATUS = EXE$CHKPRO_INT (LOCAL_ARB, .ORB, CHPCTL, CHPRET);
	    END
	ELSE IF .ACCESS EQL RDATT_ACCESS
	THEN
	    BEGIN
	    BBLOCK [CHPCTL[CHPCTL$L_ACCESS], ARM$V_READ] = 0;
	    BBLOCK [CHPCTL[CHPCTL$L_ACCESS], ARM$V_CONTROL] = 1;
	    AUDIT_BUFFER = 0;
	    ALARM_BUFFER = 0;
	    PRIVS_USED = 0;
	    STATUS = EXE$CHKPRO_INT (LOCAL_ARB, .ORB, CHPCTL, CHPRET);
	    END;
	END;

! If we just tried a protection check with alternate access and it
! failed, retry it with just the normal access. Otherwise, we are
! done.
!

    END;					! end of block CHECK_BLOCK

    IF .STATUS
    OR .REQUIRED
    OR .FILE_ACCESS_BITS EQL .FILE_ACCESS[.ACCESS]
    THEN EXITLOOP;

    FILE_ACCESS_BITS = .FILE_ACCESS[.ACCESS];
    END;					! end of retry loop

! Return audit and alarm status.
!

.AUDIT_FLAGS = 0;
IF .AUDIT_BUFFER NEQ 0
THEN AUDIT_FLAGS[0] = 1;
IF .ALARM_BUFFER NEQ 0
THEN AUDIT_FLAGS[1] = 1;

! Check if the alternate access check failed. If so, return alternate
! success status.
!

IF .STATUS
AND .ALT_ACCESS NEQ 0
AND .FILE_ACCESS_BITS EQL .FILE_ACCESS[.ACCESS]
THEN STATUS = SS$_NOTALLPRIV;

! Postprocess setting of the SYSPRV priv used bit. We set SYSPRV in the
! local privilege mask under various circumstances (e.g., volume ownership),
! but only want to log it if the caller really had it.
!

IF .PRIVS_USED[CHP$V_SYSPRV]
AND .CLEANUP_FLAGS[CLF_VOLOWNER]
THEN
    BEGIN
    PRIVS_USED[CHP$V_SYSPRV] = 0;
    IF .CLEANUP_FLAGS[CLF_GRPOWNER]
    THEN PRIVS_USED[CHP$V_GRPPRV] = 1;
    END;

RETURN .STATUS

END;						! End of routine CHECK_PROTECT

END
ELUDOM
