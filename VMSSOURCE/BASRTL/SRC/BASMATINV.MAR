	.TITLE	BAS$MAT_INV		; BASIC matrix invert
	.IDENT	/1-014/			; File: BASMATINV.MAR Edit: MDL1014

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: BASIC code support
;
; ABSTRACT:
;
;	This module finds the inverse of a source matrix and stores the inverse
;	in the destination matrix (which may be the same as the source matrix).
;	As a side result of the inversion, this routine also calculates the
;	determinant of the source matrix and stores that result in the OWN
;	storage in the BAS$DET module.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. Will, CREATION DATE: 28-Aug-79
;
; MODIFIED BY:
;++
; 1-001	- Original
; 1-002 - Fix scaling.  RW  6-Dec-79
; 1-003 - Change shared external references to G^ RNH 25-Sep-81
; 1-004 - Add support for byte, g & h floating.  PLL 29-Sep-81
; 1-005 - Substitute a macro for the calls to the array fetch and store
;	  routines.  This should speed things up.  PLL 3-Nov-81
; 1-006 - Change a MOVL to MOV'array_dtype'.  
;       - Change compile-time tests in FETCH and STORE to run-time tests.
;	  PLL 19-Jan-82
; 1-007 - Don't list macro expansions.  PLL 16-Mar-82	  
; 1-008 - Fix g, h floating.  PLL 13-Apr-82
; 1-009 - Fix hfloat problem in subroutine.  PLL 15-Apr-82
; 1-010 - Remove FETCH and STORE macros; they are now found in macro
;	  library MATRIXMAC.OLB.  LB 19-May-82
; 1-011 - Change local storage to stack storage.  PLL 9-Jul-1982
; 1-012 - Use G^ for ALL externals.  SBL 16-Nov-1982
; 1-013 - fix call to MTH$DINT_R4 - should put parameter in R0 prior
;	  to calling.  MDL 28-Mar-1983
; 1-014 - scale before calling BAS$$STORE_DET_G&H- this is a coordinated
;	  change with BAS$DET to get G&H_floating to work.  MDL 7-Mar-1984
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$DSCDEF					; define descriptor offsets
	$SFDEF					; use to get scale

;
; EXTERNAL DECLARATIONS:
;

	.DSABL	GBL				; Prevent undeclared
						;  symbols from being
						;  automatically global.
	.EXTRN	BAS$K_ARGDONMAT			; signalled if all 3 blocks
						;  not present in array desc
	.EXTRN	BAS$K_DATTYPERR			; signalled if dtype of array
						; isn't word long float double
	.EXTRN	BAS$K_MATDIMERR			; signalled if dimct on any
						;  array isn't 2
	.EXTRN	BAS$K_CANINVMAT			; signalled if largest remaining
						;  element in array is 0, array
						;  appears to be singular
	.EXTRN	BAS$K_ARRMUSSQU			; signalled if input array
						;  was not square
	.EXTRN	BAS$STO_FA_B_R8			; array element store for byte
	.EXTRN	BAS$STO_FA_W_R8			; array element store for word
	.EXTRN	BAS$STO_FA_L_R8			; array element store for long
	.EXTRN	BAS$STO_FA_F_R8			; array element store - float
	.EXTRN	BAS$STO_FA_D_R8			; array element store - double
	.EXTRN	BAS$STO_FA_G_R8			; array element store - gfloat
	.EXTRN	BAS$STO_FA_H_R8			; array element store - hfloat
	.EXTRN	BAS$FET_FA_B_R8			; array element fetch - byte
	.EXTRN	BAS$FET_FA_W_R8			; array element fetch - word
	.EXTRN	BAS$FET_FA_L_R8			; array element fetch - long
	.EXTRN	BAS$FET_FA_F_R8			; array element fetch - float
	.EXTRN	BAS$FET_FA_D_R8			; array element fetch - double
	.EXTRN	BAS$FET_FA_G_R8			; array element fetch - gfloat
	.EXTRN	BAS$FET_FA_H_R8			; array element fetch - hfloat
	.EXTRN	BAS$MAT_ASSIGN			; copy input matrix to destination
						;  matrix for in place inversion
						;  will also redim dest mat
	.EXTRN	BAS$$SCALE_R1			; scale for double procision
	.EXTRN	BAS$$STORE_DET			; store dbl determinant
	.EXTRN	BAS$$STORE_DET_G		; store gfloat determinant
	.EXTRN	BAS$$STORE_DET_H		; store hfloat determinant
	.EXTRN	MTH$DINT_R4			; routine to integerize double
	.EXTRN	BAS$$STOP			; signal fatal errors
	.EXTRN	BAS$FETCH_BFA
	.EXTRN	BAS$STORE_BFA

;
; MACROS:
;

;	$BAS$MAT_INV	inverse algorithm,  see next page
;	FETCH		fetch an array element (found in macro library
;			MATRIXMAC.OLB)
;	STORE		store an array element (found in macro library
;			MATRIXMAC.OLB)

;
; EQUATED SYMBOLS:
;

;+
; stack offsets
;-

	maximum_sub = 0				; upper bound of subs
	current_i = 4				; loop counter i
	current_j = 8				; loop counter j
	current_k = 12				; look counter k
	pivi = 16				; row of max remaining elem
	pivj = 20				; col of max remaining elem
	pivot = 24				; abs of max remaining elem
						;  (this may be hfloat)
	scale = 40				; scale (1-10**6) for double
	determinant = 48			; compute determinant 
						;  (this may be hfloat)
	value_desc = 64				; output descriptor
	str_len = 64				; length field within desc
	dtype = 66				; data type field within desc
	class = 67				; class field within desc
	data = 72				; data (4 longwords worth)
	pointer = 68				; pointer field within desc
	r_sub_k = 88				; value of R(K)
	loc_sub_r_sub_i = 88			; another name for same storage
	loc_sub_c_sub_i = 88			; yet another name for same
	r_sub_i = 92				; value of R(I)
	c_sub_i = 96				; value of C(I)
	a_sub_rkci = 100			; output_matrix(R(K), C(I))
	save_element = 100			; another name for same storage
	c_sub_0 = 100			 	; address for addressing c vector
	r_sub_0 = 104				; address for addressing r vector
	tag_sub_0 = 108				; address for addressing tag vect
	loc_sub_0 = 112				; address for addressing loc vector
	c_sub_1 = 116				; first element of c vector
	r_sub_1 = 120				; first element of r vector
	tag_sub_1 = 124				; first element of tag vector
	loc_sub_1 = 128				; first element of loc vector

;+
; Stack offsets for subroutine
;-

	temp_pivi = 0				; cell to store new pivot row
	temp_pivj = 4				; cell to store new pivot col
	temp_pivot = 8				; cell to calculate new pivot
	temp_pivot_abs = 24			; absolute value of new pivot
	save_result = 40			; temp area to store a result

;+
; descriptor offsets
;-

	dsc$l_l1_1 = 24				; desc offset if 1 sub
	dsc$l_u1_1 = 28				; desc offset if 1 sub
	dsc$l_l1_2 = 28				; desc offset if 2 sub
	dsc$l_u1_2 = 32				; desc offset if 2 sub
	dsc$l_l2_2 = 36				; desc offset if 2 sub
	dsc$l_u2_2 = 40				; desc offset if 2 sub

;
; OWN STORAGE:
;

	.PSECT _BAS$DATA PIC, USR, CON, REL, LCL, NOSHR, NOEXE, -
			RD, WRT

	temp:	.BLKB	16	; 16 bytes - large enough to hold h-floating
				; datum

;
; PSECT DECLARATIONS:
;
	.PSECT _BAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG



;+
; This macro contains the algorithm for inverting array.  The inversion 
; algorithm used is from the COLLECTED ALGORITHMS FROM CACM, algorithms
; 230 and 231.  It inverts a matrix in place using the Gauss_Jordan method with
; complete matrix pivoting.  It contain the logic for all the data
; types and scaling.  A macro is used to make it easy to maintain the parallel
; code for all the different data types.
;-

	.MACRO	$BAS$MAT_INVERT array_dtype	; inversion algorithm

FIND_1ST_PIVOT'array_dtype':
	MOV'array_dtype'	#1, determinant(SP)	; initialize det
	.IF	IDN	array_dtype, D		; if double
	MULD2	scale(SP), determinant(SP)	; scale it, no integerize needed
	.ENDC
	CLR'array_dtype'	pivot(SP)	; set pivot to 0
	MOVL	#1, R10				; lowerbound for outer loop
1$:	MOVL	#1, R11				; lowerbound for inner loop
2$:	MOVL	R9, R0				; pointer to output array
	MOVL	R10, R1				; current row
	MOVL	R11, R2				; current col
	FETCH	'array_dtype'			; fetch data from output array
	TST'array_dtype'	R0		; see if need ABS
	BGEQ	3$				; positive, no ABS needed
	MNEG'array_dtype' 	R0, R0		; negative, negate
						;  could get performance improv
						;  for f and d if divided on
						;  data types and used BIC
3$:	CMP'array_dtype'	R0, pivot(SP)	; see if larger than pivot
	BLEQ	4$				; not large, go to next element
	MOV'array_dtype'	R0, pivot(SP)	; new initial pivot
	MOVL	R10, pivi(SP)			; new pivot row
	MOVL	R11, pivj(SP)			; new pivot column
4$:	INCL	R11				; next element
	CMPL	maximum_sub(SP),R11		;\replaced AOBLEQ instruction
	BLEQ	7$				; due to Branch destination
	BRW	2$				;/out of range errors
7$:	ACBL	maximum_sub(SP), #1, R10, 1$	; next element (AOBLEQ will not
						;  work here)



;+
; Now get the initial pivot without the absolute value.
;-

	MOVL	R9, R0				; pointer to output array
	MOVL	pivi(SP), R1			; current row
	MOVL	pivj(SP), R2			; current col
	FETCH	'array_dtype'			; fetch data from output array
	MOV'array_dtype'	R0, pivot(SP)	; initial pivot

;+
; The initial pivot element and it's position are now stored on the
; stack.  perform the inversion algorithm.
;-

	MOVL	#1, current_i(SP)		; initialize I loop
LOOP_I_'array_dtype':

;+
; Make remaining element with greatest magnitude the next pivot element.
; Keep track in permutation vectors.
;-

	INDEX	current_i(SP), #1, maximum_sub(SP), #4, #0, R0 ; ith element
	CMPL	pivi(SP), current_i(SP)			; any row swapping?
	BEQL	5$					; no
	MNEG'array_dtype'	determinant(SP), determinant(SP) ; change sign of det
5$:	INDEX	pivi(SP), #1, maximum_sub(SP), #4, #0, R1 ; pivith element
	MOVL	r_sub_0(SP)[R1], r_sub_i(SP)		; temp <- R(PIVI), new R(I)
	MOVL	r_sub_0(SP)[R0], r_sub_0(SP)[R1]	; R(PIVI) <- R(I)
	MOVL	r_sub_i(SP), r_sub_0(SP)[R0]		; R(I) <- temp
	CMPL	pivj(SP), current_i(SP)			; any column swapping?
	BEQL	6$					; no
	MNEG'array_dtype'	determinant(SP), determinant(SP) ; change sign of det
6$:	INDEX	pivj(SP), #1, maximum_sub(SP), #4, #0, R2 ; pivjth element
	MOVL	c_sub_0(SP)[R2], c_sub_i(SP)		; temp <- C(PIVJ), new C(I)
	MOVL	c_sub_0(SP)[R0], c_sub_0(SP)[R2]	; C(PIVJ) <- C(I)
	MOVL	c_sub_i(SP), c_sub_0(SP)[R0]		; C(I) <- temp

;+
; If pivot element is 0, then array appears to be singular
;-

	TST'array_dtype'	pivot(SP)	; is pivot 0?
	BNEQ	10$				; no, continue
	JMP	ERR_CANINVMAT			; yes, error

;+
; Calculate determinant.
; Switch sign of determinant if \?????????????????????\
;-

10$:	MUL'array_dtype'2	pivot(SP), determinant(SP) ; det = det * PIVOT

	.IF	IDN	array_dtype, D
	DIVD2	scale(SP), determinant(SP)	; get rid of extra scale on det
	CMPD	scale(SP), #1			; is the scale factor 0 (10**0)
	BEQL	11$				; yes, don't integerize
	MOVD	determinant(SP), R0		; no, integerize det
	JSB	G^MTH$DINT_R4
	MOVD	R0, determinant(SP)		; and store the result
	.ENDC

;+
; Now store 1 in A(R(I), C(I)) and divide each element of the row
; by the old value of A(R(I), C(I)), ie PIVOT.
;-

11$:	.IF	IDN	array_dtype, H
	MOVH	#1, R0
	MOVL	R9, R4				; pointer to output array
	MOVL	r_sub_i(SP), R5			; current row
	MOVL	c_sub_i(SP), R6			; current col
	MOVH	R0, data(SP)
	STORE	H
	.IFF
	.IF	IDN	array_dtype, G
	MOVG	#1, R0
	MOVL	R9, R2				; pointer to output array
	MOVL	r_sub_i(SP), R3			; current row
	MOVL	c_sub_i(SP), R4			; current col
	MOVG	R0, data(SP)
	STORE	G
	.IFF
	.IF	IDN	array_dtype, D
	MOV'array_dtype'	#1, R0		; data to be stored
	MULD2	scale(SP), R0			; scale the 1
	MOVL	R9, R2				; pointer to output array
	MOVL	r_sub_i(SP), R3			; current row
	MOVL	c_sub_i(SP), R4			; current col
	MOV'array_dtype'	R0, data(SP)
	STORE	'array_dtype'			; store data into output array
	.IFF
	MOV'array_dtype'	#1, R0		; data to be stored
	MOVL	R9, R1				; pointer to output array
	MOVL	r_sub_i(SP), R2			; current row
	MOVL	c_sub_i(SP), R3			; current col
	MOV'array_dtype'	R0, data(SP)
	STORE	'array_dtype'			; store data into output array
	.ENDC
	.ENDC
	.ENDC

	MOVL	maximum_sub(SP), R10		; max value for J (row) loop
20$:	MOVL	R9, R0				; pointer to output array
	MOVL	r_sub_i(SP), R1			; current row
	INDEX	R10, #1, maximum_sub(SP), #4, #0, R11 ; to fetch C(J)
	MOVL	c_sub_0(SP)[R11], R2		; current column
	FETCH	'array_dtype'			; fetch data from output array

	.IF	IDN	array_dtype, D
	MULD2	scale(SP), R0			; Prescale the element
	.ENDC

	DIV'array_dtype'2	pivot(SP), R0
				; A(R(I),C(J)) <- A(R(I),C(J)) / A(R(I),C(I))
	.IF	IDN	array_dtype, D
	CMPD	scale(SP), #1			; is the scale factor 0 (10**0)
	BEQL	25$				; yes, don't integerize
	JSB	G^MTH$DINT_R4			; no, integerize
	.ENDC

;+
; Now store the quotient in A(R(I), C(J)) 
;-

25$:	.IF	IDN	array_dtype, H
	MOVL	R9, R4				; pointer to output array
	MOVL	r_sub_i(SP), R5			; current row
	MOVL	c_sub_0(SP)[R11], R6		; current col
	MOVH	R0, data(SP)
	STORE	H
	.IFF
	.IF	IDN	array_dtype, G
	MOVL	R9, R2				; pointer to output array
	MOVL	r_sub_i(SP), R3			; current row
	MOVL	c_sub_0(SP)[R11], R4		; current col
	MOVG	R0, data(SP)
	STORE	G
	.IFF	
	.IF	IDN	array_dtype, D
	MOVL	R9, R2				; pointer to output array
	MOVL	r_sub_i(SP), R3			; current row
	MOVL	c_sub_0(SP)[R11], R4		; current col
	MOV'array_dtype'	R0, data(SP)
	STORE	'array_dtype'			; store data into output array
	.IFF
	MOVL	R9, R1				; pointer to output array
	MOVL	r_sub_i(SP), R2			; current row
	MOVL	c_sub_0(SP)[R11], R3		; current col
	MOV'array_dtype'	R0, data(SP)
	STORE	'array_dtype'			; store data into output array
	.ENDC
	.ENDC
	.ENDC

;+
; Loop through all elements of that row
; (note that SOBGTR will not work here)
;-

	DECL	R10				
	BLEQ	26$
	BRW	20$				; next element in row
;+
; Now loop through all elements of the array except the pivot, continuing to
; compute inverse.  In the area of the array beyond the row and column of the
; pivot find the largest element to select the next pivot.
;-

26$:	MOVL	SP, R11				; point to arg list for subr
	SUBL3	#1, current_i(SP), R10		; upperbound for K loop
	BEQL	30$				; I is 1, start with 2
	MOVL	#1, current_k(SP)		; initialize K loop
	BSBW	LOOP_K_'array_dtype'		; loop K = 1, I-1
30$:	CMPL	current_i(SP), maximum_sub(SP)	; is I upperbound?
	BEQL	40$				; yes, finished I loop
	ADDL3	#1, current_i(SP), current_k(SP) ; initialize K loop
	MOVL	maximum_sub(SP), R10		; upperbound for K loop
						; pointer to arg list still set
	BSBW	LOOP_K_'array_dtype'		; loop K = I+1, N
	MOVL	R2, pivi(SP)			; new pivot row
	MOVL	R3, pivj(SP)			; new pivot column
	MOV'array_dtype'	R4, pivot(SP)	; new pivot element

;+
; Continue outer (I) loop
;-

	ADDL2	#1, current_i(SP)		; get next I
	BRW	LOOP_I_'array_dtype'		; continue loop, loop escape is
						;  inside loop

;+
; Now store the determinant.  The determinant is stored in double precision
; unless the matrix is g or h floating.  In these cases, the determinant will
; be stored in g and h floating, respectively.
;-

40$:	.IF	IDN	array_dtype, H
						;
	CVTDH	scale(SP), temp			; cvt scale factor to H_float
	MULH2	temp, determinant(SP)		; scale it
						;
	PUSHAH	determinant(SP)			; pass det by ref (stored as h)
	CALLS	#1, G^BAS$$STORE_DET_H		; store the hfloat det
	.IFF
	.IF	IDN	array_dtype, G
						;
	CVTDH	scale(SP), temp			; cvt scale factor to G_float
	CVTHG	temp, scale(SP)			; in 2 steps because no CVTDG
	MULG2	scale(SP), determinant(SP)	; scale it
						;
	PUSHAG	determinant(SP)			; pass det by ref (stored as g)
	CALLS	#1, G^BAS$$STORE_DET_G		; store the gfloat det
	.IFF

	.IF	DIF	array_dtype, D		; if not double
	CVT'array_dtype'D	determinant(SP), determinant(SP) ; make double
	MULD2	scale(SP), determinant(SP)	; scale it
	PUSHAD	determinant(SP)			; pass det by ref (stored as d)
	CALLS	#1, G^BAS$$STORE_DET		; store the dbl det

	.IFF
	PUSHAD	determinant(SP)			; pass det by ref (stored as d)
	CALLS	#1, G^BAS$$STORE_DET		; store the dbl det
	.ENDC
	.ENDC
	.ENDC


;+
; Put the rows and columns in the correct order.
;-

	MOVL	#1, R10				; initialize I
INVERT_ROWS_'array_dtype':
	INDEX	R10, #1, maximum_sub(SP), #4, #0, R11 ; to fetch R(I)
	MOVL	r_sub_0(SP)[R11], r_sub_i(SP)	; fetch R(I)
	MOVL	c_sub_0(SP)[R11], c_sub_i(SP)	; fetch C(I)
	INDEX	r_sub_i(SP), #1, maximum_sub(SP), #4, #0, R11
						; to fetch loc(R(I))
	MOVL	loc_sub_0(SP)[R11], loc_sub_r_sub_i(SP) ; fetch loc(R(I))
	CMPL	loc_sub_r_sub_i(SP), c_sub_i(SP) ; if loc(R(I)) = C(I)
	BNEQ	101$				
	BRW	20$				; don't switch
101$:	MOVL	#1, R11				; initialize L

;+
; Switch 2 rows
;-

10$:	MOVL	R9, R0				; pointer to output array
	MOVL	loc_sub_r_sub_i(SP), R1		; current row
	MOVL	R11, R2				; current column
	FETCH	'array_dtype'			; fetch A(loc(R(I)), L)
	MOV'array_dtype'	R0, save_element(SP) ; save it in temp

	MOVL	R9, R0				; pointer to output array
	MOVL	c_sub_i(SP), R1			; current row
	MOVL	R11, R2				; current column
	FETCH	'array_dtype'			; fetch A(C(I), L)

	.IF	IDN	array_dtype, H
	MOVL	R9, R4				; pointer to output array
	MOVL	loc_sub_r_sub_i(SP), R5		; current row
	MOVL	R11, R6				; current col
	.IFF
	.IF	IDN	array_dtype, G
	MOVL	R9, R2				; pointer to output array
	MOVL	loc_sub_r_sub_i(SP), R3		; current row
	MOVL	R11, R4				; current col
	.IFF
	.IF	IDN	array_dtype, D
	MOVL	R9, R2				; pointer to output array
	MOVL	loc_sub_r_sub_i(SP), R3		; current row
	MOVL	R11, R4				; current col
	.IFF
	MOVL	R9, R1				; pointer to output array
	MOVL	loc_sub_r_sub_i(SP), R2		; current row
	MOVL	R11, R3				; current col
	.ENDC
	.ENDC
	.ENDC
	MOV'array_dtype'	R0, data(SP)
	STORE	'array_dtype'			; store data into output array

	MOV'array_dtype'	save_element(SP), R0 ; get element from temp
	.IF	IDN	array_dtype, H		
	MOVL	R9, R4				; pointer to output array
	MOVL	c_sub_i(SP), R5			; current row
	MOVL	R11, R6				; current col
	.IFF
	.IF	IDN	array_dtype, G	
	MOVL	R9, R2				; pointer to output array
	MOVL	c_sub_i(SP), R3			; current row
	MOVL	R11, R4				; current col
	.IFF
	.IF	IDN	array_dtype, D
	MOVL	R9, R2				; pointer to output array
	MOVL	c_sub_i(SP), R3			; current row
	MOVL	R11, R4				; current col
	.IFF
	MOVL	R9, R1				; pointer to output array
	MOVL	c_sub_i(SP), R2			; current row
	MOVL	R11, R3				; current col
	.ENDC
	.ENDC
 	.ENDC
	MOV'array_dtype'	R0, data(SP)
	STORE	'array_dtype'			; store data into output array


;+
; Formerly AOBLEQ was used here, but the code grew too big and now the
; destination is out of range.
;-

	ACBL	maximum_sub(SP), #1, R11, 10$	; next L

20$:	INDEX	c_sub_i(SP), #1, maximum_sub(SP), #4, #0, R0 ; to get tag(C(I))
	INDEX	loc_sub_r_sub_i(SP), #1, maximum_sub(SP), #4, #0, R1
						; to get tag(loc(R(I)))
	MOVL	tag_sub_0(SP)[R0], tag_sub_0(SP)[R1] ; tag(loc(R(I)))=tag(C(I))
	MOVL	r_sub_i(SP), tag_sub_0(SP)[R0]	; tag(C(I))=R(I)
	INDEX	tag_sub_0(SP)[R1], #1, maximum_sub(SP), #4, #0, R2
						; to get loc(tag(loc(R(I))))
	INDEX	r_sub_i(SP), #1, maximum_sub(SP), #4, #0, R3
						; to get loc(R(I))
	MOVL	loc_sub_0(SP)[R2], loc_sub_0(SP)[R3]
						; loc(R(I))=loc(tag(loc(R(I))))
	MOVL	loc_sub_r_sub_i(SP), loc_sub_0(SP)[R2]
						; loc(tag(loc(R(I))))=loc(R(I))
	ACBW	maximum_sub(SP), #1, R10, INVERT_ROWS_'array_dtype'
						; next I

;+
; Reinitialize the tag and loc vectors
;-

	MOVL	#1, R10				; initialize I
50$:	INDEX	R10, #1, maximum_sub(SP), #4, #0, R11 ; to fetch Ith element
	MOVL	R10, loc_sub_0(SP)[R11]		; initialize loc
	MOVL	R10, tag_sub_0(SP)[R11]		; initialize tag
	AOBLEQ	maximum_sub(SP), R10, 50$	; next element

;+
; Put the columns in the correct order.
;-

	MOVL	#1, R10				; initialize I
INVERT_COLS_'array_dtype':
	INDEX	R10, #1, maximum_sub(SP), #4, #0, R11 ; to fetch C(I)
	MOVL	r_sub_0(SP)[R11], r_sub_i(SP)	; fetch R(I)
	MOVL	c_sub_0(SP)[R11], c_sub_i(SP)	; fetch C(I)
	INDEX	c_sub_i(SP), #1, maximum_sub(SP), #4, #0, R11
						; to fetch loc(C(I))
	MOVL	loc_sub_0(SP)[R11], loc_sub_c_sub_i(SP) ; fetch loc(C(I))
	CMPL	loc_sub_c_sub_i(SP), r_sub_i(SP) ; if loc(C(I)) = R(I)
	BNEQ	102$				
	BRW	20$				; don't switch
102$:	MOVL	#1, R11				; initialize L

;+
; Switch 2 cols
;-

10$:	MOVL	R9, R0				; pointer to output array
	MOVL	loc_sub_c_sub_i(SP), R2		; current column
	MOVL	R11, R1				; current row
	FETCH	'array_dtype'			; fetch A(L, loc(C(I)))
	MOV'array_dtype'	R0, save_element(SP) ; save it in temp

	MOVL	R9, R0				; pointer to output array
	MOVL	r_sub_i(SP), R2			; current column
	MOVL	R11, R1				; current row
	FETCH	'array_dtype'			; fetch A(L, R(I))

	.IF	IDN	array_dtype, H
	MOVL	R9, R4				; pointer to output array
	MOVL	loc_sub_c_sub_i(SP), R6		; current col
	MOVL	R11, R5				; current row
	.IFF
	.IF	IDN	array_dtype, G
	MOVL	R9, R2				; pointer to output array
	MOVL	loc_sub_c_sub_i(SP), R4		; current col
	MOVL	R11, R3				; current row
	.IFF
	.IF	IDN	array_dtype, D
	MOVL	R9, R2				; pointer to output array
	MOVL	loc_sub_c_sub_i(SP), R4		; current column
	MOVL	R11, R3				; current row
	.IFF
	MOVL	R9, R1				; pointer to output array
	MOVL	loc_sub_c_sub_i(SP), R3		; current col
	MOVL	R11, R2				; current row
	.ENDC
	.ENDC
	.ENDC
	MOV'array_dtype'	R0, data(SP)
	STORE	'array_dtype'			; store data into output array

	MOV'array_dtype'	save_element(SP), R0 ; get element from temp
	.IF	IDN	array_dtype, H
	MOVL	R9, R4				; pointer to output array
	MOVL	r_sub_i(SP), R6			; current col
	MOVL	R11, R5				; current row
	.IFF
	.IF	IDN	array_dtype, G
	MOVL	R9, R2				; pointer to output array
	MOVL	r_sub_i(SP), R4			; current col
	MOVL	R11, R3				; current row
	.IFF
	.IF	IDN	array_dtype, D
	MOVL	R9, R2				; pointer to output array
	MOVL	r_sub_i(SP), R4			; current column
	MOVL	R11, R3				; current row
	.IFF
	MOVL	R9, R1				; pointer to output array
	MOVL	r_sub_i(SP), R3			; current col
	MOVL	R11, R2				; current row
	.ENDC
	.ENDC
	.ENDC
	MOV'array_dtype'	R0, data(SP)
	STORE	'array_dtype'			; store data into output array


;+
; AOBLEQ will not work here because the destination is out of range.
;-

	ACBL	maximum_sub(SP), #1, R11, 10$	; next L

20$:	INDEX	r_sub_i(SP), #1, maximum_sub(SP), #4, #0, R0 ; to get tag(R(I))
	INDEX	loc_sub_c_sub_i(SP), #1, maximum_sub(SP), #4, #0, R1
						; to get tag(loc(C(I)))
	MOVL	tag_sub_0(SP)[R0], tag_sub_0(SP)[R1] ; tag(loc(C(I)))=tag(R(I))
	MOVL	c_sub_i(SP), tag_sub_0(SP)[R0]	; tag(R(I))=C(I)
	INDEX	tag_sub_0(SP)[R1], #1, maximum_sub(SP), #4, #0, R2
						; to get loc(tag(loc(C(I))))
	INDEX	c_sub_i(SP), #1, maximum_sub(SP), #4, #0, R3
						; to get loc(C(I))
	MOVL	loc_sub_0(SP)[R2], loc_sub_0(SP)[R3]
						; loc(C(I))=loc(tag(loc(C(I))))
	MOVL	loc_sub_c_sub_i(SP), loc_sub_0(SP)[R2]
						; loc(tag(loc(C(I))))=loc(C(I))
	ACBW	maximum_sub(SP), #1, R10, INVERT_COLS_'array_dtype'
						; next I




	RET					; yes, finished


;+
; Input arguments to subroutines
; R9	pointer to array
; R10	upper bound on loop
; R11	pointer to callers stack argument list
; Output from subroutine, always returned, only picked up on the 2nd call
; R4-R7	new pivot
; R2	new pivot row
; R3	new pivot column
;-

LOOP_K_'array_dtype':

;+
; Redefine the following symbols, since the stack will be changed.  This is
; necessary for FETCH and STORE, which use them to access the stack.
;-

value_desc = 124
data = 132
pointer = 128
dtype = 126
class = 127
str_len = 124

	SUBL2	#56, SP				; space for 2 pivots & row & col
	CLR'array_dtype'	temp_pivot_abs(SP) ; initialize new abs pivot
	
;+
; Now store in temps elements that are invariant in inner loop
;-

START_K_LOOP_'array_dtype':
	INDEX	current_k(R11), #1, maximum_sub(R11), #4, #0, R0 ; to fetch R(K)
	MOVL	r_sub_0(R11)[R0], r_sub_k(R11)	; store R(K) temp
	MOVL	R9, R0				; pointer to output array
	MOVL	r_sub_k(R11), R1		; current row
	MOVL	c_sub_i(R11), R2		; current column
	FETCH	'array_dtype'			; fetch data from output array
	MOV'array_dtype'	R0, a_sub_rkci(R11) ; store A(R(K), C(I)) temp

;+
; Store 0 in A(R(K), C(I)) so that computation can be made in J loop
;-

	CLR'array_dtype'	R0		; zero to be stored
	.IF	IDN	array_dtype, H
	MOVL	R9, R4				; pointer to output array
	MOVL	r_sub_k(R11), R5		; current row
	MOVL	c_sub_i(R11), R6		; current col
	.IFF
	.IF	IDN	array_dtype, G	
	MOVL	R9, R2				; pointer to output array
	MOVL	r_sub_k(R11), R3		; current row
	MOVL	c_sub_i(R11), R4		; current col
	.IFF
	.IF	IDN	array_dtype, D
	MULD2	scale(R11), R0			; scale the 0
	MOVL	R9, R2				; pointer to output array
	MOVL	r_sub_k(R11), R3		; current row
	MOVL	c_sub_i(R11), R4		; current col
	.IFF
	MOVL	R9, R1				; pointer to output array
	MOVL	r_sub_k(R11), R2		; current row
	MOVL	c_sub_i(R11), R3		; current col
	.ENDC
	.ENDC
	.ENDC
	MOV'array_dtype'	R0, data(SP)
	STORE	'array_dtype'			; store data into output array

;+
; Now loop through the cols (J in algorithm) of row K that are greater than I
; Look for new pivot element at the same time.
;-

	MOVL	maximum_sub(R11), current_j(R11) ; initialize J
	CMPL	current_i(R11), maximum_sub(R11) ; is I = max sub?
	BNEQ	10$				; no, continue
	BRW	LOOP_J_'array_dtype'		; yes, do loop J <= I
10$:	INDEX	current_j(R11), #1, maximum_sub(R11), #4, #0, R0 ; to fetch C(J)
	MOVL	c_sub_0(R11)[R0], -(SP)		; current column

;+
; A(R(K), C(J)) = A(R(K), C(J)) - A(R(I), C(J)) * A(R(K), C(I))
;-

	MOVL	R9, R0				; pointer to output array
	MOVL	r_sub_i(R11), R1		; current row
	MOVL	(SP), R2			; current column is on stack
	FETCH	'array_dtype'			; fetch data from output array

	MUL'array_dtype'2	a_sub_rkci(R11), R0 ; R0=A(R(I),C(J))*A(R(K),C(I))

	.IF	IDN	array_dtype, D
	DIVD2	scale(R11), R0			; get rid of extra scale
	CMPD	scale(R11), #1			; if scale factor is 0
	BEQL	15$				; don't integerize
	JSB	G^MTH$DINT_R4			; otherwise, integerize
	.ENDC

15$:	MOVL	(SP), R5			; prepare for next fetch
	MOV'array_dtype'	R0, -(SP)	; save partial computation
	MOVL	R9, R0				; pointer to output array
	MOVL	r_sub_k(R11), R1		; current row
	MOVL	R5, R2				; move saved current col
	FETCH	'array_dtype'			; fetch data from output array

	SUB'array_dtype'2	(SP)+, R0	; R0=A(R(K),C(J))-temp

;+
; Now store the computed result in A(R(K), C(J)).  If the computed result
; is larger than pivot, make this element the new pivot. 
;-

	.IF	IDN	array_dtype, H
	MOVL	(SP)+, R4			; save col here for now
	.IFF
	.IF	IDN	array_dtype, G
	MOVL	(SP)+, R4			; put current col for store
	.IFF
	.IF	IDN	array_dtype, D
	MOVL	(SP)+, R4			; put current col for store
	.IFF
	MOVL	(SP)+, R3			; put current col for store
	.ENDC
	.ENDC
	.ENDC

	MOV'array_dtype'	R0, save_result(SP) ; move computed result
	BGEQ	20$				; computed is pos, continue
	MNEG'array_dtype'	save_result(SP), save_result(SP) ; make neg result positive
20$:	CMP'array_dtype'	save_result(SP), temp_pivot_abs(SP) ; is element less than temp
	BLSS	30$				; yes, continue
	MOV'array_dtype'	save_result(SP), temp_pivot_abs(SP) ; no, make new abs pivot
	MOV'array_dtype'	R0, temp_pivot(SP) ; new pivot
	MOVL	current_k(R11), temp_pivi(SP)	; new pivot row
	MOVL	current_j(R11), temp_pivj(SP)	; new pivot col
	
30$:	.IF 	IDN	array_dtype, H
	MOVL	R4, R6				; move current col
	MOVL	R9, R4				; pointer to output array
	MOVL	r_sub_k(R11), R5		; current row
	.IFF
	.IF	IDN	array_dtype, G
	MOVL	R9, R2				; pointer to output array
	MOVL	r_sub_k(R11), R3		; current row
	.IFF
	.IF	IDN	array_dtype, D
	MOVL	R9, R2				; pointer to output array
	MOVL	r_sub_k(R11), R3		; current row
	.IFF
	MOVL	R9, R1				; pointer to output array
	MOVL	r_sub_k(R11), R2		; current row
	.ENDC
	.ENDC
	.ENDC
	MOV'array_dtype'	R0, data(SP)
	STORE	'array_dtype'			; store data into output array

	SUBL2	#1, current_j(R11)		; decrement loop counter
	CMPL	current_j(R11), current_i(R11)	; continue looping?
	BLEQ	LOOP_J_'array_dtype'		; no
	BRW	10$				; yes

;+
; Now loop through the cols (J in algorithm) of row K that are less than or
; equal to I.  Don't look for new pivot in this area of the array.
;-

LOOP_J_'array_dtype':
	INDEX	current_j(R11), #1, maximum_sub(R11), #4, #0, R0 ; to fetch C(J)
	MOVL	c_sub_0(R11)[R0], -(SP)		; current column

;+
; A(R(K), C(J)) = A(R(K), C(J)) - A(R(I), C(J)) * A(R(K), C(I))
;-

	MOVL	R9, R0				; pointer to output array
	MOVL	r_sub_i(R11), R1		; current row
	MOVL	(SP), R2			; current column is on stack
	FETCH	'array_dtype'			; fetch data from output array

	MUL'array_dtype'2	a_sub_rkci(R11), R0 ; R0=A(R(I),C(J))*A(R(K),C(I))

	.IF	IDN	array_dtype, D
	DIVD2	scale(R11), R0			; get rid of extra scale
	CMPD	scale(R11), #1			; if scale factor is 0
	BEQL	15$				; don't integerize
	JSB	G^MTH$DINT_R4			; otherwise, integerize
	.ENDC

15$:	MOVL	(SP), R5			; prepare for next fetch
	MOV'array_dtype'	R0, -(SP)	; save partial computation
	MOVL	R9, R0				; pointer to output array
	MOVL	r_sub_k(R11), R1		; current row
	MOVL	R5, R2				; move saved current col
	FETCH	'array_dtype'			; fetch data from output array

	SUB'array_dtype'2	(SP)+, R0	; R0=A(R(K),C(J))-temp

;+
; Now store the computed result in A(R(K), C(J)).
;-

	.IF	IDN	array_dtype, H
	MOVL	(SP)+, R6			; put current col for store
	MOVL	R9, R4				; pointer to output array
	MOVL	r_sub_k(R11), R5		; current row
	.IFF
	.IF	IDN	array_dtype, G
	MOVL	(SP)+, R4			; put current col for store
	MOVL	R9, R2				; pointer to output array
	MOVL	r_sub_k(R11), R3		; current row
	.IFF
	.IF	IDN	array_dtype, D
	MOVL	(SP)+, R4			; put current col for store
	MOVL	R9, R2				; pointer to output array
	MOVL	r_sub_k(R11), R3		; current row
	.IFF
	MOVL	(SP)+, R3			; put current col for store
	MOVL	R9, R1				; pointer to output array
	MOVL	r_sub_k(R11), R2		; current row
	.ENDC
	.ENDC
	.ENDC
	MOV'array_dtype'	R0, data(SP)
	STORE	'array_dtype'			; store data into output array


;+
; SOBGTR will not work here because the destination is out of range.
;-

	DECL	current_j(R11)
	BLEQ	103$
	BRW	LOOP_J_'array_dtype'		; continue J loop
	
103$:	ACBW	R10, #1, current_k(R11), START_K_LOOP_'array_dtype'
						; continue K loop

	MOV'array_dtype'	temp_pivot(SP), R4 ; return new pivot
	MOVL	(SP)+, R2			; return new pivot row
	MOVL	(SP)+, R3			; return new pivot column
	ADDL2	#48, SP				; pop off 2 pivot temps

;+
; Restore symbols
;-

value_desc = 64
data = 72
pointer = 68
dtype = 66
class = 67
str_len = 64

	RSB					; return

	.ENDM


	.SBTTL	BAS$MAT_INV  - Invert a matrix
;++
; FUNCTIONAL DESCRIPTION:
;
;	Invert the contents of and input matrix and put the result in a
;	destination matrix.  Signal an error if the upper and
;	lower bounds (excluding 0) for rows and columns in input_matrix
;	does not equal the upper and lower bounds (excluding 0) for rows
;	and columns respectively in output_matrix.
;	An error will also be signalled if either matrix does not
;	have a DIMCT of 2.  Copy the input_matrix to the output_matrix using
;	BAS$MAT_ASSIGN.  The assign routine will redimension
;	the output matrix to have a lower bound of 0 for both dimensions,
;	and an upper bound for rows equal to the upper bound for rows for
;	input_matrix, and an upper bound for columns equal to the upper bound
;	for columns for input_matrix.  Initialize all the necessary
;	looping	information on the stack.  To support different data types,
;	divide the looping portion according to the data types.
;
; CALLING SEQUENCE:
;
;	CALL BAS$MAT_INVERT (input_matrix.rx.da, output_matrix.wx.da)
;
; INPUT PARAMETERS:
;
	input_matrix = 4
;
; IMPLICIT INPUTS:
;
;	Scale from the callers frame to scale double precision.
;
; OUTPUT PARAMETERS:
;
	output_matrix = 8
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	This routine calls the matrix copy routine which calls
;	the redimensioning routine and the array element
;	fetch and store routines and therefore may signal any of their errors.
;	It may also signal any of the errors listed in the externals section.
;	It may also cause the destination array to have different dimensions.
;
;--

	.ENTRY BAS$MAT_INV, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,IV>

;+
;	REGISTER USAGE
;	R0 - R8 destroyed by store routines
;	R9	place to store element of 1st array while fetching 2nd element
;	R10	pointer to dest matrix descriptor (except for double in which
;		case R10 is part of double value R9-R10)
;	R11	current value of inner subscript
;-

;+
; Put routine arguments into registers for ease of use.
; If block 2 of array descriptor (multipliers) is not present then error.
;-

	MOVL	input_matrix(AP), R2		; ptr to input array descr
	BBC	#DSC$V_FL_BOUNDS, DSC$B_AFLAGS(R2), ERR_ARGDONMAT
						; exit if block 3 not
						; present in descriptor
	CMPB	DSC$B_DIMCT(R2), #2		; 2 dimensional?
	BNEQU	ERR_MATDIMERR			; if not, error
	CMPL	dsc$l_u1_2(R2), dsc$l_u2_2(R2)	; see if matrix to be inverted
						;  is square, since inversion
						;  will be done in output matrx
						;  and it will have lower bnds
						;  of 0, only check upper bnds
	BEQL	INIT_TWO_SUBS			; square matrix, continue
						;  else fall into error

ERR_ARRMUSSQU:
	PUSHL	#BAS$K_ARRMUSSQU		; Signal error, array to be
	CALLS	#1, G^BAS$$STOP			;  inverted is not square

ERR_MATDIMERR:
	PUSHL	#BAS$K_MATDIMERR		; Signal error, input matrix
	CALLS	#1, G^BAS$$STOP			;  is not 2 dimensional

ERR_ARGDONMAT:
	PUSHL	#BAS$K_ARGDONMAT		; signal error,
	CALLS	#1, G^BAS$$STOP			;  block 2 or 3 absent

ERR_CANINVMAT:
	PUSHL	#BAS$K_CANINVMAT		; signal error, matrix
	CALLS	#1, G^BAS$$STOP			;  is singular

;+
; There are 2 subscripts.  Copy the input matrix to the output matrix so
; that the inversion may be done in place.  The copy will do the necessary
; redimensioning of the output array.
;-

INIT_TWO_SUBS:
	PUSHL	output_matrix(AP)		; destination of copy
	PUSHL	R2				; source for copy
	CALLS	#2, G^BAS$MAT_ASSIGN		; copy to output matrix

;+
; Initialize 4 vectors to keep track of row and column permutations during
; the invert.  The 4 vectors are interwoven so that addressing one vector
; won't be dependent on the length of the other vectors.  Note that the vectors
; will put 4 times the width of the array of longwords on the stack.  Perhaps
; this should be done in heap storage.  However, space for arrays is usually
; allocated on the stack, and the 4n for the vectors is minor when compared to
; the n**2 space used for the array for large n.
;-

	MOVL	dsc$l_u1_2(R2), R0		; get # of rows and cols
1$:	PUSHL	R0				; nth element of row vector
	PUSHL	R0				; nth element of col vector
	PUSHL	R0				; nth element of tag vector
	PUSHL	R0				; nth element of loc vector
	SOBGTR	R0, 1$				; do for all elements of row
						;  and cols

;+
; Initialize remaining stack temporaries
;-

	SUBL2	#92, SP				; save space on stack for
						;  7 temps, some may be hfloat
						;  also data and value_desc
	PUSHL	#1				; initialize pivj
	PUSHL	#1				; initialize pivi
	CLRQ	-(SP)				; space for 2 longword temps
	PUSHL	#1				; initialize current_i
	PUSHL	dsc$l_u1_2(R2)			; initialize upperbnd for loops
	MOVL	SF$L_SAVE_FP(FP), R0		;  get caller's frame and
	JSB	G^BAS$$SCALE_R1			;  get scale in R0&R1
	MOVD	R0, scale(SP)			;  save it for computations

;+
; Algorithm now differs according to data types
;-

SEPARATE_DTYPES:
	MOVL	output_matrix(AP), R9		; get pointer to output array
	MOVL	R9, R8				; local copy which may change
5$:	CASEB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
2$:	.WORD	BYTE-2$				; code for byte dtype
	.WORD	WORD-2$				; code for word dtype
	.WORD	LONG-2$				; code for long dtype
	.WORD	ERR_DATTYPERR-2$		; quad not supported
	.WORD	FLOAT-2$			; code for float dtype
	.WORD	DOUBLE-2$			; code for double dtype

;+
; G and h floating fall outside the range of the CASEB statement, so check
; for them separately.
;-

	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_G
	BNEQ	3$
	BRW	GFLOAT

3$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_H
	BNEQ	4$
	BRW	TO_HFLOAT

4$:	CMPB	DSC$B_DTYPE(R8), #DSC$K_DTYPE_DSC
	BNEQ	ERR_DATTYPERR
	MOVL	4(R8), R8
	BRB	5$

ERR_DATTYPERR:
	PUSHL	#BAS$K_DATTYPERR		; Signal error, unsupported
	CALLS	#1, G^BAS$$STOP			; dtype in array desc

	.PAGE
;+
; Input array is a byte array.  Use the macro to generate code.
;-

BYTE:	$BAS$MAT_INVERT	B

;+
; Input array is a word array.  Use the macro to generate code.
;-

WORD:	$BAS$MAT_INVERT	W

	.PAGE
;+
; Input array is a longword array.  Use the macro to generate code
;-

LONG:	$BAS$MAT_INVERT	L

	.PAGE
TO_HFLOAT:	BRW	HFLOAT
	.PAGE
;+
; Source1 array is a floating array.  Use the macro to generate code
;-

FLOAT:	$BAS$MAT_INVERT	F

	.PAGE
;+
; Source1 array is a double array.  Use the macro to generate code
;-

DOUBLE:	$BAS$MAT_INVERT	D

;+
; Input array is a gfloat array.  Use the macro to generate code.
;-

GFLOAT:	$BAS$MAT_INVERT	G

;+
; Input array is an hfloat array.  Use the macro to generate code.
;-

HFLOAT:	$BAS$MAT_INVERT	H

	.END
