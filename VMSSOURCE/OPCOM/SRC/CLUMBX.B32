MODULE	OPC$CLUMBX	(
			 LANGUAGE (BLISS32),
			 IDENT = 'V04-000'
			) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:
!
!	OPCOM
!
! ABSTRACT:
!
!	This module contains the specialized logic to service
!	a particular type of request sent by a user to OPCOM.
!
! Environment:
!
!	VAX/VMS operating system.
!
! Author:
!
!	Steven T. Jeffreys
!
! Creation date:
!
!	March 10, 1981
!
! Revision history:
!
!	V03-004	CWH3169		CW Hobbs			5-May-1984
!		Second pass for cluster-wide OPCOM:
!		 - Check cluster configuration every time we get a message
!		   from the connection manager.  This is a reasonable approx-
!		   imation of a configuration change AST.
!		 - Add the NOQUORUM message, it was apparently omitted
!		   up until now.
!
!	V03-003	CWH3003		CW Hobbs			14-Apr-1984
!		Fix the case range to account for the new messages.
!
!	V03-002	CWH3002		CW Hobbs			12-Apr-1984
!		Make a couple of new messages, delete two old ones.
!
!	V03-001	CWH3001		CW Hobbs			15-Sep-1983
!		Cut and paste DEVICE.B32 to be CLUMBX.B32.
!--

BEGIN						! Start of CLUMBX

LIBRARY	'SYS$LIBRARY:LIB.L32';
LIBRARY 'LIB$:OPCOMLIB';

FORWARD ROUTINE
	CLUMBX_HANDLER		: NOVALUE;

EXTERNAL ROUTINE
	ALLOCATE_DS,				! Allocate a data structure
	CLUSMSG_RQCB_SEND,			! Send RQCB to remote nodes
	CLUSUTIL_CONFIGURE,			! Check to see who is in the club
	DEALLOCATE_RQCB	: NOVALUE,		! Dispose of an RQCB
	DUMP_LOG_FILE,				! Put a random string in the log file
	FORMAT_MESSAGE,				! Format a message
	LOG_MESSAGE,				! Log an event
	NOTIFY_LISTED_OPERATORS;		! Notify interested operators

EXTERNAL
	OCD_VECTOR	: VECTOR;		! OCD list heads

EXTERNAL LITERAL
	RQCB_K_TYPE,				! RQCB structure type
	MIN_SCOPE,				! Minimum scope value
	MAX_SCOPE;				! Maximum scope value

GLOBAL ROUTINE CLUMBX_HANDLER (BUFFER_DESC : $ref_bblock) : NOVALUE =

!++
! Functional description:
!
!	This routine is the handler for all message of type MSG$_CLUMBX.
!	Note that this message has a special format, different from all other
!	messages.  This is because the message is sent directly from the
!	connection manager instead of $SNDOPR.
!
!
!
! Input:
!
!	BUFFER_DESC : The address of a quadword buffer descriptor that
!		      describes the buffer containing the message.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of CLUMBX_HANDLER

LOCAL
	MESSAGE_VECTOR	: VECTOR [15,LONG],	! Message info
	MSG		: $ref_bblock,		! Pointer to message text
	RQCB		: $ref_bblock,		! RQCB data structure
	OCD		: $ref_bblock,		! OCD data structure
	OCD_COUNT	: LONG,			! Count of OCDs in OCD list
	OCD_INDEX	: LONG,			! Index into OCD_VECTOR
	OPER_COUNT	: LONG,			! Count of operators in operator list
	STATUS		: LONG;
!
! See if the message is correct
!
MSG = .BUFFER_DESC [DSC$A_POINTER];
IF .BUFFER_DESC [DSC$W_LENGTH] NEQ CLUMBX$K_LENGTH
 OR
   .MSG [CLUMBX$B_DS_VERSION] NEQ CLUMBX$K_DS_VERSION
 OR
   .MSG [CLUMBX$W_LENGTH] NEQ CLUMBX$K_LENGTH
THEN
    RETURN DUMP_LOG_FILE (.BUFFER_DESC, %ASCID 'CLUMBX message not valid');
!
! Run a scan to see if the set of players visible through $GETSYI has changed
!
CLUSUTIL_CONFIGURE ();
!
! The message must be one of the cluster mailbox messages.  All others
! are ignored.  Set the message code in the message vector to the
! proper value.
!
CASE .MSG [CLUMBX$W_SUBTYPE] FROM 1 TO CLUMBX$K_ST_QUORUM
OF
    SET
    [ CLUMBX$K_ST_NEWSYS	] : MESSAGE_VECTOR [0] = OPC$_CLU_NEWSYS;
    [ CLUMBX$K_ST_CNX		] : MESSAGE_VECTOR [0] = OPC$_CLU_CNX;
    [ CLUMBX$K_ST_RECNX		] : MESSAGE_VECTOR [0] = OPC$_CLU_RECNX;
    [ CLUMBX$K_ST_LOSTCNX	] : MESSAGE_VECTOR [0] = OPC$_CLU_LOSTCNX;
    [ CLUMBX$K_ST_TIMCNX	] : MESSAGE_VECTOR [0] = OPC$_CLU_TIMCNX;
    [ CLUMBX$K_ST_INIFORM	] : MESSAGE_VECTOR [0] = OPC$_CLU_INIFORM;
    [ CLUMBX$K_ST_INIADD	] : MESSAGE_VECTOR [0] = OPC$_CLU_INIADD;
    [ CLUMBX$K_ST_INIRECNFIG	] : MESSAGE_VECTOR [0] = OPC$_CLU_INIRECNFIG;
    [ CLUMBX$K_ST_MEMREQ	] : MESSAGE_VECTOR [0] = OPC$_CLU_MEMREQ;
    [ CLUMBX$K_ST_ABORT		] : MESSAGE_VECTOR [0] = OPC$_CLU_ABORT;
    [ CLUMBX$K_ST_ADD		] : MESSAGE_VECTOR [0] = OPC$_CLU_ADD;
    [ CLUMBX$K_ST_NEWNODE	] : MESSAGE_VECTOR [0] = OPC$_CLU_ADD;
    [ CLUMBX$K_ST_DROPNODE	] : MESSAGE_VECTOR [0] = OPC$_CLU_DROPNODE;
    [ CLUMBX$K_ST_FORNCLUS	] : MESSAGE_VECTOR [0] = OPC$_CLU_FORNCLUS;
    [ CLUMBX$K_ST_INQUORUM	] : MESSAGE_VECTOR [0] = OPC$_CLU_INQUORUM;
    [ CLUMBX$K_ST_LOSTDISK	] : MESSAGE_VECTOR [0] = OPC$_CLU_LOSTDISK;
    [ CLUMBX$K_ST_GAINDISK	] : MESSAGE_VECTOR [0] = OPC$_CLU_GAINDISK;
    [ CLUMBX$K_ST_DISKRDERR	] : MESSAGE_VECTOR [0] = OPC$_CLU_DISKRDERR;
    [ CLUMBX$K_ST_DISKWRERR	] : MESSAGE_VECTOR [0] = OPC$_CLU_DISKWRERR;
    [ CLUMBX$K_ST_DISKINVDAT	] : MESSAGE_VECTOR [0] = OPC$_CLU_DISKINVDAT;
    [ CLUMBX$K_ST_DISKTIMEOUT	] : MESSAGE_VECTOR [0] = OPC$_CLU_DISKTIMEOUT;
    [ CLUMBX$K_ST_LOSTMSG	] : MESSAGE_VECTOR [0] = OPC$_CLU_LOSTMSG;
    [ CLUMBX$K_ST_NOQUORUM	] : MESSAGE_VECTOR [0] = OPC$_CLU_NOQUORUM;
    [ CLUMBX$K_ST_FORNDISK	] : MESSAGE_VECTOR [0] = OPC$_CLU_FORNDISK;
    [ CLUMBX$K_ST_COMPLETE	] : MESSAGE_VECTOR [0] = OPC$_CLU_COMPLETE;
    [ CLUMBX$K_ST_QUORUM	] : MESSAGE_VECTOR [0] = OPC$_CLU_QUORUM;
    [ INRANGE, OUTRANGE	] : 	    RETURN DUMP_LOG_FILE (.BUFFER_DESC, %ASCID 'CLUMBX message subtype not valid');
    TES;
!
! To put additional stress on the system, request acks from every node.  Make
! all this noise switchable by defining the logical name OPC$ACK (presence of
! the name is significant, not its value).
!
%IF %VARIANT GTR 0				! Only include if /VARIANT specified
%THEN
BEGIN
LOCAL			lcl_buf : $bvector [16], out_dsc : VECTOR [2, LONG];
EXTERNAL		lcl_csid, nod_head : vector [2, long];
EXTERNAL ROUTINE	clusmsg_ack_please;
out_dsc [0] = 16; out_dsc [1] = lcl_buf;
IF $trnlog (lognam=%ASCID 'OPC$ACK', rsllen=out_dsc, rslbuf=out_dsc) EQL ss$_normal
THEN
    BEGIN
    LOCAL	nod : $ref_bblock;
    nod = .nod_head [0];
    WHILE .nod NEQ nod_head [0]
    DO
	BEGIN
	IF .nod [nod_l_node_csid] NEQ .lcl_csid
	THEN
	    BEGIN
	    nod [nod_v_ack_pend] = false;
	    CLUSMSG_ACK_PLEASE (.nod);
	    END;
	nod = .nod [nod_l_flink];
	END;
    END;
END;
%FI						! End of conditionally compiled message codes.
!
! Allocate an RQCB.  This is necessary to format and later issue the message.
!
IF NOT ALLOCATE_DS (RQCB_K_TYPE, RQCB)
THEN
    RETURN;
!
! Set the operator interest mask so that cluster operators will find it
!
RQCB [RQCB_L_ATTNMASK1] = OPC$M_NM_CLUSTER;
!
! Format the message, then send it to everyone else in the cluster
!
MESSAGE_VECTOR [1] = 0;						! Use current system time for header
MESSAGE_VECTOR [2] = MSG [CLUMBX$Q_TIME];			! Put the event time in the message
!
! Move information for local system
!
MESSAGE_VECTOR [3] = .(MSG [CLUMBX$T_NODENAME_L])<0,8,0>;	! Get ASCIC length of nodename
MESSAGE_VECTOR [4] = MSG [CLUMBX$T_NODENAME_L] + 1;		! Pass address of nodename
MESSAGE_VECTOR [5] = .(MSG [CLUMBX$B_SYSTEMID_L] + 4)<0,16,0>;	! High word of system id
MESSAGE_VECTOR [6] = .(MSG [CLUMBX$B_SYSTEMID_L]);		! Low longword of system id
MESSAGE_VECTOR [7] = .MSG [CLUMBX$L_CSID_L];			! Cluster system id of system
!
! Move information for remote system
!
MESSAGE_VECTOR [8] = .(MSG [CLUMBX$T_NODENAME_R])<0,8,0>;	! Get ASCIC length of nodename
MESSAGE_VECTOR [9] = MSG [CLUMBX$T_NODENAME_R] + 1;		! Pass address of nodename
MESSAGE_VECTOR [10] = .(MSG [CLUMBX$B_SYSTEMID_R] + 4)<0,16,0>;	! High word of system id
MESSAGE_VECTOR [11] = .(MSG [CLUMBX$B_SYSTEMID_R]);		! Low longword of system id
MESSAGE_VECTOR [12] = .MSG [CLUMBX$L_CSID_R];			! Cluster system id of system
!
! Now actually format it
!
FORMAT_MESSAGE (.RQCB, MESSAGE_VECTOR);
!
! If desired, send it to remote nodes
!
IF .MSG [CLUMBX$V_BRDCST]
THEN
    CLUSMSG_RQCB_SEND (-1, CLM__CLUMBX, .RQCB);	! Send it everywhere
!
! Log the message, and send it to all interested operators.
! Every operator in the data base is a candidate for the message.
!
OCD_INDEX = MAX_SCOPE;
WHILE (.OCD_INDEX GEQ MIN_SCOPE) DO
    BEGIN
    !
    ! Scan the OCD list for each class of operator.
    !
    OCD_COUNT = .OCD_VECTOR [(.OCD_INDEX - 1) * 2 + 1];
    OCD = .OCD_VECTOR [(.OCD_INDEX - 1) * 2];
    WHILE (.OCD_COUNT GTR 0) DO
	BEGIN
	!
	! Notify every operator in the OCD's operator list.
	! Also log the message for each OCD.
	!
	RQCB [RQCB_L_OCD] = .OCD;		! Set OCD address
	LOG_MESSAGE (.RQCB);			! Log the message
	NOTIFY_LISTED_OPERATORS (.RQCB);	! Inform the operators
	OCD_COUNT = .OCD_COUNT - 1;		! Decrement operator count
	OCD = .OCD [OCD_L_FLINK];		! Get next OCD address
	END;
    OCD_INDEX = .OCD_INDEX - 1;
    END;
!
! Free the rqcb
!
DEALLOCATE_RQCB (.RQCB);
RETURN; 	

END;						! End of CLUMBX_HANDLER

END						! End of CLUMBX
ELUDOM
