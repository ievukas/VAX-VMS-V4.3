	.title	QVSS Input and Output
	.ident	/V04-000/

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility: MicroVAX I system bootstrap
;
; Abstract:
;
;	This set of subroutines provides access to the QVSS keyboard and video
;	screen.
;
; Environment:
;
;	These routines assume that the QVSS has been set up properly by the
;	MicroVax I microcode.
;
; Author:
;
;	Len Kawell, D. N. Cutler 28-Dec-83
;
; Modified by:
;
;	V1.0-02 Bill Matthews	9-Jul-84
;
;		Modify for VAX/VMS SYSBOOT and SYSLOAWS1.
;
;	V1.0-01 D. N. Cutler 13-Mar-84
;
;		Add 15/19 inch video screen crt parameters.
;
;--

	.sbttl	Equated Symbols

;	QVSS CONTROL CSRS

QVCSR_CTL	== 0			; CONTROL CSR
QVCSR_CURPOS 	== 2			; CURSOR POSITION (OUTPUT)
QVCSR_MOUSE 	== 4			; MOUSE INPUT (INPUT)
QVCSR_SPARE 	== 6

QVCSR_CRTADDR 	== 8			; CRT CONTROLLER (ADDRESS SELECT)
QVCSR_CRTDATA 	== 10			; CRT CONTROLLER (DATA PORT)
QVCSR_INTDATA 	== 12			; INTERRUPT CONTROLLER (DATA VALUES)
QVCSR_INTCTL 	== 14			; INTERRUPT CONTROLLER (CONTROL FIELD)
QVCSR_URTBUFA 	== 38			; UART DATA BUFFER
QVCSR_URTSTATA 	== 34			; UART STATUS
QVCSR_URTMODEA 	== 32
QVCSR_URTCMDA 	== 36
QVCSR_URTINT 	== 42

;
; QVSS register definitions
;

qvss	= ^x20000000+^o17200		;QVSS I/O register base address
screen	= ^x3C0000   			;screen memory starts at 3 1/4 MB
scan_map = <254*1024>			;scan maps starts at 254KB in memory
column = scan_map-^x20			;cursor column position
row = scan_map-^x1e			;cursor row position


;
; CSR bit definitions
;

qvss$m_mode    == 1             	;19" or 15" mode bit
qvss$m_viden   == 4             	;video enable bit in csr
qvss$m_curfun  == ^o10          	;cursor video function (1 = OR, 0 = AND)
qvss$m_vrdbk   == ^o20          	;enable video readback
qvss$m_tstbit  == ^o40          	;test bit for mouse loopback testing
qvss$m_curon   == ^o200         	;cursor active
qvss$m_msa     == ^o400         	;mouse switch A
qvss$m_msb     == ^o1000        	;mouse switch B
qvss$m_msc     == ^o2000        	;mouse switch C

;
; Keyboard UART values
;

qvss$m_mr1     == ^o23          	;no parity, eight bits
qvss$m_mr2     == 7             	;normal chan mode, one stop bit
qvss$m_csra    == ^o231         	;4800 baud tx, rx rate
qvss$m_cr      == ^o25          	;reset reg pointer, and enable tx,rx

qvss$m_txrdy   == 4             	;transmitter ready bit
qvss$m_rxrdy   == 1             	;receiver ready bit

	.psect	_QVSS_console,long
 

	.sbttl	QVSS Input
;
; This routine is called to read the next character from the QVSS keyboard.
;
; Inputs:
;
;	None.
;
; Outputs:
;
;	r0 - Input character.
;
; Registers r1-sp are preserved.
;
 
qvss$input::				;
10$:	bitw	#qvss$m_rxrdy,@#qvss+qvcsr_urtstata;receiver ready?
	beql	10$			;if eql not ready
	movzbl	@#qvss+qvcsr_urtbufa,r0	;get character scan code
	bsbb	qvss$keydecode		;translate the character
	tstl	r0			;don't pass thru nulls
	beql	10$			;if eql get another character
	rsb				;return

qvss$keydecode::
	cmpb	#^xb3,r0		;allup?
	beql	4$			;if eql yes
	cmpb	#^xae,r0		;shift key?
	beql	20$			;if eql yes
	cmpb	#^xaf,r0		;control key?
	bneq	30$			;if neq no
	cmpl	#qvss$control_key-112,qvss$keytable;control key active?
	bneq	5$			;if neq set control key active
4$:	moval	qvss$key-112,qvss$keytable;get address of translation table
	brb	10$			;join common code
5$:	moval	qvss$control_key-112,qvss$keytable;set address of translation table
10$:	clrl	r0			;indicate need more input
	rsb				;return
 
20$:	cmpl	#qvss$shift_key-112,qvss$keytable;shift key active?
	beql	4$			;if neq set control key active
	moval	qvss$shift_key-112,qvss$keytable;set address of translation table
	brb	10$			;
 
30$:	cmpb	#112,r0			;treat character as null?
	bgtru	10$			;if gtru yes
	movzbl	@qvss$keytable[r0],r0	;get character from translation table
40$:	rsb				;

qvss$keytable::	.long	0


	.sbttl	QVSS Output
;
; This routine is called to output a character to the QVSS.
;
; Inputs:
;
;	r0 - Character to output.
;
; Outputs:
;
;	The character is written to the QVSS video screen.
;
; Registers r0-sp are preserved.
;
 
qvss$output::				;
	pushr	#^M<r1,r2,r3,r4,r5>	;save register r1 to r5
	movl	#screen,r3		;get address of video ram
	movl	#qvss,r4		;get address of qvss csrs
	bsbb	qvss$putchar		;output the character
	popr	#^M<r1,r2,r3,r4,r5>	;restore registers r1 to r5
	rsb				;return

qvss$putchar::
	subl3	#32,r0,r1		;control character?
	blss	10$			;if lss yes
	cmpw	#128,l^column(r3)	;beyond right margin?
	beql	5$			;if eql yes
	mull	#10,r1			;compute offset to character bitmap
	movab	font[r1],r1		;get address of character bitmap
	movzwl	l^row(r3),r2		;get current row
	mull	#128*10,r2		;compute offset to character in row
	movzwl	l^column(r3),-(sp)	;get current column
	addl	(sp)+,r2		;compute starting screen address
	movab	(r3)[r2],r2		;get address in screen buffer
	movb	(r1)+,0*128(r2)		;transfer bitmap to screen buffer
	movb	(r1)+,1*128(r2)		;
	movb	(r1)+,2*128(r2)		;
	movb	(r1)+,3*128(r2)		;
	movb	(r1)+,4*128(r2)		;
	movb	(r1)+,5*128(r2)		;
	movb	(r1)+,6*128(r2)		;
	movb	(r1)+,7*128(r2)		;
	movb	(r1)+,8*128(r2)		;
	movb	(r1)+,9*128(r2)		;
	incw	l^column(r3)		;increment column
5$:	brb	80$			;
 
;
; Control character output
;
 
10$:	cmpb	#^xa,r0			;linefeed?
	beql	40$			;if eql yes
	cmpb	#^x8,r0			;backspace?
	beql	20$			;if eql yes
	cmpb	#^x7,r0			;bell?
	beql	30$			;if eql yes
	cmpb	#^xd,r0			;carriage return?
	bneq	80$			;if neq no
 
;
; Carriage return
;
 
	clrw	l^column(r3)		;clear column number
	brb	80$			;
 
;
; Backspace
;
 
20$:	tstw	l^column(r3)		;already at left margin?
	beql	80$			;if eql yes
	decw	l^column(r3)		;back up one column
	brb	80$			;
 
;
; Bell
;
 
30$:	movw	#^xa7,qvcsr_urtbufa(r4)	;ring bell
	brb	80$			;
 
;
; Linefeed
;
 
40$:	cmpw	#23,l^row(r3)		;bootom of screen?
	beql	50$			;if eql yes
	incw	l^row(r3)		;increment current row
	brb	80$			;
 
50$:	pushl	r0			;save r0
	moval	128*10(r3),r2		;get address of second line
	movc3	#128*10*23,(r2),(r3)	;scroll up
	movc5	#0,(sp),#0,#128*10,(r3)	;clear the bottom line
	popl	r0			;restore r0
80$:	rsb				;return

	.sbttl	Local Data
;
; Character output font table
;
 
font:					;
	.byte	^b00000000		;  
	.byte	^b00000000		;  
	.byte	^b00000000		;  
	.byte	^b00000000		;  
	.byte	^b00000000		;  
	.byte	^b00000000		;  
	.byte	^b00000000		;  
	.byte	^b00000000		;  
	.byte	^b00000000		;  
	.byte	^b00000000		;  
 
	.byte	^b00000000		; !
	.byte	^b00001000		; !
	.byte	^b00001000		; !
	.byte	^b00001000		; !
	.byte	^b00001000		; !
	.byte	^b00001000		; !
	.byte	^b00000000		; !
	.byte	^b00001000		; !
	.byte	^b00000000		; !
	.byte	^b00000000		; !
 
	.byte	^b00000000		; "
	.byte	^b00100100		; "
	.byte	^b00100100		; "
	.byte	^b00100100		; "
	.byte	^b00000000		; "
	.byte	^b00000000		; "
	.byte	^b00000000		; "
	.byte	^b00000000		; "
	.byte	^b00000000		; "
	.byte	^b00000000		; "
 
	.byte	^b00000000		; #
	.byte	^b00010010		; #
	.byte	^b00010010		; #
	.byte	^b00111111		; #
	.byte	^b00010010		; #
	.byte	^b00111111		; #
	.byte	^b00010010		; #
	.byte	^b00010010		; #
	.byte	^b00000000		; #
	.byte	^b00000000		; #
 
	.byte	^b00000000		; $
	.byte	^b00001000		; $
	.byte	^b00111110		; $
	.byte	^b00001001		; $
	.byte	^b00111110		; $
	.byte	^b01001000		; $
	.byte	^b00111110		; $
	.byte	^b00001000		; $
	.byte	^b00000000		; $
	.byte	^b00000000		; $
 
	.byte	^b00000000		; %
	.byte	^b01000011		; %
	.byte	^b00100011		; %
	.byte	^b00010000		; %
	.byte	^b00001000		; %
	.byte	^b00000100		; %
	.byte	^b01100010		; %
	.byte	^b01100001		; %
	.byte	^b00000000		; %
	.byte	^b00000000		; %
 
	.byte	^b00000000		; &
	.byte	^b00001110		; &
	.byte	^b00010001		; &
	.byte	^b00010001		; &
	.byte	^b00001110		; &
	.byte	^b01010001		; &
	.byte	^b00100001		; &
	.byte	^b01011110		; &
	.byte	^b00000000		; &
	.byte	^b00000000		; &
 
	.byte	^b00000000		; '
	.byte	^b00011000		; '
	.byte	^b00001000		; '
	.byte	^b00000100		; '
	.byte	^b00000000		; '
	.byte	^b00000000		; '
	.byte	^b00000000		; '
	.byte	^b00000000		; '
	.byte	^b00000000		; '
	.byte	^b00000000		; '
 
	.byte	^b00000000		; (
	.byte	^b00010000		; (
	.byte	^b00001000		; (
	.byte	^b00000100		; (
	.byte	^b00000100		; (
	.byte	^b00000100		; (
	.byte	^b00001000		; (
	.byte	^b00010000		; (
	.byte	^b00000000		; (
	.byte	^b00000000		; (
 
	.byte	^b00000000		; )
	.byte	^b00000100		; )
	.byte	^b00001000		; )
	.byte	^b00010000		; )
	.byte	^b00010000		; )
	.byte	^b00010000		; )
	.byte	^b00001000		; )
	.byte	^b00000100		; )
	.byte	^b00000000		; )
	.byte	^b00000000		; )
 
	.byte	^b00000000		; *
	.byte	^b00000000		; *
	.byte	^b00100010		; *
	.byte	^b00010100		; *
	.byte	^b01111111		; *
	.byte	^b00010100		; *
	.byte	^b00100010		; *
	.byte	^b00000000		; *
	.byte	^b00000000		; *
	.byte	^b00000000		; *
 
	.byte	^b00000000		; +
	.byte	^b00000000		; +
	.byte	^b00001000		; +
	.byte	^b00001000		; +
	.byte	^b01111111		; +
	.byte	^b00001000		; +
	.byte	^b00001000		; +
	.byte	^b00000000		; +
	.byte	^b00000000		; +
	.byte	^b00000000		; +
 
	.byte	^b00000000		; ,
	.byte	^b00000000		; ,
	.byte	^b00000000		; ,
	.byte	^b00000000		; ,
	.byte	^b00000000		; ,
	.byte	^b00000000		; ,
	.byte	^b00001100		; ,
	.byte	^b00000100		; ,
	.byte	^b00000010		; ,
	.byte	^b00000000		; ,
 
	.byte	^b00000000		; -
	.byte	^b00000000		; -
	.byte	^b00000000		; -
	.byte	^b00000000		; -
	.byte	^b01111111		; -
	.byte	^b00000000		; -
	.byte	^b00000000		; -
	.byte	^b00000000		; -
	.byte	^b00000000		; -
	.byte	^b00000000		; -
 
	.byte	^b00000000		; .
	.byte	^b00000000		; .
	.byte	^b00000000		; .
	.byte	^b00000000		; .
	.byte	^b00000000		; .
	.byte	^b00000000		; .
	.byte	^b00001100		; .
	.byte	^b00001100		; .
	.byte	^b00000000		; .
	.byte	^b00000000		; .
 
	.byte	^b00000000		; /
	.byte	^b01000000		; /
	.byte	^b00100000		; /
	.byte	^b00010000		; /
	.byte	^b00001000		; /
	.byte	^b00000100		; /
	.byte	^b00000010		; /
	.byte	^b00000001		; /
	.byte	^b00000000		; /
	.byte	^b00000000		; /
 
	.byte	^b00000000		; 0
	.byte	^b00011100		; 0
	.byte	^b00100010		; 0
	.byte	^b01010001		; 0
	.byte	^b01001001		; 0
	.byte	^b01000101		; 0
	.byte	^b00100010		; 0
	.byte	^b00011100		; 0
	.byte	^b00000000		; 0
	.byte	^b00000000		; 0
 
	.byte	^b00000000		; 1
	.byte	^b00001000		; 1
	.byte	^b00001100		; 1
	.byte	^b00001010		; 1
	.byte	^b00001000		; 1
	.byte	^b00001000		; 1
	.byte	^b00001000		; 1
	.byte	^b00111110		; 1
	.byte	^b00000000		; 1
	.byte	^b00000000		; 1
 
	.byte	^b00000000		; 2
	.byte	^b00011110		; 2
	.byte	^b00100001		; 2
	.byte	^b01000000		; 2
	.byte	^b00111000		; 2
	.byte	^b00000110		; 2
	.byte	^b00000001		; 2
	.byte	^b01111111		; 2
	.byte	^b00000000		; 2
	.byte	^b00000000		; 2
 
	.byte	^b00000000		; 3
	.byte	^b01111111		; 3
	.byte	^b00100000		; 3
	.byte	^b00010000		; 3
	.byte	^b00111000		; 3
	.byte	^b01000000		; 3
	.byte	^b01000001		; 3
	.byte	^b00111110		; 3
	.byte	^b00000000		; 3
	.byte	^b00000000		; 3
 
	.byte	^b00000000		; 4
	.byte	^b00010000		; 4
	.byte	^b00011000		; 4
	.byte	^b00010100		; 4
	.byte	^b00010010		; 4
	.byte	^b01111111		; 4
	.byte	^b00010000		; 4
	.byte	^b00010000		; 4
	.byte	^b00000000		; 4
	.byte	^b00000000		; 4
 
	.byte	^b00000000		; 5
	.byte	^b01111111		; 5
	.byte	^b00000001		; 5
	.byte	^b00111101		; 5
	.byte	^b01000011		; 5
	.byte	^b01000000		; 5
	.byte	^b01000001		; 5
	.byte	^b00111110		; 5
	.byte	^b00000000		; 5
	.byte	^b00000000		; 5
 
	.byte	^b00000000		; 6
	.byte	^b00111100		; 6
	.byte	^b01000010		; 6
	.byte	^b00000001		; 6
	.byte	^b00111101		; 6
	.byte	^b01000011		; 6
	.byte	^b01000010		; 6
	.byte	^b00111100		; 6
	.byte	^b00000000		; 6
	.byte	^b00000000		; 6
 
	.byte	^b00000000		; 7
	.byte	^b01111111		; 7
	.byte	^b01000000		; 7
	.byte	^b00100000		; 7
	.byte	^b00010000		; 7
	.byte	^b00001000		; 7
	.byte	^b00000100		; 7
	.byte	^b00000010		; 7
	.byte	^b00000000		; 7
	.byte	^b00000000		; 7
 
	.byte	^b00000000		; 8
	.byte	^b00111110		; 8
	.byte	^b01000001		; 8
	.byte	^b01000001		; 8
	.byte	^b00111110		; 8
	.byte	^b01000001		; 8
	.byte	^b01000001		; 8
	.byte	^b00111110		; 8
	.byte	^b00000000		; 8
	.byte	^b00000000		; 8
 
	.byte	^b00000000		; 9
	.byte	^b00011110		; 9
	.byte	^b00100001		; 9
	.byte	^b01100001		; 9
	.byte	^b01011110		; 9
	.byte	^b01000000		; 9
	.byte	^b00100001		; 9
	.byte	^b00011110		; 9
	.byte	^b00000000		; 9
	.byte	^b00000000		; 9
 
	.byte	^b00000000		; :
	.byte	^b00000000		; :
	.byte	^b00001100		; :
	.byte	^b00001100		; :
	.byte	^b00000000		; :
	.byte	^b00000000		; :
	.byte	^b00001100		; :
	.byte	^b00001100		; :
	.byte	^b00000000		; :
	.byte	^b00000000		; :
 
	.byte	^b00000000		; ;
	.byte	^b00000000		; ;
	.byte	^b00001100		; ;
	.byte	^b00001100		; ;
	.byte	^b00000000		; ;
	.byte	^b00000000		; ;
	.byte	^b00001100		; ;
	.byte	^b00000100		; ;
	.byte	^b00000010		; ;
	.byte	^b00000000		; ;
 
	.byte	^b00000000		; <
	.byte	^b01000000		; <
	.byte	^b00010000		; <
	.byte	^b00000100		; <
	.byte	^b00000001		; <
	.byte	^b00000100		; <
	.byte	^b00010000		; <
	.byte	^b01000000		; <
	.byte	^b00000000		; <
	.byte	^b00000000		; <
 
	.byte	^b00000000		; =
	.byte	^b00000000		; =
	.byte	^b00000000		; =
	.byte	^b01111111		; =
	.byte	^b00000000		; =
	.byte	^b01111111		; =
	.byte	^b00000000		; =
	.byte	^b00000000		; =
	.byte	^b00000000		; =
	.byte	^b00000000		; =
 
	.byte	^b00000000		; >
	.byte	^b00000001		; >
	.byte	^b00000100		; >
	.byte	^b00010000		; >
	.byte	^b01000000		; >
	.byte	^b00010000		; >
	.byte	^b00000100		; >
	.byte	^b00000001		; >
	.byte	^b00000000		; >
	.byte	^b00000000		; >
 
	.byte	^b00000000		; ?
	.byte	^b00111110		; ?
	.byte	^b01000001		; ?
	.byte	^b00110000		; ?
	.byte	^b00001000		; ?
	.byte	^b00001000		; ?
	.byte	^b00000000		; ?
	.byte	^b00001000		; ?
	.byte	^b00000000		; ?
	.byte	^b00000000		; ?
 
	.byte	^b00000000		; @
	.byte	^b00111110		; @
	.byte	^b01000001		; @
	.byte	^b01010001		; @
	.byte	^b01001001		; @
	.byte	^b00111001		; @
	.byte	^b00000001		; @
	.byte	^b00111110		; @
	.byte	^b00000000		; @
	.byte	^b00000000		; @
 
	.byte	^b00000000		; A
	.byte	^b00001000		; A
	.byte	^b00010100		; A
	.byte	^b00100010		; A
	.byte	^b01000001		; A
	.byte	^b01111111		; A
	.byte	^b01000001		; A
	.byte	^b01000001		; A
	.byte	^b00000000		; A
	.byte	^b00000000		; A
 
	.byte	^b00000000		; B
	.byte	^b00111111		; B
	.byte	^b01000010		; B
	.byte	^b01000010		; B
	.byte	^b00111110		; B
	.byte	^b01000010		; B
	.byte	^b01000010		; B
	.byte	^b00111111		; B
	.byte	^b00000000		; B
	.byte	^b00000000		; B
 
	.byte	^b00000000		; C
	.byte	^b00111100		; C
	.byte	^b01000010		; C
	.byte	^b00000001		; C
	.byte	^b00000001		; C
	.byte	^b00000001		; C
	.byte	^b01000010		; C
	.byte	^b00111100		; C
	.byte	^b00000000		; C
	.byte	^b00000000		; C
 
	.byte	^b00000000		; D
	.byte	^b00011111		; D
	.byte	^b00100010		; D
	.byte	^b01000010		; D
	.byte	^b01000010		; D
	.byte	^b01000010		; D
	.byte	^b00100010		; D
	.byte	^b00011111		; D
	.byte	^b00000000		; D
	.byte	^b00000000		; D
 
	.byte	^b00000000		; E
	.byte	^b01111111		; E
	.byte	^b00000001		; E
	.byte	^b00000001		; E
	.byte	^b00011111		; E
	.byte	^b00000001		; E
	.byte	^b00000001		; E
	.byte	^b01111111		; E
	.byte	^b00000000		; E
	.byte	^b00000000		; E
 
	.byte	^b00000000		; F
	.byte	^b01111111		; F
	.byte	^b00000001		; F
	.byte	^b00000001		; F
	.byte	^b00011111		; F
	.byte	^b00000001		; F
	.byte	^b00000001		; F
	.byte	^b00000001		; F
	.byte	^b00000000		; F
	.byte	^b00000000		; F
 
	.byte	^b00000000		; G
	.byte	^b00111100		; G
	.byte	^b01000010		; G
	.byte	^b00000001		; G
	.byte	^b00000001		; G
	.byte	^b01110001		; G
	.byte	^b01000010		; G
	.byte	^b00111100		; G
	.byte	^b00000000		; G
	.byte	^b00000000		; G
 
	.byte	^b00000000		; H
	.byte	^b01000001		; H
	.byte	^b01000001		; H
	.byte	^b01000001		; H
	.byte	^b01111111		; H
	.byte	^b01000001		; H
	.byte	^b01000001		; H
	.byte	^b01000001		; H
	.byte	^b00000000		; H
	.byte	^b00000000		; H
 
	.byte	^b00000000		; I
	.byte	^b00111110		; I
	.byte	^b00001000		; I
	.byte	^b00001000		; I
	.byte	^b00001000		; I
	.byte	^b00001000		; I
	.byte	^b00001000		; I
	.byte	^b00111110		; I
	.byte	^b00000000		; I
	.byte	^b00000000		; I
 
	.byte	^b00000000		; J
	.byte	^b01110000		; J
	.byte	^b00100000		; J
	.byte	^b00100000		; J
	.byte	^b00100000		; J
	.byte	^b00100000		; J
	.byte	^b00100001		; J
	.byte	^b00011110		; J
	.byte	^b00000000		; J
	.byte	^b00000000		; J
 
	.byte	^b00000000		; K
	.byte	^b01000001		; K
	.byte	^b00110001		; K
	.byte	^b00001101		; K
	.byte	^b00000011		; K
	.byte	^b00001101		; K
	.byte	^b00110001		; K
	.byte	^b01000001		; K
	.byte	^b00000000		; K
	.byte	^b00000000		; K
 
	.byte	^b00000000		; L
	.byte	^b00000001		; L
	.byte	^b00000001		; L
	.byte	^b00000001		; L
	.byte	^b00000001		; L
	.byte	^b00000001		; L
	.byte	^b00000001		; L
	.byte	^b01111111		; L
	.byte	^b00000000		; L
	.byte	^b00000000		; L
 
	.byte	^b00000000		; M
	.byte	^b01000001		; M
	.byte	^b01100011		; M
	.byte	^b01010101		; M
	.byte	^b01001001		; M
	.byte	^b01000001		; M
	.byte	^b01000001		; M
	.byte	^b01000001		; M
	.byte	^b00000000		; M
	.byte	^b00000000		; M
 
	.byte	^b00000000		; N
	.byte	^b01000001		; N
	.byte	^b01000011		; N
	.byte	^b01000101		; N
	.byte	^b01001001		; N
	.byte	^b01010001		; N
	.byte	^b01100001		; N
	.byte	^b01000001		; N
	.byte	^b00000000		; N
	.byte	^b00000000		; N
 
	.byte	^b00000000		; O
	.byte	^b00111110		; O
	.byte	^b01000001		; O
	.byte	^b01000001		; O
	.byte	^b01000001		; O
	.byte	^b01000001		; O
	.byte	^b01000001		; O
	.byte	^b00111110		; O
	.byte	^b00000000		; O
	.byte	^b00000000		; O
 
	.byte	^b00000000		; P
	.byte	^b00111111		; P
	.byte	^b01000001		; P
	.byte	^b01000001		; P
	.byte	^b00111111		; P
	.byte	^b00000001		; P
	.byte	^b00000001		; P
	.byte	^b00000001		; P
	.byte	^b00000000		; P
	.byte	^b00000000		; P
 
	.byte	^b00000000		; Q
	.byte	^b00111110		; Q
	.byte	^b01000001		; Q
	.byte	^b01000001		; Q
	.byte	^b01000001		; Q
	.byte	^b01010001		; Q
	.byte	^b00100001		; Q
	.byte	^b01011110		; Q
	.byte	^b00000000		; Q
	.byte	^b00000000		; Q
 
	.byte	^b00000000		; R
	.byte	^b00111111		; R
	.byte	^b01000001		; R
	.byte	^b01000001		; R
	.byte	^b00111111		; R
	.byte	^b00010001		; R
	.byte	^b00100001		; R
	.byte	^b01000001		; R
	.byte	^b00000000		; R
	.byte	^b00000000		; R
 
	.byte	^b00000000		; S
	.byte	^b00111110		; S
	.byte	^b01000001		; S
	.byte	^b00000001		; S
	.byte	^b00111110		; S
	.byte	^b01000000		; S
	.byte	^b01000001		; S
	.byte	^b00111110		; S
	.byte	^b00000000		; S
	.byte	^b00000000		; S
 
	.byte	^b00000000		; T
	.byte	^b01111111		; T
	.byte	^b00001000		; T
	.byte	^b00001000		; T
	.byte	^b00001000		; T
	.byte	^b00001000		; T
	.byte	^b00001000		; T
	.byte	^b00001000		; T
	.byte	^b00000000		; T
	.byte	^b00000000		; T
 
	.byte	^b00000000		; U
	.byte	^b01000001		; U
	.byte	^b01000001		; U
	.byte	^b01000001		; U
	.byte	^b01000001		; U
	.byte	^b01000001		; U
	.byte	^b01000001		; U
	.byte	^b00111110		; U
	.byte	^b00000000		; U
	.byte	^b00000000		; U
 
	.byte	^b00000000		; V
	.byte	^b01000001		; V
	.byte	^b01000001		; V
	.byte	^b00100010		; V
	.byte	^b00100010		; V
	.byte	^b00010100		; V
	.byte	^b00010100		; V
	.byte	^b00001000		; V
	.byte	^b00000000		; V
	.byte	^b00000000		; V
 
	.byte	^b00000000		; W
	.byte	^b01000001		; W
	.byte	^b01000001		; W
	.byte	^b01000001		; W
	.byte	^b01001001		; W
	.byte	^b01001001		; W
	.byte	^b01010101		; W
	.byte	^b00100010		; W
	.byte	^b00000000		; W
	.byte	^b00000000		; W
 
	.byte	^b00000000		; X
	.byte	^b01000001		; X
	.byte	^b00100010		; X
	.byte	^b00010100		; X
	.byte	^b00001000		; X
	.byte	^b00010100		; X
	.byte	^b00100010		; X
	.byte	^b01000001		; X
	.byte	^b00000000		; X
	.byte	^b00000000		; X
 
	.byte	^b00000000		; Y
	.byte	^b01000001		; Y
	.byte	^b00100010		; Y
	.byte	^b00010100		; Y
	.byte	^b00001000		; Y
	.byte	^b00001000		; Y
	.byte	^b00001000		; Y
	.byte	^b00001000		; Y
	.byte	^b00000000		; Y
	.byte	^b00000000		; Y
 
	.byte	^b00000000		; Z
	.byte	^b01111111		; Z
	.byte	^b00100000		; Z
	.byte	^b00010000		; Z
	.byte	^b00001000		; Z
	.byte	^b00000100		; Z
	.byte	^b00000010		; Z
	.byte	^b01111111		; Z
	.byte	^b00000000		; Z
	.byte	^b00000000		; Z
 
	.byte	^b00000000		; [
	.byte	^b00111100		; [
	.byte	^b00001100		; [
	.byte	^b00001100		; [
	.byte	^b00001100		; [
	.byte	^b00001100		; [
	.byte	^b00001100		; [
	.byte	^b00111100		; [
	.byte	^b00000000		; [
	.byte	^b00000000		; [
 
	.byte	^b00000000		; \
	.byte	^b00000001		; \
	.byte	^b00000010		; \
	.byte	^b00000100		; \
	.byte	^b00001000		; \
	.byte	^b00010000		; \
	.byte	^b00100000		; \
	.byte	^b01000000		; \
	.byte	^b00000000		; \
	.byte	^b00000000		; \
 
	.byte	^b00000000		; ]
	.byte	^b00011110		; ]
	.byte	^b00011000		; ]
	.byte	^b00011000		; ]
	.byte	^b00011000		; ]
	.byte	^b00011000		; ]
	.byte	^b00011000		; ]
	.byte	^b00011110		; ]
	.byte	^b00000000		; ]
	.byte	^b00000000		; ]
 
	.byte	^b00000000		; ^
	.byte	^b00001000		; ^
	.byte	^b00010100		; ^
	.byte	^b00100010		; ^
	.byte	^b01000001		; ^
	.byte	^b00000000		; ^
	.byte	^b00000000		; ^
	.byte	^b00000000		; ^
	.byte	^b00000000		; ^
	.byte	^b00000000		; ^
 
	.byte	^b00000000		; _
	.byte	^b00000000		; _
	.byte	^b00000000		; _
	.byte	^b00000000		; _
	.byte	^b00000000		; _
	.byte	^b00000000		; _
	.byte	^b00000000		; _
	.byte	^b00000000		; _
	.byte	^b11111111		; _
	.byte	^b00000000		; _
 
	.byte	^b00000000		; `
	.byte	^b00001100		; `
	.byte	^b00001000		; `
	.byte	^b00010000		; `
	.byte	^b00000000		; `
	.byte	^b00000000		; `
	.byte	^b00000000		; `
	.byte	^b00000000		; `
	.byte	^b00000000		; `
	.byte	^b00000000		; `
 
	.byte	^b00000000		; a
	.byte	^b00000000		; a
	.byte	^b00000000		; a
	.byte	^b00111110		; a
	.byte	^b01000000		; a
	.byte	^b01111110		; a
	.byte	^b01000001		; a
	.byte	^b01111110		; a
	.byte	^b00000000		; a
	.byte	^b00000000		; a
 
	.byte	^b00000000		; b
	.byte	^b00000001		; b
	.byte	^b00000001		; b
	.byte	^b00111101		; b
	.byte	^b01000011		; b
	.byte	^b01000001		; b
	.byte	^b01000011		; b
	.byte	^b00111101		; b
	.byte	^b00000000		; b
	.byte	^b00000000		; b
 
	.byte	^b00000000		; c
	.byte	^b00000000		; c
	.byte	^b00000000		; c
	.byte	^b00111100		; c
	.byte	^b01000010		; c
	.byte	^b00000001		; c
	.byte	^b00000010		; c
	.byte	^b01111100		; c
	.byte	^b00000000		; c
	.byte	^b00000000		; c
 
	.byte	^b00000000		; d
	.byte	^b01000000		; d
	.byte	^b01000000		; d
	.byte	^b01011110		; d
	.byte	^b01100001		; d
	.byte	^b01000001		; d
	.byte	^b01100001		; d
	.byte	^b01011110		; d
	.byte	^b00000000		; d
	.byte	^b00000000		; d
 
	.byte	^b00000000		; e
	.byte	^b00000000		; e
	.byte	^b00000000		; e
	.byte	^b00111110		; e
	.byte	^b01000001		; e
	.byte	^b01111111		; e
	.byte	^b00000001		; e
	.byte	^b01111110		; e
	.byte	^b00000000		; e
	.byte	^b00000000		; e
 
	.byte	^b00000000		; f
	.byte	^b00111000		; f
	.byte	^b01000100		; f
	.byte	^b00000100		; f
	.byte	^b00011111		; f
	.byte	^b00000100		; f
	.byte	^b00000100		; f
	.byte	^b00000100		; f
	.byte	^b00000000		; f
	.byte	^b00000000		; f
 
	.byte	^b00000000		; g
	.byte	^b00000000		; g
	.byte	^b01000000		; g
	.byte	^b01011110		; g
	.byte	^b00100001		; g
	.byte	^b00100001		; g
	.byte	^b00111110		; g
	.byte	^b00100000		; g
	.byte	^b00100001		; g
	.byte	^b00011110		; g
 
	.byte	^b00000000		; h
	.byte	^b00000001		; h
	.byte	^b00000001		; h
	.byte	^b00111101		; h
	.byte	^b01000011		; h
	.byte	^b01000001		; h
	.byte	^b01000001		; h
	.byte	^b01000001		; h
	.byte	^b00000000		; h
	.byte	^b00000000		; h
 
	.byte	^b00000000		; i
	.byte	^b00001000		; i
	.byte	^b00000000		; i
	.byte	^b00001100		; i
	.byte	^b00001000		; i
	.byte	^b00001000		; i
	.byte	^b00001000		; i
	.byte	^b00111110		; i
	.byte	^b00000000		; i
	.byte	^b00000000		; i
 
	.byte	^b00000000		; j
	.byte	^b00100000		; j
	.byte	^b00000000		; j
	.byte	^b00100000		; j
	.byte	^b00100000		; j
	.byte	^b00100000		; j
	.byte	^b00100000		; j
	.byte	^b00100001		; j
	.byte	^b00100001		; j
	.byte	^b00011110		; j
 
	.byte	^b00000000		; k
	.byte	^b00000001		; k
	.byte	^b00000001		; k
	.byte	^b00010001		; k
	.byte	^b00001001		; k
	.byte	^b00000111		; k
	.byte	^b00010001		; k
	.byte	^b01000001		; k
	.byte	^b00000000		; k
	.byte	^b00000000		; k
 
	.byte	^b00000000		; l
	.byte	^b00001100		; l
	.byte	^b00001000		; l
	.byte	^b00001000		; l
	.byte	^b00001000		; l
	.byte	^b00001000		; l
	.byte	^b00001000		; l
	.byte	^b00011100		; l
	.byte	^b00000000		; l
	.byte	^b00000000		; l
 
	.byte	^b00000000		; m
	.byte	^b00000000		; m
	.byte	^b00000000		; m
	.byte	^b00100011		; m
	.byte	^b01010101		; m
	.byte	^b01001001		; m
	.byte	^b01001001		; m
	.byte	^b01000001		; m
	.byte	^b00000000		; m
	.byte	^b00000000		; m
 
	.byte	^b00000000		; n
	.byte	^b00000000		; n
	.byte	^b00000000		; n
	.byte	^b00111101		; n
	.byte	^b01000011		; n
	.byte	^b01000001		; n
	.byte	^b01000001		; n
	.byte	^b01000001		; n
	.byte	^b00000000		; n
	.byte	^b00000000		; n
 
	.byte	^b00000000		; o
	.byte	^b00000000		; o
	.byte	^b00000000		; o
	.byte	^b00111110		; o
	.byte	^b01000001		; o
	.byte	^b01000001		; o
	.byte	^b01000001		; o
	.byte	^b00111110		; o
	.byte	^b00000000		; o
	.byte	^b00000000		; o
 
	.byte	^b00000000		; p
	.byte	^b00000000		; p
	.byte	^b00000000		; p
	.byte	^b00111101		; p
	.byte	^b01000011		; p
	.byte	^b01000011		; p
	.byte	^b00111101		; p
	.byte	^b00000001		; p
	.byte	^b00000001		; p
	.byte	^b00000001		; p
 
	.byte	^b00000000		; q
	.byte	^b00000000		; q
	.byte	^b00000000		; q
	.byte	^b01011110		; q
	.byte	^b01100001		; q
	.byte	^b01100001		; q
	.byte	^b01011110		; q
	.byte	^b01000000		; q
	.byte	^b01000000		; q
	.byte	^b01000000		; q
 
	.byte	^b00000000		; r
	.byte	^b00000000		; r
	.byte	^b00000000		; r
	.byte	^b00111001		; r
	.byte	^b01000110		; r
	.byte	^b00000010		; r
	.byte	^b00000010		; r
	.byte	^b00000010		; r
	.byte	^b00000000		; r
	.byte	^b00000000		; r
 
	.byte	^b00000000		; s
	.byte	^b00000000		; s
	.byte	^b00000000		; s
	.byte	^b00111110		; s
	.byte	^b00000001		; s
	.byte	^b00111110		; s
	.byte	^b01000000		; s
	.byte	^b00111111		; s
	.byte	^b00000000		; s
	.byte	^b00000000		; s
 
	.byte	^b00000000		; t
	.byte	^b00000100		; t
	.byte	^b00000100		; t
	.byte	^b00011111		; t
	.byte	^b00000100		; t
	.byte	^b00000100		; t
	.byte	^b00100100		; t
	.byte	^b00011000		; t
	.byte	^b00000000		; t
	.byte	^b00000000		; t
 
	.byte	^b00000000		; u
	.byte	^b00000000		; u
	.byte	^b00000000		; u
	.byte	^b00100001		; u
	.byte	^b00100001		; u
	.byte	^b00100001		; u
	.byte	^b00100001		; u
	.byte	^b01011110		; u
	.byte	^b00000000		; u
	.byte	^b00000000		; u
 
	.byte	^b00000000		; v
	.byte	^b00000000		; v
	.byte	^b00000000		; v
	.byte	^b01000001		; v
	.byte	^b01000001		; v
	.byte	^b00100010		; v
	.byte	^b00010100		; v
	.byte	^b00001000		; v
	.byte	^b00000000		; v
	.byte	^b00000000		; v
 
	.byte	^b00000000		; w
	.byte	^b00000000		; w
	.byte	^b00000000		; w
	.byte	^b01000001		; w
	.byte	^b01000001		; w
	.byte	^b01001001		; w
	.byte	^b01010101		; w
	.byte	^b00100010		; w
	.byte	^b00000000		; w
	.byte	^b00000000		; w
 
	.byte	^b00000000		; x
	.byte	^b00000000		; x
	.byte	^b00000000		; x
	.byte	^b00100001		; x
	.byte	^b00010010		; x
	.byte	^b00001100		; x
	.byte	^b00010010		; x
	.byte	^b00100001		; x
	.byte	^b00000000		; x
	.byte	^b00000000		; x
 
	.byte	^b00000000		; y
	.byte	^b00000000		; y
	.byte	^b00000000		; y
	.byte	^b00100001		; y
	.byte	^b00100001		; y
	.byte	^b00110001		; y
	.byte	^b00101110		; y
	.byte	^b00100000		; y
	.byte	^b00100001		; y
	.byte	^b00011110		; y
 
	.byte	^b00000000		; z
	.byte	^b00000000		; z
	.byte	^b00000000		; z
	.byte	^b01111111		; z
	.byte	^b00100000		; z
	.byte	^b00011000		; z
	.byte	^b00000100		; z
	.byte	^b01111111		; z
	.byte	^b00000000		; z
	.byte	^b00000000		; z
 
	.byte	^b00000000		; {
	.byte	^b01110000		; {
	.byte	^b00001000		; {
	.byte	^b00001000		; {
	.byte	^b00000110		; {
	.byte	^b00001000		; {
	.byte	^b00001000		; {
	.byte	^b01110000		; {
	.byte	^b00000000		; {
	.byte	^b00000000		; {
 
	.byte	^b00000000		; |
	.byte	^b00001000		; |
	.byte	^b00001000		; |
	.byte	^b00001000		; |
	.byte	^b00000000		; |
	.byte	^b00000000		; |
	.byte	^b00001000		; |
	.byte	^b00001000		; |
	.byte	^b00001000		; |
	.byte	^b00000000		; |
 
	.byte	^b00000000		; }
	.byte	^b00000111		; }
	.byte	^b00001000		; }
	.byte	^b00001000		; }
	.byte	^b00110000		; }
	.byte	^b00001000		; }
	.byte	^b00001000		; }
	.byte	^b00000111		; }
	.byte	^b00000000		; }
	.byte	^b00000000		; }
 
	.byte	^b00000000		; ~
	.byte	^b01000110		; ~
	.byte	^b01001001		; ~
	.byte	^b00110001		; ~
	.byte	^b00000000		; ~
	.byte	^b00000000		; ~
	.byte	^b00000000		; ~
	.byte	^b00000000		; ~
	.byte	^b00000000		; ~
	.byte	^b00000000		; ~

;
; LK201 scan code to ASCII conversion table
;

qvss$key::					;
	.byte	0,^x1b,^x08,^x0a,0,0,0,0 ;70-77
	.byte	0,0,0,0,0,0,0,0		;78-7f
	.byte	0,0,0,0,0,0,0,0		;80-87
	.byte	0,0,0,0,0,0,0,0		;88-8f
	.byte	0,0,^a'0',0,^a'.',^x0d,^a'1',^a'2' ;90-97
	.ascii	/3456,789/		;98-9f
	.byte	^a'-',0,0,0,0,0,0,0	;a0-a7
	.byte	0,0,0,0,0,0,^xae,^xaf	;a8-af
	.byte	0,0,0,0,0,0,0,0		;b0-b7
	.byte	0,0,0,0,^x7f,^x0d,^x09,^a'`' ;b8-bf
	.ascii	?1qaz 2wsx< 3edc 4rfv  5tgb 6yhn ? ;c0-df
	.ascii	?7ujm 8ik, 9ol. 0p ;/ =]\ -['    ? ;e0-ff
 
qvss$shift_key:				;
	.byte	0,^x1b,^x08,^x0a,0,0,0,0 ;70-77
	.byte	0,0,0,0,0,0,0,0		;78-7f
	.byte	0,0,0,0,0,0,0,0		;80-87
	.byte	0,0,0,0,0,0,0,0		;88-8f
	.byte	0,0,^a'0',0,^a'.',^x0d,^a'1',^a'2' ;90-97
	.ascii	/3456,789/		;98-9f
	.byte	^a'-',0,0,0,0,0,0,0	;a0-a7
	.byte	0,0,0,0,0,0,^xae,^xaf	;a8-af
	.byte	0,0,0,0,0,0,0,0		;b0-b7
	.byte	0,0,0,0,^x7f,^x0d,^x09,^a'~' ;b8-bf
	.ascii	/!QAZ @WSX> #EDC $RFV  %TGB ^YHN / ;c0-df
	.ascii	/&UJM *IK, (OL. )P :? +}| _{"    / ;e0-ff
 
qvss$control_key:			;
	.byte	0,^x1b,^x08,^x0a,0,0,0,0 ;70-77
	.byte	0,0,0,0,0,0,0,0		;78-7f
	.byte	0,0,0,0,0,0,0,0		;80-87
	.byte	0,0,0,0,0,0,0,0		;88-8f
	.byte	0,0,^a'0',0,^a'.',^x0d,^a'1',^a'2' ;90-97
	.ascii	/3456,789/		;98-9f
	.byte	^a'-',0,0,0,0,0,0,0	;a0-a7
	.byte	0,0,0,0,0,0,^xae,^xaf	;a8-af
	.byte	0,0,0,0,0,0,0,0		;b0-b7
	.byte	0,0,0,0,^x7f,^x0d,^x09,^a'`' ;b8-bf
	.byte	0,^x11,1,^x1a,0,0,^x17,^x13 ;c0-c7
	.byte	^x18,0,0,0,^x05,^x44,^x43,0 ;c8-cf
	.byte	0,^x12,^x06,^x16,0,0,0,^x14 ;d0-d7
	.byte	^x07,^x02,0,0,^x19,^x08,^x0e,0 ;d8-df
	.byte	0,^x15,^x0a,^x0d,0,0,^x09,^x0b ;e0-e7
	.byte	0,0,0,^x0f,^x0c,0,0,0	;e8-ef
	.byte	^x10,0,0,0,0,0,0,0	;f0-f7
	.byte	0,0,0,0,0,0,0,0		;f8-ff


	.END
