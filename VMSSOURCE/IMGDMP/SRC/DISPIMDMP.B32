%TITLE ' Display image dump data'
MODULE DISPIMDMP ( LANGUAGE (BLISS32),
		  IDENT = 'V04-000') =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  Image Dump
!
! ABSTRACT:
!	This module contains routines for analyzing and displaying information
!	about image dumps.
!
! ENVIRONMENT:
!
!	VAX/VMS Operating System
!
!--
!
!
! AUTHOR:  Wayne M. Cardoza,	 CREATION DATE:  10-Feb-1983
!
! MODIFIED BY:
!
!	V03-005	WMC0005		Wayne Cardoza	04-Jun-1984
!		Display patch data only when relevant.
!
!	V03-004	WMC0004		Wayne Cardoza	01-Sep-1983
!		Add identifying data for the original image.
!
!	V03-003	WMC0003		Wayne Cardoza	06-Jul-1983
!		Support /OUTPUT.
!
!	V03-002	WMC0002		Wayne Cardoza	30-Apr-1983
!		Add new JIB items.
!
!	V03-001	WMC0001		Wayne Cardoza	20-Apr-1983
!		Misc formatting changes.
!
!**

!
LIBRARY 'SYS$LIBRARY:LIB';
REQUIRE 'LIB$:IMGDMPDEF.R32';
!
!
!
OWN
    OUTFAB	: $FAB (FNM = 'SYS$OUTPUT',	! FAB for SYS$OUTPUT
			FAC = <GET,PUT>),
    OUTRAB	: $RAB (FAB = OUTFAB),
    PROMPT	: VECTOR[%CHARCOUNT ('Press RETURN to continue: ') + 2,BYTE]
		   INITIAL(BYTE(13,10,'Press RETURN to continue: ')),
    ANSWER	: VECTOR[4,BYTE],		! Buffer to hold responses
    INFAB	: $FAB (FNM = 'SYS$INPUT',	! FAB for SYS$INPUT
			FAC = <GET,PUT>),
    INRAB	: $RAB (FAB = INFAB,
			PBF = PROMPT,
			PSZ = %CHARCOUNT ('Press RETURN to continue: ') + 2,
			UBF = ANSWER,
			USZ = 4,
			ROP = PMT),
    DSPBUF  : VECTOR[512,BYTE],			! Buffer for text to be displayed
    DSPDESC : VECTOR[2] INITIAL(512,DSPBUF),
    DSPLEN;
!
!
!
EXTERNAL
    IMGHDR	: BLOCK[,BYTE],		! Image header from the dump (first block)
    MISC 	: BLOCK[,BYTE],		! Buffer holding the misc data block
    MISC_VA	: BLOCK[,BYTE];		! VA's of misc P1 space
!
!
!
EXTERNAL ROUTINE
    CLI$GET_VALUE,
    CLI$PRESENT;
!
!
!
FORWARD ROUTINE
    DISPLAY_RELOC,
    DISPLAY_MISC,
    CHECK_INTER	: NOVALUE;
!
!
!
MACRO
    QUIT_ON_ERROR =
	IF NOT .RETSTATUS
	THEN
	    RETURN .RETSTATUS; %;

KEYWORDMACRO
    DISPLAY_FIELD (STRING, FIELD1=0, FIELD2=0, FIELD3=0, FIELD4=0 ) = 
	BEGIN
	RETSTATUS =
	$FAO ( %ASCID %STRING(%CHAR(13,10),STRING),
		DSPLEN,
		DSPDESC,
		FIELD1,
		FIELD2,
		FIELD3,
		FIELD4);
	QUIT_ON_ERROR;
	OUTRAB[RAB$L_RBF] = DSPBUF;
	OUTRAB[RAB$W_RSZ] = .DSPLEN;
	RETSTATUS =
	$PUT (RAB = OUTRAB);
	QUIT_ON_ERROR;
	END;
	%;

KEYWORDMACRO
    ADD_FIELD (STRING, FIELD1=0, FIELD2=0, FIELD3=0) = 
	BEGIN
	RETSTATUS =
	$FAO ( %ASCID %STRING(STRING),
		DSPLEN,
		DSPDESC,
		FIELD1,
		FIELD2,
		FIELD3);
	QUIT_ON_ERROR;
	OUTRAB[RAB$L_RBF] = DSPBUF;
	OUTRAB[RAB$W_RSZ] = .DSPLEN;
	RETSTATUS =
	$PUT (RAB = OUTRAB);
	QUIT_ON_ERROR;
	END
	%;

GLOBAL ROUTINE DISPLAY_DUMP =

!++
!
! Functional Description:
!	This is the main routine for displaying a dump file.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	command line
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!	none
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	none
!
!--
BEGIN
LOCAL
    FULL,			! indicate if /FULL was requested
    OUTNAME	: BLOCK [4,BYTE],
    RETSTATUS;

! Get output filename
!
IF CLI$PRESENT (%ASCID 'OUTPUT')
THEN
    BEGIN
    OUTNAME[DSC$B_CLASS] = DSC$K_CLASS_D;
    OUTNAME[DSC$B_DTYPE] = DSC$K_DTYPE_T;
    OUTNAME[DSC$W_LENGTH] = 0;
    OUTNAME[DSC$A_POINTER] = 0;
    RETSTATUS =
    CLI$GET_VALUE (%ASCID 'OUTPUT', OUTNAME);
    QUIT_ON_ERROR;
    OUTFAB[FAB$L_FNA] = .OUTNAME[DSC$A_POINTER];
    OUTFAB[FAB$B_FNS] = .OUTNAME[DSC$W_LENGTH];
    END;

! Set up for IO
!
RETSTATUS =
$CREATE (FAB = OUTFAB);
QUIT_ON_ERROR;
RETSTATUS =
$CONNECT(RAB = OUTRAB);
QUIT_ON_ERROR;
RETSTATUS =
$OPEN (FAB = INFAB);
QUIT_ON_ERROR;
RETSTATUS =
$CONNECT(RAB = INRAB);
QUIT_ON_ERROR;

! Display the data if requested
!
FULL = CLI$PRESENT( %ASCID 'FULL');

IF CLI$PRESENT( %ASCID 'MISCELLANEOUS')
    OR .FULL
THEN
    BEGIN
    CHECK_INTER();
    DISPLAY_MISC();
    END;

IF CLI$PRESENT( %ASCID 'RELOCATION')
    OR .FULL
THEN
    BEGIN
    CHECK_INTER();
    DISPLAY_RELOC();
    END;
    
CHECK_INTER();

RETURN SS$_NORMAL;
END;

ROUTINE CHECK_INTER : NOVALUE =
BEGIN

!++
!
! Functional Description:
!	This routine pauses for interactive use.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	command line
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!	CLI$PRESENT
!
! Routine Value:
!	none
!
! Signals:
!	none
!
! Side Effects:
!	none
!
!--

OWN
    FIRST;			! Is this the first call


IF CLI$PRESENT( %ASCID 'INTERACTIVE')
AND
    .FIRST NEQ 0
THEN
    BEGIN
    $GET (RAB = INRAB);

    ! Exit on a ^Z
    !
    IF .ANSWER[0] EQL %X'1A'
    THEN
	$EXIT();
    END;

FIRST = .FIRST + 1;

END;

ROUTINE DISPLAY_MISC =
BEGIN

!++
!
! Functional Description:
!	This routine display misc items of data.
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	misc data block
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!	none
!
! Routine Value:
!	system service return codes
!
! Signals:
!	none
!
! Side Effects:
!	none
!
!--
LOCAL
    IHI		: REF BLOCK[,BYTE],	! image ID part of image header
    IHP		: REF BLOCK[,BYTE],	! patch info part of image header
    RETSTATUS;

DISPLAY_FIELD ();
DISPLAY_FIELD ( STRING = ' R0 = !XL	R1 = !XL	R2 = !XL	R3 = !XL',
		FIELD1 = .MISC[IMGDMP$L_R0],
		FIELD2 = .MISC[IMGDMP$L_R1],
		FIELD3 = .MISC[IMGDMP$L_R2],
		FIELD4 = .MISC[IMGDMP$L_R3] );
DISPLAY_FIELD ( STRING = ' R4 = !XL	R5 = !XL	R6 = !XL	R7 = !XL',
		FIELD1 = .MISC[IMGDMP$L_R4],
		FIELD2 = .MISC[IMGDMP$L_R5],
		FIELD3 = .MISC[IMGDMP$L_R6],
		FIELD4 = .MISC[IMGDMP$L_R7] );
DISPLAY_FIELD ( STRING = ' R8 = !XL	R9 = !XL	R10 = !XL	R11 = !XL',
		FIELD1 = .MISC[IMGDMP$L_R8],
		FIELD2 = .MISC[IMGDMP$L_R9],
		FIELD3 = .MISC[IMGDMP$L_R10],
		FIELD4 = .MISC[IMGDMP$L_R11] );
DISPLAY_FIELD ( STRING = ' SP = !XL	AP = !XL	FP  = !XL',
		FIELD1 = .MISC[IMGDMP$L_SP],
		FIELD2 = .MISC[IMGDMP$L_AP],
		FIELD3 = .MISC[IMGDMP$L_FP] );
DISPLAY_FIELD ();
DISPLAY_FIELD ( STRING = ' FREE_P0_VA  !XL		FREE_P1_VA  !XL',
		FIELD1 = .MISC[IMGDMP$L_FREE_P0],
		FIELD2 = .MISC[IMGDMP$L_FREE_P1] );
DISPLAY_FIELD ( STRING = ' Active ASTs  !XB		Enabled ASTs !XB',
		FIELD1 = .MISC[IMGDMP$L_ASTACT],
		FIELD2 = .MISC[IMGDMP$L_ASTEN] );
DISPLAY_FIELD ( STRING = ' Current Privileges  !XL  !XL',
		FIELD1 = .(MISC[IMGDMP$Q_CURPRIV]+4),
		FIELD2 = .(MISC[IMGDMP$Q_CURPRIV]) );
DISPLAY_FIELD ( STRING = ' Event Flags  !XL  !XL',
		FIELD1 = .MISC[IMGDMP$L_EFCU],
		FIELD2 = .MISC[IMGDMP$L_EFCS] );
DISPLAY_FIELD ( STRING = ' Buffered I/O count/limit !ZL/!ZL',
		FIELD1 = .MISC[IMGDMP$L_BIOCNT],
		FIELD2 = .MISC[IMGDMP$L_BIOLM] );
DISPLAY_FIELD ( STRING = ' Direct I/O count/limit   !ZL/!ZL',
		FIELD1 = .MISC[IMGDMP$L_DIOCNT],
		FIELD2 = .MISC[IMGDMP$L_DIOLM] );
DISPLAY_FIELD ( STRING = ' File count/limit         !ZL/!ZL',
		FIELD1 = .MISC[IMGDMP$L_FILCNT],
		FIELD2 = .MISC[IMGDMP$L_FILLM] );
DISPLAY_FIELD ( STRING = ' Process count/limit      !ZL/!ZL',
		FIELD1 = .MISC[IMGDMP$L_PRCCNT],
		FIELD2 = .MISC[IMGDMP$L_PRCLM] );
DISPLAY_FIELD ( STRING = ' Timer queue count/limit  !ZL/!ZL',
		FIELD1 = .MISC[IMGDMP$L_TQCNT],
		FIELD2 = .MISC[IMGDMP$L_TQLM] );
DISPLAY_FIELD ( STRING = ' AST count/limit          !ZL/!ZL',
		FIELD1 = .MISC[IMGDMP$L_ASTCNT],
		FIELD2 = .MISC[IMGDMP$L_ASTLM] );
DISPLAY_FIELD ( STRING = ' Enqueue count/limit      !ZL/!ZL',
		FIELD1 = .MISC[IMGDMP$L_ENQCNT],
		FIELD2 = .MISC[IMGDMP$L_ENQLM] );
DISPLAY_FIELD ( STRING = ' Buffered I/O total !ZL    	Direct I/O total !ZL',
		FIELD1 = .MISC[IMGDMP$L_BUFIO],
		FIELD2 = .MISC[IMGDMP$L_DIRIO] );
DISPLAY_FIELD ();
IHI = IMGHDR + .IMGHDR[IHD$W_IMGIDOFF];
DISPLAY_FIELD ( STRING = ' Link Date  !%D',
		FIELD1 = IHI[IHI$Q_LINKTIME]);
IF .IMGHDR[IHD$W_PATCHOFF] NEQ 0
THEN
    BEGIN
    IHP = IMGHDR + .IMGHDR[IHD$W_PATCHOFF];
    ADD_FIELD     ( STRING = '    Patch Date  !%D',
		    FIELD1 = IHP[IHP$Q_PATDATE] );
    DISPLAY_FIELD ( STRING = ' ECO Level  !XL  !XL  !XL  !XL',
		    FIELD1 = .IHP[IHP$L_ECO1],
		    FIELD2 = .IHP[IHP$L_ECO2],
		    FIELD3 = .IHP[IHP$L_ECO3],
		    FIELD4 = .IHP[IHP$L_ECO4] );
    END;

RETURN SS$_NORMAL;
END;


ROUTINE DISPLAY_RELOC =
BEGIN

!++
!
! Functional Description:
!	This routine display relocation data
!
! Calling Sequence:
!	standard
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	misc data block
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routines Called:
!	none
!
! Routine Value:
!	system service codes
!
! Signals:
!	none
!
! Side Effects:
!	none
!
!--

LOCAL
    RETSTATUS;

DISPLAY_FIELD ();
DISPLAY_FIELD ( STRING = ' Kernel stack !XL pages at !XL moved to !XL',
		FIELD1 = .MISC[IMGDMP$L_KSTK_SIZ],
		FIELD2 = .MISC[IMGDMP$L_KSTK_VA],
		FIELD3 = .MISC_VA[IMGMOV$L_KSTK] );
DISPLAY_FIELD ( STRING = ' Exec stack !XL pages at !XL moved to !XL',
		FIELD1 = .MISC[IMGDMP$L_ESTK_SIZ],
		FIELD2 = .MISC[IMGDMP$L_ESTK_VA],
		FIELD3 = .MISC_VA[IMGMOV$L_ESTK] );
DISPLAY_FIELD ( STRING = ' Vector page !XL page at !XL moved to !XL',
		FIELD1 = .MISC[IMGDMP$L_VECPAG_SIZ],
		FIELD2 = .MISC[IMGDMP$L_VECPAG_VA],
		FIELD3 = .MISC_VA[IMGMOV$L_VECPAG] );
DISPLAY_FIELD ( STRING = ' PIO (RMS) area !XL pages at !XL moved to !XL',
		FIELD1 = .MISC[IMGDMP$L_PIO_SIZ],
		FIELD2 = .MISC[IMGDMP$L_PIO_VA],
		FIELD3 = .MISC_VA[IMGMOV$L_PIO] );
DISPLAY_FIELD ( STRING = ' Image activator context !XL page at !XL moved to !XL',
		FIELD1 = .MISC[IMGDMP$L_IMGCTX_SIZ],
		FIELD2 = .MISC[IMGDMP$L_IMGCTX_VA],
		FIELD3 = .MISC_VA[IMGMOV$L_IMGCTX] );
DISPLAY_FIELD ( STRING = ' User writeable context !XL pages at !XL moved to !XL',
		FIELD1 = .MISC[IMGDMP$L_USRCTX_SIZ],
		FIELD2 = .MISC[IMGDMP$L_USRCTX_VA],
		FIELD3 = .MISC_VA[IMGMOV$L_USRCTX] );

RETURN SS$_NORMAL;
END;

END
ELUDOM
