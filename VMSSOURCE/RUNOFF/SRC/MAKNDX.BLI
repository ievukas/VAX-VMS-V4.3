%TITLE 'Processes .INDEX, .ENT, and .SUBI directives.'
MODULE makndx (	IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					    NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	Processes the .INDEX, .ENTRY, and .SUBINDEX commands.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	 CREATION DATE: June, 1978
!


%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	018	REM00018	Ray Marshall	17-November-1983
!		Modified the external definition of ATABLE to use the new
!		  macro ATABLE_DEFINITION defined in ATCODE.REQ.
!
!	017	KAD00017	Keith Dawson	23-March-1983
!		Changed GCA_FLIP bit to (.gca_op_dev EQL op_dev_flip).
!
!	016	KFA00016	Ken Alden	16-March-1983
!		SCA must now be initialized by hand all the time
!		  since DSR is now capable of doing SAVE/RESTORE.
!
!	015	KFA00015	Ken Alden 	10-March-1983
!		Fixed bug with .X, CHSSTR should not have been called.
!
!	014	RER00014	Ron Randall	07-March-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--


%SBTTL 'Module Level Declarations'

!
! TABLE OF CONTENTS:
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

EXTERNAL
    atable : atable_definition,	! Action table.  Used to identify what type of
				! action is to be taken on encountering any
				! given character.
    FLGT : FLAG_TABLE,

%IF DSRPLUS %THEN
    FS01 : FIXED_STRING,
%FI

    GCA : GCA_DEFINITION,
    IRA : FIXED_STRING,
    MRA : REF FIXED_STRING,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION,
    XMRA : FIXED_STRING,
    XTSF : VECTOR;

EXTERNAL ROUTINE
    ENDWRD,
    OFT,
    OUTLIN,
    RSKIPS,
    SCANT,
    SETCAS,
    SUBXR;

%IF DSRPLUS %THEN
EXTERNAL ROUTINE
    ENDCMT,
    PUTATT,
    CHSSTR,
    WRATTR,
    XPLUS;
%FI
!
! OWN STORAGE:
!
OWN
    PP_SCA : $H_R_SCA_BLOCK;	!Used in PUSH_SCA, POP_SCA macros (defined in SCA.REQ).

GLOBAL ROUTINE MAKNDX (HANDLER_CODE, DO_INDEXING) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	HANDLER_CODE	- The command to be processed.
!	DO_INDEXING	- If FALSE, the scan is done but no index entry is made.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    LOCAL
	SCA_PARA_COPY,
	SCA_INDENT_COPY,
	HOLD_IND_FLAG,
	HOLD_IND_EFLAG,
	SCA_COPY : SCA_DEFINITION;		!Used to preserve SCA.

    LOCAL
	MRA_TEMP : VECTOR [4 + CH$ALLOCATION (1000)],	!Temporary MRA area
	TSF_TEMP : VECTOR [TSF_SIZE];		!Temporary TSF

    LOCAL
	MRA_ADDRESS,				!Preserve interrupted MRA
	TSF_ADDRESS;				!Preserve interrupted TSF

    LOCAL
	XTN;					!Computed transaction number for index entry.

%IF DSRPLUS %THEN 
    LOCAL
	AN_XYPLUS;

    AN_XYPLUS = 0;
%FI

    XTN = 0;					!Assume it's a .ENTRY command.
    !No transaction number is needed for .ENTRY commands, since they
    !get no page number in the index.  Also, if indexing commands
    !are to be ignored, no transaction number is needed either.

    IF 	.DO_INDEXING
	AND (.HANDLER_CODE NEQ H_ENTRY)

%IF DSRPLUS %THEN
	AND (.HANDLER_CODE NEQ H_YPLUS)
%FI

    THEN
	BEGIN
	! Compute the transaction number associated with this entry.

	XTN = .GCA_NORMAL_XTN;
	GCA_NORMAL_XTN = .GCA_NORMAL_XTN + 1;	!Bump for next index entry

	!The page number associated with this index entry is the same
	!as that of the word being worked on.

	IF  .SCA_WRD_F_XTN EQL 0
	THEN
	    SCA_WRD_F_XTN = .XTN;

	IF  .XTN NEQ 0
	THEN
	    SCA_WRD_L_XTN = .XTN;

	END;

        RSKIPS (IRA);				!Skip spaces and tabs preceeding the index item(s)

    	HOLD_IND_FLAG = .FLGT [IND_FLAG, FLAG_CHARACTER];	!Preserve <INDEX flag> status.
    	HOLD_IND_EFLAG = .FLGT [IND_FLAG, FLAG_ENABLED];
    	OFT (H_NO_FLAGS_INDE, IND_FLAG);		!Disable <INDEX flag>
	
	IF  .FLGT [SBX_FLAG, FLAG_ENABLED] AND .SCA_FLAGS
    	THEN
    	!Enable <SUBINDEX flag> recognition. The <SUBINDEX flag> temporarily 
    	!occupies areas reserved for the <INDEX flag>.
	    BEGIN
	    FLGT [IND_FLAG, FLAG_CHARACTER] = .FLGT [SBX_FLAG, FLAG_CHARACTER];
	    FLGT [IND_FLAG, FLAG_ENABLED] = TRUE;
	    ATABLE [.FLGT [SBX_FLAG, FLAG_CHARACTER]] = A_FLAG;
	    END;

%IF DSRPLUS %THEN
    IF  .HANDLER_CODE EQL H_XPLUS OR .HANDLER_CODE EQL H_YPLUS
    THEN
	BEGIN
	LOCAL
	    STATUS;

	STATUS = XPLUS (.HANDLER_CODE);

	IF  .STATUS
	THEN
	    BEGIN
	    !
	    !Note the fact that an .XP/.YP was given, so we can generate 
	    !a warning message if .DX/.PX is ever used after .XP/.YP.
	    GCA_XP_EVER = TRUE;
	    !
	    !Mark this entry as an .XP/.YP entry. This will allow DOFLG
	    !to determine if it should generate escape sequence for the
	    !Nopermute flag (as it should if the command is .XP/.YP), or 
	    !simply eat it (as it should for .X/.Y).
	    AN_XYPLUS = TRUE;
	    !
	    END
	ELSE
	    BEGIN
	    !The syntax of user-supplied attributes is illegal (mismatched 
	    !parens). In this case we cannot distinguish what is intended 
	    !for the index entry, so advance past the rest of the text and
	    !return.
	    ENDCMT ();
	    RETURN;
	    END;

	END;

%FI
    PUSH_SCA;	!Save the SAVEd SCA bits.

    INCR I FROM 0 TO SCA_SIZE - 1 DO
	SCA_COPY [.I] = .SCA [.I];		!Save SCA

    !Initialize the SCA before doing SCANT
    SCA_LM = 0;
    SCA_RM = 150;				!Set wide right margin so won't start a new line.
    SCA_X_FLAG = FALSE;				!Turn off index flag now in case we are in the middle of an index-flagged word.
    SCA_SPACING = 1;				!Single spacing avoids spurious intermediate code.
    SETCAS (.GCA_XCASE);			!Use case translation rules defined by .XLOWER or .XUPPER command.
    SCA_FC = TRUE;				!This is the first character for the MRA.
    SCA_FC_CASE = TRUE;				!Use first character-of-word case rules.
    SCA_XROUTINE = TRUE;			!TRUE ==> use SUBXR for index phrase processing routine.
    SCA_PRESCAN = TRUE;				!A ';' terminates the scan.
    SCA_PARA_COPY = .SCA_PARA_PND;		!Don't let FCIMRA do any indentation, etc.
    SCA_INDENT_COPY = .SCA_INDENT;
    SCA_PARA_PND = FALSE;
    SCA_INDENT = 0;
    SCA_FILL = FALSE;
    SCA_JUSTIFY = FALSE;

    !Preserve the addresses of the structures to which these items refer.
    MRA_ADDRESS = .MRA;
    TSF_ADDRESS = .TSF;
    !Now switch working buffers, so that text currently being accumulated
    !is not disturbed.
    MRA = MRA_TEMP;
    TSF = TSF_TEMP;
    !Now manually set up MRA, to look like a FIXED STRING.
    FS_MAXSIZE (MRA) = 1000;
    FS_INIT (MRA);				!And that finishes the initialization.

    !Now initialize TSF for SCANT.
    INCR I FROM 0 TO TSF_SIZE - 1 DO
	TSF [.I] = 0;

%IF DSRPLUS %THEN
    TSF_XYPLUS = .AN_XYPLUS;		!This information is used by UNPUS (called from OUTLIN), among others.
%FI

    TSF_INDEX = TRUE;				!This TSF record describes an index entry.
    TSF_FIRST_XTN = .XTN;

    SCA_WRD_INT_L = 0;
    SCA_WRD_EXT_L = 0;
    SCA_WRD_ISEQN = 0;
    SCA_WRD_DRAFT = 0;
    SCA_WRD_DRAFT_F = 0;
    SCA_WRD_BARS = 0;
    SCA_WRD_BAR_CHR = 0;
    SCA_WRD_SEQN_F = 0;
    SCA_WRD_IPAGEN = 0;
    SCA_WRD_FOOTW = 0;
    SCA_WRD_F_XTN = 0;
    SCA_WRD_L_XTN = 0;
    SCA_WRD_LC_PNCT = 0;
    SCA_WRD_LST_SP = 0;
    SCA_WRD_LST_JUS = 0;
    SCA_WRD_LST_UND = 0;
    SCA_WRD_PNTR = .FS_NEXT (MRA);
    SCA_WRD_CPEND = RINTES;			!Tell ENDCHR no character is pending.
    FS_START (MRA) = .SCA_WRD_PNTR;

    !Now let SCANT process the command.
    SCANT ();

    !Restore <INDEX flag> to former status.
    OFT (H_NO_FLAGS_INDE, IND_FLAG);
    FLGT [IND_FLAG, FLAG_CHARACTER] = .HOLD_IND_FLAG;
    FLGT [IND_FLAG, FLAG_ENABLED] = .HOLD_IND_EFLAG;

    IF  .FLGT [IND_FLAG, FLAG_ENABLED]
	AND .SCA_FLAGS
    THEN
	ATABLE [.FLGT [IND_FLAG, FLAG_CHARACTER]] = A_FLAG;

    !Return here is with a word.
    IF 	.DO_INDEXING
    THEN
	BEGIN

	IF  .SCA_WRD_CPEND NEQ RINTES
	THEN
	    ENDWRD (FALSE, FALSE, FALSE);	!End word, but don't write a space too.

%IF DSRPLUS %THEN
	!
	!Find out if there is a sort string,
	!and if so, check its validity.
	!
    	IF  .HANDLER_CODE EQL H_XPLUS OR .HANDLER_CODE EQL H_YPLUS
	THEN
	    BEGIN
	    CHSSTR ();
	    !
	    ! The sort string has now been checked and adjusted if necessary.
	    ! Now we write the sort= and Append= strings to the attributes block.
	    !
	    WRATTR ();
	    END;
	!
	!Write an attributes block only if: 
	! 1) Indexing is going to the .BRN file, and
	! 2) The indexed text was not null, and
	! 3) This was an .XP/.YP.
	! 4) Not generating a .BFL (FLIP) file.
	! 
	IF  .GCA_BIX		!Indexing to a file?
	    AND
	    .TSF_EXT_HL NEQ 0	!Non-null index entry?
	    AND
	    .TSF_XYPLUS		!.XP/.YP?
	    AND
	    NOT (.gca_op_dev EQL op_dev_flip)		!Not generating a .BFL?
	THEN
	    PUTATT ();		!OK, write out the attributes.
%FI

	OUTLIN (FALSE);			!Don't disturb justification algorithm
	END;

    INCR I FROM 0 TO SCA_SIZE - 1 DO
	SCA [.I] = .SCA_COPY [.I];		!Restore SCA

    POP_SCA;	!Restore the SAVEd SCA bits.

    MRA = .MRA_ADDRESS;				!Restore previous status.
    TSF = .TSF_ADDRESS;
    SCA_PARA_PND = .SCA_PARA_COPY;
    SCA_INDENT = .SCA_INDENT_COPY;
    END;					!End of MAKNDX

END						!End of module
ELUDOM
