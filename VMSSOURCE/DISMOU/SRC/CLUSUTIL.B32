MODULE	CLUSUTIL	(
			 LANGUAGE (BLISS32),
			 IDENT = 'V04-000'
			) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:
!
!	DISMOUNT Utility Structure Levels 1 & 2
!
! ABSTRACT:
!
!	This module contains all the various and sundry general
!	purpose utility routines used by cluster functions within 
!	DISMOUNT. These routines are also called by the MOUNT system
!	service.
!	
!
! Environment:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
! Author:
!
!	Hai Huang
!
! Creation date:
!
!	23-Feb-1984
!
! Revision history:
!
!
!--

BEGIN					! Start of CLUSUTIL

LIBRARY	'SYS$LIBRARY:LIB.L32';
REQUIRE 'SHRLIB$:CSPDEF';
REQUIRE 'LIB$:MOUDEF.B32';

FORWARD ROUTINE
	SEND_CLUSTER,			! Routine for cluster communication
	SEND_CLUSTER_HANDLER,		! Turn kernel mode signals to retrun
	IN_CLUSTER;			! Determine if the system is in a cluster


!
! Define routine linkages
!
LINKAGE
	ALLOC_CSD	= JSB (REGISTER=1; REGISTER=2) 
				: NOPRESERVE (3) NOTUSED (4,5,6,7,8,9,10,11),
	CSP_CALL	= JSB (REGISTER=2)
				: NOTUSED (3,4,5,6,7,8,9,10,11),
	DALLOC_CSD	= JSB (REGISTER=0)
				: NOPRESERVE (2,3) NOTUSED (4,5,6,7,8,9,10,11);


!
! Run-time library and other routines external to the facility
!
EXTERNAL ROUTINE
    LIB$SIG_TO_RET	: ADDRESSING_MODE (GENERAL),		! Convert a signal to a return
    EXE$ALLOC_CSD	: ALLOC_CSD  ADDRESSING_MODE (GENERAL),	! Allocate a CSD structure
    EXE$CSP_BRDCST	: CSP_CALL   ADDRESSING_MODE (GENERAL),	! Broadcast with CSP
    EXE$DEALLOC_CSD	: DALLOC_CSD ADDRESSING_MODE (GENERAL);	! Release CSD structure


!
! Define the CODE psect so that the generated code has PIC and SHR attributes
!
PSECT 	CODE = Z$DISMOUNT (PIC, SHARE);



 
GLOBAL ROUTINE SEND_CLUSTER ( MSG_PTR, MSG_LEN, MSG_PRM ) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Kernel mode routine to send a message to every remote node
!	on the cluster.
!
! CALLING SEQUENCE:
!
!	SEND_CLUSTER (ARG1, ARG2, ARG3)
!
! INPUT:
!
!	ARG1	: Address of message
!	ARG2	: Length of message
!	ARG3	: Message dependent parameter
!
! IMPLICIT INPUT:
!
!	None.
!
! OUTPUT:
!
!	None.
!
! IMPLICT OUTPUT:
!
!	None.
!
! SIDE EFFECTS:
!
!	Messages will be sent to remote nodes.
!
! ROUTINE VALUE:
!
!	Status from comm primitive.
!
!--

BEGIN						! Start of SEND_CLUSTER

LOCAL
	CSD		: REF BBLOCK,
	STATUS		: LONG;

LITERAL
	PRM_LEN	= 4;				! Length of message parameter

!
! Trap anything weird, and turn it into a return
!
ENABLE
    SEND_CLUSTER_HANDLER;

!
! Allocate a template CSD block for the transfer.  Common fields in the 
! CSD are initialized by the allocate routine.
!
STATUS = EXE$ALLOC_CSD (CSD$K_LENGTH + .MSG_LEN + PRM_LEN; CSD);
IF NOT .STATUS
THEN
    RETURN .STATUS;

!
! Set the message dependent fields in the CSD
!
CSD [CSD$W_CODE] = CSD$K_MOUNT;			! Set the MOUNT client code
CSD [CSD$L_P1] = .MSG_PRM;			! Set parameter into packet
CSD [CSD$L_SENDOFF] = CSD [CSD$L_P2] - .CSD;	! Store offset to the actual message
CSD [CSD$L_SENDLEN] = .MSG_LEN;			! Store size of message 
CH$MOVE (.MSG_LEN, .MSG_PTR, CSD [CSD$L_P2]);	! Move the message into the CSD
CSD [CSD$L_RECVOFF] = CSD [CSD$L_RECVLEN] = 0;	! We do not want a reply
CSD [CSD$A_ASTADR] = 0;				! No completion AST routine
CSD [CSD$L_CSID] = -1;				! Set CSP broadcast function

!
! Now send the message 
!
STATUS = EXE$CSP_BRDCST (.CSD);			! Send the CSP message with
						! the template CSD
EXE$DEALLOC_CSD (.CSD);				! Deallocate template CSD

RETURN .STATUS;
END;						! End of SEND_CLUSTER 



ROUTINE SEND_CLUSTER_HANDLER (SIG : REF BBLOCK, MECH : REF BBLOCK) =	

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine intercepts kernel mode signals, the signal is 
!	converted to a return.
!
! INPUTS:
!
!	SIG   :	Signal argument list
!	MECH  :	Mechanism argument list
!
! IMPLICIT INPUTS:
!
!	None.
!
! OUTPUTS:
!
!	None.
!
! IMPLICIT OUTPUTS:
!
!	None.
!
! ROUTINE VALUE:
!
!	None.
!
! SIDE EFFECTS:
!
!	A return is made to the caller with the error status.
!
!--

BEGIN
!
! Convert the signal to a return
!
RETURN LIB$SIG_TO_RET (.SIG, .MECH);	

END;						! End of SEND_CLUSTER_HANDLER




GLOBAL ROUTINE IN_CLUSTER  =		

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine determines if the system is running in a 
!	cluster environment.
!
! CALLING SEQUENCE:
!
!	IN_CLUSTER ()
!
! INPUT:
!
!	None.
!
! IMPLICIT INPUT:
!
!	None.
!
! OUTPUT:
!
!	None.
!
! IMPLICT OUTPUT:
!
!	None.
!
! SIDE EFFECTS:
!
!	None.
!
! ROUTINE VALUE:
!
!	0 	 :  If not running in a cluster
!	1	 :  If running is a cluster
!	Otherwise:  System service error status
!
!--

BEGIN						! Start of IN_CLUSTER

OWN
	CLUSTER_FLAG	: LONG,
	SYI_NODE	: VECTOR [4, LONG]	! GETSYI list
			INITIAL  ((SYI$_CLUSTER_MEMBER^16 OR 4),
				  CLUSTER_FLAG,
				  0);
LOCAL
	STATUS	: LONG;

!
! Get system information to see if we are in a cluster.
!
IF NOT (STATUS = $GETSYIW (ITMLST=SYI_NODE))
	THEN RETURN .STATUS;

!
! Return value of cluster_flag
!
IF .CLUSTER_FLAG
THEN
    RETURN 1
ELSE
    RETURN 0;

END;						! End of IN_CLUSTER


END						! End of CLUSUTIL
ELUDOM

