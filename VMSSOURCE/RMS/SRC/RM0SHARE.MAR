	$BEGIN	RM0SHARE,000,RM$RMS0,<SHARING ROUTINES>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
;	Facility:	RMS32
;
;	Abstract:
;
;		this module is comprised of subroutines which are used by the
;		file sharing logic of rms.  these utilities were written to
;		facilitate the processing of functions which are called many
;		times or from many locations.  the functions include the
;		acquisition and release of resources and buffers.
;
; Environment:
; 
;	star processor running starlet exec.
;
; Author:	Keith B. Thompson		creation date: 9-Jul-1982
;
; Modified By:
;
;	V03-036	JEJ0053		J E Johnson		30-Aug-1984
;		Put in a test to bugcheck if we ever try to store an
;		EOF of 0/0.
;
;	V03-035	DGB0024		Donald G. Blair		07-Mar-1984
;		Allocate a fib descriptor and fib in VALIDATE_EBK_HBK
;		so that we can fill in the FIB$B_AGENT_MODE field and
;		pass it to the file system.
;
;	V03-034	JWT0160		Jim Teague		29-Feb-1984
;		Remove calls to RM$DEALLEFN.
;
;	V03-033	SHZ0014		Stephen H. Zalewski	23-Sep-1983
;		Replace line in lock manager call deleted by lja0098.
;
;	V03-032 LJA0098		Laurie J. Anderson	20-Sep-1983
;		Make sure that when a EFN is allocated that it is also
;		deallocated even if it IS used.  This will fix a problem
;		RMS will hang a user process in a $CLOSE if Deferred
;		write is set.  RMS will flush the BDB's using one EFN
;		and then write the file header characteristics using 
;		another EFN.  The user ends up waiting for a EFN which
;		is never used again.
;
;		This is probably a temporary fix.  The real fix will
;		be done for FT2 of V3B.
;
;	V03-031	SHZ0013		Stephen H. Zalewski	19-Sep-1983
;		Add a new routine that will initialize the SFSB using an
;		IRAB instead of an IFAB.
;
;	V03-030	SHZ0012		Stephen H. Zalewski	12-Sep-1983
;		If a user attempts to open a file shared and specified UFO
;		in the FOP filed of the FAB, then he must also specify the
;		UPI bit in the SHR field of the FAB.
;
;		When taking out the shared file lock, get the device name ID
;		from a new field that will uniquely identify this disk through-
;		out a cluster.  (This field is not ascii and is therefore
;		unreadable.)
;
;	V03-029	SHZ0011		Stephen H. Zalewski	10-Aug-1983
;		Zero the pointer to the global buffer section in the IFB
;		before dequeueing the lock.  This is to prevent last chance
;		from attempting to unmap from the section if the process gets
;		stopped while we are dequeueing the lock.
;
;		Turn off checking of the sharing fields in the fab.
;
;	V03-028	SHZ0010		Stephen H. Zalewski	28-Jul-1983
;		Add support for cluster global buffers.
;
;	V03-027	SHZ0009		Stephen H. Zalewski	26-Jun-1983
;		Make SFSB a root lock instead of a child of the XQP lock.
;
;	V03-026	SHZ0008		Stephen H. Zalewski	25-Jun-1983
;		Check a different set of journal flags in RM$RLS_SFSB.
;
;	V03-025	SHZ0007		Stephen H. Zalewski	30-Apr-1983
;		Modify the way register storage is done in VALIDATE_EBK_HBK
;		routine.
;
;	V03-024	SHZ0006		Stephen H. Zalewski	18-Apr-1983
;		Add cluster failover support for file locking.
;
;	V03-023	SHZ0005		Stpehen H. Zalewski	13-Apr-1983
;		Do not set IFB$V_STALL_LOCK flag around calls to RM$STALL_LOCK.
;		This flag is now set and cleared in RM$STALL_LOCK itself.
;		This fixes a deadlock condition with global buffers.
;
;	V03-022	SHZ0004		Stephen H. Zalewski	12-Apr-1983
;		Make sure last accessor to a global buffer section
;		zeroes out all fields in the value block for the GBSB.
;
;	V03-021	JWH0199		Jeffrey W. Horn		22-Mar-1983
;		Save the file lock if we are trying to give it up
;		within a recovery unit.
;
;	V03-020	KBT0498		Keith B.Thompson	21-Feb-1983
;		Fix the file lock for xqp
;
;	V03-019	KBT0496		Keith B. Thompson	18-Feb-1983
;		Fix init_gbsb to stall with the correct structure and
;		put in a temporary hack to fix failover
;
;	V03-018	KBT0492		Keith B. Thompson	9-Feb-1983
;		Check for compatible sharing-fac options
;
;	V03-017	KBT0483		Keith B. Thompson	1-Feb-1983
;		Fix kbt0450 (r9 NOT r10!)
;
;	V03-016	KBT0465		Keith B. Thompson	10-Jan-1983
;		Use parent lock id for file locks if using the xqp and
;		request all of the lock modes to be EXEC
;
;	V03-015	KBT0450		Keith B. Thompson	6-Jan-1983
;		Load the ifab eof stuff correctly in init_sfsb
;
;	V03-014	KBT0431		Keith B. Thompson	3-Dec-1982
;		Change the way the shared lock name is made
;
;	V03-013	KBT0402		Keith B. Thompson	30-Nov-1982
;		Change fwa$t_shrfildev to fwa$t_shrfilbuf
;
;	V03-012	SHZ0003		Stephen H. Zalewski,	29-Oct-1982  19:02
;		Zero the GBH_PTR field in the IFAB after dequeuing the lock
;		on the GBSB.  This prevents last chance from attempting to
;		dequeue the GBSB again.
;
;	V03-011	JWH0105		Jeffrey W. Horn		21-Sep-1982
;		Fix bug in storage of HBK,EBK pair into value block.
;
;	V03-010	SHZ0002		Stephen H. Zalewski,	21-Sep-1982  13:07
;		Make RM$RAISE_GBS_LOCK and RM$LOWER_GBS_LOCK stuff the
;		appropriate lock mode into R0.  Remove RM$GET_GBS_LOCK
;		entry point.  Make RM$RLS_SFSB always look at R9 for
;		the IFAB.  Removed unnecessary block definitions.
;
;	V03-009	KBT0324		Keith B. Thompson	10-Sep-1982
;		Removed all S0 sharing code add rm$rls_sfsb, rename
;		rm$get_gsb_lock to rm$init_gbsb, rm$rls_gbs_lock to
;		rm$rls_gbsb, add routine rm$rls_sfsb and make this
;		a new sorce module
;
;	V03-008	SHZ0001		Stephen H. Zalewski,	1-Sep-1982  14:44
;		Add global buffer section locking routines.
;
;	V03-007	KBT0300		Keith B. Thompson	24-Aug-1982
;		Reorganize psects
;
;	V03-006	KBT0123		Keith B. Thompson	7-Aug-1982
;		Add more locking features
;
;	V03-005	KBT0079		Keith B. Thompson	9-Jul-1982
;		Add new file locking routines
;
;--
;
	.SBTTL	DECLARATIONS

	$ATRDEF				; acp attribute list def.
	$ENQDEF				; enq service definitions
	$FABDEF				; fab data definitions
	$FATDEF				; ACP QIO record attribute defs.
	$FIBDEF				; file information block definitions
	$FTLDEF				; fatal bugcheck codes.
	$FWADEF				; file work area definitions
	$GBSBDEF			; global buffers synchronization block
	$IFBDEF				; ifab data definitions
	$IODEF				
	$IRBDEF				; irab data definitions
	$LCKDEF				; enq lock definitions
	$PSLDEF				; access mode definitions
	$RMSDEF				; rms error codes
	$SFSBDEF			; shared file synchronization block
	$SSDEF

;
;	These are the FAC/SHR fields which must be compatible for
;	inter-process file sharing
;
;	NOTES:
;
;	1) We allow one process to mutistream while another does not
;
;	2) The NIL option is taken care of in rm$access
;

	SHRBITS	= <FAB$M_GET!FAB$M_PUT!FAB$M_DEL!FAB$M_UPD>
	FHCLEN	= IFB$C_FHAEND-IFB$B_RFMORG	; FHC length

	.SBTTL	RM$INIT_SFSB - Allocate and initialize the SFSB

;++
;
; RM$INIT_SFSB
;
;	This routine allocates the SFSB.  The SFSB is allocated one per IFAB,
;	and is used to contain the necessary local lock manager context for
;	locking the shared file.  This will be allocated even when sharing is
;	only multi-stream, as the lock manager will be used in that case also.
;
;	A protected write lock is requested on the file also.
;
; Calling Sequence:
;
;	BSBW	RM$INIT_SFSB
;
; Input Parameters:
;
;	r10	fwa address
;	r9	ifab address
;	r8	fab address
;
; Implicit Inputs:
;
;	fwa$t_fibbuf	-	used to pick up file id
;	fwa$q_device	-	used to pick up ascii device string
;
; Output Parameters:
;
;	r0	status code
;
; Implicit Outputs:
;
;	sfsb allocated and initialized, a PW lock made on it
;	if an enq error occurs, the $FAB stv field has the system service
;	code...
;
; Completion Codes:
;
;	suc, dme, enq, upi and shr
;
; Side Effects:
;
;	r1-r7 destroyed
;
;--

RM$INIT_SFSB::

;
; Check to see if we should be doing sharing in the first place
;

	BBC	#FAB$V_UFO,FAB$L_FOP(R8),10$	; ufo can't be spec'd
	BBS	#FAB$V_UPI,FAB$B_SHR(R8),10$	;  unless upi is also.
	RMSERR	SHR
	RSB

10$:	BITB	#<FAB$M_BIO!FAB$M_BRO>,-	; is this any form of block io
		FAB$B_FAC(R8)			;  if so it must be upi
	BEQL	INIT_SFSB			; no, so don't wory
	BBS	#FAB$V_UPI,FAB$B_SHR(R8),INIT_SFSB	; upi? then ok
	RMSERR	UPI				; get out now
	RSB	

INIT_SFSB:
	MOVZBL	#<SFSB$C_BLN/4>,R2		; get block length to allocate 
	MOVL	R9,R1				; allocate from same page as ifab
	BSBW	RM$GETBLK			; allocate it
	BLBS	R0,10$				; branch if ok
	RMSERR	DME				; dynamic memory exhausted
	RSB					; return error to caller
10$:	MOVL	R1,IFB$L_SFSB_PTR(R9)		; address of SFSB in IFAB
	MOVB	#SFSB$C_BID,SFSB$B_BID(R1)	; fill in block id

;
; Make a descriptor in the SFSB, pointing to RESNAM field.
;

	MOVAL	SFSB$T_RESNAM(R1),-	; address of RESNAM string
		SFSB$L_ADDRESS(R1)	;  to descriptor address field

;
; Put RMS facility code (RMS$) into first longword of name.
; Copy File ID from FIB in FWA to next three words of the SFSB.
; Copy ascii device name from FWA into SFAB after File ID.
;

	MOVAL	FWA$T_FIBBUF(R10),R0	; get address of FIB	
	MOVZBW	#SFSB$C_FIX_LEN,-	; initialize length of RESNAM string
		SFSB$W_NAME_LEN(R1)	;  to fixed length portion

	MOVL	#^A/RMS$/,SFSB$L_FAC_CODE(R1)	; set RMS facility code into name

	MOVW	FIB$W_FID_NUM(R0),-	;
		SFSB$W_FID_NUM(R1)	; first word of FID
	MOVW	FIB$W_FID_SEQ(R0),-	;
		SFSB$W_FID_SEQ(R1)	; second word of FID
	MOVW	FIB$W_FID_RVN(R0),-	;
		SFSB$W_FID_RVN(R1)	; last word of FID

	ADDW2	FWA$Q_SHRFIL_LCK(R10),-	; get length of device string
		SFSB$W_NAME_LEN(R1)	; add it to descriptor length
	MOVC3	FWA$Q_SHRFIL_LCK(R10),-	; move the string to the SFSB
		@FWA$Q_SHRFIL_LCK+4(R10),-;  resnam field to name the
		SFSB$T_DEV_NAM(R1)	;  file

	MOVL	IFB$L_SFSB_PTR(R9),R4	; restore SFSB address into R4

;
; Lock the shared file protected write.  This gives a parent_id to any
; subsequent record locks.
;

DO_ENQ:	JSB	RM$SETEFN		; Allocate event flag
	POPR	#^M<R0>			; Get the flag
	$ENQ_S	LKMODE	= #LCK$K_PWMODE,-
		ACMODE	= #PSL$C_EXEC,-
		EFN	= R0,-
		ASTADR	= RM$STALLAST,-
		ASTPRM	= R9,-
		LKSB	= SFSB$L_LKSB(R4),-
		RESNAM	= SFSB$Q_FILENAME(R4),-
		FLAGS	= #LCK$M_VALBLK!LCK$M_SYNCSTS!LCK$M_SYSTEM

	BLBC	R0,40$				; Error?
	CMPW	R0,#SS$_SYNCH			; Did it complete?
	BEQL	20$				; Yes, so do not stall
	BSBW	RM$STALL_LOCK			; Stall for the lock
20$:	MOVZWL	SFSB$W_STATUS(R4),R0		; Get final status
	BLBC	R0,40$				; Did it work?

;
; Check to see if we are first accessor (value block is zero).  If so, do not
; disturb ebk/hbk marks in ifab.  If not zero, move values from value block to
; ebk/hbk fields in ifab.
;

	ASSUME	IFB$L_EBK	EQ	<IFB$L_HBK + 4>
	ASSUME	SFSB$L_EBK	EQ	<SFSB$L_HBK + 4>

	ADDL3	SFSB$L_HBK(R4),SFSB$L_EBK(R4),R1; check for EBK=HBK=0
	BEQL	30$				; they were zero
25$:	MOVQ	SFSB$L_HBK(R4),IFB$L_HBK(R9)	; store eof

30$:	MOVB	#LCK$K_PWMODE,SFSB$B_CURMODE(R4); Save the current lock value
	MOVL	SFSB$L_LOCK_ID(R4),-		; Save parent id for bucket locks
		IFB$L_PAR_LOCK_ID(R9)
	;BSBB	CHECK_SHARE_OPTIONS		; do final checking
	RSB					; return to caller


;
; An error occurred on the ENQ.  Check to see if we can recover from it.
;

40$:	
	CMPW	#SS$_DEADLOCK,R0		; Was it deadlock?
	BEQL	DO_ENQ				; Try it again if it was.
	CMPW	#SS$_VALNOTVALID,R0		; Did Lock manager gave us old value block?
	BNEQ	45$				; No, go map the error.
	JSB	VALIDATE_EBK_HBK		; Yes, validate the data.
	BLBS	R0,25$				; Continue if successful
	BRB	50$				; else map error.
45$:	RMSERR	ENQ,R1				; default to ENQ error for RM$MAPERR
50$:	BSBW	RM$MAPERR			; go map the error
	RSB					; and return

	.SBTTL	RM$INIT_SFSB_IRB - Allocate and initialize the SFSB using IRAB.

;++
;
; RM$INIT_SFSB_IRB
;
;	This routine allocates the SFSB using an irab to stall on.  This only 
;	occurs in connect when the original sfsb lock has been given away to
;	become a system lock for a global buffer section.
;	The SFSB is allocated one per IFAB,
;	and is used to contain the necessary local lock manager context for
;	locking the shared file.  This will be allocated even when sharing is
;	only multi-stream, as the lock manager will be used in that case also.
;
;	A protected write lock is requested on the file also.
;
; Calling Sequence:
;
;	BSBW	RM$INIT_SFSB_IRB
;
; Input Parameters:
;
;	r10	ifab address
;	r9	irab address
;
; Implicit Inputs:
;
;	none
;
; Output Parameters:
;
;	r0	status code
;
; Implicit Outputs:
;
;	sfsb allocated and initialized, a PW lock made on it
;	if an enq error occurs, the $FAB stv field has the system service
;	code...
;
; Completion Codes:
;
;	suc, dme, enq, upi and shr
;
; Side Effects:
;
;	r1-r7 destroyed
;
;--

RM$INIT_SFSB_IRB::

;
; Lock the shared file protected write.  This gives a parent_id to any
; subsequent record locks.
;

10$:	JSB	RM$SETEFN		; Allocate event flag
	POPR	#^M<R0>			; Get the flag
	$ENQ_S	LKMODE	= #LCK$K_PWMODE,-
		ACMODE	= #PSL$C_EXEC,-
		EFN	= R0,-
		ASTADR	= RM$STALLAST,-
		ASTPRM	= R9,-
		LKSB	= SFSB$L_LKSB(R4),-
		RESNAM	= SFSB$Q_FILENAME(R4),-
		FLAGS	= #LCK$M_VALBLK!LCK$M_SYNCSTS!LCK$M_SYSTEM

	BLBC	R0,40$				; Error?
	CMPW	R0,#SS$_SYNCH			; Did it complete?
	BEQL	20$				; Yes, so do not stall
	BSBW	RM$STALL_LOCK			; Stall for the lock
20$:	MOVZWL	SFSB$W_STATUS(R4),R0		; Get final status
	BLBC	R0,40$				; Did it work?
25$:	MOVQ	SFSB$L_HBK(R4),IFB$L_HBK(R10)	; Store EOF.
	MOVB	#LCK$K_PWMODE,SFSB$B_CURMODE(R4); Save the current lock value
	RSB					; return to caller


;
; An error occurred on the ENQ.  Check to see if we can recover from it.
;

40$:	
	CMPW	#SS$_DEADLOCK,R0		; Was it deadlock?
	BEQL	10$				; Try it again if it was.
	CMPW	#SS$_VALNOTVALID,R0		; Did Lock manager gave us old value block?
	BNEQ	45$				; No, go map the error.
	JSB	VALIDATE_EBK_HBK		; Yes, validate the data.
	BLBS	R0,25$				; Continue if successful
	BRB	50$				; else map error.
45$:	RMSERR	ENQ,R1				; default to ENQ error for RM$MAPERR
50$:	BSBW	RM$MAPERR			; go map the error
	RSB					; and return


	.SBTTL	CHECK_SHARE_OPTIONS

;++
;
; CHECK_SHARE_OPTIONS
;
;	This routine checks the sharing options in order to see if
;	they are valid.  If we are the first in then simply stuff the
;	fields and return.
;
; Input Parameters:
;
;	r4 - sfsb
;	r8 - fab
;	r9 - ifab
;
; Output Parameters:
;	none
;
; Routine Value:
;
;	suc or shr
;
; Side Effects:
;
;	r1 destroyed
;
;--

CHECK_SHARE_OPTIONS:

	ASSUME	SFSB$B_SHR	EQ	SFSB$B_FAC+1

	TSTW	SFSB$B_FAC(R4)			; are we the first in?
	BNEQ	10$				; No, so do checks

	ASSUME	FAB$B_SHR	EQ	FAB$B_FAC+1
	ASSUME	SFSB$B_SHR	EQ	SFSB$B_FAC+1

	MOVW	FAB$B_FAC(R8),SFSB$B_FAC(R4)	; save the flags for the next guy
	BRB	SHREXT				; get out

	ASSUME	FAB$V_PUT	EQ	FAB$V_SHRPUT
	ASSUME	FAB$V_GET	EQ	FAB$V_SHRGET
	ASSUME	FAB$V_DEL	EQ	FAB$V_SHRDEL
	ASSUME	FAB$V_UPD	EQ	FAB$V_SHRUPD

10$:	BICB3	SFSB$B_SHR(R4),FAB$B_FAC(R8),R0	; is our access compatible?
	BITB	#SHRBITS,R0			; are they different
	BNEQ	SHRERR				; yes, then error
	BICB3	FAB$B_SHR(R8),SFSB$B_FAC(R4),R0	; is their access compatible?
	BITB	#SHRBITS,R0			; are any different
	BNEQ	SHRERR				; yes, then exit
SHREXT:	RMSSUC					; exit success!
	RSB

SHRERR:	RMSERR	INCOMPSHR			; this is an error
	RSB					; return the bad news


	.SBTTL	File locking routines

;++
;
; RM$RESTORE_LOCK
; RM$RAISE_LOCK
; RM$LOWER_SYSLOCK
; RM$LOWER_LOCK
;
;	These routines modify the file lock mode.
;
; Calling Sequence:
;
;	BSBW	RM$RESTORE_LOCK	- Restore the lock mode
;	BSBW	RM$RAISE_LOCK	- Get a protected write lock on the file
;	BSBW	RM$LOWER_SYSLOCK- Convert file lock to a system lock (held at NL)
;	BSBW	RM$LOWER_LOCK	- Get a concurrent read lock on the file
;
; Input Parameters:
;
;	r9	ifab/irab address
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;
;	r0	status code
;
; Implicit Outputs:
;	none
;
; Completion Codes:
;
;	suc, enq
;
; Side Effects:
;
;	The ifab eof information is stored in resource block (lower lock)
;	or updated from the resource block (raise lock)
;	Could stall
;
;--

RM$RESTORE_LOCK::				; Restore the previous lock mode
	PUSHR	#^M<R1,R2,R3,R4,R5,R10>
	MNEGL	#1,R0				; Signal this is a restore
	MOVL	#LCK$M_SYNCSTS!LCK$M_CONVERT!LCK$M_VALBLK,R3
	BRB	SET_LOCK

RM$RAISE_LOCK::					; Get a protected write lock on the file
	PUSHR	#^M<R1,R2,R3,R4,R5,R10>
	MOVL	#LCK$K_PWMODE,R0		; Stuff the lock mode in R0
	MOVL	#LCK$M_SYNCSTS!LCK$M_CONVERT!LCK$M_VALBLK,R3
	BRB	SET_LOCK

RM$LOWER_SYSLOCK::				; Convert lock to system lock at NL.
	PUSHR	#^M<R1,R2,R3,R4,R5,R10>
	MOVL	#LCK$K_NLMODE,R0		; Stuff lock mode in R0.
	MOVL	#LCK$M_SYNCSTS!LCK$M_CONVERT!LCK$M_VALBLK!LCK$M_CVTSYS,R3
	BRB	SET_LOCK

RM$LOWER_LOCK::					; Get a concurrent read lock on the file
	PUSHR	#^M<R1,R2,R3,R4,R5,R10>
	MOVL	#LCK$K_CRMODE,R0		; Stuff the lock mode in R0
	MOVL	#LCK$M_SYNCSTS!LCK$M_CONVERT!LCK$M_VALBLK,R3

SET_LOCK:
	MOVL	R9,R10				; Move ifab into r10 for stall

	ASSUME	<IFB$C_BID&1>	EQ	1	;  in case it's really irab
	ASSUME	<IRB$C_BID&1>	EQ	0
	ASSUME	IFB$B_BID	EQ	IRB$B_BID

	BLBS	IFB$B_BID(R10),1$		; Do we have a ifab or irab
	MOVL	IRB$L_IFAB_LNK(R10),R10		; Get ifab
1$:	MOVL	IFB$L_SFSB_PTR(R10),R4		; Get sfsb
	BEQL	ENQSUC				; If the file is not shared
						; ignore the request

	MOVL	R0,R5				; Save lock value
	BGEQ	10$				; Branch if not restore
	MOVB	SFSB$B_PREMODE(R4),R5		; Restore previous mode

;
; Save the current mode of the lock in case this is a conversion
; for a I/O stall
;

10$:	MOVB	SFSB$B_CURMODE(R4),SFSB$B_PREMODE(R4)

;
; See if we already have the lock being requested, if so exit
; NOTE:	If someone expects to get current information in the
;	lock value block by requesting a lock of the same mode
;	will be disapointed by this.
;

	CMPB	R5,SFSB$B_CURMODE(R4)
	BEQL	ENQSUC

;
; Store the eof info into the value block
;

	ASSUME	IFB$L_EBK	EQ	<IFB$L_HBK + 4>
	ASSUME	SFSB$L_EBK	EQ	<SFSB$L_HBK + 4>

	MOVQ	IFB$L_HBK(R10),SFSB$L_HBK(R4)
	BEQL	BAD_EBKHBK

;
; Do the ENQ conversion.
;

ENQ:	BSBW	RM$SETEFN			; Allocate event flag
	POPR	#^M<R0>				; Get the flag
	$ENQ_S	EFN	= R0,-
		LKMODE	= R5,-
		LKSB	= SFSB$L_LKSB(R4),-
		FLAGS	= R3,-
		ASTADR	= RM$STALLAST,-
		ASTPRM	= R9

	BLBC	R0,ENQERR			; We ok?
	CMPW	R0,#SS$_SYNCH			; Did it complete?
	BEQL	10$				; Yes, so do not stall
	PUSHR	#^M<R3>				; Save ENQ flags around stall
	BSBW	RM$STALL_LOCK			; Stall for the lock
	POPR	#^M<R3>				; Restore ENQ flags.
10$:	MOVZWL	SFSB$W_STATUS(R4),R0		; Get the final status
	BLBC	R0,ENQERR			; Branch on failure


;
; Store the eof info into the ifb from the value block
;

	ASSUME	IFB$L_EBK	EQ	<IFB$L_HBK + 4>
	ASSUME	SFSB$L_EBK	EQ	<SFSB$L_HBK + 4>

HBKEBK:	MOVQ	SFSB$L_HBK(R4),IFB$L_HBK(R10)
	BEQL	BAD_EBKHBK1

ALTSUC:	MOVB	R5,SFSB$B_CURMODE(R4)		; Save the current lock value
ENQSUC:	RMSSUC					; Signal success
ENQRET:	POPR	#^M<R1,R2,R3,R4,R5,R10>		; Restore registers
	RSB					; Return

BAD_EBKHBK:
	RMSPBUG	FTL$_BADEBKHBK
BAD_EBKHBK1:
	RMSPBUG	FTL$_BADEBKHBK

ENQERR:	
	CMPW	#SS$_DEADLOCK,R0		; Was it deadlock?
	BEQL	ENQ				; Try it again if it was.
	CMPW	#SS$_VALNOTVALID,R0		; Did Lock manager gave us old value block?
	BNEQ	10$				; No, go map error.
	JSB	VALIDATE_EBK_HBK		; Yes, get correct hbk/ebk values.
	BLBS	R0,HBKEBK
	BRB	20$
10$:	RMSERR	ENQ,R1				; default to ENQ error for RM$MAPERR
20$:	BSBW	RM$MAPERR			; go map the error
	BRW	ENQRET				; and return


	.SBTTL	RM$RLS_SFSB - Deallocate the SFSB

;++
;
; RM$RLS_SFSB
;
;	This routine deallocates the SFSB and deques the file lock.
;
; Calling Sequence:
;
;	BSBW	RM$RLS_SFSB
;
; Input Parameters:
;
;	r9	ifab address
;
; Implicit Inputs:
;
;	none
;
; Output Parameters:
;
;	none
;
; Implicit Outputs:
;
;	none
;
; Completion Codes:
;
;	none
;
; Side Effects:
;
;	none
;
;--

RM$RLS_SFSB::
	PUSHR	#^M<R1,R4> 		; save work registers

	MOVL	IFB$L_SFSB_PTR(R9),R4	; get address of sfsb
	BEQL	30$			; exit if none

;
; Store the eof info into the value block
;

	ASSUME	IFB$L_EBK	EQ	<IFB$L_HBK + 4>
	ASSUME	SFSB$L_EBK	EQ	<SFSB$L_HBK + 4>

	MOVQ IFB$L_HBK(R9),SFSB$L_HBK(R4)

;
; If a recovery-unit is active on this file then save the file lock
;

	BBC	#IFB$V_RUP,IFB$B_JNLFLG2(R9),10$; branch if no RU in prog
	BSBW	RM$LOWER_LOCK			; lower the lock to correct mode
	BSBW	RM$SAVE_FL			; go save the file lock
	BRB	20$

;
; Deq the lock
;

10$:	$DEQ_S	LKID	= SFSB$L_LOCK_ID(R4),-
		VALBLK	= SFSB$L_LVB(R4)

;
; Deallocate the sfsb
;

20$:	BSBW	RM$RETBLK1		; address in r4
	CLRL	IFB$L_SFSB_PTR(R9)	; clear the ifab pointer to it

30$:	POPR	#^M<R1,R4>		; restore registers
	RSB				; return to caller


	.SBTTL	RM$INIT_GBSB - Allocate and init the GBSB

;++
;
; RM$INIT_GBSB
;
;	This routine allocates the GBSB.  The GBSB is allocated one per IFAB,
;	and is used to contain the necessary local lock manager context for
;	locking a global section used for global buffers.
;
;	An exclusive lock is requested on the global section.
;
; Calling Sequence:
;
;	BSBW	RM$INIT_GBSB
;
; Input Parameters:
;
;	r10	ifab address
;	r9	irab address
;
; Implicit Inputs:
;
;	none
;
; Output Parameters:
;
;	r0	status code
;
; Implicit Outputs:
;
;	gbsb allocated and initialized, an EX lock made on it
;	if an enq error occurs, the $FAB stv field has the system service
;	code...
;
; Completion Codes:
;
;	suc, dme, enq
;
; Side Effects:
;
;	None...
;
;--

RM$INIT_GBSB::
	PUSHR	#^M<R1,R2,R3,R4,R5,R6,R7> 	; save work registers
	MOVZBL	#GBSB$C_BLN,R2			; get block length to allocate
	MOVL	R10,R1				; allocate from same page as ifab
	BSBW	RM$GETSPC			; allocate it
	BLBS	R0,1$				; branch if ok
	RMSERR	DME				; dynamic memory exhausted
	BRW	25$				; return error to caller
1$:	MOVL	R1,IFB$L_GBSB_PTR(R10)		; address of GBSB in IFAB
	ASSUME	GBSB$B_BLN	EQ	GBSB$B_BID+1
	MOVW	#GBSB$C_BID+<GBSB$C_BLN@6>,-
		GBSB$B_BID(R1)			; fill in block length and id

;
; Make a descriptor of the first two longwords in GBSB, pointing to RESNAM
; field.  Fill RESNAM with copy of RESNAM from SFSB.  
;

	MOVAL	GBSB$T_RESNAM(R1),-		; Move address of RESNAM to descriptor.
		GBSB$L_ADDRESS(R1)
	MOVL	IFB$L_SFSB_PTR(R10),R2		; Move SFSB address to R2.
	MOVW	SFSB$W_NAME_LEN(R2),-		; Move length of RESNAM into desc.
		GBSB$W_NAME_LEN(R1)
	MOVC3	GBSB$W_NAME_LEN(R1),-
		SFSB$T_RESNAM(R2),-		; Move the SFSB RESNAM to the GBSB
		GBSB$T_RESNAM(R1)		;  resnam field to name the lock.

	MOVL	IFB$L_GBSB_PTR(R10),R4		; restore GBSB address into R4

	TSTL	G^EXE$GL_SYSID_LOCK		; Make sure we have a parent lock.
	BNEQ	5$				; Yes, continue
	RMSPBUG	FTL$_NOPARENT			; No parent,  boom....

;
; Lock the global section for exclusive access.
;

5$:	JSB	RM$SETEFN			; Allocate event flag
	POPR	#^M<R0>				; Get the flag
	$ENQ_S	LKMODE	= #LCK$K_EXMODE,-
		ACMODE	= #PSL$C_EXEC,-
		EFN	= R0,-
		ASTADR	= RM$STALLAST,-
		ASTPRM	= R9,-
		PARID	= G^EXE$GL_SYSID_LOCK,-
		LKSB	= GBSB$L_LKSB(R4),-
		RESNAM	= GBSB$Q_FILENAME(R4),-
		FLAGS	= #LCK$M_VALBLK!LCK$M_SYNCSTS!LCK$M_SYSTEM

	BLBC	R0,40$				; Error?
	CMPW	R0,#SS$_SYNCH			; Did it complete?
	BEQL 	10$				; YES, do not stall
	BSBW	RM$STALL_LOCK			; Stall for the lock
10$:	
	MOVZWL	GBSB$W_STATUS(R4),R0		; Get final status
	BLBC	R0,40$				; Did it work?
20$:    MOVB	#LCK$K_EXMODE,GBSB$B_CURMODE(R4); Save the current lock value
	RMSSUC					; indicate success
25$:	POPR	#^M<R1,R2,R3,R4,R5,R6,R7>	; restore registers
	RSB					; return to caller

;
; An error occurred on the ENQ.  See if we can recover from it.
;

40$:	
	CMPW	#SS$_DEADLOCK,R0		; Was it deadlock?
	BEQL	5$				; Try it again if it was.
	CMPW	#SS$_VALNOTVALID,R0		; Did Lock manager gave us old value block?
	BEQL	20$				; Yes, treat as alternate success
	RMSERR	ENQ,R1				; default to ENQ error for RM$MAPERR
	BSBW	RM$MAPERR			; go map the error
	BRB	25$				; and return


	.SBTTL	Global Buffer Section locking routines

;++
;
; RM$RAISE_GBS_LOCK
; RM$LOWER_GBS_LOCK
;
;	These routines modify the lock mode on a global buffer section.
;
; Calling Sequence:
;
;	BSBW	RM$RAISE_GBS_LOCK	- Get an exclusive lock on the section
;	BSBW	RM$LOWER_GBS_LOCK	- Get a concurrent read lock on the section
;
; Input Parameters:
;
;	r9	ifab/irab address
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;
;	r0	status code
;
; Implicit Outputs:
;	none
;
; Completion Codes:
;
;	suc, enq
;
; Side Effects:
;
;	Could stall
;
;--

RM$RAISE_GBS_LOCK::				; Convert GBS lock to EX.
	MOVL	#LCK$K_EXMODE,R0		; Place lock mode in R0.
	BRB	TAKE_GBS_LOCK

RM$LOWER_GBS_LOCK::				; Convert GBS lock to NL.
	MOVL	#LCK$K_NLMODE,R0		; Place lock mode in R0.

TAKE_GBS_LOCK:
	PUSHR	#^M<R1,R2,R3,R4,R5,R10>
	MOVL	R0,R5				; Save lock value
	MOVL	R9,R10				; Move ifab into r10 for stall
	ASSUME	<IFB$C_BID&1> EQ 1		;  in case it's really irab
	ASSUME	<IRB$C_BID&1> EQ 0
	ASSUME	IFB$B_BID EQ IRB$B_BID
	BLBS	IFB$B_BID(R10),10$		; Do we have a ifab or irab
	MOVL	IRB$L_IFAB_LNK(R10),R10		; Get ifab
10$:	MOVL	IFB$L_GBSB_PTR(R10),R4		; Get gbsb
	BEQL	50$				; If there is no global buffer section,
						;  then ignore the request
;
; See if we already have the lock being requested, if so exit
;

	CMPB	R5,GBSB$B_CURMODE(R4)
	BEQL	50$

;
; Convert the lock on the global buffer section
;

20$:	BSBW	RM$SETEFN			; Allocate event flag.
	POPR	#^M<R0>				; Get the flag.
	$ENQ_S	EFN	= R0,-
		LKMODE	= R5,-
		LKSB	= GBSB$L_LKSB(R4),-
		FLAGS	= #LCK$M_SYNCSTS!LCK$M_SYSTEM!LCK$M_CONVERT!LCK$M_VALBLK,-
		ASTADR	= RM$STALLAST,-
		ASTPRM	= R9		

	BLBC	R0,70$				; We ok?
	CMPW	R0,#SS$_SYNCH			; Did it complete?
	BEQL	30$				; YES, so do not stall
	BSBW	RM$STALL_LOCK			; Stall for the lock
30$:	
	MOVZWL	GBSB$W_STATUS(R4),R0		; Get the final status
	BLBC	R0,70$				; Branch on failure
40$:	MOVB	R5,GBSB$B_CURMODE(R4)		; Save the current lock value
50$:	RMSSUC					; Signal success
60$:	POPR	#^M<R1,R2,R3,R4,R5,R10>		; Restore registers
	RSB					; Return


70$:	
	CMPW	#SS$_DEADLOCK,R0		; Was it deadlock?
	BEQL	20$				; Try it again if it was.
	CMPW	#SS$_VALNOTVALID,R0		; Did Lock manager gave us old value block?
	BEQL	40$				; Yes, treat as alternate success
	RMSERR	ENQ,R1				; Default to ENQ error for RM$MAPERR
	BSBW	RM$MAPERR			; Go map the error
	BRB	60$				;  and return


	.SBTTL	RM$RLS_GBSB - Deallocate the GBSB and dequeue the lock on it

;++
;
; RM$RLS_GBSB
;
;	This routine deallocated the GBSB and then dequeues the lock it had on
;	the global buffer section.  The dequeue also writes out the lock value
;	block to the lock manager.
;
; Calling Sequence:
;
;	BSBW	RM$RLS_GBSB
;
; Input Parameters:
;
;	r9	irab/ifab address
;
; Implicit Inputs:
;	none
;
; Output Parameters:
;
;	r0	status code
;
; Implicit Outputs:
;	none
;
; Completion Codes:
;
;	suc, deq
;
; Side Effects:
;
;	none
;
;--

RM$RLS_GBSB::
	PUSHR	#^M<R1,R4,R10>
	MOVL	R9,R10				; Move ifab into r10

	ASSUME	<IFB$C_BID&1>	EQ	1	;  in case it's really irab
	ASSUME	<IRB$C_BID&1>	EQ	0
	ASSUME	IFB$B_BID	EQ	IRB$B_BID

	BLBS	IFB$B_BID(R10),10$		; Do we have a ifab or irab
	MOVL	IRB$L_IFAB_LNK(R10),R10		; Get ifab
10$:	MOVL	IFB$L_GBSB_PTR(R10),R4		; Get gbsb
	BEQL	30$				; Skip if none.
20$:	CLRL	IFB$L_GBH_PTR(R10)		; Indicate that global section is gone.
	$DEQ_S	LKID	= GBSB$L_LOCK_ID(R4),-	; Dequeue the lock,
		VALBLK	= GBSB$L_LKSB+8(R4)	;  writing out the lock value block.
	CLRL	IFB$L_GBSB_PTR(R10)		; Indicate that GBSB is gone.
	BSBW	RM$RETBLK1			; Deallocate the GBSB, address in R4.
30$:	POPR	#^M<R1,R4,R10>
	RSB					; Return to caller.


	.SBTTL	VALIDATE_EBK_HBK
;++
;
; VALIDATE_EBK_HBK
;
;  This routine reads the record attributes for a file from the disk to see
;  if the value block or the disk contains the most up to date information,
;  and move the latest information into the SFSB for use in the value block
;  and ifab.
;
; Input Parameters:
;
;	r9 - irab/ifab address
;
; Output Parameters:
;	none
;
; Routine Value:
;
;	Any valid RMS or SYSTEM error code.
;
; Side Effects:
;
;	none
;
;--

	$NEWPSECT	RM$RMSMISC

ATR_LIST_LEN =	12
BUF_LEN:.BYTE	ATR_LIST_LEN+FHCLEN+8+FIB$C_LENGTH

;
; Note that the buffer allocated in this routine contains the following
; structures, all of which are used as parameters to the file system.
;	1. attribute list (last longword in list is a zero-longword)
;	2. record attributes buffer
;	3. fib descriptor (8 bytes)
;	4. fib
;

VALIDATE_EBK_HBK:
	PUSHR	#^M<R1,R2,R3,R4,R5,R10>

	ASSUME	SFSB$L_EBK	EQ	<SFSB$L_HBK + 4>
	ASSUME	FAT$L_EFBLK	EQ	<FAT$L_HIBLK + 4>
	ASSUME	<IFB$C_BID&1>	EQ	1
	ASSUME	<IRB$C_BID&1>	EQ	0
	ASSUME	IFB$B_BID	EQ	IRB$B_BID

	MOVL	R9,R10				; Move ifab into r10 for stall
	BLBS	IFB$B_BID(R10),1$		; Do we have a ifab or irab
	MOVL	IRB$L_IFAB_LNK(R10),R10		; Get ifab
1$:	MOVZBL	BUF_LEN,R2			; r2 = length of buffer to alloc
	JSB	RM$GETSPC1			; Get the space (returned in R1)
	BLBS	R0,10$				; Error?
	RMSERR	DME,R1				; Yes, map it and return.
	BRW	60$
10$:	MOVL	#<ATR$C_RECATTR@16>+FHCLEN,(R1)	; First longword of attrib list
	MOVAB	ATR_LIST_LEN(R1),4(R1)		; Second longword points to buffer.
	MOVAL	FHCLEN+ATR_LIST_LEN(R1),R3	; r3 = fib desc address
	MOVZBL	#FIB$C_LENGTH,(R3)		; fill in length field of desc
	MOVAL	8(R3),4(R3)			; fill in address of fib
	MOVB	IFB$B_AGENT_MODE(R10),-		; move agent mode into fib
		8+FIB$B_AGENT_MODE(R3)
	MOVL	R1,R4				; Save address of allocated space.
	JSB	RM$SETEFN			; Get event flag.
	POPR	#^M<R0>				; Put it in R0.
	$QIO_S	EFN	= R0,-			; Go read the header attributes
		CHAN 	= IFB$W_CHNL(R10),-	;  from disk.
		FUNC 	= #IO$_ACCESS,-		; qio function code 
		IOSB	= IFB$L_IOS(R9),-	; io status block
		ASTADR	= RM$STALLAST,-		; ast address
		ASTPRM	= R9,-			; ast parameter
		P1	= (R3),-		; fib descriptor address
		P5 	= R1			; attribute list address
	BLBC	R0,50$				; Did qio succeed?
	JSB	RM$STALL_LOCK			; Yes, stall for io to complete.
	BLBC	R0,50$				; Return if unsuccessful.
	ADDL2	#ATR_LIST_LEN,R4		; Get address of buffer.
	ROTL	#16,FAT$L_HIBLK(R4),FAT$L_HIBLK(R4) ; Rotate HBK.
	ROTL	#16,FAT$L_EFBLK(R4),FAT$L_EFBLK(R4) ; Rotate EBK.
	MOVL	IFB$L_SFSB_PTR(R10),R3		; Put SFSB address in R3.
	CMPL	FAT$L_EFBLK(R4),SFSB$L_EBK(R3)	; Is disk EOF mark higher?
	BGTR	30$				; Yes, use disk info.
	CMPL	FAT$L_HIBLK(R4),SFSB$L_HBK(R3)	; Is disk HBK mark higher?
	BLEQ	40$				; No, use value block values.
30$:	MOVQ	FAT$L_HIBLK(R4),SFSB$L_HBK(R3)	; Move disk ebk/hbk to sfsb.
40$:	SUBL2	#ATR_LIST_LEN,R4		; Prepare to give back space.
50$:	MOVZBL	BUF_LEN,R2			; Length of space to deallocate
	JSB	RM$RETSPC1			; Address in R4
60$:	POPR	#^M<R1,R2,R3,R4,R5,R10>		; Restore registers.
	RSB					; Return.

	.END
