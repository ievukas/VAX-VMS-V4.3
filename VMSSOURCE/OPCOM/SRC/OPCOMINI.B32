MODULE	OPC$OPCOMINIT	(
			 LANGUAGE (BLISS32),
			 IDENT = 'V04-000'
			) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:
!
!	OPCOM
!
! ABSTRACT:
!
!	This module contains the logic to start and initialize OPCOM.
!
! Environment:
!
!	VAX/VMS operating system.
!
! Author:
!
!	Steven T. Jeffreys
!
! Creation date:
!
!	March 10, 1981
!
! Revision history:
!
!	V03-009	CWH3169		CW Hobbs			5-May-1984
!		Second pass for cluster-wide OPCOM:
!		 - When we come up, ask for ACKs from any nodes that we can
!		   see.
!		 - Use SYI$_NODENAME rathen than SCSNODE so that a useful
!		   length is returned
!
!	V03-003	CWH3003		CW Hobbs			14-Apr-1984
!		Change SCSNODE syi items to the single item SYI$_SCSNODE.
!
!	V03-002	CWH3002		CW Hobbs			16-Sep-1983
!		Use jacket routines for VM calls
!
!	V03-001	CWH3001		CW Hobbs			30-Jul-1983
!		Various and sundry things to make OPCOM distributed
!		across the cluster.
!
! V02-002	STJ0162		Steven T. Jeffreys,	08-Feb-1982
!		Make references to library routines use general addressing mode.
!
!
!--

BEGIN						! Start of OPCOMMAIN

LIBRARY	'SYS$LIBRARY:LIB.L32';
LIBRARY 'LIB$:OPCOMLIB';

FORWARD ROUTINE
	OPCOM_INIT	: NOVALUE,	! Initialization routine
	KERNEL_SETUP;			! Kernel mode setup

BUILTIN
	INSQUE,					! Insert entry onto a queue
	REMQUE;					! Remove entry from a queue

GLOBAL ROUTINE OPCOM_INIT : NOVALUE =

!++
! Functional description:
!
!	This routine will start OPCOM and perform all of
!	the necesary initialization to ensure OPCOM's
!	correct functioning.
!
! Input:
!
!	None.
!
! Implicit Input:
!
!	The operator mailbox exists and is available.
!	The process has CHMKRNL privilege.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	The operator logfile will be created on the system disk.
!
! Routine value:
!
!	SS$_NOPRIV	- The process does not have CHKRNL privilege.
!	SS$_DEVALLOC 	- The operator mailbox already has a listener.
!	SS$_NORMAL	- OPCOM successfully completed its shutdown sequence.
!--

BEGIN						! Start of OPCOM_INIT

EXTERNAL ROUTINE
	CLUSMSG_ACK_PLEASE : NOVALUE,		! Request an ACK from another node
	CLUSUTIL_CONFIGURE,			! Cluster configuration
	CLUSUTIL_INIT	 : NOVALUE,		! Cluster initializations
	CLUSUTIL_NODE_MESSAGE : NOVALUE,	! Tell about cluster initializations
	OPRENABLE_HANDLER: NOVALUE,		! Enable operator terminal
	LOGFILE_HANDLER	 : NOVALUE,		! Initialize system logfile
	SHARE_INIT_OPER_NAME : NOVALUE,		! Initialize the operator name vector
	TIME_STAMP	 : NOVALUE;		! Issue periodic timestamp

EXTERNAL LITERAL
	OCD_K_TYPE,				! OCD structure type
	MIN_SCOPE,				! Min scope value
	MAX_SCOPE,				! Max scope value
	MIN_DS_TYPE,				! Min DS_TYPE value
	MAX_DS_TYPE;				! Max DS_TYPE value

EXTERNAL
	SYI_SWPOUTPGCNT	: LONG,
	GLOBAL_STATUS	: BITVECTOR,		! Global status flags
	OCD_VECTOR	: VECTOR,		! Pointers to OCD's
	SCB_TABLE	: VECTOR,		! Start of SCB table
	WAIT_DELTA	: $bblock,		! Quadword AST wait time
	OPA0_ENABLE_MSG	: $bblock,		! Descriptor of enable message
	LOGFILE_MSG	: $bblock,		! Descriptor of INIT message
	OPER_MBX_CHAN	: WORD,			! Channel to _MBA2:
	OPER_MBX_NAME	: $bblock,		! Quadword descriptor of '_MBA2:'
	LCL_NODENAME	: VECTOR,		! Name of local node (DECnet or VAXcluster)
	LCL_NOD		: $ref_bblock,		! Local node block
	LCL_CSID	: LONG,			! CSID for local node
	NOD_HEAD	: VECTOR,		! Head of node queue
	LOGFILE_FAB	: $ref_bblock,		! RMS control structure
	LOGFILE_RAB	: $ref_bblock,		! RMS control structure
	LOGFILE_OPEN	: LONG;			! Global boolean

LOCAL
	IOSB		: $bblock [8],		! I/O status block
	SIZE		: LONG,			! Size of data structure
	TYPE		: LONG,			! Type of data structure
	BLOCK		: $ref_bblock,		! VM block
	SCB		: $ref_bblock,		! SCB block
	PTR		: LONG,
	STATUS		: LONG;

OWN
    NODENAME_BUF	: VECTOR [16, BYTE],
    NODENAME_DESC	: VECTOR [2, LONG] INITIAL (0, NODENAME_BUF),
    TRANLOG_DESC	: VECTOR [2, LONG] INITIAL (16, NODENAME_BUF),
    SYI_ITEMS		: VECTOR [7, LONG] PRESET (
			    [0] = (SYI$_NODENAME^16 OR 16),
			    [1] = NODENAME_BUF,
			    [2] = NODENAME_DESC [0],
			    [3] = (SYI$_SWPOUTPGCNT^16 OR 4),
			    [4] = SYI_SWPOUTPGCNT,
			    [5] = 0,
			    [6] = 0);

!
! Assign a channel to the operator mailbox, _MBA2:.  The mailbox is
! defined by the EXEC module DEVICEDAT, and has an initial reference
! count of 1.  This means that no one can allocate the device, no one
! can delete it, and that once we assign a channel to it, the reference
! count had better be 2.  If the $ASSIGN fails, then give up.
!
IF NOT (STATUS = $ASSIGN (CHAN=OPER_MBX_CHAN, DEVNAM=OPER_MBX_NAME))
THEN
    $signal_stop (.STATUS);
!
! We now have a channel to the operator mailbox.  Now we must go into kernel
! mode to do some further checking.  We must guaranty that we have CHMKRNL
! privilege, and that the reference count on the operator mailbox is equal to
! 2.  While in kernel mode, also set the OPR bit in the default operator UCB,
! _OPA0:.
!
IF NOT (STATUS = $CMKRNL (ROUTIN=KERNEL_SETUP))
THEN
    !
    ! Something is wrong.  The only error that we can tolerate is the
    ! nonexistence of _OPA0:, which is indicated by a status of SS$_NOSUCHDEV.
    ! Any other error condition will force us to abort.
    !
    IF NOT (.STATUS EQL SS$_NOSUCHDEV)
    THEN
	$signal_stop (.STATUS);

!
! Initialize the vector of operator names
!
SHARE_INIT_OPER_NAME ();

!
! Build the look-aside lists for all data structures.
!
INCR J FROM MIN_DS_TYPE TO MAX_DS_TYPE DO
    BEGIN
    SCB  = .SCB_TABLE [.J-1];		! Get the SCB address
    SIZE = .SCB [SCB_W_SIZE];		! Get data structure size
    TYPE = .J;				! Get data structure type
    INCR I FROM 1 TO .SCB [SCB_W_LAL_COUNT] DO
	BEGIN
	!
	! Allocate a block of memory, initialize it, and
	! put it on the appropriate look-aside list.
	!
	IF NOT (STATUS = OPC$GET_VM (SIZE, BLOCK))
	THEN
	    $signal_stop (.STATUS);
	CH$FILL (0, .SIZE, .BLOCK);	! Zero the block
	BLOCK [HDR_L_FLINK] = BLOCK [HDR_L_FLINK];
	BLOCK [HDR_L_BLINK] = BLOCK [HDR_L_FLINK];
	BLOCK [HDR_W_SIZE] = .SIZE;	! Set block size
	BLOCK [HDR_B_TYPE] = .TYPE;	! Set block type
	BLOCK [HDR_V_LAL] = TRUE;	! Mark this as an LAL block
	INSQUE (BLOCK [HDR_L_FLINK], SCB [SCB_L_FLINK]);
	END;
    END;

!
! Do a $GETSYI to get information about the current system
!
IF NOT (STATUS = $GETSYI (ITMLST=SYI_ITEMS))
THEN
    $signal_stop (.STATUS);
!
! If the SCS nodename is null, try to translate SYS$NODE to find the DECnet name.  Remove the "_" and "::"
! from the translated name.
!
IF .NODENAME_DESC [0] EQL 0
THEN
    BEGIN
    IF NOT (STATUS = $TRNLOG (LOGNAM=%ASCID 'SYS$NODE', RSLLEN=TRANLOG_DESC, RSLBUF=TRANLOG_DESC, DSBMSK=6))
    THEN
	$signal_stop (.STATUS);
    IF .STATUS EQL SS$_NORMAL			! If we translated, remove the underscores and colons
    THEN
	BEGIN
	PTR = CH$FIND_NOT_CH (.TRANLOG_DESC [0], .TRANLOG_DESC [1], %C '_');
	IF .PTR NEQ 0
	THEN
	    BEGIN
	    TRANLOG_DESC [0] = .TRANLOG_DESC [0] - (.PTR - .TRANLOG_DESC [1]);
	    TRANLOG_DESC [1] = .PTR;
	    END;
	PTR = CH$FIND_CH (.TRANLOG_DESC [0], .TRANLOG_DESC [1], %C ':');
	IF .PTR NEQ 0
	THEN
	    TRANLOG_DESC [0] = .PTR - .TRANLOG_DESC [1];
	NODENAME_DESC [0] = .TRANLOG_DESC [0];
	NODENAME_DESC [1] = .TRANLOG_DESC [1];
	END;
    END;
!
! Set the global message
!
IF .NODENAME_DESC [0] NEQ 0
THEN
    BEGIN
    LCL_NODENAME [0] = .NODENAME_DESC [0];
    LCL_NODENAME [1] = .NODENAME_DESC [1];
    END;
!
! Perform cluster initialization functions necessary before can enable
! operators.
!
CLUSUTIL_INIT ();

!
! Set up _OPA0: as the default operator.  This is done by calling the enable handler with a the
! address of a buffer descriptor that points to a predefined enable message.
!
OPRENABLE_HANDLER (OPA0_ENABLE_MSG);

!
! Open the log file.  This is done by calling the INIT message handler with the address of a buffer
! descriptor that points to a predefined INIT message.  Set logging enabled.
!
LOGFILE_HANDLER (LOGFILE_MSG);
GLOBAL_STATUS [GBLSTS_K_LOGGING_ENABLED] = TRUE;

!
! Configure the nodes into the cluster database, and notify any
! operators.  This should be done after OPA0 and the logfile are ready.
!
IF .GLOBAL_STATUS [GBLSTS_K_IN_VAXcluster]
THEN
    BEGIN
    CLUSUTIL_NODE_MESSAGE (.LCL_NOD, OPC$_NODE_INIT, FALSE);	! Tell them we have initialized the local node
    IF CLUSUTIL_CONFIGURE ()					! Now bring in everybody else, true if anyone
    THEN							!  has been added to the club
	BEGIN
	LOCAL
	    NOD : $REF_BBLOCK;
	NOD = .NOD_HEAD [0];					! Start at the head of the node queue
	WHILE .NOD NEQ NOD_HEAD [0]				! While not pointing at the head
	DO
	    BEGIN
	    IF .NOD [NOD_L_NODE_CSID] NEQ .LCL_CSID		! If not the local node
	    THEN
		CLUSMSG_ACK_PLEASE (.NOD);			! Request an ack
	    NOD = .NOD [NOD_L_FLINK];				! Move to the next node
	    END;
	END;
    END;
!
! Set the operator mailbox protection to
! allow OWNER reads and writes.
!
IF NOT (STATUS = $QIO  (FUNC = (IO$_SETMODE OR IO$M_SETPROT),
			CHAN = .OPER_MBX_CHAN,
			IOSB = IOSB,
			P2 = READ_WRITE
		       ))
THEN
   $signal_stop (.STATUS);

!
! Check the function status.
!
IF NOT (STATUS = .IOSB [0,0,16,0])
THEN
   $signal_stop (.STATUS);

!
! Set the timer ast for the first time stamp message.
! Also set the associated GLOBAL_STATUS bits.
!
GLOBAL_STATUS [GBLSTS_K_BUSY] = TRUE;
GLOBAL_STATUS [GBLSTS_K_TIMESTAMP_PENDING] = FALSE;
IF NOT (STATUS = $SETIMR (EFN = EFN_K_TIME_STAMP, DAYTIM = WAIT_DELTA, ASTADR = TIME_STAMP))
THEN
    $signal_stop (.STATUS);

END;						! End of OPCOM_INIT


ROUTINE KERNEL_SETUP =

!++
! Functional description:
!
!	This routine executes in kernel mode, and performs some
!	additional setup necessary for the correct operation of OPCOM.
!
! Input:
!
!	None.
!
! Implicit Input:
!
!	A channel has been assigned to _MBA2:.
!
! Output:
!
!	None.
!
! Implict output:
!
!	If the _OPA0: exists, then the OPR bit in its UCB is set.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	SS$_NORMAL	if everything worked.
!	SS$_DEVALLOC if _MBA2: has a reference count greater than 2.
!	SS$_NOSUCHDEV	if _OPA0: does not exist.
!--

BEGIN						! Start of KERNEL_SETUP

EXTERNAL
	SYS$GL_OPRMBX	: $bblock ADDRESSING_MODE (GENERAL);	! Address of MBA2 UCB

OWN
	DEF_OPER_DEV	: $string_desc ('_OPA0:');! Default operator device name

LOCAL
	STATUS		: LONG;

!
! Check the reference count in the _MBA2: UCB.  If it is greater than 2,
! it means that there is already a listener at the mailbox.
!
IF .SYS$GL_OPRMBX [UCB$W_REFC] GTR 2
THEN
    RETURN (SS$_DEVALLOC);

!
! Set the OPR bit in the default operator UCB.
!
RETURN (EXE$SETOPR (DEF_OPER_DEV,ON));
END;						! End of KERNEL_SETUP

END
ELUDOM						! End of OPCOMINIT
