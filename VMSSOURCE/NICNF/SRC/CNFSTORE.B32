%TITLE	'DECnet Ethernet Configurator Module'
MODULE CNFSTORE		(
			LANGUAGE (BLISS32),
			IDENT = 'V04-000'
			) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DECnet Configurator Module (NICONFIG)
!
! ABSTRACT:
!
!	This module contains the routines for reading and storing the
!	system ID messages that are periodically broadcast on the NI.
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Bob Grosso, 	CREATION DATE:  13-Oct-1982
!
! MODIFIED BY:
!
!	V03-002	TRC0002		Terry Cassidy		Aug-23-1984
!		Inhibit processing of pad bytes in Sys ID
!
!	V03-001	RPG0001		Bob Grosso		May-19-1983
!		Correct the arguements to LIB$SIGNAL.
!
!--

%SBTTL	'Definitions'

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:STARLET';			! VMS common definitions

LIBRARY 'SHRLIB$:NMALIBRY';			! NICE code definitions

REQUIRE 'LIB$:CNFDEF.R32';

REQUIRE 'SRC$:CNFPREFIX.REQ';
    

!
! BUILTIN functions
!

BUILTIN
    INSQUE,			! INSQUE instruction
    REMQUE;			! REMQUE instruction

GLOBAL LITERAL
    SYSIDM_BUFSIZ = 64,
    ADRTYP_BUFSIZ = 14;

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE

	CNF$READ_SYSIDM,	! Read the system ID messages from the NI
	BUFFER_ID : NOVALUE,	! Buffer the ID messages and re-issue read
	STORE_ID : NOVALUE,	! Partially parse the messages and store them
	INSERT_SID;		! Place the ID messages in the circuit block

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE

!   Module CNFMAIN

	CNF$EXIT,		! Clean up and exit
	CNF$TRACE,		! Log messages to log file
	CNF$GET_ZVM,		! Get zeroed virtual memory
	CNF$FREE_VM,		! Free virtual memory

!   Module CNFWORKQ

	WKQ$ADD_WORK_ITEM;	! Add work to work queue

EXTERNAL ROUTINE

	STR$COMPARE	: ADDRESSING_MODE (GENERAL);


EXTERNAL LITERAL

	CNF$C_ASYNCH_EFN;


EXTERNAL LITERAL

	CNF$_LOGIC,	! Program logic error or unexpected condition
	CNF$_SYSID;	! Error while obtaining system ID message

EXTERNAL

	CNF$GQ_CIRSURLST : VECTOR [2];	! List of circuits under surveillance


%SBTTL	'CNF$READ_SYSIDM  Read the system id messages on the NI'
GLOBAL ROUTINE CNF$READ_SYSIDM (CIR) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!   CNF$READ_SYSIDM issues the QIO to read System ID Messages on the NI.
!
! FORMAL PARAMETERS:
!
!	cir	CIRcuit control block.  Contains buffers and information
!		on the circuit.
!
! IMPLICIT INPUTS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Always return success
!
! SIDE EFFECTS:
!	NONE
!
!--
 
    BEGIN
    MAP
	CIR : REF BBLOCK;
    LOCAL
	STATUS;

    CNF$TRACE (DBG$C_TRACE, $DESCRIPTOR('TRACE'), 
	$DESCRIPTOR ('cnf$read_sysidm'));

    !
    !	Allocate the two buffers to hold the system ID message
    !	and the message header.  If the buffers are already there
    !	then a logic error of some sort has occurred.
    !
    IF  (.CIR [CIR$L_SYSIDMBUF] NEQ 0) OR
    	(.CIR [CIR$L_ADRTYPBUF] NEQ 0)
    THEN
	SIGNAL (CNF$_LOGIC);
    EXECUTE (CNF$GET_ZVM (%REF(SYSIDM_BUFSIZ), CIR [CIR$L_SYSIDMBUF]) );
    EXECUTE (CNF$GET_ZVM (%REF(ADRTYP_BUFSIZ), CIR [CIR$L_ADRTYPBUF]) );


    CH$FILL (0, 8, CIR [CIR$W_IOSB]);	! Initialize the I/O status block

!
!   Issue QIO to read system id messages being broadcast on the NI
!
    STATUS = $QIO
	(
	FUNC = IO$_READLBLK,
	CHAN = .CIR [CIR$W_CHAN],
	EFN = CNF$C_ASYNCH_EFN,
	IOSB = CIR [CIR$W_IOSB],
	ASTADR = BUFFER_ID,
	ASTPRM = .CIR,
	P1 = .CIR [CIR$L_SYSIDMBUF],
	P2 = SYSIDM_BUFSIZ,
	P5 = .CIR [CIR$L_ADRTYPBUF]
	);

    IF NOT .STATUS THEN SIGNAL (CNF$_SYSID, 0, .STATUS);
    RETURN TRUE;
    END;				! routine CNF$READ_SYSIDM

%SBTTL	'buffer_id   Remove the system id message from buffer'
ROUTINE BUFFER_ID (CIR) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!   Buffer_id is an AST routine called when a read for a system ID on
!   the NI completes or cancels.  If the read was cancelled then the 
!   circuit's buffers are deallocated.  If the read was successful
!   then the id message must be removed to another buffer so that the buffer
!   can be re-used and the read re-issued immediately.  The circuit block
!   and the id message will be queued to the work queue to be parsed and stored.
!
! FORMAL PARAMETERS:
!
!	cir	CIRcuit control block.  Contains buffers and information
!		on the circuit.
!
! IMPLICIT INPUTS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--
 
    BEGIN
    MAP
	CIR : REF BBLOCK;

    LOCAL
	SYSIDM : REF BBLOCK;

    CNF$TRACE (DBG$C_TRACE, $DESCRIPTOR('TRACE'), 
	$DESCRIPTOR ('buffer_id'));

    !
    !	Check to see if surveillance has been disabled.
    !	Since surveillance is disabled by a routine executed from
    !	the work queue, and this routine is delivered by AST,
    !	care must be taken to ensure that errors are not introduced
    !	due to the timing of the AST completion.
    !

    !
    !	If the circuit was marked for disable but the AST was delivered
    !	before the channel was deassigned, then just quit.
    !
    IF .CIR [CIR$B_SURVEIL] EQL NMA$C_SUR_DIS
    THEN
	BEGIN
	EXECUTE (CNF$FREE_VM (%REF(ADRTYP_BUFSIZ), CIR [CIR$L_ADRTYPBUF]));
	EXECUTE (CNF$FREE_VM (%REF(SYSIDM_BUFSIZ), CIR [CIR$L_SYSIDMBUF]));
	CIR [CIR$L_ADRTYPBUF] = 0;
	CIR [CIR$L_SYSIDMBUF] = 0;
	RETURN TRUE;
	END;

    !
    !	The I/O failed, and not because the surveillance was disabled
    !	and the I/O cancelled, therefore signal the error.
    !
    IF NOT .CIR [CIR$W_IOSB]
    THEN
	BEGIN
	SIGNAL (CNF$_SYSID, 0, .CIR [CIR$W_IOSB]);
	RETURN TRUE;
	END;

    !
    !	Allocate a descriptor and fill it in
    !
    EXECUTE (CNF$GET_ZVM (%REF(DSC$C_S_BLN), SYSIDM));

    SYSIDM [DSC$A_POINTER] = .CIR [CIR$L_SYSIDMBUF];
    SYSIDM [DSC$W_LENGTH] = .CIR [CIR$W_IOSB1];

    !
    !	Do the work of copying the ID out of the CIR block at the
    !	the leisure of the work queue.  STORE_ID will have to check
    !	whether surveillance was disabled on the circuit between now
    !	and when it finally executes.
    !
    WKQ$ADD_WORK_ITEM (STORE_ID, .CIR, .SYSIDM, .CIR [CIR$L_ADRTYPBUF]);

    CIR [CIR$L_SYSIDMBUF] = 0;
    CIR [CIR$L_ADRTYPBUF] = 0;

    !
    !	While still at AST level, hurry up and re-issue the READ for the
    !	System ID messages to reduce the chance of missing any.
    !
    CNF$READ_SYSIDM (.CIR);

    RETURN TRUE;
    END;			! Routine buffer_id

%SBTTL	'store_id   Parse and store the system id message'
ROUTINE STORE_ID (CIR, SYSIDM_DSC, ADRTYPBUF) : NOVALUE =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!   Store_id is executed off the work queue.
!   The id message must be parsed and stored.  
!   If it is the id from a familiar device then the cell for 
!   that device's data is updated, otherwise a new cell is created.
!
! FORMAL PARAMETERS:
!
!	cir	     CIRcuit control block.  Contains buffers and information
!		     on the circuit.
!
!	sysidm_dsc   Descriptor of buffer containing system ID message
!
!	adrtypbuf    Buffer containing the current NI address and 
!		     protocol type
!
! IMPLICIT INPUTS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--
 
    BEGIN
    MAP
	ADRTYPBUF : REF BBLOCK,
	CIR : REF BBLOCK,
	SYSIDM_DSC : REF BBLOCK;
    LOCAL
	SID : REF BBLOCK,		! System Id storage block
	SIMBUF;


    CNF$TRACE (DBG$C_TRACE, $DESCRIPTOR('TRACE'), 
	$DESCRIPTOR ('store_id'));

    !
    !	If the circuit was not marked for disable after the AST was delivered
    !	but before STORE_ID was called from the work queue then store the
    !	system ID message in the circuit block.
    !
    IF .CIR [CIR$B_SURVEIL] EQL NMA$C_SUR_ENA
    THEN
	BEGIN

	!
	!   Allocate a buffer to hold the system ID message.
	!
	EXECUTE (CNF$GET_ZVM (%REF(SID$C_LENGTH), SID) );
	EXECUTE ($GETTIM ( TIMADR = SID [SID$Q_LSTREPORT] ));

	!
	!	Extract Current NI address and Protocol type from 
	!	the ADRTYPBUF buffer and deallocate the buffer.
	!
	CH$MOVE (SID$C_ADRLEN, .ADRTYPBUF + SID$C_ADRLEN, SID [SID$T_CURADR]);

	!
	!	If TYPE is not Protocol 260 (Remote Console system ID)
	!	Then there's been an error.
	!
!!	TBS

	!
	!	Extract and store info from the System ID Message buffer
	!
	SIMBUF = .SYSIDM_DSC [DSC$A_POINTER] + 4;	! Point to beginning of buffer and skip past 
							!  Code byte, Pad byte and Receipt number word
	!
	!   The system ID message is self describing.  A word of type code
	!   is following by a word containing the length in bytes of the data
	!   field which follows.  Loop reading a type word, length byte and
	!   processing the data field, until the whole message has been
	!   stored away in the appropriate fields of the SID which will be 
	!   placed in the CIR block.
	!
	WHILE .SIMBUF LSS (.SYSIDM_DSC [DSC$A_POINTER] + .SYSIDM_DSC [DSC$W_LENGTH]) DO
	    BEGIN
	    LOCAL
		LENGTH,
		TYPE;

	    TYPE = .(.SIMBUF) <0, 16>;		! Word of type code
	    LENGTH = .(.SIMBUF) <16, 8>;	! Byte of length of data field
	    IF .LENGTH LEQ 0
	    THEN 
		BEGIN
		CNF$TRACE (DBG$C_TRACE, $DESCRIPTOR('TRACE *** ERROR '),
		    $DESCRIPTOR ('store_id - illegal system ID field length'));
		EXITLOOP;
		END;

	    SIMBUF = .SIMBUF + 3;		! Skip type and length to data

	    !
	    !	Dispatch on field type to store data in proper location in
	    !	SID block.
	    !
	    SELECTONE .TYPE OF 
		SET

		!
		!    MOP version, MOP version ECO, MOP version User ECO
		!
		[SIM$C_MOPVERTYP]:
		    BEGIN
		    IF .LENGTH EQL 3 THEN
			BEGIN
			SID [SID$B_MOPVER] = .(.SIMBUF) <0, 8>;		! MOP version
			SID [SID$B_MOPECO] = .(.SIMBUF) <8, 16>;	! MOP version ECO
			SID [SID$B_MOPUSRECO] = .(.SIMBUF) <16, 8>;	! MOP version User ECO
			END
		    ELSE
			CNF$TRACE (DBG$C_TRACE, $DESCRIPTOR('TRACE *** ERROR '),
			    $DESCRIPTOR ('store_id - MOP'));
		    SIMBUF = .SIMBUF + .LENGTH;			! Skip over data to next TYPE
		    END;

		!
		!   Funtions are returned in a word bit mask.  To make
		!   life easier when building the SHOW response later,
		!   figure how many of the bits in the mask are set.
		!
		[SIM$C_FUNCTNTYP]:
		    BEGIN
		    BIND
			FUNCTIONS = SID [SID$W_FUNCTIONS] : BITVECTOR [SID$C_MAXFUNC];

		    IF .LENGTH NEQ 2
		    THEN
			CNF$TRACE (DBG$C_TRACE, $DESCRIPTOR('TRACE *** ERROR '),
			    $DESCRIPTOR ('store_id - FUNCTION LENGTH'));
		    SID [SID$W_FUNCTIONS] = .(.SIMBUF) <0, 16>;
		    SIMBUF = .SIMBUF + .LENGTH;			! Skip over data to next TYPE

		    !
		    !	Count the number of bits that are set
		    !
		    INCR INDEX FROM 0 TO SID$C_MAXFUNC - 1 DO
			IF .FUNCTIONS [.INDEX]
			THEN SID [SID$B_NUMFUNC] = .SID [SID$B_NUMFUNC] + 1;
		    END;

		!
		!   Get the 6-byte Hardware address
		!
		[SIM$C_HDWADRTYP]:
		    BEGIN
		    CH$MOVE (SID$C_ADRLEN, .SIMBUF, SID [SID$T_HRDWADR]);
		    SIMBUF = .SIMBUF + .LENGTH;			! Skip over data to next TYPE
		    END;

		!
		!   Get the device type
		!
		[SIM$C_DEVICETYP]:
		    BEGIN
		    SID [SID$B_DEVICE] = .(.SIMBUF) <0, 8>;
		    SIMBUF = .SIMBUF + .LENGTH;			! Skip over data to next TYPE
		    END;

		!
		!   There is a data field returned which we don't understand.
		!   Skip over it and proceed merrily on our way.
		!
		[OTHERWISE]:
		    BEGIN
		    CNF$TRACE (DBG$C_TRACE, $DESCRIPTOR('TRACE *** ERROR '),
			$DESCRIPTOR ('store_id'));
		    SIMBUF = .SIMBUF + .LENGTH;			! Skip over data to next TYPE
		    END;

		TES;

	    END;				! While parsing System ID Message buffer

	!
	!   Place the SID into the circuit block on an ordered linked list
	!
	INSERT_SID (.SID, .CIR);
	END;					! If surveillance was still enabled

    !
    !	If the circuit was marked for disable after the AST was delivered
    !	but before STORE_ID was called from the work queue then just 
    !	deallocate the buffers and quit.
    !
    EXECUTE (CNF$FREE_VM (%REF(ADRTYP_BUFSIZ), ADRTYPBUF) );
    EXECUTE (CNF$FREE_VM (%REF(SYSIDM_BUFSIZ), SYSIDM_DSC [DSC$A_POINTER]) );
    EXECUTE (CNF$FREE_VM (%REF(DSC$C_S_BLN), SYSIDM_DSC));

    RETURN TRUE;
    END;			! Routine Store_id

%SBTTL	'insert_sid  Insert SID into CIR block'
ROUTINE INSERT_SID (SID, CIR) =
 
!++
! FUNCTIONAL DESCRIPTION:
!
!  Place the system ID message into a doubly linked list of system ID
!  messages in the CIR block, ordered by NI hardware address.
!
! FORMAL PARAMETERS:
!
!	sid	System ID storage block.
!
!	cir	CIRcuit control block.  Contains buffers and information
!		on the circuit.
!
! IMPLICIT INPUTS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Success or a failure returned by a routine which is called
!	from INSERT_SID
!
! SIDE EFFECTS:
!	NONE
!
!--
 
    BEGIN
    MAP
	CIR : REF BBLOCK,
	SID : REF BBLOCK;

    LOCAL
	STATUS;


    IF .CIR [CIR$L_SIDFLINK] EQL CIR [CIR$L_SIDFLINK]
    THEN
	!
	!   This is the first ID message stored, so just plop it in.
	!
	INSQUE (.SID, .CIR [CIR$L_SIDBLINK])
    ELSE
	BEGIN
	!
	!   Create a doubly linked list ordered by NI Hardware address
	!
	LOCAL
	    CMPR_ADR_DSC : BBLOCK [DSC$C_S_BLN],
	    NSRT_ADR_DSC : BBLOCK [DSC$C_S_BLN],
	    CMP_SID : REF BBLOCK;

	!
	!   Build a descriptor of the NI hardware address to be used in
	!   a string compare utility routine.
	!
	CH$FILL (0, DSC$C_S_BLN, NSRT_ADR_DSC);
	NSRT_ADR_DSC [DSC$W_LENGTH] = SID$C_ADRLEN;
	NSRT_ADR_DSC [DSC$A_POINTER] = SID [SID$T_HRDWADR];
	CH$FILL (0, DSC$C_S_BLN, CMPR_ADR_DSC);
	CMPR_ADR_DSC [DSC$W_LENGTH] = SID$C_ADRLEN;

	!
	!   Run thru the whole list
	!
	CMP_SID = .CIR [CIR$L_SIDFLINK];	! SID being compared against
	WHILE .CMP_SID NEQ CIR [CIR$L_SIDFLINK] DO
	    BEGIN
	    CMPR_ADR_DSC [DSC$A_POINTER] = CMP_SID [SID$T_HRDWADR];

	    CASE STR$COMPARE (NSRT_ADR_DSC, CMPR_ADR_DSC)
	    FROM -1 TO 1 OF	! Either Less than, Equal to, or Greater than
		SET

		[-1]:
		    !
		    !	Less than: Insert here
		    !
		    BEGIN
		    INSQUE (.SID, .CMP_SID [SID$L_BLINK]);
		    RETURN TRUE;
		    END;

		[0] :
		    !
		    !	Equal to: Replace with the new message
		    !
		    BEGIN
		    REMQUE (.CMP_SID, STATUS);
		    INSQUE (.SID, .CMP_SID [SID$L_BLINK]);
		    EXECUTE (CNF$FREE_VM (%REF(SID$C_LENGTH), CMP_SID) );
		    RETURN TRUE;
		    END;

		[1] :
		    !
		    !	It's greater than: Keep moving down the list
		    !
		    BEGIN
		    CMP_SID = .CMP_SID [SID$L_LINK];
		    END;

		TES;
	    END;		! End WHILE traversing list of SYSTEM IDs

	!
	!   It was greater than all the ones in the list so we dropped
	!   down to here where it should be inserted at end of the list
	!
	INSQUE (.SID, .CIR [CIR$L_SIDBLINK])

	END;			! ELSE the list was not empty

    RETURN TRUE;
    END;			! Routine insert_sid

END				! End of module CNFSTORE
ELUDOM
