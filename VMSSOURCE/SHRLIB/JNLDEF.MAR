; 
; ****************************************************************************
; *									    *
; *  Copyright (c) 1982, 1983		                                    *
; *  by DIGITAL Equipment Corporation, Maynard, Mass.			    *
; * 									    *
; *  This software is furnished under a license and may be used and  copied  *
; *  only  in  accordance  with  the  terms  of  such  license and with the  *
; *  inclusion of the above copyright notice.  This software or  any  other  *
; *  copies  thereof may not be provided or otherwise made available to any  *
; *  other person.  No title to and ownership of  the  software  is  hereby  *
; *  transferred.							    *
; * 									    *
; *  The information in this software is subject to change  without  notice  *
; *  and  should  not  be  construed  as  a commitment by DIGITAL Equipment  *
; *  Corporation.							    *
; * 									    *
; *  DIGITAL assumes no responsibility for the use or  reliability  of  its  *
; *  software on equipment which is not supplied by DIGITAL.		    *
; *									    *
; ****************************************************************************
; *********************************************************************************************************************************
;  Created 15-SEP-1984 22:42:32  by  VAX-11 SDL V2.0       Source: 15-SEP-1984 22:41:33 _$255$DUA28:[CJFV4.SRC]JNLDEF.SDL;1        
; *********************************************************************************************************************************
 
 
	.MACRO	$CJFDEF,$GBL
	$DEFINI	CJF,$GBL
; 
; ++
; 
;  CJF-flags, specified to CJF services as parameters
;  and CJF constants used internally in CJF and in the user interface
; 
; --
$EQU	CJF$_RU	1                       ;  RU journal
$EQU	CJF$_BI	2                       ;  BI journal
$EQU	CJF$_AI	3                       ;  AI journal
$EQU	CJF$_AT	4                       ;  AT journal
$EQU	CJF$_CL	5                       ;  CL journal
$EQU	CJF$M_PHASE1	1
$EQU	CJF$M_PHASE2	2
$EQU	CJF$M_MARK	4
$EQU	CJF$M_FORWARD	8
$EQU	CJF$M_BACKWARD	16
$EQU	CJF$M_ABORT	32
$EQU	CJF$M_READ	64
$EQU	CJF$M_WRITE	128
$EQU	CJF$M_DELFIL	256
$EQU	CJF$M_CONT	512
$EQU	CJF$M_INIT	1024
$EQU	CJF$M_DRVWT	2048
$EQU	CJF$M_UNIT	4096
$EQU	CJF$M_NOUNLOAD	8192
$EQU	CJF$M_SUPERSEDE	16384
$EQU	CJF$M_RESIDUAL	32768
$EQU	CJF$M_SAVFIL	65536
$EQU	CJF$M_DISCONNECT	131072
$EQU	CJF$M_NOLOOKUP	262144
$EQU	CJF$M_ADDFILTER	524288
$EQU	CJF$M_DELFILTER	1048576
$EQU	CJF$M_COMPLETED	2097152
$EQU	CJF$M_RESET	4194304
$EQU	CJF$M_REMOUNT	8388608
$EQU	CJF$M_FORCE	16777216
$EQU	CJF$M_RESTART	33554432
$EQU	CJF$M_FAILOVER	67108864
$EQU	CJF$M_LOG	134217728
$EQU	CJF$M_MERGE	268435456
$EQU	CJF$M_LOGOBJ	536870912
$EQU	CJF$M_ROOTDEV	1073741824
$EQU	CJF$M_RCP	-2147483648
$EQU	CJF$C_ABENUM	8               ;  Number of ABEs allocated per ABL 
$EQU	CJF$C_BUFIOMAX	200             ;  Max size buffer for which BIO done
$EQU	CJF$C_DEFBUFSIZ	512             ;  default buffer size in bytes
$EQU	CJF$C_INITADBNUM	8       ;  inial number of ADBs per ADL
$EQU	CJF$C_MAXATTR	27              ;  Max number of attributes returned 
;   with read.
$EQU	CJF$C_MAXBUFSIZ	20              ;  max buffer size in 512 b. blocks
$EQU	CJF$C_MAXCOPIES	1               ;  Max number of journal copies allowed
$EQU	CJF$C_MAXFILLEN	255             ;  max file length
$EQU	CJF$C_MAXFILT	512             ;  Max filter size
$EQU	CJF$C_MAXITEMS	21              ;  Max number of items in items list for MOUNT
$EQU	CJF$C_MAXJNLS	30              ;  max number of journals on one tape group
$EQU	CJF$C_MAXAIJNL	31              ;  max AI journals that can be accessed
$EQU	CJF$C_MAXBIJNL	31              ;  max BI journals that can be accessed
$EQU	CJF$C_MAXRUJNL	31              ;  max RU journals that can be accessed
$EQU	CJF$C_MAXRECSIZ	32767           ;  max journal entry size
$EQU	CJF$C_MAXSPLFIL	5               ;  max number of spool files
$EQU	CJF$C_MAXTBUFSZ	2048            ;  max size journal tape buffer in bytes
$EQU	CJF$C_MAX_STAGE	15              ;  max number of next stage macros in
;   one routine
$EQU	CJF$C_MAX_DATA_AREA	180     ;  max bytes of next stage 
;  data allowed in one routine
$EQU	CJF$C_MXDEVNAML	20              ;  maximum length device name
$EQU	CJF$C_MXGRPNAML	15              ;  maximum group name length
$EQU	CJF$C_MXITEMLEN	20              ;  max length item in item list for MOUNT
$EQU	CJF$C_MXJNLNAML	16              ;  max length journal name
$EQU	CJF$C_MXLENATR	20              ;  Max length attribute field
$EQU	CJF$C_MXLENFIL	64              ;  Max length filter element
$EQU	CJF$C_MXPRCNAML	15              ;  Max length process name string
$EQU	CJF$C_MXSGBLEN	255             ;  Max SGB field length
$EQU	CJF$C_NUMVLE	8               ;  initial and incremental number of VLEs
$EQU	CJF$C_RDBUFMAX	512             ;  Max buffer that can be used for reading
$EQU	CJF$C_RUFIMPSIZ	3000            ;  RUF impure area size
$EQU	CJF$C_RULINC	5               ;  RUL increment: number of RUEs added
;   when RUL is full
$EQU	CJF$C_RUDLEN	1               ;  Starting number of RUEs in RUL
$EQU	CJF$C_SGBSTART	128             ;  Starting number for SGB codes
$EQU	CJF$C_ACPUIC	65539           ;  ACP's UIC ([1,3])
$EQU	CJF$C_MAXZFBUF	127             ;  Max size buf for 0-filling jnl file
; +
; 
;  Definitions for codes indicating the type of RU-control entry.
; 
; -
$EQU	CJF$C_PHASE1	1               ;  phase1 entry
$EQU	CJF$C_PHASE2	2               ;  phase2 entry
$EQU	CJF$C_ABORT	3               ;  abort entry
$EQU	CJF$C_MARK	4               ;  mark point entry
$EQU	CJF$C_RESET	5               ;  reset entry
$EQU	CJF$C_COMPLETED	6               ;  completed entry
$EQU	CJF$C_RESIDUAL	7               ;  residual entry
$EQU	CJF$C_CLEANUP	8               ;  cleanup entry
; +
; 
;  Definitions for Recovery Control Process and Recovery Routines
; 
;  Miscellaneous constants
; -
$EQU	RCP$K_LOGLENGTH	512             ;  max length of log mbx msg
; +
;  Offsets to argument list supplied to Recovery Routines by the RCP.
; -
$EQU	RCPARG$_COMMAND	4               ;  Command code defines type of call (see below)
$EQU	RCPARG$_RRP	8               ;  Address of Recovery Request Packet
$EQU	RCPARG$_JEN	12              ;  Address of Journal ENtry 
$EQU	RCPARG$_IMPURE	16              ;  Address of RR-supplied impure data area
$EQU	RCPARG$_ASTADR	20              ;  Address of RCP-supplied AST for asynch op's
$EQU	RCPARG$_CALLBAK	24              ;  Address of RCP-supplied callback routine 
; +
;  Command codes for Recovery Routines within Recovery Control Process
;  (RCPARG$_COMMAND).
; -
$EQU	RCP$K_START	1               ;  Start of Recovery Operation
$EQU	RCP$K_PROCESS	2               ;  Process a Journal Entry
$EQU	RCP$K_END	3               ;  End of Recovery Operation
$EQU	RCP$K_MAP_ENTRY	4               ;  Process Journal Entry as Mapping Entry
$EQU	RCP$K_LOCK_ENTRY	5       ;  Lock a Journal Entry
$EQU	RCP$K_ABORT	6               ;  Abort a Recovery Operation
$EQU	RCP$K_NOPR_ENTRY	7       ;  Process Journal Entry; caller lacks privs
$EQU	RCP$K_LOG_OBJECT	8       ;  Return log information about OBJECT_ID entry
$EQU	RCP$K_DIRECTION	9               ;  Request direction to roll Phase 1 RU
$EQU	RCP$K_LASTPLUS1	10              ;   *** Insert new entries before this ***
$EQU	RCP$K_MAX_COMMAND	9       ;  Adjust back
; +
;  Codes to pass as P1 to RCPARG$_CALLBAK (RCP callback routine).
; -
$EQU	RCP$K_WAIT	64              ;  Wait for AST (no additional arguments)
$EQU	RCP$K_FADD	65              ;  Add Filter (P2=Address of filter list)
$EQU	RCP$K_FDEL	66              ;  Delete Filter (P2=Address of filter list)
$EQU	RCP$K_LOGMSG	67              ;  Log Message (P2=Address of message descr.)
$EQU	RCP$K_MESSAG	68              ;  Other message (P2=Addr of msg descr.)
$EQU	CJF$S_$CJFDEF	4
$EQU	CJF$S_CJFMASKS	4
$EQU	CJF$R_CJFMASKS	0               ;  define CJF masks
$EQU	CJF$V_PHASE1	0               ;  do phase 1
$EQU	CJF$V_PHASE2	1               ;  do phase 2
$EQU	CJF$V_MARK	2               ;  make mark point
$EQU	CJF$V_FORWARD	3               ;  read in fifo order
$EQU	CJF$V_BACKWARD	4               ;  read in lifo order
$EQU	CJF$V_ABORT	5               ;  abort RU
$EQU	CJF$V_READ	6               ;  read indicator
$EQU	CJF$V_WRITE	7               ;  write indicator
$EQU	CJF$V_DELFIL	8               ;  delete file flag
$EQU	CJF$V_CONT	9               ;  continue: used with MNTJMD
$EQU	CJF$V_INIT	10              ;  initialize flag: with MNTJMD
$EQU	CJF$V_DRVWT	11              ;  driver-wait flag
$EQU	CJF$V_UNIT	12              ;  only specified units to be effected
$EQU	CJF$V_NOUNLOAD	13              ;  no-unload of medium/media
$EQU	CJF$V_SUPERSEDE	14              ;  supersede flag
$EQU	CJF$V_RESIDUAL	15              ;  This is a residual entry indicator
$EQU	CJF$V_SAVFIL	16              ;  save file flag
$EQU	CJF$V_DISCONNECT	17      ;  Disconnect label/uic pair
$EQU	CJF$V_NOLOOKUP	18              ;  Do not perform known journal
$EQU	CJF$V_ADDFILTER	19              ;  Add filter ($MODFLT)
$EQU	CJF$V_DELFILTER	20              ;  Delete filter ($MODFLT)
$EQU	CJF$V_COMPLETED	21              ;  RU completed successfully
$EQU	CJF$V_RESET	22              ;  RU was reset to mark (ID in attributes)
$EQU	CJF$V_REMOUNT	23              ;  Recovery for volume mount
$EQU	CJF$V_FORCE	24              ;  Modifier for Forward/Backward
$EQU	CJF$V_RESTART	25              ;  Restart frozen REMOUNT recovery op
$EQU	CJF$V_FAILOVER	26              ;  Failover RUs for remastered journal
$EQU	CJF$V_LOG	27              ;  RECOVER/LOG request
$EQU	CJF$V_MERGE	28              ;  Merge new facility with RCP
$EQU	CJF$V_LOGOBJ	29              ;  Request list of frozen objects
$EQU	CJF$V_ROOTDEV	30              ;  Indicating root RU journal or not
$EQU	CJF$V_RCP	31              ;  Service call coming from the RCP
;   lookup in $ASSJNL
;  Note: all previous bits must go
;   in first word
;  Note: all previous bits must go
;   in first byte
	$DEFEND	CJF,$GBL,DEF
	.ENDM
 
	.MACRO	$WRFLGDEF,$GBL
	$DEFINI	WRFLG,$GBL
; ++
; 
;  WRFLG - Flags supplied with $WRITEJNL
; 
;  These flags may be supplied with a call to $WRITEJNL to accompany the
;  journal entry. The flags may later be read as an attribute (JATR$C_ENTATR) of
;  the journal entry via $READJNL or may be used as a filter (JFCB$C_ENTATR) to
;  $POSJNL to select flagged journal entries.
; 
; --
$EQU	WRFLG$M_AI	1
$EQU	WRFLG$M_BI	2
$EQU	WRFLG$M_RUALSO	4
$EQU	WRFLG$M_OBJECT_ID	8
$EQU	WRFLG$M_LOCK	16
$EQU	WRFLG$S_$WRFLGDEF	1
$EQU	WRFLG$S_WRFLG	1
$EQU	WRFLG$R_WRFLG	0               ;  define CJF masks
$EQU	WRFLG$V_AI	0               ;  This is a roll forward (AI) entry
$EQU	WRFLG$V_BI	1               ;  This is a roll back (BI) entry
$EQU	WRFLG$V_RUALSO	2               ;  This AI/BI entry also written to RUJ
$EQU	WRFLG$V_OBJECT_ID	3       ;  This entry identifies an object
$EQU	WRFLG$V_LOCK	4               ;  This entry contains locking info
	$DEFEND	WRFLG,$GBL,DEF
	.ENDM
 
	.MACRO	$WRMODDEF,$GBL
	$DEFINI	WRMOD,$GBL
; ++
; 
;  WRMOD - Modifiers supplied with $WRITEJNL
; 
;  These flags may be supplied with a call to $WRITEJNL to modify the write 
;  QIO.  They are defined to have the same values as the corresponding IO
;  modifiers.
; 
; --
$EQU	WRMOD$M_FORCE	64
$EQU	WRMOD$M_CNTRLENTRY	128
$EQU	WRMOD$S_$WRMODDEF	1
$EQU	WRMOD$S_WRMOD	1
$EQU	WRMOD$R_WRMOD	0               ;  define write modifier masks
;  defined values agree with IO$DEF.
$EQU	WRMOD$V_FORCE	6               ;  Force entry to be written to file.
$EQU	WRMOD$V_CNTRLENTRY	7       ;  This is a control entry.
	$DEFEND	WRMOD,$GBL,DEF
	.ENDM
 
	.MACRO	$ILEDEF,$GBL
	$DEFINI	ILE,$GBL
; 
; ++
; 
;  ILE - Item List Element for MOUNT
; 
;  The item list parameter for MOUNT consists of these items
; 
; --
$EQU	ILE$K_LENGTH	12              ;  length of data structure
$EQU	ILE$C_LENGTH	12              ;  length of data structure
$EQU	ILE$S_$ILEDEF	12
$EQU	ILE$W_BUFLEN	0               ;  buffer length
$EQU	ILE$W_ITEMCODE	2               ;  item code
$EQU	ILE$L_BUFFADDR	4               ;  buffer address
$EQU	ILE$L_RESLEN	8               ;  result length (used for GETDVI)
	$DEFEND	ILE,$GBL,DEF
	.ENDM
 
	.MACRO	$JATRDEF,$GBL
	$DEFINI	JATR,$GBL
; 
; ++
; 
;  JATR - Journal Attributes 
; 
;  A READ-Journal operation ($READJNL) can also be used to get attributes
;  of the entry being read and/or attributes of the journal from which
;  reading is done. The attribute block is a vector of attribute descriptors
;  which contain attribute type and attribute size in the first longword
;  and the address of the user buffer for the attribute in the second longword.
;  The attribute block is zero ended.
; 
;  ****** WARNING ******
;    If any new attributes are added or old attributes removed make sure that
;    the constant CJF$C_MAXATTR is updated to reflect the change.
;  ****** WARNING ******
; --
$EQU	JATR$C_CTRLBLCKSIZ	8       ;  control block size
$EQU	JATR$C_LENGTH	8
$EQU	JATR$K_LENGTH	8
$EQU	JATR$C_MIN_VAL	3               ;  define low limit 
; +
;  Attribute codes
;  ****** WARNING ******
;    If any new attributes are added or old attributes removed make sure that
;    the constant CJF$C_MAXATTR is updated to reflect the change.
;  ****** WARNING ******
; -
$EQU	JATR$C_TIME	3               ;  time
$EQU	JATR$C_ENTMOD	4               ;  access mode of entry
$EQU	JATR$C_JNLMOD	5               ;  access mode for journal
$EQU	JATR$C_SEQNO	6               ;  sequence number of entry
$EQU	JATR$C_ENTMASK	7               ;  mask given to entry at write
$EQU	JATR$C_JNLMASK	8               ;  journal mask
$EQU	JATR$C_JNLCRDAT	9               ;  journal device creation date/time
$EQU	JATR$C_FILCRDAT	10              ;  journal file creation date/time
$EQU	JATR$C_COPAVL	11              ;  number of journal copies available
$EQU	JATR$C_COPEXI	12              ;  number of journal copies existing
$EQU	JATR$C_ENTUIC	13              ;  UIC of entry
$EQU	JATR$C_JNLUIC	14              ;  UIC of journal
$EQU	JATR$C_ENTPROT	15              ;  protection mask of entry
$EQU	JATR$C_JNLPROT	16              ;  protection mask of journal
$EQU	JATR$C_FILSIZ	17              ;  journal file size (disk journals only)
$EQU	JATR$C_BIODATA	18              ;  BIO journal entry - internal only
$EQU	JATR$C_DIODATA	19              ;  DIO journal entry - internal only
$EQU	JATR$C_ENTLEN	20              ;  entry length 
$EQU	JATR$C_XFERCNT	21              ;  Count of # of bytes actually transfered.
$EQU	JATR$C_FACCOD	22              ;  facility code
$EQU	JATR$C_MAXENTSIZ	23      ;  Maximum size (bytes) of a journal entry.
$EQU	JATR$C_ENTATR	24              ;  Journal entry attribute flags (WRFLG$...)
$EQU	JATR$C_RUID	25              ;  Recovery Unit ID for this entry
$EQU	JATR$C_MARKPT	26              ;  Markpoint ID for this entry
$EQU	JATR$C_ENTPRUIC	27              ;  UIC of process that wrote entry
$EQU	JATR$C_SESSID	28              ;  Session ID from which entry was written
$EQU	JATR$C_BUFSIZ	29              ;  Size of buffers for journal in 512 byte blocks
$EQU	JATR$C_MAX_VAL	30              ;  maximum value * MUST BE LAST ENTRY IN LIST *
;  ****** WARNING ******
;    If any new attributes are added or old attributes removed make sure that
;    the constant CJF$C_MAXATTR is updated to reflect the change.
;  ****** WARNING ******
;  attribute sizes
$EQU	JATR$S_TIME	8               ;  time
$EQU	JATR$S_ENTMOD	1               ;  access mode of entry
$EQU	JATR$S_JNLMOD	1               ;  access mode for journal
$EQU	JATR$S_SEQNO	4               ;  sequence number of entry
$EQU	JATR$S_ENTMASK	4               ;  mask given to entry at write
$EQU	JATR$S_JNLMASK	4               ;  journal mask
$EQU	JATR$S_JNLCRDAT	8               ;  journal device creation date/time
$EQU	JATR$S_FILCRDAT	8               ;  journal file creation date/time
$EQU	JATR$S_COPAVL	1               ;  number of journal copies available
$EQU	JATR$S_COPEXI	1               ;  number of journal copies existing
$EQU	JATR$S_ENTUIC	4               ;  UIC of entry
$EQU	JATR$S_JNLUIC	4               ;  UIC of journal
$EQU	JATR$S_ENTPROT	2               ;  protection mask of entry
$EQU	JATR$S_JNLPROT	2               ;  protection mask of journal
$EQU	JATR$S_FILSIZ	4               ;  journal file size (disk journals only)
$EQU	JATR$S_BIODATA	8               ;  BIO journal entry - internal only
$EQU	JATR$S_DIODATA	8               ;  DIO journal entry - internal only
$EQU	JATR$S_ENTLEN	4               ;  entry length 
$EQU	JATR$S_XFERCNT	4               ;  Transfer count (bytes).
$EQU	JATR$S_FACCOD	2               ;  facility code
$EQU	JATR$S_MAXENTSIZ	2       ;  Maximum size (bytes) of a journal entry.
$EQU	JATR$S_ENTATR	4               ;  Journal entry attribute flag
$EQU	JATR$S_RUID	16              ;  Recovery Unit ID
$EQU	JATR$S_MARKPT	4               ;  Mark point ID
$EQU	JATR$S_ENTPRUIC	4               ;  UIC of process that wrote entry
$EQU	JATR$S_SESSID	16              ;  Session ID from which entry was written
$EQU	JATR$S_BUFSIZ	2               ;  Buffer size in 512 byte blocks 
$EQU	JATR$S_MAX_VAL	1               ;  Maximum value
;  ****** WARNING ******
;    If any new attributes are added or old attributes removed make sure that
;    the constant CJF$C_MAXATTR is updated to reflect the change.
;  ****** WARNING ******
$EQU	JATR$S_$JATRDEF	8
$EQU	JATR$W_SIZE	0               ;  size of attribute descriptor block
$EQU	JATR$W_TYPE	2               ;  type of attribute
$EQU	JATR$L_ADDR	4               ;  address user buffer for attribute
	$DEFEND	JATR,$GBL,DEF
	.ENDM
 
	.MACRO	$JFCBDEF,$GBL
	$DEFINI	JFCB,$GBL
; 
; ++
; 
;  JFCB - Journal Filter Control Block
; 
;  When a POSJNL (Position Journal) is done, the caller specifies the
;  category of entries he wants to read. This is done by passing a filter.
;  The filter consists of a vector of descriptors, which have in their
;  first longword the size and type of the filter element, and in their
;  second longword the address of the user buffer containing the value of 
;  the filter element
; 
;   *** NOTE ESPECIALLY: The RUID and MARK filters are valid only for RU journals
; 			and are the ONLY filters used for RU journals;  furthermore,
; 			the RUID filter MUST be provided for RU journals.
; 
; --
$EQU	JFCB$C_CTRLBLCKSIZ	8       ;  control block size
$EQU	JFCB$C_LENGTH	8
$EQU	JFCB$K_LENGTH	8
$EQU	JFCB$C_MIN_VAL	64              ;  define low limit 
$EQU	JFCB$C_UIC	64              ;  UIC of writer of entry
$EQU	JFCB$C_ACMODE	65              ;  access mode from which entry was written
$EQU	JFCB$C_FACCODE	66              ;  facility code of of facility that wrote entry
$EQU	JFCB$C_STRING	67              ;  field describing: in first word offset
;   in user entry, in rest of field
;   string to match entry's subfield
$EQU	JFCB$C_MASK	68              ;  mask given to entry at write
$EQU	JFCB$C_SEQNO	69              ;  sequence number or range: lowest # for
;   reading AT and BI jnl's, highest # for
;   reading AT and AI jnl's
;   if two longwords supplied, range of sequence #s
$EQU	JFCB$C_DATTIM	70              ;  date time up to and/or from which to read
$EQU	JFCB$C_RUID	71              ;  RU identifier
$EQU	JFCB$C_MARK	72              ;  MARK point ID, up to which to roll back
$EQU	JFCB$C_SESSID	73              ;  session ID
$EQU	JFCB$C_PID	74              ;  Process ID
$EQU	JFCB$C_ACTIVE	75              ;  Describes what action to take with
;  active processes
$EQU	JFCB$C_spare	76              ;  	*** put next new filter here ***
$EQU	JFCB$C_JOURNAL	77              ;  Journal name (for RCP - not used by ACP)
$EQU	JFCB$C_ENTATR	78              ;  Journal entry attribute flags
$EQU	JFCB$C_OUTRANGE	79              ;  matches entries outside range of seq #s
$EQU	JFCB$C_MAX_VAL	80              ;  maximum value * MUST BE LAST ENTRY IN LIST *
$EQU	JFCB$S_UIC	4               ;  UIC of writer of entry
$EQU	JFCB$S_ACMODE	1               ;  access mode from which entry was written
$EQU	JFCB$S_FACCODE	2               ;  facility code of of facility that wrote entry
$EQU	JFCB$S_STRING	512             ;  field describing: in first word offset
;   in user entry in second word length
;   of subfield, in rest of field
;   string to match entry's subfield
$EQU	JFCB$S_MASK	4               ;  mask given to entry at write
$EQU	JFCB$S_SEQNO	8               ;  sequence number(s)
$EQU	JFCB$S_DATTIM	16              ;  date time up to and/or from which to read
$EQU	JFCB$S_RUID	16              ;  RU identifier
$EQU	JFCB$S_MARK	4               ;  MARK point ID, up to which to roll back
$EQU	JFCB$S_SESSID	15              ;  session ID
$EQU	JFCB$S_PID	4               ;  process ID
$EQU	JFCB$S_ACTIVE	1               ;  Active process flag
$EQU	JFCB$S_JOURNAL	12              ;  journal name
$EQU	JFCB$S_ENTATR	4               ;  Journal entry attribute flag
$EQU	JFCB$S_OUTRANGE	8               ;  low, high limit sequence numbers
$EQU	JFCB$S_MAX_VAL	4               ;  maximum value
$EQU	JFCB$C_EXCLUDE	0               ;  Exclude entries from active processes
$EQU	JFCB$C_INCLUDE	1               ;  Include entries from active processes
$EQU	JFCB$C_NONE	2               ;  Ignore effects of active processes
;  Special INTERNAL definitions of the JFCB structure (used by the driver
;  and the ACP only.
$EQU	JFCB$C_DIRECT	80              ;  The typecode for the direction flag is
;  set to the maximum type-code value.
$EQU	JFCB$S_DIRECT	4               ;  The size of the flag is 4 (?) bytes.
$EQU	JFCB$S_$JFCBDEF	12
$EQU	JFCB$W_SIZE	0               ;  size of filter element descriptor block
$EQU	JFCB$W_TYPE	2               ;  type of filter element
$EQU	JFCB$L_ADDR	4               ;  address user buffer for filter element
$EQU	JFCB$L_TERM	8               ;  offset to terminating zero from last entry
; +
;  Filter element codes
; -
	$DEFEND	JFCB,$GBL,DEF
	.ENDM
 
	.MACRO	$JNLCHARDEF,$GBL
	$DEFINI	JNLCHAR,$GBL
; 
; ++
; 
;  JNLCHAR - journal characteristics bits
; 
; --
$EQU	JNLCHAR$M_RESWL	1
$EQU	JNLCHAR$M_SEAVL	2
$EQU	JNLCHAR$M_REAVL	4
$EQU	JNLCHAR$S_$JNLCHARDEF	1
$EQU	JNLCHAR$V_RESWL	0               ;  reset SWL for jnl 
$EQU	JNLCHAR$V_SEAVL	1               ;  set def on-line again
$EQU	JNLCHAR$V_REAVL	2               ;  take device off-line
	$DEFEND	JNLCHAR,$GBL,DEF
	.ENDM
 
	.MACRO	$JSBDEF,$GBL
	$DEFINI	JSB,$GBL
; 
; ++
; 
;  JSB - Journal Specification Block
; 
; 	When a journal is to be created, the user must pass this 
; 	structure to the CJF $CREJNL service.
; 
; --
$EQU	JSB$C_RU	1               ;  RU journal
$EQU	JSB$C_BI	2               ;  BI journal
$EQU	JSB$C_AI	3               ;  AI journal
$EQU	JSB$C_AT	4               ;  AT journal
$EQU	JSB$C_CL	5               ;  CL journal
$EQU	JSB$C_DISK	1               ;    journal is on disk
$EQU	JSB$C_TAPE	2               ;    journal is on tape
$EQU	JSB$C_KERNEL	0               ;  kernel mode
$EQU	JSB$C_EXEC	1               ;  exec mode
$EQU	JSB$C_SUPER	2               ;  supervisor mode
$EQU	JSB$C_USER	3               ;  user mode
$EQU	JSB$M_TMPJNL	1
$EQU	JSB$M_KNOWN	2
$EQU	JSB$M_CREATE	4
$EQU	JSB$M_CIF	8
$EQU	JSB$M_TMPFIL	16
$EQU	JSB$M_CREACP	32
$EQU	JSB$M_DIFACP	64
$EQU	JSB$M_REPLACE	128
$EQU	JSB$M_TAPEDRIVE	256
$EQU	JSB$M_CLUSTER	512
$EQU	JSB$M_REMASTER	1024
$EQU	JSB$K_LENGTH	80              ;  length of data structure
$EQU	JSB$C_LENGTH	80              ;  length of data structure
$EQU	JSB$S_$JSBDEF	80
$EQU	JSB$W_JNLNAMLEN	0               ;  length journal name
$EQU	JSB$L_JNLNAM	4               ;  journal name ASCII
$EQU	JSB$B_JNLTYP	10              ;  journal type.  can be one of:
$EQU	JSB$B_JNLDEV	11              ;  journal device type. can be one of:
$EQU	JSB$L_MASK	12              ;  journal mask
$EQU	JSB$W_FACCOD	16              ;  facility code (eg RMS)
$EQU	JSB$W_APPLID	18              ;  applications id (eg datatrieve)
$EQU	JSB$W_MAXSIZ	20              ;  maximum entry size
$EQU	JSB$w_spare1	22              ;  spare
$EQU	JSB$L_FILSIZ	24              ;  blocks to initially allocate for journal file
$EQU	JSB$W_FILEXT	28              ;  blocks to extend journal file when full
$EQU	JSB$W_BUFSIZ	30              ;  buffer size (in 512 byte blocks)
$EQU	JSB$L_QUOTA	32              ;  byte quota (for RU journals only)
$EQU	JSB$B_ACMODE	36              ;  least priv access mode allowed
$EQU	JSB$b_spare2	37              ;  spare (for longword alignment)
$EQU	JSB$W_PROT	38              ;  protection mask for journal device
$EQU	JSB$S_uic_overlay	4
$EQU	JSB$r_uic_overlay	40
$EQU	JSB$L_UIC	40              ;  UIC for journal device
$EQU	JSB$S_uic_0	4
$EQU	JSB$r_uic_0	40              ;  
$EQU	JSB$W_UIC_MBM	40              ;    UIC member number
$EQU	JSB$W_UIC_GRP	42              ;    UIC group number
$EQU	JSB$S_flags_overlay	4
$EQU	JSB$r_flags_overlay	44
$EQU	JSB$L_FLAGS	44              ;  flags as follows:
$EQU	JSB$S_flags_bits	4
$EQU	JSB$r_flags_bits	44      ;  
$EQU	JSB$V_TMPJNL	0               ;    temporary journal device - delete on last deaccess
$EQU	JSB$V_KNOWN	1               ;    site permanent journal
$EQU	JSB$V_CREATE	2               ;    always create file (supercedes CREATE_IF)
$EQU	JSB$V_CIF	3               ;    create only if file does not exist
$EQU	JSB$V_TMPFIL	4               ;    temporary journal file - delete when device deleted
$EQU	JSB$V_CREACP	5               ;    create a new ACP. OPER priv req'ed.
$EQU	JSB$V_DIFACP	6               ;    do not use default ACP. 
$EQU	JSB$V_REPLACE	7               ;    replace current journal with this
$EQU	JSB$V_TAPEDRIVE	8               ;    (internal only) create journal tape drive
$EQU	JSB$V_CLUSTER	9               ;    create the journal across
$EQU	JSB$V_REMASTER	10              ;    (internal only) remaster the journal
;        the cluster
;        DELETE priv required
;        ACP name in JSB is valid.
;        ACP name in JSB is valid.
;   NOTE: flags are used in prologue - 
;    must be in same places.
$EQU	JSB$W_ACPNAMLEN	48              ;  length prcnam string
$EQU	JSB$W_SPARE4	50              ;  spare
$EQU	JSB$L_ACPNAM	52              ;  prcnam of alternate ACP
$EQU	JSB$W_MAX_JNLS	56              ;  (internal only) max jnls (if TAPEDRIVE set)
$EQU	JSB$B_COPIES	58              ;  number of copies
$EQU	JSB$B_SPARE3	59              ;  SPARE (for longword alignment)
$EQU	JSB$S_EXPDAT	8
$EQU	JSB$Q_EXPDAT	60              ;  expiration date (-1 = never)
;  Primary file specifications
$EQU	JSB$L_PRINAMDES	68              ;  address of filename descriptor list 
;  (one quadword per file) (required)
$EQU	JSB$L_PRIRESDES	72              ;  address of result string descriptor list 
;  (one quadword per file) (optional)
$EQU	JSB$L_PRIRESLEN	76              ;  address of result length list 
;  (one longword per file) (optional)
	$DEFEND	JSB,$GBL,DEF
	.ENDM
 
	.MACRO	$RODBDEF,$GBL
	$DEFINI	RODB,$GBL
; 
; ++
; 
;  RODB - Recovery Object Descriptor Block
;  
;  The RODB describes the object to recover.
; 
; --
$EQU	RODB$K_RMSFILE	1               ;  ...Object is an RMS file
$EQU	RODB$K_VOLUME	2               ;  ...Object is a volume set
$EQU	RODB$K_RU	3               ;  ...Object is a Recovery Unit
$EQU	RODB$K_RUJNL	4               ;  ...Object is a Recovery Unit Journal
$EQU	RODB$k_spare	5               ;  ...RUNODE removed from here
$EQU	RODB$K_FACCOD	6               ;  ...Facility code for use with merge ** INTERNAL USE ONLY **
$EQU	RODB$K_RFSAMPLE	7               ;  ...Object is the Sample Application
$EQU	RODB$K_LENGTH	8               ;  Length of this structure
$EQU	RODB$C_LENGTH	8               ;  length of data structure
$EQU	RODB$S_$RODBDEF	8
$EQU	RODB$B_TYPE	0               ;  Type of object described
$EQU	RODB$B_COUNT	1               ;  Number of attributes assoc with object
$EQU	RODB$W_SIZE	2               ;  Size of RODBA
$EQU	RODB$A_POINTER	4               ;  Address of attribute list
; 
; ++
; 
;  RODBA - Recovery Object Descriptor Block Attribute
;  
;  The RODBA describes an attribute associated with the object of recovery.
; 
; --
$EQU	RODBA$K_LENGTH	8               ;  Length of this structure
$EQU	RODBA$C_LENGTH	8               ;  length of data structure
; +
;  Define attributes for RMS object attributes
; -
$EQU	RODBA$K_FILENAME	1       ;  File name to recover
$EQU	RODBA$K_CFILENAME	2       ;  File name to create and recover
; +
;  Define attributes for Volume Recovery attributes
; -
$EQU	RODBA$K_VOLDEVICE	3       ;  Volume device name
$EQU	RODBA$K_VOLLABEL	4       ;  Volume label
; +
;  Define attributes for RU attributes
; -
$EQU	RODBA$K_RUID	5               ;  Recovery Unit ID
; +
;  Define attributes for RUJNL attributes
; -
$EQU	RODBA$K_RUJDEVNAM	6       ;  Device name of RU journal
; +
;  Define attributes for failed node (PROCESSOR) attributes
; -
$EQU	RODBA$K_NODE_ID	7               ;  Node ID of failed node
; +
;  Define attribute for facility code to be used with merge command.
; -
$EQU	RODBA$K_FACCOD	8               ;  Facility code *** INTERNAL USE ONLY ***
; +
;  End of definitions
; -
$EQU	RODBA$S_$RODBADEF	8
$EQU	RODBA$B_TYPE	0               ;  Type of object described
$EQU	RODBA$b_spare	1               ;  Spare
$EQU	RODBA$W_SIZE	2               ;  Size of attribute
$EQU	RODBA$A_POINTER	4               ;  Pointer to attribute
	$DEFEND	RODB,$GBL,DEF
	.ENDM
 
	.MACRO	$RRPDEF,$GBL
	$DEFINI	RRP,$GBL
; 
; ++
; 
;  RRP - Recovery Request Packet
; 
;  When a recovery is to be performed a Recovery Request Packet must
;  be sent to the RCP that describes the caller, the object to be 
;  recovered and the type of recovery.
; 
; --
$EQU	RRP$M_RECOVERY	1
$EQU	RRP$M_MERGE	2
$EQU	RRP$M_FORWARD	4
$EQU	RRP$M_BACK	8
$EQU	RRP$M_RECOVERY_UNIT	16
$EQU	RRP$M_REMOUNT	32
$EQU	RRP$M_FORCE	64
$EQU	RRP$M_LOG	128
$EQU	RRP$M_FAILOVER	256
$EQU	RRP$M_RESTART	512
$EQU	RRP$K_MBX_SIZE	512             ;  Size of status MBX to create
$EQU	RRP$K_FIXED	58              ;  Size of fixed portion of RRP
$EQU	RRP$S_$RRPDEF	59
$EQU	RRP$A_FLINK	0               ;  Forward Link
$EQU	RRP$A_BLINK	4               ;  Backward Link
$EQU	RRP$W_SIZE	8               ;  Actual allocation size (in RCP)
$EQU	RRP$B_TYPE	10              ;  Structure type
$EQU	RRP$B_SUBTYPE	11              ;  Structure subtype
$EQU	RRP$S_flags_overlay	2
$EQU	RRP$r_flags_overlay	12
$EQU	RRP$W_FLAGS	12              ;  Request flags:
$EQU	RRP$S_flags_bits	2
$EQU	RRP$r_flags_bits	12      ;  
$EQU	RRP$V_RECOVERY	0               ;  If set, start Recovery Operation
$EQU	RRP$V_MERGE	1               ;  If set, merge in new facility
$EQU	RRP$V_FORWARD	2               ;  Roll-forward operation
$EQU	RRP$V_BACK	3               ;  Roll-back operation
$EQU	RRP$V_RECOVERY_UNIT	4       ;  Process a Recovery Unit
$EQU	RRP$V_REMOUNT	5               ;  Process a Recovery Unit Journal
$EQU	RRP$V_FORCE	6               ;  Process a frozen Recovery Unit
$EQU	RRP$V_LOG	7               ;  Log recovery events
$EQU	RRP$V_FAILOVER	8               ;  Failover of RUs from failed node in cluster
$EQU	RRP$V_RESTART	9               ;  Restart of frozen REMOUNT
;  ..for BI, roll back over RUALSO entries for
;  ..successful RUs.
;  These flags apply only to RECOVERY
;  These two flags are exclusive
$EQU	RRP$W_FACNO	14              ;  Facility number (RRP$M_MERGE only)
$EQU	RRP$S_TIME	8
$EQU	RRP$Q_TIME	16              ;  Time of request
$EQU	RRP$S_CALL_PRIV	8
$EQU	RRP$Q_CALL_PRIV	24              ;  Privilege mask of CALLER
$EQU	RRP$L_CALL_PID	32              ;  CALLER's process ID (EPID form)
$EQU	RRP$L_CALL_UIC	36              ;  UIC of calling process
$EQU	RRP$L_CALL_NODE	40              ;  CSID of CALLER 
$EQU	RRP$B_CALL_AMOD	44              ;  Access mode of CALLER
$EQU	RRP$B_CALL_MSG	45              ;  CTL$GB_MSGMASK of CALLER
$EQU	RRP$A_FILTER	46              ;  Address of filter descr part of RRP
$EQU	RRP$A_RODB	50              ;  Address of RODB descr part of RRP
$EQU	RRP$W_MBX_UNIT	54              ;  Status MBX unit number
$EQU	RRP$W_LOG_UNIT	56              ;  Logging MBX unit number
$EQU	RRP$AB_WORK	58              ;  Start of RODBs, filters, and Journals
	$DEFEND	RRP,$GBL,DEF
	.ENDM
 
	.MACRO	$RUSDEF,$GBL
	$DEFINI	RUS,$GBL
; 
; ++
; 
;  RUS - List of recovery units as returned from IO$_RUCNTR ! IO$M_RUIDLIST OR ! RUJLIST
; 
;  This structure is used to return the list of recovery units outstanding
;  in a recovery unit to which the RUCNTR operation is done. This is an
;  internal QIO - not available to users, so this data structure is for
;  internal purposes only.
; 
;  NOTE that the status bit definitions must be the same as those for RUE.
; 
; --
$EQU	RUS$M_PURGED	1
$EQU	RUS$M_ROLL_BACK	2
$EQU	RUS$M_ROLL_FORW	4
$EQU	RUS$M_NOT_FLSHD	8
$EQU	RUS$M_OVER_QUOTA	16
$EQU	RUS$M_PHASE1	32
$EQU	RUS$M_PHASE2	64
$EQU	RUS$M_ABORT	128
$EQU	RUS$M_P2$AB$2	256
$EQU	RUS$M_RESIDUAL	512
$EQU	RUS$M_COMPLETED	1024
$EQU	RUS$M_CLEANUP	2048
$EQU	RUS$M_FROZEN	4096
$EQU	RUS$M_RUSYNCEX	8192
$EQU	RUS$M_RUSYNCWR	16384
$EQU	RUS$M_NOFAC	32768
$EQU	RUS$M_NOOBJ	65536
$EQU	RUS$K_LENGTH	48              ;  length of structure
$EQU	RUS$C_LENGTH	48              ;  length of structure
$EQU	RUS$S_$RUSDEF	48
$EQU	RUS$S_RUID	16
$EQU	RUS$O_RUID	0               ;  Recovery Unit ID
$EQU	RUS$L_SEQNO	16              ;  sequence number last entry written 
$EQU	RUS$W_JNLCNT	20              ;  count of journals touched by RU
$EQU	RUS$w_spare1	22              ;  Spare word to keep longword boundary
$EQU	RUS$L_INDEX	24              ;  unique short RUE index
$EQU	RUS$S_status_overlay	4
$EQU	RUS$r_status_overlay	28
$EQU	RUS$L_STATUS	28              ;  status of the Recovery Unit
$EQU	RUS$S_status_bits	4
$EQU	RUS$r_status_bits	28
$EQU	RUS$V_PURGED	0               ;  entry is free indicator 
$EQU	RUS$V_ROLL_BACK	1               ;  there is at least one roll back entry 
$EQU	RUS$V_ROLL_FORW	2               ;  there is at least one roll forward entry 
$EQU	RUS$V_NOT_FLSHD	3               ;  there is at least one entry not flushed 
$EQU	RUS$V_OVER_QUOTA	4       ;  quota exceeded 
$EQU	RUS$V_PHASE1	5               ;  phase1 done 
$EQU	RUS$V_PHASE2	6               ;  phase2 done 
$EQU	RUS$V_ABORT	7               ;  abort done 
$EQU	RUS$V_P2$AB$2	8               ;  phase2 or abort entry to be encountered 2* 
$EQU	RUS$V_RESIDUAL	9               ;  this is a residual RU in journal 
$EQU	RUS$V_COMPLETED	10              ;  RU has been completed (rolled forward) 
$EQU	RUS$V_CLEANUP	11              ;  vestigial entry for RU can be ignored 
$EQU	RUS$V_FROZEN	12              ;  frozen RU 
$EQU	RUS$V_RUSYNCEX	13              ;  RUSYNC entry expected
$EQU	RUS$V_RUSYNCWR	14              ;  RUSYNC entry written
$EQU	RUS$V_NOFAC	15              ;  Frozen due to missing facility
$EQU	RUS$V_NOOBJ	16              ;  Frozen due to missing object
;   before RU deletion
$EQU	RUS$S_DEVNAM	16
$EQU	RUS$T_DEVNAM	32              ;  Counted ASCII device name
	$DEFEND	RUS,$GBL,DEF
	.ENDM
 
	.MACRO	$JENDEF,$GBL
	$DEFINI	JEN,$GBL
; 
; +
;  JEN - Journal Entry
; 
;  Contains a pointer to the journal entry, plus related attributes as 
;  returned by the JACP and passed to the recovery routines by the RCP. 
; -
$EQU	JEN$K_LENGTH	87              ;  length of data structure
$EQU	JEN$S_$JENDEF	87
$EQU	JEN$A_FLINK	0               ;  Forward link
$EQU	JEN$A_BLINK	4               ;  Backward link
$EQU	JEN$S_TIME	8
$EQU	JEN$Q_TIME	8               ;  System time of journal entry
$EQU	JEN$W_FACNO	16              ;  Facility number of writer of journal entry
$EQU	JEN$B_DIRECTION	18              ;  Direction of recovery
$EQU	JEN$B_TYPE	19              ;  Type of journal (DT$_...)
$EQU	JEN$L_SEQNO	20              ;  Senquence number of journal entry
$EQU	JEN$B_ENTMOD	24              ;  Access mode of journal entry
$EQU	JEN$B_JNLMOD	25              ;  Access mode of journal
$EQU	JEN$L_ENTUIC	26              ;  UIC of journal entry
$EQU	JEN$L_JNLUIC	30              ;  UIC of journal
$EQU	JEN$W_ENTPROT	34              ;  Protection mask of journal entry
$EQU	JEN$W_JNLPROT	36              ;  Protection mask of journal
$EQU	JEN$L_ENTATR	38              ;  Journal entry attribute flags
$EQU	JEN$S_ruidblock	16
$EQU	JEN$r_ruidblock	42              ;  Recovery Unit ID
$EQU	JEN$S_RUID	16
$EQU	JEN$O_RUID	42
$EQU	JEN$L_MARKPT	58              ;  MARKpointID for MARK/RESET control entries
$EQU	JEN$W_CHANNEL	62              ;  Channel assigned to journal
$EQU	JEN$S_JNLNAME	13
$EQU	JEN$T_JNLNAME	64              ;  Journal name, counted ASCII string
$EQU	JEN$W_ENTSIZE	77              ;  Length of journal entry in bytes
$EQU	JEN$A_ENTRY	79              ;  Address of Journal Entry buffer
$EQU	JEN$L_IOSB_DATA	83              ;  copy of JLE second longword (RCP use only)
	$DEFEND	JEN,$GBL,DEF
	.ENDM
 
	.MACRO	$SGBDEF,$GBL
	$DEFINI	SGB,$GBL
; 
; ++
; 
;  SGB - Shadow Group Block
; 
; 	When a shadow group is mounted the user must pass this 
; 	structure to the CJF $MNTJMD service. This is a list of
; 	descriptors like the item list, which must be zero ended.
; 
; --
$EQU	SGB$M_INIT	1
$EQU	SGB$S_$SGBBIT	1
$EQU	SGB$V_INIT	0               ;  bits defined for FLAGS
$EQU	SGB$C_GRPNAME	255             ;  group logical name
$EQU	SGB$C_COPIES	254             ;  # of spool files
$EQU	SGB$C_PROT	253             ;  protection mask for shadow group
$EQU	SGB$C_MAX_JNLS	252             ;  max journals allowed in shadow group
$EQU	SGB$C_FLAGS	251             ;  flags 
$EQU	SGB$C_UIC	250             ;  uic for shadow group
$EQU	SGB$C_SPLFILSIZ	249             ;  blocks to allocate for spool file
$EQU	SGB$C_SPLNAM	248             ;  Spool file name
$EQU	SGB$C_SPLRESNAM	247             ;  Result spool file name
$EQU	SGB$C_SPLRESLEN	246             ;  Result spool file name length
$EQU	SGB$C_MAX_VAL	245
$EQU	SGB$K_LENGTH	12              ;  Length of this structure
$EQU	SGB$C_LENGTH	12              ;  length of data structure
$EQU	SGB$S_$SGBDEF	12
$EQU	SGB$W_SIZE	0               ;  size of field descriptor block
$EQU	SGB$W_TYPE	2               ;  type of SGB field
$EQU	SGB$L_ADDR	4               ;  address user buffer for attribute
$EQU	SGB$L_SPARE	8               ;  spare
; +
;  SGB codes
; -
	$DEFEND	SGB,$GBL,DEF
	.ENDM
 
	.MACRO	$CNVDEF,$GBL
	$DEFINI	CNV,$GBL
; +
;  Definitions for the create new version item list codes
; -
$EQU	CNV$M_CLOSE	1
$EQU	CNV$_MIN_VAL	1
$EQU	CNV$_CURDEVNAM	1               ;  Current journal copy device name
$EQU	CNV$_NEWDEVNAM	2               ;  Device name for new version of journal copy
$EQU	CNV$_NEWVER	3               ;  Version number for new version of copy
$EQU	CNV$_FILDEVNAM	4               ;  Device name for copy to connect/disconnect
$EQU	CNV$_FILNAM	5               ;  File name for copy to connect/disconnect
$EQU	CNV$_FILVER	6               ;  Version number for copy to connect/disconnect
$EQU	CNV$_OLDFILNAM	7               ;  File name for create new version rename
$EQU	CNV$_ALQ	8               ;  Allocation quantity for new version
$EQU	CNV$_FLAGS	9               ;  Flags
$EQU	CNV$_IOSB	10              ;  Secondary status from create new version
$EQU	CNV$_NVRSA	11              ;  Result buffer address for new version spec.
$EQU	CNV$_NVRSL	12              ;  Result buffer size for new version file spec.
$EQU	CNV$_OVRSA	13              ;  Result buffer address for old version spec.
$EQU	CNV$_OVRSL	14              ;  Result buffer size for old version file spec.
$EQU	CNV$_MAX_VAL	14
$EQU	CNV$S_CNVDEF	1
$EQU	CNV$R_CNVDEF_BITS	0
$EQU	CNV$V_CLOSE	0
	$DEFEND	CNV,$GBL,DEF
	.ENDM
 
	.MACRO	$CJIDEF,$GBL
	$DEFINI	CJI,$GBL
; +
;  Definitions for the $GETCJI service item codes
; -
$EQU	CJI$_MIN_VAL	1
$EQU	CJI$_FILDSKNAM	1               ;  Get the journal file disk name
$EQU	CJI$_MAX_VAL	1
$EQU	CJI$S_CJIDEF	0
	$DEFEND	CJI,$GBL,DEF
	.ENDM
