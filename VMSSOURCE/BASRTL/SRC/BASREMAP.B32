%TITLE 'BAS$REMAP_ARRAY - Remap an array'
MODULE BAS$REMAP_ARRAY (			! Remap an array
		IDENT = '1-010'		! File: BASREMAP.B32 Edit: PLL1010
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Basic Language Support
!
! ABSTRACT:
!
! 	This routine is called by the compiled code to remap an array.
!	The array will be an array of descriptors, since all dynamic
!	variables are stored as descriptors.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Pamela L. Levesque, CREATION DATE: 1-Mar-1982
!
! MODIFIED BY:
!
! 1-001	- Original.  PLL 1-Mar-1982
! 1-002 - Make FETCH_DESC a separate module.  PLL 2-Mar-82
! 1-003 - Correct calculation of length of decimal values.  PLL 15-Mar-1982
! 1-004 - Make sure a length is passed for records.  PLL 16-Mar-1982
! 1-005 - Make routine global.  PLL 17-Mar-1982
! 1-006 - BAS$K_FATINTERR should be OTS$_FATINTERR.  PLL 18-Mar-1982
! 1-007 - Always use the length in the descriptor for records.  PLL 12-Apr-1982
! 1-008 - Add support for multi dimensioned arrays.  PLL 21-May-1982
! 1-009 - Write the updated buffer pointer into the buffer descriptor.  PLL 28-Jun-1982
! 1-010 - Update the length in the buffer descriptor also.  PLL 29-Jun-1982
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$REMAP_ARRAY : NOVALUE;			! Remap an array

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! System symbols, typically from SYS$LIBRARY:STARLET.L32

REQUIRE 'RTLIN:RTLPSECT';			! Define PSECT declarations macros

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare PSECTs for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$STOP : NOVALUE,			! Signal fatal basic error
    LIB$STOP : NOVALUE;				! Signal fatal error

EXTERNAL LITERAL 				! Condition value symbols
    BAS$K_REMOVEBUF : UNSIGNED (8);		! REMAP overflows buffer


%SBTTL 'BAS$REMAP_ARRAY - Remap an array'
GLOBAL ROUTINE BAS$REMAP_ARRAY (			! Remap an array
	BUFFER,					! buffer desc
	ARRAY,					! array desc
	LENGTH					! length for strings or records
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called by the compiled code to remap an array of
!	descriptors.  'Remapping' an array involves updating the pointer
!	field in the descriptor, and the length field for strings or
!	records.
!
! CALLING SEQUENCE:
!
!	BAS$REMAP_ARRAY (buffer.rx.ds, array.mx.da, length.rl.v)
!
! FORMAL PARAMETERS:
!
!	buffer		addr of desc for MAP buffer
!	array		addr of array desc
!	length		longword length for strings or records
!			(-1 for default length, 16, for strings)
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: (or ROUTINE VALUE:)
!
!	NONE
!
! SIDE EFFECTS:
!
!	Will signal if an error occurs
!
!--

    BEGIN

    MAP
	BUFFER : REF BLOCK [8, BYTE],		! buffer desc
	ARRAY : REF BLOCK [,BYTE];		! array desc

    LOCAL
	END_ADDR,				! addr of last array element
	MAX_BUF_ADDR;				! max addr in buffer
 

!+
! Compute the largest possible address in the buffer. 
!-

    MAX_BUF_ADDR = .BUFFER [DSC$A_POINTER] + .BUFFER [DSC$W_LENGTH];

!+
! Loop through the elements of the array.  Update the pointer and length, if
! necessary, of each element.  Give an error if the maximum size of the MAP
! buffer is exceeded.
!-

    END_ADDR = .ARRAY [DSC$A_POINTER] + .ARRAY [DSC$L_ARSIZE] - .ARRAY [DSC$W_LENGTH];
    INCR VALUE_DESCRIP FROM .ARRAY [DSC$A_POINTER] TO .END_ADDR 
	BY .ARRAY [DSC$W_LENGTH] DO
	BEGIN
	MAP
	    VALUE_DESCRIP : REF BLOCK [8, BYTE];

	VALUE_DESCRIP [DSC$A_POINTER] = .BUFFER [DSC$A_POINTER];
	IF .VALUE_DESCRIP [DSC$B_DTYPE] EQL DSC$K_DTYPE_T
	THEN			! set length for strings
	    VALUE_DESCRIP [DSC$W_LENGTH] = (IF .LENGTH LSS 0 THEN 16
						ELSE .LENGTH);
!+
! Update pointer into buffer to reflect space that has been 'used'.
!-

	IF .VALUE_DESCRIP [DSC$B_DTYPE] NEQ DSC$K_DTYPE_P
	THEN
	    BEGIN
	    BUFFER [DSC$A_POINTER] = .BUFFER [DSC$A_POINTER] + .VALUE_DESCRIP [DSC$W_LENGTH];
	    BUFFER [DSC$W_LENGTH] = .BUFFER [DSC$W_LENGTH] - .VALUE_DESCRIP [DSC$W_LENGTH];
	    END
	ELSE
	    BEGIN
	    LOCAL
	    	LEN;

	    LEN = .VALUE_DESCRIP [DSC$W_LENGTH]/2 + 1;
	    BUFFER [DSC$A_POINTER] = .BUFFER [DSC$A_POINTER] + .LEN;
	    BUFFER [DSC$W_LENGTH] = .BUFFER [DSC$W_LENGTH] - .LEN;
	    END;
	IF .BUFFER [DSC$A_POINTER] GTRU .MAX_BUF_ADDR	
	THEN
	    BAS$$STOP (BAS$K_REMOVEBUF);
	END;

    END;					! End of routine BAS$REMAP_ARRAY
!<BLF/PAGE>

END						! End of module BAS$REMAP_ARRAY

ELUDOM
