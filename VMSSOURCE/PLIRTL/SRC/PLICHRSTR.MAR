	.title	pli$chrstr - character star returns routine
	.ident	/1-004/					; Edit CGN1004
							; Edit WHM1003
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; facility:
;
;	VAX/VMS PL1 runtime library.
;
; abstract:
;
;	This module contains the routines necessary for functions to return
;	string values on the stack.
;
; author: r. heinen 18-apr-1979
;
; modified by r. heinen 5-Jan-1982 to fix bug when using CALLS and string 
;		target is more than 255 longwords away from current stack 
;		frame.
;
;	1-003	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;	1-004	Chip Nylander	28-February-1983
;
;		Add the PLI$CHARSTR_R6 routine to handle the case when
;		a string is returned through multiple levels of procedure
;		invocation, in BEGIN-END blocks for example.
;
;--
 
;
; external definitions
;
	$dscdef				; define descriptors
	$sfdef				; define stack offsets 
 
 
	rtshare
;
; data table for calculation of register save area size
;
table:
	.byte	0,4,4,8,4,8,8,12,4,8,8,12,8,12,12,16
	.page
	.sbttl	return string function routines
;++
; pli$charstr_r6 - return string via unknown descriptor through multiple levels
;
; functional description:
;
; This routine is entered with a JMP instruction.
;
; The action of this routine is to return a string based on the function
; return argument addressed by r2.  
;
; The routine either:
;
;	1. Returns the string via the specified descriptor if the address
;	   field is filled in the descriptor.
;
;	2. Returns the string on the stack if the address field is null.
;
; The format of the returned storage is based on the descriptor type.
;
; At this time, two types are allowed:
;
;	1. dsc$k_class_s	- fixed character descriptor
;	2. dsc$k_class_vs	- varying character descriptor
;
; If the descriptor address field is valid the string is returned using the
; descriptor size field to specify the maximum size.  The descriptor is not
; written.
;
; If the address field of the descriptor is null then the string is returned 
; on the stack and the descriptor size and address are filled to reflect the
; return value.
;
; In the case of a stack return, the caller regains control with SP addressing
; the data in the descriptor specified form.
;
; If r3 is zero, then all the work can be handled by a simple application
; of ots$charstar_r6, so we just jump there.  Otherwise, we unwind the
; appropriate number of stack frames as directed by r3, then jump to
; ots$charstar_r6 to finish up.
;
; If the string to be returned is in the local storage of a stack frame to be
; unwound, we allocate a LIB$GET_VM buffer to cache the string while
; things are being unwound, then copy it back to the local storage of the
; resulting procedure frame before jumping to ots$charstar_r6.
;
; Don't be tempted to get any fancier in the future.  All the fancy ideas
; were considered and discarded.  Trying to "bubble up" the string by
; successive invocation of ots$charstar_r6 from a shell routine doesn't work:
; cases like
;		 CALLS	#0,FOO
;		.ENTRY	FOO,<R7,R8,R9>
;		 CALLS	#0,BAR
;		.ENTRY	BAR <R2,R3,R4,R5,R6>
;		 JMP	PLI$CHARSTR_R6
;
; cause registers R2-R6 to be permanently obliterated by the second trip
; through ots$charstar_r6.  Trying to manually restore all the proper registers
; from the proper places as represented by the intervening procedure frames
; was hopeless.  Attempting to slide the intervening procedure frames
; down to make room for the string in the calling procedure creates small
; windows of stack-inconsistency that interfere with AST handling and
; VMS checkpointing.
;
; inputs:
;
;	r0 = size of the string to return
;	r1 = address of the string to return
;	r2 = address of the return descriptor
;	r3 = number of procedure frames to unwind
;
; outputs:
;
;	none.
;
; exceptions:
;
;	A lib$get_vm or lib$free_vm failure generates an appropriate
;	lib$signal.  See also ots$charstar_r6
;
;--
pli$charstr_r6::
	tstl	r3			; generated code should never do this,
	bneq	10$			; but check just to make sure
	brw	ots$charstar_r6		; no work to do
10$:	movl	fp,r6			; initialize for frame search
20$:	decl	r3			; find last frame to be unwound
	bleq	30$			; branch if done
	movl	sf$l_save_fp(r6),r6	; pickup next fp
	brb	20$			; loop
30$:	movq	r0,r3			; save string size and address
	movl	#16,r5			; initialize buffer size
	cmpl	r4,sp			; is string to return on stack?
	blss	40$			; if lss then no
	cmpl	r4,r6			; is it in a frame to unwind?
	bgtr	40$			; if gtr then no
	addl	r3,r5			; have to cache string, add size
40$:	pushl	r5			; push number of bytes to allocate
	clrl	-(sp)			; address to return address
	pushab	(sp)			; setup argument list
	pushab	8(sp)			; 
	calls	#2,g^lib$get_vm		; allocate the memory
	blbs	r0,50$			; if low not set then error
	pushl	r0			; signal error condition
	calls	#1,g^lib$signal
	ret				; really can't finish after this
50$:	popl	r0			; get address of allocated space
	movl	r0,sf$l_save_ap(r6)	; save in ap of last frame to unwind
	popl	(r0)+			; save buffer size in buffer
	movq	r3,(r0)+		; save string size and length in buffer
	movl	r2,(r0)+		; save desc address in buffer
	cmpl	#16,r5			; do we need to cache the string?
	beql	60$			; if eql then no
	movc3	r3,(r4),(r0)		; copy string to buffer
60$:	movab	70$,r0			; want to continue here
	movl	sf$l_save_fp(r6),r1	; in this procedure context
	jmp	g^pli$nonloc_goto		; unwind what we don't want
70$:	cmpl	#16,(ap)		; do we need to restore the string?
	beql	80$			; if eql then no
	subl	4(ap),sp		; make room on stack for string
	movc3	4(ap),16(ap),(sp)	; restore string
	movl	sp,8(ap)		; update string address
80$:	pushl	(ap)+			; push number of bytes to deallocate
	pushab	-4(ap)			; address to deallocate
	movq	(ap)+,r3		; restore string size and address
	movl	(ap)+,r2		; restore descriptor address
	pushab	(sp)			; setup argument list
	pushab	8(sp)			; 
	calls	#2,g^lib$free_vm	; deallocate the memory
	blbs	r0,90$			; if low not set then error
	pushl	r0			; signal error condition
	calls	#1,g^lib$signal
90$:	movq	r3,r0			; setup for ots$charstar_r6
	brb	ots$charstar_r6		; and go finish up


;++
; ots$charstar_r6 - return string via unknown descriptor
;
; functional description:
;
; This routine is entered with a JMP instruction.
;
; The action of this routine is to return a string based on the function
; return argument addressed by r2.  
;
; The routine either:
;
;	1. Returns the string via the specified descriptor if the address
;	   field is filled in the descriptor.
;
;	2. Returns the string on the stack if the address field is null.
;
; The format of the returned storage is based on the descriptor type.
;
; At this time, two types are allowed:
;
;	1. dsc$k_class_s	- fixed character descriptor
;	2. dsc$k_class_vs	- varying character descriptor
;
; If the descriptor address field is valid the string is returned using the
; descriptor size field to specify the mamimum size.  The descriptor is not
; written.
;
; If the address field of the descriptor is null then the string is returned 
; on the stack and the descriptor size and address are filled to reflect the
; return value.
;
; In the case of a stack return, the caller regains control with SP addressing
; the data in the descriptor specified form.
;
; In order to shuffle the stack, a calculation is done which results in the
; storage address of the string taking into account the CALLS notion of the
; incoming call and the alignment of the stack prior to the call.
; With this number, a new frame is created far enough below the other to allow
; for the string.  The current frame and the subroutine frame are then merged
; allowing for the saved registers in the previous frame. The current frame is 
; then changed to a CALLS frame with enough arguments and allignment such that 
; after the RET, SP is correctly addressing the return.
; The previous frame is then removed from the stack FP list. With the space 
; reserved, the string  is copied to the target place being careful not to 
; write over the potential string data space.
;
; One optimization is possible.  If the incomming call is a CALLS then a 
; check is made to see if the argument list passed is large enough to
; hold the target string.  If it is then no aditional frame need be created
; and the string can be stored over the now worthless argument list.  SP is
; then adjusted by modifying the argument count and frame alignment.
;
; inputs:
;
;	r0 = size of the string to return
;	r1 = address of the string to return
;	r2 = address of the return descriptor
;
; outputs:
;
;	none.
;
; exceptions:
;
; Any number of exceptions are possible during this operation. The stack
; movement is done is a way that preserves the integrity of the stack but
; does not provide a method for fielding exceptions and cleaning up.  No
; data is stored if an exception occurs. If an exception handler fields the
; exception and then unwinds to the caller the exception handler is in error.
;
;--
ots$charstar_r6::
	movl	dsc$a_pointer(r2),r5	; fetch target arddress
	beql	stack_return		; if eql then return on stack
	bsbw	return_characters	; return strings via descriptor
	ret				; return to caller
;
; return varying string on stack - calculate target address
;
stack_return:
;
; calculate the sp value prior to call taking into account the call
; instruction type and previous stack alignment
;
	movw	sf$w_save_mask(fp),r4	; fetch frame's save mask
	extzv	#sf$v_stackoffs,#sf$s_stackoffs,r4,r5; get alignment
	movab	20(fp)[r5],r5		; address past fixed part of frame
	clrl	r6			; accumulate reg save mask size
	extzv	#0,#4,r4,r3		; calc size of register save mask
	movzbl	w^table[r3],r3		; get size in bytes for this part
	addl	r3,r6			; accumulate result
	extzv	#4,#4,r4,r3		; get byte size for next section
	movzbl	w^table[r3],r3		;
	addl	r3,r6			; accumulate total
	extzv	#8,#4,r4,r3		; get byte size for next section
	movzbl	w^table[r3],r3		;
	addl	r3,r6			; accumulate total
	addl	r6,r5			; calc address based on size
;
; accumulate argument list space if CALLS used 
;
; check for possible optimization noted above
;
	pushl	r2			; save address of the input descriptor
	movl	r5,r2			; copy possible address of arglist
	subl	r0,r5			; calc string target address
	subl	#2,r5			; allocate size word space
	bbc	#sf$v_calls,r4,move_frame; br if not calls
	ashl	#2,(r2)+,r3		; fetch size of calls arguments in bytes
	addl	r3,r5			; calc original caller's sp
	addl	#4,r5			; include argcount longword
	extzv	#sf$v_stackoffs,#sf$s_stackoffs,-
		sf$w_save_mask(fp),r3	;get this frames alignment
	subl	r3,r2			;align future ap start
	subl3	r2,r5,r3		; is target within arglist?
	blss	move_frame		; if lss then no - use elaborate return
;
; string can be returned inside the calls argument list
;
	extzv	#0,#2,r3,r4		; get byte offset value
	insv	r4,#sf$v_stackoffs,#sf$s_stackoffs,-; set new alignment
		sf$w_save_mask(fp)	;
	addl	r4,r2			; address future ap data
	ashl	#-2,r3,-(r2)		; insert new argument list size
	movl	r2,ap			; reset ap address
	popl	r2			; restore descriptor address
	brb	unknown_target		;
;
; setup area to return string to on stack
;
; allocate enough space for the string on the stack
;
move_frame:
	popl	r2			; restore descriptor size
	cmpl	r5,sp			; stack deep enough now?
	bgequ	15$			; if target above sp then yes
	movl	r5,sp			; else start at target address
;
; create a stack frame below target area
;
15$:	bicl	#3,sp			; align stack
	movaq	-(sp),r3		; setup future argument list storage
					; this storage will be used to base
					; an argument list that will re-align
					; the stack after final RET
	subl	r6,sp			; save room for registers
	callg	4(r3),b^20$		; generate callg stack
					; pass ap as future argument list address
	ret				; never used
;
; routine to copy string to stack
;
; inputs:
;
;	r0,r1 describe the string to return
;	r2 = address of the descriptor
;	r5 = address of the target
;	r6 = size of register save area
;	ap = address of future sp correction argument list
;
; after entry to this routine the current stack frame has the prevoius
; frame's registers saved in the same place as if the previous frame's
; register save mask was used for this entry.  By copying the register
; save mask, psw, and saved fp,ap,pc the frame will be identical.
;
20$:	.word	0			; registers saved above
;
; copy data from previous stack
;
	movl	sf$l_save_fp(fp),r3	; address previous stack frame
	movw	sf$w_save_psw(r3),sf$w_save_psw(fp); insert psw
	movw	sf$w_save_mask(r3),sf$w_save_mask(fp); insert new save mask
	movl	sf$l_save_pc(r3),sf$l_save_pc(fp); copy pc from previous
	movq	sf$l_save_ap(r3),sf$l_save_ap(fp); copy original ap and ap
					; remove previous from stack list
	pushr	#^m<r0,r1,r2,r5>	; save registers
	movc3	r6,20(r3),20(fp)	; copy register save area
	popr	#^m<r0,r1,r2,r5>	; restore registers
	subl3	ap,r5,r3		; calc extra arglist space for sp align
	extzv	#0,#2,r5,r4		; get byte alignment value
	insv	r4,#sf$v_stackoffs,#sf$s_stackoffs,-; set new alignement
		sf$w_save_mask(fp)	;
	addl	r4,ap			; point to new arglist start
	ashl	#-2,r3,-(ap)		; divide by 4 to get longwords
	bisw	#1@sf$v_calls,sf$w_save_mask(fp); force calls
	
;
; fill in the descriptor
;
unknown_target:
	movw	r0,dsc$w_length(r2)	; return size 
	movl	r5,dsc$a_pointer(r2)	; specify address of target
	bsbb	return_characters	; move string
	bicl3	#^xff,(ap),r0		; get arg count above 255
	beql	25$			; if eql then leq 255
	moval	(ap)[r0],r1		; cal new ap address
					; within 255 range
	movzbl	(ap),(r1)		; insert new reduced arg count
					; at future new ap site
	subl3	fp,ap,r2		; cal size of current frame
	subl3	r2,r1,r6		; cal address for new frame
	movc3	r2,(fp),(r6)		; copy frame to new location
	movl	r6,fp			; run on new frame
25$:	ret				; return to caller
;
; case on target format
;
return_characters:
	case	type=b,dsc$b_class(r2),<-
		50$,-			; invalid return
		60$,-			; dsc$k_class_s - fixed string
		50$,-			; invalid return
		50$,-			; invalid return
		50$,-			; invalid return
		50$,-			; invalid return
		50$,-			; invalid return
		50$,-			; invalid return
		50$,-			; invalid return
		50$,-			; invalid return
		50$,-			; invalid return
		70$,-			; dsc$k_class_vs - varying string
		>
50$:	rsb				; invalid type code
;
; fixed return format
;
60$:
	movc3	r0,(r1),(r5)		; return string
	rsb
;
; character varying return code
;
70$:
	cmpw	r0,dsc$w_length(r2)	; calc size to return
	bleq	75$			; if leq then original in range
	movw	dsc$w_length(r2),r0	; set desc as max size
75$:	movw	r0,dsc$w_length(r2)	; set size in desc
	pushr	#^m<r0,r5>		; save size and target
	movc3	r0,(r1),2(r5)		; copy string
;
; for the elaborate case...
; the size must be returned after move to prevent possible overlap problem
;
	cvtlw	(sp)+,@(sp)+		; return size at front of string
	rsb
	.end
