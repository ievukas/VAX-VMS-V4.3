%TITLE 'PERMUTE -- Permute index entries'
MODULE PERMUTE (IDENT = 'V04-000'
		%BLISS32 [, ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!   DSR (Digital Standard RUNOFF) /DSRPLUS DSRINDEX/INDEX Utility
!
! ABSTRACT:
!   Routines to permute index entries
!
! ENVIRONMENT:	 Transportable
!
! AUTHOR:	 JPK
!
! CREATION DATE: December 1981
!
! MODIFIED BY:
!
!	004	JPK00024	23-May-1983
!		Modified lowercasing algorithm in PERMUTE. Now lowercase only
!		if word contains only 1 letter or if second letter in word is
!		lowercase. Picked up modules PAGMRG and POOL from DSR/DSRPLUS
!		since they are no longer used by DSR/DSRPLUS.
!
!	003	JPK00015	04-Feb-1983
!		Cleaned up module names, modified revision history to
!		conform with established standards. Updated copyright dates.
!
!	002	JPK00014	02-Feb-1983
!		Modified PERMUTE to remove extra whitespace in index entries.
!		Changed module name.
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PERMUT     : NOVALUE,			! Permute index entry
    MAKE_ENTRY : NOVALUE,			! Make a permuted index entry
    FIX_CASE   : NOVALUE,			! Fix up case of permuted entry
    COPY_STR   : NOVALUE;			! Copy string from a to b and filter
						! out the nopermute flag.

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';

SWITCHES LIST (REQUIRE);

REQUIRE 'REQ:NDXXPL';				! Extended indexing attributes

REQUIRE 'REQ:LETTER';

SWITCHES LIST (NOREQUIRE);

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

LITERAL
    TRUE = 1,
    FALSE = 0;

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    TAB    : UNSIGNED (8),			! TAB character
    RINTES : UNSIGNED (8);			! RUNOFF escape sequence

EXTERNAL
    XPLBLK : $XPL_BLOCK;			! Extended indexing attributes block

EXTERNAL ROUTINE
    XOUT : NOVALUE;				! Insert index entry into internal pool


%SBTTL 'PERMUT -- Permute Index Entry'
GLOBAL ROUTINE PERMUT (ENTRY_LEN, ENTRY_PTR, XTN, BAR_FLAG) : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to permute and output index entries
!
! FORMAL PARAMETERS:
!
!	ENTRY_LEN - Number of characters in entry
!	ENTRY_PTR - A CH$PTR to index entry
!	XTN	  - Transaction number
!	BAR_FLAG  - Change bar flag
!
! IMPLICIT INPUTS:
!
!	XPLBLK    - Extended indexing attributes block
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!--

    BEGIN

    LOCAL
	WHITE_SPACE,				! Length of string up to white space
	SOURCE_PTR,				! Pointer to source string
	PERMUTE_PTR,				! Pointer to permuted text
	PERMUTE_LEN,				! Length of permuted text
	PERMUTE_STR : VECTOR [CH$ALLOCATION (1200)];	! Put permuted text here

    IF .ENTRY_LEN EQL 0 THEN RETURN;		! Nothing to do if no text

    !
    ! Initialization
    !
    WHITE_SPACE = -1;
    SOURCE_PTR = .ENTRY_PTR;			! Copy pointer to string
    PERMUTE_PTR = CH$PTR (PERMUTE_STR);
    PERMUTE_LEN = 0;

    IF .XPLBLK [XPL$V_VALID] AND .XPLBLK [XPL$V_PERMUTE]
    THEN
	BEGIN
	!
	! Permute index entry
	!
	LOCAL
	    PERMUTE_FIRST,			! TRUE if can permute on first word
	    FIRST_CHAR_SEEN;			! TRUE after 1st character found

	PERMUTE_FIRST = TRUE;
	FIRST_CHAR_SEEN = FALSE;

	INCR I FROM 1 TO .ENTRY_LEN DO
	    BEGIN

	    LOCAL
		CH;					! Current character

	    CH = CH$RCHAR_A (SOURCE_PTR);

	    SELECTONE .CH OF
		SET

		[RINTES]:
		    BEGIN
		    !
		    ! Process RUNOFF escape sequence
		    !
		    LOCAL
			FUNCTION_CODE,
			OPERAND;

		    FUNCTION_CODE = CH$RCHAR_A (SOURCE_PTR);
		    OPERAND = CH$RCHAR_A (SOURCE_PTR);
		    I = .I + 2;

		    SELECTONE .FUNCTION_CODE OF
			SET

			[%C'J'] :
			    BEGIN
			    !
			    ! A word mark. For index entries this starts a 
			    ! subindex entry. Since subindex entries are not 
			    ! permuted, copy subindex entries and exit.
			    !
			    COPY_STR (3 + .ENTRY_LEN - .I, 
				CH$PLUS (.SOURCE_PTR, -3), 
				PERMUTE_LEN, PERMUTE_PTR);

			    EXITLOOP;
			    END;

			[%C'P']:
			    !
			    ! Nopermute flag. 
			    !
			    ! If we haven't seen the first character yet, set
			    ! flag saying that we can't permute on the first word.
			    !
			    ! Remove escape sequence by doing nothing.
			    !
			    IF NOT .FIRST_CHAR_SEEN THEN PERMUTE_FIRST = FALSE;

			[OTHERWISE] :
			    BEGIN
			    !
			    ! Other RUNOFF escape sequences signal a new word 
			    ! if white space was seen. In this case, It's time 
			    ! to make a permuted entry. Once the entry has been
			    ! made (or if it's not necessary), the escape 
			    ! sequence is copied to the permuted text string.
			    !

			    IF .WHITE_SPACE GEQ 0
			    THEN
				MAKE_ENTRY (3 + .ENTRY_LEN - .I, 
				    CH$PLUS (.SOURCE_PTR, -3),
				    .WHITE_SPACE, CH$PTR (PERMUTE_STR), 
				    .XTN, .BAR_FLAG);

			    CH$WCHAR_A (.CH, PERMUTE_PTR);
			    CH$WCHAR_A (.FUNCTION_CODE, PERMUTE_PTR);
			    CH$WCHAR_A (.OPERAND, PERMUTE_PTR);
			    PERMUTE_LEN = .PERMUTE_LEN + 3;
			    END;

			TES;

		    WHITE_SPACE = -1;		! Blank or tab not seen
		    END;

		[%C' ', TAB]:
		    BEGIN
		    !
		    ! Blank or TAB.
		    ! Remove extra whitespace by inserting a blank for
		    ! only the first one seen.
		    !
		    IF .WHITE_SPACE EQL -1
		    THEN
			BEGIN
			!
			! No blanks or tabs seen yet. Save position and insert 
			! a blank in the output string.
			!
			WHITE_SPACE = .PERMUTE_LEN;
			CH$WCHAR_A (%C' ', PERMUTE_PTR);
			PERMUTE_LEN = .PERMUTE_LEN + 1;
			END;

		    END;

		[OTHERWISE]:
		    BEGIN
		    !
		    ! Process normal character
		    !
		    FIRST_CHAR_SEEN = TRUE;
		    CH$WCHAR_A (.CH, PERMUTE_PTR);
		    PERMUTE_LEN = .PERMUTE_LEN + 1;

		    IF .WHITE_SPACE GEQ 0
		    THEN
			!
			! White space was seen before this character. Hence we
			! are starting a new word and it is time to permute.
			!
			MAKE_ENTRY (.ENTRY_LEN - .I + 1, 
			    CH$PLUS (.SOURCE_PTR, -1), .WHITE_SPACE,
			    CH$PTR (PERMUTE_STR), .XTN, .BAR_FLAG);

		    WHITE_SPACE = -1;		! Blank or tab not seen
		    END;

		TES;

	    END;

	IF .PERMUTE_FIRST
	THEN
	    BEGIN
	    FIX_CASE (.PERMUTE_LEN, CH$PTR (PERMUTE_STR), 0, 0);
	    XOUT (.PERMUTE_LEN, CH$PTR (PERMUTE_STR), .XTN, .BAR_FLAG);
	    END;
	END
    ELSE
	BEGIN
	!
	! Do not permute index entry. 
	! Copy it filtering out nopermute flags, insert it in the internal
	! pool and return.
	!
	COPY_STR (.ENTRY_LEN, .ENTRY_PTR, PERMUTE_LEN, PERMUTE_PTR);
	XOUT (.PERMUTE_LEN, CH$PTR (PERMUTE_STR), .XTN, .BAR_FLAG);
	END;

    END;

%SBTTL 'MAKE_ENTRY -- Make a permuted entry'
ROUTINE MAKE_ENTRY (SOURCE_LEN, SOURCE_PTR, PERMUTED_LEN, PERMUTED_PTR, XTN, BAR_FLAG) : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine makes a permuted index entry.
!
!	It copies from the string described by SOURCE_LEN and SOURCE_PTR
!	until either a subindex entry or end of string is encountered.
!	At this point, it appends a comma and a blank and then copies
!	from the permuted string described by PERMUTED_LEN and PERMUTED_PTR.
!	If the break was caused by a subindex entry, the subindex entry
!	is then copied.
!
!	Once the permuted text has been built, it is written out.
!
! FORMAL PARAMETERS:
!
!	SOURCE_LEN	- Length of unpermuted portion of index entry
!	SOURCE_PTR	- CH$PTR to unpermuted portion of index entry
!	PERMUTED_LEN	- Length of permuted portion of index entry
!	PERMUTED_PTR	- CH$PTR to permuted portion of index entry
!	XTN		- Transaction number
!	BAR_FLAG	- Change bar flag
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!--

    BEGIN

    LOCAL
	WHITE_SPACE,				! To delete trailing white space
	PTR,					! Copy of SOURCE_PTR
	LINE : VECTOR [CH$ALLOCATION (1200)],	! Build permuted string here
	L_PTR,					! CH$PTR into LINE
	L_LEN;					! Length of string in LINE

    !
    ! Initialization
    !
    WHITE_SPACE = -1;
    PTR = .SOURCE_PTR;
    L_PTR = CH$PTR (LINE);
    L_LEN = 0;

    INCR I FROM 1 TO .SOURCE_LEN DO
	BEGIN

	LOCAL
	    CH;					! Current character

	CH = CH$RCHAR_A (PTR);

	SELECTONE .CH OF
	    SET

	    [RINTES]:
		BEGIN
		!
		! RUNOFF escape sequence
		!
		LOCAL
		    FUNCTION_CODE,
		    OPERAND;

		FUNCTION_CODE = CH$RCHAR_A (PTR);
		OPERAND = CH$RCHAR_A (PTR);
		I = .I + 2;

		SELECTONE .FUNCTION_CODE OF
		    SET

		    [%C'J'] :
			BEGIN
			!
			! Subindex flag. Delete trailing white space, 
			! and append comma, blank
			!
			IF .WHITE_SPACE NEQ -1
			THEN
			    BEGIN
			    L_PTR = CH$PLUS (.L_PTR, (.WHITE_SPACE - .L_LEN));
			    L_LEN = .WHITE_SPACE;
			    END;

			CH$WCHAR_A (%C',', L_PTR);
			CH$WCHAR_A (%C' ', L_PTR);
			L_LEN = .L_LEN + 2;

			!
			! Raise case of first letter in permuted entry and
			! drop case of original first letter if necessary.
			!
			FIX_CASE (.L_LEN, CH$PTR (LINE), .PERMUTED_LEN, .PERMUTED_PTR);

			!
			! Finally, append permuted text to end of line,
			! append the subindex entry and output.
			!
			COPY_STR (.PERMUTED_LEN, .PERMUTED_PTR, L_LEN, L_PTR);
			COPY_STR (3 + .SOURCE_LEN - .I, CH$PLUS (.PTR, -3), L_LEN, L_PTR);
			XOUT (.L_LEN, CH$PTR (LINE), .XTN, .BAR_FLAG);
			RETURN;
			END;

		    [%C'P']:
			!
			! Filter out nopermute flags by doing nothing
			!
			;

		    [OTHERWISE] :
			BEGIN
			!
			! Other RUNOFF escape sequences are just copied
			!
			CH$WCHAR_A (.CH, L_PTR);
			CH$WCHAR_A (.FUNCTION_CODE, L_PTR);
			CH$WCHAR_A (.OPERAND, L_PTR);
			L_LEN = .L_LEN + 3;
			END;

		    TES;

		WHITE_SPACE = -1;
		END;

	    [%C' ', TAB]:
		BEGIN
		!
		! Blank or TAB.
		! Remove extra whitespace by inserting a blank for
		! only the first one seen.
		!
		IF .WHITE_SPACE EQL -1
		THEN
		    BEGIN
		    !
		    ! No blanks or tabs seen yet. Save position and insert a 
		    ! blank in the output string.
		    !
		    WHITE_SPACE = .L_LEN;
		    CH$WCHAR_A (%C' ', L_PTR);
		    L_LEN = .L_LEN + 1;
		    END;

		END;

	    [OTHERWISE]:
		BEGIN
		!
		! A normal character
		!
		WHITE_SPACE = -1;
		CH$WCHAR_A (.CH, L_PTR);
		L_LEN = .L_LEN + 1;
		END;

	    TES;

	END;

    !
    ! End of input string reached. Delete trailing white space,
    ! append comma, blank
    !
    IF .WHITE_SPACE NEQ -1
    THEN
	BEGIN
	L_PTR = CH$PLUS (.L_PTR, (.WHITE_SPACE - .L_LEN));
	L_LEN = .WHITE_SPACE;
	END;

    CH$WCHAR_A (%C',', L_PTR);
    CH$WCHAR_A (%C' ', L_PTR);
    L_LEN = .L_LEN + 2;

    !
    ! Raise case of first letter in permuted entry and
    ! drop case of original first letter if necessary.
    !
    FIX_CASE (.L_LEN, CH$PTR (LINE), .PERMUTED_LEN, .PERMUTED_PTR);

    !
    ! Finally, append permuted text to end of line and output.
    !
    COPY_STR (.PERMUTED_LEN, .PERMUTED_PTR, L_LEN, L_PTR);
    XOUT (.L_LEN, CH$PTR (LINE), .XTN, .BAR_FLAG);
    END;

%SBTTL 'FIX_CASE -- Fix up case of permuted entry'
ROUTINE FIX_CASE (B_LEN, B_PTR, P_LEN, P_PTR) : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to fix up the case of the permuted index
!	entry. The case of the first character of the new entry is raised.
!	The case of the first character of the permuted text is lowered
!	if there are any lower case characters in the first word of the
!	permuted text.
!
! FORMAL PARAMETERS:
!
!	B_LEN - Length of string which begins new entry
!	B_PTR - Pointer to string which begins new entry
!	P_LEN - Length of permuted string
!	P_PTR - Pointer to permuted string
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!--
    BEGIN
    LOCAL
	PTR,
	LEN,
	FIRST_PTR,
	FIRST_CH,
	LOWER;

    !
    ! Raise case of new first character if necessary
    !
    PTR = .B_PTR;
    LEN = .B_LEN;

    INCR I FROM 1 TO .LEN DO
	BEGIN
	LOCAL
	    CH;

	CH = CH$RCHAR (.PTR);

	IF .CH EQL RINTES
	THEN
	    BEGIN
	    !
	    ! RUNOFF escape sequence - skip rest of sequence
	    !
	    CH$RCHAR_A (PTR);
	    CH$RCHAR_A (PTR);
	    CH$RCHAR_A (PTR);
	    I = .I + 2;
	    END
	ELSE
	    BEGIN
	    !
	    ! Have first character in string
	    !
	    IF LOWER_LETTER (.CH)
	    THEN
		!
		! Character is a lowercase letter - convert to upper case
		!
		CH$WCHAR (UPPER_CASE (.CH), .PTR);

	    EXITLOOP;
	    END;
	END;

    !
    ! If there's no permuted text then just return
    !
    IF .P_LEN EQL 0 THEN RETURN;

    !
    ! Find first character in permuted text
    !
    FIRST_PTR = .P_PTR;

    DECR I FROM .P_LEN TO 1 DO
	BEGIN

	FIRST_CH = CH$RCHAR (.FIRST_PTR);

	IF .FIRST_CH EQL RINTES
	THEN
	    BEGIN
	    !
	    ! RUNOFF escape sequence - skip it
	    !
	    CH$RCHAR_A (FIRST_PTR);
	    CH$RCHAR_A (FIRST_PTR);
	    CH$RCHAR_A (FIRST_PTR);
	    I = .I - 2;
	    END
	ELSE
	    BEGIN
	    !
	    ! Have pointer to first character.
	    ! Set length of remainder of string and exit.
	    !
	    LEN = .I - 1;
	    EXITLOOP;
	    END;
	END;


    IF UPPER_LETTER (.FIRST_CH)
    THEN
	BEGIN
	!
	! Lower case of first character in permuted text if the
	! second letter in the word is lowercase.
	!
	PTR = CH$PLUS (.FIRST_PTR, 1);

	LOWER = FALSE;				! No lower case characters seen

	INCR I FROM 1 TO .LEN DO
	    BEGIN
	    LOCAL
		CH;

	    CH = CH$RCHAR_A (PTR);

	    SELECTONE TRUE OF
		SET

		[.CH EQL RINTES]:
		    BEGIN
		    !
		    ! RUNOFF escape sequence - skip rest of sequence
		    !
		    CH$RCHAR_A (PTR);
		    CH$RCHAR_A (PTR);
		    I = .I + 2;
		    END;

		[(.CH EQL %C' ') OR (.CH EQL TAB)]:
		    BEGIN
		    !
		    ! Whitespace - end of word
		    ! Leave case alone.
		    !
		    EXITLOOP;
		    END;

		[LOWER_LETTER (.CH)]:
		    BEGIN
		    !
		    ! Lower case letter - note it and exit loop
		    !
		    LOWER = TRUE;
		    EXITLOOP;
		    END;

		[UPPER_LETTER (.CH)]:
		    !
		    ! Second letter is upper case. Terminate scan but don't
		    ! lower case of first letter.
		    !
		    EXITLOOP;

		[OTHERWISE]:
		    !
		    ! Some other character - ignore it
		    !
		    ;

		TES;

	    END;

	IF .LOWER THEN CH$WCHAR (LOWER_CASE (.FIRST_CH), .FIRST_PTR);
	END;

    END;

%SBTTL 'COPY_STR -- Copy string source to destination'
ROUTINE COPY_STR (SOURCE_LEN, SOURCE_PTR, DEST_LEN, DEST_PTR) : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine copies the string described by SOURCE_LEN and
!	SOURCE_PTR to the area pointed to by DEST_PTR.
!
!	Upon completion, DEST_PTR points to the next character position
!	in the output string and DEST_LEN has been updated to reflect
!	the number of characters copied.
!
!	Trailing white space is deleted from the source string.
!
! FORMAL PARAMETERS:
!
!	SOURCE_LEN - Length of source string
!	SOURCE_PTR - CH$PTR to source string
!	DEST_LEN   - Address of destination string length variable
!	DEST_PTR   - Address of a CH$PTR to destination string
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!--

    BEGIN

    BIND
	TO_LEN = .DEST_LEN,
	TO_PTR = .DEST_PTR;

    LOCAL
	WHITE_SPACE,
	FROM_PTR;

    FROM_PTR = .SOURCE_PTR;
    WHITE_SPACE = -1;

    INCR I FROM 1 TO .SOURCE_LEN DO
	BEGIN

	LOCAL
	    CH;					! Current character

	CH = CH$RCHAR_A (FROM_PTR);

	SELECTONE .CH OF
	    SET

	    [RINTES]:
		BEGIN
		!
		! RUNOFF escape sequence
		!

		LOCAL
		    FUNCTION_CODE,
		    OPERAND;

		FUNCTION_CODE = CH$RCHAR_A (FROM_PTR);
		OPERAND = CH$RCHAR_A (FROM_PTR);
		I = .I + 2;

		IF .FUNCTION_CODE NEQ %C'P'
		THEN
		    BEGIN
		    !
		    ! Copy any runoff sequence except the nopermute sequence
		    !
		    CH$WCHAR_A (.CH, TO_PTR);
		    CH$WCHAR_A (.FUNCTION_CODE, TO_PTR);
		    CH$WCHAR_A (.OPERAND, TO_PTR);
		    TO_LEN = .TO_LEN + 3;
		    END;

		WHITE_SPACE = -1;		! No trailing white space
		END;

	    [%C' ', TAB]:
		BEGIN
		!
		! Blank or TAB.
		! Remove extra whitespace by inserting a blank for
		! only the first one seen.
		!
		IF .WHITE_SPACE EQL -1
		THEN
		    BEGIN
		    !
		    ! No blanks or tabs seen yet. Save position and insert a 
		    ! blank in the output string.
		    !
		    WHITE_SPACE = .TO_LEN;
		    CH$WCHAR_A (%C' ', TO_PTR);
		    TO_LEN = .TO_LEN + 1;
		    END;

		END;

	    [OTHERWISE]:
		BEGIN
		!
		! Copy a normal character
		!
		WHITE_SPACE = -1;
		CH$WCHAR_A (.CH, TO_PTR);
		TO_LEN = .TO_LEN + 1;
		END;

	    TES;

	END;

    IF .WHITE_SPACE NEQ -1
    THEN
	BEGIN
	!
	! Delete trailing whitespace
	!
	TO_PTR = CH$PLUS (.TO_PTR, (.WHITE_SPACE - .TO_LEN));
	TO_LEN = .WHITE_SPACE;
	END;

    END;

END						! End of module
ELUDOM
