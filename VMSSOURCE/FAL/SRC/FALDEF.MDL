;	.TITLE	$FALDEF - FAL CONTROL BLOCK DEFINITIONS
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: FAL (DECnet File Access Listener)
;
; Abstract:
;
;	This module defines symbols for the FAL control blocks that are defined
;	by the $FALWRKDEF and $FALSTBDEF macros.
;
; Environment:
;
;	The MDL translator must be used to convert FALDEF.MDL into
;	FALDEF.MAR (and FALDEF.B32).
;
; Author: James A. Krycka,	Creation Date:	16-JUN-1977
;
; Modified By:
;
;	V03-007	JAK0145		J A Krycka	12-APR-1984
;		Track changes in DAP message building algorithm: rename
;		FAL$Q_XMT to FAL$Q_BLD, rename FAL$Q_AUX to FAL$Q_XMT, and
;		remove FAL$L_AUX_PTR.
;
;	V03-006	JAK0137		J A Krycka	12-MAR-1984
;		Add FAL$V_LOG_CNT logging option and FAL$V_DIS_PMR option.
;
;	V03-005	JAK0136		J A Krycka	07-MAR-1984
;		Expand the FAL work area to 8K bytes.
;		Extend size of Key Definition XAB storage area.
;		Replace FAL$Q_NCB and FAL$T_NCBBUF with FAL$Q_FALLOG,
;		FAL$T_FALLOG, FAL$Q_SYSNET, and FAL$T_SYSNET.
;		Add FAL$T_PRTBUF1 and FAL$T_PRTBUF2 for FAL logging.
;		Replace FAL$L_LOGFLG with four subfields that identify FAL$LOG
;		options by class.
;		Also add several new fields to store FAL$LOG option values.
;		General cleanup and reorganization.
;
;	V03-004	JAK0107		J A Krycka	06-MAY-1983
;		Extend size of Protection XAB storage area.
;
;	V03-003	JAK0104		J A Krycka	17-MAR-1983
;		Add FAL$Q_RMS and FAL$L_RMS_PTR.
;		Add FAL$V_DIS_RBK logging option.
;		Add FAL$V_TERMINATE flag.
;
;	V03-002	KRM0098		K Malik		06-Apr-1983
;		Add FAL$V_NEWNAM flag for use during a rename operation to
;		tell FAL$ENCODE_NAM and FAL$LOG_RESNAM which NAM block to use.
;
;	V03-001	KRM0070		K Malik		23-Nov-1982
;		Add FAL$L_FAB2, FAL$L_NAM2, FAL$T_NAMESPEC, FAL$T_EXPAND2,
;		and FAL$T_RESULT2 for use by $RENAME.
;		Increase size of arrays to support 32 Allocation and Key
;		Definition XABs.
;		Change FAL$B_LOGFLG to FAL$L_LOGFLG.
;		Rename some symbols for consistency.
;
;--

;++
; $FALWRKDEF defines FAL work area offsets and symbols.
;--

	$STRUCT	FAL,WRKDEF
				; ----------------------------------------------
				; Miscellaneous constants
				; ----------------------------------------------
	K RCVEFN,1		; Link receive QIO event flag
	K XMTEFN,2		; Link transmit QIO event flag
	K MBXEFN,3		; Mailbox receive QIO event flag
	K MAXBUFSIZ,<64*512-1>	; Maximum DAP buffer size supported
	K MIN_RBK,1		; Minimum RMS multi-block cache size in blocks
	K MAX_RBK,127		; Maximum RMS multi-block cache size in blocks
	K DFLT_RBK,64		; Default RMS multi-block cache size in blocks
	K DFLT_BPM,20		; Default number of bytes per DAP message to
				;  display when DAP messages are logged
	K DFLT_BPL,20		; Default number of bytes per line to display
				;  when DAP messages are logged
				; ----------------------------------------------
				; ******** offset = ^X0000 = 0 ********
				; ----------------------------------------------
	F FLG,Q			; FAL status flags follow (bits 00-63):
	  S LOGGING,4,B		; Define bits 32-39 as FAL logging options
	  S ENABLE,5,B		; Define bits 40-47 as FAL enable options
	  S DISABLE,6,B		; Define bits 48-55 as FAL disable options
	  S MISCOPT,7,B		; Define bits 56-63 as FAL miscellaneous options
	  V <M			;
				; DAP message state information:
	    CNF_MSG		;  Processed Configuration message
	    ATT_MSG		;  Processed Attributes message
	    ,6			;
				; Miscellaneous state information:
	    FTM			;  File transfer mode (vs record access mode)
	    BLK_IO		;  Block I/O mode (vs record I/O mode)
	    WILD		;  This is a wildcard operation (determined
				;   via parse of filespec string)
	    NEWNAM		;  Use NAM2 block (used during rename operation)
	    TERMINATE		;  FAL has entered termination sequence
	    ,3			;
				; QIO related state information:
	    RCVQIO		;  Link receive QIO outstanding flag
	    RCVAST		;  Link receive AST delivered flag
	    XMTQIO		;  Link transmit QIO outstanding flag
	    XMTAST		;  Link transmit AST delivered flag
	    MBXQIO		;  Mailbox receive QIO outstanding flag
	    MBXAST		;  Mailbox receive AST delivered flag
	    ,2			;
				; Routine call function modifiers:
				;  (The next bit is input to FAL$TRANSMIT)
	    LAST_MSG		;  Last DAP message in sequence to be blocked
				;  (The next 3 bits are input to FAL$ENCODE_STS)
	    RET_RFA		;  Include RFA field in Status message
	    RET_RECN		;  Include RECNUM field in Status message
	    RET_STV		;  Include STV field in Status message
	    ,4			;
				; ----------------------------------------------
				; These flags specify FAL logging options:
	    LOG_NAM		;  Enable logging of filename/function requests
	    LOG_STA		;  Enable logging of data thruput statistics
	    LOG_MSG		;  Enable logging of individual DAP messages
				;   as they are encoded and decoded
	    LOG_AST		;  Enable logging of DAP message packet AST
				;   completions
	    LOG_QIO		;  Enable logging of DAP message packet QIO
				;   requests
	    LOG_CNT		;  Enable logging of internal counters
	    LOG_BIT6		;  Spare
	    ,1			;
				; These flags enable FAL features:
	    ENA_BIT0		;  Spare
	    ,7			;
				; These flags disable FAL features:
	    DIS_CRC		;  Disable file level CRC checksum computation
	    DIS_MBK		;  Disable DAP message blocking
	    DIS_RBK		;  Disable RMS multi-block caching to/from
				;   disk during block I/O file transfer mode
	    DIS_PMR		;  Disable poor-man's routing (i.e., reject any
				;   filespec received that contains a nodename)
	    DIS_BIT4		;  Spare
	    ,3			;
				; These flags signal a parsing failure or denote
				; qualifiers which require additional processing
	    PARSE_ERR		;  Error in parse of FAL$LOG equivalence string
	    USE_DBS		;  Use specified DAP buffer size
	    USE_SYS		;  Use specified 2-byte operating system and
				;   file system type identification
	    USE_VER		;  Use specified 4-byte DAP version number value
	    USE_SC1		;  Use specified 32-bit value as first part of
				;   system capabilities mask to send
	    USE_SC2		;  Use specified 32-bit value as second part of
				;   system capabilities mask to send
	    ,2			;
	    >			;
				; ----------------------------------------------
	F STATE_CTX,Q		; State transition table context:
;	  S TBL_ADDR,0,L	;  State table address
;	  S CUR_ADDR,4,L	;  Current table entry address
	F VALUE,B		; State transition value
	F RCVBUFIDX,B		; Receive buffer index (into address table)
	F RBK_CACHE,B		; Number of blocks in RMS multi-blocking cache
	F ,B,5			; Unused locations
	F QIOBUFSIZ,W		; Largest QIO request that can be supported by
				;  FAL (i.e., buffer size available)
	F DAPBUFSIZ,W		; Maximum DAP message size (determined via
				;  exchange of Configuration messages)
	F LNKCHN,W		; Link channel #
	F MBXCHN,W		; Associated mailbox channel #
	F RCVIOSB,Q		; Link receive I/O status block
	F XMTIOSB,Q		; Link transmit I/O status block
	F MBXIOSB,Q		; Mailbox receive I/O status block
	F MBX,Q			; Mailbox message descriptor block
	F RCV,Q			; Receive DAP message descriptor
	F XMT,Q			; Transmit DAP message descriptor
				;  (used for blocking DAP messages)
	F BLD,Q			; Build DAP message descriptor
				;  (used in building a new DAP message)
				;  (note that BLD buffer overlays XMT buffer)
	F ,L			; Spare
	F RCVBUF,L,2		; Receive buffer address table
	  K RCVBUFCNT,2		; Number of receive buffers
	F RMS,Q			; RMS block buffer descriptor
	F RMS_PTR,L		; Next byte pointer for RMS block buffer
	F DISPLAY,W		; Mask of optional DAP messages to return
				;  (copy of DAP$W_DISPLAY1 or DAP$W_DISPLAY2)
	F RECEIVED,W		; Mask of received XABs to link to XAB chain
				;  (i.e., XABs generated as a result of
				;  receiving optional DAP messages)
	  V <M			; Meaning:
	    KEYXAB		;  Key Definition XAB(s)
	    ALLXAB		;  Allocation XAB(s)
	    DATXAB		;  Date and Time XAB
	    PROXAB		;  Protection XAB
	    RDTXAB		;  Revision Date and Time XAB
	    >
	F ALLXABINI,L		; Bit vector of Allocation XABs initialized
	F KEYXABINI,L		; Bit vector of Key Definition XABs initialized
	F CHAIN_NXT,L		; Address of last pointer cell in XAB chain
				; ----------------------------------------------
				; ******** offset = ^X0080 = 128 ********
				; ----------------------------------------------
				; (VOLNAME and DIRNAME must be contiguous)
	F VOLNAME,Q		; Volume name descriptor (for 3-part name)
	F DIRNAME,Q		; Directory name descriptor (for 3-part name)
	F FALLOG,Q		; FAL$LOG equivalence string descriptor
	F SYSNET,Q		; SYS$NET equivalence string descriptor (which
				;  will be made into an NCB descriptor)
	F USE_DBS,W		; User entered DAP buffer size
	F USE_SYS,W		; User entered 2-byte operating system and file
				;  system type identification field
	F USE_VER,L		; User entered 4-byte DAP version number field
	F USE_SC1,L		; User entered system capabilities mask (00-31)
	F USE_SC2,L		; User entered system capabilities mask (31-63)
	F ,L,4			; Unused locations
	F STB,L,16		; Statistics block
	  K STB,64		; Statistics block size
	F DAP,T,192		; DAP control block storage area
	  K DAP,192		; DAP control block size
	F ,L,8			; Reserved for future expansion of DAP structure
	F ,L,5			; Unused locations
	F DATATYPE,B		; Copy of DAP$B_DATATYPE
	F ACCOPT,B		; Copy of DAP$B_ACCOPT
	F ACCFUNC,B		; Copy of DAP$B_ACCFUNC
	F RAC,B			; Copy of DAP$B_RAC
	F FOP,L			; Copy of DAP$L_FOP
	F NUMBER,L		; Requested random record number
				; ----------------------------------------------
				; ******** offset = ^X0200 = 512 ********
				; ----------------------------------------------
				; (FAB, RAB, NAM, and FHCXAB must be contiguous)
	F FAB,L,20		; FAB storage area
	  K FAB,80		; FAB size
	F RAB,L,17		; RAB storage area
	  K RAB,68		; RAB size
	F NAM,L,24		; NAM block storage area
	  K NAM,96		; NAM control block size
	F FHCXAB,L,11		; File Header Characteristics XAB storage area
	  K FHCXAB,44		; File Header Characteristics XAB size
	F DATXAB,L,11		; Date and Time XAB storage area
	  K DATXAB,44		; Date and Time XAB size
	F PROXAB,L,22		; Protection XAB storage area
	  K PROXAB,88		; Protection XAB size
	F SUMXAB,L,3		; Summary XAB storage area
	  K SUMXAB,12		; Summary XAB size
	F RDTXAB,L,5		; Revision Date and Time XAB storage area
	  K RDTXAB,20		; Revision Date and Time XAB size
	F ,L,12			; Unused locations
	F TEMP,L		; Temporary longword work area
	F TEMP,Q		; Temporary quadword work area
				; ----------------------------------------------
				; ******** offset = ^X0400 = 1024 ********
				; ----------------------------------------------
	F FILESPEC,T,256	; File specification string buffer
	  K FILESPEC,255	; File specification string buffer size
	F EXPAND,T,256		; Expanded name string buffer
	  K EXPAND,255		; Expanded name string buffer size
	F RESULT,T,256		; Resultant name string buffer
	  K RESULT,255		; Resultant name string buffer size
	F KEYBUF,T,256		; Key buffer
	  K KEYBUF,255		; Key buffer size
				; ----------------------------------------------
				; ******** offset = ^X0800 = 2048 ********
				; ----------------------------------------------
				; RMS structures for use by RENAME operation
				; (FAB2 and NAM2 must be contiguous)
	F FAB2,L,20		; FAB storage area
	  K FAB2,80		; FAB size
	F NAM2,L,24		; NAM storage area
	  K NAM2,96		; NAM size
	F ,L,20			; Unsued locations
	F FILESPEC2,T,256	; File specification string buffer
	  K FILESPEC2,255	; File specification string buffer size
	F EXPAND2,T,256		; Expanded name string buffer
	  K EXPAND2,255		; Expanded name string buffer size
	F RESULT2,T,256		; Resultant name string buffer
	  K RESULT2,255		; Resultant name string buffer size
				; ----------------------------------------------
				; ******** offset = ^X0C00 = 3072 ********
				; ----------------------------------------------
	F ALLXAB,L,8		; Allocation XAB storage area
	  K ALLXAB,32		; Allocation XAB size
	  K MAX_AID,31		; Largest area ID value supported by FAL
	F ,L,248		; Space for 31 other Allocation XABs in array
				; ----------------------------------------------
				; ******** offset = ^X1000 = 4096 ********
				; ----------------------------------------------
	F KEYXAB,L,19		; Key Definition XAB storage area
	  K KEYXAB,76		; Key Definition XAB size
	  K MAX_REF,31		; Largest key of reference value supported here
	F ,L,589		; Space for 31 alternate Key Definition XABs
	F MBXBUF,T,64		; Mailbox buffer
	  K MBXBUF,64		; Mailbox buffer size
	  K MBXQUOTA,<64*2>	; Mailbox quota
	F ,L,16			; Unused locations
				; ----------------------------------------------
				; ******** offset = ^X1A00 = 6656 ********
				; ----------------------------------------------
	F PRTBUF1,T,256		; Primary (non-AST-level) print buffer
	F PRTBUF2,T,256		; Secondary (AST-level) print buffer
	  K PRTBUF,256		; Print buffer size (for FAL logging)
				; ----------------------------------------------
	M 1			; ******** offset = ^X1C00 = 7168 ********
				; ----------------------------------------------
	F KEYNAM,L,8		; Key Name buffer
	  K KEYNAM,32		; Key Name buffer size
	F ,L,248		; Space for 31 alternate Key Name buffers
				; ----------------------------------------------
	P 1			; ******** offset = ^X1C00 = 7168 ********
				; ----------------------------------------------
	F FALLOG,T,256		; Logical name translation buffer for FAL$LOG
	  K FALLOG,255		; Logical name translation buffer size
	F SYSNET,T,256		; Logical name translation buffer for SYS$NET
	  K SYSNET,255		; Logical name translation buffer size
	F VOLNAME,T,256		; Volume name string buffer (to store
				;  (concatenated node specs plus device name)
	  K VOLNAME,255		; Volume name string buffer size
	F DIRNAME,T,256		; Directory name string buffer
	  K DIRNAME,255		; Directory name string buffer size
				; ----------------------------------------------
				; ******** offset = ^X2000 = 8192 ********
				; ----------------------------------------------
	L WRKBLN		; Define length of this control block
	E			;

;++
; $FALSTBDEF defines FAL statistics block offsets and symbols.
;--

	$STRUCT	FAL,STBDEF
	F RCV_PKT,L		; Total # DAP message packets received
	F RCV_MSG,L		; Total # DAP messages received
	F RCV_DAT,L		; Total # records/blocks received
				;	  (i.e., # DAP Data messages)
	F RCV_USR,L		; Total # bytes of user data received
				;	  (i.e., # bytes in all records/blocks)
	F RCV_LNK,L		; Total # bytes of link data received
				;	  (i.e., # bytes in all DAP messages)
	F XMT_PKT,L		; Total # DAP message packets transmitted
	F XMT_MSG,L		; Total # DAP messages transmitted
	F XMT_DAT,L		; Total # records/blocks transmitted
				;	  (i.e., # DAP Data messages)
	F XMT_USR,L		; Total # bytes of user data transmitted
				;	  (i.e., # bytes in all records/blocks)
	F XMT_LNK,L		; Total # bytes of link data transmitted
				;	  (i.e., # bytes in all DAP messages)
	F ,L,6			; Unused locations
	L STBBLN		; Define length of this control block
	E			;

				; End of module
