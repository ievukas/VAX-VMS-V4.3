MODULE CLENUP (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This module performs the necessary cleanup after an operation.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  6-Jan-1977  23:53
!
! MODIFIED BY:
!
!	V03-034	CDS0022		Christian D. Saether	30-Aug-1984
!		Allow for multi-header directory files.
!		Have error cleanup remove possible bias on primary_fcb
!		refcnt.
!
!	V03-033	CDS0021		Christian D. Saether	23-Aug-1984
!		Move code that marks FCB stale to a routine in LOCKERS.
!
!	V03-032	CDS0020		Christian D. Saether	13-Aug-1984
!		Add code to mark primary fcb stale clusterwide.
!
!	V03-031	CDS0019		Christian D. Saether	 7-Aug-1984
!		Cleanup potential directory index cache block
!		when deleting a file.
!
!	V03-030	CDS0018		Christian D. Saether	 1-Aug-1984
!		Modify test for directory fcb.
!		Add SET_DIRINDX routine.
!		Add NUKE_PRIM_FCB routine.
!		Modify ZERO_IDX routine.
!
!	V03-029	ACG0438		Andrew C. Goldstein,	19-Jul-1984  17:55
!		Add cluster-wide special cache interlock logic.
!		Condition DELETEACL calls on non-empty ACL.
!		Use central dequeue routine.
!
!	V03-028	CDS0017		Christian D. Saether	25-May-1984
!		Call KILL_BUFFERS routine to flush cache in
!		certain situations when not in a cluster.
!
!	V03-027	CDS0016		Christian D. Saether	 9-May-1984
!		Release allocation lock prior to calling send_symbiont.
!
!	V03-026	CDS0015		Christian D. Saether	 4-May-1984
!		No not map notrunc into nowrite.
!		Add bugcheck if access lock conversion fails in make_deaccess.
!
!	V03-025	CDS0014		Christian D. Saether	 3-May-1984
!		Call CONV_ACCLOCK to remove possible access lock
!		when deallocating fcb's.
!
!	V03-024	CDS0013		Christian D. Saether	19-Apr-1984
!		Changes to FCB$W_ACNT handling.
!
!	V03-023	ACG0415		Andrew C. Goldstein,	5-Apr-1984  21:27
!		Interface change to ACL_DELETEACL
!
!	V03-022	ACG0408		Andrew C. Goldstein,	23-Mar-1984  11:20
!		Make rest of global storage based
!
!	V03-021	CDS0012		Christian D. Saether	 9-Mar-1984
!		Put in bug trap to catch possible double remque of
!		FCB.
!
!	V03-020	CDS0011		Christian D. Saether	23-Feb-1984
!		Use new WRITE_DIRTY routine to replace FLUSH_BUFFERS.
!		Remove references to FLUSH_FID.
!		Replace FLUSH_FID (0) with KILL_CACHE calls.
!
!	V03-019	CDS0010		Christian D. Saether	27-Dec-1983
!		Use L_NORM linkage.
!		Use BIND_COMMON macro to reduce external declarations.
!
!	V03-018	CDS0009		Christian D. Saether	23-Nov-1983
!		If DIR_FCB is the same as PRIMARY_FCB, do not return
!		the FCB until the end of cleanup (as PRIMARY_FCB, not
!		DIR_FCB).
!		Move cleanup of DIR_FCB until after all i/o is done.
!		Remove REMOVE_FCB routine (kernel call not necessary).
!
!	V03-017	LMP0164		L. Mark Pilant,		10-Oct-1983  15:22
!		Delete the in-core ACL if doing an FCB fixup.
!
!	V03-016	CDS0008		Christian D. Saether	 3-Oct-1983
!		Handle CURR_LCKINDX in err_cleanup.  Don't read
!		headers without appropriate serial locks.
!
!	V03-015	CDS0007		Christian D. Saether	14-Sep-1983
!		Take out deqall hack now that RMS does it's own
!		root locks again.
!
!	V03-014	CDS0006		Christian D. Saether	27-Jul-1983
!		Change interface to SEND_SYMBIONT.
!
!	V03-013	LJK0199		Lawrence J. Kenah	27-Apr-1983
!		Do not credit FILCNT when giving back shared window
!
!	V03-012	CDS0006		Christian D. Saether	28-Apr-1983
!		Clear DIR_ENTRY when DIR_FCB is cleared.
!
!	V03-011	CDS0005		Christian D. Saether	21-Apr-1983
!		Change interface to TRUNCATE routine.
!
!	V03-010	CDS0004		Christian D. Saether	19-Apr-1983
!		Bug check on unexpected lock manager errors.
!		Clear ACCLKID field in window.
!
!	V03-009	ACG0323		Andrew C. Goldstein,	12-Apr-1983  14:09
!		Add extended file name to back link fixup
!
!	V03-008	STJ3069		Steven T. Jeffreys,	23-Mar-1983
!		Use the ERASE_REQUESTED parameter of RETURN_BLOCKS.
!
!	V03-007	CDS0003		Christian D. Saether	 7-Mar-1983
!		Perform a DEQALL if file access lock dequeue fails
!		due to sublocks, then redo the file access dequeue.
!
!	V03-006	LMP0071		L. Mark Pilant,		19-Jan-1983  20:49
!		Correct a problem that caused ACL segments to be left laying
!		around when a directory FCB was flushed.
!
!	V03-005	ACG0308		Andrew C. Goldstein,	14-Jan-1983  15:02
!		Fix FCB linkage consistency problems
!
!	V03-004	CDS0002		Christian D. Saether	 3-Jan-1983
!		Always flush header cache until it is restored for xqp.
!
!	V03-003	LMP0059		L. Mark Pilant,		21-Dec-1982  12:23
!		Always create an FCB when accessing a file header.  This
!		eliminates a lot of special case FCB handling.
!
!	V03-002	CDS0001		Christian D. Saether	10-Dec-1982
!		MAKE_DEACCESS dequeues access lock.
!
!	V03-001	LMP0036		L. Mark Pilant,		17-Aug-1982  10:45
!		If the ACL was built using a dummy FCB, dismantle and
!		deallocate the ACL.
!
!	V02-024	ACG0259		Andrew C. Goldstein,	26-Jan-1982  19:12
!		Add mode arg to REMOVE
!
!	V02-023	ACG0247		Andrew C. Goldstein,	23-Dec-1981  20:26
!		Make /NOCACHE flush all caches
!
!	V02-022	ACG0245		Andrew C. Goldstein,	23-Dec-1981  20:26
!		Send spool file to print during cleanup
!
!	V02-021	ACG0244		Andrew C. Goldstein,	23-Dec-1981  20:14
!		Do buffer flush before deallocating control blocks
!
!	V02-020	LMP0003		L. Mark Pilant,	30-Nov-1981  16:40
!		Properly cleanup any cathedral windows.
!
!	V02-019	ACG0208		Andrew C. Goldstein,	11-Nov-1981  17:51
!		Add segmented directory record support
!
!	V02-018	ACG0168		Andrew C. Goldstein,	7-May-1980  18:22
!		Fix last block directory cleanup on delete failure
!
!	V02-017	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	CLEANUP		: L_NORM,	! normal cleanup
	ZERO_WINDOWS	: L_NORM,	! invalidate all windows of file
	ZERO_IDX 	: L_NORM NOVALUE, ! initialize directory index
	ERR_CLEANUP 	: L_NORM,	! cleanup after error
	FLUSH_FIDCACHE	: L_NORM,	! clean out the file ID cache
	MAKE_DEACCESS	: L_NORM,	! deaccess the file
	DEL_EXTFCB	: L_NORM,	! deallocate extension FCB's
	ZERO_CHANNEL	: L_NORM,	! zero user channel pointer
	SET_DIRINDX	: L_JSB_1ARG,	! test for directory index
	NUKE_HEAD_FCB	: L_NORM NOVALUE; ! deallocate primary fcb

GLOBAL ROUTINE CLEANUP : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs the cleanup needed after a successfully
!	completed file operation.
!
! CALLING SEQUENCE:
!	CLEANUP ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CLEANUP_FLAGS: indicate specific actions to do
!	PRIMARY_FCB: FCB of file
!	CURRENT_WINDOW: window of file
!	DIR_FCB: FCB of directory
!	CURRENT_VCB: VCB of volume in process
!	IO_PACKET: I/O packet of request
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCB's and windows deleted when appropriate
!	header written
!	FCB updated
!
!--

BEGIN

LOCAL
	CLUSTER,			! are we a cluster
	QUOTA_CACHE	: REF BBLOCK,	! address of quota cache
	FCB		: REF BBLOCK,	! local FCB pointer
	VCB		: REF BBLOCK,	! local VCB pointer
	RVT		: REF BBLOCK,	! local RVT pointer
	UCB		: REF BBLOCK,	! local UCB pointer
	HEADER		: REF BBLOCK;	! file header

BIND_COMMON;

DIR_CONTEXT_DEF;

EXTERNAL
	CLU$GL_CLUB	: ADDRESSING_MODE (ABSOLUTE);

EXTERNAL ROUTINE
	MAKE_FCB_STALE	: L_NORM NOVALUE, ! mark fcb as stale clusterwide
	KILL_BUFFERS	: L_NORM NOVALUE, ! invalidate specified buffers
	KILL_CACHE	: L_NORM NOVALUE, ! invalidate all buffers for ucb
	WRITE_DIRTY	: L_NORM,	! write all dirty buffers
	SWITCH_VOLUME	: L_NORM,	! switch to desired volume
	FLUSH_QUO_CACHE	: L_NORM;	! flush the quota cache


! ***** Note: The primary header of the current file is not necessarily
! resident at this point.
!
! Switch back to the primary context area if necessary (no normal cleanup
! is ever necessary on secondary context).
!

IF .CONTEXT_SAVE NEQ 0
THEN
    BEGIN
    CH$MOVE (CONTEXT_SIZE, CONTEXT_SAVE, CONTEXT_START);
    CONTEXT_SAVE = 0;
    END;

CLUSTER = 0;
IF .BBLOCK [CURRENT_UCB [UCB$L_DEVCHAR2], DEV$V_CLU]
    AND .CLU$GL_CLUB NEQ 0
THEN
    CLUSTER = 1;

! Check the entire volume set to see if the index file or storage map
! on any volume is write accessed. If so, flush the buffer pool of any
! of their blocks, and flush the file ID and extent caches as appropriate.
! Also, if the volume is mounted /NOCACHE, flush the entire buffer cache.
!

RVT = .CURRENT_VCB[VCB$L_RVT];
INCR J FROM 1 TO
    BEGIN
    IF .RVT EQL .CURRENT_UCB
    THEN (UCB = .RVT; 1)
    ELSE .RVT[RVT$B_NVOLS]
    END
DO
    BEGIN
    IF .RVT NEQ .CURRENT_UCB
    THEN UCB = .VECTOR [RVT[RVT$L_UCBLST], .J-1];
    IF .UCB NEQ 0

    THEN
	BEGIN
	VCB = .UCB[UCB$L_VCB];

	IF .J EQL 1
	THEN
	    BEGIN

! If someone has the quota file write accessed (and it is active), flush it
! from the buffer pool. (Note that the quota file is located on RVN 1.)
!

	    QUOTA_CACHE = .VCB[VCB$L_QUOCACHE];
	    IF .QUOTA_CACHE NEQ 0
	    THEN
		IF TESTBITSC (QUOTA_CACHE[VCA$V_CACHEFLUSH])
		THEN
		    BEGIN
		    SWITCH_VOLUME (1);
		    FLUSH_QUO_CACHE ();	! may create modified buffers
		    END;
	    END;		! of this is RVN 1 (or single volume)

! If the volume is marked for dismount or nocache, flush out all the
! caches.
!

	IF .BBLOCK [UCB [UCB$L_DEVCHAR], DEV$V_DMT]
	OR .VCB[VCB$V_NOCACHE]
	THEN
	    BEGIN
	    SWITCH_VOLUME (.J);
	    WRITE_DIRTY (0);
	    KILL_CACHE (.UCB); ! we cannot use the block cache after this
	    END;
	END;
    END;

! Write modified buffers.  The various cache purges above may have
! created more dirty buffers than we had at the start of this routine.
! No more dirty buffers can be created for the remainder of this request.
!

WRITE_DIRTY (0);

! Invalidate any windows on the file, if requested.
!

IF TESTBITSC (CLEANUP_FLAGS[CLF_INVWINDOW])
THEN KERNEL_CALL (ZERO_WINDOWS, .PRIMARY_FCB);

! If a directory fcb is left lying about with no use, dispose of it.
! If the directory file is write accessed, flush the buffer pool of any
! blocks that might be resident. Also flush the directory index.
! Cleanup of these fcbs is deferred until all possible errors in the
! cleanup procedure (i/o errors) have already had an opportunity to happen.
!

IF (FCB = .DIR_FCB) NEQ 0
THEN
    BEGIN
    IF .FCB [FCB$W_REFCNT] EQL 0
    THEN
	BEGIN
	IF .FCB NEQ .PRIMARY_FCB
	THEN
	    IF NOT SET_DIRINDX (.FCB)
	    THEN
		BEGIN
		DEL_EXTFCB (.FCB);
		NUKE_HEAD_FCB (.FCB);
		END;

	END

    ELSE
	BEGIN
	IF .FCB [FCB$W_WCNT] NEQ 0
	THEN
	    BEGIN
	    SWITCH_VOLUME (.FCB [FCB$W_FID_RVN]);
	    IF NOT .CLUSTER
	    THEN
		KILL_BUFFERS (1, .FCB [FCB$L_LOCKBASIS]);
	    ZERO_IDX ();
	    END;
	END;

! Guarantee that no further attempts will be made to do any directory
! related cleanup.  This cleanup code was moved beyond the buffer
! cleanup to avoid the same situation, but clearing the cleanup flags
! makes sure.
!

    CLEANUP_FLAGS [CLF_SUPERSEDE] = 0;
    CLEANUP_FLAGS [CLF_REENTER] = 0;
    CLEANUP_FLAGS [CLF_REMOVE] = 0;
    DIR_FCB = 0;
    DIR_ENTRY = 0;

    END;

IF (FCB = .PRIMARY_FCB) NEQ 0
THEN
    BEGIN

! Check if the fcb has been modified and if so, and this is a cluster,
! cause potential fcbs on other nodes to be marked as stale so they
! will know to rebuild their fcb chains from the file header(s).
!

    IF .CLEANUP_FLAGS [CLF_MARKFCBSTALE]
	AND .CLUSTER
    THEN
	MAKE_FCB_STALE (.FCB);

! If an FCB is left about with no use, dispose of it.
! Check whether it is a directory fcb first.
!

    IF .FCB[FCB$W_REFCNT] EQL 0
    THEN
	IF NOT SET_DIRINDX (.FCB)
	THEN
	    BEGIN

	    DEL_EXTFCB (.FCB);

	    NUKE_HEAD_FCB (.FCB);

	    PRIMARY_FCB = 0;
	    END;
    END;

RETURN 1;

END;					! end of routine CLEANUP

GLOBAL ROUTINE ZERO_WINDOWS (FCB) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine invalidates all windows currently in use on the
!	indicated FCB. This routine must be executed in kernel mode.
!
! CALLING SEQUENCE:
!	ZERO_WINDOWS (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of FCB
!
! IMPLICIT INPUTS:
!	CURRENT_WINDOW: address of caller's window, if any
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	all windows marked empty, caller's turned
!
!--

BEGIN

MAP
	FCB		: REF BBLOCK;

LOCAL
	P		: REF BBLOCK,	! window pointer
	DUMMY,				! dummy storage for REMQUE return
	WINDOW_SEGMENT	: REF BBLOCK,	! pointer to window segment
	NEXT_SEGMENT	: REF BBLOCK;	! pointer to window after next one

BASE_REGISTER;

EXTERNAL ROUTINE
	DEALLOCATE	: L_NORM;	! deallocate dynamic memory

! Loop through the window list off the FCB, zeroing all the retrieval pointer
! counts. Then turn the user's window to VBN 1 if it exists.
!

P = .FCB[FCB$L_WLFL];

UNTIL .P EQL FCB[FCB$L_WLFL] DO
    BEGIN
    P[WCB$W_NMAP] = 0;
    WINDOW_SEGMENT = .P[WCB$L_LINK];
    UNTIL .WINDOW_SEGMENT EQL 0
    DO
	BEGIN
	NEXT_SEGMENT = .WINDOW_SEGMENT[WCB$L_LINK];
	REMQUE (.WINDOW_SEGMENT, DUMMY);
	DEALLOCATE (.WINDOW_SEGMENT);
	WINDOW_SEGMENT = .NEXT_SEGMENT;
	END;
    P[WCB$L_LINK] = 0;
    P[WCB$V_COMPLETE] = 0;
    P = .P[WCB$L_WLFL];
    END;

! ***** Note: When handling of window misses goes into its final form,
! this routine must also scan the I/O queue on the UCB and look for I/O
! into the blocks just deallocated. All such requests must be yanked out
! of the queue and routed to the ACP for error processing.

RETURN 1;

END;					! end of routine ZERO_WINDOWS

GLOBAL ROUTINE ZERO_IDX : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine initializes the index in a directory FCB to an unknown
!	state. It will be rebuilt with the next several lookups.
!	It also bumps the sequence count to indicate a change in contents.
!
!
! CALLING SEQUENCE:
!	ZERO_IDX ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	DIR_FCB: directory FCB to init
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	directory index zeroed
!
!--

BEGIN

BIND_COMMON;

LOCAL
	DIRINDX	: REF BBLOCK FIELD (DIRC);

DIR_FCB[FCB$W_DIRSEQ] = .DIR_FCB[FCB$W_DIRSEQ] + 1;

IF (DIRINDX = .DIR_FCB [FCB$L_DIRINDX]) NEQ 0
THEN
    DIRINDX [DIRC$W_INUSE] = 0;

END;					! end of routine ZERO_IDX

GLOBAL ROUTINE ERR_CLEANUP : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs the cleanup needed after a file
!	operation that has terminated in an error.
!
! CALLING SEQUENCE:
!	ERR_CLEANUP ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CLEANUP_FLAGS: indicate specific actions to do
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	file deaccessed if necessary
!	channel window pointer cleared
!
!--

BEGIN

BIND_COMMON;

DIR_CONTEXT_DEF;

EXTERNAL ROUTINE
	REBLD_PRIM_FCB	: L_NORM NOVALUE, ! rebuild primary fcb from header
	BUILD_EXT_FCBS	: L_NORM NOVALUE, ! build extension fcb chain
	ALLOCATION_UNLOCK : L_NORM NOVALUE, ! release allocation lock
	KILL_DINDX	: L_NORM NOVALUE, ! release directory index block
	PMS_END_SUB	: L_NORM,	! end metering of current subfunction
	CLOSE_FILE	: L_NORM,	! close internal file
	DEACC_QFILE	: L_NORM,	! deaccess the quota file
	DEALLOCATE	: L_NORM,	! deallocate dynamic memory
	SEND_SYMBIONT	: L_NORM ADDRESSING_MODE (GENERAL),
					! send file to job controller
	SWITCH_VOLUME	: L_NORM,	! switch to desired volume
	RESTORE_DIR	: L_NORM,	! restore directory context
	DIR_SCAN	: L_NORM,	! scan directory file
	MAKE_ENTRY	: L_NORM,	! create new directory entry
	REMOVE		: L_NORM,	! remove a directory entry
	READ_BLOCK	: L_NORM,	! read a disk block
	MARK_DIRTY	: L_NORM,	! mark disk block for write back
	WRITE_BLOCK	: L_NORM,	! write a disk block
	DELETE_FILE	: L_NORM,	! delete a file
	DELETE_FID	: L_NORM,	! delete a file number
	RETURN_BLOCKS	: L_NORM,	! return blocks to storage map
	TRUNCATE	: L_NORM,	! file truncate routine
	INVALIDATE	: L_NORM,	! invalidate a buffer
	READ_HEADER	: L_NORM,	! read file header
	CHECKSUM	: L_NORM,	! checksum file header
	REMAP_FILE	: L_NORM;	! rebuild the windows for a file


! If a subfunction was being executed, turn off metering now.
!

IF .PMS_SUB_NEST NEQ 0
THEN
    BEGIN
    PMS_SUB_NEST = 1;
    PMS_END_SUB ();
    END;

! We repeat the entire procedure twice if a secondary file operation was
! in progress (indicated by non-zero saved context).
!

WHILE 1 DO
BEGIN

! Locals are declared here to prevent their scope from extending around the
! entire main loop and raising havoc with register assignment.
!

LOCAL
	NAME_DESC	: BBLOCK [FND_LENGTH], ! file name descriptor block
	HEADER		: REF BBLOCK,	! address of file header
	IDENT_AREA	: REF BBLOCK,	! ident area of file header
	FCB		: REF BBLOCK,	! FCB pointer
	WINDOW_SEGMENT	: REF BBLOCK,	! address of the next window segment
	NEXT_SEGMENT	: REF BBLOCK,	! address of one beyond the next window
	RECADDR		: REF BBLOCK,	! address of directory record
	DIR_FLAGS	: BITVECTOR [32], ! directory cleanup flags
	UNREC_LOCAL,			! local copy of UNREC_COUNT
	FID_LOCAL,			! local copy of NEW_FID
	T1,				! random temps
	T2,
	T3;

! Show that cleanup is in progress.
!

CLEANUP_FLAGS[CLF_CLEANUP] = 1;

! If the ref count on the primary fcb was biased in fid_to_spec, remove
! the bias.
!

IF TESTBITSC (CLEANUP_FLAGS [CLF_PFCB_REF_UP])
THEN
    PRIMARY_FCB [FCB$W_REFCNT] = .PRIMARY_FCB [FCB$W_REFCNT] - 1;

! If an internal file is open, close it first.
!

IF TESTBITSC (CLEANUP_FLAGS[CLF_CLOSEFILE])
THEN CLOSE_FILE (.CURRENT_WINDOW);

! Invalidate the file ID cache, if necessary.
!

IF TESTBITSC (CLEANUP_FLAGS[CLF_FLUSHFID])
THEN KERNEL_CALL (FLUSH_FIDCACHE);

! Deaccess the quota file, if we were in the final stages of a quota file
! enable.
!

IF TESTBITSC (CLEANUP_FLAGS[CLF_DEACCQFILE])
THEN KERNEL_CALL (DEACC_QFILE);

! If there is a file header resident, it probably needs to be checksummed.
!

IF .FILE_HEADER NEQ 0
THEN CHECKSUM (.FILE_HEADER);

! Clean out the window pointer in the user's channel if necessary.
!

IF TESTBITSC (CLEANUP_FLAGS[CLF_ZCHANNEL])
THEN KERNEL_CALL (ZERO_CHANNEL);

! If there are unrecorded blocks allocated from the storage map, return them.
!

IF (UNREC_LOCAL = .UNREC_COUNT) NEQ 0
THEN
    BEGIN
    UNREC_COUNT = 0;
    SWITCH_VOLUME (.UNREC_RVN);
    RETURN_BLOCKS (.UNREC_LBN, .UNREC_LOCAL, DO_NOT_ERASE);
    END;

! If there is a dangling file ID (from a partial create or header extension),
! dispose of it.
!

IF (FID_LOCAL = .NEW_FID) NEQ 0
THEN
    BEGIN
    NEW_FID = 0;
    SWITCH_VOLUME (.NEW_FID_RVN);
    DELETE_FID (.FID_LOCAL);
    END;

! Get back the primary file header of the file in process.
!

HEADER = 0;
IF .FILE_HEADER NEQ 0
THEN
    BEGIN
    FILE_HEADER = 0;
    IF (CURR_LCKINDX = .PRIM_LCKINDX) NEQ 0
    THEN
	HEADER = READ_HEADER ((IF .CURRENT_FIB NEQ 0
			    THEN CURRENT_FIB[FIB$W_FID]
			    ELSE 0),
			   .PRIMARY_FCB);
    END;

! Send the file to the job controller if it is to be spooled.
!

IF TESTBITSC (CLEANUP_FLAGS[CLF_DOSPOOL])
THEN
    BEGIN

! Make sure the allocation lock is released before sending it
! to the symbiont to avoid potential deadlock with the symbiont.
!

    ALLOCATION_UNLOCK ();
    SEND_SYMBIONT (.HEADER, .PRIMARY_FCB);
    END;

! Deaccess the file if requested.
!

IF TESTBITSC (CLEANUP_FLAGS[CLF_DEACCESS])
THEN KERNEL_CALL (MAKE_DEACCESS);

! Deallocate the window block if called for.
!

IF TESTBITSC (CLEANUP_FLAGS[CLF_DELWINDOW])
THEN
    IF .CURRENT_WINDOW NEQ 0
    THEN
	BEGIN
	WINDOW_SEGMENT = .CURRENT_WINDOW;
	DO
	    BEGIN
	    NEXT_SEGMENT = .WINDOW_SEGMENT[WCB$L_LINK];
	    KERNEL_CALL (DEALLOCATE, .WINDOW_SEGMENT);
	    WINDOW_SEGMENT = .NEXT_SEGMENT;
	    END
	UNTIL .WINDOW_SEGMENT EQL 0;
	CURRENT_WINDOW = 0;
	END;

! Fix the file header back link, if it was modified.
!

IF TESTBITSC (CLEANUP_FLAGS[CLF_FIXLINK])
THEN IF .HEADER NEQ 0
THEN
    BEGIN
    CH$MOVE (FID$C_LENGTH, PREV_LINK, HEADER[FH2$W_BACKLINK]);
    IDENT_AREA = .HEADER + .HEADER[FH2$B_IDOFFSET]*2;
    CH$MOVE (MINU (FILENAME_LENGTH, FI2$S_FILENAME), PREV_INAME,
	     IDENT_AREA[FI2$T_FILENAME]);
    CH$MOVE (MINU (FILENAME_LENGTH-FI2$S_FILENAME, FI2$S_FILENAMEXT),
	     PREV_INAME+FI2$S_FILENAME,
	     IDENT_AREA[FI2$T_FILENAMEXT]);
    CHECKSUM (.HEADER);
    MARK_DIRTY (.HEADER);
    END;

! If a file deletion is called for, do it.  This is either a create that
! failed later on, or a real delete.
!

IF TESTBITSC (CLEANUP_FLAGS[CLF_DELFILE])
THEN IF .HEADER NEQ 0
THEN
    BEGIN
    IF .PRIMARY_FCB NEQ 0
    THEN
	IF .PRIMARY_FCB [FCB$L_DIRINDX] NEQ 0
	THEN
	    KILL_DINDX (.PRIMARY_FCB);

    CLEANUP_FLAGS[CLF_TRUNCATE] = 0;	! no truncate necessary after a delete
    DELETE_FILE (.CURRENT_FIB, .HEADER);
    END;

! If an extend operation failed, truncate the file.
!

IF TESTBITSC (CLEANUP_FLAGS[CLF_TRUNCATE])
THEN IF .HEADER NEQ 0
THEN
    BEGIN
    T1 = .CURRENT_FIB[FIB$L_EXSZ];	! save the data returned by EXTEND
    T2 = .CURRENT_FIB[FIB$L_EXVBN];	! so it won't be smashed by TRUNCATE
    T3 = .USER_STATUS[1];
    CURRENT_FIB[FIB$L_EXSZ] = 0;
    TRUNCATE (.CURRENT_FIB, .HEADER, .T2);
    HEADER = .FILE_HEADER;			! follow buffer shuffling
    CURRENT_FIB[FIB$L_EXSZ] = .T1;
    CURRENT_FIB[FIB$L_EXVBN] = .T2;
    USER_STATUS[1] = .T3;
    CLEANUP_FLAGS[CLF_INVWINDOW] = 0;	! windows were never extended, so no need
    CHECKSUM (.HEADER);
    END;

! Various errors leave the file control block screwed up. If needed,
! rebuild it and its extensions from scratch.
!

IF TESTBITSC (CLEANUP_FLAGS[CLF_FIXFCB])
AND .HEADER NEQ 0
THEN
    BEGIN

    REBLD_PRIM_FCB (.PRIMARY_FCB, .HEADER);

    BUILD_EXT_FCBS (.HEADER);

    END;

! Cleanup any cathedral windows which have broken.
!

IF TESTBITSC (CLEANUP_FLAGS[CLF_REMAP]) THEN REMAP_FILE ();

! Do directory operation cleanups. We could have entered a new file, removed
! an old one, or both, or done a supersede. A supersede is a replacement of
! the FID for the same name, type, and version.
!

DIR_FLAGS = .CLEANUP_FLAGS;
CLEANUP_FLAGS[CLF_SUPERSEDE] = 0;
CLEANUP_FLAGS[CLF_REENTER] = 0;
CLEANUP_FLAGS[CLF_REMOVE] = 0;

IF .DIR_FLAGS[CLF_SUPERSEDE]
OR .DIR_FLAGS[CLF_REENTER]
OR .DIR_FLAGS[CLF_REMOVE]
THEN
    BEGIN
    SWITCH_VOLUME (.CURRENT_FIB[FIB$W_DID_RVN]);

! Buffer pool thrashing may have kicked out the directory block we need.
! re-read it and recompute the buffer pointers.
!

    IF .DIR_ENTRY NEQ 0
    THEN RESTORE_DIR (DIR_CONTEXT);

! If a directory entry needs to be removed, do so. Pointers are all set
! up for the REMOVE routine.
!

    IF .DIR_FLAGS[CLF_REMOVE]
    THEN REMOVE (0);

! If a directory entry needs to be re-entered, do so. If the entry was
! removed theough an auto-purge, we need to rescan to the point of
! removal because a directory shuffle may have invalidated the
! pointers. Construct a name descriptor from the saved name and version
! and call the enter routine.
!

    IF .DIR_FLAGS[CLF_REENTER]
    THEN
	BEGIN
	CH$FILL (0, FND_LENGTH, NAME_DESC);
	NAME_DESC[FND_COUNT] = .PREV_NAME[0];
	NAME_DESC[FND_STRING] = PREV_NAME[1];
	NAME_DESC[FND_VERSION] = .PREV_VERSION;
	IF .DIR_FLAGS[CLF_SUPERSEDE]
	THEN
	    BEGIN
	    LAST_ENTRY[0] = 0;
	    DIR_SCAN (NAME_DESC, 0, 0, 0, 0, 0, -1);
	    CH$MOVE (FID$C_LENGTH, SUPER_FID, CURRENT_FIB[FIB$W_FID]);
	    END;
	MAKE_ENTRY (NAME_DESC, .CURRENT_FIB);
	CLEANUP_FLAGS[CLF_REMOVE] = 0;
	WRITE_BLOCK (.DIR_BUFFER);
	END;

! A supersede cleanup consists simply of replacing the superseded file ID
! in the directory record. Note that the supersede bit could also be set
! by a create/auto-purge, which also sets the remove and enter bits, and
! is handled above.
!

    IF .DIR_FLAGS[CLF_SUPERSEDE]
    AND NOT .DIR_FLAGS[CLF_REENTER]
    AND NOT .DIR_FLAGS[CLF_REMOVE]
    THEN
	BEGIN
	DIR_VERSION[DIR$W_VERSION] = .PREV_VERSION;
	CH$MOVE (FIB$S_FID, SUPER_FID, DIR_VERSION[DIR$W_FID]);
	MARK_DIRTY (.DIR_BUFFER);
	END


    END;				! end of directory cleanup processing

! Copy the saved context, if any back into the primary context and repeat
! the cleanup.
!

IF .CONTEXT_SAVE EQL 0 THEN EXITLOOP;
CH$MOVE (CONTEXT_SIZE, CONTEXT_SAVE, CONTEXT_START);
CONTEXT_SAVE = 0;

END;					! end of major loop

RETURN 1;

END;					! end of routine ERR_CLEANUP

ROUTINE FLUSH_FIDCACHE : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine empties the file ID cache by zeroing the entry count.
!	It must be called in kernel mode.
!
!
! CALLING SEQUENCE:
!	FLUSH_FIDCACHE ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	file ID cache cleared
!
!--

BEGIN

BIND_COMMON;

LOCAL
	FID_CACHE	: REF BBLOCK;	! file ID cache


FID_CACHE = .BBLOCK [.CURRENT_VCB[VCB$L_CACHE], VCA$L_FIDCACHE];
FID_CACHE[VCA$W_FIDCOUNT] = 0;

1
END;					! end of routine FLUSH_FIDCACHE

ROUTINE MAKE_DEACCESS : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs the machinery for deaccessing a file.
!
! CALLING SEQUENCE:
!	MAKE_DEACCESS ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	PRIMARY_FCB: FCB of file
!	CURRENT_WINDOW: window of file
!	CURRENT_VCB: VCB of volume in process
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	file deaccessed
!
!--

BEGIN

BIND_COMMON;

LOCAL
	FCB		: REF BBLOCK,	! local for primary fcb.
	LCKMODE,			! lock mode for access lock.
	WINDOW_SEGMENT	: REF BBLOCK,	! address of the next window segment
	DUMMY;				! dummy local to receive REMQUE

EXTERNAL
	PMS$GL_OPEN	: ADDRESSING_MODE (ABSOLUTE);
					! system count of currently open files

EXTERNAL ROUTINE
	DEQ_LOCK	: L_NORM,	! dequeue a lock
	CONV_ACCLOCK	: L_NORM,	! Convert file access lock.
	LOCK_MODE	: L_JSB_1ARG;	! Calculate access lock mode.

FCB = .PRIMARY_FCB;

! Unlink the window from the FCB. Clear the applicable access conditions
! in the FCB.
!

WINDOW_SEGMENT = .CURRENT_WINDOW;
DO
    BEGIN
    IF .WINDOW_SEGMENT[WCB$L_WLFL] NEQ 0 THEN REMQUE (.WINDOW_SEGMENT, DUMMY);
    WINDOW_SEGMENT = .WINDOW_SEGMENT[WCB$L_LINK];
    END
UNTIL .WINDOW_SEGMENT EQL 0;

IF NOT .CURRENT_WINDOW [WCB$V_NOACCLOCK]
THEN
    BEGIN
    IF .CURRENT_WINDOW[WCB$V_NOREAD]
    THEN FCB[FCB$V_EXCL] = 0;

    IF .CURRENT_WINDOW[WCB$V_NOTRUNC]
    THEN FCB[FCB$W_TCNT] = .FCB[FCB$W_TCNT] - 1;

    IF .CURRENT_WINDOW[WCB$V_NOWRITE]
    THEN FCB[FCB$W_LCNT] = .FCB[FCB$W_LCNT] - 1;

    FCB [FCB$W_ACNT] = .FCB [FCB$W_ACNT] - 1;

    END;			! of normal (not NOLOCK) deaccess.

FCB[FCB$W_REFCNT] = .FCB[FCB$W_REFCNT] - 1;

! For a write access, bump down the writer count. If this is the
! last write, and the file is the index file or the storage map, clear
! the appropriate flag in the VCB. If there's a cache lock being held
! for this file, release it.
!

IF .CURRENT_WINDOW[WCB$V_WRITE]
THEN
    BEGIN

    IF NOT .CURRENT_WINDOW [WCB$V_NOACCLOCK]
    THEN
	FCB[FCB$W_WCNT] = .FCB[FCB$W_WCNT] - 1;

    IF .FCB[FCB$W_WCNT] EQL 0
	OR (.FCB [FCB$W_REFCNT] EQL 0 AND .CURRENT_WINDOW [WCB$V_WRITE])
    THEN
	BEGIN
	IF .FCB[FCB$B_FID_NMX] EQL 0
	THEN
	    BEGIN
	    IF .FCB[FCB$W_FID_NUM] EQL 1
	    THEN CURRENT_VCB[VCB$V_WRITE_IF] = 0;
	    IF .FCB[FCB$W_FID_NUM] EQL 2
	    THEN CURRENT_VCB[VCB$V_WRITE_SM] = 0;
	    END;
	IF .FCB[FCB$L_CACHELKID] NEQ 0
	THEN
	    BEGIN
	    DEQ_LOCK (.FCB[FCB$L_CACHELKID]);
	    FCB[FCB$L_CACHELKID] = 0;
	    END;
	END;
    END;

! Recalculate the lock mode of the access lock for this fcb.
!

IF .FCB [FCB$W_ACNT] EQL 0
THEN
    LCKMODE = LCK$K_NLMODE
ELSE
    BEGIN
    LOCAL
	ACCTL;

    ACCTL = 0;
    IF .FCB [FCB$W_WCNT] NEQ 0
    THEN ACCTL = .ACCTL + FIB$M_WRITE;
    IF .FCB [FCB$W_LCNT] NEQ 0
    THEN ACCTL = .ACCTL + FIB$M_NOWRITE;

    LCKMODE = LOCK_MODE (.ACCTL);

    END;

! If the new access lock mode lock for this fcb is different (lower)
! than the current lock, convert it.  The conversion routine will also
! dequeue the lock if this is the last reference.
!

IF .LCKMODE<0,8> NEQ .FCB [FCB$B_ACCLKMODE]
    OR .FCB [FCB$W_REFCNT] EQL 0
THEN
    IF NOT CONV_ACCLOCK (.LCKMODE, .FCB)
    THEN
	BUG_CHECK (XQPERR, 'deaccess conversion failed');

! Note: We now have a file control block with a possible zero access count
! in the FCB list. This gets dealt with by the general cleanup.
!

PMS$GL_OPEN = .PMS$GL_OPEN - 1;		! bump down count of open files
CURRENT_VCB[VCB$W_TRANS] = .CURRENT_VCB[VCB$W_TRANS] - 1;

RETURN 1;

END;					! end of routine MAKE_DEACCESS

GLOBAL ROUTINE DEL_EXTFCB (START_FCB) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes and deallocates all extension FCB's, if any,
!	linked to the indicated FCB.
!
! CALLING SEQUENCE:
!	DEL_EXTFCB (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of primary FCB or 0
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCB's deallocated
!
!--

BEGIN

MAP
	START_FCB	: REF BBLOCK;	! FCB argument

LOCAL
	FCB		: REF BBLOCK,	! running FCB pointer
	NEXT_FCB	: REF BBLOCK,	! next extension FCB
	P		: REF BBLOCK,	! pointer to chase for VCB
	DUMMY;				! dummy local to receive REMQUE

BASE_REGISTER;

EXTERNAL ROUTINE
	DEALLOCATE	: L_NORM;	! deallocate dynamic memory

! Checking for null pointers, find the first extension FCB. Follow the extension
! list and remove and deallocate the extension FCB's, cleaning out the pointers
! on the way. For each FCB removed, we must find the VCB (by chasing around the
! FCB list) and decrement the transaction count.
!

IF .START_FCB EQL 0 THEN RETURN 1;
FCB = .START_FCB[FCB$L_EXFCB];
START_FCB[FCB$L_EXFCB] = 0;
UNTIL .FCB EQL 0 DO
    BEGIN
    NEXT_FCB = .FCB[FCB$L_EXFCB];

    P = .FCB[FCB$L_FCBFL];
    UNTIL .P[VCB$B_TYPE] EQL DYN$C_VCB
    DO P = .P[FCB$L_FCBFL];
    P[VCB$W_TRANS] = .P[VCB$W_TRANS] - 1;

    FCB[FCB$L_EXFCB] = 0;
    IF .FCB [FCB$B_TYPE] NEQ DYN$C_FCB
    THEN
	BUG_CHECK (NOTFCBFCB, 'not fcb');
    REMQUE (.FCB, DUMMY);
    DEALLOCATE (.FCB);
    FCB = .NEXT_FCB;
    END;

RETURN 1;

END;					! end of routine DEL_EXTFCB

ROUTINE ZERO_CHANNEL : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine zeroes out the window pointer being returned to
!	the user for his channel control block. It also credits one to the
!	user's open file quota, except for the case of a shared window.
!	This routine must be executed in kernel mode.
!
! CALLING SEQUENCE:
!	ZERO_CHANNEL ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	IO_PACKET: I/O packet of request
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	channel window pointer cleared, file quota bumped unless shared window
!
!--

BEGIN

LOCAL
	ABD		: REF BBLOCKVECTOR [,ABD$C_LENGTH],
					! buffer descriptors
	JIB		: REF BBLOCK,	! Job information block address
	PCB		: REF BBLOCK;	! address of user process control block

EXTERNAL
	SCH$GL_PCBVEC	: REF VECTOR ADDRESSING_MODE (ABSOLUTE);
					! system PCB vector

BIND_COMMON;

					! pointer to buffer descriptors
ABD = .BBLOCK [.IO_PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];
ABD[ABD$C_WINDOW, ABD$W_COUNT] = 4;
.ABD[ABD$C_WINDOW, ABD$W_TEXT] + ABD[ABD$C_WINDOW, ABD$W_TEXT] + 1 = 0;

IF
    BEGIN

    ! The FILCNT quota is credited if a WCB has not yet been allocated or
    ! if the SHRWCB bit is not set in the WCB.

    IF .CURRENT_WINDOW EQL 0
    THEN 1
    ELSE NOT .CURRENT_WINDOW[WCB$V_SHRWCB]
    END
THEN
    BEGIN
    PCB = .SCH$GL_PCBVEC[.(IO_PACKET[IRP$L_PID])<0,16>];
    JIB = .PCB[PCB$L_JIB];
    JIB[JIB$W_FILCNT] = .JIB[JIB$W_FILCNT] + 1;
    END;

RETURN 1;

END;					! end of routine ZERO_CHANNEL

GLOBAL ROUTINE NUKE_HEAD_FCB (FCB) : L_NORM NOVALUE =

!++
!
! Functional Description:
!
! Given an fcb already stripped of possible extension fcbs,
! and which has a refcnt of 0 (assumed), clean up the things
! that need cleaning up, remove it from the fcb list (we assume
! that is where it is), and deallocate it.
!
!--

BEGIN

MAP
	FCB	: REF BBLOCK;

BASE_REGISTER;

EXTERNAL ROUTINE
	ACL_DELETEACL,
	CONV_ACCLOCK	: L_NORM,
	DEALLOCATE	: L_NORM;

LOCAL
	DUMMY;

IF .FCB [FCB$B_TYPE] NEQ DYN$C_FCB
THEN
    BUG_CHECK (NOTFCBFCB, 'not fcb');

REMQUE (.FCB, DUMMY);

IF .BBLOCK [FCB [FCB$R_ORB], ORB$V_ACL_QUEUE]
THEN
    ACL_DELETEACL (FCB [FCB$L_ACLFL], 0);

IF NOT CONV_ACCLOCK (0, .FCB)
THEN
    BUG_CHECK (XQPERR, 'Unexpected lock manager status');

DEALLOCATE (.FCB);

END;		! of routine NUKE_HEAD_FCB

LOCK_CODE;
GLOBAL ROUTINE SET_DIRINDX (FCB) : L_JSB_1ARG =

!++
!
! Functional Description:
!
! This routine tests for the presence of a directory index, and
! set the FCB$V_DIR flag accordingly at SCHED ipl, so at to
! interlock with the directory index handling routine which
! may be trying to toss it out, and the search_fcb routine,
! which also runs at sched ipl.
!
! ROUTINE VALUE:
!	true - if this now a directory fcb eligible for replacement
!	false - otherwise
!
!--

BEGIN

MAP
	FCB	: REF BBLOCK;

LOCAL
	STATUS	: INITIAL (0);

SET_IPL (IPL$_SCHED);

IF .FCB [FCB$L_DIRINDX] NEQ 0
THEN
    BEGIN
    FCB [FCB$V_DIR] = 1;
    STATUS = .STATUS + 1;
    END;

SET_IPL (0);

.STATUS

END;		! of routine SET_DIRINDX

! Note that just prior to the SET_DIRINDX routine the psects were
! changed to the locked psect because the SET_DIRINDX routine must
! be locked.  Any routines added at this point will be locked also,
! so unless they need to be locked, put them prior to SET_DIRINDX.
!

END
ELUDOM
