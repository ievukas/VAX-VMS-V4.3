	$BEGIN	RM2PUT,000,RM$RMS2,<RELATIVE SPECIFIC PUT>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: RMS32
;
; Abstract:
;		This module provides relative file organization
;		specific processing for the $PUT function.
;
;
; Environment:
;		Star processor running Starlet exec.
;
; Author: L. F. Laverdure	 Creation Date: 7-NOV-1977
;
; Modified By:
;
;	V03-019	JEJ0042		J E Johnson		21-Jun-1984
;		Correct error in record locking code path that
;		attempts to deallocate BDB twice if WAT bit is set
;		and a locking error occurs.
;
;	V03-018	DGB0016		Donald G. Blair		02-Mar-1984
;		Allocate full-length FIB to support access mode 
;		protected files.
;
;	V03-017	DAS0001		David Solomon		25-Jul-1983
;		Fix a bug introduced in V03-016 that broke BI journaling
;		of puts and updates.
;
;	V03-016	KPL0005		Peter Lieberwirth	20-Jun-1983
;		Change some references to JNLFLG to JNLFLG2.
;
;	V03-015	KPL0004		Peter Lieberwirth	26-May-1983
;		Fix RJR references for new format.
;
;	V03-014	JWH0206		Jeffrey W. Horn		12-Apr-1983
;		Fix bug in JWH0192 which was causing a call to LOCK
;		instead of QUERY_LOCK when WAT was specified for a $PUT.
;
;	V03-013	KPL0003		Peter Lieberwirth	30-Mar-1983
;		AP is used as a flag to RM$PUTUPD2 to indicate whether the
;		operation is a PUT or an UPDATE. Due to an unrelated change,
;		this flag was sometimes set incorrectly when the operation
;		is a PUT. Fix this by plugging the AP.
;
;	V03-012	RAS0135		Ron Schaefer		17-Mar-1983
;		Corrections to RAS0132 for registers and RJR$_ names.
;
;	V03-011	RAS0132		Ron Schaefer		16-Mar-1983
;		Merge $RMSRDEF into $RJRDEF and revise the interface
;		for RM$WRTJNL for easier use from ISAM.
;
;	V03-010	JWH0192		Jeffrey W. Horn		28-Feb-1983
;		Fix bucheck in $PUT with WAT option.
;
;	V03-009	SPR52290	Jeffrey W. Horn		03-Jan-1983
;		Fix bugcheck in auto-extend with shared files.
;
;	V03-008	KPL0002		Peter Lieberwirth	 7-Nov-1982
;		Fix RMSR name again.
;
;	V03-007	JWH0121		Jeffrey W. Horn		04-Nov-1982
;		Fix bug in journal logic that was causing non-journal
;		$PUT to return a zero status.
;
;	V03-006	KPL0001		Peter Lieberwirth	26-Oct-1982
;		Correct size of RJR overhead added to R3 for call to
;		WRTJNL.  Change RMSR names.
;
;	V03-005	JWH0112		Jeffrey W. Horn		06-Oct-1982
;		Implement new RJR format.  Put in code for RU
;		journal support.
;
;	V03-004	KBT0129		Keith B. Thompson	20-Aug-1982
;		Reorganize psects
;
;	V03-003	KBT0117		Keith B. Thompson	6-Aug-1982
;		Remove ref. to set_sifb_adr and correct jeff's revision numbers
;
;	V03-002	There was an un-audited change done by JWH some time
;		around here to fix a bug introduced by JWH0001.
;
;	V03-001	JWH0001		Jeffrey W. Horn		18-May-1982
;		Put in code for BI an AI journal support.
;
;	V02-020	RAS0063		Ron Schaefer		29-Jan-1982
;		Correct probes of the user's key and record buffers.
;
;	V02-019	CDS0077		C. D. Saether		24-Feb-1981	10:35
;		If really sequential file, specify noread to cache.
;		Note that this works correctly only for 512 byte fixed
;		length records, with the "bucket size" at one block.
;
;	V02-018	CDS0076		C. D. Saether		07-Oct-1980	11:05
;		Release auto-locked record if rm$getrec2_put did not release
;		it (because it was current record).
;
;	V02-017	REFORMAT	K. E. Kinnear		31-Jul-1980	9:05
;
;	V01-016	CDS0075		C. D. Saether		20-Jan-1980	11:40
;		Fix bug so manually locked record is released on error.
;
;	V01-015	CDS0042		C. D. Saether		12-Oct-1979	17:40
;		Update ebk correctly for seq file extend.
;
;	V01-014	JAK0020		J. A. Krycka		11-Sep-1979	10:00
;		Remove network code.
;
;	V01-013	CDS0024		C. D. Saether		27-Jul-79	5:05
;		Fudge up code so it works with shared fix length seq files.
;
;	V01-012	WSK0001 	W. S. Koenig		22-Dec-1978	11:20
;		Fixed bug destroying r4 when extend failed.
;
;	V01-011	RAN0003		R. A. Newell		9-Nov-1978	10:56
;		File sharing code enhancements.
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IFBDEF
	$BDBDEF
	$CSHDEF
	$DLCDEF
	$FABDEF
	$FIBDEF
	$RABDEF
	$IRBDEF
	$RMSDEF
	$RJRDEF
	$CJFDEF

;
; Equated Symbols:
;

	ROP=RAB$L_ROP*8			; bit offset to rop field

;
; Own Storage:
;


	.SBTTL	RM$PUT2 - HIGH LEVEL RELATIVE $PUT

;++
; RM$PUT2 -- High Level Relative $PUT.
;
; This module performs the following functions:
;
;	1.  Calls RM$GETREC2_PUT to gain access to the bucket, locking it,
;	    and unlocking any record automatically locked.  The unlocking
;	    is deferred if key access and the record is the current record
;	    to avoid opening a window where the record is unlocked while the
;	    bucket is being reaccessed.
;
;	2.  If the return from RM$GETREC2_PUT indicates that the desired
;	    record is past the current end of file, calls RM$EXTEND2 to extend
;	    the file and tries again
;
;	3.  If manual locking is specified, the record to be written is locked,
;	    otherwise the routine merely checks that the record is not locked
;	    by another stream. If the record was not unlocked in rm$getrec2_put
;	    (unlock_rp still set), it is unlocked at this point.
;
;	4.  The record is checked for non-existence and if so the record is
;	    copied to the bucket buffer.
;
;	5.  Access to the bucket is released, causing the buffer to be written
;	    unless deferred write has been specified (at open time).
;
; Calling Sequence:
;
;	 Entered via case branch from RM$PUT at RM$PUT2.
;
; Input Parameters:
;
;	R11	impure area address
;	R10	ifab addr
;	R9	irab addr
;	R8	rab addr
;
; Implicit Inputs:
;
;	The contents of the rab and related irab and ifab.
;
; Output Parameters:
;
;	R1 thru R7	destroyed
;	R0		status
;
; Implicit Outputs:
;
;	Various fields of the rab are filled in to reflect
;	the status of the operation (see functional spec
;	for details).
;
;	The irab is similarly updated.
;
; Completion Codes:
;
;	Standard rms (see functional spec).
;
; Side Effects:
;
;	none
;
;--


RM$PUT2::
	$TSTPT	PUT2
	$CSHFLAGS	LOCK		; require lock on bucket
	BBC	#IFB$V_SEQFIL,(R10),10$	; check if really sequential
	BISL2	#CSH$M_NOREAD,R3	; don't read block if really seq.
10$:	BSBW	RM$GETREC2_PUT		; go access bucket
CHKERR:	BLBS	R0,10$			; continue if success
	BRW	CHKEOF			; otherwise go check if EOF
;
;  Handle record locking, if required.
;
;  If automatic locking (RAB$V_ULK = 0) , need merely check that record
;  is not locked since bucket is locked (and no other user could possibly
;  lock the record until the bucket is released).
;
;  If manual unlocking (RAB$V_ULK = 1), must lock the record.
;

10$:	BBS	#IFB$V_NORECLK,(R10),CHKCTL; branch if no locking
	MOVL	IRB$L_RP(R9),R1		; get record #
	CLRL	R2			; zero hi half
;
;  If record was previously auto-locked and unlocking was deferred to avoid
;  and unlocked record window, it is unlocked at this point.
;

	BBCC	#IRB$V_UNLOCK_RP,(R9),20$ ; branch if already unlocked
	PUSHR	#^M<R1,R2>		; save these
	BSBW	RM$UNLOCK		; unlock the record
	POPR	#^M<R1,R2>		; restore registers
20$:	BBS	#RAB$V_ULK+ROP,(R8),LOCK; branch if manual locking
	BSBW	RM$QUERY_LCK		; o.k. to write?
	CMPW	R0,#RMS$_OK_RLK&^XFFFF	; only read allowed?
	BNEQ	CHKLCK			; branch if not (so far so good)
	RMSERR	RLK			; switch status to error

;
;  Handle error.
;

CLEAN1:	MOVL	IRB$L_CURBDB(R9),R4	; Update R4 in case BDB was released.
	MOVL	R0,R7			; save status code
CLEAN2:
	BBC	#RAB$V_ULK+ROP,(R8),10$	; this record manually locked?
	SSB	#IRB$V_UNLOCK_RP,(R9)	; yes, make sure it's released
10$:	BRW	RM$CLN2_PUT		; go clean up

;
;  Manual locking.  Must lock the record.
;

LOCK:	BSBW	RM$LOCK			; go lock record
CHKLCK:	BLBC	R0,CLEAN1		; branch on failure
	CMPW	R0,#RMS$_OK_WAT&^XFFFF	; did we wait for it?
	BNEQ	CHKCTL			; branch if not

;
; Lock routine stalled, this means that the bucket was
; released, go re-access bucket.
;

	$CSHFLAGS	LOCK		; require lock on bucket
	BBC	#IFB$V_SEQFIL,(R10),10$ ; check if really sequential
	BISL2	#CSH$M_NOREAD,R3	; don't read block if really seq.
10$:	BSBW	RM$GETREC2_PUT		; go re-access bucket
	BLBC	R0,CLEAN1		; get out on error

;
;  Locking all set.
;  Check for record already existent and if not, copy the record to the buffer.
;

CHKCTL:
	BBS	#IFB$V_SEQFIL,(R10),10$	; if seq file no control byte
	CMPB	(R5),#DLC$M_REC		; does record exist?
	BNEQ	10$			; branch if not (ok to put)
	BBC	#RAB$V_UIF+ROP,(R8),ERRREX; error unless uif bit set
10$:	MOVL	#1,AP			; indicate to PUTUPD2 this is a PUT
	BSBW	RM$PUTUPD2		; go copy record
	BLBC	R7,30$			; branch on error

	ASSUME	RAB$C_SEQ EQ 0

	TSTB	RAB$B_RAC(R8)		; sequential access?
	BNEQ	20$			; branch if not
	ADDL3	IRB$L_RP(R9),#1,IRB$L_NRP(R9); yes - set nrp from rp + 1
20$:	CLRL	IRB$L_RP(R9)		; show no current record
	BRW	RM$RLS2			; go finish up
30$:	BRW	RM$CLN2_PUT		; clean up on error

;
;  Record already exists.  Declare error and go clean up.
;

ERRREX:
	RMSERR	REX,R7			; set error code
	BRB	CLEAN2			; go clean up

;
;  Check if error from RM$GETREC2_PUT is due to eof, and if so extend the file.
;

CHKEOF:
	CMPW	R0,#RMS$_EOF&^XFFFF	; is error = eof?
	BNEQ	10$			; branch if not
	MOVL	R2,R6			; save desired hi vbn + 1
	BSBW	RM$LOCK_PROLOG		; lock vbn 1
	BLBC	R0,10$			; branch on error
	MOVL	R4,IFB$L_LOCK_BDB(R10)	; save bdb addr

;
;  Prolog is now interlocked, thus preventing other extends.
;  Check that extend is still required.
;

	CMPL	IFB$L_EBK(R10),R6	; still need to extend eof?
	BGEQU	20$			; branch if not
	DECL	R6			; adjust for hbk
	SUBL2	IFB$L_HBK(R10),R6	; compute # of blocks needed
	BLEQU	25$			; branch if none (need only format)

;
;  Allocate a fib to do the extend.
;

	PUSHL	R4			; save lock bdb addr around calls
	MOVZBL	#FIB$C_LENGTH,R2	; size of fib
	BSBW	RM$GETSPC1		; go allocate fib
	BLBC	R0,8$			; branch on failure
	MOVZWL	IFB$W_RTDEQ(R10),FIB$L_EXSZ(R1); set default extend size
	BNEQ	2$			; branch if non-zero
	BISB2	#FIB$M_ALDEF,FIB$W_EXCTL(R1); flag maximize with vol. default
2$:	CMPL	FIB$L_EXSZ(R1),R6	; is default > # blocks needed?
	BGEQU	4$			; branch if yes
	MOVL	R6,FIB$L_EXSZ(R1)	; no - use required extend size
4$:

;
;  Do the extend.
;

	CLRL	IRB$L_CURBDB(R9)	; zero current bdb
	BSBW	RM$EXTEND0_ALT		; do extend and deallocate fib
	BLBC	R0,8$			; branch on error

;
; If extend worked we can get rid of bdb addr (r4) on top of stack.
;

	TSTL	(SP)+

;
;  Format the buckets (i.e., write zeroes) and update prolog.
;

15$:
	BBS	#IFB$V_SEQFIL,(R10),7$	; if seq don't zero
	BSBW	RM$FMT_BKT2		; write zeroed blocks
	BSBW	RM$UPD_PROLOG2		; update prolog
	BLBC	R0,10$			; branch on error
3$:	$CSHFLAGS	LOCK		; specify lock required
5$:	MOVL	IRB$L_CURVBN(R9),R1	; set vbn
	BSBW	RM$READBKT2		; go access bucket
	BRW	CHKERR			; and try again
7$:
	MOVL	IFB$L_LOCK_BDB(R10),R4	; restore r4
	BSBW	RM$SETHEBK		; update eof
	ADDL3	IRB$L_CURVBN(R9),#1,IFB$L_EBK(R10); just make ebk beyond block
					; asked for if seq file.

	$CSHFLAGS <LOCK,NOREAD>		; no need to read block if seq file.
	BRB	5$			; try again

;
;  Error has occurred allocating a fib or extending the file.
;

8$:
	POPR	#^M<R4>			; restore bdb addr for cleanup
	BSBW	RM$RLSPLG		; release lock on prolog
	CLRL	R4			; don't release bdb twice
10$:	BRW	CLEAN1			; clean up on error

;
;  Another user has done an extend since we last checked the eof data
;  (hard to believe he could sneak in that window, isn't it?)
;
;  Therefore, our work is already done.  We need merely unlock the prolog
;  and go try our put again.
;

20$:	BSBW	RM$RLSPLG		; unlock the prolog
	BRB	3$			; continue with put

;
;  File needs no extending, only formatting.
;

25$:	ADDL3	#1,IFB$L_HBK(R10),R6	; set end vbn of extent + 1
	MOVL	IFB$L_EBK(R10),R1	; and start vbn of extent
	BRB	15$			; go format buckets


	.SBTTL	RM$PUTUPD2 - COMMON $PUT AND $UPDATE RELATIVE ROUTINE

;++
; RM$PUTUPD2 -- Common $PUT and $UPDATE Relative Routine.
;
;  This routine:
;
;	1. Saves r0 status code in r7.
;
;	2. Verifies the rsz and rbf parameters, as well as rhb if rfm=vfc.
;
;	3. Set the delete control byte to say record exists.
;
;	4. Store record size unless rfm=fix.
;
;	5. If rfm=vfc, copy the rhb to buffer.
;
;	6. Copy the record to the buffer and set the valid and dirty
;	   buffer flags.
;
;  Calling Sequence:
;
;	BSBW	RM$PUTUPD2
;
;  Input Parameters:
;
;	AP	non 0 if called from $put, 0 if from $update
;	R8-R11	same as for entry at rm$put2
;	R5	address of record in bucket buffer
;	R4	bdb address
;	R0	status code
;
;  Implicit Inputs:
;
;    The contents of the various control blocks, in particular:
;
;	RAB$W_RSZ	record size
;	RAB$L_RBF	record address
;	RAB$L_RHB	record header buffer address if rfm=vfc
;	IFB$B_RFM	record format
;	IFB$W_MRS	maximum record length
;	IFB$B_FSZ	fixed header size if rfm=vfc
;
;  Output Parameters:
;
;	R7		status code
;	R0-R3,R5,R6	destroyed
;
;  Implicit Outputs:
;
;	none.
;
;  Completion Codes:
;
;	Standard rms, in particular the code from r0 on input or rsz, rbf,
;	or rhb.
;
;  Side Effects:
;
;	none.
;--


RM$PUTUPD2::
	MOVL	R0,R7				; copy status code
	BBS	#IFB$V_BI,IFB$B_JNLFLG(R10),5$	; BI journaling on?
	BBC	#IFB$V_RUP,IFB$B_JNLFLG2(R10),40$ ; RUP? If no BI/RUP, skip this
5$:	PUSHR	#^M<R4,R5>			; save R4,R5
	BSBW	MAKEJNL				; set up journal record
	TSTL	AP				; doing $PUT?
	BEQL	10$				; branch if update
	MOVW	#RJR$C_RECLEN,BDB$W_NUMB(R6)	; don't write empty cell
10$:	MOVL	(SP),R4				; restore R4
	BBC	#IFB$V_BI,IFB$B_JNLFLG(R10),20$ ; branch if no BI
	PUSHL	R6				; jBDB arg
	MOVZBL	#CJF$_BI,-(SP)			; specify BI
	JSB	RM$WRTJNL			; write journal record
	ADDL2	#8,SP				; discard arglist
	BLBC	R0,30$				; get out on error
20$:	BBC	#IFB$V_RUP,IFB$B_JNLFLG2(R10),30$; branch if not RUP
	PUSHL	R6				; jBDB arg
	MOVZBL	#CJF$_RU,-(SP)			; specify BI
	JSB	RM$WRTJNL			; write journal record
	ADDL2	#8,SP				; discard arglist
30$:	POPR	#^M<R4,R5>
	BLBC	R0,ERRJNL			; get out on error

40$:	MOVZWL	RAB$W_RSZ(R8),R6		; get record size
	CMPB	IFB$B_RFMORG(R10),#FAB$C_FIX	; rfm = fix?
	BEQL	50$				; branch of yes
	CMPW	IFB$W_MRS(R10),R6		; record too long?
	BGEQU	60$				; branch if ok
						;  (else fall thru - will be checked)
50$:	CMPW	IFB$W_MRS(R10),R6		; rsz = fixed record length?
	BNEQ	ERRRSZ				; branch if not
60$:	BBC	#IFB$V_SEQFIL,(R10),CHKVFC
	BRW	SAVR45				; let's move record and be done
CHKVFC:	CMPB	IFB$B_RFMORG(R10),#FAB$C_VFC	; rfm = vfc?
	BNEQ	SETCTL				; branch if not

;
;  Record format is vfc.
;
;  Probe the record header buffer and copy to bucket.
;

	MOVZBL	IFB$B_FSZ(R10),R1	; get fixed header size
	MOVL	RAB$L_RHB(R8),R0	; get the rhb address
	BEQL	10$			; branch if none
	IFNORD	R1,(R0),ERRRHB,IRB$B_MODE(R9); branch if not readable
10$:	MOVB	#DLC$M_REC,(R5)+	; say record exists
	ADDW3	R6,R1,(R5)+		; set rec length = fixed + var
	PUSHR	#^M<R4,R5>		; save R4, R5
	TSTL	R0			; rhb speced?
	BEQL	20$			; branch if not
	MOVC3	R1,(R0),(R5)		; copy rhb
	BRB	40$

;
;  Rhb = 0.  Zero the header if doing $PUT, skip it if $UPDATE.
;

20$:	TSTL	AP			; doing $put?
	BNEQ	30$			; branch if yes
	ADDL2	R1,R5			; skip over header
	BRB	50$
30$:	MOVC5	#0,(SP),#0,R1,(R5)	; zero the header
40$:	MOVL	R3,R5			; update buffer address
50$:	BRB	MOVREC			; go move record


;
;  Handle errors.
;

ERRRHB:
	RMSERR	RHB,R7			; bad record header buffer
	RSB

ERRRSZ:
	RMSERR	RSZ,R7			; invalid record length
	RSB

ERRRBF:
	RMSERR	RBF,R7			; invalid record header buffer
	RSB

ERRJNL:
	MOVL	R0,R7
	RSB

;
;  Probe readability of all pages ( > 2) of user record.
;

LONG_PROBE:
	MOVL	R6,R0			; copy buffer length
	MOVL	R3,R1			; and address
	CVTWL	#-512,R2		; set address constant
10$:	IFNORD	R0,(R1),ERRRBF,IRB$B_MODE(R9); branch if not readable
	SUBL2	R2,R1			; get address next page
	MOVAW	(R0)[R2],R0		; adjust remaining length
	BGTR	10$			; loop if more to do
	SUBL2	R2,R0			; need to handle last page?
	BGTR	10$			; branch if yes
	BRB	MOVREC1			; rejoin main sequence



;
;  Set "record exists" into control byte, store the record size if var record
;  format, and move the record.
;

SETCTL:	MOVB	#DLC$M_REC,(R5)+	; say record exists
	CMPB	IFB$B_RFMORG(R10),#FAB$C_VAR; variable len rfm?
	BNEQ	SAVR45			; branch if not
	MOVW	R6,(R5)+		; store record length
SAVR45:	PUSHR	#^M<R4,R5>		; save R4, R5
MOVREC:	MOVAL	@RAB$L_RBF(R8),R3	; get buffer addr
	TSTW	R6			; rsz = 0?
	BEQL	MOVREC1			; branch if yes
	CMPW	R6,#512			; record > 2 pages in length?
	BGTRU	LONG_PROBE		; branch if yes
	IFNORD	R6,(R3),ERRRBF,IRB$B_MODE(R9); branch if not readable
MOVREC1:
	MOVC3	R6,(R3),(R5)		; move the record
	MOVL	(SP),R4			; restore R4
	BISB	#BDB$M_VAL!BDB$M_DRT,BDB$B_FLGS(R4); say valid and dirty
	BBC	#IFB$V_AI,IFB$B_JNLFLG(R10),10$ ; branch if not AI journaling
	ADDL3	IRB$L_RP_OFF(R9),BDB$L_ADDR(R4),R5 ; get cell address
	BSBB	MAKEJNL			; set up journal record
	MOVL	(SP),R4			; restore R4
	PUSHL	R6			; jBDB arg
	MOVZBL	#CJF$_AI,-(SP)		; specify BI
	JSB	RM$WRTJNL		; write journal record
	ADDL2	#8,SP			; discard arglist
	MOVL	R0,R7			; set status code
10$:	POPR	#^M<R4,R5>		; restore R4, R5
20$:	RSB

;++
;	Subroutine to construct journal entry
;
;
;	Input:
;		R5	-	Cell to journal
;
;	Output:
;		R6	-	Addr of journaling BDB
;		Destroys	R1,R2,R4-R5
;--


MAKEJNL:
	MOVL	IRB$L_JNLBDB(R9),R6		; get journling BDB
	MOVL	BDB$L_ADDR(R6),R2		; get journling buffer
	MOVL	IRB$L_RP(R9),RJR$L_RRN(R2)	; fill in relative record num
	MOVB	#RJR$C_RECORD,RJR$B_ENTRY_TYPE(R2) ; RJR type

	ASSUME	RJR$B_OPER	EQ	RJR$B_ORG+1

	MOVW	#<RJR$_PUT@8 + RJR$C_REL>,-
		RJR$B_ORG(R2) 			; fill in file type & oper
	TSTL	AP				; doing $PUT?
	BNEQ	10$				; branch if so
	MOVB	#RJR$_UPDATE,RJR$B_OPER(R2)	; indicate $UPDATE
10$:	MOVW	IRB$W_CSIZ(R9),RJR$W_RSIZE(R2)	; set cell size
	ADDW3	IRB$W_CSIZ(R9),#RJR$C_RECLEN,-
		BDB$W_NUMB(R6)			; set journal record size
	MOVC3	IRB$W_CSIZ(R9),(R5),-
		RJR$T_RIMAGE(R2) 		; copy entire cell
	RSB

	.END
