MODULE LOCKERS (
		LANGUAGE (BLISS32),
		IDENT = 'V04-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  
!
! MODIFIED BY:
!
!	V04-001	ACG0463		Andrew C. Goldstein,	6-Sep-1984  15:36
!		Always use volume lock as parent of cache locks
!
!	V03-025	CDS0023		Christian D. Saether	23-Aug-1984
!		Add MAKE_FCB_STALE routine.
!		NEW_ACCESS_LOCK does not need to be global anymore.
!
!	V03-024	CDS0022		Christian D. Saether	15-Aug-1984
!		Make NEW_ACCESS_LOCK global routine.
!		Return zero for lock index in serial_file if
!		file number passed in is zero.
!		Remove use of MARKDEL in access lock value block.
!		Have QEX_N_CANCEL return success if lock actually
!		granted, failure if not.
!
!	V03-023	CDS0021		Christian D. Saether	14-Aug-1984
!		Do not store value block in conv_acclock if it
!		was not updated.
!
!	V03-022	CDS0020		Christian D. Saether	10-Aug-1984
!		Do not attempt to update fcb from value block in
!		conv_acclock when the lock is dequeued.
!
!	V03-021	CDS0019		Christian D. Saether	 6-Aug-1984
!		Set STS_HAD_LOCK flag in SERIAL_FILE routine for
!		use by OPEN_FILE and CLOSE_FILE.
!
!	V03-020	ACG0438		Andrew C. Goldstein,	19-Jul-1984  19:34
!		Add CACHE_LOCK subroutine to handle special cache locks;
!		add central dequeue routine.
!
!	V03-019	CDS0018		Christian D. Saether	18-May-1984
!		Force cache miss by incrementing buffer sequence
!		numbers on locks when valnotvalid error returned
!		by the lock manager.
!
!	V03-018	CDS0017		Christian D. Saether	10-May-1984
!		Expand test for locking to include whether we are
!		a cluster at all.
!
!	V03-017	CDS0016		Christian D. Saether	 9-May-1984
!		Retry on a deadlock error.
!
!	V03-016	CDS0015		Christian D. Saether	 7-May-1984
!		Perform extra conversion on access locks
!		after upward conversion to make them sysowned again.
!
!	V03-015	CDS0014		Christian D. Saether	 5-May-1984
!		Bugcheck on access lock conversion failures.
!
!	V03-014	CDS0013		Christian D. Saether	20-Apr-1984
!		Revise access lock handling.
!		Add routines NEW_ACCESS_LOCK, CONV_ACCLOCK,
!		ARBITRATE_ACCESS, LOCK_COUNT, QEX_N_CANCEL.
!
!	V03-013	CDS0012		Christian D. Saether	10-Apr-1984
!		Bump PMS counters for various locks and stalls.
!
!	V03-012	ACG0408		Andrew C. Goldstein,	23-Mar-1984  14:46
!		Add AST parameter so that impure storage is fully based
!		Make APPLY_RVN a macro
!
!	V03-011	CDS0011		Christian D. Saether	 7-Mar-1984
!		Clear BITMAP_VBN when releasing the allocation lock
!		so that the bitscanner doesn't think bitmap_buffer
!		is still good.
!
!	V03-010	CDS0010		Christian D. Saether	19-Feb-1984
!		Save/restore VC_SEQNUM in LB_DATASEQ [0].
! 		Rundown relevant buffers when lowering locks.
!		Call WRITE_DIRTY in ALLOCATION_UNLOCK routine.
!		Call APPLY_RVN in SERIAL_LOCK for lockbasis.
!
!	V03-009	CDS0009		Christian D. Saether	30-Dec-1983
!		Use L_NORM linkage and BIND_COMMON macro.
!
!	V03-008	CDS0008		Christian D. Saether	 6-Dec-1983
!		Use VCB$V_NOSHARE to determine which name space
!		a lock is in.
!
!	V03-007	CDS0007		Christian D. Saether	19-Oct-1983
!		Do NOT clone NOALLOC in allocation lock value block.
!
!	V03-006	CDS0006		Christian D. Saether	15-Oct-1983
!		Call FLUSH_LOCK_BASIS from the allocation_unlock
!		routine.  This fixes a bug in create where the
!		allocation lock was being released without invalidating
!		the buffer.
!
!	V03-005	CDS0005		Christian D. Saether	11-Oct-1983
!		Add routine to wait for blocking lock and
!		rearm if necessary.
!
!	V03-004	CDS0004		Christian D. Saether	 3-Oct-1983
!		Set CURR_LCKINDX on serial_file.  Clear if match
!		on release_serial_lock.
!
!	V03-003	CDS0003		Christian D. Saether	12-Sep-1983
!		New lock name format.
!		Save volume context flags.
!
!	V03-002	CDS0002		Christian D. Saether	28-Jun-1983
!		Make access lock a system owned lock.
!		Normalize RVN part of lockid for SERIAL_FILE.
!
!	V03-001	CDS0001		Christian D. Saether	16-May-1983
!		SERIAL_FILE resource name does NOT include file sequence
!		number.
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

MACRO
	LCK_STS = 0,0,16,0 %,
	LCK_ID = 4,0,32,0 %;

FORWARD ROUTINE
	NEW_ACCESS_LOCK	: L_NORM,
	LOCK_MODE	: L_JSB_1ARG,
	CONV_ACCLOCK	: L_NORM,
	ARBITRATE_ACCESS : L_JSB_2ARGS,
	LOCK_COUNT	: L_NORM,
	QEX_N_CANCEL	: L_NORM,
	MAKE_FCB_STALE	: L_NORM NOVALUE,
	SERIAL_FILE	: L_NORM,
	RELEASE_SERIAL_LOCK : L_NORM NOVALUE,
	ALLOCATION_LOCK	: L_NORM NOVALUE,
	ALLOCATION_UNLOCK : L_NORM NOVALUE,
	BLOCK_WAIT	: L_NORM NOVALUE,
	TAKE_BLOCK_LOCK	: L_NORM NOVALUE,
	CACHE_LOCK	: L_NORM,
	DEQ_LOCK	: L_NORM NOVALUE; ! dequeue a lock

ROUTINE NEW_ACCESS_LOCK (LCKMODE, FCB) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes out a lock based on the given lock mode and file id,
!	using the appropriate qualifiers in the resource name.
!
! CALLING SEQUENCE:
!	See routine header above.
!
! INPUT PARAMETERS:
!
! IMPLICIT INPUTS:
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	FCB$L_ACCLCKID - Lock id of granted lock.  0 if no lock granted.
!
! ROUTINE VALUE:
!	1 if access allowed
!	0 if access not allowed.
!
! SIDE EFFECTS:
!
!--

BEGIN

BIND_COMMON;

MAP
	FCB	: REF BBLOCK;

LOCAL
	LOCK_BLOCK	: BBLOCK [24],
	RESNAM		: VECTOR [24, BYTE],
	RESNAM_D	: VECTOR [2] INITIAL (LONG (22), LONG (RESNAM));

BIND
	LOCK_VAL = LOCK_BLOCK + 8 : BBLOCK FIELD (AV);

EXTERNAL
	PMS$GL_ACCLCK	: ADDRESSING_MODE (ABSOLUTE);

EXTERNAL ROUTINE
	XQP$FCBSTALE	: ADDRESSING_MODE (ABSOLUTE);	! blocking routine

! Generate the resource name to identify the file in the cluster.
! Prefix the entire lock with the facility code for the file system.
!

(RESNAM [0]) = 'F11B';
(RESNAM [4])<0,16> = '$a';

CH$MOVE (12,
	IF .CURRENT_VCB [VCB$W_RVN] EQL 0
	THEN CURRENT_VCB [VCB$T_VOLCKNAM]
	ELSE CURRENT_RVT [RVT$T_VLSLCKNAM],
	RESNAM [6]);

(RESNAM [18]) = .FCB [FCB$L_LOCKBASIS];

PMS$GL_ACCLCK = .PMS$GL_ACCLCK + 1;

!****
! Attempt to acquire the lock.  If granted then access is allowed.
!****

BEGIN
LOCAL
	STATUS;

STATUS = $ENQ ( EFN = EFN,
	LKMODE = .LCKMODE,
	FLAGS = LCK$M_NOQUEUE + LCK$M_SYNCSTS + LCK$M_SYSTEM
		+ LCK$M_VALBLK + LCK$M_NOQUOTA + LCK$M_CVTSYS,
	BLKAST = XQP$FCBSTALE,
	ASTPRM = .FCB,
	LKSB = LOCK_BLOCK,
	RESNAM = RESNAM_D);

IF NOT .STATUS
THEN
    IF (.STATUS EQL SS$_NOTQUEUED)
    THEN
	RETURN 0
    ELSE
	IF (.STATUS NEQ SS$_VALNOTVALID)
	THEN
	    ERR_EXIT (.STATUS);

END;		! of block defining STATUS.

FCB [FCB$B_ACCLKMODE] = .LCKMODE;
FCB [FCB$L_ACCLKID] = .LOCK_BLOCK [LCK_ID];

FCB [FCB$V_DELAYTRNC] = 0;
IF .LOCK_VAL [AV_DELAYTRNC]
THEN
    FCB [FCB$V_DELAYTRNC] = 1;
FCB [FCB$L_TRUNCVBN] = .LOCK_VAL [AV_TRUNCVBN];

SS$_NORMAL

END;


GLOBAL ROUTINE LOCK_MODE (ACCTL) : L_JSB_1ARG =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine calculates the appropriate lock mode based on the
!	access control flags passed.
!
! CALLING SEQUENCE:
!	See routine header above.
!
! INPUT PARAMETERS:
!
!	ACCTL - Access control flags
!	    FIB$V_WRITE - write access requested
!	    FIB$V_NOREAD - readers disallowed
!	    FIB$V_NOWRITE - writeres disallowed
!	    FIB$V_NOLOCK - override everyone else's locks
!
! IMPLICIT INPUTS:
!
! OUTPUT PARAMETERS:
!
! IMPLICIT OUTPUTS:
!
! ROUTINE VALUE:
!
!	Lock mode (used as input to SYS$ENQ service).
!
! SIDE EFFECTS:
!
!--

BEGIN

MAP
	ACCTL	: BBLOCK;

BIND_COMMON;

! If NOLOCK is specified and the caller effectively has sysprv on
! the volume, use null lock mode.
!

IF .ACCTL [FIB$V_NOLOCK] AND .CLEANUP_FLAGS [CLF_SYSPRV]
THEN
    RETURN LCK$K_NLMODE;

IF .ACCTL [FIB$V_WRITE]
THEN
    IF .ACCTL [FIB$V_NOREAD]
    THEN

! This is a writer disallowing readers and writers.

	LCK$K_EXMODE
    ELSE
	IF .ACCTL [FIB$V_NOWRITE]
	THEN

! This is a writer allowing readers but disallowing other writers.

	    LCK$K_PWMODE
	ELSE

! This is a writer allowing other readers and writers.

	    LCK$K_CWMODE
ELSE
    IF .ACCTL [FIB$V_NOREAD]
    THEN

! This is a reader disallowing other readers and writers.

	LCK$K_EXMODE
    ELSE
	IF .ACCTL [FIB$V_NOWRITE]
	THEN

! This is a reader allowing other readers but disallowing writers.

	    LCK$K_PRMODE
	ELSE

! This is a reader allowing other readers and writers.

	    LCK$K_CRMODE
END;


GLOBAL ROUTINE CONV_ACCLOCK (LCKMODEARG, FCBARG) : L_NORM =

!++
!
!  FUNCTIONAL DESCRIPTION:
!
!	Convert the access lock for the given fcb.
!	Dequeue the lock entirely if the ref count is zero.
!
!--

BEGIN

BIND_COMMON;

EXTERNAL ROUTINE
	XQP$FCBSTALE	: ADDRESSING_MODE (ABSOLUTE);	! blocking routine

LOCAL
	FCB		: REF BBLOCK,
	LCKMODE		: BYTE,
	LOCK_VAL	: REF BBLOCK FIELD (AV),
	LOCK_BLOCK	: BBLOCK [24],
	STATUS;

FCB = .FCBARG;
LCKMODE = .LCKMODEARG;

! If lock id field is zero, we are not using locks for this device.
! The cluster test is made when the lock is initially acquired.
!

IF (LOCK_BLOCK [LCK_ID] = .FCB [FCB$L_ACCLKID]) EQL 0
THEN
    RETURN SS$_NORMAL;

LOCK_VAL = 0;

IF .FCB [FCB$B_ACCLKMODE] GEQU LCK$K_PWMODE
    AND (.FCB [FCB$B_ACCLKMODE] GEQU .LCKMODE)
THEN

! Store value block on this conversion.
!

    BEGIN
    LOCK_VAL = LOCK_BLOCK + 8;
    LOCK_VAL [0,0,32,0] = 0;
    LOCK_VAL [4,0,32,0] = 0;
    LOCK_VAL [8,0,32,0] = 0;
    LOCK_VAL [12,0,32,0] = 0;

    IF .FCB [FCB$V_DELAYTRNC]
    THEN
	LOCK_VAL [AV_DELAYTRNC] = 1;

    LOCK_VAL [AV_TRUNCVBN] = .FCB [FCB$L_TRUNCVBN];
    END;

IF .FCB [FCB$W_REFCNT] NEQ 0
THEN
    BEGIN
    LOCAL
	BLOCK_AST;

    IF .LCKMODE GTRU .FCB [FCB$B_ACCLKMODE]
    THEN
	BLOCK_AST = 0
    ELSE
	BLOCK_AST = XQP$FCBSTALE;

    STATUS =
	$ENQ ( EFN = EFN,
	LKMODE = .LCKMODE,
	FLAGS = LCK$M_NOQUEUE + LCK$M_SYNCSTS + LCK$M_CONVERT
		+ LCK$M_VALBLK + LCK$M_NOQUOTA + LCK$M_CVTSYS,
	BLKAST = .BLOCK_AST,
	ASTPRM = .FCB,
	LKSB = LOCK_BLOCK);

    IF NOT .STATUS
    THEN
	IF (.STATUS EQL SS$_NOTQUEUED)
	THEN
	    RETURN 0
	ELSE
	    IF (.STATUS NEQ SS$_VALNOTVALID)
	    THEN
		BUG_CHECK (XQPERR, 'access lock conversion failure');

    IF .LCKMODE GTRU .FCB [FCB$B_ACCLKMODE]
    THEN
	IF NOT
	    $ENQ ( EFN = EFN,
		LKMODE = .LCKMODE,
		FLAGS = LCK$M_NOQUEUE + LCK$M_SYNCSTS + LCK$M_CONVERT
			+ LCK$M_NOQUOTA + LCK$M_CVTSYS,
		BLKAST = XQP$FCBSTALE,
		ASTPRM = .FCB,
		LKSB = LOCK_BLOCK)
	THEN
	    BUG_CHECK (XQPERR, 'access lock conversion failure');

! Conversion was successful.  Update fcb fields if value block was retrieved.
! Store new mode just acquired.
!

    IF .FCB [FCB$B_ACCLKMODE] LSSU LCK$K_PWMODE
	AND (.LCKMODE GEQU .FCB [FCB$B_ACCLKMODE])
    THEN
	BEGIN
	LOCK_VAL = LOCK_BLOCK + 8;

	FCB [FCB$V_DELAYTRNC] = 0;

	IF .LOCK_VAL [AV_DELAYTRNC]
	THEN
	    FCB [FCB$V_DELAYTRNC] = 1;
	FCB [FCB$L_TRUNCVBN] = .LOCK_VAL [AV_TRUNCVBN];

	END;

    FCB [FCB$B_ACCLKMODE] = .LCKMODE;

    END
ELSE
    BEGIN
    IF NOT $DEQ (LKID = .LOCK_BLOCK [LCK_ID],
		VALBLK = .LOCK_VAL)
    THEN
	BUG_CHECK (XQPERR, 'Unexpected lock manager error');

    FCB [FCB$L_ACCLKID] = 0;
    FCB [FCB$B_ACCLKMODE] = 0;
    END;

SS$_NORMAL

END;			! of routine CONV_ACCLOCK

GLOBAL ROUTINE ARBITRATE_ACCESS (ACCTL, FCB) : L_JSB_2ARGS =
!++
!
! Determine if access to this file is allowed.
!
!--
BEGIN

MAP
	ACCTL	: BBLOCK,
	FCB	: REF BBLOCK;

BIND_COMMON;

EXTERNAL
	CLU$GL_CLUB	: ADDRESSING_MODE (GENERAL);

LOCAL
	LCKMODE;

IF .FCB [FCB$W_SEGN] NEQ 0
THEN
    ERR_EXIT (SS$_ACCONFLICT);

IF NOT (.ACCTL [FIB$V_NOLOCK] AND .CLEANUP_FLAGS [CLF_SYSPRV])
THEN
    IF .FCB [FCB$V_EXCL]
	OR .ACCTL [FIB$V_NOREAD] AND (.FCB [FCB$W_ACNT] NEQ 0)
	OR .ACCTL [FIB$V_NOWRITE] AND (.FCB [FCB$W_WCNT] NEQ 0)
	OR .ACCTL [FIB$V_WRITE] AND (.FCB [FCB$W_LCNT] NEQ 0)
    THEN
	ERR_EXIT (SS$_ACCONFLICT);

IF NOT .BBLOCK [CURRENT_UCB [UCB$L_DEVCHAR2], DEV$V_CLU]
    OR .CLU$GL_CLUB EQL 0
THEN
    RETURN 1;

LCKMODE = LOCK_MODE (.ACCTL);

IF .FCB [FCB$L_ACCLKID] EQL 0
THEN
    NEW_ACCESS_LOCK (.LCKMODE, .FCB)
ELSE
    IF .LCKMODE<0,8> GTRU .FCB [FCB$B_ACCLKMODE]
    THEN
	CONV_ACCLOCK (.LCKMODE, .FCB)
    ELSE
	SS$_NORMAL

END;			! of routine ARBITRATE_ACCESS

GLOBAL ROUTINE LOCK_COUNT (LOCKID) : L_NORM =
!++
!
! Get count of locks associated with LOCKID lock.  Return 1
! if LOCKID is zero.
!
!--

BEGIN

BIND_COMMON;

LOCAL
	LOCKCOUNT,
	STSBLK	: VECTOR [4, WORD],
	ITEMLIST : BBLOCK [12 + 4];

IF .LOCKID EQL 0
THEN
    RETURN 1;

ITEMLIST [0,0,16,0] = 4;
ITEMLIST [2,0,16,0] = LKI$_LCKCOUNT;
ITEMLIST [4,0,32,0] = LOCKCOUNT;
ITEMLIST [8,0,32,0] = 0;
ITEMLIST [12,0,32,0] = 0;

IF NOT $GETLKIW (EFN = EFN,
		LKIDADR = LOCKID,
		ITMLST = ITEMLIST,
		IOSB = STSBLK)
THEN
    BUG_CHECK (XQPERR, 'unexpected error from getlki');

RETURN .LOCKCOUNT

END;			! of routine LOCK_COUNT.

GLOBAL ROUTINE QEX_N_CANCEL (LOCKID) : L_NORM =

!++
!
! Enqueue the given lock for exclusive, cancelling the conversion
! if the lock is not granted.
!
!--

BEGIN

LOCAL
	LOCK_BLOCK	: BBLOCK [8],
	STATUS;

IF (LOCK_BLOCK [LCK_ID] = .LOCKID) EQL 0
THEN
    RETURN 0;

STATUS = $ENQ (EFN = EFN,
		LKMODE = LCK$K_EXMODE,
		FLAGS = LCK$M_NOQUOTA + LCK$M_CONVERT + LCK$M_SYNCSTS,
		LKSB = LOCK_BLOCK);

IF NOT .STATUS
THEN
    BUG_CHECK (XQPERR, 'Unexpected lock manager error')
ELSE
    IF .STATUS EQL SS$_NORMAL		! lock was queued
    THEN
	BEGIN

	IF NOT $DEQ (LKID = .LOCKID, FLAGS = LCK$M_CANCEL)
	THEN
	    BUG_CHECK (XQPERR, 'Unexpected lock manager error');
		
	RETURN 0;
	END
    ELSE
	RETURN 1;

END;

GLOBAL ROUTINE MAKE_FCB_STALE (FCBARG) : L_NORM NOVALUE =

!++
!
!  FUNCTIONAL DESCRIPTION:
!
!	For the given FCB, cause the blocking routine to be triggered
!	to mark other fcb clusterwide as stale.
!
!--

BEGIN

BIND_COMMON;

EXTERNAL
	CLU$GL_CLUB	: ADDRESSING_MODE (GENERAL);

LOCAL
	CURRLKMODE	: BYTE,
	FCB		: REF BBLOCK;

IF NOT .BBLOCK [CURRENT_UCB [UCB$L_DEVCHAR2], DEV$V_CLU]
    OR .CLU$GL_CLUB EQL 0
THEN
    RETURN;

FCB = .FCBARG;

CURRLKMODE = .FCB [FCB$B_ACCLKMODE];

IF .FCB [FCB$L_ACCLKID] EQL 0
THEN
    IF NOT NEW_ACCESS_LOCK (0, .FCB)
    THEN
	BUG_CHECK (XQPERR, 'unexpected lock manager reaction');

IF QEX_N_CANCEL (.FCB [FCB$L_ACCLKID])

! If the lock was granted, note that by setting the lock mode field in the fcb.
! This must be done so that conv_acclock does the correct thing with the value
! block.
!

THEN
    FCB [FCB$B_ACCLKMODE] = LCK$K_EXMODE;

CONV_ACCLOCK (.CURRLKMODE, .FCB);

END;

GLOBAL ROUTINE SERIAL_FILE (FID_ADDR) : L_NORM =

!++
!
!  FUNCTIONAL DESCRIPTION:
!
!	Returns the index of the lock block selected.
!--

BEGIN

MAP
	FID_ADDR	: REF BBLOCK;

BIND_COMMON;

EXTERNAL ROUTINE
	CONTINUE_THREAD	: L_NORM NOVALUE,
	WAIT_FOR_AST	: L_NORM NOVALUE;

EXTERNAL
	PMS$GL_SYNCHLCK		: ADDRESSING_MODE (ABSOLUTE),
	PMS$GL_SYNCHWAIT	: ADDRESSING_MODE (ABSOLUTE);

LOCAL
	RETRIES,
	LB_INDEX,
	LOCK_BASIS	: INITIAL (0),
	LOCK_BLOCK	: BBLOCK [24],
	RESNAM		: VECTOR [10, BYTE],
	RESNAM_D	: VECTOR [2] INITIAL (LONG (10), LONG (RESNAM));

BIND
	LOCK_VAL = LOCK_BLOCK + 8 : BBLOCK FIELD (FC);

LOCK_BASIS<0,16> = .FID_ADDR [FID$W_NUM];
LOCK_BASIS<16,8> = .FID_ADDR [FID$B_NMX];

IF .LOCK_BASIS EQL 0
THEN
    RETURN 0;

LOCK_BASIS<24,8> = .FID_ADDR [FID$B_RVN];
APPLY_RVN (LOCK_BASIS<24,8>, .CURRENT_RVN);

! Initialize index to 1.  0 is specially reserved for the volume
! allocation lock.
!

LB_INDEX = 1;

DO
    BEGIN
    IF .LOCK_BASIS EQL .LB_BASIS [.LB_INDEX]
    THEN
	EXITLOOP;

    LB_INDEX = .LB_INDEX + 1;
    END
UNTIL .LB_INDEX EQL LB_NUM;

IF .LB_INDEX NEQ LB_NUM
THEN
    BEGIN
    STSFLGS [STS_HAD_LOCK] = 1;
    CURR_LCKINDX = .LB_INDEX;
    RETURN .LB_INDEX;
    END;

LB_INDEX = 1;

DO
    BEGIN
    IF .LB_LOCKID [.LB_INDEX] EQL 0
    THEN EXITLOOP;
    LB_INDEX = .LB_INDEX + 1;
    END
UNTIL .LB_INDEX EQL LB_NUM;

IF .LB_INDEX EQL LB_NUM
THEN
    BUG_CHECK (XQPERR, 'Failed to find free lock block');


!****
! Generate the resource name to identify the file in the cluster.
!****

! Prefix the entire lock with the facility code for the file system.
!

(RESNAM [0]) = 'F11B';
(RESNAM [4])<0,16> = '$s';

(RESNAM [6]) = .LOCK_BASIS;

PMS$GL_SYNCHLCK = .PMS$GL_SYNCHLCK + 1;

RETRIES = 0;

WHILE 1 DO

BEGIN
LOCAL
	STATUS;

STATUS = $ENQ ( EFN = EFN,
	LKMODE = LCK$K_PWMODE,
	FLAGS = LCK$M_SYNCSTS + LCK$M_SYSTEM + LCK$M_VALBLK + LCK$M_NOQUOTA,
	LKSB = LOCK_BLOCK,
	PARID = .(IF .CURRENT_VCB [VCB$W_RVN] EQL 0
		THEN CURRENT_VCB [VCB$L_VOLLKID]
		ELSE CURRENT_RVT [RVT$L_STRUCLKID]),
	ASTADR = CONTINUE_THREAD,
	ASTPRM = .BASE,
	RESNAM = RESNAM_D);

IF NOT .STATUS
THEN
    BEGIN
    ERR_EXIT (.STATUS);
    END;

IF .STATUS EQL SS$_NORMAL
THEN
    BEGIN
    PMS$GL_SYNCHWAIT = .PMS$GL_SYNCHWAIT + 1;
    WAIT_FOR_AST ();
    END;

IF NOT .LOCK_BLOCK [LCK_STS]
THEN
    IF .LOCK_BLOCK [LCK_STS] EQL SS$_VALNOTVALID
    THEN

! The value block may not contain the most current information.
! Other nodes may have made more recent modifications that are
! reflected on disk, so we must force a cache miss.
! It may actually be the case that our copy is valid because we were
! the last to touch this, but we can't tell that and the disk
! will have the same contents as our buffer, so the only cost
! is an extra read if that happens.
!

	BEGIN
	LOCK_VAL [FC_HDRSEQ] = .LOCK_VAL [FC_HDRSEQ] + 1;
	LOCK_VAL [FC_DATASEQ] = .LOCK_VAL [FC_DATASEQ] + 1;
	EXITLOOP;
	END
    ELSE
	BEGIN
	IF .LOCK_BLOCK [LCK_STS] NEQ SS$_DEADLOCK
	    OR .RETRIES GEQU 2
	THEN
	    ERR_EXIT (.LOCK_BLOCK [LCK_STS]);

	RETRIES = .RETRIES + 1;
	END
ELSE
    EXITLOOP;	! i.e., operation was successful

END;		! of block defining STATUS.

LB_LOCKID [.LB_INDEX] = .LOCK_BLOCK [LCK_ID];
LB_BASIS [.LB_INDEX] = .LOCK_BASIS;

LB_HDRSEQ [.LB_INDEX] = .LOCK_VAL [FC_HDRSEQ];
LB_DATASEQ [.LB_INDEX] = .LOCK_VAL [FC_DATASEQ];

CURR_LCKINDX = .LB_INDEX

END;		! of routine SERIAL_FILE


GLOBAL ROUTINE RELEASE_SERIAL_LOCK (LOCK_INDEX) : L_NORM NOVALUE =

!
! Release the indicated serial_lock.
!

BEGIN

EXTERNAL ROUTINE
	RELEASE_LOCKBASIS : L_NORM,
	RELEASE_CACHE	: L_JSB NOVALUE;

BIND_COMMON;

LOCAL
	LKID_ADDR,
	LOCK_BLOCK	: BBLOCK [24];

BIND
	LOCK_VAL = LOCK_BLOCK + 8 : BBLOCK FIELD (FC);

IF .LOCK_INDEX EQL 0 OR .LOCK_INDEX GEQU LB_NUM
THEN
    BUG_CHECK (XQPERR, 'Invalid lock index');

LOCK_VAL [FC_HDRSEQ] = .LB_HDRSEQ [.LOCK_INDEX];
LOCK_VAL [FC_DATASEQ] = .LB_DATASEQ [.LOCK_INDEX];
LOCK_VAL [FC_FILESIZE] = .LB_FILESIZE [.LOCK_INDEX];

IF (LKID_ADDR = RELEASE_LOCKBASIS (.LOCK_INDEX)) NEQ 0
THEN
    BEGIN
    LOCAL
	STATUS;

    LOCK_BLOCK [LCK_ID] = .LB_LOCKID [.LOCK_INDEX];

    STATUS = $ENQ ( EFN = EFN,
		LKSB = LOCK_BLOCK,
		FLAGS = LCK$M_CONVERT + LCK$M_VALBLK + LCK$M_CVTSYS + LCK$M_SYNCSTS,
		LKMODE = LCK$K_NLMODE);

    IF .STATUS<0,16> NEQ SS$_SYNCH
	OR NOT .LOCK_BLOCK [LCK_STS]
    THEN
	BUG_CHECK (XQPERR, 'unexpected lock manager error');

    .LKID_ADDR = .LB_LOCKID [.LOCK_INDEX];

    RELEASE_CACHE ();
    END
ELSE
    IF NOT $DEQ (LKID = .LB_LOCKID [.LOCK_INDEX],
		VALBLK = LOCK_VAL)
    THEN
	BUG_CHECK (XQPERR, 'Unexpected lock manager error');

IF .LOCK_INDEX EQL .CURR_LCKINDX
THEN
    CURR_LCKINDX = 0;

LB_LOCKID [.LOCK_INDEX] = 0;
LB_BASIS [.LOCK_INDEX] = 0;

END;


GLOBAL ROUTINE ALLOCATION_LOCK : L_NORM NOVALUE =

!++
!
!  FUNCTIONAL DESCRIPTION:
!
!--

BEGIN

EXTERNAL
	EXE$GL_SYSID_LOCK : ADDRESSING_MODE (GENERAL);

BIND_COMMON;

EXTERNAL ROUTINE
	CONTINUE_THREAD	: L_NORM NOVALUE,
	WAIT_FOR_AST	: L_NORM NOVALUE;

EXTERNAL
	PMS$GL_VOLLCK	: ADDRESSING_MODE (ABSOLUTE),
	PMS$GL_VOLWAIT	: ADDRESSING_MODE (ABSOLUTE);

LOCAL
	RETRIES,
	LOCK_BLOCK	: BBLOCK [24],
	PARENT_ID,
	RESNAM		: VECTOR [18, BYTE],
	RESNAM_D	: VECTOR [2] INITIAL (LONG (18), LONG (RESNAM));

BIND
	LOCK_VAL = LOCK_BLOCK + 8 : BBLOCK FIELD (VC);

IF .LB_LOCKID [0] NEQ 0
THEN
    RETURN;

!****
! Generate the resource name to identify the file in the cluster.
!****

! Prefix the entire lock with the facility code for the file system.
!

(RESNAM [0]) = 'F11B';
(RESNAM [4])<0,16> = '$v';

CH$MOVE (12, CURRENT_VCB [VCB$T_VOLCKNAM], RESNAM [6]);

PARENT_ID = 0;

IF .CURRENT_VCB [VCB$V_NOSHARE]
THEN
    PARENT_ID = .EXE$GL_SYSID_LOCK;

PMS$GL_VOLLCK = .PMS$GL_VOLLCK + 1;
    
!****
! Attempt to acquire the lock.  If granted then access is allowed.
!****

RETRIES = 0;

WHILE 1 DO
BEGIN
LOCAL
	STATUS;

STATUS = $ENQ ( EFN = EFN,
	LKMODE = LCK$K_PWMODE,
	FLAGS = LCK$M_SYNCSTS + LCK$M_SYSTEM + LCK$M_VALBLK + LCK$M_NOQUOTA,
	PARID = .PARENT_ID,
	LKSB = LOCK_BLOCK,
	ASTADR = CONTINUE_THREAD,
	ASTPRM = .BASE,
	RESNAM = RESNAM_D);

IF NOT .STATUS
THEN
    BEGIN
    ERR_EXIT (.STATUS);
    END;

IF .STATUS EQL SS$_NORMAL
THEN
    BEGIN
    PMS$GL_VOLWAIT = .PMS$GL_VOLWAIT + 1;
    WAIT_FOR_AST ();
    END;

IF NOT .LOCK_BLOCK [LCK_STS]
THEN
    IF .LOCK_BLOCK [LCK_STS] EQL SS$_VALNOTVALID
    THEN

! Value block may not be the most current.  Force a miss on cached
! buffers by incrementing all sequence numbers.
!

	BEGIN
	(LOCK_VAL [VC_SEQNUM])<0,16> = .(LOCK_VAL [VC_SEQNUM])<0,16> + 1;
	(LOCK_VAL [VC_SEQNUM])<16,16> = .(LOCK_VAL [VC_SEQNUM])<16,16> + 1;
	(LOCK_VAL [VC_FLAGS])<1,15> = .(LOCK_VAL [VC_FLAGS])<1,15> + 1;
	EXITLOOP;
	END
    ELSE
	BEGIN
	IF .LOCK_BLOCK [LCK_STS] NEQ SS$_DEADLOCK
	    OR .RETRIES GEQU 2
	THEN
	    ERR_EXIT (.LOCK_BLOCK [LCK_STS]);

	RETRIES = .RETRIES + 1;
	END
ELSE
    EXITLOOP;

END;		! of block defining STATUS.

LB_BASIS [0] = -1;
LB_LOCKID [0] = .LOCK_BLOCK [LCK_ID];
LB_DATASEQ [0] = .LOCK_VAL [VC_SEQNUM];

! Update relevant fields in the VCB from the value block.
!

SAVE_VC_FLAGS = .LOCK_VAL [VC_FLAGS];
CURRENT_VCB [VCB$B_IBMAPVBN] = .LOCK_VAL [VC_IBMAPVBN];
CURRENT_VCB [VCB$B_SBMAPVBN] = .LOCK_VAL [VC_SBMAPVBN];
CURRENT_VCB [VCB$L_FREE] = .LOCK_VAL [VC_VOLFREE];
IF (BBLOCK [.CURRENT_VCB [VCB$L_FCBFL], FCB$L_EFBLK] = .LOCK_VAL [VC_IDXFILEOF])
    EQL 0
THEN
    BUG_CHECK (XQPERR, 'Unexpected lock manager state');

END;		! of routine ALLOCATION_LOCK


GLOBAL ROUTINE ALLOCATION_UNLOCK : L_NORM NOVALUE =

! This routine updates the value block and releases the current
! volume allocation lock, if any.
!

BEGIN

BIND_COMMON;

LOCAL
	LOCK_BLOCK	: BBLOCK [24],
	LOCKID;

EXTERNAL ROUTINE
	WRITE_DIRTY	: L_NORM,
	RELEASE_LOCKBASIS : L_NORM;

BIND
	LOCK_VAL = LOCK_BLOCK + 8 : BBLOCK FIELD (VC);

IF (LOCKID = .LB_LOCKID [0]) EQL 0
THEN
    RETURN;

WRITE_DIRTY (-1);

RELEASE_LOCKBASIS (0);

BITMAP_VBN = 0;

LOCK_VAL [VC_FLAGS] = .SAVE_VC_FLAGS;
LOCK_VAL [VC_IBMAPVBN] = .CURRENT_VCB [VCB$B_IBMAPVBN];
LOCK_VAL [VC_SBMAPVBN] = .CURRENT_VCB [VCB$B_SBMAPVBN];
LOCK_VAL [VC_VOLFREE] = .CURRENT_VCB [VCB$L_FREE];
LOCK_VAL [VC_IDXFILEOF] = .BBLOCK [.CURRENT_VCB [VCB$L_FCBFL], FCB$L_EFBLK];
LOCK_VAL [VC_SEQNUM] = .LB_DATASEQ [0];

LB_LOCKID [0] = 0;
LB_BASIS [0] = 0;

IF NOT $DEQ (LKID = .LOCKID,
		VALBLK = LOCK_VAL)
THEN
    BUG_CHECK (XQPERR, 'Unexpected lock manager error');

END;			! of routine ALLOCATION_UNLOCK


GLOBAL ROUTINE BLOCK_WAIT : L_NORM NOVALUE =

BEGIN

BUILTIN
	TESTBITSS;

LOCAL
	ACB		: REF BBLOCK,
	BLOCKID_A,
	ACTIVITY_A,
	RESNAM		: VECTOR [20, BYTE],
	RESNAM_D	: VECTOR [2] INITIAL (LONG (18), LONG (RESNAM)),
	LOCK_BLOCK	: BBLOCK [8],
	STATUS;

EXTERNAL
	SCH$GL_SWPPID	: ADDRESSING_MODE (GENERAL),
	XQP$DEQBLOCKER	: ADDRESSING_MODE (GENERAL);

BIND_COMMON;

EXTERNAL ROUTINE
	CONTINUE_THREAD	: L_NORM NOVALUE,
	XQP$BLOCK_ROUTINE	: ADDRESSING_MODE (GENERAL),
	WAIT_FOR_AST	: L_NORM NOVALUE;

(RESNAM [0]) = 'F11B';
(RESNAM [4])<0,16> = '$b';

IF .CURRENT_VCB [VCB$W_RVN] EQL 0
THEN
    BEGIN
    ACB = CURRENT_VCB [VCB$B_ACB];
    ACTIVITY_A = CURRENT_VCB [VCB$W_ACTIVITY];
    BLOCKID_A = CURRENT_VCB [VCB$L_BLOCKID];
    CH$MOVE (12, CURRENT_VCB [VCB$T_VOLCKNAM], RESNAM [6]);
    END
ELSE
    BEGIN
    ACB = CURRENT_RVT [RVT$B_ACB];
    ACTIVITY_A = CURRENT_RVT [RVT$W_ACTIVITY];
    BLOCKID_A = CURRENT_RVT [RVT$L_BLOCKID];
    CH$MOVE (12, CURRENT_RVT [RVT$T_VLSLCKNAM], RESNAM [6]);
    END;

STATUS = $ENQ ( EFN = EFN,
	LKMODE = LCK$K_PWMODE,
	FLAGS = LCK$M_SYNCSTS + LCK$M_SYSTEM + LCK$M_NOQUOTA,
	LKSB = LOCK_BLOCK,
	ASTADR = CONTINUE_THREAD,
	ASTPRM = .BASE,
	RESNAM = RESNAM_D);

IF NOT .STATUS
THEN
    ERR_EXIT (.STATUS);

IF .STATUS EQL SS$_NORMAL
THEN
    WAIT_FOR_AST ();

STATUS = .LOCK_BLOCK [LCK_STS];

IF NOT .STATUS
THEN
    ERR_EXIT (.STATUS);

IF ..BLOCKID_A NEQ 0
THEN
    BEGIN
    DEQ_LOCK (.LOCK_BLOCK [LCK_ID]);
    RETURN
    END;

! Because we have a PW lock on the blocking lock, AND the lock id is
! zero, it is now our duty to rearm the blocking lock.  Note that
! another blocking lock (EX) may already be queued, and the following
! conversion to CR with the sysblock routine will immediately fire such
! that when we return from the ENQ activity will be disabled again.
! That all works ok because we are going to retest conditions once we
! exit from this routine, and will simply re-execute it.
!

IF TESTBITSS (.ACTIVITY_A)
THEN
    BUG_CHECK (XQPERR, 'unexpected activity flag state');

ACB [ACB$B_RMOD] = PSL$C_KERNEL + ACB$M_NODELETE;
ACB [ACB$L_PID] = .SCH$GL_SWPPID;
ACB [ACB$L_AST] = XQP$DEQBLOCKER;
ACB [ACB$L_ASTPRM] = .LOCK_BLOCK [LCK_ID];

.BLOCKID_A = .LOCK_BLOCK [LCK_ID];

STATUS = $ENQ ( EFN = EFN,
		LKMODE = LCK$K_CRMODE,
		FLAGS = LCK$M_CVTSYS + LCK$M_CONVERT + LCK$M_SYNCSTS
			+ LCK$M_NOQUOTA + LCK$M_NOQUEUE,
		LKSB = LOCK_BLOCK,
		BLKAST = XQP$BLOCK_ROUTINE,
		ASTPRM = .CURRENT_VCB);

IF .STATUS
THEN
    STATUS = .LOCK_BLOCK [LCK_STS];

IF NOT .STATUS
THEN
    BUG_CHECK (XQPERR, 'Unexpected lock manager reaction');

END;


GLOBAL ROUTINE TAKE_BLOCK_LOCK : L_NORM NOVALUE =

BEGIN

LOCAL
	RESNAM		: VECTOR [20, BYTE],
	RESNAM_D	: VECTOR [2] INITIAL (LONG (18), LONG (RESNAM)),
 	STATUS,
	LOCK_BLOCK	: BBLOCK [8];

BIND_COMMON;

EXTERNAL ROUTINE
	CONTINUE_THREAD	: L_NORM,
	WAIT_FOR_AST	: L_NORM;

(RESNAM [0]) = 'F11B';
(RESNAM [4])<0,16> = '$b';

IF .CURRENT_VCB [VCB$W_RVN] EQL 0
THEN
    BEGIN
    CH$MOVE (12, CURRENT_VCB [VCB$T_VOLCKNAM], RESNAM [6]);
    END
ELSE
    BEGIN
    CH$MOVE (12, CURRENT_RVT [RVT$T_VLSLCKNAM], RESNAM [6]);
    END;

STATUS = $ENQ ( EFN = EFN,
	LKMODE = LCK$K_EXMODE,
	FLAGS = LCK$M_SYNCSTS + LCK$M_SYSTEM + LCK$M_NOQUOTA,
	LKSB = LOCK_BLOCK,
	ASTADR = CONTINUE_THREAD,
	ASTPRM = .BASE,
	RESNAM = RESNAM_D);

IF NOT .STATUS
THEN
    ERR_EXIT (.STATUS);

IF .STATUS EQL SS$_NORMAL
THEN
    WAIT_FOR_AST ();

STATUS = .LOCK_BLOCK [LCK_STS];

IF NOT .STATUS
THEN
    ERR_EXIT (.STATUS);

BLOCK_LOCKID = .LOCK_BLOCK [LCK_ID];

END;

GLOBAL ROUTINE CACHE_LOCK (LOCK_BASIS, LOCK_ID, MODE) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine takes out the specified special purpose cache
!	lock identified by the lock basis.
!
! CALLING SEQUENCE:
!	CACHE_LOCK (LOCK_BASIS, LOCK_ID, MODE)
!
! INPUT PARAMETERS:
!	LOCK_BASIS: basis for lock name
!	LOCK_ID: address of existing lock ID or 0
!	MODE: mode of operation:
!	      0 = normal cache lock, system, noqueue
!	      1 = force flush lock, process, queued
!	      2 = write access lock, system, queued
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!	CURRENT_RVT: RVT of volume set
!	XQP$GL_FILESERVER: PID of file server process
!
! OUTPUT PARAMETERS:
!	LOCK_ID: address to store ID of lock taken
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	LBC if lock not available
!	LBS if lock successfully taken
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

LOCAL
	STATUS,				! system service status
	LOCK_STATUS	: BBLOCK [8],	! lock status block
	RESNAM		: VECTOR [10, BYTE], ! resource name string
	RESNAM_D	: VECTOR [2],	! resource name string descriptor
	PARENT_ID,			! parent ID for lock
	LOCK_MODE,			! mode of lock to take
	LOCK_FLAGS	: BBLOCK [4],	! $ENQ mode flags
	CACHE_TYPE;			! type code of cache being locked

EXTERNAL
	XQP$GL_FILESERVER : ADDRESSING_MODE (GENERAL);
					! PID of cache server process

EXTERNAL ROUTINE
	CONTINUE_THREAD	: L_NORM,	! continue after wait
	WAIT_FOR_AST	: L_NORM,	! wait for completion AST
	XQP$UNLOCK_CACHE : L_NORM ADDRESSING_MODE (GENERAL);
					! system cache blocking AST routine

BIND_COMMON;


! Set up resource name and parent ID. Get the existing lock ID if any.
!

(RESNAM[0]) = 'F11B';
(RESNAM[4])<0,16> = '$c';
(RESNAM[6]) = .LOCK_BASIS;
RESNAM_D[0] = 10;
RESNAM_D[1] = RESNAM;

PARENT_ID = .CURRENT_VCB[VCB$L_VOLLKID];

LOCK_MODE = LCK$K_CWMODE;

LOCK_FLAGS = LCK$M_SYNCSTS OR LCK$M_SYSTEM OR LCK$M_NOQUOTA;
IF (LOCK_STATUS[LCK_ID] = ..LOCK_ID) NEQ 0
THEN LOCK_FLAGS = LCK$M_CONVERT;

! Check that the file server process is running. If not, we cannot take
! out the normal cache lock because no one can respond to the blocking
! AST. For the normal cache lock, use PR mode, noqueue.
!

IF .MODE EQL 0
THEN
    BEGIN
    IF .XQP$GL_FILESERVER EQL 0
    THEN RETURN 0;
    LOCK_MODE = LCK$K_PRMODE;
    LOCK_FLAGS = .LOCK_FLAGS OR LCK$M_NOQUEUE;
    END;

! First take out the lock in process mode.
!

STATUS = $ENQ  (EFN    = EFN,
		LKMODE = .LOCK_MODE,
		FLAGS   = .LOCK_FLAGS,
		LKSB   = LOCK_STATUS,
		RESNAM = RESNAM_D,
		PARID  = .PARENT_ID,
		ASTADR = CONTINUE_THREAD,
		ASTPRM = .BASE
		);
IF NOT .STATUS
AND .STATUS NEQ SS$_NOTQUEUED
THEN
    IF .LOCK_FLAGS[LCK$V_CONVERT]
    THEN BUG_CHECK (XQPERR, FATAL, 'Unexpected lock manager error')
    ELSE ERR_EXIT (.STATUS);

IF .STATUS EQL SS$_NORMAL
THEN WAIT_FOR_AST ();

IF .STATUS
THEN
    BEGIN
    STATUS = .LOCK_STATUS[LCK_STS];
    IF NOT .STATUS
    THEN
	IF .LOCK_FLAGS[LCK$V_CONVERT]
	THEN BUG_CHECK (XQPERR, FATAL, 'Unexpected lock manager error')
	ELSE ERR_EXIT (.STATUS);
    LOCK_FLAGS = .LOCK_FLAGS OR LCK$M_CONVERT;

! If the lock needs to be system owned (normal cache lock and write
! access lock) now convert it.
!

    IF NOT .MODE
    THEN
	BEGIN
	LOCK_FLAGS = .LOCK_FLAGS OR LCK$M_CVTSYS;
	CACHE_TYPE = .LOCK_BASIS<0,24>;
	IF .CACHE_TYPE GTRU FIB$C_EXTENT_CACHE
	THEN CACHE_TYPE = FIB$C_QUOTA_CACHE;
	STATUS = $ENQ  (EFN    = EFN,
			LKMODE = .LOCK_MODE,
			FLAGS   = .LOCK_FLAGS,
			LKSB   = LOCK_STATUS,
			RESNAM = RESNAM_D,
			PARID  = .PARENT_ID,
			BLKAST = XQP$UNLOCK_CACHE,
			ASTPRM = .CURRENT_UCB OR .CACHE_TYPE
			);
	IF NOT .STATUS
	THEN
	    IF .LOCK_FLAGS[LCK$V_CONVERT]
	    THEN BUG_CHECK (XQPERR, FATAL, 'Unexpected lock manager error')
	    ELSE ERR_EXIT (.STATUS);
	END;
    END;

IF .STATUS
THEN .LOCK_ID = .LOCK_STATUS[LCK_ID];

.STATUS
END;					! End of routine CACHE_LOCK

GLOBAL ROUTINE DEQ_LOCK (LOCK_ID) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This is a central routine for doing simple dequeues of locks.
!	It bugchecks on error.
!
! CALLING SEQUENCE:
!	DEQ_LOCK (LOCK_ID)
!
! INPUT PARAMETERS:
!	LOCK_ID: ID of lock to release
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

IF NOT $DEQ (LKID = .LOCK_ID)
THEN BUG_CHECK (XQPERR, FATAL, 'Unexpected lock manager error');

END;					! End of routine DEQ_LOCK

END
ELUDOM
