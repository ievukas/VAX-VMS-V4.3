.IF DF RTPAD
	.TITLE	CTSETRT - RTPAD/CTERM SET CHARACTERISTICS
.IFF
	.TITLE	CTDSENSE - CTDRIVER SENSE MODE PROCESSING
.ENDC
	.IDENT	'V04-000'
	.ENABLE	SUPPRESSION
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; FACILITY:
;
;	CTERM Remote terminal protocol driver
;
; ABSTRACT:
;
;	This module is called to map a characteristics item list received
;	from the net into VMS terminal characteristics.
;
; ENVIRONMENT:
;
;	
;
;--
;
; AUTHOR: Jake VanNoy, CREATION DATE: 23-Aug-1982
;
; MODIFIED BY:
;
;
;	V03-003	JLV0336		Jake VanNoy		28-FEB-1984
;		Use constant names in SENSETAB table.
;
;	V03-002	JLV0288		Jake VanNoy		28-JUL-1983
;		Update symbols that identify characteristics.
;
;	V03-001	JLV0261		Jake VanNoy		26-MAY-1983
;		Change baud rate tables to new format.
;	
;**


	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$DCDEF
	$SSDEF
	$TTDEF
	$TT2DEF
	$TSADEF
	$UCBDEF			; for protocol errors

;
; MACROS:
;

.MACRO	CHAR	LABEL
	.WORD		char_type!char_count
	.WORD		LABEL-SENSE_ROUTINES
char_count = char_count + 1
.ENDM	CHAR

.MACRO	BAUDTAB	BPS
	.WORD	BPS
	.BYTE	TT$C_BAUD_'BPS'
.ENDM	BAUDTAB

.MACRO	TERMTAB	TERM,VALUE
	.BYTE	VALUE
	.ASCIC	/TERM/
.ENDM	TERMTAB

.MACRO	SENSETAB CHAR
	.WORD		char_type!char
.ENDM	SENSETAB


;
; EQUATED SYMBOLS:
;

physical = ch$c_physical@8		; 0 leftshifted 1 byte
logical  = ch$c_logical@8		; 1 leftshifted 1 byte
cterm	 = ch$c_cterm@8			; 2 leftshifted 1 byte

TT_BUF 	 = 0
TT_CHAR1 = 4
TT_CHAR2 = 8
TT_IOSB  = 0

;
; OWN STORAGE:
;

.IF DF RTPAD
	.PSECT RTPAD,NOWRT

	.EXTERNAL OUTBAND_NEW
.IFF
	.PSECT $$$115_DRIVER,LONG

.ENDC

SENSE_TABLE:

char_type = physical
char_count = 1
	CHAR	INPUT_SPEED		; 1
	CHAR	OUTPUT_SPEED		; 2
	CHAR	CHARACTER_SIZE		; 3
	CHAR	PARITY_ENABLE		; 4
	CHAR	PARITY_TYPE		; 5
	CHAR	MODEM_PRESENT		; 6
	CHAR	AUTOBAUD_DETECT		; 7
	CHAR	MANAGEMENT_GUARANTEED	; 8
	CHAR	SWITCH_CHAR_1		; 9
	CHAR	SWITCH_CHAR_2		; 10

char_type = logical
char_count = 1

	CHAR	MODE_WRITING_ALLOWED	; 1
	CHAR	TERMINAL_TYPE		; 2
	CHAR	TERMINAL_SUBTYPE	; 3
	CHAR	OUTPUT_FLOW_CONTROL	; 4
	CHAR	OUTPUT_PAGE_STOP	; 5
	CHAR	FLOW_CHAR_PASS_THRU	; 6
	CHAR	INPUT_FLOW_CONTROL	; 7
	CHAR	LOSS_NOTIFICATION	; 8
	CHAR	LINE_WIDTH		; 9
	CHAR	PAGE_LENGTH		; 10
	CHAR	STOP_LENGTH		; 11
	CHAR	CR_FILL			; 12
	CHAR	LF_FILL			; 13
	CHAR	WRAP			; 14
	CHAR	HORIZONTAL_TAB		; 15
	CHAR	VERTICAL_TAB		; 16
	CHAR	FORM_FEED		; 17

char_type = cterm
char_count = 1

	CHAR	IGNORE_INPUT		; 1
	CHAR	CHAR_ATTRIBUTES		; 2
	CHAR	CONTROL_O_PASS_THRU	; 3
	CHAR	RAISE_INPUT		; 4
	CHAR	NORMAL_ECHO		; 5
	CHAR	INPUT_ESCAPE_ENABLE	; 6
	CHAR	OUTPUT_ESCAPE_ENABLE	; 7
	CHAR	INPUT_COUNT_STATE	; 8
	CHAR	AUTO_PROMPT		; 9
	CHAR	ERROR_PROCESSING	; 10

	.WORD	-1			; End of list (any negative number)

SENSE_BAUD:				; Table must be in ascending order
	BAUDTAB	50
	BAUDTAB	75
	BAUDTAB	110
	BAUDTAB	134
	BAUDTAB	150
	BAUDTAB	300
	BAUDTAB	600
	BAUDTAB	1200
	BAUDTAB	1800
	BAUDTAB	2000
	BAUDTAB	2400
	BAUDTAB	3600
	BAUDTAB	4800
	BAUDTAB	7200
	BAUDTAB	9600
	BAUDTAB	19200
	.LONG	0

CT$AB_TERM_TABLE::			; Table is in order for most likely first
	TERMTAB	VT100,	TT$_VT100
	TERMTAB	VT200,	TT$_VT200_Series
	TERMTAB	VT101,	TT$_VT101
	TERMTAB	VT102,	TT$_VT102
	TERMTAB	VT105,	TT$_VT105
	TERMTAB	VT125,	TT$_VT125
	TERMTAB	VT131,	TT$_VT131
	TERMTAB	VT132,	TT$_VT132
	TERMTAB	VT52,	TT$_VT52
	TERMTAB	VT05,	TT$_VT05
	TERMTAB VK100,	TT$_VK100
	TERMTAB	VT173,	TT$_VT173
;	TERMTAB	TT$_FT1	
;	TERMTAB	TT$_FT2	
;	TERMTAB	TT$_FT3	
;	TERMTAB	TT$_FT4	
;	TERMTAB	TT$_FT5	
;	TERMTAB	TT$_FT6	
;	TERMTAB	TT$_FT7	
;	TERMTAB	TT$_FT8	
	TERMTAB	LA36,	TT$_LA36
	TERMTAB	LA12,	TT$_LA12
	TERMTAB	LA34,	TT$_LA34
	TERMTAB	LA38,	TT$_LA38
	TERMTAB	LA12,	TT$_LA12
	TERMTAB	LA100,	TT$_LA100
	TERMTAB	LA24,	TT$_LA24
	TERMTAB	LQP02,	TT$_LQP02
	TERMTAB	VT55,	TT$_VT55
	.BYTE	0

UNKNOWN_TT:	.ascic	/UNKNOWN/

.IF NDF RTPAD	; IF CTDRIVER...

CTP$AB_SENSEBUF::

	.BYTE		CTP$C_MT_READ_CHAR	; message type
	.BYTE		0			; flags

;
; Item list, for now, request everything.
;

char_type = physical

	SENSETAB	ch$c_ph_in_speed	; INPUT_SPEED
	SENSETAB	ch$c_ph_out_speed	; OUTPUT_SPEED
	SENSETAB	ch$c_ph_char_size	; CHARACTER_SIZE
	SENSETAB	ch$c_ph_parity_enable	; PARITY_ENABLE
	SENSETAB	ch$c_ph_parity_type	; PARITY_TYPE
	SENSETAB	ch$c_ph_modem_present	; MODEM_PRESENT
	SENSETAB	ch$c_ph_autobaud	; AUTOBAUD_DETECT
;;;	SENSETAB	ch$c_ph_manage_guar	; MANAGEMENT_GUARANTEED
;;;	SENSETAB	ch$c_ph_switch1		; SWITCH_CHAR_1
;;;	SENSETAB	ch$c_ph_switch2		; SWITCH_CHAR_2
;;;	SENSETAB	ch$c_ph_manage_ena	; MANAGEMENT_ENABLED

char_type = logical

	SENSETAB	ch$c_lg_mode_writing	; MODE_WRITING_ALLOWED
	SENSETAB	ch$c_lg_term_bits	; TERMINAL_TYPE
	SENSETAB	ch$c_lg_term_type	; TERMINAL_SUBTYPE
	SENSETAB	ch$c_lg_output_flow	; OUTPUT_FLOW_CONTROL
	SENSETAB	ch$c_lg_page_stop	; OUTPUT_PAGE_STOP
	SENSETAB	ch$c_lg_flow_char_pass	; FLOW_CHAR_PASS_THRU
	SENSETAB	ch$c_lg_input_flow	; INPUT_FLOW_CONTROL
	SENSETAB	ch$c_lg_loss_notif	; LOSS_NOTIFICATION
	SENSETAB	ch$c_lg_line_width	; LINE_WIDTH
	SENSETAB	ch$c_lg_page_length	; PAGE_LENGTH
	SENSETAB	ch$c_lg_stop_length	; STOP_LENGTH
	SENSETAB	ch$c_lg_cr_fill		; CR_FILL
	SENSETAB	ch$c_lg_lf_fill		; LF_FILL
	SENSETAB	ch$c_lg_wrap		; WRAP
	SENSETAB	ch$c_lg_hor_tab		; HORIZONTAL_TAB
	SENSETAB	ch$c_lg_vert_tab	; VERTICAL_TAB
	SENSETAB	ch$c_lg_form_feed	; FORM_FEED

char_type = cterm

	SENSETAB	ch$c_ct_ignore_input	; IGNORE_INPUT
;;;	SENSETAB	ch$c_ct_char_att	; CHAR_ATTRIBUTES
	SENSETAB	ch$c_ct_ctrlo_pass	; CONTROL_O_PASS_THRU
	SENSETAB	ch$c_ct_raise_input	; RAISE_INPUT
	SENSETAB	ch$c_ct_normal_echo	; NORMAL_ECHO
	SENSETAB	ch$c_ct_input_esc	; INPUT_ESCAPE_ENABLE
;;;	SENSETAB	ch$c_ct_output_esc	; OUTPUT_ESCAPE_ENABLE
	SENSETAB	ch$c_ct_input_count	; INPUT_COUNT_STATE
	SENSETAB	ch$c_ct_auto_prompt	; AUTO_PROMPT
	SENSETAB	ch$c_ct_error_processing ; ERROR_PROCESSING

CTP$K_SENSEBUF == .-CTP$AB_SENSEBUF		; Size

.ENDC
.nlist meb


.SBTTL	CT_POST_SENSE - Map TSA into VMS

;
; Must map entire set of characteristics returned into VMS sense mode data
;

; Input:
;	R2 - Address of CTP
;	R9 - Address of 12 byte buffer
;	R10 - Address of 8 byte buffer 
;
; Output: 
;	0(R9) - first longword of sense mode data
;	4(R9) - first longword of sense mode characteristics
;	8(R9) - second longword of sense mode characteristics
;
;	0(R10) - first longword of status
;	4(R10) - second longword of status
;
; Characteristics returned: (R9)
;	
;	+-------+-------+-------+-------+
;	|  page width	| type	| class	|
;	+-------+-------+-------+-------+
;	|length	|     characteristics	|
;	+-------+-------+-------+-------+
;	|	characteristics		|
; 	+-------+-------+-------+-------+
;
; IOSB: (R10)
;	+-------+-------+-------+-------+
;	|R speed|T speed|     status	|
;	+-------+-------+-------+-------+
;	|   0	|parity	|LF fill|CR fill|
;	+-------+-------+-------+-------+
;	
;

.IF DF RTPAD
CT_CHAR_MSG::			; RTPAD ENTRY
.IFF
CT_POST_SENSE::			; CTDRIVER ENTRY
.ENDC

	MOVZWL	CTP$W_MSGSIZE(R2),R1	; Fetch size of buffer
	MOVAB	CTP$W_CH_PARAM(R2),R2	; Set address of first characteristic	
	ADDL3	R1,R2,-(SP)		; Save end address on stack
	SUBL2	#3,(SP)		; *** fudge, check this **

	MOVB	#DC$_TERM,TT_BUF(R9)	; Set terminal class
	MOVW	#SS$_NORMAL,TT_IOSB(R10); Set status

10$:	
	CMPL	R2,(SP)			; Hit end of list yet?
	BGEQ	25$			; Branch if so
	MOVZWL	(R2)+,R6		; Get parameter
	MOVAB	SENSE_TABLE,R7		; Get table address
20$:
	CMPW	R6,(R7)+		; Compare to table entry
	BEQL	30$			; Branch if match found
	TSTW	(R7)+			; Advance pointer past routine
	BGEQ	20$			; Loop if greater than or equal to zero

	; PANIC				; 'invalid sense mode returned'
	MINOR_ERROR			; Increment error count, then exit
25$:
	TSTL	(SP)+			; throw away end address
	BRW	POST_SENSE_EXIT		; exit code
;
; Dispatch to routine
;
30$:
	MOVAB	SENSE_ROUTINES,R6	; Base
	MOVZWL	(R7),R7			; get routine address
	ADDL2	R6,R7			; Add offset to base for routine address
	JSB	(R7)			; jsb to routine
	BRB	10$			; Do next parameter

;
; All these routines have R0,R1,R4,R6-R8 as scratch
;


SENSE_ROUTINES:

; physical

INPUT_SPEED:				; physical 1
	MOVW	(R2)+,R0		; Get speed
	BSBB	GET_SPEED		; map into TT$C_BAUD_xxxx
	MOVB	R0,TT_IOSB+3(R10)	; set receive speed
	RSB				; Return

OUTPUT_SPEED:				; physical 2
	MOVW	(R2)+,R0		; Get speed
	BSBB	GET_SPEED		; map into TT$C_BAUD_xxxx
	MOVB	R0,TT_IOSB+2(R10)	; set transmit speed
	RSB				; Return
;
; Local routine to map speed into TT$C_BAUD rates
;
; Input: 
;	R0 - baud rate in BPS
;
; Output:
;	R0 - Baud rate in TT$C_BAUD_xxx terms
;
GET_SPEED:
	MOVAB	SENSE_BAUD,R1		; Get table
110$:
	CMPW	R0,(R1)+		; compare
	BLEQ	120$
	TSTB	(R1)+			; Advance
	BNEQ	110$			; Branch if not zero
	MOVB	#TT$C_BAUD_19200,R0	; Assume 19200 if > 19200
	RSB				; Return
120$:	MOVB	(R1),R0			; Fetch baud rate symbol value
	RSB				; Return

CHARACTER_SIZE:				; physical 3
.IF DF RTPAD
	BICL	#TT$M_EIGHTBIT,-
		TT_CHAR1(R9)		; Set characteristic
.ENDC
	CMPW	#7,(R2)+		; Character size
	BGEQ	10$			; exit if less than or equal to 7
	BISL	#TT$M_EIGHTBIT,-
		TT_CHAR1(R9)		; Set characteristic
10$:	RSB				; Return

PARITY_ENABLE:				; physical 4
.IF DF RTPAD
	BICB	#TT$M_PARITY,-
		TT_IOSB+6(R10)		; Set parity enabled
.ENDC
	MOVB	(R2)+,R0		; Get boolean
	BLBC	R0,10$			; Branch if not enabled
	BISB	#TT$M_PARITY,-
		TT_IOSB+6(R10)		; Set parity enabled
10$:	RSB				; Return

PARITY_TYPE:				; physical 5
.IF DF RTPAD
	BICB	#TT$M_ODD,-
		TT_IOSB+6(R10)		; Assume even parity
.ENDC
	MOVZWL	(R2)+,R0		; Get parity number
	CMPW	#ch$c_parity_odd,R0	; Odd?
	BNEQ	10$			; If not, exit
	BISB	#TT$M_ODD,-
		TT_IOSB+6(R10)		; Set odd parity
10$:	RSB				; Return

MODEM_PRESENT:				; physical 6
.IF DF RTPAD
	BICL	#<TT$M_MODEM!-
		TT$M_REMOTE>,TT_CHAR1(R9) ; Set modem and remote bits
.ENDC
	MOVB	(R2)+,R0		; Get Boolean
	BLBC	R0,10$			; Branch if not enabled
	BISL	#<TT$M_MODEM!-
		TT$M_REMOTE>,TT_CHAR1(R9) ; Set modem and remote bits
10$:	RSB				; Return

AUTOBAUD_DETECT:			; physical 7
.IF DF RTPAD
	BICL	#TT2$M_AUTOBAUD,-
		TT_CHAR2(R9)		; Set autobaud
.ENDC
	MOVB	(R2)+,R0		; Get Boolean
	BLBC	R0,10$			; Branch if not enabled
	BISL	#TT2$M_AUTOBAUD,-
		TT_CHAR2(R9)		; Set autobaud
10$:	RSB				; Return

MANAGEMENT_GUARANTEED:			; physical 8
	MOVB	(R2)+,R0		; Get Boolean
	BLBC	R0,10$			; Branch if not enabled
10$:	RSB				; Return

SWITCH_CHAR_1:				; physical 9
	BSBW	IGNORE_STRING		; Ignore this string data
	RSB				; Return

SWITCH_CHAR_2:				; physical 10
	BSBW	IGNORE_STRING		; Ignore this string data
	RSB				; Return


; logical 

MODE_WRITING_ALLOWED:			; logical 1
	MOVB	(R2)+,R0		; Get Boolean
	BLBC	R0,10$			; Branch if not enabled
10$:	RSB				; Return

TERMINAL_TYPE:				; logical 2

; bit mask is:
;	0 - Unknown/known
;	1 - scope/hardcopy

	MOVZWL	(R2)+,R0		; Get characteristic
	BISL	#TT$M_SCOPE,-
		TT_CHAR1(R9)		; Set scope
	BBS	#CTP$V_CH_SCOPE,R0,10$	; Branch if scope
	BICL	#TT$M_SCOPE,-
		TT_CHAR1(R9)		; Clear scope

; *** unknown?

10$:	BBS	#CTP$V_CH_KNOWN,R0,20$	; Branch if known
	MOVB	#TT$_UNKNOWN,TT_BUF+1(R9) ; Set terminal type
20$:	RSB				; Return

TERMINAL_SUBTYPE:			; logical 3
	MOVZBL	(R2)+,R6		; Get length of string
	BNEQ	10$			; Continue if not 0
	RSB				; Return
10$:
	MOVL	R2,R7			; Get address of string
	ADDL2	R6,R2			; Update pointer
	PUSHR	#^M<R2,R3,R10>		; Save registers
	MOVAB	CT$AB_TERM_TABLE,R8	; Address of table
	CLRL	R4			; Zero length
20$:	
	ADDL2	R4,R8			; Get next entry
	MOVB	(R8)+,TT_BUF+1(R9)	; Set terminal type
	BEQL	30$			; branch if end of list
	MOVZBL	(R8)+,R4		; Get length
	CMPB	R6,R4			; compare lengths
	BNEQ	20$			; not equal, loop
	CMPC3	R6,(R7),(R8)		; Compare
	BNEQ	20$			; Loop if not equal

; Terminal type match

	ASSUME  TT$_UNKNOWN EQ 0	; assume for end of table code 
30$:
	POPR	#^M<R2,R3,R10>		; Restore registers

	RSB				; Return


OUTPUT_FLOW_CONTROL:			; logical 4
.IF DF RTPAD
	BICL	#TT$M_TTSYNC,-
		TT_CHAR1(R9)		; Set tt sync
.ENDC
	MOVB	(R2)+,R0		; Get Boolean
	BLBC	R0,10$			; Branch if not enabled
	BISL	#TT$M_TTSYNC,-
		TT_CHAR1(R9)		; Set tt sync
10$:	RSB				; Return

OUTPUT_PAGE_STOP:			; logical 5
.IF DF RTPAD
	BICL	#TT$M_HOLDSCREEN,-
		TT_CHAR1(R9)		; Set hold screen
.ENDC
	MOVB	(R2)+,R0		; Get Boolean
	BLBC	R0,10$			; Branch if not enabled
	BISL	#TT$M_HOLDSCREEN,-
		TT_CHAR1(R9)		; Set hold screen
10$:	RSB				; Return

FLOW_CHAR_PASS_THRU:			; logical 6
	MOVB	(R2)+,R0		; Get Boolean
	BLBC	R0,10$			; Branch if not enabled
10$:	RSB				; Return

INPUT_FLOW_CONTROL:			; logical 7
.IF DF RTPAD
	BICL	#TT$M_HOSTSYNC,-
		TT_CHAR1(R9)		; Set hostsync
.ENDC
	MOVB	(R2)+,R0		; Get Boolean
	BLBC	R0,10$			; Branch if not enabled
	BISL	#TT$M_HOSTSYNC,-
		TT_CHAR1(R9)		; Set hostsync
10$:	RSB				; Return

LOSS_NOTIFICATION:			; logical 8
	MOVB	(R2)+,R0		; Get Boolean
	BLBC	R0,10$			; Branch if not enabled
10$:	RSB				; Bell on loss data?

LINE_WIDTH:				; logical 9
	MOVW	(R2)+,TT_BUF+2(R9)	; Line width
	RSB				; Return

PAGE_LENGTH:				; logical 10
	CVTWB	(R2)+,TT_CHAR1+3(R9)	; Page length
	RSB				; Return

STOP_LENGTH:				; logical 11
	TSTW	(R2)+			; Ignore for now
	RSB				; Return

CR_FILL:				; logical 12
.IF DF RTPAD
	BICL	#TT$M_CRFILL,-
		TT_CHAR1(R9)
.ENDC
	CVTWB	(R2)+,TT_IOSB+4(R10)
	BEQL	10$			; Branch if zero
	BISL	#TT$M_CRFILL,-
		TT_CHAR1(R9)
10$:	RSB				; Return

LF_FILL:				; logical 13
.IF DF RTPAD
	BICL	#TT$M_LFFILL,-
		TT_CHAR1(R9)
.ENDC
	CVTWB	(R2)+,TT_IOSB+5(R10)
	BEQL	10$			; Branch if zero
	BISL	#TT$M_LFFILL,-
		TT_CHAR1(R9)
10$:	RSB				; Return

WRAP:					; logical 14
.IF DF RTPAD
	BICL	#TT$M_WRAP,-
		TT_CHAR1(R9)		; set wrap
.ENDC
	CMPW	#3,(R2)+		; Get wrap (value 1 to 4)
	BGEQ	10$			; if 3 or less, no wrap
	BISL	#TT$M_WRAP,-
		TT_CHAR1(R9)		; set wrap
10$:	RSB				; Return

HORIZONTAL_TAB:				; logical 15
.IF DF RTPAD
	BICL	#TT$M_MECHTAB,-
		TT_CHAR1(R9)		; Set mechtab
.ENDC
	CMPW	#1,(R2)+		; mechtab?
	BNEQ	10$			; Branch if no
	BISL	#TT$M_MECHTAB,-
		TT_CHAR1(R9)		; Set mechtab
10$:	RSB				; Return

VERTICAL_TAB:				; logical 16
	TSTW	(R2)+			; ignore
	RSB				; Return

FORM_FEED:				; logical 17
.IF DF RTPAD
	BICL	#TT$M_MECHFORM,-
		TT_CHAR1(R9)		; Set mechform
.ENDC
	CMPW	#1,(R2)+		; mech form?
	BNEQ	10$			; Branch if no
	BISL	#TT$M_MECHFORM,-
		TT_CHAR1(R9)		; Set mechform
10$:	RSB				; Return

; cterm 

IGNORE_INPUT:				; cterm 1
	MOVB	(R2)+,R0		; Get Boolean
	BLBC	R0,10$			; Branch if not enabled
10$:	RSB				; Return	

CHAR_ATTRIBUTES:			; cterm 2

.IF DF RTPAD

	MOVAB	OUTBAND_NEW,R0		; Get temporary mask
	MOVZBL	(R2)+,R1		; get character
	MOVZBL	(R2)+,R6		; Get mask
	MOVZBL	(R2)+,R7		; Get attribute
	CLRL	R4			; Clear
	BBSS	R1,R4,5$		; turn character into mask 
5$:
	EXTZV	#CTP$V_CH_OO,-
		#CTP$S_CH_OO,R6,R8	; Fetch isolate mask
	CMPB	#CTP$M_CH_OO,R8		; Must be full mask
	BNEQ	100$			; exit *** - other things to handle here

	EXTZV	#CTP$V_CH_OO,-
		#CTP$S_CH_OO,R7,R8	; Fetch attributes
	CMPB	#CTP$C_CH_CANCEL,R8	; Cancel?
	BNEQ	10$			;  br if no
	BICL	R4,OOB_EXCLUDE(R0)	; clear them all...
	BICL	R4,OOB_INCLUDE(R0)
	BICL	R4,OOB_ABORT(R0)
	BRB	100$
10$:
	CMPB	#CTP$C_CH_ICLEAR,R8	; immediate clear?
	BEQL	20$			; br if yes
	CMPB	#CTP$C_CH_DCLEAR,R8	; deferred clear?
	BNEQ	30$			; br if no
20$:	
	;
	; set up abort out of band
	;
	BISL	R4,OOB_ABORT(R0)	; Set abort flag
	BRB	100$
30$:
	CMPB	#CTP$C_CH_HELLO,R8	; hello?
	BNEQ	100$			; no, (sanity check really)
	BBC	#CTP$V_CH_I,R6,40$ 	; Branch if include not specified
	BBC	#CTP$V_CH_I,R7,40$ 	; Branch if include not required
	BISL	R4,OOB_INCLUDE(R0)	; Set include bit
	BRB	100$
40$:
	BISL	R4,OOB_EXCLUDE(R0)	; set exclude bit
;
; Handle out-of-band discard		(D)
;
100$:	
	BBC	#CTP$V_CH_D,R6,200$	; Skip if not in select mask
	BICL	R4,OOB_DISCARD(R0)	; Assume no discard output
	BBC	#CTP$V_CH_D,R7,200$	; Skip if not in select mask
	BISL	R4,OOB_DISCARD(R0)	; Set discard output
200$:	
;
; Handle control character echoing	(EE)
;
	EXTZV	#CTP$V_CH_EE,-
		#CTP$S_CH_EE,R6,R8	; Fetch isolate mask
	CMPB	#3,R8			; specified?
	BNEQ	300$			; nope
	BICL	R4,OOB_ECHO(R0)		; assume no echo (like ^T)
	EXTZV	#CTP$V_CH_EE,-
		#CTP$S_CH_EE,R7,R8	; Fetch real data
	CMPB	#CTP$C_CH_ECHONONE,R8	; echo none?
	BEQL	300$			; yes, continue
	CMPB	#CTP$C_CH_ECHOSTANDARD,R8	; echo STANDARD?
	BNEQ	300$			; branch if other...
	BISL	R4,OOB_ECHO(R0)		; set standard echo  (like ^C)
300$:
;
; *** code not done for:
;		enable/disable special character (F)

	RSB				; Exit

.IFF	; CTDRIVER

	ADDL	#3,R2			; Skip (should never really get here)
	RSB

.ENDC

CONTROL_O_PASS_THRU:			; cterm 3
	MOVB	(R2)+,R0		; Get Boolean
	BLBC	R0,10$			; Branch if not enabled
10$:	RSB				; Return	

RAISE_INPUT:				; cterm 4
.IF DF RTPAD
	BICL	#TT$M_LOWER,-
		TT_CHAR1(R9)		; Set convert lower
.ENDC
	MOVB	(R2)+,R0		; Get Boolean
	BLBS	R0,10$			; Branch if not enabled
	BISL	#TT$M_LOWER,-
		TT_CHAR1(R9)		; Set convert lower
10$:	RSB				; Return	

NORMAL_ECHO:				; cterm 5
.IF DF RTPAD
	BICL	#TT$M_NOECHO,-
		TT_CHAR1(R9)		; Set noecho
.ENDC
	MOVB	(R2)+,R0		; Get Boolean
	BLBS	R0,10$			; Branch if enabled (note opposite sense)
	BISL	#TT$M_NOECHO,-
		TT_CHAR1(R9)		; Set noecho
10$:	RSB				; Return

INPUT_ESCAPE_ENABLE:			; cterm 6
OUTPUT_ESCAPE_ENABLE:			; cterm 7
.IF DF RTPAD
	BICL	#TT$M_ESCAPE,-
		TT_CHAR1(R9)
.ENDC
	MOVB	(R2)+,R0		; Get Boolean
	BLBC	R0,10$			; Branch if not enabled
	BISL	#TT$M_ESCAPE,-
		TT_CHAR1(R9)
10$:	RSB				; Return	

INPUT_COUNT_STATE:			; cterm 8
	TSTW	(R2)+			; Ignore
	RSB

AUTO_PROMPT:				; cterm 9
.IF DF RTPAD
	BICL	#TT$M_SCRIPT,-
		TT_CHAR1(R9)
.ENDC
	MOVB	(R2)+,R0		; Get Boolean
	BLBC	R0,10$			; Branch if not enabled
	BISL	#TT$M_SCRIPT,-
		TT_CHAR1(R9)
10$:	RSB				; Return	

ERROR_PROCESSING:			; cterm 10
	MOVB	(R2)+,R0		; Get Boolean
	BLBC	R0,10$			; Branch if not enabled
10$:	RSB				; Return	


IGNORE_STRING:
	MOVZBL	(R2)+,R0		; Get length of string
	ADDL2	R0,R2			; Add to address
	RSB


POST_SENSE_EXIT:
	
	RSB

.end	
