	.title	pli$char - pl1 runtime character routines 
	.ident	/1-002/					; Edit CGN1003
							; Edit WHM1002
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; facility:
;
;	VAX/VMS PL1 runtime library.
;
; abstract:
;
;	This module contains runtime routines for character built-in functions.
;
; author: r. heinen 26-feb-1979
;
; Modifications:
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;	1-003	Add the pli$search routine to provide runtime support for
;		the PL/I search builtin function.
;
;--
 
;
; external definitions
;
 
	$defdat				; define data types
;
; local data
;
 
	rtshare
	.page
	.sbttl	subroutines
;++
; set_opnd1 - setup operand one
;
; functional description:
;
; This routine interprets operand 1 and it's dope vector and returns
; the information.
;
; inputs:
;
;	common stack frame
;
; outputs:
;
;	r3 = size of operand
;	r4 = address of the data
;--
set_opnd1:
	movl	8(ap),r0		; address dope vector
	movl	4(ap),r4		; address string
	cmpw	#dat_k_char,(r0)+	; character type?
	beql	10$			; if eql then character
	movzwl	(r4)+,r3		; get size and address string
	rsb
10$:	movzwl	(r0),r3			; get size and address data
	rsb

;++
; set_opnd2 - setup operand two
;
; functional description:
;
; This routine interprets operand 2 and it's dope vector and returns
; the information.
;
; inputs:
;
;	common stack frame
;
; outputs:
;
;	r5 = size of operand
;	r6 = address of the data
;--
set_opnd2:
	movl	16(ap),r0		; address dope vector
	movl	12(ap),r6		; address string
	cmpw	#dat_k_char,(r0)+	; character type?
	beql	10$			; if eql then character
	movzwl	(r6)+,r5		; get size and address string
	rsb
10$:	movzwl	(r0),r5			; get size and address data
	rsb


;++
; set_opnd3 - setup operand three
;
; functional description:
;
; This routine interprets operand 3 and it's dope vector and returns
; the information.
;
; inputs:
;
;	common stack frame
;
; outputs:
;
;	r7 = size of operand
;	r8 = address of the data
;--
set_opnd3:
	movl	24(ap),r0		; address dope vector
	movl	20(ap),r8		; address string
	cmpw	#dat_k_char,(r0)+	; character type?
	beql	10$			; if eql then character
	movzwl	(r8)+,r7		; get size and address string
	rsb
10$:	movzwl	(r0),r7			; get size and address data
	rsb

	.sbttl	pli$movtranchar - move translated 
;++
; pli$movtranchar - move translated characters
;
; functional description:
;
; This routine augments the in-line code for the translate bif.
; The pl1 translate bif is more functional than the movtc instruction.
;
; string1 = translate(string2,string3,string4);
;
;		(two operand translate bifs are done by inline code)
;
;
;	string1(i) = substr(string3,index(string4,string2(i))
;
; inputs:
;
;	r1 = address to return string of size 4(ap)
;
;	0(ap) = 6
;	4(ap) = address of source
;	8(ap) = address of source dope
;	12(ap) = address of the translate table
;	16(ap) = address of translate table dope
;	20(ap) = address of the translate string
;	24(ap) = address of the translate string dope
;
; outputs:
;
;	result string is filled
;
;--
	.entry pli$movtranchar,^m<r2,r3,r4,r5,r6,r7,r8>
	movl	r1,r2			; save target address
	bsbw	set_opnd1		; setup operand 1
	bsbw	set_opnd2		; setup operand 2
	bsbw	set_opnd3		; setup operand 3
10$:	decl	r3			; count string
	blss	30$			; br if done
	locc	(r4)+,r7,(r8)		; look for character in table
	beql	20$			; if eql then not found
	subl3	r0,r7,r0		; get offset in table
	cmpw	r0,r5			; in range?
	blssu	15$			; if gtru then insert fill
	movb	#^a/ /,(r2)+		; insert character in output
	brb	10$			; continue
15$:	movb	(r6)[r0],(r2)+		; insert in output
	brb	10$			; continue
20$:	movb	-1(r4),(r2)+		; insert source string char
	brb	10$			; continue
30$:	ret
	.page
	.sbttl	pli$verify - verify built-in function
;++
; pli$verify - pl1 verify built-in function
;
; functional description:
;
; This routine performs the verfiy built-in function.
; 
; fixbin = verify(string1,string2);
;
;	fixbin = 0 if for each string1(i), string1(i) is in string2.
;	fixbin = i for the lowest i such that string1(i) is not in string2.
;
; inputs:
;
;	0(ap) = 4
;	4(ap) = source 1 address
;	8(ap) = address of the dope for source 1
;	12(ap) = address of source 2
;	16(ap) = address of the dope for source 2
;
; outputs:
;
;	r0 = index
;--
	.entry pli$verify,^m<r2,r3,r4,r5,r6>
	bsbw	set_opnd1		; setup operand 1
	bsbw	set_opnd2		; setup operand 2
	pushl	r4			; save string starting address
10$:	decl	r3			; adjust count
	blss	20$			; if lss then all match, fixbin = 0
	locc	(r4)+,r5,(r6)		; look for next character
	bneq	10$			; if found continue
	subl3	(sp),r4,r0		; calc index
	ret
20$:	clrl	r0			; return 
	ret				;
	.page
	.sbttl	pli$search - search built-in function
;++
; pli$search - pl1 search built-in function
;
; functional description:
;
; This routine performs the search built-in function.
; 
; fixbin = search(string1,string2);
;
;	fixbin = 0 if for each string1(i), no string1(i) is in string2.
;	fixbin = i for the lowest i such that string1(i) is in string2.
;
; inputs:
;
;	0(ap) = 4
;	4(ap) = source 1 address
;	8(ap) = address of the dope for source 1
;	12(ap) = address of source 2
;	16(ap) = address of the dope for source 2
;
; outputs:
;
;	r0 = index
;--
	.entry pli$search,^m<r2,r3,r4,r5,r6>
	bsbw	set_opnd1		; setup operand 1
	bsbw	set_opnd2		; setup operand 2
	pushl	r4			; save string starting address
10$:	decl	r3			; adjust count
	blss	20$			; if lss then none match, fixbin = 0
	locc	(r4)+,r5,(r6)		; look for next character
	beql	10$			; if not found continue
	subl3	(sp),r4,r0		; calc index
	ret
20$:	clrl	r0			; return 
	ret				;

	.end
