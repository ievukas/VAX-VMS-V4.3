MODULE BAS$FORMAT (		! Format a number by BASIC FORMAT$ function
		IDENT = '1-006'	! File: BASFORMAT.B32	EDIT:PL1006
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!


!++
! FACILITY: BASIC support library
!
! ABSTRACT:
!
!	Create a string by formatting a number according to the semantics of
!	the PRINT USING statement.
!
! ENVIRONMENT: User mode, AST level or not or mixed
!
! AUTHOR: R. Will,  CREATION DATE: 15-May-79
!
! MODIFIED BY:
!
! 	R. Will, 15-May-79: VERSION 01
! 01	- original
! 1-002 - Always call format interpreter with destination string.  RW  18-Jul-79
! 1-003 - String cleanup.  Don't use $STR$ macros.  RW  29-Oct-79
! 1-004 - For BASIC V2.0, enable FORMAT$ to be able to take any type of 
!	  elements, not just numeric.  For this enhancement we need a new 
!	  routine : BAS$FORMAT_T.   FM 11-JUL-81
! 1-005 - Add entry points for g and h floating.  PL 3-Sep-81
! 1-006 - Add entry point for packed decimal.  PLL 19-Jan-82
!--
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

REQUIRE 'RTLIN:BASLNK';			! Get linkage for scaling

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$FORMAT_F : NOVALUE,		! Format a floating number using PRINT
					! USING semantics
    BAS$FORMAT_D : NOVALUE, 		! Format a double floating number
					! using PRINT USING semantics
    BAS$FORMAT_T : NOVALUE,		! Format a string using PRINT
					! USING semantics
    BAS$FORMAT_G : NOVALUE,		! Format a g float number
					! using PRINT USING semantics
    BAS$FORMAT_H : NOVALUE,		! Format an h float number
					! using PRINT USING semantics
    BAS$FORMAT_P : NOVALUE;		! Format a decimal number
					! using PRINT USING semantics

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';		! Declare PSECTS code
REQUIRE 'RTLIN:BASFRAME';		! Define offsets in BASIC frame
LIBRARY 'RTLSTARLE';			! STARLET library for macros and symbl

!
! MACROS: NONE
!

!
! EQUATED SYMBOLS: NONE
!

!
! PSECT DECLARATIONS
!

DECLARE_PSECTS (BAS);

!
! OWN STORAGE: NONE
!

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    BAS$$FORMAT_INT : NOVALUE;		! BASIC format interpreter

GLOBAL ROUTINE BAS$FORMAT_F (			! Format a # like print using
			     DEST_DESC,		! Pointer to dest string desc
			     VALUE,		! Value of floating number
			     FORMAT_DESC)	! Pointer to format str desc
			    : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Format a floating number according to the format in the format
!	string and the rules of PRINT USING.  To be sure that PRINT USING
!	and FORMAT$ are compatible, all formatting will be done by one
!	routine, BAS$$FORMAT_INT.  
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to descriptor of output string
!	VALUE.rf.v		value of floating number to be formatted
!	FORMAT_DESC.rt.dx	pointer to descriptor of format string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine may allocate a temporary dynamic string and may cause
!	any of STR$GET1's errors to be signalled.  This routine also may
!	call STR$COPY which may signal errors.  This routine also calls
!	the BASIC format interpreter which may allocate space to the
!	destination string.
!
!--

    BEGIN

    LOCAL
	RET_TEMP;		! Not used by this routine, but required by
				! format interpreter

    MAP
	FORMAT_DESC: REF BLOCK [8, BYTE];

    MAP
	DEST_DESC: REF BLOCK [8, BYTE];

    BAS$$FORMAT_INT (				! call formatter
	VALUE,					! addr of value
	FORMAT_DESC [0,0,0,0],			! descr of format str
	DSC$K_DTYPE_F,				! floating value
	DEST_DESC [0,0,0,0],			! return string
	RET_TEMP	);			! dummy arg

    RETURN;

    END;			!End of BAS$FORMAT_F

GLOBAL ROUTINE BAS$FORMAT_D (			! Format double like print using
			     DEST_DESC,		! Pointer to dest string desc
			     VALUE1,		! 1st longword of double value
			     VALUE2,		! 2nd longword of double value
			     FORMAT_DESC)	! Pointer to format str desc
			    : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Format a double precision number according to the format in the format
!	string and the rules of PRINT USING.  To be sure that PRINT USING
!	and FORMAT$ are compatible, all formatting will be done by one
!	routine, BAS$$FORMAT_INT.  
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to descriptor of output string
!	VALUE.rd.v		value of double number to be formatted
!	FORMAT_DESC.rt.dx	pointer to descriptor of format string
!
! IMPLICIT INPUTS:
!
!	Scale for double in the callers BASIC frame
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine calls the BASIC format interpreter which may allocate
!	space to the destination string.
!
!--

    BEGIN

    LOCAL
	RET_TEMP;		! Not used by this routine, but required by
				! format interpreter
    MAP
	FORMAT_DESC: REF BLOCK [8, BYTE],
	DEST_DESC: REF BLOCK [8, BYTE];

    BAS$$FORMAT_INT (				! call formatter
	VALUE1,					! addr of value
	FORMAT_DESC [0,0,0,0],			! descr of format str
	DSC$K_DTYPE_D,				! floating value
	DEST_DESC [0,0,0,0],			! return string
	RET_TEMP,				! dummy arg
	$BAS$SCALE	);			! scale

    RETURN;

    END;			!End of BAS$FORMAT_D

GLOBAL ROUTINE BAS$FORMAT_T (			! Format a string with print using
			     DEST_DESC,		! Pointer to dest string desc
			     ELEM_DESC,		! Pointer to string element's descriptor.
			     FORMAT_DESC)	! Pointer to format str desc
			    : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Format a string according to the format in the format
!	string and the rules of PRINT USING.  To be sure that PRINT USING
!	and FORMAT$ are compatible, all formatting will be done by one
!	routine, BAS$$FORMAT_INT.  
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to descriptor of output string
!	ELEM_DESC.rt.dx		pointer to descriptor of element passed
!	FORMAT_DESC.rt.dx	pointer to descriptor of format string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine may allocate a temporary dynamic string and may cause
!	any of STR$GET1's errors to be signalled.  This routine also may
!	call STR$COPY which may signal errors.  This routine also calls
!	the BASIC format interpreter which may allocate space to the
!	destination string.
!
!--

    BEGIN

    LOCAL
	RET_TEMP;		! Not used by this routine, but required by
				! format interpreter

    MAP
	FORMAT_DESC: REF BLOCK [8, BYTE];

    MAP
	DEST_DESC: REF BLOCK [8, BYTE];

    MAP
	ELEM_DESC: REF BLOCK [8, BYTE];

    BAS$$FORMAT_INT (				! call formatter
	ELEM_DESC [0,0,0,0],			! pointer to element's desc.
	FORMAT_DESC [0,0,0,0],			! descr of format str
	DSC$K_DTYPE_T,				! string
	DEST_DESC [0,0,0,0],			! return string
	RET_TEMP	);			! dummy arg

    RETURN;

    END;			!End of BAS$FORMAT_F

GLOBAL ROUTINE BAS$FORMAT_G (			! Format g float like print using
			     DEST_DESC,		! Pointer to dest string desc
			     VALUE1,		! 1st longword of g float value
			     VALUE2,		! 2nd longword of g float value
			     FORMAT_DESC)	! Pointer to format str desc
			    : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Format a g floating number according to the format in the format
!	string and the rules of PRINT USING.  To be sure that PRINT USING
!	and FORMAT$ are compatible, all formatting will be done by one
!	routine, BAS$$FORMAT_INT.  
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to descriptor of output string
!	VALUE.rg.v		value of g float number to be formatted
!	FORMAT_DESC.rt.dx	pointer to descriptor of format string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine calls the BASIC format interpreter which may allocate
!	space to the destination string.
!
!--

    BEGIN

    LOCAL
	RET_TEMP;		! Not used by this routine, but required by
				! format interpreter
    MAP
	FORMAT_DESC: REF BLOCK [8, BYTE],
	DEST_DESC: REF BLOCK [8, BYTE];

    BAS$$FORMAT_INT (				! call formatter
	VALUE1,					! addr of value
	FORMAT_DESC [0,0,0,0],			! descr of format str
	DSC$K_DTYPE_G,				! g floating value
	DEST_DESC [0,0,0,0],			! return string
	RET_TEMP,				! dummy arg
	0);					! scale

    RETURN;

    END;			!End of BAS$FORMAT_G

GLOBAL ROUTINE BAS$FORMAT_H (			! Format h float like print using
			     DEST_DESC,		! Pointer to dest string desc
			     VALUE1,		! 1st longword of h float value
			     VALUE2,		! 2nd longword of h float value
			     VALUE3,		! 3rd longword of h float value
			     VALUE4,		! 4th longword of h float value
			     FORMAT_DESC)	! Pointer to format str desc
			    : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Format an h floating number according to the format in the format
!	string and the rules of PRINT USING.  To be sure that PRINT USING
!	and FORMAT$ are compatible, all formatting will be done by one
!	routine, BAS$$FORMAT_INT.  
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to descriptor of output string
!	VALUE.rh.v		value of h float number to be formatted
!	FORMAT_DESC.rt.dx	pointer to descriptor of format string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine calls the BASIC format interpreter which may allocate
!	space to the destination string.
!
!--

    BEGIN

    LOCAL
	RET_TEMP;		! Not used by this routine, but required by
				! format interpreter
    MAP
	FORMAT_DESC: REF BLOCK [8, BYTE],
	DEST_DESC: REF BLOCK [8, BYTE];

    BAS$$FORMAT_INT (				! call formatter
	VALUE1,					! addr of value
	FORMAT_DESC [0,0,0,0],			! descr of format str
	DSC$K_DTYPE_H,				! h floating value
	DEST_DESC [0,0,0,0],			! return string
	RET_TEMP,				! dummy arg
	0);					! scale

    RETURN;

    END;			!End of BAS$FORMAT_H

GLOBAL ROUTINE BAS$FORMAT_P (			! Format a # like print using
			     DEST_DESC,		! Pointer to dest string desc
			     VALUE,		! Pointer to decimal desc
			     FORMAT_DESC)	! Pointer to format str desc
			    : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Format a decimal number according to the format in the format
!	string and the rules of PRINT USING.  To be sure that PRINT USING
!	and FORMAT$ are compatible, all formatting will be done by one
!	routine, BAS$$FORMAT_INT.  
!
! FORMAL PARAMETERS:
!
!	DEST_DESC.wt.dx		pointer to descriptor of output string
!	VALUE.rp.dsd		pointer to descriptor of decimal number
!	FORMAT_DESC.rt.dx	pointer to descriptor of format string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	This routine may allocate a temporary dynamic string and may cause
!	any of STR$GET1's errors to be signalled.  This routine also may
!	call STR$COPY which may signal errors.  This routine also calls
!	the BASIC format interpreter which may allocate space to the
!	destination string.
!
!--

    BEGIN

    LOCAL
	RET_TEMP;		! Not used by this routine, but required by
				! format interpreter

    MAP
	FORMAT_DESC: REF BLOCK [8, BYTE],
	VALUE : REF BLOCK [12,BYTE];

    MAP
	DEST_DESC: REF BLOCK [8, BYTE];

    BAS$$FORMAT_INT (				! call formatter
	.VALUE,					! addr of value
	FORMAT_DESC [0,0,0,0],			! descr of format str
	DSC$K_DTYPE_P,				! decimal value
	DEST_DESC [0,0,0,0],			! return string
	RET_TEMP	);			! dummy arg

    RETURN;

    END;			!End of BAS$FORMAT_P

END				!End of module
ELUDOM
