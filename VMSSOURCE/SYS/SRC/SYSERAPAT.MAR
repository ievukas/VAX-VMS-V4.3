	.TITLE	SYSERAPAT - Generate a security erase pattern
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: VMS Executive, System services.
;
; ABSTRACT:
;
;	Generate and return a security erase pattern.  This code 
;	is more or less a place holder for a user written routine to
;	accomplish the same function.  The erase pattern returned by
;	this routine will always be zero.
;
;
; ENVIRONMENT:
;
;	Kernel Mode
;
; AUTHOR:
;
;	Steven T. Jeffreys
;
; CREATION DATE:
;
;	 24-September-1982
;
; MODIFIED BY:
;
;	V03-001	STJ3054		Steven T. Jeffreys,		21-Jan-1983
;		Removed EXE$ERAPAT_DEF definition.
;--
;
	.PAGE
	.SBTTL	Declarations
	$ERADEF				; Define erase type codes
	$PSLDEF				; Define PSL fields
	$SSDEF				; Define status codes

;
; Equated symbols:
;

	TYPE	= 4			; Offset to TYPE parameter   (value)
	COUNT	= 8			; Offset to COUNT parameter  (value)
	PATADR	= 12			; Offset to PATADR parameter (address)

	MAXCOUNT= 1			; Maximum count (erase 1 time)
	.PAGE
	.SBTTL	Entry vector
;+
; The following vectors are used by the various pieces of the system
; to access the erase pattern generator.  The vector EXE$ERAPAT is
; used by the change mode dispatcher in response to a user calling the
; $ERAPAT system service.  This vector then jumps to the actual dispatch
; vector, EXE$ERAPAT_VEC, which in turn will jump to erase pattern
; generator code.  This level of indirection is necessary because the
; change mode dispatch vector must be in close proximity to the change
; mode dispatcher, which implies that it must be in a read-only psect.
; The actual dispatch vector, EXE$ERAPAT_VEC, must be in a writable
; psect so that the contents of the vector may be changed.
;
; The longword SGN$GL_LOADFLAGS is a bit vector used to indicate which
; pieces of the loadable pieces of the EXEC should be loaded at system
; boot time.  If a user specified erase pattern generator routine is
; present in the system, the bit SGN$V_LOADERAPT will be set to 1.
; This fact can be used to the advantage of the EXEC to avoid the overhead
; of having to call the default erase pattern generator, since it always
; returns a zero, and is a one-step erase function.
;
; The vector address the user must specify to load the code is represented
; by the symbol EXE$ERAPAT_VEC.
;
;-

	.PSECT	AEXENONPAGED		; Nonpaged UR access only
EXE$ERAPAT::				; Entry point from change-mode dispat.
	.WORD	0			; Register save mask (none saved)
	JMP	@#EXE$ERAPAT_VEC	; Jump to the dispatch vector

	.PSECT	$$$500			; The vector must be nonpaged and URKW
EXE$ERAPAT_VEC::			; Quick access entry point
	JMP	@#EXE$ERAPAT_RTN	; Vector to default routine
	.PAGE
	.SBTTL	Main routine
;++
; $ERAPAT
;
; Functional description:
;	
;	In order to perform a multi-step security erase, the caller repeatedly
;	calls this service, each time incrementing the iteration count.  After
;	each call, the erase pattern returned is written in the user supplied
;	area.  (The user is responsible for propagating that pattern throughout
;	memory, disk, tape, etc.)  When the service returns SS$_NOTRAN in R0,
;	the security erase operation is complete.
;
;	This simple routine will always return an erase pattern of 0.  It is
;	up to the system mangager to provide a specialized load algorithm.
;
; Calling sequence:
;
;	This routine should be called via a CALLS/G to EXE$ERAPAT.
;
; Input:
;
;	TYPE(AP)	: Security erase type.  The legal types are
;				ERA$K_MEMORY : main memory
;				ERA$K_DISK   : disk storage
;				ERA$K_TAPE   : tape storage
;
;	COUNT(AP)	: Iteration count.  The service should be called
;			  the first time with the value 1, then 2, etc.,
;			  until the status SS$_NOTRAN is returned.  The
;			  local symbol MAXCOUNT defines how many times this
;			  happens.
;
; Output:
;
;	PATADR(AP)	: Address of a longword into which the security
;			  erase pattern is to be written.
;
; Routine value:
;
;	R0 = SS$_ACCVIO		: pattern output area not accessible
;	     SS$_BADPARAM	: invalid security type code
;	     SS$_NORMAL		: normal successful completion
;	     SS$_NOTRAN		: security erase complete
;--

	.PSECT	Y$EXEPAGED		; This code is pageable

EXE$ERAPAT_RTN::			; $ERAPAT code
	MOVZWL	#SS$_BADPARAM,R0	; Assume bad parameter value
	MOVL	TYPE(AP),R1		; Get the type code
	ASSUME	ERA$K_MINTYPE EQ 1	; This must be true if BLEQ is to work
	BLEQ	69$			; Branch if type code too small
	CMPL	#ERA$K_MAXTYPE,R1	; Is the type code too big?
	BLSS	69$			; Branch if yes
	MOVL	COUNT(AP),R1		; Get the count
	BLEQ	69$			; Branch if too small
	MOVZWL	#SS$_NOTRAN,R0		; Assume count too big
	CMPL	#MAXCOUNT,R1		; Are we done?
	BLSS	69$			; If less, then yes
	MOVZWL	#SS$_ACCVIO,R0		; Assume access violation
	MOVL	PATADR(AP),R1		; Get address of user buffer
	IFNOWRT	#4,(R1),69$		; Branch if no write access
	CLRL	(R1)			; Return the erase pattern
	MOVZWL	#SS$_NORMAL,R0		; Set success status
69$:	RET				; Return

	.END
