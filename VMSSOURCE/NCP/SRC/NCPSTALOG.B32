%TITLE	'Logging Parameter Parse States and Data'
MODULE NCPSTALOG (IDENT = 'V04-000', LIST(NOOBJECT)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Control Program (NCP)
!
! ABSTRACT:
!
!	States and data for the parsing of NCP logging parameters
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE: 10-September-79
!
! MODIFIED BY:
!
!	V03-002	RPG0002		Bob Grosso		26-Feb-1983
!		Rename ESMO to MODPRM.
!
!	V03-001	RPG0001		Bob Grosso		23-Feb-1983
!		Add LOG MONITOR MODULE (X25-PROT,X25-SERVER,X29-SERVER).
!
!	V002	TMH0002		Tim Halvorsen	11-Nov-1981
!		Allow a circuit source as well as line and node.
!
!	V001	TMH0001		Tim Halvorsen	22-Jun-1981
!		Change BUILD_SDB reference to use full entity type field.
!--

%SBTTL	'Definitions'

!
! INCLUDE FILES:
!

	LIBRARY 'LIB$:NMALIBRY';
	LIBRARY 'LIB$:NCPLIBRY';
	LIBRARY 'SYS$LIBRARY:TPAMAC';

!
! EXTERNAL REFERENCES:
!

	ACT_DFN			! Action routine externals

%SBTTL	'Parameter blocks'

!
! BIND DATA:
!

!
!	Parameter Blocks
!

	BUILD_PCL

	(LOG,

	STA, NUMB,	PCLO_STA, ,
	NAM, TKN,	PCLO_LNA, ,
	SNO, NADR,	PCLO_SIN, ,
	EVL, ESET,	PCLO_EVE, VRB_EVE,	! Event logging type stored
						!  in PDB$G_VRB_EVE
	, END, , ,

	)

	BUILD_PBK

	(LOG,

	EVL, LITB, 0, ,
	KNE, LITB, 0, LOG_EVL,
	LIN, ESLI, , VRB_EVE,

    !   	ACT$SAVPRM will specially handle type MODPRM to store the correct module string in PDB$G_VRB_EVE
	MPR, MODPRM, NCP$C_ENT_MODPRO, VRB_EVE,
	MSE, MODPRM, NCP$C_ENT_MODSER, VRB_EVE,
	M9S, MODPRM, NCP$C_ENT_MOD29S, VRB_EVE,

	NAM, TKN, , ,
	NOD, ESNO, , VRB_EVE,
	CIR, ESCI, , VRB_EVE,
	SEX, LITL, 0, LOG_SNO,
	SNO, NADR, , ,
	STAON,  LITB, NMA$C_STATE_ON, LOG_STA,
	STAOFF, LITB, NMA$C_STATE_OFF, LOG_STA,
	STAHLD, LITB, NMA$C_STATE_HOL, LOG_STA,

	)

	BUILD_SDB

	(LOG, NMA$C_ENT_LOG, VRB_ENT, LOG)

%SBTTL	'Prompt strings'

!
!	Build prompt strings
!

BIND

	PROMPT_STRINGS
	(LOG,

	EVK, 'Event list (cls.typ,typ-typ, KNOWN): ',
	NAM, 'Sink name            (filename.typ): ',
	MOD, 'Module (X25-PROTOCOL, X25-SERVER, X29-SERVER): ',
	SNK, 'Sink node  (NODE node-id, EXECUTOR): ',
	SRC,
     %STRING('Source (NODE node-id, LINE line-id,',CRLF,
	     'CIRCUIT circ-id, MODULE module-name): '),
	STA, 'Sink state          (ON, OFF, HOLD): ',
		
	)
	;

%SBTTL	'State Table for Logging Parameters'

$INIT_STATE (NCP$G_STTBL_LOG, NCP$G_KYTBL_LOG);

!
!	SET/DEFINE LOGGING Parameter States
!

$STATE	(ST_LOG,
	(TPA$_LAMBDA, , ACT$SAVPRM, , , PBK$G_EVE_ESET)
	);

$STATE	(,
	( (SE_ALL), ST_LOG_DOIT),	! All parameter
	(TPA$_EOS, , ACT$PMT_ON),	! Prompt if no keywords
	(TPA$_LAMBDA, ST_LOG_PRC, ACT$PMT_OFF)	! Process keywords
	);

	PROMPT_STATES			! Prompt for these parameters
	(LOG,
	SRC, EVK, SNK, NAM, STA
	)

$STATE	(ST_LOG_DOIT,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_LOG),
	);

%SBTTL	'Substate Dispatching'

!
!	Substate dispatching
!

$STATE	(ST_LOG_PRC,

	DISPATCH_STATES
	(LOG,

	CIR, 'CIRCUIT',
	EVL, 'EVENTS',
	KNE, 'KNOWN',
	LIN, 'LINE',
	NAM, 'NAME',
	NOD, 'NODE',
	SNK, 'SINK',
	STA, 'STATE',

	),

	('MODULE', ST_LOG_MOD),
	('X25',	ST_LOG_X25),
	('X29',	ST_LOG_X29),
	(TPA$_EOS, ST_LOG_DOIT)
	);

%SBTTL	'Process States'

!
!	Process states
!

	PROCESS_STATES
	(LOG,

	CIR, ,
	EVL, ,
	KNE, 'EVENTS',
	LIN, ,
	NAM, , 
	NOD, ,
	SEX, ,
	SNK, ,
	STA, ,

	)

%SBTTL	'Subexpressions'

!
!	Sub_expressions
!

	SUB_EXPRESSIONS
	(LOG,

	CIR, (SE_CIRC_ID),
	EVL, (SE_EVENT_LIST),
	KNE, (SE_EVENT_KNOWN),
	LIN, (SE_LINE_ID),
	NOD, (SE_NODE_ID),
	NAM, (SE_FILE_ID),
	SEX, TPA$_LAMBDA,
	SNO, (SE_NODE_ID),

	)

$STATE	(ST_LOG_EVK,
	('KNOWN'),
	( (SE_EVENT_LIST), TPA$_EXIT, ACT$SAVPRM, , , PBK$G_LOG_EVL),
	);

$STATE	(,
	( (SE_EVENT_KNOWN), TPA$_EXIT, ACT$SAVPRM, , , PBK$G_LOG_EVL),
	);


$STATE	(ST_LOG_SRC,
	('LINE', ST_LOG_LIN),
	('MODULE', ST_LOG_MOD),
	('NODE', ST_LOG_NOD),
	('CIRCUIT', ST_LOG_CIR));

$STATE	(ST_LOG_SNK,
	('EXECUTOR',	ST_LOG_SEX),
	('NODE',	ST_LOG_SNO)
	);

$STATE	(ST_LOG_STA,

	KEYWORD_STATE
	(LOG,

	STAOFF, 'OFF',
	STAON,  'ON',
	STAHLD, 'HOLD',

	)

	);

%SBTTL	'MODULE'

!
!	Obtain the module to Log
!
$STATE	(ST_LOG_MOD,
	('X25', ST_LOG_X25),
	('X29', ST_LOG_X29),
	(TPA$_EOS, ST_LOG_PMT_MOD),
	);

$STATE	(ST_LOG_PMT_MOD,
	(TPA$_LAMBDA, , ACT$PRMPT,,, PMT$G_LOG_MOD));

$STATE	(,
	('X25', ST_LOG_X25),
	('X29', ST_LOG_X29),
	(TPA$_EOS, ST_LOG_PMT_MOD)
	);

$STATE	(ST_LOG_X25,
	('-'));
$STATE	(,
	('PROTOCOL', ST_LOG_PRC, ACT$SAVPRM, , , PBK$G_LOG_MPR),
	('SERVER', ST_LOG_PRC, ACT$SAVPRM, , , PBK$G_LOG_MSE),
	);

$STATE	(ST_LOG_X29,
	('-'));
$STATE	(,
	('SERVER', ST_LOG_PRC, ACT$SAVPRM, , , PBK$G_LOG_M9S),
	);

%SBTTL	'Define Subexpressions'

!
!	Define subexpressions from library
!

	SEM_ALL			! All parameter
	SEM_FILE_ID		! File id string
	SEM_EVENT_LIST		! Event List
	SEM_LINE_ID		! Line id strings
	SEM_CIRC_ID		! Circuit id strings
	SEM_NODE_ID		! Node id strings

%SBTTL	'Object Listing of Parse Table'

END				!End of module
ELUDOM
