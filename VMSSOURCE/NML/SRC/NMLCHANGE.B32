%TITLE 'NML Change parameters module'
MODULE NML$CHANGE (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines to handle dispatching of NCP
!	SET, CLEAR, DEFINE, and PURGE commands to the correct routine
!	according to the specified entity type.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Kathy Perko
!
! CREATION DATE:  15-April-1982
!
! MODIFIED BY:
!
!	V03-009	MKP0009		Kathy Perko		9-Jan-1984
!		Add X25-Access Module entity.
!
!	V03-008	MKP0008		Kathy Perko		26-Aug-1983
!		Convert node permanent database to use multiple ISAM keys so
!		it will be faster.
!
!	V03-007	MKP0007		Kathy Perko		25-April-1983
!		Add support for PURGE NI Configurator module circuits.
!
!	V03-006	MKP0006		Kathy Perko		21-Jan-1983
!		Add support for NI Configurator module.
!
!	V03-005	MKP0005		Kathy Perko		8-Nov-1982
!		Change error reported to NCP if entity format is
!		has not action routine in dispatch table.  Change it
!		from "invalid function or option" to "invalid identification
!		error".
!
!	V03-004	MKP0004		Kathy Perko		26-Sept-1982
!		Change DEFINE KNOWN LOGGING to a separate routine.
!
!	V03-003	MKP0003		Kathy Perko		21-Sept-1982
!		Allow disconnect of a single link without a node name
!		specified.
!
!	V03-002	MKP0002		Kathy Perko		31-Aug-1982
!		Fix X25 Protocol Group dispatch table to allow SET X-P
!		GROUP FRED ALL and SET X-P K GROUP ALL.
!
!	V03-001	MKP0001		Kathy Perko		21-June-1982
!		Add a dispatch routine for X25-Protocol networks.  This
!		is needed because of the creation of a special network
!		entity, active network.
!		Change DISC LINKS to use qualifier logic if there is
!		a node specified in the NICE message.
!		Redo dispatch tables to specify a different change
!		routine if the NICE command includes a qualifier.
!		Add X29-Server and X25-Trace entities.
!
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	NML$CHANGE		: NOVALUE,
	NML_CHANGE		: NOVALUE,
	NML_CHANGE_LOGGING	: NOVALUE,
	NML_CHANGE_NODE		: NOVALUE,
	NML_CHANGE_EXECUTOR	: NOVALUE,
	NML_CHANGE_NETWORK	: NOVALUE,
	NML_DISCONNECT_LINKS	: NOVALUE,
	NML_CHANGE_PLURAL : NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL
    NML$AB_NPA_BLK  : $NPA_BLKDEF,
    NML$NPA_CLPUCIR,
    NML$NPA_CLPULIN,
    NML$NPA_CLPULNK,
    NML$NPA_CLPULOG,
    NML$NPA_CLPUNOD,
    NML$NPA_CLPUEXE,
    NML$NPA_CLPUOBJ,
    NML$NPA_SEDECIR,
    NML$NPA_SEDELIN,
    NML$NPA_SEDELOG,
    NML$NPA_SEDENOD,
    NML$NPA_SEDEEXE,
    NML$NPA_SEDE_X25_ACCESS,
    NML$NPA_SEDE_PROT_NET,
    NML$NPA_SEDE_PROT_DTE,
    NML$NPA_SEDE_PROT_GRP,
    NML$NPA_SEDE_X25_SERV,
    NML$NPA_SEDE_X25_SERV_DEST,
    NML$NPA_SEDE_TRACE,
    NML$NPA_SEDE_TRACEPOINT,
    NML$NPA_SEDE_X29_SERV,
    NML$NPA_SEDE_X29_SERV_DEST,
    NML$NPA_SEDE_NI_CONFIG,
    NML$NPA_CLPU_X25_ACCESS,
    NML$NPA_CLPU_PROT_NET,
    NML$NPA_CLPU_PROT_DTE,
    NML$NPA_CLPU_PROT_GRP,
    NML$NPA_CLPU_X25_SERV,
    NML$NPA_CLPU_X25_SERV_DEST,
    NML$NPA_CLPU_TRACE,
    NML$NPA_CLPU_TRACEPOINT,
    NML$NPA_CLPU_X29_SERV,
    NML$NPA_CLPU_X29_SERV_DEST,
    NML$NPA_CLPU_NI_CONFIG,
    NML$NPA_SEDEOBJ;

EXTERNAL ROUTINE
    LIB$ESTABLISH : ADDRESSING_MODE (GENERAL),
    LIB$REVERT	  : ADDRESSING_MODE (GENERAL),
    NMA$NPARSE,
    NML$BLD_REPLY,
    NML$CALL_NI_CONFIG,
    NML$CLEARENTITY,
    NML$CLEAREXECUTOR,
    NML$CLEARKNOLOG,
    NML$CLEARKNONODES,
    NML$CLEARKNOWN,
    NML$CLEARLOGGING,
    NML$DEFENTITY,
    NML$DEFINE_NODE,
    NML$DEFINEKNOWN,
    NML$DEFINE_KNOWN_NODES,
    NML$DEFKNOWNLOG,
    NML$DEFLOGGING,
    NML$DISCKNOWN,
    NML$DISCONNECT,
    NML$ERROR_1,
    NML$ERROR_2,
    NML$MAINHANDLER,
    NML$OPENFILE,
    NML$PURENTITY,
    NML$PURGE_KNOWN_NODES,
    NML$PURGEKNOWN,
    NML$PURLOGGING,
    NML$SEND,
    NML$SETENTITY,
    NML$SETEXECUTOR,
    NML$SETKNOLOG,
    NML$SETKNONODES,
    NML$SETKNOWN,
    NML$SETLINE,
    NML$SETLOGGING,
    NML$SET_NI_CONFIG;

!
! Macro to build dispatch table for an entity.
!
MACRO $TAB (TAB,
    DISPATCH_RTN,
    SETDEF_PARSE,	CLEPUR_PARSE,
    SET_RTN,	    SET_W_QUAL_RTN,	SET_KNO_RTN,	SET_KNO_W_QUAL_RTN,
    CLEAR_RTN,	    CLEAR_W_QUAL_RTN,	CLEAR_KNO_RTN,	CLEAR_KNO_W_QUAL_RTN,
    DEFINE_RTN,	    DEFINE_W_QUAL_RTN,	DEFINE_KNO_RTN,	DEFINE_KNO_W_QUAL_RTN,
    PURGE_RTN,	    PURGE_W_QUAL_RTN,	PURGE_KNO_RTN,	PURGE_KNO_W_QUAL_RTN) =

	OWN TAB : BBLOCK [%LENGTH * 4] INITIAL (
	$PIC (DISPATCH_RTN, TAB),
	$PIC (SETDEF_PARSE, TAB),
	$PIC (CLEPUR_PARSE,TAB),
	$PIC (SET_RTN,TAB),
	$PIC (SET_W_QUAL_RTN,TAB),
	$PIC (SET_KNO_RTN,TAB),
	$PIC (SET_KNO_W_QUAL_RTN,TAB),
	$PIC (CLEAR_RTN,TAB),
	$PIC (CLEAR_W_QUAL_RTN,TAB),
	$PIC (CLEAR_KNO_RTN,TAB),
	$PIC (CLEAR_KNO_W_QUAL_RTN,TAB),
	$PIC (DEFINE_RTN,TAB),
	$PIC (DEFINE_W_QUAL_RTN,TAB),
	$PIC (DEFINE_KNO_RTN,TAB),
	$PIC (DEFINE_KNO_W_QUAL_RTN,TAB),
	$PIC (PURGE_RTN,TAB),
	$PIC (PURGE_W_QUAL_RTN,TAB),
	$PIC (PURGE_KNO_RTN,TAB),
	$PIC (PURGE_KNO_W_QUAL_RTN,TAB))
		%,

    $PIC (ADDR,TAB) =
		%IF %IDENTICAL (ADDR, 0)
		%THEN	LONG (0)
		%ELSE LONG (%NAME (ADDR) - %NAME (TAB))
		%FI
		%;


!
! Dispatch tables.  There is one table for each internal NML entity (NML
! internal entities are broken down more that NICE entities).  The table
! specifies the following information about the entity:
!	The address of the dispatch routine in this module for the entity.
!		The dispatch routines vary depending on the different
!		formats the entities can have.
!	The addresses of the NPARSE tables used to parse the parameters
!		in the NICE command.  The NICE function, option byte,
!		and entity have already been parsed by this time.
!	The addresses of the routines which perform the requested change:
!		- Set single entity
!		- Set single entity with qualifier
!		- Set known entities
!		- Set known entities with qualifier
!		- Clear single entity
!		- Clear single entity with qualifier
!		- Clear known entities
!		- Clear known entities with qualifier
!		- Define single entity
!		- Define single entity with qualifier
!		- Define known entities
!		- Define known entities with qualifier
!		- Purge single entity
!		- Purge single entity with qualifier
!		- Purge known entities
!		- Purge known entities with qualifier
!
$TAB (LINE_TAB,				! NML$C_LINE
    NML_CHANGE,
    NML$NPA_SEDELIN,	NML$NPA_CLPULIN,
    NML$SETENTITY,	0,	NML$SETKNOWN,	0,
    NML$CLEARENTITY,	0,	NML$CLEARKNOWN,	0,
    NML$DEFENTITY,	0,	NML$DEFINEKNOWN,0,
    NML$PURENTITY,	0,	NML$PURGEKNOWN,	0);

$TAB (LOGGING_TAB,			! NML$C_LOGGING
    NML_CHANGE_LOGGING,
    NML$NPA_SEDELOG,	NML$NPA_CLPULOG,
    NML$SETLOGGING,	0,	NML$SETKNOLOG,	0,
    NML$CLEARLOGGING,	0,	NML$CLEARKNOLOG,0,
    NML$DEFLOGGING,	0,	NML$DEFKNOWNLOG,0,
    NML$PURLOGGING,	0,	NML$PURGEKNOWN,	0);

BIND SINK_TAB = UPLIT (0);

$TAB (NODE_TAB,				! NML$C_NODE
    NML_CHANGE_NODE,
    NML$NPA_SEDENOD,	NML$NPA_CLPUNOD,
    NML$SETENTITY,	0,	NML$SETKNONODES,	0,
    NML$CLEARENTITY,	0,	NML$CLEARKNONODES,	0,
    NML$DEFINE_NODE,	0,	NML$DEFINE_KNOWN_NODES,	0,
    NML$PURENTITY,	0,	NML$PURGE_KNOWN_NODES,	0);

$TAB (NODEBYNAME_TAB,		! NML$C_NODEBYNAME
    NML_CHANGE_NODE,
    NML$NPA_SEDENOD,	NML$NPA_CLPUNOD,
    NML$SETENTITY,	0,	NML$SETKNONODES,	0,
    NML$CLEARENTITY,	0,	NML$CLEARKNONODES,	0,
    NML$DEFINE_NODE,	0,	NML$DEFINE_KNOWN_NODES,	0,
    NML$PURENTITY,	0,	NML$PURGE_KNOWN_NODES,	0);

BIND LOOPNODE_TAB = UPLIT (0);

BIND ADJACENT_NODE_TAB = UPLIT (0);

$TAB (EXECUTOR_TAB,			! NML$C_EXECUTOR
    NML_CHANGE_EXECUTOR,
    NML$NPA_SEDEEXE,	NML$NPA_CLPUEXE,
    NML$SETEXECUTOR,	0,	0,	0,
    NML$CLEAREXECUTOR,	0,	0,	0,
    NML$DEFINE_NODE,	0,	0,	0,
    NML$PURENTITY,	0,	0,	0);

$TAB (OBJECT_TAB,			! NML$C_OBJECT
    NML_CHANGE,
    NML$NPA_SEDEOBJ,	NML$NPA_CLPUOBJ,
    NML$SETENTITY,	0,	NML$SETKNOWN,	0,
    NML$CLEARENTITY,	0,	NML$CLEARKNOWN,	0,
    NML$DEFENTITY,	0,	NML$DEFINEKNOWN,0,
    NML$PURENTITY,	0,	NML$PURGEKNOWN,	0);

$TAB (CIRCUIT_TAB,			! NML$C_CIRCUIT
    NML_CHANGE,
    NML$NPA_SEDECIR,	NML$NPA_CLPUCIR,
    NML$SETENTITY,	0,	NML$SETKNOWN,	0,
    NML$CLEARENTITY,	0,	NML$CLEARKNOWN,	0,
    NML$DEFENTITY,	0,	NML$DEFINEKNOWN,0,
    NML$PURENTITY,	0,	NML$PURGEKNOWN,	0);

BIND CIRCUIT_ADJACENT_TAB = UPLIT (0);

BIND CIRCUIT_ADJ_SRC_TAB = UPLIT (0);

BIND AREA_TAB = UPLIT (0);

$TAB (ACCESS_TAB,			! NML$C_X25_ACCESS
    NML_CHANGE_NETWORK,
    NML$NPA_SEDE_X25_ACCESS,	NML$NPA_CLPU_X25_ACCESS,
    NML$SETENTITY,	0,	NML$SETKNOWN,	0,
    NML$CLEARENTITY,    0,	NML$CLEARKNOWN,	0,
    NML$DEFENTITY,	0,	NML$DEFINEKNOWN,0,
    NML$PURENTITY,	0,	NML$PURGEKNOWN,	0);

$TAB (PROT_NET_TAB,			! NML$C_PROT_NET
    NML_CHANGE_NETWORK,
    NML$NPA_SEDE_PROT_NET,	NML$NPA_CLPU_PROT_NET,
    NML$SETENTITY,	0,	0,	0,
    NML$CLEARENTITY,    0,	0,	0,
    NML$DEFENTITY,	0,	0,	0,
    NML$PURENTITY,	0,	0,	0);

$TAB (PROT_DTE_TAB,			! NML$C_PROT_DTE
    NML_CHANGE,
    NML$NPA_SEDE_PROT_DTE,	NML$NPA_CLPU_PROT_DTE,
    NML$SETENTITY,	0,	NML$SETKNOWN,	0,
    NML$CLEARENTITY,	0,	NML$CLEARKNOWN,	0,
    NML$DEFENTITY,	0,	NML$DEFINEKNOWN,0,
    NML$PURENTITY,	0,	NML$PURGEKNOWN,	0);

$TAB (PROT_GRP_TAB,			! NML$C_PROT_GRP
    NML_CHANGE,
    NML$NPA_SEDE_PROT_GRP,	NML$NPA_CLPU_PROT_GRP,
    NML$SETKNOWN,	NML$SETENTITY,	NML$SETKNOWN,	0,
    NML$CLEARENTITY,	NML$CLEARENTITY,NML$CLEARKNOWN,	0,
    0,			NML$DEFENTITY,	0,		0,
    NML$PURGEKNOWN,	NML$PURENTITY,	NML$PURGEKNOWN,	0);

$TAB (X25_SERV_TAB,			! NML$C_X25_SERV
    NML_CHANGE,
    NML$NPA_SEDE_X25_SERV,	NML$NPA_CLPU_X25_SERV,
    NML$SETENTITY,		0,	0,	0,
    NML$CLEARENTITY,		0,	0,	0,
    NML$DEFENTITY,		0,	0,	0,
    NML$PURENTITY,		0,	0,	0);

$TAB (X25_SERV_DEST_TAB,	! NML$C_X25_SERV_DEST
    NML_CHANGE,
    NML$NPA_SEDE_X25_SERV_DEST,	NML$NPA_CLPU_X25_SERV_DEST,
    NML$SETENTITY,	0,	NML$SETKNOWN,	0,
    NML$CLEARENTITY,	0,	NML$CLEARKNOWN,	0,
    NML$DEFENTITY,	0,	NML$DEFINEKNOWN,0,
    NML$PURENTITY,	0,	NML$PURGEKNOWN,	0);

$TAB (TRACE_TAB,			! NML$C_TRACE
    NML_CHANGE,
    NML$NPA_SEDE_TRACE,		NML$NPA_CLPU_TRACE,
    NML$SETENTITY,		0,	0,	0,
    NML$CLEARENTITY,		0,	0,	0,
    NML$DEFENTITY,		0,	0,	0,
    NML$PURENTITY,		0,	0,	0);

$TAB (TRACEPNT_TAB,			! NML$C_TRACEPNT
    NML_CHANGE,
    NML$NPA_SEDE_TRACEPOINT,	NML$NPA_CLPU_TRACEPOINT,
    NML$SETENTITY,	0,	NML$SETKNOWN,	0,
    NML$CLEARENTITY,	0,	NML$CLEARKNOWN,	0,
    NML$DEFENTITY,	0,	NML$DEFINEKNOWN,0,
    NML$PURENTITY,	0,	NML$PURGEKNOWN,	0);

$TAB (X29_SERV_TAB,			! NML$C_X29_SERV
    NML_CHANGE,
    NML$NPA_SEDE_X29_SERV,	NML$NPA_CLPU_X29_SERV,
    NML$SETENTITY,		0,	0,	0,
    NML$CLEARENTITY,		0,	0,	0,
    NML$DEFENTITY,		0,	0,	0,
    NML$PURENTITY,		0,	0,	0);

$TAB (X29_SERV_DEST_TAB,	! NML$C_X29_SERV_DEST
    NML_CHANGE,
    NML$NPA_SEDE_X29_SERV_DEST,	NML$NPA_CLPU_X29_SERV_DEST,
    NML$SETENTITY,	0,	NML$SETKNOWN,	0,
    NML$CLEARENTITY,	0,	NML$CLEARKNOWN,	0,
    NML$DEFENTITY,	0,	NML$DEFINEKNOWN,0,
    NML$PURENTITY,	0,	NML$PURGEKNOWN,	0);

$TAB (NI_CONFIG_TAB,	! NML$C_NI_CONFIG
    NML_CHANGE,
    NML$NPA_SEDE_NI_CONFIG,	NML$NPA_CLPU_NI_CONFIG,
    NML$SET_NI_CONFIG,	0,	NML$SET_NI_CONFIG,0,
    NML$CALL_NI_CONFIG,	0,	NML$CALL_NI_CONFIG,0,
    NML$DEFENTITY,	0,	NML$DEFINEKNOWN,0,
    NML$PURENTITY,	0,	NML$PURGEKNOWN,	0);

$TAB (LINK_TAB,				! NML$C_LINK
    NML_DISCONNECT_LINKS,
    0,			0,		! No further parsing necessary.
    0,			0,		0,		0,
    NML$DISCONNECT,	NML$DISCONNECT,	NML$DISCKNOWN,	NML$DISCKNOWN,
    0,			0,		0,		0,
    0,			0,		0,		0);


!
! Table table.  Contains pointers to Dispatch tables for NML entities.
! Indexed by NML$C_entity definitions.
!
OWN TABLE_TAB : VECTOR [NML$C_MAXENTITY] INITIAL (
	$PIC (LINE_TAB, TABLE_TAB),
	$PIC (LOGGING_TAB,TABLE_TAB),
	$PIC (SINK_TAB,TABLE_TAB),
	$PIC (NODE_TAB,TABLE_TAB),
	$PIC (NODEBYNAME_TAB,TABLE_TAB),
	$PIC (LOOPNODE_TAB,TABLE_TAB),
	$PIC (ADJACENT_NODE_TAB,TABLE_TAB),
	$PIC (EXECUTOR_TAB,TABLE_TAB),
	$PIC (OBJECT_TAB,TABLE_TAB),
	$PIC (CIRCUIT_TAB,TABLE_TAB),
	$PIC (CIRCUIT_ADJACENT_TAB,TABLE_TAB),
	$PIC (CIRCUIT_ADJ_SRC_TAB, TABLE_TAB),
	$PIC (AREA_TAB,TABLE_TAB),
	$PIC (ACCESS_TAB,TABLE_TAB),
	$PIC (PROT_NET_TAB,TABLE_TAB),
	$PIC (PROT_DTE_TAB,TABLE_TAB),
	$PIC (PROT_GRP_TAB,TABLE_TAB),
	$PIC (X25_SERV_TAB,TABLE_TAB),
	$PIC (X25_SERV_DEST_TAB,TABLE_TAB),
	$PIC (TRACE_TAB,TABLE_TAB),
	$PIC (TRACEPNT_TAB,TABLE_TAB),
	$PIC (X29_SERV_TAB,TABLE_TAB),
	$PIC (X29_SERV_DEST_TAB,TABLE_TAB),
	$PIC (NI_CONFIG_TAB,TABLE_TAB),
	$PIC (LINK_TAB,TABLE_TAB));

%SBTTL 'NML$CHANGE  Change parameters main routine'
GLOBAL ROUTINE NML$CHANGE : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dispatches the NICE change parameters command to
!	the correct function handler.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NML$GB_OPTIONS contains the option byte parsed from the NICE message.
!	NML$GB_ENTITY_CODE contains the entity code.
!
!--

BEGIN

MAP
    NML$GB_ENTITY_FORMAT : BYTE SIGNED,
    NML$GB_OPTIONS : BBLOCK [1];

LOCAL
    ENT_TAB    : REF BBLOCK,	! Dispatch table reference
    RTN_ADDR,			! Temporary routine address
    PARSE_TAB,			! Address of NICE message parsing
				!	table.
    CHANGE_TABLE_ADR: REF BBLOCK,! Address of SET, CLEAR, DEFINE, or PURGE
				!	portion of entity dispatch table.
    CHANGE_RTN;			! Address of routine to perform
				!	change requested by NICE
				!	message.


!
! Get address of entity's dispatch table.  The addresses are stored as offsets
! to make NMLSHR PIC.  Change the offset into a useable address.
!
ENT_TAB = .TABLE_TAB [.NML$GL_NML_ENTITY] + TABLE_TAB;
IF .ENT_TAB NEQA 0 THEN
    BEGIN
    RTN_ADDR = .ENT_TAB [DT$L_DISPATCH] + .ENT_TAB;
    !
    !  Go to dispatch table for the entity specified in the NICE message.
    !  Get the address the NICE parameter parsing table, and the address
    !  of the routine which performs the type of change requested.
    !
    IF .RTN_ADDR NEQA .ENT_TAB THEN
	BEGIN
	!
	! Get parsing table address
	!
	IF .NML$GB_OPTIONS [NMA$V_OPT_CLE] THEN
	    PARSE_TAB = .ENT_TAB [DT$L_CLPU_PARSE] + .ENT_TAB
	ELSE
	    PARSE_TAB = .ENT_TAB [DT$L_SEDE_PARSE] + .ENT_TAB;

	!
	! Get address of portion of entity's dispatch table containing
	! the change routine addresses for the function (SET, CLEAR, DEFINE,
	! or PURGE) specified by the NICE message.
	!
	IF .NML$GB_OPTIONS [NMA$V_OPT_PER] THEN
	    BEGIN
	    IF .NML$GB_OPTIONS [NMA$V_OPT_CLE] THEN
		CHANGE_TABLE_ADR = ENT_TAB [DT$A_PURGE_ROUTINES]    ! PURGE
	    ELSE
		CHANGE_TABLE_ADR = ENT_TAB [DT$A_DEFINE_ROUTINES];  ! DEFINE
	    END
	ELSE
	    BEGIN
	    IF .NML$GB_OPTIONS [NMA$V_OPT_CLE] THEN
		CHANGE_TABLE_ADR = ENT_TAB [DT$A_CLEAR_ROUTINES]    ! CLEAR
	    ELSE
		CHANGE_TABLE_ADR = ENT_TAB [DT$A_SET_ROUTINES];     ! SET
	    END;
	!
	! Each function's portion of the entity's dispatch table contains
	! the addresses of four change routines.  These routines do the
	! following:
	!	- Change a single entity
	!	- Change a single entity with the specified qualifier.
	!	- Change known entities
	!	- Change known entities with the specified qualifier.
	!
	IF .NML$GB_ENTITY_FORMAT EQL NMA$C_ENT_KNO THEN
	    BEGIN
	    IF .NML$GL_PRS_FLGS [NML$V_PRS_QUALIFIER] THEN
		CHANGE_RTN = .CHANGE_TABLE_ADR [CHG$L_KNOWN_W_QUAL]
	    ELSE
		CHANGE_RTN = .CHANGE_TABLE_ADR [CHG$L_KNOWN];
	    END
	ELSE
	    BEGIN
	    IF .NML$GL_PRS_FLGS [NML$V_PRS_QUALIFIER] THEN
		CHANGE_RTN = .CHANGE_TABLE_ADR [CHG$L_ENTITY_W_QUAL]
	    ELSE
		CHANGE_RTN = .CHANGE_TABLE_ADR [CHG$L_ENTITY];
	    END;
	!
	! The routine addresses are stored as offsets (to make NMLSHR PIC).
	! Make the offset into a callable routine address.
	!
	IF .CHANGE_RTN NEQ 0 THEN
	    BEGIN
	    CHANGE_RTN = .CHANGE_RTN + .ENT_TAB;
	    !
	    ! Call change routine.
	    !
	    (.RTN_ADDR) (.NML$GL_NML_ENTITY,
		         .PARSE_TAB,
		         .CHANGE_RTN);
	    END
	ELSE
	    NML$ERROR_2 (NMA$C_STS_IDE, .NML$GB_ENTITY_FORMAT);
	END
    ELSE
	NML$ERROR_2 (NMA$C_STS_IDE, .NML$GB_ENTITY_FORMAT);
    END
ELSE
    NML$ERROR_2 (NMA$C_STS_IDE, .NML$GB_ENTITY_FORMAT);
END;				! End of NML$CHANGE

%SBTTL 'NML_CHANGE  Change parameters'
ROUTINE NML_CHANGE (ENTITY, PARSE_TAB, CHANGE_RTN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine dispatches to the routine which changes the permanent
!	or volatile data base.
!
! INPUTS:
!	ENTITY		The internal NML index for the entity specified in
!			the NICE command.
!	PARSE_TAB	Address of NICE message parsing table.
!	CHANGE_RTN	Address of routine to perform change requested
!				by NICE message.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
!--

BEGIN

MAP
    NML$GB_ENTITY_FORMAT : BYTE SIGNED;

IF NOT NMA$NPARSE (NML$AB_NPA_BLK, .PARSE_TAB) THEN
    NML$ERROR_2 (NMA$C_STS_IDE, .NML$GB_ENTITY_CODE)
ELSE
    BEGIN
    SELECTONEU .NML$GB_ENTITY_FORMAT OF
	SET
	[NMA$C_ENT_KNO]:			! Known entities
	    NML_CHANGE_PLURAL (.ENTITY, .CHANGE_RTN, 0, 0, 0, 0, 0);

	[1 TO 31]:			! Single entity
	    BEGIN
	    !
	    ! All entity names except X25 Tracepoints must be 1 to 16
	    ! characters.
	    !
	    IF .NML$GB_ENTITY_FORMAT GTR 16 AND
	       .ENTITY NEQ NML$C_TRACEPNT THEN
	    	NML$ERROR_2 (NMA$C_STS_IDE, .NML$GB_ENTITY_CODE)
	    ELSE
	        NML_CHANGE_PLURAL (.ENTITY, .CHANGE_RTN, 
				   .NML$GB_ENTITY_FORMAT, NML$AB_ENTITY_ID,
				   .NML$GL_QUALIFIER_PST,
				   .NML$GB_QUALIFIER_FORMAT,
				   NML$AB_QUALIFIER_ID);
	    END;

	[OTHERWISE]:
	    NML$ERROR_2 (NMA$C_STS_IDE, .NML$GB_ENTITY_CODE);
	TES;
    END;
END;				! End of NML_CHANGE

%SBTTL 'NML_CHANGE_LOGGING  Set logging volatile parameters'
ROUTINE NML_CHANGE_LOGGING (ENTITY, PARSE_TAB, CHANGE_RTN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets the specified logging parameters into the volatile
!	data base.
!
! FORMAL PARAMETERS:
!
! INPUTS:
!	ENTITY		The internal NML index for the entity specified in
!			the NICE command.
!	PARSE_TAB	Address of NICE message parsing table.
!	CHANGE_RTN	Address of routine to perform change requested
!				by NICE message.
!
! IMPLICIT INPUTS:
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
!--

BEGIN

MAP
    NML$GB_ENTITY_FORMAT : BYTE SIGNED;

LOCAL
    LEN,
    ENTITY_ID;

IF NOT NMA$NPARSE (NML$AB_NPA_BLK,
		   .PARSE_TAB) THEN
    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_LOG) ! Option error
ELSE
    BEGIN
    SELECTONEU .NML$GB_ENTITY_FORMAT OF
	SET
	[NMA$C_ENT_KNO]:			! Known entities
	    BEGIN
	    LEN = 0;
	    ENTITY_ID = 0;
	    END;

	[NMA$C_SNK_CON,		! Console
	NMA$C_SNK_FIL,		! File
	NMA$C_SNK_MON]:		! Monitor
	    BEGIN
	    LEN = .NML$GB_ENTITY_FORMAT;
	    ENTITY_ID = 0;
	    END;

	[OTHERWISE]:
	    NML$ERROR_2 (NMA$C_STS_IDE, NMA$C_ENT_LOG); ! Option error
	TES;
    END;
NML_CHANGE_PLURAL (.ENTITY, .CHANGE_RTN, .LEN, .ENTITY_ID, 0, 0, 0)

END;				! End of NML_SET_LOGGING

%SBTTL 'NML_CHANGE_NODE  Change node parameters'
ROUTINE NML_CHANGE_NODE (ENTITY, PARSE_TAB, CHANGE_RTN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine dispatches to the routine which changes the permanent
!	or volatile data base for nodes.
!
! INPUTS:
!	ENTITY		The internal NML index for the entity specified
!			in the NICE command.
!	PARSE_TAB	Address of NICE message parsing table.
!	CHANGE_RTN	Address of routine to perform change requested
!				by NICE message.
!
! IMPLICIT INPUTS:
!
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
!--

BEGIN

MAP
    nml$gb_entity_format : BYTE SIGNED;

LOCAL
    len,
    entity_id;

IF NOT nma$nparse (nml$ab_npa_blk,
	           .parse_tab) THEN
    nml$error_2 (nma$c_sts_ide, nma$c_ent_nod)  ! Option error
ELSE
    BEGIN
    SELECTONEU .nml$gb_entity_format OF
	SET
	[nma$c_ent_kno]:			! Known entities
	    BEGIN
	    len = 0;
	    entity_id = 0;
	    END;

	[nma$c_ent_add]:		! Node is specified by address
	    BEGIN
	    len = 2;
	    entity_id = nml$ab_entity_id;
	    END;

	[1 TO 6]:
	    BEGIN
	    len = .nml$gb_entity_format;
	    entity_id = nml$ab_entity_id;
	    END;

	[OTHERWISE]:
	    nml$error_2 (nma$c_sts_ide, nma$c_ent_nod); ! Option error
	TES;
    END;
nml_change_plural (.entity, .change_rtn,
		   .len, .entity_id,
		   0, 0, 0);

END;				! End of NML_CHANGE_NODE

%SBTTL 'NML_CHANGE_EXECUTOR  Change executor parameters'
ROUTINE NML_CHANGE_EXECUTOR (ENTITY, PARSE_TAB, CHANGE_RTN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine dispatches to the routine which changes the permanent
!	or volatile data base.
!
! INPUTS:
!	ENTITY		The internal NML index for the entity specified
!			in the NICE command.
!	PARSE_TAB	Address of NICE message parsing table.
!	CHANGE_RTN	Address of routine to perform change requested
!				by NICE message.
!
! IMPLICIT INPUTS:
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
!--

BEGIN

MAP
    nml$gb_entity_format : BYTE SIGNED;

IF (.nml$gb_entity_format EQL nma$c_ent_add) OR
   (.nml$gb_entity_format LEQ 6) THEN
    BEGIN
    IF nma$nparse (nml$ab_npa_blk,
		   .parse_tab) THEN
    nml_change_plural (.entity, .change_rtn, 0, 0, 0, 0, 0);
    END
ELSE
    nml$error_2 (nma$c_sts_ide, nma$c_ent_nod); ! Option error

END;				! End of NML_CHANGE_EXECUTOR

%SBTTL 'NML_CHANGE_NETWORK  Change X25-Protocol and X25-Access network parameters'
ROUTINE NML_CHANGE_NETWORK (ENTITY, PARSE_TAB, CHANGE_RTN) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine dispatches to the routine which changes the permanent
!	or volatile data base for X25-Protocol and X25-Access networks.
!
! INPUTS:
!	ENTITY		The internal NML index for the entity specified in
!			the NICE command.
!	PARSE_TAB	Address of NICE message parsing table.
!	CHANGE_RTN	Address of routine to perform change requested
!				by NICE message.
!
! IMPLICIT INPUTS:
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
!--

BEGIN

MAP
    nml$gb_entity_format : BYTE SIGNED;

IF NOT nma$nparse (nml$ab_npa_blk, .parse_tab) THEN
    nml$error_2 (nma$c_sts_ide, .nml$gb_entity_code)
ELSE
    BEGIN
    SELECTONEU .nml$gb_entity_format OF
	SET
	[nma$c_ent_kno]:			! Known networks
	    nml_change_plural (.entity, .change_rtn, 
				.nml$gb_entity_format, 0,
				0, 0, 0);

	[0]:					! Active network
	    nml_change_plural (.entity, .change_rtn,
				0, 0,
				0, 0, 0);

	[1 TO 16]:				! Single network
	    nml_change_plural (.entity, .change_rtn, 
				.nml$gb_entity_format, nml$ab_entity_id,
				0, 0, 0);

	[OTHERWISE]:
	    nml$error_2 (nma$c_sts_ide, .nml$gb_entity_code);
	TES;
    END;
END;				! End of NML_CHANGE_NETWORK

%SBTTL 'NML_DISCONNECT_LINKS  Clear link volatile parameters'
ROUTINE NML_DISCONNECT_LINKS : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine clears the specified link parameters into the volatile
!	data base.
!
! IMPLICIT INPUTS:
!
!	NML$GL_PRS_FLGS contains the parse flags.
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
!--

BEGIN

MAP
    nml$gb_entity_format : BYTE SIGNED;

!
! All functions specifying the link entity must be system-specific.
!

IF .nml$gl_prs_flgs [nml$v_prs_vms] THEN
    SELECTONEU .nml$gb_entity_format OF
	SET
	[nma$c_ent_kno]:		! Known
	    nml_change_plural (nml$c_links,
				nml$discknown,
				.nml$gl_qualifier_pst,
				.nml$gb_qualifier_format,
				nml$ab_qualifier_id);


	[nma$c_ent_add]:
	    nml_change_plural (nml$c_links,
				nml$disconnect,
				.(nml$ab_entity_id)<0,16>, 0);
	TES;

nml$error_2 (nma$c_sts_ide, nma$c_sent_lnk); ! Option error

END;				! End of NML_DISCONNECT_LINKS

%SBTTL 'NML_CHANGE_PLURAL Change plural entity parameters'
ROUTINE NML_CHANGE_PLURAL (ENT, RTN, PRM1, PRM2, PRM3, PRM4, PRM5) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine performs initialization for change operations.
!	The NICE framing messages (plural and done) are transmitted and
!	the SET/CLEAR/DEFINE/PURGE routine is called.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	RTN		Address of routine to be called.
!	PRM1 - PRM5	Function-specific routine parameters.
!
! SIDE EFFECTS:
!
!	Several NICE messages are transmitted.
!
!--

BEGIN

MAP
    nml$gb_options : BBLOCK [1];

LOCAL
    msgsize;

IF .nml$gb_options [nma$v_opt_per] THEN
    !
    ! Open permanent data base file specified for write.
    !
    nml$openfile (.nml$ab_entitydata [.ent, eit$b_fileid], nma$c_opn_ac_rw)
ELSE
    BEGIN
    !
    ! If this is a SET ALL command then open the permanent data base file
    ! for read.
    !
    IF NOT .nml$gb_options [nma$v_opt_cle]
    AND .nml$gl_prs_flgs [nml$v_prs_all] THEN
	nml$openfile (.nml$ab_entitydata [.ent, eit$b_fileid],
		      nma$c_opn_ac_ro);
    END;
!
! Send success with multiple responses message.
!
nml$bld_reply (UPLIT (0, nma$c_sts_mor), msgsize);	! Build message
nml$send (nml$ab_sndbuffer, .msgsize);			! Send it
!
! Enable condition handler to allow done message to be sent.
!
lib$establish (nml$mainhandler);
!
! Call entity-specific routine.
!
(.rtn) (.ent, .prm1, .prm2, .prm3, .prm4, .prm5);
!
! Signal done message.
!
lib$revert ();			! Disable condition handler
nml$error_1 (nma$c_sts_don);	! Signal no more responses

END;				! End of NML_CHANGE_PLURAL

END					! End of module

ELUDOM
