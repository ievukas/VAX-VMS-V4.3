MODULE STACP (
		LANGUAGE (BLISS32),
		IDENT = 'V04-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MOUNT Utility Structure Level 1
!
! ABSTRACT:
!
!	This routine hooks up the VCB to the UCB being mounted, finds or
!	creates the AQB and starts up the ACP.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  19-Oct-1977  15:43
!
! MODIFIED BY:
!
!	V04-001	HH0058		Hai Huang		13-Sep-1984
!		Properly mark up the UCB if the MOUNT QIO fails. This 
!		will cause $DALLOC_DEVS to properly handle the device 
!		lock.
!
!	V03-021	HH0045		Hai Huang		10-Aug-1984
!		Prevent race condition between mount and dismount 
!		(i.e. HH0025) for Files-11 level 1 volumes.
!
!	V03-020	CDS0009		Christian D. Saether	25-Jul-1984
!		Fix name of sysgen parameter for fourth pool.
!
!	V03-019	HH0041		Hai Huang		24-Jul-1984
!		Remove REQUIRE 'LIBD$:[VMSLIB.OBJ]MOUNTMSG.B32'.
!
!	V03-018	CDS0008		Christian D. Saether	15-July-1984
!		Raise minimum requirement for header cache to 3 buffers.
!		Add fourth pool to buffer cache for directory index.
!
!	V03-017	HH0029		Hai Huang		29-Jun-1984
!		Enhance the block cache algorithm to retry with a reduced 
!		cache size if the initial cache allocation fails.
!
!	V03-016	HH0025		Hai Huang		21-Jun-1984
!		Prevent the race condition between mount and dismount
!		by "deallocating" the device as for non-private mounts 
!		before setting device-mounted bit.
!
!	V03-015	HH0004		Hai Huang		13-Mar-1984
!		Fix truncation errors introduced by cluster-wide 
!		mount support.
!
!	V03-014	CDS0007		Christian D. Saether	 3-Mar-1984
!		Set CLF_UNLOCKDB prior to allocating buffer cache.
!
!	V03-013	CDS0006		Christian D. Saether	28-Feb-1984
!		Store F11BC$T_CACHENAME.  Restrict size of block
!		cache to 2^15-2 buffers total.
!
!	V03-012	CDS0005		Christian D. Saether	 6-Feb-1984
!		Add support for xqp block caches.
!
!	V03-011	CDS0004		Christian D. Saether	17-Aug-1983
!		Change references to XQP to STORED_CONTEXT [XQP].
!
!	V03-010	RAS0180		Ron Schaefer		 4-Aug-1983
!		Fix broken calls caused by changes in DISMNTSHR.
!
!	V03-009	STJ56368	Steven T. Jeffreys,	27-May-1983
!		Fix /PROCESSOR=SAME:<junk> bug.  Return NOACPDEV to force
!		mount to abort rather than crash later on.
!
!	V03-008	STJ50311	Steven T. Jeffreys,	22-Feb-1983
!		Explicitly assign a channel to the first volume of a
!		tape volume set.
!
!	V03-007	CWH1002		CW Hobbs		19-Feb-1983
!		Change $CREPRC call so that we change the extended pid returned
!		by $CREPRC to the internal pid needed in the AQB.  Also change
!		$DELPRC and $WAKE to use the new pid.  Create a new local ACP_PID
!		which contains the EPID.
!
!	V03-006	CDS0003		Christian D. Saether	12-Jan-1983
!		Always flag the AQB for the xqp as unique so non-xqp
!		mounts don't stumble onto it and use the xqp when
!		an acp is desired.
!
!	V03-005	CDS0002		Christian D. Saether	 6-Jan-1983
!		The EXP$XQP translation is done in MOUNT_VOLUME now.
!
!	V03-004	CDS0001		C Saether		18-Jul-1982
!		- Put hooks in to allow initial testing of procedure based
!		file system.  To wit, if ods-2 and EXP$XQP translates,
!		then ignore acp options such as unique, etc., and leave
!		an AQB around with an ACPPID field of 0 to trigger a
!		different queueing mechanism in qio.  Don't create an
!		ACP either in that case.
!
!	V03-003	ACG47812	Andrew C. Goldstein,	20-Jul-1982  18:52
!		Supply explicit quotas in creating ACP mailbox
!
!	V03-002	STJ0313		Steven T. Jeffreys,	02-Jul-1982
!		Fix ACP process quota list bug.
!
!	V03-001	STJ0253		Steven T. Jeffreys,	03-Apr-1982
!		- Use the system process quota list when creating an ACP.
!		- Use common I/O routines where possible, and make the
!		  use of event flags more robust.
!		- Add ACP type code to ACP process name.
!
!	V02-004	STJ0191		Steven T. Jeffreys,	02-Feb-1982
!		Zero GLOBAL and OWN storage to guaranty restartablity.
!
!	V02-003 DMW0007		David Micahel Walp	10-Jun-1981
!		Use FIRST_CHANNEL instead of CHANNEL, for tapes in the
!		MOUNT QIOW.
!
!	V02-002 DMW0005		David Michael Walp	20-May-1981
!		Changed debugging terminal from _TTB1: to ACP$DEBUG_TERMINAL
!
!	V02-001	ACG0167		Andrew C. Goldstein,	18-Apr-1980  13:39
!		Previous revision history moved to MOUNT.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:MOUDEF.B32';

FORWARD ROUTINE
	SETUP_BLOCKCACHE,
	ALLOCATE_PAGED;

GLOBAL ROUTINE START_ACP (UCB, VCB, TYPE) : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine hooks up the VCB to the UCB being mounted, finds or
!	creates the AQB and starts up the ACP.
!
!
! CALLING SEQUENCE:
!	START_ACP (ARG1, ARG2, ARG3)
!
! INPUT PARAMETERS:
!	ARG1: address of UCB
!	ARG2: address of VCB
!	ARG3: type code of ACP wanted
!
! IMPLICIT INPUTS:
!	MOUNT parser database
!	CHANNEL: I/O channel assigned to device being mounted
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	device characteristics altered, VCB hooked up to UCB, ACP started
!
!--

BEGIN

MAP
	UCB		: REF BBLOCK,	! address of UCB being mounted
	VCB		: REF BBLOCK,	! address of VCB being mounted
	TYPE		: BYTE;		! type code of desired ACP

LINKAGE
	L_CVT_DEVNAM	= JSB (REGISTER = 0, REGISTER = 1, REGISTER = 5,
				REGISTER = 4; REGISTER = 1) :
			NOTUSED (6,7,8,9,10,11),

	IOC_SEARCH	= JSB (REGISTER = 4) :
			NOPRESERVE (2, 3, 5)
			GLOBAL (ACP_DEVICE = 1);

LABEL
	ACP_SEARCH;			! main ACP search loop

LITERAL
	TIMER_EFN	= MOUNT_EFN + 1,! EFN for timer request
	PQL_LENGTH	= 100,		! Size of local PQL length 
					!  Note: PQL_LENGTH >= PQL$C_SYSPQLLEN+6
	HALF_SECOND	= 5000000,	! 1/2 second in 100 nsec units
	ACP_UIC		= 1^16 + 3,	! UIC to run ACP's under [1,3]
	MAILBOX_CHARLEN	= 16,		! length of mailbox characteristics buffer
	TERM_BUFFER_LEN	= 8,		! length of termination message buffer
	PROCBUF_LEN	= 16,		! maximum length of ACP process name
	FILEBUF_LEN	= 64;		! maximum length of ACP file name

LOCAL
	FIRST_CHANNEL,			! channel assigned to 1st tape drive
	CREATE_ACP,			! ACP creation flag
	STATUS,				! general service status value
	CLASS		: BYTE,		! device class code for ACP sharing
	FILE_PREF	: REF VECTOR [,BYTE], ! address of ACP prefix string
	FILE_PREF_LEN,			! length of ACP prefix string
	SWAP_FLAG,			! ACP swap status flag
	WORKING_SET,			! working set quota for ACP
	ACP_PID,			! local extended pid for created ACP process
	ACP_TYPE	: VECTOR [2, BYTE], ! type string for ACP proc name
	ACP_UCB		: REF BBLOCK,	! UCB of ACP to be used
	RVT		: REF BBLOCK,	! address of disk RVT if multivolume
	AQB		: REF BBLOCK,	! address of AQB to be used
	P		: REF BBLOCK,	! pointer to chase AQB list
	QUOTA_LIST	: VECTOR [PQL_LENGTH, BYTE]; ! ACP quota list

OWN
	OWN_START	: VECTOR [0] 	ADDRESSING_MODE (GENERAL),	
					! Mark start of OWN storage
					! ACP termination buffer
	MAILBOX_CHAR	: BBLOCK [MAILBOX_CHARLEN] ADDRESSING_MODE (GENERAL),	
					! mailbox characteristics buffer
	MAILBOX_DESC	: VECTOR [2] 	ADDRESSING_MODE (GENERAL),	
					! mailbox characteristics buffer descriptor
	TERM_BUFFER	: VECTOR [TERM_BUFFER_LEN, BYTE] ADDRESSING_MODE (GENERAL),	
					! ACP termination message buffer
	PROC_NAME	: VECTOR [2] 	ADDRESSING_MODE (GENERAL),	
					! string descriptor of ACP process name
	PROCBUF		: VECTOR [PROCBUF_LEN, BYTE] ADDRESSING_MODE (GENERAL),	
					! string buffer for ACP process name
	FILE_NAME	: VECTOR [2] 	ADDRESSING_MODE (GENERAL),	
					! string descriptor of ACP file name
	FILEBUF		: VECTOR [FILEBUF_LEN, BYTE] ADDRESSING_MODE (GENERAL),	
					! string buffer for ACP file name
	IO_STATUS	: VECTOR [2] 	ADDRESSING_MODE (GENERAL),	
					! I/O status block
	
	! the following is a descriptor for the terminal used
	!  when debugging the ACP
	!
	TRANSBUF	: VECTOR [16, BYTE] ADDRESSING_MODE (GENERAL),	
	TRANSDESC	: VECTOR [ 2, LONG] ADDRESSING_MODE (GENERAL),	
	OWN_END		: VECTOR [0] ADDRESSING_MODE (GENERAL);
					! Mark end of OWN storage

LITERAL
	OWN_LENGTH	= OWN_END - OWN_START;


EXTERNAL LITERAL
	PQL$C_SYSPQLLEN;		! System process quota list length
					! (without the list terminator)
EXTERNAL
	CACHE_STATUS,			! status of block cache allocation
	STORED_CONTEXT	: BITVECTOR,
	PHYS_NAME	: VECTOR VOLATILE,
					! vector of physical device descriptors
	DEVICE_CHAR	: BBLOCK,	! DEVICE CHARACTERISTICS OF DEVICE BEING MOUNTED
	MOUNT_OPTIONS	: BITVECTOR,	! command options
	CLEANUP_FLAGS	: BITVECTOR,	! cleanup action flags
	CHANNEL,			! channel assigned to device
	MAILBOX_CHANNEL,		! channel number assigned to mailbox
	HOME_BLOCK	: BBLOCK,	! address of volume home block if disk
	ACP_STRING	: VECTOR,	! string descriptor of ACP device or name
	REAL_RVT	: REF BBLOCK,	! address of RVT used, if any
	REAL_AQB	: REF BBLOCK,	! address of AQB allocated
	REAL_WCB	: REF BBLOCK,	! address of index file window
	PQL$AB_SYSPQL	: BBLOCK ADDRESSING_MODE (GENERAL),
					! system process quota list
	CTL$GL_PCB	: REF BBLOCK ADDRESSING_MODE (GENERAL),
					! address of our PCB
	IOC$GL_AQBLIST	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE),
					! system AQB listhead
	EXE$GL_FLAGS	: BITVECTOR ADDRESSING_MODE (ABSOLUTE),
					! system flags longword
	ACP$GW_WORKSET	: WORD ADDRESSING_MODE (ABSOLUTE),
					! disk ACP working set
	ACP$GW_MAPCACHE	: WORD ADDRESSING_MODE (ABSOLUTE),
					! disk ACP bitmap cache size
	ACP$GW_HDRCACHE	: WORD ADDRESSING_MODE (ABSOLUTE),
					! disk ACP header cache size
	ACP$GW_DIRCACHE	: WORD ADDRESSING_MODE (ABSOLUTE),
					! disk ACP directory cache size
	ACP$GB_SWAPFLGS	: BITVECTOR ADDRESSING_MODE (ABSOLUTE),
					! ACP swap mode flags
	ACP$GB_BASEPRIO	: BYTE ADDRESSING_MODE (ABSOLUTE);
					! ACP base priority

EXTERNAL LITERAL
	EXE$V_MULTACP	: UNSIGNED (6),	! multiple ACP bit in system flags
	EXE$V_INIT	: UNSIGNED (6),	! ACP initialized bit in system flags
	ACP$V_SWAPSYS	: UNSIGNED (6),	! swap /SYSTEM (etc.) ACP's
	ACP$V_SWAPGRP	: UNSIGNED (6),	! swap /GROUP ACP's
	ACP$V_SWAPPRV	: UNSIGNED (6),	! swap private ACP's
	ACP$V_SWAPMAG	: UNSIGNED (6);	! swap magtape ACP's

EXTERNAL ROUTINE
	LOCK_IODB	: ADDRESSING_MODE (LONG_RELATIVE),
					! lock I/O database mutex
	UNLOCK_IODB	: ADDRESSING_MODE (LONG_RELATIVE),
					! unlock the above
	ALLOCATE_MEM,			! allocate system dynamic memory
	DEALLOCATE_MEM,			! deallocate same
	SET_DATACHECK,			! set data check attributes for volume
	IOC$CVT_DEVNAM	: L_CVT_DEVNAM ADDRESSING_MODE (ABSOLUTE),
					! get fully expanded device name
	IOC$SEARCHDEV	: IOC_SEARCH ADDRESSING_MODE (ABSOLUTE);
					! search I/O database for device


! Intialize the OWN storage.  Most of it will be zeroed, but some
! locations must be set nonzero.
!
CH$FILL (0, OWN_LENGTH, OWN_START);
MAILBOX_DESC [0] = MAILBOX_CHARLEN;
MAILBOX_DESC [1] = MAILBOX_CHAR;
TRANSDESC [0] = 16;
TRANSDESC [1] = TRANSBUF;
CACHE_STATUS  = 1;			

!
! Establish whether we are creating an ACP. This is controlled by
! the /PROCESSOR qualifier; the default is controlled by EXE$V_MULTACP
! in the system mask: either a common ACP for each type, or one ACP per
! device class per ACP type.
!
! An outer loop exists around this code to handle the situation where two
! users attempt to create the same common ACP (detected by seeing the
! AQB$V_CREATING bit in the found AQB). When this happens we simply wait
! a while and try all over. If the condition sticks for 30 seconds we
! give up on grounds of a sick I/O database.
!

UCB[UCB$L_VCB] = .VCB;			! set up VCB pointer in UCB

ACP_SEARCH: BEGIN
DECR J FROM 60 TO 1 DO
BEGIN

LOCK_IODB ();

CREATE_ACP = 0;				! assume no ACP creation

CLASS = .BBLOCK[.UCB[UCB$L_DDB], DDB$B_ACPCLASS];

! If this volume is part of a disk volume set and another volume is already
! mounted, use the ACP of that volume.
!

IF NOT .BBLOCK [UCB[UCB$L_DEVCHAR], DEV$V_SQD]
AND .REAL_RVT NEQ 0 AND .REAL_RVT[RVT$W_REFC] NEQ 1
THEN
    BEGIN
    IF (
	INCR J FROM 1 TO .REAL_RVT[RVT$B_NVOLS]
	DO
	    BEGIN
	    ACP_UCB = .VECTOR [REAL_RVT[RVT$L_UCBLST], .J-1];
	    IF .ACP_UCB NEQ 0 AND .ACP_UCB NEQ .UCB
	    THEN EXITLOOP 0;
	    END
	)
    THEN BUG_CHECK (NOTUCBRVT, FATAL, 'Failed to find UCB pointer in RVT');

    IF NOT .BBLOCK [ACP_UCB[UCB$L_DEVCHAR], DEV$V_MNT]
    THEN BUG_CHECK (NOTUCBRVT, FATAL, 'Bad UCB pointer in RVT');

    AQB = .BBLOCK [.ACP_UCB[UCB$L_VCB], VCB$L_AQB];
    IF .AQB[AQB$B_ACPTYPE] NEQ .TYPE
    THEN BUG_CHECK (NOTUCBRVT, FATAL, 'Bad UCB pointer in RVT');
    END

! If a unique ACP is explicitly requested, set to create one.
!

ELSE IF .MOUNT_OPTIONS[OPT_UNIQUEACP] OR .MOUNT_OPTIONS[OPT_FILEACP]
THEN CREATE_ACP = 1

! If the SAME qualifier was specified, find the device given and make sure
! it in fact has an ACP.
!

ELSE IF .MOUNT_OPTIONS[OPT_SAMEACP]
THEN
    BEGIN
	BEGIN
	GLOBAL REGISTER ACP_DEVICE = 1;
	ACP_DEVICE = ACP_STRING[0];
	STATUS = IOC$SEARCHDEV (.CTL$GL_PCB);
	ACP_UCB = .ACP_DEVICE;
	END;
    IF NOT .STATUS
    THEN
	BEGIN
	UNLOCK_IODB ();
	ERR_EXIT (MOUN$_NOACPDEV);
	END;
    IF NOT .BBLOCK [ACP_UCB[UCB$L_DEVCHAR], DEV$V_MNT]
    OR NOT .BBLOCK [ACP_UCB[UCB$L_DEVCHAR], DEV$V_FOD]
    OR .BBLOCK [ACP_UCB[UCB$L_DEVCHAR], DEV$V_FOR]
    THEN
	BEGIN
	UNLOCK_IODB ();
	ERR_EXIT (MOUN$_NOACPDEV);
	END;
    AQB = .BBLOCK [.ACP_UCB[UCB$L_VCB], VCB$L_AQB];
    IF .AQB[AQB$B_ACPTYPE] NEQ .TYPE
    THEN
	BEGIN
	UNLOCK_IODB ();
	ERR_EXIT (MOUN$_INCOMPACP);
	END;
    END

! Otherwise we use the default ACP (one ACP per class/type). Search the
! system AQB list for a suitable AQB (of the right type and marked system
! default or right type and class and marked class default).
!

ELSE
    BEGIN
    AQB = .IOC$GL_AQBLIST;
    UNTIL .AQB EQL 0 DO
	BEGIN
	IF .EXE$GL_FLAGS[EXE$V_MULTACP]
	THEN
	    BEGIN
	    IF .AQB[AQB$V_DEFCLASS]
	    AND .AQB[AQB$B_ACPTYPE] EQL .TYPE
	    AND .AQB[AQB$B_CLASS] EQL .CLASS
	    THEN
		EXITLOOP;
	    END
	ELSE
	    BEGIN
	    IF .AQB[AQB$V_DEFSYS]
	    AND .AQB[AQB$B_ACPTYPE] EQL .TYPE
	    THEN
		EXITLOOP;
	    END;
	AQB = .AQB[AQB$L_LINK];
	END;
    IF .AQB EQL 0 THEN CREATE_ACP = 1;
    END;

! If we are creating an ACP, now allocate the AQB thereto. Fill in the
! AQB and hook it into the system AQB list. Note that this must be done under
! the I/O database lock since the list is singly linked.
!

IF .CREATE_ACP
THEN
    BEGIN
    AQB = ALLOCATE_MEM (AQB$C_LENGTH, 0);
    AQB[AQB$B_TYPE] = DYN$C_AQB;
    AQB[AQB$B_MNTCNT] = 1;
    AQB[AQB$B_ACPTYPE] = .TYPE;

    IF .STORED_CONTEXT [XQP]
    THEN
	AQB [AQB$V_XQIOPROC] = 1
    ELSE

! Set the CREATING flag to interlock against multiple mounts trying
! to create the same ACP.  This interlock is not necessary when
! creating an AQB for an XQP file system because, for xqps, the IO database
! mutex is held until the AQB is completely initialized, whereas with
! an ACP, the mutex is released while the ACP process is being created.
!

	AQB[AQB$V_CREATING] = 1;

    IF .MOUNT_OPTIONS[OPT_UNIQUEACP] OR .MOUNT_OPTIONS[OPT_FILEACP]
    THEN
	AQB[AQB$V_UNIQUE] = 1
    ELSE IF .EXE$GL_FLAGS[EXE$V_MULTACP]
    THEN
	BEGIN
	AQB[AQB$V_DEFCLASS] = 1;
	AQB[AQB$B_CLASS] = .CLASS;
	END
    ELSE
	AQB[AQB$V_DEFSYS] = 1;

    AQB[AQB$L_ACPQFL] = AQB[AQB$L_ACPQFL];
    AQB[AQB$L_ACPQBL] = AQB[AQB$L_ACPQFL];
    AQB[AQB$L_LINK] = .IOC$GL_AQBLIST;
    IOC$GL_AQBLIST = .AQB;
    REAL_AQB = .AQB;
    CLEANUP_FLAGS[CLF_DELAQB] = 1;
    LEAVE ACP_SEARCH;
    END

! If we are not creating a new ACP then we have found an AQB to use. Check
! that it is not in transition. If OK, bump its mount count. Otherwise,
! release the I/O database mutex, wait a while, and try all over.
!

ELSE
    BEGIN
    IF NOT .AQB[AQB$V_CREATING]
    THEN
	BEGIN
	AQB[AQB$B_MNTCNT] = .AQB[AQB$B_MNTCNT] + 1;
	LEAVE ACP_SEARCH;
	END;
    END;

UNLOCK_IODB ();

! The AQB we want to use is in transition (i.e., it is a new ACP being created).
! Since this may or may not be successful, we cannot use it at this time.
! Time out and retry.
!

IF $SETIMR (REQIDT = 999, EFN = TIMER_EFN, DAYTIM = UPLIT (-HALF_SECOND, -1))
THEN 
    BEGIN
    $WAITFR (EFN = TIMER_EFN);
    $CANTIM (REQIDT = 999);
    $SETEF  (EFN = TIMER_EFN);
    END;

END;					! end of ACP search retry loop

! If we fall out of the loop, the AQB we want has been in transition for
! 10 seconds and is clearly in trouble.
!

ERR_EXIT (MOUN$_AQBTIME);

END;					! end of block ACP_SEARCH

IF NOT .CREATE_ACP
THEN
    UNLOCK_IODB ()
ELSE IF .AQB [AQB$V_XQIOPROC]
THEN
    BEGIN
    LOCAL
	CACHE_HDR	: REF BBLOCK,
	LENGTH;

    CLEANUP_FLAGS [CLF_UNLOCKDB] = 1;

    AQB [AQB$L_BUFCACHE] = SETUP_BLOCKCACHE (CACHE_STATUS);

    AQB [AQB$V_CREATING] = 0;
    CLEANUP_FLAGS [CLF_DELAQB] = 0;
    CLEANUP_FLAGS [CLF_UNLOCKDB] = 0;

    CACHE_HDR = .AQB [AQB$L_BUFCACHE];

    IOC$CVT_DEVNAM (15, CACHE_HDR [F11BC$T_CACHENAME] + 1, .UCB, 0; LENGTH);

    (CACHE_HDR [F11BC$T_CACHENAME])<0,8> = .LENGTH + 8;
    CH$MOVE (8, UPLIT BYTE ('XQPCACHE'),
		CACHE_HDR [F11BC$T_CACHENAME] + 1 + .LENGTH);

    UNLOCK_IODB ();

    END
ELSE

! Now create the ACP process if needed. Construct the process name from
! the device name and unit in the form ddcuACP; construct the
! ACP file name from the supplied name or the default name in the DDB.
! Note that the ACP file prefix depends upon whether or not a file system
! exists for the system disk. Normally, we use 'SYS$SYSTEM' but when this
! is the mount of the system disk, we use '[SYSEXE]' since FILEREAD doesn't
! do logical name translation.
!

    BEGIN

    UNLOCK_IODB ();

    PROC_NAME[0] = PROCBUF_LEN;
    PROC_NAME[1] = PROCBUF;
    ACP_TYPE[0] = 1;
    ACP_TYPE[1] = 'A' - 1 + .TYPE;

    $FAO (
	DESCRIPTOR ('!AC!UW!AC!AC'),
	PROC_NAME[0],
	PROC_NAME[0],
	BBLOCK [.UCB[UCB$L_DDB], DDB$T_NAME],
	.UCB[UCB$W_UNIT],
	ACP_TYPE,
	UPLIT BYTE (3, 'ACP')
	);

    IF .EXE$GL_FLAGS[EXE$V_INIT]
    THEN
	BEGIN
	FILE_PREF_LEN = %CHARCOUNT ('SYS$SYSTEM:');
	FILE_PREF = UPLIT BYTE ('SYS$SYSTEM:');
	END
    ELSE
	BEGIN
	FILE_PREF_LEN = %CHARCOUNT ('[SYSEXE]');
	FILE_PREF = UPLIT BYTE ('[SYSEXE]');
	END;

    FILE_NAME[1] = FILEBUF;
    IF .MOUNT_OPTIONS[OPT_FILEACP]
    THEN
	BEGIN
	FILE_NAME[0] = .ACP_STRING[0] + .FILE_PREF_LEN;
	CH$COPY (.FILE_PREF_LEN, .FILE_PREF, .ACP_STRING[0], .ACP_STRING[1],
		    0, .FILE_NAME[0], FILEBUF);
	END
    ELSE
	BEGIN
	FILE_NAME[0] = .FILE_PREF_LEN + 11;
	CH$COPY (.FILE_PREF_LEN, .FILE_PREF, 3, BBLOCK [.UCB[UCB$L_DDB], DDB$L_ACPD],
		    8, UPLIT BYTE ('AACP.EXE'),
		    0, .FILE_PREF_LEN+11, FILEBUF);
	IF .MOUNT_OPTIONS[OPT_IS_FILES11B]
	THEN (FILEBUF+.FILE_PREF_LEN+3)<0,8> = 'B';
	END;
    
! Create a mailbox which will receive the termination message in case the
! ACP bombs. The $GETCHN call is used to obtain the mailbox unit number.
!

    MAILBOX_CHANNEL = 0;
    STATUS = $CREMBX (CHAN   = MAILBOX_CHANNEL,
		      MAXMSG = 132,
		      BUFQUO = 132,
		      PROMSK = %X'FFED');	! system writable, owner readable
    IF NOT .STATUS THEN ERR_EXIT (.STATUS);
    CLEANUP_FLAGS[CLF_DEASSMBX] = 1;

    $GETCHN (CHAN   = .MAILBOX_CHANNEL,
	     PRIBUF = MAILBOX_DESC[0]);

    SWAP_FLAG = PRC$M_PSWAPM;
    IF .ACP$GB_SWAPFLGS[ (IF .DEVICE_CHAR[DEV$V_SQD] THEN ACP$V_SWAPMAG
			ELSE IF .AQB[AQB$V_DEFSYS] OR .AQB[AQB$V_DEFCLASS]
			     OR .MOUNT_OPTIONS[OPT_SYSTEM] THEN ACP$V_SWAPSYS
			ELSE IF .MOUNT_OPTIONS[OPT_GROUP] THEN ACP$V_SWAPGRP
			ELSE ACP$V_SWAPPRV
			)]
    THEN SWAP_FLAG = 0;

! Compute the working set quota for the ACP
!

    IF .DEVICE_CHAR[DEV$V_SQD]
    THEN
	WORKING_SET = 128		! working set for magtape ACP
    ELSE
	BEGIN
	WORKING_SET = .ACP$GW_WORKSET;	! working set for disk ACP
	IF .WORKING_SET EQL 0
	THEN WORKING_SET = .ACP$GW_MAPCACHE + .ACP$GW_HDRCACHE + .ACP$GW_DIRCACHE + 150;
	END;

    ! Make a local copy of the system quota list and append the calculated
    ! ACP working set quota to the end of the list.  As the system quota list
    ! may grow, take care to leave room for our custom quota entry.
    !

    CH$MOVE (MIN (PQL$C_SYSPQLLEN,(PQL_LENGTH-6)), PQL$AB_SYSPQL, QUOTA_LIST);
    (QUOTA_LIST+PQL$C_SYSPQLLEN)<0,8> = PQL$_WSQUOTA;
    (QUOTA_LIST+PQL$C_SYSPQLLEN+1)<0,32> = .WORKING_SET;
    (QUOTA_LIST+PQL$C_SYSPQLLEN+5)<0,8> = PQL$_LISTEND;

    ! for debugging the ACP
    !
    $TRNLOG ( LOGNAM = DESCRIPTOR ('ACP$DEBUG_TERMINAL'),
	      RSLLEN = TRANSDESC,
	      RSLBUF = TRANSDESC );

    STATUS = $CREPRC (
		    PIDADR = ACP_PID,		! get extended pid in local
		    IMAGE  = FILE_NAME[0],
		    PRCNAM = PROC_NAME[0],
		    QUOTA  = QUOTA_LIST,
		    PRVADR = UPLIT (-1,-1),
		    BASPRI = .ACP$GB_BASEPRIO,
		    UIC    = ACP_UIC,
		    MBXUNT = .MAILBOX_CHAR[DIB$W_UNIT],
		    STSFLG = (.SWAP_FLAG OR PRC$M_HIBER),	! hibernate immediately
		    INPUT  = TRANSDESC );	! DEBUG the ACP

    IF NOT .STATUS THEN ERR_EXIT (.STATUS);

! We created the process in the hibernate state because we need to twiddle the PID before it gets put in the AQB.
! $CREPRC has put an extended PID in ACP_PID, we need to convert the EPID to an internal PID for the AQB.  When
! this is done we can wake the ACP.
!
    BEGIN	! put a block around the routine declarations
    LINKAGE
	cvt_lnk = JSB (REGISTER=0) : PRESERVE (1,2,3,4,5) NOTUSED (6,7,8,9,10,11);
    EXTERNAL ROUTINE
	EXE$EPID_TO_IPID : cvt_lnk ADDRESSING_MODE (GENERAL);
    AQB[AQB$L_ACPPID] = EXE$EPID_TO_IPID (.ACP_PID);
    END;
    STATUS = $WAKE (PIDADR = ACP_PID);		! wake it up using the epid
    IF NOT .STATUS THEN ERR_EXIT (.STATUS);

! Now wait for the ACP to come up. We do this by sitting in a time out loop
! waiting for the transition bit in the AQB to clear, and also waiting for
! a message on the mailbox in case the ACP dies.
!

    $QIO (
	CHAN   = .MAILBOX_CHANNEL,
	FUNC   = IO$_READVBLK,
	EFN    = MOUNT_EFN,
	IOSB   = IO_STATUS[0],
	P1     = TERM_BUFFER,
	P2     = TERM_BUFFER_LEN
	);
    $SETEF (EFN = MOUNT_EFN);

    IF DECR J FROM 60 TO 1 DO
	BEGIN
	IF $SETIMR (REQIDT = 999, EFN = TIMER_EFN, DAYTIM = UPLIT (-HALF_SECOND, -1))
	THEN
	    BEGIN
 	    $WAITFR (EFN = TIMER_EFN);
	    $CANTIM (REQIDT = 999);
	    $SETEF (EFN = TIMER_EFN);
	    END;

	IF NOT .AQB[AQB$V_CREATING]
	THEN EXITLOOP 0;

	IF .IO_STATUS[0] NEQ 0
	THEN
	    BEGIN
	    IF NOT .IO_STATUS[0] THEN ERR_EXIT (.IO_STATUS[0]);
	    IF .TERM_BUFFER<0,16> EQL MSG$_DELPROC
	    THEN ERR_EXIT (.(TERM_BUFFER+4));

	    $QIO (
		CHAN = .MAILBOX_CHANNEL,
		FUNC = IO$_READVBLK,
		EFN  = MOUNT_EFN,
		IOSB = IO_STATUS[0],
		P1   = TERM_BUFFER,
		P2   = TERM_BUFFER_LEN
		);
	    $SETEF (EFN = MOUNT_EFN);
	    END;
	END				! end of ACP wait loop

! If we time out of the loop, the ACP is hung for some reason (such as that
! the image wasn't an ACP). Bomb it and clean up.
!

    THEN
	BEGIN
	$DELPRC (PIDADR = ACP_PID);	! blow it away using the extended pid
	ERR_EXIT (MOUN$_ACPTIME);
	END;

! The ACP is really and truly now up. Dispose of the mailbox.
!

    $DASSGN (CHAN = .MAILBOX_CHANNEL);
    CLEANUP_FLAGS[CLF_DEASSMBX] = 0;
    CLEANUP_FLAGS[CLF_DELAQB] = 0;
    END;				! end of ACP creation


! Enable the device and issue the MOUNT QIO.
!

UCB[UCB$V_MOUNTING] = 1;
VCB[VCB$L_AQB] = .AQB;

IF NOT .DEVICE_CHAR[DEV$V_SQD] 
THEN
    BEGIN
    IF .MOUNT_OPTIONS[OPT_IS_FILES11B]
    THEN SET_DATACHECK (.UCB, HOME_BLOCK)
    ELSE SET_DATACHECK (.UCB, 0);
	
    !
    ! To prevent the race condition between a simultaneous mount and a 
    ! dismount, "deallocate" the device if this is not a private mount.
    ! This ensures that the dismount processing in the file system will 
    ! see a consistent I/O database, i.e. UCB$L_PID accurately reflects
    ! how the volume is mounted, even while mount is in progress.
    !
    IF  ( NOT .MOUNT_OPTIONS [OPT_NOSHARE] )		! and non-private mounts
    AND ( .UCB [UCB$L_PID] NEQ 0 )			! and device "allocated", i.e.
    THEN						!   mount is in progress
	BEGIN
	LOCK_IODB ();					! Lock I/O database
	UCB [UCB$L_PID] = 0;				! "Deallocate" the device
	BBLOCK [ UCB [UCB$L_DEVCHAR], DEV$V_ALL ] = 0;
	UCB [UCB$W_REFC] = .UCB [UCB$W_REFC] - 1;
	UNLOCK_IODB ();
	END;

    STATUS = DO_IO (CHAN = .CHANNEL,
		    FUNC = IO$_MOUNT,
		    IOSB = IO_STATUS[0]
		    );
    END
ELSE
    BEGIN
    !
    ! Use the 1st device for tapes
    !
    IF (STATUS = $ASSIGN (CHAN = FIRST_CHANNEL, DEVNAM = PHYS_NAME[0]))
    THEN
	STATUS = DO_IO (CHAN = .FIRST_CHANNEL,
			FUNC = IO$_MOUNT,
			IOSB = IO_STATUS[0]
		       );
    $DASSGN (CHAN = .FIRST_CHANNEL);
    END;

! If the MOUNT QIO directive fails, just unhook the VCB and drop the mount
! count in the AQB. If the AQB count goes to zero, wake the ACP who will
! clean himself up in the proper manner. This must be done this way to avoid
! timing windows which could conceivably lose I/O packets.
!

IF .STATUS THEN STATUS = .IO_STATUS[0];
IF NOT .STATUS
THEN
    BEGIN
    LOCK_IODB ();
    UCB[UCB$V_MOUNTING] = 0;
    UCB[UCB$L_VCB] = 0;
    AQB[AQB$B_MNTCNT] = .AQB[AQB$B_MNTCNT] - 1;

    !
    ! We marked the device as "not allocated" prior to issuing
    ! the MOUNT QIO. Now that the QIO failed, restore the UCB
    ! to its original state so that the device deallocation
    ! routine (in module ASSIST) can deallocate this device and 
    ! release the device lock.
    !
    IF  ( NOT .MOUNT_OPTIONS [OPT_NOSHARE] )		! For non-private mounts
    THEN						
	BEGIN
	UCB [UCB$L_PID] = .CTL$GL_PCB [PCB$L_PID];	! Re-allocate the device
	BBLOCK [ UCB [UCB$L_DEVCHAR], DEV$V_ALL ] = 1;
	UCB [UCB$W_REFC] = .UCB [UCB$W_REFC] + 1;
	END;

    UNLOCK_IODB ();
    IF .AQB[AQB$B_MNTCNT] EQL 0 AND NOT .AQB [AQB$V_XQIOPROC]
    THEN

! The AQB$L_ACPPID contains an internal pid, we must convert to extended pid to call the
! $WAKE service.
!
	BEGIN
	LINKAGE
	    cvt_lnk = JSB (REGISTER=0) : PRESERVE (1,2,3,4,5) NOTUSED (6,7,8,9,10,11);
	EXTERNAL ROUTINE
	    EXE$IPID_TO_EPID : cvt_lnk ADDRESSING_MODE (GENERAL);
	ACP_PID = EXE$IPID_TO_EPID (.AQB[AQB$L_ACPPID]);
	$WAKE (PIDADR = ACP_PID);
	END;
    ERR_EXIT (.STATUS);
    END;

END;					! end of routine START_ACP


ROUTINE SETUP_BLOCKCACHE (STATUS) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine allocates dynamic memory and initializes it for
!	use as the block cache for the AQB desired.
!
! CALLING SEQUENCE:
!
!	SETUP_BLOCKCACHE (ARG1)
!
! INPUT PARAMETERS:
!	
!	ARG1 :	Address of a longword to receive the cache 
!		allocation status
!
! IMPLICIT INPUTS:
!
!	None.
!
! IMPLICIT OUTPUTS:
!
!	ARG1 :	1 if the block cache allocated 
!		0 if a reduced block cache is allocated
!
! ROUTINE VALUE:
!
!	Address of initialized buffer cache.
!
! SIDE EFFECTS:
!
!--

BEGIN

MACRO
	QA (SIZE) = (((SIZE) + 15) AND NOT 15) %,	! Quad Align
	FLNK = 0,0,32,0 %,
	BLNK = 4,0,32,0 %;

BUILTIN INSQUE;

EXTERNAL ROUTINE
	ALLOCATE_MEM;

EXTERNAL
	ACP$GW_MAPCACHE	: WORD ADDRESSING_MODE (GENERAL),
	ACP$GW_HDRCACHE	: WORD ADDRESSING_MODE (GENERAL),
	ACP$GW_DIRCACHE	: WORD ADDRESSING_MODE (GENERAL),
	ACP$GW_DINDXCACHE : WORD ADDRESSING_MODE (GENERAL);

LOCAL
	MAP_COUNT,
	HDR_COUNT,
	DIR_COUNT,
	DINDX_COUNT,
	BFRCOUNT,
	BUFFER_BYTES,
	OVRHD_BYTES,
	TOTAL_BYTES,
	EOMEM,
	HSHTBLS,
	INDX,
	BFRD		: REF BLOCKVECTOR [,BFRD$S_BFRDDEF,BYTE],
	BFRL		: REF BLOCKVECTOR [,BFRL$S_BFRLDEF,BYTE],
	CACHE_HDR	: REF BBLOCK;

.STATUS = 1;					! Assume succesful allocation
MAP_COUNT = MAXU (1, .ACP$GW_MAPCACHE);
HDR_COUNT = MAXU (3, .ACP$GW_HDRCACHE);
DIR_COUNT = MAXU (2, .ACP$GW_DIRCACHE);
DINDX_COUNT = MAXU (1, .ACP$GW_DINDXCACHE);

BFRCOUNT = .MAP_COUNT + .HDR_COUNT + .DIR_COUNT + .DINDX_COUNT;

IF .BFRCOUNT GTRU (2^15 - 2)
THEN
    BEGIN
    MAP_COUNT = (2^15/6) - 1;
    DINDX_COUNT = (2^15/6) - 1;
    HDR_COUNT = (2^16/6) - 1;
    DIR_COUNT = (2^16/6) - 1;
    BFRCOUNT = .MAP_COUNT + .HDR_COUNT + .DIR_COUNT + .DINDX_COUNT;
    END;

BUFFER_BYTES = .BFRCOUNT*512;

OVRHD_BYTES = QA (F11BC$S_F11BCDEF)		! Overall cache header
		+ QA (.BFRCOUNT*BFRD$S_BFRDDEF) ! plus descriptors
		+ QA (.BFRCOUNT*BFRL$S_BFRLDEF)	! plus buffer lock blocks
		+ QA (.BFRCOUNT*2)		! plus LBN hash table
		+ QA (.BFRCOUNT*2);		! plus buffer lock hash table.

! Add up total requirements, plus add 1 page so we can line the buffers
! up on page boundaries.
!

TOTAL_BYTES = .BUFFER_BYTES + .OVRHD_BYTES + 512;

CACHE_HDR = ALLOCATE_PAGED (.TOTAL_BYTES);	! Allocate cache from paged pool

IF .CACHE_HDR EQL 0
THEN
    BEGIN
    !
    ! The full block cache allocation has failed due to insufficient paged
    ! pool. Retry to allocate a reduced block cache with the following:
    !
    !	MAP_COUNT = 2;
    !   HDR_COUNT = 6;
    !   DIR_COUNT = 4;
    !   DINDX_COUNT = 2;
    ! 
    ! If the reduced block cache is successfully allocated, set the proper
    ! status in the argument of this routine. Otherwise, the allocation
    ! routine will signal an error, and the mount will fail with an "insuf-
    ! ficient dynamic memory" error.
    !
    MAP_COUNT = 2;
    HDR_COUNT = 6;
    DIR_COUNT = 4;
    DINDX_COUNT = 2;
    BFRCOUNT = .MAP_COUNT + .HDR_COUNT + .DIR_COUNT + .DINDX_COUNT;
    BUFFER_BYTES = .BFRCOUNT*512;
    OVRHD_BYTES = QA (F11BC$S_F11BCDEF)		! Overall cache header
		+ QA (.BFRCOUNT*BFRD$S_BFRDDEF) ! plus descriptors
		+ QA (.BFRCOUNT*BFRL$S_BFRLDEF)	! plus buffer lock blocks
		+ QA (.BFRCOUNT*2)		! plus LBN hash table
		+ QA (.BFRCOUNT*2);		! plus buffer lock hash table.
    TOTAL_BYTES = .BUFFER_BYTES + .OVRHD_BYTES + 512;
    CACHE_HDR = ALLOCATE_MEM (.TOTAL_BYTES,1);	! Allocate cache from paged pool
    .STATUS = 0;				! Set reduced cache status
    END;

CACHE_HDR [F11BC$L_REALSIZE] = .(CACHE_HDR [F11BC$W_SIZE])<0,32>;

%IF F11BC$K_NUM_POOLS NEQ 4
%THEN %WARN ('Bad pool count constant');
%FI

BEGIN

BIND
	POOL_LRU	= CACHE_HDR [F11BC$Q_POOL_LRU] : BLOCKVECTOR [,8,BYTE],
	POOL_WAITQ	= CACHE_HDR [F11BC$Q_POOL_WAITQ] : BLOCKVECTOR [,8,BYTE],
	POOLCNT		= CACHE_HDR [F11BC$W_POOLCNT] : VECTOR [,WORD],
	POOLAVAIL	= CACHE_HDR [F11BC$L_POOLAVAIL] : VECTOR;

POOLCNT [0] = POOLAVAIL [0] = .MAP_COUNT;
POOLCNT [1] = POOLAVAIL [1] = .DIR_COUNT;
POOLCNT [2] = POOLAVAIL [2] = .HDR_COUNT;
POOLCNT [3] = POOLAVAIL [3] = .DINDX_COUNT;

CACHE_HDR [F11BC$W_BFRCNT] = .BFRCOUNT;

CACHE_HDR [F11BC$W_SIZE] = F11BC$S_F11BCDEF;
CACHE_HDR [F11BC$B_TYPE] = DYN$C_PGD;
CACHE_HDR [F11BC$B_SUBTYPE] = DYN$C_PGD_F11BC;

EOMEM = (.CACHE_HDR + .CACHE_HDR [F11BC$L_REALSIZE]) AND NOT 511;

CACHE_HDR [F11BC$L_BUFBASE] = .EOMEM - .BUFFER_BYTES;
CACHE_HDR [F11BC$L_BUFSIZE] = .BUFFER_BYTES;

BFRD = (CACHE_HDR [F11BC$L_BFRDBAS] = QA (.CACHE_HDR + F11BC$S_F11BCDEF));

BFRL = (CACHE_HDR [F11BC$L_BFRLDBAS] = QA (.BFRD + .BFRCOUNT*BFRD$S_BFRDDEF));

HSHTBLS = .BFRL + .BFRCOUNT*BFRL$S_BFRLDEF;
CACHE_HDR [F11BC$L_LBNHSHBAS] = .HSHTBLS;
CACHE_HDR [F11BC$W_LBNHSHCNT] = (.CACHE_HDR [F11BC$L_BUFBASE] - .HSHTBLS)/4;

CACHE_HDR [F11BC$L_BLHSHBAS] = .CACHE_HDR [F11BC$L_LBNHSHBAS]
				+ .CACHE_HDR [F11BC$W_LBNHSHCNT]*2;
CACHE_HDR [F11BC$W_BLHSHCNT] = .CACHE_HDR [F11BC$W_LBNHSHCNT];

! Run through all the buffer descriptors and link them into the appropriate
! pool, noting in each descriptor which pool it belongs to.
!

CACHE_HDR [F11BC$W_FREEBFRL] = 1;

INDX = 0;

INCR POOL FROM 0 TO 3
DO
    BEGIN

    POOL_LRU [.POOL, FLNK] = POOL_LRU [.POOL, FLNK];
    POOL_LRU [.POOL, BLNK] = POOL_LRU [.POOL, FLNK];

    POOL_WAITQ [.POOL, FLNK] = POOL_WAITQ [.POOL, FLNK];
    POOL_WAITQ [.POOL, BLNK] = POOL_WAITQ [.POOL, FLNK];

    INCR I FROM 0 TO .POOLCNT [.POOL] - 1
    DO
	BEGIN
	INSQUE (BFRD [.INDX, BFRD$L_QFL], .POOL_LRU [.POOL, BLNK]);
	BFRD [.INDX, BFRD$V_POOL] = .POOL;
	BFRL [.INDX, BFRL$W_NXTBFRL] = .INDX + 2;
	INDX = .INDX + 1;
	END;
    END;

BFRL [.INDX-1, BFRL$W_NXTBFRL] = 0;

.CACHE_HDR

END
END;



ROUTINE ALLOCATE_PAGED (SIZE_NEEDED) =
	
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This is a local paged pool allocation routine for module STACP.
! 	Functionally, it is identical to the ALLOCATE_MEM routine. The
!	difference is that on an allocation failure, this routine return
!	a 0 to the caller rather than signalling an error.
!
!
! CALLING SEQUENCE:
!
!	ALLOCATE_PAGED (ARG1)
!
! INPUT PARAMETERS:
!
!	ARG1: size needed in bytes
!
! IMPLICIT INPUTS:
!
!	None.
!
! OUTPUT PARAMETERS:
!
!	None.
!
! IMPLICIT OUTPUTS:
!
!	None.
!
! ROUTINE VALUE:
!
!	Address of block allocated. If the allocation failed, the routine
!	value returned is 0.
!
! SIDE EFFECTS:
!
!	Memory allocated, zeroed, and full longword size is stored
!	at size word location.
!
!--

BEGIN

LINKAGE
	EXE_ALLOC0	= JSB :
			NOPRESERVE (3, 4, 5)
			GLOBAL (SIZE = 1, ADDRESS = 2);

LOCAL
	STATUS,				! status return of allocator
	BLOCK_SIZE,			! local copy of size allocated
	BLOCK_ADDRESS;			! local copy of address

BEGIN					! nested block to avoid scope conflicts

GLOBAL REGISTER
	SIZE		= 1,		! rounded up allocation size
	ADDRESS		= 2 : REF VECTOR [,WORD]; ! address returned by exec routines

EXTERNAL ROUTINE
	EXE$ALOPAGED	: EXE_ALLOC0 ADDRESSING_MODE (ABSOLUTE);


! Simply compute the size needed rounded up to the next quadword and call the
! appropriate exec allocation routine.
!

SIZE = .SIZE_NEEDED;

STATUS = EXE$ALOPAGED ();

! Copy the block size and address into locals to dodge the MOVC5.
!

BLOCK_SIZE = .SIZE;
BLOCK_ADDRESS = .ADDRESS;
END;

IF NOT .STATUS
THEN
    RETURN 0;

CH$FILL (0, .BLOCK_SIZE, .BLOCK_ADDRESS);
(.BLOCK_ADDRESS + 8) = .BLOCK_SIZE;
RETURN .BLOCK_ADDRESS;
	
END;					! end of routine ALLOCATE_MEM

END
ELUDOM
