MODULE CNFWORKQ (IDENT = 'V04-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  DECnet Configurator Module, (NICONFIG)
!
! ABSTRACT:
!
!	This module contains routines to manage the internal
!	work queue.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Tim Halvorsen, June 1980
!
! Modified by:
!
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:STARLET';		! VAX/VMS common definitions

REQUIRE 'SYS$LIBRARY:UTILDEF';		! Misc. VMS definitions

REQUIRE 'LIB$:CNFWQDEF';		! Structure definitions

!
! Table of contents
!

FORWARD ROUTINE
    wkq$add_work_item,			! Add a work item
    wkq$do_work_item;			! Dequeue and execute a work item

!
! BUILTIN functions
!

BUILTIN
    INSQUE,				! INSQUE instruction
    REMQUE;				! REMQUE instruction

!
! OWN storage
!

OWN
    work_queue:		VECTOR [2]	! Work queue listhead
			INITIAL(work_queue,work_queue),
    timed_queue:	VECTOR [2]	! Timed work queue listhead
			INITIAL(timed_queue,timed_queue);

!
! External routines
!

EXTERNAL ROUTINE
    CNF$GET_ZVM: ADDRESSING_MODE(GENERAL),	! Allocate storage
    CNF$FREE_VM: ADDRESSING_MODE(GENERAL);	! Deallocate storage

GLOBAL ROUTINE wkq$add_work_item (action_routine, arg1, arg2, arg3) =

!---
!
!	This routine adds a single work item to the work queue.
!	A $WAKE is performed for the first work item added.
!
! Inputs:
!
!	action_routine = Address of routine to call to perform work.
!	arg1/2/3 = Arguments to be passed to action routine when called.
!
! Outputs:
!
!	routine = status code
!---

BEGIN

LOCAL
    length,				! Length of allocate/deallocation
    entry:	REF BBLOCK;		! Address of work queue entry

length = wqe$c_length;			! Length of a work queue entry
return_if_error(CNF$GET_ZVM(length,entry));	! Allocate entry

entry [wqe$l_pc] = .action_routine;	! Store address of action routine
entry [wqe$l_arg1] = .arg1;		! then store 3 arguments
entry [wqe$l_arg2] = .arg2;		! 
entry [wqe$l_arg3] = .arg3;		! assume all arguments must be given

IF INSQUE(.entry, .work_queue [1])	! Queue entry at tail of list
THEN
    $WAKE();				! If first, wakeup process

RETURN true;

END;

GLOBAL ROUTINE wkq$do_work_item =

!---
!
!	This routine dequeues the next work item to be performed
!	and calls the action routine associated with the item.
!
! Inputs:
!
!	None
!
! Outputs:
!
!	routine = True if successful, false if nothing in queue
!---

BEGIN

LOCAL
    length,				! Length of work queue entry
    entry:	REF BBLOCK;		! Address of entry in queue

IF REMQUE(.work_queue [0], entry) 	! Remove first entry from queue
THEN
    RETURN false;			! If none, return unsuccessful

(.entry [wqe$l_pc])(.entry [wqe$l_arg1], 
	.entry [wqe$l_arg2], .entry [wqe$l_arg3]); ! Call routine

length = wqe$c_length;
CNF$FREE_VM(length, entry);		! Deallocate entry

RETURN true;

END;

END
ELUDOM
