%TITLE 'EDT$LSET - SET line-mode command'
MODULE EDT$LSET (				! SET line-mode command
		IDENT = 'V04-000'			! File: LSET.BLI Edit: REM1046
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module executes the line mode SET command.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: February 3, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 28-JAN-1981.  This module was created by
!	extracting the routine EDT$$SET_CMD  from the module EXEC.BLI.
! 1-002	- Regularize headers.  JBS 20-Mar-1981
! 1-003	- Use the ASSERT macro.  JBS 01-Jun-1981
! 1-004 - Implement virtual memory deallocation TMV 6-Aug-81
! 1-005	- Use the new message codes.  JBS 06-Aug-1981
! 1-006 - Add set command for repeat/norepeat. STS 26-Aug-1981
! 1-007 - Add set command for fnf/nofnf TMV 10-Sept-1981
! 1-008	- Correct SET SEARCH command.  JBS 29-Sep-1981
! 1-009 - Add SET [NO]SUMMARY command, the SET SEARCH WPS command and put
!	  in a stub for SET PROMPT. STS 01-Oct-1981
! 1-010 - Set up proper search routine with set search WPS. STS 02-Oct-1981
! 1-011 - Add set up of text for page and end. STS 06-Oct-1981
! 1-012 - Don't allow escape or control chars for set text string . STS 20-Oct-1981
! 1-013 - Don't allow characters with ascii rep > delete either. STS 20-Oct-1981
! 1-014	- Implement SET PROMPT.  JBS 21-Oct-1981
! 1-015 - Add set word and Set para. STS 22-Oct-1981
! 1-016	- Add four more prompts and increase their lengths.  JBS 23-Oct-1981
! 1-017 - Remove check to see if we have the original strings when allocating
!         memory for text and entity strings. STS 06-Nov-1981
! 1-018	- Add setting and clearing of EDT$$G_ENB_AUTRPT.  JBS 10-Feb-1982
! 1-019	- Add more range checking.  JBS 10-Feb-1982
! 1-020	- Correct range checks -- MAX and MIN confusion.  JBS 13-Feb-1982
! 1-021 - Perform aux keypad enable/disable on SET [NO]KEYPAD.  SMB 23-Feb-1982
! 1-022 - Only enable/disable numeric keypad if an EXT command.  SMB 26-Feb-1982
! 1-023	- Add range checks to some SET commands.  JBS 10-Mar-1982
! 1-024	- Correct the reversed test is SET CURSOR.  JBS 11-Mar-1982
! 1-025	- Add SET COMMAND.  JBS 04-May-1982
! 1-026	- Respond to error return from EDT$SET_HLPFNAM.  JBS 04-May-1982
! 1-027 - Take out setting of EDT$$G_HELP_SET.  SMB 27-May-1982
! 1-028	- Call EDT$$SET_COMFNAM on SET COMMAND.  JBS 07-Jun-1982
! 1-029	- Don't allow SET COMMAND with no argument.  JBS 08-Jun-1982
! 1-030 - Remove prompt PRTC. STS 07-Jul-1982
! 1-031 - Force CR,LF into first 2 prompt character positions.  SMB 15-Jul-1982
! 1-032	- Add new string search options.  JBS 19-Jul-1982
! 1-033 - Call a routine to set screen width.  SMB 29-Jul-1982
! 1-034	- Change the interface to EDT$$SET_COMFNAM.  JBS 23-AUG-1982
! 1-035	- Add more SET TERM commands.  JBS 02-Sep-1982
! 1-036 - Conditionalize screen changed settings.  SMB 11-Sep-1982
! 1-037	- New screen update logic.  JBS 13-Sep-1982
! 1-038	- Change EDT$$G_SCR_CHGD to EDT$$G_SCR_REBUILD in a few places.  JBS 09-Oct-1982
! 1-039	- Repaint the screen if any terminal parameter is changed.  JBS 01-Dec-1982
! 1-040 - Don't allow changing of terminal type from change mode. STS 13-Dec-1982
! 1-041	- Rebuild the screen data base on SET SCREEN.  JBS 15-Dec-1982
! 1-042	- Remove unused reference to EDT$$ERA_MSGLN.  JBS 20-Jan-1983
! 1-043	- Add conditionals for WPS and VT220 support.  JBS 10-Feb-1983
! 1-044	- Don't let SET TEXT PAGE be longer than 26 characters, else it is hard
!	   to display a record containing 255 form feeds in notruncate mode on
!	   80-character terminals.  JBS 14-Jul-1983
! 1-045	- Don't let SET SCREEN be 0.  JBS 19-Sep-1983
! 1-046 - Set EDT$$G_DEC_CRT when user does a SET TERMINAL VT100, VT52,
!	  HCPY, or EIGHTBIT.  REM 19-Apr-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$SET_CMD : NOVALUE;			! Process the SET command

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

LIBRARY 'EDTSRC:SUPPORTS';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

BIND
    KEYPAD_MODE = UPLIT (%STRING (%CHAR (ASC_K_ESC), '=')),
    NOKEYPAD_MODE = UPLIT (%STRING (%CHAR (ASC_K_ESC), '>'));

LITERAL
    KEYPAD_MODE_LEN = 2,
    NOKEYPAD_MODE_LEN = 2;

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$SET_CMD  - SET line-mode command'

GLOBAL ROUTINE EDT$$SET_CMD 			! SET line-mode command
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Command processing routine for SET.  The SET_TYPE field
!	contains an index identifying the type of SET command;
!	case on it and handle the particular command.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$A_US_ENT
!	EDT$$A_US_TXT
!	EDT$$G_SCR_LNS
!	EDT$$A_EXE_CURCMD
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_NOS
!	EDT$$G_CAS_FLG
!	EDT$$G_EXCT_MATCH
!	EDT$$G_SEA_BEG
!	EDT$$G_SEA_BNDD
!	EDT$$G_TI_TYP
!	EDT$$G_VFY
!	EDT$$G_TRUN
!	EDT$$G_KPAD
!	EDT$$G_SCR_CHGD
!	EDT$$G_SCR_REBUILD
!	EDT$$G_WD_WRAP
!	EDT$$G_SCLL_BOT
!	EDT$$G_SCLL_TOP
!	EDT$$G_TI_WID
!	EDT$$G_EDIT_DFLTMOD
!	EDT$$G_SCR_LNS
!	EDT$$A_US_ENT
!	EDT$$A_US_TXT
!	EDT$$G_QUIET
!	EDT$$G_RPT
!	EDT$$G_FNF_MSGFLG
!	EDT$$G_TAB_SIZ
!	EDT$$G_TAB_LVL
!	EDT$$G_SUMRY
!	EDT$$G_ENB_AUTRPT
!	EDT$$T_PMT_LINE
!	EDT$$T_PMT_KPD
!	EDT$$T_PMT_NOKPD
!	EDT$$T_PMT_HCCHG
!	EDT$$T_PMT_INS
!	EDT$$T_PMT_INSN
!	EDT$$T_PMT_QUERY
!	EDT$$G_WRDTYP
!	EDT$$G_PARTYP
!	EDT$$G_DEC_CRT
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$SC_SETWID,
	EDT$$FMT_LIT,
	EDT$$OUT_FMTBUF,
	EDT$$FMT_MSG,
	EDT$$SET_HLPFNAM,
	EDT$$SET_COMFNAM,		! Set the command file name
	EDT$$ALO_HEAP,			! Allocate heap storage
	EDT$$DEA_HEAP : NOVALUE,	! Deallocate heap storage
	EDT$$CNV_UPC;			! Convert characters to upper case

    EXTERNAL
	EDT$$G_EXT_MOD,
	EDT$$G_CAS_FLG,
	EDT$$G_EDIT_DFLTMOD,
	EDT$$G_FNF_MSGFLG,
	EDT$$A_US_ENT : VECTOR,
	EDT$$G_RPT,
	EDT$$A_US_TXT : VECTOR,
	EDT$$G_EXCT_MATCH,
	EDT$$G_KPAD,
	EDT$$G_NOS,
	EDT$$G_SEA_BEG,
	EDT$$G_SEA_BNDD,
	EDT$$G_SCR_CHGD,		! The screen has been mangled, it must be repainted from scratch
	EDT$$G_SCR_REBUILD,		! The text area of the screen must be rebuilt from the work file
	EDT$$G_SCR_LNS,
	EDT$$G_SCLL_BOT,
	EDT$$G_SCLL_TOP,
	EDT$$G_QUIET,
	EDT$$G_TAB_SIZ,
	EDT$$G_TAB_LVL,
	EDT$$G_TRUN,
	EDT$$G_TI_TYP,
	EDT$$G_DEC_CRT,			! Terminal service class specifier
	EDT$$G_TI_WID,
	EDT$$G_VFY,
	EDT$$G_WD_WRAP,

%IF SUPPORT_WPS
%THEN
	EDT$$G_WRDTYP,			! flag indicating word with delimiter or not
	EDT$$G_PARTYP,			! flag indicating wps para or not
	EDT$$G_SUMRY,			! output summary on exit flag
%FI

	EDT$$G_ENB_AUTRPT,		! 1 = maniuplate auto-repeat on VT100, 0 = don't
	EDT$$G_TI_SCROLL,		! 1 = terminal has scrolling regions

%IF SUPPORT_VT220
%THEN
	EDT$$G_EIGHT_BIT,		! 1 = this is an eight-bit terminal
%FI

	EDT$$G_TI_EDIT,				! 1 = this terminal has editing features (ICM, DCH, IL, DL)
	EDT$$A_EXE_CURCMD : REF NODE_BLOCK,	! Pointer to the current command.
	EDT$$T_PMT_LINE : VECTOR [32, BYTE],	! Counted ASCII string of line-mode prompt
	EDT$$T_PMT_KPD : VECTOR [32, BYTE],	! Counted ASCII string of keypad prompt
	EDT$$T_PMT_NOKPD : VECTOR [32, BYTE],	! Counted ASCII string of nokeypad prompt
	EDT$$T_PMT_HCCHG : VECTOR [32, BYTE],	! Counted ASCII string of hard copy change mode prompt
	EDT$$T_PMT_INS : VECTOR [32, BYTE],	! Counted ASCII string of line-mode insert prompt
	EDT$$T_PMT_INSN : VECTOR [32, BYTE],	! Counted ASCII string of line-mode insert nonumbers prompt
	EDT$$T_PMT_QUERY : VECTOR [32, BYTE],	! Counted ASCII string of /QUERY prompt
	EDT$$T_CMD_NAM_DEF4;			! Default name for command file

    MESSAGES ((INSMEM, INVSTR, NOSETTRM, NUMVALILL));
!

    CASE .EDT$$A_EXE_CURCMD [SET_TYPE] FROM 1 TO 36 OF
	SET

	[1] : 					! Set numbers
	    EDT$$G_NOS = 1;

	[2] : 					! Set nonumbers
	    EDT$$G_NOS = 0;

	[3] : 					! Set case
	    EDT$$G_CAS_FLG = .EDT$$A_EXE_CURCMD [SET_VAL] - 1;

	[4] : 					! Set search

	    CASE .EDT$$A_EXE_CURCMD [SET_VAL] FROM 1 TO 11 OF
		SET

		[1] : 				! General
		    EDT$$G_EXCT_MATCH = 0;

		[2] : 				! Exact
		    EDT$$G_EXCT_MATCH = 1;

		[3, 4] : 			! Begin/End
		    EDT$$G_SEA_BEG = .EDT$$A_EXE_CURCMD [SET_VAL] - 3;

		[5, 6] : 			! Bounded/Unbounded
		    EDT$$G_SEA_BNDD = .EDT$$A_EXE_CURCMD [SET_VAL] - 5;

		[7] : 				! WPS type search
		    EDT$$G_EXCT_MATCH = 2;

		[8, 10] : 			! CI or CASE INSENSITIVE
		    EDT$$G_EXCT_MATCH = 3;

		[9, 11] : 			! DI or DIACRITICAL INSENSITIVE
		    EDT$$G_EXCT_MATCH = 4;

		[OUTRANGE] :
		    ASSERT (0);
		TES;

	[5] : 					! Terminal
	    BEGIN

	    IF (.EDT$$G_EXT_MOD AND (.EDT$$A_EXE_CURCMD [SET_VAL] LSS 4))
	    THEN
		EDT$$FMT_MSG (EDT$_NOSETTRM)
	    ELSE
		BEGIN

		CASE .EDT$$A_EXE_CURCMD [SET_VAL] FROM 1 TO 9 OF
		    SET

		    [1] : 			! VT52
			BEGIN
			EDT$$G_DEC_CRT = 0;	! indicate service class 0
			EDT$$G_TI_TYP = TERM_VT52;
			EDT$$G_TI_SCROLL = 0
			END;

		    [2] : 			! VT100
			BEGIN
			EDT$$G_DEC_CRT = 1;	! indicate service class 1
			EDT$$G_TI_TYP = TERM_VT100;
			EDT$$G_TI_SCROLL = 1
			END;

		    [3] : 			! HCPY
			BEGIN
			EDT$$G_DEC_CRT = 0;	! indicate service class 0
			EDT$$G_TI_TYP = TERM_HCPY
			END;

		    [4] : 			! SCROLL
			EDT$$G_TI_SCROLL = 1;

		    [5] : 			! NOSCROLL
			EDT$$G_TI_SCROLL = 0;

		    [6] : 			! EIGHTBIT
			BEGIN

%IF SUPPORT_VT220
%THEN
			EDT$$G_DEC_CRT = 2;	! indicate service class 2
			EDT$$G_EIGHT_BIT = 1;
%ELSE
			0
%FI

			END;

		    [7] : 			! NOEIGHTBIT
			BEGIN

%IF SUPPORT_VT220
%THEN
			EDT$$G_EIGHT_BIT = 0;
%ELSE
			0
%FI

			END;

		    [8] : 			! EDIT
			EDT$$G_TI_EDIT = 1;

		    [9] : 			! NOEDIT
			EDT$$G_TI_EDIT = 0;

		    [OUTRANGE] :
			ASSERT (0);
		    TES;

		EDT$$G_SCR_CHGD = 1;
		END;

	    END;

	[6] : 					! Verify
	    EDT$$G_VFY = 1;

	[7] : 					! Noverify
	    EDT$$G_VFY = 0;

	[8] : 					! Truncate

	    IF (.EDT$$G_TRUN NEQ 1)
	    THEN
		BEGIN
		EDT$$G_TRUN = 1;
		EDT$$G_SCR_REBUILD = 1;
		END;

	[9] : 					! Notruncate

	    IF (.EDT$$G_TRUN NEQ 0)
	    THEN
		BEGIN
		EDT$$G_TRUN = 0;
		EDT$$G_SCR_REBUILD = 1;
		END;

	[10] : 					! Keypad
	    BEGIN

	    IF (((.EDT$$G_TI_TYP EQL TERM_VT52) OR (.EDT$$G_TI_TYP EQL TERM_VT100)) AND (.EDT$$G_EXT_MOD))
	    THEN
		BEGIN
		EDT$$FMT_LIT (KEYPAD_MODE, KEYPAD_MODE_LEN);
		EDT$$OUT_FMTBUF ();
		EDT$$G_SCR_REBUILD = 1;
		END;

	    EDT$$G_KPAD = 1;
	    END;

	[11] : 					! Nokeypad
	    BEGIN

	    IF (((.EDT$$G_TI_TYP EQL TERM_VT52) OR (.EDT$$G_TI_TYP EQL TERM_VT100)) AND (.EDT$$G_EXT_MOD))
	    THEN
		BEGIN
		EDT$$FMT_LIT (NOKEYPAD_MODE, NOKEYPAD_MODE_LEN);
		EDT$$OUT_FMTBUF ();
		EDT$$G_SCR_REBUILD = 1;
		END;

	    EDT$$G_KPAD = 0;
	    END;

	[12] : 					! Wrap
	    BEGIN

	    IF (.EDT$$A_EXE_CURCMD [SET_VAL] GTRU 255)
	    THEN
		EDT$$FMT_MSG (EDT$_NUMVALILL)
	    ELSE
		EDT$$G_WD_WRAP = .EDT$$A_EXE_CURCMD [SET_VAL];

	    END;

	[13] : 					! Nowrap
	    EDT$$G_WD_WRAP = 256;

	[14] : 					! Cursor
	    BEGIN
!+
! Set top and bottom margin, making sure neither exceeds the
! number of lines on the screen.
!-

	    IF ((.EDT$$A_EXE_CURCMD [SET_VAL1] GEQU .EDT$$G_SCR_LNS) OR 	!
		(.EDT$$A_EXE_CURCMD [SET_VAL] GEQU .EDT$$G_SCR_LNS) OR 	!
		(.EDT$$A_EXE_CURCMD [SET_VAL1] GTR .EDT$$A_EXE_CURCMD [SET_VAL]))
	    THEN
		EDT$$FMT_MSG (EDT$_NUMVALILL)
	    ELSE
		BEGIN

		IF ((.EDT$$G_SCLL_TOP NEQ .EDT$$A_EXE_CURCMD [SET_VAL1]) OR 	!
		    (.EDT$$G_SCLL_BOT NEQ .EDT$$A_EXE_CURCMD [SET_VAL]))
		THEN
		    BEGIN
		    EDT$$G_SCLL_TOP = .EDT$$A_EXE_CURCMD [SET_VAL1];
		    EDT$$G_SCLL_BOT = .EDT$$A_EXE_CURCMD [SET_VAL];
		    EDT$$G_SCR_REBUILD = 1;
		    END;

		END;

	    END;

	[15] : 					! Screen
	    BEGIN

	    IF ((.EDT$$A_EXE_CURCMD [SET_VAL] GTRU 255) OR (.EDT$$A_EXE_CURCMD [SET_VAL] EQLU 0))
	    THEN
		EDT$$FMT_MSG (EDT$_NUMVALILL)
	    ELSE

		IF (EDT$$SC_SETWID (.EDT$$A_EXE_CURCMD [SET_VAL])) THEN EDT$$G_SCR_CHGD = 1;

!+
! Rebuild the screen data base, since in notruncate mode the records being displayed may
! occupy a different number of screen lines.
!-
	    EDT$$G_SCR_REBUILD = 1;
	    END;

	[16] : 					! Mode
	    EDT$$G_EDIT_DFLTMOD = .EDT$$A_EXE_CURCMD [SET_VAL] - 1;

	[17] : 					! Lines
	    BEGIN

	    IF (.EDT$$A_EXE_CURCMD [SET_VAL] GTRU 22)
	    THEN
		EDT$$FMT_MSG (EDT$_NUMVALILL)
	    ELSE
		BEGIN
		EDT$$G_SCR_LNS = .EDT$$A_EXE_CURCMD [SET_VAL];
!+
! Re-adjust the top and bottom lines if necessary.
!-

		IF (.EDT$$G_SCLL_TOP GEQ .EDT$$G_SCR_LNS) THEN EDT$$G_SCLL_TOP = .EDT$$G_SCR_LNS - 1;

		IF (.EDT$$G_SCLL_BOT GEQ .EDT$$G_SCR_LNS) THEN EDT$$G_SCLL_BOT = .EDT$$G_SCR_LNS - 1;

		EDT$$G_SCR_REBUILD = 1;
		END;

	    END;

	[18] : 					! Entity
	    BEGIN

	    LOCAL
		LEN,
		LEN_PRV : BYTE,
		ENT_NUM;

	    EDT$$CNV_UPC (.EDT$$A_EXE_CURCMD [AS_STR], .EDT$$A_EXE_CURCMD [AS_LEN]);
	    LEN = .EDT$$A_EXE_CURCMD [AS_LEN] + 1;
	    ENT_NUM = .EDT$$A_EXE_CURCMD [SET_VAL] - 1;
!+
! Get the length of the previous entity
!-
	    LEN_PRV = CH$RCHAR (.EDT$$A_US_ENT [.ENT_NUM]);
!+
! There was virtual memory allocated for entity so deallocate it
!-
	    EDT$$DEA_HEAP (%REF (.LEN_PRV + 1), EDT$$A_US_ENT [.ENT_NUM]);
!+
! And allocate a new chunk no matter what
!-

	    IF EDT$$ALO_HEAP (LEN, EDT$$A_US_ENT [.ENT_NUM])
	    THEN
		BEGIN
		CH$WCHAR (.LEN - 1, CH$PTR (.EDT$$A_US_ENT [.ENT_NUM]));
		EDT$$CPY_MEM (.LEN - 1, .EDT$$A_EXE_CURCMD [AS_STR], CH$PTR (.EDT$$A_US_ENT [.ENT_NUM], 1));
		END
	    ELSE
		EDT$$FMT_MSG (EDT$_INSMEM);

	    END;

	[19] : 					! Quiet
	    EDT$$G_QUIET = 1;

	[20] : 					! Noquiet
	    EDT$$G_QUIET = 0;

	[21] : 					! Tab
	    BEGIN

	    IF (.EDT$$A_EXE_CURCMD [SET_VAL] GTRU 255)
	    THEN
		EDT$$FMT_MSG (EDT$_NUMVALILL)
	    ELSE
		BEGIN
		EDT$$G_TAB_SIZ = .EDT$$A_EXE_CURCMD [SET_VAL];
		EDT$$G_TAB_LVL = 1;
		END;

	    END;

	[22] : 					! Notab
	    EDT$$G_TAB_SIZ = 0;

	[23] : 					! Allow repeat counts
	    EDT$$G_RPT = 1;

	[24] : 					! Don't allow repeat counts
	    EDT$$G_RPT = 0;

	[25] : 					! Allow file_not_found_msg
	    EDT$$G_FNF_MSGFLG = 1;

	[26] : 					! Don't allow file_not_found_msg
	    EDT$$G_FNF_MSGFLG = 0;

	[27] : 					! summary
	    BEGIN

%IF SUPPORT_WPS
%THEN
	    EDT$$G_SUMRY = 1;			! Type out summary when exiting
%ELSE
	    0
%FI

	    END;

	[28] : 					! nosummary
	    BEGIN

%IF SUPPORT_WPS
%THEN
	    EDT$$G_SUMRY = 0;			! suppress summary when exiting
%ELSE
	    0
%FI

	    END;

	[29] : 					! Set prompt
	    BEGIN

	    LOCAL
		I,				! Index into prompt
		CP,				! Character pointer of string
		LEN,				! Length of the prompt string
		PROMPT_NUM,			! Number corresponding to which prompt
		PROMPT_ADDR : REF VECTOR [32, BYTE];	! Address of prompt string

	    LEN = .EDT$$A_EXE_CURCMD [AS_LEN];
	    PROMPT_NUM = .EDT$$A_EXE_CURCMD [SET_VAL];

	    IF (.LEN GTR 31)
	    THEN
		EDT$$FMT_MSG (EDT$_INVSTR)
	    ELSE
		BEGIN
		PROMPT_ADDR = (CASE .PROMPT_NUM FROM 1 TO 7 OF
		    SET
		    [1] : EDT$$T_PMT_LINE;
		    [2] : EDT$$T_PMT_KPD;
		    [3] : EDT$$T_PMT_NOKPD;
		    [4] : EDT$$T_PMT_HCCHG;
		    [5] : EDT$$T_PMT_INS;
		    [6] : EDT$$T_PMT_INSN;
		    [7] : EDT$$T_PMT_QUERY;
		    [OUTRANGE] :
			BEGIN
			ASSERT (0);
			0
			END;
		    TES);
!+
! Now copy the specified string into the global prompt string.
! If a CR,LF does not exist where required then force one into the string.
!-
		CP = CH$PTR (.EDT$$A_EXE_CURCMD [AS_STR]);
		I = 1;

		IF (.PROMPT_NUM NEQ 2) AND (.PROMPT_NUM NEQ 3)
		THEN

		    IF (CH$RCHAR (.CP) NEQ 13) OR (CH$RCHAR (.CP + 1) NEQ 10)
		    THEN
			BEGIN
			CH$MOVE (2, UPLIT BYTE(13, 10), PROMPT_ADDR [.I]);
			I = 3;
			LEN = .LEN + 2;
			END;

		PROMPT_ADDR [0] = .LEN;
		CH$MOVE (.LEN, .CP, PROMPT_ADDR [.I]);
		END

	    END;

	[30] : 					! SET TEXT
	    BEGIN

	    LOCAL
		LEN,
		LEN_PRV : BYTE,
		CHAR_PTR,
		ESTATUS,
		CHAR,
		TEXT_NUM;

	    LEN = .EDT$$A_EXE_CURCMD [AS_LEN] + 1;
	    TEXT_NUM = .EDT$$A_EXE_CURCMD [SET_VAL] - 1;
!+
! Don't let the PAGE string be longer than 26 characters, otherwise we won't be
! able to display a record containing 255 form feeds on an 80-column screen in
! notruncate mode.  If the PAGE string could be 27 characters long then one
! record would require more than 110 lines to display, which is all that the
! screen data base can hold.  The screen updater assumes that the screen data
! base can hold one record, even if not all of that record is required to fill
! the screen.
! Note that LEN is the length plus 1, since it includes the length byte.
!-

	    IF (.TEXT_NUM NEQ 0) THEN LEN = MIN (.LEN, 27);

	    ESTATUS = 1;
!+
! Make sure that there are no escape or control chars in the string
!-
	    CHAR_PTR = CH$PTR (.EDT$$A_EXE_CURCMD [AS_STR]);

	    INCR I FROM 1 TO .LEN - 1 DO
		BEGIN
		CHAR = CH$RCHAR_A (CHAR_PTR);

		IF ((.CHAR GEQ 127) OR (.CHAR LSS 32))
		THEN
		    BEGIN
		    EDT$$FMT_MSG (EDT$_INVSTR);	! output error msg.
		    ESTATUS = 0;
		    EXITLOOP;			! exit--no reason to check rest
		    END;

		END;

!+
! Get the length of the previous string
!-

	    IF (.ESTATUS NEQ 0)
	    THEN
		BEGIN
		LEN_PRV = CH$RCHAR (.EDT$$A_US_TXT [.TEXT_NUM]);
!+
! There was virtual memory allocated for it so deallocate it
!-
		EDT$$DEA_HEAP (%REF (.LEN_PRV + 1), EDT$$A_US_TXT [.TEXT_NUM]);
!+
! And allocate a new chunk
!-

		IF EDT$$ALO_HEAP (LEN, EDT$$A_US_TXT [.TEXT_NUM])
		THEN
		    BEGIN
		    CH$WCHAR (.LEN - 1, CH$PTR (.EDT$$A_US_TXT [.TEXT_NUM]));
		    EDT$$CPY_MEM (.LEN - 1, .EDT$$A_EXE_CURCMD [AS_STR], 	!
			CH$PTR (.EDT$$A_US_TXT [.TEXT_NUM], 1));
		    EDT$$G_SCR_REBUILD = 1;
		    END
		ELSE
		    EDT$$FMT_MSG (EDT$_INSMEM);

		END;

	    END;

	[31] :
	    BEGIN

%IF SUPPORT_WPS
%THEN
	    EDT$$G_WRDTYP = .EDT$$A_EXE_CURCMD [SET_VAL] - 1;
%ELSE
	    0
%FI

	    END;

	[32] :
	    BEGIN

%IF SUPPORT_WPS
%THEN
	    EDT$$G_PARTYP = .EDT$$A_EXE_CURCMD [SET_VAL] - 1;
%ELSE
	    0
%FI

	    END;

	[33] : 					! Set Help File Name
	    EDT$$SET_HLPFNAM (.EDT$$A_EXE_CURCMD [FILSPEC], .EDT$$A_EXE_CURCMD [FSPCLEN]);

	[34] : 					! Set Autorepeat
	    EDT$$G_ENB_AUTRPT = 1;

	[35] : 					! Set Noautorepeat
	    EDT$$G_ENB_AUTRPT = 0;

	[36] : 					! Set Command
	    BEGIN

	    IF (.EDT$$A_EXE_CURCMD [FSPCLEN] EQL 0)
	    THEN
		BEGIN
		EDT$$FMT_MSG (EDT$_INVSTR);
		END
	    ELSE
		BEGIN
		EDT$$SET_COMFNAM (		!
		    .EDT$$A_EXE_CURCMD [FILSPEC], 	! Name of file
		    .EDT$$A_EXE_CURCMD [FSPCLEN], 	! Length of name
		    CH$PTR (EDT$$T_CMD_NAM_DEF4, 1), 	! Default name of file
		    CH$RCHAR (EDT$$T_CMD_NAM_DEF4)	! Length of default name of file
		);
		END;

	    END;

	[OUTRANGE] :
	    ASSERT (0);
	TES;

    END;					! of routine EDT$$SET_CMD

!<BLF/PAGE>

END						! of module EDT$LSET

ELUDOM
