%TITLE 'Top of the page processing'
MODULE toppag (	IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					    NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	Handles the top of the page.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	CREATION DATE:	November, 1981


%SBTTL 'Revision History'
! MODIFIED BY:
!
!	013	REM00013	Ray Marshall	21-Mar-1984
!		Moved the conditionalized "page" text length to the head
!		  of the routine so it can be used everywhere it's needed.
!		  Also provided the logic for the other languages; even
!		  though we don't have the correct words yet.
!
!	012	REM00012	Ray Marshall	31-Jan-1984
!		Added conditionals for the German word for "page": seite.
!
!	011	KFA00011	Ken Alden	5-Jul-1983
!		Added extra conditional on tnout call to prevent
!		  calling if the topnote iobs are empty.
!
!	010	KFA00010	Ken Alden	14-Jun-1983
!		Removed /down error messages.
!
!	009	KFA00009	Ken Alden	13-Jun-1983
!		/DOWN calculations now do not affect line count on current page.
!
!	008	KFA00008	Ken Alden	10-May-1983
!		Boosted the limit of the tuncation fixed strings to 
!		  fix a truncation accvio.
!
!	007	RER00007	Ron Randall	05-Apr-1983
!		For DSRPLUS:  Improved topnote handling.
!
!	006	RER00006	Ron Randall	17-Mar-1983
!		For DSRPLUS:
!		Added code to output topnotes after title/subtitle.
!
!	005	REM00005	Ray Marshall	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!--


%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    toppag	: NOVALUE,
    truncate	: NOVALUE;
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
! This macro makes certain that when blank lines at the top or bottom of a page
! are skipped change bars don't get output.
!
MACRO
    NO_BAR_SKIP (N) =
	BEGIN
	LOCAL
	    HOLD_BARS;

	HOLD_BARS = .TSF_BARS;
	TSF_BARS  = FALSE;
	USKIPL (N);
	TSF_BARS  = .HOLD_BARS;
	END %;
!
! EQUATED SYMBOLS:
!
LITERAL
    form_feed = %O'14';
!
! EXTERNAL REFERENCES:
!
EXTERNAL
    DATTIM	: VECTOR,			! Binary date and time.
    FRA		: FIXED_STRING,
    GCA		: GCA_DEFINITION,
    HCT		: HCT_DEFINITION,
    MRA		: REF FIXED_STRING,
    NPAGEN	: PAGE_DEFINITION,		! Number of next page.
    PAGEN	: PAGE_DEFINITION,
    SCA		: SCA_DEFINITION,
    SPAGER	: BLOCKVECTOR [1, PAGE_SCT_SIZE], ! List of starting pages.
    TPAGER	: BLOCKVECTOR [1, PAGE_SCT_SIZE], ! List of terminating pages.
    PHAN	: PHAN_DEFINITION,
    SBTMRA	: FIXED_STRING,			! Contains the subtitle, if any
    SBTTSF	: VECTOR [TSF_SIZE],		! Subtitle descriptor.
    TITMRA	: FIXED_STRING,			! Contains the title, if any.
    TITTSF	: VECTOR [TSF_SIZE],		! Title descriptor.
    TSF		: TSF_DEFINITION;

%IF DSRPLUS %THEN
EXTERNAL
    TOPNOT	: TN_DEFINITION;

EXTERNAL ROUTINE
    TNOUT;
%FI

EXTERNAL LITERAL
    RNFPWF;		! "Page number won't fit on title"

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);	! "escape" character used in internal
				! data structures

EXTERNAL ROUTINE
    CNVDAT,
    ERM,
    ERML,		! Error message followed by location in file
    ERMN,		! Error message w/number followed by location in file
    LOUT,
    PACPAG,
    PAGFND,
    PUTTPG,
    USKIPL;


%SBTTL 'TOPPAG  --'
GLOBAL ROUTINE toppag : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Does everything at the top of a page that is included 
!	in the header area.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    OWN
	! Text to add to the subtitle as truncated.
	FS_ALLOCATE (ADD_CHARS, 50),
	! Saved copy of subtitle text overwritten by truncation.
	FS_ALLOCATE (SAVE_CHARS ,50);

    LOCAL
	DATE_LENGTH,			! Length of date string.
	FILL_COUNT,
	HOLD_MRA,			! Areas for preserving current status.
	HOLD_MRA_LENGTH,
	HOLD_MRA_NEXT,
	HOLD_TSF,
	HOLD_TSF_ADJUST,
	HOLD_TSF_EXT_HL,
	HOLD_TSF_INT_HL,
	WORK_AREA : VECTOR [CH$ALLOCATION (50)],
	PAGE_LENGTH,			! Number of characters in page number.
	page_string_length :
%IF german %THEN
			INITIAL(6),
%ELSE
%IF french %THEN
			INITIAL(5),
%ELSE
%IF italian %THEN
			INITIAL(5),
%ELSE
			INITIAL(5),
%FI %FI %FI
	PTR;

    FS_INIT (SAVE_CHARS);		! Make sure this is initially zero

    HOLD_MRA = .MRA;			! Preserve current status
    HOLD_TSF = .TSF;
    FS_INIT (FRA);			! Initialize output buffer.

    ! Get to top of page if not the very first line to be output.
    IF
	(IF  .PHAN_SIMULATE
	 THEN
	     (.PHAN_BOTTOM MOD .PHAN_PLINES) NEQ 0
	 ELSE
	     (.PHAN_BOTTOM MOD .PHAN_SLINES) NEQ 0)
    THEN
	! Not already at top of page, so need a form feed.
	PHAN_FORM_PEND = FORM_FEED
    ELSE
	PHAN_FORM_PEND = 0;

    ! If not top of first page advance page number and update page layout.
    IF	NOT .PHAN_TOP_FIRST
    THEN
	BEGIN		    		! Advance the page number.

	! Copy next page number to current page number
	BEGIN
	MAP				! Make these structures
	    PAGEN  : VECTOR,		! vectors for easier
	    NPAGEN : VECTOR;		! copying.

	INCR I FROM 0 TO (PAGE_SCT_SIZE - 1) DO
	    PAGEN [.I] = .NPAGEN [.I];

	END;

	! Next, bump page number of next page.
	IF  .NPAGEN [SCT_SUB_PAGE] EQL 0
 	THEN				! Not a subpage
	    NPAGEN [SCT_PAGE]     = .NPAGEN [SCT_PAGE] + 1
	ELSE				! It's a subpage
	    NPAGEN [SCT_SUB_PAGE] = .NPAGEN [SCT_SUB_PAGE] + 1;

	! Bump the running page number of the document
	NPAGEN [SCT_RUN_PAGE] = .NPAGEN [SCT_RUN_PAGE] + 1;

	! Update the page layout
	HCT_LAYOUT      = .HCT_LAYOUT_NP;
	HCT_LAYOUTN     = .HCT_LAYOUTN_NP;
	HCT_NUMBER_PAGE = .HCT_NMPG_NP;
	END;

    ! If generating a table of contents, signal a new page by writing the
    ! number of the page being started.
    IF  .GCA_CMD_BTC
    THEN
	! Yup, user does want a binary table of contents,
	! so save this page number.
	!
	! The page number is written regardless of whether the user said
	! .ENABLE TOC or .DISABLE TOC, as long as he has said /CONTENTS.  This
	! is done so that page numbers are current in the .BTC file so the user
	! can .ENABLE the TOC in the middle of a page. 

%IF FLIP %THEN
	PUTTPG (PAGEN, FLIP$K_NEWPAG);
%ELSE
	PUTTPG (PAGEN, -1);
%FI

    ! Update page count.
    IF	NOT .GCA_SKIP_OUT AND
	NOT .PHAN_TOP_FIRST
    THEN
    ! Count pages only if not skipping output.
	GCA_PAGE_CNT = .GCA_PAGE_CNT + 1;

    ! It's important to reset PHAN_TOP_PAGE and PHAN_LINES_TP now, because
    ! otherwise, if LOUT gets called to output a title, LOUT will call NEWPAG
    ! which will call this routine, which will call LOUT again, etc, in a loop.
    ! That's because LOUT does not know who is calling it, would think that
    ! whoever called it is trying to output lines at the top of the page, and
    ! so would try to get NEWPAG to put in the titles first, thereby leading to
    ! an incessant (recursive) loop. 
    PHAN_TOP_PAGE = FALSE;
    PHAN_LINES_TP = 0;			! This page is officially empty.

    ! Compute "ODD" or "EVEN"-ness of this page whose titles, etc, are about to
    ! be output.
    HCT_ODD_EVEN = NOT .HCT_ODD_EVEN;

    ! We are now just about to start processing a new page.  If we were
    ! previously skipping because the user specified a starting page, see if
    ! this is it.

    ! If there is a list of pages to be output, and output is
    ! currently being skipped, see if this page begins a new
    ! output sequence.
    IF	.GCA_SKIP_OUT
    THEN
	IF  NOT .GCA_CMD_QUICK	! Don't reset output-skipping state if user
	THEN	    		! said /QUICK (that is, continue to skip).
	    GCA_SKIP_OUT = NOT 
		(PAGFND (PAGEN, SPAGER, .GCA_ORANGE_CNT, FALSE) NEQ 0);

    !
    ! Process the /DOWN switch.
    !
    !
    ! Turn on /down flag so as to not count lines when skipping.
    !
    gca_down_flag = true;

    IF	.phan_down GTR 0
    THEN
    	no_bar_skip (.phan_down);
    !
    ! Turn off the /down flag for skipping.
    !
    gca_down_flag = false;

    IF	.hct_headers
    THEN
!+
! Output the title.
!-
	BEGIN

	IF  .PHAN_HEADER
	THEN
	    BEGIN			! This page should have a header.
	    LOCAL
		HOLD_PAGING;

	    ! Temporarily turn off paging to avoid recursive interactions
	    ! between LOUT and NEWPAG.
	    HOLD_PAGING = .PHAN_PAGING;
	    PHAN_PAGING = FALSE;
	    ! Switch text pointers to saved title
	    TSF = TITTSF;
	    MRA = TITMRA;
	    ! Save current status of title.  The following code works by
	    ! simply adding additional characters after the title, directly
	    ! in the title buffer.  The title status is restored later,
	    ! so the title can be reused on subsequent pages.
	    HOLD_TSF_INT_HL = .TSF_INT_HL;	! Save current text status.
	    HOLD_TSF_EXT_HL = .TSF_EXT_HL;
	    HOLD_TSF_ADJUST = .TSF_ADJUST;
	    HOLD_MRA_NEXT   = .FS_NEXT (MRA);
	    HOLD_MRA_LENGTH = .FS_LENGTH (MRA);

	    IF  .HCT_NUMBER_PAGE
		AND ((.HCT_LAYOUT EQL LAYOUT_STANDARD)
		OR (.HCT_LAYOUT EQL LAYOUT_RUN_BOTC))
	    THEN
		! Put page number at end of title line.
		BEGIN
		PTR = CH$PTR (WORK_AREA);
		! Convert page number and get length.
		PAGE_LENGTH = PACPAG (PAGEN, PTR);
		FILL_COUNT  = (.GCA_LWIDTH - .TSF_EXT_HL) -
			      (.PAGE_LENGTH + .page_string_length);

		IF  .FILL_COUNT LSS 0 OR
		    ((.FS_MAXSIZE (MRA) - .FS_LENGTH (MRA)) LSS .FILL_COUNT)
		THEN
		    ! No room at end of line for page number.
		    ERM (RNFPWF, 0, 0)
		ELSE
		    ! Put page number at end of title.
		    BEGIN

		    INCR I FROM 1 TO .FILL_COUNT DO
			FS_WCHAR (MRA, %C' ');	! Position out with spaces.

		    ! Get 'page ' in proper case.
		    PTR = CH$PTR ((CASE .HCT_HD_CASE FROM 0 TO 2 OF
			    SET
%IF german %THEN
			    [HCT_HD_LOWER] : UPLIT ('seite ');
			    [HCT_HD_UPPER] : UPLIT ('SEITE ');
			    [HCT_HD_MIXED] : UPLIT ('Seite ');
%ELSE
%IF french %THEN
			    [HCT_HD_LOWER] : UPLIT ('page ');
			    [HCT_HD_UPPER] : UPLIT ('PAGE ');
			    [HCT_HD_MIXED] : UPLIT ('Page ');
%ELSE
%IF italian %THEN
			    [HCT_HD_LOWER] : UPLIT ('page ');
			    [HCT_HD_UPPER] : UPLIT ('PAGE ');
			    [HCT_HD_MIXED] : UPLIT ('Page ');
%ELSE
			    [HCT_HD_LOWER] : UPLIT ('page ');
			    [HCT_HD_UPPER] : UPLIT ('PAGE ');
			    [HCT_HD_MIXED] : UPLIT ('Page ');
%FI %FI %FI
			    TES));

		    ! Put word 'page ' at end of line.
		    INCR I FROM 1 TO .page_string_length DO
			FS_WCHAR (MRA, CH$RCHAR_A (PTR));

		    PTR = CH$PTR (WORK_AREA);

		    ! Output converted page number.
		    INCR I FROM 1 TO .PAGE_LENGTH DO
			FS_WCHAR (MRA, CH$RCHAR_A (PTR));

		    ! Count characters added.
		    TSF_INT_HL = .TSF_INT_HL + .FILL_COUNT +
				 .PAGE_LENGTH + .page_string_length;
		    TSF_EXT_HL = .TSF_EXT_HL + .FILL_COUNT +
				 .PAGE_LENGTH + .page_string_length;
		    END;

		END;

	    IF	.TSF_INT_HL NEQ 0
	    THEN
		! There is something to output
		BEGIN

		! If the user wants things centered, do it.
		IF  .HCT_LAYOUT EQL LAYOUT_CENTERED
		THEN
		    TSF_ADJUST = (.GCA_LWIDTH - .TSF_EXT_HL)/2
		ELSE

		    ! See if user wants the title/subtitle flipped
		    IF  (.HCT_LAYOUT EQL LAYOUT_FLIP_ODD) AND
			 .HCT_ODD_EVEN
		    THEN
			TSF_ADJUST = .GCA_LWIDTH - .TSF_EXT_HL;
		LOUT ();			! Output title line.
		TSF_INT_HL = .HOLD_TSF_INT_HL;	! Restore title to its previous status.
		TSF_EXT_HL = .HOLD_TSF_EXT_HL;
		TSF_ADJUST = .HOLD_TSF_ADJUST;
		FS_NEXT   (MRA) = .HOLD_MRA_NEXT;
		FS_LENGTH (MRA) = .HOLD_MRA_LENGTH;
		END
	    ELSE
		! Even if there is no title reserve the title line so 
		! that all pages have the same layout.
		NO_BAR_SKIP (1);		! End of title processing.

!+
! Output the subtitle.
!-
	    IF  .HCT_SUBTITLE
	    THEN
		BEGIN
		LOCAL
		    ! Where (what column) to truncate the subtitle.
		    TRUNCATE_POINT;

		TRUNCATE_POINT = 0;
		FS_INIT (FRA);
		FS_INIT (ADD_CHARS);
		FS_INIT (SAVE_CHARS);
		! Set up pointers to subtitle and save status.
		TSF = SBTTSF;
		MRA = SBTMRA;
		HOLD_TSF_EXT_HL = .TSF_EXT_HL;
		HOLD_TSF_INT_HL = .TSF_INT_HL;
		HOLD_TSF_ADJUST = .TSF_ADJUST;
		HOLD_MRA_NEXT   = .FS_NEXT   (MRA);
		HOLD_MRA_LENGTH = .FS_LENGTH (MRA);

		! See if the user said .DATE.
		IF  .HCT_DATE
		    AND ((.HCT_LAYOUT EQL LAYOUT_STANDARD)
		    OR   (.HCT_LAYOUT EQL LAYOUT_RUN_BOTC))
		THEN
		    BEGIN
		    ! Get date information in work area.
		    PTR = CH$PTR (WORK_AREA);
		    CNVDAT(DATTIM,PTR,DATE_LENGTH);

		    ! See if date will fit.
		    ! If not, write " ... <date>" to the ADD_CHARS buffer.
		    IF  .TSF_EXT_HL GTR (.GCA_LWIDTH - .DATE_LENGTH)
		    THEN
			BEGIN
			FS_WCHAR (ADD_CHARS, %C' ');

			INCR I FROM 1 TO 3 DO
			    FS_WCHAR (ADD_CHARS, %C'.');

			FS_WCHAR (ADD_CHARS, %C' ');
			PTR = CH$PTR (WORK_AREA);

			INCR I FROM 1 TO .DATE_LENGTH DO
			    FS_WCHAR (ADD_CHARS, CH$RCHAR_A (PTR));

			END;
		    END
		ELSE

		    ! No date is called for.  Check if subtitle will fit. 
		    ! If not, write " ..." to the ADD_CHARS buffer.
		    IF  .TSF_EXT_HL GTR .GCA_LWIDTH
		    THEN
			BEGIN
			FS_WCHAR (ADD_CHARS, %C' ');

			INCR I FROM 1 TO 3 DO
			    FS_WCHAR (ADD_CHARS, %C'.');		

			END;

		! Is truncation needed?  If so, ADD_CHARS is nonzero.
		IF  ((.FS_LENGTH (ADD_CHARS) EQL 0) OR
		     (.FS_LENGTH (ADD_CHARS) GEQ .GCA_LWIDTH))
		THEN
		    ! Subtitle will fit as is.  Add padding and date if 
		    ! the user said .DATE.
		    BEGIN

		    IF	.HCT_DATE
			AND ((.HCT_LAYOUT EQL LAYOUT_STANDARD)
			OR   (.HCT_LAYOUT EQL LAYOUT_RUN_BOTC))
		    THEN
			BEGIN
			LOCAL
			    FILL_COUNT;

			! Calculate the required padding before the date.
			FILL_COUNT = .GCA_LWIDTH - .TSF_EXT_HL - .DATE_LENGTH;

			! Put in the padding.
			INCR I FROM 1 TO .FILL_COUNT DO
			    FS_WCHAR (MRA, %C' ');
			
			! Copy the date.
			PTR = CH$PTR (WORK_AREA);

			INCR I FROM 1 TO .DATE_LENGTH DO
			    FS_WCHAR(MRA, CH$RCHAR_A(PTR));

		        ! Update the appropriate counts.
			TSF_INT_HL = .TSF_INT_HL + .FILL_COUNT + .DATE_LENGTH;
			TSF_EXT_HL = .TSF_EXT_HL + .FILL_COUNT + .DATE_LENGTH;
			END;
		    END
		ELSE
		    ! Subtitle must be truncated.  We must add something; 
		    ! either "..." or "...<date>".
		    BEGIN
		    TRUNCATE_POINT = .GCA_LWIDTH - .FS_LENGTH (ADD_CHARS);

		    ! Now actually truncate the subtitle MRA/TSF.
		    TRUNCATE (.TRUNCATE_POINT);
		    ! Save the characters about to be overwritten on the MRA.
		    PTR =  .FS_NEXT (MRA);

		    INCR I FROM 1 TO .FS_LENGTH (ADD_CHARS) DO
			FS_WCHAR (SAVE_CHARS, CH$RCHAR_A (PTR));

		    ! Copy the truncation text to the MRA and update pointers.
		    PTR =  .FS_START (ADD_CHARS);

		    INCR I FROM 1 TO .FS_LENGTH (ADD_CHARS) DO
			FS_WCHAR (MRA, CH$RCHAR_A (PTR));

		    TSF_INT_HL = .TSF_INT_HL + .FS_LENGTH (ADD_CHARS);
		    TSF_EXT_HL = .TSF_EXT_HL + .FS_LENGTH (ADD_CHARS);
		    END;

		! Put out the subtitle.
		IF  .TSF_INT_HL NEQ 0
		THEN
		    BEGIN

		    ! Center the subtitle if the user wants it centered.
		    IF  .HCT_LAYOUT EQL LAYOUT_CENTERED
		    THEN
			TSF_ADJUST = (.GCA_LWIDTH - .TSF_EXT_HL)/2
		    ELSE

			! See if user wants subtitle flipped.
			IF  (.HCT_LAYOUT EQL LAYOUT_FLIP_ODD)
			    AND .HCT_ODD_EVEN		! Tests TRUE if odd
			THEN
			    TSF_ADJUST = .GCA_LWIDTH - .TSF_EXT_HL;

		    ! Output the subtitle.
		    LOUT ();

		    ! If we truncated the MRA, then restore its saved text.
		    IF  .FS_LENGTH (SAVE_CHARS) GTR 0
		    THEN
			BEGIN
			! Truncate again to make sure we write saved characters 
			! back to the same place they were overwritten from.
			TRUNCATE (.TRUNCATE_POINT);
			PTR =  .FS_START (SAVE_CHARS);

			INCR I FROM 1 TO .FS_LENGTH (SAVE_CHARS) DO
			    FS_WCHAR (MRA, CH$RCHAR_A (PTR));

			END;
		    END
		ELSE
		    ! If the user said .SUBTITLE but the subtitle is empty
		    ! reserve the line so all pages have the same layout.
		    NO_BAR_SKIP (1);

		! Restore subtitle status
		TSF_INT_HL = .HOLD_TSF_INT_HL;
		TSF_EXT_HL = .HOLD_TSF_EXT_HL;
		TSF_ADJUST = .HOLD_TSF_ADJUST;
		FS_NEXT (MRA)   = .HOLD_MRA_NEXT;
		FS_LENGTH (MRA) = .HOLD_MRA_LENGTH;
		END;				! End of subtitle processing

	    ! Restore status of paging.
	    PHAN_PAGING = .HOLD_PAGING
	    END					! End of phan_header EQL true
	ELSE 

	    ! Even if there was no header on this page, still reserve the 
	    ! lines so that all pages have the same layout.
	    IF  .HCT_SUBTITLE
	    THEN
		NO_BAR_SKIP (2)
	    ELSE
		NO_BAR_SKIP (1);

	NO_BAR_SKIP (2);		! Generate two blank lines after titles.
	END;				! End processing of headers.

!+
! Output topnotes.
!-
%IF DSRPLUS %THEN
    !
    ! See if topnotes are enabled.
    !
    IF  (.tn_internal_enab OR .tn_user_enab)
    		AND
    	((.tn_internal_int GTR 0) OR (.tn_user_int GTR 0))
    THEN
	tnout ();
%FI

    ! The following block generates accumulated figures in a "safe" way. The
    ! need for a "safe" way of generating the accumulated figures was
    ! demonstrated by a file that contained a .figure deferred 58 command. What
    ! happened is that there was an access violation.  The reason for that is
    ! that the NO_BAR_SKIP macro generates a call on USKIPL.  And USKIPL checks
    ! for the end-of-page happening as it generates lines; if it detects that,
    ! it calls NEWPAG which calls this module.  BUT, before this module finishes
    ! it generates the deferred figures, thereby leading to a loop that finishes
    ! only when the stack overflows. The fix is to clear the deferred figure
    ! count before issuing the macro. Then when we get called again, we will not
    ! see any more figures to be generated, and the loop will go away. 
    BEGIN
    LOCAL
	X;

    X = .PHAN_FIGURE;
    PHAN_FIGURE = 0;
    NO_BAR_SKIP (.X);
    END;

    NO_BAR_SKIP (.PHAN_FIGURE);			! Generate deferred figures.
    PHAN_TOP_FIRST = FALSE;			! No longer at top of first page.
    PHAN_HEADER    = TRUE;			! Enable headers for subsequent pages.
    MRA = .HOLD_MRA;				! Switch back to the usual
    TSF = .HOLD_TSF;				! text buffers.

    END;					! End of TOPPAG


%SBTTL 'TRUNCATE  --'
ROUTINE truncate (where) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine TRUNCATES the text represented by a TSF/MRA pair. 
!	It does this by scanning the MRA con counting printing 
!	characters (that is, non-escape-sequences).
!
! FORMAL PARAMETERS:
!
!	where - The column at which to truncate the TFS/MRA.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:
!
!	The current TSF/MRA is modified to effect the desired truncation.
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    LOCAL
	EXT_LEN,
	INT_LEN,
	PTR;

    EXT_LEN = 0;
    INT_LEN = 0;
    PTR = .FS_START (MRA);

    ! First skip over any vertical-motion escape sequences.
    IF	.TSF_INT_VL GTR 0
    THEN

	INCR I FROM 1 TO .TSF_INT_VL DO
	    CH$RCHAR_A (PTR);

    ! Now we are in the horizontal-motion part of the MRA. Scan the MRA, counting
    ! printing characters, until we reach the specified truncation point.
    WHILE .EXT_LEN NEQ .WHERE DO
	BEGIN

	IF  CH$RCHAR_A (PTR) NEQ RINTES
	THEN
	    BEGIN
	    ! Normal text. Increment both internal-length and external-length counts.
	    EXT_LEN = .EXT_LEN + 1;
	    INT_LEN = .INT_LEN + 1;
	    END
	ELSE
	    ! An escape sequence. Add it to the internal-length count and advance
	    ! the pointer beyond it.
	    BEGIN
	    INT_LEN = .INT_LEN + 3; 
	    CH$RCHAR_A (PTR);
	    CH$RCHAR_A (PTR);
	    END;

	END;

    ! Update the TSF and MRA to effect the truncation.
    TSF_EXT_HL = .EXT_LEN;
    TSF_INT_HL = .INT_LEN;
    FS_LENGTH (MRA) = .INT_LEN + .TSF_INT_VL;
    FS_NEXT (MRA) = CH$PLUS ( .FS_START (MRA), .FS_LENGTH (MRA) );

    END;					! End of TRUNCATE

END						! End of module TOPPAG
ELUDOM
