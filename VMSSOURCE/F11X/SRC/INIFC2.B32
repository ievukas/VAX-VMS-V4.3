MODULE INIFC2 (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	These routines create and initialize a file control block
!	from the given file header.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines. These routines must be called in
!	kernel mode.

!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  14-Dec-1976  16:48
!
! MODIFIED BY:
!
!	V03-015	CDS0006		Christian D. Saether	30-Aug-1984
!		Add optional PRIMFCB argument to INIT_FCB2 and
!		FILL_FCB routines.
!
!	V03-014	CDS0005		Christian D. Saether	15-Aug-1984
!		Set MARKDEL and BADBLOCK flags from header.
!
!	V03-013	CDS0004		Christian D. Saether	31-July-1984
!		Remove local declaration of get_map_pointer linkage.
!		Use locals to reference fcb and header arguments.
!		Remove test for directory fcb.
!		Change acl insque to add at end of list.
!		Use common acl init routine.
!
!	V03-012	ACG0440		Andrew C. Goldstein,	23-Jul-1984  11:56
!		Add ref count and classification valid flag to ORB in the FCB
!
!	V03-011	LMP0275		L. Mark Pilant,		12-Jul-1984  15:08
!		Initialize the ACL info in the ORB to be a null descriptor
!		list rather than an empty queue.  This avoids the overhead
!		of locking and unlocking the ACL mutex, only to find out
!		that the ACL was empty.
!
!	V03-010	CDS0003		Christian D. Saether	26-Apr-1984
!		Set up FCB$L_LOCKBASIS.
!
!	V03-009	LMP0221		L. Mark Pilant,		7-Apr-1984  11:58
!		Add support for the ORB within the FCB.
!
!	V03-008	ACG0408		Andrew C. Goldstein,	20-Mar-1984  17:53
!		Make APPLY_RVN and DEFAULT_RVN macros
!
!	V03-007	LMP0208		L. Mark Pilant,		9-Mar-1984  9:21
!		Copy the BADACL bit from the header to the FCB.
!
!	V03-006	LMP0188		L. Mark Pilant,		3-Feb-1984  15:45
!		Fill in the classification block in the FCB if it exists
!		in the file header.
!
!	V03-005	CDS0002		Christian D. Saether	18-Jan-1984
!		Modify interface to APPLY_RVN.
!
!	V03-004	CDS0001		Christian D. Saether	30-Dec-1983
!		Use L_NORM linkage and BIND_COMMON macro.
!
!	V03-003	LMP0073		L. Mark Pilant,		20-Jan-1983  9:31
!		Use the reserved area offset as the upper limit to the
!		ACL segment size in a file header.
!
!	V03-002	ACG0308		Andrew C. Goldstein,	14-Jan-1983  15:21
!		Fix FCB linkage consistency problems
!
!	V03-001	LMP0068		L. Mark Pilant,		21-Dec-1982  12:11
!		If the header contains ACL information, create a new ACL
!		segment and link it into the chain.
!
!	V02-003	ACG0241		Andrew C. Goldstein,	11-Dec-1981  22:53
!		Make updating of FCB common code, add handling
!		of directory bit
!
!	V02-002	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:26
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	INIT_FCB2	: L_NORM NOVALUE, ! initialize FCB
	FILL_FCB	: L_NORM NOVALUE; ! fill in basic FCB fields

GLOBAL ROUTINE INIT_FCB2 (FCBARG, HEADER, PRIMFCB) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine initializes the given FCB according to the given
!	file header.
!
! CALLING SEQUENCE:
!	INIT_FCB (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: FCB address
!	ARG2: header address
!	ARG3: optional arg to specify primary fcb
!
! IMPLICIT INPUTS:
!	HEADER_LBN contains LBN of header block
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCB initialized
!
!--

BEGIN

MAP
	HEADER		: REF BBLOCK;	! file header arg

GLOBAL REGISTER
	COUNT		= 6,		! retrieval pointer count
	LBN		= 7,		! retrieval pointer LBN
	MAP_POINTER	= 8;		! pointer to scan map area

BASE_REGISTER;

EXTERNAL ROUTINE
	GET_MAP_POINTER	: L_MAP_POINTER; ! get value of file map pointer

LOCAL
	FCB		: REF BBLOCK;

FCB = .FCBARG;

! Scan the map area. Count up the file size from the retrieval pointers.
!

MAP_POINTER = .HEADER + .HEADER[FH2$B_MPOFFSET]*2;
FCB[FCB$L_FILESIZE] = 0;

UNTIL .MAP_POINTER GEQA .HEADER + (.HEADER[FH2$B_MPOFFSET] + .HEADER[FH2$B_MAP_INUSE]) * 2
DO
    BEGIN
    GET_MAP_POINTER ();
    FCB[FCB$L_FILESIZE] = .FCB[FCB$L_FILESIZE] + .COUNT;
    END;

! Now set up the rest of the fields.
!

IF ACTUALCOUNT EQL 3
THEN
    FILL_FCB (.FCB, .HEADER, .PRIMFCB)
ELSE
    FILL_FCB (.FCB, .HEADER);


END;					! end of routine INIT_FCB

GLOBAL ROUTINE FILL_FCB (FCBARG, HDRARG, PRIMFCB) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine updates the file attributes of the specified FCB,
!	if any, with the file attributes of the given header. The file size
!	is preserved.
!
!
! CALLING SEQUENCE:
!	FILL_FCB (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of FCB
!	ARG2: address of file header
!	ARG3: optional arg to specify primary fcb
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCB is updated if it exists
!
!--

BEGIN

BUILTIN
	REMQUE;

LOCAL
	FCB		: REF BBLOCK,	! local copy of fcb address
	FCB_ORB		: REF BBLOCK,	! Address of the ORB within the FCB
	HEADER		: REF BBLOCK,	! local copy of header arg
	ACE_ADDRESS	: REF BBLOCK,	! Address of current ACE in header
	ACL_LENGTH,			! Size of ACL segment to create
	ACL_ADDRESS	: REF BBLOCK,	! Address of created ACL segment
	ACL_FCB		: REF BBLOCK,	! FCB for ACL segment
	DUMMY;				! dummy target for REMQUE

GLOBAL REGISTER
	COUNT		= 6,		! retrieval pointer count
	LBN		= 7,		! retrieval pointer LBN
	MAP_POINTER	= 8;		! pointer to scan map area

BIND_COMMON;

EXTERNAL
	EXE$GL_DYNAMIC_FLAGS	: BITVECTOR ADDRESSING_MODE (ABSOLUTE),
					! Dynamic SYSGEN flags
	CTL$GL_PCB	: REF BBLOCK ADDRESSING_MODE (GENERAL);
					! PCB address

EXTERNAL LITERAL
	EXE$V_CLASS_PROT;		! Set if doing non-discretionary checks

EXTERNAL ROUTINE
	ACL_INIT_QUEUE,			! ACL initialization
	GET_MAP_POINTER	: L_MAP_POINTER, ! get value of file map pointer
	ALLOC_PAGED	: L_NORM;	! Allocate system dynamic memory

! Note the address of the ORB within the FCB.

FCB = .FCBARG;
HEADER = .HDRARG;
FCB_ORB = FCB[FCB$R_ORB];

! Get the known constants and the simple stuff from the file header
! (i.e., header LBN, file ID, starting VBN, file owner and file protection).
!

FCB[FCB$L_HDLBN]	= .HEADER_LBN;
FCB[FCB$W_FID_NUM]	= .HEADER[FH2$W_FID_NUM];
FCB[FCB$W_FID_SEQ]	= .HEADER[FH2$W_FID_SEQ];
FCB[FCB$W_FID_RVN]	= .HEADER[FH2$W_FID_RVN];
FCB[FCB$W_SEGN]		= .HEADER[FH2$W_SEG_NUM];
FCB_ORB[ORB$L_OWNER]	= .HEADER[FH2$L_FILEOWNER];
FCB_ORB[ORB$V_PROT_16]	= 1;
FCB_ORB[ORB$W_PROT]	= .HEADER[FH2$W_FILEPROT];
FCB_ORB[ORB$V_MODE_VECTOR] = 1;
FCB_ORB[ORB$L_MODE_PROTL] = NOT .HEADER[FH2$B_ACC_MODE];
FCB_ORB[ORB$L_MODE_PROTH] = -1;

$ASSUME (FH2$S_CLASS_PROT EQL ORB$S_MIN_CLASS);
$ASSUME (FH2$S_CLASS_PROT EQL ORB$S_MAX_CLASS);

IF .EXE$GL_DYNAMIC_FLAGS[EXE$V_CLASS_PROT]
AND .HEADER[FH2$B_IDOFFSET]*2 GTRU FH2$C_LENGTH
THEN
    BEGIN
    CH$MOVE (FH2$S_CLASS_PROT, HEADER[FH2$R_CLASS_PROT], FCB_ORB[ORB$R_MIN_CLASS]);
    CH$MOVE (FH2$S_CLASS_PROT, HEADER[FH2$R_CLASS_PROT], FCB_ORB[ORB$R_MAX_CLASS]);
    FCB_ORB[ORB$V_CLASS_PROT] = 1;
    END;

FCB[FCB$W_VERSIONS]	= .BBLOCK [HEADER[FH2$W_RECATTR], FAT$W_VERSIONS];
APPLY_RVN (FCB[FCB$W_FID_RVN], .CURRENT_RVN);
(FCB[FCB$L_LOCKBASIS])<0,16> = .FCB[FCB$W_FID_NUM];
(FCB[FCB$L_LOCKBASIS])<16,8> = .FCB[FCB$B_FID_NMX];
(FCB[FCB$L_LOCKBASIS])<24,8> = .FCB[FCB$B_FID_RVN];

IF .HEADER[FH2$V_SPOOL] THEN FCB[FCB$V_SPOOL] = 1;
IF .HEADER [FH2$V_BADBLOCK] THEN FCB [FCB$V_BADBLK] = 1;
IF .HEADER [FH2$V_MARKDEL] THEN FCB [FCB$V_MARKDEL] = 1;

FCB[FCB$L_EFBLK]	= ROT (.BBLOCK[HEADER[FH2$W_RECATTR], FAT$L_EFBLK], 16);
IF  .FCB[FCB$L_EFBLK] NEQ 0
AND .BBLOCK[HEADER[FH2$W_RECATTR], FAT$W_FFBYTE] EQL 0
THEN FCB[FCB$L_EFBLK] = .FCB[FCB$L_EFBLK] - 1;

IF .FCB[FCB$L_EFBLK] GTR .FCB[FCB$L_FILESIZE]
THEN FCB[FCB$L_EFBLK] = .FCB[FCB$L_FILESIZE];

! Now scan the map area. Get the starting LBN if the file is contiguous.
!

MAP_POINTER = .HEADER + .HEADER[FH2$B_MPOFFSET]*2;
GET_MAP_POINTER ();
FCB[FCB$L_STLBN] = 0;
IF .HEADER[FH2$V_CONTIG]
THEN FCB[FCB$L_STLBN] = .LBN;

! Build an ACL segment if ACL information exists in the file header,
! and this is not an FCB update.

IF .HEADER[FH2$V_BADACL] THEN FCB[FCB$V_BADACL] = 1;

IF .HEADER[FH2$B_ACOFFSET]*2 LSS .HEADER[FH2$B_RSOFFSET]*2
AND NOT .CLEANUP_FLAGS[CLF_NOBUILD]
THEN
    BEGIN
    ACE_ADDRESS = .HEADER + .HEADER[FH2$B_ACOFFSET]*2;
    ACL_LENGTH = 0;
    DO
	BEGIN
	ACL_LENGTH = .ACL_LENGTH + .ACE_ADDRESS[ACE$B_SIZE];
	ACE_ADDRESS = .ACE_ADDRESS + .ACE_ADDRESS[ACE$B_SIZE];
	END
    UNTIL .ACE_ADDRESS[ACE$B_SIZE] EQL 0
       OR .ACE_ADDRESS GEQA .HEADER + .HEADER[FH2$B_RSOFFSET]*2;
    IF .ACL_LENGTH GTR 0
    THEN
	BEGIN
	ACL_ADDRESS = ALLOC_PAGED (ACL$C_LENGTH + .ACL_LENGTH, ACL_TYPE);
	CH$MOVE (.ACL_LENGTH, .HEADER + .HEADER[FH2$B_ACOFFSET]*2,
			      ACL_ADDRESS[ACL$L_LIST]);
	ACL_ADDRESS[ACL$W_SIZE] = ACL$C_LENGTH + .ACL_LENGTH;

	IF .FCB [FCB$W_SEGN] EQL 0
	THEN
	    ACL_FCB = .FCB
	ELSE
	    IF ACTUALCOUNT EQL 3
	    THEN
		ACL_FCB = .PRIMFCB
	    ELSE
		ACL_FCB = .PRIMARY_FCB;

	FCB_ORB = ACL_FCB[FCB$R_ORB];
	IF NOT .FCB_ORB[ORB$V_ACL_QUEUE]
	THEN
	    ACL_INIT_QUEUE (.FCB_ORB);

	INSQUE (.ACL_ADDRESS, .FCB_ORB[ORB$L_ACLBL]);

	END;
    END;
CLEANUP_FLAGS[CLF_NOBUILD] = 0;

END;					! end of routine FILL_FCB

END
ELUDOM
