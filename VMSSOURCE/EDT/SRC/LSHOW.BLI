%TITLE 'EDT$LSHOW - SHOW line-mode command'
MODULE EDT$LSHOW (				! SHOW line-mode command
		IDENT = 'V04-000'			! File: LSHOW.BLI Edit: JBS1041
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module executes the line mode SHOW command.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: February 3, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 30-JAN-1981.  This module was created by
!	extracting the routine EDT$$SHW_CMD  from the module EXEC.BLI.
! 1-002	- Regularize headers.  JBS 20-Mar-1981
! 1-003	- Change E_VERSION to EDT$$T_VER .  JBS 31-Mar-1981
! 1-004	- Use the ASSERT macro.  JBS 01-Jun-1981
! 1-005	- Use new message codes.  JBS 06-Aug-1981
! 1-006 - Add show command for REPEAT. STS 26-Aug-1981
! 1-007 - Add show command for FNF. TMV 10-Sept-1981
! 1-008 - Add show command for WPS search type and SUMMARY.
!	  Also a stub for PROMPT. STS 01-Oct-1981
! 1-009 - Add show command for the text of page and end. STS 06-Oct-1981
! 1-010	- Implement SHOW PROMPT.  JBS 21-Oct-1981
! 1-011 - Add show word and show para.  STS 22-Oct-1981
! 1-012	- Add four more prompts and don't document their lengths.  JBS 23-Oct-1981
! 1-013 - remove external reference to EDT$$A_INI_TXT.  It was never used here
!         anyway.  STS 06-Nov-1981
! 1-014 - Add SHOW HELP command.  SMB 18-Dec-1981
! 1-015 - Change SHO BUF to call 48-bit count display module.  SMB 5-Feb-1982
! 1-016	- Add SHOW AUTOREPEAT.  JBS 09-Feb-1982
! 1-017	- Use VERSION.REQ to define the version number of EDT.  JBS 09-Mar-1982
! 1-018	- Add SHOW COMMAND.  JBS 04-May-1982
! 1-019 - Change format of SHOW HELP.  SMB 25-May-1982
! 1-020 - Change SHOW HELP for the 11's.  SMB 2-Jun-1982
! 1-021	- Track changes to SET COMMAND in SHOW COMMAND.  JBS 07-Jun-1982
! 1-022 - Make all the show messages look alike. STS 08-Jun-1982
! 1-023	- Correct counts in SHOW WORD and SHOW PARA messages.  JBS 09-Jun-1982
! 1-024 - Modify for new message processing.  SMB 29-Jun-1982
! 1-025 - Add CRLF to SHOW BUFFER if using TI_WRSTR.  SMB 02-Jun-1982
! 1-026	- Use EDT$$FMT_CRLF instead of EDT$$OUT_FMTBUF.  JBS 05-Jul-1982
! 1-027 - Remove prompt PRTC. 07-Jul-1982
! 1-028	- Add two new SHOW SEARCH possibilities.  JBS 20-Jul-1982
! 1-029 - Add the SHOW FILES command.  SMB 04-Aug-1982
! 1-030 - Add a check for READONLY output files to edit 1-029.  SMB 09-Aug-1982
! 1-031	- New design for defined keys.  JBS 13-Aug-1982
! 1-032 - Make use of the bit masks for the options word. 17-Aug-1982
! 1-033	- Fix up references to the EDT$M_ symbols.  JBS 23-Aug-1982
! 1-034	- Add information to SHOW TERM.  JBS 02-Sep-1982
! 1-035	- Improve SHOW TERM printout and add copyright statement to SHOW VERSION.  JBS 17-Sep-1982
! 1-036	- More improvements to SHOW TERMINAL.  JBS 29-Oct-1982
! 1-037 - Change placement of colons in SHOW FILES.  SMB 20-Dec-1982
! 1-038	- Add conditionals for WPS support and VT220 support.  JBS 10-Feb-1983
! 1-039	- Correct the sense of SHOW WORD.  JBS 11-Feb-1983
! 1-040	- Print key definitions in segments.  JBS 07-Mar-1983
! 1-041	- Also print user-specified text, the command file name and prompts in segments.  JBS 14-Jul-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$SHW_CMD : NOVALUE;			! Process the SHOW command

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

LIBRARY 'EDTSRC:SUPPORTS';

LIBRARY 'EDTSRC:KEYPADDEF';

REQUIRE 'EDTSRC:VERSION';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$SHW_CMD  - SHOW line-mode command'

GLOBAL ROUTINE EDT$$SHW_CMD 			! SHOW line-mode command
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Command processing routine for SHOW.  The current command node
!	field SET_TYPE gives an index for the type of SHOW which is
!	being done.  Case on this and put the stuff out.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$G_TRN_TBLINIT
!	EDT$$A_BUF_LST
!	EDT$$G_CAS_FLG
!	EDT$$G_EDIT_DFLTMOD
!	EDT$$A_US_ENT
!	EDT$$G_CMD_NAMLEN
!	EDT$$A_CMD_NAM
!	EDT$$G_EXCT_MATCH
!	EDT$$G_FNF_MSGFLG
!	EDT$$A_US_TXT
!	EDT$$G_KPAD
!	EDT$$G_NOS
!	EDT$$G_QUIET
!	EDT$$G_SEA_BEG
!	EDT$$G_RPT
!	EDT$$G_SEA_BNDD
!	EDT$$G_SCR_LNS
!	EDT$$G_SCLL_BOT
!	EDT$$G_SCLL_TOP
!	EDT$$G_TAB_SIZ
!	EDT$$A_CUR_BUF
!	EDT$$G_TAB_LVL
!	EDT$$G_TRUN
!	EDT$$G_TI_TYP
!	EDT$$G_TI_WID
!	EDT$$G_VFY
!	EDT$$G_WD_WRAP
!	EDT$$A_EXE_CURCMD
!	EDT$$G_SUMRY
!	EDT$$G_ENB_AUTRPT
!	EDT$$G_PARTYP
!	EDT$$G_WRDTYP
!	EDT$$T_PMT_LINE
!	EDT$$T_PMT_KPD
!	EDT$$T_PMT_NOKPD
!	EDT$$T_PMT_HCCHG
!	EDT$$T_PMT_INS
!	EDT$$T_PMT_INSN
!	EDT$$T_PMT_QUERY
!	EDT$$G_FMT_LNPOS
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_TXT_ONSCR
!	EDT$$G_FMT_LNPOS
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$FMT_CRLF,				! Terminate an output line
	EDT$$TI_WRSTR,
	EDT$$SET_HLPFNAM,
	EDT$$FMT_STRCNT,
	EDT$$TST_BADK,
	EDT$$FMT_CH,
	EDT$$FMT_DCML,
	EDT$$FMT_STR,
	EDT$$MSG_TOSTR,
	EDT$$FIND_KEY,				! Find a key's definition
	EDT$$DEF_DFLTK,				! Define the default keypad
	EDT$$FMT_CHWID;				! Compute the width of a character

%IF %BLISS (BLISS16)
%THEN

    EXTERNAL ROUTINE
	EDT$$GET_FNAM;

%FI

    EXTERNAL LITERAL
	EDT$M_NOOUTPUT;

    EXTERNAL
	EDT$$V_OPTIONS : BITVECTOR [32],	! bit 3 = /NOOUTPUT
	EDT$$A_INP_NAM,				! Input file name
	EDT$$G_INP_NAMLEN,			! Length of input file name
	EDT$$A_OUT_NAM,				! Output file name
	EDT$$G_OUT_NAMLEN,			! Output file name length
	EDT$$A_FMT_WRRUT,			! Format output routine
	EDT$$G_TRN_TBLINIT,			! True if translation table has been initialized
	EDT$$A_BUF_LST,
	EDT$$G_CAS_FLG,
	EDT$$G_EDIT_DFLTMOD,
	EDT$$A_US_ENT : VECTOR,
	EDT$$G_EXCT_MATCH,
	EDT$$A_US_TXT : VECTOR,			! user defined text
	EDT$$G_FNF_MSGFLG,
	EDT$$G_KPAD,
	EDT$$G_NOS,
	EDT$$G_QUIET,
	EDT$$G_SEA_BEG,
	EDT$$G_RPT,
	EDT$$G_SEA_BNDD,
	EDT$$G_SCR_LNS,
	EDT$$G_SCLL_BOT,
	EDT$$G_SCLL_TOP,
	EDT$$G_TAB_SIZ,
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,
	EDT$$G_TAB_LVL,
	EDT$$G_TRUN,
	EDT$$G_TXT_ONSCR,
	EDT$$G_TI_TYP,
	EDT$$G_TI_WID,
	EDT$$G_VFY,
	EDT$$G_WD_WRAP,
	EDT$$T_HELP_NAM,			! help file name
	EDT$$G_HELP_NAMLEN,			! help file name length
	EDT$$G_HELP_SET,			! flag for help file name set
	EDT$$A_CMD_NAM,				! Name of command file
	EDT$$G_CMD_NAMLEN,			! Length of the name of the command file
	EDT$$G_TI_SCROLL,			! 1 = terminal has scrolling regions

%IF SUPPORT_VT220
%THEN
	EDT$$G_EIGHT_BIT,			! 1 = this is an eight-bit terminal
%FI

	EDT$$G_TI_EDIT,				! 1 = this terminal has 'edit' features (ICM, DCH, IL, DL)
	EDT$$G_ENB_AUTRPT,			! 1 = manipulate autorepeat in VT100, 0 = don't

%IF SUPPORT_WPS
%THEN
	EDT$$G_SUMRY,				! summary flag
	EDT$$G_WRDTYP,				! type of word flag
	EDT$$G_PARTYP,				! type of para flag
%FI

	EDT$$A_EXE_CURCMD : REF NODE_BLOCK,	! Pointer to the current command.
	EDT$$G_FMT_LNPOS,			! Current line position
	EDT$$T_PMT_LINE : VECTOR [, BYTE],	! Counted ASCII string of line-mode prompt
	EDT$$T_PMT_KPD : VECTOR [, BYTE],	! Counted ASCII string of keypad prompt
	EDT$$T_PMT_NOKPD : VECTOR [, BYTE],	! Counted ASCII string of nokeypad prompt
	EDT$$T_PMT_HCCHG : VECTOR [, BYTE],	! Counted ASCII string of hard copy change mode prompt
	EDT$$T_PMT_INS : VECTOR [, BYTE],	! Counted ASCII string of line-mode insert prompt
	EDT$$T_PMT_INSN : VECTOR [, BYTE],	! Counted ASCII string of line-mode insert nonumbers prompt
	EDT$$T_PMT_QUERY : VECTOR [, BYTE];	! Counted ASCII string of /QUERY prompt

    MESSAGES ((KEYNOTDEF, NODEFN, INVPARFOR));

    CASE .EDT$$A_EXE_CURCMD [SET_TYPE] FROM 1 TO 29 OF
	SET

	[1] : 					! Show buffers
	    BEGIN

	    LOCAL
		BUF : REF TBCB_BLOCK;

!+
! Point to first buffer.
!-
	    BUF = .EDT$$A_BUF_LST;
!+
! Loop through all buffers, displaying the number of lines
! in each.
!-

	    WHILE (.BUF NEQA 0) DO
		BEGIN
!+
! Put an equal sign before the current buffer.
!-

		IF (.BUF EQL .EDT$$A_CUR_BUF) THEN EDT$$FMT_CH (%C'=') ELSE EDT$$FMT_CH (%C' ');

		EDT$$FMT_STR (BUF [TBCB_NAME], .BUF [TBCB_NAME_LEN]);
		EDT$$FMT_CH (ASC_K_TAB);
		EDT$$FMT_STRCNT (BUF [TBCB_LINE_COUNT], UPLIT (%C' '), 0);
!+
! If the buffer still has a file attached to it, then print
! an asterisk after the count to indicate there may be more
! lines than we have indicated.
!-

		IF (.BUF [TBCB_INPUT_RAB] NEQ 0) THEN EDT$$FMT_CH (%C'*');

		EDT$$FMT_STR (UPLIT (BYTE (ASC_K_TAB, 'lines')), 6);
		EDT$$FMT_CRLF ();
		BUF = .BUF [TBCB_NEXT_BUF];
		END;

	    END;

	[2] : 					! Show case
	    BEGIN

	    CASE .EDT$$G_CAS_FLG FROM 0 TO 2 OF
		SET

		[0] :
		    EDT$$FMT_STR (UPLIT (BYTE ('None')), 4);

		[1] :
		    EDT$$FMT_STR (UPLIT (BYTE ('Upper')), 5);

		[2] :
		    EDT$$FMT_STR (UPLIT (BYTE ('Lower')), 5);

		[OUTRANGE] :
		    ASSERT (0);
		TES;

	    EDT$$FMT_CRLF ();
	    END;

	[3] : 					! Show search
	    BEGIN

	    CASE .EDT$$G_EXCT_MATCH FROM 0 TO 4 OF
		SET

		[0] :
		    EDT$$FMT_STR (UPLIT (BYTE ('general')), 7);

		[1] :
		    EDT$$FMT_STR (UPLIT (BYTE ('exact')), 5);

		[2] :
		    EDT$$FMT_STR (UPLIT (BYTE ('wps')), 3);

		[3] :
		    EDT$$FMT_STR (UPLIT (BYTE ('case insensitive')), 16);

		[4] :
		    EDT$$FMT_STR (UPLIT (BYTE ('diacriticical insensitive')), 25);

		[OUTRANGE] :
		    ASSERT (0);
		TES;

	    IF .EDT$$G_SEA_BEG
	    THEN
		EDT$$FMT_STR (UPLIT BYTE(' begin '), 7)
	    ELSE
		EDT$$FMT_STR (UPLIT BYTE(' end '), 5);

	    IF (.EDT$$G_SEA_BNDD EQL 0) THEN EDT$$FMT_STR (UPLIT BYTE('un'), 2);

	    EDT$$FMT_STR (UPLIT BYTE('bounded'), 7);
	    EDT$$FMT_CRLF ();
	    END;

	[4] : 					! Show terminal
	    BEGIN

	    CASE .EDT$$G_TI_TYP FROM 0 TO 3 OF
		SET

		[0] :
		    EDT$$FMT_STR (UPLIT (BYTE ('Unknown')), 7);

		[TERM_VT52] :
		    EDT$$FMT_STR (UPLIT (BYTE ('VT52')), 4);

		[TERM_VT100] :
		    EDT$$FMT_STR (UPLIT (BYTE ('VT100')), 5);

		[TERM_HCPY] :
		    EDT$$FMT_STR (UPLIT (BYTE ('Hardcopy')), 8);

		[OUTRANGE] :
		    ASSERT (0);
		TES;

	    IF .EDT$$G_TI_SCROLL
	    THEN
		EDT$$FMT_STR (UPLIT (BYTE (', scroll')), 8)
	    ELSE
		EDT$$FMT_STR (UPLIT (BYTE (', noscroll')), 10);

%IF SUPPORT_VT220
%THEN

	    IF .EDT$$G_EIGHT_BIT
	    THEN
		EDT$$FMT_STR (UPLIT (BYTE (', eightbit')), 10)
	    ELSE
%FI

		EDT$$FMT_STR (UPLIT (BYTE (', noeightbit')), 12);

	    IF .EDT$$G_TI_EDIT
	    THEN
		EDT$$FMT_STR (UPLIT (BYTE (', edit')), 6)
	    ELSE
		EDT$$FMT_STR (UPLIT (BYTE (', noedit')), 8);

	    EDT$$FMT_CRLF ();
	    END;

	[5] : 					! Show version
	    BEGIN
!+
! Show the version number.
!-
	    EDT$$FMT_STR (VERSION_TEXT, VERSION_TEXT_LEN);
!+
! Show the copyright statement.  If we have an eight-bit terminal
! we use the international copyright symbol, otherwise we simulate
! it using (C).  The copyright statement goes on the same line as
! the version number.
!-

%IF SUPPORT_VT220
%THEN

	    IF .EDT$$G_EIGHT_BIT
	    THEN
		EDT$$FMT_STR (COPYRIGHT_TEXT_8, COPYRIGHT_TEXT_8_LEN)
	    ELSE
%FI

		EDT$$FMT_STR (COPYRIGHT_TEXT_7, COPYRIGHT_TEXT_7_LEN);

	    EDT$$FMT_CRLF ();
	    END;

	[6] : 					! Show ent
	    BEGIN

	    LOCAL
		LEN,
		ENT;

	    ENT = .EDT$$A_US_ENT [.EDT$$A_EXE_CURCMD [SET_VAL] - 1];
	    LEN = CH$RCHAR_A (ENT);
	    EDT$$FMT_STR (.ENT, .LEN);
	    EDT$$FMT_CRLF ();
	    END;

	[7] : 					! Show key
	    BEGIN

	    LOCAL
		KEY_PTR : REF BLOCK [, BYTE] FIELD (KEY_DEF_FIELD),
		STATUS;

	    IF ( NOT .EDT$$G_TRN_TBLINIT) THEN STATUS = EDT$$DEF_DFLTK () ELSE STATUS = 1;

	    IF .STATUS
	    THEN
		BEGIN

		IF EDT$$TST_BADK (.EDT$$A_EXE_CURCMD [KEY_VAL])
		THEN
		    EDT$$MSG_TOSTR (EDT$_KEYNOTDEF)
		ELSE

		    IF EDT$$FIND_KEY (.EDT$$A_EXE_CURCMD [KEY_VAL], KEY_PTR)
		    THEN
			BEGIN
!+
! If the key defintion is long, show it in pieces.
!-

			LOCAL
			    KEY_P,
			    KEY_L,
			    CH;

			KEY_P = KEY_PTR [KEY_DEF_TEXT];
			KEY_L = .KEY_PTR [KEY_DEF_LEN];
			EDT$$G_FMT_LNPOS = 0;
			CH = CH$RCHAR_A (KEY_P);
			KEY_L = .KEY_L - 1;

			WHILE (.KEY_L GEQ 0) DO
			    BEGIN

			    IF ((.EDT$$G_FMT_LNPOS + EDT$$FMT_CHWID (.CH, .EDT$$G_FMT_LNPOS)) GEQ
				.EDT$$G_TI_WID)
			    THEN
				EDT$$FMT_CRLF ();

			    EDT$$FMT_CH (.CH);
			    CH = CH$RCHAR_A (KEY_P);
			    KEY_L = .KEY_L - 1;
			    END;

			END
		    ELSE
			EDT$$MSG_TOSTR (EDT$_NODEFN);

		END
	    ELSE
		EDT$$MSG_TOSTR (.STATUS);

	    EDT$$FMT_CRLF ();
	    END;

	[8] : 					! Show cursor
	    BEGIN
	    EDT$$FMT_DCML (.EDT$$G_SCLL_TOP);
	    EDT$$FMT_CH (%C':');
	    EDT$$FMT_DCML (.EDT$$G_SCLL_BOT);
	    EDT$$FMT_CRLF ();
	    END;

	[9] : 					! Show screen.
	    BEGIN
	    EDT$$FMT_DCML (.EDT$$G_TI_WID);
	    EDT$$FMT_CRLF ();
	    END;

	[10] : 					! Show numbers.
	    BEGIN

	    IF (.EDT$$G_NOS EQL 0) THEN EDT$$FMT_STR (UPLIT BYTE('no'), 2);

	    EDT$$FMT_STR (UPLIT BYTE('numbers'), 7);
	    EDT$$FMT_CRLF ();
	    END;

	[11] : 					! Show verify
	    BEGIN

	    IF (.EDT$$G_VFY EQL 0) THEN EDT$$FMT_STR (UPLIT BYTE('no'), 2);

	    EDT$$FMT_STR (UPLIT BYTE('verify'), 6);
	    EDT$$FMT_CRLF ();
	    END;

	[12] : 					! Show truncate
	    BEGIN

	    IF (.EDT$$G_TRUN EQL 0) THEN EDT$$FMT_STR (UPLIT BYTE('no'), 2);

	    EDT$$FMT_STR (UPLIT BYTE('truncate'), 8);
	    EDT$$FMT_CRLF ();
	    END;

	[13] : 					! Show keypad
	    BEGIN

	    IF (.EDT$$G_KPAD EQL 0) THEN EDT$$FMT_STR (UPLIT BYTE('no'), 2);

	    EDT$$FMT_STR (UPLIT BYTE('keypad'), 6);
	    EDT$$FMT_CRLF ();
	    END;

	[14] : 					! Show wrap
	    BEGIN

	    IF (.EDT$$G_WD_WRAP EQL 256)
	    THEN
		EDT$$FMT_STR (UPLIT BYTE('nowrap'), 6)
	    ELSE
		EDT$$FMT_DCML (.EDT$$G_WD_WRAP);

	    EDT$$FMT_CRLF ();
	    END;

	[15] : 					! Show mode
	    BEGIN

	    IF (.EDT$$G_EDIT_DFLTMOD EQL CHANGE_MODE)
	    THEN
		EDT$$FMT_STR (UPLIT (BYTE ('Change')), 6)
	    ELSE
		EDT$$FMT_STR (UPLIT (BYTE ('Line')), 4);

	    EDT$$FMT_CRLF ();
	    END;

	[16] : 					! Show lines
	    BEGIN
	    EDT$$FMT_DCML (.EDT$$G_SCR_LNS);
	    EDT$$FMT_CRLF ();
	    END;

	[17] : 					! Show quiet
	    BEGIN

	    IF (.EDT$$G_QUIET EQL 0) THEN EDT$$FMT_STR (UPLIT BYTE('no'), 2);

	    EDT$$FMT_STR (UPLIT BYTE('quiet'), 5);
	    EDT$$FMT_CRLF ();
	    END;

	[18] : 					! Show tab
	    BEGIN

	    IF (.EDT$$G_TAB_SIZ EQL 0)
	    THEN
		BEGIN
		EDT$$FMT_STR (UPLIT BYTE('notab'), 5);
		EDT$$FMT_CRLF ();
		END
	    ELSE
		BEGIN
		EDT$$FMT_STR (UPLIT BYTE('tab size '), 9);
		EDT$$FMT_DCML (.EDT$$G_TAB_SIZ);
		EDT$$FMT_STR (UPLIT BYTE('; tab level '), 12);
		EDT$$FMT_DCML (.EDT$$G_TAB_LVL);
		EDT$$FMT_CRLF ();
		END;

	    END;

	[19] : 					! Show repeat
	    BEGIN

	    IF (.EDT$$G_RPT EQL 0) THEN EDT$$FMT_STR (UPLIT BYTE('no'), 2);

	    EDT$$FMT_STR (UPLIT BYTE('repeat'), 6);
	    EDT$$FMT_CRLF ();
	    END;

	[20] : 					! Show file_not_found
	    BEGIN

	    IF (.EDT$$G_FNF_MSGFLG EQL 0) THEN EDT$$FMT_STR (UPLIT BYTE('no'), 2);

	    EDT$$FMT_STR (UPLIT BYTE('fnf'), 3);
	    EDT$$FMT_CRLF ();
	    END;

	[21] : 					! show summary
	    BEGIN

%IF SUPPORT_WPS
%THEN

	    IF ( NOT .EDT$$G_SUMRY)
	    THEN
		EDT$$FMT_STR (UPLIT BYTE('nosummary'), 9)
	    ELSE
%FI

		EDT$$FMT_STR (UPLIT BYTE('summary'), 7);

	    EDT$$FMT_CRLF ();
	    END;

	[22] : 					! Show Prompt
	    BEGIN

	    LOCAL
		LEN,				! Length of the string
		TXT,				! Address of string contents
		PROMPT_NUM,			! Which prompt string
		CH;

	    PROMPT_NUM = .EDT$$A_EXE_CURCMD [SET_VAL];
	    TXT = (CASE .PROMPT_NUM FROM 1 TO 7 OF
		SET
		[1] : EDT$$T_PMT_LINE;
		[2] : EDT$$T_PMT_KPD;
		[3] : EDT$$T_PMT_NOKPD;
		[4] : EDT$$T_PMT_HCCHG;
		[5] : EDT$$T_PMT_INS;
		[6] : EDT$$T_PMT_INSN;
		[7] : EDT$$T_PMT_QUERY;
		[OUTRANGE] :
		    BEGIN
		    ASSERT (0);
		    0
		    END;
		TES);
	    LEN = CH$RCHAR_A (TXT);
!+
! If the prompt is long, show it in pieces.
!-
	    EDT$$G_FMT_LNPOS = 0;
	    CH = CH$RCHAR_A (TXT);
	    LEN = .LEN - 1;

	    WHILE (.LEN GEQ 0) DO
		BEGIN

		IF ((.EDT$$G_FMT_LNPOS + EDT$$FMT_CHWID (.CH, .EDT$$G_FMT_LNPOS)) GEQ .EDT$$G_TI_WID)
		THEN
		    EDT$$FMT_CRLF ();

		EDT$$FMT_CH (.CH);
		CH = CH$RCHAR_A (TXT);
		LEN = .LEN - 1;
		END;

	    EDT$$FMT_CRLF ();
	    END;

	[23] : 					! show text
	    BEGIN

	    LOCAL
		LEN,
		TXT,
		CH;

	    TXT = .EDT$$A_US_TXT [.EDT$$A_EXE_CURCMD [SET_VAL] - 1];
	    LEN = CH$RCHAR_A (TXT);
!+
! If the text is long, show it in pieces.
!-
	    EDT$$G_FMT_LNPOS = 0;
	    CH = CH$RCHAR_A (TXT);
	    LEN = .LEN - 1;

	    WHILE (.LEN GEQ 0) DO
		BEGIN

		IF ((.EDT$$G_FMT_LNPOS + EDT$$FMT_CHWID (.CH, .EDT$$G_FMT_LNPOS)) GEQ .EDT$$G_TI_WID)
		THEN
		    EDT$$FMT_CRLF ();

		EDT$$FMT_CH (.CH);
		CH = CH$RCHAR_A (TXT);
		LEN = .LEN - 1;
		END;

	    EDT$$FMT_CRLF ();
	    END;

	[24] : 					! show word type
	    BEGIN

%IF SUPPORT_WPS
%THEN

	    IF .EDT$$G_WRDTYP
	    THEN
		EDT$$FMT_STR (UPLIT BYTE('nodelimiter '), 12)
	    ELSE
%FI

		EDT$$FMT_STR (UPLIT BYTE('delimiter '), 10);

	    EDT$$FMT_CRLF ();
	    END;

	[25] : 					! SHOW WORD
	    BEGIN

%IF SUPPORT_WPS
%THEN

	    IF .EDT$$G_PARTYP
	    THEN
		EDT$$FMT_STR (UPLIT BYTE('nowps '), 6)
	    ELSE
%FI

		EDT$$FMT_STR (UPLIT BYTE('wps '), 4);

	    EDT$$FMT_CRLF ();
	    END;

	[26] : 					! Show Help File Name
	    BEGIN

	    LOCAL
		STATUS;

!+
! If the help file name has not been parsed, call SET HELP so
! that the resultant file name will appear in the message.
! For the PDP-11's, EDT$$G_HELP_SET is always zero.
!-
	    STATUS = 1;

	    IF ( NOT .EDT$$G_HELP_SET)
	    THEN
		STATUS = EDT$$SET_HLPFNAM (CH$PTR (EDT$$T_HELP_NAM),
		    .EDT$$G_HELP_NAMLEN);

	    IF (.STATUS)
	    THEN
		BEGIN
		EDT$$FMT_STR (UPLIT BYTE('Help file name: '), 16);

%IF %BLISS (BLISS32)
%THEN
		EDT$$FMT_STR (CH$PTR (EDT$$T_HELP_NAM), .EDT$$G_HELP_NAMLEN);
%ELSE
		EDT$$GET_FNAM ();
%FI

		EDT$$FMT_CRLF ();
		END;

	    END;

	[27] : 					! show autorepeat
	    BEGIN

	    IF (.EDT$$G_ENB_AUTRPT EQL 1)
	    THEN
		EDT$$FMT_STR (UPLIT BYTE('autorepeat'), 10)
	    ELSE
		EDT$$FMT_STR (UPLIT BYTE('noautorepeat'), 12);

	    EDT$$FMT_CRLF ();
	    END;

	[28] : 					! show command
	    BEGIN

	    LOCAL
		LEN,
		TXT,
		CH;

	    TXT = .EDT$$A_CMD_NAM;
	    LEN = .EDT$$G_CMD_NAMLEN;

	    IF (.TXT NEQA 0)
	    THEN
		BEGIN
!+
! If the name is long, show it in pieces.
!-
		EDT$$G_FMT_LNPOS = 0;
		CH = CH$RCHAR_A (TXT);
		LEN = .LEN - 1;

		WHILE (.LEN GEQ 0) DO
		    BEGIN

		    IF ((.EDT$$G_FMT_LNPOS + EDT$$FMT_CHWID (.CH, .EDT$$G_FMT_LNPOS)) GEQ .EDT$$G_TI_WID)
		    THEN
			EDT$$FMT_CRLF ();

		    EDT$$FMT_CH (.CH);
		    CH = CH$RCHAR_A (TXT);
		    LEN = .LEN - 1;
		    END;

		END;

	    EDT$$FMT_CRLF ();
	    END;

	[29] : 					! show input/output files
	    BEGIN

	    LOCAL
		LEN,
		TXT;

	    TXT = .EDT$$A_INP_NAM;
	    LEN = .EDT$$G_INP_NAMLEN;
	    EDT$$FMT_STR (UPLIT BYTE('Input  File: '), 13);
	    EDT$$FMT_STR (.TXT, .LEN);
	    EDT$$FMT_CRLF ();
	    EDT$$FMT_STR (UPLIT BYTE('Output File: '), 13);

	    IF (.EDT$$G_OUT_NAMLEN EQL 0)
	    THEN

		IF ((.EDT$$V_OPTIONS AND EDT$M_NOOUTPUT) NEQ 0)
		THEN
		    EDT$$FMT_STR (UPLIT BYTE('**Readonly**'), 12)
		ELSE
		    EDT$$FMT_STR (.TXT, .LEN)

	    ELSE
		EDT$$FMT_STR (.EDT$$A_OUT_NAM, .EDT$$G_OUT_NAMLEN);

	    EDT$$FMT_CRLF ();
	    END;

	[OUTRANGE] :
	    ASSERT (0);
	TES;

    END;					! of routine EDT$$SHW_CMD

!<BLF/PAGE>

END						! of module EDT$LSHOW

ELUDOM
