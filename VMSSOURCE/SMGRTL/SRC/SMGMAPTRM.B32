%TITLE 'SMG$MAP_TERM_TABLE - Map Termtable.exe as a global section'
MODULE SMG$MAP_TERM_TABLE (
		MAIN = SMG$MAP_TERM_TABLE,
		IDENT = '1-001'	! File: SMGMAPTRM.B32 Edit: PLL1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Screen Management
!
! ABSTRACT:
!
!	This module maps TERMTABLE.EXE as a global section.
!
! ENVIRONMENT:	User mode, Shared library routines.
!
! AUTHOR: P. Levesque, CREATION DATE: 9-Nov-1983
!
! MODIFIED BY:
!
! 1-001	- Original.  PLL 9-Nov-1983
!--

%SBTTL 'Declarations'
!
! SWITCHES:
!

!
! LINKAGES:
!
!	NONE
!
! INCLUDE FILES:
!

REQUIRE 'SRC$:SMGPROLOG';		! defines psects, macros, etc.

LIBRARY 'RTLML:SMGTPALIB';		! definitions for TERMTABLE

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE

    SMG$MAP_TERM_TABLE : NOVALUE;	! map Termtable.exe as a global section

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

!
! FIELDS:
!
!	NONE
!
! PSECTS:
!

!
! STRUCTURES:
!


!
! OWN STORAGE:
!

!    NONE

!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL
    SMG$_GBLNOTCRE,		! global section not created
    SMG$_DELEXIGBL;		! delete existing global section


%SBTTL 'SMG$MAP_TERM_TABLE  - Map Termtable.exe'
GLOBAL ROUTINE SMG$MAP_TERM_TABLE : NOVALUE = 
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine maps TERMTABLE.EXE as a global section.
!
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	Errors from $OPEN, $CRMPSC may be signalled
!	SMG$_GBLNOTCRE		global section not created
!	SMG$_DELEXIGBL		delete existing global section and retry
!
! SIDE EFFECTS:
!
!	NONE
!--
    BEGIN
    LOCAL
	OPEN_STATUS,			! status retd by $OPEN
	MAP_STATUS,			! status retd by $CRMPSC
	REQ_ADDR : VECTOR [2] INITIAL (%X'200', %X'200'),
			 		! input address to $CRMPSC
	ACTUAL_ADDR : VECTOR [2],	! retd address from $CRMPSC
	GBL_NAME_DESC : BLOCK [8,BYTE], ! desc for global section name
	TERM_TAB_FAB : $FAB (FAC = GET, SHR = GET, FOP = UFO,
			     FNM = 'TERMTABLE.EXE');
					! FAB for TERMTABLE.EXE

!+
! Open the file to get a channel.
!-

    IF NOT (OPEN_STATUS = $OPEN (FAB = TERM_TAB_FAB))
    THEN
	SIGNAL_STOP (.OPEN_STATUS, .TERM_TAB_FAB [FAB$L_STV]);

!+
! Map it as a global section.
!-

    GBL_NAME_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    GBL_NAME_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    GBL_NAME_DESC [DSC$W_LENGTH] = %CHARCOUNT ('SMG$TERMTABLE');
    GBL_NAME_DESC [DSC$A_POINTER] = UPLIT ('SMG$TERMTABLE');

    MAP_STATUS = $CRMPSC (INADR = REQ_ADDR,
			  RETADR = ACTUAL_ADDR,
			  FLAGS = SEC$M_GBL + SEC$M_EXPREG + SEC$M_PERM + SEC$M_SYSGBL,
			  GSDNAM = GBL_NAME_DESC,
			  CHAN = .TERM_TAB_FAB [FAB$L_STV]);
    !+
    ! We always want to create a new global section.  If there is already
    ! a SMG$TERMTABLE global section, it will have to be deleted before we
    ! can create a new one.
    !
    ! We can't delete the old section here because the deletion may not happen
    ! right away.  (The section is marked for delete but doesn't disappear until
    ! no processes are mapped to it.)  
    !-
    IF .MAP_STATUS NEQ SS$_CREATED
    THEN
	SIGNAL (SMG$_GBLNOTCRE,0,SMG$_DELEXIGBL);
	

!+
! Deallocate the channel.
!-

    $DASSGN (CHAN = .TERM_TAB_FAB [FAB$L_STV]);

    END;				! end of SMG$MAP_TERM_TABLE

    END					! end of module SMG$MAP_TERM_TABLE
    ELUDOM
