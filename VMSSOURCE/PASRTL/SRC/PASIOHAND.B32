MODULE PAS$$IO_HANDLER ( %TITLE 'I/O Error Handler'
		IDENT = '1-003'		! File: PASIOHAND.B32 Edit: SBL1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains PAS$$IO_HANDLER, the condition handler established
!	by all Pascal I/O procedures.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
! 1-002 - If a zero-level access violation occurs while in PAS$$VALIDATE_PFV,
!	  convert the message to PAS$_INVFILVAR.  SBL 14-July-1982
! 1-003 - Check for PAS$_CONTINUE regardless of whether ERROR:=CONTINUE
!	  was specified.  SBL 29-Oct-1982
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$$IO_HANDLER;				! I/O error handler

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE

%SBTTL 'PAS$$IO_HANDLER - I/O Error handler'
GLOBAL ROUTINE PAS$$IO_HANDLER (		! I/O error handler
    	SIGNAL_ARGS: REF BLOCK [, BYTE], 	! Signal arguments array
    	MECH_ARGS: REF BLOCK [, BYTE],		! Mechanism arguments array
    	ENABLE_ARGS: REF VECTOR [, LONG]	! Enable arguments array
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the condition handler enabled by all VAX-11 Pascal I/O
!	procedures.  It implements the ERROR:=CONTINUE specifier by
!	unwinding to the address specified in the enable argument ERROR_ADDR.
!
!	Upon an unwind, if the file is not fully opened, it is closed.  The
!	file is unlocked on unwind.
!
! CALLING SEQUENCE:
!
!	status.wlc.v = PAS$$IO_HANDLER (SIGNAL_ARGS.rl.ra, MECH_ARGS.rl.ra
!					, ENABLE_ARGS.rl.ra)
!
! FORMAL PARAMETERS:
!
!	SIGNAL_ARGS	- The signal argument list.
!
!	MECH_ARGS	- The mechanism argument list.
!
!	ENABLE_ARGS	- An array with the following
!			  format:
!
!				+----------------+
!				|   ENB_COUNT    |  <-- ENABLE_ARGS
!				+----------------+
!				|  ENB_PFV_ADDR  |
!				+----------------+
!				| ENB_UNWIND_ACT |
!				+----------------+
!				| ENB_ERROR_ADDR |
!				+----------------+
!
!			  ENB_COUNT is the count of following enable arguments.
!			  The count is always at least 2.
!
!			  ENB_PFV_ADDR - If non-zero, the address of a longword
!			  containing the PFV our establisher is operating on.
!
!			  ENB_UNWIND_ACT - Specifies the action
!			  to take on an unwind.  The values are:
!			   PAS$K_UNWIND_NOP - Do nothing
!			   PAS$K_UNWIND_UNLOCK - Unlock PFV
!
!			  ENB_ERROR_ADDR - If present and non-zero, the address
!			  of a longword containing the PC of an instruction to
!			  unwind to.  This is present if the user specified
!			  Error:=Continue in the I/O statement.
!
! IMPLICIT INPUTS:
!
!	The signaller's PFV placed as the first FAO argument in the primary
!	signalled message.
!
! IMPLICIT OUTPUTS:
!
!	May clear PFV$V_LOCK upon unwind.
!
! ROUTINE VALUE:
!
!	SS$_RESIGNAL
!
! SIDE EFFECTS:
!
!	May cause an unwind.
!
!	If a zero-level access violation occurs while in PAS$$VALIDATE_PFV,
!	the signal is converted to PAS$_INVFILVAR.
!
!--

    BEGIN

    LITERAL
	ENB_COUNT = 0,		! Count of enable arguments
	ENB_PFV_ADDR = 1,	! Address of address of PFV
	ENB_UNWIND_ACT= 2,	! Address of unwind action
	ENB_ERROR_ADDR = 3;	! Address of address of unwind PC

    BUILTIN
	ACTUALCOUNT;

    !+
    ! Determine if this is an unwind.
    !-

    IF .SIGNAL_ARGS [CHF$L_SIG_NAME] EQLU SS$_UNWIND
    THEN
	BEGIN
	IF ..ENABLE_ARGS [ENB_UNWIND_ACT] NEQ PAS$K_UNWIND_NOP
	THEN
	    BEGIN

	    !+
	    ! Get our establisher's PFV.
	    !-

	    LOCAL
		PFV: REF $PAS$PFV_FILE_VARIABLE;
	    PFV = ..ENABLE_ARGS [ENB_PFV_ADDR];	! Get PFV address

	    PFV [PFV$V_LOCK] = 0;	! Unlock PFV
	    END;
	END

    ELSE

	BEGIN

	LOCAL
	    COND_NAME: BLOCK [4, BYTE];	! Primary condition name

	!+
	! Get primary condition name.
	!-
    
	COND_NAME = .SIGNAL_ARGS [CHF$L_SIG_NAME];

	!+
	! If this is a zero-level access violation, and if the PC is inside
	! PAS$$VALIDATE_PFV, we assume that we have been passed an invalid
	! file variable.  Convert the signal to PAS$_INVFILVAR.
	!-

	IF (.COND_NAME EQLU SS$_ACCVIO) AND (.MECH_ARGS [CHF$L_MCH_DEPTH] EQL 0)
	THEN
	    !+
	    ! Compare PC against range for PAS$$VALIDATE_PFV.
	    !-
	    IF (.SIGNAL_ARGS [16,0,32,0] GEQA PAS$$VALIDATE_PFV) AND
	       (.SIGNAL_ARGS [16,0,32,0] LSSA PAS$$VALIDATE_PFV_END)
	    THEN
		BEGIN
		SIGNAL_ARGS [CHF$L_SIG_NAME] = PAS$_INVFILVAR;
		SIGNAL_ARGS [8,0,32,0] = 1;	! FAO count
		SIGNAL_ARGS [12,0,32,0] = ..ENABLE_ARGS [ENB_PFV_ADDR];
		COND_NAME = .SIGNAL_ARGS [CHF$L_SIG_NAME];
		END;

	!+
	! Is this a PAS$ error?  If not, resignal.
	!-

	IF .COND_NAME [STS$V_FAC_NO] NEQU PAS$_FACILITY
	THEN
	    RETURN SS$_RESIGNAL;

	!+
	! See if the PFVs match.  The signaller's PFV is the
	! first FAO parameter in the primary message.  If so, then
	! continue with Pascal-specific processing.
	!-

	IF .SIGNAL_ARGS [12,0,32,0] EQLA ..ENABLE_ARGS [ENB_PFV_ADDR]
	THEN
	    BEGIN

	    !+
	    ! Check to see if the current exception code is PAS$_CONTINUE.
	    ! This is generated by PAS$$SIGNAL if a user condition handler
	    ! continued from the signal.  If so, do a default unwind to
	    ! the caller of our establisher.  
	    !-

	    IF .COND_NAME EQLU PAS$_CONTINUE
	    THEN
		IF NOT $UNWIND ()
		THEN
		    $PAS$BUGCHECK (BUG_UNWINDFAIL);

	    !+
	    ! Has ERROR:=CONTINUE been specified by our establisher?  This
	    ! is determined by having ENB_ERROR_ADDR be non-zero.  If so,
	    ! we may want to unwind.  
	    !-
    
	    IF .ENABLE_ARGS [ENB_COUNT] GEQU ENB_ERROR_ADDR
	    THEN
		BEGIN
		IF ..ENABLE_ARGS [ENB_ERROR_ADDR] NEQ 0
		THEN
		    BEGIN
    
		    !+
		    ! See if the error message is one which is "trapped"
		    ! by ERROR:=CONTINUE.  This is done by comparing the
		    ! message number against a select range.
		    !-
    
		    IF .COND_NAME [STS$V_CODE] GEQU PAS$$K_MSGCONTLO AND ! Lowest number
		       .COND_NAME [STS$V_CODE] LEQU PAS$$K_MSGCONTHI
		    THEN
			BEGIN
    
			!+
			! We want to do the ERROR:=CONTINUE.  Unwind to the caller
			! of our establisher at the specified PC.
			!-
    
			IF NOT $UNWIND (NEWPC = ..ENABLE_ARGS [ENB_ERROR_ADDR])
			THEN
			    $PAS$BUGCHECK (BUG_UNWINDFAIL);
			END;
		    END;
		END;
	    END;
	END; 	
	
    RETURN SS$_RESIGNAL;			! Resignal error

    END;					! End of routine PAS$$IO_HANDLER


END						! End of module PAS$$IO_HANDLER

ELUDOM
