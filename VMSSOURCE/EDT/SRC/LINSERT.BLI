%TITLE 'EDT$LINSERT - insert text'
MODULE EDT$LINSERT (				! Insert text
		IDENT = 'V04-000'			! File: LINSERT.BLI Edit: JBS1013
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module executes the line mode INSERT command.
!	It also provides support for the insert part of the
!	REPLACE command.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: February 3, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 30-JAN-81.  This module was created by
!	extracting routines INSERT and INS_COM from EXEC.BLI.
! 1-002	- Regularize headers.  JBS 20-Mar-1981
! 1-003	- Change INS_COM to EDT$$INS_CMD .  JBS 30-Mar-1981
! 1-004	- Do prompting from a global.  JBS 23-Oct-1981
! 1-005 - Add error check for too many lines.  SMB 5-Feb-1982
! 1-006 - Reset command buffer after EOF. STS 23-Jun-1982
! 1-007 - Add CRLF for EXT insert and replace commands.  SMB 07-Jul-1982
! 1-008 - Change indentation for large line numbers.  SMB 14-Jul-1982
! 1-009 - Use previous line size instead of current.  SMB 15-Jul-1982
! 1-010 - Put code for edt$$rng_posfrst in line. STS 11-Oct-1982
! 1-011 - Use new macro for comparing line numbers. STS 20-Oct-1982
! 1-012	- Don't print CRLF unless we are coming from the terminal.  JBS 19-Jan-1983
! 1-013	- Make sure select is at the beginning of the line before inserting.  JBS 12-Jul-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$INS_TXT : NOVALUE,			! Insert text
    EDT$$INS_CMD : NOVALUE;			! Process the INSERT command

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routines

%SBTTL 'EDT$$INS_TXT  - insert text'

GLOBAL ROUTINE EDT$$INS_TXT 			! Insert text for INSERT and REPLACE commands
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine handles the insertion of text from an INSERT or REPLACE
!	command.  If the current token from the parser is a ';', then the text
!	to be inserted is the remainder of the command line.  Otherwise, loop
!	reading a line and inserting it until an end of file is detected.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$A_CMD_END
!	EDT$$G_CMD_LEN
!	EDT$$A_CMD_BUF
!	EDT$$G_INP_SRC
!	EDT$$G_NOS
!	EDT$$A_PA_CURTOK
!	EDT$$T_PMT_INS
!	EDT$$T_PMT_INSN
!	EDT$$T_LN_BUF
!
! IMPLICIT OUTPUTS:
!
!	EDT$$T_CMD_BUF
!	EDT$$A_SEL_POS
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$FMT_CRLF,				! Start a new line
	EDT$$TI_WRSTR,
	EDT$$GET_LN,				! Get the next input line
	EDT$$END_INS,
	EDT$$INS_LN,
	EDT$$START_INS,
	EDT$$TY_CURLN;				! Type out the current line

    EXTERNAL
	EDT$$L_WK_STARTNO : LN_BLOCK,
	EDT$$L_LNO0 : LNOVECTOR [14],
	EDT$$A_FMT_WRRUT,
	EDT$$G_EXT_MOD,
	EDT$$T_CMD_BUF,
	EDT$$A_CMD_END,
	EDT$$G_CMD_LEN,
	EDT$$A_CMD_BUF,
	EDT$$G_INP_SRC,
	EDT$$G_NOS,				! 1 = numbers, 0 = nonumbers
	EDT$$A_PA_CURTOK,
	EDT$$T_PMT_INS : VECTOR [, BYTE],	! Counted ASCII string for line-mode insert prompt
	EDT$$T_PMT_INSN : VECTOR [, BYTE],	! Counted ASCII string for line-mode insert nonumbers prompt
	EDT$$T_LN_BUF,				! Line buffer
	EDT$$A_SEL_POS;				! Position of select point

    LOCAL
	BIG_LINE_PMT : VECTOR [32, BYTE],	! Prompt for lines larger than 10**5
	STATUS,
	EOF;

!+
! Set up the work-file system for insertion
!-
    EDT$$START_INS ();
!+
! Look for the immediate insertion signaled by a ';' following the command.
!-

    IF (CH$RCHAR (.EDT$$A_PA_CURTOK) EQL %C';')
    THEN
	BEGIN
	EDT$$INS_LN (.EDT$$A_PA_CURTOK + 1, .EDT$$A_CMD_END - .EDT$$A_PA_CURTOK - 1);
	EDT$$A_CMD_BUF = .EDT$$A_CMD_END;
	END
    ELSE
!+
! Insert mode loop.  Keep reading and inserting lines until EOF or until
! the maximum number of lines has been reached for this buffer
!-
	BEGIN

	IF (.EDT$$G_EXT_MOD AND (.EDT$$A_FMT_WRRUT EQL EDT$$TI_WRSTR) AND (.EDT$$G_INP_SRC EQL INP_TERM))
	THEN
	    EDT$$FMT_CRLF ();

!+
! Set up the prompt for large lines just in case we need it later
! (only want to do this once.  To do this we add 5 spaces after the
! <CR><LF> in the prompt.
!-

	IF (.EDT$$G_NOS EQL 1)
	THEN
	    BEGIN
	    BIG_LINE_PMT [0] = .EDT$$T_PMT_INS [0] + 5;
	    CH$MOVE (2, EDT$$T_PMT_INS [1], BIG_LINE_PMT [1]);
	    CH$MOVE (.EDT$$T_PMT_INS [0] - 2, EDT$$T_PMT_INS [3], BIG_LINE_PMT [8]);
	    CH$FILL (%C' ', 5, BIG_LINE_PMT [3]);
	    END;

	DO
	    BEGIN

	    LOCAL
		PROMPT_ADDR : REF VECTOR [, BYTE];

	    IF ((CMPLNO (EDT$$L_WK_STARTNO, EDT$$L_LNO0 [10]) GEQ 0) AND (.EDT$$G_NOS EQL 1))
	    THEN
		PROMPT_ADDR = BIG_LINE_PMT
	    ELSE
		PROMPT_ADDR = (CASE .EDT$$G_NOS FROM 0 TO 1 OF
		    SET
		    [0] : EDT$$T_PMT_INSN;
		    [1] : EDT$$T_PMT_INS;
		    [OUTRANGE] :
			BEGIN
			ASSERT (0);
			0
			END;
		    TES);

	    EOF = EDT$$GET_LN (PROMPT_ADDR [1], .PROMPT_ADDR [0]);

	    IF (( NOT .EOF) OR (.EDT$$G_CMD_LEN NEQ 0))	!
	    THEN
		BEGIN
		EDT$$A_SEL_POS = EDT$$T_LN_BUF;
		STATUS = EDT$$INS_LN (EDT$$T_CMD_BUF, .EDT$$G_CMD_LEN);
		END;

	    END
	UNTIL ((.EOF) OR ( NOT .STATUS));

	END;

    IF .EOF
    THEN
	BEGIN
	EDT$$A_CMD_END = EDT$$T_CMD_BUF;
	EDT$$A_CMD_BUF = EDT$$T_CMD_BUF;
	CH$WCHAR ('!', .EDT$$A_CMD_END);
	END;

!+
! Inform the work file system that the insert is complete, and print
! the next line.
!-
    EDT$$END_INS ();

    IF (.EDT$$G_INP_SRC EQL INP_TERM) THEN EDT$$TY_CURLN ();

    END;					! of routine EDT$$INS_TXT


%SBTTL 'EDT$$INS_CMD  - INSERT line-mode command'

GLOBAL ROUTINE EDT$$INS_CMD 			! INSERT line-mode command
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Command processing routine for the INSERT command.   Position to the
!	specified range and, if it positioned successfully,  do the insert.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$A_EXE_CURCMD
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$RNG_REPOS;

    EXTERNAL
	EDT$$G_RNG_FRSTLN,
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,
	EDT$$Z_RNG_ORIGPOS : POS_BLOCK,
	EDT$$A_EXE_CURCMD : REF NODE_BLOCK;	! Pointer to the current command.

    EDT$$G_RNG_FRSTLN = 1;
    EDT$$CPY_MEM (POS_SIZE, .EDT$$A_CUR_BUF, EDT$$Z_RNG_ORIGPOS);

    IF EDT$$RNG_REPOS (.EDT$$A_EXE_CURCMD [RANGE1])
    THEN
	BEGIN
	EDT$$INS_TXT ();
	END;

    END;					! of routine EDT$$INS_CMD

!<BLF/PAGE>

END						! of module EDT$LINSERT

ELUDOM
