MODULE MAIL$SEND_MSG( %TITLE 'VAX/VMS PERSONAL MAIL UTILITY'
		IDENT = 'V04-000' ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	VAX/VMS MAIL UTILITY
!
! ABSTRACT:	Send message to another user on local node
!
! ENVIRONMENT:	NATIVE/USER MODE
!
! AUTHOR: Benn Schreiber, CREATION DATE: 22-Dec-1982
!
! MODIFIED BY:
!
!	V03-019	ROP0032		Robert Posniak		09-AUG-1984
!		Make sure locally allocated XABs are disconnected
!		from global FABs.
!
!	V03-018	ROP0029		Robert Posniak		24-JUL-1984
!		Allow VFC format files to be sent in
!		block mode.
!
!	V03-017	ROP0013		Robert Posniak		27-JUN-1984
!		Only send in block mode if input file has
!		variable length records.  Modify test of
!		isam_create status to allow sending to
!		sequential files.
!
!	V03-016	BLS0272		Benn Schreiber		18-FEB-1984 13:39:01 
!		Change call to mail$net_send to send addressee descriptor
!
!	V03-015	BLS0263		Benn Schreiber		 5-FEB-1984
!		Only set exec mode on external file if requested.
!
!	V03-014	BLS0255		Benn Schreiber		28-Dec-1983
!		New global flags.  Open mail file with exec mode logicals.
!		Fix error return from create_isam to only try sequential
!		file if error was file locked.  Skip addressees marked nosend.
!
!	V03-013	BLS0250		Benn Schreiber		 9-Dec-1983
!		Ensure that we are writing to a disk device.
!
!	V03-012	BLS0246		Benn Schreiber		 8-Nov-1983
!		New mail count in VMSMAIL.DAT, rather than mail file
!
!	V03-011	BLS0235		Benn Schreiber		23-Aug-1983
!		Quit if $connect fails, also.  Really rewind the
!		message file for each addressee.
!
!	V03-010	BLS0233		Benn Schreiber		 7-Aug-1983
!		Put nodename on sender's name correctly
!
!	V03-009	BLS0229		Benn Schreiber		16-Jul-1983
!		Deliver external message files in block mode.  Rewrite
!		mail$send_addr into bliss.
!
!	V03-008	BLS0222		Benn Schreiber		15-May-1983
!		Set SQO on sequential external file.
!
!	V03-007	BLS0221		Benn Schreiber		 5-May-1983
!		Correct SYSPRV handling
!
!	V03-006	BLS0220		Benn Schreiber		30-Apr-1983
!		Device/directory are now one argument
!
!	V03-005	BLS0218		Benn Schreiber		18-Apr-1983
!		Call check_date with 3rd arg (dev/dir descriptor).  Allow
!		for no protection xab and make one up.
!
!	V03-004	BLS0217		Benn Schreiber		12-Apr-1983
!		Tell if new folder created.  Add external message deliver
!		for large messages.
!
!	V03-003	BLS0216		Benn Schreiber		 1-Apr-1983
!		Add flag to use passed in date/time rather than current.
!
!	V03-002	BLS0214		Benn Schreiber		27-Mar-1983
!		Put new messages in NEWMAIL folder.  Count records
!		and store count in message header.
!--

!
! TABLE OF CONTENTS:
!

!
! INCLUDE FILES:
!
    LIBRARY 'SYS$LIBRARY:LIB';
    REQUIRE 'SRC$:MAILREQ';
    LIBRARY 'LIB$:MAILDEF';

EXTERNAL
    MAIL$GL_BIGBUFSIZ,				!Size of BIGBUF
    MAIL$GL_BIGBUFFER,				!0 or pointer to bigbufsiz pgs
    MAIL$GL_FLAGS : $BBLOCK,			!Control flags
    MAIL$Q_SYSNODE2 : $BBLOCK,			!'node::'
    MAIL$Q_FULLUSER,				!Full user name
    MAIL$T_UAF_BUFF : REF $BBLOCK,		!SYSuaf buffer
    MAIL$L_MYUIC,				!UIC of person running MAIL
    MAIL$L_SIZLIM,				!Max size msg to put in isam
    MAIL$SD_EXTMSGNAM,				!FAO string to make file name
    MAIL$SD_NEWMAIL;				!Addr of descr of 'NEWMAIL'

EXTERNAL ROUTINE
    LIB$FREE_VM,				!Deallocate memory
    MAIL$CHECK_DATE,				!See if key in ISAM file
    MAIL$CREATE_ISAM,				!Create ISAM file
    MAIL$DELETELINK,				!Delete all logical links
    MAIL$FAO_GETMSG,				!Get message text and fao it
    MAIL$GET_DEVDIR,				!Get user's mail device/dir
    MAIL$GETMSG,				!Get message text for code
    MAIL$INCR_NEWMAIL,				!Increment new mail count
    MAIL$NET_SEND,				!Send to remote addressee
    MAIL$NOTIFY,				!Notify message received
    MAIL$UP_PRIV,				!Raise privileges
    MAIL$DOWN_PRIV,				!Drop privileges
    STR$CONCAT,					!String concatenation
    STR$COPY_DX,				!String copy
    SYS$FAO,					!Formatted ascii output
    UTIL$GETFILENAME,				!Ditto
    UTIL$REPORT_IO_ERROR;			!Report I/O error

OWN
    DYN_DESC : DYN_DESC_DECL,			!Two dynamic strings
    DYN_DESC_2 : DYN_DESC_DECL;

$SHR_MSGDEF(MAIL,126,LOCAL,
	(OPENOUT,ERROR),
	(READERR,ERROR),
	(WRITEERR,WARNING),
	(CLOSEOUT,WARNING));

MACRO
    DEFFILENAM	= 'MAIL'%,		! Default message file name
    DEFFILETYP	= '.MAI'%;		! Default message file type

LITERAL
	PRO_SYS		= $BITPOSITION(XAB$V_SYS),
	PRO_OWN		= $BITPOSITION(XAB$V_OWN),
	PRO_GRP		= $BITPOSITION(XAB$V_GRP),
	PRO_WLD		= $BITPOSITION(XAB$V_WLD),
	
	SND_PRO		= 			! Send file protection
(				  XAB$M_NOEXE OR XAB$M_NODEL) ^ PRO_SYS OR
(				  XAB$M_NOEXE OR XAB$M_NODEL) ^ PRO_OWN OR
(XAB$M_NOREAD OR XAB$M_NOWRITE OR XAB$M_NOEXE OR XAB$M_NODEL) ^ PRO_GRP OR
(XAB$M_NOREAD OR XAB$M_NOWRITE OR XAB$M_NOEXE OR XAB$M_NODEL) ^ PRO_WLD;

ROUTINE PUT_SEND_MSG (LENGTH, ADDR, SND_RAB) =
BEGIN
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine write the record specified by LENGTH and ADDR
!	to SND_RAB, and reports errors encountered.
!
! INPUTS:
!
!	LENGTH	length of record to write
!	ADDR	address of record to write
!
!--
MAP
    SND_RAB : REF $BBLOCK;

LOCAL
    STATUS;

SND_RAB[RAB$W_RSZ] = .LENGTH;
SND_RAB[RAB$L_RBF] = .ADDR;

IF_ERR((IF .SND_RAB[RAB$V_BIO]
		THEN $WRITE(RAB=.SND_RAB,ERR=UTIL$REPORT_IO_ERROR)
		ELSE $PUT(RAB=.SND_RAB,ERR=UTIL$REPORT_IO_ERROR));,
	RETURN .STATUS);
RETURN TRUE
END;

ROUTINE PUT_NEW_REC(LENGTH,ADDR,SND_RAB) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Write a record to the isam file. 
!
!--
BEGIN

MAP
    SND_RAB : REF $BBLOCK,
    ADDR : REF $BBLOCK;

BUILTIN
    CALLG,
    AP;

SND_RAB[RAB$L_KBF] = ADDR[MFR_Q_DATIM];
SND_RAB[RAB$B_KSZ] = 8;

RETURN CALLG(.AP,PUT_SEND_MSG)

END;

ROUTINE END_PACK(RECLEN,RECBUF,SND_RAB) =
!--
! FUNCTIONAL DESCRIPTION:
!
!	Write out remainder of packed record
!
!--
BEGIN

BUILTIN
    CALLG,
    AP;

IF .RECLEN EQL $BYTEOFFSET(MFR_T_DATA)
    THEN RETURN TRUE;

RETURN CALLG(.AP,PUT_NEW_REC)

END;

ROUTINE INIT_PACK_REC(RECLEN) =
!--
! FUNCTIONAL DESCRIPTION:
!
!	Initialize for packing records
!
!--
BEGIN

MAP
    RECLEN : REF VECTOR[,LONG];

RECLEN[0] = $BYTEOFFSET(MFR_T_DATA);

RETURN TRUE
END;

ROUTINE PACK_NEW_REC (LENGTH,ADDR,RECLEN,RECBUF,SND_RAB) =
!--
! FUNCTIONAL DESCRIPTION:
!
!	Pack records into buffer.  Write out records as needed
!
!--
BEGIN

MAP
    RECLEN : REF VECTOR[,LONG];

IF (.RECLEN[0] + .LENGTH + 2) GTR MFR_C_MAXLEN
THEN BEGIN
    IF_ERR(PUT_NEW_REC(.RECLEN[0],.RECBUF,.SND_RAB);,
		RETURN .STATUS);
    INIT_PACK_REC(RECLEN[0]);
    END;

BEGIN
    BIND
	BUFF = .RECBUF + .RECLEN[0] : VECTOR[,WORD];

    BUFF[0] = .LENGTH;
    CH$MOVE(.LENGTH,.ADDR,BUFF[1]);
    RECLEN[0] = .RECLEN[0] + .LENGTH + 2;
    END;

RETURN TRUE
END;

ROUTINE GET_RECORD (OUTDESC,GETRAB) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Read a record from the temp file
!
!--
BEGIN

MAP
    OUTDESC : REF VECTOR[,LONG],
    GETRAB : REF $BBLOCK;

LOCAL
    STATUS;

STATUS = (IF .GETRAB[RAB$V_BIO]
		THEN $READ(RAB=.GETRAB)
		ELSE $GET(RAB=.GETRAB));
IF .STATUS
THEN BEGIN
    OUTDESC[0] = .GETRAB[RAB$W_RSZ];
    OUTDESC[1] = .GETRAB[RAB$L_RBF];
    END;

RETURN .STATUS
END;

GLOBAL ROUTINE MAIL$WRITE_MSG 
	(GET_ROUTINE,CNCTDESC,FOLDER_DESC,MSGFLAGS,OUTRAB,DATETIME) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Write a message to an ISAM mail file
!
!--
BEGIN

MAP
    CNCTDESC : REF $BBLOCK,
    FOLDER_DESC : REF $BBLOCK,
    MSGFLAGS : $BBLOCK,
    OUTRAB : REF $BBLOCK,
    DATETIME : REF VECTOR[,LONG];

BIND
    GET_RAB = CNCTDESC[CNCT_T_RAB] : $BBLOCK,
    FROM_DESC = CNCTDESC[CNCT_Q_FROMDESC] : $BBLOCK,
    TO_DESC = CNCTDESC[CNCT_Q_TODESC] : $BBLOCK,
    SUBJ_DESC = CNCTDESC[CNCT_Q_SUBJDESC] : $BBLOCK;

LOCAL
    PTR : REF VECTOR[,WORD],
    PTR1 : REF VECTOR[,LONG],
    MSGHDR : REF $BBLOCK,
    SAVERFA : VECTOR[2,LONG],
    RECLEN,
    TFAB : REF $BBLOCK,
    SIZEOFF : REF VECTOR[,LONG],
    RECOUNT,
    MMHLEN,
    EXTMSG,
    DEVDIRDESC : VECTOR[2,LONG],
    OUTNAM : REF $BBLOCK,
    MMHRFA : VECTOR[2,LONG],
    RECDESC : VECTOR[2,LONG],
    TMPFAB : $FAB_DECL,
    TMPRAB : $RAB_DECL,
    TMPNAM : $NAM_DECL,
    TMPXABPRO : $XABPRO_DECL,
    NAMBUF : $BBLOCK[NAM$C_MAXRSS],
    SAVEMMH : $BBLOCK[MFR_C_MAXLEN],
    PROXAB : REF $BBLOCK,
    MMH : $BBLOCK[MFR_C_MAXLEN];

OUTRAB[RAB$L_UBF] = MMH;
OUTRAB[RAB$W_USZ] = MFR_C_MAXLEN;
OUTRAB[RAB$B_RAC] = RAB$C_KEY;
OUTRAB[RAB$L_ROP] = 0;
OUTRAB[RAB$L_CTX] = MAIL$_WRITEERR;
!
! Create the mail message header record
!
IF .MSGFLAGS[MCR_V_USE_DATIM] NEQ 0
THEN CH$MOVE(9,.DATETIME,MMH[MFR_Q_DATIM])
ELSE BEGIN
    $GETTIM(TIMADR=MMH[MFR_Q_DATIM]);
    IF NOT MAIL$CHECK_DATE(.OUTRAB,MMH[MFR_Q_DATIM])
    THEN BEGIN
	SIGNAL(MAIL$_DATIMUSED,2,MMH[MFR_Q_DATIM],UTIL$GETFILENAME(.OUTRAB));
	RETURN MAIL$_DATIMUSED;
	END;
    END;
MSGHDR = MMH[MFR_T_DATA];
PTR = MSGHDR[MMH_Q_DATID];
(.PTR)<0,32,0> = .(MMH[MFR_Q_DATIM])<16,32,0>;
(.PTR)<32,16,0> = .(MMH[MFR_Q_DATIM])<48,16,0>;
(.PTR)<48,16,0> = 4;
!
! If message is gtr MAIL$L_SIZLIM blocks, then deliver message to
! a sequential file.
!
EXTMSG = 0;
IF .CNCTDESC[CNCT_L_MSGBLKS] GTRU .MAIL$L_SIZLIM
THEN BEGIN
    EXTMSG = 1;
    OUTNAM = .OUTRAB[RAB$L_FAB];
    PROXAB = .OUTNAM[FAB$L_XAB];	!Protection XAB first in chain
!	Zero XAB happens only if COPY command into current file.
    IF .PROXAB EQL 0
    THEN BEGIN
	$XABPRO_INIT(XAB=TMPXABPRO,
		NXT=0);
	TMPXABPRO[XAB$L_UIC] = .MAIL$L_MYUIC;
	PROXAB = TMPXABPRO;
	END;
    PROXAB[XAB$W_PRO] = SND_PRO;
    PROXAB[XAB$L_NXT] = 0;
    OUTNAM = .OUTNAM[FAB$L_NAM];
    DEVDIRDESC[0] = .OUTNAM[NAM$B_DEV] + .OUTNAM[NAM$B_DIR];
    DEVDIRDESC[1] = .OUTNAM[NAM$L_DEV];
    RECDESC[0] = NAM$C_MAXRSS;
    RECDESC[1] = NAMBUF;
    IF NOT MAIL$CHECK_DATE(.OUTRAB,MSGHDR[MMH_Q_DATID],DEVDIRDESC)
    THEN BEGIN
	SIGNAL(MAIL$_DATIMUSED,2,MSGHDR[MMH_Q_DATID],
			UTIL$GETFILENAME(.OUTRAB));
	RETURN MAIL$_DATIMUSED;
	END;
    SYS$FAO(MAIL$SD_EXTMSGNAM,RECDESC,RECDESC,
		DEVDIRDESC,.(MSGHDR[MMH_Q_DATID])<32,32,0>,
		.(MSGHDR[MMH_Q_DATID])<0,32,0>);
    $FAB_INIT(FAB=TMPFAB,
	FNS=.RECDESC[0],
	FNA=.RECDESC[1],
	ALQ=.CNCTDESC[CNCT_L_MSGBLKS],
	CTX=MAIL$_OPENOUT,
	NAM=TMPNAM,
	XAB=.PROXAB,
	FAC=(PUT,TRN),
	FOP=SQO,
	RFM=VAR,
	RAT=CR);

    IF .MSGFLAGS[MCR_V_EXEC]
	THEN TMPFAB[FAB$V_LNM_MODE] = PSL$C_EXEC;
    !
    ! If rab in the cnct block is the message source, we can use block i/o
    ! to transfer the message.
    !
    TFAB = .GET_RAB[RAB$L_FAB];
    !
    ! Send in block mode only if input file has variable length records
    ! or VFC format.
    !
    IF (.MSGFLAGS[MCR_V_CNCT_RAB] NEQ 0) AND 
      ((.TFAB[FAB$B_RFM] EQL FAB$C_VAR) OR (.TFAB[FAB$B_RFM] EQL FAB$C_VFC))
    THEN BEGIN
	!
	! If file is open with fab$v_bro set, then we can enable block i/o.
	! Copy file attributes, and disconnect/reconnect if not already in
	! block mode
	!
	IF .TFAB[FAB$V_BRO]
	THEN BEGIN
	    TMPFAB[FAB$B_RAT] = .TFAB[FAB$B_RAT];
	    TMPFAB[FAB$B_RFM] = .TFAB[FAB$B_RFM];
	    IF NOT .GET_RAB[RAB$V_BIO]
	    THEN BEGIN
		$DISCONNECT(RAB=GET_RAB);
		GET_RAB[RAB$V_BIO] = TRUE;
		GET_RAB[RAB$L_UBF] = .MAIL$GL_BIGBUFFER;
		GET_RAB[RAB$W_USZ] = .MAIL$GL_BIGBUFSIZ*512;
		IF_ERR($CONNECT(RAB=GET_RAB,ERR=UTIL$REPORT_IO_ERROR);,
			RETURN .STATUS);
		END;
	    END;
	END;
    $RAB_INIT(RAB=TMPRAB,
	FAB=TMPFAB,
	CTX=MAIL$_OPENOUT);

    TMPFAB[FAB$V_BRO] = TMPRAB[RAB$V_BIO] = .GET_RAB[RAB$V_BIO];

    $NAM_INIT(NAM=TMPNAM,
	ESS=NAM$C_MAXRSS,
	ESA=NAMBUF,
	RSS=NAM$C_MAXRSS,
	RSA=NAMBUF);

    IF_ERR($CREATE(FAB=TMPFAB,ERR=UTIL$REPORT_IO_ERROR);,
		RETURN .STATUS);
    IF NOT .TMPFAB[$FAB_DEV(DIR)]
	OR .TMPFAB[$FAB_DEV(FOR)]
    THEN BEGIN
	$CLOSE(FAB=TMPFAB);
	TMPFAB[FAB$L_STS] = SS$_IVDEVNAM;
	TMPFAB[FAB$L_STV] = 0;
	RETURN SIGNAL(SS$_IVDEVNAM)
	END;

    IF_ERR($CONNECT(RAB=TMPRAB,ERR=UTIL$REPORT_IO_ERROR);,
		TMPFAB[FAB$V_DLT] = TRUE;
		$CLOSE(FAB=TMPFAB);
		RETURN .STATUS);
    RECOUNT = 0;
    TMPRAB[RAB$L_CTX] = MAIL$_WRITEERR;
    WHILE 1
    DO BEGIN
	IF_ERR((.GET_ROUTINE)(RECDESC,CNCTDESC[CNCT_T_RAB]);,
		IF .STATUS EQL RMS$_EOF
		    THEN EXITLOOP
		    ELSE BEGIN
			UTIL$REPORT_IO_ERROR(CNCTDESC[CNCT_T_RAB]);
			TMPFAB[FAB$V_DLT] = TRUE;
			$CLOSE(FAB=TMPFAB);
			RETURN .STATUS;
			END);
	IF NOT .TMPRAB[RAB$V_BIO]
	    AND .RECDESC[0] GEQU 2
	    AND .(.RECDESC[1] + .RECDESC[0] -2)<0,16>
				EQLU (CR OR LF^8)
	    THEN RECDESC[0] = .RECDESC[0] - 2;
	IF_ERR(PUT_SEND_MSG(.RECDESC[0],.RECDESC[1],
				TMPRAB);,
		TMPFAB[FAB$V_DLT] = TRUE;
		$CLOSE(FAB=TMPFAB);
		RETURN .STATUS);
	RECOUNT = .RECOUNT + 1;
	END;
    !
    ! If block mode copy and we don't know number of records from a previous
    ! delivery, then read the file in record mode and compute the # records
    !
    IF .TMPRAB[RAB$V_BIO]
    THEN IF (RECOUNT = .CNCTDESC[CNCT_L_NRECS]) EQL 0
    THEN BEGIN
	$DISCONNECT(RAB=TMPRAB);
	TMPRAB[RAB$V_BIO] = FALSE;
	TMPRAB[RAB$W_USZ] = MAIL$K_INBUFFSZ;
	TMPRAB[RAB$L_UBF] = CNCTDESC[CNCT_T_BUFFER];
	IF $CONNECT(RAB=TMPRAB,ERR=UTIL$REPORT_IO_ERROR)
	THEN WHILE $GET(RAB=TMPRAB)
	    DO RECOUNT = .RECOUNT + 1;
	END;	
    TMPFAB[FAB$L_CTX] = MAIL$_CLOSEOUT;
    $CLOSE(FAB=TMPFAB,ERR=UTIL$REPORT_IO_ERROR);
    END
!
! Not too big, ensure date/time key not used
!
ELSE IF NOT MAIL$CHECK_DATE(.OUTRAB,MSGHDR[MMH_Q_DATID])
THEN BEGIN
    SIGNAL(MAIL$_DATIMUSED,2,MSGHDR[MMH_Q_DATID],
			UTIL$GETFILENAME(.OUTRAB));
    RETURN MAIL$_DATIMUSED;
    END;
!
! Write the message date/id record to the file to "reserve" it. Only
! one 8-byte record is written, which is deleted after the message has
! been delivered, unless we just finished writing an external message file.
! In that case, the 8-byte record is deleted when the message is deleted.
!
IF_ERR(PUT_SEND_MSG(8,MSGHDR[MMH_Q_DATID],.OUTRAB);,
		RETURN .STATUS);
SAVERFA[0] = .OUTRAB[RAB$L_RFA0];		!Save the header rfa
SAVERFA[1] = .OUTRAB[RAB$W_RFA4];
!
! Create the message header record
!
CH$COPY(.FOLDER_DESC[DSC$W_LENGTH],.FOLDER_DESC[DSC$A_POINTER],0,
		MFR_S_FILEKEY,MMH[MFR_T_FILEKEY]);
MMH[MFR_B_FILKEYLEN] = .FOLDER_DESC[DSC$W_LENGTH];
MSGHDR[MMH_W_FLAGS] = 0;
IF .MSGFLAGS[MCR_V_SND_NEWMSG]
    THEN MSGHDR[MMH_V_NEWMSG] = 1;
MSGHDR[MMH_V_EXTMSG] = .EXTMSG;
MSGHDR[MMH_B_FLAGSIZ] = 0;
MSGHDR[MMH_L_FLAGVAL] = 0;
MSGHDR[MMH_B_HDSPARE] = 0;
OUTRAB[RAB$L_ROP] = 0;
!
! If we are to signal a "new folder", then look for it now
!
IF .MSGFLAGS[MCR_V_TELL_NEW]
THEN BEGIN
    OUTRAB[RAB$L_ROP] = RAB$M_NLK;
    OUTRAB[RAB$L_KBF] = MMH[MFR_T_FILEKEY];
    OUTRAB[RAB$B_KSZ] = MFR_S_FILEKEY;
    OUTRAB[RAB$B_KRF] = 1;
    IF NOT $FIND(RAB=.OUTRAB)
	THEN SIGNAL(MAIL$_NEWFOLDER,1,.FOLDER_DESC);
    OUTRAB[RAB$L_ROP] = 0;
    OUTRAB[RAB$B_KSZ] = 8;
    OUTRAB[RAB$B_KRF] = 0;
    OUTRAB[RAB$L_KBF] = 0;
    END;
PTR = MSGHDR[MMH_T_MISCDAT];
PTR[0] = MMH_C_FROM;
PTR[1] = .FROM_DESC[DSC$W_LENGTH];
PTR = CH$MOVE(.PTR[1],.FROM_DESC[DSC$A_POINTER],PTR[2]);
PTR[0] = MMH_C_TO;
PTR[1] = .TO_DESC[DSC$W_LENGTH];
PTR = CH$MOVE(.PTR[1],.TO_DESC[DSC$A_POINTER],PTR[2]);
PTR[0] = MMH_C_SUBJ;
PTR[1] = .SUBJ_DESC[DSC$W_LENGTH];
PTR = CH$MOVE(.PTR[1],.SUBJ_DESC[DSC$A_POINTER],PTR[2]);
PTR[0] = MMH_C_NREC;
PTR[1] = 4;
PTR1 = PTR[2];
IF .EXTMSG
    THEN PTR1[0] = .RECOUNT		!If external message, count known
    ELSE PTR1[0] = 0;			! otherwise store a zero until $updated
SIZEOFF = PTR[2]-MMH;
PTR = PTR[4];
MMHLEN = .PTR-MMH;
!
! Write the message header record
!
IF_ERR(PUT_NEW_REC(.MMHLEN,MMH,.OUTRAB);,
		RETURN .STATUS);
!
! If message is small enough to fit into the isam file, then read the
! message and pack the message and write it.
!
IF NOT .EXTMSG
THEN BEGIN
    IF .GET_RAB[RAB$V_BIO]		!Ensure not connected for block mode
    THEN BEGIN
	$DISCONNECT(RAB=GET_RAB);
	GET_RAB[RAB$V_BIO] = FALSE;
	GET_RAB[RAB$W_USZ] = MAIL$K_INBUFFSZ;
	GET_RAB[RAB$L_UBF] = CNCTDESC[CNCT_T_BUFFER];
	IF_ERR($CONNECT(RAB=GET_RAB,ERR=UTIL$REPORT_IO_ERROR);,
		RETURN .STATUS);
	END;
    MMHRFA[0] = .OUTRAB[RAB$L_RFA0];
    MMHRFA[1] = .OUTRAB[RAB$W_RFA4];
    RECOUNT = 0;
    CH$MOVE(.MMHLEN,MMH,SAVEMMH);
    !
    ! Read the message, pack the records and write them to the message file
    !
    CH$MOVE(8,MSGHDR[MMH_Q_DATID],MMH[MFR_Q_DATIM]);
    CH$FILL(0,MFR_S_FILEKEY+1,MMH[MFR_B_FILKEYLEN]);
    INIT_PACK_REC(RECLEN);			!Initialize to pack records
    WHILE 1
    DO BEGIN
	IF_ERR((.GET_ROUTINE)(RECDESC,CNCTDESC[CNCT_T_RAB]);,
		IF .STATUS EQL RMS$_EOF
		    THEN EXITLOOP
		    ELSE RETURN UTIL$REPORT_IO_ERROR(CNCTDESC[CNCT_T_RAB]));
	!
	! If record is terminated with a CR/LF, strip it.  This type of
	! record is produced by DEC Standard Runoff.
	!
	IF .RECDESC[0] GEQU 2
	    AND .(.RECDESC[1] + .RECDESC[0] - 2)<0,16>
						EQLU (CR OR LF^8)
	    THEN RECDESC[0] = .RECDESC[0] - 2;
	RECOUNT = .RECOUNT + 1;
	IF_ERR(PACK_NEW_REC(.RECDESC[0],.RECDESC[1],
				RECLEN,MMH,.OUTRAB);,
			RETURN .STATUS);
	END;

    IF_ERR(END_PACK(.RECLEN,MMH,.OUTRAB);,
		RETURN .STATUS);
    !
    ! Update the mail message header record to have the correct
    ! record count in it
    !
    OUTRAB[RAB$L_RFA0] = .MMHRFA[0];
    OUTRAB[RAB$W_RFA4] = .MMHRFA[1];
    OUTRAB[RAB$B_RAC] = RAB$C_RFA;
    IF $FIND(RAB=.OUTRAB,ERR=UTIL$REPORT_IO_ERROR)
    THEN BEGIN
	OUTRAB[RAB$W_RSZ] = .MMHLEN;
	SIZEOFF = SAVEMMH + .SIZEOFF;
	SIZEOFF[0] = .RECOUNT;
	OUTRAB[RAB$L_RBF] = SAVEMMH;
	$UPDATE(RAB=.OUTRAB,ERR=UTIL$REPORT_IO_ERROR);
	END;
    !
    ! Delete the marker record
    !
    OUTRAB[RAB$L_RFA0] = .SAVERFA[0];
    OUTRAB[RAB$W_RFA4] = .SAVERFA[1];
    IF_ERR($FIND(RAB=.OUTRAB);,
	RETURN TRUE);

    $DELETE(RAB=.OUTRAB);
    END;

RETURN TRUE
END;

ROUTINE SEND_MSG (CNCTDESC,DEVDIR_DESC,UIC,SND_FAB) =
!++
!	This routine actually sends the message
!--
BEGIN
MAP
	CNCTDESC : REF $BBLOCK,
	DEVDIR_DESC : REF $BBLOCK,
	SND_FAB : REF $BBLOCK;

BIND
    GET_RAB = CNCTDESC[CNCT_T_RAB] : $BBLOCK;

LOCAL
	FF_FLAG,					! Form-feed flag
	STATUS,						! Routine status
	SAVE_STS,
	SAVE_STV,
	SND_RAB : $RAB_DECL,
	SND_NAM : $NAM_DECL,
	SND_XABPRO : $XABPRO_DECL,
	SND_ESNAM_BUF : $BBLOCK[NAM$C_MAXRSS],
	DEF_BUFF: VECTOR[NAM$C_MAXRSS,BYTE],		! Default name buffer
	REC_BUFF: VECTOR[MAIL$K_INBUFFSZ,BYTE],		! Record buffer
	REC_SIZ,					! Record size
	DESC:	  $BBLOCK[8];				! String descriptor

INIT_SDESC(DESC);
!
! Create and set the file name and file owner
!
CH$COPY(.DEVDIR_DESC[DSC$W_LENGTH],			!Concatenate dev,dir
	.DEVDIR_DESC[DSC$A_POINTER],
	%CHARCOUNT(DEFFILENAM,DEFFILETYP),		! and filename & type
	UPLIT BYTE(DEFFILENAM,DEFFILETYP),
	0,NAM$C_MAXRSS,DEF_BUFF);

DESC[DSC$W_LENGTH] = .DEVDIR_DESC[DSC$W_LENGTH]	+ 
				%CHARCOUNT(DEFFILENAM,DEFFILETYP);
DESC[DSC$A_POINTER] = DEF_BUFF;
!
! First try to open the file as an ISAM file
!
$NAM_INIT(NAM=SND_NAM,
	ESS=NAM$C_MAXRSS,
	ESA=SND_ESNAM_BUF,
	RSS=NAM$C_MAXRSS,
	RSA=SND_ESNAM_BUF);

STATUS = MAIL$CREATE_ISAM(.SND_FAB,SND_RAB,SND_NAM,DESC,.UIC,
			(MCR_M_CIF OR MCR_M_EXEC));

IF (.STATUS
	AND (.SND_FAB[FAB$B_ORG] EQL FAB$C_IDX))
THEN BEGIN
    IF_ERR(MAIL$WRITE_MSG(GET_RECORD,.CNCTDESC,MAIL$SD_NEWMAIL,
			(MCR_M_EXEC OR MCR_M_SND_NEWMSG OR MCR_M_CNCT_RAB),
				SND_RAB);,
		RETURN .STATUS);
    END
ELSE BEGIN
    SAVE_STS = .SND_FAB[FAB$L_STS];
    SAVE_STV = .SND_FAB[FAB$L_STV];
    IF .SND_FAB[FAB$W_IFI] NEQ 0
	THEN  $CLOSE(FAB=.SND_FAB);		!Close in case
    SND_FAB[FAB$L_STS] = .SAVE_STS;
    SND_FAB[FAB$L_STV] = .SAVE_STV;
    !
    ! If locked ISAM file, signal error and return
    !
    IF ((.STATUS EQL RMS$_FLK)
	AND (.SND_FAB[FAB$B_ORG] EQL FAB$C_IDX))
    THEN RETURN UTIL$REPORT_IO_ERROR(.SND_FAB);

    IF .STATUS NEQ RMS$_PRV
    THEN BEGIN
	SND_FAB[FAB$B_SHR] = 0;
	SND_FAB[FAB$B_ORG] = FAB$C_SEQ;
	SND_FAB[FAB$B_FAC] = FAB$M_PUT OR FAB$M_TRN;
	SND_FAB[FAB$B_RAT] = FAB$M_CR;
	SND_FAB[FAB$B_RFM] = FAB$C_VAR;
	SND_FAB[FAB$L_XAB] = SND_XABPRO;
	$XABPRO_INIT(XAB=SND_XABPRO,
			NXT=0);
	SND_XABPRO[XAB$L_UIC] = .UIC;
	SND_XABPRO[XAB$W_PRO] = SND_PRO;
	!
	! Open/create the addressee's mail file
	!
	STATUS = $CREATE(FAB = .SND_FAB);
	IF .STATUS EQL RMS$_FLK				! If file locked,
	THEN BEGIN
	    SND_FAB[FAB$V_CIF] = 0;			! unconditionaly create
	    STATUS = $CREATE(FAB = .SND_FAB);
	    END;

	IF NOT .SND_FAB[$FAB_DEV(DIR)]
	    OR .SND_FAB[$FAB_DEV(FOR)]
	THEN BEGIN
	    $CLOSE(FAB=.SND_FAB);
	    STATUS = SS$_IVDEVNAM;
	    SND_FAB[FAB$L_STS] = SS$_IVDEVNAM;
	    SND_FAB[FAB$L_STV] = 0;
	    END;
	IF .SND_XABPRO[XAB$L_UIC] NEQ .UIC		! Make sure file owner
	THEN STATUS = RMS$_PRV;				! is really correct
	END;
    IF NOT .STATUS					! Check OPEN/CREATE
	THEN RETURN UTIL$REPORT_IO_ERROR(.SND_FAB);

    $RAB_INIT(RAB=SND_RAB,
	FAB=.SND_FAB,
	CTX=MAIL$_OPENOUT,
	ROP=EOF);

    STATUS = $CONNECT(RAB = SND_RAB,ERR=UTIL$REPORT_IO_ERROR);
    IF NOT .STATUS
	THEN RETURN .STATUS;
    SND_RAB[RAB$L_CTX] = MAIL$_WRITEERR;
    !
    ! Make sure that the input RAB is in record rather than block mode
    !
    IF .GET_RAB[RAB$V_BIO]
    THEN BEGIN
	$DISCONNECT(RAB=GET_RAB);
	GET_RAB[RAB$V_BIO] = FALSE;
	GET_RAB[RAB$W_USZ] = MAIL$K_INBUFFSZ;
	GET_RAB[RAB$L_UBF] = CNCTDESC[CNCT_T_BUFFER];
	$CONNECT(RAB=GET_RAB,ERR=UTIL$REPORT_IO_ERROR);
	END;
    !
    ! Create the message delimiter
    !
    IF_ERR(PUT_SEND_MSG(1,UPLIT(%CHAR(FF)),SND_RAB);,
		RETURN .STATUS);
    !
    ! Create the message header
    !
    DESC[DSC$W_LENGTH] = MAIL$K_INBUFFSZ;
    DESC[DSC$A_POINTER] = REC_BUFF;
    $FAO(DESCRIPTOR('From:!_!AS   !17%D *'),	! Format From: line
	REC_SIZ,
	DESC,
	CNCTDESC[CNCT_Q_FROMDESC],
	0);
    IF_ERR(PUT_SEND_MSG(.REC_SIZ,REC_BUFF,SND_RAB);,	! Put FROM: line
		RETURN .STATUS);

    $FAO(MAIL$GETMSG(MAIL$_MAIL10),		!Put To: line
	REC_SIZ,
	DESC,
	CNCTDESC[CNCT_Q_TODESC]);
    IF_ERR(PUT_SEND_MSG(.REC_SIZ,REC_BUFF,SND_RAB);,	! Put TO: line
		RETURN .STATUS);

    IF .(CNCTDESC[CNCT_Q_SUBJDESC])<0,16,0> NEQ 0	! If subject specified
    THEN BEGIN
	$FAO(MAIL$GETMSG(MAIL$_MAIL20),		! Format subject line
		REC_SIZ,
		DESC,
		CNCTDESC[CNCT_Q_SUBJDESC]);
	IF_ERR(PUT_SEND_MSG(.REC_SIZ,REC_BUFF,SND_RAB);,
		RETURN .STATUS);
	END;

    IF_ERR(PUT_SEND_MSG(0,REC_BUFF,SND_RAB);,		! Put a blank line
		RETURN .STATUS);
    !
    ! Copy the message text to the file
    !
    FF_FLAG = 0;
    WHILE 1
    DO BEGIN
	IF_ERR($GET(RAB =GET_RAB,ERR=UTIL$REPORT_IO_ERROR);,
		IF .STATUS NEQ RMS$_EOF
		    THEN RETURN .STATUS;
		RETURN TRUE);
	IF .FF_FLAG
	THEN BEGIN
	    !
	    ! If this line is 'From', then insert a blank line in between
	    !
	    IF .GET_RAB[RAB$W_RSZ] GTRU %CHARCOUNT('From')
		AND .(.GET_RAB[RAB$L_RBF]) EQL 'From'
		THEN IF_ERR(PUT_SEND_MSG(0,.GET_RAB[RAB$L_RBF],SND_RAB);,
				RETURN .STATUS);
	    FF_FLAG = 0;			!No longer following FF
	    END
	ELSE IF .GET_RAB[RAB$W_RSZ] EQL 1
	    AND .(.GET_RAB[RAB$L_RBF])<0,8> EQL FF
		THEN FF_FLAG = 1;
	!
	! If record is terminated with a CR/LF, strip it.  This type of
	! record is produced by DEC Standard Runoff.
	!
	IF .GET_RAB[RAB$W_RSZ] GEQU 2
	AND .(.GET_RAB[RAB$L_RBF] + .GET_RAB[RAB$W_RSZ] - 2)<0,16> EQLU
						(CR OR LF^8)
	    THEN GET_RAB[RAB$W_RSZ] = .GET_RAB[RAB$W_RSZ] - 2;

	IF_ERR(PUT_SEND_MSG(.GET_RAB[RAB$W_RSZ],.GET_RAB[RAB$L_RBF],SND_RAB);,
		RETURN .STATUS);
	END;
    END;					!Of old format mail file

RETURN TRUE
END;

GLOBAL ROUTINE MAIL$SEND_MSG(CNCTDESC,DEVDIR_DESC,UIC,USERDESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to send a message to another user.  It opens
!	the user's new mail message file and copies the new message to the
!	file.  Since there is no file sharing, if the new mail message file
!	cannot be opened because it is already in use, another file will be
!	created.  The files will all be concatenated into one file when read.
!
! INPUTS:
!
!	CNCTDESC = Address of CNCT block for message
!	DEVDIR_DESC = Address of descriptor of addressee's mail directory
!	UIC = UIC of addressee.
!	USERDESC = Address of descriptor of user's name
!
! OUTPUTS:
!
!	All failures are signalled as well as returned.
!--
BEGIN

MAP
    CNCTDESC : REF $BBLOCK;

LOCAL
    SND_FAB : $FAB_DECL,
    STATUS;

$REWIND(RAB=CNCTDESC[CNCT_T_RAB]);
MAIL$UP_PRIV(1^$BITPOSITION(PRV$V_SYSPRV),0);
STATUS = SEND_MSG(.CNCTDESC,.DEVDIR_DESC,.UIC,SND_FAB);
SND_FAB[FAB$L_XAB] = 0;
SND_FAB[FAB$L_CTX] = MAIL$_CLOSEOUT;
IF .SND_FAB[FAB$W_IFI] NEQ 0
    THEN $CLOSE(FAB=SND_FAB,ERR=UTIL$REPORT_IO_ERROR);
MAIL$DOWN_PRIV();
!
! Increment new mail count
!
IF .STATUS
    THEN MAIL$INCR_NEWMAIL(.USERDESC);

RETURN .STATUS
END;

ROUTINE SEND_ERROR (SIGARG,MECHARG,ENBL) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Errors signalled by MAIL$SEND_ADDR and routines it calls come here
!
!--
BEGIN
MAP
    SIGARG : REF $BBLOCK,
    MECHARG : REF $BBLOCK,
    ENBL : REF VECTOR[,LONG];

BIND
    ADRDESC = .ENBL[1] : REF $BBLOCK;

LOCAL
    USERDESC : VECTOR[2,LONG],
    LNK : REF $BBLOCK,
    DESC : VECTOR[2,LONG];

IF NOT .MAIL$GL_FLAGS[MAIF_V_NETJOB]
    AND .ADRDESC NEQ 0
THEN BEGIN
    USERDESC[0] = .ADRDESC[ADR_B_NAMLNG];
    USERDESC[1] = ADRDESC[ADR_T_NAME];
    IF (LNK = .ADRDESC[ADR_L_LLNK]) NEQ 0
    THEN BEGIN
	DESC[0] = .LNK[LNK_B_NODLEN];
	DESC[1] = LNK[LNK_T_NODE];
	SIGNAL(MAIL$_SENDERRAT,2,USERDESC,DESC);
	END
    ELSE SIGNAL(MAIL$_SENDERR,1,USERDESC);
    END;

RETURN SS$_RESIGNAL
END;

GLOBAL ROUTINE MAIL$SEND_ADDR (CNCTDESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Send the message to all addressees in the addressee list
!
! Inputs:
!
!	cnctdesc = address of cnct block for message to send.
!--
BEGIN

MAP
    CNCTDESC : REF $BBLOCK;

BIND
    CNCTRAB = CNCTDESC[CNCT_T_RAB] : $BBLOCK,
    CNCTFAB = .CNCTRAB[RAB$L_FAB] : $BBLOCK;

BUILTIN
    REMQUE;

LOCAL
    ADRDESC : VOLATILE REF $BBLOCK,
    USERDESC : VECTOR[2,LONG],
    XABFHC : $XABFHC_DECL,
    TDESC : $BBLOCK[DSC$C_S_BLN],
    DFILE,
    FIRST_TIME,
    STATUS;

!
! ADRDESC will be cleared by ENABLE
!
ENABLE SEND_ERROR (ADRDESC);

!
! If not network job, or network and file received ok, then get file size.
! Ensure it's a disk oriented device.  If not, assume the null device
!
DFILE = .CNCTFAB[$FAB_DEV(MNT)] AND .CNCTFAB[$FAB_DEV(FOD)]
		AND .CNCTFAB[$FAB_DEV(RND)];
CNCTRAB[RAB$L_CTX] = MAIL$_READERR;
CNCTDESC[CNCT_L_MSGBLKS] = 0;

IF (NOT .MAIL$GL_FLAGS[MAIF_V_NETJOB]
    OR .CNCTDESC[CNCT_L_FILERR])
    AND .DFILE
THEN BEGIN
    $REWIND(RAB=CNCTRAB,ERR=UTIL$REPORT_IO_ERROR);
    $XABFHC_INIT(XAB=XABFHC);
    CNCTFAB[FAB$L_XAB] = XABFHC;
    $DISPLAY(FAB=CNCTFAB,ERR=UTIL$REPORT_IO_ERROR);
    CNCTFAB[FAB$L_XAB] = 0;
    CNCTDESC[CNCT_L_MSGBLKS] = .XABFHC[XAB$L_EBK];
    IF .XABFHC[XAB$W_FFB] EQL 0
	THEN CNCTDESC[CNCT_L_MSGBLKS] = .CNCTDESC[CNCT_L_MSGBLKS] - 1;
    END;
!
! Set up the correct fromdesc in the cnct block
!
IF .MAIL$Q_SYSNODE2[DSC$W_LENGTH] NEQ 0
    AND NOT .MAIL$GL_FLAGS[MAIF_V_NETJOB]
    THEN STR$CONCAT(DYN_DESC_2,MAIL$Q_SYSNODE2,CNCTDESC[CNCT_Q_FROMDESC])
    ELSE STR$COPY_DX(DYN_DESC_2,CNCTDESC[CNCT_Q_FROMDESC]);
!
! Loop through all addressees.
!
FIRST_TIME = TRUE;
WHILE NOT REMQUE(.(CNCTDESC[CNCT_Q_ADRLST]),ADRDESC)
DO IF NOT .ADRDESC[ADR_V_NOSEND]
THEN BEGIN
    USERDESC[0] = .ADRDESC[ADR_B_NAMLNG];
    USERDESC[1] = ADRDESC[ADR_T_NAME];
    !
    ! If network job and file error encountered, report it now,
    ! otherwise, attempt to deliver the mail
    !
    IF .MAIL$GL_FLAGS[MAIF_V_NETJOB]
	AND NOT .CNCTDESC[CNCT_L_FILERR]
    THEN SIGNAL(.CNCTDESC[CNCT_L_FILERR],1,UTIL$GETFILENAME(CNCTFAB),
		.CNCTDESC[CNCT_L_FILESTS],.CNCTDESC[CNCT_L_FILESTV])
    ELSE BEGIN
	IF NOT .FIRST_TIME
	    AND .DFILE
	    THEN $REWIND(RAB=CNCTRAB);
	FIRST_TIME = FALSE;
	IF .ADRDESC[ADR_L_LLNK] NEQ 0
	THEN BEGIN
	    STATUS = MAIL$NET_SEND(.ADRDESC,.CNCTDESC);
	    IF .STATUS
		AND .MAIL$GL_FLAGS[MAIF_V_NETJOB]
		THEN SIGNAL(1);
	    END
	ELSE BEGIN
	    IF MAIL$GET_DEVDIR(USERDESC,DYN_DESC)
	    THEN BEGIN
		IF NOT .MAIL$GL_FLAGS[MAIF_V_NETJOB]
		THEN BEGIN
		    CH$MOVE(DSC$C_S_BLN,CNCTDESC[CNCT_Q_FROMDESC],TDESC);
		    CH$MOVE(DSC$C_S_BLN,DYN_DESC_2,CNCTDESC[CNCT_Q_FROMDESC]);
		    END;
		STATUS = MAIL$SEND_MSG(.CNCTDESC,DYN_DESC,
					.MAIL$T_UAF_BUFF[UAF$L_UIC],USERDESC);
		IF NOT .MAIL$GL_FLAGS[MAIF_V_NETJOB]
		    THEN CH$MOVE(DSC$C_S_BLN,TDESC,CNCTDESC[CNCT_Q_FROMDESC]);
		!
		! Update new mail count
		!
		IF .STATUS
		THEN BEGIN
		    MAIL$NOTIFY(USERDESC,CNCTDESC[CNCT_Q_FROMDESC]);
		    IF .MAIL$GL_FLAGS[MAIF_V_NETJOB]
			AND .STATUS
			THEN SIGNAL(1);
		    END;
		END;
	    END;
	END;
    !
    ! Deallocate the addressee list entry
    !
    LIB$FREE_VM(%REF(.ADRDESC[ADR_B_NAMLNG]+ADR_C_LENGTH),ADRDESC);
    END;
RETURN TRUE
END;

END
ELUDOM
