	.TITLE	FALMAIN - FAL MAINLINE
	.IDENT	'V04-000'		; Also change FAL$GT_VERSION!!!

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: FAL (DECnet File Access Listener)
;
; Abstract:
;
;	FAL is the DECnet-VAX file access server program, known as DECnet
;	object type 17 (decimal). Its purpose is to provide access to files
;	and unit record devices on a VMS node on behalf of processes executing
;	on any node of the DECnet communications network. FAL uses the Data
;	Access Protocol (DAP) to communicate with the requesting process and it
;	accesses the specified file (or device) through RMS calls.
;
; Environment:
;
;	The FAL image executes in the context of a process created by NETACP.
;	It runs in user mode and requires NETMBX and TMPMBX privilege.
;
; Author: James A. Krycka,	Creation Date:	16-JUN-1977
;
; Modified By:
;
;	V03-016	JAK0146		J A Krycka	31-AUG-1984
;		Update FAL$GT_VERSION for FAL logging.
;
;	V03-015	JAK0145		J A Krycka	12-APR-1984
;		Track changes in DAP message building algorithm.
;
;	V03-014	JAK0140		J A Krycka	03-APR-1984
;		Remove buffered I/O byte limit quota (BYTLM) as the basis for
;		determining the largest DAP buffer size that FAL is willing to
;		support.
;
;	V03-013	JAK0137		J A Krycka	12-MAR-1984
;		Continuation of V03-012 to support qualifier options in FAL$LOG
;		string to control RMS multi-buffer cache size, DAP buffer size,
;		and to alter Configuration message information to aid testing.
;		Also, conditionally translate FAL$OUTPUT to obtain user provided
;		output file specification.
;		Modifications to reflect macro name changes in FALMACROS.MAR.
;
;	V03-012	JAK0136		J A Krycka	07-MAR-1984
;		Rename CHECK_RMS to $CHECK_STATUS and revise it so that FAL does
;		not terminate on error during output of FAL logging information.
;		Modifications to reflect changes made to layout of $FALWRKDEF.
;
;	V03-011	JAK0129		J A Krycka	11-JAN-1984
;	V03-010	JAK0124		J A Krycka	06-SEP-1983
;	V03-009	JAK0118		J A Krycka	29-JUL-1983
;	V03-008	JAK0113		J A Krycka	22-JUN-1983
;	V03-007	JAK0107		J A Krycka	30-APR-1983
;	V03-006	JAK0105		J A Krycka	29-APR-1983
;		Update FAL$GT_VERSION for FAL logging.
;
;	V03-005	JAK0104		J A Krycka	06-APR-1983
;		Allocate RMS block I/O buffers for use during file transfer
;		mode.
;
;	V03-004	KRM0086		K Malik		23-Mar-1983
;		Update FAL$GT_VERSION for support of STMLF and STMCR file
;		formats and definition and setting of DAP$V_GEQ_V70 bit.
;
;	V03-003	KRM0072		K Malik		23-Nov-1982
;		Change FAL$B_LOGFLG to FAL$L_LOGFLG.
;
;	V03-002	JAK0101		J A Krycka	09-OCT-1982
;		Deduct extra buffered I/O quota before calculating DAP
;		buffer size to prevent FAL from exceeding its BYTLM quota
;		and thereby causing it to hang. This problem only occurs
;		if the requestor agrees to use FAL's buffer size and the
;		FAL process has a sufficiently low BYTLM quota.
;
;--

	.SBTTL	DECLARATIONS
	.PSECT	FAL$DATA	SHR,NOEXE,RD,WRT,LONG

;
; Include Files:
;

	$DAPCNFDEF			; Define DAP Configuration message
	$FALWRKDEF			; Define FAL Work Area symbols
	$IODEF				; Define QIO function codes
	$SSDEF				; Define System Service status codes

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	FAL$Q_FLG EQ 0

;
; Own Storage:
;
; Text stored as counted ASCII strings:
;

FAL$GT_VERSION::			; FAL version number string used by
	.ASCIC	\V04-000\		;  FALLOGGER--same as module ident #

;
; Storage of status code to report on image exit:
;

FAL$GL_EXIT::				; Status code
	.LONG	SS$_NORMAL		; Initialize with success code

;
; Device name and logical name descriptor blocks with text:
;

FAL$GQ_LNKNAM::				; Device name descriptor block
	$QBLOCK	TEXT=<_NET0:>		;  for the link
FAL$GQ_SYSNAM::				; Logical name descriptor block
	$QBLOCK	TEXT=<SYS$NET>		;  for SYS$NET
FAL$GQ_LOGNAM::				; Logical name descriptor block
	$QBLOCK	TEXT=<FAL$LOG>		;  for FAL$LOG
FAL$GQ_OUTPUT::				; Logical name descriptor block
	$QBLOCK	TEXT=<FAL$OUTPUT>	;  for FAL$OUTPUT
FAL$GQ_WILDSPEC::			; Wildcard file name, type, and version
	$QBLOCK	TEXT=<<*.*;*>>		;  (default) file specification string

	.SBTTL	FAL$START - MAINLINE
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$START is responsible for the initialization and termination of FAL.
;	These activities include:
;
;	(1) allocation of the FAL work area and several control blocks within
;	(2) translation of FAL$LOG, conditional translation of FAL$OUTPUT, and
;	    conditional creation of a file for logging requested information
;	(3) creation of a control/information path to NETACP via NET0
;	(4) translation of SYS$NET and construction of an NCB
;	(5) completion of the logical link and optional logging startup data
;	(6) allocation of transmit and receive buffers
;	(7) posting reads and transferring control to the state table manager
;	(8) terminating the image and exiting to VMS
;
;	Once a logical link has been established between FAL and its requestor,
;	control is passed to FAL$STATE, the state transition table manager,
;	which controls the operation of FAL.
;
; Calling Sequence:
;
;	Normally, FAL is run from SYS$SYSTEM:FAL.COM, a batch procedure that
;	is executed when an inbound connect request for object type 17 (decimal)
;	is received by this node.
;
; Input Parameters:
;
;	None
;
; Implicit Inputs:
;
;	Logical name 'FAL$LOG'
;	Logical name 'FAL$OUTPUT'
;	Logical name 'SYS$NET'
;
; Output Parameters:
;
;	None
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

	.ENTRY	FAL$START,^M<>		; Entry point from executive

;+
; Allocate space for the FAL work area (defined by $FALWRKDEF). Within this
; work area space is reserved for several other structures. These include the
; DAP, STB, FAB, RAB, NAM, and XAB control blocks.
;-

	MOVL	#<FAL$K_WRKBLN+511/512>,R1 ; Request required # pages
	BSBW	FAL$GETPAGE		; Expand program region
	MOVL	R2,R8			; Get address of FAL work area
	MOVAB	FAL$T_DAP(R8),R9	; Get address of DAP control block
	MOVAL	FAL$L_FAB(R8),R10	; Get address of FAB
	MOVAL	FAL$L_RAB(R8),R11	; Get address of RAB
	CLRQ	FAL$Q_FLG(R8)		; Initialize FAL work area status flags
	MOVB	#FAL$K_DFLT_RBK,-	; Initialize RMS multi-block cache size
		FAL$B_RBK_CACHE(R8)	;  used only for block mode transfers
					;  (FAL$LOG may override this value)

;+
; Translate the logical name FAL$LOG to determine what type of information
; (if any) is to be logged in the print file. Also, other debugging options
; and program control options may be specified via this mechanism.
;
; Note that the definition of FAL$LOG as a logical name is strictly optional.
;-

TRANSLATE_FAL$LOG:			; Continuation of mainline
	MOVAQ	FAL$Q_FALLOG(R8),R7	; Get address of descriptor
	MOVZWL	#FAL$K_FALLOG,(R7)	; Store buffer size
	MOVAB	FAL$T_FALLOG(R8),4(R7)	; Store buffer address
	$TRNLOG_S-			; Translate 'FAL$LOG'
		LOGNAM=W^FAL$GQ_LOGNAM-	;  Address of logical name descriptor
		RSLLEN=(R7)-		;  Update size directly in descriptor
		RSLBUF=(R7)		;  Put equivalence string in buffer
	CMPW	R0,#<SS$_NOTRAN&^XFFFF>	; Did logical name translate?
	BEQL	10$			; Branch if it was not defined
	$CHECK_STATUS			; Check status code
	BSBW	FAL$PARSE_FAL$LOG	; Process FAL$LOG options
	TSTB	FAL$B_LOGGING(R8)	; Were any output options selected?
	BNEQ	TRANSLATE_FAL$OUTPUT	; Yes, determine where to log output
10$:	BRW	ASSIGN_CHANNEL		; No, skip remaining log initialization

;+
; Translate the logical name FAL$OUTPUT to determine if an explicit print file
; specification has been provided. The logical name translation is performed
; only if FAL logging options have been requested that generate log information.
;
; Note that the definition of FAL$OUTPUT as a logical name is strictly optional.
;-

TRANSLATE_FAL$OUTPUT:			; Conditionally translate logical name
	MOVAQ	FAL$Q_TEMP(R8),R7	; Get address of descriptor
	MOVZWL	#FAL$K_FILESPEC,(R7)	; Store buffer size
	MOVAB	FAL$T_FILESPEC(R8),4(R7); Store buffer address
	$TRNLOG_S-			; Translate 'FAL$OUTPUT'
		LOGNAM=W^FAL$GQ_OUTPUT-	;  Address of logical name descriptor
		RSLLEN=(R7)-		;  Update size directly in descriptor
		RSLBUF=(R7)		;  Put equivalence string in buffer
	CMPW	R0,#<SS$_NOTRAN&^XFFFF>	; Did logical name translate?
	BEQL	CREATE_PRINT_FILE	; Branch if it was not defined
	$CHECK_STATUS			; Check status code
	TSTB	FAL$Q_TEMP(R8)		; Branch if translation yielded a null
	BEQL	CREATE_PRINT_FILE	;  string
	MOVB	FAL$Q_TEMP(R8),-	; Update primary file specification
		W^FAL$PRTFAB+FAB$B_FNS	;  name size and string address in
	MOVL	FAL$Q_TEMP+4(R8),-	;  print file FAB overriding default
		W^FAL$PRTFAB+FAB$L_FNA	;  string of 'SYS$OUTPUT

;+
; Create the print file and initialize print buffer descriptors if the display
; bitmask parameter in the equivalence string for FAL$LOG was non-zero.
;
; Note:	Usually, SYS$OUTPUT will refer to the network log file (NETSERVER.LOG).
;	However, the user may direct logging output to an explicit log file
;	via the logical name FAL$OUTPUT; or he may have redefined SYS$OUTPUT
;	to point to a file.
;-

CREATE_PRINT_FILE:			; Continuation of mainline
	$CREATE	FAB=W^FAL$PRTFAB	; Create the file
	$CHECK_STATUS			; Check completion code
	$CONNECT RAB=W^FAL$PRTRAB	; Establish record stream
	$CHECK_STATUS			; Check completion code

;
; Initialize print buffer descriptors used by both FAL system service calls
; to fill the buffers and subsequent RMS calls to write the buffers.
;

	MOVAQ	W^FAL$GQ_PRTBUF1,R1	; Get address of first descriptor
	MOVZWL	#FAL$K_PRTBUF,(R1)+	; Initialize descriptor of primary
	MOVAB	FAL$T_PRTBUF1(R8),(R1)+	;  (non-AST-level) print buffer
	MOVZWL	#FAL$K_PRTBUF,(R1)+	; Initialize descriptor of secondary
	MOVAB	FAL$T_PRTBUF2(R8),(R1)+	;  (AST-level) print buffer

;+
; Create a temporary mailbox and assign a channel to it. Then assign a channel
; to the pseudo device _NET0 and associate the temporary mailbox with this
; channel.
;
; Note:	Assigning a channel to _NET0 does not confirm the logical link--it
;	simply creates a control/information path to NETACP in preparation for
;	non-transparent network I/O. A QIO access function must be issued to
;	complete the logical link.
;-

ASSIGN_CHANNEL:				; Continuation of mainline
	MOVAB	FAL$Q_TEMP(R8),R1	; Get address of scratch area
	MOVZWL	#FAL$K_MBXBUF,(R1)	; Store mailbox buffer size parameter
	MOVZWL	#FAL$K_MBXQUOTA,4(R1)	; Store mailbox buffer quota parameter
	PUSHAW	FAL$W_MBXCHN(R8)	; Address to return mailbox channel #
	PUSHAW	FAL$W_LNKCHN(R8)	; Address to return device channel #
	PUSHAL	4(R1)			; Address of mailbox buffer quota
	PUSHAL	(R1)			; Address of mailbox buffer size
	PUSHAQ	W^FAL$GQ_LNKNAM		; Address of device name descriptor
	CALLS	#5,G^LIB$ASN_WTH_MBX	; Assign a channel to _NET0 and
					;  associate a temporary mailbox with it
	$CHECK_SS			; Check status code and exit on failure

;+
; Translate the logical name 'SYS$NET'. It's equivalence string is defined by
; VMS to be the entire network connect block (NCB) which is required to gain
; non-transparent access to the network.
;
; The general format of the equivalence string is:
;
;	nodespec::"objecttype=taskid/{binary_data}"
;
; However, the string displayed in the print file will have the binary data
; truncated as shown below:
;
;	nodespec::"objecttype=taskid"
;
; Finally, the string put into the NCB for a connect accept without userdata
; will include only the first two bytes of the binary data past the slash:
;
;	nodespec::"objecttype=taskid/{two_bytes_of_binary_data}"
;-

TRANS_SYS$NET:				; Continuation of mainline
	MOVAQ	FAL$Q_SYSNET(R8),R7	; Get address of output descriptor
	MOVZWL	#FAL$K_SYSNET,(R7)	; Store buffer size
	MOVAB	FAL$T_SYSNET(R8),4(R7)	; Store buffer address
	$TRNLOG_S-			; Translate 'SYS$NET'
		LOGNAM=W^FAL$GQ_SYSNAM- ;  Address of logical name descriptor
		RSLLEN=(R7)-		;  Update size directly in descriptor
		RSLBUF=(R7)		;  Put equivalence string in buffer
	CMPW	R0,#<SS$_NOTRAN&^XFFFF>	; Branch if logical name is not defined
	BEQL	20$			;
	$CHECK_SS			; Check status code and exit on failure

;
; Extract the name of the partner node and save it for use by FAL$CRC_LOGERR.
;

	MOVQ	(R7),R2			; Make writable copy of descriptor
	LOCC	#^A/:/,R2,(R3)		; Find the colon
	SUBL3	R3,R1,R2		; Compute the nodename length
	CMPB	#^A/_/,(R3)		; Nodename start with an underscore?
	BNEQ	10$			; No
	DECL	R2			; Yes, lower the count
	INCL	R3			; and bump pointer past underscore
10$:	MOVAB	W^FAL$GT_NODENAME,R4	; Get address of buffer to put nodename
	MOVB	R2,(R4)+		; Move the count into the buffer
	MOVC3	R2,(R3),(R4)		; Put the nodename in buffer

;
; Locate the slash preceeding the binary data and save its address.
;

	LOCC	#^A\/\,(R7),@4(R7)	; Find taskid delimiter
	BNEQ	30$			; Branch if slash found
20$:	MOVZWL	#SS$_IVLOGNAM,W^FAL$GL_EXIT ; Declare error
	BRW	FAL$TERMINATE		; Terminate image execution
30$:	MOVL	R1,R2			; Save address of slash

;
; Write to the print file: FAL version number, a time stamp, the identity of
; the requesting process, and the equivalence string for FAL$LOG.
;

	TSTB	FAL$B_LOGGING(R8)	; Branch if FAL logging is disabled
	BEQL	COMPLETE_LOGICAL_LINK	;
	MOVB	#^A\"\,(R1)+		; Overlay slash to truncate string
	SUBL3	4(R7),R1,(R7)		; Update string size in descriptor
	MOVAQ	FAL$Q_FALLOG(R8),R0	; Get address of string descriptor
	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_CALLER-	;  Address of control string
		OUTLEN=W^FAL$GW_PRTLEN1-;  Address of receive string length
		OUTBUF=W^FAL$GQ_PRTBUF1-;  Address of buffer to put string
		P1=#FAL$GT_VERSION-	;  FAL version number string address
		P2=#0-			;  Use current date and time
		P3=R7-			;  Address of requestor string desc
		P4=R0			;  Address of FAL$LOG string descriptor
	$CHECK_STATUS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message

;
; Write an error message if FAL$LOG options string was not successfully parsed.
;

	BBC	#FAL$V_PARSE_ERR,(R8),40$;Branch if no parse error was detected
	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_PARSERR-;  Address of control string
		OUTLEN=W^FAL$GW_PRTLEN1-;  Address of receive string length
		OUTBUF=W^FAL$GQ_PRTBUF1	;  Address of buffer to put string
	$CHECK_STATUS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message

;
; Write and informational message if DAP messages are to be logged.
;

40$:	BBC	#FAL$V_LOG_MSG,(R8),-	; Branch if logging of DAP messages is
		COMPLETE_LOGICAL_LINK	;  disabled
	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_HEADER-	;  Address of control string
		OUTLEN=W^FAL$GW_PRTLEN1-;  Address of receive string length
		OUTBUF=W^FAL$GQ_PRTBUF1	;  Address of buffer to put string
	$CHECK_STATUS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message

;+
; Respond to the connect initiate with a connect accept (without userdata)
; to complete the logical link.
;
; Note:	The equivalence string from the translation of SYS$NET will be shortened
;	to remove unwanted userdata two bytes past the slash character so that
;	this modified string can be used as the Network Connect Block (NCB) on
;	the QIO connect accept request!!
;-

COMPLETE_LOGICAL_LINK:			; Continuation of mainline
	MOVB	#^A\/\,(R2)+		; Restore slash to string
	TSTW	(R2)+			; Skip over first 2 bytes of binary data
	MOVB	#^A\"\,(R2)+		; Terminate string here to make an NCB
	SUBL3	4(R7),R2,(R7)		; Update string size in NCB descriptor
	$QIOW_S-			; Issue connect accept to complete link
		EFN=#FAL$K_XMTEFN-	;  Event flag number
		CHAN=FAL$W_LNKCHN(R8)-	;  Channel number
		FUNC=#IO$_ACCESS!IO$M_ACCESS- ; Function code
		IOSB=FAL$Q_XMTIOSB(R8)-	;  Address of I/O status block
		P1=0-			;  Must be zero
		P2=R7			;  Address of NCB descriptor
	$CHECK_SS			; Check status code and exit on failure

;
; Write link established message to the print file.
;

	BBC	#FAL$V_LOG_STA,(R8),-	; Branch if logging of statistics is
		ALLOCATE_BUFFERS	;  disabled
	$GETJPIW_S-			; Get selected job/process information
		ITMLST=W^FAL$GETJPI_LST0;  Address of item list
	$CHECK_STATUS			; Check status code
	$GETTIM_S-			; Get current date and time
		TIMADR=W^FAL$GQ_TIME0	;  Address to receive time value
	$CHECK_STATUS			; Check status code
	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_LINKUP-	;  Address of control string
		OUTLEN=W^FAL$GW_PRTLEN1-;  Address of receive string length
		OUTBUF=W^FAL$GQ_PRTBUF1-;  Address of buffer to put string
		P1=#FAL$GQ_TIME0	;  Address of absolute date and time
	$CHECK_STATUS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message

;+
; Allocate space for two receive buffers and one double-length transmit buffer.
; The receive buffers will be used alternately to obtain incoming DAP messages.
; The transmit buffer will be used for both building new DAP messages (BLD
; descriptor) and for concatenating DAP messages together (XMT descriptor)
; before sending them. The BLD area will overlay the XMT area and may overflow
; into the second part of the transmit buffer area, thus a double-length buffer
; area will be allocated.
;
; Also, allocate RMS block I/O buffers for use during file transfer mode.
;-

ALLOCATE_BUFFERS:			; Allocate logical link I/O buffers
	MOVZWL	#FAL$K_MAXBUFSIZ,R4	; Get supported DAP buffer size
	MOVW	R4,FAL$W_QIOBUFSIZ(R8)	; Save supported buffer size for use
					;  in building Configuration message
	MOVW	R4,FAL$W_DAPBUFSIZ(R8)	; Initialize DAP buffer size for use by
					;  FAL$RCV_QIO (it will be revised after
					;  exchange of Configuration messages)

;
; Allocate space for two receive buffers and one double-length transmit buffer
; based on the largest QIO that FAL is prepared to support. Then put size and
; address information about them in the FAL work area. Note that all buffers
; will start on a page boundary and that the transmit buffer is the size of two
; QIO buffers to provide an overflow area potentially used while building a
; when there are concatenated messages already in the transmit buffer.
;

	BBC	#FAL$V_USE_DBS,(R8),10$	; Branch to use calculated buffer size
	MOVZWL	FAL$W_USE_DBS(R8),R4	; Override with user specified value
10$:	ADDL2	#511,R4			; Compute # of pages required for
	ASHL	#-9,R4,R4		;  each buffer
	MULL3	#<FAL$K_RCVBUFCNT+1+1>,-; Compute total # of pages required
		R4,R1			;  for receive and transmit buffers
	BSBW	FAL$GETPAGE		; Expand program region
	ASHL	#9,R4,R5		; Compute # bytes per buffer
	MOVL	#FAL$K_RCVBUFCNT,R0	; Get number of receive buffers
	MOVAL	FAL$L_RCVBUF(R8),R1	; Get address of buffer address table
20$:	MOVL	R2,(R1)+		; Store receive buffer address
	ADDL2	R5,R2			; Compute next buffer address
	SOBGTR	R0,20$			; Branch if more to do
	CLRL	FAL$Q_XMT(R8)		; Initialize transmit buffer descriptor
	MOVL	R2,FAL$Q_XMT+4(R8)	; Store transmit buffer address

;
; Allocate space for RMS multi-block buffer for use during file transfer mode
; to issue large block I/O requests to the local RMS.
;

	MOVZBL	FAL$B_RBK_CACHE(R8),R1	; Get number of pages to allocate
	ASHL	#9,R1,R4		; Calculate # bytes in buffer
	BSBW	FAL$GETPAGE		; Expand program region
	MOVL	R4,FAL$Q_RMS(R8)	; Store RMS buffer size in descriptor
	MOVL	R2,FAL$Q_RMS+4(R8)	; Store RMS buffer addr in descriptor
	MOVL	R2,FAL$L_RMS_PTR(R8)	; Initialize next byte pointer

;+
; Post read requests to the mailbox and logical link, then transfer control
; to the state table manager.
;-

END_OF_SETUP:				; Continuation of mainline

;
; Issue a read with an AST for the associated mailbox so that FAL will be
; notified of a change in the status of the link such as partner exited or
; of the receipt of an interrupt message.
;
; Note:	Each time that a read completes, another read will be issued to keep
;	one read request outstanding.
;

	BSBW	FAL$MBX_RCV_QIO		; Issue mailbox read with AST

;
; Issue a read with an AST for the logical link.
;
; Note:	Each time that a read completes, another read will be issued to keep
;	one read request outstanding.
;

	BSBW	FAL$RCV_QIO		; Issue link read with AST

;
; Transfer control to the state transiton table mananger.
;

	MOVAB	W^FAL$STATE_TABLE,R2	; Get address of state transition table
	BSBW	FAL$STATE		; Give control to state table manager

	.SBTTL	FAL$TERMINATE -- NORMAL IMAGE EXIT

;++
; Normal image exit to VMS. Transfer control here to unconditionally terminate
; FAL in a graceful manner.
;--

FAL$TERMINATE::				; Control point
	$SETBIT	#FAL$V_TERMINATE,(R8)	; Signal image termination in progress

;
; Write link terminated message and statistics messages to the print file.
;

	BBC	#FAL$V_LOG_STA,(R8),10$	; Branch if logging disabled
	BBC	#FAL$V_CNF_MSG,(R8),10$	; Branch if no messages received
	$GETTIM_S-			; Get current date and time
		TIMADR=W^FAL$GQ_TIME1	;  Address to receive time value
	$CHECK_STATUS			; Check status code
	$GETJPIW_S-			; Get selected job/process information
		ITMLST=W^FAL$GETJPI_LST1;  Address of item list
	$CHECK_STATUS			; Check status code
	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_LINKDOWN-; Address of control string
		OUTLEN=W^FAL$GW_PRTLEN1-;  Address of receive string length
		OUTBUF=W^FAL$GQ_PRTBUF1-;  Address of buffer to put string
		P1=#FAL$GQ_TIME1	;  Address of absolute date and time
	$CHECK_STATUS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message
	BSBW	FAL$STATISTICS		; Compute and print statistics

;
; Write internal counters to the print file.
;

10$:	BBC	#FAL$V_LOG_CNT,(R8),20$	; Branch if internal counters not wanted
	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_INTCNTR-; Address of control string
		OUTLEN=W^FAL$GW_PRTLEN1-;  Address of receive string length
		OUTBUF=W^FAL$GQ_PRTBUF1-;  Address of buffer to put string
		P1=W^FAL$GL_RECVWAIT-	;  Receive QIO wait count
		P2=W^FAL$GL_WRITWAIT-	;  RMS FTM WRITE wait count
		P3=W^FAL$GL_COUNTER1-	;  Miscellaneous counter 1
		P4=W^FAL$GL_COUNTER2-	;  Miscellaneous counter 2
		P5=W^FAL$GL_COUNTER3-	;  Miscellaneous counter 3
		P6=W^FAL$GL_COUNTER4	;  Miscellaneous counter 4
	$CHECK_STATUS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message

;
; Write exit message to the print file.
;

20$:	TSTB	FAL$B_LOGGING(R8)	; Branch if FAL logging is disabled
	BEQL	IMAGE_EXIT		;
	$FAO_S-				; Format the message
		CTRSTR=W^FAL$GQ_EXIT-	;  Address of control string
		OUTLEN=W^FAL$GW_PRTLEN1-;  Address of receive string length
		OUTBUF=W^FAL$GQ_PRTBUF1-;  Address of buffer to put string
		P1=#0			;  Use current date and time
	$CHECK_STATUS			; Check status code
	BSBW	FAL$PRINT_FAO		; Print message

;
; Close the print file.
;

	$CLOSE	FAB=W^FAL$PRTFAB	; Close the print file
	$CHECK_STATUS			; Check completion code

;+
; Quick exit to VMS (or continuation of FAL$TERMINATE). Transfer control here
; to abruptly terminate FAL.
;
; Note:	Image rundown will deassign all channels (which will break the logical
;	link with partner).
;-

IMAGE_EXIT:				; Control point
	$EXIT_S	CODE=W^FAL$GL_EXIT	; Exit to VMS with status code specified

	.SBTTL	FAL$CHECK_SS - CHECK SYSTEM SERVICE STATUS CODE
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$CHECK_SS checks the status code in R0 following a System Service
;	call. If failure is indicated after filtering out allowable error
;	conditions, the image is terminated with R0 as the exit completion code.
;
; Calling Sequence:
;
;	BSBW	FAL$CHECK_SS
;
; Input Parameters:
;
;	R0	System Service status code
;
; Implicit Inputs:
;
;	FAL$GL_EXIT
;
; Output Parameters:
;
;	None
;
; Implicit Outputs:
;
;	FAL$GL_EXIT
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	If the System Service indicates failure after filtering out allowable
;	error conditions, the image is terminated with R0 on input as the exit
;	completion code.
;
;--

FAL$CHECK_SS::				; Entry point
	BLBC	R0,10$			; Was System Service successful?
	RSB				; Yes, exit
					; No, terminate execution ...
10$:	BLBC	W^FAL$GL_EXIT,30$	; Branch if an error was previously
					;  detected to prevent possible loop
	CMPW	R0,#SS$_LINKABORT	; Do not report these error codes as
	BEQL	20$			;  the partner process tells FAL to
	CMPW	R0,#SS$_LINKDISCON	;  terminate by breaking the logical
	BEQL	20$			;  link (i.e., there is no DAP directive
	CMPW	R0,#SS$_LINKEXIT	;  to tell FAL to terminate)
	BEQL	20$			;
	MOVL	R0,W^FAL$GL_EXIT	; Store error code for use at image exit
20$:	BRW	FAL$TERMINATE		; Take graceful termination path
30$:	BRW	IMAGE_EXIT		; Take quick termination path

	.SBTTL	FAL$CHECK_STATUS - CHECK STATUS CODE (NON-FATAL)
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$CHECK_STATUS checks the status code in R0 following an RMS or
;	System Service call. This routine should be used to check the status
;	of a FAL logging operation. Unlike FAL$CHECK_SS, this routine does not
;	terminate FAL on detecting an error. Instead it disables FAL logging
;	and stores the status code for subsequent reporting when FAL terminates
;	normally. Thus, a FAL logging failure will not disrupt the remote file
;	access operation in progress.
;
; Calling Sequence:
;
;	BSBW	FAL$CHECK_STATUS
;
; Input Parameters:
;
;	R0	System Service status code or RMS completion code
;	R8	Address of FAL work area
;
; Implicit Inputs:
;
;	FAL$GL_EXIT
;
; Output Parameters:
;
;	None
;
; Implicit Outputs:
;
;	FAL$GL_EXIT
;	FAL$B_LOGGING
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	If the status code indicates failure, then FAL logging is disabled and
;	the failure code is saved for display on image exit.
;
;--

FAL$CHECK_STATUS::			; Entry point
	BLBS	R0,10$			; Was service call successful?
	CLRB	FAL$B_LOGGING(R8)	; No, disable further logging output
	BLBC	W^FAL$GL_EXIT,10$	; Store error code in R0 for use at
	MOVL	R0,W^FAL$GL_EXIT	;  image exit unless an error was
					;  previously detected
10$:	RSB				; Exit

	.SBTTL	FAL$GETPAGE - EXPAND PROGARM REGION
	.PSECT	FAL$CODE	NOSHR,EXE,RD,NOWRT,BYTE

;++
; Functional Description:
;
;	FAL$GETPAGE expands the program region (P0) by the number of pages
;	specified. These are demand zero pages.
;
; Calling Sequence:
;
;	BSBW	FAL$GETPAGE
;
; Input Parameters:
;
;	R1	# of pages to allocate
;
; Implicit Inputs:
;
;	None
;
; Output Parameters:
;
;	R0-R1	Destroyed
;	R2	Address of first byte allocated
;	R3	Address of last byte allocated
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	None
;
; Side Effects:
;
;	The virtual address space of the image is expanded.
;
;--

FAL$GETPAGE::				; Entry point
	CLRQ	-(SP)			; Form array to receive address bounds
	MOVL	SP,R0			;  and save its address
	$EXPREG_S-			; Expand program region
		PAGCNT=R1-		;  # pages desired in P0 space
		RETADR=(R0)		;  Address to receive lo & hi addresses
	$CHECK_SS			; Check status code and exit on failure
	MOVQ	(SP)+,R2		; Store first and last addresses
	RSB				; Exit

	.END	FAL$START		; Image transfer address
