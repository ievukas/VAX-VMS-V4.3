	.TITLE	DISMOUNT - DISMOUNT A MOUNTED MASS STORAGE VOLUME
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; FACILITY:  
;
;	MASS STORAGE DEVICE MANAGEMENT SUBROUTINES
;
; ABSTRACT:
;
;	THIS ROUTINE DISMOUNTS THE INDICATED DEVICE.
;
;
; ENVIRONMENT:
;
;	VAX/VMS EXEC
;	MODE = KERNEL
;
;
; AUTHOR:  ANDREW C. GOLDSTEIN, CREATION DATE:  2-NOV-1977  14:10
;
; MODIFIED BY:
;
;	V03-019	CDS0001		Christian D. Saether	28-Aug-1984
;		Ignore SS$_VALNOTVALID errors when converting device
;		lock.
;
;	V03-018	HH0049		Hai Huang		16-Aug-1984
;		Call IOC$DALLOC_DMT routine to deallocate the device
;		on dismount of a foreign volume.
;
;	V03-017	ACG0441		Andrew C. Goldstein,	13-Aug-1984  10:17
;		Issue both an IO$_UNLOAD and IO$_AVAILABLE to correctly
;		release tape drives.
;
;	V03-016	ACG0441		Andrew C. Goldstein,	8-Aug-1984  11:33
;		Rework foreign volume dismount; locate all code in
;		this module. General code cleanup.
;
;	V03-015	TMK0001		Todd M. Katz		21-Apr-1984
;		When deleting the logical name associated with a mounted volume,
;		delete the logical name block by calling LNM$DELETE_LNMB
;		instead of LNM$DELETE. Doing so will ensure that this deletion
;		takes place as if the system service $DELLNM had been called
;		to delete the logical name. In other words, not only will the
;		target logical name be deleted, but so will all outer access 
;		mode aliases.
;
;	V03-014	LMP0221		L. Mark Pilant,		30-Mar-1984  13:48
;		Change UCB$L_OWNUIC to ORB$L_OWNER and UCB$W_VPROT to
;		ORB$W_PROT.
;
;	V03-013	ACG0371		Andrew C. Goldstein,	11-Nov-1983  9:32
;		Set PHY_IO in PCB privilege mask instead of PHD
;
;	V03-012 LY0427		Larry Yetto		5-OCT-1983 14:51:12
;		If the DELJNL service call to delete the RU journal fails
;		then deassign the journal channel
;
;	V01-011	TCM0005		Trudy C. Matthews	22-Sep-1983
;		If device is to be deallocated on dismount, don't do it here.
;		Wait until last channel deassign instead.  This keeps the
;		device allocated and the lock present until all activity
;		has ceased from this mount.
;
;	V03-010	TCM0004		Trudy C. Matthews	07-Sep-1983
;		Fix bug that caused foreign disks not to be unloaded on
;		dismount.
;
;	V03-009	TCM0003		Trudy C. Matthews	22-Aug-1983
;		Undo change made in TCM0001.  If a device is dismounted and
;		there are still channels assigned to it, we just want to
;		deallocate the local UCB.  The cluster-wide lock (if it
;		exists) will be dequeued when the last channel is de-assigned.
;
;	V03-008	TCM0002		Trudy C. Matthews	22-Jun-1983
;		Decrement refcount when a disk is dismounted.  MOUNT has
;		been changed to increment the refcount while the disk
;		is mounted.
;
;	V03-007	ADE9006		Alan D. Eldridge	01-MAy-1983
;		Restore PCB address (R4) on dismount of foreign devices.
;
;	V03-006	STJ3103		Steven T. Jeffreys,	27-Apr-1983
;		Delete RUJ on dismount.
;
;	V03-005	DMW4034		DMWalp			26-May-1983
;		Intergate new logical name structures.
;
;	V03-004	TCM0001		Trudy C. Matthews	21-Apr-1982
;		Call routine EXE$DALLOC_DEV to deallocate a device.  This
;		routine handles cluster device deallocation correctly.
;
;	V03-003	PHL0101		Peter H. Lipman		20-Jun-1982
;		$QIOW now synchronizes the EFN and IOSB parameters
;		correctly.  Eliminate the synchronization code here.
;
;	V03-002	STJ0257		Steven T. Jeffreys,	12-Apr-1982
;		- Do not mung device allocation access mode.
;		- Make code AST reentrant.  This includes the addition
;		  of the local subroutine DO_IO.
;
;	V03-001	STJ0229		Steven T. Jeffreys,	23-Mar-1982
;		Clear the 'mount verification possible' bit in the VCB
;		so that $DISMOU will succeed even if no volume is present
;		in the drive (as in version 2).
;
;	V02-008	ACG0248		Andrew C. Goldstein,	23-Dec-1981  11:56
;		Fix logical name interlocks
;
;	V02-007	ACG0226		Andrew C. Goldstein,	24-Nov-1981  22:29
;		Issue IO$_AVAILABLE on DISMOUNT/NOUNLOAD
;
;	V0006	STJ0138		Steven T. Jeffreys,   12-Nov-1981
;		Use IOC$CVT_DEVNAM to format the device name.
;
;	V0005	ACG0062		Andrew C. Goldstein,  16-Oct-1979  13:53
;		Unload volumes mounted foreign on dismount
;
;	V0004	ACG0003		Andrew C. Goldstein,  1-Feb-1979  11:07
;	Add handling of dummy MTL entry for volume set
;
;   Andrew C. Goldstein, 12-Jul-78  20:08
;   V0003 - ADD ERROR LOG ENTRY FOR FOREIGN DISMOUNT
;
;**

;
; Define system control blocks
;
	$DDBDEF				; DDB
	$DEVDEF				; device characteristics bits
	$DCDEF				; define device types
	$EMBETDEF			; define error log message codes
	$EMBVMDEF			; define error log buffer format
	$IODEF				; define I/O function codes
	$IPLDEF				; define IPL definitions
	$LCKDEF				; define lock manager values
	$LKIDEF				; define codes for $GETLKI
	$ORBDEF				; object's rights block offsets
	$PCBDEF				; process control block
	$PRDEF				; processor register codes
	$PRVDEF				; privilege bit definitions
	$MTLDEF				; mounted volume list entry
	$SSDEF				; system service codes
	$UCBDEF				; UCB
	$VCBDEF				; VCB
;
; Local storage allocated on stack (addressed off R3)
;
NAME_LENGTH	= 32			; length of device name buffer
CHANNEL		= 0			; channel number
DEVICE_NAME	= 4			; string descriptor of device name
NAME_STRING	= 12			; device name string buffer

LOCAL_SIZE	= 44			; total size of stack locals

	.PSECT	Y$DISMOUNT

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine dismounts the indicated mounted volume list entry.
;	The MTL and logical name, if it still exists, are deleted, and the
;	volume share count is decremented. If the share count goes to
;	zero, the volume itself is dismounted.
;
; CALLING SEQUENCE:
;	JSB IOC$DISMOUNT
;
; INPUT PARAMETERS:
;	R3 = LBC to unload volume
;	     LBS to not unload
;	R4 = address of process PCB
;	R6 = address of mounted volume list entry
;
; IMPLICIT INPUTS:
;	IPL  -  IPL$_ASTDEL
;
; OUTPUT PARAMETERS:
;	R0-R2,R6 smashed, other registers preserved
;
; IMPLICIT OUTPUTS:
;	NONE
;
; ROUTINE VALUE:
;	SS$_NORMAL,SS$_NOIOCHAN
;
; SIDE EFFECTS:
;	Volume dismounted: logical name & MTL deallocated, VCB gone or soon
;	to go, ACP process may become deleted
;
;--


IOC$DISMOUNT::
	PUSHR	#^M<R3,R4,R5>		; save registers
	MOVL	MTL$L_UCB(R6),R5	; get UCB address
	TSTL	MTL$L_LOGNAME(R6)	; test address of logical name
	BEQL	10$			; branch if none
	DSBINT  S^#IPL$_ASTDEL
	JSB	LNM$LOCKW		; lock the table
	MOVL	MTL$L_LOGNAME(R6),R1	; get address of logical name
	JSB	LNM$DELETE_LNMB		; delete the logical name
	JSB	LNM$UNLOCK		; and unlock the table
	ENBINT

10$:	MOVZBL	MTL$B_STATUS(R6),-(SP)	; save MTL entry status byte
	MOVL	R6,R0			; get MTL address in R0
	BGEQ	20$			; branch if process space address
	BSBW	EXE$DEAPAGED		; deallocate to system paged pool
	BRB	30$
20$:	MOVZWL	MTL$W_SIZE(R6),R1	; get block size
	MOVAL	@#CTL$GQ_ALLOCREG,R3	; and process allocation list head
	BSBW	EXE$DEALLOCATE		; and deallocate to process pool

;
; Now lock the I/O database mutex and decrement the volume share count.
; If it goes to zero, mark the UCB for dismount.
;
	ASSUME	MTL$V_VOLSET EQ 0
30$:	BLBS	(SP)+,40$		; branch if MTL entry was for volume set
	BSBW	SCH$IOLOCKW		; lock I/O database
	MOVL	UCB$L_VCB(R5),R0	; and VCB address
	DECW	VCB$W_MCOUNT(R0)	; decrement mount count
	BEQL	50$			; branch if now idle
	BSBW	SCH$IOUNLOCK		; else unlock I/O database
40$:	SETIPL	#0
	MOVL	#SS$_NORMAL,R0		; set success
	BRW	130$			; and get out

50$:	BBSS	#DEV$V_DMT,UCB$L_DEVCHAR(R5),60$ ; set mark for dismount
60$:	BLBC	(SP),70$		; branch if volume to be unloaded
	BBCC	#UCB$V_UNLOAD,UCB$W_STS(R5),70$ ; else clear unload bit
70$:	BICB2	#<1@VCB$V_MOUNTVER>,-	; clear MV bit in the VCB
		VCB$B_STATUS2(R0)	;
80$:	BBSC	#UCB$V_MOUNTING,UCB$W_STS(R5),90$ ; clean up status bits
90$:	BSBW	SCH$IOUNLOCK		; unlock the I/O database
	SETIPL	#0

;
; Assign a channel to the device. If it is mounted Files-11, issue a dismount
; QIO. (If it is mounted foreign, deassigning the channel will complete the
; cleanup).
;
	SUBL	#LOCAL_SIZE,SP		; allocate local storage on stack
	MOVL	SP,R3
	MOVL	#NAME_LENGTH,R0		; set name buffer length
	MOVAL	NAME_STRING(R3),R1	; set name buffer address
	MOVL	R1,DEVICE_NAME+4(R3)	; copy address to descriptor
	CLRL	R4			; get node + device name
	BSBW	IOC$CVT_DEVNAM		; format the device name
	MOVL	R1,DEVICE_NAME(R3)	; save resultant string length
	CLRL	CHANNEL(R3)		; init channel number
	$ASSIGN_S CHAN=CHANNEL(R3),-	; and assign a channel to the device
		  DEVNAM=DEVICE_NAME(R3)
	BLBC	R0,120$			; if this fails, we will have a hung device

	BBC	#DEV$V_FOR,-		; if BC then not foreign
		UCB$L_DEVCHAR(R5),100$	;
	MOVL	LOCAL_SIZE+4(SP),R4	; recover PCB address
	BSBB	FOREIGN			; dismount foreign device
	BRB	110$			; continue
					;
100$:	PUSHL	#<IO$_ACPCONTROL!IO$M_DMOUNT>
	PUSHL	CHANNEL(R3)		; push channel number
	CALLS	#2,W^DO_IO		; issue the dismount QIO
	MOVAQ	DEVICE_NAME(R3),R4	; get address of device name descriptor
	BSBW	DELETE_RUJ		; delete the recovery unit journal (ruj)
110$:	$DASSGN_S  CHAN=CHANNEL(R3)	; deassign the channel
120$:	ADDL	#LOCAL_SIZE,SP		; restore stack pointer
					;
130$:	POPR	#^M<R3,R4,R5>		; restore registers
	RSB

	.SBTTL	DISMOUNT FOREIGN DEVICE
;
; Foreign devices are dismounted on the spot, with no interlock checks.
; The reason for this is that the only event we could defer the dismount
; to is last channel deassign, which is not a suitable location.
;
; Construct and send the error log message signalling dismount.
;

	.ENABLE	LSB
FOREIGN:				; dismount foreign device
	MOVZBL	#EMB$K_VM_LENGTH,R1	; length of error log message
	BSBW	ERL$ALLOCEMB		; allocate an error log buffer
	BLBC	R0,10$			; branch if failure
					;
	PUSHR	#^M<R2,R3,R4,R5>	; save address of buffer and R3, R4, R5
	ASSUME	EMB$L_VM_ERRCNT EQ EMB$L_VM_OWNUIC+4
	ASSUME	EMB$L_VM_OPRCNT EQ EMB$L_VM_ERRCNT+4
	ASSUME	EMB$W_VM_UNIT   EQ EMB$L_VM_OPRCNT+4
	ASSUME	EMB$B_VM_NAMLNG EQ EMB$W_VM_UNIT+2
	ASSUME	EMB$T_VM_NAMTXT EQ EMB$B_VM_NAMLNG+1
	ASSUME	EMB$W_VM_VOLNUM EQ EMB$T_VM_NAMTXT+15
	ASSUME	EMB$W_VM_NUMSET EQ EMB$W_VM_VOLNUM+2
	ASSUME	EMB$T_VM_LABEL  EQ EMB$W_VM_NUMSET+2

	MOVW	#EMB$K_VD,EMB$W_VM_ENTRY(R2) ; message code = dismount
	ADDL	#EMB$L_VM_OWNUIC,R2	; point to entries to be filled in
	MOVL	UCB$L_ORB(R5),R0	; get ORB address
	MOVL	ORB$L_OWNER(R0),(R2)+	; volume owner UIC
	MOVZWL	UCB$W_ERRCNT(R5),(R2)+	; volume error count
	MOVL	UCB$L_OPCNT(R5),(R2)+	; volume operation count
	MOVW	UCB$W_UNIT(R5),(R2)+	; unit number
	ADDL3	#VCB$T_VOLNAME,UCB$L_VCB(R5),-(SP) ; save address of volume label
	ADDL3	UCB$L_DDB(R5),#DDB$T_NAME,R6 ; calculate device name address
	MOVZBL	(R6),R0			; get length of device name
	INCL	R0			; bump to include count byte
	MOVC5	R0,(R6),#0,#16,(R2)	; copy device name into message
	CLRL	(R3)+			; zero rel vol number and volume set size
	MOVC3	#12,@(SP)+,(R3)		; copy volume label
	POPR	#^M<R2>			; recover buffer address
	BSBW	ERL$RELEASEMB		; release error log buffer and send
	POPR	#^M<R3,R4,R5>
;
; Release the device, using an unload and/or available function,
; depending on whether the volume is supposed to be unloaded or not.
;
10$:	CLRL	R2			; assume privilege bit clear
	BBCS	#PRV$V_PHY_IO,PCB$Q_PRIV(R4),20$ ; set PHY_IO privilege and test
	INCL	R2			; bit was set - save state
20$:	BBCC	#UCB$V_UNLOAD,UCB$W_STS(R5),30$ ; branch if no unload
	PUSHL	#IO$_UNLOAD		; set up for unload
	PUSHL	CHANNEL(R3)		; push channel number
	CALLS	#2,W^DO_IO		; issue the unload or rewind QIO
30$:	PUSHL	#IO$_AVAILABLE		; now release drive
	PUSHL	CHANNEL(R3)		; push channel number
	CALLS	#2,W^DO_IO		; issue the unload or rewind QIO
	INSV	R2,#PRV$V_PHY_IO,#1,PCB$Q_PRIV(R4) ; restore privilege bit
	BICW	#UCB$M_VALID,-		; clear software volume valid.
		UCB$W_STS(R5) 
;
; Now complete the dismount. If the device is cluster accessible, raise
; the device lock to read the value block.
;
	PUSHR	#^M<R3,R7>		; save R3 & R7
	MOVL	UCB$L_VCB(R5),R7	; get VCB address
	SUBL	#24,SP			; allocate lock status block on stack
	MOVL	SP,R6
	MOVL	UCB$L_LOCKID(R5),4(R6)	; get device lock ID
	BEQL	50$			; branch if none - not cluster dev
	BBS	#DEV$V_ALL,UCB$L_DEVCHAR(R5),40$ ; branch if dev allocated
	MOVL	#LCK$K_PWMODE,R0	; otherwise raise lock to PW
	$ENQW_S	LKMODE=R0,-		; queue for the device lock
		LKSB=(R6),-
		EFN=S^#EXE$C_SYSEFN,-
		FLAGS=#LCK$M_CONVERT!LCK$M_VALBLK!LCK$M_SYNCSTS!LCK$M_NOQUOTA
	BLBC	R0,LOCKERR		; bug check if error
	BLBS	(R6),35$
	CMPW	(R6), #SS$_VALNOTVALID	; Is the error simply value block not valid?
	BEQL	35$			; No problem.
	BRB	LOCKERR			; Problem.
;
; Now get the lock count on the volume lock. If it is about to go to
; zero, clear the value block in the device lock.
;
35$:	CLRL	-(SP)			; longword for lock count
	CLRQ	-(SP)			; item list end + retlen
	PUSHAB	8(SP)			; address of block count
	PUSHL	#LKI$_LCKCOUNT@16!4	; size & item code for lock count
	MOVL	SP,R1			; item list address
	CLRQ	-(SP)			; IOSB
	MOVL	SP,R0
	$GETLKIW_S	LKIDADR=VCB$L_VOLLKID(R7),-
			ITMLST=(R1),-
			EFN=S^#EXE$C_SYSEFN,-
			IOSB=(R0)
	BLBC	R0,LOCKERR		; bug check if error
	BLBC	(SP),LOCKERR
	ADDL	#24,SP			; clean IOSB & item list off stack
	DECL	(SP)+			; check lock count against 1
	BNEQ	50$			; branch if other mounts exist
40$:	CLRQ	8(R6)			; last mount - clear value block
	CLRQ	16(R6)
;
; Now take out the I/O database mutex again, and clean out the mount.
; Release the volume lock if there is one.
;
50$:	BSBW	SCH$IOLOCKW		; take I/O database mutex
	MOVL	VCB$L_VOLLKID(R7),R0	; get volume lock ID
	BEQL	60$			; branch if none
	$DEQ_S	LKID=R0			; release it
	BLBS	R0,60$			; branch if OK
;
; To here on any errors from lock management services.
;
LOCKERR:
	BUG_CHECK XQPERR,FATAL		; unexpected lock manager error
;
; Clear out the UCB.
;
60$:	BICL	#<DEV$M_DMT!DEV$M_FOR!-	; clear marked for dismount, foreign, 
		DEV$M_RCK!DEV$M_WCK!-	; read/write check, 
		DEV$M_SWL!DEV$M_MNT>,-	; software write locked, and mounted
		UCB$L_DEVCHAR(R5) 	; status bit.
	DECW	UCB$W_REFC(R5)		; remove mount from ref count
	MOVL	R7,R0			; get address of VCB.
	CLRL	UCB$L_VCB(R5)		; clear address of VCB.
	BSBW	EXE$DEANONPAGED		; deallocate VCB.
	MOVL	UCB$L_ORB(R5),R0	; get the ORB address

	ASSUME	ORB$L_OWN_PROT EQ ORB$L_SYS_PROT+4
	ASSUME	ORB$L_WOR_PROT EQ ORB$L_GRP_PROT+4

	CLRQ	ORB$L_SYS_PROT(R0)	; clear out stale protection info
	CLRQ	ORB$L_GRP_PROT(R0)
	CLRL	ORB$L_OWNER(R0)		; clear out stale owner also
;
; Release the device lock with the updated value block.
;
	TSTL	4(R6)			; check if we have a lock ID
	BEQL	80$			; branch if no lock
	MOVL	#LCK$K_CRMODE,R0	; use CR mode if not allocated
	BBC	#DEV$V_ALL,UCB$L_DEVCHAR(R5),70$ ; branch if not allocated
	MOVL	#LCK$K_EXMODE,R0	; use EX mode if allocated
70$:	$ENQW_S	LKMODE=R0,-		; convert the device lock down
		LKSB=(R6),-		; writing possibly modified value block
		EFN=S^#EXE$C_SYSEFN,-
FLAGS=#LCK$M_CONVERT!LCK$M_CVTSYS!LCK$M_VALBLK!LCK$M_SYNCSTS!LCK$M_NOQUOTA
; Sorry about the tacky format above, but the assembler won't parse
; macro args broken across lines.
	BLBC	R0,LOCKERR		; bug check if error
	BLBC	(R6),LOCKERR
;
; Call routine to deallocate the device when appropriate
;
80$:	BSBW	IOC$DALLOC_DMT		; complete the deallocation now

90$:	BSBW	SCH$IOUNLOCK		; release the I/O database mutex
	SETIPL	#0			; and drop IPL
	ADDL	#24,SP			; clean the stack
	POPR	#^M<R3,R7>		; restore R3 & R7
	RSB

	.DISABLE LSB

	.SBTTL	DO_IO - COMMON I/O ROUTINE
;++
; DO_IO
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine is an envelope procedure for all I/O done by this
;	module.  Use a system event flag for the I/O.  Since $QIOW now
;	properly waits for the combination of the event flag and IOSB
;	to be set, no special synchronization is needed here.
;
; INPUT:
;
;	CHAN(AP) = channel number to use for the I/O
;	FUNC(AP) = I/O function code
;
; OUTPUT:
;
;	NONE.
;
; ROUTINE VALUE:
;
;	R0	= some system status code
;--

;
; Useful symbols
;

CHAN = 4				; offset to channel number
FUNC = 8				; offset to I/O function code


DO_IO:	.WORD	^M<R2>			; common I/O routine
	MOVAQ	-(SP),R2		; reserve IOSB, address to R2
	$QIOW_S	EFN=S^#EXE$C_SYSEFN,-	; use system event flag
		CHAN=CHAN(AP),-		; use channel supplied by caller
		FUNC=FUNC(AP),-		; use function code supplied by caller
		IOSB=(R2)		; use local IOSB
	BLBC	R0,10$			; branch if error
	MOVZWL	(R2),R0			; set the return status in R0
10$:	RET				; return

	.SBTTL	DELETE_RUJ - DELETE RECOVERY UNIT JOURNAL
;++
; DELETE_RUJ
;
; FUNCTIONAL DESCRIPTION:
;
;	Delete the recovery unit journal on this volume.
;	Failure to do so will leave the journal file open
;	and the device marked for dismount.  This routine
;	must be called after the dismount $QIO has been
;	sent to the ACP.
;
; INPUT:
;
;	R4 = address of device name descriptor
;	R5 = device UCB address
;
; OUTPUT:
;
;	NONE.	(Contents of R0 and R1 are unpredictable)
;
; ROUTINE VALUE:
;
;	NONE.
;--

DELETE_RUJ:					; delete recovery unit journal
	BBS	#DEV$V_SQD,-			; only disks have RUJ's
		UCB$L_DEVCHAR(R5),20$		;
;
; Assign a channel to the RUJ.  If the service fails,
; exit immediately, as it means that no RUJ is active.
;
	PUSHR	#^M<R0,R2>			; save R2 and make local storage
	MOVL	SP,R2				; save SP
	$ASSJNL_S CHAN   = (R2),-		; channel to journal
		  JNLTYP = #DT$_RUJNL,-		; journal type
		  DEVNAM = (R4)			; device name descriptor
	BLBC	R0,10$				; branch if error
;
; Delete the journal.  The channel to the journal is
; deassigned in the process.
;
	$DELJNL_S CHAN  = (R2)			; delete the journal
	BLBS	R0, 10$				; if success then deljnl
						;  deassigned the channel for us
	$DEASJNL_S CHAN	= (R2)			; deassign the journal channel
10$:	POPR	#^M<R0,R2>			; restore stack
20$:	RSB					; return


	.END
