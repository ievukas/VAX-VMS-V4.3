MODULE RPG$PRINT( %TITLE 'Support output to RPG PRINTER files'
		IDENT = '1-003'			! file RPGPRINT.B32 EDIT:LPT1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:	RPGII SUPPORT
!
! ABSTRACT:
!
!	This module contains the RTL routines to handle output to RPG
! 	PRINTER files for VAX-11 RPGII.
!
! ENVIRONMENT:	VAX/VMS user mode
!
! AUTHOR: Debess Grabazs, CREATION DATE: 20-December-1982
!
! MODIFIED BY:
!
! 1-001 - Original version. DG 20-DEC-82
! 1-002 - Added code review comments - most notable code change is the different
!	looping techniques for first page forms positioning. DG 26-MAY-83
! 1-003 - 1. Add support for overprinting lines. DJB 27-Jun-1983
!         2. Only turn on overflow indicator if space or skip after is passed
!	  the overflow line. LPT 5-Jul-1983
!
!--
!<BLF/PAGE>

%SBTTL 'Declarations'
!+
! PROLOGUE FILE:
!-

REQUIRE 'RTLIN:RPGPROLOG';			! Switches, PSECTs, macros,
						!  linkages and LIBRARYs

!+
! LINKAGES
!	NONE
!-

!+
! TABLE OF CONTENTS:
!-

FORWARD ROUTINE
	RPG$PRINT,
	RPG$TERM_PRINT;

!+
! INCLUDE FILES
!	NONE
!-

!+
! MACROS
!-

MACRO
	PREFIX	= 0,0,8,0%,			! Record header block fields
	POSTFIX	= 0,8,8,0%;

!+
! EQUATED SYMBOLS
!	NONE
!-

!+
! EXTERNAL REFERENCES
!-

EXTERNAL ROUTINE
	LIB$GET_COMMAND,			! Get line from SYS$COMMAND
	STR$UPCASE;				! Convert string to uppercase

EXTERNAL LITERAL
	RPG$_EXTINDOFF;				! File not open error


%SBTTL 'RPG$PRINT - Support output to RPG PRINTER files'
GLOBAL ROUTINE RPG$PRINT(
			RAB:	REF $RAB_DECL	! RAB of file to be printed
			) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine supports output to RPG PRINTER files.  It is called by
!	the compiled code once for each write to a PRINTER file.
!
!	The main function of this routine is to fill in the two-byte 
!	fixed-length control area which is associated with each record
!	and to write the print record to the file.  This control area 
!	contains the spacing controls for a print record.  If spacing 
!	and skipping are both specified for the same line, they are
!	performed in the following sequence:
!		o Skip before
!		o Space before
!		o Print the line
!		o Skip after
!		o Space after.
!	The secondary function of this routine is to detect page
!	overflow.  This occurs only the first time one of the following
!	conditions occurs on the current page:
!		o A line is printed on the overflow line
!		o A line is printed past the overflow line
!		o The overflow line is passed during a space operation
!		o The overflow line is passed during a skip operation
!		  (to a line on the current page).
!	A special funtion of this routine is to allow "first page" 
!	forms positioning.  If both RPG$V_CTX_1PFORMS and RPG$V_CTX_FIRST
!	are set on, this routine will do the following:
!		o PUT the record
!		o If RMS returns a failure status, return
!		o Issue a message to SYS$COMMAND to ask the user whether
!		  forms are postioned correctly
!		o Accept "continue" or "retry" as a response
!		o If the user responds with "retry", go back to step 1
!		o If the user responds with "continue", clear
!		  RPG$V_CTX_FIRST and return.
!
! CALLING SEQUENCE:
!	
!	return_status.wlc.v = RPG$PRINT (rab.rr.r)
!
! FORMAL PARAMETERS:
!
!	rab			address of the RAB of the file to be
!				printed.
!
! IMPLICIT INPUTS:
!
!	The implicit imputs for this procedure are contained in the file
!	context block.  This block is located at a negative offset to the
!	RAB.  They are defined in RPGDEF.REQ:
!
!	RPG$W_CTX_SPACEB	number of lines to space before printing.
!
!	RPG$W_CTX_SPACEA	number of lines to space after printing.
!
!	RPG$W_CTX_SKIPB		line number to skip to before printing.
!
!	RPG$W_CTX_SKIPA		line number to skip to after printing.
!
!	RPG$W_CTX_PFLAGS	flags for print control:
!
!	  RPG$V_CTX_FIRST	TRUE before first write to the file to ensure
!				that values get initialized and that the "first
!				page" forms positioning takes place, if
!				requested, on the first write.
!
!	  RPG$V_CTX_1PFORMS	TRUE when "first page" forms positioning has
!				been requested.
!
!	  RPG$V_CTX_OVLINE	TRUE when this is an overflow line.
!
!	RPG$W_CTX_LINE		specifies the line number at which the device is
!				positioned within the current page body.  
!
!	RPG$W_CTX_FL		specifies the number of lines in the page body;
!				i.e., it specifies the number of lines on the
!				logical page that can be written.
!
!	RPG$W_CTX_OL		specifies the line number of overflow line.
!
!	RPG$A_CTX_OVIND		specifies the address of the overflow indicator
!				for this file.
!
!	RAB$L_RHB		is the address of the two byte control area 
!				to contain the print file information.  The
!				first byte is the "prefix" area, and the second
!				byte is the "postfix" area, specifying the 
!				number of lines to advance before and after the
!				record, respectively. 
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	RMS status returned by the PUT operation or RPG$_EXTINDOFF.
!
! SIDE EFFECTS:
!
!	A PUT to the linage file is performed.
!
!--    

    BEGIN

    LITERAL
	SET_ON = 1,				! Context bit is set on if it equals one
	SET_OFF = 0,				! Context bit is set off if it equals zero
	SET_OFF_OVERFLOW = %X'FFFEFEFE',	! Overflow indicator is set off if the low bit
						!  in the byte pointed to by RPG$A_CTX_OVIND and
						!  the low bit in each of the following two bytes
						!  is cleared
	SET_ON_OVERFLOW =  %X'00010101';	! Overflow indicator is set on if the low bit
						!  in the byte pointed to by RPG$A_CTX_OVIND and
						!  the low bit in each of the following two bytes
						!  is set (note this mask is the NOT of SET_OFF_OVERFLOW)

    LOCAL
	ADV_LINES,				! Number of lines to advance
	LINE_FLAG: WORD,			! Flag to ensure print page
						!  overflow occurs only once
						!  per page
	RET_STATUS,				! Return status
        RHB : REF BLOCK[,BYTE];			! Record header block
 
    BIND
	FCB = RAB : REF BLOCK [,BYTE];		! File context block

    BUILTIN
	TESTBITSC;

    !
    ! RPG$PRINT should not cause access violations.  Since RPG$PRINT is called
    ! before the associated $PUT, the RAB may be invalid.  Validate the RAB
    ! by checking that RAB$W_ISI is non-zero.  
    !
    IF .RAB[RAB$W_ISI] EQL 0
    THEN
        RETURN RPG$_EXTINDOFF;
 
    !
    ! Initialization
    !
    LINE_FLAG = .FCB[RPG$W_CTX_LINE];					! Set overflow flag
    RHB = .RAB[RAB$L_RHB];						! Point to control area 
    RHB[PREFIX] = 0;							! Clear control area
    RHB[POSTFIX] = 0;

    !
    ! Process skipping and spacing before the print
    !
    IF .FCB[RPG$W_CTX_SKIPB] GTR 0
    THEN
	BEGIN			! Skip before
	!
	! SKIP BEFORE indicated
	!
	ADV_LINES = .FCB[RPG$W_CTX_SKIPB] - .FCB[RPG$W_CTX_LINE];	! Number of lines to advance
	IF .ADV_LINES NEQ 0						! Make sure SKIP TO line 
									!  is not current line
	THEN
	    BEGIN		! New line

	    FCB[RPG$W_CTX_LINE] = .FCB[RPG$W_CTX_SKIPB];		! Update current line
	    IF .ADV_LINES LSS 0
	    THEN
	    	BEGIN
	    	!
	    	! SKIP BEFORE will cause advance to a new page
	    	!
	    	RHB[PREFIX] = .FCB[RPG$W_CTX_FL] + .ADV_LINES;		! Set prefix in control area
		LINE_FLAG = 0;						! Flag reset for new page
		FCB[RPG$V_CTX_OVPEND] = SET_OFF;			! 1-003 Flag reset for new page
	    	IF .FCB[RPG$V_CTX_OVLINE] NEQ SET_ON
	    	THEN
		    .FCB[RPG$A_CTX_OVIND] = ..FCB[RPG$A_CTX_OVIND] AND SET_OFF_OVERFLOW;
									! Set off the overflow indicator

	    	END
	    ELSE
	    	!
	    	! SKIP TO line will be on the same page
	    	!
	        RHB[PREFIX] = .ADV_LINES;				! Set prefix in control area
									! Set on the overflow indicator

	    END;		! New line

	END;			! Skip before

    IF .FCB[RPG$W_CTX_SPACEB] GTR 0
    THEN
	BEGIN
	!
	! SPACE BEFORE indicated
	!
	FCB[RPG$W_CTX_LINE] = .FCB[RPG$W_CTX_LINE] + .FCB[RPG$W_CTX_SPACEB];
									! Update current line
    	RHB[PREFIX] = .RHB[PREFIX] + .FCB[RPG$W_CTX_SPACEB];		! Adjust prefix in control area

	END								! 1-003
    ELSE								! 1-003
	!								! 1-003
	! If the skip caused no advance, then we are going to print on	! 1-003
	! the same line as the previous PUT, so we need the specify CR	! 1-003
	! in the prefix area to get overprinting.			! 1-003
	!								! 1-003
	IF .RHB[PREFIX] EQL 0						! 1-003
	THEN								! 1-003
	    RHB[PREFIX] = %X'8D';					! 1-003

    !
    ! Check for line being printed on or past the overflow line
    !
    IF .FCB[RPG$W_CTX_LINE] GEQ .FCB[RPG$W_CTX_OL]
    THEN
	IF (.LINE_FLAG LSS .RAB[RPG$W_CTX_OL]) OR 			! First time on this page?
		(.FCB[RPG$V_CTX_OVPEND] EQL SET_ON)			! 1-003 Was an overflow pending?
	THEN
	    BEGIN

	    .FCB[RPG$A_CTX_OVIND] = ..FCB[RPG$A_CTX_OVIND] OR SET_ON_OVERFLOW;
									! Yes, set on the overflow indicator
    	    FCB[RPG$V_CTX_OVPEND] = SET_OFF;				! 1-003

	    END;

    !
    ! Check for current line being on new page
    !
    IF .FCB[RPG$W_CTX_LINE] GTR .FCB[RPG$W_CTX_FL]
    THEN
	FCB[RPG$W_CTX_LINE] = .FCB[RPG$W_CTX_LINE] - .FCB[RPG$W_CTX_FL];! Adjust current line to reflect
									!  new page

    !
    ! Process skipping and spacing after the print
    !
    IF .FCB[RPG$W_CTX_SKIPA] GTR 0
    THEN
	BEGIN			! Skip after
	!
	! SKIP AFTER indicated
	!
	ADV_LINES = .FCB[RPG$W_CTX_SKIPA] - .FCB[RPG$W_CTX_LINE];	! Number of lines to advance
	IF .ADV_LINES NEQ 0						! Make sure SKIP TO line
									!  is not current line
	THEN
	    BEGIN		! New line
	    FCB[RPG$W_CTX_LINE] = .FCB[RPG$W_CTX_SKIPA];		! Update current line
	    IF .ADV_LINES LSS 0
	    THEN
	    	BEGIN
	    	!
	    	! SKIP AFTER will cause advance to a new page
	    	!
	    	RHB[POSTFIX] = .FCB[RPG$W_CTX_FL] + .ADV_LINES;		! Set postfix in control area
		LINE_FLAG = 0;						! Reset flag for new page
	    	IF .FCB[RPG$V_CTX_OVLINE] NEQ SET_ON
	    	THEN
		    .FCB[RPG$A_CTX_OVIND] = ..FCB[RPG$A_CTX_OVIND] AND SET_OFF_OVERFLOW;
									! Set off the overflow indicator

	    	END
	    ELSE
	    	!
	    	! SKIP AFTER line will be on the same page
	    	!
	    	RHB[POSTFIX] = .ADV_LINES;				! Set postfix in control area

	    END;		! New line

	END;			! Skip after

    IF .FCB[RPG$W_CTX_SPACEA] GTR 0
    THEN
	BEGIN
	!
	! SPACE AFTER indicated
	!
	FCB[RPG$W_CTX_LINE] = .FCB[RPG$W_CTX_LINE] + .FCB[RPG$W_CTX_SPACEA];
									! Update current line
 	RHB[POSTFIX] = .RHB[POSTFIX] + .FCB[RPG$W_CTX_SPACEA];		! Adjust postfix in control area

	END;

    !
    ! Check for overflow line being passed by space or skip 
    !
    IF (.FCB[RPG$W_CTX_LINE] GTR .FCB[RPG$W_CTX_OL]) AND		! 1-003 OL passed during skip?
	(.LINE_FLAG LSS .FCB[RPG$W_CTX_OL])				! First time on this page?
    THEN
	.FCB[RPG$A_CTX_OVIND] = ..FCB[RPG$A_CTX_OVIND] OR SET_ON_OVERFLOW
									! Yes, set on the overflow indicator
    ELSE								! 1-003
	IF (.FCB[RPG$W_CTX_LINE] EQL .FCB[RPG$W_CTX_OL]) AND		! 1-003 OL reached during space or skip after? 
	   (.LINE_FLAG LSS .FCB[RPG$W_CTX_OL])				! 1-003 First time on this page?
	THEN								! 1-003
	    FCB[RPG$V_CTX_OVPEND] = SET_ON;				! 1-003 Flag that overflow is pending

    ! 
    ! Check for current line being on a new page
    !
    IF .FCB[RPG$W_CTX_LINE] GTR .FCB[RPG$W_CTX_FL]	
    THEN
	FCB[RPG$W_CTX_LINE] = .FCB[RPG$W_CTX_LINE] - .FCB[RPG$W_CTX_FL];! Adjust current line to reflect
									!  new page

    !
    ! It is necessary to special-case the first WRITE on the first logical
    ! page after a file has been OPENed so that 'first page' forms
    ! positioning can be done.
    !
    IF TESTBITSC(FCB[RPG$V_CTX_FIRST])
    THEN
	IF .FCB[RPG$V_CTX_1PFORMS]
 	THEN
	    BEGIN		! First page forms positioning

	    LOCAL
		GET_STATUS,			! Return status from LIB$GET_COMMAND
		PROMPT_DESC: BLOCK[8,BYTE],	! Local descriptor for prompt
		RESP_DESC: BLOCK[8,BYTE],	! Local descriptor for response
		RESP_BUF: VECTOR[10,BYTE];	! Buffer for response

	    LITERAL
	  	TRUE = 1,
		MIN_RESP_LEN = %CHARCOUNT('xxx');
						! Minimum acceptable length of
						!  response to LIB$GET_COMMAND

	    LABEL
		OUTER_LOOP;

	    BIND
		!
		! NOTE - PROMPT must come directly before RET for the prompt
		!	 string length to be calculated correctly
		!
		PROMPT = UPLIT (' Is forms positioning correct? Yes, type CONTINUE, No, type RETRY: '),
		RET = UPLIT ('RET'),
		CON = UPLIT ('CON');

	    !
	    ! 'First page' forms positioning indicated
	    !
	    PROMPT_DESC[DSC$W_LENGTH] = CH$DIFF (RET, PROMPT);
	    PROMPT_DESC[DSC$B_CLASS] = DSC$K_CLASS_S;
	    PROMPT_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    PROMPT_DESC[DSC$A_POINTER] = PROMPT;
	    RESP_DESC[DSC$W_LENGTH] = %ALLOCATION (RESP_BUF);
    	    RESP_DESC[DSC$B_CLASS] = DSC$K_CLASS_S;
	    RESP_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    RESP_DESC[DSC$A_POINTER] = RESP_BUF;

OUTER_LOOP: BEGIN

	    WHILE TRUE DO
            BEGIN		! Retry loop
		!
		! PUT the record
		!
		RET_STATUS = $PUT(RAB = .RAB);			! Put out the record
	    	IF NOT (.RET_STATUS)
		THEN
		    BEGIN
		    !
		    ! Error on PUT, return
		    !
		    FCB[RPG$V_CTX_FIRST] = SET_ON;		! Reset FIRST bit
		    RETURN .RET_STATUS;

		    END;
		!
		! Issue a message to SYS$COMMAND to ask the user 
		! whether forms are positioned correctly.
		! If response is neither RET(RY) or CON(TINUE),
		! prompt again.
		! If response is RETRY, go thru outer loop again.
		!
	    	WHILE TRUE DO
		    BEGIN

		    DO						! Prompt for response until user types
								!  RET(RY) or CON(TINUE)

	    	        GET_STATUS = LIB$GET_COMMAND(RESP_DESC, PROMPT_DESC)
		    UNTIL .GET_STATUS;
	   	    STR$UPCASE (RESP_DESC, RESP_DESC);
		    IF CH$EQL (MIN_RESP_LEN, RESP_BUF, MIN_RESP_LEN, CON)
		    THEN
			LEAVE OUTER_LOOP;
		    IF CH$EQL (MIN_RESP_LEN, RESP_BUF, MIN_RESP_LEN, RET)
		    THEN
			EXITLOOP;

		    END;

		END;	    	! Retry loop

	    END;		! Outer loop
	    RETURN .RET_STATUS;					! Return status from PUT

	    END;		! First page forms positioning

    !
    ! When not special-casing, will get here.
    !
    RETURN $PUT(RAB = .RAB);					! PUT out the record and
								!  return the RMS status

    END;

%SBTTL 'RPG$TERM_PRINT - Finish logical page'
GLOBAL ROUTINE RPG$TERM_PRINT(
			RAB:	REF $RAB_DECL	! RAB of file to be printed
			)=

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to advance the number of lines needed to
!	finish out the logical page before the actual CLOSE is done.
!	
!
! CALLING SEQUENCE:
!
!	return_status.wlc.v = RPG$TERM_PRINT (rab.rr.r)
!
! FORMAL PARAMETERS:
!
!	rab			address of the RAB of the file to be
!				printed.
!
! IMPLICIT INPUTS:
!
!	RPG$W_CTX_FL		specifies the number of lines in the page body;
!				i.e., it specifies the number of lines on the
!				logical page that can be written.
!
!	RPG$W_CTX_LINE		specifies the line number at which the device is
!				positioned within the current page body.  
!
!
! IMPLICIT OUTPUTS:
!
!	A PUT to the linage file is performed
!
! ROUTINE VALUE:
!
!	RMS status returned by the PUT operation or SS$_NORMAL if
!	nothing needs to be done by this routine.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LITERAL
	SET_ON = 1;

    LOCAL
	RHB : REF BLOCK [,BYTE];		! Record header block

    BIND
	FCB = RAB : REF BLOCK [,BYTE];		! File context block

    !
    !   RPG$TERM_PRINT should not cause access violations.  Since it WILL
    !   be called before the associated SYS$CLOSE, the RAB may be invalid.
    !   Validate the RAB by checking that RAB$W_ISI is non-zero.
    !
    IF .RAB[RAB$W_ISI] EQL 0
    THEN 
	RETURN RPG$_EXTINDOFF;

    !
    !   If no WRITE has ever been done for this file, then no adjustment
    !   need be done at CLOSE time.  Note that the flag bit is checked
    !   but not cleared;  if it is set, we will not be doing a WRITE either.
    !
    IF .FCB[RPG$V_CTX_FIRST] EQL SET_ON
    THEN
	RETURN SS$_NORMAL;

    !
    !   Figure out how many lines left to fill out the page
    !
    RHB = .RAB[RAB$L_RHB];
    RHB[PREFIX] = .FCB[RPG$W_CTX_FL] - .FCB[RPG$W_CTX_LINE] + 1;

    !
    !  Make sure that there is something to advance.
    !
    IF .RHB[PREFIX] EQL 0
    THEN
	RETURN SS$_NORMAL;

    !
    !  The actual WRITE is done by PUTing a record of 0 length with appropriate
    !  advance in the PRN control fields.
    !
    RAB[RAB$W_RSZ] = 0;
    RHB[POSTFIX] = 0;

    RETURN $PUT(RAB = .RAB);

    END;

END ELUDOM
