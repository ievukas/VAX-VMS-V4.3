	.TITLE	GETCMD
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;
;++
;
; Facility:
;
;	SUMSLP utility
;
; Environment:
;
;	User mode
;
; Author:
;
;	R. Newland	18-Apr-1979
;
; Modified By:
;
;	V03-003	MTR0001		Mike Rhodes		27-Jul-1983
;		Correct processing of the /LISTING and /OUTPUT qualifiers.
;
;	V03-002	BLS0175		Benn Schreiber		16-JUN-1982
;		Use new CLI interface routines
;
;	V03-001	BLS0158		Benn Schreiber		16-Mar-1982
;		Remove $CLIDEFQUALEDIT, get values globally.
;--

	.SBTTL	DECLARATIONS
;
;
	DEFSSLGEN			; Define SUMSLP general values
	$DSCDEF				; Descriptor offsets
	$FABDEF				; FAB block definitions
	DEFSSLFLG			; SUMSLP flag definitions

	.SBTTL	DATA
	.PSECT	SUM$RO_DATA, NOEXE, NOWRT, LONG

INPUT_NAME:
	.ASCIC	/INPUT/
OUTPUT_NAME:
	.ASCIC	/OUTPUT/
LISTING_NAME:
	.ASCIC	/LISTING/
UPDATE_NAME:
	.ASCIC	/UPDATE/
HEADER_NAME:
	.ASCIC	/HEADER/
LINE_NAME:
	.ASCIC	/$LINE/
;
;
;

	.SBTTL	GETCMD
;
; Subroutine to get command line information from the CLI and
; set up control variables appropriately
;
; Calling sequence:
;
;	BSB	SUM$GETCMD
;
; Inputs:
;
;	None
;
; Implicit inputs
;
;	The CLI data base
;
; Outputs:
;
;	xxx
;
; Implicit outputs
;
;	None
;
; Side effects:
;
;	None
;
;--
;
	.PSECT	SUM$CODE, EXE, NOWRT
;
SUM$GETCMD::
	PUSHR	#^M<R2,R3>
	CLRQ	-(SP)				;Create a descriptor
	MOVL	SP,R3
	MOVB	#DSC$K_CLASS_D,DSC$B_CLASS(R3)
;
; Command line not printed anywhere, so this code not used
;
;	MOVAB	W^SUM$GQ_CMDLINE,R2		;Initialize output descriptor
;	MOVB	#DSC$K_CLASS_D,DSC$B_CLASS(R2)	;as dynamic
;	MOVAB	LINE_NAME,R0			;Item to get
;	BSBW	SUM_VALUE			;Get command line
;
; end of unused code
;
	MOVAB	W^INPUT_NAME,R0			;Get input file spec
	MOVL	R3,R2
	BSBW	SUM_VALUE
	CALLS	#0,W^INPUT_FILE

	MOVAB	W^OUTPUT_NAME,R0		;Has an output file been
	BSBW	SUM_PRESENT			;requested?  By default one is
	CMPL	R0, #CLI$_NEGATED		;produced.  If not, then continue
	BEQL	10$				;parsing the command line.
	BISB2	#SSL_M_OUTPUT, SUM$GL_FLAGS	;Indicate output file requested.
	MOVAB	W^OUTPUT_NAME,R0		;Get the file spec (if any) or
	BSBW	SUM_VALUE			;use the defaults from the NAM.
	CALLS	#0,W^OUTPUT_FILE		;Save the spec for later.

10$:	MOVAB	W^LISTING_NAME,R0		;Has a listing been requested?
	BSBW	SUM_PRESENT			;If not, then continue parsing
	BLBC	R0,20$				;the command line.
	BISB2	#SSL_M_LIST,SUM$GL_FLAGS	;Indicate listing file requested.
	MOVAB	W^LISTING_NAME,R0		;Get the file spec (if any) or
	BSBW	SUM_VALUE			;use the defaults from the NAM.
	CALLS	#0,W^LIST_FILE			;Save the spec for later.

20$:	MOVAB	W^HEADER_NAME,R0		;Test if /HEADER
	BSBW	SUM_PRESENT
	BLBC	R0,40$
	BSBW	HEAD_QUAL			; process /HEADER

40$:	MOVAB	W^UPDATE_NAME,R0		;Test if /UPDATE
	BSBW	SUM_PRESENT
	BLBC	R0,60$
	PUSHL	R3				; Pass dynamic descriptor down
	CALLS	#1,W^UPDA_QUAL			; process /UPDATE
;
; Free dynamic string that we allocated
;
60$:	PUSHL	R3				;Stack descriptor address
	CALLS	#1,G^STR$FREE1_DX
	ADDL2	#8,SP				;Clear descriptor from stack
	POPR	#^M<R2,R3>
	RSB

;
; Test if qualifier present
;
; Inputs:
;
;	R0	Pointer to ASCIC string name of entity
;
; Outputs:
;
;	R0	Return status from CLI$PRESENT
;
SUM_PRESENT:
	PUSHAB	1(R0)			;Create descriptor on the stack
	MOVZBL	(R0),-(SP)		;...
	PUSHAB	(SP)			;Stack descriptor address
	CALLS	#1,G^CLI$PRESENT	;Call CLI routine to test presence
	ADDL2	#8,SP			;Clear descriptor from stack
	RSB				;Return with status in R0
;
; Get qualifier value
;
; Inputs:
;
;	R0	Pointer to ASCIC string name of entity
;	R2	Pointer to output descriptor
;
; Outputs:
;
;	R0	Return status from CLI$GET_VALUE
;	descriptor has value
;
SUM_VALUE:
	PUSHAB	1(R0)			;Create descriptor on the stack
	MOVZBL	(R0),-(SP)
	PUSHL	R2			;Stack address of output descriptor
	PUSHAB	4(SP)			; and address of name descriptor
	CALLS	#2,G^CLI$GET_VALUE	;Call CLI to get value for qualifier
	ADDL2	#8,SP			;Clear stack
	RSB

	.SBTTL	PARSE ACTIONS ROUTINES
;
; These routines are called when a parameter is present to extract
; the file name descriptor and fill the appropriate FAB block.
;
;
INPUT_FILE:
	.WORD	^M<R2,R3,R4,R5>
	MOVAB	W^SUM$AX_INPUTFAB,R2	; Get address of input FAB
	BRB	FILE
;
OUTPUT_FILE:
	.WORD	^M<R2,R3,R4,R5>
	MOVAB	W^SUM$AX_OUTPUFAB,R2	; Get address of output FAB
	BRB	FILE
;
LIST_FILE:
	.WORD	^M<R2,R3,R4,R5>
	MOVAB	W^SUM$AX_LISTFAB,R2	; Get address of list FAB
;
FILE:
	MOVZWL	DSC$W_LENGTH(R3),-(SP)	; Store length of block to allocate
	MOVB	(SP),FAB$B_FNS(R2)	; Store length of spec in FAB
	PUSHAB	FAB$L_FNA(R2)		; Stack address to get allocated block
	PUSHAB	4(SP)			; Stack address of length of block
	CALLS	#2,G^LIB$GET_VM		; Allocate memory for it
	MOVC3	(SP),@DSC$A_POINTER(R3),@FAB$L_FNA(R2) ; Copy spec in
	RET

	.SBTTL	QUALIFIER ACTION ROUTINES
;
; This routine is called if the /HEADER qualifier is seen
;
;
HEAD_QUAL:
	BISB2	#SSL_M_HEADER,SUM$GL_FLAGS
	MOVB	#FAB$C_VFC, -		; Set record format to variable
		W^SUM$AX_OUTPUFAB+FAB$B_RFM ; with fixed control record
	MOVB	#SSL$RHBSZE, -		; Set output file FAB block to
		W^SUM$AX_OUTPUFAB+FAB$B_FSZ ; write record header buffer
	MOVAB	W^SUM$AX_RHB, -		; and RAB block with record header
		W^SUM$AX_OUTPURAB+RAB$L_RHB ; buffer address
	RSB
;
;
; This routine is called if the /UPDATE qualifier is called
;
;
; Inputs:
;
;	4(ap)	Address of scratch dynamic string descriptor
;
UPDA_QUAL:
	.WORD	0
	MOVAB	W^UPDATE_NAME,R0		;Get ASCIC name address
	PUSHAB	1(R0)				;Create descriptor
	MOVZBL	(R0),-(SP)
	MOVL	SP,R1				;Save descriptor address
	PUSHL	4(AP)				;Pass a dynamic descriptor down
	PUSHAB	W^SUM$GL_UPDATES		;Stack address of listhead
	PUSHL	R1				;Stack descriptor address
	PUSHAB	G^CLI$GET_VALUE			;Address of routine to get value
	CALLS	#4,G^SUM$UPDATE_QUAL		;Process the list
	RET

	.END
