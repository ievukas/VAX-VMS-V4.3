%TITLE 'Make changes to flag table'
MODULE oft (	IDENT = 'V04-000'
		%BLISS32 [, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					     NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Handles all .FLAGS and .NO FLAGS commands
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: May, 1978
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	012	REM00012	Ray Marshall	17-November-1983
!		Modified the external definition of ATABLE to use the new
!		  macro ATABLE_DEFINITION defined in ATCODE.REQ.
!
!	011	KFA00011	Ken Alden	24-Jun-1983
!		Fixed bug that kept existing flags from being 'NATE'd.
!
!	010	KFA00010	Ken Alden	21-Mar-1983
!		No more Passthrough flag.
!
!	009	KFA00009	Ken Alden	15-Mar-1983
!		For DSRPLUS: added functionality for passthrough flag.
!
!	008	KAD00008	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL 				! Error messages
    RNFFAU;

EXTERNAL
    atable : atable_definition,	! Action table.  Used to identify what type of
				! action is to be taken on encountering any
				! given character.
    FLGT : FLAG_TABLE,
    GCA : GCA_DEFINITION,
    SCA : SCA_DEFINITION;

EXTERNAL
    FLTSO : VECTOR;

BIND
    SEARCH_ORDER = FLTSO : VECTOR;

EXTERNAL ROUTINE
    ERMS,
    FNDFLG,
    GETONE,
    NATE;

GLOBAL ROUTINE oft (handler_code, which_flag) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	See the ABSTRACT, above.
!
! FORMAL PARAMETERS:
!
!	HANDLER_CODE indicates which command is to be processed.
!	WHICH_FLAG indicates to which flag the command applies.
!
! IMPLICIT INPUTS:
!
!	This routine relies on the fact that the HANDLER_CODEs
!	for .FLAG commands are all less than the HANDLER_CODEs
!	for .NO FLAG commands.
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:	None
!
!--

    BEGIN
    !Flag enabling and disabling can occur at two different, independent
    !levels.  These levels correspond to the
    !	1) .FLAGS ALL and .NO FLAGS ALL commands, and the
    !	2) .FLAG <flag name> and .NO FLAG <flag name> commands.
    !Associated with each flag is a TRUE/FALSE setting that indicates
    !whether or not it should be recognized.  And associated with each
    !flag is also a character that defines which input character is to
    !be recognized as representing that flag. Assume that you have some 
    !character 'X' that represents the UNDERLINE flag. 'X' will be recognized 
    !as a flag only if.
    !	1) The user as said .FLAGS ALL (which is the default)
    !	**AND**
    !	2) The user has issued a .FLAG UNDERLINE command.
    !Note that the user may issue these commands at any time, and one
    !command does not imply the other. For example, if he has said .NO FLAGS 
    !ALL, then 'X' will not be recognized as a flag, even if he says .FLAG 
    !UNDERLINE; if he says .FLAG UNDERLINE when .NO FLAGS ALL is in effect, 
    !RUNOFF simply remembers the fact that the UNDERLINE flag is enabled, and
    !makes it possible to recognize that flag after the user says .FLAGS ALL.
    !
    !The implementation of this is as follows:
    !Normally, each position in ATABLE tells what a particular character is.
    !If a character represents a flag the corresponding ATABLE entry notes
    !that fact.  Otherwise, the ATABLE entry says something else.
    !When the user says .NO FLAG UNDERLINE (above example) the ATABLE
    !entry corresponding to the character 'X' is changed to indicate
    !that 'X' is a normal character.  When he says .FLAG UNDERLINE,
    !the ATABLE entry is reset to indicate that 'X' represents a flag.
    !If the user says .NO FLAGS ALL, then again, the ATABLE entry (and
    !those for all other applicable flags) is set to inhibit flag recognition.
    !However, there is another difference between .NO FLAG UNDERLINE
    !and .NO FLAGS ALL.  The FLAG TABLE indicates the actual setting
    !of each flag.  The .FLAGS ALL and .NO FLAGS ALL commands do not change
    !those settings; they change ATABLE only.
    !The .FLAG UNDERLINE command may not only change ATABLE (if the user
    !said .FLAGS ALL) but the FLAG TABLE as well.

    SELECTONE .HANDLER_CODE OF
	SET

	[h_no_flags_all] :
	    BEGIN

	    INCR i FROM 0 TO .search_order [-1] - 1 DO
		BEGIN
		!Disable recognition of only those flags that
		!are marked as enabled.

		IF .flgt [.search_order [.i], flag_enabled]
		THEN 				!
		!Set ATABLE entry to 'normal' setting.
		    nate (.flgt [.search_order [.i], flag_character]);
		END;

	    !Remember that flags are not to be recognized.
	    sca_flags = false;
	    !Remember the last .FLAGS ALL/.NO FLAGS ALL command.
	    gca_flag_cmd = h_no_flags_all;
	    END;

	[H_FLAGS_ALL] :
	    BEGIN

	    INCR i FROM 0 TO .search_order [-1] - 1 DO
		BEGIN
		!Enable recognition of only those flags that are
		!marked as enabled.
		IF .flgt [.search_order [.i], flag_enabled]
		THEN
		!Mark corresponding ATABLE entry as representing a flag.
		    atable [.flgt [.search_order [.i], flag_character]] = a_flag;
		END;

	    !Remember that flags are to be recognized.
	    sca_flags = true;
	    !Remember last .FLAGS ALL/.NO FLAGS ALL command.
	    gca_flag_cmd = h_flags_all;
	    END;

	[OTHERWISE] :
	    BEGIN
	    IF .HANDLER_CODE LSS H_NO_FLAGS_ALL
%IF DSRPLUS %THEN
		!Special case for DSRPLUS: FLAG NOPERMUTE command's handler 
		!code is not in the same range as the others.
		OR
		.handler_code eql h_flags_nopermu
	
%FI
	    THEN
		BEGIN				!It's a .FLAGS type command

		LOCAL
		    hold_khar,
		    alternate_flag;	!This will = WHICH_FLAG unless we are
					!processing SUBINDEX, in which case it
					!will then point to the INDEX flag.
		IF .which_flag EQL sbx_flag
		    THEN alternate_flag = IND_FLAG
		    ELSE alternate_flag = .which_flag;
		!Get the new flag character, if any.
		hold_khar = getone (.which_flag, .alternate_flag);

		IF .hold_khar eql 0
		THEN
		!No new flag character.  Use present one.
		    hold_khar = .flgt [.which_flag, flag_character];

		!Check whether GETONE found a flag conflict. If so, complain 
		!and disallow the indexing command.
		IF .hold_khar LSS 0
		THEN
		    BEGIN
		    LOCAL
			temp;
		    temp = -.hold_khar;
		    erms (rnffau, temp, 1);	!'Flag already in use'
		    RETURN;
		    END;

		IF NOT
		    (.which_flag EQL com_flag
		    OR .which_flag EQL con_flag
		    OR .which_flag EQL efo_flag
		    OR .which_flag EQL sbx_flag)
		    AND	.sca_flags
		THEN
		    BEGIN
		    !Set corresponding ATABLE entry to indicate that the 
		    !old flag character is now just a normal character.
		    IF .flgt [.which_flag, flag_enabled] EQL true  !Flag was enabled.
   		    THEN
		    	nate (.flgt [.which_flag, flag_character]);
		    !
		    !Make ATABLE entry show the new character is a flag.
		    atable [.hold_khar] = a_flag;
		    END;

		flgt [.which_flag, flag_character] = .hold_khar;  !Save new flag character.
		flgt [.which_flag, flag_enabled] = true;	  !Flag is enabled.
		END
	    ELSE
		BEGIN				!It's a .NO FLAGS type command
		flgt [.which_flag, flag_enabled] = false;	!Flag is disabled.

		IF NOT
		    (.which_flag EQL com_flag
		    OR .which_flag EQL con_flag
		    OR .which_flag EQL efo_flag
		    OR .which_flag EQL sbx_flag)
		THEN
		    IF 				!Normal cases
			(fndflg (.flgt[.which_flag,flag_character]) eql flag_count+1)
			AND .sca_flags
		    THEN
		    !Set corresponding ATABLE entry to indicate it's a 'normal' character.
			nate (.flgt [.which_flag, flag_character])
		    ELSE
		    !Because this character represents another
		    !flag as well, leave ATABLE alone so that
		    !the other flag will be recognized.
			(0);
		END;

	    END;
	TES;
    END;					!End of OFT

END						!End of module
ELUDOM
