	.TITLE	SYSSNDJBC - SEND MESSAGE TO JOB CONTROLLER
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:
;	System services.
;
; ABSTRACT:
;	This module implements the Send to Job Controller ($SNDJBC) and the
;	Get Queue Information ($GETQUI) system services.
;
; AUTHOR: M. Jack, CREATION DATE: 29-Aug-1982
;
; MODIFIED BY:
;
;	V03-011	JAK0218		J A Krycka	10-Jul-1984
;		Update tables to support new $SNDJBC and $GETQUI item codes.
;
;	V03-010	JAK0203		J A Krycka	17-Apr-1984
;		Update tables to support new $SNDJBC item codes.
;
;	V03-009	TMK0001		Todd M. Katz	04-Apr-1984
;		Re-write the action routine TRANSLATE_OBJECT to:
;
;		1. Replace the recursive $TRNLOGs with $TRNLNMs.
;
;		2. Eliminate the code that removes tabs, blanks, and null 
;		   characters from names before attempting to translate them.
;		   Logical names should be handled in a systematic fashion 
;		   throughout the system, and nobody else fiddles with them in 
;		   such a fashion. However, after the recursive translations
;		   complete, at this time format the final translation according
;		   to the syntax expected for queue names. This involves 
;		   removing tabs, null characters, and spaces from the final
;		   translation, and then upcasing it. This upcasing is done by
;		   means of the DEC multi-national character upcasing table.
;
;		3. Eliminate the code that upcases names before their 
;		   translation because the $TRNLNMs will be done 
;		   case-insensitive.
;
;		4. Micro-optimize the action routine.
;
;	V03-008	ACG0354		Andrew C. Goldstein,	13-Sep-1983
;		Change delete protection check to use alternate access
;		rather than access-granted.
;
;	V03-007	MLJ0118		Martin L. Jack,	22-Aug-1983
;		Guard against overlong resultant filename.  Update tables and
;		limits for new $GETQUI and $SNDJBC items.
;
;	V03-006	MLJ0115		Martin L. Jack,	30-Jul-1983
;		Changes for job controller baselevel.
;
;	V03-005	MLJ0114		Martin L. Jack,	23-Jun-1983
;		Add support for $GETQUI and for new $SNDJBC items.
;
;	V03-004	MLJ0112		Martin L. Jack,	28-Apr-1983
;		Update tables and limits for new items corresponding to job
;		controller baselevel.
;
;	V03-003	CWH1002		CW Hobbs	24-Feb-1983
;		Send extended pid and owner fields to the job controller.
;
;	V03-002	MLJ0106		Martin L. Jack,	1-Mar-1983
;		Update tables and limits for new items corresponding to job
;		controller baselevel.
;
;	V03-001	MLJ0103		Martin L. Jack,	7-Jan-1983
;		Update tables and limits for new items corresponding to job
;		controller baselevel.
;
;--

	.SBTTL	DATA DEFINITIONS

;
; EXTERNAL SYMBOLS:
;

	$ACBDEF			; Define AST control block offsets
	$ACMDEF			; Define accounting manager offsets
	$ARMDEF			; Define access rights mask
	$ATRDEF			; Define ACP attribute codes
	$FABDEF			; Define RMS file attributes block offsets
	$FATDEF			; Define RMS file attribute area offsets
	$FIBDEF			; Define file information block offsets
	$IODEF			; Define I/O function codes
	$LNMDEF			; Define logical name system service symbols
	$MSGDEF			; Define mailbox message types
	$NAMDEF			; Define RMS name block offsets
	$PCBDEF			; Define process control block offsets
	$PHDDEF			; Define process header offsets
	$PSLDEF			; Define processor status longword offsets
	$QUIDEF			; Define $GETQUI function and item codes
	$SJCDEF			; Define $SNDJBC function and item codes
	$SSDEF			; Define system status codes

;
; LOCAL SYMBOLS:
;
; Extension to AST control block.  These definitions are also known to JOBCTL.
;

	$DEFINI	ACB
	.=ACB$L_KAST+4			; Position to end
$DEF	ACB_L_IMGCNT	.BLKL	1	; Image counter
$DEF	ACB_L_EFN	.BLKL	1	; Event flag number
$DEF	ACB_L_IOSB	.BLKL	1	; IOSB address
$DEF	ACB_L_STATUS	.BLKL	1	; Status for IOSB
$DEF	ACB_W_ITEMCOUNT	.BLKW	1	; Count of data items
$DEF	ACB_B_ITEMS	.BLKB	0	; Base of item descriptors
	$DEFEND	ACB

;
; Argument list offsets (based on AP).
;

EFN=		4			; Event flag number
FUNC=		8			; Function code
NULARG=		12			; Reserved argument
ITMLST=		16			; Address of item descriptor list
IOSB=		20			; Address of I/O status block
ASTADR=		24			; Address of AST routine
ASTPRM=		28			; AST parameter

;
; Data table offsets (based on R11).
;

MSG_CODE=	0			; Message function code
MAX_FUNC=	4			; Highest function code minus one
MAX_ITEM=	8			; Highest item code minus one
BOOL_ITEM=	12			; Pointer to boolean item table
OUTPUT_ITEM=	16			; Pointer to output item table
SPECIAL_TABLE=	20			; Pointer to special handling table

;
; Fixed work area offsets (above FP).
;

FILE_ID=	-4			; Pointer to file identification item
FLAGS=		-8			; Pointer to miscellaneous status flags
DELETE_FLAG=	0			; SJC$_DELETE_FILE seen

;
; Miscellaneous definitions.
;

FIXED_AREA=	ACM$Q_SYSTIME+8 + 22	; Size of fixed area of message


;
; LOCAL STORAGE:
;
; This table is indexed by item code (normalized to zero origin).  It
; identifies items classified as Boolean.
;

	.PSECT	Y$EXEPAGED
SNDJBC_BOOL_ITEM:
	.LONG	^B10011001111010101010000110011000
	.LONG	^B10110111000000000101110100111011
	.LONG	^B11101011011101010001101111011111
	.LONG	^B11000000001110110101110111111100
	.LONG	^B00001010100111110011111100001001
	.LONG	^B00000000000000000000000000011110
	.LONG	^B00000000000000000000000000000000
	.LONG	^B00000000000000000000000000000000
GETQUI_BOOL_ITEM:
	.LONG	^B00000000000000000000000000000000
	.LONG	^B00000000000000000000000000000000
	.LONG	^B00000000001100000000000000000000
	.LONG	^B00000000000000000000000000000000
	.LONG	^B00000000000000000000000000000000
	.LONG	^B00000000000000000000000000000000
	.LONG	^B00000000000000000000000000000000
	.LONG	^B00000000000000000000000000000000

;
; This table is indexed by item code (normalized to zero origin).  It
; identifies items classified as output.
;

SNDJBC_OUTPUT_ITEM:
	.LONG	^B01000000000000000000010000000000
	.LONG	^B00000000000000000000000000000000
	.LONG	^B00000000100000000000000000000000
	.LONG	^B00000000000000000000000000000000
	.LONG	^B00000000000000000000000000000000
	.LONG	^B00000000000000000000011000000000
	.LONG	^B00000000000000000000000000000000
	.LONG	^B00000000000000000000000000000000
GETQUI_OUTPUT_ITEM:
	.LONG	^B11111111111111111111111111111111
	.LONG	^B11111111111111111111111111111111
	.LONG	^B00111111000011111100011111111111
	.LONG	^B00000000000000000000000000000000
	.LONG	^B00000000000000000000000000000000
	.LONG	^B00000000000000000000000000000000
	.LONG	^B00000000000000000000000000000000
	.LONG	^B00000000000000000000000000000000

;
; This table identifies item codes that require special translation and the
; routine that performs the translation.
;

SNDJBC_SPECIAL_TABLE:
	.WORD	SJC$_CHARACTERISTIC_NAME
	.LONG	TRANSLATE_OBJECT
	.WORD	SJC$_DESTINATION_QUEUE
	.LONG	TRANSLATE_OBJECT
	.WORD	SJC$_FILE_IDENTIFICATION
	.LONG	FILE_IDENTIFICATION
	.WORD	SJC$_FILE_SPECIFICATION
	.LONG	FILE_SPECIFICATION
	.WORD	SJC$_FORM_NAME
	.LONG	TRANSLATE_OBJECT
	.WORD	SJC$_GENERIC_TARGET
	.LONG	TRANSLATE_OBJECT
	.WORD	SJC$_LOG_QUEUE
	.LONG	TRANSLATE_OBJECT
	.WORD	SJC$_QUEUE
	.LONG	TRANSLATE_OBJECT
	.WORD	0
GETQUI_SPECIAL_TABLE:
	.WORD	QUI$_SEARCH_NAME
	.LONG	TRANSLATE_OBJECT
	.WORD	0

;
; The following values are needed as arguements to the $TRNLNMs performed by
; the action routine TRANSLATE_OBJECT.
;

TRNLNM_ATTR:				; Optional attributes for $TRNLNMs
	.LONG	LNM$M_CASE_BLIND	; Translations are done case-insensitive

TRNLNM_TABLE:				; Tables in which to do the translations
	.ASCID	/LNM$FILE_DEV/

	.SBTTL	EXE$SNDJBC - Send message to job controller

;++
;
; EXE$SNDJBC - SEND MESSAGE TO JOB CONTROLLER
; EXE$GETQUI - GET QUEUE INFORMATION
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine provides the send to job controller and get queue
;	information system services.  The action is to build a message from the
;	user's input data and send it to the job controller mailbox.  At request
;	completion, the job controller queues a special kernel AST to routine
;	EXE$JBCRSP to return status to this process.
;
; INPUTS:
;	EFN(AP)		= Number of the event flag to set at request completion
;	FUNC(AP)	= Function code
;	NULARG(AP)	= Reserved argument, must be zero
;	ITMLST(AP)	= Address of a list of item descriptors
;	IOSB(AP)	= Address of a quadword to receive completion status
;	ASTADR(AP)	= Address of an AST routine to be called at request
;			  completion
;	ASTPRM(AP)	= Longword AST parameter
;
; OUTPUTS:
;	R0		= Status of the operation
;
; STATUS CODES RETURNED:
;	SS$_NORMAL	Successful operation
;
;	SS$_ACCVIO	Unable to write IOSB, read ITMLST, read or write item
;			buffer, write return length buffer
;	SS$_BADPARAM	Invalid FUNC, nonzero NULARG, invalid item code,
;			invalid zero or nonzero field in item descriptor
;	SS$_DEVOFFLINE	No job controller
;	SS$_EXASTLM	Exceeded ASTLM quota
;	SS$_ILLEFC	Illegal event flag number
;	SS$_INSFMEM	Insufficient system memory to complete request
;	SS$_MBFULL	Job controller mailbox full
;	SS$_MBTOOSML	Message too large for job controller mailbox
;	SS$_UNASEFC	Unassociated event flag cluster
;--

GETQUI_DATA:
	.LONG	MSG$_GETQUI		; Message function code
	.LONG	QUI$_RESERVED_FUNC_2-1	; Highest function code minus one
	.LONG	QUI$_RESERVED_OUTPUT_6-1; Highest item code minus one
	.LONG	GETQUI_BOOL_ITEM	; Pointer to boolean item table
	.LONG	GETQUI_OUTPUT_ITEM	; Pointer to output item table
	.LONG	GETQUI_SPECIAL_TABLE	; Pointer to special handling table

SNDJBC_DATA:
	.LONG	MSG$_SNDJBC		; Message function code
	.LONG	SJC$_RESERVED_FUNC_2-1	; Highest function code minus one
	.LONG	SJC$_RESERVED_OUTPUT_2-1; Highest item code minus one
	.LONG	SNDJBC_BOOL_ITEM	; Pointer to boolean item table
	.LONG	SNDJBC_OUTPUT_ITEM	; Pointer to output item table
	.LONG	SNDJBC_SPECIAL_TABLE	; Pointer to special handling table

	.ENABL	LSB

ACCVIO:
	MOVL	#SS$_ACCVIO,R0		; Set access violation status
	BRB	10$

BADPARAM:
	MOVL	#SS$_BADPARAM,R0	; Set bad parameter status
	BRB	10$

INSFMEM:
	MOVZWL	#SS$_INSFMEM,R0		; Set insufficient memory status
10$:	BRW	ERROR


EXE$GETQUI::				; Get queue information
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVAB	GETQUI_DATA,R11		; Point to $GETQUI data table
	BRB	20$			; Join common code


EXE$SNDJBC::				; Send to job controller
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVAB	SNDJBC_DATA,R11		; Point to $SNDJBC data table

;
; Point to lowest usable stack address.
;

20$:	CLRQ	-(SP)			; Allocate fixed work area
	MOVPSL	R0			; Get PSL
	EXTZV	#PSL$V_CURMOD,#PSL$S_CURMOD,R0,R0 ; Get current mode
	ADDL3	#FIXED_AREA+52, -	; Allow slop for fixed message area plus
		CTL$AL_STACKLIM[R0], -	; 52 bytes for $CMKRNL frame and
		R10			; parameters

;
; Check for and clear I/O status block.
;

	MOVL	IOSB(AP),R0		; Get IOSB address
	BEQL	30$			; Branch if none
	IFNOWRT	#8,(R0),ACCVIO		; Check write access to IOSB
	CLRQ	(R0)			; Clear IOSB

;
; Validate function code.
;

30$:	SUBL3	#1,FUNC(AP),R2		; Get function code and subtract out
					; smallest value to get zero origin
	CMPL	R2,MAX_FUNC(R11)	; Check against largest value
	BGTRU	BADPARAM		; Branch if invalid value

;
; Validate unused argument (must be zero).
;

	TSTL	NULARG(AP)		; Unused argument zero?
	BNEQ	BADPARAM		; Branch if not zero

;
; Process the item list to build the job controller message.  During this loop:
;
;	R5  = buffer size
;	R6  = item code
;	R7  = buffer address
;	R8  = return length address
;	R9  = pointer to item list
;	R10 = pointer to lowest available stack address
;	R11 = pointer to service-specific data area
;

	MOVL	ITMLST(AP),R9		; Get item descriptor list address
	BEQL	40$			; Branch if no item list
	IFNORD	#4,(R9),90$		; Check read access to first longword
ITEM:	MOVZWL	(R9)+,R5		; Get buffer size value
	MOVZWL	(R9)+,R6		; Get item code value
	BNEQ	50$			; Branch if nonzero, list not ended
40$:	BRW	FINISH_MESSAGE		; Branch if zero, list ended
50$:	SUBL3	#1,R6,R2		; Subtract out smallest value to get
					; zero origin
	CMPL	R2,MAX_ITEM(R11)	; Check against largest value
	BGTRU	100$			; Branch if invalid value
	IFNORD	#12,(R9),90$		; Check read access to second and third
					; longwords of this item and first
					; longword of next item
	MOVQ	(R9)+,R7		; Get buffer address and return length
					; address
;
; Boolean item.  Store the item code.
;

	BBC	R2,@BOOL_ITEM(R11),60$	; Branch if not boolean item
	SUBL3	#2,SP,R0		; Get lowest address that will be used
	CMPL	R0,R10			; Compare against that available
	BLSSU	110$			; Branch if space exceeded
	MOVW	R6,-(SP)		; Store item code
	CMPW	R6,#SJC$_DELETE_FILE	; Check for file deletion
	BNEQ	ITEM
	BISB	#1@DELETE_FLAG,FLAGS(FP); Note file deletion for postprocessing
	BRB	ITEM			; Branch to process next item

;
; Input or output item.  Set up to call EXE$PROBEx.
;

60$:	MOVL	R7,R0			; R0 = buffer address
	MOVL	R5,R1			; R1 = buffer length
	CLRL	R3			; R3 = probe against previous mode
	PUSHL	R5			; Save R5 across call

;
; Input item.  Ensure that the buffer is accessible.
;

	BBS	R2,@OUTPUT_ITEM(R11),120$ ; Branch if output item
	JSB	EXE$PROBER		; Probe read access to buffer
	POPL	R5			; Restore R5
	BLBC	R0,90$			; Branch if no access

;
; Test for items that receive special translation.
;

	MOVL	SPECIAL_TABLE(R11),R0	; Point to special handling table
70$:	MOVZWL	(R0),R1			; Pick up item code and test if ended
	BEQL	INPUT_ITEM		; Branch if ended
	CMPL	R6,R1			; Correct item code?
	BNEQ	80$			; Branch if not
	JMP	@2(R0)			; Jump to processing routine
80$:	ADDL2	#6,R0			; Increment to next table entry
	BRB	70$			; Loop to compare next

;
; Helper branches.
;

90$:	BRW	ACCVIO
100$:	BRW	BADPARAM
110$:	BRW	INSFMEM

;
; Ordinary input item.  Store the item code, buffer length, and contents.
;

INPUT_ITEM:
	SUBL3	R5,SP,R0		; Get lowest address that will be used
	SUBL2	#4,R0			;
	CMPL	R0,R10			; Compare against that available
	BLSSU	110$			; Branch if space exceeded
	MOVL	R0,SP			; Allocate the space
	MOVW	R6,(R0)+		; Store item code
	MOVW	R5,(R0)+		; Store item length
	MOVC3	R5,(R7),(R0)		; Store item value
	BRW	ITEM			; Branch to process next item

;
; Output item.  Ensure that the buffer, and return length if specified, are
; accessible, and store the item code, buffer length, buffer address, and return
; length address.
;

120$:	JSB	EXE$PROBEW		; Probe write access to buffer
	POPL	R5			; Restore R5
	BLBC	R0,90$			; Branch if no access
	TSTL	R8			; Test if return length specified
	BEQL	130$			; Branch if not specified
	IFNOWRT	#2,(R8),90$		; Probe write access to length word
130$:	SUBL3	#12,SP,R0		; Get lowest address that will be used
	CMPL	R0,R10			; Compare against that available
	BLSSU	110$			; Branch if space exceeded
	MOVQ	R7,-(SP)		; Store item buffer addresses
	MOVW	R5,-(SP)		; Store item length
	MOVW	R6,-(SP)		; Store item code
	BRW	ITEM			; Branch to process next item

;
; To here when all items have been processed. Do necessary postprocessing
; and finish the message.
;

FINISH_MESSAGE:
	MOVL	FILE_ID(FP),R10		; Get file ID item, if any
	BEQL	140$			; Branch if none
	BSBW	POSTPROCESS_FID		; Deal with it

;
; Build the message header.
;

140$:	MOVL	@#CTL$GL_PCB,R6		; Get PCB address
	MOVL	@#CTL$GL_PHD,R7		; Get PHD address
	MOVW	FUNC(AP),-(SP)		; Store function code
	MOVQ	ASTADR(AP),-(SP)	; Store AST address and parameter
	PUSHL	IOSB(AP)		; Store IOSB address
	MOVZBL	EFN(AP),-(SP)		; Store event flag number
	PUSHL	PHD$L_IMGCNT(R7)	; Store image counter
	SUBL2	#8,SP			; Make space for system time
150$:	MOVQ	EXE$GQ_SYSTIME,(SP)	; Store current time
	CMPL	EXE$GQ_SYSTIME,(SP)	; Verify that value acquired was not
	BNEQ	150$			;  being modified at the same time
	CMPL	EXE$GQ_SYSTIME+4,4(SP)	;  and store it again if it changed
	BNEQ	150$			;
	MOVQ	PCB$T_TERMINAL(R6),-(SP); Store terminal name
	PUSHL	PCB$L_EOWNER(R6)	; Store extended owner process ID
	PUSHL	PCB$L_STS(R6)		; Store process status
	PUSHL	PCB$L_EPID(R6)		; Store extended process ID
	CLRW	-(SP)			; Clear spare word
	MOVPSL	R0			; Get PSL
	EXTZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,R0,R0 ; Get previous mode
	MOVB	R0,-(SP)		; Store requester's mode
	SUBB3	PCB$B_PRIB(R6),#31,-(SP); Store base priority	
	SUBL2	#20,SP			; Allocate space for next field
	MOVC3	#20,@#CTL$T_USERNAME,(SP) ; Store username and account name
	PUSHL	PCB$L_UIC(R6)		; Store UIC
	MOVQ	PHD$Q_PRIVMSK(R7),-(SP) ; Store privileges
	MOVZWL	MSG_CODE(R11),-(SP)	; Store message type, clear mailbox

;
; Finished building the message.  Push the address of the service argument
; list, and the address and length of the message, and enter kernel mode to
; complete argument list processing and write the message.
;

	PUSHL	SP			; Push address of message
	SUBL3	(SP),FP,-(SP)		; Push length of message
	SUBL	#8,(SP)			; Deduct fixed work area
	PUSHL	AP			; Push service argument list
	$CMKRNL_S B^170$,(SP)		; Finish in kernel mode
	BLBC	R0,160$			; Branch if error
	RET				; Return
160$:	BRW	ERROR			; Helper branch

;
; Kernel mode routine to finish processing.
;

170$:	.WORD	^M<R2,R3,R4,R5,R6>	; Entry mask

;
; Get parameter list address and PCB address.
;

	MOVL	@#CTL$GL_PCB,R4		; Get PCB address
	MOVL	(AP)+,R6		; Get service parameter list address

;
; Clear event flag.
;

	MOVZBL	EFN(R6),R3		; Get event flag number
	JSB	SCH$CLREF		; Clear this event flag
	BLBC	R0,190$			; Return on errors

;
; Check and charge AST quota.
;

	TSTL	ASTADR(R6)		; AST routine specified?
	BEQL	180$			; Branch if none
	MOVZWL	#SS$_EXASTLM,R0		; Assume AST quota exceeded status
	TSTW	PCB$W_ASTCNT(R4)	; Test for quota exceeded
	BLEQ	190$			; Branch if exceeded
	DECW	PCB$W_ASTCNT(R4)	; Charge AST quota

;
; Send the message.
;

180$:	MOVQ	(AP),R3			; R3 = size, R4 = address of message
	MOVAB	SYS$GL_JOBCTLMB,R5	; R5 = mailbox UCB address
	JSB	EXE$SENDMSG		; Send message
190$:	RET				; Return
	.DSABL	LSB


;
; Stack work area offsets for next routine.
;

FWA_DVI=	0			; DVI
FWA_FID=	16			; FID
FWA_DID=	22			; DID
FWA_FILE_SIZE=	28			; File size in blocks
					; (spare longword)
FWA_FILE_SPEC=	36			; File specification
FWA_RECATTR=	292			; Record attributes
FWA_CHAN=	324			; Channel assigned to device
FWA_IOSB=	328			; I/O status block

FWA_FAB=	28			; FAB block
FWA_NAM=	FWA_FAB + FAB$C_BLN	; NAM block
FWA_ESA=	FWA_NAM + NAM$C_BLN	; Expanded string
FWA_SIZE=	FWA_ESA + NAM$C_MAXRSS	; Length of area

FWA_DVI_DESC=	36			; Descriptor for device name

FWA_FIB_DESC=	36			; Descriptor for FIB
FWA_FIB=	44			; File information block
FWA_ATRLIST=	FWA_FIB+FIB$C_LENGTH	; Attribute list

	.ENABL	LSB
FILE_SPECIFICATION:			; Translate SJC$_FILE_SPECIFICATION

;
;	R5  = buffer size
;	R6  = item code
;	R7  = buffer address
;	R10 = pointer to lowest available stack address
;
; Check that the parameter is the correct length.
;

	TSTL	FILE_ID(FP)		; See if there is already a filespec
	BNEQ	20$			; Branch if so
	CMPW	R5,#255			; Ensure no longer than 255 bytes
	BGTRU	20$			; Branch if incorrect

;
; Check for sufficient space to allocate the work area, and do so.
;

	MOVAB	-FWA_SIZE(SP),R0	; Get lowest address that will be used
	CMPL	R0,R10			; Compare against that available
	BLSSU	30$			; Branch if space exceeded
	MOVL	R0,SP			; Allocate the space

;
; Initialize the FAB and NAM blocks.
;

	PUSHL	R5			; Save R5 across MOVC	
	MOVC5	#0,(SP),#0,#<FAB$C_BLN+NAM$C_BLN>,FWA_FAB+4(SP) ; Clear FAB/NAM
	POPL	R5			; Restore R5
	MOVAB	FWA_FAB(SP),R2		; Point to FAB
	MOVAB	FAB$C_BLN(R2),R3	; Point to NAM
	MOVW	#<FAB$C_BID!<FAB$C_BLN@8>>,FAB$B_BID(R2) ; Set FAB identifier
	MOVB	R5,FAB$B_FNS(R2)	; Set file name length
	MOVL	R7,FAB$L_FNA(R2)	; Set file name address
	MOVAB	(R3),FAB$L_NAM(R2)	; Set NAM block address
	MOVW	#<NAM$C_BID!<NAM$C_BLN@8>>,NAM$B_BID(R3) ; Set NAM identifier
	MOVB	#NAM$C_MAXRSS,NAM$B_ESS(R3) ; Set ESA descriptor
	MOVAB	FWA_ESA(SP),NAM$L_ESA(R3)
	MOVZBL	#SJC$_FILE_IDENTIFICATION,R6 ; Set up item code
	MOVAB	NAM$T_DVI(R3),R7	; Point to DVI/FID/DID area

;
; Execute a PARSE and SEARCH to get the DVI/FID/DID.
;

	$PARSE	FAB=(R2)		; Parse the file name
	BLBC	R0,10$			; Branch if error
	$SEARCH	FAB=(R2)		; Search the file name
	BLBS	R0,50$			; Branch to handle like FID item

;
; Helper branches.
;

10$:	BRW	ERROR
20$:	BRW	BADPARAM
30$:	BRW	INSFMEM


FILE_IDENTIFICATION:			; Translate SJC$_FILE_IDENTIFICATION

;
;	R5  = buffer size
;	R6  = item code
;	R7  = buffer address
;	R10 = pointer to lowest available stack address
;
; Check that the parameter is the correct length.  If it is not the expected
; 28 bytes, and the previous mode is at least executive, assume that we have
; been passed the entire expanded item and send it on as is.
;

	TSTL	FILE_ID(FP)		; See if there is already a filespec
	BNEQ	20$			; Branch if so
	CMPW	R5,#28			; Ensure parameter is 28 bytes
	BEQL	40$			; Branch if correct
	MOVPSL	R0			; Get PSL
	EXTZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,R0,R0 ; Get previous mode
	CMPL	R0,#PSL$C_EXEC		; Previous mode exec or kernel?
	BGTRU	20$			; Branch if not
	BRW	INPUT_ITEM		; Branch to store item as is
40$:	CMPB	(R7),#15		; Ensure device no more than 15 bytes
	BGTRU	20$			; Branch if incorrect

;
; Check for sufficient space to allocate the work area, and do so.
;

	MOVAB	-FWA_SIZE(SP),R0	; Get lowest address that will be used
	CMPL	R0,R10			; Compare against that available
	BLSSU	30$			; Branch if space exceeded
	MOVL	R0,SP			; Allocate the space

;
; Move the DVI/FID/DID to the work area.
;

50$:	MOVC3	#28,(R7),FWA_DVI(SP)	; Move the parameter to the work area
	MOVL	SP,FILE_ID(FP)		; Save location of file ID buffer
	MOVZWL	R6,-(SP)		; Store item code, leave space for size
	BRW	ITEM			; Remainder of processing comes later

;
; The file specification, if any, must be post-processed after all items
; have been digested. Inputs:
;
;	R10 = address of file ID item
;
; Get a pointer to the DVI descriptor, and where the channel will be stored,
; and initialize the descriptor.
;

POSTPROCESS_FID:
	MOVC5	#0,(SP),#0,#FIB$C_LENGTH,FWA_FIB(R10) ; Initialize FIB
	CLRL	32(R10)			; Clear unused longword
	MOVAB	FWA_DVI_DESC(R10),R0	; Point to DVI descriptor
	MOVAB	FWA_CHAN(R10),R3	; Point to channel
	MOVZBL	FWA_DVI(R10),(R0)	; Store device name length
	MOVAB	FWA_DVI+1(R10),4(R0)	; Store device name address

;
; Assign a channel to the device.
;

	$ASSIGN_S -			; Assign a channel
		DEVNAM=(R0), -		;  Device name
		CHAN=(R3)		;  Output channel number
	BLBC	R0,10$			; Branch if not assigned

;
; Build the FIB, the FIB descriptor, and the ACP attributes list.
;

	MOVAB	FWA_ATRLIST(R10),R0	; Point to attribute list
	MOVAB	FWA_FIB_DESC(R10),R1	; Point to FIB descriptor
	MOVAB	FWA_IOSB(R10),R2	; Point to IOSB
	MOVAB	FWA_FIB(R10),R4		; Point to FIB

	MOVL	FWA_FID(R10),FIB$W_FID(R4) ; Store file ID
	MOVW	FWA_FID+4(R10),FIB$W_FID+4(R4)
	BBC	#DELETE_FLAG,FLAGS(FP),55$ ; Branch if not deleting file
	MOVL	FWA_DID(R10),FIB$W_DID(R4) ; Also store directory ID
	MOVW	FWA_DID+4(R10),FIB$W_DID+4(R4)
	BISW	#FIB$M_FINDFID,FIB$W_NMCTL(R4)
	BISL	#FIB$M_ALT_REQ,FIB$L_STATUS(R4) ; Alternate access required
	MOVL	#ARM$M_DELETE,FIB$L_ALT_ACCESS(R4) ; Check for delete access

55$:	MOVL	#FIB$C_LENGTH,(R1)	; Initialize FIB descriptor
	MOVAB	(R4),4(R1)		;

	MOVL	#<ATR$S_RECATTR+<ATR$C_RECATTR@16>>,(R0)
	MOVAB	FWA_RECATTR(R10),4(R0)
	MOVL	#<256+<ATR$C_FILE_SPEC@16>>,8(R0)
	MOVAB	FWA_FILE_SPEC(R10),12(R0)
	CLRL	16(R0)

;
; Access the file to get necessary information.
;

	$QIOW_S -			; Issue QIO to obtain file attributes
		EFN=EFN(AP), -		;  User's event flag
		CHAN=(R3), -		;  Channel number
		FUNC=#IO$_ACCESS, - 	;  Read attributes function code
		IOSB=(R2), -		;  I/O status block
		P1=(R1), -		;  Address of FIB descriptor
		P5=R0			;  Address of attribute list
	PUSHL	R0			; Save $QIOW status
	$DASSGN_S -			; Deassign the channel
		CHAN=(R3)		;  Channel number
	POPL	R0			; Restore status from access
	BLBC	R0,70$			; Branch if $QIOW failed
	MOVZWL	FWA_IOSB(R10),R0	; Pick up status from IOSB
	BLBC	R0,70$			; Branch if operation failed

;
; Compute the file size from the record attributes.
;

	ROTL	#16, -			; Move EFBLK to file size area and
		FWA_RECATTR+FAT$L_EFBLK(R10), -
		FWA_FILE_SIZE(R10)	; convert to unswapped
	BEQL	60$			; Branch if EFBLK is zero
	TSTW	FWA_RECATTR+FAT$W_FFBYTE(R10) ; Test first free byte
	BNEQ	60$			; Branch if nonzero
	DECL	FWA_FILE_SIZE(R10)	; Adjust EFBLK

;
; Slide the real data up adjacent to the previous item on the stack, and
; finish it by adding the length and item code.
;

60$:	MOVZWL	FWA_FILE_SPEC(R10),R7	; Get file specification length
	CMPW	R7,#254			; Check against maximum supported length
	BLEQU	65$			; Branch if in range
	MOVZWL	#254,R7			; Shorten to maximum
65$:	ADDL	#FWA_FILE_SPEC+2,R7	; Add fixed portion
	MOVW	R7,-2(R10)		; Store length in message
	SUBL3	R7,#FWA_SIZE,R8		; Compute bias
	ADDL	R10,R7			; Compute size of area above filespec
	SUBL	SP,R7			; = R10 - SP + R7
	MOVC3	R7,(SP),(SP)[R8]	; Squish out unused space
	ADDL	R8,SP			; Delete unused stack
	RSB				; Done with file spec

;
; Helper branches.
;

70$:	BRW	ERROR

	.DSABL	LSB


;
; Stack work area offsets for next routine.
;

LWA_BUFFER=	0			; Logical name buffer
LWA_LOGNAM=	256			; Logical name descriptor
LWA_ITMLST=	264			; $TRNLNM item list
LWA_RSLLEN=	292			; Translation length buffer
LWA_ATTRBUF=	296			; Translation attributes buffer
LWA_SIZE=	300			; Work area length

	.ENABL	LSB
10$:	BRW	BADPARAM
20$:	BRW	INSFMEM

TRANSLATE_OBJECT:			; Translate object names

;
;	R5  = buffer size
;	R6  = item code
;	R7  = buffer address
;	R10 = pointer to lowest available stack address
;
; Check that the parameter is the correct length and that there is sufficient 
; space to allocate the work area (then do so).
;

	CMPW	R5,#255			; Ensure no more than 255 bytes
	BGTRU	10$			; Branch if incorrect

	MOVAB	-LWA_SIZE(SP),R3	; Get lowest address that will be used
	CMPL	R3,R10			; Compare against that available
	BLSSU	20$			; Branch if space exceeded
	MOVL	R3,SP			; Allocate the space

;
; Prepare to perform the iterative translations by initializing the logical name
; descriptor and the item list utilized by the recursive $TRNLNMs.
;

	PUSHL	R5			; Save the input string length
	MOVC3	R5,(R7),(R3)		; Move input string into scratch buffer
	POPL	R5			; Restore the input string length
	MOVL	SP,R7			; Restore scratch buffer address

	MOVAB	LWA_LOGNAM+4(R7),R1	; Addr of area requiring initialization
	MOVAB	(R7),(R1)+		; Init log name descriptor buffer addr

	MOVL	#<LNM$_STRING @ 16+-	; Init string item list item type
		255>,(R1)+		; and string buffer length
	MOVAB	(R7),(R1)+		; Init string item buffer address
	MOVAB	LWA_RSLLEN(R7),(R1)+	; Init string item return buffer address
	MOVL	#<LNM$_ATTRIBUTES @ 16+-; Init attributes item list item type
		4>,(R1)+		; and attributes buffer length
	MOVAB	LWA_ATTRBUF(R7),(R1)+	; Init attributes item buffer address
	CLRQ	(R1)			; Init attributes item return buffer 
					; address and end of item list marker

	MOVL	#LNM$C_MAXDEPTH,R4	; Initialize loop counter


;
; Loop to iterate over translations. 
;
;	R4  = Current translation count
;	R5  = Current input string length
;	R6  = Item code
;	R7  = Current input string address, and 
;	      Address of work area
;
; The iterations successfully terminate when:
;
; 1. The maximum translation recursion depth is exceeded.
; 2. The current translation succeeds but the translation is marked terminal.
; 3. The current translation fails with an error of SS$_NOLOGNAM.
;
; The iterations unsuccessfully terminate when:
;
; 1. The current translation fails with some error other than SS$_NOLOGNAM.
; 2. The current translation exceeds but the equivalence string is either of
;    null length or does not exist.
;

30$:	MOVL	R5,LWA_LOGNAM(R7)	; Store name length in descriptor

	$TRNLNM_S	-		; Attempt to translate the name
		ATTR	= TRNLNM_ATTR,-		; Case-insensitive translation
		ITMLST	= LWA_ITMLST(R7),-	; Address of item list
		LOGNAM	= LWA_LOGNAM(R7),-	; Address of name descriptor
		TABNAM	= TRNLNM_TABLE		; Addr LNM$FILE_DEV descriptor
	BLBC	R0,45$			; Done if translation fails

	MOVZWL	LWA_RSLLEN(R7),R5	; Retrieve length of equivalence string
	BEQL	40$			; Go return error if length is 0 
					; (null or non-existant translation)

	BBS	#LNM$V_TERMINAL,-	; Is the translation marked terminal?
		LWA_ATTRBUF(R7),50$	; terminate iterative translations if so
	SOBGTR	R4,30$			; Continue if more translations possible
	BRB	50$			; Else, done if xlation count exhausted 

40$:	MOVZWL	#SS$_IVLOGNAM,R0	; Return an error for null length or
	BRB	ERROR			; non-existant translation

45$:	CMPW	R0,#SS$_NOLOGNAM	; If the translation failed for a reason
	BNEQ	ERROR			; other than the logical name did not
					; exist then go return the error


;
; Recursive translations have completed. Format the final translation by
; removing blanks, tabs, null characters, and a trailing colon if there is one,
; and upcasing the name using the DEC multi-national character upcasing table. 
;
;	R1 = Current character
;	R2 = Current character index
;	R3 = Cursor to output buffer
;	R5 = Length of input string
;	R7 = Address of input string
;

50$:	MNEGL	#1,R2			; Initialize the loop index
	MOVL	R7,R3			; Initialize output buffer cursor
	BRB	70$			; Branch to enter the loop

60$:	MOVZBL	(R7)[R2],R1		; Pick up the current character
	BEQL	70$			; Remove it if it is null
	CMPB	R1,#^A' '		; Is the current character a blank?
	BEQL	70$			; Remove it if it is
	CMPB	R1,#^O011		; Is the current character a tab?
	BEQL	70$			; Remove it if it is
	MOVB	G^EXE$UPCASE_DAT[R1],-	; Move upcased character into output
		(R3)+			; buffer
70$:	AOBLSS	R5,R2,60$		; Continue loop until done

	SUBL3	R7,R3,R7		; Computes name's compressed length
	BEQL	40$			; Return an error if its zero
	CMPB	-1(R3),#^A':'		; Is there a trailing colon?
	BNEQ	80$			; Branch if there isn't
	DECL	R7			; Otherwise remove it
	BEQL	40$			; Return an error if name length is 0

;
; Slide the name up the stack so that it is adjacent to the previous item on
; the stack. Then complete the formation of the item by adding the name length 
; and item code.
;

80$:	SUBL3	R7,#LWA_SIZE,R8		; Compute bias
	MOVC3	R7,(SP),(SP)[R8]	; Slide item up
	ADDL2	R8,SP			; Delete unused stack
	MOVW	R7,-(SP)		; Store item length
	MOVW	R6,-(SP)		; Store item code
	BRW	ITEM			; Return to item list processing
	.DSABL	LSB


;
; Synchronous error return path.  Store status in the IOSB, set the event flag,
; and declare the AST, if specified.
;

ERROR:	PUSHL	R0			; Save completion status
	CALLG	(AP),G^SYS$SETEF	; Set specified event flag
	MOVL	IOSB(AP),R1		; Get address of IOSB
	BEQL	10$			; Branch if none
	IFNOWRT	#8,(R1),10$		; Branch if no write access
	MOVL	(SP),(R1)		; Store completion status
10$:	MOVL	ASTADR(AP),R1		; Get address of AST routine
	BEQL	20$			; Branch if none
	MOVPSL	R0			; Get PSL
	EXTZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,R0,R0 ; Get previous mode
	$DCLAST_S (R1),ASTPRM(AP),R0	; Declare completion AST
20$:	POPL	R0			; Restore completion status
	RET				; Return with error status

	.SBTTL	EXE$JBCRSP - Store response from job controller

;++
;
; EXE$JBCRSP - STORE RESPONSE FROM JOB CONTROLLER
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine is called as a special kernel AST routine to return status
;	from the send to job controller system service to the requesting
;	process.  It ensures that the same image is executing and then sets the
;	specified event flag, stores a status value in the IOSB if specified,
;	stores data in any output buffer items that were in the original
;	request, and declares the completion AST if specified.  If appropriate,
;	the ACB is deallocated.
;
; INPUTS:
;	R0-R3		= scratch
;	R4		= PCB address
;	R5		= ACB address
;
; OUTPUTS:
;	See above.
;--

EXE$JBCRSP::				; Response from job controller

;
; Compare the image count when the request was queued with the current image
; count.  If different, a new image is running - do not store anything.
;

	MOVL	@#CTL$GL_PHD,R3		; Get PHD address
	CMPL	PHD$L_IMGCNT(R3),ACB_L_IMGCNT(R5) ; See if image count correct
	BEQL	10$			; Branch if correct
	BRW	70$			; Join code to deallocate ACB

;
; Loop over the return item descriptors storing information in the user's
; output buffers.  During this loop:
;
;	R5  = user buffer address
;	R6  = pointer to item descriptors in ACB
;	R7  = user buffer size
;	R8  = actual data size
;	R9  = requester's access mode
;	R10 = item count
;

10$:	TSTW	ACB_W_ITEMCOUNT(R5)	; Any items to return?
	BEQL	50$			; Branch if none
	PUSHR	#^M<R4,R5,R6,R7,R8,R9,R10> ; Save registers
	MOVAB	ACB_B_ITEMS(R5),R6	; Point to items
	MOVZBL	ACB$B_RMOD(R5),R9	; Get requester's mode
	MOVZWL	ACB_W_ITEMCOUNT(R5),R10	; Get item count
20$:	MOVZWL	(R6)+,R7		; Get user buffer size
	MOVZWL	(R6)+,R8		; Get actual size
	MOVL	(R6)+,R5		; Get data buffer address
	MOVL	R5,R0			; R0 = buffer address
	MOVL	R7,R1			; R1 = buffer length
	MOVL	R9,R3			; R3 = requester's mode
	JSB	EXE$PROBEW		; Probe for write access
	BLBC	R0,90$			; Branch if inaccessible
	MOVC5	R8,4(R6),#0,R7,(R5)	; Move data to user buffer
	MOVL	(R6)+,R5		; Get return length address
	BEQL	40$			; Branch if none
	IFNOWRT	#2,(R5),90$,R9		; Probe for write access
	CMPL	R8,R7			; Minimize user and actual length
	BGEQU	30$			; Branch if actual length larger
	MOVL	R8,R7			; Get actual length as minimum
30$:	MOVW	R7,(R5)			; Return buffer length
40$:	ADDL2	R8,R6			; Advance over data
	SOBGTR	R10,20$			; Loop for all items
	POPR	#^M<R4,R5,R6,R7,R8,R9,R10> ; Restore registers

;
; Output buffers stored.  Set the specified event flag, return status to the
; IOSB, and declare the completion AST if specified.  If no AST specified,
; deallocate the ACB.
;

50$:	MOVL	PCB$L_PID(R4),R1	; R1 = PID
	CLRL	R2			; R2 = null priority increment
	MOVZBL	ACB_L_EFN(R5),R3	; R3 = event flag number
	JSB	SCH$POSTEF		; Set specified event flag
	MOVL	ACB_L_IOSB(R5),R1	; Get IOSB address
	BEQL	60$			; Branch if none
	IFNOWRT	#4,(R1),60$,ACB$B_RMOD(R5) ; Probe for write access
	MOVL	ACB_L_STATUS(R5),(R1)	; Return status
60$:	TSTL	ACB$L_AST(R5)		; Completion AST specified?
	BEQL	70$			; Branch if no to deallocate ACB
	CLRL	R2			; R2 = null priority increment
	JMP	SCH$QAST		; Queue completion AST and return

;
; Processing finished.  Return AST quota if charged, and deallocate the ACB.
; (No byte count quota is charged for this ACB because it is allocated by the
; job controller.)
;

70$:	BBC	#ACB$V_QUOTA,ACB$B_RMOD(R5),80$	; Branch if no AST quota charged
	INCW	PCB$W_ASTCNT(R4)	; Return AST quota
80$:	MOVL	R5,R0			; R0 = ACB address
	JMP	EXE$DEANONPAGED		; Deallocate ACB and return

;
; Memory is inaccessible.  Attempt to return an access violation status to
; the IOSB.
;

90$:	POPR	#^M<R4,R5,R6,R7,R8,R9,R10> ; Restore registers
	MOVL	#SS$_ACCVIO,ACB_L_STATUS(R5) ; Force status to ACCVIO
	BRB	50$			; Go to return EFN and IOSB
	.END	
