%TITLE 'NDXMSG -- Dump entry as message'
MODULE NDXMSG (IDENT = 'V04-000'
		%BLISS32 [, ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!   DSR (Digital Standard RUNOFF) /DSRPLUS DSRINDEX/INDEX Utility
!
! ABSTRACT:
!   This module contains code to dump an index entry in internal format
!
! ENVIRONMENT:   Transportable
!
! AUTHOR:	 JPK
!
! CREATION DATE: January 1982
!
! MODIFIED BY:
!
!	005	JPK00015	04-Feb-1983
!		Cleaned up module names, modified revision history to
!		conform with established standards. Updated copyright dates.
!
!	004	JPK00012	24-Jan-1983
!		Modified NDXVMSMSG.MSG to define error messages for both
!		DSRINDEX and INDEX.
!		Added require of NDXVMSREQ.R32 to NDXOUT, NDXFMT, NDXDAT,
!		INDEX, NDXMSG, NDXXTN, NDXTMS, NDXVMS and NDXPAG for BLISS32. 
!		Since this file defines the error message literals, 
!		the EXTERNAL REFERENCEs for the error message literals 
!		have been removed.
!
!	003	JPK00010	24-Jan-1983
!		Removed routines GETDAT and UPDDAT from NDXDAT - they 
!		performed no useful function. Removed references to these
!		routines from NDXOUT, NDXFMT, and NDXMSG.
!		Removed reference to XPOOL in NDXOUT - not used.
!
!	002	JPK00004	24-Sep-1982
!		Modified NDXOUT, NDXMSG, NDXFMT, and NDXDAT for TOPS-20. 
!		Strings stored in the index pool use the first fullword 
!		for their length. References to these strings were incorrect.
!
!--

!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    ENTMSG : NOVALUE,			! Dump current entry
    DMPENT : NOVALUE;			! Dump entry 
!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';

REQUIRE 'REQ:NDXPOL';

%IF %BLISS (BLISS32)
%THEN

REQUIRE 'REQ:NDXVMSREQ';

%FI

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL
    RINTES : UNSIGNED (8),	! RUNOFF escape sequence character
    MAXLST;			! Maximum subindex depth

EXTERNAL
    LSTPTR : REF $XE_BLOCK,	! Pointer to current entry
    INDLVL,			! Current subindex level
    LSTSTK : VECTOR;		! Entry stack

%SBTTL 'ENTMSG - Dump current index entry'
GLOBAL ROUTINE ENTMSG : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds a string which represents the current index
!	entry from the index stack. The string is dumped via DMPENT.
!
! FORMAL PARAMETERS:
!
!	None
!
! IMPLICIT INPUTS:
!
!	LSTPTR	- Pointer to current entry
!	INDLVL	- Subindex level
!	LSTSTK	- Index entry stack
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!--
    BEGIN
    LOCAL
	LINE : VECTOR [CH$ALLOCATION (1200)],
	LEN,
	PTR;

    !
    ! Build a string containing the whole entry
    !
    LEN = 0;
    PTR = CH$PTR (LINE);

    LSTSTK [.INDLVL] = .LSTPTR;	! Save pointer to current entry

    INCR I FROM 0 TO .INDLVL DO
	BEGIN
	LOCAL
	    XEPTR : REF $XE_BLOCK,
	    FROM_VEC : REF VECTOR,
	    FROM_LEN,
	    FROM_PTR;

	!
	! Point to entry
	!
	XEPTR = .LSTSTK [.I];

	!
	! Point to text
	!
	FROM_VEC = .XEPTR [XE$A_TEXT];

	!
	! Get the length. It's stored as the first fullword of the string
	!
	FROM_LEN = .FROM_VEC [0];
	FROM_PTR = CH$PTR (FROM_VEC [1]);

	!
	! Append to line
	!
	CH$MOVE (.FROM_LEN, .FROM_PTR, .PTR);
	PTR = CH$PLUS (.PTR, .FROM_LEN);
	LEN = .LEN + .FROM_LEN;

	IF .I NEQ .INDLVL
	THEN
	    BEGIN
	    !
	    ! Append subindex escape sequence
	    !
	    CH$WCHAR_A (RINTES, PTR);
	    CH$WCHAR_A (%C'J', PTR);
	    CH$WCHAR_A (0, PTR);
	    LEN = .LEN + 3;
	    END;
	END;
			
    LSTSTK [.INDLVL] = 0;		! Clean stack

    DMPENT (.LEN, CH$PTR (LINE));	! Dump entry
    END;

GLOBAL ROUTINE DMPENT (LEN, STR_PTR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	DMPENT untranslates text and dumps it 
!
! FORMAL PARAMETERS:
!
!	LEN	- is the number of bytes to be scanned.
!	STR_PTR	- is a CH$PTR to the index entry
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	COUNT,					! Number of characters in output stream.
	XLP,					! A CH$PTR to the next character location in XLINE.
	XLINE : VECTOR [CH$ALLOCATION (1200)],	! Build up the dump line here.
	PTR;

    IF .LEN EQL 0 THEN RETURN;			! Split if no text to display

    XLP = CH$PTR (XLINE);			! Point to line buffer
    COUNT = 0;					! Initialize length counter

    !
    ! Scan the text, untranslating escape codes, etc back to RUNOFF flags.
    !
    PTR = .STR_PTR;				! Copy pointer to what's to be "unparsed"

    INCR I FROM 1 TO .LEN DO
	BEGIN

	LOCAL
	    KHAR;

	KHAR = CH$RCHAR_A (PTR);

	IF .KHAR EQL RINTES
	THEN
	    BEGIN
	    !
	    ! Untranslate special function
	    !

	    LOCAL
		FUNCTION_CODE,
		OPERAND;

	    FUNCTION_CODE = CH$RCHAR_A (PTR);
	    OPERAND = CH$RCHAR_A (PTR);
	    I = .I + 2;

	    SELECTONE .FUNCTION_CODE OF
		SET

		[%C'B'] :
		    !
		    ! Bolded character.
		    !
		    CH$WCHAR_A (%C'*', XLP);

		[%C'U'] :
		    !
		    ! Underlined character.
		    !
		    CH$WCHAR_A (%C'&', XLP);

		[%C'O'] :
		    BEGIN
		    !
		    ! An overstruck character.
		    ! NOTE: Order is the reverse of what user specified.
		    !
		    CH$WCHAR_A (.OPERAND, XLP);
		    CH$WCHAR_A (%C'%', XLP);
		    COUNT = .COUNT + 1;
		    END;

		[%C'J'] :
		    !
		    ! A word mark.  For indexing commands, this
		    ! starts a new sub-indexing level.
		    !
		    CH$WCHAR_A (%C'>', XLP);

		[%C'P'] :
		    !
		    ! No permute flag
		    !
		    CH$WCHAR_A (%C'~', XLP);

		[%C'N'] :
		    IF .OPERAND EQL %C'-'
		    THEN
			CH$WCHAR_A (%C'=', XLP)		! Hyphenate flag
		    ELSE
			CH$WCHAR_A (%C'?', XLP);	! Unknown sequence

		[OTHERWISE] :
		    !
		    ! Unknown/unsupported special function
		    !
		    CH$WCHAR_A (%C'?', XLP);
		TES;

	    END
	ELSE
	    BEGIN
	    !
	    ! Some normal character
	    !
	    ! Normal characters go out as themselves.  Control characters
	    ! are translated to something else.
	    !

	    IF (.KHAR GEQ %C' ') AND (.KHAR LEQ %O'176')
	    THEN
		!
		! Output a normal character
		!
		CH$WCHAR_A (.KHAR, XLP)
	    ELSE
		BEGIN
		!
		! Translate and output a control character.
		! NOTE: DEL (Octal 177) and NUL (Octal 0) have the same result.
		!
		CH$WCHAR_A (%C'^', XLP);
		CH$WCHAR_A (.KHAR + %C'@', XLP);
		COUNT = .COUNT + 1;
		END;

	    END;

	COUNT = .COUNT + 1;
	END;

    !
    ! Now tell user what entry was
    !
%IF %BLISS (BLISS32)
%THEN						! Signal messages in BLISS32

    SIGNAL (INDEX$_TEXTD, 2, .COUNT, CH$PTR (XLINE));

%ELSE						! Use $XPO_PUT_MSG otherwise

    $XPO_PUT_MSG (SEVERITY = WARNING, 
	STRING = $STR_CONCAT ('entry text: ''', (.COUNT, CH$PTR (XLINE)), ''''));

%FI

    END;					!End of DMPENT

END				! End of module
ELUDOM
