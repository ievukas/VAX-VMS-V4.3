MODULE CHARGEQ (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This module contains the routines for charging disk blocks
!	against a particular quota file entry.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  22-May-1979  20:51
!
! MODIFIED BY:
!
!	V03-012	CDS0004		Christian D. Saether	29-Aug-1984
!		Be prepared to find multiple headers when rebuilding
!		the quota file fcb.  Reread header for PRIMARY_FCB
!		when rebuilding the quota fcb if it is not the quota
!		file fcb.
!
!	V03-011	CDS0003		Christian D. Saether	23-Aug-1984
!		Check quota fcb for staleness and rebuild if necessary.
!
!	V03-010	ACG0443		Andrew C. Goldstein,	21-Aug-1984  19:51
!		Fix setup of REAL_Q_REC in file search so removal works
!		on a cache miss.
!
!	V03-009	ACG0438		Andrew C. Goldstein,	19-Jul-1984  16:45
!		Implement write access cache interlock
!
!	V03-008	ACG0430		Andrew C. Goldstein,	31-May-1984  15:07
!		Fix reference to quota cache value block in REL_QUOTA_LOCK
!
!	V03-007	ACG0429		Andrew C. Goldstein,	21-May-1984  12:00
!		Fix flow bug in ACG0428
!
!	V03-006	ACG0428		Andrew C. Goldstein,	18-May-1984  14:29
!		Re-read quota record if value block not valid
!
!	V03-005	ACG0408		Andrew C. Goldstein,	23-Mar-1984  14:40
!		Add AST parameter so that impure storage is fully based
!
!	V03-004	ACG0400		Andrew C. Goldstein,	1-Mar-1984  21:09
!		Implement cluster-wide quota cacheing
!
!	V03-003	CDS0002		Christian D. Saether	29-Dec-1983
!		Use L_NORM linkage and BIND_COMMON macro.
!
!	V03-002	CDS0001		Christian D. Saether	 6-Dec-1983
!		Serialize quota checking operations using allocation lock.
!
!	V03-001	ACG0337		Andrew C. Goldstein,	16-May-1983  16:04
!		Fix handling of quota cache counters
!
!	V02-006	ACG0229		Andrew C. Goldstein,	23-Dec-1981  21:45
!		Add counters for quota cache hits and misses
!
!	V02-005	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

FORWARD ROUTINE
	CHARGE_QUOTA	: L_NORM NOVALUE, ! check and/or charge disk blocks
	SEARCH_QUOTA	: L_NORM,	  ! search for a quota file record
	WRITE_QUOTA	: L_NORM NOVALUE, ! write back a quota record
	SCAN_QUO_CACHE	: L_NORM,	  ! search the quota cache
	GET_QUOTA_LOCK	: L_NORM NOVALUE, ! acquire lock on quota file entry
	REL_QUOTA_LOCK	: L_NORM NOVALUE, ! release lock on quota file entry
	CLEAN_QUO_CACHE	: L_NORM NOVALUE, ! write modified cache entry
	ENTER_QUO_CACHE	: L_NORM NOVALUE; ! make a new cache entry

GLOBAL ROUTINE CHARGE_QUOTA (UIC, BLOCK_COUNT, FLAGS) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine locates the quota file entry identified by the UIC
!	given and checks and/or charges the indicated number of blocks,
!	as specified by the flags.
!
! CALLING SEQUENCE:
!	CHARGE_QUOTA (ARG1, ARG2, ARG3)
!
! INPUT PARAMETERS:
!	ARG1: UIC of entry to charge
!	ARG2: number of blocks to charge (negative to credit)
!	ARG3: bit encoded flags
!	      bit 0 set to check if quota will be exceeded
!	      bit 1 set to actually charge blocks to the quota entry
!
! IMPLICIT INPUTS:
!	IO_PACKET: user's I/O packet
!	CURRENT_RVN: RVN of volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	quota file modified
!
!--


BEGIN

MAP
	FLAGS		: BITVECTOR;	! flags argument

LABEL
	CHECK_QUOTA;			! block of code to check quota

LOCAL
	SAVE_RVN,			! place to save current RVN
	Q_RECORD	: REF BBLOCK;	! address of quota file record

BIND_COMMON;

EXTERNAL ROUTINE
	SWITCH_VOLUME	: L_NORM;	! switch to desired RVN


! Save the current RVN and then switch context to the root RVN.
! First locate the quota file record. If there is no quota file enabled, this
! routine is a NOP.
!

SAVE_RVN = .CURRENT_RVN;
SWITCH_VOLUME (1);

CHECK_QUOTA: BEGIN

Q_RECORD = SEARCH_QUOTA (.UIC, 0, 0, 1);
IF .Q_RECORD EQL -1 THEN LEAVE CHECK_QUOTA;

! Check for quota exceeded if requested and the user does not have EXQUOTA
! privilege. If we are to check, lack of a quota record is an error; if
! we do not check, this routine is a NOP.
!

IF .FLAGS[QUOTA_CHECK]
AND NOT .BBLOCK [BBLOCK [.IO_PACKET[IRP$L_ARB], ARB$Q_PRIV], PRV$V_EXQUOTA]
THEN
    BEGIN
    IF .Q_RECORD EQL 0
    THEN ERR_EXIT (SS$_EXDISKQUOTA);
    IF .Q_RECORD[DQF$L_USAGE] + .BLOCK_COUNT GTRU .Q_RECORD[DQF$L_PERMQUOTA]
    THEN
	BEGIN
	IF .CURRENT_WINDOW NEQ 0
	THEN
	    BEGIN
	    IF .CURRENT_WINDOW[WCB$V_OVERDRAWN]
	    THEN
		BEGIN
		IF .Q_RECORD[DQF$L_USAGE] + .BLOCK_COUNT GTRU
		   .Q_RECORD[DQF$L_PERMQUOTA] + .Q_RECORD[DQF$L_OVERDRAFT]
		THEN ERR_EXIT (SS$_EXDISKQUOTA)
		ELSE ERR_STATUS (SS$_OVRDSKQUOTA);
		END
	    ELSE
		BEGIN
		CURRENT_WINDOW[WCB$V_OVERDRAWN] = 1;
		ERR_EXIT (SS$_EXDISKQUOTA);
		END;
	    END
	ELSE
	    ERR_EXIT (SS$_EXDISKQUOTA);
	END;
    END

ELSE
    IF .Q_RECORD EQL 0 THEN LEAVE CHECK_QUOTA;

! If the record is to be charged, do so. Check the result to see if it
! is negative; if so, zero it to prevent absurd results.
!

IF .FLAGS[QUOTA_CHARGE]
THEN
    BEGIN
    Q_RECORD[DQF$L_USAGE] = .Q_RECORD[DQF$L_USAGE] + .BLOCK_COUNT;
    IF .Q_RECORD[DQF$L_USAGE] LSS 0
    THEN Q_RECORD[DQF$L_USAGE] = 0;
    WRITE_QUOTA (.Q_RECORD);
    END;

END;					! end of block CHECK_QUOTA

SWITCH_VOLUME (.SAVE_RVN);

END;					! end of routine CHARGE_QUOTA

GLOBAL ROUTINE SEARCH_QUOTA (UIC, FLAGS, START_REC, USE_CACHE) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine searches the quota file for the specified UIC under
!	control of the match flags.
!
! CALLING SEQUENCE:
!	SEARCH_QUOTA (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: UIC to search for
!	ARG2: match control flags from FIB
!	ARG3: record number at which to start
!	ARG4: 1 to find record in the cache
!	      0 to unconditionally go to the quota file
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: address of volume's VCB
!	context set to RVN 1 of volume set
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	QUOTA_RECORD: record number of found record
!	FREE_QUOTA: record number of first free quota file entry
!	QUOTA_INDEX: cache index of cache entry if found
!	DUMMY_REC: filled in with cache contents if found
!
! ROUTINE VALUE:
!	address of quota file record found, 0 if none, -1 if not quota file
!
! SIDE EFFECTS:
!	quota file read, contents of buffer cache altered
!
!--

BEGIN

MAP
	FLAGS		: BITVECTOR;	! match control flags

LITERAL
	ALL_GROUP	= $BITPOSITION (FIB$V_ALL_GRP),
	ALL_MEMBER	= $BITPOSITION (FIB$V_ALL_MEM),
	RECS_PER_BLOCK	= 512 / DQF$C_LENGTH;

LABEL
	QUOTA_SCAN;			! search quota file

LOCAL
	FCB		: REF BBLOCK,	! address of quota file FCB
	QUOTA_CACHE	: REF BBLOCK,	! address of quota cache
	QUOTA_LIST	: REF BBLOCKVECTOR [,VCA$C_QUOLENGTH],
					! address of quota cache entries
	J,				! index into quota cache
	REC_NUM,			! quota file record to read
	FIRST_REC,			! first record in block to use
	VBN,				! block number of quota file
	Q_RECORD	: REF BBLOCK;	! address of quota file record

BIND_COMMON;

EXTERNAL ROUTINE
	ALLOCATION_LOCK	: L_NORM,	! allocation lock serialization
	BUILD_EXT_FCBS	: L_NORM NOVALUE, ! build extension fcb chain.
	SERIAL_FILE	: L_NORM,	! get serialization lock
	REBLD_PRIM_FCB	: L_NORM NOVALUE, ! rebuild fcb from header
	READ_HEADER	: L_NORM,	! read file header
	RELEASE_SERIAL_LOCK : L_NORM NOVALUE, ! release serialization lock
	READ_BLOCK	: L_NORM;	! read a disk block


! Get the FCB address for the quota file. If none, take an error exit.
!

FCB = .CURRENT_VCB[VCB$L_QUOTAFCB];
IF .FCB EQL 0 THEN RETURN -1;

! Serialize quota search using allocation lock.
!

ALLOCATION_LOCK ();

! Check to see if the quota fcb is stale, that is, it has been modified
! on another node.  If so, serialize on the quota file itself, read
! the header and rebuild the fcb.
!

IF .FCB [FCB$V_STALE]
THEN
    BEGIN
    LOCAL
	HEADER,
	SAV_CURRLCKINDX;

    SAV_CURRLCKINDX = .CURR_LCKINDX;

    SERIAL_FILE (FCB [FCB$W_FID]);

! Setting this flag prevents READ_HEADER from modifying FILE_HEADER.
! It is also set when the BUILD_EXT_FCBS routine calls READ_HEADER
! if BUILD_EXT_FCBS is called with the optional fcb argument.
!

    STSFLGS [STS_LEAVE_FILEHDR] = 1;

    HEADER = READ_HEADER (0, .FCB);

    REBLD_PRIM_FCB (.FCB, .HEADER);

    BUILD_EXT_FCBS (.HEADER, .FCB);

    IF .SAV_CURRLCKINDX NEQ .CURR_LCKINDX
    THEN
	BEGIN
	RELEASE_SERIAL_LOCK (.CURR_LCKINDX);
	CURR_LCKINDX = .SAV_CURRLCKINDX;
	END;

! If PRIMARY_FCB is nonzero and not the quota file fcb, and also if
! it is the same lockbasis as the current lock index, then reread
! the header for it to re-establish FILE_HEADER.
!

    IF .PRIMARY_FCB NEQ 0
    THEN
	IF .PRIMARY_FCB NEQ .FCB
	   AND .PRIMARY_FCB [FCB$L_LOCKBASIS] EQL .LB_BASIS [.CURR_LCKINDX]
	THEN
	    READ_HEADER (0, .PRIMARY_FCB);

    END;

! If there are no wild cards in the search, scan the quota cache first.
! If the value block was lost, the cache entry comes back not valid,
! but with contents. In this case, and if this is a write-through operation,
! use the record number in the cache to read the record to save the search.
! As long as the record is read, also update it if the cache entry is dirty.
!

REAL_Q_REC = 0;
QUOTA_CACHE = .CURRENT_VCB[VCB$L_QUOCACHE];
QUOTA_LIST = QUOTA_CACHE[VCA$L_QUOLIST];
IF NOT .FLAGS[ALL_MEMBER] AND NOT .FLAGS[ALL_GROUP]
THEN
    BEGIN
    J = SCAN_QUO_CACHE (.UIC, .USE_CACHE);
    IF .QUOTA_LIST[.J-1, VCA$L_QUORECNUM] NEQ 0
    THEN
	BEGIN
	IF NOT .USE_CACHE
	OR NOT .QUOTA_LIST[.J-1, VCA$V_QUOVALID]
	OR NOT .QUOTA_CACHE[VCA$V_CACHEVALID]
	THEN
	    BEGIN
	    QUOTA_RECORD = .QUOTA_LIST[.J-1, VCA$L_QUORECNUM];
	    REC_NUM = .QUOTA_LIST[.J-1, VCA$L_QUORECNUM] - 1;
	    REAL_Q_REC = READ_BLOCK (.REC_NUM / RECS_PER_BLOCK
				     + .FCB[FCB$L_STLBN], 1, QUOTA_TYPE)
			 + (.REC_NUM MOD RECS_PER_BLOCK) * DQF$C_LENGTH;
	    IF .QUOTA_LIST[.J-1, VCA$V_QUOVALID]
	    THEN
		CLEAN_QUO_CACHE (.J, .REAL_Q_REC)
	    ELSE
		BEGIN
		ENTER_QUO_CACHE (.J, .REAL_Q_REC, 0, .USE_CACHE);
		CH$MOVE (DQF$C_LENGTH, .REAL_Q_REC, DUMMY_REC);
		END;
	    END;
	RETURN DUMMY_REC;
	END;
    END;

! We couldn't find a valid cache entry (either because it's not there
! or the operation won't allow it). Scan the blocks of the quota file,
! looking for a matching record.
!

QUOTA_SCAN: BEGIN

FIRST_REC = .START_REC MOD RECS_PER_BLOCK;
INCR VBN FROM .START_REC/RECS_PER_BLOCK TO .FCB[FCB$L_EFBLK] - 1
DO
    BEGIN
    Q_RECORD = READ_BLOCK (.VBN + .FCB[FCB$L_STLBN],
			   .FCB[FCB$L_EFBLK] - .VBN,
			   QUOTA_TYPE)
	     + .FIRST_REC * DQF$C_LENGTH;

    INCR J FROM .FIRST_REC TO RECS_PER_BLOCK - 1
    DO
	BEGIN
	QUOTA_RECORD = .VBN * RECS_PER_BLOCK + .J + 1;

	IF .Q_RECORD[DQF$V_ACTIVE]
	THEN
	    BEGIN
	    IF  (.FLAGS[ALL_MEMBER] OR .UIC<00,16> EQL .(Q_RECORD[DQF$L_UIC])<00,16>)
	    AND (.FLAGS[ALL_GROUP]  OR .UIC<16,16> EQL .(Q_RECORD[DQF$L_UIC])<16,16>)
	    THEN LEAVE QUOTA_SCAN;
	    END

	ELSE
	    BEGIN
	    IF .FREE_QUOTA EQL 0
	    THEN FREE_QUOTA = .QUOTA_RECORD;
	    END;

	Q_RECORD = .Q_RECORD + DQF$C_LENGTH;
	END;				! end of inner loop

    FIRST_REC = 0;
    END;				! end of block scan loop

IF NOT .FLAGS[ALL_MEMBER] AND NOT .FLAGS[ALL_GROUP]
THEN REL_QUOTA_LOCK (.J);
RETURN 0;				! return 0 if not found
END;					! end of block QUOTA_SCAN

! We have found a record in the quota file. If there were wild cards, now
! scan the quota cache to see if an entry is present. With wild cards, the
! file must be scanned first to be able to return the entries in a coherent
! order; yet we must look at the cache in case a modified entry is present.
!

REAL_Q_REC = .Q_RECORD;
IF .FLAGS[ALL_MEMBER] OR .FLAGS[ALL_GROUP]
THEN
    BEGIN
    J = SCAN_QUO_CACHE (.Q_RECORD[DQF$L_UIC], 0);
    IF .QUOTA_LIST[.J-1, VCA$V_QUOVALID]
    THEN
	BEGIN
	CLEAN_QUO_CACHE (.J, .Q_RECORD);
	RETURN DUMMY_REC;
	END;
    END;

! Finally enter the new record into the quota cache.
!

ENTER_QUO_CACHE (.J, .Q_RECORD, 0, .USE_CACHE);
CH$MOVE (DQF$C_LENGTH, .Q_RECORD, DUMMY_REC);
RETURN DUMMY_REC;

END;					! end of routine SEARCH_QUOTA

GLOBAL ROUTINE WRITE_QUOTA (Q_RECORD) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes the indicated quota record. If a cache entry
!	exists for the record being processed (indicated by the record
!	being the dummy record), we update the cache entry. If we also
!	have the real quota record in memory, then mark it for write-back.
!
!
! CALLING SEQUENCE:
!	WRITE_QUOTA (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of quota record
!
! IMPLICIT INPUTS:
!	REAL_Q_REC: buffer of real quota record if exists
!	QUOTA_INDEX: cache index of cache entry
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	quota cache modified, quota record marked for write-back
!
!--

BEGIN

MAP
	Q_RECORD	: REF BBLOCK;	! address of quota record

BIND_COMMON;

EXTERNAL ROUTINE
	MARK_DIRTY	: L_NORM;	! mark buffer for write back


! If the specified record is the dummy record, there is a cache entry.
! Therefore, update it. Also update the associated real record if there
! is one.
!

IF .Q_RECORD EQL DUMMY_REC
THEN
    BEGIN
    ENTER_QUO_CACHE (.QUOTA_INDEX, .Q_RECORD, .REAL_Q_REC EQL 0, 2);
    IF .REAL_Q_REC NEQ 0
    THEN
	BEGIN
	CH$MOVE (DQF$C_LENGTH, .Q_RECORD, .REAL_Q_REC);
	MARK_DIRTY (.REAL_Q_REC);
	END;
    END

! Otherwise, if there is no cache entry, we just have to mark the
! buffer dirty.
!

ELSE
    MARK_DIRTY (.Q_RECORD);

END;					! end of routine WRITE_QUOTA

ROUTINE SCAN_QUO_CACHE (UIC, MARK_USE) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine scans the quota cache for the indicated UIC. If found,
!	it returns the contents, and marks the entry used if requested.
!
!
! CALLING SEQUENCE:
!	SCAN_QUO_CACHE (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: UIC to search for
!	ARG2: 1 to record new use
!	      0 to not
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	DUMMY_REC: receives contents of cache entry if found
!	QUOTA_INDEX: receives index of cache entry found
!	QUOTA_RECORD: quota file record number of found entry
!
! ROUTINE VALUE:
!	index of entry found
!
! SIDE EFFECTS:
!	quota cache entry modified
!
!--

BEGIN

LITERAL
	RECS_PER_BLOCK	= 512 / DQF$C_LENGTH;

LABEL
	QUOTA_SEARCH;			! body of search code

LOCAL
	QUOTA_CACHE	: REF BBLOCK,	! address of quota cache
	QUOTA_LIST	: REF BBLOCKVECTOR [,VCA$C_QUOLENGTH],
					! address of quota cache entries
	J,				! index into quota cache
	LOWEST_LRU,			! oldest quota LRU index
	LOWEST_J,			! oldest quota cache entry index
	LRU_DELTA,			! LRU index of current entry
	OLD_RECORD	: REF BBLOCK,	! address of old quota record
	REC_NUM,			! quota file record to read
	FCB		: REF BBLOCK;	! address of quota file FCB

EXTERNAL
	PMS$GL_QUOHIT	: ADDRESSING_MODE (GENERAL),
					! count of quota cache hits
	PMS$GL_QUOMISS	: ADDRESSING_MODE (GENERAL);
					! count of quota cache misses

EXTERNAL ROUTINE
	CACHE_LOCK	: L_NORM,	! acquire cache lock
	READ_BLOCK	: L_NORM;	! read a disk block


BIND_COMMON;


! If the cache is not currently marked valid, do so if possible.
! This involves taking out the cache lock if the volume is cluster
! accessible, and checking for quota file writers and a non-null
! cache size.
!

QUOTA_CACHE = .CURRENT_VCB[VCB$L_QUOCACHE];
FCB = .CURRENT_VCB[VCB$L_QUOTAFCB];

IF NOT .QUOTA_CACHE[VCA$V_CACHEVALID]
AND NOT .QUOTA_CACHE[VCA$V_CACHEFLUSH]
THEN
    BEGIN
    IF  .QUOTA_CACHE[VCA$W_QUOSIZE] GTRU 1
    AND NOT .BBLOCK [CURRENT_UCB[UCB$L_DEVCHAR], DEV$V_DMT]
    AND .FCB[FCB$W_WCNT] LEQU 1
    AND
	BEGIN
	IF .BBLOCK [CURRENT_UCB[UCB$L_DEVCHAR2], DEV$V_CLU]
	THEN CACHE_LOCK (.FCB[FCB$L_LOCKBASIS], QUOTA_CACHE[VCA$L_QUOCLKID], 0)
	ELSE 1
	END
    THEN
	QUOTA_CACHE[VCA$V_CACHEVALID] = 1
    ELSE
	QUOTA_CACHE[VCA$V_CACHEFLUSH] = 1;
    END;

! Search the quota cache for an active entry with a matching UIC.
!

QUOTA_SEARCH: BEGIN

QUOTA_LIST = QUOTA_CACHE[VCA$L_QUOLIST];
INCR K FROM 1 TO .QUOTA_CACHE[VCA$W_QUOSIZE]
DO
    BEGIN
    IF  .QUOTA_LIST[.K-1, VCA$L_QUORECNUM] NEQ 0
    AND .QUOTA_LIST[.K-1, VCA$L_QUOUIC] EQL .UIC
    THEN
	BEGIN
	IF .MARK_USE
	THEN
	    BEGIN
	    QUOTA_LIST[.K-1, VCA$W_QUOLRUX] = .QUOTA_CACHE[VCA$W_QUOLRU];
	    QUOTA_CACHE[VCA$W_QUOLRU] = .QUOTA_CACHE[VCA$W_QUOLRU] + 1;
	    END;
	PMS$GL_QUOHIT = .PMS$GL_QUOHIT + 1;
	J = .K;
	LEAVE QUOTA_SEARCH;
	END;
    END;

! We failed to find a match in the quota cache. Search the cache for a free
! entry, or, failing that, the entry with the oldest LRU index.
!

PMS$GL_QUOMISS = .PMS$GL_QUOMISS + 1;
LOWEST_LRU = 0;
LOWEST_J = 1;
INCR J FROM 1 TO .QUOTA_CACHE[VCA$W_QUOSIZE]
DO
    BEGIN
    IF .QUOTA_LIST[.J-1, VCA$L_QUORECNUM] EQL 0
    THEN
	BEGIN
	LOWEST_J = .J;
	EXITLOOP;
	END;
    LRU_DELTA = .QUOTA_CACHE[VCA$W_QUOLRU] - .QUOTA_LIST[.J-1, VCA$W_QUOLRUX];
    IF .LRU_DELTA GTRU .LOWEST_LRU
    THEN
	BEGIN
	LOWEST_LRU = .LRU_DELTA;
	LOWEST_J = .J;
	END;
    END;

! If the cache entry we are about to use contains a modified entry, we must
! read the corresponding record, update it, and write it. If it represents a
! held lock, we must release it.
!

J = .LOWEST_J;
IF  .QUOTA_LIST[.J-1, VCA$V_QUOVALID]
AND .QUOTA_LIST[.J-1, VCA$V_QUODIRTY]
THEN
    BEGIN
    REC_NUM = .QUOTA_LIST[.J-1, VCA$L_QUORECNUM] - 1;
    OLD_RECORD = READ_BLOCK (.REC_NUM / RECS_PER_BLOCK
			     + .FCB[FCB$L_STLBN], 1, QUOTA_TYPE)
		 + (.REC_NUM MOD RECS_PER_BLOCK) * DQF$C_LENGTH;
    CLEAN_QUO_CACHE (.J, .OLD_RECORD);
    END;
REL_QUOTA_LOCK (.J);
END;					! end of block QUOTA_SEARCH

! If the quota cache entry is not marked valid, take out the lock on it.
! If thereafter it is valid, fill in the dummy record with its contents.
!

IF NOT .QUOTA_LIST[.J-1, VCA$V_QUOVALID]
THEN
    BEGIN
    QUOTA_LIST[.J-1, VCA$L_QUOUIC] = .UIC;
    GET_QUOTA_LOCK (.J, LCK$K_PWMODE);
    END;
IF .QUOTA_LIST[.J-1, VCA$V_QUOVALID]
THEN
    BEGIN
    DUMMY_REC[DQF$L_FLAGS] = DQF$M_ACTIVE;
    QUOTA_RECORD = .QUOTA_LIST[.J-1, VCA$L_QUORECNUM];
    DUMMY_REC[DQF$L_UIC] = .QUOTA_LIST[.J-1, VCA$L_QUOUIC];
    CH$MOVE (12, QUOTA_LIST[.J-1, VCA$L_USAGE], DUMMY_REC[DQF$L_USAGE]);
    END;
QUOTA_INDEX = .J;

.J
END;					! end of routine SCAN_QUO_CACHE

GLOBAL ROUTINE GET_QUOTA_LOCK (J, MODE) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine acquires the lock associated with a quota cache
!	entry. The lock is raised to PW, and the value block is stored
!	in the quota cache entry.
!
! CALLING SEQUENCE:
!	GET_QUOTA_LOCK (J, MODE)
!
! INPUT PARAMETERS:
!	J: index of quota cache entry
!	MODE: lock mode to use
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!	CURRENT_RVT: RVT of volume set
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Lock taken out; value block written into cache entry.
!
!--

BEGIN

LOCAL
	CACHE_ENTRY	: REF BBLOCK,	! quota cache entry pointer
	STATUS,				! general status value
	LOCK_FLAGS	: BBLOCK [4],	! flags to $ENQ call
	SAVE_LRU,			! save cache entry LRU index
	RESNAM		: VECTOR [22, BYTE], ! resource name buffer
	RESNAM_D	: VECTOR [2] INITIAL (22, RESNAM);

EXTERNAL ROUTINE
	WAIT_FOR_AST	: L_NORM,	! wait for completion AST
	CONTINUE_THREAD	: L_NORM,	! continue execution thread
	XQP$REL_QUOTA : ADDRESSING_MODE (GENERAL);
					! unlock cache entry on blocking AST

BIND_COMMON;

! If the volume is not cluster accessible, we don't have to bother with
! locks.
!

IF .BBLOCK [CURRENT_UCB[UCB$L_DEVCHAR], DEV$V_ALL]
OR NOT .BBLOCK [CURRENT_UCB[UCB$L_DEVCHAR2], DEV$V_CLU]
THEN RETURN;


! See if we have a lock ID for the cache entry. If so, this is just a
! conversion. Otherwise, generate the resource name, using the facility
! prefix and the volume or volume set name.
!

CACHE_ENTRY = BBLOCKVECTOR [BBLOCK [.CURRENT_VCB[VCB$L_QUOCACHE],
		VCA$L_QUOLIST], .J-1, VCA$R_QUOLOCK; ,VCA$C_QUOLENGTH];

LOCK_FLAGS = LCK$M_SYSTEM + LCK$M_VALBLK + LCK$M_NOQUOTA;

IF .CACHE_ENTRY[VCA$L_QUOLKID] NEQ 0
THEN LOCK_FLAGS[LCK$V_CONVERT] = 1

ELSE
    BEGIN
    CH$MOVE (6, UPLIT BYTE ('F11B$q'), RESNAM[0]);
    CH$MOVE (12,
	     IF .CURRENT_VCB[VCB$W_RVN] EQL 0
	     THEN CURRENT_VCB[VCB$T_VOLCKNAM]
	     ELSE CURRENT_RVT[RVT$T_VLSLCKNAM],
	     RESNAM[6]);
    (RESNAM[18]) = .CACHE_ENTRY[VCA$L_QUOUIC];
    END;

! Acquire the lock.
!

SAVE_LRU = .CACHE_ENTRY[VCA$W_QUOLRUX];
STATUS = $ENQ (EFN    = EFN,
	       LKMODE = .MODE,
	       FLAGS  = .LOCK_FLAGS,
	       LKSB   = CACHE_ENTRY[VCA$R_QUOLOCK],
	       ASTADR = CONTINUE_THREAD,
	       ASTPRM = .BASE,
	       RESNAM = RESNAM_D
	       );
IF NOT .STATUS
THEN
    BEGIN
    CH$FILL (0, VCA$C_QUOLENGTH, .CACHE_ENTRY);
    IF .LOCK_FLAGS[LCK$V_CONVERT]
    THEN BUG_CHECK (XQPERR, FATAL, 'Unexpected lock manager error')
    ELSE ERR_EXIT (.STATUS);
    END;

IF .STATUS EQL SS$_NORMAL
THEN WAIT_FOR_AST ();

! Deal with lock completion and handle eny errors. If the lock comes back
! with value not valid, turn off the valid bit but preserve the contents.
! We will wtill use the record number to avoid a complete search.
!

STATUS = .CACHE_ENTRY[VCA$W_QUOSTATUS];

IF NOT .STATUS
THEN
    BEGIN
    IF .STATUS EQL SS$_VALNOTVALID
    THEN CACHE_ENTRY[VCA$V_QUOVALID] = 0
    ELSE
	BEGIN
	CH$FILL (0, VCA$C_QUOLENGTH, .CACHE_ENTRY);
	IF .LOCK_FLAGS[LCK$V_CONVERT]
	THEN BUG_CHECK (XQPERR, FATAL, 'Unexpected lock manager error')
	ELSE ERR_EXIT (.STATUS);
	END;
    END;

! Having acquired the lock, convert it to system owned.
!

STATUS = $ENQ (EFN    = EFN,
	       LKMODE = .MODE,
	       FLAGS  = LCK$M_NOQUEUE OR LCK$M_SYNCSTS OR LCK$M_CVTSYS OR LCK$M_CONVERT,
	       LKSB   = CACHE_ENTRY[VCA$R_QUOLOCK],
	       BLKAST = XQP$REL_QUOTA,
	       ASTPRM = .CACHE_ENTRY
	       );
IF .STATUS
THEN STATUS = .CACHE_ENTRY[VCA$W_QUOSTATUS];
IF NOT .STATUS
THEN BUG_CHECK (XQPERR, FATAL, 'Unexpected lock manager error');

CACHE_ENTRY[VCA$W_QUOINDEX] = .J;
CACHE_ENTRY[VCA$W_QUOLRUX] = .SAVE_LRU;

END;					! End of routine GET_QUOTA_LOCK

GLOBAL ROUTINE REL_QUOTA_LOCK (J) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine releases the lock associated with a quota cache
!	entry. The value block held in the cache entry is written to
!	the lock.
!
! CALLING SEQUENCE:
!	REL_QUOTA_LOCK (J)
!
! INPUT PARAMETERS:
!	J: index of quota cache entry
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Lock released, value block written, cache entry marked non valid.
!
!--

BEGIN

LOCAL
	CACHE_ENTRY	: REF BBLOCK;	! quota cache entry pointer

BIND_COMMON;


! Release the lock.
!

CACHE_ENTRY = BBLOCKVECTOR [BBLOCK [.CURRENT_VCB[VCB$L_QUOCACHE],
		VCA$L_QUOLIST], .J-1, VCA$R_QUOLOCK; ,VCA$C_QUOLENGTH];

IF .CACHE_ENTRY[VCA$L_QUOLKID] NEQ 0
THEN
    BEGIN

    IF NOT $DEQ (LKID   = .CACHE_ENTRY[VCA$L_QUOLKID],
		 VALBLK = CACHE_ENTRY[VCA$L_QUORECNUM]
		 )
    THEN BUG_CHECK (XQPERR, FATAL, 'Unexpected lock manager error');
    END;

! Mark the cache entry no longer valid.
!

CH$FILL (0, VCA$C_QUOLENGTH, .CACHE_ENTRY);

END;					! End of routine REL_QUOTA_LOCK

GLOBAL ROUTINE CLEAN_QUO_CACHE (J, Q_RECORD) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine updates the indicated quota record buffer from the
!	indicated cache entry, and marks the record dirty and marks the
!	cache entry clean if necessary.
!
!
! CALLING SEQUENCE:
!	CLEAN_QUO_CACHE (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: index in quota cache
!	      0 to not
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!
! OUTPUT PARAMETERS:
!	ARG2: address of record buffer
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	quota cache entry modified, buffer marked dirty
!
!--

BEGIN

MAP
	Q_RECORD	: REF BBLOCK;	! address of quota record

LOCAL
	CACHE_ENTRY	: REF BBLOCK;	! quota cache entry pointer

BIND_COMMON;

EXTERNAL ROUTINE
	MARK_DIRTY	: L_NORM;	! mark buffer for write back


! Copy the cache entry to the record buffer. If the cache entry is marked
! dirty, mark it clean and mark the record dirty.
!

CACHE_ENTRY = BBLOCKVECTOR [BBLOCK [.CURRENT_VCB[VCB$L_QUOCACHE],
		VCA$L_QUOLIST], .J-1, VCA$R_QUOLOCK; ,VCA$C_QUOLENGTH];

Q_RECORD[DQF$L_UIC] = .CACHE_ENTRY[VCA$L_QUOUIC];
CH$MOVE (12, CACHE_ENTRY[VCA$L_USAGE], Q_RECORD[DQF$L_USAGE]);
IF .CACHE_ENTRY[VCA$V_QUODIRTY]
THEN
    BEGIN
    CACHE_ENTRY[VCA$V_QUODIRTY] = 0;
    MARK_DIRTY (.Q_RECORD);
    END;

END;					! end of routine CLEAN_QUO_CACHE

ROUTINE ENTER_QUO_CACHE (J, Q_RECORD, MARK_DIRTY, MARK_USE) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine enters the given quota record into the cache at the
!	indicated cache index. If requested, the cache entry is marked dirty.
!
!
! CALLING SEQUENCE:
!	ENTER_QUO_CACHE (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: index in quota cache
!	ARG2: address of record buffer
!	ARG3: 1 to mark record dirty
!	      0 to not
!	ARG4: 0 to set lowest possible LRU
!	      1 to set current LRU
!	      2 to leave LRU alone
!
! IMPLICIT INPUTS:
!	CURRENT_VCB: VCB of volume
!	QUOTA_RECORD: record number of quota record
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	quota cache entry modified
!
!--

BEGIN

MAP
	Q_RECORD	: REF BBLOCK;	! address of quota record

LOCAL
	QUOTA_CACHE	: REF BBLOCK,	! address of quota cache
	CACHE_ENTRY	: REF BBLOCK;	! quota cache entry pointer

BIND_COMMON;

! Copy the record data to the cache entry. If requested, mark the cache
! entry dirty.
!

QUOTA_CACHE = .CURRENT_VCB[VCB$L_QUOCACHE];
CACHE_ENTRY = BBLOCKVECTOR [BBLOCK [.QUOTA_CACHE, VCA$L_QUOLIST],
		.J-1, VCA$R_QUOLOCK; ,VCA$C_QUOLENGTH];


CACHE_ENTRY[VCA$L_QUOUIC] = .Q_RECORD[DQF$L_UIC];
CH$MOVE (12, Q_RECORD[DQF$L_USAGE], CACHE_ENTRY[VCA$L_USAGE]);
CACHE_ENTRY[VCA$B_QUOFLAGS] = VCA$M_QUOVALID;
CACHE_ENTRY[VCA$W_QUOINDEX] = .J;
CACHE_ENTRY[VCA$L_QUORECNUM] = (IF .Q_RECORD[DQF$V_ACTIVE]
				     THEN .QUOTA_RECORD
				     ELSE 0);
IF .MARK_USE
THEN
    BEGIN
    CACHE_ENTRY[VCA$W_QUOLRUX] = .QUOTA_CACHE[VCA$W_QUOLRU];
    QUOTA_CACHE[VCA$W_QUOLRU] = .QUOTA_CACHE[VCA$W_QUOLRU] + 1;
    END
ELSE IF .MARK_USE EQL 0
THEN
    BEGIN
    CACHE_ENTRY[VCA$W_QUOLRUX] = .QUOTA_CACHE[VCA$W_QUOLRU] - 1^15;
    END;

IF .MARK_DIRTY
THEN CACHE_ENTRY[VCA$V_QUODIRTY] = 1;

END;					! end of routine ENTER_QUO_CACHE

END
ELUDOM
