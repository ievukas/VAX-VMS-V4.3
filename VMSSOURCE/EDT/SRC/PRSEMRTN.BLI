%TITLE 'EDT$PRSEMRTN - parser semantic actions'
MODULE EDT$PRSEMRTN (				! Parser semantic actions
		IDENT = 'V04-000'			! File: PRSEMRTN.BLI Edit: JBS1023
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Parser semantic actions.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: December 12, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 25-Feb-1981.  This module was created by
!	extracting routine SEM_ROUTINES from module PARSER.
! 1-002	- Regularize headers.  JBS 12-Mar-1981
! 1-003	- Use the ASSERT macro.  JBS 01-Jun-1981
! 1-004	- Use the new message codes.  JBS 05-Aug-1981
! 1-005	- In a substitute command, don't allow the scanner to swallow
!	   a quoted string after the command, since SUBSTITUTE has its
!	   own syntax for its two strings.  JBS 26-Aug-1981
! 1-006	- Add PREV_RANGE, the back pointer for NEXT_RANGE.  JBS 02-Nov-1981
! 1-007	- Don't scan too far if the SUBSTITUTE command is ill-formed.  JBS 28-Dec-1981
! 1-008	- Make the NEXT command have the same fix from edit 1-005 as the SUBSTITUTE
!	   NEXT command.  JBS 04-Jan-1982
! 1-009 - Change index for line numbers from 10 digits to 15.  SMB 18-Jan-1982
! 1-010 - Add error checks for line numbers out of range.  SMB 06-Feb-1982
! 1-011	- Correct the file name scanner so it doesn't loop on an unquoted string.  JBS 10-Feb-1982
! 1-012	- Don't let a key number be larger than 21.  JBS 10-Feb-1982
! 1-013	- Add a missing dot in edit 1-011.  JBS 13-Feb-1982
! 1-014 - Fix bad range check from edit 1-011.  SMB 15-Feb-1982
! 1-015 - Change range check and error code (part of 1-011 problem).  SMB 16-Feb-1982
! 1-016 - Set define key flag so we can accept quoted key. STS 07-Apr-1982
! 1-017 - Delete reference to edt$$g_pa_keyval. STS 09-Apr-1982
! 1-018	- Make TAB_COUNT signed.  JBS 21-Apr-1982
! 1-019	- Change alphanumeric test.  JBS 19-Jul-1982
! 1-020	- New implementation of defined keys.  JBS 13-Aug-1982
! 1-021 - modify to use new 48 bit arith macro. STS 01-Oct-1982
! 1-022 - Modify to use new compare macro. STS 20-Oct-1982
! 1-023	- Add VT220 support conditional.  JBS 11-Feb-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$PA_SEMRUT;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

REQUIRE 'EDTSRC:PARLITS';

LIBRARY 'EDTSRC:KEYPADDEF';

LIBRARY 'EDTSRC:SUPPORTS';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$PA_SEMRUT  - parser semantic actions'

GLOBAL ROUTINE EDT$$PA_SEMRUT (			! Parser semantic actions
    WHICH, 					! Action number to perform
    OPERAND					! Token
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	The semantic actions for the parser.  Which specifies which of the
!	actions to perform.  Operand is the index of the token which matched
!	if the semantic routine was called as a result of a select operator.
!
! FORMAL PARAMETERS:
!
!  WHICH		Action number to perform
!
!  OPERAND		Token which matched
!
! IMPLICIT INPUTS:
!
!	EDT$$A_CMD_END
!	EDT$$C_PA_CH
!	EDT$$G_PA_CURCMD
!	EDT$$A_PA_CURTOK
!	EDT$$G_PA_CURTOKLEN
!	EDT$$L_PA_NUMVAL
!	EDT$$G_PA_PCENT
!	EDT$$A_PA_PRVTOK
!	EDT$$G_PA_PRVTOKLEN
!	EDT$$G_PA_SP
!	EDT$$Z_PA_THRURNG
!	EDT$$G_PA_TOKCLASS
!	EDT$$L_LNO0
!	EDT$$G_TAB_SIZ
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_PA_CURCMD
!	EDT$$G_PA_ERRNO
!	EDT$$Z_PA_CURRNG
!	EDT$$Z_PA_BUFRNG
!	EDT$$Z_PA_ANDLSTHD
!	EDT$$A_CMD_BUF
!	EDT$$G_PA_NOQUO
!
! ROUTINE VALUE:
!
!	0 = failure, 1 = success
!
! SIDE EFFECTS:
!
!	MANY
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$PA_SCANTOK : NOVALUE,		! Get the next token
	EDT$$PA_APPDIG,
	EDT$$PA_GETCH : NOVALUE,		! Get the next character from the input line
	EDT$$PA_CRERNGNOD,			! Create a range node
	EDT$$PA_NEW_NOD;			! Create a semantic node

    EXTERNAL
	EDT$$L_MAX_LINES,			! maximum line number value
	EDT$$A_CMD_BUF,				! Pointer into command buffer.
	EDT$$A_CMD_END,				! Pointer to end of current command.
	EDT$$Z_PA_ANDLSTHD : REF NODE_BLOCK,
	EDT$$Z_PA_BUFRNG : REF NODE_BLOCK,
	EDT$$C_PA_CH,				! the currently being processed character
	EDT$$G_PA_CURCMD : REF NODE_BLOCK,
	EDT$$Z_PA_CURRNG : REF NODE_BLOCK,	! the current range node
	EDT$$A_PA_CURTOK,			! start of the current token
	EDT$$G_DEFKEY,
	EDT$$G_PA_CURTOKLEN,			! length of current token
	EDT$$G_PA_ERRNO,			! Error number of parsing error.
	EDT$$L_PA_NUMVAL : LN_BLOCK,		! the value of a numeric literal
	EDT$$G_PA_PCENT,			! Did the keyword contain a percent?
	EDT$$A_PA_PRVTOK,			! Previous token address
	EDT$$G_PA_PRVTOKLEN,			! Previous token length
	EDT$$G_PA_SP,
	EDT$$Z_PA_THRURNG : REF NODE_BLOCK,	! The currently being built thru type range
	EDT$$G_PA_TOKCLASS,			! class of current token
	EDT$$G_PA_NOQUO,			! Don't allow quoted strings in the scanner
	EDT$$L_LNO0 : LNOVECTOR [14],

%IF SUPPORT_VT220
%THEN
	EDT$$B_CHAR_INFO : BLOCKVECTOR [256, 1, BYTE],	! Information about characters
%FI

	EDT$$G_TAB_SIZ;				! Current tab size, for error checking

    MESSAGES ((INVBUFNAM, QUOSTRREQ, NONALPNUM, SUBSTRNUL, UNRCOM, KEYNOTDEF, NUMVALREQ, INVPARFOR, INVVALSET,
	ERRRANSPC, ERRCOMOPT, UNRCOMOPT, COLONREQ, MACKEYREQ, ENTMUSTBE, ASREQ, INVSTR, NUMVALILL));
!

    CASE .WHICH FROM 1 TO NUM_SEM OF
	SET

	[INI_COM] : 				! Initialize for a command
	    BEGIN
!+
! Make sure the last command turned off EDT$$G_PA_NOQUO , otherwise there may
! be subtle interactions of commands.
!-
	    ASSERT (.EDT$$G_PA_NOQUO EQL 0);
	    EDT$$G_DEFKEY = 0;

	    IF (.EDT$$G_PA_CURCMD NEQ 0) THEN EDT$$G_PA_CURCMD [NEXT_COM] = .EDT$$G_PA_SP;

	    IF ((EDT$$G_PA_CURCMD = EDT$$PA_NEW_NOD (COM_NODE, .OPERAND)) EQL 0) THEN RETURN (0);

!+
! If this is the SUBSTITUTE or NEXT command, don't let the scanner take the next token as a quoted string.
!-

	    IF ((.OPERAND EQL 16) OR (.OPERAND EQL 19)) THEN EDT$$G_PA_NOQUO = 1;

	    END;

	[INIRAN] : 				! Initialize for a range
	    BEGIN

	    IF ((EDT$$Z_PA_CURRNG = EDT$$PA_NEW_NOD (RANGE_NODE, .OPERAND)) EQL 0) THEN RETURN (0);

	    IF (.EDT$$G_PA_TOKCLASS EQL CL_NUMBER)	!
	    THEN
		MOVELINE (EDT$$L_PA_NUMVAL, EDT$$Z_PA_CURRNG [RAN_VAL]);

	    END;

	[START_RANGE] :
	    BEGIN

	    IF (.OPERAND NEQ 0)
	    THEN

		IF (EDT$$PA_SEMRUT (INIRAN, .OPERAND + NUM_SLR) EQL 0) THEN RETURN (0);

	    END;

	[BUF_RAN] :
	    BEGIN
	    EDT$$G_PA_ERRNO = EDT$_INVBUFNAM;

	    IF ( NOT EDT$$PA_APPDIG ()) THEN RETURN (0);

	    IF (EDT$$PA_SEMRUT (INIRAN, RAN_BUFFER) EQL 0) THEN RETURN (0);

	    EDT$$Z_PA_CURRNG [BUF_NAME] = .EDT$$A_PA_CURTOK;
	    EDT$$Z_PA_CURRNG [BUF_LEN] = .EDT$$G_PA_CURTOKLEN;
	    EDT$$Z_PA_BUFRNG = .EDT$$Z_PA_CURRNG;
	    EDT$$PA_SCANTOK ();
	    END;

	[APP_NUM] : 				! Append numerics to a name.
	    EDT$$PA_APPDIG ();

	[BUF_RAN2] :
	    BEGIN
	    EDT$$Z_PA_BUFRNG [RANGE1] = .EDT$$Z_PA_CURRNG;
	    EDT$$Z_PA_CURRNG = .EDT$$Z_PA_BUFRNG;
	    END;

	[GETSTR] :
	    BEGIN
	    EDT$$Z_PA_CURRNG [RAN_VAL] = .EDT$$G_PA_PRVTOKLEN;
	    EDT$$Z_PA_CURRNG [STR_PNT] = .EDT$$A_PA_PRVTOK + 1;

	    IF (.EDT$$Z_PA_CURRNG [RAN_TYPE] EQL RAN_MINUS) THEN EDT$$Z_PA_CURRNG [RAN_TYPE] = RAN_MINSTR;

	    END;

	[ALLRAN] : 				! ALL appended to a range
	    BEGIN

	    LOCAL
		SUB_RAN : REF NODE_BLOCK;

	    SUB_RAN = .EDT$$Z_PA_CURRNG;	! Save the first part of the range

	    IF ( NOT EDT$$PA_SEMRUT (INIRAN, RAN_ALL)) THEN RETURN (0);

!+
! Link the original range with the ALL clause.
!-
	    EDT$$Z_PA_CURRNG [NEXT_RANGE] = .SUB_RAN;
	    SUB_RAN [PREV_RANGE] = .EDT$$Z_PA_CURRNG;

	    IF (.EDT$$G_PA_TOKCLASS NEQ CL_STRING)
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_QUOSTRREQ;
		RETURN (0);
		END;

	    EDT$$Z_PA_CURRNG [RAN_VAL] = .EDT$$G_PA_CURTOKLEN;
	    EDT$$Z_PA_CURRNG [STR_PNT] = .EDT$$A_PA_CURTOK + 1;
	    EDT$$PA_SCANTOK ();
	    END;

	[RAN1] :
	    EDT$$G_PA_CURCMD [RANGE1] = .EDT$$Z_PA_CURRNG;

	[RAN2] :
	    EDT$$G_PA_CURCMD [RANGE2] = .EDT$$Z_PA_CURRNG;

	[PLUSRAN] :

	    IF (EDT$$PA_CRERNGNOD (RAN_PLUS) EQL 0) THEN RETURN (0);

	[MINUSRAN] :

	    IF (EDT$$PA_CRERNGNOD (RAN_MINUS) EQL 0) THEN RETURN (0);

	[FORRAN] :

	    IF (EDT$$PA_CRERNGNOD (RAN_FOR) EQL 0) THEN RETURN (0);

	[RANNUM] : 				! value following FOR, +, ORIGINAL and -
	    BEGIN

	    IF ((.EDT$$L_PA_NUMVAL [LN_MD] NEQ 0) OR (.EDT$$L_PA_NUMVAL [LN_HI] NEQ 0))
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_NUMVALILL;
		RETURN (0);
		END;

	    EDT$$Z_PA_CURRNG [RAN_VAL] = .EDT$$L_PA_NUMVAL [LN_LO];
	    END;

	[LINE_NUM_RANGE] : 			! Numeric range value
	    MOVELINE (EDT$$L_PA_NUMVAL, EDT$$Z_PA_CURRNG [RAN_VAL]);

	[LINE_NUM] : 				! the line number
	    BEGIN

	    LOCAL
		MULTIPLIER,
		DIGIT : LN_BLOCK;

!+
! If the line number coming in is greater than maximum allowed before
! multiplication by 10**5, then return error
!-

	    IF (CMPLNO (EDT$$L_PA_NUMVAL, EDT$$L_MAX_LINES) GTR 0)
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_NUMVALILL;
		RETURN (0);
		END;

	    MULTLINE (EDT$$L_LNO0 [5], EDT$$L_PA_NUMVAL, EDT$$L_PA_NUMVAL);

	    IF (CH$RCHAR (.EDT$$A_PA_CURTOK) EQL %C'.')
	    THEN
		BEGIN
		MULTIPLIER = 4;

%IF SUPPORT_VT220
%THEN

		WHILE (.EDT$$B_CHAR_INFO [.EDT$$C_PA_CH, 0, 0, 8, 0] EQL %X'F0') DO
%ELSE

		    WHILE ((.EDT$$C_PA_CH GEQ %C'0') AND (.EDT$$C_PA_CH LEQ %C'9')) DO
%FI

			BEGIN
			BUILDLINE (.EDT$$C_PA_CH - %C'0', DIGIT);

			IF (.MULTIPLIER GEQ 0)
			THEN
			    BEGIN
			    MULTLINE (EDT$$L_LNO0 [.MULTIPLIER], DIGIT, DIGIT);
			    ADDLINE (DIGIT, EDT$$L_PA_NUMVAL);
			    END;

			EDT$$PA_GETCH ();
			MULTIPLIER = .MULTIPLIER - 1;
			END;

		EDT$$PA_SCANTOK ();
		END;

	    END;

	[BIN_RANGE] :
	    BEGIN

	    IF ((EDT$$Z_PA_THRURNG = EDT$$PA_NEW_NOD (RANGE_NODE, 0)) EQL 0) THEN RETURN (0);

	    EDT$$Z_PA_THRURNG [RANGE1] = .EDT$$Z_PA_CURRNG;
	    END;

	[THRU_RAN] :
	    BEGIN
	    EDT$$Z_PA_THRURNG [RAN_TYPE] = RAN_THRU;
	    EDT$$Z_PA_THRURNG [RANGE2] = .EDT$$Z_PA_CURRNG;
	    EDT$$Z_PA_CURRNG = .EDT$$Z_PA_THRURNG;
	    END;

	[AND_HEAD] :
	    EDT$$Z_PA_ANDLSTHD = .EDT$$Z_PA_CURRNG;

	[AND_NEXT] : 				! AND or a comma
	    BEGIN

	    LOCAL
		RANGE : REF NODE_BLOCK;

	    RANGE = .EDT$$Z_PA_ANDLSTHD;
!+
! Find the last range so we can put the new one on the end.
!-

	    WHILE (.RANGE [NEXT_RANGE] NEQA 0) DO
		RANGE = .RANGE [NEXT_RANGE];

	    RANGE [NEXT_RANGE] = .EDT$$Z_PA_CURRNG;
	    EDT$$Z_PA_CURRNG [PREV_RANGE] = .RANGE;
	    EDT$$Z_PA_CURRNG = .EDT$$Z_PA_ANDLSTHD;
	    END;

	[WHICHSUBS] : 				! Distinguish SUBSTITUTE from SUBSTITUTE NEXT
	    BEGIN

	    IF (.OPERAND EQL 1) THEN EDT$$G_PA_CURCMD [COM_NUM] = COM_SUBS_NEXT;

!+
! Since we are in what seemed to have been a substitute command, the EDT$$G_PA_NOQUO
! flag must be set.
!-
	    ASSERT (.EDT$$G_PA_NOQUO);
	    END;

	[STRINGS] : 				! Get the search and replace strings for SUBSTITUTE
	    BEGIN

	    LOCAL
		STRNODE : REF NODE_BLOCK,
		CURSOR,
		QUOTE;

!+
! The EDT$$G_PA_NOQUO  flag had better be set, to keep the scanner from having
! swallowed a quoted string.  Consider the following case:
!
!	*SUBSTITUTE 'A'B'
!
! We must use ' as the delimeter, but the scanner would absorb 'A' as a single (string)
! token unless the flag is set.  We clear the flag here since we will not be calling
! the scanner again until after we have scanned out two strings.
!-
	    ASSERT (.EDT$$G_PA_NOQUO);
	    EDT$$G_PA_NOQUO = 0;

	    IF ((STRNODE = EDT$$PA_NEW_NOD (STR_NODE, 0)) EQL 0) THEN RETURN (0);

	    EDT$$G_PA_CURCMD [STR_PNT] = .STRNODE;

	    IF (.EDT$$G_PA_TOKCLASS NEQ CL_SPECIAL)
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_NONALPNUM;
		RETURN (0);
		END;

	    QUOTE = CH$RCHAR (.EDT$$A_PA_CURTOK);
	    CURSOR = CH$PLUS (.EDT$$A_PA_CURTOK, 1);
	    STRNODE [SRCHADDR] = .CURSOR;

	    UNTIL ((CH$RCHAR (.CURSOR) EQL .QUOTE) OR (.CURSOR GEQU .EDT$$A_CMD_END)) DO
		CURSOR = CH$PLUS (.CURSOR, 1);

	    STRNODE [SRCHLEN] = .CURSOR - .EDT$$A_PA_CURTOK - 1;
	    CURSOR = CH$PLUS (.CURSOR, 1);

	    IF (.CURSOR GTRU .EDT$$A_CMD_END)
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_INVSTR;
		RETURN (0);
		END;

	    STRNODE [REPADDR] = .CURSOR;

	    UNTIL ((CH$RCHAR (.CURSOR) EQL .QUOTE) OR (.CURSOR GEQU .EDT$$A_CMD_END)) DO
		CURSOR = CH$PLUS (.CURSOR, 1);

	    STRNODE [REPLEN] = .CURSOR - .STRNODE [REPADDR];
	    EDT$$A_CMD_BUF = CH$PLUS (.CURSOR, 1);
	    EDT$$PA_GETCH ();
	    EDT$$PA_SCANTOK ();

	    IF ((.STRNODE [REPLEN] EQL 0) AND (.STRNODE [SRCHLEN] EQL 0))
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_SUBSTRNUL;
		RETURN (0);
		END;

	    END;

	[DEFAULT_STRINGS] : 			! We will be using the strings from the last SUB or SUB NEXT
	    BEGIN
	    ASSERT (.EDT$$G_PA_NOQUO);
	    EDT$$G_PA_NOQUO = 0;
	    END;

	[FILSPC] : 				! Scan a file name
	    BEGIN

	    LOCAL
		SCAN_DONE,			! 1 = file name scan complete
		CHAR,				! Current character being processed
		QUOTE_CHAR;			! 0 = not in a string, non-zero = right quote character

	    ASSERT ((%C'"' NEQ 0) AND (%C'''' NEQ 0));
	    EDT$$G_PA_CURCMD [FILSPEC] = .EDT$$A_PA_CURTOK;
	    EDT$$A_CMD_BUF = .EDT$$A_PA_CURTOK;
	    SCAN_DONE = 0;
	    QUOTE_CHAR = 0;

	    WHILE ( NOT .SCAN_DONE) DO

		IF CH$PTR_GTR (.EDT$$A_CMD_BUF, .EDT$$A_CMD_END)
		THEN
		    SCAN_DONE = 1
		ELSE
		    BEGIN
		    CHAR = CH$RCHAR_A (EDT$$A_CMD_BUF);

		    IF (.QUOTE_CHAR EQL 0)
		    THEN

			SELECTONE .CHAR OF
			    SET

			    [%C' ', %C'/'] :
				SCAN_DONE = 1;

			    [%C'"', %C''''] :
				QUOTE_CHAR = .CHAR;

			    [OTHERWISE] :
				BEGIN
				0
				END;
			    TES

		    ELSE

			IF (.CHAR EQL .QUOTE_CHAR) THEN QUOTE_CHAR = 0;

		    END;

	    EDT$$C_PA_CH = .CHAR;
	    EDT$$G_PA_CURCMD [FSPCLEN] = .EDT$$A_CMD_BUF - .EDT$$G_PA_CURCMD [FILSPEC] - 1;
	    EDT$$PA_SCANTOK ();
	    END;

	[HELPSTR] :
	    BEGIN
	    EDT$$G_PA_CURCMD [FILSPEC] = .EDT$$A_PA_CURTOK;
	    EDT$$A_CMD_BUF = .EDT$$A_PA_CURTOK;
	    EDT$$PA_GETCH ();

	    WHILE ((.EDT$$C_PA_CH NEQ %C'!') AND (.EDT$$C_PA_CH NEQ %C';')) DO
		EDT$$PA_GETCH ();

	    EDT$$G_PA_CURCMD [FSPCLEN] = .EDT$$A_CMD_BUF - .EDT$$G_PA_CURCMD [FILSPEC] - 1;
	    EDT$$PA_SCANTOK ();
	    END;

	[CHKALPHA] :

	    IF ((.EDT$$G_PA_TOKCLASS EQL CL_NAME) AND ( NOT .EDT$$G_PA_PCENT))
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_UNRCOM;
		RETURN (0);
		END;

	[A_SWITCH] :
	    BEGIN

	    LOCAL
		SWITCH_NODE : REF NODE_BLOCK;

	    IF (.EDT$$G_PA_CURCMD [SWITS] EQL 0)
	    THEN
		BEGIN

		IF ((SWITCH_NODE = EDT$$PA_NEW_NOD (SW_NODE, 0)) EQL 0) THEN RETURN (0);

		EDT$$G_PA_CURCMD [SWITS] = .SWITCH_NODE;
		END
	    ELSE
		SWITCH_NODE = .EDT$$G_PA_CURCMD [SWITS];

	    IF ((.SWITCH_NODE [SW_BITS] AND (1^.OPERAND)) NEQ 0) THEN RETURN (0);

	    SWITCH_NODE [SW_BITS] = (.SWITCH_NODE [SW_BITS] OR (1^.OPERAND));
	    END;

	[SWITCH_1] :
	    BEGIN

	    BIND
		SWITCH = .EDT$$G_PA_CURCMD [SWITS] : NODE_BLOCK;

	    MOVELINE (EDT$$L_PA_NUMVAL, SWITCH [SW_VAL1]);
	    SWITCH [SEQ_VAL] = 1;
	    END;

	[SWITCH_2] :
	    BEGIN

	    BIND
		SWITCH = .EDT$$G_PA_CURCMD [SWITS] : NODE_BLOCK;

	    MOVELINE (EDT$$L_PA_NUMVAL, SWITCH [SW_VAL2]);
	    END;

	[SETTYPE] :
	    EDT$$G_PA_CURCMD [SET_TYPE] = .OPERAND;

	[SETVAL] :
	    EDT$$G_PA_CURCMD [SET_VAL] = .OPERAND;

	[SET_ARG] :
	    BEGIN

	    IF ((.EDT$$L_PA_NUMVAL [LN_LO] GTRU 32767) OR 	!
		(.EDT$$L_PA_NUMVAL [LN_MD] NEQ 0) OR 	!
		(.EDT$$L_PA_NUMVAL [LN_HI] NEQ 0))
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_NUMVALILL;
		RETURN (0);
		END;

	    EDT$$G_PA_CURCMD [SET_VAL] = .EDT$$L_PA_NUMVAL [LN_LO];
	    END;

	[SET_ARG1] :
	    BEGIN

	    IF ((.EDT$$L_PA_NUMVAL [LN_LO] GTRU 32767) OR 	!
		(.EDT$$L_PA_NUMVAL [LN_MD] NEQ 0) OR 	!
		(.EDT$$L_PA_NUMVAL [LN_HI] NEQ 0))
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_NUMVALILL;
		RETURN (0);
		END;

	    EDT$$G_PA_CURCMD [SET_VAL1] = .EDT$$L_PA_NUMVAL [LN_LO];
	    END;

	[DEF_KEY] : 				! Start of key description
	    BEGIN
	    EDT$$G_DEFKEY = 1;
	    END;

	[KEY_NUM] : 				! Key number
	    BEGIN
	    EDT$$G_PA_CURCMD [KEY_VAL] = .EDT$$L_PA_NUMVAL [LN_LO] + K_KPAD_BASE;

	    IF ((.EDT$$L_PA_NUMVAL [LN_LO] GTRU 32767) OR 	!
		(.EDT$$L_PA_NUMVAL [LN_MD] NEQ 0) OR 	!
		(.EDT$$L_PA_NUMVAL [LN_HI] NEQ 0))
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_NUMVALILL;
		RETURN (0);
		END;

	    IF (.EDT$$L_PA_NUMVAL [LN_LO] GTR 21)
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_KEYNOTDEF;
		RETURN (0);
		END;

	    END;

	[GOLD_KEY_NUM] : 			! GOLD key number
	    BEGIN
	    EDT$$G_PA_CURCMD [KEY_VAL] = .EDT$$L_PA_NUMVAL [LN_LO] + K_KPAD_BASE + K_GOLD_BASE;

	    IF ((.EDT$$L_PA_NUMVAL [LN_LO] GTRU 32767) OR 	!
		(.EDT$$L_PA_NUMVAL [LN_MD] NEQ 0) OR 	!
		(.EDT$$L_PA_NUMVAL [LN_HI] NEQ 0))
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_NUMVALILL;
		RETURN (0);
		END;

	    IF (.EDT$$L_PA_NUMVAL [LN_LO] GTR 21)
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_KEYNOTDEF;
		RETURN (0);
		END;

	    END;

	[DEF_GOLD_DEL] :
	    BEGIN
	    EDT$$G_PA_CURCMD [KEY_VAL] = ASC_K_DEL + K_GOLD_BASE;
	    END;

	[DEF_DELETE] :
	    BEGIN
	    EDT$$G_PA_CURCMD [KEY_VAL] = ASC_K_DEL;
	    END;

	[DEF_CHAR] :
	    BEGIN
	    EDT$$G_PA_ERRNO = EDT$_KEYNOTDEF;
	    RETURN (0);
	    END;

	[DEF_GOLD_CHAR] :
	    BEGIN

	    LOCAL
		CHAR;

	    CHAR = CH$RCHAR (.EDT$$A_PA_CURTOK);
	    EDT$$G_PA_CURCMD [KEY_VAL] = .CHAR + K_GOLD_BASE;

	    IF ((.EDT$$G_PA_CURTOKLEN NEQ 1) OR 	! Other than one char in string

%IF SUPPORT_VT220
%THEN
		(.EDT$$B_CHAR_INFO [.CHAR, 0, 0, 8, 0] EQL %X'F0') OR 	! Digit
%ELSE
		((.CHAR GEQ %C'0') AND (.CHAR LEQ %C'9')) OR 	! Digit
%FI

		(.CHAR LSS 32) OR 		! C0 control char (must use CONTROL)
		(.CHAR GTR 255) OR 		! Not a character
		((.CHAR GEQ 128) AND (.CHAR LSS 128 + 32)) OR 	! C1 control char
		(.CHAR EQL ASC_K_DEL))		! DEL (must use DELETE)
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_KEYNOTDEF;
		RETURN (0);
		END;

	    EDT$$PA_SCANTOK ();
	    END;

	[GOLD_CONT] :
	    BEGIN

	    LOCAL
		CHAR;

	    CHAR = CH$RCHAR (.EDT$$A_PA_CURTOK) - 64;
	    EDT$$G_PA_CURCMD [KEY_VAL] = .CHAR + K_GOLD_BASE;

	    IF ((.EDT$$G_PA_CURTOKLEN NEQ 1) OR 	!
		(.CHAR LSS 0) OR 		!
		(.CHAR GTR 255) OR 		!
		((.CHAR GEQ 32) AND (.CHAR LSS 128)) OR 	!
		(.CHAR GEQ 128 + 32))
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_KEYNOTDEF;
		RETURN (0);
		END;

	    EDT$$PA_SCANTOK ();
	    END;

	[CONT_CHAR] :
	    BEGIN

	    LOCAL
		CHAR;

	    CHAR = CH$RCHAR (.EDT$$A_PA_CURTOK) - 64;
	    EDT$$G_PA_CURCMD [KEY_VAL] = .CHAR;

	    IF ((.EDT$$G_PA_CURTOKLEN NEQ 1) OR 	!
		(.CHAR LSS 0) OR 		!
		(.CHAR GTR 255) OR 		!
		((.CHAR GEQ 32) AND (.CHAR LSS 128)) OR 	!
		(.CHAR GEQ 128 + 32))
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_KEYNOTDEF;
		RETURN (0);
		END;

	    EDT$$PA_SCANTOK ();
	    END;

	[DEF_FUN] :
	    BEGIN
	    EDT$$G_PA_CURCMD [KEY_VAL] = .EDT$$L_PA_NUMVAL [LN_LO] + K_FUN_BASE;

	    IF ((.EDT$$L_PA_NUMVAL [LN_LO] GTRU 32767) OR 	!
		(.EDT$$L_PA_NUMVAL [LN_MD] NEQ 0) OR 	!
		(.EDT$$L_PA_NUMVAL [LN_HI] NEQ 0))
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_NUMVALILL;
		RETURN (0);
		END;

	    IF (.EDT$$L_PA_NUMVAL [LN_LO] GTR K_MAX_FUN_VAL)
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_KEYNOTDEF;
		RETURN (0);
		END;

	    END;

	[DEF_GOLD_FUN] :
	    BEGIN
	    EDT$$G_PA_CURCMD [KEY_VAL] = .EDT$$L_PA_NUMVAL [LN_LO] + K_FUN_BASE + K_GOLD_BASE;

	    IF ((.EDT$$L_PA_NUMVAL [LN_LO] GTRU 32767) OR 	!
		(.EDT$$L_PA_NUMVAL [LN_MD] NEQ 0) OR 	!
		(.EDT$$L_PA_NUMVAL [LN_HI] NEQ 0))
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_NUMVALILL;
		RETURN (0);
		END;

	    IF (.EDT$$L_PA_NUMVAL [LN_LO] GTR K_MAX_FUN_VAL)
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_KEYNOTDEF;
		RETURN (0);
		END;

	    END;

	[AS_STRING] :
	    BEGIN
	    EDT$$G_PA_CURCMD [AS_STR] = .EDT$$A_PA_PRVTOK + 1;
	    EDT$$G_PA_CURCMD [AS_LEN] = .EDT$$G_PA_PRVTOKLEN;
	    END;

	[INIT_SEQ] :
	    BEGIN

	    BIND
		SWIT = .EDT$$G_PA_CURCMD [SWITS] : NODE_BLOCK;

	    MOVELINE (EDT$$L_LNO0 [5], SWIT [SW_VAL1]);
	    MOVELINE (EDT$$L_LNO0 [5], SWIT [SW_VAL2]);
	    SWIT [SEQ_VAL] = 0;
	    END;

	[DEF_MAC] :
	    BEGIN
	    EDT$$G_PA_CURCMD [RANGE1] = .EDT$$Z_PA_CURRNG;
	    EDT$$G_PA_CURCMD [COM_NUM] = COM_DEF_MAC;
	    END;

	[TABCOUNT] :
	    BEGIN

	    LOCAL
		NEG;

	    NEG = 0;

	    IF (CH$RCHAR (.EDT$$A_PA_CURTOK) EQL %C'-')
	    THEN
		BEGIN
		NEG = .NEG + 1;
		EDT$$PA_SCANTOK ();
		END;

	    IF (.EDT$$G_PA_TOKCLASS NEQ CL_NUMBER)
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_NUMVALREQ;
		RETURN (0);
		END;

	    IF ((.EDT$$L_PA_NUMVAL [LN_LO] GTRU 32767) OR 	!
		(.EDT$$L_PA_NUMVAL [LN_MD] NEQ 0) OR 	!
		(.EDT$$L_PA_NUMVAL [LN_HI] NEQ 0))
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_NUMVALILL;
		RETURN (0);
		END;

	    IF ((.EDT$$L_PA_NUMVAL [LN_LO]*.EDT$$G_TAB_SIZ) GTR 255)
	    THEN
		BEGIN
		EDT$$G_PA_ERRNO = EDT$_NUMVALILL;
		RETURN (0);
		END;

	    IF .NEG
	    THEN
		EDT$$G_PA_CURCMD [TAB_COUNT] = -.EDT$$L_PA_NUMVAL [LN_LO]
	    ELSE
		EDT$$G_PA_CURCMD [TAB_COUNT] = .EDT$$L_PA_NUMVAL [LN_LO];

	    EDT$$PA_SCANTOK ();
	    END;

	[BAD_PARAM] :
	    EDT$$G_PA_ERRNO = EDT$_INVPARFOR;

	[BAD_VALUE] :
	    EDT$$G_PA_ERRNO = EDT$_INVVALSET;

	[REQ_NUM] :
	    EDT$$G_PA_ERRNO = EDT$_NUMVALREQ;

	[REQ_STRING] :
	    EDT$$G_PA_ERRNO = EDT$_QUOSTRREQ;

	[BAD_RANGE] :
	    EDT$$G_PA_ERRNO = EDT$_ERRRANSPC;

	[BAD_OPTION] :
	    EDT$$G_PA_ERRNO = EDT$_ERRCOMOPT;

	[UNREC_OPTION] :
	    EDT$$G_PA_ERRNO = EDT$_UNRCOMOPT;

	[REQ_COLON] :
	    EDT$$G_PA_ERRNO = EDT$_COLONREQ;

	[MACORKEY] :
	    EDT$$G_PA_ERRNO = EDT$_MACKEYREQ;

	[ENTITY_ERR] :
	    EDT$$G_PA_ERRNO = EDT$_ENTMUSTBE;

	[REQ_AS] :
	    BEGIN
	    EDT$$G_DEFKEY = 0;			! don't accept quoted key anymore
	    EDT$$G_PA_ERRNO = EDT$_ASREQ;
	    END;

	[NO_ACTION] :
	;

	[OUTRANGE] :
	    ASSERT (0);
	TES;

    RETURN (1);
    END;					! of routine EDT$$PA_SEMRUT

!<BLF/PAGE>

END						! of module EDT$PRSEMRTN

ELUDOM
