	.TITLE	FIL$INIWCB - Initialize Window Control Block
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; Facility:
;
;	Executive, bootstrap support subroutines
;
; Abstract:
;
;	This subroutine is called after a file has been opened by the
;	FILEREAD routines to allocate and load a window control block
;	that describes the file.
;
; Environment:
;
;	This routine executes in kernel mode
;
	.SBTTL	Modification History
;
; Author:
;
;	Peter H. Lipman
;
; Creation Date:
;
;	23 September 1976
;
; Modified By:
;
;	V01-001	LJK0209		Lawrence J. Kenah	21-Jun-1983
;		The routine called MMG$INIWCB was removed from the original 
;		image activator system service, renamed to FIL$INIWCB, and 
;		placed into its own module.
;--

	.SUBTITLE	Declarations

; Include Files:

	$DYNDEF				; Dynamic structure type definitions
	$WCBDEF				; Window control block definitions

; External Symbols:

	.DISABLE	GLOBAL

; External Routine

	.EXTERNAL	EXE$ALONONPAGED

; External Global Data Cell

	.EXTERNAL	EXE$GL_SYSWCBFL

; External Status Code

	.EXTERNAL	SS$_NORMAL	; Success status code

	.SUBTITLE	FIL$INIWCB - Allocate and Load WCB
;+
; Functional Description:
;
;	When a file is opened by FILEREAD before the full file system is 
;	functional, this routine is called to allocate and load a window 
;	control block to describe the virtual to logical block mapping of that 
;	file.
;
; Calling Sequence:
;
;	JSB	FIL$INIWCB
;
; Input Parameters:
;
;	R1 = Number of bytes in retrieval pointer buffer
;
;	R2 = Address of retrieval pointer buffer
;
;		Entries are each 8 bytes consisting of a 4-byte block count 
;		and a 4-byte logical block number
;
;	R3 = UCB address
;
; Output Parameters:
;
;	R2 = Window Control Block address if the routine returns successfully
;
; Implicit Output:
;
;	The WCB is added to the linked list of system WCBs
;
; Completion Codes:
;
;	R0 = SS$_NORMAL => WCB successfully allocated
;
;	R0 low bit clear indicates a failure return from EXE$ALONONPAGED
;
; Side Effects:
;
;	The contents of R1 are destroyed.
;-

	.PSECT	YFILEREAD BYTE,EXE

FIL$INIWCB::
	DIVL	#8,R1			; Count of 8-byte retrieval pointers
	PUSHR	#^M<R1,R2,R3,R4,R5>	; Save input and working registers
	CLRL	R4			; Initialize count of 6-byte retrieval
					;  pointers
10$:	ADDL3	#^XFFFE,(R2),R0		; Get rounded block count
	DIVL	#^XFFFF,R0		; Number of required 6-byte pointers 
	ADDL	R0,R4			; Accumulate the count
	ADDL	#8,R2			; Address of next 8-byte retrieval pointer
	SOBGTR	R1,10$			; Loop through them all

	MULL3	#6,R4,R1		; Byte count for 6-byte pointers
	ADDL	#WCB$K_LENGTH,R1	; Desired block size to allocate
	JSB	G^EXE$ALONONPAGED	; Allocate nonpaged dynamic memory
	BLBC	R0,100$			; Branch if failed to allocate

; R1 = Allocated size
; R2 = Address of allocated area

	DIVL3	#8,R1,R3		; Get truncated number of quadwords 
					;  to fill with zeros
	MOVL	R2,R0			; Make a copy of the WCB address
20$:	CLRQ	(R0)+			; Clear the WCB
	SOBGTR	R3,20$			;  (eight bytes at a time)

	MOVW	R1,WCB$W_SIZE(R2)	; Save allocated WCB size
	MOVB	S^#DYN$C_WCB,-
		WCB$B_TYPE(R2)		; Set type field
	MOVB	#<WCB$M_READ ! -	; File accessed for reading
		WCB$M_NOTFCP>,-		;  but not by FCP
		WCB$B_ACCESS(R2)
	MOVW	R4,WCB$W_NMAP(R2)	; Retrieval pointer count
	INCL	WCB$L_STVBN(R2)		; Starting VBN is 1
	INSQUE	(R2),G^EXE$GL_SYSWCBFL	; Maintain a list of these WCBs
	MOVQ	(SP)+,R4

; R4 = Number of 8-byte retrieval pointers
; R5 = Addr of first 8-byte retrieval pointer

	PUSHL	R2			; Save WCB address
	ADDL	#WCB$W_P1_COUNT,R2	; Starting addr in WCB to store 
					;  retrieval pointers

; The following double loop consists of an outer loop that iterates through
; the 8-byte retrieval pointers and an inner loop that makes as many 6-byte
; format retrieval pointers as necessary.  Note that the 6-byte format is
; 2-bytes of block count and 4-bytes of logical block number. The block count
; holds 2**16-1 blocks because 0 really means 0. 

30$:	MOVZWL	#^XFFFF,R3		; Maximum block count for 6-byte 
					;  retrieval pointers
	MOVQ	(R5)+,R0

; R0 = 4-byte block count
; R1 = Logical block number

40$:	CMPL	R3,R0			; Use the minimum block count
	BLEQU	50$			; Branch if maximum is the smaller
	MOVL	R0,R3			; Maximum too big, use what's left
50$:	MOVW	R3,(R2)+		; Store block count
	MOVL	R1,(R2)+		; And starting LBN
	ADDL	R3,R1			; Form next LBN
	SUBL	R3,R0			;  and remaining block count
	BNEQ	40$			; Branch if more blocks to map
	SOBGTR	R4,30$			; Branch if more 8-byte retrieval pointers

	POPR	#^M<R2,R3,R4,R5>	; Restore saved registers

; R2 = WCB address
; R3 = UCB address

	BISB2	#<WCB$M_COMPLETE ! -	; File is completely mapped
		  WCB$M_CATHEDRAL>,-	;  and should remain completely mapped,
		WCB$B_ACCESS(R2)	;  even if the file is extended
	MOVL	R3,WCB$L_ORGUCB(R2)	; Set UCB address in window
	MOVZWL	S^#SS$_NORMAL,R0	; Indicate successful completion
	RSB				;  and return

; Error exit with R0 containing failure status code

100$:	POPR	#^M<R1,R2,R3,R4,R5>	; Restore saved registers
	RSB				;  and return

	.END
