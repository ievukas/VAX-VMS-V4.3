	.TITLE	CONFIGURE - PROCESS TO DYNAMICALLY CONFIGURE DEVICES
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
;
; Facility:  System configuration
;
; Abstract: CONFIGURE is used to dynamically configure VAX MSCP-served and HSC-
;	    served disks and tapes.  
;
; Environment: It is run as a process, in user, exec and kernel modes.
;
; Author:  Maryann Hinden, Creation date:  02-JUN-1983
;
; Modification History:
;
;	V03-004	WHM0001		Bill Matthews		11-Apr-1984
;		Purge working set before hibernating.
;
;	V03-003
;		Change value in BOO$GL_CONADP to indicate noadapter.
;
;	V03-002	WMC0001		Wayne Cardoza		11-Aug-1983
;		Polling must be reenabled in kernel mode.
;
;	V03-001	MSH0001		Maryann Hinden		14-Jul-1983
;		Add jacket routine BOO$CONFIGMN to image, and 
;		remove some code.
;--

;
; Include files:
;
	$ACFDEF				; Define autoconfiguration block
	$IODEF
	$IPLDEF
	$LCKDEF
	$PRCPOLDEF			; Define process poller mailbox offsets
	$SBDEF
	$SSDEF				; System status definitions
	$SYSGMSGDEF			; Sysgen messages
	
;
; Equated Symbols
;
WRTATNFLG = <IO$_SETMODE!IO$M_WRTATTN>
READFLG   = <IO$_READVBLK!IO$M_NOW>

SERVER = 0	; Offsets into process info block
DEVICE = 16
DRIVER = 18
SPPB   = 27

;
; Macros
;
	.MACRO	PRCINFO  SERVER,DEVICE,DRIVER	; Builds process info table

	.PSECT	INFO_BLOCK			; Actual data area

$SERVERNAME$ = .
	.ASCII  /                /		; Reserve room for all 16 chars
$NAMEND$ = .					; Remember end of block
. = $SERVERNAME$				; Get back to beginning
	.ASCII  /SERVER/			; Now store the real name
. = $NAMEND$					; Go to end of block
	.ASCII  /DEVICE/			; Device name
	.ASCIC  /DRIVER/			; Driver name
	.LONG	0				; SPPB for polling this process
	
	.PSECT	INFO_PTR			; A list of pointers to the data
	
	.LONG	$SERVERNAME$

	.ENDM
;
; Own Storage
;
	.PSECT	INFO_PTR
	
PROC_INFO:
	PRCINFO	MSCP$DISK,DU,DUDRIVER		; Build the process info table
	PRCINFO MSCP$TAPE,MU,TUDRIVER
	
	.PSECT  INFO_PTR			
	.LONG	0				; Indicate end of table
	.BLKL	4				; Patch area for four more processes

	.PSECT  INFO_BLOCK
	.BLKB	<SPPB+4>*4			; Patch area for data

	.PSECT	NONPAGED_DATA,NOEXE,WRT
FULL_NAME:	.BLKB	22			; Storage area for cluster dev name
DEVNAME:	.BLKB	 5			; Storage area for short dev name

EXIT_BLOCK:	.LONG	0			; Data block for exit handler
		.LONG	EXIT_HANDLER
		.LONG	1
		.LONG	EXIT_STATUS
EXIT_STATUS:	.BLKL	1

KARGLST:	.LONG	SPPBARG			; Argument list for CANCEL_POLL
SPPBARG:	.LONG	0			; kernel mode routine

MSGBUFSIZ:	.LONG 	PRCPOL$C_SIZ		; Buffer used by mailbox read
MSGBUF:		.BLKB   PRCPOL$C_SIZ

MBXCHAN:	.WORD	0			; Mailbox I/O channel
STATUS_BLOCK:	.BLKL	2			; I/O completion status block

	.PSECT	PAGED_CODE,EXE,WRT
PURGE_LIMITS:					; Limits for purge working set
	.LONG	0				; Purge all of P0 and P1
	.LONG	^X7FFFFFFF

	.PAGE
	.SBTTL	CONFIGURE - Configure devices
;++
;
;  PURPOSE
;	To start polling on cluster members in order to find out about
;	HSC- and MSCP-served devices on other systems.
;
;  INPUT
;	None
;
;  OUTPUT
;       None
;
;  FUNCTIONAL DESCRIPTION
;	This routine requests polling on all systems in the cluster
;	for all processes described in the process information table.
;	The process poller communicates with the CONFIGURE process via
;	a mailbox.  Once the polling requests have been sent out, a
;	write attention AST to the mailbox is issued, and the routine
;	hibernates waiting for input.
;
;	In order to cancel polling (and clean up properly) if the image 
;	should terminate abnormally, this routine declares an exit handler.
;--	

	.ENTRY BOO$CONFIGURE, ^M<R2,R3,R4>

;
;  Create mailbox used to communicate with process poller
;
	$CREMBX_S	prmflg 	= #1,-
			chan	= MBXCHAN,-
			promsk	= #^XFF00
	BLBC	R0,10$

;
;  Declare exit handler to be used when image exits
;
	$DCLEXH_S	desblk	= EXIT_BLOCK
	BLBC	R0,10$

;
;  Now request polling on all processes
;
	$CMKRNL_S	REQ_POLL,(AP)
	BLBC	R0,10$

;
;  We are finished requesting polling.  Now set a write attention AST
;  and hibernate while waiting for responses from the poller.
;  (We assume that at least one call to SCS$POLL_MBX was successful).
;
	$QIO_S	chan	= MBXCHAN,-
		func	= #WRTATNFLG,-
		p1	= FOUND_PROC,-
		p2	= PROC_INFO
	BLBC	R0,10$

	$PURGWS_S inadr	= PURGE_LIMITS	; minimize system resources
	$HIBER_S
	RET	


;
;  An error occured on the create mailbox, when calling the process
;  poller, or when issuing the QIO.  Send out the error message and terminate.
;  The exit handler (if declared at this point) will clean up.
;
10$:	MOVL	#SYSG$_CONFIGERR,R0
	BSBW	PUTERROR
	$EXIT_S
	RET
;
;  Request polling on all processes we want to know about
;
REQ_POLL:	.WORD	0
	
	SETIPL	#IPL$_ASTDEL
	MOVZWL	MBXCHAN,R3		; Get channel address
	MOVAB	PROC_INFO,R4		; Get top of process table
	MOVL	(R4)+,R2		; Get address of first process name 

10$:	MOVL	R3,R0			; Channel # in R0 is arg to call
	JSB	SCS$POLL_MBX		; Request polling for this process

;
; R1 contains address of SPPB - need later to cancel polling
; R2 is preserved and points to process info block
;
	BLBC	R0,20$
	MOVL	R1,SPPB(R2)		; Save SPPB
	MOVL	(R4)+,R2		; Get next process name
	BNEQ	10$			; If NEQ, poll for it
	MOVZBL	#SS$_NORMAL,R0		; Indicate success
	
20$:
	SETIPL	#0			; Lower IPL
	RET				; Return error to caller

	.PAGE
	.SBTTL	FOUND_PROC - A process has been found by the poller
;++
;
;  PURPOSE
;	Routine which is called when the process poller mailbox has been
;	written into.
;
;  INPUT
;	Mailbox messages - implicit
;
;  OUTPUT
;	Processed messages
;
;  FUNCTIONAL DESCRIPTION
;	This routine is called at AST level.  It first re-enables the 
;	write attention AST for the mailbox.  It then reads and processes 
;	messages until there are none left.
;
;--

	.ENTRY	FOUND_PROC, ^M<R2,R3,R4,R5,R6>

;
;  Before doing anything else, we requeue the write attention AST request
;
	$QIO_S	chan	= MBXCHAN,-
		func	= #WRTATNFLG,-
		p1	= FOUND_PROC,-
		p2	= PROC_INFO
	BLBC	R0,30$

;
;  Now, read mailbox messages until there are none left
;
10$:	$QIO_S	chan	= MBXCHAN,-
		func	= #READFLG,-
		iosb	= STATUS_BLOCK,-
		p1	= MSGBUF,-
		p2	= MSGBUFSIZ
	BLBC	R0,40$
	MOVAB	STATUS_BLOCK,R4		; Get address of status block
	CMPW	(R4),#SS$_ENDOFFILE	; Have we read all the msgs?
	BEQL	20$			; If EQL, yes
	BLBC	(R4),40$		; If LBC, then some sort of error
	BSBW	PROCESS_MSG		; Else the poller found something
	BRB	10$			; Look for more messages

20$:	RET

;
;  An error has occurred when trying to requeue the write attention AST.
;  Have the image exit.
;
30$:
	MOVL	#SYSG$_CONFIGERR,R0
	BSBW	PUTERROR
	$EXIT_S
	RET

;
;  An error has occurred when reading the mailbox message.  Send out the
;  error message and dismiss the AST.
;
40$:
	MOVL	#SYSG$_CONFIGERR,R0
	BSBW	PUTERROR
	RET
	.PAGE
	.SBTTL	PROCESS_MSG - Do the work of configuring the device
;++
;
;  PURPOSE
;	Workhorse routine to actually configure the device database 
;	for the server which has been found.
;
;  INPUT
;	MSGBUF - contains the actual message
;
;  OUTPUT
;	Configured device and driver
;
;  FUNCTIONAL DESCRIPTION
;	This routine uses the node name (contained in the message) together
;	with the information associated with the server process name to 
;	construct a cluster device name.  It then calls the connect code
;	to actually construct the device database and load the class driver.
;--

PROCESS_MSG:
	PUSHR	#^M<R2,R3,R4,R5,R6>	; Save registers touched here
	CALLS	#0,BOO$CONRESET		; Reset connect information

;
;  Search through the list of processes we are looking for to see
;  if there is a match  
;
	MOVAB	MSGBUF,R6		; Get address of message buffer
	MOVAB	PROC_INFO,R4		; Get address of process information

10$:	MOVL	(R4)+,R5		; Get next entry
	BEQL 	20$		; If EQL, no more entries & no match
	CMPC3	#16,SERVER(R5),PRCPOL$B_PRCNAM(R6)	; Compare
	BNEQ	10$			; If NEQ, try next one

;
;  A match was found - save info needed for the connect call and build the
;  device name
;
	MNEGL	#1,BOO$GL_CONADP	; Don't use an adapter
	CLRL	BOO$GL_CONCUNIT		; Unit number always 0
	CLRL	BOO$GL_CONAUNIT		; Same for adapter unit
	MOVQ	PRCPOL$L_SYSIDL(R6),BOO$GQ_CONSYSID ; Save the sys ID from msg
	MOVAB	DRIVER(R5),BOO$GL_CONDRV   ; Save the driver name from proc_info
	MOVAB	PRCPOL$T_NODNAM(R6),R2  ; Get node name arg from msg
	PUSHR	#^M<R5>			; Save pointer to proc_info
	MOVAB	DEVICE(R5),R5		; Get device name arg from proc_info
	BSBB	BLDNAME			; Construct the cluster device name
	POPR	#^M<R5>			; Restore

;
;  Connect the device - build the class device database, load the class driver,
;  and initialize the device 
;
	CALLS	#0,BOO$CONNECT
	BLBS	R0,15$
	$CMKRNL_S ROUTIN = 30$		; Polling must be turned on from K mode
	BLBC	R0,25$

;
;  All done
;
15$:	POPR	#^M<R2,R3,R4,R5,R6>	; Restore registers touched here
	RSB

;
;  There was no process name match - we got a spurious mailbox message
;
20$:
	MOVL	#SYSG$_CONFIGERR,R0
25$:	BSBW	PUTERROR
	POPR	#^M<R2,R3,R4,R5,R6>	; Restore registers touched here
	RSB

;
;  There was an error connecting the device - CONNECT already let the
;  world know.
;
30$:
	.WORD	0
	MOVAB	PRCPOL$L_SYSIDL(R6),R2	; Get system ID
	MOVL	SPPB(R5),R1		; Get SPPB
	MOVZBL	#1,R0			; Re-enable polling
	SETIPL	#IPL$_SCS		; Raise IPL
	JSB	G^SCS$POLL_MODE		; Request polling again
	SETIPL	#IPL$_ASTDEL		; Restore IPL
	BLBS	R0,35$
	MOVL	#SYSG$_CANTPOLL,R0	; Indicate unable to restart poll on 
35$:	RET
	.PAGE
	.SBTTL	BLDNAME
;++
;
;  PURPOSE
;	Construct cluster device name given the node name and the
;	device prefix.
;
;  INPUT
;	R2 - Address of the node name string (in counted ASCII)
;	R5 - Address of the device prefix
;
;  OUTPUT
;	FULL_NAME_PTR - contains address of complete device name string
;	BOO$GL_CONDEV - contains pointer into complete device name string,
;			starting at device prefix
;	All registers preserved.
;
;  FUNCTIONAL DESCRIPTION
;	This routine builds a cluster device name of the form:
;
;  byte	        0: count of chars in string
;	   1 to m: node name
;	      m+1: "$"
;      m+2 to m+4: "xxA" , where xx is the device name used by a given server
;--

BLDNAME:
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>
	MOVAB	FULL_NAME,R3		; Pointer to output buffer
	MOVAB	(R3)+,G^FULL_NAME_PTR	; Set up ptr for connect
	ASSUME  SB$T_NODENAME+16,EQ,SB$L_DDB ; Make sure size doesn't change
	MOVZBL	(R2)+,R4		; Get real length of string
	PUSHR	#^M<R2,R4,R5>		; Save regs destroyed by MOVC3
	MOVC3	R4,(R2),(R3)		; Store node name in buffer
	POPR	#^M<R2,R4,R5>		; Restore regs (R3 now points to next 
					; byte in dest. buffer after node name)
	MOVB	#^A/$/,(R3)+		; Set in separator
	MOVW	(R5),(R3)		; Store device prefix
	MOVB	#^A/A/,2(R3)		; Store controller letter 
	ADDB3	#4,R4,FULL_NAME		; String is ASCIC
	MOVL	(R3),DEVNAME+1		; Store device name
	MOVB	#3,DEVNAME		; Store count
	MOVAB	DEVNAME,BOO$GL_CONDEV	; Store address of device string
	POPR	#^M<R0,R1,R2,R3,R4,R5>
	
	RSB
	
	.PAGE
	.SBTTL	EXIT_HANDLER
;++
;
;  PURPOSE
;	Cancel polling on mailbox (if any) at image exit.
;
;  INPUT
;	Saved SPPB addresses in PROC_INFO table.
;
;  OUTPUT
;	Cancelled polling.
;
;--

	.ENTRY	EXIT_HANDLER, ^M<R2,R3,R4>

	MOVAB	PROC_INFO,R3		; Get address of process info table
	
10$:	MOVL	(R3)+,R4		; Point to next info block
	BEQL	20$			; If EQL, end of table
	MOVL	SPPB(R4),SPPBARG	; Get address of SPPB
	BEQL	10$			; If EQL, we haven't polled for this process
	$CMKRNL_S	routin=CANCEL_POLL,- ; Cancel polling
			arglst=KARGLST
	CLRL	SPPB(R4)		; Show no more polling for this process
	BRB	10$			; Loop through table

20$:	$DELMBX_S	chan=MBXCHAN	; Mark mailbox for deletion
	$CMEXEC_S	routin=DQLOCKS	; Dequeue locks
	MOVZWL	#SS$_NORMAL,R0
	RET

;
;  Kernel mode routine running at IPL$_ASTDEL which cancels the polling mailbox.
;
	.ENTRY	CANCEL_POLL,^M<R2>

	SETIPL	#IPL$_ASTDEL
	MOVL	4(AP),R1		; Get SPPB address
	JSB	SCS$CANCEL_MBX		; Cancel polling
	SETIPL	#0
	RET

;
;  Exec mode routine to dequeue all locks held
;
	.ENTRY	DQLOCKS,^M<>

	$DEQ_S	lkid	= #0,-
		flags	= #LCK$M_DEQALL
	RET

	.END	
