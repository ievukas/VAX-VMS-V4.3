%TITLE 'performs outputting of footnotes'
MODULE fooout (	IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					    NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	Puts out footnotes.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	 CREATION DATE:	September, 1978


%SBTTL 'Revision History'
! MODIFIED BY:
!
!	012	RER00012	Ron Randall	13-Apr-1983
!		Fixed obscure bug with numbered footnotes.
!
!	011	RER00011	Ron Randall	06-Apr-1983
!		For DSRPLUS:
!		For numbered footnotes, a line of dashes is output first.
!
!	010	RER00010	Ron Randall	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!--


%SBTTL 'Module Level Declarations'
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

EXTERNAL LITERAL
    RNFILE;				!Error messages

EXTERNAL
    FNCT : FNCT_DEFINITION,
    FNISIZ : FN_INT_SIZE_DEFINITION,
    FOOREC : FOOREC_DEFINITION,
    GCA : GCA_DEFINITION,
    MRA : REF FIXED_STRING,
    PHAN : PHAN_DEFINITION,
    TSF : TSF_DEFINITION;

EXTERNAL
    FOOMRA : FIXED_STRING,		!Substitute MRA.
    FOOTSF : VECTOR [TSF_SIZE];		!Substitute TSF area

EXTERNAL
    FOHMRA,
    FOHTSF;

%IF DSRPLUS %THEN
EXTERNAL
    FRA : FIXED_STRING;

EXTERNAL ROUTINE
    LOUT;
%FI

EXTERNAL ROUTINE
    ERMS,
    FOOFIL,
    OUTLIN,
    OUTPAS;


%SBTTL 'body of routine'
GLOBAL ROUTINE fooout (OUTPUT_COUNT) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOOOUT outputs as many footnotes as it is requested to do.  For each
!	footnote, all it does is read the appropriate number of TSF/MRA pairs
!	from the footnote file, and calls OUTLIN to process the information.
!	The number of TSF/MRA sets for any particular footnote is stored at
!	FNISIZ [n].
!
!	FOOOUT also takes care of index entries that it finds.  The transaction
!	numbers are remapped into a different set, so that they get merged with
!	entries from the main body of the document.
!
!	After FOOOUT has output the footnotes it's supposed to output, it
!	leaves the file open.  It does not close the file, or attempt to clean
!	it up in any way.
!
! FORMAL PARAMETERS:
!
!	OUTPUT_COUNT - Number of footnotes to be output.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    LOCAL
	COUNT,
	FOO_FIRST_XTN,
	HOLD_PAGING,
	MAP_FIRST_XTN,
	STATUS;

    IF  .OUTPUT_COUNT LEQ 0	! If this is a meaningless call,
    THEN
	RETURN			!   ignore it.
    ELSE			! Otherwise, check the validity of the request
	BEGIN

	IF  .OUTPUT_COUNT GTR .FNCT_READY !  If the user asked for more
	THEN				 !  footnotes to be output than are
	    BEGIN			 !  ready to be output,
	    ERMS (RNFILE, CH$PTR (UPLIT ('FOOOUT')), 6); ! report the error
	    COUNT = .FNCT_READY;	 !     and use the real count instead.
	    END
	ELSE				 !  Otherwise, setup to output the #
	    COUNT = .OUTPUT_COUNT;	 !  the user requested.

	END;

    ! NOTE: The change to not using pool for footnotes necessitated changing a
    ! test for .FNPOOL. This change MAY have reintroduced an old bug from
    ! either # 020 or # 025.  Check for it and beware.
    !  RUNOFF V2(1), FN IDENT 008;  9-2-1980. kad.

    IF  FOOFIL (FOO_OPIN) NEQ FOO_NORMAL
    THEN
	BEGIN	! Can't read back footnotes: give up and forget them.
	FOOFIL (FOO_CLOS);
	FOOFIL (FOO_DELE);
	FNCT_COUNT   = 0;
	FNCT_READY   = 0;
	FNCT_WAITING = 0;
	FNCT_OLD     = 0;
	RETURN
	END;

    !The footnote file was opened successfully.
    FNCT_EXPANDING = TRUE;			!Signal the fact that footnotes are being expanded.
    HOLD_PAGING    = .PHAN_PAGING;		!Go into non-paging mode to
    PHAN_PAGING    = FALSE;			!avoid spurious page breaks.
    !Use the footnote working areas to save results in.
    FOHTSF = .TSF;				!Save current status.
    FOHMRA = .MRA;
    TSF = FOOTSF;				!Switch to other working area.
    MRA = FOOMRA;
    FOO_FIRST_XTN = 0;				!Initialize transaction number
    MAP_FIRST_XTN = 0;

%IF DSRPLUS %THEN
    !
    ! If outputting numbered footnotes, first output a line of dashes.
    !
    IF  .FNCT_NUMBERING
    THEN
	BEGIN
	!
	! Initialize fixed string.
	!
	FS_INIT (MRA);
	!
	! Write dashes into the fixed string.
	!
	INCR I FROM 1 TO 15 DO
	    FS_WCHAR (MRA, %C'-');

	!
	! Update the appropriate counts.
	!
	TSF_INT_HL = 15;
	TSF_EXT_HL = 15;
	TSF_INT_VL = 0;
	!
	! Put out the line as OUTLIN does.
	!
	FS_INIT (FRA);
	GCA_LINE_PEND = 0;
	LOUT ();
	END;
%FI

    !Now actually read back the records.
    INCR I FROM 0 TO (.COUNT - 1) DO
    INCR J FROM 1 TO .FNISIZ [.FNCT_OLD + .I] DO		!(J is a dummy counter, not really used anywhere)
	BEGIN
	!Determine which kind of record is coming: a TSF/MRA pair, or a "pass through"
	!record.
	STATUS = FOOFIL (FOO_RHDR);

	IF  .STATUS NEQ FOO_NORMAL
	THEN
	    !Exit loop if record can't be read.
	    EXITLOOP;

	!Is what's coming a TSF/MRA pair, or is it "pass through" information?
	IF  .FOOREC_MAJOR_TYPE EQL FOOREC_MAJ_PASS
	THEN
	    !Direct "pass through" information to the appropriate destination
	    BEGIN
	    !First read the "pass through" information
	    STATUS = FOOFIL (FOO_PREAD);

	    !Make sure the read worked.
	    IF 	.STATUS NEQ FOO_NORMAL
	    THEN
		!Information couldn't be read.  !Quit processing.
		EXITLOOP;

	    !Map transaction number, if any.
	    IF 	.FOOREC_XTN_PTR GTR 0
	    THEN
		!This pass thru record contains a transaction number.  Remap it into something else.
		BEGIN
		BIND
		    PASS_THRU_RECORD = .FOOREC_ADDRESS : VECTOR;
		    !Note:  Never change transaction numbers that are zero.

		IF  .PASS_THRU_RECORD [.FOOREC_XTN_PTR - 1] NEQ 0
		THEN
		    BEGIN

		    IF 	.FOO_FIRST_XTN EQL 0
		    THEN
			!Establish start of mapping from temporarily assigned
			!transaction numbers to the normal set.
			BEGIN
			MAP_FIRST_XTN = .GCA_NORMAL_XTN;	!Establish Y(1).
			FOO_FIRST_XTN = .PASS_THRU_RECORD [.FOOREC_XTN_PTR - 1];	!Establish X(1).
			END;

		    !Translate the temporary transaction number assigned
		    !to this pass thru record.
		    !This is done by simply substituting the current Y(1)
		    !(which is GCA_NORMAL_XTN) for the given X(1).
		    !Then, GCA_NORMAL_XTN is bumped, thereby giving a
		    !new Y(1) for the next such record, if any.
		    PASS_THRU_RECORD [.FOOREC_XTN_PTR - 1] = .GCA_NORMAL_XTN;
		    GCA_NORMAL_XTN = .GCA_NORMAL_XTN + 1;
		    END

		END;

	    OUTPAS (.FOOREC_RECORD_SIZE, .FOOREC_ADDRESS, .FOOREC_XTN_PTR, 
			.FOOREC_MINOR_TYPE)
	    END
	ELSE
	    !It's TSF/MRA information to be processed, so get it and process it.
	    BEGIN
	    FOOFIL (FOO_READ);

	    !Make sure the read worked.
	    IF 	.STATUS NEQ FOO_NORMAL
	    THEN
		!Information couldn't be read.  !Quit processing.
		EXITLOOP;

	    !See if this record has anything to do with indexing.
	    !If so, the record either contains an entry for the index,
	    !or else it contains text that refers to something in the
	    !index (or the index refers to it, depending on your point of
	    !view.
	    !
	    !Records containing index entries always occur before the
	    !record to which they apply; each record describes one
	    !entry.  Further, each index entry has associated with it
	    !a unique number, TSF_FIRST_XTN.  These transaction numbers
	    !are strictly increasing from record to record.  Assume that
	    !there are n such records, and let the transaction numbers
	    !be designated by X(1), X(2), .... X(n).
	    !
	    !Records which refer to index entries come after the index
	    !entry records; they are chained to the index entries by
	    !having the transaction numbers recorded in the corresponding
	    !TSF.  TSF_FIRST_XTN will have the value X(1), and TSF_LAST_XTN
	    !will have the value X(n).  
	    !
	    !The problem is that X(1).....X(n) cannot be directly used
	    !by the routine ASGXTN (which is in the module XTN).  That
	    !is because the association of transaction numbers to pages
	    !requires that the transaction numbers passing through ASGXTN
	    !be steadily increasing, with no gaps, FOR THE ENTIRE FILE.
	    !Now, X(1)......X(n) are steadily increasing, but only
	    !for the footnote.  However, they can be mapped into the
	    !"correct" set, which is accomplished here.
	    !Note that the new set will be designated by Y(1)......Y(n).
	    !Further, Y(1) is guaranteed to be GCA_NORMAL_XTN.
	    IF 	.TSF_FIRST_XTN NEQ 0
	    THEN

		!This record has something to do with indexing.
		IF  .TSF_INDEX
		THEN
		    !Process index entry.
		    BEGIN

		    IF 	.FOO_FIRST_XTN EQL 0
		    THEN
			!Establish start of mapping from temporarily assigned
			!transaction numbers to the normal set.
			BEGIN
			MAP_FIRST_XTN = .GCA_NORMAL_XTN;	!Establish Y(1).
			FOO_FIRST_XTN = .TSF_FIRST_XTN;	!Establish X(1).
			END;

		    !Translate the temporary transaction number assigned
		    !to this index entry into a normal one.
		    !This is done by simply substituting the current Y(1)
		    !(which is GCA_NORMAL_XTN) for the given X(1).
		    !Then, GCA_NORMAL_XTN is bumped, thereby giving a
		    !new Y(1) for the next index entry, if any.
		    TSF_FIRST_XTN  = .GCA_NORMAL_XTN;
		    TSF_LAST_XTN   = .GCA_NORMAL_XTN;
		    GCA_NORMAL_XTN = .GCA_NORMAL_XTN + 1;
		    END
		ELSE
		    !Process reference to index entry.
		    !Notice that earlier, the starting X(1) and Y(1) were
		    !established.  But that was for the start of the
		    !footnote, not for the current record.  In the meantime,
		    !several sets of index entries and references may have
		    !gone through here.  And there is no way to separate them.
		    !That means you can't simply use MAP_FIRST_XTN as the
		    !new Y(1).
		    BEGIN
		    LOCAL
			XTN_OFFSET;

		    !Compute the gap between the X(1) on this record
		    !and that at the start of the footnote processing.
		    !XTN_OFFSET, the result, will be zero for the very first
		    !record that comes through.
		    XTN_OFFSET = .TSF_FIRST_XTN - .FOO_FIRST_XTN;

		    !Now, compute the desired Y(n).
		    !The value MAP_FIRST_XTN+XTN_OFFSET gets you the Y(1)
		    !you need.  The value TSF_LAST_XTN - TSF_FIRST_XTN gets
		    !you "n".
		    TSF_LAST_XTN = .MAP_FIRST_XTN + .XTN_OFFSET + (.TSF_LAST_XTN - .TSF_FIRST_XTN);
		
		    !This is left as an exercise for the reader.
		    TSF_FIRST_XTN = .MAP_FIRST_XTN + .XTN_OFFSET;

		    !As an additional exercise, prove that it's
		    !not necessary to clear FOO_FIRST_XTN now, or later;
		    !Further, show that it doesn't matter whether or
		    !not you do clear it.  Using the results of these
		    !exercises simplify this block of code.
		    END;

	    !Write out the record.
	    OUTLIN (0);				!(Parameter is meaningless in this case).
	    END;

	END;

    TSF = .FOHTSF;				!Restore interrupted status.
    MRA = .FOHMRA;
    PHAN_PAGING = .HOLD_PAGING;
    FNCT_READY  = .FNCT_READY - .COUNT;		!Count off the footnotes that have been output.
    FNCT_COUNT  = .FNCT_COUNT - .COUNT;		!Count off the footnotes that have been output.
    FNCT_OLD    = .FNCT_OLD + .COUNT;		!Update count of obsolete footnotes.
    FNCT_EXPANDING = FALSE;			!No longer expanding footnotes

    !Get rid of the work files if there are no more footnotes to be output.
    IF 	.FNCT_COUNT LEQ 0
    THEN
	!All footnotes have been output.
	BEGIN
	FOOFIL (FOO_CLOS);			!Close the file
	FOOFIL (FOO_DELE);			!and delete it.
	FNCT_OLD     = 0;			!And clean up the tables a bit.
	FNCT_READY   = 0;
	FNCT_WAITING = 0;
	END;

    END;					!End of FOOOUT

END						!End of module
ELUDOM
