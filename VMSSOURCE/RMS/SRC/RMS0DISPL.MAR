	$BEGIN	RMS0DISPL,000,RM$RMS,<DISPATCH FOR DISPLAY OPERATION>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY: RMS32
;
; ABSTRACT:
;		This module is the highest level control routine
;		to perform the $DISPLAY function.
;
; ENVIRONMENT:
;		STAR processor running STARLET EXEC.
;
; AUTHOR: L F Laverdure,	 CREATION DATE: 19-Jan-1978
;
; MODIFIED BY:
;
;	V03-021	JWT0175		Jim Teague		12-Apr-1984
;		Complete the implementation of access mode ATRs.
;
;	V03-020	JWT0173		Jim Teague		 1-Apr-1984
;		Disable access mode ATRs for now.
;
;	V03-019	JWT0172		Jim Teague		28-Mar-1984
;		Put byte specifying EXEC mode access in last longword
;		of ATR work area.  
;
;	V03-018	DAS0001		David Solomon		25-Mar-1984
;		Add $ATRDEF.
;
;	V03-017	DGB0028		Donald G. Blair		22-Mar-1984
;		Have RM$XAB_SCAN process protection xab AFTER call to
;		ACP as part of implementation of ACL's.
;
;	V03-016	JWT0166		Jim Teague		20-Mar-1984
;		Use access-mode attributes in those places where
;		RMS requests the ACP to probe user structures.
;		Also use a dynamically-allocated scratch page for
;		accumulating ATRs for QIOs.
;
;	V03-015	DGB0009		Donald G. Blair		01-Mar-1984
;		Make changes related to ACP calls as part of the 
;		restructuring necessary to implement access mode 
;		protected files.  Also use RM$XABOPN_ARGS rather than
;		XABOPN_ARGS.
;
;	V03-014	RAS0214		Ron Schaefer		22-Nov-1983
;		Fix RAS0210 to set R10 more carefully.
;		Fix network $DISPLAY for task-to-task.
;
;	V03-013	RAS0210		Ron Schaefer		 4-Nov-1983
;		Revise this in several ways:
;		    Use the real FWA for storage;
;		    Use RM$RET_DEV_CHAR to get device characteristics;
;		    Properly store the RFM and ORG fields.
;
;	V03-012	RAS0193		Ron Schaefer		20-Sep-1983
;		Increase size of attribute buffer to 16.
;		This is a temp fix; real solution is to use existing FWA.
;
;	V03-011	RAS0163		Ron Schaefer		27-Jun-1983
;		Eliminate reference to RM$BASIC_ERR.
;
;	V03-010	TSK001		Tamar Krichevsky	12-Jun-1983
;		Fix broken branches to journaling routines.
;
;	V03-009	LJA0071		Laurie J. Anderson	29-Apr-1983
;		Fix problem with displaying terminals
;		When displaying FAB, fill in ALQ field, too.
;		Note: Still need to handle shared file case in filling in ALQ
;
;	V03-008	RAS0148		Ron Schaefer		26-Apr-1983
;		Add initial support for extended XABPRO.
;
;	V03-007	LJA0060		Laurie J. Anderson	21-Feb-1983
;		Add the display of RAB and FAB fields which are available
;		in the IRAB and IFAB and so could be displayed.
;		Add the display of the NAM block, if linked to FAB, from
;		the permanent FWA space.  Add some more comments.
;
;	V03-006	LJA0051		Laurie J. Anderson	13-Jan-1983
;		Add ability to display RAB, and add "wild ISI" support
;		for Context Extraction.  "Wild ISI" support involves the
;		return of the "next ISI" in the linked list of IRAB's.
;		This value is returned in the STV.
;
;	V03-005	JWH0115		Jeffrey W. Horn		22-Oct-1982
;		Fix bug in V03-004 to reference correct register
;		for FIB in READ_ATTR.
;
;	V03-004	JWH0108		Jeffrey W. Horn		28-Sep-1982
;		Add processing for $XABJNL.
;
;	V03-003	KBT03xx		Keith B. Thompson	10-Aug-1982
;		Remove $FRBDEF
;
;	V03-002	KBT0178		Keith B. Thompson	23-Aug-1982
;		Reorganize psects and rename entry point to single '$'
;
;	V03-001	CDS0003		C Saether	30-Mar-1982
;		Correct display of isam xab's so that BIO connect
;		after BRO open works.
;
;	V02-015	CDS0002		C Saether	22-Jan-1982
;		Use RM$ALLOC_BUF routine to allocate/deallocate
;		buffers so that global buffers are handled correctly.
;
;	V02-014	CDS0001		C Saether	29-Aug-1981
;		Remove references to BCB's.  Use BLB's instead.
;
;	V02-013	JAK0063		J A Krycka	28-AUG-1981
;		Add support for network $DISPLAY.
;
;	V02-012	MCN0007		Maria del C. Nasr	12-May-1981
;		Define new symbol for old length of backup date and time XAB.
;
;	V02-011	REFORMAT	Frederick E. Deen, Jr.	    28-Jul-1980
;		This code was reformatted to adhere to RMS standards
;
;	V010	CDS0060		C Saether	6-Dec-1979
;		Fixup relative to V009.  Use RM$BDBALLOC_ALT to allocate
;		buffer, etc., for ISAM.
;
;	V009	CDS0051		C Saether	2-Nov-1979
;		Use RM$ALLOC_BUF to handle allocate buffer for
;		ISAM org only - others don't need it
;
;	V008	DMB0002		 D M Bousquet	13-Feb-1979
;		Modified to always allocate a BDB, BUFFER and BCB (if SHARED)
;		and release everything we allocated at finish
;
;	V007	DMB0001 	D M Bousquet	10-Jan-1979
;		Changed RM$RETBDB to a CACHE and RELEASE CALL
;
;	V006	CDS0001		C D Saether	2-Jan-1979
;		Resolve out of range BRANCH
;
;	V005	RAN0002		R A Newell	6-Sep-1978
;		RMS-32 ISAM modifications.  Processing of summary, key
;		and area xabs
;
;	V004	JAK0001		J A Krycka	27-Aug-1978
;		Revise NETWORK ERROR processing
;
; REVISION HISTORY:
;
;	L F Laverdure,      10-Oct-1978
; 	X0003 -	Deletion of call to CHK_IDLE
;
;	L F Laverdure,      11-Aug-1978
;	X0002 -	 Return real BLK RAT bit for MT
;
;--
;


	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

;
; MACROS:
;

	$IFBDEF
	$IRBDEF
	$FABDEF
	$RABDEF
	$RMSDEF
	$ATRDEF
	$PSLDEF
	$IODEF
	$DEVDEF
	$FIBDEF
	$XABDEF
	$XABALLDEF
	$XABDATDEF
	$XABFHCDEF
	$XABPRODEF
	$XABRDTDEF
	$XABJNLDEF
	$CSHDEF
	$RLSDEF
	$FWADEF

;
; EQUATED SYMBOLS:
;

	C_MAXATTR=16			; max. # attribute list entries / QIO

;
; OWN STORAGE:
;
;
;  Argument list for XAB chain processing (allocation XABS only)
;

ALL_XAB_ARGS:
	.BYTE	XAB$C_ALL,XAB$C_ALLLEN,XBC$C_DSPALL
	.BYTE	XAB$C_DAT,XAB$C_DATLEN_V2,XBC$C_OPNDAT	; (temporarily here)
	.BYTE	0

;
;  XAB scan args for other XABS requiring a READ attributes
;

DSP_XAB_ARGS:
	.BYTE	XAB$C_FHC,XAB$C_FHCLEN,XBC$C_DSPFHC
	.BYTE	XAB$C_PRO,XAB$C_PROLEN_V3,XBC$C_OPNPRO
	.BYTE	XAB$C_RDT,XAB$C_RDTLEN,XBC$C_OPNRDT
	.BYTE	0

;
;  XAB scan args for XABS requiring modification after a READ attributes
;

DSP_XAB_ARGS1:
	.BYTE	XAB$C_FHC,XAB$C_FHCLEN,XBC$C_DSPFHC1
	.BYTE	XAB$C_ALL,XAB$C_ALLLEN,XBC$C_DSPALL1
	.BYTE	XAB$C_JNL,XAB$C_JNLLEN,XBC$C_OPNJNL
	.BYTE	XAB$C_PRO,XAB$C_PROLEN_V3,XBC$C_OPNPRO1
	.BYTE	0

	.SBTTL	RMS$DISPLAY - $DISPLAY ROUTINE

;++
; RMS$DISPLAY - Highest level $DISPLAY processing
;
;  This routine performs the highest level $DISPLAY processing.
;  its functions include:
;
;	1. Determine whether FAB or RAB display, and do common setup 
;	2. Check for all streams idle, exiting with error if not
;	3. If this is a RAB display, just fill in RAB information available
;	   from the IRAB and exit.
;	4. Allocate an attribute list work area and process the XAB chain
;	5. Do a READ of the file attributes
;	6. Reprocess the XAB chain for any XABS requiring modification
;	   after the READ attributes.
;	7. Deallocate the attribute list work area
;	8. Fill in FAB fields available from the IFAB.
;	9. Check for a NAM block.  If present, fill in with information from FWA
;	10. Exit to the user, generating an AST if requested
;
;
; CALLING SEQUENCE:
;
;	Entered from EXEC as a result of user's calling SYS$DISPLAY
;	(e.g., by using the $DISPLAY macro).
;
; INPUT PARAMETERS:
;
;	AP	User's argument list addr
;
; IMPLICIT INPUTS:
;
;	The contents of the FAB or RAB and RELATED XABS.
;
; OUTPUT PARAMETERS:
;
;	R0	STATUS code
;	R1	destroyed
;
; IMPLICIT OUTPUTS:
;
;	The various fields of the RELATED XABS are filled in.
;
;	A completion AST is queued if so specified by the user.
;
; COMPLETION CODES:
;
;	Standard RMS (see functional spec for list).
;
; SIDE EFFECTS:
;
;	None.
;
;--



;++
;
;  Entry point for $DISPLAY service
;
;--

	$ENTRY	RMS$DISPLAY
	$TSTPT	DISPLAY

;
;  Decide if this is a FAB or RAB display.  
;

	MOVL	4(AP),R8			; Get FAB or RAB address
	ASSUME	FAB$B_BID EQ RAB$B_BID
	IFNORD	#<FAB$B_BID+1>,(R8),1$		; Structure not accessible.
	CMPB	#FAB$C_BID,FAB$B_BID(R8)	; Is this a display for RAB?
	BNEQ	5$				; Yes, RAB display
;++
;
;  This is a FAB display.  Do common setup for FAB.  Check for Network
;  operation and go do just that.
;
;--
	BSBW	RM$FSET				; do common setup
						;  NOTE: does not return on
						;  error
	BBC	#IFB$V_DAP,(R9),10$		; Check for network operation
	BSBW	NT$DISPLAY			; Get file attributes from
	BRW	RM$EXRMS			;  remote system and exit RMS

;
;  Error out if cannot read first word of the inputted structure (FAB or RAB)
;
1$:	MOVL	#RMS$_STR,R0			; Return structure error to user
	RET					; and exit RMS
;++
;
;  This is a RAB display.  Do common setup for RAB.
;
;--
5$:	$RABSET					; common setup
						;  NOTE: does not return on error
;
;  Supply "Wild ISI" information.  Put it into STV of user input structure.
;  
;  Pick up, in the case of a FAB input, the ISI of the first stream which
;  is connected to the file.  In the case of a RAB input, the ISI of the next
;  stream which is connected to the file.  If such an ISI exists, in both cases.
;  Because the top portion of both the IFAB and IRAB are similar, the same code
;  can be used.
;
;  One is to assume that the user has called $DISPLAY with an IFI and is now
;  interested in the streams connected to the file.  Returning the first ISI
;  with the FAB $DISPLAY, the user will call $DISPLAY with each of the values
;  returned in the STV until zero.
;
	ASSUME	IFB$L_IRAB_LNK 	EQ IRB$L_IRAB_LNK
	ASSUME	IFB$W_IFI	EQ IRB$W_ISI
	ASSUME	FAB$L_STV EQ RAB$L_STV
10$:	
	MOVL	IFB$L_IRAB_LNK(R9),R0		; Pick up first IRAB address
	BEQL	20$				; No streams connected
	MOVZWL	IRB$W_ISI(R0),R0		; save this IRAB's ISI 
20$:	
	MOVL	R0,FAB$L_STV(R8)		; return this ISI (or 0) in STV
	RMSSUC					; anticipate SUCCESS
;
;  If this is a RAB input, then go to fill in the RAB information and
;  handle any RAB XAB's attached.
;
	ASSUME	<IFB$C_BID&1> EQ 1		; Is this a FAB or RAB display
	ASSUME	<IRB$C_BID&1> EQ 0
	ASSUME	IFB$B_BID EQ IRB$B_BID

	BLBS	IFB$B_BID(R9),25$
	BRW	DSPRAB				; display RAB stuff

25$:	BBS	#DEV$V_DIR,-			; err not file structured
		IFB$L_PRIM_DEV(R9),30$
	BRW	DSPFAB				; Display FAB and exit.
30$:	CMPB	#IFB$C_IDX,IFB$B_ORGCASE(R9)	; is this ISAM file?
	BNEQ	DSPXAB				; no, skip ISAM XABS

	BSBW	ISAM_XABS			; process ISAM XABS
	BLBS	R0,DSPXAB
D_XIT:	BRW	DSPXIT				; exit on error


	.SBTTL	DSPXAB - Handle general, non-ISAM  XAB attributes

;
;  Allocate FIB work area
;

DSPXAB:	MOVZBL	#FIB$C_LENGTH,R2		; size for work area
	BSBW	RM$GETSPC1			; allocate work area
	BLBC	R0,D_XIT			; get out on errors
	MOVL	R1,R6				; set FIB addr
	MOVL	IFB$L_FWA_PTR(R9),R10		; Set up FWA pointer
	PUSHR	#^M<R1,R2,R3>		; Save regs
	BSBW	RM$GET1PAG		; Get scratch page 
	MOVL	R3,FWA$L_ATR_WORK(R10)	;  for ATR work area
	MOVL	R3,R5			; Put address in R5
	MOVL	#PSL$C_EXEC,508(R3)	; Keep exec mode byte in last lword
	POPR	#^M<R1,R2,R3>		; Restore regs

;
;  Process ALLOCATION XAB, if any.
;

	BBC	#IFB$V_SEQFIL,(R9),7$		; really SEQUENTIAL FILE
						;  masquerading as RELATIVE?
	ASSUME	<IFB$C_SEQ + 1> EQ IFB$C_REL

	DECB	IFB$B_ORGCASE(R9)		; don't confuse XAB scan
7$:	MOVAB	ALL_XAB_ARGS,AP			; XAB scan arg. list addr
;
; set access mode to user before calling XAB_SCAN
;
	MOVW	#1,(R5)+			; 1 byte length
	MOVW	#ATR$C_ACCESS_MODE,(R5)+	; access mode
	MOVAB	IFB$B_MODE(R9),(R5)+		; user mode

	BSBW	RM$XAB_SCAN			; process any ALLOCATION XAB
	BLBC	R0,DSPCLN			; get out on error

;
;  Do a read of the file attributes.  RM$XAB_SCAN has set up the attribute 
;  list, if a Allocation XAB was found.
;
	TSTL	R4				; any XAB processed?
	BEQL	9$				; if not, R5 still points
						;  to the right place - go on
	BSBW	READ_ATTR			; go read attributes
	BLBC	R0,DSPCLN			; get out on error
;
; Reset R5 pointer.  Since there is already a user-mode ATR there, use it
;	
	ADDL3	FWA$L_ATR_WORK(R10),#8,R5	; set addr of work area

;
;  Process other XABS, if any
;
9$:
	MOVAB	DSP_XAB_ARGS,AP			; XAB scan arg. list addr
	BSBW	RM$XAB_SCAN			; process the XABS
	BLBC	R0,DSPCLN			; get out on error
	MOVZBL	IFB$B_JNLFLG(R9),R7		; save current journal flags
;
; put an exec-mode ATR here for picking up jounaling stuff
;
	MOVW	#1,(R5)+			; 1 byte length
	MOVW	#ATR$C_ACCESS_MODE,(R5)+	; access mode
	ADDL3	#508,FWA$L_ATR_WORK(R10),(R5)+	; Byte that specifies exec mode

	JSB	RM$RTVJNL			; set up attributes for journaling	
	BSBW	READ_ATTR			; read file attributes
	BLBC	R0,DSPCLN			; get out on error
	MOVAB	DSP_XAB_ARGS1,AP		; FHC & ALLOCATION XAB scan args
	BSBW	RM$XAB_SCAN			; process 2nd half of all or
						;  FHC XAB
	MOVB	R7,IFB$B_JNLFLG(R9)		; restore journal flags

;
;  Deallocate FIB and ATR work area
;

DSPCLN:	PUSHR	#^M<R0,R1,R2,R3,R4,R5>		; Save regs
	MOVL	FWA$L_ATR_WORK(R10),R4		; Point to work page
	BSBW	RM$RET1PAG			;  and deallocate it
	CLRL	FWA$L_ATR_WORK(R10)		; Indicate no work area now
	POPR	#^M<R0,R1,R2,R3,R4,R5>		; Restore regs
	MOVZBL	#FIB$C_LENGTH,R2 		; size of FIB
	MOVL	R6,R4				; right register to return
	PUSHL	R0				; save status
	BSBW	RM$RETSPC1			; deallocate work space
	POPL	R0				; restore status
	BBC	#IFB$V_SEQFIL,(R9),DSPFAB	; skip if not SEQ file SHARED
	INCB	IFB$B_ORGCASE(R9)		; back to RELATIVE disguise

	.SBTTL	DSPFAB - Handle FAB attributes

;
;  Display (fill in) FAB associated fields which are available in the IFAB
;

DSPFAB:	BLBC	R0,DSPXIT			; get out on error

	MOVL	IFB$L_FWA_PTR(R9),R10		; Set up FWA pointer
;
;	 Note still need to handle shared file case in copying the all. quant.
;
	MOVL	IFB$L_HBK(R9),FAB$L_ALQ(R8)	; Copy in allocation quantity

	BSBW	RM$RET_DEV_CHAR			; Copy in Device Characteristics

;
;	Fill in all the misc FAB fields in alphabetical order
;

	MOVB	IFB$B_BKS(R9),FAB$B_BKS(R8)	; Copy in Bucket Size
	MOVW	IFB$L_ASDEVBSIZ(R9),FAB$W_BLS(R8)	; Copy in Block-size
	MOVW	IFB$W_RTDEQ(R9),FAB$W_DEQ(R8)	; Copy in Default Extend Quant.
	MOVB	IFB$B_FAC(R9),FAB$B_FAC(R8)	; Copy in File access
	MOVB	IFB$B_FSZ(R9),FAB$B_FSZ(R8)	; Copy in Record header sz for VFC
	MOVW	IFB$W_GBC(R9),FAB$W_GBC(R8)	; Copy in Global Buffer Count
	MOVL	IFB$L_MRN(R9),FAB$L_MRN(R8)	; Copy in Max record Number
	MOVW	IFB$W_MRS(R9),FAB$W_MRS(R8)	; Copy in Maximum Record Size
	MOVZBL	IFB$B_ORGCASE(R9),R0		; Pick up file organization
	BBC	#IFB$V_SEQFIL,(R9),10$		; skip if not SEQ file SHARED
	DECL	R0				; make it really SEQ
10$:	INSV	R0,#FAB$V_ORG,#FAB$S_ORG,-
		FAB$B_ORG(R8)			;  and shift over for FAB
	MOVB	IFB$B_RAT(R9),FAB$B_RAT(R8)	; Copy in Record attributes
	MOVB	IFB$B_RFMORG(R9),FAB$B_RFM(R8)	; Copy in Record Format
	MOVAB	@FWA$Q_FIB+4(R10),R0		; Get address of FIB from FWA
	BEQL	20$				; No FIB => no windows
	MOVB	FIB$B_WSIZE(R0),FAB$B_RTV(R8)	; Copy in Retrieval Window
20$:	MOVB	IFB$B_SHR(R9),FAB$B_SHR(R8)	; Copy in Sharing bits

;
;  Check for a NAM block and if present, fill in any information from the FWA
;  Fill in the NAM block and resultant name string and return any errors found.
;

	BSBW	RM$FILLNAM			; Fill in NAM block

DSPXIT:	BRW	RM$EXRMS			; exit RMS


	.SBTTL	DSPRAB - Handle RAB attributes
;
;  DSPRAB - Display the RAB information into the inputted RAB from the IRAB
;
DSPRAB:
	MOVB	IRB$B_MBC(R9),RAB$B_MBC(R8)	; Copy in Multi-block count
	MOVB	IRB$B_MBF(R9),RAB$B_MBF(R8)	; Copy in Multi-buffer count
	CASE	TYPE=B,SRC=IFB$B_ORGCASE(R10),-
		DISPLIST=<SEQ,REL,ISAM>		; Case on File organization
;
SEQ:
REL:
	MOVL	IRB$L_NRP_VBN(R9),RAB$L_RFA0(R8)	; Copy RFA 
	MOVW	IRB$W_NRP_OFF(R9),RAB$W_RFA4(R8)	;
	BRB	DSPXIT					; Exit from RAB display
;
ISAM:
	MOVL	IRB$L_UDR_VBN(R9),RAB$L_RFA0(R8)	; Copy RFA
	MOVW	IRB$W_UDR_ID(R9),RAB$W_RFA4(R8)		;
	MOVB	IRB$B_CUR_KREF(R9),RAB$B_KRF(R8)	; Copy Key of Reference

	BRB	DSPXIT					; exit RMS

	.SBTTL	ISAM_XABS - Handle Indexed file XAB attributes
;
;  This does SCAN for INDEXED file org SUMMARY, KEY, and AREA XAB'S
;  RM$ALLOC_BUF needs the IFB pointer in R10.
;

ISAM_XABS:
	MOVQ	#1, R5				; 1 block buffer, no lock blb.
	BSBW	RM$ALLOC_BUF			; Allocate buffer, desc.
	BLBC	R0,50$				; out on allocation failure
						;  nothing will have been alloc
20$:	MOVAB	RM$XABOPN_ARGS,AP		; move addr. of XAB table in AP
	BSBW	RM$XAB_SCAN			; scan XAB list
50$:	RSB					; return - this deallocates the
						; buffer and desc allocated on
						; the call to RM$ALLOC_BUF.

	.SBTTL	READ_ATTR - SUBROUTINE TO READ FILE ATTRIBUTES

;++
;  READ_ATTR - Read file attributes
;
;	This routine performs an IO$_ACCESS QIO to READ the file attributes
;
;  INPUTS:
;
;	R11	IMPURE AREA addr
;	R10	FWA address
;	R9	IFAB addr
;	R8	FAB addr
;	R6	FIB addr
;	R5	ATTRIBUTE LIST END addr (a zero longword will be store here)
;
;  OUTPUTS:
;
;	R0		STATUS
;	R1-R5,AP	Destroyed
;
;--

READ_ATTR:
	CLRL	(R5)				; flag end of attr. list
	PUSHL	R6				; build FIB descriptor (addr)
	MOVZBL	#FIB$C_LENGTH,-(SP)		; 	"		(len)
	SSB	#FIB$V_PRSRV_ATR,-		; specify real attributes (blk)
		FIB$L_ACCTL(R6)

;
;  Push P6 and P5 QIO parameters on the STACK and do the ACCESS QIO function
;

	PUSHL	#0				; P6 = 0
	PUSHL	FWA$L_ATR_WORK(R10)		; P5 = attr. list addr
	MOVZBL	#IO$_ACCESS,R0			; I/O function code
	BSBW	RM$FCPFNC_P4			; read attributes
	BLBS	R0,10$				; Did everything go ok?
	RMSERR	ACC,R1				; No, file system 
	BSBW	RM$MAPERR			;  found something wrong
10$:	ADDL2	#8,SP				; dump FIB size and address
	RSB

	.END
