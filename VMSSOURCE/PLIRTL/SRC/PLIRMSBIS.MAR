	.title	pli$rmsbis - pl/i rms built-in subroutines
	.ident	/1-003/					; Edit BLS0294
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; facility:
;
;	VAX/VMS PL1 runtime library
;
; abstract:
;
;	This module contains the pl1 runtime routines for the RMS built-in
;	subroutines.
;
; author: c. spitz 8-may-1980
;
; Modifications:
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;	1-003	Benn Schreiber	 6-APR-1984
;		Zero XAB's before use.
;--

;
; external definitions
;
	$deffcb				;define file control block
	$rabdef				;define rab offsets
	$fabdef				;define fab offsets
	$namdef				;define nam offsets
	$devdef				;define device bit offsets
	$defdsp				;define file display block
	$defdat				;define operand node data types
	$xabdef				;define xab offsets
	$xabprodef			;define protection xab
	$xabdatdef			;define date xab
	$xabfhcdef			;define file header char xab

	rtshare

	.page
;++
; pli$display - display file attributes
; this routine displays the attributes of a pl1 file. if the file is closed,
; it is opened with declare time attributes. the users display block is then
; filled in.
;
; inputs:
;	0(ap) - number of arguments = 3
;	4(ap) - address of file control block
;	8(ap) - address of users display block
;	12(ap) - size/prec of display block
;	 14(ap) - data type of display block
; outputs:
;	the users display block is filled in with the files current attributes.
;--
	.entry	pli$display,^m<r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>
	movl	4(ap),r6		;get address of fcb
	movl	8(ap),r7		;get address of dsp
	pushl	12(ap)			;push size and data type
	calls	#1,g^pli$$bytesize	;calculate byte size
	blbc	r0,5$			;if invalid data type, fail
	cmpl	r1,#dspend		;user block large enough?
	blss	5$			;if lss, no, fail
	cmpw	14(ap),#dat_k_char_var	;char var block?
	bneq	7$			;if neq, no, cont
	movw	#dspend,(r7)+		;set size for char var
	movl	r7,8(ap)		;set correct address of display
	brb	7$			;cont
5$:	movl	#pli$_invdatyp,r0	;set invalid data type
	movl	r6,r2			;set fcb addr
	brw	fail			;and fail
7$:	movab	fcb_b_fab(r6),r8	;get address of fab
	movab	fcb_b_rab(r6),r9	;get address of rab
	movab	fcb_b_nam(r6),r5	;get address of nam
	movl	r7,r11			;copy dsp address
	bbs	#atr_v_opened,fcb_l_attr(r6),10$ ;if file opened, cont
	pushl	#0			;set no implied attributes
	pushl	r6			;set fcb addr
	calls	#2,g^pli$open		;open the file
	bbs	#atr_v_opened,fcb_l_attr(r6),10$ ;if file still not opened
	movl	#pli$_open,r0		;set open failure
	movl	r6,r2			;copy fcb addr
	brw	fail			;and fail
10$:	subl	#xab$k_datlen,sp	;get room for date xab
	movl	sp,r0			;save xab address
	pushr	#^m<r2,r3,r4,r5>	;save registers
	movc5	#0,(sp),#0,#xab$k_datlen,(r0) ;zero xab
	popr	#^m<r2,r3,r4,r5>
	movb	#xab$c_dat,xab$b_cod(sp) ;set xab type
	movb	#xab$k_datlen,xab$b_bln(sp) ;set xab length
	movl	sp,r2			;save addr of date xab
	movl	r2,fab$l_xab(r8)	;link date xab to fab
	subl	#xab$k_prolen,sp	;get room for protection xab
	movl	sp,r0			;save xab address
	pushr	#^m<r2,r3,r4,r5>	;save registers
	movc5	#0,(sp),#0,#xab$k_prolen,(r0) ;zero xab
	popr	#^m<r2,r3,r4,r5>
	movb	#xab$c_pro,xab$b_cod(sp) ;set xab type
	movb	#xab$k_prolen,xab$b_bln(sp) ;set xab length
	movl	sp,r10			;save addr of protection xab
	movl	r10,xab$l_nxt(r2)	;link protection xab to date xab
	subl	#xab$k_fhclen,sp	;get room for file header char xab
	movl	sp,r0			;save xab address
	pushr	#^m<r2,r3,r4,r5>	;save registers
	movc5	#0,(sp),#0,#xab$k_fhclen,(r0) ;zero xab
	popr	#^m<r2,r3,r4,r5>
	movb	#xab$c_fhc,xab$b_cod(sp) ;set xab type
	movb	#xab$k_fhclen,xab$b_bln(sp) ;set xab length
	movl	sp,xab$l_nxt(r10)	;link fhc xab to protection xab
	clrl	xab$l_nxt(sp)		;clr next xab link
	$display (r8)			;get the info
	clrl	fab$l_xab(r8)		;unlink xab's from fab
	blbs	r0,15$			;if lbs, cont
	movl	#pli$_rmsf,r0		;set fab error
	movl	r6,r2			;set fcb addr
	brw	fail			;and fail
15$:	movzwl	fab$w_bls(r8),(r11)+	;set block size
	movzbl	fab$b_bks(r8),(r11)+	;set bucket size
	movq	xab$q_cdt(r2),(r11)+	;set creation date
	movq	xab$q_edt(r2),(r11)+	;set expiration date
	movzwl	fab$w_deq(r8),(r11)+	;set extension size
	movc3	#22,nam$t_dvi(r5),(r11)	;set file id and dvi
	movab	24(r11),r11		;update pointer in dsp
	movl	xab$l_hbk(sp),(r11)+	;set file size
	movzbl	fab$b_fsz(r8),(r11)+	;set fixed control size
	movzbl	rab$b_krf(r9),(r11)+	;set index number
	movl	fab$l_mrn(r8),(r11)+	;set maximum record number
	movzwl	fab$w_mrs(r8),(r11)+	;set maximum record size
	movzbl	rab$b_mbc(r9),(r11)+	;set multiblock count
	movzbl	rab$b_mbf(r9),(r11)+	;set multibuffer count
	movzwl	xab$w_grp(r10),(r11)+	;set owner group
	movzwl	xab$w_mbm(r10),(r11)+	;set owner member
	movzbl	fab$b_rtv(r8),(r11)+	;set retrieval pointers
	movzwl	fcb_w_linesize(r6),(r11)+ ;set linesize
	movzwl	fcb_w_pagesize(r6),(r11)+ ;set pagesize
	movzwl	fcb_w_page(r6),(r11)+	;set page number
	movzwl	fcb_w_line(r6),(r11)+	;set line number
	movzwl	fcb_w_column(r6),(r11)+	;set column number
	movzbl	fcb_b_numkcbs(r6),(r11)+ ;set number of keys
	clrq	(r11)			;clear all of dtr
	bicl3	#^c<fab$m_sup!fab$m_tmp! - ;get supersede, temporary
		fab$m_dfw!fab$m_rwo! -	;deferred_write, rewind_on_open
		fab$m_pos!fab$m_wck! -	;current_position, write_check
		fab$m_rwc!fab$m_spl! -	;rewind_on_close, spool
		fab$m_scf!fab$m_dlt! -	;batch, delete
		fab$m_ctg!fab$m_cbt! -	;contiguous, contiguous_best_try
		fab$m_rck!fab$m_tef>,-	;read_check and truncate bits
		fab$l_fop(r8),(r11)	;from fop and set in display
	extzv	#atr_v_update,#<atr_v_indexed+1-atr_v_update>,- ;get bits from
		fcb_l_attr(r6),r0	;fcb attributes
	insv	r0,#dtr_v_update,-	;insert them
		#<dtr_v_indexed+1-dtr_v_update>,(r11) ;in display
	movzbl	fab$b_rat(r8),r1	;get rat from fab
	extzv	#fab$v_ftn,#1,r1,r0	;get ftn from rat
	insv	r0,#dtr_v_fortran_format,#1,(r11) ;set fortran format
	extzv	#fab$v_cr,#1,r1,r0	;get cr from rat
	insv	r0,#dtr_v_carriage_return_format,#1,(r11) ;set carriage return
	extzv	#fab$v_prn,#1,r1,r0	;get prn from rat
	insv	r0,#dtr_v_printer_format,#1,(r11) ;set printer format
	extzv	#fab$v_blk,#1,r1,r0	;get blk from rat
	insv	r0,#dtr_v_block_boundary_format,#1,(r11) ;set block boundary
	extzv	#fab$v_bio,#1,fab$b_fac(r8),r0 ;get bio from fac
	insv	r0,#dtr_v_block_io,#1,(r11) ;set block io
	cmpb	#fab$c_fix,fab$b_rfm(r8) ;fixed length records?
	bneq	16$			;if neq, no, cont
	bisl	#dtr_m_fixed_length_records,(r11) ;set fixed length records
16$:	extzv	#atr_v_app_comma,#1,fcb_l_attr(r6),r0 ;get append comma
	mcomb	r0,r0			;compliment it
	insv	r0,#dtr_v_ignore_line_marks,#1,(r11) ;set ignore linemarks
	movl	rab$l_rop(r9),r1	;get rop from rab
	extzv	#rab$v_loa,#1,r1,r0 	;get loa from rop
	insv	r0,#dtr_v_initial_fill,#1,(r11) ;set initial fill
	extzv	#rab$v_rah,#1,r1,r0	;get rah from rop
	insv	r0,#dtr_v_read_ahead,#1,(r11) ;set read ahead
	extzv	#rab$v_wbh,#1,r1,r0	;get wbh from rop
	insv	r0,#dtr_v_write_behind,#1,(r11) ;set write behind
	movb	fab$b_shr(r8),r1	;get shr from fab
	extzv	#fab$v_nil,#1,r1,r0	;get nil from shr
	insv	r0,#dtr_v_no_share,#1,(r11) ;set no share
	extzv	#fab$v_shrget,#1,r1,r0	;get shrget from shr
	insv	r0,#dtr_v_shared_read,#1,(r11) ;set shared read
	extzv	#fab$v_shrput,#1,r1,r0	;get shrput from shr
	insv	r0,#dtr_v_shared_write,#1,(r11) ;set shared write
	movab	8(r11),r11		;point to device bits
	movl	fab$l_dev(r8),(r11)+	;set device bits
	movl	fab$l_sdc(r8),(r11)+	;set spooling device bits
	movl	#^a/SEQ /,(r11)		;assume seql
	cmpb	#fab$c_rel,fab$b_org(r8) ;is it seq?
	blss	20$			;if lss, yes, cont
	bgtr	30$			;if gtr, no, its idx
	movl	#^a/REL /,(r11)		;set relative
	brb	30$			;cont
20$:	movl	#^a/IDX /,(r11)		;set indexed
30$:	movab	3(r11),r11		;update pointer
	pushab	xab$w_pro(r10)		;set addr of protection bits
	pushab	8(ap)			;set addr of display
	calls	#2,g^pli$$protvcha	;process protection
	movab	24(r11),r11		;point to file name
	movzbw	<fcb_b_nam+nam$b_rsl>(r6),(r11) ;set size
	bneq	40$			;if neq, cont
	movzbw	<fcb_b_nam+nam$b_esl>(r6),(r11) ;set size
40$:	movc3	(r11)+,fcb_b_esa(r6),(r11) ;set file name
	ret				;return

;++
; pli$extend - perform explicit extend on a pl1 file
; this routine extends the disk allocation of a pl1 file. if the file is
; closed, it is opened with declare time attributes. the file is then
; extended by the required number of blocks.
;
; inputs:
;	0(ap) - number of arguments (at least 2)
;	4(ap) - address of file control block
;	8(ap) - number of blocks to extend the file
; outputs:
;	none.
;--
	.entry	pli$extend,^m<r2,r3>
	bsbw	check_bis2		;check parms, open file
	bbs	#atr_v_opened,fcb_l_attr(r2),5$ ;if file opened, cont
	bsbw	do_open			;open file
	.long	atr_m_output		;for output
5$:	movl	8(ap),<fcb_b_fab+fab$l_alq>(r2)	;set allocation size
	$extend	fcb_b_fab(r2)		;extend the file
	blbc	r0,10$			;if lbc, fail
	movl	#1,r0			;set success
	ret				;return
10$:	movl	#pli$_rmsf,r0		;set rms fab error
	brw	fail			;and fail

	.page
;++
; pli$flush - flush pl1 file 
; this routine flushes a pl1 file. if the file is closed, no operation
; occurs. otherwise, all file buffers are flushed.
;
; inputs:
;	0(ap) - number of arguments (at least 1)
;	4(ap) - address of file control block
; outputs:
;	none
;--
	.entry	pli$flush,^m<r2>
	bsbw	check_bis1		;check parms, open file
	bbc	#atr_v_opened,fcb_l_attr(r2),5$ ;if file not opened, cont
	$flush	fcb_b_rab(r2)		;flush the file
	blbc	r0,10$			;if lbc, fail
5$:	movl	#1,r0			;set success
	ret				;return
10$:	movl	#pli$_rmsr,r0		;set rms rab error
	brw	fail			;and fail

	.page
;++
; pli$next_volume - perform next_volume processing for a pl1 file
; this routine performs next volume processing for a pl1 file. if the file
; is closed, it is opened with declare time attributes. the rms nxtvol
; service is then performed.
;
; inputs:
;	0(ap) - number of arguments (at least 1)
;	4(ap) - address of file control block
; outputs:
;	none
;--
	.entry	pli$next_volume,^m<r2,r3>
	bsbw	check_bis1		;check parms, open file
	bbs	#atr_v_opened,fcb_l_attr(r2),5$ ;if file opened, cont
	bsbw	do_open			;open file
	.long	0			;use dcl attr
5$:	$nxtvol	fcb_b_rab(r2)		;mount next volume
	blbc	r0,10$			;if lbc, fail
	movl	#1,r0			;set success
	ret				;return
10$:	movl	#pli$_rmsr,r0		;set rms rab error
	brw	fail			;and fail

	.page
;++
; pli$rewind - rewind a pl1 file
; this routine rewinds a pl1 file. if the file is closed, it is opened with
; declare time attributes. the file is repositioned to its first record.
;
; inputs:
;	0(ap) - number of arguments (at least 1)
;	4(ap) - address of file control block
; outputs:
;	none
;--
	.entry	pli$rewind,^m<r2,r3>
	bsbw	check_bis1		;check parms, open file
	bbs	#atr_v_opened,fcb_l_attr(r2),5$ ;if file opened, cont
	bsbw	do_open			;open file
	.long	0			;use dcl attr
5$:	bbs	#dev$v_trm,<fcb_b_fab+fab$l_dev>(r2),20$ ;if term, cont
	$rewind	fcb_b_rab(r2)		;rewind the file
	blbc	r0,10$			;if lbc, fail
20$:	bisl	#<atr_m_currec!atr_m_virgin>,- ;set cur rec wrong
		fcb_l_attr(r2)		; and file in just opened state
	bicl	#<atr_m_delete!atr_m_recur! - ;clear delete, recursion flag,
		atr_m_comma_exp!atr_m_eof! - ;comma_expected, eof
		atr_m_write>,fcb_l_attr(r2) ;and write
	clrq	fcb_q_rfa(r2)		;clear saved rfa
	bbc	#atr_v_stream,fcb_l_attr(r2),30$ ;if not stream, cont
	clrw	fcb_w_column(r2)	;clear column
	movl	fcb_l_buf(r2),fcb_l_buf_pt(r2) ;reset buffer pointer
	movl	fcb_l_buf(r2),fcb_l_buf_end(r2) ;reset buffer end
	movzbl	#1,r0			;get initial line, page and prn
	movw	r0,fcb_w_line(r2)	;init line number
	movw	r0,fcb_w_page(r2)	;init page number
	movl	r0,fcb_l_prn(r2)	;init prn
30$:	ret				;return
10$:	movl	#pli$_rmsr,r0		;set rms rab error
	brw	fail			;and fail

	.page
;++
; pli$spaceblock - space blocks in a pl1 file
; this routine spaces forward or backward a specified number of blocks in
; a pl1 file. if the file is closed, it is opened with declare time attri-
; butes and the block_io environment attribute implied. the current block
; position in the file is moved the requested amount.
;
; inputs:
;	0(ap) - number of arguments (at least 2)
;	4(ap) - address of file control block
;	8(ap) - number of blocks to space
; outputs:
;	none
;--
	.entry	pli$spaceblock,^m<r2,r3>
	bsbw	check_bis2		;check parms, open file
	bbs	#atr_v_opened,fcb_l_attr(r2),5$ ;if file opened, cont
	bsbw	do_open			;open file
	.long	atr_m_blockio		;set for blockio
5$:	movl	8(ap),<fcb_b_rab+rab$l_bkt>(r2) ;set number of blocks to space
	$space	fcb_b_rab(r2)		;space the file
	blbc	r0,10$			;if lbc, fail
	movl	#1,r0			;set success
	ret				;return
10$:	movl	#pli$_rmsr,r0		;set rms rab error
	brw	fail			;and fail

	.enabl	lsb
check_bis1:
	cmpl	(ap),#1			;enought arguments?
	brb	5$			;cont in common
check_bis2:
	cmpl	(ap),#2			;enough arguments?
5$:	bgeq	10$			;if geq, yes, cont
	clrl	r0			;set not enough args
	brb	fail			;and fail
10$:	movl	4(ap),r2		;get addr of fcb
	rsb				;
	.dsabl	lsb

do_open:
	movl	(sp),r3			;get addr of parm
	movl	(r3)+,(sp)		;set open attr
	pushl	r2			;set fcb addr
	calls	#2,g^pli$open		;open file
	bbs	#atr_v_opened,fcb_l_attr(r2),10$ ;if file still not open
	movl	#pli$_open,r0		;set open failure
	brb	fail			;and fail
10$:	jmp	(r3)			;return

fail:	bneq	10$			;if not enough parms
	movl	#pli$_parm,r0		;set not enuough parms
	clrl	r1			;set no fcb addr
	brb	20$			;cont
10$:	movl	r2,r1			;copy fcb addr
20$:	pushl	r1			;set fcb addr
	pushl	r0			;set error code
	pushl	#pli$_error		;set error condition
	calls	#3,g^pli$io_error	;signal the condition
	ret				;return	


	.end

