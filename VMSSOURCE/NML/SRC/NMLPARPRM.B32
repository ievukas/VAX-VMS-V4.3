%TITLE 'NML NPARSE action routines for parsing parameters'
MODULE NML$PARPRM (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
!
! ABSTRACT:
!
!    This module contains action routines called by NPARSE to parse and
!    store NICE entity parameters.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  8-Nov-1979
!
! MODIFIED BY:
!
!	V03-007	MKP0007		Kathy Perko		25-Mar-1984
!		Add support to convert area 0 to 1 for Phase IV NCPs
!		and to the executor's area for Phase III NCPs.
!
!	V03-006	MKP0006		Kathy Perko		9-Jan-1984
!		Change name of NML$PRM_CHKHOST to the more general
!		name, NML$PRM_CHKNODE.  Modify NML$PRM_CIRC_OWNER to
!		check the node to see if the executor.
!
!	V03-005	MKP0005		Kathy Perko		4-Aug-1983
!		Add support to make node permanent database faster.
!
!	V03-004	MKP0004		Kathy Perko		20-April-1983
!		Remove service functions from NML.
!
!	V03-003	MKP0003		Kathy Perko		31-Aug-1982
!		Fix X25-PROTOCOL GROUP checks to make sure right
!		combination of groups and dtes are in command.
!
!	V03-002	MKP0002		Kathy Perko		21-June-1982
!		Add routine to use NET string as entity ID if NICE
!		command is SET X-PROTOCOL NET <net-id>.  Otherwise,
!		NML uses a null string to indicate the active network.
!		Also, add a routine to make sure KNOWN qualifiers are
!		used only with ALL (for X25-PROTOCOL GROUPS).
!
!	V03-001	MKP0001		Kathy Perko		16-June-1982
!		Add routine to parse the circuit parameter, owner.
!
!	V02-004	MKP0003		Kathy Perko		23-Feb-1982
!		X25-PROTOCOL GROUP commands with DTE IDs included.  This
!		routine concatenates a root entity with a sub entity
!		to form the entity id.  Used when the ACPs data base keeps
!		the entities in a hierarchical form.  Also, delete the routine,
!		NML$PRM_CHK_PROTOCOL.
!
!	V02-003	MKP0002		Kathy Perko		15-Dec-1981
!		Change name NML$PRS_CHK_PROTOCOL to NML$PRM_CHK_PROTOCOL
!		to be consistent with routine names in this module.
!
!	V02-002	MKP0001		Kathy Perko		19-Nov-1981
!		Add parameter grouping check for X.25 Protocol module.
!
!	V02-001	LMK0001		Len Kawell		27-Jul-1981
!		Remove line name parsing, as NETACP handles it now.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    nml$prm_check,
    nml$prm_objprv,
    nml$prm_clear,
    nml$prm_strchk,
    nml$prm_chkexe,
    nml$prm_chknod,
    nml$prm_chkrem,
    nml$prm_chkloo,
    nml$prm_chkefi,
    nml$prm_chkesi,
    nml$prm_circ_owner,
    nml$prm_err,
    nml$prm_evtsrctyp,
    nml$prm_evtsource,
    nml$prm_evtclass,
    nml$prm_evtmsktyp,
    nml$prm_evtmask,
    nml$prm_chkeve,
    nml$prm_save_node,
    nml$prm_set_net,
    nml$prm_qual_format,
    nml$prm_channels;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EXTERNAL REFERENCES:
!

$nml_extdef;

EXTERNAL ROUTINE
    nml$chkexe,
    nml$chkprmval,
    nml$error_2,
    nml$fix_node_num,
    nml$getnodadr,
    nml$saveparam;


%SBTTL 'NML$PRM_CHECK  Check parameter value'
GLOBAL ROUTINE NML$PRM_CHECK =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks a parameter value
!	against its description in the parameter semantic table.  If
!	the parameter is valid, a descriptor entry is created.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!	NML$GL_PRMCODE contains the index into the change parameter table
!	    (NML$AB_CPTABLE).
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is valid then a descriptor entry will be created for
!	it in NML$AW_PRM_DES and NML$GW_PRMDESCNT will be incremented.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter fails the semantic check, an error message
!	(NMA$C_STS_PVA) is signalled.  If the parameter descriptor buffer
!	is full then a software error (NMA$C_STS_MPR) is signalled with
!	optional text to identify the error.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE,			! Resultant message size
	LEN,
	PTR;				! Temporary parameter pointer
!
! Add descriptor entry for this parameter.
!
    LEN = .NPARSE_BLOCK [NPA$L_FLDCNT];
    PTR = .NPARSE_BLOCK [NPA$L_FLDPTR];

    NML$CHKPRMVAL (.NML$GL_PRMCODE, .LEN, .PTR);
    NML$SAVEPARAM (.NML$GL_PRMCODE, .LEN, .PTR);

    NML$GL_PRMCODE = 0;			! Reset parsing code

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHECK

%SBTTL 'NML$PRM_OBJPRV  Check object privilege parameter value'
GLOBAL ROUTINE NML$PRM_OBJPRV =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that handles the object privilege
!	mask.  The mask is generally a quadword but only the lower longword
!	is currently used by VMS.  If this situation changes than this routine
!	must also be changed.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!	NML$GL_PRMCODE contains the index into the change parameter table
!	    (NML$AB_CPTABLE).
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is valid then a descriptor entry will be created for
!	it in NML$AW_PRM_DES and NML$GW_PRMDESCNT will be incremented.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter fails the semantic check, an error message
!	(NMA$C_STS_PVA) is signalled.  If the parameter descriptor buffer
!	is full then a software error (NMA$C_STS_MPR) is signalled with
!	optional text to identify the error.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE,			! Resultant message size
	LEN,
	PTR;				! Temporary parameter pointer
!
! Add descriptor entry for this parameter.
!
    LEN = .NPARSE_BLOCK [NPA$L_FLDCNT] - 1;

    IF .LEN GTRU 4
    THEN
	LEN = 4;			! Maximum of four bytes

    PTR = .NPARSE_BLOCK [NPA$L_FLDPTR] + 1;
    NML$SAVEPARAM (.NML$GL_PRMCODE, .LEN, .PTR);

    NML$GL_PRMCODE = 0;			! Reset parsing code

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_OBJPRV

%SBTTL 'NML$PRM_STRCHK  Check parameter value'
GLOBAL ROUTINE NML$PRM_STRCHK =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks a parameter value
!	against its description in the parameter semantic table.  If
!	the parameter is valid, a descriptor entry is created.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!	NML$GL_PRMCODE contains the index into the change parameter table
!	    (NML$AB_CPTABLE).
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is valid then a descriptor entry will be created for
!	it in NML$AW_PRM_DES and NML$GW_PRMDESCNT will be incremented.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter fails the semantic check, an error message
!	(NMA$C_STS_PVA) is signalled.  If the parameter descriptor buffer
!	is full then a software error (NMA$C_STS_MPR) is signalled with
!	optional text to identify the error.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE,			! Resultant message size
	LEN,
	PTR;				! Temporary parameter pointer
!
! Add descriptor entry for this parameter.
!
    LEN = .NPARSE_BLOCK [NPA$L_FLDCNT] - 1;
    PTR = .NPARSE_BLOCK [NPA$L_FLDPTR] + 1;

    NML$CHKPRMVAL (.NML$GL_PRMCODE, .LEN, .PTR);
    NML$SAVEPARAM (.NML$GL_PRMCODE, .LEN, .PTR);

    NML$GL_PRMCODE = 0;			! Reset parsing code

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_STRCHK

%SBTTL 'NML$PRM_CLEAR  Remove entity parameter from data base (action routine)'
GLOBAL ROUTINE NML$PRM_CLEAR =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that removes a parameter from the
!	specified entity by creating a parameter descriptor.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE argument block.
!
! IMPLICIT OUTPUTS:
!
!	A parameter descriptor is added to NML$AW_PRM_DES and the count
!	(NML$GW_PRMDESCNT) is incremented.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	If no room remains in the descriptor area then a software error
!	(NMA$C_STS_MPR) will be signalled indicating buffer overflow.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference	
!
! Add descriptor.
!
    NML$GL_PRMCODE = .NPARSE_BLOCK [NPA$L_PARAM];
    NML$SAVEPARAM (.NML$GL_PRMCODE, 0, 0);
    NML$GL_PRMCODE = 0;

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CLEAR


%SBTTL 'NML$PRM_CHKEXE	Check executor parameter group'
GLOBAL ROUTINE NML$PRM_CHKEXE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the parameter
!	code to make sure it is in the same group (executor-only or
!	node) as any previously specified parameters.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDPTR is a pointer code to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is in the correct group then the flag for that
!	group will be set in NML$GL_PRS_FLGS.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter is in the wrong group then an invalid parameter
!	grouping applicable error (NMA$C_STS_PGP) will be signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE;
!
! If this is not the executor-only parameter group return error.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_NODPG]
    THEN
	NML$ERROR_2 (NMA$C_STS_PGP,
		     .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

    NML$GL_PRS_FLGS [NML$V_PRS_EXEPG] = 1; ! Set executor flag

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKEXE

%SBTTL 'NML$PRM_CHKNOD  Check node parameter group'
GLOBAL ROUTINE NML$PRM_CHKNOD =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the executor parameter
!	code to make sure it is in the same group (executor-only or
!	node) as any previously specified parameters.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDPTR is a pointer code to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is in the correct group then the flag for that
!	group will be set in NML$GL_PRS_FLGS.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter is in the wrong group then an invalid parameter
!	grouping applicable error (NMA$C_STS_PGP) will be signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE;
!
! If this is not the executor-only parameter group return error.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_EXEPG]
    THEN
	NML$ERROR_2 (NMA$C_STS_PGP,
		     .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

    NML$GL_PRS_FLGS [NML$V_PRS_NODPG] = 1; ! Set node flag

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKNOD

%SBTTL 'NML$PRM_CHKREM  Check remote node parameter group'
GLOBAL ROUTINE NML$PRM_CHKREM =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the remote node parameter
!	code to make sure it is in the same group (loop or remote
!	node) as any previously specified parameters.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDPTR is a pointer code to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is in the correct group then the flag for that
!	group will be set in NML$GL_PRS_FLGS.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter is in the wrong group then an invalid parameter
!	grouping applicable error (NMA$C_STS_PGP) will be signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE;
!
! If this is the loop node parameter group return error.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_LOOPG]
    THEN
	NML$ERROR_2 (NMA$C_STS_PNA,
		     .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

    NML$GL_PRS_FLGS [NML$V_PRS_REMPG] = 1; ! Set remote node flag

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKREM

%SBTTL 'NML$PRM_CHKLOO  Check loop node parameter group'
GLOBAL ROUTINE NML$PRM_CHKLOO =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the loop node parameter
!	code to make sure it is in the same group (remote or loop
!	node) as any previously specified parameters.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDPTR is a pointer code to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is in the correct group then the flag for that
!	group will be set in NML$GL_PRS_FLGS.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter is in the wrong group then a parameter not
!	applicable error (NMA$C_STS_PNA) will be signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    MAP
	NML$GB_OPTIONS : BBLOCK [1];

    EXTERNAL LITERAL
	CPT$GK_PCNO_A$$;		! Loop node address

    BIND
	NODADR = UPLIT WORD (0) : WORD;
!
! If this is the remote node parameter group return error.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_REMPG]
    THEN
	NML$ERROR_2 (NMA$C_STS_PNA,
		     .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

    NML$GL_PRS_FLGS [NML$V_PRS_LOOPG] = 1; ! Set loop node flag
!
! If this is a SET/DEFINE (not CLEAR/PURGE) operation then add a zero
! node address to get around an idiosyncracy in NETACP.
!
    IF NOT .NML$GB_OPTIONS [NMA$V_OPT_CLE]
    THEN
	NML$SAVEPARAM (CPT$GK_PCNO_A$$, 2, NODADR);

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKLOO

%SBTTL 'NML$PRM_CHKKNO	Check for KNOWN entity option'
GLOBAL ROUTINE NML$PRM_CHKKNO =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the parameter
!	code to make sure it is not applied to KNOWN parameters.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDPTR is a pointer code to the parameter in the received
!			message buffer.
!	NML$GB_ENTITY_FORMAT contains the entity format code.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If KNOWN entities is specified then a parameter not applicable
!	error (NMA$C_STS_PNA) is signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    MAP
	NML$GB_ENTITY_FORMAT : BYTE SIGNED;

    LOCAL
	MSGSIZE;
!
! If KNOWN entities is selected then return error.
!
    IF .NML$GB_ENTITY_FORMAT EQL NMA$C_ENT_KNO
    THEN
	NML$ERROR_2 (NMA$C_STS_PNA,
		     .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKKNO

%SBTTL 'NML$PRM_CHKEFI	Check event logging parameter group'
GLOBAL ROUTINE NML$PRM_CHKEFI =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the parameter
!	code to make sure it is in the same group (event logging
!	information) as any previously specified parameters.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDPTR is a pointer code to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is in the correct group then the flag for that
!	group will be set in NML$GL_PRS_FLGS.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter is in the wrong group then an invalid parameter
!	grouping applicable error (NMA$C_STS_PGP) will be signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE;
!
! If this is not the event logging information parameter group return error.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_ESIPG]
    THEN
	NML$ERROR_2 (NMA$C_STS_PGP,
		     .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

    NML$GL_PRS_FLGS [NML$V_PRS_EFIPG] = 1; ! Set group flag

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKEFI

%SBTTL 'NML$PRM_CHKESI	Check event sink parameter group'
GLOBAL ROUTINE NML$PRM_CHKESI =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks the parameter
!	code to make sure it is in the same group (event sink
!	information) as any previously specified parameters.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDPTR is a pointer code to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is in the correct group then the flag for that
!	group will be set in NML$GL_PRS_FLGS.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!	If the parameter is in the wrong group then an invalid parameter
!	grouping applicable error (NMA$C_STS_PGP) will be signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	MSGSIZE;
!
! If this is not the event sink information parameter group return error.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_EFIPG]
    THEN
	NML$ERROR_2 (NMA$C_STS_PGP,
		     .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,16>);

    NML$GL_PRS_FLGS [NML$V_PRS_ESIPG] = 1; ! Set group flag

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKESI

%SBTTL 'NML$PRM_CIRC_OWNER  Convert circuit owner parameter(action routine)'
GLOBAL ROUTINE NML$PRM_CIRC_OWNER =

!++
! FUNCTIONAL DESCRIPTION:
!	This is a NPARSE action routine that is called when parsing a
!	SET CIRCUIT OWNER command.  It checks the node ID supplied
!	to make sure it specifies the executor node (the only value
!	currently allowed for OWNER).  This routine saves the OWNER
!	parameter as a set bit field since only one value is allowed.
!
! IMPLICIT INPUTS:
!	NPARSE argument block.
!		NPA$L_PARAM contains the error code.
!		NPA$L_FLDPTR points to the parameter in the message.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Signals NML$_STS_PVA if the node id is not the executor's
!	(for now, we only support the executor as a circuit owner).
!	Otherwise returns success.
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

LOCAL
    len,
    node_addr : WORD,
    name_addr;

node_addr = 0;
len = .(.nparse_block [npa$l_fldptr])<0,8>;
IF .nparse_block [npa$l_param] EQL nma$c_pcno_add THEN
    node_addr = .(.nparse_block [npa$l_fldptr]+1)<0,16>
ELSE
    name_addr = .nparse_block [npa$l_fldptr] + 1;
!
! If the node address in the NICE command matches the executor node
! address then set the flag to indicate it.
!
IF nml$chkexe (.nparse_block [npa$l_param], .node_addr, .len, .name_addr) THEN
    nml$saveparam (.nml$gl_prmcode, 1, UPLIT BYTE (1))
ELSE
    nml$error_2 (nma$c_sts_pva,
		 nma$c_pcci_own);
nml$gl_prmcode = 0;				! Reset parsing code
RETURN nml$_sts_suc;				! Return status
END;				! End of NML$PRM_CIRC_OWNER

%SBTTL 'NML$PRM_ERR  Build and signal error (action routine)'
GLOBAL ROUTINE NML$PRM_ERR =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that signals parameter errors.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE argument block.
!
!		NPA$L_PARAM contains the error code.
!		NPA$L_FLDPTR points to the parameter in the message.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	Error message is signalled.
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	ERR_CODE,			! Error code
	ERR_DETAIL;			! Error detail

    ERR_CODE = .NPARSE_BLOCK [NPA$L_PARAM]; ! Get error code
!
! Check for parameters to move in addition to error status.
!
    ERR_DETAIL = (
	SELECTONEU .ERR_CODE OF
	    SET

	    [NMA$C_STS_PTY,
	     NMA$C_STS_PVA,
	     NMA$C_STS_PNA]:

		.(.NPARSE_BLOCK [NPA$L_MSGPTR] - 2)<0,16,0>; ! Get detail code

	    [OTHERWISE]:

		-1;

	    TES);

    NML$ERROR_2 (.ERR_CODE, .ERR_DETAIL); ! Signal error message

    RETURN NML$_STS_SUC			! Return success

    END;				! End of NML$PRM_ERR


%SBTTL 'NML$PRM_EVTSRCTYP  Get event source type code'
GLOBAL ROUTINE NML$PRM_EVTSRCTYP =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an NPARSE action routine  that saves the event source type 
!	code.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference
!
! Save the event source type code.
!
    NML$GB_EVTSRCTYP = .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,8>;
    NML$GL_PRS_FLGS [NML$V_PRS_EVE] = 1; ! Flag event parameter processed

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_EVTSRCTYP

%SBTTL 'NML$PRM_EVTSOURCE  Get event source descriptor'
GLOBAL ROUTINE NML$PRM_EVTSOURCE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an NPARSE action routine that saves the event source id.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

$npa_argdef;			! Define NPARSE block reference

LOCAL
    addr   : WORD,
    namlen,
    namptr;
!
! Save the event source string descriptor information.
!
IF .nml$gb_evtsrctyp EQLU nma$c_ent_lin
   OR .nml$gb_evtsrctyp EQLU nma$c_ent_cir THEN
    BEGIN
    nml$gq_evtsrcdsc [dsc$w_length] =
	    .(.nparse_block [npa$l_fldptr])<0,8>;
    nml$gq_evtsrcdsc [dsc$a_pointer] =
	    .nparse_block [npa$l_fldptr] + 1;
    END
ELSE
    !
    ! The event source is node.  Save the node id.  If the user specified
    ! the node name (rather than the node address), get the node's address
    ! from the DECnet node database.
    !
    BEGIN
    IF .(.nparse_block [npa$l_fldptr])<0,8> EQLU 0 THEN
	BEGIN
	nml$gq_evtsrcdsc [dsc$a_pointer] =
		.(.nparse_block [npa$l_fldptr] + 1)<0,16>;
	nml$fix_node_num (nml$gq_evtsrcdsc [dsc$a_pointer]);
	END
    ELSE
	BEGIN
	namlen = .(.nparse_block [npa$l_fldptr])<0,8>;
	namptr = .nparse_block [npa$l_fldptr] + 1;

	IF nml$getnodadr (.namlen, .namptr, addr) THEN
	    nml$gq_evtsrcdsc [dsc$a_pointer] = .addr
	ELSE
	    nml$error_2 (nma$c_sts_ide, nma$c_ent_nod);
	END;

    nml$gq_evtsrcdsc [dsc$w_length] = 0;
    END;

RETURN nml$_sts_suc
END;				! End of NML$PRM_EVTSOURCE

%SBTTL 'NML$PRM_EVTCLASS  Get event class code'
GLOBAL ROUTINE NML$PRM_EVTCLASS =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that saves the event class 
!	information.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference
!
! Save the event class code (only the low 9 bits).
!
    NML$GW_EVTCLASS = .(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,9>;

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_EVTCLASS

%SBTTL 'NML$PRM_EVTMSKTYP  Get event mask type code'
GLOBAL ROUTINE NML$PRM_EVTMSKTYP =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that saves the event mask type code.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference
!
! Save the event mask type code.
!
    NML$GB_EVTMSKTYP = .(.NPARSE_BLOCK [NPA$L_FLDPTR])<6,2>;

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_EVTMSKTYP

%SBTTL 'NML$PRM_EVTMASK  Get event mask'
GLOBAL ROUTINE NML$PRM_EVTMASK =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that saves the event mask.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!
! IMPLICIT OUTPUTS:
!
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference

    LOCAL
	STATUS;				! Return status
!
! Save the event mask descriptor information.
!
    NML$GQ_EVTMSKDSC [DSC$W_LENGTH] =
	.(.NPARSE_BLOCK [NPA$L_FLDPTR])<0,8>;

    NML$GQ_EVTMSKDSC [DSC$A_POINTER] =
	.NPARSE_BLOCK [NPA$L_FLDPTR] + 1;
!
! If the event mask is all zeroes then it is not valid.
!
    STATUS = NML$_STS_PVA;

    INCR I FROM 0 TO .NML$GQ_EVTMSKDSC [DSC$W_LENGTH] - 1 DO
	BEGIN

	IF .(.NML$GQ_EVTMSKDSC [DSC$A_POINTER] + .I)<0,8> NEQ 0
	THEN
	    BEGIN

	    STATUS = NML$_STS_SUC;
	    EXITLOOP;

	    END;
	END;
!
! If an error is detected then return an invalid parameter value error.
!
    IF NOT .STATUS
    THEN
	NML$ERROR_2 (NMA$C_STS_PVA, NMA$C_PCLO_EVE);

    RETURN .STATUS

    END;				! End of NML$PRM_EVTMASK

%SBTTL 'NML$PRM_CHKEVE	Check for event parameter'
GLOBAL ROUTINE NML$PRM_CHKEVE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action routine that checks for the presence
!	of the event parameter.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!
!--

    BEGIN

    $NPA_ARGDEF;			! Define NPARSE block reference
!
! If this is the event filter (EFI) parameter group and no event logging
! parameter has been specified then return a parameter missing error.
!
    IF .NML$GL_PRS_FLGS [NML$V_PRS_EFIPG]
    AND NOT .NML$GL_PRS_FLGS [NML$V_PRS_EVE]
    THEN
	NML$ERROR_2 (NMA$C_STS_PMS,
		     NMA$C_PCLO_EVE);

    RETURN NML$_STS_SUC

    END;				! End of NML$PRM_CHKEVE

%SBTTL 'NML$PRM_SAVE_NODE	Check and save node parameter'
GLOBAL ROUTINE NML$PRM_SAVE_NODE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is a NPARSE action that checks a node id for validity.
!	Some node parameters are saved in the DECnet databases as a node
!	address.  If the node is specified by name and no corresponding
!	address can be found in the data base then an error is returned.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK [NPA$L_FLDPTR] contains the pointer to the entity
!	    format code and id string.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	If the host node id is invalid then an invalid identification format
!	error (NML$_STS_IDE) will be signalled.
!
!--

BEGIN

$npa_argdef;			! Define NPARSE block reference

OWN
    node_addr : WORD;

LOCAL
    length,
    addr;

!
! The NODE ADDRESS parameter is never specified as a name, and therefore,
! its NICE parameter type is a word.
!
IF .nparse_block [npa$l_param] EQL nml$c_node_num_param THEN
    BEGIN
    length = 0;
    addr = .nparse_block [npa$l_fldptr];
    END
ELSE
!
! Other node parameters are saved in address form, but can be specified
! by either the name or the address.  So the NICE format is node-id.
! If leading byte of the parameter (the length) is a 0, the user typed a
! node address rather than counted node name string.  Get the length and
! address of the node parameter.
!
    BEGIN
    length = .(.nparse_block [npa$l_fldptr])<0,8>; ! Get length
    addr = .nparse_block [npa$l_fldptr] + 1;
    END;
!
! If length is zero then id is a node address, otherwise it is a counted
! node name string.
!
IF .length EQL 0 THEN
    BEGIN
    node_addr = .(.addr)<0,16>;
    !
    ! If the node area was specified as zero, change to to 1 (if NCP
    ! is a Phase IV NCP) or the executor's area (if NCP is a Phase III
    ! NCP).
    !
    nml$fix_node_num (node_addr);
    END
ELSE
    !
    ! The parameter was specified as a name.  Look the node up in
    ! the node database to get it's address.
    !
    BEGIN
    IF NOT nml$getnodadr (.length, .addr, node_addr) THEN
	nml$error_2 (nma$c_sts_ide, nma$c_ent_nod);
    END;
!
! Save the node address parameter.
!
nml$saveparam (.nml$gl_prmcode, 2, node_addr);

nml$gl_prmcode = 0;			! Reset parameter code
RETURN nml$_sts_suc
END;				! End of NML$PRM_SAVE_NODE

%SBTTL 'NML$PRM_SET_NET  Set X25-Protocol network ID'
GLOBAL ROUTINE NML$PRM_SET_NET =

!++
! FUNCTIONAL DESCRIPTION:
!	This is a NPARSE action routine that is called only when NML
!	gets a NICE command of SET X25-PROTOCOL NET <net-id>.  In this
!	case only, the entity ID passed to the ACP must be the network
!	name.  In all other cases, the network ID is a zero length string
!	to indicate the currently active network.  SET X25-PROTOCOL NET
!	is used to specify the active network in the first place.
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!	NML$GL_PRMCODE contains the index into the change parameter table
!	    (NML$AB_CPTABLE).
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	Always returns NML$_STS_SUC.
!
!--

BEGIN

MAP
    NML$GB_OPTIONS : BBLOCK [1];

!
! The entity ID has already been set up to be the active network
! (NML$GB_ENTITY_FORMAT = 0) during initial parsing.  So, if the NICE
! command is DEFINE, leave things as they are.  If it's a SET, pop
! the network name off the parameter stack and save it as the entity ID
! for the QIO P2 buffer.
!
IF NOT .NML$GB_OPTIONS [NMA$V_OPT_PER] THEN
    BEGIN
    !
    ! Back up to the network parameter.  This pops the network parameter
    ! off the parameter stack.
    !
    NML$GW_PRMDESCNT = .NML$GW_PRMDESCNT - 1; 
    !
    ! Move the network ID to the entity ID globals.
    !
    NML$GB_ENTITY_FORMAT = .NML$AW_PRM_DES [.NML$GW_PRMDESCNT, PDB$W_COUNT];
    CH$MOVE (.NML$GB_ENTITY_FORMAT,
    		.NML$AW_PRM_DES [.NML$GW_PRMDESCNT, PDB$A_POINTER],
		NML$AB_ENTITY_ID);
    END;

RETURN NML$_STS_SUC

END;				! End of NML$PRM_SET_NET

%SBTTL 'NML$PRM_QUAL_FORMAT  Check X25-Protocol Group DTE format'
GLOBAL ROUTINE NML$PRM_QUAL_FORMAT =

!++
! FUNCTIONAL DESCRIPTION:
!	This is a NPARSE action routine that is called only when NML
!	gets a NICE SET/DEFINE X25 PROTOCOL GROUP command.
!	In this case some SET/DEFINE commands are illegal, because
!	with groups, you must always set DTE, number, and type
!	together.  Also, the same DTE will have different group numbers in
!	different groups but DTEs in the same group must have the same group
!	number.
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!--

BEGIN

MAP
    NML$GB_OPTIONS : BBLOCK [1];
!
! If KNOWN GROUPS allow only
!	SET KNOWN GROUPS KNOWN DTES ALL or
!	SET KNOWN GROUPS ALL
!
IF .NML$GB_ENTITY_FORMAT LEQ 0 THEN		! If KNOWN groups and
    BEGIN
    IF (.NML$GB_OPTIONS [NMA$V_OPT_PER] OR	! not SET ALL
       NOT .NML$GL_PRS_FLGS [NML$V_PRS_ALL]) OR	!	or
       (.NML$GL_PRS_FLGS [NML$V_PRS_QUALIFIER] AND ! DTE nnnn
	.NML$GB_QUALIFIER_FORMAT GTR 0) THEN
	RETURN NML$_STS_IDE;			!	Error.
    END
ELSE
    !
    ! If a specific group, allow only
    !	SET/DEFINE GROUP FRED DTE 333444555666 NUM 3  ... or
    !	SET/DEFINE GROUP FRED ALL
    !   SET/DEFINE GROUP FRED KNOWN DTES ALL
    !
    BEGIN
    IF .NML$GB_ENTITY_FORMAT GTR 0 THEN
	BEGIN
	!
	! SET/DEFINE X25-PROTOCOL GROUP FRED KNOWN DTES ALL - is illegal.
	!
	IF .NML$GL_PRS_FLGS [NML$V_PRS_ALL] AND
	   (.NML$GL_PRS_FLGS [NML$V_PRS_QUALIFIER] AND
	   .NML$GB_QUALIFIER_FORMAT LEQ 0) THEN
		RETURN NML$_STS_IDE;
	END;
    END;

RETURN NML$_STS_SUC;

END;				! End of NML$PRM_QUAL_FORMAT

%SBTTL 'NML$PRM_CHANNELS  Check parameter value'
GLOBAL ROUTINE NML$PRM_CHANNELS =

!++
! FUNCTIONAL DESCRIPTION:
!
! The X-25 Protocol DTE parameter, channels, is passed by NCP in the form of
! parameter id, channel pair, parameter id, channel pair...
! It must be converted to a string.  Accumulate the string here.
!
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NPARSE_BLOCK (pointed to by AP) contains the parsed parameter data.
!	    NPA$L_FLDCNT is the parameter length.
!	    NPA$L_FLDPTR is a pointer to the parameter in the received
!		message buffer.
!	NML$GL_PRMCODE contains the index into the change parameter table
!	    (NML$AB_CPTABLE).
!
! IMPLICIT OUTPUTS:
!
!	If the parameter is valid then a descriptor entry will be created for
!	it in NML$AW_PRM_DES and NML$GW_PRMDESCNT will be incremented.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns NML$_STS_SUC.
!
! SIDE EFFECTS:
!
!--

BEGIN

$NPA_ARGDEF;			! Define NPARSE block reference

LITERAL CHAN_STR_SIZE = 80;

OWN
    INDEX,		! Parameter stack index for channels entry.
    CHANNEL_STRING: BBLOCK [CHAN_STR_SIZE];

LOCAL
    COUNT;

IF NOT .NML$GL_PRS_FLGS [NML$V_PRS_CHANNELS] THEN
    !
    ! This is the first channel range in the NICE SET command.  Set
    ! up the parameter descriptor list to accumulate all the channel
    ! ranges in a string which is how it must be passed to the PSI
    ! ACP.
    !
    BEGIN
    NML$GL_PRS_FLGS [NML$V_PRS_CHANNELS] = 1;
    !
    ! Save the index into the parameter descriptor stack in order to add
    ! the length of later channel pairs.  Then add the descriptor entry
    ! for channels to the stack.
    !
    INDEX = .NML$GW_PRMDESCNT;
    NML$SAVEPARAM (.NML$GL_PRMCODE, 0, CHANNEL_STRING);
    END;

!
! Make sure the number of channel pairs in the NICE message isn't overflowing
! the internal channel string buffer.
!
COUNT = .NML$AW_PRM_DES [.INDEX, PDB$W_COUNT];
IF .COUNT GEQ CHAN_STR_SIZE THEN
    NML$ERROR_2 (NMA$C_STS_PLO,
		 NMA$C_PCXP_CHN);

!
! Move the channel pair to the end of the string of channel pairs.  Then
! increment the string length in the parameter descriptor stack.
!
CHANNEL_STRING [.COUNT,0,32,0] = ..NPARSE_BLOCK [NPA$L_FLDPTR];
NML$AW_PRM_DES [.INDEX, PDB$W_COUNT] = .COUNT +	.NPARSE_BLOCK [NPA$L_FLDCNT];

NML$GL_PRMCODE = 0;			! Reset parsing code

RETURN NML$_STS_SUC

END;				! End of NML$PRM_CHANNELS



END					! End of module

ELUDOM
