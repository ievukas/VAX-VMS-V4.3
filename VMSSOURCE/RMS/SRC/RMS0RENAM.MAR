	$BEGIN	RMS0RENAM,000,RM$RMS,<RENAME FILE SERVICE>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; Abstract:
;	this routine performs the $rename file rms function.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 24-MAY-1978
;
; Modified By:
;
;	V03-014	RAS0324		Ron Schaefer		10-Jul-1984
;		Fix up possible accvio path if new fab is bogus;
;		clear R10 before doing second network parse;
;		generally clean up the flows and registers.
;
;	V03-013	JWT0173		Jim Teague		 1-Apr-1984
;		Clear last longword on ATR list since the list is 
;		now dynamically allocated.
;
;	V03-012	DGB0031		Donald G. Blair		22-Mar-1984
;		Implement the XAB$V_PROPAGATE bit.
;
;	V03-011	RAS0277		Ron Schaefer		20-Mar-1984
;		Fix RAS0246 for network $RENAME operations.
;
;	V03-010	JWT0166		Jim Teague		20-Mar-1984
;		Use dynamically-allocated scratch page for accumulating
;		ATRs for QIOs.  FWA$T_ATR_LIST no longer exists.
;
;	V03-009	DGB0006		Donald G. Blair		01-Mar-1984
;		Call RM$FCPFNC rather than RM$FCPFNC_R4 as part of the
;		restructuring necessary to implement access mode 
;		protected files.
;
;	V03-008	RAS0242,RAS0246	Ron Schaefer		23-Jan-1984
;		Fix bugchecks caused by lack of a fwa (valid R10)
;		on calls to RM$PARSE_FILE.
;		Fix error reports to not map errors so you can tell
;		whether the failures are on enter or remove.
;		Re-vamp error reporting mechanism to make smaller.
;		Immediately return RMS$_IOP if device is a magtape.
;
;	V03-007	RAS0201		Ron Schaefer		17-Oct-1983
;		Correct calls to RM$PARSE_FILE to account for the fact
;		that it does NOT necessarily preserve R7.
;		Also make $RENAME work without requiring a NAM block.
;		Compare old/new device names using FWA$Q_SHRFIL_LCK.
;
;	V03-006	KPL0001		Peter Lieberwirth	20-Jun-1983
;		Allow rename of journaled file.
;
;	V03-005	TSK0002		Tamar Krichevsky	12-Jun-1983
;		Fix broken branch to RM$RTVJNL.
;
;	V03-004	KRM0079		Karl Malik		10-Jan-1983
;		Turn on network $rename.
;
;	V03-003 TSK0001		Tamar Krichevsky	28-Dec-1982
;		Reverse the order of operations; previously the new name was
;		entered into the target directory and then the old name was
;		removed from the source directory.  This created problems when
;		version limits were set.  Also, error recovery was improved.  
;		It was possible, with the old scheme, to have two directory
;		entries for to one physical file.  This has been remedied.
;
;		Insert a check to prevent the renaming of a journaled file.
;		At this time RMS is not supporting this operation for journaled
;		files.  
;
;		Save NAM$L_WCC across calls to RM$PARSE_FILE.  The wild card 
; 		context was being overwritten when the file name was being
;		parsed.  Channel information stored in the WCC field was lost.
;		If wild card processing was being done, while renaming files,
;		an unnecessarily large number of channels could be allocated to
;		the process.
;
;		Rearrange the order of the module to put the error handling 
;		code at the end.  The current organization is difficult to 
;		to read.
;
;	V03-002	KRM0060		Karl Malik		10-Sep-1982
;		Add support for network $RENAME. But leave 'turned
;		off' until FAL updates are checked in.
;
;	V03-001	KBT0171		Keith B. Thompson	23-Aug-1982
;		Reorganize psects and return entry points to single '$'
;
;	V02-010	RAS0043		Ron Schaefer		29-Oct-1981
;		Implement root directory support for target filespec.
;		Must call RM$ASSIGN to assign the channel for the
;		target device in order to get the root directory
;		evaluated.
;
;	V02-009	KPL0001		Peter Lieberwirth	29-Jul-1981
;		Rename entry point to $$ form so we can dispatch here
;		via RMS0BRNCH.
;
;	V02-008	REFORMAT	Maria del C. Nasr	24-Jul-1980
;
;	v007	KEK001		K E Kinnear	11-MAR-1980	18:40
;		Change check for same device on old and new file name
;		from string check to check of ucb addresses.
;
;	v006	RAS0009		R A Schaefer	20-DEC-1979	15:40
;		Set-up for invalid directory rename operation check
;		in rm$setdid.
;
;	v005	JAK0001		J A Krycka	27-AUG-1978	09:50
;		Miscellaneous clean-up prior to decnet v1.0 code freeze.
;		revise network error processing.
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$RMSDEF
	$DEVDEF
	$FABDEF
	$NAMDEF
	$IFBDEF
	$FIBDEF
	$IODEF
	$FWADEF
	$IMPDEF
	
;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8			; bit offset to fop bits
	V_ACS = 10			; field contains a nodename followed 
					;  by an access control string
;
; Own Storage:
;


	.SBTTL	RMS$RENAME - RENAME FILE ROUTINE

;++
; RMS$RENAME - This routine performs the following steps:
;	1) calls RM$FSETI to create an IFAB.
;	2) saves the address of the old FAB and new FAB on the stack. 
;	   The old FAB address MUST be the first thing pushed onto the stack.
;	3) calls RM$PARSE_FILE to parse the old file name, including
;	   setting up its directory id.  Verifies that the file spec contained 
;	   no wild cards and did not specify a process permanent file.  
;	4) issues an "access" qio to lookup the old file in the directory
;	   (but does not access the file).  Checks the to see if any of the 
;	   attriutes are turned on.  If the file is being journaled, it can not
;	   be renamed.
;	5) calls RM$FILLNAM to fill in the old name block, if any.
;	6) verifies the new FAB and NAM block is valid and accessable.
;	7) calls RM$PARSE_FILE to parse the new file name, including
;	   setting up its directory id.  Verifies that the file spec contained 
;	   no wild cards and did not specify a process permanent file.  
;	   (RM$PARSE_FILE observes that a channel is already assigned and 
;	   returns immediately after the parse without setting up the DID).
;       8) the parsed device name (including unit) is checked for being
;	   the same for both the old and new file specs.
;       9) saves the old file's FID in the FWA for a $RENAME specific directory 
;	   check and then calls RM$SETDID for the new file.
;      10) issues a "delete" qio to remove the old name from the old directory.
;      11) issues a "create" qio to enter the new name in the new directory
;	   (with the old fid).  If this fails, the old file name is re-entered
;	   into its original directory and return an error.  If the re-enter
;	   also fails, then return an error explaining that the file was lost.
;      12) calls RM$FILLNAM to fill in the new NAM block, if any.
;      13) branches to RM$CLSCU to deassign the channel and evaporate the IFAB.
;
;      *** NOTE: $RENAME used one IFAB and two FWAs -- one for each file name.
;		 Also, the STV and STS are returned in the FAB for the old file
;	             name.  R8 must contain the address of the old FAB before
;		     returning to the caller.
;
; Calling sequence:
;
;	entered as a result of user's calling sys$rename.
;
; Input Parameters:
;
;	ap user's argument list (note: 4 arguments required)
;
; Implicit Inputs:
;
;	the contents of the fab (bid, bln, ifi, nam) and the
;	related nam block.
;
; Output Parameters:
;
;	r1 - r5  destroyed
;	r0 status code
;
; Implicit Outputs:
;
;	the sts and stv fields of the fab are output along with
;	the fields of the nam block
;
;	a completion ast is queued if specified in the user arglist.
;
; Completion Codes:
;
;	standard rms, in particular acc, bln, dev, dir, dnf, dnr, drn,
;	ent, esa, esl, fab, fnd, fnf, fnm, ifi, iop, nam, prv,
;	rmv, rst, rss, sys, typ, ver, wld.
;
; Side Effects:
;
;	none
;
;--



;++
;
; entry point for $rename function
;
;--

	$ENTRY	RMS$RENAME
	$TSTPT	RENAME			; flag rename done
	BSBW	RM$FSETI		; create ifab

;
; Return to user on error
;	r11=impure area addr
;	r9=ifab addr
;	r8=fab addr
;

	PUSHL	R8			; save old fab address
	MOVL	16(AP),R1		; get the new fab address
	BSBW	NEWFAB1			; checkout new fab
	PUSHL	R8			; save newfab addr
	MOVL	4(SP),R8		; restore old fab addr

;++
;
;  Parse the old file spec and look up the old file.
;
;--

	MOVL	FAB$L_NAM(R8),R7	; locate the old NAM block 
	BEQL	10$			; ok without one
	BSBW	RM$CHKNAM		; is the NAM block valid?
	BLBC	R0,100$			; if not, then return an error
	PUSHL	NAM$L_WCC(R7)		; save the current wild card context,
					;   RM$PARSE_FILE overwrites this field
10$:	BSBW	PARSE_FILE		; parse the old file spec
					; and perform various checks
	BEQL	20$			; okay if no NAM block
	POPL	NAM$L_WCC(R7)		; restore wild card context.
20$:	BBS	#FWA$V_NODE,(R10),120$	; Branch if node

;++
;
; The following access of the file is similar to FILFNC, but has to be done
; in line.  The jounaling attributes need to be retrieved and there is no 
; provision in FILFNC to do so.  
;
;--

	BSBW	RM$GET1PAG		; Grab a scratch page
	MOVL	R3,FWA$L_ATR_WORK(R10)	; Save scratch page address
	MOVL	R3,R5			;  and put it in R5

    	JSB	RM$RTVJNL		; add the descriptor for journaling 
    					;   attributes to end of the list
	CLRL	(R5)			; indicate end of ATR list
    	CLRL	-(SP)			; P6 => 0
    	PUSHL	FWA$L_ATR_WORK(R10)	; P5 => descriptors for file attributes
    	BSBW	RM$FCP_P4_P2		; set up P4 through P2
    	MOVZBL	#IO$_ACCESS,R0		; function code for file lookup
	BSBW	RM$FCPFNC		; lookup the old file

	PUSHL	R0			; Save status
	MOVL	FWA$L_ATR_WORK(R10),R4	; Pass address of scratch page
	BSBW	RM$RET1PAG		; Return scratch page
	CLRL	FWA$L_ATR_WORK(R10)	; Indicate no work area now
	POPL	R0			; Restore status

	BLBC	R0,110$			; continue if successful
	BSBW	RM$FILLNAM		; fill in the old NAM blk, if any
	BLBC	R0,100$			; get out on error

;++
;
;  save the old file name context and process new
;
;--

	PUSHL	R10			; save old FWA address
	BSBW	NEWFAB			; Probe the new FAB's location, check
    					;  FAB's validity, load R8 with its adr
	MOVL	FAB$L_NAM(R8),R7	; locate the new NAM block 
	BEQL	40$			; okay if none
	BSBW	RM$CHKNAM		; is the NAM block valid?
	BLBS	R0,30$			; if yes, continue renaming the file

100$:	BRW	CLEAN			; return an error

110$:  	BRW	ERRACC			; otherwise, return an error

120$:	BRW	NETRENAM		; Branch (network operation)

130$:	BRW     ERRRMV			; otherwise, return an error

140$:   BRW	ERRDEV

30$:	PUSHL	NAM$L_WCC(R7)		; save the current wild card context,
					;   RM$PARSE_FILE overwrites this field
40$:	BSBW	PARSE_FILE		; parse new file name (but doesn't set 
    					;   DID, therefore it doesn't stall,
    					;   so user's blks don't need probing.)
	BEQL	50$			; okay if no NAM block
	POPL	NAM$L_WCC(R7)		; restore wild card context.
50$:	MOVAB	RM$ENTXAB_ARGS,AP	; ap = arg for xabscan
	BSBW	RM$XAB_SCAN		; handle pro xab
	BLBC	R0,100$			; exit on error


;++
;
; verify that old and new device names are the same.
; Must first assign channel for new file.  Old file has channel in IFAB.
;
;--

	MOVW	IFB$W_CHNL(R9),-(SP)	; save old file channel
	BSBW	RM$ASSIGN		; assign channel for new file
	BLBC	R0,140$			; if error, say bad device name
	$DASSGN_S	CHAN=IFB$W_CHNL(R9)	; remove the channel
	MOVW	(SP)+,IFB$W_CHNL(R9)	; restore the old channel
	MOVL	(SP),R0			; get old FWA pointer
	CMPC5	FWA$Q_SHRFIL_LCK(R0),-	; check if canonical device names
		@FWA$Q_SHRFIL_LCK+4(R0),- ; as returned by $GETDVI
		#-1,-			; funny fill to prevent matches
		FWA$Q_SHRFIL_LCK(R10),- ; are the same
		@FWA$Q_SHRFIL_LCK+4(R10)
	BNEQ	140$			; if not, then return an error 
	MOVL	(SP),R0			; get old FWA pointer
	MOVL	FWA$T_FIBBUF+FIB$W_FID(R0),-; copy FID to special place
		FWA$T_RNM_FID(R10)	; for invalid directory rename check
	MOVW	4+FWA$T_FIBBUF+FIB$W_FID(R0),-
		4+FWA$T_RNM_FID(R10)	;   all 6 bytes
	BSBW	RM$SETFIB		; set up FIB descriptor
	BSBW	RM$SETDID_ALT		; look up new directory id
	BLBC	R0,90$			; get out on error

;++
;
;  both old and new names parsed o.k., the device and unit are the same,
;  and the old file has been looked up.  Now, do the remove of the old name
;  and then the enter of the new name.  If the enter fails, go back and reenter
;  the old name.
;
;--

	MOVL	8(SP),R1		; restore old FAB addr
	BSBW	NEWFAB1			; check it out
	PUSHL   R10			; save the new FWA addr
    	MOVL	4(SP),R10		; restore old FWA addr
	MOVZBL	#IO$_DELETE,R5		; qio function code for remove
	BSBW	FILFNC			; remove the old file name
	BLBC	R0,130$			; if successful, enter the new name

	MOVL	R10,R0			; make room for the new FWA addr
	POPL	R10			; retrieve the new FWA addr
	BSBW	NEWFAB			; Probe the new FAB's location, check 
    					;   FAB's validity and load R8 with it's address
	MOVL	FWA$T_FIBBUF+FIB$W_FID(R0),-
	 	FWA$T_FIBBUF+FIB$W_FID(R10); copy old FID to new FIB
	MOVW	4+FWA$T_FIBBUF+FIB$W_FID(R0),-
	 	4+FWA$T_FIBBUF+FIB$W_FID(R10)
	MOVZBL	#IO$_CREATE,R5		; qio function code for enter
	BSBW	FILFNC			; enter the new file name
	BLBC	R0,70$			; if successful, finish up chores
					; otherwise re-enter old name
	BSBW	NEWFAB			; Probe the new FAB's location, check 
    					;   FAB's validity and load R8 with it's address
	BSBW	RM$FILLNAM		; fill in new nam blk, if any
	BLBC	R0,90$			; get out on error
	TSTL	R7			; do we have a nam blk?
	BEQL	60$			; branch if not

;
;  set the lowver and highver flags in the nam block
;

	ASSUME	FIB$V_HIGHVER EQ FIB$V_LOWVER+1
	ASSUME	NAM$V_HIGHVER EQ NAM$V_LOWVER+1
	EXTZV	#FIB$V_LOWVER,#2,-	; get version bits from FIB
		 FIB$W_NMCTL+FWA$T_FIBBUF(R10),R1
	INSV	R1,#NAM$V_LOWVER,#2,-	; copy them into user's NAM block
		 NAM$L_FNB(R7)	
60$:	MOVL	8(SP),R8		; retrieve the old FAB addr
	BRW	RM$CLSCU		; go evaporate ifab & return to user

70$:	PUSHL	R0			; save the error code for later use
	MOVL	4(SP),R10		; restore old FWA address
	BSBW	FILFNC			; do the re-enter *ASSUMPTION -- R5 HAS 
					;   NOT CHANGED SINCE LAST ENTER.
	BLBS	R0,80$			; if enter worked, return an error
	BRW	ERRREENT		; if not, give up - file has been lost

80$:	POPL	R0			; retrieve ACP error from enter
	BRW	ERRENT			; enter failed, but re-enter succeeded,
					;   old file is still intact

90$:	BRW	CLEAN

;++
;
;  The parse ( & parse check) of the old filespec has been completed and a 
;  nodename has been found. Now parse the new filespec, make sure the node
;  names match and issue the network $rename request.
;
;--

NETRENAM:

	BSBW	NT$NWA_FREE		; Get rid of old filespec
					;  NWA (no longer needed)
	$DASSGN_S IFB$W_CHNL(R9)	; Deassign the old channel
	CLRW	IFB$W_CHNL(R9)		; Clear the old channel field

;++
;
;  save the old file name context and process new
;
;--

10$:	PUSHL	R10			; save old fwa address
	BSBW	NEWFAB			; get new name fab addr in r8
	BSBW	PARSE_FILE		; parse new file name
	MOVL	8(SP),R1		; restore old fab address
	BSBW	NEWFAB1			; and check it out

;+
;  Check the new filespec for a nodename.
;-
	BBC	#FWA$V_NODE,(R10),40$	; Nodename on new file name?

;+
; Make sure the nodenames match (local RMS will take care of the device
; comparison on the remote node).
;-

20$:	MOVL	(SP),R2			; Get old FWA adr in reg
	MOVAL	FWA$Q_NODE1(R2),R2	; Get old filename FWA descriptor adr
	MOVZWL	(R2),R4			; Get old nodename length
	BBC	#V_ACS,2(R2),22$	; Branch if no access string present
					;  (high word of desc.)
	LOCC	#^A/"/,R4,@4(R2)	; Find the beginning quote
	SUBL2	R0,R4			; Compute nodename length (w/o acs)
22$:	MOVAL	FWA$Q_NODE1(R10),R3	; Get new filename FWA descriptor adr
	MOVZWL	(R3),R5			; Get new nodename length
	BBC	#V_ACS,2(R3),23$	; Branch if no access string present
	LOCC	#^A/"/,R5,@4(R3)	; Find the beginning quote
	SUBL2	R0,R5			; Compute nodename length (w/o acs)
23$:	CMPC5	R4,@4(R2),#0,R5,@4(R3)	; Compare the nodenames
	BNEQ	40$			; Branch on error and exit

;+
; They match - This is a valid network $RENAME request
;-

25$:	BSBW	NT$ACCESS		; Assign the logical link
	BLBC	R0,30$			; Branch on error
	BSBW	NT$RENAME		; Issue the DAP $RENAME request
30$:	MOVL	(SP),R10		; Restore old FWA adr
	MOVL	8(SP),R1		; Restore old FAB adr
	BSBW	NEWFAB1			;  and check it out
	BRW	RM$CLSCU		; Cleanup and exit.

40$:	BRW	ERRNOD			; Can't mix network and local rename


;++
;
;  filfnc subroutine to issue a qio function.
;
;  inputs:
;
;	r5		io function code
;	r8		fab address
;	r9		ifab address
;	r10		fwa address
;	r11		impure area address
;
;  outputs:
;
;	r0		status code
;	r1-r4,ap	destroyed
;
;--

FILFNC:	CLRQ	-(SP)			; p6=p5=0
	BSBW	RM$FCP_P4_P2		; set up p4 thru p2 to
					;  process name from fwa
	MOVL	R5,R0			; io function code to right reg.
	BSBW	RM$FCPFNC		; do acp function
	RSB

;++
;
;  subroutine to load address of new fab into r8 and check it for goodness.
;
;  inputs:
;
;	r9	ifab address
;	8(sp)	new fab address for NEWFAB
;	r1	new fab address for NEWFAB1
;
;  outputs:
;
;	r8	new fab address
;	r1	destroyed
;
;  note: does not return if fab is bad.
;
;--

	ASSUME	FAB$L_STS+4	EQ	FAB$L_STV

NEWFAB:	MOVL	8(SP),R1		; get new fab address
NEWFAB1:
	IFNORD	#FAB$C_BLN,(R1),ERRFAB,IFB$B_MODE(R9)
					; branch if new fab not readable
	CMPB	FAB$B_BID(R1),#FAB$C_BID; is it a fab?
	BNEQ	ERRFAB			; branch if not
	CMPB	FAB$B_BLN(R1),#FAB$C_BLN; is it long enough?
	BLSSU	ERRBLN			; branch if not
	MOVL	R1,R8			; put in right register
	CLRQ	FAB$L_STS(R8)		; clear sts & stv
	RSB


;++
;
;  parse_file subroutine to parse the filespec using RM$PARSE_FILE and
;  to verify that the parsed file spec contained
;  no wild cards, specified a disk device and did not specify a 
;  foreign device or process-permanent file.
;
;  inputs:
;
;	r0	status code (checked for success)
;	r10	fwa address
;	r8	fab address
;
;  outputs:
;
;	z-bit	set if no nam block exists
;	R7	0 if z-bit set
;	z-bit	clear if nam block exists
;	R7	ptr to nam block if z-bit clear
;
;  note:  does not return on error.
;
;--

PARSE_FILE:
	CLRL	R10			; signal no fwa
	BSBW	RM$PARSE_FILE		; parse new file name (but doesn't set 
    					;   DID, therefore it doesn't stall,
    					;   so user's blks don't need probing.)
	BLBC	R0,CLEAN		; get out if parse failed
	BBS	#FWA$V_WILDCARD,(R10),-	; get out if wild card speced
		ERRWLD
	TSTB	FWA$B_ESCFLG(R10)	; ppf?
	BNEQ	ERRIOP			; branch if yes
	BBS	#FWA$V_NODE,(R10),10$	; don't check device if node
	BBC	#DEV$V_RND,-
		IFB$L_PRIM_DEV(R9),ERRIOP ; error if not disk
	BBS	#DEV$V_FOR,-
		IFB$L_PRIM_DEV(R9),ERRIOP ; error if mounted foreign
10$:	MOVL	FAB$L_NAM(R8),R7	; NAM block present?
	BEQL	20$			; nope, but that's okay
	BSBW	RM$CHKNAM		; is it useable?
	BLBC	R0,CLEAN		; nope
	TSTL	R7			; set z-bit
20$:	RSB


;
; handle error conditions
;

MCLEAN:					; clean up acp-based errors
	MOVL	R0,FAB$L_STV(R8)	; save acp error

CLEAN1:	MOVZWL	@(SP)+,R0		; pick up in-line error code
CLEAN:
	BISL3	#<RMS$_FACILITY@16>,R0,-
		FAB$L_STS(R8) 		; save RMS error status
	PUSHL	FAB$L_STV(R8)		; save STV from current FAB
	MOVL	IMP$L_SAVED_SP(R11),R8	; restore old fab addr from stack
					;  (saved as 1st item on stack)
	MOVL	-(R8),R8		; this is the fab addr
	POPL	FAB$L_STV(R8)		; set STV in source FAB
	BRW	RM$CLSCU		; go evaporate all internal structs

ERRACC:
	BSBB	MCLEAN
	RMSERR_WORD	ACC		; lookup failed

ERRDEV:
	BSBB	CLEAN1
	RMSERR_WORD	DEV		; not same device or unit

ERRNOD:
	BSBB	CLEAN1
	RMSERR_WORD	NOD		; Not same node

ERRREENT:
	BSBB	MCLEAN
	RMSERR_WORD	REENT		; reenter of old file failed

ERRENT:
	BSBB	MCLEAN
	RMSERR_WORD	ENT  		; enter failed

ERRRMV:
	BSBB	MCLEAN
	RMSERR_WORD	RMV		; remove failed

ERRFAB:
	BSBB	CLEAN1
	RMSERR_WORD	FAB		; new fab bad

ERRBLN:
	BSBB	CLEAN1
	RMSERR_WORD	BLN		; not a fab

ERRWLD:
	BSBB	CLEAN1
	RMSERR_WORD	WLD		; wild card in spec

ERRIOP:
	BSBB	CLEAN1
	RMSERR_WORD	IOP		; attempt to rename ppf
					; foreign or non disk device

	.END
