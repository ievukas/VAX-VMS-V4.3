	.TITLE	CONNECT	- Connect/disconnect process to terminal
	.IDENT	'V04-000'
 
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; ABSTRACT:
;
;	Connect/disconnect process to terminal
;
; AUTHOR:
;
; 	Peter George,  June 1983
;
; MODIFIED BY:
;
;	V03-001	PCG0001		Peter George		27-Jun-1983
;		Use CONT as name of ASCIC string, not CONTINUE.
;		Use event flags more intelligently.
;---

;
; Macro library calls
;
	PRCDEF				; Define process data structure
	WRKDEF				; Define command data structure
	PTRDEF				; Define token descriptor fields
	$CLIMSGDEF			; Define cli related errors
	$DEVDEF				; Define device characteristics
	$DVIDEF				; Define $GETDVI codes
	$IODEF				; Define $QIO codes
	$RABDEF				; Define RAB fields
	$TT2DEF				; Define terminal characteristics
 
	.PSECT	DCL$ZCODE,BYTE,RD,NOWRT

CONT:
	.BYTE	9
	.ASCII	/CONTINUE/
	.BYTE	0

	.SBTTL	Connect	process to terminal
;+
; DCL$CONNECT - Connect process to terminal
;
; This routine is called as an internal command to execute the CONNECT
; DCL command.
;
; INPUTS:
;
;	R8 = Address of scratch buffer descriptor.
;	R9 = Address of scratch stack.
;	R10 = Base address of command work area.
;	R11 = Base address of process work area.
;
; OUTPUTS:
;
;	The process is connected to another terminal.
;-
 
DCL$CONNECT::					; Connect process
;
; Exit if batch job or input is not from a terminal.
;
	STATUS	NOTDISCON			; Assume not disconnectable
	BBS	#PRC_V_MODE,PRC_W_FLAGS(R11),80$; Exit if batch
	MOVL	PRC_L_INPRAB(R11),R1		; Get addr of input RAB
	BBC	#DEV$V_TRM,RAB$L_CTX(R1),80$	; Exit if input not a terminal

;
; Process /[NO]LOGOUT and /[NO]CONTINUE qualifiers.
;
	MOVL	#IO$_SETMODE!IO$M_TT_CONNECT!-	; Assume /LOGOUT
		IO$M_TT_DISCON,R6		;
	CLRL	R7				; Assume /NOCONTINUE
10$:	BSBW	DCL$GETDVAL			; Get first token
	CMPL	#PTR_K_COMDQUAL,R5		; Qualifier?
	BNEQ	20$				; No, then parameter
	BSBW	DCL$GETNVAL			; Get qualifier number
	CMPL	#CLI$K_CONN_CONT,R1		; Was it /CONTINUE?
	BNEQ	15$				; No, then branch

	CLRL	R7				; Assume /NOCONTINUE
	BLBS	R3,10$				; Branch if /NOCONTINUE
	INCL	R7				; Set /CONTINUE
	BICL	#IO$M_TT_DISCON,R6		; Set /NOLOGOUT
	BRB	10$				; Get next token

15$:	BISL	#IO$M_TT_DISCON,R6		; Assume /LOGOUT
	BLBC	R3,10$				; Branch if /LOGOUT
	BICL	#IO$M_TT_DISCON,R6		; Set /NOLOGOUT
	BRB	10$				; Get next token

;
; If /NOLOGOUT, check that terminal is disconnectable.
;
20$:	MOVQ	R1,R3				; Save terminal descriptor
	BBS	#IO$V_TT_DISCON,R6,30$		; Branch if /LOGOUT
	BSBW	DISCONNECTABLE			; Check disconnectability

;
; Connect to new terminal and optionally logout the process.
;
30$:	CLRQ	-(R9)				; Allocate an IOSB
	MOVQ	R3,-(R9)			; Save terminal name descriptor
	$QIOW_S	CHAN=PRC_W_INPCHAN(R11),-	; Execute the QIO
		IOSB=8(R9),-			;
		FUNC=R6,-			;
		EFN=#EXE$C_SYSEFN,-		;
		P1=(R9)				;
80$:	BLBC	R0,90$				; Branch if error
	MOVZWL	8(R9),R0			; Use IOSB status
	BLBC	R0,90$				; Branch if error

;
; Continue current process if requested.
;
	BLBC	R7,90$				; Branch if /NOCONTINUE
	BRW	CONTINUE			; Execute continue command
90$:	RSB					; Return

	.SBTTL	Disconnect process from terminal
;+
; DCL$DISCONNECT - Disconnect process from terminal
;
; This routine is called as an internal command to execute the DISCONNECT
; DCL command.
;
; INPUTS:
;
;	R8 = Address of scratch buffer descriptor.
;	R9 = Address of scratch stack.
;	R10 = Base address of command work area.
;	R11 = Base address of process work area.
;
; OUTPUTS:
;
;	The process is disconnected from the terminal.
;-
 
DCL$DISCONNECT::				; Disconnect process
;
; Exit if batch job or input is not from a terminal.
;
	STATUS	NOTDISCON			; Assume not disconnectable
	BBS	#PRC_V_MODE,PRC_W_FLAGS(R11),30$; Exit if batch
	MOVL	PRC_L_INPRAB(R11),R1		; Get addr of input RAB
	BBC	#DEV$V_TRM,RAB$L_CTX(R1),30$	; Exit if input not a terminal

;
; Check that terminal is disconnectable.
;
	BSBW	DISCONNECTABLE			; Check disconnectability

;
; Disconnect the terminal.
;
10$:	CLRQ	-(R9)				; Allocate an IOSB
	$QIOW_S	CHAN=PRC_W_INPCHAN(R11),-	; Execute the QIO
		IOSB=(R9),-			;
		EFN=#EXE$C_SYSEFN,-		;
		FUNC=#IO$_SETMODE!IO$M_TT_DISCON;
	BLBC	R0,30$				; Branch if error
	MOVZWL	(R9),R0				; Use IOSB status
	BLBC	R0,30$				; Branch if error

;
; Process /[NO]CONTINUE qualifier.
;
	BSBW	DCL$GETDVAL			; Get first token
	CMPL	#PTR_K_COMDQUAL,R5		; Qualifier?
	BNEQ	20$				; No, then done
	BLBC	R3,CONTINUE			; Branch if /CONTINUE

20$:	STATUS	NORMAL				; Set success status
30$:	RSB					; Return

	.SBTTL	Contine process after disconnect
;+
; CONTINUE - Contine process after disconnect
;
; This routine is called to issue the CONTINUE command.
;
; INPUTS:
;
;	R8 = Address of scratch buffer descriptor.
;	R9 = Address of scratch stack.
;	R10 = Base address of command work area.
;	R11 = Base address of process work area.
;
; OUTPUTS:
;
;	The process continues execution.
;-
 
CONTINUE:					; Continue process 
	MOVAB	CONT,R1				; Get addr of continue command
	MOVZBL	(R1)+,R0			; Get descr of command
	MOVC	R0,(R1),WRK_G_INPBUF(R10)	; Move command to input buffer
	MOVAB	WRK_G_INPBUF-1(R10),-		; Set input buffer pointer
		WRK_L_CHARPTR(R10)		;
	BRW	DCL$CMDSTART			; Execute the command

	.SBTTL	Check that terminal is disconnectable
;+
; DISCONNECTABLE - Check that terminal is disconnectable
;
; This routine is called to check that the terminal is disconnectable.
;
; INPUTS:
;
;	R8 = Address of scratch buffer descriptor.
;	R9 = Address of scratch stack.
;	R10 = Base address of command work area.
;	R11 = Base address of process work area.
;
; OUTPUTS:
;
;	Routine only returns to caller if terminal is disconnectable.
;-
DISCONNECTABLE:					; Check disconnectability
	CLRL	-(R9)				; Allocate a return buffer
	CLRQ	-(R9)				; Create the item list
	MOVAL	8(R9),-(R9)			; Set the buffer address
	MOVL	#DVI$_DEVDEPEND2@16!4,-(R9)	; Set item code and length
	CLRQ	-(R9)				; Allocate an IOSB
	$GETDVIW_S  CHAN=PRC_W_INPCHAN(R11),-	; Get the terminal chars
		ITMLST=8(R9),-			;
		IOSB=(R9),-			;
		EFN=#EXE$C_SYSEFN		;
	BLBC	R0,90$				; Branch if error
	MOVZWL	(R9),R0				; Use IOSB status
	BLBC	R0,90$				; Branch if error
	STATUS	NOTDISCON			; Assume not disconnectable
	BBC	#TT2$V_DISCONNECT,24(R9),90$	; Branch if not disconnectable
	RSB					; Return

90$:	TSTL	(SP)+				; Pop return address
	RSB					; Return status

	.END
