%TITLE 'MOM Service file I/O modules'
MODULE MOMFILEIO (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=LONG_RELATIVE,
				EXTERNAL = GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX Network Management Maintenance Operations Module (MOM)
!
! ABSTRACT:
!	This module contains general purpose file access routines
!	necessary for manipulating the Load and Dump files for NML.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Kathy Perko
!
! CREATION DATE:  11-Jan-1983
!
! MODIFIED BY:
!	V03-001	MKP0001		Kathy Perko		12-April-1984
!		Open load files for shared read so more than one MOM can
!		load the file at a time.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    MOM$SRVCLOSE,
    MOM$SRVOPEN,
    MOM$SRVREAD,
    MOM$SRVWRITE,
    MOM$SRVREWIND;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:MOMLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! OWN STORAGE:
!

OWN
    MOM$T_FAB : $FAB_DECL,	! Image file FAB
    MOM$T_RAB : $RAB_DECL;	! Image file RAB
	
!
! EXTERNAL REFERENCES:
!

$MOM_EXTERNALS;

EXTERNAL ROUTINE
    MOM$DEBUG_TXT,
    MOM$BLD_REPLY;


%SBTTL	'MOM$SRVCLOSE	Close currently opened file'
GLOBAL ROUTINE MOM$SRVCLOSE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine closes the currently opened file.
!
! ROUTINE VALUE:
! COMPLETION CODE:
!
!	Signals errors.
!
!--
BEGIN

LOCAL
    STATUS;			 ! Temporary return status
!
! Close the file.
!
STATUS = $CLOSE (FAB = MOM$T_FAB);
!
! If the operation was successful then log it.
!
IF .STATUS THEN
    MOM$DEBUG_TXT (DBG$C_SRVTRC,
		   $ASCID ('Image file closed.')
		   );

RETURN .STATUS

END;				! End of MOM$SRVCLOSE


%SBTTL 'MOM$SRVOPEN	Open requested file'
GLOBAL ROUTINE MOM$SRVOPEN (FILNAMDSC, ACCESS) =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine opens the specified file (if read access) or
!	creates the file (if read/write access).
!
! FORMAL PARAMETERS:
!	FILNAMDSC	Descriptor of the filename to be opened.
!	ACCESS 		File access code (read or read/write).
!
! SIDE EFFECTS:
!
!	Returns the status of the operation.
!
!--

BEGIN

MAP
    FILNAMDSC : REF VECTOR,    
    ACCESS    : BYTE;

LOCAL
    STV,				! To save Status Value field.
    MOM_L_STATUS;

!
! Fill in FAB and CREATE/OPEN the file depending on desired access
!
IF .ACCESS EQLU NMA$C_OPN_AC_RW THEN		! Read/write=create file
    BEGIN
    $FAB_INIT
	(
	FAB = MOM$T_FAB,		! Pointer to FAB
	DNM = 'SYS$SYSTEM:.SYS',	! Default file name string
	FNA = .FILNAMDSC [1],		! Ptr to filname string
	FNS = .FILNAMDSC [0],		! Length of filnam string
	FAC = PUT,			! Write access record I/O
	FOP = (CBT,MXV,SQO,SUP,TEF),	! File open options
	MRS = 512,			! Maximum record size
	ORG = SEQ,			! Sequential file (create)
	RFM = FIX			! Fixed length records
	);

    MOM_L_STATUS = $CREATE (FAB = MOM$T_FAB); ! Create the file
    STV = .MOM$T_FAB [FAB$L_STV];
    END
ELSE					! Assume RO (open not create)
    BEGIN
    $FAB_INIT
	(
	FAB = MOM$T_FAB,		! FAB address
	DNM = 'SYS$SYSTEM:.SYS',	! Default file name string
	FNA = .FILNAMDSC [1],		! Ptr to filname string
	FNS = .FILNAMDSC [0],		! Length of filnam string
	FAC = GET,			! Read access, record I/O
	SHR = GET,			! Allow other MOMs to read it too.
	FOP = SQO			! Sequential processing only
	);

    MOM_L_STATUS = $OPEN (FAB = MOM$T_FAB);
    STV = .MOM$T_FAB [FAB$L_STV];
    END;

IF .MOM_L_STATUS THEN
    BEGIN
    !
    ! Build the RAB.
    !
    $RAB_INIT
	(
	RAB = MOM$T_RAB,		! Associated RAB
	FAB = MOM$T_FAB		! Associated FAB
	);

    MOM_L_STATUS = $CONNECT (RAB = MOM$T_RAB);
    STV = .MOM$T_RAB [RAB$L_STV];
    END;
!
! If the operation was successful then log it.
!
IF .MOM_L_STATUS THEN
    MOM$DEBUG_TXT (DBG$C_SRVTRC,
	    	   $ASCID ('Image file opened.'))
ELSE
    !
    ! If the create, open, or connect failed, set up the message block to
    ! log an error.
    !
    BEGIN
    MOM$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_DET_FLD OR
				    MSB$M_MSG_FLD OR
				    MSB$M_MSG2_FLD;
    MOM$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_FOP;
    MOM$AB_MSGBLOCK [MSB$L_TEXT] = .MOM_L_STATUS;
    MOM$AB_MSGBLOCK [MSB$L_TEXT2] = .STV;
    END;

RETURN .MOM_L_STATUS;

END;					! End of MOM$SRVOPEN

%SBTTL 'MOM$SRVREAD Read a record from the opened file'
GLOBAL ROUTINE MOM$SRVREAD (BUFFERDSC, BYTES_IN_BUF, LOAD_FILE) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called while doing down line load to get the
!	contents of the load file (from disk or another node) to send
!	to the node being loaded.  It reads records from the currently
!	opened load file into the specified buffer and return in the
!	BYTES_IN_BUF parameter the number of bytes actually read.
!
! FORMAL PARAMETERS:
!
!	BUFFERDSC	Descriptor of the receive buffer.
!	BYTES_IN_BUF	Word to receive the actual number of bytes read.
!	LOAD_FILE	Identification of which load file is being loaded
!			(secondary, tertiary, or operating system).  Used
!			for signalling errors.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns the status of the operation.
!
! SIDE EFFECTS:
!
!	Fills in the formal parameter BYTES_IN_BUF with the size of data 
!	actually received.
!
!--

BEGIN

MAP
    BUFFERDSC : REF VECTOR;

LOCAL
    MOM_L_STATUS,
    BUF_PTR,		! Pointer into read buffer to place to put next record.
    BUF_LEFT,		! Bytes left in read buffer.
    BYTES_IN_REC,	! Size of last record read into buffer.
    MSGSIZE;		! For signalled error message.


!
! Read in as many complete records as will fit into the buffer.  The
! file has fixed length records.
!
! Set up RAB fields for the beginning of the read buffer, the read
! buffer size, and the size of the record just read (zero to begin
! with).
!
BUF_PTR = .BUFFERDSC [1];	! Read buffer address
BUF_LEFT = .BUFFERDSC [0];	! Read buffer size
BYTES_IN_REC = 0;
!
! If there is room in the buffer for another complete record, then
! read it in.
!
WHILE .BUF_LEFT GEQ .BYTES_IN_REC DO
    BEGIN
    MOM$T_RAB [RAB$L_UBF] = .BUF_PTR;	! Read buffer address
    MOM$T_RAB [RAB$W_USZ] = .BUF_LEFT;	! Read buffer size
    MOM_L_STATUS = $GET (RAB = MOM$T_RAB);
    IF .MOM_L_STATUS
    THEN
	BEGIN
	BYTES_IN_REC = .MOM$T_RAB [RAB$W_RSZ];
	BUF_LEFT = .BUF_LEFT - .BYTES_IN_REC;
	BUF_PTR = .BUF_PTR + .BYTES_IN_REC;
	END
    ELSE
	!
	! If there was an error check to see if it was EOF.  If it was,
	! and there is data in the read buffer, return the data to the
	! caller.  Otherwise, signal an error and quit the load.
	!
	BEGIN
	IF (.MOM_L_STATUS EQL RMS$_EOF) AND
	   (.BUF_PTR GTR .BUFFERDSC [1]) THEN
	    BEGIN
	    MOM_L_STATUS = SUCCESS;
	    EXITLOOP;
	    END
	ELSE
	    BEGIN
	    MOM$AB_MSGBLOCK [MSB$L_FLAGS]  = MSB$M_DET_FLD OR
					 MSB$M_MSG_FLD;
	    MOM$AB_MSGBLOCK [MSB$B_CODE]   = NMA$C_STS_FIO;
	    MOM$AB_MSGBLOCK [MSB$W_DETAIL] = .LOAD_FILE;
	    MOM$AB_MSGBLOCK [MSB$L_TEXT]   = .MOM_L_STATUS;
	    MOM$AB_MSGBLOCK [MSB$L_TEXT2] = .MOM$T_RAB [RAB$L_STV];
	    MOM$BLD_REPLY (MOM$AB_MSGBLOCK, MSGSIZE);
	    $SIGNAL_MSG (MOM$AB_NICE_XMIT_BUF, .MSGSIZE);
	    END;
	END;
    END;
!
! Set up actual number of bytes read into read buffer.
!
(.BYTES_IN_BUF)<0,16> = .BUF_PTR - .BUFFERDSC [1];
RETURN .MOM_L_STATUS
END;				! End of MOM$SRVREAD

%SBTTL 'MOM$SRVWRITE  Write record in currently opened file'
GLOBAL ROUTINE MOM$SRVWRITE (BUFADR, BUFLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes out the buffer specified to the currently
!	opened file.
!
! FORMAL PARAMETERS:
!
!	BUFADR		The address of buffer to be written
!	BUFLEN		The length of buffer to be written
!
! SIDE EFFECTS:
!
!	Returns the status of the operation.
!
!--

BEGIN

MAP
    BUFLEN : WORD;

LOCAL
    STATUS,
    MSGSIZE;
!
! Fill in the user buffer address and size
!
MOM$T_RAB [RAB$L_RBF] = .BUFADR;
MOM$T_RAB [RAB$W_RSZ] = .BUFLEN;
!
! Write the record and return the status.
!
STATUS = $PUT (RAB = MOM$T_RAB);
IF NOT .STATUS THEN
    !
    ! If there was an error, then signal it and quit the load.
    !
    BEGIN
    MOM$AB_MSGBLOCK [MSB$L_FLAGS]  = MSB$M_DET_FLD OR
					 MSB$M_MSG_FLD;
    MOM$AB_MSGBLOCK [MSB$B_CODE]   = NMA$C_STS_FIO;
    MOM$AB_MSGBLOCK [MSB$L_TEXT]   = .STATUS;
    MOM$AB_MSGBLOCK [MSB$L_TEXT2] = .MOM$T_RAB [RAB$L_STV];
    MOM$BLD_REPLY (MOM$AB_MSGBLOCK, MSGSIZE);
    $SIGNAL_MSG (MOM$AB_NICE_XMIT_BUF, .MSGSIZE);
    END;
RETURN .STATUS;    
END;					! End of MOM$SRVWRITE

%SBTTL 'MOM$SRVREWIND  Rewind currently open file'
GLOBAL ROUTINE MOM$SRVREWIND =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine rewinds the currently open file.
!
! SIDE EFFECTS:
!
!	Returns the status of the operation.
!
!--

BEGIN

!
! Rewind the file
!
RETURN $REWIND (RAB = MOM$T_RAB)
    
END;						! End of MOM$SRVREWIND

END						! End of module

ELUDOM
