	.TITLE	RXBTDRIVR - 11/8SS CONSOLE RX50 BOOT DRIVER
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	BOOTS
;
; ABSTRACT:
;	This module contains the bootstrap device driver for the
;	RX50 console floppy.
;
; ENVIRONMENT:	IPL 31, kernel mode, code must be PIC
;
; AUTHOR:  Robert L. Rappaport,	CREATION DATE:   14-Oct-1983
;
; MODIFIED BY:
;
;	V03-001	RLR0001		Robert L. Rappaport	2-Apr-1984
;		Subroutine LOAD_RX50 returns in R0; 0 implies success and
;		1 implies error.  Correct sense of BLBx instructions of
;		callers of this routine.
;
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$BTDDEF				; Boot device types
	$IODEF				; I/O function codes
	$PRDEF				; Processor registers
	$PTEDEF				; PTE definitions
	$RPBDEF				; RPB offsets
	$SSDEF				; Status codes
	$VADEF				; Virtual address fields

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; 11/8SS CONSOLE FLOPPY DEFINITIONS
;

	$DEFINI	RX			;START OF REGISTER DEFINITIONS

$DEF	RX5ID		.BLKB	1	; ID Register (RO register, value is 04)
			.BLKB	1
			.BLKB	1
			.BLKB	1
$DEF	RX5CS0		.BLKB	1	; Dual purpose register. Used for
					;  entering commands and also for
					;  reading status.
	_VIELD	RX5CS0,0,<-		; Command Function bit definitions.
		<SIDSEL,,M>,-		; Side Select
		<DSKSEL,,M>,-		; Disk Select
		<DRVSEL,,M>,-		; Drive Select
		<EXTMOT,,M>,-		; Extended Motor Timeout
		<FUNC0,,M>,-		; Function Bit 0
		<FUNC1,,M>,-		; Function Bit 1
		<FUNC2,,M>,-		; Function Bit 2
	>
	_VIELD	RX5CS0,3,<-		; R/W Status bit definitions.
		<DONE,,M>,-		; Done
		<,3>,-
		<ERROR,,M>,-		; Error summary
	>
			.BLKB	1


$DEF	RX5CS1		.BLKB	1	; Command Function is to accept target
					;  track.
			.BLKB	1
$DEF	RX5CS2		.BLKB	1	; Command Function is to accept target
					;  sector.
			.BLKB	1
$DEF	RX5CS3		.BLKB	1	; Current Sector - This register contains the
					;  sector number that was last specified
					;  in the input sector register.
			.BLKB	1

$DEF	RX5CS4		.BLKB	1	; Incorrect track register - The contents
					;  of this register will be valid only
					;  when a SEEK error occurs while attempting
					;  to execute a command.  Then this
					;  register will contain the track address
					;  where the R/W head finally located.
					;  If no SEEK error occurred, will be 0.
			.BLKB	1

$DEF	RX5CS5		.BLKB	1	; Extended Command Register
					; 
					; 
			.BLKB	1

$DEF	RX5EB		.BLKB	1	; Empty Sector Buffer Register - Sequential
					;  byte reads from this register empty
					;  the 512 byte data buffer.
			.BLKB	1

$DEF	RX5CA		.BLKB	1	; Clear Address Register - Any access to
					;  this register results in clearing
					;  Data Buffer address to zero.
			.BLKB	1

$DEF	RX5GO		.BLKB	1	; Start Command Register - Any access
					;  to this register instructs the
					;  controller to execute the function
					;  specified in the command registers.
			.BLKB	1

$DEF	RX5FB		.BLKB	1	; Fill Sector Buffer - Write only
					;  register.  Successive byte writes
					;  to this register fill 512 byte buffer.
			.BLKB	1

RX_READSECTOR = ^x40			; FUNCTION READ SECTOR
RX_WRITESECTOR = ^x70			; FUNCTION WRITE SECTOR

	$DEFEND	RX			;END OF 11/8SS FLOPPY DEFINITIONS

RCX50_REGS = ^x200B0000			; Physical address of RCX50 CSRs.

;
; OWN STORAGE:
;

;
; Boot driver table entry
;

	$BOOT_DRIVER	DEVTYPE = BTD$K_CONSOLE,-  ; Device type (console)
			CPUTYPE = PR$_SID_TYP8SS,- ; Cpu type (11/8SS)
			SIZE = CONSRX_DRVSIZ,-	   ; Driver size
			ADDR = CONSRX_DRIVER,-	   ; Driver address
			DRIVRNAME = RXNAME	   ; Driver file name

	.SBTTL	Console Floppy Bootstrap Driver Code

;++
;
; Inputs:
;
;	R1	Address of page table for virtual -> physical mapping
;	R2	Base VPN of transfer (Bits 29:9 of R10)
;	R5	LBN for current piece of transfer
;	R8	Size of transfer in bytes
;	R9	Address of the RPB
;	R10	Starting address of transfer
;
;	FUNC(AP)  I/O operation (IO$_READLBLK or IO$_WRITELBLK only)
;	MODE(AP)  Address interpretation mode:
;		     0 -> Physical,  1 -> Virtual
;
; Outputs:
;
;	R0	Status code:
;
;		SS$_NORMAL	Successful transfer
;		SS$_CTRLERR	Fatal controller error
;--

FUNC = 16
MODE = 20

CONSRX_DRIVER:
	PUSHR	#^M<R1,R2,R8,R10,R11>	; Save input registers
	MOVL	#RCX50_REGS,R4		; R4 => CSR base (physical address).

;
; Perform initialization:  Set up a mapping switch in R11,
; There are 4 possibilities concerning mapping:  the I/O can be 
; done virtual or physical (MODE(AP)) and we can be executing virtual
; or physical (contents of processor register PR$_MAPEN).  If both
; modes match, then we can just copy data to/from the user buffer.
; If the I/O is to be done virtual and we are executing physical
; then the buffer address has to be translated using the page table
; pointed to by R1.  If the I/O is to be done physical and we are
; executing virtual then we have to double map the buffer using a spare
; PTE.  At this point, we just compute a mapping switch in R11 as follows:
;
;	0	Both modes match, just copy the data
;	1	Do virtual -> physical translation using page table
;	-1	Do physical -> virtual mapping using a spare PTE
;

	MFPR	#PR$_MAPEN,R11		; Get mapping enabled switch
	BEQL	10$			; EQL implies mapping NOT enabled so
					;  the physical CSR address in R4 is
					;  valid.
	MOVL	RPB$L_CSRVIR(R9),R4	; Replace with virtual CSR address. NOTE
					;  that this implies that the console
					;  RX50 is the real boot device.  That
					;  is we rely on RPB$L_CSRVIR pointing
					;  to this device's CSR.
10$:
	MNEGL	R11,R11			; Negate it
	ADDL	MODE(AP),R11		; Add I/O mode switch

	MOVQ	R1,R6			; R6 = Addr. of page tbl, R7 = Base VPN

;
; Set up mapping if required
;
	BSBW	DO_MAPPING

;
; This is the main loop to read or write to the floppy and to get
; or store in memory.  Register usage is:
;
;	R0 - R3		Scratch
;	R4		Address of CSR base
;	R5		LBN
;	R6		Address of page table
;	R7		Virtual page number of buffer
;	R8		Size of remaining buffer (in bytes)
;	R9		Address of RPB
;	R10		Address of current spot in buffer
;	R11		Mapping switch
;
; First convert LBN to physical sector and
; cylinder.  Then send command, sector, and cylinder to floppy.  Then
; read or write 512 bytes of data.  Repeat until byte count goes to zero.
;


MAIN_LOOP:

	BSBB	TRKSEC			; Returns: R0 = side select,
					; R1 = track and R2 = sector
	MOVZWL	#512,R3			; Assume full sector I/O.
	CMPL	R3,R8			; Compare to what's left of buffer.
	BLEQ	10$			; LEQ implies full sector of I/O.
	MOVL	R8,R3			; User lesser of R3 and R8.
10$:
	CMPL	FUNC(AP),#IO$_READLBLK	; Is it read?
	BEQL	READ			; Yes

;
; Do a Write to the floppy
;

	BISB	#RX_WRITESECTOR,R0	; Or in write command.
	TSTB	RX5CA(R4)		; Clear hardware buffer (silo) address.
	PUSHL	R0			; Save register value.
20$:
	BSBB	GETBYTE			; Get byte from memory into R0.
	MOVB	R0,RX5FB(R4)		; Fill hardware (silo) buffer.
	SOBGTR	R3,20$			; Repeat
	POPL	R0			; Restore register.
	BSBW	LOAD_RX50		; Load CSRs. (R0=0 return is success.)
	BLBC	R0,SECTOR_SUCCESS	; If success, branch around.

FLOPPY_ERROR:				; Error from floppy

	POPR	#^M<R1,R2,R8,R10,R11>	; Restore registers 
	MOVZWL	#SS$_CTRLERR,R0		; Set failure status
	RSB				; Return and retry

;
; Do a Read from floppy
;

READ:
	BISB	#RX_READSECTOR,R0	; Or in read command.
	BSBW	LOAD_RX50		; Load CSRs. (R0=1 return is failure.)
	BLBS	R0,FLOPPY_ERROR		; If ERROR, branch back.
	TSTB	RX5CA(R4)		; Clear hardware buffer (silo) address.
30$:
	MOVB	RX5EB(R4),R0		; Empty hardware (silo) buffer.
	BSBB	PUTBYTE			; Put byte into memory from R0.
	SOBGTR	R3,30$			; Repeat

;
; Done with this sector.  Repeat loop if byte count is non-zero
;
SECTOR_SUCCESS:

	TSTL	R8			; Test remaining byte count
	BEQL	DONE_SUCCESS		; Done
	INCL	R5			; Increment LBN
	BRB	MAIN_LOOP		; Do next sector

DONE_SUCCESS:

	MOVZWL	#SS$_NORMAL,R0		; Successful completion
	POPR	#^M<R1,R2,R8,R10,R11>	; Restore registers
	RSB
	.PAGE
;++
; TRKSEC - Subroutine to convert LBN to physical
;	   sector/cylinder on floppy by applying sector interleave
;	   and track-to-track skew (2 sectors).
;
; Inputs:
;	R5	LBN
;
; Outputs:
;	OUTPUTS:	R0	Side select data
;			R1	track number
;			R2	Sector number
;
;  NOTES: SIDE = LBN DIV 800     BN = LBN MOD 800
;	  TRK  = BN DIV 10	 BNA = BN MOD 10
;
; Credits:
;	Thanks to Dick Vignoni for this one.
;--

TRKSEC:

; Convert LBN in R5 to physical device address

	MOVL	R5,R0		; Copy LBN to R0
	CLRL	R1		; Clear for EDIV
	EDIV	#800.,R0,R0,R2	; R2<=BN   R0<=SURFACE
	CLRL	R3		; Clear for EDIV
	EDIV	#10.,R2,R1,R3	; R1<=TRK  R3<=BNA
	ADDL2	R1,R2		; R2<== BN + TRK
	MULL2	#2,R2		; R2<== (BN+TRK)*2
	DIVL2	#5,R3		; R3<==  BNA/5
	ADDL2	R3,R2		; R2<==(BNA/5 + ((BN+TRK)*2))
	CLRL	R3		; Clear for EDIV
	EDIV	#10.,R2,R3,R2	; R2 <==R2 MOD 10
	INCL	R2		; Make tracks start at 1
	INCL	R1		; Make sectors start at 1
	CMPB	#80.,R1		; is this the last track on surface ?
	BNEQ	10$		; Br if no
	CLRL	R1		; set track to 0 (last track=0)	
10$:
	RSB
	.PAGE
;++
; GETBYTE - Subroutine to get a byte from memory
; PUTBYTE - Subroutine to store a byte in memory
;
;	These two subroutines do two things special:
;
;		1)  Since the floppy always reads or writes 128 bytes
;		    these routines simply return if the byte count is zero.
;		2)  These routines take care of page boundaries if
;		    mapping is required.
;
; Inputs:
;	R0	Byte to store (PUTBYTE)
;	R6	Address of page table
;	R7	Virtual page number of buffer
;	R8	Size of remaining buffer (in bytes)
;	R10	Address of current spot in buffer
;	R11	Mapping switch:
;			-1   Do physical -> virtual map
;			0    No mapping required
;			1    Do virtual -> physical translation
;
; Outputs:
;	R0	Byte fetched from memory (GETBYTE)
;--

	.ENABL	LSB

GETBYTE:
	CLRL	R0			; Return 0 if byte count = 0
	TSTL	R8			; Is byte count 0?
	BEQL	90$			; Yes
	MOVZBL	(R10)+,R0		; Get byte
	BRB	10$			; Branch to common code


PUTBYTE:
	TSTL	R8			; Is byte count 0?
	BEQL	90$			; Yes
	MOVB	R0,(R10)+		; Store byte


10$:	DECL	R8			; Decr. byte count
	BEQL	90$			; Reached zero
	BITW	#VA$M_BYTE,R10		; Did address overflow onto new page?
	BNEQ	90$			; No
	INCL	R7			; Yes, increment page number

;
; Fall through to ...
;


;++
; DO_MAPPING - Subroutine to perform necessary mapping
;
; Inputs:
;	R6	Address of page table
;	R7	Page number of buffer
;	R10	Address to map
;	R11	Mapping switch:
;			-1	Do physical -> virtual map
;			0	No mapping required
;			1	Do virtual -> physical translation
;
; Outputs:
;	R10	Address to use
;--

DO_MAPPING:
	TSTL	R11			; Any mapping required?
	BEQL	90$			; No
	BLSS	100$			; Yes, map physical to virtual
	BICL	#^C<VA$M_BYTE>,R10	; Yes, translate virtual to physical
					; Clear everything but byte offset
	PUSHL	(R6)[R7]		; Get PFN on top of stack
	INSV	(SP)+,#VA$V_VPN,#PTE$S_PFN,R10   ; Insert PFN after byte offset 
90$:	RSB


; 
; Map physical to virtual
;
100$:	HALT				; Not implemented yet

	.DSABL	LSB
	.PAGE
;++
; LOAD_RX50 - subroutine to load RX50 CSR's
;
; Inputs:
;	R0 = Command or'ed with side select
;	R1 = track
;	R2 = sector
;	R4 => CSR base
;
; Outputs:
;	R0 = 0 if successful
;	R0 = 1 if error	     *****NOTE, inverted success/failure indication*****
;--

LOAD_RX50:

	MOVB	R0,RX5CS0(R4)		; Load command and side select.
	MOVB	R1,RX5CS1(R4)		; Load track.
	MOVB	R2,RX5CS2(R4)		; Load sector.
	CLRB	RX5GO(R4)		; Start function.
10$:
	MOVZBL	RX5CS0(R4),R0		; Read status register.
	BITB	#RX5CS0_M_DONE,R0	; See if function completed.
	BEQL	10$			; EQL implies not yet done.
	ASSUME	RX5CS0_V_ERROR	EQ	7
	ASHL	#-7,R0,R0		; Shift error bit into low bit of R0.
	RSB				; Return to caller. R0 has status.

RXNAME:	.ASCIC	/RXDRIVER.EXE/

CONSRX_DRVSIZ=.-CONSRX_DRIVER

	.END
