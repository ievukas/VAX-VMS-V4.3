%TITLE 'EDT$LINCL - INCLUDE line-mode command'
MODULE EDT$LINCL (				! Line-mode INCLUDE command
		IDENT = 'V04-000'			! File: LINCL.BLI Edit: JBS1028
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module executes the line mode INCLUDE command.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: February 3, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 30-JAN-1981.  This module was created by
!	extracting the routine EDT$$INCL_CMD  from the module EXEC.BLI.
! 1-002	- Change from IO_STS and IO_FNF to EDT$$G_IOFI_NFND .
!	   JBS 19-Feb-1981
! 1-003	- Fix module name.  JBS 20-Mar-1981
! 1-004	- Use new message codes.  JBS 04-Aug-1981
! 1-005 - Change I/O calls to use EDT$FILEIO. STS 26-Dec-1981
! 1-006 - Change call to fileio to callfio. STS 06-Jan-1982
! 1-007 - Fix DSC$A_POINTER macro. STS 14-Jan-1982
! 1-008 - Add rhb descr. definitions. STS 22-Jan-1982
! 1-009 - Add a return value for line insertion success.  SMB 3-Feb-1982
! 1-010 - Deallocate dynamic descriptors. STS 10-Feb-1982
! 1-011 - Pass filename to edt$$fiopn_err. STS 25-Feb-1982
! 1-012 - Add literals for callable parameters. STS 08-Mar-1982
! 1-013	- File I/O routines return a status.  JBS 26-Mar-1982
! 1-014	- Correct a typo in edit 1-013.  JBS 29-Mar-1982
! 1-015	- Print a message on a CLOSE error.  JBS 12-Apr-1982
! 1-016 - Change PDP-11 filenames to uppercase.  SMB 19-Apr-1982
! 1-017 - Add error message for no filename.  SMB 21-Apr-1982
! 1-018	- Check for record too long.  JBS 02-Jun-1982
! 1-019	- Pass default name in RHB parameter.  JBS 15-Jun-1982
! 1-020 - Add control C checking.  SMB 30-Jun-1982
! 1-021 - Stop processing on bad select range.  SMB 01-Jul-1982
! 1-022	- Set EDT$$G_SCR_CHGD if the screen is changed.  JBS 07-Jul-1982
! 1-023 - Change names of include file messages.  SMB 13-Jul-1982
! 1-024 - Print out error messages on GETs. STS 20-Jul-1982
! 1-025 - Don't check RMS status on 11's since error message has
!	   already been printed. STS 22-Jul-1982
! 1-026	- Don't set EDT$$G_SCR_CHGD, new screen logic doesn't need it.  JBS 09-Oct-1982
! 1-027 - Put edt$$rng_posfrst in line. STS 11-Oct-1982
! 1-028	- Make sure select is at the beginning of the line.  JBS 12-Jul-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$INCL_CMD : NOVALUE;			! Process the INCLUDE command

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!+
! VMS system symbols
!-

%IF %BLISS (BLISS32)
%THEN

REQUIRE 'EDTSRC:SYSSYM';

%FI

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!	NONE
!
! LITERALS
!

EXTERNAL LITERAL
    EDT$K_OPEN_INPUT,
    EDT$K_CLOSE,
    EDT$K_GET,
    EDT$K_INCLUDE_FILE;

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$INCL_CMD  - Line mode INCLUDE command'

GLOBAL ROUTINE EDT$$INCL_CMD 			! Line mode INCLUDE command
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Command processing routing for the INCLUDE command.  Attempt to open the file.
!	If it succeeds then position as indicated by the range and read the file
!	into the buffer in front of that line.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$T_LN_BUF
!	EDT$$A_EXE_CURCMD
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_SEL_POS
!	EDT$$G_TXT_ONSCR
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Reads a text file into the work file system, or prints an error message.
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$STOP_WKINGMSG,
	EDT$$CHK_CC,
	EDT$$FMT_MSG,
	EDT$$CALLFIO,
	EDT$$RNG_REPOS,
	EDT$$END_INS,
	EDT$$INS_LN,
	EDT$$START_INS,
	EDT$$FIOPN_ERR;

%IF %BLISS (BLISS32)
%THEN

    EXTERNAL ROUTINE
	STR$FREE1_DX;

%FI

    EXTERNAL
	EDT$$G_RNG_FRSTLN,
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,
	EDT$$Z_RNG_ORIGPOS : POS_BLOCK,
	EDT$$A_IO_FNAM,
	EDT$$G_CC_DONE,				! CNTRL/C aborted the command
	EDT$$G_IOFI_NFND,			! File not found flag
	EDT$$A_EXE_CURCMD : REF NODE_BLOCK,	! Pointer to the current command.
	EDT$$G_TXT_ONSCR,			! Force "press return to continue" if under EXT
	EDT$$T_LN_BUF,				! Line buffer
	EDT$$A_SEL_POS;				! Select position in line buffer

    MESSAGES ((INCFILNEX, ERRINPFIL, INCFILOPN, INCFILCLO, NOFILSPC, RECTOOBIG));

    LOCAL
	FILE_DESC : BLOCK [8, BYTE],
	RHB_DESC : BLOCK [8, BYTE],
	GET,
	STRADR,
	STATUS,
	STRLEN,
	RECORD_TOO_BIG;

!+
! If this is VMS, then we are going to pass a descriptor to the
! file i/o routine, so set up the type and class
!-

%IF %BLISS (BLISS32)
%THEN
    RHB_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    RHB_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    FILE_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    FILE_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
%FI

    RECORD_TOO_BIG = 0;
!+
! Open the file.
!-
    RHB_DESC [DSC$A_POINTER] = 0;
    RHB_DESC [DSC$W_LENGTH] = 0;
    FILE_DESC [DSC$A_POINTER] = 0;
    FILE_DESC [DSC$W_LENGTH] = 0;
    STRLEN = .EDT$$A_EXE_CURCMD [FSPCLEN];	! length of filename
    STRADR = .EDT$$A_EXE_CURCMD [FILSPEC];	! Address of filename string
!+
! File specification must be given for INCLUDE
!-

    IF (.STRLEN EQL 0)
    THEN
	BEGIN
	EDT$$FMT_MSG (EDT$_NOFILSPC);
	RETURN (0);
	END;

    STRING_DESC (FILE_DESC, STRLEN, .STRADR);
    STATUS = EDT$$CALLFIO (EDT$K_OPEN_INPUT, EDT$K_INCLUDE_FILE, FILE_DESC, RHB_DESC);

    IF .STATUS
    THEN
	BEGIN
!+
! File was opened.  Position to start of the range.
!-
	EDT$$G_RNG_FRSTLN = 1;
	EDT$$CPY_MEM (POS_SIZE, .EDT$$A_CUR_BUF, EDT$$Z_RNG_ORIGPOS);

	IF ( NOT EDT$$RNG_REPOS (.EDT$$A_EXE_CURCMD [RANGE1])) THEN RETURN (0);

!+
! Insert all the lines from the file at the current position.
!-
	EDT$$START_INS ();
	STATUS = 1;

	WHILE (.STATUS NEQ 0) DO
	    BEGIN
	    GET = EDT$$CALLFIO (EDT$K_GET, EDT$K_INCLUDE_FILE, FILE_DESC, RHB_DESC);

%IF %BLISS (BLISS32)
%THEN

	    IF (.GET EQL RMS$_EOF) THEN EXITLOOP;

	    IF ( NOT .GET) THEN EDT$$FIOPN_ERR (EDT$_ERRINPFIL, .EDT$$A_IO_FNAM);

%ELSE

	    IF ( NOT .GET) THEN EXITLOOP;

%FI

	    IF (EDT$$CHK_CC ())
	    THEN
		BEGIN
		STATUS = EDT$$CALLFIO (EDT$K_CLOSE, EDT$K_INCLUDE_FILE, 0, 0);

		IF ( NOT .STATUS) THEN EDT$$FIOPN_ERR (EDT$_INCFILCLO, FILE_DESC);

		EDT$$G_CC_DONE = 1;
		RETURN (0);
		END;

	    IF (.FILE_DESC [DSC$W_LENGTH] GTR 255) THEN RECORD_TOO_BIG = 1;

	    EDT$$A_SEL_POS = EDT$$T_LN_BUF;
	    STATUS = EDT$$INS_LN (.FILE_DESC [DSC$A_POINTER], MIN (.FILE_DESC [DSC$W_LENGTH], 255));
	    END;

	EDT$$END_INS ();
!+
! And close the file.
!-
	EDT$$STOP_WKINGMSG ();
	STATUS = EDT$$CALLFIO (EDT$K_CLOSE, EDT$K_INCLUDE_FILE, 0, 0);

	IF ( NOT .STATUS) THEN EDT$$FIOPN_ERR (EDT$_INCFILCLO, FILE_DESC);

	END
    ELSE
	BEGIN
!+
! The open failed, put out an error message.
!-
	EDT$$FIOPN_ERR (

	    IF .EDT$$G_IOFI_NFND THEN EDT$_INCFILNEX ELSE EDT$_INCFILOPN, FILE_DESC);

	END;

!+
! If we print the message "record too big" then force "press return to continue",
! since the message would otherwise be lost in the update of the screen that we
! must do.
!-

    IF .RECORD_TOO_BIG
    THEN
	BEGIN
	EDT$$FMT_MSG (EDT$_RECTOOBIG);
	EDT$$G_TXT_ONSCR = 1;
	END;

!+
! On VMS deallocate all dynamic descriptors used
!-

%IF %BLISS (BLISS32)
%THEN
    STR$FREE1_DX (FILE_DESC);
    STR$FREE1_DX (RHB_DESC);
%FI

    END;					! of routine EDT$$INCL_CMD

!<BLF/PAGE>

END						! of module EDT$LINCL

ELUDOM
