MODULE dcx_subs (			! Miscellaneous routines
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
!   FACILITY:
!
!	DCX -- Data Compression / Expansion Facility
!
!   ABSTRACT:
!
!	The Data Compression / Expansion procedures provide a general
!	method for reducing the storage requirement for a arbitrary data.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  David Thiel
!
! CREATION DATE: July, 1981
!
! MODIFIED BY:
!
!--

%SBTTL  'Declarations';

LIBRARY
	'sys$library:starlet';	! System macros
REQUIRE
	'prefix';		! DCX macro definitions
REQUIRE
	'dcxdef';		! DCX public structure definitions
REQUIRE
	'dcxprvdef';		! DCX private structure definitions

EXTERNAL ROUTINE
    lib$free_vm : ADDRESSING_MODE (GENERAL),
    lib$get_vm : ADDRESSING_MODE (GENERAL);

EXTERNAL LITERAL
    dcx$_invctx,		! Invalid context block
    dcx$_invmap,		! Invalid map
    dcx$_normal;

FORWARD ROUTINE
    dcx$get_vm,			! Allocate memory
    dcx$free_vm,		! Deallocate memory
    dcx$map_check : lkg_map_check,	! Check map
    dcx$ctx_check : lkg_ctx_check,	! Check context
    dcx$long_move : lkg_long_move NOVALUE;	! Arbitrary length data copy

%SBTTL  'dcx$get_vm -- allocate virtual memory'

GLOBAL ROUTINE dcx$get_vm (bytes, addr) =
BEGIN
!++
!
! Allocate memory for the data compression / expansion
! facility.  The allocated memory is zeroed.
!
! Inputs:
!
!	bytes			Number of bytes to allocate
!
! Outputs:
!
!	addr			Address in which to store addr
!				of allocated memory
!
! Return value:
!
!	dcx$_normal		All is well
!	lib$_insvirmem		Error allocation memory
!--

LOCAL
    p,			! pointer for zeroing memory
    c,			! remaining byte count
    status : LONG;	! return status

IF .bytes EQL 0
THEN
    BEGIN
    .addr = 0;
    RETURN dcx$_normal;
    END
ELSE IF NOT (status = lib$get_vm (bytes, .addr))
THEN
    BEGIN
    .addr = 0;
    RETURN .status;
    END
ELSE
    BEGIN
    p = ..addr;
    c = .bytes;
    WHILE .c GTRU %X'FFFF' DO
	BEGIN
	p = CH$FILL (0, %X'FFFF', .p);
	c = .c - %X'FFFF';
	END;
    CH$FILL (0, .c, .p);
    RETURN dcx$_normal;
    END;
END;					! of dcx$get_vm

%SBTTL  'dcx$free_vm -- free virtual memory'

GLOBAL ROUTINE dcx$free_vm (bytes, addr) =
BEGIN
!++
!
! Free memory for the data compression / expansion
! facility.
!
! Inputs:
!
!	bytes			Number of bytes to free
!	addr			Address of block to free
!
! Outputs:
!
!	NONE
!
! Return value:
!
!	dcx$_normal		All is well
!	lib$_insvirmem		Error allocating memory
!--

IF .bytes NEQ 0
THEN
    perform (lib$free_vm (bytes, addr));
RETURN dcx$_normal;

END;					! of dcx$free_vm

%SBTTL  'dcx$ctx_check -- check context block'

GLOBAL ROUTINE dcx$ctx_check (ctx : REF BBLOCK, type) : lkg_ctx_check =
BEGIN
!++
!
! Check context block for validity.
!
! Inputs:
!
!	ctx			Address of context block
!	type			Required context block type
!
! Outputs:
!
!	NONE
!
! Return value:
!
!	dcx$_normal		All is well
!	dcx$_invctx		Invalid context block
!	dcx$_invmap		Invalid map
!--

IF .ctx [ctx$l_size] LSSU ctx$k_fixed_len
THEN
    RETURN dcx$_invctx
ELSE IF .ctx [ctx$l_sanity] NEQ ctx$c_sanity
THEN
    RETURN dcx$_invctx
ELSE IF .ctx [ctx$w_version] NEQ ctx$c_version
THEN
    RETURN dcx$_invctx
ELSE IF .ctx [ctx$b_type] NEQ .type
THEN
    RETURN dcx$_invctx
ELSE
    RETURN dcx$_normal;

END;					! of dcx$ctx_check

%SBTTL  'dcx$map_check -- check map'

GLOBAL ROUTINE dcx$map_check (dcxmap : REF BBLOCK) : lkg_map_check =
BEGIN
!++
!
! Check map for validity.
!
! Inputs:
!
!	dcxmap			Address of map
!
! Outputs:
!
!	NONE
!
! Return value:
!
!	dcx$_normal		All is well
!	dcx$_invmap		Invalid map
!--

IF .dcxmap [dcxmap$l_size] LSSU dcxmap$k_length
THEN
    RETURN dcx$_invmap
ELSE IF .dcxmap [dcxmap$l_sanity] NEQ dcxmap$c_sanity
THEN
    RETURN dcx$_invmap
ELSE IF .dcxmap [dcxmap$w_version] NEQ dcxmap$c_version
THEN
    RETURN dcx$_invmap
ELSE
    RETURN dcx$_normal;

END;					! of dcx$map_check

%SBTTL  'dcx$long_move -- long data copy'

GLOBAL ROUTINE dcx$long_move (size, source, target) : lkg_long_move NOVALUE =
BEGIN
!++
!
! Copy arbitrary sized block of data.
!
! Inputs:
!
!	size			Length of data to copy
!	source			Address of data to copy
!	target			Address of destination
!
! Outputs:
!
!	NONE
!
! Return value:
!
!	NONE
!--

BUILTIN
    movc3;

WHILE .size GTRU %X'FFFF' DO
    BEGIN

    LOCAL
	dummy0,
	dummy2;

    movc3 (%REF(%X'FFFF'), .source, .target; dummy0, source, dummy2, target);
    size = .size - %X'FFFF';
    END;
CH$MOVE (.size, .source, .target);
RETURN;

END;					! of dcx$long_move

END					! Of module dcx_subrs
ELUDOM
