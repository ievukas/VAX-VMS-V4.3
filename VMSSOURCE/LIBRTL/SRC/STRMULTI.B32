%TITLE 'STR$COMPARE_MULTI - Compare using Multinational Char Set'
MODULE STR$COMPARE_MULTI (        	! Compare using Multinational Char Set
		IDENT = '1-003'		! File: STRMULTI.B32 Edit: DG1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	String Support Library
!
! ABSTRACT:
!
!	This module performs character comparisons of 2 input strings
!	using the DEC Multinational Character Set (or foreign language
!	variations thereof). 
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Linda Baillie, CREATION DATE: 10-Sept-1982
!
! MODIFIED BY:
!
! 1-001	- Original.  LGB 10-Sept-1982
! 1-002 - Modified to make changes decided on by Design Review Board
!	  on March 9, 1983.  DG 13-Sept-1983
!	  Design notes for the tables and usage of them can be found on
!	  TURTLE::RTL$:[RTL.NOTE]STRABMUL.MEM.
! 1-003 - Fix so that case-blind comparisons of strings with different
!	  lengths work.  DG 7-May-1984
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
REQUIRE 'RTLIN:STRLNK';				! Linkage to LIB$ANALYZE_DESC_R3
!						! for $str$get_len_addr
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    STR$COMPARE_MULTI;				! Compare two strings made up of
						! the DEC Multinat'l Char Set
!
! INCLUDE FILES:
!
REQUIRE 'RTLIN:RTLPSECT';			! Define PSECT declarations macros
REQUIRE 'RTLIN:STRMACROS';			! String macros
LIBRARY 'RTLSTARLE';				! System symbols, typically from SYS$LIBRARY:STARLET.L32

!
! EQUATED SYMBOLS:
!
LITERAL
    TRUE = 1,
    FALSE = 0;


!
! MACROS:
!

MACRO
!+
!  Convert lowercase letters to uppercase.
!  When converting lowercase to uppercase it is necessary to subtract %x'20'
!  from the lowercase table values to reach their uppercase equivalents.
!-
    UPCASE ( IN_BYTE ) =
	BEGIN

	LOCAL
	    TEMP_BYTE : BYTE;

	TEMP_BYTE = CH$RCHAR( IN_BYTE );

	IF ( .TEMP_BYTE GEQ %C'a'  AND  .TEMP_BYTE LEQ %C'z' )  OR	! lowercase letters
	   ( .TEMP_BYTE GEQ %X'E0'  AND  .TEMP_BYTE LEQ %X'FD'  AND  	! lc letters w/ diacritical marks
		 .TEMP_BYTE NEQ %X'F0' )  
	THEN  
	    CH$WCHAR( .TEMP_BYTE - %X'20', IN_BYTE );

	END
    % ;

MACRO
!+
!  Set up generic names to reference STRING1.
!-
    SETUP_STRING1 =
	BEGIN

	    STRX_ADDR = .STR1_ADDR;			! use generic names
	    STRX_LEN  = .STR1_LEN;			! for common code
	    MULTIX    = .MULTI1;
	    CHARX     = .CHAR1;
	    ARRAYX    = ARRAY1;

	END 
    % ;

MACRO
!+
!  Set up generic names to reference STRING2.
!-
    SETUP_STRING2 =
	BEGIN

	    STRX_ADDR = .STR2_ADDR;			! use generic names 
	    STRX_LEN  = .STR2_LEN;			! for common code
	    MULTIX    = .MULTI2;
	    CHARX     = .CHAR2;
	    ARRAYX    = ARRAY2;

	END 
    % ;

MACRO
!+
!  Search list of special chars.  This is the case where one char is
!  represented by a two-letter sequence.  For example, the German small
!  sharp 's' is represented by the sequence 'ss'.
!  SPEC_CHAR holds the list of special chars.
!  SPEC_SEQ holds the corresponding two-letter sequence.
!-
    SEARCH_SPEC_LIST =
	BEGIN

	    LOCAL
		FOUND : INITIAL (FALSE);!  = TRUE if a special character
					!  has been found in SPEC_CHAR table

	    INCR K FROM 0 TO 5 DO
		BEGIN				  ! begin loop

		IF .CHARX EQL .SPEC_CHAR[.K]
		THEN
		    BEGIN
		    !+
		    !  Special character found.
		    !  Put the two-letter sequence that represents the 
		    !  special character in ARRAYX.
		    !  SPEC_SEQ [.K*2] points to the first letter of the
		    !  two-letter sequence.
		    !  SPEC_SEQ [(.K*2)+1] points to the second letter of
		    !  the two-letter sequence.
		    !  For every one entry in the SPEC_CHAR table, there
		    !  are two corresponding entries in the SPEC_SEQ table.
		    !-
		    ARRAYX[.COUNT]   = .SPEC_SEQ[.K*2 ];
		    ARRAYX[.COUNT+1] = .SPEC_SEQ[(.K*2)+1];
		    FOUND = TRUE;			  ! spec char found
		    EXITLOOP;

		    END;

		END;   					  !  end loop


	    !+
	    !  The special char is not in the list of special chars - Error
	    !-
	    IF .FOUND EQL FALSE
	    THEN 
		LIB$SIGNAL ( LIB$_INVARG );

	END 						  ! end of macro
    % ;	

MACRO
!+
!  Search list of pairs.  This is the case when two chars appear together
!  they are sorted in a 'special' way.  For example, the Spanish 'CH' pair
!  is sorted between 'CZ ' and 'DA'.
!  SPEC_PAIR holds the list of spec pairs and their ordering values when they
!  appear together.
!-
    SEARCH_SPEC_PAIR =
	BEGIN

	    LOCAL
		FOUND_FIRST  : INITIAL (FALSE),	!  = TRUE if 1st letter of pair
						!  is found in SPEC_PAIR table
		FOUND_SECOND : INITIAL (FALSE),	!  = TRUE if 2nd letter of pair
						!  is found in SPEC_PAIR table
		INDEX,				!  holds # of pairs
		SAVE_FIRST_LETTER;		!  holds 1st letter of pair for
						!  comparison against all possible
						!  2nd letter partners.

	    !+
	    !  Indices :
	    !  SPEC_PAIR table is set up such that each pair has 4 entries -
	    ! 	 1 - first letter of pair    represented as .SPEC_PAIR[.R*4]
	    ! 	 2 - ordering value for 1st  represented as .SPEC_PAIR[(.R*4)+1]
	    ! 	 3 - second letter of pair   represented as .SPEC_PAIR[(.R*4)+2]
	    ! 	 4 - ordering value for 2nd  represented as .SPEC_PAIR[(.R*4)+3]
	    ! 
	    !  While R is incremented in loop below, these indices allow all 4
	    !  entries of the pair to be looked at in one pass through the loop.
	    !-

	    INDEX = .PAIR_LEN / 4;			! PAIR_LEN holds # of
							! entries in SPEC_PAIR table
	    INCR R FROM 0 TO .INDEX - 1 DO
		BEGIN					! begin search

		AGAIN_PAIR_MACRO = FALSE;
		CALL_SPEC_LIST = FALSE;

		!+
		!  Look for first letter of pair
		!-

		IF .CHARX EQL .SPEC_PAIR[.R*4]
		THEN
		    BEGIN		      		! 1st char of possible
							! pair was found
		    FOUND_FIRST = TRUE;
		    SAVE_FIRST_LETTER = .CHARX;

		    !+
		    !  Store ordering value of 1st char in ARRAYX
		    !-

		    ARRAYX[.COUNT] = .SPEC_PAIR[(.R*4)+1];

		    !+
		    !  Read next character - look for second letter of pair.
		    !  If the first letter of the possible pair is the last
		    !  letter of the input string, NO_PAIR was set to TRUE in
		    !  the routine.
		    !-

		    IF .NO_PAIR EQL FALSE
		    THEN
			BEGIN				! begin no_pair = FALSE

		        CHARX = CH$RCHAR_A( STRX_ADDR );
			L = .L + 1;			! increment loop counter
			IF .JJ EQL 1
			THEN 
			    UPCASE( CHARX );

			!+
			!  Look for 2nd letter of pair
			!  It is possible to have a choice of '2nd letters'.
			!  For example, CH and Ch.
			!  The following loop handles this situation.
			!  CHARX would hold the letter from the input string
			!  that followed the letter C - H or h.
			!  SPEC_PAIR[(.S*4)+2] would look at H the first time
			!  through the loop, then h in the subsequent pass.
			!  (always looking at the 2nd letters of the pairs in
			!  the table)
			!  SPEC_PAIR[.S*4] would look at C the first time
			!  through the loop, then different C's in subsequent
			!  passes. (always looking at the 1st letters of the
			!  pairs in the table)
			!  SAVE_FIRST_LETTER remembers what the first letter
			!  of the pair in the input string was.
			!-

			INCR S FROM .R TO .INDEX - 1 DO
			    BEGIN			! begin 2nd char loop

			    IF ( .CHARX EQL ( .SPEC_PAIR[(.S*4)+2] ) )  AND
				( ( .SPEC_PAIR[.S*4] ) EQL .SAVE_FIRST_LETTER ) 
			    THEN
				BEGIN
				!+
				! 2nd char found, store in ARRAYX
				!-
				FOUND_SECOND = TRUE;
				ARRAYX[.COUNT+1] = .SPEC_PAIR[(.S*4)+3];
				EXITLOOP;

				END;			

			    END;			! end 2nd char loop


			!+
	  		!  2nd letter not part of a pair - ok (not an error),
			!  do THAT_TABLE lookup
			!_

			IF .FOUND_SECOND EQL FALSE
			THEN
			    BEGIN			! begin f_s = FALSE

			    MULTIX = .THAT_TABLE[.CHARX];

			    !+
			    !  FC in THAT_TABLE indicates the first letter of
			    !  a possible pair.  Here we have an FC case
			    !  following an FC case.  This means the
			    !  first FC was not the beginning of a pair, so
			    !  check the 2nd FC for a possible pair.
			    !  For example, if 'CH' were the only pair in
			    !  SPEC_PAIR, the word ACCEPT would get you into
			    !  this code.
			    !-

			    IF .MULTIX EQL %X'FC'
			    THEN
				BEGIN
				!+
				!  Acknowledge the previous char being placed
				!  in ARRAYX.  Set flag to call this macro again
				!-
				COUNT = .COUNT + 1;
				AGAIN_PAIR_MACRO = TRUE;

				END

			    !+
			    !  FD case following FC case.  This means the
			    !  first FC was not the beginning of a pair,
			    !  and the char following the FC char is a
			    !  different kind of spec char.
			    !  FD in THAT_TABLE indicates a special char that
			    !  is represented by a two-letter sequence.
			    !-

			    ELSE
				IF .MULTIX EQL %X'FD'
				THEN
				    BEGIN
				    !+
				    !  Acknowledge the previous char being
				    !  placed in ARRAYX.  Set flag to call 
				    !  the appropriate macro for the FD case
				    !-
				    COUNT = .COUNT + 1;
				    CALL_SPEC_LIST = TRUE;

				    END
				ELSE
				    BEGIN
				    !+
				    !  2nd char is not part of pair, nor a 
				    !  special char, store in ARRAYX
				    !-
				    ARRAYX[.COUNT+1] = .MULTIX;

				    END;

			    END;			! end f_s = FALSE

			END				! end no_pair = FALSE
		    ELSE
			!+
			!  There is no pair because the first letter of possible
			!  pair was the last letter of the input string.
			!  Offset count in routine.
			!-
			COUNT = .COUNT - 1;

		    END;				! end 1st char of 
							! possible pair found
	    IF .FOUND_FIRST EQL TRUE
	    THEN
		EXITLOOP;

	    END;					! end search

	    !+
	    !  Error - 1st letter of pair is not in pair table SPEC_PAIR
	    !-

 	    IF .FOUND_FIRST EQL FALSE
	    THEN 
		LIB$SIGNAL ( LIB$_INVARG );

	END
    % ;

!
! FIELDS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (STR);				! Declare PSECTs for STR$ facility
!
! OWN STORAGE:

!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
	LIB$SIGNAL;

EXTERNAL LITERAL
	LIB$_INVARG;

EXTERNAL
	STR$AB_MULTI,
	STR$AB_MULTI_SPEC_CHAR,
	STR$AB_MULTI_SPEC_SEQ,
	STR$AB_MULTI_CLASS,
	STR$AB_MULTI_CLASS_SPEC_SEQ,
	STR$AB_DAN_NOR,
	STR$AB_DAN_NOR_CLASS,
	STR$AB_FIN_SWED,
	STR$AB_FIN_SWED_CLASS,
	STR$AB_GERMAN,
	STR$AB_GERMAN_CLASS,
	STR$AB_SPANISH,
	STR$AB_SPANISH_SPEC_PAIR,
	STR$AB_SPANISH_CLASS,
	STR$AB_SPANISH_CLASS_SPEC_PAIR;

%SBTTL 'STR$COMPARE_MULTI - Compare using Multinational Char Set'
GLOBAL ROUTINE STR$COMPARE_MULTI (
	STRING1: REF $STR$DESCRIPTOR,	! Pointer to first string descriptor
	STRING2: REF $STR$DESCRIPTOR,	! Pointer to second string descriptor
	CASE_BLIND_FLAG,		! Case-blind flag
	FOREIGN_LANG			! Choice of ordering table (language) 
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This module performs character comparisons of 2 input strings
!	using the DEC Multinational Character Set (or foreign language
!	variations thereof).
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = STR$COMPARE_MULTI ( STRING1.rt.dx, STRING2.rt.dx.,
!		[CASE_BLIND_FLAG.rlu.v], [FOREIGN_LANG.rlu.v] )
!
! FORMAL PARAMETERS:
!
!	STRING1.rt.dx			! Pointer to first string descriptor.
!	STRING2.rt.dx			! Pointer to second string descriptor.
!	[CASE_BLIND_FLAG.rlu.v]		! Case-blind flag bit.
!					! bit 0  -  caseblind (equivalence 
!					!	     uppercase to lowercase)
!	[FOREIGN_LANG.rlu.v]		! Choice of ordering table (language).
!					!	1  -  Multinational table
!					!	2  -  Danish table
!					!	3  -  Finnish/Swedish table
!					!	4  -  German table
!					!	5  -  Norwegian table
!					!	6  -  Spanish table
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	COMPARE_STATUS.wl.v	-1  if string1  <  string2
!				 0  if both are the same with blank fill for shorter
!				 1  if string1  >  string2
!
! SIDE EFFECTS:
!
!	May signal STR$_ILLSTRCLA on bad string class
!--

    BEGIN

    LOCAL
	CASE_BLIND: INITIAL (FALSE),	! constant to hold case-blind decision
	SAME: INITIAL (FALSE),		! if same = TRUE, strings are of = len
	STR1_LEN,			! Length of STRING1
	STR2_LEN,			! Length oF STRING2
	STR1_ADDR_SAV,			! Address of 1st data byte of STRING1
	STR2_ADDR_SAV,			! Address of 2st data byte of STRING2
	STR_END,			! Length of smaller string
	CHAR1: BYTE,			! a character of STRING1
	CHAR2: BYTE,			! a character of STRING2
	MULTI1: BYTE,			! ordering value of a char of STRING1 (from table)
	MULTI2: BYTE,			! ordering value of a char of STRING2 (from table)
	NULL_STRING: BYTE INITIAL (%C' '),
					! Null string will be changed to one space
	SPEC_CHAR: REF VECTOR[,BYTE],	! generic name - special character tables
	SPEC_SEQ: REF VECTOR[,BYTE],	! generic name - two-letter sequence tables
	SPEC_PAIR: REF VECTOR[,BYTE],	! generic name - pair of letters tables
	PAIR_LEN,			! generic name - # of entries in SPEC_PAIR
					!		 tables (not # of pairs)
	CLASS_SPEC_SEQ: REF VECTOR[,BYTE],
					! generic name - two-letter sequence tables
	CLASS_SPEC_PAIR: REF VECTOR[,BYTE],
					! generic name - pair of letters tables
	CLASS_TABLE:  REF VECTOR [256,BYTE],
					! generic name for character
					!  ordering tables
	THAT_TABLE:  REF VECTOR [256,BYTE];
					! generic name for character
					!  ordering tables

    LITERAL
        V_CASE_BLIND = 1;		! bit flag - equivalence uppercase to lowercase

    LABEL
	DO_LOOP;

    BUILTIN
	ACTUALCOUNT;


    !+ 
    !  Calculate length and starting address of both strings
    !-
    $STR$GET_LEN_ADDR ( STRING1, STR1_LEN, STR1_ADDR_SAV );
    $STR$GET_LEN_ADDR ( STRING2, STR2_LEN, STR2_ADDR_SAV );

    !+
    !  Check for null strings.  
    !  If either is a null string, make it equal to a space.
    !-
    IF .STR1_LEN EQL 0  
    THEN 
	BEGIN

	STR1_LEN = 1;
	STR1_ADDR_SAV = NULL_STRING;

	END;

     IF .STR2_LEN EQL 0  
     THEN 
	 BEGIN

	 STR2_LEN = 1;
	 STR2_ADDR_SAV = NULL_STRING;

	 END;

    !+
    !  Find string with smaller length to use for loop max value.
    !  If strings are of equal length, set SAME to TRUE.
    !-
    IF .STR1_LEN  EQL  .STR2_LEN  
    THEN 
	SAME = TRUE;
    STR_END = MINU ( .STR1_LEN, .STR2_LEN );

    !+
    !  Read Flag parameter ;  set CASE_BLIND appropriately.
    !-
    IF ( ACTUALCOUNT() GEQ 3 )
    THEN
     	IF ( .CASE_BLIND_FLAG  AND  V_CASE_BLIND )   
	THEN 
	    CASE_BLIND = TRUE;

    !+
    !  Set up appropiate ordering tables and special character information.
    !  First set up defaults, then read Foreign_Lang parameter to find out 
    !  which ordering table (language) the user has requested (if any).
    !_
    THAT_TABLE = STR$AB_MULTI;				! Default - DEC Multi Char Set
    SPEC_CHAR = STR$AB_MULTI_SPEC_CHAR;
    SPEC_SEQ = STR$AB_MULTI_SPEC_SEQ;
    CLASS_TABLE = STR$AB_MULTI_CLASS;
    CLASS_SPEC_SEQ = STR$AB_MULTI_CLASS_SPEC_SEQ;

    IF ( ACTUALCOUNT() EQL 4 )
    THEN 
	CASE .FOREIGN_LANG FROM 1 TO 6 OF
	SET
	
	[1]:    ;

	[2]:	BEGIN

		THAT_TABLE = STR$AB_DAN_NOR;		! Danish Char Set
	    	CLASS_TABLE = STR$AB_DAN_NOR_CLASS;

		END;

	[3]:	BEGIN

		THAT_TABLE = STR$AB_FIN_SWED;		! Finnish and Swedish
		CLASS_TABLE = STR$AB_FIN_SWED_CLASS;

		END;

	[4]:	BEGIN

		THAT_TABLE = STR$AB_GERMAN;		! German Char Set
    		CLASS_TABLE = STR$AB_GERMAN_CLASS;

		END;

	[5]:	BEGIN

		THAT_TABLE = STR$AB_DAN_NOR;		! Norwegian Char Set
	    	CLASS_TABLE = STR$AB_DAN_NOR_CLASS;
	
		END;

	[6]:	BEGIN

		THAT_TABLE = STR$AB_SPANISH;		! Spanish Char Set
		PAIR_LEN = 32;
		SPEC_PAIR = STR$AB_SPANISH_SPEC_PAIR;
		CLASS_TABLE = STR$AB_SPANISH_CLASS;
		CLASS_SPEC_PAIR = STR$AB_SPANISH_CLASS_SPEC_PAIR;

		END;

	[OUTRANGE]:					! error in Foreign_Lang
   		LIB$SIGNAL ( LIB$_INVARG );		! parameter

	TES;						! 1 =>.foreign_lang<= 6

    !+
    !  Compare strings.
    !
    !  This requires three passes over the strings:
    !  1st - a diacritical-blind comparison is done (so that '<a^>a' comes
    !	     before 'ab').
    !  2nd - a case-blind comparison is done (so that 'Aa' comes before 'ab')
    !  3rd - a non-case-blind comparison is done (so that 'a' comes before 'A').
    !
    !  Loop until end of shorter string.  STR_END holds the length of the
    !  shorter string.  (or length of both strings of string lengths are =).
    !  After all characters of the shorter string are compared against the
    !  first few characters of the longer string, and the strings are equal,
    !  the constant SAME is checked.  If SAME = TRUE, the strings are of equal
    !  length and a routine status of 0 is returned.  Otherwise, do some 
    !  further checking on the longer string before returning a routine
    !  status of 0, -1, or 1.
    !  As soon as the comparison shows that the strings are unequal, a
    !  routine status of 1 or -1 is immediately returned. 
    !-
    INCR JJ FROM 0 TO 2 DO
	BEGIN						! begin triple loop

	LOCAL
	    ARRAY1: VECTOR[100,BYTE],	! hold ordering values for STRING1 when a special
					!  char is encountered
	    ARRAY2: VECTOR[100,BYTE],	! hold ordering values for STRING2 when a special
					!  char is encountered
	    ARR_MIN,			! indicates which array (ARRAY1 or ARRAY2) is smaller
	    ARR_SAME,			! = TRUE if ARRAY1 is same length as ARRAY2 
	    USED_ARRAYS,		! = TRUE if ARRAY1/2 were used
	    AGAIN_PAIR_MACRO: INITIAL (FALSE),
					! = TRUE if macro SEARCH_SPEC_PAIR has 
					! to be invoked a second time 
					! immediately after the first time
	    CALL_SPEC_LIST: INITIAL (FALSE),
					! = TRUE if the macro SEARCH_SPEC_LIST
					! has to be invoked immediately after 
					! the macro SEARCH_SPEC_PAIR
	    NO_PAIR: INITIAL (FALSE),	! = TRUE if search for a possible pair 
					! will prove futile
	    STRX_ADDR,			!   \
	    STRX_LEN,			!     \
	    MULTIX: BYTE,		! 	generic names for common code
	    CHARX: BYTE,		!     /
	    ARRAYX: REF VECTOR[,BYTE],	!   /
	    COUNT,			! index to ARRAYX (used first for ARRAY1 then
					!  for ARRAY2)
	    COUNT1,			! used to save length of ARRAY1 for later 
					!  comparison against COUNT of ARRAY2
	    CHARS_READ: INITIAL (0),  	! # of characters read in loop
	    STR1_ADDR,			! current ptr into STRING1
	    STR2_ADDR,			! current ptr into STRING2
	    SAVE_SPEC_SEQ : REF VECTOR [,BYTE],	! 3 SAVEs used to save info for
	    SAVE_SPEC_PAIR: REF VECTOR [,BYTE],	!  1st time thru loop when 
	    SAVE_TABLE: REF VECTOR [256,BYTE];	!  class-blind table is used.

	ARR_SAME = FALSE;
	USED_ARRAYS = FALSE;
    	STR1_ADDR = .STR1_ADDR_SAV;
	STR2_ADDR = .STR2_ADDR_SAV;

	CHAR1 = CH$RCHAR_A( STR1_ADDR );		! get char of STRING1
	CHAR2 = CH$RCHAR_A( STR2_ADDR );		! get char of STRING2

	IF .JJ EQL 0
	THEN
	    BEGIN
	    !+
	    ! Use class-blind table first time thru loop.
	    !
	    SAVE_TABLE = .THAT_TABLE;
	    THAT_TABLE = .CLASS_TABLE;
	    SAVE_SPEC_SEQ = .SPEC_SEQ;
	    SPEC_SEQ = .CLASS_SPEC_SEQ;
	    SAVE_SPEC_PAIR = .SPEC_PAIR;
	    SPEC_PAIR = .CLASS_SPEC_PAIR;

	    END;

	IF .JJ EQL 1
	THEN
	    BEGIN
	    !+
	    ! Case-blind comparison done second time thru loop.
	    !-
	    UPCASE( CHAR1 );
            UPCASE( CHAR2 );

	    END;

DO_LOOP: 
	BEGIN

	INCR J FROM 1 TO .STR_END DO
	    BEGIN					! begin do

	    !+
	    !  Get ordering values from table 
	    !-
	    MULTI1 = .THAT_TABLE [.CHAR1];
	    MULTI2 = .THAT_TABLE [.CHAR2];
	    CHARS_READ = .CHARS_READ + 1;		! # of characters read

	    !+
	    !    Does either string contain a special character ?
	    !
	    !    There are two kinds of special characters -
	    !	 1.  One char represented by a two-letter sequence, indicated in
	    !	     the ordering value table (THAT_TABLE) by the value %X'FD'.
	    !	     ex: German small sharp 's' is represented by the two-letter
	    !	     sequence 'ss'
	    !    2.  A pair of chars with a "special" sorting order, indicated 
	    !	     in the ordering value table (THAT_TABLE) by the value 
	    !	     %X'FC'.
	    !	     ex: Spanish 'CH' pair is sorted between 'CZ' and 'DA'
	    !
	    !    When a special char is encountered, treat these special cases 
	    !    separately.  Store the special char and all remaining chars of 
	    !	 the string in an array.
	    !    Do this for both strings even if only one of the strings 
	    !    contained a special char.  After all chars of both strings are 
	    !    stored in an array, compare the arrays.
	    !-
	    IF .MULTI1 EQL %X'FD'  OR  .MULTI2 EQL %X'FD'  OR
		 .MULTI1 EQL %X'FC'  OR  .MULTI2 EQL %X'FC'
	    THEN
		BEGIN					! begin special case loop

		USED_ARRAYS = TRUE;

		INCR I FROM 1 TO 2 DO
		    BEGIN				! begin outer loop
		    !+
		    !  These macros allow generic names to be used for both
		    !  strings
		    !-
		    IF .I EQL 1
		    THEN 
			SETUP_STRING1
		    ELSE 
			SETUP_STRING2;

		    COUNT = 0;				! will hold length of ARRAYX
		    NO_PAIR = FALSE;

		    !+
		    !  Create two arrays (one at a time) holding the ordering
		    !  values of the remaining chars in both strings.  Start 
		    !  at the position where the spec char was encountered, 
		    !  and stop at the last position of the shorter string.
		    !  If the first character of one of the strings is a special
		    !  char then .CHARS_READ = 1.
		    !  If the fourth character of one of the strings is a
		    !  special char then .CHARS_READ = 4, etc.
		    !-
		    INCR L FROM .CHARS_READ TO .STRX_LEN DO
			BEGIN				! begin inner loop

			IF .MULTIX EQL %X'FD'		
			THEN
			    !+
			    !  *** TWO-LETTER SEQ CASE ***
			    !  ***	FD CASE	       ***
			    !-
			    BEGIN
			    !+
			    ! Macro to store the ordering values of the 
			    ! two-letter seq in ARRAYX
			    !-
			    SEARCH_SPEC_LIST;
			    COUNT = .COUNT + 2;		! two chars stored in ARRAYX

			    END
			ELSE
			    !+
			    !  *** PAIR CASE ***
			    !  ***  FC CASE  ***
			    !-
			    BEGIN			! begin fc case

			    IF .MULTIX EQL %X'FC'
			    THEN
				!+
				!  Char is possibly the first char of a pair
				!  (such as the Spanish 'CH' pair, where each 
				!  time a 'C' is encountered a search will be
				!  made for the second letter of the special
				!  pair, here the 'H'.  However, not all Spanish
				!  'C's are followed by 'H's, therefore the
				!  search for the second letter of the pair may
				!  not result in success.
				!-
				BEGIN			! begin call pair macro
				!+
				! Macro to store the ordering values of the pair
				! of letters in ARRAYX.
				! If the first letter of a possible pair is the
				! last letter of the input string, there is no
				! pair.  The macro SEARCH_SPEC_PAIR is still
				! needed to store the ordering value of the
				! last character in ARRAYX.  Set NO_PAIR to TRUE
				! to flag macro SEARCH_SPEC_PAIR not to look
				! for the non existant second letter of the
				! possible pair. 
				!-
				IF .L EQL .STRX_LEN 
				THEN 
				    NO_PAIR = TRUE;
				SEARCH_SPEC_PAIR;

				!+
				!  It is possible that a 'FD' case immediately
				!  followed the first letter of a 'FC' case,
				!  i.e. there was not a 'pair', but now the FD
				!  case must be addressed.
				!  Constant CALL_SPEC_LIST is set to TRUE in 
				!  macro SEARCH_SPEC_PAIR to indicate this 
				!  occurence.
				!-
				IF .CALL_SPEC_LIST EQL TRUE
				THEN
				    SEARCH_SPEC_LIST;

				!+
				!  It might be necessary to invoke the macro
				!  SEARCH_SPEC_PAIR again - for example,
				!  if 'C' were the first letter of
				!  a possible pair but 'CC' was not a pair,
				!  then the word 'ACCEPT' would cause this
				!  macro to be called twice, the first time
				!  looking at 'CC' as a possible pair, then 
				!  a second time looking at 'CE' as a possible
				!  pair.  Constant AGAIN_PAIR_MACRO is set to 
				!  TRUE in macro SEARCH_SPEC_PAIR to indicate 
				!  this occurence.
				!-
				WHILE .AGAIN_PAIR_MACRO EQL TRUE DO
				    BEGIN		! begin do while
				    !+
				    ! Increment loop counter (L) to point to 
				    ! the next FC Case (point to the second
				    ! 'C' in ACCEPT)
				    ! If the first letter of a possible pair is 
				    ! the last letter of the input , 
				    ! there is no pair.  The macro 
				    ! SEARCH_SPEC_PAIR is still needed to store 
				    ! the ordering value of the last character
				    ! in ARRAYX.  Set NO_PAIR to TRUE to flag
				    ! macro SEARCH_SPEC_PAIR not to look for the
				    ! non existant 2nd letter of the possible 
				    ! pair. 
				    !-
				    L = .L + 1;
				    IF .L EQL .STRX_LEN 
				    THEN 
					NO_PAIR = TRUE;
				    SEARCH_SPEC_PAIR;

				    !+
				    !  Check for FD case following a FC case
				    !-
				    IF .CALL_SPEC_LIST EQL TRUE
				    THEN
					SEARCH_SPEC_LIST;

				    END;		! end do while
				!+
				!  Acknowledge the storing of two ordering
				!  values in ARRAYX
				!-
				COUNT = .COUNT + 2;

				END			! end call pair macro
			    ELSE
				!+
				!  *** CHAR IS NOT SPECIAL CHARACTER ***
				!  ***				     ***
				!
				!  Store ordering value in ARRAYX.
				!  Only one char stored in ARRAYX.
				!-
				BEGIN			! begin regular char case

				ARRAYX[.COUNT] = .MULTIX;
				COUNT = .COUNT + 1;

				END;			! end regular char case

			    END;			! end fc case

			!+
			!  Get next char and do a table lookup.
			!  (L is the loop incr from above)
			!-
			IF .L NEQ .STRX_LEN
			THEN
			    BEGIN

			    CHARX = CH$RCHAR_A( STRX_ADDR );
			    IF .JJ EQL 1
			    THEN 
				UPCASE( CHARX );

			    MULTIX = .THAT_TABLE[.CHARX];

			    END;

			END;				! end inner loop

		    !+
		    ! Save length of ARRAY1 for later comparison
		    !-
		    IF .I EQL 1 
		    THEN 
			COUNT1 = .COUNT;

		    END;				! end outer loop

		!+
		!  Compare ARRAY1 against ARRAY2 and return status.
		!  COUNT1 holds the length of ARRAY1,
		!  COUNT holds the length of ARRAY2.
		!  If arrays are of equal length, set ARR_SAME to TRUE.
		!  ARR_MIN holds length of shorter array.
		!-
		IF .COUNT1 EQL .COUNT 
		THEN 
		    ARR_SAME = TRUE;
		ARR_MIN = MINU ( .COUNT1, .COUNT );

		INCR M FROM 0 TO .ARR_MIN-1 DO
		    BEGIN				! begin array compare loop

		    IF .ARRAY1[.M] NEQ .ARRAY2[.M]
		    THEN
			!+
			!  If not equal, return appropriate status
			!-
			IF .ARRAY1[.M] LSS .ARRAY2[.M]
			THEN 
			    RETURN -1
			ELSE 
			    RETURN 1;

		    END;				! end array compare loop -
							! end of at least one array.
		!+
		!  The smaller array holds the same values as the larger
		!  array, but unequal array lengths indicate a mismatch -
		!  if what remains of the longer array is blanks, then
		!  they are equal, else compare remainder against blanks
		!  and return appropriate status.
		!  0 value is returned only on 3rd pass thru loop.
		!-
		IF .ARR_SAME EQL FALSE
		THEN 
		    BEGIN				! begin compare

		    LOCAL
			COMP_VAL;

		    IF .COUNT1 LSS .COUNT
		    THEN
			BEGIN				! begin ARRAY1 is shorter

			COMP_VAL = CH$COMPARE ( 0, 0, .COUNT - .ARR_MIN, 
						ARRAY2 + .COUNT1,
						STR$K_FILL_CHAR );
			IF .COMP_VAL EQL 0
			THEN 
			    BEGIN

			    IF .JJ EQL 2
			    THEN
		 	    	RETURN 0		! STRING1 (with blank fill) = STRING2
			    ELSE
				LEAVE DO_LOOP;

			    END
			ELSE
			    RETURN .COMP_VAL;

			END				! end ARRAY1 is shorter
		    ELSE
			BEGIN				! begin ARRAY2 is shorter

			COMP_VAL = CH$COMPARE ( 0, 0, .COUNT1 - .ARR_MIN, 
						ARRAY1 + .COUNT,
						STR$K_FILL_CHAR );
			IF .COMP_VAL EQL 0
			THEN
			    BEGIN

			    IF .JJ EQL 2
			    THEN
			    	RETURN 0		! STRING1 = STRING2 (with blank fill)
			    ELSE
				LEAVE DO_LOOP;

			    END
			ELSE
			    RETURN -.COMP_VAL;

			END ;				! end ARRAY2 is shorter

		    END;				! end compare

		END					! end special case loop





	    !+
	    !  Look at the 'regular' characters, are they = ? 
	    !-
	    ELSE
		BEGIN					! begin no special chars

		IF .MULTI1 NEQ .MULTI2			
		THEN
		    !+
		    !  Not equal, return appropriate status
		    !-
		    IF .MULTI1 GTR .MULTI2
		    THEN 
			RETURN 1
		    ELSE 
			RETURN -1;

		!+
		!  Get next char in strings for next time thru do loop.
		!-
	        CHAR1 = CH$RCHAR_A( STR1_ADDR );	! get char of STRING1
	        CHAR2 = CH$RCHAR_A( STR2_ADDR );	! get char of STRING2
     		IF .JJ EQL 1
     		THEN
	 	    BEGIN
	 	    !+
	 	    ! UPCASE case equivalences lowercase to uppercase
	 	    !-
	 	    UPCASE( CHAR1 );
	 	    UPCASE( CHAR2 );

		    END;


		END;					! end of no special chars

	    END;					! end of do

	END;						! end DO_LOOP
     
    !+
    !  If we get to this point the 2nd pass thru the loop, the strings are
    !  equal up to the point of the shorter string's length.
    !  The 2nd pass does a case-blind comparison, so if the CASE_BLIND flag
    !  is set and the strings are of equal length, then return 0 now.
    !-
    IF ( .CASE_BLIND EQL TRUE )  AND  ( .JJ NEQ 0 )
    THEN
	IF .SAME EQL TRUE
  	THEN
	    RETURN 0;

    !+
    !  If we get to this point the 3nd pass thru the loop, the strings are
    !  equal up to the point of the shorter string's length.
    !  If the strings are of equal length, then return 0.
    !-
    IF ( .JJ EQL 2 )  AND  ( .SAME EQL TRUE )
    THEN
	RETURN 0;

    !+
    ! If their lengths are not equal, and what remains of the longer
    ! is blanks, then they are equal, else compare remainder against
    ! blanks and return appropriate status.
    !-
    IF ( .SAME EQL FALSE )  AND  ( .USED_ARRAYS EQL FALSE )
    THEN
    BEGIN						! begin compare

    LOCAL
	COMP_VAL;

    IF .STR1_LEN LSSU .STR2_LEN
    THEN
	BEGIN						! begin STRING1 is shorter

	COMP_VAL = CH$COMPARE ( 0, 0, .STR2_LEN - .STR_END, .STR2_ADDR - 1,
			STR$K_FILL_CHAR );
	IF .COMP_VAL EQL 0
	THEN 	
	    BEGIN

	    IF ( .JJ EQL 2 )  OR  ( ( .CASE_BLIND EQL TRUE )  AND  ( .JJ NEQ 0 ) )

	    THEN
		RETURN 0;				! STRING1 (with blank fill) = STRING2
	    END
	ELSE
	    RETURN .COMP_VAL;

	END						! end STRING1 is shorter
    ELSE
	BEGIN						! begin STRING2 is shorter

	COMP_VAL = CH$COMPARE ( 0, 0, .STR1_LEN - .STR_END, .STR1_ADDR - 1,
			STR$K_FILL_CHAR );
	IF .COMP_VAL EQL 0
	THEN	
	    BEGIN

	    IF ( .JJ EQL 2 )  OR  ( ( .CASE_BLIND EQL TRUE )  AND  ( .JJ NEQ 0 ) )
	    THEN
	        RETURN 0;				! STRING1 = STRING2 (with blank fill)

	    END
	ELSE	
	    RETURN -.COMP_VAL;

	END ;						! end STRING2 is shorter

    END;						! end compare

    !+
    !  Reset the tables for the 2nd and 3rd passes.
    !-
    IF .JJ EQL 0
    THEN
	BEGIN

	THAT_TABLE = .SAVE_TABLE;
	SPEC_SEQ = .SAVE_SPEC_SEQ;
	SPEC_PAIR = .SAVE_SPEC_PAIR;

	END;

    END;						! end of triple loop

    RETURN 0;						! Needed by BLISS
    END;

    END						! end of module
    ELUDOM
