	.TITLE	OTS$MOVE - Move characters
	.IDENT	/1-005/			; File: OTSMOVE.MAR Edit: SBL1005

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: Language-independent Compiled Code Support
;
; ABSTRACT:
;
;	This module contains a procedure which moves up to 2**31-1
;	characters.
;
; ENVIRONMENT: Runs at any access mode, AST Reentrant
;
; AUTHOR: Steven B. Lionel, CREATION DATE: 14-SEP-1981
;
; MODIFIED BY:
;
; 1-001	- Original. SBL 14-SEP-1981
; 1-002 - Code improvement.  SBL 8-Dec-1981
; 1-003 - Add OTS$MOVE5 and OTS$MOVE5_R5 entry points
; 1-004 - Fix problem with just filling of >65K bytes.  SBL 27-July-1982
; 1-005 - Fix register-saving bug with backwards copy.  SBL 17-May-1983
;--

	.SBTTL	DECLARATIONS
;
; LIBRARY MACRO CALLS:
;
;	NONE
;
; EXTERNAL DECLARATIONS:
;
;	NONE
;
; MACROS:
;
;	NONE
;
; EQUATED SYMBOLS:
;
;	NONE
;
; OWN STORAGE:
;
;	NONE
;
; PSECT DECLARATIONS:
;
	.PSECT _OTS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG


	.SBTTL	OTS$MOVE3 - Move characters without fill
;++
; FUNCTIONAL DESCRIPTION:
;
;	This procedure moves up to 2**31-1 characters from a specified
;	source address to a specified destination address.  Overlapping
;	fields are handled correctly.
;
; CALLING SEQUENCE:
;
;	CALL OTS$MOVE3 (length.rl.v, source.rbu.ra, dest.wbu.ra)
;
; FORMAL PARAMETERS:
;

	length	= 4		; Number of bytes to move, passed by
				; immediate value.  Value may range from
				; 0 through 2147483647.

	source	= 8		; Characters to move, passed by reference.

	dest	= 12		; Area to receive moved characters, passed
				; by reference.

;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	OTS$MOVE3, ^M<R2,R3,R4,R5>

	MOVQ	length(AP), R0		; Get length and source address
	MOVL	dest(AP), R2		; Get destination address
	BSBB	OTS$MOVE3_R5		; Do the move
	RET				; Return to caller

	.SBTTL	OTS$MOVE3_R5 - Move characters without fill
;++
; FUNCTIONAL DESCRIPTION:
;
;	This procedure moves up to 2**31-1 characters from a specified
;	source address to a specified destination address.  Overlapping
;	fields are handled correctly.
;
; CALLING SEQUENCE:
;
;	JSB OTS$MOVE3_R5 (length.rl.v, source.rbu.ra, dest.wbu.ra)
;
; FORMAL PARAMETERS:
;
;
;	length	= R0		; Number of bytes to move.  Value may range 
;				; from 0 through 2147483647.
;
;	source	= R1		; Address of characters to move.
;
;	dest	= R2		; Address of area to receive moved characters.
;
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	R0 = 0
;	R1 = Address of one byte beyond the source string.
;	R2 = 0
;	R3 = Address of one byte beyond the destination string.
;	R4 = 0
;	R5 = 0
;
; FUNCTION VALUE:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

OTS$MOVE3_R5::

	CMPL	R0, #65535		; Is length greater than 65535?
	BGTR	BIGSTRING		; If so, can't do simple move.
	MOVC3	R0, (R1), (R2)		; Simple case; do the move
	RSB

BIGSTRING:
	CMPL	R1, R2			; Check for overlap that would prevent
	BGEQU	FORWARDS		; a forward copy.
	SUBL3	R1, R2, R3		; Get distance between start points
	CMPL	R3, R0			; and compare it to string size.
	BGEQU	FORWARDS		; If distance larger than string size,
					; ok.

;+
; Come here if we have to do the copy from right to left because of
; overlap.
;-

BACKWARDS:
	ADDL3	R0, R2, R3		; R3 points past end of dest
	ADDL2	R0, R1			; R1 points past end of source
	PUSHR	#^M<R0,R1,R3>		; Save length remaining, drc and dest end
10$:
	MOVC3	#65535, -65535(R1),-	; Move a segment
		-65535(R3)		; R1 and R3 get set by the MOVC3
					; to point past the source and dest.
	SUBL2	#65535, R1		; Get new source address
	SUBL2	#65535, R3		; Get new dest address
	ACBL	#65536, #-65535, (SP), 10$ ; Loop until <65536 bytes left
	MOVL	(SP)+, R0		; Get length remaining in R0
	MNEGL	R0, R2			; Get -length in R2
	MOVC3	R0, (R1)[R2], (R3)[R2]	; Do the final move
	POPR	#^M<R1,R3>		; Set R1 and R3 to proper end values
	RSB
	
;+
; Come here if it's ok to do the copy from left to right.
;-

FORWARDS:
	PUSHL	R0			; Save length remaining
	MOVL	R2, R3			; Move dest address to R3
10$:	MOVC3	#65535, (R1), (R3)	; Move a segment.  R1 and R3 get
					; updated with new source and dest
					; addresses.
	ACBL	#65536, #-65535, (SP), 10$ ; Repeat until <65536 bytes left
	MOVL	(SP)+, R0		; Get final length
	MOVC3	R0, (R1), (R3)		; Do the final move
	RSB				; Return

	.SBTTL	OTS$MOVE5 - Move characters with fill
;++
; FUNCTIONAL DESCRIPTION:
;
;	This procedure moves up to 2**31-1 characters from a specified
;	source address to a specified destination address, with separate
;	source and destination lengths, and with fill.  Overlapping
;	fields are handled correctly.
;
; CALLING SEQUENCE:
;
;	CALL OTS$MOVE5 (srclen.rl.v, source.rbu.ra, fill.rbu.v,
;	  dstlen.rl.v, dest.wbu.ra)
;
; FORMAL PARAMETERS:
;

	srclen	= 4		; Number of bytes in the source, passed by
				; immediate value.  Value may range from
				; 0 through 2147483647.

	source	= 8		; Characters to move, passed by reference.

	fill	= 12		; Fill byte to use when the srclen is less than
				; dstlen.  Passed by immediate value.

	dstlen	= 16		; Number of bytes in the destination, passed by
				; immediate value.  Value may range from
				; 0 through 2147483647.

	dest	= 20		; Area to receive moved characters, passed
				; by reference.

;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

	.ENTRY	OTS$MOVE5, ^M<R2,R3,R4,R5>

	MOVQ	srclen(AP), R0		; Get source length and address
	MOVQ	fill(AP), R2		; Get fill and destination length
	MOVL	dest(AP), R4		; Get destination address
	BSBB	OTS$MOVE5_R5		; Do the move
	RET				; Return to caller

	.SBTTL	OTS$MOVE5_R5 - Move characters with fill
;++
; FUNCTIONAL DESCRIPTION:
;
;	This procedure moves up to 2**31-1 characters from a specified
;	source address to a specified destination address, with separate
;	source and destination lengths, and with fill.  Overlapping
;	fields are handled correctly.
;
; CALLING SEQUENCE:
;
;	JSB OTS$MOVE5_R5 (srclen.rl.v, source.rbu.ra, fill.rbu.v,
;	  dstlen.rl.v, dest.wbu.ra)
;
; FORMAL PARAMETERS:
;
;
;	srclen	= R0		; Number of bytes in the source
;				; Value may range from
;				; 0 through 2147483647.
;
;	source	= R1		; Address of characters to move
;
;	fill	= R2		; Fill byte to use when the srclen is less than
;				; dstlen.
;
;	dstlen	= R3		; Number of bytes in the destination.
;				; Value may range from
;				; 0 through 2147483647.
;
;	dest	= R4		; Address of area to receive moved characters.
;
;
; IMPLICIT INPUTS:
;
;	NONE
;
; IMPLICIT OUTPUTS:
;
;	R0 = Number of unmoved bytes remaining in source string.
;	R1 = Address of one byte beyond the source string.
;	R2 = 0
;	R3 = Address of one byte beyond the destination string.
;	R4 = 0
;	R5 = 0
;
; FUNCTION VALUE:
;
;	NONE
;
; SIDE EFFECTS:
;
;	NONE
;
;--

OTS$MOVE5_R5::

	CMPL	R0, #65535		; Is srclen greater than 65535?
	BGTR	BIG5			; If so, can't do simple move.
	CMPL	R3, #65535		; Is dstlen greater than 65535?
	BGTR	BIG5			; If so, can't do simple move.
	MOVC5	R0, (R1), R2, R3, (R4)	; Simple case; do the move
	RSB

BIG5:
	SUBL3	R0, R3, -(SP)		; Fill, exact or truncate?
	BGTR	NEED_FILL		; Move with fill
	BEQL	EXACT			; Same length source and dest?
	MOVL	R3, R0			; Truncate - use dstlen
EXACT:					; If exact, use source length
	MOVL	R4, R2			; Get dest address
	BSBW	OTS$MOVE3_R5		; Just move the characters
	MOVL	(SP)+, R0		; Restore unmoved source bytes
	RSB				; Return

;+
; We get here if we have to do some filling.  Save the information we need
; to do the fill, use OTS$MOVE3_R5 to do the data copy, then do the fill.
;-
NEED_FILL:
	MOVL	R2, -(SP)		; Save fill byte 
	SUBL3	R0, R3, -(SP)		; Length of fill
	MOVL	R4, R2			; Get destination address
	MOVL	R4, R3			; In case we're just filling
	TSTL	R0			; Just fill?
	BEQL	10$			; If so, skip the move
	BSBW	OTS$MOVE3_R5		; Move <srclen> characters - R3 has next byte
10$:	MOVL	R3, 8(SP)		; Save end-of-source pointer 
	CMPL	(SP), #65535		; More than 65535 characters of fill?
	BLEQ	30$			; If not, just fill the rest

20$:	MOVC5	#0, (SP), 4(SP), #65535, (R3)	; Fill 65535 bytes
	ACBL	#65536, #-65535, (SP), 20$ ; Loop until <65536 bytes left
30$:	MOVQ	(SP)+, R0		; Pop length and fill byte
	MOVC5	#0, (SP), R1, R0, (R3)	; Fill the rest
	MOVL	(SP)+, R1		; Restore end-of-source pointer
	RSB				; Return

	.END				; End of module OTS$MOVE
