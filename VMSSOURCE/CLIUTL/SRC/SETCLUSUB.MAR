	.TITLE	SETCLUSUB
	.IDENT	/V04-000/
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:	SET CLUSTER
;
; ABSTRACT:	Subroutines which run at elevated IPL for SET CLUSTER
;
; AUTHOR:	Paul R. Beck
;
; DATE:		19-FEB-1984 
;
; REVISION HISTORY:
;
;	V03-001	DWT0205		David W. Thiel		26-Mar-1984
;		Revise interface to connection manager.
;
;--
;
; Define offsets and constants
;
	$IPLDEF
	$CLUBDEF
	$CSBDEF
	$SBODEF

	.PSECT	SET$CODE	BYTE,RD,NOWRT,EXE
;
; Define timer for 1/10 second
;
ONE_TENTH:	.LONG	-1*1000*1000*1, -1

.SBTTL	'SET$VALIDATE_QUORUM'
;++
;	SET$VALIDATE_QUORUM
;
; FUNCTIONAL DESCRIPTION:
;	Validate proposed value for quorum to ensure that it is neither
;	too high nor too low, and pin it accordingly if it is out of range.
;	Pass the validated quorum value to the connection manager for
;	setting in the cluster.
; CALLING SEQUENCE:
;	CALL	SET$VALIDATE_QUORUM ( quorum, new_quorum )
; INPUT PARAMETERS:
;	P1	= new quorum value, or 0
;		  If 0, set according to (V+2)/2 formula.
; IMPLICIT INPUTS:
;	V	= CLUB$W_VOTES, total number of cluster votes
; OUTPUT PARAMETERS:
;	new_quorum = address of longword to receive actual value set
; IMPLICIT OUTPUTS:
;	none
; COMPLETION CODES:
;	SS$_NORMAL	= quorum set
; SIDE EFFECTS:
;
;--
;
	.ENTRY	SET$VALIDATE_QUORUM, ^M<R2,R3>
;
; This work must be done in kernel mode, and synchronized with the
; connection manager.
;
5$:	$CMKRNL_S B^CHANGE_QUORUM,(AP)	; Do this in kernel mode
	MOVL	R0,R3			; Save status of request
;
; At this point, we wait in user mode for a short time, then test to see
; if the connection manager has completed its work.
;
10$:	$SETIMR_S -			; Define a tick
		efn	= #EXE$C_SYSEFN - ; ...use system event flag
		daytim	= B^ONE_TENTH	  ; ...shouldn't be perceptible
	BLBC	R0,15$			; any error will be program bug
	$WAITFR_S -
		efn	= #EXE$C_SYSEFN	; Wait a tick
	BLBC	R0,15$			; ...
	BLBC	R3,5$			; Retry the command (couldn't handle it before)
	$CMKRNL_S B^TEST_QUORUM		; Test CLUB$V_ADJ_QUORUM
	BLBC	R0,10$			; If LBC, not done
	MOVL	R2,@8(AP)		; new_quorum <- assigned value
	RET

15$:	PUSHL	R0			; P1 = condition (assume no FAO args)
	CALLS	#1,G^LIB$SIGNAL		; Signal the error.
	RET				; Done

CHANGE_QUORUM:
	.WORD	0			; Entry point
	MOVL	4(AP),R1		; Get P1 = new quorum (value)
	SETIPL	B^IPL_SYNCH		; Make sure code won't page at SYNCH
;
; Tell the connection manager to set a new quorum. The connection manager
; must handle this since it is done in a coordinated fashion across the
; cluster. The quorum value is passed in R1 to this routine.
;
; Note that the connection manager is responsible for sanity-checking the
; quorum value.
;
	JSB	G^CNX$CHANGE_QUORUM	; Set new quorum value
;
; Done with the synchronized part. Return status in R0 to user mode.
;
	SETIPL	#0			; Out of synch
	RET				; Back to user mode

;
; Subroutine to return new quorum in R2, or error if not yet set.
;
TEST_QUORUM:
	.WORD	0

	SETIPL	B^IPL_SYNCH		; Lock down page, synch with cnx mgr
	MOVL	G^CLU$GL_CLUB,R2	; Get CLUB structure
	CLRL	R0			; Assume new quorum not set yet.
	BBS	#CLUB$V_ADJ_QUORUM,-	; If BS, still in process of setting quorum
		CLUB$L_FLAGS(R2),-
		10$
	MOVZWL	CLUB$W_QUORUM(R2),R2	; Done...get new quorum.
	MOVL	#1,R0			; Flag success
10$:	SETIPL	#0			; Desynchronize
	RET				; Done

IPL_SYNCH:
	.LONG	IPL$_SYNCH		; End of locked-down portion

.END
