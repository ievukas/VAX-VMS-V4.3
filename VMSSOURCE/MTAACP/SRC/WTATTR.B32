
MODULE WTATTR ( LANGUAGE ( BLISS32 ) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	This module handles the writing of attributes on a create
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--

!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  2-JUN-77
!
! MODIFIED BY:
!
!	V03-002	LMP0221		L. Mark Pilant,		12-Apr-1984  12:11
!		Change UCB$L_OWNUIC to ORB$L_OWNER and UCB$W_VPROT to
!		ORB$W_PROT.
!
!	V03-002	MMD0278		Meg Dumont,	23-Mar-1984  10:09
!		Change the processing of the accessibility character fields
!		in the HDR1 label to call the installation
!		specific accessibility routine. The return from this
!		routine determines the users access to the file.
!		Fix long file name support such that for ANSI version
!		3 volumes it converts the exentsion length to 
!		ASCII chars before writing it to the label.
!
!	V03-001	MMD0156		Meg Dumont,	26-Apr-1983  9:16
!		Add support fot interchange qualifier. Add support for long
!		file name in WANSINAME, by spliting the long name between
!		the HDR1 FILE_ID and the HDR4 lables.
!
!	V02-016 DMW00080	David Michael Walp	 2-Mar-1982
!		Added check for variable records greater then 9995
!
!	V02-015 DMW00074	David Michael Walp	 5-Feb-1982
!		Changed StatBlk to no-op
!
!	V02-014 DMW00066	David Michael Walp	 8-Jan-1982
!		Added HDR1 access character support
!
!	V02-013 DMW00061	David Michael Walp	 7-Dec-1981
!		Rename TRANSLATION_TABLE to ANSI_A_BAD
!
!	V02-012 DMW00051	David Michael Walp	10-Nov-1981
!		Change SELECTONE to CASE, return length of ASCNAME
!		( not just a flag )
!
!	V02-011 DMW00046	David Michael Walp	28-Oct-1981
!		Added ANSI "a" character support for file name, reformat
!
!	V02-010 DMW00042	David Michael Walp	 2-Oct-1981
!		Added support binary zero input dates
!
!	V02-009 DMW00029	David Michael Walp	10-Aug-1980
!		Added stream file support and removed V2.0 HDR2 temp support
!
!	V02-008 DMW0004		David Michael Walp	11-Nov-1980
!		New BLISS compiler, FUNCTION declaration changed from
!		BBLOCK to BLOCK.  Old compiler used to give a longword
!		with a declartion of "BBLOCK [1]".
!
!	V02-007	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!	V02-006 MCN0015		Maria del C. Nasr	10-Jun-1980
!		Write form control attribute in HDR2 too, and clean
!		undefined attributes of HDR3.
!
!	A0005	MCN0008		Maria del C. Nasr	22-Feb-1980   16:36
!		Temporary support of RMS attributes in HDR2
!
!	A0004	MCN0005		Maria del C. Nasr	05-Nov-1979   11:30
!		Eliminate [VCB$V_INTCHG] (interchange) switch
!
!	A0003	MCN0003		Maria del C. Nasr	16-Oct-1979   14:28
!		Add HDR3 processing
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

FORWARD ROUTINE
    WANSINAME	    :  COMMON_CALL NOVALUE,	! write ANSI 'a' filename
    WBINDATE	    :  NOVALUE,			! write 64_bit date
    WBLOCKSZ	    :  COMMON_CALL NOVALUE,	! write block size
    WEXPIREDT	    :  NOVALUE,			! write expiration date
    WRECATTR	    :  COMMON_CALL NOVALUE,	! write record attributes
    WRITE_ATTRIBUTE :  COMMON_CALL NOVALUE;	! write attributes, main

EXTERNAL
    CURRENT_UCB	    : REF BBLOCK,		! address of UCB
    HDR1	    : REF BBLOCK,		! address of HDR1 label
    HDR2	    : REF BBLOCK,		! address of HDR2 label
    HDR3	    : REF BBLOCK,		! address of HDR3 label
    HDR4	    : REF BBLOCK,		! address of HDR4 label
    NMBLOCK	    : BBLOCK [10];		! name block

EXTERNAL ROUTINE
    GET_RECORD,					! get current record tape is reading
    SYS$FAO	    : ADDRESSING_MODE (ABSOLUTE); ! change to hexadecimal

OWN
    MRS		    : WORD,			! maximum record length
    VFCHDR	    : WORD,			! length of VFC header
    BLOCKSZ;					! block size

BIND
    CVT5 = DESCRIPTOR ('!5ZW'),
    CVT8 = DESCRIPTOR ('!8XL');

GLOBAL
    ANSI_NAME_SIZE  : SIGNED BYTE;


GLOBAL ROUTINE WRITE_ATTRIBUTE : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine writes attributes into HDR1 and HDR2
!
! CALLING SEQUENCE:
!	WRITE_ATTRIBUTE()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	IO_PACKET - address of current IO request packet
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER				! here so main expection 
	COMMON_REG;				!  handler can touch the VCB

    EXTERNAL
	ATR_TABLE   : BLOCKVECTOR [ATR$C_MAX_CODE, 1],	! attribute table
	IO_PACKET   : REF BBLOCK,			! addr of current IRP
	ANSI_A_GOOD : VECTOR [ 256, BYTE ];		! translation table

    MACRO EQLLEN = 0, 24, 8, 0%;
    MACRO MAX	 = 0,  0, 8, 0%;

    LOCAL
	ACCESS_INPUT,				! set for whether access cahr specified
	CHAR	: VECTOR [4,BYTE],		! accessibility char to write to label
	CURRENT_RECORD,				! Record tape drive is reading
	STATUS,
	CHAR_INPUT : BYTE,			! Access char from ATR block
	DESCR	: VECTOR [2,LONG],		! descriptor of output for FAO
	MVL	: REF BBLOCK,			! MVL of volume
	PACKET	: REF BBLOCK,			! IO packet address
	ABD	: REF BBLOCKVECTOR [, ABD$C_LENGTH],	! addr of desc vector
	ORB	: REF BBLOCK,			! Object's rights block address
	BITS,					! number of bits set
	P,					! pointer to attribute
	CODE,					! attribute code
	COUNT;					! number of char in attribute


    PACKET	    = .IO_PACKET;
    ABD		    = .BBLOCK[.PACKET[IRP$L_SVAPTE], AIB$L_DESCRIPT];
    MRS		    = 0;			! default record size
    BLOCKSZ	    = 512;			! default record size
    VFCHDR	    = 0;			! initialize VFC header count
    ANSI_NAME_SIZE  = -1;			! no ANSI file name
    ACCESS_INPUT    = MTA$K_NOCHAR;		! Assume no access char passed

    INCRU I FROM ABD$C_ATTRIB TO .PACKET[IRP$W_BCNT] - 1 DO
	BEGIN

	! set up a pointer to the attribute and set up the size and
	! find the attribute code

	P     = .ABD[.I, ABD$W_TEXT] + ABD[.I, ABD$W_TEXT];
	COUNT = .ABD[.I, ABD$W_COUNT];
	CODE  = .(.P)<0, 8>;
	P     = .P + 1;

	! test for table length

	IF .CODE GTRU ATR$C_MAX_CODE THEN ERR_EXIT(SS$_BADATTRIB);

	! check attribute length

	IF .ATR_TABLE[(.CODE-1),EQLLEN]
	THEN
	    BEGIN
	    IF .COUNT NEQU .ATR_TABLE[(.CODE-1),MAX]
	    THEN ERR_EXIT(SS$_BADATTRIB);
	    END
	ELSE
	    BEGIN
		IF .COUNT GTRU .ATR_TABLE[(.CODE-1),MAX]
		    THEN ERR_EXIT(SS$_BADATTRIB);
	    END;

	! call the correct procedure

	CASE .CODE FROM 1 TO ATR$C_MAX_CODE OF
	    SET

	    [ ATR$C_RECATTR	] : WRECATTR  ( .P, .COUNT );
	    [ ATR$C_FILNAM	] : CH$MOVE   ( .COUNT, .P, NMBLOCK );
	    [ ATR$C_FILTYP	] : CH$MOVE   ( .COUNT, .P, NMBLOCK + 6 );
	    [ ATR$C_FILVER	] : CH$MOVE   ( .COUNT, .P, NMBLOCK + 8 );
	    [ ATR$C_EXPDAT	] : WEXPIREDT ( .P, .COUNT );
	    [ ATR$C_BLOCKSIZE	] : WBLOCKSZ  ( .P, .COUNT );
	    [ ATR$C_ASCNAME	] : WANSINAME ( .P, .COUNT );
	    [ ATR$C_CREDATE	] : WBINDATE  ( .P, .COUNT,
						 BBLOCK[.HDR1,HD1$T_CREATEDT]);
	    [ ATR$C_EXPDATE	] : WBINDATE  ( .P, .COUNT,
						 BBLOCK[.HDR1,HD1$T_EXPIREDT]);
	    [ ATR$C_HDR1_ACC	] : BEGIN
				       CHAR_INPUT = .ANSI_A_GOOD [ .(.P)<0,8> ];
				       ACCESS_INPUT = MTA$K_CHARVALID;
				     END;

	    ! These are either read only attributes or unimplemented ones

	    [ ATR$C_HEADER,
	      ATR$C_USERLABEL,
	      ATR$C_ENDLBLAST,
	      ATR$C_UIC_RO	] : ERR_EXIT ( SS$_BADATTRIB );
    
	    ! The following are valid for DISK but not TAPE, so we will drop
	    !  them on the floor ( NO OP ) for device independence sake
	    ! If these values are asked for during read attributes we will
	    !  dummy them up
	    ! INRANGE statement is used for speed and code size sake

!	    [ 1,
!	      2,
!	      ATR$C_UCHAR,	
!	      ATR$C_STATBLK,
!	      ATR$C_ASCDATES,	!!!!!!!!!!!!!! This One Should be Fixed !!!!!!!
!	      ATR$C_ALCONTROL,
!	      ATR$C_REVDATE,
!	      ATR$C_BAKDATE,
!	      ATR$C_UIC,
!	      ATR$C_FPRO,
!	      ATR$C_RPRO,
!	      ATR$C_ACLEVEL,
!	      ATR$C_SEMASK,
!	      ATR$C_DIRSEQ,
!	      ATR$C_BACKLINK,
!	      ATR$C_JOURNAL	] : ;
	    [ INRANGE		] : ;
	    TES;
	END;

    ! Call the accessibility system service to determine the accessibility char
    ! to write on the label.
    ! First keep the record that the UCB is reading. The accessibility 
    ! routine can not move the tape from under us! Thus we will compare
    ! this to the field after the call and if the tape was moved we punt
    ! the operation. 

    MVL = .CURRENT_VCB[VCB$L_MVL];
    ORB = .CURRENT_UCB[UCB$L_ORB];
    CURRENT_RECORD = KERNEL_CALL(GET_RECORD, .CURRENT_UCB);
    CHAR = $MTACCESS(LBLNAM = .HDR1,
		       UIC = .ORB[ORB$L_OWNER],
		       STD_VERSION = .MVL[MVL$B_STDVER],
		       ACCESS_CHAR = .CHAR_INPUT,
		       ACCESS_SPEC = .ACCESS_INPUT,
		       TYPE = MTA$K_OUTHDR1);

    STATUS = KERNEL_CALL(GET_RECORD, .CURRENT_UCB);
    IF .CURRENT_RECORD NEQ .STATUS
  	THEN ERR_EXIT(SS$_TAPEPOSLOST);

    ! Write the char to the label.

    HDR1[HD1$B_FILACCESS] = .CHAR[0];    

    ! after both blocksize and maximum record size attributes have been
    ! processed then determine the value of reclen in HDR2

    IF .MRS EQLU 0
    THEN
	(CH$MOVE(HD2$S_BLOCKLEN, HDR2[HD2$T_BLOCKLEN], HDR2[HD2$T_RECLEN]))
    ELSE
	BEGIN

	! count overhead for ANSI 'D' record

	IF .HDR2[HD2$B_RECFORMAT] EQL 'D' THEN MRS = .MRS + 4 + .VFCHDR;

	! FAO output descriptor

	DESCR[0] = HD2$S_RECLEN;
	DESCR[1] = HDR2[HD2$T_RECLEN];
	SYS$FAO(CVT5, 0, DESCR, .MRS);
	END;

    ! now check
    !	  that the block size is valid
    ! and that the record size is not bigger then the block size
    ! and that variable records are not larger then can be supported ( RCW )

    IF	  ( .BLOCKSZ LSSU 18 )
       OR ( .MRS GTRU .BLOCKSZ )
       OR ( ( .MRS GTRU (9999 - 4) ) AND ( .HDR2 [ HD2$B_RECFORMAT ] EQL 'D' ))
    THEN ERR_EXIT(SS$_BADATTRIB);

    END;

ROUTINE WEXPIREDT (PTER, COUNT) :  NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine puts the expiration attribute in HDR1
!
! CALLING SEQUENCE:
!	WEXPIREDT(ARG1,ARG2)
!
! INPUT PARAMETERS:
!	ARG1 - address of attribute(ddmmmyy)
!	ARG2 - number of characters in attribute
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	expiration date in HDR1 updated
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	SS$_BADATTRIB - attribute length must equal 7 or illegal date
!
!--

    BEGIN

    EXTERNAL
	ZERO_JDATE : VECTOR [ 6, BYTE ];! zero Julian Date of " 00000"

    EXTERNAL ROUTINE
	CONVDATE_R2J;			! convert date from reg to JULIAN(ANSI)

    LOCAL
	DATE	: VECTOR [12, BYTE];	! work area for date with dashes

    IF (.(.PTER) EQL 0) AND (.(.PTER+4) EQL 0)
    THEN

	! if expiration is binary zero, then no date thus stuff zero date

	(CH$MOVE ( 6, ZERO_JDATE, BBLOCK[.HDR1, HD1$T_EXPIREDT] ))

    ELSE
	BEGIN

	! now format DD-MMM-YYYY from DDMMMYY

	(DATE)<0, 16> = .(.PTER);	    ! day 
	(DATE + 2)<0, 8> = '-';		    ! dash
	(DATE + 3)<0, 24> = .(.PTER + 2);   ! month
	(DATE + 6)<0, 24> = '-19'	    ! century
	(DATE + 9)<0, 16> = .(.PTER + 5);   ! year

        IF NOT CONVDATE_R2J(DATE, BBLOCK[.HDR1, HD1$T_EXPIREDT])
	THEN
	    ERR_EXIT(SS$_BADATTRIB);

	END;
    END;

ROUTINE WRECATTR (PTER, COUNT) :  COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine records user attributes in HDR2 and HDR3
!
! CALLING SEQUENCE:
!	WRECATTR(ARG1,ARG2)
!
! INPUT PARAMETERS:
!	ARG1 - address of attribute
!	ARG2 - size of attribute
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	HDR2 and HDR3 updated to reflect user attributes
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;				!  Set up reference to the VCB

    LITERAL
	RECTYPE_LEN = 8,
	RECATTR_LEN = 6;

    BIND
	RECTYPE_ANSI = UPLIT BYTE('UFDVDDDS')		: VECTOR [, BYTE],
	RECTYPE_FILE11 = UPLIT BYTE(0,1,2,3,4,5,6,0)	: VECTOR [, BYTE],
	RECATTR_ASCI = UPLIT BYTE('MA MA ')		: VECTOR [, BYTE],
	RECATTR_FILE11 = UPLIT BYTE(0, 1, 2, 8, 9, 10)	: VECTOR [, BYTE];

    LOCAL
	ATTRIBUTES	: VECTOR [CH$ALLOCATION(32)],	! store good attributes
	X,						! for support of HDR2 attributes
	DESCR	: VECTOR [2],				! general descriptor
	PARTIAL_CNT;					! count of attributes to transfer

    MAP
	PTER	: REF BBLOCK;				! address of attribute

    ! capture valid attributes only

    CH$COPY(.COUNT, .PTER, 0, 32, ATTRIBUTES);

    ! is record type present

    IF .COUNT GEQU ($BYTEOFFSET(FAT$B_RTYPE) + 1)
    THEN
	BEGIN
	HDR2[HD2$B_RECFORMAT] = %C'U';

	DECR I FROM RECTYPE_LEN - 1 TO 0 DO
	    BEGIN

	    IF .RECTYPE_FILE11[.I] EQL .PTER[FAT$B_RTYPE]
	    THEN
		HDR2[HD2$B_RECFORMAT] = .RECTYPE_ANSI[.I];

	    END;

	IF .HDR2[HD2$B_RECFORMAT] EQLU 'V'
	THEN
	    BEGIN
	    HDR2[HD2$B_RECFORMAT] = 'D';

	    IF .COUNT GEQU ($BYTEOFFSET(FAT$B_VFCSIZE) + 1)
	    THEN
		VFCHDR = .PTER[FAT$B_VFCSIZE]	! get VFC header size
	    ELSE 				! if defined,
		VFCHDR = 2;			! otherwise, set default value

	    END;

    ! If this tape is being created for interchange do not allow VMS
    ! specific values in this field

    IF .CURRENT_VCB[VCB$V_INTCHG] AND .HDR2[HD2$B_RECFORMAT] EQLU 'U'
    THEN
	ERR_EXIT(SS$_BADATTRIB);

	END;

    ! if form control character is present

    IF .COUNT GEQU ($BYTEOFFSET(FAT$B_RATTRIB) + 1)
    THEN
	BEGIN

	INCR I FROM 0 TO RECATTR_LEN - 1 DO

	    IF .RECATTR_FILE11[.I] EQLU .PTER[FAT$B_RATTRIB]
	    THEN
		HDR2[HD2$B_FORMCNTRL] = .RECATTR_ASCI[.I];

	END;

    ! copy record attributes into HDR3 in hexadecimal format...

    PARTIAL_CNT = .COUNT - 1;

    IF .PARTIAL_CNT GTR 28
    THEN
	PARTIAL_CNT = 28;

    DESCR[0] = 8;

    INCR I FROM 0 TO .PARTIAL_CNT BY 4 DO
	BEGIN
	DESCR[1] = HDR3[HD3$T_RECATR] + (.I*2);
	SYS$FAO(CVT8, 0, DESCR, .(ATTRIBUTES + .I));
	END;

    ! calculate maximum record size

    MRS = .(ATTRIBUTES + $BYTEOFFSET(FAT$W_RSIZE))<0, 16>;

    IF .MRS EQL 0
    THEN
	MRS = .(ATTRIBUTES + $BYTEOFFSET(FAT$W_MAXREC))<0, 16>;

    ! Copy attributes to HDR2 too, for temporary support

!    X = 1;
!
!    IF NOT .X
!    THEN
!	BEGIN
!	PARTIAL_CNT = .COUNT;
!
!	IF .PARTIAL_CNT GTRU 20
!	THEN
!	    PARTIAL_CNT = 20;
!
!	CH$COPY(.PARTIAL_CNT, .PTER, 0, HD2$S_RECATR1, HDR2[HD2$T_RECATR1]);
!	PARTIAL_CNT = .COUNT - .PARTIAL_CNT;
!	CH$COPY(.PARTIAL_CNT, .PTER + HD2$S_RECATR1, 0, HD2$S_RECATR2,
!	    HDR2[HD2$T_RECATR2]);
!	END;

    END;

ROUTINE WBLOCKSZ (ADDR, LENGTH) :  COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine writes the block size
!
! CALLING SEQUENCE:
!	WBLOCKSZ(ARG1,ARG2)
!
! INPUT PARAMETERS:
!	ARG1 - address of attribute
!	ARG2 - length of attribute
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	block size written to HDR2
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	SS$_BADATTRIB - block size attribute neq to 2
!	SS$_NOTINTBLSZ - block size on interchange tape not <=2048
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;				!  Set up reference to the VCB

    MAP
	ADDR	: REF VECTOR [, BYTE];		! address of attribute

    LOCAL
	DESCR	: VECTOR [2];

    BLOCKSZ = .(.ADDR)<0, 16>;

    ! If this tape is being created for interchange do not allow VMS
    ! specific values in this field

    IF .CURRENT_VCB[VCB$V_INTCHG]
    THEN
	IF .BLOCKSZ GTRU 2048
	THEN
	    ERR_EXIT (SS$_NOTINTBLSZ);

    DESCR[0] = HD2$S_BLOCKLEN;
    DESCR[1] = HDR2[HD2$T_BLOCKLEN];
    SYS$FAO(CVT5, 0, DESCR, .BLOCKSZ);
    END;


ROUTINE WBINDATE (INPUT, INPLEN, OUTPUT) :  NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine converts a 64 bit input date to an ANSI Julian date
!
! CALLING SEQUENCE:
!	WBINDATE(ARG1,ARG2,ARG3)
!
! INPUT PARAMETERS:
!	ARG1 - address of 64 bit date
!	ARG2 - length of date
!	ARG3 - address for Julian date to placed
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	ARG3 - address which receives Julian date
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	SS$_BADATTRIB - attribute length neq 8
!
!--

    BEGIN

    LOCAL
	REGDATE	: VECTOR [12, BYTE],
	REGDESC	: VECTOR [2];

    EXTERNAL ROUTINE
	SYS$ASCTIM	: ADDRESSING_MODE (ABSOLUTE),
	CONVDATE_R2J;

    REGDESC[0] = 12;
    REGDESC[1] = REGDATE;
    SYS$ASCTIM(0, REGDESC, .INPUT, 0);
    CONVDATE_R2J(REGDATE, .OUTPUT);
    END;

ROUTINE WANSINAME ( POINTER, LENGTH ) :  COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	Writes the 17 or less character filename containing ANSI "a" characters
!	into the HDR1. The remainder of a VMS long filename is written into
!	the HDR4 label.
!
! CALLING SEQUENCE:
!	WANSINAME ( pointer, length )
!
! INPUT PARAMETERS:
!	pointer	- points to file name string
!	length  - length of the file name string
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	file name is stuffed into the header
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    EXTERNAL ANSI_A_BAD		: VECTOR [ , BYTE ],
	     ESC_CHAR		: BYTE;

    LOCAL
	TEMP_ID			: VECTOR [ FILE_SPEC_MAX,BYTE ],
	RETURN_LENGTH;

    ! check length of file name

    IF .LENGTH GTRU FILE_SPEC_MAX THEN ERR_EXIT ( SS$_BADFILENAME );

    ! Space fill the temporary storage for the FILE_ID

    CH$FILL(' ',FILE_SPEC_MAX,TEMP_ID);

    ! translate into upper case and check for non-ANSI 'a' characters

    IF 0 NEQ MOVTUC ( LENGTH,		     .POINTER, ESC_CHAR, ANSI_A_BAD, 
		      %REF ( FILE_SPEC_MAX ), TEMP_ID)
    THEN ERR_EXIT ( SS$_BADFILENAME );

    ! Move the filename into the headers and padd space left with spaces

    CH$MOVE (HD1$S_FILEID, TEMP_ID, HDR1[HD1$T_FILEID]);
    CH$MOVE (HD4$S_FILEID_EXT, TEMP_ID[HD1$S_FILEID], HDR4[HD4$T_FILEID_EXT]);

    ! Check the length of the file name. If the file name will fit in 
    ! the HDR1 FILE ID then set the HDR4 length to zero. Else set up
    ! the lengths such that the HDR1 FILE ID is filed with the name
    ! then the remainder of the name is put in the HDR4 label with the
    ! size that is in the HDR4 label only.
    ! PLEASE NOTE that the actual implementation of this is different for
    ! volumes with a 4 in the VOL1 standard field as opposed to a 3 or less.
    ! This is because the new standard allows us to write any kind
    ! of data in implementation dependant fields. The old standard did not allow
    ! us to do this.

    BEGIN
	BIND 
	    CVT2 = DESCRIPTOR ('!2ZW');
	LOCAL
	    DESCR : VECTOR [2],
	    MVL   : REF BBLOCK;
	MVL = .CURRENT_VCB[VCB$L_MVL];
	IF .LENGTH  LEQU HD1$S_FILEID
	   THEN
	   BEGIN
	   IF .MVL[MVL$B_STDVER] GTR 3
		THEN
		    HDR4[HD4$B_FILEID_EXT_SIZE] = 0
		ELSE
		    CH$FILL(0,HD4$S_FILEID_EXT_V3,HDR4[HD4$T_FILEID_EXT_V3]);
	   END
	   ELSE
	   BEGIN
	   IF .MVL[MVL$B_STDVER] GTR 3
		THEN		
		    HDR4[HD4$B_FILEID_EXT_SIZE] = .LENGTH - HD1$S_FILEID
		ELSE
		BEGIN
		   LOCAL LEN;
		   LEN = .LENGTH - HD1$S_FILEID;
		   DESCR[0] = HD4$S_FILEID_EXT_V3;
		   DESCR[1] = HDR4[HD4$T_FILEID_EXT_V3];
		   $FAO(CVT2,0,DESCR,.LEN);
		END;
	   END
	END;

    ! strip trailing blanks from the string

    RETURN_LENGTH = 0;
    DECR I FROM (.LENGTH - 1) TO 0 DO
	IF TEMP_ID [ .I ] NEQ ' '
	THEN
	    BEGIN
	    RETURN_LENGTH = .I + 1;
	    EXITLOOP
	    END;

    ! tell the other routines the size of this name
    !
    ANSI_NAME_SIZE = .RETURN_LENGTH;

    END;			! end of Routine

!++++
!ROUTINE WLABELAST (ATTRIBUTE) :  NOVALUE =
!
!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine validates and stores the user's supplied AST control block
!
! CALLING SEQUENCE:
!	WLABELAST(ARG1)
!
! INPUT PARAMETERS:
!	ARG1	- address of attribute
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	none
!
! USER ERRORS:
!	none
!
!--
!
!    BEGIN
!
!    EXTERNAL REGISTER
!	COMMON_REG;
!
!    LOCAL
!	AST		: REF BBLOCK,		! user supplied AST control block
!	FUNCTION	: BLOCK [1],		! IO function code and modifiers
!	LENGTH,
!	MODE;
!
!    EXTERNAL
!	IO_PACKET	: REF BBLOCK;		! address of IO request packet
!
!    FUNCTION = .IO_PACKET[IRP$W_FUNC];
!    AST = ..ATTRIBUTE;			! parameter is address of attribute
!    MODE = 0;
!    LENGTH = 4;
!    BEGIN
!
!    BUILTIN
!	PROBER;
!
!    IF  .AST NEQ 0
!	AND
!	( NOT PROBER(MODE, LENGTH, .AST)
!	OR
!	.AST[ACB$B_TYPE] NEQ DYN$C_ACB
!	OR
!	NOT .FUNCTION[IO$V_ACCESS])
!    THEN
!	ERR_EXIT(SS$_ILLLBLAST);
!
!    END;

    ! won't return any AST other than the currently recorded one
    !
!    KERNEL_CALL(COMPLETE_USRLBL, .AST, 0);
!    END;
!----
END

ELUDOM
