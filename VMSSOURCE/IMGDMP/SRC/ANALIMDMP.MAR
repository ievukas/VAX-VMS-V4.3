	.TITLE	ANALIMDMP
	.IDENT	/V04-000/
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	IMAGE DUMP
;
; ABSTRACT:	Analyze an image dump and transfer control to debugger.
;
;
; ENVIRONMENT:	User mode
;
; AUTHOR:	Wayne Cardoza
;
; CREATION DATE: 14-Feb-1983
;
; MODIFIED BY:
;
;	V03-017	WMC0016		Wayne Cardoza	06-Aug-1984
;		Fix an improperly restored register.
;
;	V03-016	WMC0015		Wayne Cardoza	09-Jul-1984
;		Save and restore CTL$GL_IMGHDRBF.
;
;	V03-015	WMC0014		Wayne Cardoza	27-Jun-1984
;		Add control-Y handler to kill subprocess.
;
;	V03-014	WMC0014		Wayne Cardoza	23-May-1984
;		Fix several minor bugs relating to error checks and reporting.
;
;	V03-013	WMC0013		Wayne Cardoza	08-May-1984
;		Don't open dump file for write.
;
;	V03-012	WMC0012		Wayne Cardoza	22-Mar-1984
;		Don't let privilege be removed by image activation.
;
;	V03-011	WMC0011		Wayne Cardoza	29-Jan-1984
;		Fix defaults for /IMAGE.
;
;	V03-010	WMC0010		Wayne Cardoza	27-Dec-1983
;		Display the condition from the stack.
;
;	V03-009	WMC0009		Wayne Cardoza	13-Nov-1983
;		Don't let image activator remove privileges.
;
;	V03-008	WMC0008		Wayne Cardoza	26-Sep-1983
;		Vectors must also be reset after IMGACT.
;
;	V03-007	WMC0007		Wayne Cardoza	15-Sep-1983
;		Reset privileged library vectors when deleting P0.
;
;	V03-006	WMC0006		Wayne Cardoza	26-Aug-1983
;		Phony DEBUG frame had bad PUSH.
;
;	V03-005	WMC0005		Wayne Cardoza	14-Aug-1983
;		Fix priority of created subprocess.
;
;	V03-004	WMC0004		Wayne Cardoza	01-Jul-1983
;		SYS$IMGACT has been redesigned.
;
;	V03-003	WMC0003		Wayne Cardoza	25-May-1983
;		Fix a privilege problem.
;
;	V03-002	WMC0002		Wayne Cardoza	20-Apr-1983
;		Reset privileges before calling DEBUG.
;
;	V03-001	WMC0001		Wayne Cardoza	20-Apr-1983
;		Check dump version number for consistency.
;

	.PSECT	ANALIMDMP,LONG
	.DEFAULT DISPLACEMENT,WORD
;
; Data Structure Definitions
;
;
	$IMGDMPDEF
	$IMGMOVDEF
	$IODEF
	$DIBDEF
	$IACDEF
	$IHIDEF
	$IHDDEF
	$NAMDEF
	$PHDDEF
	$PRVDEF

;++
;
; Functional Description:
;	This is the main routine for analyzing an image dump.  It will display
;	some useful data and then transfer control to the debugger.
;
; Calling Sequence:
;	standard
;
; Input Parameters:
;	standard image argument list
;
; Implicit Inputs:
;	the command line
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routine Value:
;	none
;
; Signals:
;	none
;
; Side Effects:
;	many
;
;--
;
;
ANALIMDMP:
	.WORD 0

	MOVL	12(AP),THIS_HDR		; Save this images pointers
	MOVL	16(AP),THIS_HDR+4	; in case we don't load an image
;
	PUSHAB	SYS$INPUT		; Translate sys$input
	PUSHAB	INPUT_TRN
	BSBW	GET_TRAN
	CMPW	SYS$INPUT_TRN,#<27+<27@8>> ; ESC-ESC means subprocess
	BNEQ	5$
	BSBW	INIT_SUBP		; Do subprocess initialization
	BLBC	R0,10$
	BRB	7$

5$:	PUSHAB	DUMP_NAME		; Get the dump file name
	PUSHAB	CLI_PARAMETER
	CALLS	#2,G^CLI$GET_VALUE
	BLBC	R0,10$
;
7$:	$CREATE	FAB = OUTFAB		; We will eventually need this
	BLBC	R0,10$
	$CONNECT RAB = OUTRAB
	BLBC	R0,10$
;
	MOVB	DUMP_NAME,DMP_FAB+FAB$B_FNS
	$OPEN FAB = DMP_FAB		; Open the dump file
	BLBS	R0,20$
10$:	RET
20$:	$CONNECT RAB = DMP_RAB
	BLBC	R0,10$
;
	MOVL	#1,DMP_RAB+RAB$L_BKT	; Read the image header block
	MOVW	#512,DMP_RAB+RAB$W_USZ	; One block
	MOVAB	IMGHDR,DMP_RAB+RAB$L_UBF
	$READ RAB = DMP_RAB
	BLBC	R0,10$
	CMPW	SYS$INPUT_TRN,#<27+<27@8>> ; ESC-ESC means subprocess
	BNEQ	25$
	BRW	40$			; Skip all the image name stuff
25$:	MOVAB	IMGHDR,R2
	MOVZWL	IHD$W_IMGIDOFF(R2),R0	; Get to image name
	ADDL	R0,R2
	MOVZBL	IHI$T_IMGNAM(R2),R0	; Image name length
	MOVAB	MISC,IMGFAB+FAB$L_DNA	; Image name will be here
	ADDB3	#4,R0,IMGFAB+FAB$B_DNS  ; Allow for .EXE in image name
	MOVC3	R0,IHI$T_IMGNAM+1(R2),MISC ; Save image name for use as default
	MOVL	#^A/.EXE/,(R3)		; Add default extension to end of MOVC3
;
	PUSHAB	CLI_IMAGE		; See if image qualifier is there
	CALLS	#1,G^CLI$PRESENT
	BLBC	R0,30$
	PUSHAB	IMAGE_DESC		; Get image name
	PUSHAB	CLI_IMAGE
	CALLS	#2,G^CLI$GET_VALUE
	BLBC	R0,30$
	MOVB	IMAGE_DESC,IMGFAB+FAB$B_FNS
	MOVL	IMAGE_DESC+4,IMGFAB+FAB$L_FNA
30$:
	$OPEN	FAB = IMGFAB
	MOVL	R0,R2			; Save status
	MOVZBL	IMGNAM+NAM$B_ESL,IMAGE	; Expanded file name length
	MOVL	IMGNAM+NAM$L_ESA,IMAGE+4
	$CLOSE	FAB = IMGFAB		; We don't really need the file
	MOVL	R2,R0			; Get back the status
	BLBS	R0,35$			; The image file is there
	CMPL	R0,#RMS$_FNF
	BNEQ	50$			; A real error
	CLRL	IMAGE			; Treat like /NOIMAGE
	BRB	40$
;
35$:	PUSHAB	CLI_NOIMAGE		; Is noimage qualifier there
	CALLS	#1,CLI$PRESENT
	BLBC	R0,40$
	CLRL	IMAGE			; Indicate no image to be loaded
;
40$:	MOVL	#2,DMP_RAB+RAB$L_BKT	; Read misc data block
	MOVW	#512,DMP_RAB+RAB$W_USZ	; One block
	MOVAB	MISC,DMP_RAB+RAB$L_UBF
	$READ RAB = DMP_RAB
	BLBC	R0,50$
;
	CMPL	MISC+IMGDMP$L_VERSION,#IMGDMP$C_VERSION
	BEQL	43$			; Versions of dump and program match
	MOVL	#SS$_BADFILEVER,R0
	BRB 	50$
;
43$:	BSBW	BLD_MISC_VA		; Build table of misc VA's
;
	CMPW	SYS$INPUT_TRN,#<27+<27@8>> ; ESC-ESC means subprocess
	BEQL	45$			; We already did the display
	CALLS	#0,DISPLAY_DUMP		; Display the dump data
;
45$:	MOVL	#3,DMP_RAB+RAB$L_BKT	; Read first map block
	MOVW	#512,DMP_RAB+RAB$W_USZ	; One block
	MOVAB	MAP,DMP_RAB+RAB$L_UBF
	$READ RAB = DMP_RAB
	BLBS	R0,60$
50$:	RET
60$:	$DISCONNECT RAB = DMP_RAB
	BLBC	R0,50$
	$CLOSE FAB = DMP_FAB		; Close file before image activation
	BLBC	R0,50$
;
; Decide if we can do the job in this process or if a subprocess is needed to
; make room for the saved stack.
;
	CMPL	MISC+IMGDMP$L_USRSTK,G^CTL$AL_STACK+12
	BLEQU	70$			; No problem
	CMPW	SYS$INPUT_TRN,#<27+<27@8>> ; ESC-ESC means subprocess
	BEQL	80$			; Already a subprocess
	BSBW	CREATE_SUBP		; Go create a subprocess
	RET
;
70$:	MOVL	COND_MSG+4,OUTRAB+RAB$L_RBF ; First half of condition message
	MOVW	COND_MSG,OUTRAB+RAB$W_RSZ   ;  it is easier to do unrelocated
	$PUT	RAB = OUTRAB
	BLBC	R0,50$
	SUBL	#MOVE_END-MOVE_BEG,SP
	MOVC3	#MOVE_END-MOVE_BEG,MOVE_BEG,(SP) ; Move the code
	JMP	(SP)	; Relocate execution
;
; No hope of analyzing this dump.
;
80$:	MOVL	#SS$_VASFULL,R0
	RET

;
; Create a subprocess to execute this image so we can fix the user stack in
; its old position.
;
CREATE_SUBP:
;
; Announce what we are doing
;
	MOVL	CRE_SUB_MSG+4,OUTRAB+RAB$L_RBF
	MOVW	CRE_SUB_MSG,OUTRAB+RAB$W_RSZ
	$PUT	RAB = OUTRAB
	BLBC	R0,10$
;
	$CREMBX_S CHAN = INP_MBX,-	; Mailbox for new process SYS$INPUT
		  MAXMSG = #256
	BLBS	R0,20$
10$:	RSB
20$:	$CREMBX_S CHAN = TERM_MBX	; Termination mailbox for the created process
	BLBC	R0,10$
	PUSHAB	SYS$INPUT		; Get recursive translation of SYS$INPUT
	PUSHAB	INPUT
	BSBW	GET_TRAN
	ADDL	#8,SP
	BLBC	R0,10$
	PUSHAB	SYS$OUTPUT		; Get recursive translation of SYS$OUTPUT
	PUSHAB	OUTPUT
	BSBW	GET_TRAN
	ADDL	#8,SP
	BLBC	R0,10$
	PUSHAB	SYS$ERROR		; Get recursive translation of SYS$ERROR
	PUSHAB	ERROR
	BSBW	GET_TRAN
	ADDL	#8,SP
	BLBC	R0,10$
	PUSHL	INP_MBX			; Get unit number of mailbox
	PUSHAB	INP_MBX_UNIT
	BSBW	MBX_UNIT
	ADDL	#8,SP
	BLBC	R0,10$
	PUSHL	TERM_MBX		; Get unit number of mailbox
	PUSHAB	TERM_MBX_UNIT
	BSBW	MBX_UNIT
	ADDL	#8,SP
	BLBC	R0,10$
	$QIOW_S	CHAN = INP_MBX,-	; Data for the new process
		FUNC = #IO$_WRITEVBLK!IO$M_NOW,-
		P1 = @INPUT+4,-
		P2 = INPUT
	BLBC	R0,30$
	$QIOW_S	CHAN = INP_MBX,-
		FUNC = #IO$_WRITEVBLK!IO$M_NOW,-
		P1 = @IMAGE+4,-
		P2 = IMAGE
	BLBC	R0,30$
	$QIOW_S	CHAN = INP_MBX,-
		FUNC = #IO$_WRITEVBLK!IO$M_NOW,-
		P1 = NAME_BUFFER,-
		P2 = DUMP_NAME
	BLBS	R0,40$
30$:	RSB
40$:	$FAO_S	CTRSTR = INPFAO,-	; Get mailbox unit for SYS$INPUT
		OUTLEN = INP_MBX_NAM,-
		OUTBUF = INP_MBX_NAM,-
		P1 = INP_MBX_UNIT
	PUSHAB	OLD_CTRL
	PUSHAB	CTRY_DISABL
	CALLS	#2,G^LIB$DISABLE_CTRL	; Disable DCL use of control-Y
	$ASSIGN_S DEVNAM = SYS$INPUT,-	; Get channel for control-Y
		CHAN   = INP_CHAN
	$QIO_S	CHAN = INP_CHAN,-	; Request AST on control-Y
		FUNC = #IO$_SETMODE!IO$M_CTRLYAST,-
		P1   = CNTRLY_AST
	$CREPRC_S IMAGE = ANAL_IMG,-	; Create the process
		  INPUT = INP_MBX_NAM,-
		  OUTPUT = OUTPUT,-
		  ERROR = ERROR,-
		  MBXUNT = TERM_MBX_UNIT,-
		  BASPRI = #4,-
		  PRVADR = L^CTL$GQ_PROCPRIV,-
		  PIDADR = SUBP_PID
	BLBC	R0,45$
	$QIOW_S	CHAN = TERM_MBX,-
		FUNC = #IO$_READVBLK,-
		P1 = TERM_MSG,-
		P2 = #10
	BLBC	R0,45$
	MOVL	TERM_MSG+4,R0		; Get process exit status
45$:	PUSHL	R0			; Save exit status
	CLRL	-(SP)
	PUSHAB	OLD_CTRL		; Original control-Y status
	CALLS	#2,G^LIB$ENABLE_CTRL	; Restore DCL use of control-Y
	POPR	R0
50$:	RSB

;
; AST routine for control-Y when a subprocess is active
;
CNTRLY_AST:
	.WORD	0
	$DELPRC_S PIDADR = SUBP_PID	; Get rid of the subprocess
	CLRL	-(SP)
	PUSHAB	OLD_CTRL		; Original control-Y status
	CALLS	#2,G^LIB$ENABLE_CTRL	; Restore DCL use of control-Y
	$EXIT_S CODE = #SS$_NORMAL	; Exit this image
	RET

;
; Initialization routines for running in subprocess
;
INIT_SUBP:
	SUBL2	#2,INPUT_TRN	; Get rid of the ESC-ESC
	ADDL	#2,INPUT_TRN+4
	$ASSIGN_S DEVNAM = INPUT_TRN,-
		 CHAN = INP_MBX
	BLBS	R0,20$
10$:	RSB
20$:	$QIOW_S	CHAN = INP_MBX,-
		FUNC = #IO$_READVBLK,-
		IOSB = IOSB,-
		P1 = @REAL_INPUT+4,-
		P2 = REAL_INPUT
	BLBC	R0,10$
	MOVZWL	IOSB,R0
	BLBC	R0,10$
	MOVW	IOSB+2,REAL_INPUT	; Length
	$CRELOG_S LOGNAM = SYS$INPUT,-	; Make SYS$INPUT correct
		  EQLNAM = REAL_INPUT,-
		  TBLFLG = #2
	BLBC	R0,10$
	$QIOW_S	CHAN = INP_MBX,-
		FUNC = #IO$_READVBLK,-
		IOSB = IOSB,-
		P1 = @IMAGE_DESC+4,-
		P2 = IMAGE_DESC
	BLBC	R0,30$
	MOVZWL	IOSB,R0
	BLBC	R0,30$
	MOVW	IOSB+2,IMAGE	; Length
	MOVL	IMAGE_DESC+4,IMAGE+4
	$QIOW_S	CHAN = INP_MBX,-
		FUNC = #IO$_READVBLK,-
		IOSB = IOSB,-
		P1 = @DUMP_NAME+4,-
		P2 = DUMP_NAME
	BLBC	R0,30$
	MOVZWL	IOSB,R0
	BLBC	R0,30$
	MOVW	IOSB+2,DUMP_NAME	; Length
30$:	RSB

;
; Misc routines for subprocess creation
;
;
; Recursively translate a logical name
;	Inputs
;	 address of descriptor of output buffer
;	 address of descriptor of input name
;
GET_TRAN:
	MOVL	4(SP),R2	; Output descriptor
	MOVQ	(R2),LOG_OUT	; Output descriptor
	MOVQ	@8(SP),LOG_IN	; Name to be translated
10$:	$TRNLOG_S LOGNAM = LOG_IN,-
		  RSLLEN = (R2),-
		  RSLBUF = LOG_OUT
	BLBC	R0,20$
	CMPL	R0,#SS$_NOTRAN
	BEQL	20$		; All done
	MOVQ	(R2),LOG_IN	; Result of the last try
	BRB	10$
20$:	CMPW	@4(R2),#27	; ESC-0 means PPF
	BNEQ	30$
	SUBL	#4,(R2)		; Get rid of PPF header
	ADDL	#4,4(R2)
30$:	RSB
;
;
; Get a mailbox unit number
;	Inputs
;	  address to return unit number
;	  channel number
;
MBX_UNIT:
	MOVL	8(SP),R1	; Channel
	$GETCHN_S CHAN = R1,-
		  PRIBUF = MBXCHAR
	MOVZWL	MBXCHARBUF+DIB$W_UNIT,@4(SP)
	RSB


;
; The relocateable portion of the code begins here
;
MOVE_BEG:
	SUBL3	#MOVE_BEG,SP,R7		; Relocation constant
	$CMKRNL_S ROUTIN = DELETE	; Go delete P0 before image activation
	BLBS	R0,10$
	RET
10$:	MOVL	@#CTL$AL_STACK+12,STACK_INI ; Save current stack base
	MOVL	@#CTL$GL_IMGHDRBF,IMGHDRBF_INI ; Save pointer for analimdmp
	TSTL	IMAGE			; Should we load an image
	BEQL	40$			; No
;
	ADDL	R7,IMAGE+4		; Relocate image name
	ADDL	R7,IMG_DEFAULT+4
	$CMEXEC_S ROUTIN = IMGACT	; IMGACT it in EXEC mode so we are
	BLBS	R0,30$			; able to restore privileges
	CMPL	R0,#RMS$_FNF
	BEQL	40$			; Treat FNF like /NOIMAGE
	RET
30$:	$IMGFIX_S			; Address fixups
;
40$:	$CMKRNL_S ROUTIN = RESET_VEC	; Reset any privileged library vectors
	BLBS	R0,45$
	RET
45$:	ADDL	R7,DEBUG+4		; Relocate DEBUG name
	ADDL	R7,DBG_DEFAULT+4
	MOVL	DEBUG_VA,DBG_RANGE	; First unallocated P0
	$IMGACT_S  NAME = DEBUG,-	; Merge in DEBUG
		   DFLNAM = DBG_DEFAULT,-
		   IMGCTL = #IAC$M_MERGE,-
		   INADR = DBG_RANGE,-
		   RETADR = DBG_RETADR,-
		   HDRBUF = DBG_HDRBUF
	BLBC	R0,50$
	$IMGFIX_S
;
	ADDL	R7,DMP_RAB+RAB$L_FAB	; Relocate file name stuff
	ADDL	R7,DMP_FAB+FAB$L_FNA
	ADDL	R7,DMP_FAB+FAB$L_DNA
	$OPEN FAB = DMP_FAB		; Open the dump file again
	BLBC	R0,50$
	$CONNECT RAB = DMP_RAB
	BLBS	R0,60$
50$:	RET
60$:	BSBW	RESTORE_MISC_VA		; Restore the misc VA
;
; Do original process address space
;
	MOVL	#4,DMP_RAB+RAB$L_BKT	; First data block
	MOVAB	MAP,R5			; Map pointer
70$:	MOVL	(R5)+,R2		; Page count
	BGEQ	80$
	BSBW	NEXT_MAP		; Nothing left in this map block
80$:	BNEQ	90$
	BRW	GET_DEBUG		; All done - go to DEBUG
90$:	BBC	#30,(R5),95$
	BRW	GET_P1			; Go restore P1
95$:	MOVL	(R5)+,DMP_RAB+RAB$L_UBF	; Starting VA
100$:	MULL3	#512,R2,R3		; Byte count
	CMPL	R3,#<127*512>		; Is it greater than maximum
	BLEQU	101$			; No
	MOVL	#<127*512>,R3
101$:	MOVL	DMP_RAB+RAB$L_UBF,CREATE_PAGE ; Set up to create the page
	ADDL3	R3,DMP_RAB+RAB$L_UBF,CREATE_PAGE+4
	DECL	CREATE_PAGE+4		; Top of range
	$CRETVA_S INADR = CREATE_PAGE,-
		  RETADR = CREATE_PAGE
	BLBS	R0,110$			; Were there any problems
	; Not owner of page
	SUBL3	CREATE_PAGE,CREATE_PAGE+4,R3 ; Created byte count - 1
	BNEQ	105$			; Any pages created?
	MOVL	#512,R3			; Skip one page
	BRB	115$			; Avoid the read
105$:	INCL	R3			; Make it byte count
110$:	MOVW	R3,DMP_RAB+RAB$W_USZ
	$READ RAB = DMP_RAB		; Read the dump page
	BLBC	R0,120$
115$:	ADDL	R3,DMP_RAB+RAB$L_UBF
	ASHL	#-9,R3,R3		; Page count
	ADDL	R3,DMP_RAB+RAB$L_BKT
	SUBL	R3,R2			; Remaining page count
	BGTR	100$
	BRW	70$
120$:	RET
;
GET_P1:
	MOVAB	IMG_HDRBUF,R0		; Normalize image header
	SUBL	R0,IMG_HDRBUF
	SUBL	R0,IMG_HDRBUF+4
	SUBL	R7,DMP_RAB+RAB$L_FAB	; and the RAB
	SUBL	#4,R5			; Reset map pointer
;
; Space is created and the code is relocated to the top of P0
; A P0 stack (one page) is also created
;
	$EXPREG_S PAGCNT = #<<MOVE_END-MOVE_BEG>+511/512>+1,-
		  RETADR = NEW_P0
	PUSHL	R5
	MOVC3	#MOVE_END-MOVE_BEG,MOVE_BEG,@NEW_P0
	MOVL	(SP)+,R5
	MOVAB	MAP,R0
	SUBL	R0,R5			; Normalize map pointer
	MOVL	NEW_P0,R0		; Address code was moved to
	JMP	<10$-MOVE_BEG>(R0)	; Relocate execution
;
10$:	SUBL3	#MOVE_BEG,R0,R7		; Relocation constant
	ADDL	R7,DMP_RAB+RAB$L_FAB
	MOVAB	MAP,R0
	ADDL	R0,R5			; Relocate map pointer
	MOVAB	IMG_HDRBUF,R0		; and image header
	ADDL	R0,IMG_HDRBUF
	ADDL	R0,IMG_HDRBUF+4
	MOVL	NEW_P0+4,SP		; Get stack out of the way of P1
	CALLS	#0,15$			; Create top frame for new stack
	$EXIT_S CODE = R0		; Get out with correct status
;
15$:	.WORD	0
	CLRL	(FP)			; Terminate frames
;
20$:	MOVL	(R5)+,R2		; Page count
	BGEQ	30$
	BSBW	NEXT_MAP		; We have finished this map block
30$:	BEQL	GET_DEBUG		; All done - go start DEBUG
	MOVL	(R5)+,DMP_RAB+RAB$L_UBF	; Starting VA
40$:	MOVL	DMP_RAB+RAB$L_UBF,CREATE_PAGE ; Set up to create the page
	MOVL	DMP_RAB+RAB$L_UBF,CREATE_PAGE+4
	$CRETVA_S INADR = CREATE_PAGE
	BLBC	R0,50$			; Not owner of page
	MOVW	#512,DMP_RAB+RAB$W_USZ	; One block
	$READ RAB = DMP_RAB
	BLBC	R0,50$
	INCL	DMP_RAB+RAB$L_BKT	; Next file block
	ADDL	#512,DMP_RAB+RAB$L_UBF	; Next page
	SOBGTR	R2,40$
	BRB	20$			; Go do next run of pages
;
50$:	RET
;
GET_DEBUG:
	$CMKRNL_S ROUTIN = FIX_STACK	; Put stack limits back
	$CMKRNL_S ROUTIN = FIX_IMGHDRBF	; Restore CTL$GL_IMGHDRBF
	$CMKRNL_S ROUTIN = RESET_PRIV	; Eliminate the image privileges
	TSTL	IMAGE			; Was an image loaded
	BNEQ	10$
	MOVL	THIS_HDR,DBG_ARG+12	; Let DEBUG try to look at this image
	MOVL	THIS_HDR+4,DBG_ARG+16	; just to keep it happy
	BRB	20$
10$:	MOVL	IMG_HDRBUF,DBG_ARG+12	; Arguments to start DEBUG
	MOVL	IMG_HDRBUF+4,DBG_ARG+16
20$:	MOVL	DBG_RETADR,R0
	MOVAB	@8(R0)[R0],DEBUG_BEG	; Find debug transfer address
;
; Display the original cause of the dump
;
	MOVL	MISC+IMGDMP$L_AP,R2
	BISL	#^XF@16,@4(R2)		; Add flags to display all message fields
	$PUTMSG_S MSGVEC = @4(R2)	; Ignore errors
	BICL	#^XF@16,@4(R2)		; Clear the flags

	MOVL	MISC+IMGDMP$L_SP,SP	; Restore registers
	MOVL	MISC+IMGDMP$L_AP,AP
	MOVQ	MISC+IMGDMP$L_R0,R0
	MOVQ	MISC+IMGDMP$L_R2,R2
	MOVQ	MISC+IMGDMP$L_R4,R4
	MOVQ	MISC+IMGDMP$L_R6,R6
	MOVQ	MISC+IMGDMP$L_R8,R8
	MOVQ	MISC+IMGDMP$L_R10,R10
;
; Build a phony SS$_DEBUG frame
;
	MOVL	4(AP),R0		; Real signal array
	MOVL	(R0),R1
	PUSHL	(R0)[R1]		; PC, PSL
	PUSHL	-4(R0)[R1]
	PUSHL	#SS$_DEBUG
	PUSHL	#3
	MOVL	SP,R1
	PUSHL	MISC+IMGDMP$L_R1
	PUSHL	MISC+IMGDMP$L_R0
	CLRL	-(SP)
	CLRL	12(FP)			; Make this final frame in case we need it
	PROBER	#0,#4,@MISC+IMGDMP$L_FP
	BEQL	25$			; The FP is no good
	MOVL	MISC+IMGDMP$L_FP,FP	; Real FP
25$:	PUSHL	FP
	MOVL	FP,R0
30$:	PROBER	#0,#4,12(R0)		; In case of a corrupted stack
	BEQL	40$
	MOVL 	12(R0),R0		; Trace back FP
	BEQL	40$			; End of the chain
	MOVL	R0,(SP)			; This is a good one	
	BRB	30$
40$:	PUSHL	#4
	PUSHL	SP			; Mechanism array
	PUSHL	R1			; Signal array
	PUSHL	#2
	MOVL	SP,AP			; Phony SS$_DEBUG frame
	CALLG	(AP),50$		; DEBUG likes to see the resulting frame
50$:	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	MOVL	AP,DBG_ARG+4
	MOVAB	DBG_ARG,AP
	MOVL	SS$_NORMAL,R0		; DEBUG is used to this
	JMP	@DEBUG_BEG
;
;
;
; Get a new map block
;
NEXT_MAP:
	PUSHL	DMP_RAB+RAB$L_UBF	; Save current VA
	MOVW	#512,DMP_RAB+RAB$W_USZ	; One block
	MOVAB	MAP,DMP_RAB+RAB$L_UBF
	$READ	RAB = DMP_RAB
	BLBC	R0,10$
	INCL	DMP_RAB+RAB$L_BKT	; Next block
	MOVL	(SP)+,DMP_RAB+RAB$L_UBF	; Restore VA
	MOVAB	MAP,R5
	MOVL	(R5)+,R2		; Get next count
	RSB
;
10$:	RET				; Error - give up

;
; Misc privileged routines
;
;
;
; Delete all of P0
;
DELETE:
	.WORD	^M<R2,R6>
	JSB 	@#EXE$RESETVEC		; Reset privileged library stuff
	$DELTVA_S INADR = ALL_P0
;
; Deallocate all image control blocks that describe currently activated images
;
	MOVAQ	G^IAC$GL_ICBFL,R2	; R2 = address of free list 

	MOVAQ	G^IAC$GL_IMAGE_LIST,R1	; R1 = listhead	of ICBS
5$:	REMQUE	@(R1),R6		; Remove next entry
	BVS	10$			; List empty - all done
	INSQUE	(R6),@4(R2)		; Insert at end of free list
	BRB	5$			; Go back for more

10$:	RET
;
; Fix up the stack limit
;
FIX_STACK:
	.WORD	0
	MOVL	STACK_INI,@#CTL$AL_STACK+12
	RET
;
; Fix up CTL$GL_IMGHDRBF
;
FIX_IMGHDRBF:
	.WORD	0
	MOVL	IMGHDRBF_INI,@#CTL$GL_IMGHDRBF
	RET
;
; Reset privileges to get rid of image privileges
;
RESET_PRIV:
	.WORD	0
	MOVL	@#CTL$GL_PHD,R0
	CLRQ	PHD$Q_IMAGPRIV(R0)	; No more authorized image provs
	MCOML	@#CTL$GQ_PROCPRIV+4,-(SP) ; Complement of the permanent privileges
	MCOML	@#CTL$GQ_PROCPRIV,-(SP) 
	MOVL	SP,R1
	$SETPRV_S ENBFLG = #0,-
		  PRVADR = (R1)
	RET
;
; Reset privileged library vectors
;
RESET_VEC:
	.WORD	^M<R2,R6>
	JSB 	@#EXE$RESETVEC		; Reset privileged library stuff
	MOVL	#SS$_NORMAL,R0
	RET
;
; IMGACT the original image and then reset the image privileges
;
IMGACT:
	.WORD	0
	$IMGACT_S  NAME = IMAGE,-	; Activate original image
		   DFLNAM = IMG_DEFAULT,-
		   RETADR = IMG_RETADR,-
		   HDRBUF = IMG_HDRBUF
	PUSHL	R0
	MOVQ	#<1@PRV$V_CMKRNL>!<1@PRV$V_CMEXEC>,-(SP) ; Restore privileges
	MOVL	SP,R1
	$SETPRV_S  ENBFLG = #1,-
		   PRVADR = (R1)
	MOVQ	(SP)+,R0		; Clean up the stack
	POPL	R0
	RET

;
; Routines to handle misc address space
;
;
; A table is used
;	count of table entries
;	longword offset of size in MISC
;	longword offset of file block in MISC
;	longword offset of VA in MISC_VA
;
; Build table of VA's of misc pieces of address space
;
BLD_MISC_VA:
	MOVL	MISC+IMGDMP$L_FREE_P0,R0 ; Start here
	MOVAB	MISC_CONTROL,R1		; Table address
	MOVL	(R1)+,R2		; Number of entries
10$:	MOVL	(R1),R3			; Offset for size
	MOVL	MISC[R3],R3		; Size
	BEQL	20$			; Nothing saved for this one
	MOVL	8(R1),R4		; Offset for VA
	MOVL	R0,MISC_VA[R4]		; Save VA
	ASHL	#9,R3,R3		; Page count -> bytes
	ADDL	R3,R0			; New VA
20$:	ADDL	#12,R1			; Next entry
	SOBGTR	R2,10$
	MOVL	R0,DEBUG_VA		; Start DEBUG at the end
	RSB
;
; Restore misc VA
;
RESTORE_MISC_VA:
	MOVAB	MISC_CONTROL,R6		; Table address
	MOVAB	MISC_VA,R7
	MOVAB	MISC,R8
	MOVL	(R6)+,R5		; Number of entries
10$:	MOVL	(R6),R2			; Offset of area size
	MOVL	(R8)[R2],R2		; Size
	BEQL	20$			; Nothing there
	MOVL	8(R6),R3		; Offset of VA
	MOVL	(R7)[R3],R3		; VA
	MOVL	4(R6),R4		; Offset of file block
	MOVL	(R8)[R4],R4		; File block
	BSBB	READ_ONE_VA
20$:	ADDL	#12,R6			; Next entry
	SOBGTR	R5,10$
	RSB
;
;
; Read a piece of address space
;	R2 = page count
;	R3 = starting VA
;	R4 = starting file block
;
READ_ONE_VA:
	MOVL	R4,DMP_RAB+RAB$L_BKT
10$:	MOVL	R3,DMP_RAB+RAB$L_UBF	; Address
	MOVL	R3,CREATE_PAGE		; Create the address range
	MOVL	R2,R4			; Remaining page count
	CMPL	R4,#<127*512>		; Compare with maximum
	BLEQU	20$
	MOVL	#127,R4			; Use maximum
20$:	ASHL	#9,R4,R4
	MOVW	R4,DMP_RAB+RAB$W_USZ	; Byte count
	DECL	R4
	ADDL3	R4,R3,CREATE_PAGE+4
	$CRETVA_S INADR = CREATE_PAGE
	BLBC	R0,50$
	$READ	RAB = DMP_RAB
	BLBC	R0,50$
	INCL R4
	ADDL	R4,R3			; Update address
	ASHL	#-9,R4,R4		; Get back the page count
	ADDL	R4,DMP_RAB+RAB$L_BKT
	SUBL	R4,R2			; Any pages left?
	BGTR	10$			; Continue
	RSB
50$:	RET				; Error

;
; Data
;
;
STACK_INI:				; Stack limit before $IMGACT
	.LONG	0
;
IMGHDRBF_INI:				 ; CTL$GL_IMGHDRBF before our IMGACTs
	.LONG	0
;
ALL_P0:	.LONG	0,^X3FFFFFFF		; Range to delete all of P0
;
DBG_ARG:				; Argument list to call DEBUG
	.LONG	6,0,0,0,0,0,CLI$M_DBGEXCP
;
IMG_DEFAULT:				; Default name for images
	.ASCID	/SYS$SYSTEM:.EXE/
;
DBG_DEFAULT:				; Default name for DEBUG
	.ASCID	/SYS$LIBRARY:.EXE/
;
IMAGE:	.LONG	0,0			; Descriptor for image name
;
IMG_RETADR:				; Address range of image
	.BLKL	2
;
IMG_HDRBUF:				; IMGACT buffer for image
	.BLKB	512
;
DBG_RANGE:				; Range to merge in DEBUG
	.LONG	0,^X3FFFFFFF
;
DEBUG:	.ASCID	/DEBUG/			; Name of DEBUG
;
DBG_RETADR:				; Address range used by DEBUG
	.BLKL	2
;
DBG_HDRBUF:				; IMGACT buffer for DEBUG
	.BLKB	512
;
DEBUG_BEG:				; Transfer address for DEBUG
	.BLKL	1
;
MAP:	.BLKB	512			; Address map buffer
;
IMGHDR::				; First block of image header
	.BLKB	512
;
	.ALIGN	LONG
;
DMP_FAB: $FAB	FAC = <BIO,GET>,-
		FNA = NAME_BUFFER,-
		DNA = DFLNAM,-
		DNS = 4
;
DMP_RAB: $RAB	FAB = DMP_FAB,-
		USZ = 512,-
		ROP = BIO
DFLNAM:	.ASCII	/.DMP/			; Default name for dumps
;
DUMP_NAME: 				; Descriptor for name of dump file
	.LONG	64
	.ADDRESS NAME_BUFFER
NAME_BUFFER:
	.BLKB	64
;
NEW_P0:	.BLKL	2			; P0 space for relocating code
;
MISC::	.BLKB	512			; Buffer for misc data block
;
CREATE_PAGE:				; Address range for a page to be created
	.BLKL	2
;
IMAGE_DESC:				; Desriptor for image name
	.LONG	NAM$C_MAXRSS
	.ADDRESS 1$
1$:	.BLKB	NAM$C_MAXRSS
;
DEBUG_VA:				; VA for DEBUG
	.LONG	0
;
MISC_VA::				; VA's of misc data areas
	.BLKL	IMGMOV$C_LENGTH
;
MISC_CONTROL:				; Description of misc address space
	.LONG	<1$ - MISC_CONTROL>/12
	.LONG	IMGDMP$L_KSTK_SIZ/4	; Kernel stack
	.LONG	IMGDMP$L_KSTK_BLK/4
	.LONG	IMGMOV$L_KSTK/4
	.LONG	IMGDMP$L_ESTK_SIZ/4	; Exec stack
	.LONG	IMGDMP$L_ESTK_BLK/4
	.LONG	IMGMOV$L_ESTK/4
	.LONG	IMGDMP$L_VECPAG_SIZ/4	; Vector page
	.LONG	IMGDMP$L_VECPAG_BLK/4
	.LONG	IMGMOV$L_VECPAG/4
	.LONG	IMGDMP$L_PIO_SIZ/4	; PIO (RMS) area
	.LONG	IMGDMP$L_PIO_BLK/4
	.LONG	IMGMOV$L_PIO/4
	.LONG	IMGDMP$L_IMGCTX_SIZ/4	; Image activator context pages
	.LONG	IMGDMP$L_IMGCTX_BLK/4
	.LONG	IMGMOV$L_IMGCTX/4
	.LONG	IMGDMP$L_USRCTX_SIZ/4	; User writeable context pages
	.LONG	IMGDMP$L_USRCTX_BLK/4
	.LONG	IMGMOV$L_USRCTX/4
1$:
;
THIS_HDR:				; Pointers to this image's header buffer
	.BLKL	2
;
IMGNAMESS:				; ESS from open of image
	.BLKB	NAM$C_MAXRSS
;
CTRY_DISABL:				; Mask to disable control-Y
	.LONG	LIB$M_CLI_CTRLY
;
OLD_CTRL:				; Control-Y state
	.LONG	0
;
INP_CHAN:				; SYS$INPUT channel
	.LONG 	0
;
SUBP_PID:				; PID of subprocess
	.LONG	0
;
MOVE_END:				; End of code to be relocated
;
;
; Data after this point is not relocated
;
;
CLI_PARAMETER:				; Get the command line parameter
	.ASCID	/P1/
;
CLI_IMAGE:				; The /IMAGE qualifier
	.ASCID	/IMAGE/
;
CLI_NOIMAGE:				; The /NOIMAGE qualifier
	.ASCID	/NOIMAGE/
;
SYS$INPUT:				; Stings for TRNLOG
	.ASCID	/SYS$INPUT/
SYS$OUTPUT:
	.ASCID	/SYS$OUTPUT/
SYS$ERROR:
	.ASCID	/SYS$ERROR/
;
INPUT_TRN:				; Translation of initial SYS$INPUT
	.LONG	64
	.ADDRESS SYS$INPUT_TRN
SYS$INPUT_TRN:
	.BLKB	64
;
INPUT:	.LONG	64			; Output strings from TRNLOG
	.ADDRESS 1$
1$:	.BLKB	64
OUTPUT:	.LONG	64
	.ADDRESS 1$
1$:	.BLKB	64
ERROR:	.LONG	64
	.ADDRESS 1$
1$:	.BLKB	64
;
INP_MBX:				; Channel for communications mailbox
	.LONG	0
;
TERM_MBX:				; Channel for termination mailbox
	.LONG	0
;
INP_MBX_UNIT:				; Unit number for communications mailbox
	.LONG	0
;
TERM_MBX_UNIT:				; Unit number for termination mailbox
	.LONG	0
;
INPFAO:	.ASCID	<27><27>/_MBA!5ZW:/	; FAO string for mailbox name + ESCs
;
INP_MBX_NAM:				; Communications mailbox name
	.LONG	14
	.ADDRESS 1$
1$:	.BLKB	16
;
ANAL_IMG:				; Name of this image for CREPRC
	.ASCID	/SYS$SYSTEM:ANALIMDMP.EXE/
;
TERM_MSG:				; Termination mailbox message
	.BLKB	10
;
LOG_OUT:				; Descriptor for output logical name
	.BLKL	2
;
LOG_IN:					; Descriptor for input logical name
	.BLKL	2
;
MBXCHAR:
	.LONG	DIB$K_LENGTH
	.ADDRESS MBXCHARBUF
MBXCHARBUF:				; Buffer for malbox characteristics
	.BLKB	DIB$K_LENGTH
;
IOSB:	.BLKL	2			; IOSB for mailbox use
;	
REAL_INPUT:				; Real SYS$INPUT when in subprocess
	.LONG	64
	.ADDRESS 1$
1$:	.BLKB	64
;
	.ALIGN	LONG
;
OUTFAB:	$FAB 	FNM = <SYS$OUTPUT>,-	; FAB for SYS$OUTPUT
		FAC = <GET,PUT>,-
		FOP = <CIF>
;
OUTRAB:	$RAB	FAB = OUTFAB
;
IMGFAB:	$FAB	DNM = <.EXE>,-
		NAM = IMGNAM
;
IMGNAM:	$NAM	ESS = NAM$C_MAXRSS,-
		ESA = IMGNAMESS
;
CRE_SUB_MSG: .ASCID <13><10><13><10>/Creating a subprocess/
;
COND_MSG:    .ASCID <13><10>/Condition signalled to take dump:/
;
	.END	ANALIMDMP
