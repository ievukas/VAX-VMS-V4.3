	.TITLE	BAS$MAT_SUB
	.IDENT	/1-016/			; File: BASMATSUB.MAR Edit: DG1016

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY: BASIC code support
;
; ABSTRACT:
;
;	This module subtracts the second input array from the first input
;	array and stores the result in a third array.  All three arrays
;	may be of any dtype except that float and double may not
;	be mixed.
;
; ENVIRONMENT: User Mode, AST Reentrant
;
;--
; AUTHOR: R. Will, CREATION DATE: 22-Jun-79
;
; MODIFIED BY:
;++
; 1-001	- Original
; 1-002 - Set IV bit in entry mask.  RW  2-Oct-79
; 1-003 - Add support for byte, g & h floating.  PLL 22-Sep-81
; 1-004 - Change shared external references to G^ RNH 25-Sep-81
; 1-005 - Substitute a macro for the calls to the array fetch and store
;	  routines.  This should speed things up.  PLL 9-Nov-81
; 1-006 - STORE macro must handle g & h floating.  PLL 11-Nov-81
; 1-007 - Reserve enough space on the stack for an hfloat source.  PLL 17-Nov-81
; 1-008 - Correct an error message.  
; 	- Correct a run-time expression in the FETCH and STORE macros.
;	  PLL 20-Jan-82
; 1-009 - Correct FETCH, STORE again.  PLL 23-Feb-82
; 1-010 - Don't list macro expansions.  PLL 16-Mar-82
; 1-011 - Fix storing of g and h floats (use the right registers).  PLL 13-Apr-82
; 1-012 - Add support for arrays of descriptors.  Also remove FETCH and
;	  STORE macros - they are now in S.MLB.  LEB 28-JUN-1982.
; 1-013 - Change own storage to stack storage.  LEB 9-Jul-1982
; 1-014 - Allow gfloat result to be stored in a double destination, and
;	  vice versa.  PLL 7-Oct-1982
; 1-015 - Use G^ for ALL externals.  SBL 16-Nov-1982
; 1-016 - BYTE destination must use STORE_BYTE.  DG 10-Jan-1984
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

	$DSCDEF					; define descriptor offsets
	$SFDEF					; use to get scale

;
; EXTERNAL DECLARATIONS:
;

	.DSABL	GBL				; Prevent undeclared
						;  symbols from being
						;  automatically global.
	.EXTRN	BAS$K_ARGDONMAT			; signalled if all 3 blocks
						;  not present in array desc
						;  or dimct = 0
	.EXTRN	BAS$K_DATTYPERR			; signalled if dtype of array
						; isn't word long float double
	.EXTRN	BAS$K_MATDIMERR			; signalled if # of dims on
						;  source arrays don't agree
	.EXTRN	BAS$K_ARRMUSSAM			; signalled if upper and lower
						;  bnds not same on src arrays
	.EXTRN	BAS$STO_FA_B_R8			; array element store for byte
	.EXTRN	BAS$STO_FA_W_R8			; array element store for word
	.EXTRN	BAS$STO_FA_L_R8			; array element store for long
	.EXTRN	BAS$STO_FA_F_R8			; array element store - float
	.EXTRN	BAS$STO_FA_D_R8			; array element store - double
	.EXTRN	BAS$STO_FA_G_R8			; array element store - gfloat
	.EXTRN  BAS$STO_FA_H_R8			; array element store - hfloat
	.EXTRN	BAS$FET_FA_B_R8			; array element fetch - byte
	.EXTRN	BAS$FET_FA_W_R8			; array element fetch - word
	.EXTRN	BAS$FET_FA_L_R8			; array element fetch - long
	.EXTRN	BAS$FET_FA_F_R8			; array element fetch - float
	.EXTRN	BAS$FET_FA_D_R8			; array element fetch - double
	.EXTRN	BAS$FET_FA_G_R8			; array element fetch - gfloat
	.EXTRN	BAS$FET_FA_H_R8			; array element fetch - hfloat
	.EXTRN	MTH$DINT_R4			; cvt dbl to truncated dbl
	.EXTRN	BAS$MAT_REDIM			; check if redimensioning of
						;  dest array is necessary, if
						;  so, do it
	.EXTRN	BAS$$SCALE_R1			; scale for double procision
	.EXTRN	BAS$$STOP			; signal fatal errors
	.EXTRN	BAS$FETCH_BFA
	.EXTRN	BAS$STORE_BFA

;
; MACROS:
;

;	$BAS$MAT_SUB	subtract loop algorithm,  see next page
;	FETCH		fetch an element from an array
;	STORE		store an element into an array

;
; EQUATED SYMBOLS:
;

	lower_bnd2 = 0				; stack offset for temp
	lower_bnd1 = 4				; stack offset for temp
	upper_bnd1 = 8				; stack offset for temp
	save_src2 = 12				; stack offset for temp
	value_desc = 28				; output descriptor
	str_len = 28				; length field within desc
	dtype = 30				; data type field in desc
	class = 31				; class field within desc
	pointer = 32				; pointer to data
	data = 36				; data
	dsc$l_l1_1 = 24				; desc offset if 1 sub
	dsc$l_u1_1 = 28				; desc offset if 1 sub
	dsc$l_l1_2 = 28				; desc offset if 2 sub
	dsc$l_u1_2 = 32				; desc offset if 2 sub
	dsc$l_l2_2 = 36				; desc offset if 2 sub
	dsc$l_u2_2 = 40				; desc offset if 2 sub

;
; OWN STORAGE:
;


;
; PSECT DECLARATIONS:
;
	.PSECT _BAS$CODE PIC, USR, CON, REL, LCL, SHR, -
			EXE, RD, NOWRT, LONG



;+
; This macro contains the looping mechanism for accessing all elements of
; an array.  It also contains all the logic for all the combinations of data
; types and scaling.  A macro is used to make it easy to maintain the parallel
; code for all the different data types.
;-

	.MACRO	$BAS$MAT_SUB src1_dtype, src2_dtype ; subtract algorithm

;+
; Loop through all the rows.  Row and column upper and lower bounds have been
; initialized on the stack.
;-

LOOP_1ST_SUB'src1_dtype'src2_dtype':
	MOVL	lower_bnd2(SP), R11		; R11 has 2nd lower bound

;+
; Loop through all the elements (columns) of the current row.  Column lower
; bound is initialized in R11.  Column upper bound is on the stack.
; Distinguish array by data type so that the correct fetch routine can 
; retrieve the data, the correct subtract can be done and the correct
; store routine can be called.
;-

LOOP_2ND_SUB'src1_dtype'src2_dtype':

;+
; Get the data from the second source array - the subtrahend
;-

	MOVL	src2_matrix(AP), R0		; pointer to 2nd src array
	MOVL	lower_bnd1(SP), R1		; current row
	MOVL	R11, R2				; current col
	FETCH	'src2_dtype'			; fetch data from src2 array
	MOV'src2_dtype'	R0, save_src2(SP)	; store the 2nd array element

;+
; Get the data from the first source array - the minuend
;-

	MOVL	src1_matrix(AP), R0		; pointer to 1st src array
	MOVL	lower_bnd1(SP), R1		; current row
	MOVL	R11, R2				; current col
	FETCH	'src1_dtype'			; fetch data from src1 array

;+
; If the data types of the 2 source arrays is the same, do the arithmetic
; in that data type.  Else convert the data to a common type and subtract.
; If gfloat and double operands are mixed, they must be promoted to hfloat
; for the subtract.
;-

	.IF	IDN	src1_dtype, src2_dtype	; src arrays are
						; same data type
	SUB'src1_dtype'2	save_src2(SP), R0
						; sub the source elements
	BSBW	DEST_CASE_'src1_dtype'		; go to store in dest
	.IFF					; src arrays different dtype
	.IF	IDN	src1_dtype, H		; source 1 is hfloat
	CVT'src2_dtype'H	save_src2(SP), R4
						; cvt array2 to hfloat 
	SUBH2	R4, R0				; subtract
	BSBW	DEST_CASE_H			; cvt to dest type	
	.IFF
	.IF	IDN	src2_dtype, H		; source 2 is hfloat
	CVT'src1_dtype'H	R0, R0		; cvt src1 to hfloat
	SUBH2	save_src2(SP), R0		; subtract
	BSBW	DEST_CASE_H			; cvt to dest type
	.IFF
	.IF	IDN	src1_dtype, G		; source 1 is gfloat
	.IF	DIF	src2_dtype, D		; don't mix gfloat & dbl
	CVT'src2_dtype'G	save_src2(SP), R2
						; cvt src2 to gfloat
	SUBG2	R2, R0				; subtract
	BSBW	DEST_CASE_G			; cvt to dest type
	.IFF					; gfloat & dbl
	CVTDH	save_src2(SP), R4		; promote src2 to hfloat
	CVTGH	R0, R0				; promote src1 to hfloat
	SUBH2	R4, R0				; subtract
	BSBW	DEST_CASE_H			; cvt to dest type
	.ENDC
	.IFF
	.IF	IDN	src2_dtype, G		; source 2 is gfloat
	.IF	DIF	src1_dtype, D		; & src1 not dbl
	CVT'src1_dtype'G	R0, R0		; cvt src1 to gfloat
	SUBG2	save_src2(SP), R0		; subtract
	BSBW	DEST_CASE_G			; cvt to dest type
	.IFF					; gfloat & dbl
	CVTGH	save_src2(SP), R4		; promote src2 to hfloat
	CVTDH	R0, R0				; promote src1 to hfloat
	SUBH2	R4, R0				; subtract
	BSBW	DEST_CASE_H
	.ENDC
	.IFF
	.IF	IDN	src1_dtype, D		; source 1 is double
	CVT'src2_dtype'D	save_src2(SP), save_src2(SP)
						; cvt array2 to double & save
	MOVD	R0, -(SP)			; save source1
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
						; call a BLISS routine because
						; the frame offsets are only
						; defined for BLISS
	MULD2	save_src2+8(SP), R0		; scale 2nd element (+8 becaus
						;  src1 is saved on stack)
	JSB	G^MTH$DINT_R4			; integerize
	SUBD3	R0, (SP)+, R0			; sub 1st element & scaled 2nd
	BSBW	DEST_CASE_D			; cvrt double dif to dest type
	.IFF					; 1st array not double
	.IF	IDN	src2_dtype, D		; is 2nd src double
	CVT'src1_dtype'D	R0, -(SP)	; yes, make src1 double & save
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
						; call a BLISS routine because
						; the frame offsets are only
						; defined for BLISS
	MULD2	(SP)+, R0			; scale, (+8 because src2 is
						;  double and saved on stack
	JSB	G^MTH$DINT_R4			; integerize
	SUBD2	save_src2(SP), R0		; compute the difference
	BSBW	DEST_CASE_D			; cvrt double dif to dest type
	.IFF					; no double operands try float
	.IF	IDN	src1_dtype, F		; is 1st element float
	CVT'src2_dtype'F	save_src2(SP), R1 ; make 2nd element float
	SUBF2	R1, R0				; subtract
	BSBW	DEST_CASE_F			; cvrt float diff to dest type
	.IFF					; 1st array not float
	.IF	IDN	src2_dtype, F		; is 2nd array float
	CVT'src1_dtype'F	R0, R0		; yes-make 1st element float
	SUBF2	save_src2(SP), R0		; subtract
	BSBW	DEST_CASE_F			; cvrt float diff to dest type
	.IFF					; no double or float, try long
	.IF	IDN	src1_dtype, L		; is 1st array long
	CVT'src2_dtype'L	save_src2(SP), R1 ; make 2nd element long
	SUBL2	R1, R0				; subtract
	BSBW	DEST_CASE_L			; cnvrt long diff to dest type
	.IFF					
	.IF	IDN	src2_dtype, L		; src2 is long
	CVT'src1_dtype'L	R0, R0		; cvt src1 to long 
	SUBL2	save_src2(SP), R0		; subtract
	BSBW	DEST_CASE_L			; cnvrt long diff to dest type
	.IFF
	.IF	IDN	src1_dtype, W		; src1 is word
	CVT'src2_dtype'W	save_src2(SP), R1 ; cvt src2 to word
	SUBW2	R1, R0				; subtract
	BSBW	DEST_CASE_W			; cvt to dest type
	.IFF
	.IF	IDN	src2_dtype, W		; src2 is word
	CVT'src1_dtype'W	R0, R0		; cvt src1 to word
	SUBW2	save_src2(SP), R0		; subtract
	BSBW	DEST_CASE_W			; cvt to dest type
	.IFF
	.IF	IDN	src1_dtype, B		; src1 is byte
	CVT'src2_dtype'B	save_src2(SP), R1 ; cvt src2 to byte
	SUBB2	R1, R0				; subtract
	BSBW	DEST_CASE_B			; cvt to dest type
	.IFF
	CVT'src1_dtype'B	R0, R0		; cvt src1 to byte
	SUBB2	save_src2(SP), R0		; subtract
	BSBW	DEST_CASE_B
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC
	.ENDC

;+
; Have stored that element.  Now see if it was the last column.  If not,
; continue with the next column.  Otherwise continue to next row.
;-

	INCL	R11				; get next column
	CMPL	R11, R9				; see if last column done
	BGTR	5$
	BRW	LOOP_2ND_SUB'src1_dtype'src2_dtype' ; no, continue inner loop

;+
; Have completed entire row.  See if it was the last row.  If not,
; continue with next row.
;-

5$:	INCL	lower_bnd1(SP)			; get next row
	CMPL	lower_bnd1(SP), upper_bnd1(SP)	; see if last row done
	BGTR	10$
	BRW	LOOP_1ST_SUB'src1_dtype'src2_dtype' ; no, continue outer loop

10$:	RET					; yes, finished

	.ENDM

	.SBTTL	BAS$MAT_SUB  - subtract 2 arrays giving a third
;++
; FUNCTIONAL DESCRIPTION:
;
;	Subtract the second source array from the first source array
;	giving a third.  Signal an error if the 2 arrays to be
;	subtracted do not have the same number of dimensions and the same
;	upper and lower bounds for those dimensions.  Redimension the output
;	array to have the same upper bounds as the input arrays.
;	Initialize all the necessary
;	looping	information on the stack.  Conversions may have to be done
;	so that the sources are the same data type, so divide
;	the looping portion according to the data types.  Conversion to the
;	correct destination data type will be done by a JSB to a routine,
;	instead of multiplying the number of possible combinations by 4.
;
; CALLING SEQUENCE:
;
;	CALL BAS$MAT_SUB (src1_array.rx.da, src2_array.rw.da, dest_matrix.wx.da)
;
; INPUT PARAMETERS:
;
	src1_matrix = 4
	src2_matrix = 8
;
; IMPLICIT INPUTS:
;
;	Scale from the callers frame to scale double precision.
;
; OUTPUT PARAMETERS:
;
	dest_matrix = 12
;
; IMPLICIT OUTPUTS:
;
;	NONE
;
; FUNCTION VALUE:
; COMPLETION CODES:
;
;	NONE
;
; SIDE EFFECTS:
;
;	This routine calls the redimensioning routine and the array element
;	fetch and store routines and therefore may signal any of their errors.
;	It may also signal any of the errors listed in the externals section.
;	It may also cause the destination array to have different dimensions.
;
;--

	.ENTRY BAS$MAT_SUB, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11,IV>

;+
;	REGISTER USAGE
;	R0 - R8 destroyed by store routines
;	R9	upper bound for 2nd subscript
;	R10	pointer to dest array descriptor
;	R11	current value of 2nd subscript
;-

;+
; Put routine arguments into registers for ease of use.
; If block 2 of array descriptor (multipliers) is not present then error.
;-

	MOVL	src1_matrix(AP), R2		; ptr to src1 array descr
	BBC	#DSC$V_FL_BOUNDS, DSC$B_AFLAGS(R2), ERR_ARGDONMAT
						; exit if block 3 not
						; present in descriptor
	MOVL	src2_matrix(AP), R3		; ptr to src2 array descr
	BBC	#DSC$V_FL_BOUNDS, DSC$B_AFLAGS(R3), ERR_ARGDONMAT
						; exit if block 3 not
						; present in descriptor
	MOVL	dest_matrix(AP), R10		; ptr to dest descriptor
	CLRQ	-(SP)
	CLRQ	-(SP)
	CLRQ	-(SP)
	CLRQ	-(SP)				; reserve space to save src1
	CLRQ	-(SP)				;  src1 may be hfloat
;+
; Set up limits for looping through all elements
;-

	CMPB	DSC$B_DIMCT(R2), #1		; determine # of subscripts
	BEQLU	INIT_ONE_SUB			; 1 sub, go init
	BGTRU	INIT_TWO_SUBS			; >=2 subs, go init
						; 0 subs, fall into error proc

ERR_ARGDONMAT:
	PUSHL	#BAS$K_ARGDONMAT		; signal error, 0 for dimct
	CALLS	#1, G^BAS$$STOP			; or block 2 or 3 absent

;+
; There is only 1 subscript.  Redimension the destination array.
; Make both upper and lower bound for 2nd
; subscript a 1.  A second subscript will be passed to and ignored by the
; store routine.  Put bounds for 1st subscript on stack.
;-

INIT_ONE_SUB:
	CMPB	#1, DSC$B_DIMCT(R3)		; do src arrays have same
						;  number of dimensions
	BNEQU	ERR_MATDIMERR			; no, error
	CMPB	dsc$l_u1_1(R2), dsc$l_u1_1(R3)	; do src arrays have the same
						;  upper bounds
	BNEQU	ERR_ARRMUSSAM			; no, error
	CMPB	dsc$l_l1_1(R2), dsc$l_l1_1(R3)	; do src arrays have the same
						;  lower bounds
	BNEQU	ERR_ARRMUSSAM			; no, error
	PUSHL	dsc$l_u1_1(R3)			; get bound for redim
	PUSHL	R10				; pointer to dest array desc
	CALLS	#2, G^BAS$MAT_REDIM		; redimension the dest
	PUSHL	dsc$l_u1_1(R3)			; 1st upper bound
	PUSHL	dsc$l_l1_1(R3)			; 1st lower bound
	BGTR	1$				; not 0 or neg, do 2nd sub
	MOVL	#1, (SP)			; don't alter col 0
1$:	PUSHL	#1				; dummy 2nd upper bound
	MOVL	#1, R9				; dummy 2nd lower bound
	BRB	SEPARATE_DTYPES			; go loop

ERR_MATDIMERR:
	PUSHL	#BAS$K_MATDIMERR		; Signal error, src arrays
	CALLS	#1, G^BAS$$STOP			;  don't have same # dimensns

ERR_ARRMUSSAM:
	PUSHL	#BAS$K_ARRMUSSAM		; Signal error, src arrays
	CALLS	#1, G^BAS$$STOP			;  same bounds

;+
; There are 2 subscripts.  Check and redimension the destination array if
; necessary.  Put the upper bound for both subscripts on the
; stack and make sure that the lower bound for both subscripts will start
; at 1 (do not alter row or col 0)
;-

INIT_TWO_SUBS:
	CMPB	#2, DSC$B_DIMCT(R3)		; do src arrays have same
						;  number of dimensions
	BNEQU	ERR_MATDIMERR			; no, error
	CMPB	dsc$l_u1_2(R2), dsc$l_u1_2(R3)	; do src arrays have the same
						;  1st upper bounds
	BNEQU	ERR_ARRMUSSAM			; no, error
	CMPB	dsc$l_l1_2(R2), dsc$l_l1_2(R3)	; do src arrays have the same
						;  1st lower bounds
	BNEQU	ERR_ARRMUSSAM			; no, error
	CMPB	dsc$l_u2_2(R2), dsc$l_u2_2(R3)	; do src arrays have the same
						;  2nd upper bounds
	BNEQU	ERR_ARRMUSSAM			; no, error
	CMPB	dsc$l_l2_2(R2), dsc$l_l2_2(R3)	; do src arrays have the same
						;  2nd lower bounds
	BNEQU	ERR_ARRMUSSAM			; no, error
	PUSHL	dsc$l_u2_2(R3)			; 2nd upper bound
	PUSHL	dsc$l_u1_2(R3)			; 1st upper bound
	PUSHL	R10				; dest array pointer
	CALLS	#3, G^BAS$MAT_REDIM		; redimension destination
	PUSHL	dsc$l_u1_2(R3)			; 1st upper bound
	PUSHL	dsc$l_l1_2(R3)			; 1st lower bound
	BGTR	1$				; not row 0 or neg, do cols
	MOVL	#1, (SP)			; start with row 1
1$:	MOVL	dsc$l_u2_2(R3), R9		; 2nd upper bound
	PUSHL	dsc$l_l2_2(R3)			; 2nd lower bound
	BGTR	SEPARATE_DTYPES			; not col 0 or neg, go loop
	MOVL	#1, (SP)			; start with col 1

;+
; Algorithm now differs according to data types
;-

SEPARATE_DTYPES:
5$:	CASEB	DSC$B_DTYPE(R2), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
2$:	.WORD	BYTE-2$				; code for byte dtype
	.WORD	WORD-2$				; code for word dtype
	.WORD	LONG-2$				; code for long dtype
	.WORD	ERR_DATTYPERR-2$		; quad not supported
	.WORD	FLOAT-2$			; code for float dtype
	.WORD	DOUBLE-2$			; code for double dtype

;+
; G and h floating dtype numbers fall outside the range of the CASEB, so
; check for them separately.
;-

	CMPB	DSC$B_DTYPE(R2), #DSC$K_DTYPE_G
	BNEQ	3$
	BRW	GFLOAT

3$:	CMPB	DSC$B_DTYPE(R2), #DSC$K_DTYPE_H
	BNEQ	4$
	BRW	HFLOAT

4$:	CMPB	DSC$B_DTYPE(R2), #DSC$K_DTYPE_DSC
	BNEQ	ERR_DATTYPERR
	MOVL	4(R2), R2			; R2 <-- addr of descriptor
	BRB	5$				; CASE again on dtype in desc

ERR_DATTYPERR:
	PUSHL	#BAS$K_DATTYPERR		; Signal error, unsupported
	CALLS	#1, G^BAS$$STOP			; dtype in array desc

	.PAGE
;+
; Source array is a byte array.  Now differentiate on the destination type.
;-

BYTE:	CASEB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	BYTE_TO_BYTE-1$			; code for byte dtype
	.WORD	BYTE_TO_WORD-1$			; code for word dtype
	.WORD	BYTE_TO_LONG-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	BYTE_TO_FLOAT-1$		; code for float dtype
	.WORD	BYTE_TO_DOUBLE-1$		; code for double dtype

	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	BYTE_TO_GFLOAT

2$:	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	BYTE_TO_HFLOAT

3$:	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R3), R3			; R3 <-- addr of descriptor
	BRB	BYTE				; CASE again on dtype in desc

4$: 	BRW	ERR_DATTYPERR

;+
; Now type of source and destination arrays are known.  Use the macro to
; generate the code for each case
;-
	.PAGE
BYTE_TO_BYTE:	$BAS$MAT_SUB	B, B

	.PAGE
BYTE_TO_WORD:	$BAS$MAT_SUB	B, W

	.PAGE
BYTE_TO_LONG:	$BAS$MAT_SUB	B, L

	.PAGE
BYTE_TO_FLOAT:	$BAS$MAT_SUB	B, F

	.PAGE
BYTE_TO_DOUBLE:	$BAS$MAT_SUB	B, D

	.PAGE
BYTE_TO_GFLOAT: $BAS$MAT_SUB	B, G

	.PAGE
BYTE_TO_HFLOAT: $BAS$MAT_SUB	B, H

;+
; Source array is a word array.  Now differentiate on the destination type.
;-

WORD:	CASEB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	WORD_TO_BYTE-1$			; code for byte dtype
	.WORD	WORD_TO_WORD-1$			; code for word dtype
	.WORD	WORD_TO_LONG-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	WORD_TO_FLOAT-1$		; code for float dtype
	.WORD	WORD_TO_DOUBLE-1$		; code for double dtype

	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	WORD_TO_GFLOAT

2$:	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	WORD_TO_HFLOAT

3$:	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R3), R3			; R3 <-- addr of descriptor
	BRB	WORD				; CASE again on dtype in desc

4$: 	BRW	ERR_DATTYPERR

;+
; Now type of source and destination arrays are known.  Use the macro to
; generate the code for each case
;-
	.PAGE
WORD_TO_BYTE:	$BAS$MAT_SUB	W, B

	.PAGE
WORD_TO_WORD:	$BAS$MAT_SUB	W, W

	.PAGE
WORD_TO_LONG:	$BAS$MAT_SUB	W, L

	.PAGE
WORD_TO_FLOAT:	$BAS$MAT_SUB	W, F

	.PAGE
WORD_TO_DOUBLE:	$BAS$MAT_SUB	W, D

	.PAGE
WORD_TO_GFLOAT: $BAS$MAT_SUB	W, G

	.PAGE
WORD_TO_HFLOAT: $BAS$MAT_SUB	W, H

	.PAGE
;+
; Source array is a longword array.  Now differentiate on the destination type
;-

LONG:	CASEB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	LONG_TO_BYTE-1$			; code for byte dtype
	.WORD	LONG_TO_WORD-1$			; code for word dtype
	.WORD	LONG_TO_LONG-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	LONG_TO_FLOAT-1$		; code for float dtype
	.WORD	LONG_TO_DOUBLE-1$		; code for double dtype


	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	LONG_TO_GFLOAT

2$:	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	LONG_TO_HFLOAT

3$:	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R3), R3			; R3 <-- addr of descriptor
	BRB	LONG				; CASE again on dtype in desc

4$: 	BRW	ERR_DATTYPERR

;+
; Now type of source and destination arrays are known.  Use the macro to
; generate the code for each case
;-
	.PAGE
LONG_TO_BYTE:	$BAS$MAT_SUB	L, B

	.PAGE
LONG_TO_WORD:	$BAS$MAT_SUB	L, W

	.PAGE
LONG_TO_LONG:	$BAS$MAT_SUB	L, L

	.PAGE
LONG_TO_FLOAT:	$BAS$MAT_SUB	L, F

	.PAGE
LONG_TO_DOUBLE:	$BAS$MAT_SUB	L, D

	.PAGE
LONG_TO_GFLOAT: $BAS$MAT_SUB	L, G

	.PAGE
LONG_TO_HFLOAT: $BAS$MAT_SUB	L, H

	.PAGE
;+
; Source array is a floating array.  Now differentiate on the destination type
;-

FLOAT:	CASEB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	FLOAT_TO_BYTE-1$		; code for byte dtype
	.WORD	FLOAT_TO_WORD-1$		; code for word dtype
	.WORD	FLOAT_TO_LONG-1$		; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	FLOAT_TO_FLOAT-1$		; code for float dtype
	.WORD	FLOAT_TO_DOUBLE-1$		; code for double dtype


	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	FLOAT_TO_GFLOAT

2$:	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	FLOAT_TO_HFLOAT

3$:	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R3), R3			; R3 <-- addr of descriptor
	BRB	FLOAT				; CASE again on dtype in desc

4$: 	BRW	ERR_DATTYPERR

;+
; Now type of source and destination arrays are known.  Use the macro to
; generate the code for each case
;-
	.PAGE
FLOAT_TO_BYTE:  $BAS$MAT_SUB	F, B

	.PAGE
FLOAT_TO_WORD:	$BAS$MAT_SUB	F, W

	.PAGE
FLOAT_TO_LONG:	$BAS$MAT_SUB	F, L

	.PAGE
FLOAT_TO_FLOAT:	$BAS$MAT_SUB	F, F

	.PAGE
FLOAT_TO_DOUBLE: $BAS$MAT_SUB	F, D

	.PAGE
FLOAT_TO_GFLOAT: $BAS$MAT_SUB	F, G

	.PAGE
FLOAT_TO_HFLOAT: $BAS$MAT_SUB	F, H

	.PAGE
;+
; Source array is a double array.  Now differentiate on the destination type.
;-

DOUBLE:	CASEB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	DOUBLE_TO_BYTE-1$		; code for byte dtype
	.WORD	DOUBLE_TO_WORD-1$		; code for word dtype
	.WORD	DOUBLE_TO_LONG-1$		; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	DOUBLE_TO_FLOAT-1$		; code for float dtype
	.WORD	DOUBLE_TO_DOUBL-1$		; code for double dtype


	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	DOUBLE_TO_GFLOA

2$:	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	DOUBLE_TO_HFLOA

3$:	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R3), R3			; R3 <-- addr of descriptor
	BRB	DOUBLE				; CASE again on dtype in desc

4$: 	BRW	ERR_DATTYPERR

;+
; Now type of source and destination arrays are known.  Use the macro to
; generate the code for each case
;-
	.PAGE
DOUBLE_TO_BYTE: $BAS$MAT_SUB	D, B

	.PAGE
DOUBLE_TO_WORD:	$BAS$MAT_SUB	D, W

	.PAGE
DOUBLE_TO_LONG:	$BAS$MAT_SUB	D, L

	.PAGE
DOUBLE_TO_FLOAT: $BAS$MAT_SUB	D, F

	.PAGE
DOUBLE_TO_DOUBL: $BAS$MAT_SUB	D, D

	.PAGE
DOUBLE_TO_GFLOA: $BAS$MAT_SUB	D, G

	.PAGE
DOUBLE_TO_HFLOA: $BAS$MAT_SUB	D, H

;+
; Source array is a gfloat array.  Now differentiate on the destination type.
;-

GFLOAT:	CASEB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	GFLOAT_TO_BYTE-1$		; code for byte dtype
	.WORD	GFLOAT_TO_WORD-1$		; code for word dtype
	.WORD	GFLOAT_TO_LONG-1$		; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	GFLOAT_TO_FLOAT-1$		; code for float dtype
	.WORD	GFLOAT_TO_DOUBL-1$		; code for double dtype

	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	GFLOAT_TO_GFLOA

2$:	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	GFLOAT_TO_HFLOA

3$:	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R3), R3			; R3 <-- addr of descriptor
	BRB	GFLOAT				; CASE again on dtype in desc

4$: 	BRW	ERR_DATTYPERR

;+
; Now type of source and destination arrays are known.  Use the macro to
; generate the code for each case
;-
	.PAGE
GFLOAT_TO_BYTE:	$BAS$MAT_SUB	G, B

	.PAGE
GFLOAT_TO_WORD:	$BAS$MAT_SUB	G, W

	.PAGE
GFLOAT_TO_LONG:	$BAS$MAT_SUB	G, L

	.PAGE
GFLOAT_TO_FLOAT: $BAS$MAT_SUB	G, F

	.PAGE
GFLOAT_TO_DOUBL: $BAS$MAT_SUB	G, D

	.PAGE
GFLOAT_TO_GFLOA: $BAS$MAT_SUB	G, G

	.PAGE
GFLOAT_TO_HFLOA: $BAS$MAT_SUB	G, H

;+
; Source array is a hfloat array.  Now differentiate on the destination type.
;-

HFLOAT:	CASEB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	HFLOAT_TO_BYTE-1$		; code for byte dtype
	.WORD	HFLOAT_TO_WORD-1$		; code for word dtype
	.WORD	HFLOAT_TO_LONG-1$		; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	HFLOAT_TO_FLOAT-1$		; code for float dtype
	.WORD	HFLOAT_TO_DOUBL-1$		; code for double dtype

	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	HFLOAT_TO_GFLOA

2$:	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	HFLOAT_TO_HFLOA

3$:	CMPB	DSC$B_DTYPE(R3), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R3), R3			; R3 <-- addr of descriptor
	BRB	HFLOAT				; CASE again on dtype in desc

4$: 	BRW	ERR_DATTYPERR

;+
; Now type of source and destination arrays are known.  Use the macro to
; generate the code for each case
;-
	.PAGE
HFLOAT_TO_BYTE:	$BAS$MAT_SUB	H, B

	.PAGE
HFLOAT_TO_WORD:	$BAS$MAT_SUB	H, W

	.PAGE
HFLOAT_TO_LONG:	$BAS$MAT_SUB	H, L

	.PAGE
HFLOAT_TO_FLOAT: $BAS$MAT_SUB	H, F

	.PAGE
HFLOAT_TO_DOUBL: $BAS$MAT_SUB	H, D

	.PAGE
HFLOAT_TO_GFLOA: $BAS$MAT_SUB	H, G

	.PAGE
HFLOAT_TO_HFLOA: $BAS$MAT_SUB	H, H


;+
; Subtract has been in byte.  Determine destination type to convert to dest.
;-

DEST_CASE_B:
	MOVL	R10, R6				; save original pointer
5$:	CASEB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	STORE_BYTE-1$			; no conversion needed
	.WORD	DEST_B_TO_W-1$			; code for word dtype
	.WORD	DEST_B_TO_L-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	DEST_B_TO_F-1$			; code for float dtype
	.WORD	DEST_B_TO_D-1$			; code for double dtype

	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	DEST_B_TO_G

2$:	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	DEST_B_TO_H

3$:	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R6), R6			; R6 <-- addr of descriptor
	BRB	5$				; CASE again on dtype in desc

4$:	BRW	ERR_DATTYPERR

;+
; Subtract has been in word.  Determine destination type to convert to dest.
;-

DEST_CASE_W:
	MOVL	R10, R6				; save original pointer
5$:	CASEB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	DEST_W_TO_B-1$			; code for byte dtype
	.WORD	STORE_WORD-1$			; no conversion needed
	.WORD	DEST_W_TO_L-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	DEST_W_TO_F-1$			; code for float dtype
	.WORD	DEST_W_TO_D-1$			; code for double dtype

	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	DEST_W_TO_G

2$:	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	DEST_W_TO_H

3$:	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R6), R6			; R6 <-- addr of descriptor
	BRB	5$				; CASE again on dtype in desc

4$:	BRW	ERR_DATTYPERR

;+
; Subtract has been in long.  Determine destination type to convert to dest.
;-

DEST_CASE_L:
	MOVL	R10, R6				; save original pointer
5$:	CASEB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	DEST_L_TO_B-1$			; code for byte dtype
	.WORD	DEST_L_TO_W-1$			; code for word dtype
	.WORD	STORE_LONG-1$			; no conversion needed
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	DEST_L_TO_F-1$			; code for float dtype
	.WORD	DEST_L_TO_D-1$			; code for double dtype

	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	DEST_L_TO_G

2$:	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	DEST_L_TO_H

3$:	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R6), R6			; R6 <-- addr of descriptor
	BRB	5$				; CASE again on dtype in desc

4$:	BRW	ERR_DATTYPERR

;+
; Subtract has been in float.  Determine destination type to convert to dest.
;-

DEST_CASE_F:
	MOVL	R10, R6				; save original pointer
5$:	CASEB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	DEST_F_TO_B-1$			; code for byte dtype
	.WORD	DEST_F_TO_W-1$			; code for word dtype
	.WORD	DEST_F_TO_L-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	STORE_FLOAT-1$			; no conversion needed
	.WORD	DEST_F_TO_D-1$			; code for double dtype

	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	DEST_F_TO_G

2$:	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	DEST_F_TO_H

3$:	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R6), R6			; R6 <-- addr of descriptor
	BRB	5$				; CASE again on dtype in desc

4$:	BRW	ERR_DATTYPERR

;+
; Subtract has been in double.  Determine destination type to convert to dest.
;-

DEST_CASE_D:
	MOVL	R10, R6				; save original pointer
5$:	CASEB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	DEST_D_TO_B-1$			; code for byte dtype
	.WORD	DEST_D_TO_W-1$			; code for word dtype
	.WORD	DEST_D_TO_L-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	DEST_D_TO_F-1$			; code for float dtype
	.WORD	STORE_DOUBLE-1$			; no conversion needed

	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	DEST_G_TO_D

2$:	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	DEST_D_TO_H

3$:	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R6), R6			; R6 <-- addr of descriptor
	BRB	5$				; CASE again on dtype in desc

4$:	BRW	ERR_DATTYPERR

;+
; Subtract has been in gfloat.  Determine destination type to convert to dest.
;-

DEST_CASE_G:
	MOVL	R10, R6				; save original pointer
5$:	CASEB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	DEST_G_TO_B-1$			; code for byte dtype
	.WORD	DEST_G_TO_W-1$			; code for word dtype
	.WORD	DEST_G_TO_L-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	DEST_G_TO_F-1$			; code for float dtype
	.WORD	DEST_G_TO_D-1$			; code for double dtype

	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	STORE_GFLOAT

2$:	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	DEST_G_TO_H

3$:	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R6), R6			; R6 <-- addr of descriptor
	BRB	5$				; CASE again on dtype in desc

4$:	BRW	ERR_DATTYPERR

;+
; Subtract has been in hfloat.  Determine destination type to convert to dest.
;-

DEST_CASE_H:
	MOVL	R10, R6				; save original pointer
5$:	CASEB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_B, #<DSC$K_DTYPE_D - DSC$K_DTYPE_B>
1$:	.WORD	DEST_H_TO_B-1$			; code for byte dtype
	.WORD	DEST_H_TO_W-1$			; code for word dtype
	.WORD	DEST_H_TO_L-1$			; code for long dtype
	.WORD	ERR_DATTYPERR-1$		; quad not supported
	.WORD	DEST_H_TO_F-1$			; code for float dtype
	.WORD	DEST_H_TO_D-1$			; code for double dtype

	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_G
	BNEQ	2$
	BRW	DEST_H_TO_G

2$:	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_H
	BNEQ	3$
	BRW	STORE_HFLOAT

3$:	CMPB	DSC$B_DTYPE(R6), #DSC$K_DTYPE_DSC
	BNEQ	4$
	MOVL	4(R6), R6			; R6 <-- addr of descriptor
	BRB	5$				; CASE again on dtype in desc

4$:	BRW	ERR_DATTYPERR

DEST_W_TO_B:
	CVTWB	R0, R0				; convert
	BRB	STORE_BYTE			; go store

DEST_L_TO_B:
	CVTLB	R0, R0				; convert
	BRB	STORE_BYTE			; go store

DEST_F_TO_B:
	CVTFB	R0, R0				; convert
	BRB	STORE_BYTE			; go store

DEST_D_TO_B:
	MOVD	R0, -(SP)			; save double
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
	DIVD3	R0, (SP)+, R0			; descale for dest
	CVTDB	R0, R0				; convert to byte
	BRB	STORE_BYTE			; go store

DEST_G_TO_B:
	CVTGB	R0, R0				; convert
	BRB	STORE_BYTE			; go store

DEST_H_TO_B:
	CVTHB	R0, R0				; convert
						; fall into store
STORE_BYTE:
	MOVL	R10, R1				; pointer to dest descriptor
	MOVL	lower_bnd1+4(SP), R2		; current row (extra longword
						;  on top of stack for jsb)
	MOVL	R11, R3				; current column
	MOVB	R0, DATA+4(SP)
;+
; Redefine the following offsets for the call to the STORE macro.  The
; BSBW to here added 4 to the stack.
;-

value_desc = 32
str_len = 32
dtype = 34
class = 35
pointer = 36
data = 40

	STORE	B				; store
;+
; Restore the following offsets.
;-

value_desc = 28
str_len = 28
dtype = 30
class = 31
pointer = 32
data = 36

	RSB					; go continue loop

DEST_B_TO_W:
	CVTBW	R0, R0				; convert
	BRB	STORE_WORD			; go store

DEST_L_TO_W:
	CVTLW	R0, R0				; convert
	BRB	STORE_WORD			; go store

DEST_F_TO_W:
	CVTFW	R0, R0				; convert
	BRB	STORE_WORD			; go store

DEST_D_TO_W:
	MOVD	R0, -(SP)			; save double
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
	DIVD3	R0, (SP)+, R0			; descale for dest
	CVTDW	R0, R0				; convert to word
	BRB	STORE_WORD			; go store

DEST_G_TO_W:
	CVTGW	R0, R0				; convert
	BRB	STORE_WORD			; go store

DEST_H_TO_W:
	CVTHW	R0, R0				; convert
						; fall into store
STORE_WORD:
	MOVL	R10, R1				; pointer to dest descriptor
	MOVL	lower_bnd1+4(SP), R2		; current row (extra longword
						;  on top of stack for jsb)
	MOVL	R11, R3				; current column
	MOVW	R0, DATA+4(SP)
;+
; Redefine the following offsets for the call to the STORE macro.  The
; BSBW to here added 4 to the stack.
;-

value_desc = 32
str_len = 32
dtype = 34
class = 35
pointer = 36
data = 40

	STORE	W				; store
;+
; Restore the following offsets.
;-

value_desc = 28
str_len = 28
dtype = 30
class = 31
pointer = 32
data = 36

	RSB					; go continue loop

DEST_B_TO_L:
	CVTBL	R0, R0				; convert
	BRB	STORE_LONG			; go store

DEST_W_TO_L:
	CVTWL	R0, R0				; convert
	BRB	STORE_LONG			; go store

DEST_F_TO_L:
	CVTFL	R0, R0				; convert
	BRB	STORE_LONG			; go store

DEST_D_TO_L:
	MOVD	R0, -(SP)			; save double
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
	DIVD3	R0, (SP)+, R0			; descale for dest
	CVTDL	R0, R0				; convert
	BRB	STORE_LONG			; go store

DEST_G_TO_L:
	CVTGL	R0, R0				; convert
	BRB	STORE_LONG			; go store

DEST_H_TO_L:
	CVTHL	R0, R0				; convert
						; fall into store

STORE_LONG:
	MOVL	R10, R1				; pointer to dest descriptor
	MOVL	lower_bnd1+4(SP), R2		; current row (extra longword
						;  on stack for jsb)
	MOVL	R11, R3				; current column
	MOVL	R0, DATA+4(SP)
;+
; Redefine the following offsets for the call to the STORE macro.  The
; BSBW to here added 4 to the stack.
;-

value_desc = 32
str_len = 32
dtype = 34
class = 35
pointer = 36
data = 40

	STORE	L				; store
;+
; Restore the following offsets.
;-

value_desc = 28
str_len = 28
dtype = 30
class = 31
pointer = 32
data = 36

	RSB					; go continue loop

DEST_B_TO_F:
	CVTBF	R0, R0				; convert
	BRB	STORE_FLOAT			; go store

DEST_W_TO_F:
	CVTWF	R0, R0				; convert
	BRB	STORE_FLOAT			; go store

DEST_L_TO_F:
	CVTLF	R0, R0				; convert
	BRB	STORE_FLOAT			; go store

DEST_D_TO_F:
	MOVD	R0, -(SP)			; save double
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
	DIVD3	R0, (SP)+, R0			; descale
	CVTDF	R0, R0				; convert
	BRB	STORE_FLOAT			; go store

DEST_G_TO_F:
	CVTGF	R0, R0				; convert
	BRB	STORE_FLOAT			; go store

DEST_H_TO_F:
	CVTHF	R0, R0				; convert
						; fall into store

STORE_FLOAT:
	MOVL	R10, R1				; pointer to dest descriptor
	MOVL	lower_bnd1+4(SP), R2		; current row (extra longword
						; on stack for jsb)
	MOVL	R11, R3				; current column
	MOVF	R0, DATA+4(SP)
;+
; Redefine the following offsets for the call to the STORE macro.  The
; BSBW to here added 4 to the stack.
;-

value_desc = 32
str_len = 32
dtype = 34
class = 35
pointer = 36
data = 40

	STORE	F				; store
;+
; Restore the following offsets.
;-

value_desc = 28
str_len = 28
dtype = 30
class = 31
pointer = 32
data = 36

	RSB					; go continue loop

DEST_B_TO_D:						
	CVTBD	R0, -(SP)			; save double
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
	MULD2	(SP)+, R0			; scale for dest
	BRB	STORE_DOUBLE			; go store

DEST_W_TO_D:
	CVTWD	R0, -(SP)			; save double
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
	MULD2	(SP)+, R0			; scale for dest
	BRB	STORE_DOUBLE			; go store

DEST_L_TO_D:
	CVTLD	R0, -(SP)			; save double
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
	MULD2	(SP)+, R0			; scale for dest
	BRB	STORE_DOUBLE			; go store

DEST_F_TO_D:
	CVTFD	R0, -(SP)			; save double
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
	MULD2	(SP)+, R0 			; scale for dest
	JSB	G^MTH$DINT_R4			; integerize
	BRB	STORE_DOUBLE			; go store

DEST_G_TO_D:
	;+
	; Note the intermediate conversion to hfloat.
	;-
	MOVL	R2, -(SP)			; save regs which CVTGH
	MOVL	R3, -(SP)			;  will destroy
	CVTGH	R0, R0				; cvt gfloat to hfloat
	CVTHD 	R0, -(SP)			; cvt to desired double
	MOVL	(SP)+, R3			; restore regs
	MOVL	(SP)+, R2	
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	MULD2	(SP)+, R0			; scale
	MOVL	R4, -(SP)			; save R4
	JSB	G^MTH$DINT_R4			; integerize
	MOVL	(SP)+, R4			; restore R4
	BRW 	STORE_DOUBLE

DEST_H_TO_D:
	CVTHD	R0, -(SP)			; save double
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
	MULD2	(SP)+, R0			; scale for dest
	JSB	G^MTH$DINT_R4			; integerize
						; fall into store
STORE_DOUBLE:
	MOVL	R10, R2				; pointer to dest descriptor
	MOVL	lower_bnd1+4(SP), R3		; current row (extra longword
						;  on stack for jsb)
	MOVL	R11, R4				; current column
	MOVD	R0, DATA+4(SP)
;+
; Redefine the following offsets for the call to the STORE macro.  The
; BSBW to here added 4 to the stack.
;-

value_desc = 32
str_len = 32
dtype = 34
class = 35
pointer = 36
data = 40

	STORE	D				; store
;+
; Restore the following offsets.
;-

value_desc = 28
str_len = 28
dtype = 30
class = 31
pointer = 32
data = 36

	RSB					; go continue loop

DEST_B_TO_G:
	CVTBG	R0, R0				; convert
	BRB	STORE_GFLOAT			; go store

DEST_W_TO_G:
	CVTWG	R0, R0				; convert
	BRB	STORE_GFLOAT			; go store

DEST_L_TO_G:
	CVTLG	R0, R0				; convert
	BRB	STORE_GFLOAT			; go store

DEST_F_TO_G:
	CVTFG	R0, R0				; convert
	BRB	STORE_GFLOAT			; go store

DEST_D_TO_G:
	;+
	; Note the intermediate conversion to hfloat.
	;-
	MOVL	R2, -(SP)			; save regs which CVTDH
	MOVL	R3, -(SP)			;  will destroy
	CVTDH	R0, R0				; cvt dbl to hfloat
	CVTHG 	R0, R0				; cvt to desired gfloat
	MOVL	(SP)+, R3			; restore regs
	MOVL	(SP)+, R2	
	BRW 	STORE_GFLOAT

DEST_H_TO_G:
	CVTHG	R0, R0				; convert
						; fall into store
STORE_GFLOAT:
	MOVL	R10, R2				; pointer to dest descriptor
	MOVL	lower_bnd1+4(SP), R3		; current row (extra longword
						;  on top of stack for jsb)
	MOVL	R11, R4				; current column
	MOVG	R0, DATA+4(SP)
;+
; Redefine the following offsets for the call to the STORE macro.  The
; BSBW to here added 4 to the stack.
;-

value_desc = 32
str_len = 32
dtype = 34
class = 35
pointer = 36
data = 40

	STORE	G				; store
;+
; Restore the following offsets.
;-

value_desc = 28
str_len = 28
dtype = 30
class = 31
pointer = 32
data = 36

	RSB					; go continue loop

DEST_B_TO_H:
	CVTBH	R0, R0				; convert
	BRB	STORE_HFLOAT			; go store

DEST_W_TO_H:
	CVTWH	R0, R0				; convert
	BRB	STORE_HFLOAT

DEST_L_TO_H:
	CVTLH	R0, R0				; convert
	BRB	STORE_HFLOAT			; go store

DEST_F_TO_H:
	CVTFH	R0, R0				; convert
	BRB	STORE_HFLOAT			; go store

DEST_D_TO_H:
	MOVD	R0, -(SP)			; save double
	MOVL	SF$L_SAVE_FP(FP), R0		; pass FP to get scale
	JSB	G^BAS$$SCALE_R1			; get scale in R0 & R1
	DIVD3	R0, (SP)+, R0			; descale for dest
	CVTDH	R0, R0				; convert to hfloat
	BRB	STORE_HFLOAT			; go store

DEST_G_TO_H:
	CVTGH	R0, R0				; convert
						; fall into store

STORE_HFLOAT:
	MOVL	R10, R4				; pointer to dest descriptor
	MOVL	lower_bnd1+4(SP), R5		; current row (extra longword
						;  on top of stack for jsb)
	MOVL	R11, R6				; current column
	MOVH	R0, DATA+4(SP)
;+
; Redefine the following offsets for the call to the STORE macro.  The
; BSBW to here added 4 to the stack.
;-

value_desc = 32
str_len = 32
dtype = 34
class = 35
pointer = 36
data = 40

	STORE	H				; store
;+
; Restore the following offsets.
;-

value_desc = 28
str_len = 28
dtype = 30
class = 31
pointer = 32
data = 36

	RSB					; go continue loop

	.END
