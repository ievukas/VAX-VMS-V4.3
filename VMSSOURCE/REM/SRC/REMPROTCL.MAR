	.TITLE	REMPROTCL - PROCESS PROTOCOL DEPENDENT STUFF
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: REMOTE I/O ACP
;
; ABSTRACT:
;	THIS MODULE PERFORMS PROTOCOL DEPENDENT FUNCTIONS FOR REMACP
;
; ENVIRONMENT:
;	MODE = KERNEL
;--
	.PAGE
	.SBTTL	HISTORY
; AUTHOR:	SCOTT G. DAVIS, CREATION DATE: 21-Aug-1979
;
; MODIFIED BY:
;
;	V03-003	JLV0251		Jake VanNoy		29-APR-1983
;		Change TSA connections to look for BIND ACCEPT
;		rather than a BIND.
;
;	V03-002	JLV0216		Jake VanNoy		29-OCT-1982
;		Add code to support TSA connects. This code is a 
;		first cut, as the connect session is likely to be
;		ECOed soon. This will enable short term testing
;		of VAX to VAX connections with the CTERM protocol.
;
;	V03-001	DJD3002	Darrell Duffy	16-March-1982
;		Initialize DEVDEPEND2 from config message.
;
;	V02-003 DJD3001 Darrell Duffy	21-October-1981
;		Compare protocol version and eco to allow upward
;		compatibility for this and next versions.
;
;	V02-002	DJD2001	Darrell Duffy	5-Mar-1981
;			RTTDRIVER calls netdriver directly for io.
;
.PAGE
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
 
	$CCBDEF
	$DDBDEF			; device data block
	$DDTDEF			; driver dispatch table
	$DYNDEF GLOBAL
	$PCBDEF	GLOBAL
	$RBFDEF
	$REMDEF
	$UCBDEF
	$RTTUCBEXT		; RTT UCB extensions

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

CTP$B_TYPE 		= ^X0A		; *** TEMP

;
; OWN STORAGE:
;

	.PSECT	REM_PURE,NOWRT,NOEXE

VAX_CONFIG_MSG:				; Remote terminal handler configuration msg
	.BYTE	1			; This is a configuration message
	.BYTE	REM$C_CURVRS		; Protocol version
	.BYTE	REM$C_CURECO,0		; ECO, customer mod
	.WORD	7			; This is a VMS system speaking
SUPPORT:	.WORD	1@2		; I speak only the VMS protocol
VAX_CONFIG_END:				; End of message

CTERM_BIND_MSG:				; Remote terminal handler configuration msg
	.BYTE	1			; This is a BIND message
	.BYTE	2			; Protocol version (TSA/CTERM)
	.BYTE	0,0			; ECO, customer mod
	.WORD	7			; This is a VMS system speaking
	.WORD	1@4			; I speak CTERM protocol
CTERM_BIND_END:				; End of message

CTERM_UNBIND_MSG:
	.BYTE	2			; UNBIND
	.WORD	1			; Incompatible version reason code
CTERM_UNBIND_END:

CTDRV_NAME:	.ASCIC	/CTDRIVER/

	.PSECT	REM_IMPURE	NOSHR,NOEXE,RD,WRT

DISCON_MSG:				; Protocol DISCONNECT message
	.BYTE	2			; Message type code
DISC_REASON:	.BLKB	1		; This is the reason - T.B.S.
DISCON_END:				; End of message
	.PAGE
	.PSECT	REM_CODE,NOWRT

;++
;
; REM$PROTOCOL - This is an incredibly protocol-dependent module for
;		remote terminal handling.  The idea is to take the DECnet
;		standard of CONNECT,CONFIG,OPERATE and use it here,
;		more or less.  What is expected here is a CONFIGURE
;		message with the format above, but a quadword of terminal
;		characteristics is appended - they are jammed into the UCB
;		After that, the link reverts to passing all messages through.
;
; INPUTS:
;
;	R5 - virtual device UCB address
;	R7 - address of received message
;	R11 - device index
;
; OUTPUTS:
;
;	NONE
;
;--

;
; Message wasn't a VAX protocol connection...
;
NOT_VAX:
	BRW	TRY_CTERM		; Branch

REM$PROTOCOL::

	CMPB	#42,UCB$B_RTT_OBJ(R5)	; TSA request?
	BEQL	NOT_VAX			; go ahead

	MOVAB	W^VAX_CONFIG_MSG,R0	; Point at template
	MOVL	R7,R1			; Point at received message
	CMPB	(R0)+,(R1)+		; Check message type
	BNEQ	PROT_ERROR		; If NEQ protocol error
	MOVB	#1,W^DISC_REASON	; Assume wrong version
	MOVB	(R1), -			; Squirrel away the version for later
		UCB$B_RTT_PROVRS(R5)	;
	CMPB	(R0)+,(R1)+		; Check protocol version
	BLSSU	SEND_DISCON		; send a DISCONNECT
	MOVB	(R1), -			; Save the ECO number for now
		UCB$B_RTT_PROECO(R5)	;
	MOVB	#2,W^DISC_REASON	; Assume he doesn't speak my language
	ADDL	#4,R0			; Move past uninteresting stuff
	ADDL	#4,R1			; Here, too
	BITW	(R0)+,(R1)+		; Can he do what I do?
	BEQL	SEND_DISCON		; If EQL no - error

;
;	Decide which VRS and ECO we are going to speak on our end.
;	PROVRS and PROECO are his end of things.  We will set them to our
;	end so that RTTDRIVER can look at these to decide what protocol to
;	build.
;

	CMPB	UCB$B_RTT_PROVRS(R5),-	; If other side is up to snuff
		#REM$C_CURVRS		; and not beyond us
	BEQL	10$			; then check eco number
	MOVB	#REM$C_CURVRS, -	; Else speak our latest to him.
		UCB$B_RTT_PROVRS(R5)	; and he will talk down to us.
5$:	MOVB	#REM$C_CURECO, -	; use our latest eco as well
		UCB$B_RTT_PROECO(R5)	;
	BRB	20$			;

10$:	CMPB	UCB$B_RTT_PROECO(R5),-	; Is the ECO greater than ours
		#REM$C_CURECO		;
	BGTRU	5$			; Use our latest ECO to talk to him
20$:

	ASSUME	UCB$L_DEVDEPEND-UCB$B_DEVCLASS EQ 4

	MOVQ	(R1)+,UCB$B_DEVCLASS(R5) ; Stuff the terminal characteristics
	TSTB	UCB$B_RTT_PROECO(R5)	; Is this the latest version?
	BEQL	30$			; Nope, just 8 bytes of chars
	MOVL	(R1)+,-			;
		UCB$L_RTT_DEVDEPEND2(R5) ; for all 12 bytes
30$:	BISB	#UCB$M_ONLINE,UCB$W_STS(R5) ; Not initializing protocol

;
; Now the link is valid and up.  We need to obtain the window block
; for the rttdriver and then call it with an attention message to
; start its receive to the net link.
;

	MOVZWL	@W^REM$GL_CHANVEC[R11],R0 ; Obtain the channel
	MOVL	@W^REM$GL_UCBVEC[R11],R5 ; and the ucb address
	JSB	G^IOC$VERIFYCHAN	; obtain the ccb address for the net
	MOVL	CCB$L_WIND(R1),-	; Store the window block address
		UCB$L_RTT_NETWIND(R5)	; in the ucb for the rttdriver
	MOVL	#RBF$C_TT_STARTRCV, R2	; The attention modifier code
	BSBW	REM$ATTNMSG		; Call driver with attention message
	RSB				; Done
;
; There was some sort of error on the link
;
PROT_ERROR:
	BRW	REM$KILL_UCB		; Break the link and forget about it

;++
;
; REM$SEND_CONFIG - send CONFIGURE message to partner
;
;--

SEND_DISCON:				; Send a DISCONNECT message
	MOVAB	W^DISCON_MSG,R6		; Get msg address
	MOVL	S^#DISCON_END-DISCON_MSG,R10 ; Get msg length
	MOVAB	W^DISCON_AST,R8		; Set for an AST to kill channel
	BRB	SEND_COMMON		; Finish in common code

SEND_CTERM_DISC:
	MOVAB	W^CTERM_UNBIND_MSG,R6		; Get msg address
	MOVL	S^#CTERM_UNBIND_END-CTERM_UNBIND_MSG,R10 ; Get msg length
	MOVAB	W^DISCON_AST,R8		; Set for an AST to kill channel
	BRB	SEND_COMMON		; Finish in common code

REM$SEND_CONFIG::			; Send a CONFIGURE message
	CMPB	#42,UCB$B_RTT_OBJ(R5)	; TSA request?
	BEQL	10$			; go ahead
	MOVAB	W^VAX_CONFIG_MSG,R6	; Get msg address
	MOVL	S^#VAX_CONFIG_END-VAX_CONFIG_MSG,R10 ; Get msg length
	BRB	20$
10$:
	MOVAB	W^CTERM_BIND_MSG,R6	; Get msg address
	MOVL	S^#CTERM_BIND_END-CTERM_BIND_MSG,R10 ; Get msg length
20$:
	CLRL	R8			; No AST

SEND_COMMON:
	BRW	REM$SEND_MSGAST		; Send message and return

;++
;
; DISCON_AST - DISCONNECT message is gone; break the link
;
; INPUTS:
;
;	4(AP) - device index
;
;--

DISCON_AST:	.WORD	^M<R11>
	MOVL	4(AP),R11		; Get the device index
	BSBW	REM$KILL_UCB		; Kill the channel
	RET				; Done



;
; Check for CTERM protocol BIND message
;

TRY_CTERM:

	MOVAB	W^CTERM_BIND_MSG+1,R0	; Point at template (past message type)
	MOVL	R7,R1			; Point at received message
	CMPB	#4,(R1)+		; BIND ACCEPT?
	BNEQ	PROT_ERROR		; If NEQ, not either protocol
	MOVB	(R1), -			; Squirrel away the version for later
		UCB$B_RTT_PROVRS(R5)	;
	CMPB	(R0)+,(R1)+		; Check protocol version
	BLSSU	SEND_CTERM_DISC		; If NEQ NG - send a DISCONNECT
	MOVB	(R1), -			; Save the ECO number for now
		UCB$B_RTT_PROECO(R5)	;
	;
	; revision field is used to denote VMS connections.
	;
	MOVW	2(R1),UCB$W_RTT_SYSTYPE(R5) ; Save away first part of revision
;
;	Decide which VRS and ECO we are going to speak on our end.
;	PROVRS and PROECO are his end of things.  We will set them to our
;	end so that CTDRIVER can look at these to decide what protocol to
;	build.
;

	CMPB	UCB$B_RTT_PROVRS(R5),#2 ; If other side is up to snuff and not beyond us
	BEQL	10$			; then check eco number
	MOVB	#2,-			; Else speak our latest to him.
		UCB$B_RTT_PROVRS(R5)	; and he will talk down to us.
5$:	MOVB	#0,-			; use our latest eco as well
		UCB$B_RTT_PROECO(R5)	;
	BRB	20$			;

10$:	CMPB	UCB$B_RTT_PROECO(R5),-	; Is the ECO greater than ours
		#0			;
	BGTRU	5$			; Use our latest ECO to talk to him
20$:
	BISB	#UCB$M_ONLINE,UCB$W_STS(R5) ; Not initializing protocol

;
; Now the link is valid and up.  We need to obtain the window block
; for the rttdriver and then call it with an attention message to
; start its receive to the net link.
;

	MOVZWL	@W^REM$GL_CHANVEC[R11],R0 ; Obtain the channel
	MOVL	@W^REM$GL_UCBVEC[R11],R5 ; and the ucb address
	JSB	G^IOC$VERIFYCHAN	; obtain the ccb address for the net
	MOVL	CCB$L_WIND(R1),-	; Store the window block address
		UCB$L_RTT_NETWIND(R5)	; in the ucb for the rttdriver
;
; *** PLUG UCB DDT address with CTDRIVER DDT.
;

	BSBW	FIND_CTDRV		; Find and relocate
	BLBS	R0,30$			; done, continue
	BRW	SEND_CTERM_DISC		; no driver, abort link
;
; Tell driver we have a call for him
;
30$:
	BSBW	REM$ALLOC_IRP		; Allocate block
	MOVL	R2,R3			; Set address
	MOVB	#DYN$C_BUFIO, -
		CTP$B_TYPE(R2)		; Set buffer type
;***
;*** this info must be filled in as soon as TSADEF is in EXECML !!!
;***
;***	MOVAB	CTP$B_PRO_MSGTYPE(R2),- ;
;***		CTP$L_MSGDAT(R2)	; Set address of data
;***	CLRL	CTP$L_USRBFR(R2)	; Set the user buffer address to zero
;***	MOVB	#PRO$C_BIND, -
;***		CTP$B_PRO_MSGTYPE(R2)	; Set message type to BIND

	MOVL	UCB$L_DDT(R5),R2	; Fetch DDT address from UCB
	MOVL	DDT$L_UNSOLINT(R2),R2	; Fetch unsolicited interrupt vector
	JSB	(R2)			; call

	RSB				; Done
;

;
; Inputs: R5 - UCB to be plugged with DDT address
;

FIND_CTDRV:

	PUSHR	#^M<R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	MOVAB	CTDRV_NAME,R9		; GET ADDR OF DRIVER NAME
	MOVZBL	(R9)+,R8		; GET SIZE OF DRIVER NAME
	MOVAB	G^IOC$GL_DEVLIST,R10	; GET ADDR OF DDB LIST
20$:
	MOVL	DDB$L_LINK(R10),R10	; GET ADDR OF NEXT DDB
	BNEQ	30$			; BR IF NOT
	CLRL	R0			; ELSE NOT LOADED 
	BRW	CTDRV_EXIT

30$:	MOVAB	DDB$T_DRVNAME(R10),R1	; GET ADDR OF DRIVER NAME
	MOVZBL	(R1)+,R0		; GET SIZE OF DRIVER NAME
	CMPC5	R0,(R1),#0,R8,(R9)	; COMPARE DRIVER NAMES
	BNEQ	20$			; BR IF NOT EQUAL
; 
;  R10 is DDB for CTDRIVER
; 
	MOVL	DDB$L_DDT(R10),-
		UCB$L_DDT(R5)		; Set DDT address
	MOVL	#1,R0

CTDRV_EXIT:
	POPR	#^M<R1,R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>
	RSB

	.END
