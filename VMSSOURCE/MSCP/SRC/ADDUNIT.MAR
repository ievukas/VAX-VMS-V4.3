 	.TITLE	ADDUNIT - MSCP Library Routine for SET/SERVED
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.PAGE
	.SBTTL	PROGRAM DESCRIPTION
;++
;   FACILITY
;
;	MSCP Server
;
;   ABSTRACT
;
;	This module is called from the SET utility to implement the
;	SET/SERVED command.  It handles the interface to the MSCP Server.
;
;   ENVIRONMENT
;
;	NATIVE MODE, KERNEL MODE
;
;   AUTHOR
;
;	Kerbey T. Altmann, 24-Mar-1984
;
;   MODIFIED BY
;
;	V03-004	DAS0001		David Solomon		09-Jul-1984
;		Make MSCP$CODE psect read-only.
;
;	V03-003	KTA3130		Kerbey T. Altmann	22-May-1984
;		Fix a bug in KTA3126.
;
;	V03-002	KTA3126		Kerbey T. Altmann	23-Apr-1984
;		Fix problem with the DD device.
;
;	V03-001	NPK3051		N. Kronenberg		17-Apr-1984
;		Change SS$_INDEVNAM to SS$_IVDEVNAM.
;	
;--
	.page
	.SBTTL	DECLARATIONS

;
;	SYMBOL DEFINTIONS
;

	.nocross
	$CDDBDEF
	$DCDEF
	$DDBDEF
	$DEVDEF
	$DYNDEF
	$IPLDEF
	$MSCPDEF
	$PRDEF
	$SSDEF
	$UCBDEF
	$VCBDEF
;
; MSCPDEF.MLB
;
	$HQBDEF
	$MSUDEF
	$UQBDEF
	.cross
	.page
	.SBTTL	MSCP$ADDUNIT Routine

;++
;
; Functional description:
;
;	This routine implements the functions needed by the SET DEVICE/SERVED
;	DCL command.  It receives an argument from SET, validates it, allocates
;	and fills in the proper unit control block for the MSCP server.
;
; Calling sequence:
;
;	KERNEL MODE, IPL = 2
;	IO database locked for write access
;	CALLS	#3,G^MSCP$ADDUNIT
;
; Inputs:
;
;	
	UCBADDR	= 4	; Address of the device's UCB
	OPTIONS = 8	; Option flags (1 = /NOWRITE)
	CONTROL = 12	; Controller letter, if present
;
; Outputs:
;
;	R0 = Status
;		SS$_NORMAL - Success
;		SS$_DEVACTIVE - Unit is already served
;		SS$_DEVOFFLINE - MSCP server code not loaded
;		SS$_INSMFEM - Insuffient memory to allocate control blocks
;		SS$_DEVICEFULL - No space in MSCP server tables to add unit
;		SS$_IVDEVNAM - CONTROL letter is not A-G
;
;--

	.PSECT	MSCP$CODE,LONG,NOWRT

	.ENTRY	MSCP$ADDUNIT,^M<R2,R3,R4,R5,R6,R7,R8,R9,R10>

	MOVL	@#SCS$GL_MSCP,R8	; Pick up pointer to MSCP process
	BLSS	10$			; Valid system VA
	MOVZWL	#SS$_DEVOFFLINE,R0	; Nothing there, error
	RET

10$:	MOVL	UCBADDR(AP),R5		; Transfer UCB address
	MOVZWL	UCB$W_UNIT(R5),R7	; Pick up unit number
	CLRL	R3			; Initialize
	MOVW	#MSCP$M_UF_REPLC,R10	; Default unit flags
	MOVB	UCB$B_DEVTYPE(R5),R3	; Pick up device type
	BGEQ	20$			; A normal DIGITAL device
	SUBB	#DT$_FD1,R3		; Put in range of 0-n
	ADDW3	#<MSCP$K_EMS_FD1-	; Set correct mscp type
		 @MSCP$V_EU_SUBC>,R3,R0
	BRB	50$			; Join common code

20$:	ASHL	#16,R3,R9		; Set device type
	BISB	R7,R9			; OR in unit number
	MOVAL	W^DEVTBL[R3],R1		; Pick up entry in table
	MOVZWL	2(R1),R10		;  and unit flags
	CVTWL	(R1),R0			; Pick up part of emulated unit
	BGEQ	50$			; Nothing special
;
; Unit is a DSA disk.  Now find out the controller model in order to
; form the correct unit number.
;
	MOVL	UCB$L_CDDB(R5),R2	; Pick up pointer to Class Driver
	BEQL	50$			; None, treat as normal
	MOVZBL	CDDB$B_CNTRLMDL(R2),R2	; Get the controller model byte
	CMPB	R2,#MSCP$K_CM_HSC50	; Is it HSC50?
	BNEQ	30$			; No
	MOVZWL	#MSCP$K_EMD_HSC-	; Yes, make it HSC disk
		 @MSCP$V_EU_CTYPE,R0
	BRB	50$			; Continue

30$:	CMPB	R2,#MSCP$K_CM_EMULA	; Is it an emulated disk?
	BNEQ	40$			; No
	MOVZWL	#MSCP$K_EMD_EMUL-	; Yes, make it emulated disk
		 @MSCP$V_EU_CTYPE,R0
	BRB	50$			; Continue

40$:	MOVZWL	#MSCP$K_EMD_UDA-
		 @MSCP$V_EU_CTYPE,R0	; Make it UDA disk
50$:	BISW2	R0,R7			; Set in part of emulated unit
	MOVZBL	CONTROL(AP),R3		; Get special controller
	BNEQ	70$			; User supplied something
60$:	MOVL	UCB$L_DDB(R5),R3	; Point to DDb
	MOVZBL	DDB$T_NAME+3(R3),R3	; Pick up controller
70$:	SUBB2	#^X40,R3		; Make "A"-->1
	CMPB	R3,#7			; Is it in range "A-G"
	BLEQU	80$			; Yes, all is okay
	MOVZWL	#SS$_IVDEVNAM,R0	; No, error out
	RET

80$:	INSV	R3,#8,#8,R9		; Insert controller designator
	ASHL	#MSCP$V_EU_DESIG,R3,R3	; Shift into position
	BISL	R3,R7			; Complete unit number
	EXTZV	#0,#MSU$K_UNIT_SIZ,R7,R6; Slot index
;
; ADD a disk unit - first search the unit table in MSCP using a hashing
; 	algorithm.  If a entry is found, check for unit number match.  If
;	there is a match, we have an error.  If not, continue to look for
;	an empty slot.  If there are none, error out with a full status.
;
;	R5 -->	UCB
;	R6  =	Slot #
;	R7  =	Unit #
;	R8 -->	MSCP server
;	R9  =	Possible unit id
;	R10 =	Device unit flags
;
SEARCHTABLE:
	SETIPL	B^60$			; Synch access
	MOVL	MSU$L_UNIT_VEC(R8)[R6],R2 ; Look for unit block in slot
	BEQL	30$			; Empty
	CMPW	R7,UQB$W_UNIT(R2)	; Hit, is it a match?
	BEQL	20$			; Yes
	ADDL	#MSU$K_MAX_UNIT,R6	; Try for second probe
	MOVL	MSU$L_UNIT_VEC(R8)[R6],R2 ; Look for unit block in slot
	BEQL	30$			; Empty
	CMPW	R7,UQB$W_UNIT(R2)	; Hit, is it a match?
	BEQL	20$			; Yes
	MOVL	#<2*MSU$K_MAX_UNIT>-1,R6; Sequential search
10$:	MOVL	MSU$L_UNIT_VEC(R8)[R6],R2 ; Pick up unit
	BEQL	30$			; Empty
	CMPW	R7,UQB$W_UNIT(R2)	; Hit, is it a match?
	BEQL	20$			; Yes
	DECL	R6			; Loop thru
	CMPL	R6,#MSU$K_MAX_UNIT	; Reached end?
	BGEQ	10$			; No, loop for another probe
	MOVZWL	#SS$_DEVICEFULL,R0	; Yes, table is full
	BRB	40$

20$:	MOVZWL	#SS$_DEVACTIVE,R0	; ERROR - existing device with unit
	BRB	40$			; Clean up
;
; Found an empty slot.  Allocate the UQB and fill it in.
;
30$:	MOVZBL	#UQB$C_LEN,R1		; Set size
	JSB	G^EXE$ALONONPAGED	; Grab some pool
	BLBS	R0,50$			; All okay
	MOVZWL	#SS$_INSFMEM,R0		; Sho error
40$:	SETIPL	#IPL$_ASTDEL		; Lower IPL
	RET				;  and out

50$:	BISL	#<DEV$M_CLU!-		; Set the 'Avail CLUster wide' bit
		  DEV$M_SRV>,-		;  and 'MSCP SERVER' bits
		 UCB$L_DEVCHAR2(R5)
	MNEGW	#1,UQB$B_HOST_CNT(R2)	; Show no hosts
	MOVW	#MSCP$K_ST_OFFLN,-	; Set STATUS to OFFLINE
		 UQB$W_STATUS(R2)
	MOVL	R2,MSU$L_UNIT_VEC(R8)[R6]; Stick this UQB in MSCP table
	SETIPL	#IPL$_ASTDEL		; Lower IPL to ASTDEL
	BRB	FILLUQB			; Skip around the data

60$:	.LONG	IPL$_SCS		; End of locked code
;
; Now fill in the newly allocated UQB
;
FILLUQB:
	MOVL	R2,R4
	MOVL	R4,(R2)+		; Set shadow que
	MOVL	R4,(R2)+		; Ditto
	MOVW	R1,(R2)+		; Set size field
	MOVZBW	#DYN$C_SCS,(R2)+	; Set type
	ASSUME	UQB$B_HOST_CNT EQ 12
	MNEGW	#1,(R2)+		; Set initial HOST_CNT, AVL
	MOVW	#MSCP$K_ST_AVLBL,(R2)+	; Set STATUS to AVAILABLE
	ASSUME	UQB$W_MULT_UNT EQ UQB$B_HOST_CNT+4
	MULW3	R6,#^X101,(R2)+		; Set unit
	MOVW	R10,(R2)+		; Set unit flags
;
; Check on the write protection status
;
	BBC	#DEV$V_SWL,-
		 UCB$L_DEVCHAR(R5),10$	; Jump if not writelocked
	BBSS	#MSCP$V_UF_WRTPH,-
		 -2(R2),10$		; Set the bit
10$:	BLBC	OPTIONS(AP),20$		; Check for /NOWRITE
	BBSS	#MSCP$V_UF_WRTPS,-
		 -2(R2),20$		; Set the bit
20$:	CLRL	(R2)+			; Clear out reserved
;
; Set the unit id
;
	ASSUME	UQB$Q_UNIT_ID EQ UQB$W_MULT_UNT+8
	CLRL	(R2)+			; Clear low 32 bits of unit id
	MOVL	R9,(R2)+		;  upper 32 bits
	MOVB	#MSCP$K_CL_D144,-1(R2)	; Set MSCP class code
;
; Set the media id & unit/slot numbers
;
	ASSUME	UQB$L_MEDIA_ID EQ 32
	ASSUME	UQB$L_MEDIA_ID EQ UQB$Q_UNIT_ID+8
	MOVL	UCB$L_MEDIA_ID(R5),(R2)+; Transfer it
	CLRL	(R2)+			; Clear SHDW
	ASSUME	UQB$W_UNIT EQ UQB$W_SHDW_STS+2
	MOVW	R7,(R2)+		; Set in unit number
	MOVW	R6,(R2)+		; Set in slot number + clear byte
;
; Set the volume serial number
;
	ASSUME	UQB$L_VOL_SER EQ UQB$W_SHDW_UNT+8
	MOVL	UCB$L_VCB(R5),R0	; Pick up pointer to VCB
	BEQL	30$			; None, set up fake
	MOVL	VCB$L_SERIALNUM(R0),(R2); Set the serial
	BNEQ	40$			; All okay
30$:	MOVL	#^X1234,(R2)		; Set a fake one
40$:	MOVL	(R2)+,UQB$Q_UNIT_ID(R4)	; Copy to unit id field
	ASSUME	UQB$L_UCB EQ UQB$L_VOL_SER+4
	MOVL	R5,(R2)+		; Store UCB away
	ASSUME	UQB$L_HOST_ONLN EQ UQB$L_UCB+4
	CLRL	(R2)+			; Clear HOST_ONLN
;
; Set name if present
;
	ASSUME	UQB$T_NAME EQ UQB$L_HOST_ONLN+4
	CMPB	(AP),#4			; Check for optional paramters
	BLSSU	60$			; Not present
	PUSHR	#^M<R1,R3,R4,R5>	; Present, save registers
	MOVL	16(AP),R0		; Symbol descriptor
	MOVZWL	(R0),R1			; Size
	CMPL	R1,#15			; Maximize with 15
	BLEQ	50$
	MOVL	#15,R1
50$:	MOVB	R1,(R2)+
	MOVC5	R1,@4(R0),#32,#15,(R2)	; Copy device name
	MOVL	R3,R2			; Set pointer to end of name
	POPR	#^M<R1,R3,R4,R5>	; Restore registers
	BRB	70$

60$:	CLRL	(R2)			; Show noname
	ADDL	#16,R2			; Skip text
;
; Set maximum block/start if present
;
70$:	ASSUME	UQB$L_MAXBLOCK EQ UQB$T_NAME+16
	CMPB	(AP),#6			; Check for optional paramters
	BLSSU	80$			; Not present
	MOVL	20(AP),R0		; Pick up maximum extend
	BEQL	80$			; None use defaults
	MOVL	R0,(R2)+		; Use specified for max
	MOVL	24(AP),(R2)+		; Ditto for start
	BRB	90$

80$:	MOVL	UCB$L_MAXBLOCK(R5),(R2)+; Use full disk
	CLRL	(R2)+			; Start at zero
	ASSUME	UQB$L_START_LBN EQ UQB$L_MAXBLOCK+4
	ASSUME	UQB$W_NUM_QUE EQ UQB$L_START_LBN+4
;
; Clear counters & init list heads
;
90$:	CLRQ	(R2)+			; Counts
	ASSUME	UQB$L_FENCEL EQ UQB$W_NUM_QUE+8
	CLRQ	(R2)+			; Shadow fence
	ASSUME	UQB$L_CDRP_FL EQ UQB$L_FENCEL+8
	MOVAL	(R2),(R2)		; Executing CDRP list head
	MOVAL	(R2)+,(R2)+
	ASSUME	UQB$Q_BLOCKQ EQ UQB$L_CDRP_FL+8
	MOVAL	(R2),(R2)		; Blocked CDRP list head
	MOVAL	(R2)+,(R2)+
	ASSUME	UQB$Q_SHQ EQ UQB$Q_BLOCKQ+8
	MOVAL	(R2),(R2)		; Special holding CDRP list head
	MOVAL	(R2)+,(R2)+
	ASSUME	UQB$L_SHDW_LOW EQ UQB$Q_SHQ+8
	CLRL	(R2)+			; Shadow master/low
	ASSUME	UQB$W_NUM_BLK EQ UQB$L_SHDW_LOW+4
	CLRL	(R2)+			; Blocking counts
	ASSUME	UQB$Q_UNITQ EQ UQB$W_NUM_BLK+4
	CLRQ	(R2)+			; Unit list head
	CLRQ	(R2)+
;
; Finished setting up UQB, now link it into the unit que
;
	SETIPL	B^IPL_HI		; Synch access to MSCP
	MOVAL	MSU$L_UQB_LIST(R8),R3	; UQB list head
	MOVL	R3,R2			; Copy
100$:	MOVL	4(R3),R3		; Get next entry, backwards
	CMPL	R2,R3			; End of the line?
	BEQL	110$			; Yes
	CMPW	R7,UQB$W_UNIT- -
		 UQB$Q_UNITQ(R3) 	; Compare unit numbers
	BLSSU	100$			; Current is still higher than target
110$:	INSQUE	UQB$Q_UNITQ(R4),(R3)	; Insert
;
; Go off to MSCP to ADD a disk unit
;
120$:	INCW	MSU$L_STATE(R8)		; Up the unit count
	PUSHL	R4			; Copy UQB pointer
	PUSHL	#MSU$K_AC_ADD		; Opcode for MSCP action routines
	PUSHL	#2			; Only 2 parameters
	MOVL	SP,AP			; Set address of parameter area
	JSB	@4(R8)[R8]		; Go to the routine
	MOVL	#1,R0			; Set success
	SETIPL	#IPL$_ASTDEL		; Drop IPL back
	RET

IPL_HI:	.LONG	IPL$_SCS
	.PAGE
	.SBTTL	DEVTBL - Table of device specific parameters

	$NREM =	<MSCP$M_UF_REPLC>
	$REM =	<MSCP$M_UF_REPLC!MSCP$M_UF_RMVBL>
;
; NOTE: DSA disks must have a first word of -1 to trigger special
;	logic in the unit number routine.
;
	.ALIGN	WORD

MSCP$GA_DEVTBL::
DEVTBL:	.WORD	0,0					; 0
	.WORD	MSCP$K_EMS_RK@MSCP$V_EU_SUBC,	$REM	; DT$_RK06	1
	.WORD	MSCP$K_EMS_RK@MSCP$V_EU_SUBC,	$REM	; DT$_RK07	2
	.WORD	MSCP$K_EMS_RP@MSCP$V_EU_SUBC,	$REM	; DT$_RP04	3
	.WORD	MSCP$K_EMS_RP@MSCP$V_EU_SUBC,	$REM	; DT$_RP05	4
	.WORD	MSCP$K_EMS_RP@MSCP$V_EU_SUBC,	$REM	; DT$_RP06	5
	.WORD	MSCP$K_EMS_RM@MSCP$V_EU_SUBC,	$REM	; DT$_RM03	6
	.WORD	MSCP$K_EMS_RM@MSCP$V_EU_SUBC,	$NREM	; DT$_RP07	7
	.WORD	MSCP$K_EMS_RM@MSCP$V_EU_SUBC,	$NREM	; DT$_RP07HT	8
	.WORD	MSCP$K_EMS_RL@MSCP$V_EU_SUBC,	$REM	; DT$_RL01	9
	.WORD	MSCP$K_EMS_RL@MSCP$V_EU_SUBC,	$REM	; DT$_RL02	10
	.WORD	MSCP$K_EMS_RX@MSCP$V_EU_SUBC,	$REM	; DT$_RX02	11
	.WORD	MSCP$K_EMS_RX@MSCP$V_EU_SUBC,	$REM	; DT$_RX04	12
	.WORD	MSCP$K_EMS_RM@MSCP$V_EU_SUBC,	$NREM	; DT$_RM80	13
	.WORD	MSCP$K_EMS_CNSL@MSCP$V_EU_SUBC,	$REM	; DT$_TU58	14
	.WORD	MSCP$K_EMS_RM@MSCP$V_EU_SUBC,	$REM	; DT$_RM05	15
	.WORD	MSCP$K_EMS_RX@MSCP$V_EU_SUBC,	$REM	; DT$_RX01	16
	.WORD	0,				0	; DT$_ML11	17
	.WORD	MSCP$K_EMS_RM@MSCP$V_EU_SUBC,	$REM	; DT$_RB02	18
	.WORD	MSCP$K_EMS_RM@MSCP$V_EU_SUBC,	$NREM	; DT$_RB80	19
	.WORD	-1,				$NREM	; DT$_RA80	20
	.WORD	-1,				$NREM	; DT$_RA81	21
	.WORD	-1,				$REM	; DT$_RA60	22
	.WORD	MSCP$K_EMD_AZT@MSCP$V_EU_CTYPE,	$REM	; DT$_RC25	23
	.WORD	MSCP$K_EMD_AZT@MSCP$V_EU_CTYPE,	$NREM	; DT$_RCF25	24
	.WORD	MSCP$K_EMD_RDRX@MSCP$V_EU_CTYPE,$NREM	; DT$_RD51	25
	.WORD	MSCP$K_EMD_RDRX@MSCP$V_EU_CTYPE,$REM	; DT$_RX50	26
	.WORD	MSCP$K_EMD_RDRX@MSCP$V_EU_CTYPE,$NREM	; DT$_RD52	27
	.WORD	MSCP$K_EMD_RDRX@MSCP$V_EU_CTYPE,$NREM	; DT$_RD53	28
	.WORD	MSCP$K_EMD_RDRX@MSCP$V_EU_CTYPE,$REM	; DT$_RD26	29
	.WORD	-1,				$NREM	; DT$_RA82	30
	.WORD	MSCP$K_EMD_AZT@MSCP$V_EU_CTYPE,	$REM	; DT$_RC26	31
	.WORD	MSCP$K_EMD_AZT@MSCP$V_EU_CTYPE,	$NREM	; DT$_RCF26	32
;
; Patch space for future drives
;
	.WORD	0,0					; DT$_		33
	.WORD	0,0					; DT$_		34
	.WORD	0,0					; DT$_		35
	.WORD	0,0					; DT$_		36
	.WORD	0,0

	.END
