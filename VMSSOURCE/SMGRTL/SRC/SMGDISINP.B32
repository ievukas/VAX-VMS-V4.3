%TITLE 'SMG$$DISPLAY_INPUT - Input support routines'
MODULE SMG$$DISPLAY_INPUT (
		IDENT = '1-026'	! File: SMGDISINP.B32 Edit: STAN1026
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Screen Management
!
! ABSTRACT:
! 	The procedures in this module act as interfaces between the
! virtual displays and pasteboards and associated data structures, and
! the keyboard input side of SMG.  These routines are called to pass
! information about changes to the physical screen that have been
! brought about by input-related activities.
!
! ENVIRONMENT:	User mode, Shared library routines.
!
! AUTHOR: R. Reichert, CREATION DATE: 9-Mar-1983
!
! MODIFIED BY:
!
! 1-001	- Original.  Skeleton for future code.  RKR 9-Mar-1983
! 1-002 - Correct names of data structures and macros.  PLL 15-Mar-1983
! 1-003 - Add $SMG$VALIDATE_ARGCOUNT invocations.  RKR 30-Mar-1983.
! 1-004 - Flesh out some of the routines.  RKR 11-APR-1983.
! 1-005 - Add SMG$$GET_PASTEBOARD_ID.  RKR 14-APR-1983.
! 1-006 - Tap into output side.  RKR 26-APR-1983.
! 1-007 - Debug SMG$$SET_PHYSICAL_CURSOR. RKR 26-APR-1983
! 1-008 - Start debugging SMG$$REPORT_CHANGE_xxxxx. RKR 29-APR-1983
! 1-009 - Take advantage of some new routines.
!	  RKR 15-MAY-1983.
! 1-010 - Delete external references to DD_ structures and counts -- no
!	  longer needed (or available).
!	  RKR 20-MAY-1983.
! 1-011 - Start using fields in PBCB which tell SMG$$MIN_UPD what part
!	  of WCB buffers changed.
!	  RKR 28-MAY-1983.
! 1-012 - Inform output that the physical cursor position is unknown.
!	  Fix bug wherein NUM_CHARS was treated as the address of
!	  a longword instead of a word.
!	  STAN 28-may-1983.
! 1-013 - Further debugging of SMG$$SET_PHYSICAL_CURSOR.
!	  RKR 27-MAY-1983.
! 1-014 - Rename PBCB_B_COLS to PBCB_W_WIDTH
!	  STAN 1-May-1983
! 1-015 - Make changed_row and changed_col optional arguments to 
!	  SMG$$REPORT_CHANGE_REPLACE.  PLL 16-Jun-1983
! 1-016 - Rearrange order of arguments to SMG$$SET_PHYSICAL_CURSOR, and
!	  add two new arguments.  PLL 21-Jun-1983
! 1-017 - In SMG$$SET_PHYSICAL_CURSOR:
!		Validate right number of arguements.
!		Conditionalize some code so that some computations are
!		done only if optional paramter(s) are present.
!	  In SMG$$MOVE_TEXT_TO_SCREEN_BUFFER:
!		Optimize some code paths to achieve same optimizations
!		as in SMG$$MOVE_TEXT_TO_WINDOW_BUF (in SMGDISOUT.B32).
!	  Throughout, switch to data structure named declarations.
!	  RKR 24-JUN-1983.
! 1-018 - Cleanup calling sequence to SMG$$SET_PHYSICAL_CURSOR, based on
!	  how the input routines call it.  PLL 27-Jun-1983
! 1-019 - Pass physical device type to SMG$$SET_CURSOR_ABS_R4 if the
!	  device is a foreign terminal.  PLL 2-Aug-1983
! 1-020 - Add logic to SMG$$SET_PHYSICAL_CURSOR to set scrolling region
!	  to full screen if we are about to do input from a VT100.
!	  RKR 3-AUG-1983.
! 1-021 - Speed up SMG$$SET_PHYSICAL_CURSOR by looking at occluded
!	  bit in PP to bypass occlusion tests.  RKR 12-SEP-1983.
! 1-022 - Fix the way SMG$$SET_PHYSICAL_CURSOR calculates remaining columns
!	  available for input.  No properly recognizing where the virtual
!	  display is pasted.
!	  RKR 14-DEC-1983
! 1-023 - Minor changes for TERMTABLE support. STAN 22-JAN-1984
! 1-024 - More. STAN 14-Feb-1984.
! 1-025 - STAN 7-Mar-1984. Moved report_change routines to file SMGPRVINP.B32
! 1-026 - STAN 19-Mar-1984. Fix bug in remaining columns calculation for
!	  unoccluded virtual display not pasted to column 1 of pasteboard.
!--

%SBTTL 'Declarations'
!
! SWITCHES:
!

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE

! Private entry points:

    SMG$$GET_PASTEBOARD_ID,		! Find pasteboard id to match
					! device name.
    SMG$$MOVE_TEXT_TO_SCREEN_BUF,	! Map a single virtual display
					! to the WCB screen buffer.

    SMG$$SET_PHYSICAL_CURSOR;		! Set physical cursor on screen

!
! INCLUDE FILES
!

REQUIRE 'RTLIN:SMGPROLOG';		! defines psects, macros, tcb,
					!  wcb, & terminal symbols

!
! EXTERNAL REFERENCES
!

EXTERNAL
    PBD_L_COUNT,	! No. of pasteboards we currently have

    PBD_A_PBCB : VECTOR [PBD_K_MAX_PB, LONG],
			! Table of addresses of PBCB's

    PBD_V_PB_AVAIL : BITVECTOR [PBD_K_MAX_PB];
			! Bit vector or pasteboard id numbers in use.

EXTERNAL ROUTINE
    LIB$GET_VM,		! Allocate heap storage

    SMG$INSERT_CHARS,		! Insert char in virtual display buffer
				! and cause output.

    SMG$$FILL_WINDOW_BUFFER,	! Map all virtual display buffers to
				! the window buffer for a given PBCB

    SMG$$FLUSH_BUFFER,	! Flush any pending output to terminal

    SMG$$FORCE_SCROLL_REG,	! Force scroll region to specified
				! lines.

    SMG$$LOCATE_PP,	! Locate pasting packet that joins a virtual
			! display to a pasteboard.

    SMG$$MOVE_TEXT_TO_WINDOW_BUF, 	! Map single virtual display to
				     	! window buffer.

    SMG$$OCCLUDE,	! Determine overlap between two rectangular
			! areas.
    SMG$$MIN_UPD,	! Minimum output routine

    SMG$$PUT_TEXT_TO_BUFFER,	! Text to virtual display buffer

    SMG$$REPORT_CHANGE_INSERT,		! Report change to physical
					! screen in insert mode.

    SMG$$REPORT_CHANGE_REPLACE;		! Report change to physical
					! screen in replaec mode.

EXTERNAL LITERAL

    SMG$_FATERRLIB,	! Fatal error in library procedure
    SMG$_INVARG,	! Invalid argument
    SMG$_INVCOL,	! Invalid column number
    SMG$_INVDIS_ID,	! Invalid virtual display id
    SMG$_INVPAS_ID,	! Invalid pasteboard id
    SMG$_INVROW;	! Invalid row number

!<BLF/PAGE>

%SBTTL 'SMG$$GET_PASTEBOARD_ID - Get pasteboard id for device'
GLOBAL ROUTINE SMG$$GET_PASTEBOARD_ID ( 
				    DEVNAM_LEN : REF VECTOR [,WORD],
				    DEVNAM_ADDR,
				    PASTEBOARD_ID
				  ) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Try to find a pasteboard which is associated with the device
!	name string provided.   If match found, return pasteboard id.
!	If not found, return SMG$_INVARG.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SMG$$GET_PASTEBOARD_ID (
!					DEVNAM_LEN.rwu.r,
!					DEVNAM_ADDR.rt.r,
!				        PASTEBOARD_ID.wlu.r)
!
! FORMAL PARAMETERS:
!
!	DEVNAM_LEN.rwu.r	Address a word containing the length of
!				the device name string whose pasteboard
!				id counterpart is sought.
!
!	DEVNAM_ADDR.rt.r	Address of a buffer containing the
!				device name string whose pasteboard id
!				is sought.
!
!	PASTEBOARD_ID.wlu.r	Address of the longword to receive the
!				the pasteboard id that is allocated
!				to the specified device name.
!
! IMPLICIT INPUTS:
!
!	Data pertaining to pasteboards currently known.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	SMG$_WRONUMARG	Wrong number of arguments
!	SMG$_INVARG	No pasteboard on file matches given device
!			name string.
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN
    LOCAL
	PBCB : REF $PBCB_DECL;		! Address of a pasteboard
					! control block.

    $SMG$VALIDATE_ARGCOUNT (3, 3);	! Test for right no. of args

!+
! If we don't have any pasteboards yet, it can't match.  Return error.
!-
    IF .PBD_L_COUNT LEQ 0
    THEN
	RETURN ( SMG$_INVARG);

!+
! Loop through all the pasteboards we've got trying to match name.
!-
    INCR I FROM 0 TO .PBD_L_COUNT -1
    DO
	BEGIN	! Loop thru pasteboards
	IF (PBCB = .PBD_A_PBCB [.I]) NEQ 0
	THEN
	    BEGIN	! A valid pasteboard address
	    IF .DEVNAM_LEN [0] EQL .PBCB [PBCB_W_DEVNAM_LEN]
	    THEN
		BEGIN ! Lengths match
		IF CH$EQL ( .DEVNAM_LEN [0],		! length
			    .DEVNAM_ADDR,		! address
			    .PBCB [PBCB_W_DEVNAM_LEN],	! length
			    PBCB [PBCB_T_DEVNAM])	! address
		THEN
		    BEGIN	! Match found
		    .PASTEBOARD_ID = .I;
		    RETURN ( SS$_NORMAL);
		    END;	! Match found
		END;  ! Lengths match
	    END;	! A valid pasteboard address
	END;	! Loop thru pasteboards

!+
! If we fall out of loop, none of our pasteboards are associated with
! the given string.  Return error code.
!-
    RETURN (SMG$_INVARG);
    END;		! End of routine SMG$$GET_PASTEBOARD_ID
!<BLF/PAGE>

%SBTTL 'SMG$$MOVE_TEXT_TO_SCREEN_BUF - Move text from display buf. to screen buf.'
GLOBAL ROUTINE SMG$$MOVE_TEXT_TO_SCREEN_BUF (
				 PP : REF BLOCK [,BYTE]
					    ) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine moves text from the buffer located at 
!	.DCB [DCB_A_TEXT_BUF] into the screen text buffer.  
!	Array of bytes at .DCB [ DCB_A_ATTR_BUF ] describe the 
!	rendition this text must assume and is moved into the
!	associated screen attribute buffer.
!	Similarly, if the alternate character set buffer at
!	.DCB [DCB_A_CHAR_SET_BUF] exists, it must be mapped into the
!	screen alternate character set buffer.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SMG$$MOVE_TEXT_TO_SCREEN_BUF ( PP.rab.r)
!
! FORMAL PARAMETERS:
!
!	PP.rab.r		Address of pasting packet.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN
    LOCAL
	DCB  : REF $DCB_DECL,		! Addr of virtual display
					! control block.
	PBCB : REF $PBCB_DECL,		! Addr of pasteboard control
					! block
	WCB  : REF $WCB_DECL,		! Addr of window control block
	FROM_INDEX,			! Index into source buffer
	TO_INDEX;			! Index into destination buffer

    DCB  = .PP [PP_A_DCB_ADDR];
    PBCB = .PP [PP_A_PBCB_ADDR];
    WCB  = .PBCB [PBCB_A_WCB];

    FROM_INDEX = .PP [PP_W_FROM_INDEX];
    TO_INDEX   = .PP [PP_W_TO_INDEX];

!+
! Before diverging on two copying paths, check to see if we are going
! to get involved with alternate character set buffers.  If one exists
! in the DCB but does not yet exist in the WCB, we have to allocate
! one for the WCB and initialize it.
!-
    IF .DCB [DCB_A_CHAR_SET_BUF]     NEQ 0	AND
       .WCB [WCB_A_SCR_CHAR_SET_BUF] EQL 0
    THEN
	BEGIN	! Alloc. and init. window alternate char. set buffer
	LOCAL
	    STATUS;	! Status of LIB$GET_VM call

	IF NOT (STATUS = LIB$GET_VM ( WCB [WCB_L_BUFSIZE], 
				      WCB [WCB_A_SCR_CHAR_SET_BUF]))
	THEN
	    RETURN (.STATUS);

	CH$FILL ( 0, .WCB [WCB_L_BUFSIZE], .WCB [WCB_A_SCR_CHAR_SET_BUF]);
	END;	! Alloc. and init. window alternate char. set buffer

!+
! Check to see if we can do it with a single CH$MOVE or whether we must 
! do it a row at a time.
!-
    IF .PP [PP_V_CONTIG]
    THEN
	BEGIN	! Can be done in single move

	! Move text
	!
	CH$MOVE ( .PP [PP_L_MOVE_SIZE],				! length
		  .DCB [DCB_A_TEXT_BUF] + .FROM_INDEX,		! source
		  .WCB [WCB_A_SCR_TEXT_BUF] + .TO_INDEX);	! dest.

	! Move attributes
	!
	CH$MOVE ( .PP [PP_L_MOVE_SIZE],				! length
		  .DCB [DCB_A_ATTR_BUF] + .FROM_INDEX,		! source
		  .WCB [WCB_A_SCR_ATTR_BUF] + .TO_INDEX);	! dest.

	! Move alternate character set buffer pieces, if necessary
	!
	IF .DCB [DCB_A_CHAR_SET_BUF] NEQ 0
	THEN
	    BEGIN	! Map alternate character set
	    CH$MOVE ( .PP [PP_L_MOVE_SIZE],			! Length
		      .DCB [DCB_A_CHAR_SET_BUF] + .FROM_INDEX,	! Source
		      .WCB [WCB_A_SCR_CHAR_SET_BUF] + .TO_INDEX);! Dest.
	    END;	! Map alternate character set
	END		! Can be done in single move

    ELSE

	BEGIN	! Must be done row at a time
	LOCAL
	    DCB_COLS,	! = .DCB [DCB_W_NO_COLS]
	    WCB_COLS;	! = .WCB [WCB_W_NO_COLS]

	!+
	! Extracting out these two words as local longwords makes
	! compiler generate better code for this critical loop.
	!-
	DCB_COLS = .DCB [DCB_W_NO_COLS];
	WCB_COLS = .WCB [WCB_W_NO_COLS];

	INCR R FROM 1 TO .PP [PP_W_ROWS_TO_MOVE]
	DO
	    BEGIN	! For all rows in this display
	    ! Move text
	    !
	    CH$MOVE ( .PP [PP_W_MOVE_LENGTH],			! length
		      .DCB [DCB_A_TEXT_BUF] + .FROM_INDEX,	! source
		      .WCB [WCB_A_SCR_TEXT_BUF] + .TO_INDEX);	! dest.

	    ! Move attributes
	    !
	    CH$MOVE ( .PP [PP_W_MOVE_LENGTH],			! length
		      .DCB [DCB_A_ATTR_BUF] + .FROM_INDEX,	! source
		      .WCB [WCB_A_SCR_ATTR_BUF] + .TO_INDEX);	! dest

	    FROM_INDEX = .FROM_INDEX + .DCB_COLS;
	    TO_INDEX   = .TO_INDEX   + .WCB_COLS;
	    END;	! For all rows in this display

	!+
	! Move alternate character set buffer pieces, if necessary.
	!-
	IF .DCB [DCB_A_CHAR_SET_BUF] NEQ 0
	THEN
	    BEGIN	! Map alt. char. set buffer
	    FROM_INDEX = .PP [PP_W_FROM_INDEX];
	    TO_INDEX   = .PP [PP_W_TO_INDEX];

	    INCR R FROM 1 TO .PP [PP_W_ROWS_TO_MOVE]
	    DO
		BEGIN
		CH$MOVE ( .PP [PP_W_MOVE_LENGTH],		! length
		      .DCB [DCB_A_CHAR_SET_BUF] + .FROM_INDEX,	! source
		      .WCB [WCB_A_SCR_CHAR_SET_BUF] + .TO_INDEX);! dest.

		FROM_INDEX = .FROM_INDEX + .DCB_COLS;
		TO_INDEX   = .TO_INDEX   + .WCB_COLS;
		END;
	    END;	! Map alt. char. set buffer
	END;	! Must be done row at a time

    RETURN (SS$_NORMAL);
    END;		! End of routine SMG$$MOVE_TEXT_TO_SCREEN_BUF
!<BLF/PAGE>

%SBTTL 'SMG$$SET_PHYSICAL_CURSOR - Set physical cursor'
GLOBAL ROUTINE SMG$$SET_PHYSICAL_CURSOR ( DISPLAY_ID,
					  PASTEBOARD_ID,
					  OUT_BUFFER,
					  OUT_BUFFER_LEN : REF VECTOR [,LONG],
					  REMAINING_COLS,
					  DESIRED_ROW,
					  DESIRED_COL
					) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Causes the set physical cursor sequence to be deposited in the
!	specified buffer. 
!
!	If the terminal we are about to do input from is one with a
!	settable scrolling region, we make sure that the scrolling
!	region covers the whole screen.
!
!	If the desired row and column are not specified, the current
!	cursor position within the virtual display are assumed.
!	REMAINING_COLS is set to the number of columns that will be
!	visible within the interval from the indicated cursor position 
!	and the first column which is no longer within this display.
!	This allows the caller to control inputted strings from running
!	outside of the virtual	display.
!	If REMAINING_COLS is zero, the desired position corresponds to a
!	spot on the screen which is currently occluded by another 
!	virtual display.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SMG$$SET_PHYSICAL_CURSOR (
!					 DISPLAY_ID.rl.r,
!					 PASTEBOARD_ID.rl.r,
!					 OUT_BUFFER.wl.r,
!					 OUT_BUFFER_LEN.ml.r,
!					 REMAINING_COLS.wl.r,
!					 [,DESIRED_ROW.rl.r]
!					 [,DESIRED_COL.rl.r])
!
! FORMAL PARAMETERS:
!
!	DISPLAY_ID.rl.r		Display id of virtual display.
!
!	PASTEBOARD_ID.rl.r	Pasteboard id.
!
!	OUT_BUFFER.rl.r		Address of a buffer in
!				which to place the set cursor sequence.
!				This buffer should be at least 15 bytes.
!
!	OUT_BUFFER_LEN.ml.r	Address of a word which
!				contains the current length of OUT_BUFFER.
!				It will be updated to reflect length of
!				the set cursor sequence added.
!
!	REMAINING_COLS.wl.r	Returned number of visible columns
!				available on the physical screen at
!				this point which are entirely within
!				the specified virtual display and are
!				not occluded by another virtual display.
!
!	[,DESIRED_ROW.rl.r]	Desired row number within the virtual
!				display to which the physical cursor
!				should be postioned.  If omitted, the
!				current cursor row in this virtual
!				display is assumed.
!
!	[,DESIRED_COL.rl.r]	Desired column number within the virtual
!				display to which the physical cursor
!				should be postioned.  If omitted, the
!				current cursor column in this virtual
!				display is assumed.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	SMG$_INVDIS_ID	Invalid Display Id
!	SMG$_INVPAS_ID	Invalid Pasteboard Id
!	SMG$_INVROW	Invalid row specified
!	SMG$_INVCOL	Invalid column specified
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN
    BUILTIN
	NULLPARAMETER;

    LOCAL
	STATUS,				! Status of subroutine calls
	ROW,				! Row of interest -- in virtual display
	COL,				! Column of interest -- in virtual disp.
	DCB  : REF $DCB_DECL,		! Addr of display control block
	PBCB : REF $PBCB_DECL,		! Addr of pasteboard control
					! block.
	WCB  : REF $WCB_DECL,		! Addr of window control block
	PP   : REF $PP_DECL;		! Addr of pasting packet


    $SMG$VALIDATE_ARGCOUNT (5, 7);	! Test for right no. of args

    $SMG$GET_DCB (.DISPLAY_ID, DCB);		       ! Get DCB addr.
    $SMG$GET_PBCB ( .PASTEBOARD_ID, PBCB) ;	       ! Get PBCB addr.
    WCB = .PBCB [PBCB_A_WCB];

!+
! If we are reading from a VT100 (i.e., a device with a settable 
! scrolling region), we force the physical scrolling region to be the 
! whole screen.  If we didn't do this, the user might be trying to input
! into the last line of a virtual display which might coincide with the
! bottom line of a scrolling region.  As he types the <CR> to terminate 
! his input, the virtual display will scroll out from under us because 
! of the <CR><LF> echoed by the terminal driver.
! This way, the only way he can get into trouble is if he tries to 
! input into the last physical line of the screen.
!-

!**** SHOULD CHANGE WITH TERMTABLE SUPPORT

    IF .PBCB [PBCB_B_DEVTYPE] EQL VT100
    THEN
	BEGIN	! Scroll region check
	IF .PBCB [PBCB_W_TOP_SCROLL_LINE] NEQ 1            OR
	   .PBCB [PBCB_W_BOT_SCROLL_LINE] NEQ .PBCB [PBCB_B_ROWS]
	THEN
	    BEGIN	! Set scroll to whole screen
	    LOCAL
		STATUS;
	    IF NOT (STATUS = SMG$$FORCE_SCROLL_REG ( 
						.PBCB,
					        1,
						.PBCB [PBCB_B_ROWS]))
	    THEN
		RETURN .STATUS;
	    !+
	    ! Flush out this transaction separately.  We don't what it
	    ! to become part of the cursor setting sequence which our
	    ! caller may want to output a second time.
	    !-
	    IF .PBCB [PBCB_V_BUF_ENABLED]
	    THEN
		SMG$$FLUSH_BUFFER ( .PBCB);
	    END;	! Set scroll to whole screen
	END;	! Scroll region check

!+
! If this display is not pasted to this pasteboard, quit -- but flush
! the buffer on the way out anyway.
!-
    IF NOT (STATUS = SMG$$LOCATE_PP (.DCB, .PBCB, PP)) ! Get PP addr.
    THEN
	BEGIN
	IF .PBCB [PBCB_V_BUF_ENABLED]
	THEN
	    SMG$$FLUSH_BUFFER ( .PBCB);
	RETURN (.STATUS);
	END;

    ROW = (IF NOT NULLPARAMETER (DESIRED_ROW) THEN ..DESIRED_ROW
				              ELSE .DCB [DCB_W_CURSOR_ROW]);

    COL = (IF NOT NULLPARAMETER (DESIRED_COL) THEN ..DESIRED_COL
				              ELSE .DCB [DCB_W_CURSOR_COL]);

    $SMG$VALIDATE_ROW_COL ( .ROW, .COL);

!+
! Perform remaining column calculation.
!-
    IF .PP [PP_V_OCCLUDED]
    THEN
	BEGIN	! Remaining number of col. calculation. -occluded case.
	LOCAL
	    TEMP : BLOCK [8,BYTE],	! Temporary representation of
					! area of input line in pasteboard
					! coordinates.
	    CURR_PP : REF $PP_DECL;	! Addr of a pasting packet
	!+
	! Identify a rectangular area that consists of the part of the 
	! line bounded by ROW and COL and the right end of the same 
	! line.  This represents the maximum allowable input area.
	!-
	TEMP [DCB_W_ROW_START] = .ROW + .PP [PP_W_ROW] -1;
	TEMP [DCB_W_NO_ROWS]   = 1;
	TEMP [DCB_W_COL_START] = .COL + .PP [PP_W_COL] - 1;
	TEMP [DCB_W_NO_COLS]   = .PP [PP_W_MOVE_LENGTH] -
				 ( .COL + .PP [PP_W_COL]) + 2;

	!+
	! Check the rectangle isolated above against the projections of
	! all virtual displays on this same pasteboard which may occlude
	! parts or all of this input rectangle.  The most resticted 
	! length of the input line is what we return to our caller.  
	! We start with the one pasted next in the chain (if any).
	!-
	CURR_PP = .PP [PP_A_PREV_PBCB];
	WHILE .CURR_PP NEQ PBCB [PBCB_A_PP_NEXT] ! While more displays
	DO					 ! remain...
	    BEGIN	! Overall loop
	    LOCAL
		PP_BASE : REF $PP_DECL;    ! Base address of current 
					   ! pasting packet

	    PP_BASE = .CURR_PP - PP_PBCB_QUEUE_OFFSET;
				! Since the queue headers for this part
				! of the chain are not at relative 0 in
				! the pasting packet.

	    IF .PP_BASE [PP_W_MOVE_LENGTH] NEQ 0
	    THEN
		BEGIN	! Display visible
		LOCAL
		    OVERLAP : BLOCK [8,BYTE],	! Representation of 
						! overlap between input
						! line and a 
						! higher-pasted virtual
						! display.
		    TEMP1   : BLOCK [8,BYTE], ! Representation of 
					      ! current virtual display
					      ! in pasteboard 
					      ! coordinates.
		    NEW_DCB : REF $DCB_DECL;! Addr of display control 
					    ! block currently involved.

		NEW_DCB = .PP_BASE [PP_A_DCB_ADDR];

		TEMP1 [DCB_W_ROW_START] = .PP_BASE [PP_W_ROW];
		TEMP1 [DCB_W_NO_ROWS]   = .NEW_DCB [ DCB_W_NO_ROWS];
		TEMP1 [DCB_W_COL_START] = .PP_BASE [PP_W_COL];
		TEMP1 [DCB_W_NO_COLS]   = .NEW_DCB [DCB_W_NO_COLS];

		!+
		! If the virtual display we're looking at is bordered, 
		! it will have a bigger footprint in the pasteboard 
		! buffer than its dimensions alone.  Adjust for the 
		! increased size of the foot print.
		!-
		IF .NEW_DCB [DCB_V_BORDERED]
		THEN
		    BEGIN
		    TEMP1 [DCB_W_ROW_START] = .TEMP1 [DCB_W_ROW_START] - 1;
		    TEMP1 [DCB_W_NO_ROWS]   = .TEMP1 [DCB_W_NO_ROWS] + 2;
		    TEMP1 [DCB_W_COL_START] = .TEMP1 [DCB_W_COL_START] - 1;
		    TEMP1 [DCB_W_NO_COLS]   = .TEMP1 [DCB_W_NO_COLS] + 2;
		    END;

		IF SMG$$OCCLUDE ( TEMP,	! The input line
				  TEMP1,! The higher-pasted display
				  OVERLAP) ! Overlapping region (if any)
		THEN
		    BEGIN	! Overlap
		    IF .TEMP [DCB_W_COL_START] GEQ 
		       .OVERLAP [DCB_W_COL_START] 	AND 
		       .TEMP [DCB_W_COL_START] LEQ 
		       .OVERLAP [DCB_W_COL_START] + .OVERLAP [DCB_W_NO_COLS] - 1
		    THEN
			BEGIN	! Requested start pos. occluded
			.REMAINING_COLS = 0;
			IF .PBCB [PBCB_V_BUF_ENABLED]
			THEN
			    SMG$$FLUSH_BUFFER ( .PBCB);
			RETURN (SS$_NORMAL);	! *** Should this be a
						! failure status ??? ***
			END		! Requested start pos. occluded
		    ELSE
			BEGIN	! Tail end of input pos occluded
			!+
			! Truncate length of input line down to the part
			! that is not occluded.
			!-
			TEMP [DCB_W_NO_COLS] = .TEMP1 [DCB_W_COL_START]
					       - .TEMP [DCB_W_COL_START];
			IF .TEMP [DCB_W_NO_COLS] LEQ 0
			THEN
			    BEGIN
			    .REMAINING_COLS = 0;
			    IF .PBCB [PBCB_V_BUF_ENABLED]
			    THEN
				SMG$$FLUSH_BUFFER ( .PBCB);
			    RETURN (SS$_NORMAL); ! *** Should this be a
						! failure status ??? ***
			    END;
			END;	! Tail end of input pos occluded
		    END;	! Overlap
		END;	! Display visible

	    !+
	    ! Walk the chain backwards, from the current packet back to
	    ! the head of the chain -- since the most recently pasted 
	    ! displays are at the head of the chain.
	    !-
	    CURR_PP = .PP_BASE [PP_A_PREV_PBCB];
	    END;	! Overall loop

	!+
	! If we fall out of the bottom of the loop, the requested row 
	! and column is not occluded, and some non-zero portion of the 
	! remainder of the row is visible as well.  Return its length to
	! caller.
	!-
	.REMAINING_COLS = .TEMP [DCB_W_NO_COLS];

	END	! Remaining number of col. calculation. - occluded case

    ELSE
	BEGIN	! Not occluded case
	.REMAINING_COLS = .PP [PP_W_MOVE_LENGTH] -  .COL  + 1;
	END;	! Not occluded case

!+
! All that remains to to set the cursor where requested -- both in the
! virtual display and on the physical screen.
!-
    DCB [DCB_W_CURSOR_ROW] = .ROW;
    DCB [DCB_W_CURSOR_COL] = .COL;
    WCB [WCB_W_CURR_CUR_ROW] = .ROW + .PP [PP_W_ROW] - 1;
    WCB [WCB_W_CURR_CUR_COL] = .COL + .PP [PP_W_COL] - 1;

!+
! Don't output the sequence to the terminal.  Store the set cursor sequence
! in the specified buffer (if it and its length provided), and let the 
! caller output the sequence if desired.
! (SMG$INPUT will store this sequence in its QIO buffer.)
!-

    $SMG$GET_TERM_DATA(SET_CURSOR_ABS,
			    .WCB [WCB_W_CURR_CUR_ROW],
		            .WCB [WCB_W_CURR_CUR_COL]);

    ! Move it to the OUT_BUFFER

    CH$MOVE(.PBCB[PBCB_L_CAP_LENGTH],.PBCB[PBCB_A_CAP_BUFFER],.OUT_BUFFER);
    OUT_BUFFER_LEN [0] = .PBCB[PBCB_L_CAP_LENGTH];

    RETURN (SS$_NORMAL);
    END;		! End of routine SMG$$SET_PHYSICAL_CURSOR
!<BLF/PAGE>

END			! End of module SMG$$DISPLAY_INPUT

ELUDOM
