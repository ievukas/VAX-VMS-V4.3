%TITLE 'BAS$CVTRP - Convert real to packed'
MODULE BAS$CVTRP (				! Convert real to packed
		IDENT = '1-004'		! File: BASCVTRP.B32 Edit: PLL1004
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Basic Language Support
!
! ABSTRACT:
!
! This module contains routines to convert real data types to packed decimal.
! It also contains routines to convert from packed to a real type.  
!
! These jacket routines are necessary because the OTS routines are JSB routines 
! and use R9 to pass a parameter.  If an error occurs R9 will not automatically
! be restored and the Basic compiler expects R9 to point at some local storage.
! Note that CALL entry points cause R9 to be saved in the frame.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Pamela L. Levesque, CREATION DATE: 15-April-1982
!
! MODIFIED BY:
!
! 1-001	- Original.  PLL 15-Apr-1982
! 1-002 - Clean up some comments.  PLL 21-Apr-1982
! 1-003 - Add entry points for rounding.  PLL 7-Jun-1982
! 1-004 - Before reporting decimal overflow error, must check BASIC frame to
!	  ensure that "/OVERFLOW=NODEC" was not specified during the compile.
!	  DG 7-Mar-1984
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

LINKAGE
    JSB_CVT = JSB (REGISTER = 6, REGISTER = 7, REGISTER = 8, REGISTER = 9) 
		: PRESERVE (2, 3, 4, 5, 10, 11);
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE

    BAS$CVTFP : NOVALUE,		! convert float to packed
    BAS$CVTDP : NOVALUE,		! convert double to packed
    BAS$CVTGP : NOVALUE,		! convert gfloat to packed
    BAS$CVTHP : NOVALUE,		! convert hfloat to packed
    BAS$CVTRFP : NOVALUE,		! convert float to packed (rounded)
    BAS$CVTRDP : NOVALUE,		! convert double to packed (rounded)
    BAS$CVTRGP : NOVALUE,		! convert gfloat to packed (rounded)
    BAS$CVTRHP : NOVALUE,		! convert hfloat to packed (rounded)
    BAS$CVTPF : NOVALUE,		! convert packed to float
    BAS$CVTPD : NOVALUE,		! convert packed to double
    BAS$CVTPG : NOVALUE,		! convert packed to gfloat
    BAS$CVTPH : NOVALUE;		! convert packed to hfloat

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! System symbols, typically from SYS$LIBRARY:STARLET.L32

REQUIRE 'RTLIN:RTLPSECT';			! Define PSECT declarations macros
REQUIRE	'RTLIN:BASFRAME.REQ';			! BSF symbols

!
! MACROS:
!

MACRO
    FIND_FRAME (F) =
        BEGIN

        BUILTIN
    		FP;					! Frame pointer

    	F = .FP;
	    DO
		BEGIN					! search back for Basic frame
		F = .F [BSF$A_SAVED_FP];
		END
	UNTIL (.F [BSF$A_HANDLER] EQLA BAS$HANDLER OR
		   .F EQL 0);

	END;
%;
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare PSECTs for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE

    BAS$HANDLER,
    OTS$CVTFP_R9 : JSB_CVT,		! OTS conv float to packed
    OTS$CVTDP_R9 : JSB_CVT,		! OTS conv dbl to packed
    OTS$CVTGP_R9 : JSB_CVT,		! OTS conv gfloat to packed
    OTS$CVTHP_R9 : JSB_CVT,		! OTS conv hfloat to packed
    OTS$CVTRFP_R9 : JSB_CVT,		! OTS conv float to packed (rounded)
    OTS$CVTRDP_R9 : JSB_CVT,		! OTS conv dbl to packed (rounded)
    OTS$CVTRGP_R9 : JSB_CVT,		! OTS conv gfloat to packed (rounded)
    OTS$CVTRHP_R9 : JSB_CVT,		! OTS conv hfloat to packed (rounded)
    OTS$CVTPF_R9 : JSB_CVT,		! OTS conv packed to float
    OTS$CVTPD_R9 : JSB_CVT,		! OTS conv packed to dbl
    OTS$CVTPG_R9 : JSB_CVT,		! OTS conv packed to gfloat
    OTS$CVTPH_R9 : JSB_CVT,		! OTS conv packed to hfloat
    BAS$$SIGNAL : NOVALUE;		! signal non-fatal error

EXTERNAL LITERAL 				! Condition value symbols
    BAS$K_DECERR : UNSIGNED (8);	! decimal error or overflow

%SBTTL 'BAS$CVT`FP - Convert float to packed'
GLOBAL ROUTINE BAS$CVTFP (				! Convert float to packed
	DEST,					! place to store conv. number
	DESTLEN,				! number of digits in dest
	SRC,					! number to be converted
	SCALE					! power of ten to mult src
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Converts a single floating number to packed.
!
! CALLING SEQUENCE:
!
!	BAS$CVTFP (DEST.wp.r, DESTLEN.rl.v, SRC.rf.r, SCALE.rl.v)
!
! FORMAL PARAMETERS:
!
!	DEST.wp.r	place to store the converted number
!	DESTLEN.rl.v    number of digits in the destination
!    	SRC.rf.r	number to be converted
!	SCALE.rl.v	power of ten by which the internal
!			representation of the sourc must be
!			multiplied to scale the same as the
!			internal representation of the dest.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	NONE
!
! SIDE EFFECTS:
!
!	May signal decimal overflow if an error occurs in the OTS
!	conversion routine
!
!--

    BEGIN

    LOCAL
	FMP : REF BLOCK [0,BYTE] FIELD (BSF$FCD),	! Ptr to BASIC frame
	STATUS;

    STATUS = OTS$CVTFP_R9 (.SCALE, .SRC, .DESTLEN, .DEST);
    IF (NOT .STATUS) 
    THEN 
	BEGIN

	FIND_FRAME (FMP);				! Find BASIC frame
	IF (.FMP NEQ 0) AND (.FMP [BSF$W_FCD_FLAGS] AND BSF$M_FCD_DV) NEQ 0
	THEN						! If "/OVERFLOW = NODEC" not set
	    BAS$$SIGNAL (BAS$K_DECERR);

	END;
    END;					! routine BAS$CVTFP

%SBTTL 'BAS$CVTDP - Convert double to packed'
GLOBAL ROUTINE BAS$CVTDP (				! Convert double to packed
	DEST,					! place to store conv. number
	DESTLEN,				! number of digits in dest
	SRC,					! number to be converted
	SCALE					! power of ten to mult src
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Converts a double floating number to packed.
!
! CALLING SEQUENCE:
!
!	BAS$CVTDP (DEST.wp.r, DESTLEN.rl.v, SRC.rd.r, SCALE.rl.v)
!
! FORMAL PARAMETERS:
!
!	DEST.wp.r	place to store the converted number
!	DESTLEN.rl.v    number of digits in the destination
!    	SRC.rd.r	number to be converted
!	SCALE.rl.v	power of ten by which the internal
!			representation of the sourc must be
!			multiplied to scale the same as the
!			internal representation of the dest.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	NONE
!
! SIDE EFFECTS:
!
!	May signal decimal overflow if overflow occurs in the OTS
!	conversion routine
!
!--

    BEGIN

    LOCAL
	FMP : REF BLOCK [0,BYTE] FIELD (BSF$FCD),	! Ptr to BASIC frame
	STATUS;

    STATUS = OTS$CVTDP_R9 (.SCALE, .SRC, .DESTLEN, .DEST);
    IF (NOT .STATUS) 
    THEN 
	BEGIN

	FIND_FRAME (FMP);				! Find BASIC frame
	IF (.FMP NEQ 0) AND (.FMP [BSF$W_FCD_FLAGS] AND BSF$M_FCD_DV) NEQ 0
	THEN						! If "/OVERFLOW = NODEC" not set
	    BAS$$SIGNAL (BAS$K_DECERR);

	END;

    END;					! End of routine BAS$CVTDP

%SBTTL 'BAS$CVTGP - Convert gfloat to packed'
GLOBAL ROUTINE BAS$CVTGP (				! Convert gfloat to packed
	DEST,					! place to store conv. number
	DESTLEN,				! number of digits in dest
	SRC,					! number to be converted
	SCALE					! power of ten to mult src
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Converts a g floating number to packed.
!
! CALLING SEQUENCE:
!
!	BAS$CVTGP (DEST.wp.r, DESTLEN.rl.v, SRC.rg.r, SCALE.rl.v)
!
! FORMAL PARAMETERS:
!
!	DEST.wp.r	place to store the converted number
!	DESTLEN.rl.v    number of digits in the destination
!    	SRC.rg.r	number to be converted
!	SCALE.rl.v	power of ten by which the internal
!			representation of the sourc must be
!			multiplied to scale the same as the
!			internal representation of the dest.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	NONE
!
! SIDE EFFECTS:
!
!	May signal decimal overflow if that error occurs in the OTS
!	conversion routine
!
!--

    BEGIN

    LOCAL
	FMP : REF BLOCK [0,BYTE] FIELD (BSF$FCD),	! Ptr to BASIC frame
	STATUS;

    STATUS = OTS$CVTGP_R9 (.SCALE, .SRC, .DESTLEN, .DEST);
    IF (NOT .STATUS) 
    THEN 
	BEGIN

	FIND_FRAME (FMP);				! Find BASIC frame
	IF (.FMP NEQ 0) AND (.FMP [BSF$W_FCD_FLAGS] AND BSF$M_FCD_DV) NEQ 0
	THEN						! If "/OVERFLOW = NODEC" not set
	    BAS$$SIGNAL (BAS$K_DECERR);

	END;
    END;					! End of routine BAS$CVTGP

%SBTTL 'BAS$CVTHP - Convert hfloat to packed'
GLOBAL ROUTINE BAS$CVTHP (				! Convert hfloat to packed
	DEST,					! place to store conv. number
	DESTLEN,				! number of digits in dest
	SRC,					! number to be converted
	SCALE					! power of ten to mult src
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Converts a h floating number to packed.
!
! CALLING SEQUENCE:
!
!	BAS$CVTHP (DEST.wp.r, DESTLEN.rl.v, SRC.rh.r, SCALE.rl.v)
!
! FORMAL PARAMETERS:
!
!	DEST.wp.r	place to store the converted number
!	DESTLEN.rl.v    number of digits in the destination
!    	SRC.rh.r	number to be converted
!	SCALE.rl.v	power of ten by which the internal
!			representation of the sourc must be
!			multiplied to scale the same as the
!			internal representation of the dest.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	May signal decimal overflow if that error occurs in the OTS
!	conversion routine
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	FMP : REF BLOCK [0,BYTE] FIELD (BSF$FCD),	! Ptr to BASIC frame
	STATUS;

    STATUS = OTS$CVTHP_R9 (.SCALE, .SRC, .DESTLEN, .DEST);
    IF (NOT .STATUS) 
    THEN 
	BEGIN

	FIND_FRAME (FMP);				! Find BASIC frame
	IF (.FMP NEQ 0) AND (.FMP [BSF$W_FCD_FLAGS] AND BSF$M_FCD_DV) NEQ 0
	THEN						! If "/OVERFLOW = NODEC" not set
	    BAS$$SIGNAL (BAS$K_DECERR);

	END;
    END;					! End of routine BAS$CVTHP

%SBTTL 'BAS$CVTRFP - Convert float to packed (rounded)'
GLOBAL ROUTINE BAS$CVTRFP (			! Convert float to packed (rounded)
	DEST,					! place to store conv. number
	DESTLEN,				! number of digits in dest
	SRC,					! number to be converted
	SCALE					! power of ten to mult src
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Converts a single floating number to packed using rounding.
!
! CALLING SEQUENCE:
!
!	BAS$CVTRFP (DEST.wp.r, DESTLEN.rl.v, SRC.rf.r, SCALE.rl.v)
!
! FORMAL PARAMETERS:
!
!	DEST.wp.r	place to store the converted number
!	DESTLEN.rl.v    number of digits in the destination
!    	SRC.rf.r	number to be converted
!	SCALE.rl.v	power of ten by which the internal
!			representation of the sourc must be
!			multiplied to scale the same as the
!			internal representation of the dest.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	NONE
!
! SIDE EFFECTS:
!
!	May signal decimal overflow if an error occurs in the OTS
!	conversion routine
!
!--

    BEGIN

    LOCAL
	FMP : REF BLOCK [0,BYTE] FIELD (BSF$FCD),	! Ptr to BASIC frame
	STATUS;

    STATUS = OTS$CVTRFP_R9 (.SCALE, .SRC, .DESTLEN, .DEST);
    IF (NOT .STATUS) 
    THEN 
	BEGIN

	FIND_FRAME (FMP);				! Find BASIC frame
	IF (.FMP NEQ 0) AND (.FMP [BSF$W_FCD_FLAGS] AND BSF$M_FCD_DV) NEQ 0
	THEN						! If "/OVERFLOW = NODEC" not set
	    BAS$$SIGNAL (BAS$K_DECERR);

	END;
    END;					! routine BAS$CVTRFP

%SBTTL 'BAS$CVTRDP - Convert double to packed (rounded)'
GLOBAL ROUTINE BAS$CVTRDP (			! Convert double to packed (rounded)
	DEST,					! place to store conv. number
	DESTLEN,				! number of digits in dest
	SRC,					! number to be converted
	SCALE					! power of ten to mult src
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Converts a double floating number to packed using rounding.
!
! CALLING SEQUENCE:
!
!	BAS$CVTRDP (DEST.wp.r, DESTLEN.rl.v, SRC.rd.r, SCALE.rl.v)
!
! FORMAL PARAMETERS:
!
!	DEST.wp.r	place to store the converted number
!	DESTLEN.rl.v    number of digits in the destination
!    	SRC.rd.r	number to be converted
!	SCALE.rl.v	power of ten by which the internal
!			representation of the sourc must be
!			multiplied to scale the same as the
!			internal representation of the dest.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	NONE
!
! SIDE EFFECTS:
!
!	May signal decimal overflow if overflow occurs in the OTS
!	conversion routine
!
!--

    BEGIN

    LOCAL
	FMP : REF BLOCK [0,BYTE] FIELD (BSF$FCD),	! Ptr to BASIC frame
	STATUS;

    STATUS = OTS$CVTRDP_R9 (.SCALE, .SRC, .DESTLEN, .DEST);
    IF (NOT .STATUS) 
    THEN 
	BEGIN

	FIND_FRAME (FMP);				! Find BASIC frame
	IF (.FMP NEQ 0) AND (.FMP [BSF$W_FCD_FLAGS] AND BSF$M_FCD_DV) NEQ 0
	THEN						! If "/OVERFLOW = NODEC" not set
	    BAS$$SIGNAL (BAS$K_DECERR);

	END;
    END;					! End of routine BAS$CVTRDP

%SBTTL 'BAS$CVTRGP - Convert gfloat to packed (rounded)'
GLOBAL ROUTINE BAS$CVTRGP (			! Convert gfloat to packed (rounded)
	DEST,					! place to store conv. number
	DESTLEN,				! number of digits in dest
	SRC,					! number to be converted
	SCALE					! power of ten to mult src
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Converts a g floating number to packed using rounding.
!
! CALLING SEQUENCE:
!
!	BAS$CVTRGP (DEST.wp.r, DESTLEN.rl.v, SRC.rg.r, SCALE.rl.v)
!
! FORMAL PARAMETERS:
!
!	DEST.wp.r	place to store the converted number
!	DESTLEN.rl.v    number of digits in the destination
!    	SRC.rg.r	number to be converted
!	SCALE.rl.v	power of ten by which the internal
!			representation of the sourc must be
!			multiplied to scale the same as the
!			internal representation of the dest.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	NONE
!
! SIDE EFFECTS:
!
!	May signal decimal overflow if that error occurs in the OTS
!	conversion routine
!
!--

    BEGIN

    LOCAL
	FMP : REF BLOCK [0,BYTE] FIELD (BSF$FCD),	! Ptr to BASIC frame
	STATUS;

    STATUS = OTS$CVTRGP_R9 (.SCALE, .SRC, .DESTLEN, .DEST);
    IF (NOT .STATUS) 
    THEN 
	BEGIN

	FIND_FRAME (FMP);				! Find BASIC frame
	IF (.FMP NEQ 0) AND (.FMP [BSF$W_FCD_FLAGS] AND BSF$M_FCD_DV) NEQ 0
	THEN						! If "/OVERFLOW = NODEC" not set
	    BAS$$SIGNAL (BAS$K_DECERR);

	END;
    END;					! End of routine BAS$CVTRGP

%SBTTL 'BAS$CVTRHP - Convert hfloat to packed (rounded)'
GLOBAL ROUTINE BAS$CVTRHP (			! Convert hfloat to packed (rounded)
	DEST,					! place to store conv. number
	DESTLEN,				! number of digits in dest
	SRC,					! number to be converted
	SCALE					! power of ten to mult src
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Converts a h floating number to packed using rounding.
!
! CALLING SEQUENCE:
!
!	BAS$CVTRHP (DEST.wp.r, DESTLEN.rl.v, SRC.rh.r, SCALE.rl.v)
!
! FORMAL PARAMETERS:
!
!	DEST.wp.r	place to store the converted number
!	DESTLEN.rl.v    number of digits in the destination
!    	SRC.rh.r	number to be converted
!	SCALE.rl.v	power of ten by which the internal
!			representation of the sourc must be
!			multiplied to scale the same as the
!			internal representation of the dest.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	May signal decimal overflow if that error occurs in the OTS
!	conversion routine
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	FMP : REF BLOCK [0,BYTE] FIELD (BSF$FCD),	! Ptr to BASIC frame
	STATUS;

    STATUS = OTS$CVTRHP_R9 (.SCALE, .SRC, .DESTLEN, .DEST);
    IF (NOT .STATUS) 
    THEN 
	BEGIN

	FIND_FRAME (FMP);				! Find BASIC frame
	IF (.FMP NEQ 0) AND (.FMP [BSF$W_FCD_FLAGS] AND BSF$M_FCD_DV) NEQ 0
	THEN						! If "/OVERFLOW = NODEC" not set
	    BAS$$SIGNAL (BAS$K_DECERR);

	END;
    END;					! End of routine BAS$CVTRHP

%SBTTL 'BAS$CVTPF - Convert packed to float'
GLOBAL ROUTINE BAS$CVTPF (				! Convert packed to float
	DEST,					! place to store conv. number
	SRC,					! number to be converted
	SRCLEN,					! number of digits in source
	SCALE					! power of ten to mult src
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Converts a packed number to single floating.
!
! CALLING SEQUENCE:
!
!	BAS$CVTPF (DEST.wf.r, SRC.rp.r, SRCLEN.rl.v, SCALE.rl.v)
!
! FORMAL PARAMETERS:
!
!	DEST.wf.r	place to store the converted number
!    	SRC.rf.r	number to be converted
!	SRCLEN.rl.v	number of digits in the source
!	SCALE.rl.v	power of ten by which the internal
!			representation of the sourc must be
!			multiplied to scale the same as the
!			internal representation of the dest.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    OTS$CVTPF_R9 (.SCALE, .SRCLEN, .SRC, .DEST);

    END;					! End of routine BAS$CVTPF

%SBTTL 'BAS$CVTPD - Convert packed to double'
GLOBAL ROUTINE BAS$CVTPD (				! Convert packed to double
	DEST,					! place to store conv. number
	SRC,					! number to be converted
	SRCLEN,					! number of digits in source
	SCALE					! power of ten to mult src
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Converts a packed number to double floating.
!
! CALLING SEQUENCE:
!
!	BAS$CVTPD (DEST.wp.r, SRC.rf.r, SRCLEN.rl.v, SCALE.rl.v)
!
! FORMAL PARAMETERS:
!
!	DEST.wd.r	place to store the converted number
!    	SRC.rp.r	number to be converted
!	SRCLEN.rl.v	number of digits in source
!	SCALE.rl.v	power of ten by which the internal
!			representation of the sourc must be
!			multiplied to scale the same as the
!			internal representation of the dest.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    OTS$CVTPD_R9 (.SCALE, .SRCLEN, .SRC, .DEST);

    END;					! End of routine BAS$CVTPD

%SBTTL 'BAS$CVTPG - Convert packed to gfloat'
GLOBAL ROUTINE BAS$CVTPG (				! Convert packed to gfloat
	DEST,					! place to store conv. number
	SRC,					! number to be converted
	SRCLEN,					! number of digits in source
	SCALE					! power of ten to mult src
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Converts a packed number to g floating.
!
! CALLING SEQUENCE:
!
!	BAS$CVTPG (DEST.wg.r, SRC.rp.r, SRCLEN.rl.v, SCALE.rl.v)
!
! FORMAL PARAMETERS:
!
!	DEST.wg.r	place to store the converted number
!    	SRC.rp.r	number to be converted
!	SRCLEN.rl.v	number of digits in the destination
!	SCALE.rl.v	power of ten by which the internal
!			representation of the sourc must be
!			multiplied to scale the same as the
!			internal representation of the dest.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    OTS$CVTPG_R9 (.SCALE, .SRCLEN, .SRC, .DEST);

    END;					! End of routine BAS$CVTPG

%SBTTL 'BAS$CVTPH - Convert packed to hfloat'
GLOBAL ROUTINE BAS$CVTPH (				! Convert packed to hfloat
	DEST,					! place to store conv. number
	SRC,					! number to be converted
	SRCLEN,					! number of digits in the source
	SCALE					! power of ten to mult src
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! 	Converts a packed number to hfloating.
!
! CALLING SEQUENCE:
!
!	BAS$CVTPH (DEST.wh.r, SRC.rp.r, SRCLEN.rl.v, SCALE.rl.v)
!
! FORMAL PARAMETERS:
!
!	DEST.wh.r	place to store the converted number
!    	SRC.rp.r	number to be converted
!	SRCLEN.rl.v     number of digits in the source
!	SCALE.rl.v	power of ten by which the internal
!			representation of the sourc must be
!			multiplied to scale the same as the
!			internal representation of the dest.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    OTS$CVTPH_R9 (.SCALE, .SRCLEN, .SRC, .DEST);

    END;					! End of routine BAS$CVTPH
!<BLF/PAGE>

END						! End of module BAS$CVTRP

ELUDOM
