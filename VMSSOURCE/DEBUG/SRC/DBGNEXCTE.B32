MODULE DBGNEXCTE (IDENT = 'V04-000') =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
! FACILITY:	DEBUG
!
! ABSTRACT:
!
!	Contained in this module is the routine DBG$NEXECUTE_CMD which uses the
!	literal value ot the verb node of the command execution tree to decide
!	which command execution network to invoke. In addition to this routine
!	which is the highest level command execution network, this module contains
!	several routines which are used by more than one command execution network
!	during command execution.
!
! ENVIRONMENT:	VAX/VMS
!
! AUTHOR:	David Plummer, CREATION DATE:	4/15/80
!
! VERSION:	V02.2-001
!
! MODIFIED BY:
!		Richard Title 	Sep, 1981	Added support for the TYPE verb.
!		RT	 	Oct, 1981	Added support for the SEARCH verb
!		RT		Jan, 1982	Added support for the IF verb
!		RT	        Jan, 1982	Added support for the WHILE verb
!		RT		Jan, 1982	Added support for the REPEAT verb
!		RT		Jan, 1982	Added parameters to DBG$NCIS_ADD
!		RT		Feb, 1982	Added support for EXITLOOP verb
!		RT		Mar, 1982	Added support for DEFINE command
!		RT		Apr, 1982	Added support for DECLARE command
!		RT		Apr, 1982	Added support for SPAWN command
!		RT		May, 1982	Added support for ALLOCATE command
!		VJH		Jul, 1982	Added support for SYMBOLIZE command
!		RT		Aug, 1982	Changed DBG$NGET_ADDRESS to check
!						for implementation level 3
!		RT		Sep, 1982	Added support for UNDEFINE command
!		PS		Oct, 1982	Added support for CALL command
!		RT		Dec, 1982	Added support for ATTACH command
!		RT		Feb, 1983	Added support for DUMP command
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

LIBRARY 'LIB$:DBGGEN.L32';

FORWARD ROUTINE
    DBG$NEXECUTE_CMD,			! Highest level execution network
    DBG$NCIS_ADD,			! Adds a node to the CIS
    DBG$NCIS_OPENICF,			! Opens an icf node in the CIS
    DBG$NCIS_REMOVE,			! Removes a node from the CIS
    DBG$NGET_ADDRESS;			! Obtains an Lvalue or Rvalue

EXTERNAL ROUTINE
    DBG$DEF_PR_EXIT,			! Procedure exit for @ procedures
    DBG$DEF_SYM_ADD,			! Add defined symbol
    DBG$DEF_SYM_FIND,			! Look up defined symbol
    DBG$DEPOSIT: NOVALUE,		! Level 3 EXECUTE_DEPOSIT routine
    DBG$EVALUATE: NOVALUE,		! Level 3 EXECUTE_EVALUATE routine
    DBG$EXAMINE	: NOVALUE,		! Level 3 EXECUTE_EXAMINE routine
    DBG$GET_MEMORY,			! Allocate permanent memory
    DBG$GET_TEMPMEM,			! Allocate temporary memory
    DBG$MAKE_VMS_DESC,			! Convert Primary Descriptor to
					!    VMS Descriptor
    DBG$NCOPY_DESC,			! Copy a descriptor
    DBG$NEXECUTE_ALLOCATE,		! ALLOCATE command execution network
    DBG$NEXECUTE_AT_SIGN,		! @ filespec execution network
    DBG$NEXECUTE_ATTACH,		! ATTACH command execution network
    DBG$NEXECUTE_CALL,			! CALL command execution network
    DBG$NEXECUTE_CANCEL,		! CANCEL command execution network
    DBG$NEXECUTE_DECLARE,		! DECLARE command execution network
    DBG$NEXECUTE_DEFINE,		! DEFINE command execution network
    DBG$NEXECUTE_DELETE,		! DELETE command execution network
    DBG$NEXECUTE_DUMP,			! DUMP command execution network
    DBG$NEXECUTE_EDIT,			! EDIT command execution network
    DBG$NEXECUTE_EXIT,			! EXIT command execution network
    DBG$NEXECUTE_EXITLOOP,		! EXITLOOP command execution network
    DBG$NEXECUTE_FOR,			! FOR command execution network
    DBG$NEXECUTE_GO,			! GO command execution network
    DBG$NEXECUTE_HELP,			! HELP command execution network
    DBG$NEXECUTE_IF,			! IF command execution network
    DBG$NEXECUTE_REPEAT,		! REPEAT command execution network
    DBG$NEXECUTE_SEARCH,		! SEARCH command execution network
    DBG$NEXECUTE_SET,			! SET verb execution network
    DBG$NEXECUTE_SHOW,			! SHOW verb execution network
    DBG$NEXECUTE_SPAWN,			! SPAWN verb execution network
    DBG$NEXECUTE_STEP,			! STEP command execution network
    DBG$NEXECUTE_SYMBOLIZE,		! SYMBOLIZE command execution network
    DBG$NEXECUTE_TYPE,			! TYPE command execution network
    DBG$NEXECUTE_UNDEFINE,		! UNDEFINE command execution network
    DBG$NEXECUTE_WHILE,			! WHILE command execution network
    DBG$NFREE_DESC,			! Release space for a descriptor
    DBG$NGET_LVAL,			! Obtains a symbol's lvalue from a prim desc
    DBG$NGET_SYMID,			! Obtain a symid list
    DBG$NGET_TYPE,			! Obtains a symbol's type form a prim desc
    DBG$NMAKE_ARG_VECT,			! Constructs a message argument vector
    DBG$NOUT_INFO,			! Outputs an info message
    DBG$REL_MEMORY: NOVALUE,		! Release permanent memory
    DBG$SCR_EXECUTE_DISPLAY_CMD:NOVALUE,! Execute the DISPLAY command
    DBG$SCR_EXECUTE_SAVE_CMD: NOVALUE,	! Execute the SAVE command
    DBG$SCR_EXECUTE_SCROLL_CMD: NOVALUE,! Execute the SCROLL command
    DBG$SCR_EXECUTE_SELECT_CMD: NOVALUE,! Execute the SELECT command
    DBG$STA_LOCK_SYMID: NOVALUE;	! Lock a SYMID list

EXTERNAL
    DBG$GL_CISHEAD: REF CIS$LINK,	! Version 2 debugger head of command input stream
    DBG$GL_CIS_LEVELS,			! Count of number of levels of CIS.
    DBG$GB_DEF_OUT: VECTOR[,BYTE],	! Old debugger output vector control
    DBG$GL_SCREEN_ERROR,		! Screen error display pointer (or 0)
    DBG$GL_SCREEN_NOGO,			! Screen flag to turn off STEP and GO
    DBG$GL_SCREEN_OUTPUT,		! Screen output display pointer (or 0)
    DBG$GL_SCREEN_SOURCE;		! Screen source display pointer (or 0)

LITERAL
    ALLOCATE_VERB	= DBG$K_ALLOCATE_VERB,
    AT_SIGN_VERB 	= DBG$K_AT_SIGN_VERB,
    ATTACH_VERB		= DBG$K_ATTACH_VERB,
    CALL_VERB 		= DBG$K_CALL_VERB,
    CANCEL_VERB 	= DBG$K_CANCEL_VERB,
    DECLARE_VERB	= DBG$K_DECLARE_VERB,
    DEFINE_VERB 	= DBG$K_DEFINE_VERB,
    DELETE_VERB		= DBG$K_DELETE_VERB,
    DEPOSIT_VERB 	= DBG$K_DEPOSIT_VERB,
    DISPLAY_VERB	= DBG$K_DISPLAY_VERB,
    DUMP_VERB		= DBG$K_DUMP_VERB,
    EDIT_VERB		= DBG$K_EDIT_VERB,
    EVALUATE_VERB 	= DBG$K_EVALUATE_VERB,
    EXAMINE_VERB 	= DBG$K_EXAMINE_VERB,
    EXIT_VERB 		= DBG$K_EXIT_VERB,
    EXITLOOP_VERB	= DBG$K_EXITLOOP_VERB,
    FOR_VERB		= DBG$K_FOR_VERB,
    GO_VERB 		= DBG$K_GO_VERB,
    HELP_VERB 		= DBG$K_HELP_VERB,
    IF_VERB		= DBG$K_IF_VERB,
    REPEAT_VERB		= DBG$K_REPEAT_VERB,
    SAVE_VERB		= DBG$K_SAVE_VERB,
    SCROLL_VERB		= DBG$K_SCROLL_VERB,
    SEARCH_VERB 	= DBG$K_SEARCH_VERB,
    SELECT_VERB		= DBG$K_SELECT_VERB,
    SET_VERB 		= DBG$K_SET_VERB,
    SHOW_VERB 		= DBG$K_SHOW_VERB,
    SPAWN_VERB 		= DBG$K_SPAWN_VERB,
    STEP_VERB 		= DBG$K_STEP_VERB,
    SYMBOLIZE_VERB	= DBG$K_SYMBOLIZE_VERB,
    TYPE_VERB		= DBG$K_TYPE_VERB,
    UNDEFINE_VERB	= DBG$K_UNDEFINE_VERB,
    WHILE_VERB		= DBG$K_WHILE_VERB;


! The following macro verifies entrance to, or exit from an ICF.
!
MACRO
	ICF_MESSAGE (PREFIX) =
	
	BEGIN
	BIND
		ENTER_PHRASE = UPLIT BYTE(8, %ASCII 'entering'),
		EXIT_PHRASE  = UPLIT BYTE(7, %ASCII 'exiting');

	LOCAL
		PHRASE;
	
	IF prefix EQL 1
	THEN
		phrase = enter_phrase
	ELSE
		phrase = exit_phrase;


	dbg$nout_info (dbg$_verifyicf, 3, .phrase, .fab_ptr[fab$b_fns], .fab_ptr[fab$l_fna]);	! Info message

	END % ;

GLOBAL ROUTINE DBG$NEXECUTE_CMD (VERB_NODE_PTR, MESSAGE_VECT) =

!
! FUNCTIONAL DESCRIPTION:
!	DBG$NEXECUTE_CMD is the highest level command execution network. This
!	routine examines the value of the verb node in the command execution
!	tree to decide which DEBUG command is to be executed, and transfer to
!	an appropriate subnetwork to perform the associated semantic action.
!
! FORMAL PARAMETERS:
!
!	VERB_NODE_PTR -		pointer to the head of the command execution tree
!
!	MESSAGE_VECT - 		address of a longword to contain the address of 
!				a message argument vector 
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SEVERE (4) -	The specified command could not be executed
!
!	STS$K_SUCCESS (1) -	The specified command was executed
!
! SIDE EFFECTS:
!
!	The semantic actions corresponding to the parsed DEBUG command are
!	performed. Various states of the debugger and user program may be
!	altered, and output may be displayed to the user and written to a log
!	file.
!

    BEGIN

    LOCAL
	VERB_NODE : REF DBG$VERB_NODE;		! Command verb node



    ! Check for a command to execute.
    !
    IF .VERB_NODE_PTR EQL 0 THEN RETURN STS$K_SUCCESS;


    ! Obtain the verb node and set the pointer to it to 0.
    !
    verb_node = ..verb_node_ptr;
    .verb_node_ptr = 0;


    ! Now transfer control to the appropriate subnetwork and return
    !
    RETURN
	( CASE .VERB_NODE [DBG$B_VERB_LITERAL] FROM DBG$K_FIRST_VERB
							TO DBG$K_LAST_VERB OF
	    SET

    	    [allocate_verb] :
    		dbg$nexecute_allocate (.verb_node, .message_vect);

	    [at_sign_verb] :
		dbg$nexecute_at_sign (.verb_node, .message_vect);

    	    [attach_verb] :
    		dbg$nexecute_attach (.verb_node, .message_vect);

    	    [call_verb] :
    		dbg$nexecute_call (.verb_node, .message_vect);

	    [cancel_verb] :
		dbg$nexecute_cancel (.verb_node, .message_vect);

    	    [declare_verb] :
    		dbg$nexecute_declare (.verb_node, .message_vect);

    	    [define_verb] :
    		dbg$nexecute_define (.verb_node, .message_vect);

    	    [delete_verb] :
    		dbg$nexecute_delete (.verb_node, .message_vect);

	    [deposit_verb] :
		(dbg$deposit(.verb_node);sts$k_success);

	    [DISPLAY_VERB]:
		(DBG$SCR_EXECUTE_DISPLAY_CMD(.VERB_NODE, FALSE);
		 STS$K_SUCCESS);

    	    [dump_verb] :
    		dbg$nexecute_dump(.verb_node, .message_vect);

    	    [edit_verb] :
    		dbg$nexecute_edit(.verb_node, .message_vect);

	    [evaluate_verb] :
		(dbg$evaluate(.verb_node);sts$k_success);

	    [examine_verb] :
		(dbg$examine(.verb_node);sts$k_success);

	    [exit_verb] :
		dbg$nexecute_exit (.verb_node, .message_vect);

    	    [exitloop_verb] :
    		dbg$nexecute_exitloop (.verb_node, .message_vect);

    	    [for_verb] :
    		dbg$nexecute_for (.verb_node, .message_vect);

	    [go_verb] :
		dbg$nexecute_go (.verb_node, .message_vect);

	    [help_verb] :
		dbg$nexecute_help (.verb_node, .message_vect);

    	    [if_verb] :
    		dbg$nexecute_if (.verb_node, .message_vect);

    	    [repeat_verb] :
    		dbg$nexecute_repeat (.verb_node, .message_vect);

	    [SAVE_VERB]:
		(DBG$SCR_EXECUTE_SAVE_CMD(.VERB_NODE);
		 STS$K_SUCCESS);

	    [SCROLL_VERB]:
		(DBG$SCR_EXECUTE_SCROLL_CMD(.VERB_NODE);
		 STS$K_SUCCESS);

    	    [search_verb] :
    		dbg$nexecute_search (.verb_node, .message_vect);

	    [SELECT_VERB]:
		(DBG$SCR_EXECUTE_SELECT_CMD(.VERB_NODE);
		 STS$K_SUCCESS);

	    [show_verb] :
		dbg$nexecute_show (.verb_node, .message_vect);

	    [set_verb] :
		dbg$nexecute_set (.verb_node, .message_vect);

    	    [spawn_verb] :
    		dbg$nexecute_spawn (.verb_node, .message_vect);

	    [step_verb] :
		dbg$nexecute_step (.verb_node, .message_vect);

	    [symbolize_verb] :
		dbg$nexecute_symbolize (.verb_node, .message_vect);

    	    [type_verb] :
    		dbg$nexecute_type (.verb_node, .message_vect);

    	    [undefine_verb] :
    		dbg$nexecute_undefine (.verb_node, .message_vect);

            [while_verb] :
    		dbg$nexecute_while (.verb_node, .message_vect);

	    [INRANGE, OUTRANGE] :
		BEGIN
		.message_vect = dbg$nmake_arg_vect (dbg$_notimplan, 1,
				    UPLIT BYTE (17, 'full verb support'));
		sts$k_severe
		END;

	    TES );
    END;

GLOBAL ROUTINE DBG$NCIS_ADD (POINTER, LENGTH, TYPE, 
		    		REPEAT_COUNT, WHILE_CLAUSE, LOOP_INCR) =
!
! FUNCTION
!	This routine creates and adds a new Command Input Stream (CIS) Entry
!	to the Command Input Stream Stack.  The global variable DBG$GL_CISHEAD
!	is set to point to the new CIS Entry so that DEBUG commands are gotten
!	from this new CIS Entry first.  The forward link in the new entry is
!	set to contain the old value of DBG$GL_CISHEAD so that the previous
!	CIS entry is restored once the new CIS entry is emptied of commands.
!
! INPUTS
! 	POINTER	- The address of either a buffer or a RAB to be placed
!		  in the DSC$A_POINTER field of the new link.
!
!	LENGTH	- The length of the above buffer (0 for RAB).
!
!	TYPE	- The type of the link to be added.
!
!	REPEAT_COUNT - The count for a CIS of type CIS_REPEAT.  For a CIS of
!		  type FOR, this contains the upper bound.
!
!	WHILE_CLAUSE - A counted string with the action clause for a CIS of
!		  type CIS_WHILE.  For a CIS of type FOR, this contains the
!		  name of the loop variable.
!
!	LOOP_INCR - The loop increment in FOR loops.
!
!
! OUTPUTS
!	This routine returns STS$K_SUCCESS as its value.
!

    BEGIN

    MAP
    	WHILE_CLAUSE: REF VECTOR [,BYTE];

    LOCAL
    	FOR_LOOP_VAR,			! Points to counted string with FOR
					!      loop variable
    	FOR_UPPER_BOUND,		! Integer with upper bound for FOR loops
	TEMP;				! Temporary pointer to head CIS node



    ! Increment the count of the number of levels of CIS we have.
    ! 
    DBG$GL_CIS_LEVELS = .DBG$GL_CIS_LEVELS + 1;


    ! Pick up the FOR-loop bounds if this is a FOR-loop CIS.
    !
    FOR_LOOP_VAR = .WHILE_CLAUSE;
    FOR_UPPER_BOUND = .REPEAT_COUNT;


    ! Save current list head and allocate a new one
    !	
    TEMP = .DBG$GL_CISHEAD ;
    DBG$GL_CISHEAD = DBG$GET_MEMORY ((CIS_ELEMENTS+3)/%UPVAL);
    DBG$GL_CISHEAD [CIS$A_NEXT_LINK] = .TEMP;
    DBG$GL_CISHEAD [CIS$A_INPUT_PTR] = .POINTER;
    DBG$GL_CISHEAD [CIS$B_INPUT_TYPE] = .TYPE;
    DBG$GL_CISHEAD [CIS$W_LENGTH] 	= .LENGTH;

    IF .TYPE EQL CIS_REPEAT
    THEN
        DBG$GL_CISHEAD [CIS$L_REPEAT_COUNT] = .REPEAT_COUNT;

    IF .TYPE EQL CIS_WHILE
    THEN
        DBG$GL_CISHEAD [CIS$V_WHILE_FLAG] = .WHILE_CLAUSE;

    IF .TYPE EQL CIS_FOR
    THEN
    	BEGIN
    	DBG$GL_CISHEAD [CIS$L_FOR_UPPER_BOUND] = .FOR_UPPER_BOUND;
  	DBG$GL_CISHEAD [CIS$A_FOR_LOOP_VAR] = .FOR_LOOP_VAR;
    	DBG$GL_CISHEAD [CIS$L_FOR_LOOP_INCR] = .LOOP_INCR;
    	END;


    ! The fields INIT_ADDR and INIT_LENGTH are used to determine
    ! how much storage to release for this buffer, since the pointer
    ! field is modified by the parser among others.
    !
    DBG$GL_CISHEAD [CIS$A_INIT_ADDR]	= .POINTER;

	
    ! If we are adding an input buffer add 1 byte to the length
    ! to be released because we allocated an extra one so we could
    ! guarantee a zero byte at the end of the string.
    !
    IF .TYPE EQL CIS_INPBUF
    THEN
	DBG$GL_CISHEAD [CIS$W_INIT_LENGTH]	= .LENGTH + 1

    ELSE
	DBG$GL_CISHEAD [CIS$W_INIT_LENGTH]	= .LENGTH;

    RETURN STS$K_SUCCESS;

    END;	

GLOBAL ROUTINE DBG$NCIS_OPENICF (MESSAGE_VECT) =
!++
! FUNCTIONAL DESCRIPTION:
!	Routine is called when there is a RAB at the top of the command
!	input stream. It opens the related FAB and connects the RAB to it
!
! FORMAL PARAMETERS:
!
!	message_vect	- address of a longword to contain address of message vector
!
! IMPLICIT INPUTS:
!	The head of the command input stream
!
! IMPLICIT OUTPUTS:
!	
!	on failure, a message argument vector
!
! ROUTINE VALUE:
!	
!	sts$k_success (1) - action performed
!
!	sts$k_severe (4) - failure
!
! SIDE EFFECTS:
!	A FAB is opened and a RAB connected to it. If SET OUTPUT VERIFY, then
!	a message is generated indicating we are entering an indirect command file
!--
    BEGIN

    LOCAL
	STATUS,				! Holds RMS status code
	FAB_PTR : REF $FAB_DECL,	! File access block pointer
	RAB_PTR : REF $RAB_DECL;	! Record access block pointer

    ! Extract the related FAB from the RAB at the top of the cis
    !
    rab_ptr = .dbg$gl_cishead [cis$a_input_ptr];
    fab_ptr = .rab_ptr [rab$l_fab];

    status = $OPEN (FAB=.fab_ptr);
    IF NOT .status
    THEN
	BEGIN

	LOCAL
		MSG_DESC : REF dbg$stg_desc;	! String descriptor for message

    	msg_desc = dbg$get_tempmem (2);

	msg_desc[dsc$w_length]  = .fab_ptr[fab$b_fns];
	msg_desc[dsc$a_pointer] = .fab_ptr[fab$l_fna];


	! Flag link for removal so we won't try to read from it again
	!
	dbg$gl_cishead[cis$v_rem_flag] = 1;

	.message_vect = dbg$nmake_arg_vect (shr$_openin + dbg_fac_code,
					    1,
					   .msg_desc, .fab_ptr[fab$l_sts], .fab_ptr[fab$l_stv]);

	RETURN sts$k_severe;

	END;


    ! Connect the RAB to the just opened FAB
    !
    status = $CONNECT (RAB=.rab_ptr);
    IF NOT .status
    THEN
	BEGIN
	LOCAL
		MSG_DESC : REF dbg$stg_desc; ! string descriptor for message

    	msg_desc = dbg$get_tempmem (2);

	msg_desc[dsc$w_length]  = .fab_ptr[fab$b_fns];
	msg_desc[dsc$a_pointer] = .fab_ptr[fab$l_fna];


	! Flag link for removal so we won't try to read from it again
	!
	dbg$gl_cishead[cis$v_rem_flag] = 1;

	.message_vect = dbg$nmake_arg_vect (shr$_openin + dbg_fac_code,
					    1, .msg_desc, 
					    .fab_ptr[fab$l_sts],
					    .fab_ptr[fab$l_stv]);

	RETURN sts$k_severe;

	END;


    ! Check for verification message.
    !
    IF .dbg$gb_def_out [out_verify]
    THEN
	icf_message(1);

    RETURN sts$k_success;

    END;


GLOBAL ROUTINE DBG$NCIS_REMOVE(EXIT_FLAG, MESSAGE_VECT) =
!
! FUNCTIONAL DESCRIPTION:
!	Removes the top link from the command input stream and delete the 
!	storage for it. If the link has additional dynamic storage related to
!	it, such as a FAB,RAB, input buffer etc., that storage is freed also.
!
! FORMAL PARAMETERS:
!	
!	EXIT_FLAG	- TRUE if this routine is called from EXIT or EXITLOOP.
!
!	MESSAGE_VECT	- The address of a longword to contain the address of
!			  a message argument vector.
!
! IMPLICIT INPUTS:
!
!	The head of the command input stream.
!
! IMPLICIT OUTPUTS:
!	
!	On error, a message argument vector is constructed and returned.
!
! ROUTINE VALUE:
!	
!	STS$K_SUCCESS (1) - Success. Actions performed.
!
!	STS$K_SEVERE (4) - Failure. Error message argument vector constructed.
!
! SIDE EFFECTS:
!	The head of the command input stream is reset to what was the
!	"next" link before this routine was called. If SET OUTPUT VERIFY,
!	then a message is generated saying we are exiting the indirect
!	command file.
!

    BEGIN

    LOCAL
    	BOUNDS_MATCH,		! TRUE when FOR loop lower bound matches upper bound
    	BUFLIST: REF VECTOR[],	!
    	COND,			! TRUE or FALSE: condition value in WHILE cis
    	DUMMY,			! dummy output parameter
    	GLOBAL_FLAG,		! output param for DEF_SYM_FIND
    	KIND,			! kind of define symbol
    	LOOP_INCR,		! the loop increment
    	NEW_NAME, 		! Pointer to the loop variable name
   	NEW_VALPTR: REF DBG$VALDESC,! pointer to a value descriptor 	
    	SIZE,			! Size of loop variable name
       	SYMID_LIST,		! list of symids
	TEMP,			! temporary pointer to cis node
	TYPE,			! cis node type
    	VALPTR: REF DBG$VALDESC,! pointer to a value descriptor
    	VALUE,			! value in value descriptor
    	VARNAME:REF VECTOR[,BYTE],! name for FOR loop var
       	WHILE_FLAG;		! TRUE for WHILE cis



    ! Decrement the count of the number of CIS levels we have.
    ! 
    DBG$GL_CIS_LEVELS = .DBG$GL_CIS_LEVELS - 1;


    ! If top link is an input buffer, release the storage for that buffer.
    !
    IF .DBG$GL_CISHEAD[CIS$B_INPUT_TYPE] EQL CIS_INPBUF
    THEN
    	DBG$REL_MEMORY(.DBG$GL_CISHEAD[CIS$A_INIT_ADDR]);


    ! Also release storage for any other buffers that may have been
    ! allocated during processing of this line (new buffers get allocated
    ! when symbols defined by DEFINE/COMMAND are expanded).
    !
    BUFLIST = .DBG$GL_CISHEAD[CIS$A_BUFLIST];
    WHILE .BUFLIST NEQ 0 DO
    	BEGIN
    	DBG$REL_MEMORY(.BUFLIST[1]);
    	TEMP = .BUFLIST[0];
    	DBG$REL_MEMORY(.BUFLIST);
    	BUFLIST = .TEMP;
    	END;
    DBG$GL_CISHEAD[CIS$A_BUFLIST] = 0;


    ! If the top Command Input Steam Entry is a SCREEN CIS Entry, we must reset
    ! the screen displays to which print, source, and error output are directed
    ! to be the same as they were before this CIS Entry was added to the Command
    ! Input Stream.  We also reset the NOGO flag which disables STEP and GO
    ! commands inside screen display DEBUG command lists.
    !
    IF .DBG$GL_CISHEAD[CIS$B_INPUT_TYPE] EQL DBG$K_CIS_SCREEN
    THEN
	BEGIN
	DBG$GL_SCREEN_NOGO = .DBG$GL_CISHEAD[CIS$V_SCREEN_NOGO];
	DBG$GL_SCREEN_OUTPUT = .DBG$GL_CISHEAD[CIS$L_SCREEN_OUTPUT];
	DBG$GL_SCREEN_SOURCE = .DBG$GL_CISHEAD[CIS$L_SCREEN_SOURCE];
	DBG$GL_SCREEN_ERROR  = .DBG$GL_CISHEAD[CIS$L_SCREEN_ERROR];
	END;


    ! Unless we are exiting a loop or an indirect command procedure, handle
    ! the various looping constructs that have CIS entries.
    !
    IF NOT .EXIT_FLAG
    THEN
    	BEGIN


    	! If the top link is a FOR CIS, then increment the FOR-loop counter.
    	!
    	IF .dbg$gl_cishead[cis$b_input_type] EQL cis_for
    	THEN
    	    BEGIN

    	    bounds_match = FALSE;

    	    ! Look up the loop counter.
    	    !
    	    varname = .dbg$gl_cishead [cis$a_for_loop_var];
    	    loop_incr = .dbg$gl_cishead [cis$l_for_loop_incr];
    	    IF dbg$def_sym_find (.varname, kind, 
    				  valptr, global_flag, .message_vect)
    	    THEN
    		BEGIN
    	        IF .kind EQL define_value
    	        THEN
    		    BEGIN

    	            value = .loop_incr + .valptr [dbg$l_value_value0];
    	            IF (.loop_incr GTR 0 
    		       AND .value GTR .dbg$gl_cishead[cis$l_for_upper_bound])
    		    OR (.loop_incr LSS 0
    		       AND .value LSS .dbg$gl_cishead[cis$l_for_upper_bound])
    	            THEN
    			bounds_match = TRUE
    		    ELSE
    		        BEGIN

    			! Copy the value descriptor. Fill in the new incremented
    			! value into the copy. Save away the copy as the new
    			! definition.
    			!
    			IF NOT dbg$nget_symid (.valptr, symid_list, .message_vect)
    			THEN
    			    RETURN sts$k_severe;
    			IF NOT dbg$ncopy_desc (.valptr, new_valptr, .message_vect)
    			THEN
    			    RETURN sts$k_severe;
    			dbg$sta_lock_symid (.symid_list);
    		        new_valptr[dbg$l_value_value0] = .value;
    			! Also copy the name.
    			new_name = dbg$get_memory (1+.varname[0]/4);
    			ch$move (1+.varname[0],.varname,.new_name);
    		        IF NOT dbg$def_sym_add (.new_name, define_value,
    					.new_valptr, FALSE, dummy, .message_vect)
    		        THEN
    		            RETURN sts$k_severe;
    	    	        dbg$gl_cishead [cis$w_length] = 
    		    		.dbg$gl_cishead [cis$w_init_length];
    	    	    	dbg$gl_cishead [cis$a_input_ptr] = 
    		            .dbg$gl_cishead [cis$a_init_addr];
    		    	RETURN sts$k_success;
    		    	END;
    		    END;
    		END;

    	    ! Copy the loop variable name into temporary memory.
    	    ! This is for error-message purposes.
    	    !
    	    size = .varname[0];
    	    varname = dbg$get_tempmem (1+.size/4);
    	    ch$move (1+.size, .dbg$gl_cishead[cis$a_for_loop_var],
    			      .varname);

    	    ! If we fall through to here, we are exiting the loop for
    	    ! some reason.
    	    ! Release the space for the loop counter name.
    	    !
    	    dbg$rel_memory (.dbg$gl_cishead [cis$a_for_loop_var]);

    	    ! If bounds_match is false, we are exiting the loop not because
    	    ! the lower bound has matched the upper bound, but rather because
    	    ! the loop variable had been redefined.
    	    !
    	    IF NOT .bounds_match
    	    THEN
    	        SIGNAL (dbg$_loopvar, 1, .varname);
    	    END;

    	! If the top link is a repeat cis, then decrement the count.
    	!
    	IF .dbg$gl_cishead[cis$b_input_type] EQL cis_repeat
    	THEN
    	    BEGIN
    	    dbg$gl_cishead [cis$l_repeat_count] = 
    	        .dbg$gl_cishead [cis$l_repeat_count] - 1;

            ! If the repeat count is greater than zero, reset the cis
            ! to the beginning of the action buffer.
    	    !
    	    IF .dbg$gl_cishead [cis$l_repeat_count] GTR 0
    	    THEN
    	    	BEGIN
    	    	dbg$gl_cishead [cis$w_length] = 
    		    .dbg$gl_cishead [cis$w_init_length];
    	    	dbg$gl_cishead [cis$a_input_ptr] = 
    		    .dbg$gl_cishead [cis$a_init_addr];
    	    	RETURN sts$k_success;
    	    	END;

    	    END;

    	END;


    ! If the top link is a WHILE, or a REPEAT whose count has gone to zero,
    ! an IF CIS, a FOR CIS, or a SCREEN CIS, then release storage for the
    ! action buffer.  Here we subtract two from the address because storage
    ! was allocated as a counted string and included the count word.
    !
    IF .DBG$GL_CISHEAD[CIS$B_INPUT_TYPE] EQL CIS_WHILE  OR
       .DBG$GL_CISHEAD[CIS$B_INPUT_TYPE] EQL CIS_REPEAT OR
       .DBG$GL_CISHEAD[CIS$B_INPUT_TYPE] EQL CIS_IF     OR
       .DBG$GL_CISHEAD[CIS$B_INPUT_TYPE] EQL CIS_FOR    OR
       .DBG$GL_CISHEAD[CIS$B_INPUT_TYPE] EQL CIS_SCREEN
    THEN
    	DBG$REL_MEMORY(.DBG$GL_CISHEAD[CIS$A_INIT_ADDR] - 2);


    ! If top link is a RAB, release the storage for the FAB, RAB and the
    ! buffer that holds the indirect command filespec.
    !
    IF .DBG$GL_CISHEAD[CIS$B_INPUT_TYPE] EQL CIS_RAB
    THEN
	BEGIN

	LOCAL
	    FAB_PTR : REF $FAB_DECL, ! File access block pointer
	    RAB_PTR : REF $RAB_DECL; ! Record access block pointer

	RAB_PTR = .DBG$GL_CISHEAD [ CIS$A_INPUT_PTR];
	FAB_PTR = .RAB_PTR [RAB$L_FAB];
	IF .DBG$GB_DEF_OUT [OUT_VERIFY]
	THEN
	    ICF_MESSAGE(2);	! Exiting the ICF


	! Release the filespec buffer. Remember this is a counted
	! string so the address and length have to be adjusted to 
	! include the count.
	!
    	DBG$REL_MEMORY (.FAB_PTR[FAB$L_FNA]-1);


	! CLOSE and DISCONNECT
	!
	$CLOSE (FAB=.fab_ptr);

    	dbg$rel_memory (.rab_ptr);
    	dbg$rel_memory (.fab_ptr);

    	! Release the space taken up by the local define list.
    	!
    	IF NOT dbg$def_pr_exit (.message_vect)
    	THEN
    	    RETURN sts$k_severe;

	END;

    IF NOT .exit_flag
    THEN
	BEGIN


    	! For a WHILE CIS, find out whether the condition is still true.
    	!
    	IF .dbg$gl_cishead [cis$b_input_type] EQL cis_while
    	THEN
    	    BEGIN
    	    while_flag = TRUE;
            cond = .dbg$gl_cishead [cis$v_while_flag];
    	    END
    	ELSE
    	    while_flag = FALSE;

	END;


    ! Remove the link from the command input stream
    !
    temp = .dbg$gl_cishead ;
    dbg$gl_cishead = .dbg$gl_cishead [cis$a_next_link];

    ! Now release the storage for the link itself 
    !
    dbg$rel_memory (.temp);

    IF NOT .exit_flag
    THEN
        ! If the cis is a WHILE, then set up the top cis for another iteration.
        !
        IF .while_flag
        THEN
    	    IF .cond
    	    THEN
    	        BEGIN
                dbg$gl_cishead [cis$a_input_ptr] = 
    		    .dbg$gl_cishead [cis$a_while_clause];
                dbg$gl_cishead [cis$w_length] = 
    		    .dbg$gl_cishead [cis$w_while_length];
    	        END;
 
    RETURN sts$k_success;

    END;

GLOBAL ROUTINE DBG$NGET_ADDRESS (ADDR_EXP_DESC, ADDRESS, TYPE, PROLOG_FLAG, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called with a descriptor, as returned
!	by the Address Expression Interpreter, to obtain the address bound to the
!	entity described by the descriptor. 
!
! FORMAL PARAMETERS:
!
!	ADDR_EXP_DESC	- A longword containing the address of either a 
!			  value or primary descriptor
!
!	ADDRESS		- The address of a quadword to contain the resulting
!			  byte address and bit offset
!
!	TYPE		- The address of a longword to contain the type of the address
!			  (No longer used).
!
!	PROLOG_FLAG	- A flag set to true to indicate this routine is
!			  called from SET BREAK/TRACE, SHOW BREAK/TRACE, where
!			  routine break address is taken from the primary
!			  routine/entry rst entry.
!			  
!	MESSAGE_VECT	- The address of a longword to contain the address of a
!			  message argument vector upon detection of errors
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	On error, a message argument vector is constructed and returned.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1)	- Success. Address and type returned.
!
!	STS$K_SEVERE  (4)	- Failure. No type and/or address obtained.
!				  Message argument vector returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--
    BEGIN
    MAP 
    	ADDRESS: REF VECTOR[,LONG],
    	ADDR_EXP_DESC: REF DBG$VALDESC; ! Points to a new style Descriptor.

    LOCAL
    	VMS_DESC: REF DBG$STG_DESC,
    	RSTPTR: REF RST$ENTRY;


    ! If the flag is set, take the break address from Routine/Entry RST
    ! in Primary.  (The only way this flag can be set is in DBGEVENT.)
    !
    IF .PROLOG_FLAG
    THEN
        BEGIN
    	RSTPTR = .ADDR_EXP_DESC[DBG$L_DHDR_SYMID0];
    	ADDRESS[0] = .RSTPTR[RST$L_BREAKADDR];
    	ADDRESS[1] = 0;
    	RETURN sts$k_success;
    	END;


    ! Check whether we are looking at a Primary Descriptor.
    !
    IF  .ADDR_EXP_DESC [DBG$B_DHDR_TYPE] EQL DBG$K_PRIMARY_DESC
    THEN
    	BEGIN


    	! Allocate temporary memory for the VMS descriptor.
    	!
    	VMS_DESC = DBG$GET_TEMPMEM (3);

    	! Call the routine that fills in the VMS descriptor.
    	!
    	DBG$MAKE_VMS_DESC (.ADDR_EXP_DESC, .VMS_DESC);    	    
    	END

    ! Check for Volatile Value Descriptor.
    !
    ELSE 
    	IF .ADDR_EXP_DESC [DBG$B_DHDR_TYPE] EQL DBG$K_V_VALUE_DESC
    	THEN
    	    VMS_DESC = ADDR_EXP_DESC [DBG$A_VALUE_VMSDESC]

    	! Any other kind of descriptor is an error.
    	!
    	ELSE
    	    $DBG_ERROR ('DBGNEXCTE\DBG$NGET_ADDRESS unexpected descriptor type');

    ! Fill in the output parameter to point to the 
    ! (byte address, bit offset) quadword in the VMS descriptor.
    !
    ADDRESS[0] = .VMS_DESC[DSC$A_POINTER];
    IF .VMS_DESC[DSC$B_CLASS] NEQ DSC$K_CLASS_UBS
    THEN
   	ADDRESS[1] = 0
    ELSE
   	ADDRESS[1] = .VMS_DESC[DSC$L_POS];

    RETURN sts$k_success;
    END;		! End of dbg$nget_address
END				!End of module
ELUDOM
