	.TITLE	DEADLOCK - DEADLOCK DETECTION AND RESOLUTION
	.IDENT	'V04-000'

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY: EXECUTIVE, SYSTEM SERVICES
;
; ABSTRACT: 
;	This module implements deadlock detection (and resolution)
;	for the VMS lock manager system services ($ENQ and $DEQ).
;
; ENVIRONMENT: VAX/VMS
;
; AUTHOR: Steve Beckhardt,	 CREATION DATE: 15-Jul-1981
;
; MODIFIED BY:
;
;	V03-013	SRB0150		Steve Beckhardt		21-Aug-1984
;		Cleared R9 prior to checking for conversion deadlocks.
;
;	V03-012	SRB0130		Steve Beckhardt		18-May-1984
;		Added support for LCK$M_NODLCKBLK flag and fixed bug
;		with LCK$M_NODLCKWT flag.
;
;	V03-011	SRB0122		Steve Beckhardt		30-Apr-1984
;		Fixed bug where local dequeue counter was going negative.
;		Fixed bug where deadlock searches were started during
;		state changes.
;
;	V03-010	SRB0117		Steve Beckhardt		9-Apr-1984
;		Added support for LCK$M_NODLCKWT flag.
;		Fixed bug where R9 was not preserved in LCK$DEQLOCK.
;		Added support for threads waiting for pool inserting
;		structures on the time out queue.
;
;	V03-009	SRB0115		Steve Beckhardt		5-Mar-1984
;		Added support for distributed deadlock detection.
;
;	V03-008 LY00B1		Larry Yetto		10-FEB-1984 09:52
;		Fix truncation errors
;
;	V03-007	SRB0102		Steve Beckhardt		9-Sep-1983
;		Fixed bug in SRB0100.
;
;	V03-006	SRB0100		Steve Beckhardt		15-Jul-1983
;		Added code to allow local deadlock detection to work
;		in a cluster.
;
;	V03-005	SRB0080		Steve Beckhardt		5-Apr-1983
;		Changed code for handling dequeuing deadlock victim
;		to use new support in LCK$DEQLOCK.
;
;	V03-004	SRB0073		Steve Beckhardt		25-Mar-1983
;		Added code to clear a register before calling LCK$DEQLOCK
;		as a result of changes to support cancelling lock requests.
;
;	V03-003	ROW0168		Ralph O. Weber		 3-MAR-1983
;		Change external data references to G^.
;
;	V03-002	DWT0055		David Thiel		18-Jul-1982
;		Use L^ mode for external references to
;		SCH$GL_PCBVEC.
;
;	V03-001	KDM0002		Kathleen D. Morse	28-Jun-1982
;		Added $SSDEF.
;--

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; EXTERNAL SYMBOLS:
;

	$CADEF				; Conditional assembly switches
	$CLSMSGDEF			; Cluster message offsets
	$CLUBDEF			; CLUB offsets
	$DYNDEF				; Structure type code definitions
	$LCKDEF				; LCK definitions
	$LKBDEF				; LKB offsets
	$PCBDEF				; PCB offsets
	$RSBDEF				; RSB offsets
	$SSDEF				; System status code definitions

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

LOCKFRAME = 24				; Number of bytes pushed onto
					; stack for each recursive call
					; of LCK$SRCH_RESDLCK  (5 registers
					; plus return address).  This
					; cannot be changes without making
					; corresponding coding changes

;
; OWN STORAGE:
;

	.PSECT	LOCKMGR

	.SBTTL	LCK$SEARCHDLCK - Search and break deadlocks

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine is the top level routine for identifying and resolving
;	deadlocks.  Identifying deadlocks is performed by two separate
;	routines.  One identifies conversion deadlocks (is only called
;	if this request is a conversion) and the other identifies multiple
;	resource deadlocks.  When a deadlock is found, one of the locks
;	forming the deadlock is selected as the "victim".  This lock
;	receives the status SS$_DEADLOCK in its LKSB and the lock request
;	is denied.  Multiple deadlocks are handled in the following way.
;	This routine quits after it finds and breaks one deadlock.  However,
;	in this case, if the original lock (R6) is not the victim, then it is
;	not removed from the lock timeout queue.  The next time that the 
;	timeout queue is examined this lock will again be searched for
;	deadlock.  This	is repeated until either no deadlock is found for this 
;	lock or	it is taken off the timer queue for another reason (for 
;	example, it gets granted).
;
;	This routine also must handle several instances where structures
;	having nothing to do with deadlock searching have been placed
;	on the time out queue.  These structures represent instances
;	in the distributed lock manager where a message needed to be
;	sent but pool could not be allocated.  Since, in general, the
;	structures could not accomodate a fork block, they are instead
;	inserting on the time out queue where here we resume the thread
;	of execution.
;
; CALLING SEQUENCE:
;
;	BSBW	LCK$SEARCHDLCK
;
; INPUT PARAMETERS:
;
;	R6	Address of LKB to determine if in deadlock cycle
;		This should either be a local or master copy lock.
;		This may also be a RSB waiting for pool to send a message.
;
; OUTPUT PARAMETERS:
;
;	None
;
; SIDE EFFECTS:
;
;	R0 - R4 are destroyed
;--

LCK$SEARCHDLCK::
	PUSHR	#^M<R5,R6,R7,R8,R9,R10,R11>
	TSTB	G^LCK$GB_STALLREQS	; Don't start a search if we are
	BLSS	8$			; in the middle of a state change

5$:	; Handle structures that need to resume threads waiting for pool.

	MOVL	R6,R7			; Save address of structure
	CMPB	LKB$B_TYPE(R6),-	; Is this a RSB?
		#DYN$C_RSB
	BNEQ	6$			; No
	REMQUE	(R6),R8			; Yes remove it from the timeout queue
					; and put RSB address in R8
	JSB	G^LCK$SND_RMVDIR	; Send a remove dir. entry message
	BRB	7$
6$:	TSTB	LKB$B_STATE(R6)		; Is the lock granted?
	BLEQ	10$			; No
	BBC	#LKB$V_MSTCPY,-		; Yes, lock must be a master copy
		LKB$W_STATUS(R6),9$
	MOVL	LKB$L_RSB(R6),R8	; Get RSB address
	JSB	G^LCK$SND_GRANTED	; Send a lock granted message
7$:	CMPL	G^LCK$GL_TIMOUTQ,R7	; Is the same structure back on the queue?
	BEQL	8$			; Yes, exit
	BRW	60$			; No, try next structure
8$:	BRW	LCK$DLCKEXIT

9$:	BUG_CHECK	LOCKMGRERR,FATAL; Granted lock is not master copy

10$:	; Have a master or local copy lock.  The lock is still on the
	; timeout queue.

	.IF NE	CA$_MEASURE
	INCL	L^PMS$GL_DLCKSRCH
	.ENDC

	ASSUME	LKB$K_GRANTED  EQ  1
	ASSUME	LKB$K_CONVERT  EQ  0
	ASSUME	LKB$K_WAITING  EQ  -1

	CLRL	R9			; Indicate no timestamp assigned
	TSTB	LKB$B_STATE(R6)		; Is this lock on the conversion queue?
	BNEQ	11$			; No, must be on wait queue
	BSBW	SEARCH_CVTDLCK		; Yes, search for conversion deadlocks
	TSTL	R0			; Was a deadlock found?
	BLSS	50$			; Yes, and we must exit for now
	BGTR	60$			; Yes, but we can search again

11$:	; We didn't have a conversion deadlock so now we have to search 
	; for multiple resource deadlocks.  Set up registers and determine 
	; if bitmap is available for use.  Note that normally references
	; to EXE$GQ_SYSTIME should be at IPL$_HWCLK.  However, we can tolerate
	; the race condition of referencing it at IPL$_SYNCH here.  The
	; result would be to incorrectly conclude that the bitmap is in use
	; which would cause us to retry later.

	MOVZWL	LKB$L_PID(R6),R4	; Get process index
	BEQL	12$			; Must be a master copy
	MOVL	@L^SCH$GL_PCBVEC[R4],R4	; Convert to PCB address
	MOVL	PCB$L_EPID(R4),R8	; Get EPID
	MOVAL	PCB$L_LOCKQFL(R4),R4	; Make R4 point to lock queue in PCB
	BRB	14$
12$:	MOVL	LKB$L_EPID(R6),R8	; Get EPID
14$:	MOVL	G^LCK$GL_PRCMAP,R7	; Get address of process bitmap
	MOVL	SP,R10			; Save current stack pointer
	ADDL3	G^LCK$GL_EXTRASTK,-	; Compute upper bound for stack
		G^EXE$GL_INTSTKLM,R11	; (allow LCK$GL_EXTRASTK plus one
	ADDL	#LOCKFRAME,R11		; lock frame)

	MOVAQ	G^LCK$GQ_BITMAP_EXP,R0	; Get address of bitmap expiration
	CMPL	12(R0),G^EXE$GQ_SYSTIME+4; Compare with local expiration time

	BLSSU	20$			; Bitmap is available
	BGTRU	15$			; Bitmap may be in use
	CMPL	8(R0),G^EXE$GQ_SYSTIME	; Compare low order parts
	BLEQU	20$			; Bitmap is available

15$:	; Bitmap may be in use;  need to send a message to get a timestamp.
	; Note that if we really send a message that we won't return here
	; but will exit deadlock detection for now.

	JSB	G^LCK$SND_TIMESTAMP_RQST
	BRB	40$			; In case we do return with a timestamp

20$:	CLRQ	(R0)			; Indicate bitmap has been reused
	PUSHL	R4
	MOVC5	#0,(R7),#0,-8(R7),(R7)	; and clear it
	POPL	R4

40$:	; Register usage at this point:
	;
	;	R4	Address of PCB+PCB$L_LOCKQFL (except master copies)
	;	R6	Address of original LKB to perform search for
	;	R7	Address of process bitmap
	;	R8	EPID of process we are doing search for
	;	R9	Indicates if we have a timestamp
	;	R10	Current stack pointer
	;	R11	Top of useable stack (there is some extra space)

	BSBW	LCK$SRCH_RESDLCK	; Search for multiple resource deadlocks
	TSTL	R0			; Was a deadlock found?
50$:	BLSS	LCK$DLCKEXIT		; Yes, and we must exit for now
	BGTR	60$			; Yes, but we can search again

	; No deadlock was found.  Remove this lock from the timeout queue.

	REMQUE	LKB$L_ASTQFL(R6),R0	; Remove from queue
	BICW	#LKB$M_TIMOUTQ,-	; Clear status bit indicating
		LKB$W_STATUS(R6)	; lock was on timeout queue

60$:	; See if we need to do another search (the same lock may still
	; be at the head of the timeout queue or another lock may have
	; also timed out).  We do this here instead of in TIMESCHDL because
	; there are other exits from this routine that leave a timed out
	; lock at the head of the queue so that a search can be restarted
	; a second from now.

	MOVAL	L^LCK$GL_TIMOUTQ,R5	; Get address of list head
	MOVL	(R5),R6			; Get first entry on list
	CMPL	R5,R6			; Is list empty?
	BEQL	LCK$DLCKEXIT		; Yes
	CMPL	LKB$L_DUETIME(R6),-	; No, has this one timed out?
		L^EXE$GL_ABSTIM
	BGTRU	LCK$DLCKEXIT		; No, exit
	BRW	5$			; Yes, do another deadlock search

LCK$DLCKEXIT::
	POPR	#^M<R5,R6,R7,R8,R9,R10,R11>
	RSB


	.SBTTL	SEARCH_CVTDLCK - Search for conversion deadlocks

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine searches for conversion deadlocks and selects a victim
;	if one is found.  A conversion deadlock is one in which a conversion
;	request has a granted mode incompatible with the requested mode
;	of another conversion request ahead of it in the conversion 
;	queue.  For example, assume there are two PR
;	locks on a resource.  One PR lock tries to convert to EX and
;	therefore must wait.  Then the second PR lock tries to convert to
;	EX and it too must wait.  However, the first will never get granted
;	since its requested mode (EX) is incompatible with the second's
;	granted mode (PR).  The second will never get granted since 
;	it's waiting behind the first.
;	To find conversion deadlocks it is sufficient to check all locks
;	ahead of this lock on the conversion queue to see if their
;	requested modes are incompatible with this lock's granted mode.
;
; CALLING SEQUENCE:
;
;	BSBW	SEARCH_CVTDLCK
;
; INPUT PARAMETERS:
;
;	R6	Address of LKB to search for conversion deadlocks
;	R9	Contains 0 indicating no message buffer
;
; OUTPUT PARAMETERS:
;
;	R0	Completion code:
;			0  = No deadlock found
;			1  = Deadlock found and another search may be performed
;			-1 = Deadlock may or may not have been found but don't 
;			     perform another search immediately.  Typical 
;			     reasons are master copy was on this system
;			     so another deadlock search cannot be repeated
;			     immediately (or we will find the same one again)
;			     or we needed to allocate a CDRP but failed to
;			     allocate pool.
;
; SIDE EFFECTS:
;
;	R0 - R2 and R5 are destroyed if a deadlock is not found
;	R0 - R8 are destroyed if a deadlock is found
;--

SEARCH_CVTDLCK:
	ADDL3	LKB$L_RSB(R6),-		; Point to head of conversion queue
		#RSB$L_CVTQFL,R5
	MOVZBL	LKB$B_GRMODE(R6),R2	; Get granted mode of current lock
	MOVL	R6,R1			; Address of current lock
10$:	MOVL	LKB$L_SQBL(R1),R1	; Get previous lock in queue
	CMPL	R1,R5			; Reached the queue head yet?
	BEQL	80$			; Yes
	SUBL	#LKB$L_SQFL,R1		; Back up to start of LKB
	MOVZBL	LKB$B_RQMODE(R1),R0	; Get requested mode
	BBS	R0,W^LCK$COMPAT_TBL[R2],10$ ; Branch if compatible

	; Have a conversion deadlock.  The victim is the one with the lower
	; deadlock priority.  R1 and R6 contain the two LKB addresses.
	; Either one of these locks could be a master copy;  get the two
	; deadlock priorities out of either the PCB of the LKB.

	MOVL	L^SCH$GL_PCBVEC,R5	; Get address of PCB vector
	MOVZWL	LKB$L_PID(R1),R0	; Get process index
	BEQL	20$			; Master copy
	MOVL	(R5)[R0],R0		; Get PCB address
	MOVL	PCB$L_DLCKPRI(R0),R2	; R2 has pri. for lock in R1
	BRB	30$
20$:	MOVL	LKB$L_DLCKPRI(R1),R2	; R2 has pri. for lock in R1
30$:	MOVZWL	LKB$L_PID(R6),R0	; Get process index
	BEQL	40$			; Master copy
	MOVL	(R5)[R0],R0		; Get PCB address
	MOVL	PCB$L_DLCKPRI(R0),R3	; R3 has pri. for lock in R6
	BRB	50$
40$:	MOVL	LKB$L_DLCKPRI(R6),R3	; R3 has pri. for lock in R6

50$:	CMPL	R2,R3			; Compare the deadlock priorities
	BGEQU	60$			; Branch if orig. lock is victim
	MOVL	R1,R6			; Other lock is victim
60$:	CLRL	R3			; Indicates R6 has LKB address
	BSBW	LCK$BREAK_DEADLOCK	; Break deadlock; returns status in R0
	RSB

80$:	CLRL	R0			; No deadlock found
	RSB

	.SBTTL	LCK$SRCH_RESDLCK - Search for resource deadlocks

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine searches for multiple resource deadlocks and selects
;	a victim if one is found.  A multiple resource deadlock is one
;	in which a circular list of processes are each waiting for one
;	another on two or more resources.  For example, assume process A
;	locks resource 1, process B locks resource 2, then process A
;	locks resource 2 (and waits), and finally process B locks
;	resource 1 (and waits).  A and B are each waiting for the other on
;	different resources.  This type of deadlock must involve two or
;	more resources unless one process locks the same resource twice.
;	(Normally, it is senseless for one process to lock the
;	same resource twice but this does make sense if the process
;	is multi-threaded).
;	To find multiple resource deadlocks a recursive algorithm is used.
;	The basis of this algorithm is for each process with a lock on 
;	the current resource blocking the current lock, find any waiting
;	locks that process has and recursively see what processes are
;	blocking those locks.  As we do this, see if we can find a path
;	back to the current process.  In other words, we are travelling
;	a graph of waiting processes searching for a path back to our
;	starting point.  If we find one, then the stack consists of a 
;	list of waiting processes and locks forming a deadlock.  The lock
;	with the minimum deadlock priority is selected as a victim
;	and we return.  Multiple deadlocks are handled by calling this 
;	routine again.
;	To prevent this algorithm from looping on a deadlock cycle that
;	doesn't include the original process (R8), a bitmap representing
;	each process in the system is used.  Whenever a particular
;	process is visited, the corresponding bit is set.  If the bit
;	is already set, then we won't visit that process after all.  Note
;	that when we leave a process, the corresponding bit is NOT cleared.
;	The result of this is that deadlock cycles not involving the original
;	process are not found (yet).  Instead, they are ignored by this
;	deadlock search, but will be found later when a lock in that 
;	cycle times out.  The reason for not clearing the bitmap is that
;	this dramatically improves the worst-case  behavior of the
;	algorithm by not visiting a process if it has been visited before.
;
; CALLING SEQUENCE:
;
;	BSBW	LCK$SRCH_RESDLCK
;
; INPUT PARAMETERS:
;
;	R4	Address of PCB + PCB$L_LOCKQFL (to determine who is blocking)
;		(only if R6 is not a master copy)
;	R6	Address of LKB (to determine who is blocking)
;	R7	Address of process bitmap (one bit for each process in system)
;	R8	EPID of process that initiated search (our starting point)
;	R9	Address of input message or zero
;	R10	Bottom of deadlock stack
;	R11	Top of useable stack (so that we don't overflow the stack)
;
; OUTPUT PARAMETERS:
;
;	R0	Completion code:
;			0  = No deadlock found
;			1  = Deadlock found (normal)
;			-1 = Deadlock found; master copy was on this system
;			     so another deadlock search cannot be repeated
;			     immediately (or we will find the same one again)
;
;
; SIDE EFFECTS:
;
;	R1 is destroyed if a deadlock is not found
;	R0 - R8 are destroyed if a deadlock is found
;--

; Note:  The following are the register conventions used by this routine.
;	 R0 and R1 may be used as scratch registers.  Each time this
;	 routine is called (recursively) R2 - R6 are saved on the stack.  
;	 R7 - R11  remain constant during the recursive calls.  Registers
;	 are used as follows:
;
;		R2	Maximum lock mode computed so far
;		R3	Address of queue header in RSB
;		R4	Address of PCB + PCB$L_LOCKQFL (address of queue header)
;		R5	Address of LKB blocking LKB in R6
;		R6	Address of LKB to determine who is blocking
;		R7	Address of process bitmap
;		R8	Ultimate EPID we are searching for
;		R9	Address of input message or zero
;		R10	Bottom of deadlock stack
;		R11	Top of useable stack
;
;	Note that there are several assumptions made in the code about
;	what registers are used for what and the order in which they
;	are saved on the stack.  Specifically, the loop that selects
;	the deadlock victim assumes both the number of resisters saved
;	and their relative positions on the stack.  See also the
;	definition of the symbol LOCKFRAME at the beginning of this module.

STATE_ERROR:
	BUG_CHECK	LOCKMGRERR,FATAL

LCK$SRCH_RESDLCK::
	PUSHR	#^M<R2,R3,R4,R5,R6>	; Can't change this without also
					; changing value of LOCKFRAME and
					; deadlock resolution code

	; First run through all locks waiting ahead of this lock
	; maximizing the requested modes and checking all locks
	; incompatible with the current "maxmode".  If this lock is
	; on the wait queue then we do the wait queue first and
	; the converison queue next.  If this lock is on the
	; conversion queue then we do only the conversion queue.
	; Later we'll do all the granted locks.

	ASSUME	RSB$L_CVTQFL  EQ  RSB$L_GRQFL+8
	ASSUME	RSB$L_WTQFL  EQ  RSB$L_CVTQFL+8

	MOVZBL	LKB$B_RQMODE(R6),R2	; R2 = this lock's requested mode
	ADDL3	#RSB$L_CVTQFL,-		; R3 = Addr. of cvt. queue header
		LKB$L_RSB(R6),R3
	TSTL	RSB$L_CSID-RSB$L_CVTQFL(R3) ; Verify resource is mastered here
	BNEQ	STATE_ERROR	
	DISPATCH	LKB$B_STATE(R6),TYPE=B,PREFIX=LKB$K_,-
		<-
		<CONVERT,10$>,-
		<WAITING,5$>-
		>
	BRB	STATE_ERROR		; Shouldn't have locks in other states
5$:	ADDL	#8,R3			; Wait queue - point to wait queue hdr
10$:	MOVL	R6,R5			; R5 will point to other LKB's
					; in front of the one pointed to by R6

20$:	MOVL	LKB$L_SQBL(R5),R5	; Get previous lock on state queue
	CMPL	R5,R3			; Reached head of queue yet?
	BNEQ	15$			; No
	BRW	50$			; Yes
15$:	SUBL	#LKB$L_SQFL,R5		; Back up to point to start of LKB
	CMPB	LKB$B_STATE(R5),-	; Is lock in an SCS state?
		#LKB$K_WAITING
	BLSS	20$			; Yes, ignore
	MOVZBL	LKB$B_RQMODE(R5),R0	; R0 = requested mode
	MOVL	R2,R1			; Save old maxmode

	; Maximize lock modes (in R0 and R2) and see if this lock (R5) is
	; incompatible with (the previous) maxmode.  The maximization function 
	; is a simple arithmetic maximum except if the two modes are CW and PR.
	; In that case the maximum of CW and PR is PW.  PW is incompatible
	; with everything either CW or PR is incompatible with.

	CMPB	R0,R2			; Current mode greater than maxmode?
	BEQL	25$			; No, they're equal
	BGTRU	21$			; Yes, compute new maxmode
	CMPB	R0,#LCK$K_CWMODE	; No, is current mode CW?
	BNEQ	25$			; No, maxmode = R2
	CMPB	R2,#LCK$K_PRMODE	; Yes, is maxmode PR?
	BNEQ	25$			; No, maxmode = R2
	BRB	22$			; Yes, new maxmode is PW
21$:	CMPB	R2,#LCK$K_CWMODE	; Is maxmode CW?
	BNEQ	23$			; No, maxmode = R0
	CMPB	R0,#LCK$K_PRMODE	; Yes, is current mode PR?
	BNEQ	23$			; No, maxmode = R0
22$:	MOVB	#LCK$K_PWMODE,R2	; Have CW and PR; maxmode = PW
	BRB	25$
23$:	MOVB	R0,R2			; Maxmode = R0

25$:	BBS	R0,-			; Branch if compatible with 
		W^LCK$COMPAT_TBL[R1],20$; saved maxmode
	BBS	#LCK$V_NODLCKBLK,-	; Branch if this lock should not be
		LKB$W_FLAGS(R5),20$	; considered as blocking other locks

	; Have a lock incompatible with maxmode.  First see
	; if the process owning the lock (in R5) is the process we
	; started with (in R8).  If it is, then we have deadlock.  If not,
	; then see if the process has any other waiting locks.  If it
	; does then we have to recurse down a level.  If it doesn't then
	; we can continue at this level.

	BBC	#LKB$V_MSTCPY,-		; Branch if not master copy lock
		LKB$W_STATUS(R5),28$
	CMPL	LKB$L_EPID(R5),R8	; Have a master copy; deadlock found?
	BEQL	45$			; Yes
	MOVL	R5,R6			; No
	JSB	G^LCK$SND_SRCHDLCK	; Send a message to keep looking
	BRB	20$			; Continue on this RSB
28$:	MOVZWL	LKB$L_PID(R5),R0	; Get process index
	MOVL	@L^SCH$GL_PCBVEC[R0],R4	; Convert to PCB address
	CMPL	PCB$L_EPID(R4),R8	; Is this the original process?
	BEQL	45$			; Yes, have a deadlock
	BBSS	R0,(R7),20$		; Br. if we've already done this process
	MOVAL	PCB$L_LOCKQFL(R4),R4	; Point to lock queue header
	MOVL	4(R4),R6		; Get last lock in list
30$:	MOVAL	-LKB$L_OWNQFL(R6),R6	; Point to start of LKB
	CMPL	R5,R6			; Is this the one we have in R5?
	BEQL	35$			; Yes, move on to next one
	DISPATCH	LKB$B_STATE(R6),TYPE=B,PREFIX=LKB$K_,-
		<-
		<CONVERT,32$>,-
		<WAITING,32$>-
		>
	BRW	20$
32$:	BBS	#LCK$V_NODLCKWT,-	; Branch if this lock should not be
		LKB$W_FLAGS(R6),35$	; considered as waiting for other locks
	MOVL	LKB$L_RSB(R6),R0	; Get RSB for this lock
	TSTL	RSB$L_CSID(R0)		; Is it managed elsewhere?
	BEQL	34$			; No, recurse here
	JSB	G^LCK$SND_SRCHDLCK	; Yes, send a message to keep searching
	BRB	35$			; Continue with this PCB
34$:	CMPL	SP,R11			; Is there enough stack to recurse?
	BLSSU	45$			; No, have to assume deadlock
	BSBW	LCK$SRCH_RESDLCK	; Yes, recursively search
35$:	MOVL	LKB$L_OWNQBL(R6),R6	; Get previous lock
	CMPL	R6,R4			; Reached end of list?
	BNEQ	30$			; No, get next lock in PCB (inner loop)
40$:	BRW	20$			; Yes, get next lock in RSB (outer loop)

45$:	BRW	DEADLOCK_FOUND

50$:	; Reached the queue header.  Back up R3 to point to the previous
	; queue header in the RSB.  If R3 is pointing to the granted
	; queue, then we are done with this loop and we continue with
	; the granted queue.  Otherwise, we repeat this loop for the
	; conversion queue.

	SUBL	#8,R3			; Back up R3 one queue header
	MOVAB	-LKB$L_SQFL(R3),R5	; Prepare to process that queue
	MOVL	16(SP),R6		; Restore R6
	ADDL3	#RSB$L_GRQFL,-		; R0 = address of granted queue
		LKB$L_RSB(R6),R0
	CMPL	R3,R0			; Have we reached the granted queue?
	BNEQ	40$			; No, repeat for conversion queue

	; Now repeat a similar procedure for all locks on the granted
	; queue whose granted mode is incompatible with the maxmode
	; in R2.

60$:	MOVL	LKB$L_SQFL(R5),R5	; Get next lock in granted queue
	CMPL	R5,R3			; Reached end of queue?
	BEQL	90$			; Yes, no deadlock
	SUBL	#LKB$L_SQFL,R5		; Back up to point to start of LKB
	MOVZBL	LKB$B_GRMODE(R5),R0	; Get granted mode
	BBS	R0,W^LCK$COMPAT_TBL[R2],60$ ; Branch if compatible
	BBS	#LCK$V_NODLCKBLK,-	; Branch if this lock should not be
		LKB$W_FLAGS(R5),60$	; considered as blocking other locks

	; Have an incompatible lock on the granted queue.  First see
	; if the process owning the lock (in R5) is the process we
	; started with (in R8).  If it is, then we have deadlock.  If not,
	; then see if the process has any waiting locks.  If it
	; does then we have to recurse down a level.  If it doesn't then
	; we can continue at this level.

	BBC	#LKB$V_MSTCPY,-		; Branch if not master copy lock
		LKB$W_STATUS(R5),63$
	CMPL	LKB$L_EPID(R5),R8	; Have a master copy; deadlock found?
	BEQL	DEADLOCK_FOUND		; Yes
	MOVL	R5,R6			; No
	JSB	G^LCK$SND_SRCHDLCK	; Send a message to keep looking
	BRB	60$			; Continue on this RSB
63$:	MOVZWL	LKB$L_PID(R5),R0	; Get process index
	BEQL	60$			; Ignore system owned locks
	MOVL	@L^SCH$GL_PCBVEC[R0],R4	; Convert to PCB address
	CMPL	PCB$L_EPID(R4),R8	; Is this the original process?
65$:	BEQL	DEADLOCK_FOUND		; Yes, have a deadlock
	BBSS	R0,(R7),60$		; Br. if we've already done this process
	MOVAL	PCB$L_LOCKQFL(R4),R4	; Point to lock queue header
	MOVL	4(R4),R6		; Get last lock in list
70$:	MOVAL	-LKB$L_OWNQFL(R6),R6	; Back up to start of LKB
	DISPATCH	LKB$B_STATE(R6),TYPE=B,PREFIX=LKB$K_,-
		<-
		<CONVERT,71$>,-
		<WAITING,71$>-
		>
	BRB	60$			; Done with this PCB
71$:	BBS	#LCK$V_NODLCKWT,-	; Branch if this lock should not be
		LKB$W_FLAGS(R6),75$	; considered as waiting for other locks
	MOVL	LKB$L_RSB(R6),R0	; Get RSB for this lock
	TSTL	RSB$L_CSID(R0)		; Is it managed elsewhere?
	BEQL	72$			; No, recurse here
	JSB	G^LCK$SND_SRCHDLCK	; Yes, send a message to keep searching
	BRB	75$			; Continue with this PCB
72$:	CMPL	SP,R11			; Is there enough stack to recurse?
73$:	BLSSU	DEADLOCK_FOUND		; No, have to assume deadlock
	BSBW	LCK$SRCH_RESDLCK	; Yes, recursively search
75$:	MOVL	LKB$L_OWNQBL(R6),R6	; Get previous lock
	BRB	70$			; Repeat inner loop - Note we don't 
					; check for end of queue since there 
					; must be at least one granted lock

90$:	CLRL	R0			; No deadlock found

SEARCH_EXIT:
	POPR	#^M<R2,R3,R4,R5,R6>
	RSB

DEADLOCK_FOUND:
;	 Come here if we found a deadlock.  The stack consists of
;	 a series of stack frames, one for each lock involved in
;	 the deadlock.  Each stack frame consists of the 5 saved
;	 registers (R2 - R6) and a return address.  Note that in
;	 each stack frame the saved R6 points to the lock and the
;	 saved R4 points to the respective PCB lock queue (if the lock
;	 is not a master copy.  In principal, only the first and last
;	 frames could represent master copy locks (the frame that started
;	 this search and the frame that ended it).
;	 The stack frames are bounded by R10 and the current SP.
;	 The following diagram shows the stack with three frames.
;	
;	
;	  SP -> +---------------+	     .  +-----------------------+
;		|---------------|	   .	|       Saved R2        |
;		|---------------|        .	|                       |
;		|---------------|      .	+-----------------------+
;		|---------------|    .		|       Saved R3        |
;		|---------------|  .		|                       |
;		+---------------+.		+-----------------------+
;		|---------------|		|       Saved R4        |
;		|---------------|		| (PCB + PCB$L_LOCKQFL) |
;		|---------------|		+-----------------------+
;		|---------------|		|       Saved R5        |
;		|---------------|.		|                       |
;		+---------------+  .            +-----------------------+
;		|---------------|    .		|       Saved R6        |
;		|---------------|      .	|    (Address of LKB)   |
;		|---------------|	 .	+-----------------------+
;		|---------------|	   .	|     Return Address    |
;		|---------------|	     .  |                       |
;	 	+---------------+	        +-----------------------+
;	 R10 ->
;	
;	 We will now search the frames looking for the process with
;	 the smallest deadlock priority.  When found, the respective
;	 deadlock priority will be compared with that in the input message
;	 (if any).  The objective is to find the best candidate for a deadlock
;	 victim.  After the deadlock is broken the stack will be trimmed 
;	 back so that we will return to
;	 the original caller.  Note that a deadlock priority of zero 
;	 causes an immediate exit from the loop.  Register usage will be:
;	
;		R0	Current deadlock priority
;		R1	Current lock frame pointer
;		R2	Minimum deadlock priority, so far
;		R3	Best victim frame, so far
;		R4	Address of PCB lock queue (current frame)
;		R9	Address of input message or zero
;		R10	Bottom of stack (start search here)
;		SP	Top of stack (end search here)
;	
;	 Note that the following code makes a number of assumptions
;	 regarding the order of registers saved on the stack and their
;	 contents.

	SUBL3	#LOCKFRAME,R10,R1	; Initialize current frame pointer
	MOVL	R1,R3			; Initialize "best" frame pointer
	MNEGL	#1,R2			; Initialize "best" deadlock priority
20$:	MOVL	16(R1),R0		; Get LKB address
	BBC	#LKB$V_MSTCPY,-		; Branch if not master copy
		LKB$W_STATUS(R0),25$
	MOVL	LKB$L_DLCKPRI(R0),R0	; Get deadlock priority from master copy
	BRB	28$
25$:	MOVL	8(R1),R4		; Get pointer to PCB lock queue
	MOVL	PCB$L_DLCKPRI-PCB$L_LOCKQFL(R4),R0 ; Get current deadlock pri.
28$:	BEQL	35$			; Branch if zero - have best victim
	CMPL	R0,R2			; Compare current priority with 
	BGEQU	30$			; previous minimum.
	MOVQ	R0,R2			; This frame becomes "best so far"
30$:	SUBL	#LOCKFRAME,R1		; Move to next frame
	CMPL	R1,SP			; Reached top of stack yet?
	BGEQU	20$			; No, repeat for next frame
	BRB	40$
35$:	MOVQ	R0,R2			; Move priority and frame pointer

40$:	; Compare lowest deadlock priority so far (R2) with that in the
	; input message (if any) and select the lower.  R3 points to "best"
	; stack frame.

	TSTL	R9			; Any message?
	BEQL	45$			; No
	CMPL	R2,LKMSG$L_VCTMPRI(R9)	; Compare priorities
	BGTRU	50$			; The one in the message was lower

45$:	; The one on the stack was lower;  R3 points to the relavant frame.

	MOVL	16(R3),R6		; Get address of LKB
	CMPB	LKB$B_TYPE(R6),-	; Make sure it's a LKB
		#DYN$C_LKB
	BNEQ	90$			; Bugcheck
	CLRL	R3			; Indicate we have an LKB address
	BRB	60$

50$:	; The one in the message was lower

	MOVQ	LKMSG$L_VCTMLKID(R9),R2	; Get victim lockid (R2) and CSID (R3)

60$:	; Break the deadlock

	BSBB	LCK$BREAK_DEADLOCK	; Returns status in R0

	SUBL3	#LOCKFRAME,R10,SP	; Remove all frames but one from stack
	BRB	SEARCH_EXIT		; Return to original caller

90$:	BUG_CHECK	NOTLKB,FATAL

	.SBTTL	LCK$BREAK_DEADLOCK - Break a deadlock

;++
; FUNCTIONAL DESCRIPTION:
;
;	This routine is called to break a deadlock.  The victim lock
;	has already been selected and may be passed to this routine
;	as either an LKB address or a lockid.  Note that the specified lock 
;	may not even exist on this system (as either a master or process copy).
;	Specifically, the following cases are handled:
;
;	o  The victim lock is a local copy on this system.  In this
;	   case it is cancelled locally.
;	o  The victim lock is a process copy on this system.  It is
;	   cancelled locally, but a message is sent to the master system.
;	o  Any other case sends a message to the process system for that
;	   lock.
;
;	If the lock is cancelled here, then we also determine if it
;	is necessary to send a message to redo the original search.
;
; CALLING SEQUENCE:
;
;	BSBW	LCK$BREAK_DEADLOCK
;
; INPUT PARAMETERS:
;
;	R2	Lockid of process copy of lock (only if R3 is not 0)
;	R3	CSID of process copy of lock (or 0 indicating R6 has
;		an LKB address)
;	R6	Address of LKB (only if R3 is 0)
;	R9	Address of message buffer (or 0 indicating no message)
;
; OUTPUT PARAMETERS:
;
;	R0	Completion code:
;			1  = Deadlock found (normal)
;			-1 = Deadlock found; master copy was on this system
;			     so another deadlock search cannot be repeated
;			     immediately (or we will find the same one again)
;
; SIDE EFFECTS:
;
;	R0 - R8 are not preserved
;--


LCK$BREAK_DEADLOCK::
	TSTL	R3			; Do we have a lockid or LKB address?
	BEQL	20$			; LKB address
	MOVL	G^CLU$GL_CLUB,R0	; Get CLUB address
	CMPL	R3,CLUB$L_LOCAL_CSID(R0); Is it the CSID of this system?
	BNEQ	30$			; No
	MOVL	R2,R4			; Yes, move lockid
	JSB	G^LCK$CVT_ID_TO_LKB	; and convert to LKB address
	BLBC	R0,5$			; No LKB to cancel; still redo search
	BBS	#LKB$V_MSTCPY,-		; Verify not master copy
		LKB$W_STATUS(R6),10$
	DISPATCH	LKB$B_STATE(R6),TYPE=B,PREFIX=LKB$K_,-
		<-
		<CONVERT,60$>,-
		<WAITING,60$>-
		>
5$:	BRB	75$			; Lock is not waiting; still redo search

10$:	BUG_CHECK	LOCKMGRERR,FATAL; Victim lock is master copy

20$:	; Have a LKB address.  See if it's a master copy

	BBC	#LKB$V_MSTCPY,-		; Branch if not master copy
		LKB$W_STATUS(R6),60$
	MOVL	LKB$L_REMLKID(R6),R2	; Get process lockid
	MOVL	LKB$L_CSID(R6),R3	; and CSID

30$:	; Send a message to the process system informing it that it
	; has a deadlock victim

	JSB	G^LCK$SND_DLCKFND	; Send message
	MNEGL	#1,R0			; Set status
	RSB

60$:	; Here is where we actually break the deadlock.  If the lock was 
	; a new lock request, then it is dequeued.  If the lock was a 
	; conversion, then it is regranted at its old lock mode.  In either case
	; the completion status (in the LKSB) is SS$_DEADLOCK.
	; Note that the lock database may change as a result 
	; of the victim lock being dequeued (or regranted).  For example,
	; when a lock is dequeued, it is possible for other locks to
	; be granted (possibly the original lock that started the deadlock 
	; search).
	; The victim lock (R6) may be either a local or process copy lock on 
	; this system.  Get master lockid and CSID and save for later
	; in order to decide if the original search must be repeated.

	.IF NE	CA$_MEASURE
	INCL	L^PMS$GL_DLCKFND
	INCL 	L^PMS$GL_DEQ_LOC
	.ENDC

	PUSHL	R9			; Save R9
	PUSHL	LKB$L_LKID(R6)		; Save lockid
	MOVL	LKB$L_RSB(R6),R0	; Get RSB address
	PUSHL	RSB$L_CSID(R0)		; Save CSID of system mastering lock
	BEQL	65$			; It's this system
	MOVL	LKB$L_REMLKID(R6),4(SP)	; Save remote lockid instead
65$:	MOVL	S^#LCK$M_CANCEL,R4	; Set CANCEL flag
	MOVZWL	#SS$_DEADLOCK,R7	; Set error status
	BSBW	LCK$DEQLOCK		; Cancel lock request
	POPR	#^M<R4,R5,R9>		; Restore CSID (R4) and LKID (R5) and R9
	CMPW	R0,#SS$_INSFMEM		; Were we unable to allocate a CDRP?
	BEQL	75$			; Yes, redo search
	BLBC	R0,DEQ_ERROR		; Error - bugcheck

70$:	; If this was a purely local search (R9=0), then we are done.
	; If the original lock that started the search was the victim,
	; then it has been removed from the timeout queue.  Otherwise, it
	; is still on the timeout queue and we will start another deadlock
	; search for it.
	; If this was a distributed search (R9<>0), then it is necessary
	; to redo the original search unless the original lock was the victim.
	; The lockid and CSID of the original lock is in the message.
	; R4 and R5 contain the lockid and CSID of the lock chosen as
	; victim.  Note that in both cases we are referring to the master
	; lockid and CSID.

	TSTL	R9			; Was this a local search?
	BEQL	80$			; Yes, exit
	MOVQ	LKMSG$L_ORIGLKID(R9),R2	; Get original lockid (R2) and CSID (R3)
	MOVL	G^CLU$GL_CLUB,R0	; Get address of CLUB
	CMPL	R3,CLUB$L_LOCAL_CSID(R0); Is the CSID this system?
	BNEQ	72$			; No
	CLRL	R3			; Yes, use zero for local CSID
72$:	CMPL	R3,R4			; Do CSIDs match?
	BNEQ	75$			; No
	CMPL	R2,R5			; Do lockids match?
	BEQL	80$			; Yes, victim was original lock

75$:	; Must redo the original search (as long as we have a message (R9)
	; with the original CSID and lockid)

	MOVL	R9,R2			; Move address of message
	BEQL	80$		
	JSB	G^LCK$SND_REDO_SRCH	; Redo the search
80$:	MOVL	#1,R0
	RSB


DEQ_ERROR:
	BUG_CHECK	LOCKMGRERR,FATAL ; Lock was granted or other dequeue
					 ; error




	.END

