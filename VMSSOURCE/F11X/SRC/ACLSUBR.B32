MODULE ACLSUBR (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000',
		ADDRESSING_MODE (EXTERNAL = GENERAL)
		) =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	File system subroutines
!
! ABSTRACT:
!
!	This module contains the subroutines that manage in memory
!	access control lists.
!
! ENVIRONMENT:
!
!	Modular procedure. No own storage used.
!
!--
!
!
! AUTHOR:	L. Mark Pilant		CREATION DATE:	30-Sep-1982  11:00
!
! MODIFIED BY:
!
!	V03-006	LMP0290		L. Mark Pilant,		31-Jul-1984  10:40
!		Make sure ACL_MODENTRY tracks the ACL_LOCATEACE interface
!		change.
!
!	V03-005	LMP0284		L. Mark Pilant,		25-Jul-1984  15:06
!		Add an ACL initialization routine, ACL_INIT_QUEUE.
!
!	V03-004	LMP0273		L. Mark Pilant,		6-Jul-1984  13:56
!		Fix a bug that caused an ACE to be dropped when the user's
!		buffer filled up during an ACL read.
!
!	V03-003	ACG0426		Andrew C. Goldstein,	4-May-1984  15:14
!		Fix clearing of input buffer in ACL_ERROR call in ACL_ADDENTRY
!
!	V03-002	ACG0418		Andrew C. Goldstein,	19-Apr-1984  13:15
!		Fix returning of NOMOREACE in reading ACL's
!
!	V03-001	ACG0415		Andrew C. Goldstein,	3-Apr-1984  14:33
!		Break out from SYSACLSRV.B32 to make common routines;
!		rework add algorithm to: support multiple ACEs in one
!		add, correctly protect positioning of alarm and audit
!		ACEs at the front of the ACL, fix the block split of
!		large ACLs; general code cleanup and minor bug fixes.
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF';


FORWARD ROUTINE
	ACL_INIT_QUEUE,			! Initialize ACL queue
	ACL_ADDENTRY,			! add an ACE to an ACL
	ACL_DELENTRY,			! remove an ACE from an ACL
	ACL_MODENTRY,			! modify an existing ACE
	ACL_FINDENTRY,			! locate a specific ACE
	ACL_FINDTYPE,			! locate a specific type of ACE
	ACL_DELETEACL,			! remove entire ACL from object
	ACL_READACL,			! read one or more ACEs
	ACL_ACLLENGTH,			! determine the size of the ACL
	ACL_READACE,			! read a single ACE
	ACL_LOCATEACE;			! locate ACE by context value

EXTERNAL ROUTINE
	ALLOC_PAGED,			! Paged pool allocator
	DALLOC_PAGED;			! Paged pool deallocator

MACRO
	ACL_ERROR (STATUS) =
		BEGIN
		CH$FILL (0, .COUNT, .ACE);
		ACE[ACE$W_FLAGS] = STATUS;
		RETURN STATUS;
		END
		%;

! Fields used in the ACL context longword.
!
MACRO
	CONTEXT_INDEX	= 0, 0, 24, 0 %, ! ACL entry index
	CONTEXT_TYPE	= 0, 24, 8, 0 %; ! entry type in use

%SBTTL	'ACL_INIT_QUEUE - initialize ACL queue head'
GLOBAL ROUTINE ACL_INIT_QUEUE (ORB_ADDRESS) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to initialize an uninitialized ACL queue.
!	If the queue has already been initialized, this routine is a no-op.
!
! CALLING SEQUENCE:
!	ACL_INIT_QUEUE (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of the ORB
!
! IMPLICIT INPUTS:
!	none
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	ACL queue head is initialized, and the ACL queue bit in the ORB
!	is set.
!
!--

BEGIN

MAP
	ORB_ADDRESS	: REF BBLOCK;		! Address of the ORB

LOCAL
	ORB		: REF BBLOCK;		! Address of the ORB for PRIMARY_FCB

EXTERNAL
	CTL$GL_PCB	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE);

LINKAGE
	L_MUTEX		= JSB (REGISTER = 0, REGISTER = 4)
			: NOTUSED (5, 6, 7, 8, 9, 10, 11);

EXTERNAL ROUTINE
	SCH$LOCKW	: L_MUTEX ADDRESSING_MODE (ABSOLUTE),
						! Lock mutex for write
	SCH$UNLOCK	: L_MUTEX ADDRESSING_MODE (ABSOLUTE);
						! Unlock mutex

! If the ACL queue head is uninitialized, do the initialization now.

ORB = .ORB_ADDRESS;				! For running at elevated IPL
IF NOT .ORB[ORB$V_ACL_QUEUE]
THEN
    BEGIN
    ORB[ORB$L_ACL_MUTEX] = %X'0000FFFF';	! Initialize the ACL mutex
    SCH$LOCKW (ORB[ORB$L_ACL_MUTEX], .CTL$GL_PCB);
    ORB[ORB$V_ACL_QUEUE] = 1;
    ORB[ORB$L_ACLFL] = ORB[ORB$L_ACLBL] = ORB[ORB$L_ACLFL];
    SCH$UNLOCK (ORB[ORB$L_ACL_MUTEX], .CTL$GL_PCB);
    SET_IPL (0);
    END;

RETURN 1;

END;						! End of routine ACL_INIT_QUEUE

%SBTTL	'ACL_ADDENTRY - add an ACE to an ACL'
GLOBAL ROUTINE ACL_ADDENTRY (ACL_QUEUE_HEAD, ACL_CONTEXT, LENGTH, ACE_BUFFER) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used to add an Access Control Entry to the file ACL.
!	If the ACL context is zero, the ACE is added to the beginning of the
!	ACL. Otherwise, it is inserted into the ACL at the selected place.
!
!	It should be noted that adding an ACE anywhere in the ACL other than
!	the end could possibly result in corruption of the ACL if the system
!	should crash while the new ACE in being inserted.
!
! CALLING SEQUENCE:
!	ACL_ADDENTRY (ACL_QUEUE_HEAD, ACL_CONTEXT, LENGTH, ACE_BUFFER)
!
! INPUT PARAMETERS:
!	ACL_QUEUE_HEAD: address of queue header for ACL
!	ACL_CONTEXT: address of ACL context longword
!	LENGTH: size of the user Access Control Entry
!	ACE_BUFFER: address of the user Access Control Entry
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	Access Control Entry inserted in or appended to the file ACL.  If
!	it is an insertion, the ACL context is updated to point after the
!	inserted ACE.
!
!--

BEGIN

MAP
	ACL_QUEUE_HEAD	: REF $BBLOCK,		! Queue header for ACL
	ACL_CONTEXT	: REF $BBLOCK;		! Context longword

LABEL
	ADD_ENTRY;				! Add one ACE to the ACL

LOCAL
	COUNT,					! Length of remaining buffer
	ACE		: REF $BBLOCK,		! The address of the user ACE
	ACL_POINTER	: REF $BBLOCK,		! Pointer to current ACL segment
	ACL_SPLIT	: REF $BBLOCK,		! Offset to current ACE
	ACE_POINTER	: REF $BBLOCK,		! Pointer to current ACE
	ACE_NUMBER,				! Index of ACE in ACL
	ACL_LENGTH,				! Length of all ACE's in segment
	NEW_ACL		: REF $BBLOCK,		! Address of the new ACL segment
	OLD_CONTEXT	: $BBLOCK [4];		! Index of existing ACL entry


! The ACE buffer may contain multiple ACEs. Loop over the ACEs in the buffer,
! adding them one at a time.

COUNT = .LENGTH;
ACE = .ACE_BUFFER;
UNTIL .COUNT LEQ 0
DO
    BEGIN
    ADD_ENTRY: BEGIN

! Sanity check the contents of the ACE - make sure the count field does
! not exceed the remaining buffer, and that the ACE is at least 4 bytes long.

    IF .COUNT LSSU 4
    THEN RETURN SS$_BADPARAM;

    IF .ACE[ACE$B_SIZE] GTR .COUNT
    OR .ACE[ACE$B_SIZE] EQL 0
    THEN ACL_ERROR (SS$_IVACL);

! If the ACE being added is an AUDIT or ALARM ACE, force it to the beginning
! of the ACL.

    ACE_NUMBER = .ACL_CONTEXT[CONTEXT_INDEX];
    IF .ACE[ACE$B_TYPE] EQL ACE$C_AUDIT
    OR .ACE[ACE$B_TYPE] EQL ACE$C_ALARM
    THEN ACE_NUMBER = 0;

! Determine if the ACE exists already. If it does, the result depends on
! the relative position of the old and new ACEs. Effectively, we remove
! the one that is masked by the one preceding it in the ACL.

    IF ACL_FINDENTRY (.ACL_QUEUE_HEAD, OLD_CONTEXT, .ACE[ACE$B_SIZE], .ACE, 1)
    THEN
	BEGIN
	IF .OLD_CONTEXT[CONTEXT_INDEX] LSSU .ACE_NUMBER
	THEN LEAVE ADD_ENTRY;
	ACL_DELENTRY (.ACL_QUEUE_HEAD, OLD_CONTEXT, 0, 0);
	END;

! Now locate the appropriate ACL segment.  If there is no ACL
! as yet, simply allocate a block of memory and build
! the new ACL.

    IF .ACL_QUEUE_HEAD[ACL$L_FLINK] EQLA ACL_QUEUE_HEAD[ACL$L_FLINK]
    THEN
	BEGIN
	ACL_POINTER = ALLOC_PAGED (ACL$C_LENGTH + .ACE[ACE$B_SIZE], ACL_TYPE);
	CH$MOVE (.ACE[ACE$B_SIZE], .ACE, ACL_POINTER[ACL$L_LIST]);
	ACL_POINTER[ACL$W_SIZE] = ACL$C_LENGTH + .ACE[ACE$B_SIZE];
	INSQUE (.ACL_POINTER, .ACL_QUEUE_HEAD[ACL$L_FLINK]);
	ACE_NUMBER = 1;
	END

! If there is an existing ACL, position to the location indicated by the
! context. Then advance over any existing audit or alarm ACEs to ensure
! that they stay at the front of the ACL. Finally, if we are positioned
! at the start of a segment, back up to the end of the previous. This prevents
! successive additions at the same point from fragmenting the ACL.

    ELSE
	BEGIN
	ACE_NUMBER = ACL_LOCATEACE (.ACL_QUEUE_HEAD, .ACE_NUMBER, ACL_POINTER, ACL_SPLIT);
	ACE_POINTER = ACL_POINTER[ACL$L_LIST] + .ACL_SPLIT;
	UNTIL ACL_POINTER[ACL$L_FLINK] EQLA ACL_QUEUE_HEAD[ACL$L_FLINK]
	   OR (.ACE_POINTER[ACE$B_TYPE] NEQ ACE$C_AUDIT
	       AND .ACE_POINTER[ACE$B_TYPE] NEQ ACE$C_ALARM)
	DO
	    BEGIN
	    ACE_POINTER = .ACE_POINTER + .ACE_POINTER[ACE$B_SIZE];
	    ACE_NUMBER = .ACE_NUMBER + 1;
	    IF .ACE_POINTER GEQA .ACL_POINTER + .ACL_POINTER[ACL$W_SIZE]
	    THEN
		BEGIN
		ACL_POINTER = .ACL_POINTER[ACL$L_FLINK];
		ACE_POINTER = ACL_POINTER[ACL$L_LIST];
		END;
	    END;

	IF .ACE_POINTER EQL ACL_POINTER[ACL$L_LIST]
	AND .ACL_POINTER[ACL$L_BLINK] NEQA ACL_QUEUE_HEAD[ACL$L_FLINK]
	THEN
	    BEGIN
	    ACL_POINTER = .ACL_POINTER[ACL$L_BLINK];
	    ACE_POINTER = .ACL_POINTER + .ACL_POINTER[ACL$W_SIZE];
	    END;

! Now check the size of the segment. If the new entry still fits within
! the maximum segment size, insert it by allocating a new segment and
! copying in the pieces.

	ACL_SPLIT = .ACE_POINTER - ACL_POINTER[ACL$L_LIST];
	ACL_LENGTH = .ACL_POINTER[ACL$W_SIZE] - ACL$C_LENGTH;
	IF .ACL_LENGTH + .ACE[ACE$B_SIZE] LEQU MAX_ACL_SIZE
	THEN
	    BEGIN
	    NEW_ACL = ALLOC_PAGED (ACL$C_LENGTH + .ACL_LENGTH + .ACE[ACE$B_SIZE], ACL_TYPE);
	    NEW_ACL[ACL$W_SIZE] = ACL$C_LENGTH + .ACL_LENGTH + .ACE[ACE$B_SIZE];
	    ACE_POINTER = CH$MOVE (.ACL_SPLIT, ACL_POINTER[ACL$L_LIST],
				   NEW_ACL[ACL$L_LIST]);
	    ACE_POINTER = CH$MOVE (.ACE[ACE$B_SIZE], .ACE, .ACE_POINTER);
	    CH$MOVE (.ACL_LENGTH - .ACL_SPLIT,
		     ACL_POINTER[ACL$L_LIST] + .ACL_SPLIT, .ACE_POINTER);
	    INSQUE (.NEW_ACL, .ACL_POINTER[ACL$L_BLINK]);
	    END

! Otherwise we have to split the segment. We put the new ACE in whichever
! segment is smaller. Because the max size of an ACE is 256, and the
! max segment size is 512, we are guaranteed that the new ACE will fit
! in one or the other (i.e., a 3-way split is not necessary).

	ELSE
	    BEGIN
	    IF .ACL_SPLIT LEQU .ACL_LENGTH - .ACL_SPLIT
	    THEN
		BEGIN
		NEW_ACL = ALLOC_PAGED (ACL$C_LENGTH + .ACL_LENGTH - .ACL_SPLIT, ACL_TYPE);
		NEW_ACL[ACL$W_SIZE] = ACL$C_LENGTH + .ACL_LENGTH - .ACL_SPLIT;
		CH$MOVE (.ACL_LENGTH - .ACL_SPLIT,
			 ACL_POINTER[ACL$L_LIST] + .ACL_SPLIT, NEW_ACL[ACL$L_LIST]);
		INSQUE (.NEW_ACL, ACL_POINTER[ACL$L_FLINK]);
		NEW_ACL = ALLOC_PAGED (ACL$C_LENGTH + .ACL_SPLIT +.ACE[ACE$B_SIZE], ACL_TYPE);
		NEW_ACL[ACL$W_SIZE] = ACL$C_LENGTH + .ACL_SPLIT + .ACE[ACE$B_SIZE];
		ACE_POINTER = CH$MOVE (.ACL_SPLIT, ACL_POINTER[ACL$L_LIST],
				       NEW_ACL[ACL$L_LIST]);
		CH$MOVE (.ACE[ACE$B_SIZE], .ACE, .ACE_POINTER);
		INSQUE (.NEW_ACL, ACL_POINTER[ACL$L_FLINK]);
		END
	    ELSE
		BEGIN
		NEW_ACL = ALLOC_PAGED (ACL$C_LENGTH + .ACL_LENGTH - .ACL_SPLIT +.ACE[ACE$B_SIZE], ACL_TYPE);
		NEW_ACL[ACL$W_SIZE] = ACL$C_LENGTH + .ACL_LENGTH - .ACL_SPLIT + .ACE[ACE$B_SIZE];
		ACE_POINTER = CH$MOVE (.ACE[ACE$B_SIZE], .ACE, NEW_ACL[ACL$L_LIST]);
		CH$MOVE (.ACL_LENGTH - .ACL_SPLIT,
			 ACL_POINTER[ACL$L_LIST] + .ACL_SPLIT, .ACE_POINTER);
		INSQUE (.NEW_ACL, ACL_POINTER[ACL$L_FLINK]);
		NEW_ACL = ALLOC_PAGED (ACL$C_LENGTH + .ACL_SPLIT, ACL_TYPE);
		NEW_ACL[ACL$W_SIZE] = ACL$C_LENGTH + .ACL_SPLIT;
		CH$MOVE (.ACL_SPLIT, ACL_POINTER[ACL$L_LIST], NEW_ACL[ACL$L_LIST]);
		INSQUE (.NEW_ACL, ACL_POINTER[ACL$L_FLINK]);
		END;
	    END;
	REMQUE (.ACL_POINTER, ACL_POINTER);
	DALLOC_PAGED (.ACL_POINTER, ACL_TYPE);
	END;

! At this point the ACE has been added to the ACL.  Finish up by setting the
! ACL context.

    IF .ACE[ACE$B_TYPE] EQL ACE$C_AUDIT
    OR .ACE[ACE$B_TYPE] EQL ACE$C_ALARM
    THEN .ACL_CONTEXT = ..ACL_CONTEXT + 1
    ELSE .ACL_CONTEXT = .ACE_NUMBER + 1;
    END;					! end of block ADD_ENTRY
    COUNT = .COUNT - .ACE[ACE$B_SIZE];
    ACE = .ACE + .ACE[ACE$B_SIZE];
    END;					! end of ACE processing loop

RETURN 1;

END;						! End of routine ACL_ADDENTRY

%SBTTL	'ACL_DELENTRY - remove an ACE from an ACL'
GLOBAL ROUTINE ACL_DELENTRY (ACL_QUEUE_HEAD, ACL_CONTEXT, COUNT, ACE) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used to delete an Access Control Entry from a file ACL.
!	If the ACL context is valid, and no ACE is specified, then the ACE
!	pointed to by the context is removed.  If an ACE is specified,
!	regardless of the ACL context, it is first located and then removed.
!
! CALLING SEQUENCE:
!	ACL_DELENTRY (ACL_QUEUE_HEAD, ACL_CONTEXT, COUNT, ACE)
!
! INPUT PARAMETERS:
!	ACL_QUEUE_HEAD: address of queue header for ACL
!	ACL_CONTEXT: address of ACL context longword
!	COUNT: size of the user Access Control Entry
!	ACE: address of the user Access Control Entry
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	The Specified ACE is removed from the ACL.  If the ACL segment is then
!	empty, it is removed from the chain.  The ACL context is updated to
!	point to the next ACE in the ACL.
!
!--

BEGIN

MAP
	ACL_QUEUE_HEAD	: REF $BBLOCK,		! Queue header for ACL
	ACL_CONTEXT	: REF $BBLOCK,		! Context longword
	ACE		: REF $BBLOCK;		! Address of the user ACE

LOCAL
	ACL_POINTER	: REF $BBLOCK,		! Pointer to current ACL segment
	ACL_SPLIT	: REF $BBLOCK,		! Offset to current ACE
	ACE_POINTER	: REF $BBLOCK,		! Pointer to current ACE
	ACE_NUMBER,				! Index of ACE in ACL
	ACL_LENGTH,				! Length of all ACE's in segment
	NEW_ACL		: REF $BBLOCK;		! Address of the new ACL segment


! Sanity check the length of the supplied ACE.

IF .COUNT LSSU 4
AND .COUNT NEQ 0
THEN RETURN SS$_BADPARAM;

! Locate the ACE by content if the content is specified.  Note that this
! will change the context.

IF .ACL_QUEUE_HEAD[ACL$L_FLINK] EQLA ACL_QUEUE_HEAD[ACL$L_FLINK]
THEN ACL_ERROR (SS$_ACLEMPTY);

IF .COUNT NEQ 0
THEN IF NOT ACL_FINDENTRY (.ACL_QUEUE_HEAD, .ACL_CONTEXT, .COUNT, .ACE, 1)
     THEN ACL_ERROR (SS$_NOENTRY);

ACE_NUMBER = ACL_LOCATEACE (.ACL_QUEUE_HEAD, .ACL_CONTEXT[CONTEXT_INDEX], ACL_POINTER, ACL_SPLIT);
ACE_POINTER = ACL_POINTER[ACL$L_LIST] + .ACL_SPLIT;

! Having located the ACE, compute the length of the remaining segment.
! If it is non-null, allocate a new segment and copy in the remaining
! portions of the old one. Finally deallocate the old segment.

ACL_LENGTH = .ACL_POINTER[ACL$W_SIZE] - ACL$C_LENGTH - .ACE_POINTER[ACE$B_SIZE];
IF .ACL_LENGTH NEQ 0
THEN
    BEGIN
    NEW_ACL = ALLOC_PAGED (ACL$C_LENGTH + .ACL_LENGTH, ACL_TYPE);
    NEW_ACL[ACL$W_SIZE] = ACL$C_LENGTH + .ACL_LENGTH;
    CH$MOVE (.ACL_SPLIT, ACL_POINTER[ACL$L_LIST], NEW_ACL[ACL$L_LIST]);
    CH$MOVE (.ACL_LENGTH - .ACL_SPLIT,
	     ACL_POINTER[ACL$L_LIST] + .ACL_SPLIT + .ACE_POINTER[ACE$B_SIZE],
	     NEW_ACL[ACL$L_LIST] + .ACL_SPLIT);
    INSQUE (.NEW_ACL, .ACL_POINTER[ACL$L_BLINK]);
    END;

REMQUE (.ACL_POINTER, ACL_POINTER);
DALLOC_PAGED (.ACL_POINTER, ACL_TYPE);

RETURN 1;

END;						! End of routine ACL_DELENTRY

%SBTTL	'ACL_MODENTRY - modify an existing ACE'
GLOBAL ROUTINE ACL_MODENTRY (ACL_QUEUE_HEAD, ACL_CONTEXT, COUNT, ACE) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used to replace an Access Control Entry in a file ACL.
!	The entry pointed to by the context is replaced with the ACE given.
!
! CALLING SEQUENCE:
!	ACL_MODENTRY (ACL_QUEUE_HEAD, ACL_CONTEXT, COUNT, ACE)
!
! INPUT PARAMETERS:
!	ACL_QUEUE_HEAD: address of queue header for ACL
!	ACL_CONTEXT: address of ACL context longword
!	COUNT: size of the user Access Control Entry
!	ACE: address of the user Access Control Entry
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	The ACE is replaced with the new one.  This is done by deleting the
!	ACE pointed to by the context and then inserting (adding) the
!	changed ACE.
!
!--

BEGIN

MAP
	ACL_QUEUE_HEAD	: REF $BBLOCK,		! Queue header for ACL
	ACL_CONTEXT	: REF $BBLOCK,		! Context longword
	ACE		: REF $BBLOCK;		! Address of user supplied ACE

LOCAL
	ACL_POINTER	: REF $BBLOCK,		! Pointer to current ACL segment
	ACL_SPLIT	: REF $BBLOCK,		! Offset to current ACE
	ACE_POINTER	: REF $BBLOCK,		! Pointer to current ACE
	ACE_NUMBER;				! Index of ACE in ACL


! Sanity check the length of the supplied ACE.

IF .COUNT LSSU 4
THEN RETURN SS$_BADPARAM;

! Check for something in the ACL.

IF .ACL_QUEUE_HEAD[ACL$L_FLINK] EQLA ACL_QUEUE_HEAD[ACL$L_FLINK]
THEN ACL_ERROR (SS$_ACLEMPTY);

! Now locate the ACE to be modified.

ACE_NUMBER = ACL_LOCATEACE (.ACL_QUEUE_HEAD, .ACL_CONTEXT[CONTEXT_INDEX], ACL_POINTER, ACL_SPLIT);
IF .ACL_POINTER[ACL$L_FLINK] EQLA ACL_QUEUE_HEAD[ACL$L_FLINK]
AND .ACL_SPLIT EQL .ACL_POINTER[ACL$W_SIZE] - ACL$C_LENGTH
THEN ACL_ERROR (SS$_NOENTRY);

! Remove the old ACE by context.

ACL_DELENTRY (.ACL_QUEUE_HEAD, .ACL_CONTEXT, 0, 0);

! Insert the new ACE.

ACL_ADDENTRY (.ACL_QUEUE_HEAD, .ACL_CONTEXT, .COUNT, .ACE);

RETURN 1;

END;						! End of routine ACL_MODENTRY

%SBTTL	'ACL_FINDENTRY - locate a specific ACE'
GLOBAL ROUTINE ACL_FINDENTRY (ACL_QUEUE_HEAD, ACL_CONTEXT, COUNT, ACE, INTERNAL) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine locates the specified Access Control Entry and sets the
!	ACL context accordingly.
!
! CALLING SEQUENCE:
!	ACL_FINDENTRY (ACL_QUEUE_HEAD, ACL_CONTEXT, COUNT, ACE, INTERNAL)
!
! INPUT PARAMETERS:
!	ACL_QUEUE_HEAD: address of queue header for ACL
!	ACL_CONTEXT: address of ACL context longword
!	COUNT: size of the user Access Control Entry
!	ACE: address of the user Access Control Entry
!	INTERNAL: 0 call generated by a user request
!	          1 call generated within the system
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 if successful
!	0 otherwise
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	ACL_QUEUE_HEAD	: REF $BBLOCK,		! Queue header for ACL
	ACL_CONTEXT	: REF $BBLOCK,		! Context longword
	ACE		: REF $BBLOCK;		! Address of user ACE

LOCAL
	ACL_POINTER	: REF $BBLOCK,		! Pointer to current ACL segment
	ACL_SPLIT	: REF $BBLOCK,		! Offset to current ACE
	ACE_POINTER	: REF $BBLOCK,		! Pointer to current ACE
	ACE_NUMBER;				! Index of ACE in ACL


! Sanity check the length of the supplied ACE.

IF .COUNT LSSU 4
THEN RETURN SS$_BADPARAM;

! Check the length of the supplied ACE to make sure we've been given a
! complete buffer.

IF .ACE[ACE$B_SIZE] GTRU .COUNT
THEN ACL_ERROR (SS$_IVACL);

! If there is no ACL present on the file, set the context to zero and return.

IF .ACL_QUEUE_HEAD[ACL$L_FLINK] EQLA ACL_QUEUE_HEAD[ACL$L_FLINK]
THEN
    BEGIN
    .ACL_CONTEXT = 0;
    IF .INTERNAL THEN RETURN 0 ELSE ACL_ERROR (SS$_ACLEMPTY);
    END;

! Loop through all of the ACL segments trying to locate the specified ACE.

ACE_NUMBER = 0;
ACL_POINTER = ACL_QUEUE_HEAD[ACL$L_FLINK];
DO
    BEGIN
    ACL_POINTER = .ACL_POINTER[ACL$L_FLINK];
    ACE_POINTER = ACL_POINTER[ACL$L_LIST];
    UNTIL .ACE_POINTER GEQA .ACL_POINTER + .ACL_POINTER[ACL$W_SIZE]
    DO
	BEGIN
	ACE_NUMBER = .ACE_NUMBER + 1;

! How we match the ACE is type dependent. Generally speaking, ACEs match
! on the portion of their content by which they are selected in normal
! use.

	IF
	    BEGIN
	    CASE .ACE[ACE$B_TYPE] FROM ACE$C_KEYID TO ACE$C_DIRDEF OF
		SET

		[ACE$C_BIJNL,
		 ACE$C_AIJNL,
		 ACE$C_ATJNL,
		 ACE$C_JNLID,
		 ACE$C_DIRDEF]:
			.ACE[ACE$B_TYPE] EQL .ACE_POINTER[ACE$B_TYPE];

		[ACE$C_INFO,
		 INRANGE,
		 OUTRANGE]:
			CH$EQL (.ACE[ACE$B_SIZE], .ACE,
				.ACE_POINTER[ACE$B_SIZE], .ACE_POINTER);

		[ACE$C_KEYID]:
			(..ACE AND NOT $FIELDMASK (ACE$V_RESERVED)
			 ^ ($BYTEOFFSET (ACE$W_FLAGS)*8))
			EQL
			(..ACE_POINTER AND NOT $FIELDMASK (ACE$V_RESERVED)
			 ^ ($BYTEOFFSET (ACE$W_FLAGS)*8))
			AND CH$EQL (.ACE[ACE$B_SIZE] - $BYTEOFFSET (ACE$L_KEY)
				    - .ACE[ACE$V_RESERVED]*4,
				    ACE[ACE$L_KEY] + .ACE[ACE$V_RESERVED]*4,
				    .ACE_POINTER[ACE$B_SIZE] - $BYTEOFFSET (ACE$L_KEY)
				    - .ACE_POINTER[ACE$V_RESERVED]*4,
				    ACE_POINTER[ACE$L_KEY] + .ACE_POINTER[ACE$V_RESERVED]*4);

		[ACE$C_AUDIT,
		 ACE$C_ALARM]:
			..ACE EQL ..ACE_POINTER
			AND CH$EQL (.ACE[ACE$B_SIZE] - $BYTEOFFSET (ACE$T_AUDITNAME),
				    ACE[ACE$T_AUDITNAME],
				    .ACE[ACE$B_SIZE] - $BYTEOFFSET (ACE$T_AUDITNAME),
				    ACE_POINTER[ACE$T_AUDITNAME]);

		TES
	    END
	THEN
	    BEGIN
	    .ACL_CONTEXT = .ACE_NUMBER;
	    ACL_CONTEXT[CONTEXT_TYPE] = .ACE_POINTER[ACE$B_TYPE];
	    RETURN 1;
	    END;

	ACE_POINTER = .ACE_POINTER + .ACE_POINTER[ACE$B_SIZE];
	END;
    END
UNTIL .ACL_POINTER[ACL$L_FLINK] EQLA ACL_QUEUE_HEAD[ACL$L_FLINK];
.ACL_CONTEXT = 0;

! At this point the desired ACE has not been found.  Return failure.

IF .INTERNAL THEN RETURN 0 ELSE ACL_ERROR (SS$_NOENTRY);

END;						! End of routine ACL_FINDENTRY

%SBTTL	'ACL_FINDTYPE - locate a specific type of ACE'
GLOBAL ROUTINE ACL_FINDTYPE (ACL_QUEUE_HEAD, ACL_CONTEXT, COUNT, ACE, INTERNAL) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine locates an Access Control Entry of a specific type.
!	The ACL context is set accordingly.
!
! CALLING SEQUENCE:
!	ACL_FINDTYPE (ACL_QUEUE_HEAD, ACL_CONTEXT, COUNT, ACE, INTERNAL)
!
! INPUT PARAMETERS:
!	ACL_QUEUE_HEAD: address of queue header for ACL
!	ACL_CONTEXT: address of ACL context longword
!	COUNT: size of the user Access Control Entry
!	ACE: address of the user Access Control Entry
!	INTERNAL: 0 call generated by a user request
!	          1 call generated within the system
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 if successful
!	0 otherwise
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	ACL_QUEUE_HEAD	: REF $BBLOCK,		! Queue header for ACL
	ACL_CONTEXT	: REF $BBLOCK,		! Context longword
	ACE		: REF $BBLOCK;		! Address of the user ACE

LOCAL
	ACL_POINTER	: REF $BBLOCK,		! Pointer to current ACL segment
	ACL_SPLIT	: REF $BBLOCK,		! Offset to current ACE
	ACE_POINTER	: REF $BBLOCK,		! Pointer to current ACE
	ACE_NUMBER;				! Index of ACE in ACL


! Sanity check the length of the supplied ACE.

IF .COUNT LSSU 4
THEN RETURN SS$_BADPARAM;

! Determine if the ACL is empty.  If it is, set the context to zero, indicate
! a failure by clearing the returning ACE, and return success.

IF .ACL_QUEUE_HEAD[ACL$L_FLINK] EQLA ACL_QUEUE_HEAD[ACL$L_FLINK]
THEN
    BEGIN
    .ACL_CONTEXT = 0;
    IF .INTERNAL THEN RETURN 0 ELSE ACL_ERROR (SS$_ACLEMPTY);
    END;

! If the search is for an ACE type different from the last ACE type found,
! start from the beginning of the ACL.  Otherwise, continue the search from
! the ACE after the last one found.  If the ACE type is found, save the
! current context and return the contents of the ACE.  If the ACE type was
! not found, determine whether or not it is the first time through and set
! the appropriate error status.

IF .ACL_CONTEXT[CONTEXT_TYPE] EQL 0
OR .ACL_CONTEXT[CONTEXT_TYPE] NEQ .ACE[ACE$B_TYPE]
THEN .ACL_CONTEXT = 0;
ACE_NUMBER = ACL_LOCATEACE (.ACL_QUEUE_HEAD, .ACL_CONTEXT[CONTEXT_INDEX] + 1, ACL_POINTER, ACL_SPLIT);
ACE_POINTER = ACL_POINTER[ACL$L_LIST] + .ACL_SPLIT;

WHILE 1
DO
    BEGIN
    IF .ACE_POINTER GEQA .ACL_POINTER + .ACL_POINTER[ACL$W_SIZE]
    THEN
	BEGIN
	ACL_POINTER = .ACL_POINTER[ACL$L_FLINK];
	ACE_POINTER = ACL_POINTER[ACL$L_LIST];
	END;
    IF ACL_POINTER[ACL$L_FLINK] EQLA ACL_QUEUE_HEAD[ACL$L_FLINK]
    THEN EXITLOOP;

    IF .ACE[ACE$B_TYPE] EQL .ACE_POINTER[ACE$B_TYPE]
    AND (IF .ACE[ACE$B_TYPE] NEQ ACE$C_INFO
	 THEN 1
	 ELSE .ACE[ACE$V_INFO_TYPE] EQL .ACE_POINTER[ACE$V_INFO_TYPE])
    THEN
	BEGIN
	.ACL_CONTEXT = .ACE_NUMBER;
	ACL_CONTEXT[CONTEXT_TYPE] = .ACE_POINTER[ACE$B_TYPE];
	CH$COPY (.ACE_POINTER[ACE$B_SIZE], .ACE_POINTER,
		 0, .COUNT, .ACE);
	RETURN 1;
	END;

    ACE_POINTER = .ACE_POINTER + .ACE_POINTER[ACE$B_SIZE];
    ACE_NUMBER = .ACE_NUMBER + 1;
    END;

! At this point the end of the ACL has been reached. Return failure.

.ACL_CONTEXT = 0;
IF .INTERNAL THEN RETURN 0 ELSE ACL_ERROR (SS$_NOENTRY);

END;						! End of routine ACL_FINDTYPE

%SBTTL	'ACL_DELETEACL - remove entire ACL from object'
GLOBAL ROUTINE ACL_DELETEACL (ACL_QUEUE_HEAD, ACL_CONTEXT) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes all the Access Control Entries from a file,
!	except the ACE that granted the calling user access to the file
!	and any protected ACEs.
!
! CALLING SEQUENCE:
!	ACL_DELETEACL (ACL_QUEUE_HEAD, ACL_CONTEXT)
!
! INPUT PARAMETERS:
!	ACL_QUEUE_HEAD: address of queue header for ACL
!	ACL_CONTEXT: address of ACL context longword
!		Note: A context of zero means an internal call,
!		meaning that protected ACEs are also deleted.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	All of the ACE's for a file, except for that ACE that granted access
!	to the file and protected ACEs, are removed.  This may or may not be
!	all ACE's depending on whether or not the caller is the file owner.
!	The file header and all extension headers are modified to reflect the
!	new ACL.
!
!--

BEGIN

MAP
	ACL_QUEUE_HEAD	: REF $BBLOCK,		! Queue header for ACL
	ACL_CONTEXT	: REF $BBLOCK;		! Context longword

LOCAL
	ACL_SEGMENT	: REF $BBLOCK,		! Address of current segment
	NEW_SEGMENT	: REF $BBLOCK,		! Address of new ACL segment
	OLD_SEGMENT	: REF $BBLOCK,		! Address of old ACL segment
	NEW_POINTER	: REF $BBLOCK,		! Where to put the new ACE
	OLD_POINTER	: REF $BBLOCK,		! Where to get the old ACE
	NEW_LENGTH,				! Length of new ACL segment
	ACE_LENGTH,				! Length of protected ACE
	DUMMY;					! Throw-away from REMQUE

! Loop through removing each ACL segment and deallocate the memory.  At this
! time, no check is made to see if any ACE within the ACL segment grants
! access to the file by the caller.

ACL_SEGMENT = .ACL_QUEUE_HEAD[ACL$L_FLINK];
UNTIL .ACL_SEGMENT EQLA ACL_QUEUE_HEAD[ACL$L_FLINK]
DO
    BEGIN
    OLD_SEGMENT = .ACL_SEGMENT;
    ACL_SEGMENT = .ACL_SEGMENT[ACL$L_FLINK];
    REMQUE (.OLD_SEGMENT, DUMMY);

! Preserve the protected ACEs if necessary.

    IF .ACL_CONTEXT NEQ 0
    THEN
	BEGIN
	NEW_POINTER = OLD_POINTER = OLD_SEGMENT[ACL$L_LIST];
	NEW_LENGTH = 0;
	UNTIL .OLD_POINTER GEQA .OLD_SEGMENT + .OLD_SEGMENT[ACL$W_SIZE]
	DO
	    BEGIN
	    ACE_LENGTH = .OLD_POINTER[ACE$B_SIZE];
	    IF .OLD_POINTER[ACE$V_PROTECTED]
	    THEN
		BEGIN
		CH$MOVE (.ACE_LENGTH, .OLD_POINTER, .NEW_POINTER);
		NEW_LENGTH = .NEW_LENGTH + .ACE_LENGTH;
		NEW_POINTER = .NEW_POINTER + .ACE_LENGTH;
		END;
	    OLD_POINTER = .OLD_POINTER + .ACE_LENGTH;
	    END;
	IF .NEW_LENGTH NEQ 0
	THEN
	    BEGIN
	    NEW_SEGMENT = ALLOC_PAGED (ACL$C_LENGTH + .NEW_LENGTH, ACL_TYPE);
	    NEW_SEGMENT[ACL$W_SIZE] = ACL$C_LENGTH + .NEW_LENGTH;
	    CH$MOVE (.NEW_LENGTH, OLD_SEGMENT[ACL$L_LIST], NEW_SEGMENT[ACL$L_LIST]);
	    INSQUE (.NEW_SEGMENT, .ACL_SEGMENT[ACL$L_BLINK]);
	    END;
	END;

    DALLOC_PAGED (.OLD_SEGMENT, ACL_TYPE);
    END;

! Set the context to zero, and return success.

IF .ACL_CONTEXT NEQ 0
THEN .ACL_CONTEXT = 0;

RETURN 1;

END;						! End of routine ACL_DELETEACL

%SBTTL	'ACL_READACL - read one or more ACEs'
GLOBAL ROUTINE ACL_READACL (ACL_QUEUE_HEAD, ACL_CONTEXT, LENGTH, ACE_BUFFER) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns as much of the file ACL as will fit in the user's
!	buffer.  Successive calls will return the unread portions of the ACL
!	until the entire ACL has been read.  If an attempt is made to read
!	beyond the end of the ACL, a error is returned to indicate that there
!	is no more to be read.
!
! CALLING SEQUENCE:
!	ACL_READACL (ACL_QUEUE_HEAD, ACL_CONTEXT, LENGTH, ACE_BUFFER)
!
! INPUT PARAMETERS:
!	ACL_QUEUE_HEAD: address of queue header for ACL
!	ACL_CONTEXT: address of ACL context longword
!	LENGTH: size of the user buffer
!	ACE_BUFFER: address of the user buffer
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 if successful
!	0 otherwise
!
! SIDE EFFECTS:
!	The users's buffer is filled with as much of the ACL as will fit.
!	(Only entire ACE's are transferred.)  The ACL context is then updated
!	to point to the next available ACE.
!
!--

BEGIN

MAP
	ACL_QUEUE_HEAD	: REF $BBLOCK,		! Queue header for ACL
	ACL_CONTEXT	: REF $BBLOCK;		! Context longword

LOCAL
	COUNT,					! Remaining buffer size
	ACE		: REF $BBLOCK,		! Address of the user ACE buffer
	ACL_POINTER	: REF $BBLOCK,		! Pointer to current ACL segment
	ACL_SPLIT	: REF $BBLOCK,		! Offset to current ACE
	ACE_POINTER	: REF $BBLOCK,		! Pointer to current ACE
	ACE_NUMBER;				! Index of ACE in ACL


! Initialize the buffer parameters.

COUNT = .LENGTH;
ACE = .ACE_BUFFER;

! Sanity check the length of the supplied ACE.

IF .COUNT LSSU 4
THEN RETURN SS$_BADPARAM;

! If the ACL is empty, return an error.

IF .ACL_QUEUE_HEAD[ACL$L_FLINK] EQLA ACL_QUEUE_HEAD[ACL$L_FLINK]
THEN
    BEGIN
    .ACL_CONTEXT = 0;
    ACL_ERROR (SS$_ACLEMPTY);
    END;

! Start reading ACE's from next available.  If the ACL context is zero,
! start reading ACE's from the beginning of the ACL.  In either case only
! fill the user's buffer with as many whole ACE's as will fit.  Then save
! the context for the next time through.  An error is given when an attempt
! is made to read beyond the end of the ACL.

ACE_NUMBER = ACL_LOCATEACE (.ACL_QUEUE_HEAD, .ACL_CONTEXT[CONTEXT_INDEX] + 1, ACL_POINTER, ACL_SPLIT);
ACE_POINTER = ACL_POINTER[ACL$L_LIST] + .ACL_SPLIT;

WHILE 1
DO
    BEGIN
    IF .ACE_POINTER GEQA .ACL_POINTER + .ACL_POINTER[ACL$W_SIZE]
    THEN
	BEGIN
	ACL_POINTER = .ACL_POINTER[ACL$L_FLINK];
	ACE_POINTER = ACL_POINTER[ACL$L_LIST];
	END;
    IF ACL_POINTER[ACL$L_FLINK] EQLA ACL_QUEUE_HEAD[ACL$L_FLINK]
    THEN EXITLOOP;

    IF .ACE_POINTER[ACE$B_SIZE] GTRU .COUNT
    THEN
	BEGIN
	.ACL_CONTEXT = .ACE_NUMBER - 1;
	IF .ACE EQLA .ACE_BUFFER THEN ACL_ERROR (SS$_BUFFEROVF);
	CH$FILL (0, .COUNT, .ACE);
	RETURN 1;
	END;
    CH$MOVE (.ACE_POINTER[ACE$B_SIZE], .ACE_POINTER, .ACE);
    ACE = .ACE + .ACE_POINTER[ACE$B_SIZE];
    COUNT = .COUNT - .ACE_POINTER[ACE$B_SIZE];

    ACE_POINTER = .ACE_POINTER + .ACE_POINTER[ACE$B_SIZE];
    ACE_NUMBER = .ACE_NUMBER + 1;
    END;

! At this point the end of the ACL has been reached.  Return the ACE's
! gathered so far, and set the context to point of the end in case another
! context operation takes place. If nothing was returned (i.e., we were
! at the end of the ACL to start with, return the status.

.ACL_CONTEXT = .ACE_NUMBER;
IF .ACE EQLA .ACE_BUFFER
THEN ACL_ERROR (SS$_NOMOREACE);

CH$FILL (0, .COUNT, .ACE);
RETURN 1;

END;						! End of routine ACL_READACL

%SBTTL	'ACL_ACLLENGTH - determine the size of the ACL'
GLOBAL ROUTINE ACL_ACLLENGTH (ACL_QUEUE_HEAD, ACL_CONTEXT, COUNT, LENGTH) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the length of the Access Control List for the
!	specified file.
!
! CALLING SEQUENCE:
!	ACL_ACLLENGTH (ACL_QUEUE_HEAD, ACL_CONTEXT, COUNT, LENGTH)
!
! INPUT PARAMETERS:
!	ACL_QUEUE_HEAD: address of queue header for ACL
!	ACL_CONTEXT: address of ACL context longword
!	COUNT: size of the user Access Control Entry
!	ACE: address of the user Access Control Entry
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	The length of the ACL is returned.  In addition, the ACL context
!	is cleared.
!
!--

BEGIN

MAP
	ACL_QUEUE_HEAD	: REF $BBLOCK,		! Queue header for ACL
	ACL_CONTEXT	: REF $BBLOCK;		! Context longword

LOCAL
	ACL_POINTER	: REF $BBLOCK,		! Pointer to the current segment
	ACL_LENGTH;				! Length of the ACL

! Calculate the length of the ACL.

ACL_LENGTH = 0;

ACL_POINTER = .ACL_QUEUE_HEAD[ACL$L_FLINK];
UNTIL .ACL_POINTER EQLA ACL_QUEUE_HEAD[ACL$L_FLINK]
DO
    BEGIN
    ACL_LENGTH = .ACL_LENGTH + .ACL_POINTER[ACL$W_SIZE] - ACL$C_LENGTH;
    ACL_POINTER = .ACL_POINTER[ACL$L_FLINK];
    END;

! Return the length of the ACL.

CH$COPY (4, ACL_LENGTH, 0, .COUNT, .LENGTH);
RETURN 1;

END;						! End of routine ACL_ACLLENGTH

%SBTTL	'ACL_READACE - read a single ACE'
GLOBAL ROUTINE ACL_READACE (ACL_QUEUE_HEAD, ACL_CONTEXT, COUNT, ACE) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads a single ACE at a time from the ACL.  If the
!	ACE will not fit, the error code SS$_BUFFEROVF is returned as an
!	ACE error.
!
! CALLING SEQUENCE:
!	ACL_READACE (ACL_QUEUE_HEAD, ACL_CONTEXT, COUNT, ACE)
!
! INPUT PARAMETERS:
!	ACL_QUEUE_HEAD: address of queue header for ACL
!	ACL_CONTEXT: address of ACL context longword
!	COUNT: size of the user Access Control Entry
!	ACE: address of the user Access Control Entry
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	1 if successful
!	error code otherwise
!
! SIDE EFFECTS:
!	The user's buffer is filled with the next ACE if it will fit.
!	Otherwise an error is indicated.
!
!--

BEGIN

MAP
	ACL_QUEUE_HEAD	: REF $BBLOCK,		! Queue header for ACL
	ACL_CONTEXT	: REF $BBLOCK,		! Context longword
	ACE		: REF $BBLOCK;		! Address of user ACE buffer

LOCAL
	ACL_POINTER	: REF $BBLOCK,		! Pointer to current ACL segment
	ACL_SPLIT	: REF $BBLOCK,		! Offset to current ACE
	ACE_POINTER	: REF $BBLOCK,		! Pointer to current ACE
	ACE_NUMBER;				! Index of ACE in ACL


! Sanity check the length of the supplied ACE.

IF .COUNT LSSU 4
THEN RETURN SS$_BADPARAM;

! Determine if the ACL is empty.  If it is, set the context to zero, and
! indicate a failure by clearing the returning ACE, and return success.

IF .ACL_QUEUE_HEAD[ACL$L_FLINK] EQLA ACL_QUEUE_HEAD[ACL$L_FLINK]
THEN
    BEGIN
    .ACL_CONTEXT = 0;
    ACL_ERROR (SS$_ACLEMPTY);
    END;

! Transfer the next available ACE to the user's buffer.  If the user's
! buffer is not large enough to contain the ACE, the context is unchanged,
! and an error is indicated.

ACE_NUMBER = ACL_LOCATEACE (.ACL_QUEUE_HEAD, .ACL_CONTEXT[CONTEXT_INDEX] + 1, ACL_POINTER, ACL_SPLIT);
IF .ACL_POINTER[ACL$L_FLINK] EQLA ACL_QUEUE_HEAD[ACL$L_FLINK]
AND .ACL_SPLIT EQL .ACL_POINTER[ACL$W_SIZE] - ACL$C_LENGTH
THEN ACL_ERROR (SS$_NOMOREACE);
ACE_POINTER = ACL_POINTER[ACL$L_LIST] + .ACL_SPLIT;

! The next available ACE has been located.  Make sure there is room for it.

IF .ACE_POINTER[ACE$B_SIZE] GTR .COUNT THEN ACL_ERROR (SS$_BUFFEROVF);

! There is room.  Move it to the user's buffer.

CH$COPY (.ACE_POINTER[ACE$B_SIZE], .ACE_POINTER, 0, .COUNT, .ACE);
.ACL_CONTEXT = .ACE_NUMBER;

RETURN 1;

END;						! End of routine ACL_READACE

%SBTTL	'ACL_LOCATEACE - locate ACE by context value'
GLOBAL ROUTINE ACL_LOCATEACE (ACL_QUEUE_HEAD, ACE_INDEX, ACL_POINTER, ACL_SPLIT) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used to position to a particular Access Control Entry.
!	This is done by the context specified. A context of zero results in
!	positioning to the start of the ACL; a number larger than the ACL
!	size results in positioning to the end.
!
! CALLING SEQUENCE:
!	ACL_LOCATEACE (ACL_QUEUE_HEAD, ACE_INDEX, ACL_POINTER, ACL_SPLIT)
!
! INPUT PARAMETERS:
!	ACL_QUEUE_HEAD: address of queue header for ACL
!	ACE_INDEX: index number of ACE to locate
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	ACL_POINTER: address to store pointer to the selected ACL segment
!	ACL_SPLIT: address to store the offset to the selected ACE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	0 if the context is invalid (points off the end of the ACL)
!	the numeric position of the ACE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

MAP
	ACL_QUEUE_HEAD	: REF $BBLOCK,		! Queue header for ACL
	ACL_POINTER	: REF $BBLOCK;		! Address of the current segment

LOCAL
	ACL_SEGMENT	: REF $BBLOCK,		! Address of the current segment
	ACE_POINTER	: REF $BBLOCK,		! Pointer to ACE within segment
	ACE_NUMBER;				! Position of ACE

! Locate the ACE by context.  IF an append is being done, locate to the
! end of the ACL chain.

ACE_NUMBER = 0;
ACL_SEGMENT = ACL_QUEUE_HEAD[ACL$L_FLINK];
UNTIL .ACL_SEGMENT[ACL$L_FLINK] EQLA ACL_QUEUE_HEAD[ACL$L_FLINK]
DO
    BEGIN
    ACL_SEGMENT = .ACL_SEGMENT[ACL$L_FLINK];
    ACE_POINTER = ACL_SEGMENT[ACL$L_LIST];
    UNTIL .ACE_POINTER GEQA .ACL_SEGMENT + .ACL_SEGMENT[ACL$W_SIZE]
    DO
	BEGIN
	ACE_NUMBER = .ACE_NUMBER + 1;
	IF .ACE_INDEX LEQU .ACE_NUMBER
	THEN
	    BEGIN
	    .ACL_SPLIT = .ACE_POINTER - ACL_SEGMENT[ACL$L_LIST];
	    .ACL_POINTER = .ACL_SEGMENT;
	    RETURN .ACE_NUMBER;
	    END;
	ACE_POINTER = .ACE_POINTER + .ACE_POINTER[ACE$B_SIZE];
	END;
    END;

! The ACE pointed to by the ACL context field does not exist.  Set up to
! append the ACE to the end of the ACL.

.ACL_SPLIT = .ACL_SEGMENT[ACL$W_SIZE] - ACL$C_LENGTH;
.ACL_POINTER = .ACL_SEGMENT;
RETURN .ACE_NUMBER + 1;

END;						! End of routine ACL_LOCATEACE

END
ELUDOM
