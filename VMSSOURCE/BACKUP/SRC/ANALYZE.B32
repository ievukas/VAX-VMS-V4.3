MODULE ANALYZE	(%TITLE	'Analyze a save set'
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Backup/Restore
!
! ABSTRACT:
!	This module contains the routines that analyze a save set.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 03-Sep-1980
!
! MODIFIED BY:
!
!	V03-009	LY0510		Larry Yetto		19-JUL-1984 08:44
!		Add support for the new longword devtyp in the physical
!		volume attributes record.  The format of this longword is
!		the same as UCB$L_MEDIA_ID
!
!	V03-008	LY0485		Larry Yetto		27-APR-1984 08:42
!		FT1 QAR # 2088  -  If the saveset being read is encrypted
!		and /ENCRYPT not specified then report an error
!
!	V03-007	LMP0176		L. Mark Pilant,		6-Dec-1983  10:41
!		Use the correct width in the call to $FORMAT_ACL.
!
!	V03-006	JWT0137		Jim Teague		19-Sep-1983  08:22
!		CRYPTO_INIDEC and CRYPTO_DECR_BLOCK need to be WEAKened.
!
!	V03-005	JEP0003		J. Eric Pollack,	23-Apr-1983  10:53
!		Add support for encrypted savesets.
!
!	V03-004	ACG0332		Andrew C. Goldstein,	19-Apr-1983  18:10
!		Add support for file highwater mark and RMS journal flags
!
!	V03-003	LMP0100		L. Mark Pilant,		14-Apr-1983  13:17
!		Add te $FORMAT_ACL system service.
!
!	V03-002	ACG0313		Andrew C. Goldstein,	12-Feb-1983  16:01
!		Add routine subtitles
!
!	V03-001	LMP0044		L. Mark Pilant,		21-Oct-1982  15:10
!		Add support for ACL's.
!
!	V02-006	MLJ0081		Martin L. Jack,	26-Feb-1982  16:16
!		Add RETAINMIN and RETAINMAX attributes to support new home
!		block fields.
!
!	V02-005	MLJ0075		Martin L. Jack,	28-Jan-1982  20:02
!		Add VERLIMIT and DIR_VERLIM attributes to support version limit
!		handling.
!
!	V02-004	MLJ0062		Martin L. Jack,	3-Dec-1981  12:16
!		Add DIR_STATUS attribute to support /INCREMENTAL.
!
!	V02-003	MLJ0036		Martin L. Jack,	28-Aug-1981  17:09
!		Implement parent directory attributes and reel restart.
!
!	V02-002	MLJ0023		Martin L. Jack,	23-Apr-1981  11:36
!		Implement placement attribute.
!
!	V02-001	MLJ0010		Martin L. Jack,	25-Mar-1981  14:58
!		Add new attributes for image restore.  Make some routines
!		common with LIST module.  Replace OWN storage with LOCAL.
!		Change !SL directives to !UL.
!
!**

REQUIRE 'SRC$:COMMON';
LIBRARY 'SYS$LIBRARY:STARLET';
REQUIRE 'LIB$:BACKDEF';


LINKAGE
	L_P$ =		CALL: GLOBAL(P$=11);


MACRO
	L_DECL =	EXTERNAL REGISTER P$ = 11: REF VECTOR %;


FORWARD ROUTINE
	ANALYZE_ONE_ATTRIBUTE:
			L_P$ NOVALUE,	! Format an attribute record
	ANALYZE_ONE_RECORD:
			L_P$ NOVALUE,	! Format a record
	ANALYZE_ONE_BUFFER:
			L_P$ NOVALUE,	! Format a block
	ANALYZE:	NOVALUE;	! Driver for save set analysis


EXTERNAL ROUTINE
	DEBLOCK:	L_P$ NOVALUE,	! Deblock a save set buffer
	DEBLOCK_ATTR:	L_P$ NOVALUE,	! Deblock an attribute record
	DECODE_DEVTYP:	NOVALUE,	! Convert DEVTYP to ASCII string
	FIN_IN_SAVE:	NOVALUE,	! Finish input save set processing
	INIT_IN_SAVE:	NOVALUE,	! Initialize input save set processing
	LIST_FAO:	L_P$ NOVALUE,	! Add information to line buffer
	LIST_EOL:	L_P$ NOVALUE,	! Write line buffer to listing file
	LIST_PROTECTION:L_P$ NOVALUE,	! List protection code
	READ_BUFFER,			! Get a save set buffer
	RESTORE_HANDLER,		! Handler for RESTORE, LIST, ANALYZE
	CRYPTO_INIDEC: WEAK,		! Initalize for reading encrypted saveset
	CRYPTO_CHKSAV,			! Check if saveset is encrypted
	CRYPTO_DECR_BLOCK: NOVALUE
			WEAK;		! Decrypt one block


G$DEFINE();		! Define global common area


BIND
	FALSETRUE = UPLIT (
	    UPLIT BYTE (%ASCIC 'False'),
	    UPLIT BYTE (%ASCIC 'True'))
	: VECTOR;


EXTERNAL LITERAL
    BACKUP$_BACNOTENC,
    BACKUP$_ENCSAVSET;

MACRO
	FAO_(A)=
	    LIST_FAO(
		UPLIT BYTE (%ASCIC A)
		%IF NOT %NULL(%REMAINING) %THEN , %FI %REMAINING) %,


	EOL_(A)=
	    LIST_EOL() %;


MACRO
	_LIST_DESC=	P$[0] %,		! Descriptor for buffer
	_LIST_BUFFER=	P$[2] %,		! Listing buffer
	LIST_DESC(N)=		VECTOR[_LIST_DESC,N] %;


LITERAL
	P$SIZE=		2 + CH$ALLOCATION(LIST_SIZE);

%SBTTL 'ANALYZE_ONE_ATTRIBUTE - analyze contents of attribute record'
ROUTINE ANALYZE_ONE_ATTRIBUTE(ATT): L_P$ NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine analyzes the contents of one attribute record.
!
! INPUT PARAMETERS:
!	ATT		- Pointer to attribute record.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	The listing is produced.
!
!--

BEGIN

LITERAL
	DEVTYP_BUF_LEN = 5 ;

MAP
	ATT:		REF BBLOCK;	! Pointer to attribute record

BIND
	ATTRS = UPLIT (
	    UPLIT BYTE (%ASCIC 'SSNAME'),
	    UPLIT BYTE (%ASCIC 'COMMAND'),
	    UPLIT BYTE (%ASCIC 'COMMENT'),
	    UPLIT BYTE (%ASCIC 'USERNAME'),
	    UPLIT BYTE (%ASCIC 'USERUIC'),
	    UPLIT BYTE (%ASCIC 'DATE'),
	    UPLIT BYTE (%ASCIC 'OPSYS'),
	    UPLIT BYTE (%ASCIC 'SYSVER'),
	    UPLIT BYTE (%ASCIC 'NODENAME'),
	    UPLIT BYTE (%ASCIC 'SIR'),
	    UPLIT BYTE (%ASCIC 'DRIVEID'),
	    UPLIT BYTE (%ASCIC 'BACKVER'),
	    UPLIT BYTE (%ASCIC 'BLOCKSIZE'),
	    UPLIT BYTE (%ASCIC 'XORSIZE'),
	    UPLIT BYTE (%ASCIC 'BUFFERS'),
	    UPLIT BYTE (%ASCIC 'VOLSETNAM'),
	    UPLIT BYTE (%ASCIC 'NVOLS'),
	    UPLIT BYTE (%ASCIC 'BACKSIZE'),
	    UPLIT BYTE (%ASCIC 'BACKFILES'),
	    UPLIT BYTE (%ASCIC 'VOLSTRUCT'),
	    UPLIT BYTE (%ASCIC 'VOLNAME'),
	    UPLIT BYTE (%ASCIC 'OWNERNAME'),
	    UPLIT BYTE (%ASCIC 'FORMAT'),
	    UPLIT BYTE (%ASCIC 'RVN'),
	    UPLIT BYTE (%ASCIC 'VOLOWNER'),
	    UPLIT BYTE (%ASCIC 'PROTECT'),
	    UPLIT BYTE (%ASCIC 'FILEPROT'),
	    UPLIT BYTE (%ASCIC 'RECPROT'),
	    UPLIT BYTE (%ASCIC 'VOLCHAR'),
	    UPLIT BYTE (%ASCIC 'VOLDATE'),
	    UPLIT BYTE (%ASCIC 'WINDOW'),
	    UPLIT BYTE (%ASCIC 'LRU_LIM'),
	    UPLIT BYTE (%ASCIC 'EXTEND'),
	    UPLIT BYTE (%ASCIC 'CLUSTER'),
	    UPLIT BYTE (%ASCIC 'RESFILES'),
	    UPLIT BYTE (%ASCIC 'VOLSIZE'),
	    UPLIT BYTE (%ASCIC 'TOTSIZE'),
	    UPLIT BYTE (%ASCIC 'TOTFILES'),
	    UPLIT BYTE (%ASCIC 'MAXFILES'),
	    UPLIT BYTE (%ASCIC 'MAXFILNUM'),
	    UPLIT BYTE (%ASCIC 'SERIALNUM'),
	    UPLIT BYTE (%ASCIC 'FILENAME'),
	    UPLIT BYTE (%ASCIC 'STRUCLEV'),
	    UPLIT BYTE (%ASCIC 'FID'),
	    UPLIT BYTE (%ASCIC 'BACKLINK'),
	    UPLIT BYTE (%ASCIC 'FILESIZE'),
	    UPLIT BYTE (%ASCIC 'UIC'),
	    UPLIT BYTE (%ASCIC 'FPRO'),
	    UPLIT BYTE (%ASCIC 'RPRO'),
	    UPLIT BYTE (%ASCIC 'ACLEVEL'),
	    UPLIT BYTE (%ASCIC 'UCHAR'),
	    UPLIT BYTE (%ASCIC 'RECATTR'),
	    UPLIT BYTE (%ASCIC 'REVISION'),
	    UPLIT BYTE (%ASCIC 'CREDATE'),
	    UPLIT BYTE (%ASCIC 'REVDATE'),
	    UPLIT BYTE (%ASCIC 'EXPDATE'),
	    UPLIT BYTE (%ASCIC 'BAKDATE'),
	    UPLIT BYTE (%ASCIC 'SECTORS'),
	    UPLIT BYTE (%ASCIC 'TRACKS'),
	    UPLIT BYTE (%ASCIC 'CYLINDERS'),
	    UPLIT BYTE (%ASCIC 'MAXBLOCK'),
	    UPLIT BYTE (%ASCIC 'DEVTYP'),
	    UPLIT BYTE (%ASCIC 'SERIAL'),
	    UPLIT BYTE (%ASCIC 'DEVNAM'),
	    UPLIT BYTE (%ASCIC 'LABEL'),
	    UPLIT BYTE (%ASCIC 'BADBLOCK'),
	    UPLIT BYTE (%ASCIC 'INDEXLBN'),
	    UPLIT BYTE (%ASCIC 'BOOTBLOCK'),
	    UPLIT BYTE (%ASCIC 'BOOTVBN'),
	    UPLIT BYTE (%ASCIC 'PLACEMENT'),
	    UPLIT BYTE (%ASCIC 'DIR_UIC'),
	    UPLIT BYTE (%ASCIC 'DIR_FPRO'),
	    UPLIT BYTE (%ASCIC 'DIR_STATUS'),
	    UPLIT BYTE (%ASCIC 'DIR_VERLIM'),
	    UPLIT BYTE (%ASCIC 'VERLIMIT'),
	    UPLIT BYTE (%ASCIC 'RETAINMIN'),
	    UPLIT BYTE (%ASCIC 'RETAINMAX'),
	    UPLIT BYTE (%ASCIC 'ACLSEGMENT'),
	    UPLIT BYTE (%ASCIC 'HIGHWATER'),
	    UPLIT BYTE (%ASCIC 'JNL_FLAGS'),
	    UPLIT BYTE (%ASCIC 'CRYPDATKEY'))
	: VECTOR;
L_DECL;


! List the attribute name.
!
FAO_('    SIZE = !3SL, TYPE = !AC',
    .ATT[BSA$W_SIZE], .ATTRS[.ATT[BSA$W_TYPE]-1]);
EOL_();


! List the attribute value in an appropriate format.
!
FAO_('      ');
CASE .ATT[BSA$W_TYPE] FROM BSA$K_SSNAME TO BSA$K_NUM_ATRS-1 OF
    SET

    [BSA$K_SSNAME, BSA$K_COMMAND, BSA$K_COMMENT, BSA$K_USERNAME, BSA$K_SYSVER,
     BSA$K_BACKVER, BSA$K_NODENAME, BSA$K_DRIVEID, BSA$K_VOLSETNAM,
     BSA$K_VOLNAME, BSA$K_OWNERNAME, BSA$K_FORMAT, BSA$K_FILENAME,
     BSA$K_DEVNAM, BSA$K_LABEL]:
	FAO_('"!AF"',
	    .ATT[BSA$W_SIZE], ATT[BSA$C_LENGTH,0,0,0]);

    [BSA$K_USERUIC, BSA$K_VOLOWNER, BSA$K_UIC, BSA$K_DIR_UIC]:
	FAO_('!%U',
	    .ATT[BSA$C_LENGTH,0,32,0]);

    [BSA$K_DATE, BSA$K_VOLDATE, BSA$K_CREDATE, BSA$K_REVDATE, BSA$K_EXPDATE,
     BSA$K_BAKDATE, BSA$K_RETAINMIN, BSA$K_RETAINMAX]:
	FAO_('!%D',
	    ATT[BSA$C_LENGTH,0,0,0]);

    [BSA$K_BLOCKSIZE, BSA$K_XORSIZE, BSA$K_BUFFERS, BSA$K_NVOLS,
     BSA$K_BACKFILES, BSA$K_RVN, BSA$K_WINDOW, BSA$K_LRU_LIM, BSA$K_EXTEND,
     BSA$K_CLUSTER, BSA$K_RESFILES, BSA$K_VOLSIZE, BSA$K_TOTFILES,
     BSA$K_MAXFILES, BSA$K_MAXFILNUM, BSA$K_FILESIZE, BSA$K_REVISION,
     BSA$K_SECTORS, BSA$K_TRACKS, BSA$K_CYLINDERS, BSA$K_MAXBLOCK,
     BSA$K_INDEXLBN, BSA$K_BOOTVBN, BSA$K_DIR_VERLIM,
     BSA$K_VERLIMIT, BSA$K_HIGHWATER]:
	FAO_('!UL',
	    .ATT[BSA$C_LENGTH,0,.ATT[BSA$W_SIZE]*8,1]);

    [BSA$K_DEVTYP] :
	IF .ATT[BSA$W_SIZE] EQL 1
	THEN
	    ! Old format DEVTYP attribute.  This is the DEVTYP from the UCB
	    !
	    FAO_('!UL',
		.ATT[BSA$C_LENGTH,0,.ATT[BSA$W_SIZE]*8,1])
	    
	ELSE
	    BEGIN

	    ! New format DEVTYP.  We now use a longword and store 
	    ! the MEDIA_ID from the UCB.  We use the nondecoded
	    ! form of the MEDIA_ID so we must now pull the ASCII out.
	    !
	    LOCAL
		NAME_LENGTH    : LONG   INITIAL (DEVTYP_BUF_LEN),
		TYPE_LENGTH    : LONG   INITIAL (DEVTYP_BUF_LEN),
		NAME_BUFFER    : VECTOR[DEVTYP_BUF_LEN,BYTE] ,
		TYPE_BUFFER    : VECTOR[DEVTYP_BUF_LEN,BYTE] ;

	    DECODE_DEVTYP ( .ATT[BSA$C_LENGTH,0,32,0], 
	                    NAME_LENGTH, NAME_BUFFER,
	                    TYPE_LENGTH, TYPE_BUFFER ) ;

	    FAO_ ('!XL (!AF,!AF)',
	          .ATT[BSA$C_LENGTH,0,.ATT[BSA$W_SIZE]*8,0],
	          .TYPE_LENGTH, TYPE_BUFFER,
	          .NAME_LENGTH, NAME_BUFFER );

	    END ;
	

    [BSA$K_FID, BSA$K_BACKLINK]:
	FAO_('!UL,!UL,!UL',
	    .ATT[BSA$C_LENGTH,0,16,0] + .ATT[BSA$C_LENGTH+5,0,8,0] ^ 16,
	    .ATT[BSA$C_LENGTH+2,0,16,0],
	    .ATT[BSA$C_LENGTH+4,0,8,0]);

    [BSA$K_PROTECT]:
	LIST_PROTECTION(.ATT[BSA$C_LENGTH,0,16,0], 'RWCD');

    [BSA$K_FILEPROT, BSA$K_FPRO, BSA$K_DIR_FPRO]:
	LIST_PROTECTION(.ATT[BSA$C_LENGTH,0,16,0], 'RWED');

    [BSA$K_RECPROT, BSA$K_RPRO]:
	LIST_PROTECTION(.ATT[BSA$C_LENGTH,0,16,0], 'RWUD');

    [BSA$K_BADBLOCK]:
	BEGIN LOCAL P: REF VECTOR;
	P = ATT[BSA$C_LENGTH,0,0,0];
	WHILE .P LSSA ATT[BSA$C_LENGTH,0,0,0]+.ATT[BSA$W_SIZE] DO
	    BEGIN
	    FAO_('!UL:!UL ', .P[0], .P[1]);
	    P = .P + 8;
	    END;
	END;

    [BSA$K_SERIAL, BSA$K_SERIALNUM]:
	FAO_('!OL',
	    .ATT[BSA$C_LENGTH,0,32,0]);

    [BSA$K_ACLSEGMENT]:
	BEGIN
	LOCAL
	    ACE_POINTER	: REF BBLOCK,		! Address of the current ACE
	    ACE_BINDESC	: BBLOCK [8],		! ACE binary descriptor
	    ACE_TXTDESC	: BBLOCK [8],		! ACE text descriptor
	    ACE_TEXT	: BBLOCK [512];		! Converted ACE storage
	ACE_POINTER = ATT[BSA$C_LENGTH,0,0,0];	! Start of ACE's
	CH$FILL (0, 8, ACE_BINDESC);
	CH$FILL (0, 8, ACE_TXTDESC);
	UNTIL .ACE_POINTER GEQA ATT[BSA$C_LENGTH,0,0,0] + .ATT[BSA$W_SIZE]
	DO
	    BEGIN
	    ACE_BINDESC[DSC$W_LENGTH] = .ACE_POINTER[ACE$B_SIZE];
	    ACE_BINDESC[DSC$A_POINTER] = .ACE_POINTER;
	    ACE_TXTDESC[DSC$W_LENGTH] = 512;
	    ACE_TXTDESC[DSC$A_POINTER] = ACE_TEXT;
	    $FORMAT_ACL (ACLENT = ACE_BINDESC,
			 ACLLEN = ACE_TXTDESC[DSC$W_LENGTH],
			 ACLSTR = ACE_TXTDESC,
			 WIDTH = %REF (80),
			 TRMDSC = $DESCRIPTOR (%CHAR (13), %CHAR (10)),
			 INDENT = %REF (6));


	    ! Shave off the first 6 blanks if this is the first ACE being
	    ! output as they have already been output.
	    !
	    IF .ACE_POINTER EQLA ATT[BSA$C_LENGTH,0,0,0]
	    THEN
		BEGIN
		ACE_TXTDESC[DSC$W_LENGTH] = .ACE_TXTDESC[DSC$W_LENGTH] - 6;
		ACE_TXTDESC[DSC$A_POINTER] = .ACE_TXTDESC[DSC$A_POINTER] + 6;
		END;
	    FAO_ ('!AS', ACE_TXTDESC);
	    EOL_ ();
	    ACE_POINTER = .ACE_POINTER + .ACE_POINTER[ACE$B_SIZE];
	    END;
	END;

    [BSA$K_CRYPDATKEY] :
	BEGIN
	    FAO_('Encrypted with algorithm: !XB', .ATT[BSA$B_CRYPTYP]);
	    EOL_();
	    IF .ATT[BSA$B_CRYPTYP] NEQU 0
	    THEN
	    BEGIN
	    FAO_('Key:!XL !XL, Iv:!XL !XL',
		.ATT[$BYTEOFFSET(BSA$Q_CRYPKEY),0,32,0],
		.ATT[$BYTEOFFSET(BSA$Q_CRYPKEY)+4,0,32,0],
	        .ATT[$BYTEOFFSET(BSA$Q_CRYPIV),0,32,0],
		.ATT[$BYTEOFFSET(BSA$Q_CRYPIV)+4,0,32,0]);
	    EOL_();
	    END;
	END;

    [INRANGE, OUTRANGE]:
	BEGIN
	DECR I FROM .ATT[BSA$W_SIZE]-1 TO 0 DO
	    FAO_('!XB', .ATT[.I+BSA$C_LENGTH,0,8,0]);
	END;

    TES;
EOL_();
END;

%SBTTL 'ANALYZE_ONE_RECORD - analyze save set record'
ROUTINE ANALYZE_ONE_RECORD(REC): L_P$ NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine analyzes the contents of one save set record.
!
! INPUT PARAMETERS:
!	REC		- Pointer to record.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	The listing is produced.
!
!--

BEGIN
MAP
	REC:		REF BBLOCK;	! Pointer to record
BIND
	RTYPES = UPLIT (
	    UPLIT BYTE (%ASCIC 'NULL'),
	    UPLIT BYTE (%ASCIC 'SUMMARY'),
	    UPLIT BYTE (%ASCIC 'VOLUME'),
	    UPLIT BYTE (%ASCIC 'FILE'),
	    UPLIT BYTE (%ASCIC 'VBN'),
	    UPLIT BYTE (%ASCIC 'PHYSVOL'),
	    UPLIT BYTE (%ASCIC 'LBN'),
	    UPLIT BYTE (%ASCIC 'FID'),
	    UPLIT BYTE (%ASCIC 'FILE_EXT'))
	: VECTOR;
L_DECL;


! Format the record header.
!
FAO_('Record header');
EOL_();
FAO_('  RSIZE     = !UL!- = %X''!XW''', .REC[BRH$W_RSIZE]);
EOL_();
FAO_('  RTYPE     = !AC', .RTYPES[.REC[BRH$W_RTYPE]]);
EOL_();
FAO_('  BADDATA   = !AC', .FALSETRUE[.REC[BRH$V_BADDATA]]);
EOL_();
FAO_('  DIRECTORY = !AC', .FALSETRUE[.REC[BRH$V_DIRECTORY]]);
EOL_();
FAO_('  ADDRESS   = !UL', .REC[BRH$L_ADDRESS]);
EOL_();
EOL_();


! Format the record contents.
!
CASE .REC[BRH$W_RTYPE] FROM BRH$K_NULL TO BRH$K_FILE_EXT OF
    SET

    [BRH$K_NULL, BRH$K_VBN, BRH$K_LBN, OUTRANGE]:
	0;

    [BRH$K_SUMMARY, BRH$K_VOLUME, BRH$K_FILE, BRH$K_FILE_EXT, BRH$K_PHYSVOL]:
	BEGIN
	FAO_('    STRUCLEV = !XW',
	    .BBLOCK[REC[BRH$C_LENGTH,0,0,0], BSA$W_STRUCLEV]);
	EOL_();
	DEBLOCK_ATTR(.REC, 0, ANALYZE_ONE_ATTRIBUTE);
	EOL_();
	END;

    [BRH$K_FID]:
	BEGIN
	FAO_('    STRUCLEV = !XW',
	    .BBLOCK[REC[BRH$C_LENGTH,0,0,0], BSA$W_STRUCLEV]);
	EOL_();
	FAO_('    FID_COUNT = !UL',
	    .BBLOCK[REC[BRH$C_LENGTH,0,0,0], BSA$W_FID_COUNT]);
	EOL_();
	INCR I FROM 0 TO .BBLOCK[REC[BRH$C_LENGTH,0,0,0], BSA$W_FID_COUNT]-1 DO
	    BEGIN
	    FAO_('    FID = (!UL,!UL,!UL)',
	        .BBLOCK[REC[BRH$C_LENGTH,0,0,0], BSA$W_FID_NUM] +
		.BBLOCK[REC[BRH$C_LENGTH,0,0,0], BSA$B_FID_NMX] ^ 16 + .I,
		.BBLOCK[REC[BRH$C_LENGTH+.I*2,0,0,0], BSA$W_FID_SEQ],
	        .BBLOCK[REC[BRH$C_LENGTH,0,0,0], BSA$B_FID_RVN]);
	    EOL_();
	    END;
	EOL_();
	END;

    TES;
END;

%SBTTL 'ANALYZE_ONE_BUFFER - analyze save set buffer'
ROUTINE ANALYZE_ONE_BUFFER(BCB): L_P$ NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine analyzes the contents of one save set buffer.
!
! INPUT PARAMETERS:
!	BCB		- Pointer to buffer control block.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	The listing is produced.
!	The buffer is released.
!
!--

BEGIN
MAP
	BCB:		REF BBLOCK;	! Pointer to buffer control block
LOCAL
	BUF:		REF BBLOCK;	! Pointer to buffer
L_DECL;


! Point to buffer.
!
BUF = .BCB[BCB_BUFFER];


! Format the block header.
!
FAO_('Block header');
EOL_();
FAO_('  SIZE      = !UL', .BUF[BBH$W_SIZE]);
EOL_();
FAO_('  OPSYS     = !UL', .BUF[BBH$W_OPSYS]);
EOL_();
FAO_('  SUBSYS    = !UL', .BUF[BBH$W_SUBSYS]);
EOL_();
FAO_('  APPLIC    = !UL', .BUF[BBH$W_APPLIC]);
EOL_();
FAO_('  NUMBER    = !UL', .BUF[BBH$L_NUMBER]);
EOL_();
FAO_('  STRUCLEV  = !XW', .BUF[BBH$W_STRUCLEV]);
EOL_();
FAO_('  VOLNUM    = !UL', .BUF[BBH$W_VOLNUM]);
EOL_();
FAO_('  CRC       = !XL', .BUF[BBH$L_CRC]);
EOL_();
FAO_('  BLOCKSIZE = !UL', .BUF[BBH$L_BLOCKSIZE]);
EOL_();
FAO_('  NOCRC     = !AC', .FALSETRUE[.BUF[BBH$V_NOCRC]]);
EOL_();
FAO_('  SSNAME    = "!AC"', BUF[BBH$T_SSNAME]);
EOL_();
FAO_('  FID       = !UL,!UL,!UL',
    .BUF[BBH$W_FID_NUM] + .BUF[BBH$B_FID_NMX] ^ 16,
    .BUF[BBH$W_FID_SEQ],
    .BUF[BBH$B_FID_RVN]);
EOL_();
FAO_('  DID       = !UL,!UL,!UL',
    .BUF[BBH$W_DID_NUM] + .BUF[BBH$B_DID_NMX] ^ 16,
    .BUF[BBH$W_DID_SEQ],
    .BUF[BBH$B_DID_RVN]);
EOL_();
FAO_('  FILENAME  = "!AC"', BUF[BBH$T_FILENAME]);
EOL_();
FAO_('  ATTRIB    = !XL!XL', .(BUF[BBH$B_BKTSIZE]), .(BUF[BBH$B_RTYPE]));
EOL_();
FAO_('  FILESIZE  = !UL', .BUF[BBH$L_FILESIZE]);
EOL_();
EOL_();


! Format the records contained in this buffer.
!
DEBLOCK(.BCB, ANALYZE_ONE_RECORD);
END;

%SBTTL 'ANALYZE - main analyze routine'
GLOBAL ROUTINE ANALYZE: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is the driver for analysis generation.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

LOCAL
    BCB,				! Pointer to buffer control block
    CHK_SAVESET:	BYTE ,		! Check save set encryption on frst pass
    P$AREA:		VECTOR[P$SIZE];	! Impure area

GLOBAL REGISTER
	P$ = 11:	REF VECTOR;	! Impure area base register

BUILTIN
	FP;


! Establish the handler.
!
.FP = RESTORE_HANDLER;


! Initialize impure area.
!
P$ = P$AREA;
LIST_DESC[0] = LIST_SIZE;
LIST_DESC[1] = _LIST_BUFFER;
CHK_SAVESET = 1 ;


! Do the listing.
!
INIT_IN_SAVE(FALSE);
WHILE (BCB = READ_BUFFER()) NEQ 0 DO 
BEGIN

    IF .QUAL[QUAL_SS_ENCRYP] 
    THEN
	BEGIN
	! If we are decrypting an encrypted saveset and we don't yet have
	! the required decrypt context, do a special scan of the first block
	! to locate the backup summary record, extract the datakey information
	! and initialize the decryption context.
	!
	IF .CRYP_DATA_CODE EQLU 0
	THEN IF NOT (QUAL[QUAL_SS_ENCRYP] = CRYPTO_INIDEC(.BCB))
	    THEN SIGNAL(BACKUP$_BACNOTENC);

	! Decrypt the buffer
	!
	CRYPTO_DECR_BLOCK(.BCB);

	END
    ELSE
	BEGIN
	!
	! Make sure that the save set is not encrypted.
	!
	IF .CHK_SAVESET
	THEN IF CRYPTO_CHKSAV(.BCB)
	    THEN SIGNAL (BACKUP$_ENCSAVSET) ;
	CHK_SAVESET = 0 ;
	END ;

    ANALYZE_ONE_BUFFER(.BCB);

END;

FIN_IN_SAVE(FALSE);
END;

END
ELUDOM
