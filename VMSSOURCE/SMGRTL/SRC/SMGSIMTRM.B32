%TITLE 'SMG$$SIM_TERM - Simulate a terminal'
MODULE SMG$$SIM_TERM (				! Simulate a terminal
		IDENT = '2-007'		! File: SMGSIMTRM.B32 Edit: STAN2007
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Screen Management
!
! ABSTRACT:
!
!	This module simulates a hardcopy, VT52 or VT100 terminal.
!
!	Borrowed from EDT code, this module re-interprets escape and
!	control sequences that are normally sent to a terminal to
!	make them operate on a buffer in memory.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: John Sauter, CREATION DATE: January 6, 1981
!
! MODIFIED BY:
!
! 2-001	- Revised from EDT$SIM_TERM for use in SMG$.
!	  PLL 6-Jul-1983.
!  -002 - Some cleanup.  PLL 7-Jul-1983
!  -003 - Remove references to a tcb.  PLL 8-Jul-1983
!  -004 - Don't let caller specify G0 for graphics.  Just
!	  give him G1.  PLL 25-Aug-1983
!  -005 - Simulate the device type stored in the DCB.  Add
!	  support for 80/132 column mode.  PLL 2-Sep-1983
!  -006 - Add an outrange clause to a CASE statement.  PLL 21-Mar-1984
!  -007 - Give error for unknown escape sequence. STAN 22-Mar-1984.
!--

%SBTTL 'Declarations'
!
! SWITCHES:
!

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE

    SMG$$SIM_TERM;			! Simulate a terminal

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:SMGPROLOG';

REQUIRE 'RTLIN:SMGSCRMAC';

REQUIRE 'RTLIN:SMGSCRTCB';

REQUIRE 'RTLIN:SMGTRMSTR';			! Terminal simulation data

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! STRUCTURES:
!
!	NONE
!
! PSECTS:
!
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    SMG$_STRTERESC;				! Unknown escape sequence

EXTERNAL ROUTINE
    SMG$CHANGE_PBD_CHARACTERISTICS,
    SMG$CHANGE_VIRTUAL_DISPLAY,
    SMG$DELETE_CHARS,
    SMG$DELETE_LINE,
    SMG$ERASE_CHARS,
    SMG$ERASE_DISPLAY,
    SMG$ERASE_LINE,
    SMG$INSERT_LINE,
    SMG$$SCROLL_AREA;


%SBTTL 'SMG$$SIM_TERM - simulate a terminal'

GLOBAL ROUTINE SMG$$SIM_TERM (			! Simulate a terminal
    DCB,					! Addr of display ctrl block
    TEXT_LEN, 					! Number of bytes to text to send to the terminal
    TEXT_ADDR,					! Address of the text to send
    LEN_PROCESSED				! Addr to return # chars processed
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routines interprets escape and control sequences that are
!	normally sent to a terminal in terms of a virtual display (where
!	text and attributes are actually stored in buffers).
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SMG$$SIM_TERM (DCB.rz.r, 
!					  TEXT_LEN.rl.v, 
!					  TEXT_ADDR.rt.r,
!					  LEN_PROCESSED.wl.r)
!
! FORMAL PARAMETERS:
!
!	DCB			Address of display control block
!	TEXT_LEN		Number of bytes of text sent to the screen
!	TEXT_ADDR		Address of that text
!	LEN_PROCESSED		Address of longword in which to return
!				the number of characters processed
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SMG$_STRTERESC	Unknown escape sequence
!	SS$_NORMAL	Normal successful completion
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	TEXT_ADDR : REF VECTOR [, BYTE],
	DCB : REF $DCB_DECL;

    LOCAL
	CURR_PP : REF $PP_DECL,
	PBCB : REF $PBCB_DECL,
	TERM_STR : REF BLOCK [TERM_STR_LEN, LONG] FIELD (TERM_STR_FIELD),
	TERM_TYPE,
	CHAR;

    TERM_STR = DCB [DCB_SIM_CONTROL];	! point to terminal data base

    CURR_PP = .DCB [DCB_A_PP_NEXT];
    PBCB = .CURR_PP [PP_A_PBCB_ADDR];

    !+
    ! Get the terminal type.  Translate the device type
    ! to the code number understood by this program.
    !-

    CASE .DCB [DCB_SIM_DEV_TYPE] FROM UNKNOWN TO HARDCOPY OF
	SET
	[UNKNOWN, VT05, VTFOREIGN] :
	    RETURN (SMG$_STRTERESC);	! error

	[VT52] :
	    TERM_TYPE = TERM_TYPE_VT52;

	[VT100] :
	    TERM_TYPE = TERM_TYPE_VT100;

	[HARDCOPY] :
	    TERM_TYPE = TERM_TYPE_HCOPY;
	
	[INRANGE, OUTRANGE]:
	    RETURN (SMG$_STRTERESC);	! error
	    
	TES;

    INCR CHAR_NO FROM 1 TO .TEXT_LEN DO
	BEGIN
	CHAR = .TEXT_ADDR [.CHAR_NO - 1];

	SELECTONE ((.TERM_TYPE*4) + (.TERM_STR [CTL_STATUS]*2) + (.TERM_STR [ESC_STATUS])) OF
	    SET

	    [(TERM_TYPE_VT100*4) + 1] : 	! VT100 Escape Sequence
		BEGIN

		SELECTONE .CHAR OF
		    SET

		    ['['] : 			! CSI
			BEGIN
			TERM_STR [CTL_STATUS] = 1;
			TERM_STR [PRIV_STATUS] = 0;
			TERM_STR [SECOND_ARG] = 0;
			TERM_STR [ARG_1] = 0;
			TERM_STR [ARG_2] = 0;
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['='] : 			! Keypad Application Mode
			BEGIN
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['#']:			! Number sign mode
			BEGIN
			1
!			TERM_STR [ESC_STATUS] = 0;
			END;


		    ['>'] : 			! Keypad Numeric Mode
			BEGIN
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['\'] : 			! ST - exit REGIS mode
			BEGIN
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['<'] : 			! Enter ANSI mode
			BEGIN
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['M'] : 			! Reverse Index
			BEGIN

			IF (.DCB [DCB_W_CURSOR_ROW] GTR .DCB [DCB_W_ROW_START])
			THEN
			    DCB [DCB_W_CURSOR_ROW] = .DCB [DCB_W_CURSOR_ROW] - 1
			ELSE
			    BEGIN
			!+
			! We must do a reverse scroll.
			!-

			    LOCAL
				STATUS;
			    STATUS = SMG$$SCROLL_AREA (.DCB,
							.DCB [DCB_W_TOP_OF_SCRREG],
							.DCB [DCB_W_COL_START],
							(.DCB [DCB_W_BOTTOM_OF_SCRREG] -
							 .DCB [DCB_W_TOP_OF_SCRREG] +
							 1),
							.DCB [DCB_W_NO_COLS],
							SMG$M_DOWN,
							1);
			    IF NOT .STATUS THEN RETURN (.STATUS);
			    END;

			TERM_STR [ESC_STATUS] = 0;
			END;

		    [')'] : 			! Specify G1 set
			BEGIN
			1;
			END;

		    ['('] : 			! Specify G0 set
			BEGIN
			1;
			END;

		    ['A','B'] :
			BEGIN
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['0'] : 			! Graphics set
			BEGIN
			TERM_STR [ESC_STATUS] = 0;
			DCB [DCB_B_DEF_VIDEO_ATTR] =
				.DCB [DCB_B_DEF_VIDEO_ATTR] OR
				ATTR_M_REND_GRAPHIC;
			END;

		    ['1','2'] : 		! Graphics set
			BEGIN
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['5']:			! Single width single height
			BEGIN
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['7']:			! Save cursor and attributes
			BEGIN
			TERM_STR[SAVED_HPOS]=.DCB [DCB_W_CURSOR_COL];
			TERM_STR[SAVED_VERT]=.DCB [DCB_W_CURSOR_ROW];
			TERM_STR[SAVED_VIDEO_ATTR]=.DCB [DCB_B_DEF_VIDEO_ATTR];
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['8']:			! Restore cursor and attributes
			BEGIN
			DCB [DCB_W_CURSOR_COL]=.TERM_STR[SAVED_HPOS];
			DCB [DCB_W_CURSOR_ROW]=.TERM_STR[SAVED_VERT];
			DCB [DCB_B_DEF_VIDEO_ATTR]=.TERM_STR[SAVED_VIDEO_ATTR];
			TERM_STR [ESC_STATUS] = 0;
			END;

		    [OTHERWISE] :
			BEGIN
			TERM_STR [ERROR_STATUS] = 1;
			TERM_STR [ESC_STATUS] = 0;
			RETURN (SMG$_STRTERESC);	! error
			END;
		    TES;

		END;

	    [(TERM_TYPE_VT52*4) + 1] : 		! VT52 Escape Sequence
		BEGIN

		SELECTONE .CHAR OF
		    SET

		    ['A'] : 			! Cursor Up
			BEGIN
			DCB [DCB_W_CURSOR_ROW] = MAX (.DCB [DCB_W_ROW_START], .DCB [DCB_W_CURSOR_ROW] - 1);
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['B'] : 			! Cursor Down
			BEGIN
			DCB [DCB_W_CURSOR_ROW] = MIN (.DCB [DCB_W_NO_ROWS], .DCB [DCB_W_CURSOR_ROW] + 1);
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['C'] : 			! Cursor Right
			BEGIN
			DCB [DCB_W_CURSOR_COL] = MIN (.DCB [DCB_W_NO_COLS], .DCB [DCB_W_CURSOR_COL] + 1);
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['D'] : 			! Cursor Left
			BEGIN
			DCB [DCB_W_CURSOR_COL] = MAX (.DCB [DCB_W_COL_START], .DCB [DCB_W_CURSOR_COL] - 1);
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['F'] : 			! Enter 'Graphics' Mode
			BEGIN
			DCB [DCB_B_DEF_VIDEO_ATTR] =
				.DCB [DCB_B_DEF_VIDEO_ATTR] OR
				ATTR_M_REND_GRAPHIC;
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['G'] : 			! Exit 'Graphics' Mode
			BEGIN
			DCB [DCB_B_DEF_VIDEO_ATTR] =
				(.DCB [DCB_B_DEF_VIDEO_ATTR] OR
				 ATTR_M_REND_GRAPHIC) 
				XOR ATTR_M_REND_GRAPHIC;
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['H'] : 			! Cursor to Home
			BEGIN
			DCB [DCB_W_CURSOR_COL] = 1;
			DCB [DCB_W_CURSOR_ROW] = 1;
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['I'] : 			! Reverse line feed
			BEGIN

			IF (.DCB [DCB_W_CURSOR_ROW] GTR .DCB [DCB_W_ROW_START])
			THEN
			    DCB [DCB_W_CURSOR_ROW] = .DCB [DCB_W_CURSOR_ROW] - 1
			ELSE
			    BEGIN
!+
! We must do a reverse scroll.
!-

			    LOCAL
				STATUS;
			    STATUS = SMG$$SCROLL_AREA (.DCB,
							.DCB [DCB_W_TOP_OF_SCRREG],
							.DCB [DCB_W_COL_START],
							(.DCB [DCB_W_BOTTOM_OF_SCRREG] -
							 .DCB [DCB_W_TOP_OF_SCRREG] +
							 1),
							.DCB [DCB_W_NO_COLS],
							SMG$M_DOWN,
							1);
			    IF NOT .STATUS THEN RETURN (.STATUS);

			    END;

			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['J'] : 			! Erase to End of Screen
			BEGIN
			LOCAL
			    STATUS;
			STATUS = SMG$ERASE_DISPLAY (DCB [DCB_L_DID],
						    DCB [DCB_W_CURSOR_ROW],
						    DCB [DCB_W_CURSOR_COL]);
			IF NOT .STATUS THEN RETURN .STATUS;

			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['K'] : 			! Erase to End of Line
			BEGIN
			LOCAL
			    STATUS;
			STATUS = SMG$ERASE_CHARS (DCB [DCB_L_DID]);
			IF NOT .STATUS THEN RETURN (.STATUS);

			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['Y'] : 			! Direct Cursor Address
			BEGIN
			TERM_STR [CTL_STATUS] = 1;
			TERM_STR [SECOND_ARG] = 0;
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['Z'] : 			! Identify
			BEGIN
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['='] : 			! Enter Alternate Keypad Mode
			BEGIN
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['>'] : 			! Exit Alternate Keypad Mode
			BEGIN
			TERM_STR [ESC_STATUS] = 0;
			END;

		    ['\'] : 			! Exit hold-screen mode
			BEGIN
			TERM_STR [ESC_STATUS] = 0;
			END;

		    [OTHERWISE] :
			BEGIN
			TERM_STR [ERROR_STATUS] = 1;
			TERM_STR [ESC_STATUS] = 0;
			RETURN (SMG$_STRTERESC);	! error
			END;
		    TES;

		END;

	    [(TERM_TYPE_VT52*4) + 2] : 		! In an ESC Y
		BEGIN

		LOCAL
		    COORD;

		COORD = .CHAR - 32;

		IF (.COORD LSS 0)
		THEN
			BEGIN
			TERM_STR [ERROR_STATUS] = 1;
			RETURN (SMG$_STRTERESC);	! error
			END;

		IF (.TERM_STR [SECOND_ARG]) THEN TERM_STR [ARG_2] = .COORD ELSE TERM_STR [ARG_1] = .COORD;

		IF (.TERM_STR [SECOND_ARG])
		THEN
		    BEGIN
		    TERM_STR [CTL_STATUS] = 0;
		    DCB [DCB_W_CURSOR_ROW]   = .TERM_STR [ARG_1];
		    DCB [DCB_W_CURSOR_COL]  = .TERM_STR [ARG_2];
		    TERM_STR [CTL_STATUS] = 0;
		    END
		ELSE
		    TERM_STR [SECOND_ARG] = 1;

		END;

	    [(TERM_TYPE_VT100*4) + 2] : 	! VT100 Control Sequence
		BEGIN

		SELECTONE .CHAR OF
		    SET

		    ['0' TO '9'] :
			BEGIN

			IF (.TERM_STR [SECOND_ARG])
			THEN
			    BEGIN
			    TERM_STR [ARG_2] = .TERM_STR [ARG_2]*10;
			    TERM_STR [ARG_2] = .TERM_STR [ARG_2] + (.CHAR - '0');
			    END
			ELSE
			    BEGIN
			    TERM_STR [ARG_1] = .TERM_STR [ARG_1]*10;
			    TERM_STR [ARG_1] = .TERM_STR [ARG_1] + (.CHAR - '0');
			    END;

			END;

		    ['?'] : 			! Private parameter
			BEGIN

			IF (.TERM_STR [PRIV_STATUS])
			THEN	BEGIN
				TERM_STR [ERROR_STATUS] = 1;
				RETURN (SMG$_STRTERESC);	! error
				END;

			TERM_STR [PRIV_STATUS] = 1;
			END;

		    [';'] : 			! Next parameter
			BEGIN

			IF (.TERM_STR [SECOND_ARG])
			THEN
				BEGIN
				TERM_STR [ERROR_STATUS] = 1;
				RETURN (SMG$_STRTERESC);	! error
				END;

			TERM_STR [SECOND_ARG] = 1;
			END;

		    ['D'] : 			! Cursor Backward
			BEGIN
			DCB [DCB_W_CURSOR_COL] = MAX (.DCB [DCB_W_COL_START],
			   .DCB [DCB_W_CURSOR_COL] - MAX (1, .TERM_STR [ARG_1]));

			IF (.TERM_STR [SECOND_ARG])
			THEN
				BEGIN
				TERM_STR [ERROR_STATUS] = 1;
				RETURN (SMG$_STRTERESC);	! error
				END;

			TERM_STR [CTL_STATUS] = 0;
			END;

		    ['B'] : 			! Cursor Down
			BEGIN
			DCB [DCB_W_CURSOR_ROW] = MIN (.DCB [DCB_W_NO_ROWS], 	!
			    .DCB [DCB_W_CURSOR_ROW] + MAX (1, .TERM_STR [ARG_1]));

			IF (.TERM_STR [SECOND_ARG])
			THEN
				BEGIN
				TERM_STR [ERROR_STATUS] = 1;
				RETURN (SMG$_STRTERESC);	! error
				END;

			TERM_STR [CTL_STATUS] = 0;
			END;

		    ['C'] : 			! Cursor Forward
			BEGIN
			DCB [DCB_W_CURSOR_COL] = MIN (.DCB [DCB_W_NO_COLS], 	!
			    .DCB [DCB_W_CURSOR_COL] + MAX (1, .TERM_STR [ARG_1]));

			IF (.TERM_STR [SECOND_ARG])
			THEN
				BEGIN
				TERM_STR [ERROR_STATUS] = 1;
				RETURN (SMG$_STRTERESC);	! error
				END;

			TERM_STR [CTL_STATUS] = 0;
			END;

		    ['H','f'] : 		! Cursor Position
			BEGIN

			IF (.TERM_STR [ARG_1] GTR .PBCB [PBCB_W_WIDTH])
			THEN
			    BEGIN
			    TERM_STR [ERROR_STATUS] = 1;
			    RETURN (SMG$_STRTERESC);	! error
			    END
			ELSE
			    BEGIN
			    DCB [DCB_W_CURSOR_ROW] = MAX (1, (.TERM_STR [ARG_1]) - 1);
			    DCB [DCB_W_CURSOR_COL] = MAX (1, (.TERM_STR [ARG_2]) - 1);
			    END;

			TERM_STR [CTL_STATUS] = 0;
			END;

		    ['A'] : 			! Cursor Up
			BEGIN
			DCB [DCB_W_CURSOR_ROW] = MAX (.DCB [DCB_W_ROW_START], 	!
			    .DCB [DCB_W_CURSOR_ROW] - MAX (1, .TERM_STR [ARG_1]));

			IF (.TERM_STR [SECOND_ARG])
			THEN
				BEGIN
				TERM_STR [ERROR_STATUS] = 1;
				RETURN (SMG$_STRTERESC);	! error
				END;

			TERM_STR [CTL_STATUS] = 0;
			END;

		    ['c'] : 			! Device Attributes
			BEGIN
			TERM_STR [CTL_STATUS] = 0;
			END;

		    ['P'] : 			! Delete Character
			BEGIN

			LOCAL
			    STATUS,
			    COUNT;

			COUNT = .TERM_STR [ARG_1];
			IF (.COUNT EQL 0) THEN COUNT = 1;
			
			STATUS = SMG$DELETE_CHARS (DCB [DCB_L_DID],
						   COUNT,
						   DCB [DCB_W_CURSOR_ROW],
						   DCB [DCB_W_CURSOR_COL]);
			IF NOT .STATUS THEN RETURN (.STATUS);

			TERM_STR [CTL_STATUS] = 0;
			END;

		    ['r'] : 			! Set Top and Bottom Margins
			BEGIN
			DCB [DCB_W_ROW_START] = MAX (1, (.TERM_STR [ARG_1]) - 1);
			DCB [DCB_W_NO_ROWS] = MAX (1, (.TERM_STR [ARG_2]) - 1);

			IF (.DCB [DCB_W_ROW_START] GEQ .DCB [DCB_W_NO_ROWS])
			THEN
			    BEGIN
			    TERM_STR [ERROR_STATUS] = 1;
			    RETURN (SMG$_STRTERESC);	! error
			    END;

			DCB [DCB_W_CURSOR_ROW] = 1;
			DCB [DCB_W_CURSOR_COL] = 1;
			TERM_STR [CTL_STATUS] = 0;
			END;

		    ['M'] : 			! Delete Line
			BEGIN

			LOCAL
			    COUNT;

			COUNT = .TERM_STR [ARG_1];
			IF (.COUNT EQL 0) THEN COUNT = 1;

			IF ((.DCB [DCB_W_CURSOR_ROW] LSS .DCB [DCB_W_ROW_START]) OR 	!
			    (.DCB [DCB_W_CURSOR_ROW] GTR .DCB [DCB_W_NO_ROWS]))
			THEN
			    BEGIN
			    TERM_STR [ERROR_STATUS] = 1;
			    RETURN (SMG$_STRTERESC);	! error
			    END
			ELSE
			    BEGIN
			    LOCAL
				STATUS;
			    STATUS = SMG$DELETE_LINE (DCB [DCB_L_DID],
						      DCB [DCB_W_CURSOR_ROW],
						      COUNT);
			    IF NOT .STATUS THEN RETURN (.STATUS);
			    END;

			TERM_STR [CTL_STATUS] = 0;
			END;

		    ['L'] : 			! Insert line
			BEGIN

			LOCAL
			    COUNT;

			COUNT = .TERM_STR [ARG_1];
			IF (.COUNT EQL 0) THEN COUNT = 1;

			IF ((.DCB [DCB_W_CURSOR_ROW] LSS .DCB [DCB_W_ROW_START]) OR 	!
			    (.DCB [DCB_W_CURSOR_ROW] GTR .DCB [DCB_W_NO_ROWS]))
			THEN
			    BEGIN
			    TERM_STR [ERROR_STATUS] = 1;
			    RETURN (SMG$_STRTERESC);	! error
			    END
			ELSE
			    BEGIN
			    LOCAL
				STATUS;

			    WHILE (.COUNT GTR 0) DO
			    BEGIN
			    STATUS = SMG$INSERT_LINE (DCB [DCB_L_DID],
						      DCB [DCB_W_CURSOR_ROW]);
			    IF NOT .STATUS THEN RETURN (.STATUS);
			    END

			    END;

			TERM_STR [CTL_STATUS] = 0;
			END;

		    ['J'] : 			! Erase in display
			BEGIN

			LOCAL
			    HPOS,
			    VPOS,
			    END_HPOS,
			    END_VPOS;

			CASE .TERM_STR [ARG_1] FROM 0 TO 2 OF
			    SET

			    [0] : 		! Active position to end
				BEGIN
				HPOS = .DCB [DCB_W_CURSOR_COL];
				VPOS = .DCB [DCB_W_CURSOR_ROW];
				END_HPOS = .DCB [DCB_W_NO_COLS];
				END_VPOS = .DCB [DCB_W_NO_ROWS];
				END;

			    [1] : 		! Start to active position
				BEGIN
				HPOS = .DCB [DCB_W_COL_START];
				VPOS = .DCB [DCB_W_ROW_START];
				END_HPOS = .DCB [DCB_W_CURSOR_COL];
				END_VPOS = .DCB [DCB_W_CURSOR_ROW];
				END;

			    [2] : 		! All of display
				BEGIN
				HPOS = .DCB [DCB_W_COL_START];
				VPOS = .DCB [DCB_W_ROW_START];
				END_HPOS = .DCB [DCB_W_NO_COLS];
				END_VPOS = .DCB [DCB_W_NO_ROWS];
				END;
			    TES;

			    BEGIN
			    LOCAL
				STATUS;
			    STATUS = SMG$ERASE_DISPLAY (DCB [DCB_L_DID],
							VPOS,
							HPOS,
							END_VPOS,
							END_HPOS);
			    IF NOT .STATUS THEN RETURN (.STATUS);
			    END;

			TERM_STR [CTL_STATUS] = 0;
			END;

		    ['K'] : 			! Erase in display
			BEGIN

			LOCAL
			    HPOS,
			    END_HPOS;

			CASE .TERM_STR [ARG_1] FROM 0 TO 2 OF
			    SET

			    [0] : 		! Active position to end
				BEGIN
				HPOS = .DCB [DCB_W_CURSOR_COL];
				END_HPOS = .DCB [DCB_W_NO_COLS];
				END;

			    [1] : 		! Start to active position
				BEGIN
				HPOS = .DCB [DCB_W_COL_START];
				END_HPOS = .DCB [DCB_W_CURSOR_COL];
				END;

			    [2] : 		! All of line
				BEGIN
				HPOS = .DCB [DCB_W_COL_START];
				END_HPOS = .DCB [DCB_W_NO_COLS];
				END;
			    TES;

			    BEGIN
			    LOCAL
				STATUS;
			    STATUS = SMG$ERASE_DISPLAY (DCB [DCB_L_DID],
						        DCB [DCB_W_CURSOR_ROW],
							HPOS,
							DCB [DCB_W_CURSOR_ROW],
							END_HPOS);
			    IF NOT .STATUS THEN RETURN (.STATUS);
			    END;

			TERM_STR [CTL_STATUS] = 0;
			END;

		    ['m'] : 			! Select graphic rendition
			BEGIN

			SELECTONE .TERM_STR [ARG_1] OF
			    SET

			    [0] :
				BEGIN
				IF (.DCB [DCB_B_DEF_VIDEO_ATTR] AND
				    ATTR_M_REND_GRAPHIC) EQL 0
				THEN
				    DCB [DCB_B_DEF_VIDEO_ATTR] = SMG$M_NORMAL
				ELSE
				    DCB [DCB_B_DEF_VIDEO_ATTR] = ATTR_M_REND_GRAPHIC;
				END;

			    [1] :
				BEGIN
				DCB [DCB_B_DEF_VIDEO_ATTR] = 
					.DCB [DCB_B_DEF_VIDEO_ATTR] OR
					SMG$M_BOLD;  
				END;

			    [4] :
				BEGIN
				DCB [DCB_B_DEF_VIDEO_ATTR] = 
					.DCB [DCB_B_DEF_VIDEO_ATTR] OR
					SMG$M_UNDERLINE;  
				END;

			    [5] :
				BEGIN
				DCB [DCB_B_DEF_VIDEO_ATTR] = 
					.DCB [DCB_B_DEF_VIDEO_ATTR] OR
					SMG$M_BLINK;  
				END;

			    [7] :
				BEGIN
				DCB [DCB_B_DEF_VIDEO_ATTR] = 
					.DCB [DCB_B_DEF_VIDEO_ATTR] OR
					SMG$M_REVERSE;  
				END;

			    [OTHERWISE] :
				BEGIN
				TERM_STR [ERROR_STATUS] = 1;
				RETURN (SMG$_STRTERESC);	! error
				END;
			    TES;

			IF (.TERM_STR [SECOND_ARG])
			THEN

			    SELECTONE .TERM_STR [ARG_2] OF
				SET

				[0] :
				    BEGIN
				    IF (.DCB [DCB_B_DEF_VIDEO_ATTR] AND
				        ATTR_M_REND_GRAPHIC) EQL 0
				    THEN
				        DCB [DCB_B_DEF_VIDEO_ATTR] = SMG$M_NORMAL
				    ELSE
				        DCB [DCB_B_DEF_VIDEO_ATTR] = ATTR_M_REND_GRAPHIC;
				    END;

				[1] :
				    BEGIN
				    DCB [DCB_B_DEF_VIDEO_ATTR] =
					.DCB [DCB_B_DEF_VIDEO_ATTR] OR
					SMG$M_BOLD;
				    END;

				[4] :
				    BEGIN
				    DCB [DCB_B_DEF_VIDEO_ATTR] =
					.DCB [DCB_B_DEF_VIDEO_ATTR] OR
					SMG$M_UNDERLINE;
				    END;

				[5] :
				    BEGIN
				    DCB [DCB_B_DEF_VIDEO_ATTR] =
					.DCB [DCB_B_DEF_VIDEO_ATTR] OR
					SMG$M_BLINK;
				    END;

				[7] :
				    BEGIN
				    DCB [DCB_B_DEF_VIDEO_ATTR] =
					.DCB [DCB_B_DEF_VIDEO_ATTR] OR
					SMG$M_REVERSE;
				    END;

				[OTHERWISE] :
				    BEGIN
				    TERM_STR [ERROR_STATUS] = 1;
				    RETURN (SMG$_STRTERESC);	! error
				    END;
				TES;

			TERM_STR [CTL_STATUS] = 0;
			END;

		    ['h'] : 			! Set mode
			BEGIN

			IF (.TERM_STR [PRIV_STATUS])
			THEN

			    SELECTONE (.TERM_STR [ARG_1]) OF
				SET

				[8] : 		! Autorepeat
				    BEGIN
				    TERM_STR [CTL_STATUS] = 0;
				    END;

				[7] : 		! Autowrap
				    BEGIN
				    TERM_STR [CTL_STATUS] = 0;
				    END;

				[3] : 		! 132-column mode
				    BEGIN
				    LOCAL
					STATUS;
				    STATUS = SMG$CHANGE_PBD_CHARACTERISTICS (
							PBCB [PBCB_L_PBID],
							%REF (132));
				    IF NOT .STATUS THEN RETURN .STATUS;

				    IF .DCB [DCB_V_AUTOBENDED]
				    THEN
					BEGIN		! only change display for autob
				    	STATUS = SMG$CHANGE_VIRTUAL_DISPLAY (
							DCB [DCB_L_DID],
							0,
							%REF(132));
					IF NOT .STATUS THEN RETURN .STATUS;
					END;
				    TERM_STR [CTL_STATUS] = 0;
				    END;

				[1] : 		! Cursor keys mode
				    BEGIN
				    TERM_STR [CTL_STATUS] = 0;
				    END;

				[OTHERWISE] :
				    BEGIN
				    TERM_STR [ERROR_STATUS] = 1;
				    TERM_STR [CTL_STATUS] = 0;
				    RETURN (SMG$_STRTERESC);	! error
				    END;
				TES

			ELSE

			    SELECTONE (.TERM_STR [ARG_1]) OF
				SET

				[4] : 		! Insert-replace mode
				    BEGIN
				    TERM_STR [INSERT_MODE] = 1;
				    TERM_STR [CTL_STATUS] = 0;
				    END;

				[OTHERWISE] :
				    BEGIN
				    TERM_STR [ERROR_STATUS] = 1;
				    TERM_STR [CTL_STATUS] = 0;
				    RETURN (SMG$_STRTERESC);	! error
				    END;
				TES;

			END;

		    ['l'] : 			! Clear mode
			BEGIN

			IF (.TERM_STR [PRIV_STATUS])
			THEN

			    SELECTONE (.TERM_STR [ARG_1]) OF
				SET

				[8] : 		! Autorepeat
				    BEGIN
				    TERM_STR [CTL_STATUS] = 0;
				    END;

				[7] : 		! Autowrap
				    BEGIN
				    TERM_STR [CTL_STATUS] = 0;
				    END;

				[3] : 		! 80-column mode
				    BEGIN
				    LOCAL
					STATUS;
				    STATUS = SMG$CHANGE_PBD_CHARACTERISTICS (
							PBCB [PBCB_L_PBID],
							%REF (80));
				    IF NOT .STATUS THEN RETURN .STATUS;

				    IF .DCB [DCB_V_AUTOBENDED]
				    THEN
					BEGIN		! only change display for autob
				    	STATUS = SMG$CHANGE_VIRTUAL_DISPLAY (
							DCB [DCB_L_DID],
							0,
							%REF(80));
					IF NOT .STATUS THEN RETURN .STATUS;
					END;
				    TERM_STR [CTL_STATUS] = 0;
				    END;

				[1] : 		! Cursor keys mode
				    BEGIN
				    TERM_STR [CTL_STATUS] = 0;
				    END;

				[6] : 		! Origin mode
				    BEGIN
				    DCB [DCB_W_CURSOR_COL] = 1;
				    DCB [DCB_W_CURSOR_ROW] = 1;
				    TERM_STR [CTL_STATUS] = 0;
				    END;

				[OTHERWISE] :
				    BEGIN
				    TERM_STR [ERROR_STATUS] = 1;
				    TERM_STR [CTL_STATUS] = 0;
				    RETURN (SMG$_STRTERESC);	! error
				    END;
				TES

			ELSE

			    SELECTONE (.TERM_STR [ARG_1]) OF
				SET

				[4] : 		! Insert-replace mode
				    BEGIN
				    TERM_STR [INSERT_MODE] = 0;
				    TERM_STR [CTL_STATUS] = 0;
				    END;

				[OTHERWISE] :
				    BEGIN
				    TERM_STR [ERROR_STATUS] = 1;
				    TERM_STR [CTL_STATUS] = 0;
				    RETURN (SMG$_STRTERESC);	! error
				    END;
				TES;

			END;

		    [OTHERWISE] :
			BEGIN
			TERM_STR [ERROR_STATUS] = 1;
			TERM_STR [CTL_STATUS] = 0;
			RETURN (SMG$_STRTERESC);	! error
			END;
		    TES;

		END;

	    [(TERM_TYPE_HCOPY*4), (TERM_TYPE_VT52*4), (TERM_TYPE_VT100*4)] : 	! Normal mode
		BEGIN

		SELECTONE .CHAR OF
		    SET

		    [0 TO 31] : 		! Control Character
			BEGIN

			CASE .CHAR FROM 0 TO 31 OF
			    SET

			    [14] : 		! SO
				BEGIN
				IF (.DCB [DCB_B_DEF_VIDEO_ATTR] AND
				    ATTR_M_REND_GRAPHIC) EQL 0
				THEN		! prev. normal chars
				    BEGIN
				    IF .TERM_STR [G0_STATE] EQL 0
				    THEN
				    !+
				    ! The default is now non-graphics chars.
				    ! Exit this routine to let the current
				    ! string be written with this default.
				    ! The next time we are called, we can
				    ! turn off normal chars as the default, and
				    ! print the rest of the string.
				    !-
				    	BEGIN
				    	TERM_STR [G0_STATE] = 1;
				    	.LEN_PROCESSED = .CHAR_NO - 1;
				    	RETURN (SS$_NORMAL);
				    	END
				    ELSE
				    	BEGIN
				    	TERM_STR [G0_STATE] = 0;
				    	DCB [DCB_B_DEF_VIDEO_ATTR] = 
				    	    .DCB [DCB_B_DEF_VIDEO_ATTR] OR
				     	    ATTR_M_REND_GRAPHIC;
				    	END;

				    END;
				END;

			    [15] : 		! SI
				BEGIN
				IF (.DCB [DCB_B_DEF_VIDEO_ATTR] AND
				    ATTR_M_REND_GRAPHIC) NEQ 0
				THEN		! prev. graphics chars
				    BEGIN
				    IF .TERM_STR [G1_STATE] EQL 0
				    THEN
				    !+
				    ! The default is now graphics chars.
				    ! Exit this routine to let the current
				    ! string be written with this default.
				    ! The next time we are called, we can
				    ! turn off graphics as the default, and
				    ! print the rest of the string.
				    !-
				    	BEGIN
				    	TERM_STR [G1_STATE] = 1;
				    	.LEN_PROCESSED = .CHAR_NO - 1;
				    	RETURN (SS$_NORMAL);
				    	END
				    ELSE
				    	BEGIN
				    	TERM_STR [G1_STATE] = 0;
				    	DCB [DCB_B_DEF_VIDEO_ATTR] = 
				    	    .DCB [DCB_B_DEF_VIDEO_ATTR] XOR
				     	    ATTR_M_REND_GRAPHIC;
				    	END;

				    END;
				END;

			    [27] : 		! ESC
				BEGIN
				TERM_STR [ESC_STATUS] = 1;
				END;

			    [INRANGE,OUTRANGE] :
				BEGIN
				!+
				! We must've finished processing the
				! escape/control sequence, and now are
				! running into trailing normal characters.
				! Exit at this point and let the caller
				! process normal characters.
				!-
				.LEN_PROCESSED = .CHAR_NO - 1;
				RETURN (SS$_NORMAL);
				END;
			    TES;

			END;

		    [OTHERWISE] :		! misc. chars
			BEGIN
			.LEN_PROCESSED = .CHAR_NO - 1;
			RETURN (SS$_NORMAL);
			END;
		    TES;

		END;

	    [OTHERWISE] :
		BEGIN
		TERM_STR [ERROR_STATUS] = 1;
		RETURN (SMG$_STRTERESC);	! error
		END;
	    TES;

	END;

    .LEN_PROCESSED = .TEXT_LEN;		! processed all characters
    RETURN (SS$_NORMAL);
    END;					! End of routine SMG$$SIM_TERM

END					! End of module SMG$$SIM_TERM

ELUDOM
