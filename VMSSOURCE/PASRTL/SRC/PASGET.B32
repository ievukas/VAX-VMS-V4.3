MODULE PAS$GET ( %TITLE 'GET procedure'
		IDENT = '1-002'		! File: PASGET.B32 Edit: SBL1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains PAS$GET, which implements the
!	VAX-11 Pascal GET procedure.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
! 1-002 - Turn off NLK bit after $GET.  SPR 11-55690  SBL 8-Apr-1983
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$GET: NOVALUE,				! Do a GET
    PAS$GET_UNLOCK: NOVALUE,			! Do a GET and UNLOCK
    PAS$$GET: JSB_GET NOVALUE;			! Internally callable

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE

%SBTTL 'PAS$GET - GET procedure'
GLOBAL ROUTINE PAS$GET (				! Do a GET
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	ERROR						! Unwind address if error
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAS$GET implements the VAX-11 Pascal GET procedure.  It
!	reads a record from the file and places its contents in
!	the file buffer.
!
! CALLING SEQUENCE:
!
!	CALL PAS$GET (PFV.mr.r [, ERROR.j.r])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  if an error occurs.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Opens standard files INPUT or OUTPUT if not already open.
!	Turns off RAB$V_NLK which might have been set by PAS$GET_UNLOCK
!
! SIGNALLED ERRORS:
!
!	FILNOTOPE - file not open
!	FILNOTINS - file not in Inspection mode
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,		! File control block
	PFV_ADDR: VOLATILE,				! Enable argument
	UNWIND_ACT: VOLATILE,				! Enable argument
	ERROR_ADDR: VOLATILE;				! Enable argument

    BIND
	RAB = FCB: REF BLOCK [, BYTE];			! RAB is FCB

    BUILTIN
	ACTUALCOUNT,
	TESTBITSS;

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);

    IF ACTUALCOUNT () GEQU 2
    THEN
	ERROR_ADDR = .ERROR;				! Set unwind address

    !+
    ! Set PFV address enable argument.
    !-

    PFV_ADDR = PFV [PFV$R_PFV];

    !+
    ! Validate and lock PFV
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Resolve lazy lookahead, if any.  Also may open INPUT or OUTPUT.
    !-

    IF NOT .PFV [PFV$V_VALID]
    THEN
	PAS$$LOOK_AHEAD (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! Verify that the file is open.
    !-

    IF NOT .PFV [PFV$V_OPEN]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTOPE,0);

    !+
    ! Verify that we are in Inspection mode
    !-

    IF NOT .FCB [FCB$V_INSPECTION]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTINS,0);

    !+
    ! Turn off RAB$V_NLK.
    !-

    RAB [RAB$V_NLK] = 0;

    !+
    ! Do the GET
    !-

    PAS$$GET (PFV [PFV$R_PFV], FCB [FCB$R_FCB]);

    !+
    ! Indicate successful completion
    ! Unlock the file
    !-

    FCB [FCB$L_STATUS] = 0;
    PFV [PFV$V_LOCK] = 0;

    RETURN;

    END;					! End of routine PAS$GET

!<BLF/PAGE>

%SBTTL 'PAS$GET_UNLOCK - GET procedure with UNLOCK'
GLOBAL ROUTINE PAS$GET_UNLOCK (
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	ERROR						! Unwind address if error
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAS$GET_UNLOCK is called by the compiled code when a READ is
!	done for a non-textfile.  It does the equivalent of a GET followed
!	by an UNLOCK.  What it actually does is set RAB$V_NLK which will
!	cause the next $GET to not lock the record.  This bit is reset by
!	PAS$FIND2, PAS$FINDK, PAS$GET, PAS$RESET and PAS$RESETK and
!	PAS$REWRITE2, which are the only procedures
!	which do $GETs on non-textfiles.  It doesn't matter for textfiles
!	since they may only be sequential organization.
!
! CALLING SEQUENCE:
!
!	CALL PAS$GET_UNLOCK (PFV.mr.r [, ERROR.j.r])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  if an error occurs.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Opens standard files INPUT or OUTPUT if not already open.
!
! SIGNALLED ERRORS:
!
!	FILNOTOPE - file not open
!	FILNOTINS - file not in Inspection mode
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,		! File control block
	PFV_ADDR: VOLATILE,				! Enable argument
	UNWIND_ACT: VOLATILE,				! Enable argument
	ERROR_ADDR: VOLATILE;				! Enable argument

    BIND
	RAB = FCB: REF BLOCK [, BYTE];			! RAB is FCB address

    BUILTIN
	ACTUALCOUNT,
	TESTBITSS;

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);

    IF ACTUALCOUNT () GEQU 2
    THEN
	ERROR_ADDR = .ERROR;				! Set unwind address

    !+
    ! Set PFV address enable argument.
    !-

    PFV_ADDR = PFV [PFV$R_PFV];

    !+
    ! Validate and lock PFV
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Resolve lazy lookahead, if any.  Also may open INPUT or OUTPUT.
    !-

    IF NOT .PFV [PFV$V_VALID]
    THEN
	PAS$$LOOK_AHEAD (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! Verify that the file is open.
    !-

    IF NOT .PFV [PFV$V_OPEN]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTOPE,0);

    !+
    ! Verify that we are in Inspection mode
    !-

    IF NOT .FCB [FCB$V_INSPECTION]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTINS,0);

    !+
    ! If this is not a textfile, set RAB$V_NLK.
    !-

    IF NOT .FCB [FCB$V_TEXT]
    THEN
	RAB [RAB$V_NLK] = 1;

    !+
    ! Do the GET
    !-

    PAS$$GET (PFV [PFV$R_PFV], FCB [FCB$R_FCB]);

    !+
    ! Indicate successful completion
    ! Unlock the file
    !-

    FCB [FCB$L_STATUS] = 0;
    PFV [PFV$V_LOCK] = 0;

    RETURN;

    END;					! End of routine PAS$GET_UNLOCK

!<BLF/PAGE>

%SBTTL 'PAS$$GET - Internally callable GET'
GLOBAL ROUTINE PAS$$GET (				! Do a GET
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	FCB: REF $PAS$FCB_CONTROL_BLOCK			! Control Block
    ): JSB_GET NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAS$$GET implements the VAX-11 Pascal GET procedure.  It
!	reads a record from the file and places its contents in
!	the file buffer.
!
! CALLING SEQUENCE:
!
!	JSB PAS$$GET (PFV.mr.r, FCB.mr.r)
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	FCB		- The File Control Block for the file.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the file is open, is in inspection mode and is locked.
!	It is assumed that lazy lookahead is not in progress.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	FAIGETLOC - failed to GET locked component
!	GETAFTEOF - GET attempted after end-of-file
!	ERRDURGET - error during GET
!
!--

    BEGIN

    LOCAL
	STATUS;

    BIND
	RAB = FCB: REF BLOCK [, BYTE];

    !+
    ! Set initial conditions of PFV flags
    !-

    PFV [PFV$V_DFB] = 0;	! Buffer undefined
    PFV [PFV$V_EOF_DEFINED] = 1;! EOF defined after GET

    !+
    ! If EOF is true, then signal an error.
    !-

    IF .FCB [FCB$V_EOF]
    THEN
	$PAS$IO_ERROR (PAS$_GETAFTEOF,0);

    !+
    ! GET from a textfile is different...
    !-

    IF .FCB [FCB$V_TEXT]
    THEN
	BEGIN
	!+
	! Are we already at end-of-line?  If so, set lazy-lookahead
	!-
	IF .PFV [PFV$V_EOLN]
	THEN
	    BEGIN
	    FCB [FCB$V_LAZY] = 1;
	    PFV [PFV$V_VALID] = 0;
	    RETURN;
	    END;
	
	!+
	! Advance current record pointer
	!-

	FCB [FCB$A_RECORD_CUR] = .FCB [FCB$A_RECORD_CUR] + 1;

	!+
	! Are we now at end-of-line?
	!-

	IF .FCB [FCB$A_RECORD_CUR] GEQA .FCB [FCB$A_RECORD_END]
	THEN
	    BEGIN
	    !+
	    ! At end-of-line.  Set EOL, move a blank to user buffer.
	    !-

	    PFV [PFV$V_EOLN] = 1;
	    CH$WCHAR (%C' ', .PFV [PFV$A_BUFFER]);
	    END
	ELSE
	    !+
	    ! Otherwise move new character to user buffer
	    !-

	    CH$WCHAR (..FCB [FCB$A_RECORD_CUR], .PFV [PFV$A_BUFFER]);

	!+
	! Mark buffer and PFV as valid and return immediately.
	!-

	PFV [PFV$V_VALID] = 1;
	PFV [PFV$V_DFB] = 1;
	RETURN;
	END;

    !+
    ! Not textfile, call RMS to get a record.
    !-

    RAB [RAB$B_RAC] = RAB$C_SEQ;	! Set sequential access mode
    STATUS = $PAS$RMS_OP ($GET (RAB=.RAB));

    !+
    ! If varying, put component length in first word of user buffer.
    ! Do this before we check for errors!
    !-

    IF .FCB [FCB$V_VARYING]
    THEN
	(.PFV [PFV$A_BUFFER])<0,16,0> = .RAB [RAB$W_RSZ];

    !+
    ! Turn off RAB$V_NLK now just to make sure we don't have problems
    ! later on.
    !-

    RAB [RAB$V_NLK] = 0;

    IF NOT .STATUS
    THEN
	BEGIN
	!+
	! $GET failed.  If RMS$_EOF, simply set EOF condition.  Otherwise,
	! signal an error.
	!-
	IF .RAB [RAB$L_STS] EQLU RMS$_EOF
	THEN
	    FCB [FCB$V_EOF] = 1
	ELSE IF .RAB [RAB$L_STS] EQLU RMS$_RLK
	THEN
	    $PAS$IO_ERROR (PAS$_FAIGETLOC)	! Failed to GET locked component
	ELSE
	    $PAS$IO_ERROR (PAS$_ERRDURGET);
	PFV [PFV$V_DFB] = 0;
	END
    ELSE
	BEGIN
	FCB [FCB$V_EOF] = 0;
	PFV [PFV$V_DFB] = 1;
	END;

    RETURN;

    END;					! End of routine PAS$$GET

!<BLF/PAGE>

END						! End of module PAS$GET

ELUDOM
