MODULE PAS$WRITE_REALF_D1 ( %TITLE 'Write an D_floating in F format - V1 semantics'
		IDENT = '1-002'			! File: PASWRIFD1.B32 Edit: SBL1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains a procedure which writes a D_floating in
!	fixed-point notation to a textfile using V1 semantics.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
! 1-002 - Make total-width a longword.  SBL 29-June-1982
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$WRITE_REALF_D1: NOVALUE,		! Write to textfile
    LOCAL_HANDLER;				! Local handler

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!

%SBTTL 'PAS$WRITE_REALF_D1 - Write D_floating in F format to textfile - V1'
GLOBAL ROUTINE PAS$WRITE_REALF_D1 (
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	VALUE_0: BLOCK [4, BYTE],VALUE_1,		! Value to write
	TOTAL_WIDTH: SIGNED,				! Total field width
	FRAC_DIGITS: SIGNED,				! Digits in fraction
	ERROR						! Error unwind address
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure writes a D_floating value in fixed-point notation
!	to the specified textfile.
!
!	It uses the VAX-11 Pascal V1 semantics where if the value is not
!	negative, an extra leading blank appears.  This is contary to
!	the ISO standard.
!
!	This procedure is implemented using public "single-dollar" interfaces
!	to the Pascal Run-Time Library so that it may be excluded from
!	the shareable image PASRTL.EXE.
!
! CALLING SEQUENCE:
!
!	CALL PAS$WRITE_REALF_D1 (PFV.mr.r, VALUE.rd.v , TOTAL_WIDTH.rl.v,
!			       FRAC_DIGITS.rl.v [, ERROR.ja.r]])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	VALUE		- The D_floating value to write.  Note that this is
!			  passed by immediate value, requiring two argument
!			  list positions.
!
!	TOTAL_WIDTH	- Total field width.
!
!	FRAC_DIGITS	- Number of digits in fraction.
!
!	ERROR		- Optional.  Address to unwind to if an error occurs.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	If the file is the standard file OUTPUT, it is implicitly opened.
!
! SIGNALLED ERRORS:
!
!	LINTOOLON - line too long
!	NEGWIDDIG - negative Width or Digits specification is not allowed
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT;

    LOCAL
	FIELD_WIDTH,					! Minimum/actual field width
	TEMP_STRING,					! Temporary for convert
	PFV_ADDR: VOLATILE,				! Enable argument
	UNWIND_ACT: VOLATILE,				! Enable argument
	ERROR_ADDR: VOLATILE;				! Enable argument

    ENABLE
	LOCAL_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    !+
    ! Get ERROR parameter, if present.
    !-

    IF ACTUALCOUNT () GEQU 6
    THEN
	ERROR_ADDR = .ERROR;		! Set unwind address

    PFV_ADDR = PFV [PFV$R_PFV];		! Set PFV address

    !+
    ! The difference between V2 and V1 semantics is that for V2
    ! (and ISO), the representation of the floating point value
    ! has no leading blank if not negative.  V1 put a leading
    ! blank there, possibly causing the field to be extended
    ! an extra character.
    !
    ! To implement this, do a trial conversion of the value into
    ! a scratch string.  The convert routine will tell us how many
    ! characters are required for the conversion.  If the value
    ! is not negative, increase the field width to 1 more character
    ! than is necessary.  This will cause an extra leading blank.
    !-

    FIELD_WIDTH = .TOTAL_WIDTH;	! Get specified field width

    IF (NOT .VALUE_0 [0,15,1,0]) AND	! If value is not negative
       (.FIELD_WIDTH GEQ 0) AND		! Don't bother for invalid width
       (.FRAC_DIGITS GEQ 0)		! Don't bother for invalid digits
    THEN
	BEGIN

	FIELD_WIDTH = 0;		! Expand field
	
	!+
	! Do the conversion into a temporary.  FIELD_WIDTH will then have
	! the number of characters needed.
	!-

	PAS$CVT_D_T (VALUE_0,		! Value to convert
		     TEMP_STRING,	! Scratch string
		     FIELD_WIDTH,	! Minimum/actual width
		     0,			! Maximum width
		     .FRAC_DIGITS);	! Number of fraction digits

	!+
	! Set FIELD_WIDTH to be the maximum of the needed length plus 1
	! and the caller-specified width.
	!-

	FIELD_WIDTH = .FIELD_WIDTH + 1;
	IF .FIELD_WIDTH LSS .TOTAL_WIDTH
	THEN
	    FIELD_WIDTH = .TOTAL_WIDTH;

	END;

    !+
    ! Now call PAS$WRITE_REALF_D to do the actual write.
    !-

    PAS$WRITE_REALF_D (PFV [PFV$R_PFV], .VALUE_0, .VALUE_1, 
		       .FIELD_WIDTH, .FRAC_DIGITS);

    RETURN;

    END;					! End of routine PAS$WRITE_REALF_D1

!<BLF/PAGE>

%SBTTL 'LOCAL_HANDLER - Local handler'
ROUTINE LOCAL_HANDLER (
    	SIGNAL_ARGS: REF BLOCK [, BYTE], 	! Signal arguments array
    	MECH_ARGS: REF BLOCK [, BYTE],		! Mechanism arguments array
    	ENABLE_ARGS: REF VECTOR [, LONG]	! Enable arguments array
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the condition handler enabled by PAS$WRITE_REALF_D1.
!	If the current signal is a Pascal error on the file our establisher 
!	was called with, we unwind to the caller of the establisher
!	with R0 being the status code of the error.
!
!
! CALLING SEQUENCE:
!
!	status.wlc.v = STATUS_HANDLER (SIGNAL_ARGS.rl.ra, MECH_ARGS.rl.ra,
!				       ENABLE_ARGS.rl.ra)
!
! FORMAL PARAMETERS:
!
!	SIGNAL_ARGS	- The signal argument list.
!
!	MECH_ARGS	- The mechanism argument list.
!
!	ENABLE_ARGS	- An array with the following
!			  format:
!
!				+----------------+
!				|   ENB_COUNT    |  <-- ENABLE_ARGS
!				+----------------+
!				|  ENB_PFV_ADDR  |
!				+----------------+
!				| ENB_UNWIND_ACT |
!				+----------------+
!				| ENB_ERROR_ADDR |
!				+----------------+
!
!			  ENB_COUNT is the count of following enable arguments.
!			  The count is always at least 2.
!
!			  ENB_PFV_ADDR - If non-zero, the address of a longword
!			  containing the PFV our establisher is operating on.
!
!			  ENB_UNWIND_ACT - Specifies the action
!			  to take on an unwind.  The values are:
!			   PAS$K_UNWIND_NOP - Do nothing
!			   PAS$K_UNWIND_UNLOCK - Unlock PFV
!
!			  ENB_ERROR_ADDR - Ignored here.
!
! IMPLICIT INPUTS:
!
!	The signaller's PFV placed as the first FAO argument in the primary
!	signalled message.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	SS$_RESIGNAL
!
! SIDE EFFECTS:
!
!	May cause an unwind.
!
!--

    BEGIN

    LITERAL
	ENB_COUNT = 0,		! Count of enable arguments
	ENB_PFV_ADDR = 1,	! Address of address of PFV
	ENB_UNWIND_ACT= 2,	! Address of unwind action
	ENB_ERROR_ADDR = 3;	! Address of address of unwind PC

    !+
    ! Determine if this is an unwind.  If so, resignal.
    ! Otherwise, see if we should cause an unwind.
    !-

    IF .SIGNAL_ARGS [CHF$L_SIG_NAME] EQLU SS$_UNWIND
    THEN
	RETURN SS$_RESIGNAL;

    IF ..ENABLE_ARGS [ENB_ERROR_ADDR] NEQ 0	! Error:=Continue specified?
    THEN
	BEGIN

	LOCAL
	    COND_NAME: BLOCK [4, BYTE],	! Primary condition name
	    COND_CODE;			! Sequence number of error

	!+
	! Get primary condition name.
	!-
    
	COND_NAME = .SIGNAL_ARGS [CHF$L_SIG_NAME];

	!+
	! Is this a PAS$ error?  If not, resignal.
	!-

	IF .COND_NAME [STS$V_FAC_NO] NEQU PAS$_FACILITY
	THEN
	    RETURN SS$_RESIGNAL;

	!+
	! See if the error message is one which is "trapped"
	! by ERROR:=CONTINUE.  This is done by comparing the
	! message number against a select range.
	!-

	COND_CODE = .COND_NAME [STS$V_CODE];	! Get error number
	IF .COND_CODE GEQU PAS$$K_MSGCONTLO AND ! Lowest number
	   .COND_CODE LEQU PAS$$K_MSGCONTHI	! Highest number
	THEN
	    BEGIN

	    !+
	    ! See if the PFVs match.  The signaller's PFV is the
	    ! first FAO parameter in the primary message.
	    !-

	    IF .SIGNAL_ARGS [12,0,32,0] EQLA ..ENABLE_ARGS [ENB_PFV_ADDR]
	    THEN
		!+
		! We want to unwind to the PC specified in the enable argument
		! error address.
		!-

		BEGIN
		IF NOT $UNWIND (NEWPC=..ENABLE_ARGS [ENB_ERROR_ADDR])
		THEN
		    SIGNAL_STOP (PAS$_BUGCHECK,1,BUG_UNWINDFAIL);
		END;
	    END;
	END; 	
	
    RETURN SS$_RESIGNAL;			! Resignal error

    END;					! End of routine LOCAL_HANDLER

!<BLF/PAGE>

END						! End of module PAS$WRITE_REALF_D1

ELUDOM
