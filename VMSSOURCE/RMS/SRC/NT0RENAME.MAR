	$BEGIN	NT0RENAME,000,NF$NETWORK,<NETWORK RENAME>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module communicates with the File Access Listener (FAL) at the
;	remote node to rename the specified file.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	01-JUN-1981
;
; Modified By:
;
;	V03-005	JAK0140		J A Krycka	09-APR-1984
;		Properly restore registers on exit from routine.
;
;	V03-004	JAK0138		J A Krycka	28-MAR-1984
;		Call modified NT$EXCH_CNF routine with a parameter.
;
;	V03-003	KRM0095		Karl Malik	01-Apr-1983
;		Modify to support DAP V7.0 flavor of rename message exchange.
;
;	V03-002	KRM0080		Karl Malik	02-Feb-1983
;		Fix bug in RECV_CMP.
;
;	V03-001	KRM0076		Karl Malik	23-Nov-1982
;		Support network rename operation based on DAP V6.0 rules.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPCNFDEF			; Define DAP Configuration message
	$DAPACCDEF			; Define DAP access message symbols
	$DAPNAMDEF			; Define DAP Name message symbols
	$FABDEF				; Define File Access Block symbols
	$IFBDEF				; Define Internal Fab block symbols
	$FWADEF				; Define File Work Area symbols
	$NWADEF				; Define Network Work Area symbols
;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$RENAME - RENAME FILE

;++
; NT$RENAME - engages in a DAP dialogue with the remote FAL to rename the
;	specified file.
;
; Calling Sequence:
;
;	BSBW	NT$RENAME
;
; Input Parameters:
;
;	R8	Old FAB address
;	R9	IFAB address
;	R10	New FWA address
;	R11	Impure Area address
;	4(SP)	Old FWA address
;	8(SP)	New FAB address
;	12(SP)	Old FAB address
;
; Implicit Inputs:
;
;	FWA$Q_NODE1
;
; Output Parameters:
;
;	R0-R7	Destroyed
;
; Implicit Outputs:
;
;	None
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$RENAME::				; Entry point
	$TSTPT	NTRENAME		;
	MOVL	IFB$L_NWA_PTR(R9),R7	; Get address of NWA (and DAP)

;+
; Exchange DAP Configuration messages with FAL and determine DAP buffer size.
; Also, check to make sure that partner supports both the rename function and
; is implemented to the DAP V7.0 specification (as the message exchange rules
; for rename were changed from DAP V6.0 to V7.0).
;-

	MOVL	#DAP$K_RENAME,R0	; Denote type of file access
	BSBW	NT$EXCH_CNF		; Exchange Configuration messages
	BLBS	R0,10$			; Branch on success
	BRW	EXIT1			; Branch on failure
10$:	BBS	#DAP$V_RENAME,-		; Branch if partner supports rename
		DAP$Q_SYSCAP(R7),30$	;  operation
20$:	BSBW	NT$RMT_ACCFUNC		; Declare RMS$_SUPPORT error
	BRW	EXIT1			; Branch and exit with RMS code in R0
30$:	BBC	#DAP$V_GEQ_V70,(R7),20$	; Branch if partner does not support
					;  DAP V7.0 message exchange rules

;+
; Next build a request mask (NWA$W_DISPLAY) that will be used in the Access
; message to request that optional DAP messages be returned by FAL. Since only
; one display field can be sent (in the Access message), use the old NAM block
; to determine this.
;-

BUILD_MASK:				; Build NWA$W_DISPLAY
	CLRL	R2			; Initialize request mask
	BSBW	NT$SCAN_NAMBLK		; Scan user Name Block and check FAL's
					;  capabilities to update request mask
	BLBS	R0,10$			; Branch on success
	BRW	EXIT1			; Branch on failure
10$:	MOVW	R2,NWA$W_DISPLAY(R7)	; Save request mask

;+
; Just check the new NAM block for validity (no request mask is generated).
;-

	MOVL	8(SP),R7		; Get new FAB address
	MOVL	FAB$L_NAM(R7),R7	; Get new NAM2 address
	BSBW	RM$CHKNAM		; Check NAM2 block for validity
	BLBS	R0,20$			; Branch on success
	BRW	EXIT1			; Branch on failure
20$:	MOVL	IFB$L_NWA_PTR(R9),R7	; Restore NWA/DAP address

;+
; Build and send DAP Access message to partner.
;-

SEND_ACC:				; (required message)
	PUSHL	R10			; Save the new FWA address
	MOVL	12(SP),R6		; Get new FAB address
	MOVL	8(SP),R10		; Get old FWA address
	MOVL	#DAP$K_ACC_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_RENAME,(R5)+	; Store ACCFUNC field
	MOVB	#DAP$M_NONFATAL,(R5)+	; Store ACCOPT field
	BSBW	NT$GET_FILESPEC		; Store filespec as a counted string
	MOVZWL	NWA$W_DISPLAY(R7),R1	; Get request mask
	BEQL	10$			; Branch if nothing set
	CLRW	(R5)+			; Store dummy FAC and SHR fields
	BSBW	NT$CVT_BN4_EXT		; Store DISPLAY as an extensible field
10$:	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Access message to FAL
	BLBS	R0,SEND_NEWNAM		; Branch on success
	BRW	EXIT			; Branch on failure

;+
; Build and send DAP Name message to partner (containing the NEW filespec).
;-

SEND_NEWNAM:				; (required message)
	MOVL	(SP),R10		; Get address of new filespec FWA
	MOVL	12(SP),R8		; Get address of new filespec FAB
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_NAM_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$M_FILSPEC,(R5)+	; Store NAMETYPE field
	BSBW	NT$GET_FILESPEC		; Store filespec as a counted string
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Name message to FAL
	BLBC	R0,EXIT			; Branch on failure

;+
; Receive DAP Name message (containing the OLD filespec) from partner.
;-

RECV_OLDNAM:				; (required message)
	TSTW	NWA$W_DISPLAY(R7)	; Branch if Name message was not
	BEQL	RECV_CMP		;  requested
	$SETBIT	#DAP$K_NAM_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Name message
	MOVL	16(SP),R8		; Get old FAB address
	MOVL	8(SP),R10		; Get old FWA address
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,EXIT			; Branch on failure
	BSBW	NT$DECODE_NAM		; Process resultant name string
	BSBW	RM$FILLNAM		; Fill in NAM block (if any)
	BLBC	R0,EXIT			; Branch on failure

;+
; Receive DAP Acknowledge message from partner.
;-

RECV_ACK1:				; (required message)
	MOVL	IFB$L_NWA_PTR(R9),R7	; Restore NWA/DAP address
	$SETBIT	#DAP$K_ACK_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Acknowledge message
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,EXIT			; Branch on failure

;+
; Receive DAP Name message (containing the NEW filespec) from partner.
;-

RECV_NEWNAM:				; (required message)
	TSTW	NWA$W_DISPLAY(R7)	; Branch if Name message was not
	BEQL	RECV_CMP		;  requested
	$SETBIT	#DAP$K_NAM_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Name message
	MOVL	12(SP),R8		; Get new FAB address
	MOVL	(SP),R10		; Get new FWA address
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,EXIT			; Branch on failure
	BSBW	NT$DECODE_NAM		; Process resultant name string
	BSBW	RM$FILLNAM		; Fill in NAM block (if any)
	BLBC	R0,EXIT			; Branch on failure

;+
; Receive DAP Acknowledge from partner.
;-

RECV_ACK2:				; (required message)
	MOVL	IFB$L_NWA_PTR(R9),R7	; Restore NWA/DAP address
	$SETBIT	#DAP$K_ACK_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Acknowledge message
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,EXIT			; Branch on failure

;+
; Receive DAP Access Complete message from partner.
;-

RECV_CMP:				; (required message)
	$SETBIT	#DAP$K_CMP_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Access Complete msg
	BSBW	NT$RECEIVE		; Get reply from FAL

EXIT:	MOVL	16(SP),R8		; Restore old FAB (as on entry)
	POPL	R10			; Restore new FWA (as on entry)
EXIT1:	RSB				; Exit with RMS code in R0

	.END				; End of module
