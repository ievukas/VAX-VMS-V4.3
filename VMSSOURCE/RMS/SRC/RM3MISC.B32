MODULE RM3MISC (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!		MISCELLANEOUS ROUTINES
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:	Wendy Koenig     CREATION DATE:		17-APR-78  9:57
!
! MODIFIED BY:
!
!    V03-010	JWT0151		Jim Teague		31-Jan-1984
!		Under certain conditions, RM$RECORD_KEY can start
!		searching what it thinks is a SIDR bucket beginning 
!		at LST_NCMP, but LST_NCMP happens to point to a 
!		record in a primary data bucket.
!
!    V03-009	JWT0147 	Jim Teague		12-Dec-1983
!		Correct insane sanity check on index buckets: on an
!		EXACTLY full index bucket it is not an error to have
!		the back freespace pointer point to a byte 1 less than
!		the front freespace pointer.
!
!    V03-008	MCN0013		Maria del C. Nasr	15-Mar-1983
!		More linkages reorganization
!
!    V03-007	MCN0012		Maria del C. Nasr	01-Mar-1983
!		Reorganize linkages
!
!    V03-006	TMK0004		Todd M. Katz		13-Sep-1982
!		Add support for prologue 3 SIDRs. This involved rewriting
!		RM$RECORD_KEY and RM$CNTRL_ADDR, and making changes to 
!		RM$RECORD_VBN.
!
!		Eliminate the routine RM$KEY_TYPE_CONV, a routine that is
!		never used, and all calls to RM$CONV_TO_ASCII and 
!		RM$CONV_FROM_ASCII.
!
!    V03-005	KBT0221		Keith B. Thompson	23-Aug-1982
!		Reorganize psects
!
!    V03-004	MCN0011		Maria del C. Nasr	29-Jun-1982
!		Reverse parameters in call to RM$CONV_TO_ASCII in
!		RM$RECORD_KEY.
!
!    V03-003	TMK0003		Todd M. Katz		28-Jun-1982
!		I added subtitles in TMK0001 but I spelled the lexical
!		function SBTTL incorrectly.
!
!    V03-002	TMK0002		Todd M. Katz		28-Jun-1982
!		Add linakge for RM$RECORD_ID forgotten in TMK0001.
!
!    V03-001	TMK0001		Todd M. Katz		28-Jun-1982
!		Add the new routine RM$RECORD_ID which extracts from the
!		RRV field of the given primary data record the ID.
!
!    V02-017	PSK0005		Paulina S. Knibbe	02-Sep-1981
!		Only add truncated character when the length of the
!		currently expanded key is less than the total length
!
!    V02-016	MCN0010		Maria del C. Nasr	04-Aug-1981
!		Modify RM$RECORD_KEY to do type conversion when extracting
!		key segments from an expanded prologue 3 data record.
!		Also, add RM$KEY_TYPE_CONV routine.
!
!    V02-015	PSK0005		Paulina S. Knibbe	30-Jul-1981
!		Remove support for truncated index keys from RM$RECORD_KEY
!
!    V02-014	PSK0004		Paulina S. Knibbe	15-Jun-1981
!		Change RM$RECORD_KEY to work for prologue three index
!		and SIDR records, too. 
!		Change RM$CNTRL_ADDR to work for prologue three index buckets
!
!    V02-013	MCN0009		Maria del C. Nasr	07-May-1981
!		Add support for front end compressed keys in RM$RECORD_KEY.
!
!    V02-012	MCN0008		Maria del C. Nasr	22-Apr-1981
!		Fix some bugs with prologue 3 changes.
!
!    V02-011	PSK0003		Paulina S. Knibbe	17-Apr-1981
!		Fix some problems w/RM$CNTRL_ADDR
!
!    V02-010	MCN0007		Maria del C. Nasr	13-Apr-1981
!		Add RM$CHECK_SEGMENT routine.
!
!    V02-009	PSK0002		Paulina S. Knibbe	08-Apr-1981
!		Add RM$CNTRL_ADDR to return the address of the control
!		byte for the current record in any data bucket
!
!    V02-008	MCN0006		Maria del C. Nasr	23-Mar-1981
!		Modify these routines to be able to process prologue 3
!		data level structure changes (base level 1).
!
!    V02-007	PSK0001		Paulina S. Knibbe	12-Mar-1981
!		Change the reference to segment length to a byte
!
!    V02-006	REFORMAT	Paulina S. Knibbe	23-Jul-1980
!
!
! REVISION HISTORY:
!
!   Christian Saether, 	28-SEP-78  8:52
!   X0002 - add RM$MOVE routine to avoid CH$MOVE problems
!
!   Christian Saether, 	9-OCT-78  11:09
!   X0003 - modify RECORD_KEY to use routine REC_OVHD
!
!   Christian Saether, 	10-OCT-78  10:14
!   X0004 - change RECORD_KEY to use REC_OVHD routine
!
!   Wendy Koenig, 	24-OCT-78  14:02
!   X0005 - MAKE CHANGES CAUSED BY SHARING CONVENTIONS
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! define default psects for code
!

PSECT
    CODE = RM$RMS3(PSECT_ATTR),
    PLIT = RM$RMS3(PSECT_ATTR);

! Linkages
!

LINKAGE
    L_CHECK_SEGMENT,
    L_PRESERVE1,
    L_RABREG_567,
    L_RABREG_67,
    L_REC_OVHD,
    L_SIDR_FIRST;


! External Routines
!
EXTERNAL ROUTINE
    RM$SIDR_FIRST	: RL$SIDR_FIRST,
    RM$REC_OVHD		: RL$REC_OVHD;

%SBTTL 'RM$CHECK_SEGMENT'
GLOBAL ROUTINE RM$CHECK_SEGMENT( START_BUF, CURR_BYTE, ADDR_LEN ) : RL$CHECK_SEGMENT =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine determines if a given byte belongs to a segment
!	in the primary key.
!
! CALLING SEQUENCE:
!	RM$CHECK_SEGMENT(PAR1,PAR2,PAR3)
!
! INPUT PARAMETERS:
!	START_BUF - start address of input buffer if packing records
!		    or output buffer if unpacking
!	CURR_BYTE - address of current byte in buffer
!
! IMPLICIT INPUT:
!	IDX descriptor (R7)
!	
! OUTPUT PARAMETER:
!	If not key segment:
!		ADDR_LEN = address of next segment
!	If key segment:
!		ADDR_LEN = length of key segment
!
! ROUTINE VALUE:
!	0 - if not key segment
!	1 - if key segment
!
! SIDE EFFECTS:
!	Unknown
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IDX_DFN_STR;

    LOCAL
	X,
	SEG_ADDR,
	S_SEG_ADDR,
	SEG_LEN :	BYTE,
	SEG_DATA_ADDR;


    SEG_DATA_ADDR = IDX_DFN[IDX$W_POSITION];
    X = .IDX_DFN[IDX$B_SEGMENTS];

    ! Determine the highest possible segment
    !
    S_SEG_ADDR = .IDX_DFN[IDX$B_DATBKTSZ] * 512 + .START_BUF;

    WHILE .X NEQU 0
    DO
	BEGIN

	! Get segment address and length
	!
	SEG_ADDR = .(.SEG_DATA_ADDR)<0,16> + .START_BUF;
	SEG_DATA_ADDR = .SEG_DATA_ADDR + 2;
	SEG_LEN = .(.SEG_DATA_ADDR)<0,8>;
	SEG_DATA_ADDR = .SEG_DATA_ADDR + 2;
	X = .X - 1;

	IF .CURR_BYTE GEQU .SEG_ADDR
	THEN
	    BEGIN

	    ! If the byte belongs to the primary key, return length between
	    ! current byte and end of segment, and success.
	    !
	    IF .CURR_BYTE LSSU (.SEG_ADDR + .SEG_LEN)
	    THEN
		BEGIN
		ADDR_LEN = (.SEG_ADDR + .SEG_LEN) - .CURR_BYTE;
		RETURN 1
		END
	    END
	ELSE

	    ! If this segment is closer to current byte than previous segment
	    ! but not before, note address
	    !		
	    IF .SEG_ADDR LSSU .S_SEG_ADDR
	      AND (.CURR_BYTE LSSU .SEG_ADDR)
	    THEN
		S_SEG_ADDR = .SEG_ADDR;
	END;			! end of while loop

    ! Return address of closest segment to current byte
    !
    ADDR_LEN = .S_SEG_ADDR;
    RETURN 0;
    END;

%SBTTL 'RM$CNTRL_ADDR'
GLOBAL ROUTINE RM$CNTRL_ADDR: RL$RABREG_567 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the address of the control byte for the current
!	record. For all prologue 1 and 2 records, and prologue 3 primary data
!	records, the control byte is associated with the rest of the record
!	overhead. For prologue 3 index records, the control byte is associated
!	with the VBN downpointer, and all VBN downpointers are found at the rear
!	of the bucket. For prologue 3 SIDRs, the control byte is associated with
!	the RRV pointer of the SIDR array's first element.
!
! CALLING SEQUENCE:
!	
!	RM$CNTRL_ADDR()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	BKT_ADDR			- address of bucket
!	    BKT$W_FREESPACE		- offset to first free byte in bucket
!	    BKT$B_INDEXNO		- index of bucket
!	    BKT$B_LEVEL			- level of bucket
!	    BKT$V_PTR_SZ		- size of all VBN downpointers in bucket
!
!	IDX_DFN				- address of index descriptor
!	    IDX$B_IDXBKTSZ		- size of the index bucket
!
!	IFAB				- address of IFAB
!	    IFB$B_PLG_VER		- prologue version of the file
!
!	IRAB				- address of IRAB
!	    IRB$L_REC_COUNT		- number of preceeding records
!
!	REC_ADDR			- address of the record
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!
!	Address of the control byte.
!
! SIDE EFFECTS:
!	NONE
!
!--
    BEGIN

    EXTERNAL REGISTER
	R_BKT_ADDR_STR,
	R_IDX_DFN_STR,
	R_IFAB_STR,
	R_IRAB_STR,
	R_REC_ADDR_STR;

    MACRO
	FREESPACE	= 0,0,16,0 %;

    ! If this is a prologue 2 file, or a prologue 3 primary data record then the
    ! address of the record is the address of the record's control byte.
    !
    IF  .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
	 OR
	(.BKT_ADDR[BKT$B_LEVEL] EQLU 0
	     AND
	    .BKT_ADDR[BKT$B_INDEXNO] EQLU 0)
    THEN
	RETURN .REC_ADDR

    ! If this is a prologue 3 SIDR, then the address of the control byte of the
    ! first SIDR array element is returned.
    !
    ELSE
	IF .BKT_ADDR[BKT$B_LEVEL] EQLU 0
	THEN
	    BEGIN

	    GLOBAL REGISTER
		R_IMPURE,
		R_RAB;

	    RETURN RM$SIDR_FIRST(0)
	    END

	! This is a prologue 3 index record. The VBN downpointers are stored at
	! the end of the bucket, and the address of the VBN downpointer
	! corresponding to the current record is returned.
	!
	ELSE
	    BEGIN
 
	    LOCAL
		CONTROL 	: REF BBLOCK,
		VBN_SIZE;

	    ! Position to the back freespace pointer in the index bucket, and
	    ! verify that its value makes sense ( ie - it is no more than one
	    ! byte less than the front freespace pointer, and not past the end
	    ! of the bucket). 
	    !
	    ! NOTE: On an EXACTLY full bucket, the back freespace pointer will
	    !  be (correctly) one byte less than the front freespace pointer.
	    !  Any further overlapping will be an error.
	    !
	    CONTROL = .BKT_ADDR + (.IDX_DFN[IDX$B_IDXBKTSZ] * 512) 
				- BKT$C_ENDOVHD;

	    IF  .CONTROL[FREESPACE] LSSU (.BKT_ADDR[BKT$W_FREESPACE] - 1)
		 OR
		.BKT_ADDR + .CONTROL[FREESPACE] GTRU .CONTROL
	    THEN
		BUG_CHECK;

	    ! Position to the VBN downpointer associated with this index record
	    ! and return its address in the bucket.
	    !
	    VBN_SIZE = .BKT_ADDR[BKT$V_PTR_SZ] + 2;
	    CONTROL  = .CONTROL - .VBN_SIZE;
	    CONTROL  = .CONTROL - (.VBN_SIZE * .IRAB[IRB$L_REC_COUNT]);

	    RETURN .CONTROL;
	    END;
	
    END;

%SBTTL 'RM$MOVE'
GLOBAL ROUTINE RM$MOVE (LENGTH, FROM_ADDR, TO_ADDR) : RL$PRESERVE1 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	The purpose of this routine is to move a block of characters from a
!	source to a destination buffer. Its existance is do to the necessity
!	of save registers R1 through R5 before doing a CH$MOVE, which is
!	basically what this routine does.
!
! CALLING SEQUENCE:
!
!	RM$MOVE ()
!
! INPUT PARAMETERS:
!
!	LENGTH 		- length of block to be moved
!	FROM_ADDR 	- address to move from
!	TO_ADDR 	- address to move to
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!
!	The address of the first byte in the destination buffer past the 
!	block of characters moved.
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN
    RETURN CH$MOVE(.LENGTH, .FROM_ADDR, .TO_ADDR);
    END;

%SBTTL 'RM$RECORD_ID'
GLOBAL ROUTINE RM$RECORD_ID : RL$RABREG_67 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts the ID from the primary data record's RRV field.
!
! CALLING SEQUENCE:
!	BSBW RM$RECORD_ID()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	IFAB 			- address of the IFAB
!	    IFB$B_PLG_VER	- prologue version of the file
!
!	REC_ADDR 		- address of the record
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!
!	The ID of the given record
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IFAB_STR,
	R_REC_ADDR_STR;

    BUILTIN
	AP;

    IF .IFAB[IFB$B_PLG_VER] EQLU 3
    THEN
	RETURN .(.REC_ADDR + 3)<0,16>
    ELSE
	RETURN .(.REC_ADDR + 2)<0,8>;

    END;

%SBTTL 'RM$RECORD_KEY'
GLOBAL ROUTINE RM$RECORD_KEY (OUTBUF) : RL$PRESERVE1 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts a key from a record and places it the output
!	buffer, the address of which is passed to it as an arguement. The
!	key that is extracted is an index key, if the record is an index record,
!	an alternate key, if the record is a SIDR, or either the primary key
!	or an alternate key, if the record is a primary data record. In the
!	latter case, which key is extracted depends upon the index descriptor
!	this routine recieves as implicit input. If the index descriptor is for
!	the primary key of reference then it will be the primary key that is
!	extracted from the primary data record; otherwise, it will be an
!	alternate key.
!
!	This routine maybe called indicating either that the record has overhead
!	data associated with it, or that REC_ADDR points directly to the record
!	itself. In the former case, RMS will always first position past the
!	record overhead to the record itself, before joining the common code to
!	extract the appropriate key. This routine also maybe called indicating
!	either that the record is compressed format (prolgoue 3 only), or is
!	not, and the routine takes the appropriate action in each case.
!
!	This routine makes one very important assumption. If the record is a
!	primary data record and the index descriptor is for a secondary key,
!	inotherwards RMS is to extract a secondary key from a primary data
!	record, then the primary data record can not be in compressed format
!	because it would then be impossible to find let alone extract out the 
!	alternate key.
!
! CALLING SEQUENCE:
!
!	RM$RECORD_KEY()
!
! INPUT PARAMETERS:
!
!	OUTBUF		- address of the buffer to contain extracted key
!
! IMPLICIT INPUTS:
!
!	AP 			- used to control information to the` routine
!	    bit 0		- if 0, record overhead 
!				- if 1, no record overhead
!	    bit 1 		- if 0, compressed form (prologue 3 only)
!				- if 1, expanded form
!
!	BKT_ADDR		- address of bucket
!	    BKT$B_INDEXNO	- index bucket is in
!	    BKT$B_LEVEL		- level of bucket
!
!	IDX_DFN			- address of index descriptor
!	    IDX$V_IDX_COMPR	- if set, index key compression is enabled
!	    IDX$V_KEY_COMPR	- if set, key compression is enabled
!	    IDX$B_KEYSZ		- size of key
!	    IDX$W_POSITION	- table of segment positions
!	    IDX$B_SEGMENTS	- number of segement
!	    IDX$B_SIZE		- table of segment sizes
!	    IDX$B_TYPE		- table of segment types
!
!	IFAB			- address of IFAB
!	    IFB$B_PLG_VER	- prologue version of file
!
!	IRAB			- address of IRAB
!	    IRB$L_CURBDB	- address of BDB for current record's buffer
!	    IRB$L_LST_NCMP	- address of last noncompressed key in bucket
!
!	REC_ADDR		- address of current record
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!
!	Address of first byte in output buffer past extracted key.
!
! SIDE EFFECTS:
!
!	AP is trashed.
!
!--

    BEGIN

    BUILTIN
	AP;

    EXTERNAL REGISTER
	R_IDX_DFN_STR,
	R_IFAB_STR,
	R_IRAB_STR,
	R_REC_ADDR_STR;

    LOCAL
	START_ADDR :	REF BBLOCK;

    ! Define macros to identify compressed key overhead.
    !
    MACRO
	KEY_LEN = 0,0,8,0 %,
	CMP_CNT = 1,0,8,0 %;

    START_ADDR = .REC_ADDR;

    ! If record overhead is indicated, position past it to the record proper.
    !
    IF NOT .AP<0,1>
    THEN
	BEGIN

	LOCAL
	    REC_SIZE;

	REC_SIZE = .BBLOCK [.BBLOCK [.IRAB[IRB$L_CURBDB], BDB$L_ADDR], 
			    BKT$B_LEVEL];

	IF .REC_SIZE EQLU 0
	    AND
	   .IDX_DFN[IDX$B_KEYREF] NEQU 0
	THEN
	    REC_SIZE = -1;

	START_ADDR = .START_ADDR + RM$REC_OVHD(.REC_SIZE; REC_SIZE);
	END;

    ! The file is a prologue 1 or 2 file; or, the file is a prologue 3 file, 
    ! but the record is not in compressed form. RMS only has to simple extract
    ! each segment from the appropriate position in the record, and move it
    ! into the keybuffer.
    !
    IF  .IFAB[IFB$B_PLG_VER] LSSU PLG$C_VER_3
	 OR
	.AP<1,1>
    THEN
	INCR SEG_DATA_ADDR 
		FROM IDX_DFN[IDX$W_POSITION] 
		TO   (IDX_DFN[IDX$W_POSITION] 
		      + (4 * .IDX_DFN[IDX$B_SEGMENTS]) 
		      - 4)
		BY 4
	DO
	    BEGIN

	    GLOBAL REGISTER
		R_RAB,
		R_IMPURE,
		R_BDB;

	    OUTBUF = RM$MOVE (.(.SEG_DATA_ADDR)<16,8>,
			      .START_ADDR + .(.SEG_DATA_ADDR)<0,16>,
			      .OUTBUF)
	    END

    ! The record is in compressed format. It can either be a primary data 
    ! record, an index record or a SIDR. The desired key is extracted as a
    ! whole with expansion of the key being done, if the key is compressed.
    !
    ELSE
	BEGIN

	LOCAL
	    BUCKET : REF BBLOCK;

	BUCKET = .BBLOCK[.IRAB[IRB$L_CURBDB], BDB$L_ADDR];

	! If the key has been compressed, then extraction of the key must be
	! accompanied by the addition of the front compressed and rear-end
	! truncated characters.
	!
	IF (.BUCKET[BKT$B_LEVEL] EQLU 0
		 AND 
		.IDX_DFN[IDX$V_KEY_COMPR])
	    OR 
	   (.BUCKET[BKT$B_LEVEL] NEQU 0
		 AND 
		.IDX_DFN[IDX$V_IDX_COMPR])
	THEN
	    BEGIN

	    LOCAL
		LENGTH,
		SAVE_REC_ADDR;

	    SAVE_REC_ADDR = .REC_ADDR;

	    ! Position to the first byte in the output buffer past the 
	    ! number of bytes front compressed in the key that is to be 
	    ! returned.
	    !
	    OUTBUF = .OUTBUF + .START_ADDR[CMP_CNT];

	    ! Scan the bucket until the desired record is reached, moving the 
	    ! the characters front compressed off the key of the desired 
	    ! record into the output buffer as they are encountered. The bucket
	    ! scan starts with the first record in the bucket
	    !
	    REC_ADDR = .BUCKET + BKT$C_OVERHDSZ;

	    WHILE 1 DO
	    BEGIN

		LOCAL
		    RECORD_OVHD,
		    RECORD_SIZE;

		! Position to the key of the current record. This will involve 
		! determining the number of bytes of record overhead.
		!
		BEGIN

		LOCAL
		    REC_SIZE;

		! Set REC_SIZE according to the bucket type.
		!
		IF (REC_SIZE = .BUCKET[BKT$B_LEVEL]) EQLU 0
		THEN
		    IF .BUCKET[BKT$B_INDEXNO] NEQU 0
		    THEN
			REC_SIZE = -1;

		RECORD_OVHD = RM$REC_OVHD(.REC_SIZE; REC_SIZE);
		RECORD_SIZE = .REC_SIZE;
		END;

		! If the desired record has been reached in the bucket scan,
		! then terminate the scan.
		! 
		IF (REC_ADDR = .REC_ADDR + .RECORD_OVHD) GEQU .START_ADDR
		THEN
		    EXITLOOP;

		! If the front compression count of the key of the current 
		! record is less than the compression count of the key of 
		! the desired record, then the former has characters that 
		! the latter requires in its expansion.
		!
		IF .REC_ADDR[CMP_CNT] LSSU .START_ADDR[CMP_CNT]
		THEN
		    BEGIN

		    ! If the compression count is equal to zero, move all 
		    ! the characters.  Otherwise, RMS had previously moved 
		    ! characters that now appear to be incorrect, so 
		    ! overlay them with what RMS hopes are the correct ones.
		    !
		    LENGTH = .START_ADDR[CMP_CNT] - .REC_ADDR[CMP_CNT];
		    OUTBUF = .OUTBUF - .LENGTH;

		    ! Move all of the front compressed characters needed by 
		    ! the key of the desired record that can be supplied by 
		    ! the key of the current record into the outbuf buffer,
		    ! utilizing the truncated character of the key of the 
		    ! current record to supply any of these characters as
		    ! needed.
		    !
		    OUTBUF = CH$COPY (.REC_ADDR[KEY_LEN], 
				      .REC_ADDR + 2,
				      .(.REC_ADDR + .REC_ADDR[KEY_LEN] + 1),
				      .LENGTH,
				      .OUTBUF);
		    END;

		! Position to the next record in the bucket;
		!
		REC_ADDR = .REC_ADDR + .RECORD_SIZE;
		END;					! end of WHILE loop

	    ! Complete the key of the desired record with those characters
	    ! not front compressed - extending the key out to its full size
  	    ! using its rear-end truncated character, if it is required.
	    !
	    LENGTH = .IDX_DFN[IDX$B_KEYSZ] - .START_ADDR[CMP_CNT];

	    IF .LENGTH GTR 0
	    THEN
		OUTBUF = CH$COPY (.START_ADDR[KEY_LEN], 
				  .START_ADDR + 2,
				  .(.START_ADDR + .START_ADDR[KEY_LEN] + 1),
				  .LENGTH,
				  .OUTBUF);

	    REC_ADDR = .SAVE_REC_ADDR;
	    END
	ELSE

	    ! The record is in compressed form, but the key which is to be
	    ! extracted is not itself compressed. Therefore, it maybe moved
	    ! as a single entity into the output buffer.
	    !
	    OUTBUF = CH$MOVE( .IDX_DFN[IDX$B_KEYSZ], .START_ADDR, .OUTBUF);

	END;

    ! Return the address of the first byte in the output buffer, past the
    ! the key which has been extracted from the current record, and placed
    ! there.
    !
    RETURN .OUTBUF;
    END;

%SBTTL 'RM$RECORD_VBN'
GLOBAL ROUTINE RM$RECORD_VBN : RL$PRESERVE1 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine extracts the variable length VBN from the given record.
!
! CALLING SEQUENCE:
!	BSBW RM$RECORD_VBN()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	IFAB 			- address of the IFAB
!	    IFB$B_PLG_VER	- prologue version of the file
!
!	REC_ADDR 		- address of the record
!
!	AP -- code indicating type of bucket 
!	      (also offset from the beginning of the record to the VBN)
!		3 for DATA records
!		2 for SIDR records
!		1 for INDEX records (Prologue 1 and 3 only)
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!
!	The VBN of the given record.
!
! SIDE EFFECTS:
!	NONE
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IFAB_STR,
	R_REC_ADDR_STR;

    BUILTIN
	AP;

    IF .IFAB[IFB$B_PLG_VER] EQLU 3
    THEN
	IF .AP EQLU 3
	THEN
	    RETURN .(.REC_ADDR + 5)<0,8*(2 + .REC_ADDR[IRC$V_PTRSZ])>
	ELSE
	    RETURN .(.REC_ADDR + 3)<0,8*(2 + .REC_ADDR[IRC$V_PTRSZ])>
    ELSE
	RETURN .(.REC_ADDR + .AP)<0,8*(2 + .REC_ADDR[IRC$V_PTRSZ])>;

    END;


END
ELUDOM
