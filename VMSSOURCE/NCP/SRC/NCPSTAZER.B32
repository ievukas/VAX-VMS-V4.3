%TITLE	'Zero Parse States and Data'
MODULE NCPSTAZER (IDENT = 'V04-000', LIST(NOOBJECT)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Control Program (NCP)
!
! ABSTRACT:
!
!	States and data for the parsing of NCP zero commands
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Darrell Duffy	, CREATION DATE: 25-September-79
!
! MODIFIED BY:
!
!	V03-003	RPG0003		Bob Grosso		09-Nov-1982
!		Accept just ZERO X25-PROT without DTE or K DTE.
!
!	V03-002	RPG0002		Bob Grosso		07-Sep-1982
!		Break up into several PCLs and supply an SDB for
!		each entity type to facilitate correct error reporting
!		of entity type.  Also correct Zero Module X25-Protocol
!		and accept Module X25-Server and X29-Server.
!
!	V03-001	RPG0001		Bob Grosso		03-Aug-1982
!		Add ZERO MODULE X25-PROTOCOL
!
!	V001	TMH0001		Tim Halvorsen	22-Jun-1981
!		Change BUILD_SDB reference to use full entity type field.
!		Change to zero circuit as well as line and node.
!--

%SBTTL	'Definitions'

!
! INCLUDE FILES:
!

	LIBRARY 'LIB$:NMALIBRY';
	LIBRARY 'LIB$:NCPLIBRY';
	LIBRARY 'SYS$LIBRARY:TPAMAC';

!
! EXTERNAL REFERENCES:
!

	ACT_DFN				! External symbols for action routines

%SBTTL	'Parameter blocks'

!
! BIND DATA:
!

!
!	Parameter Blocks
!

!
!	General use for entities which do not take parameters
!

	BUILD_PCL

	(ZER,

	, END, , ,

	)

	BUILD_PBK

	(ZER,

	EXE, LITL, 0, VRB_ENT,
	CIR, TKN, , VRB_ENT,
	LIN, TKN, , VRB_ENT,
	MOD, TKN, , VRB_ENT,
	NOD, NADR, , VRB_ENT,
	KNO, LITB, NMA$C_ENT_KNO, VRB_ENT,

	)

	BUILD_SDB

	(ZCI, NMA$C_ENT_CIR, VRB_ENT, ZER)


	BUILD_SDB

	(ZLI, NMA$C_ENT_LIN, VRB_ENT, ZER)


	BUILD_SDB

	(ZMO, NMA$C_ENT_MOD, VRB_ENT, ZER)


	BUILD_SDB

	(ZNO, NMA$C_ENT_NOD, VRB_ENT, ZER)


!
!	ZERO X25-Protocol
!

	BUILD_PCL

	(ZPR,

	DTE, TKN, PCXP_DTE, ,

	, END, , ,
	)

	BUILD_PBK

	(ZPR,

	DTE, TKN, , ,
	KDT, LITB, NMA$C_ENT_KNO, ZPR_DTE,	! Known DTEs
	)

BIND	PDB$G_ZPR_ENT = UPLIT BYTE (0, %ASCIC 'X25-PROTOCOL');

	BUILD_SDB

	(ZPR, NMA$C_ENT_MOD, ZPR_ENT, ZPR)



!	MODULE X25-SERVER
!

BIND	PDB$G_ZSE_ENT = UPLIT BYTE (0, %ASCIC 'X25-SERVER');

	BUILD_SDB

	(ZSE, NMA$C_ENT_MOD, ZSE_ENT, ZER)


!
!	MODULE X29-SERVER
!

BIND	PDB$G_Z9S_ENT = UPLIT BYTE (0, %ASCIC 'X29-SERVER');

	BUILD_SDB

	(Z9S, NMA$C_ENT_MOD, Z9S_ENT, ZER)

%SBTTL	'Prompt strings'

!
!	Build prompt strings
!

BIND

	PROMPT_STRINGS
	(ZER,

	ENT, %STRING(
	     '      (EXECUTOR, CIRCUIT circuit-name, LINE line-id,', CRLF,
	     '      MODULE module-name, NODE node-id, KNOWN): '),
	CIR, 'Circuit to zero                (circuit-name): ',
	LIN, 'Line to zero                      (dev-c-u.t): ',
	MOD, 'Module to zero  (X25-PROTOCOL, X25-SERVER, X29-SERVER): ',
	NOD, 'Node to zero             (node-name, address): ',
	KWN, '            (CIRCUITS, LINES, MODULES, NODES): ',

	)
	,

	PROMPT_STRINGS
	(ZPR,

	DAT, '(DTE dte-name, KNOWN DTES): ',

	)
	;
	

%SBTTL	'State Table Entry'

$INIT_STATE (NCP$G_STTBL_ZER, NCP$G_KYTBL_ZER);

!
!	Zero Command
!

!
!	Dispatch to entity types and prompt if end of string
!

	COMMAND_PROMPT
	(ZER, ENT, NCP$_INVKEY,

	('EXECUTOR', ST_ZNO_DOIT, ACT$SAVPRM, , , PBK$G_ZER_EXE),
	('KNOWN', ST_ZER_KWN, ACT$SAVPRM, , , PBK$G_ZER_KNO),
	('CIRCUIT', ST_ZER_CIR),
	('LINE', ST_ZER_LIN),
	('MODULE', ST_ZER_MOD),
	('NODE', ST_ZER_NOD),
	('X25', ST_ZER_X25),
	('X29', ST_ZER_X29)

	)

!
!	Obtain the circuit to zero
!

	COMMAND_PROMPT
	(ZER, CIR, NCP$_INVVAL,

	( (SE_CIRC_ID), ST_ZCI_DOIT, ACT$SAVPRM, NMA$C_ENT_CIR,
					NCP$GL_OPTION, PBK$G_ZER_CIR)

	)
!
!	Perform the function after ignoring noise words
!

$STATE	(ST_ZCI_DOIT,
	('COUNTERS'),
	(TPA$_LAMBDA)
	);

$STATE	(,				! Allow for no parameters
	(TPA$_LAMBDA, , ACT$SAVPRM, , , PBK$G_VRB_ALL)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_ZCI)
	);

!
!	Obtain the line to zero
!

	COMMAND_PROMPT
	(ZER, LIN, NCP$_INVVAL,

	( (SE_LINE_ID), ST_ZLI_DOIT, ACT$SAVPRM, NMA$C_ENT_LIN,
					NCP$GL_OPTION, PBK$G_ZER_LIN)

	)
!
!	Perform the function after ignoring noise words
!

$STATE	(ST_ZLI_DOIT,
	('COUNTERS'),
	(TPA$_LAMBDA)
	);

$STATE	(,				! Allow for no parameters
	(TPA$_LAMBDA, , ACT$SAVPRM, , , PBK$G_VRB_ALL)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_ZLI)
	);

!
!	Obtain the module to zero
!

$STATE	(ST_ZER_MOD,
	('X25', ST_ZER_X25),
	('X29', ST_ZER_X29),
	(TPA$_EOS, ST_ZER_PMT_MOD),
	);

$STATE	(ST_ZER_PMT_MOD,
	(TPA$_LAMBDA, , ACT$PRMPT,,, PMT$G_ZER_MOD));

$STATE	(,
	('X25', ST_ZER_X25),
	('X29', ST_ZER_X29),
	(TPA$_EOS, ST_ZER_PMT_MOD)
	);

$STATE	(ST_ZER_X25,
	('-'));
$STATE	(,
	('PROTOCOL', ST_ZPR_GO,, NMA$C_ENT_MOD, NCP$GL_OPTION),
	('SERVER', ST_ZSE_DOIT,, NMA$C_ENT_MOD, NCP$GL_OPTION)
	);


!
!	X25-PROTOCOL
!

$STATE	(ST_ZPR_GO,
	(TPA$_EOS, ST_ZPR_PMT_DAT),
	(TPA$_LAMBDA, ST_ZPR_DAT)
	);

$STATE	(ST_ZPR_PMT_DAT,
	(TPA$_LAMBDA,, ACT$PRMPT,,, PMT$G_ZPR_DAT));

$STATE	(ST_ZPR_DAT,
	('DTE',	ST_ZPR_DAT_DTE),
	('KNOWN', ST_ZPR_DAT_KWN),
	(TPA$_LAMBDA, ST_ZPR_DOIT)
	);

$STATE	(ST_ZPR_DAT_DTE,
	((SE_DTE_NUMBER), ST_ZPR_DOIT, ACT$SAVPRM,,, PBK$G_ZPR_DTE));

$STATE	(ST_ZPR_DAT_KWN,
	('DTES', ST_ZPR_DOIT, ACT$SAVPRM,,, PBK$G_ZPR_KDT));


!	Perform the function after ignoring noise words
!

$STATE	(ST_ZPR_DOIT,
	('COUNTERS'),
	(TPA$_LAMBDA)
	);

$STATE	(,				! Allow for no parameters
	(TPA$_LAMBDA, , ACT$SAVPRM, , , PBK$G_VRB_ALL)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_ZPR));


!
!	X25-SERVER
!

!
!	Perform the function after ignoring noise words
!

$STATE	(ST_ZSE_DOIT,
	('COUNTERS'),
	(TPA$_LAMBDA)
	);

$STATE	(,				! Allow for no parameters
	(TPA$_LAMBDA, , ACT$SAVPRM, , , PBK$G_VRB_ALL)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_ZSE)
	);


!
!	X29-SERVER
!

$STATE	(ST_ZER_X29,
	('-'));
$STATE	(,
	('SERVER', ST_Z9S_DOIT,, NMA$C_ENT_MOD, NCP$GL_OPTION)
	);

!
!	Perform the function after ignoring noise words
!

$STATE	(ST_Z9S_DOIT,
	('COUNTERS'),
	(TPA$_LAMBDA)
	);

$STATE	(,				! Allow for no parameters
	(TPA$_LAMBDA, , ACT$SAVPRM, , , PBK$G_VRB_ALL)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_Z9S)
	);

!
!	Obtain the node to zero
!

	COMMAND_PROMPT
	(ZER, NOD, NCP$_INVVAL,

	( (SE_NODE_ID), ST_ZNO_DOIT, ACT$SAVPRM, NMA$C_ENT_NOD,
					NCP$GL_OPTION, PBK$G_ZER_NOD)

	)
!
!	Perform the function after ignoring noise words
!

$STATE	(ST_ZNO_DOIT,
	('COUNTERS'),
	(TPA$_LAMBDA)
	);

$STATE	(,				! Allow for no parameters
	(TPA$_LAMBDA, , ACT$SAVPRM, , , PBK$G_VRB_ALL)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_ZNO)
	);


!
!	Find out which is known, lines or nodes
!

	COMMAND_PROMPT
	(ZER, KWN, NCP$_INVKEY,

	('CIRCUITS', ST_ZCI_DOIT, , NMA$C_ENT_CIR, NCP$GL_OPTION),
	('LINES', ST_ZLI_DOIT, , NMA$C_ENT_LIN, NCP$GL_OPTION),
	('MODULES', , , NMA$C_ENT_MOD, NCP$GL_OPTION),
	('NODES', ST_ZNO_DOIT, , NMA$C_ENT_NOD, NCP$GL_OPTION)

	)

!
!	Perform the function after ignoring noise words
!

$STATE	(,
	('COUNTERS'),
	(TPA$_LAMBDA)
	);

$STATE	(,				! Allow for no parameters
	(TPA$_LAMBDA, , ACT$SAVPRM, , , PBK$G_VRB_ALL)
	);

$STATE	(,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_ZMO)
	);

%SBTTL	'Define Subexpressions from Library'

!
!	Define subexpressions from library
!

	SEM_DTE_NUMBER		! DTE number
	SEM_LINE_ID		! Line id strings
	SEM_CIRC_ID		! Circuit name strings
	SEM_NODE_ID		! Node id strings

%SBTTL	'Object Listing of Parse Table'

END				!End of module
ELUDOM
