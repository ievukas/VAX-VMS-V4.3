	.title	pli$geteitem
	.ident	/1-002/					; Edit WHM1002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;

;++
; facility:
;
;	VAX/VMS PL1 runtime library
;
; abstract:
;
;	This module contains the pl1 runtime routines to get items from
;	pl1 stream file under edit controlled format.
;
;
; author: c. spitz 28-nov-79
;
; modified:
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;--

;
; external definitions
;
	$deffcb				;define file control block
	$defstk				;define stack frame offsets
	$defstr				;define stream block offsets
	$defdat				;define operand node data types
	$defgetopt			;define get options block
	$defcvtind			;define convert indices
	$rabdef				;define rms rab offsets
	$rmsdef				;define rms error codes

; 
; local data
;

	rtshare			;sharable


;++
; pli$gete****
; 
; the pli$gete**** routines are called by the compiled code to get items
; from a stream input file under edit directed transmission. each routine
; saves the target item descriptor, calls pli$$getfmt_r6 to get the
; next field based on the format, and then calls to pli$rt_cvrt_r3 to store
; the item in the target.
;--

;pli$getechar_r6
; inputs:
;	r0 - address of element to get
;	r1 - size/prec of element to get
;	r11 - address of stream block
;	ap - address of file control block
; outputs:
;	none
; side effects:
;	r0-r6 are destroyed

pli$getechar_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	bicl	#atr_m_flttrg,fcb_l_attr(ap) ;clr floating target flag
	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getfmt_r6	;get format
	movq	(sp)+,r2		;restore destination
	addl	#cvt_k_dst_char,r4	;update case index for char dest
	calls	#0,g^pli$cvrt_cg_r3	;convert it
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	rsb				;return

;pli$getevcha_r6
;    inputs:
;	r0 - address of element to get
;	r1 - size/prec of element to get
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$getevcha_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	bicl	#atr_m_flttrg,fcb_l_attr(ap) ;clr floating target flag
	clrw	(r0)			;clear length
	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getfmt_r6	;get format
	movq	(sp)+,r2		;restore destination
	addl	#cvt_k_dst_vcha,r4	;update case index for vcha dest
	calls	#0,g^pli$cvrt_cg_r3	;convert it
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	rsb				;return

;pli$getebit_r6
;    inputs:
;	r0 - address of element to get
;	r1 - size/prec of element to get
;	r2 - offset of element to get
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$getebit_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	bicl	#atr_m_flttrg,fcb_l_attr(ap) ;clr floating target flag
	movq	r0,-(sp)		;save dest
	pushl	r2			;save offset
	jsb	g^pli$$getfmt_r6	;get format
	popl	r6			;restore offset
	movq	(sp)+,r2		;restore dest
	addl	#cvt_k_dst_bit,r4	;update case index for bit dest
	calls	#0,g^pli$cvrt_cg_r3	;convert it
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	rsb				;return

;pli$geteabit_r6
;    inputs:
;	r0 - address of element to get
;	r1 - size/prec of element to get
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$geteabit_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	bicl	#atr_m_flttrg,fcb_l_attr(ap) ;clr floating target flag
	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getfmt_r6	;get format
	movq	(sp)+,r2		;restore destination
	addl	#cvt_k_dst_abit,r4	;update case index for abit dest
	calls	#0,g^pli$cvrt_cg_r3	;convert it
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	rsb				;return

;pli$getefixb_r6
;    inputs:
;	r0 - address of element to get
;	r1 - size/prec of element to get
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$getefixb_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	bicl	#atr_m_flttrg,fcb_l_attr(ap) ;clr floating target flag
	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getfmt_r6	;get format
	movq	(sp)+,r2		;restore destination
	addl	#cvt_k_dst_fixb,r4	;update case index for fixb dest
	calls	#0,g^pli$cvrt_cg_r3	;convert it
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	rsb				;return

;pli$getefixd_r6
;    inputs:
;	r0 - address of element to get
;	r1 - size/prec of element to get
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$getefixd_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	bicl	#atr_m_flttrg,fcb_l_attr(ap) ;clr floating target flag
	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getfmt_r6	;get format
	movq	(sp)+,r2		;restore destination
	addl	#cvt_k_dst_fixd,r4	;update case index for fixd dest
	calls	#0,g^pli$cvrt_cg_r3	;convert it
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	rsb				;return

;pli$getefltb_r6
;    inputs:
;	r0 - address of element to get
;	r1 - size/prec of element to get
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$getefltb_r6::
	bisl	#<atr_m_recur!atr_m_flttrg>,- ;set recursion
		fcb_l_attr(ap)		;and floating target
	bbc	#7,r1,10$		;if g float
	pushl	#<15+128>		;set max g float dec prec
	brb	30$			;cont
10$:	cmpl	r1,#53			;is it huge?
	bleq	20$			;if leq, no, cont
	pushl	#34			;set max huge dec prec
	brb	30$			;cont
20$:	pushl	#15			;set max d float dec prec
					;(no need to bother w/ f/d since
					;convert routines go to d)
30$:	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getfmt_r6	;get format
	movq	(sp)+,r2		;restore destination
	movab	4(sp),sp		;clean dec prec from stack
	addl	#cvt_k_dst_fltb,r4	;update case index for fltb dest
	calls	#0,g^pli$cvrt_cg_r3	;convert it
	bicl	#<atr_m_recur!atr_m_flttrg>,- ;clr recursion flag
		fcb_l_attr(ap) 		;and floating source
	rsb				;return

;pli$getefltd_r6
;    inputs:
;	r0 - address of element to get
;	r1 - size/prec of element to get
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$getefltd_r6::
	bisl	#<atr_m_recur!atr_m_flttrg>,- ;set recursion
		fcb_l_attr(ap)		;and floating target
	pushl	r1			;set float dec prec
	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getfmt_r6	;get format
	movq	(sp)+,r2		;restore destination
	movab	4(sp),sp		;clean dec prec from stack
	addl	#cvt_k_dst_fltd,r4	;update case index for fltd dest
	calls	#0,g^pli$cvrt_cg_r3	;convert it
	bicl	#<atr_m_recur!atr_m_flttrg>,- ;clr recursion flag
		fcb_l_attr(ap) 		;and floating source
	rsb				;return

;pli$getepic_r6
;    inputs:
;	r0 - address of element to get
;	r1 - size/prec of element to get
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed

pli$getepic_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	bicl	#atr_m_flttrg,fcb_l_attr(ap) ;clr floating target flag
	movq	r0,-(sp)		;save destination
	jsb	g^pli$$getfmt_r6	;get format
	movq	(sp)+,r2		;restore destination
	addl	#cvt_k_dst_pic,r4	;update case index for pic dest
	calls	#0,g^pli$cvrt_cg_r3	;convert it
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	rsb				;return

	.end
