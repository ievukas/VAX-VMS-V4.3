	$BEGIN	RM0SCAN,000,RM$RMSFILENAME,<SCAN FILENAME STRING>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility:
;
;	RMS
;
; Abstract:
;
;	This routine will parse a file specification into it's
;	component parts.  This routine must not call other RMS
;	routines or assume any normal RMS conventions.  It can
;	be called as a user mode system  service  outside  the
;	context of RMS.
;
; Environment:
;
;	VAX/VMS, executive mode (RMS) system serivce
;
; Author:
;
;	Keith B. Thompson		Creation Date:  3-Mar-1983
;
; Modified By:
;
;	V03-011	RAS0313		Ron Schaefer		18-Jun-1984
;		Accept a leading "_" as a valid filename character.
;
;	V03-010	RAS0275		Ron Schaefer		20-Mar-1984
;		Fix RAS0259 to recognize "[ooo,*]" and "[*,*]" as
;		valid UIC-format directories.  Also disallow "(" and ")".
;
;	V03-009	RAS0259		Ron Schaefer		28-Feb-1984
;		Convert to being table-driven.  Remove most of the little
;		subroutines and use attribute/tables instead.
;
;	V03-008	RAS0228		Ron Schaefer		 4-Jan-1984
;		Recognize "[nnn,]" as a syntax error; namely FSCB$V_NULL 
;		and FSCB$V_GRPMBR is not valid.
;
;	V03-007	RAS0223		Ron Schaefer		16-Dec-1983
;		Change $SCBDEF and SCB$xxx to $FSCBDEF and FSCB$xxx.
;
;	V03-006	RAS0199		Ron Schaefer		 6-Oct-1983
;		Recognize "_$n$ddcm:" as a valid device name.
;		Eliminate "__x:" as a valid device name.
;		Completely recognize "$" as a valid initial character.
;
;	V03-005	RAS0190		Ron Schaefer		11-Sep-1983
;		Correct bugcheck caused by specifying more than 8 directory
;		levels.   In that case FOUND_DIR left R0 not-set.
;
;	V03-004	KBT0562		Keith B. Thompson	13-Jul-1983
;		Allow root directory between device and real directory
;
;	V03-003	KBT0534		Keith B. Thompson	25-May-1983
;		Don't allow real nodes after null nodes and allow
;		minus signs in the middle of directory strings (yec!)
;
;	V03-002	KBT0527		Keith B. Thompson	24-May-1983
;		Set SCB$V_PWD correctly and remove global symbols
;
;	V03-001	KBT0508		Keith B. Thompson	4-May-1983
;		Change SCB$V_ACCS to SCB$V_ACS and add concealed device
;		detection
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$FSCBDEF			; Scan Control Block definitions


;
; Macros:
;

C_LAMBDA	=  0			; EOS or invalid character
C_ALPHA		=  1			; Upper, lower or multinational letter
C_OCTAL		=  2			; Digits 0,1,2,3,4,5,6,7
C_DECIMAL	=  3			; Digits 8,9
C_DOT		=  4			; "."
C_COLON		=  5			; ":"
C_SEMI		=  6			; ";"
C_MINUS		=  7			; "-"
C_WILD		=  8			; "*","%"
C_OPAREN	=  9			; "<","["
C_CPAREN	= 10			; ">","]"
C_QUOTE		= 11			;  "
C_COMMA		= 12			; ","
C_UNDER		= 13			; "_"
C_DOLLAR	= 14			; "$"
C_MAX_CLASS	= 14			; largest class code

	ASSUME	C_MAX_CLASS	LE	15	
;
; Local Data
;

;
; Table of character class codes, indexed by ASCII character value
; This tables reduces the 256 possible characters in 1 of 15 classes.
;
CHAR_CLASS:

;
;	 7-bit ASCII
;

	.BYTE	 0,  0,  0,  0,  0,  0,  0,  0	; NUL - BEL
	.BYTE	 0,  0,  0,  0,  0,  0,  0,  0	; BS - SI
	.BYTE	 0,  0,  0,  0,  0,  0,  0,  0	; DLE - ETB
	.BYTE	 0,  0,  0,  0,  0,  0,  0,  0	; CAN - US
	.BYTE	 0,  0, 11,  0, 14,  8,  0,  0	; SP ! " # $ % & '
	.BYTE	 0,  0,  8,  0, 12,  7,  4,  0	; ( ) * + , - . /
	.BYTE	 2,  2,  2,  2,  2,  2,  2,  2	; 0 1 2 3 4 5 6 7
	.BYTE	 3,  3,  5,  6,  9,  0, 10,  0	; 8 9 : ; < = > ?
	.BYTE	 0,  1,  1,  1,  1,  1,  1,  1	; @ A B C D E F G
	.BYTE	 1,  1,  1,  1,  1,  1,  1,  1	; H I J K L M N O
	.BYTE	 1,  1,  1,  1,  1,  1,  1,  1	; P Q R S T U V W
	.BYTE	 1,  1,  1,  9,  0, 10,  0, 13	; X Y Z [ \ ] ^ _
	.BYTE	 0,  1,  1,  1,  1,  1,  1,  1	; ` a b c d e f g
	.BYTE	 1,  1,  1,  1,  1,  1,  1,  1	; h i j k l m n o
	.BYTE	 1,  1,  1,  1,  1,  1,  1,  1	; p q r s t u v w
	.BYTE	 1,  1,  1,  0,  0,  0,  0,  0	; x y z { | } ~ DEL

;
;	8-bit DEC Multinational
;

	.BYTE	 0,  0,  0,  0,  0,  0,  0,  0	; 8-bit controls
	.BYTE	 0,  0,  0,  0,  0,  0,  0,  0	; 8-bit controls
	.BYTE	 0,  0,  0,  0,  0,  0,  0,  0	; 8-bit controls
	.BYTE	 0,  0,  0,  0,  0,  0,  0,  0	; 8-bit controls
	.BYTE	 0,  0,  0,  0,  0,  0,  0,  0	; 8-bit graphics
	.BYTE	 0,  0,  0,  0,  0,  0,  0,  0	; 8-bit graphics
	.BYTE	 0,  0,  0,  0,  0,  0,  0,  0	; 8-bit graphics
	.BYTE	 0,  0,  0,  0,  0,  0,  0,  0	; 8-bit graphics
	.BYTE	 1,  1,  1,  1,  1,  1,  1,  1	; 8-bit upcase alphas
	.BYTE	 1,  1,  1,  1,  1,  1,  1,  1	; 8-bit upcase alphas
	.BYTE	 0,  1,  1,  1,  1,  1,  1,  1	; 8-bit upcase alphas
	.BYTE	 1,  1,  1,  1,  1,  1,  0,  1	; 8-bit upcase alphas
	.BYTE	 1,  1,  1,  1,  1,  1,  1,  1	; 8-bit lowcase alphas
	.BYTE	 1,  1,  1,  1,  1,  1,  1,  1	; 8-bit lowcase alphas
	.BYTE	 0,  1,  1,  1,  1,  1,  1,  1	; 8-bit lowcase alphas
	.BYTE	 1,  1,  1,  1,  1,  1,  0,  0	; 8-bit lowcase alphas


	.SBTTL	RM$SCAN_STRING, Main Parsing Routine

;++
;
; Functional Description:
;
;   Working registers:
;
;	R0	- Return status
;	R1	- Current character
;	R2	- Local work register
;	R3	- Flags
;	R4	- Size of token
;	R5	- Address of token
;	R6	- Length of string
;	R7	- Address of current character
;	R11	- Address of control block
;
;
;   State Format:
;
;	label	- Description
;
;	token	-> label	; Transitions
;
;
;	Tokens are parsed in this order:
;
;	eos			; end of string
;	numeric			; 0-9
;	alpha_numeric		; ASCII alpha numeric characters
;	eightbit		; 8 Bit character set
;	.			; period
;	;			; semi-colon
;	:			; colon
;	_			; underscore
;	[ (])			; braket
;	< (>)			; angle braket
;	,			; comma
;	"			; quote
;	special			; _ $ -
;	wild			; * %
;	lambda			; anything (including eos)
;
;
; Calling Sequence:
;
;	BSBW	RM$SCAN_STRING
;
; Input Parameters:
;
;	R6,R7	- input string descriptor
;	R11	- scan control block
;
; Implicit Inputs:
;	none
;
; Outputs:
;
;	Control block filled in
;
; Implicit Outputs:
;
;	R1-R7	Destroved
;
; Completion Codes:
;
;	SS$_NORMAL
;	SCN$_SPECNF
;
; Side Effects:
;
;	None
;
;--

RM$SCAN_STRING::
	MOVC5	#0,(SP),#0,#FSCB$C_BLN,(R11)	; zero the control block
	MOVL	R7,R5				; pointer to first token
	MOVL	R5,FSCB$Q_FILESPEC+4(R11)	; save start address
	CLRQ	R3				; clear flags and size
	BSBB	S0				; parse the string
	MOVZBL	#1,R0				; set success
	RSB					; exit

;
;	S0	- Start state
;
;	eos		-> EOS
;	alpha_numeric	-> S1
;	eightbit	-> S1
;	.		-> NAME2
;	;		-> NAME2
;	:		-> S2
;	-		-> S6
;	_		-> S4
;	[		-> S5
;	<		-> S5
;	$		-> S1
;	wild		-> S3
;	lambda		-> S6
;	

S0:	BSBW	GET_CHAR		; get next character
	BEQL	EOS_A			; quit if invalid or no more
	CMPB	R1,#C_UNDER
	BNEQ	10$
	BRW	S4
10$:	CMPB	R1,#C_MINUS
	BEQL	70$
20$:	BBS	R1,W^ALPHA_NUM,S1
	CMPB	R1,#C_DOT
	BEQL	N2_A
	CMPB	R1,#C_SEMI
	BEQL	N2_A
40$:	CMPB	R1,#C_COLON
	BNEQ	50$
	BRW	S2
50$:	CMPB	R1,#C_OPAREN
	BNEQ	60$
	BRW	S5
60$:	CMPB	R1,#C_WILD
	BEQL	S3_A
70$:	BRW	S6

EOS_A:	RSB

N2_A:	BRW	NAME2

;
;	S1	- character was alpha numeric
;
;	eos		-> NAME1
;	alpha_numeric	-> S1
;	.		-> NAME2
;	;		-> NAME3
;	:		-> S4_4
;	special		-> S1
;	wild		-> S3
;	lambda		-> ACS
;	

S1:	BSBW	GET_CHAR		; get next character
	BEQL	N0_A			; quit if invalid or no more
	BBS	R1,W^ALPHA_NUM,S1
	CMPB	R1,#C_DOT
	BEQL	N2_A
	CMPB	R1,#C_SEMI
	BEQL	N2_A
30$:	CMPB	R1,#C_COLON
	BNEQ	40$
	BRW	S4_4
40$:	CMPB	R1,#C_WILD
	BNEQ	ACS
S3_A:	BRW	S3_W

;
;	ACS	- looking for access control string of the form:
;
;			"abc...xyz"::
;	
;	if not found it transfers to NAME0
;
;	This routine is branched to from above and S4_1
;

ACS:	MOVQ	R6,-(SP)			; save place in string
	CMPB	R1,#C_QUOTE			; starting quote?
	BNEQ	90$

10$:	DECL	R6				; loop until we have a
	BLSS	90$				;  terminating quote
	CMPB	(R7)+,#^A/"/			;  then check for '::'
	BNEQ	10$

	SUBL2	#2,R6				; must have '::'
	BLSS	90$				; if not exit
	CMPW	(R7)+,#^A/::/
	BNEQ	90$				; not quite
	SSB	#FSCB$V_ACS,R3			; flag that a acs was seen
	ADDL2	#8,SP				; restore stack
	SUBL3	R5,R7,R4			; get length of string
	CMPL	R4,#11				; are there enough to have a pw?
	BLSS	NODE1				; no, skip test
	CMPL	-11(R7),#^A/pass/		; check the first half
	BNEQ	NODE1				; no
	CMPL	-7(R7),#^A/word/		; check the second half
	BNEQ	NODE1				; no
	SSB	#FSCB$V_PWD,R3			; got one
	BRB	NODE1				; success means parse a node

90$:	MOVQ	(SP)+,R6			; restore pointers
N0_A:	BRW	NAME0				; failure means we only have
						;  a name

;
;	NODE	- Node was found
;
;	lambda	-> S0
;	

	ASSUME	FSCB$B_FLDFLAGS	EQ	0

NODE:	SUBL3	R5,R7,R4			; get the length
NODE1:	BBCS	#FSCB$V_NODE,(R11),10$		; is this the first node
	BBS	#FSCB$V_NULL,FSCB$Q_NODE1(R11),-	; there better not be a null
		EOS_B				;  node present, if so exit
	ADDW2	R4,FSCB$Q_NODE(R11)		; no, simply add length
	BRB	20$				;
10$:	MOVQ	R4,FSCB$Q_NODE(R11)		; yes, copy whole descriptor
20$:	MOVZBL	FSCB$B_NODES(R11),R0		; get number of nodes
	CMPW	R0,#FSCB$C_MAXNODE		; if gtr then 8 don't copy it
	BGTR	30$				;
	ADDL2	R3,R4				; set local flags
	MOVQ	R4,FSCB$Q_NODE1(R11)[R0]	; copy into proper descriptor
30$:	INCB	FSCB$B_NODES(R11)		; up count of nodes
	ADDW2	R4,FSCB$Q_FILESPEC(R11)		; keep running sum
	MOVL	R7,R5				; update pointer
	CLRL	R3				; clear flags for next time
	BRW	S0				; continue processing


;
;	S2	- Initial character was ':' can only be null node name
;
;	eos		-> EOS
;	:		-> NODE
;	lambda		-> EOS
;	

;
; NOTE: if a node has already been seen then this is a bad syntax
;

	ASSUME	FSCB$B_FLDFLAGS	EQ	0
	ASSUME	FSCB$V_NODE	EQ	0

S2:	BLBS	(R11),EOS_B			; bad!
	SSB	#FSCB$V_NULL,R3			; set null field flag
	BSBW	GET_CHAR		; get next character
	BEQL	EOS_B			; quit if invalid or no more
	CMPB	R1,#C_COLON
	BEQL	NODE
EOS_B:	RSB


;
;	S3	- A character was detected which can only apear in name or type
;
;	eos		-> NAME1
;	alpha_numeric	-> S3
;	eightbit	-> S3
;	.		-> NAME2
;	;		-> NAME2
;	special		-> S3
;	wild		-> S3
;	lambda		-> NAME0
;
S3_W:	SSB	#FSCB$V_WILD,R3		; set wildcard 
S3:	BSBW	GET_CHAR		; get next character
	BEQL	N0_A			; quit if invalid or no more
	BBS	R1,W^ALPHA_NUM,S3
	CMPB	R1,#C_WILD
	BEQL	S3_W
	CMPB	R1,#C_DOT
	BEQL	N2_B
	CMPB	R1,#C_SEMI
	BNEQ	N0_A
N2_B:	BRW	NAME2

;
;	S4	- Initial character was '_'
;
;	eos		-> NAME0
;	alpha_numeric	-> S4
;	wild		-> S3
;	:		-> S4_4
;	.		-> NAME2
;	;		-> NAME2
;	"		-> ACS
;	lambda		-> NAME0
;

S4:	BSBW	GET_CHAR		; get next character
	BEQL	10$			; quit if invalid or no more
	BBS	R1,W^ALPHA_NUM,S4
	CMPB	R1,#C_WILD
	BEQL	S3_W
	CMPB	R1,#C_COLON
	BEQL	S4_4
	CMPB	R1,#C_DOT
	BEQL	N2_B
	CMPB	R1,#C_SEMI
	BEQL	N2_B
	CMPB	R1,#C_QUOTE
	BEQL	20$
10$:	BRW	NAME0

20$:	BRW	ACS

S4_3:	BRW	NODE

;
;	S4_4	- We have found a ':' which could be a device or node
;
;	eos		-> DEVICE
;	:		-> NODE
;	lambda		-> DEVICE
;	

S4_4:	BSBW	GET_CHAR		; get next character
	BEQL	DEVICE0			; quit if invalid or no more
	CMPB	R1,#C_COLON
	BEQL	S4_3			; we have a node
	INCL	R6			; if this is not a node
;	DECL	R7			;  back up one character
;	BRB	DEVICE			;  and get device name


;
;	DEVICE	- A device name was found
;
;	eos		-> EOS
;	alpha_numeric	-> S7
;	.		-> NAME2
;	;		-> NAME2
;	[		-> S5
;	<		-> S5
;	wild		-> S7
;	lambda		-> S6
;	

DEVICE0:
	DECL	R7
DEVICE:

	ASSUME	FSCB$B_FLDFLAGS	EQ	0

	BISB2	#FSCB$M_DEVICE,(R11)
	SUBL3	R5,R7,R4
	ADDL2	R3,R4
	MOVQ	R4,FSCB$Q_DEVICE(R11)
	ADDW2	R4,FSCB$Q_FILESPEC(R11)		; keep running sum
	MOVL	R7,R5
	CLRL	R3
	BSBW	GET_CHAR		; get next character
	BEQL	EOS_G			; quit if invalid or no more
	CMPB	R1,#C_DOT
	BEQL	N2_C
	CMPB	R1,#C_SEMI
	BEQL	N2_C
	BBS	R1,W^ALPHA_NUM,DIR1
	CMPB	R1,#C_OPAREN
	BEQL	S5
	CMPB	R1,#C_WILD
	BEQL	40$
	BRW	S6
40$:	BRW	S7_W

N2_C:	BRW	NAME2

;
;	S5	- '[' or '<' was detected
;
;	Check for rooted directory, if so copy the descriptors into the correct
;	set and check for a normal directory
;
;
;	If rooted directory
;
;	eos		-> EOS
;	[		-> S5
;	<		-> S5
;	alpha_numeric	-> S7
;	.		-> NAME2
;	;		-> NAME2
;	wild		-> S7
;	lambda		-> S6
;
;
;	If normal directory
;
;	eos		-> EOS
;	alpha_numeric	-> S7
;	.		-> NAME2
;	;		-> NAME2
;	wild		-> S7
;	lambda		-> S6
;	

S5:	BSBW	SCAN_DIRECTORY
	BLBC	R0,EOS_G
	BBC	#FSCB$V_ROOTED,R3,DIRECTORY	; is this root directory
	BBSS	#FSCB$V_ROOT,(R11),EOS_G	; can only be one root
	SUBL3	R5,R7,R4
10$:	ADDL2	R3,R4				; set any flags
	MOVQ	R4,FSCB$Q_ROOT(R11)		; copy descriptor
	ADDW2	R4,FSCB$Q_FILESPEC(R11)		; keep running sum

;
; Copy the normal directory descriptors into the rooted directory ones
;

	MOVC3	#<FSCB$C_MAXROOT*8>,-		; copy all the descriptors
		FSCB$Q_DIRECTORY1(R11),-
		FSCB$Q_ROOT1(R11)
	MOVB	FSCB$B_DIRS(R11),FSCB$B_ROOTS(R11); copy count of roots
	CLRB	FSCB$B_DIRS(R11)			; zero count
	MOVL	R7,R5
	CLRL	R3
	BSBW	GET_CHAR		; get next character
	BEQL	EOS_G			; quit if invalid or no more
	CMPB	R1,#C_OPAREN
	BEQL	S5
	BRB	DIR1
EOS_G:	RSB

DIRECTORY:

	ASSUME	FSCB$B_FLDFLAGS	EQ	0

	BISB2	#FSCB$M_DIRECTORY,(R11)		; set dir flag
	SUBL3	R5,R7,R4			; get size of total dir spec
	CMPW	#2,R4				; was this a null directory?
	BNEQ	10$				;  [] or <>
	SSB	#FSCB$V_NULL,R3			; if so set over all bit
10$:	ADDL2	R3,R4				; set any flags
	MOVQ	R4,FSCB$Q_DIRECTORY(R11)	; copy descriptor
	ADDW2	R4,FSCB$Q_FILESPEC(R11)		; keep running sum
	MOVL	R7,R5
	CLRL	R3
	BSBW	GET_CHAR		; get next character
	BEQL	EOS_G			; quit if invalid or no more

DIR1:	BBS	R1,W^ALPHA_NUM,S7
	CMPB	R1,#C_DOT
	BEQL	N2_C
	CMPB	R1,#C_SEMI
	BEQL	N2_C
	CMPB	R1,#C_WILD
	BEQL	S7_W
;	BRB	S6


;
;	S6	- Search for a quoted string, could be foreign file spec or
;		  ANSI magtape name:
;
;			  node::"abc...xyz"
;
;				- or -
;
;		"abc...xyz"    "abc...xyz";n    "abc...xyz".;n
;
;	

S6:	CMPB	R1,#C_QUOTE		; do we have first quote
	BNEQ	EOS_G
10$:	DECL	R6			; loop to find terminating quote
	BLSS	EOS_G			; no more? then exit
	CMPB	(R7)+,#^A/"/		; is this it?
	BNEQ	10$			; no, continue
	DECL	R6			; is there a next character?
	BLSS	30$			; no, we have a string
	CMPB	(R7)+,#^A/"/		; is it a double quote?
	BEQL	10$			; yes, continue with string
	INCL	R6			; no, back up one character
	DECL	R7			;  and process quoted name

	ASSUME	FSCB$B_FLDFLAGS	EQ	0

30$:	SSB	#FSCB$V_QUOTED,R3	; we have a quoted string which is
	BISB2	#FSCB$M_NAME,(R11)	;  a name of some type
	SUBL3	R5,R7,R4
	ADDL2	R3,R4			; set flags if any
	CLRL	R3
	MOVQ	R4,FSCB$Q_NAME(R11)
	ADDW2	R4,FSCB$Q_FILESPEC(R11)	; keep running sum

;
;	if this was a node::"quoted" name then don't check for version number
;

	ASSUME	FSCB$V_NODE	EQ	0

	BLBS	(R11),EOS_E		; if node present then exit
	BSBW	GET_CHAR		; get next character
	BEQL	EOS_E			; quit if invalid or no more
	SUBL3	#1,R7,R5		; count the leading terminator
	CMPB	R1,#C_DOT		; is there a null type
	BEQL	S10			;  check for type then version #
	CMPB	R1,#C_SEMI		; is there a version number?
	BNEQ	EOS_E			; no, exit
	BRW	S11			;  check for version #

;
;	S7	- Finished device or directory and ready for name, type version
;
;	eos		-> NAME1
;	alpha_numeric	-> S7
;	.		-> NAME2
;	;		-> NAME2
;	"		-> S6
;	special		-> S7
;	wild		-> S7
;	lambda		-> NAME0
;
S7_W:	SSB	#FSCB$V_WILD,R3		; set wildcard 

S7:	BSBW	GET_CHAR		; get next character
	BEQL	NAME0			; quit if invalid or no more
	BBS	R1,W^ALPHA_NUM,S7
	CMPB	R1,#C_DOT
	BEQL	NAME2
	CMPB	R1,#C_SEMI
	BEQL	NAME2
	CMPB	R1,#C_QUOTE
	BEQL	S6
	CMPB	R1,#C_WILD
	BEQL	S7_W


;
;	NAME1,NAME2	- a file name has been found
;

NAME0:	DECL	R7

	ASSUME	FSCB$B_FLDFLAGS	EQ	0

NAME1:	BISB2	#FSCB$M_NAME,(R11)
	SUBL3	R5,R7,R4
	BNEQ	10$				; was it a null name field?
	SSB	#FSCB$V_NULL,R3
10$:	ADDL2	R3,R4
	MOVQ	R4,FSCB$Q_NAME(R11)
	ADDW2	R4,FSCB$Q_FILESPEC(R11)		; keep running sum
EOS_E:	RSB

	ASSUME	FSCB$B_FLDFLAGS	EQ	0

NAME2:	BSBB	NAME0			; process name field
	CLRL	R3
	MOVL	R7,R5			; reset start addr
	INCL	R7			; count the leading terminator
	CMPB	R1,#C_SEMI		; what was the terminator?
	BEQL	S11			; ';' the version number
	CMPB	R1,#C_DOT		; '.' then type
	BNEQ	EOS_E
	BRB	S10


;
;	S10	- A '.' was found so check for file type
;
;	eos		-> TYPE1
;	alpha_numeric	-> S10
;	.		-> TYPE2
;	;		-> TYPE2
;	special		-> S10
;	wild		-> S10
;	lambda		-> TYPE0
;	

S10_W:	SSB	#FSCB$V_WILD,R3		; set wildcard 

S10:	BSBW	GET_CHAR		; get next character
	BEQL	TYPE0			; quit if invalid or no more
	BBS	R1,W^ALPHA_NUM,S10
	CMPB	R1,#C_DOT
	BEQL	TYPE2
	CMPB	R1,#C_SEMI
	BEQL	TYPE2
	CMPB	R1,#C_WILD
	BEQL	S10_W


;
;	TYPE1,TYPE2	- a file type has been found
;

TYPE0:	DECL	R7

	ASSUME	FSCB$B_FLDFLAGS	EQ	0

TYPE1:	BISB2	#FSCB$M_TYPE,(R11)
	SUBL3	R5,R7,R4
	CMPW	#1,R4				; was it a null type field?
	BNEQ	10$
	SSB	#FSCB$V_NULL,R3
10$:	ADDL2	R3,R4
	MOVQ	R4,FSCB$Q_TYPE(R11)
	ADDW2	R4,FSCB$Q_FILESPEC(R11)		; keep running sum
EOS_F:	RSB

	ASSUME	FSCB$B_FLDFLAGS	EQ	0

TYPE2:	BSBB	TYPE0			; process type field
	CLRL	R3
	MOVL	R7,R5			; reset start addr
	INCL	R7			; count the leading terminator


;
;	S11	- a ';' or '.' has been found so check for version
;
;	eos		-> VERSION1
;	numeric		-> S11_1
;	-		-> S11_1
;	*		-> VERSION1
;	lambda		-> VERSION0
;	

S11:	BSBB	GET_CHAR		; get next character
	BEQL	VERSION0		; quit if invalid or no more
	BBS	R1,B^NUMERIC,S11_1
	CMPB	R1,#C_MINUS
	BEQL	S11_1
	CMPB	-1(R7),#^A/*/
	BNEQ	VERSION0
	SSB	#FSCB$V_WILD,R3
	BRB	VERSION1

S11_1:	BSBB	GET_CHAR		; get next character
	BEQL	VERSION0		; quit if invalid or no more
	BBS	R1,B^NUMERIC,S11_1

;
;	VERSION0,VERSION1 - a file type has been found
;

VERSION0:
	DECL	R7

	ASSUME	FSCB$B_FLDFLAGS	EQ	0

VERSION1:
	BISB2	#FSCB$M_VERSION,(R11)
	SUBL3	R5,R7,R4
	CMPW	#1,R4				; was it a null type field?
	BNEQ	10$
	SSB	#FSCB$V_NULL,R3
10$:	ADDL2	R3,R4
	MOVQ	R4,FSCB$Q_VERSION(R11)
	ADDW2	R4,FSCB$Q_FILESPEC(R11)		; keep running sum
	RSB

NUMERIC:.WORD	<1@C_OCTAL>!<1@C_DECIMAL>

	.SBTTL	GET_CHAR, Get Next Character and Classify it

;++
;
; Functional Description:
;
;	This routine gets the current character and classifies it into a
;	particular set
;
; Calling Sequence:
;
;	BSBW	GET_CHAR
;
; Input Parameters:
;
;	R6/R7	- Descriptor of string remaining
;
; Implicit Inputs:
;	none
;
; Outputs:
;
;	Z-bit	- true if valid character, false if invalid or string exhausted
;	R1	- Character class to check
;
; Implicit Outputs:
;	R6/R7	- updated to next character
;
; Side Effects:
;	none
;
;--

	ASSUME	C_LAMBDA	EQ 0

GET_CHAR:
	DECL	R6		; any more chars?
	BLSS	10$		; nope
	MOVZBL	(R7)+,R1	; get char
	MOVZBL	W^CHAR_CLASS[R1],R1 ; classify it
	RSB

10$:	INCL	R7		; advance ptr
	CLRL	R1		; set z-bit and invalid class
	RSB

;
;  Alpha-numeric character classes.
;  Note that "-" is considered alphabetic, so non-alphabetic uses
;  must be checked before checking for ALPHA_NUM
;
ALPHA_NUM:	.WORD	<1@C_ALPHA>!	-		; letters
			<1@C_OCTAL>!	-		; digits
			<1@C_DECIMAL>!	-		; digits
			<1@C_MINUS>!	-		; -
			<1@C_UNDER>!	-		; _
			<1@C_DOLLAR>			; $

	.SBTTL	SCAN_DIRECTORY, Parse a Directory String

;++
;
; Functional Description:
;
;	This routine will parse a directory string
;
; Calling Sequence:
;
;	BSBW	SCAN_DIRECTORY
;
; Input Parameters:
;
;	R1	- Begining directory delemiter '[' or '<'
;	R6	- Length of string
;	R7	- Address of next character
;	R11	- Address of control block
;
; Implicit Inputs:
;	none
;
; Outputs:
;
;	R0	- true or false
;	R1,R2	- terminator character (R1 on input)
;	R6	- Length of string
;	R7	- Address of next character
;
; Implicit Outputs:
;	none
;
; Side Effects:
;	none
;
;--

SCAN_DIRECTORY:
	PUSHL	R5		; save start address of string
	INCL	R5		; skip leading terminator
	ADDB3	#2,-1(R7),R2	; save terminator character to look for
				;  NOTE:  '[' + 2 = ']' and
				;	  '<' + 2 = '>'

;
;	D0	- Start state
;
;	eos		-> ERROR
;	octal		-> D1
;	alpha_numeric	-> D2
;	.		-> D3
;	-		-> D4
;	]		-> DIR_DONE
;	>		-> DIR_DONE
;	wild		-> D1
;	lambda		-> ERROR
;

D0:	BSBB	GET_CHAR		; get next character
	BEQL	DERR1			; quit if invalid or no more
	CMPB	R1,#C_OCTAL
	BEQL	D1
	CMPB	R1,#C_MINUS
	BNEQ	10$
	BRW	D4
10$:	BBS	R1,B^ALPHA_NUM,D2
	CMPB	R1,#C_DOT
	BEQL	D3
	CMPB	-1(R7),R2
	BEQL	DIR_DONE1	
	CMPB	R1,#C_WILD
	BNEQ	DERR2
;	BRB	D1_W


;
;	D1	- a possible [group,member] directory is being scaned
;
;	eos		-> ERROR
;	octal		-> D1
;	,		-> D1_1
;	wild		-> D1
;	lambda		-> D2 (backing up)
;
D1_W:	SSB	#FSCB$V_WILD,R3		; set wildcard

D1:	BSBB	GET_CHAR		; get next character
DERR1:	BEQL	DERR2			; quit if invalid or no more
	CMPB	R1,#C_OCTAL
	BEQL	D1
	CMPB	R1,#C_COMMA
	BEQL	D1_1
	CMPB	R1,#C_WILD
	BEQL	D1_W
	INCL	R6			; we did not find a match so backup
	DECL	R7			;  and act like we are parsing a normal
	BRB	D2			;  type directory

;
; we have a group member directory
;

D1_1:	SSB	#FSCB$V_GRPMBR,R3	; mark the first descriptor
	BSBW	FOUND_DIR		;  and stuff it
	BBS	#FSCB$V_NULL,(R0),DERR2 ; can't be UIC-format and null

D1_2:	BSBB	GET_CHAR		; get next character
	BEQL	DERR2			; quit if invalid or no more
	CMPB	R1,#C_OCTAL
	BEQL	D1_2
	CMPB	R1,#C_WILD
	BEQL	D1_0
	CMPB	-1(R7),R2		; if nothing matches then we have
	BNEQ	DERR2			;  a problem
	SSB	#FSCB$V_GRPMBR,R3	; mark the second descriptor

DIR_DONE1:
	BRW	DIR_DONE

D1_0:	SSB	#FSCB$V_WILD,R3		; mark wild
	BRB	D1_2			; rejoin processing

;
;	D2	- a normal directory is being parsed
;
;	eos		-> ERROR
;	alpha_numeric	-> D2
;	.		-> D3
;	]		-> DIR_DONE
;	>		-> DIR_DONE
;	special		-> D2
;	wild		-> D2
;	lambda		-> ERROR
;

D2_W:	SSB	#FSCB$V_WILD,R3		; set wildcard

D2:	BSBW	GET_CHAR		; get next character
	BEQL	DERR2			; quit if invalid or no more
	CMPB	R1,#C_DOT
	BEQL	D3
D2_1:	BBS	R1,W^ALPHA_NUM,D2
	CMPB	-1(R7),R2
	BEQL	DIR_DONE1
	CMPB	R1,#C_WILD
	BEQL	D2_W
DERR2:	BRW	DIR_ERROR


;
;	D3	- a normal directory has been found
;
;	eos		-> ERROR
;	alpha_numeric	-> D2
;	.		-> D3_1
;	-		-> D4
;	]		-> DIR_DONE
;	>		-> DIR_DONE
;	wild		-> D2
;	lambda		-> ERROR
;

D3:	BSBW	FOUND_DIR
	BSBW	GET_CHAR		; get next character
	BEQL	DERR2			; quit if invalid or no more
	CMPB	R1,#C_MINUS
	BEQL	D4
	CMPB	R1,#C_DOT
	BNEQ	D2_1
	BSBW	GET_CHAR		; get next character
	BEQL	DERR2			; quit if invalid or no more
	CMPB	R1,#C_DOT
	BNEQ	DERR2


;
;	D3_2	- We have an ellipsis
;
;	eos		-> ERROR
;	alpha_numeric	-> D2
;	]		-> DIR_DONEX
;	>		-> DIR_DONEX
;	wild		-> D2
;	lambda		-> ERROR
;
;
;	NOTE: The elips flags must be set in the previous
;	directory descriptor
;

D3_2:	MOVZBL	FSCB$B_DIRS(R11),R0		; get number of current directory
	DECL	R0				; back up one
	CMPW	R0,#FSCB$C_MAXDIR		; is there a descriptor for it?
	BGTRU	10$				; no
	MOVAQ	FSCB$Q_DIRECTORY1(R11)[R0],R0	; get address of descriptor
	SSB	#FSCB$V_ELIPS,(R0)		; set flag
10$:	MOVL	R7,R5				; start next directory after elips
	BSBW	GET_CHAR			; get next character
	BEQL	DIR_ERROR			; quit if invalid or no more
	BBS	R1,W^ALPHA_NUM,D2
	CMPB	-1(R7),R2
	BEQL	DIR_DONEX
	CMPB	R1,#C_WILD
	BNEQ	DIR_ERROR
	BRB	D2_W

;
;	D4	- scanning a series of minus signs
;
;	eos		-> ERROR
;	.		-> D3
;	-		-> D4
;	]		-> DIR_DONE
;	>		-> DIR_DONE
;	lambda		-> ERROR
;

D4:	SSB	#FSCB$V_MINUS,R3		; we have a minus sign(s)
	BSBW	GET_CHAR			; get next character
	BEQL	DIR_ERROR			; quit if invalid or no more
	CMPB	R1,#C_DOT
	BEQL	D3
	CMPB	R1,#C_MINUS
	BEQL	D4
	CMPB	-1(R7),R2
	BNEQ	DIR_ERROR

DIR_DONE:
	BSBB	FOUND_DIR			; we found a directory
	CMPB	FSCB$B_DIRS(R11),#1		; is there more then one dir?
	BEQL	DIR_DONEX			; no, ignore
	CMPB	FSCB$B_DIRS(R11),#FSCB$C_MAXDIR	; more then the descriptors?
	BGTRU	DIR_DONEX			; yes
	BBS	#FSCB$V_GRPMBR,(R0),DIR_DONEUIC	; is this group member type?
	BBC	#FSCB$V_NULL,(R0),DIR_DONEX	; branch if not null
	DECB	FSCB$B_DIRS(R11)		; remove this directory
	SSB	#FSCB$V_ROOTED,R3		; set the concealed flag

DIR_DONEX:				; exit from ellips
	POPL	R5			; restore orginal start
	MOVZBL	#1,R0			; signal success
	RSB				; exit

DIR_DONEUIC:
	BBC	#FSCB$V_NULL,(R0),DIR_DONEX ; can't be UIC-format and null

DIR_ERROR:
	POPL	R5			; restore stack
	CLRL	R0			; signal error
	RSB				; return

;
; Process a directory
;
FOUND_DIR:
	MOVZBL	FSCB$B_DIRS(R11),R0		; get number of directories
	CMPB	R0,#FSCB$C_MAXDIR		; more then the descriptors?
	BGTR	20$				; yes
	SUBL3	R5,R7,R4			; find size
	DECL	R4				; remove trailing terminator
	BNEQ	10$				; if it is null
	SSB	#FSCB$V_NULL,R3			;  set flag
10$:	ADDL2	R3,R4				; copy flags into descriptor
	MOVAQ	FSCB$Q_DIRECTORY1(R11)[R0],R0	; get addr of descriptor
	MOVQ	R4,(R0)				; copy descriptor
20$:	INCB	FSCB$B_DIRS(R11)		; count it
	CLRL	R3				; clear flag
	MOVL	R7,R5				; update start address
	RSB					; NOTE: leave r0 = addr of desc

	.END				; End of module
