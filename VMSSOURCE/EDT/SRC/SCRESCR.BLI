%TITLE 'EDT$SCRESCR - erase screen'
MODULE EDT$SCRESCR (				! Erase screen
		IDENT = 'V04-000'			! File: SCRESCR.BLI Edit: JBS1012
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module outputs an erase screen sequence.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: September 8, 1979
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 12-Feb-1981.  This module was created by
!	extracting the routine EDT$$SC_ERAALL  from module SCREEN.
! 1-002	- Regularize headers.  JBS 13-Mar-1981
! 1-003 - Set message flag to zero when the screen is erased.  SMB 30-Aug-1982
! 1-004 - Add code to erase line by line if message flag set.  SMB 24-Sep-1982
! 1-005	- Revise the handling of EDT$$G_MSGFLG.  JBS 06-Oct-1982
! 1-006	- Use the fancy screen clearing features of the VT100 to speed up screen
!	   clearing when the message line must be preserved.  JBS 06-Oct-1982
! 1-007	- Don't clear EDT$$G_SCR_CHGD unless we are clearing the whole screen.  JBS 07-Oct-1982
! 1-008	- Fix clearing one line too many when clearing the text area.  JBS 09-Oct-1982
! 1-009	- Remove the call to EDT$$OUT_FMTBUF.  JBS 09-Oct-1982
! 1-010	- Set the cursor position before erasing.  JBS 23-Oct-1982
! 1-011	- If the cursor line is -1 (initial value) use 0.  JBS 11-Jan-1983
! 1-012	- Allow for new value of EDT$$G_SCR_CHGD.  JBS 02-Mar-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$SC_ERAALL : NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

BIND
    ERS_S_52 = UPLIT (%STRING (%CHAR (ASC_K_ESC), 'J')),
    ERS_S_100 = UPLIT (%STRING (%CHAR (ASC_K_ESC), '[J')),
    ERS_S_100A = UPLIT (%STRING (%CHAR (ASC_K_ESC), '[1J'));

LITERAL
    ERS_S_52_LEN = 2,
    ERS_S_100_LEN = 3,
    ERS_S_100A_LEN = 4;

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$SC_ERAALL  - erase screen'

GLOBAL ROUTINE EDT$$SC_ERAALL 			! Erase screen
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine erases the screen from the current location to
!	the end of the screen, or to just before the message line
!	if there is useful text in the message line.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$G_CS_LNO
!	EDT$$G_SCR_LNS
!	EDT$$G_MSGFLG
!	EDT$$G_TI_TYP
!	EDT$$G_SCR_CHGD
!	EDT$$G_TI_WID
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_MSGFLG
!	EDT$$G_SCR_CHGD
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$SC_ERATOEOL : NOVALUE,		! Erase to end of line
	EDT$$SC_POSCSIF : NOVALUE,		! Position the cursor
	EDT$$FMT_LIT : NOVALUE;			! Output a string without expansion

    EXTERNAL
	EDT$$G_CS_LNO,				! current cursor line
	EDT$$G_SCR_LNS,				! number of screen lines
	EDT$$G_MSGFLG,				! 1 = there is a message on the message line
	EDT$$G_TI_TYP,				! Terminal type
	EDT$$G_SCR_CHGD,			! non-zero = the screen must be erased completely
	EDT$$G_TI_WID;				! The width of the screen

    LOCAL
	LINE_NO;

    LINE_NO = .EDT$$G_CS_LNO;

    IF (.LINE_NO LSS 0) THEN LINE_NO = 0;

!+
! If the screen has been mangled then there can be nothing useful on the message line.
!-

    IF (.EDT$$G_SCR_CHGD NEQ 0) THEN EDT$$G_MSGFLG = 0;

!+
! Use different algorithms depending on whether or not we must protect the message line.
!-

    IF (.EDT$$G_MSGFLG EQL 0)
    THEN
!+
! Erase to the end of the screen.
!-
	BEGIN
	EDT$$SC_POSCSIF (.LINE_NO, 0);

	IF (.EDT$$G_TI_TYP EQL TERM_VT52)
	THEN
	    EDT$$FMT_LIT (ERS_S_52, ERS_S_52_LEN)
	ELSE

	    IF (.EDT$$G_TI_TYP EQL TERM_VT100) THEN EDT$$FMT_LIT (ERS_S_100, ERS_S_100_LEN);

!+
! If we are erasing the whole screen then the screen is no longer mangled.
!-

	IF (.LINE_NO EQL 0) THEN EDT$$G_SCR_CHGD = 0;

	END
    ELSE
!+
! We must preserve the message line.  If we have a VT100 and are at the home position
! we can use a "clear from beginnning of screen to here" command.
!-
	BEGIN

	IF ((.EDT$$G_TI_TYP EQL TERM_VT100) AND (.LINE_NO EQL 0))
	THEN
	    BEGIN
	    EDT$$SC_POSCSIF (.EDT$$G_SCR_LNS - 1, .EDT$$G_TI_WID - 1);
	    EDT$$FMT_LIT (ERS_S_100A, ERS_S_100A_LEN);
	    END
	ELSE
!+
! Erase each line separately up to the message line.
!-

	    INCR I FROM .LINE_NO TO .EDT$$G_SCR_LNS - 1 DO
		BEGIN
		EDT$$SC_POSCSIF (.I, 0);
		EDT$$SC_ERATOEOL ();
		END;

	END;

    END;					! of routine EDT$$SC_ERAALL

!<BLF/PAGE>

END						! of module EDT$SCRESCR

ELUDOM
