MODULE EDT$MSGTXT (				! Provide message text to WRIEDTMSG
		IDENT = 'V04-000'			! File: MSGTXT.B32, Edit: JBS1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!

!++
! FACILITY:  EDT, the DEC standard editor
!
! ABSTRACT:
!
!	This module returns to a FORTRAN program the VAX/VMS 32-bit
!	condition value and text corresponding to an EDT message.
!	This result is used to produce EDTMSG.MSG, which is compiled
!	into an object module which provides that message text.
!	This module is not part of the EDT image.
!
! ENVIRONMENT:  VAX/VMS only
!
! AUTHOR: John Sauter, CREATION DATE: 23-Jul-1981
!
! MODIFIED BY:
!
! 1-001	- Original, from BASERRTXT.B32, created Nuvember 3, 1978, last updated
!	   December 28, 1981 (version 1-002).  JBS 23-Jul-1981
!--

!
!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    EDT$MSGTXT;					! Return condition value and text

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:STARLET.L32';		! Define system symbols

REQUIRE 'EDTSRC:ERRMSG.REQ';			! Define the ERROR_MESSAGES macro

REQUIRE 'EDTSRC:PSECTS';			! Define the 'PSECTS' macro

!
! MACROS:
!
!	See next page for message macros.
!
! EQUATED SYMBOLS:
!

LITERAL
    EDT$K_FAC_NO = 133;				! The facility code number for EDT

!
! PSECTS:
!
DECLARE_PSECTS (EDT);				! Define the attributes of the program sections
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$SCOPY_R_DX;				! copy a string

!+
! Lay out the information for each message.  The source is in
! ERRMSG.REQ.
!-

MACRO
    ERR [NAME, SEVERITY, TEXT, ENAME] =
 
	BYTE (MIN(9, %CHARCOUNT(NAME)))		! Name length 
%;

BIND
    MESSAGE_NAME_LENGTH = UPLIT (ERROR_MESSAGES, BYTE (0)) : VECTOR [, BYTE];

UNDECLARE %QUOTE
    ERR;

MACRO
    ERR [NAME, SEVERITY, TEXT, ENAME] =
 
	UPLIT (BYTE (%STRING (NAME)))				! The name itself 
%;

BIND
    MESSAGE_NAME = UPLIT (ERROR_MESSAGES, LONG (0)) : VECTOR [, LONG];

UNDECLARE %QUOTE
    ERR;

MACRO
    ERR [NAME, SEVERITY, TEXT, ENAME] =
 
	BYTE (%STRING(SEVERITY))			! Severity code 
%;

BIND
    MESSAGE_SEVERITY = UPLIT (ERROR_MESSAGES, BYTE (0)) : VECTOR [, BYTE];

UNDECLARE %QUOTE
    ERR;

MACRO
    ERR [NAME, SEVERITY, TEXT, ENAME] =
 
	BYTE(MIN(255, %CHARCOUNT(TEXT)))		! Text length 
%;

BIND
    MESSAGE_TEXT_LENGTH = UPLIT (ERROR_MESSAGES, BYTE (0)) : VECTOR [, BYTE];

UNDECLARE %QUOTE
    ERR;

MACRO
    ERR [NAME, SEVERITY, TEXT, ENAME] =
 
	UPLIT (BYTE(TEXT))				! The text itself 
%;

BIND
    MESSAGE_TEXT = UPLIT (ERROR_MESSAGES, LONG (0)) : VECTOR [, LONG];

UNDECLARE %QUOTE
    ERR;


GLOBAL ROUTINE EDT$MSGTXT (			! get message info
	CODE, 					! small integer to indicate message
	SEVERITY, 				! Name of message severity
	NAMLEN, 				! length of mnemonic
	NAME, 					! mnemonic
	TXTLEN, 				! length of text
	TEXT					! text of error message
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Return the 32-bit condition value, mnemonic and text of an EDT
!	message to a FORTRAN calling program.
!
! FORMAL PARAMETERS:
!
!	CODE.rl.r	A small integer which specifies which message is wanted.
!	VALUE.wt.dx	The severity of the message
!	NAMLEN.wl.r	The length of the VAX/VMS mnemonic for the
!			condition value.
!	NAME.wt.d	The VAX/VMS mnemonic for the condition value.
!			(Length as given above.)
!	TXTLEN.wl.r	The length of the text corresponding to the
!			condition value.
!	TEXT.wt.dx	The text corresponding to the condition value.
!			(Length as given above.)
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Always success (SS$_NORMAL)
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
!+
! If the code is 1 too large, return with spaces in SEVERITY.  This is
! a signal that the list of message codes is exhausted.
!-

    IF (.MESSAGE_SEVERITY [..CODE] EQL 0)
    THEN
	BEGIN
	LIB$SCOPY_R_DX (%REF (1), %REF (' '), .SEVERITY);
	RETURN (SS$_NORMAL);
	END;

!+
! Copy the severity name to the caller's descriptor.
!-
    LIB$SCOPY_R_DX (%REF (7),
	(SELECTONE .MESSAGE_SEVERITY [..CODE] OF
	    SET
	    ['S'] : UPLIT ('SUCCESS');
	    ['I'] : UPLIT ('INFORMA');
	    ['W'] : UPLIT ('WARNING');
	    ['E'] : UPLIT ('ERROR  ');
	    ['F'] : UPLIT ('FATAL  ');
	    [OTHERWISE] : SIGNAL_STOP (0);
	    TES), .SEVERITY);
!+
! Copy the message text to the caller's descriptor.
!-
    LIB$SCOPY_R_DX (%REF (.MESSAGE_TEXT_LENGTH [..CODE]), .MESSAGE_TEXT [..CODE], .TEXT);
!+
! Copy the message name to the caller's descriptor.
!-
    LIB$SCOPY_R_DX (%REF (.MESSAGE_NAME_LENGTH [..CODE]), .MESSAGE_NAME [..CODE], .NAME);
!+
! Also return the lengths.
!-
    .NAMLEN = .MESSAGE_NAME_LENGTH [..CODE];
    .TXTLEN = .MESSAGE_TEXT_LENGTH [..CODE];
!+
! All done.
!-
    RETURN (SS$_NORMAL);
    END;					! of EDT$MSGTXT

END

ELUDOM
