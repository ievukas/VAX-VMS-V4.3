MODULE RECSELECT
(%TITLE 'Entry Validation'
IDENT = 'V04-000') =
	
BEGIN
	
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  ERF, Error Log Report Generator
!
! ABSTRACT:
!
!	This routine will determine if the previously read entry
! 	meets user specified selection criteria.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, user mode.
!
! AUTHOR:  Sharon Reynolds,	CREATION DATE:	January 1983
!
! Modified by:
!
!	V03-022	EAD0179		Elliott A. Drayton		 6-Jul-1984
!		Obtain LSTLUN value from SYECOM.
!
!	V03-023	SAR0274		Sharon A. Reynolds	19-Jun-1984
!		- Added another check for device selection and entry
!		selection combinations to fix a bug with 
!		/INC=(MF,VOLUME) and /INC=(TAPE,VOLUME).
!
!	V03-022	EAD0179		Elliott A. Drayton	23-May-1984
!		Correct the passing of the address of device name
!		in VERIFY_DEVICE.
!
!	V03-021	SAR0267		Sharon A. Reynolds	15-May-1984
!		- Updated VERIFY_DEVICE to support longer device names.
!		- Added check for unknown entry output to replace code 
!		that was previously removed.
!
!	V03-020	SAR0254		Sharon A. Reynolds	23-Apr-1984
!		Added flag to /before check to stop execution when 
!		last entry found.
!
!	V03-019	EAD0151		Elliott A. Drayton	14-Apr-1984
!		Fixed structure names in VERIFY_DEVICE.
!
!	V03-018	EAD0141		Elliott A. Drayton	12-Apr-1984
!		Removed reference to EMBETDEF.
!
!	V03-017 SAR0248		Sharon A. Reynolds	10-Apr-1984
!		Moved the unknown keyword tests to the verify entry
!		routine so it would go through same tests as any
!		other /include or /exclude entry selection.
!
!	V03-016 SAR0245		Sharon A. Reynolds	4-Apr-1984
!		Added EMB$LOGMSP to device type entry table.
!
!	V03-015	EAD0119		Elliott A. Drayton	23-Mar-1984
!		Remove support for /UNKNOWN qualifier and added support
!		for the UNKNOWN keyword.
!
!	V03-014	EAD0115		Elliott A. Drayton	 9-Mar-1984
!		Removed emb_buf and syecom_buf.
!
!	V03-013	SAR0189		Sharon A. Reynolds,	13-Feb-1984
!		- Added 'CS' device name support to device table search
!		routine.
!		- Added additional test for entry summary update.
!
!	V03-012	SAR0184		Sharon A. Reynolds,	17-Jan-1984
!		- Fixed a bug in the output of the erf_unkentry message.
!		- Added code to set the end value indicator when
!		  the last selected entry (/entry) is found.
!
!	V03-011	SAR0181		Sharon A. Reynolds,	13-Dec-1983
!		- Remove descriptor references.
!		- Add device attention keyword support.
!		- Add lm/sp entries to device errors entry list.
!		- Add lm/sp entry check for bus class selections.
!		- Removed logmessage keyword.
!		- Add unsolicited_mscp keyword support.
!		- Added incomplete entry message.
!
!	V03-010	SAR0176		Sharon A. Reynolds,	21-Nov-1983
!		- Removed un-necessary check for outputting all 
!		  entries.
!		- Changed reference to report type.
!
!	V03-009	SAR0152		Sharon A. Reynolds,	7-Oct-1983
!		- Added code to output informational messages when
!		  and unknown entry is encountered.
!		- Added the code that counts intervening logmessage
!		  logstatus entries.
!		- Re-structured the /include and /exclude entry
!		  checks to fix a bug.
!		- Made /includ=disks/exclude=db1 a valid command.
!
!	V03-008	SAR0139		Sharon A. Reynolds,	20-Sep-1983
!		Fixed a bug in mount/dismount output. Fixed an out
!		of range loop.
!
!	V03-007	SAR0122		Sharon A. Reynolds,	23-Aug-1983
!		Re-wrote translate_class routine for use with the
!		permanent device tables.
!
!	V03-006	SAR0032		Sharon A. Reynolds,	2-Jun-1983
!		Replaced emb_stuf with emb_buf definitions. Fixed bug
!		in dc$_bus selection.
!
!	V03-005	SAR0029		Sharon A. Reynolds,	11-May-1983
!		Removed support for logstatus keyword.
!
!	V03-004	SAR0013		Sharon A. Reynolds,	18-Apr-1983
!		Deleted the log message and status message entries
!		from the 'control' table. Added call to update
!		entry summaries.
!
!	V03-003	SAR0003		Sharon A. Reynolds,	5-Apr-1983
!		Removed the volume_output flag definition. Changed
!		any references to volume_output flag so they refer
!		to it from SYECOM.
!
!	V03-002	SAR0002		Sharon A. Reynolds,	5-Apr-1983
!		Fixed /exclude selection bug.
!
!	V03-001 SAR0001		Sharon A. Reynolds,	29-Mar-1983
!		Fixed /include='device name', volume mount/dismount
!		selection problem.
!
!--


!
! Required files
!
REQUIRE 'SRC$:ERFDEF.REQ' ;		! ERF defintions
REQUIRE 'LIB$:PARSERDAT.R32' ;		! ERF parser data definitions
REQUIRE 'SRC$:RECSELDEF.REQ' ;		! EMB, SYECOM, LOGMSG, LOGSTS, and 
					!  VOLMOUNT field defintions

!
! Table of contents
!
!
FORWARD ROUTINE
    Record_selected,			! Verify entry against selections
    Verify_entry,			! Verify the entry type
    Device_type_entry,			! Determine if it's a device type entry
    Verify_device_class,		! Verify the device class
    Verify_device,			! Verify the device name
    Translate_class ;			! Translate device class to a name

!
! Declare external routines
!
EXTERNAL ROUTINE
    Exec_image,				! Execute an image
    Intervene_increment,
    Intervene_output,
    Search_queue: addressing_mode (general) , ! Search queue of devices selected
    Validate_packet;			! Is the packet validate for the cpu it was logged on.

!
! Declare external literals
!
EXTERNAL LITERAL
    Erf_incentry,
    Erf_unkclass,
    Erf_unkcpu,
    Erf_unkentry,
    Erf_unktype ;

!
! Declare external data.
!
EXTERNAL
    Class_dir:		REF $BBLOCK,
    Device_class,
    Device_type,
    Emb:		$BBLOCK PSECT (EMB),
    Exclude_flag,
    Exclude_mask:	REF $BBLOCK,
    Include_mask:	REF $BBLOCK,
    Option_flag:	REF $BBLOCK,
    Parser_data:	REF $BBLOCK,
    Processor_type,
    Summary_dispatcher_addr,
    Summary_flag:	REF $BBLOCK,
    Syecom:		$BBLOCK PSECT (SYECOM),
    Unknown_entry ;

!
! Declare literal definitions
!
LITERAL
    Incomplete_entry = 128 ;

!
! Own storage definitions
!
OWN
    Lstlun:		Long,
    Dev_selection_required: BYTE,
    Device_status:	BYTE,
    Dev_cls_status:	BYTE,
    Dev_type_entry_sts:	BYTE,
    Entry_status:	BYTE,
    Validate_pkt_sts:	Initial (false),
    Bugchks:		VECTOR [3,byte,unsigned]  ! Bugcheck type entries
			Initial (byte
				(EMB$K_CR,	! Crash 
				EMB$K_SBC,	! System bugchecks
				EMB$K_UBC)),	! User bugchecks

    Control:		VECTOR [7,byte,unsigned] ! Control type entries
			Initial (byte
				(EMB$K_CS,	! Cold re-start
				EMB$K_NF,	! New file created
				EMB$K_WS,	! Warm re-start
				EMB$K_TS,	! Time stamp
				EMB$K_SS,	! System service message
				EMB$K_OM,	! Operator message
				EMB$K_NM)),	! Network message

    Cpu:		VECTOR [8,byte,unsigned] ! Cpu type entries
			Initial (byte
				(EMB$K_AW,	! Asynchronouw write error
				EMB$K_UBA,	! Unibus adapter error
				EMB$K_MBA,	! Massbus adapter error
				EMB$K_UI,	! Undefined interrupt
				EMB$K_BE,	! Bus error
				EMB$K_SA,	! SBI alert
				EMB$K_SI,	! 11/750 fault thru SBI vector
				EMB$K_UE)),	! 11/730 unibus error

    Dev_errors:		VECTOR [3,byte,unsigned] ! Device error entries
			Initial (byte
				(EMB$K_DE,	! Device Errors
				EMB$K_SP,	! Logstatus entries (mscp)
				EMB$K_LM)),	! Logmessage entries (mscp)

    Memorys:		VECTOR [2,byte,unsigned] ! Memory entries
			Initial (byte
				(EMB$K_SE,	! Soft ECC error
				EMB$K_HE)),	! Hard ECC error

    Volume:		VECTOR [2,byte,unsigned]	! Volume change entries
			Initial (byte
				(EMB$K_VM,	! Volume mounts
				EMB$K_VD)) ;	! Volume dismounts


GLOBAL ROUTINE RECORD_SELECTED = 
Begin

!++
!
! Functional Description:
!
!	This routine will determine what selection qualifiers are
!	specified and match the appropriate fields in the current
!	entry against the selections. It return TRUE if the 
!	current entry matches or return FALSE if the current entry 
!	does NOT match.
!
! Calling sequence:
!
!	RECORD_SELECTED () 
!
! Input parameters:
!
!	None
!
! Output parameters:
!
!	None 
!
!--

LOCAL
    Include_status:	BYTE
			Initial (true),
    Exclude_status:	BYTE
			Initial (true) ;

lstlun = .syecom [sye$l_lstlun];

!
! Validate the packet for entry/cpu type and device class/type.
!
If NOT (VALIDATE_PACKET ())
Then 
    Unknown_entry = true 
Else
    Unknown_entry = false ;

!
! Determine if /summary selected and update that entry summary
! information.
!
If (.option_flag[opt$v_summary_qual] AND
    (.summary_flag[sum$v_entry] OR 
     .summary_flag[sum$v_all_summ] OR 
     .summary_flag[sum$v_histogram]))
Then
    Exec_image (summary_dispatcher_addr,lstlun,%REF(entry_summ_upd)) ;

!
! If incomplete entry report the error.
!
If ((NOT .syecom[sye$b_valid_entry]) AND
   (.emb[emb$w_hd_entry] GEQ incomplete_entry))
Then
   Begin
   Signal (erf_incentry, 1, .emb[emb$w_hd_entry]);
   Return false;
   End;

!
! Determine whether the volume mounts/dismounts should be output or just
! label information saved from the entry.
!
If (.exclude_mask[exc$v_volume] AND 
    (.include_mask[inc$v_device_select] OR
    .include_mask[inc$v_dev_class_select] OR
    .include_mask[inc$v_dev_attentions] OR
    .include_mask[inc$v_dev_errors] OR
    .include_mask[inc$v_dev_timeouts])) AND
    (NOT .include_mask[inc$v_volume] OR
    NOT .option_flag[opt$v_output_all])
Then
    !
    ! Indicate that volume mount/dismount entries 
    ! should not be output.
    !
    Syecom[sye$b_volume_output] = false 
Else
    Syecom[sye$b_volume_output] = true ;

!
! Determine if the /ENTRY qualifier was specified.
!
If .option_flag[opt$v_entry_qual]
Then
    !
    ! /Entry specified, get the address of the entry selection
    ! data and determine if the number of this entry 
    ! is within the selected range.
    !
    Begin
    If .syecom[sye$l_reccnt] LSSU .parser_data[erl$l_end_entry] 
    Then
	!
	! This entry should be within the selected range, ensure
	! the entry number is greater than the starting entry selection.
	!
	Begin
	If NOT (.syecom[sye$l_reccnt] GEQU .parser_data[erl$l_start_entry])
	Then
	    !
	    ! Entry is NOT within the selected range, return to calling
	    ! routine.
	    !
	    Return false ;
	End 
    Else
	!
	! Entry is NOT within the selected range, return to calling 
	! routine.
	!
	Begin
	If .syecom[sye$l_reccnt] GEQU .parser_data[erl$l_end_entry] 
	Then
	    !
	    ! Indicate that last selected entry was found.
	    !
	    Syecom[sye$b_end_value] = true ;

	Return true ;
	End ;
    End ;

!
! Determine if the /BEFORE qualifier was specified.
!
If .option_flag[opt$v_before_qual]
Then
    !
    ! Determine if the date/time that this entry was recorded falls
    ! within the range of selected date/times.
    !
    Begin
    If COMPARE_QUAD(emb[emb$q_hd_time],GEQU,
		        parser_data[erl$q_end_date])
    Then
	!
	! This entry is NOT within the selected date/time range,
	! return to the calling routine.
	!
	Begin
	Syecom[sye$b_end_value] = true ;
	Return true ;
	End ;
    End ;

!
! Determine if the /SINCE qualifier was specified.
!
If .option_flag[opt$v_since_qual]
Then
    !
    ! Ensure that the entry date/time is greater than the starting 
    ! time/date selection.
    !
    Begin
    If NOT COMPARE_QUAD(emb[emb$q_hd_time],GEQU,
			    parser_data[erl$q_start_date])
    Then
	!
	! The entry does NOT meet that selection criteria for date/time,
	! return to the calling routine.
	!
	Return false ;
    End ;

!
! Determine if the /SID_REGISTER qualifier was specified.
!
If .option_flag[opt$v_sid_reg_qual]
Then
    !
    ! Determine if the entry sid matches the selected sid.
    !
    Begin
    If NOT .parser_data[erl$l_sid_selection] EQLU .emb[emb$l_hd_sid]
    Then
	!
	! Entry sid does NOT match selected sid, return to calling
	! routine.
	!
	Return false ;
    End ;

Device_status = false ;
Dev_cls_status = false ;
Entry_status = false ;

Dev_type_entry_sts = DEVICE_TYPE_ENTRY () ;

If .option_flag[opt$v_include_qual]
Then
    Begin
    Exclude_flag = false ;

    If .dev_type_entry_sts OR
	(.emb[emb$w_hd_entry] EQLU EMB$K_VM) OR
	(.emb[emb$w_hd_entry] EQLU EMB$K_VD)
    Then
	Begin
	If .include_mask[inc$v_device_select]
	Then
	    Begin
	    If VERIFY_DEVICE ()
	    Then
		Device_status = true 
	    Else
		Device_status = false ;
	    End ;

	If .include_mask[inc$v_dev_class_select]
	Then
	    Begin
	    If VERIFY_DEVICE_CLASS ()
	    Then
		Dev_cls_status = true 
	    Else
		Dev_cls_status = false ;
	    End ;
	End ;

    If .include_mask[inc$v_entry_select]
    Then
	Begin
	If VERIFY_ENTRY ()
	Then
	    Entry_status = true 
	Else 
	    Entry_status = false ;
	End ;


    If (.include_mask[inc$v_device_select] AND 
	.dev_type_entry_sts AND	.device_status) OR

	(.include_mask[inc$v_dev_class_select] AND 
	.dev_type_entry_sts AND .dev_cls_status) OR

	(.include_mask[inc$v_entry_select] AND .entry_status)
    Then
	Include_status = true
    Else
	Include_status = false ;


    If .include_mask[inc$v_device_select] AND 
	.include_mask[inc$v_entry_select] 
    Then
	Begin
	Include_status = false ;

	If .dev_selection_required
	Then
	    Begin
	    If (.entry_status AND .device_status) OR
		(.dev_type_entry_sts AND .device_status)
	    Then
		Include_status = true ;
	    End 
	Else 
	    Begin
	    If .dev_type_entry_sts AND .device_status
	    Then
		Begin
		Include_status = true ;
		End 
	    Else
	        Begin
	        If (NOT .dev_type_entry_sts AND .entry_status) 
	        Then
	  	    Include_status = true ;	
	        End ;
	    End ;
	End ;

    If .include_mask[inc$v_dev_class_select] AND 
	.include_mask[inc$v_entry_select] 
    Then
	Begin
	Include_status = false ;

	If .dev_selection_required
	Then
	    Begin
	    If (.entry_status AND .dev_cls_status) OR
		(.dev_type_entry_sts AND .dev_cls_status)
	    Then
		Include_status = true ;
	    End 
	Else
	    Begin
	    If .dev_type_entry_sts AND .dev_cls_status
	    Then
		Begin
		Include_status = true ;
		End 
	    Else
	        Begin
	        If (NOT .dev_type_entry_sts AND .entry_status) 
	        Then
	  	    Include_status = true ;	
	        End ;
	    End ;
	End ;

    End ;

!
!If not /include option then include_status = false
!

If .option_flag[opt$v_exclude_qual]
Then
    Begin
    Exclude_flag = true ;

    If .dev_type_entry_sts OR
	(.emb[emb$w_hd_entry] EQLU EMB$K_VM) OR
	(.emb[emb$w_hd_entry] EQLU EMB$K_VD)
    Then
	Begin
	If .exclude_mask[exc$v_device_select]
	Then
	    Begin
	    If VERIFY_DEVICE ()
	    Then
		Device_status = true 
	    Else
		Device_status = false ;
	    End ;

	If .exclude_mask[exc$v_dev_class_select]
	Then
	    Begin
	    If VERIFY_DEVICE_CLASS ()
	    Then
		Dev_cls_status = true 
	    Else
		Dev_cls_status = false ;
	    End ;
	End ;

    If .exclude_mask[exc$v_entry_select]
    Then
	Begin
	If VERIFY_ENTRY ()
	Then
	    Entry_status = true 
	Else
	    Entry_status = false ;
	End ;

    If (.exclude_mask[exc$v_device_select] AND
	.dev_type_entry_sts AND .device_status) OR

	(.exclude_mask[exc$v_dev_class_select] AND 
	.dev_type_entry_sts AND .dev_cls_status) OR

	(.exclude_mask[exc$v_entry_select] AND .entry_status) 
    Then
	Exclude_status = false 
    Else
	Exclude_status = true ;


    If .exclude_mask[exc$v_device_select] AND 
	.exclude_mask[exc$v_entry_select] 
    Then
	Begin
	Exclude_status = true ;

	If .dev_selection_required
	Then
	    Begin
	    If (.entry_status AND .device_status) OR
		(.dev_type_entry_sts AND .device_status)
	    Then
		Exclude_status = false ;
	    End 
	Else 
	    Begin
	    If .dev_type_entry_sts AND .device_status
	    Then
		Begin
		Exclude_status = false ;
		End 
	    Else
	        Begin
	        If (NOT .dev_type_entry_sts AND .entry_status) 
	        Then
	  	    Exclude_status = false ;	
	        End ;
	    End ;
	End ;

    If .exclude_mask[exc$v_dev_class_select] AND 
	.exclude_mask[exc$v_entry_select] 
    Then
	Begin
	Exclude_status = true ;

	If .dev_selection_required
	Then
	    Begin
	    If (.entry_status AND .dev_cls_status) OR
		(.dev_type_entry_sts AND .dev_cls_status)
	    Then
		Exclude_status = false ;
	    End 
	Else
	    Begin
	    If .dev_type_entry_sts AND .dev_cls_status
	    Then
		Begin
		Exclude_status = false ;
		End 
	    Else
	        Begin
	        If (NOT .dev_type_entry_sts AND .entry_status) 
	        Then
	  	    Exclude_status = false ;	
	        End ;
	    End ;
	End ;

    End ;	! of /exclude processing
!
! IF /exclude option match, exclude_status = false.
!


!
! Determine whether to count logmessage/logstatus entries.
!
If ( (.include_status) AND (.exclude_status) AND 
    (.parser_data[erl$b_rpt_type] EQL full_rep) ) 
Then
    !
    ! Determine if it was a logmessage/logstatus entry.
    !
    Begin
    If (.emb[emb$w_hd_entry] EQLU EMB$C_SP) OR
	(.emb[emb$w_hd_entry] EQLU EMB$C_LM)
    Then
	!
	! Count the number of logmessage/logstatus entries 
	! that might be skipped.
	!
	INTERVENE_INCREMENT (lstlun) 
    Else
	!
	! Determine whether to output the logstatus/logmessage 
	! intervening message and if necessary output it.
	!
	INTERVENE_OUTPUT (lstlun) ;
    End ;

!
! Determine if the entry met the selection criteria.
!
! Determine if this is an unknown entry.
!
If .unknown_entry
Then
    ! Indicate that this is an unknown entry and return with a 
    ! true value so that it will be output.
    !
    Return true ;

If (NOT .include_status) OR
    (NOT .exclude_status) 
Then
    !
    ! Indicate that the entry should not be output by
    ! returning to the calling routine with a false value.
    !
    Return false ;

!
! Indicate that the entry should be output by 
! returning to the calling routine with a true value.
!
Return true ;

End ;	! Routine



ROUTINE VERIFY_ENTRY = 
Begin

!++
!
! Functional Description:
!
!	This routine will determine if the current entry matches
!	any of the selected entry types. It return TRUE if the 
!	current entry matches or return FALSE if the current entry 
!	does NOT match.
!
! Calling sequence:
!
!	VERIFY_ENTRY () 
!
! Input parameters:
!
!	None
!
! Output parameters:
!
!	None 
!
!--


!
! Initialize a status indicator.
!
Dev_selection_required = false ;

!
! Determine if device attention entries are selected.
!
If ((.exclude_mask[exc$v_dev_attentions]) OR
    (.include_mask[inc$v_dev_attentions]))
Then
    !
    ! Determine if this entry is for a device attention.
    !
    Begin
    Dev_selection_required = true ;
    If .emb[emb$w_hd_entry] EQLU EMB$K_DA
    Then
	!
	! Indicate that this entry does match a selected entry
	! type, by returning to the calling routine with a 
	! true value.
	!
	Return true ;
    End ;

!
! Determine if bugcheck entries are selected.
!
If ((.exclude_mask[exc$v_bugchks]) OR 
    (.include_mask[inc$v_bugchks]))
Then
    !
    ! Determine if this entry is for a bugcheck.
    !
    Begin
    Incr I from 0 to 2 do
	Begin
	If .emb[emb$w_hd_entry] EQLU .bugchks[.I]
	Then
	    !
	    ! Indicate that this entry does match a selected 
	    ! entry type, by returning to the calling routine
	    ! with a true value.
	    !
	    Return true ;
	End ;
    End ;

!
! Determine if 'control entries' are selected.
!
If ((.exclude_mask[exc$v_control_entry]) OR 
    (.include_mask[inc$v_control_entry]))
Then
    !
    ! Determine if this entry is a 'control entry'.
    !
    Begin
    Incr I from 0 to 6 do
	Begin
	If .emb[emb$w_hd_entry] EQLU .control[.I]
	Then
	    !
	    ! Indicate that this entry does match a selected 
	    ! entry type, by returning to the calling routine
	    ! with a true value.
	    !
	    Return true ;
	End ;
    End ;

!
! Determine if 'cpu entries' are selected.
!
If ((.exclude_mask[exc$v_cpu_entry]) OR
    (.include_mask[inc$v_cpu_entry]))
Then
    !
    ! Determine if this entry is a 'cpu entry'.
    !
    Begin
    Incr I from 0 to 7 do
	Begin
	If .emb[emb$w_hd_entry] EQLU .cpu[.I]
	Then
	    !
	    ! Indicate that this entry does match a selected 
	    ! entry type, by returning to the calling routine
	    ! with a true value.
	    !
	    Return true ;
	End ;
    End ;

!
! Determine if device errors are selected.
!
If ((.exclude_mask[exc$v_dev_errors]) OR
    (.include_mask[inc$v_dev_errors]))
Then
    !
    ! Determine if this entry is a device error.
    !
    Begin
    Dev_selection_required = true ;

    Incr I from 0 to 2 do
	Begin
	If .emb[emb$w_hd_entry] EQLU .dev_errors[.I]
	Then
	    !
	    ! Indicate that this entry does match a selected 
	    ! entry type, by returning to the calling routine
	    ! with a true value.
	    !
	    Return true ;
	End ;
    End ;

!
! Determine if machine checks are selected.
!
If ((.exclude_mask[exc$v_machine_chks]) OR
    (.include_mask[inc$v_machine_chks]))
Then
    !
    ! Determine if this entry is a machine check.
    !
    Begin
    If .emb[emb$w_hd_entry] EQLU EMB$K_MC
    Then
	!
	! Indicate that this entry does match a selected 
	! entry type, by returning to the calling routine
	! with a true value.
	!
	Return true ;
    End ;

!
! Determine if memory entries are selected.
!
If ((.exclude_mask[exc$v_memory]) OR
    (.include_mask[inc$v_memory]))
Then
    !
    ! Determine if this entry is a 'memory entry'.
    !
    Begin
    Incr I from 0 to 1 do
	Begin
	If .emb[emb$w_hd_entry] EQLU .memorys[.I]
	Then
	    !
	    ! Indicate that this entry does match a selected 
	    ! entry type, by returning to the calling routine
	    ! with a true value.
	    !
	    Return true ;
	End ;
    End ;

!
! Determine if device timeouts are selected.
!
If ((.exclude_mask[exc$v_dev_timeouts]) OR
    (.include_mask[inc$v_dev_timeouts]))
Then
    !
    ! Determine if this entry is a device timeouts.
    !
    Begin
    Dev_selection_required = true ;

    If .emb[emb$w_hd_entry] EQLU EMB$K_DT
    Then
	!
	! Indicate that this entry does match a selected 
	! entry type, by returning to the calling routine
	! with a true value.
	!
	Return true ;
    End ;


!
! Determine if unknown entries have been selected.
! If unknown entries have not been excluded, then see if this is an
! unknown entry. If it is set UNKNOWN_ENTRY true.
!
! Initialize the unknown entry indicator (not an unknown entry).
!
If ((.exclude_mask[exc$v_unknown_entry]) OR
    (.include_mask[inc$v_unknown_entry]))
Then
    !
    ! Determine if this is an unknown entry.
    !
    Begin
    If .unknown_entry 
    Then  Return true ;
    End ;

!
! Determine if unsolicited mscp entries are selected.
!
If ((.exclude_mask[exc$v_unsol_mscp]) OR
    (.include_mask[inc$v_unsol_mscp]))
Then
    !
    ! Determine if this entry is an unsolicited mscp entry.
    !
    Begin
    If .emb[emb$w_hd_entry] EQLU EMB$K_LOGMSCP
    Then
	!
	! Indicate that this entry does match a selected
	! entry type, by returning to the calling routine
	! with a true value.
	!
	Return true ;
    End ;

!
! Determine if volume changes are to be excluded.
!
If ((.exclude_mask[exc$v_volume]) 
    OR (.include_mask[inc$v_volume]))
Then
    !
    ! Determine if this entry is a volume entry.
    !
    Begin
    Dev_selection_required = true ;

    Incr I from 0 to 1 do
	Begin
	If .emb[emb$w_hd_entry] EQLU .volume[.I]
	Then
	    !
	    ! Indicate that this entry does match a selected 
	    ! entry type, by returning to the calling routine
	    ! with a true value.
	    !
	    Return true ;
	End ;
    End ;

!
! Indicate that this entry does not match any of the selected
! entry types, by returning to the calling routine with a 
! false value.
!
Return false ;
End ;	! Routine 


GLOBAL ROUTINE DEVICE_TYPE_ENTRY = 
Begin

!++
!
! Functional Description:
!
!	This routine will determine if the current entry is a device
!	type entry; (device attention, device error, device timeout,
!	volume dismount, volume mount). It return TRUE if the current 
!	entry matches any of the device type entries or return FALSE 
!	if the current entry does NOT match.
!
! Calling sequence:
!
!	DEVICE_ENTRY_TYPE () 
!
! Input parameters:
!
!	None
!
! Output parameters:
!
!	None 
!
!--

OWN
    Device_entries:	VECTOR [6,byte,unsigned] ! Storage for device type 
						 ! entries.
			Initial (BYTE
				(EMB$K_DA,	 ! Device attentions
				EMB$K_DE,	 ! Device errors
				EMB$K_DT,	 ! Device timeouts
				EMB$K_LM,
				EMB$K_SP,	 ! Log message
				EMB$K_LOGMSCP)) ;! Unsolicited mscp msg

!
! Determine if the current entry is a device type entry.
!
Incr I from 0 to 5 do
    Begin
    If .emb[emb$w_hd_entry] EQLU .device_entries[.I]
    Then
	!
	! Indicate that this is a device type entry, by 
	! returning to the calling routine with a true value.
	!
	Return true ;
    End ;

!
! Indicate that this is NOT a device type entry, by returning
! to the calling routine with a false value.
!
Return false ;

End ;	! Routine


ROUTINE VERIFY_DEVICE_CLASS = 
Begin

!++
!
! Functional Description:
!
!	This routine will determine if the device recorded by the 
!	current entry matches any of the selected device class(es). 
!	It return TRUE if the current entry matches or return FALSE 
!	if the current entry does NOT match.
!
! Calling sequence:
!
!	VERIFY_DEVICE_CLASS () 
!
! Input parameters:
!
!	None
!
! Output parameters:
!
!	None 
!
!--

!
! Determine whether this is a unsolicited mscp entry and
! whether to continue.
!
If .emb[emb$w_hd_entry] EQLU EMB$K_LOGMSCP AND
    NOT .include_mask[inc$v_disks] AND
     NOT .include_mask[inc$v_tapes]
Then
    Return false ;

!
! Determine if 'BUS' entries are selected.
!
If ((.exclude_mask[exc$v_buses]) OR
    (.include_mask[inc$v_buses]))
Then
    !
    ! Determine if the device recorded by this entry, matches the 
    ! selected device class.
    !
    Begin
    If  ((.emb[emb$w_hd_entry] EQLU EMB$K_LM AND
	.emb[emb$b_lm_class] EQLU DC$_BUS)) OR

	((.emb[emb$w_hd_entry] EQLU EMB$K_SP AND
	.emb[emb$b_sp_class] EQLU DC$_BUS)) OR

 	(.emb[emb$b_dv_class] EQLU DC$_BUS)
    Then
	!
	! Indicate that this entry does match a selected device 
	! class, by returning to the calling routine with a 
	! true value.
	!
	Return true ;
    End ;

!
! Determine if 'DISK' entries are selected.
!
If ((.exclude_mask[exc$v_disks]) OR
    (.include_mask[inc$v_disks]))
Then
    !
    ! Determine if the device recorded by this entry, matches the
    ! selected device class.
    !
    Begin
    If ((.emb[emb$w_hd_entry] EQLU EMB$K_VM) OR
	(.emb[emb$w_hd_entry] EQLU EMB$K_VD))
    Then
	!
	! Determine if the device recorded by this volume
	! mount or dismount is a 'disk' type device.
	!
	Begin
	If NOT TRANSLATE_CLASS (emb[emb$t_vm_namtxt],DC$_DISK)
	Then
	    !
	    ! Indicate that the device recorded by this entry is 
	    ! not a 'disk', by returning to the calling routine
	    ! with a false value.
	    !
	    Return false 
	Else
	    Return true ;
	End ;	

    If ( ((.emb[emb$w_hd_entry] EQLU EMB$K_LM) AND
	    (.emb[emb$b_lm_class] EQLU DC$_DISK)) OR

	((.emb[emb$w_hd_entry] EQLU EMB$K_SP) AND
	    (.emb[emb$b_sp_class] EQLU DC$_DISK)) OR 

    ! Entry type must be either a device error, timeout, or attention.
    ! 
	(.emb[emb$b_dv_class] EQLU DC$_DISK) )
    Then
	!
	! Indicate that this entry does match a selected 
	! device class, by returning to the calling routine
	! with a true value.
	!
	Return true ;

    !
    ! Determine whether this is disk related unsolicited mscp entry.
    !
    If .emb[emb$w_hd_entry] EQLU EMB$K_LOGMSCP AND
	CH$EQL (2,emb[driver_type],2,CH$PTR(uplit('DISK')))
    Then
	! Yes, return to the calling routine with a true value.
	!
	Return true ;
    End ;

!
! Determine if 'REALTIME' entries are selected.
!
If ((.exclude_mask[exc$v_realtime]) OR
    (.include_mask[inc$v_realtime]))
Then
    !
    ! Determine if the device recorded by this entry, matches the
    ! selected device class.
    !
    Begin
    If .emb[emb$b_dv_class] EQLU DC$_REALTIME
    Then
	!
	! Indicate that this entry does match a selected 
	! device class, by returning to the calling routine
	! with a true value.
	!
	Return true ;
    End ;

!
! Determine if 'SYNCHRONOUS COMMUNICATION' entries are selected.
!
If ((.exclude_mask[exc$v_sync_comm]) OR
    (.include_mask[inc$v_sync_comm]))
Then
    !
    ! Determine if the device recorded by this entry, matches the
    ! selected device class.
    !
    Begin
    If .emb[emb$b_dv_class] EQLU DC$_SCOM
    Then
	!
	! Indicate that this entry does match a selected 
	! device class, by returning to the calling routine
	! with a true value.
	!
	Return true ;
    End ;

!
! Determine if 'TAPE' entries are selected.
!
If ((.exclude_mask[exc$v_tapes]) OR
    (.include_mask[inc$v_tapes]))
Then
    !
    ! Determine if the device recorded by this entry, matches the
    ! selected device class.
    !
    Begin
    If ((.emb[emb$w_hd_entry] EQLU EMB$K_VM) OR
	(.emb[emb$w_hd_entry] EQLU EMB$K_VD))
    Then
	!
	! Determine if the device recorded by this volume
	! mount or dismount is a 'tape' type device.
	!
	Begin
	If NOT TRANSLATE_CLASS (emb[emb$t_vm_namtxt],DC$_TAPE)
	Then
	    !
	    ! Indicate that the device recorded by this entry is 
	    ! not a 'tape', by returning to the calling routine
	    ! with a false value.
	    !
	    Return false 
	Else
	    Return true ;
	End ;	

    If ( ((.emb[emb$w_hd_entry] EQLU EMB$K_LM) AND
	    (.emb[emb$b_lm_class] EQLU DC$_TAPE)) OR

	((.emb[emb$w_hd_entry] EQLU EMB$K_SP) AND
	    (.emb[emb$b_sp_class] EQLU DC$_TAPE)) OR 

    ! Entry type must be either a device error, timeout, or attention.
    ! 
	(.emb[emb$b_dv_class] EQLU DC$_TAPE) )
    Then
	!
	! Indicate that this entry does match a selected 
	! device class, by returning to the calling routine
	! with a true value.
	!
	Return true ;

    !
    ! Determine whether this is tape related unsolicited mscp entry.
    !
    If .emb[emb$w_hd_entry] EQLU EMB$K_LOGMSCP AND
	CH$EQL (2,emb[driver_type],2,CH$PTR(uplit('TAPE')))
    Then
	! Yes, return to the calling routine with a true value.
	!
	Return true ;
    End ;

!
! Determine if 'MISC' entries are selected.
!
!If ((.exclude_mask[exc$v_misc]) OR
!    (.include_mask[inc$v_misc]))
!Then
    !
    ! Determine if the device recorded by this entry, matches the
    ! selected device class.
    !
!    Begin
!    If .emb[emb$b_dv_class] EQLU DC$_MISC
!    Then
	!
	! Indicate that this entry does match a selected 
	! device class, by returning to the calling routine
	! with a true value.
	!
!	Return true ;
!    End ;

!
! Determine if 'LP' entries are selected.
!
!If ((.exclude_mask[exc$v_line_printr]) OR
!    (.include_mask[inc$v_line_printr]))
!Then
    !
    ! Determine if the device recorded by this entry, matches the
    ! selected device class.
    !
!    Begin
!    If .emb[emb$b_dv_class] EQLU DC$_LP
!    Then
	!
	! Indicate that this entry does match a selected 
	! device class, by returning to the calling routine
	! with a true value.
	!
!	Return true ;
!    End ;

!
! Determine if 'JOURNAL' entries are selected.
!
!If ((.exclude_mask[exc$v_journal]) OR
!    (.include_mask[inc$v_journal]))
!Then
    !
    ! Determine if the device recorded by this entry, matches the
    ! selected device class.
    !
!    Begin
!    If .emb[emb$b_dv_class] EQLU DC$_JOURNAL
!    Then
	!
	! Indicate that this entry does match a selected 
	! device class, by returning to the calling routine
	! with a true value.
	!
!	Return true ;
!    End ;

!
! Indicate that this entry does not match any of the selected
! device classes, by returning to the calling routine with a 
! false value.
!
Return false ;
End ;	! Routine


Routine VERIFY_DEVICE = 
Begin

!++
!
!--

Local
    Dev_name,
    Dev_name_length,
    Dev_unit,
    Status ;

Bind
    lm_name_length = emb[emb$t_lm_devnam] : BYTE,
    sp_name_length = emb[emb$t_sp_devnam] : BYTE,
    dv_name_length = emb[emb$t_dv_name] : BYTE ;

!
! Determine whether this is an unsolicited mscp entry and
! return with a false value if so (logmscp entries are not
! applicable to a specific device).
!
If .emb[emb$w_hd_entry] EQLU EMB$K_LOGMSCP
Then
    Return false ;

!
! Determine the type of entry so that the comparison for the
! device class is made against the appropriate field in the entry.
!
! Determine if this a log message entry.
!
If .emb[emb$w_hd_entry] EQLU EMB$K_LM
Then
    !
    ! Entry type is a log message, get the device name, 
    ! name length, and unit number.
    !
    Begin
    Dev_name = emb[emb$t_lm_devnam] + 1 ;
    Dev_name_length = .lm_name_length ;
    Dev_unit = .emb[emb$w_lm_unit] ;
    End 
Else
    !
    ! Determine if this is a log status entry.
    !
    Begin
    If .emb[emb$w_hd_entry] EQLU EMB$K_SP
    Then
	!
	! Entry type is a log status, get the device name, 
	! name length, and unit number.
	!
	Begin
	Dev_name = emb[emb$t_sp_devnam] + 1 ;
	Dev_name_length = .sp_name_length ;
	Dev_unit = .emb[emb$w_sp_unit] ;
	End 
    Else
	!
	! Determine if this a volume mount/dismount entry.
	!
	Begin
	If ((.emb[emb$w_hd_entry] EQLU EMB$K_VM) OR
	    (.emb[emb$w_hd_entry] EQLU EMB$K_VD))
	Then
	    !
	    ! Entry type is a either a volume mount/dismount, get 
	    ! the device name, name length, and unit number.
	    !
	    Begin
	    Dev_name = emb[emb$t_vm_namtxt] ;
	    Dev_name_length = .emb[emb$b_vm_namlng] ;
	    Dev_unit = .emb[emb$w_vm_unit] ;
	    End 
	Else
	    !
	    ! Entry type must be either a device error, device timeount,
	    ! or a device attention, get the device name, name length, and
	    ! unit number.
	    !
	    Begin
	    Dev_name = emb[emb$t_dv_name] + 1 ;
	    Dev_name_length = .dv_name_length ;
	    Dev_unit = .emb[emb$w_dv_unit] ;
	    End ;
	End ;
    End ;

!
! Call the search queue routine to determine if the device recorded by
! this entry matches any of the selected devices.
!
Status = SEARCH_QUEUE (.dev_name,dev_name_length,dev_unit) ;

!
! Return the status from the search queue operation to the 
! calling routine.
!
.Status
End ;	! Routine


GLOBAL ROUTINE TRANSLATE_CLASS (search_name,dev_class) =
Begin

!++
!
! Functional Description:
!
!    This routine searches the device tables to verify the device
!    class and device name. 
!
! Calling Sequence:
!
!    TRANSLATE_CLASS (search_name,dev_class)
!
! Input Parameters:
!
!    Search name = First two characters of device name
!
!    Dev_class = Device class to search for.
!		 
!
!    If the device class is found, then the specified device name
!    is compared against the device names in the device specific table. 
!    Returns true if both match.
!
!    Returns false if device class and/or device name doesn't match. 
!    (This should eventually be	caught and handled by the parse_devname 
!    routine.)
!
!--

EXTERNAL
    Dev_addrs_ptr:	REF VECTOR [,long],
    Dev_class_ptr:	REF VECTOR [,word],
    Max_classes:	REF VECTOR [,byte];

OWN
    I:		BYTE Initial (1), 	! Device address pointer index
    Max_classes_value:  BYTE ;

LOCAL 
    Dev_specific_tbl:	REF VECTOR [,word], ! Device specific table address
    K:  	Initial (0) ;		! Device specific table index

BIND
    Cs_name = CH$PTR (uplit('CS')) ;

!
! Device class ptr is the address of a table that contains supported device 
! classes and pointers to the device class specific information tables. 
!
! The device class specific table contains the supported device names, 
! image name pointers (image that needs to get activated), and transfer 
! address pointers.
!
! This routine locates the matching device class retrieves the device 
! specific pointer and matches the specified device name against those
! in the device specific table.
!
! Loop through all of the device class entries.
!
Max_classes_value = max_classes[0] ;

Incr I from 1 to .max_classes_value do
    Begin
    If .dev_class_ptr[.I] EQL .dev_class 
    Then 
	Begin
	!
	! Get the address of a device class specific table.
	!
	Dev_specific_tbl = .dev_addrs_ptr[.I] ;

	!
	! Initialize another index for the device class specific table so don't
	! lose the current position. Determine if the contents of the device 
	! name field is valid OR whether the end of the device name entries 
	! in the table has been reached. 
	!
	K = 1 ;
	Until (.K EQL .dev_specific_tbl[0]) do
	    Begin
	    !
	    ! Determine if the selected device name matches any of the
	    ! device names recorded in this table.
	    !
	    If CH$EQL (2, CH$PTR(.search_name), 2, CH$PTR(dev_specific_tbl[.K]))
	    Then
		!
		! The device names match. Using the class dir table index, 
		! get the corresponding device class. 
		!
		Return true ;

	    !
	    ! Update the device name pointer indices.
	    !
	    K = .K + 1 ;
	    End ;
	End ;
    End ;


! 
! The name for the console device 'CSA' is not included in the device name
! tables contained in ERFLIB.TLB. It really is a second device name for
! the RX device which is included in the device tables. There should be
! a table that includes devices like these, however because there is only 
! one at this time, it is checked for explicitly.
!
If CH$EQL (2, CH$PTR(.search_name), 2, cs_name)
Then
    !
    ! This is a 'CS' entry, determine whether the 'CS' device class 
    ! matches the device class being searched for.
    !
    Begin
    If .dev_class EQL DC$_DISK
    Then
	! Indicate that the device class matches by returning with 
	! a true value.
	!
	Return true ;
    End ;


!
! Could not locate a class for this device name.
!
Return false ;

End ;		! Routine


End 
ELUDOM
