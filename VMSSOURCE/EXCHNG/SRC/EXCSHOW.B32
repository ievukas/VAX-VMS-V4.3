MODULE	exch$show				%TITLE 'SHOW verb dispatch routine'
		(
		IDENT = 'V04-000',
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE, NONEXTERNAL=WORD_RELATIVE)
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:	EXCHANGE - Foreign volume interchange facility
!
! ABSTRACT:	SHOW - show internal data structures
!
! ENVIRONMENT:	VAX/VMS User mode
!
! AUTHOR:	CW Hobbs		CREATION DATE: 22-Aug-1982
!
! MODIFIED BY:
!
!
!--

! Include files:
!
MACRO $module_name_string = 'exch$show' %;	! The require file needs to know our module name
REQUIRE 'SRC$:EXCREQ'				! Facility-wide require file
    ;

%SBTTL 'Module table of contents'

! Module table of contents:
!
FORWARD ROUTINE
    exch$show_show
    ;

! EXCHANGE facility routines
!
!EXTERNAL ROUTINE
!    ;

! Equated symbols:
!
!LITERAL
!    ;

! Bound declarations:
!
BIND
    null_string = %ASCID ''
    ;

GLOBAL ROUTINE exch$show_show =	%SBTTL 'exch$show_show'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine shows the mounted volumes.
!
! INPUTS:
!
!	none
!
! IMPLICIT INPUTS:
!
!	exch$a_gbl - pointer to all global data
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	success
!
! SIDE EFFECTS:
!
!	information is displayed on sys$output
!--
$dbgtrc_prefix ('show_show> ');

LOCAL
    volb : $ref_bblock
    ;

! Show VOLBs, volume control blocks, for mounted volumes
!
volb = .exch$a_gbl [excg$a_volb_use_flink];	! Get pointer to first volume
IF .volb EQL exch$a_gbl [excg$a_volb_use_flink]	! If pointer is same as header address, no mounted volumes
THEN
    $exch_signal_return (exch$_novolumes);

! Print the header lines
!
$print_desc (null_string);
$print_lit ('Mounted volumes:');

! Print each mounted volume
!
WHILE .volb NEQ exch$a_gbl [excg$a_volb_use_flink]
DO
    BEGIN
    BIND
	nam  = volb [volb$a_nam] : $ref_bblock;
    LOCAL
	ptr1, ptr2;

    $block_check (2, .volb, volb, 477);
    $print_desc (null_string);

    $print_fao (' !AF', .volb [volb$l_vol_ident_len], volb [volb$t_vol_ident]);

    $print_fao ('!8* volume format:!10* !AF', .volb [volb$l_vol_type_len], volb [volb$t_vol_type]);

    IF .volb [volb$l_devclass] EQL dc$_disk
    THEN
	ptr1 = %ASCID 'disk'
    ELSE IF .volb [volb$l_devclass] EQL dc$_tape
    THEN
	ptr1 = %ASCID 'magtape'
    ELSE
	ptr1 = %ASCID 'unknown';
    IF .volb [volb$v_virtual]
    THEN
	ptr2 = %ASCID '  (virtual volume)'
    ELSE
	ptr2 = null_string;
    $print_fao ('!8* volume class:!11* !AS!AS', .ptr1, .ptr2);

    IF .volb [volb$v_virtual]
    THEN
	$print_fao ('!8* virtual file name:!6* !AF', .nam [nam$b_rsl], .nam [nam$l_rsa])
    ELSE
	$print_fao ('!8* physical device name:   !AF', .volb [volb$l_devnamlen], volb [volb$t_devnam]);

    IF .volb [volb$b_vol_format] EQL volb$k_vfmt_rt11
    THEN
	BEGIN
	$print_fao ('!8* volume size:!12* !UL block!%S', .volb [volb$l_volmaxblock]);
	END;

    IF NOT .volb [volb$v_write]
    THEN
	$print_fao ('!32* volume is write-locked');

    IF .volb [volb$v_read_check]
    THEN
	$print_fao ('!32* /DATA_CHECK=READ is enabled');

    IF .volb [volb$v_write_check]
    THEN
	$print_fao ('!32* /DATA_CHECK=WRITE is enabled');

    volb = .volb [volb$a_flink];		! Move to the next volume
    END;

$print_desc (null_string);

RETURN true;
END;

END
ELUDOM
