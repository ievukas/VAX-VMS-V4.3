%TITLE 'NML Read logging parameter module'
MODULE NML$REALOG (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines for processing the NCP SHOW and LIST
!	LOGGING	commands.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  30-DEC-1979
!
! MODIFIED BY:
!
!	V03-007	MKP0013		Kathy Perko	12-April-1984
!		Add area 1 fix to nodes displayed in logging databases.
!
!	V03-006	MKP0012		Kathy Perko	21-Mar-1984
!		Don't open permanent database if it's not a permanent database
!		operation.
!
!	V03-006	MKP0011		Kathy Perko	5-Aug-1983
!		Convert node permanent database to multiple ISAM keys to make it
!		faster.
!
!	V03-006	MKP0010		Kathy Perko	23-Nov-1982
!		Add module as a source for events.
!
!	V03-005	MKP0009		Kathy Perko	18-Oct-1982
!		Leave permanent database files open until LIST command is
!		finished.  This avoids opening and closing files (notably
!		the node file for LIST KNOWN LOGGING) several times.
!		
!	V03-004	MKP0008		Kathy Perko	12-Oct-1982
!		Report logging events even if executor address is zero.
!		This allows events to come out for nodes with only PSI.
!
!	V03-003	MKP0007		Kathy Perko	20-Sept-1982
!		Redesign the logging database so that, when the executor
!		node is the sink node, it is stored with a node address of
!		zero.  LIST LOGGING translates this to the real address of
!		the executor node.  Storing the executor node address this
!		way allows the logging data base to be transportable to other
!		nodes.
!
!	V03-002	MKP0006		Kathy Perko	10-July-1982
!		Expand NML$GET_ENTITY_IDS to get entity's with qualifiers.
!
!	V03-001	MKP0005		Kathy Perko	22-May-1982
!		Change NETACP QIO interface to double search key and
!		add X-25 stuff.
!
!	V02-004	MKP0004		Kathy Perko	01-Dec-1981
!		Supply P3 parameter for calls to NML$NETQIO so that
!		debug logging only dumps pertinent contents of P4 buffer.
!
!	V02-003	MKP0003		Kathy Perko	28-Nov-1981
!		Fix read summary and events for the executor so
!		that the parameters are returned in numerical order.
!
!	V02-002	MKP0002		Kathy Perko	16-Nov-1981
!		Add circuits to logging source ids.
!
!	V02-001	MKP001		Kathy Perko	24-July-1981
!		Change parameters in call to NML$GET_ENTITY_IDS for
!		new QIO interface to NETACP.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    nml$readknolog	: NOVALUE,
    nml$readactlog	: NOVALUE,
    nml$readlogging	: NOVALUE,
    nml_lisknosnk	: NOVALUE,
    nml_shoknosnk	: NOVALUE,
    nml_lislogsnk	: NOVALUE,
    nml_shologsnk	: NOVALUE,
    nml_readexesnk	: NOVALUE,
    nml_lisexesnk,
    nml_shoexesnk,
    nml_read_exec_sink	: NOVALUE,
    nml_readsnknod	: NOVALUE,
    nml_format_sink_in_NICE: NOVALUE,
    nml_readlogsrc	: NOVALUE;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! EQUATED SYMBOLS:
!

!
! OWN STORAGE:
!

!
! Executor sink node address.
!
OWN
    NML$W_EXEADR : WORD;
!
! Entity buffer and descriptor.
!
OWN
    NML$T_ENTITYBUF : BBLOCK [NML$K_ENTBUFLEN],
    NML$Q_ENTITYDSC : DESCRIPTOR;

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;				! Define common external data

EXTERNAL
    nml$gb_ncp_version;

EXTERNAL ROUTINE
    NML$OPENFILE,
    NMA$SEARCHFLD,
    NML$ADDMSGPRM,
    NML$BLD_REPLY,
    NML$BLDP2,
    NML$ERROR_1,
    NML$GETEXEADR,
    NML$GETINFTABS,
    NML$GET_ENTITY_IDS,
    NML$GETNODNAM,
    NML$GETNXTEVT,
    NML$GETNXTSNK,
    NML$GETCOMFILTERS,
    NML$MATCHRECORD,
    NML$NETQIO,
    NML$SEND;


%SBTTL 'NML$READKNOLOG  Read known logging parameters'
GLOBAL ROUTINE NML$READKNOLOG (ENT, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

!
! Return data base information for console, file, and monitor sinks.
!
    NML$READLOGGING (.ENT, .INF, NMA$C_SNK_CON, 0);
    NML$READLOGGING (.ENT, .INF, NMA$C_SNK_FIL, 0);
    NML$READLOGGING (.ENT, .INF, NMA$C_SNK_MON, 0);

    END;				! End of NML$READKNOLOG

%SBTTL 'NML$READACTLOG  Read active logging parameters'
GLOBAL ROUTINE NML$READACTLOG (ENT, INF, DUM1, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all active logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	DUM1		Not used.
!	DUM2		Not used.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	BUFEND,
	LISDSC : DESCRIPTOR,
	MSGSIZE,
	PTR,
	SNK,
	STATUS,
	STRTFLG;

    STRTFLG = FALSE;

    WHILE NML$GET_ENTITY_IDS (NML$C_SINK, NMA$C_ENT_ACT, 0, .STRTFLG, LISDSC) DO
	BEGIN

	STRTFLG = TRUE;

	PTR = .LISDSC [DSC$A_POINTER];
	BUFEND = .LISDSC [DSC$A_POINTER] + .LISDSC [DSC$W_LENGTH];

	WHILE .PTR LSSA .BUFEND DO
	    BEGIN

	    SNK = .(.PTR)<0,32>;
	    PTR = .PTR + 4;

	    IF .(.PTR)<0,32> NEQU NMA$C_STATE_OFF
	    THEN
		NML$READLOGGING (.ENT, .INF, .SNK, 0);

	    PTR = .PTR + 4;

	    END;
	END;

    END;				! End of NML$READACTLOG

%SBTTL 'NML$READLOGGING  Read logging parameters'
GLOBAL ROUTINE NML$READLOGGING (ENT, INF, SNK, DUM2) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Read logging parameters from the peramanent or volatile data bases.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!	DUM2		Not used.
!
!--

BEGIN

MAP
    nml$gb_options : BBLOCK [1];

!
! Open the node data base file.
!
IF .nml$gb_options [nma$v_opt_per] THEN
    nml$openfile (nma$c_opn_node, nma$c_opn_ac_ro);

SELECTONEU .inf OF
    SET
    [nml$c_summary,
     nml$c_events]:
	BEGIN
!
! Check parse flags to see if this is for KNOWN SINKS or a single
! sink node.
!
	IF .nml$gl_prs_flgs [nml$v_prs_knosnk] THEN
	    BEGIN
	    nml_readexesnk (.ent, .inf, .snk);
	    !
	    ! Decide if the operation is on the permanent or volatile data
	    ! bases.
	    !
	    IF .nml$gb_options [nma$v_opt_per] THEN
		nml_lisknosnk (.ent, .inf, .snk)
	    ELSE
		nml_shoknosnk (.ent, .inf, .snk);
	    END
	ELSE
	    BEGIN
	    IF .nml$gl_prs_flgs [nml$v_prs_exesnk] THEN
		nml_readexesnk (.ent, .inf, .snk)
	    ELSE
		BEGIN
		!
		! The NICE command is requesting logging information about
		! a remote sink node.  Now, call the appropriate routine to
		! get the information from the permanent or volatile databases.
		!
		IF .nml$gb_options [nma$v_opt_per] THEN
		    nml_lislogsnk (.ent,
				   .inf,
				   .snk,
				   .nml$gw_evtsnkadr)
		ELSE
		    nml_shologsnk (.ent,
				   .inf,
				   .snk,
				   .nml$gw_evtsnkadr);
		END;
	    END;
	END;

    [nml$c_status,
    nml$c_characteristics]:
	nml_readexesnk (nml$c_sink, .inf, .snk);

    [OTHERWISE]:
	nml$error_1 (nma$c_sts_fun);

    TES;	    
!
! Close the node data base file later, when the whole command has been
! completed to avoid multiple opening and closing of the same file.
!
END;				! End of NML$READLOGGING

%SBTTL 'NML_LISKNOSNK  List known logging sink node parameters'
ROUTINE NML_LISKNOSNK (ENT, INF, SNK) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	BLKDSC : DESCRIPTOR,		! Event parameter descriptor
	KEY    : WORD,			! Record key
	RECDSC : DESCRIPTOR,		! Record descriptor
	SNKADR : WORD;			! Sink node address

!
! List parameters for all sink nodes for this sink type.
!
    KEY = 0;
    WHILE NML$MATCHRECORD (.NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID],
			NML$GQ_RECBFDSC,
			KEY,
			.NML$AB_ENTITYDATA [.ENT, EIT$W_KEY], 0, 0,
			0, 0, 0,		! No qualifier
			RECDSC) DO
	BEGIN
!
! Find the sink node address.
!
	BLKDSC [DSC$A_POINTER] = 0;
	IF NMA$SEARCHFLD (RECDSC,
			  NMA$C_PCLO_SIN,
			  BLKDSC [DSC$W_LENGTH],
			  BLKDSC [DSC$A_POINTER])
	THEN
	    BEGIN

	    SNKADR = .(.BLKDSC [DSC$A_POINTER])<0,16>;
!
! Find the event parameter.
!
	    BLKDSC [DSC$A_POINTER] = 0;
	    IF NMA$SEARCHFLD (RECDSC,
			      NMA$C_PCLO_EVE,
			      BLKDSC [DSC$W_LENGTH],
			      BLKDSC [DSC$A_POINTER])
	    THEN
		BEGIN

		NML_READSNKNOD (.ENT, .SNK, .SNKADR, BLKDSC);

		END;
	    END;

	KEY = .KEY + 1;

	END;

    END;				! End of NML_LISKNOSNK

%SBTTL 'NML_SHOKNOSNK  Show known logging sink node parameters'
ROUTINE NML_SHOKNOSNK (ENT, INF, SNK) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	BUFEND,
	LISDSC : DESCRIPTOR,
	MSGSIZE,
	PTR,
	SNKADR : WORD,			! Sink node address
	STATUS,
	STRTFLG;

    STRTFLG = FALSE;

    WHILE NML$GET_ENTITY_IDS (.ENT, NMA$C_ENT_KNO, 0, .STRTFLG, LISDSC) DO
	BEGIN

	PTR = .LISDSC [DSC$A_POINTER];
	BUFEND = .LISDSC [DSC$A_POINTER] + .LISDSC [DSC$W_LENGTH];

	WHILE .PTR LSSA .BUFEND DO
	    BEGIN

	    STRTFLG = TRUE;

	    SNKADR = .(.PTR)<0,16>;

	    NML_SHOLOGSNK (.ENT, .INF, .SNK, .SNKADR);

	    PTR = .PTR + 4;

	    END;
	END;

    END;				! End of NML_SHOKNOSNK

%SBTTL 'NML_LISLOGSNK  List logging sink node parameters'
ROUTINE NML_LISLOGSNK (ENT, INF, SNK, SNKADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!	SNKADR		Sink node address.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SNKADR : WORD;

    LOCAL
	BLKDSC : DESCRIPTOR,		! Event parameter descriptor
	KEY    : WORD,			! Record key
	RECDSC : DESCRIPTOR;		! Record descriptor
!
! List parameters for the specified sink node.
!
    KEY = 0;
    IF NML$MATCHRECORD (.NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID],
		     NML$GQ_RECBFDSC,
		     KEY,
		     .NML$AB_ENTITYDATA [.ENT, EIT$W_KEY], 2, SNKADR,
		     0, 0, 0,		! No qualifier
		     RECDSC)
    THEN
	BEGIN
!
! Find the event parameter.
!
	BLKDSC [DSC$A_POINTER] = 0;
	IF NMA$SEARCHFLD (RECDSC,
			  NMA$C_PCLO_EVE,
			  BLKDSC [DSC$W_LENGTH],
			  BLKDSC [DSC$A_POINTER])
	THEN
	    NML_READSNKNOD (.ENT, .SNK, .SNKADR, BLKDSC);

	END;

    END;				! End of NML_LISLOGSNK

%SBTTL 'NML_SHOLOGSNK  Show logging sink node parameters'
ROUTINE NML_SHOLOGSNK (ENT, INF, SNK, SNKADR) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns volatile data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!	SNKADR		Sink node address.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SNKADR : WORD;

    LOCAL
	BLKDSC   : DESCRIPTOR,		! Event parameter descriptor
	DUMDSC   : REF DESCRIPTOR,	! Dummy descriptor for table
	NFBDSC   : REF DESCRIPTOR,
	P2BUFFER : VECTOR [NML$K_P2BUFLEN, BYTE],
	P2DSC    : DESCRIPTOR,
	P3,
	PTR;

    NML$GETINFTABS (.ENT, .INF, NFBDSC, DUMDSC, 0);
    P2DSC [DSC$W_LENGTH] = 80;
    P2DSC [DSC$A_POINTER] = P2BUFFER;
    NML$BLDP2 (0, .SNKADR, -1, 0, P2DSC, P2DSC);

    IF NML$NETQIO (.NFBDSC, P2DSC, P3, NML$GQ_QIOBFDSC)
    THEN
	BEGIN

	PTR = .NML$GQ_QIOBFDSC [DSC$A_POINTER];
	BLKDSC [DSC$W_LENGTH] = .(.PTR)<0,16>;
	BLKDSC [DSC$A_POINTER] = .PTR + 2;
	NML_READSNKNOD (.ENT, .SNK, .SNKADR, BLKDSC);

	END;

    END;				! End of NML_SHOLOGSNK

%SBTTL 'NML_READEXESNK  List executor sink node parameters'
ROUTINE NML_READEXESNK (ENT, INF, SNK) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!
!--

    BEGIN

    MAP
	NML$GB_OPTIONS : BBLOCK [1];

    LOCAL
	ENTDSC    : DESCRIPTOR,		! Entity descriptor
	MSGFLG,				! Response message flag
	MSGSIZE,			! Message size
	STATUS;				! Temporary status
!
! Set up the entity descriptor.
!
    ENTDSC [DSC$W_LENGTH] = 1;
    ENTDSC [DSC$A_POINTER] = SNK;
!
! Set message flags.
!
    MSGFLG = FALSE;			! No response messages
    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_ENTD_FLD;
    NML$AB_MSGBLOCK [MSB$B_CODE]  = NMA$C_STS_SUC;
    NML$AB_MSGBLOCK [MSB$A_ENTITY] = ENTDSC;
!
! Build the message.
!
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
!
! Decide if the operation is on the permanent or volatile data base.
!
    IF .NML$GB_OPTIONS [NMA$V_OPT_PER]
    THEN
	STATUS = NML_LISEXESNK (.ENT, .INF, .SNK, MSGSIZE)
    ELSE
	STATUS = NML_SHOEXESNK (.ENT, .INF, .SNK, MSGSIZE);

    IF .STATUS
    THEN
	MSGFLG = TRUE;
!
! Send the message.
!
    IF .MSGFLG
    THEN
	NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);

    END;				! End of NML_READEXESNK

%SBTTL 'NML_LISEXESNK  List executor sink node parameters'
ROUTINE NML_LISEXESNK (ENT, INF, SNK, MSGSIZE) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!	MSGSIZE		Address of message byte count (current and result).
!
!--

BEGIN

LOCAL
    FLDADR,
    FLDSIZE,
    MSGFLG,				! Response message flag
    SRCPTR,				! Source block pointer
    BLKDSC    : DESCRIPTOR,		! Event parameter descriptor
    KEY       : WORD,		! Record key
    RECDSC    : DESCRIPTOR,		! Record descriptor
    EXEC_ADDR;

MSGFLG = FALSE;			! No response messages
!
! Add executor parameters to the output message.
!
KEY = 0;
IF NML$MATCHRECORD (.NML$AB_ENTITYDATA [NML$C_SINK, EIT$B_FILEID],
		     NML$GQ_RECBFDSC,
		     KEY,
		     .NML$AB_ENTITYDATA [NML$C_SINK, EIT$W_KEY], 1, SNK,
		     0, 0, 0,		! No qualifier
		     RECDSC)
THEN
    BEGIN
    MSGFLG = TRUE;			! Set response message flag
    SELECTU .INF OF
	SET
	[NML$C_SUMMARY,
	 NML$C_STATUS]:
	    BEGIN
	    !
	    ! If state parameter is defined then add it to the message.
	    !
	    FLDADR = 0;
	    IF NMA$SEARCHFLD (RECDSC,
			      NMA$C_PCLO_STA,
			      FLDSIZE,
			      FLDADR)
	    THEN
		NML$ADDMSGPRM (NML$GQ_SNDBFDSC,
				   .MSGSIZE,
				   NMA$C_PCLO_STA,
				   NMA$M_PTY_COD OR 1,
				   1,
				   .FLDADR);
	    END;

	[NML$C_SUMMARY,
	 NML$C_CHARACTERISTICS]:
	    BEGIN
	    !
	    ! If sink name parameter is defined then add it to the message.
	    !
	    FLDADR = 0;
	    IF NMA$SEARCHFLD (RECDSC,
			      NMA$C_PCLO_LNA,
			      FLDSIZE,
			      FLDADR)
	    THEN
		NML$ADDMSGPRM (NML$GQ_SNDBFDSC,
				   .MSGSIZE,
				   NMA$C_PCLO_LNA,
				   NMA$M_PTY_ASC,
				   .FLDSIZE,
				   .FLDADR);
	    END;
	TES;
    END;
!
! For SUMMARY and EVENT reports, add the sink node ID.
!
IF .INF EQL NML$C_SUMMARY OR
   .INF EQL NML$C_EVENTS THEN
	NML_READ_EXEC_SINK (.INF, .MSGSIZE);

!
! The executor address is zero in the permanent data base.  This allows
! the database to be transportable to other nodes but not log
! events to the old executor.
!
EXEC_ADDR = 0;
SELECTONEU .INF OF
    SET
    [NML$C_EVENTS,
     NML$C_SUMMARY]:
	BEGIN
	KEY = 0;
	IF NML$MATCHRECORD (.NML$AB_ENTITYDATA [.ENT, EIT$B_FILEID],
			NML$GQ_RECBFDSC,
			KEY, 
			.NML$AB_ENTITYDATA [.ENT, EIT$W_KEY], 2, EXEC_ADDR,
			0, 0, 0,		! No qualifier
			RECDSC)
	THEN
	    BEGIN
	    !
	    ! Find the event parameter.
	    !
	    BLKDSC [DSC$A_POINTER] = 0;
	    IF NMA$SEARCHFLD (RECDSC,
			      NMA$C_PCLO_EVE,
			      BLKDSC [DSC$W_LENGTH],
			      BLKDSC [DSC$A_POINTER])
	    THEN
		BEGIN
		SRCPTR = 0;
		WHILE NML$GETNXTSNK (BLKDSC, .SNK, SRCPTR) DO
		    BEGIN
		    MSGFLG = TRUE;	! Set response message flag
		    !
		    ! Get each event class.
		    !
		    NML_READLOGSRC (BLKDSC, .SRCPTR, .MSGSIZE);
		    END;
		END;
	    END;
	END;
    TES;
RETURN .MSGFLG
END;				! End of NML_LISEXESNK

%SBTTL 'NML_SHOEXESNK  Show executor sink node parameters'
ROUTINE NML_SHOEXESNK (ENT, INF, SNK, MSGSIZE) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns permanent data base information for 
!	all logging sinks.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	INF		Information type code.
!	SNK		Sink type code.
!	MSGSIZE		Address message byte count (current and result).
!
!--

BEGIN

LOCAL
    DUMDSC   : REF DESCRIPTOR,
    MSGFLG,				! Response message flag
    NFBDSC   : REF DESCRIPTOR,
    P2BUFFER : VECTOR [NML$K_P2BUFLEN, BYTE],
    P2DSC    : DESCRIPTOR,
    P3,
    PTR,				! Parameter buffer pointer
    SRCPTR,				! Source block pointer
    BLKDSC   : DESCRIPTOR,		! Event parameter descriptor
    STATUS;

MSGFLG = FALSE;			! No response messages
NML$GETINFTABS (NML$C_SINK, .INF, NFBDSC, DUMDSC, 0);
P2DSC [DSC$W_LENGTH] = NML$K_P2BUFLEN;
P2DSC [DSC$A_POINTER] = P2BUFFER;
NML$BLDP2 (0, .SNK, -1, 0, P2DSC, P2DSC);

STATUS = NML$NETQIO (.NFBDSC, P2DSC, P3, NML$GQ_QIOBFDSC);

IF NOT .STATUS
THEN
    BEGIN
    IF .STATUS NEQ NML$_STS_CMP
    THEN
	BEGIN
	NML_READ_EXEC_SINK (.INF, .MSGSIZE);
	NML$BLD_REPLY (NML$AB_MSGBLOCK, .MSGSIZE);
	RETURN TRUE;
	END;
    END;

IF .STATUS
THEN
    BEGIN
    MSGFLG = TRUE;
    PTR = .NML$GQ_QIOBFDSC [DSC$A_POINTER];
    SELECTU .INF OF
	SET
	[NML$C_SUMMARY,
	 NML$C_STATUS]:
	    IF .(.PTR)<0,32> NEQU -1
	    THEN
		NML$ADDMSGPRM (NML$GQ_SNDBFDSC,
				   .MSGSIZE,
				   NMA$C_PCLO_STA,
				   NMA$M_PTY_COD OR 1,
				   1,
				   .PTR);

	[ALWAYS]:
	    PTR = .PTR + 4;

	[NML$C_SUMMARY,
	 NML$C_CHARACTERISTICS]:
	    IF .(.PTR)<0,16> NEQU 0
	    THEN
		NML$ADDMSGPRM (NML$GQ_SNDBFDSC,
				   .MSGSIZE,
				   NMA$C_PCLO_LNA,
				   NMA$M_PTY_ASC,
				   .(.PTR)<0,16>,
				   .PTR + 2);
	TES;
    END;
!
! For SUMMARY and EVENT reports, add the sink node ID.
!
IF .INF EQL NML$C_SUMMARY OR
   .INF EQL NML$C_EVENTS THEN
	NML_READ_EXEC_SINK (.INF, .MSGSIZE);

!
! List logging events for all sources for this sink node.
!
SELECTONEU .INF OF
    SET
    [NML$C_EVENTS, NML$C_SUMMARY]:
	BEGIN
	NML$GETINFTABS (NML$C_LOGGING, .INF, NFBDSC, DUMDSC, 0);
	P2DSC [DSC$W_LENGTH] = NML$K_P2BUFLEN;
	P2DSC [DSC$A_POINTER] = P2BUFFER;
	NML$BLDP2 (0, .NML$W_EXEADR, -1, 0, P2DSC, P2DSC);

	STATUS = NML$NETQIO (.NFBDSC, P2DSC, P3, NML$GQ_QIOBFDSC);

	IF .STATUS THEN
	    BEGIN
	    PTR = .NML$GQ_QIOBFDSC [DSC$A_POINTER];
	    BLKDSC [DSC$W_LENGTH] = .(.PTR)<0,16>;
	    BLKDSC [DSC$A_POINTER] = .PTR + 2;
	    SRCPTR = 0;
	    WHILE NML$GETNXTSNK (BLKDSC, .SNK, SRCPTR) DO
		BEGIN
		NML_READLOGSRC (BLKDSC, .SRCPTR, .MSGSIZE);
		MSGFLG = TRUE;
		END;
	    END
	ELSE
	    BEGIN
	    IF .STATUS NEQ NML$_STS_CMP
	    THEN
		BEGIN
		NML$BLD_REPLY (NML$AB_MSGBLOCK, .MSGSIZE);
		MSGFLG = TRUE;
		END;
	    END;
	END;
    TES;
RETURN .MSGFLG
END;				! End of NML_SHOEXESNK

%SBTTL 'NML_READ_EXEC_SINK  Read sink node ID'
ROUTINE NML_READ_EXEC_SINK (INF, MSGSIZE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine adds the sink node id to the NICE response
!	message.
!
! FORMAL PARAMETERS:
!	INF		Information type code.
!	MSGSIZE		Address message byte count (current and result).
!
!--

BEGIN

LOCAL
    STATUS;				! Routine completion status

!
! Get executor node address.
!
STATUS = NML$GETEXEADR (NML$W_EXEADR);
!
! Add the sink node id to the message if it is required.
!
IF .STATUS THEN
    BEGIN
    SELECTONEU .INF OF
	SET
	[NML$C_EVENTS,
	NML$C_SUMMARY]:
	    BEGIN
	    nml_format_sink_in_NICE (.nml$w_exeadr, .msgsize);
	    END;
	TES;
    END;
END;		! End of NML_READ_EXEC_SINK

%SBTTL 'NML_READSNKNOD  List logging sink node parameters'
ROUTINE NML_READSNKNOD (ENT, SNK, SNKADR, BLKDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Read sink node information from the permanent or volatile data bases.
!
! FORMAL PARAMETERS:
!
!	ENT		Entity type code.
!	SNK		Sink type code.
!	SNKADR		Address of sink node.
!	BLKDSC		Event parameter descriptor.
!
!--

BEGIN

MAP
    NML$GB_OPTIONS : BBLOCK [1],
    SNKADR : WORD,
    BLKDSC : REF DESCRIPTOR;

LOCAL
    ENTDSC    : DESCRIPTOR,		! Entity descriptor
    EVTPTR    : REF BBLOCK,		! Pointer to event block
    MSGFLG,
    MSGSIZE,			! Message size
    MSKBUF    : VECTOR [8, BYTE],	! Event mask buffer
    SRCPTR    : REF BBLOCK;		! Pointer to source block

!
! If this sink node is the executor node then skip it.  Note that the
! executor node address in the permanent data base is stored as zero.
! This allows the logging database to be transportable to other nodes.
!
IF .NML$GB_OPTIONS [NMA$V_OPT_PER] THEN
    BEGIN
    IF .SNKADR EQL 0 THEN
	RETURN;
    END
ELSE
    IF .SNKADR EQLU .NML$W_EXEADR THEN
	RETURN;
!
! Set up the entity descriptor.
!
ENTDSC [DSC$W_LENGTH] = 1;
ENTDSC [DSC$A_POINTER] = SNK;
!
! Set message flags.
!
MSGFLG = FALSE;			! No response messages
NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_ENTD_FLD;
NML$AB_MSGBLOCK [MSB$B_CODE]  = NMA$C_STS_SUC;
NML$AB_MSGBLOCK [MSB$A_ENTITY] = ENTDSC;
!
! Build the message.
!
NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);
!
! Add sink node id parameter to message.
!
nml_format_sink_in_NICE (.snkadr, msgsize);
!
! List logging for all sources for this sink node.
!
SRCPTR = 0;
WHILE NML$GETNXTSNK (.BLKDSC, .SNK, SRCPTR) DO
    BEGIN
    MSGFLG = TRUE;			! Set response message flag
    !
    ! Get each event class.
    !
    NML_READLOGSRC (.BLKDSC, .SRCPTR, MSGSIZE);
    END;
!
! Send the message.
!
IF .MSGFLG THEN
    NML$SEND (NML$AB_SNDBUFFER, .MSGSIZE);
 
RETURN NML$_STS_SUC
END;				! End of NML_READSNKNOD

%SBTTL 'nml_format_sink_in_NICE   Format sink node for NICE response message'
ROUTINE nml_format_sink_in_NICE (sink_addr, msgsize) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Format a sink node from the volatile or permanent logging database
!	for a NICE response message.
!
! FORMAL PARAMETERS:
!
!	SINK_ADDR	Node address of sink node.
!	MSGSIZE		Address of current response message size.
!
!--

BEGIN

MAP
    sink_addr : WORD;

LOCAL
    cm_count,				! Coded multiple field count
    prmbuffer : VECTOR [11, BYTE],	! Parameter buffer
    ptr,				! Parameter buffer pointer
    snkbfdsc  : DESCRIPTOR,		! Sink node name descriptor
    snklen,				! Sink node name length
    snkbuffer : VECTOR [6, BYTE];	! Buffer for sink node name

!
! Get sink node name.
!
snkbfdsc [dsc$w_length] = 6;
snkbfdsc [dsc$a_pointer] = snkbuffer;
nml$getnodnam (.sink_addr, snkbfdsc, snklen);
!
! Add sink node id parameter to message.
!
ptr = prmbuffer;
cm_count = 1;

CH$WCHAR_A (2, ptr); 			! Move sink node address
!
! If the NCP is Phase III, zero out area numbers in the executor's
! area so they make more sense.  Node numbers outside the executor's
! area will be displayed without formatting the area number and will,
! therefore not be very useful, but they will be unique.
!
IF CH$RCHAR (nml$gb_ncp_version) LEQ 3 THEN
    BEGIN
    MAP
	nml$w_exeadr: BBLOCK [2],
	sink_addr: BBLOCK [2];

    IF .nml$w_exeadr [nma$v_area] EQL .sink_addr [nma$v_area] THEN
	sink_addr [nma$v_area] = 0;
    END;
ptr = CH$MOVE (2, sink_addr, .ptr);
IF .snklen NEQU 0 THEN			! Move sink node name if present
    BEGIN
    CH$WCHAR_A (nma$m_pty_asc, ptr);
    CH$WCHAR_A (.snklen, ptr);
    ptr = CH$MOVE (.snklen, snkbuffer, .ptr);
    cm_count = 2;
    END;
!
! Add coded multiple sink node id to message.
!
nml$addmsgprm (nml$gq_sndbfdsc,
	       .msgsize,
	       nma$c_pclo_sin,
	       nma$m_pty_cmu OR .cm_count,
	       .ptr - prmbuffer,
	       prmbuffer);
END;		! End of format_sink_in_NICE

%SBTTL 'NML_READLOGSRC  List logging parameters'
ROUTINE NML_READLOGSRC (DATDSC, SRCPTR, MSGSIZE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Read logging source information from the permanent or volatile data
!	bases.
!
! FORMAL PARAMETERS:
!
!	DATDSC		Descriptor of event data.
!	SRCPTR		Pointer to event source block.
!	MSGSIZE		Current response message size.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

MAP
    srcptr : REF BBLOCK;

LOCAL
    cm_count,			! Coded multiple field count
    evtptr    : REF BBLOCK,		! Pointer to event block
    mskbuf    : VECTOR [8, BYTE],	! Event mask buffer
    msklen,				! Event mask length
    prmbuffer : VECTOR [64, BYTE],	! Parameter buffer
    ptr,				! Parameter buffer pointer
    snkbfdsc  : DESCRIPTOR,		! Sink node name descriptor
    snklen,				! Sink node name length
    snkbuffer : VECTOR [6, BYTE],	! Buffer for sink node name
    sink_addr : BBLOCK [2];		! Address of sink node

!
! Get each event class.
!
evtptr = 0;
WHILE nml$getnxtevt (.srcptr, evtptr) DO
    BEGIN
    ptr = prmbuffer;
    cm_count = 1;
    !
    ! Get source type.
    !
    CH$WCHAR_A (nma$m_pty_cod  OR 1, ptr);
    CH$WCHAR_A (.srcptr [src$b_srctype], ptr);
    !
    ! Get source id.
    !
    SELECTONEU .srcptr [src$b_srctype] OF
	SET
	[nma$c_ent_lin, nma$c_ent_cir, nma$c_ent_mod]:
	    BEGIN
	    CH$WCHAR_A (nma$m_pty_asc, ptr);
	    CH$WCHAR_A (.srcptr [src$b_idlength], ptr);
	    ptr = CH$MOVE (.srcptr [src$b_idlength],
			   srcptr [src$t_id],
			   .ptr);
	    cm_count = .cm_count + 1;
	    END;
	[nma$c_ent_nod]:
	    BEGIN
	    !
	    ! Get sink node name.
	    !
	    snkbfdsc [dsc$w_length] = 6;
	    snkbfdsc [dsc$a_pointer] = snkbuffer;
	    nml$getnodnam (.srcptr [src$w_nodadr], snkbfdsc, snklen);
	    CH$WCHAR_A (2, ptr);
	    sink_addr [nma$w_node] = .srcptr [src$w_nodadr];
	    !
	    ! If NCP is Phase III, and the node is in the executor's
	    ! area, clear the area number.  Nodes outside the executor's
	    ! area will be BIG numbers.
	    !
	    IF CH$RCHAR (nml$gb_ncp_version) LEQ 3 THEN
		BEGIN
		MAP
		    nml$w_exeadr: BBLOCK [2];
		IF .sink_addr [nma$v_area] EQL .nml$w_exeadr [nma$v_area] THEN
		    sink_addr [nma$v_area] = 0;
		END;
	    ptr = CH$MOVE (2, sink_addr [nma$w_node], .ptr);
	    cm_count = .cm_count + 1;
	    IF .snklen NEQU 0 THEN	! Move sink node name if present
		BEGIN
		CH$WCHAR_A (nma$m_pty_asc, ptr);
	    	CH$WCHAR_A (.snklen, ptr);
	    	ptr = CH$MOVE (.snklen, snkbuffer, .ptr);
		cm_count = .cm_count + 1;
		END;
	    END;
	TES;
    !
    ! Get event class.
    !
    CH$WCHAR_A (2, ptr);
    ptr = CH$MOVE (2, evtptr [evt$w_class], .ptr);
    cm_count = .cm_count + 1;
    !
    ! Get event mask.
    !
    nml$getcomfilters (.datdsc,
		       .evtptr,
		       .srcptr [src$b_sinktype],
		       mskbuf,
		       msklen);
    CH$WCHAR_A (%X'20', ptr);
    CH$WCHAR_A (.msklen, ptr);
    ptr = CH$MOVE (.msklen, mskbuf, .ptr);
    cm_count = .cm_count + 1;
    !
    ! Add the parameter to the message.
    !
    nml$addmsgprm (nml$gq_sndbfdsc,
		   .msgsize,
		   nma$c_pclo_eve,
		   nma$m_pty_cmu OR .cm_count,
		   .ptr - prmbuffer,
		   prmbuffer);

    END;
END;				! End of NML_READLOGSRC

END					! End of module

ELUDOM
