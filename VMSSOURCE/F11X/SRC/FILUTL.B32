MODULE FILUTL (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This module contains routines used to access random files by the
!	ACP itself.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  22-May-1978  19:13
!
! MODIFIED BY:
!
!	V03-015	CDS0010		Christian D. Saether	14-Aug-1984
!		Modify handling of extension fcbs.
!
!	V03-014	CDS0009		Christian D. Saether	 6-Aug-1984
!		Correctly deal with serializing on a lock we already had.
!		Add handler for the open_file routine to correctly
!		clean up after errors in the open_file routine.
!
!	V03-013	LMP0275		L. Mark Pilant,		25-Jul-1984  15:50
!		Don't try to delete an uninitialized ACL.
!
!	V03-012	CDS0008		Christian D. Saether	19-Apr-1984
!		Use REFCNT instead of ACNT.
!		Modify access arbitration.
!
!	V03-011	ACG0415		Andrew C. Goldstein,	5-Apr-1984  21:33
!		Interface change to ACL_DELETEACL
!
!	V03-010	ACG0408		Andrew C. Goldstein,	20-Mar-1984  17:47
!		Make APPLY_RVN and DEFAULT_RVN macros
!
!	V03-009	CDS0007		Christian D. Saether	23-Feb-1984
!		Eliminate use of FLUSH_LOCK_BASIS.
!		Replace with TOSS_CACHE_DATA.
!
!	V03-008	CDS0006		Christian D. Saether	18-Jan-1984
!		Modify interface to APPLY_RVN.
!
!	V03-007	CDS0005		Christian D. Saether	30-Dec-1983
!		Use L_NORM linkage and BIND_COMMON macro.
!
!	V03-006	CDS0004		Christian D. Saether	 7-Dec-1983
!		Remove call to REMOVE_FCB and do the REMQUE inline.
!
!	V03-005	CDS0003		Christian D. Saether	14-Sep-1983
!		Modify SERIAL_FILE interface.  Use RELEASE_SERIAL_LOCK
!		routine to dequeue serialization lock.
!
!	V03-004	CDS0002		Christian D. Saether	19-Jun-1983
!		Until further work is done with buffer caching,
!		flush all buffers from the cache when closing internal file.
!		This fixes a bug where getting location information for
!		VBN placement leaves a header in the cache and the file
!		serialization lock is released.
!
!	V03-003	CDS0001		Christian D. Saether	 5-May-1983
!		Add xqp synchronization of file processing (SERIAL_FILE)
!		and xqp access arbitration (ACCESS_LOCK) calls.
!
!	V03-02	LMP0059		L. Mark Pilant,		7-Jan-1983  12:05
!		Always create and link in an FCB when accessing a file.  This
!		eliminates a lot of special case handling.
!
!	V03-001	LMP0037		L. Mark Pilant,		28-Jun-1982  15:10
!		Remove the addressing mode module switch.
!
!	V02-006	ACG0259		Andrew C. Goldstein,	27-Jan-1982  20:38
!		Change to longword external addressing
!
!	V02-004	LMP0003		L. Mark Pilant,		 8-Dec-1981  11:31
!		Make sure the primary window was actually created.  It may
!		not have been due to the byte limit quota being exceeded.
!
!	B0104	ACG0112		Andrew C. Goldstein,	15-Jan-1980  22:55
!		Limit data read to file's EOF
!
!	B0103	ACG0092		Andrew C. Goldstein,	6-Dec-1979  19:23
!		Set proper RVN on file being opened
!
!	B0102	ACG0008		Andrew C. Goldstein,  18-Dec-1978  22:57
!	Add map only access for placement use, support multi-header files
!
!	B0101	ACG0003		Andrew C. Goldstein,  10-Nov-1978  19:01
!	Add multi-volume support, restrict to single header files
!
!	B0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  20:00
!	Previous revision history moved to [F11B.SRC]F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	OPEN_FILE	: L_NORM,	! open a file
	OPEN_FILE_HANDLER : L_NORM,	! error handling for open_file
	READ_DATA	: L_NORM,	! read data from file
	CLOSE_FILE	: L_NORM NOVALUE; ! close a file

GLOBAL ROUTINE OPEN_FILE (FID, WRITE) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine opens the file of the given file ID. It constructs an
!	FCB and window and returns the address of the latter.
!
!
! CALLING SEQUENCE:
!	OPEN_FILE (ARG1, ARG2)
!
! INPUT PARAMETERS:
!	ARG1: address of file ID of file to open
!	ARG2: = 0 to open read only
!		1 to open read/write
!		2 to bypass interlocks (just map the file)
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	PRIMARY_FCB: address of FCB created or found
!	CURRENT_WINDOW: address of window created
!
! ROUTINE VALUE:
!	address of window created
!
! SIDE EFFECTS:
!	FCB and window created
!
!--

BEGIN

MAP
	FID		: REF BBLOCK;	! file ID arg

LOCAL
	FCB_CREATED,			! flag indicating FCB creation
	FCB		: REF BBLOCK,	! file control block address
	WINDOW		: REF BBLOCK,	! window address
	HEADER		: REF BBLOCK;	! file header address

BIND_COMMON;

EXTERNAL ROUTINE
	REBLD_PRIM_FCB	: L_NORM NOVALUE, ! rebuild primary fcb from header
	BUILD_EXT_FCBS	: L_NORM NOVALUE, ! build extension fcbs
	ARBITRATE_ACCESS : L_JSB_2ARGS,	! arbitrate file access
	CONV_ACCLOCK	: L_NORM,	! convert file access lock
	SERIAL_FILE	: L_NORM,	! file processing interlock
	SWITCH_VOLUME	: L_NORM,	! switch to correct volume
	SEARCH_FCB	: L_NORM,	! search for FCB of file
	READ_HEADER	: L_NORM,	! read file header
	CREATE_FCB	: L_NORM,	! create a file control block
	CREATE_WINDOW	: L_NORM;	! create a file window

ENABLE OPEN_FILE_HANDLER;

! The current uses of this routine (as of 3b) are
! 1) BADSCN calls it to get r/w access to the badlog file
! 2) GET_LOC calls it with bypass to get mapping info for related file placement
! 3) CREATE calls it with bypass to get previous version attributes for
! propagation
!
! There is a small possibility of deadlock on the placement use because of
! the file serialization lock.  If two processes simultaneously do placed
! allocation on two separate files, and each specifies the other as the
! file to be placed near, one could deadlock.
!

! Initialize impure cells that drive the cleanup in the handler.
!

STSFLGS [STS_HAD_LOCK] = 0;
STSFLGS [STS_KEEP_LOCK] = 0;
PRIMARY_FCB = 0;
PRIM_LCKINDX = 0;

! Switch context to the volume of the specified RVN.
!

APPLY_RVN (FID[FID$W_RVN], .CURRENT_RVN);
SWITCH_VOLUME (.FID[FID$W_RVN]);

! Interlock processing on this file.
! There is an assumption made in the way that this lock is handled
! that no other serial_file calls will be made before a close_file
! is done on this file.  That is because the sts_had_lock flag will
! be set by serial_file and we are going to use that flag to determine
! whether to release this lock in close_file.
!

PRIM_LCKINDX = SERIAL_FILE (.FID);

IF .STSFLGS [STS_HAD_LOCK]
THEN
    STSFLGS [STS_KEEP_LOCK] = 1;

! Search the FCB list for the given file ID. If found, arbitrate access
! interlocks. Note that if we create an FCB, we do not bother with access
! counts, etc., since it will disappear at the end of this call.
!

FCB = SEARCH_FCB (.FID);

HEADER = READ_HEADER (.FID, .FCB);
FCB_CREATED = 0;
IF .FCB EQL 0
THEN
    BEGIN
    FCB_CREATED = 1;
    FCB = KERNEL_CALL (CREATE_FCB, .HEADER);
    END;

PRIMARY_FCB = .FCB;

IF .WRITE NEQ 2
THEN
    BEGIN
    LOCAL
	CURR_LKMODE;

    CURR_LKMODE = .FCB [FCB$B_ACCLKMODE];

    IF NOT ARBITRATE_ACCESS (IF .WRITE THEN FIB$M_WRITE ELSE 0, .FCB)
    THEN ERR_EXIT (SS$_ACCONFLICT);

    CONV_ACCLOCK (.CURR_LKMODE, .FCB);
    END;

! By setting this cleanup flag, further error recovery is done in
! the error_cleanup routine, not by the open_file_handler.
!

CLEANUP_FLAGS[CLF_CLOSEFILE] = 1;

CURRENT_WINDOW = WINDOW = CREATE_WINDOW (0, 0, .HEADER, 0, .FCB);

IF .CURRENT_WINDOW EQL 0 THEN ERR_EXIT (SS$_EXBYTLM);

! If the file is multi-header, read the extension headers and create
! extension FCB's as necessary. Finally read back the primary header.
!

IF .FCB_CREATED
THEN
    BUILD_EXT_FCBS (.HEADER)
ELSE
    IF .FCB [FCB$V_STALE]
    THEN
	BEGIN

	REBLD_PRIM_FCB (.FCB, .HEADER);

	BUILD_EXT_FCBS (.HEADER);

	END;

RETURN .WINDOW;

END;					! end of routine OPEN_FILE

ROUTINE OPEN_FILE_HANDLER (SIGNAL, MECHANISM) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Clean up from aborted open_file.  Specifically, get rid of
!	the fcb and serialization lock if we did not previously
!	hold the serialization lock.
!
!--

BEGIN

MAP
	SIGNAL	: REF BBLOCK;

BIND_COMMON;

EXTERNAL ROUTINE
	NUKE_HEAD_FCB	: L_NORM NOVALUE, ! cleanup and deallocate prim fcb
	RELEASE_SERIAL_LOCK : L_NORM NOVALUE,
	SET_DIRINDX	: L_JSB_1ARG;

IF .SIGNAL [CHF$L_SIG_NAME] NEQ SS$_CMODUSER
    OR .CLEANUP_FLAGS [CLF_CLOSEFILE]
    OR .PRIM_LCKINDX EQL 0
    OR .STSFLGS [STS_KEEP_LOCK]
THEN
    RETURN SS$_RESIGNAL;

IF .PRIMARY_FCB NEQ 0
THEN
    IF .PRIMARY_FCB [FCB$W_REFCNT] EQL 0
    THEN
	IF NOT SET_DIRINDX (.PRIMARY_FCB)
	THEN
	    NUKE_HEAD_FCB (.PRIMARY_FCB);

PRIMARY_FCB = 0;

IF .PRIM_LCKINDX NEQ 0
THEN
    RELEASE_SERIAL_LOCK (.PRIM_LCKINDX);

PRIM_LCKINDX = 0;

SS$_RESIGNAL

END;		! of routine OPEN_FILE_HANDLER

GLOBAL ROUTINE READ_DATA (WINDOW, VBN, COUNT) : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the specified data block(s) from the file indicated
!	by the given window address. Note that the actual number of blocks
!	read may be less than the number desired due to mapping fragmentation
!	or cache limitations.
!
!
! CALLING SEQUENCE:
!	READ_DATA (ARG1, ARG2, ARG3)
!
! INPUT PARAMETERS:
!	ARG1: window address
!	ARG2: starting VBN to read
!	ARG3: count of blocks to read
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	address of buffer read
!
! SIDE EFFECTS:
!	block read, window may be turned
!
!--

BEGIN

MAP
	WINDOW		: REF BBLOCK;	! window argument

LOCAL
	FCB		: REF BBLOCK,	! address of file's FCB
	LBN,				! LBN of starting virtual block
	UNMAPPED,			! number of desired blocks not mapped
	BUFFER		: REF BBLOCK;	! address of block read

BASE_REGISTER;

EXTERNAL ROUTINE
	MAP_VBN		: L_NORM,	! map virtual to logical
	READ_BLOCK	: L_NORM;	! read a disk block


! Map the VBN to LBN using the supplied window. If the map fails, return a
! zero buffer address.
!

FCB = .WINDOW[WCB$L_FCB];
IF .VBN GTRU .FCB[FCB$L_EFBLK]
THEN RETURN 0;

LBN = MAP_VBN (.VBN, .WINDOW, .COUNT, UNMAPPED);
IF .LBN EQL -1 THEN RETURN 0;

BUFFER = READ_BLOCK (.LBN, .COUNT - .UNMAPPED, DATA_TYPE);
RETURN .BUFFER;

END;					! end of routine READ_DATA

GLOBAL ROUTINE CLOSE_FILE (WINDOW) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine closes the file indicated by the supplied window
!	by releasing the window and FCB.
!
!
! CALLING SEQUENCE:
!	CLOSE_FILE (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: address of window
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	PRIMARY_FCB: 0
!	CURRENT_WINDOW: 0
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	FCB and window deallocated
!
!--

BEGIN

MAP
	WINDOW		: REF BBLOCK;	! window argument

LOCAL
	FCB		: REF BBLOCK,	! FCB of file
	WINDOW_SEGMENT	: REF BBLOCK,	! Address of current window segment
	NEXT_SEGMENT	: REF BBLOCK;	! Address of next window segment

BIND_COMMON;

EXTERNAL ROUTINE
	TOSS_CACHE_DATA	: L_NORM NOVALUE,
	RELEASE_SERIAL_LOCK : L_NORM NOVALUE,
	DEALLOCATE	: L_NORM,	! deallocate back to pool
	DEL_EXTFCB	: L_NORM,	! delete extension FCB's
	SET_DIRINDX	: L_JSB_1ARG,	! test and set for directory fcb
	NUKE_HEAD_FCB	: L_NORM NOVALUE; ! cleanup a primary fcb


! Find the FCB. Deallocate the window, and the FCB if it is not otherwise
! accessed. Also flush data blocks of the file from the buffer pool.
!

FCB = .WINDOW[WCB$L_FCB];
TOSS_CACHE_DATA (.PRIM_LCKINDX);

PRIMARY_FCB = 0;
CURRENT_WINDOW = 0;
CLEANUP_FLAGS[CLF_CLOSEFILE] = 0;

WINDOW_SEGMENT = .WINDOW;
DO
    BEGIN
    NEXT_SEGMENT = .WINDOW_SEGMENT[WCB$L_LINK];
    KERNEL_CALL (DEALLOCATE, .WINDOW_SEGMENT);
    WINDOW_SEGMENT = .NEXT_SEGMENT;
    END
UNTIL .WINDOW_SEGMENT EQL 0;

! If we already held the serialization lock on this file, we must
! have it in primary context.  In that case, we will also have
! remembered the fcb address in primary context, so let's deal with
! it there.
!

IF .STSFLGS [STS_KEEP_LOCK]
THEN
    BEGIN
    PRIM_LCKINDX = 0;
    RETURN;
    END;

IF .FCB[FCB$W_REFCNT] EQL 0
THEN
    IF NOT SET_DIRINDX (.FCB)
    THEN
	BEGIN
	DEL_EXTFCB (.FCB);
	NUKE_HEAD_FCB (.FCB);
	END;

RELEASE_SERIAL_LOCK (.PRIM_LCKINDX);
PRIM_LCKINDX = 0;

END;					! end of routine CLOSE_FILE

END
ELUDOM
