	$BEGIN	RM1CONN,000,RM$RMS1,<SEQUENTIAL AND COMMON CONNECT>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: rms32
;
; Abstract:
;		routine to perform sequential-specific
;		connect processing.
;
; Environment:
;		star processor running starlet exec.
;
; Author: l f laverdure,	 creation date: 5-JAN-1977
;
; Modified By:
;
;	V03-023	SHZ0026		Stephen H. Zalewski,	04-May-1984
;		If we are creating a global buffer section, specify that
;		we do an expand region to make sure it comes out of P0 space.
;
;	V03-022	JEJ0025		J E Johnson		10-Apr-1984
;		Ensure that GBH and GBD lengths are quadword aligned.
;
;	V03-021	SHZ0011		Stephen H. Zalewski,	24-Feb-1984
;		Do not initialize TRC blocks when connecting with global
;		buffers.  This was accidently left on from SHZ0010.
;
;	V03-020	SHZ0010		Stephen H. Zalewski	06-Dec-1983
;		Fix the tracing code to work with multi-threaded RMS.  This
;		is accomplished by using the interlock queue instructions.
;
;	V03-019	SHZ0009		Stephen H. Zalewski	19-Sep-1983
;		Replace call to RM$INIT_SFSB with RM$INIT_SFSB_IRB.  This is
;		to allow us to successfully stall using the irab.
;
;	V03-018	SHZ0008		Stephen H. Zalewski	10-Aug-1983
;		Bugcheck if we try to create a global buffers section
;		with global buffer count of zero.
;
;	V03-017	SHZ0007		Stephen H. Zalewski	28-Jul-1983
;		Implement cluster global buffers.
;
;	V03-016	SHZ0006		Stephen H. Zalewski	22-Jun-1983
;		Disable global buffers.
;
;	V03-015	SHZ0005		Stephen H. Zalewski 	11-Apr-1983
;		Fix bug that caused a process to incorrectly map a global
;		buffer section.
;
;	V03-014	KPL0001		Peter Lieberwirth	23-Mar-1983
;		Fix v03-013 by reversing sense of branch.
;
;	V03-13	SHZ0004		Stephen H. Zalewski	21-Feb-1983
;		If XQP is being used, ignore any request for global buffers.
;		This is only a temporary restriction.
;
;	V03-012	LJA0055		Laurie J. Anderson	12-Jan-1983
;		Fill in MBF field in IRB with the value which is used
;
;	V03-011	KBT0413		Keith B. Thompson	30-Nov-1982
;		Change ifb$w_devbufsiz to ifb$l_devbufsiz
;
;	V03-010	SHZ0003		Stephen H. Zalewski,	14-Oct-1982  16:29
;		Prevent a $connect from occuring if there is no device buffer
;		or the real-time device bit is set in the device characteristics
;		field (this is also a patch in 3.2).
;
;	V03-009	SHZ0002		Stephen H. Zalewski,	10-Sep-1982  16:43
;		Remove anything and everthing to do with FRBs, SIFBs and SFDs
;		because they no longer exist.
;
;	V03-008	KBT0341		Keith B. Thompson	16-Sep-1982
;		Don't allocate multiple gbsbs when multistreaming
;
;	V03-007	SHZ0001		Stephen H. Zalewski,	1-Sep-1982  15:29
;		Modify so that global buffer section locking is now done
;		via the lock manger and the GBSB.
;
;	V03-006	KBT0299		Keith B. Thompson	24-Aug-1982
;		Reorganize psects
;
;	V03-005	KDM0002		Kathleen D. Morse	28-Jun-1982
;		Added $PCBDEF.
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$BDBDEF
	$BLBDEF
	$CCBDEF
	$DEVDEF
	$FABDEF
	$FIBDEF
	$FWADEF
	$GBDDEF
	$GBHDEF
	$GBSBDEF
	$IMPDEF
	$IRBDEF
	$IFBDEF
	$PCBDEF
	$PRVDEF
	$PSLDEF
	$RMSDEF
	$RABDEF
	$SECDEF
	$SSDEF
	$SFSBDEF
	$TRCDEF
	$WCBDEF

;
; Equated Symbols:
;

	ROP=RAB$L_ROP*8			; bit offset to rop

;
; Own Storage:
;

FAOCNTRL:
	.ASCIC	/_RMS$!XL/		; Control string to FAO for GS name.


	.SBTTL	RM$CONNECT1 - SEQUENTIAL-SPECIFIC CONNECT ROUTINE

;++
; RM$CONNECT
;
;	RM$CONNECT
;
;  this routine performs the following functions required
;  for connecting to sequential files:
;
;	1. perform various validity checks
;	2. if opened for block i/o allocate a lock bdb
;	3. allocate required bdb's and buffers and save count
;
;
; Calling sequence:
;
;	entered via case branch from rm$connect
;
; Input Parameters:
;
;	ap	argument list addr
;	r11	impure area addr
;	r10	ifab addr
;	r9	irab addr
;	r8	rab addr
;
; Implicit Inputs:
;
;	the contents of the rab and irab blocks
;
; Output Parameters:
;
;	r0	status
;
; Implicit Outputs:
;
;	sets various fields in the irab and ifab.
;
; Completion Codes:
;
;	the standard rms status code is set into r0 and
;	return is made to the user (not caller).
;
;	if any errors, all irab-related internal structures
;	are deallocated.
;
; Side Effects:
;
;	none
;
; note:
;
;	only 1 connected irab is allowed on a sequential file.
;	this routine assumes that this is the first irab in
;	ifab's irab chain.
;
;--

RM$CONNECT1::

;
;  if open or create was done with bro specified (mixed block & record i/o),
;  check the bio rop bit and if set switch to block i/o only
;

	BBC	#FAB$V_BRO,-
		IFB$B_FAC(R10),8$	; branch if bro not set
	BICB2	#FAB$M_BIO,-
		IFB$B_FAC(R10)		; indicate not limited to block i/o
	BBC	#RAB$V_BIO+ROP,(R8),8$	; branch if bio clear in rop
	BISB2	#FAB$M_BIO,-
		IFB$B_FAC(R10)		; switch to block i/o only
8$:
	BBC	#IFB$V_DAP, (R10), 20$	; branch if network access
	JSB	NT$CONNECT		; do network connect
	BLBS	R0, 20$			; continue on success
	BRW	CLN1			; cleanup on error
20$:
	BBC	#IFB$V_BIO,IFB$B_FAC(R10),-
		CHKMBC			; branch if not block i/o
	BRB	ALLOC			; go to alloc if block i/o


;
;  error processing
;
;  record format undefined and doing record i/o processing
;

ERRRFM:
RM$CONN_ERRRFM::
	RMSERR	RFM
CLN1:	BSBW	RM$CCLN1		; deallocate irab
	BRW	RM$EX_NOSTR		; and exit

;
;  disk buffer size not 512, device is realtime device, or device has a zero
;  length device buffer.
;

ERRDEV:	RMSERR	DEV
	BRB	CLN1

;
;  mbc negative. (reserved for later use)
;

ERRMBC:
	RMSERR	MBC
	BRB	CLN1


	.ENABL	LSB

;
;  allocate bdbs and i/o buffers of size = blocksize (* mbc, if disk)
;
;!!!!!
;  \note:  might be nice to change rm$aldbuf to do split-page
;   (but not cross-page) allocations for unit record devices.\
;!!!!!
;

CHKMBC:
	MOVL	IFB$L_DEVBUFSIZ(R10),R5	; length of buffer
	BEQL	ERRDEV			; Cannot connect if no device buffer
	BBS	#DEV$V_RTM,-		;  or device is realtime device.
		IFB$L_PRIM_DEV(R10),ERRDEV
	MOVL	#1,R4			; mt offset for default mbf
	BBC	#DEV$V_FOD,-
		IFB$L_PRIM_DEV(R10),UNIT; branch if not disk or mt
	BBS	#DEV$V_FOR,-
		IFB$L_PRIM_DEV(R10),UNIT; branch if mounted foreign
	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R10),-
		ALLOC			; branch if not disk

;
;  check that assumptions regarding disk buffer size are accurate
;
;  otherwise some of sequential get code won't work
;

	CMPW	R5,#512
	BNEQ	ERRDEV		; it's all over if not that magic number!

;
;  this is a connect for a disk file.
;
;  process the mbc (multi-block count) field of the rab to determine
;  the size of the buffers to be allocated.
;

	CLRL	R4			; disk offset for default mbf
	CVTBL	RAB$B_MBC(R8),R0	; get mbc
	BBC	#IFB$V_PPF_INPUT,(R10),-
		120$			; branch if not sys$input
	CMPL	R0,#2			; mbc at least 2?
	BGEQU	130$			; branch if yes
	MOVL	#2,R0			; set mbc=2 for sys$input
120$:	BNEQ	130$			; branch if speced
	CVTBL	@#PIO$GB_DFMBC,R0	; else get process default
	BNEQ	130$			; branch if speced
	CVTBL	@#SYS$GB_DFMBC,R0	; else get system default
	BNEQ	130$			; branch if speced
	MOVL	#1,R0			; else use a single block
130$:	BLSS	ERRMBC			; error if mbc negative
	SUBB3	#1,R0,IRB$B_MBC(R9)	; store adjusted mbc value
	MULW2	R0,R5			; get total size of buffer
ALLOC:	BSBW	RM$BDBALLOC		; go allocate the buffers
150$:	BLBS	R0,SETNXT		; continue on success
	BRW	RM$EX_NOSTR		; exit on error.  error in
					; rm$bdballoc returns everything

;
;  buffer allocation for unit record and foreign mounted devices
;
;  allocate a single buffer only
;

UNIT:	MOVL	#1,R6			; get just one buffer/bdb
	BBC	#DEV$V_TRM,-
		IFB$L_PRIM_DEV(R10),160$; go allocate if not term
	CMPW	#512,R5			; buffer size at least 512
	BLEQU	160$			; yes, use it
	MOVW	#512,R5			; use 512 bytes as minimum
160$:	BSBW	RM$BDBALLOC_ALT		; go allocate the buffer
	BRB	150$			; do error check
	.DSABL	LSB

;
;  perform remaining stream setup
;

SETNXT:	MOVL	R4,IRB$L_NXTBDB(R9)	; set next bdb for seqxfr

;
;  position file for stream at beginning of file
;  unless eof bit set in ifab or rop
;

	BBS	#DEV$V_FOR,-
		IFB$L_PRIM_DEV(R10),65$	; leave positioned at blk 0;
					; if non-file structured
	INCL	IRB$L_NRP_VBN(R9)	; assume at beginning of file
	BBS	#IFB$V_EOF,(R10),20$	; branch if position to eof flag set
	BBC	#RAB$V_EOF+ROP,(R8),30$	; branch if eof not set in rop either

;
;  copy the eof position to the next record pointer context
;

20$:	MOVL	IFB$L_EBK(R10),IRB$L_NRP_VBN(R9); these better be zero
	MOVW	IFB$W_FFB(R10),IRB$W_NRP_OFF(R9); for unit record devices

;
;  check for positioned at or past eof unless unit record
;

30$:
	ASSUME	DEV$V_REC EQ 0
	BLBS	IFB$L_PRIM_DEV(R10),50$	; branch if unit record
	CMPL	IRB$L_NRP_VBN(R9),-
		IFB$L_EBK(R10)		; nrp past eof?
	BLSSU	50$			; branch if not
	BGTRU	40$			; branch if definite yes

;
;  nrp vbn = eof vbn
;  must check byte in block to determine if at eof
;

	CMPW	IRB$W_NRP_OFF(R9),IFB$W_FFB(R10)
	BLSSU	50$			; branch if nrp < eof
40$:	SSB	#IRB$V_EOF,(R9)		; set the eof flag
50$:	CMPB	IRB$B_BCNT(R9),#1	; just 1 buffer allocated?
	BLEQU	60$			; branch if yes
	SSB	#IRB$V_RAHWBH,(R9)	; enable read ahead & write behind
60$:	BRW	RM$EXSUC		; exit with success

;
;   maintains eof context on foreign devices
;

65$:	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R10),60$; branch if not magtape
	BBC	#IFB$V_EOF,(R10),60$	; if not at eof, no problem
	SSB	#IRB$V_EOF,(R9)		; set irab eof bit
	BRB	60$			; return to mainline


;++
;
;  subroutine to allocate bdbs and buffers.  code to lock buffers in working
;  set remains no-op'd at time of release 2.  it is felt at this time that
;  locking buffers in the working set when the multi-buffer count is positive
;  will probably cause problems with existing programs because in fact, rms
;  has not been locking them at all.  if this is implemented in a future
;  release, the cleanest technique would seem to be the addition of yet
;  another (sigh...) rop bit in the rab as input to the $connect operation
;  to specifically request rms to lock the buffers.  the current behavior
;  of using absolute value of the mbf field or default counts will continue.
;
;  if this is for magtape with truncate access, only 1 buffer is allocated
;
;  entry at rm$bdballoc_alt is used when buffer size is already specified in
;  r6.  see additional comments there.
;
;
;  inputs:
;
;	r11		impure area address
;	r10		ifab address
;	r9		irab address
;	r8		rab address
;	r5		size of buffers to allocate, in bytes.
;	r4		index for defaults, values as follows:
;
;				0 - sequential disk file default
;				1 - magtape default
;				2 - unit record default
;				3 - relative file default
;				4 - indexed file default
;				5 - hashed file default
;
;	rab$b_mbf	explicit # of buffers
;
;  outputs:
;
;	r0		status code
;	r1-r6		destroyed
;	r4		address of last bdb allocated
;	irb$b_bcnt	# of buffers allocated - updated only if r9 nonzero.
;
;	allocation failure when called from connect (r9 nonzero) will
;	return all allocated buffers, bdb's, bcb's, and the irab.
;
;--

BLKALL:	CLRQ	R5			; this will get lock bdb only
	BRB	RM$BDBALLOC_ALT		; extended branch
RM$BDBALLOC::
	BBS	#IFB$V_BIO,IFB$B_FAC(R10),-
		BLKALL			; block i/o then just do bdb
	CVTBL	RAB$B_MBF(R8),R6	; get number of buffers
	BNEQ	10$			; branch if specified
	CVTBL	@#PIO$GB_DFMBFSDK[R4],R6; else, pick up process default
	BNEQ	10$			; branch if specified
	CVTBL	@#SYS$GB_DFMBFSDK[R4],R6; else, pick up system default
	BNEQ	10$			; branch if specified
	MOVL	#1,R6			; else use 1 buffer

;
;  if read ahead or write behind spec'd, then need two buffers
;

	ASSUME	<<RAB$M_RAH!RAB$M_WBH>&^XFFFF00FF> EQ 0
	BITW	#<RAB$M_RAH!RAB$M_WBH>@-8,RAB$B_ROP1(R8)
					; either rab or wbh spec'd?

	BEQL	10$			; eql don't want rah/wbh
	INCL	R6			; need min two buffs
10$:	TSTL	R6
	BGTR	20$			; if pos, then ok
	MNEGL	R6,R6			; otherwise make it positive
20$:
	MOVB	R6,IRB$B_MBF(R9)	; Save MBF value used
	BBC	#IFB$V_TEF,(R10),40$	; branch if no truncate access
	BBC	#DEV$V_SQD,-
		IFB$L_PRIM_DEV(R10),40$	; branch if not magtape
	MOVL	#1,R6			; allocate 1 buffer
40$:

;
;  since we can't get good indexed defaults any other way
;  alter r6 here. indexed files require at least 2 bdb's and buffer's
;  so if absolute value of r6 is 1, then need to change it
;

	CMPL	#4,R4			; see if indexed
	BNEQ	80$			; if not branch
	CMPL	R6,#2			; at least 2 buffers spec'd?
	BGEQU	80$			; ok if greater than or equal
	MOVL	#2,R6			; use 2 otherwise
80$:

;
;  alternate entry point for number of buffers already specified in r6.
;
;  if r9 is zero, then irb$b_bcnt is not filled in.  this entry point is
;  for unit record and foreign devices to allocate a single buffer not
;  using the mbf or defaults.  extend and display will use this to allocate
;  buffers when no streams are connected (relative or isam only).
;
;  inputs:
;
;	r6			number of buffers to
;				allocate.  0 causes only one buffer to
;				be allocate and bypasses potential allocation
;				of lock bdb for relative and isam orgs.
;
;	ifb$v_wrtacc		if set, then allocate a lock bdb also for
;				relative and isam files if low word r6 non zero
;
;	ifb$l_sfsb_ptr		if non-zero, file is shared and a bcb is
;				allocated for each bdb.
;
;  outputs:
;
;	bdb's are linked into the end of the ifab bdb list.
;

RM$BDBALLOC_ALT::
	CLRL	-(SP)			; init buffer counter
	BBC	#IFB$V_BIO, IFB$B_FAC(R10), AGAIN ; Br if not block i/o.
	SSB	#IFB$V_NORECLK, (R10)	; Make sure noreclk is set for bio.
AGAIN:
	INCL	(SP)			; count the buffer
	BSBW	RM$ALDBUF		; allocate the buffer
	BLBC	R0,DECR_BCNT		; get out on error
	BBS	#IFB$V_NORECLK, (R10), 10$ ; branch if no record locking.
	BSBW	RM$ALBLB		; Allocate a BLB.
	BLBC	R0,GIVEBACK		; branch if error on getting bcb
10$:	TSTL	R5			; was buffer allocated?
	BEQL	20$			; EQL then not, so don't count it.
	INCW	IFB$W_AVLCL(R10)	; note buffer allocated.
20$:	SOBGTR	R6,AGAIN		; decrement counter, go again
					; if still positive
	BLSS	DECR_BCNT		; this was last pass to alloc
					; just lock bdb so decr bcnt
					; so it only counts buffers

;
; At this point the required number of buffers and bdbs, and blbs (if shared)
; have been allocated.  Allocate a lock blb if record locking is being done.
;

	BBS	#IFB$V_NORECLK,(R10),EXIT ; done if no locking.
	BSBW	RM$ALBLB		; Allocate a lock BLB.
	BLBS	R0, CHKGBL		; Check out global buffers.
	BRB	EXIT			; Exit on error from alblb.
DECR_BCNT:

;
; come here on error and
; last pass to get count right
;

	DECL	(SP)			;
EXIT:
	POPR	#^M<R1>			; get buffer count off stack
	TSTL	R9			; is there an irab?
	BEQL	10$			; no, then don't update bcnt
					; and exit (caller checks error)
	MOVB	R1,IRB$B_BCNT(R9)	; store count of buffers
	BLBC	R0,20$			; error on allocation
					; clean up buffers allocated
					; and get rid of irab
					; r9 nonzero means this was
					; called on a connect
10$:	RSB				; and exit routine
20$:	PUSHL	R0			; save status
	BRW	RM$COMCLNUP		; and branch to cleanup

;
; we couldn't get a blb for some reason (e.g., not enough space left).
; therefore, we must return the bdb we just got.
;

GIVEBACK:
	PUSHL	R0			; save status code
	MOVL	IFB$L_BDB_BLNK(R10),R4	; get back link because
					; aldbuf calls albdb which
					; links them at end of list
	BSBW	RM$RETBDB		; deallocates bdb @r4
	POPR	#^M<R0>			; restore status code
	BRB	DECR_BCNT		; fix count and exit



;
; Code to allocate global buffers if desired, and initialize if necessary.
;

CHKGBL:
	TSTL	IFB$L_SFSB_PTR(R10)	; If file is not being shared,
	BEQL	EXIT			;  then don't bother with global buffers
	TSTL	IFB$L_GBH_PTR(R10)	; If we already have global buffers
	BEQL	1$			;  then multi-streaming.
	BRW	MAP_IT			; Go map the section.
1$:	ASSUME	IMP$V_IIOS EQ 0
	BLBC	(R11), EXIT		; Just use local if this is ppf.
	BBS	#IMP$V_NOP0BUFS,(R11),EXIT ; Use local if P0 off limits.
	TSTL	R9			; Is irab present?
	BEQL	EXIT			; No, then just use local.
	MOVL	RAB$L_FAB(R8), R6	; Get address of FAB.
	CVTWL	FAB$W_GBC(R6), R6	; Get gbl buffer count.
	BEQL	EXIT			; None desired, so exit.
	BSBW	RM$INIT_GBSB		; Allocate GBSB and get EX lock.
	BLBC	R0,EXIT			; Exit if lock failed.
	MOVL	IFB$L_GBSB_PTR(R10),R4	; Get address of GBSB from IFB.
	MOVL	GBSB$L_GS_SIZE(R4),R2	; Are global buffers already in use?
	BEQL	CHK_GBC			; No, branch to validate GBC.
	BRW	MAP_IT			; Yes, go use them.

ERL0:	MOVL	IFB$L_BLBBLNK(R10), R4	; Get addr of BLB.
	BSBW	RM$RETBLB		; Return it.
ERL1:	MOVL	IFB$L_BLBBLNK(R10), R4	; Get BLB addr.
	BSBW	RM$RETBLB		; Give back.
ERL4:	MOVL	IFB$L_BDB_BLNK(R10), R4	; Get address of GBPB just alloc'd.
	BSBW	RM$RETGBPB		; Give it back.
ERL3:	MOVL	IFB$L_BDB_BLNK(R10), R4	; Get address of GBPB just alloc'd.
	BSBW	RM$RETGBPB		; Give it back.
ERL2:	MOVL	IFB$L_BLBBLNK(R10), R4	; Get addr of a BLB (lock BLB).
	BSBW	RM$RETBLB		; Give it back.
	BSBW	RM$RLS_GBSB		; Dequeue the lock we had on the GBSB
	POPR	#^M<R0>			; Restore error code.
	BRW	EXIT			; Go finish up.

ALBLBERR:
	ADDL2	#8, SP			; Clean off stack.
	PUSHL	R0			; Save error code.
	BRB	ERL1			; Br and finish up.
ALBLBERR1:
	ADDL2	#8, SP			; Clean off stack.
	PUSHL	R0			; Save error code.
	BRB	ERL4			; Br and finish up.
ALGBPERR:
	ADDL2	#8, SP			; Clean off stack.
	PUSHL	R0			; Save error code.
	BRB	ERL2			; Br to give back lock BLB.
ALGBPERR1:
	ADDL2	#8, SP			; Clean off stack.
	PUSHL	R0			; Save error code.
	BRB	ERL3			; Br to give back one gbpb.
BAD_GBC:
	RMSERR	GBC,-(SP)		; Note error.
	BRB	ERL2			; Give back lock BLB.

	ASSUME	<<GBH$C_BLN/8>*8> EQ GBH$C_BLN	; Check for quadword alignment
	ASSUME	<<GBD$C_BLN/8>*8> EQ GBD$C_BLN	; in GBD and GBH sections

CHK_GBC:
	MOVL	R6, R2			; Save number of buffers desired.
	BLSS	BAD_GBC			; Only positive values allowed.
	MULL3	R5, R2, R1		; Total buffer bytes into R1.
	MULL2	#GBD$C_BLN, R2		; R2 is now descriptor bytes.
	ADDL2	R1, R2			; Sum of desc and buffers.
	ADDL2	#GBH$C_BLN, R2		; Plus size of header area.
	ADDL	#511,R2			; Round up to even pages.
	BICL	#511,R2
	BRB	MAP_IT			; Noop to branch to ADDTRC for tracing.
	JMP	ADDTRC			;
MAP_IT:
	PUSHR	#^M<R2,R4>		; Save registers needed after algbpb.
	BSBW	RM$ALGBPB		; Get Global Buffer Pointer Block.
	BLBC	R0, ALGBPERR		; Branch on error.
	BSBW	RM$ALGBPB		; Get Global Buffer Pointer Block.
	BLBC	R0, ALGBPERR1		; Branch on error.
	BSBW	RM$ALBLB		; Get a BLB.
	BLBC	R0, ALBLBERR1		; Branch on error.
	BSBW	RM$ALBLB		; Get a BLB.
	BLBC	R0, ALBLBERR		; Exit on error.
	POPR	#^M<R2,R4>		; Restore registers.
	TSTL	IFB$L_GBH_PTR(R10)	; Already have gbl buffs?
	BEQL	1$			; No, then go on to map it.
	SSB	#IRB$V_GBLBUFF, (R9)	; Note irab has extra gbpb, blb.
	BRW	EXIT			; Branch to exit.

;
; R2 = Number of bytes to allocate (rounded up to full pages)
;

1$:	CLRQ	-(SP)			; Zero INADR forces P0 space to be allocated.
	CLRQ	-(SP)			; Reserve space for RETADR.

;
; The section name will be the ascii text '_RMS$' followed by the
; FCB address in hexadecimal.
;

	SUBL2	#16, SP			; Make room for gsd name.
	PUSHAL	(SP)			; Addr part of descriptor.
	PUSHL	#13			; Length of GSD name.
	PUSHR	#^M<R2,R3,R9>		; Save these around GETCCB call.
	MOVL	R10, R9			; Need ifab in r9.
	BSBW	RM$GETCCB		; Get CCB addr into R1.
	POPR	#^M<R2,R3,R9>		; Restore registers.
	MOVL	CCB$L_WIND(R1), R1	; Get ptr to window.
	MOVL	WCB$L_FCB(R1), R1	; Get FCB addr into R1.
	PUSHAL	FAOCNTRL+1		;
	MOVZBL	FAOCNTRL, -(SP)		; Build descriptor for control string.
	MOVL	SP, R0			; Need to pass addr of desc.
	$FAO_S	CTRSTR=(R0),-		; Address of control string descriptor
		OUTBUF=8(R0),-		; Addr of output buffer descriptor.
		P1=R1			; FCB addr to show up in output string.
	CLRQ	(SP)			; Clear priv mask.
	SSB	#PRV$V_SYSGBL, (SP)	; Need sysgbl privilege.
	MOVL	SP, R1			; Save this stack address.
	$SETPRV_S ENBFLG=#1,-		; Turn on sysgbl for crmpsc.
		PRVADR=(R1),-
		PRVPRV=(R1)		; Get previous state.

	MOVAL	8(SP), R1		; Address of gsd name desc.
	ROTL	#23, R2, R0		; Get page count into r0.
	$CRMPSC_S INADR = 32(R1),-	; Point to array on stack.
		RETADR = 24(R1),-	; Point to array on stack.
		GSDNAM = (R1),-		; "			"
		PAGCNT = R0,-		; Number of pages in section.
		ACMODE = #PSL$C_EXEC,-	; Access mode is EXEC.
	FLAGS = #SEC$M_GBL!SEC$M_SYSGBL!SEC$M_WRT!SEC$M_DZRO!SEC$M_PAGFIL!SEC$M_EXPREG

	BBS	#PRV$V_SYSGBL, (SP), 5$	; If already had sysgbl, skip turnoff.
	CLRQ	(SP)			; Init priv mask.
	SSB	#PRV$V_SYSGBL,(SP)	; Turn off sysgbl.
	MOVL	SP, R1			; Address of priv mask.
	PUSHL	R0			; Save status from crmpsc.
	$SETPRV_S PRVADR=(R1)		; Turn off sysgbl.
	POPL	R0			; Restore crmpsc status.
5$:
	ADDL2	#32, SP			; Clean priv mask+name desc +name.
	BLBS	R0, 20$			; Continue if Ok.
	BRW	SEC_ERR			; Branch to error code.
10$:	BRW	SEC_ERR1		; Branch to error code.
20$:
	SUBL3	(SP), 4(SP), R1		; Get size allocated - 1.
	INCL	R1			; Size allocated.
	CMPL	R1, R2			; Get everything?
	BNEQ	10$			; Br if not.
	MOVL	(SP),R3			; Move starting address of section into R3.
	CMPW	#SS$_CREATED, R0	; Was the section just created?
	BEQL	30$			; Then it needs to be initialized.
	CMPW	#<GBH$C_BID+<GBH$C_BLN/4@8>>, GBH$B_BID(R3) ; Seem legit?
	BNEQ	10$			; NEQ there's an error.
	BRW	STORE_PTR		; Else use it.

;
; Initialize newly created section.
; R3 = start address of section
; R2 = size of section in bytes
; R6 = number of buffers in section.
;

30$:	MNEGL	#1, GBH$L_HI_VBN(R3)	; Store hi vbn for scan end check.
	MOVL	R2, GBH$L_GS_SIZE(R3)	; Store size of section in section.
	MOVL	R2, GBSB$L_GS_SIZE(R4)	; Store size of section in GBSB.
	MOVW	R6, GBSB$W_GBC(R4)	; Store number of buffers in section.
	MOVW	#<GBH$C_BID+<GBH$C_BLN/4@8>>, GBH$B_BID(R3) ; Store id, bln.
	MOVZWL	#GBH$C_BLN, R0		; Offset to first GBD from GBH.
	MOVL	R0, GBH$L_GBD_BLNK(R3)	; Back link to GBD's.
	MOVL	R0, GBH$L_GBD_START(R3) ; Save offset to first GBD.
	MOVL	R0, GBH$L_GBD_NEXT(R3) ; First GBD is first victim.
	MOVL	#8, GBH$L_SCAN_NUM(R3)	; Assume scan size of 8.
	CMPL	#8, R6			; Have at least 8 buffers?
	BLEQU	45$			; LEQU just use 8.
	MOVL	R6, GBH$L_SCAN_NUM(R3)	; Else only use # in section.
45$:	DECL	R6			; Num - 1.
	MULL2	#GBD$C_BLN, R6		; Offset to last GBD from first.
	ADDL3	#GBD$C_BLN+GBH$C_BLN+511, R6, R2 ; End of GBD's + page-1 byte.
	BICW2	#511, R2		; Round off to even page.
	ADDL2	R3, R0			; Start address of GBD's.
	ADDL2	R0, R6			; Addr of last GBD.
	ASSUME	GBH$L_GBD_FLNK EQ 0
	SUBL3	R3, R6, (R3)		; Forw link points to last GBD.
	MOVL	(R3), GBH$L_GBD_END(R3)	; Offset to last GBD.
50$:
	ASSUME	GBD$L_FLINK EQ 0
	MNEGL	#GBD$C_BLN, (R0)	; Offset to next GBD.
	MOVL	#GBD$C_BLN, GBD$L_BLINK(R0) ; Offset to last GBD.
	ASSUME	GBD$B_BLN EQ <GBD$B_BID + 1>
	MOVW	#<GBD$C_BID+<GBD$C_BLN/4@8>>, GBD$B_BID(R0) ; Id and bln.
	MNEGL	#1, GBD$L_VBN(R0)	; Init VBN to -1.
	MOVW	R5, GBD$W_SIZE(R0)	; Store buffer size.
	MOVL	R2, GBD$L_REL_ADDR(R0)	; Store offset to buffer.
	ADDL2	R5, R2			; Point to next buffer.
	ACBL	R6, #GBD$C_BLN, R0, 50$	; Loop until past last GBD.
	ASSUME	GBH$L_GBD_FLNK EQ 0
	MNEGL	(R3), GBD$L_BLINK(R6)	; Last GBD's back link is
					; opposite of header's forw link.
	MNEGL	GBH$L_GBD_BLNK(R3),-	; First GBD's forw link is
		GBH$C_BLN+GBD$L_FLINK(R3) ; opposite of header's back link.

;
; If tracing is to be enabled, noop the following branch.
;

	BRB	STORE_PTR		; To make it easy to patch in tracing.
	JMP	INIT_TRC		; To init tracing blocks.
STORE_PTR:
	ADDL2	#16, SP			; 'Pop' INADR, RETADR arrays off stack.
	INCL	GBH$L_USECNT(R3)	; Increment accessor count for section.
	MOVL	R3, IFB$L_GBH_PTR(R10)	; Point to the section.
	TSTL	R9			; Irab present?
	BEQL	20$			; EQL then no irab.
	SSB	#IRB$V_GBLBUFF, (R9)	; Note this irab has extra gbpb, blb.
20$:	CMPL	#1,GBH$L_USECNT(R3)	; Are we first accessor?
	BNEQ	30$			; No, branch to release lock.
	MOVL	IFB$L_PAR_LOCK_ID(R10),-; Save file lock id in global section.
		GBH$L_LOCK_ID(R3)
	BSBW	RM$LOWER_SYSLOCK	; Turn file lock into system lock.
	BSBW	RM$LOWER_GBS_LOCK	; Lower lock on global buffer section.
	MOVL	IFB$L_SFSB_PTR(R10),R4	; Put address of SFSB in R4 for INIT_SFSB.
	BSBW	RM$INIT_SFSB_IRB	; Get a file lock for process using IRB to stall.
	BRW	EXIT			; Continue.
30$:	MOVL	GBH$L_LOCK_ID(R3),-	; Move the parent lock id for bucket
		IFB$L_PAR_LOCK_ID(R10)	;  locks into ifab from global buffer header.
	BSBW	RM$LOWER_GBS_LOCK	; Do lock mode conversion.
	BRW	EXIT			; Continue.

;
; An error has been detected.  Disassociate from section, return structures
; already allocated.
;

SEC_ERR1:
	MOVL	#RMS$_DME, R0		; Give DME error if not all mapped.
SEC_ERR:
	ASSUME	FAB$L_STV EQ RAB$L_STV
	MOVL	R0, RAB$L_STV(R8)	; Save error code.
	MOVQ	(SP)+, R0		; Get RETADR off stack into r0 and r1.
	ADDL2	#8, SP			; Pop INADR off stack.
	RMSERR	CRMP, -(SP)		; Note error.
	BSBW	RM$UNMAP_GBL_ALT	; Delete the whole VA.
	BRW	ERL0			; Branch to finish up.


	$NEWPSECT	RM$TRACE
NUMTRC:	.LONG	400			; Number of trace blocks to allocate.

;
; Add in extra bytes for trace blocks after size of section is determined.
;

ADDTRC:
	MOVL	NUMTRC, R0		; Get number of trace blocks desired.
	BNEQ	10$			; Branch if non-zero.
	INCL	R0			; Get at least one.
10$:	MULL2	#TRC$C_BLN, R0		; Get size of trace blocks.
	ADDL2	#511, R0		; Add in almost a page.
	BICW2	#511, R0		; Round to even page's worth.
	ADDL2	R0, R2			; Add in to size being requested.
	JMP	MAP_IT			; And return to mainline.

;
; Initialize the trace blocks and pointer from the global buffer header.
;
; R3 - pointer to GBH
; R5 - buffer size
;

INIT_TRC:
	ASSUME	GBH$L_GBD_FLNK EQ 0
	ADDL3	(R3), R3, R0 		; Get address of last GBD in list.
	ADDL3	GBD$L_REL_ADDR(R0), R5, R0 ; R0 now first byte after last buff.
	SUBL3	#GBH$L_TRC_FLNK, R0, GBH$L_TRC_FLNK(R3)	; Offset to 1st trc blk
	ADDL2	R3, R0			; R0 now addr of first trace block.
	ADDL3	GBH$L_GS_SIZE(R3), R3, R1 ; Get addr of end of gbl sec.
	SUBL2	#TRC$C_BLN, R1		; Limit for last trace block.
10$:
	ASSUME	<TRC$C_BLN & 7> EQ 0	; These will line up on quad boundary.
	ASSUME	TRC$L_FLNK EQ 0
	MOVL	#TRC$C_BLN, (R0)+	; Fwd offset to next block.
	ASSUME	TRC$L_BLNK EQ 4
	MNEGL	#TRC$C_BLN, (R0)+	; Back offset to last block.
	ASSUME	TRC$B_BID EQ 8
	ASSUME	TRC$B_BLN EQ <TRC$B_BID + 1>
	MOVW	#<TRC$C_BID+<TRC$C_BLN/4@8>>, (R0)+ ; Store id and bln.
	ACBL	R1, #TRC$C_BLN-10, R0, 10$ ; Keep going until past limit.

	SUBL2	#TRC$C_BLN, R0		; Back up to last trace block.
	SUBL3	R3, R0, R1		; R1 is offset to last trc blk.
	SUBL3	#GBH$L_TRC_FLNK, R1, GBH$L_TRC_BLNK(R3)	; Back link in header.
	MNEGL	GBH$L_TRC_BLNK(R3),TRC$L_FLNK(R0) ; Flnk to hdr from last trc.
	MOVAL	GBH$L_TRC_FLNK(R3), R0	; Addr of flnk from header.
	ADDL2	(R0), R0		; Get first trace block.
	MNEGL	GBH$L_TRC_FLNK(R3), TRC$L_BLNK(R0) ; Fix it's back link.
	JMP	STORE_PTR		; Jump back to main line.


;
; Routine called to store information in trace block from initial call
; to cache routine.
;
; AP is destroyed.  All other registers preserved.

RM$CACH_IN::
	PUSHR	#^M<R0,R1>		; Save registers used.
10$:	MOVL	IFB$L_GBH_PTR(R10), R0	; Get pointer to gbh, if any.
	BEQL	EX2			; Exit if none.
	BSBW	REMQT			; Get a trace block.
	BEQL	EX2			; Exit if none.
	MOVAB	TRC$W_FUNCTION(R0), R0	; Get addr of function cell.
	MOVW	#GBH$M_CACHE_IN, (R0)+	; Note this function.
	MOVL	R9, (R0)+		; structure
	MOVL	@#CTL$GL_PCB, AP	; Get pcb addr.
	MOVW	PCB$L_PID(AP), (R0)+	; pid
	BSBW	CNT			; seqnum
	MOVL	4(SP), (R0)+		; vbn
	MOVL	12(SP), (R0)+		; return1
	MOVL	32(SP), (R0)+		; return2
	MOVL	R3, (R0)+		; arg_flg
	CLRL	(R0)+			; bdb_addr
	CLRQ	(R0)+			; not used
	CLRQ	(R0)+			; not used
	CLRQ	(R0)+			; not used
	SUBL3	#TRC$C_BLN, R0, R1	; Get addr of trc blk
	MOVL	IFB$L_GBH_PTR(R10), R0	; Get addr of gbh.
	BSBW	INSQH			; Insert blk at head of list.
EX2:	POPR	#^M<R0,R1>		; Restore registers.
	RSB				; Return to cache



;
; Store useful information from cache exit.
;

RM$CACH_OUT::
	PUSHR	#^M<R0,R1>		; Save registers.
1$:	MOVL	IFB$L_GBH_PTR(R10), R0	; Get GBH ptr, if any.
	BEQL	EX2			; Exit if none.
	BSBW	REMQT			; Remove a trc blk from tail.
	BEQL	EX2			; Exit if none.
	MOVAB	TRC$W_FUNCTION(R0), R0	; Ptr to func field.
	MOVW	#GBH$M_CACHE_OUT, (R0)+	; function
	MOVL	R9, (R0)+		; structure
	MOVL	@#CTL$GL_PCB, AP	; Addr of PCB
	MOVW	PCB$L_PID(AP), (R0)+	; pid
	BSBW	CNT			; structure
	CLRL	(R0)+			; vbn
	MOVL	12(SP), (R0)+		; return1
	MOVL	36(SP), (R0)+		; return2
	MOVL	(SP), (R0)+		; arg_flg
	MOVL	R4, (R0)+		; bdb_addr
	BEQL	10$
	MOVL	BDB$L_VBN(R4), -20(R0)
	MOVW	BDB$W_USERS(R4), (R0)+
	MOVW	BDB$W_BUFF_ID(R4), (R0)+
	MOVB	BDB$B_CACHE_VAL(R4), (R0)+
	MOVB	BDB$B_FLGS(R4), (R0)+
	MOVL	BDB$L_VBNSEQNO(R4), (R0)+
	MOVL	BDB$L_BLB_PTR(R4), R1
	BEQL	20$
	MOVB	BLB$B_MODEHELD(R1), (R0)+
	MOVB	BLB$B_BLBFLGS(R1), (R0)+
	MOVL	R1, (R0)+
	MOVL	BLB$L_LOCK_ID(R1), (R0)+
	MOVL	BLB$L_VALSEQNO(R1), (R0)+
5$:
	SUBL3	#TRC$C_BLN, R0, R1	; Get ptr to trc blk to insert.
	MOVL	IFB$L_GBH_PTR(R10), R0
	BSBW	INSQH			; Insert at head of queue.
	BRW	EX2			; Branch to exit.
10$:	CLRQ	(R0)+
	CLRQ	(R0)+
15$:	CLRQ	(R0)+
	BRB	5$
20$:	CLRW	(R0)+
	CLRL	(R0)+
	BRB	15$


;
; Store trace info for initial call to release.
;

RM$RLS_IN::
	PUSHR	#^M<R0,R1,R2>
1$:	MOVL	IFB$L_GBH_PTR(R10), R0
	BNEQ	3$
	BRW	EX1
3$:	BSBW	REMQT			; Get trc blk from end.
	BNEQ	4$			; Branch if got one.
	BRW	EX1			; Else exit.
4$:	MOVAB	TRC$W_FUNCTION(R0), R0
	MOVW	#GBH$M_RLS_IN, (R0)+	; function
	MOVL	R9, (R0)+		; structure
	MOVL	@#CTL$GL_PCB, AP
	MOVW	PCB$L_PID(AP), (R0)+	; pid
	BSBW	CNT			; seqnum

	CLRQ	R1
	TSTL	R4
	BNEQ	5$

	CLRL	(R0)+			; VBN
	BRB	50$			
5$:
	CMPB	#BLB$C_BID, BLB$B_BID(R4)
	BNEQ	20$
	MOVL	R4, R1
	BRB	30$
20$:	MOVL	BDB$L_BLB_PTR(R4), R1
	MOVL	R4, R2
30$:	TSTL	R2			; IS THERE BDB?
	BEQL	40$
	MOVL	BDB$L_VBN(R2), (R0)+
	BRB	50$
40$:	MOVL	BLB$L_VBN(R1), (R0)+
50$:	MOVL	16(SP), (R0)+		; RETURN1
	MOVL	32(SP), (R0)+		; RETURN2
	MOVL	R3, (R0)+		; FLAGS
	MOVL	R2, (R0)+		; BDB ADDR
	BEQL	60$
	MOVW	BDB$W_USERS(R2), (R0)+
	MOVW	BDB$W_BUFF_ID(R2), (R0)+
	MOVB	BDB$B_CACHE_VAL(R2), (R0)+
	MOVB	BDB$B_FLGS(R2), (R0)+
	MOVL	BDB$L_VBNSEQNO(R2), (R0)+
	BRB	70$
60$:
	CLRQ	(R0)+
	CLRW	(R0)+
70$:	TSTL	R1			; IS THERE BLB?
	BEQL	80$
	MOVB	BLB$B_MODEHELD(R1), (R0)+
	MOVB	BLB$B_BLBFLGS(R1), (R0)+
	MOVL	R1, (R0)+
	MOVL	BLB$L_LOCK_ID(R1), (R0)+
	MOVL	BLB$L_VALSEQNO(R1), (R0)+
	BRB	90$
80$:
	CLRW	(R0)+
	CLRL	(R0)+
	CLRQ	(R0)+
90$:
	SUBL3	#TRC$C_BLN, R0, R1
	MOVL	IFB$L_GBH_PTR(R10), R0
	BSBW	INSQH			; Insert element at head of queue.
EX1:	POPR	#^M<R0,R1,R2>
	RSB


;
; Store trace info at exit of release routine.
;

RM$RLS_OUT::
	PUSHR	#^M<R0,R1,R2>
1$:	MOVL	IFB$L_GBH_PTR(R10), R0
	BNEQ	3$
	BRW	EX1
3$:	BSBW	REMQT			; Get trc blk from end of queue.
	BNEQ	4$			; Br if got one
	BRW	EX1			; Else quit.
4$:	MOVAB	TRC$W_FUNCTION(R0), R0
	MOVW	#GBH$M_RLS_OUT, (R0)+	; function
	MOVL	R9, (R0)+		; structure
	MOVL	@#CTL$GL_PCB, AP
	MOVW	PCB$L_PID(AP), (R0)+	; pid
	BSBW	CNT			; seqnum

	CLRQ	R1
	TSTL	R4
	BNEQ	5$

	CLRL	(R0)+			; VBN
	BRB	50$			
5$:
	CMPB	#BLB$C_BID, BLB$B_BID(R4)
	BNEQ	20$
	MOVL	R4, R1
	BRB	30$
20$:	MOVL	BDB$L_BLB_PTR(R4), R1
	MOVL	R4, R2
30$:	TSTL	R2			; IS THERE BDB?
	BEQL	40$
	MOVL	BDB$L_VBN(R2), (R0)+
	BRB	50$
40$:	MOVL	BLB$L_VBN(R1), (R0)+
50$:	MOVL	16(SP), (R0)+		; RETURN1
	MOVL	32(SP), (R0)+		; RETURN2
	MOVL	(SP), (R0)+		; STATUS
	MOVL	R2, (R0)+		; BDB ADDR
	BEQL	60$
	MOVW	BDB$W_USERS(R2), (R0)+
	MOVW	BDB$W_BUFF_ID(R2), (R0)+
	MOVB	BDB$B_CACHE_VAL(R2), (R0)+
	MOVB	BDB$B_FLGS(R2), (R0)+
	MOVL	BDB$L_VBNSEQNO(R2), (R0)+
	BRB	70$
60$:
	CLRQ	(R0)+
	CLRW	(R0)+
70$:	TSTL	R1			; IS THERE BLB?
	BEQL	80$
	MOVB	BLB$B_MODEHELD(R1), (R0)+
	MOVB	BLB$B_BLBFLGS(R1), (R0)+
	MOVL	R1, (R0)+
	MOVL	BLB$L_LOCK_ID(R1), (R0)+
	MOVL	BLB$L_VALSEQNO(R1), (R0)+
	BRB	90$
80$:
	CLRW	(R0)+
	CLRL	(R0)+
	CLRQ	(R0)+
90$:
	SUBL3	#TRC$C_BLN, R0, R1
	MOVL	IFB$L_GBH_PTR(R10), R0
	BSBW	INSQH			; Insert at head of queue.
	BRW	EX1	

CNT:
	CLRW	(R0)+
	RSB

;CRASH:	RMSPBUG	-99

;
; Routine to remove an element from the end of a self relative queue.
; The forward and back links in the removed element remain intact.
;
; Input: R0 - GBH header.
; Output: R0 - trc blk element to use.
; R1 destroyed.
;

REMQT:
	TSTL	GBH$L_TRC_FLNK(R0)	; Make sure trace blocks exits.
	BEQL	10$			; EQL there aren't any.
	REMQTI	GBH$L_TRC_FLNK(R0),R0	; Remove a trc block from end of queue.
10$:	RSB				; Return.

;
; Routine to insert the trc blk previously removed from the tail of the queue
; onto the head of the queue.
;
; Input:
; R0 - GBH ptr.
; R1 - element to insert.
;

INSQH:
	INSQHI	(R1),GBH$L_TRC_FLNK(R0)	; Insert onto front of queue.
	RSB				; And return.

	$PSECT_RESTORE
	.END
