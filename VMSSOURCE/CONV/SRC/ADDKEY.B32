%TITLE	'VAX-11 CONVERT'
MODULE	ADD$KEY		( IDENT='V04-000',
			OPTLEVEL=3
			) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT
!
! Abstract:	ADD_KEY routines
!
! Contents:
!		CHECK_KEY
!		MAKE_DESCRIPTOR
!		CHECK_XAB
!		STUFF_KEY_DESC
!		LOAD_KEY
!
! Environment:
!
!		VAX/VMS Operating System
!
!--

!
! Author:	Keith B. Thompson	Creation date:	December-1982
!
!
! Modified by:
!
!****


PSECT
	OWN	= _CONV$OWN	(PIC),
	GLOBAL	= _CONV$GLOBAL	(PIC),
	PLIT	= _CONV$PLIT	(SHARE,PIC),
	CODE	= _CONV$CODE	(SHARE,PIC);

LIBRARY 'SYS$LIBRARY:LIB.L32';
LIBRARY	'SRC$:CONVERT';

!	Error codes
!
DEFINE_ERROR_CODES;

EXTERNAL ROUTINE
	CONV$$EXTEND_AREA	: CL$EXTEND_AREA	NOVALUE,
	CONV$$GET_VM		: CL$GET_VM,
	CONV$$INIT_FAST_LOAD	: CL$INIT_FAST_LOAD,
	CONV$$LOAD_SECONDARY	: CL$LOAD_SECONDARY	NOVALUE,
	CONV$$PARSE_DEF,
	CONV$$READ_PROLOGUE	: CL$READ_PROLOGUE	NOVALUE,
	CONV$$RMS_OPEN_ERROR	: NOVALUE,
	CONV$$SET_KEY_DESC	: CL$SET_KEY_DESC,
	CONV$$SORT_SECONDARY	: CL$SORT_SECONDARY,
	CONV$$WRITE_AREA_DESC	: CL$WRITE_AREA_DESC	NOVALUE,
	CONV$$WRITE_KEY_DESC	: CL$WRITE_KEY_DESC	NOVALUE,
	CONV$$WRITE_PROLOGUE	: NOVALUE;

MACRO
	DEFINE_XAB_GLOBAL	= GLOBAL REGISTER
					XAB = 10 : REF BLOCK [ ,BYTE ]%,

	DEFINE_XAB		= EXTERNAL REGISTER
					XAB : REF BLOCK [ ,BYTE ]%;

LINKAGE
	AL$MAKE_DESCRIPTOR	= JSB : GLOBAL ( XAB		= 10,
						 KEY_DESC	= 11 ),
	AL$CHECK_XAB		= JSB : GLOBAL ( XAB		= 10,
						 KEY_DESC	= 11 ),
	AL$STUFF_KEY_DESC	= JSB : GLOBAL ( XAB		= 10,
						 KEY_DESC	= 11 );

FORWARD ROUTINE
	MAKE_DESCRIPTOR		: AL$MAKE_DESCRIPTOR	NOVALUE,
	CHECK_XAB		: AL$CHECK_XAB,
	STUFF_KEY_DESC		: AL$STUFF_KEY_DESC	NOVALUE;

EXTERNAL
	CONV$AB_FLAGS		: BLOCK [ ,BYTE ],
	CONV$AR_OUT_FILE_NAM	: REF DESC_BLK,			! Output File

	CONV$AB_OUT_XABSUM	: $XABSUM_DECL,
	CONV$AB_OUT_NAM		: $NAM_DECL,
	CONV$AB_OUT_FAB		: $FAB_DECL,
	CONV$AB_OUT_RAB		: $RAB_DECL,

	CONV$AB_FDL_FAB		: REF BLOCK [ ,BYTE ],
	CONV$AB_FDL_RAB		: REF BLOCK [ ,BYTE ],

	CONV$GL_WORK_F,

	CONV$GL_KEY_DESC_BUF,
	CONV$GL_KEY_DESC_VBN,
	CONV$AR_AREA_BLOCK	: REF BLOCKVECTOR [ ,AREA$C_BLN,BYTE ];

GLOBAL
	CONV$GL_ADD_DELE_KEY	: LONG;


%SBTTL	'OPEN_OUTPUT'
GLOBAL ROUTINE	ADD$$OPEN_OUTPUT =
!++
!
! Functional Description:
!
!	Opens the output file, connects a record stream and
!	allocates and fills in the prologue key and
!	area descriptor blocks for sort and or fast load
!
! Calling Sequence:
!
!	ADD$$OPEN_OUTPUT
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!	CONV$AB_OUT_FAB	- Output fab
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!
!	CONV$AB_FLAGS [ CONV$V_OUT ]	- Set on success
!
! Routine Value:
!
!	CONV$_SUCCESS or error
!
! Routines Called:
!
!	$PARSE
!	CONV$$RMS_OPEN_ERROR	- By RMS as an AST
!	$DISPLAY
!	$OPEN
!	CONV$$READ_PROLOGUE
!	$CONNECT
!
! Side Effects:
!	none
!
!--

    BEGIN

    ! Any rms errors on the output fab are OPENOUT errors
    !
!    CONV$AB_OUT_FAB [ FAB$L_CTX ] = CONV$_OPENOUT;

    ! Use the file name in the call argument
    !
    CONV$AB_OUT_FAB [ FAB$B_FNS ] = .CONV$AR_OUT_FILE_NAM [ DSC$W_LENGTH ];
    CONV$AB_OUT_FAB [ FAB$L_FNA ] = .CONV$AR_OUT_FILE_NAM [ DSC$A_POINTER ];

    $OPEN( FAB=CONV$AB_OUT_FAB,ERR=CONV$$RMS_OPEN_ERROR );

    ! If we got here then we have opened a file.
    !
    CONV$AB_FLAGS [ CONV$V_OUT ] = _SET;

    ! Is't not very exciting if it's not an index file
    !
    IF .CONV$AB_OUT_FAB [ FAB$B_ORG ] NEQU FAB$C_IDX
    THEN
	RETURN CONV$_NOTIDX;

    ! Connect the file for Block IO for reading the prologue.
    !
    $CONNECT ( RAB=CONV$AB_OUT_RAB,ERR=CONV$$RMS_OPEN_ERROR );

    ! Read the prologue
    !
    CONV$$READ_PROLOGUE();

    ! Any errors on the output rab should be write errors (exceptions are in
    ! the fast load code
    !
    CONV$AB_OUT_RAB [ RAB$L_CTX ] = CONV$_WRITEERR;

    ! Return normally
    !
    RETURN CONV$_SUCCESS

    END;

%SBTTL	'CHECK_KEY'
GLOBAL ROUTINE	ADD$$CHECK_KEY : AL$CHECK_KEY =
!++
!
! Functional Description:
!
!	This routine parses the fdl file and searches for the proper key xab
!	if one is found it is verified and a index descriptor is added to the
!	file
!
! Calling Sequence:
!
!	ADD$$CHECK_KEY()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!
!
! Routine Value:
!
!
! Routines Called:
!
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_XAB_GLOBAL;
    DEFINE_KEY_DESC;

    LOCAL
	STATUS;

    ! Check the key against the file
    !
    IF .CONV$GL_ADD_DELE_KEY NEQU .CONV$AB_OUT_XABSUM [ XAB$B_NOK ]
    THEN
	RETURN 0;	! illegal key value

    ! Find the key xab described by the fdl file (first parse it)
    !
    IF NOT ( STATUS = CONV$$PARSE_DEF() )
    THEN
	RETURN .STATUS;

    ! Get the first xab
    !
    XAB = .CONV$AB_FDL_FAB [ FAB$L_XAB ];

    ! Loop until xabs are exausted or the correct one is found
    !
    WHILE .XAB NEQU 0
    DO
	BEGIN

	! Is this a key xab?
	!
	IF .XAB [ XAB$B_COD ] EQLU XAB$C_KEY
	THEN

	    ! Is it the right one?
	    !
	    IF .XAB [ XAB$B_REF ] EQLU .CONV$GL_ADD_DELE_KEY
	    THEN
		EXITLOOP;

	XAB = .XAB [ XAB$L_NXT ]

	END;

    ! Did we find it?
    !
    IF .XAB EQLU 0
    THEN
	RETURN 0;	! key not defined

    ! Check the xab to see if it is a valid key
    !
    IF NOT ( STATUS = CHECK_XAB() )
    THEN
	RETURN .STATUS;
!	SIGNAL_STOP( CONV$_PLV,.STATUS,.CONV$GL_ADD_DELE_KEY );

    MAKE_DESCRIPTOR();

    RETURN CONV$_SUCCESS

    END;

%SBTTL	'MAKE_DESCRIPTOR'
ROUTINE	MAKE_DESCRIPTOR : AL$MAKE_DESCRIPTOR NOVALUE =
!++
!
! Functional Description:
!
!	Allocates and writes a key descriptor to the file then links
!	it into the key descriptor chain
!
! Calling Sequence:
!
!	MAKE_DESCRIPTOR()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!
!
! Routine Value:
!	none
!
! Routines Called:
!
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_XAB;
    DEFINE_KEY_DESC;

    LOCAL
	VBN;

    ! Check to see if the new key descriptor fits if not extend the file
    !
    IF 1 GTRU ( .CONV$AR_AREA_BLOCK [ 0,AREA$L_CNBLK ] -
		.CONV$AR_AREA_BLOCK [ 0,AREA$L_USED ] )
    THEN
	CONV$$EXTEND_AREA( 0 );

    ! Update the area descriptor and save the vbn
    !
    CONV$GL_KEY_DESC_VBN = .CONV$AR_AREA_BLOCK [ 0,AREA$L_NXTVBN ];

    CONV$AR_AREA_BLOCK [ 0,AREA$L_NXTVBN ] =
			.CONV$AR_AREA_BLOCK [ 0,AREA$L_NXTVBN ] + 1;
    CONV$AR_AREA_BLOCK [ 0,AREA$L_USED ] =
			.CONV$AR_AREA_BLOCK [ 0,AREA$L_USED ] + 1;

    ! Update the area desc so as to remove the hole we just made
    !
    CONV$$WRITE_AREA_DESC( 0 );

    ! Make your own key descriptor in the normal buffer (VBN already set)
    !
    KEY_DESC = .CONV$GL_KEY_DESC_BUF;

    STUFF_KEY_DESC();

    ! Save VBN
    !
    VBN = .CONV$GL_KEY_DESC_VBN;

    ! Write the descriptor we just made
    !
    CONV$$WRITE_KEY_DESC();

    ! Get the key desc just before the one we added
    !
    CONV$$SET_KEY_DESC( .CONV$GL_ADD_DELE_KEY - 1 );

    KEY_DESC [ KEY$L_IDXFL ] = .VBN;

    ! Update the key desc making the new one in the chain
    !
    CONV$$WRITE_KEY_DESC();

    RETURN

    END;

%SBTTL	'CHECK_XAB'
ROUTINE	CHECK_XAB : AL$CHECK_XAB =
!++
!
! Functional Description:
!
!	Does consistancy checking of the key xab for correctness
!
! Calling Sequence:
!
!	CHECK_XAB
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!
!
! Routine Value:
!
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_XAB;

    IF  .XAB [ XAB$B_IAN ] NEQU .XAB [ XAB$B_LAN ]
    THEN
	RETURN RMS$_IBK;	! Illegal area

    ! Check to see if the areas are in range
    !
    IF .XAB [ XAB$B_IAN ] GEQU .CONV$AB_OUT_XABSUM [ XAB$B_NOA ]
    THEN
	RETURN RMS$_IAN;	! Illegal area

    IF .XAB [ XAB$B_LAN ] GEQU .CONV$AB_OUT_XABSUM [ XAB$B_NOA ]
    THEN
	RETURN RMS$_LAN;	! Illegal area

    IF .XAB [ XAB$B_DAN ] GEQU .CONV$AB_OUT_XABSUM [ XAB$B_NOA ]
    THEN
	RETURN RMS$_DAN;	! Illegal area

    ! Stuff some calculated variables
    !
    XAB [ XAB$B_IBS ] = .CONV$AR_AREA_BLOCK [ .XAB[ XAB$B_IAN ],AREA$B_ARBKTSZ ];
    XAB [ XAB$B_DBS ] = .CONV$AR_AREA_BLOCK [ .XAB[ XAB$B_DAN ],AREA$B_ARBKTSZ ];

    ! Check data type
    !
    IF .XAB [ XAB$B_DTP ] GTRU XAB$C_MAXDTP
    THEN
	RETURN RMS$_DTP;	! Invalid data type

    BEGIN

    LOCAL
	TOTAL_SIZE	: LONG INITIAL(0);

    BIND
	KEY_SIZE = XAB [ XAB$B_SIZ0 ] : VECTOR [ ,BYTE ],
	KEY_POS  = XAB [ XAB$W_POS0 ] : VECTOR [ ,WORD ];

    ! Get the # of segments, total size of the key and the min record size
    ! NOTE: NSG and MRL will be zero from FDL$PARSE
    !
    INCR I FROM 0 TO 7 BY 1
    DO

	! Is there a key here
	!
	IF .KEY_SIZE [ .I ] NEQU 0
	THEN
	    BEGIN

	    XAB [ XAB$B_NSG ] = .XAB [ XAB$B_NSG ] + 1;

	    ! Find the total key size
	    !
	    IF .KEY_SIZE [ .I ] GTRU .TOTAL_SIZE
	    THEN
		TOTAL_SIZE = .KEY_SIZE [ .I ];

	    ! Sind the min. record size
	    !
	    IF .XAB [ XAB$W_MRL ] LSSU .KEY_SIZE [ .I ] + .KEY_POS [ .I ]
	    THEN
		XAB [ XAB$W_MRL ] = .KEY_SIZE [ .I ] + .KEY_POS [ .I ]

	    END;

    ! Check # of segments
    !
    IF .XAB [ XAB$B_NSG ] EQLU 0
    THEN
	RETURN 0;	! Invalid key

    ! Check key size
    !
    IF .TOTAL_SIZE GTRU 255
    THEN
	RETURN RMS$_KSZ
    ELSE
	XAB [ XAB$B_TKS ] = .TOTAL_SIZE

    END;

    ! Check record size
    !
    IF ( .CONV$AB_OUT_FAB [ FAB$W_MRS ] NEQU 0 ) AND
	( .CONV$AB_OUT_FAB [ FAB$W_MRS ] LSSU .XAB [ XAB$W_MRL ] )
    THEN
	RETURN RMS$_POS;	! Invalid key position

    RETURN CONV$_SUCCESS

    END;

%SBTTL	'STUFF_KEY_DESC'
ROUTINE	STUFF_KEY_DESC : AL$STUFF_KEY_DESC NOVALUE =
!++
!
! Functional Description:
!
!	Does the stuffing of the index descriptor from the key xab
!
! Calling Sequence:
!
!	STUFF_KEY_DESC()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!
!
! Routine Value:
!	none
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_XAB;
    DEFINE_KEY_DESC;

    ! Zero the descriptor
    !
    CH$FILL( 0,KEY$C_BLN,.KEY_DESC );

    ! Copy the xab into the descriptor (this cheat should always work)
    !
    CH$MOVE( XAB$C_KEYLEN - 4,XAB [ XAB$B_IAN ],KEY_DESC [ KEY$B_IANUM ] );

    ! Copy key name if any
    !
    IF .XAB [ XAB$L_KNM ] NEQU 0
    THEN
	CH$MOVE( 32,.XAB [ XAB$L_KNM ],KEY_DESC [ KEY$T_KEYNAM ] );

    ! Stuff the data type into seq0 type (prologue 3 screwup) and zero the rest
    !
    KEY_DESC [ KEY$B_TYPE0 ] = .KEY_DESC [ KEY$B_DATATYPE ];

    CH$FILL( 0,7,KEY_DESC [ KEY$B_TYPE1 ] );

    ! Finally say that the index is not initialized
    !
    KEY_DESC [ KEY$V_INITIDX ] = _SET;

    RETURN

    END;

%SBTTL	'LOAD_KEY'
GLOBAL ROUTINE	ADD$$LOAD_KEY : AL$LOAD_KEY =
!++
!
! Functional Description:
!
!
! Calling Sequence:
!
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!
!
! Routine Value:
!
!
! Routines Called:
!
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_KEY_DESC;
    DEFINE_CTX_GLOBAL;
    DEFINE_BUCKET_GLOBAL;

    LOCAL
	STATUS;

    ! Get the new key
    !
    CONV$$SET_KEY_DESC( .CONV$GL_ADD_DELE_KEY );

    ! Init the fast load process
    !
    CONV$$INIT_FAST_LOAD( .KEY_DESC [ KEY$B_KEYSZ ] );

    CONV$GL_WORK_F = 2;

    ! Set up the sort for the secondary key.  The sort is a INDEX sort.
    ! This type of sort will produce a file of RFA's and keys of the
    ! primary data level we just made.
    !
    IF NOT ( STATUS = CONV$$SORT_SECONDARY() )
    THEN
	RETURN .STATUS;

    ! Now that the file is sorted get the data and load it in.
    !
    CONV$$LOAD_SECONDARY();

    ! Write the prologue (area desc)
    !
    CONV$$WRITE_PROLOGUE();

    ! And the key descriptor
    !
    CONV$$WRITE_KEY_DESC();

    RETURN 1

    END;

END	ELUDOM
