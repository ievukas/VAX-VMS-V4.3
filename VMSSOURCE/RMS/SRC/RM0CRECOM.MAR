	$BEGIN	RM0CRECOM,000,RM$RMS0,<COMMON CREATE FILE>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:	this module performs the create file fcp function.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 Creation Date: 11-MAY-1977
;
; Modified By:
;
;	V03-028	RAS0309		Ron Schaefer		15-Jun-1984
;		Check for errors from RM$CREACC_SET1.
;
;	V03-027	JWT0175		Jim Teague		10-Apr-1984
;		Move ATR page deallocation code.
;
;	V03-026	DGB0033		Donald G. Blair		22-Mar-1984
;		Fill in XAB$L_ACLSTS during call to rm$xab_scan.
;
;	V03-025	JWT0166		Jim Teague		20-Mar-1984
;		Use dynamically-allocated scratch page for accumulating
;		ATRs for QIOs.
;
;	V03-024	DGB0007		Donald G. Blair		04-Mar-1984
;		Make changes related to the way we call the ACP in order
;		to support access mode protected files.
;
;	V03-023	JWT0148		Jim Teague		14-Dec-1983
;		Enforce RU settings (RU, ONLY_RU, NEVER_RU).
;
;	V03-022	LMP0133		L. Mark Pilant,		3-Aug-1983  14:53
;		Get default protection from PCB instead of P1 space.  Also
;		don't supply the protection attribute unless explicitly
;		given in a PROtection XAB.
;
;	V03-021	RAS0164		Ron Schaefer		27-Jun-1983
;		Fix 5 broken branches to RM0JOURNAL routines.
;
;	V03-020	KPL0006		Peter Lieberwirth	22-Jun-1983
;		Add support to journal expiration date on file creation.
;		Add a mask to tell recovery which attributes have been
;		journaled.
;
;	V03-019	KPL0005		Peter Lieberwirth	16-Jun-1983
;		Fix bug in MOVC3 of FIB to create AT entry.
;
;	V03-018	TSK0001		Tamar Krichevsky	15-Jun-1983
;		Fix broken branches into journaling psect.
;
;	V03-017	KPL0004		Peter Lieberwirth	 3-Jun-1983
;		Fix journaling $CREATE attribute handling.  Use correct
;		RJR FIB entry.
;
;	V03-016	KPL0003		Peter Lieberwirth	30-May-1983
;		Fix error path bugs introduced in V03-015.
;
;	V03-015	KPL0002		Peter Lieberwirth	16-May-1983
;		Add initial support for journaling $CREATEs.  Clean
;		up some old code, also.  Changes for robust RJR format.
;
;	V03-014	RAS0153		Ron Schaefer		 2-May-1983
;		Delete reference to $XABACEDEF missed by RAS0148.
;
;	V03-013	RAS0148		Ron Schaefer		26-Apr-1983
;		Add initial support for extended XABPRO.
;
;	V03-012	JWH0216		Jeffrey W. Horn		14-Apr-1983
;		Re-organize journaling support so that we always
;		write journal names and the Id-ACE after the file
;		is accessed.
;
;	V03-011	JWH0196		Jeffrey W. Horn		18-Mar-1983
;		Add support for XABACE.
;
;	V03-010	SHZ0001		Stephen H. Zalewski	21-Dec-1982
;		Store the Files-11 hbk and ebk in different fields in the
;		ifb than we keep the swapped hbk and ebk.
;		
;	V03-009	JWH0161		Jeffrey W. Horn		21-Dec-1982
;		Reset some FIB fields when perfoming IO$_MODIFY
;		to write journal name.
;
;	V03-008 MCN0001		Maria del C. Nasr	08-Dec-1982
;		If the FIB alignment option is RFI with a file id of
;		zero, change it to ANY so that we do not get a file
;		not found error from the ACP.
;
;	V03-007	ACG0306		Andrew C. Goldstein,	13-Dec-1982  14:57
;		Remove obsolete file header symbols
;
;	V03-006	JWH0103		Jeffrey W. Horn		20-Sep-1982
;		Remove RM$ASSJNL, RM$MAPJNL calls.  This code
;		has been moved to RM$SETEBK in RM0ACCESS.
;
;	V03-005	JWH0110		Jeffrey W. Horn		29-Sep-1982
;		Fix typos in V03-004.
;
;	V03-004	JWH0109		Jeffrey W. Horn		29-Sep-1982
;		Fix problems with CIF logic in V03-003.
;
;	V03-003	JWH0002		Jeffrey W. Horn		31-Aug-1982
;		Fix problems CIF logic in V03-001.
;		Add support for Recovery Unit Journals.
;
;	V03-002	KBT0203		Keith B. Thompson	23-Aug-1982
;		Reorganize psects
;
;	V03-001	JWH0001		Jeffrey W. Horn		02-Jul-1982
;		Put in journaling support.
;
;	V02-028	KPL0001		Peter Lieberwirth	28-Dec-1981
;		Do a better job deleting the file after errors returned by
;		RM$SETEBK by getting the DID from the FWA FIBBUF instead
;		of the user NAM block.  The problem is there may be no NAM
;		block, so a dangling directory entry can result.
;
;	V02-027	MCN0007		Maria del C. Nasr	12-May-1981
;		Define new symbol for old length of backup date and time XAB.
;
;	V02-026	JAK0048		J A KRYCKA	25-SEP-1980
;		Move network specific create code to RMS0CREAT and avoid
;		spurious setting of NAM$V_HIGHVER and NAM$V_LOWVER bits.
;
;	V025	REFORMAT	D M WALP	24-JUL-1980
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IODEF
	$SSDEF
	$RJRDEF
	$RJBDEF
	$BDBDEF
	$CJFDEF
	$IMPDEF				; impure area definitions
	$FABDEF
	$NAMDEF
	$FCHDEF
	$FIBDEF
	$IFBDEF
	$ATRDEF
	$DEVDEF
	$FWADEF
	$RMSDEF
	$XABALLDEF
	$XABDATDEF
	$XABFHCDEF
	$XABPRODEF
	$XABRDTDEF
	$XABJNLDEF
	$RUCBDEF
	$PCBDEF

;
; Equated Symbols:
;

	FOP = FAB$L_FOP*8		; bit offset to fop

;
; Offsets and sizes for local table entries.
;
	JNL$W_ATTR_TYPE	 = 0		; attribute type
	JNL$L_ACTION_RTN = 4		; address of action routine
	JNL$C_ENT_SIZE	 = 8		; size of table entry
	ATR$S_ENT_SIZE	 = 8		; size of ACP attribute

;
; Own Storage:
;
;
;  initial xab processing arguments
;

CRE_XAB_ARGS:
	.BYTE	XAB$C_ALL,XAB$C_ALLLEN,XBC$C_CREALL1
	.BYTE	XAB$C_DAT,XAB$C_DATLEN_V2,XBC$C_OPNDAT
	.BYTE	XAB$C_FHC,XAB$C_FHCLEN,XBC$C_OPNFHC
	.BYTE	XAB$C_PRO,XAB$C_PROLEN_V3,XBC$C_CREPRO
	.BYTE	XAB$C_RDT,XAB$C_RDTLEN,XBC$C_OPNRDT
	.BYTE	XAB$C_JNL,XAB$C_JNLLEN,XBC$C_CREJNL
	.BYTE	0

;
;  arguments for "all" xab processing to return alq from actual allocated size
;

CRE_XAB_ARGS2:
	.BYTE	XAB$C_ALL,XAB$C_ALLLEN,XBC$C_CREALL2
	.BYTE	XAB$C_PRO,XAB$C_PROLEN_V3,XBC$C_CREPRO1
	.BYTE	0

;
; Table to associate action routines for attributes when journaling $CREATE.
;

;
; First, offsets for case branch.
;	
TAB$C_USER_CHAR		= 0
TAB$C_FILE_PRO		= 1
TAB$C_FILE_UIC		= 2
TAB$C_RECORD_ATTR	= 3
TAB$C_EXPIRE		= 4


TABLE:
	.LONG	ATR$C_UCHAR,	TAB$C_USER_CHAR		; user characteristics
	.LONG	ATR$C_FPRO,	TAB$C_FILE_PRO		; file's protection
	.LONG	ATR$C_UIC,	TAB$C_FILE_UIC		; file's UIC
	.LONG	ATR$C_RECATTR,	TAB$C_RECORD_ATTR	; record attributes
	.LONG	ATR$C_EXPDATE,	TAB$C_EXPIRE		; expiration date
	.LONG	0,		0			; end of table


	.SBTTL	RM$CREATECOM - PERFORM CREATE FILE FUNCTION

;++
; RM$CREATECOM
;
;       RM$CREATECOM -
;
;	this routine sets up the fib from the various user options, directory id and
;	allocation information, builds the attribute list to write the user record
;	and other attributes, builds the qio parameter list on the stack
;	issues the qio to the acp to perform the create (or access if 'cif' bit set),
;	initializes the hbk field of the ifab, and finally calls rm$fillnam to return
; 	the resultant name string.
;
;	this routine also calls subroutines to journal the $CREATE, if
;	journaling is taking place.  one subroutine collects all the information
;	necessary to journal, another actually writes the journal entries
;	to the open journals.
;
; Calling sequence:
;
;	bsbw	rm$createcom
;
; Input Parameters:
;
;	r11	impure area addr
;	r10	fwa address
;	r9	ifab address
;	r8	fab address
;
; Implicit Inputs:
;
;	the contents of the parameter blocks listed
;	above, especially:
;
;	ifb$l_prim_dev
;	fwa$q_dir
;	fwa$q_name
;	fwa$l_atrladr
;	ifb$l_chnl
;	ifb$b_fac
;	ifb$l_rfmorg thru ifb$c_fhaend
;	fab$l_fop
;	fab$l_alq
;	fab$l_xab
;	fab$l_nam
;
;
; Output Parameters:
;
;	r0	status code
;	r6	fib addr
;	r1-r5,r7,ap destroyed
;
; Implicit Outputs:
;
;	ifb$v_accessed set
;	nam$l_rsl set to length of resultant string, if any
;	ifb$l_ios
;	ifb$l_hbk
;	fab$l_stv set to system error code on failure
;
; Completion Codes:
;
;	standard rms, including suc,rer,wer,
;	flk,prv,dnf,ful, and cre.
;
; Side Effects:
;
;	may have switched to running at ast level.
;	all user structures except fab and nam
;	must be reprobed.
;--


RM$CREATECOM::
	BBS	#DEV$V_DIR,-
		IFB$L_PRIM_DEV(R9),10$	; branch if files-oriented
	RMSSUC				; show success
	BRW	FILNAM			; fill in nam block

;
; unless 'tmp' or 'tmd' set in fop, get the directory id
;

10$:	BITL	#FAB$M_TMP!FAB$M_TMD,-
		FAB$L_FOP(R8)		; tmp or tmd set?
	BNEQ	SETTMP			; branch if yes
	BSBW	RM$SETDID		; get directory id
	BLBS	R0,SETUP		; continue if ok
CREXIT:	RSB				; get out on error

;
;  handle bad alq value
;

ERRALQ:
	RMSERR	ALQ
	RSB

;
;  set tmp bit to flag this as a temporary file
;

SETTMP:	SSB	#IFB$V_TMP,(R9)		; flag temporary file

;
; call rm$creacc_set1 to do common fib and attribute list set up
;

SETUP:	BSBW	RM$CREACC_SET1
	BLBC	R0,CREXIT
	CLRW	FWA$W_UCHAR(R10)	; initialize user characteristics

;
; r6 now points to fib
; r5 has address of where to build attribute list entries
;
;!!!!!
; \must include code to handle magtape label xabs.\
;!!!!!
;
;  handle xabs
;

	MOVAB	CRE_XAB_ARGS,AP		; set xab scan args addr
	BSBW	RM$XAB_SCAN		; process xabs
	BLBC	R0,CREXIT		; get out on error
10$:	BBS	#DEV$V_SQD,-
		IFB$L_PRIM_DEV(R9),50$	; branch if magtape

;
; if disk, process initial allocation request
;

20$:	MOVL	FAB$L_ALQ(R8),-
		FIB$L_EXSZ(R6)		; set alloc size
	BEQL	50$			; branch if none
	BLSS	ERRALQ			; branch if bad
	BBC	#FAB$V_UFO+FOP,(R8),30$	; branch if not ufo
	ADDL3	#1,FAB$L_ALQ(R8),-
		IFB$L_EBK(R9)		; set eof blk from alq
30$:	SSB	#FIB$V_EXTEND,-
		FIB$W_EXCTL(R6)		; enable extend
	BBS	S^#XBC$C_CREALL1,R4,50$	; branch if alq xab seen
	BBC	#FAB$V_CBT+FOP,(R8),40$	; branch if cbt bit off
	BISB2	#1@FCH$V_CONTIGB,-
		FWA$W_UCHAR(R10)	; give file cbt attribute
	BBCS	#FIB$V_ALCONB,-
		FIB$W_EXCTL(R6),50$	; ask primitive for best try
					; and branch
40$:	BBC	#FAB$V_CTG+FOP,(R8),50$	; branch if contig bit off
	BISB2	#FIB$M_ALCON!FIB$M_FILCON,-
		FIB$W_EXCTL(R6)		; ask acp for ctg extend
	BISB2	#1@FCH$V_CONTIG,-
		FWA$W_UCHAR(R10)	; give file ctg attribute

;
;  swap words of ebk to be files-11 compatible and insert org into rfm/org
;  so that it gets written with the file attributes.
;	(note: hbk is zero)
;

50$:	ROTL	#16,IFB$L_EBK(R9),IFB$L_EBK_DISK(R9)
	INSV	IFB$B_ORGCASE(R9),#IFB$V_ORG,#IFB$S_ORG,IFB$B_RFMORG(R9)

;
; If the alignment option is RFI with a file id of zero, it means create
; the file next to itself.  Since the ACP is going to try to look for a
; file that does not exist yet, make the option ANY, which is really what
; it should be mean on a create.
;

	CMPB	FIB$B_ALALIGN(R6),#FIB$C_RFI	; RFI option?
	BNEQ	60$				; branch if not
	TSTL	FIB$W_LOC_FID(R6)		; zero file id
	BNEQ	60$				; branch if not
	TSTL	FIB$W_LOC_RVN(R6)
	BNEQ	60$
	MOVB	#XAB$C_ANY,FIB$B_ALALIGN(R6)	; make it ANY

;
; Enforce RU bit settings, specifically ONLY_RU
;
60$:
	PUSHL 	R1				; Save R1 first
	BICB2	#IFB$M_NEVER_RU,IFB$B_JNLFLG(R9) ; Ignoring NEVER_RU, is
	BITB	#IFB$M_RU!IFB$M_ONLY_RU,IFB$B_JNLFLG(R9) ; any RU bit set?
	BEQL	62$				; If not, go on with stuff
	MOVL	@#CTL$GL_RUF,R1			; RUF loaded?
	BEQL	61$				; No RUF, check for ONLY_RU
	BBS	#RUCB$V_ACTIVE,RUCB$B_CTRL(R1),62$ ; In RU? Then we're cool
61$:
	BITB	#IFB$M_ONLY_RU,-		; If ONLY_RU clear (RU
		IFB$B_JNLFLG(R9)		;  must be set), and not
	BEQL	62$				;  in RU then that's ok
	RMSERR	NRU		; However, if ONLY_RU set and not in RU: error
	POPL	R1				; Realign stack
	RSB

;
; process the mxv, sup, and cif options
;
;	for mxv & sup, need merely copy to fib
;
62$:
	POPL	R1				; Pop R1
	ASSUME	FAB$V_SUP EQ FAB$V_MXV+1
	ASSUME	FIB$V_SUPERSEDE EQ FIB$V_NEWVER+1
NAMCTL:	EXTZV	#FAB$V_MXV+FOP,#2,(R8),R0
	INSV	R0,#FIB$V_NEWVER,#2,FIB$W_NMCTL(R6)
	BBC	#FAB$V_CIF+FOP,(R8),SET3
	BRW	DOCIF

;
; call rm$creacc_set3 to finish building the qio parameters for create
;

SET3:	BSBW	RM$CREACC_SET3


;
; set i/o function code and do the create
;

	MOVZBL	#IO$_CREATE!IO$M_CREATE!IO$M_ACCESS,-
		R0			; set qio function code
	BBC	#FAB$V_TMD+FOP,(R8),10$	; branch unless tmd set
	SSB	S^#IO$V_DELETE, R0	; mark file for delete
10$:	BSBW	RM$FCPFNC		; do the create
	BLBS	R0,GETJNL		; branch if ok
	BRW	ERRCREATE		; branch on error


;
; Journal the $CREATE if journaling.  Then retrieve journal names from
; XAB and mark the file with them.
;

GETJNL:
	PUSHL	R0			; save status code
	BICL2	#IFB$M_NEVER_RU,IFB$B_JNLFLG(R9)  ; don't care about NEVER_RU
	TSTB	IFB$B_JNLFLG(R9) 	; journaling bits seen?
	BEQL	SETHBK_BR		; branch if not
	BBS	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),ERRJOP ; no disk, no journaling
;
; Collect journaling information from current attribute list.
;
	PUSHR	#^M<R4,R5>		; save work regs
	JSB	RM$ALLOC_RJB_BDB	; get an RJB
	POPR	#^M<R4,R5>		; restore work regs
	BLBC	R0,BR_AID		; out on error
	BSBW	RM$INI_CRE_RJR		; set up the $CREATE RJR

;
; Mark the new file for journaling as specified in the XAB.
;
	MOVL	FWA$L_ATR_WORK(R10),R5	; set up new attr list.
	JSB	RM$GETJNL		; get journal names for create
	BLBC	R0,BR_AID		; get out on error
;
; Assign channels to the appropriate journals.
;
	PUSHR	#^M<R4,R5>		; save XAB flags, attr address
	JSB	RM$ASSJNL		; assign journal channels and init
					; journal data structures
	POPR	#^M<R4,R5>		; restore XAB flags, attr address
	BLBC	R0,BR_AID		; get out on error
;
; Journal the $CREATE to the appropriate journals.
;
	BSBW	RM$JNL_CREATE		; write the RJR to the journals
	BLBC	R0,BR_AID		; get out on error

	MOVZWL	FIB$W_EXCTL(R6),-(SP)	; save EXCTL
	MOVQ	FIB$L_EXSZ(R6),-(SP)	; save EXSZ, EXVBN
	CLRW	FIB$W_EXCTL(R6)		; reset EXCTL to zero
	ASSUME	FIB$L_EXVBN EQ <FIB$L_EXSZ+4>
	CLRQ	FIB$L_EXSZ(R6)		; also zero EXSZ, EXVBN
	CLRL	(R5)			; indicate end of attr list
	PUSHL	#0			; set up QIO P6
	PUSHL	FWA$L_ATR_WORK(R10)	; 	 QIO P5 attr list
	BSBW	RM$FCP_P4_P2		; 	 QIO P4,P3,P2
	MOVZBL	#IO$_MODIFY,R0		; set modify function
	BSBW	RM$FCPFNC		; do the modify

	MOVQ	(SP)+,FIB$L_EXSZ(R6)	; restore EXSZ, EXVBN
	MOVW	(SP),FIB$W_EXCTL(R6)	; restore EXCTL
	TSTL	(SP)+			; pop EXCTL
	BLBC	R0,ERRMOD		; get out on error
SETHBK_BR:
	BRB	SETHBK			; continue with create

ERRJOP:	RMSERR	JOP
BR_AID:	BRB	XITPOP

ERRMOD:	RMSERR	CRE,R1
	BSBW	RM$MAPERR
	BRB	XITPOP


SETHBK:	MOVL	FIB$L_EXSZ(R6),-
		IFB$L_HBK(R9)		; set hi block
	MOVAB	CRE_XAB_ARGS2,AP	; set xab arglist addr
	BSBW	RM$XAB_SCAN		; go set alq in xaball
	BLBC	R0,XITPOP		; get out on error

SETEBK:	BSBW	RM$SETEBK		; go set ebk, accessed
	BLBC	R0,DELSHR		; delete on error
	POPR	#^M<R0>			; restore status code
	ASSUME	IFB$V_RFM EQ 0
	ASSUME	IFB$S_RFM EQ 4
	BICB2	#^XF0,IFB$B_RFMORG(R9)	; leave only rfm in rfmorg

FILNAM:	PUSHL	R0			; save success code
	BSBW	RM$FILLNAM		; return resultant string
	BLBC	R0,XITPOP		; branch on error
	TSTL	R7			; is there a nam blk?
	BEQL	10$			; branch if none

;
;  set the lowver and highver flags in the nam block
;

	ASSUME	FIB$V_HIGHVER EQ FIB$V_LOWVER+1
	ASSUME	NAM$V_HIGHVER EQ NAM$V_LOWVER+1
	EXTZV	#FIB$V_LOWVER,#2,-
		FIB$W_NMCTL+FWA$T_FIBBUF(R10),-
		R1			; get version bits
	INSV	R1,#NAM$V_LOWVER,#2,-
		NAM$L_FNB(R7)		; and set in nam blk
10$:	POPR	#^M<R0>			; restore success code
	RSB

XITPOP:	POPR	#^M<R1>			; remove success code
EXIT:	RSB				; and return with error

;
;	this code will only be executed if we return an error status from
;	rm$open_shared which is called in the subroutine rm$setebk.
;

DELSHR:	PUSHL	R0			; save status code
	MOVZBL	#FIB$C_LENGTH,R2	; get length of fib
	CSB	#IMP$V_TEMP1,(R11)	; clear s0 flag
	BSBW	RM$GETSPC1		; go get fib
	BLBS	R0,20$			; branch if ok
	POPR	#^M<R1>			; clean up stack
	BRB	XITPOP			; leave
20$:	PUSHL	R1			; push fib address
	MOVZBL	#FIB$C_LENGTH,-(SP)	; push length of fib
	BBS	#IFB$V_TMP,(R9),DEL	; branch if temp file
	SSB	#FIB$V_FINDFID,-	;
		FIB$W_NMCTL(R1)		; set findfid bit
	MOVW	FIB$W_DID+FWA$T_FIBBUF(R10),-
		FIB$W_DID(R1)		; set did
	MOVL	FIB$W_DID_SEQ+FWA$T_FIBBUF(R10),-
		FIB$W_DID_SEQ(R1)	; set did sequence and rvn
DEL:	MOVZWL	#<IO$_DELETE!IO$M_DELETE>,-
		R0			; set i/o func code
	CLRQ	-(SP)			; set p6 = p5 = 0 for $qio
	BSBW	RM$FCPFNC_P4		; go do the delete
	POPR	#^M<R2,R4>		; get fib addr, length
	BSBW	RM$RETSPC1		; return the space
	POPR	#^M<R0,R1>		; restore registers
	BRW	RM$CLSCU		; close cleanup


;++
;
; 'cif' bit is set indicating open file if it exists,
; otherwise create - do remaining setup & access
;
;--

DOCIF:	BBS	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),10$ ; branch if not disk
	JSB	RM$RTVJNL		; set up for read of journal names
10$:	BSBW	RM$CREACC_SET2		; finish param setup
	MOVZBL	#IO$_ACCESS!IO$M_CREATE!IO$M_ACCESS,-
		R0			; set qio function code
	BBC	#FAB$V_TMD+FOP,(R8),20$	; if tmd not set
	SSB	S^#IO$V_DELETE,R0	; mark file for delete
20$:	BSBW	RM$FCPFNC		; do access/create
	BLBC	R0,ERRCREATE		; branch on error
	CMPW	R0,S^#SS$_NORMAL	; was file created?
	BEQL	60$			; branch if not

	BRW	GETJNL			; re-join create


;
; 'cif' and file already existed - switch to 'open'
;

60$:	CMPB	#IFB$C_IDX,-
		IFB$B_ORGCASE(R9)	; indexed, rm$create3b
	BEQL	70$			;
	MOVAB	W^RM$OPEN_CIF,(SP)	; change return pc
70$:	BRW	RM$SETHBK		; & go finish up open

;
; process error on create
;

ERRCREATE:
	RMSERR	CRE,R1			; default error code
	BRW	RM$MAPERR		; go map the error


	.SUBTITLE	RM$INI_CRE_RJR
;++
; RM$INI_CRE_RJR
;
;	This routine is used to fill in the necessary information to re-do
;	a $CREATE operation.
;
; Input Parameters:
;
;	r9	- IFAB
;	r10	- FWA
;
; Implicit Inputs:
;
;	JNLBDB	- for RJR
;
; Output Parameters:
;
;	r0	- status
;
; Implicit Outputs:
;
;	RJR filled with info required to re-do $CREATE.
;
; Side Effects:
;
;	None.
;
;--

RM$INI_CRE_RJR:

	PUSHR	#^M<R2,R3,R4,R5,R7>	; save work registers
	CLRL	R0			; anticipate the worst
;
; Get RJR address.
;
	MOVL	IFB$L_JNLBDB(R9),R4	; get address of journaling BDB
	BEQL	50$			; get out if none
	MOVL	BDB$L_ADDR(R4),R7	; get RJR address
	BEQL	50$			; get out if none

;
; Handle file attributes.
;
	MOVL	FWA$L_ATR_WORK(R10),R5	; get address of attribute list
10$:					;
	TSTW	ATR$W_TYPE(R5)		; is an attribute present?
	BEQL	40$			; if eql, no - all done
	MOVAL	TABLE,R4		; get address of table of attributes
					; to journal (and their action routines)
15$:					;
	CMPW	JNL$W_ATTR_TYPE(R4),-	; is this table entry identical to this
		ATR$W_TYPE(R5)		; entry in the attribute list?
	BNEQ	20$			; if NEQ no, not equal
					;
	PUSHAB	30$			; push return address from CASE
	CASE	TYPE = B,-
		SRC  = JNL$L_ACTION_RTN(R4),-
		DISPLIST = <USER_CHAR,FILE_PRO,FILE_UIC,RECORD_ATTR,EXPIRE>

	RSB				; to 30$ if bad case offset	
20$:					;
	ADDL2	#JNL$C_ENT_SIZE,R4	; point to next entry in table
	TSTW	JNL$W_ATTR_TYPE(R4)	; is there another entry in table?
	BNEQ	15$			; yes, go compare with attribute
30$:					;
	ADDL2	#ATR$S_ENT_SIZE,R5	; point to next attribute
	BRB	10$			; go process it
					;
40$:					; all done with attributes

;
; Copy FIB.
;
	MOVC3	FWA$Q_FIB(R10),@FWA$Q_FIB+4(R10),RJR$T_C_FIB(R7)

;
; Copy Filename.
;
	MOVAL	RJR$T_FILENAME(R7),R3		; get name buff addr

	ASSUME	RJR$S_FILENAME EQ 256

;
; Set buffer size to 255 because the GETFILNAM code builds a NAM block, etc...
; and can only cope with a size that fits in a byte.
;
	MOVZWL	#<RJR$S_FILENAME-1>,R4		; set size of buffer
	JSB	RM$GETFILNAM			; go get file name
	MOVB	R4,RJR$B_FNS(R7)		; put length in entry

;
; Fill in the rest of the journal record.
;
	MOVB	IFB$B_ORGCASE(R9),RJR$B_ORG(R7) ; file organization
	MOVB	#RJR$C_FILENAME,RJR$B_ENTRY_TYPE(R7) ; filename
	MOVB	#RJR$_CREATE,RJR$B_OPER(R7) ; RMS operation

	MOVL	#1,R0			; indicate success
50$:	POPR	#^M<R2,R3,R4,R5,R7>	; restore work registers
	RSB				; to caller

	.SUBTITLE Routines to journal CREATE attributes.
;++
;
; Action routines for journaling $CREATE attributes.
;
; Inputs:
;
;	R5 points to attribute.
;	R7 points to RJR.
;
; Outputs:
;
;	RJR CREATE attributes filled in, MASK longword also filled in.
;
; Side Effects:
;
;	R4 and R5 must be preserved.
;
;--

;++
; User Characteristics
;--

USER_CHAR:				; user characteristics
	SSB	#RJR$V_ATR_UCHAR,RJR$L_ATR_FLAGS(R7) ; indicate UCHAR
	MOVL	@ATR$L_ADDR(R5),RJR$L_UCHAR(R7) ; copy characteristics
	RSB				; to main routine

;++
; File Protection
;--

FILE_PRO:				; file protection
	SSB	#RJR$V_ATR_PROT,RJR$L_ATR_FLAGS(R7) ; indicate PROT
	MOVL	@ATR$L_ADDR(R5),RJR$L_PROT(R7) ; copy protection
	RSB				; to main routine

;++
; File's UIC
;--

FILE_UIC:				; file's UIC
	SSB	#RJR$V_ATR_UIC,RJR$L_ATR_FLAGS(R7) ; indicate UIC
	MOVL	@ATR$L_ADDR(R5),RJR$L_UIC(R7) ; copy UIC
	RSB				; to main routine

;++
; Record Attributes
;--

RECORD_ATTR:				; record attribute block
	PUSHR	#^M<R4,R5>		; save pointers
	SSB	#RJR$V_ATR_REC,RJR$L_ATR_FLAGS(R7) ; indicate REC
	MOVC3	#RJR$C_RECATRLEN,-	; copy the record attributes
		@ATR$L_ADDR(R5),-	; ...
		RJR$T_REC_ATTR(R7)	; ...
	POPR	#^M<R4,R5>		; restore pointers
	RSB				; to main routine

;++
; Expiration Date
;--

EXPIRE:					; expiration date
	SSB	#RJR$V_ATR_EXPIRE,RJR$L_ATR_FLAGS(R7) ; indicate EXPIRE
	MOVQ	@ATR$L_ADDR(R5),RJR$Q_EXPIRE(R7) ; copy expiration date
	RSB				; to main routine


	.SUBTITLE RM$JNL_CREATE
;++
; RM$JNL_CREATE
;
;	This routine writes create journal entries for AI, BI, or RU journal.
;	AT creates are done later.
;
; Input Parameters:
;
;	r9	- IFAB
;
; Implicit Inputs:
;
;	JNLBDB	- to describe jounal buffer used for $CREATE
;	RJB	- to see if journaling is turned on, input to RM$WRITEJNL
;
; Output Parameters:
;
;	r0	- status of operation
;
; Implicit Outputs:
;
;	$CREATE journal entries are written.
;
; Side Effects:
;
;	None.
;
;--

RM$JNL_CREATE:

	PUSHR	#^M<R4,R5,R6>		; save work registers
	MOVL	#1,R6			; anticipate success
	MOVL	IFB$L_JNLBDB(R9),R4	; get address of BDB
	MOVL	IFB$L_RJB(R9),R5	; and get address of RJB

	MOVW	#RJR$C_FILNAMLEN,BDB$W_NUMB(R4) ; size of buffer to write
	MOVQ	R3,-(SP)		; init input to RM$WRITEJNL with
					; longword BDB address and longword
					; to be overwritten by journal type
	BBC	#RJB$V_BI,RJB$W_FLAGS(R5),10$ ; branch if no BI
	MOVZBL	#CJF$_BI,(SP)		; type of journal
	JSB	RM$WRTJNL_OBJ		; write jnl entry as OBJECT_ID
	BLBS	R0,10$			; skip on success
	MOVL	R0,R6			; save error code
10$:					;
	BBC	#RJB$V_AI,RJB$W_FLAGS(R5),20$ ; branch if no AI
	MOVZBL	#CJF$_AI,(SP)		; type of journal
	JSB	RM$WRTJNL_OBJ		; write jnl entry as OBJECT_ID
	BLBS	R0,20$			; skip on success
	MOVL	R0,R6			; save error code
20$:					;
	BBC	#RJB$V_RU,RJB$W_FLAGS(R5),30$ ; branch if no RU
	MOVL	@#CTL$GL_RUF,R1		; don't write entry if no active RU
	BEQL	30$			; no RUCB, no RU
	BBC	#RUCB$V_ACTIVE,RUCB$B_CTRL(R1),30$ ; no active RU
	MOVZBL	#CJF$_RU,(SP)		; type of journal
	JSB	RM$WRTJNL_OBJ		; write jnl entry as OBJECT_ID
	MOVL	R0,R6			; save status code
30$:					;
	MOVL	R6,R0			;
	ADDL2	#8,SP			; clean up stack
	POPR	#^M<R4,R5,R6>		; restore work registers
	RSB				; return to caller

	.END
