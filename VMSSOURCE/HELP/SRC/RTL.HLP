1 RTL_Routines
 The  VAX   Run-Time   Library  is  a   collection  of  procedures
 available  to  native  mode images  at run  time.   These library
 procedures are  common to  all native  mode images, regardless of
 the language processor used to compile or assemble the program.
2 LIB$

 LIB$ Procedures
3 LIB$ADDX

  LIB$ADDX adds two signed  two's  complement  integers  of  arbitrary

  length.



     Format:



       LIB$ADDX  a ,b ,result [,len]



     Arguments:



  a



  type: longword integer (signed)

  access: read only

  mechanism: by reference ,array reference



  First multiple-precision,  signed  two's  complement  integer  which

  LIB$ADDX  adds  to  the  second  two's  complement  integer.   The a

  argument is the address of the array containing the two's complement

  number to be added.



  b



  type:  longword integer (signed)

  access: read only

  mechanism: by reference, array reference



  Second multiple-precision, signed two's  complement  integer,  which

  LIB$ADDX adds to the first two's complement integer.  The b argument

  is the address of the array containing the two's complement number.



  result



  type: longword integer (signed)

  access: write only

  mechanism: by reference, array  reference



  Multiple-precision, signed two's complement integer  result  of  the

  addition.   The  result  argument  is  the address of the array into

  which LIB$ADDX writes the result of the addition.



  len



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Length in longwords of the arrays to be operated on; each  array  is

  of length len.  The len argument is the address of a signed longword

  integer containing the length.  Len must not be negative.   This  is

  an optional argument.  If omitted, the default is two.

3 LIB$ANALYZE_SDESC

  LIB$ANALYZE_SDESC extracts the length and the address at  which  the

  data starts for a variety of string descriptor classes.



     Format:



       LIB$ANALYZE_SDESC  inp-dsc ,len ,data-adr



     Arguments:



  inp-dsc



  type: character string

  access: read only

  mechanism: by descriptor



  Input descriptor from which  LIB$ANALYZE_DESC  extracts  the  data's

  length and starting address.  The inp-dsc argument is the address of

  a descriptor pointing to this descriptor.



  len



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Length of the data; LIB$ANALYSE_DESC extracts this length value from

  the  input  descriptor.  The len argument is the address of a signed

  word integer into which LIB$ANALYZE_SDESC writes the length.



  data-adr



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Starting  address  of  the  data;  LIB$ANALKYZE_DESC  extracts  this

  address  from  the  input  descriptor.  The data-adr argument is the

  address of an unsigned longword which  LIB$ANALYZE_DESC  writes  the

  starting address of the data.

3 LIB$ASN_WTH_MBX

  LIB$ASN_WTH_MBX  assigns  a  channel  to  a  specified  device   and

  associates  a  mailbox  with the device.  It returns both the device

  channel and the mailbox channel to the mailbox.



     Format:



       LIB$ASN_WTH_MBX  dev-nam ,max-msg ,buf-quo ,dev-chn ,mbx-chn



     Arguments:



  dev-nam



  type: character string

  access: read only

  mechanism: by descriptor



  Device name which LIB$ASN_WTH_MBX passes  to  the  $ASSIGN  service.

  The  dev-nam argument is the address of a descriptor pointing to the

  device name.



  max-msg



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Maximum  message  size  that   can   be   sent   to   the   mailbox;

  LIB$ANS_WTH_MBX  passes  this  argument to the $CREMBX service.  The

  max-msg argument  is  the  address  of  a  signed  longword  integer

  containing this maximum message size.



  buf-quo



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Number of system dynamic memory bytes that can  be  used  to  buffer

  messages  sent  to the mailbox; LIB$ASN_WTH_MBX passes this argument

  to the $CREMBX service.  The buf-quo argument is the  address  of  a

  signed longword integer containing this buffer quota.



  dev-chn



  type: word integer(signed)

  access: write only

  mechanism: by reference



  Device channel  which  LIB$ASN_WTH_MBS  receives  from  the  $ASSIGN

  service.   The  dev_chn is the address of a signed word integer into

  which $ASSIGN writes the device channel.



  mbx-chn



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Mailbox channel which  LIB$ASN_WTH_MBX  receives  from  the  $CREMBX

  service.   The  mbx-chn  argument  is  the  address of a signed word

  integer into which $CREMBX writes the mailbox channel.

3 LIB$AST_IN_PROG

  LIB$AST_IN_PROG indicates whether an AST is currently in progress.



     Format:  
     LIB$AST_IN_PROG process_id



     Arguments:



  process-id



  type: longword integer (unsigned)

  access: read only

  mechanism: by reference



  Process identification of the process to which  LIB$ATTACH  requests

  the calling process to attach its terminal.  The process-id argument

  is the address  of  an  unsigned  longword  integer  containing  the

  process  identification.   The  specified  process must be currently

  detached (by means of a SPAWN or ATTACH command, or  by  a  call  to

  LIB$SPAWN or LIB$ATTACH) and must be part of the caller's job.

3 LIB$BBCCI

  LIB$BBCCI tests and clears a selected bit  under  memory  interlock.

  LIB$BBCCI makes the VAX-11 BBCCI instruction available as a callable

  procedure.



     Format:



       LIB$BBCCI  position ,base



     Arguments:



  position



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Bit position, relative to base, of the bit which LIB$BBCCI tests and

  clears.   The  position argument is the address of a signed longword

  integer containing the bit position.  A position of zero denotes the

  low-order  bit  of  the byte base.  The bit position is equal to the

  offset of the bit chosen form the base position.   This  offset  may

  span the entire range of a signed longword integer; negative offsets

  access bits in lower-addressed bytes.



  base



  type: unspecified

  access: read only

  mechanism: by reference



  Byte containing bit zero of the  field  that  LIB$BBCCI  references.

  The base argument is the address of the base position.  The bit that

  LIB$BBCCI tests and clears is position bits offset from the low  bit

  of base.

3 LIB$BBSSI

  LIB$BBSSI tests and sets a  selected  bit  under  memory  interlock.

  LIB$BBSSI makes the VAX-11 BBSSI instruction available as a callable

  procedure.



     Format:



       LIB$BBSSI  position ,base



     Arguments:



  position



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Bit position, relative to base, of the bit which LIB$BBSSI tests and

  sets.   The  position  argument  is the address of a signed longword

  integer containing the bit position.  A position of zero denotes the

  low-order  bit  of  the byte base.  The bit position is equal to the

  offset of the bit chosen from the base position.   This  offset  may

  span the entire range of a signed longword integer; negative offsets

  access bits in lower-addressed bytes.



  base



  type: unspecified

  access: read only

  mechanism: by reference



  Byte containing bit zero of the  field  that  LIB$BBSSI  references.

  The base argument is the address of the base position.  The bit that

  LIB$BBSSI tests and sets is position bits offset from the low bit of

  base.

3 LIB$CALLG

  LIB$CALLG calls a procedure with an argument list  specified  as  an

  array  of  longwords, the first of which is a count of the remaining

  longwords.  LIB$CALLG is a callable  version  of  the  VAX-11  CALLG

  instruction.



     Format:



       LIB$CALLG  arglist ,procedure



     Arguments:



  arglist



  type: longword (unsigned)

  access: read only

  mechanism: by reference, array reference



  Argument list which LIB$CALLG uses to call the specified  procedure.

  The  arglist  argument  is  the  address  of  an  array of longwords

  containing the argument list.  The first longword must  contain  the

  count of the remaining longwords.  The maximum value of the count is

  255.



  procedure



  type: unspecified

  access: function call (before return )

  mechanism: by reference, procedure reference



  Procedure which LIB$CALLG calls with the  specified  argument  list.

  The  procedure  argument is the address of the function call to this

  procedure.

3 LIB$CHAR

  LIB$CHAR transforms a single  8-bit  ASCII  character  to  an  ASCII

  string consisting of a single character followed by trailing spaces,

  if needed, to fill out the string.  The range of the input byte is 0

  through 255.



     Format:



       LIB$CHAR  one-char-str ,ascii-code



     Arguments:



  one-char-str



  type: character string

  access: write only

  mechanism: by descriptor



  ASCII character string consisting of a single character followed  by

  trailing spaces, if needed, that LIB$CHAR creates when it transforms

  the ASCII character code.  The one-char-str argument is the  address

  of  a  descriptor  pointing  to  the  character string that LIB$CHAR

  writes.



  ascii-code



  type: byte (unsigned)

  access: read only

  mechanism: by reference



  Single 8-bit ASCII character code that  LIB$CHAR  transforms  to  an

  ASCII string.  The ascii-code argument is the address of an unsigned

  byte containing the ASCII character code.

3 LIB$CRC

  LIB$CRC calculates the cyclic redundancy  check  (CRC)  for  a  data

  stream.



     Format:



       LIB$CRC  table ,inicrc ,stream



     Arguments:



  table



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  The 16-longword cyclic redundancy check table, created by a call  to

  LIB$CRC_TABLE.   The  table  argument  is  the  address  of a signed

  longword integer containing  this  table.   Because  this  table  is

  created  by  LIB$CRC_TABLE  and  then used as input in LIB$CRC, your

  program must call LIB$CRC_TABLE before it calls LIB$CRC.



  inicrc



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Initial cyclic redundancy check.  The inicr argument is the  address

  of   a   signed  longword  integer  containing  the  initial  cyclic

  redundancy check.



  stream



  type: character string

  access: read only

  mechanism: by descriptor



  Data stream for which LIB$CRC is calculating the  CRC.   The  stream

  argument is the address of a descriptor pointing to the data stream.

3 LIB$CRC_TABLE

  LIB$CRC_TABLE constructs a 16-longword  table  that  uses  a  cyclic

  redundancy check polynomial specification as a bit mask.



     Format:



       LIB$CRC_TABLE  poly ,table



     Arguments:



  poly



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  A bit mask  indicating  which  polynomial  coefficients  are  to  be

  generated  by  LIB$CRC_TABLE.  The poly argument is the address of a

  signed longword integer containing this bit mask.



  table



  type: longword integer (signed)

  access: write only

  mechanism: by reference, array reference



  The  16-longword  table  that  LIB$CRC_TABLE  produces.   The  table

  argument  is the address of a signed longword integer containing the

  table.

3 LIB$CREATE_DIR

  LIB$CREATE_DIR creates a directory or subdirectory.



     Format:



       LIB$CREATE_DIR  dev-dir-spec [,owner-UIC] [,prot-enable]

                  [,prot-value] [,max-versions] [,rvn] 



     Arguments:



  dev-dir-spec



  type: character string

  access: read only

  mechanism: by descriptor



  Device and directory specification of the directory or  subdirectory

  that  LIB$CREATE_DIR  will create.  The dev-dir-spec argument is the

  address of a  descriptor  pointing  to  this  device  and  directory

  specification.



  owner-UIC



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  User Identification Code (UIC) identifying the owner of the  created

  directory or subdirectory.  The owner-UIC argument is the address of

  an unsigned longword that contains the UIC.  If owner-UIC  is  zero,

  the owner UIC is that of the parent directory.



  prot-enable



  type: word (unsigned)

  access: read only

  mechanism: by reference 



  Mask specifying the bits of prot-value to be set.   The  prot-enable

  argument  is  the  address  of  an  unsigned  word  containing  this

  protection mask.



  prot-value



  type: word (unsigned)

  access: read only

  mechanism: by reference



  System/Owner/Group/World protection value of the directory  you  are

  creating.   The  prot-value  argument  is the address of an unsigned

  word which contains this protection mask.



  max-versions



  type: word (unsigned)

  access: read only

  mechanism: by reference



  Maximum number of versions allowed for files created  in  the  newly

  created directories.  The max-versions argument is the address of an

  unsigned  word  containing  the  value  of  the  maximum  number  of

  versions.



  rvn



  type: word (unsigned)

  access: read only

  mechanism: by reference



  Relative volume number within a volume set on which the directory or

  subdirectory  is  created.   The  rvn  argument is the address of an

  unsigned word  containing  the  relative  volume  number.   The  rvn

  argument is optional.  The default is arbitrary placement within the

  volume set.

3 LIB$CRF_INS_KEY

  LIB$CRF_INS_KEY   inserts   information   about   a   key   into   a

  cross-reference table.



     Format:



       LIB$CRF_INS_KEY  ctl-tbl ,key1 ,val1 ,flags



     Arguments:



  ctl-tbl



  type: longword integer (signed)

  access: read only

  mechanism: by reference, array reference



  Cross reference table into which LIB$CRF_INS_KEY inserts information

  about  the  key.   The  ctl-tbl  argument is the address of a signed

  longword integer pointing to the cross reference  table.   You  must

  name  this  table  each  time  you  call a cross-reference procedure

  because  you  can  accumulate  information   for   more   than   one

  cross-reference table at a time.



  key1



  type: character string

  access: read only

  mechanism: by descriptor



  A counted ASCII string that contains a symbol name  or  an  unsigned

  binary  longword.   The key1 argument is the address of a descriptor

  pointing to the key.



  val1



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Symbol value, the address of which LIB$CRF_INS_KEY  inserts  in  the

  cross   reference  table.    The   val1   argument  is  the  address

  of a signed longword integer containing this value.   Both  the  key

  and value addresses must be permanent addresses in the user's symbol

  table.



  flags



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Value used in selecting the contents of the KEY2  and  VAL2  fields;

  flags  is  stored with the entry.  The flags argument is the address

  of an unsigned longword containing the flags.   When  preparing  the

  output  line,  LIB$CRF_OUTPUT  uses flags and the 16-bit mask in the

  field descriptor table to extract the data.  The high-order  bit  of

  the word is reserved for LIB$CRF_INS_KEY.

3 LIB$CRF_INS_REF

  LIB$CRF_INS_REF inserts a reference to a key  in  a  cross-reference

  symbol table.



     Format:



       LIB$CRF_INS_REF  ctl-tbl ,key1 ,ref2 ,ref1 ,ref-def



     Arguments:



  ctl-tbl



  type: longword integer (signed)

  access: read only

  mechanism: by reference, array reference



  Control table associated with  this  cross-reference.   The  ctl-tbl

  argument is the address of an array containing the control table.



  key1



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Key referred to  by  LIB$CRF_INS_REF.   The  key1  argument  is  the

  address of a signed longword integer containing the key.  The key is

  a counted ASCII string that contains a symbol name  or  an  unsigned

  binary  longword.   It  must  be  a  permanent address in the user's

  symbol table.



  ref2



  type: character string

  access: read only

  mechanism: by descriptor



  Counted ASCII string with a maximum of 31 characters, not  including

  the  byte  count.   The ref2 argument is the address of a descriptor

  pointing to the counted ASCII string.



  ref1



  type: longword itneger (signed)

  access: write only

  mechanism: by reference



  The 16-bit value used in selecting the contents of the  REF1  field.

  The  ref1  argument  is  the  address  of  a signed longword integer

  containing  this   value.    When   preparing   the   output   line,

  LIB$CRF_OUTPUT  uses  ref1  and the bit mask in the field descriptor

  table to extract the data.   The  high-order  bit  of  the  word  is

  reserved for LIB$CRF_INS_REF.



  ref-def



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Reference/definition  indicator   that   LIB$CRF_INS_REF   uses   to

  distinguish  between  a  reference to a symbol and the definition of

  the symbol.  The  ref-def  argument  is  the  address  of  a  signed

  longword  integer  containing  this  indicator.  The only difference

  between processing a symbol reference and  a  symbol  definition  is

  where LIB$CRF_INS_REF stores the information.

3 LIB$CRF_OUTPUT

  LIB$CRF_OUTPUT extracts the  information  from  the  cross-reference

  tables and formats the output pages.



     Format:



       LIB$CRF_OUTPUT  ctl-tbl ,width ,pag1 ,pag2 ,mode-ind

                  ,del-sav-ind 



     Arguments:



  ctl-tbl



  type: longword integer (signed)

  access: read only

  mechanism: by reference, array reference



  Control table associated  with  the  cross-reference.   The  ctl-tbl

  argument  is  the  address of an array containing the control table.

  The table contains the address of  the  user-supplied  routine  that

  prints the lines formatted by LIB$CRF_OUTPUT.



  width



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Width of the output line.  The width argument is the  address  of  a

  signed longword integer containing the width.



  pag1



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Number of lines on the first page of the output.  The pag1  argument

  is  the address of a signed longword integer containing this number.

  This allows the user to reserve space to print header information on

  the first page of the cross-reference.



  pag2



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Number of lines per page for the other pages.  The pag2 argument  is

  the address of a signed longword integer containing this number.



  mode-ind



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Output mode indicator.  The mode-ind is  the  address  of  a  signed

  longword integer containing the mode indicator.



  del-sav-ind



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Delete/save indicator which LIB$CRF_OUTPUT uses to determine whether

  the  tables built in accumulating symbol information are to be saved

  or deleted once the cross-reference is produced.  The del-sav-ind is

  the  address of a signed longword integer containing the delete/save

  indicator.

3 LIB$CURRENCY

  LIB$CURRENCY returns the system's currency symbol.



     Format:



       LIB$CURRENCY  currency-str [,out-len]



     Arguments:



  currency-str



  type: character string

  access: write only

  mechanism: by descriptor



  Currency symbol.  The currency-str argument  is  the  address  of  a

  descriptor pointing to the currency symbol.



  out-len



  type: word (unsigned)

  access: write only

  mechanism: by reference



  Number  of   characters   that   LIB$CURRENCY   has   written   into

  currency-str,  not  counting  padding  in the case of a fixed-length

  string.  The out-len argument is the address  of  an  unsigned  word

  containing  the  length of the currency symbol.  If the input string

  is truncated to the size specified in the  currency-str  descriptor,

  out-len  is set to this size.  Therefore, out-len can always be used

  by the calling program to access a valid substring of currency-str.

3 LIB$CVT_DX_DX

  LIB$CVT_DX_DX  converts  a  VAX  standard  atomic  or  string  datum

  described  by  a source descriptor to another VAX standard atomic or

  string datum described by a destination descriptor.  This conversion

  is supported over a subset of the VAX standard data types.



     Format:



       LIB$CVT_DX_DX  src ,dst [,dst-len]



     Arguments:



  src



  type: unspecified

  access: read only

  mechanism: by descriptor



  Source item to be converted by LIBCVT_DX_DX.  The  src  argument  is

  the  address  of  a  descriptor  pointing  to  the source item to be

  converted.  The type of the item to be converted is contained in the

  descriptor.



  dst



  type: unspecified

  access: write only

  mechanism: by descriptor



  Destination of the conversion.  The dst argument is the address of a

  descriptor  pointing  to  the  destination  item.   The  destination

  descriptor specifies the data type  to  which  the  source  item  is

  converted.



  dst-len



  type: word (unsigned)

  access: write only

  mechanism: by reference



  Length in bytes of the destination item (when that item is a string)

  that  has  been  converted by LIB$CVT_DX_DX, not including any space

  filling.  The dst-len argument contains the address of  an  unsigned

  word containing this length.

3 LIB$CVT_xTB

  LIB$CVT_DTB,   LIB$CVT_HTB   and   LIB$CVT_OTB   return   a   binary

  representation of the ASCII text string representation of a decimal,

  hexadecimal, or octal number.



     Format:



       LIB$CVT_DTB  count ,string ,result



       LIB$CVT_HTB  count ,string ,result



       LIB$CVT_OTB  count ,string ,result



     Arguments:



  count



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Byte count of the input ASCII text string.  The count argument is  a

  signed  longword  integer  containing  the  byte  count of the input

  string.



  string



  type: character string

  access: read only

  mechanism: by reference



  ASCII text string representation of a decimal, hexadecimal, or octal

  number  which  LIB$CVTxTB  converts  to  binary representation.  The

  string argument is the address of a character string containing this

  input string to be converted.



  result



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Binary representation of the input string.  The result  argument  is

  the  address  of  a signed longword integer containing the converted

  string.

3 LIB$DATE_TIME

  LIB$DATE_TIME returns the  VAX/VMS  system  date  and  time  in  the

  semantics of a user-provided string.



     Format:



       LIB$DATE_TIME  dst-str



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string into which LIB$DATE_TIME writes the  system  date

  and  time.   The  dst-str  argument  is  the address of a descriptor

  pointing to the destination string.

3 LIB$DAY

  LIB$DAY returns the number of days since the  system  zero  date  of

  November 17, 1858, or since a user-supplied starting date.



     Format:



       LIB$DAY  day-number [,user-time] [,day-time]



     Arguments:



  day-number



  type: longword integer (signed) 

  access: write only

  mechanism: by reference



  Number of days since the system zero date.  The day-number  argument

  is  the  address  of  a  signed  longword integer containing the day

  number.



  user-time



  type: quadword integer (signed)

  access: read only

  mechanism: by reference



  User-supplied time, in 100-nanosecond units.  The user-time argument

  is  the  address  of  a  signed quadword integer containing the user

  time.  This is an optional argument.  If omitted, the default is the

  current system time.



  day-time



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Number  of  10-millisecond  units  since  midnight.   The   day-time

  argument  is  the  address  of  a signed longword integer into which

  LIB$DAY writes this number of units.

3 LIB$DECODE_FAULT



  LIB$DECODE_FAULT is a tool for  building  condition  handlers  which

  process instruction fault exceptions.  It is called from a condition

  handler.



     Format:



       LIB$DECODE_FAULT  signal-args ,mechanism-args ,user-action

                  [,user-arg] [,instruction-definitions] 



     Arguments:



  signal-args



  type: longword (unsigned)

  access: read only

  mechanism: by reference, array reference



  Signal  arguments  array  that  was  passed  from  VAX/VMS  to  your

  condition  handler.   The signal-args argument is the address of the

  signal arguments array.



  mechanism-args



  type: longword (unsigned)

  access: read only

  mechanism: by reference, array reference



  Mechanism arguments array that  was  passed  from  VAX/VMS  to  your

  condition  handler.   The  mechanism-args argument is the address of

  the mechanism arguments array.



  user-action



  type: unspecified

  access: call after stack unwind

  mechanism: by descriptor, procedure 



  User-supplied action routine that LIB$DECODE_FAULT calls  to  handle

  the  exception.   The  user-action  argument  is  the  address  of a

  descriptor pointing to your user action routine.  User-action may be

  of  type  "bound  procedure  value"  when  called  by languages with

  up-level addressing.  If user-action is not of type "bound procedure

  value," it is assumed to be the address of an entry mask.



  user-arg



  type: unspecified

  access: read only

  mechanism: by value



  Additional   information   passed   from   your   handler    without

  interpretation  to  your user action routine.  The user-arg argument

  contains the value of  this  additional  information.   This  is  an

  optional argument; if omitted, zero is used.



  instruction-definitions



  type: byte (unsigned)

  access: read only

  mechanism: by reference, array reference



  Array  of  bytes  specifying   instruction   opcodes   and   operand

  definitions   which  are  to  replace  or  supplement  the  standard

  instruction definitions.  The  instruction-definitions  argument  is

  the address of this array.

3 LIB$DEC_OVER

  LIB$DEC_OVER enables or disables decimal overflow detection for  the

  calling procedure activation.  The previous decimal overflow setting

  is returned.



     Format:



       LIB$DEC_OVER  new-setting



     ARGUMENT



   new-setting



  type: byte (unsigned)

  access: read only

  mechanism: by reference



  New decimal overflow enable setting.  The  new-setting  argument  is

  the  address  of  an  unsigned  byte  that  contains the new decimal

  overflow enable setting.  Bit 0 set to 1 means enable; bit 0 set  to

  0 means disable.

3 LIB$DELETE_FILE

  LIB$DELETE_FILE deletes one or more files.  The specification of the

  file(s) to be deleted may include wildcards.



  LIB$DELETE_FILE is similar in function to the DCL command DELETE.



     Format:



       LIB$DELETE_FILE  filespec [,default-filespec]

                  [,related-filespec] [,success-routine]

                  [,error-routine] [,confirm-routine]

                  [,user-arg] [,resultant-name] [,file-scan-context] 



     Arguments:



  filespec



  type: character string

  access: read only

  mechanism: by descriptor



  String containing the RMS file specification of the  file(s)  to  be

  deleted.   The  filespec  argument  is  the  address of a descriptor

  pointing to the file specification.  If the  specification  includes

  wildcards, each file that matches the specification is deleted.  The

  string must not contain more than 255 characters.  Any string  class

  is supported.



  default-filespec



  type: character string

  access: read only

  mechanism: by descriptor



  Default file specification  of  the  file(s)  to  be  deleted.   The

  default-filespec argument is the address of a descriptor pointing to

  the default file specification.  This is an  optional  argument;  if

  omitted,  the  default  is  the  null  string.   Any string class is

  supported.



  related-filespec



  type: character string

  access: read only

  mechanism: by descriptor



  Related file specification  of  the  file(s)  to  be  deleted.   The

  related-filespec argument is the address of a descriptor pointing to

  the related file specification.   Any  string  class  is  supported.

  This  is  an  optional argument; if omitted, the default is the null

  string.



  success-routine



  type: procedure entry mask

  access: function call (before return)

  mechanism: by reference



  User-supplied success routine that LIB$DELETE_FILE  calls  after  it

  successfully  deletes  a  file.  The success-routine argument is the

  address of the entry mask of the success routine.



  error-routine



  type: procedure entry mask

  access: function

  call (before return)

  mechanism: by reference



  User-supplied error  routine  that  LIB$DELETE_FILE  calls  when  it

  detects  an error.  The error-routine argument is the address of the

  entry mask of this routine.



  confirm-routine



  type: procedure entry mask

  access: function call (before return)

  mechanism: by reference



  User-supplied confirm routine that LIB$DELETE_FILE calls before each

  file is deleted.  The confirm-routine argument is the address of the

  entry mask of this routine.   The  value  returned  by  the  confirm

  routine  determines whether or not the file will be be deleted.  The

  confirm routine can be used to select specific  files  for  deletion

  based on criteria such as expiration date, size, and so on.



  user-arg



  type: unspecified

  access: read only

  mechanism: unspecified



  User-supplied argument that LIB$DELETE_FILE  passes  to  the  error,

  success  and  confirm  routines each time they are called.  Whatever

  mechanism is used to pass user-arg to  LIB$DELETE_FILE  is  used  to

  pass  it to the routines.  This is an optional argument; if omitted,

  zero is passed by immediate value.



  resultant-name



  type: character string

  access: write only

  mechanism: by descriptor



  String into which LIB$DELETE_FILE  writes  the  RMS  resultant  file

  specification  of  the  last  file  processed.   The  resultant-name

  argument is the address of a descriptor pointing  to  the  resultant

  name.



  file-scan-context



  type: longword integer (signed)

  access: modify

  mechanism: by reference



  Context for deleting a list  of  filespecs.   The  file-scan-context

  argument is the address of a longword containing the context value.

3 LIB$DELETE_LOGICAL

  LIB$DELETE_LOGICAL requests the calling process's  Command  Language

  Interpreter  (CLI) to delete a supervisor-mode process logical name.

  LIB$DELETE_LOGICAL provides the same function  as  the  DCL  command

  DEASSIGN.



     Format:



       LIB$DELETE_LOGICAL  log-nam [,table-desc]



     Arguments:



  log-nam



  type: character string

  access: read only

  mechanism: by descriptor



  Logical name to be deleted.  The log-nam argument is the address  of

  descriptor pointing to this logical name string.  The maximum length

  of a logical name is 255 characters.



  table-desc



  type: character string

  access: read only

  mechanism: by descriptor



  Name of the table from which the logical name is to be deleted.  The

  table-desc  argument is the address of a descriptor pointing to this

  name string.  If omitted, the LNM$PROCESS table is used.

3 LIB$DELETE_SYMBOL

  LIB$DELETE_SYMBOL requests the calling  process's  Command  Language

  Interpreter (CLI) to delete an existing CLI symbol.



     Format:



       LIB$DELETE_SYMBOL  symbol [,tbl-ind]



     Arguments:



  symbol



  type: character string

  access: read only

  mechanism: by descriptor



  Name of the symbol to be deleted by LIB$DELETE_SYMBOL.   The  symbol

  argument  is  the  address  of  a descriptor pointing to this symbol

  string.  The symbol name is  converted  to  uppercase  and  trailing

  blanks are removed before use.



  tbl-ind



  type: longword integer (signed)

  access: read only

  mechanism: by reference 



  Indicator of the table which contains the symbol to be deleted.  The

  tbl-ind argument is the address of a signed longword integer that is

  this table indicator.

3 LIB$DIGIT_SEP

  LIB$DIGIT_SEP returns the system's digit separator symbol.



     Format:



       LIB$DIGIT_SEP  digit-sep-str [,out-len]



     Arguments:



  digit-sep-str



  type: character string

  access: write only

  mechanism: by descriptor



  Digit separator symbol returned by LIB$DIGIT_SEP.  The digit-sep-str

  argument  is  the  address  of  a  descriptor  pointing to the digit

  separator.



  out-len



  type: word (unsigned)

  access: write only

  mechanism: by reference



  Number  of  characters  written  into  digit-sep-str,  not  counting

  padding  in the case of a fixed-length string.  The out-len argument

  is the address of an unsigned word  containing  the  length  of  the

  digit  separator  symbol.   If  the input string is truncated to the

  size specified in the digit-sep-str descriptor, out-len  is  set  to

  this  size.   Therefore,  out-len  can always be used by the calling

  program to access a valid substring of digit-sep-str.

3 LIB$DISABLE_CTRL

  LIB$DISABLE_CTRL requests the  calling  process's  Command  Language

  Interpreter  (CLI)  to not intercept the selected control characters

  when  they  are  typed  during  an  interactive  terminal   session.

  LIB$DISABLE_CTRL  provides  the same function as the DCL command SET

  NOCONTROL.



     Format:



       LIB$DISABLE_CTRL  disable-msk [,old-msk]



     Arguments:



  disable-msk



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Bit  mask  indicating  which  control  characters  are  not  to   be

  intercepted.  The disable-msk argument is the address of an unsigned

  longword containing this bit mask.



  old-msk



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Previous bit mask.  The  old-msk  argument  is  the  address  of  an

  unsigned  longword  into  which  LIB$DISABLE_CTRL writes the old bit

  mask.  The old bit mask is of the same form as disable-msk.

3 LIB$DO_COMMAND

  LIB$DO_COMMAND stops  program  execution  and  directs  the  command

  language  interpreter  to  execute a command which you supply as the

  argument.  If successful, LIB$DO_COMMAND does not return control  to

  the calling program.  Instead, LIB$DO_COMMAND calls the $EXIT system

  service,  then  passes  the  command   to   the   command   language

  interpreter.



  If you want control to return to the caller, use LIB$SPAWN instead.



     Format:



       LIB$DO_COMMAND  cmd-text



     Arguments:



  cmd-text



  type: character string

  access: read only

  mechanism: by descriptor



  Text of the command which  LIB$DO_COMMAND  executes.   The  cmd-text

  argument  is  the  address  of  a descriptor pointing to the command

  text.  If cmd-text contains embedded blanks, it must be enclosed  by

  quotation   marks.   The  maximum  length  of  the  command  is  132

  characters.

3 LIB$DAY_OF_WEEK

  LIB$DAY_OF_WEEK returns the numeric day of the  week  for  an  input

  time  value.   If  0 is the input time value, the current day of the

  week is returned.  The days are numbered 1 through 7, with Monday as

  day 1 and Sunday as day 7.



     Format:



       LIB$DAY_OF_WEEK  time ,day-num



     Arguments:



  time



  type: quadword (unsigned)

  access: read only

  mechanism: by reference



  Time to be translated to a day of  the  week,  or  zero.   The  time

  argument is the address of an unsigned quadword containing the value

  of time.  Time is expressed as a positive offset  from  system  base

  time  (November  17,  1858).   If time is equal to zero, the numeric

  value for the current day is returned.



  day-num



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Numeric day of week.  The day-num  argument  is  the  address  of  a

  longword   into  which  LIB$DAY_OF_WEEK  writes  the  integer  value

  representing the day of the week.

3 LIB$EDIV

  LIB$EDIV performs extended-precision division.  LIB$EDIV  makes  the

  VAX-11 EDIV instruction available as a callable procedure.



     Format:



       LIB$EDIV  divisor ,dividend ,quotient ,remainder



     Arguments:



  divisor



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Divisor.  The divisor argument is the address of a  signed  longword

  integer containing the divisor.



  dividend



  type: quadword integer (signed)

  access: read only

  mechanism: by reference



  Dividend.  The dividend argument is the address of a signed quadword

  integer containing the dividend.



  quotient



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Quotient.  The quotient argument is the address of a signed longword

  integer containing the quotient.



  remainder



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Remainder.  The remainder  argument  is  the  address  of  a  signed

  longword integer containing the remainder.

3 LIB$EMODx

  The  LIB$EMODx  procedures  perform  accurate  range  reduction   of

  floating  point  arguments.   They provide the higher-level language

  users with the capability to use the  VAX-11  hardware  instructions

  EMODF, EMODD, EMODG, and EMODH.



     Format:



       LIB$EMODF  multiplier ,mult-ext ,multiplicand ,int ,fract



       LIB$EMODD  multiplier ,mult-ext ,multiplicand ,int ,fract



       LIB$EMODG  multiplier ,mult-ext ,multiplicand ,int ,fract



       LIB$EMODH  multiplier ,mult-ext ,multiplicand ,int ,fract



     Arguments:



  multiplier



  type: D_floating, F_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  Multiplier.  For LIB$EMODF, the multiplier argument is an F_floating

  number.   For  LIB$EMODD,  the  multiplier  argument is a D_floating

  number.  For LIB$EMODG, the  multiplier  argument  is  a  G_floating

  number.   For  LIB$EMODH,  the  multiplier argument is an H_floating

  number.



  mult-ext



  type: byte integer (signed), word (unsigned)

  access: read only

  mechanism: by reference



  The left-justified multiplier-extension bits.   For  F_floating  and

  D_floating,   the  mult-ext  argument  is  an  unsigned  byte.   For

  G_floating and H_floating, the  mult-ext  argument  is  an  unsigned

  word.



  multiplicand



  type: D_floating, F_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  Multiplicand.   For  LIB$EMODF,  the  multiplicand  argument  is  an

  F_floating  number.   For  LIB$EMODD, the multiplicand argument is a

  D_floating number.  For LIB$EMODG, the multiplicand  argument  is  a

  G_floating  number.   For LIB$EMODH, the multiplicand argument is an

  H_floating number.



  int



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Integer portion of the result.  The int argument is the address of a

  signed  longword  integer  containing  the  integer  portion  of the

  result.



  fract



  type: D_floating, F_floating, G_floating, H_floating

  access: write only

  mechanism: by reference



  Fractional portion of the result.  For LIB$EMODF, the fract argument

  is  an  F_floating  number.   For LIB$EMODD, the fract argument is a

  D_floating  number.   For  LIB$EMODG,  the  fract  argument   is   a

  G_floating   number.   For  LIB$EMODH,  the  fract  argument  is  an

  H_floating number.

3 LIB$EMUL

  LIB$EMUL performs extended-precision multiplication.  LIB$EMUL makes

  the VAX EMUL instruction available as a callable procedure.



     Format:



       LIB$EMUL  multiplier ,multiplicand ,addend ,product



     Arguments:



  multiplier



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Multiplier   used   by   LIB$EMUL   in   the   extended    precision

  multiplication.   The multiplier argument is the address of a signed

  longword integer containing the multiplier.



  multiplicand



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Multiplicand  used   by   LIB$EMUL   in   the   extended   precision

  multiplication.   The  multiplicand  argument  is  the  address of a

  signed longword integer containing the multiplicand.



  addend



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Addend used by LIB$EMUL in the  extended  precision  multiplication.

  The  addend  argument  is  the  address of a signed longword integer

  containing the addend.



  product



  type: quadword integer (signed)

  access: write only

  mechanism: by reference



  Product of  the  extended  precision  multiplication.   The  product

  argument  is  the  address  of  a signed quadword integer into which

  LIB$EMUL writes the product.

3 LIB$ENABLE_CTRL

  LIB$ENABLE_CTRL requests  the  calling  process's  Command  Language

  Interpreter  (CLI)  to  resume  interception of the selected control

  characters when  they  are  typed  during  an  interactive  terminal

  session.   LIB$ENABLE_CTRL  provides  the  same  function as the DCL

  command SET CONTROL.



     Format:



       LIB$ENABLE_CTRL  enable-msk [,old-msk]



     Arguments:



  enable-msk



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Bit mask indicating for which control characters LIB$ENABLE_CTRL  is

  to  enable  interception.  The enable-msk argument is the address of

  an unsigned longword containing this bit mask.  Each of the 32  bits

  corresponds  to one of the 32 possible control characters.  If a bit

  is set, the corresponding control character is  intercepted  by  the

  CLI.   Currently,  only  bits 20 and 25, corresponding to CTRL/T and

  CTRL/Y, are recognized.



  old-msk



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Previous bit mask.  The  old-msk  argument  is  the  address  of  an

  unsigned  longword containing the old bit mask.  The old bit mask is

  of the same form as enable-msk.

3 LIB$ESTABLISH

  LIB$ESTABLISH moves the address  of  a  condition  handling  routine

  (which  can  be a user-written or a library procedure) to longword 0

  of the stack frame of the caller of LIB$ESTABLISH.



     Format:



       LIB$ESTABLISH  new-handler



     Arguments:



   new-handler



  type: procedure entry mask 

  access: read only

  mechanism: by reference



  Routine to be set up as  the  condition  handler.   The  new-handler

  argument is the address of the procedure entry mask to this routine.

3 LIB$EXTV

  LIB$EXTV returns  a  sign-extended  longword  field  that  has  been

  extracted from the specified variable bit field.



     Format:



       LIB$EXTV  pos ,size ,base



     Arguments:



  pos



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Position (relative to the base address) of  the  first  bit  in  the

  field  that LIB$EXTV extracts.  The pos argument is the address of a

  signed longword integer containing the position.



  size



  type: byte (unsigned)

  access: read only

  mechanism: by reference, array reference



  Size of the bit field LIB$EXTV extracts.  The size argument  is  the

  address  of  an unsigned byte containing the size.  The maximum size

  is 32 bits.



  base



  type: longword (unsigned)

  access: read only

  mechanism: by value



  Base address of the bit field LIB$EXTV extracts from  the  specified

  variable  bit  field.   The  base  argument  is an unsigned longword

  containing the base address.

3 LIB$EXTZV

  LIB$EXTZV returns a  longword  zero-extended  field  that  has  been

  extracted from the specified variable bit field.



     Format:



       LIB$EXTZV  pos ,size ,base



     Arguments:



  pos



  type: longword (signed)

  access: read only

  mechanism: by reference



  Position (relative to the base address) of  the  first  bit  in  the

  field  LIB$EXTZV  extracts.   The  pos  argument is the address of a

  signed longword integer containing the position.



  size



  type: byte (unsigned)

  access: read only

  mechanism: by reference



  Size of the bit field LIB$EXTZV extracts.  The size argument is  the

  address  of  an unsigned byte containing the size.  The maximum size

  is 32 bits.



  base



  type: longword (unsigned)

  access: read only

  mechanism: by value



  Base address of the bit field LIB$EXTZV extracts.  The base argument

  is the address of an unsigned longword containing the base address.

3 LIB$FFx

  LIB$FFC  and  LIB$FFS  search  the  field  specified  by  the  start

  position, size, and base for the first clear or set bit.



     Format:



       LIB$FFC  start-pos ,size ,base ,find-pos



       LIB$FFS  start-pos ,size ,base ,find-pos



     Arguments:



  start-pos



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Starting position, relative to the base address, of the bit field to

  be  searched by LIB$FFx.  The start-pos argument is the address of a

  signed longword integer containing the starting position.



  size



  type: byte (unsigned)

  access: read only

  mechanism: by reference



  Number of bits to be searched by LIB$FFx.  The size argument is  the

  address  of an unsigned byte containing the size of the bit field to

  be searched.  The maximum size is 32 bits.



  base



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Base address of the bit field  which  LIB$FFx  searches.   The  base

  argument  is the address of an unsigned longword containing the base

  address.



  find-pos



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Bit position of the first bit in the specified state (clear or set),

  relative  to the base address.  The find-pos argument is the address

  of a signed longword integer into which LIB$FFC writes the  position

  of the first clear bit and into which LIB$FFS writes the position of

  the first set bit.

3 LIB$FILE_SCAN_END

  LIB$FILE_SCAN_END  is  called  after  each  sequence  of  calls   to

  LIB$FILE_SCAN.   LIB$FILE_SCAN_END deallocates any saved RMS context

  and deallocates the virtual memory  which  had  been  allocated  for

  holding the related file specification information.



     Format:



       LIB$FILE_SCAN_END  fab [,context]



     Arguments:



  fab



  type: longword (unsigned)

  access: modify

  mechanism: by reference



  File Access Block (FAB) used with LIB$FILE_SCAN.  The  fab  argument

  is  the  address of an unsigned longword containing this file access

  block.



  context



  type: longword integer (signed)

  access: modify

  mechanism: by reference



  Temporary  default  context  used  in  LIB$FILE_SCAN.   The  context

  argument  is  the  address  of  a longword containing this temporary

  default context.

3 LIB$FILE_SCAN

  LIB$FILE_SCAN searches an area, such as a directory, for  all  files

  matching   the   file  specification  given  and  transfers  program

  execution to the  specified  user-written  routine.   Wildcards  are

  acceptable.   An action routine is called for each file and/or error

  found.  LIB$FILE_SCAN allows the search sequence to continue even if

  an  error  (such  as  the  nopriv  error)  occurs  whie processing a

  particular file.



     Format:



       LIB$FILE_SCAN  fab ,success-rtn ,error-rtn [,context]



     Arguments:



  fab



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  File Access Block (FAB) referencing a  valid  NAM  block.   The  fab

  argument  is  the  address of the FAB which contains the address and

  length  of  the   file   specification   being   searched   for   by

  LIB$FILE_SCAN.



  success-rtn



  type: procedure entry mask

  access: function call (before return)

  mechanism: by reference, procedure reference



  User-supplied success routine that LIB$FILE_SCAN calls when  a  file

  is  found.  The success-rtn argument is the address of the procedure

  entry mask to the success routine.  The success routine  is  invoked

  with  the  FAB  address  that was passed to LIB$FILE_SCAN.  The user

  context may be pased to this routine using the  FAB$L_CTX  field  in

  the FAB.



  error-rtn



  type: procedure entry mask

  access: function call (before return)

  mechanism: by reference, procedure reference



  User-supplied  error  routine  that  LIB$FILE_SCAN  calls  when   it

  encounters  an  error.  The error-rtn argument is the address of the

  procedure entry mask to the error routine.   The  error  routine  is

  called with the FAB argument that was passed to LIB$FILE_SCAN.



  context



  type: longword integer (signed)

  access: modify

  mechanism: by reference



  Default file context used  in  processing  file  specifications  for

  multiple  input  files.   The  context  argument is the address of a

  longword, which must be initialized to zero by your  program  before

  the   first   call   to   LIB$FILE_SCAN.    After  the  first  call,

  LIB$FILE_SCAN maintains this longword.   You  must  not  change  the

  value of context in subsequent calls to LIB$FILE_SCAN.

3 LIB$FIND_FILE

  LIB$FIND_FILE is called with a wildcard file specification for which

  it  searches.   LIB$FIND_FILE  returns  all file specifications that

  satisfy that wildcard file specification.



     Format:



       LIB$FIND_FILE  file-spec ,result-spec ,context [,default-spec]

                  [,related-spec] [,stv-addr] [,user-flags] 



     Arguments:



  file-spec



  type: character string

  access: read only

  mechanism: by descriptor



  File specification, which may contain wildcards, which LIB$FIND_FILE

  uses  to search for the desired file.  The file-spec argument is the

  address of a descriptor pointing to  the  file  specification.   The

  maximum length of a file specification is 255 bytes.



  result-spec



  type: character string

  access: modify

  mechanism: by descriptor, dynamic string



  Resultant file specification  that  LIB$FIND_FILE  returns  when  it

  finds  a  file  that  matches  the  specification  in  the file-spec

  argument.  The result-spec argument is the address of the  resultant

  file specification.



  context



  type: longword integer (signed)

  access: modify

  mechanism: by reference



  Zero or an address of an internal FAB/NAM  buffer  from  a  previous

  call  to  LIB$FIND_FILE.   The context argument is a signed longword

  integer containing the address of the context.   LIB$FIND_FILE  uses

  this  argument  to retain the context when processing multiple input

  files.  Unspecified portions of file  specifications  are  inherited

  from the last files processed because the file contexts are retained

  in this argument.



  default-spec



  type: character string

  access: read only

  mechanism: by descriptor



  Default  file  specification.   The  default-spec  argument  is  the

  address of a descriptor pointing to the default file specification.



  related-spec



  type: character string

  access: read only

  mechanism: by descriptor



  Related file specification containing the context of the  last  file

  processed.  The related-spec argument is the address of a descriptor

  pointing to the related file specification.



  stv-addr



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  RMS secondary status  value  from  a  failing  RMS  operation.   The

  stv-addr  argument  is  a  signed  longword  integer  containing the

  address of a longword-lngth buffer  to  receive  the  RMS  secondary

  status  value  (usually  returned  in  the  file access block field,

  FAB$L_STV) .



  user-flags



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  User flags.  The user-flags argument is the address of  an  unsigned

  longword containing the user flags.

3 LIB$FIND_FILE_END

  LIB$FIND_FILE_END is called once after each  sequence  of  calls  to

  LIB$FIND_FILE.  LIB$FIND_FILE_END deallocates any saved RMS context,

  and deallocates the  virtual  memory  used  to  hold  the  allocated

  context block.



     Format:



       LIB$FIND_FILE_END  context



     Arguments:



  context



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Zero or the address of a FAB/NAM buffer  from  a  previous  call  to

  LIB$FIND_FILE.   The  context  argument is the address of a longword

  which contains this context.

3 LIB$FIND_IMAGE_SYMBOL

  LIB$FIND_IMAGE_SYMBOL reads global symbols from the shareable  image

  file.   This  routine  then  dynamically activates a shareable image

  into the P0 address space of a process.



     Format:



       LIB$FIND_IMAGE_SYMBOL  filename ,symbol-desc ,symbol-val 



     Arguments:



  filename



  type: character string

  access: read only

  mechanism: by descriptor



  Name of the file for which LIB$FIND_IMAGE_SYMBOL is searching.   The

  filename  argument  is  the address of a descriptor pointing to this

  file name string.  This argument may contain  only  the  file  name.

  File type cannot be indicated.



  symbol-desc



  type: character string

  access: read only

  mechanism: by descriptor



  Symbol for which LIB$FIND_IMAGE_SYMBOL is searching in the  filename

  file.   The  symbol-desc  argument  is  the  address of a descriptor

  pointing to the symbol name string.  The symbol name string must  be

  input  in uppercase letters; this routine does not perform uppercase

  conversion.



  symbol-val



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Symbol  value  which   LIB$FIND_IMAGE_SYMBOL   has   located.    The

  symbol-val argument is the address of a signed longword integer into

  which LIB$FIND_IMAGE_SYMBOL returns the symbol value.  If the symbol

  is  relocatable, the starting virtual address of the shareable image

  in memory will be added to the symbol value.

3 LIB$FIXUP_FLT

  LIB$FIXUP_FLT  finds  the  reserved  operand  of   any   F_floating,

  D_floating,   G_floating,   or  H_floating  instruction  (with  some

  exceptions) after  a  reserved  operand  fault  has  been  signaled.

  LIB$FIXUP_FLT changes the reserved operand from -0.0 to the value of

  the new-operand argument, if present; or to +0.0 if  new-operand  is

  absent.



     Format:



       LIB$FIXUP_FLT  sig-args ,mch-args [,new-operand]



     Arguments:



  sig-args



  type: longword (unsigned)

  access: read only

  mechanism: by reference, array reference



  Signal argument vector.  The sig-args argument is the address of  an

  an  array  of  unsigned  longwords  containing  the  signal argument

  vector.



  mch-args



  type: longword (unsigned)

  access: read only

  mechanism: by reference, array reference



  Mechanism argument vector.  The mch-args argument is the address  of

  an  array  of  unsigned  longwords containing the mechanism argument

  vector.



  new-operand



  type: F_floating

  access: read only

  mechanism: by reference



  An  F_floating  value  to  replace  the   reserved   operand.    The

  new-operand   argument  is  the  address  of  an  F_floating  number

  containing the new operand.   This  is  an  optional  argument.   If

  omitted, the default value is +0.0.

3 LIB$FLT_UNDER

  LIB$FLT_UNDER enables or disables floating-point underflow detection

  for  the  calling  procedure  activation.   The  previous setting is

  returned as a function value.



     Format:



       LIB$FLT_UNDER  new-setting



     Arguments:



  new-setting



  type: byte (unsigned)

  access: read only

  mechanism: by reference



  New floating-point underflow enable setting.  Bit 0 set to  1  means

  enable; bit 0 set to 0 means disable.

3 LIB$FREE_EF

  LIB$FREE_EF  frees  a  local  event  flag  previously  allocated  by

  LIB$GET_EF.  LIB$FREE_EF is the complement of LIB$GET_EF.



     Format:



       LIB$FREE_EF  event-flag-num



     Arguments:



  event-flag-num



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Event  flag  number  to  be   deallocated   by   LIB$FREE_EF.    The

  event-flag-num  argument is the address of a signed longword integer

  that contains the event flag number, which is the value returned  to

  the user by LIB$GET_EF.

3 LIB$FREE_LUN

  LIB$FREE_LUN releases a logical unit number allocated by LIB$GET_LUN

  to the pool of available numbers.  LIB$FREE_LUN is the complement of

  LIB$GET_LUN.



     Format:



       LIB$FREE_LUN  log-unit-num



     Arguments:



  log-unit-num



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Logical unit number to be deallocated.  The log-unit-num argument is

  the  address of a signed longword integer that contains this logical

  unit number, which is the value previously returned by LIB$GET_LUN.

3 LIB$FREE_TIMER

  LIB$FREE_TIMER frees the storage allocated by LIB$INIT_TIMER.



     Format:



       LIB$FREE_TIMER  handle-adr



     Arguments:



  handle-adr



  type: longword (unsigned)

  access: modify

  mechanism: by reference



  Pointer to a block of storage containing the  value  returned  by  a

  previous   call   to   LIB$INIT_TIMER;  this  is  the  storage  that

  LIB$FREE_TIMER deallocates.  The handle-adr argument is the  address

  of an unsigned longword integer containing that value.

3 LIB$FREE_VM

  LIB$FREE_VM deallocates an  entire  block  of  virtually  contiguous

  bytes  that  had been allocated by LIB$GET_VM.  The arguments passed

  are the same as for LIB$GET_VM.



     Format:



       LIB$FREE_VM  num-bytes ,base-adr



     Arguments:



  num-bytes



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Number  of  virtually  contiguous  bytes  to   be   deallocated   by

  LIB$FREE_VM.   The  num-bytes argument is the address of an unsigned

  longword that contains this number.



  base-adr



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Address of the first byte to be  deallocated  by  LIB$FREE_VM.   The

  base-adr  argument contains the address of an unsigned longword that

  is this address.

3 LIB$GET_COMMAND

  LIB$GET_COMMAND gets one record  of  ASCII  text  from  the  current

  controlling input device, specified by the logical name SYS$COMMAND.



     Format:



       LIB$GET_COMMAND  get-str [,prompt-str] [,out-len]



     Arguments:



  get-str



  type: character string

  access: write only

  mechanism: by descriptor



  String that LIB$GET_COMMAND  gets  from  SYS$COMMAND.   The  get-str

  argument is the address of a descriptor pointing to this string.



  prompt-str



  type: character string

  access: read only

  mechanism: by descriptor



  Prompt message that  LIB$GET_COMMAND  displays  on  the  controlling

  terminal.   The  prompt-str  argument is the address of a descriptor

  pointing to the prompt.  A valid prompt consists of text followed by

  a colon(:), one space, and no carriage-return/line-feed combination.



  out-len



  type: word (unsigned)

  access: write only

  mechanism: by reference



  Number  of  bytes  written  into  get-str  by  LIB$GET_COMMAND,  not

  counting  padding  in  the  case  of  a  fixed  string.  The out-len

  argument is the address of an unsigned word containing this  length.

  If  the  input  string  is  truncated  to  the size specified in the

  get-str descriptor, out-len is set to this size.  Therefore, out-len

  can  always  be  used  by  the  calling  program  to  access a valid

  substring of get-str.

3 LIB$GET_COMMON

  LIB$GET_COMMON copies a string in the common area to the destination

  string.   (The  common  area  is  an  area  of storage which remains

  defined across multiple image activations in a process.) The  string

  length is taken from the first longword of the common area.



     Format:



       LIB$GET_COMMON  dst-str [,chars-copied]



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string  into  which  LIB$GET_COMMON  writes  the  string

  copied from the common area.  The dst-str argument is the address of

  a descriptor pointing to the destination string.



  chars-copied



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Number of characters written into  dst-str  by  LIB$GET_COMMON,  not

  counting  padding  in  the  case  of  a  fixed-length  string.   The

  chars-copied argument is  the  address  of  a  signed  word  integer

  containing  the number of characters copied.  If the input string is

  truncated  to  the  size  specified  in  the   dst-str   descriptor,

  chars-copied  is  set  to  this  size.   Therefore, chars-copied can

  always be used by the calling program to access a valid substring of

  dst-str.

3 LIB$GETDVI

  LIB$GETDVI provides a simplified interface  to  the  $GETDVI  system

  service.   It  returns  information  about the primary and secondary

  device characteristics of an I/O device.  The calling  process  need

  not  have  a  channel  assigned  to  the device about which it wants

  information.



     Format:



       LIB$GETDVI  item-code [,channel] [,device-name] [,out-value] 

                  [,out-string] [,out-len] 



     Arguments:



  item-code



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Code specifying the item of information  you  are  requesting.   The

  item-code  argument  is  the  address  of  a signed longword integer

  containing the item code.  All valid $GETDVI item codes, whose names

  begin with DVI$_, are accepted.



  channel



  type: word integer (signed)

  access: read only

  mechanism: by reference



  VMS I/O channel assigned to the device for which LIB$GETDVI  returns

  information.   The  channel argument is the address of a signed word

  integer containing the channel specification.   If  channel  is  not

  specified,  device-name  is  used  instead.  You must specify either

  channel or device-name,  but  not  both.   If  both  or  neither  is

  specified, the error status LIB$_INVARG is returned.



  device-name



  type: character string

  access: read only

  mechanism: by descriptor



  Name of the device for which LIB$GETDVI  returns  information.   The

  device-name  argument is the address of a descriptor pointing to the

  device name string.  If this string contains a colon, the colon  and

  the characters that follow it are ignored.



  out-value



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Numeric value of the information requested.  The out-value  argument

  is the address of an unsigned longword containing the numeric value.

  If an item is listed as only returning a string value, this argument

  is ignored.



  out-string



  type: character string

  access: write only

  mechanism: by descriptor



  String representation of the information requested.  The  out-string

  argument   is   the  address  of  a  descfriptor  pointing  to  this

  information.  If out-string  is  not  specified  and  if  the  value

  returned   has  only  a  string  representation,  the  error  status

  LIB$_INVARG is returned.



  out-len



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Number  of  significant  characters   written   to   out-string   by

  LIB$GETDVI.   The  out-len  argument is the address of a signed word

  integer containing this length.

3 LIB$GET_EF

  LIB$GET_EF allocates one local event flag from a  process-wide  pool

  and  returns  the number of the allocated flag to the caller.  If no

  flags are available, LIB$GET_EF returns an  error  as  its  function

  value.



     Format:



       LIB$GET_EF  event-flag-num



     Arguments:



  event-flag-num



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Number of the local event flag that LIB$GET_EF allocated, or  -1  if

  no  local  event flag was available.  The event-flag-num argument is

  the address of a  signed  longword  integer  into  which  LIB$GET_EF

  writes the number of the local event flag that it allocates.

3 LIB$GET_FOREIGN

  LIB$GET_FOREIGN  requests  the  calling  image's  Command   Language

  Interpreter  (CLI)  to  return the contents of the "foreign command"

  line that activated the current image.



     Format:



       LIB$GET_FOREIGN  get-str [,user-prompt] [,out-len] 

                  [,force-prompt] 



     Arguments:



  get-str



  type: character string

  access: write only

  mechanism: by descriptor



  String which LIB$GET_FOREIGN uses to  receive  the  foreign  command

  line.   The get-str argument is the address of a descriptor pointing

  to this string.  If the foreign command text returned  was  obtained

  by prompting to SYS$INPUT (see the description of force-prompt), the

  text is translated to uppercase so as to  be  more  consistent  with

  text returned from the CLI.



  user-prompt



  type: character string

  access: read only

  mechanism: by descriptor



  Optional user-supplied prompt for text which LIB$GET_FOREIGN uses if

  no  command-line text is available.  The user-prompt argument is the

  address of a descriptor pointing to the user prompt.  If omitted, no

  prompting  is  performed.   It  is  recommended  that user-prompt be

  specified.  If user-prompt is omitted and if no command-line text is

  available, a zero-length string will be returned.



  out-len



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Number  of  bytes  written  into  get-str  by  LIB$GET_FOREIGN,  not

  counting padding in the case of a fixed-length get-str.  The out-len

  argument is  the  address  of  a  signed  word  integer  into  which

  LIB$GET_FOREIGN writes the number of bytes.



  force-prompt



  type: longword integer (signed)

  access: modify

  mechanism: by reference



  Value which LIB$GET_FOREIGN uses to control whether or not prompting

  is  to  be performed.  The force-prompt argument is the address of a

  signed longword integer containing this value.  If the  low  bit  of

  force-prompt  is  zero,  or if force-prompt is omitted, prompting is

  done only if the CLI does not return a command line.  If the low bit

  is   one,   prompting   is   done  unconditionally.   If  specified,

  force-prompt is set to one before returning to the caller.

3 LIB$GET_INPUT

  LIB$GET_INPUT gets  one  record  of  ASCII  text  from  the  current

  controlling input device, specified by SYS$INPUT.



     Format:



       LIB$GET_INPUT  get-str [,prompt-str] [,out-len]



     Arguments:



  get-str



  type: character string

  access: write only

  mechanism: by descriptor



  String which LIB$GET_INPUT gets from the input device.  The  get-str

  argument  is  the  address of a descriptor pointing to the character

  string into which LIB$GET_INPUT writes the text  received  from  the

  current input device.



  prompt-str



  type: character string

  access: read only

  mechanism: by descriptor



  Prompt message that is displayed on the controlling  terminal.   The

  prompt-str  argument  is  the address of a descriptor containing the

  prompt.  A valid prompt consists of text followed by a colon (:),  a

  space,  and  no  carriage-return/line-feed combination.  The maximum

  size of the prompt message is 255 characters.   If  the  controlling

  input device is not a terminal, this argument is ignored.



  out-len



  type: word (unsigned)

  access: write only

  mechanism: by reference



  Number of bytes written into get-str by LIB$GET_INPUT, not  counting

  padding  in the case of a fixed string.  The out-len argument is the

  address of an unsigned word containing this number.   If  the  input

  string is truncated to the size specified in the get-str descriptor,

  out-len is set to this size.  Therefore, out-len can always be  used

  by the calling program to access a valid substring of get-str.

3 LIB$GETJPI

  LIB$GETJPI provides a simplified interface  to  the  $GETJPI  system

  service.    It   provides  accounting,  status,  and  identification

  information about a specified process.



  LIB$GETJPI obtains only one item of information in a single call.



     Format:



       LIB$GETJPI  item-code [,process-id] [,process-name]

                  [,out-value] [,out-string] [,out-len] 



     Arguments:



  item-code



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Item identifier code specifying the  item  of  information  you  are

  requesting.   The  item-code  argument  is  the  address of a signed

  longword integer containing the item code.  You may request only one

  item in each call to LIB$GETJPI.



  process-id



  type: longword (unsigned)

  access: modify

  mechanism: by reference



  Process identification of the process for which you  are  requesting

  information.   The process-id argument is the address of an unsigned

  longword containing the  process  identification.   If  you  do  not

  specify process-id, process-name is used.



  process-name



  type: character string

  access: read only

  mechanism: by descriptor



  A 1- to 15-character string specifying the name of the  process  for

  which  you  are  requesting  information.   The name must correspond

  exactly to the name of the process  for  which  you  are  requesting

  information;   LIB$GETJPI   does   not   allow  trailing  blanks  or

  abbreviations.



  out-value



  type: unspecified

  access: write only

  mechanism: by reference



  Numeric value of  the  information  you  requested.   The  out-value

  argument  is  the  address  of  a  longword  or  quadword into which

  LIB$GETJPI writes the numeric value of this information. If the item 
  you  requested  returns

  only a string value, this argument is ignored.



  out-string



  type: character string

  access: write only

  mechanism: by descriptor



  String  representation  of  the  information  you  requested.    The

  out-string  argument is the address of a character string into which

  LIB$GETJPI writes the string representation.  



  out-len



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Number  of  significant  characters   written   to   out-string   by

  LIB$GETJPI.   The  out-len  argument is the address of a signed word

  integer into which LIB$GETJPI writes the number of characters.

3 LIB$GET_LUN

  LIB$GET_LUN allocates one logical unit number  from  a  process-wide

  pool.  If a unit is available, its number is returned to the caller.

  Otherwise, an error is returned as the function value.



     Format:



       LIB$GET_LUN  log-unit-num



     Arguments:



  log-unit-num



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Allocated  logical  unit  or  -1  if  none   was   available.    The

  log-unit-num  argument  is  the  address  of  a  longword into which

  LIB$GET_LUN returns the value of the allocated logical unit.

3 LIB$GETSYI

  LIB$GETSYI provides a simplified interface  to  the  $GETSYI  system

  service.    The   $GETSYI   system   service   obtains   status  and

  identification information about  the  system.   LIB$GETSYI  returns

  only one item of information in a single call.



     Format:



       LIB$GETSYI  item-code [,out-value] [,out-string]

                  [,out-len] [,csid] [,node-name] 



     Arguments:



  item-code



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Item code specifying the desired item of information.  The item-code

  argument is the address of a signed longword integer containing this

  item code.  All valid $GETSYI item codes are accepted.



  out-value



  type: unspecified

  access: write only

  mechanism: by reference



  Numeric value returned by LIB$GETSYI.  The out-value argument is the

  address of a longword or quadword containing this value.  If an item

  is listed as  returning  only  a  string  value,  this  argument  is

  ignored.



  out-string



  type: character string

  access: write only

  mechanism: by descriptor



  Information returned by LIB$GETSYI.  The out-string argument is  the

  address  of  a descriptor pointing to the character string that will

  receive this information.



  out-len



  type: word (unsigned)

  access: write only

  mechanism: by reference



  Number  of  significant  characters  written  to   out-string,   not

  including  blank  padding  or  truncated  characters.   The  out-len

  argument is the address of an unsigned word  into  which  LIB$GETSYI

  returns this number.



  csid



  type: longword (unsigned)

  access: modify

  mechanism: by reference



  Cluster  system  identification  (CSID)  of  the  node   for   which

  information  is to be returned.  The csid argument is the address of

  this CSID.  If both csid and  node-name  are  specified,  LIB$GETSYI

  uses   node-name   and  writes  into  the  csid  argument  the  CSID

  corresponding to the node identified by node name.



  node-name



  type: character string

  access: read only

  mechanism: by descriptor



  Name of the node for which  information  is  to  be  returned.   The

  node-name  argument  is  the address of a descriptor pointing to the

  node name string.  If node-name is not specified, csid is used.   If

  neither  node-name nor csid is specified, the caller's node is used.

  See the csid argument for more information.

3 LIB$GET_SYMBOL

  LIB$GET_SYMBOL  requests  the  calling  process's  Command  Language

  Interpreter  (CLI)  to return the value of a CLI symbol as a string.

  LIB$GET_SYMBOL then returns the string to the  caller.   Optionally,

  LIB$GET_SYMBOL  can  return the length of the returned value and the

  table in which the symbol was found.



     Format:



       LIB$GET_SYMBOL  symbol ,ret-buf [,ret-len] [,tbl-ind]



     Arguments:



  symbol



  type: character string

  access: read only

  mechanism: by descriptor



  Name of the symbol for which LIB$GET_SYMBOL  searches.   The  symbol

  argument  is the address of a descriptor pointing to the name of the

  symbol.  LIB$GET_SYMBOL converts the symbol name  to  uppercase  and

  removes trailing blanks before the search.  Symbol must begin with a

  letter.  The maximum length of symbol is 255 characters.



  ret-buf



  type: character string

  access: write only

  mechanism: by descriptor



  Value of the returned symbol.  The ret-buf argument is  the  address

  of   a   descriptor  pointing  to  a  character  string  into  which

  LIB$GET_SYMBOL writes the value of the symbol.



  ret-len



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Length of the symbol value returned by LIB$GET_SYMBOL.  The  ret-len

  argument  is  the  address  of  a  signed  word  integer  into which

  LIB$GET_SYMBOL writes the length.



  tbl-ind



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Indicator of which table contained the symbol.  The tbl-ind argument

  is   the   address   of   a   signed  longword  integer  into  which

  LIB$GET_SYMBOL writes the table indicator.

3 LIB$GET_VM

  LIB$GET_VM allocates a  specified  number  of  virtually  contiguous

  bytes  in  the program region and returns the virtual address of the

  first byte so allocated.



     Format:



       LIB$GET_VM  num-bytes, base-adr



     Arguments:



  num-bytes



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Number of virtually contiguous bytes that LIB$GET_VM allocates.  The

  num-bytes argument is the address of an unsigned longword containing

  the number of bytes.  LIB$GET_VM allocates enough pages  to  satisfy

  the  request.   Your  program should not reference an address before

  the first byte address allocated (base-adr) or beyond the last  byte

  allocated  (base-adr  +  num-bytes  -  1)  since  that  space may be

  assigned to another procedure.



  base-adr



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  First virtual address of the contiguous block of bytes allocated  by

  LIB$GET_VM.   The  base-adr  argument  is the address of an unsigned

  longword containing this base address.

3 LIB$ICHAR

  LIB$ICHAR converts the first character of  a  source  string  to  an

  8-bit ASCII integer extended to a longword.



     Format:



       LIB$ICHAR  src-str



     ARGUMENT



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source string whose first character is converted to  an  integer  by

  LIB$ICHAR.   The  scr-str  argument  is  the address of a descriptor

  pointing to this source string.

3 LIB$INDEX

  LIB$INDEX returns an index, which is the relative  position  of  the

  first occurrence of a substring in the source string.



     Format:



       LIB$INDEX  src-str ,sub-str



     Arguments:



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source string to be searched by LIB$INDEX.  The src-str argument  is

  the address of a descriptor pointing to this source string.



  sub-str



  type: character string

  access: read only

  mechanism: by descriptor



  Substring to be found.  The sub-str argument is  the  address  of  a

  descriptor pointing to this substring.

3 LIB$INIT_TIMER

  LIB$INIT_TIMER stores the current  values  of  specified  times  and

  counts for use by LIB$SHOW_TIMER or LIB$STAT_TIMER.



     Format:



       LIB$INIT_TIMER  [handle-adr]



     ARGUMENT



  handle-adr



  type: longword (unsigned)

  access: modify

  mechanism: by reference



  Pointer to a control block where the values of times and counts will

  be  stored.   The  handle-adr  argument  contains  the address of an

  unsigned  longword  that   is   this   pointer.    When   you   call

  LIB$INIT_TIMER,  you  must use the optional handle-adr argument only

  if you want to maintain several sets of statistics simultaneously.

3 LIB$INSERT_TREE

  LIB$INSERT_TREE inserts a node in a balanced binary tree.



     Format:



       LIB$INSERT_TREE  treehead ,sym-str ,ctrl-flg ,compare-rtn

                        ,alloc-rtn ,newnode [,user-data] 



     Arguments:



  treehead



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Tree head for the binary tree.  The treehead argument is the address

  of a longword that is this tree head.



  sym-str



  type: character string

  access: read only

  mechanism: by descriptor



  Key to be inserted.  The  sym-str  argument  is  the  address  of  a

  descriptor pointing to the symbol key.



  ctrl-flg



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Control flags.  The control-flg  argument  is  the  address  of  the

  control flags.  Currently only bit zero is used.



  compare-rtn



  type: procedure entry mask 

  access: function call (before return)

  mechanism: by reference, procedure reference



  User-supplied compare routine that LIB$INSERT_TREE calls to  compare

  a  symbol  with  a node.  The compare-rtn argument is the address of

  the entry mask to the compare routine.  The compare-rtn argument  is

  required;  LIB$INSERT_TREE  always  calls  the compare routine.  The

  value returned by the compare  routine  indicates  the  relationship

  between the symbol key and the node.



  alloc-rtn



  type: procedure entry mask

  access: function call (before return)

  mechanism: by reference, procedure reference



  User-supplied  allocate  routine  that  LIB$INSERT_TREE   calls   to

  allocate  virtual  memory for a node.  The alloc-rtn argument is the

  address of the entry mask to the allocate  routine.   The  alloc-rtn

  argument  is  required;  LIB$INSERT_TREE  always  calls the allocate

  routine.



  newnode



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Location where the new key is inserted.  The newnode argument is the

  address of an unsigned longword that is this new node location.



  user-data



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  User data that LIB$INSERT_TREE passes to the  compare  and  allocate

  routines.   The  user-data  argument  is  the address of an unsigned

  longword that is this data.  User-data is an optional argument.

3 LIB$INSQHI

  LIB$INSQHI inserts a queue  entry  at  the  head  of  the  specified

  self-relative interlocked queue.



     Format:



       LIB$INSQHI  entry ,header [,retry-cnt]



     Arguments:



  entry



  type: quadword integer (signed)

  access: modify

  mechanism: by reference, array reference



  Entry to be inserted by LIB$INSQHI.  The entry argument contains the

  address  of this signed quadword-aligned array that must be at least

  eight bytes long.  Bytes following the first eight bytes can be used

  for any purpose by the calling program.



  header



  type: quadword integer (signed)

  access: modify

  mechanism: by reference



  Queue header  specifying  the  queue  into  which  entry  is  to  be

  inserted.   The  header argument contains the address of this signed

  aligned quadword integer.  Header must be initialized to zero before

  first use of the queue; zero means an empty queue.



  retry-cnt



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  The number of times the insertion  is  to  be  retried  in  case  of

  secondary-interlock   failure   of   the   queue  instruction  in  a

  processor-shared memory application.  The retry-cnt argument is  the

  address of an unsigned longword that contains the retry count value.

  A value of one causes no retries.  The default value is 10.

3 LIB$INSQTI

  LIB$INSQTI inserts a queue  entry  at  the  tail  of  the  specified

  self-relative interlocked queue.



     Format:



       LIB$INSQTI  entry ,header [,retry-cnt]



     Arguments:



  entry



  type: quadword integer (signed)

  access: modify

  mechanism: by reference, array reference



  Entry to be inserted at the tail of the queue  by  LIB$INSQTI.   The

  entry  argument contains the address of this signed quadword-aligned

  array that must be at least eight bytes long.  Bytes  following  the

  first  eight  bytes  can  be  used  for  any  purpose by the calling

  program.



  header



  type: quadword integer (signed)

  access: modify

  mechanism: by reference



  Queue header specifying the queue into which the queue entry  is  to

  be  inserted.   The  header  argument  contains  the address of this

  signed aligned quadword integer.  Header must be initialized to zero

  before first use of the queue; zero means an empty queue.



  retry-cnt



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  The number of times the insertion  is  to  be  retried  in  case  of

  secondary-interlock   failure   of   the   queue  instruction  in  a

  processor-shared memory application.  The retry-cnt argument is  the

  address  of  a  longword  which contains the retry count value.  The

  default value is 10.

3 LIB$INSV

  LIB$INSV replaces the variable bit  field  specified  by  the  base,

  position,  and  size  arguments  with  bits  0 through size-1 of the

  source field.  If the size of the bit  field  is  zero,  nothing  is

  inserted.



     Format:



       LIB$INSV  src ,pos ,size ,base



     Arguments:



  src



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Source field to be inserted by LIB$INSV.  The source argument is the

  address  of  a  signed  longword  integer  that contains this source

  field.



  pos



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Bit position relative to the base address where insertion of src  is

  to  begin.   The  pos  argument is the address of a longword integer

  that contains this relative bit position.



  size



  type: byte (unsigned)

  access: read only

  mechanism: by reference



  Size of the bit field to be inserted by LIB$INSV.  The size argument

  is  the  address of an unsigned byte which contains the size of this

  bit field.  The maximum size is 32 bits.



  base



  type: aligned bit string

  access: write only

  mechanism: by reference



  Field into  which  LIB$INSV  writes  the  source  field.   The  base

  argument contains the base address of this aligned bit string.

3 LIB$INT_OVER

  LIB$INT_OVER enables or disables integer overflow detection for  the

  calling  procedure activation.  The previous integer overflow enable

  setting is returned.



     Format:



       LIB$INT_OVER  new-setting



     ARGUMENT



   new-setting



  type: byte (unsigned)

  access: read only

  mechanism: by reference



  New integer overflow enable setting.  The  new-setting  argument  is

  the  address  of  an  unsigned  byte  which contains the new integer

  overflow enable setting.  Bit 0 set to a 1 means enable, bit  0  set

  to a 0 means disable.

3 LIB$LEN

  LIB$LEN returns the length of a string.



     Format:



       LIB$LEN  src-str



     ARGUMENT



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source string whose length is  returned  by  LIB$LEN.   The  scr-str

  argument  contains  the  address  of  a  descriptor pointing to this

  source string.

3 LIB$LOOKUP_KEY

  LIB$LOOKUP_KEY scans a table of keywords to find  one  that  matches

  the keyword or keyword abbreviation specified by search-str.



     Format:



       LIB$LOOKUP_KEY  search-str ,key-table [,key-value] [,full-str]

                  [,out-len] 



     Arguments:



  search-str



  type: character string

  access: read only

  mechanism: by descriptor



  String for which LIB$LOOKUP_KEY will search in  the  keyword  table.

  The  search-str  argument is the address of a descriptor pointing to

  this string.



  key-table



  type: longword (unsigned)

  access: read only

  mechanism: by reference, array reference



  Keyword table.  The key-table argument contains the  address  of  an

  array of unsigned longwords that is this keyword table.



  key-value



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Value  of  the  keyword  found  by  LIB$LOOKUP_KEY.   The  key-value

  argument  contains  the address of an unsigned longword that is this

  keyword value.  LIB$LOOKUP_KEY writes the address of  this  unsigned

  longword into key-value.



  full-str



  type: character string

  access: write only

  mechanism: by descriptor



  Full keyword match.  The full-str argument contains the address of a

  descriptor  pointing  to  the keyword string.  LIB$LOOKUP_KEY writes

  the address of this descriptor into full-str if the full keyword  is

  matched.



  out-len



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Number of characters in the keyword, independent  of  padding.   The

  out-len  argument  is  the  address  of  a  signed word integer that

  contains the number of characters in  the  keyword.   LIB$LOOKUP_KEY

  writes the address of this signed word integer into out-len.

3 LIB$LOOKUP_TREE

  LIB$LOOKUP_TREE looks up an entry in a balanced binary tree.



     Format:



       LIB$LOOKUP_TREE  treehead ,sym-str ,compare-rtn ,newnode



     Arguments:



  treehead



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Tree head for the binary tree.  The treehead argument is the address

  of an unsigned longword that is this tree head.



  sym-str



  type: character string

  access: read only

  mechanism: by descriptor



  Key to be looked up in the binary tree.  The sym-str argument is the

  address of a descriptor pointing to the symbol key.



  compare-rtn



  type: procedure entry mask

  access: function call (before return)

  mechanism: by reference, procedure reference 



  User-supplied compare routine that LIB$LOOKUP_TREE calls to  compare

  a  symbol  with  a node.  The compare-rtn argument is the address of

  the entry mask to the compare routine.  The value  returned  by  the

  compare  routine  indicates  the relationship between the symbol key

  and the current node.



  newnode



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Location where the new symbol was found.  The  newnode  argument  is

  the address of an unsigned longword that is the newnode location.

3 LIB$LOCC

  LIB$LOCC locates a character in a  string  by  comparing  successive

  bytes  in  the  string  with  the  character  specified.  The search

  continues until the character is found or the  string  has  no  more

  characters.



     Format:



       LIB$LOCC  char-str ,src-str



     Arguments:



  char-str



  type: character string

  access: read only

  mechanism: by descriptor



  String whose initial character is used by LIB$LOCC  in  the  search.

  The  char-str argument contains the address of a descriptor pointing

  to this string.  Only the first character of char-str is  used,  and

  its length is not checked.



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  String to be searched by LIB$LOCC.   The  src-str  argument  is  the

  address of a descriptor pointing to this character string.

3 LIB$LP_LINES

  LIB$LP_LINES computes the default number of lines on a printer page.

  This  procedure  can  be  used by native-mode VAX/VMS utilities that

  produce listing files and do pagination.



     Format:



       LIB$LP_LINES  



     Arguments:

  None.

3 LIB$MATCHC

  LIB$MATCHC searches a source string for a  specified  substring  and

  returns  an  index,  which  is  the  relative  position of the first

  occurrence of a substring in the source string.



     Format:



       LIB$MATCHC  sub-str ,scr-str



     Arguments:



  sub-str



  type: character string

  access: read only

  mechanism: by descriptor



  Substring to be found.  The sub-str argument is  the  address  of  a

  descriptor pointing to this substring.



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source string to be searched by LIB$MATCHC.  The src-str argument is

  the address of a descriptor pointing to this source string.

3 LIB$MATCH_COND

  LIB$MATCH_COND checks to see if a given condition  value  matches  a

  list of condition values that you supply.



     Format:



       LIB$MATCH_COND  cond-val ,cond-val-i ,...



     Arguments:



  cond-val



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Condition value to be matched.  The cond-val argument is the address

  of an unsigned longword that contains this condition value.



  cond-val-i



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  The condition value(s) to be compared to cond-val.   The  cond-val-i

  argument(s)  are  the  address(es)  of the unsigned longword(s) that

  contain these condition value(s).

3 LIB$MOVC3

  LIB$MOVC3 makes the VAX MOVC3 instruction available  as  a  callable

  procedure.   The  source  item  is  moved  to  the destination item.

  Overlap of the source and destination  items  does  not  affect  the

  result.



     Format:



       LIB$MOVC3  length ,source ,dest



     Arguments:



  length



  type: word (unsigned)

  access: read only

  mechanism: by reference



  Number of bytes to be moved from source to dest by  LIB$MOVC3.   The

  length  argument  is  the address of an unsigned word which contains

  this number of bytes.  The maximum transfer is 65,535 bytes.



  source



  type: unspecified

  access: read only

  mechanism: by reference



  Item to be moved.  The source argument is the address of this item.



  dest



  type: unspecified

  access: write only

  mechanism: by reference



  Item into which source will be moved.   The  dest  argument  is  the

  address of this item.

3 LIB$MOVC5

  LIB$MOVC5 makes the VAX MOVC5 instruction available  as  a  callable

  procedure.   The  source  item  is  moved  to  the destination item.

  Overlap of the source and destination  items  does  not  affect  the

  result.



     Format:



       LIB$MOVC5  src-len ,source ,fill ,dst-len ,dest



     Arguments:



  src-len



  type: word (unsigned)

  access: read only

  mechanism: by reference



  Number of bytes in the source item.  The  src-len  argument  is  the

  address of an unsigned word that contains this number of bytes.  The

  maximum length of source is 65,535 bytes.



  source



  type: unspecified

  access: read only

  mechanism: by reference



  Item to be moved by LIB$MOVC5.  The source argument is  the  address

  of  this  item.   If  src-len is zero, indicating that dest is to be

  entirely filled by the fill character, then  source  is  ignored  by

  LIB$MOVC5.



  fill



  type: byte integer (signed)

  access: read only

  mechanism: by reference



  Character used to pad source  to  the  length  of  dest.   The  fill

  argument  is the address of a signed byte integer that contains this

  fill character.



  dst-len



  type: word (unsigned)

  access: read only

  mechanism: by reference



  Length of dest in bytes.  The dst-len argument is the address of  an

  unsigned word that contains this number of bytes.  The maximum value

  of dst-len is 65,535 bytes.



  dest



  type: unspecified

  access: write only

  mechanism: by reference



  Item into which source will be moved.   The  dest  argument  is  the

  address of this item.

3 LIB$MOVTC

  LIB$MOVTC moves the source string, character by  character,  to  the

  destination  string  after  translating  each  character  using  the

  specified translation table.



     Format:



       LIB$MOVTC  src-str ,fill-char ,trans-tbl ,dst-str



     Arguments:



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source string to be translated and moved by LIB$MOVTC.  The  src-str

  argument  is  the  address  of  a descriptor pointing to this source

  string.



  fill-char



  type: character string

  access: read only

  mechanism: by descriptor



  Fill character used to pad src-str to the length  of  dst-str.   The

  fill-char  argument  is  the  address  of a descriptor pointing to a

  string.  The first character of this string  is  used  as  the  fill

  character.   The  length of this string is not checked and fill-char

  is not translated.



  trans-tbl



  type: character string

  access: read only

  mechanism: by descriptor



  Translation table used by LIB$MOVTC.  The trans-tbl argument is  the

  address of a descriptor pointing to the translation table string.



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination  string  into  which  LIB$MOVTC  writes  the  translated

  src-str.   The  dst-str  argument  is  the  address  of a descriptor

  pointing to this destination string.

3 LIB$MOVTUC

  LIB$MOVTUC moves the source string, character by character,  to  the

  destination  string  after  translating  each  character  using  the

  specified translation table until the stop character is encountered.



     Format:



       LIB$MOVTUC  src-str ,stop-char ,trans-tbl ,dst-str [,fill-char]



     Arguments:



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source string to be translated and moved by LIB$MOVTUC.  The src-str

  argument  is  the  address  of  a descriptor pointing to this source

  string.



  stop-char



  type: character string

  access: read only

  mechanism: by descriptor



  Stop character that causes LIB$MOVTUC to stop translating the source

  string.   The  stop-char  argument  is  the  address of a descriptor

  pointing to a string.  The first character of this string is used as

  the  stop  character.   The length of this string is not checked and

  stop-char is not translated.



  trans-tbl



  type: character string

  access: read only

  mechanism: by descriptor



  Translation table used by LIB$MOVTUC.  The trans-tbl argument is the

  address of a descriptor pointing to the translation table string.



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string  into  which  LIB$MOVTUC  writes  the  translated

  src-str.   The  dst-str  argument  is  the  address  of a descriptor

  pointing to this destination string.



  fill-char



  type: character string

  access: read only

  mechanism: by descriptor



  Character used to  pad  src-str  to  the  length  of  dst-str.   The

  fill-char  argument  is  the  address  of a descriptor pointing to a

  string.  The first character of this string  is  used  as  the  fill

  character.   The  length of this string is not checked and fill-char

  is not translated.

3 LIB$POLYz

  LIB$POLYF, LIB$POLYD, LIB$POLYG, and  LIB$POLYH  allow  higher-level

  language  users  to  evaluate polynomials.  These procedures use the

  VAX hardware instructions POLYF, POLYD, POLYG, and POLYH.



     Format:



       LIB$POLYF  arg ,degree ,coeff ,result



       LIB$POLYD  arg ,degree ,coeff ,result



       LIB$POLYG  arg ,degree ,coeff ,result



       LIB$POLYH  arg ,degree ,coeff ,result



                  Each of the above four formats accepts as input one

                  of the four floating 

                  point types.



     Arguments:



  arg



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  Argument for the polynomial.  The arg argument is the address  of  a

  floating  point  number that contains this argument.  For LIB$POLYF,

  arg is an F_floating number.  For LIB$POLYD,  arg  is  a  D_floating

  number.   For LIB$POLYG, arg is a G_floating number.  For LIB$POLYH,

  arg is an H_floating number.



  degree



  type: word integer (signed)

  access: read only

  mechanism: by reference



  Highest  numbered  non-zero  coefficient  to  participate   in   the

  evaluation.   The  degree  argument  is the address of a signed word

  integer that contains this highest numbered coefficient.



  coeff



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference, array reference



  Floating-point coefficients.  The coeff argument is the  address  of

  an  array  of  floating-point  coefficients.  The coefficient of the

  highest-order term of the polynomial is the lowest addressed element

  in  the  array.   For  LIB$POLYF,  coeff  is  an array of F_floating

  numbers.  For LIB$POLYD, coeff is an array  of  D_floating  numbers.

  For  LIB$POLYG,  coeff  is  an  array  of  G_floating  numbers.  For

  LIB$POLYH, coeff is an array of H_floating numbers.



  result



  type: F_floating, D_floating, G_floating, H_floating

  access: write only

  mechanism: by reference



  Result of the calculation.  The result argument is the address of  a

  floating  point  number that contains this result.  LIB$POLYF writes

  the address of result into an F_floating number.   LIB$POLYD  writes

  the  address  of  result into a D_floating number.  LIB$POLYG writes

  the address of result into a G_floating  number.   LIB$POLYH  writes

  the address of result into an H_floating number.

3 LIB$PUT_COMMON

  LIB$PUT_COMMON copies the contents of a string into the common area.

  The  common  area is an area of storage which remains defined across

  multiple image activations in a process.  Optionally, LIB$PUT_COMMON

  returns  the actual number of characters copied.  The maximum number

  of characters that can be copied is 252.



     Format:



       LIB$PUT_COMMON  src-str [,chars-copied]



     Arguments:



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source string to be copied to the  common  area  by  LIB$PUT_COMMON.

  The src-str argument is the address of a descriptor pointing to this

  source string.



  chars-copied



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Number of characters copied by LIB$PUT_COMMON to  the  common  area.

  The  chars-copied  argument  is the address of a signed word integer

  that contains this number of characters.  LIB$PUT_COMMON writes this

  number into the chars-copies argument.

3 LIB$PUT_OUTPUT

  LIB$PUT_OUTPUT writes a record to  the  current  controlling  output

  device, specified by SYS$OUTPUT using the VAX RMS $PUT service.



     Format:



       LIB$PUT_OUTPUT  msg-str



     ARGUMENT



  msg-str



  type: character string

  access: read only

  mechanism: by descriptor



  Message string written to the current controlling output  device  by

  LIB$PUT_OUTPUT.  The msg-str argument is the address of a descriptor

  pointing to this message string.  VAX RMS handles all formatting, so

  the   message  does  not  need  to  include  such  ASCII  formatting

  instructions as carriage return (CR).

3 LIB$RADIX_POINT

  LIB$RADIX_POINT returns  the  system's  radix  point  symbol.   This

  symbol  is  used  inside a digit string to separate the integer part

  from the  fraction  part.   This  routine  works  by  attempting  to

  translate  the  logical name SYS$RADIX_POINT as a process, group, or

  system logical name.



     Format:



       LIB$RADIX_POINT  radix-point-str [,out-len]



     Arguments:



  radix-point-str



  type: character string

  access: write only

  mechanism: by descriptor



  Radix point string.  The radix-point-str argument is the address  of

  a descriptor pointing to this radix point string.



  out-len



  type: word (unsigned)

  access: write only

  mechanism: by reference



  The number of characters written into radix-point-str, not  counting

  padding  in the case of a fixed-length string.  The out-len argument

  is the address of an unsigned word that contains this number.

3 LIB$REMQHI

  LIB$REMQHI  removes  an  entry  from  the  head  of  the   specified

  self-relative interlocked queue.



     Format:



       LIB$REMQHI  header ,remque-adr [,retry-cnt]



     Arguments:



  header



  type: quadword integer (signed)

  access: modify

  mechanism: by reference



  Queue header specifying the queue from which entry will be  removed.

  The  header  argument  contains  the  address of this signed aligned

  quadword integer.  Header must be initialized to zero  before  first

  use of the queue; zero means an empty queue.



  remque-adr



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Address of the  removed  entry.   The  remque-adr  argument  is  the

  address  of an unsigned longword that contains this address.  If the

  queue was empty, remque-adr is set to the address of the header.



  retry-cnt



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  The number of times the operation  is  to  be  retried  in  case  of

  secondary-interlock   failure   of   the   queue  instruction  in  a

  processor-shared memory application.  The retry-cnt argument is  the

  address  of a longword that contains the retry count value.  A value

  of one causes no retries.  The default value is 10.

3 LIB$REMQTI

  LIB$REMQTI  removes  an  entry  from  the  tail  of  the   specified

  self-relative interlocked queue.



     Format:



       LIB$REMQTI  header ,remque-adr [,retry-cnt]



     Arguments:



  header



  type: quadword integer (signed)

  access: modify

  mechanism: by reference



  Queue header specifying the queue from which  the  entry  is  to  be

  deleted.   The  header  argument contains the address of this signed

  aligned quadword integer.  Header must be initialized to zero before

  first use of the queue; zero means an empty queue.



  remque-adr



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Address of the removed entry.  The rem-que argument is  the  address

  of  a  longword that contains this address.  If the queue was empty,

  remque-adr is set to the address of the header.



  retry-cnt



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  The number of times the operation  is  to  be  retried  in  case  of

  secondary-interlock   failure   of   the   queue  instruction  in  a

  processor-shared memory application.  The retry-cnt argument is  the

  address  of  a  longword that is this retry count value.  A value of

  one causes no retries.  The default value is 10.

3 LIB$RENAME_FILE

  LIB$RENAME_FILE changes the name(s)  of  one  or  more  files.   The

  specification of the file(s) to be renamed may include wild cards.



  LIB$RENAME_FILE is similar in function to the DCL command RENAME.



     Format:



       LIB$RENAME_FILE  old-filespec ,new-filespec [,default-filespec]

                  [,related-filespec] [,flags] [,success-routine]

                  [,error-routine]

                  [,confirm-routine] [,user-arg] [,old-resultant-name]

                  [,new-resultant-name]

                  [,file-scan-context] 



     Arguments:



  old-filespec



  type: character string

  access: read only

  mechanism: by descriptor



  File specification of the file(s) to be renamed.   The  old-filespec

  argument  is  the  address  of a descriptor pointing to the old file

  specification.  The specification may include wild cards,  in  which

  case each file which matches the specification will be renamed.  The

  string must not contain more than 255 characters.  Any string  class

  is supported.



  new-filespec



  type: character string

  access: read only

  mechanism: by descriptor



  File specification for  the  new  file  name(s).   The  new-filespec

  argument  is  the  address  of a descriptor pointing to the new file

  specification.



  default-filespec



  type: character string

  access: read only

  mechanism: by descriptor



  Default file specification  of  the  file(s)  to  be  renamed.   The

  default-filespec argument is the address of a descriptor pointing to

  the default file specification.



  related-filespec



  type: character string

  access: read only

  mechanism: by descriptor



  Related file specification  of  the  file(s)  to  be  renamed.   The

  related-filespec argument is the address of a descriptor pointing to

  the related file specification.  This is an  optional  argument;  if

  omitted,  the  default  is  the  null  string.   Any string class is

  supported.



  flags



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Longword of flag bits  designating  optional  behavior.   The  flags

  argument  is the address of an unsigned longword containing the flag

  bits.  This is an optional argument; if omitted, the default is that

  all flags are clear.



  success-routine



  type: procedure entry mask

  access: function call (before return)

  mechanism: by reference



  User-supplied success routine that LIB$RENAME_FILE calls after  each

  successful  rename.   The success-routine argument is the address of

  the entry mask to the success routine.



  error-routine



  type: procedure entry mask

  access: function call (before return)

  mechanism: by reference



  User-supplied error  routine  that  LIB$RENAME_FILE  calls  when  it

  detects  an error.  The error-routine argument is the address of the

  entry mask to the error routine.  The value returned  by  the  error

  routine  determines  whether  LIB$RENAME_FILE  processes more files.

  

  confirm-routine



  type: procedure entry mask

  access: function call (before return)

  mechanism: by reference



  User-supplied confirm routine that LIB$RENAME_FILE calls  before  it

  renames  a file.  The confirm-routine argument is the address of the

  entry mask to the  confirm  routine.   The  value  returned  by  the

  confirm  routine  determines  whether or not LIB$RENAME_FILE renames

  the file.



  user-arg



  type: unspecified

  access: read only

  mechanism: unspecified



  Value that LIB$RENAME_FILE passes to the success, error and  confirm

  routines  each  time they are called.  Whatever mechanism is used to

  pass  user-arg  to  LIB$RENAME_FILE  is  used  to  pass  it  to  the

  user-supplied  routines.   This is an optional argument; if omitted,

  zero is passed by value.



  old-resultant-name



  type: character string

  access: write only

  mechanism: by descriptor



  String into which LIB$RENAME_FILE  copies  the  old  resultant  file

  specification  of  the  last  file  processed.   This is an optional

  argument.  If present, it is used to store  the  file  specification

  passed  to  the user-supplied routines instead of a default class S,

  type T string.  Any string class is supported.



  new-resultant-name



  type: character string

  access: write only

  mechanism: by descriptor



  String into which LIB$RENAME_FILE writes the new RMS resultant  file

  specification  of  the  last file processed.  The new-resultant-name

  argument is the address of a descriptor pointing to  the  new  name.

  This  is  an optional argument.  If present, it is used to store the

  file specification passed to the user-supplied routines instead of a

  class S, type T string.  Any string class is supported.



  file-scan-context



  type: longword (unsigned)

  access: modify

  mechanism: by reference



  Context for renaming a list of filespecs.  The file-scan-context  is

  the  address  of  a  longword which contains this context.  You must

  initialize this longword to zero before the first  of  a  series  of

  calls  to  LIB$RENAME_FILE.   LIB$RENAME_FILE  uses  the  file  scan

  context to retain the file context for multiple input files.

3 LIB$RESERVE_EF

  LIB$RESERVE_EF allocates a local  event  flag  number  specified  by

  event-flag-num.



     Format:



       LIB$RESERVE_EF  event-flag-num



     argument



  event-flag-num



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Event  flag  number  to  be  allocated   by   LIB$RESERVE_EF.    The

  event-flag-num  argument  contains  the address of a signed longword

  integer that is this event flag number.

3 LIB$REVERT

  LIB$REVERT   deletes   the   condition   handler   established    by

  LIB$ESTABLISH  by  clearing  the  address  pointing to the condition

  handler from the activated procedure's stack frame.



     Format:



       LIB$REVERT  



     Arguments:

     None.

3 LIB$RUN_PROGRAM

  LIB$RUN_PROGRAM causes the  current  program  to  stop  running  and

  begins execution of another program.



     Format:



       LIB$RUN_PROGRAM  pgm-name



     ARGUMENT



  pgm-name



  type: character string

  access: read only

  mechanism: by descriptor



  File name of the program to be run in place of the current  program.

  The  pgm-name argument contains the address of a descriptor pointing

  to this file name string.

3 LIB$SCANC

  LIB$SCANC is used to find a  specified  set  of  characters  in  the

  source string.



     Format:



       LIB$SCANC  src-str ,table-arr ,mask



     Arguments:



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source string used by LIB$SCANC to index into a table.  The  src-str

  argument  contains  the  address  of  a  descriptor pointing to this

  source string.



  table-arr



  type: byte (unsigned)

  access: read only

  mechanism: by reference, array reference



  Table that LIB$SCANC indexes into and ANDs with the mask byte.   The

  table  argument  contains the address of an unsigned byte array that

  is this table.



  mask



  type: byte (unsigned)

  access: read only

  mechanism: by reference



  Mask that is ANDed with  bytes  in  table-arr.   The  mask  argument

  contains the address of an unsigned byte that is this mask.

3 LIB$SCOPY_DXDX

  LIB$SCOPY_DXDX copies a source string  passed  by  descriptor  to  a

  destination string.



     Format:



       LIB$SCOPY_DXDX  src-str ,dst-str



     Arguments:



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source  string  to  be  copied  to   the   destination   string   by

  LIB$SCOPY_DXDX.   The  src-str  argument  contains  the address of a

  descriptor pointing to this source string.  The descriptor class can

  be  unspecified,  fixed-length, decimal string, array, noncontiguous

  array, varying, or dynamic.



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string to  which  the  source  string  is  copied.   The

  dst-str  argument  contains  the address of a descriptor pointing to

  this destination string.

3 LIB$SCOPY_R_DX

  LIB$SCOPY_R_DX copies a source  string  passed  by  reference  to  a

  destination string.



     Format:



       LIB$SCOPY_R_DX  src-len ,src-adr ,dst-str



     Arguments:



  src-len



  type: word (unsigned)

  access: read only

  mechanism: by reference



  Length of the source string.   The  src-len  argument  contains  the

  address of an unsigned word that is this length.



  src-adr



  type: character string

  access: read only

  mechanism: by reference



  Source  string  to  be  copied  to   the   destination   string   by

  LIB$SCOPY_R_DX.   The src-adr argument is the address of this source

  string.



  dst-str



  type: character string

  access: read only

  mechanism: by descriptor



  Destination string to  which  the  source  string  is  copied.   The

  dst-str  argument  contains  the address of a descriptor pointing to

  this destination string.

3 LIB$SET_LOGICAL

  LIB$SET_LOGICAL requests  the  calling  process's  Command  Language

  Interpreter  (CLI)  to  define or redefine a supervisor-mode process

  logical name.  It provides the  same  function  as  the  DCL  DEFINE

  command .



     Format:



       LIB$SET_LOGICAL  log-nam [,value] [,table-desc]

                  [,attributes] [,item-list]



                  Either the item-list or value argument must be

                  specified. If both item-list and value are

                  specified,

                  the value argument is ignored. 



     Arguments:



  log-nam



  type: character string

  access: read only

  mechanism: by descriptor



  Logical name to be  defined  or  redefined.   The  log-nam  argument

  contains  the  address of a descriptor pointing to this logical name

  string.  The maximum length of a logical name is 255 characters.



  value



  type: character string

  access: read only

  mechanism: by descriptor



  Value to be given to the logical name.  The value argument  contains

  the  address  of  a  descriptor  pointing to this value string.  The

  maximum length of a logical name value is 255 characters.



  table-desc



  type: character string

  access: read only

  mechanism: by descriptor



  Name of the  table  in  which  to  create  the  logical  name.   The

  table_desc argument contains the address of a descriptor pointing to

  the logical name table.  If no table is  specified,  LNM$PROCESS  is

  used as the default.



  attributes



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Logical name or translation attributes.  The attributes argument  is

  the  address of an unsigned longword which contains the logical name

  or translation attributes.



  item-list



  type: longword (unsigned)

  access: read only

  mechanism: by reference, array reference



  Item list describing the equivalence names for  this  logical  name.

  The  item-list argument contains the address of an unsigned longword

  array that contains this item list.  If item-list is not  specified,

  the logical name will have only one value, as specified in the value

  argument.

3 LIB$SET_SYMBOL

  LIB$SET_SYMBOL  requests  the  calling  process's  Command  Language

  Interpreter (CLI) to define or redefine a CLI symbol.



     Format:



       LIB$SET_SYMBOL  symbol ,value [,tbl-ind]



     Arguments:



  symbol



  type: character string

  access: read only

  mechanism: by descriptor



  Name of the symbol to be defined or modified by LIB$SET_SYMBOL.  The

  symbol  argument  is  the  address  of a descriptor pointing to this

  symbol string.  If you redefine a previously defined CLI symbol, the

  symbol value is modified to the new value that you provide.



  value



  type: character string

  access: read only

  mechanism: by descriptor



  Value to be given to the symbol.  The value argument is the  address

  of a descriptor pointing to this value string.



  tbl-ind



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Indicator of the table which will contain the defined  symbol.   The

  tbl-ind argument is the address of a signed longword integer that is

  this table indicator.

3 LIB$SFREE1_DD

  LIB$SFREE1_DD returns one dynamic string area to free storage.



     Format:



       LIB$SFREE1_DD  dsc-adr



     ARGUMENT



  dsc-adr



  type: quadword (unsigned)

  access: modify

  mechanism: by reference



  Dynamic descriptor specifying  the  area  to  be  deallocated.   The

  dsc-adr argument is the address of an unsigned quadword that is this

  descriptor.  The descriptor is assumed to be dynamic and  its  class

  field is not checked.

3 LIB$SFREEN_DD

  LIB$SFREEN_DD returns one or more dynamic strings to free storage.



     Format:



       LIB$SFREEN_DD  dsc-num ,first-dsc



     Arguments:



  dsc-num



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Number of adjacent descriptors to  be  flagged  by  LIB$FREEN_DD  as

  having  no  allocated area (DSC$A_POINTER = 0 and DSC$W_LENGTH = 0).

  The dsc-num argument contains the address of  an  unsigned  longword

  that  is  this  number.   The  deallocated  area is returned to free

  storage.



  first-dsc



  type: quadword (unsigned)

  access: modify

  mechanism: by reference



  First descriptor of an array of descriptors.  The first-dsc argument

  contains  the  address  of  an  unsigned quadword that is this first

  descriptor.  The descriptors are assumed to be  dynamic,  and  their

  class fields are not checked.

3 LIB$SGET1_DD

  LIB$SGET1_DD  allocates  dynamic  virtual  memory  to   the   string

  descriptor you specify.



     Format:



       LIB$SGET1_DD  length ,string



     Arguments:



  length



  type: word (unsigned)

  access: read only

  mechanism: by reference



  Number of bytes  of  dynamic  virtual  memory  to  be  allocated  by

  LIB$SGET1_DD.   The  length  argument  is the address of an unsigned

  word that contains this number.  The amount of storage allocated may

  be  rounded  up  automatically.   If  the number of bytes is zero, a

  small amount of space is allocated.



  string



  type: quadword (unsigned)

  access: modify

  mechanism: by reference



  Descriptor of the dynamic string to which LIB$SGET1_DD will allocate

  the  dynamic  virtual  memory.   The  string  argument  contains the

  address of an unsigned quadword that is this descriptor.

3 LIB$SHOW_TIMER

  LIB$SHOW_TIMER returns times and counts accumulated since  the  last

  call   to   LIB$INIT_TIMER  and  displays  them  on  SYS$OUTPUT.   A

  user-supplied action routine may change this default behavior.



     Format:



       LIB$SHOW_TIMER  [,handle-adr] [,code] [,action-rtn

                  [,user-arg]] 



     Arguments:



  handle-adr



  type: longword integer (unsigned)

  access: read only

  mechanism: by reference



  Block of storage containing the value returned by a previous call to

  LIB$INIT_TIMER.   The  handle-adr  argument  is  the  address  of an

  unsigned longword integer containing that value.



  code



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Integer specifying the statistic you want; if it is omitted or zero,

  all  five statistics are returned on one line.  The code argument is

  the address of a signed longword integer  containing  the  statistic

  code.



  action-rtn



  type: procedure entry mask

  access: function

  call (before return)

  mechanism: by reference, procedure reference



  User-supplied action routine called by LIB$SHOW_TIMER.  The  default

  action  of LIB$SHOW_TIMER is to write the results to SYS$OUTPUT.  An

  action routine is useful if you want to write the results to a file,

  or  in  general,  anyplace  other  than  SYS$OUTPUT.  The action-rtn

  argument is the address of the entry mask to this routine.



  user-arg



  type: unspecified

  access: read only

  mechanism: by value



  32-bit  value  to  be  passed  to   the   action   routine   without

  interpretation.   If  omitted,  LIB$SHOW_TIMER  passes a zero to the

  user routine.

3 LIB$SHOW_VM

  LIB$SHOW_VM  returns  the  statistics  accumulated  from  calls   to

  LIB$GET_VM and LIB$FREE_VM.



     Format:



       LIB$SHOW_VM  [code] [,action-rtn [,user-arg]]



     Arguments:



  code



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Code specifying any one of the three statistics  to  be  written  to

  SYS$OUTPUT  or passed to an action routine for processing.  The code

  argument is the address of a signed longword integer containing  the

  statistic  code.   This  is  an optional argument.  If the statistic

  code is omitted or is zero, all three statistics are returned on one

  line.



  action-rtn



  type: procedure entry mask

  access: function call (before return)

  mechanism: by reference, procedure reference



  User-supplied action routine called  by  LIB$SHOW_VM.   By  default,

  LIB$SHOW_VM  returns statistics to SYS$OUTPUT.  An action routine is

  useful when you want to return statistics to a file, or in  general,

  to  anyplace  other than SYS$OUTPUT.  The action-rtn argument is the

  address of the entry  mask  to  the  action  routine.   The  routine

  returns  either  a success or failure condition value, which will be

  returned as the value of LIB$SHOW_VM.



  user-arg



  type: unspecified

  access: read only

  mechanism: unspecified



  A 32-bit value to be passed directly to the action  routine  without

  interpretation.   That  is,  the contents of the argument list entry

  user-arg are copied to the argument list entry for action-rtn.

3 LIB$SIGNAL

  LIB$SIGNAL generates a  signal  that  indicates  that  an  exception

  condition has occurred in your program.  If a condition handler does

  not take corrective action and the condition  is  severe  then  your

  program will exit.



     Format:



       LIB$SIGNAL  condition-value1 [,number1]

                  [,FAO-arg1...,FAO-argn1]

                  [,condition-value2] [,number2]

                  [,FAO-arg2...,FAO-argn2] 



                  Only the condition-value1 argument must be

                  specified;  other arguments  are optional.

                  The   number1   argument,  if    specified

                  contains the number of FAO arguments that 

                  will be associated with condition-value1. 
                  The condition-value2 argument is optional; 

                  it may be specified with or without the  

                  number2 or FAO-arg2 arguments. The number2 
                  argument, if specified, contains the number
                  of FAO arguments that will be associated with

                  condition-value2. You may specify condition-value3,

                  condition-value4, condition-value5, and so on, along

                  with their corresponding number and FAO arguments. 



     Arguments:



  condition-value



  type: longword (unsigned)

  access: read only

  mechanism: by value



  VAX 32-bit condition value.   The  condition-value  argument  is  an

  unsigned longword that contains this condition value.



  number



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Number of FAO arguments associated with the  condition  value.   The

  number  argument  is  a  signed  longword integer that contains this

  number.  If omitted or specified as zero, no FAO arguments follow.



  FAO-arg(s)



  type: unspecified

  access: read only

  mechanism: by value



  Additional  FAO  (formatted  ASCII  output)  argument(s)  which  are

  associated  with  the  specified  condition  value.   The FAO-arg(s)

  argument is the address of a signed longword integer or a  character

  string that contains these additional FAO arguments.

3 LIB$SIG_TO_RET

  LIB$SIG_TO_RET converts any signaled  condition  value  to  a  value

  returned as a function.  This value is returned to the caller of the

  user procedure  containing  LIB$SIG_TO_RET.   This  routine  may  be

  established as or called from a condition handler.



     Format:



       LIB$SIG_TO_RET  sig-args ,mch-args



     Arguments:



  sig-args



  type: longword (unsigned)

  access: read only

  mechanism: by reference, array reference



  Signal argument vector.  The sig-args argument contains the  address

  of  an  array  of  unsigned  longwords  that is this signal argument

  vector stack.



  mch-args



  type: longword (unsigned)

  access: read only

  mechanism: by reference, array reference



  Mechanism arguments vector.   The  mch-args  argument  contains  the

  address  of  an  array  of unsigned longwords that is this mechanism

  arguments vector stack.

3 LIB$SIG_TO_STOP

  LIB$SIG_TO_STOP converts a signaled condition  to  a signaled
  condition that cannot be continued.



     Format:



       LIB$SIG_TO_STOP  sig-args ,mch-args



     Arguments:



  sig-args



  type: longword (unsigned)

  access: modify

  mechanism: by reference, array reference



  Signal argument vector.  The sig-args argument contains the  address

  of  an  array  of  unsigned  longwords  that is this signal argument

  vector stack.



  mch-args



  type: longword (unsigned)

  access: read only

  mechanism: by reference, array reference



  Mechanism argument  vector.   The  mch-args  argument  contains  the

  address  of  an  array  of longwords that is this mechanism argument

  vector stack.

3 LIB$SIM_TRAP

  LIB$SIM_TRAP converts floating faults to floating traps.  It can  be

  enabled as a condition handler or can be called by one.



     Format:



       LIB$SIM_TRAP  sig-args ,mch-args



     Arguments:



  sig-args



  type: longword (unsigned)

  access: modify

  mechanism: by reference, array reference



  Signal argument vector.  The sig-args argument contains the  address

  of an array of longwords that is this signal argument vector stack.



  mch-args



  type: longword (unsigned)

  access: read only

  mechanism: by reference, array reference



  Mechanism argument  vector.   The  mch-args  argument  contains  the

  address  of  an  array  of longwords that is this mechanism argument

  vector stack.

3 LIB$SKPC

  LIB$SKPC compares each character of a  given  string  with  a  given

  character  and  returns  the relative position of the first nonequal

  character as an index.



     Format:



       LIB$SKPC  char-str ,src-str



     Arguments:



  char-str



  type: character string

  access: read only

  mechanism: by descriptor



  String whose initial character is to be  used  by  LIB$SKPC  in  the

  comparison.   The  char-str  argument  contains  the  address  of  a

  descriptor pointing to this string.  Only  the  first  character  of

  char-str is used, and the length of char-str is not checked.



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  String to be searched by LIB$SKPC.  The  src-str  argument  contains

  the address of a descriptor pointing to this string.

3 LIB$SPANC

  LIB$SPANC is used to skip a  specified  set  of  characters  in  the

  source string.



     Format:



       LIB$SPANC  src-str ,table-arr ,mask



     Arguments:



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source string used  by  LIB$SPANC  to  index  into  table-arr.   The

  src-str  argument  contains  the address of a descriptor pointing to

  this source string.



  table-arr



  type: byte (unsigned)

  access: read only

  mechanism: by reference, array reference



  Table that LIB$SPANC indexes into and ANDs with the mask byte.   The

  table  argument  contains the address of an unsigned byte array that

  is this table.



  mask



  type: byte (unsigned)

  access: read only

  mechanism: by reference



  Mask that is ANDed with  bytes  in  table-arr.   The  mask  argument

  contains the address of an unsigned byte that is this mask.

3 LIB$SPAWN

  LIB$SPAWN  requests   the   calling   process's   Command   Language

  Interpreter  (CLI) to spawn a subprocess for executing CLI commands.

  LIB$SPAWN provides the same function as the DCL SPAWN command.



     Format:



       LIB$SPAWN  [command-string] [,input-file] [,output-file]

                  [,flags]

                  [,process-name] [,process-id] [,completion-status]

                  [,completion-efn]

                  [,completion-astadr] [,completion-astarg] [,prompt]

                  [,cli] 



     Arguments:



  command-string



  type: character string

  access: read only

  mechanism: by descriptor



  CLI  command  to  be  executed  by  the  spawned  subprocess.    The

  command-string  argument  is the address of a descriptor pointing to

  this CLI command string.  If omitted, commands are  taken  from  the

  file specified by input-file.



  input-file



  type: character string

  access: read only

  mechanism: by descriptor



  Equivalence name to be associated with the logical name SYS$INPUT in

  the  logical name table for the subprocess.  The input-file argument

  is the address of a descriptor pointing to this equivalence  string.

  If omitted, the default is the caller's SYS$INPUT.



  output-file



  type: character string

  access: read only

  mechanism: by descriptor



  Equivalence name to be associated with the logical names  SYS$OUTPUT

  and  SYS$ERROR  in  the  logical name table for the subprocess.  The

  output-file argument is the address of a descriptor pointing to this

  equivalence  string.   If  omitted,  the  default  is  the  caller's

  SYS$OUTPUT.



  flags



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Flag bits which designate optional behavior.  The flags argument  is

  the  address  of  a  longword  which  contain  these  flag bits.  By

  default, all flags are clear.



  process-name



  type: character string

  access: read only

  mechanism: by descriptor



  Name defined for the subprocess.  The process-name argument  is  the

  address  a  descriptor  pointing to this name string.  If omitted, a

  unique process name will be generated.  If you supply a name, and it

  is   not   unique,   LIB$SPAWN   will  return  the  condition  value

  SS$_DUPLNAM.



  process-id



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Process identification of the spawned  subprocess.   The  process-id

  argument  is  the  address of a longword which contains this process

  identification value.



  completion-status



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  The subprocess's final  completion  status.   The  completion-status

  argument  is  the address of an unsigned longword.  LIB$SPAWN writes

  the  address  of  the  subprocess's  final  completion  status  into

  completion-status.



  completion-efn



  type: byte (unsigned)

  access: read only

  mechanism: by reference



  The number of a  local  event  flag  to  be  set  when  the  spawned

  subprocess completes.  The completion-efn argument is the address of

  an unsigned byte that contains this event flag number.  If  omitted,

  no event flag is set.



  completion-astadr



  type: procedure entry mask

  access: call without stack unwinding

  mechanism: by reference



  Entry mask of a procedure to be called by means of an AST  when  the

  subprocess completes.  The completion-astadr argument is the address

  of this procedure entry mask.



  completion-astarg



  type: unspecified

  access: read only

  mechanism: unspecified



  A  value  to  be  passed  to  the  AST  procedure.   Typically,  the

  completion-astarg  argument is the address of a block of storage the

  AST procedure will use.



  prompt



  type: character string

  access: read only

  mechanism: by descriptor



  Prompt string to use in the subprocess.  The prompt argument is  the

  address of a descriptor pointing to this prompt string.  If omitted,

  the subprocess will use the  same  prompt  string  that  the  parent

  process uses.



  cli



  type: character string

  access: read only

  mechanism: by descriptor



  File specification for the command language interpreter (CLI) to  be

  run in the subprocess.  The cli argument is the address of this file

  specification string's  descriptor.   If  you  omit  the  device  or

  directory  in  this  file  specification, the default is the current

  device and directory.

3 LIB$STAT_TIMER

  LIB$STAT_TIMER  returns  to  its  caller  one  of   five   available

  statistics.   Unlike  LIB$SHOW_TIMER,  which  formats the values for

  output, LIB$STAT_TIMER returns the value as an unsigned longword  or

  quadword.



     Format:



       LIB$STAT_TIMER  code ,value [,handle-adr]



     Arguments:



  code



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Code which  specifies  the  statistic  to  be  returned.   The  code

  argument  contains  the address of a signed longword integer that is

  this code.  It must be an integer from one to five.



  value



  type: unspecified

  access: write only

  mechanism: by reference



  The  statistic  returned  by  LIB$STAT_TIMER.   The  value  argument

  contains  the  address  of  a  longword  or  quadword  that  is this

  statistic.  All statistics  are  longword  integers  except  elapsed

  time, which is a quadword.



  handle-adr



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Pointer to a block of storage.   The  optional  handle-adr  argument

  contains the address of an unsigned longword that is this pointer.

3 LIB$STAT_VM

  LIB$STAT_VM returns to its caller one of three statistics  available

  from calls to LIB$GET_VM and LIB$FREE_VM.



     Format:



       LIB$STAT_VM  code ,value



     Arguments:



  code



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Code specifying  which  statistic  is  to  be  returned.   The  code

  argument  contains  the address of a signed longword integer that is

  this code.



  value



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Value of the statistic returned by LIB$STAT_VM.  The value  argument

  contains  the  address  of  a  signed  longword integer that is this

  value.

3 LIB$STOP

  LIB$STOP  generates  a  signal  that  indicates  that  an  exception

  condition  has  occurred  in  your  program.   Exception  conditions

  signaled by LIB$STOP cannot be  continued  from  the  point  of  the

  signal.



     Format:



       LIB$STOP  condition-value1 [,number1] [,FAO-arg1...,FAO-argn1]

                  [,condition-value2] [,number2]

                  [,FAO-arg2...,FAO-argn2] 



                  Only the condition-value1 argument must be

                  specified;  other arguments  are optional.

                  The   number1   argument,  if    specified

                  contains the number of FAO arguments that 

                  will be associated with condition-value1. 
                  The condition-value2 argument is optional; 

                  it may be specified with or without the  

                  number2 or FAO-arg2 arguments. The number2 
                  argument, if specified, contains the number
                  of FAO arguments that will be associated with

                  condition-value2. You may specify condition-value3,

                  condition-value4, condition-value5, and so on, along

                  with their corresponding number and FAO arguments. 



     Arguments:



  condition-value



  type: longword (unsigned)

  access: read only

  mechanism: by value



  VAX 32-bit condition value.   The  condition-value  argument  is  an

  unsigned longword that contains this condition value.



  number



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Number of FAO arguments associated with the  condition  value.   The

  number  argument  is  a a signed longword integer that contains this

  number.  If omitted or specified as zero, no FAO arguments follow.



  FAO-arg(s)



  type: unspecified

  access: read only

  mechanism: by value



  Additional  FAO  (formatted  ASCII  output)  argument(s)  which  are

  associated  with  the  specified  condition  value.   The FAO-arg(s)

  argument is the address of a signed longword integer or a  character

  string that contains these additional FAO arguments.

3 LIB$SUBX

  LIB$SUBX performs subtraction on signed two's complement integers of

  arbitrary length.



     Format:



       LIB$SUBX  a ,b ,diff [,len]



     Arguments:



  a



  type: longword integer (signed)

  access: read only

  mechanism: by reference, array reference



  The minuend; a multiple-precision, signed two's complement  integer.

  The  a  argument  is  the  address  of  an  array of signed longword

  integers that contains the minuend.



  b



  type: longword integer (signed)

  access: read only

  mechanism: by reference, array reference



  The  subtrahend;  a  multiple-precision,  signed  two's   complement

  integer.   The  b  argument  is  the  address  of an array of signed

  longword integers that contains the subtrahend.



  diff



  type: longword integer (signed)

  access: write only

  mechanism: by reference, array reference



  The  difference;  a  multiple-precision,  signed  two's   complement

  integer  result.   The  diff  argument is the address of an array of

  signed longword integers that contains the difference.



  len



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Length in longwords of the arrays to be  operated  on  by  LIB$SUBX.

  The  len  argument contains the address of a signed longword integer

  that is this length.  Len must not be negative.  The default  length

  is two.

3 LIB$SYS_ASCTIM

  LIB$SYS_ASCTIM calls the system service $ASCTIM to convert a  binary

  date  and time value, returning the ASCII string using the semantics

  of the caller's string.



     Format:



       LIB$SYS_ASCTIM  [out-len] ,dst-str  [,user-time] [,cnv-flg] 



     Arguments:



  out-len



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Number of bytes written into dst-str, not counting  padding  in  the

  case  of  a  fixed-length string.  The out-len argument contains the

  address of a signed word integer that is this number.



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string into which LIB$SYS_ASTIM writes  the  ASCII  time

  string.   The  dst-str argument contains the address of a descriptor

  pointing to the destination string.



  user-time



  type: quadword integer (signed)

  access: read only

  mechanism: by reference



  Value that  LIB$SYS_ASCTIM  converts  to  ASCII  string  form.   The

  user-time argument contains the address of a signed quadword integer

  that is this value.



  cnv-flg



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Conversion indicator.  The cnv-flag argument contains the address of

  an unsigned longword that is this conversion indicator.

3 LIB$SYS_FAO

  LIB$SYS_FAO calls $FAO, returning a  string  in  the  semantics  you

  provide.   If  called  with  other  than  a  fixed-length string for

  output, the length of the resultant string is limited to  256  bytes

  and truncation will occur.



     Format:



       LIB$SYS_FAO  ctr-str [,out-len] ,out-buf [,p1,...,pn]



     Arguments:



  ctr-str



  type: character string

  access: read only

  mechanism: by descriptor



  ASCII control string, consisting of the fixed  text  of  the  output

  string  and  FAO  directives.   The  ctr-str  argument  contains the

  address of a descriptor pointing to this control string.



  out-len



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Length of the output string.   The  out-len  argument  contains  the

  address of a signed word integer that is this length.



  out-buf



  type: character string

  access: write only

  mechanism: by descriptor



  Fully formatted output string returned by LIB$SYS_FAO.  The  out-buf

  argument  contains  the  address  of  a  descriptor pointing to this

  output string.



  p1 - pn



  type: unspecified

  access: read only

  mechanism: unspecified



  Directive argument(s) contained  in  longwords.   Depending  on  the

  directive,  a p argument can be a value to be converted, the address

  of the string to be inserted, or a length or  argument  count.   The

  passing  mechanism  for  each  of  these arguments should be the one

  expected by the $FAO system service.

3 LIB$SYS_FAOL

  LIB$SYS_FAOL calls the system service routine $FAOL,  returning  the

  string  in  the  semantics you provide.  If called with other than a

  fixed-length string for output, the length of the  resultant  string

  is limited to 256 bytes and truncation will occur.



     Format:



       LIB$SYS_FAOL  ctr-str ,[out-len] ,out-buf ,p1 - pn



     Arguments:



  ctr-str



  type: character string

  access: read only

  mechanism: by descriptor



  ASCII control string, consisting of the fixed  text  of  the  output

  string  and  FAO  directives.   The  ctr-str  argument  contains the

  address of a descriptor pointing to this control string.



  out-len



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Length of the output string.   The  out-len  argument  contains  the

  address of a signed word integer that is this length.



  out-buf



  type: character string

  access: write only

  mechanism: by descriptor



  Fully formatted output string returned by LIB$SYS_FAOL.  The out-buf

  argument  contains  the  address  of  a  descriptor pointing to this

  output string.



  p1 - pn



  type: longword (unsigned)

  access: read only

  mechanism: by reference, array reference



  Directive argument(s).  The p1 - pn arguments are  contained  in  an

  array  of  unsigned  longword directive arguments.  Depending on the

  directive, a p argument can be a value to be converted, the  address

  of  the  string  to be inserted, or a length or argument count.  The

  passing mechanism for each of these  arguments  should  be  the  one

  expected by the $FAOL system service.

3 LIB$SYS_GETMSG

  LIB$SYS_GETMSG calls  the  System  Service  $GETMSG  and  returns  a

  message  string  into  dst-str  using  the semantics of the caller's

  string.



     Format:



       LIB$SYS_GETMSG  msg-id ,[msg-len] ,dst-str [,flags] [,out-arr] 



     Arguments:



  msg-id



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Message identification  to  be  retrieved  by  LIB$SYS_GETMSG.   The

  msg-id  argument  contains  the address of a signed longword integer

  that is this message identification.



  msg-len



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Number of characters written into dst-str, not counting  padding  in

  the  case  of  a fixed-length string.  The msg-len argument contains

  the address of a signed word integer that is this number.



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string.  The dst-str argument contains the address of  a

  descriptor  pointing  to  this  destination  string.  LIB$SYS_GETMSG

  writes the message that has been returned by $GETMSG into dst-str.



  flags



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Four flag bits for message  content.   The  flags  argument  is  the

  address  of an unsigned longword that contains these flag bits.  The

  default value is a longword with bits zero through three set to one.

  The  flags  argument  is  passed  to LIB$SYS_GETMSG by reference and

  changed to immediate value for use by $GETMSG.



  out-arr



  type: longword (unsigned)

  access: write only

  mechanism: by reference, array reference



  A four byte array  to  receive  message-specific  information.   The

  out-arr  argument  contains  the  address  of this array of unsigned

  longwords.

3 LIB$SYS_TRNLOG

  LIB$SYS_TRNLOG uses  the  system  service  $TRNLOG  to  translate  a

  logical  name, LIB$SYS_TRNLOG returns the logical name's translation

  using the semantics of the caller's string.



     Format:



       LIB$SYS_TRNLOG  logical-name ,[dst-len]

                  ,dst-str [,table] [,acc-mode] [,dsb-msk] 



     Arguments:



  logical-name



  type: character string

  access: read only

  mechanism: by descriptor



  Logical name.  The logical-name argument contains the address  of  a

  descriptor pointing to this logical name string.



  dst-len



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Number of characters written into dst-str, not counting  padding  in

  the  case  of  a fixed-length string.  The dst-len argument contains

  the address of a signed word integer that is this number.



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string into which LIB$SYS_TRNLOG writes the logical name

  translation.   The  dst-str  argument  contains  the  address  of  a

  descriptor pointing to this destination string.



  table



  type: byte integer (signed)

  access: write only

  mechanism: by reference



  Logical name table number.  The table argument contains the  address

  of a signed byte integer that is this table number.



  acc-mode



  type: byte integer (signed)

  access: write only

  mechanism: by reference



  Access mode of entry (process table only).   The  acc-mode  argument

  contains  the  address  of a signed byte integer that is this access

  mode.



  dsb-msk



  type: byte (unsigned)

  access: read only

  mechanism: by reference



  Table search  disable  mask.   The  dsb-msk  argument  contains  the

  address of an unsigned byte that is this mask.

3 LIB$TPARSE



  LIB$TPARSE is a general purpose table-driven parser implemented as a

  finite-state  automaton, with extensions that make it suitable for a

  wide range of applications.  LIB$TPARSE parses a string and  returns

  a message indicating whether or not the input string is valid.



     Format:



       LIB$TPARSE  arg-blk ,state-tbl ,key-tbl



     Arguments:



  arg-blk



  type: longword (unsigned)

  access: modify

  mechanism: by reference



  LIB$TPARSE  argument  block.   The  arg-blk  argument  contains  the

  address of this argument block.



  state-tbl



  type: unspecified

  access: read only

  mechanism: by reference



  Starting state in the state table.  The state-tbl  argument  is  the

  address of this starting state.



  key-tbl



  type: unspecified

  access: read only

  mechanism: by reference



  Keyword table.  The key-tbl argument is the address  of  

  this keyword table.

3 LIB$TRA_ASC_EBC

  LIB$TRA_ASC_EBC translates an ASCII string to an EBCDIC string.



     Format:



       LIB$TRA_ASC_EBC  src-str ,dst-str



     Arguments:



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source string (ASCII) to be translated  by  LIB$TRA_ASC_EBC  .   The

  src-str  argument  contains  the address of a descriptor pointing to

  this source string.



  dst-str



  type: byte (unsigned)

  access: write only

  mechanism: by descriptor



  Destination string (EBCDIC).   The  dst-str  argument  contains  the

  address of a descriptor pointing to this destination string.

3 LIB$TRA_EBC_ASC

  LIB$TRA_EBC_ASC translates an EBCDIC string to an ASCII string.



     Format:



       LIB$TRA_EBC_ASC  src-str ,dst-str



     Arguments:



  src-str



  type: byte (unsigned)

  access: read only

  mechanism: by descriptor



  String (EBCDIC) to be translated by  LIB$TRA_EBC_ASC.   The  src-str

  argument  contains  the  address  of  a  descriptor pointing to this

  source string.



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string  (ASCII).   The  dst-str  argument  contains  the

  address of the descriptor of this destination string.

3 LIB$TRAVERSE_TREE

  LIB$TRAVERSE_TREE calls an action routine for each node in a  binary

  tree.



     Format:



       LIB$TRAVERSE_TREE  treehead ,action-rtn [,user-data]



     Arguments:



  treehead



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Tree head of the binary tree.  The treehead argument is the  address

  of  an  unsigned  longword  that is the tree head in the binary tree

  traversal.



  action-rtn



  type: procedure entry mask

  access: function call (before return)

  mechanism: by reference, procedure reference



  User-supplied action routine called by  LIB$TRAVERSE_TREE  for  each

  node  in  the  tree.   The action-rtn argument is the address of the

  entry mask to the action routine.



  user-data



  type: unspecified

  access: read only

  mechanism: by reference



  User data that LIB$TRAVERSE_TREE passes to your action routine.  The

  user-data  argument contains the address of this user data.  This is

  an optional argument; the default value is zero.

3 LIB$TRIM_FILESPEC

  LIB$TRIM_FILESPEC  takes  a  file  specification,  such  as  an  RMS

  resultant  name  string,  and  shortens it (if necessary) so that it

  fits into a field of fixed width.



     Format:



       LIB$TRIM_FILESPEC  in-file ,out-file [,width] [,out-len]



     Arguments:



  in-file



  type: character string

  access: read only

  mechanism: by descriptor



  File specification to be trimmed.  The in-file argument contains the

  address of a descriptor pointing to this file specification string.



  out-file



  type: character string

  access: write only

  mechanism: by descriptor



  Trimmed file specification.   The  out-file  argument  contains  the

  address  of a descriptor pointing to this trimmed file specification

  string.  LIB$TRIM_FILESPEC writes  the  trimmed  file  specification

  into out-file.



  width



  type: word (unsigned)

  access: read only

  mechanism: by reference



  Maximum field width desired.  The width argument is the  address  of

  an unsigned word that contains this maximum field width.



  out-len



  type: word (unsigned)

  access: write only

  mechanism: by reference



  Length of the trimmed file specification, not  including  any  blank

  padding  or  truncated  characters.   The  out-len  argument  is the

  address of an unsigned word that contains this length.

3 LIB$WAIT

  LIB$WAIT places the current process into hibernation for the  number

  of seconds specified in its argument.



     Format:



       LIB$WAIT  seconds



     ARGUMENT



  seconds



  type: F_floating

  access: read only

  mechanism: by reference



  The number of seconds to wait.  The seconds  argument  contains  the

  address of an F_floating number that is this number.

2 MTH$
 MTH$ Procedures
3 MTH$xACOS

  Given the cosine of an  angle,  MTH$xACOS  returns  that  angle  (in

  radians).



     Format:



       MTH$ACOS  x 



       MTH$DACOS  x 



       MTH$GACOS  x 



       MTH$HACOS  h_radians ,x 



                  Each of the above four formats accepts as input one

                  of the four floating point 

                  types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  The cosine of the angle whose value (in radians) is to be  returned.

  The  x  argument  is  the address of a floating point number that is

  this cosine.  The absolute value of x must be less than or equal  to

  one.    For   MTH$ACOS,  x  specifies  an  F_floating  number.   For

  MTH$DACOS, x  specifies  a  D_floating  number.   For  MTH$GACOS,  x

  specifies  a  G_floating  number.   For  MTH$HACOS,  x  specifies an

  H_floating number.



  h_radians



  type: H_floating

  access: write only

  mechanism: by reference



  Angle (in radians) whose cosine is specified by  x.   The  h_radians

  argument  is the address of an H_floating number that is this angle.

  MTH$HACOS writes the address  of  the  angle  into  h_radians.   The

  h_radians argument is used only by the MTH$HACOS routine.

3 MTH$xACOSD

  Given the cosine of an angle,  MTH$xACOSD  returns  that  angle  (in

  degrees).



     Format:



       MTH$ACOSD  x 



       MTH$DACOSD  x 



       MTH$GACOSD  x 



       MTH$HACOSD  h_degrees ,x 



                  Each of the above four formats accepts as input one

                  of the four floating point

                  types.



     Arguments:



  x



  type: F_floating, G_floating, D_floating, H_floating

  access: read only

  mechanism: by reference



  Cosine of the angle whose value (in degrees) is to be returned.  The

  x  argument  is  the address of a floating point number that is this

  cosine.  The absolute value of x must be less than or equal to  one.

  For  MTH$ACOSD, x specifies an F_floating number.  For MTH$DACOSD, x

  specifies a  D_floating  number.   For  MTH$GACOSD,  x  specifies  a

  G_floating  number.   For  MTH$HACOSD,  x  specifies  an  H_floating

  number.



  h_degrees



  type: H_floating

  access: write only

  mechanism: by reference



  Angle (in degrees) whose cosine is specified by  x.   The  h_degrees

  argument  is the address of an H_floating number that is this angle.

  MTH$HACOSD writes the address of  the  angle  into  h_degrees.   The

  h_degrees argument is used only by the MTH$HACOSD routine.

3 MTH$xASIN

  Given the sine  of  an  angle,  MTH$xASIN  returns  that  angle  (in

  radians).



     Format:



       MTH$ASIN  x



       MTH$DASIN  x



       MTH$GASIN  x



       MTH$HASIN  h_radians ,x



                  Each of the above four formats accepts as input one

                  of the four floating point

                  types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  The sine of the angle whose value (in radians) is  to  be  returned.

  The  x  argument  is  the address of a floating point number that is

  this sine.  The absolute value of x must be less than  or  equal  to

  one.    For   MTH$ASIN,  x  specifies  an  F_floating  number.   For

  MTH$DASIN, x  specifies  a  D_floating  number.   For  MTH$GASIN,  x

  specifies  a  G_floating  number.   For  MTH$HASIN,  x  specifies an

  H_floating number.



  h_radians



  type: H_floating

  access: write only

  mechanism: by reference



  Angle (in radians) whose sine is  specified  by  x.   The  h_radians

  argument  is the address of an H_floating number that is this angle.

  MTH$HASIN writes the address  of  the  angle  into  h_radians.   The

  h_radians argument is used only by the MTH$HASIN routine.

3 MTH$xASIND

  Given the sine of  an  angle,  MTH$xASIND  returns  that  angle  (in

  degrees).



     Format:



       MTH$ASIND  x



       MTH$DASIND  x



       MTH$GASIND  x



       MTH$HASIND  h_degrees ,x



                  Each of the above four formats accepts as input one

                  of the four floating

                  point types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  Sine of the angle whose value (in degrees) is to be returned.  The x

  argument  is  the  address  of  a floating point number that is this

  sine.  The absolute value of x must be less than or  equal  to  one.

  For  MTH$ASIND, x specifies an F_floating number.  For MTH$DASIND, x

  specifies a  D_floating  number.   For  MTH$GASIND,  x  specifies  a

  G_floating  number.   For  MTH$HASIND,  x  specifies  an  H_floating

  number.



  h_degrees



  type: H_floating

  access: write only

  mechanism: by reference



  Angle (in degrees) whose cosine is specified by  x.   The  h_degrees

  argument  is the address of an H_floating number that is this angle.

  MTH$HASIND writes the address of  the  angle  into  h_degrees.   The

  h_degrees argument is used only by the MTH$HASIND routine.

3 MTH$xATAN

  Given the tangent of an angle,  MTH$xATAN  returns  that  angle  (in

  radians).



     Format:



       MTH$ATAN  x



       MTH$DATAN  x



       MTH$GATAN  x



       MTH$HATAN  h_radians ,x



                  Each of the above four formats accepts as input one

                  of the four floating point

                  types.



     Arguments:



  x



  type: F_floating, D_floating-point, G_floating, H_floating

  access: read only

  mechanism: by reference



  The tangent of the angle whose value (in radians) is to be returned.

  The  x  argument  is  the address of a floating point number that is

  this tangent.  For MTH$ATAN, x specifies an F_floating number.   For

  MTH$DATAN,  x  specifies  a  D_floating  number.   For  MTH$GATAN, x

  specifies a  G_floating  number.   For  MTH$HATAN,  x  specifies  an

  H_floating number.



  h_radians



  type: H_floating

  access: write only

  mechanism: by reference



  Angle (in radians) whose tangent is specified by x.   The  h_radians

  argument  is the address of an H_floating number that is this angle.

  MTH$HATAN writes the address  of  the  angle  into  h_radians.   The

  h_radians argument used only by the MTH$HATAN routine.

3 MTH$xATAND

  Given the tangent of an angle, MTH$xATAND  returns  that  angle  (in

  degrees).



     Format:



       MTH$ATAND  x



       MTH$DATAND  x



       MTH$GATAND  x



       MTH$HATAND  h_degrees ,x



                  Each of the above four formats accepts as input one

                  of the four floating

                  point types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  The tangent of the angle whose value (in degrees) is to be returned.

  The  x  argument  is  the address of a floating point number that is

  this tangent.  For MTH$ATAND, x specifies an F_floating number.  For

  MTH$DATAND,  x  specifies  a  D_floating  number.  For MTH$GATAND, x

  specifies a G_floating  number.   For  MTH$HATAND,  x  specifies  an

  H_floating number.



  h_degrees



  type: H_floating

  access: write only

  mechanism: by reference



  Angle (in degrees) whose tangent is specified by x.   The  h_degrees

  argument  is the address of an H_floating number that is this angle.

  MTH$HATAND writes the address of  the  angle  into  h_degrees.   The

  h_degrees argument is used only by the MTH$HATAND routine.

3 MTH$xATANH

  Given the hyperbolic tangent of an  angle,  MTH$xATANH  returns  the

  hyperbolic arc tangent of that angle.



     Format:



       MTH$ATANH  x



       MTH$DATANH  x



       MTH$GATANH  x



       MTH$HATANH  h_atanh ,x



                  Each of the above four formats accepts as input one

                  of the four floating

                  point types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  Hyperbolic tangent of an angle.  The x argument is the address of  a

  floating   point  number  that  is  this  hyperbolic  tangent.   For

  MTH$ATANH, x specifies an  F_floating  number.   For  MTH$DATANH,  x

  specifies  a  D_floating  number.   For  MTH$GATANH,  x  specifies a

  G_floating  number.   For  MTH$HATANH,  x  specifies  an  H_floating

  number.



  h_atanh



  type: H_floating

  access: write only

  mechanism: by reference



  Hyperbolic arc tangent of the hyperbolic  tangent  specified  by  x.

  The  h_atanh argument is the address of an H_floating number that is

  this hyperbolic tangent.   MTH$HATANH  writes  the  address  of  the

  hyperbolic  tangent into h_atanh.  The h_atanh argument is used only

  by the MTH$HATANH routine.

3 MTH$xATAN2

  Given y and x, MTH$xATAN2  returns  the  angle  (in  radians)  whose

  tangent is given by the quotient of y and x, (y/x).



     Format:



       MTH$ATAN2  y ,x



       MTH$DATAN2  y ,x



       MTH$GATAN2  y ,x



       MTH$HATAN2  h_radians ,y ,x



                  Each of the above four formats accepts as input one

                  of the four floating

                  point types.



     Arguments:



  y



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  Dividend.  The y argument is the address of a floating point  number

  that  is  this  dividend.   For MTH$ATAN2, y specifies an F_floating

  number.  For MTH$DATAN2,  y  specifies  a  D_floating  number.   For

  MTH$GATAN2,  y  specifies  a  G_floating  number.  For MTH$HATAN2, y

  specifies an H_floating number.



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  Divisor.  The x argument is the address of a floating  point  number

  that  is  this  divisor.   For  MTH$ATAN2, x specifies an F_floating

  number.  For MTH$DATAN2,  x  specifies  a  D_floating  number.   For

  MTH$GATAN2,  x  specifies  a  G_floating  number.  For MTH$HATAN2, x

  specifies an H_floating number.



  h_radians



  type: H_floating

  access: write only

  mechanism: by reference



  Angle (in  radians)  whose  tangent  is  specified  by  (y/x).   The

  h_radians  argument  is  the address of an H_floating number that is

  this angle.   MTH$HATAN2  writes  the  address  of  the  angle  into

  h_radians.   The  h_radians  argument is used only by the MTH$HATAN2

  routine.

3 MTH$xATAND2

  Given y and x, MTH$xATAND2 returns  the  angle  (in  degrees)  whose

  tangent is given by the quotient of y and x, (y/x).



     Format:



       MTH$ATAND2  y ,x



       MTH$DATAND2  y ,x



       MTH$GATAND2  y ,x



       MTH$HATAND2  h_degrees ,y ,x



                  Each of the above four formats accepts as input one

                  of the four floating

                  point types.



     Arguments:



  y



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  Dividend.  The y argument is the address of a floating point  number

  that  is  this  dividend.  For MTH$ATAND2, y specifies an F_floating

  number.  For MTH$DATAND2, y  specifies  a  D_floating  number.   For

  MTH$GATAND2,  y  specifies  a G_floating number.  For MTH$HATAND2, y

  specifies an H_floating number.



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  Divisor.  The x argument is the address of a floating  point  number

  that  is  this  divisor.   For MTH$ATAND2, x specifies an F_floating

  number.  For MTH$DATAND2, x  specifies  a  D_floating  number.   For

  MTH$GATAND2,  x  specifies  a G_floating number.  For MTH$HATAND2, x

  specifies an H_floating number.



  h_degrees



  type: H_floating

  access: write only

  mechanism: by reference



  Angle (in  degrees)  whose  tangent  is  specified  by  (y/x).   The

  h_degrees  argument  is  the address of an H_floating number that is

  this angle.  MTH$HATAND2  writes  the  address  of  the  angle  into

  h_degrees.   The  h_degrees argument is used only by the MTH$HATAND2

  routine.

3 MTH$CxABS

  MTH$CxABS returns the absolute value of a complex number (r,i).



     Format:



       MTH$CABS  complex-number



       MTH$CDABS  complex-number



       MTH$CGABS  complex-number



                  Each of the above three formats accepts as input one

                  of the three floating point

                  complex types.



     ARGUMENT



  complex-number



  type: F_floating complex, D_floating complex, G_floating

  complex

  access: read only

  mechanism: by reference



  A complex number (r,i),  where  r  and  i  are  both  floating-point

  complex  values.  The complex-number argument is the address of this

  complex  number.   For   MTH$CABS,   complex-number   specifies   an

  F_floating  complex number.  For MTH$CDABS, complex-number specifies

  a  D_floating  complex  number.    For   MTH$CGABS,   complex-number

  specifies a G_floating complex number.

3 MTH$CxCOS

  MTH$CxCOS returns the complex cosine of a complex number.



     Format:



       MTH$CCOS  complex-number



       MTH$CDCOS  complex-cosine ,complex-number



       MTH$CGCOS  complex-cosine ,complex-number



                  Each of the above three formats accepts as input one

                  of the three floating point types.



     Arguments:



  complex-number



  type: F_floating complex, D_floating complex, G_floating complex

  access: read only

  mechanism: by reference



  A complex number (r,i) where r and  i  are  floating-point  numbers.

  The  complex-number  argument is the address of this complex number.

  For MTH$CCOS, complex-number specifies an F_floating complex number.

  For MTH$CDCOS, complex-number specifies a D_floating complex number.

  For MTH$CGCOS, complex-number specifies a G_floating complex number.



  complex-cosine



  type: D_floating complex, G_floating complex

  access: write only

  mechanism: by reference



  Complex cosine of the complex-number.  The complex  cosine  routines

  that  have  D_floating and G_floating complex input values write the

  address of the complex cosine into the complex-cosine argument.  For

  MTH$CDCOS,   the  complex-cosine  argument  specifies  a  D_floating

  complex  number.   For  MTH$CGCOS,   the   complex-number   argument

  specifies a G_floating complex number.  For MTH$CCOS, complex-number

  is not used.

3 MTH$CxEXP

  MTH$CxEXP returns the complex exponential of a complex number.



     Format:



       MTH$CEXPP  complex-number



       MTH$CDEXP  complex-exp ,complex-number



       MTH$CGEXP  complex-exp ,complex-number



                  Each of the above three formats accepts as input one

                  of the three floating point complex types.



     Arguments:



  complex-number



  type: F_floating complex, D_floating complex, G_floating complex

  access: read only

  mechanism: by reference 



  Complex number whose complex exponential is to  be  returned.   This

  complex  number  has the form (r,i).  The complex-number argument is

  the address of this complex number.   For  MTH$CEXP,  complex-number

  specifies  an  F_floating  number.   For  MTH$CDEXP,  complex-number

  specifies  a  D_floating  number.   For  MTH$CGEXP,   complex-number

  specifies a G_floating number.



  complex-exp



  type: D_floating complex, G_floating complex

  access: write only

  mechanism: by reference



  Complex exponential  of  complex-number.   The  complex  exponential

  routines  that  have D_floating complex and G_floating complex input

  values write the complex-exp into  this  argument.   For  MTH$CDEXP,

  complex-exp  argument  specifies  a  D_floating complex number.  For

  MTH$CGEXP, complex-exp specifies a G_floating complex  number.   For

  MTH$CCEXP, complex-exp is not used.

3 MTH$CxLOG

  MTH$CxLOG returns the complex natural logarithm of a complex number.



     Format:



       MTH$CLOG  complex-number



       MTH$CDLOG  complex-natlog ,complex-number



       MTH$CGLOG  complex-natlog ,complex-number



                  Each of the above three formats accepts as input one

                  of the three floating

                  point complex types.



     Arguments:



  complex-number



  type: F_floating complex, D_floating complex, G_floating complex

  access: read only

  mechanism: by reference 



  Complex number whose complex natural logarithm is  to  be  returned.

  This complex number has the form (r,i).  The complex-number argument

  is the address of this complex number.  For MTH$CLOG, complex-number

  specifies  an  F_floating  number.   For  MTH$CDLOG,  complex-number

  specifies  a  D_floating  number.   For  MTH$CGLOG,   complex-number

  specifies a G_floating number.



  complex-natlog



  type: D_floating complex, G_floating complex

  access: write only

  mechanism: by reference



  Natural logarithm of the complex number specified by complex-number.

  The  complex natural logarithm routines that have D_floating complex

  and G_floating complex input values write the address of the complex

  natural   logarithm   into   complex-natlog.    For  MTH$CDLOG,  the

  complex-natlog argument specifies a D_floating complex number.   For

  MTH$CGLOG,   the  complex-natlog  argument  specifies  a  G_floating

  complex number.  For MTH$CLOG, complex-natlog is not used.

3 MTH$xCMPLX

  MTH$xCMPLX returns a complex number from  two  floating-point  input

  values.



     Format:



       MTH$CMPLX  real-part ,imag-part



       MTH$DCMPLX  complx ,real-part ,imag-part



       MTH$GCMPLX  complx ,real-part ,imag-part



                  Each of the above three formats accepts as input one

                  of three floating

                  point types.



     Arguments:



  real-part



  type: F_floating, D_floating, G_floating

  access: write only

  mechanism: by reference



  Real part of a  complex  number.   The  real-part  argument  is  the

  address  of  a floating point number that contains this real part, r

  of (r,i).  For MTH$CMPLX, real-part specifies an F_floating  number.

  For  MTH$DCMPLX,  real-part  specifies  a  D_floating  number.   For

  MTH$GCMPLX, real-part specifies a G_floating number.



  imag-part



  type: F_floating, D_floating, G_floating

  access: write only

  mechanism: by reference



  Imaginary part of a complex number.  The imag-parg argument  is  the

  address  of  a  floating  point  number that contains this imaginary

  part, i of (r,i).  For MTH$CMPLX, imag-part specifies an  F_floating

  number.   For  MTH$DCMPLX,  imag-part specifies a D_floating number.

  For MTH$GCMPLX, imag-part specifies a G_floating number.



  complx



  type: D_floating complex, G_floating complex

  access: write only

  mechanism: by reference



  The floating  complex  value  of  a  complex  number.   The  complex

  exponential  functions  that  have D_floating complex and G_floating

  complex input values  write  the  address  of  this  floating  point

  complex  value  into  complx.   For  MTH$DCMPLX,  cmplx  specifies a

  D_floating  complex  number.   For  MTH$GCMPLX,  cmplx  specifies  a

  G_floating complex number.  For MTH$CMPLX, cmplx is not used.

3 MTH$xCONJG

  MTH$xCONJG returns the complex conjugate (r,-i) of a complex  number

  (r,i),



     Format:



       MTH$CONJG  complex-number



       MTH$DCONJG  complex-conjugate ,complex-number



       MTH$GCONJG  complex-conjugate ,complex-number



                  Each of the above three formats accepts as input one

                  of the three floating point complex types.



     Arguments:



  complex-number



  type: F_floating complex, D_floating complex, G_floating complex

  access: read only

  mechanism: by reference



  A complex number (r,i), where r and i  are  floating-point  numbers.

  The  complex-number  argument  is the address of this floating point

  complex  number.   For  MTH$CONJG,   complex-number   specifies   an

  F_floating  number.   For  MTH$DCONJG,  complex-number  specifies  a

  D_floating  number.   For  MTH$GCONJG,  complex-number  specifies  a

  G_floating number.



  complex-conjugate



  type: D_floating complex, G_floating complex

  access: write only

  mechanism: by reference



  The complex conjugate (r,-i) of  the  complex  number  specified  by

  complex-number.  The complex conjugate routines that have D_floating

  complex and G_floating complex input values  write  the  address  of

  this  complex conjugate into complex-conjugate.  For MTH$DCONJG, the

  complex-conjugate argument specifies the  address  of  a  D_floating

  complex  number.   For  MTH$GCONJG,  the  complex-conjugate argument

  specifies  the  address  of  a  G_floating  complex   number.    For

  MTH$CONJG, complex-conjugate is not used.

3 MTH$xCOS

  Given an angle (in radians), MTH$xCOS returns  the  cosine  of  that

  angle.



     Format:



       MTH$COS  x



       MTH$DCOS  x



       MTH$GCOS  x



       MTH$HCOS  h_cosine ,x



                  Each of the above four formats accepts as input one

                  of the four floating point

                  types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  The angle in radians.  The x argument is the address of  a  floating

  point  number.   For  MTH$COS,  x  is  an  F_floating  number.   For

  MTH$DCOS,  x  specifies  a  D_floating  number.   For  MTH$GCOS,   x

  specifies  a  G_floating  number.   For  MTH$HCOS,  x  specifies  an

  H_floating number.



  h_cosine



  type: H_floating

  access: write only

  mechanism: by reference



  Cosine of the angle specified by x.  The h_cosine  argument  is  the

  address  of  an  H_floating  number  that  is this cosine.  MTH$HCOS

  writes the address  of  the  cosine  into  h_cosine.   The  h_cosine

  argument is used only by the MTH$HCOS routine.

3 MTH$xCOSD

  Given an angle (in degrees), MTH$xCOSD returns the  cosine  of  that

  angle.



     Format:



       MTH$COSD  x



       MTH$DCOSD  x



       MTH$GCOSD  x



       MTH$HCOSD  h_cosine ,x



                  Each of the above four formats accepts as input one

                  of the four floating point 

                  types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  Angle (in degrees).  The x argument is the  address  of  a  floating

  point  number.  For MTH$COSD, x specifies an F_floating number.  For

  MTH$DCOSD, x  specifies  a  D_floating  number.   For  MTH$GCOSD,  x

  specifies  a  G_floating  number.   For  MTH$HCOSD,  x  specifies an

  H_floating number.



  h_cosine



  type: H_floating

  access: write only

  mechanism: by reference



  Cosine of the angle specified by x.  The h_cosine  argument  is  the

  address  of  an  H_floating  number  that is this cosine.  MTH$HCOSD

  writes this cosine into h_cosine.  The  h_cosine  argument  is  used

  only by the MTH$HCOSD routine.

3 MTH$xCOSH

  MTH$xCOSH returns the hyperbolic cosine of the input value.



     Format:



       MTH$COSH  x



       MTH$DCOSH  x



       MTH$GCOSH  x



       MTH$HCOSH  h_cosh ,x



                  Each of the above four formats accepts as input one

                  of the four floating point types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  The input value.  The x argument is the address of this input value.

  For  MTH$COSH,  x  specifies an F_floating number.  For MTH$DCOSH, x

  specifies  a  D_floating  number.   For  MTH$GCOSH,  x  specifies  a

  G_floating number.  For MTH$HCOSH, x specifies an H_floating number.



  h_cosh



  type: H_floating

  access: write only

  mechanism: by reference



  Hyperbolic cosine of the input value specified  by  x.   The  h_cosh

  argument  is  the  address  of  an  H_floating  number  that is this

  hyperbolic cosine.  MTH$HCOSH writes the address of  the  hyperbolic

  cosine  into  h_cosh.   The  h_cosh  argument  is  used  only by the

  MTH$HCOSH routine.

3 MTH$CxSIN

  MTH$CxSIN returns the complex sine of a complex number (r,i).



     Format:



       MTH$CSIN  complex-number



       MTH$CDSIN  complex-sine ,complex-number



       MTH$CGSIN  complex-sine ,complex-number



                  Each of the above three formats accepts as input one

                  of the three floating point complex types.



     Arguments:



  complex-number



  type: F_floating complex, D_floating complex, G_floating complex

  access: read only

  mechanism: by reference



  A complex number (r,i), where r and i  are  floating-point  numbers.

  The  complex-number  argument is the address of this complex number.

  For MTH$CSIN, complex-number specifies an F_floating complex number.

  For MTH$CDSIN, complex-number specifies a D_floating complex number.

  For MTH$CGSIN, complex-number specifies a G_floating complex number.



  complex-sine



  type: D_floating ,G_floating

  access: write only

  mechanism: by reference



  Complex sine of the complex number.  The complex sine routines  with

  D_floating  complex  and  G_floating  complex input values write the

  address of the complex sine into this  complex-sine  argument.   For

  MTH$CDSIN,  complex-sine specifies a D_floating complex number.  For

  MTH$CGSIN, complex-sine specifies a G_floating complex number.   For

  MTH$CSIN, complex-sine is not used.

3 MTH$CxSQRT

  MTH$CxSQRT returns the complex  square  root  of  a  complex  number

  (r,i).



     Format:



       MTH$CSQRT  complex-number



       MTH$CDSQRT  complex-sqrt ,complex-number



       MTH$CGSQRT  complex-sqrt ,complex-number



                  Each of the above three formats accepts as input one

                  of the three floating point complex types.



     Arguments:



  complex-number



  type: F_floating complex, D_floating complex, G_floating complex

  access: read only

  mechanism: by reference



  Complex number (r,i).   The  complex-number  argument  contains  the

  address  of  this  complex  number.   For  MTH$CSQRT, complex-number

  specifies an  F_floating  number.   For  MTH$CDSQRT,  complex-number

  specifies  a  D_floating  number.   For  MTH$CGSQRT,  complex-number

  specifies a G_floating number.



  complex-sqrt



  type: D_floating complex, G_floating complex

  access: write only

  mechanism: by reference 



  Complex  square  root   of   the   complex   number   specified   by

  complex-number.    The   complex  square  root  routines  that  have

  D_floating complex and G_floating complex  input  values  write  the

  complex square root into complex-sqrt.  For MTH$CDSQRT, complex-sqrt

  specifies a D_floating complex number.  For MTH$CGSQRT, complex-sqrt

  specifies  a G_floating complex number.  For MTH$CSQRT, complex-sqrt

  is not used.

3 MTH$CVT_x_x

  MTH$CVT_D_G and MTH$CVT_G_D convert one  double-precision  value  to

  the destination data type and return the result as a function value.

  MTH$CVT_D_G  converts  a  D_floating   value   to   G_floating   and

  MTH$CVT_G_D converts a G_floating value to a D_floating value.





     Format:



       MTH$CVT_D_G  source



       MTH$CVT_G_D  source



     ARGUMENT



  source



  type: D_floating, G_floating

  access: read only

  mechanism: by reference



  The input value to be converted.  The source argument is the address

  of this input value.  For MTH$CVT_D_G, the source argument specifies

  a D_floating number.  For MTH$CVT_G_D, the source argument specifies

  a G_floating number.

3 MTH$CVT_xA_xA

  MTH$CVT_DA_GA  and  MTH$CVT_GA_DA  convert  a  contiguous  array  of

  double-precision  values to the destination data type and return the

  results as an array.  MTH$CVT_DA_GA converts  D_floating  values  to

  G_floating   and   MTH$CVT_GA_DA   converts   G_floating  values  to

  D_floating.



     Format:



       MTH$CVT_DA_GA  source ,dest [,count]



       MTH$CVT_GA_DA  source ,dest [,count]



     Arguments:



  source



  type: D_floating, G_floating

  access: read only

  mechanism: by reference, array reference



  Input array of values to be converted.  The source argument  is  the

  address  of  an array of floating point numbers.  For MTH$CVT_DA_GA,

  source specifies an array of D_floating numbers.  For MTH$CVT_GA_DA,

  source specifies an array of a G_floating numbers.



  dest



  type: G_floating, D_floating

  access: write only

  mechanism: by reference, array reference



  Output array of converted values.  The dest argument is the  address

  of  an  array  of  floating  point numbers.  For MTH$CVT_DA_GA, dest

  specifies an array of G_floating numbers.  For  MTH$CVT_GA_DA,  dest

  specifies an array of D_floating numbers.



  count



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Number of array elements to be converted.  The default value is one.

  The count argument is the address of this number of elements.

3 MTH$xEXP

  MTH$xEXP returns the exponential of the input value.



     Format:



       MTH$EXP  x



       MTH$DEXP  x



       MTH$GEXP  x



       MTH$HEXP  h_exp ,x



                  Each of the above four formats accepts as input one

                  of the four floating

                  point types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  The input value.  The x argument is the address of a floating  point

  number.   For  MTH$EXP,  x  specifies  an  F_floating  number.   For

  MTH$DEXP,  x  specifies  a  D_floating  number.   For  MTH$GEXP,   x

  specifies  a  G_floating  number.   For  MTH$HEXP,  x  specifies  an

  H_floating number.



  h_exp



  type: H_floating

  access: write only

  mechanism: by reference



  Exponential of the input value specified by x.  The  h_exp  argument

  is  the  address  of  an H_floating number that is this exponential.

  MTH$HEXP writes the address of  the  exponential  into  h_exp.   The

  h_exp argument is used only by the MTH$HEXP routine.

3 MTH$xIMAG

  MTH$xIMAG returns the imaginary part of a complex number.



     Format:



       MTH$AIMAG  complex-number



       MTH$DIMAG  complex-number



       MTH$GIMAG  complex-number



                  Each of the above three formats corresponds to one

                  of the three floating point complex types.



     ARGUMENT



  complex-number



  type: F_floating complex, D_floating complex, G_floating complex

  access: read only

  mechanism: by reference



  The input  complex  number.   The  complex-number  argument  is  the

  address  of  this  floating  point  complex  number.  For MTH$AIMAG,

  complex-number  specifies  an  F_floating  number.   For  MTH$DIMAG,

  complex-number   specifies  a  D_floating  number.   For  MTH$GAMAG,

  complex-number specifies a G_floating number.

3 MTH$xLOG

  MTH$xLOG returns  the  natural  (base  e)  logarithm  of  the  input

  argument.



     Format:



       MTH$ALOG  x



       MTH$DLOG  x



       MTH$GLOG  x



       MTH$HLOG  h_natlog ,x



                  Each of the above four formats accepts as input one

                  of the four floating point types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  The input value.  The x argument is the address of a floating  point

  number  that is this value.  For MTH$ALOG, x specifies an F_floating

  number.   For  MTH$DLOG,  x  specifies  a  D_floating  number.   For

  MTH$GLOG,   x  specifies  a  G_floating  number.   For  MTH$HLOG,  x

  specifies an H_floating number.



  h_natlog



  type: H_floating

  access: write only

  mechanism: by reference 



  Natural logarithm of x.  The h_natlog argument is the address of  an

  H_floating  number  that is this natural logarithm.  MTH$HLOG writes

  the address of this natural logarithm into h_natlog.   The  h_natlog

  argument is used only by the MTH$HLOG routine.

3 MTH$xLOG10

  MTH$xLOG10 returns the common  (base  10)  logarithm  of  the  input

  argument.



     Format:



       MTH$ALOG10  x



       MTH$DLOG10  x



       MTH$GLOG10  x



       MTH$HLOG10  h_log10 ,x



                  Each of the above four formats accepts as input one

                  of the four floating point types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  The input value.  The x argument is the address of a floating  point

  number.   For  MTH$ALOG10,  x  specifies  an F_floating number.  For

  MTH$DLOG10, x specifies a  D_floating  number.   For  MTH$GLOG10,  x

  specifies  a  G_floating  number.   For  MTH$HLOG10,  x specifies an

  H_floating number.



  h_log10



  type: H_floating

  access: write only

  mechanism: by reference



  Common logarithm of the input value specified  by  x.   The  h_log10

  argument  is the address of an H_floating number that is this common

  logarithm.  MTH$HLOG10 writes the address of  the  common  logarithm

  into  h_log10.   The h_log10 argument is used only by the MTH$HLOG10

  routine.

3 MTH$xLOG2

  MTH$xLOG returns the base two logarithm of the input value specified

  by x.



     Format:



       MTH$ALOG2  x



       MTH$DLOG2  x



       MTH$GLOG2  x



       MTH$HLOG2  h_log2 ,x



                  Each of the above four formats accepts as input one

                  of the four floating point types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  The input value.  The x argument is the address of a floating  point

  number  that  is  this  input  value.  For MTH$ALOG2, x specifies an

  F_floating number.  For MTH$DLOG2, x specifies a D_floating  number.

  For  MTH$GLOG2,  x  specifies a G_floating number.  For MTH$HLOG2, x

  specifies an H_floating number.



  h_log2



  type: H_floating

  access: write only

  mechanism: by reference



  Base two logarithm of x.  The h_log2 argument is the address  of  an

  H_floating number that is this base two logarithm.  MTH$HLOG2 writes

  the address of this logarithm into h_log2.  The h_log2  argument  is

  used only by the MTH$HLOG2 routine.

3 MTH$RANDOM

  MTH$RANDOM is a general multiplicative  congruential  random  number

  generator.



     Format:



       MTH$RANDOM  seed



     ARGUMENT



  seed



  type: longword (unsigned)

  access: modify

  mechanism: by reference



  The integer seed, a 32-bit  number  whose  high-order  24  bits  are

  converted  by  MTH$RANDOM  to an F_floating random number.  The seed

  argument is the address of an unsigned longword that  contains  this

  integer seed.  The seed is modified by each call to MTH$RANDOM.

3 MTH$xREAL

  MTH$xREAL returns the real part of a complex number.



     Format:



       MTH$REAL  complex-number



       MTH$DREAL  complex-number



       MTH$GREAL  complex-number



                  Each of the above three  formats accepts as input

                  one of the three floating point complex types.



     ARGUMENT



  complex-number



  type: F_floating complex, D_floating complex, G_floating complex

  access: read only

  mechanism: by reference



  The  complex  number  whose  real  part  is  to  be  returned.   The

  complex-number  argument  is  the  address  of  this  floating point

  complex number.   For  MTH$REAL,  complex-number  is  an  F_floating

  complex  number.   For  MTH$DREAL,  complex-number  is  a D_floating

  complex number.   For  MTH$GREAL,  complex-number  is  a  G_floating

  complex number.

3 MTH$xSIN

  Given an angle (in radians),  MTH$xSIN  returns  the  sine  of  that

  angle.



     Format:



       MTH$SIN  x



       MTH$DSIN  x



       MTH$GSIN  x



       MTH$HSIN  h_sine ,x



                  Each of the above four formats accepts as input one

                  of the four floating point types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by value



  Angle (in radians).  The x argument is the  address  of  a  floating

  point  number  that  is  this  angle.   For  MTH$SIN, x specifies an

  F_floating number.  For MTH$DSIN, x specifies a  D_floating  number.

  For  MTH$GSIN,  x  specifies  a  G_floating number.  For MTH$HSIN, x

  specifies an H_floating number.



  h_sine



  type: H_floating

  access: write only

  mechanism: by reference



  The sine of the angle specified by x.  The h_sine  argument  is  the

  address  of an H_floating number that is this sine.  MTH$HSIN writes

  the address of the sine into h_sine.  The h_sine  argument  is  used

  only by the MTH$HSIN routine.

3 MTH$xSIND

  Given an angle (in degrees), MTH$xSIND  returns  the  sine  of  that

  angle.



     Format:



       MTH$SIND  x



       MTH$DSIND  x



       MTH$GSIND  x



       MTH$HSIND  h_sine ,x



                  Each of the above four formats accepts as input one

                  of the four floating point types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  Angle (in degrees).  The x argument is the  address  of  a  floating

  point  number  that  is  this  angle.   For MTH$SIND, x specifies an

  F_floating number.  For MTH$DSIND, x specifies a D_floating  number.

  For  MTH$GSIND,  x  specifies a G_floating number.  For MTH$HSIND, x

  specifies an H_floating number.



  h_sine



  type: H_floating

  access: write only

  mechanism: by reference



  Sine of the angle specified  by  x.   The  h_sine  argument  is  the

  address of an H_floating number that is this sine.  MTH$HSIND writes

  the address of the angle into h_sine.  The h_sine argument  is  used

  only by the MTH$HSIND routine.

3 MTH$xSINCOS

  Given an angle (in radians), MTH$xSINCOS returns the  sine  and  the

  cosine of that angle.



     Format:



       MTH$SINCOS  x ,sine ,cosine



       MTH$DSINCOS  x ,sine ,cosine



       MTH$GSINCOS  x ,sine ,cosine



       MTH$HSINCOS  x ,sine ,cosine



                  Each of the above four formats accepts as input one

                  of the four floating point types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  Angle (in radians) whose sine and cosine are to be returned.  The  x

  argument  is  the  address  of  a floating point number that is this

  angle.  For MTH$SINCOS, x is an F_floating number.  For MTH$DSINCOS,

  x  is  a  D_floating  number.   For  MTH$GSINCOS,  x is a G_floating

  number.  For MTH$HSINCOS, x is an H_floating number.



  sine



  type: F_floating, D_floating, G_floating, H_floating

  access: write only

  mechanism: by reference



  Sine of the angle specified by x.  The sine argument is the  address

  of  a floating point number.  MTH$SINCOS writes an F_floating number

  into sine.   MTH$DSINCOS  writes  a  D_floating  number  into  sine.

  MTH$GSINCOS  writes  a  G_floating  number  into  sine.  MTH$HSINCOS

  writes an H_floating number into sine.



  cosine



  type: F_floating, D_floating, G_floating, H_floating

  access: write only

  mechanism: by reference



  Cosine of the angle specified by x.   The  cosine  argument  is  the

  address of a floating point number.  MTH$SINCOS writes an F_floating

  number into cosine.  MTH$DSINCOS writes  a  D_floating  number  into

  cosine.    MTH$GSINCOS  writes  a  G_floating  number  into  cosine.

  MTH$HSINCOS writes an H_floating number into cosine.

3 MTH$xSINCOSD

  Given an angle (in degrees), MTH$xSINCOSD returns the sine  and  the

  cosine of that angle.



     Format:



       MTH$SINCOSD  x ,sine ,cosine



       MTH$DSINCOSD  x ,sine ,cosine



       MTH$GSINCOSD  x ,sine ,cosine



       MTH$HSINCOSD  x ,sine ,cosine



                  Each of the above four formats accepts as input one

                  of the four floating point types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  Angle (in degrees) whose sine and cosine are to be returned.  The  x

  argument  is  the  address  of  a floating point number that is this

  angle.   For  MTH$SINCOSD,  x  is   an   F_floating   number.    For

  MTH$DSINCOSD,  x  is  a D_floating number.  For MTH$GSINCOSD, x is a

  G_floating number.  For MTH$HSINCOSD, x is an H_floating number.



  sine



  type: F_floating, D_floating, G_floating, H_floating

  access: write only

  mechanism: by reference



  Sine of the angle specified by x.  The sine argument is the  address

  of a floating point number.  MTH$SINCOSD writes an F_floating number

  into sine.  MTH$DSINCOSD  writes  a  D_floating  number  into  sine.

  MTH$GSINCOSD  writes  a  G_floating  number into sine.  MTH$HSINCOSD

  writes an H_floating number into sine.



  cosine



  type: F_floating, D_floating, G_floating, H_floating

  access: write only

  mechanism: by reference



  Cosine of the angle specified by x.   The  cosine  argument  is  the

  address   of   a  floating  point  number.   MTH$SINCOSD  writes  an

  F_floating number into cosine.   MTH$DSINCOSD  writes  a  D_floating

  number  into  cosine.   MTH$GSINCOSD writes a G_floating number into

  cosine.  MTH$HSINCOSD writes an H_floating number into cosine.

3 MTH$xSINH

  MTH$xSINH returns the hyperbolic sine of the input  value  specified

  by x.



     Format:



       MTH$SINH  x



       MTH$DSINH  x



       MTH$GSINH  x



       MTH$HSINH  h_sinh ,x



                  Each of the above four formats accepts as input one

                  of the four floating

                  point types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  The input value.  The x argument is the address of a floating  point

  number  that is this value.  For MTH$SINH, x specifies an F_floating

  number.  For  MTH$DSINH,  x  specifies  a  D_floating  number.   For

  MTH$GSINH,  x  specifies  a  G_floating  number.   For  MTH$HSINH, x

  specifies an H_floating number.



  h_sinh



  type: H_floating

  access: write only

  mechanism: by reference



  Hyperbolic sine of the input  value  specified  by  x.   The  h_sinh

  argument  is  the  address  of  an  H_floating  number  that is this

  hyperbolic sine.  MTH$HSINH writes the  address  of  the  hyperbolic

  sine into h_sinh.  The h_sinh argument is used only by the MTH$HSINH

  routine.

3 MTH$xSQRT

  MTH$xSQRT returns the square root of the input value x.



     Format:



       MTH$SQRT  x



       MTH$DSQRT  x



       MTH$GSQRT  x



       MTH$HSQRT  h_sqrt ,x



                  Each of the above four formats accepts as input one

                  of the four floating point

                  types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  Input value.  The x argument is the  address  of  a  floating  point

  number that contains this input value.  For MTH$SQRT, x specifies an

  F_floating number.  For MTH$DSQRT, x specifies a D_floating  number.

  For  MTH$GSQRT,  x specifies a G_floating number.  For MTH$HSQRT, an

  H_floating number.



  h_sqrt



  type: H_floating

  access: write only

  mechanism: by reference



  Square root of the input value specified by x.  The h_sqrt  argument

  is  the  address  of  an H_floating number that is this square root.

  MTH$HSQRT writes the address of the square root  into  h_sqrt.   The

  h_sqrt argument is used only by the MTH$HSQRT routine.

3 MTH$xTAN

  Given an angle (in radians), MTH$xTAN returns the  tangent  of  that

  angle.



     Format:



       MTH$TAN  x



       MTH$DTAN  x



       MTH$GTAN  x



       MTH$HTAN  h_tan ,x



                  Each of the above four formats accepts as input one

                  of the four floating point types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by value



  The input angle (in radians).  The x argument is the  address  of  a

  floating  point number that is this angle.  For MTH$TAN, x specifies

  an F_floating  number.   For  MTH$DTAN,  x  specifies  a  D_floating

  number.   For  MTH$GTAN,  x  specifies  a  G_floating  number.   For

  MTH$HTAN, x specifies an H_floating number.



  h_tan



  type: H_floating

  access: write only

  mechanism: by reference



  Tangent of the angle specified by x.   The  h_tan  argument  is  the

  address  of  an  H_floating  number  that is this tangent.  MTH$HTAN

  writes the address of the tangent into h_tan.  The h_tan argument is

  used only by the MTH$HTAN routine.

3 MTH$xTAND

  Given an angle (in degrees), MTH$xTAND returns the tangent  of  that

  angle.



     Format:



       MTH$TAND  x



       MTH$DTAND  x



       MTH$GTAND  x



       MTH$HTAND  h_tan ,x



                  Each of the above four formats accepts as input one

                  of the four floating point types.



     Arguments:



  x



  type: F_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  The input angle (in degrees).  The x argument is the  address  of  a

  floating  point  number  which  is  this  angle.   For  MTH$TAND,  x

  specifies an  F_floating  number.   For  MTH$DTAND,  x  specifies  a

  D_floating  number.  For MTH$GTAND, x specifies a G_floating number.

  For MTH$HTAND, x specifies an H_floating number.



  h_tan



  type: H_floating

  access: write only

  mechanism: by reference



  Tangent of the angle specified by x.   The  h_tan  argument  is  the

  address  of  an  H_floating  number that is this tangent.  MTH$HTAND

  writes the address of the tangent into h_tan.  The h_tan argument is

  used only by the MTH$HTAN routine.

3 MTH$xTANH

  MTH$xTANH returns the hyperbolic tangent of the input value.



     Format:



       MTH$TANH  x



       MTH$DTANH  x



       MTH$GTANH  x



       MTH$HTANH  h_tanh ,x



                  Each of the above four formats accepts as input one

                  of the four floating point types.



     Arguments:



  x



  type: D_floating, D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  The input value.  The x argument is the address of a floating  point

  number that contains this input value.  For MTH$TANH, x specifies an

  F_floating number.  For MTH$DTANH, x specifies a D_floating  number.

  For  MTH$GTANH,  x  specifies a G_floating number.  For MTH$HTANH, x

  specifies an H_floating number.



  h_tanh



  type: H_floating

  access: write only

  mechanism: by reference



  Hyperbolic tangent of the value specified by x.  The h_tanh argument

  is  the  address  of  a  H_floating  number  that is this hyperbolic

  tangent.  MTH$HTANH writes the address  of  the  hyperbolic  tangent

  into  h_tanh.   The  h_tanh  argument  is  used only by the MTH$TANH

  routine.

2 OTS$
 OTS$ Procedures
3 OTS$CVT_L_TB

  OTS$CVT_L_TB converts an unsigned integer value of arbitrary  length

  to  binary  representation  in  an ASCII text string.  By default, a

  longword is converted.



     Format:



       OTS$CVT_L_TB  value ,out-str [,int-digits] [,value-size] 



     Arguments:



  value



  type: unspecified

  access: read only

  mechanism: by reference



  Unsigned  integer  value  that  OTS$CVT_L_TB  converts   to   binary

  representation  in  an ASCII text string.  The value argument is the

  address of this integer value.



  out-str



  type: character string

  access: write only

  mechanism: by descriptor, fixed-length



  ASCII text string that OTS$CVT_L_TB creates  when  it  converts  the

  integer  value.  The out-str argument is the address of a descriptor

  pointing to this ASCII text string.  If the  string  is  dynamic  or

  varying,  it  is  treated  as  a  fixed-length string of the current

  length.



  int-digits



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Minimum  number  of  digits  in  the  binary  representation  to  be

  generated.   The  int-digits  argument  is a signed longword integer

  containing this minumum number.  This is an optional  argument.   If

  omitted,  the  default  is one.  If the actual number of significant

  digits is less than the minimum number of digits, leading zeros  are

  produced.   If the minimum number of digits is zero and the value of

  the integer to be converted is also  zero,  OTS$CVT_L_TB  creates  a

  blank string.



  value-size



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Size of the integer to  be  converted,  in  bytes.   The  value-size

  argument  is  a  signed  longword  integer containing the byte size.

  This is an optional argument.  If omitted, the default is four.

3 OTS$CVT_L_TI

  OTS$CVT_L_TI converts a signed  integer  to  a  decimal  ASCII  text

  string.   This  procedure  supports  FORTRAN  Iw and Iw.m output and

  BASIC output conversion.



     Format:



       OTS$CVT_L_TI  value ,out-str [,int-digits]

                  [,value-size] [,flags] 



     Arguments:



  value



  type: unspecified

  access: read only

  mechanism: by reference



  Signed integer value that OTS$CVT_L_TI converts to a  decimal  ASCII

  text  string.   The  value  argument  is the address of this integer

  value.



  out-str



  type: character string

  access: write only

  mechanism: by descriptor, fixed-length



  Decimal ASCII text string that OTS$CVT_L_TI creates when it converts

  the  signed  integer.   The  out-str  argument  is  the address of a

  descriptor pointing to this text string.  The string is  assumed  to

  be fixed-length (DSC$K_CLASS_S).



  int-digits



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Minimum number of digits to be generated when OTS$CVT_L_TI  converts

  the  signed  integer to a decimal ASCII text string.  The int-digits

  argument is a signed longword integer containing this number.   This

  is  an optional argument.  If omitted, the default value is one.  If

  the actual number of significant  digits  is  smaller,  OTS$CVT_L_TI

  inserts leading zeros into the output string.  If int-digits is zero

  and value is zero, OTS$CVT_L_TI writes a blank string to the  output

  string.



  value-size



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Number of bytes occupied by the value to be converted to text.   The

  value-size  argument  is  a  signed longword integer containing this

  value size.  The value size must be either one, two,  or  four.   If

  value  size  is one or two, the value is sign-extended to a longword

  before conversion.  This is an optional argument.  If  omitted,  the

  default is four.



  flags



  type: longword (unsigned)

  access: read only

  mechanism: by value



  Caller-supplied flags that you may use if you want  OTS$CVT_L_TI  to

  insert  a plus sign before the converted number.  The flags argument

  is an unsigned longword containing the flags.

3 OTS$CVT_L_TL

  OTS$CVT_L_TL  converts  an  integer  to  the   ASCII   text   string

  representation using FORTRAN L(logical) format.



     Format:



       OTS$CVT_L_TL  value ,out-str



     Arguments:



  value



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Value that OTS$CVT_L_TL converts to an ASCII text string.  The value

  argument is the address of a signed longword integer containing this

  integer value.



  out-str



  type: character string

  access: write only

  mechanism: by descriptor, fixed-length



  Output string that OTS$CVT_L_TL creates when it converts the integer

  value  to an ASCII text string.  The out-str argument is the address

  of a descriptor pointing to this ASCII text string.

3 OTS$CVT_L_TO

  OTS$CVT_L_TO converts an unsigned integer to  an  octal  ASCII  text

  string.  OTS$CVT_L_TO supports FORTRAN Ow and Ow.m output conversion

  formats.



     Format:



       OTS$CVT_L_TO  value ,out-str [,int-digits]

                  [,value-size] 



     Arguments:



  value



  type: unspecified

  access: read only

  mechanism: by reference



  Integer value that OTS$CVT_L_TO converts  to  an  octal  ASCII  text

  string.  The value argument is the address of this integer value.



  out-str



  type: character string

  access: write only

  mechanism: by descriptor, fixed-length



  Output string that OTS$CVT_L_TO creates when it converts the integer

  value  to  an  octal ASCII text string.  The out-str argument is the

  address of a descriptor pointing to the  octal  ASCII  text  string.

  The string is assumed to be fixed-length (DSC$K_CLASS_S).



  int-digits



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Minimum  number  of  digits  that  OTS$CVT_L_TO  generates  when  it

  converts  the  integer  value  to  an  octal ASCII text string.  The

  int-digits argument is a  signed  longword  integer  containing  the

  minimum  number.   This  is  an  optional argument.  If omitted, the

  default is one.  If the actual number of significant digits  in  the

  octal  ASCII  text string is less than the minimum number of digits,

  OTS$CVT_L_TO inserts leading  zeros  into  the  output  string.   If

  int-digits  is  zero  and value is zero, OTS$CVT_L_TO writes a blank

  string to the output string.



  value-size



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Size of the integer to  be  converted,  in  bytes.   The  value-size

  argument is a signed longword integer containing the number of bytes

  in the integer to be converted by OTS$CVT_L_TO.  This is an optional

  argument.  If omitted, the default is four.

3 OTS$CVT_L_TU

  OTS$CVT_L_TU converts a byte, word or  longword  value  to  unsigned

  decimal  representation  in  an  ASCII  text  string.  By default, a

  longword is converted.



     Format:



       OTS$CVT_L_TU  value ,out-str [,int-digits]

                  [,value-size] 



     Arguments:



  value



  type: unspecified

  access: read only

  mechanism: by reference



  Unsigned integer byte, word or longword that  OTS$CVT_L_TU  converts

  to  unsigned  decimal  representation in an ASCII text string.  (The

  value of the value-size argument determines whether value is a byte,

  word or longword.) The value argument is the address of the unsigned

  integer.



  out-str



  type: character string

  access: write only

  mechanism: by descriptor, fixed-length



  Output string  (fixed-length)  that  OTS$CVT_L_TU  creates  when  it

  converts  the integer value to unsigned decimal representation in an

  ASCII text string.   The  out-str  argument  is  the  address  of  a

  descriptor pointing to this ASCII text string.



  int-digits



  type: longword (unsigned)

  access: read only

  mechanism: by value



  Minimum number of digits in the ASCII text string that  OTS$CVT_L_TU

  creates.  The int-digits argument is an unsigned longword containing

  the minimum number.  This is an optional argument.  If omitted,  the

  default is one.



  value-size



  type: longword (unsigned)

  access: read only

  mechanism: by value



  Size of the integer value to be converted, in bytes.  The value-size

  argument  is an unsigned longword containing the size of the integer

  value.  This is an optional argument.  If omitted,  the  default  is

  four.   The only values that OTS$CVT_L_TU allows are 1, 2 and 4.  If

  any other value is specified, OTS$CVT_L_TU uses the  default  value,

  4.

3 OTS$CVT_L_TZ

  OTS$CVT_L_TZ converts an unsigned integer  to  a  hexadecimal  ASCII

  text  string.   OTS$CVT_L_TZ  supports  FORTRAN  Zw  and Zw.m output

  conversion formats.



     Format:



       OTS$CVT_L_TZ  value ,out-str [,int-digits]

                  [,value-size] 



     Arguments:



  value



  type: unspecified

  access: read only

  mechanism: by reference



  Integer value that OTS$CVT_L_TZ converts to a hexadecimal ASCII text

  string.  The value argument is the address of this integer value.



  out-str



  type: character string

  access: write only

  mechanism: by descriptor, fixed-length



  Output string that OTS$CVT_L_TZ creates when it converts the integer

  value  to  a hexidecimal ASCII text string.  The out-str argument is

  the address of a descriptor pointing to this ASCII text string.  The

  string is assumed to be fixed-length (DSC$K_CLASS_S).



  int-digits



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Minimum number of digits in the ASCII text string that  OTS$CVT_L_TZ

  creates  when it converts the integer.  The int-digits argument is a

  signed longword integer containing this minimum number.  This is  an

  optional  argument.   If omitted, the default is one.  If the actual

  number of significant digits in the text  string  that  OTS$CVT_L_TZ

  creates  is  less  than  this  minimum  number, OTS$CVT_L_TZ inserts

  leading zeros in the output string.  If the minimum number of digits

  is  zero  and  the  integer  value  to  be  converted  is also zero,

  OTS$CVT_L_TZ writes a blank string to the output string.



  value-size



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Size of the integer  that  OTS$CVT_L_TZ  converts,  in  bytes.   The

  value-size  argument  is  a  signed  longword integer containing the

  value size.  This is an optional argument.  If omitted, the  default

  is four.

3 OTS$CNVOUT

  OTS$CNVOUT, OTS$CNVOUT_G  and  OTS$CNVOUT_H  convert  a  D_floating,

  G_floating or H_floating number to a character string in the FORTRAN

  E format.



     Format:



       OTS$CNVOUT  value ,out-string ,digits-in-fract



       OTS$CNVOUT_G  value ,out-string ,digits-in-fract



       OTS$CNVOUT_H  value ,out-string ,digits-in-fract



     Arguments:



  value



  type: D_floating, G_floating, H_floating

  access: read only

  mechanism: by reference



  Value  that  OTS$CNVOUT  converts  to  a  character   string.    For

  OTS$CNVOUT, the value argument is the address of a D_floating number

  containing the value.  For OTS$CNVOUT_G, the value argument  is  the

  address   of   a   G_floating  number  containing  the  value.   For

  OTS$CNVOUT_H, the value argument is the  address  of  an  H_floating

  number containing the value.



  out-string



  type: character string

  access: write only

  mechanism: by descriptor, fixed length



  Output string into which  OTS$CNVOUT  writes  the  character  string

  result of the conversion.  The out-string argument is the address of

  a descriptor pointing to the output string.



  digits-in-fract



  type: longword (unsigned)

  access: read only

  mechanism: by value



  Number of digits in the  fractional  portion  of  the  result.   The

  digits-in-fract  argument  is  an  unsigned  longword containing the

  number of digits to be written to  the  fractional  portion  of  the

  result.

3 OTS$CVT_TB_L

  OTS$CVT_TB_L converts an ASCII  text  string  representation  of  an

  unsigned  binary  value  to  an  unsigned integer value of arbitrary

  length.   By  default,  the  result  is  a  longword.   Valid  input

  characters  are  the  blank  and  the  digits  0  and 1.  No sign is

  permitted.



     Format:



       OTS$CVT_TB_L  inp-str ,value [,value-size] [,flags] 



     Arguments:



  inp-str



  type: character string

  access: read only

  mechanism: by descriptor, fixed-length or dynamic string



  Input string containing the ASCII text string representation  of  an

  unsigned  binary  value  that  OTS$CVT_TB_L  converts  to an integer

  value.  The inp-str argument is the address of a descriptor pointing

  to   the   ASCII  text  string.   This  ASCII  text  string  may  be

  fixed-length, dynamic, or varying.



  value



  type: unspecified

  access: write only

  mechanism: by reference



  Integer that OTS$CVT_TB_L creates when it converts  the  ASCII  text

  string.  The value argument is the address of the integer value.



  value-size



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Number of bytes occupied by  the  value  created  when  OTS$CVT_TB_L

  converts  the ASCII text string to an integer value.  The value-size

  argument contains the value size.  If value-size contains a zero  or

  a  negative  number,  OTS$CVT_TB_L  returns  an  error  code  as the

  condition value.  This is an optional  argument.   If  omitted,  the

  default is four.



  flags



  type: longword (unsigned)

  access: read only

  mechanism: by value



  User-supplied flags that  OTS$CVT_TB_L  uses  to  determine  how  to

  interpret blanks and tabs.  The flags argument contains the value of

  the user-supplied flags.

3 OTS$CVT_TI_L

  OTS$CVT_TI_L converts an  ASCII  text  string  representation  of  a

  decimal  number  to  a signed byte, word, or longword integer value.

  The result is a longword by default, but  the  calling  program  can

  specify a byte or a word value instead.



     Format:



       OTS$CVT_TI_L  inp-str ,value [,value-size]

                  [,flags] 



     Arguments:



  inp-str



  type: character string

  access: read only

  mechanism: by descriptor, fixed-length or dynamic string



  Input ACSII text string that OTS$CVT_TI_L converts to a signed byte,

  word  or  longword.   The  inp-str  argument  is  the  address  of a

  descriptor pointing to the input string.



  value



  type: unspecified

  access: write only

  mechanism: by reference



  Signed  byte,  word,  or  longword  integer  value   (depending   on

  value-size)  that  OTS$CVT_TI_L  creates  when it converts the ASCII

  text string.  The value argument  is  the  address  of  the  integer

  value.



  value-size



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Number of bytes occupied by the value that OTS$CVT_TI_L creates when

  it converts the ASCII text string to an integer value.  Valid values

  for the value-size argument are one, two, and four.  The contents of

  value-size  determine  whether  the  integer value that OTS$CVT_TI_L

  creates is a byte, word or longword.  If an invalid value is  given,

  OTS$CVT_TI_L  returns  an  error.  This is an optional argument.  If

  omitted, the default is four and  OTS$CVT_TI_L  returns  a  longword

  integer.



  flags



  type: longword (unsigned)

  access: read only

  mechanism: by value



  User-supplied flags which OTS$CVT_TI_L uses to determine how  blanks

  and  tabs  are  interpreted.   The  flags  argument  is  an unsigned

  longword containing the value of the flags.

3 OTS$CVT_TL_L

  OTS$CVT_TL_L converts an  ASCII  text  string  representation  of  a

  FORTRAN-77 L format to a byte, word, or longword integer value.  The

  result is a longword by default, but the calling program can specify

  a byte or a word value instead.



     Format:



       OTS$CVT_TL_L  inp-str ,value [,value-size] 



     Arguments:



  inp-str



  type: character string

  access: read only

  mechanism: by descriptor, fixed-length or dynamic string



  Input string containing an ASCII text representation of a FORTRAN-77

  L  format  that  OTS$CVT_TL_L  converts  to a byte, word or longword

  integer value.  The inp-str argument is the address of a  descriptor

  pointing to the input string.



  value



  type: unspecified

  access: write only

  mechanism: by reference



  Integer value that OTS$CVT_TL_L creates when it converts  the  ACSII

  text  input  string.   The  value  argument  is  the address of this

  integer value.  OTS$CVT_TL_L returns a minus one as the contents  of

  the  value  argument if the character denoted by "Letter:" is "T" or

  "t".  Otherwise, OTS$CVT_TL_L sets value to zero.



  value-size



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Number of bytes occupied by  the  integer  value  that  OTS$CVT_TL_L

  creates   when  it  converts  the  ASCII  text  input  string.   The

  value-size argument contains the number of bytes.  Valid values  are

  one,  two,  and  four.   These values determine whether OTS$CVT_TL_L

  returns a byte, word or longword integer value.  If an invalid value

  is  given,  OTS$CVT_TL_L  returns  an  error.   This  is an optional

  argument.  If omitted, the default is four and OTS$CVT_TL_L  returns

  a longword integer value.

3 OTS$CVT_TO_L

  OTS$CVT_TO_L converts an ASCII  text  string  representation  of  an

  unsigned  octal value to an unsigned integer of an arbitrary length.

  The result is a longword by default, but  the  calling  program  can

  specify any number of bytes.



     Format:



       OTS$CVT_TO_L  inp-str ,value [,value-size]

                  [,flags] 



     Arguments:



  inp-str



  type: character string

  access: read only

  mechanism: by descriptor, fixed-length or dynamic string



  Input string containing an ASCII text string  representation  of  an

  unsigned  octal  value  that  OTS$CVT_TO_L  converts  to an unsigned

  integer.  The inp-str  argument  is  the  address  of  a  descriptor

  pointing  to  the  input string.  The valid input characters are the

  space and the digits 0 through 7.  No sign is permitted.



  value



  type: unspecified

  access: write only

  mechanism: by reference 



  Integer value that OTS$CVT_TO_L creates when it converts  the  input

  string.   The  value argument is the address of the unsigned integer

  value.



  value-size



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Number of  bytes  occupied  by  the  unsigned  integer  value.   The

  value-size argument contains the number of bytes.  If the content of

  the value-size argument is zero or a negative  number,  OTS$CVT_TO_L

  returns  an  error.   This is an optional argument.  If omitted, the

  default is four and OTS$CVT_TO_L returns a longword integer.



  flags



  type: longword (unsigned)

  access: read only

  mechanism: by value



  User-supplied flags that OTS$CVT_TO_L uses to determine  how  blanks

  within  the  input  string  are  interpreted.   The  flags  argument

  contains the user-supplied flags.

3 OTS$CVT_TU_L

  OTS$CVT_TU_L converts an ASCII  text  string  representation  of  an

  unsigned  decimal value to an unsigned byte, word or longword value.

  By default, the result is a longword.  Valid  input  characters  are

  the space and the digits 0 through 9.  No sign is permitted.



     Format:



       OTS$CVT_TU_L  inp-str ,value [,value-size]

                  [,flags] 



     Arguments:



  inp-str



  type: character string

  access: read only

  mechanism: by descriptor, fixed-length 



  Input  string  (fixed-length)  containing  an  ASCII   text   string

  representation  of  an  unsigned  decimal  value  that  OTS$CVT_TU_L

  converts to a byte, word or longword value.  The inp-str argument is

  the address of a descriptor pointing to the input string.



  value



  type: unspecified

  access: write only

  mechanism: by reference



  Byte,  word  or  longword  (depending  on  value-size)  into   which

  OTS$CVT_TU_L  writes the converted value.  The value argument is the

  address of the byte, word or longword.



  value-size



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Number of bytes occupied by  the  value  created  when  OTS$CVT_TU_L

  converts  the  input  string.   The value-size argument contains the

  number of bytes.  OTS$CVT_TU_L allows value sizes of 1, 2 and 4.  If

  any   other  value  is  specified,  or  if  value-size  is  omitted,

  OTS$CVT_TU_L uses the default, four.



  flags



  type: longword (unsigned)

  access: read only

  mechanism: by value



  User-supplied flags which OTS$CVT_TU_L uses to determine how  blanks

  and   tabs   are  interpreted.   The  flags  argument  contains  the

  user-supplied flags.

3 OTS$CVT_T_z

  The OTS$CVT_T_z routines convert an ASCII text string representation

  of  a  numeric  value  to  a  D_floating, F_floating, G_floating, or

  H_floating value.  These routines support FORTRAN D,  E,  F,  and  G

  input  type conversion as well as similar types for other languages.

  OTS$CVT_T_D,  OTS$CVT_T_F,  OTS$CVT_T_G  and   OTS$CVT_T_H   provide

  run-time support for BASIC and FORTRAN input statements.



     Format:



       OTS$CVT_T_D  inp-str ,value [,digits-in-fract]

                  [,scale-factor] [,flags] [,ext-bits] 



       OTS$CVT_T_F  inp-str ,value [,digits-in-fract]

                  [,scale-factor] [,flags] [,ext-bits] 



       OTS$CVT_T_G  inp-str ,value [,digits-in-fract]

                  [,scale-factor] [,flags] [,ext-bits] 



       OTS$CVT_T_H  inp-str ,value [,digits-in-fract]

                  [,scale-factor] [,flags] [,ext-bits] 



                  Each of the above four formats corresponds to one of

                  the four floating

                  point types.



     Arguments:



  inp-str



  type: character string

  access: read only

  mechanism: by descriptor, fixed-length or dynamic string 



  Input string containing an ASCII text  string  representation  of  a

  numeric value that OTS$CVT_T_Z converts to a D_floating, F_floating,

  G-floating, or  H-floating  value.   The  inp-str  argument  is  the

  address of a descriptor pointing to the input string.



  value



  type: D_floating, F_floating, G_floating, H_floating

  access: write only

  mechanism: by reference



  Floating-point value that OTS$CVT_T_z creates when it  converts  the

  input   string.    The   value   argument  is  the  address  of  the

  floating-point  value.   For  OTS$CVT_T_D,  value  is  a  D_floating

  number.   For  OTS$CVT_T_F,  value  is  an  F_floating  number.  For

  OTS$CVT_T_G, value is a G_floating number.  For  OTS$CVT_T_H,  value

  is an H_floating number.



  digits-in-fract



  type: longword (unsigned)

  access: read only

  mechanism: by value



  Number of digits in the fraction if no decimal point is included  in

  the  input string.  The digits-in-fract argument contains the number

  of digits.  This is an optional argument.  If omitted,  the  default

  is zero.



  scale-factor



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Scale factor.  The scale-factor argument contains the value  of  the

  scale  factor.   If  flags  bit  6  is clear, the resultant value is

  multiplied by 10**factor unless the exponent is present.   If  flags

  bit  6  is  set,  the  scale  factor  is always applied.  This is an

  optional argument.  If omitted, the default is zero.



  flags



  type: longword (unsigned)

  access: read only

  mechanism: by value



  User-supplied flags.  The flags argument contains the  user-supplied

  flags.



  ext-bits



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Extra precision bits.  The ext-bits argument is  the  address  of  a

  signed  word  integer  containing  the  extra  precision  bits.   If

  present, value is not rounded, and the first n bits after truncation

  are  returned  in  this  argument.  For D_floating and F_floating, n

  equals 8 and the bits are returned as a byte.   For  G_floating  and

  H_floating,  n  equals  11  and  15,  respectively, and the bits are

  returned as a word, left-justified.

3 OTS$CVT_TZ_L

  OTS$CVT_TZ_L converts an ASCII  text  string  representation  of  an

  unsigned  hexadecimal  value  to an unsigned integer of an arbitrary

  length.  The result is  a  longword  by  default,  but  the  calling

  program can specify any number of bytes.



     Format:



       OTS$CVT_TZ_L  inp-str ,value [,value-size]

                  [,flags] 



     Arguments:



  inp-str



  type: character string

  access: read only

  mechanism: by descriptor, fixed-length or dynamic string 



  Input string containing an ASCII text string  representation  of  an

  unsigned hexadecimal value that OTS$CVT_TZ_L converts to an unsigned

  integer.  The inp-str  argument  is  the  address  of  a  descriptor

  pointing to the input string.  Valid input characters are the space,

  the digits 0 through 9, and the letters A through  F.   No  sign  is

  permitted.  Lowercase letters a through f are acceptable.



  value



  type: unspecified

  access: write only

  mechanism: by reference



  Integer value created when OTS$CVT_TZ_L converts the  input  string.

  The value argument is the address of the integer value.



  value-size



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Number of bytes occupied  by  the  integer  value.   The  value-size

  argument contains the number of bytes.  If the value size is zero or

  a negative number, OTS$CVT_TZ_L returns an input  conversion  error.

  This is an optional argument.  If omitted, the default is four.



  flags



  type: longword (unsigned)

  access: read only

  mechanism: by value



  User-supplied flags that OTS$CVT_TZ_L uses to determine  how  blanks

  are  interpreted.   The  flags  argument  is  an  unsigned  longword

  containing these user-supplied flags.

3 OTS$DIVCx

  OTS$DIVC, OTS$DIVCD_R3 and OTS$DIVCG_R3 return a complex result of a

  complex division on complex numbers.



     Format:



       OTS$DIVC  dividend ,divisor



       OTS$DIVCD_R3  dividend ,divisor



       OTS$DIVCG_R3  dividend ,divisor



                  Each of the above three formats corresponds to one

                  of the three floating point complex types.



     Arguments:



  dividend



  type: F_floating complex, D_floating complex, G_floating complex

  access: read only

  mechanism: by value



  Complex dividend.  The dividend argument contains  a  floating-point

  complex  value.   For  OTS$DIVC,  dividend  is an F_floating complex

  number.  For OTS$DIVCD_R3, dividend is a D_floating complex  number.

  For OTS$DIVCG_R3, dividend is a G_floating complex number.



  divisor



  type: F_floating complex, D_floating complex, G_floating complex

  access: read only

  mechanism: by value



  Complex divisor.  The divisor argument contains  the  value  of  the

  divisor.   For  OTS$DIVC,  divisor  is an F_floating complex number.

  For OTS$DIVCD_R3, divisor  is  a  D_floating  complex  number.   For

  OTS$DIVCG_R3, divisor is a G_floating complex number.

3 OTS$DIV_PK_LONG

  OTS$DIV_PK_LONG divides fixed-point decimal data, which is stored in

  packed  decimal  form, when precision and scale requirements for the

  quotient call for multiple precision  division.   The  divisor  must

  have a precision of thirty or thirty-one digits.



     Format:



       OTS$DIV_PK_LONG  divd ,divr ,divr-prec ,quot ,quot-prec 

                  ,prec-data ,scale-data 



     Arguments:



  divd



  type: packed decimal string

  access: read only

  mechanism: by reference



  Dividend .The divd argument is  the  address  of  a  packed  decimal

  string which contains the shifted dividend.



  divr



  type: packed decimal string

  access: read only

  mechanism: by reference



  Divisor.  The divr argument is  the  address  of  a  packed  decimal

  string which contains the divisor.



  divr-prec



  type: word integer (signed)

  access: read only

  mechanism: by value



  Precision of the divisor.  The divr-prec argument is a  signed  word

  integer which contains the precision of the divisor.  The high order

  bits are filled with zeros.



  quot



  type: packed decimal string

  access: write only

  mechanism: by reference



  Quotient.  The quot argument is the address of  the  packed  decimal

  string into which OTS$DIV_PK_LONG writes the quotient.



  quot-prec



  type: word integer (signed)

  access: read only

  mechanism: by value



  Precision of the quotient.  The quot-prec argument is a signed  word

  integer that contains the precision of the quotient.  The high order

  bits are filled with zeros.



  prec-data



  type: word integer (signed)

  access: read only

  mechanism: by value



  Additional digits of precision required.  The prec-data argument  is

  a signed word integer that contains the value of the addition digits

  of precision required.



  scale-data



  type: word integer (signed)

  access: read only

  mechanism: by value



  The scale-data argument is a signed word integer that  contains  the

  value of d.

3 OTS$DIV_PK_SHORT

  OTS$DIV_PK_SHORT divides fixed-point decimal data, which  is  stored

  in  packed  decimal  form, when precision and scale requirements for

  the quotient call for multiple precision division.  The divisor  can

  have a maximum precision of twenty-nine digits.



     Format:



       OTS$DIV_PK_SHORT  divd ,divr ,divr-prec ,quot ,quot-prec

                  ,prec-data 



     Arguments:



  divd



  type: packed decimal string

  access: read only

  mechanism: by reference



  Dividend.The divd argument is the address of a packed decimal string

  which contains the shifted dividend.



  divr



  type: packed decimal string

  access: read only

  mechanism: by reference



  Divisor.  The divr argument is  the  address  of  a  packed  decimal

  string which contains the divisor.



  divr-prec



  type: word integer (signed)

  access: read only

  mechanism: by value



  Precision of the divisor.  The divr-prec argument is a  signed  word

  integer which contains the precision of the divisor.  The high order

  bits are filled with zeros.



  quot



  type: packed decimal string

  access: write only

  mechanism: by reference



  Quotient.  The quot argument is the  address  of  a  packed  decimal

  string into which OTS$DIV_PK_SHORT writes the quotient.



  quot-prec



  type: word integer (signed)

  access: read only

  mechanism: by value



  Precision of the quotient.  The quot-prec argument is a signed  word

  integer  which  contains  the  precision  of the quotient.  The high

  order bits are filled with zeros.



  prec-data



  type: word integer (signed)

  access: read only

  mechanism: by value



  Additional digits of precision required.  The prec-data argument  is

  a  signed  word  integer  which  contains  the value of the addition

  digits of precision required.

3 OTS$MULCx

  OTS$MULCD_R3 and OTS$MULCG_R3 calculate the complex product  of  two

  complex values.



     Format:



       OTS$MULCD_R3  multiplier ,multiplicand



       OTS$MULCG_R3  multiplier ,multiplicand



                  The above formats correspond to the D_floating and

                  G_floating complex

                  types.



     Arguments:



  multiplier



  type: D_floating complex, G_floating complex

  access: read only

  mechanism: by value



  Complex  multiplier.    The   multiplier   argument   contains   the

  multiplier.   For  OTS$MULCD_R3,  multiplier is a D_floating complex

  number.   For  OTS$MULCG-R3,  multiplier  is  a  G_floating  complex

  number.



  multiplicand



  type: D_floating complex, G_floating complex

  access: read only

  mechanism: by value



  Complex  multiplicand.   The  multiplicand  argument  contains   the

  multiplicand.    For  OTS$MULCD_R3,  multiplicand  is  a  D_floating

  complex number.  For OTS$MULCG_R3,  multiplicand  is  an  F_floating

  complex number.

3 OTS$POWCxCx

  OTS$POWCC, OTS$POWCDCD_R3 and OTS$POWCGCG_R3 return  the  result  of

  raising a complex base to a complex power.



     Format:



       OTS$POWCC  base ,exponent



       OTS$POWCDCD_R3  base ,exponent



       OTS$POWCGCG_R3  base ,exponent



                  Each of the above three formats corresponds to one

                  of the three floating

                  point complex types.



     Arguments:



  base



  type: F_floating complex, D_floating complex, G_floating complex

  access: read only

  mechanism: by value



  Complex base.  The base argument contains the  value  of  the  base.

  For   OTS$POWCC,   base   is  an  F_floating  complex  number.   For

  OTS$POWCDCD_R3,  base  is  a   D_floating   complex   number.    For

  OTS$POWCGCG_R3, base is a G_floating complex number.



  exponent



  type: F_floating complex, D_floating complex, G_floating complex

  access: read only

  mechanism: by value



  Complex exponent.  The exponent argument contains the value  of  the

  exponent.   For OTS$POWCC, exponent is an F_floating complex number.

  For OTS$POWCDCD_R3, exponent is a D_floating  complex  number.   For

  OTS$POWCGCG_R3, exponent is a G_floating complex number.

3 OTS$POWCxJ

  These procedures return the complex result of raising a complex base

  to an integer exponent.



     Format:



       OTS$POWCJ  base ,exponent



       OTS$POWCDJ_R3  base ,exponent



       OTS$POWCGJ_R3  base ,exponent



                  Each of the above three formats corresponds to one

                  of the three floating point

                  complex types.



     Arguments:



  base



  type: F_floating complex, D_floating complex, G_floating complex

  access: read only

  mechanism: by value



  Complex base.  The base argument contains  the  complex  base.   For

  OTS$POWCJ, base is an F_floating complex number.  For OTS$POWCDJ_R3,

  base is a D_floating complex number.  For OTS$POWCGJ_R3, base  is  a

  G_floating complex number.



  exponent



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Exponent.  The  exponent  argument  is  a  signed  longword  integer

  containing the exponent.

3 OTS$POWDx

  OTS$POWDD, OTS$POWDJ and OTS$POWDR raise  a  D_floating  base  to  a

  D_floating, longword, or F_floating power.



     Format:



       OTS$POWDD  base ,exponent



       OTS$POWDJ  base ,exponent



       OTS$POWDR  base ,exponent



                  The above formats correspond to raising the

                  D_floating base to a D_floating,

                  longword, or F_floating power.



     Arguments:



  base



  type: D_floating

  access: read only

  mechanism: by value



  Base.  The base argument is a D_floating number containing the base.



  exponent



  type: D_floating, longword integer (signed), F_floating

  access: read only

  mechanism: by value



  Exponent.   The  exponent  argument  contains  the  exponent.    For

  OTS$POWDD, exponent is a D_floating number.  For OTS$POWDJ, exponent

  is a  signed  longword  integer.   For  OTS$POWDR,  exponent  is  an

  F_floating number.



3 OTS$POWGx
  OTS$POWGG and OTS$POWGJ raise a G_floating base to a G_floating or longword
  power.

     Format:

       OTS$POWGG base ,exponent

       OTS$POWGJ base ,exponent

     Arguments:

  base 
  
  type: G_floating
  access: read only
  mechanism:  by value

  Base which OTS$POWGx raises to a G_floating or longword power.  The 
  base argument is a G_floating number containing the base.

  exponent

  type: G_floating, longword integer (signed)
  access: read only
  mechanism: by value

  Exponent to which OTS$POWGx raises the base.  For OTS$POWGG, the 
  exponent argument is a G_floating number containing the exponent.
  For OTS$POWGJ, the exponent argument is a signed longword integer
  containing the exponent.
3 OTS$POWHx

  OTS$POWHH_R3  and  OTS$POWHJ_R3  raise  an  H_floating  base  to  an

  H_floating or longword power.



     Format:



       OTS$POWHH_R3  base ,exponent



       OTS$POWHJ_R3  base ,exponent



                  The above formats correspond to raising an

                  H_floating number to either an

                  H_floating or a signed longword integer power. 



     Arguments:



  base



  type: H_floating

  access: read only

  mechanism: by value



  Base.  The base argument is  an  H_floating  number  containing  the

  base.



  exponent



  type: H_floating, longword integer (signed)

  access: read only

  mechanism: by value



  Exponent.   The  exponent  argument  contains  the  exponent.    For

  OTS$POWHH_R3,  exponent  is an H_floating number.  For OTS$POWHJ_R3,

  exponent is a signed longword integer.

3 OTS$POWII

  OTS$POWII raises a word base to a word power.



     Format:



       OTS$POWII  base ,exponent



     Arguments:



  base



  type: word integer (signed)

  access: read only

  mechanism: by value



  Base.  The base argument is a signed  word  integer  containing  the

  base.



  exponent



  type: word integer (signed)

  access: read only

  mechanism: by value



  Exponent.  The exponent argument is a signed word integer containing

  the exponent.

3 OTS$POWJJ

  OTS$POWJJ raises a signed longword base to a signed longword power.



     Format:



       OTS$POWJJ  base ,exponent



     Arguments:



  base



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Base.  The base argument is a signed longword integer containing the

  base.



  exponent



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Exponent.  The  exponent  argument  is  a  signed  longword  integer

  containing the exponent.

3 OTS$POWGx

  OTS$POWGG and OTS$POWGJ raise a G_floating base to a  G_floating  or

  longword power.



     Format:



       OTS$POWGG  base ,exponent



       OTS$POWGJ  base ,exponent



     Arguments:



  base



  type: G_floating

  access: read only

  mechanism: by value



  Base which OTS$POWGx raises to a G_floating or longword power.   The

  base argument is a G_floating number containing the base.



  exponent



  type: G_floating, longword integer (signed)

  access: read only

  mechanism: by value



  Exponent to which OTS$POWGx raises the  base.   For  OTS$POWGG,  the

  exponent  argument  is  a G_floating number containing the exponent.

  For OTS$POWGJ, the exponent argument is a  signed  longword  integer

  containing the exponent.

3 OTS$POWRx

  OTS$POWRD, OTS$POWRJ and OTS$POWRR raise an  F_floating  base  to  a

  D_floating, longword,or F_floating power.



     Format:



       OTS$POWRD  base ,exponent



       OTS$POWRJ  base ,exponent



       OTS$POWRR  base ,exponent



                  The above formats correspond to raising the base to

                  a D_floating, longword

                  and F_floating power.



     Arguments:



  base



  type: F_floating

  access: read only

  mechanism: by value



  Base.  The base argument is  an  F_floating  number  containing  the

  base.



  exponent



  type: D_floating, longword integer (signed), F_floating

  access: read only

  mechanism: by value 



  Exponent.   The  exponent  argument  contains  the  exponent.    For

  OTS$POWRD, exponent is a D-floating number.  For OTS$POWRJ, exponent

  is a  signed  longword  integer.   For  OTS$POWRR,  exponent  is  an

  F_floating number.

3 OTS$SCOPY_DXDX

  OTS$SCOPY_DXDX copies a source string to a destination string.  Both

  strings are passed by descriptor.



     Format:



       OTS$SCOPY_DXDX  src-str ,dst-str



     Arguments:



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source string.  The src-str argument is the address of a  descriptor

  pointing  to  the  source  string.   The  descriptor  class  can  be

  unspecified,   fixed-length,   dynamic,   scalar   decimal,   array,

  noncontiguous array, or varying.



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string.  The  dst-str  argument  is  the  address  of  a

  descriptor  pointing  to  the  destination  string.  The class field

  determines the appropriate action.



  unmoved-src



  type: longword (unsigned)

  access: write only

  mechanism: by value



  Number of unmoved source string  bytes.   The  unmoved-scr  argument

  contains  the  number of unmoved source string bytes.  If the source

  string length is equal  to  or  less  than  the  destination  string

  length, unmoved-src is set to zero.

3 OTS$SCOPY_R_DX

  OTS$SCOPY_R_DX copies a source  string  passed  by  reference  to  a

  destination string.



     Format:



       OTS$SCOPY_R_DX  src-len ,src-adr ,dst-str



     Arguments:



  src-len



  type: word (unsigned)

  access: read only

  mechanism: by value



  Length of the source string.  The src-len argument  is  an  unsigned

  word integer containing the length of the source string.



  src-adr



  type: address

  access: read only

  mechanism: by value



  Source string.  The src-adr argument is the address  of  the  source

  string.



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string.  The  dst-str  argument  is  the  address  of  a

  descriptor  pointing  to  the  destination  string.  The class field

  determines the appropriate action.  The length field  (DSC$W_LENGTH)

  alone  or  both the address (DSC$A_POINTER) and length fields can be

  modified if the string is dynamic.  For varying strings, the current

  length is rewritten.



  unmoved-src



  type: longword (unsigned)

  access: write only

  mechanism: by value



  Number of unmoved source string bytes.  The unmoved-src argument  is

  an  unsigned longword containing the number of unmoved source string

  bytes.  If the source string length is equal to  or  less  than  the

  destination string length, unmoved-src is set to zero.

3 OTS$SFREE1_DD

  OTS$SFREE1_DD returns one dynamic string area to free storage.



     Format:



       OTS$SFREE1_DD  dyn-dsc



     Arguments:



  dyn-dsc



  type: quadword (unsigned)

  access: modify

  mechanism: by reference



  Dynamic string descriptor.  The dyn-dsc argument is the  address  of

  the  dynamic  string  descriptor.   The  descriptor is assumed to be

  dynamic and its class field is not checked.

3 OTS$SFREEN_DD

  OTS$SFREEN_DD takes as input a vector of one or more dynamic  string

  areas and returns them to free storage.



     Format:



       OTS$SFREEN_DD  dsc-num ,first-dsc



     Arguments:



  dsc-num



  type: longword (unsigned)

  access: read only

  mechanism: by value



  Number of adjacent descriptors to be flagged as having no  allocated

  area  (DSC$A_POINTER  =  0  and  DSC$W_LENGTH = 0) and to have their

  allocated areas returned to  free  storage  by  OTS$SFREEN_DD.   The

  dsc-num  argument  is  an  unsigned longword containing the value of

  dsc-num.



  first-dsc



  type: quadword (unsigned)

  access: modify

  mechanism: by reference



  First string descriptor of an  array  of  string  descriptors.   The

  first-dsc  argument  is  the address of the first string descriptor.

  The descriptors are assumed to be dynamic, and  their  class  fields

  are not checked.

3 OTS$SGET1_DD

  OTS$SGET1_DD allocates  a  specified  number  of  bytes  of  dynamic

  virtual memory to a specified string descriptor.



     Format:



       OTS$SGET1_DD  len ,dyn-dsc



     Arguments:



  len



  type: word (unsigned)

  access: read only

  mechanism: by value



  Number of bytes to be allocated.   The  len  argument  contains  the

  number  of  bytes.  The amount of storage allocated is automatically

  rounded up.  If the number of bytes is zero, a small number of bytes

  is allocated.



  dyn-dsc



  type: quadword (unsigned)

  access: modify

  mechanism: by reference



  Dynamic string descriptor to which the area is to be allocated.  The

  dyn-str  argument  is  the address of the dynamic string descriptor.

  The class field is not checked but it is set to dynamic (DSC$B_CLASS

  = 2).  The length field (DSC$W_LENGTH) is set to len and the address

  field (DSC$A_POINTER) is set to the  string  area  allocated  (first

  byte beyond the header).

3 OTS$MOVE5

  OTS$MOVE5 moves up to 2**31-1 bytes, (2,147,483,647  bytes)  from  a

  specified  source  address  to a specified destination address, with

  separate source and destination lengths, and with fill.  Overlap  of

  the source and destination arrays does not affect the result.



     Format:



       OTS$MOVE5  srclen ,source ,fill ,dstlen ,dest



     Arguments:



  srclen



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Number of bytes of data to move.  The  srclen  argument  contains  a

  signed longword integer that is this number.  Value may range from 0

  through 2,147,483,647.



  source



  type: byte (unsigned)

  access: read only

  mechanism: by reference, array reference



  Data to be moved by OTS$MOVE5.  The  source  argument  contains  the

  address of an unsigned byte array that contains this data.



  fill



  type: byte (unsigned)

  access: read only

  mechanism: by value



  Character used to pad the  source  data  if  scrclen  is  less  than

  dstlen.   The fill argument contains the address of an unsigned byte

  that is this character.



  dstlen



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Size of the destination area in bytes.  The  dstlen  argument  is  a

  signed  longword integer contains this size.  Value may range from 0

  through 2,147,483,647.



  dest



  type: byte (unsigned)

  access: write only

  mechanism: by reference, array reference



  Item into which source will be moved.   The  dest  argument  is  the

  address  of  an  unsigned byte array into which OTS$MOVE5 will write

  the source data.

3 OTS$MOVE3

  OTS$MOVE3 moves up to 2**31-1 bytes, (2,147,483,647  bytes)  from  a

  specified source address to a specified destination address.



     Format:



       OTS$MOVE3  length ,source ,dest



     Arguments:



  length



  type: longword integer (signed)

  access: read only

  mechanism: by value



  Number of bytes of data to move.  The length argument  contains  the

  number   of   bytes  to  move.   Value  may  range  from  0  through

  2,147,483,647 bytes.



  source



  type: byte (unsigned)

  access: read only

  mechanism: by reference, array reference



  Data to be moved by OTS$MOVE3.  The  source  argument  contains  the

  address of an unsigned byte array that contains this data.



  dest



  type: byte (unsigned)

  access: write only

  mechanism: by reference, array reference



  Item into which source will be moved.   The  dest  argument  is  the

  address  of  an  unsigned byte array into which OTS$MOVE3 writes the

  source data.

2 SMG$
 SMG$ Procedures
3 SMG$ADD_KEY_DEF

  This routine adds  a  keypad  key  definition  to  a  table  of  key

  definitions.



     Format:



       SMG$ADD_KEY_DEF  key-table-id ,key-name

                  [,if-state] [,attributes] [,equiv-string] 

                  [,state-string]



     Arguments:



  key-table-id



  type: longword integer (unsigned)

  access: read only

  mechanism: by reference



  Identifies the key table to which you are adding a  key  definition.

  The  key-table-id  argument  is  the address of an unsigned longword

  that contains the key table identifier.



  key-name



  type: character string

  access: read only

  mechanism: by descriptor



  Identifies the key whose  value  you  are  defining.   The  key-name

  argument  is  the address of a descriptor pointing to this key name.

  The SMG$ADD_KEY_DEF procedure changes the string to  upper-case  and

  removes trailing blanks.



  if-state



  type: character string

  access: read only

  mechanism: by descriptor



  Qualifies the value returned when key-name is struck.  The  if-state

  argument  is  the  address  of  a  descriptor  pointing to the state

  string.



  attributes



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Longword bit mask  specifying  additional  attributes  of  this  key

  definition.   The  attributes argument is the address of an unsigned

  longword that contains this attribute mask.  If omitted, the mask is

  zero.



  equiv-string



  type: character string

  access: read only

  mechanism: by descriptor



  Character string to  be  substituted  for  the  key  stroke  in  the

  returned  line.   The  equiv-string  argument  is  the  address of a

  descriptor pointing to this equivalence string.



  state-string



  type: character string

  access: read only

  mechanism: by descriptor



  Contains a new state name which becomes the current state when  this

  key  is  pressed.   The  state-string  argument  is the address of a

  descriptor pointing to the new state string.

3 SMG$ALLOW_ESCAPE

  This routine enables or disables SMG  parsing  of  escape  sequences

  which are output to a virtual display.



     Format:



       SMG$ALLOW_ESCAPE  display-id ,esc-flag



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Identifies the display in which output containing  escape  sequences

  is  allowed.   The display-id argument is the address of an unsigned

  longword  that  contains  the  display  identifier.   Display-id  is

  returned by SMG$CREATE_VIRTUAL_DISPLAY.



  Esc-flag



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Determines whether escape sequence parsing is enabled  or  disabled.

  The  esc-flag  argument  is the address of an unsigned longword that

  contains the escape flag.  If esc-flag equals 1, parsing is  on;  if

  esc-flag equals 0, parsing is off.

3 SMG$BEGIN_DISPLAY_UPDATE

  This routine saves, or batches, all  output  to  a  virtual  display

  until a matching call to SMG$END_DISPLAY_UPDATE is encountered.



     Format:



       SMG$BEGIN_DISPLAY_UPDATE  display-id



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display for which output  is  to  be  batched.

  The  display-id argument is the address of an unsigned longword that

  contains the display identifier.

3 SMG$BEGIN_PASTEBOARD_UPDATE

  This routine saves, or batches, all output to a pasteboard  until  a

  matching call to SMG$END_PASTEBOARD_UPDATE is encountered.



     Format:



       SMG$BEGIN_PASTEBOARD_UPDATE  pasteboard-id



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard for which output is  to  be  batched.   The

  pasteboard-id  argument  is the address of an unsigned longword that

  contains the pasteboard identifier.  Pasteboard-id  is  returned  by

  SMG$CREATE_PASTEBOARD.

3 SMG$CANCEL_INPUT

  This routine  immediately  cancels  any  read-in-progress  that  was

  issued by SMG$READ_STRING or SMG$READ_COMPOSED_LINE.



     Format:



       SMG$CANCEL_INPUT  keyboard-id



     Arguments:



  keyboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the  virtual  keyboard  for  which  the  input  is  to  be

  cancelled.   The  keyboard-id argument is the address of an unsigned

  longword that contains  the  keyboard  identifier.   Keyboard-id  is

  returned by SMG$CREATE_VIRTUAL_KEYBOARD.

3 SMG$CHANGE_PBD_CHARACTERISTICS

  This routine lets you change the width, height, and background color

  associated with a pasteboard.



     Format:



       SMG$CHANGE_PBD_CHARACTERISTICS  pasteboard-id 

                  [,desired-width] [,resulting-width]

                  [,desired-height] [,resulting-height]

                  [,desired-background-color]

                  [,resulting-background-color]



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard whose characteristics are  to  be  changed.

  The  pasteboard-id  argument  is the address of an unsigned longword

  that contains the pasteboard identifier.



  desired-width



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  New width for the pasteboard.  The  desired-width  argument  is  the

  address  of  a  signed  longword  integer  that contains the desired

  width.  If omitted, the width does not change.



  resulting-width



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Physical width of the pasteboard.  The resulting-width  argument  is

  the  address  of a signed longword integer into which is written the

  actual width of the pasteboard.



  desired-height



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  New height for the pasteboard.  The desired-height argument  is  the

  address  of  a  signed  longword  integer  that contains the desired

  height of the pasteboard.  If omitted, the height does not change.



  resulting-height



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Physical height of the pasteboard.  The resulting-height argument is

  the  address  of a signed longword integer into which is written the

  actual height of the pasteboard.



  desired-background-color



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Symbolic name for the desired color.   The  desired-background-color

  argument  is  the  address of an unsigned longword that contains the

  desired color.



  resulting-background-color



  type: longword (unsigned)

  access: write only

  mechanism: by reference 



  Receives the actual color  chosen.   The  resulting-background-color

  argument  is  the  address  of  an  unsigned  longword into which is

  written the actual background  color.   If  the  terminal  does  not

  support the specified color, the nearest approximation is chosen.

3 SMG$CHANGE_RENDITION

  This routine changes the video attributes  for  all  or  part  of  a

  virtual display.



     Format:



       SMG$CHANGE_RENDITION  display-id ,start-row ,start-col

                  ,rows ,columns [,rendition-set]

                  [,rendition-complement]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display  whose  default  rendition  is  to  be

  changed.   The  display-id  argument  is  the address of an unsigned

  longword that contains the display identifier.



  start-row



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Starting row position to receive the new rendition.   The  start-row

  argument  is  the address of a signed longword integer that contains

  the number of the starting row.



  start-col



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Starting  column  position  to  receive  the  new  rendition.    The

  start-col  argument is the address of a signed longword integer that

  contains the number of the starting column.



  rows



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Number of rows to receive the new rendition.  The rows  argument  is

  the address of a signed longword integer that contains the number of

  rows to be affected.



  columns



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Number of  columns  to  receive  the  new  rendition.   The  columns

  argument  is  the address of a signed longword integer that contains

  the number of columns to be affected.



  rendition-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which denotes video attributes for the specified portion of the

  virtual  display.   The  rendition-set argument is the address of an

  unsigned longword whose bits control the video rendition.  Each  bit

  in this argument affects the corresponding attribute in the display.



  rendition-complement



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which denotes video attributes for the specified portion of the

  virtual  display.   The rendition-complement argument is the address

  of an unsigned longword whose bits control the video rendition.

3 SMG$CHANGE_VIRTUAL_DISPLAY

  This routine lets you  change  the  dimensions,  border,  and  video

  attributes of a virtual display.



     Format:



       SMG$CHANGE_VIRTUAL_DISPLAY  display-id ,rows ,columns

                  [,display-attributes] [,video-attributes]

                  [,char-set]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display whose attributes are  to  be  changed.

  The  display-id argument is the address of an unsigned longword that

  contains the display identifier.



  rows



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the new number of rows for the virtual display.  The  rows

  argument  is  the address of a signed longword integer that contains

  the number of rows in the virtual display.



  columns



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the new number of columns for the  virtual  display.   The

  columns  argument  is  the address of a signed longword integer that

  contains the number of columns in the virtual display.



  display-attributes



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies whether the virtual display  is  bordered  (the  default).

  The  display-attributes  argument  is  the  address  of  an unsigned

  longword that contains the display attributes mask.



  video-attributes



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the default rendition to be applied to  all  output  in  a

  virtual  display,  unless  overridden by a call to a specific output

  routine.   The  video-attributes  argument  is  the  address  of  an

  unsigned longword that contains the video attributes mask.



  char-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the default character set for all  text  in  this  virtual

  display.   The  char-set  argument  is  the  address  of an unsigned

  longword that contains the character set specifier.  At  this  time,

  the only valid value is SMG$C_ASCII, which is also the default.

3 SMG$CHECK_FOR_OCCLUSION

  This routine checks to see whether a virtual display is  covered  by

  another virtual display.



     Format:



       SMG$CHECK_FOR_OCCLUSION  display-id ,pasteboard-id

                  ,occlusion-state 



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies  the  virtual  display  to  be  checked.   The  display-id

  argument  is  the  address of an unsigned longword that contains the

  display     identifier.      Display-id     is      returned      by

  SMG$CREATE_VIRTUAL_DISPLAY.



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard to be checked.  The pasteboard-id  argument

  is  the address of an unsigned longword that contains the pasteboard

  identifier.  Pasteboard-id is returned by SMG$CREATE_PASTEBOARD.



  occlusion-state



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Receives the value denoting whether the display  is  occluded.   The

  occlusion-state argument is the address of a signed longword integer

  into which the occlusion state is written.  Occlusion-state  is  set

  to  1  if  the display is occluded or set to 0 if the display is not

  occluded on the specified pasteboard.  If  the  procedure  does  not

  return SS$_NORMAL, the contents of occlusion-state are undefined.

3 SMG$CONTROL_MODE

  

  This routine  controls  buffering,  minimal  updating,  whether  the

  screen  is  cleared  when the pasteboard is deleted, and whether tab

  characters are used for screen formatting.



     Format:



       SMG$CONTROL_MODE  pasteboard-id [,new-mode] [,old-mode]



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard to be changed.  The pasteboard-id  argument

  is  the address of an unsigned longword that contains the pasteboard

  identifier.  Pasteboard-id is returned by SMG$CREATE_PASTEBOARD.



  new-mode



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the  new  control  settings  to  be  used.   The  new-mode

  argument  is  the  address of an unsigned longword that contains the

  mode settings.  A bit set to 1 forces that mode to be employed while

  a bit set to 0 inhibits that mode of operation.



  old-mode



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Receives the control settings which were in effect prior to  calling

  this procedure.  The old-mode argument is the address of an unsigned

  longword into which is written the former mode settings.  A bit  set

  to  1 indicates that the specified mode was employed while a bit set

  to 0 indicates that the mode was inhibited.

3 SMG$CREATE_KEY_TABLE

  This routine creates a table for key definitions.



     Format:



       SMG$CREATE_KEY_TABLE  new-key-table-id



     Arguments:



  new-key-table-id



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Receives  the  identifier  of  the  newly-created  key  table.   The

  new-key-table-id  argument  is  the  address of an unsigned longword

  into which is written the key table identifier.

3 SMG$CREATE_PASTEBOARD

  This  routine  creates  a  pasteboard  and  returns   its   assigned

  pasteboard-id.



     Format:



       SMG$CREATE_PASTEBOARD  new-pasteboard-id [,output-device]

                  [,pb-rows] [,pb-columns] [,preserve-screen-flag]



     Arguments:



  new-pasteboard-id



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Receives the  identifier  of  the  newly  created  pasteboard.   The

  new-pasteboard-id  argument  is  the address of an unsigned longword

  into which is written the new pasteboard identifier.



  output-device



  type: character string

  access: read only

  mechanism: by descriptor



  Specifies the file specification or

  logical name to which the output associated with this pasteboard

  will  be written.  

  The output-device argument is the address of a descriptor that

  points to name of the output device.

  If omitted, output is sent to

  SYS$OUTPUT.



  pb-rows



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Receives  the  number  of  rows  on  the  device  specified  in  the

  output-device  argument.   The  pb-rows argument is the address of a

  signed longword integer into which is written the number of rows  on

  the specified device.



  pb-columns



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Receives the number of  columns  on  the  device  specified  in  the

  output-device argument.  The pb-columns argument is the address of a

  signed longword integer into which is written the number of  columns

  on the specified device.



  preserve-screen-flag



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies whether the screen is cleared before the Screen Management

  Facility  performs  any  output  to  it.   The  preserve-screen-flag

  argument is the address of an unsigned longword  that  contains  the

  screen  preservation flag.  If preserve-screen-flag is set to 0, the

  screen is initially  cleared;  if  set  to  1,  the  screen  is  not

  initially  cleared.  The default action is to clear the screen.  The

  Screen Management Facility works best when it can manage the  entire

  screen.  Therefore, setting this flag to 1 is discouraged.

3 SMG$CREATE_VIRTUAL_DISPLAY

  This routine creates a virtual  display  and  returns  its  assigned

  display id.



     Format:



       SMG$CREATE_VIRTUAL_DISPLAY  num-rows, num-columns,

                  new-display-id [,display-attributes]

                  [,video-attributes] [,char-set]



     Arguments:



  num-rows



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the number of rows in the newly created  virtual  display.

  The  num-rows  argument  is the address of a signed longword integer

  that contains the desired number of rows.



  num-columns



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the  number  of  columns  in  the  newly  created  virtual

  display.   The  num-columns  argument  is  the  address  of a signed

  longword integer that contains the desired number of columns.



  new-display-id



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Receives the display-id of the newly created virtual  display.   The

  display-id  argument  is  the  address  of an unsigned longword into

  which is written the display identifier.



  display-attributes



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies whether the virtual display  is  bordered  (the  default).

  The  display-attributes  argument  is  the  address  of  an unsigned

  longword that contains the display attributes mask.



  video-attributes



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the default rendition to be applied to all output in  this

  virtual  display  unless  overridden  by a call to a specific output

  routine (for example, SMG$CHANGE_RENDITION).   The  video-attributes

  argument  is  the  address of an unsigned longword that contains the

  video attributes mask.



  char-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the default character set for all  text  in  this  virtual

  display.   The  char-set  argument  is  the  address  of an unsigned

  longword that contains the character set specifier.  At  this  time,

  the only valid value is SMG$C_ASCII, which is also the default.

3 SMG$CREATE_VIRTUAL_KEYBOARD

  This routine creates a virtual keyboard  and  returns  its  assigned

  keyboard-id.



     Format:



       SMG$CREATE_VIRTUAL_KEYBOARD  new-keyboard-id

                  [,filespec] [,default-filespec]

                  [,resultant-filespec]



     Arguments:



  new-keyboard-id



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Receives the keyboard id of the newly created virtual keyboard.  The

  new-keyboard-id argument is the address of an unsigned longword into

  which is written the keyboard identifier.



  filespec



  type: character string

  access: read only

  mechanism: by descriptor



  String containing the file specification or logical name of the file

  or  terminal  to  be  used  for this virtual keyboard.  The filespec

  argument is the  address  of  a  descriptor  pointing  to  the  file

  specification.  If omitted, this defaults to SYS$INPUT.



  default-filespec



  type: character string

  access: read only

  mechanism: by descriptor



  String   containing   the   default   file    specification.     The

  default-filespec argument is the address of a descriptor pointing to

  the default file specification.  If  omitted,  the  null  string  is

  used.



  resultant-filespec



  type: character string

  access: write only

  mechanism: by descriptor



  String into which the  procedure  writes  the  fully  expanded  file

  specification  of the file used.  The resultant-filespec argument is

  the address of a descriptor pointing to the  string  into  which  is

  written the file specification that was used.

3 SMG$CURSOR_COLUMN

  This routine returns the  cursor's  current  column  position  in  a

  specified virtual display.



     Format:



       SMG$CURSOR_COLUMN  display-id



     ARGUMENT



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  The  display  for  which  the  column  position  is  returned.   The

  display-id  argument  is  the  address  of an unsigned longword that

  contains the display identifier.

3 SMG$CURSOR_ROW

  This  routine  returns  the  cursor's  current  row  position  in  a

  specified virtual display.



     Format:



       SMG$CURSOR_ROW  display-id



     ARGUMENT



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  The display for which the row position is returned.  The  display-id

  argument  is  the  address of an unsigned longword that contains the

  display identifier.

3 SMG$DEL_TERM_TABLE

  This routine  terminates  access  to  TERMTABLE.EXE  and  frees  the

  associated virtual address space.



     Format:



       SMG$DEL_TERM_TABLE  



     Arguments:

  None.

3 SMG$DEFINE_KEY

  This routine performs the DEFINE/KEY command you provide.



     Format:



       SMG$DEFINE_KEY  key-table-id ,command-line



     Arguments:



  key-table-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Identification of the key definition table for which the  DEFINE/KEY

  command  is  to  be  performed.   The  key-table-id  argument is the

  address  of  an  unsigned  longword  that  contains  the  key  table

  identifier.



  command-line



  type: character string

  access: read only

  mechanism: by descriptor



  String containing the  DEFINE/KEY  command  to  be  performed.   The

  command-line argument is the address of a descriptor pointing to the

  command to be performed.

3 SMG$DELETE_CHARS

  This routine deletes characters in a virtual display.



     Format:  SMG$DELETE_CHARS display-id ,num-chars ,row ,column



     Arguments:



  display-id



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Identifies the virtual display  from  which  characters  are  to  be

  deleted.   The  display-id  argument  is  the  address  of  a signed

  longword integer that contains the display identifier.



  num-chars



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the number of characters to  be  deleted.   The  num-chars

  argument  is  the address of a signed longword integer that contains

  the number of characters to be deleted.



  row



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the row position at which to start the deletion.  The  row

  argument  is  the address of a signed longword integer that contains

  the row number at which to start the deletion.



  column



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column position at which to start the  deletion.   The

  column  argument  is  the  address of a signed longword integer that

  contains the column position at which to start the deletion.

3 SMG$DELETE_KEY_DEF

  SMG$DELETE_KEY_DEF deletes a key definition from a  specified  table

  of key definitions.



     Format:



       SMG$DELETE_KEY_DEF  key-table-id ,key-name [,if-state]



     Arguments:



  key-table-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Identifies the key table from which the key definition  is  deleted.

  The  key-table-id  argument  is  the address of an unsigned longword

  that contains the key table identifier.



  key-name



  type: character string

  access: read only

  mechanism: by descriptor



  String containing the name of the key  whose  definition  is  to  be

  deleted.   The  key-name  argument  is  the  address of a descriptor

  pointing to the key name.  Key-name is stripped of  trailing  blanks

  and converted to uppercase before use.



  if-state



  type: character string

  access: read only

  mechanism: by descriptor



  String containing a state name  which  further  qualifies  key-name.

  The if-state argument is the address of a descriptor pointing to the

  state name.  If omitted, the null state is used.  Thus if a key  has

  several  definitions  depending  on various values of if-state, this

  routine lets you delete only one of those definitions.

3 SMG$DELETE_LINE

  This routine deletes lines from a virtual display.



     Format:



       SMG$DELETE_LINE  display-id ,start-line [,number-lines]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Identifies the virtual display from which lines are to  be  deleted.

  The  display-id argument is the address of an unsigned longword that

  contains the display identifier.



  start-line



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the first line to be deleted  from  the  virtual  display.

  The  start-line argument is the address of a signed longword integer

  that contains the number of the first line to be deleted.



  number-lines



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the number of  lines  to  be  deleted.   The  number-lines

  argument  is  the address of a signed longword integer that contains

  the number of lines to be deleted.  If omitted, one line is deleted.

3 SMG$DELETE_PASTEBOARD

  This routine deletes a pasteboard.



     Format:  SMG$DELETE_PASTEBOARD pasteboard-id [,clear-screen-flag]



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard to be deleted.  The pasteboard-id  argument

  is  the address of an unsigned longword that contains the pasteboard

  identifier.



  clear-screen-flag



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Determines whether this routine clears the screen after deleting the

  specified pasteboard.  The clear-screen-flag argument is the address

  of   an   unsigned   longword   that   contains   the   flag.     If

  clear-screen-flag  is  1, the screen is cleared; if 0, the screen is

  not cleared.  If this argument is omitted, the default is  to  clear

  the screen.

3 SMG$DELETE_VIRTUAL_DISPLAY

  This routine deletes a virtual display.



     Format:



       SMG$DELETE_VIRTUAL_DISPLAY  display-id



     ARGUMENT



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies  the  virtual  display  to  be  deleted.   The  display-id

  argument  is  the  address of an unsigned longword that contains the

  display identifier.

3 SMG$DELETE_VIRTUAL_KEYBOARD

  This routine deletes a virtual keyboard.



     Format:



       SMG$DELETE_VIRTUAL_KEYBOARD  keyboard-id



     ARGUMENT



  keyboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual  keyboard  to  be  deleted.   The  keyboard-id

  argument  is  the  address of an unsigned longword that contains the

  keyboard identifier.

3 SMG$DISABLE_UNSOLICITED_INPUT

  This routine disables the invocation of AST routines for unsolicited

  input.



     Format:



       SMG$DISABLE_UNSOLICITED_INPUT  pasteboard-id



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the keyboard (associated with  the  specified  pasteboard)

  for  which  unsolicited  input is being disabled.  The pasteboard-id

  argument is the address of an unsigned longword  that  contains  the

  pasteboard     identifier.     Pasteboard-id    is    returned    by

  SMG$CREATE_PASTEBOARD.

3 SMG$DRAW_LINE

  This routine draws a horizontal or vertical line.



     Format:



       SMG$DRAW_LINE  display-id ,start-row ,start-column ,end-row

                  ,end-column [,rendition-set] [,rendition-complement]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display on which the line is to be drawn.  The

  display-id  argument  is  the  address  of an unsigned longword that

  contains  the  display  identifier.   Display-id  is   returned   by

  SMG$CREATE_VIRTUAL_DISPLAY.



  start-row



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the row at which to begin drawing the line.  The start-row

  argument  is  the address of a signed longword integer that contains

  the row number at which to begin drawing the line.



  start-column



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column at  which  to  begin  drawing  the  line.   The

  start-column  argument  is  the address of a signed longword integer

  that contains the column number at which to begin drawing the line.



  end-row



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the row  at  which  the  drawn  line  ends.   The  end-row

  argument  is  the address of a signed longword integer that contains

  the row number at which the drawn line ends.



  end-column



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column at which the drawn line ends.   The  end-column

  argument  is  the address of a signed longword integer that contains

  the column number at which the drawn line ends.



  rendition-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  A mask which denotes video  attributes  for  the  drawn  line.   The

  rendition-set  argument  is the address of an unsigned longword that

  contains a video  attributes  mask.   Each  bit  attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.



  rendition-complement



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  A mask which denotes video  attributes  for  the  line  drawn.   The

  rendition-complement argument is the address of an unsigned longword

  that contains a video attributes mask.  Each bit attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.  Video attributes which can be manipulated in  this  manner

  are the same as for the rendition-set argument.

3 SMG$DRAW_RECTANGLE

  This routine draws a rectangle.



     Format:



       SMG$DRAW_RECTANGLE  display-id ,top-left-row ,top-left-column

                  ,bottom-right-row ,bottom-right-column

                  [,rendition-set] [,rendition-complement]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display on which the rectangle is to be drawn.

  The  display-id argument is the address of an unsigned longword that

  contains the display identifier.



  top-left-row



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the  row  number  of  the  top  left-hand  corner  of  the

  rectangle.   The  top-left-row  argument  is the address of a signed

  longword integer that contains the row number of the  top  left-hand

  corner of the rectangle.



  top-left-column



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column number of  the  top  left-hand  corner  of  the

  rectangle.   The top-left-column argument is the address of a signed

  longword  integer  that  contains  the  column  number  of  the  top

  left-hand corner of the rectangle.



  bottom-right-row



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the row number of the  bottom  right-hand  corner  of  the

  rectangle.  The bottom-right-row argument is the address of a signed

  longword  integer  that  contains  the  row  number  of  the  bottom

  right-hand corner of the rectangle.



  bottom-right-column



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column number of the bottom right-hand corner  of  the

  rectangle.   The  bottom-right-column  argument  is the address of a

  signed longword integer that  contains  the  column  number  of  the

  bottom right-hand corner of the rectangle.



  rendition-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which  denotes  video  attributes  for  the  drawn  line.   The

  rendition-set  argument  is the address of an unsigned longword that

  contains a video  attributes  mask.   Each  bit  attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.



  rendition-complement



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which  denotes  video  attributes  for  the  line  drawn.   The

  rendition-complement argument is the address of an unsigned longword

  that contains a video attributes mask.  Each bit attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.  Video attributes which can be manipulated in  this  manner

  are the same as for the rendition-set argument.

3 SMG$ENABLE_UNSOLICITED_INPUT

  This routine detects unsolicited input and calls an AST  routine  in

  response.



     Format:



       SMG$ENABLE_UNSOLICITED_INPUT  pasteboard-id ,AST-routine

                  [,AST-argument]



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the  pasteboard  for  which  unsolicited  input  is  being

  enabled.   The  pasteboard-id argument is the address of an unsigned

  longword that contains the pasteboard identifier.  Pasteboard-id  is

  returned by SMG$CREATE_VIRTUAL_PASTEBOARD.



  AST-routine



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  The address  of  an  AST  routine  to  be  called  upon  receipt  of

  unsolicited  input at the terminal.  The AST-routine argument is the

  address of the routine's procedure entry mask; that is, the  address

  of the routine itself.



  AST-argument



  type: unspecified

  access: read only

  mechanism: by value



  A value to be passed to the AST routine.  The AST-argument  argument

  contains the value to be passed to the AST routine.

3 SMG$END_DISPLAY_UPDATE

  This routine ends update batching for a virtual display.



     Format:



       SMG$END_DISPLAY_UPDATE  display-id



     Argument



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the  virtual  display  to  be  affected.   The  display-id

  argument  is  the  address  of  a longword that contains the display

  identifier.

3 SMG$END_PASTEBOARD_UPDATE

  This routine ends update batching for a pasteboard.



     Format:



       SMG$END_PASTEBOARD_UPDATE  pasteboard-id



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies  the  pasteboard  on  which  the  batch  count  is  to  be

  decremented.   The  pasteboard-id  argument  is  the  address  of an

  unsigned  longword  that   contains   the   pasteboard   identifier.

  Pasteboard-id  is  returned  by SMG$CREATE_PASTEBOARD.  If the batch

  count reaches 0, all buffered output for the specified pasteboard is

  written out.

3 SMG$ERASE_CHARS

  This routine erases characters in a  virtual  display  by  replacing

  them with blanks.



     Format:



       SMG$ERASE_CHARS  display-id ,number-of-chars ,row-number

                  ,column-number 



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display from which characters will be  erased.

  The  display-id argument is the address of an unsigned longword that

  contains the display identifier.



  number-of-chars



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the number of characters to be replaced with blanks.   The

  number-of-chars argument is the address of a signed longword integer

  that contains the number of characters to be replaced with blanks.



  row-number



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies  the  row  on  which  the  erase  operation  begins.   The

  row-number argument is the address of a signed longword integer that

  contains the number of the row at which the erasure is to begin.



  column-number



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column on  which  the  erase  operation  begins.   The

  column-number  argument  is the address of a signed longword integer

  that contains the number of the column at which the  erasure  is  to

  begin.

3 SMG$ERASE_DISPLAY

  This routine erases all or part of a virtual  display  by  replacing

  text characters with blanks.



     Format:



       SMG$ERASE_DISPLAY  display-id [,start-row] [,start-column]

                  [,end-row] [,end-column]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display to be erased.  The display-id argument

  is  the  address  of  an unsigned longword that contains the display

  identifier.



  start-row



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies  the  row  at  which  the  erase  operation  begins.   The

  start-row  argument is the address of a signed longword integer that

  contains the number of the row at which the erasure begins.



  start-column



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column at  which  the  erase  operation  begins.   The

  start-column  argument  is  the address of a signed longword integer

  that contains the number of the column at which the erasure begins.



  end-row



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the row at which the erase operation ends,  that  is,  the

  last  row  to  be  erased.  The end-row argument is the address of a

  signed longword integer that contains the number of the last row  to

  be erased.



  end-column



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column at which the erase operation ends, that is, the

  last column to be erased.  The end-column argument is the address of

  a signed longword integer that  contains  the  number  of  the  last

  column to be erased.

3 SMG$ERASE_LINE

  This routine erases all or part of a line in a virtual display.



     Format:



       SMG$ERASE_LINE  display-id [,line-number] [,column-number]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the  virtual  display  to  be  affected.   The  display-id

  argument  is  the  address of an unsigned longword that contains the

  display     identifier.      Display-id     is      returned      by

  SMG$CREATE_VIRTUAL_DISPLAY.



  line-number



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the  line  at  which  the  erase  operation  starts.   The

  line-number  argument  is  the  address of a signed longword integer

  that contains the number of the row at which the erasure starts.  If

  omitted,  column-number  is  also  ignored  and  the  current cursor

  position is used.



  column-number



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column at  which  the  erase  operation  starts.   The

  column-number  argument  is the address of a signed longword integer

  that contains the number of the column at which the erasure  starts.

  If  omitted  row-number  is  also  ignored  and  the  current cursor

  position is used.

3 SMG$ERASE_PASTEBOARD

  This routine erases a pasteboard; that is, it clears the screen.



     Format:



       SMG$ERASE_PASTEBOARD  pasteboard-id



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard to be erased.  The  pasteboard-id  argument

  is  the address of an unsigned longword that contains the pasteboard

  identifier.  Pasteboard-id is returned by SMG$CREATE_PASTEBOARD.

3 SMG$FIND_CURSOR_DISPLAY

  This routine returns the identifier  of  the  most  recently  pasted

  virtual display that contains the cursor.



     Format:



       SMG$FIND_CURSOR_DISPLAY  pasteboard-id ,returned-display-id



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard (physical screen) in which the cursor is to

  be  found.   The pasteboard-id argument is the address of a longword

  that contains the pasteboard identifier.  Pasteboard-id is  returned

  by SMG$CREATE_PASTEBOARD.



  returned-display-id



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Receives the identifier of the  display  in  which  the  cursor  was

  found.   The  returned-display-id  argument  is  the  address  of  a

  longword into which is written the display identifier.

3 SMG$FLUSH_BUFFER

  This routine flushes all buffered output to the terminal.



     Format:



       SMG$FLUSH_BUFFER  pasteboard-id



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard to be flushed.  The pasteboard-id  argument

  is  the address of an unsigned longword that contains the pasteboard

  identifier.  Pasteboard-id is returned by SMG$CREATE_PASTEBOARD.

3 SMG$GET_BROADCAST_MESSAGE

  This routine determines whether a message has been broadcast to  the

  pasteboard and returns the message.



     Format:



       SMG$GET_BROADCAST_MESSAGE  pasteboard-id [,message]

                  [,message-length]



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the terminal to be checked for the presence of a broadcast

  message.   The  pasteboard-id argument is the address of an unsigned

  longword that contains the pasteboard identifier.  Pasteboard-id  is

  returned by SMG$CREATE_PASTEBOARD.



  message



  type: character string

  access: write only

  mechanism: by descriptor



  A string that receives the broadcast message, if such

  a message is available.

  The message argument is the address of a descriptor that points to 

  the storage into which the message text is written. 

  If this argument is omitted, the broadcast message is discarded.



  message-length



  type: word integer (signed)

  access: write only

  mechanism: by reference



  Receives  the  actual  length  of  the   broadcast   message.    The

  message-length  argument  is  the  address  of  a word into which is

  written the length of the message.

3 SMG$GET_CHAR_AT_PHYSICAL_CURSOR

  This routine returns the character at the  current  physical  cursor

  position.



     Format:



       SMG$GET_CHAR_AT_PHYSICAL_CURSOR  pasteboard-id ,character



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard on which to retrieve  the  character.   The

  pasteboard-id  argument  is  the address of a longword that contains

  the pasteboard identifier.



  character



  type: byte (unsigned)

  access: write only

  mechanism: by reference



  Returned character code.  The character argument is the  address  of

  an unsigned byte into which is written the character's ASCII code.

3 SMG$GET_DISPLAY_ATTR

  This routine returns attributes associated with a virtual display.



     Format:



       SMG$GET_DISPLAY_ATTR  display-id ,height ,width

                  [,display-attributes] [,video-attributes]

                  [,char-set]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display for which information

  is requested.

  The display-id argument is the address of an unsigned longword that

  contains 

  the display identifier.

  Display-id is returned by SMG$CREATE_VIRTUAL_DISPLAY.



  height



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Receives the number of rows in the display.  The height argument  is

  the  address  of  a signed longword integer into which the height is

  written.



  width



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Receives the number of columns in the display.  The  width  argument

  is  the  address  of a signed longword integer into which is written

  the number of columns in the display.



  display-attributes



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Receives  the  current  default  display  attributes  (for  example,

  SMG$M_BORDER).  The display-attributes argument is the address of an

  unsigned longword into which  the  current  display  attributes  are

  written.



  video-attributes



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Receives the current default video attributes.  The video-attributes

  argument  is  the  address  of  an  unsigned longword into which the

  current video attributes are written.



  char-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the default character set for all  text  in  this  virtual

  display.   The  char-set  argument  is  the  address  of an unsigned

  longword that specifies the character set.  At this time,  the  only

  valid value is SMG$C_ASCII, which is also the default.

3 SMG$GET_KEY_DEF

  This routine returns the key definition for a specified key.



     Format:



       SMG$GET_KEY_DEF  key-table-id ,key-name [,if-state]

                  [,attributes] [,equiv-string] [,state-string]



     Arguments:



  key-table-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the key table from which you are extracting a  definition.

  The  key-table-id  argument  is  the address of an unsigned longword

  that contains the key table identifier.  Key-table-id is returned by

  SMG$CREATE_KEY_TABLE.



  key-name



  type: character string

  access: read only

  mechanism: by descriptor



  Specifies the name of the key associated with the  definition.   The

  key-name argument is the address of a descriptor pointing to the key

  name.



  if-state



  type: character string

  access: read only

  mechanism: by descriptor



  Specifies the current state name in effect after the key is pressed.

  The if-state argument is the address of a descriptor pointing to the

  state name.



  attributes



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Receives the  attributes  bitmask  for  this  key  definition.   The

  attributes  argument  is  the  address  of  a longword into which is

  written the bitmask describing the key's attributes.



  equiv-string



  type: character string

  access: write only

  mechanism: by descriptor



  Receives the  equivalence  string  for  this  key  definition.   The

  equiv-string argument is the address of a descriptor pointing to the

  storage into which is written the equivalence string.



  state-string



  type: character string

  access: write only

  mechanism: by descriptor



  Receives the new state name, if  any,  which  is  set  by  this  key

  definition.    The   state-string  argument  is  the  address  of  a

  descriptor pointing to the storage into which  is  written  the  new

  state string.

3 SMG$GET_PASTEBOARD_ATTRIBUTES

  This routine gets pasteboard  attributes  and  stores  them  in  the

  pasteboard information table.



     Format:



       SMG$GET_PASTEBOARD_ATTRIBUTES  pasteboard-id ,pb-info-table

                  ,pb-info-table-size



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard for which information  is  requested.   The

  pasteboard-id  argument  is the address of an unsigned longword that

  contains the pasteboard identifier.



  pb-info-table



  type: byte (unsigned)

  access: write only

  mechanism: by reference, array reference 



  Receives the pasteboard attributes.  The pb-info-table  argument  is

  the  address of an array of unsigned bytes into which is written the

  pasteboard attributes.



  pb-info-table-size



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies  the  number  of  bytes   in   the   pb-info-table.    The

  pb-info-table-size  argument  is the address of an unsigned longword

  that contains the size (in bytes) of the pb-info-table.

3 SMG$GET_TERM_DATA

  This  routine  accesses  TERMTABLE.EXE  and  returns  the  character

  sequence  that  causes a non-DIGITAL terminal to perform a specified

  operation.



     Format:



       SMG$GET_TERM_DATA  termtable-address ,request-code

                  ,max-buffer-length ,return-length ,buffer-address

                  [,input-argument-vector] 



     Arguments:



  termtable-address



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the  address  of  the  TERMTABLE  entry  for  the  desired

  terminal.   The  termtable-address  argument  is  the  address of an

  unsigned  longword  that   contains   the   address   of   TERMTABLE

  information.



  request-code



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Longword constant of the form SMG$K_code, where code is the name  of

  the  desired  capability  field.   The  request-code argument is the

  address of an unsigned longword that contains the request code.



  max-buffer-length



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Maximum length of the buffer into  which  the  requested  capability

  data is written.  The max-buffer-length argument is the address of a

  signed longword integer that contains the maximum  number  of  bytes

  that can be written into the buffer.



  return-length



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Receives the number of bytes actually written into the buffer.   The

  return-length  argument  is the address of a signed longword integer

  into which is written the  number  of  bytes  transferred  into  the

  buffer.



  buffer-address



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Address of the first byte of the buffer  which  is  to  receive  the

  capability   data.   The  buffer-address  argument  is  an  unsigned

  longword that contains the address of the buffer.



  input-argument-vector



  type: longword (unsigned)

  access: read only

  mechanism: by reference, array reference



  Address of a list of longwords used for capabilities that require  a

  variable   number   of   arguments,   and  for  those  that  require

  substitution  or  arithmetic  operations  on   an   argument.    The

  input-argument-vector  argument  is  the  address  of  an  array  of

  unsigned longwords that contains capability  arguments.   The  first

  longword must contain the number of arguments that follow.

3 SMG$HOME_CURSOR

  This routine moves the cursor to the specified corner of  a  virtual

  display.



     Format:



       SMG$HOME_CURSOR  display-id [,position]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display in which the  cursor  is  moved.   The

  display-id  argument  is the address of a longword that contains the

  display     identifier.      Display-id     is      returned      by

  SMG$CREATE_VIRTUAL_DISPLAY.



  position



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the  point  to  which  the  cursor  moves.   The  position

  argument  is  the  address  of a longword that contains the position

  code.

3 SMG$INIT_TERM_TABLE

  SMG$INIT_TERM_TABLE  initializes  the  TERMTABLE  database  for  the

  (non-DIGITAL)   terminal   named,   so   that  subsequent  calls  to

  SMG$GET_TERM_DATA can extract information and  command  strings  for

  that terminal.



     Format:



       SMG$INIT_TERM_TABLE  terminal-name, term-entry-address



     Arguments:



  terminal-name



  type: character string

  access: read only

  mechanism: by descriptor



  Specifies the name of the terminal.  The terminal-name  argument  is

  the address of a descriptor pointing to the terminal name.  The name

  must be an entry in TERMTABLE.EXE



  term-entry-address



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Address  of  the  entry  for  a  particular  type  of  terminal   in

  TERMTABLE.EXE.   The termtable-address argument is the address of an

  unsigned  longword  that   contains   the   address   of   TERMTABLE

  information.

3 SMG$INIT_TERM_TABLE_BY_TYPE

  SMG$INIT_TERM_TABLE_BY_TYPE initializes the TERMTABLE  database  for

  the  (non-DIGITAL)  terminal  named,  so  that  subsequent  calls to

  SMG$GET_TERM_DATA can extract information and  command  strings  for

  that terminal.



     Format:         SMG$INIT_TERM_TABLE_BY_TYPE         terminal-type

  ,term-entry-address [,terminal-name]



     Arguments:



  terminal-type



  type: byte integer (signed)

  access: read only

  mechanism: by reference



  The device type of the terminal, as designated  by  a  VMS  symbolic

  terminal  type or by another value returned by the SYS$GETDVI system

  service.  The terminal-type argument is the address of a signed byte

  integer that contains the terminal type.



  term-entry-address



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Address  of  the  entry  for  a  particular  type  of  terminal   in

  TERMTABLE.EXE.  The term-entry-address argument is the address of an

  unsigned longword into which is written the address  of  a  terminal

  entry.



  terminal-name



  type: character string

  access: write only

  mechanism: by descriptor



  A string into which is written the terminal name associated with the

  device  type.   The  terminal-name  argument  is  the  address  of a

  descriptor pointing to the storage into which the terminal  name  is

  written.

3 SMG$INSERT_CHARS

  This routine inserts characters into a virtual display.



     Format:



       SMG$INSERT_CHARS  display-id ,string ,row ,column

                  [,rendition-set] [,rendition-complement] [,char-set]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display affected.  The pasteboard-id  argument

  is  the address of an unsigned longword that contains the pasteboard

  identifier.  Display-id is returned by SMG$CREATE_VIRTUAL_DISPLAY.



  string



  type: character string

  access: read only

  mechanism: by descriptor



  The character string to be inserted.  The  string  argument  is  the

  address of a descriptor that points to the string to be inserted.



  row



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  The row position at which to begin the insertion.  The row  argument

  is  the  address  of a signed longword integer that contains the row

  number.



  column



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  The column position at which to begin  the  insertion.   The  column

  argument  is  the address of a signed longword integer that contains

  the column number.



  rendition-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  A mask which denotes video attributes for the  characters  inserted.

  The  rendition-set  argument  is the address of an unsigned longword

  that contains a video attributes mask.  Each bit attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.



  rendition-complement



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  A mask which denotes video attributes for the  characters  inserted.

  The  rendition-complement  argument  is  the  address of an unsigned

  longword that contains a video attributes mask.  Each bit  attribute

  in this argument causes the corresponding attribute to be set in the

  display.  Video attributes which can be manipulated in  this  manner

  are the same as for the rendition-set argument.



  char-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the default character set for all  text  in  this  virtual

  display.   The  char-set  argument  is  the  address  of an unsigned

  longword that contains the character set code.  At  this  time,  the

  only valid value is SMG$C_ASCII, which is also the default.

3 SMG$INSERT_LINE

  This routine inserts a line into a virtual display and  scrolls  the

  display.



     Format:



       SMG$INSERT_LINE  display-id ,line-number [,string] [,direction]

                  [,rendition-set] [,rendition-complement]

                  [,wrap-flag] [,char-set]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display affected.  The display-id argument  is

  the  address  of  an  unsigned  longword  that  contains the display

  identifier.       <P      Display-id      is       returned       by

  SMG$CREATE_VIRTUAL_DISPLAY.



  line-number



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the line number at which the string  is  inserted  and  at

  which  point  scrolling  begins.   The  line-number  argument is the

  address of a signed longword integer that contains the line number.



  string



  type: character string

  access: read only

  mechanism: by descriptor



  The character string to be inserted by SMG$INSERT_LINE.  The  string

  argument is the address of a descriptor pointing to this string.



  direction



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the scrolling direction.  The direction  argument  is  the

  address  of  a  longword  that  contains  the direction code.  Valid

  values are SMG$M_UP and SMG$M_DOWN.  SMG$M_UP is the default.



  rendition-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which  denotes  video  attributes  for  the  drawn  line.   The

  rendition-set  argument  is the address of an unsigned longword that

  contains a video  attributes  mask.   Each  bit  attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.



  rendition-complement



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which  denotes  video  attributes  for  the  line  drawn.   The

  rendition-complement argument is the address of an unsigned longword

  that contains a video attributes mask.



  wrap-flag



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the action to take if the text does not fit on  the  line.

  The  wrap-flag  argument is the address of am unsigned longword that

  contains the flag.  0  specifies  no  wrap  (the  default)  while  1

  specifies wrap.



  char-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the default character set for all  text  in  this  virtual

  display.   The  char-set  argument is the address of a longword that

  contains the character set code.  At this time, the only valid value

  is SMG$C_ASCII, which is also the default.

3 SMG$INVALIDATE_DISPLAY

  This routine marks a  display  as  invalid  and  causes  the  entire

  display  to  be redrawn the next time the Screen Management Facility

  writes data to the display.



     Format:



       SMG$INVALIDATE_DISPLAY  display-id



     Argument



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display affected.  The display-id argument  is

  the  address  of  an  unsigned  longword  that  contains the display

  identifier.

3 SMG$LABEL_BORDER

  This routine supplies a label for a virtual display's border.



     Format:



       SMG$LABEL_BORDER  display-id [,label-text] [,position] [,units]

                  [,rendition_set] [,rendition-complement] [,char-set]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display affected.  The display-id argument  is

  the  address  of  an  unsigned  longword  that  contains the display

  identifier.



  label-text



  type: character string

  access: read only

  mechanism: by descriptor



  The new label for this display's border.  The label-text argument is

  the address of a descriptor pointing to the label text.  If omitted,

  the display becomes unlabeled.



  position



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies which of the display's borders contains  the  label.   The

  position  argument  is  the  address  of  an  unsigned longword that

  contains the position code.



  units



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the character position at which the  label  begins  within

  the  border.  The units argument is the address of a signed longword

  integer that contains the character position.  If omitted, the label

  is centered in the specified border.



  rendition-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which  denotes  video  attributes  for  the  drawn  line.   The

  rendition-set  argument  is the address of an unsigned longword that

  contains a video  attributes  mask.   Each  bit  attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.



  rendition-complement



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  A mask which denotes video  attributes  for  the  line  drawn.   The

  rendition-complement argument is the address of an unsigned longword

  that contains a video attributes mask.  Each bit attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.  Video attributes which can be manipulated in  this  manner

  are the same as for the rendition-set argument.



  char-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the default character set for all  text  in  this  virtual

  display.   The  char-set  argument  is  the  address  of an unsigned

  longword that contains the character set code.  At  this  time,  the

  only valid value is SMG$C_ASCII, which is also the default.

3 SMG$LIST_KEY_DEFS

  This routine returns the definition (equivalence string)  associated

  with a specified key in a specified key table.



     Format:   SMG$LIST_KEY_DEFS  key-table-id  ,context   [,key-name]

  [,if-state] [,attributes] [,equiv-string] [,state-string]



     Arguments:



  key-table-id



  type: longword (unsigned)

  access: read-only

  mechanism: by reference



  Specifies the  key  table  from  which  you  are  extracting  a  key

  definition.  The key-table-id argument is the address of an unsigned

  longword that contains the key table identifier.



  context



  type: longword integer (signed)

  access: modify

  mechanism: by reference



  Provides a means to extract a series of key definitions from  a  key

  table.   The  context  argument  is the address of a signed longword

  integer that contains the context variable.  For the first  call  to

  this routine, you should set the context argument to zero.



  key-name



  type: character string

  access: read only

  mechanism: by descriptor



  Identifies the key  whose  value  you  are  listing.   The  key-name

  argument is the address of a descriptor pointing to the key name.



  if-state



  type: character string

  access: write only

  mechanism: by descriptor



  Receives the state name which qualifies the next definition  in  the

  key  table.   The  if-state  argument is the address of a descriptor

  pointing to the storage into which the state name is written.



  attributes



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Attributes of this key definition.  The attributes argument  is  the

  address  of  an  unsigned  longword  into  which  is written the key

  attributes.



  equiv-string



  type: character string

  access: write only

  mechanism: by descriptor



  The character string into which is written  the  equivalence  string

  for  the  next  key  definition.   The  equiv-string argument is the

  address of a descriptor pointing  to  the  storage  into  which  the

  equivalence string is written.



  state-string



  type: character string

  access: write only

  mechanism: by descriptor



  A string into which is written the new state name, if any, which  is

  set  by  the  next key definition.  The state-string argument is the

  address of a descriptor pointing to the storage into which the state

  name  is  written.   If  this  key  definition  sets  a  state,  the

  attributes flag SMG$V_KEY_SETSTATE is set.

3 SMG$LOAD_KEY_DEFS

  This routine loads a file of key  definition  (DEFINE/KEY  commands)

  into a specified key table.



     Format:



       SMG$LOAD_KEY_DEFS  key-table-id ,filespec [,default-filespec]

                  [,lognam-flag]



     Arguments:



  key-table-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the key table into which you are loading key  definitions.

  The  key-table-id  argument  is  the address of an unsigned longword

  that contains the key table identifier.



  filespec



  type: character string

  access: read only

  mechanism: by descriptor



  String containing the file specification for the file of  DEFINE/KEY

  commands.   The  filespec  argument  is  the address of a descriptor

  pointing to the file specification.



  default-filespec



  type: character string

  access: read only

  mechanism: by descriptor



  String containing the default file specification  for  the  file  of

  DEFINE/KEY  commands.   The default-filespec argument is the address

  of a descriptor pointing to  the  default  file  specification.   If

  omitted, the null string is used.



  lognam-flag



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies whether filespec is to be treated as a logical name.   The

  lognam-flag  argument  is  the  address of an unsigned longword that

  contains the flag.  If  set,  lognam-flag  specifies  that  filespec

  should  be  translated,  and  if this is not possible, that the null

  string be used.

3 SMG$MOVE_VIRTUAL_DISPLAY

  This routine  relocates  a  virtual  display  on  a  pasteboard  and

  preserves the pasting order.



     Format:



       SMG$MOVE_VIRTUAL_DISPLAY  display-id ,pasteboard-id

                  ,pasteboard-row ,pasteboard-column



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display to be moved.  The display-id  argument

  is  the  address  of  an unsigned longword that contains the display

  identifier.



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard on which the movement  is  to  take  place.

  The  pasteboard-id  argument  is the address of an unsigned longword

  that contains the pasteboard identifier.



  pasteboard-row



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the row of the pasteboard which is to contain row 1 of the

  specified  virtual  display.   The  pasteboard-row  argument  is the

  address of a signed longword integer that contains the row number.



  pasteboard-column



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column of the pasteboard which is to contain column  1

  of the specified virtual display.  The pasteboard-column argument is

  the address of a signed longword integer that  contains  the  column

  number.

3 SMG$PASTE_VIRTUAL_DISPLAY

  This routine pastes a virtual display to a pasteboard.



     Format:



       SMG$PASTE_VIRTUAL_DISPLAY  display-id ,pasteboard-id

                  ,pasteboard-row ,pasteboard-column



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display to be pasted.  The display-id argument

  is  the  address  of  an unsigned longword that contains the display

  identifier.



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard to which the display is to be pasted.   The

  pasteboard-id  argument  is the address of an unsigned longword that

  contains the pasteboard identifier.



  pasteboard-row



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the row of the pasteboard which is to contain row 1 of the

  specified  virtual  display.   The  pasteboard-row  argument  is the

  address of a signed longword integer that contains the row number.



  pasteboard-column



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column of the pasteboard which is to contain column  1

  of the specified virtual display.  The pasteboard-column argument is

  the address of a signed longword integer that  contains  the  column

  number.

3 SMG$POP_VIRTUAL_DISPLAY

  This routine deletes a specified virtual display  and  all  displays

  that  were  pasted  on  the specified pasteboard after the specified

  virtual display.



     Format:



       SMG$POP_VIRTUAL_DISPLAY  display-id ,pasteboard-id



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the lowest (first) virtual display  to  be  deleted.   The

  display-id  argument  is  the  address  of an unsigned longword that

  contains the display identifier.  All displays that  are  higher  in

  the  pasting order (that is, all displays that were pasted after the

  specified display) are deleted as well.



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard on which the display deletions take  place.

  The  pasteboard-id  argument  is the address of an unsigned longword

  that contains the pasteboard identifier.

3 SMG$PUT_CHARS

  This routine overwrites characters in a  virtual  display  with  the

  text you specify.



     Format:



       SMG$PUT_CHARS  display-id ,text [,line-number] [,column-number]

                  [,erase-flag] [,rendition-set]

                  [,rendition-complement] [,char-set]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display affected.  The display-id argument  is

  the  address  of  an  unsigned  longword  that  contains the display

  identifier.



  text



  type: character string

  access: read only

  mechanism: by descriptor



  Characters to be written to the virtual display.  The text  argument

  is the address of a descriptor pointing to the character string.



  line-number



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the line  at  which  output  begins.   If  line-number  is

  omitted,  output  begins  on  the  current  line.   The  line-number

  argument is the address of a signed longword integer  that  contains

  the line number.



  column-number



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column at which output begins.   If  column-number  is

  omitted,  output  begins  on  the current column.  The column-number

  argument is the address of a signed longword integer  that  contains

  the column number.



  erase-flag



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies whether to erase the line  before  writing  the  specified

  text.   The  erase-flag  argument  is  the  address  of  an unsigned

  longword that contains the flag.  If set, the line will  be  erased.

  The default is not to erase.



  rendition-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which  denotes  video  attributes  for  the  drawn  line.   The

  rendition-set  argument  is the address of an unsigned longword that

  contains a video  attributes  mask.   Each  bit  attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.



  rendition-complement



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which  denotes  video  attributes  for  the  line  drawn.   The

  rendition-complement argument is the address of an unsigned longword

  that contains a video attributes mask.



  char-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the default character set for all  text  in  this  virtual

  display.   The  char-set  argument  is  the  address  of an unsigned

  longword that contains the character set code.  At  this  time,  the

  only  valid  value  is  SMG$C_ASCII,  which  is  also  the  default.

  ENDARGDEFLIST>

3 SMG$PUT_CHARS_HIGHWIDE

  This routine writes  double-height,  double-width  characters  to  a

  virtual display.



     Format:



       SMG$PUT_CHARS_HIGHWIDE  display-id ,text [,line-number]

                  [,column-number] [,rendition-set]

                  [,rendition-complement] [,char-set]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display affected.  The display-id argument  is

  the  address  of  an  unsigned  longword  that  contains the display

  identifier.



  text



  type: character string

  access: read only

  mechanism: by descriptor



  Characters to be written to the virtual display.  The text  argument

  is the address of a descriptor pointing to the text.



  line-number



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the line at which output begins.  The line-number argument

  is  the  address of a signed longword integer that contains the line

  number.  If line-number is omitted or if it is equal to zero, output

  begins on the current line.



  column-number



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column at  which  output  begins.   The  column-number

  argument  is  the address of a signed longword integer that contains

  the column number.  If column-number is omitted or if it is equal to

  zero, output begins on the current column.



  rendition-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which  denotes  video  attributes  for  the  drawn  line.   The

  rendition-set  argument  is the address of an unsigned longword that

  contains a video  attributes  mask.   Each  bit  attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.



  rendition-complement



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which  denotes  video  attributes  for  the  line  drawn.   The

  rendition-complement argument is the address of an unsigned longword

  that contains a video attributes mask.



  char-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the default character set for all  text  in  this  virtual

  display.   The  char-set  argument  is  the  address  of an unsigned

  longword that contains the character set code.  At  this  time,  the

  only valid value is SMG$C_ASCII, which is also the default.

3 SMG$PUT_CHARS_WIDE

  This routine writes double-width characters to a virtual display.



     Format:



       SMG$PUT_CHARS_WIDE  display-id ,text [,line-number]

                  [,column-number] [,rendition-set]

                  [,rendition-complement] [,char-set] 



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display affected.  The display-id argument  is

  the  address  of  an  unsigned  longword  that  contains the display

  identifier.



  text



  type: character string

  access: read only

  mechanism: by descriptor



  Characters to be written to the virtual display.  The text  argument

  is the address of a descriptor pointing to the text.



  line-number



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the line  at  which  output  begins.   If  line-number  is

  omitted,  output  begins  on  the  current  line.   The  line-number

  argument is the address of a signed longword integer  that  contains

  the line number.



  column-number



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column at which output begins.   If  column-number  is

  omitted,  output  begins  on  the current column.  The column-number

  argument is the address of a signed longword integer  that  contains

  the column number.



  rendition-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which  denotes  video  attributes  for  the  drawn  line.   The

  rendition-set  argument  is the address of an unsigned longword that

  contains a video  attributes  mask.   Each  bit  attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.



  rendition-complement



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which  denotes  video  attributes  for  the  line  drawn.   The

  rendition-complement argument is the address of an unsigned longword

  that contains a video attributes mask.  Each bit attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.  Video attributes which can be manipulated in  this  manner

  are the same as for the rendition-set argument.



  char-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the default character set for all  text  in  this  virtual

  display.   The  char-set  argument  is  the  address  of an unsigned

  longword that contains the character set code.  At  this  time,  the

  only valid value is SMG$C_ASCII, which is also the default.

3 SMG$PUT_VIRTUAL_DISPLAY_ENCODED

  This routine lets  you  write  a  string  that  has  multiple  video

  renditions to a virtual display.



     Format:



       SMG$PUT_VIRTUAL_DISPLAY_ENCODED  display-id ,encoded-length

                  ,encoded-text [,line-number] [,column-number]

                  [,wrap-flag] [,char-set]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display affected.  The display-id argument  is

  the  address  of a signed longword integer that contains the display

  identifier.



  encoded-length



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Length of the encoded string.  The encoded-length  argument  is  the

  address  of  an  unsigned  longword  that contains the length of the

  encoded string.



  encoded-text



  type: unspecified

  access: read only

  mechanism: by reference



  A data structure or record passed by  reference.   The  encoded-text

  argument is the address of the data.



  line-number



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the line at which output begins.  The line-number argument

  is  the  address of a signed longword integer that contains the line

  number.  If line-number is omitted or if it is equal to zero, output

  begins on the current line.



  column-number



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column at  which  output  begins.   The  column-number

  argument  is  the address of a signed longword integer that contains

  the column number.  If column-number is omitted or if it is equal to

  zero, output begins on the current column.



  wrap-flag



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the action to take if the text does not fit on  the  line.

  The  wrap-flag  argument is the address of an unsigned longword that

  contains the flag.  0  specifies  no  wrap  (the  default)  while  1

  specifies wrap.



  char-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the default character set for all  text  in  this  virtual

  display.   The  char-set  argument  is  the  address  of an unsigned

  longword that contains the character set code.  At  this  time,  the

  only valid value is SMG$C_ASCII, which is also the default.

3 SMG$PUT_LINE

  This routine writes a line of text to a virtual display.



     Format:



       SMG$PUT_LINE  display-id ,text [,line-advance] [,rendition-set]

                  [,rendition-complement] [,wrap-flag] [char-set]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display affected.  The display-id argument  is

  the  address  of  an  unsigned  longword  that  contains the display

  identifier.



  text



  type: character string

  access: read only

  mechanism: by descriptor



  The characters to be written  to  the  virtual  display.   The  text

  argument is the address of a descriptor pointing to the text.



  line-advance



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies  the  number  of  lines  to  advance  after  output.   The

  line-advance  argument  is  the address of a signed longword integer

  that contains the number of lines to advance.



  rendition-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  A mask which denotes video  attributes  for  the  drawn  line.   The

  rendition-set  argument  is the address of an unsigned longword that

  contains a video  attributes  mask.   Each  bit  attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.



  rendition-complement



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  A mask which denotes video  attributes  for  the  line  drawn.   The

  rendition-complement argument is the address of an unsigned longword

  that contains a video attributes mask.  Each bit attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.  Video attributes which can be manipulated in  this  manner

  are the same as for the rendition-set argument.



  wrap-flag



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the action to take if the text does not fit on  the  line.

  The  wrap-flag  argument is the address of an unsigned longword that

  contains the flag.  0  specifies  no  wrap  (the  default)  while  1

  specifies wrap.



  char-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the default character set for all  text  in  this  virtual

  display.   The  char-set  argument  is  the  address  of an unsigned

  longword that contains the character set code.  At  this  time,  the

  only valid value is SMG$C_ASCII, which is also the default.

3 SMG$PUT_LINE_WIDE

  This routine writes  a  line  of  double-width  text  to  a  virtual

  display.



     Format:



       SMG$PUT_LINE  display-id ,text [,line-advance] [,rendition-set]

                  [,rendition-complement] [,wrap-flag] [char-set]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display affected.  The display-id argument  is

  the  address  of  an  unsigned  longword  that  contains the display

  identifier.



  text



  type: character string

  access: read only

  mechanism: by descriptor



  Characters to be written to the virtual display.  The text  argument

  is the address of a descriptor pointing to the text.



  line-advance



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies  the  number  of  lines  to  advance  after  output.   The

  line-advance  argument  is  the address of a signed longword integer

  that contains the number of lines to advance.



  rendition-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which  denotes  video  attributes  for  the  drawn  line.   The

  rendition-set  argument  is the address of an unsigned longword that

  contains a video  attributes  mask.   Each  bit  attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.



  rendition-complement



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which  denotes  video  attributes  for  the  line  drawn.   The

  rendition-complement argument is the address of an unsigned longword

  that contains a video attributes mask.



  wrap-flag



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the action to take if the text does not fit on  the  line.

  The  wrap-flag  argument is the address of an unsigned longword that

  contains the flag.  0  specifies  no  wrap  (the  default)  while  1

  specifies wrap.



  char-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the default character set for all  text  in  this  virtual

  display.   The  char-set  argument  is  the  address  of an unsigned

  longword that contains the character set code.  At  this  time,  the

  only valid value is SMG$C_ASCII, which is also the default.

3 SMG$PUT_WITH_SCROLL

  This routine writes a line of text to a virtual display and  scrolls

  the display if necessary.



     Format:



       SMG$PUT_WITH_SCROLL  display-id [,text] [,direction]

                  [,rendition-set] [,rendition-complement]

                  [,wrap-flag] [,char-set] 



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display affected.  The display-id argument  is

  the  address  of  an  unsigned  longword  that  contains the display

  identifier.



  text



  type: character string

  access: read only

  mechanism: by descriptor



  The text to be displayed.  The text argument is  the  address  of  a

  descriptor pointing to the text.



  direction



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the direction to scroll, if scrolling is  necessary.   The

  direction  argument  is  the  address  of  an unsigned longword that

  contains  the  direction  code.   Valid  values  are  SMG$M_UP   and

  SMG$M_DOWN.  SMG$M_UP is the default.



  rendition-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which  denotes  video  attributes  for  the  drawn  line.   The

  rendition-set  argument  is the address of an unsigned longword that

  contains a video  attributes  mask.   Each  bit  attribute  in  this

  argument  causes  the  corresponding  attribute  to  be  set  in the

  display.



  rendition-complement



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Mask which  denotes  video  attributes  for  the  line  drawn.   The

  rendition-complement argument is the address of an unsigned longword

  that contains a video attributes mask.



  wrap-flag



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the action to take if the text does not fit on  the  line.

  The  wrap-flag  argument is the address of an unsigned longword that

  contains the flag.  0  specifies  no  wrap  (the  default)  while  1

  specifies wrap.



  char-set



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the default character set for all  text  in  this  virtual

  display.   The  char-set  argument  is  the  address  of an unsigned

  longword that contains the character set code.  At  this  time,  the

  only valid value is SMG$C_ASCII, which is also the default.

3 SMG$READ_COMPOSED_LINE

  This routine reads a line of input composed of normal keystrokes and

  equivalence strings.



     Format:



       SMG$READ_COMPOSED_LINE  keyboard-id ,key-table-id

                  ,received-text

                  [,prompt-string] [,received-string-length]

                  [,display-id]



     Arguments:



  keyboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual keyboard from which input is to be read.   The

  keyboard-id  argument  is  the  address of an unsigned longword that

  contains the keyboard identifier.



  key-table-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the key table to be used for translating keystrokes.   The

  key-table-id  argument  is  the address of an unsigned longword that

  contains the key table identifier.



  received-text



  type: character string

  access: write only

  mechanism: by descriptor



  String into which  is  written  the  complete  composed  line.   The

  received-text  argument  is  the address of a descriptor pointing to

  the storage in which the composed line is written.



  prompt-string



  type: character string

  access: read only

  mechanism: by descriptor



  String used to prompt for the  read  operation.   The  prompt-string

  argument  is  the  address  of  a  descriptor pointing to the prompt

  string.



  received-string-length



  type: word (unsigned)

  access: write only

  mechanism: by reference



  Receives the number of characters read  or  the  maximum  length  of

  received-text,   whichever   is  less.   The  received-string-length

  argument is the address  of  an  unsigned  longword  into  which  is

  written the number of characters read.



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Points to the same physical device as keyboard-id.   The  display-id

  argument  is  the  address of an unsigned longword that contains the

  display identifier.  Thus this argument is optional only if you  are

  not using the Screen Management Facility's output routines.

3 SMG$READ_FROM_DISPLAY

  This routine reads a line of text from a virtual display.



     Format:



       SMG$READ_FROM_DISPLAY  display-id ,returned-string

                  [,terminator-string]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies  the  virtual  display  from  which  text  is  read.   The

  display-id  argument  is  the  address  of an unsigned longword that

  contains the display identifier.



  returned-string



  type: character string

  access: write only

  mechanism: by descriptor



  String into which the information read from the virtual  display  is

  returned.    The  returned-string  argument  is  the  address  of  a

  descriptor pointing to the storage into which the string is written.



  terminator-string



  type: character string

  access: read only

  mechanism: by descriptor



  String containing a terminator or terminators that end the  backward

  search,  thus  determining  the  starting  position  of the returned

  string.   The  terminator-string  argument  is  the  address  of   a

  descriptor  pointing  to  the string of terminators.  If omitted, no

  back searching is performed; the returned  string  starts  with  the

  character at the current cursor position.

3 SMG$READ_STRING

  This routine reads a string from a virtual keyboard.



     Format:



       SMG$READ_STRING  keyboard-id ,received-text [,prompt-string]

                  [,max-length] [,modifiers] [,timeout]

                  [,terminator-set]

                  [,received-string-length] [,terminator-code]

                  [,display-id]



     Arguments:



  keyboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual keyboard from which input is to be read.   The

  keyboard-id  argument  is  the  address of an unsigned longword that

  contains the keyboard identifier.



  received-text



  type: character string

  access: write only

  mechanism: by descriptor



  String into which the input  line  is  written.   The  received-text

  argument is the address of a descriptor pointing to the storage into

  which the text is written.



  prompt-string



  type: character string

  access: read only

  mechanism: by descriptor



  String used to prompt for the read operation.  The  prompt  argument

  is the address of a descriptor pointing to the prompt string.



  max-length



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies  the  maximum  number  of  characters  to  be  read.   The

  max-length argument is the address of a signed longword integer that

  contains the maximum number of characters to be read.   The  maximum

  valid  value  for  this  argument  is  512.   If omitted, 512 is the

  default.



  modifiers



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Bit mask that specifies optional behavior.  The  modifiers  argument

  is the address of an unsigned longword that contains the bit mask.



  timeout



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the number of seconds allowed between the time the  prompt

  is  issued  and  the completion of the input operation.  The timeout

  argument is the address of a signed longword integer  that  contains

  the number of seconds.



  terminator-set



  type: character string

  access: read only

  mechanism: by descriptor, fixed length



  Either a mask that specifies which characters are to be  treated  as

  terminators  (short  form)  or  a descriptor pointing to such a mask

  (long form).  The  terminator-set  argument  is  the  address  of  a

  descriptor pointing to the mask.



  received-string-length



  type: word (unsigned)

  access: write only

  mechanism: by reference



  Receives the number of  characters  read  or  the  maximum  size  of

  received-text,   whichever   is  less.   The  received-string-length

  argument is the address of an unsigned word into  which  is  written

  the number of characters or the maximum size.



  terminator-code



  type: word (unsigned)

  access: read only

  mechanism: by reference



  Receives  a  code  that  indicates  which  character  or   keystroke

  terminated  the read operation.  The terminator-code argument is the

  address of an unsigned word that contains the code.



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Points to the same physical device as keyboard-id.   The  display-id

  argument  is  the  address of an unsigned longword that contains the

  display identifier.

3 SMG$REPAINT_SCREEN

  This routine repaints the  current  screen  after  non-SMG  I/O  has

  occurred.



     Format:



       SMG$REPAINT_SCREEN  pasteboard-id



     ARGUMENT



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the terminal screen to be  repainted.   The  pasteboard-id

  argument  is  the  address of an unsigned longword that contains the

  pasteboard identifier.

3 SMG$REPASTE_VIRTUAL_DISPLAY

  This routine moves a virtual  display  to  a  new  position  on  the

  pasteboard.  The pasting order is not preserved.



     Format:



       SMG$REPASTE_VIRTUAL_DISPLAY  display-id ,pasteboard-id ,pb-row

                  ,pb-column



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the  virtual  display  to  be  repasted.   The  display-id

  argument  is  the  address of an unsigned longword that contains the

  display identifier.



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard on which  the  display  is  repasted.   The

  pasteboard-id  argument  is the address of an unsigned longword that

  contains the pasteboard identifier.



  pb-row



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the pasteboard row which  is  to  contain  row  1  of  the

  specified  virtual display.  The pb-row argument is the address of a

  signed word integer which contains the pasteboard row.



  pb-column



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the pasteboard column which is to contain column 1 of  the

  specified virtual display.  The pb-column argument is the address of

  a signed longword integer which contains the pasteboard column.

3 SMG$RESTORE_PHYSICAL_SCREEN

  This routine rewrites the screen image as it was  at  the  time  the

  SMG$SAVE_PHYSICAL_SCREEN routine was called.



     Format:



       SMG$RESTORE_PHYSICAL_SCREEN  pasteboard-id ,saved-display-id



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the physical screen to  be  restored.   The  pasteboard-id

  argument  is  the  address of an unsigned longword that contains the

  pasteboard identifier.



  saved-display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies     the     virtual     display     created     by     the

  SMG$SAVE_PHYSICAL_SCREEN  routine.  The saved-display-id argument is

  the address of  an  unsigned  longword  that  contains  the  display

  identifier.

3 SMG$RETURN_CURSOR_POS

  This routine returns the current  cursor  position  in  a  specified

  virtual display.



     Format:



       SMG$RETURN_CURSOR_POS  display-id ,row-number ,column-number



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display whose current cursor position you  are

  requesting.   The  display-id argument is the address of an unsigned

  longword  that  contains  the  display  identifier.   Display-id  is

  returned by SMG$CREATE_VIRTUAL_DISPLAY.



  row-number



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Receives the cursor's current  row  position  within  the  specified

  virtual  display.   The  row-number  argument  is  the address of an

  unsigned longword into which is written the current row position.



  column-number



  type: longword (signed)

  access: write only

  mechanism: by reference



  Receives the cursor's current column position within  the  specified

  virtual  display.   The  column-number  argument is the address of a

  longword into which is written the current column position.

3 SMG$RING_BELL

  the terminal bell or buzzer)

  This routine sounds the terminal bell or buzzer.



     Format:



       SMG$RING_BELL  display-id [,number-of-times]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display for which the bell or  buzzer  sounds.

  The  display-id argument is the address of an unsigned longword that

  contains the display identifier.



  number-of-times



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the number of times the bell or buzzer  is  sounded.   The

  number-of-times argument is the address of a signed longword integer

  that contains the number of times the bell or buzzer is sounded.  If

  omitted, 1 is used.

3 SMG$SAVE_PHYSICAL_SCREEN

  This routine saves the contents of the screen so that a  later  call

  to SMG$RESTORE_PHYSICAL_SCREEN can restore it.



     Format:



       SMG$SAVE_PHYSICAL_SCREEN  pasteboard-id ,saved-display-id

                  [,desired-row-start] [,desired-row-end]



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the physical screen whose contents are to be  saved.   The

  pasteboard-id  argument  is the address of an unsigned longword that

  contains the pasteboard identifier.



  saved-display-id



  type: longword (unsigned)

  access: write only

  mechanism: by reference



  Receives the display id  of  the  display  created  to  contain  the

  contents  of  the physical screen.  The saved-display-id argument is

  the  address  of  an  unsigned  longword  into  which  the   display

  identifier is written.



  desired-row-start



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the first row to be saved.  The desired-row-start argument

  is  the  address  of a signed longword integer that contains the row

  number.  If omitted, row 1 of the pasteboard is used.



  desired-row-end



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the last row to be saved.  The desired-row-end argument is

  the  address  of  a  signed  longword  integer that contains the row

  number.  If omitted, the last row of the pastboard is used.

3 SMG$SCROLL_DISPLAY_AREA

  This routine scrolls a rectangular region of a virtual display.



     Format:



       SMG$SCROLL_DISPLAY_AREA  display-id [,starting-row

                  ,starting-column] [,height] [,width] [,direction]

                  [,count] 



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display in which scrolling takes  place.   The

  display-id  argument  is  the  address  of an unsigned longword that

  contains the display identifier.



  starting-row



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the first row of the scrolling region.   The  starting-row

  argument  is  the address of a signed longword integer that contains

  the starting row.



  starting-column



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies  the  first  column  of   the   scrolling   region.    The

  starting-column argument is the address of a signed longword integer

  that contains the starting column.



  height



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the number of rows in the scrolling  region.   The  height

  argument  is  the address of a signed longword integer that contains

  the number of rows.



  width



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the number of columns in the scrolling region.  The  width

  argument  is  the address of a signed longword integer that contains

  the number of columns.



  direction



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the direction to scroll.  The direction  argument  is  the

  address of an unsigned longword that contains the direction code.



  count



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the number of lines to scroll.  The count argument is  the

  address  of  a  signed  longword integer that contains the number of

  lines to scroll.  If omitted, one line is scrolled.

3 SMG$SET_BROADCAST_TRAPPING

  This routine enables or disables the trapping of broadcast messages.



     Format:



       SMG$SET_BROADCAST_TRAPPING  pasteboard-id [,AST-routine]

                  [,AST-argument]



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard for  the  terminal  to  be  affected.   The

  pasteboard-id  argument  is the address of an unsigned longword that

  contains the pasteboard identifier.



  AST-routine



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  The address of an AST routine to be called when a 

  new out-of-band control character is typed at the terminal.

  The AST-routine argument is the address of the routine's procedure

  entry mask; that is, the address of the routine itself.

  If you omit this argument, or specify an address of 0, broadcast

  trapping is disabled.



  AST-argument



  type: unspecified

  access: read only

  mechanism: by value



  A value to be passed to the AST routine.  The AST-argument  argument

  the value to be passed to the AST routine.

3 SMG$SET_CURSOR_ABS

  This routine moves the cursor to the specified position in a virtual

  display.



     Format:



       SMG$SET_CURSOR_ABS  display-id [,row] [,column]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display in which to set the  cursor  position.

  The  display-id argument is the address of an unsigned longword that

  contains the display identifier.



  row



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the row position to  which  the  cursor  moves.   The  row

  argument  is  the address of a signed longword integer that contains

  the row number.  If omitted, the cursor remains at the current row.



  column



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the column position to which the cursor moves.  The column

  argument  is  the address of a signed longword integer that contains

  the column number.  If omitted, the cursor remains  at  the  current

  column.

3 SMG$SET_CURSOR_REL

  This routine moves the cursor  the  specified  number  of  rows  and

  columns from the current cursor position in a virtual display.



     Format:



       SMG$SET_CURSOR_REL  display-id [,delta-row] [,delta-column]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display in which  to  move  the  cursor.   The

  display-id  argument  is  the  address  of an unsigned longword that

  contains the display identifier.



  delta-row



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the number of rows to  move  the  cursor.   The  delta-row

  argument  is  the address of a signed longword integer that contains

  the number of rows to move.  If omitted, the cursor remains  at  the

  current  row  position.   If delta-row is positive, the cursor moves

  downward the specified number of rows.  If  delta-row  is  negative,

  the cursor moves upward the specified number of rows.



  delta-column



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies  the  number  of  columns  to  move   the   cursor.    The

  delta-column argument is the address of a longword that contains the

  number of columns to move.  If omitted, the cursor  remains  at  the

  current  column  position.   If delta-column is positive, the cursor

  moves the specified number of columns to the right.  If delta-column

  is negative, the cursor moves the specified number of columns to the

  left.

3 SMG$SET_DEFAULT_STATE

  This routine sets and/or returns the current default state for a key

  table.



     Format:



       SMG$SET_DEFAULT_STATE  key-table-id [,new-state] [,old-state]



     Arguments:



  key-table-id



  type: longword (unsigned)

  access: read-only

  mechanism: by reference



  Specifies the key table in which you are setting or inquiring  about

  a  default  state.   The  key-table-id argument is the address of an

  unsigned longword that contains the key table identifier.



  new-state



  type: character string

  access: read only

  mechanism: by descriptor



  Specifies the new default state  for  the  entire  key  table.   The

  new-state  argument  is  the address of a descriptor pointing to the

  new state string.  The specified state name is  converted  to  upper

  case and stripped of trailing blanks before use.



  old-state



  type: character string

  access: write only

  mechanism: by descriptor



  Receives the existing  default  state  name  of  the  specified  key

  definition  table.   The  old-state  argument  is  the  address of a

  descriptor pointing to the storage into which the old  state  string

  is written.

3 SMG$SET_DISPLAY_SCROLL_REGION

  This routine creates a scrolling region in a virtual display.



     Format:



       SMG$SET_DISPLAY_SCROLL_REGION  display-id [,starting-line]

                  [,ending-line]



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display in which scrolling takes  place.   The

  display-id  argument  is  the  address  of an unsigned longword that

  contains the display identifier.



  starting-line



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the first line of the scrolling region.  The starting-line

  argument  is  the address of a signed longword integer that contains

  the starting line number.  If omitted, the first line of the display

  is used.



  ending-line



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Specifies the last line of the scrolling  region.   The  ending-line

  argument  is  the address of a signed longword integer that contains

  the ending line number.  If omitted, the last line  of  the  virtual

  display is used.

3 SMG$SET_KEYPAD_MODE

  This routine sets the terminal's numeric keypad to either numeric or

  application mode.



     Format:



       SMG$SET_KEYPAD_MODE  keyboard-id ,new-mode



     Arguments:



  keyboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual keyboard whose mode is  to  be  changed.   The

  keyboard-id  argument  is  the  address of an unsigned longword that

  contains the keyboard identifier.



  new-mode



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies whether the keypad is to be  in  applications  or  numeric

  mode.   The new-mode argument is the address of an unsigned longword

  that contains the new mode setting.  If the low-order  bit  is  set,

  the  keypad  is  set to numeric mode; if the low-order bit is clear,

  the keypad is set to applications mode.   All  other  bits  must  be

  zero.

3 SMG$SET_OUT_OF_BAND_ASTS

  This routine either enables or disables the trapping of  out-of-band

  characters.



     Format:



       SMG$SET_OUT_OF_BAND_ASTS  pasteboard-id ,control-char-mask

                  ,AST-routine [,AST-argument]



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the terminal for which out of band characters are  enabled

  or  disabled.   The  pasteboard-id  argument  is  the  address of an

  unsigned  longword  that   contains   the   pasteboard   identifier.

  Pasteboard-id is returned by SMG$CREATE_PASTEBOARD.



  control-char-mask



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies which control characters are to  be  the  new  out-of-band

  control  characters.   The control-char-mask argument is the address

  of an unsigned longword that contains the  mask.   You  create  this

  mask  by  setting  the  bit  which corresponds to the ASCII value of

  desired character.  For example, to  specify  that  <CTRL/A>  (ASCII

  value  1)  is an out-of-band control character, you set bit 1 in the

  control-char-mask.  If no  bits  are  set  in  this  mask,  then  no

  out-of-band ASTs occur.



  AST-routine



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  The address 

  of an AST routine to be called when an

  out-of-band control character is typed at the terminal.

  The AST-routine argument is the address of the routine's procedure

  entry mask; that is, the address of the routine itself.



  AST-argument



  type: longword (unsigned)

  access: read only

  mechanism: by value



  The argument you supply for the AST.  The AST-argument  argument  is

  an unsigned longword that contains the value to be passed to the AST

  routine.  However, the  AST  routine  may  also  need  to  know  the

  out-of-band  character  and the pasteboard-id at which it was typed.

  Therefore, the Screen Management Facility creates  a  three-longword

  structure  to  hold  this information and passes the address of this

  structure as the first argument to  the  AST  routine.   The  Screen

  Management   Facility   stores  the  argument  you  supply  in  this

  structure.

3 SMG$SET_PHYSICAL_CURSOR

  This routine moves the cursor  to  the  specified  position  on  the

  physical screen.



     Format:



       SMG$SET_PHYSICAL_CURSOR  pasteboard-id ,pb-row ,pb-column



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies  the  physical  screen  whose  cursor  is  to  move.   The

  pasteboard-id  argument  is the address of an unsigned longword that

  contains the pasteboard identifier.



  pb-row



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the row to which the cursor moves.  The pb-row argument is

  the address of an unsigned longword that contains the row number.



  pb-column



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the column to  which  the  cursor  moves.   The  pb-column

  argument  is  the  address of an unsigned longword that contains the

  column number.

3 SMG$SNAPSHOT

  This routine writes the current pasteboard buffer  to  the  file  or

  hardcopy terminal specified by pasteboard-id.



     Format:



       SMG$SNAPSHOT  pasteboard-id



     Arguments:



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the file or hardcopy terminal to receive the  contents  of

  the pasteboard buffer.  The pasteboard-id argument is the address of

  an unsigned longword that contains the pasteboard identifier.

3 SMG$TERM_TO_KEYCODE

  This routine translates a terminator sequence to a key code.



     Format:



       SMG$TERM_TO_KEYCODE  terminator ,term-length



     Arguments:



  terminator



  type: character string

  access: write only

  mechanism: by reference



  A 4-byte string containing the terminator sequence.  The  terminator

  argument is the address of a descriptor pointing to the storage into

  which the terminator sequence is written.



  term-length



  type: longword integer (signed)

  access: read only

  mechanism: by value



  The length of the terminator string.  The  term-length  argument  is

  the  address  of a signed longword integer into which is written the

  length of the terminator string.

3 SMG$UNPASTE_VIRTUAL_DISPLAY

  This routine removes a virtual display from a pasteboard.



     Format:



       SMG$UNPASTE_VIRTUAL_DISPLAY  display-id ,pasteboard-id



     Arguments:



  display-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the virtual display to be removed from a pasteboard.   The

  display-id  argument  is  the  address  of an unsigned longword that

  contains the display identifier.



  pasteboard-id



  type: longword (unsigned)

  access: read only

  mechanism: by reference



  Specifies the pasteboard (physical screen) from  which  the  virtual

  display is removed.  The pasteboard-id argument is the address of an

  unsigned longword that contains the pasteboard identifier.

2 STR$
 STR$ Procedures
3 STR$ADD

  STR$ADD adds two decimal strings.



     Format:



       STR$ADD  asign ,aexp ,adigits ,bsign

                  ,bexp ,bdigits ,csign ,cexp ,cdigits 



     Arguments:



  asign



  type: aligned bit string

  access: read only

  mechanism: by reference



  Sign of the first operand.  The asign argument is the address of  of

  an  aligned  bit  string  containing  this sign.  Zero is considered

  positive.



  aexp



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Power of 10 by which  adigits  has  to  be  multiplied  to  get  the

  absolute  value  of  the  first  operand.   The aexp argument is the

  address of a signed longword integer containing this exponent.



  adigits



  type: num. string, unsigned

  access: read only

  mechanism: by descriptor



  First operand's numeric string.  The adigits argument is the address

  of a descriptor pointing to this numeric string.  The string must be

  an unsigned decimal number.



  bsign



  type: aligned bit string

  access: read only

  mechanism: by reference



  Sign of the second operand.  The bsign argument is the address of an

  unaligned  bit string containing the second operand's sign.  Zero is

  considered positive.



  bexp



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Power of 10 by which  bdigits  has  to  be  multiplied  to  get  the

  absolute  value  of  the  second  operand.  The bexp argument is the

  address of a signed longword integer containing the second operand's

  exponent.



  bdigits



  type: num. string, unsigned

  access: read only

  mechanism: by descriptor



  Second operand's  numeric  string.   The  bdigits  argument  is  the

  address of a descriptor pointing to this numeric string.  The string

  must be an unsigned decimal number.



  csign



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Sign of the result.  The csign argument is the address of  a  signed

  longword  integer  containing the result's sign.  Zero is considered

  positive.



  cexp



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Power of 10 by which  cdigits  has  to  be  multiplied  to  get  the

  absolute value of the result.  The cexp argument is the address of a

  signed longword integer containing the result's exponent.



  cdigits



  type: num. string, unsigned

  access: write only

  mechanism: by descriptor



  The result's numeric string.  The cdigits argument is the address of

  an  unsigned  numeric string containing the result's numeric string.

  This string is an unsigned decimal number.

3 STR$ANALYZE_SDESC

  STR$ANALYZE_SDESC extracts the length and starting  address  of  the

  data for a variety of string descriptor classes.



     Format:



       CALL STR$ANALYZE_SDESC  inp-dsc ,len ,data-adr



     Arguments:



  inp-dsc



  type: character string

  access: read only

  mechanism: by descriptor 



  Input descriptor from which STR$ANALYZE_SDESC extracts the length of

  the data and address at which the data starts.  The inp-dsc argument

  is the address of a descriptor pointing to the input data.



  len



  type: word integer (signed)

  access: write only

  mechanism: by reference for CALL entry point, 
             by value for JSB entry point




  Length of the data; this length is extracted from the descriptor  by

  STR$ANALYZE_SDESC.  The len argument is the address of a signed word

  integer into which STR$ANALYZE_SDESC writes the data length.



  data-adr



  type: longword (unsigned)

  access: write only

  mechanism: by reference for CALL entry point, 
             by value for JSB entry point



  Address of the data; this address is extracted from  the  descriptor

  by  STR$ANALYZE_SDESC.   The  data-adr  is an unsigned longword into

  which STR$ANALYZE_SDESC writes the address of the data.

3 STR$APPEND

  STR$APPEND appends a source string  to  the  end  of  a  destination

  string.  The destination string must be dynamic or varying.



     Format:



       STR$APPEND  dst-str ,src-str



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor 



  Destination string to which STR$APPEND appends  the  source  string.

  The  dst-str argument is the address of a descriptor pointing to the

  destination string.  This destination  string  must  be  dynamic  or

  varying.



  src-str



  type: character string

  access: read only

  mechanism: by descriptor 



  Source string that STR$APPEND appends to the end of the  destination

  string.   The  src-str  argument  is  the  address  of  a descriptor

  pointing to this source string.

3 STR$CASE_BLIND_COMPARE

  STR$CASE_BLIND_COMPARE compares two input strings of  any  supported

  class  and  data  type  without  regard  to  whether  the alphabetic

  characters are uppercase or lowercase.



     Format:



       STR$CASE_BLIND_COMPARE   string1 ,string2



     Arguments:



  string1



  type: character string

  access: read only

  mechanism: by descriptor



  First string.  The string1 argument is the address of  a  descriptor

  pointing to the first string.



  string2



  type: character string

  access: read only

  mechanism: by descriptor



  Second string.  The string2 argument is the address of a  descriptor

  pointing to the second string.

3 STR$COMPARE

  STR$COMPARE compares two strings for  the  same  contents.   If  the

  strings  are  unequal in length, the shorter string is considered to

  be filled with blanks to the length of the longer string before  the

  comparison is made.



     Format:



       STR$COMPARE  src1-str ,src2-str



     Arguments:



  src1-str



  type: character string

  access: read only

  mechanism: by descriptor



  First string.  The src1-str argument is the address of a  descriptor

  pointing to the first string.



  src2-str



  type: character string

  access: read only

  mechanism: by descriptor



  Second string.  The src2-str argument is the address of a descriptor

  pointing to the second string.

3 STR$CONCAT

  STR$CONCAT takes up to 254 source strings and concatenates them into

  a single destination string.



     Format:



       STR$CONCAT  dst-str ,src1-str [... ,srcn-str] 



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string into which STR$CONCAT concatenates all  specified

  source strings.  The dst-str argument is the address of a descriptor

  pointing to this destination string.



  src1-str



  type: character string

  access: read only

  mechanism: by descriptor



  First source string.  The src1-str argument  is  the  address  of  a

  descriptor pointing to the first source string.  STR$CONCAT requires

  at least one source string.



  srcn-str



  type: character string

  access: read only

  mechanism: by descriptor



  Nth source string.  The  scrn-str  argument  is  the  address  of  a

  descriptor  pointing to the Nth source string.  The largest value of

  N that STR$CONCAT allows is 254.

3 STR$COPY_DX

  STR$COPY_DX copies a source string to a  destination  string.   Both

  strings are passed by descriptor.



     Format:



       STR$COPY_DX  dst-str ,src-str



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string into which STR$COPY_DX writes the source  string.

  The  dst-str argument is the address of a descriptor pointing to the

  destination string.



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source string that STR$COPY_DX copies into the  destination  string.

  The  descriptor  class  of  the  source  string  can be unspecified,

  fixed-length, dynamic, scalar decimal, array,  noncontiguous  array,

  or varying.

3 STR$COMPARE_EQL

  STR$COMPARE_EQL compares two strings to see if they  have  the  same

  length  and  contents.   Uppercase  and lowercase characters are not

  considered equal.



     Format:



       STR$COMPARE_EQL  src1-str ,src2-str



     Arguments:



  src1-str



  type: character string

  access: read only

  mechanism: by descriptor



  First source string.  The src1-str argument  is  the  address  of  a

  descriptor pointing to the first source string.



  src2-str



  type: character string

  access: read only

  mechanism: by descriptor



  Second source string.  The src2-str argument is  the  address  of  a

  descriptor pointing to the second source string.

3 STR$COPY_R

  STR$COPY_R  copies  a  source  string  passed  by  reference  to   a

  destination string.



     Format:



       STR$COPY_R  dst-str ,src-len ,src-str



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string into which STR$COPY_R copies the  source  string.

  The  dst-str argument is the address of a descriptor pointing to the

  destination string.



  src-len



  type: word (unsigned)

  access: read only

  mechanism: by reference



  Length of the source string.  The src-len argument is the address of

  an unsigned word containing the length of the source string.



  src-str



  type: character string

  access: read only

  mechanism: by reference



  Source string which STR$COPY_R copies into the  destination  string.

  The  src-str  argument  is  the  address  of  an  unsigned  longword

  containing the address of the source string.

3 STR$DIVIDE

  STR$DIVIDE divides two decimal strings.



     Format:



       STR$DIVIDE  asign ,aexp ,adigits ,bsign ,bexp ,bdigits

                  ,tot-digits ,rnd-trunc ,csign ,cexp ,cdigits 



     Arguments:



  asign



  type: aligned bit string

  access: read only

  mechanism: by reference



  Sign of the first operand.  The asign argument is the address of the

  first operand's sign.  Zero is considered positive.



  aexp



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Power of 10 by which  adigits  has  to  be  multiplied  to  get  the

  absolute  value  of  the  first  operand.   The aexp argument is the

  address of the first operand's exponent.



  adigits



  type: num. string, unsigned

  access: read only

  mechanism: by descriptor



  First operand's numeric string.  The adigits argument is the address

  of a descriptor pointing to the first operand's numeric string.  The

  string must be an unsigned decimal number.



  bsign



  type: aligned bit string

  access: read only

  mechanism: by reference



  Sign of the second operand.  The bsign argument is  the  address  of

  the second operand's string.  Zero is considered positive.



  bexp



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Power of 10 by which  bdigits  has  to  be  multiplied  to  get  the

  absolute  value  of  the  second  operand.  The bexp argument is the

  address of the second operand's exponent.



  bdigits



  type: num. string, unsigned

  access: read only

  mechanism: by descriptor



  Second operand's  numeric  string.   The  bdigits  argument  is  the

  address  of  a  descriptor  pointing  to the second operand's number

  string.  The string must be an unsigned decimal number.



  tot-digits



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Number of digits to the right of the decimal point.  The  tot-digits

  argument  is the address of s signed longword integer containing the

  number of total digits.  This  number  is  used  to  carry  out  the

  division.



  rnd-trunc



  type: aligned bit string

  access: read only

  mechanism: by reference



  Indicator of whether STR$DIVIDE is to round or truncate the  result;

  zero means truncate, one means round.  The rnd-trunc argument is the

  address of an aligned bit string containing this indicator.



  csign



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Sign of the result.  The csign argument is the address of  a  signed

  longword  integer  containing  the  sign  of  the  result.   Zero is

  considered positive.



  cexp



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Power of 10 by which  cdigits  has  to  be  multiplied  to  get  the

  absolute value of the result.  The cexp argument is the address of a

  signed longword integer containing the exponent.



  cdigits



  type: num. string, unsigned

  access: write only

  mechanism: by descriptor



  Result's numeric string.  The cdigits argument is the address  of  a

  descriptor  pointing  to  the  numeric  string  of the result.  This

  string is an unsigned decimal number.

3 STR$DUPL_CHAR

  STR$DUPL_CHAR generates a string  containing  n  duplicates  of  the

  input   character.    If   dst-str  is  an  "empty"  dynamic  string

  descriptor, STR$DUPL_CHAR will allocate and initialize the string.



     Format:



       STR$DUPL_CHAR  dst-str [,length] [,char]



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string into which STR$DUPL_CHAR writes length copies  of

  the  input  character.   The  dst-str  argument  is the address of a

  descriptor pointing to the destination string.



  length



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Number of times char will be duplicated.  The length argument is the

  address of a signed longword integer containing the number.  This is

  an optional argument.  If omitted, the default is one.



  char



  type: byte (unsigned)

  access: read only

  mechanism: by reference



  ASCII character which STR$DUPL_CHAR writes  length  times  into  the

  destination string.  The char argument is the address of an unsigned

  byte containing this character.  This is an optional  argument.   If

  omitted, the default is a space.

3 STR$FREE1_DX

  STR$FREE1_DX deallocates one dynamic string.



     Format:



       STR$FREE1_DX  dsc-adr



     Arguments:



  dsc-adr



  type: quadword (unsigned)

  access: modify

  mechanism: by reference



  Dynamic string descriptor of the dynamic string  which  STR$FREE1_DX

  deallocates.   The  dsc-adr  argument  is the address of an unsigned

  quadword  containing  the  descriptor  address.   The  class   field

  (DSC$B_CLASS) is checked.

3 STR$FIND_FIRST_IN_SET

  STR$FIND_FIRST_IN_SET searches a string one  character  at  a  time,

  from  left to right, comparing each character in the string to every

  character  in  a  specified  set  of  characters  for  which  it  is

  searching.  STR$FIND_FIRST_IN_SET returns the position in the string

  where the first matching character was found.  Zero is  returned  if

  no match is found.



     Format:



       STR$FIND_FIRST_IN_SET   string ,set-of-chars



     Arguments:



  string



  type: character string

  access: read only

  mechanism: by descriptor



  String  which  STR$FIND_FIRST_IN_SET  compares   to   the   set   of

  characters, looking for the first match.  The string argument is the

  address of a descriptor pointing to the character string.



  set-of-chars



  type: character string

  access: read only

  mechanism: by descriptor



  Set of characters which STR$FIND_FIRST_IN_SET is  searching  for  in

  the  string.   The  string  argument  is the address of a descriptor

  pointing to the set of characters.

3 STR$FIND_FIRST_NOT_IN_SET

  STR$FIND_FIRST_NOT_IN_SET  searches   a   string,   comparing   each

  character  to  the characters in a specified set of characters.  The

  string is searched character  by  character,  from  left  to  right.

  STR$FIND_FIRST_NOT_IN_SET   returns   the   position  of  the  first

  character in the string that does not match any of the characters in

  the selected set of characters.



     Format:



       STR$FIND_FIRST_NOT_IN_SET   string ,set-of-chars



     Arguments:



  string



  type: character string

  access: read only

  mechanism: by descriptor



  String  which  STR$FIND_FIRST_NOT_IN_SET   searches.    The   string

  argument is the address of a descriptor pointing to the string.



  set-of-chars



  type: character string

  access: read only

  mechanism: by descriptor



  The set of characters which  STR$FIND_FIRST_NOT_IN_SET  compares  to

  the  string,  looking  for a nonmatch.  The set-of-chars argument is

  the address of a descriptor pointing to this set of characters.

3 STR$FIND_FIRST_SUBSTRING

  STR$FIND_FIRST_SUBSTRING finds the first substring  (in  a  provided

  list of substrings) occurring in a given string.



     Format:



       STR$FIND_FIRST_SUBSTRING  string ,index ,sub-string-index

                  ,sub-string1 [,sub-string2] ... [,sub-stringn] 



     Arguments:



  string



  type: character string

  access: read only

  mechanism: by descriptor



  String that STR$FIND_FIRST_SUBSTRING searches.  The string  argument

  is the address of a descriptor pointing to the string.



  index



  type: longword integer (signed)

  access: write only

  mechanism: by reference 



  Position within string at  which  STR$FIND_FIRST_SUBSTRING  found  a

  matching  substring;  zero  if no matching substring was found.  The

  index  argument  is  the  address  of  a  signed  longword   integer

  containing this position.



  sub-string-index



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Ordinal number of the sub-string that matched (1 for  the  first,  2

  for  the  second,  and  so  on), or zero if STR$FIND_FIRST_SUBSTRING

  found no substrings that matched.  The sub-string-index argument  is

  the  address  of  a  signed longword integer containing this ordinal

  number.



  sub-string1



  type: character string

  access: read only

  mechanism: by descriptor



  First  specified  substring   for   which   STR$FIND_FIRST_SUBSTRING

  searches in string.



  sub-string2



  type: character string

  access: read only

  mechanism: by descriptor



  Second  specified  substring  which  STR$FIND_FIRST_SUBSTRING   will

  search  for  in the string.  The sub-string2 argument is the address

  of a descriptor pointing to the second substring.



  sub-stringn



  type: character string

  access: read only

  mechanism: by descriptor



  Nth specified substring which STR$FIND_FIRST_SUBSTRING  will  search

  for  in  the  string.   The sub-stringn argument is the address of a

  descriptor pointing to the nth substring.

3 STR$GET1_DX

  STR$GET1_DX allocates a specified number of bytes of dynamic virtual

  memory to a specified dynamic string descriptor.



     Format:



       STR$GET1_DX  len ,str



     Arguments:



  len



  type: word (unsigned)

  access: read only

  mechanism: by reference



  Number of bytes which STR$GET1_DX allocates.  The  len  argument  is

  the address of an unsigned word containing this number.



  str



  type: quadword (unsigned)

  access: modify

  mechanism: by reference



  Dynamic string descriptor to which STR$GET1_DX allocates  the  area.

  The  str  argument is the address of an unsigned quadword containing

  the string descriptor.

3 STR$LEFT

  STR$LEFT copies a substring of a source string  into  a  destination

  string.



     Format:



       STR$LEFT  dst-str ,src-str ,end-pos



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string into which STR$LEFT copies  the  substring.   The

  dst-str  argument  is  the  address  of a descriptor pointing to the

  destination string.



  src-str 



  type: character string

  access: read only

  mechanism: by descriptor



  Source string from which STR$LEFT extracts the  substring  which  it

  copies  into  the  destination  string.  The src-str argument is the

  address of a descriptor pointing to the source string.



  end-pos



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Relative position in the source string at which the substring  ends.

  The  end-pos  argument  is  the address of a signed longword integer

  containing the ending position.

3 STR$LEN_EXTR

  STR$LEN_EXTR  copies  a  substring  of  a  source  string   into   a

  destination string.



     Format:



       STR$LEN_EXTR  dst-str ,src-str ,start-pos 

                  ,length



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string into which  STR$LEN_EXTR  copies  the  substring.

  The  dst-str argument is the address of a descriptor pointing to the

  destination string.



  src-str 



  type: character string

  access: read only

  mechanism: by descriptor



  Source string from which STR$LEN_EXTR extracts the substring that it

  copies  into  the  destination  string.  The src-str argument is the

  address of a descriptor pointing to the source string.



  start-pos



  type: longword integer (signed)

  access: read only

  mechanism: by reference 



  Relative position in the source string at which the  substring  that

  STR$LEN_EXTR copies starts.  The star-pos argument is the address of

  a signed longword integer containing the starting position.



  length



  type: longword integer (signed)

  access: read only

  mechanism: by reference 



  Number of characters in the substring that  STR$LEN_EXTR  copies  to

  the  destination  string.   The  length argument is the address of a

  signed longword integer containing the length of the substring.

3 STR$MUL

  STR$MUL multiplies two decimal strings.



     Format:



       STR$MUL  asign ,aexp ,adigits ,bsign 

                  ,bexp ,bdigits ,csign ,cexp ,cdigits



     Arguments:



  asign



  type: aligned bit string

  access: read only

  mechanism: by reference



  Sign of the first operand.  The asign argument is the address of  an

  aligned  bit  string  containing  the first operand's sign.  Zero is

  considered positive.



  aexp



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Power of 10 by which  adigits  has  to  be  multiplied  to  get  the

  absolute  value  of  the  first  operand.   The aexp argument is the

  address of a signed longword integer containing this exponent.



  adigits



  type: num. string, unsigned

  access: read only

  mechanism: by descriptor



  First operand's numeric string.  The adigits argument is the address

  of a descriptor pointing to the numeric string of the first operand.

  The string must be an unsigned decimal number.



  bsign



  type: aligned bit string

  access: read only

  mechanism: by reference



  Sign of the second operand.  The bsign argument is the address of an

  aligned  bit string containing the sign of the second operand.  Zero

  is considered positive.



  bexp



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Power of 10 by which  bdigits  has  to  be  multiplied  to  get  the

  absolute  value  of  the  second  operand.  The bexp argument is the

  address of a signed longword integer containing this exponent.



  bdigits



  type: num. string, unsigned

  access: read only

  mechanism: by descriptor



  Second operand's  numeric  string.   The  bdigits  argument  is  the

  address  of  a  descriptor  pointing to the second operand's numeric

  string.  The string must be an unsigned decimal number.



  csign



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Sign of the result.  The csign argument is the address of  a  signed

  longword  integer  containing  the  sign  of  the  result.   Zero is

  considered positive.



  cexp



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Power of 10 by which  cdigits  has  to  be  multiplied  to  get  the

  absolute value of the result.  The cexp argument is the address of a

  signed longword integer containing this exponent.



  cdigits



  type: num. string, unsigned

  access: write only

  mechanism: by descriptor



  Result's numeric string.  The cdigits argument is the address  of  a

  descriptor pointing to the numeric string of the result.  The string

  will be an unsigned decimal number.

3 STR$COMPARE_MULTI

  STR$COMPARE_MULTI compares two character strings to see if they have

  the same contents.  Two strings are "equal" if they contain the same

  characters in the same sequence, even if one of them is blank filled

  to  a longer length than the other.  The DEC Multinational Character

  Set,  or  foreign  language  variations  of  the  DEC  Multinational

  Character Set, are used in the comparison.



     Format:



       STR$COMPARE_MULTI  string1 ,string2 

                  [,case-blind-flag] [,foreign-lang]



     Arguments:



  string1



  type: character string

  access: read only

  mechanism: by descriptor



  First string in the comparison.  STR$COMPARE_MULTI reads the string1

  argument, which is the address of a descriptor pointing to the first

  string.



  string2



  type: character string

  access: read only

  mechanism: by descriptor



  Second  string  in  the  comparison.   STR$COMPARE_MULTI  reads  the

  string2  argument,  which is the address of a descriptor pointing to

  the second string.



  case-blind-flag



  type: longword integer (unsigned)

  access: read only

  mechanism: by value



  A single  flag  bit.   The  case-blind-flag  argument  is  a  signed

  longword  integer that contains this flag bit.  The default value of

  case-blind-flag is zero.



  foreign-lang



  type: longword integer (unsigned)

  access: read only

  mechanism: by value



  Indicator which determines the foreign language table  to  be  used.

  The foreign-lang argument is an unsigned longword that contains this

  foreign language table indicator.  The default value of foreign-lang

  is one.

3 STR$MATCH_WILD

  STR$MATCH_WILD is used to compare a pattern  string  which  includes

  wildcards  with a candidate string.  It returns a condition value of

  STR$_MATCH if the strings match and  STR$_NOMATCH  if  they  do  not

  match.



     Format:



       STR$MATCH_WILD  cand-str ,pattern-str



     Arguments:



  cand-str



  type: character string

  access: read only

  mechanism: by descriptor



  String to which  the  pattern  string  is  compared.   The  cand-str

  argument  is  the  address of a descriptor pointing to the candidate

  string.



  pattern-str



  type: character string

  access: read only

  mechanism: by descriptor



  String containing wildcard characters.  The pattern-str argument  is

  the  address  of  a  descriptor pointing to the pattern string.  The

  wildcards in the pattern string are translated  when  STR$MATCH_NAME

  searches the candidate string to determine if it matches the pattern

  string.

3 STR$POSITION

  STR$POSITION searches for the first occurrence of a single substring

  within  a  source  string.   If STR$POSITION finds the substring, it

  returns the relative position of that substring.  If  the  substring

  is not found, STR$POSITION returns a zero.



     Format:



       STR$POSITION  src-str ,sub-str [,start-pos]



     Arguments:



  src-str



  type: character string

  access: read only

  mechanism: by descriptor 



  Source string within which STR$POSITION searches for the  substring.

  The  src-str  is  the address of a descriptor pointing to the source

  string.



  sub-str



  type: character string

  access: read only

  mechanism: by descriptor 



  Substring for which STR$POSITION searches.  The sub-str argument  is

  the address of a descriptor pointing to the substring.



  start-pos



  type: longword integer (signed)

  access: read only

  mechanism: by reference  



  Relative position in the source string at which STR$POSITION  begins

  the  search.   The  start-pos  argument  is  the address of a signed

  longword integer containing the starting position.  Although this is

  an  optional argument, it is required if you are using the JSB entry

  point.

3 STR$PREFIX

  STR$PREFIX inserts a source string at the beginning of a destination

  string.  The destination string must be dynamic or varying.



     Format:



       STR$PREFIX  dst-str ,src-str



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string  (dynamic  or  varying);  STR$PREFIX  copies  the

  source  string  into  the beginning of this destination string.  The

  dst-str argument is the address of  a  descriptor  pointing  to  the

  destination string.



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source string which STR$PREFIX copies  into  the  beginning  of  the

  destination  string.   The  src-str  argument  is  the  address of a

  descriptor pointing to the source string.

3 STR$POS_EXTR

  STR$POS_EXTR  copies  a  substring  of  a  source  string   into   a

  destination string.



     Format:



       STR$POS_EXTR  dst-str ,src-str ,start-pos 

                  ,end-pos



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor 



  Destination string into which  STR$POS_EXTR  copies  the  substring.

  The  dst-str argument is the address of a descriptor pointing to the

  destination string.



  src-str 



  type: character string

  access: read only

  mechanism: by descriptor 



  Source string from which STR$POS_EXTR extracts the substring that it

  copies  into  the  destination  string.  The src-str argument is the

  address of a descriptor pointing to the source string.



  start-pos



  type: longword integer (signed)

  access: read only

  mechanism: by reference 



  Relative position in the source string at which the  substring  that

  STR$POS_EXTR  copies  starts.  The start-pos argument is the address

  of a signed longword integer containing the starting position.



  end-pos



  type: longword integer (signed)

  access: read only

  mechanism: by reference 



  Relative position in the source string at which the  substring  that

  STR$POS_EXTR  copies ends.  The end-pos argument is the address of a

  signed longword integer containing the ending position.

3 STR$RECIP

  STR$RECIP takes the reciprocal of the first decimal  string  to  the

  precision  limit  specified by the second decimal string and returns

  the result as a decimal string.



     Format:



       STR$RECIP  asign ,aexp ,adigits ,bsign 

                  ,bexp ,bdigits ,csign ,cexp ,cdigits



     Arguments:



  asign



  type: aligned bit string

  access: read only

  mechanism: by reference



  Sign of the first operand.  The asign argument is the address of  an

  aligned  sign  bit  containing  the  first  operand's sign.  Zero is

  considered positive.



  aexp



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Power of 10 by which  adigits  has  to  be  multiplied  to  get  the

  absolute  value  of  the  first  operand.   The aexp argument is the

  address of a signed longword integer containing this exponent.



  adigits



  type: num. string, unsigned

  access: read only

  mechanism: by descriptor



  First operand's numeric string.  The adigits argument is the address

  of a descriptor pointing to the first operand's numeric string.  The

  string must be an unsigned decimal number.



  bsign



  type: aligned bit string

  access: read only

  mechanism: by reference



  Sign of the second operand.  The bsign argument is the address of an

  aligned sign bit containing the sign of the second operand.  Zero is

  considered positive.



  bexp



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Power of 10 by which  bdigits  has  to  be  multiplied  to  get  the

  absolute  value  of  the  second  operand.  The bexp argument is the

  address of a signed longword integer containing this exponent.



  bdigits



  type: num. string, unsigned

  access: read only

  mechanism: by descriptor



  Second operand's  numeric  string.   The  bdigits  argument  is  the

  address  of  a  descriptor  pointing to the second operand's numeric

  string.  The string must be an unsigned decimal number.



  csign



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Sign of the result.  The csign argument is the address of  a  signed

  longword  integer  containing the result's sign.  Zero is considered

  positive.



  cexp



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Power of 10 by which  cdigits  has  to  be  multiplied  to  get  the

  absolute value of the result.  The cexp argument is the address of a

  signed longword integer containing this exponent.



  cdigits



  type: num. string, unsigned

  access: write only

  mechanism: by descriptor



  Result's numeric string.  The cdigits argument is the address  of  a

  descriptor pointing to the result's numeric string.  The string will

  be an unsigned decimal number.

3 STR$RIGHT

  STR$RIGHT copies a substring of a source string into  a  destination

  string.



     Format:



       STR$RIGHT  dst-str ,src-str ,start-pos



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor 



  Destination string into which STR$RIGHT copies the  substring.   The

  dst-str  argument  is  the  address  of a descriptor pointing to the

  destination string.



  src-str 



  type: character string

  access: read only

  mechanism: by descriptor 



  Source string from which STR$RIGHT extracts the  substring  that  it

  copies  into  the  destination  string.  The src-str argument is the

  address of a descriptor pointing to the source string.



  start-pos



  type: longword integer (signed)

  access: read only

  mechanism: by reference 



  Relative position in the source string at which the  substring  that

  STR$RIGHT copies starts.  The start-pos argument is the address of a

  signed longword integer containing the starting position.

3 STR$ROUND

  STR$ROUND rounds or truncates a decimal string to a specified number

  of  significant  digits  and  places  the  result in another decimal

  string.



     Format:



       STR$ROUND  places ,trunc-flg ,asign ,aexp 

                  ,adigits ,csign ,cexp ,cdigits



     Arguments:



  places



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Maximum number of decimal  digits  that  STR$ROUND  retains  in  the

  result.   The  places  argument  is the address of a signed longword

  integer containing the number of decimal digits.



  trunc-flg



  type: aligned bit string

  access: read only

  mechanism: by reference



  Function flag; zero indicates that the decimal  string  is  rounded,

  one  indicates that it is truncated.  The trunc-flag argument is the

  address of an aligned bit string containing this function flag.



  asign



  type: aligned bit string

  access: read only

  mechanism: by reference



  Sign of the first operand.  The asign argument is the address of  an

  aligned  sign  bit  string  containing  this  sign.  A value of zero

  indicates that the number is positive while a value of one indicates

  that the number is negative.



  aexp



  type: longword integer (signed)

  access: read only

  mechanism: by reference



  Power of 10 by which  adigits  has  to  be  multiplied  to  get  the

  absolute  value  of  the  first  operand.   The aexp argument is the

  address of a signed longword integer containing this exponent.



  adigits



  type: num. string, unsigned

  access: read only

  mechanism: by descriptor



  First operand's numeric string.  The adigits argument is the address

  of a descriptor pointing to this numeric string.  The string must be

  an unsigned decimal number.



  csign



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Sign of the result.  The csign argument is the address of  a  signed

  longword  integer  containing  the  result's  sign.  A value of zero

  indicates that the number is positive while a value of one indicates

  that the number is negative.



  cexp



  type: longword integer (signed)

  access: write only

  mechanism: by reference



  Power of 10 by which  cdigits  has  to  be  multiplied  to  get  the

  absolute value of the result.  The cexp argument is the address of a

  signed longword integer containing this exponent.



  cdigits



  type: num. string, unsigned

  access: write only

  mechanism: by descriptor



  Result's numeric string.  The cdigits argument is the address  of  a

  descriptor  pointing  to this numeric string.  The string will be an

  unsigned decimal number.

3 STR$REPLACE

  STR$REPLACE  copies  a  source  string  to  a  destination   string,

  replacing  part of the string with another string.  The substring to

  be replaced is specified by its starting and ending positions.



     Format:



       STR$REPLACE  dst-str ,src-str ,start-pos 

                  ,end-pos ,rpl-str



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor 



  Destination string into which  STR$REPLACE  writes  the  new  string

  created when it replaces the substring.  The dst-str argument is the

  address of a descriptor pointing to the destination string.



  src-str



  type: character string

  access: read only

  mechanism: by descriptor 



  Source string.  The src-str argument is the address of a  descriptor

  pointing to the source string.



  start-pos



  type: longword integer (signed)

  access: read only

  mechanism: by reference 



  Position  in  the  source  string  at  which  the  substring   which

  STR$REPLACE  replaces begins.  The start-pos argument is the address

  of a signed longword integer containing the starting position.   The

  position is relative to the start of the source string.



  end-pos



  type: longword integer (signed)

  access: read only

  mechanism: by reference 



  Position  in  the  source  string  at  which  the  substring   which

  STR$REPLACE replaces ends.  The end-pos argument is the address of a

  signed  longword  integer  containing  the  ending  positions.   The

  position is relative to the start of the source string.



  rpl-str



  type: character string

  access: read only

  mechanism: by descriptor 



  Replacement string with which STR$REPLACE  replaces  the  substring.

  The rpl-str argument is the address of a descriptor pointing to this

  replacement string.

3 STR$TRANSLATE

  STR$TRANSLATE successively  compares  each  character  in  a  source

  string  to  all characters in a match string.  If a source character

  has a match, the destination character is taken from  the  translate

  string.   Otherwise,  the  source character moves to the destination

  string.



     Format:



       STR$TRANSLATE  dst-str ,src-str ,trans-tbl 

                  ,match-str



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string.  The  dst-str  argument  is  the  address  of  a

  descriptor pointing to the destination string.



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source string.  The src-str argument is the address of a  descriptor

  pointing to the source string.



  trans-tbl



  type: character string

  access: read only

  mechanism: by descriptor



  Translate string.  The trans-tbl is  the  address  of  a  descriptor

  pointing to the translate string.



  match-str



  type: character string

  access: read only

  mechanism: by descriptor



  Match string.  The match-str argument is the address of a descriptor

  pointing to the match string.

3 STR$TRIM

  STR$TRIM copies a source string to a destination string and  deletes

  the trailing blank and tab characters.



     Format:



       STR$TRIM  dst-str ,src-str [,out-len]



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string to which STR$TRIM copies the trimmed string.  The

  dst-str  argument  is  the  address  of a descriptor pointing to the

  destination string.



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source  string  which  STR$TRIM  trims  and  then  copies  into  the

  destination  string.   The  src-str  argument  is  the  address of a

  descriptor pointing to the source string.



  out-len



  type: word (unsigned)

  access: write only

  mechanism: by reference



  Number of bytes that STR$TRIM has written into dst-str, not counting

  padding  in the case of a fixed-length string.  The out-len argument

  is the address of an unsigned word into which  STR$TRIM  writes  the

  length  of  the  output string.  If the input string is truncated to

  the size specified in the dst-str description,  out-len  is  set  to

  this  size.   Therefore,  out-len  can always be used by the calling

  program to access a valid substring of dst-str.

3 STR$UPCASE

  STR$UPCASE converts a source string  to  uppercase  and  writes  the

  converted  string  into  the  destination  string.  When you need to

  compare characters  without  regard  to  case,  you  can  first  use

  STR$UPCASE  to  convert  both  characters  to uppercase.  STR$UPCASE

  converts all characters in the multinational character set.



     Format:



       STR$UPCASE  dst-str ,src-str



     Arguments:



  dst-str



  type: character string

  access: write only

  mechanism: by descriptor



  Destination string into which STR$UPCASE writes the string  once  it

  has  converted to uppercase.  The dst-str argument is the address of

  a descriptor pointing to the destination string.



  src-str



  type: character string

  access: read only

  mechanism: by descriptor



  Source string that STR$UPCASE convert  to  uppercase.   The  src-str

  argument  is  the  address  of  a  descriptor pointing to the source

  string.

