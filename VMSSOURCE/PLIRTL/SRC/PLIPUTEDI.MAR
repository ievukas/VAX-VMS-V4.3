	.title	pli$putedititem
	.ident	/1-003/					; Edit WHM1003

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; facility:
;
;	VAX/VMS PL1 runtime library
;
; abstract:
;
;	This module contains the pl1 runtime routines to put items to a
;	pl1 stream file under edit controlled format.
;
;
; author: c. spitz 28-nov-79
;
; modified:
;
;	Bill Matthews 23-Oct-1981
;	    V1.4-02:
;		Added code to clear the recursion bit at the end of an item's
;		processing so that the inline code for the next item is able to
;		call functions which also do I/O.
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;--

;
; external definitions
;
	$deffcb				;define file control block
	$defstk				;define stack frame offsets
	$defstr				;define stream block offsets
	$defdat				;define operand node data types
	$defgetopt			;define get options block
	$defcvtind			;define convert case indices
	$rabdef				;define rms rab offsets
	$rmsdef				;define rms error codes

; 
; local data
;

	rtshare			;sharable

;++
; pli$pute****
; 
; the pli$pute**** routines are called by the compiled code to put items
; to a stream output file under edit directed transmission. each routine
; pushes the source item descriptor, along with its data type, and jumps
; to pli$$putfmt_r6.
;--

;pli$putechar_r6
; inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
; outputs:
;	none
; side effects:
;	r0-r6 are destroyed

pli$putechar_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	pushab	retputedi		;push return address
	movq	r0,-(sp)		;save source
	pushl	#cvt_k_src_char		;set for char source
	jmp	g^pli$$putfmt_r6	;get format, convert and output field
retputedi:
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clear recursion flag
	rsb

;pli$putevcha_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$putevcha_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	pushab	retputedi		;push return address
	movq	r0,-(sp)		;save source
	pushl	#cvt_k_src_vcha		;set for vchar source
	jmp	g^pli$$putfmt_r6	;get format, convert and output field

;pli$putebit_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r2 - offset of bit string
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$putebit_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	movl	r2,r5			;save offset
	pushab	retputedi		;push return address
	movq	r0,-(sp)		;save source
	pushl	#cvt_k_src_bit		;set for bit source
	jmp	g^pli$$putfmt_r6	;get format, convert and output field

;pli$puteabit_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$puteabit_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	pushab	retputedi		;push return address
	movq	r0,-(sp)		;save source
	pushl	#cvt_k_src_abit		;set for abit source
	jmp	g^pli$$putfmt_r6	;get format, convert and output field

;pli$putefixb_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$putefixb_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	pushab	retputedi		;push return address
	movq	r0,-(sp)		;save source
	pushl	#cvt_k_src_fixb		;set for fixb source
	jmp	g^pli$$putfmt_r6	;get format, convert and output field

;pli$putefixd_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$putefixd_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	pushab	retputedi		;push return address
	movq	r0,-(sp)		;save source
	pushl	#cvt_k_src_fixd		;set for fixd source
	jmp	g^pli$$putfmt_r6	;get format, convert and output field

;pli$putefltb_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$putefltb_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	pushab	retputedi		;push return address
	movq	r0,-(sp)		;save source
	pushl	#cvt_k_src_fltb		;set for fltb source
	jmp	g^pli$$putfmt_r6	;get format, convert and output field

;pli$putefltd_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed
;

pli$putefltd_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	pushab	retputedi		;push return address
	movq	r0,-(sp)		;save source
	pushl	#cvt_k_src_fltd		;set for fltd source
	jmp	g^pli$$putfmt_r6	;get format, convert and output field

;pli$putepic_r6
;    inputs:
;	r0 - address of element to put
;	r1 - size/prec of element to put
;	r11 - address of stream block
;	ap - address of file control block
;    outputs:
;	none
;    side effects:
;	r0-r6 are destroyed

pli$putepic_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	pushab	retputedi		;push return address
	movq	r0,-(sp)		;save source
	pushl	#cvt_k_src_pic		;set for pic source
	jmp	g^pli$$putfmt_r6	;get format, convert and output field

	.end
