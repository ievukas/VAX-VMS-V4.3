%TITLE 'Convert page number to internal format'
MODULE PARSEP (		IDENT = 'V04-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Translates a "human-readible" page number into internal format.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: February 1979
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	005	REM00005	Ray Marshall	21-Mar-1984
!		Implemented the foreign language conditionals for compiling
!		  fixed output words.  At this time, we only have the German
!		  translations available.  But, since the German word for INDEX
!		  is the same as in English, that conditional isn't used.
!
!	004	KAD00004	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL				!Error messages
    RNFCRP;

EXTERNAL
    FS01 : FIXED_STRING,
    KHAR;

EXTERNAL ROUTINE
    CONVLB,
    ERM,
    GETNUM,
    GSLU;


GLOBAL ROUTINE PARSEP (IRA, PAGEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PARSEP scans IRA in an attempt to recognize a page number.
!	If a page number is recognized, the results are returned
!	in PAGEN, and PARSEP returns TRUE as its completion code.
!	If a page number is not recognized, PAGEN is left in an
!	undefined state, and PARSEP returns false.
!
! FORMAL PARAMETERS:
!
!	IRA is the FIXED_STRING to be scanned.  PAGEN is where
!	the results go.
!
! IMPLICIT INPUTS:
!
!	The format of the page number is implicit to this routine.
!	The required format is:
!		SECTION-PAGE SUBPAGE
!	where SECTION is a digit or string of letters, thereby indicating
!		a chapter, appendix, or the index,
!	where the '-' is required iff SECTION is present,
!	where PAGE is required if SECTION is a number, and indicates
!		the page number,
!	where SUBPAGE, if present, is a single letter.
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if a page number was recognized, and it was ok.
!	Returns FALSE if no page number was found, or it was bad.
!
! SIDE EFFECTS:	None
!
!--

    BEGIN

    MAP
	IRA : REF FIXED_STRING,
	PAGEN : REF PAGE_DEFINITION;

    LOCAL
	HOLD_NUMBER,
	NUMBER_VALUE,
	NUMBER_SIGN,
	NUMBER_LENGTH;


    !Try for a simple page number.
    IF NOT GETNUM (.IRA, NUMBER_VALUE, NUMBER_SIGN, NUMBER_LENGTH)
    THEN
    !Bad number (as opposed to none).  Give up.
	BEGIN
	ERM (RNFCRP, 0 ,0);
	RETURN FALSE;
	END
    ELSE
	IF .NUMBER_LENGTH GTR 0
	THEN
	!A number was specified.
	!Don't know if it's a page number or chapter number yet.
	    BEGIN

	    IF .NUMBER_VALUE LSS 0
	    THEN
	    !A negative number is illegal.  Give up.
		BEGIN
		ERM (RNFCRP, 0, 0);
		RETURN FALSE;
		END;

	    HOLD_NUMBER = .NUMBER_VALUE;
	    !If another number follows, the first number was a
	    !a chapter number.  Otherwise it was a page number.

	    !The following code catches the case of "1-i" ... which would cause ERMA to
	    !wander out into space, if GETNUM is allowed to call ERMA (RNFMFN ...).
	    IF	.KHAR EQL %C'-'
		AND NOT DIGIT (CH$RCHAR (.FS_NEXT (IRA)))
	    THEN
 		BEGIN
 		ERM (RNFCRP, 0, 0);
 		RETURN FALSE;
 		END;

	    IF NOT GETNUM (.IRA, NUMBER_VALUE, NUMBER_SIGN, NUMBER_LENGTH)
	    THEN
	    !Bad number.  Give up.
		BEGIN
		ERM (RNFCRP, 0, 0);
		RETURN FALSE;
		END
	    ELSE
		IF .NUMBER_LENGTH GTR 0
		THEN
		!Got a page number. Save it.
		    BEGIN
		    PAGEN [SCT_TYP] = SCT_CHAPT;
		    PAGEN [SCT_NUMBER] = .HOLD_NUMBER;
		    PAGEN [SCT_PAGE] = ABS (.NUMBER_VALUE);
		    !Flow now merges with looking for a subpage.
		    END
		ELSE
		!There is no second number, so first number
		!is really a page number.
		    BEGIN
		    PAGEN [SCT_PAGE] = .HOLD_NUMBER
		    !Flow now merges with looking for a subpage.
		    END
	    END
	ELSE
	!No leading number, so try for letters.
	    BEGIN
	    FS_INIT (FS01);

	    IF GSLU (.IRA, FS01) NEQ GSLU_NORMAL
	    THEN
	    !User said something strange.  Give up.
		BEGIN
		ERM (RNFCRP, 0, 0);
		RETURN FALSE;
		END
	    ELSE
	    !Got something starting with a letter.
		BEGIN
		LOCAL
		    index_string_length :
%IF french %THEN
			INITIAL(5);
%ELSE
%IF italian %THEN
			INITIAL(5);
%ELSE	! The German and English words are the same length.
			INITIAL(5);
%FI %FI

		IF .FS_LENGTH (FS01) EQL .index_string_length
		THEN
		    IF CH$EQL (  .index_string_length
				,.FS_START (FS01)
				,.index_string_length
%IF french %THEN
				,CH$PTR (UPLIT ('INDEX')))
%ELSE
%IF italian %THEN
				,CH$PTR (UPLIT ('INDEX')))
%ELSE	! German and English are the same word here:
				,CH$PTR (UPLIT ('INDEX')))
%FI %FI
		    THEN
		    !User said /ORANGE:"INDEX...."
			!Merge with logic to get a page number.
			PAGEN [SCT_TYP] = SCT_INDEX
		    ELSE
		    !There are no 5 character appendix names.  Give up.
			BEGIN
			ERM (RNFCRP, 0, 0);
			RETURN FALSE;
			END
		ELSE
		!Found an appendix letter
		    BEGIN

		    !Convert string to equivalent binary value and save it.
		    PAGEN [SCT_NUMBER] = CONVLB(.FS_START(FS01), .FS_LENGTH(FS01));
		    PAGEN [SCT_TYP] = SCT_APPEND;

		    END;

		!Attempt to get a page number

		IF NOT GETNUM (.IRA, NUMBER_VALUE, NUMBER_SIGN, NUMBER_LENGTH)
		THEN
		!Bad number.  Give up.
		    BEGIN
		    ERM (RNFCRP, 0, 0);
		    RETURN FALSE;
		    END
		ELSE

		    IF .NUMBER_LENGTH GTR 0
		    THEN
			BEGIN
			PAGEN [SCT_PAGE] = ABS (.NUMBER_VALUE);
			!Merge with logic to get a subpage.
			END
		    ELSE
			PAGEN [SCT_PAGE] = 1;
		END;
	    END;

    !Try to get a subpage.
    FS_INIT (FS01);
    GSLU (.IRA, FS01);

    IF .FS_LENGTH (FS01) NEQ 0
    THEN
	PAGEN [SCT_SUB_PAGE] = CONVLB (.FS_START(FS01), .FS_LENGTH(FS01));

    RETURN TRUE;				!Success.
    END;					!End of PARSEP

END						!End of module
ELUDOM
