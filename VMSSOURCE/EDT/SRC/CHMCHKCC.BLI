%TITLE 'EDT$CHMCHKCC - check for control C'
MODULE EDT$CHMCHKCC (				! Check for control C
		IDENT = 'V04-000'			! File: CHMCHKCC.BLI Edit: REM1016
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module checks to see if a CTRL/C has been typed.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: Unknown
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 04-Feb-1981.  This module was created by
!	extracting routine EDT$$CHK_CC  from module CHANGE.BLI.
! 1-002	- Regularize headers and remove control C checking, since we intend to
!	   re-do it to support journaling.  JBS 27-Feb-1981
! 1-003	- Fix module name.  JBS 02-Mar-1981
! 1-004	- Revise journaling to support control C.  JBS 22-Jun-1981
! 1-005	- Add logic for recovering during control C.  JBS 18-Dec-1981
! 1-006	- Debug control C journaling.  JBS 24-Dec-1981
! 1-007	- Change names of control C data.  JBS 29-Dec-1981
! 1-008	- Use two words for control C counters.  JBS 30-Dec-1981
! 1-009	- Print the 'working' message from this routine.  JBS 13-Jan-1982
! 1-010	- Use symbols instead of magic numbers for control C journaling.  JBS 24-May-1982
! 1-011 - Change the format of the working message.  SMB 28-Jun-1982
! 1-012 - Figure out whether the journal buffer should be flushed. STS 28-Sep-1982
! 1-013	- Don't destroy the cursor position, it is now being maintained accurately.  JBS 07-Oct-1982
! 1-014	- Clear EDT$$G_SECOND after printing or erasing the working message, so
!	   we do not spend all our time printing the working message on slow terminals.  JBS 07-Oct-1982
! 1-015 - Move setting of EDT$$G_PUT_JOU from within the high order increment of
!	  EDT$$G_CC_CNT1_ to just after the low order increment.  It wasn't
!	  getting set and therefore, ^C handling durring /RECOVERs didn't work
!	  at all.  REM 7-Oct-1983
! 1-016 - Moved the above EDT$$G_PUT_JOU back!  Now, we set it if
!	  EDT$$G_TIN_OBUFPOS GEQ JOU_MAX.  REM 10-Oct-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$CHK_CC;				! Check to see if a CTRL/C has been typed

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

LITERAL
    JOU_MAX = 20,
    WORK_COL = 26;

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$CHK_CC  - check for control C'

GLOBAL ROUTINE EDT$$CHK_CC 			! Check for control C
    =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks to see if a CTRL/C has been typed.
!	It is called frequently enough that the response to typing a control C
!	is reasonably fast.  It keeps track of how often it has been called
!	since the last journal record was written so it can do the same during
!	recovery.
!
!	This routine is also responsible for printing the 'working' message.
!	The flag EDT$$G_SECOND is set once a second by an AST.  If it is set
!	this routine clears it and either prints or erases the 'working' message.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$A_FMT_WRRUT
!    	EDT$$G_MESSAGE_LINE
!	EDT$$G_RCOV_MOD
!	EDT$$G_CC
!	EDT$$G_CC_CNT1_LO
!	EDT$$G_CC_CNT1_HI
!	EDT$$G_CC_CNT2_LO
!	EDT$$G_CC_CNT2_HI
!	EDT$$G_CC_FLAG
!	EDT$$G_SECOND
!	EDT$$G_WORKCOUNT
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_CC_CNT1_LO
!	EDT$$G_CC_CNT1_HI
!	EDT$$G_CC_CNT2_LO
!	EDT$$G_CC_CNT2_HI
!	EDT$$G_CC_FLAG
!	EDT$$G_SECOND
!	EDT$$G_WORKCOUNT
!
! ROUTINE VALUE:
!
!	0		no control C typed
!	1		control C was typed
!
! SIDE EFFECTS:
!
!	May print or erase the 'working' message.
!
!--

    BEGIN

    EXTERNAL
	EDT$$G_PUT_JOU,				! flag to put journal buffer
	EDT$$G_TIN_OBUFPOS,			! Position in journal output buffer
	EDT$$A_FMT_WRRUT,			! Address of output formatter
	EDT$$G_MESSAGE_LINE,			! Working on this line + 1
	EDT$$G_CC : VOLATILE,			! 1 = a control C has been typed
	EDT$$G_CC_CNT1_LO,			! Counts number of "no control C's" returned.
	EDT$$G_CC_CNT1_HI,			! High half of the above
	EDT$$G_CC_CNT2_LO,			! Loaded with value from control C record
	EDT$$G_CC_CNT2_HI,			! High half of the above
	EDT$$G_CC_FLAG,				! 1 = a control C record was read or written
	EDT$$G_RCOV_MOD,			! 1 = /RECOVER
	EDT$$G_SECOND : VOLATILE,		! Set once a second
	EDT$$G_WORKCOUNT;			! Counter to support the 'working' message

    EXTERNAL ROUTINE
	EDT$$JOU_PUTREC,
	EDT$$TI_WRSTR,				! String format for working
	EDT$$OUT_FMTBUF,			! Output format buffer to terminal
	EDT$$SC_ERATOEOL,			! Erase to end of current line
	EDT$$SC_POSCSIF,			! Absolute cursor positioning
	EDT$$MSG_TOSTR,				! Write out the working message
	EDT$$TI_FLUSHJOUFI : NOVALUE;		! Write a record on the journal file

    LOCAL
	FORMAT_ROUTINE;				! Save the format routine entered with

    MESSAGES ((WORKING));
!+
! If a second has passed since we were last here, print or erase the
! 'working' message.
!-

    IF (.EDT$$G_SECOND NEQ 0)
    THEN
	BEGIN
	EDT$$G_WORKCOUNT = .EDT$$G_WORKCOUNT + 1;
	FORMAT_ROUTINE = .EDT$$A_FMT_WRRUT;
	EDT$$A_FMT_WRRUT = EDT$$TI_WRSTR;
	EDT$$SC_POSCSIF (.EDT$$G_MESSAGE_LINE + 1, WORK_COL);

	IF .EDT$$G_WORKCOUNT THEN EDT$$MSG_TOSTR (EDT$_WORKING) ELSE EDT$$SC_ERATOEOL ();

	EDT$$OUT_FMTBUF ();
	EDT$$A_FMT_WRRUT = .FORMAT_ROUTINE;
	EDT$$G_SECOND = 0;
	END;

!+
! If we are in recovery mode, use the counters to
! simulate typing a control C at the right point.
!-

    IF .EDT$$G_RCOV_MOD
    THEN
	BEGIN
!+
! If EDT$$G_CC_FLAG is zero, there has been no control C record.
!-
	IF .EDT$$G_CC_FLAG THEN
	    BEGIN
!+
! If the counters match, it is time to return a control C.
!-
	    IF ((.EDT$$G_CC_CNT1_LO EQL .EDT$$G_CC_CNT2_LO) AND (.EDT$$G_CC_CNT1_HI EQL .EDT$$G_CC_CNT2_HI))
	    THEN
		BEGIN
		EDT$$G_PUT_JOU = 1;
		RETURN (1);
		END;
	    END
	END
    ELSE
	BEGIN
!+
! We are not recovering.
!-
	IF .EDT$$G_CC
	THEN
	    BEGIN
!+
! A control C was typed.  Write out a control C record in case
! we must recover to this point, unless we have already written it.
!-
	    EDT$$G_PUT_JOU = 1;			! indicate we must do a put

	    IF (.EDT$$G_CC_FLAG EQL 0)
	    THEN
		BEGIN
		EDT$$TI_FLUSHJOUFI (%C'C');
		EDT$$G_CC_FLAG = 1;
		END;

	    RETURN (1);
	    END;
	END;

!+
! Keep track of the number of times we are called but no control C has
! been typed; that is, count the number of times we return 0.  This
! number will be written to the journal file later, when and if we see a
! control C, so that we can read it into the second counter on recovery,
! and thus return 1 at the same point in EDT's execution.
!-
    EDT$$G_CC_CNT1_LO = .EDT$$G_CC_CNT1_LO + 1;

    IF (.EDT$$G_CC_CNT1_LO EQL CC_CTR_MAX)
    THEN
	BEGIN
	EDT$$G_CC_CNT1_LO = 0;
	EDT$$G_CC_CNT1_HI = .EDT$$G_CC_CNT1_HI + 1;
	EDT$$G_PUT_JOU = 1;
	ASSERT (.EDT$$G_CC_CNT1_HI LEQ CC_CTR_MAX);
	END;

!+
! check to see if the journal buffer should be written out and
! the control-c counter restarted
!-

    IF (.EDT$$G_TIN_OBUFPOS GEQ JOU_MAX) THEN EDT$$G_PUT_JOU = 1;

    RETURN (0);

    END;			!  of EDT$$CHK_CC

!<BLF/PAGE>

END

ELUDOM
