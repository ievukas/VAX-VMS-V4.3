MODULE INSKFSCAN (			! Locate KFE entry
			IDENT = 'V04-000',
			ADDRESSING_MODE(EXTERNAL = GENERAL)
		 ) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  Install
!
! ABSTRACT:
!
!	This module contains the routine to look up a file in the known
!	file list.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, executive mode.
!
! AUTHOR:  Bob Grosso, April 1983
!
! Modified by:
!
!	V03-007	RAS0286		Ron Schaefer		 9-Apr-1984
!		Change normal failure status from 0 to RMS$_FNF so that
!		RMS searchlist processing will continue searching.
!
!	V03-006	MSH0022		Michael S. Harvey	21-Mar-1984
!		Correctly massage directory specification to eliminate
!		middle brackets when root directories are used. This
!		ensures that directories as stored in the KFDs are
!		correctly matched.
!
!	V03-005	BLS0256		Benn Schreiber		 3-Jan-1984
!		Convert square brackets to angle brackets.
!
!	V03-004	RPG0004		Bob Grosso		19-Sep-1983
!		Remove temporary external.
!
!	V03-003	RPG0003		Bob Grosso		15-Sep-1983
!		Replace the hash algorithm.
!
!	V03-002	RPG0002		Bob Grosso		July 29, 1983
!		Add some robustness to my cheesy hash algorithm.
!		Stuff file id into NAM block for a FID open.
!		
!	V03-001	RPG0001		Bob Grosso		July 7, 1983
!		Return special known file found status if file is 
!		installed open.
!
!--

!
! Include files
!

LIBRARY 'SYS$LIBRARY:LIB';			! VAX/VMS system definitions

REQUIRE	'SRC$:INSPREFIX.REQ';
REQUIRE	'LIB$:INSDEF.R32';

%SBTTL  'Declarations';
!
! PSECT DECLARATIONS:
!

PSECT
	CODE	= YF$$SYSIMGACT (WRITE);

!
! Table of contents
!
FORWARD ROUTINE
    INS$HASH;


EXTERNAL
    CTL$GL_KNOWNFIL,				! Process known file listhead queues
    EXE$GL_KNOWN_FILES : REF BBLOCK;		! Pointer to knownfil list queues

LITERAL SGN_B_KFHSHSIZ  = 128;


%SBTTL 'INS$KF_SCAN  Locate the KFE';

GLOBAL ROUTINE  INS$KF_SCAN ( KF_NAM, RET_KFE ) =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!
!  EXPLICIT INPUT:
!
!  IMPLICIT INPUT:
!
!  IMPLICIT OUTPUT:
!
!  ROUTINE VALUE:
!
!---
MAP
    KF_NAM : REF BBLOCK;

LOCAL
    DDTSTR : $BBLOCK[NAM$C_MAXRSS],
    DDTSTR_PTR,
    DDTLEN,
    PTR,
    PTR2,
    CMPKFE : REF BBLOCK,
    PRVKFE : REF BBLOCK,
    HSHIDX,
    HSHTAB : REF VECTOR [,LONG],
    KFD : REF BBLOCK;

BIND
    KFE = .RET_KFE,
    KFPB = EXE$GL_KNOWN_FILES : REF BBLOCK;

KFE = 0;			! Assume not found

IF .KFPB EQL 0 
THEN
    BEGIN
    !
    !	There is no Known file list
    !
    RETURN RMS$_FNF;
    END;

HSHTAB = .KFPB [KFPB$L_KFEHSHTAB];
HSHIDX = INS$HASH (.KF_NAM [NAM$B_NAME], .KF_NAM [NAM$L_NAME], SGN_B_KFHSHSIZ);
!
!	Search the hash bucket linked list for KFE
!
PRVKFE = HSHTAB [.HSHIDX];		! Previous KFE
CMPKFE = .HSHTAB [.HSHIDX];		! Comparison KFE
WHILE .CMPKFE NEQ 0 DO		! Single linked list ending in zero
    BEGIN
    CASE CH$COMPARE (.KF_NAM [NAM$B_NAME], .KF_NAM [NAM$L_NAME],
	    .CMPKFE [KFE$B_FILNAMLEN], CMPKFE [KFE$T_FILNAM], %C' ')
    FROM -1 TO 1 OF 		! Either less than, equal to, or greater than
	SET

	[-1]:	! Less than, therefore its not in the list
	    RETURN RMS$_FNF;
	    
	[0] :	! Found it
	    BEGIN
	    !
	    !	Build a counted ASCII string of the concatenated Device, Directory
	    !	Type strings.
	    !
	    DDTLEN = .KF_NAM [NAM$B_DEV] + .KF_NAM [NAM$B_DIR] +
			.KF_NAM [NAM$B_TYPE];	! Length of DDT string
	    DDTSTR_PTR = CH$MOVE (.KF_NAM [NAM$B_DEV], .KF_NAM [NAM$L_DEV], DDTSTR);
	    DDTSTR_PTR = CH$MOVE (.KF_NAM [NAM$B_DIR], .KF_NAM [NAM$L_DIR], .DDTSTR_PTR);
	    DDTSTR_PTR = CH$MOVE (.KF_NAM [NAM$B_TYPE], .KF_NAM [NAM$L_TYPE], .DDTSTR_PTR);
	    !
	    ! Treat square brackets like angle brackets
	    !
	    PTR = CH$FIND_CH(.DDTLEN,DDTSTR,'[');
	    IF NOT CH$FAIL(.PTR)
	    THEN
		BEGIN
		CH$WCHAR('<',.PTR);
		PTR = CH$FIND_CH(.DDTLEN-(.PTR-DDTSTR),.PTR,'[');
		IF NOT CH$FAIL(.PTR)
		THEN
		    CH$WCHAR('<',.PTR);
		END;

	    PTR = CH$FIND_CH(.DDTLEN,DDTSTR,']');
	    IF NOT CH$FAIL(.PTR)
	    THEN
		BEGIN
		CH$WCHAR('>',.PTR);
		PTR = CH$FIND_CH(.DDTLEN-(.PTR-DDTSTR),.PTR,']');
		IF NOT CH$FAIL(.PTR)
		THEN
		    CH$WCHAR('>',.PTR);
		END;

	    !
	    ! Collapse middle directory brackets from root directory
	    !

	    PTR = CH$FIND_CH(.DDTLEN,DDTSTR,'>');
	    IF NOT CH$FAIL(.PTR)
	    THEN
		BEGIN
		PTR2 = CH$FIND_CH(.DDTLEN-(.PTR+1-DDTSTR),.PTR+1,'<');
		IF NOT CH$FAIL(.PTR2)
		THEN
		    BEGIN
		    CH$MOVE(.DDTLEN-(.PTR2+1-DDTSTR),.PTR2+1,.PTR);
		    DDTLEN = .DDTLEN-(.PTR2-.PTR+1);
		    END;
		END;

	    !
	    !	Traverse the KFD list to find a KFD block with a matching DDT string.
	    !	If no match is found, record address of block after which a new KFD
	    !	block containing the new DDT string should be inserted.
	    !
	    KFD = .CMPKFE [KFE$L_KFD];
	    IF CH$COMPARE (.DDTLEN, DDTSTR,
		.KFD [KFD$B_DDTSTRLEN], KFD [KFD$T_DDTSTR], %C' ') EQL 0
	    THEN
		BEGIN
		KFE = .CMPKFE;
		IF .CMPKFE [KFE$V_OPEN]
		THEN
		    RETURN RMS$_KFF
		ELSE
		    BEGIN
		    CH$MOVE (4, CMPKFE [KFE$W_FID], KF_NAM [NAM$W_FID]);
		    KF_NAM [NAM$W_FID_RVN] = .CMPKFE [KFE$W_FID_RVN];
		    RETURN TRUE;
		    END;
		END
	    ELSE
		! Same file name, different file so keep looking
		BEGIN
		PRVKFE = .CMPKFE;
		CMPKFE = .CMPKFE [KFE$L_HSHLNK];
		END;
	    END;

	[1] :	! Greater than, keep looking
	    BEGIN
	    PRVKFE = .CMPKFE;
	    CMPKFE = .CMPKFE [KFE$L_HSHLNK];
	    END;
	TES;
    END;			! WHILE traversing hash bucket list

!
!	Have traversed whole list without finding it.
!
RETURN RMS$_FNF;

END;			! Routine INS$KF_SCAN


%SBTTL 'INS$HASH	Compute Hash table index';

GLOBAL ROUTINE  INS$HASH (LEN, ADR, SIZE) =
BEGIN
!+++
!
!  FUNCTIONAL DESCRIPTION:
!
!	Return a hash table index computed from the File name
!
!  EXPLICIT INPUT:
!
!	LEN 	Length of file name
!	ADR	Address of name string
!
!  IMPLICIT INPUT:
!
!	Assume hash table is 128 longwords
!
!---
LOCAL
    PTR,
    SUM : BYTE,
    FIRST_CHAR : BYTE;

SUM = 0;
IF .LEN EQL 0 THEN RETURN .SUM;

PTR = .ADR;
INCR INDEX FROM 1 TO .LEN DO
    BEGIN
    SUM = .SUM + ..PTR;
    PTR = .PTR + 1;
    END;

SUM = .SUM AND 127;

RETURN .SUM;
END;			! Routine INS$HASH


END		! Module INSKFSCAN
ELUDOM
