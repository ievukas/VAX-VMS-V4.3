%TITLE 'FLIPRECS -- FLIP/RUNOFF record formats'
!
! Version:	'V04-000'
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:
!   This file documents the records emitted by RUNOFF for processing by FLIP.
!
! ENVIRONMENT:
!   DSRPLUS
!
! AUTHOR: George C. Hetrick
!
! CREATION DATE: 1981
!
! MODIFIED BY:
!
!	003	KAD00003	Keith Dawson	17-May-1983
!		Made all ~_CODEs [$TINY_INTEGER]'s again. The reason for 
!		  having changed to [$INTEGER]'s in the first place has gone 
!		  away: FLIP code is now more tightly conditionalized (for
!		  the benefit of TOPS-20 mainly).
!
!	002	KAD00002	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

!
%sbttl 'FLIP/RUNOFF record types';
$LITERAL
    FLIP$K_INIT   = $DISTINCT,
    FLIP$K_RNOTXT = $DISTINCT,
    FLIP$K_TCXTXT = $DISTINCT,
    FLIP$K_TCXXTN = $DISTINCT,
    FLIP$K_TCXINI = $DISTINCT,
    FLIP$K_TOCRD  = $DISTINCT,
    FLIP$K_TOCTXT = $DISTINCT,
    FLIP$K_TOCPAG = $DISTINCT,
    FLIP$K_TOCHLI = $DISTINCT,
    FLIP$K_TOCHL  = $DISTINCT,
    FLIP$K_NEWPAG = $DISTINCT;

LITERAL
    FLIP$K_VERSION = 1;

%sbttl 'INIT -- initial FLIP record';

$FIELD
    $FLIP$INIT_FIELDS	= SET
	INIT_CODE	= [$TINY_INTEGER],	! record type
	INIT_FLAGS	= [$BYTE],		! various flags
	    $OVERLAY(INIT_FLAGS)
	INIT_CONTENTS	= [$BIT],		! was /CONTENTS specified
	    $CONTINUE
	INIT_LEVEL	= [$SHORT_INTEGER]	! FLIP version
    TES;
						! Size in UNITS
LITERAL
    FLIP$K_INIT_LENGTH = $FIELD_SET_SIZE,	! Size in FULLWORDS
    FLIP$K_INIT_SIZE = %UPVAL*$FIELD_SET_SIZE;	! Size in UNITS

MACRO
    $FLIP_INIT = BLOCK[FLIP$K_INIT_LENGTH] FIELD($FLIP$INIT_FIELDS)%;


%sbttl 'RNOTXT -- text record';

$FIELD
    $FLIP$RNOTXT_FIELDS1= SET
	RNOTXT_CODE	= [$TINY_INTEGER],	! record type
	RNOTXT_LENGTH	= [$SHORT_INTEGER]	! length of data portion
    TES;

LITERAL
    FLIP$K_RNOTXT_BASELEN = $FIELD_SET_SIZE,	! Size in FULLWORDS
    FLIP$K_RNOTXT_BASESIZ = %UPVAL*$FIELD_SET_SIZE;
						! Size in UNITS


$FIELD
    $FLIP$RNOTXT_FIELDS2= SET
	RNOTXT_FILLER	= [$SUB_BLOCK(FLIP$K_RNOTXT_BASELEN)],
	RNOTXT_TEXT	= [$SUB_BLOCK(1000)]	! TEXT segment
    TES;

LITERAL
    FLIP$K_RNOTXT_LENGTH = $FIELD_SET_SIZE,	! Size in FULLWORDS
    FLIP$K_RNOTXT_SIZE = %UPVAL*$FIELD_SET_SIZE;! Size in UNITS

MACRO
    $FLIP_RNOTXT = BLOCK[FLIP$K_RNOTXT_LENGTH] FIELD($FLIP$RNOTXT_FIELDS1,
		$FLIP$RNOTXT_FIELDS2)%;


%sbttl 'TOCTXT -- TOC text record';

$FIELD
    $FLIP$TOCTXT_FIELDS1= SET
	TOCTXT_CODE	= [$TINY_INTEGER],	! record type
	TOCTXT_MAJOR	= [$TINY_INTEGER],	! major code
	TOCTXT_MINOR	= [$TINY_INTEGER],	! minor code
	TOCTXT_LENGTH	= [$INTEGER]		! length of data portion
    TES;

LITERAL
    FLIP$K_TOCTXT_BASELEN = $FIELD_SET_SIZE,	! Size in FULLWORDS
    FLIP$K_TOCTXT_BASESIZ = %UPVAL*$FIELD_SET_SIZE;
						! Size in UNITS


$FIELD
    $FLIP$TOCTXT_FIELDS2= SET
	TOCTXT_FILLER	= [$SUB_BLOCK(FLIP$K_TOCTXT_BASELEN)],
	TOCTXT_TEXT	= [$SUB_BLOCK(1000)]	! TEXT segment
    TES;

LITERAL
    FLIP$K_TOCTXT_LENGTH = $FIELD_SET_SIZE,	! Size in FULLWORDS
    FLIP$K_TOCTXT_SIZE = %UPVAL*$FIELD_SET_SIZE;! Size in UNITS

MACRO
    $FLIP_TOCTXT = BLOCK[FLIP$K_TOCTXT_LENGTH] FIELD($FLIP$TOCTXT_FIELDS1,
		$FLIP$TOCTXT_FIELDS2)%;


%sbttl 'TOCRD -- TOC descriptor';

$FIELD
    $FLIP$TOCRD_FIELDS	= SET
	TOCRD_CODE	= [$TINY_INTEGER],	! record type
	TOCRD_MAJOR	= [$INTEGER],		! major code
	TOCRD_MINOR	= [$INTEGER]		! minor code
    TES;

LITERAL
    FLIP$K_TOCRD_LENGTH = $FIELD_SET_SIZE,	! Size in FULLWORDS
    FLIP$K_TOCRD_SIZE = %UPVAL*$FIELD_SET_SIZE;	! Size in UNITS

MACRO
    $FLIP_TOCRD = BLOCK[FLIP$K_TOCRD_LENGTH] FIELD($FLIP$TOCRD_FIELDS)%;


%sbttl 'TOCPAG -- TOC page record';

$FIELD
    $FLIP$TOCPAG_FIELDS = SET
	TOCPAG_CODE	= [$TINY_INTEGER],	! record type
	TOCPAG_PAGENO	= [$SUB_BLOCK(PAGE_SCT_SIZE)]
						! page number segment
    TES;

LITERAL
    FLIP$K_TOCPAG_LENGTH = $FIELD_SET_SIZE,	! Size in FULLWORDS
    FLIP$K_TOCPAG_SIZE = %UPVAL*$FIELD_SET_SIZE;! Size in UNITS

MACRO
    $FLIP_TOCPAG = BLOCK[FLIP$K_TOCPAG_LENGTH] FIELD($FLIP$TOCPAG_FIELDS)%;



%sbttl 'TCXXTN -- index';

$FIELD
    $FLIP$TCXXTN_FIELDS = SET
	TCXXTN_CODE	= [$TINY_INTEGER],	! record type
		$ALIGN(FULLWORD)
	TCXXTN_XTN	= [$INTEGER],		! transaction type
	TCXXTN_SCT	= [$SUB_BLOCK(PAGE_SCT_SIZE)]
						! page number segment
    TES;

LITERAL
    FLIP$K_TCXXTN_LENGTH = $FIELD_SET_SIZE,	! Size in FULLWORDS
    FLIP$K_TCXXTN_SIZE = %UPVAL*$FIELD_SET_SIZE;! Size in UNITS

MACRO
    $FLIP_TCXXTN = BLOCK[FLIP$K_TCXXTN_LENGTH] FIELD($FLIP$TCXXTN_FIELDS)%;



%sbttl 'TOCHLI -- TOC header level info record';

$FIELD
    $FLIP$TOCHLI_FIELDS = SET
	TOCHLI_CODE	= [$TINY_INTEGER],	! record type
	TOCHLI_HLLIST	= [$SUB_BLOCK(2+MAX_LEVELS)],
						! header level info
	TOCHLI_HLDSP	= [$SUB_BLOCK(MAX_LEVELS)]
						! header level display info
    TES;

LITERAL
    FLIP$K_TOCHLI_LENGTH = $FIELD_SET_SIZE,	! Size in FULLWORDS
    FLIP$K_TOCHLI_SIZE = %UPVAL*$FIELD_SET_SIZE;! Size in UNITS

MACRO
    $FLIP_TOCHLI = BLOCK[FLIP$K_TOCHLI_LENGTH] FIELD($FLIP$TOCHLI_FIELDS)%;

%sbttl 'TCXINI -- Index Header record';

$FIELD
    $FLIP$TCXINI_FIELDS = SET
	TCXINI_CODE	= [$TINY_INTEGER],	! record type
	TCXINI_HEADER	= [$INTEGER]		! TCX format indicator
    TES;

LITERAL
    FLIP$K_TCXINI_LENGTH = $FIELD_SET_SIZE,	! Size in FULLWORDS
    FLIP$K_TCXINI_SIZE = %UPVAL*$FIELD_SET_SIZE;! Size in UNITS

MACRO
    $FLIP_TCXINI = BLOCK[FLIP$K_TCXINI_LENGTH] FIELD($FLIP$TCXINI_FIELDS)%;


%sbttl 'TCXTXT -- Index TEXT record';

$FIELD
    $FLIP$TCXTXT_FIELDS1 = SET
	TCXTXT_CODE	= [$TINY_INTEGER],	! record type
		$ALIGN(FULLWORD)
	TCXTXT_ENTRY	= [$INTEGER],		! ENTRY flag
	TCXTXT_LENGTH	= [$INTEGER],		! length of data
	TCXTXT_XTN	= [$INTEGER],		! transaction number
	TCXTXT_BAR	= [$INTEGER]		! change bar flag
    TES;

LITERAL
    FLIP$K_TCXTXT_BASELEN = $FIELD_SET_SIZE,	! Size in FULLWORDS
    FLIP$K_TCXTXT_BASESIZ = %UPVAL*$FIELD_SET_SIZE;! Size in UNITS

$FIELD
    $FLIP$TCXTXT_FIELDS2 = SET
	TCXTXT_DUMMY	= [$SUB_BLOCK(FLIP$K_TCXTXT_BASELEN)],
	TCXTXT_TEXT	= [$SUB_BLOCK(1000)]	! text of entry
    TES;

LITERAL
    FLIP$K_TCXTXT_LENGTH = $FIELD_SET_SIZE,	! Size in FULLWORDS
    FLIP$K_TCXTXT_SIZE = %UPVAL*$FIELD_SET_SIZE;! Size in UNITS

MACRO
    $FLIP_TCXTXT = BLOCK[FLIP$K_TCXTXT_LENGTH] FIELD($FLIP$TCXTXT_FIELDS1,
		$FLIP$TCXTXT_FIELDS2)%;

%sbttl 'TOCHL -- HL indicator record';

$FIELD
    $FLIP$TOCHL_FIELDS = SET
	TOCHL_CODE	= [$TINY_INTEGER]	! record type
    TES;

LITERAL
    FLIP$K_TOCHL_LENGTH = $FIELD_SET_SIZE,	! Size in FULLWORDS
    FLIP$K_TOCHL_SIZE = %UPVAL*$FIELD_SET_SIZE;	! Size in UNITS

MACRO
    $FLIP_TOCHL = BLOCK[FLIP$K_TOCHL_LENGTH] FIELD($FLIP$TOCHL_FIELDS)%;
