MODULE BAS$CTRLC (				! Control C handler
		IDENT = '2-005'		! File: BASCTRLC.B32 Edit: MDL2005
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  VAX-11 BASIC Miscellaneous Support
!
! ABSTRACT:
!
!	This module contains routines for enabling, disabling, and
!	handling Control C interrupts.
!
! ENVIRONMENT:  VAX-11 User Mode
!
! AUTHOR: John Sauter, CREATION DATE: 19-FEB-1979
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 19-FEB-1979
! 1-002	- Add a handler to the AST routine to catch UNWINDS, making
!	   sure that they dismiss the AST properly.  JBS 20-FEB-1979
! 1-003	- Add BAS$$CTRLC_INIT, for the RUN command.  JBS 22-JUN-1979
! 1-004	- If a control C trap goes off but the user was not enabled,
!	   signal an INFO message to the keyboard monitor, who may
!	   wish to continue.  JBS 14-SEP-1979
! 1-005	- Use SYS$INPUT rather than TT.  JBS 20-SEP-1979
! 1-006	- Call SYS$CLRAST to clear the AST, rather than using CHMK.
!	   JBS 27-NOV-1979
! 1-007	- Do translations of SYS$INPUT until it fails to translate.
!	   JBS 24-JUL-1980
! 1-008 - Clear the AST immediately in CONTROL_C.  PLL 7-Aug-81
! 1-009 - Use LIB$GET_EF to obtain event flags for $QIOWs.  PLL 30-Nov-81
! 1-010 - Don't turn off control c's when a control c AST goes off.
!	  They should be turned off only by the RCTRLC function.  PLL 22-Jun-82
! 1-011 - Edit 010 should also have checked RUN_CMD in CONTROL_C, so that
!	  ctrlc's are always enabled in immediate mode from the VMS point of
!	  view.  PLL 6-Jul-1982
! 1-012 - make ERN and ERL available when user hits CTRL/C from inside
!	  the environment.  MDL 22-Jul-1982
! 2-001 - rewrite to use permanent AST enabling.  Also allow CTRLC function
!	  to work when program runs from a command procedure.  MDL 28-Sep-1983
! 2-002 - don't use SYS$CLRAST - it causes us to never return to where we 
!	  were before the AST occurred.  MDL 4-Jan-1984
! 2-003 - check if I/O in progress before signalling at AST level, and simply
!	  return if so.  add new routine BAS$$SIGNAL_CTRLC for use from REC
!	  level I/O routines.  Coordinated change with BAS$$REC_PROC 1-093.  
!	  MDL 12-Mar-1984
! 2-004 - RMS will only return RMS$_CONTROLC for an interrupted terminal I/O,
!	  therefore we must signal in all other cases.  MDL 3-Apr-1984
! 2-005 - only signal if we're really enabled.  MDL 10-Apr-1984
!--

!<BLF/PAGE>

!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$CTRLC,					! Enable Control C interrupts
    BAS$RCTRLC,					! Disable Control C interrupts
    BAS$$CTRLC_INIT : NOVALUE,			! Set up for RUN command
    BAS$$SIGNAL_CTRLC : NOVALUE,		! Signal the CTRL/C condition
    CONTROL_C : NOVALUE;			! Handle a Control C interrupt

!
! INCLUDE FILES:
!

REQUIRE 'RTLIN:RTLPSECT';			! Macros for defining psects

REQUIRE 'RTLIN:BASFRAME';			! BASIC frame definitions

REQUIRE 'RTLML:OTSLUB';				! LUB definitions

REQUIRE 'RTLIN:OTSLNK';				! linkage definitions

LIBRARY 'RTLSTARLE';				! Define system symbols

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare psects for BAS$ facility
!
! OWN STORAGE:
!

OWN
    TT_CHAN : UNSIGNED WORD INITIAL (WORD (0)),	! The channel the terminal is assigned on
    RUN_CMD : BYTE INITIAL (BYTE (0)),		! Set if we are in the RUN command
    CC_REALLY_ENABLED : BYTE INITIAL (BYTE (0)),! Set if the user has control C traps enabled
    CC_ENABLED_USER_PT_OF_VIEW: BYTE INITIAL (BYTE (0));
						! Set if the user thinks he has ctrl/c enabled

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$GET_EF,					! allocate an event flag
    LIB$FREE_EF,				! deallocate an event flag
    LIB$SIGNAL,					! Signal a condition
    LIB$STOP : NOVALUE,				! Signal a fatal error
    LIB$MATCH_COND,				! Match condition codes
    BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,		! Load register CCB
    BAS$$CB_POP : JSB_CB_POP NOVALUE,		! Release register CCB
    BAS$$LINE,					! get current line
    BAS$$MODULE,				! get current module name
    BAS$HANDLER;				! just need address of this

EXTERNAL
    BAS$T_ERN : BLOCK [8, BYTE] ,		! descriptor for module name
    BAS$L_ERR ,					! current error code
    BAS$L_ERL ,					! line number of error
    OTS$$V_IOINPROG : VOLATILE BITVECTOR;	! channels w/ I/O in progress


!+
! The following are the error codes used in this module.
!-

EXTERNAL LITERAL
    BAS$K_PROC__TRA,
    BAS$_PROC__TRA;				! Programmable ^C trap


GLOBAL ROUTINE BAS$CTRLC = 			! Enable Control C interrupts

!++
! FUNCTIONAL DESCRIPTION:
!
!	Enable Control C traps, so that a Control C will cause the
!	user's program to take an ON ERROR GOTO branch.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Always returns zero.
!
! SIDE EFFECTS:
!
!	Leaves Control C traps enabled if the process has a terminal.
!
!--

    BEGIN

!+
! If CTRL/C reception is not currently enabled, begin some investigation.
!-
    IF ( NOT .CC_REALLY_ENABLED )
    THEN
	BEGIN

	LOCAL
 	    ASSIGN_RESULT,
	    QIO_RESULT,
	    GETDVI_RESULT, 
	    GETJPI_RESULT, 
	    STATUS,

	    EVENT_FLAG,

	    CONTROL_CHARS : VECTOR [2, LONG] INITIAL (0, 8),

	    DEVICE_CLASS : INITIAL(0),
	    DEVNAM_DESC : BLOCK [8, BYTE],
	    DVI_RETURN_LENGTH : INITIAL(0),
	    DVI_ITEMS : VECTOR [4, LONG] INITIAL ( ((DVI$_DEVCLASS^16) OR 4),
						   DEVICE_CLASS,
						   DVI_RETURN_LENGTH,
						   0 ),

	    TERMINAL_NAME : VECTOR [256, BYTE],
	    JPI_RETURN_LENGTH : INITIAL(0),
	    JPI_ITEMS : VECTOR [4, LONG] INITIAL ( ((JPI$_TERMINAL^16) OR 256),
						   TERMINAL_NAME,
						   JPI_RETURN_LENGTH,
						   0 );

!+
! see if SYS$INPUT is a terminal device.
!-
	DEVNAM_DESC [DSC$W_LENGTH] = %CHARCOUNT ('SYS$INPUT');
	DEVNAM_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	DEVNAM_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	DEVNAM_DESC [DSC$A_POINTER] = TERMINAL_NAME [0];
	CH$MOVE (%CHARCOUNT ('SYS$INPUT'), CH$PTR (UPLIT ('SYS$INPUT')), TERMINAL_NAME [0]);

	STATUS = LIB$GET_EF (EVENT_FLAG);
	IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

	GETDVI_RESULT = $GETDVI (EFN = .EVENT_FLAG,
				 DEVNAM = DEVNAM_DESC,
				 ITMLST = DVI_ITEMS	);

	IF ( (NOT .GETDVI_RESULT) OR .DVI_RETURN_LENGTH EQL 0 )
	THEN LIB$STOP (.GETDVI_RESULT);

	STATUS = LIB$FREE_EF (EVENT_FLAG);
	IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

!+
! If SYS$INPUT is indeed a terminal device, go ahead and enable CTRL/C
! trapping to it.
!-
	IF .DEVICE_CLASS EQL DC$_TERM
	THEN
	    BEGIN
!+
! assign a channel to the terminal, if one doesn't already exist.
!-
	    IF .TT_CHAN EQLU 0
	    THEN
		BEGIN
	        ASSIGN_RESULT = $ASSIGN (DEVNAM = DEVNAM_DESC, CHAN = TT_CHAN);

		IF ( NOT .ASSIGN_RESULT) 
		THEN LIB$STOP (.ASSIGN_RESULT);
		END;

!+
! issue the QIO enabling CTRL/C reception.
!-
	    STATUS = LIB$GET_EF (EVENT_FLAG);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

	    QIO_RESULT = $QIOW (EFN = .EVENT_FLAG, 
				CHAN = .TT_CHAN, 
				FUNC = (IO$_SETMODE OR IO$M_OUTBAND OR IO$M_TT_ABORT), 
				P1 = CONTROL_C,
				P2 = CONTROL_CHARS);

	    IF ( NOT .QIO_RESULT) 
	    THEN LIB$STOP (.QIO_RESULT);

	    STATUS = LIB$FREE_EF (EVENT_FLAG);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

!+
! indicate CTRL/C recption is now enabled.
!-
	    CC_REALLY_ENABLED = 1;
	    END

	ELSE
	    BEGIN
!+
! otherwise, see if the process owns a terminal at all.
!-
	    STATUS = LIB$GET_EF (EVENT_FLAG);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

	    GETJPI_RESULT = $GETJPI (EFN = .EVENT_FLAG,
				     ITMLST = JPI_ITEMS	);

	    IF (NOT .GETJPI_RESULT) 
	    THEN LIB$STOP (.GETJPI_RESULT);

	    STATUS = LIB$FREE_EF (EVENT_FLAG);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

!+
! if so, enable CTRL/C reception to that terminal.  Otherwise, we cannot
! enable CTRL/C reception.
!-
	    IF .JPI_RETURN_LENGTH NEQ 0 
	    THEN
		BEGIN
		DEVNAM_DESC [DSC$W_LENGTH] = CH$FIND_CH ( 256, 
							  CH$PTR (TERMINAL_NAME),
							  '') - 
					     CH$PTR (TERMINAL_NAME);
		DEVNAM_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
		DEVNAM_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
		DEVNAM_DESC [DSC$A_POINTER] = TERMINAL_NAME [0];

!+
! assign a channel to the terminal, if one doesn't already exist.
!-
		IF .TT_CHAN EQLU 0
		THEN
		    BEGIN
	            ASSIGN_RESULT = $ASSIGN (DEVNAM = DEVNAM_DESC, CHAN = TT_CHAN);

	            IF ( NOT .ASSIGN_RESULT) 
	            THEN LIB$STOP (.ASSIGN_RESULT);
		    END;

!+
! issue the QIO enabling CTRL/C reception.
!-
	        STATUS = LIB$GET_EF (EVENT_FLAG);
	        IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

	        QIO_RESULT = $QIOW (EFN = .EVENT_FLAG, 
				    CHAN = .TT_CHAN, 
				    FUNC = (IO$_SETMODE OR IO$M_OUTBAND OR IO$M_TT_ABORT), 
				    P1 = CONTROL_C,
				    P2 = CONTROL_CHARS);

	        IF ( NOT .QIO_RESULT) 
	        THEN LIB$STOP (.QIO_RESULT);

	        STATUS = LIB$FREE_EF (EVENT_FLAG);
	        IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

!+
! indicate CTRL/C recption is now enabled.
!-
	        CC_REALLY_ENABLED = 1;
		END;

	    END;	! Else

    END;	! If not CC_REALLY_ENABLED

!+
! indicate the CTRL/C reception is now enabled from the point of view
! of the user.
!-
    CC_ENABLED_USER_PT_OF_VIEW = 1;

!+
! the CTRLC function always returns zero.
!-
    RETURN (0);
    END;					! end of BAS$CTRLC


GLOBAL ROUTINE BAS$RCTRLC = 			! Disable Control C interrupts

!++
! FUNCTIONAL DESCRIPTION:
!
!	Disable Control C traps, so that a Control C will cause the
!	user's program to stop, as usual.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns zero.
!
! SIDE EFFECTS:
!
!	Leaves Control C traps disabled.
!
!--

    BEGIN

    LOCAL
	EVENT_FLAG,
	STATUS,
	QIO_RESULT;

!+
! Only turn CTRL/C reception off if it is currently on, and we're NOT in
! the environment (RUN_CMD).  CTRL/C reception should always be enabled
! (from the point of view of the user) when running in the environment.
!-

    IF ((.TT_CHAN NEQU 0) AND ( .CC_REALLY_ENABLED ))
    THEN
	BEGIN
!+
! If we are in the RUN command (where control Cs should always remain
! enabled) or if control Cs are not enabled, don't issue the QIO.
!-

	IF ( NOT .RUN_CMD)
	THEN
	    BEGIN

	    STATUS = LIB$GET_EF (EVENT_FLAG);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);	

!+
! We disable reception of CTRL/C ASTs by issuing a $CANCEL on the channel.
!-
	    QIO_RESULT = $CANCEL ( CHAN = .TT_CHAN);

	    IF ( NOT .QIO_RESULT) THEN LIB$STOP (.QIO_RESULT);

	    STATUS = LIB$FREE_EF (EVENT_FLAG);
	    IF (NOT .STATUS) THEN LIB$STOP (.STATUS);

	    CC_REALLY_ENABLED = 0;
	    END;

!+
! Indicate that the user does not want control C traps.
!-
	END;

    CC_ENABLED_USER_PT_OF_VIEW = 0;

    RETURN (0);
    END;					! end of BAS$RCTRLC


GLOBAL ROUTINE BAS$$CTRLC_INIT : NOVALUE = 	! Set up for RUN command

!++
! FUNCTIONAL DESCRIPTION:
!
!	Set up for the RUN environment.  Since this image is to run under the RUN
!	command, control C traps are always enabled, from the point of view of
!	VMS.  If one goes off when the user has not enabled for control C traps,
!	the user is not allowed to intercept the signal (because of its severity)
!	and the keyboard monitor gets it instead.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Leaves Control C traps disabled from the user's point of view, but
!	enabled from VMS's point of view.
!
!--

    BEGIN
!+
! Make sure the $ASSIGN and $QIO have been done.
!-
    BAS$CTRLC ();
!+
! Flag that we are in the RUN environment.  This will prevent the
! Control C enable from being turned off, from the point of view
! of VMS.
!-
    RUN_CMD = 1;
!+
! Turn control C enable off from the user's point of view.
!-
    BAS$RCTRLC ();
    RETURN;
    END;					! end of BAS$$CTRLC_INIT


GLOBAL ROUTINE BAS$$SIGNAL_CTRLC : NOVALUE = 	! Signal CTRL/C

!++
! FUNCTIONAL DESCRIPTION:
!
!	Signals CTRL/C to the BASIC program.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Calls the user's code by Signaling.
!	If the user is not enabled (which means that the program must
!	be being run under the RUN command) then the signal goes to
!	the keyboard monitor, which may do a continue or an unwind.
!
!--

    BEGIN

    LOCAL
	COND_VAL : BLOCK [4, BYTE],
	FMP :	REF BLOCK [0,BYTE] FIELD (BSF$FCD),
	MOD_NAME_ADDR;

    BUILTIN
	FP;

!+
! if we're not really enabled, don't bother signalling.
!-
    IF NOT .CC_REALLY_ENABLED
    THEN
	RETURN;

!+
! Search for a BASIC major frame.
!-
    FMP = .FP;

    WHILE ( (.FMP NEQ 0) AND (.FMP [BSF$A_HANDLER] NEQA BAS$HANDLER) )
    DO
    	BEGIN
    	FMP = .FMP [BSF$A_SAVED_FP];
    	END;

!+
! get current error line (ERL) and error module (ERN$), and define current 
! error as "Programmable ^C trap".
!-
    IF (.FMP NEQ 0)
    THEN
    	BEGIN
	BAS$L_ERL = BAS$$LINE (.FMP);
    	MOD_NAME_ADDR = BAS$$MODULE (.FMP);
	BAS$T_ERN [DSC$A_POINTER] = .MOD_NAME_ADDR + 1;
	BAS$T_ERN [DSC$W_LENGTH] = .BLOCK [.MOD_NAME_ADDR, 0, 0, 8, 0; 1, BYTE];
	BAS$T_ERN [DSC$B_CLASS] = DSC$K_CLASS_S;
	BAS$T_ERN [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    	BAS$L_ERR = BAS$K_PROC__TRA;
    	END;

!+
! Now signal the appropriate BASIC condition for Control C.  By default, the
! severity for CTRL/C is ERROR.  If the user is not enabled, signal information.
! BAS$HANDLER will gain control when the exception is signalled, and check the
! severity.  If it is ERROR, then the assumption is that the user has a handler
! for CTRL/C and the user's handler is called.  Otherwise (informational),
! control will be returned to KMON (environment) or DCL (run from DCL).
!-
    COND_VAL = BAS$_PROC__TRA;

    IF ( NOT .CC_ENABLED_USER_PT_OF_VIEW) 
    THEN COND_VAL [STS$V_SEVERITY] = STS$K_INFO;

    LIB$SIGNAL (.COND_VAL);

!+
! If we get to here, then the program was being run from the environment, the
! user had no CTRL/C handler, and the keyboard monitor received the CONTINUE 
! command.  Dismiss the AST (done automatically by returning).
!-
    RETURN;
    END;					! end of BAS$$SIGNAL_CTRLC


ROUTINE CONTROL_C : NOVALUE = 			! Handle a Control C interrupt

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the RTL AST routine for CTRL/C's deliered to BASIC programs.
!	It handles the Control C interrupt, and may signal it to the BASIC 
!	program, depending on whether I/O was interrupted or not.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	May call the user's code by Signaling.
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    LOCAL
	COND_VAL : BLOCK [4, BYTE],
	FMP :	REF BLOCK [0,BYTE] FIELD (BSF$FCD),
	MOD_NAME_ADDR;

    BUILTIN
	FP;

!+
! search for I/O active; if I/O is active on any channel then assume
! this AST interrupted it.  
!-
    INCR LUN FROM 0 TO LUB$K_LUN_MAX DO
	BEGIN
	    IF ( .OTS$$V_IOINPROG [.LUN] NEQU 0 )
	    THEN
		!+
		! I/O is active.  Push the channel and see if this is a
		! forcible (i.e., terminal) device.
		!-
		BEGIN
		BAS$$CB_PUSH ( .LUN + LUB$K_ILUN_MIN, LUB$K_ILUN_MIN );
		IF .CCB [LUB$V_FORCIBLE]
		THEN
		    !+
		    ! this is indeed a terminal device.  pop this channel and
		    ! return.  the record level routines will notice the 
		    ! RMS$_CONTROLC return status and signal.
		    !
		    ! note that returning dismisses the AST.
		    !-
		    BEGIN
			BAS$$CB_POP ();
			RETURN;
		    END;

		!+
		! not a terminal device on this channel.  pop the channel
		! and continue looking.
		!-
		BAS$$CB_POP ();

		END;
	END;

!+
! An I/O was not interrupted, or I/O to a device other than a terminal was
! interrupted.  Signal the CTRLC condition at this time.
!-
    BAS$$SIGNAL_CTRLC();

    RETURN;
    END;					! end of CONTROL_C

END						! end of module BAS$CTRLC
ELUDOM
