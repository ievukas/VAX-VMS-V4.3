%TITLE 'SCR$MISC - Misc. routines for the screen package'
MODULE SCR$MISC (
		IDENT = 'V04-000'	! File: SCRMISC.B32 Edit: PLL1005
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Screen Management
!
! ABSTRACT:
!
!	This module contains routines which can perform their functions
!	independently of the other screen routines.  These include 
!	information reporting and initialization routines.
!
! ENVIRONMENT:	User mode, Shared library routines.
!
! AUTHOR: P. Levesque, CREATION DATE: 18-Oct-1982
!
! MODIFIED BY:
!
! 1-001	- Original.  PLL 18-Oct-1982
! 1-002 - Use VMS logicals to point to require files.  PLL 24-Jan-1983
! 1-003 - GET_CHAR should move a byte, not word, to pagesize.
!         PLL 31-Jan-1983
! 1-004 - In GET_CHAR, if the terminal is not a vt52 or vt100, skip
!	  call to SCR$PUT_SCREEN to output mode setting.  PLL 19-Jul-1983
! 1-005 - A fix to the parameter checking in LIB$SCREEN_INFO so that omitted
!	  parameters are handled correctly.  PLL 21-Aug-1984
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE

!    The LIB$ entry points

	LIB$SCREEN_INFO,		! Screen information retrieval
	LIB$SET_OUTPUT,			! Establish terminal for output

!    The SCR$ entry points

	SCR$SCREEN_INFO,		! Screen information retrieval
	SCR$SET_OUTPUT,			! Establish terminal for output
	SCR$STOP_OUTPUT,		! Stop output to terminal or screen buffer

!    Local subroutines
	CREATE,			! Create an RMS file
	EXIT_HANDLER,		! Image exit handler
	GET_CHAR;		! Get terminal characteristics


! The following is equated via a GLOBAL BIND
!	LIB$STOP_OUTPUT = SCR$STOP_OUTPUT

!
! INCLUDE FILES
!

REQUIRE 'SRC$:SCRPROLOG';		! defines psects, macros, tcb,
					!  wcb, & terminal symbols
REQUIRE 'LIB$:STRLNK';			! Linkage to LIB$ANALYZE_SDESC_R2
OWN
    SCR$EXITBLOCK   : VECTOR [4] INITIAL (0, 0, 1, 0),
					! 1st longword is ?
					! 2nd longword is exit handler
					! 3rd longword is ?
					! 4th longword is exit status
    SCR$L_EXITSTS ;			! filled in before exit handler
					! called

!+
! $GETDVI storage
! ---------------
!-
OWN
    SCR$AB_DEVCLASS,
    SCR$AB_DEVTYPE,
    SCR$AW_DEVBUFSIZ,
    SCR$AL_DEVDEPEND;
GLOBAL
    SCR$AL_DEVDEPND2 : BLOCK [4, BYTE] ;

OWN
    SCR$A_ITMLST : VECTOR [5*3 + 1] INITIAL (
			DVI$_DEVCLASS   ^16 + 4, 0, 0,
			DVI$_DEVTYPE    ^16 + 4, 0, 0,
			DVI$_DEVBUFSIZ  ^16 + 4, 0, 0,
			DVI$_DEVDEPEND  ^16 + 4, 0, 0,
			DVI$_DEVDEPEND2 ^16 + 4, 0, 0,
			0 ) ;
BIND
    SCR$_INFOCLASS = SCR$A_ITMLST + 4,
    SCR$_INFOTYPE  = SCR$A_ITMLST + 16,
    SCR$_INFOSIZ   = SCR$A_ITMLST + 28,
    SCR$_INFODEP   = SCR$A_ITMLST + 40,
    SCR$_INFODEP2  = SCR$A_ITMLST + 52 ;

!
! EXTERNAL REFERENCES
!

EXTERNAL ROUTINE
    SCR$$GET_TYPE_R3 : GET_TYPE_LINK, ! Get device type
    LIB$ANALYZE_SDESC_R2 : LIB$ANALYZE_SDESC_JSB_LINK,
    LIB$ASSIGN,			! Assign a channel
    LIB$FREE_EF,		! Free a local event flag number
    LIB$FREE_VM,		! Heap storage deallocator
    LIB$GET_EF,			! Get a local event flag number
    LIB$GET_VM,			! Heap storage allocator
    LIB$LP_LINES,		! Default lines per page
    SCR$PUT_SCREEN,		! Put text to screen
    SCR$SET_SCROLL;		! Set a scrolling region

EXTERNAL
    SCR$L_CUROUTPUT : REF BLOCK [, BYTE], ! Pointer to current TCB
    SCR$L_FLINKHEAD;		! Head of chain of TCB's
!<BLF/PAGE>

%SBTTL 'LIB$SCREEN_INFO - Screen Information Retrieval'
GLOBAL ROUTINE LIB$SCREEN_INFO (
				FLAGS		: REF VECTOR [,LONG],
				DEV_TYPE	: REF VECTOR [,BYTE],
				LINE_WIDTH	: REF VECTOR [,WORD],
				LINES_PER_PAGE	: REF VECTOR [,WORD]
				) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine 
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$SCREEN_INFO (FLAGS.wl.r
!					    [,DEV_TYPE.wb.r 
!					    [,LINE_WIDTH.ww.r
!					    [,LINES_PER_PAGE.ww.r]]])
!
! FORMAL PARAMETERS:
!
!	FLAGS.wl.r	Rendition code for current window.
!			Values:
!			    SCR$M_BLINK  	display characters blinking.
!			    SCR$M_BOLD  	display characters in
!					  	higher-than-normal intensity.
!			    SCR$M_NORMAL  	display characters using
!					  	rendition associated with
!					  	window.
!			    SCR$M_REVERSE  	display characters in reverse
!					  	video -- i.e., using opposite
!					  	rendition from window default.
!			    SCR$M_UNDERLINE  	display characters underlined.
!
!	DEV_TYPE.wb.r 		Optional.
!
!	LINE_WIDTH.ww.r		Optional.
!
!	LINES_PER_PAGE.ww.r	Optional.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER ;

    LOCAL
	LOC_BUFFER : BLOCK [SCR$K_LENGTH, BYTE] ;	! Local buffer

!+
! Get terminal information into our local buffer.
!-
    SCR$SCREEN_INFO ( LOC_BUFFER ) ;

!+
! If no args, just return.
!-
    IF ACTUALCOUNT() EQL 0
    THEN
	RETURN ( SS$_NORMAL ) ;

!+
! If FLAGS argument present, return the FLAGS value.
!-
    IF ACTUALCOUNT() GEQ 1
    THEN
	BEGIN
	IF ACTUALPARAMETER(1) NEQ 0
	THEN
	    FLAGS[0] = .LOC_BUFFER [SCR$L_FLAGS] 
	END
    ELSE
	RETURN ( SS$_NORMAL ) ;

!+
! If DEV_TYPE argument present, return the DEV_TYPE value.
!-
    IF ACTUALCOUNT() GEQ 2
    THEN
	BEGIN
	IF ACTUALPARAMETER(2) NEQ 0
	THEN
	    DEV_TYPE[0] = .LOC_BUFFER [SCR$B_DEVTYPE] 
	END
    ELSE
	RETURN ( SS$_NORMAL ) ;

!+
! If LINE_WIDTH argument present, return the LINE_WIDTH value.
!-
    IF ACTUALCOUNT() GEQ 3
    THEN
	BEGIN
	IF ACTUALPARAMETER(3) NEQ 0
	THEN
	    LINE_WIDTH[0] = .LOC_BUFFER [SCR$W_WIDTH] 
	END
    ELSE
	RETURN ( SS$_NORMAL ) ;

!+
! If LINES_PER_PAGE argument present, return the LINES_PER_PAGE value.
!-
    IF ACTUALCOUNT() GEQ 4
    THEN
	IF ACTUALPARAMETER(4) NEQ 0
	THEN
	    LINES_PER_PAGE[0] = .LOC_BUFFER [SCR$W_PAGESIZE] ;

    RETURN ( SS$_NORMAL ) ;

    END;				! End of routine LIB$SCREEN_INFO
!<BLF/PAGE>

%SBTTL 'LIB$SET_OUTPUT - Set Terminal or Screen Buffer for Output'
GLOBAL ROUTINE LIB$SET_OUTPUT (
				CHAN	     : REF VECTOR [,WORD],
				FILE_SPEC    : REF BLOCK [,BYTE],
				USER_ROUTINE : REF VECTOR [,LONG],
				USER_ARG     : REF VECTOR [,LONG],
				STREAM       : REF VECTOR [,LONG]
			      ) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets up a device to receive output.  If this is
!	the first call, obtain device characteristics.
!
!	If this is the first call for the screen than a screen
!	control block is allocated, a channel is assigned, device
!	characteristics are obtained.  If it is an unknown device then
!	the channel is deassigned (no QIO output).  If a file
!	specification is present and no user routine is declared then
!	the file is opened via RMS.
!
!	At output time the user-supplied routine, if present, will be
!	called with the following parameters:
!
!		AP -->	4
!			Optional user supplied argument.
!			Address of channel number (0 if none)
!			Address of string dsc to output
!			Address of stream number
!
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$SET_OUTPUT (CHAN.rw.r
!					   [,FILE_SPEC.rt.dx 
!					   [,USER_ROUTINE.zem.rp
!					   [,USER_ARG.rl.r 
!					   [,STREAM.wl.r]]]]
!
! FORMAL PARAMETERS:
!
!	CHAN.rw.r		Address of stream number.
!
!	FILE_SPEC.rt.dx 	Optional.  Address of descriptor of
!				file specification.
!
!	USER_ROUTINE.zem.rp	Optional.  Address of output routine to
!				call for output.
!
!	USER_ARG.rl.r 		Optional.  Address of argument to be
!				passed to user-specified output routine.
!
!	STREAM.wl.r		Optional.  Address of longword to
!				receive previous stream.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	ACTUALPARAMETER,
	CALLG ;

    LOCAL
	NEW_CALL_LIST : VECTOR [6] ;	! More be one longword longer
					! than maximum number of 
					! arguments to this routine.

!+
! Constuct a new call list which is our original call list including
! the number of arguments.
!-
    DECR I FROM ACTUALCOUNT() TO 0
    DO
	BEGIN
	NEW_CALL_LIST[.I] = ACTUALPARAMETER(.I) ;
	END;

!+
! Promote the CHAN argument to by-value in our new call list.
!-
    NEW_CALL_LIST[1] = ..NEW_CALL_LIST[1] ;

    RETURN ( CALLG ( NEW_CALL_LIST, SCR$SET_OUTPUT )) ;

    END;				! End of routine LIB$SET_OUTPUT
!<BLF/PAGE>

%SBTTL 'LIB$STOP_OUTPUT - Stop Output to Terminal or Screen Buffer'
! GLOBAL ROUTINE LIB$STOP_OUTPUT (
!				  CHAN : REF VECTOR [,WORD]
!			         ) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine deaccesses a stream established for output.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$STOP_OUTPUT (CHAN.rw.r)
!
! FORMAL PARAMETERS:
!
!	CHAN.rw.r	Address of channel number
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!
! SIDE EFFECTS:
!
!	The channel or ISI is deassigned.
!--

!+
! Equate to SCR$ entry point.
!-

GLOBAL BIND ROUTINE LIB$STOP_OUTPUT = SCR$STOP_OUTPUT ;
!<BLF/PAGE>

%SBTTL 'SCR$SCREEN_INFO - Get Screen Information'
GLOBAL ROUTINE SCR$SCREEN_INFO (
				CONTROL_BLOCK : REF BLOCK [,BYTE]
			       ) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine obtains information about the current output
!	screen.  It returns this information in the user-specified
!	buffer.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SCR$SCREEN_INFO (CONTROL_BLOCK.wab.r)
!
! FORMAL PARAMETERS:
!
!	CONTROL_BLOCK.wab.r	Address of buffer to receive information
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN
    LOCAL
	DEV_TYPE,		! Device type
	STATUS,
	TCB : REF BLOCK [,BYTE] ;	! Address of current terminal
					! control block


    STATUS = SCR$$GET_TYPE_R3 (-1; TCB, DEV_TYPE) ;	
					! Get current terminal control block
    IF NOT .STATUS THEN RETURN (.STATUS);

    CONTROL_BLOCK [SCR$L_FLAGS] = 0 ; ! Preset to zero

    IF .DEV_TYPE NEQ UNKNOWN
    THEN
	BEGIN
	IF .DEV_TYPE NEQ VTFOREIGN
	THEN
	    CONTROL_BLOCK [SCR$L_FLAGS] = 
			.CONTROL_BLOCK [SCR$L_FLAGS] OR SCR$M_SCREEN ;
	END;

    CONTROL_BLOCK [SCR$B_DEVTYPE]   = .TCB [SCR$B_DEVTYP] ;
    CONTROL_BLOCK [SCR$W_WIDTH]     = .TCB [SCR$W_DEVWIDTH] ;
    CONTROL_BLOCK [SCR$W_PAGESIZE]  = .TCB [SCR$W_DEVPAGSIZ] ;

!+
! Move bits
!-
    BEGIN	! Bit movement
    BIND SOURCE_FIELD = TCB [SCR$L_DEVDEPND2] ;
    BIND DEST_FIELD   = CONTROL_BLOCK [SCR$L_FLAGS] ;

    MAP SOURCE_FIELD : BLOCK [,BYTE],
        DEST_FIELD   : BLOCK [,BYTE];

    DEST_FIELD [SCR$V_ANSICRT]   = .SOURCE_FIELD [TT2$V_ANSICRT] ;
    DEST_FIELD [SCR$V_REGIS]     = .SOURCE_FIELD [TT2$V_REGIS] ;
    DEST_FIELD [SCR$V_BLOCK]     = .SOURCE_FIELD [TT2$V_BLOCK] ;
    DEST_FIELD [SCR$V_AVO]       = .SOURCE_FIELD [TT2$V_AVO] ;
    DEST_FIELD [SCR$V_EDIT]      = .SOURCE_FIELD [TT2$V_EDIT] ;
    DEST_FIELD [SCR$V_DECCRT]    = .SOURCE_FIELD [TT2$V_DECCRT] ;
    END ;	! Bit movement
	
    RETURN (SS$_NORMAL);
    END;				! End of routine SCR$SCREEN_INFO
!<BLF/PAGE>

%SBTTL 'SCR$SET_OUTPUT - Establish Terminal for Output'
GLOBAL ROUTINE SCR$SET_OUTPUT (
				STREAM       :     VECTOR [,WORD],
				FILE_SPEC    : REF BLOCK [,BYTE],
				USER_ROUTINE : REF VECTOR [,LONG],
				USER_ARG     : REF VECTOR [,LONG],
				OLD_STREAM   : REF VECTOR [,WORD]
			      ) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine sets up a device to receive output.  If this is
!	the first call, obtain device characteristics.
!
!	If this is the first call for the screen than a screen
!	control block is allocated, a channel is assigned, device
!	characteristics are obtained.  If it is an unknown device then
!	the channel is deassigned (no QIO output).  If a file
!	specification is present and no user routine is declared then
!	the file is opened via RMS.
!
!	At output time the user-supplied routine, if present, will be
!	called with the following parameters:
!
!		AP -->	4
!			Optional user supplied argument.
!			Address of channel number (0 if none)
!			Address of string dsc to output
!			Address of stream number
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SCR$SET_OUTPUT (STREAM.rw.v
!					   [,FILE_SPEC.rt.dx 
!					   [,USER_ROUTINE.zem.rp
!					   [,USER_ARG.rl.r 
!					   [,OLD_STREAM.wl.r]]]] )
!
! FORMAL PARAMETERS:
!
!	STREAM.rw.v		Stream number.
!
!	FILE_SPEC.rt.dx 	Optional.  Address of descriptor of
!				file specification.
!
!	USER_ROUTINE.zem.rp	Optional.  Address of output routine to
!				call for output.
!
!	USER_ARG.rl.r 		Optional.  Address of argument to be
!				passed to user-specified output routine.
!
!	OLD_STREAM.wt.dx	Optional.  Address of longword to
!				receive previous stream.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

! $FIND_TCB
! This macro searches down the threaded list of TCB's trying to find
! the one whose SCR$L_STREAM field matches STREAM.  If found, FOUND
! is set to the matching TCB address.  If we run off end of threaded
! list before finding match, FOUND is set to 0.
!-
MACRO    $FIND_TCB (FOUND) =
    BEGIN
    NEXT = .SCR$L_FLINKHEAD ;		! Initialize to 1st

!+
! Search down chain of TCB's until we reach the one whose
! SCR$L_STREAM field matches STREAM or reach end of chain 
! (indicated by a zero forward link).
!-
    FOUND = 0 ;		! Init to not-found
    WHILE .NEXT NEQ 0
    DO
	BEGIN		! Search for desired TCB or end of list
	IF .NEXT [SCR$L_STREAM] EQL .STREAM [0]
	THEN
	    BEGIN
	    FOUND = .NEXT ;
	    EXITLOOP ;	! Break out of search loop
	    END;

	NEXT = .NEXT [SCR$L_FLINK] ; ! Advance pointer down chain
	END ;		! Search for desired TCB or end of list

    END;
	     % ; ! End of macro $FIND_TCB

    LOCAL
	FOUND : REF BLOCK [, BYTE],     ! Pointer to Terminal Control
					! block used by $FIND_TCB
	NEXT : REF BLOCK [,BYTE],	! Pointer to Terminal Control
					! block used by $FIND_TCB
	TCB : REF BLOCK [, BYTE] ;	! Pointer to a Terminal Control
					! block

    IF .SCR$L_CUROUTPUT EQL 0	! If no current TCB
    THEN
	BEGIN	! No current TCB
	$FIND_TCB (FOUND) ;
	END	! No current TCB
    ELSE
	BEGIN 	! Current TCB exists
	TCB = .SCR$L_CUROUTPUT ;
	FOUND = .TCB ;
	IF .TCB [SCR$L_STREAM] NEQ .STREAM [0]
	THEN
	    BEGIN	! Not the one we want
	    $FIND_TCB (FOUND) ;
	    END;	! Not the one we want
	END; 	! Current TCB exists

!+
! Reach here when we have found desired TCB or have exhausted chain.
! Decide which, and treat appropriately.
!-
    IF .FOUND EQL 0
    THEN
	BEGIN	! Ran off end of list, must build new TCB
	LOCAL
	    TYPE,		! Device type returned by GET_CHAR
	    AREA,		! pagesize * page width
	    TOT_SPACE,		! Total buffer space to get from GET_VM
	    STATUS,		! Status for subroutine calls --
				! returned to user if not success

	    LOC_DESC : BLOCK [8, BYTE] ; ! Local fixed-length string
					 ! descriptor.
	!+
	! If exit handler hasn't been established, do it now.
	!-
	IF .SCR$EXITBLOCK[1] EQL 0
	THEN
	    BEGIN	! Set up exit handler
	    LOCAL
		STATUS ; ! Locally used status
	    SCR$EXITBLOCK [1] = EXIT_HANDLER ;
	    SCR$EXITBLOCK [3] = SCR$L_EXITSTS ;
	    IF NOT (STATUS = $DCLEXH ( DESBLK = SCR$EXITBLOCK[0]))
	    THEN
		RETURN (.STATUS );
	    END;	! Set up exit handler

	!+
	! Allocate space for a new TCB
	!-
	IF NOT (STATUS = LIB$GET_VM ( %REF (SCR$C_SIZE), TCB ))
	THEN
	    RETURN (.STATUS) ;

	!+
	! Clear new TCB to zero and link it into our chain of TCB's
	!-
	CH$FILL ( 0, SCR$C_SIZE, TCB [SCR$L_FLINK]) ;
	TCB [SCR$L_FLINK] = .SCR$L_FLINKHEAD ;	! This TCB's forward
						! pointer = current
						! list header contents
	SCR$L_FLINKHEAD = TCB [SCR$L_FLINK] ;	! List head points to
						! new TCB

	TCB [SCR$L_STREAM] = .STREAM [0] ;	! Plug in stream id

	TCB [SCR$L_BUFSIZ] = BUFSIZE ;	! Buffer size we'll use

	!+
	! Set up optional arguments
	!-
	IF NOT NULLPARAMETER (5)
	THEN
	    OLD_STREAM [0] = (IF .SCR$L_CUROUTPUT EQL 0 
			      THEN 0
			      ELSE .SCR$L_CUROUTPUT [SCR$L_STREAM]) ;

	SCR$L_CUROUTPUT = .TCB ; ! Establish this TCB as current

	TCB [SCR$L_RTNADDR] = ( IF NULLPARAMETER (3)
				THEN 0
				ELSE USER_ROUTINE [0] ) ;

	TCB [SCR$L_RTNARG]  = ( IF NULLPARAMETER (4)
				THEN 0
				ELSE USER_ARG [0] ) ;

	!+
	! If user supplied a file spec use it, else use default filespec
	! of SYS$OUTPUT.
	!-
	LOC_DESC [DSC$B_CLASS] = DSC$K_CLASS_S ;
	LOC_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T ;
	IF NOT NULLPARAMETER (2)
	THEN
	    BEGIN	! User-supplied file spec
	    IF NOT (STATUS = 
		 LIB$ANALYZE_SDESC_R2 ( .FILE_SPEC ;
					LOC_DESC [DSC$W_LENGTH],
					LOC_DESC [DSC$A_POINTER] ))
	    THEN
		RETURN (.STATUS ) ;
	    END		! User-supplied file spec
	ELSE
	    BEGIN	! Use default file spec
	    LOC_DESC [DSC$W_LENGTH]  = %CHARCOUNT   ('SYS$OUTPUT') ;
	    LOC_DESC [DSC$A_POINTER] = UPLIT ( BYTE ('SYS$OUTPUT')) ;
	    END;	! Use default file spec

	!+
	! Assign a channel
	!-
	IF NOT (STATUS = LIB$ASSIGN ( LOC_DESC, TCB [SCR$W_CHAN] ))
	THEN
	    RETURN (.STATUS) ;

	!+
	! Determine type of terminal and if known type get a local
	! event flag number to use while doing QIO's to it.  If we
	! can't get an event flag number, quit.
	!-
	GET_CHAR ( .TCB, TYPE ) ;
	IF .TYPE NEQ 0
	THEN
	    BEGIN ! Known type
	    LOCAL
		STATUS ;	! Local status

	    IF NOT (STATUS = LIB$GET_EF ( TCB [SCR$L_EFN]))
	    THEN
		RETURN (.STATUS ) ;

	    RETURN ( SS$_NORMAL) ;
	    END;  ! Known type

	!+
	! Reach here if unknown terminal or not a terminal -- deassign
	! QIO channel.
	!-
	IF NOT (STATUS = $DASSGN ( CHAN = .TCB [SCR$W_CHAN]))
	THEN
	    RETURN (.STATUS ) ;

	TCB [SCR$W_CHAN] = 0 ;	! Clear channel number

	IF .TCB [SCR$L_RTNADDR] EQL 0
	THEN
	    BEGIN	! No user-specified call back
	    IF NOT NULLPARAMETER (2)
	    THEN
		BEGIN	! Filespec supplied
		LOCAL
		    LENGTH,	! returned by LIB$ANALYZE SDESC_R2
		    ADDR,	! addr. returned by LIB$ANALYZE_SDESC_R2
		    STATUS ;	! Local status
		IF NOT (STATUS = LIB$ANALYZE_SDESC_R2 ( .FILE_SPEC ;
						        LENGTH,
							ADDR ))
		THEN
		    RETURN ( .STATUS ) ;

		IF NOT (STATUS = CREATE ( TCB [SCR$L_FLINK], LENGTH, 
					  ADDR ))
		THEN
		    RETURN (.STATUS ) ;
		END ;	! Filespec supplied
	    END ;	! No user-specified call back
	

	!+
	! Allocate and initialize map buffers necessary to emulate 
	! advanced VDT features when outputing to hardcopy, disk, or 
	! limited VDT's.
	!
	! A contiguous space composed of the following parts is allocated:
	! 	Name			Size
	!  character map	area = device length * width
	!  attribute map	area
	!  modified map		area/8 + 1 (bit map size in bytes)
	!-
	AREA = .TCB [SCR$W_DEVPAGSIZ] * .TCB [SCR$W_DEVWIDTH] ;
	TOT_SPACE = (.AREA/%BPUNIT) + 1 + (2 * .AREA) ;
	IF NOT (STATUS = LIB$GET_VM ( TOT_SPACE, TCB [SCR$L_CHARMAP] ))
	THEN
	    RETURN ( .STATUS ) ;

	TCB [SCR$L_AREA] = .AREA ;
	CH$FILL (%C' ', .AREA, .TCB [SCR$L_CHARMAP]) ;
				! space fill character map
        TCB [SCR$L_ATTRMAP] = .TCB [SCR$L_CHARMAP] + .AREA ;
	TCB [SCR$L_MODFMAP] = .TCB [SCR$L_CHARMAP] + (2 * .AREA) ;
	CH$FILL (0, .TOT_SPACE - .AREA, .TCB [SCR$L_CHARMAP] + .AREA) ;
				! zero fill attrmap and modfmap
	TCB [SCR$L_LINE] = 1 ;
	TCB [SCR$L_COLUMN] = 1 ;
	END	! Ran off end of list, must build new TCB

    ELSE

	BEGIN	! Found desired TCB
	!+
	! Reach here when we have found the TCB we want.
	!-
	IF NOT NULLPARAMETER (5)
	THEN
	    OLD_STREAM [0] = .SCR$L_CUROUTPUT [SCR$L_STREAM] ;

	TCB = .FOUND ;	! Record which one found
	SCR$L_CUROUTPUT = .TCB ;

	TCB [SCR$L_RTNADDR] = ( IF NULLPARAMETER (3)
				THEN 0
				ELSE USER_ROUTINE [0] ) ;

	TCB [SCR$L_RTNARG]  = ( IF NULLPARAMETER (4)
				THEN 0
				ELSE USER_ARG [0] ) ;
	END;	! Found desired TCB

    RETURN (SS$_NORMAL);
    END;				! End of routine SCR$SET_OUTPUT
!<BLF/PAGE>

%SBTTL 'SCR$STOP_OUTPUT - Stop Output to Terminal or Screen Buffer'
GLOBAL ROUTINE SCR$STOP_OUTPUT =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine deaccesses current stream established for output.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SCR$STOP_OUTPUT ( )
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!
! SIDE EFFECTS:
!
!	The channel or ISI is deassigned.
!--

    BEGIN
    LOCAL
	STATUS,				! Status to return to caller
	STATUS2,			! Temporary internal status
	LAST : REF BLOCK [, BYTE],	! Pointer to a Terminal Control
					! block
	NEXT : REF BLOCK [, BYTE] ;	! Pointer to a Terminal Control
					! block

    LAST = SCR$L_FLINKHEAD ;		! Initialize to head of chain
    NEXT = .SCR$L_FLINKHEAD ;		! Initialize to 1st

!+
! Search down chain of TCB's until we reach the one that matches
! SCR$L_CUROUTPUT or reach end of chain (indicated by a zero forward
! link).
!-
    WHILE .NEXT NEQ 0
    DO
	BEGIN		! Search for desired TCB or end of list
	IF .NEXT EQL .SCR$L_CUROUTPUT
	THEN
	    EXITLOOP ;	! Break out of search loop

	LAST = .NEXT ;  ! Remember last entry address
	NEXT = .NEXT [SCR$L_FLINK] ; ! Advance pointer down chain
	END ;		! Search for desired TCB or end of list

!+
! Reach here when we have found desired TCB or have exhausted chain.
! Decide which, and treat appropriately.
!-
    IF .NEXT EQL 0
    THEN
	BEGIN	! Ran off end of list
	STATUS = SS$_NORMAL ;
	END	! Ran off end of list

    ELSE

	BEGIN	! Located TCB we want
	!+
	! First order of business is to remove this TCB from chain.
	! Set previous entry's forward pointer to the contents of this
	! entry's forward pointer.
	!-
	LAST [SCR$L_FLINK] = .NEXT [SCR$L_FLINK] ;

	!+
	! If a there is a channel involved ?
	!-
	IF .NEXT [SCR$W_CHAN] NEQ 0
	THEN
	    BEGIN	! Channel involved
	    NEXT [SCR$L_BUFFER] = 0 ;	! Turn off buffering

	    !+
	    ! If scrolling active, turn it off.
	    !-
	    IF .NEXT [SCR$V_SCROLL] EQL 1
	    THEN
		BEGIN ! Scrolling was on
		NEXT [SCR$V_SCROLL] = 0 ; ! Turn off indicator
		SCR$SET_SCROLL () ;	  ! Turn off scrolling in 
					  ! terminal
		END ; ! Scrolling was on

	    !+
	    ! Now to deassign the channel
	    !-
	    STATUS2 = $DASSGN ( CHAN = .NEXT [SCR$W_CHAN]) ;

	    !+
	    ! Deallocate the local Event Flag
	    !-
	    LIB$FREE_EF ( NEXT [SCR$L_EFN]) ;

	    END ;	! Channel involved

	!+
	! Check to see if a file is open
	!-
	IF .NEXT [SCR$W_IFI] NEQ 0
	THEN
	    BEGIN	! File open
	    LOCAL
		FAB : REF $FAB_DECL;	! ptr to FAB

	    FAB = .NEXT [SCR$L_FAB];

	    CH$FILL (0, FAB$C_BLN, .FAB ) ; ! Clear FAB to zero
	    FAB [FAB$W_IFI] = .NEXT [SCR$W_IFI] ;  ! File IFI
	    FAB [FAB$B_BID] = FAB$C_BID ;	! Identify block as FAB
	    FAB [FAB$B_BLN] = FAB$C_BLN ;	! Length of FAB
	    STATUS2 = $CLOSE ( FAB = .FAB ) ; ! Close file
	    IF .STATUS2
    	    THEN
		BEGIN		! free FAB and RAB space
		LIB$FREE_VM (%REF(RAB$C_BLN), NEXT [SCR$L_RAB]);
		LIB$FREE_VM (%REF(FAB$C_BLN), NEXT [SCR$L_FAB]);
		END;
	    END ;	! File open

	!+
	! Release buffer space if we have been using a character map.
	!-
	IF .NEXT [SCR$L_CHARMAP] NEQ 0
	THEN
	    BEGIN	! Free map
	    LOCAL
	    	TOTAL_SPACE;
	    !+
	    ! The attribute map was allocated contiguously with the
	    ! character map.  Be sure to free up both.
	    !
	    ! Space composed of the following parts was allocated:
	    ! 	Name			Size
	    !  character map	area = device length * width
	    !  attribute map	area
	    !  modified map	area/8 + 1 (bit map size in bytes)
	    !-
	    TOTAL_SPACE = (.NEXT [SCR$L_AREA]/%BPUNIT) + 1 + (2 * .NEXT [SCR$L_AREA]);
	    STATUS = LIB$FREE_VM ( TOTAL_SPACE,       
				   NEXT [SCR$L_CHARMAP] ) ; 
	    IF .STATUS
	    THEN
		BEGIN
		!+
		! Free the TCB area itself
		!-
		STATUS = LIB$FREE_VM ( %REF ( SCR$C_SIZE),	! length
				       NEXT ) ;	! base
		END;
	    END ;	! Free map

	!+
	! If status of $CLOSE was successful, return it, else
	! return status of LIB$FREE_VM.
	!-
	IF .STATUS2
	THEN
	    STATUS = .STATUS2 ;

	END ;	! Located TCB we want

    SCR$L_CUROUTPUT = 0;
    RETURN (.STATUS);
    END;				! End of routine SCR$STOP_OUTPUT
!<BLF/PAGE>

%SBTTL 'CREATE - Create file via RMS'
ROUTINE CREATE (
	           TCB : REF BLOCK [, BYTE],
		   LENGTH,
		   ADDR
		 ) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Create an output file via RMS.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = CREATE ( TCB.mab.r,
!				    LENGTH.rl.r,
!				    ADDR.rl.r)
!
! FORMAL PARAMETERS:
!
!	TCB.mab.r		Current TCB address.
!
!	LENGTH.rl.r		Length of file name
!
!	ADDR.rl.r		Address of file name text string
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	Failure status from $CREATE
!
! SIDE EFFECTS:
!
!	The file is created and connected to.  The resulting ISI and
!	IFI are stored in the control block.
!--

    BEGIN
    LOCAL
	FAB_BLOCK,			! a FAB
	FAB : REF $FAB_DECL,		! ptr to FAB
	RAB_BLOCK,			! a RAB
	RAB : REF $RAB_DECL,		! ptr to RAB
	STATUS;				! Status of subroutine calls

!+
! Allocate the FAB and RAB here.  SCR$STOP_OUTPUT will deallocate when
! the stream is stopped.
!-
    STATUS = LIB$GET_VM (%REF (FAB$C_BLN), FAB_BLOCK);
    IF NOT .STATUS THEN RETURN (.STATUS);

    STATUS = LIB$GET_VM (%REF (RAB$C_BLN), RAB_BLOCK);
    IF NOT .STATUS THEN RETURN (.STATUS);

    FAB = .FAB_BLOCK;
    RAB = .RAB_BLOCK;
    
!+
! Initialize fields in FAB prior to call to $CREATE
!-
    CH$FILL ( 0, FAB$C_BLN, .FAB ) ;	! Clear FAB to zero
    FAB [FAB$B_BID] = FAB$C_BID ;	! Block id says its a FAB
    FAB [FAB$B_BLN] = FAB$C_BLN ;	! Length of a FAB
    FAB [FAB$B_FNS] = ..LENGTH ;	! Length of file spec
    FAB [FAB$L_FNA] = ..ADDR ;		! Address of file spec
    FAB [FAB$V_SQO] = 1 ;		! Sequential access only
    FAB [FAB$B_RFM] = FAB$C_VAR ;	! Variable-length records
    FAB [FAB$V_CR] = 1 ;		! Automatic carriage control

    IF NOT ( STATUS = $CREATE ( FAB = .FAB ))
    THEN
	RETURN (.STATUS ) ;

!+
! Initialize fields in RAB prior to $ CONNECT call.
!-
    CH$FILL ( 0, RAB$C_BLN, .RAB ) ;	! Clear RAB to zero
    RAB [RAB$B_BID] = RAB$C_BID ;	! Block id says its a RAB
    RAB [RAB$B_BLN] = RAB$C_BLN ;	! Length of a RAB
    RAB [RAB$L_FAB] = .FAB ;		! Address of FAB

    $CONNECT ( RAB = .RAB ) ;

!+
! Save IFI and ISI in caller's TCB
!-
    TCB [SCR$W_IFI] = .FAB [FAB$W_IFI] ;
    TCB [SCR$W_ISI] = .RAB [RAB$W_ISI] ;
    TCB [SCR$L_FAB] = .FAB;
    TCB [SCR$L_RAB] = .RAB;		! save addresses for later use
    RETURN (SS$_NORMAL) ;
    END;				! End of routine CREATE
!<BLF/PAGE>

%SBTTL 'EXIT_HANDLER - Exit handler'
ROUTINE EXIT_HANDLER =
!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is invoked on image exit.  It searches the list
!	of active streams doing a STOP_OUTPUT on each one.  Any errors
!	are ignored.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = EXIT_HANDLER ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	SCR$L_FLINKHEAD -- the head of the list of active streams
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN


    WHILE .SCR$L_FLINKHEAD NEQ 0
    DO
	BEGIN
	LOCAL
	    CURRENT_TCB : REF BLOCK [, BYTE];	! Current TCB

	CURRENT_TCB = .SCR$L_FLINKHEAD ;	! Select next TCB

	SCR$SET_OUTPUT ( .CURRENT_TCB [SCR$L_STREAM]) ; ! Make current

	SCR$STOP_OUTPUT () ;				 ! Stop stream
	END ;
    RETURN (SS$_NORMAL);
    END;				! End of routine EXIT_HANDLER
!<BLF/PAGE>

%SBTTL 'GET_CHAR - Get terminal characteristics and init TCB'
ROUTINE GET_CHAR (
	           TCB : REF BLOCK [, BYTE],
		   TYPE
		 ) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Get device characteristics, set up TCB and return device type.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = GET_CHAR ( TCB.rab.r,
!				      TYPE.wl.r )
!
! FORMAL PARAMETERS:
!
!	TCB.rab.r		Current TCB address.
!
!	TYPE.wl.r		Returned device type.
!
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

MACRO
    VT52_MODE = %STRING (%CHAR(CR), %CHAR(ESC), %CHAR(LB), '?2l',
			  %CHAR(ESC), '\', %CHAR(CR), '   ',%CHAR(CR))%,
    VT100_MODE = %STRING (%CHAR(ESC), '<')%;

    TCB [SCR$W_DEVPAGSIZ] = LIB$LP_LINES () - 6 ;
    TCB [SCR$W_DEVWIDTH]  = 132 ;

    SCR$_INFOCLASS = SCR$AB_DEVCLASS ;
    SCR$_INFOTYPE  = SCR$AB_DEVTYPE ;
    SCR$_INFOSIZ   = SCR$AW_DEVBUFSIZ ;
    SCR$_INFODEP   = SCR$AL_DEVDEPEND ;
    SCR$_INFODEP2  = SCR$AL_DEVDEPND2 ;

    IF ($GETDVI ( CHAN = .TCB [SCR$W_CHAN], ITMLST = SCR$A_ITMLST ))
    THEN
	BEGIN	! $GETDVI succeeded
	TCB [SCR$B_DEVTYP] = .SCR$AB_DEVTYPE ;
	!+
	! Assume BOLD and UNDERLINE supported until it proves
	! otherwise.
	!-
	TCB [SCR$L_DEVCHAR] = %X'FFFFFFF6' ;
	IF .SCR$AB_DEVCLASS EQL DC$_TERM
	THEN
	    BEGIN	! Is a terminal
	    LOCAL
		STATUS,		! Status of subr. calls
		LOC_DESC : BLOCK [8, BYTE] ;	! Local descriptor

	    TCB [SCR$W_DEVWIDTH] = .SCR$AW_DEVBUFSIZ ;	! Device width
	    TCB [SCR$W_DEVPAGSIZ] = .(SCR$AL_DEVDEPEND+3)<0,8> ; ! lines/page
	    TCB [SCR$L_DEVDEPND2] = .SCR$AL_DEVDEPND2 ;

	    SELECTONE .SCR$AB_DEVTYPE OF
	    SET
		[DT$_FT1 TO DT$_FT8]:		! Foreign terminals
		    .TYPE = VTFOREIGN ;

		[DT$_VT52, DT$_VT55]:		! Treat like VT52
		    .TYPE = VT52 ;

		[DT$_VT100]:			! VT100
		    .TYPE = VT100 ;

		[DT$_VT05]:			! VT05
		    .TYPE = VT05 ;

		[OTHERWISE]:			! Unknown
		    IF .SCR$AL_DEVDEPND2 [TT2$V_DECCRT] OR
		       .SCR$AL_DEVDEPND2 [TT2$V_ANSICRT] 
		    THEN
			BEGIN	! VT100 compatible (ANSI)
			.TYPE = VT100 ;
			END	! VT100 compatible (ANSI)
		    ELSE
			BEGIN	! Really Unknown
			.TYPE = 0 ;
			! Assume NO attributes supported.
			TCB [SCR$L_DEVCHAR] = -1 ;
			END;	! Really Unknown
	    TES;

	    !+
	    ! If VT52 or VT100, the terminal might be a VT100.  In any
	    ! case, issue the proper escape sequence to ensure that
	    ! the VT100 is in the correct mode, ANSI or VT52.
	    !-
	    LOC_DESC [DSC$W_LENGTH] = 0;
	    LOC_DESC [DSC$B_CLASS] = DSC$K_CLASS_S ;
	    LOC_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T ;
    	    TCB [SCR$B_TYPE] = ..TYPE ;
	    IF ..TYPE EQL VT52
	    THEN
		BEGIN	! To VT52 mode
		LOC_DESC [DSC$W_LENGTH] = %CHARCOUNT  (VT52_MODE) ;
		LOC_DESC [DSC$A_POINTER] = UPLIT ( BYTE  (VT52_MODE));
		END	! To VT52 mode
	    ELSE
		IF ..TYPE EQL VT100
		THEN
		    BEGIN	! To VT100 mode
		    LOC_DESC [DSC$W_LENGTH] = %CHARCOUNT  (VT100_MODE) ;
		    LOC_DESC [DSC$A_POINTER] = UPLIT ( BYTE  (VT100_MODE));
		    END;	! To VT100 mode

	    IF .LOC_DESC [DSC$W_LENGTH] NEQ 0
	    THEN
		BEGIN
	    	STATUS = SCR$PUT_SCREEN ( LOC_DESC);
	    	IF NOT .STATUS 
		THEN
		    RETURN (.STATUS ) ;
		END;

	    END	! Is a terminal
	ELSE
	    BEGIN	! Not a terminal
	    .TYPE = 0 ;	! Mark as unknown
    	    TCB [SCR$B_TYPE] = ..TYPE ;
	    END;	! Not a terminal

	END	! $GETDVI succeeded
    ELSE
	BEGIN	! $GETDVI failed
	.TYPE = 0 ;	! Mark unknown
    	TCB [SCR$B_TYPE] = ..TYPE ;
	END ;	! $GETDVI failed


    RETURN (SS$_NORMAL) ;
    END;				! End of routine GET_CHAR
!<BLF/PAGE>

END					! End of module LIB$SCREEN

ELUDOM
