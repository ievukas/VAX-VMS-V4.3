	.TITLE	MOMINISTA	INITIAL STATE TABLES
	.IDENT	'V04-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:  DECnet-VAX Network Management Maintenance Operations Module (MOM)
; 
; ABSTRACT: 
;	This module contains the NPARSE tables for parsing the beginning
;	of NICE commands.  The tables are used to parse the function code
;	and the entity ID.  The parameters are parsed later.
; 
; ENVIRONMENT:	VAX/VMS Operating System 
; 
; AUTHOR:  Kathy Perko
;
; CREATION DATE: 9-Jan-1982
; 
; MODIFIED BY: 
; 
;-- 

;
; INCLUDE FILES:
;
 
$NMADEF				; Network Management Layer definitions
$MOMDEF				; MOM definitions
 
	.SBTTL	MOM$NPA_INIT - NICE Phase III message parse tables
;+
; Phase III parse tables
;-
IMSG$	MOM$NPA_INIT
;
; Get the function code
;
FIELD$
$BYTE	NMA$C_FNC_LOA,MOM_LOA,MOM$PARSE_FUNCTION ; Load
$BYTE	NMA$C_FNC_SYS,MOM_CC_LOA		 ; Console Carrier Load
$BYTE	NMA$C_FNC_TRI,MOM_TRI,MOM$PARSE_FUNCTION ; Trigger
$BYTE	NMA$C_FNC_TES,MOM_TES,MOM$PARSE_FUNCTION ; Test
;$BYTE	NMA$C_FNC_DUM,MOM_DUM,MOM$PARSE_FUNCTION ; Dump
$NULL	,MOM_FUN_ERR			; Unrecognized function
;
; Down-line load
;
FIELD$  MOM_CC_LOA
$BYTE	NMA$C_SYS_VMS,MOM_CC_FUNC,,-	; Down line load console carrier
	MOM$M_CONSOLE_CARRIER_LOAD,MOM$GL_SERVICE_FLAGS
$NULL	,MOM_FUN_ERR			; Unrecognized function

FIELD$  MOM_CC_FUNC
$BYTE	NMA$C_FNC_LOA,MOM_LOA,MOM$PARSE_FUNCTION ; Load
$NULL	,MOM_FUN_ERR			; Unrecognized function

FIELD$	MOM_LOA
$SBEXP	MOM_CHK_ENT_SUB,NPA$_EXIT	; Parse entity id
;
; Trigger bootstrap
;
FIELD$	MOM_TRI
$SBEXP	MOM_CHK_ENT_SUB,NPA$_EXIT	; Parse entity id
;
; Send test message
;
FIELD$	MOM_TES
$SBEXP	MOM_CHK_TEST_ENT_SUB,NPA$_EXIT	; Parse test entity id

	.SBTTL	Entity parsing

;
; Parse the entity for a load or trigger command, according to the option byte
;
FIELD$	MOM_CHK_ENT_SUB
$BYTE	NMA$C_ENT_CIR,MOM_CIRCUIT_ENT			; circuit
$BYTE	NMA$C_ENT_NOD,MOM_NODE_ENT			; node
$ERROR	,,MOM$PARSE_ERROR,,,NMA$C_STS_IDE		; Invalid ID error

;
; Parse the entity for a loop command, according to the option byte
;
FIELD$	MOM_CHK_TEST_ENT_SUB
$BYTE	NMA$C_ENT_CIR,MOM_CIRCUIT_ENT			; circuit
$BYTE	NMA$C_ENT_LIN,MOM_LINE_ENT			; line
$BYTE	NMA$C_ENT_NOD!NMA$M_OPT_ACC,MOM_NODE_ENT,,-	; node
	MOM$M_LOOP_W_ACCESS_CTL,MOM$GL_SERVICE_FLAGS
$BYTE	NMA$C_ENT_NOD,MOM_NODE_ENT			; node
$ERROR	,,MOM$PARSE_ERROR,,,NMA$C_STS_IDE		; Invalid ID error


;
; Circuit id
; 
FIELD$  MOM_CIRCUIT_ENT
$EOM	,MOM_FOR_ERR
$IMAGE	16,NPA$_EXIT,MOM$PARSE_ENTITY_ID,,,MOM$C_CIRCUIT
$ERROR	,,MOM$PARSE_ERROR,,,NMA$C_STS_IDE ; Invalid id error

;
; Node id 
;
FIELD$	MOM_NODE_ENT
$EOM	,MOM_FOR_ERR
$BYTE	0, MOM_NODNUM
$IMAGE	6,NPA$_EXIT,MOM$PARSE_ENTITY_ID,,,MOM$C_NODEBYNAME
$ERROR	,,MOM$PARSE_ERROR,,,NMA$C_STS_IDE ; Invalid id error
 
FIELD$	MOM_NODNUM
$MATCH	2,NPA$_EXIT,MOM$PARSE_ENTITY_ID,,,MOM$C_NODE
$NULL	,MOM_FOR_ERR

;
; Line id
;
FIELD$	MOM_LINE_ENT
$EOM	,MOM_FOR_ERR
$IMAGE	16,NPA$_EXIT,MOM$PARSE_ENTITY_ID,,,MOM$C_LINE
$ERROR	,,MOM$PARSE_ERROR,,,NMA$C_STS_IDE ; Invalid id error

;
; Check the option byte for illegal bits and save it
;
FIELD$	MOM_CHKOPT_SUB			; Check for valid option
$EOM	,MOM_FOR_ERR			; Message format error
$LOOK	,NPA$_EXIT,MOM$PARSE_OPTION	;
$NULL	,MOM_FUN_ERR			; Unrecognized option

FIELD$	MOM_FUN_ERR			; Illegal function or option
$ERROR	,,MOM$PARSE_ERROR,,,NMA$C_STS_FUN

FIELD$	MOM_FOR_ERR			; Message format error
$ERROR	,,MOM$PARSE_ERROR,,,NMA$C_STS_INV

FIELD$

	.END
 
