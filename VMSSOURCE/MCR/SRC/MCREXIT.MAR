	.TITLE	MCREXIT - EXIT COMMAND EXECUTION
	.IDENT	'V04-000'
 
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; EXIT COMMAND EXECUTION
;
; W. H. BROWN 25-JUN-1977
;
; Modified by:
;
;	V3.02	MAJ0002		Melanie Johnson	24-Feb-1983
;		As part of the effort to disable & remove native indirect,
;		remove the .EXIT and the .STOP indirect commands.  Leave EXIT
;		and STOP as interactive/batch commands.
;		Don't change NOSTAT flag value on EXIT.
;
;	V3.01	MAJ0001		Melanie Johnson	03-Sep-1982
;		Use WRK_L_EXPANDPTR(FP) instead of R9 as the command expansion
;		buffer pointer.
;
;	V001	TMH0001		Tim Halvorsen	24-Nov-1980
;		Fix .EXIT to act as EXIT, not .STOP, when not in BEGIN/END
;		block.  Remove check of even/odd status from .STOP when
;		determining whether to complete the stop or not.
;		Clear NOSTAT bit so that exit status is always saved.
;		Fix .STOP to correctly store status value.
;---
;
; MACRO LIBRARY CALLS
;
 
	DEFCMDWRK			; DEFINE WORK AREA OFFSETS
	DEFERRCOD			; DEFINE ERROR/STATUS CODES

	.SBTTL	EXIT COMMAND 
;+
; MCR$EXIT - EXIT COMMAND
;
; THIS COMMAND IS CALLED AS AN INTERNAL COMMAND TO EXECUTE THE MCR
; EXIT INDIRECT COMMAND.
;
; INPUTS:
;
;	WRK_L_EXPANDPTR(FP) = ADDRESS OF NEXT BYTE IN COMMAND BUFFER.
;	R10 = RESULT PARSE DESCRIPTOR TABLE POINTER.
;	R11 = BASE ADDRESS OF PROCESS WORK AREA.
;	FP = BASE ADDRESS OF COMMAND WORK AREA.
;
; OUTPUTS:
;
;	THE EXIT EXPRESSION IS EVALUATED
;
;	R0 LOW BIT CLEAR INDICATES EXPRESSION EVALUATION FAILURE.
;
;		R0 = MCR$_COMPLX - EXPRESSION TOO COMPLEX.
;		R0 = MCR$_EXPSYN - EXPRESSION SYNTAX ERROR.
;		R0 = MCR$_IVCHAR - INVALID CHARACTER IN NUMERIC STRING.
;		R0 = MCR$_IVOPER - INVALID EXPRESSION OPERATOR.
;		R0 = MCR$_UNDSYM - UNDEFINED SYMBOL.
;
;	IF THE EXPRESSION EVALUTES OK, THE INDIRECT LEVEL IS UNSTACKED
;	ONE LEVEL AND THE STATUS IS SET TO THE VALUE OF THE EXPRESSION,
;	OR IS LEFT AS THE ORIGINAL VALUE IF THE EXPRESSION WAS NULL.
;	R0 LOW BIT SET INDICATES SUCCESSFUL COMPLETION.
;
;		R0 = MCR$_NORMAL - NORMAL COMPLETION.
;-
; 
;	.PSECT	MCR$ZCODE,BYTE,RD,NOWRT
MCR$EXIT::				; EXIT COMMAND
	BISL3	#1@28,PRC_L_LSTSTATUS(R11),R8 ; GET LAST STATUS WITH INHIBIT MSG
 	SETNBLK				; FIND NON-BLANK CHARACTER
	BEQL	50$			; BR IF NONE-STATUS GETS SAVED
	EXPRESS				; EVALUATE EXPRESSION
	BLBC	R0,40$			; BR IF ERROR EVALUATING EXPRESSION
	MOVL	R1,R8			; SET RESULT OF EXPRESSION EVALUATION
	
;******Disabling imbedded indirect***********************************
;	CMPL	PRC_L_INDINPRAB(R11),-	; IS INDIRECT LEVEL ABOVE THE
;		PRC_L_INPRAB(R11)	; BASIC LEVEL?
;	BEQL	50$			; BR IF NO THERE IS NOTHING TO UNSTACK
;	UNSTACK				; REMOVE ONE LEVEL OF INDIRECT
;	BLBC	R0,30$			; BR IF FAILED
;20$:	MOVL	R8,R0			; SET RESULTANT STATUS
;30$:	BISW	#WRK_M_COMMAND,WRK_W_FLAGS(FP) ; SET COMMAND IN EXECUTION
;********************************************************************
40$:	RSB

;
; AN EXIT COMMAND ISSUED FOR COMMAND LEVEL 0
; THIS IS A NOP FOR INTERACTIVE JOBS AND
; A LOGOUT FOR BATCH JOBS.
;
50$:	BBS	#PRC_V_MODE,PRC_W_FLAGS(R11),70$ ; Branch if not interactive
	BBC	#PRC_V_YLEVEL,PRC_W_FLAGS(R11),60$ ; Branch if not running
					; at control y level
	SETBIT	WRK_V_COMMAND,WRK_W_FLAGS(FP) ; Set command in execution
	BSBW	MCR$RUNDOWN		; Run the image down, call exit handlers
60$:
	MOVL	#1,R0			; Return good status
	RSB
70$:
	BRW	MCR$ABORT		; Else force logout

	.SBTTL	.STOP COMMAND
;+
; MCR$STOPIND
;
; This routine is called to process the indirect command to stop
; indirect file processing.
;
; Inputs:
;
;	WRK_L_EXPANDPTR(FP)  = Address of next byte in command buffer
;	R10 = Result parse descriptor table pointer
;	R11 = Base address of process work area
;	FP  = Base address of command work area
;
; Outputs:
;
;	The .STOP expression is evaluated
;
;	R0 low bit clear indicates expression evaluation failure
;
;		R0 = MCR$_COMPLX - Expression too complex
;		R0 = MCR$_EXPSYN - Expression syntax error
;		R0 = MCR$_IVCHAR - Invalid character in numeric string
;		R0 = MCR$_IVOPER - Invalid expression operator
;		R0 = MCR$_UNDSYM - Undefined symbol
;
;	If the expression evaluates ok, indirect levels are unstacked
;	until the basic level is reached and the status set to the value
;	of the expression, or is left as the original value if the 
;	expression was null
;-
MCR$STOPIND::
;******Disabling imbedded indirect***********************************
;	BSBB	MCR$EXIT		; Unstack indirect level, get value
;	PUSHL	R0			; Save exit status
;	BLSS	10$			; Branch if error parsing EXIT value
;5$:	CMPL	PRC_L_INDINPRAB(R11), -	; At outer most level?
;		PRC_L_INPRAB(R11)
;	BEQL	10$			; if equal, stop it
;	UNSTACK				; unstack another level
;	BLBS	R0,5$			; and continue until level 0
;	MOVL	R0,(SP)			; Override exit value w/unstack error
;10$:	POPL	R0			; Restore exit status
;********************************************************************
	RSB

	.SBTTL	.EXIT COMMAND
;+
; MCR$EXITIND
;
; This routine is called to process the indirect command to exit from
; a begin-end block or if no blocks exit from indirect command file
;
; Inputs:
;
;	WRK_L_EXPANDPTR(FP)  = Address of next byte in command buffer
;	R10 = Result parse descriptor table pointer
;	R11 = Base address of process work area
;	FP  = Base address of command work area
;
; Outputs:
;
;	The .EXIT expression is evaluated
;
;	R0 low bit clear indicates expression evaluation failure
;
;		R0 = MCR$_COMPLX - Expression too complex
;		R0 = MCR$_EXPSYN - Expression syntax error
;		R0 = MCR$_IVCHAR - Invalid character in numeric string
;		R0 = MCR$_IVOPER - Invalid expression operator
;		R0 = MCR$_UNDSYM - Undefined symbol
;
;	If the expression evaluates ok the status is set to its value
;	or is left as the original value if it was null.  If within a
;	begin-end block a forward scan for the .END marking the end
;	of the current block is commenced.  If not in a begin-end block
;	the current indirect command file is exited (equivalent to a .STOP)
;-
MCR$EXITIND::
;******Disabling imbedded indirect***********************************
;	TSTL	PRC_L_BLKLNK(R11)	; In any begin-end blocks?
;	BEQL	MCR$EXIT		; No if EQL, perform as a EXIT
;	BISL3	#1@28,PRC_L_LSTSTATUS(R11),R8 ; Get last status with inhibit msg
;	SETNBLK				; Find non-blank character
;	BEQL	10$			; None if EQL, status gets saved
;	EXPRESS				; Evaluate status expression
;	BLBC	R0,20$			; Error if LBC
;	MOVL	R1,R8			; Set result of status evaluation
;10$:
;	BISW2	#<PRC_M_GOTO!PRC_M_GOEOF>, - ; Put into forward goto mode and
;		PRC_W_FLAGS(R11)	; stop scan at first end-of-file
;	MOVB	#PRC_K_EXIT,PRC_B_FWDSCAN(R11) ; Mark as .EXIT forward scan
;	MOVB	PRC_B_NESTLEVEL(R11), -	; Save nesting level for .EXIT search
;		WRK_B_SCANLEVEL(FP)
;20$:
;	MOVL	R8,R0			; Set resultant status
;********************************************************************
	RSB
	.END
