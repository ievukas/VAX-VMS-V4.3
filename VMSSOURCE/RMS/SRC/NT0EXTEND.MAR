	$BEGIN	NT0EXTEND,000,NF$NETWORK,<NETWORK EXTEND>


;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS
;
; Abstract:
;
;	This module communicates with the file access listener at the remote
;	node to extend the size of the specified file.
;
; Environment: VAX/VMS, executive mode
;
; Author: James A. Krycka,	Creation Date:	17-AUG-1981
;
; Modified By:
;
;	V03-004	RAS0315		Ron Schaefer	22-Jun-1984
;		Make local definitions of the RMS symbols.
;
;	V03-003	KRM0078		K R Malik	06-Jan-1983
;		Use FAB's ALQ instead of XAB's when no XAB
;		is present. (& fix bug in processing XAB
;		ALQ returned from FAL)
;
;	V03-002	KRM0049		K R Malik	20-Apr-1982
;		Fix bug in way SEND_ALL does XAB probe.
;
;	V03-001	KRM0044		K R Malik	05-Apr-1982
;		Probe each Allocation XAB before sending to FAL.
;
;	V02-002	JAK0066		J A Krycka	07-OCT-1981
;		Reject $EXTEND request while in file transfer mode.
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DAPPLGDEF			; Define DAP prologue symbols
	$DAPHDRDEF			; Define DAP message header
	$DAPCNFDEF			; Define DAP Configuration message
	$DAPACCDEF			; Define DAP Access message
	$DAPCTLDEF			; Define DAP Control message
	$DAPALLDEF			; Define DAP Allocation message
	$FABDEF				; Define FAB symbols
	$IFBDEF				; Define IFAB symbols
	$NWADEF				; Define Network Work Area symbols
	$RMSDEF				; Define RMS error message symbols
	$XABDEF				; Define XAB symbols

;
; Macros:
;
;	None
;
; Equated Symbols:
;

	ASSUME	DAP$Q_DCODE_FLG EQ 0

;
; Own Storage:
;
;	None
;

	.SBTTL	NT$EXTEND -

;++
; NT$EXTEND - engages in a DAP dialogue with the remote FAL to extend the
;	specified file according to the Allocation XABs present (or according
;	to the FAB if no Allocation XABs are present).
;
; Calling Sequence:
;
;	BSBW	NT$EXTEND
;
; Input Parameters:
;
;	R8	FAB address
;	R9	IFAB address
;	R10	IFAB address
;	R11	Impure Area address
;
; Implicit Inputs:
;
;	User ALLXABs
;	User FAB
;	DAP$Q_SYSCAP
;	NWA$V_FTM_RETRV
;	NWA$V_FTM_STORE
;
; Output Parameters:
;
;	R0	Status code (RMS)
;	R1-R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	User ALLXABs
;
; Completion Codes:
;
;	Standard RMS completion codes
;
; Side Effects:
;
;	None
;
;--

NT$EXTEND::				; Entry point
	$TSTPT	NTEXTEND		;
	MOVL	IFB$L_NWA_PTR(R9),R7	; Get address of NWA (and DAP)
	BBC	#DAP$V_EXTEND,-		; Branch if remote FAL does not support
		DAP$Q_SYSCAP(R7),ERRSUP	;  extend file allocation function
	BBS	#NWA$V_FTM_RETRV,(R7),-	; Branch if file transfer mode retrieval
		ERRFTM			;  in progress
	BBS	#NWA$V_FTM_STORE,(R7),-	; Branch if file transfer mode storage
		ERRFTM			;  in progress
	BRB	BUILD_MASK		; Proceed
ERRSUP:	BRW	NT$SUP_CTLFUNC		; Assemble error codes in R0 and STV
					;  and exit
ERRFTM:	RMSERR	FTM			; Declare file transfer mode error
	RSB				; Exit with RMS code in R0

;+
; Build display field request mask which will be used in the Control message
; to request that optional DAP messages be returned by FAL.
; For $EXTEND these are only the ALL messages.
;-

BUILD_MASK:				; Build NWA$W_DISPLAY
	CLRL	R6			; Indicate this is not a close operation
	BSBW	NT$SCAN_XABCHN		; Scan user XAB chain and check FAL's
					;  capabilities; request mask put in R2
	BLBS	R0,10$			; Branch on success
	BRW	FAIL			; Branch (failure to complete scan)
10$:	BICW2	#<^C<DAP$M_DSP_ALL>>,R2	; Ignore all but ALLXABs in chain
	MOVW	R2,NWA$W_DISPLAY(R7)	; Save request mask
	BNEQ	SEND_CTL_BEGIN		; Continue (ALLXAB bit set)
	$SETBIT	#DAP$V_DSP_ALL,-	; If no ALLXAB present, then set the
		NWA$W_DISPLAY(R7)	;  bit manually
;+
; Build and send DAP Control (begin) message to partner.
;-

SEND_CTL_BEGIN:				; (required message sequence)
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_EXTEND_B,(R5)+	; Store CTLFUNC field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Control message to FAL
	BLBS	R0,SEND_ALL		; Branch on success
	BRW	FAIL			; Branch (failure)

;+
; Build and send DAP Allocation message(s) to partner.
;
; Note:	NT$SCAN_XABCHN determined that Allocation XABs were chained together.
;-

SEND_ALL:				; (one or more messages required)
	MOVL	NWA$L_ALLXABADR(R7),R6	; Get address of first user ALLXAB
	BEQL	SEND_ALL2		; Branch if no ALLXABs present
10$:	BSBW	NT$SCAN_ALLXAB		; Scan the XAB
	BLBS	R0,20$			; Branch on success
	BRW	FAIL			; Branch (failure)
20$:	BSBW	NT$ENCODE_ALL		; Build message
	BSBW	NT$TRANSMIT		; Send Allocation message to FAL
	BLBS	R0,30$			; Branch on success
	BRW	FAIL			; Branch (failure)
30$:	DECB	NWA$B_ALLXABCNT(R7)	; Any more Allocation XABs to process?
	BLEQU	SEND_CTL_END		; Branch if not
	MOVL	XAB$L_NXT(R6),R6	; Get address on next XAB in chain
	BRB	10$			; Continue with next XAB
;+
; No ALLXAB is present. Construct a DAP allocation attributes msg based on
; FAB information.
;-

SEND_ALL2:
	MOVL	#DAP$K_ALL_MSG,R0	; Get msg type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVZBL	#<DAP$M_AOP!-		; Get allocation msg value
		  DAP$M_ALQ2!-		;
		0>,R1			;
	BSBW	NT$CVT_BN4_EXT		; Store ALLMENU as an extensible
					;  field
	MOVL	FAB$L_FOP(R8),R1	; Get FAB FOP field
	CLRL	R2			; Clear RMS AOP bits
	$MAPBIT	FAB$V_CTG,DAP$V_CTG2	; Map CTG bit
	$MAPBIT	FAB$V_CBT,DAP$V_CBT2	; Map CBT bit
	MOVL	R2,R1			; Move data to correct register
	BSBW	NT$CVT_BN4_EXT		; Store AOP as an extensible field
	MOVL	FAB$L_ALQ(R8),R1	; Get FAB's ALQ value
	BSBW	NT$CVT_BN4_IMG		; Store ALQ as an image field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Allocation msg to FAL
	BLBC	R0,FAIL			; Branch on failure

;+
; Build and send DAP Control (end) message to partner.
;-

SEND_CTL_END:				; (required message sequence)
	$SETBIT	#NWA$V_LAST_MSG,(R7)	; Declare this last message to block
	MOVL	#DAP$K_CTL_MSG,R0	; Get message type value
	BSBW	NT$BUILD_HEAD		; Construct message header
	MOVB	#DAP$K_EXTEND_E,(R5)+	; Store CTLFUNC field
	MOVB	#DAP$M_DISPLAY2,(R5)+	; Store CTLMENU field
	MOVZWL	NWA$W_DISPLAY(R7),R1	; Get request mask
	BSBW	NT$CVT_BN4_EXT		; Store DISPLAY as an extensible field
	BSBW	NT$BUILD_TAIL		; Finish building message
	BSBW	NT$TRANSMIT		; Send Control message to FAL
	BLBC	R0,FAIL			; Branch on failure
	TSTL	NWA$L_ALLXABADR(R7)	; Any ALLXABs present?
	BEQL	RECV_EXT_ATT2		; Branch if not (FAB is being used)
	BSBW	NT$SCAN_XABCHN		; Scan user XAB chain to reset
					;  ALLXABCNT
	BLBC	R0,FAIL			; Branch on error

;+
; Receive DAP Allocation messages from partner and update the user ALLXABs.
;-

RECV_EXT_ATT:				; (optional--must be requested)
	BSBW	NT$RECV_EXT_ATT		; Process Extended Attributes messages
	BLBC	R0,FAIL			; Branch on failure
	BRB	RECV_ACK		; Go receive ACK msg
;+
; Receive DAP Allocation message from partner and update user FAB.
;-

RECV_EXT_ATT2:
	$SETBIT	#DAP$K_ALL_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Allocation message
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,FAIL			; Branch on failure
	MOVL	DAP$L_ALQ2(R7),-	; Move ALQ value to user FAB
		FAB$L_ALQ(R8)		;
;+
; Receive DAP Acknowledge message from partner.
;-

RECV_ACK:				; (required message)
	$SETBIT	#DAP$K_ACK_MSG,DAP$L_MSG_MASK(R7)
					; Expect response of Acknowledge message
	BSBW	NT$RECEIVE		; Get reply from FAL
	BLBC	R0,FAIL			; Branch on failure
SUC:	RMSSUC				; Return success
FAIL:	RSB				; Exit with RMS code in R0

	.END				; End of module
