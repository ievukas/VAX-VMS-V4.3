	$BEGIN	RM0FSETI,000,RM$RMS0,<OPEN AND CREATE COMMON SETUP>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS32
;
; Abstract:
;		routine to perform setup common to $open and $create.
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure,	 creation date: 4-JAN-1977
;
; Modified By:
;
;	V03-004	DGB0014		Donald G. Blair		02-Mar-1984
;		Set FIB$B_AGENT_MODE field; used for access mode protected 
;		files. 
;
;	V03-003 LJA0025		Laurie Anderson		11-Oct-1982
;		No longer need to pass R0 to RM$GTSLT.  Cleans up call slightly.
;
;	V03-002 LJA0017		Laurie Anderson		02-Sep-1982
;		Check to see if this is a restart open or create operation.
;
;	V03-001	KBT0304		Keith B. Thompson	28-Aug-1982
;		Reorganize psects
;
;	V02-014	CDS0002		C D Saether		 4-Sep-1981
;		Always set NORECLK initially for ifab.
;
;	V02-013	REFORMAT	Keith B. Thompson	29-Jul-1980
;
;	V0012	CDS0001		C D Saether		11-MAR-1980
;		fix errnoslt error to call RET1PAG instead of RETPAG
;
;	V0011	TMH0001		T. Halvorsen		28-SEP-1979
;		add FSETI_ALT entry point for SETDDIR
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$IFBDEF
	$FABDEF
	$IMPDEF
	$PIODEF
	$PSLDEF
	$RMSDEF

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8			; bit offset to fop

;
; Own Storage:
;


	.SBTTL	RM$FSETI - $OPEN AND $CREATE COMMON SETUP ROUTINE

;++
;
;  RM$FSETI	-
;  RM$FSETI_ALT	-
;
;  this routine calls RM$FABCHK to check the basic parameters
;  for a fab function,  allocates and inits an ifab, and
;  then dispatches to rm$fset (at its alternate entry point)
;  to finish the setup processing.
;
;
; Calling sequence:
;
;	BSBW	RM$FSETI
;
; Input Parameters:
;
;	AP	parameter list addr
;
; Implicit Inputs:
;
;	the various fields of the fab.
;
; Output Parameters:
;
;	R11	impure area address
;	R10	ifab address
;	R9	ifab address
;	R8	fab address
;	R7	caller's mode
;	R0 thru R5 destroyed
;
; Implicit Outputs:
;
;	various fields of the ifab are initialized as
;	well as the ifi, sts, and stv fields of the fab.
;
; Completion Codes:
;
;	none.  if an error is detected, returns to user
;	(not caller) after cleaning up and returning a standard
;	rms error code, in particular, dme, ifi, or any of
;	the codes returned by RM$FABCHK.
;
; Side Effects:
;
;	none
;
;--


RM$FSETI::
	BSBW	RM$FABCHK		; valid fab?
					; returns only if o.k.
					;NOTE:
					; note: sets R11 to impure addr
					; 	R9 to IFI value
					; 	R8 to fab addr
	BEQL	RM$FSETI_ALT
	BRW	ERRIFI			; error if IFI non-zero

;
; alternate entry point - fab is already checked
;	R7 = caller's access mode
;	R8 = fab address
;	R11 = impure area address
;

RM$FSETI_ALT::

;
;  so far, so good  -  time to allocate an ifab
;
;!!!!!
;  \may need to add code to share a page.\
;!!!!!!
;
;  check for process permanent file setup, and
;  if so, switch the impure area pointer
;

	BBC	#FAB$V_PPF+FOP,(R8),10$	; branch if image i/o file
	CMPB	R7,#PSL$C_USER		; attempt from user mode?
	BNEQ	8$
	BRW	ERRPRV			; caught you!
8$:	MOVAL	@#PIO$GW_PIOIMPA,R11	; no, so it's ok - switch impure pointer
10$:	BSBW	RM$GET1PAG		; go get a free page
	BLBS	R0,12$
	BRW	ERROR			; branch on failure

;
;  set up the page/file free space header at the start of the page
;

12$:	MOVL	R3,R1			; save address of page
	MOVAB	8(R3),(R3)+		; set free space address (flink)
	MOVAB	4(R3),(R3)+		; and blink
	MOVL	R1,(R3)+		; set free space's f link
	MOVL	R1,(R3)+		; and its b link
	SUBL3	#8,R2,(R3)		; and its size (512 bytes)
	MOVZBL	#IFB$C_BLN/4,R2		; block size for ifab
	BSBW	RM$GETBLK		; get ifab space (can't fail)
	MOVL	R1,R9			; save ifab address

;
;  set ifab bid  (R9 points to ifab), save user mode in ifab, store
;  agent mode in ifab.
;

	MOVB	#IFB$C_BID,IFB$B_BID(R9)
	MOVB	R7,IFB$B_MODE(R9)	; store access mode of caller
	EXTZV	#FAB$V_FILE_MODE,-	; r0 = user's request-mode field
		#FAB$S_FILE_MODE,FAB$B_ACMODES(R8),R0
	CMPB	R0,R7			; maximize request-mode (i.e. make it
	BGEQU	14$			;   less privileged) with caller's mode.
	MOVB	R7,R0			; place maximized mode in R0
14$:	MOVB	R0,IFB$B_AGENT_MODE(R9)	; store request mode in ifb

;
;  initialize bdb chain list header
;

	MOVAL	IFB$L_BDB_FLNK(R9),IFB$L_BDB_FLNK(R9)
	MOVAL	IFB$L_BDB_FLNK(R9),IFB$L_BDB_BLNK(R9)
	SSB	#IFB$V_NORECLK, (R9)	; always init to no record locking.
;
;  Check to see if this is a restart open or create operation by looking for
;  a context XAB and whether the restart option bit is set.
;
	PUSHL	AP			; Save argument pointer
	BSBW	RM$OPNCREXAB		; Look for Context XAB 
	POPL	AP			; Restore AP
	BLBC	R0,ERRNOSLT		; Error: return, after returning IFB pg
	BBC	#IFB$V_RESTART,(R9),15$	; If not restart operation, continue
	MOVZWL	FAB$W_IFI(R8),R6	; Set up IFI value for get slot.

;
;  allocate and initialize a slot in the ifab table
;

15$:	MOVL	IMP$L_IFABTBL(R11),R5	; get table addr
	BSBW	RM$GTSLT		; and get a slot
	BLBC	R0,ERRNOSLT		; branch if none
	MOVW	R6,FAB$W_IFI(R8)	; store ifi value
	ASSUME	IMP$W_RMSSTATUS EQ 0
	ASSUME	IMP$V_IIOS EQ 0
	BLBS	(R11),20$		; branch if not pio segment

;
;  save rat in ifi for later input to connect
;

	INSV	FAB$B_RAT(R8),-
		#FAB$V_PPF_RAT+<FAB$W_IFI*8>,-
		#FAB$S_PPF_RAT,(R8)
	BBC	#FAB$V_INP+FOP,(R8),20$	; branch if not 'input'
	SSB	#IFB$V_PPF_INPUT,(R9)	; set 'input' flag

;
;  initialize the end of data scan string to a single '$'
;

	MOVW	#1+<^A/$/@8>,@#PIO$GT_ENDSTR
	BICB2	#1@PIO$V_EOD,@#PIO$GW_STATUS; clear 'looking for eod' flag
20$:	BRW	RM$FSET_ALT		; finish setup processing


;
;  error handling
;

ERRIFI:
	RMSERR	IFI			; invalid ifi (must be zero)
	BRB	ERROR

;
;  an ifab was allocated but no ifab table slot  -  return ifab block
;
;
;  attempt to create a process-permanent file from user mode
;

ERRPRV:
	RMSERR	PRV
	BRB	ERROR

ERRNOSLT:
	PUSHL	R0			; Save error code.
	MOVL	R9,R4			; ifab addr
	BSBW	RM$RET1PAG		; return the ifab page
	POPL	R0			; Restore the error code.

ERROR:	BRW	RM$EX_NOSTR

	.END
