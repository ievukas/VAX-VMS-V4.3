MODULE RESTRICT	(%TITLE	'Restricted login hours enforcement'
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Job controller.
!
! ABSTRACT:
!	This module contains the routines that enforce restricted login hours.
!
! ENVIRONMENT:
!	VAX/VMS user and kernel mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 16-Feb-1982
!
! MODIFIED BY:
!
!	V03-001	MLJ0109		Martin L. Jack,	14-Apr-1983  12:48
!		Changes for job controller baselevel.
!
!**

REQUIRE 'SRC$:JOBCTLDEF';


FORWARD ROUTINE
	INITIALIZE_RESTRICTED:		NOVALUE,
	HOURLY_AST_KERNEL,
	HOURLY_AST:			NOVALUE;


FORWARD
	LOCK_IPL;


BIND
	TICKS_PER_HOUR=		UPLIT(%X'61C46800', %X'00000008');


LINKAGE
	SCH$FORCEDEXIT_LINKAGE =
	    JSB(REGISTER=0, REGISTER=3, REGISTER=4):
	    NOPRESERVE(1, 2) PRESERVE(5) NOTUSED(6, 7, 8, 9, 10, 11);


EXTERNAL ROUTINE
	SCH$FORCEDEXIT:	SCH$FORCEDEXIT_LINKAGE	ADDRESSING_MODE(GENERAL);


EXTERNAL
	EXE$GL_FLAGS:	BITVECTOR	ADDRESSING_MODE(GENERAL),
	SCH$GL_MAXPIX:			ADDRESSING_MODE(GENERAL),
	SCH$GL_NULLPCB:			ADDRESSING_MODE(GENERAL),
	SCH$GL_PCBVEC:	REF VECTOR	ADDRESSING_MODE(GENERAL);


EXTERNAL LITERAL
	EXE$V_EXPLICITP:		UNSIGNED(6),
	EXE$V_EXPLICITS:		UNSIGNED(6);


BUILTIN
	ADDM,
	ASHQ,
	EDIV,
	EMUL,
	MTPR;

GLOBAL ROUTINE INITIALIZE_RESTRICTED: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine initializes the restricted login hours subsystem.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CUR_TIME	- Current time.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Next hourly timer set.
!
!--

BEGIN
LOCAL
	TIME_TEMP:	VECTOR[2],	! Temporary for hourly calculation
	STATUS;				! Status return


! Compute the expiration time of the first hourly AST, and set the timer.
!
ASHQ(%REF(-5), CUR_TIME, TIME_TEMP);
EDIV(%REF(%X'430E2340'), TIME_TEMP, TIME_TEMP[0], TIME_TEMP[1]);
EMUL(%REF(%X'430E2340'), TIME_TEMP[0], %REF(0), TIME_TEMP);
ASHQ(%REF(5), TIME_TEMP, HOURLY_TIME);
ADDM(2, TICKS_PER_HOUR, HOURLY_TIME, HOURLY_TIME);
HOURLY_PARAMS[0] = 4;
STATUS = $SETIMR(
    DAYTIM=HOURLY_TIME,
    ASTADR=HOURLY_AST,
    REQIDT=JBC$K_HOURLY_IDT);
IF NOT .STATUS THEN SIGNAL(JBC$_SETIMR OR STS$K_ERROR, 0, .STATUS);
END;

ROUTINE HOURLY_AST_KERNEL(PIX,HOUR,DAY,MODE)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine tests to see if a process is restricted from logins at the
!	current time, and if so, queues an AST to the process to cause its
!	deletion.  This routine executes in kernel mode and partially at
!	IPL$_SYNCH.
!
! INPUT PARAMETERS:
!	PIX		- Process index.
!	HOUR		- Current hour of day (0-23).
!	DAY		- Current day of week (0-6).
!	MODE		- Access mode at which to queue AST.
!
! IMPLICIT INPUTS:
!	PCB for the specified process.
!	EXE$GL_FLAGS
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	True if AST queued to process, false otherwise.
!
! SIDE EFFECTS:
!	AST may be queued to process.
!
!--

BEGIN
REGISTER
	RPIX,				! Copy of PIX
	RHOUR,				! Copy of HOUR
	RDAY,				! Copy of DAY
	PCB:		REF BBLOCK,	! Pointer to PCB
	JIB:		REF BBLOCK,	! Pointer to JIB
	STATUS;				! Routine status
STACKLOCAL
	SMODE;				! Copy of MODE


! Load parameters into registers or onto the kernel stack to avoid page fault
! at elevated IPL.
!
RPIX = .PIX;
RHOUR = .HOUR;
RDAY = .DAY;
SMODE = .MODE;


! If this is the first execution of this routine after midnight, clear the
! operator override flag.
!
IF .RHOUR EQL 0 AND .SMODE EQL PSL$C_USER
THEN
    EXE$GL_FLAGS[EXE$V_EXPLICITS] = FALSE;


! Raise IPL to SYNCH.
!
MTPR(LOCK_IPL, PR$_IPL);


! Do the real work.
!
PCB = .SCH$GL_PCBVEC[.RPIX];
IF
    BEGIN
    IF .PCB EQLA SCH$GL_NULLPCB		! Null process: hands off
    THEN
	FALSE
    ELSE
	IF .PCB[PCB$L_OWNER] NEQ 0	! Subprocess: likewise
	OR .PCB[PCB$V_NETWRK]		! Network process: likewise
	THEN
	    FALSE
	ELSE
	    BEGIN
	    JIB = .PCB[PCB$L_JIB];	! Point to JIB
	    IF .JIB EQL 0		! No JIB
	    THEN
		FALSE
	    ELSE
		IF
		    BEGIN					! Block false if primary day
		    IF .EXE$GL_FLAGS[EXE$V_EXPLICITS]		! Operator override?
		    THEN
			.EXE$GL_FLAGS[EXE$V_EXPLICITP]		! Clear if operator override primary day
		    ELSE
			.BITVECTOR[JIB[JIB$B_DAYTYPES], .RDAY]	! Clear if process specified primary day
		    END
		THEN
		    .BITVECTOR[JIB[JIB$L_ODAYHOURS], .RHOUR]	! Set if restricted secondary hour
		ELSE
		    .BITVECTOR[JIB[JIB$L_PDAYHOURS], .RHOUR]	! Set if restricted primary hour
	    END
    END
THEN
    BEGIN
    SCH$FORCEDEXIT(SMODE, SS$_FORCEDEXIT, .PCB);		! Queue AST to process
    STATUS = TRUE;
    END
ELSE
    STATUS = FALSE;


! Lower IPL, and return status.
!
MTPR(%REF(0), PR$_IPL);
.STATUS
END;

OWN
	LOCK_IPL:	PSECT(CODE) INITIAL(IPL$_SYNCH);


%IF LOCK_IPL + 4 - HOURLY_AST_KERNEL GTR 512
%THEN %ERROR('Possible page fault at elevated IPL') %FI

ROUTINE HOURLY_AST(TYPE): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This is the completion AST routine for the timer that expires on the
!	hour.  It checks for processes that are restricted by the authorization
!	record from logins at the current hour, queues ASTs to these processes
!	to cause their deletion, and sets a new timer.  If any processes were
!	found, it sets a timer to expire in 2 minutes to check again; otherwise
!	it sets a new hourly timer.
!
! INPUT PARAMETERS:
!	TYPE		- JBC$K_HOURLY_IDT or JBC$K_MINUTE_IDT,
!			  passed as REQIDT.
!
! IMPLICIT INPUTS:
!	HOURLY_TIME	- Expiration time of this AST.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	HOURLY_TIME	- Expiration time of next AST.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	ASTs queued to processes that should not be logged in at this hour.
!
!--

BEGIN
LOCAL
	POSSIBLE,
	STATUS;


IF .TYPE EQL JBC$K_HOURLY_IDT
THEN
    BEGIN
    LOCAL
	TIME_TEMP:	VECTOR[2],	! Temporary for time calculations
	T;				! Temporary for time calculations


    ! Get the current time.
    !
    $GETTIM(TIMADR=CUR_TIME);


    ! Compute the day of the week and hour of the day, and initialize the AST
    ! access mode to user mode.
    !
    EDIV(%REF(600000000), CUR_TIME, TIME_TEMP[0], T);		! Get minutes since base time value
    TIME_TEMP[1] = 0;
    EDIV(%REF(60), TIME_TEMP, TIME_TEMP[0], T);			! Get hours since base time value
    TIME_TEMP[1] = 0;
    EDIV(%REF(24), TIME_TEMP, TIME_TEMP[0], HOURLY_PARAMS[2]);	! Get days since base time value, store hour of day
    TIME_TEMP[0] = .TIME_TEMP[0] + 2;				! Adjust for base day being Wednesday
    TIME_TEMP[1] = 0;
    EDIV(%REF(7), TIME_TEMP, TIME_TEMP[0], HOURLY_PARAMS[3]);	! Get day of week
    HOURLY_PARAMS[4] = PSL$C_USER;


    ! Compute the expiration time of the next hourly AST, and set the timer.
    !
    ASHQ(%REF(-5), CUR_TIME, TIME_TEMP);
    EDIV(%REF(%X'430E2340'), TIME_TEMP, TIME_TEMP[0], T);
    EMUL(%REF(%X'430E2340'), TIME_TEMP[0], %REF(0), TIME_TEMP);
    ASHQ(%REF(5), TIME_TEMP, HOURLY_TIME);
    ADDM(2, TICKS_PER_HOUR, HOURLY_TIME, HOURLY_TIME);
    END;


! Scan all processes looking for processes to delete, and delete these.
!
POSSIBLE = FALSE;
INCR PIX FROM 2 TO .SCH$GL_MAXPIX DO
    BEGIN
    HOURLY_PARAMS[1] = .PIX;
    POSSIBLE = .POSSIBLE OR $CMKRNL(ROUTIN=HOURLY_AST_KERNEL, ARGLST=HOURLY_PARAMS);
    END;


! If any processes were found and the current AST access mode is not kernel,
! set a timer to expire in 2 minutes so that we may check again and queue ASTs
! at the next outer access mode.  Otherwise, set a new hourly timer.
!
IF
    BEGIN
    IF .POSSIBLE
    THEN
	BEGIN
	HOURLY_PARAMS[5] = .HOURLY_PARAMS[5] - 1;
	.HOURLY_PARAMS[5] GEQ 0
	END
    ELSE
	FALSE
    END
THEN
    STATUS = $SETIMR(
	DAYTIM=UPLIT(-1200000000, -1),	! 2 minute delta time
	ASTADR=HOURLY_AST,
	REQIDT=JBC$K_MINUTE_IDT)
ELSE
    STATUS = $SETIMR(
	DAYTIM=HOURLY_TIME,
	ASTADR=HOURLY_AST,
	REQIDT=JBC$K_HOURLY_IDT);

IF NOT .STATUS THEN SIGNAL(JBC$_SETIMR OR STS$K_ERROR, 0, .STATUS);
END;

END
ELUDOM
