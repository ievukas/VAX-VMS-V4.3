%TITLE 'EDT$GETXLATE - Handles the nokeypad XLATE command'
MODULE EDT$GETXLATE (				! nokeypad XLATE command
		IDENT = 'V04-000'			! File: GETXLATE.B32 Edit: JBS1007
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Handles the nokeypad XLATE command by setting up descriptor
!	and passing string to user supplied XLATE.  String
!	returned from XLATE is placed in the command buffer
!	for execution.
!
!
! ENVIRONMENT:	Runs on Vax/Vms
!
! AUTHOR: Shelly T. Solomon, CREATION DATE: 12-Jul-1982
!
! MODIFIED BY:
!
! 1-001	- Original.  STS 14-Aug-1982
! 1-002 - Return status of 1 rather that success status. STS 16-Aug-1982
! 1-003 - Save command buffer and allocate our own. STS 25-Aug-1982
! 1-004 - Unpack descriptor correctly. STS 13-Oct-1982
! 1-005	- Don't forget to deallocate heap storage.  JBS 14-Jun-1983
! 1-006	- Don't try to execute a 0-length returned string.  JBS 14-Jun-1983
! 1-007	- Don't print status just because no returned string.  JBS 17-Jun-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$GET_XLATE;

!
! LINKAGES
!

LINKAGE
    IOCALL = CALL (REGISTER = 1);

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

REQUIRE 'EDTSRC:SYSSYM';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
! in the routine
!

%SBTTL 'EDT$$GETXLATE - nokeypad XLATE command'

GLOBAL ROUTINE EDT$$GET_XLATE (			! Nokeypad XLATE command
    STRING, 					! Address of string to be XLATEd
    LENGTH					! Length of that string
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!    This is the routine called to handle the nokeypad XLATE command
! 	It sets up a descriptor with the passed string and calls the
!	user supplied XLATE.  The returned string is placed in the
! 	command buffer to be processed.
!
! FORMAL PARAMETERS:
!
!	STRING	The string following the XLATE keyword to be passed to
!		the XLATE routine.
!
!	LENGTH  Length of above string
!
! IMPLICIT INPUTS:
!
!	EDT$$A_CMD_BUF	address of the command buffer
!
!	EDT$$A_CMD_END	address of the command buffer end
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	1 = OK, 0 = error in command; message printed
!
! SIDE EFFECTS:
!
!	Adds commands into the command buffer
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$CHM_PAREXE,			! Parse and execute a command
	EDT$$MSG_BELL,				! Output a message with bell
	EDT$$ALO_HEAP,				! Allocate heap storage
	EDT$$DEA_HEAP : NOVALUE,		! Deallocate heap storage
	STR$FREE1_DX;				! Free a string

    EXTERNAL
	EDT$$A_XLATE_ROUT,			! Address of XLATE routine
	EDT$$G_XLATE_ENV,			! Environment address for XLATE
	EDT$$T_CMD_BUF,				! Command buffer
	EDT$$A_CMD_BUF,				! Current location in command buffer
	EDT$$A_CMD_END;				! End of command buffer

    MESSAGES ((INVSUBCOM, INSMEM, COMEXHXLA, PASSTATUS));

    LOCAL
	SAVE_CMD_BUF,
	SAVE_CMD_END,
	NEW_CMD_BUF : REF VECTOR [, BYTE],
	CMD_DESC : BLOCK [8, BYTE],
	STATUS;

    CMD_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    CMD_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    CMD_DESC [DSC$A_POINTER] = 0;
    CMD_DESC [DSC$W_LENGTH] = 0;
    STRING_DESC (CMD_DESC, LENGTH, .STRING);	! build descriptor
!+
! The following call to the XLATE routine is a general routine call
! using the linkage defined as IOCALL.   A call is being made to the
! routine whose address is contained in the variable EDT$$A_XLATE_ROUT.
! The comtents of the variable EDT$$G_XLATE_ENV is first put into
! register 1 for the call.  (This is done to fill the requirement of
! callable EDT where the user can specify an XLATE routine and some
! high-level languages require an environment address to be passed in
! register 1.)  The remaing parameter in the list is the actual
! parameter passed to the XLATE routine.
!-
    STATUS = IOCALL (.EDT$$A_XLATE_ROUT, .EDT$$G_XLATE_ENV, CMD_DESC);
!+
! If the returned status is bad print the indicated message.
!-

    IF ( NOT .STATUS)
    THEN
	BEGIN
	EDT$$MSG_BELL (.STATUS);
	STR$FREE1_DX (CMD_DESC);
	RETURN (0);
	END;

!+
! Returned status is good.  If there is a command string returned
! execute it.
! -

    IF (.CMD_DESC [DSC$W_LENGTH] GTRU 0)
    THEN
	BEGIN
!+
! Make sure there's enough room in the command buffer for the
! resulting command.
!-

	IF (.CMD_DESC [DSC$W_LENGTH] GTRU 256)
	THEN
	    BEGIN
	    EDT$$MSG_BELL (EDT$_COMEXHXLA);
	    STR$FREE1_DX (CMD_DESC);
	    RETURN (0);
	    END;

!+
! Copy the returned string into 256 bytes of heap storage.
!-

	IF EDT$$ALO_HEAP (%REF (256), NEW_CMD_BUF)	!
	THEN
	    CH$MOVE (.CMD_DESC [DSC$W_LENGTH], .CMD_DESC [DSC$A_POINTER], .NEW_CMD_BUF)
	ELSE
	    BEGIN
	    EDT$$MSG_BELL (EDT$_INSMEM);
	    RETURN (0);
	    END;

!+
! Save the current command buffer pointers.
!-
	SAVE_CMD_BUF = .EDT$$A_CMD_BUF;
	SAVE_CMD_END = .EDT$$A_CMD_END;
!+
! Point to the new command buffer.
!-
	EDT$$A_CMD_BUF = .NEW_CMD_BUF;
	EDT$$A_CMD_END = .CMD_DESC [DSC$W_LENGTH] + .EDT$$A_CMD_BUF;
!+
! Now parse and execute the XLATE-returned string.
!-
	STATUS = EDT$$CHM_PAREXE (1);
!+
! Restore the command buffer.
!-
	EDT$$A_CMD_BUF = .SAVE_CMD_BUF;
	EDT$$A_CMD_END = .SAVE_CMD_END;
!+
! Free XLATE's command buffer.
!-
	EDT$$DEA_HEAP (%REF (256), NEW_CMD_BUF);
	END;

!+
! We no longer need the returned string.
!-
    STR$FREE1_DX (CMD_DESC);
    RETURN (1);
    END;					! of routine EDT$$GET_XLATE

!<BLF/PAGE>

END						! of module EDT$GETXLATE

ELUDOM
