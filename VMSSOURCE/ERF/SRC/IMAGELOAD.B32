MODULE IMAGE_LOADER (%TITLE 'Errorlog Image Loader'
	    IDENT = 'V04-000' ) =
BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  ERF, Errorlog Report Formatter
!
! ABSTRACT:
!	This routine determins if the requested image needs to be
!	loaded. It will load an image and initialize the transfer
!	vectors.
!	
!
! ENVIRONMENT:
!
!	VAX/VMS operating system. unprivileged user mode,
!
! AUTHOR:  Elliott A. Drayton			Creation date: 23-Mar-1983
!
! Modified by:
!
!	V03-002	EAD0181		Elliott A. Drayton		27-Jun-1984
!		Added support for workstations.
!
!	V03-001	EAD0161		Elliott A. Drayton		20-Apr-1984
!		Change bind of image name in map_image.
!
!--

REQUIRE 'SRC$:ERFDEF.REQ';

FORWARD ROUTINE
	Get_image,			! Gets loaded image vector information
	Image_loader,			! Determines which image to load
	Map_image;			! Translates image name and loads it.

EXTERNAL ROUTINE
	Get_code,			! 
	Exec_image,			! Call loaded image with correct params.
	Lib$map_image;


GLOBAL
  Bus_image:			REF BLOCKVECTOR[,2] FIELD (desc_fields),
  Bus_version:			REF VECTOR[,WORD],
  Bus_xfer_addr:		REF VECTOR[,LONG],	! Address of bus xfer address table
  Disk_image:			REF BLOCKVECTOR[,2] FIELD (desc_fields),
  Disk_version:			REF VECTOR[,WORD],	! Address of version number of device dependent code
  Disk_xfer_addr:		REF VECTOR[,LONG],	! Address of disk xfer address table
  Lp_image:			REF BLOCKVECTOR[,2] FIELD (desc_fields),
  Lp_version:			REF VECTOR[,WORD],
  Lp_xfer_addr:			REF VECTOR[,LONG],	! Address of lp xfer address table
  Max_misc_type:		BYTE,
  Max_lp_type:			BYTE,
  Packet_processor_xfer_addr:	REF VECTOR[,LONG],	! Address of realtime xfer address table
  Packet_processor_image:	REF BLOCKVECTOR[,2] FIELD (desc_fields),
  Packet_processor_version:	REF VECTOR[,WORD],
  Realtime_image:		REF BLOCKVECTOR[,2] FIELD (desc_fields),
  Realtime_version:		REF VECTOR[,WORD],
  Realtime_xfer_addr:		REF VECTOR[,LONG],	! Address of realtime xfer address table
  Scom_image:			REF BLOCKVECTOR[,2] FIELD (desc_fields),
  Scom_version:			REF VECTOR[,WORD],
  Scom_xfer_addr:		REF VECTOR[,LONG],	! Address of scom xfer address table
  Tape_image:			REF BLOCKVECTOR[,2] FIELD (desc_fields),
  Tape_version:			REF VECTOR[,WORD],
  Tape_xfer_addr:		REF VECTOR[,LONG],	! Address of tape xfer address table
  Translate_entry_table:	REF VECTOR [,WORD],
  Workstation_image:		REF BLOCKVECTOR[,2] FIELD (desc_fields),
  Workstation_version:		REF VECTOR[,WORD],
  Workstation_xfer_addr:	REF VECTOR[,LONG],	! Address of workstation  xfer address table
  Worst_error:			    $BBLOCK [LONG] INITIAL (1);


LITERAL
  Word_size = 2,		! Number of bytes in a word
  Longword = 4,			! Number of bytes in a longword
  Descriptor_length = 8;	! Number of bytes in a string descriptor


EXTERNAL LITERAL
	Erf_loaderr,
	Erf_unkentry,
	Erf_unkclass;

SD ('Lnm$file_dev');

Global routine MAP_IMAGE ( image_name, transfer_address) =
Begin

!++
! Functional description
!
!	This is the control routine for the ERF facility.
!	Any errors encountered will be passed back to this routine.
!
! Calling sequence
!
!	ERF_CONTROL ()
!
! Input parameters
!
!
! Output parameters
!
!	None
!
! Routine value
!
!	Worst error is returned.
!
!----

Bind
   Image_name_addr = .image_name : $BBLOCK[dsc$k_d_bln],
   Addr = .transfer_address : LONG;

Literal
   Buffer_size = 80;

Local
   Buffer:		$BBLOCK [buffer_size],
   Desc:		$BBLOCK [dsc$k_d_bln],
   Filename_desc:	VECTOR [2,LONG] INITIAL (buffer_size,buffer),
   Filscalst:		$itmlst_decl (items = 1),
   Status,
   Trnlnmlst:		$itmlst_decl (items = 1);

     
!
! Init DESC in case there is no translation.
!
Desc[dsc$w_length]  = .image_name_addr[dsc$w_length];
Desc[dsc$a_pointer] = .image_name_addr[dsc$a_pointer];

!
! Initialize a item list for a call to file scan.
!
$Itmlst_init ( itmlst = filscalst,(itmcod = fscn$_name,bufadr = 0,bufsiz = 0) );

Status = $FILESCAN (srcstr = image_name_addr, valuelst = filscalst) ;
If NOT .status then signal_stop (.status) ;


!
! Use the descriptor from file scan in the translate to get
! the real image name in filename_desc.
!
$Itmlst_init ( itmlst = trnlnmlst, (itmcod = lnm$_string,
				    bufsiz = .filename_desc[0],
				    bufadr = .filename_desc[1],
				    retlen = filename_desc[0]));   

If $TRNLNM ( attr = %ref(lnm$m_case_blind),
		 tabnam = lnm$file_dev_desc,
		 lognam = filscalst,
		 itmlst = trnlnmlst)
then
   ( desc[dsc$w_length] = .filename_desc[0] ;
     desc[dsc$a_pointer] = .filename_desc[1]) ;

!
! DESC now has the original image name or its translation.
!
Status = LIB$MAP_IMAGE ( desc, desc, addr );
If NOT .status then (signal (erf_loaderr, 1, desc, .status); addr = 0 );

Return .status;
End;

Global routine IMAGE_LOADER ( Device_type, Device_class, Transfer_addr ) =
Begin
!++
! Functional description
!
!	This routine checks to see if the loadable image needed
!       to process the error packet is available. If it is not then
!       it calls get_image to load it. If successful then it call the
!	image to obtain information as to what error packets the
!	loaded image supports and fills in table entries which will
!	allow subsequent access to the modules in the image.
!
! Calling sequence
!
!	Image_loader (Type, Class, Transfer_addr)
!
! Input parameters
!
!
!
! Output parameters
!
!	None
!
! Routine value
!
!	Worst error is returned.
!
!----


Bind
   Xfer_addr = .Transfer_addr,
   Type = .Device_type : word,
   Class = .Device_class : word;


Selectoneu .class of set

[DC$_ZERO_CLASS]:
	! If Device_class is zero then Device_type is really entry type. Entry types
	! are not contigious so they should be mapped to a valid subscript. Thus
	! making device_type contigious.

	Begin
	  Incr I from 1 to .max_misc_type do
	    Begin
	    If .Translate_entry_table [.I] EQL .Type then
	      Begin
	      If .Packet_processor_xfer_addr [.I] EQL 0 then
		  Get_image ( Packet_processor_image[.I, desc_one]);
	      Xfer_addr = .Packet_processor_xfer_addr [.I];
	      .Device_class = -1;
	      Exitloop;
	      End;
	    End;

	  If ..device_class LSS 0 then
	    .device_class = 0
	  Else
	    Begin
	    Signal (erf_unkentry, 1, .type);
	    .device_class = 0
	    End;
	End;


[DC$_DISK]:
	Begin
	If .Disk_xfer_addr [.type] EQL 0 then
	   Get_image ( Disk_image[.type, desc_one] );
	Xfer_addr = .Disk_xfer_addr [.type];
	End;



[DC$_TAPE]:
	Begin
	If .Tape_xfer_addr [.type] EQL 0 then
	   Get_image ( Tape_image[.type, desc_one] );
	Xfer_addr = .Tape_xfer_addr [.type];
	End;



[DC$_SCOM]:
	Begin
	If .Scom_xfer_addr [.type] EQL 0 then
	   Get_image ( Scom_image[.type, desc_one] );
	Xfer_addr = .Scom_xfer_addr [.type];
	End;



[DC$_BUS]:
	Begin
	If .Bus_xfer_addr [.type] EQL 0 then
	   Get_image ( Bus_image[.type, desc_one] );
	Xfer_addr = .Bus_xfer_addr [.type];
	End;


[DC$_REALTIME]:
	Begin
	If .Realtime_xfer_addr [.type] EQL 0 then
	   GET_IMAGE ( Realtime_image[.type, desc_one] );
	Xfer_addr = .Realtime_xfer_addr [.type];
	End;

[DC$_WORKSTATION]:
	Begin
	If .Workstation_xfer_addr [.type] EQL 0 then
	   GET_IMAGE ( Workstation_image[.type, desc_one] );
	Xfer_addr = .Workstation_xfer_addr [.type];
	End;

[OTHERWISE]:
!
!  If we get here then we have a unknown device class.
!
	Begin
	Signal (erf_unkclass, 1, .class);
	End;
TES;
Return true;
End;

Routine GET_IMAGE (Image_name) =
Begin
!++
! Functional description
!
!	This routine takes the image name specified, test to see that it
!	is not of zero length and then calls map_image to load the image.
!	If the image gets loaded, it is called in order to obtain the
!	the transfer vector information.
!
! Calling sequence
!
!	Get_image (Image_name)
!
! Input parameters
!
!	Image_name : Contains address of image_name descriptor
!
! Output parameters
!
!	None
!
! Routine value
!
!	Worst error is returned.
!
!----


Local
	Array_addr,
	Array_size,
	Class:			WORD SIGNED,
	Status,
	Temp_xfer_addr,
	Transfer_offset:	WORD,
	Type:			WORD,
	Version:		WORD,
	Xfer_addr;

Bind
   Desc = .Image_name  : $BBLOCK[dsc$k_d_bln] ;

Literal
   Tran_vec_size = 8;


!
! If the Image name is not blank then try to load the image.
!
  
If .desc[dsc$w_length] EQL 0 then (Xfer_addr = 0; Return true);

Status = map_image ( desc, Xfer_addr ) ;
If NOT .status then (Xfer_addr = 0; Return true);


!	Call the image that was just loaded and recieve from it
!	the address and size of an array of longword codes. Each
!	of these codes are of the form:
!	31			      0
!	-------------------------------
!	! Device_class  ! Device_type !
!	-------------------------------
!	!Transfer_offset!  Version    !
!	-------------------------------
!
!	The first longword contains the class and type, while the
!	second longword contains the version number of each
!	device module in the loaded image, along with the transfer
!	vector offset value.
!

Exec_image ( Xfer_addr, Array_addr, Array_size);

Incr I from 1 to .Array_size do
  Begin
  Get_code ( Array_addr, Class, Type, Version, Transfer_offset );

  Temp_xfer_addr = .xfer_addr + tran_vec_size * .transfer_offset;

  Selectoneu .Class of set

  [DC$_ZERO_CLASS]:
	Begin
	Incr J from 1 to .max_misc_type do
	  Begin
	  If .Translate_entry_table [.J] EQL .Type then
	    Begin
	    If .Packet_processor_version [.J] EQL .version then
		Packet_processor_xfer_addr [.J] = .temp_xfer_addr
	    Else
		Packet_processor_xfer_addr [.J] = 0;
	    Class = -1;
	    Exitloop;
	    End;
	  End;

	  If .class LSS 0 then
	    class = 0
	  Else
	    Begin
	    Signal (erf_unkentry, 1, .type);
	    Class = 0;
	    End;
	End;


  [DC$_DISK]:
	Begin
	Disk_xfer_addr [.type] = .temp_xfer_addr;
	Disk_version [.type] = .version;
	End;


  [DC$_TAPE]:
	Begin
	Tape_xfer_addr [.type] = .temp_xfer_addr;
	Tape_version [.type] = .version;
	End;


  [DC$_BUS]:
	Begin
	Bus_xfer_addr [.type] = .temp_xfer_addr;
	Bus_version [.type] = .version;
	End;


  [DC$_SCOM]:
	Begin
	Scom_xfer_addr [.type] = .temp_xfer_addr;
	Scom_version [.type] = .version;
	End;

  [DC$_REALTIME]:
	Begin
	Realtime_xfer_addr [.type] = .temp_xfer_addr;
	Realtime_version [.type] = .version;
	End;

  [DC$_WORKSTATION]:
	Begin
	Workstation_xfer_addr [.type] = .temp_xfer_addr;
	Workstation_version [.type] = .version;
	End;

  [OTHERWISE]:
!signal maybe
  TES;
End;

Return true;
End;

END
ELUDOM

