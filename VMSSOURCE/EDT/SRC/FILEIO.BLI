%TITLE 'FILEIO - Central file I/O module'
MODULE EDT$FILEIO (				! Central file I/O routine for EDT
		IDENT = 'V04-000'			! File: FILEIO.BLI Edit: JBS1062
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This is the central file i/o routine used by EDT.
!
! ENVIRONMENT:	Runs in user mode on VAX/VMS and non-privileged PDP-11
!
! AUTHOR: Shelly T. Solomon, CREATION DATE: 07-Dec-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  STS 25-Dec-1981
! 1-002 - Change module name to EDT$FILEIO.  STS 25-Dec-1981
! 1-003 - Add calls for include file.  STS 26-Dec-1981
! 1-004 - Add require files for 11 translations. STS 28-Dec-1981
! 1-005 - Add linkage attribute to routine.  STS 30-Dec-1981
! 1-006 - Signal any errors.  STS 06-Jan-1982
! 1-007 - Add code for opening output file. STS 13-Jan-1982
! 1-008 - Fix DSC$A_POINTER macro STS 14-Jan-1982
! 1-009 - Add gets and puts STS 15-Jan-1982
! 1-010 - Change opening journal file to open in-out. STS 18-Jan-1982
! 1-011 - Fixed undefined symbol EDT$$opn_inout on 11. STS 19-Jan-1982
! 1-012 - output filenames with error messages. STS 19-Jan-1982
! 1-013 - Change the defaulting of the journal file name. STS 21-Jan-1982
! 1-014 - Add check to see if file is VFC format. STS 22-Jan-1982
! 1-015 - fix journal file name for 11's. STS 26-Jan-1982
! 1-016 - Add dot to sequence parameter passed with journal file.
!		STS 28-Jan-1982
! 1-017 - Pass RHB info down to 11 i/o routines. STS 02-Feb-1982
! 1-018 - Take out extra dot in get on 11's, also
!	  fix include rab. STS 08-Feb-1982
! 1-019 - add flush for journal buffer. STS 11-Feb-1982
! 1-020 - Take out call to edt$$get_fnam. STS 12-Feb-1982
! 1-021 - Pass correct status back to caller. STS 26-Feb-1982
! 1-022 - Add literals for callable parameters. STS 08-Mar-1982
! 1-023 - Fix status passed on opening write file. STS 10-Mar-1982
! 1-024	- Rearrange interface to EDT$IOMOD to improve the rationality
!	   of file naming.  JBS 25-Mar-1982
! 1-025	- Worry about non-standard input files.  JBS 26-Mar-1982
! 1-026	- Correct a typo.  JBS 27-Mar-1982
! 1-027	- Make the new file handling logic work on the PDP-11.  JBS 29-Mar-1982
! 1-028 - Use temporary file for WRITE and EXIT and then Rename it.  SMB 31-Mar-1982
! 1-029	- Add related file names for the PDP-11.  JBS 31-Mar-1982
! 1-030	- Distinguish two cases of output open for journal files on the PDP-11
!	   and add a flush counter to improve PDP-11 performance.  JBS 01-Apr-1982
! 1-031	- Rearrange file name handling for the journal file.  JBS 02-Apr-1982
! 1-032 - Make more modifications for WRITE/EXIT to temp files.  SMB 02-Apr-1982
! 1-033	- Cannot use %REF in STRING_DESC.  JBS 03-Apr-1982
! 1-034 - Fix bugs in PDP-11 opening of output files.  SMB 06-Apr-1982
! 1-035 - Add rename for PDP-11's and CLOSE_DEL for output files.  SMB 08-Apr-1982
! 1-036 - Convert PDP-11 filenames to uppercase.  SMB 12-Apr-1982
! 1-037 - Take out fix 1-036(move to LWRITE)-fix error message filename for VAX.  SMB 13-Apr-1982
! 1-038	- Always return status when closing PDP-11 files.  JBS 09-Apr-1982
! 1-039	- Reverse the attributes flag.  JBS 12-Apr-1982
! 1-040	- Merge the last four edits, which were done independently.  JBS 15-Apr-1982
! 1-041 - Add a parse before opening output files.  SMB 15-Apr-1982
! 1-042 - Put back line accidently deleted for filename storage.  SMB 16-Apr-1982
! 1-043 - Conditionalize the conversion to uppercase.  SMB 22-Apr-1982
! 1-044 - Restrict renaming to disks or DECtapes only.  SMB  26-Apr-1982
! 1-045 - Change the ordinals of global literals for file types.  SMB 19-May-1982
! 1-046 - Add some comments. STS 19-May-1982
! 1-047	- Clean up the magic numbers.  JBS 25-May-1982
! 1-048 - Don't use special linkage on 11's. STS 03-Jun-1982
! 1-049	- On OPEN, use RHB as the default name.  Also, don't use special linkages on
!	   VAX either, since the special linkage used by CALLFIO is compatible with
!	   the standard VAX/VMS linkage conventions.  JBS 15-Jun-1982
! 1-050	- Implement the new file defaulting rules.  JBS 17-Jun-1982
! 1-051 - Signal any bad status from flushing the journal file. STS 30-Jun-1982
! 1-052 - Fix bad parameter pass in open for output without related names.  SMB 06-Jul-1982
! 1-053 - Add a special check for RSTS disk files.  SMB 07-Jul-1982
! 1-054 - Store status on PDP-11 open for output.  SMB 19-Jul-1982
! 1-055	- Check for errors when deleting the journal file.  JBS 22-Feb-1983
! 1-056	- Don't maximize version number on WRITE.  JBS 04-Apr-1983
! 1-057	- Fix a typo in PDP-11 output file opening.  JBS 06-Apr-1983
! 1-058	- Fix the message given when the journal file fails to open for output.  JBS 02-May-1983
! 1-059	- Improve the appearance of the listing.  JBS 14-Jun-1983
! 1-060	- On VMS, if the EXIT file name is empty,
!	   use the resultant name from opening the input file.  JBS 29-Jul-1983
! 1-061	- Fix bug in edit 060--the input name was being discarded too soon if the
!	   output open happened after the input file was closed.  JBS 31-Aug-1983
! 1-062	- Complete edit 061 by storing the input file name even if the file
!	   does not open.  JBS 06-Sep-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$FILEIO;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

%IF %BLISS (BLISS32)
%THEN

REQUIRE 'EDTSRC:SYSSYM';

%FI

!
! MACROS:
!
!+
! Macro for the file type used as a constant.  This is defined as a macro
! so we can use %CHARCOUNT to pass the length of the string.
!-
!<BLF/NOFORMAT>

MACRO
    TEMP_TYP = '.TMP' %;		! File type for temporary output files (before being renamed)

!<BLF/FORMAT>
!
! EQUATED SYMBOLS:
!

%IF %BLISS (BLISS32)
%THEN

LITERAL
    EDT$K_FAC_NO = 133;

%FI

!+
! These codes need to be defined here because they need to be known at compile
! time in order to be used in case statements
!-

GLOBAL LITERAL
    EDT$K_OPEN_INPUT = 1,			! code signifying we wish to open a file for input
    EDT$K_OPEN_OUTPUT_SEQ = 2,		! code signifying we wish to open a sequenced file for output
    EDT$K_OPEN_OUTPUT_NOSEQ = 3,	! code meaning we wish to open a non-sequenced file for output
    EDT$K_OPEN_IN_OUT = 4,			! we wish to open a file for both input and output
    EDT$K_GET = 5,				! code signifying we want to get a record from a file
    EDT$K_PUT = 6,				! code signifying we want to put a record to a file
    EDT$K_CLOSE_DEL = 7,			! we want to close the file and then delete it
    EDT$K_CLOSE = 8,				! we want to close the file
    EDT$K_COMMAND_FILE = 1,			! code for the startup command file
    EDT$K_INPUT_FILE = 2,			! code for the main input file
    EDT$K_INCLUDE_FILE = 3,			! code for an include file
    EDT$K_JOURNAL_FILE = 4,			! code for the journal file
    EDT$K_OUTPUT_FILE = 5,			! code for the  output file
    EDT$K_WRITE_FILE = 6;			! code for an output file being written

LITERAL
    FLUSH_LIMIT = 5;				! Flush the journal file buffer after this many records

!+
! The following symbols are for the interface to EDT$$OPN_OFIDEF.  Note that these values
! are hard-coded into the MACRO-11 modules, and into EDT$IOMOD.
!-

LITERAL
    DISK_FILE_NO = 0,				! Not a disk file
    DISK_FILE_YES = 1,				! Is a disk file
    DISK_FILE_RSTS = 2,				! Is a disk file on RSTS
    SEQ_NO = 0,					! The file is not to be sequenced
    SEQ_YES = 1,				! The file is to be sequenced
    RELAT_NONE = 0,				! There is no related file name
    RELAT_INPUT = 1,				! The primary input file is used as the related file
    ATTR_INPUT = 0,				! Take file attributes from the primary input file
    ATTR_DEFAULT = 1,				! Use EDT's default file attributes
    ATTR_JOURNAL = 2;				! Use journal file attributes

!
! OWN STORAGE:
!
!  in the routine
!
! EXTERNAL REFERENCES:
!
! in the routine
!

%SBTTL 'EDT$FILEIO - Central EDT file I/O routine'

GLOBAL ROUTINE EDT$FILEIO (			! Central EDT file I/O routine
    FILECODE, 					! Function code
    FILESTRM, 					! Channel number
    FILE_REC, 					! File name, or record descriptor
    FILE_RHB					! Default file name, or record header descriptor
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
! This is the basic file I/O routine for EDT.  Callable EDT calls this
! routine to do any I/O if this is the routine passed to it by the calling
! program.  This is the routine passed to callable EDT by the "real" EDT.
!
! FORMAL PARAMETERS:
!
! filecode = address of fullword containing function code defining type of I/O
!   operation to be performed
! filestream = address of fullword containing stream identifier
! file_rec = address of string descriptor, i.e. the file name or place to store
!   record read or place to fetch record to be written
! file_rhb = address of string descriptor for any record prefixes
!
!
! Note: the default name is not implemented for WRITE/EXIT/PRINT files
!	(because of .TMP logic).  Fortunately, EDT does not pass a default
!	name on these channels.
!
! IMPLICIT INPUTS:
!
!	EDT$$Z_SYS_PRIRAB
!	EDT$$Z_SYS_JOURAB
!	EDT$$Z_SYS_CMDRAB
!	EDT$$Z_SYS_ALTRAB
!
!
! IMPLICIT OUTPUTS:
!
!	EDT$$Z_SYS_PRIRAB
!	EDT$$Z_SYS_JOURAB
!	EDT$$Z_SYS_CMDRAB
!	EDT$$Z_SYS_ALTRAB
!
! COMPLETION STATUS:
!
!	The only error returned, rather than signaled, is EOF.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	FILE_REC : REF BLOCK [, BYTE],
	FILE_RHB : REF BLOCK [, BYTE];

    EXTERNAL ROUTINE
	EDT$$PAR_FNAME,				! parse a file name
	EDT$$CNV_UPC,				! convert to uppercase
	EDT$$REN_FI,				! renames a file
	EDT$$FLUSH_OBUF,			! empties journal buffer
	EDT$$OPN_IFIDEF,			! I/O input open file routine
	EDT$$OPN_OFIDEF,			! I/O open output file routine
	EDT$$CLS_FI,				! I/O close file routine
	EDT$$RD_IFI,				! read a record from a file stream
	EDT$$WR_OFI;				! Write a record to a file stream

%IF %BLISS (BLISS32)
%THEN

    EXTERNAL ROUTINE
	STR$FREE1_DX,
	EDT$$OPN_INOUT,
	STR$COPY_DX,
	STR$COPY_R;

%FI

    EXTERNAL
	EDT$$Z_SYS_PRIRAB,
	EDT$$Z_SYS_JOURAB,
	EDT$$Z_SYS_CMDRAB,
	EDT$$Z_SYS_ALTRAB;

    MESSAGES ((INPFILOPN, FILNAM, INTERERR, COMFILNEX, COMFILNOP, NOJNLFIL, INPFILNEX, OUTFILCRE, NONSTDFIL));

%IF %BLISS (BLISS32)
%THEN
!+
! Keep the filename descriptor for each file - on VMS it's a dynamic descriptor
!-

    OWN
	CMD_DESC : BLOCK [8, BYTE]		! command file
	    PRESET ( [DSC$B_DTYPE] = DSC$K_DTYPE_T,
			  [DSC$B_CLASS] = DSC$K_CLASS_D,
			  [DSC$A_POINTER] = 0,
			  [DSC$W_LENGTH] = 0),
	JOU_DESC : BLOCK [8, BYTE]		! journal file
	    PRESET ( [DSC$B_DTYPE] = DSC$K_DTYPE_T,
			  [DSC$B_CLASS] = DSC$K_CLASS_D,
			  [DSC$A_POINTER] = 0,
			  [DSC$W_LENGTH] = 0),
	INP_DESC : BLOCK [8, BYTE]		! primary input file
	    PRESET ( [DSC$B_DTYPE] = DSC$K_DTYPE_T,
			  [DSC$B_CLASS] = DSC$K_CLASS_D,
			  [DSC$A_POINTER] = 0,
			  [DSC$W_LENGTH] = 0),
	ALT_DESC : BLOCK [8, BYTE]		! temporary or secondary file
	    PRESET ( [DSC$B_DTYPE] = DSC$K_DTYPE_T,
			  [DSC$B_CLASS] = DSC$K_CLASS_D,
			  [DSC$A_POINTER] = 0,
			  [DSC$W_LENGTH] = 0),
	OUT_DESC : BLOCK [8, BYTE]		! output file
	    PRESET ( [DSC$B_DTYPE] = DSC$K_DTYPE_T,
			  [DSC$B_CLASS] = DSC$K_CLASS_D,
			  [DSC$A_POINTER] = 0,
			  [DSC$W_LENGTH] = 0);

!+
! The resultant name from the primary input open, used for the primary output open.
! (We cannot use INP_DESC since it is released after the input file is closed,
! which may be before the output file is opened.)
!-

    OWN
	INP_NAME : VECTOR [256, BYTE],
	INP_NAME_LEN;

%ELSE

    OWN
	CMD_DESC : BLOCK [8, BYTE]		! command file
	    PRESET ( [DSC$A_POINTER] = 0,
			  [DSC$W_LENGTH] = 0),
	JOU_DESC : BLOCK [8, BYTE]		! journal file
	    PRESET ( [DSC$A_POINTER] = 0,
			  [DSC$W_LENGTH] = 0),
	INP_DESC : BLOCK [8, BYTE]		! main input file
	    PRESET ( [DSC$A_POINTER] = 0,
			  [DSC$W_LENGTH] = 0),
	ALT_DESC : BLOCK [8, BYTE]		! temporary or secondary file
	    PRESET ( [DSC$A_POINTER] = 0,
			  [DSC$W_LENGTH] = 0),
	OUT_DESC : BLOCK [8, BYTE]		! output file
	    PRESET ( [DSC$A_POINTER] = 0,
			  [DSC$W_LENGTH] = 0);

%FI

    OWN

%IF %BLISS (BLISS32)
%THEN
	OUT_IFI,				! internal file id for primary output file
	JOU_IFI,				! internal file id for journal file
	INCL_IFI,				! internal file id for include file
	INP_IFI,				! internal file id for primary input
	CMD_IFI,				! internal file id for command file
%FI

	DISK_FI,				! flag indicating opening a renameable file for output
	FLUSH_COUNTER : INITIAL (0),		! counts PUTs to journal towards flushing the buffer
	INCL_VFC,				! flag indicating include file is VFC format file
	INPUT_VFC;				! flag indicating primary input is VFC format file

    LOCAL
	VFC,
	ERROR,
	IO_STS,
	IO_STV,
	STATUS;

    BIND
	FILE_DESC = .FILE_REC : BLOCK [, BYTE],	! passed in descriptor for filename or record in or out
	RHB_DESC = .FILE_RHB : BLOCK [, BYTE];	! record header block descriptor

!+
! Find out first what kind of operation is requested
!-

    CASE ..FILECODE FROM EDT$K_OPEN_INPUT TO EDT$K_CLOSE OF
	SET
!+
! Open a file for input
!-

	[EDT$K_OPEN_INPUT] : 			! we want to open a file
	    BEGIN

	    LOCAL
		NONSTD;

%IF %BLISS (BLISS16)
%THEN
	    EDT$$CNV_UPC (.FILE_DESC [DSC$A_POINTER], .FILE_DESC [DSC$W_LENGTH]);
%FI

	    NONSTD = 0;

	    CASE ..FILESTRM FROM EDT$K_COMMAND_FILE TO EDT$K_INCLUDE_FILE OF
		SET 				! which file?

		[EDT$K_COMMAND_FILE] : 		! open the command file for input
		    BEGIN

%IF %BLISS (BLISS32)
%THEN
		    CMD_IFI = EDT$$OPN_IFIDEF (EDT$$Z_SYS_CMDRAB, FILE_DESC, .RHB_DESC [DSC$A_POINTER],
			.RHB_DESC [DSC$W_LENGTH], RELAT_NONE, IO_STS, IO_STV, VFC, NONSTD);
!+
! If the open failed then find out why
!-

		    IF (.CMD_IFI EQL 0)
		    THEN
!+
! Signal an error
!-
			SIGNAL_STOP (SHR$_OPENIN + (EDT$K_FAC_NO*65536) + STS$K_SEVERE, 1, FILE_DESC,
			    .IO_STS, .IO_STV);

!+
! If the file is non-standard, indicate this.
!-

		    IF .NONSTD THEN IO_STS = EDT$_NONSTDFIL;

!+
! Save the complete filename
!-
		    STRING_DESC (CMD_DESC, FILE_DESC [DSC$W_LENGTH], .FILE_DESC [DSC$A_POINTER]);
%ELSE
		    IO_STS = EDT$$OPN_IFIDEF (EDT$$Z_SYS_CMDRAB, .FILE_DESC [DSC$A_POINTER],
			.FILE_DESC [DSC$W_LENGTH], .RHB_DESC [DSC$A_POINTER], .RHB_DESC [DSC$W_LENGTH], 0, 0,
			0, 0);
%FI

		    RETURN (.IO_STS);		! return status
		    END;

		[EDT$K_INPUT_FILE] : 		! open the primary input file for input
		    BEGIN

%IF %BLISS (BLISS32)
%THEN
		    INP_IFI = EDT$$OPN_IFIDEF (EDT$$Z_SYS_PRIRAB, FILE_DESC, .RHB_DESC [DSC$A_POINTER],
			.RHB_DESC [DSC$W_LENGTH], RELAT_NONE, IO_STS, IO_STV, INPUT_VFC, NONSTD);
!+
! Save the name for opening the output file on VMS, even if the input file does not open.
!-
		    INP_NAME_LEN = .FILE_DESC [DSC$W_LENGTH];
		    CH$MOVE (.INP_NAME_LEN, .FILE_DESC [DSC$A_POINTER], INP_NAME);
!+
! Check for open failure.
!-

		    IF (.INP_IFI EQL 0)
		    THEN
			SIGNAL_STOP (SHR$_OPENIN + (EDT$K_FAC_NO*65536) + STS$K_SEVERE,
			    1, FILE_DESC, .IO_STS, .IO_STV);

!+
! If the file is non-standard, indicate this.
!-

		    IF .NONSTD THEN IO_STS = EDT$_NONSTDFIL;

%ELSE
		    IO_STS = EDT$$OPN_IFIDEF (EDT$$Z_SYS_PRIRAB, .FILE_DESC [DSC$A_POINTER],
			.FILE_DESC [DSC$W_LENGTH], .RHB_DESC [DSC$A_POINTER], .RHB_DESC [DSC$W_LENGTH], 0, 0,
			0, 0);
%FI

!+
! Save the complete filename.  This is needed on the PDP-11 for opening the journal file.
!-
		    STRING_DESC (INP_DESC, FILE_DESC [DSC$W_LENGTH], .FILE_DESC [DSC$A_POINTER]);
		    RETURN (.IO_STS);		! return status
		    END;

		[EDT$K_INCLUDE_FILE] : 		! open include file for input
		    BEGIN

%IF %BLISS (BLISS32)
%THEN
		    BEGIN
		    INCL_IFI = EDT$$OPN_IFIDEF (EDT$$Z_SYS_ALTRAB, FILE_DESC, .RHB_DESC [DSC$A_POINTER],
			.RHB_DESC [DSC$W_LENGTH], RELAT_INPUT, IO_STS, IO_STV, INCL_VFC, NONSTD);

		    IF (.INCL_IFI EQL 0)
		    THEN
!+
! Signal the error
!-
			SIGNAL_STOP (SHR$_OPENIN + (EDT$K_FAC_NO*65536) + STS$K_SEVERE, 1, FILE_DESC,
			    .IO_STS, .IO_STV);

!+
! If the file is non-standard, indicate this.
!-

		    IF .NONSTD THEN IO_STS = EDT$_NONSTDFIL;

!+
! Save the complete filename
!-
		    STRING_DESC (ALT_DESC, FILE_DESC [DSC$W_LENGTH], .FILE_DESC [DSC$A_POINTER]);
		    END;
%ELSE
		    IO_STS = EDT$$OPN_IFIDEF (EDT$$Z_SYS_ALTRAB, .FILE_DESC [DSC$A_POINTER],
			.FILE_DESC [DSC$W_LENGTH], .RHB_DESC [DSC$A_POINTER], .RHB_DESC [DSC$W_LENGTH],
			.INP_DESC [DSC$A_POINTER], .INP_DESC [DSC$W_LENGTH], 0, 0);
%FI

		    RETURN (.IO_STS);
		    END;

		[INRANGE, OUTRANGE] :
		    ASSERT (0);
		TES;

	    END;
!+
! Open a file for output
!-

	[EDT$K_OPEN_OUTPUT_SEQ, EDT$K_OPEN_OUTPUT_NOSEQ] :
	    BEGIN

	    LOCAL
		SEQ;

%IF %BLISS (BLISS16)
%THEN
	    EDT$$CNV_UPC (.FILE_DESC [DSC$A_POINTER], .FILE_DESC [DSC$W_LENGTH]);
%FI

	    IF (..FILECODE EQL EDT$K_OPEN_OUTPUT_SEQ)
	    THEN
		SEQ = SEQ_YES			! make it a sequenced VFC file
	    ELSE
		SEQ = SEQ_NO;			! not a sequenced file

	    CASE ..FILESTRM FROM EDT$K_JOURNAL_FILE TO EDT$K_WRITE_FILE OF
		SET

		[EDT$K_OUTPUT_FILE, EDT$K_WRITE_FILE] : 	! WRITE or OUTPUT file
		    BEGIN

		    LOCAL
			ATT,	! 0 = use input file attributes, 1 = use EDT's default file attributes
			RELAT,	! 0 = no related file, 1 = use input file's name and type before default name
			FORCE_MAXV;		! 1 = force maximum version number

		    IF (..FILESTRM EQL EDT$K_OUTPUT_FILE)
		    THEN
			BEGIN
			ATT = ATTR_INPUT;
			RELAT = RELAT_INPUT;
			FORCE_MAXV = 1;
			END
		    ELSE
			BEGIN
			ATT = ATTR_DEFAULT;
			RELAT = RELAT_NONE;
			FORCE_MAXV = 0;
			END;

!+
! This code cannot handle default file names, so make sure there isn't one.
!-
		    ASSERT (.RHB_DESC [DSC$W_LENGTH] EQL 0);
		    DISK_FI = 0;

%IF %BLISS (BLISS32)
%THEN
!+
! On VMS, if the EXIT file name is not specified, use the resultant file name from the input open.
! Because we are forcing maximum version number the version number in the input file name string
! won't cause trouble.
!-

		    IF ((.RELAT EQL RELAT_INPUT) AND (.FILE_DESC [DSC$W_LENGTH] EQLU 0))
		    THEN
			BEGIN
			STRING_DESC (FILE_DESC, INP_NAME_LEN, INP_NAME);
			END;

!+
! Parse the output file name - If successful, then do the open; otherwise
! signal an error on open
!-
		    STATUS = EDT$$PAR_FNAME (EDT$$Z_SYS_ALTRAB, FILE_DESC, .RELAT, DISK_FI, IO_STS, IO_STV);

		    IF ( NOT .STATUS)
		    THEN
			SIGNAL_STOP (SHR$_OPENOUT + (EDT$K_FAC_NO*65536) + STS$K_SEVERE,
			    1, FILE_DESC, .IO_STS, .IO_STV);

		    OUT_DESC [DSC$W_LENGTH] = 0;
		    OUT_DESC [DSC$A_POINTER] = 0;
!+
! Save description of output file before translation with .TMP extension
! if this is a disk or DECtape file for rename later
!-

		    IF (.DISK_FI)
		    THEN
			BEGIN
			STRING_DESC (OUT_DESC, FILE_DESC [DSC$W_LENGTH], .FILE_DESC [DSC$A_POINTER]);
			STR$COPY_R (FILE_DESC, %REF (%CHARCOUNT (TEMP_TYP)), UPLIT (BYTE (TEMP_TYP)));
			FORCE_MAXV = 1;		! For .TMP file, force max version number
			END;

!+
! If this is a disk file, open a temporary file for output, then rename later
! if all goes well.  If not a disk file, just open the "given" file.
!-
		    OUT_IFI = EDT$$OPN_OFIDEF (EDT$$Z_SYS_ALTRAB, FILE_DESC, .OUT_DESC [DSC$A_POINTER],
			.OUT_DESC [DSC$W_LENGTH], .SEQ, .RELAT, .ATT, .FORCE_MAXV, IO_STS, IO_STV);
!+
! Signal an error
!-

		    IF (.OUT_IFI EQL 0)
		    THEN
			SIGNAL_STOP (SHR$_OPENOUT + (EDT$K_FAC_NO*65536) + STS$K_SEVERE,
			    1, FILE_DESC, .IO_STS, .IO_STV);

!+
! Save the complete filename for the close later
!-
		    STRING_DESC (ALT_DESC, FILE_DESC [DSC$W_LENGTH], .FILE_DESC [DSC$A_POINTER]);
%ELSE

		    IF (.RELAT EQL RELAT_INPUT)
		    THEN
			BEGIN
			STATUS = EDT$$PAR_FNAME (EDT$$Z_SYS_ALTRAB, .FILE_DESC [DSC$A_POINTER],
			    .FILE_DESC [DSC$W_LENGTH], .INP_DESC [DSC$A_POINTER], .INP_DESC [DSC$W_LENGTH],
			    DISK_FI);
			END
		    ELSE
			BEGIN
			STATUS = EDT$$PAR_FNAME (EDT$$Z_SYS_ALTRAB, .FILE_DESC [DSC$A_POINTER],
			    .FILE_DESC [DSC$W_LENGTH], 0, 0, DISK_FI);
			END;

		    STRING_DESC (OUT_DESC, FILE_DESC [DSC$W_LENGTH], .FILE_DESC [DSC$A_POINTER]);

		    IF (.STATUS)
		    THEN
!+
! Disk files are handled specially on RSTS.  We don't use a .TMP extension
! but rather open it in temporary mode using the actual name given
!-

			IF (.DISK_FI EQL DISK_FILE_YES)
			THEN
			    BEGIN

			    IF (.RELAT EQL RELAT_INPUT)
			    THEN
				BEGIN
				IO_STS = EDT$$OPN_OFIDEF (EDT$$Z_SYS_ALTRAB, UPLIT (BYTE (TEMP_TYP)),
				    %CHARCOUNT (TEMP_TYP), .FILE_DESC [DSC$A_POINTER],
				    .FILE_DESC [DSC$W_LENGTH], .INP_DESC [DSC$A_POINTER],
				    .INP_DESC [DSC$W_LENGTH], 1, 0, .SEQ, .ATT);
				END
			    ELSE
				BEGIN
				IO_STS = EDT$$OPN_OFIDEF (EDT$$Z_SYS_ALTRAB, UPLIT (BYTE (TEMP_TYP)),
				    %CHARCOUNT (TEMP_TYP), .FILE_DESC [DSC$A_POINTER],
				    .FILE_DESC [DSC$W_LENGTH], 0, 0, 1, 0, .SEQ, .ATT);
				END;

			    END
			ELSE
			    BEGIN

			    IF (.RELAT EQL RELAT_INPUT)
			    THEN
				BEGIN
				IO_STS = EDT$$OPN_OFIDEF (EDT$$Z_SYS_ALTRAB, .FILE_DESC [DSC$A_POINTER],
				    .FILE_DESC [DSC$W_LENGTH], 0, 0, .INP_DESC [DSC$A_POINTER],
				    .INP_DESC [DSC$W_LENGTH], .FORCE_MAXV, 0, .SEQ, .ATT);
				END
			    ELSE
				BEGIN
				IO_STS = EDT$$OPN_OFIDEF (EDT$$Z_SYS_ALTRAB, .FILE_DESC [DSC$A_POINTER],
				    .FILE_DESC [DSC$W_LENGTH], 0, 0, 0, 0, .FORCE_MAXV, 0, .SEQ, .ATT);
				END;

			    END

		    ELSE
			IO_STS = .STATUS;

%FI

		    RETURN (.IO_STS);
		    END;

		[EDT$K_JOURNAL_FILE] :
		    BEGIN

%IF %BLISS (BLISS32)
%THEN
		    JOU_IFI = EDT$$OPN_OFIDEF (EDT$$Z_SYS_JOURAB, FILE_DESC, .RHB_DESC [DSC$A_POINTER],
			.RHB_DESC [DSC$W_LENGTH], SEQ_NO, RELAT_INPUT, ATTR_JOURNAL, 1, IO_STS, IO_STV);

		    IF (.JOU_IFI EQL 0)
		    THEN
			SIGNAL_STOP (SHR$_OPENOUT + (EDT$K_FAC_NO*65536) + STS$K_SEVERE,
			    1, FILE_DESC, .IO_STS, .IO_STV);

		    STRING_DESC (JOU_DESC, FILE_DESC [DSC$W_LENGTH], .FILE_DESC [DSC$A_POINTER]);
%ELSE
!+
! Note that .SEQ+1 is used to specify a normal output open or an open for append.
!-
		    IO_STS = EDT$$OPN_OFIDEF (EDT$$Z_SYS_JOURAB, .FILE_DESC [DSC$A_POINTER],
			.FILE_DESC [DSC$W_LENGTH], .RHB_DESC [DSC$A_POINTER], .RHB_DESC [DSC$W_LENGTH],
			.INP_DESC [DSC$A_POINTER], .INP_DESC [DSC$W_LENGTH], 1, .SEQ + 1, 0, 1);
%FI

		    RETURN (.IO_STS);
		    END;

		[INRANGE, OUTRANGE] :
		    ASSERT (0);
		TES;

	    END;
!+
! Open a file for both input and output
!-

	[EDT$K_OPEN_IN_OUT] :
	    BEGIN
!+
! The journal file is the only file we can open this way
!-

	    IF (..FILESTRM EQL EDT$K_JOURNAL_FILE)
	    THEN
		BEGIN

%IF %BLISS (BLISS32)
%THEN
		JOU_IFI = EDT$$OPN_INOUT (EDT$$Z_SYS_JOURAB, FILE_DESC, .RHB_DESC [DSC$A_POINTER],
		    .RHB_DESC [DSC$W_LENGTH], IO_STS, IO_STV);

		IF (.JOU_IFI EQL 0)
		THEN
		    SIGNAL_STOP (SHR$_OPENIN + (EDT$K_FAC_NO*65536) + STS$K_SEVERE, 1,
			FILE_DESC, .IO_STS, .IO_STV);

		STRING_DESC (JOU_DESC, FILE_DESC [DSC$W_LENGTH], .FILE_DESC [DSC$A_POINTER]);
%ELSE
		IO_STS = EDT$$OPN_IFIDEF (EDT$$Z_SYS_JOURAB, .FILE_DESC [DSC$A_POINTER],
		    .FILE_DESC [DSC$W_LENGTH], .RHB_DESC [DSC$A_POINTER], .RHB_DESC [DSC$W_LENGTH],
		    .INP_DESC [DSC$A_POINTER], .INP_DESC [DSC$W_LENGTH], 0, 1);
%FI

		RETURN (.IO_STS);
		END
	    ELSE
		ASSERT (0);

	    END;

	[EDT$K_GET] : 				! We wish to get a record from a file
	    BEGIN

	    LOCAL
		DESC_ADDR,
		RAB;

	    CASE ..FILESTRM FROM EDT$K_COMMAND_FILE TO EDT$K_JOURNAL_FILE OF
		SET

		[EDT$K_COMMAND_FILE] : 		! the startup command file
		    BEGIN
		    DESC_ADDR = CMD_DESC;
		    RAB = EDT$$Z_SYS_CMDRAB;
		    VFC = 0;
		    END;

		[EDT$K_INPUT_FILE] : 		! get a record from the primary input file
		    BEGIN
		    DESC_ADDR = INP_DESC;
		    VFC = .INPUT_VFC;
		    RAB = EDT$$Z_SYS_PRIRAB;
		    END;

		[EDT$K_INCLUDE_FILE] : 		! the secondary input file
		    BEGIN
		    VFC = .INCL_VFC;
		    DESC_ADDR = ALT_DESC;
		    RAB = EDT$$Z_SYS_ALTRAB;
		    END;

		[EDT$K_JOURNAL_FILE] : 		! get a record from the journal file
		    BEGIN
		    VFC = 0;
		    DESC_ADDR = JOU_DESC;
		    RAB = EDT$$Z_SYS_JOURAB
		    END;

		[INRANGE, OUTRANGE] :
		    ASSERT (0);
		TES;

%IF %BLISS (BLISS32)
%THEN
	    STATUS = EDT$$RD_IFI (.RAB, FILE_DESC, RHB_DESC, IO_STS, IO_STV, .VFC);

	    IF ( NOT .STATUS)
	    THEN

		IF (.IO_STS EQL RMS$_EOF)
		THEN
		    RETURN (.IO_STS)
		ELSE
		    SIGNAL_STOP (SHR$_READERR + (EDT$K_FAC_NO*65536) + STS$K_SEVERE, 1, .DESC_ADDR, .IO_STS,
			.IO_STV);

%ELSE
	    BEGIN

	    LOCAL
		REC_ADDR,
		REC_LEN;

	    STATUS = EDT$$RD_IFI (.RAB, REC_ADDR, REC_LEN, .RHB_DESC [DSC$A_POINTER], 	!
		RHB_DESC [DSC$W_LENGTH]);
	    STRING_DESC (FILE_DESC, REC_LEN, .REC_ADDR);
	    END;
%FI

	    RETURN (.STATUS);
	    END;

	[EDT$K_PUT] : 				! we wish to put a record to a file
	    BEGIN

	    LOCAL
		DESC_ADDR,
		RAB;

	    CASE ..FILESTRM FROM EDT$K_JOURNAL_FILE TO EDT$K_WRITE_FILE OF
		SET

		[EDT$K_OUTPUT_FILE, EDT$K_WRITE_FILE] : 	! put a record in an output file
		    BEGIN
		    DESC_ADDR = ALT_DESC;
		    RAB = EDT$$Z_SYS_ALTRAB;
		    END;

		[EDT$K_JOURNAL_FILE] : 		! put a record to the journal file
		    BEGIN
		    DESC_ADDR = JOU_DESC;
		    RAB = EDT$$Z_SYS_JOURAB;
		    END;

		[INRANGE, OUTRANGE] :
		    ASSERT (0);
		TES;

%IF %BLISS (BLISS32)
%THEN
	    STATUS = EDT$$WR_OFI (.RAB, FILE_DESC, RHB_DESC, IO_STS, IO_STV);
%ELSE
	    STATUS = EDT$$WR_OFI (.RAB, .FILE_DESC [DSC$A_POINTER], .FILE_DESC [DSC$W_LENGTH],
		.RHB_DESC [DSC$A_POINTER]);
%FI

	    IF ( NOT .STATUS)
	    THEN

%IF %BLISS (BLISS32)
%THEN
		SIGNAL_STOP (SHR$_WRITEERR + (EDT$K_FAC_NO*65536) + STS$K_SEVERE, 1, .DESC_ADDR, .IO_STS,
		    .IO_STV)
%FI

	    ELSE

		IF (..FILESTRM EQL EDT$K_JOURNAL_FILE)
		THEN 				! keep the journal buffer clear
		    BEGIN
		    FLUSH_COUNTER = .FLUSH_COUNTER + 1;

		    IF (.FLUSH_COUNTER EQL FLUSH_LIMIT)
		    THEN
			BEGIN

%IF %BLISS (BLISS32)
%THEN
			STATUS = EDT$$FLUSH_OBUF (.RAB, IO_STV);

			IF ( NOT .STATUS)
			THEN
			    SIGNAL_STOP (SHR$_WRITEERR + (EDT$K_FAC_NO*65536) + STS$K_SEVERE, 1, .DESC_ADDR,
				.STATUS, .IO_STV);

%ELSE
			STATUS = EDT$$FLUSH_OBUF (.RAB);
%FI

			FLUSH_COUNTER = 0;
			END;

		    END;

	    RETURN (.STATUS);
	    END;

	[EDT$K_CLOSE] : 			! close a file
	    BEGIN

	    LOCAL
		DESC_ADDR,
		ERROR;

	    CASE ..FILESTRM FROM EDT$K_COMMAND_FILE TO EDT$K_WRITE_FILE OF
		SET

		[EDT$K_COMMAND_FILE] : 		! close the command file
		    BEGIN

%IF %BLISS (BLISS32)
%THEN
		    DESC_ADDR = CMD_DESC;
		    ERROR = SHR$_CLOSEIN;
		    EDT$$CLS_FI (.CMD_IFI, EDT$$Z_SYS_CMDRAB, 0, .DESC_ADDR, IO_STS, IO_STV);
%ELSE
		    IO_STS = EDT$$CLS_FI (EDT$$Z_SYS_CMDRAB, 0);
%FI

		    END;

		[EDT$K_INPUT_FILE] : 		! close the primary input ifle
		    BEGIN

%IF %BLISS (BLISS32)
%THEN
		    DESC_ADDR = INP_DESC;
		    ERROR = SHR$_CLOSEIN;
		    EDT$$CLS_FI (.INP_IFI, EDT$$Z_SYS_PRIRAB, 0, .DESC_ADDR, IO_STS, IO_STV);
%ELSE
		    IO_STS = EDT$$CLS_FI (EDT$$Z_SYS_PRIRAB, 0);
%FI

		    END;

		[EDT$K_INCLUDE_FILE] : 		! close the secondary input file
		    BEGIN

%IF %BLISS (BLISS32)
%THEN
		    DESC_ADDR = ALT_DESC;
		    EDT$$CLS_FI (.INCL_IFI, EDT$$Z_SYS_ALTRAB, 0, .DESC_ADDR, IO_STS, IO_STV);
		    ERROR = SHR$_CLOSEIN;
%ELSE
		    IO_STS = EDT$$CLS_FI (EDT$$Z_SYS_ALTRAB, 0);
%FI

		    END;

		[EDT$K_OUTPUT_FILE, EDT$K_WRITE_FILE] : 	! close an output file
		    BEGIN

		    LOCAL
			FORCE_MAXV;

		    IF (..FILESTRM EQL EDT$K_OUTPUT_FILE) THEN FORCE_MAXV = 1 ELSE FORCE_MAXV = 0;

%IF %BLISS (BLISS32)
%THEN
		    DESC_ADDR = ALT_DESC;
		    ERROR = SHR$_CLOSEOUT;
		    EDT$$CLS_FI (.OUT_IFI, EDT$$Z_SYS_ALTRAB, 0, .DESC_ADDR, IO_STS, IO_STV);
!+
! Check the status from the close
!-

		    IF (.IO_STS)
		    THEN

			IF (.DISK_FI)
			THEN
			    BEGIN
			    EDT$$REN_FI (ALT_DESC, OUT_DESC, .FORCE_MAXV, IO_STS, IO_STV);
			    STRING_DESC (FILE_DESC, OUT_DESC [DSC$W_LENGTH], .OUT_DESC [DSC$A_POINTER]);
			    END
			ELSE
			    STRING_DESC (FILE_DESC, ALT_DESC [DSC$W_LENGTH], .ALT_DESC [DSC$A_POINTER]);

%ELSE

		    IF (.DISK_FI NEQ DISK_FILE_RSTS) THEN IO_STS = EDT$$CLS_FI (EDT$$Z_SYS_ALTRAB, 0);

!+
! If this is a disk file and we had a successful close, then rename the
! temp file to the name originally given
!-

		    IF ((.IO_STS) AND (.DISK_FI EQL DISK_FILE_YES))
		    THEN
			IO_STS = EDT$$REN_FI (EDT$$Z_SYS_ALTRAB, .OUT_DESC [DSC$A_POINTER],
			    .OUT_DESC [DSC$W_LENGTH], .FORCE_MAXV);

!+
! If this is a RSTS disk file then do a rename of any currently existing
! files with the originally given name to the same name with a .BAK
! extension and close the tentative output file making it permanent
!-

		    IF (.DISK_FI EQL DISK_FILE_RSTS)
		    THEN
			BEGIN
			IO_STS = EDT$$REN_FI (EDT$$Z_SYS_ALTRAB, .OUT_DESC [DSC$A_POINTER],
			    .OUT_DESC [DSC$W_LENGTH], .FORCE_MAXV);

			IF (.IO_STS) THEN IO_STS = EDT$$CLS_FI (EDT$$Z_SYS_ALTRAB, 0);

			END;

%FI

		    END;

		[EDT$K_JOURNAL_FILE] : 		! close the journal file
		    BEGIN

%IF %BLISS (BLISS32)
%THEN
		    DESC_ADDR = JOU_DESC;
		    ERROR = SHR$_CLOSEOUT;
		    EDT$$CLS_FI (.JOU_IFI, EDT$$Z_SYS_JOURAB, 0, .DESC_ADDR, IO_STS, IO_STV);
%ELSE
		    IO_STS = EDT$$CLS_FI (EDT$$Z_SYS_JOURAB, 0);
%FI

		    END;

		[INRANGE, OUTRANGE] :
		    ASSERT (0);
		TES;

%IF %BLISS (BLISS32)
%THEN
!+
! Check the status from either the close or the rename of output files
!-

	    IF ( NOT .IO_STS)
	    THEN
		SIGNAL_STOP (.ERROR + (EDT$K_FAC_NO*65536) + STS$K_SEVERE, 1, .DESC_ADDR,
		    .IO_STS, .IO_STV);

	    STR$FREE1_DX (.DESC_ADDR);
%FI

	    RETURN (.IO_STS);
	    END;

	[EDT$K_CLOSE_DEL] :
	    BEGIN

	    LOCAL
		DESC_ADDR;

	    CASE ..FILESTRM FROM EDT$K_JOURNAL_FILE TO EDT$K_WRITE_FILE OF
		SET

		[EDT$K_OUTPUT_FILE, EDT$K_WRITE_FILE] :
		    BEGIN

%IF %BLISS (BLISS32)
%THEN
		    DESC_ADDR = ALT_DESC;
		    EDT$$CLS_FI (.OUT_IFI, EDT$$Z_SYS_ALTRAB, 1, ALT_DESC, IO_STS, IO_STV);
%ELSE
		    IO_STS = EDT$$CLS_FI (EDT$$Z_SYS_ALTRAB, 1);
%FI

		    END;

		[EDT$K_JOURNAL_FILE] :
		    BEGIN

%IF %BLISS (BLISS32)
%THEN
		    DESC_ADDR = JOU_DESC;
		    EDT$$CLS_FI (.JOU_IFI, EDT$$Z_SYS_JOURAB, 2, JOU_DESC, IO_STS, IO_STV);
%ELSE
		    IO_STS = EDT$$CLS_FI (EDT$$Z_SYS_JOURAB, 2);
%FI

		    END;

		[INRANGE, OUTRANGE] :
		    ASSERT (0);
		TES;

%IF %BLISS (BLISS32)
%THEN

	    IF ( NOT .IO_STS)
	    THEN
		SIGNAL_STOP (SHR$_CLOSEOUT + (EDT$K_FAC_NO*65536) + STS$K_SEVERE, 1,
		    .DESC_ADDR, .IO_STS, .IO_STV);

	    STR$FREE1_DX (.DESC_ADDR);
%FI

	    RETURN (.IO_STS);
	    END;

	[INRANGE, OUTRANGE] :
	    ASSERT (0);
	TES;

    ASSERT (0);
    RETURN (0);
    END;					! of routine EDT$FILEIO

!<BLF/PAGE>

END						! of module EDT$FILEIO

ELUDOM
