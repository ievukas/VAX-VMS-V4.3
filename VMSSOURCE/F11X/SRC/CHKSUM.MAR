	.TITLE	CHKSUM - Compute checksum routine
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; FACILITY: F11B XQP
;
; ABSTRACT:
;	This routine computes and checks a file header checksum.
;
;
; ENVIRONMENT: Kernel mode, AST level
;
;
;--
;
; AUTHOR: Christian Saether	, CREATION DATE: 28-Mar-1983
;
; MODIFIED BY:
;
;	V03-001	CDS0001		Christian D. Saether	28-Mar-1983
;		Rewritten in MACRO (from BLISS) to allow optimization
;		of stretching out checksum computation to reduce
;		number of instructions executed and to let various
;		cpu prefetch and pipeline optimizations get somewhere.
;

	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;


	.SBTTL	CHECKSUM

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine computes, checks, and stores the file header checksum.
;
; CALLING SEQUENCE:
;	CALLS	#1, CHECKSUM
;
; INPUT PARAMETERS:
;	ARG1:	address of file header buffer
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	1 if checksum was correct
;	0 if checksum was wrong
;
; SIDE EFFECTS:
;	Correct checksum stored in header
;
;--

	.PSECT	$CODE$,NOWRT,EXE,QUAD

	.ENTRY	CHECKSUM, ^M<R2>
	CLRL	R1			; Accumulate checksum in R1.
	MOVL	4(AP), R2		; Header address into R2.
	MOVZBL	#32, R0			; Loop counter into R0.
	BRB	20$			; Only add 7 on first pass.
	NOP				; Quad align 10$ label.
	NOP
	NOP
10$:	ADDW2	(R2)+, R1		; Compute checksum.
20$:	ADDW2	(R2)+, R1		; Compute checksum.
	ADDW2	(R2)+, R1		; Compute checksum.
	ADDW2	(R2)+, R1		; Compute checksum.
	ADDW2	(R2)+, R1		; Compute checksum.
	ADDW2	(R2)+, R1		; Compute checksum.
	ADDW2	(R2)+, R1		; Compute checksum.
	ADDW2	(R2)+, R1		; Compute checksum.
	SOBGTR	R0, 10$			; 8*32-1 = 255 words summed.
	CMPW	(R2), R1		; Compare with existing checksum.
	BNEQ	30$			; Branch if mismatch (leaving R0 = 0).
	INCL	R0			; R0 now set to 1 (success).
30$:	MOVW	R1, (R2)		; Store computed checksum.
	RET				; Exit.

	.END
