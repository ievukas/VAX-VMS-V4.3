MODULE	OPC$CLUSREPLY	(
			 LANGUAGE (BLISS32),
			 IDENT = 'V04-000'
			) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:
!
!	OPCOM
!
! ABSTRACT:
!
!	This module contains the specialized logic to service
!	a particular type of request sent by a user to OPCOM.
!
! Environment:
!
!	VAX/VMS operating system.
!
! Author:
!
!	CW Hobbs
!
! Creation date:
!
!	16-JUL-1983
!
! Revision history:
!
!	V03-003	CWH3169		CW Hobbs			5-May-1984
!		Second pass for cluster-wide OPCOM:
!		 - Change to use the queued brkthru mechanism.  Instead of
!		   performing a brkthru here, call REPLYBRD_BRKTHRU_QUEUE.
!
!	V03-002	CWH3002		CW Hobbs		16-Sep-1983
!		Improve $BRKTHRU timeouts, use VM jacket routines
!
!
!--

BEGIN						! Start of CLUSREPLY

LIBRARY	'SYS$LIBRARY:LIB.L32';
LIBRARY 'LIB$:OPCOMLIB';

FORWARD ROUTINE
	CLUSREPLY_RPYBRD_HANDLER	: NOVALUE,
	CLUSREPLY_RPYBRD_LOCAL_HANDLER	: NOVALUE,
	CLUSREPLY_RPYNOT_HANDLER	: NOVALUE;

EXTERNAL ROUTINE
	CLUSCOMM_SEND,
	DUMP_LOG_FILE,
	REPLYBRD_BRKTHRU_QUEUE		: NOVALUE,
	REPLYBRD_FORMAT,
	REPLYBRD_IO;

EXTERNAL
	LCL_NODENAME	: $bblock,
	NOD_HEAD	: VECTOR [2, LONG],
	GLOBAL_STATUS	: BITVECTOR;

GLOBAL ROUTINE CLUSREPLY_RPYBRD_HANDLER (BUFFER_DESC : $ref_bblock, MSG : $ref_bblock, LEN) : NOVALUE =

!++
! Functional description:
!
!	This routine processes a CLM__RPYBRD message.  This message is sent to this
!	OPCOM by an OPCOM process on another node in response to a REPLY /ALL, REPLY /USER
!	or REPLY /TERMINAL command.  The module formats the message and broadcasts it
!	to the local terminals.
!
! Input:
!
!	BUFFER_DESC : The address of a quadword buffer descriptor that
!		      describes the buffer containing the message.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Messages might be sent to terminals.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of CLUSREPLY_RPYBRD_HANDLER

LOCAL
    status;

!
! Check the version number of the message.  If the message is from any other version,
! simply ignore it.
!
IF .msg [clm_b_ds_version] NEQ rpybrd_k_ds_version
THEN
    RETURN dump_log_file (.buffer_desc, %ASCID 'CLM__RPYBRD mismatch');
!
! Format and broadcast the message
!
IF replybrd_format (.msg, lcl_nodename)
THEN
    replybrd_io (.msg, lcl_nodename);

!
! Release any message
!
IF .msg [rpybrd_a_format_ptr] NEQ 0
THEN
    OPC$FREE_VM (msg [rpybrd_l_format_len], msg [rpybrd_a_format_ptr]);

RETURN;
END;						! End of CLUSREPLY_RPYBRD_HANDLER

GLOBAL ROUTINE CLUSREPLY_RPYBRD_LOCAL_HANDLER (BUFFER_DESC : $ref_bblock, MSG : $ref_bblock, LEN) : NOVALUE =

!++
! Functional description:
!
!	This routine processes a CLM__RPYBRD_LOCAL message.  This message is sent to OPCOM
!	by the REPLY /ALL, REPLY /USER and REPLY /TERMINAL command.  The module determines
!	whether the message should be sent to other cluster nodes.
!
! Input:
!
!	BUFFER_DESC : The address of a quadword buffer descriptor that
!		      describes the buffer containing the message.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Messages might be sent to other nodes in the cluster.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of CLUSREPLY_RPYBRD_LOCAL_HANDLER

LOCAL
	status;

!
! Check the version number of the message.  If the message is from any other version,
! simply ignore it.
!
IF .msg [clm_b_ds_version] NEQ rpybrd_k_ds_version
THEN
    RETURN dump_log_file (.buffer_desc, %ASCID 'CLM__RPYBRD_LOCAL mismatch');
!
! Make sure that the sender has OPER privilege
!
IF NOT .$bblock [(.buffer_desc [dsc$a_pointer] + 4), prv$v_oper]
THEN
    RETURN dump_log_file (.buffer_desc, %ASCID 'No OPER privilege');
!
! Well, looks good so far.  Change the secondary operation code, and
! send it to other interested nodes.  We don't have to worry about errors.
!
msg [clm_b_clm_code] = clm__rpybrd;
IF .msg [rpybrd_v_broad_remoteall]
THEN
    cluscomm_send (-1, .len, .msg)
ELSE IF .msg [rpybrd_v_broad_remotelst]
THEN
    BEGIN
    REGISTER
	mlen,
	mptr	: REF VECTOR [, BYTE];
    mlen = .msg [rpybrd_w_targ_node_len];
    mptr = .msg + .msg [rpybrd_w_targ_node_off];! Add offset to start of node items
    WHILE .mlen GTR 0
    DO
	BEGIN
	IF .mptr [0] NEQ 5			! If len <> 5, it isn't a csid and we are in trouble
	THEN
	    BEGIN
	    dump_log_file (.buffer_desc, %ASCID 'CSID length not equal to 5');
	    EXITLOOP;
	    END;
	cluscomm_send (.(mptr [1]), .len, .msg);
	mlen = .mlen - 5;
	mptr = .mptr + 5;
	END;
    END;
!
! Format and broadcast the message if it is destined for the local node
!
IF .msg [rpybrd_v_broad_local]
THEN
    BEGIN
    IF replybrd_format (.msg, lcl_nodename)
    THEN
	BEGIN
	msg [rpybrd_v_local_node] = true;	! Let the IO routine know where we are
	replybrd_io (.msg, lcl_nodename);
	END;

    !
    ! Release any message
    !
    IF .msg [rpybrd_a_format_ptr] NEQ 0
    THEN
	OPC$FREE_VM (msg [rpybrd_l_format_len], msg [rpybrd_a_format_ptr]);
    END;

RETURN;
END;						! End of CLUSREPLY_RPYBRD_LOCAL_HANDLER

GLOBAL ROUTINE CLUSREPLY_RPYNOT_HANDLER (BUFFER_DESC : $ref_bblock, MSG : $ref_bblock, LEN) : NOVALUE =

!++
! Functional description:
!
!	This routine processes a CLM__RPYNOT message.  This message is sent to this
!	OPCOM by an OPCOM process on another node in response to a REPLY /NOTIFY
!	/TERMINAL command.  The module formats the message and broadcasts it
!	to the specified terminal.
!
! Input:
!
!	BUFFER_DESC : The address of a quadword buffer descriptor that
!		      describes the buffer containing the message.
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	Messages should be sent to a terminal.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	None.
!--

BEGIN						! Start of CLUSREPLY_RPYNOT_HANDLER

LOCAL
    iosb : VECTOR [4, WORD],
    msgdsc : VECTOR [2, LONG],
    trmdsc : VECTOR [2, LONG],
    ptr,
    status;

!
! Check the version number of the message.  If the message is from any other version,
! simply ignore it.
!
IF .msg [clm_b_ds_version] NEQ rpynot_k_ds_version
THEN
    RETURN dump_log_file (.buffer_desc, %ASCID 'CLM__RPYNOT mismatch');
!
! Make descriptors for the two message components
!
ptr = msg [rpynot_t_text];
trmdsc [1] = .ptr;
ptr = .ptr + (trmdsc [0] = .msg [rpynot_w_term_len]);
msgdsc [1] = .ptr;
msgdsc [0] = .msg [rpynot_w_message_len];
!
! Queue up to broadcast the message
!
replybrd_brkthru_queue (msgdsc,			! text to send
			trmdsc,			! target name
			brk$c_device,		! type of target
			32,			! carriage control
			0,			! brkthru flags
			brk$c_general,		! request id
			0,0,0,0,0);		! no completion routine or parameters

RETURN;
END;						! End of CLUSREPLY_RPYNOT_HANDLER

END						! End of module
ELUDOM
