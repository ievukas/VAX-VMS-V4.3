MODULE PAS$$VALIDATE_PFV ( %TITLE 'Validate PFV fields'
		IDENT = '1-002'			! File: PASVALIDA.B32 Edit: SBL1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains a procedure which is called by other
!	VAX-11 Pascal Run-Time Library procedures to verify that
!	a PFV is valid.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
! 1-002 - Add global symbol PAS$$VALIDATE_PFV_END so that PAS$$IO_HANDLER can
!	  determine the PC range of PAS$$VALIDATE_PFV.  SBL 14-Jul-1982
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!+
! Linkage for VALIDATE_ERROR.
!-

LINKAGE
    JSB_VALIDATE_ERROR =
	JSB (REGISTER=0, REGISTER=6): NOTUSED (2,3,4,5,7,8,9,10,11);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$$VALIDATE_PFV: JSB_VALIDATE_PFV NOVALUE,	! Validate PFV fields
    VALIDATE_ERROR: JSB_VALIDATE_ERROR NOVALUE;		! Signal validation error
!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

!+
! Codes used to indicate errors to VALIDATE_ERROR.
!-

LITERAL
    K_INVFILVAR = 0,	! PAS$_INVFILVAR, invalid file variable
    K_FILALRACT = 1;	! PAS$_FILALRACT, file already active

!+
! Bind the global symbol PAS$$VALIDATE_PFV_END to the address of the instruction
! following PAS$$VALIDATE_PFV, which is VALIDATE_ERROR.  This is so that
! PAS$$IO_HANDLER can look to see if an access violation occurred in
! PAS$$VALIDATE_PFV and therefore turn it into a PAS$_INVFILVAR error.
!-

GLOBAL BIND
    PAS$$VALIDATE_PFV_END = VALIDATE_ERROR;

!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE

%SBTTL 'PAS$$VALIDATE_PFV - Validate PFV fields'
GLOBAL ROUTINE PAS$$VALIDATE_PFV (
	PFV: REF $PAS$PFV_FILE_VARIABLE; 	! File variable
	FCB: REF $PAS$FCB_CONTROL_BLOCK		! Control block
    ) : JSB_VALIDATE_PFV NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure is called at the beginning of all VAX-11 Pascal
!	I/O procedures to verify that the PFV is in fact a valid file
!	variable.  It also locks the PFV against recursive I/O.
!
! CALLING SEQUENCE:
!
!	JSB_VALIDATE_PFV PAS$$VALIDATE_PFV (PFV.rr.r; FCB.mr.r)
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	FCB		- The File Control Block (FCB) address is stored in
!			  the FCB argument.  If there is no FCB, zero is stored.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	INVFILVAR - invalid or corrupted file variable
!	FILALRACT - file already active
!
!--

    BEGIN

    BUILTIN
	TESTBITSS;

    !+
    ! Test for valid PFV
    !-

    IF .PFV [PFV$B_VERSION] GTRU PFV$K_CUR_VERSION
    THEN
	BEGIN
	VALIDATE_ERROR (K_INVFILVAR);
	RETURN;
	END;

    !+
    ! Test for already active file and lock this PFV
    !-

    IF TESTBITSS (PFV [PFV$V_LOCK])
    THEN
	BEGIN
	VALIDATE_ERROR (K_FILALRACT);
	RETURN;
	END;

    !+
    ! Get FCB address and do another validity test.
    !-

    IF .PFV [PFV$V_FCB_VALID]
    THEN
	BEGIN
	FCB = .PFV [PFV$A_FCB];
	IF .FCB [FCB$A_PFV] NEQA PFV [PFV$R_PFV] ! Compare back-pointer
	THEN
	    BEGIN
	    VALIDATE_ERROR (K_INVFILVAR);
	    RETURN;
	    END
	END
    ELSE IF .PFV [PFV$V_OPEN]	! FCB invalid and OPEN? Error!
    THEN
	BEGIN
	VALIDATE_ERROR (K_INVFILVAR);
	RETURN;
	END
    ELSE
	FCB = 0;

    RETURN;

    END;					! End of routine PAS$$VALIDATE_PFV

!<BLF/PAGE>

%SBTTL 'VALIDATE_ERROR - Signal validation error'
ROUTINE VALIDATE_ERROR (
	ERROR_CODE,				! Code for error to signal
	PFV: REF $PAS$PFV_FILE_VARIABLE 	! File variable
    ) : JSB_VALIDATE_ERROR NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure is called by PAS$$VALIDATE_PFV to indicate that
!	it wants to signal an error.
!
! CALLING SEQUENCE:
!
!	JSB_VALIDATE_ERROR VALIDATE_ERROR (ERROR_CODE.rl.v, PFV.rr.r)
!
! FORMAL PARAMETERS:
!
!	ERROR_CODE	- The code of the error to signal.
!			   K_INVFILVAR - Invalid file variable
!			   K_FILALRACT - File already active
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	INVFILVAR - invalid or corrupted file variable
!	FILALRACT - file already active
!
!--

    BEGIN

    LOCAL
	PFD: REF $PAS$PFD_FILE_DESCRIPTOR;

    !+
    ! If error is "invalid file variable, just signal it.
    !-

    IF .ERROR_CODE EQL K_INVFILVAR
    THEN
	BEGIN
	SIGNAL_STOP (PAS$_INVFILVAR,1,PFV [PFV$R_PFV]);
	RETURN;
	END;

    !+
    ! Must be "file already active".  Include file variable name in
    ! signal if the PFD address is not self-relative.  If it is, use
    ! a dummy string.
    !-

    PFD = .PFV [PFV$A_PFD];	! Get PFD address
    SIGNAL_STOP (PAS$_FILALRACT,1,(
	IF .PFV [PFV$V_RELPFD]
	THEN
	    UPLIT BYTE (%CHARCOUNT('unknown'),'unknown')
	ELSE
	    PFD [PFD$T_NAME]
	));

    RETURN;

    END;					! End of routine VALIDATE_ERROR

!<BLF/PAGE>

END						! End of module PAS$$VALIDATE_PFV

ELUDOM
