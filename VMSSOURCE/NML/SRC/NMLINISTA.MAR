
	.TITLE	NML$INISTA	NML Initial parsing state table
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:  DECnet-VAX Network Management Listener

;
; ABSTRACT:
;
;	This module contains the NPARSE state tables for handling the
;	initial processing of all NICE command messages.
;
; ENVIRONMENT:  VAX/VMS Operating System
;
; AUTHOR:  Distributed Systems Software Engineering
;
; CREATION DATE: 8-Sep-1979
;
; MODIFIED BY:
;	V03-011	MKP0013		Kathy Perko	21-Mar-1984
;		Fix parsing of node number to change area 0 to area 1
;		for Phase IV NCPs and to change area 0 to the exec's area
;		for Phase III NCPs.  This to fix the area 1 probem.
;
;	V03-010	MKP0012		Kathy Perko	6-Jan-1984
;		Add X25-Access Module entity.
;
;	V03-009	MKP0011		Kathy Perko	20-April-1983
;		Add support to call MOM if I get a system specific down
;		line load command.
;
;	V03-008	MKP0010		Kathy Perko	17-Jan-1983
;		Add support for NI CONFIGURATOR module.
;
;	V03-007	MKP0009		Kathy Perko	12-Nov-1982
;		Allow CIRCUIT qualifier on any SHOW NODE command.
;
;	V03-006	MKP0008		Kathy Perko	7-Nov-1982
;		Add area entity.
;
;	V03-005	MKP0007		Kathy Perko	1-Oct-1982
;		Add SHOW ADJACENT NODES and SHOW CIRCUIT ADJACENT NODE
;		parsing.
;
;	V03-004	MKP0006		Kathy Perko	20-Sept-1982
;		Fix node parsing so that the internal entity ID for
;		NML is properly set up.
;
;	V03-003	MKP0005		Kathy Perko	9-Sept-1982
;		For errors in X25-Protocol qualifiers, return
;		detail = module instead of the qualifier parameter ID.
;		The architecture needs to be changed to make this better.
;
;	V03-002	MKP0004		Kathy Perko	17-June-1982
;		Fix parsing for X25-Protocol networks to default
;		to using null string as entity id - indicates the
;		currently active network.
;		Add SHOW/LIST GROUP parsing for DTE qualifier.
;		Add X29 Server and Trace modules.
;
;	V03-001	MKP0003		Kathy Perko	16-June-1982
;		Add parsing for qualifiers, and clean up X25-PROTOCOL
;		Module parsing.
;
;	V02-002	MKP0002		Kathy Perko	14-Nov-1981
;		Fix circuit id parsing so same checks are made as
;		for line id parsing.
;
;	V02-001	MKP0001		Kathy Perko	19-July-1981
;		Add Circuit and Module entities.
;
;--

	.SBTTL	Declarations
;
; INCLUDE FILES:
;

$NMADEF			; Network Management Layer symbols
$NMLDEF			; Network Management Listener definitions

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

;
; OWN STORAGE:
;

	.SBTTL	NML$NPA_INIT - NICE Phase III message parse tables
;+
; Phase III parse tables
;-
	IMSG$	NML$NPA_INIT
;
; Get the function code
;
	FIELD$
	$BYTE	NMA$C_FNC_CHA,NML_CHA,NML$PRSFNC ; Change
	$BYTE	NMA$C_FNC_REA,NML_REA,NML$PRSFNC ; Read
	$BYTE	NMA$C_FNC_ZER,NML_ZER,NML$PRSFNC ; Zero
	$BYTE	NMA$C_FNC_TES,NML_TES,NML$PRSFNC ; Test
	$BYTE	NMA$C_FNC_LOA,NML_LOA,NML$PRSFNC ; Load
	$BYTE	NMA$C_FNC_DUM,NML_DUM,NML$PRSFNC ; Dump
	$BYTE	NMA$C_FNC_TRI,NML_TRI,NML$PRSFNC ; Trigger
	$BYTE	NMA$C_FNC_SYS,NML_SYS		; System-specific function
	$NULL	,NML_FUN_ERR			; Unrecognized function
;
; Down-line load
;
	FIELD$	NML_LOA
	$SBEXP	NML_CHKOPT_SUB,NPA$_EXIT	; Parse the option byte
;
; Up-line dump
;
	FIELD$	NML_DUM
	$SBEXP	NML_CHKOPT_SUB,NPA$_EXIT	; Parse the option byte
;
; Trigger bootstrap
;
	FIELD$	NML_TRI
	$SBEXP	NML_CHKOPT_SUB,NPA$_EXIT	; Parse the option byte
;
; Send test message
;
	FIELD$	NML_TES
	$SBEXP	NML_CHKOPT_SUB,NPA$_EXIT	; Parse the option byte

;
; Change parameter
;
	FIELD$	NML_CHA				; Check change parameter option
	$SBEXP	NML_CHKOPT_SUB			; Parse the option byte
	FIELD$
	$SBEXP	NML_CHKENT_SUB,NPA$_EXIT	; Parse entity id

;
; Read information
;
	FIELD$	NML_REA				; Check read information option
	$SBEXP	NML_CHKOPT_SUB			; Parse the option byte
	FIELD$
	$SBEXP	NML_CHK_INFO_SUB		; Check information type
	FIELD$
	$SBEXP	NML_CHKENT_SUB,NPA$_EXIT	; Parse entity id

;
; Zero counters
;
	FIELD$	NML_ZER				; Check zero counters option
	$SBEXP	NML_CHKOPT_SUB			; Parse the option byte
	FIELD$					; Parse the entity ID
	$EXTZV	<NMA$C_ENT_NOD, -		; Node
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_NOD_ENT,NML$PRSENT
	$EXTZV	<NMA$C_ENT_LIN, -		; Line
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_LIN_ENT,NML$PRSENT
	$EXTZV	<NMA$C_ENT_CIR, -		; Circuit
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_CIRCUIT_ENT,NML$PRSENT
	$EXTZV	<NMA$C_ENT_MOD, -		; Module
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_MODULE_ENT,NML$PRSENT
	$NULL	,NML_FUN_ERR			; Unrecognized option

;
; System-specific functions
;
	FIELD$	NML_SYS				; System-specific function
	$EOM	,NML_FOR_ERR			; Message format error
	$BYTE	NMA$C_SYS_VMS,NML_VMS,,NML$M_PRS_VMS,NML$GL_PRS_FLGS
	$NULL	,NML_SYS_ERR			; Only VMS is valid

	FIELD$	NML_VMS				; VMS-specific function
	$EOM	,NML_FOR_ERR			; Message format error
	$BYTE	NMA$C_FNC_CHA,NML_VMS_CHA,NML$PRSFNC ; Change
	$BYTE	NMA$C_FNC_REA,NML_VMS_REA,NML$PRSFNC ; Read
	$BYTE	NMA$C_FNC_LOA,NPA$_EXIT,NML$PRSFNC   ; Load
	$NULL	,NML_FUN_ERR			; Unrecognized function

;
; Change parameter for VMS specific function
;
	FIELD$	NML_VMS_CHA			; Check change parameter option
	$SBEXP	NML_CHKOPT_SUB			; Parse the option byte
	FIELD$
	$SBEXP	NML_CHK_VMS_ENT_SUB,NPA$_EXIT	; Parse entity id for VMS
						;	specific
;
; Read information for VMS specific function
;
	FIELD$	NML_VMS_REA			; Check read information option
	$SBEXP	NML_CHKOPT_SUB			; Parse the option byte
	FIELD$
	$SBEXP	NML_CHK_INFO_SUB		; Check information type
	FIELD$
	$SBEXP	NML_CHK_VMS_ENT_SUB,NPA$_EXIT	; Parse entity id for VMS
						;	specific

;
; Parse information type subexpression
;
	FIELD$	NML_CHK_INFO_SUB		; Match the information type
	$EXTZV	<NMA$C_OPINF_SUM, -		; Summary
		 NMA$V_OPT_INF, -
		 NMA$S_OPT_INF  -
				>,NPA$_EXIT,NML$PRSINF
	$EXTZV	<NMA$C_OPINF_STA, -		; Status
		 NMA$V_OPT_INF, -
		 NMA$S_OPT_INF  -
				>,NPA$_EXIT,NML$PRSINF
	$EXTZV	<NMA$C_OPINF_CHA, -		; Characteristics
		 NMA$V_OPT_INF, -
		 NMA$S_OPT_INF  -
				>,NPA$_EXIT,NML$PRSINF
	$EXTZV	<NMA$C_OPINF_COU, -		; Counters
		 NMA$V_OPT_INF, -
		 NMA$S_OPT_INF  -
				>,NPA$_EXIT,NML$PRSINF
	$EXTZV	<NMA$C_OPINF_EVE, -		; Events
		 NMA$V_OPT_INF, -
		 NMA$S_OPT_INF  -
				>,NPA$_EXIT,NML$PRSINF
	$NULL	,NML_FUN_ERR			; Unrecognized option


	.SBTTL	Entity parsing
;
; Parse the entity for a non VMS specific command, according to the option byte
;
	FIELD$	NML_CHKENT_SUB
	$EXTZV	<NMA$C_ENT_NOD, -		; Node
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_NOD_ENT,NML$PRSENT
	$EXTZV	<NMA$C_ENT_LIN, -		; Line
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_LIN_ENT,NML$PRSENT
	$EXTZV	<NMA$C_ENT_LOG, -		; Logging
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_LOG_ENT,NML$PRSENT
	$EXTZV	<NMA$C_ENT_CIR, -		; Circuit
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_CIRCUIT_ENT,NML$PRSENT
	$EXTZV	<NMA$C_ENT_MOD, -		; Module
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_MODULE_ENT,NML$PRSENT
	$EXTZV	<NMA$C_ENT_ARE, -		; Area
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_AREA_ENT,NML$PRSENT
	$NULL	,NML_FUN_ERR			; Unrecognized function


;
; Parse VMS specific entities.
;
	FIELD$	NML_CHK_VMS_ENT_SUB
	$EXTZV	<NMA$C_SENT_OBJ, -		; Object
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_OBJ_ENT,NML$PRSENT
	$EXTZV	<NMA$C_SENT_LNK, -		; Link
		 NMA$V_OPT_ENT, -
		 NMA$S_OPT_ENT, -
		 NPA$_ADVANCE>, NML_LNK_ENT,NML$PRSENT
	$NULL	,NML_FUN_ERR			; Unrecognized option

;
; Parse a node entity
;
	FIELD$	NML_NOD_ENT			; Node-id entity
	$EOM	,NML_FOR_ERR			; Message format error
	$LOOK	0,NML_NOD_NUM			; 3 bytes if node number
	$BYTE	NMA$C_ENT_LOO,NML_CHKEOM,NML$PRSIDLEQ, -
			NML$C_LOOPNODE,NML$GL_NML_ENTITY
	$BYTE	NMA$C_ENT_KNO,NML_NODE_CIRC_QUAL,NML$PRSIDLEQ, -
			NML$C_NODE,NML$GL_NML_ENTITY
	$BYTE	NMA$C_ENT_ACT,NML_NODE_CIRC_QUAL,NML$PRSIDLEQ, -
			NML$C_NODE,NML$GL_NML_ENTITY
	$BYTE	NMA$C_ENT_ADJ,NML_NODE_CIRC_QUAL,NML$PRSIDLEQ, -
			NML$C_ADJACENT_NODE,NML$GL_NML_ENTITY
	$IMAGE	6,NML_NODE_CIRC_QUAL,NML$PRSNODNAM,NML$C_NODEBYNAME, -; n bytes (name)
			NML$GL_NML_ENTITY
	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_NOD ; Illegal node name

	FIELD$	NML_NOD_NUM			; Node-id number
	$SBEXP	NML_NOD_EXE,NPA$_EXIT,NML$PRSID
	$MATCH	3,NML_NODE_CIRC_QUAL, -		; Skip 2 bytes (node number)
			NML$PRS_NODE_NUM_ENTITY, -
			NML$C_NODE,NML$GL_NML_ENTITY
	$NULL	,NML_FOR_ERR			; Must be at least 2 bytes

	FIELD$	NML_NOD_EXE			; Zero address is executor node
	$MATCH	1
	FIELD$
	$WORD	0,NPA$_EXIT,,NML$C_EXECUTOR, -	; Executor node
				NML$GL_NML_ENTITY

;
; Parse a circuit qualifier (for SHOW NODE[S] CIRC <circuit id>)
;
	FIELD$	NML_NODE_CIRC_QUAL
	$EOM	,NPA$_EXIT				; No qualifier is present
	$LOOK	,NPA$_EXIT,NML$PRS_NOREAD		; Get out if not a read.
	$WORD	NMA$C_PCNO_DLI,NML_CHECK_QUAL
	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_NOD ; Illegal node name

	FIELD$	NML_CHECK_QUAL
	$EOM	,NML_FOR_ERR
	$MATCH	1,NPA$_EXIT,NML$PRSIDLEQ		; KNOWN circuits is the 
							;	default.
	$NULL	,NML_CIRC_QUAL,,NML$M_PRS_QUALIFIER, -	; Flag qualifier
					NML$GL_PRS_FLGS	;	present.
	FIELD$	NML_CIRC_QUAL				; Parse circuit qualifier
	$IMAGE	16,NPA$_EXIT,NML$PRSIDN,,,CPT$GK_PCNO_DLI
	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_CIR; Illegal circuit name
	
;
; Parse a line entity
;
	FIELD$	NML_LIN_ENT			; Line-id entity
	$EOM	,NML_FOR_ERR			; Message format error
	$MATCH	1,NML_LINE,NML$PRSIDLEQ	; 1 byte if zero or negative
	$IMAGE	16,NML_LINE,NML$PRSDEVICE	; n bytes (line name)
 	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_LIN ; Illegal line-id

	FIELD$	NML_LINE			; Set internal NML entity type
	$NULL	,NPA$_EXIT,,NML$C_LINE,NML$GL_NML_ENTITY

;
; Parse a logging entity
;
	FIELD$	NML_LOG_ENT			; Logging entity
	$MATCH	1,NML_LOG_SIN,NML$PRSID, -	; 1 byte, always.
		NML$C_LOGGING,NML$GL_NML_ENTITY	; Set internal NML entity type.
	$NULL	,NML_FOR_ERR			; Message format error

	FIELD$	NML_LOG_SIN			; If READ then sink node
	$NULL	,NPA$_EXIT,NML$PRSLOGSIN	;  must be specified
	$EOM	,NPA$_EXIT,NML$PRSEXESNK	; Null is executor node
	$WORD	NMA$C_PCLO_SIN,NML_LOG_NID

	FIELD$	NML_LOG_NID
	$SBEXP	NML_LOG_NIDSUB,NML_CHKEOM,,NML$M_PRS_SNKNOD,NML$GL_PRS_FLGS
	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_NOD ; Illegal node id

	FIELD$	NML_LOG_NIDSUB
	$BYTE	NMA$C_ENT_KNO,NPA$_EXIT,,NML$M_PRS_KNOSNK,NML$GL_PRS_FLGS ; Known sinks
	$LOOK	0,NML_LOG_NODNUM
	$IMAGE	6,NPA$_EXIT,NML$PRSSNKNNA
	$NULL	,NML_FOR_ERR			; Message format error

	FIELD$	NML_LOG_NODNUM
	$MATCH	3,NPA$_EXIT,NML$PRSSNKNAD

;
; Parse a circuit entity
;
	FIELD$	NML_CIRCUIT_ENT			; Circuit-id entity
	$EOM	,NML_FOR_ERR			; Message format error
	$MATCH	1,NML_CIRCUIT,NML$PRSIDLEQ, -	; 1 byte if zero or negative
			NML$C_CIRCUIT,NML$GL_NML_ENTITY
	$IMAGE	16,NML_CIRCUIT,NML$PRSDEVICE, -	; n bytes (circuit name)
			NML$C_CIRCUIT,NML$GL_NML_ENTITY
 	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_CIR; Illegal circuit-id

	FIELD$	NML_CIRCUIT			; Set internal NML entity type
	$EOM	,NPA$_EXIT			; No Adjacency qualifier - exit
	$WORD	NMA$C_PCCI_ADJ,NML_CIRC_ADJACENCY
 	$NULL	,NPA$_EXIT			; Check for other parameters
						;	later.

	FIELD$	NML_CIRC_ADJACENCY
	$EOM	,NML_FOR_ERR
	$BYTE	NMA$C_ENT_KNO,NPA$_EXIT		; Known adjacencies is default.
	$NULL	,NML_PRS_ADJ,,NML$M_PRS_QUALIFIER, - ; Set qualifier flag
			NML$GL_PRS_FLGS
	FIELD$	NML_PRS_ADJ
	$LOOK	0,NML_ADJ_NOD_NUM		; 3 bytes if node number
	$IMAGE	16,NPA$_EXIT,NML$PRSIDN,,, -	; Save adjacent node name.
			CPT$GK_PCCI_AJ$
 	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_NOD; Illegal Adjacency id

	FIELD$	NML_ADJ_NOD_NUM			; Adjacent node-id is a number
	$SBEXP	NML_ADJ_EXE,NPA$_EXIT
	$MATCH	3,NPA$_EXIT,NML$PRS_NODE_NUM,,, - ; Save adjacent node number.
			CPT$GK_PCCI_ADJ

	FIELD$	NML_ADJ_EXE			; Zero address is executor node
	$MATCH	1
	FIELD$
	$WORD	0,NML_NOD_ERR

	FIELD$	NML_NOD_ERR
 	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_NOD; Illegal Adjacency id

;
; Parse a module entity
;
	FIELD$	NML_MODULE_ENT			; Module entity
	$EOM	,NML_FOR_ERR			; Message format error
	$MATCH	1,NML_FUN_ERR,NML$PRSIDLEQ	; Don't allow KNOWN or ACTIVE
						;	modules.
	$IMAGE	10,NML_MOD_X25_ACCESS,NML$PRS_MODULE,,,NML$C_X25_ACCESS
	$IMAGE	12,NML_MOD_PROTOCOL,NML$PRS_MODULE,,,NML$C_PROTOCOL
	$IMAGE	10,NML_MOD_X25_SERVER,NML$PRS_MODULE,,,NML$C_X25_SERV
	$IMAGE  10,NML_MOD_X25_TRACE,NML$PRS_MODULE,,,NML$C_TRACE
	$IMAGE	10,NML_MOD_X29_SERVER,NML$PRS_MODULE,,,NML$C_X29_SERV
	$IMAGE	12,NML_MOD_NI_CONFIG,NML$PRS_MODULE,,,NML$C_NI_CONFIG
 	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_MOD; Illegal module-id

;
; Parse X25 Access module - Network qualifier is manadatory
;
	FIELD$	NML_MOD_X25_ACCESS
	$EOM	,NML_INV_DEST			; No network ID in command
	$WORD	NMA$C_PCXA_NET,NML_X25_ACCESS_NET
	$NULL	,NML_INV_DEST

	FIELD$	NML_X25_ACCESS_NET		; Check destination ID
	$EOM	,NML_FOR_ERR			; No destination ID, message
						;	format error
	$NULL	,NML_MOD_ENT,,NML$C_X25_ACCESS, - ; Set internal NML entity type.
			NML$GL_NML_ENTITY

	FIELD$	NML_INV_DEST			; Illegal destination id
	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_MOD

;
; Parse for X25 Protocol module sub entity - DTE or group
;
	FIELD$	NML_MOD_PROTOCOL
	$EOM	,NML_PROTCL_NET			; No sub entity.  Use network.
	$WORD	NMA$C_PCXP_DTE,NML_PROTCL_DTE	; DTE
	$WORD	NMA$C_PCXP_GRP,NML_PROTCL_GRP	; Group
	$NULL	,NML_PROTCL_NET			; Assume network

	FIELD$	NML_PROTCL_NET			; Network sub entity.
	$NULL	,NPA$_EXIT,NML$PRS_ACTIVE_NET, -; Set internal NML entity type.
			NML$C_PROT_NET, -	;	and active network
			NML$GL_NML_ENTITY	;	entity.


	FIELD$	NML_PROTCL_DTE			; DTE sub entity.
	$EOM	,NML_FOR_ERR			; No DTE ID, message format error
	$NULL	,NML_MOD_ENT,,NML$C_PROT_DTE, -	; Set internal NML entity type.
			NML$GL_NML_ENTITY


	FIELD$	NML_PROTCL_GRP			; Check Group ID
	$EOM	,NML_FOR_ERR			; No destination ID, message
						;	format error
	$SBEXP	NML_MOD_ENT,NML_CHK_DTE,, -	; Set internal NML entity type.
			NML$C_PROT_GRP, NML$GL_NML_ENTITY
 	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_MOD; Illegal group-id

	FIELD$	NML_CHK_DTE
	$EOM	,NPA$_EXIT			; No DTE qualifier - exit
	$WORD	NMA$C_PCXP_GDT,NML_GRP_DTE_ID	; Go check Group DTE id.
 	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_MOD; Illegal group-id

	FIELD$	NML_GRP_DTE_ID
	$EOM	,NML_FOR_ERR
	$MATCH	1,NPA$_EXIT,NML$PRSQUALLEQ	; Known DTEs is default.
	$NULL	,NML_DTE_QUAL,,NML$M_PRS_QUALIFIER, -	; Flag qualifier
					NML$GL_PRS_FLGS ;      present.

	FIELD$	NML_DTE_QUAL
	$IMAGE	16,NPA$_EXIT,NML$PRSIDN,,, -	; Save Group-DTE ID.
					CPT$GK_PCXP_GDT
 	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_MOD; Illegal DTE id


;
; Parse X25 Server module
;
	FIELD$	NML_MOD_X25_SERVER
	$EOM	,NPA$_EXIT,,NML$C_X25_SERV, -	; No destination sub entity
				NML$GL_NML_ENTITY
	$WORD	NMA$C_PCXS_DST,NML_X25_SERV_DEST; Sub entity is destination.
	$NULL	,NPA$_EXIT,,NML$C_X25_SERV, -	; No destination sub entity.
				NML$GL_NML_ENTITY;	Parameters follow.

	FIELD$	NML_X25_SERV_DEST		; Sub entity is Destination.
	$EOM	,NML_FOR_ERR			; No destination ID, message
						;	format error
	$NULL	,NML_MOD_ENT,,NML$C_X25_SERV_DEST, -; Set internal NML entity
			NML$GL_NML_ENTITY	;	type.

;
; Parse X25 Trace module
;
	FIELD$	NML_MOD_X25_TRACE
	$EOM	,NPA$_EXIT,,NML$C_TRACE, -	; No tracepoint sub entity
				NML$GL_NML_ENTITY
	$WORD	NMA$C_PCXT_TPT,NML_TRACEPOINT	; Sub entity is tracepoint.
	$NULL	,NPA$_EXIT,,NML$C_TRACE, -	; No tracepoint sub entity.
				NML$GL_NML_ENTITY;	Parameters follow.

	FIELD$	NML_TRACEPOINT			; Sub entity is tracepoint
	$EOM	,NML_FOR_ERR			; No tracepoint ID, message
						;	format error
	$NULL	,NML_TPT_ENT,,NML$C_TRACEPNT, -	; Set internal NML entity
			NML$GL_NML_ENTITY	;	type.
	FIELD$	NML_TPT_ENT			; Finish processing module entity.
	$MATCH	1,NPA$_EXIT,NML$PRSIDLEQ	; 1 byte if zero or negative.
	$IMAGE	31,NPA$_EXIT,NML$PRSIDN		; 16 bytes of ID
 	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_MOD; Illegal module id


;
; Parse X29 Server module
;
	FIELD$	NML_MOD_X29_SERVER
	$EOM	,NPA$_EXIT,,NML$C_X29_SERV, -	; No destination sub entity
				NML$GL_NML_ENTITY
	$WORD	NMA$C_PCXS_DST,NML_X29_SERV_DEST; Sub entity is destination.
	$NULL	,NPA$_EXIT,,NML$C_X29_SERV, -	; No destination sub entity.
				NML$GL_NML_ENTITY;	Parameters follow.

	FIELD$	NML_X29_SERV_DEST		; Sub entity is Destination.
	$EOM	,NML_FOR_ERR			; No destination ID, message
						;	format error
	$NULL	,NML_MOD_ENT,,NML$C_X29_SERV_DEST, -; Set internal NML entity
			NML$GL_NML_ENTITY	;	type.


;
; Parse NI configurator module
;
	FIELD$	NML_MOD_NI_CONFIG
	$EOM	,NPA$_EXIT,,NML$C_NI_CONFIG, -	; No circuit qualifier - exit
			NML$GL_NML_ENTITY
	$WORD	NMA$C_PCCN_CIR,NML_NI_CONFIG_CIRC,, -
			NML$C_NI_CONFIG,NML$GL_NML_ENTITY
 	$NULL	,NPA$_EXIT,,NML$C_NI_CONFIG, -	; Check for other parameters
			NML$GL_NML_ENTITY	;	later.

	FIELD$	NML_NI_CONFIG_CIRC
	$EOM	,NML_FOR_ERR
	$NEXT	


	FIELD$	NML_MOD_ENT			; Finish processing module entity.
	$MATCH	1,NPA$_EXIT,NML$PRSIDLEQ	; 1 byte if zero or negative.
	$IMAGE	16,NPA$_EXIT,NML$PRSIDN		; 16 bytes of ID
 	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_MOD; Illegal module id

;
; Parse an area entity
;
	FIELD$	NML_AREA_ENT			; Area entity
	$EOM	,NML_FOR_ERR			; Message format error
	$LOOK	0,NML_AREA_NUM			; Area number in next byte.
	$BYTE	NMA$C_ENT_KNO,NPA$_EXIT,NML$PRSIDLEQ, -
			NML$C_AREA,NML$GL_NML_ENTITY
	$BYTE	NMA$C_ENT_ACT,NPA$_EXIT,NML$PRSIDLEQ, -
			NML$C_AREA,NML$GL_NML_ENTITY
	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_ARE; Illegal area ID

	FIELD$	NML_AREA_NUM
	$MATCH	2,NPA$_EXIT,NML$PRSID, -	; Save 1 byte area number
				NML$C_AREA,NML$GL_NML_ENTITY
	$NULL	,NML_FOR_ERR			; Must be at least 2 bytes

;
; Parse an object entity (VMS-specific)
;
	FIELD$	NML_OBJ_ENT			; Object entity
	$EOM	,NML_FOR_ERR			; Message format error
	$MATCH	1,NML_OBJECT,NML$PRSIDLEQ	; 1 byte if zero or negative
	$IMAGE	12,NML_OBJECT,NML$PRSIDN	; n bytes (name)
	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_SENT_OBJ ; Illegal object name

	FIELD$	NML_OBJECT			; Set internal NML entity type
	$NULL	,NPA$_EXIT,,NML$C_OBJECT,NML$GL_NML_ENTITY

;
; Parse a link entity (VMS-specific)
;
	FIELD$	NML_LNK_ENT			; Link entity
	$EOM	,NML_FOR_ERR			; Message format error
	$NULL	,NML_LINK,,NML$C_LINKS,NML$GL_NML_ENTITY

	FIELD$	NML_LINK
	$LOOK	0,NML_LNK_NUM			; If zero, it's a link number.
	$MATCH	1,NML_LNK_NOD,NML$PRSIDLEQ	; 1 byte if negative

	FIELD$	NML_LNK_NUM			; Link address
	$MATCH	3,NML_LNK_NOD,NML$PRSID		; Must be byte of 0 and 2 bytes
						;	of link number.
	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_SENT_LNK ; Illegal link address

	FIELD$	NML_LNK_NOD
	$EOM	,NPA$_EXIT
	$WORD	NMA$C_PCLK_NID,NML_LNK_NID,, -	; Flag node qualifier
				NML$M_PRS_QUALIFIER,NML$GL_PRS_FLGS
	$NULL	,NML_FOR_ERR

	FIELD$	NML_LNK_NID
	$EOM	,NML_FOR_ERR
	$SBEXP	NML_NODEID_SUB,NML_CHKEOM
	$ERROR	NML$_STS_IDE,,NML$PRSIDERR,,,NMA$C_ENT_NOD ; Illegal node id


	FIELD$	NML_NODEID_SUB
	$LOOK	0,NML_NODNUM
	$IMAGE	6,NPA$_EXIT,NML$PRSIDN,,, -	; Qualifier is a node name.
				CPT$GK_PCLK_NID

	FIELD$	NML_NODNUM
	$MATCH	3,NPA$_EXIT,NML$PRS_NODE_NUM,,, - ; Qualifier is a node address.
				CPT$GK_PCLK_PN$

	FIELD$

	.SBTTL	Common expressions
;
; Check the option byte for illegal bits and save it
;
	FIELD$	NML_CHKOPT_SUB			; Check for valid option
	$EOM	,NML_FOR_ERR			; Message format error
	$LOOK	,NPA$_EXIT,NML$PRSOPT		;
	$NULL	,NML_FUN_ERR			; Unrecognized option
;
; No more bytes allowed in message
;
	FIELD$	NML_CHKEOM			; Check for end of message
	$EOM	,NPA$_EXIT			; If end then success
	$NULL	,NML_FOR_ERR			; Message format error
;
; Error exits
;
	FIELD$	NML_FOR_ERR			; Message format error
	$ERROR	NML$_STS_INV,,NML$PRSERR1,,,NMA$C_STS_INV

	FIELD$	NML_FUN_ERR			; Illegal function or option
	$ERROR	NML$_STS_FUN,,NML$PRSERR1,,,NMA$C_STS_FUN

	FIELD$	NML_SYS_ERR			; Unrecognized system-specific
	$ERROR	NML$_STS_SYS,,NML$PRSERR1,,,NMA$C_STS_SYS

	FIELD$					; End of Phase III tables
;
; End of parse tables
;
	.END
