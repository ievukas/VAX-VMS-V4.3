	$BEGIN	RM0NAMSTR,000,RM$RMS0,<RETURN FILENAME STRINGS>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility: RMS
;
; Abstract:
;
;	This module builds either an expanded name string or a resultant
;	name string (as requested on entry) and returns it to the user via
;	the Name Block.
;
; Environment: VAX/VMS, executive mode
;
; Author: Leo F. Laverdure,	Creation Date:  01-MAR-1977
;
; Modified By:
;
;	V03-019	JWT0192		Jim Teague		12-Aug-1984
;		Fix a terrible bug in filename-length checking:
;		RMS was doing unsigned, one-byte compares against
;		the users's ESS or RSS, and taking an error path 
;		if the accumulated size was greater than that.
;		Fine, usually.  However, if the user specified 255 
;		for ESS or RSS, how many one-byte values can YOU
;		think of that are greater than 'FF'?
;
;	V03-018	RAS0296		Ron Schaefer		18-Apr-1984
;		Return secondary device name in NAM$T_DVI if the 
;		device is spooled.
;
;	V03-017	JEJ0029		J E Johnson		19-Apr-1984
;		Remove wildcard status storage for quoted network
;		files as that has been moved to NT0ACCESS, also
;		replace reference to NAM$V_ROD with NAM$V_PWD as
;		someone actually used the function it provided.
;
;	V03-016	JEJ0027		J E Johnson		11-Apr-1984
;		Eliminate unused reference to NAM$V_ROD field.
;
;	V03-015	JEJ0006		J E Johnson		08-Mar-1984
;		Store the wildcard status on quoted network files.
;		Also slight code cleanup done.
;
;	V03-014	RAS0254		Ron Schaefer		16-Feb-1984
;		Return as many fields as possible in expanded/resultant
;		strings for PPFs.   Add $DEVDEF and $RMSDEF macros.
;		Cleanup use of ESA/RSA device name when doing open
;		by device-id/file-id as well as network FAL returns.
;
;	V03-013	RAS0223		Ron Schaefer		16-Dec-1983
;		Change $SCBDEF and SCB$xxx to $FSCBDEF and FSCB$xxx.
;
;	V03-012	RAS0203		Ron Schaefer		18-Oct-1983
;		Fix network node processing to only mask out the
;		password for the first node in the list.
;
;	V03-011	KRM0115		Karl Malik		27-Sep-1983
;		Add UPDATE_FNB routine to set appropriate FNB bits
;		during a network $search (currently not returned
;		by FAL).
;
;	V03-010	KBT0563		Keith B. Thompson	21-Jul-1983
;		Change the syntax of a non-concealed name to:
;		DEV:[ROOT.][DIRECTORY]
;
;	V03-009	KPL0001		Peter Lieberwirth	23-Jun-1983
;		Modify RM$GETFILNAM to return the unconcealed (real)
;		device name as well as the rest of the file spec.
;
;	V03-008	KBT0516		Keith B. Thompson	23-May-1983
;		Remove the RM$CHKNAMBLK hack
;
;	V03-007	KBT0506		Keith B. Thompson	3-May-1983
;		Change SCB$M_ACCS to SCB$M_ACS and add some concealed
;		device/directory features?
;
;	V03-006	KBT0503		Keith B. Thompson	18-Apr-1983
;		Use SCB flags to check to access control string in
;		node descriptor
;
;	V03-005	LJA0064		Laurie J. Anderson	22-Feb-1983
;		Move some routines related to the NAM block to this
;		module, for consistancy sake and ease of locating them.
;		They include RM$FILLNAM, RM$WRITE_DVI, RM$CHKNAMBLK
;		and RM$CHKNAM.  Note, any audit trails corresponding to
;		mods to these routines did NOT move with these modules.
;
;	V03-004	JWH0188		Jeffrey W. Horn		15-Feb-1983
;		Add an additional entry point RM$GETFILNAM to return
;		the resultant name string to a buffer for journaling.
;
;	V03-003	KBT0211		Keith B. Thompson	23-Aug-1982
;		Reorganize psects
;
;	V03-002	KBT0099		Keith B. Thompson	13-Jul-1982
;		Clean up psects
;
;	V03-001	JAK0073		J A Krycka		12-Apr-1982
;		Eliminate the practice of prefixing a <del> character to an
;		expanded or resultant name string to indicate that the password
;		has been masked out of the nodespec.
;
;	V02-090	KEK018		K. E. Kinnear		17-Jan-1982
;		Add modifications for ANSI-"a" magtape filespecs.
;
;	V02-089	KEK0019		K. E. Kinnear		17-Jan-1982
;		Remove references to NAM$B_QUOTED and NAM$L_QUOTED and
;		replace with references to NAM$x_NAME.
;
;	V02-088 JWH0001		Jeffrey W. Horn		16-Dec-1981
;		If FWA$V_DIR bit is clear, return [] as directory
;		specification.
;
;	V02-087	RAS0039		Ron Schaefer		25-Sep-1981
;		Return the ESA device name string if the DVI device name
;		was used.  This hides the hidden device name for 
;		users doing explicit $PARSE before $OPEN or $CREATE.
;
;	V02-086	JAK0062		J A Krycka		14-AUG-1981
;		Return remote file system type in NAM$B_RFS.
;
;	V02-085	JAK0059		J A Krycka		11-JUN-1981
;		Multiplex the QUOTED descriptor in the NAM block with the
;		NAME descriptor instead of the DEV descriptor.
;
;	V02-084	JAK0058		J A Krycka	04-JUN-1981
;		Continuation of V02-084.
;
;	V02-083	KRM0015		K R Malik	26-May-1981
;		Fix bug in RM$EXPSTRING which returned incorrect values
;		for the extended NAM block TYPE and VER fields.
;
;	V02-082	JAK0058		J A Krycka	22-MAY-1981
;		This module was created from RM$EXPSTRING code previously
;		residing in RM0XPFN.
;
;	The following edit history entries were copied from RM0XPFN:
;
;	V02-081	KRM0014		K R Malik	11-MAY-1981
;		Fill in the extended NAM block fields with the resultant
;		name string filespec elements for a resultant name string
;		that was received from the remote FAL.
;
;	V02-078	KRM0013		K R Malik	22-APR-1981
;		Make RM$EXPSTRING fill in the extended NAM block fields with
;		the addresses & lengths of the various filespec elements
;		of the expanded or resultant name string (as appropriate for
;		the operation).
;
;--

	.SBTTL	DECLARATIONS

;
; Include Files:
;

	$DEVDEF				; Define Device characteristics
	$FABDEF				; Define File Access Block symbols
	$FIBDEF				; Define File Information Block
	$FSCBDEF			; Define FSCB symbols
	$FWADEF				; Define File Work Area symbols
	$IFBDEF				; Define IFAB symbols
	$LOGDEF				; Define Logical Name Table symbols
	$NAMDEF				; Define Name Block symbols
	$NWADEF				; Define Network Work Area symbols
	$PSLDEF				; Define Process Status Longword symbols
	$RMSDEF				; Define RMS error codes

;
; Macros:
;
;	None
;
; Equated symbols:
;
;	The following symbol definitions were copied from RM0XFPN:
;

	FOP=FAB$L_FOP*8			; Bit offset to FOP

	SPACE		= ^X20		; ASCII value for space
	HOR_TAB		= ^X09		; ASCII value for horizontal tab

	.SBTTL	RM$EXPSTRING, Build Expanded or Resultant Name String

;++
;
; RM$EXPSTRING - examines the user's NAM block for an expanded name string or
;	resultant name string buffer, and if found builds the string in the
;	buffer utilizing the separately parsed elements stored in the FWA and 
;	NWA control blocks.
;
; Calling Sequence:
;
;	BSBW	RM$EXPSTRING
;
; Input Parameters:
;
;	R7	NAM block address
;	R8	FAB address
;	R9	IFAB address
;	R10	FWA address
;	AP	Address of 5-byte argument list of the format:
;		.byte	offset to either NAM$L_ESA or NAM$L_RSA
;		RMSERR_WORD	NAM$_ESA (or _RST)
;		RMSERR_WORD	NAM$_ESS (or _RSS)
;
; Implicit Inputs:
;
;	The current contents of the FWA.
;	FAB$L_NAM, NAM$L_ESA (or _RSA), NAM$B_ESS (or _RSS)
;	NAM$B_BID, NAM$B_BLN
;
; Outputs:
;
;	R0	Status code
;	R1-R7	Destroyed
;	AP	Destroyed
;
; Implicit Outputs:
;
;	If the specified buffer exists, the buffer is filled in with the
;	expanded or resultant name string, and its length is stored in the
;	NAM$B_ESL or NAM$B_RSL field, as appropriate.
;
;	If the NAM$B_BLN field indicates that this is an extended NAM block
;	then the following filespec element fields are also filled in:
;
;		NAM$B_NODE	NAM$L_NODE
;		NAM$B_DEV	NAM$L_DEV
;		NAM$B_DIR	NAM$L_DIR
;		NAM$B_NAME	NAM$L_NAME
;		NAM$B_TYPE	NAM$L_TYPE
;		NAM$B_VER	NAM$L_VER
;
; Completion Codes:
;
;	Standard RMS completion codes, including SUC, ESA, ESS, RSA, RSS, NAM.
;
; Side Effects:
;
;	If a NAM block exists it will have been probed.
;
;--

;
; Return the expanded or resultant name string to the user buffer and, if this
; is an 'extended' NAM block, fill in the various filespec element fields.
;

RM$EXPSTRING::
	BSBW	RM$CHKNAM		; validate NAM block
	BLBS	R0,5$			; if ok continue
	RSB				; else exit now

	ASSUME	NAM$L_ESA	EQ	NAM$B_ESL+1
	ASSUME	NAM$B_ESL	EQ	NAM$B_ESS+1
	ASSUME	NAM$L_RSA	EQ	NAM$B_RSL+1
	ASSUME	NAM$B_RSL	EQ	NAM$B_RSS+1

5$:	PUSHR	#^M<R8,R11>		; save registers
	MOVZBL	(AP)+,R3		; get offset to ESA or RSA field
	ADDL3	R3,R7,R8		;  and use to compute address
	MOVL	(R8),R3			; Get address of buffer
	BEQL	20$			; Branch if non-zero
	MOVZBL	-2(R8),R4		; Get buffer size
	BEQL	20$			; Branch if non-zero
	BBC	#FAB$V_NAM+FOP,@0(SP),30$; Branch if not open by Name Block
	TSTL	NAM$W_FID(R7)		; File ID input?
	BEQL	30$			; Branch if not
20$:	BRW	EXIT_SUC		; Branch, omitting directory
					;  and file name
30$:	IFWRT	R4,(R3),40$,IFB$B_MODE(R9)
	BRW	ERRSA			; Branch if no write access
40$:	CLRB	-(R8)			; Clear ESL (or RSL)


;
; If this is an 'extended' NAM block, initialize the filespec element fields.
;

	ASSUME	NAM$B_NODE+1	EQ	NAM$B_DEV
	ASSUME	NAM$B_DEV+1	EQ	NAM$B_DIR
	ASSUME	NAM$B_DIR+1	EQ	NAM$B_NAME
	ASSUME	NAM$B_NAME+1	EQ	NAM$B_TYPE
	ASSUME	NAM$B_TYPE+1	EQ	NAM$B_VER

45$:	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block?
	BLSSU	50$			; Branch if not
	MOVZBL	NAM$B_DEV(R7),R0	; Get ESA device name len
	MOVL	NAM$L_DEV(R7),R1	; and ptr

	CLRQ	NAM$B_NODE(R7)		; Initialize all filespec element
					;  length fields with a count of zero
	MOVL	R3,NAM$L_NODE(R7)	; Initialize all filespec element
	MOVL	R3,NAM$L_DEV(R7)	;  address fields with the address
	MOVL	R3,NAM$L_DIR(R7)	;  of the start of the user buffer
	MOVL	R3,NAM$L_NAME(R7)	;  "
	MOVL	R3,NAM$L_TYPE(R7)	;  "
	MOVL	R3,NAM$L_VER(R7)	;  "

;
; If the DVI device name was used, and an 'extended NAM block' is present,
; and there is a non-zero DEV field; then use the DEV field as the device
; name and not the DVI name.   This hides the expansion of hidden devices.
; Copy the device string to the unused concealed device buffer and set
; it from there.  If saved field is zero or inaccessible, fall back on DVI.
; Can't be a network filespec if the DVI was used.
;

	BBS	#FWA$V_SL_PASS,(R10),50$; branch if search list pass
	BBC	#FAB$V_NAM+FOP,@0(SP),50$; Branch if not open by Name Block
	BBC	#FWA$V_NAM_DVI,(R10),50$; branch if not using dvi
	TSTB	NAM$T_DVI(R7)		; Did we have a DVI?
	BEQL	50$			; Branch if not
	DECL	R0			; eliminate ":"
	BLEQU	50$			; Ignore null or bogus field
	IFNORD	R0,(R1),50$,IFB$B_MODE(R9) ; Can we read it?
	MOVAB	FWA$Q_CONCEAL_DEV(R10),R6 ; Get device descriptor
	MOVL	R0,(R6)			; Set length
	PUSHL	R3			; Save output ptr
	MOVC3	R0,(R1),@4(R6)		; Copy string
	POPL	R3			; restore ptr
	BRB	COPY_DVI		; join device copy code

;
; Check for the occurrence of a node name (and possilby a quoted string).
;

50$:	BBC	#FWA$V_NODE,(R10),-	; Check for node name
		COPY_DEVICE		;
	BRW	COPY_NODE		; Branch if node name found

;
; Move the device name string and, if this is an 'extended' NAM block, fill in
; the DEV element fields.
;

COPY_DEVICE:
	BBC	#FWA$V_DEVICE,(R10),COPY_DIR	; branch if no device seen
	MOVAQ	FWA$Q_DEVICE(R10),R6		; get device descriptor address
	BBC	#FWA$V_CONCEAL_DEV,(R10),-	; is there a concealed device?
		COPY_DVI
	BBC	#NAM$V_NOCONCEAL,-		; do we display it?
		NAM$B_NOP(R7),COPY_DVI

	ASSUME	FWA$Q_CONCEAL_DEV	EQ	FWA$Q_DEVICE+8

	ADDL2	#8,R6				; yes
COPY_DVI:
	CMPB	NAM$B_BLN(R7),#NAM$C_BLN	; is this an extended NAM block?
	BLSSU	10$				; branch if not
	MOVL	R3,NAM$L_DEV(R7)		; fill in DEV address field
	ADDB3	(R6),#1,NAM$B_DEV(R7)		; fill in DEV length field
						;  (+ colon)
10$:	BSBW	MOVE_NEXT			; copy device name
	MOVB	#^A/:/,R0			; append a colon
	BSBW	MOVE_CHAR			;

;
; Build up full directory spec from the parts and, if this is an 'extended'
; NAM block, fill in the DIR element fields.
;

COPY_DIR:
	TSTB	FWA$B_DIRTERM(R10)		; was there a right bracket?
	BEQL	60$				; no, skip copy?
10$:	CMPB	NAM$B_BLN(R7),#NAM$C_BLN	; is this an extended NAM block?
	BLSSU	20$				; branch if not
	MOVL	R3,NAM$L_DIR(R7)		; fill in DIR address field
20$:	BBC	#FWA$V_ROOT_DIR,(R10),80$	; was there a root directory?
	BBS	#FWA$V_EXP_ROOT,(R10),30$	; was it explicit?
	BBC	#NAM$V_NOCONCEAL,-		; should we display it?
		NAM$B_NOP(R7),80$

;
; We have rooted directories and need to display them
;

30$:	SUBB3	#2,FWA$B_ROOTERM(R10),R0	; copy open left bracket
	BSBW	MOVE_CHAR			; 
	MOVAQ	FWA$Q_CDIR1(R10),R6		; get concealed descriptor list
40$:	BSBW	MOVE_NEXT			; copy next directory name
	MOVB	#^A/./,R0			;
	BSBW	MOVE_CHAR			; and append delimiter
	TSTL	(R6)				; any left?
	BEQL	50$				; no
	PUSHAQ	FWA$Q_CDIR8(R10)		; check end of list
	CMPL	R6,(SP)+			;
	BLEQU	40$				; not yet

;
; We have displayed the rooted directories, check for normal ones
;

50$:	MOVB	FWA$B_ROOTERM(R10),R0		; copy close right bracket
	BSBW	MOVE_CHAR			; 
	BBS	#FWA$V_DIR,(R10),80$		;
60$:	BRW	COPY_NAME			; branch if no directory wanted

;
; Display the normal directory levels
;

80$:	SUBB3	#2,FWA$B_DIRTERM(R10),R0	; copy left bracket
	BSBW	MOVE_CHAR			;  to user buffer
	BBC	#FWA$V_DIR,(R10),170$		; branch if no directory wanted
	MOVAQ	FWA$Q_DIR1(R10),R6		; get directory descriptors
	BBS	#FWA$V_GRPMBR,(R10),110$	; branch if [group,member] format
	EXTZV	#FWA$V_DIR_LVLS,-		; get number of subdirectories
		#FWA$S_DIR_LVLS,(R10),R11
90$:	BSBW	MOVE_NEXT			; copy next directory name
	MOVB	#^A/./,R0			;
	BSBW	MOVE_CHAR			; and append delimiter
	BBC	#FSCB$V_ELIPS,-8(R6),100$	; elipsis following this name?
	BSBW	MOVE_CHAR			; if so, append '..'
	BSBW	MOVE_CHAR			;
100$:	SOBGEQ	R11,90$				; loop until done

;
; Done with string, check for trailing elipsis, if so keep the 3 dots
;

	BBS	#FSCB$V_ELIPS,-8(R6),170$	; branch if trailing elipsis?
	DECL	R3				; remove trailing '.'
	DECB	(R8)				; decrement string size
	BRB	170$				; add right bracket

;
; Copy group member direcotries
;

110$:	BBS	#NAM$V_NOCONCEAL,-		; convert if noconceal
		NAM$B_NOP(R7),120$		;  to non-uic format
	BSBW	MOVE_NEXT			; copy group portion
	MOVB	#^A/,/,R0			; copy UIC format separator
	BSBW	MOVE_CHAR			;  to user buffer
	BSBW	MOVE_NEXT			; copy member portion
	BRB	170$

120$:	MOVB	#^A/0/,R0			; get fill character
	MOVZBL	(R6),R1				; get size of group
	BRB	140$
130$:	BSBW	MOVE_CHAR			; pad one
140$:	AOBLEQ	#3,R1,130$
	BSBW	MOVE_NEXT			; move group
	MOVB	#^A/0/,R0			; get fill character
	MOVZBL	(R6),R1				; get size of member
	BRB	160$
150$:	BSBW	MOVE_CHAR			; pad one
160$:	AOBLEQ	#3,R1,150$
	BSBW	MOVE_NEXT			; move member
	
;
; Finish off the directory string
;

170$:	MOVB	FWA$B_DIRTERM(R10),R0		; Copy right bracket
	BSBW	MOVE_CHAR			;  (']' or '>') to user buffer
	CMPB	NAM$B_BLN(R7),#NAM$C_BLN	; Is this an extended NAM block?
	BLSSU	COPY_NAME			; Branch if not
	SUBL3	NAM$L_DIR(R7),R3,R1		; Compute DIR length
	MOVB	R1,NAM$B_DIR(R7)		; Fill in DIR length field

;
; Now move the file name, type, and version (all stored in one string) and,
; if this is an 'extended' NAM block, fill in the individual filespec
; element fields.
;
; Note:	This concatenated name string is guaranteed to have the "." and ";"
;	delimiters present, and it may simply be ".;" if all elements are null.
;

COPY_NAME:				;
	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block?
	BLSSU	10$			; Branch if not
	MOVQ	FWA$Q_NAME(R10),R4	; Get descriptor of name-type-ver string
					;  that will be copied to user buffer
	CMPB	#^A/"/,(R5)		; is the 1st character a quote?
	BNEQ	5$			; if neq no, continue

;
; Since the first character of the string is a quote we cannot simply scan
; for a . to find the end of the name.  We must instead look for the last
; quote in the string, and assume that that ends the name field.
;

	MOVQ	R4,R0			; copy descriptor of string
	ADDL2	R0,R1			; point past last char of string

3$:	CMPB	#^A/"/,-(R1)		; pick of next char from end
	BNEQ	3$			; if neq its not a quote, yet
	INCL	R1			; readjust address for later code
	SUBL3	R5,R1,R2		; calc length passed over in R2
	SUBL2	R2,R0			; calc lenght left
	BRB	6$			; continue like we found .

5$:	LOCC	#^A/./,R4,(R5)		; Find dot delimiter
	SUBL3	R5,R1,R2		; Compute NAME length
6$:	MOVL	R3,NAM$L_NAME(R7)	; Fill in NAME address field
	MOVB	R2,NAM$B_NAME(R7)	; Fill in NAME length field
	MOVQ	R0,R4			; Get descriptor of type-ver string
	LOCC	#^A/;/,R4,(R5)		; Find semi-colon delimiter
	ADDL3	R3,R2,NAM$L_TYPE(R7)	; Compute and fill in TYPE address field
	SUBL3	R5,R1,R2		; Compute TYPE length
	MOVB	R2,NAM$B_TYPE(R7)	; Fill in TYPE length field
	ADDL3	NAM$L_TYPE(R7),R2,-	; Compute and fill in VER address field
		NAM$L_VER(R7)		;
	MOVB	R0,NAM$B_VER(R7)	; Fill in VER length field
10$:	MOVAQ	FWA$Q_NAME(R10),R6	; Get address of descriptor of name
	BSBB	MOVE_NEXT		;  string and append it to user buffer

EXIT_SUC:
	RMSSUC				; Declare success

EXIT_ERR:
	POPR	#^M<R8,R11>		; Restore registers
	RSB				; Exit to caller

;
; User buffer is not writeable.
;

ERRSA:	MOVZWL	(AP),R0			; Get error code
	BRB	EXIT_ERR		; And take exit path

;++
;
; This routine moves a field to the expanded or resultant string buffer.
;
; Update ESL (or RSL) count while checking for overflow, and if so, exit
; with ESS (or RSS) error.
;
; Inputs:
;
;	R3	Address of output buffer
;	R6	Address of descriptor of input string
;	R8	ESL (or RSL) address in NAM block
;	AP	Address of expanded or resultant string argument list
;
; Outputs:
;
;	R0-R2	Destroyed
;	R3	Address following string in the output buffer
;	R4-R5	Destroyed
;	R6	R6 on input + 8
;	R8,AP	Unchanged
;
;	*** NOTE ***
;	
;	If the user hasn't specified a name block, there is no
;	enforcement of the maximum for filename length.  In that 
;	case, the file name consists of its individual pieces in 
;	the FWA.  This problem should be addressed someday.
;--

MOVE_NEXT:
	ADDB2	(R6),(R8)		; Count the string
	BCS	POPPC			; greater than 255?
	CMPB	(R8),-1(R8)		; Does it fit?
	BGTRU	POPPC			; Branch if not
	MOVL	(R6)+,R0		; Get length of string
	MOVC3	R0,@(R6)+,(R3)		; Move field
	RSB				;

;++
;
; This routine moves the character in R0 to the expanded or resultant string
; while checking for overflow.
;
;--

MOVE_CHAR:				;
	INCB	(R8)			; Count character
	BCS	POPPC			; Greater than 255?
	CMPB	(R8),-1(R8)		; Does it fit?
	BGTRU	POPPC			; Branch if not
	MOVB	R0,(R3)+		; Move in the byte
	RSB				;

;
; Field will overflow user (expanded or resultant string) buffer.
; Return ESS or RSS error.
;

POPPC:	POPR	#^M<R0>			; Pop return PC
	MOVB	-1(R8),(R8)		; Make string length = buffer length

;
; User buffer is too small.
;

ERRSS:	TSTW	(AP)+			; Move to ESS or RSS error code
	BRB	ERRSA			; Branch aid

;++
;
; Copy node spec list to the user buffer and optionally mask out the
; password string in each node spec (if present). Also return the remote
; file system type to the user.
;
;	Inputs:
;
;	R3	Next user buffer address
;	R7	NAM block address
;	R9	IFAB address
;	R10	FWA address
;
;	Outputs:
;
;	R0-R2	Destroyed
;	R3	Next user buffer address (updated)
;	R4-R6	Destroyed
;	R11	Destroyed
;
;--

COPY_NODE:

;
; First return the remote file system type in the NAM block.
;
; Note:	The information is available only after FAL has been accessed. Thus
;	the information is valid only when returning a resultant name string.
;

	MOVL	IFB$L_NWA_PTR(R9),R2	; Get address of NWA
	MOVB	NWA$B_FILESYS(R2),-	; Copy remote file system type stored
		NAM$B_RFS(R7)		;  in NWA to NAM block

;
; Now copy node spec list to the user buffer.
;

	CLRL	R11			; zero loop counter
10$:	MOVAQ	FWA$Q_NODE1(R10)[R11],R6; get address of next node spec desc
	BBC	#FSCB$V_ACS,(R6),20$	; branch if this node spec has
					;  no access control string, (flags
					;  are stored in bytes 2-3 of descriptor)
   	TSTL	R11			; Do not mask the password for 
   	BNEQ	20$			;  secondary node names
	BBC	#NAM$V_PWD,-		; branch if password is to be
		NAM$B_NOP(R7),30$	;  masked out of access control string
20$:	BSBB	MOVE_NEXT		; Move this node spec string
	BRW	80$			;  to user buffer (unaltered)

;
; The node spec string contains an embedded access control string, i.e.,
; the string is guaranteed to be of the form:
;
;	nodename"access_control_string"::
;
; Search the node spec string for a password substring and replace it with a
; dummy substring. Then copy the modified node spec string to the user buffer.
;
; Find delimiter before password (either space or tab).
;

30$:	LOCC	#^A/"/,(R6),@4(R6)	; Locate start of ACS
	BEQL	20$			; Something is wrong!!
40$:	DECL	R0			; Make <R0,R1> point to next
	INCL	R1			;  character in string
	CMPB	(R1),#SPACE		; Look for space delimiter
	BEQL	50$			; Branch if found
	CMPB	(R1),#HOR_TAB		; Look for horizontal tab delimiter
	BEQL	50$			; Branch if found
	CMPB	(R1),#^A/"/		; Look for end of ACS
	BEQL	20$			; Branch if ACS is of the form:
					;  "" or "username"
	BRB	40$			; End-of-username not yet reached

;
; Delimiter before password has been found.
;

50$:	DECL	R0			; Make <R0,R1> point to possible
	INCL	R1			;  start of password string
	CMPB	(R1),#SPACE		; Skip over multiple spaces
	BEQL	50$			; "
	CMPB	(R1),#HOR_TAB		; Skip over multiple tabs
	BEQL	50$			; "

;
; Set-up three descriptors that will describe the modified node spec string.
;

	MOVL	IFB$L_NWA_PTR(R9),R2	; Get address of NWA
	MOVAB	NWA$T_TEMP(R2),R2	; Get address of scratch buffer
	MOVQ	(R6),(R2)		; 1st descriptor describes node name
	SUBL2	R0,(R2)			;  string up to password
	MOVZBL	#8,8(R2)		; 2nd descriptor describes dummy
	MOVAB	24(R2),12(R2)		;  string that replaces password
	MOVQ	#^A/password/,24(R2)	; Store dummy string

;
; Find delimiter after password (either quote, space, or tab).
;

60$:	CMPB	(R1),#^A/"/		; Branch if ACS is of the form:
	BEQL	70$			;  "username password"
	DECL	R0			; Make <R0,R1> point to next
	INCL	R1			;  character in string
	CMPB	(R1),#SPACE		; Branch if ACS is of the form:
	BEQL	70$			;  "username password account"
	CMPB	(R1),#HOR_TAB		; Branch if end-of-password not
	BNEQ	60$			;  yet reached
70$:	MOVQ	R0,16(R2)		; 3rd descriptor describes node
					;  name string after password

;
; Copy node spec string with password masked out.
;

	MOVL	R2,R6			; Copy address of 1st descriptor in set
	MOVL	IFB$L_NWA_PTR(R9),R2	; Get address of NWA
	MOVL	R3,NWA$Q_LNODE+4(R2)	; Save address of returned string
	BSBW	MOVE_NEXT		; Use 1st descriptor
	BSBW	MOVE_NEXT		; Use 2nd descriptor
	BSBW	MOVE_NEXT		; Use 3rd descriptor

;
; Create special logical name in user mode entered in the process logical name
; table for the node-spec-string-with-password-masked-out with an equivalence
; string that is the merged-unaltered-node-spec string. This is done so that
; the expanded and resultant strings have password masked-out, yet are
; still valid when used as a related file input string.
;

	MOVL	IFB$L_NWA_PTR(R9),R2	; Get address of NWA
	MOVL	NWA$Q_LNODE+4(R2),R5	; Get address of returned string
	SUBL3	R5,R3,R4		; Build descriptor of node spec string
	SUBL2	#2,R4			;  in <R4,R5>
	CMPB	(R5),#^A/_/		; Remove leading underscore (if present)
	BNEQ	75$			;  before creating special logical name
	DECL	R4			;  of node spec (less double colon)
	INCL	R5			;  with password masked out
75$:	MOVQ	R4,NWA$Q_LNODE(R2)	; Store desc of special logical name
	$CRELOG_S-			; Create the special logical name
		TBLFLG=#LOG$C_PROCESS-	;  Process logical name table
		LOGNAM=NWA$Q_LNODE(R2)-	;  String desc with dummy password
		EQLNAM=FWA$Q_NODE1(R10)[R11]- ;  String desc with real password
		ACMODE=#PSL$C_USER	;  Put in process table in user mode
	BLBC	R0,ERRDME		; Branch on failure
80$:	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block?
	BLSSU	90$			; Branch if not
	SUBL3	NAM$L_NODE(R7),R3,R1	; Compute NODE length
	MOVB	R1,NAM$B_NODE(R7)	; Fill in NODE length field
90$:	BBS	#FWA$V_REMRESULT,(R10),-; Branch if remote FAL has
		COPY_REMRESULT		;  returned a resultant filespec
	ACBB	FWA$B_SUBNODCNT(R10),-	; Branch if there is another secondary
		#1,R11,10$		;  node spec to process
	BRB	COPY_QUOTED		; Check for quoted string

ERRDME:	RMSERR	DME			; Declare error
	BRW	EXIT_ERR		; Branch aid

;++
;
; Copy the quoted string to the user buffer and optionally mask out
; /netacp_data (if present).  Also store the wildcard context of the
; quoted name. 
;
;--

COPY_QUOTED:				;
	BBS	#FWA$V_QUOTED,(R10),10$	; Branch if quoted string follows
					;  node name string
	BRW	COPY_DEVICE		; Rejoin mainline
10$:	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block
	BLSSU	20$			; Branch if not
	MOVL	R3,NAM$L_NAME(R7)	; Fill in NAME address field
20$:	MOVAQ	FWA$Q_QUOTED(R10),R6	; Get quoted string descriptor address
	BBC	#FWA$V_NETSTR,(R10),30$	; Branch if /netacp_data
					;  was not present in quoted string
	BBS	#NAM$V_PWD,-		; Branch if /netacp_data is not to
		NAM$B_NOP(R7),30$	; be masked out from quoted string
;
; The quoted string contains an embedded /netacp_data. Replace it with a
; dummy string and copy the modified quoted string to the user buffer.
; Set-up two descriptors that will describe the modified quoted string.
;

	MOVL	IFB$L_NWA_PTR(R9),R0	; Get address of NWA
	MOVZBL	NWA$B_NETSTRSIZ(R0),R1	; Get length of /netacp_data"
	MOVAB	NWA$T_TEMP(R0),R2	; Get address of scratch buffer
	MOVQ	(R6),(R2)		; 1st descriptor describes quoted
	SUBL2	R1,(R2)			;  string up to slash
	MOVZBL	#8,8(R2)		; 2nd descriptor describes dummy
	MOVAB	16(R2),12(R2)		;  string that replaces /netacp_data"
	MOVQ	#^A\/opdata"\,16(R2)	; Store dummy string

;
; Copy quoted string with /netacp_data masked out.
;

	MOVL	R2,R6			; Copy descriptor set address
	BSBW	MOVE_NEXT		; Use 1st descriptor
					; Finish-up with 2nd descriptor
30$:	BSBW	MOVE_NEXT		; Copy quoted string
	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block?
	BLSSU	40$			; Branch if not
	SUBL3	NAM$L_NAME(R7),R3,R1	; Compute NAME length
	MOVB	R1,NAM$B_NAME(R7)	; Fill in NAME length field

40$:	BRB	EX_SUC			; Rejoin mainline

;++
;
; Copy resultant string returned by remote FAL (which does not contain the
; leading node spec) to the user buffer.
;
; Note:	This resultant string is described by the quoted string descriptor.
;
; Note:	If the user quoted the filespec and entered only a primary node spec,
;	then the resultant string returned by FAL is quoted and copied to the
;	user buffer, because the quotes were removed by NT$GET_FILESPEC when
;	building the filespec to send to FAL, thus causing FAL to return a
;	resultant name string without quotes!
;
;--

COPY_REMRESULT:
	MOVAQ	FWA$Q_QUOTED(R10),R6	; Get result string descriptor address
	BBC	#FWA$V_QUOTED,(R10),10$	; Branch if user did not enclose
					;  filespec in quotes
	TSTB	FWA$B_SUBNODCNT(R10)	; Branch if there is more than one
	BNEQ	10$			;  node spec in node spec list
	MOVB	#^A/"/,R0		; Add leading quote to resultant
	BSBW	MOVE_CHAR		;  string
	BSBW	MOVE_NEXT		; Copy the returned resultant string
	MOVB	#^A/"/,R0		; Add trailing quote to resultant
	BSBW	MOVE_CHAR		;  string
	BRB	20$			;
10$:	BSBW	MOVE_NEXT		; Copy the returned resultant string
20$:	CMPB	NAM$B_BLN(R7),#NAM$C_BLN; Is this an extended NAM block?
	BGEQU	PARSE_REMRESULT		; Go parse the resultant name string
EX_SUC:	BRW	EXIT_SUC		; Rejoin mainline

;++
;
; The resultant name string returned by FAL has not been parsed by RMS, so
; there will not be FWA descriptors of the various filespec elements setup.
; Therefore, hand-parse the string and fill in the extended NAM block fields.
;
; Note:	FWA$Q_QUOTED is used to describe the resultant string returned by FAL.
;	This does NOT imply that FAL has returned a quoted string.
;
; Note also that this code will not work if remote nodes ever return 
; a quoted file name string, e.g. an ANSI-"a" filespec.  Since magtape
; access is not allowed over the network this is not currently a problem.
;
;--
TWO_COLONS:
	.ASCII	^::^			; Text for MATCHC instruction

PARSE_REMRESULT:
	MOVL	NAM$L_NODE(R7),R5	; Get address of resultant name string
					;  already copied to user buffer
	MOVZBL	(R8),R6			; Get length of resultant name string
					;  in user buffer (size of first node
					;  name + size of FAL's returned string)
	IFNORD	R6,(R5),EX_SUC,IFB$B_MODE(R9) ; Can we read it?

;
; Reparse the nodespec list, as the resultant string returned by FAL may have
; additional node names to contribute to the nodespec list.
;

REM_NODE:
10$:	MATCHC	#2,B^TWO_COLONS,R6,(R5)	; Now find the next "::"
	BNEQ	20$			; Branch if no more nodes
	MOVL	R3,R5			; Save the address
	MOVL	R2,R6			; Save the # of remaining bytes
	CMPB	#^A/"/,(R5)		; Do we have a quoted string?
	BNEQ	10$			; Branch if not; look for another node
20$:	SUBL3	NAM$L_NODE(R7),R5,R4	; Compute NODE length
	MOVB	R4,NAM$B_NODE(R7)	; Fill in NODE length field

REM_QUOTED:				;
	CMPB	#^A/"/,(R5)		; Do we have a quoted string?
	BNEQ	REM_DEV			; Branch if not
	MOVL	R5,NAM$L_NAME(R7)	; Fill in NAME address field
	MOVB	R6,NAM$B_NAME(R7)	; Fill in NAME length field
	BRB	SUC			; All done

REM_DEV:				;
	LOCC	#^A/:/,R6,(R5)		; Find single colon device delimiter
	BEQL	REM_DIR			; Branch if no device seen
	MOVL	R5,NAM$L_DEV(R7)	; Fill in DEV address field
	INCL	R1			; Step past the colon
	SUBL3	R5,R1,R4		; Compute DEV length
	MOVB	R4,NAM$B_DEV(R7)	; Fill in DEV length field
	MOVL	R1,R5			; Move pointer to next field
	SUBL2	R4,R6			; Compute remaining length
	BEQL	SUC			; Branch if end of string

REM_DIR:				;
	LOCC	#^A/]/,R6,(R5)		; Look for closing square bracket
	BNEQ	10$			; Branch if directory found
	LOCC	#^A/>/,R6,(R5)		; Look for closing angle bracket
	BEQL	REM_NAME		; Branch if no directory found
10$:	MOVL	R5,NAM$L_DIR(R7)	; Fill in DIR address field
	INCL	R1			; Step past the bracket delimiter
	SUBL3	R5,R1,R4		; Compute DIR length
	MOVB	R4,NAM$B_DIR(R7)	; Fill in DIR length field
	MOVL	R1,R5			; Bump pointer to next field
	SUBL2	R4,R6			; Compute remaining length
	BEQL	SUC			; Branch if end of string

REM_NAME:				;
	LOCC	#^A/./,R6,(R5)		; Find dot delimiter
	MOVL	R5,NAM$L_NAME(R7)	; Fill in NAME address field
	SUBL3	R5,R1,R4		; Compute NAME length
	MOVB	R4,NAM$B_NAME(R7)	; Fill in NAME length field
	MOVL	R1,R5			; Bump pointer to next field
	SUBL2	R4,R6			; Compute remaining length
	BEQL	SUC			; Branch if end of string

REM_TYPE:				;
	LOCC	#^A/;/,R6,(R5)		; Look for semi-colon version delimiter
	BNEQ	10$			; Branch if found
	DECL	R6			; Skip past leading dot!
	LOCC	#^A/./,R6,1(R5)		; Look for dot version delimiter
10$:	MOVL	R5,NAM$L_TYPE(R7)	; Fill in TYPE address field
	SUBL3	R5,R1,R4		; Compute TYPE length
	MOVB	R4,NAM$B_TYPE(R7)	; Fill in TYPE length field

REM_VER:				;
	MOVB	R0,NAM$B_VER(R7)	; Fill in VER length field
	BEQL	SUC			; Branch if end of string
	MOVL	R1,NAM$L_VER(R7)	; Fill in VER address field
SUC:	BSBB	UPDATE_FNB		; Set appropriate FNB bits
	BRW	EXIT_SUC		; Rejoin mainline


;++
;
; This routine sets the wildcard directory FNB bits for a network $search.
; Currently FAL does not return these bits.
; These bits are input to an OFP if the input
; file NAM block is used as the RLF.
; Since we don't actually know how many are wild, we set as many wild bits
; as there are sub-directories; the UFD is never set wild.
; This is appropriate for most common cases:
;
;  works: COPY node::[A...]*.TXT 	[Z...]*
;	  COPY node::[A.*]*.TXT 	[Z.*]*
;
;  fails: COPY node::[A.B...]*.TXT	[Z...]*	; gets B.DIR and shouldn't
;	  COPY node::[...]*.TXT		[Z...]*	; doesn't get top level
;
; Inputs:
;
;	R7	NAM block address
;
; Outputs:
;
;	R0-R3	destroyed
;	FNB bits set
;	   
;--

UPDATE_FNB:
	CLRL	R3				; Zero dir_lvl counter
	MOVZBL	NAM$B_DIR(R7),R0		; Get dir length
	BEQL	100$				; 0 length = no sub dirs
	MOVL	NAM$L_DIR(R7),R1		; Get adr of dir string
	IFNORD	R0,(R1),100$,IFB$B_MODE(R9)	; Can we read it?
10$:	LOCC	#^A/./,R0,(R1)			; Locate a dot
	BEQL	20$				; No more sub dirs
	INCL	R3				; Found one/ update count
	INCL	R1				; Step passed found dot
	DECL	R0				; Decr the length
	BRB	10$				; See if there are any more
20$:	TSTL	R3				; How many did we find?
	BEQL	100$				; Branch if none
	INSV	R3,#NAM$V_DIR_LVLS,-		; Set the DIR_LVLS field
		#NAM$S_DIR_LVLS,NAM$L_FNB(R7)	;  (a 3 bit field)
	BBC	#FWA$V_WILD_DIR,(R10),100$	; Don't set any if none wild
	MNEGL	#1,R0				; Set all the bits
	INSV	R0,#NAM$V_WILD_SFD1,R3,-	; Set as many wild bits as there
		NAM$L_FNB(R7)			;  are dir_lvls (SFD1 -> SFD7)
100$:	RSB					; All done.


	.SBTTL	RM$GETFILNAM, Build Resultant File Name for Journaling

;++
;
; RM$GETFILNAM - This routine uses the name block routines above to
; return  device:[directory...]filename.ext;version into a buffer
; for journaling.
;
; Calling Sequence:
;
;	BSBW	RM$GETFILNAM
;
; Input Parameters:
;
;	R3	Address of Buffer to return file name string
;	R4	Size of Buffer
;	R9	IFB address
;	R10	FWA address
;	R11	impure area address
;	
; Implicit Inputs:
;
;	The current contents of the FWA.
;
; Outputs:
;
;	R0	Status code
;	R1-R3	Destroyed
;	R4	Return String Length
;
; Implicit Outputs:
;
;	None.
;
; Completion Codes:
;
;	Standard RMS completion codes, including SUC, ESA, ESS, RSA, RSS, NAM.
;
; Side Effects:
;
;	None.
;
;--

RM$GETFILNAM::
	PUSHR	#^M<R3,R4,R5,R6,R7,R8>	; Save registers
	MOVZBL	#NAM$C_BLN,R2		; Allocate a fake nam block
	MOVL	R9,R1
	BSBW	RM$GETSPC
	BLBS	R0,10$			; Continue on error
	POPR	#^M<R3,R4,R5,R6,R7,R8>	; Restore registers
	RSB

10$:	MOVL	R1,R7			; Save address of block
	MOVQ	(SP)+,R3		; restore R3,R4
	MOVB	#NAM$C_BLN,NAM$B_BLN(R7); Fill in block length
	SSB	#NAM$V_NOCONCEAL,NAM$B_NOP(R7) ; we need "real" physical device
	MOVAB	NAM$B_RSS(R7),R8	; Get RSS address
	MOVB	R4,(R8)+		; Fill in RSS, point R8 at RSL	
	CLRB	(R8)			; Initialize RSL
	MOVAQ	FWA$Q_DIR1(R10),R6	; Copy from start of directory info
	MOVZBL	FWA$B_DIRTERM(R10),-(SP); Save directory terminator
	MOVB	#^A/]/,FWA$B_DIRTERM(R10); Force square brackets
	PUSHAB	B^20$			; Set return address for COPY_DEVICE
	PUSHR	#^M<R8,R11>		; Push registers COPY_DEVICE pops
	BRW	COPY_DEVICE		; Go off and get name

;
;	COPY_DIR will return here
;

20$:	MOVB	(SP),FWA$B_DIRTERM(R10)	; Restore directory terminator
	TSTL	(SP)+			; Pop off stack
	MOVZBL	NAM$B_RSL(R7),R8	; Save return length
	MOVL	R7,R4			; Return fake nam block
	MOVL	R9,R3
	MOVZBL	#NAM$C_BLN,R2
	BSBW	RM$RETSPC
	MOVL	R8,R4			; Return file name length
	POPR	#^M<R5,R6,R7,R8>	; Restore registers
	RSB	


	.SBTTL	RM$FILLNAM, Output Resultant File Name and other NAM Fields

;+
;
; RM$FILLNAM --  subroutine to output resultant name string and other 
;		 nam fields.
;
;  Inputs:
;	R11	impure area address
;	R10	fwa address
;	R9	ifab address
;	R8	fab address
;
;  Outputs:
;	R7	nam block address
;	R0	status code
;	R1-R6	destroyed
;
;-

EXPARGL:
	.BYTE	NAM$L_RSA		; arg list for rm$expstring
	RMSERR_WORD	RST
	RMSERR_WORD	RSS

RM$FILLNAM::
	MOVL	FAB$L_NAM(R8),R7	; get name block addr
	BEQL	30$			; branch if no nam block

	BBS	#DEV$V_FOR,-		; if the device is mounted foreign then
		IFB$L_PRIM_DEV(R9),5$	; the directory is to be of null length
	BBS	#DEV$V_RND,IFB$L_PRIM_DEV(R9),10$ ; branch if full directory dev

5$:	CSB	#FWA$V_DIR,(R10)		; clear DIR bit if not
10$:	MOVAB	EXPARGL,AP		; arg list for rm$expstring
	BSBW	RM$EXPSTRING		; fill in resultant name string
	BLBC	R0,40$			; quit on error
	BBS	#FWA$V_NODE,(R10),50$	; branch if nodename was found
	BSBW	RM$WRITE_DVI		; Write DVI field in NAM block
	MOVL	FWA$T_FIBBUF+FIB$W_FID(R10),NAM$W_FID(R7); copy fid
	MOVW	FWA$T_FIBBUF+FIB$W_FID+4(R10),NAM$W_FID+4(R7); copy fid
	TSTW	FWA$T_FIBBUF+FIB$W_DID(R10); any did?
	BEQL	30$			; branch if yes
	MOVL	FWA$T_FIBBUF+FIB$W_DID(R10),NAM$W_DID(R7); copy did
	MOVW	FWA$T_FIBBUF+FIB$W_DID+4(R10),NAM$W_DID+4(R7); copy did
30$:	RMSSUC
40$:	RSB
50$:	MOVC5	#0,(SP),#0,#<16+6+6>,NAM$T_DVI(R7)
	BRB	30$			; zero dvi, fid, and did fields


	.SBTTL	RM$WRITE_DVI, Write DVI field of NAM block
;++
;
;	This routine writes the DVI field of the NAM block from
;	the information stored in the FWA.
;	The DVI field is the PPF device string if this is a PPF;
;	else it is a canoical device name of the form:
;		_ddcuuuu
;
; Inputs:
;
;	R10 = Address of FWA
;	R7 = Address of user's NAM block
;
; Outputs:
;
;	R0-R5 destroyed.
;	The DVI field is written.
;
;--

RM$WRITE_DVI::
	MOVAB	NAM$T_DVI(R7),R3	; ptr to destination
	TSTB	FWA$B_ESCFLG(R10)	; is this a PPF file?
	BEQL	10$			; branch if not

;
; If PPF, put special name in DVI
;

	MOVQ	FWA$Q_DEVICE(R10),R0	; length/addr of name
	BRB	20$

10$:	MOVQ	FWA$Q_SHRFIL(R10),R0	; length/addr of string
	BBC	#DEV$V_SPL,IFB$L_AS_DEV(R9),20$	; ok if not spooled
	MOVQ	FWA$Q_AS_SHRFIL(R10),R0	; use secondary name if spooled

20$:	CMPW	R0,#15			; room for count field and name?
	BGTRU	30$			; nope
	MOVB	R0,(R3)+		; stuff count (for counted string)
	MOVC3	R0,(R1),(R3)		; copy name past count field
	RSB

30$:	CLRB	(R3)			; say no DVI field
	RSB

	.SBTTL	RM$CHKNAM, Check NAM Block Validity

;++
;
; Subroutine to verify that R7 really points to an accessible Name Block.
;
; Inputs:
;
;	R7	NAM block address
;
; Outputs:
;
;	If an error occurs, R0 is set to the error code.
;
;--


	ASSUME	NAM$B_BLN	EQ	NAM$B_BID+1

RM$CHKNAM::
	IFNORD	#NAM$B_BLN+1,(R7),ERRNAM; Branch if BID and BLN not readable
	CMPB	NAM$B_BID(R7),#NAM$C_BID; Right ID?
	BNEQ	ERRNAM			; Branch if not
	MOVZBL	NAM$B_BLN(R7),R0	; Get user specified size
	CMPB	R0,#NAM$C_BLN_V2	; Long enough (version 2 size)?
	BLSSU	ERRNAM			; Branch if not long enough
	IFNOWRT	R0,(R7),ERRNAM		; Branch if not writeable
	RMSSUC				; Success
	RSB				;

ERRNAM:
	RMSERR	NAM			; Show problem
	RSB				;

	.END
