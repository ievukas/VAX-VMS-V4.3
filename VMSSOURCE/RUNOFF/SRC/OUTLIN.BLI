%TITLE 'directs output or move of TSF'
MODULE OUTLIN (	IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					    NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:
!
!	Either saves information described by TSF or causes it to
!	be output immediately.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	CREATION DATE:	May, 1978


%SBTTL 'Revision History'
! MODIFIED BY:
!
!	019	KAD00019	Keith Dawson	9-May-1983
!		Remove support for .DX, .PX.
!
!	018	RER00018	Ron Randall	20-Mar-1983
!		For DSRPLUS:  Added code for topnotes.
!
!	017	KAD00017	Keith Dawson	20-Mar-1983
!		Removed LN01 conditionals and all references to .BIX
!		and .BTC files.
!
!	016	KAD00016	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!--


%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    OUTLIN	: NOVALUE,
    OUTCRG	: NOVALUE,
    OUTJ	: NOVALUE,
    OUTNJ	: NOVALUE,
    OUTPAS	: NOVALUE;
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! EXTERNAL REFERENCES:
!
EXTERNAL
    BRNOOB	: $XPO_IOB (),
    FOOREC	: FOOREC_DEFINITION,
    FNCT	: FNCT_DEFINITION,
    FRA		: FIXED_STRING,
    GCA		: GCA_DEFINITION,
    MRA		: REF FIXED_STRING,
    OUTOPT	: OUTOPT_DEFINE,
    SCA		: SCA_DEFINITION,
    TSF		: TSF_DEFINITION;

%IF DSRPLUS %THEN
EXTERNAL
    TOPNOT	: TN_DEFINITION,
    TNREC	: TNREC_DEFINITION;

EXTERNAL ROUTINE
    TNFIL;
%FI

EXTERNAL LITERAL
    RNFCJL,
    RNFLOC;

EXTERNAL ROUTINE
    endwrd,	erm,	foofil,		lout,
    putndy,	puttxt,	scl,		unpus; 
!!    XOUT;


%sbttl 'OUTLIN -- output full MRA.'
GLOBAL ROUTINE outlin (justify) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	OUTLIN is called when MRA is full, and the text should be output. It
!	routes normal text lines directly to LOUT, for output. Other records
!	are passed to other processors.  For example, footnote records get
!	saved in the footnote file, topnote records get saved in the topnote 
!	file, and indexing records get sent to the indexing routines.
!
! FORMAL PARAMETERS:
!
!	justify - Indicates whether or not the line should be justified.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN

    IF  .TSF_INDEX			! Is this TSF something for the index?
	OR .TSF_BTC			! Is this TSF something for the table of contents?
    THEN
	BEGIN				! This record describes an index or table of contents entry
	LOCAL
	    IADDR,			! Address of text (as opposed to CH$PTR)
	    INT_HL,			! Internal length of text.
	    IPTR;			! CH$PTR to the text.

	INT_HL = .TSF_INT_HL;		! Save internal length of text.
	IPTR = .FS_START(MRA);		! Save pointer to text.
	IADDR = (.FS_START(MRA))<0,%BPADDR,0> + %BLISS(BLISS36);

	TSF_LINES = 0;			! This does not generate any text.

%IF DSRPLUS %THEN
	!
	! Direct indexing and table of contents information from the topnote
	! to the topnote file.  Such information from the main body of the
	! document goes directly to the processing routine.
	!
	IF .TN_COLLECTING		! If collecting topnotes,
	THEN
	    TNFIL (TN_WRITE)		! save information in topnote file.
	ELSE
	    BEGIN
%FI

	!
	! Direct indexing and table of contents information from the footnote
	! to the footnote file. Such information from the main body of the
	! document goes directly to the processing routine.
	!
	IF .FNCT_COLLECTING		! If collecting footnotes,
	THEN
	    FOOFIL (FOO_WRIT)		! save information in footnote file.
	ELSE
	    BEGIN

	    ! If user wants to debug the index or table of contents, 
	    ! regurgitate the information.
	    IF (NOT .GCA_SKIP_OUT)
	    THEN
		BEGIN

		! User wants to see information on this document page.
		IF .GCA_DEBUG_INDEX
		    AND .TSF_INDEX
		THEN
		    ! Echo an index entry.
		    UNPUS (0)
		ELSE
		    BEGIN

		    IF .GCA_DEBUG_TOC
			AND .TSF_BTC
		    THEN
			! Echo a table of contents entry.
			UNPUS (1);

		    END;

		END;

	    ! Send index entries to the intermediate file, only if the user 
	    ! said /INTERMEDIATE.
!!	    IF NOT .GCA_BIX
!!	    THEN
!!		IF .TSF_INDEX
!!		THEN
!!		    XOUT (.INT_HL, .IPTR, .TSF_FIRST_XTN, .TSF_H_BARS);

	    IF (.gca_bix AND .tsf_index)
	    THEN
		putndy (.int_hl, .iaddr, .tsf_first_xtn, .tsf_h_bars);

	    ! Send table of contents records to the intermediate file.
	    IF .tsf_btc
	    THEN
		puttxt (.int_hl, .iptr, .tsf_major, .tsf_minor);

	    END;

%IF DSRPLUS %THEN
	    END;
%FI

	RETURN;
	END;

!+
! This is a record full of "normal" text to be output.
!-

%IF DSRPLUS %THEN
    IF  NOT .TN_EXPANDING		! Expanding topnotes?
    THEN
	BEGIN
%FI

    IF  NOT .FNCT_EXPANDING		! Expanding footnotes?
    THEN
    ! Set up justification for all lines except those that are
    ! being fetched from the footnote file. For these records,
    ! the information was computed before they were written to
    ! the footnote temporary file.
	BEGIN
	TSF_JUSTIFY  = .JUSTIFY;
	TSF_JUST_ALG = .TSF_JUST_ALG + 1;	! Justification algorithm feedback for next time.
	TSF_PADDING  = .SCA_RM - .TSF_EXT_HL;	! Space count for padding.
	END;

%IF DSRPLUS %THEN
	END;

    IF	NOT .TN_COLLECTING
    THEN
	BEGIN
%FI

    IF	.TSF_PADDING LSS 0 AND NOT .FNCT_COLLECTING
    THEN
	BEGIN
	! This can happen only if a word is encountered that does
	! not fit onto the line between the margins. It can also
	! happen as a side effect of breaking a word that does not
	! fit in TSF (see ENDCHR, where this is done).
	! The effect of the error handling is that the line is
	! output without justification, but with nothing removed.
	! The resulting line may have text exceeding the right margin.
	ERM (RNFCJL, 0, 0);

%IF DSRPLUS %THEN
	IF  NOT .TN_EXPANDING		! Expanding topnotes?
	THEN
	    BEGIN
%FI

	IF  NOT .FNCT_EXPANDING		! Expanding footnotes?
	THEN
	    ! Output line and page only if this is not happening
	    ! inside a footnote. If it's happening inside a footnote
	    ! then the line and page numbers will be the wrong ones.
	    ERM (RNFLOC, 0, 0);

	TSF_PADDING = 0;

%IF DSRPLUS %THEN
	    END;
%FI

	END;

%IF DSRPLUS %THEN
	END;

    IF  NOT .TN_COLLECTING		! Collecting topnotes?
    THEN
	BEGIN
%FI

    IF  NOT .FNCT_COLLECTING		! Collecting footnotes?
    THEN
	! Output some text directly to the document.
	BEGIN
	FS_INIT (FRA);

%IF DSRPLUS %THEN
	GCA_LINE_PEND = 0;	! This line is going to be output, pend no more.
%FI

	LOUT ();
	END
    ELSE
	! Save this record in the footnote file for use later.
	BEGIN

	! Compute the number of lines represented by this record.
	! TSF_LINES currently contains a count of the number of
	! lines that will be generated when the code generated by
	! the Gxxxx routines (see module GCODE) is "executed".
	IF .TSF_UND AND .OUTOPT_UND_SEP
	THEN
	! Add an extra line if underlining is done by putting something
	! on an extra line (e.g. dashes under the text).
	    TSF_LINES = .TSF_LINES + 1;

	IF .TSF_EXT_HL NEQ 0
	THEN
	    TSF_LINES = .TSF_LINES + 1;

	! Now actually save the record.
	FOOFIL (FOO_WRIT);
	END;

%IF DSRPLUS %THEN
	END
    ELSE
	BEGIN

	IF .TSF_UND AND .OUTOPT_UND_SEP
	THEN
	    TSF_LINES = .TSF_LINES + 1;

	IF .TSF_EXT_HL NEQ 0
	THEN
	    TSF_LINES = .TSF_LINES + 1;

	TNFIL (TN_WRITE);
	END;

    IF  NOT .TN_EXPANDING		! Expanding topnotes?
    THEN
	BEGIN
%FI

    IF  NOT .FNCT_EXPANDING		! Expanding footnotes?
    THEN
	! Throw away leftovers from line just output.
	! Note that it wouldn't hurt anything to always do this. It's just that
	! it's a waste of time if footnotes are being output.
	BEGIN
	TSF_INT_HL = 0;
	TSF_EXT_HL = 0;
	TSF_INT_VL = 0;
	TSF_NBITS = 0;
	TSF_BARS = FALSE;			! Turn off change bars.
	TSF_H_BARS = FALSE;
	TSF_JUS_CNT = 0;
	TSF_FIRST_XTN = 0;
	TSF_LAST_XTN = 0;
	SCA_WRD_LST_JUS = 0;
	SCA_WRD_LST_UND = FALSE;
	SCA_WRD_LST_SP = 0;
	TSF_TEXT = FALSE;			! There's nothing there now.
	TSF_ADJUST = 0;
	TSF_NEXT_REG = 0;
	TSF_LINES = 0;
	TSF_FOOTW = 0;				! No footnotes attached to this line.
	! Clean up the MRA by moving the last word in the buffer to the left.
	SCL ();
	END;

%IF DSRPLUS %THEN
	END;
%FI

    END;					! End of OUTLIN


%sbttl 'OUTNJ -- output text unjustified'
GLOBAL ROUTINE outnj : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Forces out the current text, without allowing it to be justified.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    IF ( NOT .SCA_FC)
	OR ( NOT .SCA_FILL)
    THEN
	ENDWRD (FALSE, FALSE, FALSE)
    ELSE
	BEGIN

	IF (.SCA_WRD_FOOTW NEQ 0)		! Footnotes attached to this word?
	THEN
	    ! Take care of pending footnote.
	    BEGIN
	    TSF_FOOTW = .TSF_FOOTW + .SCA_WRD_FOOTW;	! Update count of footnotes associated with this line.
	    SCA_WRD_FOOTW = 0				! Make sure footnotes don't get counted twice
	    END;

	! Is there an index entry associated with this word?
	IF .SCA_WRD_F_XTN NEQ 0
	THEN
	    ! Take care of pending index entry.
	    BEGIN

	    IF .TSF_FIRST_XTN EQL 0
	    THEN
		TSF_FIRST_XTN = .SCA_WRD_F_XTN;

	    TSF_LAST_XTN = .SCA_WRD_L_XTN;
	    END;
	END;

    SCA_WRD_F_XTN = 0;
    SCA_WRD_L_XTN = 0;
    OUTLIN (FALSE);				! Don't justify line.
    TSF_JUST_ALG = 0;				! Reset justification algorithm.
    SCA_CONT = FALSE;				! Don't allow concatenation (.NO SPACE)
    END;					! End of OUTNJ


%sbttl 'OUTJ -- output text justified'
GLOBAL ROUTINE outj : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Forces out the current text, causing it to be justified.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!
!--

    BEGIN

    IF 	( NOT .SCA_FC)
	OR ( NOT .SCA_FILL)
    THEN
	ENDWRD (FALSE, FALSE, FALSE)
    ELSE
	BEGIN

	IF (.SCA_WRD_FOOTW NEQ 0)	    ! Footnotes attached to this word?
	THEN
	    ! Take care of pending footnote.
	    BEGIN
	    TSF_FOOTW = .TSF_FOOTW + .SCA_WRD_FOOTW;	! Update count of footnotes associated with this line.
	    SCA_WRD_FOOTW = 0			! Make sure footnotes are not counted twice
	    END;

	IF .SCA_WRD_F_XTN NEQ 0
	THEN
	    ! Take care of pending index entry.
	    BEGIN

	    IF .TSF_FIRST_XTN EQL 0
	    THEN
		TSF_FIRST_XTN = .SCA_WRD_F_XTN;

	    TSF_LAST_XTN = .SCA_WRD_L_XTN;
	    END;
	END;

    SCA_WRD_F_XTN = 0;
    SCA_WRD_L_XTN = 0;
    OUTLIN (TRUE);				! Justify line.
    TSF_JUST_ALG = 0;				! Reset justification algorithm.
    SCA_CONT = FALSE;				! Don't allow concatenation (.NO SPACE)
    END;					! End of OUTJ


%sbttl 'OUTCRG -- remove carrage control from TSF'
GLOBAL ROUTINE outcrg : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Clears out carriage control sequences from the TSF.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    ! This is a record full of "normal" text to be output.
    FS_INIT (FRA);
    TSF_JUSTIFY = FALSE;
    TSF_PADDING = 0;

%IF DSRPLUS %THEN

    ! If collecting topnotes, go through OUTNJ to make sure blank lines
    ! get put in the right place.
    IF  .TN_COLLECTING				! Collecting topnotes?
    THEN
	OUTNJ ()
    ELSE
	BEGIN
%FI

    ! If collecting footnotes, go through OUTNJ to make sure blank lines
    ! get put in the right place.
    IF  .FNCT_COLLECTING			! Collecting footnotes?
    THEN
	OUTNJ ()
    ELSE
	LOUT ();

%IF DSRPLUS %THEN
	END;
%FI

    ! Throw away leftovers from line just output.
    TSF_INT_HL = 0;
    TSF_EXT_HL = 0;
    TSF_INT_VL = 0;
    TSF_NBITS = 0;
    TSF_BARS = FALSE;				! Turn off change bars.
    TSF_H_BARS = FALSE;
    TSF_JUS_CNT = 0;
    TSF_FIRST_XTN = 0;
    TSF_LAST_XTN = 0;
    TSF_TEXT = FALSE;				! There's nothing there now.
    TSF_ADJUST = 0;
    TSF_FOOTW = 0;
    FS_INIT (MRA);
    SCA_WRD_PNTR = .FS_START (MRA);
    TSF_NEXT_REG = 0;
    END;					! End of OUTCRG


%sbttl 'OUTPAS -- directs pass-though record'
GLOBAL ROUTINE outpas (fullwords, address, xtn_pointer, type) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Directs a passthrough record to the appropriate location.
!
! FORMAL PARAMETERS:
!
!	fullwords   - Number of fullwords in the vector pointed to by address.
!	address     - Address of the block of data to write.
!	type        - Minor record type, as defined in FOOREC.REQ or TNREC.REQ.
!	xtn_pointer - Offset into the passthrough record to apply in 
!		      order to find the transaction number.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN

%IF DSRPLUS %THEN
    !
    ! If topnotes are being collected, then write the record to the topnote 
    ! file.  Otherwise, direct the record to the appropriate utility.
    !
    IF  .TN_COLLECTING
    THEN
	!
	! Set up some fields in the record header and
	! write the record to the work file.
	!
	BEGIN
	TNREC_MAJOR_TYPE  = TNREC_MAJ_PASS;
	TNREC_MINOR_TYPE  = .TYPE;
	TNREC_XTN_PTR     = .XTN_POINTER;
	TNREC_ADDRESS     = .ADDRESS;
	TNREC_RECORD_SIZE = .FULLWORDS;
	TNFIL (TN_PWRITE)
	END
    ELSE
	BEGIN
%FI

    ! If footnotes are being collected, then write the record to the footnote 
    ! work file. Otherwise, direct the record to the appropriate utility.
    IF .FNCT_COLLECTING
    THEN
	! We are between .FOOTNOTE and .END FOOTNOTE
	! Write the record to the work file.
	BEGIN
	! First set up some fields in the record header.
	FOOREC_MAJOR_TYPE  = FOOREC_MAJ_PASS;
	FOOREC_MINOR_TYPE  = .TYPE;
	FOOREC_XTN_PTR     = .XTN_POINTER;
	FOOREC_ADDRESS     = .ADDRESS;
	FOOREC_RECORD_SIZE = .FULLWORDS;
	FOOFIL (FOO_PWRIT)
	END
    ELSE
	! Not between .FOOTNOTE and .END FOOTNOTE. Direct the record to 
	! the appropriate .B%% file and write the binary record.
	$XPO_PUT (IOB = BRNOOB, BINARY_DATA = (.FULLWORDS, .ADDRESS));

%IF DSRPLUS %THEN
	END;
%FI

    END;					! End of OUTPAS

END						! End of module
ELUDOM
