MODULE PAS$LINELIMIT2 ( %TITLE 'LINELIMIT procedure'
		IDENT = '1-001'			! File: PASLINELI.B32 Edit: SBL1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This procedure implements the Pascal LINELIMIT procedure.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 14-October-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 14-October-1981
!--

%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$LINELIMIT2: NOVALUE;			! Set linelimit for file

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!

%SBTTL 'PAS$LINELIMIT2 - Set linelimit for file'
GLOBAL ROUTINE PAS$LINELIMIT2 (			! Set linelimit for file
	PFV: REF $PAS$PFV_FILE_VARIABLE, 	! File variable
	LINELIMIT: REF VECTOR [1, LONG],	! New linelimit
	ERROR					! Error unwind address
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure sets a new limit for the number of lines that may
!	be written to the specified file.  For non-textfiles, each PUT
!	is considered one line.
!
! CALLING SEQUENCE:
!
!	CALL PAS$LINELIMIT2 (pfv.mr.r, linelimit.rl.r [, error.j.r])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	LINELIMIT	- The new linelimit for the file.  A signed longword
!			  integer value.  A negative value denotes no limit.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  in case of an error.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	FCB [FCB$L_LINELIMIT]
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
! SIGNALLED ERRORS:
!
!	FILNOTOPE - file not open
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,! File control block
	PFV_ADDR: VOLATILE,		! Enable argument
	UNWIND_ACT: VOLATILE,		! Enable argument
	ERROR_ADDR: VOLATILE;		! Enable argument

    BUILTIN
	ACTUALCOUNT;

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    IF ACTUALCOUNT () GEQU 3
    THEN
	ERROR_ADDR = .ERROR;				! Set unwind address

    !+
    ! Set the enable argument for the PFV address.
    !-

    PFV_ADDR = PFV [PFV$R_PFV];

    !+
    ! Validate and lock the PFV.
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Resolve lazy lookahead and open INPUT or OUTPUT.
    !-

    IF NOT .PFV [PFV$V_VALID]
    THEN
	PAS$$LOOK_AHEAD (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! Verify that file is open.
    !-

    IF NOT .PFV [PFV$V_OPEN]	! Not open
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTOPE,0);

    !+
    ! Set new linelimit.
    !-

    FCB [FCB$L_LINELIMIT] = .LINELIMIT [0];

    !+
    ! Indicate successful completion
    ! Unlock file and return.
    !-

    FCB [FCB$L_STATUS] = 0;
    PFV [PFV$V_LOCK] = 0;

    RETURN;

    END;					! End of routine PAS$LINELIMIT2

!<BLF/PAGE>
END						! End of module PAS$LINELIMIT2

ELUDOM
