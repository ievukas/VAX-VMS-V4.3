MODULE DBGADDEXP (IDENT = 'V04-000') =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! WRITTEN BY
!	Rich Title	August, 1982
!
! MODULE FUNCTION
!	This module contains the Address Expression Interpreter.
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

FORWARD ROUTINE
    DBG$EVAL_ADDR_OPERATOR,		! Evaluate an Address Expr. operator
    DBG$PRIM_TO_ADDR,			! Convert Primary Descriptor to 
    					!    Value Descriptor containing
    					!    address of descriptor.
    DETERMINE_TYPE: NOVALUE,		! Determine type of inputs
    GET_DEREFERENCE;			! Perform dereference operation

EXTERNAL
    DBG$GL_DFLTTYP,			! Holds type from SET TYPE command
    DBG$GW_DFLTLENG: WORD,		! Holds length from SET TYPE command
    DBG$REG_VALUES: VECTOR[,LONG];	! Register save area

EXTERNAL ROUTINE
    DBG$BUILD_PRIMARY_SUBNODE: NOVALUE,	! Build a Primary Subnode
    DBG$CONV_TEXT_VALUE,		! Convert text string to value
    DBG$INS_DECODE,			! Decode instruction
    DBG$MAKE_VAL_DESC,			! Materialize value into Val Descr
    DBG$MAKE_VMS_DESC,			! Convert Primary Descriptor to 
    					!    VAX standard descriptor
    DBG$MAKE_SKELETON_DESC,		! Build skeleton descriptor
    DBG$NCOPY_DESC,			! Copy descriptors
    DBG$PRIM_TO_VAL,			! Convert Primary Descriptor to 
    					!    Value Descriptor.
    DBG$STA_SYMNAME : NOVALUE,		! Obtain name of symbol from SYMID
    DBG$STA_SYM_IS_LITERAL,		! Determine whether a symid represents
    					!    a literal value.
    DBG$STA_TYPEFCODE,			! Find fcode
    DBG$STA_TYP_TYPEDPTR: NOVALUE;	! Look up typed pointer

! Define some codes for the kinds of addresses that a descriptor
! can represent.
!
LITERAL
    ADDR$K_UNKNOWN = -1,	! Unknown type
    ADDR$K_MINTYPE = 1,		! Minimum of known type codes below
    ADDR$K_LITERAL = 1,		! Literal value
    ADDR$K_PRIMARY = 2,		! Primary Descriptor
    ADDR$K_INST = 3,		! Address of instruction
    ADDR$K_DATA = 4,		! Address of data
    ADDR$K_BITFIELD = 5,	! Bit field within address
    ADDR$K_MAXTYPE = 5;		! Maximum of codes above


GLOBAL ROUTINE DBG$EVAL_ADDR_OPERATOR(OPERATOR, LEFT_ARG, RIGHT_ARG) =
!
! FUNCTION
!	This routine does the actual evaluation of a DEBUG Address Expression
!	operator.  It does a CASE on the operator code and does the appropriate
!	address computation or other operation for those operators allowed in
!	DEBUG Address Expressions.  For any operator not allowed in an Address
!	Expression, it signals an error message.
!
! INPUTS
!	OPERATOR - The Operator Token Entry for the operator to be evaluated.
!
!	LEFT_ARG - A pointer to the left argument Primary Descriptor or Value
!		  Descriptor.  If the operator is a unary operator, LEFT_ARG
!		  points to the operator's one argument.
!
!	RIGHT_ARG - A pointer to the right argument Primary Descriptor or Value
!		  Descriptor.  If the operator is a unary operator, RIGHT_ARG
!		  is not used.
!
! OUTPUTS
!	A pointer to the Value Descriptor or Primary Descriptor
!	which results from the evaluation of
!	the operator is returned as this routine's result.
!

    BEGIN

    MAP
	OPERATOR: REF TOKEN$ENTRY,	! Token Entry for operator to perform
	LEFT_ARG: REF DBG$VALDESC,	! Left operand Token Entry
	RIGHT_ARG: REF DBG$VALDESC;	! Right operand Token Entry

    LOCAL
    	BINARY_FLAG,			! TRUE if the Address Expression Operator
    					!    is a binary operator
    	LEFT_TYPE,			! Address type of left operand (one of
    					!    the above codes
    	OPCODE,				! The opcode of the Address Expression Operator
    	RIGHT_TYPE;			! Address type of right operand (one
    					!    of the above codes.


    ! The following macro containing the processing that is done on
    ! the ADD and SUBTRACT operators. This processing is the same
    ! except for occurences of either a "+" or a "-". For that reason,
    ! it was separated out as a macro.
    !
    MACRO PROCESS_ADD_OR_SUBTRACT (OP) =

    	    CASE .LEFT_TYPE FROM ADDR$K_MINTYPE TO ADDR$K_MAXTYPE OF
    		SET

    		! Left argument is a Primary Descriptor.
    		!
    		[ADDR$K_PRIMARY] :
    		    BEGIN

    		    ! For all right args, we need to convert
    		    ! the Primary Descriptor to Value Descriptor before we
    		    ! do any operation.
    		    ! 
    		    DBG$PRIM_TO_VAL (.LEFT_ARG, DBG$K_V_VALUE_DESC, LEFT_ARG);
    		    RETURN DBG$EVAL_ADDR_OPERATOR (
    			    		.OPERATOR, 
    					.LEFT_ARG,
    					.RIGHT_ARG );
    		    END;


    		[ADDR$K_LITERAL] :
    		    BEGIN

    		    IF .RIGHT_TYPE EQL ADDR$K_PRIMARY
    		    THEN
    			BEGIN
    			DBG$PRIM_TO_VAL (.RIGHT_ARG, DBG$K_V_VALUE_DESC, RIGHT_ARG);
    			RETURN DBG$EVAL_ADDR_OPERATOR (
    				.OPERATOR,
    				.LEFT_ARG,
    				.RIGHT_ARG);
    			END;

    		    ! For all other right operands, just add the literal
    		    ! value to the right operand, and return the right 
    		    ! operand. Thus the result retains the type of the
    		    ! right operand.
    		    !
    		    RIGHT_ARG [DBG$L_VALUE_POINTER] =
    			.LEFT_ARG [DBG$L_VALUE_POINTER] OP
    			.RIGHT_ARG [DBG$L_VALUE_POINTER];

    		    ! Handle result type of instruction.
    		    !
    		    IF .RIGHT_TYPE EQL ADDR$K_INST
    		    THEN
    			RIGHT_ARG[DBG$W_VALUE_LENGTH] =
    			    DBG$INS_DECODE(.RIGHT_ARG[DBG$L_VALUE_POINTER],
    					    FALSE, FALSE) -
    			    .RIGHT_ARG[DBG$L_VALUE_POINTER];

    		    ! Handle bitfields on the right.
    		    !
    		    IF .RIGHT_TYPE EQL ADDR$K_BITFIELD
    		    THEN
    			BEGIN
    		        RIGHT_ARG [DBG$L_VALUE_POS] = 
    			    .LEFT_ARG [DBG$L_VALUE_POS] OP
    			    .RIGHT_ARG [DBG$L_VALUE_POS];

    			! Normalize the bit offset.
    			!
    			RIGHT_ARG [DBG$L_VALUE_POINTER] =
    			    .RIGHT_ARG [DBG$L_VALUE_POINTER] +
    			    .RIGHT_ARG [DBG$L_VALUE_POS] / 8;
    			RIGHT_ARG [DBG$L_VALUE_POS] =
    			    .RIGHT_ARG [DBG$L_VALUE_POS] MOD 8;
    			END;

    		    RETURN .RIGHT_ARG;
    		    END;

    		[ADDR$K_INST, ADDR$K_DATA] :
    		    BEGIN

    		    ! Instruction OP Primary
    		    ! Convert the Primary and try again.
    		    !
    		    IF .RIGHT_TYPE EQL ADDR$K_PRIMARY
    		    THEN
    			BEGIN
    			DBG$PRIM_TO_VAL (.RIGHT_ARG, DBG$K_V_VALUE_DESC, RIGHT_ARG);
    			RETURN DBG$EVAL_ADDR_OPERATOR (
    				.OPERATOR,
    				.LEFT_ARG,
    				.RIGHT_ARG);
    			END;

    		    ! If the right arg is a bitfield, retain the type
    		    ! of the right arg.
    		    !
    		    IF .RIGHT_TYPE EQL ADDR$K_BITFIELD
    		    THEN
    			BEGIN
    		    	RIGHT_ARG [DBG$L_VALUE_POINTER] = 
    			    .LEFT_ARG  [DBG$L_VALUE_POINTER] OP 
    			    .RIGHT_ARG [DBG$L_VALUE_POINTER];
    		        RIGHT_ARG [DBG$L_VALUE_POS] = 
    			    .LEFT_ARG [DBG$L_VALUE_POS] OP
    			    .RIGHT_ARG [DBG$L_VALUE_POS];

    			! Normalize the bit offset.
    			!
    			RIGHT_ARG [DBG$L_VALUE_POINTER] =
    			    .RIGHT_ARG [DBG$L_VALUE_POINTER] +
    			    .RIGHT_ARG [DBG$L_VALUE_POS] / 8;
    			RIGHT_ARG [DBG$L_VALUE_POS] =
    			    .RIGHT_ARG [DBG$L_VALUE_POS] MOD 8;
    			RETURN .RIGHT_ARG;
    			END;

    		    ! Add the addresses.
    		    !
    		    LEFT_ARG [DBG$L_VALUE_POINTER] = 
    			.LEFT_ARG  [DBG$L_VALUE_POINTER] OP 
    			.RIGHT_ARG [DBG$L_VALUE_POINTER];

    		    ! If we are retaining instruction type then
    		    ! fill in the length correctly.
    		    !
    		    IF .RIGHT_TYPE EQL ADDR$K_LITERAL
    		    THEN
    			BEGIN
    			IF .LEFT_TYPE EQL ADDR$K_INST
    			THEN
    			    LEFT_ARG[DBG$W_VALUE_LENGTH] =
    			        DBG$INS_DECODE(.LEFT_ARG[DBG$L_VALUE_POINTER],
    					        FALSE, FALSE) -
    			       .LEFT_ARG[DBG$L_VALUE_POINTER];
    			END

    		    ! If we are not adding a literal value, zero out
    		    ! the type information. This reflects the fact
    		    ! that in expressions such as EX INST OP DATA,
    		    ! the address being examined is of unknown type.
    		    !
    		    ELSE
    			BEGIN
    			LEFT_ARG [DBG$B_DHDR_KIND] = RST$K_DATA;
    			LEFT_ARG [DBG$B_DHDR_FCODE] = RST$K_TYPE_DESCR;
    			LEFT_ARG [DBG$V_DHDR_OVERRIDE] = TRUE;
    	    		LEFT_ARG [DBG$B_VALUE_CLASS] = 0;
    	    		LEFT_ARG [DBG$B_VALUE_DTYPE] = .DBG$GL_DFLTTYP;
    		    	IF .DBG$GL_DFLTTYP EQL DSC$K_DTYPE_ZI
    		    	THEN
    			    LEFT_ARG[DBG$W_VALUE_LENGTH] =
    			        DBG$INS_DECODE(.LEFT_ARG[DBG$L_VALUE_POINTER],
    					        FALSE, FALSE) -
    			    	.LEFT_ARG[DBG$L_VALUE_POINTER]
    			ELSE
    	    		    LEFT_ARG [DBG$W_VALUE_LENGTH] = .DBG$GW_DFLTLENG;
    			END;

    		    ! Return the left argument.
    		    !
    		    RETURN .LEFT_ARG;
    		    END;

    		
    		[ADDR$K_BITFIELD] :
    		    BEGIN

    		    ! Bitfield OP Primary.
    		    ! Convert the Primary and try again.
       		    !
    		    IF .RIGHT_TYPE EQL ADDR$K_PRIMARY
    		    THEN
    			BEGIN
    			DBG$PRIM_TO_VAL (.RIGHT_ARG, DBG$K_V_VALUE_DESC, RIGHT_ARG);
    			RETURN DBG$EVAL_ADDR_OPERATOR (
    				.OPERATOR,
    				.LEFT_ARG,
    				.RIGHT_ARG);
    			END;

    		    ! In other cases, add the addresses.
    		    !
    		    LEFT_ARG [DBG$L_VALUE_POINTER] = 
    			.LEFT_ARG  [DBG$L_VALUE_POINTER] OP 
    			.RIGHT_ARG [DBG$L_VALUE_POINTER];
    		    LEFT_ARG [DBG$L_VALUE_POS] = 
    			.LEFT_ARG [DBG$L_VALUE_POS] OP
    			.RIGHT_ARG [DBG$L_VALUE_POS];

    		    ! Normalize the bit offset.
    		    !
    		    LEFT_ARG [DBG$L_VALUE_POINTER] =
    			    .LEFT_ARG [DBG$L_VALUE_POINTER] +
    			    .LEFT_ARG [DBG$L_VALUE_POS] / 8;
    		    LEFT_ARG [DBG$L_VALUE_POS] =
    			    .LEFT_ARG [DBG$L_VALUE_POS] MOD 8;

    		    RETURN .LEFT_ARG;
    		    END;

    		TES %;


    ! Multiply and divide are similar to add and subtract except that
    ! we never try to retain a Primary for symbolization purposes.
    !
    MACRO PROCESS_MULTIPLY_OR_DIVIDE (OP) =
    	BEGIN
    	
    	! Handle the case where the left arg is a Primary.
    	!
    	IF .LEFT_TYPE EQL ADDR$K_PRIMARY
    	THEN
    	    BEGIN
    		    
    	    ! For all right args, we need to convert
    	    ! the Primary Descriptor to Value Descriptor before we
    	    ! do any operation.
    	    ! 
    	    DBG$PRIM_TO_VAL (.LEFT_ARG, DBG$K_V_VALUE_DESC, LEFT_ARG);
    	    RETURN DBG$EVAL_ADDR_OPERATOR (
    			    		.OPERATOR, 
    					.LEFT_ARG,
    					.RIGHT_ARG );
    	    END;


    	! Handle the case where the right arg is a Primary.
    	!
    	IF .RIGHT_TYPE EQL ADDR$K_PRIMARY
    	THEN
    	    BEGIN

    	    ! Convert the Primary and try again.
    	    !
    	    DBG$PRIM_TO_VAL (.RIGHT_ARG, DBG$K_V_VALUE_DESC, RIGHT_ARG);
    	    RETURN DBG$EVAL_ADDR_OPERATOR (
    				.OPERATOR,
    				.LEFT_ARG,
    				.RIGHT_ARG);
    	    END;

    	! Neither arg is a Primary.
    	! Multiply the addresses. Zero out the bit offset.
    	!
    	LEFT_ARG [DBG$L_VALUE_POINTER] = 
    		.LEFT_ARG  [DBG$L_VALUE_POINTER] OP 
    		.RIGHT_ARG [DBG$L_VALUE_POINTER];

    	! Zero out the bit offset. Change the type to
    	! unknown and return the left arg.
    	!
    	LEFT_ARG [DBG$V_DHDR_LITERAL] = FALSE;
    	LEFT_ARG [DBG$L_VALUE_POS] = 0;
      	LEFT_ARG [DBG$B_DHDR_KIND] = RST$K_DATA;
    	LEFT_ARG [DBG$B_DHDR_FCODE] = RST$K_TYPE_DESCR;
    	LEFT_ARG [DBG$V_DHDR_OVERRIDE] = TRUE;
    	LEFT_ARG [DBG$B_VALUE_CLASS] = 0;
    	LEFT_ARG [DBG$B_VALUE_DTYPE] = .DBG$GL_DFLTTYP;
    	IF .DBG$GL_DFLTTYP EQL DSC$K_DTYPE_ZI
    	THEN
    	    LEFT_ARG[DBG$W_VALUE_LENGTH] =
    		DBG$INS_DECODE(.LEFT_ARG[DBG$L_VALUE_POINTER],
    			        FALSE, FALSE) -
    		.LEFT_ARG[DBG$L_VALUE_POINTER]
    	ELSE
    	    LEFT_ARG [DBG$W_VALUE_LENGTH] = .DBG$GW_DFLTLENG;
    	RETURN .LEFT_ARG;
    	END %;


    ! Get the opcode and set the flag saying whether we are processing
    ! a binary operator. Also initialize the left and right type codes
    ! to unknown.
    !
    OPCODE = .OPERATOR [TOKEN$W_CODE];
    BINARY_FLAG =  .OPCODE EQL TOKEN$K_ADD
    		OR .OPCODE EQL TOKEN$K_SUBTRACT
    		OR .OPCODE EQL TOKEN$K_MULTIPLY
    		OR .OPCODE EQL TOKEN$K_DIVIDE;


    ! Call the routine which fills in the codes for LEFT_TYPE and
    ! RIGHT_TYPE. If an unconverted value needs to be converted,
    ! this routine constructs a new descriptor and the LEFT_ARG and
    ! RIGHT_ARG pointers may be modified to point to these new 
    ! descriptors.
    !
    DETERMINE_TYPE (.LEFT_ARG, LEFT_ARG, LEFT_TYPE);
    IF .BINARY_FLAG
    THEN
        DETERMINE_TYPE (.RIGHT_ARG, RIGHT_ARG, RIGHT_TYPE);

    ! Select the operation to perform based on the operation code.
    !
    CASE .OPERATOR [TOKEN$W_CODE] FROM TOKEN$K_MIN_OPERATOR TO TOKEN$K_MAX_OPERATOR OF
	SET

    	! Do the identity operation.
    	!
    	[TOKEN$K_IDENTITY]:
    	    BEGIN
    	    RETURN .LEFT_ARG;
    	    END;    	

	! Do the indirection (dereferencing) operation.
	!
	[TOKEN$K_INDIRECT]:
    	    BEGIN

    	    BUILTIN 
    		PROBER;

    	    LOCAL
    		ADDRESS,		! Address which is value of left arg
    		LENGTH;			! Bit length given in left arg.

    	    ! Primary Descriptors.
    	    !
    	    IF .LEFT_TYPE EQL ADDR$K_PRIMARY
    	    THEN
    		BEGIN
    		LOCAL
    		    LANG,
    		    VMS_DESC: DBG$STG_DESC;

    		! If we can dereference a typed pointer, and return
    		! a Primary representing the pointed-to object,
    		! then do so.
    		!
    		IF GET_DEREFERENCE(.LEFT_ARG)
    		THEN
    		    RETURN .LEFT_ARG;

    		! Use MAKE_VMS_DESC and MAKE_VAL_DESC to do the fetch.
    		! Preserve the language code.
    		!
    		LANG = .LEFT_ARG[DBG$B_DHDR_LANG];
    		DBG$MAKE_VMS_DESC (.LEFT_ARG, VMS_DESC);
    		LEFT_ARG = DBG$MAKE_VAL_DESC (VMS_DESC,	DBG$K_VALUE_DESC);
    		LEFT_ARG[DBG$B_DHDR_LANG] = .LANG;

    		! Change the descriptor back to a Volatile Value Descriptor.
    		!
    		LEFT_ARG[DBG$B_DHDR_TYPE] = DBG$K_V_VALUE_DESC;
    		LEFT_ARG[DBG$L_VALUE_POINTER] = .LEFT_ARG[DBG$L_VALUE_VALUE0];
    		IF .LEFT_ARG[DBG$B_VALUE_CLASS] EQL DSC$K_CLASS_UBS
    		THEN
    		    LEFT_ARG[DBG$L_VALUE_POS] = .LEFT_ARG[DBG$L_VALUE_VALUE1];

    		! Do a special case check for ".PC"
    		!
    		IF .VMS_DESC[DSC$A_POINTER] EQLA DBG$REG_VALUES[15]
    		THEN
    		    BEGIN

    		    ! Change dtype to instruction.
    		    !
    		    LEFT_ARG[DBG$B_VALUE_CLASS] = DSC$K_CLASS_S;
    		    LEFT_ARG[DBG$B_VALUE_DTYPE] = DSC$K_DTYPE_ZI;
    	    	    LEFT_ARG[DBG$W_VALUE_LENGTH] =
    			DBG$INS_DECODE(.LEFT_ARG[DBG$L_VALUE_POINTER],
    			                FALSE, FALSE) -
    			.LEFT_ARG[DBG$L_VALUE_POINTER];
    		    END;
    		RETURN .LEFT_ARG;
    		END;

    	    ! Check that we have read access to the address 
    	    ! given in the value descriptor. 
    	    !
    	    IF NOT PROBER (%REF(0), %REF(1), .LEFT_ARG[DBG$L_VALUE_POINTER])
    	    THEN
    		SIGNAL (DBG$_NOACCESSR, 1, .LEFT_ARG[DBG$L_VALUE_POINTER]);

    	    ! For bitfields, do the bit selection.
    	    !
    	    IF .LEFT_TYPE EQL ADDR$K_BITFIELD
    	    THEN
    		BEGIN

    		! Do additional checking for length <= 32 bits.
    		!
    		LENGTH = .LEFT_ARG [DBG$W_VALUE_LENGTH];
    		IF .LENGTH LSS 0
    		OR .LENGTH GTR 32
    		THEN
    		    SIGNAL (DBG$_ILLSIZFLD, 1, .LENGTH);
    		
    		! Also check for read access to top of range.
    		!
    		ADDRESS = .LEFT_ARG[DBG$L_VALUE_POINTER] +
    			 (.LEFT_ARG[DBG$L_VALUE_POS] + .LENGTH - 1) / 8;
    	        IF NOT PROBER (%REF(0), %REF(1), .ADDRESS)
    	        THEN
    		    SIGNAL (DBG$_NOACCESSR, 1, .ADDRESS);

    		! Do the bit selection.
    		!
    	        LEFT_ARG [DBG$L_VALUE_POINTER] = 
    		    (IF .LEFT_ARG [DBG$B_VALUE_DTYPE] EQL DSC$K_DTYPE_SV
    		     OR .LEFT_ARG [DBG$B_VALUE_DTYPE] EQL DSC$K_DTYPE_SVU
    		     THEN
    		         .(.LEFT_ARG [DBG$L_VALUE_POINTER]) <
    			   	.LEFT_ARG [DBG$L_VALUE_POS],
    				.LEFT_ARG [DBG$W_VALUE_LENGTH],
    			     	1>
    		     ELSE 
    		         .(.LEFT_ARG [DBG$L_VALUE_POINTER]) <
    			   	.LEFT_ARG [DBG$L_VALUE_POS],
    				.LEFT_ARG [DBG$W_VALUE_LENGTH],
    			     	0>);
    		END

    	    ELSE

    	        ! For other left args, just do the indirection.
    	        !
    	        LEFT_ARG [DBG$L_VALUE_POINTER] = ..LEFT_ARG [DBG$L_VALUE_POINTER];

    	    ! Change the type to unknown and return the argument.
    	    !
    	    LEFT_ARG [DBG$V_DHDR_LITERAL] = FALSE;
    	    LEFT_ARG [DBG$B_DHDR_KIND] = RST$K_DATA;
  	    LEFT_ARG [DBG$B_DHDR_FCODE] = RST$K_TYPE_DESCR;
    	    LEFT_ARG [DBG$V_DHDR_OVERRIDE] = TRUE;
    	    LEFT_ARG [DBG$B_VALUE_CLASS] = 0;
    	    LEFT_ARG [DBG$B_VALUE_DTYPE] = .DBG$GL_DFLTTYP;
    	    IF .DBG$GL_DFLTTYP EQL DSC$K_DTYPE_ZI
    	    THEN
    		LEFT_ARG[DBG$W_VALUE_LENGTH] =
    		    DBG$INS_DECODE(.LEFT_ARG[DBG$L_VALUE_POINTER],
    			            FALSE, FALSE) -
    		    .LEFT_ARG[DBG$L_VALUE_POINTER]
    	    ELSE
    	        LEFT_ARG [DBG$W_VALUE_LENGTH] = .DBG$GW_DFLTLENG;
    	    LEFT_ARG [DBG$L_VALUE_POS] = 0;
    	    RETURN .LEFT_ARG;
    	    END;


	! Do the add operation.
	!
	[TOKEN$K_ADD]:
    	    PROCESS_ADD_OR_SUBTRACT (+);


	! Do the subtract operation.
	!
	[TOKEN$K_SUBTRACT]:
    	    PROCESS_ADD_OR_SUBTRACT (-);


	! Do the unary plus operation.
	!
	[TOKEN$K_UNARY_PLUS]:
    	    RETURN .LEFT_ARG;


	! Do the unary minus operation (i.e., negation).
	!
	[TOKEN$K_UNARY_MINUS]:
    	    BEGIN

    	    ! First convert Primary Descriptors to Value Descriptors.
    	    !
    	    IF .LEFT_TYPE EQL ADDR$K_PRIMARY
    	    THEN
    		DBG$PRIM_TO_VAL (.LEFT_ARG, DBG$K_V_VALUE_DESC, LEFT_ARG);

    	    ! Negate the address.
    	    !
    	    LEFT_ARG [DBG$L_VALUE_POINTER] = - .LEFT_ARG [DBG$L_VALUE_POINTER];
    	    LEFT_ARG [DBG$L_VALUE_POS] = - .LEFT_ARG [DBG$L_VALUE_POS];

    	    ! Normalize the address.
    	    !
    	    LEFT_ARG [DBG$L_VALUE_POINTER] = 
    		.LEFT_ARG [DBG$L_VALUE_POINTER] +
    		.LEFT_ARG [DBG$L_VALUE_POS] / 8;
    	    LEFT_ARG [DBG$L_VALUE_POS] = 
    		.LEFT_ARG [DBG$L_VALUE_POS] MOD 8;
    	
    	    ! Handle result type of instruction.
    	    !
    	    IF .LEFT_TYPE EQL ADDR$K_INST
    	    THEN
    		LEFT_ARG[DBG$W_VALUE_LENGTH] =
    			    DBG$INS_DECODE(.LEFT_ARG[DBG$L_VALUE_POINTER],
    					    FALSE, FALSE) -
    			    .LEFT_ARG[DBG$L_VALUE_POINTER];

    	    ! Return the result.
    	    RETURN .LEFT_ARG;
    	    END;


	! Do the multiply operation.
	!
	[TOKEN$K_MULTIPLY]:
    	    PROCESS_MULTIPLY_OR_DIVIDE (*);    	


	! Do the divide operation.
	!
	[TOKEN$K_DIVIDE]:
    	    PROCESS_MULTIPLY_OR_DIVIDE (/);


	! Do the bit-selection operation, i.e. X<pos,size,ext>.
	!
	[TOKEN$K_BITSELECT]:
    	    BEGIN
    	    LOCAL
    		ADDR_INCREMENT,		! Increment to be added to byte address
    		BIT_OFFSET,		! New bit offset from byte address
    		DTYPE,			! New dtype
    		POS;

    	    ! Convert Primaries to Value Descriptors
    	    !
    	    IF .LEFT_ARG [DBG$B_DHDR_TYPE] EQL DBG$K_PRIMARY_DESC
    	    THEN
    		DBG$PRIM_TO_VAL (.LEFT_ARG, DBG$K_V_VALUE_DESC, LEFT_ARG);

    	    !++
    	    ! Handle value descriptors.
    	    !--
    	
    	    ! Clear the literal flag - the result is of type bitfield.
    	    !
    	    LEFT_ARG [DBG$V_DHDR_LITERAL] = FALSE;

    	    ! Add the bit offsets.
    	    !
    	    IF .LEFT_ARG[DBG$B_VALUE_CLASS] EQL DSC$K_CLASS_UBS
    	    THEN
    		POS = .LEFT_ARG [DBG$L_VALUE_POS]
    	    ELSE
    		POS = 0;
    	    BIT_OFFSET = .POS + .OPERATOR [TOKEN$W_BIT_OFFSET];
    	    
    	    ! Compute the new byte address.
    	    !
    	    LEFT_ARG [DBG$L_VALUE_POINTER] = .LEFT_ARG [DBG$L_VALUE_POINTER] +
    					    .BIT_OFFSET / 8;

    	    ! Compute the bit offset. From it and the sign extension bit,
    	    ! determine the new class and dtype.	
    	    !
    	    BIT_OFFSET = .BIT_OFFSET MOD 8;
    	    IF .BIT_OFFSET EQL 0
    	    THEN
    		BEGIN
    		IF .OPERATOR [TOKEN$V_SGNEXT]
    		THEN
    		    DTYPE = DSC$K_DTYPE_SV
    		ELSE
    		    DTYPE = DSC$K_DTYPE_V;
    		LEFT_ARG [DBG$B_VALUE_CLASS] = DSC$K_CLASS_S;
    		END
    	    ELSE
    		BEGIN
    		IF .OPERATOR [TOKEN$V_SGNEXT]
    		THEN
    		    DTYPE = DSC$K_DTYPE_SVU
    		ELSE
    		    DTYPE = DSC$K_DTYPE_VU; 
    		LEFT_ARG [DBG$B_VALUE_CLASS] = DSC$K_CLASS_UBS;
    		END;

    	    ! Fill in the new dtype, bit offset, and length.
    	    !
       	    LEFT_ARG [DBG$B_VALUE_DTYPE] = .DTYPE;
    	    LEFT_ARG [DBG$W_VALUE_LENGTH] = .OPERATOR [TOKEN$W_BIT_LENGTH];
    	    LEFT_ARG [DBG$L_VALUE_POS] = .BIT_OFFSET;
      	    RETURN .LEFT_ARG; 
    	    END;


	! Any other code constitutes an error and is signalled as such.
	! (The operator is not allowed in Address Expressions.)
	!
	[INRANGE, OUTRANGE]:
    	    BEGIN
	    SIGNAL(DBG$_INVOPADDR, 1, OPERATOR[TOKEN$B_OPLEN]);

    	    ! We never get here but throw in a return to keep the BLISS
    	    ! compiler happy.
    	    !
    	    RETURN 0;
    	    END;

	TES;
    END;

GLOBAL ROUTINE DBG$PRIM_TO_ADDR (DESC1, DTYPE, DESC2) =
!
! FUNCTION
!	Converts a Primary Descriptor into a value descriptor containing
!	the address of the primary.
!
!	For Primary Descriptors representing data or code, the address is stored
!	as a (byte address, bit offset) pair in the value field of the 
!	descriptor. If the given dtype is zero, the dtype is left alone. If the
!	user supplied a dtype that he wants the result to be, this
!	new dtype is stuffed in and the class and length fields are fixed
!	up accordingly. 
!
!	For Primary Descriptors representing literals, the literal value
!	is stored in the value field of the resulting descriptor. The
!	dtype information is left alone in this case - it presumably 
!	describes the type of the literal constant.
!
!	Note that BLISS fields are a special kind of literal. The four
!	field values are stored in four longwords in the value field
!	of the resulting value descriptor.
!	
!
! INPUTS
!	DESC1	- The address of the Primary Descriptor to be converted.
!	DTYPE	- The desired Dtype code of the resulting value descriptor
!	DESC2 	- An address in which to leave a pointer to the new value
!		  descriptor which is constructed.
!
! OUTPUTS
!	A Value Descriptor is allocated and filled in, and a pointer 
!	to it is left in DESC2. A status code is returned, which is
!	one of:
!	STS$K_SUCCESS	- Success.
!	STS$K_SEVERE	- Failure.
!
    BEGIN

    MAP
    	DESC1: REF DBG$PRIMARY;		! Pointer to input primary descriptor

    LOCAL
    	COUNT,				! For BLISS fields, count of fields
    	DSTPTR: REF DST$RECORD,		! Pointer to DST record for the primary
      	PTR,				! Scratch pointer
    	RSTPTR: REF RST$ENTRY,		! Pointer to RST entry for the primary
    	SUBVECTOR: REF VECTOR[],	! Pointer to vector of field values
    	TEMP_DESC: REF DBG$VALDESC;	! Pointer to a value descriptor


    ! Check for a volatile value descriptor coming in. In this case,
    ! turn it into an ordinary value descriptor with the "address" in
    ! the V. Value desc becoming the "value" in the ordinary value desc.
    !
    IF .DESC1[DBG$B_DHDR_TYPE] EQL DBG$K_V_VALUE_DESC
    THEN
    	BEGIN
    	MAP
    	    DESC2: REF DBG$VALDESC;
    	LOCAL
    	    DUMMY;

    	! Slightly kludgy solution to an obscure problem:
    	! If you examine a string of length > 256 and language is
    	! set to BLISS or MACRO then you get into this routine
    	! with a volatile value descriptor representing the string.
    	! In this case we just want to return the descriptor unchanged:
    	! do not add the level of indirection.
    	!
    	IF .DESC1[DBG$W_VALUE_LENGTH] GTR 256
    	THEN
    	    BEGIN
    	    .DESC2 = .DESC1;
    	    RETURN STS$K_SUCCESS;
    	    END;

    	! Otherwise, copy the descriptor and make it into an ordinary
    	! value descriptor.
    	!
    	DBG$NCOPY_DESC(.DESC1, TEMP_DESC, DUMMY, FALSE);
    	TEMP_DESC[DBG$B_DHDR_TYPE] = DBG$K_VALUE_DESC;
    	TEMP_DESC[DBG$L_VALUE_VALUE0] = .TEMP_DESC[DBG$L_VALUE_POINTER];
    	IF .TEMP_DESC[DBG$B_VALUE_CLASS] EQL DSC$K_CLASS_UBS
    	THEN
    	    TEMP_DESC[DBG$L_VALUE_VALUE1] = .TEMP_DESC[DBG$L_VALUE_POS];
    	TEMP_DESC[DBG$L_VALUE_POINTER] = TEMP_DESC[DBG$L_VALUE_VALUE0];
    	.DESC2 = .TEMP_DESC;
    	RETURN STS$K_SUCCESS;
    	END;
    

    ! Check for BLISS field. This is a hack needed to support BLISS structure
    ! references X[fieldname]. Basically, when we parse the "fieldname" 
    ! primary, we are expecting either an offset as in X[0,0,32,0] or a 
    ! fieldname as in X[fieldname]. 
    ! If we get a fieldname, we indicate it by building a special
    ! kind of value descriptor whose fcode is 
    ! RST$K_TYPE_BLIFLD, and in the value field we have the four integers
    ! that the fieldname translates into.
    !
    IF .DESC1 [DBG$B_DHDR_FCODE] EQL RST$K_TYPE_BLIFLD
    THEN
    	BEGIN
    	RSTPTR = .DESC1 [DBG$L_DHDR_SYMID0];
      	DSTPTR = .RSTPTR [RST$L_DSTPTR];

    	! Set up a pointer to the BLISS field components,
    	! and copy those four components into the value descriptor.
    	!
    	COUNT = .DSTPTR[DST$L_BLIFLD_COMPS];
 	PTR = 1 + DSTPTR[DST$B_NAME] + .DSTPTR[DST$B_NAME];

    	! Allocate the result descriptor now that we know how big
    	! it needs to be.
    	!
    	TEMP_DESC = DBG$MAKE_SKELETON_DESC (DBG$K_VALUE_DESC, 4*(.COUNT+1));
    	TEMP_DESC [DBG$B_DHDR_LANG]   = .DESC1 [DBG$B_DHDR_LANG];
    	TEMP_DESC [DBG$B_DHDR_KIND]   = .DESC1 [DBG$B_DHDR_KIND];
    	TEMP_DESC [DBG$B_DHDR_FCODE]  = .DESC1 [DBG$B_DHDR_FCODE];
    	TEMP_DESC [DBG$L_DHDR_TYPEID] = .DESC1 [DBG$L_DHDR_TYPEID];

 	SUBVECTOR = TEMP_DESC [DBG$A_VALUE_ADDRESS];
    	SUBVECTOR[0] = .COUNT;
     	INCR I FROM 1 TO .COUNT DO
    	    BEGIN
    	    SUBVECTOR [.I] = ..PTR;
    	    PTR = .PTR + 4;
    	    END;

        ! Fix up the pointer field, fill in the output parameter, and
        ! return success.
        !
    	TEMP_DESC [DBG$L_VALUE_POINTER] = TEMP_DESC [DBG$A_VALUE_ADDRESS];
    	.DESC2 = .TEMP_DESC;
    	RETURN STS$K_SUCCESS;
    	END;

    ! Check for literal constants.
    !
    IF DBG$STA_SYM_IS_LITERAL (.DESC1 [DBG$L_DHDR_SYMID0])
    THEN
    	BEGIN

    	! PRIM_TO_VAL does what we want with literals, so we just
    	! call that routine.
    	!
    	DBG$PRIM_TO_VAL (.DESC1, DBG$K_VALUE_DESC, .DESC2);
    	RETURN STS$K_SUCCESS;
    	END;

    ! Build a value descriptor of the desired type. 
    ! Fill in the header fields of this
    ! value descriptor.
    !
    TEMP_DESC = DBG$MAKE_SKELETON_DESC (DBG$K_VALUE_DESC, 4);
    TEMP_DESC [DBG$B_DHDR_LANG]   = .DESC1 [DBG$B_DHDR_LANG];
    TEMP_DESC [DBG$B_DHDR_KIND]   = .DESC1 [DBG$B_DHDR_KIND];
    TEMP_DESC [DBG$B_DHDR_FCODE]  = .DESC1 [DBG$B_DHDR_FCODE];
    TEMP_DESC [DBG$L_DHDR_TYPEID] = .DESC1 [DBG$L_DHDR_TYPEID];

    ! Set up for a call to DBG$MAKE_VMS_DESC. This routine (in DBGVALUES)
    ! converts Primary Descriptors to VMS standard descriptors. Since the
    ! value descriptor has a VMS descriptor inside it, we pass this
    ! to DBG$MAKE_VMS_DESC.
    !
    IF NOT DBG$MAKE_VMS_DESC (.DESC1, TEMP_DESC[DBG$A_VALUE_VMSDESC])
    THEN
    	RETURN STS$K_SEVERE;

    ! Normalize the pointer to include the bit offset.
    !
    IF .TEMP_DESC [DBG$B_VALUE_CLASS] EQL DSC$K_CLASS_UBS
    THEN
    	BEGIN
    	TEMP_DESC [DBG$L_VALUE_POINTER] = .TEMP_DESC [DBG$L_VALUE_POINTER] +
    		.TEMP_DESC [DBG$L_VALUE_POS] / %BPUNIT;
    	TEMP_DESC [DBG$L_VALUE_POS] = .TEMP_DESC [DBG$L_VALUE_POS] MOD %BPUNIT;
    	END;

    ! If this routine was passed a nonzero DTYPE, fill in the desired DTYPE.
    ! Also fill in all the related fields.
    ! Otherwise, leave it the way we got it from MAKE_VMS_DESC.
    !
    IF .DTYPE NEQ 0
    THEN

    	! The only case where we dummy in a different dtype is for address
    	! arithmetic in BLISS. E.g., EVAL F+F, without dots, we want to
    	! treat the address of F as a longword integer.
    	!
    	! In this case, the dtype we pass in is L.
    	!
    	IF .DTYPE EQL DSC$K_DTYPE_L
    	THEN
    	    BEGIN
    	    TEMP_DESC [DBG$B_DHDR_KIND] = RST$K_DATA;
    	    TEMP_DESC [DBG$B_DHDR_FCODE] = RST$K_TYPE_DESCR;
    	    TEMP_DESC [DBG$B_VALUE_CLASS] = DSC$K_CLASS_S;
            TEMP_DESC [DBG$B_VALUE_DTYPE]  = DSC$K_DTYPE_L;
    	    TEMP_DESC [DBG$W_VALUE_LENGTH] = 4;
    	    END
    	
    	! We do not currently handle other override dtypes here.
    	!
    	ELSE
    	    $DBG_ERROR ('DBGADDEXP\DBG$PRIM_TO_ADDR unknown dtype');

    ! Extract the desired information from the value descriptor.
    !
    TEMP_DESC[DBG$L_VALUE_VALUE0] = .TEMP_DESC[DBG$L_VALUE_POINTER];
    TEMP_DESC[DBG$L_VALUE_VALUE1] = .TEMP_DESC[DBG$L_VALUE_POS];

    ! Fix up the pointer field, fill in the output parameter, and
    ! return success.
    !
    TEMP_DESC [DBG$L_VALUE_POINTER] = TEMP_DESC [DBG$A_VALUE_ADDRESS];
    .DESC2 = .TEMP_DESC;
    RETURN STS$K_SUCCESS
    END;

ROUTINE DETERMINE_TYPE (ARG, NEW_ARG, TYPE) : NOVALUE = 
!
! FUNCTION
!	
!	Given a pointer to a descriptor, this routine does two things:
!	1 - Determines which of the address types the descriptor represents
!	2 - If necessary, calls CONV_TEXT_VALUE and returns a converted arg
!	    in NEW_ARG.
!
! INPUTS
!
!	ARG	- Points to either a Primary Descriptor or a Value Descriptor
!		  or a Volatile Value Descriptor
!	NEW_ARG - The address in which to leave a pointer to the converted 
!		  descriptor.
!	TYPE	- The address in which to leave a type code
!
! OUTPUTS
!
!	In TYPE, returns one of the five type codes ADDR$K_LITERAL, ADDR$K_INST, 
!	ADDR$K_DATA, ADDR$K_BITFIELD, ADDR$K_PRIMARY, saying what kind of 
!	address the descriptor represents.
!
!	In NEW_ARG, returns the address of the original argument if no conversion
!	was done on the descriptor. Otherwise, returns the address of the
!	new descriptor.
! 
    BEGIN

    MAP 
    	ARG : REF DBG$VALDESC;

    LOCAL
    	DTYPE,				! Holds a dtype code
    	NAME: REF VECTOR[,BYTE],	! Holds name of a primary
    	SYMID;				! Pointer to a SYMID

    ! Turn value descriptors into volatile value descriptors.
    !
    IF .ARG [DBG$B_DHDR_TYPE] EQL DBG$K_VALUE_DESC
    THEN
        BEGIN

        ! Check for "unconverted" value descriptors as input. These arise from
    	! constants, e.g. on EXAMINE 1000 we get a value descriptor with
    	! the string "1000".
    	!
    	IF .ARG [DBG$V_DHDR_UNCVT]
    	THEN
    	    BEGIN    	        

    	    ! Check for the correct dtype.
    	    !
    	    SELECTONE .ARG [DBG$B_VALUE_DTYPE] OF
    		SET
    		[DSC$K_DTYPE_L]:
    	    	    ARG = DBG$CONV_TEXT_VALUE (.ARG, .ARG, 0);

    	        ! The number scanner may pick up the constant as pack decimal
    	        ! for some languages, take in pack decimal with no '.' and
    	        ! treat it as long.
    	        !
    		[DSC$K_DTYPE_P]:
    		    BEGIN
    		    IF NOT CH$FIND_CH(.ARG [DBG$W_VALUE_LENGTH],
    				      .ARG [DBG$L_VALUE_POINTER], %C'.')
    		    THEN
    			BEGIN
    			ARG [DBG$B_VALUE_DTYPE] = DSC$K_DTYPE_L;
    			ARG [DBG$W_VALUE_TOKENCODE] = TOKEN$K_INTEGER;
    	    		ARG = DBG$CONV_TEXT_VALUE (.ARG, .ARG, 0);
    			END
    		    ELSE
    	    	        SIGNAL (DBG$_ILLADDCON, 2, .ARG [DBG$W_VALUE_LENGTH],
    				.ARG [DBG$L_VALUE_POINTER]);

    		    END;    			

    		[OTHERWISE]:
    	    	    SIGNAL (DBG$_ILLADDCON, 2, .ARG [DBG$W_VALUE_LENGTH],
    				.ARG [DBG$L_VALUE_POINTER]);
	        TES;

    	    ! Fill in correct dtype and length information.
    	    !
    	    ARG [DBG$V_DHDR_LITERAL] = TRUE;
    	    ARG [DBG$V_DHDR_OVERRIDE] = TRUE;
    	    ARG [DBG$B_VALUE_CLASS] = 0;
    	    ARG [DBG$B_VALUE_DTYPE] = .DBG$GL_DFLTTYP;
    	    IF .DBG$GL_DFLTTYP EQL DSC$K_DTYPE_ZI
    	    THEN
    		ARG[DBG$W_VALUE_LENGTH] =
    		    DBG$INS_DECODE(..ARG[DBG$L_VALUE_POINTER],
    				    FALSE, FALSE) -
    	       	   ..ARG[DBG$L_VALUE_POINTER]
    	    ELSE
    	        ARG [DBG$W_VALUE_LENGTH] = .DBG$GW_DFLTLENG;
    	    END;

    	! Make the value descriptor into a volatile value descriptor.
    	!
    	ARG [DBG$B_DHDR_TYPE] = DBG$K_V_VALUE_DESC;
    	ARG [DBG$L_VALUE_POINTER] = .ARG [DBG$L_VALUE_VALUE0];
    	IF .ARG [DBG$B_VALUE_DTYPE] EQL DSC$K_DTYPE_V
     	OR .ARG [DBG$B_VALUE_DTYPE] EQL DSC$K_DTYPE_SV
    	OR .ARG [DBG$B_VALUE_DTYPE] EQL DSC$K_DTYPE_VU
    	OR .ARG [DBG$B_VALUE_DTYPE] EQL DSC$K_DTYPE_SVU
    	THEN
    	    ARG [DBG$L_VALUE_POS] = .ARG [DBG$L_VALUE_VALUE1];
    	END;


    ! Case on the kind of descriptor.
    !
    SELECTONE .ARG[DBG$B_DHDR_TYPE] OF
    	SET

    	! Primary Descriptors. 
    	!
    	[DBG$K_PRIMARY_DESC] :
    	    BEGIN

    	    ! Check for Primary representing a literal.
    	    !	Example: In PASCAL,
    	    !	CONST
    	    !	    X = 512;
    	    !	    Y = 1.1;
    	    !
    	    !	On EXAMINE X, we will construct a Value Descriptor with 512 in
            !	the value field. On EXAMINE Y, we will signal an error.
    	    !
    	    IF DBG$STA_SYM_IS_LITERAL (.ARG [DBG$L_DHDR_SYMID0])
    	    THEN
    		BEGIN

    		! Save the symid
    		!
    		SYMID = .ARG [DBG$L_DHDR_SYMID0];

    	        ! Convert the Primary into a Value Descriptor and obtain the dtype.
    	        !
    		DBG$PRIM_TO_VAL (.ARG, DBG$K_VALUE_DESC, ARG);
    		DTYPE = .ARG[DBG$B_VALUE_DTYPE];
    	
    		! Check for integer dtype. These are the only kinds of 
        	! literals we can do address arithmetic on.
    		!
    		IF  .DTYPE NEQ DSC$K_DTYPE_Z
    		AND .DTYPE NEQ DSC$K_DTYPE_L
    		AND .DTYPE NEQ DSC$K_DTYPE_LU
    		AND .DTYPE NEQ DSC$K_DTYPE_W
    		AND .DTYPE NEQ DSC$K_DTYPE_WU
    		AND .DTYPE NEQ DSC$K_DTYPE_B
    		AND .DTYPE NEQ DSC$K_DTYPE_BU
    		THEN
        	    BEGIN

    		    ! Call the routine that turns a symid into a name, in order
    		    ! to be able to signal the error.
    		    !
    		    DBG$STA_SYMNAME (.SYMID, NAME);
    		    SIGNAL (DBG$_ILLADDCON, 2, .NAME[0], NAME[1]);
    		    END;

    	        ! Make the value descriptor into a volatile value descriptor.
    	        !
    	        ARG [DBG$B_DHDR_TYPE] = DBG$K_V_VALUE_DESC;
    	        ARG [DBG$L_VALUE_POINTER] = .ARG [DBG$L_VALUE_VALUE0];
    	        IF .ARG [DBG$B_VALUE_CLASS] EQL DSC$K_CLASS_UBS
    	        THEN
    	            ARG [DBG$L_VALUE_POS] = .ARG [DBG$L_VALUE_VALUE1];

    		! Put in the flag for literal.
    		!
    		ARG [DBG$V_DHDR_LITERAL] = TRUE;
    		.TYPE = ADDR$K_LITERAL;
    		END

    	    ELSE
    	
    	        ! The value is not a literal. Set the type code to Primary
    	        !
    	        .TYPE = ADDR$K_PRIMARY;

    	    END;

    	! Volatile Value Descriptors. 
    	!
    	[DBG$K_V_VALUE_DESC] :
    	    BEGIN

    	    ! If the descriptor came from a literal constant, fill in
    	    ! dtype of literal.
    	    !
    	    IF .ARG [DBG$V_DHDR_LITERAL] 
    	    THEN
    		.TYPE = ADDR$K_LITERAL

    	    ! Else look at the dtype field.
    	    !
    	    ELSE
    	        SELECTONE .ARG [DBG$B_VALUE_DTYPE] OF
    		    SET

    		    [DSC$K_DTYPE_ZI, DSC$K_DTYPE_ZEM] :
    		        BEGIN

    		        ! Change type from entry mask to instruction if
    		        ! any operations are to be performed.
    		        !
    		        ARG [DBG$B_VALUE_DTYPE] = DSC$K_DTYPE_ZI;
    		       .TYPE = ADDR$K_INST;
    		        END;
    
    		    [DSC$K_DTYPE_VU, DSC$K_DTYPE_V,
		     DSC$K_DTYPE_SVU, DSC$K_DTYPE_SV] :
    		        .TYPE = ADDR$K_BITFIELD;

    		    [OTHERWISE] :
    		        .TYPE = ADDR$K_DATA;

    		    TES;

    	    ! For non-bitfield types, make sure the POS field is zero.
    	    !
    	    IF ..TYPE NEQ ADDR$K_BITFIELD
    	    THEN
    		ARG [DBG$L_VALUE_POS] = 0;
    		
    	    END;

    	! We do not expect any other kind of descriptor.
    	!
    	[OTHERWISE] :
    	    $DBG_ERROR ('DBGADDEXP\DETERMINE_TYPE unknown arg type');

    	TES;

    ! Fill in the output parameter and return.
    !
    .NEW_ARG = .ARG;
    RETURN;
    END;

ROUTINE GET_DEREFERENCE (PRIMPTR) =
!
! FUNCTION
!	This routine is called upon seeing the dereference operator
!	in an address expression, when the operand is a primary.
!	E.g., "EXAM *PTR" in language C.
!
!	If the object being dereferenced is a typed pointer then
!	this routine dereferences it by modifying the Primary
!	Descriptor to refer to the pointed-to object. The value
!	"TRUE" is then returned indicating that the routine 
!	was successful.
!
!	This routine is similar to the GET_DEREFERENCE routine
!	in DBGPARSER.
!
! INPUTS
!	PRIMPTR		- A pointer to the Primary Descriptor 
!			  being dereferenced.
!
! OUTPUTS
!	If the Primary represents a typed pointer, then
!	it is modified and TRUE is returned.
!
!	If the Primary does not represent a typed pointer then
!	it is not modified and FALSE is returned.
!
    BEGIN
    MAP
	PRIMPTR: REF DBG$PRIMARY;

    LOCAL
	FCODE,				! Local variable holding fcode info
    	JUNK,				! Dummy output parameter
	NODEPTR: REF DBG$PRIM_NODE,	! Points to a Primary Sub-node
	TYPEID;				! Pointer to a RST type entry


    ! Check that the object being dereferenced is actually a pointer.
    !
    IF  .PRIMPTR[DBG$B_DHDR_FCODE] NEQ RST$K_TYPE_TPTR
    THEN
        RETURN FALSE;


    ! Obtain a pointer to the bottom level sub-node by following the
    ! back-pointer. Light the EVAL bit in this subnode,
    ! which indicates that pointer dereferencing is
    ! taking place.
    ! Then, obtain the pointer to the RST type entry for the object being 
    ! dereferenced.
    !
    NODEPTR = .PRIMPTR [DBG$L_PRIM_BLINK];
    NODEPTR [DBG$V_PNODE_EVAL] = TRUE;
    TYPEID = .NODEPTR [DBG$L_PNODE_TYPEID];


    ! From this typeid, get the typeid for the object being pointed to.
    ! For pointer variables, use the routine that extracts the typeid
    ! of the pointed-to object.
    ! Then obtain the fcode from the typeid.
    !
    DBG$STA_TYP_TYPEDPTR (.TYPEID, TYPEID);
    FCODE = DBG$STA_TYPEFCODE (.TYPEID);
    DBG$BUILD_PRIMARY_SUBNODE (.PRIMPTR, RST$K_DATA, 0, .FCODE, .TYPEID, 0);
    RETURN TRUE;
    END;
END
ELUDOM
