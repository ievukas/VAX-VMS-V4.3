
MODULE RM3BKTIO (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!		 This module performs IO for IDX file buckets checking and
!		 updating the reliablity data in the bucket overhead area.
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:	E. H. Marison     	28-Mar-1978
!
! MODIFIED BY:
!
!	V03-004	MCN0002		Maria del C. Nasr	22-Mar-1983
!		More linkages reorganization
!
!	V03-003	MCN0001		Maria del C. Nasr	24-Feb-1983
!		Reorganize linkages.
!
!	V03-002	TMK0001		Todd M. Katz		01-Nov-1982
!		Make a modification to the bucket format checking done in
!		RM$GETBKT. This routine scans the bucket in order to make sure
!		that the records in the bucket actually end where the freespace 
!		offset pointer says they do. Actually one of several scans was
!		done based upon the level of the bucket, prologue version of 
!		the file, and the state of key compression. It is now possible
!		to do the same scan for every possible combination because I
!		have re-written the routine RM$REC_OVHD to take into account
!		every concievable combination of prologue version, key 
!		compression state, and bucket level. This change was necessary
!		because the format checking of prologue 3 SIDR buckets was 
!		incorrect, and would occassionally result in an IRC error when
!		the bucket actually had the correct structure.
!
!	V03-001	KBT0154		Keith B. Thompson	21-Aug-1982
!		Reorganize psects
!
!	V02-017	CDS0006		C Saether		 8-Feb-1982
!		Only do bucket pre-scan when locking bucket.
!
!	V02-016	CDS0005		C Saether		28-Jan-1982
!		Make check for BLB instead of BDB in RLSBKT so that
!		the cache value is stored in gbpb's.
!
!	V02-015	CDS0004		C Saether		29-Dec-1981
!		RLSBKT also needs to check whether bucket was locked
!		before incrementing check characters.
!
!	V02-014	CDS0003		C Saether		 9-Dec-1981
!		Comment out references to the CSH$M_READAHEAD flag.
!
!	V02-013	PSK0005		Paulina S. Knibbe	04-Oct-1981
!		Fix 012 below.
!
!	V02-012	PSK0004		Paulina S. Knibbe	01-Oct-1981
!		Make sure prologue one/two tests are not applied
!		to prologue three buckets.
!
!	V02-011	CDS0002		C Saether		10-Sep-1981
!		Correction to 010.
!
!	V02-010	CDS0001		C Saether		30-Aug-1981
!		Have rm$rlsbkt handle bdb value of 0 - this occurs
!		when trying to release a lock bdb and the file
!		is not shared.  Also store cache value.
!
!	V02-009	PSK0003		Paulina S. Knibbe	06-May-1981
!		Fix infinite loop in check of compressed index
!		buckets.
!
!	V02-008	PSK0002		Paulina S. Knibbe	17-Apr-1981
!		Change variable names
!
!	V02-007	PSK0001		Paulina S. Knibbe	29-Mar-1981
!		Add checks appropriate for prologue Version 3.0 index
!		and SIDR buckets
!
!	V02-006	REFORMAT	Frederick E. Deen, Jr.	    23-Jul-1980
!		This code was reformatted to adhere to RMS standards
!
!
! REVISION HISTORY:
!
!   Christian Saether, 	14-Aug-1978
!   X0002 - RLSBKT to check if buffer there
!
!   Christian Saether, 	11-Oct-1978
!   X0003 - modify GETBKT to use REC_OVHD, reduce stack at IO
!
!   Christian Saether, 	19-Oct-1978
!   X0004 - GETBKT always releases bucket on error if still accessed
!
!   Wendy Koenig, 	24-Oct-1978
!   X0005 - Make changes caused by sharing conventions
!
!****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! Define default PSECTS
!

PSECT
    CODE = RM$RMS3(PSECT_ATTR),
    PLIT = RM$RMS3(PSECT_ATTR);

! Linkages
!

LINKAGE
    L_PRESERVE1,
    L_RABREG_457,
    L_REC_OVHD,
    L_CACHE,
    L_RELEASE;

! Forward Routines
!

FORWARD ROUTINE
    RM$RLSBKT	: RL$PRESERVE1;

! External Routines
!

EXTERNAL ROUTINE
    RM$CACHE	: RL$CACHE,
    RM$REC_OVHD	: RL$REC_OVHD,
    RM$RELEASE	: RL$RELEASE;


GLOBAL ROUTINE RM$GETBKT (VBN, SIZE) : RL$RABREG_457 =

!++
!
! RM$GETBKT
!
! This routine calls the RMS cache routine (RM0CACHE) for
! the requested bucket (VBN,SIZE). If an actual IO was done
! (i.e., the CSH$V_NOREAD, CSH$V_READAHEAD, or CSH$V_NOBUFFER bits
! are all off) and it was successful then the bucket's overhead
! area data is checked and if in error a status value of
! RMS$_CHK, RMS$_IRC, or RMS$_IBF is returned depending on
! the nature of the error.  IRAB[IRB$B_CACHEFLAGS] is always zeroed.
!
! CALLING SEQUENCE:
!	RM$GETBKT (VBN,SIZE)
!
! INPUT PARAMETERS:
!	VBN - Start VBN for bucket
!	SIZE - Number of bytes in bucket
!
! IMPLICIT INPUTS:
!	IRAB [ CACHEFLGS ] - cacheflags for CACHE (See RM0CACHE)
!	IDX_DFN	- used by RM$GETNEXT_REC routine
!
! OUTPUT PARAMETERS:
!	BDB - Address of BDB for bucket
!	BKT_ADDR - Address of the bucket buffer
!	RAB [ STV ] - VBN of bucket on IRC and IBF errors
!
! IMPLICIT OUTPUTS:
!	IRAB [ CACHEFLAGS ] zeroed
!
! ROUTINE VALUE:
!	Internal RMS status code
!
! SIDE EFFECTS:
!	R1,R2,R3,AP are destroyed
!
!--

    BEGIN

    LABEL
	BLK;

    EXTERNAL REGISTER
	COMMON_IO_STR,
	R_IDX_DFN_STR,
	COMMON_RAB_STR;

    LITERAL
	NODATABITS = (CSH$M_NOREAD
!	    OR
!	    CSH$M_READAHEAD
	    OR
	    CSH$M_NOBUFFER),
	PVN1_BITS = BKT$M_LASTBKT
	    OR
	    BKT$M_ROOTBKT;

    BEGIN

    LOCAL
	STATUS;

    IF (STATUS = RM$CACHE(.VBN, .SIZE, .IRAB[IRB$B_CACHEFLGS]))
    THEN
	BEGIN

	IF (.IRAB[IRB$B_CACHEFLGS]
	    AND
	    NODATABITS) NEQ 0
	THEN
	    BEGIN
	    IRAB[IRB$B_CACHEFLGS] = 0;
	    RETURN .STATUS

	    END

	END
    ELSE
	BEGIN
	IRAB[IRB$B_CACHEFLGS] = 0;
	RETURN .STATUS

	END;

    END;					! of this local STATUS

    BEGIN

    LOCAL
	STATUS;

    STATUS =
BLK :
    BEGIN

    LOCAL
	REC_SIZE,
	EOB,
	LEVEL;

    GLOBAL REGISTER
	R_REC_ADDR;

    IF (.BKT_ADDR[BKT$W_ADRSAMPLE] NEQU .(BDB[BDB$L_VBN])<0, 16>
	OR
	.BKT_ADDR[BKT$B_CHECKCHAR] NEQU .(.BKT_ADDR + .BDB[BDB$W_NUMB] - 1)<0,
	    8>)
    THEN
	LEAVE BLK WITH RMSERR(CHK);

    ! Check to make sure that only prologue version 1 bits are on and that
    ! the beginning of freespace is somewhere in the bucket.
    !

    IF .IFAB [IFB$B_PLG_VER] LSSU PLG$C_VER_3
    THEN

	BEGIN
	IF (.BKT_ADDR[BKT$B_BKTCB] AND 	NOT PVN1_BITS) NEQ 0
	    OR
	    .BKT_ADDR[BKT$W_FREESPACE] GTRU .BDB[BDB$W_NUMB]
    	THEN
	    LEAVE BLK WITH RMSERR(IBF);
	END

    !   Check the KEYREF matches index number for this bucket
    !   (If this is a prologue 3 file)
    !
    ELSE
	IF .IDX_DFN [IDX$B_KEYREF] NEQ .BKT_ADDR [BKT$B_INDEXNO]
	THEN
	    LEAVE BLK WITH RMSERR (IBF);

    IF NOT .BBLOCK[IRAB[IRB$B_CACHEFLGS], CSH$V_LOCK]
    THEN

	BEGIN
	STATUS = RMSSUC(SUC);
	IRAB[IRB$B_CACHEFLGS] = 0;
	RETURN .STATUS;
	END;

    ! Make one scan through entire bucket confirming that records actually end
    ! where freespace says they do.
    !
    EOB = .BKT_ADDR + .BKT_ADDR[BKT$W_FREESPACE];
    REC_ADDR = .BKT_ADDR + BKT$C_OVERHDSZ;

    IF (LEVEL = .BKT_ADDR[BKT$B_LEVEL]) EQL 0
    THEN
	IF .IDX_DFN[IDX$B_KEYREF] NEQ 0
	THEN
	    LEVEL = .LEVEL - 1;

    WHILE .REC_ADDR LSSA .EOB
    DO
	BEGIN
	REC_ADDR = RM$REC_OVHD(.LEVEL; REC_SIZE) + .REC_ADDR;
	REC_ADDR = .REC_ADDR + .REC_SIZE;
	END;

    IF .REC_ADDR EQLA .EOB
    THEN
	BEGIN
	STATUS = RMSSUC(SUC);
	IRAB [IRB$B_CACHEFLGS] = 0;
	RETURN .STATUS;
	END;

    ! REC_ADDR did not match where FREESPACE said it should
    !
    RMSERR(IRC)
    END;					! of block BLK

    ! If we got this far there was an error checking something, so release
    ! this bucket and return the error save VBN in the STV. Mark the bucket
    ! invalid.
    RAB[RAB$L_STV] = .BDB[BDB$L_VBN];
    BDB[BDB$V_VAL] = 0;
 
    BEGIN

    GLOBAL REGISTER
	R_REC_ADDR;

    RM$RLSBKT(0);
    END;

    IRAB[IRB$B_CACHEFLGS] = 0;
    RETURN .STATUS;

    END					! of second block defining STATUS
    END;


GLOBAL ROUTINE RM$RLSBKT (FLAGS) : RL$PRESERVE1 =

!++
!
! FUNCTIONAL DESCRIPTION:
!
! This routine releases access to the bucket described by
! the BDB and if a write may be performed (i.e; there is a
! buffer and it's dirty) then the bucket check characters
! are incremented.  Bug check is called if the address sample
! in the buffer does not match the VBN being released.
!
! CALLING SEQUENCE:
!	RM$RLSBKT(FLAGS,BDB)
!
! INPUT PARAMETERS:
!	BDB - The address of the BDB for the bucket
!	flags - The release control flags (see RM0RELEAS)
!
! IMPLICIT INPUTS:
!	None
!
! OUTPUT PARAMETERS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
! ROUTINE VALUE:
!	Internal RMS status code
!
! SIDE EFFECTS:
!	R1,R2,AP Destroyed
!	Bug check called on address sample and VBN mismatch
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RABREG,
	R_BDB_STR;

    LOCAL
	BUCKET	: REF BBLOCK;

    BUILTIN
	TESTBITSC;

    ! Note that BDB's and GBPB's share identical fields in general,
    ! therefore the references to BDB fields may be GBPB's also.
    !

    IF .BDB EQL 0 OR (.BDB[BDB$B_BID] EQL BLB$C_BID)
    THEN RETURN RM$RELEASE(.FLAGS);

    ! If the bucket may be written then update the check characters.
    !

    IF .BDB[BDB$V_VAL]
	AND
	(.BDB[BDB$W_SIZE] NEQ 0)
    THEN
	BEGIN
	BUCKET = .BDB[BDB$L_ADDR];

	! check the address sample for validity
	!

	IF .BUCKET[BKT$W_ADRSAMPLE] NEQU .(BDB[BDB$L_VBN])<0, 16>
	THEN
	    BUG_CHECK;

	IF .BDB[BDB$V_DRT]
	THEN
	    BEGIN
	    LOCAL PTR : REF BBLOCK;
	    PTR = .BDB[BDB$L_BLB_PTR];
	    IF .PTR EQL 0
	    THEN
		BEGIN
		BUCKET[BKT$B_CHECKCHAR] = .BUCKET[BKT$B_CHECKCHAR] + 1;
		(.BUCKET + .BDB[BDB$W_NUMB] - 1)<0, 8> = .BUCKET[BKT$B_CHECKCHAR];
		END
	    ELSE IF .PTR[BLB$V_LOCK]
		THEN
		BEGIN
		BUCKET[BKT$B_CHECKCHAR] = .BUCKET[BKT$B_CHECKCHAR] + 1;
		(.BUCKET + .BDB[BDB$W_NUMB] - 1)<0, 8> = .BUCKET[BKT$B_CHECKCHAR];
		END;
	    END;

	! Use the level in the tree as the cache value of the bucket.
	! If permanence was asked for, give it another boost.
	!

	BDB[BDB$B_CACHE_VAL] = .BUCKET[BKT$B_LEVEL];
	IF TESTBITSC (BDB[BDB$V_PRM])
	THEN
	    BDB[BDB$B_CACHE_VAL] = .BDB[BDB$B_CACHE_VAL] + 1;

	END;

    RETURN RM$RELEASE(.FLAGS);

    END;

END

ELUDOM
