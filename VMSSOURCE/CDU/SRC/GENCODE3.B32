MODULE gencode3		(IDENT='V04-000',
			ADDRESSING_MODE(EXTERNAL=GENERAL))
= BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! Facility:	Command Definition Utility, Table Generator Module 3
!
! Abstract:	This module is one of a few modules that is responsible
!		for generating the blocks that make up the DCL tables.
!		The blocks are generated by traversing the intermediate
!		representation of the CLD file created by the parsing
!		modules.
!
!		It is recommended that you read over the CLITABDEF.SDL file
!		before reading this code.
!
! Environment:	Standard CDU environment.
!
! Author:	Paul C. Anagnostopoulos
! Creation:	11 January 1983
!
! Modifications:
!
!	V04-002	PCG0001		Peter George		06-Dec-1983
!		Add NEG operator.
!
!	V04-001	PCA1025			Paul C. Anagnostopoulos 25-Jul-1983
!		Only qualifiers should be NEGATABLE by default.
!		Change the way in which the CONCAT attribute is determined.
!--


library 'sys$library:lib';
require 'clitabdef';
require 'cdureq';

!	T A B L E   O F   C O N T E N T S
!	---------   ---   ---------------

forward routine
	cdu$generate_entity: novalue,
	cdu$generate_expression: novalue;

!	E X T E R N A L   R E F E R E N C E S
!	---------------   -------------------

external routine
	cdu$generate_path,
	cdu$lookup_child,
	cdu$remember_reference,
	cdu$report_semantic_error,
	lib$get_vm;

external
	cdu$gl_root_node: ref node,
	cdu$gl_table: pointer;

!++
! Description:	This routine is called to generate an entity block for
!		a parameter, qualifier, or type keyword.  The block
!		describes the entity in full detail.
!
! Parameters:	top_node	By reference, the top-level node
!				representing the entity.
!		number		The sequential number of the entity.
!
! Returns:	Nothing.
!
! Notes:
!--

GLOBAL ROUTINE cdu$generate_entity(top_node: ref node,
				   number: long)	: novalue
= BEGIN

local
	status: long,
	entity: pointer,
	variable_ptr: long,
	child: ref node,
	grandchild: ref node,
	definition: ref node,
	concatenate_seen: boolean initial(false);


! Allocate space for the largest possible entity block.

allocate_largest_table_block(ent_k_length + ent_k_max_name + ent_k_max_label +
			     ent_k_max_prompt + ent_k_max_defval, entity);

! Begin by initializing the entity block.  This includes any fields that
! don't depend on the intermediate representation.

entity[ent_b_type] = block_k_entity;
entity[ent_b_subtype] =	(selectoneu .top_node[node_w_type] of set
			[node_k_parameter]:	ent_k_parameter;
			[node_k_qualifier]:	ent_k_qualifier;
			[node_k_keyword]:	ent_k_keyword;
			tes);
entity[ent_w_flags] = 0;
if .top_node[node_w_type] eqlu node_k_qualifier then
	entity[ent_v_neg] = true;
entity[ent_w_tro_count] = 3;
entity[ent_l_next] = entity[ent_l_syntax] = entity[ent_l_user_type] = 0;
entity[ent_b_number] = .number;
entity[ent_b_valtype] = ent_k_user_defined;
entity[ent_w_defval] = 0;

! Set up to add information to the variable portion of the block.
! Then add the entity name as an ASCIC string.

variable_ptr = entity[ent_z_variable];
entity[ent_w_name] = .variable_ptr - .entity;
ch$move(1+.top_node[node_b_text_length],top_node[node_b_text_length],
	.variable_ptr);
variable_ptr = .variable_ptr + 1+.top_node[node_b_text_length];

! Now we scan the children of the top-level node in order to collect
! the various attributes of the entity and place them in the entity block.

scan_children(top_node,child,

	! Case on the type of the child.

	case .child[node_w_type] from 0 to node_k_max_type of set
	[node_k_batch]:

		! The BATCH clause simply sets a flag.

		entity[ent_v_batdef] = true;

	[node_k_cliflags]:

		! For the CLIFLAGS clause, we scan the children, each of
		! which specifies a flag to be set.

		scan_children(child,grandchild,

			selectoneu .grandchild[node_w_type] of set
			[node_k_mcrignore]:	entity[ent_v_mcrignore] = true;
			[node_k_mcroptdelim]:	entity[ent_v_mcroptdelim] = true;
			[otherwise]:		cdu$report_semantic_error(msg(cdu$_igncliflag),1,
							.grandchild[node_w_line]);
			tes;
		);

	[node_k_default]:

		! The DEFAULT clause simply sets a flag.

		entity[ent_v_deftrue] = true;

	[node_k_label]:

		! The LABEL clause specifies a symbol by which this entity
		! is to be retrieved.  Add it to the variable portion of
		! the block as an ASCIC string.

		(entity[ent_w_label] = .variable_ptr - .entity;
		ch$move(1+.child[node_b_text_length],child[node_b_text_length],
			.variable_ptr);
		variable_ptr = .variable_ptr + 1+.child[node_b_text_length];);

	[node_k_negatable]:

		! The NEGATABLE clause simply sets a flag.

		entity[ent_v_neg] = true;

	[node_k_nonnegatable]:

		! The NONNEGATABLE clause simply clears a flag.

		entity[ent_v_neg] = false;

	[node_k_placement]:

		! The PLACEMENT clause specifies where the entity can
		! appear on the command line.  The node contains one of
		! three symbols, which have already been checked.  We can
		! just select on the first letter of the symbol.

		selectoneu ch$rchar(child[node_t_text]) of set
		['G']:	(entity[ent_v_verb] = true;
			entity[ent_v_parm] = false;);
		['L']:	(entity[ent_v_verb] = false;
			entity[ent_v_parm] = true;);
		['P']:	entity[ent_v_verb] = entity[ent_v_parm] = true;
		tes;

	[node_k_prompt]:

		! The PROMPT clause specifies a string which is to be used
		! to prompt for a parameter.  It is stored in the variable
		! portion of the block as an ASCIC string.

		(entity[ent_w_prompt] = .variable_ptr - .entity;
		ch$move(1+.child[node_b_text_length],child[node_b_text_length],
			.variable_ptr);
		variable_ptr = .variable_ptr + 1+.child[node_b_text_length];);

	[node_k_syntax]:

		! The SYNTAX clause specifies the name of a syntax
		! definition which is to be used to parse the rest of the
		! command.  Find the syntax definition.

		(definition = cdu$lookup_child(.cdu$gl_root_node,node_k_define_syntax,
				.child[node_b_text_length],child[node_t_text]);

		! Call a routine to remember this reference for later
		! resolution.  Or perhaps we didn't find it.

		if .definition neqa 0 then
			cdu$remember_reference(entity[ent_l_syntax],.definition)
		else
			cdu$report_semantic_error(msg(cdu$_undefsyntax),2,
				.child[node_w_line],child[node_b_text_length]););

	[node_k_value]:

		! The VALUE clause specifies a set of subclauses which
		! define the kind of value this entity can take.  Set
		! the flag that says the entity can have a value.

		(entity[ent_v_val] = true;

		! Scan the nodes that represent the subclauses.

		scan_children(child,grandchild,

			! Determine what to do from the node type.

			selectoneu .grandchild[node_w_type] of set

			[node_k_concatenate]:

				! The CONCATENATE clause simply sets a bit.
				! Remember that we've seen such a clause.

				(entity[ent_v_concat] = true;
				concatenate_seen = true;);

			[node_k_noconcatenate]:

				! And NOCONCATENATE clears it.
				! Remember that we've seen such a clause.

				(entity[ent_v_concat] = false;
				concatenate_seen = true;);

			[node_k_default]:

				! The DEFAULT clause specifies default
				! values which are placed in the variable
				! portion of the block as an ASCIC string.

				(entity[ent_w_defval] = .variable_ptr - .entity;
				ch$move(1+.grandchild[node_b_text_length],grandchild[node_b_text_length],
					.variable_ptr);
				variable_ptr = .variable_ptr + 1+.grandchild[node_b_text_length];);

			[node_k_impcat]:

				! The IMPCAT clause simply sets a flag.

				entity[ent_v_impcat] = true;

			[node_k_list]:

				! The LIST clause simply sets a flag.

				entity[ent_v_list] = true;

			[node_k_required]:

				! The REQUIRED clause simply sets a flag.

				entity[ent_v_valreq] = true;

			[node_k_type_builtin]:

				! The TYPE clause with a builtin type name
				! specifies the class of values this entity
				! can have.  The type name has already been
				! translated to its numeric code, so just
				! move it into the block.

				entity[ent_b_valtype] = ch$rchar(grandchild[node_t_text]);

			[node_k_type_user]:

				! The TYPE clause with a user-defined type
				! name references a type definition.  Find
				! the definition.

				(definition = cdu$lookup_child(.cdu$gl_root_node,node_k_define_type,
					.grandchild[node_b_text_length],grandchild[node_t_text]);

				! Call a routine to remember this reference
				! for later resolution.  Or perhaps we didn't
				! find it.

				if .definition neqa 0 then
					cdu$remember_reference(entity[ent_l_user_type],.definition)
				else
					cdu$report_semantic_error(msg(cdu$_undeftype),2,
						.grandchild[node_w_line],grandchild[node_b_text_length]););

			[otherwise]:

				! Oops, we have some kind of internal error.

				signal(msg(cdu$_intinvnode));
			tes;
		););
			
	[inrange,
	 outrange]:

		! Oops, we have some kind of internal error.

		signal(msg(cdu$_intinvnode));
	tes;
);

! Once we have processed all of the clauses, we need to handle additional
! cases which are implied by the clauses.
!
!	If no [NO]CONCATENATE clause specified, assume same as LIST.
!	For a qualifier, if no PLACEMENT specified assume GLOBAL.
!	If no LABEL specified, use entity name.
!	For a parameter, If no PROMPT specified, use LABEL.

if not .concatenate_seen then
	entity[ent_v_concat] = .entity[ent_v_list];
if .top_node[node_w_type] eqlu node_k_qualifier and
   not .entity[ent_v_verb] and not .entity[ent_v_parm] then (
	entity[ent_v_verb] = true;
	entity[ent_v_parm] = false;
);
if .entity[ent_w_label] eqlu 0 then
	entity[ent_w_label] = .entity[ent_w_name];
if .top_node[node_w_type] eqlu node_k_parameter and 
   .entity[ent_w_prompt] eqlu 0 then
	entity[ent_w_prompt] = .entity[ent_w_label];

! Set the final length of the entity block.

set_table_block_size(.variable_ptr - .entity, entity);

! Place the TRO of the new block in its top-level representation node.

top_node[node_l_code] = .entity - .cdu$gl_table;
return;

END;

!++
! Description:	This routine is called to generate an expression block
!		for a boolean expression.  If the expression contains an
!		operator, then the expression block specifies the operator
!		and its operands.  If the expression is simply a path, then
!		a path expression block is constructed.
!
! Parameters:	definition	By reference, the node that represents the
!				verb or syntax change definition in which
!				the boolean expression appears.
!		top_node	By reference, the top-level node
!				representing the expression.  The TRO of
!				the generated expression block will be
!				stored therein.
!
! Returns:	Nothing.
!
! Notes:
!--

GLOBAL ROUTINE cdu$generate_expression(definition: ref node,
				       top_node: ref node):	novalue
= BEGIN

local
	status: long,
	operand_count: long initial(0),
	expression: pointer,
	child: ref node,
	tro: long;


! If the expression is simply a path, then call a routine to generate the
! path expression block.  That's all we have to do.

if .top_node[node_w_type] eqlu node_k_path then (
	cdu$generate_path(.definition,.top_node);
	return;
);

! The top-level expression node represents an operator.  Count the number of
! children of the node in order to determine how many operands there are.

scan_children(top_node,child,
	increment(operand_count);
);

! Allocate space for an expression block with the appropriate number of
! operands.

allocate_largest_table_block(exp_k_length + .operand_count*4, expression);

! Initialize the header of the expression block.

expression[exp_b_type] = block_k_expression;
expression[exp_b_subtype] =	(selectoneu .top_node[node_w_type] of set
				[node_k_not]:	exp_k_not;
				[node_k_any2]:	exp_k_any2;
				[node_k_and]:	exp_k_and;
				[node_k_or]:	exp_k_or;
				[node_k_neg]:	exp_k_neg;
				tes);
expression[exp_w_flags] = 0;
expression[exp_w_tro_count] = 0;

! Now we scan all of the children again, this time generating expression
! blocks for each of them.  The TROs of these expression blocks are stored
! as the operands of the top-level operator.

begin
bind
	operand_list = expression[exp_l_operand_list]: vector[,long];

scan_children(top_node,child,

	! Generate an expression block for the operand and then store its
	! TRO in the operand list of the top-level operator.

	cdu$generate_expression(.definition,.child);
	operand_list[.expression[exp_w_tro_count]] = .child[node_l_code];
	increment(expression[exp_w_tro_count]);
);
end;

! Set the size of the expression block in its header.

set_table_block_size(exp_k_length + .operand_count*4, expression);

! Store the TRO of the new block in its representing node.

top_node[node_l_code] = .expression - .cdu$gl_table;
return;

END;
END
ELUDOM
