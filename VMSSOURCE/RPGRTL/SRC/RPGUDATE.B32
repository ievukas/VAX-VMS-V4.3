MODULE RPG$UDATE( %TITLE 'Support UDATE, UDAY, UMONTH, UYEAR special words'
		IDENT = '1-002'		! file: RPGUDATE.B32 EDIT:DG1002
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!
!++
! FACILITY:	RPGII SUPPORT
!
! ABSTRACT
!
!	This routine supports the RPG UDATE, UDAY, UMONTH and UYEAR
!	special words.
!
!
! ENVIRONMENT:	Vax-11 User Mode
!
! AUTHOR: Debess Grabazs, CREATION DATE: 25-JAN-1983
!
! MODIFIED BY:
!
! 1-001 - Original. DG 25-JAN-1983
! 1-002 - Take out %ASCID - was making code unsharable. DG 11-Jul-1983
!--

!<BLF/PAGE>

%SBTTL 'Declarations'
!+
! PROLOGUE FILE:
!-

REQUIRE 'RTLIN:RPGPROLOG';			! Switches, PSECTs, macros,
						!  linkages and LIBRARYs

!+
! LINKAGES
!	NONE
!-

!+
! TABLE OF CONTENTS:
!-

FORWARD ROUTINE
	RPG$UDATE : NOVALUE ;

!+
! INCLUDE FILES
!	NONE
!-

!+
! MACROS
!	NONE
!-

!+
! EQUATED SYMBOLS
!	NONE
!-

!+
! EXTERNAL REFERENCES
!-

EXTERNAL ROUTINE
	COB$ACC_DATE,					! Get the current date
	LIB$STOP,					! Stop execution via signalling
	STR$UPCASE;					! Convert string to upper case

EXTERNAL LITERAL
	RPG$_FATINTERR,					! Fatal internal error
	RPG$_INVUDATE;					! Incorrectly specified date

%SBTTL 'RPG$UDATE - Support UDATE, UDAY, UMONTH, UYEAR special words'
GLOBAL ROUTINE RPG$UDATE(
			DAY, 			! Current day
			MONTH, 			! Current month
			YEAR			! Current year
			): NOVALUE=

!
!++
!
! FUNCTIONAL DESCRIPTION
!
!	This routine translates the logical name RPG$UDATE.  If
!	the logical translates, the date specified in the logical
!	name is used; otherwise the current system date is used.
!	The format of the date in RPG$UDATE is dd-mmm-yyyy.  
!	Two character strings representing the day, numeric month 
!	and last two digits of the year are moved into the appropriate 
!	return parameters.
!	This routine is called when an RPGII program has any of the 
!	special words UDATE, UDAY, UMONTH, or UYEAR in it.
!
! CALLING SEQUENCE:
!
!	CALL RPG$UDATE (day.wt.r, month.wt.r, year.wt.r)
!
! FORMAL PARAMETERS:
!
!	day		address of 2 character string to receive
!			current day of the month
!
!	month		address of 2 character string to receive
!			current month number
!
!	year		address of 2 character string to receive
!			current year
!
!
! IMPLICIT INPUTS:
!
!	RPG$UDATE -	logical name which may have the date
!			specified in it
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Errors will be signalled if the date specified in RPG$UDATE
! 	is incorrectly specified or if there is an error in the
!	translation of the logical.
!
!--
!

!<BLF/PAGE>

 
    BEGIN

    LOCAL
	DASH_PTR,					! Pointer to 1st dash
	DEST_DESC: BLOCK [8, BYTE],			! Local desc for call to $TRNLOG
	DIFF,						! Size of year part
	END_PTR,					! Pointer past end of logical name string
	LOG_DESC: BLOCK [8, BYTE],			! Local desc for call to $TRNLOG
	MONTH_FOUND: BYTE INITIAL(0),			! Indicator of valid month
	MONTH_TEXT: VECTOR [3, BYTE],			! Local string for uppercase month
	NAME_LENGTH,					! Length of logical name string
	NAME_TEXT: VECTOR [LNM$C_NAMLENGTH, BYTE],	! Local string for logical name
	RET_STATUS;					! Return status
	
    BIND
	MONTHNAME = UPLIT(
	    'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'),	! Month names

	MONTHNUM = UPLIT(
	    '010203040506070809101112'),		! Month numbers

	P_DASH = UPLIT ('-'),
	P_ZERO = UPLIT ('0');

    !+
    !
    ! Initialize descriptors for call to $TRNLOG.
    !
    !-
    DEST_DESC[DSC$W_LENGTH] = LNM$C_NAMLENGTH;
    DEST_DESC[DSC$B_CLASS] = DSC$K_CLASS_S;
    DEST_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
    DEST_DESC[DSC$A_POINTER] = NAME_TEXT;

    LOG_DESC[DSC$W_LENGTH] = %CHARCOUNT ('RPG$UDATE');
    LOG_DESC[DSC$B_CLASS] = DSC$K_CLASS_S;
    LOG_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
    LOG_DESC[DSC$A_POINTER] = UPLIT ('RPG$UDATE');

    !+
    !
    ! Try to translate the logical name RPG$UDATE.
    !
    !-
    RET_STATUS = $TRNLOG (LOGNAM = LOG_DESC, RSLLEN = NAME_LENGTH, RSLBUF = DEST_DESC);
    IF .RET_STATUS EQL SS$_NORMAL
    THEN
	!+
	!
	! Logical name translated - use date specified ('dd-mmm-yyyy').
	!
	!-
	BEGIN						! Logical translated

	IF CH$FAIL (DASH_PTR = CH$FIND_CH (		! Find first dash in date
				2,			! Should be in 2nd or 3rd
				.DEST_DESC[DSC$A_POINTER]+1, 	! position only
				%C'-'))
	THEN
	    LIB$STOP (RPG$_INVUDATE)
	ELSE
	    !+
	    !
	    ! Found first dash, now process day part of date.
	    !
	    !-
	    BEGIN					! Found 1st dash

	    LOCAL
		DEST2_DESC: BLOCK [8, BYTE];		! Local desc for call to STR$UPCASE

	    IF CH$DIFF (.DASH_PTR, .DEST_DESC[DSC$A_POINTER]) EQL %CHARCOUNT ('d')
	    THEN
		!+
		!
		! Day part is only one character, 
		! so must pad with a leading zero.
		!
		!-
		BEGIN

		CH$MOVE (1, P_ZERO, .DAY);
	  	CH$MOVE (1, .DEST_DESC[DSC$A_POINTER], .DAY+1);

		END
	    ELSE
		CH$MOVE (2, .DEST_DESC[DSC$A_POINTER], .DAY);
	    !+
	    !
	    ! Process year part of date.
	    ! DASH_PTR still points to 1st dash (-mmm-yyyy).
	    !
	    !-
	    IF CH$EQL (1, P_DASH, 1, .DASH_PTR+4)
	    THEN 
		!+
		!
		! Found second dash, now determine how 
		! many characters in year part of date.
		!
		!-
		BEGIN					! Found 2nd dash

		END_PTR = .DEST_DESC[DSC$A_POINTER] + .NAME_LENGTH;
		DIFF = CH$DIFF (.END_PTR, .DASH_PTR+5);
		IF .DIFF GTR %CHARCOUNT ('y')
		THEN
		    !+
		    !
		    ! Correctly specified year part (at least 2 chars).
		    !
		    !-
		    CH$MOVE (2, .END_PTR-2, .YEAR)
		ELSE
		    IF .DIFF EQL %CHARCOUNT ('y')
		    THEN
		        BEGIN
		    	!+
		    	!
		    	! Year part is only one character, 
		    	! so must pad with leading zero.
		    	!
		    	!-
		    	CH$MOVE (1, P_ZERO, .YEAR);
		    	CH$MOVE (1, .END_PTR-1, .YEAR+1);

		    	END
		    ELSE
	    		LIB$STOP (RPG$_INVUDATE);

		END					! Found 2nd dash

	    ELSE
	        LIB$STOP (RPG$_INVUDATE);

	    !+
	    !
	    ! Process month part of date.
	    ! DASH_PTR still points to 1st dash (-mmm-yyyy).
	    !
	    !-
	    DEST_DESC[DSC$W_LENGTH] = %CHARCOUNT ('mmm');
	    DEST_DESC[DSC$A_POINTER] = .DASH_PTR + 1;
	    DEST2_DESC[DSC$W_LENGTH] = %CHARCOUNT ('mmm');
    	    DEST2_DESC[DSC$B_CLASS] = DSC$K_CLASS_S;
    	    DEST2_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    DEST2_DESC[DSC$A_POINTER] = MONTH_TEXT;
	    !+
	    ! Change month specified to uppercase for matching.
	    !-
	    IF NOT (STR$UPCASE (DEST2_DESC, DEST_DESC)) 
	    THEN
		LIB$STOP (RPG$_FATINTERR);

    	    INCR I FROM 0 TO 11 DO
	    	BEGIN
		!+
		!
		! Search for character match in table 
		! and convert to numerical equivalent.
		!
		!-
		IF CH$EQL (3, CH$PTR (MONTHNAME, .I*3), 3, .DEST2_DESC[DSC$A_POINTER])
	    	THEN
	    	    BEGIN

		    CH$MOVE (2, CH$PTR (MONTHNUM, .I*2), .MONTH);
		    MONTH_FOUND = 1;
	    	    EXITLOOP;

	    	    END;

		END;
	    !+
	    !
	    ! Make sure a match was found.
	    !
    	    !-
	    IF NOT .MONTH_FOUND
	    THEN
	    	LIB$STOP (RPG$_INVUDATE);

	    END;					! Found 1st dash

	END						! Logical translated
    ELSE
	!+
	!
	! Logical name did not translate - use current system date.
	!
	!-
	BEGIN

	IF .RET_STATUS EQL SS$_NOTRAN
	THEN
	    BEGIN

	    COB$ACC_DATE (DEST_DESC);			! Returns 'yymmdd'
	    CH$MOVE (%CHARCOUNT ('yy'), .DEST_DESC[DSC$A_POINTER], .YEAR);
	    CH$MOVE (%CHARCOUNT ('mm'), .DEST_DESC[DSC$A_POINTER]+2, .MONTH);
	    CH$MOVE (%CHARCOUNT ('dd'), .DEST_DESC[DSC$A_POINTER]+4, .DAY);

	    END
	ELSE
	    LIB$STOP (.RET_STATUS);

	END;	

    END; 

END ELUDOM
