%TITLE 'Line output (emphasis -- bolding and underlining); overstriking'
MODULE LOEMPH (
		IDENT = 'V04-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Translation from intermediate format to final output.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: K. A. Dawson	 CREATION DATE: December 1983
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	001	KAD00001	Keith Dawson	22-Mar-1983
!
!--

%SBTTL 'Module Level Declarations'

!
! TABLE OF CONTENTS:
!

REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

FORWARD ROUTINE
    bsemph : NOVALUE,
    opemph  : NOVALUE
%IF LN01 %THEN		,
    lnemph : NOVALUE
%FI
%IF DSRPLUS %THEN	,
    vtemph : NOVALUE
%FI
%IF FLIP %THEN		,
    flemph : NOVALUE
%FI
			;

!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI
!
! MACROS:
!
MACRO
    write_emphasis =
	BEGIN
	LOCAL
	    ptr;
	ptr = .work_string[STR$A_POINTER];
	INCR i FROM 1 TO .work_string[STR$H_LENGTH] DO
	    fs_wchar (fra, CH$RCHAR_A(ptr) );
	END
    %;

!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    rintes : UNSIGNED (8);

LITERAL
    max_output_line_length = 250,	! Reasonable maximum length for an output line.
    backspace = %O'10',
    escape = %O'33';

!
! OWN STORAGE:
!
OWN
    work_string : $STR_DESCRIPTOR ( CLASS=DYNAMIC, STRING=(0,0) );

!
! EXTERNAL REFERENCES:
!

EXTERNAL
    fra : fixed_string,
    outopt : VECTOR [outopt_size],
    tsf : tsf_definition;

EXTERNAL ROUTINE
    clh,	erms;

%SBTTL 'BSEMPH -- do emphasis by backspacing'
GLOBAL ROUTINE BSEMPH 
    ( character
    , italics
    , adr_emphasis_bits
    , overstrike_count
    , overstrike_char
    , overstrike_seq
    , pass_cntr
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	BSEMPH handles emphasis -- bolding and underlining -- if the
!	user said /BACKSPACE on the command line.
!
! FORMAL PARAMETERS:
!
!	character	is the current character to be output (emphasized).
!	italics		Not used by this routine -- passed for conformance only.
!	adr_emphasis_bits Address of a word containing information on current-
!			character and previous-character bold and underline.
!	overstrike_count Number of characters in an overstrike sequence.
!	overstrike_char	The character with which to overstrike the previous one.
!	overstrike_seq	CH$PTR to the start of an overstrike sequence.
!	pass_cntr	Count of which pass is happening.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN

    BIND emphasis_bits = .adr_emphasis_bits;

    LOCAL
	count;

    ! Before processing the character, make sure that (1) there will be sufficient space in the 
    ! output buffer, and (2) the output line is not too long for the operating system to handle.
    IF .fs_length (fra) GTR (.fs_maxsize (fra) - 20)	! Need at least 20 characters.
   	OR
	.fs_length (fra) GTR max_output_line_length	! Reasonable output-line maximum length
    THEN
	BEGIN			! Output what's been built up
	clh (clh_out_nocrlf);	! so far and start filling a
	fs_init (fra);		! new buffer
	END;

    IF .emph_current_bold
    THEN
	! Protective code against /BOLD:<ridiculous amount> and
	count = MIN (10, .outopt_bldn + 1) ! stops buffer overflow.
    ELSE
	count = 1;

    ! Repeatedly process the character as many times as it is
    ! to output. In most cases, this is once.  But if the
    ! character is bolded it will be scanned several times.
    INCR i FROM 1 TO .count DO
	BEGIN
	! If bolding, output a backspace before each re-scan
	! of the character.
	IF .i GTR 1
	THEN
	    fs_wchar (fra, backspace);

	! Look for underlining
	IF .emph_current_underline
	THEN
	    BEGIN
	    fs_wchar (fra, .outopt_und_char);

	    ! Don't backspace if underscore is non-spacing.
	    IF NOT .outopt_und_nosp
	    THEN
		fs_wchar (fra, backspace)
	    END;

	! Output the deferred character.
	fs_wchar (fra, .character);

	! Look for overstrike.
	IF .overstrike_count NEQ 0
	THEN
	    BEGIN
	    LOCAL
		temp_seq_ptr;
	    temp_seq_ptr = .overstrike_seq;

	    INCR i FROM 1 TO .overstrike_count DO
		BEGIN
		! Rescan overstrike sequence to take care of
		! multiple overstriking.
		LOCAL
		    x;

		x = CH$RCHAR_A (temp_seq_ptr);	! Point to the 'o';
		x = CH$RCHAR_A (temp_seq_ptr);	! Point to overstrike character
		x = CH$RCHAR_A (temp_seq_ptr);	! Get character, advance
		fs_wchar (fra, backspace);
		fs_wchar (fra, .x);
		END;
	    END
	END
    END;					! End of BSEMPH

%SBTTL 'OPEMPH -- do emphasis by overprinting'
GLOBAL ROUTINE OPEMPH 
    ( character
    , italics
    , adr_emphasis_bits
    , overstrike_count
    , overstrike_char
    , overstrike_seq
    , pass_cntr
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	OPEMPH processes emphasis -- bolding and underlining -- for
!	the normal case in which the user did not say either /BACK, 
!	/DEC_INTERNAL=FLIP, /DEVICE=VT100, or DEVICE=LN01[e].
!
! FORMAL PARAMETERS:
!
!	character	is the current character to be output (emphasized).
!	italics		Not used by this routine -- passed for conformance only.
!	adr_emphasis_bits Address of a word containing information on current-
!			character and previous-character bold and underline.
!	overstrike_count Number of characters in an overstrike sequence 
!			(passed for conformacne only).
!	overstrike_char	The character with which to overstrike the previous one.
!	overstrike_seq	CH$PTR to the start of an overstrike sequence.
!	pass_cntr	Count of which pass is happening.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN

    BIND emphasis_bits = .adr_emphasis_bits;

    SELECT .pass_cntr OF
	SET 

	[pass_setup, pass_bold] :
	    BEGIN
	    ! Generate non-spacing underscore if requested

	    IF (.emph_current_underline
		AND .outopt_und_nosp
		AND NOT .outopt_und_sep)
	    THEN
		IF (.pass_cntr EQL pass_setup) OR .emph_current_bold
		THEN
		    fs_wchar (fra, .outopt_und_char);

	    ! Generate character
	    IF (.pass_cntr EQL pass_setup) OR (.emph_current_bold)
	    THEN
		fs_wchar (fra, .character)
	    ELSE
		fs_wchar (fra, %C' ')
	    END;

	[pass_overstrike, pass_bold_overstrike] :
	    ! Process overstriking. At this point it is only known that this
	    !character is a special character, and that overstriking is being
	    !processed.  It has not yet been determined whether or not this
	    !character is to be overstruck.  Just putting out overstrike_char
	    !will result in NULLs being output if this character is not to be
	    !overstruck, but is none-the-less a special character.  Using MAX
	    !makes sure that NULL never gets output.  This makes an implicit
	    !restriction, i.e., that the user will never try to overstrike 
	    !with a character LSS %C' '. If this is unduly restrictive, MAX can
	    !be replaced with a simple test to see if overstrike_char is NULL 
	    !or not. 

	    IF (.pass_cntr EQL pass_overstrike) OR (.emph_current_bold)
	    THEN
	 	fs_wchar (fra, MAX(%C' ', .overstrike_char))
	    ELSE
		fs_wchar (fra, %C' ');

	[pass_underline] :
	    ! Process underlining.
	    IF .emph_current_underline
	    THEN
		fs_wchar (fra, .outopt_und_char)
	    ELSE
		fs_wchar (fra, %C' ');

	[pass_bold_underline] :
	    ! Process underlining if also bold.
	    IF .emph_current_underline AND .emph_current_bold
	    THEN
		fs_wchar (fra, .outopt_und_char)
	    ELSE
		fs_wchar (fra, %C' ');

	[pass_real_text] :
	    fs_wchar (fra, .character);

	TES;

    END;					! End of OPEMPH

%IF FLIP %THEN
%SBTTL 'FLEMPH -- process emphasized character for FLIP output'
GLOBAL ROUTINE FLEMPH 
    ( character
    , italics
    , adr_emphasis_bits
    , pass_cntr
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	FLEMPH processes emphasis -- bolding and underlining -- for
!	FLIP output (VMS only), if the user said /DEC_INTERNAL:FLIP.
!
! FORMAL PARAMETERS:
!
!	character	is the current character to be output (emphasized).
!			It is -1 if emphasis is to be turned off.
!	italics		Not used by this routine -- passed for conformance only.
!	adr_emphasis_bits Address of a word containing information on current-
!			character and previous-character bold and underline.
!	pass_cntr	Count of which pass is happening.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN

    BIND emphasis_bits = .adr_emphasis_bits;

    IF .character EQL -1
    THEN
	! Turn emphasis off and return.
	BEGIN
	IF .emph_previous_bold
	THEN
	    BEGIN
	    emph_previous_bold = false;
	    fs_wchar (fra, flip$k_end_bold);
	    END;
	IF .emph_previous_underline
	THEN
	    BEGIN
	    emph_previous_underline = false;
	    fs_wchar (fra, flip$k_end_underline);
	    END;
	RETURN;
	END;

    ! This call is a request to turn ON emphasis.
    SELECTONE 1 OF
    SET

    [.emph_previous_bold AND (NOT .emph_current_bold)]:
	BEGIN
	fs_wchar (fra, flip$k_end_bold);
	emph_previous_bold = false;
	END;

    [(NOT .emph_previous_bold) AND .emph_current_bold]:
	BEGIN
	fs_wchar (fra, flip$k_start_bold);
	emph_previous_bold = true;
	END;

    [otherwise]:
	0;

    TES;

    SELECTONE 1 OF
    SET

    [.emph_previous_underline AND (NOT .emph_current_underline)]:
	BEGIN
	fs_wchar (fra, flip$k_end_underline);
	emph_previous_underline = false;
	END;

    [(NOT .emph_previous_underline) AND .emph_current_underline]:
	BEGIN
	fs_wchar (fra, flip$k_start_underline);
	emph_previous_underline = true;
	END;

    [otherwise]:
	0;

    TES;

    !Now output the character to which the emphasis applies
    fs_wchar (fra, .character);

    END;					! End of FLEMPH
%FI

%IF DSRPLUS %THEN
%SBTTL  'VTEMPH -- process emphasized character for VT100 output'
GLOBAL ROUTINE VTEMPH 
    ( character
    , italics
    , adr_emphasis_bits
    , pass_cntr
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	VTEMPH writes the proper escape sequences on the FRA to handle
!	underlining and bolding if the user said /DEC_INTERNAL:VT100.
!
! FORMAL PARAMETERS:
!
!	character	is the current character to be output (emphasized).
!	italics		Not used by this routine -- passed for conformance only.
!			It is -1 if emphasis is to be turned off.
!	adr_emphasis_bits Address of a word containing information on current-
!			character and previous-character bold and underline.
!	pass_cntr	Count of which pass is happening.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN

    BIND emphasis_bits = .adr_emphasis_bits;

    $STR_DESC_INIT (DESCRIPTOR= work_string, CLASS=DYNAMIC);

    ! Before processing the character, make sure that (1) there will be sufficient space in the 
    ! output buffer to turn off emphasis and then turn it back on again, and (2) the output line 
    ! is not too long for the operating system to handle.
    IF .fs_length (fra) GTR (.fs_maxsize (fra) - 20)	! Need at least 20 characters.
   	OR
	.fs_length (fra) GTR max_output_line_length	! Reasonable output-line maximum length
    THEN
	BEGIN
	clh (clh_out_nocrlf);
	fs_init (fra);
	END;

    IF .character EQL -1
    THEN
	! Turn off all emphasis and return.
	BEGIN
	$STR_COPY (TARGET= work_string, STRING= 
	  $STR_CONCAT (%CHAR(escape), '[', '0', 'm' )
		  );
	write_emphasis;

	emph_previous_bold = false;
	emph_previous_underline = false;

	RETURN;
	END;

    ! This call is a request to turn ON emphasis.

    ! If bolding and underlining are the same as for the previous character,
    ! do nothing.  Otherwise, if there is a difference, we have to turn off
    ! everything so we can turn on only the one we want.
    IF (.emph_current_bold NEQ .emph_previous_bold)
	OR
	(.emph_current_underline NEQ .emph_previous_underline)
    THEN
	!Different status for at least one of them.
	BEGIN
	IF .emph_previous_emphasized NEQ 0
	THEN
	    BEGIN
	    ! Disable both of them (unless we're starting from a condition 
	    ! of no emphasis already).
	    $STR_COPY (TARGET= work_string, STRING= 
		$STR_CONCAT (%CHAR(escape), '[', '0', 'm' )
		      );
	    write_emphasis;
	    END;

	! Turn off both history bits. The right ones will get turned on soon.
	emph_previous_bold = false;
	emph_previous_underline = false;

	!Now turn on only the emphasis that's wanted.
	IF .emph_current_underline		!Underlining wanted?
	THEN
	    !Turn on underlining.
	    BEGIN
	    $STR_COPY (TARGET= work_string, STRING= 
		$STR_CONCAT (%CHAR(escape), '[', '4', 'm' )
		      );
	    write_emphasis;

	    !Turn on the history bit for underlining.
	    emph_previous_underline = true;
	    END;
	IF .emph_current_bold			!Bolding wanted?
	THEN
	    !Turn on bolding.
	    BEGIN
	    $STR_COPY (TARGET= work_string, STRING= 
		$STR_CONCAT (%CHAR(escape), '[', '1', 'm' )
		      );
	    write_emphasis;

	    !Turn on the history bit for bolding.
	    emph_previous_bold = true;
	    END;
	END;					!End: turn on appropriate bits

    !Now output the character to which the emphasis applies.
    fs_wchar (fra, .character);

    END;					! End of VTEMPH
%FI

%IF LN01 %THEN
%SBTTL  'LNEMPH -- process emphasized character for LN01 output'
GLOBAL ROUTINE LNEMPH 
    ( character
    , italics
    , adr_emphasis_bits
    , overstrike_count
    , overstrike_char
    , overstrike_seq
    , pass_cntr
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	LNEMPH writes the proper escape sequences on the FRA to handle
!	underlining and bolding if the user said /DEVECE=LN01[e].
!
!	The escape sequences written have the form of a font change:
!
!	  <esc> [ N m
!
!	where N = 12 (text), 13 (bold), 14 (italic), or 15 (bold italic).
!
!	The SGR (select graphic rendition) escape sequences used for 
!	underlining have the same format exactly. N = 24 turns underlining 
!	on, and N = 4 turns it off.
!
! FORMAL PARAMETERS:
!
!	character	is the current character to be output (emphasized).
!			It is -1 if emphasis is to be turned off.
!	italics		is TRUE if real italics (fonts 14 and 15) are to be 
!			used, and FALSE if underlining is to be used.
!	adr_emphasis_bits Address of a word containing information on current-
!			character and previous-character bold and underline.
!	overstrike_count Number of characters in an overstrike sequence.
!	overstrike_char	The character with which to overstrike the previous one.
!	overstrike_seq	Not used by this routine -- passed for conformance only.
!	pass_cntr	Count of which pass is happening.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN

    BIND emphasis_bits = .adr_emphasis_bits;

    LITERAL
	text_font = 12,
	bold_font = 13,
	italic_font = 14,
	bold_italic_font = 15;

    LOCAL
	previous_font,
	new_font,
	underline_sgr;
    !
    ! Initialize.
    !
    previous_font = 0;
    new_font = 0;
    underline_sgr = 0;
    $STR_DESC_INIT (DESCRIPTOR= work_string, CLASS=DYNAMIC);

!**debug
    IF (.pass_cntr EQL pass_overstrike) AND .tsf_ovr
    THEN
	BEGIN
	IF (.overstrike_count NEQ 0)
	THEN
	    fs_wchar (fra, MAX(%C' ', .overstrike_char) )
	ELSE
	    fs_wchar (fra, %C' ');
	RETURN;
	END;
!**end-debug

    ! Before processing the character, make sure that (1) there will be
    ! sufficient space in the output buffer to turn off emphasis and then
    ! turn it back on again, and (2) the output line is not too long for
    ! the operating system to handle. 
    IF .fs_length (fra) GTR (.fs_maxsize (fra) - 20)	! Need at least 20 characters.
   	OR
	.fs_length (fra) GTR max_output_line_length	! Reasonable output-line maximum length
    THEN
	BEGIN
	clh (clh_out_nocrlf);
	fs_init (fra);
	END;
    !
    ! Calculate the font number used for the previous character. (It will be 
    ! used to determine whether any font change is needed.) The calculation
    ! depends on the definition of emph_previous_emphasized (a macro), which 
    ! is a 2-bit field having values 0, 1, 2, or 3. This value is added to the
    ! 'base' font (text_font = 12). If italics are not being used, the font 
    ! number must be decremented by 2. 
    !
    previous_font = .emph_previous_emphasized + text_font;

    IF (.previous_font GEQ italic_font) AND (NOT .italics)
    THEN
	previous_font = .previous_font - 2;

    IF .character EQL -1
    THEN
	! Turn off all emphasis and return.
	BEGIN
	! Reset to text font if not already in that font.
	!
	IF (.previous_font NEQ text_font)
	THEN
	    $STR_COPY (TARGET= work_string, STRING= 
		$STR_CONCAT ( %CHAR(escape)
			    , '['
			    , $STR_ASCII (text_font)
			    , 'm'
			    )
		      );

	! Turn off underlining too if it was on.
	!
	IF (.emph_previous_underline	!Underlining on?
	    AND NOT .italics)		!Really underlining, not italics?
	THEN
	    $STR_APPEND	(TARGET= work_string, STRING= 
		$STR_CONCAT ( %CHAR(escape)
			    , '[24m'
			    )
			);
	write_emphasis;

	emph_previous_bold = false;
	emph_previous_underline = false;

	RETURN;
	END;
!+
! This call is a request to turn on emphasis. Determine what the new font 
! should be. The calculation depends on the definition of emph_curremt_emphasized 
! (a macro), which is a 2-bit field having values 0, 1, 2, or 3. This value is 
! added to the 'base' font (text_font = 12).  If italics are not being used
! the font number must be decremented by 2. 
!-
    new_font = text_font + .emph_current_emphasized;

    IF (.new_font GEQ italic_font) AND (NOT .italics)
    THEN
	new_font = .new_font - 2;

    ! If we are doing underlining (not true italics), then set up the new 
    ! font number to take advantage of the fact that the Underline On and 
    ! Underline Off SGR escape sequences have exactly the same format as a 
    ! font change.
    !
    IF NOT .italics
    THEN
	BEGIN

	IF (.emph_current_underline AND (NOT .emph_previous_underline) )
	THEN
	    underline_sgr = 4;		!Underline On SGR: <esc> [ 4 m

	IF ( (NOT .emph_current_underline) AND .emph_previous_underline )
	THEN
	    underline_sgr = 24;		!Underline Off SGR: <esc> [ 24 m
	END;

    IF (.previous_font NEQ .new_font)
	OR (.underline_sgr NEQ 0)
    THEN
	BEGIN

	$STR_DESC_INIT (DESCRIPTOR= work_string, CLASS=DYNAMIC);

	!
	!Switch to the new font.
	!
	IF .previous_font NEQ .new_font
	THEN
	    $STR_COPY (TARGET= work_string, STRING=
		$STR_CONCAT ( %CHAR(escape)
			    , '['
			    , $STR_ASCII (.new_font)
			    , 'm'
			    )
		      );

	IF .underline_sgr NEQ 0
	THEN
	    $STR_APPEND (TARGET= work_string, STRING=
		$STR_CONCAT ( %CHAR(escape)
			    , '['
			    , $STR_ASCII (.underline_sgr)
			    , 'm'
			    )
			);
	write_emphasis;

	emph_previous_bold = .emph_current_bold;
	emph_previous_underline = .emph_current_underline;

	END;

    !Now output the character to which the emphasis applies
    fs_wchar (fra, .character);

    END;					! End of LNEMPH
%FI

END						! End of module
ELUDOM
