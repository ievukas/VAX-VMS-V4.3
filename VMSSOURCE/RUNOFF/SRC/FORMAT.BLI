%TITLE 'FORMAT - generate formatted output lines'
!<BLF/NOFORMAT>

MODULE format (IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN

!<BLF/FORMAT>
!<BLF/LOWERCASE_USER>
!<BLF/UPPERCASE_KEY>
!<BLF/MACRO>
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!   DSR (Digital Standard RUNOFF) /DSRPLUS DSRTOC/CONTENTS Utility
!
! ABSTRACT: 
!   Generate formatted output lines
!
! ENVIRONMENT:	 Transportable
!
! AUTHOR:	 JPK
!
! CREATION DATE: March 1982
!
! MODIFIED BY:
!
!	005	JPK00008	09-Mar-1983
!		Modified CONTENTS and CAPTION to support new BRN formats,
!		support SEND CONTENTS, /DOUBLE_SPACE, page numbered chapters,
!		guarantee space after section number and to write new 
!		prologue and epilog for RUNOFF output.
!		Modified FORMAT to quote only the RUNOFF flags used by CONTENTS.
!		Modified CNTVMS to fix default for /DOUBLE_SPACE and do more
!		value checking.
!
!	004	JPK00007	14-Feb-1983
!		Global edit of all sources for CONTENTS/DSRTOC:
!		- module names are now consistant with file names
!		- copyright dates have been updated
!		- facility names have been updated
!		- revision history was updated to be consistant with DSR/DSRPLUS
!
!	003	JPK00006	14-Feb-1983
!		Modified CNTVMS, CONTENTS, FORMAT and CNTVMSMSG to generate
!		error messages for DSRTOC or CONTENTS depending on the 
!		compiletime variant for DSRPLUS (/VARIANT:8192)
!
!	002	JPK00004	11-Feb-1983
!		Changed the global variable name INDENT to LINE_INDENT in 
!		modules CONTENTS, CAPTION, FORMAT and GBLDCL.
!		Removed declarations of PDENTS in modules CNTVMS, CONTENTS,
!		and CAPTION and replaced with a module wide BIND using the
!		new name INDENTS. 
!		Changed handling of INDENTS [1]. It no longer represents the
!		sum of the chapter and title indents.
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    insref : NOVALUE,				! Insert a page reference
    fmttxt : NOVALUE,				! Format and output text
    endwrd : NOVALUE,				! Verify word fits on line
    split : NOVALUE;				! Start new output file for TMS

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';

%IF %BLISS (BLISS32)
%THEN

REQUIRE 'REQ:CNTVMSREQ';

%FI

REQUIRE 'REQ:TOCRTY';				! Table of Contents file formats

REQUIRE 'REQ:CNTCLI';				! Command line information block formats


!
! MACROS:
!

MACRO
    !
    ! Write a character to output line
    !
    write_char (ch) [] =
	BEGIN
	CH$WCHAR_A (ch, lp);
	intlin = .intlin + 1;

	%IF NOT %NULL (%REMAINING)
	%THEN
	    extlin = .extlin + 1;
	%FI

	END
    %,
    !
    ! Write a text literal to the output line
    !
    literal_text (str) =
	BEGIN
	CH$MOVE (%CHARCOUNT (str), CH$PTR (UPLIT (str)), .lp);
	lp = CH$PLUS (.lp, %CHARCOUNT (str));
	intlin = .intlin + %CHARCOUNT (str);
	END
    %,
    !
    ! Pad the output line with blanks
    !
    pad (n_blanks) =
	BEGIN

	IF n_blanks GTR 0
	THEN
	    BEGIN
	    CH$FILL (%C' ', n_blanks, .lp);
	    lp = CH$PLUS (.lp, n_blanks);
	    intlin = .intlin + n_blanks;
	    extlin = .extlin + n_blanks;
	    END;

	END
    %,
    !
    ! Clear the text lines being built up.
    !
    clr_line (_) =
	BEGIN
	lp = CH$PTR (line);
	intlin = 0;
	extlin = 0;
	END
    %,
    !
    ! Insert specified character sequence into file, as is.
    !
    put (str) =
	BEGIN
	$str_copy (string = str, target = tmpstr);
	chrout = .chrout + .tmpstr [str$h_length];
	$xpo_put (iob = tocoob, string = tmpstr);
	!
	! For TMS output, split the output file if it gets too large
	!

	IF .cmdblk [contents$v_tms11] THEN split ();

	END
    %;

!
! EQUATED SYMBOLS:
!

LITERAL
    tms_characters_per_file = 20*512,		! TMS files may be 20 blocks long
    rintes = %O'34' : UNSIGNED (8),
    true = 1,
    false = 0;

!
! OWN STORAGE:
!

OWN 						! Storage for remembering words.
    fileno : INITIAL (0),			! Output file number
    outfile : $str_descriptor (class = dynamic, string = (0,0)), ! Save output filename here
    wrdptr,					! CH$PTR to start of current word.
    extwrd,					! Number of print positions in current word.
    intwrd;					! Number of characters needed to represent current word.

!
! EXTERNAL REFERENCES:
!

EXTERNAL
    cmdblk : $contents_cmd,			! Command line information block
    tocoob : $xpo_iob (),			! IOB for the resulting .RNT file
    chrout,					! Number of characters written to output file
    tmpstr : $str_descriptor (),		! For temporary strings
    hl_n,					! "n" from latest .HL n command
    major,					! Major record type code
    lp,						! CH$PTR along line being built up
    intlin,					! Number of characters needed to represent text
    extlin,					! Number of resulting print positions
    line : VECTOR [CH$ALLOCATION (10000)],	! Buffer in which line is being built up.
    lenpag,					! Number of characters in the converted page number.
    txtpag : VECTOR [CH$ALLOCATION (50)],	! The text (lots of room)
    rmargin,					! Used by ENDWRD for controlling filling lines.
    wrap,					! Wrap long lines around to here.
    line_indent;				! Assume this standard indentation before the text.

%IF %BLISS (BLISS32)
%THEN

EXTERNAL ROUTINE
    open_error;					! File open error handler

%FI

%SBTTL 'INSREF - insert page reference into line'
GLOBAL ROUTINE insref : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine inserts a page reference into the output line
!
! FORMAL PARAMETERS:
!
!	None
!
! IMPLICIT INPUTS:
!
!	cmdblk	- command line information block
!	hl_n	- current header level
!	rmargin	- right margin
!	extlin	- external line length
!
! IMPLICIT OUTPUTS:
!
!	wrap	- line wrap point
!	rmargin	- right margin
!		- variables related to output line
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!--

    BEGIN

    IF .hl_n GTR .cmdblk [contents$g_page_level] THEN RETURN;

    IF .cmdblk [contents$v_tms11]
    THEN
	write_char (%C'@')
    ELSE
	BEGIN
	!
	! OK. User wants this header to show dots and page number.
	! Insert a sequence of alternating dots and spaces out to where the
	! page number will go.
	! First force a space to follow the last text character.
	!

	IF .extlin LSS .rmargin
	THEN
	    BEGIN
	    !
	    ! The position of the last character of the text
	    ! is not inside where the page number goes.
	    !
	    write_char (%C' ', counts_visually);
	    END;

	!
	! Now start inserting the dot-space sequence
	!

	INCR i FROM (.extlin + 1) TO .rmargin DO
	    !
	    ! Insert a space for odd columns, a dot for even ones.
	    !
	    write_char ((IF .i THEN %C' ' ELSE CH$RCHAR (CH$PTR (cmdblk [contents$c_leader_char]))),
		counts_visually);

	!
	! Insert a space following the sequence so there's
	! no dot just before the page number.
	!
	write_char (%C' ', counts_visually);
	!
	! Before putting the page number through the standard text processor,
	! set the wrap point in case the page number doesn't fit.
	!
	wrap = .cmdblk [contents$g_page_width] - .lenpag;
	!
	! Allow the page number to cause the line to be
	! filled out to the full page width.
	!
	rmargin = .cmdblk [contents$g_page_width];
	END;

    !
    ! Finally, insert the generated page number onto the line
    !
    fmttxt (.lenpag, CH$PTR (txtpag));

    IF .cmdblk [contents$v_tms11] THEN write_char (%C'@');

    END;

%SBTTL 'FMTTXT - scan and format text'
GLOBAL ROUTINE fmttxt (txt_len, txt_ptr) : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine scans the input text and formats it into line.
!
!	Special characters are quoted for RUNOFF output or changed to the
!	appropriate sequence for TMS unless the text is from a .SEND TOC.
!
!	Special characters from .SEND TOC are inserted as is for RUNOFF.
!
!	Special characters from .SEND TOC are inserted as is for TMS
!	with the exception of '>' which is inserted as '>', the line
!	is broken, and a new line is started with '<'. This is because
!	.SEND TOC text is inserted as a comment for TMS.
!
!	Emphasis in the input string is kept if emphasis is enabled
!	for the current header level or if the text is from a .SEND TOC.
!
! FORMAL PARAMETERS:
!
!	txt_len		- length of input string
!	txt_ptr		- CH$PTR to input string
!
! IMPLICIT INPUTS:
!
!	cmdblk		- command line information block
!	major		- type of text being processed
!	hl_n		- header level number being processed
!	lp		- CH$PTR to next character position in line
!	intlin		- internal line length
!	extlin		- external line length
!	rmargin		- indicates how far to the right text may be inserted
!	wrap		- column to wrap a broken line to
!	line_indent	- number of columns which line is indented
!
! IMPLICIT OUTPUTS:
!
!	lp		- points to next available character position in line
!	intlin		- reflects new internal length
!	extlin		- reflects new external length
!	wrdptr		- set to initial value of lp
!	intwrd		- set to initial value of intlin
!	extwrd		- set to initial value of extlin
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!--

    BEGIN

    LOCAL
	keep_bold,
	keep_und,
	doing_bold,
	doing_und,
	bold_char,
	und_char,
	open_quote,
	ptr,
	len;

    !
    ! Keep bolding if .SEND TOC and user said /BOLD=anything
    ! or if the hl value of the text LEQ the user specified level.
    !
    IF ((.major EQL maj_send) AND (.cmdblk [contents$g_bold] NEQ -1)) 
	OR (.hl_n LEQ .cmdblk [contents$g_bold])
    THEN
	keep_bold = true
    ELSE
	keep_bold = false;

    !
    ! Keep underlining if .SEND TOC and user said /UNDERLINE=anything
    ! or if the hl value of the text LEQ the user specified level.
    !
    IF ((.major EQL maj_send) AND (.cmdblk [contents$g_underline] NEQ -1)) 
	OR (.hl_n LEQ .cmdblk [contents$g_underline])
    THEN
	keep_und = true
    ELSE
	keep_und = false;

    len = .txt_len;				! Copy string length
    ptr = .txt_ptr;				! and pointer
    wrdptr = .lp;				! Initialize word pointer
    intwrd = .intlin;				! internal word length
    extwrd = .extlin;				! external word length
    doing_bold = false;				! Bold is off
    doing_und = false;				! as is underlining
    bold_char = false;				! Character is not bold
    und_char = false;				! or underlined
    open_quote = true;				! First '"' we see is an open quote

    WHILE .len GTR 0 DO 			! Process whole input string
	BEGIN

	LOCAL
	    ch;

	ch = CH$RCHAR_A (ptr);			! Get next character
	len = .len - 1;				! one less character

	IF .ch EQL rintes
	THEN
	    BEGIN
	    !
	    ! RUNOFF internal escape sequence
	    !

	    LOCAL
		fnc,
		op;

	    fnc = CH$RCHAR_A (ptr);		! Get function
	    op = CH$RCHAR_A (ptr);		! and operand
	    len = .len - 2;			! 2 less characters to process

	    SELECTONE .fnc OF
		SET

		[%C'O'] :
		    BEGIN
		    !
		    ! Overstrike
		    !
		    write_char (.op, counts_visually);

		    IF .cmdblk [contents$v_tms11]
		    THEN
			BEGIN
			!
			! Overstriking is frowned upon for TMS
			!
%IF %BLISS (BLISS32)
%THEN
			SIGNAL (contents$_overstrk, 0, contents$_textd, 2, .txt_len, .txt_ptr);
%ELSE
			$xpo_put_msg (severity = warning,
			    string = 'the following line contains an overstrike sequence',
			    string = (.txt_len, .txt_ptr));
%FI

			literal_text ('[ec]');
			END
		    ELSE
			write_char (%C'%');

		    END;

		[%C'B'] :
		    !
		    ! Bold next character if keeping bold
		    !
		    bold_char = (IF .keep_bold THEN true ELSE false);

		[%C'U'] :
		    !
		    ! Underline next character if keeping underlining
		    !
		    und_char = (IF .keep_und THEN true ELSE false);

		[OTHERWISE] :
		    !
		    ! Unknown sequence - do nothing
		    !
		;
		TES;

	    END
	ELSE
	    BEGIN
	    !
	    ! A 'normal' character
	    !

	    IF NOT .bold_char
	    THEN
		BEGIN
		!
		! Do not bold this character
		!

		IF .doing_bold AND (.ch NEQ %C' ')
		THEN
		    BEGIN
		    !
		    ! Bold is turned on and the current character is non-blank
		    ! Turn off bold
		    !

		    IF .cmdblk [contents$v_tms11] THEN literal_text ('[fr') ELSE literal_text ('\*');

		    IF .doing_und
		    THEN
			BEGIN
			!
			! Must turn underlining off too on since both bold
			! and underline use the same termination sequence
			!

			IF .cmdblk [contents$v_tms11] THEN literal_text ('fr') ELSE literal_text ('\&');

			IF .und_char
			THEN
			    BEGIN
			    !
			    ! This character is underlined
			    ! Turn underlining back on.
			    !

			    IF .cmdblk [contents$v_tms11] THEN literal_text ('fi') ELSE literal_text ('^&');

			    END
			ELSE
			    !
			    ! Character is not underlined
			    ! Note that we've turned off underlining
			    !
			    doing_und = false;

			END;

		    IF .cmdblk [contents$v_tms11] THEN write_char (%C']');

		    doing_bold = false;
		    END;

		END
	    ELSE
		BEGIN
		!
		! Bold next character
		!

		IF NOT .doing_bold
		THEN
		    BEGIN
		    !
		    ! Turn on bolding
		    !

		    IF .cmdblk [contents$v_tms11] THEN literal_text ('[fb]') ELSE literal_text ('^*');

		    doing_bold = true;
		    END;

		bold_char = false;		! Reset bold character flag
		END;

	    IF NOT .und_char
	    THEN
		BEGIN
		!
		! Do not underline this character
		!

		IF .doing_und AND (.ch NEQ %C' ')
		THEN
		    BEGIN
		    !
		    ! Underlining is turned on and the current character is
		    ! non-blank. Turn off underlining.
		    !

		    IF .cmdblk [contents$v_tms11] THEN literal_text ('[fr') ELSE literal_text ('\&');

		    IF .cmdblk [contents$v_tms11]
		    THEN
			BEGIN
			!
			! If bolding is on, turn it off and back on since
			! both bold and underline user the same terminators
			!

			IF .doing_bold THEN literal_text ('frfb');

			write_char (%C']');
			END;

		    doing_und = false;
		    END;

		END
	    ELSE
		BEGIN
		!
		! Underline next character
		!

		IF NOT .doing_und
		THEN
		    BEGIN
		    !
		    ! Turn on underlining
		    !

		    IF .cmdblk [contents$v_tms11] THEN literal_text ('[fi]') ELSE literal_text ('^&');

		    doing_und = true;
		    END;

		und_char = false;		! Reset flag
		END;

	    SELECTONE true OF
		SET

		[.ch EQL %C' '] :
		    endwrd (true);

		[.ch EQL %C'>'] :
		    BEGIN

		    IF .major EQL maj_send
		    THEN
			BEGIN
			write_char (.ch, counts_visually);

			IF .cmdblk [contents$v_tms11]
			THEN
			    BEGIN
			    !
			    ! For TMS, a '>' in a SEND TOC starts a new line
			    !
			    put ((.intlin, CH$PTR (line)));
			    clr_line ();
			    write_char (%C'<');
			    wrdptr = .lp;
			    extwrd = .extlin;
			    intwrd = .intlin;
			    END;

			END
		    ELSE
			BEGIN

			IF .cmdblk [contents$v_tms11]
			THEN
			    literal_text ('+z')
			ELSE
			    write_char (.ch, counts_visually);

			END;

		    END;

		[(.ch LSS %C' ') OR (.ch GTR %O'176')] :
		    BEGIN
		    !
		    ! A control character
		    !

		    IF .cmdblk [contents$v_tms11]
		    THEN
			BEGIN
			!
			! Control characters are ignored for TMS output
			!
%IF %BLISS (BLISS32)
%THEN
			SIGNAL (contents$_ctrlchar, 0, contents$_textd, 2, .txt_len, .txt_ptr);
%ELSE
			$xpo_put_msg (severity = warning,
			    string = 'the following line contains control characters which were ignored',
			    string = (.txt_len, .txt_ptr));
%FI

			END
		    ELSE
			BEGIN
			!
			! For RUNOFF output
			!
			write_char (%C'_');	! Quote the character
			write_char (.ch);	! Write the character itself

			IF .ch EQL %O'10'
			THEN 			! Backspace shortens the external length
			    extlin = .extlin - 1;

			END;

		    END;

		[OTHERWISE] :
		    BEGIN
		    !
		    ! For every thing else...
		    !

		    IF .major EQL maj_send
		    THEN
			BEGIN
			!
			! Just write the character for .SEND TOC
			!
			write_char (.ch, counts_visually);
			END
		    ELSE
			BEGIN
			!
			! Check for special characters
			!

			IF .cmdblk [contents$v_tms11]
			THEN
			    BEGIN
			    !
			    ! For TMS...
			    !

			    SELECTONE .ch OF
				SET

				[%C'_'] :
				    literal_text ('*n10*');

				[%C'-'] :
				    literal_text ('+n');

				[%C'*'] :
				    literal_text ('+a');

				[%C'='] :
				    literal_text ('+e');

				[%C'+'] :
				    literal_text ('+p');

				[%C'\'] :
				    literal_text ('+s');

				[%C'@'] :
				    literal_text ('+t');

				[%C'/'] :
				    literal_text ('+.');

				[%C'|'] :
				    literal_text ('+v');

				[%C'{'] :
				    literal_text ('+w');

				[%C'}'] :
				    literal_text ('+x');

				[%C'<'] :
				    literal_text ('+y');

				[%C'['] :
				    literal_text ('+(');

				[%C']'] :
				    literal_text ('+)');

				[%C'"'] :
				    BEGIN

				    IF .open_quote
				    THEN
					BEGIN
					!
					! Opening quote of quoted string
					!
					literal_text ('""');
					open_quote = false;	! Next quote is not an open quote
					END
				    ELSE
					BEGIN
					!
					! Closing quote
					!
					literal_text ('''''');
					open_quote = true;	! Next quote is open quote
					END;

				    END;

				[OTHERWISE] :
				    !
				    ! A real normal character
				    !
				    write_char (.ch, counts_visually);
				TES;

			    END
			ELSE
			    BEGIN
			    !
			    ! For RUNOFF
			    !

			    IF (.ch EQL %C'_')		! ACCEPT flag
				OR (.ch EQL %C'*')	! BOLD flag
				OR (.ch EQL %C'!')	! COMMENT flag
				OR (.ch EQL %C'.')	! CONTROL flag
				OR (.ch EQL %C'\')	! LOWERCASE flag
				OR (.ch EQL %C'%')	! OVERSTRIKE flag
				OR (.ch EQL %C'&')	! UNDERLINE flag
				OR (.ch EQL %C'^')	! UPPERCASE flag
			    THEN
				!
				! A RUNOFF flag. Quote it.
				!
				write_char (%C'_');

			    write_char (.ch, counts_visually);
			    END;

			END;

		    END;
		TES;

	    END;

	END;

    endwrd (false);				! Check to see if word fits

    IF .cmdblk [contents$v_tms11]
    THEN
	BEGIN

	IF .doing_bold OR .doing_und
	THEN
	    BEGIN
	    !
	    ! Turn off one of them.
	    !
	    literal_text ('[fr');
	    !
	    ! If doing both bold and underline, turn off the other.
	    !

	    IF .doing_bold AND .doing_und THEN literal_text ('fr');

	    write_char (%C']');
	    END;

	IF NOT .open_quote
	THEN
	    !
	    ! Missing a close quote
	    !
%IF %BLISS (BLISS32)
%THEN
	    SIGNAL (contents$_closequot, 0, contents$_textd, 2, .txt_len, .txt_ptr);
%ELSE
	    $xpo_put_msg (severity = warning, 
		string = 'the following text is missing a close quote',
		string = (.txt_len, .txt_ptr));
%FI

	END
    ELSE
	BEGIN
	!
	! For RUNOFF
	!

	IF .doing_bold THEN literal_text ('\*'); ! Turn off bolding

	IF .doing_und THEN literal_text ('\&');	! Turn off underlining

	END;

    END;

%SBTTL 'ENDWRD - verify word fits on line'
ROUTINE endwrd (space) : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	ENDWRD is called when a space is about to be output. For RUNOFF,
!	it makes sure that the word that the space ends fits on the the line.
!	If it doesn't, it wraps the line.
!
! FORMAL PARAMETERS:
!
!	space		- true if a space is to be generated
!
! IMPLICIT INPUTS:
!
!	cmdblk		- command line information block
!	rmargin		- indicates how far to the right this word can extend.
!	line_indent	- number of columns of indentation
!	wrap		- first column to start new line in
!	wrdptr		- pointer to beginning of word
!	extwrd		- external length of line not including word
!	intwrd		- internal length of line not including word
!
! IMPLICIT OUTPUTS:
!
!	wrdptr		- points to the end of the current word
!	extwrd		- new external line length
!	intwrd		- new internal line length
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    IF (.extlin GTR .rmargin) AND ( NOT .cmdblk [contents$v_tms11])
    THEN
	BEGIN
	!
	! The word that this space terminates does not fit.  Wrap the line.
	! First determine the length of the word just ended.
	! Note that WORD_xxxxx were set at the beginning of the word being
	! terminated, while the normal counters have been updated ever since.
	!
	extwrd = .extlin - .extwrd;
	intwrd = .intlin - .intwrd;
	!
	! Now adjust the current line lengths before outputting the line
	!
	extlin = .extlin - .extwrd;
	intlin = .intlin - .intwrd;
	!
	! Before outputting the line that is to be wrapped, make sure that
	! at least two lines are still available on the page.  This avoids
	! having the first part of the text on one page and the last part
	! of it on another page.
	!
	put ('.TEST PAGE 2');
	!
	! And now output the line, up to but not including the word that
	! this space terminates.
	!
	put ((.intlin, CH$PTR (line)));
	clr_line ();
	!
	! Add sufficient spaces to align the wrapped word with the first
	! character of the line that was just terminated.
	!
	pad ((.wrap - .line_indent));
	!
	! Adjust the external line length.
	! It really represents .line_indent additional characters.
	!
	extlin = .extlin + .line_indent;
	!
	! At this point the word that would have overflowed the line is
	! sitting out in limbo. But, we know its length and where it is.
	! Move it to the left so that it's aligned properly.
	!

	INCR i FROM 1 TO .intwrd DO
	    CH$WCHAR_A (CH$RCHAR_A (wrdptr), lp);

	!
	! And finally, update the counters that were bypassed in the move
	!
	extlin = .extlin + .extwrd;
	intlin = .intlin + .intwrd;
	END;

    IF .space THEN write_char (%C' ', counts_visually);

    !
    ! Remember current lengths for use the next time around.
    !
    extwrd = .extlin;
    intwrd = .intlin;
    wrdptr = .lp;
    END;					! End of endwrd

%SBTTL 'SPLIT - start new output file for tms if necessary'
GLOBAL ROUTINE split : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks to see if the TMS output must be split
!	to another output file. This is necessary to prevent long
!	galleys which could jam the typesetter.
!
! FORMAL PARAMETERS:
!
!	None
!
! IMPLICIT INPUTS:
!
!	chrout - number of characters written to the current output file.
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!--

    BEGIN

    IF .chrout GEQ tms_characters_per_file
    THEN
	BEGIN
	!
	! Must start a new output file
	!

	LOCAL
	    name_len,
	    spec_blk : $xpo_spec_block;

	IF .outfile [str$h_length] EQL 0
	THEN
	    !
	    ! Save current output file name
	    !
	    $str_copy (string = tocoob [iob$t_resultant], target = outfile);

	!
	! Write terminator to current file and close it
	!
	$xpo_put (iob = tocoob, string = '*cfini*');
	$xpo_close (iob = tocoob);
	!
	! Compute new file name
	!
	$xpo_parse_spec (file_spec = outfile, spec_block = spec_blk);
	name_len = (IF .spec_blk [xpo$h_file_name] GEQ 6 THEN 6 ELSE .spec_blk [xpo$h_file_name]);
	fileno = .fileno + 1;
	!
	! Initialize IOB, open new file and reset character count
	!
	$xpo_iob_init (iob = tocoob);
	$xpo_open (iob = tocoob, options = output, default = outfile,
	    file_spec = $str_concat ((.name_len, .spec_blk [xpo$a_file_name]),
		$str_ascii (.fileno, UNSIGNED, leading_zero, length = 3))
		    %IF %BLISS (BLISS32) %THEN , failure = open_error %FI
	);
	chrout = 0;

	!
	! Tell user about new file
	!
%IF %BLISS (BLISS32)
%THEN
	SIGNAL (contents$_tms11, 1, tocoob [iob$t_resultant]);
%ELSE
	$xpo_put_msg (severity = success,
	    string = $str_concat ('output file full - continuing with file ''',
		tocoob [iob$t_resultant], ''''));
%FI

	!
	! Write file prologue
	!
	put ('*start*');
	put ('*cinit*');
	END;

    END;

END						! End of module
ELUDOM
