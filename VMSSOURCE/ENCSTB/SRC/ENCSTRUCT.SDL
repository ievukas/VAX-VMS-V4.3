{ File: ENCSTRUCT.SDL	Version: 'V04-000'

MODULE $ENCSTRDEF;	/* Definitions for Data Encryption Facility structures

{
{****************************************************************************
{*									    *
{*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
{*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
{*  ALL RIGHTS RESERVED.						    *
{* 									    *
{*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
{*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
{*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
{*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
{*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
{*  TRANSFERRED.							    *
{* 									    *
{*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
{*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
{*  CORPORATION.							    *
{* 									    *
{*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
{*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
{* 									    *
{*									    *
{****************************************************************************
{

{++
{ FACILITY:
{   VAX/VMS Data Encryption Services
{
{ ABSTRACT:
{   This module defines the internal structures, function codes, and
{	offsets for all interfaces of the facility.
{
{ ENVIRONMENT:
{   VAX/VMS User mode.
{
{ AUTHOR: J. Eric Pollack, CREATION DATE: 31-Dec-1982
{
{ MODIFIED BY:
{
{	V01-002 JEP010		J. Eric Pollack		1-July-1984
{		Add JOB qualifier for key definition in support
{		of new logical name directives for key storage
{
{	V01-001	JEP0004		J. Eric Pollack		1-Aug-1983
{		Remove supervisor mode references.
{
{	V01-002 JEP0005		J. Eric Pollack		31-Aug-1983
{		Add structures for file encryption
{--


/*
/* -- Encryption primitive call function code
/*
CONSTANT (
    	 FNC$INIT		/* initalize function
    	,FNC$ENCR		/* encrypt data function
    	,FNC$DECR		/* decrypt data function
    	,FNC$FINI		/* finalize function
    	) EQUALS 1 INCREMENT 1 PREFIX ENCRYPT$ ;
CONSTANT (
    	 FNC_INIT		/* initalize function
    	,FNC_ENCR		/* encrypt data function
    	,FNC_DECR		/* decrypt data function
    	,FNC_FINI		/* finalize function
    	) EQUALS 1*1 INCREMENT 1*1 PREFIX ENCRYPT$ ;

/*
/* structure of algorithm select mask
/*
aggregate ALGMSK structure prefix ENCRYPT$;
	ALGO bitfield length 8 mask;
	SUBM bitfield length 8 mask;
    	FLG1 bitfield length 8 mask;
    	FLG2 bitfield length 8 mask;
	end;

/*
/* ALGO field --- algorithm selector
/*
CONSTANT (
	ALG$DES			/* Data Encryption Standard
	,ALG$RSA		/* RSA Algorithm (not implemented)
	,ALG$NUL		/* NULL Algorithm (not implemented)
	,ALG$VPW		/* VAX/VMS Password Algorithm (not implemented)
	,ALG$ALC		/* ALC style Algorithm
	) EQUALS 1 INCREMENT 1 PREFIX ENCRYPT$ ;

CONSTANT (
	ALG_DES
	,ALG_RSA
	,ALG_NUL
	,ALG_VPW
	,ALG_ALC		/* ALC style Algorithm
	) EQUALS 1 INCREMENT 1 PREFIX ENCRYPT$ ;

/*
/* Contents of SUBM field -- DES algorithm operating sub-modes
/*
CONSTANT (
    	DES$ECB			/* electronic code book
	,DES$CBC		/* cypher block chaining
	,DES$CFB		/* cypher feedback
	,DES$DAC		/* authentication mode based on CBC
	) EQUALS 1 INCREMENT 1 PREFIX ENCRYPT$ ;
CONSTANT (
    	DES_ECB			/* electronic code book
	,DES_CBC		/* cypher block chaining
	,DES_CFB		/* cypher feedback
	,DES_DAC		/* authentication mode based on CBC
	) EQUALS 1*256 INCREMENT 1*256 PREFIX ENCRYPT$ ;
/*
/* Contents of FLG1 field -- Algorithm specific Flag # 1
/*
aggregate FLG1$BITS structure fill prefix ENCRYPT$;
    	FLG1$OFFSET bitfield mask; /* bit offset to flag 1 field
        end;
aggregate FLG1_BITS structure fill prefix ENCRYPT$;
    	notused1 bitfield length 16 fill; /* start with 3rd byte
    	FLG1_OFFSET bitfield mask; 	/* bit offset to flag 1 field
        end;

constant ENCRYPT$K_DESCFBS_8 equals 8@16 ; /* cypherfeedback size

/*
/* CONTENTS OF FLG2 FIELD -- ALGORITHM SPECIFIC FLAG # 2
/*
aggregate FLG2$BITS structure fill prefix ENCRYPT$;
    	VFY$PARITY bitfield mask;	/* verify key parity
	XOR$KEYVALUE bitfield mask;	/* compress value to available buffer with XRO
    	end;
aggregate FLG2_BITS structure fill prefix ENCRYPT$;
    	notused2 bitfield length 24 fill ; /* start with 4th byte
    	VFY_PARITY bitfield mask; 	/* verify key parity
	XOR_KEYVALUE bitfield mask; 	/* compress value to available buffer with XRO
    	end;

/*
/* Define masks for encrypt$define_key operations.
/*
aggregate KEY_BITS structure prefix ENCRYPT$;
	KEY_SYSTEM bitfield mask;	/* system 
	KEY_GROUP bitfield mask;	/* group 
	KEY_PROCESS bitfield mask;	/* process 
   	KEY_JOB bitfield mask;		/* job
	avail1 bitfield mask;		/* unused
	KEY_LITERAL bitfield mask;	/* literal key definition, don't compress
	KEY_PARITY bitfield mask;	/* correct key value parity
	end ;
CONSTANT (
	KEY$SYSTEM			/* system
	,KEY$GROUP			/* group
	,KEY$PROCESS			/* process
	,KEY$JOB			/* job
	,avail1				/* unused
	,KEY$LITERAL			/* literal key definition, don't compress
    	,KEY$PARITY			/* verify parity of key value
	) EQUALS 0 INCREMENT 1 PREFIX ENCRYPT$ ;

/*
/* define flags word for encrypt$file operations
/*
aggregate  file_ops structure prefix ENCRYPT$;
	file_encrypt bitfield mask;	/* encrypt/decrypt direction
	file_delete bitfield mask;	/* delete source file after operation
	file_erase bitfield mask;	/* erase source file when deleting
	file_log bitfield mask;		/* log file operation
	file_confirm bitfield mask;	/* confirm file operation before start
	file_statistics bitfield mask;	/* log statistics too
	file_compress bitfield mask;	/* compress input
	end;

/*
/* Context Area common definitions
/*
/* The context area is defined here. The header area is common
/* to all algorithms using the context block with the individual
/* fields overlaid after the header.
/*

aggregate ENCDEF structure prefix ENCRYPT$;

	CHECK longword unsigned;	/* check word to validate structure
	PRIM_EPT address;		/* address of primitive entry point
	USER quadword unsigned;		/* reserved to caller for any use
	OWNER longword unsigned;	/* check word for initalizing routine
	FUNCTION byte unsigned;		/* call function
	fill_8 byte fill;		/* unused mbz
	fill_9 word fill;		/* unused mbz
/*
/* Statistics
/*
	TOTAL_RECORDS longword unsigned;/* statistics: total records 
	TOTAL_BYTES quadword unsigned;	/* statistics: total bytes through stream
	TOTAL_TIME quadword unsigned;	/* statistics: total time in facility
	fill_10 quadword fill;		/* statistics: expansion
/*
/* Current operation information and queued operation listhead
/*
	CUROP_QUEUE quadword;		/* listhead for asynchronous devices(unimplemented)
	CUROP_EFN word unsigned;	/* efn to set at end of current operation
	CUROP_FLAG word unsigned;	/* flags
	CUROP_ASTADD address;		/* address of user ast routine
	CUROP_ASTPRM longword unsigned;	/* user ast parameter
	CUROP_STSADD address;		/* address of user status return block
/*
/* Algorithm control mask
/*
	CONTROL_WORD_U union;
	    CONTROL_WORD_M structure;
		CONTROL_MASK longword unsigned;	/* a longword name for below
		END;
	    CONTROL_WORD_V structure;
    		ALG_NUMBER byte unsigned;	/* algorithm code
		SUB_MODE byte unsigned;		/* algorithm sub mode
    		ALG_FLAG_1 byte unsigned;	/* algorithm flag 1
    		ALG_FLAG_2 byte unsigned;	/* algorithm flag 2
		END;
	END;
	CONTROL_FLAGS longword unsigned; /* algorithm specific flags
/*
/* Algorithm unique extensions to the context area
/*
	ALGORITHM_UNIQUE union;		/* overlay requirements for each algorithm
	    DES_UNIQUE structure;
		DES_INI_VECTOR quadword unsigned; /* DES initalize vector
		DES_KEY_TABLES longword dimension (32); /* DES key schedule
		END;
	    constant DES_CONTEXT equals . ;

	    RSA_UNIQUE structure;	/*
		RSA_DUMMY longword unsigned;	/* filler
		RSA_TABLES quadword unsigned;	/* dummy filler
		END;
	    constant RSA_CONTEXT equals . ;

	    NUL_UNIQUE structure;	/*
		NUL_DUMMY longword unsigned;	/* filler
		NUL_TABLES quadword unsigned;	/* dummy filler
		END;
	    constant NUL_CONTEXT equals . ;

	    VPA_UNIQUE structure;	/*
		VPA_DUMMY longword unsigned;	/* filler
		VPA_TABLES quadword unsigned;	/* dummy filler
		END;
	    constant VPA_CONTEXT equals . ;

	    ALC_UNIQUE structure;	/*
		ALC_SEED longword unsigned;	/* Seed
		END;
	    constant ALC_CONTEXT equals . ;
	END;				/* end of algorithm specific types

end ENCDEF;
/*
/* Define structure for the algorithm name and dispatch table
/*
aggregate ALGTAB structure prefix ENCRYPT$;
	    AGT_CODE byte unsigned;		/* algorithm code
	    fill7 byte fill;			/* fill
	    AGT_CONTEXT_SIZE word unsigned;	/* size of context area required
	    AGT_FLAGS longword unsigned;	/* algorithm submode flags
	    AGT_ENTRY address;			/* address of primitive routine
	    AGT_TEST_ROUTINE address;		/* address of prim test routine
	    AGT_NAME address;			/* address of descriptor
    						/*  containing algorithm name.
end ALGTAB;

/*
/* Define structure for the condition handling facility "enable" vector
/*
aggregate CHFENA structure prefix ENCRYPT$;
	STSARG address;			/* address of status accumulator
	FLAADR address;				/* address of call flags
end CHFENA;
/*
/* Define structure for file encryption generated key vector
/*
aggregate FIL_RECORD structure prefix ENCRYPT$;

	FIL_BUFLEN word unsigned;		/* length of this structure
	FIL_FILEVER word unsigned;		/* file encrypt routine version
	FIL_KEY quadword unsigned;		/* 64-bit data key value
	FIL_IV quadword unsigned;		/* 64-bit initialize vector value
	FIL_ALGCODE longword unsigned;		/* file data encryption algorithm code
	FIL_FLAGS_OVERLAY union fill;
	    FIL_FLAGS longword unsigned;	/* file encryption flags
	    FIL_FLAGS_BITS structure fill;
		FIL_COMPRESSED bitfield mask;	/* file was compressed before enc
	    end FIL_FLAGS_BITS;
	end FIL_FLAGS_OVERLAY;
    	FIL_FILLER byte dimension (256-4-.);	/* filler to pad to 256 bytes
	FIL_CHECKSUM longword unsigned;		/* structure checksum
end FIL_RECORD;
/*
/* Attribute record structure in encrypted data file. The encrypted file
/* attributes are obtained from the input file fab and a chain of xab
/* blocks. The fab attributes are copied into a smaller structure, FABATR,
/* declared below and the xab attributes are copied in toto. 
/*
aggregate ATR_RECORD structure prefix ENCRYPT$;
	FILATR_LENGTH word unsigned;		/* length of file attributes
	fill_60 word fill;			/* unused
	FILATR_OVERLAY union;
	    FILATR longword unsigned;		/* mask of whats present in attrib record
	    FILATR_BITS structure;
		FABATR bitfield mask;		/* fabatr present
		XABALL bitfield mask;		/* xaball present
		XABDAT bitfield mask;		/* xabdat present
		XABFHC bitfield mask;		/* xabfhc present
		XABPRO bitfield mask;		/* xabpro present
		PROACL bitfield mask;		/* xabpro access control list present
		XABSUM bitfield mask;		/* xabsum present
		UNASSIGNED bitfield mask length 32-^;/* unassigned bits
	    end FILATR_BITS;
	end FILATR_OVERLAY;
	ATR_FILLER byte dimension(256-.);	/* filler to pad to 256 bytes
end ATR_RECORD;
/*
/* While other attributes are stored as whole xabs, attributes from the
/* fab are copied to the xab-like structure FAB_ATTRIBUTES.
/*
aggregate FAB_ATTRIBUTES structure prefix FABATR$;
	COD byte unsigned fill;			/* structure code
	BLN byte unsigned;			/* structure length
	fill_50 word fill;			/* spare
	fill_51 longword fill;			/* address of next structure
	ORG byte unsigned ;			/* file organization
	RFM byte unsigned ;			/* record format
	RAT byte unsigned ;			/* record attributes
	FSZ byte unsigned ;			/* vfc header size
    	BKS byte unsigned ;			/* bucket size
	RTV byte unsigned ;			/* retrieval pointer count
    	fill_52 byte dimension (2) fill;	/* spare
	MRS word unsigned ;			/* maximum record size
	GBC word unsigned ;			/* global buffer count
	MRN longword unsigned ;			/* maximum record number
	FOP longword unsigned ;			/* file operations
end FAB_ATTRIBUTES;
/*
/* Define the encrypted file structure version of the current implementation
/*
CONSTANT
	FILE_VERSION equals 1 prefix ENCRYPT$;	/* file encrypt. encrypted
						/* file structure version.
/*
/* Statistics record returned by encrypt$statistics()
/*
aggregate STAT_RECORD structure prefix ENCRYPT$;
/*
/* Format returned for statistics type code = 1
/*
	STAT_TOTAL_RECORDS longword unsigned;/* statistics: total records 
	STAT_TOTAL_BYTES quadword unsigned;	/* statistics: total bytes through stream
	STAT_TOTAL_TIME quadword unsigned;	/* statistics: total time in facility
	STAT_fill_10 quadword fill;		/* statistics: expansion
end STAT_RECORD;

END_MODULE;

