MODULE COM$ASSIGN (%TITLE'Compatibility CALL ASSIGN routine'
		IDENT = '1-007',	! File: COMASSIGN.B32  Edit: sbl1007
		LINKAGE (FORTRAN)	! Call-by reference
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  FORTRAN Compatibility Library
!
! ABSTRACT:
!
!	Assign logical name to unit to be in effect until call CLOSE
!
! ENVIRONMENT:  User Mode - AST re-entrant
!
! AUTHOR:  Thomas N. Hastings, CREATION DATE:  8-Aug-1977
!
! MODIFIED BY:
!
! 	Thomas N. Hastings, 31-Oct-1977: VERSION 0
! [Previous edit history removed.  SBL 1-March-1983]
! 1-001	- Update version number and copyright notice.  JBS 16-NOV-78
! 1-002	- Declare NULLPARAMETER for the new BLISS compiler.  JBS 22-NOV-78
! 1-003	- Change REQUIRE file names from FOR... to OTS...  JBS 07-DEC-78
! 1-004	- Change OTSOPN back to FOROPN and change some OPEN
!	   prefixes to LUB.  JBS 13-DEC-78
! 1-005	- Use 32-bit addresses for externals.  JBS 27-JAN-1979
! 1-006	- Move LIBRARY RTLSTARLE so FOROPN can use its symbols.
!	   JBS 10-APR-1979
! 1-007 - Remove upcasing/blank-stripping logic from OPEN_FNAME, as it hasn't
!	  been needed since VAX/VMS V2.0.  Use prologue file.  SBL 1-Mar-1983
!--


!
! PROLOGUE FILE:
!

REQUIRE 'RTLIN:FORPROLOG';			! FOR$ declarations

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    ASSIGN : NOVALUE,				!  Assign logical name - no prefix
    OPEN_FNAME : NOVALUE;			!  Edit filename string (like OPEN)

!
! MACROS:
!
!    NONE
!
! EQUATED SYMBOLS:
!
!    NONE
!
! OWN STORAGE:
!
!    NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    FOR$$SIGNAL_STO : NOVALUE ADDRESSING_MODE (GENERAL),	! SIGNAL_STOP errors
    FOR$$GET_VM : ADDRESSING_MODE (GENERAL),	! Allocate virtual memory for current unit
    FOR$$FREE_VM : NOVALUE ADDRESSING_MODE (GENERAL),	! deallocate virtual memory for current unit
    FOR$$CB_PUSH : JSB_CB_PUSH NOVALUE ADDRESSING_MODE (GENERAL),
						! Push down current logical unit if any
    						! and allocate LUB/ISB/RAB if not already
    FOR$$CB_POP : JSB_CB_POP NOVALUE ADDRESSING_MODE (GENERAL),	! Pop up current logical unit
    FOR$$ERR_OPECLO : NOVALUE;			! Error handler


GLOBAL ROUTINE ASSIGN (				!  Assign logical name to unit
	LOGICAL_UNIT, 				! Adr. of word containing logical unit
	NAME_ARRAYORDSC, 			! Optional adr of array of ASCIZ cgaracters or adr if descr,
	NAME_COUNT)				! Optional adr. of word containing character count
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Assign filename string to logical unit until CALL CLOSE.
!	Leading, trailing and imbedded spaces are removed.
!	Lowercase is converted to upper case.
!
! FORMAL PARAMETERS:
!
!	LOGICAL_UNIT.rw.r		Adr. of word containing logical unit
!	[NAME_ARRAYORDSC.rt{ra|ds}	Adr. of array of characters or adr. of descriptor of file name
!	[NAME_COUNTrw.r]]		Optional adr. or word containing cont of no. of characters
!					If count is 0, or arg omitted, scan array for null.
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB			Adr. of current LUB/ISB/RAB
!	LUB$A_FAB			Adr. of FAB if assigned to LUB
!
! IMPLICIT OUTPUTS:
!
!	LUB$A_FAB			Set to adr. of allocated FAB
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Allocate LUB/ISB/RAB and FAB  and RMS name block if not already
!	SIGNAL_STOPs the following errors:
!	FOR$_INSVIRMEM = INSUFFICIENT VIRTUAL MEMORY
!	FOR$_UNIALROPE = UNIT ALREADY OPENED
!	OTS$_FATINTERR = FATAL INTERNAL ERROR IN RUN-TIME LIBRARY
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    GLOBAL REGISTER
	CCB = 11 : REF $FOR$CCB_DECL;

    MAP
	LOGICAL_UNIT : REF VECTOR [1, WORD],	! Pass word by-reference
	NAME_COUNT : REF VECTOR [1, WORD];	! Pass word by-reference

    LOCAL
	FAB : REF BLOCK [FAB$K_BLN, BYTE],	! base ptr to FAB
	NAME_DSC_PTR : REF DSC$DESCRIPTOR,	! Pointer to name descriptor - either points to callers
					! descriptor or to LOCAL NAME_DSC if caller passes by reference.
	NAME_DSC : DSC$DESCRIPTOR,		! String descriptor for file name
	L_UNWIND_ACTION : VOLATILE;		! Unwind action for error handler

    ENABLE
	FOR$$ERR_OPECLO (L_UNWIND_ACTION);	! Enable error handler

    !+
    ! Indicate no unwind action until LUB/ISB/RAB successfully pushed down
    !-

    L_UNWIND_ACTION = FOR$K_UNWINDNOP;

    !+
    ! Pushdown I/O system and allocate LUB/ISB/RAB for logical unit if not already allocated
    ! SIGNAL_STOP if any errors.
    ! If no errors, change error UNWIND action to pop LUB/ISB/RAB if an unwind should occur.
    ! On return, CCB points to the current control block
    !-

    FOR$$CB_PUSH (.LOGICAL_UNIT [0], LUB$K_LUN_MIN);
    L_UNWIND_ACTION = FOR$K_UNWINDPOP;

    !+
    ! If unit already opened, SIGNAL_STOP FOR$_UNIALROPE (43 = 'UNIT ALREADY OPENED')
    !-

    IF .CCB [LUB$V_OPENED] THEN $FOR$$SIGNAL_STO (FOR$K_UNIALROPE);

    !+
    ! If filename present, build a descriptor for string
    !-

    IF NOT NULLPARAMETER (2)
    THEN
	BEGIN

	!+
	! Assume NAMEARRAYORDSC is adr. of descriptor (caller using a string expression)
	! Note: the detection of whether a descriptor or not is not completely fool proof.
	!-

	NAME_DSC_PTR = .NAME_ARRAYORDSC;

	IF .NAME_DSC_PTR [DSC$W_LENGTH] GTRU 255 OR .NAME_DSC_PTR [DSC$B_DTYPE] NEQU DSC$K_DTYPE_T OR
	    .NAME_DSC_PTR [DSC$B_CLASS] NEQU DSC$K_CLASS_S
	THEN

	!+
	! NAME_ARRAY really is an array, not a descriptor.
	! Set pointer to LOCAL string descriptor NAME_DSC which will be filled in.
	! Set length from NAME_COUNT if present and not 0, else scan string for null.
	! Set pointer to start of string.
	!-

	    BEGIN
	    NAME_DSC_PTR = NAME_DSC;
	    NAME_DSC [DSC$A_POINTER] = .NAME_ARRAYORDSC;
	    NAME_DSC [DSC$W_LENGTH] = (IF NOT NULLPARAMETER (3) THEN IF .NAME_COUNT [0] NEQ 0 THEN
		    .NAME_COUNT [0] ELSE MINU ((CH$FIND_CH (OPEN$K_STR_MAX, .NAME_ARRAYORDSC, 0) -
			.NAME_ARRAYORDSC), OPEN$K_STR_MAX) ELSE MINU ((CH$FIND_CH (OPEN$K_STR_MAX,
			.NAME_ARRAYORDSC, 0) - .NAME_ARRAYORDSC), OPEN$K_STR_MAX));
	    END;

	!+
	! If FAB not already allocated (no previous CALL FDBSET or CALL ASSIGN) set one up.
	! Clear FAB$B_FNS and FAB$L_FNA to indicate filename string not allocated.
	!_

	IF (FAB = .CCB [LUB$A_FAB]) EQL 0
	THEN
	    BEGIN
	    FAB = FOR$$GET_VM (FAB$K_BLN);
	    CH$FILL (0, FAB$K_BLN, .FAB);
	    CCB [LUB$A_FAB] = .FAB;
	    FAB [FAB$B_BID] = FAB$C_BID;
	    FAB [FAB$B_BLN] = FAB$K_BLN;
	    END
	ELSE

	!+
	! FAB already setup and a filename string already present (previous CALL ASSIGN) deallocate it.
	!-

	    BEGIN

	    IF .FAB [FAB$L_FNA] NEQA 0
	    THEN
		BEGIN
		FOR$$FREE_VM (.FAB [FAB$B_FNS], .FAB [FAB$L_FNA]);
		FAB [FAB$B_FNS] = 0;
		FAB [FAB$L_FNA] = 0;
		END;

	    END;

	!+
	! Copy string from user to dynamically allocated area
	! and set FAB to point to string.  Strip out leading, embedded and trailing spaces.
	! Convert lower case to upper case.  OPEN_FNAME expects FAB to be already allocatted
	! with no filename allocated.
	!-

	OPEN_FNAME (.NAME_DSC_PTR, .FAB);
	END;

    !+
    ! Pop LUB/ISB/RAB to previous if any.
    !-

    FOR$$CB_POP ();
    RETURN 					! return to caller leaving FAB allocated.
    END;


ROUTINE OPEN_FNAME (				! Copy filename, strip out spaces
	FNAME_DSC, 				! Adr. of unedited file name descriptor
	FAB)					! Adr. of current FAB
    : NOVALUE = 				! Value returned is RMS completion code

!++
! FUNCTIONAL DESCRIPTION:
!
!	Copies filename to heap storage.
!
!	Historical note:  In VAX/VMS V1, this routine upcased the string
!	and removed all embedded blanks.  Since V2, this has not been
!	necessary.
!
! FORMAL PARAMETERS:
!
!	FNAME_DSC.rt.ds		Adr. of filename descriptor
!	FAB.mz.r	Adr. of FAB
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	FAB$B_FNS	Size of string allocated
!	FAB$L_FNA	Adr. of string
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Allocates storage for edited filename string.
!--

    BEGIN

    MAP
	FNAME_DSC : REF DSC$DESCRIPTOR,
	FAB : REF BLOCK [FAB$C_BLN, BYTE];

    LOCAL
	LENGTH;					! length of edited string

    !+
    ! Count number of characters in string.  Set length in FAB.
    !-

    LENGTH = .FNAME_DSC [DSC$W_LENGTH];

    IF .LENGTH EQLU 0 THEN $FOR$$SIGNAL_STO (FOR$K_FILNAMSPE);

    IF .LENGTH GTRU 255 THEN $FOR$$SIGNAL_STO (FOR$K_INVARGFOR);

    !+
    ! Allocate # of non-blank characters and save address and length in FAB
    !-

    FAB [FAB$L_FNA] = FOR$$GET_VM (.LENGTH);
    FAB [FAB$B_FNS] = .LENGTH;

    !+
    ! Copy string.
    !-

    CH$MOVE (.LENGTH, .FNAME_DSC [DSC$A_POINTER], .FAB [FAB$L_FNA]);

    RETURN;
    END;					! End of OPEN_FNAME routine
END

ELUDOM
