	$BEGIN	RM0BUFMGR,000,RM$RMS0,<BUFFER MANAGER>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; Facility: rms32
;
; Abstract:
;		this module contains the basic buffer management
;		routines for rms32.  the following routines are
;		included:
;
;			rm$getpag	allocate empty pages
;			rm$getspc	allocate space
;			rm$retpag	deallocate pages
;			rm$retspc	deallocate space
;			rm$aldbuf	allocate bdb and i/o buffer
;			rm$albdb	allocate bdb
;			rm$alblb	allocate blb
;			rm$retbdb	deallocate bdb and i/o
;					buffer (if any)
;
; Also included are routines and an entry-point to allocate and deallocate
; journaling BDB/Buffers.  These are:
;
;			rm$aldjnlbuf	allocate journal BDB and buffer
;			rm$aljnlbdb	allocate journal BDB
;			rm$retjnlbdb	deallocate above
;
; Environment:
;		star processor running starlet exec.
;
; Author: L F Laverdure	, creation date: 30-DEC-1976
;
; Modified By:
;
;	V03-017	JWT0173		Jim Teague		 1-Apr-1984
;		Disable new memory allocation for now.
;
;	V03-016	JWT0170		Jim Teague		22-Mar-1984
;		Improve memory deallocation in RM$RETSPC -- if we
;		can find enough consecutive scraps to make a page,
;		return the page then and there.
;		
;	V03-015	RAS0263		Ron Schaefer		 6-Mar-1984
;		Fine-tune things a little to improve the performance
;		a tad.
;
;	V03-014	RAS0219		Ron Schaefer		 9-Dec-1983
;		Add RM$GETBLK1 entry point.
;
;	V03-012	KPL0004		Peter Lieberwirth	 5-Aug-1983
;		Fix bug in V03-011.
;
;	V03-011	KPL0003		Peter Lieberwirth	27-Jul-1983
;		Add routines to allocate and deallocate journaling specific
;		buffers and BDBs.
;
;	V03-010	KPL0002		Peter Lieberwirth	30-Apr-1983
;		Add omitted macro definition.
;
;	V03-009	KPL0001		Peter Lieberwirth	29-Apr-1983
;		Add ASSUME for MJB to insure its longword aligned.
;
;	V03-009 MCN0001		Maria del C. Nasr	24-Mar-1983
;		Preserve register R2 to R4 in call to RM$ALBLB so that we
;		can use for this routine one of the general linkages defined.
;
;	V03-008	RAS0130		Ron Schaefer		14-Mar-1983
;		Change BDB allocation/deallocation to use the
;		new fields BDB$L_ALLOC_ADDR and BDB$W_ALLOC_SIZE.
;
;	V03-007	KBT0470		Keith B. Thompson	24-Jan-1983
;		Remove ret1stbdb hack
;
;	V03-006	KBT0453		Keith B. Thompson	6-Jan-1983
;		Put in assume statements to check the BLN to make
;		sure they are longword aligned
;
;	V03-005	RAS0106		Ron Schaefer		 3-Dec-1982
;		Change the $SETPRT logic to only occur when memory is
;		actually created, not on every image I/O segment page. 
;		The image activator has taken care of the image I/O segment.
;
;	V03-004	RAS0099		Ron Schaefer		22-Sep-1982
;		Change the $EXPREG logic to allocate a big block (128 pages)
;		at a time and insert on the free list; rather than
;		just grabbing a page or 2.   This helps prevent
;		fragmentation of P0 space.
;
;	V03-003	KBT0338		Keith B. Thompson	10-Sep-1982
;		Remove gets0spc and rets0spc routines and associated code
;
;	V03-002	KBT0199		Keith B. Thompson	23-Aug-1982
;		Reorganize psects
;
;	V03-001	KBT0121		Keith B. Thompson	7-Aug-1982
;		Remove $sifbdef, $sfsbdef and some commented out code
;
;	V02-026	CDS0003		C Saether	17-Jan-1982
;		Add RM$ALGBPB and RM$RETGBPB routines.
;
;	V02-025	CDS0002		C Saether	 9-Nov-1981
;		Add and remove pages from s0 page list in
;		kernel mode for multi-proc.
;
;	V02-024	CDS0001		C Saether	21-Aug-1981
;		Add RM$ALBLB to allocate and initialize BLB's.
;		Add RM$RETBLB to deallocate BLB's.
;		Remove BCB allocation routine.
;
;	V02-023	SPR34112	C Saether	16-Jun-1981
;		Always allocate and deallocate in 16 byte units.
;		This solves the growing invisible hole problem.
;		It also solves the irab alignment problem.
;
;	V02-022	REFORMAT	C Saether	30-Jul-1980	22:25
;
;	V021	CDS0046		C Saether	27-Oct-1979	13:40
;		change aldbuf so buff size=0 just allocates bdb.
;		store requested, not allocated size in bdb as buffer size to
;		fix bug if ffff (hex) bytes are requested for buffer.
;		keep count of current pages in use and max used ever pages
;		in shared file database.  all shared pages now allocated
;		initially by rmsshare - don't allocate on demand.
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$ASBDEF			; asb
	$BDBDEF			; bdb
	$BLBDEF			; blb
	$FWADEF			; fwa
	$GBDDEF			; gbd
	$GBHDEF			; gbh
	$GBPBDEF		; gbpb
	$GBSBDEF		; gbsb
	$IDXDEF			; idx
	$IFBDEF			; ifab
	$IRBDEF			; irab
	$RLBDEF			; rlb
	$RJBDEF			; rjb
	$SFSBDEF		; sfsb
	$SLBDEF			; slb
	$SWBDEF			; swb
	$VADEF			; virtual address definitions
	$CMKRNLDEF		; change mode to kernel argument defs
	$PTEDEF			; define page table entry defs
	$ACBDEF			; ast control block definitions
	$PSLDEF			; psl definitions
	$PCBDEF			; process control block definitions
	$IMPDEF			; impure area definitions
	$PRTDEF
	$IRPDEF
	$RMSDEF
	$MJBDEF			; miscellaneous journaling buffer definitions

;
; Equated Symbols:
;

;
; Own Storage:
;

C511:	.LONG	511			; constant for getting to page boundaries
	MASK=	^X1FF			; mask for getting to page boundary

	.SBTTL	RM$GETPAG - PAGE ALLOCATION ROUTINE
;++
;
; RM$GET1PAG - entry point to get only a single page
; RM$GETPAG - entry point to get requested number of pages
;
;  this routine allocates a specified number of pages.
;  the pages are not zero filled.
;
;  it performs this function by scanning the free page
;  list of the current (process or image) i/o segment
;  for the first fit.
;
;  if the request cannot be satisfied from the
;   free page list, the routine checks for new
;  (i.e. never-used) pages available in the i/o segment
;  and allocates from there.
;
;  if insufficient pages in the i/o segment then
;      if in the process i/o segment
;	or if rms is inhibited from using program
;	region (p0) space, return a dme error,
;      else allocate the page(s) from the program
;	region.
;
;  the pages will have exec write protection and
;  either supervisor or user read depending upon
;  the current i/o segment (i.e., for process and user
;  i/o segments respectively).
;
;
; Calling sequence:
;
;	BSBW	RM$GETPAG
;
;  alternate entry at rm$get1pag to allocate a single
;  page of memory.  same outputs but only r11 input required.
;
; Input Parameters:
;
;	r11	impure area pointer
;	r2	# of bytes required
;
; Implicit Inputs:
;
;	none
;
; Output Parameters:
;
;	r3	addr of starting page
;	r2	total length of buffer allocated
;		(i.e., r2 on input rounded up
;		 to next page boundary)
;	r0	status code
;	r1	destroyed
;
; Implicit Outputs:
;
;	the affected free page list is updated.
;
; Completion Codes:
;
;	standard rms.  in particular, success or rm$_dme.
;
; Side Effects:
;
;	none
;
;--

RM$GET1PAG::
	MOVL	#1,R2			; asking for 1 byte gets 1 page

;
;  setup to scan free page list for first fit
;

RM$GETPAG::
	ADDL2	C511,R2			; round up required size
	BICL2	C511,R2			; to length of pages

;
;  scan free page list
;

	MOVAL	IMP$L_FREEPGLH(R11),R1	; get free page list head
10$:	CMPL	R1,IMP$L_FREEPGLH+4(R11) ; end of list?
	BEQL	30$			; branch if yes
	MOVL	(R1),R1			; get next node
	CMPL	8(R1),R2		; long enough?
	BLSS	10$			; branch if not
	BEQL	20$			; branch if exact fit

;
;  we have a fit but we don't need all of the pages in the hole
;  - must return extras
;

15$:	ADDL3	R1,R2,R0		; get addr of new hole
	SUBL3	R2,8(R1),8(R0)		; compute and store its length
	INSQUE	(R0),(R1)		; insert the new hole

;
;  the hole at r1 is just the right size
;  remove it from the list
;

20$:	REMQUE	(R1),R3			; address of hole to r3
22$:	RMSSUC
	RSB


30$:	CMPL	R2,IMP$L_IOSEGLEN(R11)	; enough space?
	BGTR	200$			; branch if not

;
;  take the required space from the i/o segment
;

	MOVL	IMP$L_IOSEGADDR(R11),R3	; addr of space
	SUBL2	R2,IMP$L_IOSEGLEN(R11)	; adjust length of remaining
					; space
	ADDL2	R2,IMP$L_IOSEGADDR(R11)	; and its start addr
	BRB	22$			; and return success

;
;  there is no space in the free page list or in the i/o segment.
;  if this is not the pio segment, allocate the required space
;  from the program region unless prohibited by user.
;

	ASSUME	IMP$W_RMSSTATUS	EQ	0
	ASSUME	IMP$V_IIOS	EQ	0

200$:	BLBC	(R11),205$		; branch if process i/o seg.
	TSTL	IMP$L_IOSEGADDR(R11)	; is there any image i/o seg.?
	BEQL	205$			; branch if none (error)
	BBC	#IMP$V_NOP0BUFS,(R11),210$ ; branch if p0 off limits
205$:	BRW	ERRDME

;
;  expand the program region
;

210$:	ASHL	#-9,R2,R1		; convert to pages
	CMPL	#128,R1			; use max (128, request)
	BLEQU	220$
	MOVZBL	#128,R1			
220$:	CLRQ	-(SP)			; temp array to receive results
	MOVL	SP,R3			; and save its addr
	$EXPREG_S	PAGCNT=R1,-	; num of pages
			RETADR=(R3),-	; start/end addr of space
			ACMODE=#PSL$C_EXEC,- ; owner mode
			REGION=#0	; program region
	BLBC	R0,EXPREGERR		; got it!
			
;
;  the required number of pages have now been allocated.
;  set the protection on them.
;

SETPRT:	MOVZBL	IMP$B_PROT(R11),R1	; pick up protection for pages
	$SETPRT_S	INADR=(R3),-	; start/end addr of space
			RETADR=(R3),-	; start/end addr of space
			ACMODE=#PSL$C_EXEC,-
			PROT=R1
	BLBC	R0,ERRBUG		; service should not fail
	MOVL	(SP)+,R0		; addr of starting page
	SUBL3	R0,(SP)+,R1		; get length-1 
	INCL	R1			; and make it length
	PUSHR	#^M<R2,R4,R5>		; save regs
	MOVQ	R0,R4			; copy start addr
					;  & length to proper regs
	BSBW	RM$RETPAG		; give pages to free list
	POPR	#^M<R2,R4,R5>		; restore regs
	BRW	RM$GETPAG		; and go use the new space

EXPREGERR:
	TSTL	(R3)			; did we get anything?
	BLSS	ERRDME1			; if not, report error
	SUBL3	(R3),4(R3),R0		; how much did we get?
	INCL	R0			; correct length
	SUBL3	R2,R0,R1		; did we get enough?
	BLSS	ERRDME2			; nope
	BEQL	SETPRT			; exact amount?
	SUBL2	R1,4(R3)		; adjust addr array
	BSBB	CNTREG			; give back unneeded pages
	BRB	SETPRT			; set the protection

CNTREG:	ASHL	#-9,R1,R1		; convert to pages
	$CNTREG_S	PAGCNT=R1,-	; give back the excess space
			ACMODE=#PSL$C_EXEC,- ; owner mode
			REGION=#0	; program region
	BLBC	R0,ERRBUG		; service should not fail
	RSB

;
;  no dynamic memory available
;
ERRDME2:
	MOVL	R0,R1			; return all the space
	BSBB	CNTREG			; and report the error
ERRDME1:
	POPR	#^M<R0,R1>		; clean up stack
ERRDME:
	RMSERR	DME
	RSB

;
;  the change protection system service failed
;

ERRBUG:	RMSTBUG	FTL$_SETPRTFAIL


	.SBTTL	RM$GETSPC - MEMORY ALLOCATION ROUTINE

;++
;
; RM$GETSPC1 - set up free space header and get space
; RM$GETSPC - get space
; RM$GETSPC_ALT - yet another entry point to get space
; RM$GETBLK - get space by longwords
; RM$GETBLK1 - set up free space header and get space by longwords
;
;
;  this routine allocates space within a page on a first
;  fit basis.  the allocated space is zero filled.
;
;  if insufficient space is available, another page is
;  added to the free space list.
;
;
;  calling sequence:
;
;	BSBW	RM$GETSPC
;
;  alternate entry at rm$getspc_alt if r1 has exact address of list head
;  alternate entry at rm$getblk if r2 has # of longwords required and
;  this # is to be stored in byte 9 of the gotten space
;
;  input parameters:
;
;	r11	impure area addr
;	r2	# of bytes required (11 < r2 < 513)
;	r1	any address within page
;		(space header must be at the start
;		 of this page)
;
;  implicit inputs:
;
;	the status of the impure area.
;
;  output parameters:
;
;	r1	addr of block of memory
;	r0	status
;	r2,r3,r4  destroyed
;
;  implicit outputs:
;
;  the free space list is updated.
;
;
;  completion codes:
;
;	standard rms32, in particular, success and dme.
;
;  side effects:
;
;	none.
;
;--


;
;  alternate entry here for getting space from ifab free space list
;
;  additonal input:	r9 = address of ifab/irab
;  r1 is not an input
;

RM$GETSPC1::
	BSBW	SETHDR1			; set up free space header page addr
					; and fall thru into rm$getspc
;
;  normal entry point
;

RM$GETSPC::
	BICL2	C511,R1			; get header addr

RM$GETSPC_ALT::
	MOVL	R1,R4			; save addr for end test
	ADDL2	#15,R2			; turn request into multiple of
	BICL2	#15,R2			; 16 bytes.

;
;  scan for first fit
;

10$:	CMPL	(R1),R4			; end of list?
	BEQL	50$			; branch if yes - no space found
15$:	MOVL	(R1),R1			; get next node
	CMPL	8(R1),R2		; long enough?
	BLSS	10$			; branch if not
	BEQL	20$			; branch if exact fit

;
;  we have a fit but don't need extra bytes
;  return them to the free space list
;

	ADDL3	R2,R1,R0		; get new hole addr
	SUBL3	R2,8(R1),R3		; compute its length
	CMPL	R3,#16			; at least 16 bytes?
	BLSS	20$			; branch if not, as not
					; big enough for a node
	MOVL	R3,8(R0)		; store hole length
	INSQUE	(R0),(R1)		; & insert the new hole

;
;  the hole at r1 is just the right size (imagine that!)
;  (actually could be 8 bytes longer than needed)
;  remove it from the list and zero fill it
;

20$:	REMQUE	(R1),R1
	PUSHL	R5
	MOVC5	#0,(R1),#0,R2,(R1)	; zero the space, preserving R1
	POPL	R5
	RMSSUC
	RSB

;
;
;  found no space of required size
;  get another page and add it to the free space list
;

50$:	MOVQ	R1,-(SP)
	BSBW	RM$GETPAG		; get required pages (r3 = addr)
	BLBC	R0,ERRDME1		; error if not available
	MOVL	R2,8(R3)		; store length of space
	MOVQ	(SP)+,R1

;
;  insert the new space in ascending memory address sequence
;
;  note: r1 points to last hole (i.e., highest in memory)
;

60$:	CMPL	R3,R1			; is this the right spot?
	BGTRU	70$			; branch if yes
	MOVL	4(R1),R1		; get previous hole
	CMPL	R1,R4			; back at list head?
	BNEQ	60$			; branch if not
70$:	INSQUE	(R3),(R1)		; insert the hole
	BRB	15$			; and go use it


;
;	These assumes are to make sure that all of the structures
;	which are allocated with getblk are longword aligned.  If
;	they are not data in other structures can be corrupted.
;
;	asb
;
	ASSUME	<<ASB$K_BLN_FIX/4>*4>	EQ	ASB$K_BLN_FIX
	ASSUME	<<ASB$K_BLN_FAB/4>*4>	EQ	ASB$K_BLN_FAB
	ASSUME	<<ASB$K_BLN_SEQ/4>*4>	EQ	ASB$K_BLN_SEQ
	ASSUME	<<ASB$K_BLN_REL/4>*4>	EQ	ASB$K_BLN_REL
	ASSUME	<<ASB$K_BLN_IDX/4>*4>	EQ	ASB$K_BLN_IDX
;
;	bdb
;
	ASSUME	<<BDB$K_BLN/4>*4>	EQ	BDB$K_BLN
;
;	blb
;
	ASSUME	<<BLB$K_BLN/4>*4>	EQ	BLB$K_BLN
;
;	fwa  (the fwa is not allocated with getblk but may someday)
;
	ASSUME	<<FWA$K_BLN/4>*4>	EQ	FWA$K_BLN
	ASSUME	<<FWA$K_BLN_FWA/4>*4>	EQ	FWA$K_BLN_FWA
	ASSUME	<<FWA$K_BLN_BUF/4>*4>	EQ	FWA$K_BLN_BUF
;
;	gbd
;
	ASSUME	<<GBD$K_BLN/4>*4>	EQ	GBD$K_BLN
;
;	gbh
;
	ASSUME	<<GBH$K_BLN/4>*4>	EQ	GBH$K_BLN
;
;	gbpb
;
	ASSUME	<<GBPB$K_BLN/4>*4>	EQ	GBPB$K_BLN
;
;	gbsb
;
	ASSUME	<<GBSB$K_BLN/4>*4>	EQ	GBSB$K_BLN
;
;	idx
;
	ASSUME	<<IDX$K_FIXED_BLN/4>*4>	EQ	IDX$K_FIXED_BLN
;
;	ifab
;
	ASSUME	<<IFB$K_BLN_SEQ/4>*4>	EQ	IFB$K_BLN_SEQ
	ASSUME	<<IFB$K_BLN_REL/4>*4>	EQ	IFB$K_BLN_REL
	ASSUME	<<IFB$K_BLN_IDX/4>*4>	EQ	IFB$K_BLN_IDX
;
;	irab
;
	ASSUME	<<IRB$K_BLN_SEQ/4>*4>	EQ	IRB$K_BLN_SEQ
	ASSUME	<<IRB$K_BLN_REL/4>*4>	EQ	IRB$K_BLN_REL
	ASSUME	<<IRB$K_BLN_IDX/4>*4>	EQ	IRB$K_BLN_IDX
;
;	mjb
;
	ASSUME	<<MJB$K_BLN/4>*4>	EQ	MJB$K_BLN
;
;	rlb
;
	ASSUME	<<RLB$K_BLN/4>*4>	EQ	RLB$K_BLN
;
;	rjb
;
	ASSUME	<<RJB$K_BLN/4>*4>	EQ	RJB$K_BLN
;
;	sfsb
;
	ASSUME	<<SFSB$K_BLN/4>*4>	EQ	SFSB$K_BLN
;
;	slb
;
	ASSUME	<<SLB$K_BLN/4>*4>	EQ	SLB$K_BLN
;
;	swb
;
	ASSUME	<<SWB$K_BLN/4>*4>	EQ	SWB$K_BLN


;
;  alternate entry here for getting block from ifab free space list
;
;  additonal input:	r9 = address of ifab/irab
;  r1 is not an input
;

RM$GETBLK1::
	BSBB	SETHDR1			; set up free space header page addr
					; and fall thru into rm$getblk

;
;
;  alternate entry to get space by # of longwords and store that
;  number in byte 9 of the returned space
;

RM$GETBLK::
	PUSHL	R2			; save # longwords
	ROTL	#2,R2,R2		; make into # bytes
	BSBW	RM$GETSPC		; go get the space
	BLBC	R0,10$			; get out on error
	CVTLB	(SP)+,9(R1)		; store length
	RSB
10$:	POPR	#^M<R1>			; clean stack
	RSB

;++
;  subroutine to load ifab addr into r1
;
;--

SETHDR1:
	MOVL	R9,R1			; assume ifab addr in r1

	ASSUME	<IRB$C_BID&1>	EQ	0
	ASSUME	<IFB$C_BID&1>	EQ	1
	ASSUME	IFB$B_BID	EQ	IRB$B_BID

	BLBS	IFB$B_BID(R9),10$	; branch if structure is ifab
	MOVL	IRB$L_IFAB_LNK(R9),R1	; get ifab address from irab
10$:	RSB

	.SBTTL	RM$RETPAG - PAGE DEALLOCATION ROUTINE

;++
;
; RM$RET1PAG - return one (1) page
; RM$RETPAG - deallocate pages
;
;	this routine returns pages to the free page list.
;	the list is kept in order of ascending memory addresses.
;
;
;  calling sequence:
;
;	BSBW	RM$RETPAG
;
;  alternate entry at rm$ret1pag to return a single page.
;  r11,r4 are only inputs.
;
;  input parameters:
;
;	r11	impure area address
;	r5	length in bytes of pages to be returned
;	r4	address of first page to be returned
;
;  outputs:
;
;	r0 thru r5 destroyed
;
;  implicit outputs:
;
;	the free page list is updated.
;
;  completion codes:
;
;	none
;
;  side effects:
;
;	none
;
;--
;

;
;  entry to return a single page
;

RM$RET1PAG::
	MOVL	#1,R5			; 1 byte gets 1 page

RM$RETPAG::
	ADDL2	C511,R5			; round up length
	BICL2	C511,R5			;  "
	BICL2	C511,R4			; get start of page
	MOVAL	IMP$L_FREEPGLH(R11),R2	; addr of header
	MOVL	R2,R3			; save for end of list test

;
;  scan for a hole having a higher address
;

10$:	MOVL	(R2),R2			; get next hole addr
	CMPL	R2,R3			; end of list?
	BEQL	40$			; branch if yes
	CMPL	R2,R4			; higher than hole being returned?
	BLSSU	10$			; branch if not

;
;  the hole at r2 has a higher address than that being returned.
;  insert the returning hole and try to combine it with either the
;  previous hole, the next hole, or both
;

20$:	ADDL3	R5,R4,R1		; get address past returning hole
	CMPL	R1,R2			; same as start of next hole?
	BNEQ	40$			; branch if not

;
;  combine this hole with next hole
;

	ADDL2	8(R2),R5		; get new hole size
	REMQUE	(R2),R2			; get rid of high hole
	MOVL	(R2),R2			; get next node addr
					; *****
					; NOTE:
					;	assumes the address
					;	in the deleted node is still
					;	valid! (it should be.)
					; ******

;
;  check if the hole can be combined with the previous hole
;

40$:	MOVL	4(R2),R0		; get previous hole addr
	CMPL	R0,R3			; is it the head?
	BEQL	60$			; branch if yes
	ADDL3	8(R0),R0,R1		; get end of previous hole
	CMPL	R1,R4			; same as start of hole
					; being returned?
	BNEQ	60$			; branch if not
	ADDL2	R5,8(R0)		; just add in the additional
					; size and that's all
	RSB				; return to caller

;
;  must create a new node for hole being returned
;

60$:	MOVL	R5,8(R4)		; set its size
	INSQUE	(R4),(R0)		; and insert it
65$:	RSB

	.SBTTL	RM$RETSPC - MEMORY DEALLOCATION ROUTINE

;++
;
; RM$RETSPC1 - set up free list header and return space
; RM$RETSPC - return space
; RM$RETBLK1 - set up header and return space with length field
; RM$RETBLK - return space with length field
;
;  this routine returns memory to the free space list, or to the system
;  paged pool.
;
;  the list is kept in ascending memory sequence to facilitate
;  combining holes.  holes are not combined across page
;  boundaries however.
;
;  note that any hole less than 12 bytes in length is implicit
;  (i.e., it has no header linking it into the list).
;
;
;  calling sequence:
;
;	BSBW	RM$RETSPC
;
;  alternate entry at rm$retblk to return a block having
;  its length stored as a # of longwords in byte 9 of the returning space.
;  for this entry the r2 input is not required.
;
;  input parameters:
;
;	r11	impure area address
;	r4	addr of space being returned
;	r3	any addr in page having free space header
;	r2	length in bytes of space being returned
;
;  inplicit inputs:
;
;	none
;
;  output parameters:
;
;	r0 thru r5 destroyed
;
;  implicit outputs:
;
;	the free space list is updated.
;
;  completion codes:
;
;	none.
;
;  side effects:
;
;	none
;
;--
;

C512:	.LONG	512			; constant for page size

;
;  alternate entry to return space to ifab free space list
;  additional input:	r9 = ifab/irab addr
;  r3 is not an input
;

RM$RETSPC1::
					; get ifab addr into r3
	PUSHAB	B^RM$RETSPC		; and go do normal return

;++
;  subroutine to load ifab addr into r3
;
;--

SETHDR3:
	MOVL	R9,R3			; assume ifab addr in r3

	ASSUME	<IRB$C_BID&1>	EQ	0
	ASSUME	<IFB$C_BID&1>	EQ	1
	ASSUME	IFB$B_BID	EQ	IRB$B_BID

	BLBS	IFB$B_BID(R9),10$	; branch if structure is ifab
	MOVL	IRB$L_IFAB_LNK(R9),R3	; get ifab address from irab
10$:	RSB

;
;  alternate entry to return block to ifab free space list
;  additional input:	r9 = ifab/irab addr
;  r3 is not an input
;

RM$RETBLK1::
	BSBB	SETHDR3			; get ifab addr into r3
					; and fall into normal return blk

;
;  alternate entry here to return a block having a length code
;

RM$RETBLK::
	MOVZBL	9(R4),R2		; pick up length from block
	ROTL	#2,R2,R2		; convert to # bytes

RM$RETSPC::
	ADDL2	#15,R2			; always round to multiple
	BICL2	#15,R2			; of 16 bytes.
1$:	CMPL	R2,C512			; returning at least a page?
	BLSS	5$			; branch if not
3$:	PUSHL	R4			; save registers
	MOVQ	R2,-(SP)
	BSBW	RM$RET1PAG		; return 1 page to free page list
	MOVQ	(SP)+,R2		; restore registers
	ADDL3	C512,(SP)+,R4		; adjust address of returning space
	SUBL2	C512,R2			; addjust length of space left
	BNEQ	1$			; branch if more space to return
	RSB
5$:	BICL2	C511,R3			; get free space list head addr
	MOVL	R3,R5			; save for end test

;
;  scan for a hole having a higher address
;

10$:	CMPL	(R3),R5			; end of list?
	BEQL	50$			; branch if yes
	MOVL	(R3),R3			; get next hole addr
	CMPL	R3,R4			; higher than hole being returned?
	BLSSU	10$			; branch if not

;
;  the hole at r3 has a higher address than hole being returned.
;  try to combine with either the next or the previous hole or both.
;

20$:					; both buffers in same page?
	XORL3	R3,R4,R1		; set bits 9-31 to 0
					; if in same page
	BICL2	C511,R1			; clear bits 0-8
					; z - set if 9-31 also zero
	BNEQ	40$			; branch if not
	SUBL3	R4,R3,R1		; get difference between the
					; buffer addresses
	SUBL2	R2,R1			; less the length of the
					; returning buffer
	BNEQ	40$			; branch if not exact

;
;  combine the returning hole with the next hole
;

	ADDL2	8(R3),R2		; get new hole size
					; = old + new
	REMQUE	(R3),R3			; get rid of high hole
	MOVL	(R3),R3			; get addr of next higher
					; hole
					;NOTE:
					; note: assumes link still
					;  valid.

;
;  check if hole can be combined with previous hole
;

40$:	MOVL	4(R3),R3		; get addr previous hole
50$:	CMPL	R3,R5			; is it the head?
	BEQL	60$			; branch if yes
					; two buffers in same page?
	XORL3	R3,R4,R1		; set bits 9-31 to 0
					; if in same page
	BICL2	C511,R1			; clear bits 0-8
					; z - set if 9-31 also zero
	BNEQ	60$			; branch if not
	SUBL3	R3,R4,R1		; get difference between the
					; buffer addresses
	SUBL2	8(R3),R1		; less previous buffer length
	BNEQ	60$			; branch if not exact
	ADDL2	R2,8(R3)		; merely add size of new returning
					; space to previous hole size
	MOVL	R3,R4			; copy hole addr
	BRB	80$			; go check end condition
;
;  create a new node for hole being returned
;
60$:	MOVL	R2,8(R4)		; set hole size
	INSQUE	(R4),(R3)		; & insert it

;
;  check for invisible space at end of page and reclaim if any
;

80$:	ADDL3	8(R4),R4,R1		; addr + size
	BICL2	#^C MASK,R1		; get offset in page
	SUBW2	#512-8,R1		; 8 bytes from end?
	BNEQU	90$			; branch if not
	ADDW2	#8,8(R4)		; update the length

;
; If we have accumulated a page from all these scraps, we can give it back
; ***
;90$:	CMPL	C512,R2			; did we manage to scrape up a page?
;	BNEQ	95$			; if not, continue
;	REMQUE	(R4),R4			; if so, remove from free list
;	BSBW 	RM$RET1PAG		; and give back this page now
; ***
90$:
95$:	RSB


	.SBTTL	RM$ALDBUF - BDB AND I/O BUFFER ALLOCATION ROUTINE

;++
;
; RM$ALDBUF - allocate buffer and bdb to go with it
;
;  this routine performs the following functions:
;
;	1. allocate and init a bdb
;	2. allocate an i/o buffer (of an integral
;	   number of pages) if r5 non-zero
;
;  calling sequence:
;
;	BSBW	RM$ALDBUF
;
;  input parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r5	length of buffer in bytes
;
;  implicit inputs:
;
;	none
;
;  output parameters:
;
;	r4	address of bdb
;	r3	address of buffer
;	r2	total size in bytes of allocation
;	r0	status code
;	r1	destroyed
;	r4,r5	also destroyed if r0 indicates an error
;
;  implicit outputs:
;
;  the affected free space and free page lists are updated.
;
;  completion codes:
;
;	standard rms, in particular, success or dme.
;
;  side effects:
;
;	none.
;
;--

RM$ALDBUF::
	BSBB	RM$ALBDB		; get a bdb
	BLBC	R0,20$			; branch on error
	MOVL	R1,R4			; save bdb addr
	MOVL	R5,R2			; move buffer len to right reg
	BEQL	20$			; eql then wants only bdb (no buffer)
	BSBW	RM$GETPAG		; and get an i/o buffer
					; (len/addr returned in r2,r3)
	BLBC	R0,50$			; branch on error

;
;  set buffer size and address into bdb
;

	MOVW	R5,BDB$W_SIZE(R4)
	MOVW	R5,BDB$W_ALLOC_SIZE(R4)
	MOVL	R3,BDB$L_ADDR(R4)
	MOVL	R3,BDB$L_ALLOC_ADDR(R4)
20$:	RSB				; note: r0 still valid.

;
;  error allocating the page  -  must return the bdb
;

50$:	BSBB	RM$RETBDB

ERRDME_BR:
	BRW	ERRDME			; restore error code

	.SBTTL	RM$ALBDB - BDB ALLOCATION ROUTINE

;++
;
; RM$ALBDB -  allocate and initialize a buffer descriptor block (bdb)
;
;  calling sequence:
;
;	BSBW	RM$ALBDB
;
;  input parameters:
;
;	r11	impure area address
;	r10	ifab address
;
;  implicit inputs:
;
;	none
;
;  output parameters:
;
;	r1	address of bdb
;	r0	status code
;	r2,r3,r4 destroyed
;
;  implicit outputs:
;
;  the bdb has its block length and block id fields filled in
;  and it is linked into the ifab's bdb list.
;
;  completion codes:
;
;	standard rms, in particular, success and dme.
;
;  side effects:
;
;	none
;
;--

RM$ALBDB::
	MOVL	R10,R1			; copy ifab addr as this
					; defines the page for the
					; free space list header
	MOVL	#BDB$C_BLN/4,R2		; # longwords required
	BSBW	RM$GETBLK		; allocate zeroed space
					; (r1 set to addr)
	BLBC	R0,10$			; branch on error

;
;  set id into bdb and link at end of the ifab's bdb list
;

	MOVB	#BDB$C_BID,BDB$B_BID(R1)
	INSQUE	(R1),@IFB$L_BDB_BLNK(R10)
10$:	RSB				; note: r0 still has status code.

	.SBTTL	RM$ALGBPB - GBPB ALLOCATION ROUTINE

;++
;
; RM$ALGBPB -  allocate and initialize a buffer descriptor block (gbpb)
;
;  calling sequence:
;
;	BSBW	RM$ALGBPB
;
;  input parameters:
;
;	r11	impure area address
;	r10	ifab address
;
;  implicit inputs:
;
;	none
;
;  output parameters:
;
;	r1	address of gbpb
;	r0	status code
;	r2,r3,r4 destroyed
;
;  implicit outputs:
;
;  the gbpb has its block length and block id fields filled in
;  and it is linked into the ifab's gbpb list.
;
;  completion codes:
;
;	standard rms, in particular, success and dme.
;
;  side effects:
;
;	none
;
;--

RM$ALGBPB::
	MOVL	R10,R1			; copy ifab addr as this
					; defines the page for the
					; free space list header
	MOVL	#GBPB$C_BLN/4,R2		; # longwords required
	BSBW	RM$GETBLK		; allocate zeroed space
					; (r1 set to addr)
	BLBC	R0,10$			; branch on error

;
;  set id into gbpb and link at end of the ifab's gbpb list
;

	MOVB	#GBPB$C_BID,GBPB$B_BID(R1)
	INSQUE	(R1),@IFB$L_BDB_BLNK(R10)
10$:	RSB				; note: r0 still has status code.

	.SBTTL	RM$RETBLB - BLB DEALLOCATION ROUTINE
;++
;
; RM$RETBLB - return specified BLB
;
; This routine deallocate the space used by a BLB, and removes it
; from the ifab list.
;
; Calling sequence:
;
;	BSBW	RM$RETBLB
;
; Input parameters:
;
;	R4 - address of BLB to be returned.
;	R10 - ifab address
;
; Output parameters:
;
;	R0 - R5 destroyed.
;
; Completion status:
;
;	none - success is assumed
;
;--

RM$RETBLB::
	REMQUE	(R4),R4			; Remove from BLB chain.
	TSTL	BLB$L_LOCK_ID(R4)	; Make sure no lock is held.
	BNEQ	10$			; NEQ lock not released.
	MOVL	R10, R3			; Free space header into R3.
	BRW	RM$RETBLK		; Return the blb.

10$:	RMSPBUG	FTL$_LOCKHELD		; This is a problem.

	.SBTTL	RM$RETGBPB - GBPB DEALLOCATION ROUTINE
;++
;
; RM$RETGBPB - return specified GBPB
;
; This routine deallocate the space used by a GBPB, and removes it
; from the ifab list.
;
; Calling sequence:
;
;	BSBW	RM$RETGBPB
;
; Input parameters:
;
;	R4 - address of GBPB to be returned.
;	R10 - ifab address
;
; Output parameters:
;
;	R0 - R5 destroyed.
;
; Completion status:
;
;	none - success is assumed
;
;--

RM$RETGBPB::
	REMQUE	(R4),R4			; Remove from BDB chain.
	MOVL	R10, R3			; Free space header into R3.
	BRW	RM$RETBLK		; Return the gbpb.

	.SBTTL	RM$RETBDB - BDB AND I/O BUFFER DEALLOCATION ROUTINE

;++
;
; RM$RETBDB - return specified bdb
;
;  This routine deallocates the space occupied by a bdb,
;  removes it from the ifab's bdb list, and deallocates
;  the associated i/o buffer, if any.  Also adjust the
;  buffer count if a buffer is deallocated.
;
;  The entry point RM$RETJNLBDB is used to deallocate a journal BDB and buffer.
;  (Journaling specific BDBs and buffers are NOT linked into the IFAB BDB list.)
;
;  calling sequence:
;
;	BSBW	RM$RETBDB
;
;  input parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r4	bdb address
;
;  implicit inputs:
;
;	none
;
;  output parameters:
;
;	r0 thru r5 destroyed
;
;  implicit outputs:
;
;  	the free space and free page lists are updated.
;
;  completion codes:
;
;	none
;
;  side effects:
;
;	none
;
;--

RM$RETBDB::
	CMPB	BDB$B_BID(R4),#BDB$C_BID ; is it a bdb?
	BNEQ	ERRBUG1			; branch if not

	ASSUME	BDB$L_FLINK	EQ	0

	REMQUE	(R4),R4			; remove from ifab bdb list

;
; The next entry point id used to return journal BDBs and buffers.
;

RM$RETJNLBDB::

;
;  return i/o buffer if any
;

	MOVZWL	BDB$W_ALLOC_SIZE(R4),R5	; length of i/o buffer
	BEQL	50$			; branch if none


20$:	PUSHL	R4			; save bdb addr
	MOVL	BDB$L_ALLOC_ADDR(R4),R4	; get buffer addr
	BSBW	RM$RETPAG		; and deallocate the page(s)
	POPL	R4			; restore bdb addr

;
;  check for bdb referenced in curbdb field of any irab and if so zero
;

	ASSUME	IFB$L_IRAB_LNK	EQ	IRB$L_IRAB_LNK

50$:	MOVL	R10,R0			; get ifab addr to right reg
60$:	MOVL	IRB$L_IRAB_LNK(R0),R0	; pick up next irab
	BEQL	70$			; branch if no more
	CMPL	IRB$L_CURBDB(R0),R4	; using this bdb?
	BNEQ	60$			; branch if not
	CLRL	IRB$L_CURBDB(R0)	; invalidate
	BRB	60$			; and continue

;
;  now return the bdb
;

70$:	MOVL	R10,R3			; copy of ifab addr
					; (free space header in this
					; page)
	BRW	RM$RETBLK		; return the bdb space

;
;  bad problem  -  the returning block was not a bdb!
;

ERRBUG1:
	RMSTBUG	FTL$_BADBDB

	.SBTTL	RM$ALBLB - ALLOCATE BUCKET LOCK BLOCK
;++
;
;	RM$ALBLB
;
;	Function Description
;
;	Allocate and initialize static fields in the BLB.
;	Link into BLB queue off the ifab.
;
;	Input Parameters:
;
;	R11	impure pointer
;	R10	ifab address
;
;	Output Parameters:
;
;	R1	address of BLB
;	R0	status code
;
;	Implicit outputs:
;
;	Many fields in the argument block portion of the BLB are initialized.
;
;	Completion codes:
;
;	Standard RMS - usually SUC or DME
;
;--

RM$ALBLB::
	PUSHR	#^M<R2,R3,R4>		; Save registers
	MOVL	R10, R1			; Get free space header into R1.
	MOVL	#BLB$C_BLN/4, R2	; Want length in longwords in R2.
	BSBW	RM$GETBLK		; Get the block.
	BLBC	R0, 10$			; Exit on error.
	MOVB	#BLB$C_BID, BLB$B_BID(R1) ; Set BID.
	MOVL	#4, BLB$L_RESDSC(R1)	; Stuff size of resource to 4.
	MOVAL	BLB$L_VBN(R1),-		; Set address of resource name
		BLB$L_RESDSC+4(R1)	; into descriptor.
	INSQUE	(R1), @IFB$L_BLBBLNK(R10) ; Link into BLB queue.
10$:	POPR	#^M<R2,R3,R4>		; restore registers
	RSB

	.SBTTL	RM$ALDJNLBUF - JOURNAL BDB AND I/O BUFFER ALLOCATION
;++
;
; RM$ALDJNLBUF - allocate buffer and bdb to go with it
;
;  this routine performs the following functions:
;
;	1. allocate and init a bdb
;	2. allocate a journaling buffer (of an integral number of pages)
;	   NOTE: Journal BDBs ALWAYS have buffers.
;
;  calling sequence:
;
;	BSBW	RM$ALDJNLBUF
;
;  input parameters:
;
;	r11	impure area address
;	r10	ifab address
;	r5	length of buffer in bytes
;
;  implicit inputs:
;
;	none
;
;  output parameters:
;
;	r4	address of bdb
;	r3	address of buffer
;	r2	total size in bytes of allocation
;	r0	status code
;	r1	destroyed
;	r4,r5	also destroyed if r0 indicates an error
;
;  implicit outputs:
;
;  the affected free space and free page lists are updated.
;  the BDB is NOT linked into the IFAB BDB list
;
;  completion codes:
;
;	standard rms, in particular, success or dme.
;
;  side effects:
;
;	none.
;
;--

RM$ALDJNLBUF::

	BSBB	RM$ALJNLBDB		; get a journal bdb
	BLBC	R0,60$			; branch on error
	MOVL	R1,R4			; save bdb addr
	MOVL	R5,R2			; move buffer len to right reg
	BEQL	20$			; eql then wants only bdb (no buffer)
	BSBW	RM$GETPAG		; and get an i/o buffer
					; (len/addr returned in r2,r3)
	BLBC	R0,50$			; branch on error

;
; set buffer size and address into bdb
;

20$:	MOVW	R5,BDB$W_SIZE(R4)
	MOVW	R5,BDB$W_ALLOC_SIZE(R4)
	MOVL	R3,BDB$L_ADDR(R4)
	MOVL	R3,BDB$L_ALLOC_ADDR(R4)
	RSB				; note: r0 still valid.

;
;  error allocating the page  -  must return the bdb
;
50$:	BSBB	RM$RETJNLBDB		; deallocate journal BDB

60$:	BRW	ERRDME			; restore error code

	.SUBTITLE RM$ALJNLBDB - JOURNAL BDB ALLOCATION

;++
;
; RM$ALJNLBDB -  allocate and initialize a journal BDB
;
;  calling sequence:
;
;	BSBW	RM$ALJNLBDB
;
;  input parameters:
;
;	r11	impure area address
;	r10	ifab address
;
;  implicit inputs:
;
;	none
;
;  output parameters:
;
;	r1	address of bdb
;	r0	status code
;	r2,r3,r4 destroyed
;
;  implicit outputs:
;
;  the bdb has its block length and block id fields filled in
;
;  completion codes:
;
;	standard rms, in particular, success and dme.
;
;  side effects:
;
;	none
;
;--

RM$ALJNLBDB::

	MOVL	R10,R1			; copy ifab addr as this
					; defines the page for the
					; free space list header
	MOVL	#BDB$C_BLN/4,R2		; # longwords required
	BSBW	RM$GETBLK		; allocate zeroed space
					; (r1 set to addr)
	BLBC	R0,10$			; branch on error
;
; set id into bdb
;
	MOVB	#BDB$C_BID,BDB$B_BID(R1)
10$:	RSB				; note: r0 still has status code.

	.END
