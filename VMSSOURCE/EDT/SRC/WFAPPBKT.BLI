%TITLE 'EDT$WFAPPBKT - append a new bucket'
MODULE EDT$WFAPPBKT (				! Append a new bucket to a text buffer
		IDENT = 'V04-000'			! File: WFAPPBKT.BLI Edit: JBS1006
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Append a new bucket to a text buffer.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: October 16, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 23-Feb-1981.  This module was created by
!	extracting routine APPEND_BUKT from module EDTWF.
! 1-002	- Regularize headers.  JBS 16-Mar-1981
! 1-003 - Modify to use edt$workio. STS 15-Feb-1982
! 1-004 - Add literals for callable parameters. STS 08-Mar-1982
! 1-005 - Put wf_nxt_buk in line. STS 11-Oct-1982
! 1-006	- Improve the appearance of the listing.  JBS 20-Jun-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$WF_NEWBUK : NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    EDT$K_PUT;

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$WF_NEWBUK  - append a new bucket'

GLOBAL ROUTINE EDT$$WF_NEWBUK (			! Append a new bucket to a text buffer
    NEXT, 					! Next bucket, or 0
    PREV					! Previous bucket, or 0
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine appends a new bucket to a text buffer.  The bucket is
!	linked into the chain.
!
! FORMAL PARAMETERS:
!
!  NEXT 		the bucket which will follow the new bucket or 0 if it is at the end.
!
!  PREV 		the bucket which will precede the new bucket or 0 if it is the first.
!
! IMPLICIT INPUTS:
!
!	EDT$$A_CUR_BUF
!	EDT$$A_WK_BUK
!	EDT$$G_WK_CURBUK
!	EDT$$A_WK_LN
!	EDT$$Z_WF_DESC
!	EDT$$G_WK_MODFD
!	EDT$$G_WK_AVAIL
!	EDT$$G_WK_GTRSTBUK
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_CUR_BUF
!	EDT$$G_WK_MODFD
!	EDT$$G_WK_CURBUK
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$CALLWIO,				! calls appropriate workfile routine
	EDT$$WF_ALOBUF : NOVALUE,
	EDT$$WF_MAKECUR : NOVALUE;

    EXTERNAL
	EDT$$Z_WF_DESC : BLOCK [8, BYTE],	! workfile record descriptor
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,	! Current text buffer control block
	EDT$$G_WK_AVAIL,
	EDT$$G_WK_GRTSTBUK,
	EDT$$A_WK_BUK : 			! Pointer to current bucket
	    REF BLOCK [WF_BUKT_SIZE, BYTE] FIELD (WFB_FIELDS),
	EDT$$G_WK_CURBUK,			! Number of the current bucket
	EDT$$A_WK_LN : REF LIN_BLOCK,		! Pointer to current line
	EDT$$G_WK_MODFD;			! Flag indicating bucket was modified

!+
! Is this the last bucket in the buffer?
!-

    IF (.NEXT EQL 0)
    THEN
!+
! Yes, update the last bucket field of EDT$$A_CUR_BUF
!-

	IF (.EDT$$G_WK_AVAIL NEQ 0)
	THEN
	    EDT$$A_CUR_BUF [TBCB_LAST_BUKT] = .EDT$$G_WK_AVAIL
	ELSE
	    EDT$$A_CUR_BUF [TBCB_LAST_BUKT] = .EDT$$G_WK_GRTSTBUK

    ELSE
!+
! No, link the next bucket back to the one we are adding.
!-
	BEGIN
	EDT$$WF_MAKECUR (.NEXT);

	IF (.EDT$$G_WK_AVAIL NEQ 0)
	THEN
	    EDT$$A_WK_BUK [WFB_PREV_BUKT] = .EDT$$G_WK_AVAIL
	ELSE
	    EDT$$A_WK_BUK [WFB_PREV_BUKT] = .EDT$$G_WK_GRTSTBUK;

	EDT$$G_WK_MODFD = 1;
	END;

!+
! Write out the current bucket if it has been modified.
!-

    IF .EDT$$G_WK_MODFD THEN EDT$$CALLWIO (EDT$K_PUT, .EDT$$G_WK_CURBUK, EDT$$Z_WF_DESC);

    EDT$$G_WK_MODFD = 0;
!+
! Get a new bukt.
!-
    EDT$$WF_ALOBUF ();
!+
! Update the current bucket and next bucket info
!-
    EDT$$A_CUR_BUF [TBCB_CUR_BUKT] = .EDT$$G_WK_CURBUK;
!+
! Fill in the bucket info for the new bucket
!-
    EDT$$A_WK_BUK [WFB_NEXT_BUKT] = .NEXT;
    EDT$$A_WK_BUK [WFB_PREV_BUKT] = .PREV;
    EDT$$A_WK_BUK [WFB_END] = WFB_FIXED_SIZE;
!+
! Update EDT$$A_CUR_BUF  to point to first record in this new bucket
!-
    EDT$$A_CUR_BUF [TBCB_LINE_ADDR] = WFB_FIXED_SIZE;
    EDT$$A_WK_LN = CH$PTR (.EDT$$A_WK_BUK, WFB_FIXED_SIZE);
!+
! Mark the new bucket as modified.
!-
    EDT$$G_WK_MODFD = 1;
    END;					! of routine EDT$$WF_NEWBUK

!<BLF/PAGE>

END						! of module EDT$WFAPPBKT

ELUDOM
