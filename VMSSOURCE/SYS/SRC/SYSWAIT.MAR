	.NLIST	CND
	.IF	NDF,MPSWITCH
	.TITLE	SYSWAIT EVENT FLAG WAIT SERVICES
	.IFF	;MPSWITCH DEFINED
	.TITLE	MPWAIT - SECONDARY EVENT FLAG WAIT SERVICES
	.IFTF	;MPSWITCH
	.IDENT	'V04-000'
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;++
	.IFT	;MPSWITCH NOT DEFINED
; FACILITY: EXECUTIVE, EVENT FLAG SERVICES
;
; ABSTRACT: WAIT CONTAINS THE THREE FORMS OF EVENT FLAG WAIT
;	    SYSTEM SERVICES WHICH PROVIDE FOR SINGLE EVENT WAIT AS
;	    WELL AS COMBINATIONS OF MULTIPLE EVENTS.
	.IFF	;MPSWITCH DEFINED
; FACILITY: MULTI-PROCESSING EXECUTIVE, SECONDARY EVENT FLAG SERVICES
;
; ABSTRACT: $WAITFR THAT SUCEEDS IS DONE ON SECONDARY.  ALL
;	    OTHER CASES ARE RETURNED TO THE PRIMARY FOR HANDLING.
	.IFTF	;MPSWITCH
;
;--
;
; AUTHOR:
;	R.HUSTVEDT : VERSION
;
; MODIFIED BY:
;
;	V03-007	SSA0016		Stan Amway		 8-Mar-1984
;		Subtract IOTA from automatic working set adjustment
;		time reference in PHD on any entry to SCH$WAITx code.
;		(Acknowledgements go to Wayne Cardoza and Larry Kenah,
;		 who both collaborated on this change.)
;
;	V03-006	WMC0001		Wayne Cardoza		22-Feb-1984
;		No reason to try to wake up swapper on every EFN wait.
;
;	V03-005	SSA0003		Stan Amway		 5-Dec-1983
;		Added support for outswap scheduling changes.
;		Changed process wait code to store wait time in PCB
;		as longword system absolute time.
;
;	V03-004	KDM0035		Kathleen D. Morse	14-Dec-1982
;		Fix assembly switch for performance collection for
;		kernel mode services executed on secondary processor.
;
;	V03-003	KDM0034		Kathleen D. Morse	13-Dec-1982
;		Correct logic for secondary continuing execution of
;		a process after a WAITCHK request is done by the primary.
;
;	V03-002	KDM0030		Kathleen D. Morse	18-Nov-1982
;		Add IFPRIMARY logic that allows primary to execute
;		secondary-specific code without turning into a secondary.
;
;	V03-001	KDM0018		Kathleen D. Morse	13-Oct-1982
;		Add multi-processing switch, which generates these
;		system services for the secondary processor.
;
;
	.PAGE
	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;

	$CEBDEF					;COMMON EVENT BLOCK DEFS
	$DYNDEF					;DYNAMIC STRUCTURE TYPES
	$IPLDEF					;IPL DEFINITIONS
	.IFF	;MPSWITCH DEFINED
	$LCKDEF					;INTERLOCK BIT DEFINITIONS
	$MPSDEF					;SECONDARY REQUEST FLAG DEFS
	$RPBDEF					;REBOOT PARAMETER BLOCK DEFS
	.IFTF	;MPSWITCH
	$PCBDEF					;PCB DEFINITIONS
	$PHDDEF					;PHD DEFINITIONS
	$PRDEF					;PROCESSOR REGISTER DEFS
	$PSLDEF					;PSL DEFINITIONS
	$SHBDEF					;SHARED MEMORY CONTROL BLK DEFS
	$SHDDEF					;SHARED MEMORY COMMON DATA PAGE
	$SSDEF					;STATUS CODE DEFINITIONS
	$STATEDEF				;STATE DEFINITIONS
	$WQHDEF					;WAIT QUEUE HEADER DEFS
;
; EQUATES:
;
EFN=4						;EVENT FLAG NUMBER
MASK=8						;WAIT MASK
	.PSECT	AEXENONPAGED			;NON-PAGED
	.PAGE
	.IFT	;MPSWITCH NOT DEFINED
	.SBTTL	EXE$WFLAND - WAIT FOR LOGICAL AND OF EVENT FLAGS
	.IFF	;MPSWITCH DEFINED
	.SBTTL	MPS$WFLAND - WAIT FOR LOGICAL AND OF EVENT FLAGS
	.IFTF	;MPSWITCH
;++
; FUNCTIONAL DESCRIPTION:
;
	.IFT	;MPSWITCH NOT DEFINED
;	EXE$WFLAND RETURNS TO THE CALLER WHEN THE SET OF EVENT
	.IFF	;MPSWITCH DEFINED
;	MPS$WFLAND RETURNS TO THE CALLER WHEN THE SET OF EVENT
	.IFTF	;MPSWITCH
;	FLAGS SELECTED BY THE MASK ARE ALL SET AND RETURNS THE
;	STATE OF ALL EVENT FLAGS IN THE SPECIFIED CLUSTER.
;
; CALLING SEQUENCE:
;
	.IFT	;MPSWITCH NOT DEFINED
;	CALLG	ARGLIST,EXE$WFLAND
	.IFF	;MPSWITCH DEFINED
;	CALLG	ARGLIST,MPS$WFLAND
	.IFTF	;MPSWITCH
;
; INPUT PARAMETERS:
;
;	04(AP) - EVENT FLAG NUMBER SELECTING CLUSTER
;	08(AP) - MASK SELECTING COMBINATION OF EVENTS
;	R4 - PCB ADDRESS OF CURRENT PROCESS
;
; OUTPUT PARAMETERS:
;
;	R0 - COMPLETION STATUS CODE
;	     CONDITION IS SATISFIED.
;
; SIDE EFFECTS: 
;
;	IF THE SET OF EVENT FLAGS SELECTED BY THE MASK ARE NOT
;	ALL SET, THEN THE PROCESS ISSUING THE WAIT SERVICE CALL WILL
;	BE PLACED IN A WAIT STATE.
;
; COMPLETION CODES:
;
;	SS$_NORMAL - NORMAL SUCCESSFUL COMPLETION
;	SS$_ILLEFC - ILLEGAL EVENT FLAG CLUSTER NUMBER.  EVENT NUMBER
;		     NOT IN THE RANGE 0-127.
;	SS$_UNASEFC - UNASSIGNED EVENT FLAG CLUSTER.
	.IFF	;MPSWITCH DEFINED
;
; ENVIRONMENT:
;
;	EXECUTES ON SECONDARY PROCESSOR, MODE=KERNEL.
;	IF INTERRUPTED AT ANY POINT, MAY CONTINUE ON PRIMARY.
	.IFTF	;MPSWITCH
;
;--

	.IFT	;MPSWITCH NOT DEFINED
EXE$WFLAND::				;WAIT FOR LOGICAL AND
	.IFF	;MPSWITCH DEFINED
MPS$WFLAND::				;WAIT FOR LOGICAL AND
	.IFTF	;MPSWITCH
	.WORD	^M<R2,R3,R4,R5>		;REGISTER SAVE MASK FOR R2-R5
	MOVL	#1,R1			;SET MODE TO WAITALL
	BRB	WFRL			;AND MERGE WITH COMMON CODE
	.PAGE
	.IFT	;MPSWITCH NOT DEFINED
	.SBTTL	EXE$WFLOR - WAIT FOR LOGICAL OR OF EVENTS
	.IFF	;MPSWITCH DEFINED
	.SBTTL	MPS$WFLOR - WAIT FOR LOGICAL OR OF EVENTS
	.IFTF	;MPSWITCH
;++
; FUNCTIONAL DESCRIPTION:
;
	.IFT	;MPSWITCH NOT DEFINED
;	EXE$WFLOR RETURNS TO THE CALLER WHEN ANY OF THE
	.IFF	;MPSWITCH DEFINED
;	MPS$WFLOR RETURNS TO THE CALLER WHEN ANY OF THE
	.IFTF	;MPSWITCH
;	EVENTS SELECTED BY THE MASK WITHIN THE SPECIFIED CLUSTER
;	ARE SET AND RETURNS THE STATE OF ALL 32 EVENT FLAGS IN THE
;	CLUSTER.
;
; CALLING SEQUENCE:
;
	.IFT	;MPSWITCH NOT DEFINED
;	CALLG	ARGLIST,EXE$WFLOR
	.IFF	;MPSWITCH DEFINED
;	CALLG	ARGLIST,MPS$WFLOR
	.IFTF	;MPSWITCH
;
; INPUT PARAMETERS:
;
;	04(AP) - EVENT FLAG NUMBER TO SELECT CLUSTER
;	08(AP) - MASK SELECTING DESIRED COMBINATION OF EVENTS
;	R4 - PCB ADDRESS OF CURRENT PROCESS
;
; OUTPUT PARAMETERS:
;
;	R0 - COMPLETION STATUS CODE
;	     IS SATISFIED.
;
; COMPLETION CODES:
;
;	SS$_NORMAL - NORMAL SUCCESSFUL COMPLETION
;	SS$_ILLEFC - ILLEGAL EVENT FLAG NUMBER NOT IN THE RANGE 0-127.
;	SS$_UNASEFC - UNASSIGNED EVENT FLAG CLUSTER.
;
; SIDE EFFECTS:
;
;	THE PROCESS ISSUING THE SERVICE CALL IS BE PLACED IN A
;	WAIT STATE IF NONE OF THE SPECIFIED EVENTS ARE SET.
	.IFF	;MPSWITCH DEFINED
;
; ENVIRONMENT:
;
;	EXECUTES ON SECONDARY PROCESSOR, MODE=KERNEL.
;	IF INTERRUPTED AT ANY POINT, MAY CONTINUE ON PRIMARY.
	.IFTF	;MPSWITCH
;
;--

	.IFT	;MPSWITCH NOT DEFINED
EXE$WFLOR::				;WAIT FOR LOGICAL OR
	.IFF	;MPSWITCH DEFINED
MPS$WFLOR::				;WAIT FOR LOGICAL OR
	.IFTF	;MPSWITCH
	.WORD	^M<R2,R3,R4,R5>		;REGISTER SAVE MASK FOR R2-R5
	CLRL	R1			;SET MODE TO WAIT ANY
WFRL:	MOVL	MASK(AP),R0		;GET WAIT MASK
	.IFT	;MPSWITCH NOT DEFINED
	BRB	EXE$WAIT		;MERGE WITH COMMON CODE
	.IFF	;MPSWITCH DEFINED
	BRB	MPS$WAIT		;MERGE WITH COMMON CODE
	.IFTF	;MPSWITCH
	.PAGE
	.IFT	;MPSWITCH NOT DEFINED
	.SBTTL	EXE$WAITFR - WAIT FOR SINGLE EVENT
	.IFF	;MPSWITCH DEFINED
	.SBTTL	MPS$WAITFR - WAIT FOR SINGLE EVENT
	.IFTF	;MPSWITCH
;++
; FUNCTIONAL DESCRIPTION:
;
	.IFT	;MPSWITCH NOT DEFINED
;	EXE$WAITFR RETURNS TO THE CALLER WHEN THE SPECIFIED SINGLE
	.IFF	;MPSWITCH DEFINED
;	MPS$WAITFR RETURNS TO THE CALLER WHEN THE SPECIFIED SINGLE
	.IFTF	;MPSWITCH
;	EVENT FLAG IS SET.  UPON RETURN THE STATE OF ALL 32 EVENT FLAGS
;	WITHIN THE CLUSTER CONTAINING THE SPECIFIED EVENT ARE RETURN.
;
; CALLING SEQUENCE:
;
	.IFT	;MPSWITCH NOT DEFINED
;	CALLG	ARGLIST,EXE$WAITFR
	.IFF	;MPSWITCH DEFINED
;	CALLG	ARGLIST,MPS$WAITFR
	.IFTF	;MPSWITCH
;
; INPUT PARAMETERS:
;
;	04(AP)=EVENT FLAG NUMBER
;	R4 - PCB ADDRESS OF CURRENT PROCESS 
;
; OUTPUT PARAMETERS:
;
;	R0 - COMPLETION STATUS CODE
;	     SATISIFIED.
;
; SIDE EFFECTS:
;
;	IF THE SPECIFIED EVENT FLAG IS NOT SET, THE PROCESS ISSUING THE
;	WAIT SYSTEM SERVICE WILL BE PLACED IN THE APPROPRIATE WAIT
;	STATE.
;
; COMPLETION CODES:
;
;	SS$_NORMAL - NORMAL SUCCESSFUL COMPLETION
;	SS$_ILLEFC - ILLEGAL EVENT FLAG NUMBER NOT IN THE RANGE 0-127.
;	SS$_UNASEFC - UNASSIGNED EVENT FLAG CLUSTER.
;
; ENVIRONMENT:
;
	.IFT	;MPSWITCH NOT DEFINED
;	MODE=KERNEL
	.IFF	;MPSWITCH DEFINED
;	EXECUTES ON SECONDARY PROCESSOR, MODE=KERNEL.
	.IFTF	;MPSWITCH
;--

	.IFT	;MPSWITCH NOT DEFINED
EXE$WAITFR::				;WAIT FOR SINGLE EVENT
	.IFF	;MPSWITCH DEFINED
MPS$WAITFR::				;WAIT FOR SINGLE EVENT
	.IFTF	;MPSWITCH
	.WORD	^M<R2,R3,R4,R5>		;SAVE REGISTERS R2,R3,R4,R5
	CLRL	R1			;SET MODE 
	ROTL	EFN(AP),#1,R0		;INIT MASK
	.IFT	;MPSWITCH NOT DEFINED
;	BRB	EXE$WAIT		;AND MERGE WITH COMMON CODE
	.IFF	;MPSWITCH DEFINED
;	BRB	MPS$WAIT		;AND MERGE WITH COMMON CODE
	.IFTF	;MPSWITCH
	.PAGE
	.IFT	;MPSWITCH NOT DEFINED
	.SBTTL	EXE$WAIT - WAIT COMMON CODE
	.IFF	;MPSWITCH DEFINED
	.SBTTL	MPS$WAIT - WAIT COMMON CODE
	.IFTF	;MPSWITCH
;++
; FUNCTIONAL DESCRIPTION:
;
;	THIS IS THE COMMON WAIT CODE FOR ALL THE EVENT FLAG WAIT
;	SYSTEM SERVICES.
;
; INPUT PARAMETERS:
;
;	04(AP) = EVENT FLAG NUMBER
;	R0 = MASK SELECTING EVENTS OF INTEREST
;	R1 = ANY/ALL MODE SELECTOR
;		0 => ANY
;		1 => ALL
;	R4 = PCB ADDRESS OF CURRENT PROCESS
;
; IMPLICIT INPUTS:
;
;	CEB IF NON-LOCAL CLUSTER.
;
; OUTPUT PARAMETERS:
;
;	R0 - COMPLETION STATUS CODE
;	     SATISIFIED.
	.IFF	;MPSWITCH DEFINED
;
; ENVIRONMENT:
;
;	EXECUTES ON SECONDARY PROCESSOR, MODE=KERNEL.
;	IF INTERRUPTED AT ANY POINT, MAY CONTINUE ON PRIMARY.
	.IFTF	;MPSWITCH
;
;--

	.IFT	;MPSWITCH NOT DEFINED
EXE$WAIT:				;WAIT COMMON CODE
	.IFF	;MPSWITCH DEFINED
MPS$WAIT:				;WAIT COMMON CODE
	.IFTF	;MPSWITCH
	CVTBL	EFN(AP),R2		;GET CLUSTER NUMBER
	BLSS	10$			;ILLEGAL IF NOT (0,1,2,3)
	ASHL	#-5,R2,R2		;RIGHT ALIGN CLUSTER NUMBER
	MOVAL	PCB$L_EFCS(R4)[R2],R3	;POINTER TO PCB EVENT CLUSTER
	MOVB	R2,PCB$B_WEFC(R4)	;SAVE WAIT CLUSTER NUMBER
	SOBGTR	R2,30$			;BR IF COMMON CLUSTER R2 = (2,3)
	MOVAQ	G^SCH$GQ_LEFWQ,R2	;SET WAIT QUEUE POINTER
	BRB	WAITCK			;
10$:	MOVZWL	#SS$_ILLEFC,R0		;SET ERROR CODE FOR ILLEGAL CLUSTER
	RET				;AND EXIT
20$:	MOVZWL	#SS$_UNASEFC,R0		;SET ERROR CODE FOR UNASSIGNED
	RET				;AND EXIT
30$:	ADDL3	#CEB$L_EFC,(R3),R2	;GET CEB ADDRESS FOR EVENT FLAGS
	BGEQ	20$			;CEB ASSIGNED (SYSTEM SPACE ADDRESS)
	CMPB	#DYN$C_SLAVCEB,<CEB$B_TYPE-CEB$L_EFC>(R2) ;IS THIS IN SH MEM?
	BNEQ	40$			;BR IF IN LOCAL MEMORY
	MOVL	<CEB$L_MASTER-CEB$L_EFC>(R2),R3 ;GET ADR OF MASTER CEB
	MOVL	CEB$L_EFC(R3),(R2)	;COPY EFC FROM MASTER TO SLAVE CEB
	ASSUME	<CEB$L_EFC+4> EQ CEB$L_WQFL
40$:	MOVAL	(R2)+,R3		;GET EVENT POINTER AND WAIT QUEUE ADDR
					; R3=CEB$L_EFC, R2=CEB$L_WQFL
;
;	R0 - MASK SELECTING EVENTS OF INTEREST
;	R1 - ANY/ALL MODE SELECTOR
;	R2 - ADDRESS OF WAIT QUEUE HEADER
;	R3 - ADDRESS OF EVENT FLAG VECTOR
;	R4 - PCB ADDRESS
;
WAITCK:					;CHECK FOR WAIT SATISFIED
	SETIPL	#IPL$_SYNCH		;BLOCK SCHEDULING ACTIVITY
	BITL	(R3),R0			;WAIT FOR LOGICAL OR MAY BE SATISFIED
	BEQL	WAIT			;NO, MUST WAIT
	BLBS	R1,WAITALL		; 1 => WAIT FOR ALL IN MASK
NOWAIT:					;
	MOVL	12(FP),FP		;GET SAVED FRAME POINTER
	ADDL	S^#EXE$C_CMSTKSZ,SP	;CLEAN STACK TO PC,PSL
	.IFF	;MPSWITCH DEFINED
MPS$WAITCONT::				;CONTINUE HERE AFTER PRIMARY WAITCHK
	.IFTF	;MPSWITCH
	MOVZBL	#SS$_NORMAL,R0		;RETURN SUCCESS CODE
	.IFF	;MPSWITCH DEFINED

	.IF	DF,MPPFMSWT
	BSBW	W^MPS$PFM_KSRV		;COUNT # KERNEL SERVICES EXECUTED
	.ENDC

	.IFTF	;MPSWITCH
	REI				;RETURN TO CALLER

WAITALL:				; WAIT FOR ALL SELECTED EVENTS
	BICL2	(R3),R0			; CLEAR BITS FOR ALREADY SET FLAGS
	.IFT	;MPSWITCH NOT DEFINED
	BEQL	NOWAIT			;YES, DONT WAIT
	.IFF	;MPSWITCH DEFINED
	BEQL	NOWAIT			;YES, DONT WAIT
	.IFTF	;MPSWITCH
WAIT:	INSV	R1,#PCB$V_WALL,#1,PCB$L_STS(R4)	;SET WAIT ALL FLAG
	MCOML	R0,PCB$L_EFWM(R4)	;SAVE INVERTED WAIT MASK
	.IFF	;MPSWITCH DEFINED

;
; WAIT CONDITION IS NOT SATISFIED.  PROCESS IS RETURNED TO THE PRIMARY
; ALONG WITH A REQUEST BIT TO CHECK IF THE WAIT CONDITION IS SATISFIED.
;
; THE SECONDARY WAITS IN ITS IDLE LOOP, WHILE THE PRIMARY CONTINUES
; EXECUTION AT MPS$WAITCK.
;
; THE PROCESS WILL BE IN A STATE READY FOR RESCHEDULING IF THE WAIT
; CONDITION IS NOT SATISFIED, AND THE PRIMARY WILL CONTINUE EXECUTION
; AT SCH$WAIT IN THIS CASE.
;
	IFPRIMARY <JMP G^SCH$WAIT>	;IF PRIMARY, THEN CONTINUE
					;IF SECONDARY, ASK FOR PRIMARY ASSIST
	MOVL	12(FP),FP		;PUT SAVED FRAME POINTER WHERE PRIMARY
					; CAN FIND IT AS IT CAN'T TOUCH STACK
	ADDL	S^#EXE$C_CMSTKSZ,SP	;CLEAN STACK TO PC/PSL OF CHMK INSTR
	SUBL3	#4,(SP),R0		;GET PS/PSL PAIR FOR CHMK INSTRUCTION
	MOVL	4(SP),R1		; INTO A PLACE THE PRIMARY CAN TOUCH
	MOVPSL	-(SP)			;PUT PC/PSL PAIR ON STACK FOR SECONDARY
	PUSHAB	G^MPS$WAITCONT		; PROCESSOR TO CONTINUE EXECUTING PROC
	BBSSI	#MPS$V_SECWAITCK,W^MPS$GL_SECREQFLG,10$ ;IND WAIT CHECK REQUEST
10$:	BRW	MPS$MPSCHED2		;GO WAIT IN IDLE LOOP FOR WORK TO DO

	.PAGE
	.SBTTL	MPS$WAITCK - PRIMARY CHECK WAIT CONDITION FOR POTENTIAL RESCHED
;++
; FUNCTIONAL DESCRIPTION:
;
;	MPS$WAITCK IS EXECUTED BY THE PRIMARY PROCESSOR WHENEVER
;	THE SECONDARY PROCESSOR EXECUTES AN EVENT FLAG WAIT SYSTEM
;	SERVICE THAT CAUSES A PROCESS TO ACTUALLY WAIT.  THE PRIMARY
;	PROCESSOR EXECUTES THIS CODE DUE TO A SECONDARY REQUEST FLAG,
;	DISPATCHED FROM THE SECONDARY RESCHEDULING CODE.  THIS IS
;	ENTERED VIA THE IPL 5 (MULTI-PROCESSING SECONDARY RESCHEDULE
;	REQUEST) INTERRUPT OR THE IPL 3 (PRIMARY RESCHEDULE) INTERRUPT.
;
;	NOTE:  A RACE CONDITION EXISTS IF THE PRIMARY IS IN THE IPL 3
;	HANDLER WHEN THE SECONDARY SETS THE REQUEST FLAG, AND THUS THIS
;	CODE MAY BE EXECUTED FROM THE IPL 3 LOGIC, THOUGH IT IS INTENDED
;	TO BE EXECUTED FROM THE IPL 5 PATH.
;
;	THE SECONDARY HAS DONE A SVPCTX FOR THIS PROCESS JUST PRIOR
;	TO WHERE THE PRIMARY WOULD HAVE EXECUTED SCH$WAIT, IF THE
;	SYSTEM SERVICE WAS BEING EXECUTED ON THE PRIMARY.  THIS
;	ALLOWS THE PRIMARY TO LOOK IN THE HARDWARE PCB FOR THE
;	INFORMATION NEEDED TO CHECK THE EVENT FLAG WAIT CONDITION
;	AND IF RESCHEDULING IS NEEDED, TO CONTINUE EXECUTING
;	THIS PROCESS AT THE EQUIVALENT OF THE SCH$WAIT LOGIC AT
;	SECWAIT.
;
; CALLING SEQUENCE:
;
;	JSB	MPS$WAITCHK
;
; INPUT PARAMETERS:
;
;	MPS$GL_CURPCB - ADDRESS OF PCB FOR CURRENT PROCESS ON SECONDARY
;
;	IN THE PHD FOR THE CURRENT PROCESS ON SECONDARY:
;
;		R0 - PC OF CHMK INSTRUCTION
;		R1 - PSL FOR RE-EXECUTION OF CHMK INSTRUCTION
;		R2 - WAIT QUEUE HEADER ADDRESS
;		R3 - ADDRESS OF EVENT FLAG VECTOR
;		R4 - PCB ADDRESS
;		00(SP) - PC AT WHICH TO RE-EXECUTE THE CHMK INSTRUCTION
;		04(SP) - PSL WITH WHICH TO RE-EXECUTE THE CHMK INSTRUCTION
;
;	ON PRIMARY'S INTERRUPT STACK:
;
;	  IF ENTERED FROM IPL 5 INTERRUPT HANDLER:
;
;		00(SP) - SAVED R0 (AT TIME OF INTERRUPT)
;		04(SP) - SAVED R1 (AT TIME OF INTERRUPT)
;		08(SP) - SAVED R2 (AT TIME OF INTERRUPT)
;		0C(SP) - SAVED R3 (AT TIME OF INTERRUPT)
;		10(SP) - SAVED R4 (AT TIME OF INTERRUPT)
;		14(SP) - SAVED R5 (AT TIME OF INTERRUPT)
;		18(SP) - PC AT TIME OF IPL 5 RESCHEDULE INTERRUPT
;		1C(SP) - PSL AT TIME OF IPL 5 RESCHEDULE INTERRUPT
;
;	  IF ENTERED FROM IPL 3 INTERRUPT HANDLER:
;
;		00(SP) - PC AT TIME OF IPL 3 RESCHEDULE INTERRUPT
;		04(SP) - PSL AT TIME OF IPL 3 RESCHEDULE INTERRUPT
;
;	IPL=SYNCH.
;
; OUTPUTS:
;
;	PROCESS IS EITHER RETURNED TO THE SECONDARY TO CONTINUE EXECUTION
;	OR THIS PROCESS IS PLACED INTO A WAIT STATE AND ANOTHER PROCESS
;	IS SCHEDULED FOR THE SECONDARY.
;
;	R0-R4 MAY BE DESTROYED (IF RPTEVT AST IS DONE).
;
; ENVIRONMENT:
;
;	EXECUTES ON PRIMARY PROCESSOR, MODE=KERNEL, IPL=SYNCH.
;
;--

MPS$WAITCK::
	MOVL	W^MPS$GL_CURPCB,R4	;GET PCB OF CURRENT PROCESS ON SECONDARY
	MOVL	PCB$L_PHD(R4),R5	;GET ADDRESS OF HARDWARE PCB
	MOVL	PHD$L_R2(R5),R2		;GET ADR OF WAIT QUEUE HEADER
	MOVL	PHD$L_R3(R5),R3		;GET ADR OF EVENT FLAG VECTOR IN CEB
	BICL3	PCB$L_EFWM(R4),(R3),R1	;TEST WAIT MASK
	BEQL	30$			;BR IF WAIT NOT SATISFIED
	BBS	#PCB$V_WALL,PCB$L_STS(R4),20$ ;BR IF WAITING FOR ANY FLAGS
;
; RETURN PROCESS TO SECONDARY AS WAIT CONDITION IS SATISFIED.
;
10$:
	MOVL	#MPS$K_BUSYSTATE,W^MPS$GL_STATE ;START SECONDARY EXECUTING PROC

	.IF	DF,MPDBGSWT
	BSBW	W^MPS$PFM_NWAIT
	.ENDC

	RSB				;RETURN TO RESCHEDULING LOGIC TO
					; FINISH EITHER RESTORING REGISTERS
					; (IPL 5) OR SCHED PRIMARY (IPL 3)

;
; CHECK IF ANY OF THE FLAGS WERE SET -- $WFLOR REQUEST.
;
20$:	MCOML	R1,R1			;INVERT MASKED FLAGS
	CMPL	PCB$L_EFWM(R4),R1	;CHECK FOR 'AND' OF ALL FLAGS
	BEQL	10$			;BR IF WAIT SATISFIED
;	BRB	30$			;CONTINUE IF WAIT NOT SATISFIED

;
; PLACE PROCESS IN A WAIT STATE AS WAIT CONDITION IS NOT MET, AND
; RESCHEDULE ANOTHER PROCESS FOR SECONDARY.
;
30$:
;	BRW	SECWAIT			;CONTINUE AT THE EQUIVALENT OF SCH$WAIT
	.IFTF	;MPSWITCH
	.PAGE
	.IFT	;MPSWITCH NOT DEFINED
	.SBTTL	SCH$WAIT - PLACE PROCESS IN SELECTED WAIT QUEUE
;++
	.IFF	;MPSWITCH DEFINED
	.SBTTL	SECWAIT - PLACES SECONDARY'S PROCESS IN SELECTED WAIT QUEUE
;++
	.IFTF	;MPSWITCH
; FUNCTIONAL DESCRIPTION:
;
	.IFT	;MPSWITCH NOT DEFINED
;	SCH$WAIT PLACES THE CURRENT PROCESS IN A WAIT QUEUE
	.IFF	;MPSWITCH DEFINED
;	SECWAIT PLACES THE SECONDARY'S CURRENT PROCESS IN A WAIT QUEUE
	.IFTF	;MPSWITCH
;	SELECTED BY A WAIT QUEUE HEADER ADDRESS SUPPLIED IN A REGISTER
;	A NEW PROCESS IS THEN SELECTED FOR EXECUTION.
;
; CALLING SEQUENCE:
;
	.IFT	;MPSWITCH NOT DEFINED
;	JMP/BR	SCH$WAIT
	.IFF	;MPSWITCH DEFINED
;	JMP	SECWAIT
	.IFTF	;MPSWITCH
;
; INPUT PARAMETERS:
;
	.IFF	;MPSWITCH DEFINED
;	R2 - WAIT QUEUE HEADER ADDRESS
;	R4 - PCB ADDRESS
	.IFT	;MPSWITCH NOT DEFINED
;	EXE$C_CMSTKSZ+00(SP) - PC AT WHICH TO RESTART PROCESS AFTER EF WAIT
;	EXE$C_CMSTKSZ+04(SP) - PSL WITH WHICH TO RESTART PROCESS
	.IFF	;MPSWITCH DEFINED
;	R5 - PHD ADDRESS
;	00(SP) - PC AT WHICH TO RE-EXECUTE THE CHMK INSTRUCTION
;	04(SP) - PSL WITH WHICH TO RE-EXECUTE THE CHMK INSTRUCTION
;
;	ON PRIMARY'S INTERRUPT STACK:
;
;	  IF ENTERED FROM IPL 5 INTERRUPT HANDLER:
;
;		00(SP) - SAVED R0 (AT TIME OF INTERRUPT)
;		04(SP) - SAVED R1 (AT TIME OF INTERRUPT)
;		08(SP) - SAVED R2 (AT TIME OF INTERRUPT)
;		0C(SP) - SAVED R3 (AT TIME OF INTERRUPT)
;		10(SP) - SAVED R4 (AT TIME OF INTERRUPT)
;		14(SP) - SAVED R5 (AT TIME OF INTERRUPT)
;		18(SP) - PC AT TIME OF IPL 5 RESCHEDULE INTERRUPT
;		1C(SP) - PSL AT TIME OF IPL 5 RESCHEDULE INTERRUPT
;
;	  IF ENTERED FROM IPL 3 INTERRUPT HANDLER:
;
;		00(SP) - PC AT TIME OF IPL 3 RESCHEDULE INTERRUPT
;		04(SP) - PSL AT TIME OF IPL 3 RESCHEDULE INTERRUPT
	.IFTF	;MPSWITCH
;
; IMPLICIT INPUTS:
;
	.IFT	;MPSWITCH NOT DEFINED
;	NONE
;
	.IFF	;MPSWITCH DEFINED
;	THIS CODE IS NOT EXECUTING IN THE CONTEXT OF THE PROCESS
;	(AS DOES DOES ITS PRIMARY PROCESSOR COUNTERPART - SCH$WAIT).
;	THEREFORE, THE STACKS CANNOT BE ACCESSED FROM THIS CODE, ONLY
;	THINGS CONTAINED IN THE HARDWARE PCB FOR THIS PROCESS.
;	EVERYTHING NEEDED FOR RESCHEDULING THIS PROCESS HAS BEEN
;	PLACED IN THE HARDWARE PCB BY THE SECONDARY PROCESSOR BEFORE
;	PASSING THIS PROCESS TO THE PRIMARY.
;
;	THE PRIMARY HAS ALREADY SET R2-R5 TO BE THE VALUES FOR THE
;	CURRENT PROCESS ON THE SECONDARY PROCESSOR.  THE PC/PSL FOR
;	THE INSTRUCTION FOR RE-EXECUTING THE CHMK INSTRUCTION ARE ON
;	THE STACK.  THEY ARE ALSO CONTAINED IN R0/R1, SINCE THE PRIMARY
;	CANNOT ACCESS THE STACK.
;
	.IFTF	;MPSWITCH
; SIDE EFFECTS:
;
;	THE PROCESS SPECIFIED BY THE PCB ADDRESS IN R4 IS PLACED 
	.IFT	;MPSWITCH NOT DEFINED
;	IN THE WAIT QUEUE LOCATED BY R2, ITS CONTEXT SAVED,
;	AND A NEW PROCESS SCHEDULED.
	.IFF	;MPSWITCH DEFINED
;	IN THE WAIT QUEUE LOCATED BY R2, AND A NEW PROCESS IS
;	SCHEDULED FOR THE SECONDARY PROCESSOR.
;
; ENVIRONMENT:
;
;	EXECUTES ON PRIMARY PROCESSOR, IPL=SYNCH, MODE=KERNEL.
	.IFTF	;MPSWITCH
;
;--

	.IFT	;MPSWITCH NOT DEFINED
SCH$WAIT::				;PLACE PROCESS IN WAIT STATE
	.IFF	;MPSWITCH DEFINED
SECWAIT:				;PLACE PROCESS IN WAIT STATE
	.IFT	;MPSWITCH NOT DEFINED
	MOVL	12(SP),FP		;RESTORE FP
	ADDL2	S^#EXE$C_CMSTKSZ,SP	;CLEAN UP KERNEL STACK
	SUBL2	#4,(SP)			;BACK UP SAVED PC
SCH$WAITK::				;WAIT WITH STACK ALREADY CLEAN
	.IFF	;MPSWITCH DEFINED
	ADDL	#8,PHD$L_KSP(R5)	;CLEAN PC/PSL OF CHMK INSTR OFF STACK
	MOVL	PHD$L_R0(R5),PHD$L_PC(R5) ;SET PC TO BE CHMK INSTRUCTION
	MOVL	PHD$L_R1(R5),PHD$L_PSL(R5) ;SET PSL BACK FOR CHMK INSTRUCTION
	.IFTF	;MPSWITCH
	INCW	WQH$W_WQCNT(R2)		;INCREMENT COUNT FOR QUEUE
	INSQUE	(R4),WQH$L_WQFL(R2)	;INSERT IN QUEUE
	MOVW	WQH$W_WQSTATE(R2),PCB$W_STATE(R4) ;SET STATE FOR PROCESS
;
;					THE STATE NUMBER IS CONTAINED
;					IN THE QUEUE HEADER
;
	.IFT	;MPSWITCH NOT DEFINED
SCH$WAITL::				;WAIT WITH STATE SET, STACK CLEANED
	SVPCTX				;SAVE PROCESS CONTEXT
SCH$WAITM::				;ENTRY FOR MEMORY MANAGEMENT WAIT CODE
	MOVL	PCB$L_PHD(R4),R5	;GET PROCESS HEADER ADDRESS
	.IFTF	;MPSWITCH
	MOVZWL	G^SCH$GW_IOTA,R0	;Get a longword copy of IOTA
	ADDW	R0,PHD$W_QUANT(R5)	;CHARGE QUOTA FOR VOLUNTARY WAIT
	SUBL2	R0,PHD$L_TIMREF(R5)	;Adjust AWSA time reference
	MOVL	G^EXE$GL_ABSTIM,PCB$L_WAITIME(R4) ;RECORD TIME AT WAIT START
	CMPB	#4,PHD$B_ASTLVL(R5)	;NULL ASTLVL?
	BNEQ	20$			;NO, DO LONG CHECK
	.IFT	;MPSWITCH NOT DEFINED
10$:	BRW	W^SCH$SCHED		;GO SCHEDULE NEXT PROCESS
	.IFF	;MPSWITCH DEFINED
10$:	BBSSI	#LCK$V_INTERLOCK,W^MPS$GL_INTERLOCK,15$ ;FLUSH CACHE QUEUE
15$:	MOVL	#MPS$K_IDLESTATE,W^MPS$GL_STATE ;SET SECONDARY IDLE
	RSB				;RETURN TO SCHEDULE SECONDARY
	.IFTF	;MPSWITCH

20$:	MOVZBL	PHD$B_ASTLVL(R5),R0	;FETCH AND ZERO EXTEND PENDING ASTLVL 
	CMPZV	#PSL$V_CURMOD,#PSL$S_CURMOD,PHD$L_PSL(R5),R0 ;COMPARE WITH WAIT
					;ACCESS MODE
	BLSS	10$			;BRANCH IF AST NOT DELIVERABLE

;
;  Test for assumptions that are being made about the layout of the
;  PSL that enables the next instruction to work correctly.
;
;	o  IPL field begins on a byte boundary
;	o  IPL field fits into a single byte


	ASSUME	<<<PSL$V_IPL/8>*8> - PSL$V_IPL> EQ 0 ; IPL must be byte aligned
	ASSUME	PSL$S_IPL LE 8		; IPL field must fit into byte

	BITB	#<PSL$M_IPL@-PSL$V_IPL>,-
		<PSL$V_IPL/8>+PHD$L_PSL(R5) ;MUST BE AT IPL 0 FOR DELIVERY
	BNEQ	10$			;BRANCH IF AST NOT DELIVERABLE
	CLRL	R2			;SET NULL PRIORITY INCREMENT
	.IFT	;MPSWITCH NOT DEFINED
	RPTEVT	AST			;REPORT AST EVENT
	.IFF	;MPSWITCH DEFINED
	RPTEVT	AST,JSB			;REPORT AST EVENT
	.IFTF	;MPSWITCH
	BRB	10$			;GO SCHEDULE NEXT PROCESS
	.ENDC	;MPSWITCH

	.END
