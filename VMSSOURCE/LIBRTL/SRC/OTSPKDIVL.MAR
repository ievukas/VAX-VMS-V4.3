	.title	ots$div_pk_long
	.ident	/1-001/					; Edit DG1001
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
;
; routine:
;
;	OTS$DIV_PK_LONG
;
;
; facility:
;
;	VAX/VMS OTS runtime library.
;
; abstract:
;
;	Runtime routine performs fixed decimal (packed decimal) division.
;	The routine is called  when precision and scale  requirements for
;	the quotient imply multiple  precision  division.  The routine is
;	only called when such multiple precision division is required and
;	when the divisor has a precision of  30 or 31 decimal digits.
;	(Call   ots$div_pkshort   if   multiple   precision  division  is
;	required and the divisor has precision less than 30 decimal digits).
;
; author: Peter Baum  30-jun-1980
;
; modifications:
;
;
;	1-001	Debess Grabazs	5-March-1984
;		Change PLI routine to OTS routine.
;
;
;
;
;
; documentation file: THEORY.MEM
;
; functional description:
;
;	This routine calculates:
;
;	z = x / y
;
;	let a = scale(z) + scale(y) - scale(x)  - 31 + prec(x)
;	    b = scale(z) + scale(y) - scale(x) + prec(x)
;	    c = 31 - prec(x)
;	    d = 31 - prec(y)
;
;	this routine is called if b > 31 and d < 2
;
;	Prior to the call:
;		if c not 0 then shift x left by c.
;		Thus x is a 31 digit packed decimal.
;
;
;
;
;	input:
;		0(ap)	# of arguments
;		4(ap)	address of dividend (shifted left by c)
;		8(ap)	address of divisor
;		12(ap)	precision of divisor (high order bytes zeroed)
;		16(ap)	address of quotient
;		20(ap)	precision of quotient (high order bytes zeroed)
;		24(ap)	a as defined above(high order bytes zeroed)
;
;
;	output:
;		quotient returned at address specified by 16(ap)
;
;
; optimization notes:
;
;	1) Optimized for speed, not space.
;	2) Optimized for y > 0.
;	3) Assumes speed for register to register operations are the same
;	   for byte operations and longword operations.
;	4) Many  packed  instruction  sequences were timed. Do not change
;	   unless  actual  tests  are  made  to determine relative speed.
;	   Tests were made on 11/780 and Comet.
;
;
;
; possible optimizations:
;
;	1) currently  we  always calculate the next 15 digits each
;	iteration  and then truncate the last iteration as part of
;	the  final  step.   We  might be able to go through making
;	calculations with fewer digits on this last pass.
;
;	2) the  classical  trade-off  involving  flow  paths which
;	could  be  merged  (sometimes  resulting  in  things  like
;	adding 0) or merged with switches or left alone (resulting
;	in  space-speed  tradeoff in favor of space). Since we are
;	running on a virtual machine, even the speed factor is not
;	obvious.  This  came  up when remainder was 0, when borrow
;	was  not  needed,  when less than 15 digits where required
;	for  the  last  part  of  the  quotient,  and when the new
;	algorithm  had  found  precisely  what  the next 15 digits
;	were  but  did not have a value yet for the remainder (the
;	other algorithms always have a remainder when the quotient
;	is known).
;
;	3) New algorithm - special case y2=0
;
;	4) New algorithm - optimize branches according to probable
;	sign of R(H).
;
;
;
;
; variable use: 
;
;               size
;               in
;     variable  digits            use
;    ---------  ------   ---------------------------
;	y1	15	High order digits of divisor.
;	y2	16	Low order digits of divisor.
;	x	31	Initially dividend, thereafter
;			remainders of successive divide
;			operations.
;	z	py(ap)	Quotient.
;	z2	31	Temporarily holds trial low
;			order digits of quotient.
;	t1	31	High order digits of the remainder.
;	t2	31	Holds the 15 low order digits of the
;			46 digit remainder. 31 digits for 
;			possible later changes.
;	t3	16	Holds the low order digits of the
;			remainder.
;	t4	31	Temporary used because packed instructions can
;			not overlap their operands.
;
;
;
;
;
;
; register usage:
;
;   register                use
;   --------   -------------------------------------------------
;	r6	a = additional digits of precision required
;	r7	stky(sp) which holds a copy of divisor
;	r8	py(ap) = precision of y
;	r9	r = number of additional digits of the quotient
;		that are to be found for next step
;       r10	z(ap)
;	r11	pz(ap) = precision of quotient
;
;
;--
;
; stack offsets for work area
;
	$offset	0,,<-			;
	<,16>,-				;x, 31 digits
	<stky1,8>,-			;y1 15 digits
	<stky2,9>,-			;y2 16 digits
	<stkz2,16>,-			;z2 31 digits
	<stkt1,16>,-			;t1 31 digits
	<stkt2,16>,-			;t2 31 digits (15 digits used)
	<stky,16>,-			;y  31 digits
	<stkt3,9>,-			;t3 16 digits
	<stkt4,16>,-			;t4 31 digits
	<stksign,1>,-			;sign of quotient, 2 bits
	<stklen,0>,-			;length of work area
	>				;
;
; parameter offsets
;
	$offset	4,,<-			;
	<x>,-				;x = dividend by reference
	<y>,-				;y = divisor by reference
	<py>,-				;prec(y) by value
	<z>,-				;z = quotient by reference
	<pz>,-				;prec(z) by value
	<consta>,-			;a as defined above
	>				;
;
; 	psect declarations
;
	.psect _ots$code pic, usr, con, rel, lcl, shr, -
			exe, rd, nowrt, long
;
; constant data area
;
one:	.packed	+1			;
zero:	.packed +0			;
;**warning** the following two data definitions must be contiguous
nines:	.byte	9			;10**16 - 1 (must be followed by 10**15-1)
nine15:	.packed +999999999999999	;10**15 - 1
bignine:.packed +0000000000000009999999999999999 ;10**16 - 1
ten15:	.packed +1000000000000000	;10**15
neg9:	.packed -9999999999999999	;-(10**16 - 1)
;
; local symbol definitions
;
bytes_to_sign=15			;bytes to sign for fixed decimal 31
;
; run time routine ots$div_pk_long
;
	.entry	ots$div_pk_long,^M<iv,dv,r2,r3,r4,r5,r6,r7,r8,r9,r10,r11>
	movab	-stklen(sp),sp		;make room for temporaries
	movl	consta(ap),r6		;get value of a
	movab	stky(sp),r7		;address of copy of divisor
	movl	py(ap),r8		;precision of divisor
	movl	z(ap),r10		;save address of quotient
	movl	pz(ap),r11		;precision of quotient
	clrb	stksign(sp)		;clear sign flag
	movp	#31,@x(ap),(sp)		;move x, set cond. code
	bgtr	50$			;branch if x > 0
	blss	40$			;branch if x < 0
;
;x = 0
;
	cmpp4	#0,zero,r8,@y(ap)	;divisor zero?
	beql	30$			;branch if divide by 0
	ashp	#0,#0,zero,#0,r11,(r10) ;z = 0
	ret
30$:	divp	#0,zero,#0,zero,r11,(r10) ;cause divide by zero
	ret
;
;x not 0
;
40$:					;
	incb	stksign(sp)		;set low order bit
	decb	bytes_to_sign(sp)	;x < 0 so make it positive
;
;determine sign of y
;y may be 0 at this point
;optimized for y>0
;
50$:					;
	movp	r8,@y(ap),(r7)		;move y into temporary
	bgeq	60$			;branch if so
	incb	stksign(sp)		;set neg indicator
	subp6	r8,@y(ap),#0,zero,r8,(r7) ;convert to positive
;
;get y1 and y2
;
60$:					;
	ashp	#-16,r8,(r7),#0,#15,stky1(sp) ;high order 15 digits of y
	ashp	#16,#15,stky1(sp),#0,#31,stkt1(sp) ;y with 16 low order zeroed
	subp6	#31,stkt1(sp),r8,(r7),#16,stky2(sp) ;16 low order digits y
;
;prec(y) is large enough for y1 to possibly not be 0
;
	cmpp4	#0,zero,#15,stky1(sp)	;y1=0?
	beql	80$			;branch if y1 is zero
	brw	200$			;branch if y1 is not zero
;
; y2(16) holds all of y
;
80$:					;
	cmpp4	#31,(sp),#16,stky2(sp)	;x<y ?
	blss	95$			;branch if x<y; shift x by 15 is ok
	divp	#16,stky2(sp),#31,(sp),r11,(r10) ;z=x/y2
	mulp	#16,stky2(sp),r11,(r10),#31,stkt1(sp) ;t1=(x/y2)*y2
	brb	110$			;
95$:	ashp	#0,#0,zero,#0,r11,(r10) ;clear quotient
	brb	115$
100$:	mulp	#16,stky2(sp),#15,stkz2(sp),#31,stkt1(sp) ;t1=y2*z2
110$:	subp4	#31,stkt1(sp),#31,(sp)	;x=x-t1
	beql	150$			;branch if remainder = 0
;
;determine r, the number of the next low order digits to obtain
;
115$:	movl	#15,r9			;r=15
	cmpl	r6,r9			;a>15?
	bgeq	130$			;branch if larger
	movl	r6,r9			;r=a
130$:	ashp	r9,#31,(sp),#0,#31,stkt1(sp) ;shift x left by r
	movp	#31,stkt1(sp),(sp)	;copy back into x
	ashp	r9,r11,(r10),#0,r11,stkt1(sp) ;shift z left by r
	movp	r11,stkt1(sp),(r10)	;copy back into z
	divp	#16,stky2(sp),#31,(sp),#15,stkz2(sp) ;z2(15)=x/y2
	addp4	#15,stkz2(sp),r11,(r10)	;z=z+z2
	subl2	r9,r6			;a=a-r
	bneq	100$			;branch if more
140$:	blbs	stksign(sp),155$	;branch if quotient <0
	ret				;
;
;remainder = 0
;
150$:					;remainder = 0
	ashp	r6,r11,(r10),#0,r11,stkt1(sp) ;account for scale
	blbs	stksign(sp),160$	;branch if quotient is negative
	movp	r11,stkt1(sp),(r10)	;copy back into quotient
	ret				;
155$:	movp	r11,(r10),stkt1(sp)	;copy quotient into temporary
160$:					;enter if t1 holds quotient
	subp6	r11,stkt1(sp),#0,zero,r11,(r10) ;make z negative
	ret
;
;New division algorithm
;
200$:					;
;
;insure that we have x<y
;
	cmpp4	#31,(sp),r8,(r7)	;x<y?
	blss	220$			;branch if x < y
	divp	r8,(r7),#31,(sp),r11,(r10) ;z=x/y
	mulp	r11,(r10),r8,(r7),#31,stkt1(sp);t1=y*z
	subp4	#31,stkt1(sp),#31,(sp)	;x=x-t1
	beql	150$			;branch if remainder is zero
	brb	230$			;
220$:	ashp	#0,#0,zero,#0,r11,(r10)	;clear quotient
;
;Assumes z is defined
;	0 < x < y
;	and r6=a gives the number of additional digits required.
;Determine r = # of digits for next part of quotient.
;
230$:	movl	r6,r9			;r=a
	cmpl	r6,#15			;a>15?
	bleq	240$			;branch if larger
	movl	#15,r9			;r=15
240$:	subl2	r9,r6			;update r6 = a
;
;calculate z2 = min(B-1,[x/y1])
;
250$:					;
	divp	#15,stky1(sp),#31,(sp),#31,stkt1(sp);t1=x/y1
	cmpp4	#31,stkt1(sp),#16,nines	;t1>10**16-1?
	bleq	310$			;branch if not
	movp	#15,nine15,stkz2(sp)	;move in base-1
	brb	320$			;skip ashp, you have 15 digits
;
;calculate y2*z2
;	t3 = high order 16 digits of y2*z2
;	t2 =  low order 15 digits of y2*z2
;
310$:
	ashp	#-1,#31,stkt1(sp),#0,#15,stkz2(sp) ;we only get 15 digits
320$:	mulp	#15,stkz2(sp),#16,stky2(sp),#31,stkt1(sp) ;t1=y2*z2
	ashp	#-15,#31,stkt1(sp),#0,#16,stkt3(sp) ;t3(16)=t1 shifted right 15
	ashp	#15,#16,stkt3(sp),#0,#31,stkt4(sp) ;t4(31) = t3 shifted left 15
	subp6	#31,stkt4(sp),#31,stkt1(sp),#15,stkt2(sp) ;t2(15)=t1-t4
	beql	330$			;branch if no borrow required
;
;borrow is -1, t2 not 0
;calculate R(H) =
;	t1(31) = 31 high order digits of x(46) - y*z2
;	t2(15) = 15  low order digits of x(46) - y*z2
;
	mulp	#15,stkz2(sp),#15,stky1(sp),#30,stkt4(sp) ;t4(30)=y1*z2
	ashp	#1,#30,stkt4(sp),#0,#31,stkt1(sp);31 high order of 46
	addp4	#16,stkt3(sp),#31,stkt1(sp) ;t1(31)=t1(31)+t3(16)
	subp6	#31,stkt1(sp),#31,(sp),#31,stkt4(sp) ;t4=x-t1
	bleq	325$			;branch if R(H) negative (t4 < = 0)
	subp6	#1,one,#31,stkt4(sp),#31,stkt1(sp) ;t1=t4-1 (borrow 1)
	subp6	#15,stkt2(sp),#16,ten15,#15,stkt4(sp) ;t4=10**15-t2
	movp	#15,stkt4(sp),stkt2(sp)	;copy back into t2
	brb	370$			;
325$:	movp	#31,stkt4(sp),stkt1(sp)	;make t1 hold high order R(H)
	brw	500$			;R(H) < 0 (can not be zero)
;
;no borrow, t2 = 0
;calculate R(H) = t1(31) = 31 high order digits of x(46) - y*z2
;		  t2(15) = 0 = 15 low order digits of x(46) - y*z2
;
330$:
	mulp	#15,stkz2(sp),#15,stky1(sp),#30,stkt1(sp) ;t1(30)=z2(15)*y1(15)
	ashp	#1,#30,stkt1(sp),#0,#31,stkt4(sp) ;31 high order 46
	addp4	#16,stkt3(sp),#31,stkt4(sp) ;t4=t3(16)+t4
	subp6	#31,stkt4(sp),#31,(sp),#31,stkt1(sp) ;t1=x-t4
	bneq	370$			;branch if remainder not zero
;
;************************************************************************
;*									*
;* R(H) = 0 , i.e.							*
;*remainder is zero							*
;*z2(15) holds last non-zero digits of the quotient			*
;*quotient has not been shifted yet to recieve z2                       *
;*                                                                      *
;* this is a local routine with no exit other than ret                  *
;************************************************************************
;
340$:
	ashp	r9,r11,(r10),#0,r11,stkt4(sp) ;t4=z shifted left by r9=r
	movp	r11,stkt4(sp),(r10)	;copy back quotient
	subl2	#15,r9			;shift needed to leave r9 digits
	ashp	r9,#15,stkz2(sp),#0,#15,stkt1(sp);low order digits of z
	addp4	#15,stkt1(sp),r11,(r10) ;z=z+z2
	tstl	r6			;a = 0 ?
	beql	395$			;branch if a=0 (last iteration)
	ashp	r6,r11,(r10),#0,r11,stkt1(sp);adjust for scale
350$:	blbs	stksign(sp),410$	;branch if quotient < 0
	movp	r11,stkt1(sp),(r10)	;back into quotient
	ret
370$:	blss	500$			;branch if R(H)<0
;
;************************************************************************
;*R(H) > 0 ,  i.e.							*
;* t1 > 0								*
;*									*
;************************************************************************
;
380$:	ashp	r9,r11,(r10),#0,r11,stkt4(sp) ;t4=z shifted left by r9=r
	movp	r11,stkt4(sp),(r10)	;copy back quotient
	tstl	r6			;a = 0 ?
	beql	390$			;branch if a=0 (last iteration)
;
;a not 0
;
	addp4	#15,stkz2(sp),r11,(r10) ;z=z+z2
	ashp 	#15,#31,stkt1(sp),#0,#31,stkt4(sp) ;t4=t1 shifted left 15
	addp6	#31,stkt4(sp),#15,stkt2(sp),#31,(sp) ;x=t4+t2
	brw	230$
;
;a = 0
;
390$:	subl2	#15,r9			;shift needed to leave r9 digits
	ashp	r9,#15,stkz2(sp),#0,#15,stkt1(sp);low order digits of z
	addp4	#15,stkt1(sp),r11,(r10)	;z=z+z2
395$:	blbs	stksign(sp),400$	;branch if quotient <0
	ret				;
400$:					;
	movp	r11,(r10),stkt1(sp)	;make copy of quotient
410$:	subp6	r11,stkt1(sp),#0,zero,r11,(r10) ;make z negative
	ret
;
;************************************************************************
;*									*
;*R(H) < 0 								*
;* so check if R(H) + Y > = 0						*
;*									*
;************************************************************************
;
500$:
	cmpp4	#31,stkt1(sp),#16,neg9	;t1< -(10**16-1) ?
	blss	600$			;branch if R(H) + Y < 0
	ashp	#15,#31,stkt1(sp),#0,#31,stkt4(sp) ;shift t1 left 15
	subp6	#15,stkt2(sp),#31,stkt4(sp),#31,stkt1(sp) ;t1=t1-t2
	addp4	r8,(r7),#31,stkt1(sp)	;t1=t1+y
	blss	600$			;branch if R(H) + Y < 0
	beql	530$			;branch if no remainder (first adjust z2)
	subp4	#1,one,#15,stkz2(sp)	;z2=z2-1
	ashp	r9,r11,(r10),#0,r11,stkt4(sp) ;t4=z shifted left by r9=r
	movp	r11,stkt4(sp),(r10)	;copy back quotient
	tstl	r6			;a = 0 ?
	beql	510$			;branch if a=0 (last iteration)
;
;a not 0
;
	addp4	#15,stkz2(sp),r11,(r10) ;z=z+z2
	movp	#31,stkt1(sp),(sp)	;x=t1
	brw	230$
;
;a = 0
;
510$:	subl2	#15,r9			;shift needed to leave r9 digits
	ashp	r9,#15,stkz2(sp),#0,#15,stkt1(sp);low order digits of z
	addp4	#15,stkt1(sp),r11,(r10)	;z=z+z2
	blbs	stksign(sp),400$	;branch if quotient <0
	ret
;
;remainder is zero
;
530$:	subp4	#1,one,#15,stkz2(sp)	;z2=z2-1
	brw	340$			;go add to quotient, then ret
;
;************************************************************************
;*									*
;*R(H) + Y < 0								*
;*calculate L = min(B-1,[X/(y1+1)])					*
;* by theorem 5, L=[X/(y1+1)]                                           *
;*									*
;************************************************************************
;
600$:	addp6	#1,one,#15,stky1(sp),#16,stkt3(sp) ;t3=y1+1
	divp	#16,stkt3(sp),#31,(sp),#16,stkt1(sp) ;t1=x/t3
;
;split up y2*L
;	t3 = high order 16 digits of y2*L
;	t2 = low  order 15 digits of y2*L
	ashp	#-1,#16,stkt1(sp),#0,#15,stkz2(sp) ;we only get 15 digits
	mulp	#15,stkz2(sp),#16,stky2(sp),#31,stkt1(sp) ;t1=y2*z2
	ashp	#-15,#31,stkt1(sp),#0,#16,stkt3(sp) ;t3(16)=t1 shifted right 15
	ashp	#15,#16,stkt3(sp),#0,#31,stkt4(sp) ;t4(31) = t3 shifted left 15
	subp6	#31,stkt4(sp),#31,stkt1(sp),#15,stkt2(sp) ;t2(15)=t1-t4
;
;************************************************************************
;*									*
;* calculate R(L)							*
;*									*
;************************************************************************
;
	beql	630$			;branch if no borrow required
;
;borrow is -1, t2 not 0
;calculate R(L) =
;	t1(31) = 31 high order digits of x(46) - y*z2
;	t2(15) = 15  low order digits of x(46) - y*z2
;note: it is always true that R(L) > = 0
;
	subp6	#15,stkt2(sp),#16,ten15,#15,stkt4(sp) ;t4=10**15-t2
	movp	#15,stkt4(sp),stkt2(sp)	;copy back into t2
	mulp	#15,stkz2(sp),#15,stky1(sp),#30,stkt4(sp) ;t4(30)=y1*z2
	ashp	#1,#30,stkt4(sp),#0,#31,stkt1(sp) ;high order 31 of 46
	addp4	#16,stkt3(sp),#31,stkt1(sp) ;t1(31)=t1(31)+t3(16)
	subp6	#31,stkt1(sp),#31,(sp),#31,stkt4(sp) ;t4=x-t1
	subp6	#1,one,#31,stkt4(sp),#31,stkt1(sp) ;t1=t4-1 (borrow 1)
	brb	700$			;
;
;no borrow, t2 = 0
;calculate R(L) = t1(31) = x - y1*z2
;
630$:
	mulp	#15,stkz2(sp),#15,stky1(sp),#30,stkt1(sp) ;t1(30)=y1*z2
	ashp	#1,#30,stkt1(sp),#0,#31,stkt4(sp) ;high order 31 of 46
	addp4	#16,stkt3(sp),#31,stkt4(sp) ;t4(31)=t4(31)+t3(16)
	subp6	#31,stkt4(sp),#31,(sp),#31,stkt1(sp) ;t1=x-t4
;
;************************************************************************
;*									*
;* calculate Z2 = L + R(L)/Y						*
;*									*
;************************************************************************
;
700$:	ashp	#15,#31,stkt1(sp),#0,#31,stkt4(sp) ;shift t1 left 15
	addp4	#15,stkt2(sp),#31,stkt4(sp) ;t4=t4+t2
	divp	r8,(r7),#31,stkt4(sp),#15,stkt1(sp) ;t1=t4/y
	addp4	#15,stkt1(sp),#15,stkz2(sp) ;z2=z2+t1
	brw	320$			;

	.end
