MODULE SWITVL (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This module contains routines that switch file ACP context from
!	one volume to another.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  8-Nov-1978  13:35
!
! MODIFIED BY:
!
!	V03-004	CDS0004		Christian D. Saether	30-Dec-1983
!		Use L_NORM linkage and BIND_COMMON macro.
!
!	V03-003	CDS0003		Christian D. Saether	15-Oct-1983
!		Remove call to flush_lock_basis.  This is called
!		from allocation_unlock now.
!
!	V03-002	CDS0002		Christian D. Saether	14-Sep-1983
!		Release and reacquire correct volume lock, if held.
!
!	V03-001	CDS0001		Christian D. Saether	27-Aug-1983
!		Remove reference to GET_CCB and use IO_CCB cell instead.
!
!	B0103	ACG0082		Andrew C. Goldstein,	13-Nov-1979  23:56
!		Remove FLUSH_BUFFERS call due to write-back cacheing
!
!	B0102	ACG0082		Andrew C. Goldstein,	5-Nov-1979  14:52
!		Changes for write-back cacheing
!
!	B0101	ACG0037		Andrew C. Goldstein,  7-May-1979  15:15
!	Range check RVN before indexing into RVT;
!	allow RVN 1 on single volumes
!
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


FORWARD ROUTINE
	SWITCH_VOLUME	: L_NORM NOVALUE, ! switch context to specified RVN
	SWITCH_CHANNEL	: L_NORM NOVALUE; ! switch channel assignments

GLOBAL ROUTINE SWITCH_VOLUME (NEW_RVN) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine switches the ACP context to the specified RVN. It
!	assigns the current channel to the new unit.
!
!
! CALLING SEQUENCE:
!	SWITCH_VOLUME (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: relative volume number to switch to
!
! IMPLICIT INPUTS:
!	CURRENT_UCB: UCB address of current volume
!	CURRENT_VCB: VCB address of current volume
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	context switched to new volume
!
!--

BEGIN

BIND_COMMON;

EXTERNAL ROUTINE
	ALLOCATION_LOCK	: L_NORM NOVALUE, ! acquire volume lock for current volume
	ALLOCATION_UNLOCK : L_NORM;	! release current volume lock.

LOCAL
	VOLOCK,				! remember whether volume lock held.
	RVN,				! filtered RVN desired
	RVT		: REF BBLOCK,	! address of relative volume table
	UCB		: REF BBLOCK;	! address of new UCB


! First check if a volume switch is necessary. Extract the true RVN part
! (removing extended file ID if present), check for zero and compare it
! against the current RVN.
!

RVN = .NEW_RVN<0,16>;
IF .CURRENT_VCB[VCB$V_EXTFID]
THEN RVN = .NEW_RVN<0,8>;

IF .RVN EQL 0 OR .RVN EQL .CURRENT_RVN
THEN RETURN;

! Get the RVT and from it the UCB address we are switching to. Nonexistence
! of either is an error.
!

RVT = .CURRENT_VCB[VCB$L_RVT];
IF .RVT EQL .CURRENT_UCB
THEN
    BEGIN
    IF .RVN EQL 1
    THEN RETURN
    ELSE ERR_EXIT (SS$_NOTVOLSET);
    END;

IF .RVN GTRU .RVT[RVT$B_NVOLS]
THEN ERR_EXIT (SS$_DEVNOTMOUNT);

UCB = .VECTOR [RVT[RVT$L_UCBLST], .RVN-1];
IF (
    IF .UCB EQL 0
    THEN 1
    ELSE NOT .BBLOCK [UCB[UCB$L_DEVCHAR], DEV$V_MNT]
    )
THEN ERR_EXIT (SS$_DEVNOTMOUNT);

IF .UCB[UCB$B_TYPE] NEQ DYN$C_UCB
THEN BUG_CHECK (NOTUCBRVT, FATAL, 'Not UCB pointer in RVT');

! Unlock current volume lock, if held, and remember whether there was one.
!

VOLOCK = 0;

IF .LB_LOCKID [0] NEQ 0
THEN
    BEGIN
    ALLOCATION_UNLOCK ();
    VOLOCK = 1;
    END;

! Finally shuffle the channels and pointers about.
!

SWITCH_CHANNEL (.UCB);

! If we had a volume lock before, reacquire it for the volume we
! just switched to.
!

IF .VOLOCK
THEN
    ALLOCATION_LOCK ();

END;					! end of routine SWITCH_VOLUME

GLOBAL ROUTINE SWITCH_CHANNEL (UCB) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine reassigns the ACP's channels to the specified UCB
!	and fixes up the associated pointers. It must be called in
!	kernel mode.
!
!
! CALLING SEQUENCE:
!	SWITCH_CHANNEL (ARG1)
!
! INPUT PARAMETERS:
!	ARG1: UCB address of new device
!
! IMPLICIT INPUTS:
!
!	IO_CHANNEL: channel number of primary channel
!	IO_CCB: CCB of IO_CHANNEL
!	CURRENT_UCB: address of current UCB
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	CURRENT_UCB: contains address of new UCB
!	CURRENT_VCB: address of new VCB
!	CURRENT_RVN: RVN of new volume
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	channels reassigned
!
!--

BEGIN

MAP
	UCB		: REF BBLOCK;	! UCB address arg

BIND_COMMON;


! Stuff the desired UCB address into IO_CHANNEL's CCB.
! Fix up other global pointers.
!

IO_CCB [CCB$L_UCB] = .UCB;

CURRENT_UCB = .UCB;
CURRENT_VCB = .UCB[UCB$L_VCB];

IF .CURRENT_VCB EQL 0
THEN BUG_CHECK (NOTUCBRVT, FATAL, 'Bad UCB pointer in RVT');
IF .CURRENT_VCB[VCB$B_TYPE] NEQ DYN$C_VCB
THEN BUG_CHECK (NOTVCBUCB, FATAL, 'Bad VCB pointer in UCB');

CURRENT_RVN = .CURRENT_VCB[VCB$W_RVN];

END;					! end of routine SWITCH_CHANNEL

END
ELUDOM
