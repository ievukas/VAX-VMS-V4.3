MODULE SMG$DISPLAY_DHDW ( %TITLE 'Display double high/double wide chars'
		IDENT = '1-004'		! File: SMGDISDHW.B32 Edit: STAN1004
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Screen Management
!
! ABSTRACT:
!
!	This module contains routines to write double high/double wide 
!	characters to a virtual display.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: P. Levesque, CREATION DATE: 20-Jul-1983
!
! MODIFIED BY:
!
! 1-001	- Original.  PLL 20-Jul-1983
! 1-002 - More tweaks to cursor position.  PLL 31-Aug-1983
! 1-003 - Check the length of the string before moving it into the
!	  DCB buffer.  PLL 7-Oct-1983
! 1-004 - Don't say just one line has changed in DHW. STAN 7-Jul-1984.
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

REQUIRE 'RTLIN:SMGPROLOG';

REQUIRE 'RTLIN:STRLNK';		! JSB linkage for string routines
!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
	SMG$PUT_CHARS_WIDE,		! Write dbl wide chars
	SMG$PUT_CHARS_HIGHWIDE,		! Write dbl high dbl wide chars
	SMG$PUT_LINE_WIDE;		! Write dbl wide w/advance

!
! INCLUDE FILES:
!


!
! MACROS:
!

!+
! The following macro determines whether scrolling up, down, or neither
! should occur.
!-

MACRO $SMG$SET_SCROLLING (SWITCH) =
    BEGIN
    SWITCH = 0;
    IF .DCB [DCB_V_FULL] NEQ 0
    THEN
	BEGIN
	IF .DCB [DCB_W_CURSOR_ROW] EQL .DCB [DCB_W_BOTTOM_OF_SCRREG]
	THEN
	    SWITCH = 1	! scroll up
	ELSE
	    IF .DCB [DCB_W_CURSOR_ROW] EQL .DCB [DCB_W_TOP_OF_SCRREG]
	    THEN
		SWITCH = 2; ! scroll down
	END;
    END;%;	

!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
EXTERNAL ROUTINE
	LIB$ANALYZE_SDESC_R2 : LIB$ANALYZE_SDESC_JSB_LINK,
	SMG$$SCROLL_AREA,		! scroll virtual display area
	SMG$$CHECK_FOR_OUTPUT_DCB,	! check if time to repaint display
	SMG$$PUT_TEXT_TO_BUFFER;	! put text in DCB buffer
EXTERNAL LITERAL
	SMG$_INVDIS_ID,			! Invalid display id
	SMG$_INVARG,			! Invalid argument
	SMG$_INVCOL,			! Invalid column number
	SMG$_INVROW,			! Invalid row number
	LIB$_INVSTRDES,			! Invalid string descriptor
	SMG$_WRONUMARG;			! Wrong number of arguments


%SBTTL 'SMG$PUT_CHARS_WIDE - Write wide characters'
GLOBAL ROUTINE SMG$PUT_CHARS_WIDE (
					DISPLAY_ID,
					TEXT : REF BLOCK [,BYTE],
					LINE_NO,
					COL_NO,
					RENDITION_SET,
					RENDITION_COMPLEMENT,
					CHAR_SET 
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes double wide characters to a virtual
!	display.  The line can not contain a mixture of single
!	wide and double wide characters; if the line previously
!	contained single wide, then the entire line will be re-
!	written, otherwise only the specified text is written.
!
!	The internal cursor position is left at the character
!	position following the text written.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SMG$PUT_CHARS_WIDE (DISPLAY_ID.rl.r,
!					       TEXT.rt.dx,
!					       [,LINE_NO.rl.r, COL_NO.rl.r]
!					       [,RENDITION_SET.rl.r]
!					       [,RENDITION_COMPLEMENT.rl.r]
!					       [,CHAR_SET.rl.r]
!
! FORMAL PARAMETERS:
!
!	DISPLAY_ID.rl.r		Display id of virtual display
!
!	TEXT.rt.dx		Address of descriptor of output string
!
!	LINE_NO.rl.r		Optional.  Address of line number at which
!				to start output.  If omitted (=0), the
!				current line number is used.
!
!	COL_NO.rl.r		Optional.  Address of column number at which
!				to start output.  If omitted (=0), the
!				current column number is used.
!
!	RENDITION_SET.rl.r	Optional.  Each 1 bit in this parameter
!				causes the corresponding attribute to be
!				set in the display.  (See below for list
!				of settable attributes.)
!
!	RENDITION_COMPLEMENT.rl.r Optional.  Each 1 bit attribute in this
!				  parameter causes the corresponding attribute
!				  to be complemented in the display.  (See
!				  below for list of complementable attributes.)
!
!	If the same bit is specified in both the RENDITION_SET parameter
!	and in the RENDITION_COMPLEMENT parameter, the application is
!	RENDITION_SET followed by RENDITION complement.  Using these two
!	parameters together the caller can exercise arbitrary and
!	independent control over each attribute on a single call.  On an
!	attribute by attribute basis he can cause the following
!	transformations:
!
!		SET	COMPLEMENT	Action
!		---	__________	______
!		0	0		Attribute unchanged.
!		1	0		Attribute set to "on"
!		0	1		Attribute set to complement of
!					current setting.
!		1	1		Attribute set to "off".
!
!
!	Attributes which can be manipulated in this manner are:
!
!	SMG$M_BLINK  displays characters blinking.
!	SMG$M_BOLD  displays characters in higher-than-normal 
!		      intensity.
!	SMG$M_REVERSE  displays characters in reverse video -- that is, 
!		      using the opposite default rendition of the 
!		      virtual display.
!	SMG$M_UNDERLINE  displays characters underlined.
!
!
!	CHAR_SET.rl.r		Optional.  Character set to use.  Choices are:
!					SMG$C_UNITED_KINGDOM
!					SMG$C_ASCII	(default)
!					SMG$C_SPEC_GRAPHICS
!					SMG$C_ALT_CHAR
!					SMG$C_ALT_GRAPHICS
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	SS$_NORMAL	Normal successful completion
!	SMG$_INVCOL	Invalid column number
!	SMG$_INVROW	Invalid row number
!	LIB$_INVSTRDES	Invalid string descriptor
!	SMG$_WRONUMARG  Wrong number of arguments
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    BUILTIN
	NULLPARAMETER;

    LOCAL
	DCB : REF BLOCK [,BYTE],	! address of virtual display
					! control block
	ROW,				! working row
	COL,				! working column
	REND_CODE,			! rendition code to use
	STR_LEN : INITIAL (0),		! length of text string
	STR_ADDR,			! address of text string,
	STATUS;

    LITERAL
	K_LINE_ARG = 3,
	K_COL_ARG = 4,
	K_SET_ARG = 5,
	K_COMP_ARG = 6,
	K_CHAR_ARG = 7;

    $SMG$GET_DCB (.DISPLAY_ID, DCB);	! get addr of virtual display
					! control block

    $SMG$VALIDATE_ARGCOUNT (2, 7);

!+
! Get the length and address of the text string.
!-

    IF NOT (STATUS = LIB$ANALYZE_SDESC_R2 (.TEXT;
					   STR_LEN,
					   STR_ADDR))
    THEN
	RETURN (.STATUS);

!+
! Check for optional arguments.  Set local variables to caller's
! values, when available, and defaults when arguments omitted.
!-

    IF NOT NULLPARAMETER (K_LINE_ARG) AND
       NOT NULLPARAMETER (K_COL_ARG)
    THEN
	BEGIN
	ROW = ..LINE_NO;
	COL = ..COL_NO;
        $SMG$VALIDATE_ROW_COL (.ROW, .COL);
				! verify row & col within display
	END
    ELSE
	BEGIN
	ROW = .DCB [DCB_W_CURSOR_ROW];
   	COL = .DCB [DCB_W_CURSOR_COL];
	END;

    $SMG$SET_REND_CODE (K_SET_ARG, K_COMP_ARG);
				! macro to use caller's args if present

    IF NOT NULLPARAMETER (K_CHAR_ARG)
    THEN
	BEGIN
	CASE ..CHAR_SET FROM SMG$C_UNITED_KINGDOM TO SMG$C_ALT_GRAPHICS OF
	SET

	[SMG$C_UNITED_KINGDOM, SMG$C_ASCII, SMG$C_SPEC_GRAPHICS,
	 SMG$C_ALT_CHAR, SMG$C_ALT_GRAPHICS]:
		;

	[INRANGE, OUTRANGE]:
		RETURN (SMG$_INVARG);
	
	TES;
	END;

!+
! Double wide characters occupy two positions instead of one on the 
! screen.  However, for mapping purposes we store the text only half
! way over in the text buffer.
!-

    COL = (.COL + 1)/2;		! col in half for dbl wide   

!+
! Set the double wide characteristic in the DCB.
!-

    BEGIN
    BIND
	DCB_LCV = .DCB [DCB_A_LINE_CHAR];
    MAP
	DCB_LCV : VECTOR [,BYTE];

    IF .DCB_LCV [.ROW] NEQ LINE_K_WIDE  ! previously single wide
    THEN				! or double high
	BEGIN
	LOCAL
	    START_INDEX;
	START_INDEX = $SMG$LINEAR (.ROW, 1);
  	$SMG$BLANK_FILL_DCB (.DCB [DCB_W_NO_COLS], .START_INDEX);
    	DCB_LCV [.ROW] = LINE_K_WIDE; 	! set this row to dbl wide
	END;

    DCB_LCV [0] = 1;			! mark that there are wide or
					! dbl high/wide chars in display
    END;

!+
! All local variables are set up.  Call routine to put text into
! the display buffer.
!-

    BEGIN
    LOCAL
	PRINT_LEN;
    $SMG$FIND_PRINT_LENGTH (STR_LEN, .STR_ADDR, PRINT_LEN);
				! don't count non-printable chars
    !+
    ! SMG$$PUT_TEXT_TO_BUFFER doesn't realize that wide characters
    ! occupy 2 spaces so it won't recognize overflow.  Make sure
    ! we don't try to put more chars in buffer than will fit on
    ! this line.
    !-
    IF .PRINT_LEN GTR ((.DCB [DCB_W_NO_COLS] - 1)/2)
    THEN
	PRINT_LEN = (.DCB [DCB_W_NO_COLS] - 1)/2;

    DCB [DCB_W_CURSOR_ROW] = .ROW;
    DCB [DCB_W_CURSOR_COL] = .COL;
				! set position for put_text
    IF NOT (STATUS = SMG$$PUT_TEXT_TO_BUFFER (.DCB,
					      .REND_CODE,
					      .PRINT_LEN,
					      .STR_ADDR,
					      IF NOT NULLPARAMETER (K_CHAR_ARG)
					      THEN ..CHAR_SET 
					      ELSE SMG$C_ASCII))
    THEN
	RETURN (.STATUS);

!+
! Correct the cursor position.  We stored our text half way over in the
! buffer, but the screen cursor position should be calculated based on
! the actual starting column specified by the caller.  Also take into
! account that characters occupy 2 positions.
!-

    DCB [DCB_W_CURSOR_COL] = (2 * .COL) + (2 * .PRINT_LEN) - 1;
    END;

!+
! See if this change should be reflected on the screen.
!-

    RETURN (SMG$$CHECK_FOR_OUTPUT_DCB (.DCB,
					SMG$C_PUT_CHARS,
					.ROW));

    END;				! End of routine SMG$PUT_CHARS_WIDE

%SBTTL 'SMG$PUT_CHARS_HIGHWIDE - Write double high double wide characters'
GLOBAL ROUTINE SMG$PUT_CHARS_HIGHWIDE (
					DISPLAY_ID,
					TEXT : REF BLOCK [,BYTE],
					LINE_NO,
					COL_NO,
					RENDITION_SET,
					RENDITION_COMPLEMENT,
					CHAR_SET 
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine writes double high/double wide characters to a 
!	virtual display.  The line can not contain a mixture of single
!	high/wide and double high/wide characters; if the line previously
!	contained single high/wide, then the entire line will be re-
!	written, otherwise only the specified text is written.
!
!	The internal cursor position is left at the character
!	position following the text written.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SMG$PUT_CHARS_HIGHWIDE (DISPLAY_ID.rl.r,
!					           TEXT.rt.dx,
!					           [,LINE_NO.rl.r, COL_NO.rl.r]
!					           [,RENDITION_SET.rl.r]
!					           [,RENDITION_COMPLEMENT.rl.r]
!					           [,CHAR_SET.rl.r]
!
! FORMAL PARAMETERS:
!
!	DISPLAY_ID.rl.r		Display id of virtual display
!
!	TEXT.rt.dx		Address of descriptor of output string
!
!	LINE_NO.rl.r		Optional.  Address of line number at which
!				to start output.  This line will contain the
!				upper half of the double high text.  If omitted
!				(=0), the current line number is used.
!
!	COL_NO.rl.r		Optional.  Address of column number at which
!				to start output.  If omitted (=0), the
!				current column number is used.
!
!	RENDITION_SET.rl.r	Optional.  Each 1 bit in this parameter
!				causes the corresponding attribute to be
!				set in the display.  (See below for list
!				of settable attributes.)
!
!	RENDITION_COMPLEMENT.rl.r Optional.  Each 1 bit attribute in this
!				  parameter causes the corresponding attribute
!				  to be complemented in the display.  (See
!				  below for list of complementable attributes.)
!
!
!	If the same bit is specified in both the RENDITION_SET parameter
!	and in the RENDITION_COMPLEMENT parameter, the application is
!	RENDITION_SET followed by RENDITION complement.  Using these two
!	parameters together the caller can exercise arbitrary and
!	independent control over each attribute on a single call.  On an
!	attribute by attribute basis he can cause the following
!	transformations:
!
!		SET	COMPLEMENT	Action
!		---	__________	______
!		0	0		Attribute unchanged.
!		1	0		Attribute set to "on"
!		0	1		Attribute set to complement of
!					current setting.
!		1	1		Attribute set to "off".
!
!
!	Attributes which can be manipulated in this manner are:
!
!	SMG$M_BLINK  displays characters blinking.
!	SMG$M_BOLD  displays characters in higher-than-normal 
!		      intensity.
!	SMG$M_REVERSE  displays characters in reverse video -- that is, 
!		      using the opposite default rendition of the 
!		      virtual display.
!	SMG$M_UNDERLINE  displays characters underlined.
!
!
!	CHAR_SET.rl.r		Optional.  Character set to use.  Choices are:
!					SMG$C_UNITED_KINGDOM
!					SMG$C_ASCII	(default)
!					SMG$C_SPEC_GRAPHICS
!					SMG$C_ALT_CHAR
!					SMG$C_ALT_GRAPHICS
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	SS$_NORMAL	Normal successful completion
!	SMG$_INVCOL	Invalid column number
!	SMG$_INVROW	Invalid row number
!	LIB$_INVSTRDES	Invalid string descriptor
!	SMG$_WRONUMARG  Wrong number of arguments
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    BUILTIN
	NULLPARAMETER;

    LOCAL
	DCB : REF BLOCK [,BYTE],
	ROW,				! working row
	COL,				! working column
	REND_CODE,			! rendition code to use
	STR_LEN : INITIAL (0),		! length of text string
	STR_ADDR,			! address of text string,
	LOWER_HALF,			! flag to output lower half
					! of dbl high
	STATUS;

    LITERAL
	K_LINE_ARG = 3,
	K_COL_ARG = 4,
	K_SET_ARG = 5,
	K_COMP_ARG = 6,
	K_CHAR_ARG = 7;

    $SMG$GET_DCB (.DISPLAY_ID, DCB);	! get addr of virtual display
					! control block

    $SMG$VALIDATE_ARGCOUNT (2, 7);

!+
! Get the length and address of the text string.
!-

    IF NOT (STATUS = LIB$ANALYZE_SDESC_R2 (.TEXT;
					   STR_LEN,
					   STR_ADDR))
    THEN
	RETURN (.STATUS);

!+
! Check for optional arguments.  Set local variables to caller's
! values, when available, and defaults when arguments omitted.
!-

    IF NOT NULLPARAMETER (K_LINE_ARG) AND
       NOT NULLPARAMETER (K_COL_ARG)
    THEN
	BEGIN
	ROW = ..LINE_NO;
	COL = ..COL_NO;
        $SMG$VALIDATE_ROW_COL (.ROW, .COL);
				! verify row & col within display
	END
    ELSE
	BEGIN
	ROW = .DCB [DCB_W_CURSOR_ROW];
   	COL = .DCB [DCB_W_CURSOR_COL];
	END;

    $SMG$SET_REND_CODE (K_SET_ARG, K_COMP_ARG);
				! macro to use caller's args if present

    IF NOT NULLPARAMETER (K_CHAR_ARG)
    THEN
	BEGIN
	CASE ..CHAR_SET FROM SMG$C_UNITED_KINGDOM TO SMG$C_ALT_GRAPHICS OF
	SET

	[SMG$C_UNITED_KINGDOM, SMG$C_ASCII, SMG$C_SPEC_GRAPHICS,
	 SMG$C_ALT_CHAR, SMG$C_ALT_GRAPHICS]:
		;

	[INRANGE, OUTRANGE]:
		RETURN (SMG$_INVARG);
	
	TES;
	END;

!+
! Double wide characters occupy two positions instead of one on the 
! screen.  However, for mapping purposes we store the text only half
! way over in the text buffer.
!-

    COL = (.COL + 1)/2;		! col in half for dbl wide   

!+
! Set the double wide/double high characteristic in the DCB.
!-

    BEGIN
    BIND
	DCB_LCV = .DCB [DCB_A_LINE_CHAR];
    MAP
	DCB_LCV : VECTOR [,BYTE];

    IF .DCB_LCV [.ROW] NEQ LINE_K_UPPER_HIGH	! previously single wide
    THEN				        ! or just wide
	BEGIN
	LOCAL
	    START_INDEX;
	START_INDEX = $SMG$LINEAR (.ROW, 1);
  	$SMG$BLANK_FILL_DCB (.DCB [DCB_W_NO_COLS], .START_INDEX);
        DCB_LCV [.ROW] = LINE_K_UPPER_HIGH;      ! set this row to dbl high
        END;				         ! (note that this implies
					         !  dbl wide also)
    IF .ROW + 1 LEQ .DCB [DCB_W_NO_ROWS]
    THEN
	BEGIN					! we can fit other half
	LOWER_HALF = 1;
        IF .DCB_LCV [.ROW] NEQ LINE_K_LOWER_HIGH ! previously single wide
    	THEN				         ! or just wide
	    BEGIN
	    LOCAL
	    	START_INDEX;
	    START_INDEX = $SMG$LINEAR (.ROW, 1);
  	    $SMG$BLANK_FILL_DCB (.DCB [DCB_W_NO_COLS], .START_INDEX);
	    DCB_LCV [.ROW + 1] = LINE_K_LOWER_HIGH;
	    END;
	END;					! we can fit other half

    DCB_LCV [0] = 1;			! mark that there are wide or
					! dbl high/wide chars in display
    END;

!+
! All local variables are set up.  Call routine to put text into
! the display buffer.
!-

    BEGIN
    LOCAL
	PRINT_LEN;
    $SMG$FIND_PRINT_LENGTH (STR_LEN, .STR_ADDR, PRINT_LEN);
				! don't count non-printable chars
    !+
    ! SMG$$PUT_TEXT_TO_BUFFER doesn't realize that wide characters
    ! occupy 2 spaces so it won't recognize overflow.  Make sure
    ! we don't try to put more chars in buffer than will fit on
    ! this line.
    !-
    IF .PRINT_LEN GTR ((.DCB [DCB_W_NO_COLS] - 1)/2)
    THEN
        PRINT_LEN = (.DCB [DCB_W_NO_COLS] - 1)/2;

    DCB [DCB_W_CURSOR_ROW] = .ROW;
    DCB [DCB_W_CURSOR_COL] = .COL;
				! set position for put_text
    IF NOT (STATUS = SMG$$PUT_TEXT_TO_BUFFER (.DCB,
					      .REND_CODE,
					      .PRINT_LEN,
					      .STR_ADDR,
					      IF NOT NULLPARAMETER (K_CHAR_ARG)
					      THEN ..CHAR_SET 
					      ELSE SMG$C_ASCII))
    THEN
	RETURN (.STATUS);

    IF .LOWER_HALF
    THEN
	BEGIN				! write lower half of dbl high

    	DCB [DCB_W_CURSOR_ROW] = .ROW + 1;
   	DCB [DCB_W_CURSOR_COL] = .COL;
					! set position for put_text
    	IF NOT (STATUS = SMG$$PUT_TEXT_TO_BUFFER (.DCB,
					      	  .REND_CODE,
					     	  .PRINT_LEN,
					     	  .STR_ADDR,
					      	  IF NOT NULLPARAMETER (K_CHAR_ARG)
					      	  THEN ..CHAR_SET 
					     	  ELSE SMG$C_ASCII))
    	THEN
	    RETURN (.STATUS);

!+
! Correct the cursor position.  We stored our text half way over in the
! buffer, but the screen cursor position should be calculated based on
! the actual starting column specified by the caller.  Also take into
! account that characters occupy 2 positions.
!-

        DCB [DCB_W_CURSOR_COL] = (2 * .COL) + (2 * .PRINT_LEN) - 1;

    	IF .LOWER_HALF			! we used 2 rows if we could
    	THEN				! write the lower half of dbl high
	    DCB [DCB_W_CURSOR_ROW] = .ROW + 1
    	ELSE
	    DCB [DCB_W_CURSOR_ROW] = .ROW;
	END;

    END;

!+
! See if this change should be reflected on the screen.
!-

    RETURN (SMG$$CHECK_FOR_OUTPUT_DCB (.DCB,
					SMG$C_PUT_CHARS,
					0));

    END;				! End of routine SMG$PUT_CHARS_HIGHWIDE

%SBTTL 'SMG$PUT_LINE_WIDE - Put Wide Text to Display in Line Mode'
GLOBAL ROUTINE SMG$PUT_LINE_WIDE (
				DISPLAY_ID,
				TEXT     : REF BLOCK [,BYTE],
				LINE_ADV,
				RENDITION_SET,
				RENDITION_COMPLEMENT,
				WRAP_FLAG,
				CHAR_SET
			    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used to write lines with wide characters to the 
!	virtual display	optionally followed by cursor movement sequences.  
!	SMG$PUT_LINE_WIDE writes from the current cursor position to the 
!	end of the line. If the caller's text does not span to the end of 
!	the line, blank fill is added.
!
!	Treatment of text which exceeds the rightmost bounds of the
!	display depends on WRAP_FLAG.  If WRAP_FLAG is set, lines are
!	scrolled LINE_ADV times to make room for the overflow characters
!	in the 'next' line.  If wrap is off, overflow characters are lost.
!
!	Following a call to SMG$PUT_LINE_WIDE, the internal display cursor
!	position is set to column 1 of the next line where output should
!	occur.  The next line where output should occur is determined by
!	LINE_ADV;  LINE_ADV defaults to 1 so that subsequent calls to
!	SMG$PUT_LINE_WIDE will not cause overprinting.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = SMG$PUT_LINE_WIDE (DISPLAY_ID.rl.r,
!					 TEXT.rt.dx
!					 [,LINE_ADV.rl.r] 
!					 [,RENDITION_SET.rl.r]
!					 [,RENDITION_COMPLEMENT.rl.r]
!					 [,WRAP_FLAG.rl.r]
!					 [,CHAR_SET.rl.r])
!
! FORMAL PARAMETERS:
!
!	DISPLAY_ID.rl.r	Display id of virtual display
!
!	TEXT.rt.dx	Address of descriptor of output string.
!
!	LINE_ADV.rl.r	Optional.  Address of signed number of lines 
!			to advance after output.
!
!	RENDITION_SET.rl.r	Each 1 bit attribute in this parameter
!				causes the corresponding attribute to
!				be set in the display.  (See below for
!				list of settable attributes.)
!
!	RENDITION_COMPLEMENT.rl.r
!				Each 1 bit attribute in this parameter
!				causes the corresponding attribute to
!				be complemented in the display.  (See
!				below for list of complementable
!				attributes.)
!
!	If the same bit is specified in both the RENDITION_SET parameter
!	and in the RENDITION_COMPLEMENT parameter, the application is
!	RENDITION_SET followed by RENDITION complement.  Using these two
!	parameters together the caller can exercise arbitrary and
!	independent control over each attribute on a single call.  On an
!	attribute by attribute basis he can cause the following
!	transformations:
!
!		SET	COMPLEMENT	Action
!		---	__________	______
!		0	0		Attribute unchanged.
!		1	0		Attribute set to "on"
!		0	1		Attribute set to complement of
!					current setting.
!		1	1		Attribute set to "off".
!
!
!	Attributes which can be manipulated in this manner are:
!
!	SMG$M_BLINK  displays characters blinking.
!	SMG$M_BOLD  displays characters in higher-than-normal 
!		      intensity.
!	SMG$M_REVERSE  displays characters in reverse video -- that is, 
!		      using the opposite default rendition of the 
!		      virtual display.
!	SMG$M_UNDERLINE  displays characters underlined.
!
!	WRAP_FLAG.rl.r	= 0 means no wrap
!			= 1 means wrap
!			If omitted, no wrap is the default.
!
!	CHAR_SET.rl.r  	Optional.  Character set to use.
!			Choices are:
!				SMG$C_UNITED_KINGDOM
!				SMG$C_ASCII (default)
!				SMG$C_SPEC_GRAPHICS
!				SMG$C_ALT_CHAR
!				SMG$C_ALT_GRAPHICS
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS:
!
!	SS$_NORMAL	Normal successful completion
!	SMG$_WRONUMARG	Wrong number (of combination of) arguments
!	LIB$_INVSTRDES	Invalid string descriptor
!
! SIDE EFFECTS:
!
!	NONE
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    LOCAL
	HALF_NO_COLS,
	DONE,
	DCB : REF BLOCK [,BYTE],	! Address of virtual display
					! control block.
	STR_LEN : INITIAL (0),		! Length of text string
	STR_ADDR,			! Address of text string
	REND_CODE,			! Rendition code to use
	WRAPPED_CHARS :INITIAL (0),	! Number of chars that don't fit on
					! the current line
	SCROLL_FLAG : INITIAL (0),	! Flag to scroll up, down, or neither
	STATUS;				! Status of subroutine calls

    LITERAL
	K_ADV_ARG = 3,
	K_SET_ARG = 4,
	K_COMP_ARG = 5,
	K_WRAP_ARG = 6,
	K_CHAR_ARG = 7;

    MACRO $SCROLL_UP (COUNT) =
	    SMG$$SCROLL_AREA (.DCB,
			      .DCB [DCB_W_TOP_OF_SCRREG],
			      .DCB [DCB_W_COL_START],
			      (.DCB [DCB_W_BOTTOM_OF_SCRREG] -
			       .DCB [DCB_W_TOP_OF_SCRREG] + 1),
			      .DCB [DCB_W_NO_COLS],
 			      SMG$M_UP, COUNT) %;


    $SMG$GET_DCB (.DISPLAY_ID, DCB);	! Get address of virtual display
					! control block.

    $SMG$VALIDATE_ARGCOUNT (2,7);

    IF NOT NULLPARAMETER (K_ADV_ARG) AND
       ..LINE_ADV LSS 0
    THEN
	RETURN (SMG$_INVARG);		! positive advancing only

!+
! Select rendition code to use, based on whether one was provided by 
! caller.
!-

    $SMG$SET_REND_CODE (K_SET_ARG, K_COMP_ARG);

!+
! Get the length and address of the text string.
!-
    IF NOT (STATUS = LIB$ANALYZE_SDESC_R2 ( .TEXT;
					    STR_LEN,
					    STR_ADDR))
    THEN
	RETURN (.STATUS);

!+
! Compute the number of columns in a line.  We can fit only half
! as many wide characters since they occupy 2 positions.
!-

    HALF_NO_COLS = (.DCB [DCB_W_NO_COLS] - 1)/2;

!+
! If the previous line written was the last line in the display, we
! did not scroll at the end of the operation.  (This would've always
! left {he last line blank - effectively the display would have one
! less useable line.)  If we're at the bottom, scroll up one before writing.  
!
!-

    $SMG$SET_SCROLLING (SCROLL_FLAG);

    IF .SCROLL_FLAG EQL 1
    THEN			! we're at the last line in the display
	BEGIN			! and display is full
        IF NOT NULLPARAMETER (K_ADV_ARG) AND
	   ..LINE_ADV GTR 0 
        THEN			! positive line advancing		
	    $SCROLL_UP (..LINE_ADV)
	ELSE
	    IF NULLPARAMETER (K_ADV_ARG)
	    THEN
		$SCROLL_UP (1) 	! default advancing

	END;			! we're at the last line in the display

!+
! Blank out the line before writing new text.
!-

    BEGIN
    LOCAL
	START_INDEX;

    START_INDEX = $SMG$LINEAR (.DCB [DCB_W_CURSOR_ROW], .DCB [DCB_W_CURSOR_COL]);
    $SMG$BLANK_FILL_DCB ((.DCB [DCB_W_NO_COLS] - .DCB [DCB_W_CURSOR_COL] + 1),
			  .START_INDEX);

    END;

!+
! Reset the line characteristics in case the line was previously
! double high or single.
!-

    BEGIN
    BIND 
	LINE_CHAR = .DCB [DCB_A_LINE_CHAR];
    MAP
	LINE_CHAR : VECTOR [,BYTE];
    LINE_CHAR [.DCB [DCB_W_CURSOR_ROW]] = LINE_K_WIDE;
    LINE_CHAR [0] = 1;			! mark that there are dbl chars
					! in display
    END;

!+
! Move the text string into our virtual display buffer.
!-

    IF NOT ( STATUS = SMG$$PUT_TEXT_TO_BUFFER ( .DCB,
					       .REND_CODE,
				       	       .STR_LEN, 
					       .STR_ADDR,
					       IF NOT NULLPARAMETER (K_CHAR_ARG)
					       THEN ..CHAR_SET 
					       ELSE SMG$C_ASCII,
					       WRAPPED_CHARS))
    THEN
	RETURN (.STATUS);


!+
! If all went well so far, we need to enter the <CR>,<LF> to form the 
! end of line.
!-

    DCB [DCB_W_CURSOR_COL] = 1;		! Effect of <CR>

!+
! Default to advancing one line if LINE_ADV is omitted.
!-

    IF NULLPARAMETER (K_ADV_ARG)
    THEN
	BEGIN			! line adv omitted
	IF .DCB [DCB_W_CURSOR_ROW] + 1 LEQ .DCB [DCB_W_BOTTOM_OF_SCRREG]
    	THEN
	    ! Just advance cursor row to next line
	    DCB [DCB_W_CURSOR_ROW] = .DCB [DCB_W_CURSOR_ROW] + 1
    	ELSE
	    BEGIN
	    $SMG$SET_SCROLLING (SCROLL_FLAG);
	    IF .SCROLL_FLAG EQL 1
	    THEN
		IF .DCB [DCB_W_CURSOR_ROW] NEQ .DCB [DCB_W_BOTTOM_OF_SCRREG]
		THEN
		    $SCROLL_UP (1);	! scroll if within scrolling region
	    IF .DCB [DCB_W_CURSOR_ROW] LEQ .DCB [DCB_W_BOTTOM_OF_SCRREG]
	    THEN
	        DCB [DCB_W_CURSOR_ROW] = .DCB [DCB_W_BOTTOM_OF_SCRREG];
	    DCB [DCB_V_FULL] = 1; ! remember that we used last line
	    END;

	END			! line_adv omitted

!+
! Take care of the requested line advancing.
!-

    ELSE
	BEGIN			!  line_adv specified
	IF ..LINE_ADV GTR 0
  	THEN
	    BEGIN		! upspacing requested
	    IF .DCB [DCB_W_CURSOR_ROW] + ..LINE_ADV LEQ
	       .DCB [DCB_W_BOTTOM_OF_SCRREG]
	    THEN
	    	! Just advance cursor row number
	    	DCB [DCB_W_CURSOR_ROW] = .DCB [DCB_W_CURSOR_ROW] 
				     + ..LINE_ADV
	    ELSE
		BEGIN		! scrolling up
	    	$SMG$SET_SCROLLING (SCROLL_FLAG);
	    	IF .SCROLL_FLAG EQL 1
	    	THEN
		    IF .DCB [DCB_W_CURSOR_ROW] NEQ .DCB [DCB_W_BOTTOM_OF_SCRREG]
		    THEN
		    	$SCROLL_UP (..LINE_ADV); ! scroll if w/in scroll region
		IF .DCB [DCB_W_CURSOR_ROW] LEQ .DCB [DCB_W_BOTTOM_OF_SCRREG]
	 	THEN
		    DCB [DCB_W_CURSOR_ROW] = .DCB [DCB_W_BOTTOM_OF_SCRREG];
	    	DCB [DCB_V_FULL] = 1; ! remember that we used last line
		END		! scrolling up
	    END;		! upspace action

    	END;			! line_adv specified

    !+
    ! If wrapping was requested and some characters overflowed the line,
    ! call ourself again with the remainder of the characters.
    !-

    IF .WRAPPED_CHARS NEQ 0 AND
       ((NOT NULLPARAMETER (K_ADV_ARG) AND ..LINE_ADV GTR 0) OR
       NULLPARAMETER (K_ADV_ARG))
    THEN
	BEGIN				! overflow chars
	IF (NOT NULLPARAMETER (K_WRAP_ARG) AND
          ..WRAP_FLAG NEQ 0)
        THEN
	    BEGIN			! wrap set - recurse w/overflow
	    LOCAL
	    	STR_DESC : BLOCK [8, BYTE],
	    	C_SET;

    	    STR_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
	    STR_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    STR_DESC [DSC$W_LENGTH] = .STR_LEN - .HALF_NO_COLS;
	    STR_DESC [DSC$A_POINTER] = .STR_ADDR + .HALF_NO_COLS;

            C_SET = SMG$C_ASCII;
	    IF NOT NULLPARAMETER( K_CHAR_ARG )
	    THEN
	    	C_SET = ..CHAR_SET;

	    SMG$PUT_LINE_WIDE (.DISPLAY_ID,
		       	  STR_DESC,
		          .LINE_ADV,
		          .RENDITION_SET,
		          .RENDITION_COMPLEMENT,
		          .WRAP_FLAG,
		          C_SET);
	    DONE = 0;
	    RETURN 1;		! to keep Bliss happy
	    END			! wrap set - recurse w/overflow
	ELSE
	    BEGIN		! wrap not set - truncation
	    !+
	    ! Wrap was not requested but there were overflow characters.
	    ! Put out diamond in last position to show truncation.
	    !-
	    IF .DCB [DCB_V_TRUNC_ICON]
	    THEN
		BEGIN
	    	IF NOT .DCB [DCB_V_FULL]
	    	THEN
	    	    DCB [DCB_W_CURSOR_ROW] = .DCB [DCB_W_CURSOR_ROW] - 1;
	    	DCB [DCB_W_CURSOR_COL] = .HALF_NO_COLS;

	    	SMG$$PUT_TEXT_TO_BUFFER (.DCB, 
				         .REND_CODE + ATTR_M_USER_GRAPHIC,
				         1, UPLIT (BYTE (DIAMOND)),
				         SMG$C_ASCII);

	    	IF NOT .DCB [DCB_V_FULL]
	    	THEN
	    	    DCB [DCB_W_CURSOR_ROW] = .DCB [DCB_W_CURSOR_ROW] + 1;
					! restore for next call
	    	DCB [DCB_W_CURSOR_COL] = 1;
		END;

	    DONE = 1;
	    END;			! wrap not set - truncation
	END
    ELSE
	DONE = 1;			! no wrap chars

    !+
    ! See if this change should be reflected on the screen.
    ! Even if we call SMG$PUT_LINE_WIDE again, SMG$$CHECK_FOR_OUTPUT_DCB
    ! should be called only once.
    !-

    IF .DONE
    THEN
	BEGIN
	LOCAL
	    LINE_CHANGED;
	LINE_CHANGED = .DCB [DCB_W_CURSOR_ROW] -
			(IF NOT NULLPARAMETER (K_ADV_ARG) THEN
			 ABS (..LINE_ADV) ELSE 0);
    	RETURN (SMG$$CHECK_FOR_OUTPUT_DCB (.DCB,
					   SMG$C_PUT_LINE,
					   .LINE_CHANGED));
	END
    ELSE
	RETURN 1;

    END;				! End of routine SMG$PUT_LINE_WIDE
!<BLF/PAGE>

END					! End of module SMG$DISPLAY_DHDW

ELUDOM
