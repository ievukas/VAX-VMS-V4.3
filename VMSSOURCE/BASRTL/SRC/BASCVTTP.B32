%TITLE 'BAS$CVT_T_P - convert numeric text to packed decimal'
MODULE BAS$CVT_T_P (			! convert numeric text to packed decimal
		IDENT = '1-010'		! File: BASCVTTP.B32 Edit: MDL1010
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	BASIC Language Support
!
! ABSTRACT:
!
!	This routine converts numeric text to packed decimal. 
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Pamela L. Levesque, CREATION DATE: 29-Dec-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  PLL 29-Dec-1981
! 1-002 - Declare BAS$ Psects.  PLL 11-Feb-1982
! 1-003 - Incorporate changes based on code review.  PLL 11-Feb-1982
! 1-004 - Fix bug in calculation of integer and fraction digits.  PLL 12-Feb-1982
! 1-005 - If the input string is all blanks, return 1 integer zero and
!	  the appropriate number of fractional zeroes.  
!	  Also incorporated DGP's suggestions.  PLL 17-Feb-1982
! 1-006 - Fix a bug in the all blanks case.  PLL 29-Mar-1982
! 1-007 - Look at a flag in the frame to determine rounding or truncating.
!	  PLL 10-Jun-1982
! 1-008 - Remove edit 007 - it's the caller's responsibility to check the
!	  flag in the frame and pass it as an argument if necessary.  PLL 30-Jun-1982
! 1-009 - when skip_tabs flag is set, the spanc mask should be set to
!	  skip_blanks OR skip_tabs, not skip_blanks AND skip_tabs.  MDL 30-Jun-1983
! 1-010 - check return status from LIB$$ADDP_R7.  MDL 13-Jan-1984
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

LINKAGE
     JSB_R7 = JSB (REGISTER = 4, REGISTER = 5, REGISTER = 6, REGISTER = 7) :
		   PRESERVE (8, 9, 10, 11);
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$CVT_T_P;				! convert from text to packed

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! System symbols

REQUIRE 'RTLIN:RTLPSECT';			! Define PSECT declarations macros

!
! MACROS:
!

MACRO
    ADDP = LIB$$ADDP_R7 %;

!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!

DECLARE_PSECTS (BAS);

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    LIB$$ADDP_R7 : JSB_R7;



%SBTTL 'BAS$CVT_T_P - convert numeric text to packed decimal'
GLOBAL ROUTINE BAS$CVT_T_P (			! convert numeric text to packed decimal
	TEXT_DSC,				! text descriptor
	PACKED_DSC,				! packed descriptor
	FLAGS					! user flags
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Converts a text string representing a numeric value to a packed
!	decimal value.  Description of the text is as follows:
!		<0 or more spaces, nulls, or tabs>
!		<"+" or "-" or nothing>
!		<0 or more digits>
!		<"." or nothing>
!		<0 or more digits>
!		<0 or more spaces, nulls, or tabs>
!		<end of string>
!
!	Setting the strip spaces bit in FLAGS causes embedded spaces to be ignored.
!	Otherwise blanks are an error.
!
!	Setting the skip tabs bit in FLAGS causes embedded tab characters to be ignored.
!	Otherwise they are an error.
!	
!	The value will be rounded, if necessary, to fit into the number of
!	digits specified by the packed decimal descriptor.  Truncation may be
!	requested by setting the don't round bit in FLAGS.
!
!	Note that this routine expects the length and scale fields in the
!	packed decimal descriptor to be set by the caller.
!
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = BAS$CVT_T_P (TEXT_DSC.rt.dx1, PACKED_DSC.wp.dsd, FLAGS.rl.v)
!
! FORMAL PARAMETERS:
!
!	TEXT_DSC		address of the input text descriptor
!	PACKED_DSC		address of the output decimal descriptor
!	[FLAGS]			value of caller's flags
!				bit 0 set indicates skip blanks
!				bit 3 set indicates don't round value
!				bit 4 set indicates skip tabs
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	success		text successfully converted to decimal
!	failure		numeric text could not be converted to the
!			specified decimal descriptor
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

MAP
    TEXT_DSC : REF BLOCK [8,BYTE],
    PACKED_DSC : REF BLOCK [12,BYTE];

BUILTIN
    ACTUALCOUNT,
    CVTSP,
    SPANC;

LITERAL
    K_FLAGS_ARG = 3,
    K_PACKED_ONE = %X'0000001C',
    K_PACKED_NEG_ONE = %X'0000001D',
    K_MAX_DIGITS = 31,
    CHAR_TAB = %X'09' : UNSIGNED (8),
    CHAR_SPACE = %X'20' : UNSIGNED (8),
    CHAR_NULL = %X'00' : UNSIGNED (8),
    CHAR_ZERO = %X'30' : UNSIGNED (8),
    CHAR_ONE = %X'31' : UNSIGNED (8),
    CHAR_TWO = %X'32' : UNSIGNED (8),
    CHAR_THREE = %X'33' : UNSIGNED (8),
    CHAR_FOUR = %X'34' : UNSIGNED (8),
    CHAR_FIVE = %X'35' : UNSIGNED (8),
    CHAR_SIX = %X'36' : UNSIGNED (8),
    CHAR_SEVEN = %X'37' : UNSIGNED (8),
    CHAR_EIGHT = %X'38' : UNSIGNED (8),
    CHAR_NINE = %X'39' : UNSIGNED (8),
    MASK_NUMERIC = 1 : UNSIGNED (8),
    MASK_BLANKS = 2 : UNSIGNED (8),
    MASK_TAB = 4 : UNSIGNED (8),
    V_SKIP_TABS = 1^4,
    V_SKIP_BLANKS = 1^0,
    V_DONT_ROUND = 1^3;

BIND

    SPANC_TABLE = UPLIT BYTE
		(
		REP CHAR_NULL OF (0),
		(MASK_BLANKS),
		REP CHAR_TAB - CHAR_NULL - 1 OF (0),
		(MASK_TAB),
		REP CHAR_SPACE - CHAR_TAB - 1 OF (0),
		(MASK_BLANKS),
		REP CHAR_ZERO - CHAR_SPACE - 1 OF (0),
		(MASK_NUMERIC),
		REP CHAR_ONE - CHAR_ZERO - 1 OF (0),
		(MASK_NUMERIC),
		REP CHAR_TWO - CHAR_ONE - 1 OF (0),
		(MASK_NUMERIC),
		REP CHAR_THREE - CHAR_TWO - 1 OF (0),
		(MASK_NUMERIC),
		REP CHAR_FOUR - CHAR_THREE - 1 OF (0),
		(MASK_NUMERIC),
		REP CHAR_FIVE - CHAR_FOUR - 1 OF (0),
		(MASK_NUMERIC),
		REP CHAR_SIX - CHAR_FIVE - 1 OF (0),
		(MASK_NUMERIC),
		REP CHAR_SEVEN - CHAR_SIX - 1 OF (0),
		(MASK_NUMERIC),
		REP CHAR_EIGHT - CHAR_SEVEN - 1 OF (0),
		(MASK_NUMERIC),
		REP CHAR_NINE - CHAR_EIGHT - 1 OF (0),
		(MASK_NUMERIC),
		REP 255 - CHAR_NINE OF (0)
		) : VECTOR [256, BYTE, UNSIGNED];

LOCAL
    USER_FLAGS,				! flags from caller or 0
    TEMP_LENGTH : INITIAL (1),		! length of temp. text
					!  (init to 1 for sign length)
    TEXT_BUF : VECTOR [32, BYTE],	! temp. area for input text
    INT_DIGITS,				! # int. digits in a segment
					!  of the input string
    TOTAL_INT_DIGITS : INITIAL (0),	! # int. digits in input
    ACTUAL_SCALE : INITIAL (0),		! # fract. digits in a segment
					!  of the input string
    TOTAL_FRAC_DIGITS : INITIAL (0),	! # fract. digits in input
    DIFF,				! temp. variable
    CURRENT_PTR,			! ptr. into input text string
    ROUND_DIGIT : INITIAL (0),		! digit to round on
    MASK,				! temp. mask for SPANC
    START_PTR,				! ptr. to 1st char in input string
    DEC_PT_LOC : INITIAL (0),		! ptr. to dec. pt. in input string			
    END_TXT_PTR;			! ptr. to end of input string

MAP
    CURRENT_PTR : REF VECTOR [,BYTE];

!+
! The overall strategy is to construct an acceptable numeric string for CVTSP
! in a temporary area, TEXT_BUF.  "Acceptable" means no embedded spaces, tabs,
! or decimal point, and less than or equal to 31 digits.  This routine should
! detect any invalid strings which would cause a reserved operand from CVTSP.
!-

    IF ACTUALCOUNT () LSS K_FLAGS_ARG
    THEN
	USER_FLAGS = 0
    ELSE
	USER_FLAGS = .FLAGS;			! store caller's flags, if any

    END_TXT_PTR = .TEXT_DSC [DSC$A_POINTER] + .TEXT_DSC [DSC$W_LENGTH];

!+
! Skip leading spaces.  Skip leading tabs only if bit in flag is set.
!-

    IF (.USER_FLAGS AND V_SKIP_TABS) NEQ 0
    THEN
	MASK = MASK_BLANKS OR MASK_TAB
    ELSE
	MASK = MASK_BLANKS;
    CURRENT_PTR = SPANC (TEXT_DSC [DSC$W_LENGTH], .TEXT_DSC [DSC$A_POINTER],
			SPANC_TABLE, MASK);

!+
! Always insert a sign into the temporary area so that we know a sign
! is always included in TEMP_LENGTH.
!-

    IF .CURRENT_PTR NEQ 0 AND
       (.CURRENT_PTR [0]  EQL %C'+' OR
	.CURRENT_PTR [0] EQL %C'-')
    THEN
	BEGIN
	TEXT_BUF [0] = .CURRENT_PTR [0];
	CURRENT_PTR = .CURRENT_PTR + 1;
	END
    ELSE
	BEGIN
	TEXT_BUF [0] = %C'+';
	END;

    START_PTR = .CURRENT_PTR;			! start = 1st possible digit


!+
! Search for integer digits.  Embedded tabs and spaces may be ignored, depending
! on USER_FLAGS.
!-

    WHILE 1 DO
    BEGIN

!+
! Wait until here to check for all blanks in the input string.
! A zero string must contain the proper number of fractional digits,
! so it's easiest to let zeroes be handled the same as non-zeroes.
!-

    IF .CURRENT_PTR EQL 0
    THEN
	BEGIN
	TOTAL_INT_DIGITS = 1;
	TEXT_BUF [1] = %C'0';
	TEMP_LENGTH = .TEMP_LENGTH + 1;
	EXITLOOP
	END;

    CURRENT_PTR = SPANC (%REF (.END_TXT_PTR - .START_PTR),
			.CURRENT_PTR, SPANC_TABLE, %REF (MASK_NUMERIC));

!+
! Store any digits found.
!-

    INT_DIGITS = (IF .CURRENT_PTR NEQ 0 
 	          THEN .CURRENT_PTR - .START_PTR
		  ELSE .END_TXT_PTR - .START_PTR); 
						! calc # integer digits
    IF .INT_DIGITS GTR 0
    THEN
	BEGIN
	CH$MOVE (.INT_DIGITS, .START_PTR, TEXT_BUF + .TEMP_LENGTH);
						! copy int. digits to temp area
	TEMP_LENGTH = .TEMP_LENGTH + .INT_DIGITS;
	TOTAL_INT_DIGITS = .TOTAL_INT_DIGITS + .INT_DIGITS;
	END;
    
    IF .CURRENT_PTR NEQ 0
    THEN
	BEGIN
!+
! Have found a non-digit.  It could be a decimal point or embedded blanks, etc.
!-
	SELECTONE .CURRENT_PTR [0] OF
	    SET
		[%C'.']:
		    BEGIN
	 	    DEC_PT_LOC = .CURRENT_PTR; ! save location of dec pt
		    CURRENT_PTR = .CURRENT_PTR + 1;
		    EXITLOOP
		    END;
		[CHAR_SPACE, CHAR_NULL]:
		    BEGIN
		    IF (.USER_FLAGS AND V_SKIP_BLANKS) NEQ 0
		    THEN
			BEGIN
			CURRENT_PTR = SPANC (%REF (.END_TXT_PTR - .START_PTR),
					.CURRENT_PTR, SPANC_TABLE,
					%REF (MASK_BLANKS));
			IF .CURRENT_PTR EQL 0 THEN EXITLOOP;
			START_PTR = .CURRENT_PTR;
			END
		    ELSE
			RETURN 0;		! <should be zeroes here>
		    END;
		[CHAR_TAB]:
		    BEGIN
		    IF (.USER_FLAGS AND V_SKIP_TABS) NEQ 0
		    THEN
			BEGIN
			CURRENT_PTR = SPANC (%REF (.END_TXT_PTR - .START_PTR),
					.CURRENT_PTR, SPANC_TABLE,
					%REF (MASK_TAB));
			IF .CURRENT_PTR EQL 0 THEN EXITLOOP;
			START_PTR = .CURRENT_PTR;
			END
		    ELSE
			RETURN 0;
		    END;
		[OTHERWISE]:
		    RETURN 0;			! no other chars valid here
	    TES;
	END
    ELSE

!+
! Only digits found.  Purely integer number.
!-
	EXITLOOP;

    END;					! end of WHILE loop

!+
! Return an error if the number of integer digits exceeds what the destination
! descriptor specifies.
!-

    IF .TOTAL_INT_DIGITS GTR (.PACKED_DSC [DSC$W_LENGTH] +
				.PACKED_DSC [DSC$B_SCALE])
    THEN RETURN 0;

!+
! Search for fractional digits if a decimal point was found and we are not
! at the end of the string.
!-

    IF .DEC_PT_LOC NEQ 0 AND
	.CURRENT_PTR NEQ 0 AND
	.CURRENT_PTR LSS .END_TXT_PTR
    THEN
	BEGIN

	START_PTR = .DEC_PT_LOC + 1;

	WHILE 1 DO
	BEGIN
	CURRENT_PTR = SPANC (%REF (.END_TXT_PTR - .START_PTR),
			.CURRENT_PTR, SPANC_TABLE, %REF (MASK_NUMERIC));

!+
! Copy any digits found into temp. area.
!-

        ACTUAL_SCALE = (IF .CURRENT_PTR NEQ 0
			THEN .CURRENT_PTR - .START_PTR
			ELSE .END_TXT_PTR - .START_PTR);
						! calc # of fract digits
        IF .ACTUAL_SCALE NEQ 0
        THEN
   	    BEGIN
  	    CH$MOVE (.ACTUAL_SCALE, .START_PTR, TEXT_BUF + .TEMP_LENGTH);
						! copy fract to temp area
	    TEMP_LENGTH = .TEMP_LENGTH + .ACTUAL_SCALE;
	    TOTAL_FRAC_DIGITS = .TOTAL_FRAC_DIGITS + .ACTUAL_SCALE;
	    END;

	IF .CURRENT_PTR NEQ 0 AND
    	   .CURRENT_PTR LSS .END_TXT_PTR
						! at end of string?
	THEN
	    BEGIN				
!+
! Have found a non-digit.  It may be an embedded blank or tab, or trailing
! blank or tab.  
!-
	    SELECTONE .CURRENT_PTR [0] OF
	    SET
		[CHAR_SPACE, CHAR_NULL]:
		    BEGIN
		    IF (.USER_FLAGS AND V_SKIP_BLANKS) NEQ 0
		    THEN
			BEGIN
			CURRENT_PTR = SPANC (%REF (.END_TXT_PTR - .START_PTR),
					.CURRENT_PTR, SPANC_TABLE,
					%REF (MASK_BLANKS));
			IF .CURRENT_PTR EQL 0 THEN EXITLOOP;
			START_PTR = .CURRENT_PTR;
			END
		    ELSE
			RETURN 0;			! ret an error
		    END;
		[CHAR_TAB]:
		    BEGIN
		    IF (.USER_FLAGS AND V_SKIP_TABS) NEQ 0
		    THEN
			BEGIN
			CURRENT_PTR = SPANC (%REF (.END_TXT_PTR - .START_PTR),
					.CURRENT_PTR, SPANC_TABLE,
					%REF (MASK_TAB));
			IF .CURRENT_PTR EQL 0 THEN EXITLOOP;
			START_PTR = .CURRENT_PTR;
			END
		    ELSE
			RETURN 0;
		    END;
		[OTHERWISE]:
		    RETURN 0;			! invalid character
	    TES;

	    END

	ELSE
!+
! Fraction digits were the rest of the string.
!-
	    EXITLOOP;
   
        END;					! End of "WHILE" loop

    END;					! end of fract. digit search
!+
! Does the input text use all the fractional digits allowed by the decimal
! descriptor?
!-

    DIFF = (-.PACKED_DSC [DSC$B_SCALE]) - .TOTAL_FRAC_DIGITS;
    IF .DIFF GTR 0
    THEN
	BEGIN
!+
! Fewer fractional digits than allowed.  Pad with zeroes.
!-

	CH$COPY (.TEMP_LENGTH, TEXT_BUF, %C'0', .TEMP_LENGTH + .DIFF,
		TEXT_BUF);
	TEMP_LENGTH = .TEMP_LENGTH + .DIFF;
	END

    ELSE IF .DIFF LSS 0
	THEN	
	    BEGIN
!+
! Too many fractional digits.  Save the first digit past the allowed number
! of fractional digits for rounding.  The value will be truncated if the user
! set dont_round in USER_FLAGS, or if the digit to round on is less than five.
! Note that if the caller passed an input string longer than 31 digits, the 
! 32nd digit is saved for rounding purposes.  (It is lost after the CVTSP
! instruction.)
!-

		LOCAL
		INDEX;

		INDEX = 1			! for sign
			+ .TOTAL_INT_DIGITS
			+ .TOTAL_FRAC_DIGITS
			- 1;			! start counting from 0
		ROUND_DIGIT = .TEXT_BUF [.INDEX];
						! save digit to round on
 	        TEMP_LENGTH = .TEMP_LENGTH + .DIFF;
						! subtr extra fract digits
						! from text string
	    END;

!+
! Copy the text to the destination descriptor and convert to packed at the
! same time.
!-

    TEMP_LENGTH = MIN (.TEMP_LENGTH - 1, K_MAX_DIGITS);
						! not more than 31 digits and
						! don't count sign
    CVTSP (TEMP_LENGTH, TEXT_BUF, PACKED_DSC [DSC$W_LENGTH],
	 .PACKED_DSC [DSC$A_POINTER]);

!+
! see if we need to round this number.  the number will be rounded if the
! user did a SET ROUND and there is a rounding digit >= 5.
!-
    IF (.USER_FLAGS AND V_DONT_ROUND) EQL 0 AND	
   	.ROUND_DIGIT GEQ %C'5'	
    THEN 
	BEGIN
	LOCAL
	    ONE;
	IF .TEXT_BUF [0] EQL %C'-'
	THEN
	    ONE = K_PACKED_NEG_ONE
	ELSE
	    ONE = K_PACKED_ONE;
!+
! add one to the last significant digit in the number to cause
! the rounding effect.
!-
	IF NOT ADDP (1, ONE, .PACKED_DSC [DSC$W_LENGTH], .PACKED_DSC [DSC$A_POINTER])
	THEN RETURN 0;
	END;

    RETURN 1;

    END;					! End of routine BAS$CVT_T_P

END						! End of module BAS$CVT_T_P

ELUDOM
