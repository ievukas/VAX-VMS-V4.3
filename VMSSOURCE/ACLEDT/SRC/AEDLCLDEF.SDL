{	TITLE	Local structure definition file for the ACL editor
{	IDENT	/V04-000/
{
{****************************************************************************
{*									    *
{*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
{*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
{*  ALL RIGHTS RESERVED.						    *
{* 									    *
{*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
{*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
{*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
{*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
{*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
{*  TRANSFERRED.							    *
{* 									    *
{*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
{*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
{*  CORPORATION.							    *
{* 									    *
{*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
{*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
{* 									    *
{*									    *
{****************************************************************************

{++
{
{ FACILITY:	Miscellaneous utilities
{
{ ABSTRACT:
{
{	This module contains the necessary definitions for the ACL editor
{	strunctures and flags.
{
{ ENVIRONMENT:
{
{	VAX/VMS operating system, user mode utilities.
{
{--
{
{
{ AUTHOR:	L. Mark Pilant		CREATION DATE:	25-Jan-1983  9:30
{
{ MODIFIED BY:
{
{	V03-007	LMP0213		L. Mark Pilant,		24-Mar-1984  12:23
{		Add support for locking and unlocking the object's ACL.
{
{	V03-006	LMP0193		L. Mark Pilant,		14-Feb-1984  9:41
{		Add the actions delete EOL, reset, and quit to the editor's
{		vocabulary.
{
{	V03-006	LMP0185		L. Mark Pilant,		4-Feb-1984  12:06
{		Add support for device ACLs.
{
{	V03-005	LMP0172		L. Mark Pilant,		28-Nov-1983  12:11
{		Numerous bug fixes, support for VT2xx terminals, and a
{		session keystroke logger.
{
{	V03-004	LMP0144		L. Mark Pilant,		25-Aug-1983  9:53
{		Add a new flag bit for the keypad mode.
{
{	V03-003	LMP0103		L. Mark Pilant,		21-Apr-1983  12:09
{		Add support for HIDDEN and PROTECTED ACEs.
{
{	V03-002	LMP0082		L. Mark Pilant,		2-Mar-1983  12:50
{		Remove the definitions for ACE$x_SUCCESS and ACE$x_FAILURE.
{
{	V03-001	LMP0076		L. Mark Pilant,		11-Feb-1983  9:36
{		Fix the definition for the ITEM structure so that no
{		tag is generated.
{
{*

MODULE	AED$LCLDEF;

/*	This module contains the local definitions used for various
/*	structures and flags used within the ACL editor.

/*	Define the miscellaneous flags.

aggregate FLAGDEF union prefix AED_;
FLAG_BITS structure;
    VT5X bitfield mask;				/* VT52 or VT55 type terminal
    VT1XX bitfield mask;			/* VT100 type terminal
    VT2XX bitfield mask;			/* VT200 type terminal
    SCOPE bitfield mask;			/* Terminal is a scope
    WRAP bitfield mask;				/* Terminal had wrapping
    ENDACL bitfield mask;			/* End of the ACL reached
    ACERROR bitfield mask;			/* Error parsing ACE
    MODIFIED bitfield mask;			/* ACE has been modified
    BACKWARD bitfield mask;			/* Moving backwards
    RUBWORD bitfield mask;			/* Rubout/delete word indicator
    DELBOL bitfield mask;			/* Control-U/delete-EOL indicator
    GOLDKEY bitfield mask;			/* Alternate function specified
    FIRSTCHAR bitfield mask;			/* First character of entered
    INSERT bitfield mask;			/* Insert ACE at random spot
    INSERTEXT bitfield mask;			/* Inserting text into ACE
    PROMPT bitfield mask;			/* Prompt for ACE fields/items
    OPENUIC bitfield mask;			/* UIC is not complete
    OPENACE bitfield mask;			/* ACE is not complete
    DIRECTORY bitfield mask;			/* File is a directory file
    NOITEMSEL bitfield mask;			/* Item selection not allowed
    ACEFORMAT bitfield mask;			/* Help on format not keypad
    ACTIONKEY bitfield mask;			/* ACL editor action requested
    APPLICAT bitfield mask;			/* Keypad in application mode
    OVERSTRIKE bitfield mask;			/* Insert/overstrike mode
    VERB_EDIT bitfield mask;			/* Invoked by EDIT/ACL
    SET_DEV_CMD bitfield mask;			/* Invoked by SET DEVICE/ACL
    SET_FILE_CMD bitfield mask;			/* Invoked by SET FILE/ACL
    SET_DIR_CMD bitfield mask;			/* Invoked by SET DIRECTORY/ACL
    SET_ACL_CMD bitfield mask;			/* Invoked by SET ACL
    JNL_READ bitfield mask;			/* Reading from journal file
end FLAG_BITS;
end FLAGDEF;

/* Define qualifier option flags.

aggregate OPTIONDEF union prefix AED_;
OPTION_BITS structure;
    JOURNAL bitfield mask;			/* Journal file requested
    RECOVER bitfield mask;			/* Recovery file requested
    KEEPREC bitfield mask;			/* Keep the recovery file
    KEEPJNL bitfield mask;			/* Keep the journal file
end OPTION_BITS;
end OPTIONDEF;

/* Common character code definitions

constant CHAR_BS equals 8 prefix AED_ tag C;	/* Backspace
constant CHAR_TAB equals 9 prefix AED_ tag C;	/* Tab
constant CHAR_LF equals 10 prefix AED_ tag C;	/* Line-feed
constant CHAR_CR equals 13 prefix AED_ tag C;	/* Carriage-return
constant CHAR_CTLZ equals 26 prefix AED_ tag C;	/* Control-Z (EOF indicator)
constant CHAR_ESC equals 27 prefix AED_ tag C;	/* Escape

/* Line table entry definitions.

/* Offsets into the line entry table.

aggregate LINEDEF structure prefix LINE_;
    FLINK longword unsigned;			/* Forward link
    BLINK longword unsigned;			/* Backward link
    SIZE word unsigned;				/* Size of input text
    FLAGS structure word unsigned;		/* Necessary context flags
	BEGINACE bitfield mask;			/* Beginning of the ACE
	ENDACE bitfield mask;			/* End of the ACE
	DUMMY bitfield mask;			/* Dummy entry for inserting
	REPLACE bitfield mask;			/* Line replaces existing line
	NOTOUCH bitfield mask;			/* Can't touch line segment
    end FLAGS;
    BINACE longword unsigned;			/* Address of binary ACE
    FIELDST byte unsigned;			/* Base field num for segment
    FILL_1 byte dimension 3 fill prefix LINEDEF tag __;
    TEXT character length 1;			/* Start of ACE text
end LINEDEF;

/* ACE item parsing tables.

/* Define entries in the item tables.

aggregate ITEMDEF structure prefix ITEM;
    DSC_SIZE word unsigned tag "";	/* Size of the item text
    FILL_4 byte dimension 2 fill prefix ITEMDEF tag __;
    DSC_ADDR longword unsigned tag "";	/* Address of item text
    VALUE longword unsigned tag "";	/* Value for item
end ITEMDEF;

/* Editor action definitions.

/* Action definition table entry.

aggregate KEYDEF structure prefix KEY_;
    FLINK longword unsigned;			/* Link to next definition
    BLINK longword unsigned;			/* Link to previous definition
    ACTION byte unsigned;			/* Action code being defined
    constant (
	GOLD,					/* Gold key
	HELP,					/* General help key
	HELPFMT,				/* ACE format help key
	FIND_STR,				/* Locate string key
	FIND_NXT,				/* Locate next occurance of string
	DEL_ACE,				/* Delete ACE key
	UNDEL_ACE,				/* Un-delete ACE key
	SEL_FIELD,				/* Select field key
	ADV_FIELD,				/* Advance to next field key
	DEL_WRD,				/* Delete word key
	UNDEL_WRD,				/* Un-delete word key
	ADVANCE,				/* Advance key
	BOTTOM,					/* Set to last ACE in ACL
	BACKUP,					/* Backup key
	TOP,					/* Set to first ACE in ACL
	DEL_CHR,				/* Delete character key
	UNDEL_CHR,				/* Un-delete character key
	MOVE_WRD,				/* Move word key
	MOVE_ACE,				/* Move ACE key
	MOVE_EOL,				/* Go to EOL key
	DEL_EOL,				/* Delete to EOL key
	INSERT,					/* Insert ACE key
	SEL_ITEM,				/* Select item key
	ENTER,					/* Enter ACE key
	PREV_SCREEN,				/* Display previous screen
	NEXT_SCREEN,				/* Display next screen
	UP,					/* Up arrow
	DOWN,					/* Down arrow
	RIGHT,					/* Right arrow
	LEFT,					/* Left arrow
	OVERSTRIKE,				/* Insert/overstrike mode
	DEBUG,					/* Enter the debugger if present
	MOVE_BOL,				/* Go to BOL key
	RUB_WRD,				/* Rubout word key
	RUB_BOL,				/* Rubout to BOL
	UNDEL_LIN,				/* Un-delete a line
	REFRESH,				/* Refresh the screen
	RESET,					/* Restore ACL to initial form
	EXIT,					/* Exit the editor
	QUIT,					/* Exit without modifying ACL
	RUB_CHR,				/* Rubout character key

	MAX_CODE				/* Must be last
	) equals 1 increment 1 prefix KEY_ tag C;
    SIZE byte unsigned;				/* Size of definition text
    FLAGS structure byte unsigned;		/* Modifier flags
	CSI bitfield mask;			/* Control Sequence Introducer
	SS3 bitfield mask;			/* Single Shift G3
	GOLDREQ bitfield mask;			/* Gold key required
	CTRLCHAR bitfield mask;			/* Control char definition
	ESCSEQ bitfield mask;			/* Escape sequence definition
	USERDEF bitfield mask;			/* User has defined the action
    end FLAGS;
    constant "LENGTH" equals . prefix KEY_ tag C;	/* Size of definition block
    TEXT character length 1;			/* Start of text definition
end KEYDEF;

end_module AED$LCLDEF;
