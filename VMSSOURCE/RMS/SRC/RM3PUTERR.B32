
MODULE RM3PUTERR (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                $PUT and $UPDATE specific error cleanup routines
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:        Todd M. Katz	     CREATION DATE:    17-Jul-82
!
!
! Modified by:
!
!	V03-014 MCN0003		Maria del C. Nasr	04-Apr-1983
!		Change linkage of RM$NULLKEY to RL$JSB.
!
!	V03-013 MCN0002		Maria del C. Nasr	15-Mar-1983
!		More linkages reorganization
!
!	V03-012	MCN0001		Maria del C. Nasr	28-Feb-1983
!		Reorganize linkages
!
!	V03-011	TMK0004		Todd M. Katz		15-Feb-1983
!		If the deletion of the RRV fails in RM$PUTUPD_ERROR, do not
!		delete the primary data record completely, and then create a
!		pointerless RRV at the end of the bucket. This is what is 
!		done currently. Just delete the primary data record by calling
!		RM$DELETE_UDR so that it is deleted according to the normal 
!		rules for primary data record deletion. This does leave the 
!		possibility of having a RRV point to nothing (if the RRV 
!		deletion fails and the primary data record is completely 
!		deleted), but such a occurance would also exist if the 
!		pointerless RRV were deleted as part of a CONVERT/RECLAIM.
!
!	V03-010	TMK0003		Todd M. Katz		05-Jan-1983
!		The routine RM$PUTUPD_ERROR was saving, zeroing, and then 
!		restoring the current NRP key of reference while all newly 
!		added SIDRs were being deleted. This is no longer necessary.
!
!	V03-009	TMK0002		Todd M. Katz		19-Sep-1982
!		Add support for prologue 3 SIDRs. This involves setting AP to
!		3 instead of to 1 each time RM$RECORD_KEY is called to extract
!		the key of the SIDR which is to be located and deleted.
!
!	V03-008	KBT0229		Keith B. Thompson	24-Aug-1982
!		Reorganize psects
!
!	V03-007	TMK0001		Todd M. Katz		17-Jul-1982
!		Completely revised the routines in this module because of 
!		changes in the routines they interface to.
!
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! Define default PSECTS for code
!
PSECT
    CODE = RM$RMS3(PSECT_ATTR),
    PLIT = RM$RMS3(PSECT_ATTR);

! Linkages
!
LINKAGE
    L_ERROR_LINK1,
    L_ERROR_LINK2,
    L_JSB,
    L_LINK_7_10_11,
    L_RABREG_4567,
    L_RABREG_67,
    L_RABREG_7,
    L_PRESERVE1;

! External Routines
!
EXTERNAL ROUTINE
    RM$DELETE_RRV	: RL$RABREG_4567,
    RM$DELETE_SIDR	: RL$RABREG_7,
    RM$DELETE_UDR	: RL$RABREG_4567,
    RM$FIND_BY_RRV	: RL$RABREG_67,
    RM$GET_NEXT_KEY	: RL$LINK_7_10_11,
    RM$KEY_DESC		: RL$RABREG_7,
    RM$NOREAD_LONG	: RL$JSB,
    RM$NULLKEY		: RL$JSB,
    RM$RECORD_KEY	: RL$PRESERVE1,
    RM$RLSBKT		: RL$PRESERVE1;

%SBTTL	'RM$PUTUPD_ERROR'
GLOBAL ROUTINE RM$PUTUPD_ERROR : RL$ERROR_LINK2 NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
! 	This routine's responsibility is to delete SIDR entires and the user
!	data record on $PUT/$UPDATE errors. 
!
!	If this routine is called with the index descriptor for the primary key
!	of reference then all SIDR entries are deleted, otherwise, the deletion
!	of SIDR entries begins with 1 less than the current index descriptor.
!
!	The user data record and any RRV associated with it are deleted only if 
!	the error occurred on a $PUT. The user data record will not be deleted 
!	if the error occurred on any type of a $UPDATE (a regular $UPDATE or a 
!	$PUT converted into a $UPDATE).
!
! CALLING SEQUENCE:
!
!	RM$PUTUPD_ERROR()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	IDX_DFN			- address of index decriptor 
!	    IDX$B_DESC_NO	- descriptor number (index into update buffer)
!	    IDX$B_KEYREF	- key of reference 
!	    IDX$W_MINRECSZ	- minimum record size necessary to contain key
!
!	IFAB			- address of IFAB
!	    IFB$W_KBUFSZ	- size of a keybuffer
!	    IFB$B_NUM_KEYS	- number of keys in the file
!	    IFB$B_PLG_VER	- prologue version of the file
!
!	IRAB			- address of IRAB
!	    IRB$B_CACHEFLGS	- flags for bucket retrieval routines
!	    IRB$L_CURBDB	- address of current buffer descriptor block
!	    IRB$L_KEYBUF	- address of contigious keybuffers
!	    IRB$B_MODE		- access mode of caller
!	    IRB$L_NXTBDB	- address of a BDB (used to hold RRV bucket BDB)
!	    IRB$W_PUTUP_ID	- ID of user data record
!	    IRB$L_PUTUP_VBN	- VBN of user data record
!	    IRB$W_UDR_ID	- ID of current primary data record
!	    IRB$L_UDR_VBN	- VBN of current primary data record
!	    IRB$V_UPDATE	- if set, current operation is an $UPDATE
!	    IRB$L_UPDBUF	- address of internal update buffer
!
!	RAB			- address of RAB
!	    RAB$L_RBF		- record buffer containing user data record
!	    RAB$W_RSZ		- size of user data record
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	IRB$B_CACHEFLGS		- the bit CSH$V_LOCK will be set
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!
!	AP is trashed.
!	All new SIDR entries inserted during the current operation before the
!	    error occurred are deleted as is the user data record and any RRV 
!	    pointing to it if a new data record was inserted during the course 
!	    of the operation before the error occurred (ie - the operation was 
!	    a $PUT).
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IDX_DFN_STR,
	COMMON_RAB_STR;

    GLOBAL REGISTER
	R_REC_ADDR_STR;

    ! If the file allows secondary keys then delete any of those that had been
    ! newly inserted before the error occurred.
    !
    IF .IFAB[IFB$B_NUM_KEYS] GTRU 0
    THEN
	BEGIN

	LABEL
	    ENTRY;

	LOCAL
	    KREF		: BYTE,
	    SAVE_UDR_ID		: WORD,
	    SAVE_UDR_VBN	: LONG;

	! The routine which is called to deleted each SIDR entry, 
	! RM$DELETE_SIDR, operates only on the current primary data record. 
	! However, this routine maybe called to delete SIDR entries of a record
	! other than the current primary data record. Therefore, in order to 
	! make use of RM$DELETE_SIDR, RMS must fool it into believing that it 
	! is operating on the current primary data record. This is done by 
	! saving the RFA address of the current primary data record, if there 
	! is one, and replacing it with the RFA address of the user data record
	! whose SIDR entries are to be deleted. 
	!
	SAVE_UDR_VBN  = .IRAB[IRB$L_UDR_VBN];
	SAVE_UDR_ID   = .IRAB[IRB$W_UDR_ID];

	IRAB[IRB$L_UDR_VBN]  = .IRAB[IRB$L_PUTUP_VBN];
	IRAB[IRB$W_UDR_ID]   = .IRAB[IRB$W_PUTUP_ID];

	! The user data record whose $PUT/$UPDATE resulted in the error maybe 
	! found in the user's record buffer. The keys of the SIDR entries to 
	! be deleted maybe extracted from it.
	!
	REC_ADDR = .RAB[RAB$L_RBF];

	! If this routine was called with the index descriptor for the primary
	! key then all SIDR entries for the user data record are deleted; 
	! otherwise, all SIDR entries up until the entry that was being 
	! inserted when the error ocurred are deleted.
	!
	KREF = .IDX_DFN[IDX$B_KEYREF];
	RM$KEY_DESC(0);

	WHILE (RM$GET_NEXT_KEY()
	       AND
	      (.IDX_DFN[IDX$B_KEYREF] NEQU .KREF))
	DO

	    ! Delete each SIDR entry that had been inserted before the error 
	    ! occurred.
	    !
ENTRY:	    BEGIN

	    BUILTIN
		AP;

	    ! Under the following circumstances, the SIDR entry for the current
	    ! index descriptor being processed will not be deleted:
	    !
	    ! 1. The operation being performed when the error occurred was an
	    !    $UPDATE and no new SIDR was inserted for this key of reference.
	    ! 2. RMS does not have read access to the user's record buffer.
	    ! 3. No new SIDR was inserted for this key of reference because the
	    !    user's data record was too short to contain such a key.
	    !
	    IF  (.IRAB[IRB$V_UPDATE]
		    AND
		   (NOT .BBLOCK[.IRAB[IRB$L_UPDBUF] + .IDX_DFN[IDX$B_DESC_NO], 
			UPD$V_INS_NEW]))
		 OR
		RM$NOREAD_LONG (.RAB[RAB$W_RSZ], .REC_ADDR, .IRAB[IRB$B_MODE])
		 OR
		(.RAB[RAB$W_RSZ] LSSU .IDX_DFN[IDX$W_MINRECSZ])
	    THEN
		LEAVE ENTRY;

	    ! Extract into keybuffer 2, the secondary key for the key of 
	    ! reference being processed from the user's record buffer. Check 
	    ! whether the key is null and only delete the SIDR entry for this
	    ! key of reference if it is not.
	    !
	    AP = 3;

	    BEGIN
 	    GLOBAL REGISTER
		R_BDB;

	    RM$RECORD_KEY (KEYBUF_ADDR(2));
	    END;

	    AP = 1;
	    IF RM$NULLKEY (KEYBUF_ADDR(2))
	    THEN
		RM$DELETE_SIDR();
	
	    END;

	! Restore the RFA of the current primary data record (if there is one) 
	! to its corresponding location in the IRAB as part of the next record
	! positioning context as RMS has finished deleting SIDR entries.
	!
	IRAB[IRB$L_UDR_VBN]  = .SAVE_UDR_VBN;
	IRAB[IRB$W_UDR_ID]   = .SAVE_UDR_ID;
	END;

    ! If the error occurred during a $PUT, then a user data record was 
    ! inserted before any SIDRs and must be deleted. If the error occurred
    ! during an $UPDATE then just the deletion of any new SIDR entries required 
    ! by the $UPDATE is sufficient to restore the record to the state it
    ! occupied prior to the $UPDATE. None of the SIDR entries for the user data
    ! record existing in the file before the $UPDATE are deleted until all the
    ! new SIDR entries are inserted so there are no SIDR entries to re-insert,
    ! and of course, the user data record itself can never be deleted because
    ! it existed in the file prior to the $UPDATE.
    ! 
    ! NOTE that it is possible that RMS will also have to delete an RRV for this
    ! new user data record even though RRVs are never created during the 
    ! insertion of a new primary data record. This is because RMS will release
    ! the primary data bucket containing the new record during index updates
    ! and SIDR entry insertions, and the action of some other stream may cause
    ! the bucket containing this new primary data bucket to split and an RRV
    ! created for it.
    !
    IF NOT .IRAB[IRB$V_UPDATE]
    THEN
	BEGIN

	RM$KEY_DESC(0);

	! Attempt to position to the user data record, and delete it if able to
	! successfully position to it. Perform the FIND_BY_RRV in a way such
	! that if an RRV was created for the new primary data record between
	! the time this stream released the primary data bucket and reclaims it
	! below, the RRV bucket will be locked during the positioning to the 
	! user data record, and the address of the BDB for it placed in 
	! IRB$L_NXTBDB.
	!
	IRAB[IRB$B_CACHEFLGS] = CSH$M_LOCK;
	IRAB[IRB$L_NXTBDB] = 0;

	IF RM$FIND_BY_RRV (.IRAB[IRB$L_PUTUP_VBN], .IRAB[IRB$W_PUTUP_ID], 1)
	THEN
	    BEGIN

 	    GLOBAL REGISTER
		R_BDB_STR,
		R_BKT_ADDR;

	    ! If the new user data record is found not to be in its original
	    ! bucket, then the RRV for it must be deleted.
	    !
	    IF (BDB = .IRAB[IRB$L_NXTBDB]) NEQU 0
	    THEN
		BEGIN
		IRAB[IRB$L_NXTBDB] = 0;
		RM$DELETE_RRV();
		END;

	    ! Delete the new user data record.
	    ! 
	    BDB = .IRAB[IRB$L_CURBDB];
	    IRAB[IRB$L_CURBDB] = 0;

	    RM$DELETE_UDR();

	    ! Mark the primary data bucket that contained the new user data
	    ! record dirty, and release it.
	    !
	    BDB[BDB$V_DRT] = 1;
	    RM$RLSBKT(0);

	    END;

	END;

    END;

%SBTTL	'RM$CLEAN_BDB'
GLOBAL ROUTINE RM$CLEAN_BDB : RL$ERROR_LINK1 NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine's responsibility is to release any buckets that
!	are currently accessed.
!
!
! CALLING SEQUENCE:
!
!	BSBW RM$CLEAN_BDB()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!
!	IRAB			- address of IRAB
!	    IRB$L_CURBDB
!	    IRB$L_LOCKBDB
!	    IRB$L_NXTBDB
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!
!	If there is a bucket associated with IRB$L_NXTBDB, it is released.
!	if there is a bucket associated with IRB$L_LOCK_BDB, it is released.
!	if there is a bucket associated with IRB$L_CURBDB, it is released.
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR;

    GLOBAL REGISTER
	R_REC_ADDR,
	R_IDX_DFN,
	R_BDB_STR;

    ! If there is an accessed bucket associated with IRB$L_NXTBDB, 
    ! then release it.
    !
    IF (BDB = .IRAB[IRB$L_NXTBDB]) NEQ 0
    THEN
	BEGIN
	IRAB[IRB$L_NXTBDB] = 0;
	RM$RLSBKT(0);
	END;

    ! If there is an accessed bucket associated with IRB$L_LOCK_BDB, 
    ! then release it.
    !
    IF (BDB = .IRAB[IRB$L_LOCK_BDB]) NEQ 0
    THEN
	BEGIN
	IRAB[IRB$L_LOCK_BDB] = 0;
	RM$RLSBKT(0);
	END;

    ! If there is an accessed bucket associated with IRB$L_CURBDB, 
    ! then release it.
    !
    IF (BDB = .IRAB[IRB$L_CURBDB]) NEQ 0
    THEN
	BEGIN
	IRAB[IRB$L_CURBDB] = 0;
	RM$RLSBKT(0);
	END;

    END;

END

ELUDOM
