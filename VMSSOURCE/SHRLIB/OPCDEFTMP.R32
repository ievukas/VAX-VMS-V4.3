! 
! ****************************************************************************
! *									    *
! *  Copyright (c) 1982, 1983		                                    *
! *  by DIGITAL Equipment Corporation, Maynard, Mass.			    *
! * 									    *
! *  This software is furnished under a license and may be used and  copied  *
! *  only  in  accordance  with  the  terms  of  such  license and with the  *
! *  inclusion of the above copyright notice.  This software or  any  other  *
! *  copies  thereof may not be provided or otherwise made available to any  *
! *  other person.  No title to and ownership of  the  software  is  hereby  *
! *  transferred.							    *
! * 									    *
! *  The information in this software is subject to change  without  notice  *
! *  and  should  not  be  construed  as  a commitment by DIGITAL Equipment  *
! *  Corporation.							    *
! * 									    *
! *  DIGITAL assumes no responsibility for the use or  reliability  of  its  *
! *  software on equipment which is not supplied by DIGITAL.		    *
! *									    *
! ****************************************************************************
! *********************************************************************************************************************************
!  Created 15-SEP-1984 23:06:40  by  VAX-11 SDL V2.0       Source: 15-SEP-1984 22:48:05 _$255$DUA28:[OPCOM.SRC]OPCDEFTMP.SDL;1     
! *********************************************************************************************************************************
 
 
!*** MODULE OPCDEFTMP ***
! 
!  Operator scope definitions, do one set with "K" tags and one set with
!  "C" tags.
! 
literal OPC$K_SYSTEM = 1;
literal OPC$K_GROUP = 2;
literal OPC$K_USER = 3;
literal OPC$K_UNSPEC = 4;
literal OPC$C_SYSTEM = 1;
literal OPC$C_GROUP = 2;
literal OPC$C_USER = 3;
literal OPC$C_UNSPEC = 4;
! 
!  The version number constant loosely describes the generation number of
!  OPCOM.  This number would be manually bumped at significant times in the
!  development cycle of OPCOM.  It should be used to detect (and hopefully
!  cope) with the situation of different versions of OPCOM executing on
!  different nodes of a cluster.  OPCOM cluster-wide data structures also
!  have version numbers.
! 
literal OPC$K_SW_VERSION = 9;
! 
!  Miscellaneous numbers
! 
literal OPC$K_MAXREAD = 2560;
literal OPC$K_MAXMESSAGE = 2048;
literal OPC$K_COMHDRSIZ = 38;
literal OPC$_OPCOMERROR = 99999;        !  New error message
! 
!  Define message codes for new format messages
! 
literal OPC$_X_OPRENABLE = 10;
literal OPC$_X_LOGFILE = 11;
literal OPC$_X_REQUEST = 12;
literal OPC$_X_REPLY = 13;
literal OPC$_X_CANCEL = 14;
literal OPC$_X_STATUS = 15;
literal OPC$_X_SHUTDOWN = 16;
literal OPC$_X_TIMESTAMP = 17;
literal OPC$_X_SECURITY = 18;           ! 
!  Request codes for cluster communication messages
! 
literal OPC$_X_CLUSMSG = 19;            ! 
!  Define special debugging code
! 
literal OPC$_X_DEBUG = 20;              ! 
!  Connection manager messages
! 
literal OPC$_X_CNXMAN = 21;             ! 
!  Dummy code to receive highest legal value + 1
! 
literal OPC$_X_REQUEST_END_MARK = 22;
! 
!  Define secondary message codes for inter-node cluster messages
! 
literal CLM__ACKNOWLEDGEMENT = 1;       !  Response to acknowledge request
literal CLM__ACKNOWLEDGE_PLEASE = 2;    !  Request for remote node to announce itself
literal CLM__CANCEL = 3;                !  Explicit cancel of request
literal CLM__CHECK_OPERATOR = 4;        !  Make sure this operator is in the database
literal CLM__CHECK_REQUEST = 5;         !  Make sure a request is in the database
literal CLM__CLUMBX = 6;                !  Cluster mailbox message passed from cnxman
literal CLM__CLUSTER = 7;               !  Cluster status change report
literal CLM__DEVICE = 8;                !  Device message (on-line, off-line etc)
literal CLM__IMP_CANCEL = 9;            !  Implicitly cancel a request
literal CLM__IMP_DISABLE = 10;          !  Implicitly disable an operator
literal CLM__OPRENABLE = 11;            !  Tell everyone else to enable or disable an operator
literal CLM__REPLY = 12;                !  REPLY /PEND etc command
literal CLM__REPLY_COMPLETE = 13;       !  Operator request completed by operator
literal CLM__REQUEST = 14;              !  Operator request
literal CLM__RPYBRD = 15;               !  Message from OPCOM to remotes, info for cluster REPLY /TERM, etc
literal CLM__RPYBRD_LOCAL = 16;         !  Broadcast message from REPLY to OPCOM on local node
literal CLM__RPYNOT = 17;               !  Reply notifications
literal CLM__SECURITY = 18;             !  Security alarm from remote
literal CLM__SHUTDOWN = 19;             !  Shut down operations
! 
!  Dummy code to receive highest legal value + 1
! 
literal CLM__REQUEST_END_MARK = 20;
! 
!  Temporary macro definitions for macros that will later be
!  defined in the $OPCDEF macro.  These are the offsets for the
!  various message formats.
! 
! 
!  Define the request header.  All messages (with the exception
!  of the device on/offline messages) have a common header.
! 
literal OPC$K_HDR_SIZE = 26;            !  Size of common header
macro OPC$B_RQSTCODE = 0,0,8,0 %;       !  Request code
macro OPC$B_SCOPE = 1,0,8,0 %;          !  Request SCOPE
macro OPC$L_OPTIONS = 2,0,32,0 %;       !  Request independent option bits.
macro OPC$L_RQ_OPTIONS = 6,0,32,0 %;    !  Request dependent options
macro OPC$L_ATTNMASK1 = 10,0,32,0 %;    !  Attention mask part 1
macro OPC$L_ATTNMASK2 = 14,0,32,0 %;    !  Attention mask part 2
macro OPC$L_RQSTID = 18,0,32,0 %;       !  User specified request id #
macro OPC$L_UIC = 22,0,32,0 %;          !  UIC of requestor
! 
!  Option bits are carried around inside various structures.  Therefore, it
!  is more convenient to define them against the start of a longword, rather
!  than as a byte offset inside a structure.
! 
literal OPC$M_NOLOG = 1;
literal OPC$M_NOBRD = 2;
macro OPC$V_NOLOG = 0,0,1,0 %;          !  Do not log the action
macro OPC$V_NOBRD = 0,1,1,0 %;          !  Do not broadcast
! 
!  Define request independent option longword and bits.
! 
! 
!  Define OPRENABLE message fields.
! 
literal OPC$K_OPRENABLE_MIN_SIZE = 30;  !  Min message size header + 4
! 
!  Define place for the trailer message
! 
macro OPC$T_OPRENABLE_OPR = 26,0,0,0 %; !  Start of oper dev name
literal OPC$M_DISABLE = 1;
literal OPC$M_PERMOPER = 2;
literal OPC$M_NOREMIND = 4;
macro OPC$V_DISABLE = 0,0,1,0 %;
macro OPC$V_PERMOPER = 0,1,1,0 %;
macro OPC$V_NOREMIND = 0,2,1,0 %;
! 
!  Define request dependent option bits.
! 
! 
!  Define LOGFILE message fields.
! 
literal OPC$K_LOGFILE_MIN_SIZE = 30;    !  Min message size header + 4
! 
!  Define place for the trailer message
! 
macro OPC$T_LOGFILE_OPR = 26,0,0,0 %;   !  Start of oper dev name
literal OPC$M_INITLOG = 1;
literal OPC$M_CLOSELOG = 2;
literal OPC$M_DISABLOG = 4;
literal OPC$M_ENABLOG = 8;
macro OPC$V_INITLOG = 0,0,1,0 %;
macro OPC$V_CLOSELOG = 0,1,1,0 %;
macro OPC$V_DISABLOG = 0,2,1,0 %;
macro OPC$V_ENABLOG = 0,3,1,0 %;
! 
!  Define request dependent option bits.
! 
! 
!  Define REQUEST message fields.
! 
literal OPC$K_REQUEST_MIN_SIZE = 28;    !  Min message size
! 
!  Define place for the trailer message length and text
! 
macro OPC$W_REQUEST_LENGTH = 26,0,16,0 %; !  Length of text
macro OPC$T_REQUEST_TEXT = 28,0,0,0 %;  !  Start of text
! 
!  Define SECURITY message fields.
! 
literal OPC$K_SECURITY_MIN_SIZE = 28;   !  Min message size
! 
!  Define place for the trailer message length and text
! 
macro OPC$W_SECURITY_LENGTH = 26,0,16,0 %; !  Length of text
macro OPC$T_SECURITY_TEXT = 28,0,0,0 %; !  Start of text
! 
!  Define REPLY message fields.
! 
literal OPC$K_REPLY_MIN_SIZE = 32;      !  Min message size
! 
!  After the ASCIC operator device name comes the counted (word
!  size count) of the reply text.  The text does not have to be
!  present.  The address of the count and the text itself can
!  be computed at run time.  The minimum size is the header, plus 4
!  for the device and 2 for the count.
! 
macro OPC$T_REPLY_OPR = 26,0,0,0 %;     !  Start of text
! 
!  Define STATUS message fields.
! 
literal OPC$K_STATUS_MIN_SIZE = 30;     !  Min message size header + 4
! 
!  Define place for the operator device name.
! 
macro OPC$T_STATUS_OPR = 26,0,0,0 %;    !  Start of text
! 
!  Define TIMESTAMP message fields.
! 
literal OPC$K_TIMESTAMP_MIN_SIZE = 26;  !  Min message size
! 
!  Define the minimum length, no special fields
! 
! 
!  Define SHUTDOWN message fields
! 
literal OPC$K_SHUTDOWN_MIN_SIZE = 26;   !  Min message size
! 
!  Define the minimum length, no special fields
! 
literal OPC$M_CLUSTER = 1;
macro OPC$V_CLUSTER = 0,0,1,0 %;
! 
!  Define request dependent option bits.
! 
! 
!  Define CANCEL message fields
! 
literal OPC$K_CANCEL_MIN_SIZE = 26;     !  Min message size
! 
!  Define the minimum length, no special fields
! 
literal OPC$M_RQSTDONE = 1;
macro OPC$V_RQSTDONE = 0,0,1,0 %;
! 
!  Define request dependent option bits.
! 
