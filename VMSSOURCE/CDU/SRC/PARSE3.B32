MODULE parse3		(IDENT='V04-000',
			ADDRESSING_MODE(EXTERNAL=GENERAL))
= BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! Facility:	Command Definition Utility, CLD Parser Module 3
!
! Abstract:	This module is one of a few modules that implements the
!		parser for CLD files.  This parser translates the CLD source
!		language into an intermediate representation composed of
!		nodes linked in a directed graph.
!
! Environment:	Standard CDU environment.
!
! Author:	Paul C. Anagnostopoulos
! Creation:	6 December 1982
!
! Modifications:
!
!	V04-002	PCG0002		Peter George		07-Dec-1983
!		Allow NOT to precede expressions.
!
!	V04-001	PCG0001		Peter George		06-Dec-1983
!		Add NEG operator.
!
!--


library 'sys$library:lib';
require 'cdureq';

!	T A B L E   O F   C O N T E N T S
!	---------   ---   ---------------

forward routine
	cdu$bool_expr,
	cdu$bool_term,
	cdu$bool_factor,
	cdu$path;


!	E X T E R N A L   R E F E R E N C E S
!	---------------   -------------------

external routine
	cdu$check_for_children,
	cdu$create_node,
	cdu$get_next_token,
	cdu$lookup_child,
	cdu$report_syntax_error,
	cdu$token_must_be;

external
	cdu$gl_token_class: long,
	cdu$gq_token: descriptor;

!++
! Description:	This syntax routine recognizes the "bool-expr" construct,
!		which is the top-level boolean expression construct.
!
! Parameters:	None.
!
! Returns:	Top-level node representing a boolean expression.
!
! Notes:
!--

GLOBAL ROUTINE cdu$bool_expr
= BEGIN

local
	expr: ref node,
	term: ref node,
	last_term: ref node;


! A boolean expression must begin with a boolean term.  Parse the term.
! If there is no operator following it, then return the term as
! the representation of the expression.

term = cdu$bool_term();
if not token_is(tkn_k_symbol,'OR') then
	return .term;

! Create an OR node to collect the terms.

expr = cdu$create_node(node_k_or);

! Now go into a loop to recognize all remaining operators and terms.

loop (

	! Link the latest term onto the expression node.

	link_parent_to_child(expr,term,last_term);

	! If we don't have another operator, then we are done.

	if not token_is(tkn_k_symbol,'OR') then exitloop;

	! We must have another term.

	cdu$get_next_token();
	term = cdu$bool_term();
);

return .expr;

END;

!++
! Description:	This syntax routine recognizes the "bool-term" construct,
!		which is the construct from which boolean expressions are
!		built.
!
! Parameters:	None.
!
! Returns:	The top-level node representing the term.
!
! Notes:
!--

GLOBAL ROUTINE cdu$bool_term
= BEGIN

local
	term: ref node,
	factor: ref node,
	last_factor: ref node;


! A boolean term must begin with a boolean factor.  Parse the factor.
! If there is no operator following it, then return the factor as
! the representation of the term.

factor = cdu$bool_factor();
if not token_is(tkn_k_symbol,'AND') then
	return .factor;

! Create an AND node to collect the factors.

term = cdu$create_node(node_k_and);

! Now go into a loop to recognize all remaining operators and factors.

loop (

	! Link the latest factor onto the term node.

	link_parent_to_child(term,factor,last_factor);

	! If we don't have another operator, then we are done.

	if not token_is(tkn_k_symbol,'AND') then exitloop;

	! We must have another factor.

	cdu$get_next_token();
	factor = cdu$bool_factor();
);

return .term;

END;

!++
! Description:	This syntax routine recognizes a "bool-factor" construct,
!		which is the contruct from which boolean terms are built.
!
! Parameters:	None.
!
! Returns:	The top-level node representing the factor.
!
! Notes:
!--

GLOBAL ROUTINE cdu$bool_factor
= BEGIN

local
	factor: ref node,
	item: ref node,
	last_item: ref node;


! Determine which kind of factor we have.

if token_is(tkn_k_open_paren) then (

	! We have a subexpression.  Just return its top-level node.

	cdu$get_next_token();
	factor = cdu$bool_expr();
	cdu$token_must_be(tkn_k_close_paren);
	return .factor;
);

if token_is(tkn_k_symbol,'ANY2') then (

	! We have an ANY2 operator, which really looks like a function.
	! Create a node to represent the ANY2 function.

	factor = cdu$create_node(node_k_any2);
	cdu$get_next_token();

	! We have a parenthesized list of paths.
	! Eat the open parenthesis.  Then sit in a loop which recognizes at
	! least one path, along with any others separated by commas.  Finally,
	! eat the close parenthesis.  All of the paths are chained as children
	! of the ANY2 node.

	cdu$token_must_be(tkn_k_open_paren);
	loop (
		item = cdu$path();
		link_parent_to_child(factor,item,last_item);
		if not token_is(tkn_k_comma) then exitloop;
		cdu$get_next_token();
	);
	cdu$token_must_be(tkn_k_close_paren);
	return .factor;
);

if token_is(tkn_k_symbol,'NOT') then (

	! We have a NOT operator.  Create a node to represent it.  Recognize
	! a boolean factor following the NOT and link it as the child.

	factor = cdu$create_node(node_k_not);
	cdu$get_next_token();
	item = cdu$bool_factor();
	link_parent_to_child(factor,item,last_item);
	return .factor;
);

if token_is(tkn_k_symbol,'NEG') then (

	! We have a NEG operator.  Create a node to represent it.  Recognize
	! a path following the NEG and link it as the child.

	factor = cdu$create_node(node_k_neg);
	cdu$get_next_token();
	item = cdu$path();
	link_parent_to_child(factor,item,last_item);
	return .factor;
);

! If it's none of the above, then it must be a path, which specifies a
! particular parameter, qualifier, or type keyword.

return cdu$path();

END;

!++
! Description:	This syntax routine recognizes the "path" construct, which
!		is used to specify an entity path.  An entity path has the
!		following format:
!
!			[< definition >] entity.entity...
!
!		The optional definition specifies a verb or syntax change
!		definition, and the entities specify a hierarchical path
!		to a parameter, qualifier, or type keyword.
!
! Parameters:	None.
!
! Returns:	The node representing the path.
!
! Notes:
!--

GLOBAL ROUTINE cdu$path
= BEGIN

local
	path: ref node,
	item: ref node,
	last_item: ref node;


! Create a node to represent the path.

path = cdu$create_node(node_k_path);

! See if a definition name is specified in angle brackets.

if token_is(tkn_k_open_angle) then (

	! The next token must be a symbol specifying the definition.
	! Create a node for it and link it to the top-level path node.

	cdu$get_next_token();
	item = cdu$create_node(node_k_path_definition,.cdu$gq_token[len],.cdu$gq_token[ptr]);
	link_parent_to_child(path,item,last_item);
	cdu$token_must_be(tkn_k_symbol);

	! Now there must be a close angle bracket.

	cdu$token_must_be(tkn_k_close_angle);
);

! Now we have a sequence of one or more symbols specifying the entity path.
! Create a node for each one and link them to the top-level path node.

loop (
	item = cdu$create_node(node_k_path_entity,.cdu$gq_token[len],.cdu$gq_token[ptr]);
	link_parent_to_child(path,item,last_item);
	cdu$token_must_be(tkn_k_symbol);
	if not token_is(tkn_k_dot) then exitloop;
	cdu$get_next_token();
);

return .path;	

END;
END
ELUDOM
