MODULE showio (IDENT='V04-000',
		ADDRESSING_MODE(EXTERNAL=GENERAL,
		NONEXTERNAL=LONG_RELATIVE)
	       ) =
BEGIN
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! FACILITY:  SHOW utility
!
! ABSTRACT:
!	This module contains the I/O processing routines.
!
! ENVIRONMENT:
!	VAX native, user mode.
!
! AUTHOR:  Gerry Smith		 CREATION DATE:  25-Aug-1983
!
! MODIFIED BY:
!
!	V03-003	MCN0176		Maria del C. Nasr	11-Jul-1984
!		Suppress output when /NOOUTPUT is specified.
!
!	V03-002	GAS0181		Gerry Smith		19-Sep-1983
!		Add an alternate path in OPEN_OUTPUT, to allow JCP
!		to display journals using the SHODEVxxx routines.
!
!	V03-001	GAS0174		Gerry Smith		25-Aug-1983
!		Split SHOWMAIN into SHOWMAIN and SHOWIO.  Also added
!		the /OUTPUT qualifier.
!
!--

LIBRARY 'SYS$LIBRARY:STARLET';		! VAX/VMS common definitions
REQUIRE 'SRC$:SHOWDEF';			! SHOW common definitions

FORWARD ROUTINE
    open_output : NOVALUE,		! Open output file
    show$write_line : NOVALUE,		! Write a line to output file
    show$print_line : NOVALUE,		! Print an already-formatted line
    file_error : NOVALUE;		! Signal an I/O error

EXTERNAL ROUTINE
    cli$get_value,			! Get qualifier value
    cli$present;			! Test if qualifier present

OWN
    out_rab : $BBLOCK[rab$c_bln],		! Output RAB
    out_rss : $BBLOCK[nam$c_maxrss],		! Resultant name string
    output_desc : $BBLOCK[dsc$c_s_bln];		! Output file descriptor


GLOBAL ROUTINE open_output (isi) : NOVALUE =
BEGIN

!---
!
! Open output file
!
! Inputs:
!	isi - if called from JCP, then ISI is the internal stream identifier
!	      of an already-opened file.
!
!---

BUILTIN
    actualcount;

LOCAL
    desc : $BBLOCK[dsc$c_s_bln],		! Output descriptor
    out_fab : $BBLOCK[fab$c_bln],		! Output FAB
    out_nam : $BBLOCK[nam$c_bln],		! Output NAM block
    out_ess : $BBLOCK[nam$c_maxrss];		! Expanded string

!
! Check to see if from SHOW, or from JCP.  If there is an actual parameter
! passed, then this has been called from JCP, and all that is required is
! to dummy-up the RAB.
!
IF actualcount() NEQ 0				! If from JCP,
THEN						! then file already opened...
    BEGIN
    $RAB_INIT(RAB = out_rab);			! Set up the RAB, and then
    out_rab[rab$w_isi] = .isi;			! stuff the ISI in place.
    RETURN;
    END;
    
!
! Fill in the RMS control blocks.
!
$FAB_INIT(FAB=out_fab,				! Initialize output FAB
    	  DNM = 'SHOW.LIS',			! Default to show.lis
	  NAM=out_nam,				! Point to a name block
	  FOP=<ofp,sqo>,
	  RAT=cr,
	  FAC=put);

!
! Get the output file spec, if any.
!
IF cli$present(%ASCID 'OUTPUT')			! If /OUTPUT, then
THEN						! get whatever 
    BEGIN					! the user typed in.
    $init_dyndesc(desc);			! (If just /OUTPUT,
    cli$get_value(%ASCID 'OUTPUT',		! default will be 
		  desc);			! SHOW.LIS)
    out_fab[fab$l_fna] = .desc[dsc$a_pointer];
    out_fab[fab$b_fns] = .desc[dsc$w_length];
    END
ELSE
    ! Otherwise use NL: to suppress all output
    !
    BEGIN
    out_fab[fab$l_fna] = UPLIT BYTE('NL:');
    out_fab[fab$b_fns] = %CHARCOUNT('NL:');
    END;

$NAM_INIT(NAM=out_nam,				! Initialize NAM block
	  RSS=nam$c_maxrss,			! Get a resultant name
	  RSA=out_rss,
	  ESS=nam$c_maxrss,			! Get an expanded name
	  ESA=out_ess);

$RAB_INIT(RAB=out_rab,				! Initialize output RAB
	  FAB=out_fab);

!
! Create the output file and connect record stream.
!
IF NOT $CREATE(FAB=out_fab)
THEN file_error(show$_openout,
		out_fab,
		.out_fab[fab$l_sts],
		.out_fab[fab$l_stv]);

IF NOT $CONNECT(RAB=out_rab)
THEN file_error(show$_openout,
		out_fab,
		.out_rab[rab$l_sts],
		.out_rab[rab$l_stv]);

!
! Point the OUTPUT_DESC to the resultant name string.
!
output_desc[dsc$w_length] = .out_nam[nam$b_rsl];
output_desc[dsc$a_pointer] = out_rss;

RETURN;
END;

GLOBAL ROUTINE show$write_line : NOVALUE =
BEGIN

!---
!
! Write a record to the output file
!
! Inputs:
!
!	CONTROL_STRING - address of an descriptor for a control string for $FAOL
!	PARAM_LIST - address of the parameter list for input to $FAOL
!
!---

BUILTIN
    actualcount,
    actualparameter;

LOCAL
    dummy;

INCR dummy FROM 1 TO ACTUALCOUNT()/2 DO
BEGIN
LOCAL
    status,
    control_string,
    param_list,
    buffer : VECTOR[1024,BYTE],
    desc : VECTOR[2];

control_string = ACTUALPARAMETER(2*(.dummy-1) + 1);
param_list = ACTUALPARAMETER(2*(.dummy-1) + 2);

desc[0] = %ALLOCATION(buffer);
desc[1] = buffer;

IF NOT (status = $FAOL(CTRSTR = .control_string,
		       OUTBUF = desc,
		       OUTLEN = desc,
		       PRMLST = .param_list))
THEN SIGNAL_STOP(.status);

out_rab[rab$w_rsz] = .desc[0];
out_rab[rab$l_rbf] = .desc[1];
IF NOT $PUT(RAB=out_rab)
THEN SIGNAL(show$_writeerr,
	    1, output_desc,
	    .out_rab[rab$l_sts],
	    .out_rab[rab$l_stv]);
END;

RETURN;
END;

GLOBAL ROUTINE show$print_line (length, buffer) : NOVALUE =
BEGIN

!---
!
! Write a record to the output file.  This routine differs from
! SHOW$WRITE_LINE in that what is passed is the address and length
! of a buffer, ready to print.
!
! Inputs:
!	LENGTH - length of buffer
!	BUFFER - address of buffer.
!	
!---

out_rab[rab$w_rsz] = .length;
out_rab[rab$l_rbf] = .buffer;
IF NOT $PUT(RAB=out_rab)
THEN SIGNAL(show$_writeerr,
	    1, output_desc,
	    .out_rab[rab$l_sts],
	    .out_rab[rab$l_stv]);

RETURN;
END;

ROUTINE file_error(message, fab, sts, stv) : NOVALUE =
BEGIN

!---
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine signals an error for a file.
!
! Inputs:
!
!	message		Message
!	fab		Address of the fab
!	sts, stv	STS and STV values
!
!---

MAP
    fab : REF $BBLOCK;
BIND
    nam = .fab[fab$l_nam] : $BBLOCK;
LOCAL
    filedesc : $BBLOCK[dsc$c_s_bln];


CH$FILL(0, dsc$c_s_bln, filedesc);

IF .nam[nam$b_rsl] NEQ 0			! If resultant name present
THEN
    BEGIN
    filedesc[dsc$w_length] = .nam[nam$b_rsl];
    filedesc[dsc$a_pointer] = .nam[nam$l_rsa];
    END
ELSE IF .nam[nam$b_esl] NEQ 0 			! If expanded name present
THEN
    BEGIN
    filedesc[dsc$w_length] = .nam[nam$b_esl];
    filedesc[dsc$a_pointer] = .nam[nam$l_esa]
    END
ELSE
    BEGIN
    filedesc[dsc$w_length] = .fab[fab$b_fns];	! Use filename string
    filedesc[dsc$a_pointer] = .fab[fab$l_fna];	! if all else fails
    END;


SIGNAL(.message, 1, filedesc, .sts, .stv);
END;

END
ELUDOM
