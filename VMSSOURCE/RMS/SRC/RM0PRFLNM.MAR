	.IF	DF,STASWITCH
	$BEGIN	STAPRFLNM,000,RM$RMS0,<PROCESS FILE NAME>
	.IFF	;STASWITCH
	$BEGIN	RM0PRFLNM,033,RM$RMS0,<PROCESS FILE NAME>
	.ENDC	;STASWITCH

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; Facility: RMS32
;
; Abstract:
;		This routine performs RMS32 file name processing.
;
; Environment:
;		Star processor running Starlet exec.
;
; Author: L. F. Laverdure	 Creation Date: 4-JAN-1977
;
; Modified By:
;
;	V03-033	RAS0329		Ron Schaefer		31-Jul-1984
;		Fix RM$PRFLNM to set GET access internally if EXE access is
;		requested; this is needed for execute-only command procedures.
;
;	V03-032	RAS0296		Ron Schaefer		18-Apr-1984
;		Add secondary device name item code to $GETDVI.
;		This name is returned in NAM$T_DVI if the device is spooled.
;
;	V03-031	RAS0289		Ron Schaefer		 6-Apr-1984
;		Add notranslation flag to call to $ASSIGN; change
;		to WLD error when wildcard detected.
;
;	V03-030	RAS0268		Ron Schaefer		12-Mar-1984
;		Move searchlist loop decision to caller of RM$PRFLNM[ALT].
;
;	V03-029	DGB0026		Donald G. Blair		11-Mar-1984
;		Change BSBW to JSB to fix broken branch.
;
;	V03-028	RAS0242		Ron Schaefer		23-Jan-1984
;		Fix bugchecks caused by lack of a fwa (valid R10)
;		on calls to RM$PRFLNM or error returns from RM$XPFN.
;
;	V03-027	RAS0229		Ron Schaefer		 5-Jan-1984
;		Return an error if $OPEN/$CREATE specifies a directory
;		containing "..." after expansion.   Related file
;		processing will resolve ellipses normally.
;
;	V03-026	RAS0225		Ron Schaefer		20-Dec-1983
;		Fix stream PPF file with FTN carriage control problem;
;		eliminate setting of NAM$V_CNCL_DEV and NAM$V_ROOT_DIR
;		in RM$ASSIGN as this is now done by RM$EXPSTRING.
;
;	V03-025	RAS0212		Ron Schaefer		15-Nov-1983
;		Fix version/implementation skew in RM$ASSIGN by
;		conditionalizing this module for both RMS and
;		stand-alone BACKUP on the STASWITCH parameter.
;
;	V03-024	RAS0209		Ron Schaefer		 4-Nov-1983
;		Clean-up returned device characteristics by defining
;		a routine RM$RET_DEV_CHAR to do a uniform job.
;
;	V03-023	RAS0198		Ron Schaefer		 6-Oct-1983
;		Change RM$PRFLNM[ALT] logic to not have an input parameter.
;
;	V03-022	SHZ0001		Stephen H. Zalewski	12-Sep-1983
;		Add a new itemcode to the itemcode list for the $GETDVI.
;
;	V03-021	RAS0183		Ron Schaefer		 2-Sep-1983
;		Make searchlists be non-wildcard characters.
;
;	V03-020	KBT0560		Keith B. Thompson	21-Jul-1983
;		Set name block flags correctly
;
;	V03-019	SHZ0001		Stephen H. Zalewski	26-Jun-1983
;		Get full device name (node$device_name) from GETDVI.
;
;	V03-018	KBT0538		Keith B. Thompson	6-Jun-1983
;		Turn on search list
;
;	V03-017	KBT0515		Keith B. Thompson	23-May-1983
;		RM$XPFN moved
;
;	V03-016	KBT0510		Keith B. Thompson	5-May-1983
;		Use RM$DEALLOCATE_FWA add some search list stuff and
;		redo rooted directories
;
;	V03-015	RAS0146		Ron Schaefer		18-Apr-1983
;		Fix FWA$C_FIBLEN assume to have slightly more
;		tolerance for ACP FIB length changes.
;
;	V03-014	RAS0143		Ron Schaefer		11-Apr-1983
;		Fix device name buffer length to be 16, and change
;		$GETDVI to $GETDVIW.
;
;	V03-013	RAS0139		Ron Schaefer		24-Mar-1983
;		Undo RAS0129.  Not returning the true RAT and RFM values
;		is a "bug", since many programs do not set any values
;		on $OPEN and expect to find out what the RAT and RFM values
;		are from RMS.
;
;	V03-012	RAS0129		Ron Schaefer		 4-Mar-1983
;		Do not destroy the user's RAT and RFM values for
;		indirect PPFs.
;
;	V03-011	JWH0187		Jeffrey W. Horn		15-Feb-1983
;		Add volume lable to list of items retrieved with
;		$GETDVI.
;
;	V03-010	KBT0485		Keith B. Thompson	4-Feb-1983
;		Deallocate all pages off the ifab free list
;
;	V03-009	KBT0473		Keith B. Thompson	24-Jan-1983
;		Fix kbt0469, provide the correct size to RM$RETSPC.
;
;	V03-008	KBT0469		Keith B. Thompson	24-Jan-1983
;		Deallocate the fwa on indirect ppf open
;
;	V03-007	KBT0432		Keith B. Thompson	3-Dec-1982
;		Change the way the device name is stored in shrfilbuf
;
;	V03-006	KBT0407		Keith B. Thompson	10-Nov-1982
;		Fix a broken assume (from unfolding fwa) and call new
;		$getdvi system service
;
;	V03-005	KBT0212		Keith B. Thompson	23-Aug-1982
;		Reorganize psects
;
;	V03-004	KBT0098		Keith B. Thompson	13-Jul-1982
;		Clean up psects
;
;	V03-003	KEK0026		K. E. Kinnear		23-Mar-1982
;		More work like KEK0022 -- correctly allow foreign devices
;		to have ANSI-"a" names. Also add back in NFS to FOREIGN
; 		branch deleted by RAS0067.
;
;	V03-002	RAS0079		Ron Schaefer		17-Mar-1982
;		Add translation table mask support (FAB$B_DSBMSK).
;
;	V03-001	RAS0080		Ron Schaefer		17-Mar-1982
;		Correct stream format carriage control for indirect PPFs,
;		both terminals and files.
;
;	V02-044	RAS0067		Ron Schaefer		9-Feb-1982
;		Re-arrange execution paths so that FWA$T_SHRFILDEV
;		is filled in for all devices.  This field is used to
;		return a canonical device name in NAM$T_DVI.
;		
;	V02-043	KEK0022		K. E. Kinnear		2-Feb-1982
;		Open restrictions on quoted strings to all non-disk
;		(actually non-DIR) devices.
;
;	V02-042	KEK0018		K. E. Kinnear		18-Jan-1982
;		Modifications to allow ANSI-"a" filespecs only on
;		magtape devices.  Also, remove all references to
;		NAM$x_QUOTED and replace with NAM$x_NAME.
;
;	V02-041	RAS0060		Ron Schaefer		15-Jan-1982
;		Fix temp buffer usage for concealed devices;
;		force stream PPF terminals to have RAT=CR.
;
;	V02-040	RAS0058		Ron Schaefer		8-Jan-1982
;		Correct concealed device error path so as to return
;		$ASSIGN errors; and fix bad code saving FWA$T_SHRFILDEV.
;
;	V02-039	RAS0047		Ron Schaefer		18-Nov-1981
;		Fix the UIC form of directories under rooted directories,
;		in order to make the AME and compatibility mode work.
;
;	V02-038	KPL0002		Peter Lieberwirth	15-Nov-1981
;		Fix RAS0045 to not use FWA$T_XLTBUFF1 in RM$ASSIGN.
;		Use unnamed space at end of first page instead.
;		(Fix this better ASAP!)
;
;	V02-037	RAS0045		Ron Schaefer		11-Nov-1981
;		Complete KPL0001 by changing the reference from
;		FWA$T_WILD to FWA$T_SHRFILDEV.  Also fix bad register
;		reference.
;
;	V02-036	RAS0040		Ron Schaefer		16-Oct-1981
;		Implement rooted directories for concealed devices.
;		Restructure RM$ASSIGN to parse the translation of the
;		concealed device name, assign a channel to the concealed
;		device and set the internal MFD to the DID of the
;		root directory.
;
;	V02-035	KPL0001		P Lieberwirth		 7-Oct-1981
;		Save unit number and device name in FWA$T_WILD field for
;		later use in naming shared file.
;
;	V02-034	RAS0025		Ron Schaefer		18-Aug-1981
;		Allow $GET/$PUT for UDF seq org files, except as
;		indirect PPF.
;
;--


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$ASSIGNDEF
	$DEVDEF
	$DVIDEF
	$FABDEF
	$FIBDEF
	$FSCBDEF
	$FWADEF
	$IFBDEF
	$IMPDEF
	$NAMDEF
	$PSLDEF
	$RMSDEF

	.IF	DF,STASWITCH
	$CCBDEF
	$DCDEF
	$UCBDEF
	.ENDC	;STASWITCH

;
; Equated Symbols:
;

	FOP=FAB$L_FOP*8			; bit offset to fop

;
; Own Storage:
;


	.IF	NDF,STASWITCH
	.SBTTL	RM$PRFLNM, Filename Processing Routine

;++
;
; RM$PRFLNM -- Filename Processing Routine.
;
;  This routine first sets up various file access and sharing bits,
;  then allocates a buffer and bdb to use as a scratch work area for building
;  the expanded filename string and interfacing with f11acp, calls rm$xpfn 
;  to expand the filename string, assigns an i/o channel, and finally 
;  retrieves the device characteristics, filling in the associated
;  IFAB and FAB fields.
;
;  If the result of the file name expansion indicates that the file in
;  question is an indirectly accessed process permanent file, no i/o
;  channel need be assigned, as this has already been done.  Instead,
;  an ifi is constructed that points this fab at the associated process
;  permanent file.  This has the side effect of turning a $create call for
;  an indirectly accessed process permanent file into an $open.  This is
;  done by returning to the $OPEN code rather than the $CREATE code.
;
;  If an error occurs, cleanup may be required to
;  deallocate the bdb and buffer and deassign the channel.
;
; Calling Sequence:
;
;	BSBW	RM$PRFLNM
;
; Input Parameters:
;
;	R11	impure area address
;	R10	IFAB address
;	R9	IFAB address
;	R8	FAB address
;	R0	input error status (only if search list operation)
;
; Implicit Inputs:
;
;	The contents of the various FAB and IFAB fields
;	(see functional spec for details), in particular,
;	the various file name specification fields.
;
; Output Parameters:
;
;	R10	FWA address
;	R0	status code (could be R0 input status)
;	R1 thru R5 destroyed
;	none
;
; Implicit Outputs:
;
;	Various fab, fwa, and ifab fields are filled in (see
;	functional spec for details).
;	FWA$Q_FIB initialized.
;	device fields in the ifab filled in.
;
; Completion Codes:
;
;	Standard rms, in particular, success, dev,
;	chn, and dme, in addition to the codes returned
;	by RM$XPFN.
;
; Side Effects:
;
;	See note above on change of $create into $open for indirect ppf.
;
;--

RM$PRFLNM::

;
;  Fill in fac IFAB field from fab handling defaults and setting summary
;  write access bit as required.
;

	MOVB	FAB$B_FAC(R8),IFB$B_FAC(R9)
	BEQL	SETGET				; branch if null
	BBS	#FAB$V_EXE,IFB$B_FAC(R9),SETGET	; or if EXE desired

;
;  Entry point for RMS0CREATE (IFB$B_FAC already set)
;

RM$PRFLNMALT::
	BITB	#FAB$M_UPD!FAB$M_DEL!FAB$M_TRN,-
		IFB$B_FAC(R9)
	BEQL	SETWRT				; branch if not upd, del, or trn
						; accessed, else imply get access.
SETGET:	BISB2	#FAB$M_GET,IFB$B_FAC(R9)	; default to get access
SETWRT:	BITB	#FAB$M_PUT!FAB$M_UPD!FAB$M_DEL!FAB$M_TRN,IFB$B_FAC(R9)
	BEQL	20$				; branch if none of the varieties
						; of write access is specified.
	SSB	#IFB$V_WRTACC,(R9)		; set summary bit

;
;  Go expand file name.
;

20$:	JSB	RM$XPFN				; get fully qualified file name
	BLBC	R0,60$				; quit on error

;
; Check for residual wild characters in file name.
; If FWA$V_QUOTED, then skip check.  This can either be ANSI-"a" filespecs
; where FWA$Q_NAME really holds a quoted string, or it could be a network
; quoted string, where there is nothing in FWA$Q_NAME.
;

	BBC	#FWA$V_WILDCARD,(R10),50$	; don't check if no wilds
	BBS	#FWA$V_QUOTED,(R10),40$		; don't check if quoted
	LOCC	#^A'*',FWA$Q_NAME(R10),-	; any *'s in name?
		@FWA$Q_NAME+4(R10)
	BNEQ	90$				; if neq yes
	LOCC	#^A'%',FWA$Q_NAME(R10),-	; any %'s in name
		@FWA$Q_NAME+4(R10)
	BNEQ	90$				; if neq yes

;
; Check for residual ellipses in the directory spec.   Related file
; processing should resolve valid uses previously.   Unfortunately,
; no simple check is possible -- one has to look at each directory
; spec for the FSCB$V_ELIPS bit.
;

40$:	BBC	#FWA$V_WILD_DIR,(R10),50$	; don't bother if no wild dirs
	EXTZV	#FWA$V_DIR_LVLS,#FWA$S_DIR_LVLS,-; get # of dirs to check
		(R10),R0			; 
	MOVAQ	FWA$Q_DIR1(R10),R1		; ptr to dir descriptors
45$:	BBS	#FSCB$V_ELIPS,(R1),100$		; ... is a no-no
	ADDL2	#8,R1				; next directory
	SOBGEQ	R0,45$				; while they last

;
;  Check for indirect open of process permanent file.
;

50$:	TSTB	FWA$B_ESCFLG(R10)		; did we get a ppf flag?
	BNEQ	80$				; branch if so
	BSBB	RM$ASSIGN			; assign a channel
60$:	RSB					; exit

80$:	BRW	INDPPF				; process indirect ppf file

90$:	RMSERR	WLD				; give wildcard file name error
	RSB

100$:	RMSERR	DIR				; give bad directory error
	RSB

	.ENDC	;STASWITCH

	.SBTTL	RM$ASSIGN, Assign a Channel
;++
;
; RM$ASSIGN
;
;  Now assign a channel and get the associated device characteristics.
;
;  Assign in MAX( requested mode,caller's mode ) if NFS or UFO set,
;  else assign in exec mode.
;
;--

RM$ASSIGN::

	.IF	NDF,STASWITCH

	BBS	#FWA$V_NODE,(R10),NTASGN	; branch if network request

	.ENDC	;STASWITCH


;
; Note:	Device name already has been prefixed with an underscore, so
;	assign system service will not attempt to translate it again.
;
ASSIGN:
	PUSHL	#0			; no mailbox

	ASSUME	ASSIGN$_MBXNAM	EQ	ASSIGN$_ACMODE+4

	PUSHL	#PSL$C_EXEC		; exec mode

	ASSUME	FAB$V_UFO	GE	16
	ASSUME	FAB$V_NFS	GE	16

	BITB	#<FAB$M_UFO!FAB$M_NFS>@-16,FAB$L_FOP+2(R8)
	BEQL	40$			; branch if neither ufo nor nfs set
	EXTZV	#FAB$V_CHAN_MODE,-	; replace with requested mode
		#FAB$S_CHAN_MODE,-	;
		FAB$B_ACMODES(R8),(SP)	;
	CMPB	IFB$B_MODE(R9),(SP)	; compare with caller's mode
	BLEQU	40$			; maximize
	MOVZBL	IFB$B_MODE(R9),(SP)	; switch to caller's mode

	ASSUME	ASSIGN$_CHAN	EQ	ASSIGN$_ACMODE-4

40$:	ssb	#7,(sp)			; set notranslate flag
	PUSHAL	IFB$W_CHNL(R9)		; get channel # back here

	ASSUME	ASSIGN$_DEVNAM	EQ	ASSIGN$_CHAN-4

	PUSHAQ	FWA$Q_DEVICE(R10)	; device name descriptor
	BBC	#FWA$V_CONCEAL_DEV,-	; is this a concealed device
		(R10),45$		;
	MOVAQ	FWA$Q_CONCEAL_DEV(R10),-; yes replace the descriptor
		(SP)			;

	ASSUME	ASSIGN$_NARGS	EQ	4

45$:	CALLS	#4,@#SYS$ASSIGN		; and do the assign
	BLBC	R0,ERRASGN

;
;  Assign succeeded  -  get and set device characteristics.
;

	BSBW	GETDEV_CHAR

	.IF	NDF,STASWITCH

	BLBC	(R11),DIRECTPPF1

;
; Set up fib descriptor.
;

RM$SETFIB::

	ASSUME	FIB$C_LENGTH	LE	FWA$C_FIBLEN

	MOVZWL	#FIB$C_LENGTH,FWA$Q_FIB(R10)	; set length of fib
	MOVAB	FWA$T_FIBBUF(R10),-		; set address of fib buffer
		FWA$Q_FIB+4(R10)		;

ERROR:	RSB

DIRECTPPF1:
	BRW	DIRECTPPF		; branch if process-perm file

	.ENDC	;STASWITCH

	.IF	DF,STASWITCH

	BBS	S^#EXE$V_INIT,EXE$GL_FLAGS,110$	; br if running online
	CMPB	FWA$L_DEV_CLASS(R10),#DC$_DISK	; disk device?
	BEQL	100$			; br if disk
	CMPB	FWA$L_DEV_CLASS(R10),#DC$_TAPE	; tape device?
	BNEQ	110$			; br if not tape
100$:	SSB	#DEV$V_FOR,IFB$L_PRIM_DEV(R9) ; simulate mount/foreign
	SSB	#DEV$V_FOR,IFB$L_AS_DEV(R9) ; simulate mount/foreign
	$CMKRNL_S	STA_VOL_VAL	; set volume valid
	BLBC	R0,ERRASGN		; br if verifychan failed
	$QIOW_S	-
		FUNC = #IO$_PACKACK,-
		EFN = #IMP$C_ASYQIOEFN,-	; throw-away efn
		CHAN = IFB$W_CHNL(R9)
	BLBC	R0,ERRASGN		; br if QIO failed
110$:	$DASSGN_S	CHAN=IFB$W_CHNL(R9)
	CLRW	IFB$W_CHNL(R9)		; clear channel number
	RSB				; exit

	.ENDC	;STASWITCH

	.IF	NDF,STASWITCH
;++
;
;  Assign a channel to the network device and get and set its device
;  characteristics.
;
;--

NTASGN:
	JSB	NT$ASSIGN		; assign a channel
	BLBC	R0,ERRASGN		; branch on error
	BSBB	GETDEV_CHAR		; get network device characteristics
	JMP	NT$MOD_DEV_CHAR		; modify device characteristics
					;  and return to caller
	.ENDC	;STASWITCH

;
;  Handle assign error.
;

ERRASGN:

	.IF	NDF,STASWITCH

	RMSERR	CHN,R1			; unspecified chnl assgn failure
	BRW	RM$MAPERR		; map error and return to caller

	.ENDC	;STASWITCH

	.IF	DF,STASWITCH

	MOVL	IFB$L_LAST_FAB(R9),R1	; get FAB address
	MOVL	R0,FAB$L_STV(R1)	; set STV value
	RMSERR	CHN,R0			; set R0
	RSB				; exit

	.ENDC	;STASWITCH

;
; Kernel mode routine to set volume valid and mark device mounted
; for use in stand-alone Backup.
;

	.IF	DF,STASWITCH

STA_VOL_VAL:
	.WORD	^M<R2,R3,R4,R5>		; kernel mode routine to set valid
	MOVZWL	IFB$W_CHNL(R9),R0	; load channel number
	JSB	@#IOC$VERIFYCHAN	; get CCB address for channel
	BLBC	R0,210$			; br if failed
	MOVL	CCB$L_UCB(R1),R1	; get UCB address from CCB
	BISW2	#UCB$M_VALID,UCB$W_STS(R1)	; set software valid bit
	BISL2	#DEV$M_MNT!DEV$M_FOR,UCB$L_DEVCHAR(R1)
					; set mounted foreign bits
	MOVL	#1,R0			; indicate success
210$:	RET				; return

	.ENDC	;STASWITCH

	.SBTTL	GETDEV_CHAR - Determine the device characteristics
;
;  Subroutine to get and set device characteristics.
;
;	R0-R2	destroyed
;
;
;  The device characteristics wanted are:
;
;	DVI$_DEVCHAR		=>	IFB$L_PRIM_DEV
;	DVI$_DEVCHAR (sec)	=>	IFB$L_AS_DEV
;	DVI$_DEVBUFSIZ		=>	IFB$L_DEVBUFSIZ
;	DVI$_DEVBUFSIZ (sec)	=>	IFB$L_ASDEVBSIZ
;	DVI$_DEVCLASS		=>	FWA$L_DEVCLASS
;	DVI$_FULLDEVNAM		=>	FWA$T_SHRFILBUF (pointed to by shrfil)
;	DVI$_FULLDEVNAM (sec)	=>	FWA$T_AS_SHRFILBUF (pointed to by as_shrfil)
;	DVI$_DEVLOCKNAM		=>	FWA$T_SHRFIL_LCKNAM (pointed to by shrfil_lck)
;	DVI$_RECSIZ		=>	FWA$L_RECSIZ
;

GETDEV_CHAR:

;
; Create item list on stack
;
	MOVL	SP,R2			; save addr to calculate size
	PUSHL	#00			; mark end of list

;
; Create item for devchar value
;

	PUSHL	#00			; return size
	PUSHAL	IFB$L_PRIM_DEV(R9)	; return buffer
	PUSHL	#<DVI$_DEVCHAR@16>+4	; item code and buffer size

;
; Create item for secondary devchar value
;

	PUSHL	#00			; return size
	PUSHAL	IFB$L_AS_DEV(R9)	; return buffer
	PUSHL	#<<DVI$_DEVCHAR!DVI$C_SECONDARY>@16>+4	; item code and buffer size

;
; Create item for devbufsiz value
;

	PUSHL	#00			; return size
	PUSHAL	IFB$L_DEVBUFSIZ(R9)	; return buffer
	PUSHL	#<DVI$_DEVBUFSIZ@16>+4	; item code and buffer size

;
; Create item for secondary devbufsiz value
;

	PUSHL	#00			; return size
	PUSHAL	IFB$L_ASDEVBSIZ(R9)	; return buffer
	PUSHL	#<<DVI$_DEVBUFSIZ!DVI$C_SECONDARY>@16>+4; item code and buffer size

;
; Create item for devclass value
;

	PUSHL	#00			; return size
	PUSHAL	FWA$L_DEV_CLASS(R10)	; return buffer
	PUSHL	#<DVI$_DEVCLASS@16>+4	; item code and buffer size

;
; Create item for devnam string
;

	PUSHAW	FWA$Q_SHRFIL(R10)	; return size
	PUSHL	FWA$Q_SHRFIL+4(R10)	; return buffer
	PUSHL	#<DVI$_FULLDEVNAM@16>-
		+FWA$S_SHRFILBUF	; item code and buffer size

;
; Create item for devlocknam string
;

	PUSHAW	FWA$Q_SHRFIL_LCK(R10)	; return size
	PUSHL	FWA$Q_SHRFIL_LCK+4(R10)	; return buffer
	PUSHL	#<DVI$_DEVLOCKNAM@16>-
		+FWA$S_SHRFIL_LCKNAM	; item code and buffer size

;
; Create item for secondary devnam string
;

	PUSHAW	FWA$Q_AS_SHRFIL(R10)	; return size
	PUSHL	FWA$Q_AS_SHRFIL+4(R10)	; return buffer
	PUSHL	#<<DVI$_FULLDEVNAM!DVI$C_SECONDARY>@16>-
		+FWA$S_AS_SHRFILBUF	; item code and buffer size

;
; Create item for recsiz value
;

	PUSHL	#00			; return size
	PUSHAL	FWA$L_RECSIZ(R10)	; return buffer
	PUSHL	#<DVI$_RECSIZ@16>+4	; item code and buffer size

;
; Create item for volume label
; 

	PUSHL	#00			; return size
	PUSHAL	FWA$T_VOLNAM(R10)	; return buffer
	PUSHL	#<DVI$_VOLNAM@16>+12	; item code and buffer size
	MOVL	SP,R1			; save addr for call
	SUBL2	#8,SP			; make iosb
	MOVL	SP,R0			; save addr for iosb
	$GETDVIW_S -
		CHAN = IFB$W_CHNL(R9),-	; I/O channel number
		EFN = #IMP$C_ASYQIOEFN,-; throw-away efn
		IOSB = (R0),-		; iosb for synchronizing
		ITMLST = (R1)		; item list

	MOVL	R2,SP			; restore stack
	BLBC	R0,ERRASGN1		; exit on error

;
; Subtract one from the device name sizes in order to get rid of the ":"
; at the end of the name
;
	DECW	FWA$Q_SHRFIL(R10)
	DECW	FWA$Q_AS_SHRFIL(R10)

	.IF	NDF,STASWITCH

;
; Deal with FOREIGN devices in a separate code section.  They all allow ANSI-"a"
; names, so don't worry about checking them.
;

	BBS	#DEV$V_FOR,IFB$L_PRIM_DEV(R9),FOREIGN ; branch if dev mntd foreign
	BBS	#FAB$V_NFS+FOP,(R8),FOREIGN	; branch if non-file-struct.
	BBS	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),10$; branch if magtape
	BBC	#DEV$V_DIR,IFB$L_PRIM_DEV(R9),10$; branch if not dir device

;
; At this point we are sure that we are not using an ANSI magtape device.
; Check to see if we have an ANSI quoted string in the FWA, denoted by
; FWA$V_QUOTED set and FWA$V_NODE not set.
;

	BBC	#FWA$V_QUOTED,(R10),10$	; quoted not set
	BBC	#FWA$V_NODE,(R10),20$	; networking, no problem

	.ENDC	;STASWITCH

10$:	RSB				; exit

20$:	RMSERR	FNM			; error in file name
	RSB



	.IF	NDF,STASWITCH
;
; User has requested non-file-structured operations (via the nfs fop bit)
; or device was mounted foreign.
;
; Clear the 'dir" and 'sdi' device characteristics (directory, single directory)
; and set the 'for' device characteristic (foreign) and set up various other
; file attributes.
;

FOREIGN:
	BICB2	#DEV$M_DIR!DEV$M_SDI,IFB$L_PRIM_DEV(R9); say no directory
	SSB	#DEV$V_FOR,IFB$L_PRIM_DEV(R9); say foreign device
	BBC	#DEV$V_SQD,IFB$L_PRIM_DEV(R9),CHKRND; branch if not magtape
	MOVZWL	FWA$L_RECSIZ(R10),R1	; fixed recsize from mount
	BEQL	SETREC			; branch if not speced
	BBC	#IFB$V_CREATE,(R9),10$	; branch if doing open

;
;  This is create.  Only allow blocking if rfm=fix and mrs = recordsize.
;

	CMPB	FAB$B_RFM(R8),#FAB$C_FIX; rfm = fix?
	BNEQ	SETREC			; branch if not
	CMPW	FAB$W_MRS(R8),R1	; same size?
	BNEQ	SETREC			; branch if not
10$:	MOVW	R1,IFB$W_MRS(R9)	; set fixed rec size from
					; mount parameter.
	BICB2	#DEV$M_REC,IFB$L_PRIM_DEV(R9); clear 'unit rec' char.
	BRB	SETFIX			; go set fixed record length
CHKRND:	BBC	#DEV$V_RND,IFB$L_PRIM_DEV(R9),SETREC; branch if not disk
	MOVW	IFB$L_DEVBUFSIZ(R9),IFB$W_MRS(R9); say fixed 512 records
	MNEGL	#2,IFB$L_EBK(R9)	; say large eof blk
					; (RM1CREATE increments this)
	MNEGL	#1,IFB$L_HBK(R9)	; say large allocation
SETFIX:	MOVB	#FAB$C_FIX,IFB$B_RFMORG(R9); say fixed records len.
	MOVW	IFB$W_MRS(R9),IFB$W_LRL(R9); set fixed rec len.
	BRB	EXIT			; continue
SETREC:	BISB2	#DEV$M_REC,IFB$L_PRIM_DEV(R9); say mt is unit rec
EXIT:	BBS	#IFB$V_BIO,IFB$B_FAC(R9),10$; branch if block i/o
	SSB	#IFB$V_BRO,IFB$B_FAC(R9); allow block i/o functions
10$:	RSB

	.ENDC	;STASWITCH

ERRASGN1:
	BRW	ERRASGN


	.IF	NDF,STASWITCH
;
;  Process-Permanent File  -  check device characteristcs for terminal
;  and if so reassign the channel in super mode.
;
;  Also reset device characteristics to indicate get/put access
;  via dev.
;

DIRECTPPF:
	BBC	#DEV$V_TRM,IFB$L_PRIM_DEV(R9),SETDEV

;
;  Process permanent file is a terminal  -  reassign channel in super mode
;  retain the exec mode channel until we have a super mode channel,
;  so that the virtual terminal ucb will not disappear.  This,
;  unfortunately, has the property that the user can get a spurious
;  no more channels error.
;

	MOVW	IFB$W_CHNL(R9),R2	; save exec channel number
	$ASSIGN_S	-
		FWA$Q_DEVICE(R10),-
		IFB$W_CHNL(R9),-
		#PSL$C_SUPER
	MOVL	R0,R3			; preserve assign status code
	$DASSGN_S	R2		; return the exec mode channel
	BLBC	R3,ERRASGN1

;
; Assume no change in dev chars; hence no need to reprocess.
;
;  If FAB$V_GET not set in fac, clear DEV$V_IDV.
;  If FAB$V_PUT not set in fac, clear DEV$V_ODV.
;

SETDEV:	BBS	#FAB$V_GET,IFB$B_FAC(R9),10$; branch if 'get' on
	CSB	#DEV$V_IDV,IFB$L_PRIM_DEV(R9)
	CSB	#DEV$V_IDV,IFB$L_AS_DEV(R9)

	ASSUME	FAB$V_PUT	EQ	0

10$:	BLBS	IFB$B_FAC(R9),20$	; branch if 'put' on
	CSB	#DEV$V_ODV,IFB$L_PRIM_DEV(R9)
	CSB	#DEV$V_ODV,IFB$L_AS_DEV(R9)
20$:	BRW	RM$SETFIB		; return to main line

	.ENDC	;STASWITCH


	.IF	NDF,STASWITCH
;
;  Handle indirect open of process permanent file.
;
;  Perform various checks to see if operation possible.
;
;  (Note: This routine has the side effect of turning a $CREATE
;	on an inidrect process permanent file into an $OPEN)
;

INDPPF:
	$TSTPT	INDPPF

	ASSUME	FAB$V_UFO	GE	16
	ASSUME	FAB$V_NFS	GE	16

;
; Check for various invalid options.
;

	BITB	#<FAB$M_UFO!FAB$M_NFS>@-16,FAB$L_FOP+2(R8)
	BNEQ	ERRFOP			; branch if any specified
	TSTB	FWA$B_ESCTYP(R10)	; escape type 0?
	BNEQ	ERRLNE			; branch if not (not legal)
	CMPZV	#14,#2,FWA$W_ESCIFI(R10),#^B10; escape ifi indicate a ppf?
	BNEQ	ERRLNE			; branch if not

;
;  Get address of process permanent file IFAB and check it out.
;

	MOVL	R9,R7			; save ifab addr

	ASSUME	FAB$V_PPF_IND	GE	8

	BISB2	#FAB$M_PPF_IND@-8,FWA$W_ESCIFI+1(R10); get non-privileged ppf ifi
	MOVZWL	FWA$W_ESCIFI(R10),R9	; and move it to r9
	MOVL	#IMP$L_IFABTBL/4,R0	; ifab table offset/4
	PUSHL	R11			; save impure area pointer
	BSBW	RM$GTIADR		; get ifab address
	POPR	#^M<R11>		; restore image i/o ptr (save cc's)
	BEQL	ERRIFI			; branch if no ppf ifab
	CMPB	IFB$B_BID(R9),#IFB$C_BID; is it an ifab?
	BNEQ	ERRBG3			; really bad if not!

;
;  Got ppf IFAB o.k.
;
;  Insure org is sequential and rfm is not UDF
;  (Note: User fac is ignored.  Each operation will be checked.)
;

	ASSUME	FAB$C_SEQ	EQ	0

	TSTB	IFB$B_ORGCASE(R9)	; seq file org?
	BNEQ	ERRORG			; branch if not (not supported)

	ASSUME	FAB$C_UDF	EQ	0

	TSTB	IFB$B_RFMORG(R9)	; undefined format?
	BEQL	ERRRFM			; branch if so (not supported)

;
;  Check for valid rat value: must be only one of cr, ftn, or prn.
;  If prn set in rat must also be set for real file.
;
;  Isolate carriage control bits
;
	CLRL	R1			; zero-extend the field
	BICB3	#255\<FAB$M_CR!FAB$M_FTN!FAB$M_PRN>,FAB$B_RAT(R8),R1
	BBC	#DEV$V_ODV,IFB$L_PRIM_DEV(R9),5$; branch if input only
	BBC	#FAB$V_PRN,R1,5$	; branch if not prn
	BBC	#FAB$V_PRN,IFB$B_RAT(R9),ERRRAT; branch if ppf not prn

	ASSUME	FAB$V_FTN EQ 0
	ASSUME	FAB$V_CR EQ FAB$V_FTN+1
	ASSUME	FAB$V_PRN EQ FAB$V_CR+1

5$:	BBC	R1,I^#^B00010111,ERRRAT	; branch if more than 1 ccl attr

;
;  Check for ppf IFAB busy setting busy if not in use.
;

10$:	BBCS	#IFB$V_BUSY,(R9),IND_PPF_OK; branch if not busy


ERRFOP:
	RMSERR	FOP			; invalid fop bits for ppf
	RSB

ERRLNE:
	RMSERR	LNE			; invalid equivalence string
	RSB

ERRBG3:	RMSTBUG	FTL$_BADIFAB		; invalid ifab

ERRIFI:
	RMSERR	IFI			; invalid equiv. string ifi
	BRB	RESTORE_IFAB

ERRORG:
	RMSERR	ORG			; ppf not sequential org
	BRB	RESTORE_IFAB

ERRRFM:
	RMSERR	RFM			; ppf UDF format
	BRB	RESTORE_IFAB

ERRRAT:
	RMSERR	RAT			; bad rat value
RESTORE_IFAB:
	MOVL	R7,R9			; restore temp. ifab addr
	RSB				; go handle error


ERRNAM:
	POPR	#^M<R1>			; get ppf ifab addr
	CSB	#IFB$V_BUSY,(R1)	; clear busy
	RSB				; go clean up



;
;  The indirect open of the process permanent file is permissable.
;  switch to using the ppf IFAB for the remainder of this open.
;
;  Must perform the following:
;
;	1. Set ppf_image bit.
;	2. Copy caller's mode and arg list address to the ppf ifab.
;	   (Note: there will be no asb because no stall can have occurred.)
;	3. Return the temporary ifab and fwa.
;	4. Zero the ifi table entry to temporary ifab.
;	5. Move address of pio impure area to r11 and copy saved sp
;	   to pio impure area.
;

IND_PPF_OK:
	SSB	#IFB$V_PPF_IMAGE,(R9)	; indicate indirect processing
					;  of ppf
	MOVB	IFB$B_MODE(R7),IFB$B_MODE(R9); save caller's mode
	MOVL	IFB$L_ARGLST(R7),IFB$L_ARGLST(R9); and arg list addr
	PUSHL	R9			; save ppf ifab addr

;
;  Fill in name block, if any, with resultant string and dvi.
;

	MOVL	R7,R9			; restore temp ifab addr
	BSBW	RM$FILLNAM		; fill in nam blk if any
	BLBC	R0,ERRNAM		; branch on error
	MOVW	FWA$W_ESCIFI(R10),AP	; save ifi code
	BSBW	RM$DEALLOCATE_FWA	; deallocate fwa and associated struct.
	MOVL	R9,R3			; ifab addr to r3,
	MOVL	R9,R4			;  r4 for retblk
	BSBW	RM$RETBLK		; deallocate ifab

;
; return all pages used
;

	SUBL3	#8,R9,R10		; get ifab list head
	MOVL	(R10),R4		; get first hole (must be there - ifb)

1$:	PUSHL	(R4)			; save forward pointer
	CMPL	8(R4),#504		; hole should be at least a page (-header)
	BLSSU	DEALLERR		; some one goofed
	BSBW	RM$RET1PAG		; return it
	POPL	R4			; restore pointer to next hole
	CMPL	R4,R10			; all done?
	BNEQ	1$			; do next

	BSBW	RM$ZAPIFI		; zero ifab table entry
	MOVL	(SP)+,R9		; restore ppf ifab addr
	MOVL	R9,R10			; copy to r10

;
; Copy saved sp value.
;

	MOVL	IMP$L_SAVED_SP(R11),@#PIO$GW_PIOIMPA+IMP$L_SAVED_SP
	MOVAW	@#PIO$GW_PIOIMPA,R11	; get pio impure area addr

;
;  Output the new ifi value and bls field to fab.
;

	MOVW	IFB$L_ASDEVBSIZ(R9),FAB$W_BLS(R8); default buffer size
	POPL	R0			; pop return pc

;
;  If user specified stream format but RAT=0, force RAT=CR 
;  to get proper output.
;

	CMPB	FAB$B_RFM(R8),#FAB$C_STM ; user specified stream format?
	BLSSU	5$			; branch if not
	BITB	#<FAB$M_CR!FAB$M_FTN!FAB$M_PRN>,-
		FAB$B_RAT(R8)		; user specified RAT?
	BNEQ	5$			; branch if so
	SSB	#FAB$V_CR,FAB$B_RAT(R8) ; force RAT=CR
5$:	INSV	FAB$B_RAT(R8),#FAB$V_PPF_RAT,#FAB$S_PPF_RAT,AP; save rat in ifi
	MOVW	AP,FAB$W_IFI(R8)	; construct non-priv. ifi

;
;  Return the real rat and rfm values for the file, except
;  If this is a unit record device and the user has not specified
;  print file carriage control, return rfm=var and don't change the
;  user's rat field.
;

	ASSUME	DEV$V_REC EQ 0

	BLBS	IFB$L_PRIM_DEV(R9),20$	; branch if unit record
10$:	BRW	RM$COPRTN1		; go finish up open
20$:	BBS	#FAB$V_PRN+FAB$V_PPF_RAT,AP,10$; branch if user specifed
					; print file carriage ctl.
	MOVB	#FAB$C_VAR,FAB$B_RFM(R8); change rfm to var
	BRW	RM$COPRTN2		; finish up open without
					;  altering user's rat

DEALLERR:
	RMSTBUG	FTL$_DEALLERR

	.ENDC	;STASWITCH

	.SBTTL	RM$RET_DEV_CHAR - Set device characteristics into FAB
;++
;
;  Set the associated device characteristics into the FAB.
;
;  The following algorithm is used to determine the characteristics:
;
;	Foreign-mounted devices:
;		FAB$L_DEV = FAB$L_SDC = IFB$L_AS_DEV
;	Spooled devices:	
;		FAB$L_DEV = IFB$L_AS_DEV
;		FAB$L_SDC = IFB$L_PRIM_DEV
;	Network devices:
;		As determined by NT$REG_DEV_CHAR
;	Indirect PPF sequential devices:
;		FAB$L_DEV = IFB$L_PRIM_DEV modified to be a record device:
;			DIR, FOD, RND, SDI, SQD  cleared
;			REC, CCL set
;		FAB$L_SDC = IFB$L_AS_DEV
;	All other normal devices:
;		FAB$L_DEV = IFB$L_PRIM_DEV
;		FAB$L_SDC = IFB$L_AS_DEV
;
;   If device is foreign, move AS_DEV characteristics into both FAB 
;   characteristics words, since the PRIM_DEV has been altered for 
;   internal RMS processing requirements (e.g. DIR has been cleared, FOR
;   may have been set because of NFS, etc.).
;
;--

RM$RET_DEV_CHAR::

	MOVL	IFB$L_PRIM_DEV(R9),FAB$L_DEV(R8)	; set prim dev char
	MOVL	IFB$L_AS_DEV(R9),FAB$L_SDC(R8)		; set secondary dev char
	BBS	#DEV$V_FOR,IFB$L_PRIM_DEV(R9),10$	; diff if foreign
	BBC	#DEV$V_SPL,IFB$L_AS_DEV(R9),20$		; okay if not spooled
	MOVL	IFB$L_PRIM_DEV(R9),FAB$L_SDC(R8)	; set alt dev. char.
10$:	MOVL	IFB$L_AS_DEV(R9),FAB$L_DEV(R8)		; set alt dev. char.

	ASSUME	FAB$C_SEQ	EQ	0

20$:	TSTB	IFB$B_ORGCASE(R9)			; sequential file org?
	BNEQ	30$					; branch if not

;
;  If this is an indirect process-permanent file, set up the device characteristics
;  to make it look like a unit record device.
;

	BBC	#IFB$V_PPF_IMAGE,(R9),30$		; branch if not indirect ppf
	BICL2	#DEV$M_DIR!DEV$M_FOD!DEV$M_RND -	; clear file characteristics
		!DEV$M_SDI!DEV$M_SQD,FAB$L_DEV(R8)
	BISL2	#DEV$M_REC!DEV$M_CCL,-			; and set unit record chars.
		FAB$L_DEV(R8)

;
;  Network specific code
;

30$:
	.IF	NDF,STASWITCH

	BBC	#IFB$V_DAP,(R9),40$			; branch if not network operation
	CLRB	IFB$B_ORGCASE(R9)			; zero orgcase to subsequently
							;  force rel and idx file oper
							;  thru sequential code!!!
	JSB	NT$RET_DEV_CHAR				; return real device char to user

	.ENDC	;STASWITCH
							;  if they were returned by fal
40$:	RSB


	.END
