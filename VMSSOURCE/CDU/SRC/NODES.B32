MODULE nodes		(IDENT='V04-000',
			ADDRESSING_MODE(EXTERNAL=GENERAL))
= BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! Facility:	Command Definition Utility, Node Routines
!
! Abstract:	This module provides routines to create and manipulate nodes,
!		which are the data structure used to build the intermediate
!		representation of a CLD file.  These nodes are linked together
!		as a directed graph, and when the parsing of the CLD is
!		complete, represent the entire meaning of the CLD.
!
! Environment:	Standard CDU environment.
!
! Author:	Paul C. Anagnostopoulos
! Creation:	30 November 1982
!
! Modifications:
!--


library 'sys$library:lib';
require 'cdureq';

!	T A B L E   O F   C O N T E N T S
!	---------   ---   ---------------

forward routine
	cdu$create_node,
	cdu$free_all_nodes: novalue,
	cdu$lookup_child,
	cdu$check_for_children;


!	E X T E R N A L   R E F E R E N C E S
!	---------------   -------------------

external routine
	lib$get_vm;

external
	cdu$gl_line_number: long;

!	N O D E   S P A C E   D A T A
!	-------   ---------   -------

! The following items are needed to maintain the node space, which is a chunk 
! of memory that contains all of the nodes needed for the intermediate
! representation of a CLD.

literal
	node_space_size = 256 * 512;	! Size of node space is 128K.
own
	node_space: pointer initial(0),	! Address of node space.
	next_node: pointer;		! Address of next available byte.

!++
! Description:	This routine is called to create and initialize a new node.
!
!
! Parameters:	type		By value, a the type of the new node.
!		text_length	Optional, by value, the length of the text
!				string for the new node.
!		text		Optional, by reference, the text string for
!				the new node.
!
! Returns:	Address of new node.
!
! Notes:	Upon first call, this routine allocates the node space.
!--

GLOBAL ROUTINE cdu$create_node(type: long,
			       text_length: long,
			       text: pointer)
= BEGIN

builtin
	nullparameter;

local
	status: long,
	real_text_length: long,
	new_node: ref node;


! If the node space has not been allocated, then do it now.

if .node_space eqla 0 then (
	status = lib$get_vm(%ref(node_space_size),node_space);
	check(.status, .status);
	next_node = .node_space;
);

! Set up a variable to tell us the actual length of the text string that is
! to be placed in the node.

real_text_length = (if nullparameter(2) then 0 else .text_length);

! Allocate the node as an integral number of longwords.  Make sure it fits
! within the allocated node space.

new_node = .next_node;
next_node = .next_node + round_up(%fieldexpand(node_t_text,0) + .real_text_length, 4);
if .next_node gtra .node_space + node_space_size then
	signal(msg(cdu$_intnodespace));

! Initialize the node.

new_node[node_w_type] = .type;
new_node[node_w_line] = .cdu$gl_line_number;
new_node[node_l_sister] = new_node[node_l_child] = new_node[node_l_code] = 0;
new_node[node_b_text_length] = .real_text_length;
ch$move(.real_text_length,.text, new_node[node_t_text]);

! Return the address of the new node.

return .new_node;

END;

!++
! Description:	This routine is called after a CLD file has been completely
!		processed.  It frees up all the node space for the next file.
!
! Parameters:	None.
!
! Returns:	Nothing.
!
! Notes:
!--

GLOBAL ROUTINE cdu$free_all_nodes	: novalue
= BEGIN


! Simply reinitialize the next node pointer.

next_node = .node_space;

return;

END;

!++
! Description:	This routine is called to search all of the children of a
!		given parent node.  It looks for a node of the given type.
!		In addition, if desired, it will also compare a text string
!		to the text string in the children of matching type.
!
! Parameters:	parent		By reference, the parent node.
!		type		By value, the type of node that is desired.
!		text_length	Optional, by value, the length of the text
!				string to match.
!		text		Optional, by reference, the text string to
!				match.
!
! Returns:	Address of first matching child, or zero if none.
!
! Notes:
!--

GLOBAL ROUTINE cdu$lookup_child(parent: ref node,
				type: long,
				text_length: long,
				text: pointer)
= BEGIN

local
	child: ref node;

builtin
	nullparameter;


! We use one of two scanning loops, depending upon whether a text string
! match is desired.

if nullparameter(3) then

	! No text string match is descired, so just look for a child of the
	! correct node type.

	scan_children(parent,child,
		if .child[node_w_type] eqlu .type then
			return .child;
	)

else

	! A text string match is desired, so we must look for a child of
	! the correct node type which contains the specified string.

	scan_children(parent,child,
		if ch$eql(.child[node_b_text_length],child[node_t_text],
			  .text_length,.text,%x'00') and
		   .child[node_w_type] eqlu .type		then
			return .child;
	);

! We did not find a match, so return zero.

return 0;

END;

!++
! Description:	This routine is called to search all of the children of a given
!		parent node, looking for children of certain types.  The caller
!		is only interested in knowing whether at least one of the
!		specified node types exist.
!
! Parameters:	parent		By reference, the parent node.
!		types...	By value, one or more node types to search for.
!
! Returns:	By value, a boolean which is true if one of the types is found.
!
! Notes:
!--

GLOBAL ROUTINE cdu$check_for_children(parent: ref node,
				      types: vector[,long])
= BEGIN

local
	types_size: long,
	child: ref node,
	type_key: long;

builtin
	actualcount;


! Calculate the size of the types list for use in the loop below.

types_size = (actualcount() - 1) * 4;

! Scan all the children of the parent node.

scan_children(parent,child,

	! Lookup the node type in the type list passed to us.  If found,
	! return true.

	type_key = .child[node_w_type];
	if ch$find_sub(.types_size,types, 4,type_key) neqa 0 then
		return true;
);

! We didn't find a child of the specified types, so return false.

return false;

END;
END
ELUDOM
