MODULE EXTFCB (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This module contains a routine which will build the
!	extension fcb chain for the given fcb, if necessary.
!
! ENVIRONMENT:
!
!	VAX/VMS operating system, including privileged system services
!	and internal exec routines. This routine must be called in
!	kernel mode.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  25-Jul-1977  10:55
!
! MODIFIED BY:
!
!	V03-007	CDS0005		Christian D. Saether	29-Aug-1984
!		Add optional second argument to BUILD_EXT_FCBS
!		to specify primary fcb other than PRIMARY_FCB.
!
!	V03-006	CDS0004		Christian D. Saether	21-Aug-1984
!		Update EFBLK after turning back to primary when
!		building extension fcb chain.
!
!	V03-005	CDS0003		Christian D. Saether	14-Aug-1984
!		Replace MAKE_EXTFCB routine with BUILD_EXT_FCBS.
!
!	V03-004	CDS0002		Christian D. Saether	19-Apr-1984
!		Use REFCNT instead of ACNT.
!		Set up FCB$L_LOCKBASIS to be that of primary fcb.
!
!	V03-003	CDS0001		Christian D. Saether	30-Dec-1983
!		Use L_NORM linkage and BIND_COMMON macro.
!
!	V03-002	LMP0059		L. Mark Pilant,		21-Dec-1982  10:51
!		Always create an FCB for a file header accessed.  This
!		eliminates a lot of special casing for FCB handling.
!
!	V03-001	ACG0272		Andrew C. Goldstein,	23-Mar-1982  10:17
!		Clean up use of dummy FCB
!
!	B0102	ACG26369	Andrew C. Goldstein,	28-Dec-1979  15:44
!		Fix multi-header interlock bug
!
!	B0101	ACG0003		Andrew C. Goldstein,  19-Dec-1978  17:40
!	Add multi-volume support
!
!	B0100	ACG00001	Andrew C. Goldstein,  10-Oct-1978  20:00
!	Previous revision history moved to [F11B.SRC]F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE BUILD_EXT_FCBS (PRIMHDR, PFCB) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Build the extension fcb chain starting with the primary
!	fcb and header.  Update the size in the primary fcb.  Turn
!	the header back when done.
!
! SIDE EFFECTS:
!	new FCBs created, primary fcb modified
!
!--

BEGIN

MAP
	PRIMHDR		: REF BBLOCK;	! file header arg

BIND_COMMON;

EXTERNAL ROUTINE
	CREATE_FCB	: L_NORM,	! create a new FCB
	NEXT_HEADER	: L_NORM,
	READ_HEADER	: L_NORM;

LOCAL
	FCB		: REF BBLOCK,
	PRIMFCB		: REF BBLOCK,
	NEW_FCB		: REF BBLOCK,
	HEADER		: REF BBLOCK,
	NEW_HEADER	: REF BBLOCK;

IF ACTUALCOUNT EQL 2
THEN
    BEGIN
    PRIMFCB = .PFCB;

! This is a flag for READ_HEADER to tell it not to update FILE_HEADER.
! This prevents it from being set when dealing with directory headers.
! The flag is a one-shot cleared by READ_HEADER (which may be called
! by NEXT_HEADER).
!
    STSFLGS [STS_LEAVE_FILEHDR] = 1;
    END
ELSE
    PRIMFCB = .PRIMARY_FCB;

FCB = .PRIMFCB;
HEADER = .PRIMHDR;

UNTIL (NEW_HEADER = NEXT_HEADER (.HEADER, .FCB)) EQL 0
DO
    BEGIN
    HEADER = .NEW_HEADER;

    IF ACTUALCOUNT EQL 2
    THEN
	NEW_FCB = CREATE_FCB (.HEADER, .PRIMFCB)
    ELSE
	NEW_FCB = CREATE_FCB (.HEADER);

    CURRENT_VCB [VCB$W_TRANS] = .CURRENT_VCB [VCB$W_TRANS] + 1;
    NEW_FCB [FCB$W_REFCNT] = 1;
    NEW_FCB [FCB$L_LOCKBASIS] = .PRIMFCB [FCB$L_LOCKBASIS];
    NEW_FCB [FCB$L_STVBN] = .NEW_FCB [FCB$L_STVBN] + .PRIMFCB [FCB$L_FILESIZE];
    PRIMFCB [FCB$L_FILESIZE] = .PRIMFCB [FCB$L_FILESIZE]
				+ .NEW_FCB [FCB$L_FILESIZE];
    FCB [FCB$L_EXFCB] = .NEW_FCB;
    FCB = .NEW_FCB;

! Set it up for the next NEXT_HEADER or the possible READ_HEADER
! if we drop out of this loop.
!

    IF ACTUALCOUNT EQL 2
    THEN
	STSFLGS [STS_LEAVE_FILEHDR] = 1;

    END;

IF .FCB NEQ .PRIMFCB
THEN
    BEGIN
    HEADER = READ_HEADER (0, .PRIMFCB);

    PRIMFCB [FCB$L_EFBLK] = ROT (.BBLOCK[HEADER[FH2$W_RECATTR], FAT$L_EFBLK], 16);

    IF  .PRIMFCB [FCB$L_EFBLK] NEQ 0
	AND .BBLOCK[HEADER[FH2$W_RECATTR], FAT$W_FFBYTE] EQL 0
    THEN
	PRIMFCB [FCB$L_EFBLK] = .PRIMFCB [FCB$L_EFBLK] - 1;

    IF .PRIMFCB [FCB$L_EFBLK] GTR .PRIMFCB [FCB$L_FILESIZE]
    THEN
	PRIMFCB [FCB$L_EFBLK] = .PRIMFCB [FCB$L_FILESIZE];

    END;

STSFLGS [STS_LEAVE_FILEHDR] = 0;

END;					! end of routine BUILD_EXT_FCBS

END
ELUDOM
