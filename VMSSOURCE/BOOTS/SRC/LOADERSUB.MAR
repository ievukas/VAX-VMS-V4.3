	.TITLE	LOADERSUB - LOADER SUBROUTINES
	.IDENT	'V04-001'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	I/O DATABASE GENERATOR
;
; ABSTRACT:	LOADER SUBROUTINES
;
;
; ENVIRONMENT:	USER MODE PRIVILEGED CODE
;
; AUTHOR:	LEN KAWELL, CREATION DATE:16-JUN-716
;
; MODIFIED BY:
;
;	V04-001	WHM0004		Bill Matthews		04-Sep-1984
;		Correct branch in CONNECT CONSOLE/LOGICAL.
;
;	V03-006	WHM0003		Bill Matthews		01-Aug-1984
;		Fix bugs in CONNECT CONSOLE support for VENUS. Add
;		CONNECT CONSOLE (terminal) support to MicroVAX I.
;
;	V03-005	WHM0002		Bill Matthews		27-Feb-1984
;		Set maxunits to 4 for all VENUS CONNECT CONSOLE commands.
;
;	V03-004	WHM0001		Bill Matthews		13-Dec-1983
;		Added CONNECT CONSOLE support for VENUS.
;		Converted all CPUDISP's in this module to use the new format
;		of the macro.
;
;	V03-003	KDM0084		Kathleen D. Morse	23-Sep-1983
;		Add Micro-VAX I to CPUDISP and use new format of the macro.
;
;	V03-002	ROW0203		Ralph O. Weber		 5-AUG-1983
;		Change IOGEN$CNTRL_INI to use IOC$CTRLINIT, the common, 
;		system-wide routine for calling driver's controller 
;		initialization routines.
;
;	V03-001	TCM0001		Trudy C. Matthews	27-Jul-1983
;		Removed local definition of CPUDISP macro.  Updated some of
;		the CPUDISP invocations to include VENUS-specific code paths.
;
;--
	.PAGE
	.SBTTL	DECLARATIONS


;
; INCLUDE FILES:
;

;
; MACROS:
;

;
; EQUATED SYMBOLS:
;

	$DCDEF				; DEFINE ADAPTER TYPE SYMBOLS
	$DYNDEF				;DEFINE DYNAMIC MEMORY BLOCK TYPES
	$PRDEF				;DEFINE PROCESSOR REGISTERS
	$UCBDEF				;DEFINE UCB OFFSETS
	$DDBDEF				;DEFINE DDB OFFSETS
	$CRBDEF				;DEFINE CRB OFFSETS
	$IDBDEF				;DEFINE IDB OFFSETS
	$VECDEF				;DEFINE CRB DISPATCHER OFFSETS
	$UBADEF				;DEFINE UBA REGISTERS
	$ADPDEF				;DEFINE ADP OFFSETS
	$DPTDEF				;DEFINE DPT OFFSETS
	$ACFDEF				;DEFINE ACF OFFSETS
	$BOOCMDDEF			;DEFINE SYSGEN COMMAND OPTIONS

;
; OWN STORAGE:
;

.PSECT	NONPAGED_DATA	rd,wrt,noexe,quad

UBINT_DISP:				;1ST INSTRUCTION IN INTERRUPT
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	; DISPATCH BLOCK FOR UNIBUS DEVICE.

	.PAGE
	.SBTTL	IOGEN$LOCK_IODB/IOGEN$UNLK_IODB
;++
; IOGEN$LOCK_IODB - LOCK THE SYSTEM I/O DATABASE FOR WRITE
; IOGEN$UNLK_IODB - UNLOCK THE SYSTEM I/O DATABASE
;
; FUNCTIONAL DESCRIPTION:
;
;	LOCK - GETS THE I/O DATABASE MUTEX FOR WRITE
;	UNLOCK - RETURNS THE I/O DATABASE MUTEX AND RETURNS IPL TO 1.
;
;
; INPUTS:
;
;	NONE
;
; OUTPUTS:
;
;	I/O DATABASE LOCKED AND IPL RAISED OR UNLOCKED AND IPL LOWERED
;--

.PSECT	NONPAGED_CODE	rd,nowrt,exe,long

IOGEN$LOCK_IODB::
	MOVAL	G^IOC$GL_MUTEX,R0	; GET I/O DATA BASE MUTEX
	MOVL	G^SCH$GL_CURPCB,R4	; GET OWN PCB ADDRESS
	JSB	G^SCH$LOCKW		; AND LOCK IT
	RSB

IOGEN$UNLK_IODB::
	MOVAL	G^IOC$GL_MUTEX,R0	; GET I/O DATA BASE MUTEX
	MOVL	G^SCH$GL_CURPCB,R4	; AND OWN PCB ADDRESS
	JSB	G^SCH$UNLOCK		; AND UNLOCK IT
	SETIPL	#0			; ALSO LOWER IPL
	RSB
	.PAGE
	.SBTTL	IOGEN$ALLOBLOCK
;++
;
; IOGEN$ALLOBLOCK - ALLOCATE CONTROL BLOCKS
;
;	ALLOCATES A BLOCK OF MEMORY FROM THE NON-PAGED POOL AND
;	ZEROS IT.
;
; INPUTS:
;
;	R1 = SIZE OF BLOCK DESIRED
;
; OUTPUTS:
;
;	R0 = STATUS OF ALLOCATION
;	R1 = SIZE OF ALLOCATED BLOCK
;	R2 = ADDRESS OF ALLOCATED BLOCK
;
;--
IOGEN$ALLOBLOCK::
	PUSHR	#^M<R3,R4,R5>		;SAVE REGISTERS
	JSB	G^EXE$ALONONPAGED	;ALLOCATE NON-PAGED POOL
	BLBS	R0,10$			;BR IF SUCCESS
	MOVZWL	#SS$_INSFMEM,R0		;SET ERROR STATUS
	POPR	#^M<R3,R4,R5>		;RESTORE REGISTERS
	RSB				;RETURN
10$:
	PUSHR	#^M<R0,R1,R2>		;SAVE REGISTERS
20$:	MOVC5	#0,20$,#0,R1,(R2)	;ZERO THE BUFFER
	POPR	#^M<R0,R1,R2,R3,R4,R5>	;RESTORE REGISTERS
	RSB				;RETURN

	.PAGE
	.SBTTL	IOGEN$CNTRL_INI
;++
;
; IOGEN$CNTRL_INI - INITIALIZE THE DEVICE CONTROLLER
;
; INPUTS - R6 = ADDR OF DDB
;	   R11 = ADDR OF DRIVER PROLOGUE TABLE
;
;--
IOGEN$CNTRL_INI::

	; Limit types of adapters which are processed by this routine.

	DISPATCH -
		DPT$B_ADPTYPE(R11), TYPE=B, PREFIX=AT$_, -
		<-
		<UBA,50$>,-		; UNIBUS adapters are ok
		<MBA,50$>,-		; MASSBUS adapters are ok
		<CI,50$>,-		; CI adapters are ok
		<NULL,50$>-		; /NOADAPTER is also ok
		>
	MOVL	#1, R0			; For the rest, set success status,
	RSB				; but don't really do anything.

50$:	PUSHR	#^M<R2,R3,R4,R5,R6,R6,R7,R8,R9,R10,R11> ; Save registers.
	MOVL	DDB$L_UCB(R6), R0	; Get a UCB address.
	MOVL	UCB$L_CRB(R0), R8	; Use that to get a CRB address.
	MOVL	R6, R11			; Get DDB address in right place.
	MOVL	ACF$L_CONTRLREG(AP), R1	; Get last resort CSR address value.
	JSB	G^IOC$CTRLINIT		; Call common controller init routine.
	POPR	#^M<R2,R3,R4,R5,R6,R6,R7,R8,R9,R10,R11> ; Restore registers.'
	RSB				; Return with IOC$CTRLINIT status in R0.
	.PAGE
	.SBTTL	IOGEN$CONN_VEC
;++
;
; IOGEN$CONN_VEC - CONNECT A UNIBUS INTERRUPT DISPATCHER TO A VECTOR
;
; THIS SUBROUTINE IS CPU-DEPENDENT.  THE FOLLOWING CPU'S ARE SUPPORTED:
;
;	11/780	-CONNECT VEC$Q_DISPATCH+2 (JSB @#) TO VECTOR
;	11/750	-CONNECT VEC$Q_DISPATCH (PUSHR) TO VECTOR
;	11/730	-CONNECT VEC$Q_DISPATCH (PUSHR) TO VECTOR
;	11/790	-CONNECT VEC$Q_DISPATCH+2 (JSB @#) TO VECTOR
;
; FOR ALL CPU'S, PUSHR #^M<R2,R3,R4,R5> IN THE INTERRUPT DISPATCH BLOCK
; IS CHANGED TO PUSHR #^M<R0,R1,R2,R3,R4,R5>.
;
; INPUTS:
;
;	R0 = ADDRESS OF VECTOR TO CONNECT
;	R4 = ADDRESS OF INTERRUPT DISPATCH BLOCK IN CRB
;
; OUTPUTS:
;
;	ALL REGISTERS PRESERVED
;--

IOGEN$CONN_VEC::			;
	MOVW	UBINT_DISP,VEC$Q_DISPATCH(R4) ;CHANGE PUSHR TO PUSH R0-R5
	MOVAB	VEC$Q_DISPATCH(R4),(R0)	;CONNECT PUSHR TO VECTOR
					;
					;
	.list meb
	CPUDISP	<<780,VEC_780>,-	; Dispatch on cpu type
		 <750,VEC_750>,-	;
		 <730,VEC_730>,-	;
		 <790,VEC_790>,-	;
		 <UV1,VEC_UV1>,-	;
		>			;
					;
VEC_790:				;FOR 11/790 AND
VEC_780:				;FOR 11/780:
	ADDL	#2,(R0)			;STEP VECTOR TO VEC$Q_DISPATCH+2
	BRB	VEC_END			;
					;
VEC_750:				;11/750:
VEC_730:				;11/730:
VEC_UV1:				;FOR Micro-VAX I
	INCL	(R0)			;SET L.O. BIT TO INDICATE THAT
					; INTERRUPT HANDLED ON INT STACK
					;
VEC_END:				;*END OF CPU-DEPENDENT CODE*
					;
					;
	RSB				;DONE
	.PAGE
	.SBTTL IOGEN$TEST_MEM
;++
;
; IOGEN$TEST_MEM - TEST A PAGE OF MEMORY
;
; THIS TEST IS CPU-DEPENDENT.  THE FOLLOWINT CPU'S ARE SUPPORTED:
;
;	11/780	-TEST A PAGE OF MEMORY A QUADWORD AT A TIME USING THE
;		 PR$_SBIQC PROCESSOR REGISTER.  THIS CAN ALSO "FIX"
;		 SOME RDS ERRORS TO BE CRD ERRORS.  IF A HARD RDS 
;		 ERROR OCCURS, A MACHINE CHECK WILL RESULT AND THE
;		 PAGE WILL BE CONSIDERED BAD.
;
;	11/750	-TEST A PAGE OF MEMORY A QUADWORD AT A TIME USING THE
;		 MOVQ INSTRUCTION.  IF A UNCORRECTABLE ECC ERROR OCCURS,
;		 A MACHINE CHECK WILL RESULT AND THE PAGE WILL BE
;		 CONSIDERED BAD.
;
; THIS SUBROUTINE SHOULD BE CALLED VIA BRANCH TO SUBROUTINE AT IPL 31.
;
; INPUTS :
;
;	R3 = VIRTUAL ADDRESS OF FIRST BYTE OF PAGE.
;	R4 = PHYSICAL ADDRESS OF FIRST BYTE OF PAGE.
;
; OUTPUTS:
;
;	R0 = LOW BIT SET FOR GOOD PAGE.
;	     LOW BIT CLEAR FOR BAD PAGE.
;	R3 = R3 + 512.
;	R4 = R4 + 512.
;	OTHER REGISTERS PRESERVED.
;--
IOGEN$TEST_MEM::			;
	PUSHR	#^M<R1,R2>		;SAVE REGISTERS
	MOVL	MMG$A_SYSPARAM+<EXE$GL_SCB-EXE$A_SYSPARAM>,R1
					; GET SYS.EXE COPY OF SCB ADDR
	PUSHL	4(R1)			;SAVE CURRENT MACHINE CHECK HANDLER
	MOVL	SP,R2			;MARK STACK POSITION
					;
					;
	CPUDISP	<<780,SET_MMCHK_780>,-	;*DISPATCH ON CPU TYPE*
		<750,SET_MMCHK_750>>	;
					;
SET_MMCHK_750:				;FOR 11/750:
	MOVAL	MMCHK_750,4(R1)		;CONNECT 11/750 MCHECK HANDLER
	BRB	SET_MMCHK_END		;
					;
SET_MMCHK_780:				;FOR 11/780:
	MOVAL	MMCHK_780,4(R1)		;CONNECT 11/780 MCHECK HANDLER 
					;
SET_MMCHK_END:				;*END OF CPU-DEPENDENT CODE*
					;
	MOVZBL	#<512/8>,R0		;SET LOOP COUNTER FOR 64 QUADWORDS
					;
TEST_MEM_LOOP:				;
					;
	CPUDISP	<<780,CLR_Q_780>,-	;*DISPATCH ON CPU TYPE*
		<750,CLR_Q_750>>	;
					;
CLR_Q_780:				;FOR 11/780:
	MTPR	R4,#PR$_SBIQC		;CLEAR A QUADWORD
	ADDL	#8,R4			;INCREMENT PHYSICAL ADDRESS
	BRB	CLR_Q_END		;
					;
CLR_Q_750:				;FOR 11/750:
	CLRQ	(R3)			;CLEAR A QUADWORD
					;
CLR_Q_END:				;*END OF CPU-DEPENDENT CODE*
	CMPL	(R3)+,(R3)+		;READ BOTH LONGWORDS, AND ADVANCE TO
					;TO NEXT QUADWORD
	SOBGTR	R0,TEST_MEM_LOOP	;DECREMENT QUADWORD COUNTER AND LOOP
					;
	MOVZBL	#1,R0			;SET STATUS TO SUCCESS
	BRW	TEST_MEM_DONE		;JOIN COMMON EXIT

;
; LOCAL MACHINE CHECK HANDLER FOR 11/750:
;

	.ALIGN	LONG
MMCHK_750:				;
	MTPR	#^XF,#PR$_MCESR		;CLEAR ANY MEMORY ERROR
	BRB	BAD_MEM			;

;
; LOCAL MACHINE CHECK HANDLER FOR 11/780:
;

	.ALIGN	LONG
MMCHK_780:				;
	MTPR	#0,#PR$_SBIFS		;CLEAR ANY MEMORY ERROR
BAD_MEM:				;WRITING/READING MEMORY CAUSED MCHECK
	MOVL	R2,SP			;CLEAR MCHECK LOGOUT STACK
	CLRL	R0			;SET STATUS TO FAILURE
TEST_MEM_DONE:				;PREPARE FOR EXIT
	POPL	4(R1)			;RESTORE OLD MCHECK HANDLER
	POPR	#^M<R1,R2>		;RESTORE REGISTERS
	RSB				;

	.PAGE
	.SBTTL	IOGEN$CONSOLE
;++
;
; IOGEN$CONSOLE - SET UP FOR CONNECTING CONSOLE BLOCK STORAGE DEVICE
;
; THIS SUBROUTINE IS CPU DEPENDENT.  THE FOLLOWING CPU'S ARE SUPPORTED:
;
;	11/780	-DRIVER NAME IS DXDRIVER.  SET IDB BUILT FLAG IN
;		 BOO$GL_CONFLAGS BECAUSE CONSOLE FLOPPY SHARES A
;		 CRB AND IDB WITH THE CONSOLE TERMINAL (OPA0:).
;
;	11/750	-DRIVER NAME IS DDDRIVER.  SET THE SCB VECTOR FLAG IN
;		 BOO$GL_CONFLAGS BECAUSE CONSOLE TU58 INTERRUPTS
;		 THROUGH THE SCB INSTEAD OF THE UBA.
;
;	11/730	- SAME AS 11/750
;
;	11/790	- DRIVER NAME IS CVDRIVER. REST IS THE SAME AS 11/750 AND 11/730
;
; INPUTS:
;	
;	NONE
;
; OUTPUTS:
;
;	THE FOLLOWING GLOBAL LOCATIONS MAY BE MODIFIED:
;
;		BOO$GL_CONDRV
;		BOO$GL_CONFLAGS
;		BOO$GL_CONCRB
;		BOO$GL_CONVECT
;		BOO$GL_CONUNITS
;--

IOGEN$CONSOLE::
	CPUDISP	<<780,CONSOLE_780>,-	;*DISPATCH ON CPU TYPE*
		 <750,CONSOLE_750>,-
		 <730,CONSOLE_730>,-	;FOR 11/730:
		 <UV1,CONSOLE_UV1>,-	;FOR Micro-VAX I
		 <790,CONSOLE_790>,-	;For 11/790
		>

CONSOLE_780:					;FOR 11/780:
	MOVAB	W^BOO$GT_DXNAME,W^BOO$GL_CONDRV	; POINT TO DRIVERNAME
	MOVB	#ACF$M_CRBBLT,W^BOO$GL_CONFLAGS	; SET CRB BUILT FLAG
	MOVAB	G^OPA$CRB,W^BOO$GL_CONCRB	; STORE CRB ADDRESS
	BRB	CONSOLE_END

CONSOLE_UV1:
	MOVAB	W^BOO$GT_CSNAME,W^BOO$GL_CONDRV	; SET DRIVER NAME TO "CSDRIVER"
	CLRL	W^BOO$GL_CONCUNIT		; Connect unit 0
	MOVL	#1,W^BOO$GL_CONUNITS		; One for CSA0 console terminal
	MOVB	#ACF$M_SCBVEC,W^BOO$GL_CONFLAGS	; SET SCB VECTOR FLAG
	MOVZBL	#^XF8,W^BOO$GL_CONVECT		; SET SCB VECTOR OFFSET
	BRB	CONSOLE_END

CONSOLE_790:
	MOVL	#4,W^BOO$GL_CONUNITS		; SET MAXUNITS TO 4(OPA0-OPA3)
	BBS	#BOOCMD$V_REMOTE,W^BOO$GL_CMDOPT,10$; BRANCH IF REMOTE CONSOLE
	BBS	#BOOCMD$V_LOGICAL,W^BOO$GL_CMDOPT,15$; BRANCH IF LOGICAL CONSOLE
	MOVAB	W^BOO$GT_CVNAME,W^BOO$GL_CONDRV	; POINT TO DRIVER NAME FOR RL02
	BRB	CONSOLE_COMMON
10$:	MOVL	#1,W^BOO$GL_CONCUNIT		; SET UNIT TO 1(OPA1)REMOTE CONSOLE
	BRB	20$				; JOIN COMMON CODE
15$:	MOVL	#3,W^BOO$GL_CONCUNIT		; SET UNIT TO 3(OPA3)LOGICAL CONSOLE
20$:	MOVAB	W^BOO$GT_OPNAME,W^BOO$GL_CONDEV	; SET DEVICE NAME TO "OPA"
	MOVB	#ACF$M_CRBBLT,W^BOO$GL_CONFLAGS	; SET CRB BUILT FLAG
	MOVAB	G^OPA$CRB,W^BOO$GL_CONCRB	; STORE CRB ADDRESS
	BRB	CONSOLE_END
CONSOLE_730:					; For 11/730
	MOVL	#2,W^BOO$GL_CONNUMU		; Set number of TU58 units to 2
	MOVL	#3,W^BOO$GL_CONUNITS		; Set max units (OPA0 is 1st unit)
CONSOLE_750:					;FOR 11/750:
	MOVAB	W^BOO$GT_DDNAME,W^BOO$GL_CONDRV	; POINT TO DRIVERNAME
CONSOLE_COMMON:
	MOVB	#ACF$M_SCBVEC,W^BOO$GL_CONFLAGS	; SET SCB VECTOR FLAG
	MOVZBL	#^XF0,W^BOO$GL_CONVECT		; SET SCB VECTOR OFFSET

CONSOLE_END:				;*END OF CPU DEPENDENT CODE*

	RSB

BOO$GT_CSNAME:
	.ASCIC	/CSDRIVER/		; Console terminal driver
	
	.END
