	.TITLE	UTIL$RANDOM_KEY
	.IDENT	/V04-000/
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:	Random number generator.
;
; ABSTRACT:	Produces a random longword.
;
; AUTHOR:	Paul R. Beck
;
; DATE:		 19-APR-1983 	Last Edit:  19-APR-1983 21:37:26 
;
; REVISION HISTORY:
;
;
;--

;
; Local data
;
TENMS:	.LONG	-100*1000,-1		; 10 ms timer

KEY:	.BLKL	1			; build the key here
DATA:	.BLKL	1			; Just increment this ad nauseum
OFFSET:	.BLKL	1			; Offset into KEY
;++
; UTIL$RANDOM_KEY
;
; FUNCTIONAL DESCRIPTION:
;	Create a random, 32-bit key. This is done two bits at a time.
; CALLING SEQUENCE:
;	CALLS	#1,UTIL$RANDOM_KEY
; INPUT PARAMETERS:
;	None
; OUTPUT PARAMETERS:
;	P1	= address to receive key
; COMPLETION CODES:
;	SS$_NORMAL
;--
	.ENTRY	UTIL$RANDOM_KEY,^M<>

	CLRQ	DATA			; set offset into key and counter
	$SETIMR_S -
		daytim	= TENMS -	; 10 ms timer
		astadr	= KEY_AST	; address of timer AST
	BLBC	R0,20$			; ?
10$:	INCL	DATA			; *** LOOP ***
	CMPL	OFFSET,#-1		; done yet?
	BNEQ	10$			; if NEQ, no.
	MOVL	KEY,@4(AP)		; return random key
	MOVL	#SS$_NORMAL,R0		; done
20$:	RET
;
; AST to collect the random key, two bits every 10 ms.
; KEY contains address of the key being constructed
; DATA contains the raw data (we just use the low two bits as random)
; OFFSET contains the number of passes made *2 and offsets into the key.
;
	.ENTRY	KEY_AST,^M<>

	MOVL	OFFSET,R0
	INSV	DATA,R0,#2,KEY		; move next two bits into key
	INCL	OFFSET			; adjust offset
	AOBLSS	#32,OFFSET,10$		; ...and exit when we're done
	BRB	20$
10$:	$SETIMR_S -
		daytim	= TENMS -	; 10 ms timer
		astadr	= KEY_AST	; address of timer AST
	RET
20$:	MOVL	#-1,OFFSET		; set flag and don't reissue AST
	RET
.END
