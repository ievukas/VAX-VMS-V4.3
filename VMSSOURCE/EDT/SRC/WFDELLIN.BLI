%TITLE 'EDT$WFDELLIN - delete the current line'
MODULE EDT$WFDELLIN (				! Delete the current line
		IDENT = 'V04-000'			! File: WFDELLIN.BLI Edit: JBS1013
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Delete the current line.  If that empties the current bucket,
!	delete the bucket also.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: October 16, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 23-Feb-1981.  This module was created by
!	extracting routine EDT$$DEL_CURLN  from module EDTWF.
! 1-002	- Regularize headers.  JBS 16-Mar-1981
! 1-003 - Change index for line numbers from 10 to 15.  SMB 18-Jan-1982
! 1-004	- Correct IDENT format.  JBS 15-Mar-1982
! 1-005	- New screen update logic.  JBS 13-Sep-1982
! 1-006	- Remove EDT$$SET_WKLN.  JBS 14-Sep-1982
! 1-007 - Change the name of the delete line routine.  SMB 21-Sep-1982
! 1-008 - Modify to use new 48bit macro. STS 01-Oct-1982
! 1-009	- Count the number of deleted lines since the last screen update.  JBS 21-Oct-1982
! 1-010	- Change the handling of EDT$$G_RECS_INSERTED.  JBS 27-Oct-1982
! 1-011 - Up the number of recs inserted before setting SCR_REBUILD.  SMB 16-Feb-1983
! 1-012	- Decrement the number of records inserted during this insert sequence.  JBS 01-Jun-1983
! 1-013	- Remove edit 1-012; too many callers don't want this.  JBS 01-Jun-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$DEL_CURLN : NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$DEL_CURLN  - delete the current line'

GLOBAL ROUTINE EDT$$DEL_CURLN 			! Delete the current line
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine deletes the current line from the buffer.  Close up the
!	gap in the block by moving any text following the deleted line.  If the
!	line is the only one in a bucket, then also delete the bucket.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$T_LN_BUF
!	EDT$$L_SEL_LN
!	EDT$$A_CUR_BUF
!	EDT$$A_WK_BUK
!	EDT$$A_WK_LN
!	EDT$$L_LNO0
!	EDT$$G_RECS_INSERTED
!	EDT$$G_SCR_LNS
!	EDT$$G_SCR_REBUILD
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_WK_MODFD
!	EDT$$A_CUR_BUF
!	EDT$$A_WK_BUK
!	EDT$$A_WK_LN
!	EDT$$A_SEL_POS
!	EDT$$G_RECS_INSERTED
!	EDT$$G_SCR_REBUILD
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$WF_DELBUK : NOVALUE,
	EDT$$RD_NXTLN,
	EDT$$SEL_RNGPOS,
	EDT$$SC_DELLN : NOVALUE;

    EXTERNAL
	EDT$$A_CUR_BUF : REF TBCB_BLOCK,	! Current text buffer control block
	EDT$$A_WK_BUK : 			! Pointer to current bucket
	    REF BLOCK [WF_BUKT_SIZE, BYTE] FIELD (WFB_FIELDS),
	EDT$$A_WK_LN : REF LIN_BLOCK,		! Pointer to current line
	EDT$$G_WK_MODFD,			! Flag indicating bucket was modified
	EDT$$L_LNO0 : LNOVECTOR [14],
	EDT$$A_SEL_POS,				! Position on the select line
	EDT$$L_SEL_LN,				! Record number of the select line
	EDT$$T_LN_BUF,				! Current line buffer
	EDT$$G_SCR_REBUILD,			! 1 = rebuild the screen data structure from the work file
	EDT$$G_SCR_LNS,				! Number of lines in the text area of the screen
	EDT$$G_RECS_INSERTED;	! Number of records inserted and deleted since the last screen update

    LOCAL
	SIZE,
	SOURCE,
	REMAINING;

!+
! Test for end of buffer. (do not try to delete if at end of block)
!-

    IF (.EDT$$A_CUR_BUF [TBCB_LINE_ADDR] EQL .EDT$$A_WK_BUK [WFB_END]) THEN RETURN;

!+
! If we are not going to rebuild the screen data structure from the work file,
! tell the screen package that the current line has been deleted.
!-

    IF ( NOT .EDT$$G_SCR_REBUILD)
    THEN
	BEGIN
	EDT$$G_RECS_INSERTED = .EDT$$G_RECS_INSERTED + 1;

	IF (.EDT$$G_RECS_INSERTED GTR (.EDT$$G_SCR_LNS*2)) THEN EDT$$G_SCR_REBUILD = 1 ELSE EDT$$SC_DELLN ();

	END;

!+
! Update the line and character count fields
!-
    SUBLINE (NUMBER_ONE, EDT$$A_CUR_BUF [TBCB_LINE_COUNT]);
    EDT$$A_CUR_BUF [TBCB_CHAR_COUNT] = .EDT$$A_CUR_BUF [TBCB_CHAR_COUNT] - .EDT$$A_WK_LN [LIN_LENGTH];
!+
! Mark bucket as modified.
!-
    EDT$$G_WK_MODFD = 1;
!+
! Calculate the length of text to be deleted.
!-
    SIZE = .EDT$$A_WK_LN [LIN_LENGTH] + LIN_FIXED_SIZE + 1;
!+
! Source is a pointer to the following information.
!-
    SOURCE = CH$PLUS (.EDT$$A_WK_LN, .SIZE);
!+
! Calculate the number of used bytes left in the block.
!-
    REMAINING = .EDT$$A_WK_BUK [WFB_END] - .EDT$$A_CUR_BUF [TBCB_LINE_ADDR] - .SIZE;
!+
! Update the end of bucket information.
!-
    EDT$$A_WK_BUK [WFB_END] = .EDT$$A_WK_BUK [WFB_END] - .SIZE;
!+
! And close up the hole we created.
!-

    IF (.REMAINING NEQ 0)
    THEN
	BEGIN
	EDT$$CPY_MEM (.REMAINING, .SOURCE, .EDT$$A_WK_LN);
	EDT$$A_WK_LN = CH$PTR (.EDT$$A_WK_BUK, .EDT$$A_CUR_BUF [TBCB_LINE_ADDR]);
	END
    ELSE
!+
! No text after the line, check to see if bucket is now empty.
!-

	IF (.EDT$$A_CUR_BUF [TBCB_LINE_ADDR] EQL WFB_FIXED_SIZE)	!
	THEN
	    EDT$$WF_DELBUK ()
	ELSE
	    EDT$$RD_NXTLN ();			! position to first line in next bucket

!+
! Update the select point, if it is after the line being deleted.
!-

    CASE EDT$$SEL_RNGPOS () FROM -1 TO 1 OF
	SET

	[-1] : 					! Select line is before current line, or no select
	    BEGIN
	    0
	    END;

	[0] : 					! Select line is current line
	    EDT$$A_SEL_POS = CH$PTR (EDT$$T_LN_BUF);

	[1] : 					! Select line is after current line
	    SUBLINE (NUMBER_ONE, EDT$$L_SEL_LN);

	[OUTRANGE] :
	    ASSERT (0);
	TES;

    END;					! of routine EDT$$DEL_CURLN

!<BLF/PAGE>

END						! of module EDT$WFDELLIN

ELUDOM
