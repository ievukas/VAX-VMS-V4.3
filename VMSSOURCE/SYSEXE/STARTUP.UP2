$ !	'F$VERIFY(0)
$	SAY = "WRITE SYS$OUTPUT"
$	SAY ""
$	SAY "Continuing with VAX/VMS V4.0 Upgrade Procedure."
$	SAY ""
$	SAY "		Upgrade Phase 2		''F$TIME()'"
$	SAY ""
$ @SYS$SYSTEM:STARTUP UPGRADE
$ !
$ ! Install only those protected shareable images that will be used.
$ !
$	RUN SYS$SYSTEM:INSTALL
SYS$SHARE:DISMNTSHR	/OPEN /SHARED /PROTECT /HEADER /NOPURGE
SYS$SHARE:MOUNTSHR	/OPEN /SHARED /PROTECT /HEADER
SYS$SHARE:SECURESHR	/OPEN /SHARED /PROTECT /HEADER
$	VERSION = "040"
$	DEFDIR = "SYSUPD.VMS''VERSION'"
$	SET CONTROL=T
$	SET ON
$	SET MESSAGE /FACILITY/SEVERITY/TEXT/IDENTIFICATION
$	ON ERROR THEN GOTO 7000
$	ON CONTROL_Y THEN GOTO 7000
$	T1 = F$SETPRV("CMKRNL,SYSPRV,LOG_IO,VOLPRO,BYPASS")
$	SET PROTECTION=(S:RWED,G:RWED,O:RWED,W:RE)/DEFAULT
$	VALID_SAVESETS = "REQ,LIB,OPT,ALL"
$	VALID_UPGRADES = "IGNORE,KEEP,OVER,UNDER"
$	TARGET = F$TRNLNM("SYS$SYSDEVICE")
$	CPUTYPE = F$GETSYI("CPU")
$	SET DEFAULT SYS$SYSTEM
$	SET UIC [1,4]
$	OPEN/READ DATAF UPGRADE.KIT
$	READ DATAF KIT
$	READ DATAF OLD_ROOT_DOT
$	READ DATAF NEW_ROOT
$	READ DATAF YEAR
$	READ DATAF UPGRADE_FROM
$	READ DATAF L
$	T1 = F$LENGTH(L)
$	KIT_RL02 = F$LOC("A",L) .NE. T1
$	KIT_RC25 = F$LOC("B",L) .NE. T1
$	KIT_DOTLR = F$LOC("C",L) .NE. T1
$	KIT_ISTLR = F$LOC("D",L) .NE. T1
$	KIT_DOCROOT = F$LOC("E",L) .NE. T1
$	KIT_CROOT = F$LOC("F",L) .NE. T1
$	READ DATAF SYSVER
$	READ DATAF LIB_DISK
$	CLOSE DATAF
$	OLD_ROOT = OLD_ROOT_DOT - "."
$	DOT_OLD_ROOT = "." + OLD_ROOT
$	TARGET_TOPSYS_DOT = NEW_ROOT + "."
$	CLROOT = OLD_ROOT_DOT
$	IF KIT_CROOT THEN CLROOT = "V4COMMON."
$	L = F$LOCATE("-",YEAR) + 1
$	YEAR = F$EXTRACT(L,30,YEAR)
$	L = F$LOCATE("-",YEAR) + 1
$	YEAR = F$EXTRACT(L,4,YEAR)
$	DATE = F$TIME()
$	L = F$LOCATE("-",DATE) + 5
$	DAY = F$EXTRACT(0,L,DATE)
$	TIME = F$EXTRACT(L+5,30,DATE)
$	DATE = DAY + YEAR + ":" + TIME
$	SET TIME=('DATE')
$	KIT = KIT - ":"
$	OPEN/WRITE DATAF SYS$SYSTEM:GENDEVICE.COM
$	WRITE DATAF "$ RUN SYS$SYSTEM:SYSGEN"
$	WRITE DATAF "AUTOCONFIGURE ALL /SELECT=(''F$EXTRACT(0,3,KIT)')"
$	CLOSE DATAF
$	@SYS$SYSTEM:GENDEVICE
$	DELETE SYS$SYSTEM:GENDEVICE.COM;*
$MNT_KIT:
$	KIT_TYPE = F$GETDVI(KIT,"DEVCLASS")
$	T1 = "/FOREIGN"
$	IF KIT_TYPE .EQ. 1 THEN T1 = "/OVER=ID"
$	IF KIT_TYPE .EQ. 2 THEN WAIT 00:00:10		! Tape device wait time
$	MOUNT 'T1' 'KIT' VMS'VERSION'
$	ON ERROR THEN GOTO 7000
$	SAY ""
$	SET NOON
$	SET DEFAULT 'TARGET'['NEW_ROOT'.SYSEXE]
$ !	@['CLROOT''DEFDIR']DIRCLENUP 'TARGET' 1
$	SET UIC [1,4]
$	SET DEFAULT ['NEW_ROOT'.'DEFDIR']
$	STOP JOB_CONTROL
$	STOP OPCOM
$	STOP ERRFMT
$	SET ON
$ !
$ ! Now clean off all the remaining VAX/VMS V3 files, namely the files
$ ! required to reboot and execute this procedure.
$ !
$	SAY ""
$	SAY "Now removing the remainder of the VAX/VMS ''SYSVER' files."
$	SAY ""
$	SET DEFAULT 'TARGET'['NEW_ROOT'.SYSEXE]
$	FILENAME:='TARGET'['CLROOT''DEFDIR']VMSKITBLD.V3N
$	IF F$SEARCH("''TARGET'[''CLROOT'''DEFDIR']KITINSTAL.COM") .NES. "" -
		THEN DELETE 'TARGET'['CLROOT''DEFDIR']KITINSTAL.COM;*
$60:
$	OPEN/READ DATAF 'FILENAME
$	IF $STATUS THEN GOTO 65
$	SAY "Unable to open data parameter file",'FILENAME',"."
$	GOTO 7000
$65:
$	CONDIT = 1+8+64+256	! Use UETP, HELP, DECnet, and Coding Examples
$ !
$ ! This is the main cleanup loop that is executed for each record
$ ! in the data file.
$ !
$	PREV_NAME = ""
$	OVER_UNDER = "OVER,UNDER,"
$RECORD_LOOP:
$	READ/END_OF_FILE=3000 DATAF RECORD
$	IF F$EXTRACT(0,1,RECORD) .EQS. "$" THEN GOTO RECORD_LOOP
$	IF F$EXTRACT(0,1,RECORD) .EQS. "!" THEN GOTO RECORD_LOOP
$ !
$ ! Get the upgrade field from the current record.  (This time only
$ ! the files labelled UPGRADE=KEEP are of interest.)
$ !
$GET_UPGRADE:
$	L = F$LOCATE("UPG=",RECORD) + 4
$	UPGRADE = F$EXTRACT(L,132,RECORD)
$	L = F$LOCATE(",",UPGRADE)
$	UPGRADE = F$EXTRACT(0,L,UPGRADE)
$	IF F$LOCATE(UPGRADE,VALID_UPGRADES) .NE. F$LENGTH(VALID_UPGRADES) -
	THEN GOTO GET_SAVESET
$	SAY "Bad upgrade field specified in record *''RECORD'*"
$	GOTO 7000
$ !
$ ! Get the saveset field from the current record.
$ !
$GET_SAVESET:
$	L = F$LOCATE("SET=",RECORD) + 4
$	SAVESET = F$EXTRACT(L,132,RECORD)
$	L = F$LOCATE(",",SAVESET)
$	SAVESET = F$EXTRACT(0,L,SAVESET)
$	IF SAVESET .EQS. "" THEN SAVESET = "LIB"
$	IF F$LOCATE(SAVESET,VALID_SAVESETS) .NE. F$LENGTH(VALID_SAVESETS) -
	THEN GOTO GET_CONDITIONAL
$	SAY "Bad saveset field specified in record *''RECORD'*"
$	GOTO 7000
$ !
$ ! Get the CONDITIONAL field from the current record.
$ !
$GET_CONDITIONAL:
$	CONDITIONAL = ""
$	L = F$LOCATE("COND=",RECORD) + 5
$	IF L .GE. F$LENGTH(RECORD) THEN GOTO GET_NAME
$	CONDITIONAL = F$EXTRACT(L,132,RECORD)
$	IF CONDITIONAL .EQS. "" THEN GOTO GET_NAME
$	L = F$LOCATE(",",CONDITIONAL)
$	CONDITIONAL = F$EXTRACT(0,L,CONDITIONAL)
$	IF (CONDITIONAL .AND. CONDIT) .EQ. 0 THEN GOTO RECORD_LOOP
$ !
$ ! Get the name from the current record.  (The name is always the first field
$ ! in the record, and doesn't have a keyword associated with it.)
$ !
$GET_NAME:
$	L = F$LOCATE(",",RECORD)
$	NAME = F$EXTRACT(0,L,RECORD)
$ !
$ ! Get the operation specified by the current record.
$ !
$GET_OPERATION:
$	L = F$LOCATE("OP=",RECORD) + 3
$	OPERATION = F$EXTRACT(L,132,RECORD)
$	IF OPERATION .EQS. "" THEN GOTO NORMAL
$	L = F$LOCATE(",",OPERATION)
$	OPERATION = F$EXTRACT(0,L,OPERATION)
$	IF (OPERATION .EQS. "BUILD") .OR. (OPERATION .EQS. "COPY") .OR. -
	(OPERATION .EQS. "CONTIG") -
	THEN GOTO NORMAL
$	IF (OPERATION .EQS. "SET") THEN GOTO SET
$	GOTO RECORD_LOOP
$
$NORMAL:
$	IF F$LOC("''UPGRADE',",OVER_UNDER) .NE. F$LENGTH(OVER_UNDER) THEN -
		GOTO RECORD_LOOP
$	IF F$SEARCH(NAME) .NES. "" THEN DELETE 'TARGET''NAME';*
$	GOTO RECORD_LOOP
$	
$SET:
$	SET DEFAULT ['CLROOT''NAME']
$	SETDIR = NAME
$	IF NAME .NES. PREV_NAME THEN -
		SAY "Now working on files in [''CLROOT'''NAME']."
$	PREV_NAME = NAME
$	GOTO RECORD_LOOP
$
$3000:
$	SET DEFAULT ['DEFDIR']
$	CLOSE DATAF
$	IF F$SEARCH("''TARGET'[SYSEXE]SYSBOOT.EXE") .NES. "" -
		THEN SET FILE/REMOVE 'TARGET'[SYSEXE]SYSBOOT.EXE;*
$!	IF F$SEARCH("''TARGET'[SYSEXEMIN]SYSBOOT.EXE") .NES. "" -
$!		THEN SET FILE/REMOVE 'TARGET'[SYSEXEMIN]SYSBOOT.EXE;*
$	OPA0 = F$TRNLNM("SYS$OUTPUT") - "_" - "_"
$	OPEN /READ /ERROR=7000 F1 'OPA0'
$	IF KIT_DOTLR THEN GOTO DO_TAILORING
$ !
$ ! Restore LIB saveset.  Use BACKUP/REPLACE for restartability.
$ !
$	IF .NOT. KIT_RL02 THEN GOTO RESTORE_LIB
$RL02_GET_OPT:
$	ON ERROR THEN GOTO RL02_GET_OPT
$	SAY ""
$	SAY "Merging the optional saveset into the kernel V4.0 system."
$	BACKUP/REPLACE/VERIFY/NOREWIND  'KIT':[000000]OPTIONAL/SAVE_SET -
		'TARGET'['NEW_ROOT'...] /SELECT=[SYS0...]
$	DISMOUNT 'KIT'
$GET_LB_RL02:
$	ON ERROR THEN GOTO GET_LB_RL02
$	SAY ""
$	SAY "Remove the first RL02 from ''KIT' and insert the pack"
$	SAY "labeled VAXVMSLB4."
$	SAY ""
$	READ /END=GET_LB_RL02 /ERROR=GET_LB_RL02 -
		/PROMPT="Are you ready to continue? " F1 YN
$	IF .NOT. YN THEN GOTO GET_LB_RL02
$	IF F$GETDVI(KIT,"MNT") THEN DISMOUNT 'KIT'
$	MOUNT /OVER=ID /NOASSIST 'KIT'
$	SAY ""
$	SAY "Merging the library saveset into the kernel V4.0 system."
$	BACKUP /REPLACE /VERIFY 'KIT':[000000]LIBRARY /SAVE_SET /SELEC=[SYS0...] -
			 'TARGET'['NEW_ROOT'...]
$	ON ERROR THEN GOTO 7000
$	GOTO CONVERT_UAF
$RESTORE_LIB:
$	ON ERROR THEN GOTO RESTORE_LIB
$	SAY ""
$	SAY "Merging the library saveset into the kernel V4.0 system."
$	BACKUP/REPLACE/VERIFY/NOREWIND 'KIT':[000000]LIBRARY/SAVE_SET -
		'TARGET'['NEW_ROOT'...] /SELECT=[SYS0...]
$RESTORE_OPT:
$	ON ERROR THEN GOTO RESTORE_OPT
$	SAY ""
$	SAY "Merging the optional saveset into the kernel V4.0 system."
$	BACKUP/REPLACE/VERIFY/NOREWIND  'KIT':[000000]OPTIONAL/SAVE_SET -
		'TARGET'['NEW_ROOT'...] /SELECT=[SYS0...]
$	GOTO CONVERT_UAF
$DO_TAILORING:
$	ON ERROR THEN GOTO 7000
$	IF F$GETDVI(LIB_DISK,"EXISTS") THEN GOTO DO_TAILOR10
$	OPEN/WRITE DATAF SYS$SYSTEM:GENDEVICE.COM
$	WRITE DATAF "$ RUN SYS$SYSTEM:SYSGEN"
$	WRITE DATAF "AUTOCONFIGURE ALL /SELECT=(''F$EXTRACT(0,3,LIB_DISK)')"
$	CLOSE DATAF
$	@SYS$SYSTEM:GENDEVICE
$	DELETE SYS$SYSTEM:GENDEVICE.COM;*
$DO_TAILOR10:
$	IF F$GETDVI(KIT,"DEVNAM") .EQS. F$GETDVI(LIB_DISK,"DEVNAM") -
		THEN GOTO KIT_LIB_SAME
$GET_LIB_DISK_MNTED:
$	ON ERROR THEN GOTO GET_LIB_DISK_MNTED
$	IF F$GETDVI(LIB_DISK,"MNT") THEN DISMOUNT /NOUNLOAD 'LIB_DISK'
$	SAY ""
$	SAY "Put a blank disk in ''LIB_DISK'.  Do not use a disk"
$	SAY "with data on it, as the disk will be initialized."
$	SAY ""
$	READ /END=GET_LIB_DISK_MNTED /ERROR=GET_LIB_DISK_MNTED -
		/PROMPT="Are you ready to continue? " F1 YN
$	IF .NOT. YN THEN GOTO GET_LIB_DISK_MNTED
$	MOUNT /FOREIGN /NOASSIST 'LIB_DISK'
$	IF F$GETDVI(LIB_DISK,"VOLNAM") .EQS. "VMS040" THEN GOTO ERR10
$	SAY ""
$	SAY "Restoring LIBRARY saveset to ''LIB_DISK'."
$	BACKUP /IMAGE /INITIALIZE /VERIFY -
		'KIT':[000000]LIBRARY /SAVE_SET 'LIB_DISK'
$	DISMOUNT /NOUNLOAD 'LIB_DISK'
$	MOUNT /OVER=ID /NOASSIST 'LIB_DISK'
$	IF F$GETDVI(LIB_DISK,"MAXBLOCK") .GT. 25000 THEN GOTO GL20
$	SAY ""
$	SAY "OPTIONAL saveset not restored, library disk is too small"
$	GOTO TAILOR_END
$GL20:
$	IF KIT_TYPE .EQ. 2 THEN GOTO GET_LIB_DISK_OPT
$	IF F$SEARCH("''KIT':[000000]OPTIONAL") .NES. "" THEN GOTO GET_LIB_DISK_OPT
$	SAY ""
$	SAY "OPTIONAL saveset not found, it will not be restored."
$	GOTO TAILOR_END
$GET_LIB_DISK_OPT:
$	SAY ""
$	SAY "Restoring OPTIONAL saveset to ''LIB_DISK'."
$	BACKUP /REPLACE /VERIFY -
		'KIT':[000000]OPTIONAL /SAVE_SET /SELECT=[SYS0...] -
		'LIB_DISK'[SYS0...]
$	ON ERROR THEN GOTO 7000
$	GOTO TAILOR_END
$ERR10:
$	SAY ""
$	SAY "The pack in ''LIB_DISK' appears to be the V4 distribution disk."
$	SAY "Please use a different pack."
$	GOTO GET_LIB_DISK_MNTED
$KIT_LIB_SAME:
$	ON ERROR THEN GOTO KIT_LIB_SAME
$	IF F$SEARCH("''TARGET'[0,0]LIBRARY.;") .NES. "" -
			THEN DELETE 'TARGET'[0,0]LIBRARY.;*
$	IF F$SEARCH("''TARGET'[0,0]OPTIONAL.;") .NES. "" -
			THEN DELETE 'TARGET'[0,0]OPTIONAL.;*
$	SAY ""
$	SAY "Copying LIBRARY saveset file to system disk."
$	COPY 'KIT':[0,0]LIBRARY. 'TARGET'[0,0]
$	IF .NOT. $STATUS THEN GOTO KIT_LIB_SAME
$	IF F$GETDVI(LIB_DISK,"MAXBLOCK") .GT. 25000 THEN GOTO GLS20
$	SAY ""
$	SAY "OPTIONAL saveset not restored, library disk is too small"
$	GOTO SAME_LIB_DISK_MNTED
$GLS20:
$	IF KIT_TYPE .EQ. 2 THEN GOTO GET_LIB_DISK_OPT
$	IF F$SEARCH("''KIT':[000000]OPTIONAL") .NES. "" THEN GOTO SAME_LIB_COPY_OPT
$	SAY ""
$	SAY "OPTIONAL saveset not found, it will not be restored."
$	GOTO SAME_LIB_DISK_MNTED
$SAME_LIB_COPY_OPT:
$	SAY ""
$	SAY "Copying OPTIONAL saveset file to system disk."
$	COPY 'KIT':[0,0]OPTIONAL. 'TARGET'[0,0]
$	IF .NOT. $STATUS THEN GOTO KIT_LIB_SAME
$	IF F$GETDVI(KIT,"MNT") THEN DISMOUNT /NOUNLOAD 'KIT'
$SAME_LIB_DISK_MNTED:
$	ON ERROR THEN GOTO SAME_LIB_DISK_MNTED
$	IF F$GETDVI(KIT,"MNT") THEN DISMOUNT /NOUNLOAD 'KIT'
$	SAY ""
$	SAY "Put a blank disk in ''LIB_DISK'.  Do not use a disk"
$	SAY "with data on it, as the disk will be initialized."
$	READ /END=SAME_LIB_DISK_MNTED /ERROR=SAME_LIB_DISK_MNTED -
		/PROMPT="Are you ready to continue? " F1 YN
$	IF .NOT. YN THEN GOTO SAME_LIB_DISK_MNTED
$	MOUNT /NOASSIST /FOREIGN 'LIB_DISK'
$	IF F$GETDVI(LIB_DISK,"VOLNAM") .EQS. "VMS040" THEN GOTO ERR20
$	SAY ""
$	SAY "Restoring LIBRARY saveset to ''LIB_DISK'."
$	BACKUP /IMAGE /INITIALIZE /VERIFY -
		'TARGET'[0,0]LIBRARY. /SAVE_SET 'LIB_DISK'
$GET_LIB_DISK_OPT:
$	ON ERROR THEN GOTO GET_LIB_DISK_OPT
$	IF F$GETDVI(LIB_DISK,"MNT") THEN DISMOUNT /NOUNLOAD 'LIB_DISK'
$	MOUNT /NOASSIST /OVER=ID 'LIB_DISK'
$	IF F$SEARCH("''TARGET'[0,0]OPTIONAL") .EQS. "" THEN GOTO SAME_LIB_DISK_DONE
$	SAY ""
$	SAY "Restoring OPTIONAL saveset to ''LIB_DISK'."
$	BACKUP /REPLACE /VERIFY 'TARGET'[0,0]OPTIONAL. /SAVE_SET /SELECT=[SYS0...] -
			'LIB_DISK'[SYS0...]
$SAME_LIB_DISK_DONE:
$	IF F$SEARCH("''TARGET'[0,0]LIBRARY") .NES. "" THEN DELETE 'TARGET'[0,0]LIBRARY.;
$	IF F$SEARCH("''TARGET'[0,0]OPTIONAL") .NES. "" THEN DELETE 'TARGET'[0,0]OPTIONAL.;
$	GOTO TAILOR_END
$ERR20:
$	SAY ""
$	SAY "The pack in ''LIB_DISK' appears to be the V4 distribution disk."
$	SAY "Please use a different pack."
$	GOTO SAME_LIB_DISK_MNTED
$TAILOR_END:
$!Copy over files needed in rest of upgrade
$	SAY ""
$	SAY "Copying images to system disk needed later in the upgrade."
$	ON ERROR THEN GOTO 7000
$	BACKUP /REPLACE 'LIB_DISK'[SYS0.SYSEXE]AUTHORIZE.EXE,SEARCH,EXCHANGE -
			'TARGET'['NEW_ROOT'.SYSEXE]
$	BACKUP /REPLACE 'LIB_DISK'[SYS0.SYSUPD]AUTOGEN.COM 'TARGET'['NEW_ROOT'.SYSUPD]
$	IF F$GETDVI(LIB_DISK,"MNT") THEN DISMOUNT /NOUNLOAD 'LIB_DISK'
$	SAY ""
$	SAY "Mount library disk with tailoring."
$	@SYS$UPDATE:VMSTAILOR MOUNT 'LIB_DISK'
$CONVERT_UAF:
$	ON ERROR THEN GOTO 7000
$	CLOSE F1
$	!
$	! Convert the authorization file now
$	!
$	SAY ""
$	SAY "Converting system authorization files to version 4 format."
$	@SYS$UPDATE:CVTUAF
$	IF F$SEARCH("SYS$SYSTEM:NETUAF.DAT") .NES. "" THEN @SYS$UPDATE:CVTNAF
$	IF F$SEARCH("SYS$SYSTEM:RIGHTSLIST.DAT") .EQS. "" THEN GOTO RIGHTSDONE
$	SAY ""
$	SAY "Converting RIGHTSLIST database file to new format."
$	T1 = TARGET + "[" + NEW_ROOT + ".SYSEXE]"
$	DEFINE /USER_MODE SYS$SCRATCH SYS$MANAGER:
$	CONVERT /FDL=SYS$INPUT: 'T1'RIGHTSLIST.DAT 'T1'RIGHTSLIST.DAT
FILE
	BEST_TRY_CONTIGUOUS     yes
	BUCKET_SIZE             2
	CLUSTER_SIZE            3
	CONTIGUOUS              no
	EXTENSION               0
	GLOBAL_BUFFER_COUNT     0
	ORGANIZATION            indexed

RECORD
	BLOCK_SPAN              yes
	CARRIAGE_CONTROL        none
	FORMAT                  variable
	SIZE                    64

AREA 0
	ALLOCATION              15
	BUCKET_SIZE             2
	EXTENSION               0

KEY 0
	CHANGES                 no
	DATA_KEY_COMPRESSION    no
	DATA_RECORD_COMPRESSION yes
	DATA_AREA               0
	DATA_FILL               100
	DUPLICATES              yes
	INDEX_AREA              0
	INDEX_COMPRESSION       no
	INDEX_FILL              100
	LEVEL1_INDEX_AREA       0
	NAME                    "IDENTIFIER"
	NULL_KEY                no
	PROLOG                  3
	SEG0_LENGTH             4
	SEG0_POSITION           0
	TYPE                    bin4

KEY 1
	CHANGES                 yes
	DATA_KEY_COMPRESSION    yes
	DATA_AREA               0
	DATA_FILL               100
	DUPLICATES              yes
	INDEX_AREA              0
	INDEX_COMPRESSION       yes
	INDEX_FILL              100
	LEVEL1_INDEX_AREA       0
	NAME                    "HOLDER"
	NULL_KEY                yes
	NULL_VALUE              0
	SEG0_LENGTH             8
	SEG0_POSITION           8
	TYPE                    string

KEY 2
	CHANGES                 yes
	DATA_KEY_COMPRESSION    yes
	DATA_AREA               0
	DATA_FILL               100
	DUPLICATES              no
	INDEX_AREA              0
	INDEX_COMPRESSION       yes
	INDEX_FILL              100
	LEVEL1_INDEX_AREA       0
	NAME                    "NAME"
	NULL_KEY                yes
	NULL_VALUE              0
	SEG0_LENGTH             32
	SEG0_POSITION           16
	TYPE                    string
$RIGHTSDONE:
$	IF .NOT. KIT_DOTLR THEN GOTO DO_SYSGEN
$	SAY ""
$	SAY "Dismount the library disk."
$	IF F$GETDVI(LIB_DISK,"MNT") THEN -
		@SYS$UPDATE:VMSTAILOR DISMOUNT 'LIB_DISK'
$DO_SYSGEN:
$ !
$ ! Re-set the sysgen parameter that causes the time/date to be requested
$ ! at boot-time.
$ !
$	RUN SYS$SYSTEM:SYSGEN
USE CURRENT
SET /STARTUP SYS$SYSTEM:STARTUP.UP3
SET SETTIME 0
SET VAXCLUSTER 0
WRITE CURRENT
$	IF .NOT. F$GETDVI(KIT,"MNT") THEN GOTO DO_UP3
$	DISMOUNT/NOUNLOAD 'KIT'
$	SAY ""
$	SAY "Distribution kit may be removed from ''KIT'."
$	SAY ""
$DO_UP3:
$	@SYS$SYSTEM:STARTUP.UP3 CONTINUE
$	!
$	! On error, exit from the upgrade procedure here.
$	!
$7000:
$	SAY ""
$	SAY "Upgrade to VAX/VMS Version 4.0 incomplete."
$	SAY ""
$	SAY "Error exit from upgrade procedure."
$	SAY "Restart upgrade from last boot of system."
$	SAY ""
$	IF F$LOGICAL("DATAF") .NES. "" THEN CLOSE DATAF
$	EXIT
