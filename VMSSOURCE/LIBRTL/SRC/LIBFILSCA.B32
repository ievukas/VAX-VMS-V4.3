MODULE LIB$FILESCAN (					! LIBFILESCA.B32
		%TITLE 'Search a file wildcard sequence of files'
		IDENT = 'V03-024'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: General Utility Library
!
! ABSTRACT:
!	This module contains routines which can be used to find all
!	files that match a wildcard file specification.
!
! ENVIRONMENT:
!	VAX/VMS, User mode, Non-AST re-entrant
!
! AUTHOR:	Tim Halvorsen, CREATION DATE: 1-AUG-1979
!
! MODIFIED BY:
!
!	V03-024	BLS0331		Benn Schreiber		 9-JUL-1984
!		Remove conditional compilation.
!
!	V03-023	BLS0321		Benn Schreiber		22-MAY-1984
!		If wild version, do not put it on related list over
!		and over.
!
!	V03-022	BLS0319		Benn Schreiber		16-MAY-1984
!		For find_file, never use move_default to put at the
!		end.  Save address of newly created default nam block
!		for future reference.
!
!	V03-021	BLS0317		Benn Schreiber		14-MAY-1984
!		If a new default file spec is seen, put it in the
!		list of related files at current location, not at
!		end.
!
!	V03-020	BLS0316		Benn Schreiber		13-MAY-1984
!		Remove over-anxious edit in find_file.
!
!	V03-019	BLS0313		Benn Schreiber		 7-MAY-1984
!		Fix checking of default string in find_file to correctly
!		decide whether to set default string in FAB.
!
!	V03-018	BLS0308		Benn Schreiber		27-APR-1984
!		In lib$find_file, fix wildcard version, and passing
!		same filespec twice if nowild not set.  Also, in
!		lib$file_scan_end, allow calling without fab argument.
!
!	V03-017	BLS0307		Benn Schreiber		26-APR-1984
!		Fix use of NOWILD in lib$find_file.
!
!	V03-016	BLS0297		Benn Schreiber		 9-APR-1984
!		Correctly allow changing of the default file specification
!		on new file specs in multi-file parses (lib$find_file).
!
!	V03-015	BLS0283		Benn Schreiber		 6-MAR-1984
!		Don't try to allocate 0-length string in findfile.
!
!	V03-014	BLS0275		Benn Schreiber		25-FEB-1984
!		Correct parse of null string to clear ESS and RSS
!
!	V03-013	BLS0264		Benn Schreiber		24-Jan-1984
!		Add support for multiple input filename stickyness.
!		Add new routines to deallocate saved context. Add conditional
!		to compile new interface for V3, for shipment in 3.6.
!
!	V03-012	BLS0254		Benn Schreiber		19-Dec-1983
!		Correct handling of null file specs in LIB$FIND_FILE.
!
!	V03-011	BLS0243		Benn Schreiber		20-Oct-1983
!		Fix handling of related nam block for searchlists.
!
!	V03-010	BLS0198		Benn Schreiber		13-Dec-1982
!		If non-wildcard call, do a parse of null string to clear
!		RMS internal context.
!
!	V03-009	BLS0174		Benn Schreiber		 1-JUN-1982
!		Use lib$analyze_sdesc_r2 for arguments passed as
!		string descriptors
!
!	V03-008	BLS0133		Benn Schreiber		11-Jan-1982
!		Make lib$file_scan continue when it gets nopriv.  Make
!		lib$file_scan always copy expanded name string to resultant
!		name string on errors and network non-wild files
!
!	V03-007	TMK0001		Todd M. katz		31-Dec-1981
!		Check for a PPF file before doing a $SEARCH. Do not do 
!		searches on PPF files.
!
!	V03-006	MLJ0044		Martin L. Jack,	8-Sep-1981  14:00
!		Correct problems when $PARSE fails.
!
!	V03-005	BLS0071		Benn Schreiber		22-Aug-1981
!		Correct looping if priv violation in lib$find_file
!
!	V03-004	BLS0065		Benn Schreiber		 4-Aug-1981
!		Fix handling of devices mounted foreign, and move
!		saved status into a longword out of the fab for lib$find_file.
!
!	V03-003	BLS0041		Benn Schreiber		23-Feb-1981
!		Correct error in call to lib$free_vm
!
!	V03-002	BLS0027		Benn Schreiber		28-Nov-1980
!		Correct protection violation handling in LIB$FIND_FILE
!
!	V03-001	LMK0001		Len Kawell		19-Sep-1980
!		Recode in BLISS and add LIB$FILE_SEARCH.
!--

%SBTTL	'Declarations';

SWITCHES
	ADDRESSING_MODE (EXTERNAL = GENERAL,		!Declare addressing modes
			NONEXTERNAL = WORD_RELATIVE);
LIBRARY
	'RTLSTARLE';					!System symbols

REQUIRE
	'RTLIN:RTLPSECT';				!Define PSECT declaration macros

DECLARE_PSECTS (LIB);					!Declare PSECTs for LIB$ facility

!
! LINKAGES:
!

LINKAGE
    JSB_ANALYZE_SDESC = JSB (REGISTER=0; REGISTER=1, REGISTER=2) :
    			    NOTUSED (3,4,5,6,7,8,9,10,11);

FORWARD ROUTINE
	COPY_ESL_TO_RSL : NOVALUE,		!Copies ESL to RSL
	COPY_FILE_STRING,			!Copy file string to VM
	DUMMY_ROUTINE,				!Dummy suc/err routine
	LIB$FILE_SCAN,				!Wild card scan using FAB
	COPY_RESULT_NAME : NOVALUE,		!Copy result string
	LIB$FIND_FILE;				!Wild card scan using context

EXTERNAL ROUTINE
	LIB$ANALYZE_SDESC_R2: JSB_ANALYZE_SDESC,!Analyze string descriptor
	LIB$FREE_VM,				!Deallocate virtual memory
	LIB$GET_VM,				!Allocate virtual memory
	LIB$SCOPY_R_DX;				!Copy string
!
! Local storage
!
PSECT OWN = _LIB$CODE;
PSECT PLIT = _LIB$CODE;

OWN
	RMSNMF : LONG INITIAL (RMS$_NMF);
BIND
	WILD_VER = UPLIT(';*');
!
! Define the storage context used by LIB$FIND_FILE
!
LITERAL
	NAM_OFF = FAB$C_BLN,			! Offset to NAM block
	RNAM_OFF = NAM_OFF + NAM$C_BLN,		! Offset to related NAM block
	ESBUF_OFF = RNAM_OFF + NAM$C_BLN,	! Offset to expanded name 
	RSBUF_OFF = ESBUF_OFF + NAM$C_MAXRSS,	! Offset to result name
	STATUS_OFF = RSBUF_OFF + NAM$C_MAXRSS,	! Offset to next status
	INTFLAGS_OFF = STATUS_OFF + 4,		! Offset to internal flags
	DNAM_PTR = INTFLAGS_OFF + 4,		! Pointer to default string
						!  NAM block
	CONTEXT_SIZE = DNAM_PTR + 4;		! Total size of structure
!
! Define shared messages
!
$SHR_MSGDEF(LIB,21,LOCAL,
	(NOWILD,ERROR));		!Wildcard filespec and NOWILD set

%SBTTL	'COPY_FILE_STRING Copy filename string for next input file parse';
ROUTINE COPY_FILE_STRING(CONTEXT,FAB) =
!---
!	This routine copies the file specified by fab$b_fns/l_fna to
!	a block of memory allocated with lib$get_vm.  This block also
!	contains a nam block.  These are used on a subsequent call to
!	filescan to provide the related file name(s), and is done this
!	way because RMS needs access to the filename strings of all previous
!	file specifications should any of them contain a searchlist.
!
! Inputs:
!
!	Context = 0 or address of context longword passed by user
!	fab = address of fab
!
! Outputs:
!
!	The memory is allocated and the block is added into the list
!	of related nam blocks.  If no context was passed by the user,
!	nothing is done.
!
! NOTE: If compiling for V3 system, the expanded string from the NAM
!	block is used, rather than fns/fna.  Also, the related NAM block
!	(found via NAM$L_RLF) must already point to a valid related
!	NAM block.
!---
BEGIN
MAP
	FAB : REF $BBLOCK;

LOCAL
	CTX : REF VECTOR[,LONG],
	STRSIZE,
	RNAM : REF $BBLOCK,
	NAM : REF $BBLOCK,
	NEWBLOCK : REF $BBLOCK,
	STATUS;

!
! If no context passed by user, then nothing to do.
!
IF (CTX = .CONTEXT) EQL 0
    THEN RETURN 1;
!
! Allocate a block big enough for a NAM block and the filename string
!
STRSIZE = .FAB[FAB$B_FNS];
STATUS = LIB$GET_VM(%REF(NAM$C_BLN+.STRSIZE),NEWBLOCK);
IF NOT .STATUS
    THEN RETURN .STATUS;
!
! Initialize the NAM block, and copy the filename string
!
CH$MOVE(NAM$C_BLN,.FAB[FAB$L_NAM],.NEWBLOCK);
NEWBLOCK[NAM$B_RSL] = .STRSIZE;
NEWBLOCK[NAM$B_RSS] = .STRSIZE;
NEWBLOCK[NAM$L_RSA] = .NEWBLOCK+NAM$C_BLN;
NEWBLOCK[NAM$B_ESS] = 0;
NEWBLOCK[NAM$B_ESL] = 0;
CH$FILL(0,NAM$C_DVI,NEWBLOCK[NAM$T_DVI]);
CH$MOVE(.STRSIZE,.FAB[FAB$L_FNA],.NEWBLOCK+NAM$C_BLN);
!
! Link this nam/filespec block into the list of blocks
!
NEWBLOCK[NAM$L_RLF] = .CTX[0];
CTX[0] = .NEWBLOCK;
RETURN 1
END;

%SBTTL	'COPY_ESL_TO_RSL Copy Expanded Name String to Resultant';
ROUTINE COPY_ESL_TO_RSL(FAB,NAM) : NOVALUE =
!---
!	This routine sets up the resultant name string data
!	in the NAM block.  It is called in the case of an
!	error from $PARSE/$SEARCH, or on network non-wild
!	card operations.
!
! Inputs:
!
!	FAB = FAB address
!	NAM = NAM address
!
! Outputs:
!
!	NAM$B_RSL setup with length of string copied into
!	resultant name string buffer pointed to by NAM$L_RSA.
!---
BEGIN

MAP
	FAB:	REF BLOCK[,BYTE],		! FAB structure
	NAM:	REF BLOCK[,BYTE];		! NAM structure

IF .NAM[NAM$B_RSL] EQL 0			! If name not set up
    THEN IF (NAM[NAM$B_RSL] = .NAM[NAM$B_ESL]) NEQ 0	! If expanded string present
	THEN CH$MOVE(MINU(.NAM[NAM$B_RSS],
				.NAM[NAM$B_ESL]),! then use it
		.NAM[NAM$L_ESA],.NAM[NAM$L_RSA])
	ELSE BEGIN				! No expanded string, use
	    NAM[NAM$B_RSL] = .FAB[FAB$B_FNS];	!  the filename string from FAB
	    CH$MOVE(MINU(.NAM[NAM$B_RSS],.FAB[FAB$B_FNS]),
			.FAB[FAB$L_FNA],.NAM[NAM$L_RSA]);
	END;
RETURN;
END;

%SBTTL	'DUMMY_ROUTINE Dummy success/error routine';
ROUTINE DUMMY_ROUTINE = RETURN 1;

%SBTTL	'PARSE_NULL_STRING Parse null string to deallocate RMS context';
ROUTINE PARSE_NULL_STRING(FAB) =
!---
!	Parse the null string to force RMS to deallocate any context
!	saved by NAM$V_SVCTX
!
! Inputs:
!
!	fab = address of the fab
!
! Implicit outputs:
!
!	$PARSE done on the fab to deallocate saved context
!
!--
BEGIN
MAP
	FAB : REF $BBLOCK;

LOCAL
	NAM : REF $BBLOCK;
!
! Set up to parse the null string
!
NAM = .FAB[FAB$L_NAM];
IF .NAM NEQ 0
THEN	BEGIN
	NAM[NAM$V_SVCTX] = 0;
	NAM[NAM$V_SYNCHK] = 1;		!In case of network SET DEFAULT
	NAM[NAM$B_ESL] = 0;
	NAM[NAM$B_RSL] = 0;
	NAM[NAM$B_ESS] = 0;
	NAM[NAM$B_RSS] = 0;
	NAM[NAM$L_RLF] = 0;
	END;
FAB[FAB$B_FNS] = 0;
FAB[FAB$B_DNS] = 0;
$PARSE(FAB=.FAB);
RETURN 1
END;

ROUTINE MOVE_DEFAULT_STRING(CONTEXT,FAB,DNMPTR) =
!---
!	Move the default string from the FAB to a NAM block at the end
!	of the related NAM block list.
!
! Inputs:
!
!	context = address of context longword
!	fab = fab address
!	dnmptr = (optional) address of longword to store nam block address
!
! Outputs:
!
!	fab[fab$b_dns] zeroed.  Default name string copied into allocated
!	nam block which is linked at the end of the related file blocks.
!
!---
BEGIN
MAP
	CONTEXT : REF VECTOR[,LONG],
	FAB : REF $BBLOCK,
	DNMPTR : REF VECTOR[,LONG];

BUILTIN
	NULLPARAMETER;

LOCAL
	STATUS,
	PNAM : REF $BBLOCK,
	RNAM : REF $BBLOCK,
	TNAM : REF $BBLOCK;

IF .FAB[FAB$B_DNS] EQL 0
THEN
	RETURN 1;
!
! Search the NAM blocks looking for a default file string
! block (noted by [NAM$B_ESS] = %X'0D') and see if that string
! is same as new string.  Return successfully if so. If not,
! then deallocate the one from the list, as we need a new block.
!
TNAM = CONTEXT[0] - $BYTEOFFSET(NAM$L_RLF);
PNAM = .TNAM;
WHILE .TNAM[NAM$L_RLF] NEQ 0
DO	BEGIN
	PNAM = .TNAM;
	TNAM = .TNAM[NAM$L_RLF];
	IF .TNAM[NAM$B_ESS] EQL %X'0D'
	THEN	BEGIN
		IF CH$EQL(.FAB[FAB$B_DNS],.FAB[FAB$L_DNA],
				.TNAM[NAM$B_RSL],.TNAM[NAM$L_RSA],0)
		THEN	BEGIN
			FAB[FAB$B_DNS] = 0;
			RETURN 1;
			END;
		LIB$FREE_VM(%REF(NAM$C_BLN + .TNAM[NAM$B_RSL]),%REF(.TNAM));
		PNAM[NAM$L_RLF] = 0;
		EXITLOOP;
		END;
	END;
!
! Allocate a NAM+string block
!
STATUS = LIB$GET_VM(%REF(NAM$C_BLN+.FAB[FAB$B_DNS]),RNAM);
IF NOT .STATUS
THEN
	RETURN .STATUS;
!
! Link into the list, initialize the NAM block, copy the default name string.
!
PNAM[NAM$L_RLF] = .RNAM;
$NAM_INIT(NAM=.RNAM,
	RSA=.RNAM+NAM$C_BLN);
RNAM[NAM$B_RSL] = .FAB[FAB$B_DNS];
RNAM[NAM$B_ESS] = %X'0D';		!Identify it as default string nam block
CH$MOVE(.FAB[FAB$B_DNS],.FAB[FAB$L_DNA],.RNAM+NAM$C_BLN);
FAB[FAB$B_DNS] = 0;
IF NOT NULLPARAMETER(3)
THEN
	DNMPTR[0] = .RNAM;
RETURN 1
END;

%SBTTL	'LIB$FILE_SCAN File scan given FAB and NAM block';
GLOBAL ROUTINE LIB$FILE_SCAN(FAB,SUCCESS_RTN,ERROR_RTN,CONTEXT) =
!---
!
!	This routine is called with a wildcard file specification
!	and calls a specified set of action routines for each file
!	and/or error found in the wildcard sequence.  Certain errors
!	are checked for in order to allow the search sequence to be
!	completed even though errors like nopriv are present.
!	Stickyness is also handled if this routine is called once
!	for each file specification parameter in a command line.
!
! Inputs:
!
!	FAB = FAB address.  FAB$L_NAM must point to a valid, initialized
!			NAM block with both expanded and resultant string
!			buffers present.
!	SUCCESS_RTN = file success action routine address
!			The success routine is called with one argument,
!			which is a pointer to the FAB.
!	ERROR_RTN  = error action routine address
!			The error routine is called with one argument,
!			which is a pointer to the FAB.
!	CONTEXT = [OPTIONAL] address of longword used for keeping context
!			for multiple input file related file processing.
!			The longword should be zeroed on the first call,
!			and LIB$FILE_SCAN_END should be called after each
!			set (command line) has been processed to deallocate
!			the allocated context.
!
! Implicit inputs:
!
!	The FAB must be initialized as a FAB with a pointer to a valid
!	NAM block.
!
! Outputs:
!
!	The action routines are called appropriately.  This
!	routine returns when there are no more files.
!
! Implicit outputs:
!
!
! Routine values:
!
!	Any valid RMS status code
!
!---
BEGIN

GLOBAL BIND
	FMG$FILE_SCAN = LIB$FILE_SCAN;	! Define old name
LOCAL
	STATUS,				! Routine status
	SUC_ROUTINE,			! Address of success routine
	ERR_ROUTINE,			! Address of error routine
	CTX,				! Address of context longword
	NAM : REF $BBLOCK,		! NAM block address
	TNAM : REF $BBLOCK,		! Temporary NAM block pointer
	RNAM : REF $BBLOCK;		! Related file NAM block address
MAP
	FAB:	REF BLOCK[,BYTE];	! FAB structure address
BUILTIN
	AP,CALLG,NULLPARAMETER;

MACRO CALL_SUCCESS =
	(CALLG(.AP,.SUC_ROUTINE))%;

MACRO CALL_ERROR =
	(CALLG(.AP,.ERR_ROUTINE))%;
!
! Set up error and success routines
!
SUC_ROUTINE = DUMMY_ROUTINE;
ERR_ROUTINE = .SUC_ROUTINE;
IF NOT NULLPARAMETER(2)
THEN
	SUC_ROUTINE = .SUCCESS_RTN;
IF NOT NULLPARAMETER(3)
THEN
	ERR_ROUTINE = .ERROR_RTN;
!
! Tell RMS to save context over calls to speed things up.  This also
! causes directories to be read by RMS instead of the ACP.
!
NAM = .FAB[FAB$L_NAM];
NAM[NAM$V_SVCTX] = 1;
CTX = 0;
!
! Set up previous file specifications NAM list pointer
!
IF NOT NULLPARAMETER(4)
THEN	BEGIN
	CTX = .CONTEXT;			!Get address of context longword
	NAM[NAM$L_RLF] = ..CTX;		!Set related nam block pointer
	END;
!
! Parse the file spec
!
FAB[FAB$V_NAM] = 0;			!Clear in case previously set
STATUS = $PARSE(FAB = .FAB);	
IF NOT .STATUS
THEN	BEGIN
	COPY_ESL_TO_RSL(.FAB,.NAM);
	CALL_ERROR;
	COPY_FILE_STRING(.CTX,.FAB);
	RETURN .STATUS;
	END;
FAB[FAB$V_NAM] = 1;			! Use NAM block
!
! Copy the default file string to the end of the nam block list
! if we have a context block.
!
IF (.CTX NEQ 0)
THEN IF (..CTX EQL 0)
THEN
	MOVE_DEFAULT_STRING(.CTX,.FAB);
!
! Handle the case of being called with a related NAM block, but not
! the context block.  In this case, we save the expanded filename
! string.  This will provide the functionality seen in V4FT1.
!
RNAM = .NAM[NAM$L_RLF];
IF (.NAM[NAM$B_ESL] NEQ 0)
AND (.RNAM NEQ 0)
AND (.CTX EQL 0)
THEN	BEGIN
	LOCAL
		STATUS_1;

	IF .RNAM[NAM$B_RSL] NEQ 0	!Deallocate any previous
	THEN
		LIB$FREE_VM(%REF(.RNAM[NAM$B_RSL]),RNAM[NAM$L_RSA]);
	RNAM[NAM$B_RSL] = .NAM[NAM$B_ESL];
	STATUS_1 = LIB$GET_VM(%REF(.RNAM[NAM$B_RSL]),RNAM[NAM$L_RSA]);
	IF NOT .STATUS_1
	THEN
		RETURN .STATUS_1;
	CH$MOVE(.RNAM[NAM$B_RSL],.NAM[NAM$L_ESA],.RNAM[NAM$L_RSA]);
	END;
FAB[FAB$B_DNS] = 0;			! Clear default name string
!
! If a wildcard version number was specified on this filespec
! (via either FNM or DNM), then leave dnm set to ';*' so that
! the version will be sticky.  This is because RMS does not copy
! the version field from related file name string.
!
IF .NAM[NAM$V_WILD_VER]
THEN	BEGIN
	FAB[FAB$B_DNS] = %CHARCOUNT(';*');
	FAB[FAB$L_DNA] = WILD_VER;
	END;
!
! If the device is non-directory structured, then simply return
! to the caller's success action routine with the spec and
! avoid the SEARCH sequence. Also avoid the SEARCH sequence if 
! the file is a PPF file.
!
IF NOT .(FAB[FAB$L_DEV])<$BITPOSITION(DEV$V_DIR),1>
AND NOT .NAM[NAM$V_NODE]
OR .(FAB[FAB$L_DEV])<$BITPOSITION(DEV$V_FOR),1>
OR .NAM[NAM$V_PPF]
THEN	BEGIN
	COPY_ESL_TO_RSL(.FAB,.NAM);
	CALL_SUCCESS;
	COPY_FILE_STRING(.CTX,.FAB);
	RETURN .STATUS;
	END;
!
! If the file specification is non-wild, then SEARCH once to get
! the FID/DID filled in and do not repeat the search.
! If no wildcard in a network spec, no need for search.
!
IF NOT .NAM[NAM$V_WILDCARD]
THEN	BEGIN
	IF NOT .NAM[NAM$V_NODE]
	THEN	BEGIN
		STATUS = $SEARCH(FAB = .FAB);
		IF NOT .STATUS
		THEN	BEGIN
			COPY_ESL_TO_RSL(.FAB,.NAM);
			CALL_ERROR;
			COPY_FILE_STRING(.CTX,.FAB);
			RETURN .STATUS;
			END;
		END
	ELSE COPY_ESL_TO_RSL(.FAB,.NAM);
	CALL_SUCCESS;
	COPY_FILE_STRING(.CTX,.FAB);
	RETURN .STATUS;
	END;
!
! Search for the each file which matches the wildcard sequence.  If
! success call success action routine and continue.  If no more files,
! quit.  If other error, call the error action routine and if not
! a wildcard directory or failure wasn't no privilege, then quit.
!
DO	BEGIN
	STATUS = $SEARCH(FAB = .FAB);
	IF .STATUS
	THEN 	CALL_SUCCESS
	ELSE	BEGIN
		IF .STATUS EQLU .RMSNMF
		THEN	BEGIN
			COPY_FILE_STRING(.CTX,.FAB);
			RETURN .STATUS
			END
		ELSE
			BEGIN
			COPY_ESL_TO_RSL(.FAB,.NAM);
			CALL_ERROR;
			!
			! Quit if not a wildcard directory or system status
			! not NOPRIV.
			!
			IF NOT .NAM[NAM$V_WILD_DIR]
			 OR .FAB[FAB$L_STV] NEQU SS$_NOPRIV
			 THEN	BEGIN
				COPY_FILE_STRING(.CTX,.FAB);
				RETURN .STATUS;
				END;
			IF .FAB[FAB$L_STV] EQL SS$_NOPRIV
			 THEN STATUS = 1;
			END;
		END;

	END
UNTIL NOT .STATUS;
COPY_FILE_STRING(.CTX,.FAB);
RETURN .STATUS
END;

%SBTTL 'COPY_RESULT_NAME Copy best name possible to result string';
ROUTINE COPY_RESULT_NAME (FAB,RESULT_NAME) : NOVALUE =
!---
!	This routine extracts the best possible result name from the
!	fab/nam block and returns it in the result descriptor.
!
! Inputs:
!
!	fab	address of the fab, which must also contain a nam block
!	result_name address of the descriptor for the result string
!
! Outputs:
!
!	Output string is copied to result_name using lib$s_copy_r_dx
!
!---

BEGIN
MAP
    FAB : REF BLOCK[,BYTE];

BIND
    NAM = FAB[FAB$L_NAM] : REF BLOCK[,BYTE];

LOCAL
    FNSIZE,
    FNADDR;

IF (FNSIZE = .NAM[NAM$B_RSL]) NEQ 0
    THEN FNADDR = .NAM[NAM$L_RSA]
    ELSE IF (FNSIZE = .NAM[NAM$B_ESL]) NEQ 0
	THEN FNADDR = .NAM[NAM$L_ESA]
	ELSE BEGIN
	    FNSIZE = .FAB[FAB$B_FNS];
	    FNADDR = .FAB[FAB$L_FNA];
	    END;

RETURN LIB$SCOPY_R_DX(FNSIZE,.FNADDR,.RESULT_NAME)
END;

%SBTTL	'FIND_FILE_CLEANUP Internal routine to do find_file cleanup';
ROUTINE FIND_FILE_CLEANUP(CONTEXT) =
!---
!	Deallocate the context associated with using LIB$FIND_FILE
!
! Inputs:
!
!	context = address of longword containing context pointer
!
! Outputs:
!
!	A parse of the null string is done.
!	Context, related nam blocks, etc, all deallocated.  Context
!	longword is not zeroed.
!---
BEGIN
MAP
	CONTEXT : REF VECTOR[,LONG];

BIND
	INTFLAGS = .CONTEXT[0] + INTFLAGS_OFF : BITVECTOR;

LOCAL
	FAB : REF $BBLOCK,
	NAM : REF $BBLOCK,
	RNAM : REF $BBLOCK,
	BLOCKSIZE;

FAB = .CONTEXT[0];
!
! Deallocate the filename string and the context block
!
BLOCKSIZE = .FAB[FAB$B_FNS];
IF .FAB[FAB$B_FNS] NEQ 0
    AND .FAB[FAB$L_FNA] NEQ 0
THEN
	LIB$FREE_VM(BLOCKSIZE,FAB[FAB$L_FNA]);
!
! If doing multiple input related file processing, deallocate the related
! nam blocks
!
IF .INTFLAGS[0]
THEN	BEGIN
	NAM = .FAB[FAB$L_NAM];
	IF .NAM NEQ 0
	THEN
		NAM = .NAM[NAM$L_RLF];
	WHILE .NAM NEQ 0
	DO	BEGIN
		RNAM = .NAM[NAM$L_RLF];
		LIB$FREE_VM(%REF(NAM$C_BLN+.NAM[NAM$B_RSL]),NAM);
		NAM = .RNAM;
		END;
	END;
!
! Parse the null string
!
PARSE_NULL_STRING(.FAB);
LIB$FREE_VM(%REF(CONTEXT_SIZE),FAB);
RETURN 1
END;

%SBTTL 'LIB$FIND_FILE Find a file given a file name';
GLOBAL ROUTINE LIB$FIND_FILE(FILE_NAME,RESULT_NAME,CONTEXT,
			       DEFAULT_NAME,RELATED_NAME,STV_ADDR,USER_FLAGS) =
!---
!	This routine is called with a wildcard file specification, which
!	it searches for, and returns the next resultant file spec.
!
! Inputs:
!
!	FILE_NAME = File name descriptor address.
!	RESULT_NAME = Result file name descriptor address.
!	CONTEXT = Address of a longword containing previous call "context".
!		= Zero if no previous call.
!	DEFAULT_NAME = Default file name descriptor address (optional).
!	RELATED_NAME = Related file name descriptor address (optional).
!	STV_ADDR = [OPTIONAL] Address of longword to store STV on failing
!		RMS operation
!	USER_FLAGS = Address of longword of flags to control operation
!		[OPTIONAL]
!		BIT 0 (NOWILD) Return an error if a wildcard is input
!		BIT 1 (MULTIPLE) Perform multiple input file stickyness.
!			In this mode, the RELATED_NAME argument is ignored.
!			Each time LIB$FIND_FILE is called with a different
!			file specification, the one from the previous call
!			is added to the list of related file specifications.
!			This allows parsing of commands such as
!				$ ENCRYPT FILE1.TYP,FILE*2.TYP,...
!			Use of this feature is required to get the desired
!			defaulting with searchlists.
!
!			Note that LIB$FIND_FILE_END must be called between
!			each command line in interactive use or the defaults
!			from the previous command line will affect the
!			next command line.
!
! Implicit inputs:
!
!	CONTEXT is either 0 or as set up from a previous call to
!	LIB$FIND_FILE.
!
! Outputs:
!
!	CONTEXT = Address of internal FAB/NAM buffer.
!	RESULT_NAME = Result file name.
!
! Implicit outputs:
!
!	CONTEXT will point to a FAB/NAM block
!
! Routine values:
!
!	Any valid RMS error code
!	Error codes returned by LIB$GET_VM
!	Error codes returned by LIB$SCOPY_R_DX
!	SHR$_NOWILD with LIB facility code - Wildcard specification parsed
!		and the NOWILD flag bit was set.
!
!---
BEGIN

BUILTIN
	NULLPARAMETER;

LOCAL
	STATUS,				! Status
	STATUS_0,
	STATUS_1,
	STATUS_2,
	BLOCKSIZE,			! Size of request to lib$get/free vm
	FLAGS : BITVECTOR[32],		! User flags
	INTFLAGS : REF BITVECTOR,	! Internal flags
	STVADDR : REF VECTOR[,LONG],	! Address of user's stv address
	FNBUF : REF VECTOR[,BYTE],	! FAB/NAM buffer address
	FNBUF_SIZ,			! FAB/NAM buffer length
	FILE_SIZE,			! Length of FILE_NAME string
	FILE_ADDR,			! Address of FILE_NAME string
	DEFAULT_SIZE,			! Length of DEFAULT_NAME string
	DEFAULT_ADDR,			! Address of DEFAULT_NAME string
	RELATED_SIZE,			! Length of RELATED_NAME string
	RELATED_ADDR,			! Address of RELATED_NAME string
	FAB : REF $BBLOCK,		! FAB address
	NAM : REF $BBLOCK,		! NAM address
	RNAM : REF $BBLOCK,		! Related NAM address
	NEXT_STATUS : REF VECTOR[,LONG];! Status to return next call
MAP
	CONTEXT:	REF VECTOR[,LONG],	! Pointer to context block
	FILE_NAME:	REF BLOCK[,BYTE],	! File name string descriptor
	RESULT_NAME:	REF BLOCK[,BYTE],	! Result name buffer descriptor
	DEFAULT_NAME:	REF BLOCK[,BYTE],	! Default name descriptor
	RELATED_NAME:	REF BLOCK[,BYTE];	! Related file name string desc

STATUS = 1;					! Preset success
FILE_SIZE = RELATED_SIZE = DEFAULT_SIZE = 0;	! Preset since they are words
STVADDR = 0;
IF NOT NULLPARAMETER(6)
THEN
	STVADDR = .STV_ADDR;
FLAGS = 0;
IF NOT NULLPARAMETER(7)
THEN
	FLAGS = ..USER_FLAGS;
!
! If the specified previous "context" is zero, then there was no 
! previous call, so the FAB/NAM block buffer needs to be allocated.
!
IF .CONTEXT[0] EQL 0
THEN 	BEGIN
	STATUS_0 = LIB$GET_VM(%REF(CONTEXT_SIZE),CONTEXT[0]);
	IF NOT .STATUS_0
	THEN
		RETURN .STATUS_0;
	FNBUF = .CONTEXT[0];
	CH$FILL(0,CONTEXT_SIZE,.FNBUF);
	!
	! Initialize the FAB and NAM blocks
	!
	$FAB_INIT(	FAB = .FNBUF,
			FOP = NAM,
			NAM = FNBUF[NAM_OFF]);
	$NAM_INIT(	NAM = FNBUF[NAM_OFF],
			RLF = (IF .FLAGS[1] THEN 0
				ELSE FNBUF[RNAM_OFF]),
			RSS = NAM$C_MAXRSS,
			RSA = FNBUF[RSBUF_OFF],
			ESS = NAM$C_MAXRSS,
			ESA = FNBUF[ESBUF_OFF]);
	$NAM_INIT(	NAM = FNBUF[RNAM_OFF]);
	(.FNBUF + STATUS_OFF) = 1;
	END
ELSE
	FNBUF = .CONTEXT[0];
!
! Get the block addresses and check the validity of the FAB/NAM buffer.
!
FAB = .FNBUF;
NAM = FNBUF[NAM_OFF];
RNAM = FNBUF[RNAM_OFF];
NEXT_STATUS = FNBUF[STATUS_OFF];
INTFLAGS = FNBUF[INTFLAGS_OFF];
IF .FAB[FAB$B_BID] NEQ FAB$C_BID
OR .FAB[FAB$B_BLN] NEQ FAB$C_BLN
THEN
	RETURN RMS$_FAB;

!
! Remember in context if doing multiple related filename processing
!
INTFLAGS[0] = .FLAGS[1];
!
! Get the length and address of the filename string
!
IF NOT (STATUS_1 = LIB$ANALYZE_SDESC_R2(.FILE_NAME;FILE_SIZE,FILE_ADDR))
THEN 
	RETURN .STATUS_1;

!
! If specified, get the length and address of the default filename string
!
DEFAULT_ADDR = DEFAULT_SIZE;
IF NOT NULLPARAMETER(4)
THEN
	!
	! Analyze default name descriptor if present
	!
	IF NOT (STATUS = LIB$ANALYZE_SDESC_R2(.DEFAULT_NAME;
					DEFAULT_SIZE,DEFAULT_ADDR))
	THEN BEGIN
		COPY_RESULT_NAME(.FAB,.RESULT_NAME);
		NEXT_STATUS[0] = .RMSNMF;	! Require new FILE_NAME
		RETURN .STATUS;
		END;
!
! If specified, get the length and address of the related file spec
!
RELATED_ADDR = RELATED_SIZE;
IF NOT .FLAGS[1]
AND NOT NULLPARAMETER(5)
THEN
	IF NOT (STATUS = LIB$ANALYZE_SDESC_R2(.RELATED_NAME;
					RELATED_SIZE,RELATED_ADDR))
	THEN BEGIN
		COPY_RESULT_NAME(.FAB,.RESULT_NAME);
		NEXT_STATUS[0] = .RMSNMF;	! Require new FILE_NAME
		RETURN .STATUS;
		END;

!
! If the specified file-name does not match the previous file-name,
! or if NOWILD, then set up the new filenames and parse them. 
! (Also check for first call and file-name of all blanks)
!
IF .FLAGS[0]
    OR .INTFLAGS[1]
    OR CH$NEQ(.FAB[FAB$B_FNS],.FAB[FAB$L_FNA],
		.FILE_SIZE,.FILE_ADDR,' ')
    OR CH$FAIL(CH$FIND_NOT_CH(.FILE_SIZE,.FILE_ADDR,' '))
    OR (
	BIND
		DNAM = FNBUF[DNAM_PTR] : REF $BBLOCK;

	IF (.DNAM EQL 0)
		OR (.DEFAULT_SIZE EQL 0)
	THEN
		0
	ELSE
		NOT CH$EQL(.DEFAULT_SIZE,.DEFAULT_ADDR,
			.DNAM[NAM$B_RSL],.DNAM[NAM$L_RSA],0)
	)
THEN 	BEGIN
	BIND
		DNAM = FNBUF[DNAM_PTR] : REF $BBLOCK;
	!
	! If specified, set the default name.
	!
	IF ((.DEFAULT_SIZE NEQ 0)
		AND (.(FNBUF[DNAM_PTR])<0,32,0> EQL 0))
		OR (IF .(FNBUF[DNAM_PTR])<0,32,0> NEQ 0
			THEN NOT CH$EQL(.DEFAULT_SIZE,.DEFAULT_ADDR,
					.DNAM[NAM$B_RSL],.DNAM[NAM$L_RSA],0)
			ELSE 0)
	THEN	BEGIN
		FAB[FAB$B_DNS] = .DEFAULT_SIZE;
		FAB[FAB$L_DNA] = .DEFAULT_ADDR;
		END
	ELSE
		FAB[FAB$B_DNS] = 0;
	!
	! If there is a previous name string, then delete it.  Then
	! allocate space for new filename string.
	!
	IF (BLOCKSIZE = .FAB[FAB$B_FNS]) NEQ 0
	THEN	BEGIN
		IF .FLAGS[1]
		THEN	BEGIN
			COPY_FILE_STRING(NAM[NAM$L_RLF],.FAB);
			END;
		LIB$FREE_VM(BLOCKSIZE,FAB[FAB$L_FNA]);
		FAB[FAB$B_FNS] = 0;
		END;
	BLOCKSIZE = .FILE_SIZE;
	FAB[FAB$B_FNS] = .BLOCKSIZE;
	IF .BLOCKSIZE NEQ 0
	THEN
		BEGIN
		IF NOT (STATUS_2 = LIB$GET_VM(BLOCKSIZE,FAB[FAB$L_FNA]))
		THEN
		    RETURN .STATUS_2;
		CH$MOVE(.FAB[FAB$B_FNS],.FILE_ADDR,.FAB[FAB$L_FNA]);
		END;
	!
	! If specified, set the related default name.
	!
	IF NOT .FLAGS[1]
	THEN	BEGIN
		IF .RELATED_SIZE NEQ 0
		THEN	BEGIN
			RNAM[NAM$B_RSL] = .RELATED_SIZE;
			RNAM[NAM$L_RSA] = .RELATED_ADDR;
			END
		ELSE
			RNAM[NAM$B_RSL] = 0;
		END;

	!
	! Parse the file-spec.
	!
	INTFLAGS[1] = 0;
	INTFLAGS[2] = 0;
	NAM[NAM$V_SVCTX] = 1;				! Save RMS context
	STATUS = $PARSE(FAB = .FAB);
	NEXT_STATUS[0] = .STATUS;			! Save status for next call
	IF .STVADDR NEQ 0
	THEN
		STVADDR[0] = .FAB[FAB$L_STV];
	IF NOT .STATUS
	THEN
		BEGIN
		COPY_RESULT_NAME(.FAB,.RESULT_NAME);
		NEXT_STATUS[0] = .RMSNMF;
		RETURN .STATUS;
		END;
	END;
!
! If error parsing, or from the last search (could have been RMS$_NMF 
! set because of no wildcarding) deallocate the context unless MULTIPLE.
! The case of a wildcard directory and SS$_NOPRIV is special cased to
! allow a search to continue even if a particular directory is not accessable.
!
IF .NEXT_STATUS[0] EQL .RMSNMF
THEN	BEGIN
	IF NOT .FLAGS[1]
	THEN	BEGIN
		FIND_FILE_CLEANUP(.CONTEXT);
		CONTEXT[0] = 0;
		END;
	INTFLAGS[1] = 1;
	RETURN .RMSNMF;
	END;
!
! Copy the default file string to a nam block at the end of the
! list of nam blocks if we have not yet done so.  If we already
! have copied the default string, then just insert it into the
! list of nam blocks at the current location.
!
IF .FAB[FAB$B_DNS] NEQ 0
	AND NOT .INTFLAGS[2]
THEN	BEGIN
	LOCAL
		NFAB : $FAB_DECL;

	BIND
		DNAMPTR = FNBUF[DNAM_PTR] : VECTOR[,LONG];

	!
	! Setup a dummy fab for copy_file_string.  Point default
	! name pointer in the context block to newly created default nam block
	!
	CH$MOVE(FAB$C_BLN,.FAB,NFAB);
	NFAB[FAB$B_FNS] = .FAB[FAB$B_DNS];
	NFAB[FAB$L_FNA] = .FAB[FAB$L_DNA];
	COPY_FILE_STRING(NAM[NAM$L_RLF],NFAB);
	DNAMPTR[0] = .NAM[NAM$L_RLF];
	END;

IF .NAM[NAM$V_WILD_VER]
	AND NOT .INTFLAGS[2]
THEN	BEGIN
	INTFLAGS[2] = 1;
	FAB[FAB$B_DNS] = %CHARCOUNT(';*');
	FAB[FAB$L_DNA] = WILD_VER;
	END;
!
! If the device is non-directory structured, or the file is a PPF file,
! then simply return to the caller and avoid the SEARCH sequence.
!
IF NOT .(FAB[FAB$L_DEV])<$BITPOSITION(DEV$V_DIR),1>
AND NOT .NAM[NAM$V_NODE]
OR .(FAB[FAB$L_DEV])<$BITPOSITION(DEV$V_FOR),1>
OR .NAM[NAM$V_PPF]
THEN	BEGIN
	NEXT_STATUS[0] = .RMSNMF;			! No more files on next call
	COPY_RESULT_NAME(.FAB,.RESULT_NAME);
	RETURN .STATUS;
	END;
!
! If wildcard processing is not wanted, check for it and return an
! error if so.
!
IF .FLAGS[0]
AND .NAM[NAM$V_WILDCARD]
THEN	BEGIN
	NEXT_STATUS[0] = .RMSNMF;
	COPY_RESULT_NAME(.FAB,.RESULT_NAME);
	RETURN LIB$_NOWILD;
	END;
!
! Search for the next file, unless it is a non-wildcard remote file,
! in which case, don't bother because it's so expensive.
!
IF NOT (.NAM[NAM$V_NODE] AND NOT .NAM[NAM$V_WILDCARD])
THEN
	STATUS = $SEARCH(FAB = .FAB);
!
! Return the STV in case of an error
!
IF NOT .STATUS
AND (.STVADDR NEQ 0)
THEN
	STVADDR[0] = .FAB[FAB$L_STV];

!
! If privilege violation and non-wildcard directory spec then
! set to return no more files on next call. 
!
IF NOT .STATUS
AND NOT (.NAM[NAM$V_WILD_DIR] AND (.FAB[FAB$L_STV] EQL SS$_NOPRIV))
THEN	BEGIN
	NEXT_STATUS[0] = .RMSNMF;			! No more files on next call
	END;
!
! If the filespec is non-wildcarded, set status so next call will return
! no more files.
!
IF NOT .NAM[NAM$V_WILDCARD]
THEN	
	BEGIN
	NEXT_STATUS[0] = .RMSNMF;
	END;
!
! Return the result name.  If the result name isn't set, return the expanded
! name.
!
COPY_RESULT_NAME(.FAB,.RESULT_NAME);
!
! If no more files and not MULTIPLE, deallocate the FAB/NAM buffer
!
IF .STATUS EQL .RMSNMF
AND NOT .FLAGS[1]
THEN	BEGIN
	FIND_FILE_CLEANUP(.CONTEXT);
	CONTEXT[0] = 0;
	END;

RETURN .STATUS

END;

%SBTTL	'LIB$FILE_SCAN_END Clean up after LIB$FILE_SCAN';
GLOBAL ROUTINE LIB$FILE_SCAN_END(FAB,CONTEXT) =
!---
!	This routine is called after using LIB$FILE_SCAN.  It performs
!	a parse of the null string to deallocate any saved RMS context.
!	If LIB$FILE_SCAN was directed to perform multiple input file
!	specification processing, the saved file specifications are
!	deallocated.
!
! Calling sequence:
!
!	status.wl = lib$file_scan_end(fab,context.wl.r)
!
! Inputs:
!
!	fab =  [OPTIONAL] Address of the FAB used with LIB$FILE_SCAN
!	context = [OPTIONAL] Address of the context used with LIB$FILE_SCAN
!
! Outputs:
!
!	NONE
!
! Implicit outputs:
!
!	Saved context deallocated if context argument is supplied.
!
! Routine values:
!
!	RMS$_FAB	fab argument is not address of a valid FAB
!	success
!---
BEGIN

BUILTIN
	NULLPARAMETER;

LOCAL
	RNAM : REF $BBLOCK,
	NAM : REF $BBLOCK;

MAP
	FAB : REF $BBLOCK,
	CONTEXT : REF VECTOR[,LONG];

!
! Ensure it's a FAB
!
IF NOT NULLPARAMETER(1)
THEN
	BEGIN
	IF .FAB[FAB$B_BID] NEQ FAB$C_BID
	    OR .FAB[FAB$B_BLN] NEQ FAB$C_BLN
	THEN
		RETURN RMS$_FAB;
!
! Parse the null string
!
	PARSE_NULL_STRING(.FAB);
	END;
!
! If supplied, deallocate any input file context
!
IF NOT NULLPARAMETER(2)
THEN	BEGIN
	NAM = .CONTEXT[0];
	WHILE .NAM NEQ 0
	DO	BEGIN
		RNAM = .NAM[NAM$L_RLF];
		LIB$FREE_VM(%REF(NAM$C_BLN+.NAM[NAM$B_RSL]),NAM);
		NAM = .RNAM;
		END;
	!
	! Zero the context
	!
	CONTEXT[0] = 0;
	END;
RETURN SS$_NORMAL
END;

%SBTTL	'LIB$FIND_FILE_END Clean up after LIB$FIND_FILE';
GLOBAL ROUTINE LIB$FIND_FILE_END(CONTEXT) =
!---
!	This routine is called after using LIB$FIND_FILE.  It performs
!	a parse of the null string to deallocate any saved RMS context,
!	and then the allocated context block is deallocated.
!
! Calling sequence:
!
!	status.wl = lib$find_file_end(context.wl.r)
!
! Inputs:
!
!	context =  Address of the context used with LIB$FIND_FILE
!
! Outputs:
!
!	NONE
!
! Implicit outputs:
!
!	Saved context deallocated.
!
! Routine values:
!
!	RMS$_FAB	context points to an invalid context block
!	success
!---
BEGIN
MAP
	CONTEXT : REF VECTOR[,LONG];

LOCAL
	FAB : REF $BBLOCK;
!
! If context is 0, nothing to do
!
IF .CONTEXT[0] EQL 0
THEN
	RETURN SS$_NORMAL;
!
! Ensure that context points to a FAB
!
FAB = .CONTEXT[0];
IF .FAB[FAB$B_BID] NEQ FAB$C_BID
    OR .FAB[FAB$B_BLN] NEQ FAB$C_BLN
THEN
	RETURN RMS$_FAB;
!
! Do most of the work
!
FIND_FILE_CLEANUP(.CONTEXT);
!
! Zero the context pointer
!
CONTEXT[0] = 0;
RETURN SS$_NORMAL
END;
END ELUDOM
