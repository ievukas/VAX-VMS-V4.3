 	.TITLE	SUMMBUFF - Multi-file Summary Buffer Routines
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************

;++
; FACILITY:  VAX/VMS MONITOR Utility
;
; ABSTRACT:
;
;	The routines in the SUMMBUFF module manipulate the multi-file
;	summary buffer for each class. This buffer is designed to
;	contain the accumulated sums of all counts and levels for
;	all elements for all input files.
;
; ENVIRONMENT:
;
;	User mode, IPL 0, unprivileged.
;
; AUTHOR: Thomas L. Cafarella, January, 1984
;
; MODIFIED BY:
;
;	V03-004	TLC1088		Thomas L. Cafarella	25-Jul-1984	14:00
;		Free virtual memory obtained for multi-file summary.
;
;	V03-003	TLC1071		Thomas L. Cafarella	17-Apr-1984	14:00
;		Add "number of input files" to multi-file summary report.
;
;	V03-002	TLC1074		Thomas L. Cafarella	04-May-1984	16:00
;		Correct XQPCACHE multi-file summary floating overflow.
;
;	V03-001	PRS1021		Paul R. Senn		12-Apr-1984	10:00
;		Make SYSTEM class work with multi-file summary.
;
;	V03-001	PRS1020		Paul R. Senn		12-Apr-1984	10:00
;		Make XQP class work with multi-file summary.
;
;	V03-001	TLC1061		Thomas L. Cafarella	18-Mar-1984	11:00
;		Identify dual-path disks by allocation class.
;
;	V03-001	TLC1060		Thomas L. Cafarella	12-Mar-1984	11:00
;		Make multi-file summary work for homogeneous classes.
;
;--

	.SBTTL	DECLARATIONS
	.PSECT	MONRODATA,QUAD,NOEXE,NOWRT
;
; INCLUDE FILES:
;

	$CDBDEF				; Define Class Descriptor Block
	$CDXDEF				; Define CDB Extension
	$CSBDEF				; Define Column Summary Block
	$IDBDEF				; Define item descriptor block offsets
	$MCADEF				; Define Monitor Communication Area
	$MRBDEF				; Define Monitor Request Block
	$MBPDEF				; Define Monitor Buffer Pointers
	$MFSDEF				; Define Multi-File Summary Block
	$TM2DEF				; Define temporary storage offsets
	$TM3DEF				; Define temporary storage offsets

;
; MACROS:
;

;
; Local Macro Definitions
;

;
; ALLOC Macro - Dynamically allocate space on the stack.
;

	.MACRO	ALLOC	LENGTH,RSLDESC,RSLBUF
	SUBL	#<LENGTH+3>&<^C3>,SP
	.IF	NB,RSLBUF
	MOVL	SP,RSLBUF
	.ENDC
	PUSHL	SP
	PUSHL	#LENGTH
	MOVL	SP,RSLDESC
	.ENDM	ALLOC

;
; EQUATED SYMBOLS:
;

ESC = 27				; escape character


;
; OWN STORAGE (Read-only):
;

;
; Multi-file summary line string, including cursor
; positioning and from/to times.
;

MF_SUMM1_STR::
	.BYTE	10$-5$
5$:	.BYTE	ESC,^A/Y/,3,32
	.ASCII	\MULTI-FILE SUMMARY\
	.BYTE	ESC,^A/Y/,6,14
	.ASCII	\Node:\
	.BYTE	ESC,^A/Y/,7,14
	.ASCII	\From:\
	.BYTE	ESC,^A/Y/,8,14
	.ASCII	\To:\
10$:

;
; Multi-file summary statistic heading string (in smaller box).
;

MF_STATHEAD_STR::
	.BYTE	10$-5$
5$:	.BYTE	ESC,^A/Y/,1,12
	.ASCII	\+-----+\
	.BYTE	ESC,^A/Y/,2,12
	.ASCII	\| AVE |\
	.BYTE	ESC,^A/Y/,3,12
	.ASCII	\+-----+\
10$:

;
; Multi-file summary nodename heading control string
;

MFS_NODE_STR::
	.BYTE	10$-5$
5$:	.BYTE	ESC,^A/Y/,6,26
	.ASCII	\!7<!AC!>!#<(!UL)!>\
7$:
	.BYTE	ESC,^A/Y/,6,45
	.ASCII	\!7<!AC!>!#<(!UL)!>\
	.BYTE	ESC,^A/Y/,6,64
	.ASCII	\!7<!AC!>!#<(!UL)!>\
	.BYTE	ESC,^A/Y/,6,83
	.ASCII	\!7<!AC!>!#<(!UL)!>\
	.BYTE	ESC,^A/Y/,6,102
	.ASCII	\!7<!AC!>!#<(!UL)!>\
10$:
MFS_NOD_SEGLEN == 7$-5$			    ; Length of one segment

;
; Multi-file summary begin/end heading control string
;

MFS_TIME_STR::
	.BYTE	10$-5$
5$:	.ASCII	\!19<!17%D!>\
7$:
	.ASCII	\!19<!17%D!>\
	.ASCII	\!19<!17%D!>\
	.ASCII	\!19<!17%D!>\
	.ASCII	\!19<!17%D!>\
10$:
MFS_TIM_SEGLEN == 7$-5$			    ; Length of one segment

;
; Multi-file summary statistics heading control string (1st)
;

MFS_STHEAD1_STR::
	.BYTE	10$-5$
5$:	.ASCII	\!6* Row\
	.ASCII	\!4* Row!2* \
	.ASCII	\!5* Row!2* \
	.ASCII	\!5* Row\
10$:

;
; Multi-file summary statistics heading control string (2nd)
;

MFS_STHEAD2_STR::
	.BYTE	10$-5$
5$:	.ASCII	\!6* Sum\
	.ASCII	\!2* Average\
	.ASCII	\!3* Minimum\
	.ASCII	\!3* Maximum\
10$:


DATA_STR:	.ASCID	\!10* !6UL.!2ZL\    ; Data substring for FAO ctrl str
DATA_STR1:	.ASCID	\ !6UL.!2ZL\   	    ; Data substring for 1st column
BLANK_STR:	.ASCID	\!19* \		    ; Blank substring for FAO ctrl str
BLANK_STR1:	.ASCID	\!10* \		    ; Blank substring for 1st column
STATS_STR:	.ASCID	\ !7UL.!1ZL !6UL.!1ZL !6UL.!2ZL !6UL.!2ZL\
					    ; Stats substring for FAO ctrl str


	.PSECT	MONDATA,QUAD,NOEXE

;
; OWN STORAGE (Writeable):
;

MFSUMSTR::				; FAO ctrl str segment to put one
	.BYTE	10$-5$			; ... line of data
5$:	.BLKB	127
10$:


	.SBTTL	FILL_MFSUM_FAOSTK - Fill FAOSTK for M.F. Summary
	.PSECT	$$MONCODE,NOWRT,EXE
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine is called to fill the FAOSTK with values
;	to be presented to FAOL for output of the current page for the current
;	class. The address of the CDB for the current class is passed
;	as the first parameter to this routine.
;	Rest is TBS.
;
; CALLING SEQUENCE:
;
;	CALLS #4,FILL_MFSUM_FAOSTK
;
; INPUTS:
;
;	 4(AP) - address of a pointer to the CDB (Class Descriptor Block)
;		 for the class to process.
;
;	 8(AP) - address of byte containing starting column number.
;
;	12(AP) - address of byte containing number of columns.
;
;	16(AP) - address of byte containing statistics indicator.
;		 If low-order bit = 0, no additional statistics are displayed.
;		 If low-order bit = 1, additional statistics are displayed.
;
; IMPLICIT INPUTS:
;
;	MRBPTR - pointer to MRB (Monitor Request Block)
;
;	MFSPTR - pointer to MFS (Multi-File Summary Block)
;
;	PERFTABLE - table describing each data item, indexed by
;			item number ( * entry size)
;
;	FAOSTK - buffer into which to store values for later FAOL call.
;
; OUTPUTS:
;
;	None.
;
; IMPLICIT OUTPUTS:
;
;	FAOSTK buffer is filled with arguments for an $FAOL call
;	to display one page of the multi-file summary report.
;
;	MFS$L_LWORDS set to number of longwords on FAOSTK for
;	each element.
;
; ROUTINE VALUE:
;
;	R0 = SS$_NORMAL
;
; SIDE EFFECTS:
;
;	None
;
; REGISTER USAGE:
;
;	R0 = address of item number
;	R1 = scratch, also input to CVTSTK subroutine
;	R2 = element index
;	R3 = current column number
;	R4 = address of data for current column in summary buffer
;	R5 = pointer to current longword in FAOSTK
;	R6 = address of CDB for class to display
;	R7 = address of Multi-File Summary Block (MFS)
;	R8 = address of temporary local data area
;	R9 = Number of elements to examine for this class
;	R10 = address of summary buffer for this class
;	R11 = scratch, in CVTSTK subroutine
;
;--



.ENTRY	FILL_MFSUM_FAOSTK, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	MOVL	@4(AP),R6		; Load CDB pointer

	ALLOC	TM2$K_SIZE,R0,R8	; Allocate local temp storage

	MOVL	MFSPTR,R0		; Get MFS pointer
	CLRL	MFS$L_LWORDS(R0)	; Clear count of longwords on FAOSTK
	MOVL	MFS$L_ELEMS(R0),TM2$L_ELEMS(R8) ; Get elements to display
	BNEQ	10$			; Br if have some
	BRW	FMF_RET			; Else go exit if none
10$:

	MOVZBL	@8(AP),TM2$L_START_COL(R8) ; Get starting column number
	DECL	TM2$L_START_COL(R8)	; ... and make it zero-origin
	MOVZBL	@12(AP),TM2$L_COLS(R8)	; Get number of columns to display

;
; Compute size of a column's worth of data in bytes
; (to be used later).
;

	MOVL	TM2$L_ELEMS(R8),R0	; Get # of lwords for a column (hetero)
	BBC	#CDB$V_HOMOG,CDB$L_FLAGS(R6),15$ ; Br if heterogeneous class
	MOVL	#MAXELTS_MFS,R0		; Get # of lwords for a column (homog)
15$:
	ADDL3	#2,R0,TM2$L_COL_SIZE(R8) ; Include secs & collection counters
	MULL2	#4,TM2$L_COL_SIZE(R8)	; ... translate to bytes

	MOVL	CDB$A_SUMBUF(R6),R10	; Load address of summary buffer


;
; For homogeneous classes, get summary buffer address;
; then determine item type
;


	BBC	#CDB$V_HOMOG,CDB$L_FLAGS(R6),20$ ; Br if not homog class
	MOVL	CDB$A_CDX(R6),R1	; Get CDX address
	MOVZBL	CDX$B_IDISCONSEC(R1),R0	; Get no. of curr display item
	DECL	R0			; Decrement to make it zero-origin
	MOVZBL	CDX$B_IDISCT(R1),R3	; Get number of items being displayed
	DIVL3	R3,CDB$L_SUMBUF(R6),R3	; Compute size of sumbuf for one item
					; Note -- cannot have zero items
	MULL2	R0,R3			; Compute distance to desired sumbuf
	MOVAB	(R10)[R3],R10		; Get summ buff ptr for homog class

;
; Now determine item type.
;

	MOVZBL	CDX$B_IDISINDEX(R1),R3	; Get item index for this disp event
	MOVZBL	@CDB$A_ITMSTR(R6)[R3],R0 ; Load IDB item number
	MULL2	#IDB$K_ILENGTH,R0	; Compute index into IDB table
	MOVAB	W^PERFTABLE[R0],R0	; Address of IDB for this item
	MOVW	IDB$W_TYPE(R0), -
		TM2$W_ITEM_TYPE(R8)	; Save item type for use below

20$:
	BSBW	ESTAB_FAOSTR		; Establish FAO ctrl substring
					; Note -- destroys all regs exc.
					; ... R6,R8,R10


;
; Loop once for each element in this class, processing the summary buffer.
; For each column, convert the "sum" number to an "average" by dividing
; by seconds or collections. Place the result in FAOSTK, as longword
; arguments for a subsequent call to $FAOL to display a single page of
; the multi-file summary report.
;

	MOVAL	FAOSTK,R5		; Load addr of buffer for FAO parms
	MOVL	MFSPTR,R7		; Get MFS pointer

	SUBL3	#1,TM2$L_ELEMS(R8),R9	; Get number of elts to examine (loop limit)
	BBC	#CDB$V_SYSCLS,CDB$L_FLAGS(R6),30$	; Br if not SYSTEM class
	MOVAL	ITMSTR_SYS_ALL,R0	; SYS/ALL itemstring is what we want
	BRB	35$			; skip past use of CDB itemstring
30$:
	MOVL	CDB$A_ITMSTR(R6),R0	; Address of item-number string
35$:
	CLRL	R2			; Clear element index register

FMF_ELEM:
	BBS	#CDB$V_HOMOG,CDB$L_FLAGS(R6),10$ ; Br if a homogeneous class
	MOVZBL	(R0)+,R1		; Get next item number
	MULL2	#IDB$K_ILENGTH,R1	; Compute index into IDB table
	MOVAB	W^PERFTABLE[R1],R11	; Address of IDB for this item
	MOVW	IDB$W_TYPE(R11), -
		TM2$W_ITEM_TYPE(R8)	; Save item type for use below
10$:
	TSTL	TM2$L_COLS(R8)		; Any columns to display ?
	BNEQ	20$			; Br if some
	BRW	70$			; Else skip loop for this element
20$:

	SUBL3	#1,TM2$L_START_COL(R8),R3 ; Get starting col. no. (0-origin)
					; ... and make it 1 less than that.
					; ... will regain 1 within loop
	MULL3	TM2$L_COL_SIZE(R8),R3,R1 ; Compute addr of data
	ADDL3	R1,R10,R4		; ... for starting column
	CLRL	TM2$L_COLS_USED(R8)	; Init counter of columns used
30$:
	INCL	R3			; Point to next column number
	ADDL2	TM2$L_COL_SIZE(R8),R4	; ... and data for next column

	MOVL	CSBVEC_PTR,R1		; Get ptr to CSB vector
	MOVL	(R1)[R3],R1		; ... and CSB for current column
	BBS	#CSB$V_IGNORE,CSB$B_FLAGS(R1),30$ ; Ignore column if instructed
	ADDL3	TM2$L_COL_SIZE(R8),R4,R1 ; Point to first byte after this column
	MOVL	-8(R1),TM2$L_SECONDS(R8) ; Get seconds
	MOVL	-4(R1),TM2$L_COLLS(R8)	; Get collection count
	BEQL	60$			; Br if zero collections
	BBS	#CDB$V_HOMOG,CDB$L_FLAGS(R6),35$ ; Br if a homogeneous class
	BBC	#IDB$V_PCNT,-		; Branch if this is not
		IDB$B_FLAGS(R11),35$	; a percent type computed item
	BSBW	COMPUTED_ITEM_AVE	; get average for computed item
	BRB	50$			; and continue (R1 now contains average)
35$:
	MOVL	(R4)[R2],R1		; Get floating sum of interest
	CMPW	TM2$W_ITEM_TYPE(R8),#COUNT_TYPE	; This item a count?
	BNEQ	40$			; No -- assume level type
	DIVF	TM2$L_SECONDS(R8),R1	; Yes -- get floating avg rate/second
	BRB	50$			; ... and continue

40$:
	DIVF	TM2$L_COLLS(R8),R1	; Compute floating avg size/collection
50$:
	BSB	CVTSTK			; Convert and stack this number (in R1)
	BSBW	UPD_STATS		; Update MIN, MAX and TOT
60$:
	AOBLSS	TM2$L_COLS(R8), -
		TM2$L_COLS_USED(R8),30$	; ... and go back to get next column
70$:
	BBC	#0,@16(AP),80$		; Skip stacking stats if not requested
	BSBW	STACK_STATS		; Convert & stack all 4 stats
80$:
	BBS	#CDB$V_HOMOG,CDB$L_FLAGS(R6),85$ ; Br if a homogeneous class
	BBC	#IDB$V_PCNT,-		; Branch if this is not
		IDB$B_FLAGS(R11),85$	; a percent type computed item
	INCL	R0			; increment index into item table
	INCL	R2			; increment index into data buffer
85$:
	ACBL	R9,#1,R2,FMF_ELEM	; Loop once for each element

FMF_RET:
	MOVL	#SS$_NORMAL,R0		; Indicate success
	RET				; ... and return

;
;
; COMPUTED_ITEM_AVE - Do average computation for computed item
;	R2 = element index
;	R4 = address of data for current column in summary buffer
;	R1 (output) - calculated average
;	R10-R11	scratch (saved on stack)
;

COMPUTED_ITEM_AVE:

	PUSHL	R10			; save R10
	PUSHL	R11			; save R11
	CLRL	R1			; assume zero average
	MULF3	4(R4)[R2],-		; sum for item1 *100 into R10
		#100, R10		;
	MOVF	8(R4)[R2],R11		; item2 into R11
	TSTF	R11			; is R11 0?
	BEQL	10$			; skip divide if so
	DIVF3	R11,R10,R1		; result of divide into R1
10$:			
	POPL	R11			; restore registers
	POPL	R10
	RSB				; exit
;
; CVTSTK - Convert floating longword input value to two longword
;		integer values representing the whole and fractional
;		parts. Also, place both integer longwords into the
;		next available slots in the FAOSTK.
;
; CVTSTK10 is an alternate entry point which stacks a fractional
;		part which is in tenths instead of the usual hundredths.
;
;
;		R1  = input floating value to convert and stack
;		R5  = address of next available longword in FAOSTK
;		R11 = scratch (saved on stack)
;

CVTSTK:
	PUSHL	R11			; save R11 so we can use it as scratch
	CVTFL	R1,(R5)+		; Stack whole part for fao
	CVTLF	-4(R5),R11		; Get back truncated part
	SUBF3	R11,R1,R11		; Compute fraction to two ...
	MULF2	#100,R11		; ... digits for tabular display
	CVTFL	R11,(R5)+		; Stack fraction for fao
	POPL	R11			; Restore R11 
	RSB

CVTSTK10:
	PUSHL	R11			; save R11 so we can use it as scratch
	CVTFL	R1,(R5)+		; Stack whole part for fao
	CVTLF	-4(R5),R11		; Get back truncated part
	SUBF3	R11,R1,R11		; Compute fraction to one ...
	MULF2	#10,R11			; ... digit for tabular display
	CVTFL	R11,(R5)+		; Stack fraction for fao
	POPL	R11			; Restore R11 
	RSB

;
; UPD_STATS - Update the MIN, MAX, and TOT longwords for this element.
;
;		R1  = input floating value to update 3 stats with.
;		R2  = current element number (0-origin)
;		R7  = MFS pointer
;		R8  = scratch (saved on stack)
;		R9  = scratch (saved on stack)
;

UPD_STATS:

	PUSHR	#^M<R8,R9>		; Save regs
	DIVL3	#3,MFS$L_STATSBUF(R7),R9 ; Get length of one buffer
	MOVL	MFS$A_STATSBUF(R7),R8	; Get ptr to first buff (TOT)

	ADDF2	R1,(R8)[R2]		; Update TOT for this element

	ADDL2	R9,R8			; Compute addr of MIN buffer
	CMPF	R1,(R8)[R2]		; Check minimum
	BGEQ	10$			; Branch if not less
	MOVF	R1,(R8)[R2]		; Else insert new minimum
10$:
	ADDL2	R9,R8			; Compute addr of MAX buffer
	CMPF	R1,(R8)[R2]		; Check maximum
	BLEQ	20$			; Branch if not more
	MOVF	R1,(R8)[R2]		; Else insert new maximum
20$:
	POPR	#^M<R8,R9>		; Restore regs
	RSB				; Return


;
; STACK_STATS - Convert and stack each of the four statistics
;		(TOT, AVE, MIN, MAX) for the current element.
;
;		R1 = input to CVTSTK (altered by this routine)
;		R2  = current element number (0-origin)
;		R5  = address of next available longword in FAOSTK
;		R7  = MFS pointer
;		R8 - R10 = scratch (saved on stack)
;

STACK_STATS:

	PUSHR	#^M<R8,R9,R10>		; Save regs
	MOVZBL	MFS$B_DATA_COLS(R7),R10	; Get # of cols with actual data
	DIVL3	#3,MFS$L_STATSBUF(R7),R9 ; Get length of one buffer
	MOVL	MFS$A_STATSBUF(R7),R8	; Get ptr to 1st buff (TOT)

	MOVL	(R8)[R2],R1		; Get TOT value for this element
	BSB	CVTSTK10		; Convert and stack it (in tenths)

	CVTLF	R10,R10			; Get flt. # of cols with actual data
	BNEQ	10$			; Br if have some
	CLRL	R1			; No data columns -- just stack 0
	BRB	20$			; Go do it
10$:
	DIVF2	R10,R1			; Compute AVE value for this element
20$:
	BSB	CVTSTK10		; Convert and stack AVE value (tenths)

	ADDL2	R9,R8			; Compute addr of MIN buffer
	MOVL	(R8)[R2],R1		; Get MIN value for this element
	BSBW	CVTSTK			; Convert and stack it

	ADDL2	R9,R8			; Compute addr of MAX buffer
	MOVL	(R8)[R2],R1		; Get MAX value for this element
	BSBW	CVTSTK			; Convert and stack it

	POPR	#^M<R8,R9,R10>		; Restore regs
	RSB				; Return

;
; ESTAB_FAOSTR - Establish the MFSUMSTR counted string, which is the
;		 substring to be used by the TEMPLATE routine to build
;		 an FAO control string to display one line of data.
;		 Also, compute MFS$L_LWORDS for later use by DISPLAY_HOMOG
;		 routine (for homog classes). It is the number of longwords
;		 which will be put on the FAOSTK by FILL_MFSUM_FAOSTK for
;		 each element.
;
;	Upon input,
;
;		R0 - R5,R7,R9,R11 = scratch, destroyed by this subroutine
;		R6  = CDB pointer
;		R8  = temporary data area pointer
;		R10 = SUMM BUFF pointer
;

ESTAB_FAOSTR:

	MOVAB	MFSUMSTR+1,R3		; Get addr of MFSUMSTR string
	TSTL	TM2$L_COLS(R8)		; Any columns to display ?
	BEQL	60$			; Br if none
	SUBL3	#1,TM2$L_START_COL(R8),R7 ; Get starting col. no. (0-origin)
					; ... and make it 1 less than that.
					; ... will regain 1 within loop
	MULL3	TM2$L_COL_SIZE(R8),R7,R1 ; Compute addr of data
	ADDL3	R1,R10,R9		; ... for starting column
	CLRL	R11			; Init counter of columns used
10$:
	INCL	R7			; Get column number
	ADDL2	TM2$L_COL_SIZE(R8),R9	; Point to data for this column

	MOVL	@CSBVEC_PTR[R7],R1	; ... and CSB for this column
	BBS	#CSB$V_IGNORE,CSB$B_FLAGS(R1),10$ ; Ignore column if instructed
	ADDL3	TM2$L_COL_SIZE(R8),R9,R1 ; Point to first byte after this column
	TSTL	-4(R1)			; Any collections?
	BEQL	30$			; Br if no
	MOVL	MFSPTR,R0		; Get MFS pointer
	INCB	MFS$B_DATA_COLS(R0)	; Count this column with data in it
	ADDL2	#2,MFS$L_LWORDS(R0)	; Count longwords to be added to FAOSTK
	TSTL	R11			; First column ?
	BEQL	20$			; Yes -- br to move a special string
	MOVC3	DATA_STR,DATA_STR+8,(R3) ; Move data substring into ctrl str
	BRB	50$			; ... and go loop
20$:
	MOVC3	DATA_STR1,DATA_STR1+8,(R3) ; Move special data substring
	BRB	50$			; ... and go loop
30$:
	TSTL	R11			; First Column ?
	BEQL	40$			; Yes -- br to move a special string
	MOVC3	BLANK_STR,BLANK_STR+8,(R3) ; Move blank substring into ctrl str
	BRB	50$			; ... and go loop
40$:
	MOVC3	BLANK_STR1,BLANK_STR1+8,(R3) ; Move special blank substring
50$:
	AOBLSS	TM2$L_COLS(R8),R11,10$	; ... and go back to get next column


60$:
	BBC	#0,@16(AP),70$		; Skip if stats not requested

	MOVL	MFSPTR,R0		; Get MFS pointer
	ADDL2	#8,MFS$L_LWORDS(R0)	; Count longwords to be added to FAOSTK
	MOVC3	STATS_STR,STATS_STR+8,(R3) ; Move stats substring into ctrl str
70$:
	MOVAB	MFSUMSTR+1,R0		; Get addr of MFSUMSTR string
	SUBL3	R0,R3,R0		; Compute actual length of string
	MOVB	R0,MFSUMSTR		; ... and store in cstring
	RSB				; Return

	.SBTTL	CAPTURE_SUMS - Move SUM buffers to Summary Buffer

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine updates the multi-file summary buffer with
;	the contribution of the current class from the current
;	input file. Each sum in the SUM buffer is converted to
;	floating-point, and either added or moved to the m.f.
;	summary buffer. Also, the number of seconds for the current
;	class and file, as well as the number of collections,
;	are also converted and moved (or added).  For the SYSTEM class, 
;	a SUM buff for SYS/ALL is constructed "on the fly".
;
;
; CALLING SEQUENCE:
;
;	CALLS	#2,CAPTURE_SUMS
;
; INPUTS:
;
;	 4(AP) - address of a pointer to the CDB (Class Descriptor Block)
;		 for the class to process.
;
;	 8(AP) - address of byte containing column number (1-origin).
;
; IMPLICIT INPUTS:
;
;	MRBPTR - pointer to MRB (Monitor Request Block)
;
;	MCAPTR - pointer to MCA (Monitor Communication Area)
;
; OUTPUTS:
;
;	None
;
; IMPLICIT OUTPUTS:
;
;	The multi-file summary buffer is updated to reflect the inclusion
;	of SUM data for the current class and input file.
;
; ROUTINE VALUE:
;
;	R0 = SS$_NORMAL, or failing MONITOR status
;
; SIDE EFFECTS:
;
;	None
;
; REGISTER USAGE:
;
;	R0 = scratch
;	R1 = scratch, also floating seconds
;	R2 = floating collection count
;	R3 = address of current element in summary buffer
;	R4 = scratch, no. of elements in this class
;	R5 = scratch, also address of SUM buffer for this input file
;	R6 = address of CDB for this class
;	R7 = address of MRB
;
;--

.ENTRY	CAPTURE_SUMS, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10> 

	MOVL	@4(AP),R6		; Get ptr to CDB
	MOVL	MRBPTR,R7		; Get ptr to MRB


;
; Compute the number of floating seconds and the number of 
; floating collections covered by the current input file,
; and save for use below.
;

	MOVL	MRB$Q_ENDING+4(R7),R1 ; Get high order bits of time
	SUBL3	MRB$Q_BEGINNING(R7),MRB$Q_ENDING(R7),R0 ; Compute elapsed time since start
	SBWC	MRB$Q_BEGINNING+4(R7),R1 ; Get high order difference
	EDIV	#10000,R0,R0,R1		; Turn time into milliseconds
	CVTLF	R0,R0			; Floating milliseconds
	DIVF3	#1000,R0,R1		; Save floating seconds for later use

	MOVL	MCAPTR,R0		; Get ptr to MCA
	SUBL3	#1,MCA$L_COLLCNT(R0),R2	; No. of collections, don't count 1st
	CVTLF	R2,R2			; Convert to floating for later use

;
; Compute the starting address of
; the portion of the output m.f. summary buffer for this column
; (a column represents a column of data on the report page --
; it can be the data for a single file, or, if BY_NODE was
; requested, for a single node).
;

	MOVL	CDB$A_SUMBUF(R6),R3	; Get beginning of m.f. summary buffer
	MOVZBL	@8(AP),R4		; Get column number
	DECL	R4			; Make it 0-origin
	BEQL	20$			; Skip calcs if column 1
	MOVL	#<4*<MAXELTS_MFS+2>>,R5	; Compute no. of bytes for this column
	BBS	#CDB$V_HOMOG,CDB$L_FLAGS(R6),10$ ; Br if a homog class
	BBC	#CDB$V_SYSCLS,CDB$L_FLAGS(R6),7$ 	; Br if not SYSTEM class
	MOVL	#<ECOUNT_SYS_ALL+2>,R5  ; SYSTEM class item count
	MULL2	#4,R5
	BRB	10$
7$:
	ADDL3	#2,CDB$L_ECOUNT(R6),R5	; Re-compute for hetero
	MULL2	#4,R5			; ....
10$:
	MULL2	R4,R5			; No. of bytes to skip past
	MOVAB	(R3)[R5],R3		; Compute start address of column
20$:
	BBC	#CDB$V_HOMOG,CDB$L_FLAGS(R6),30$ ; Br if a heterogeneous class

;
; For homogeneous classes, call special routine
; to fill summary buffer.
;

	PUSHL	R2			; Stack floating collections
	PUSHL	R1			; Stack floating seconds
	PUSHL	R3			; Stack start address of column
	PUSHL	R6			; Stack CDB address
	CALLS	#4,FILL_HOM_SUMMBUFF	; Fill summary buffer for homog class
	BRW	CS_RET			; Go return with status

;
; Fill summary buffer for heterogeneous class
;

30$:
	BBC	#CDB$V_SYSCLS,CDB$L_FLAGS(R6),70$ 	; Br if not SYSTEM class
	MOVL	#<CDB$K_SIZE*MODES_CLSNO>,R8 ; Compute offset to MODES CDB
	MOVAB	CDBHEAD[R8],R8		; ... get its CDB address
	MOVL	CDB$A_BUFFERS(R8),R9	; ... and MBP ptr 
	MOVL	MBP$A_SUM(R9),R9	; ...point to SUM buff for MODE
	MOVL	CDB$A_BUFFERS(R6),R5	; Get addr of SYSTEM class buffers
	ADDL3	#8,MBP$A_SUM(R5),R5	; Get SYSTEM SUM buff ptr (skips 2 itemS)
;
; Now loop once for each element, moving or adding data from
; the MODES and SYSTEM SUM buffer to the m.f. summary buffer.
;
	BBS	#MRB$V_BY_NODE,MRB$W_FLAGS(R7),50$ ; Go do a sum if by node
40$:
	MOVL	#7,R4			; Get no. of elements for MODES CLASS
45$:
	CVTLF	(R9)+,(R3)+		; Fill summary buffer for this element with MODES info
	SOBGTR	R4,45$			; Loop to pick up all MODES items

	MOVL	#<ECOUNT_SYS_ALL-7>,R4	; no. of items to pick up from SYSTEM class itemstring 
47$:
	CVTLF	(R5)+,(R3)+		; Fill summary buffer for this element with SYSTEM info
	SOBGTR	R4,47$			; Loop to pick up all SYSTEM items

	MOVL	R1,(R3)+		; Also move in floating seconds
	MOVL	R2,(R3)			; ... and collection count
	BRB	CS_NORMAL		; ... and go return

50$:					; BY_NODE logic for SYSTEM class
	MOVL	#7,R4			; Get no. of elements for this class
55$:
	CVTLF	(R9)+,R0		; Augment summary buff for this element 
	ADDF2	R0,(R3)+		; ... with this file's contribution from MODES class
	SOBGTR	R4,55$			; Loop to do entire column

	MOVL	#<ECOUNT_SYS_ALL-7>,R4	; no. of items to pick up from SYSTEM class itemstring 
57$:
	CVTLF	(R5)+,R0		; Augment summary buff for this element 
	ADDF2	R0,(R3)+		; ... with this file's contribution from SYSTEM class
	SOBGTR	R4,57$			; Loop to pick up all SYSTEM items

	BRW	95$			; skip to end
;
; Fill summary buff for Heterogeneous classes other than SYSTEM
; 
70$:
	MOVL	CDB$A_BUFFERS(R6),R5	; Get addr of SUM buffer
	MOVL	MBP$A_SUM(R5),R5	; ... for this input file

;
; Now loop once for each element, moving or adding data from
; the SUM buffer to the m.f. summary buffer.
;

	
	MOVL	CDB$L_ECOUNT(R6),R4	; Get no. of elements for this class
	BBS	#MRB$V_BY_NODE,MRB$W_FLAGS(R7),90$ ; Go do a sum if by node
80$:
	CVTLF	(R5)+,(R3)+		; Fill summary buffer for this element
	SOBGTR	R4,80$			; Loop to do entire column

	MOVL	R1,(R3)+		; Also move in floating seconds
	MOVL	R2,(R3)			; ... and collection count
	BRB	CS_NORMAL		; ... and go return
90$:
	CVTLF	(R5)+,R0		; Augment summary buff for this element
	ADDF2	R0,(R3)+		; ... with this file's contribution
	SOBGTR	R4,90$			; Loop to do entire column

95$:
	ADDF2	R1,(R3)+		; Also add in floating seconds
	ADDF2	R2,(R3)			; ... and collection count

CS_NORMAL:
	MOVL	#SS$_NORMAL,R0		; Indicate success
CS_RET:
	RET				; ... and return to caller


	.SBTTL	FILL_HOM_SUMMBUFF - Move SUM buffers to Summary Buffer (Homog)

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	Augment multi-file summary buffer for the current (homogeneous)
;	class from the current SUM buffer. Do it for all elements and items.
;
; CALLING SEQUENCE:
;
;	CALLS	#4,FILL_HOM_SUMMBUFF
;
; INPUTS:
;
;	 4(AP) - pointer to the CDB (Class Descriptor Block)
;		 for the class to process.
;
;	 8(AP) - address of the first byte of the portion of
;		 the summary buffer for the requested column
;		 for the first item.
;
;	 12(AP) - floating number of seconds for this input file.
;
;	 16(AP) - floating number of collections for this input file.
;
; IMPLICIT INPUTS:
;
;
; OUTPUTS:
;
;	None
;
; IMPLICIT OUTPUTS:
;
;	CDX$L_DCOUNT -- Count of elements in Super Element ID Table.
;			Updated to include any new elements from
;			current input file.
;
; ROUTINE VALUE:
;
;	R0 = SS$_NORMAL, or failing MONITOR status
;
; SIDE EFFECTS:
;
;	None
;
; REGISTER USAGE:
;
;	R0-R3 = scratch
;	R4 = super element ID table index
;	R5 = super element ID table size (in longwords)
;	R6 = address of CDB for this class
;	R7 = address of CDX for this class
;	R8 = address of current element in element ID table
;	R9 = address of TM3 temp area
;	R10 = length of super element ID
;	R11 = address of current element in super element ID table
;
;--

.ENTRY	FILL_HOM_SUMMBUFF, ^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	MOVL	4(AP),R6		; Get ptr to CDB
	MOVL	CDB$A_CDX(R6),R7	; Load CDX addr
	ALLOC	TM3$K_SIZE,R0,R9	; Allocate local temp storage
	MOVZBL	CDX$B_ELIDLEN(R7),R10	; Get length of an element ID


;
; Loop through all elements in the element ID table. There is one element
; in the table for each element in the SUM buffer (there are CDB$L_ECOUNT
; elements in the table). For each element, try to find a match in the
; super element ID table. There is one element in this table for each
; element in the m.f. summary buffer. The super ID table contains a
; number of elements (CDB$L_DCOUNT) which is the accumulation of
; distinct elements from all input files for this multi-file
; summary request. On the first time through this routine, the
; table will be empty.
;

	MOVL	CDX$A_ELIDTABLE(R7),R8	; Load input Element ID Table addr
	CLRL	TM3$L_INPIDX(R9)	; Clear input elidtable index
10$:
	MOVL	CDX$A_SELIDTABLE(R7),R11 ; Load Super Element ID Table addr
	CLRB	TM3$B_FOUND(R9)		; Clear "element found" indicator
	CLRL	R4			; Clear Super Element ID Table index
	MOVL	CDX$L_DCOUNT(R7),R5	; Load no. of elements in Super ID table
	BEQL	40$			; Br if table is empty
	MOVL	R10,R7			; Borrow R7 to hold elt id length
	BBC	#CDB$V_DISKAC, -	; Branch if no allocation class in name
		CDB$L_FLAGS(R6),20$	; ...
	BBC	#CDB$V_DISKVN, -	; Branch if no volume name in disk name
		CDB$L_FLAGS(R6),15$	; ...
	SUBL2	#12,R7			; Shorten length for compare so
					; ... volume name will not be compared
15$:
	TSTB	(R8)			; Allocation class zero ?
	BEQL	20$			; Br if so
	SUBL2	#8,R7			; Shorten length for compare so
					; ... node name will not be compared
20$:
	CMPC3	R7,(R8),(R11)		; Match current element in table ?
	BNEQU	30$			; Br if not
	MOVB	#1,TM3$B_FOUND(R9)	; Yes -- indicate so
	BRB	40$			; ... and terminate loop
30$:
	ADDL2	R10,R11			; Point to next Super Element ID
	AOBLSS	R5,R4,20$		; Loop through Super Element ID Table

;
; At this point the entire Super Element ID Table has been scanned for a 
; match to the current element in the Element ID Table.
;

40$:
	MOVL	CDB$A_CDX(R6),R7	; Re-load CDX addr
	MOVL	R4,TM3$L_SUPIDX(R9)	; Save index for Super Table element
	BLBS	TM3$B_FOUND(R9),70$	; Branch if element found in table
;
; Element in input Element ID Table was NOT found in Super Element ID Table.
;


	BSBB	CHECK_TAB_SPACE		; Check if table space exhausted
	BLBC	R0,FHSB_RET		; If so, go exit with error


;
; Add a new element to the Super Element ID Table.
;

	INCL	CDX$L_DCOUNT(R7)	; Count the new element
	MULL2	R10,R4			; Compute offset to new table entry
	MOVC3	R10,(R8),@CDX$A_SELIDTABLE(R7)[R4]
					; Move new element ID into the table
					; NOTE -- R0-R5 destroyed

;
; Move entry for each item (for this element)
; from SUM buffer to M.F. Summary Buffer.
;

70$:

	BSBB	SUM_TO_SUMMBUFF		; Augment summary buff from SUM buff
					; NOTE -- destroys regs R0-R5, R11

	ADDL2	R10,R8			; Point to next input element

	AOBLSS	CDB$L_ECOUNT(R6), -	; Loop once for each input element
		TM3$L_INPIDX(R9),10$

	MOVL	#SS$_NORMAL,R0		; Indicate success

FHSB_RET:
	RET				; ... and return to caller


CHECK_TAB_SPACE:

	MOVL	#SS$_NORMAL,R0		; Assume normal status
	CMPL	#MAXELTS_MFS,R4		; Have we run out of table space?
	BGTR	10$			; Br if not
	PUSHL	#MNR$_TABLEFULL		; Stack MONITOR failing status code
	CALLS	#1,MON_ERR		; Log the error
	MOVL	#MNR$_TABLEFULL,R0	; Get status to caller
10$:
	RSB				; Return to caller

	.SBTTL	SUM_TO_SUMMBUFF - Move SUM buffer to Summary Buffer

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This subroutine augments the multi-file summary buffer for
;	the current (homogeneous) class with information from the
;	SUM buffer for a single element.
;
; CALLING SEQUENCE:
;
;	BSBW	SUM_TO_SUMMBUFF
;
; INPUTS:
;
;	R0-R5 and R11 = scratch
;	R6 = address of CDB for current class
;	R7 = address of CDX for current class
;	R9 = address of TM3 (local temporary storage block)
;
; IMPLICIT INPUTS:
;
;	TM3$L_INPIDX = index of desired element in SUM buffer
;	TM3$L_SUPIDX = index of desired element in Summary Buffer
;	See INPUTs for routine which calls this one (FILL_HOM_SUMMBUFF).
;
; OUTPUTS:
;
;	None
;
; IMPLICIT OUTPUTS:
;
;	The M.F. Summary Buffer is augmented for the current element of
;	the current (homogeneous class).
;
; ROUTINE VALUE:
;
;	None
;
; SIDE EFFECTS:
;
;	None
;
; REGISTER USAGE:
;
;	R0 = scratch
;	R1 = address of destination longword for seconds
;	R2 = index into input SUM buffer for this element
;	R3 = index into output summary buffer for this element
;	R4 = address of destination longword
;	R5 = address of source longword
;	R6 = address of CDB for this class
;	R7 = address of CDX for this class
;	R8 = unused
;	R9 = address of TM3 temp area
;	R10 = unused
;	R11 = item index
;
;--

SUM_TO_SUMMBUFF:

	MOVL	8(AP),TM3$A_SBCOL(R9)	; Get addr of portion of summary
					; ... buffer for this column
	MOVL	TM3$L_INPIDX(R9),R2	; Get SUM buffer index
	MOVL	TM3$L_SUPIDX(R9),R3	; Get summary buffer index
	MOVZBL	CDX$B_IDISCT(R7), -	; Get # of items to do
		TM3$L_ITEMS(R9) 	;
	DIVL3	TM3$L_ITEMS(R9), -	; Compute len of summary buff for 1 item
		CDB$L_SUMBUF(R6),TM3$L_SBLEN(R9)
	CLRL	R11			; Clear item index
10$:
	MOVAL	@TM3$A_SBCOL(R9)[R3],R4	; Compute addr of destination longword
	MOVL	@CDB$A_BUFFERS(R6)[R11],R0 ; Get addr of MBP for this item
	MOVAL	@MBP$A_SUM(R0)[R2],R5	; Compute addr of source longword
	MOVL	MRBPTR,R0		; Get MRB ptr
	BBS	#MRB$V_BY_NODE,MRB$W_FLAGS(R0),20$ ; Go do a sum if by node
	CVTLF	(R5),(R4)		; Move SUM element to summary buffer
	BRB	30$			; Go check seconds and colls
20$:
	CVTLF	(R5),R0			; Convert SUM element to floating
	ADDF2	R0,(R4)			; ... and add into summary buffer
30$:
	TSTL	R2			; Is this the first SUM buffer element?
	BNEQ	50$			; No -- skip secs and colls processing
	ADDL3	#<4*MAXELTS_MFS>, -	; Yes -- Get ptr to destination for secs
		TM3$A_SBCOL(R9),R1
	MOVL	MRBPTR,R0		; Re-load MRB ptr
	BBS	#MRB$V_BY_NODE,MRB$W_FLAGS(R0),40$ ; Go do a sum if by node
	MOVL	12(AP),(R1)		; Get seconds into summary buffer
	MOVL	16(AP),4(R1)		; Get collections into summary buffer
	BRB	50$			; Go process next item
40$:
	ADDF2	12(AP),(R1)		; Add in seconds
	ADDF2	16(AP),4(R1)		; ... and collections
50$:
	ADDL2	TM3$L_SBLEN(R9), -	; Point to this column's summary
		TM3$A_SBCOL(R9)		; ... buffer for next item

	AOBLSS	TM3$L_ITEMS(R9),R11,10$	; Loop to process next requested item

	RSB				; Return to caller

	.SBTTL	ALLOC_SUMBUFS - Allocate Summary Buffers
;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine is called to allocate and clear to zeroes
;	the entire Multi-file Summary Buffer for each requested class.
;	In addition, if the class is homogeneous, allocate the
;	Super Element ID Table.
;
; CALLING SEQUENCE:
;
;	CALLS #1,ALLOC_SUMBUFS
;
; INPUTS:
;
;	4(AP)	- address of MRB$O_CLASSBITS, the octaword
;		  bit string representing classes needing service.
;
; IMPLICIT INPUTS:
;
;	None
;
; OUTPUTS:
;
;	None
;
; IMPLICIT OUTPUTS:
;
;	Multi-file Summary Buffer for each requested class
;	(represented by CDB$L_SUMBUF and CDB$A_SUMBUF) allocated
;	and cleared to zeroes. If homogeneous, super element ID
;	table (represented by CDX$L_SELIDTABLE and CDX$A_SELIDTABLE)
;	allocated.
;
;
; ROUTINE VALUE:
;
;	R0 = SS$_NORMAL, or failing status code from LIB$GET_VM.
;
; SIDE EFFECTS:
;
;	None
;
;--


.ENTRY	ALLOC_SUMBUFS,	^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>


	CLRL	R7			; Init starting bit position
20$:
	MOVL	#32,R9			; Init bit field size
					; NOTE -- must handle in 32-bit chunks
	MOVL	R7,R8			; Init start position of next chunk
30$:
	FFS	R8,R9,@4(AP),R10	; Search for next class number
					; R10 contains class no. if found
	BEQL	40$			; Branch if none found this chunk

	BSBB	AS_BUFF			; Alloc buffers for this class
	BLBC	R0,AS_ERR		; Go return if error

	ADDL2	R8,R9			; Compute next starting
	ADDL3	#1,R10,R8		; ... position and field size
	SUBL2	R8,R9			; ... for this chunk
	BRB	30$			; Go search rest of chunk
40$:
	ACBW	#MAX_CLASS_NO,#32,R7,20$ ; Loop to process next chunk

	MOVL	#SS$_NORMAL,R0		; Set normal status
AS_ERR:
	RET				; Return with status in R0


AS_BUFF:				; Allocate buffers for this class
					; NOTE -- R10 contains class number
					; Regs R0 thru R6 are scratch
					; Regs R7 thru R10 must not be changed

	MULL3	#CDB$K_SIZE,R10,R6	; Compute offset to desired CDB
	MOVAB	CDBHEAD[R6],R6		; Index to CDB address

	TSTL	CDB$A_SUMBUF(R6)	; Do we have summary buffer yet?
	BEQLU	10$			; If not, go get it
	BRW	60$			; Otherwise, exit

;
; Compute size of summary buffer and issue call to LIB$GET_VM
; to get the space.
;

10$:
	BBC	#CDB$V_SYSCLS,CDB$L_FLAGS(R6),15$ ; Br if not SYSTEM class
	MOVL	#<ECOUNT_SYS_ALL+2>,R0	; Get special ECOUNT
	BRB	20$			; ... and continue
15$:
	ADDL3	#2,CDB$L_ECOUNT(R6),R0	; Compute size of summ buff for 1 col.
	BBC	#CDB$V_HOMOG,CDB$L_FLAGS(R6),20$ ; Br if a hetero class
	MOVL	CDB$A_CDX(R6),R1	; Get CDX address
	MOVZBL	CDX$B_IDISCT(R1),R1	; Get number of items
	MULL3	#<MAXELTS_MFS+2>,R1,R0	; Compute size for homog class
20$:
	MULL2	#4,R0			; Translate lwords to bytes
	MOVL	MFSPTR,R1		; Get MFS ptr
	MOVZBL	MFS$B_COLUMNS(R1),R1	; Get number of columns
	MULL3	R0,R1,CDB$L_SUMBUF(R6)	; Compute size of entire summary buffer

	PUSHAL	CDB$A_SUMBUF(R6)	; Push addr of longword to hold
					; ... summary buffer pointer
	PUSHAL	CDB$L_SUMBUF(R6)	; Push addr of # of bytes needed
	CALLS	#2,G^LIB$GET_VM		; Allocate buffers
	BLBC	R0,70$			; Leave if error

;
; Now get space for the Super Element ID Table for homog class
; and initialize CDX$L_DCOUNT, which is used to hold the size of the table.
;

	BBC	#CDB$V_HOMOG,CDB$L_FLAGS(R6),30$ ; Br if a hetero class

	MOVL	CDB$A_CDX(R6),R0	; Get CDX address
	CLRL	CDX$L_DCOUNT(R0)	; Clear no. of elts in the S ID Tab
	MOVZBL	CDX$B_ELIDLEN(R0),R1	; Get length of an element ID
	MULL3	#MAXELTS_MFS,R1, -
		CDX$L_SELIDTABLE(R0)	; Compute length of Sup Elt ID Table

	PUSHAL	CDX$A_SELIDTABLE(R0)	; Push addr of lword to hold table ptr
	PUSHAL	CDX$L_SELIDTABLE(R0)	; Push addr of # of bytes needed
	CALLS	#2,G^LIB$GET_VM		; Allocate table
	BLBC	R0,70$			; Leave if error

;
; Clear the entire summary buffer for this class to zeroes.
;

30$:
	MOVL	CDB$A_SUMBUF(R6),R11	; Load address of summary buffer
	MOVL	CDB$L_SUMBUF(R6),R6	; Load size of buffer
40$:
	CMPL	#32000,R6		; Is a large MOVC5 required?
	BGEQ	50$			; No -- go do a smaller one
	MOVC5	#0,.,#0,#32000,(R11)	; Yes -- clear 32000 bytes
	SUBL2	#32000,R6		; Calc bytes left to clear
	ADDL2	#32000,R11		; ... and starting byte addr
	BRB	40$			; Go check size of next move
50$:
	MOVC5	#0,.,#0,R6,(R11)	; Zero out SUMBUF for this class
60$:
	MOVL	#SS$_NORMAL,R0		; Success status
70$:
	RSB				; Return with status in R0

	.SBTTL	MFS_FREE_MEM - Free Virtual Memory for m.f.s.

;++
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine issues calls to LIB$FREE_VM to free up virtual
;	memory acquired by classes for multi-file summary buffers and
;	(for homogeneous classes) super element ID tables. No status
;	code checking is done, since this routine is in a cleanup path.
;
; INPUTS:
;
;	None
;
; IMPLICIT INPUTS:
;
;	The CDB$L_SUMBUF, CDB$A_SUMBUF, CDX$L_SELIDTABLE and CDX$A_SELIDTABLE
;	fields contain the length and address, respectively, of memory
;	blocks to be freed (for each class in this MONITOR request).
;
;	MFSPTR  -  pointer to Multi-File Summary Block
;
; OUTPUTS:
;
;	None
;
; IMPLICIT OUTPUTS:
;
;	Memory is freed. Pointers to freed memory are cleared to 0.
;
; ROUTINE VALUE:
;
;	NORMAL
;
; SIDE EFFECTS:
;
;	None
;
;--

.ENTRY	MFS_FREE_MEM, ^M<R2,R3,R4,R5,R6,R7,R8>

	MOVL	MFSPTR,R7		; Load MFS pointer
	CLRL	R5			; Init starting bit position
20$:
	MOVL	#32,R3			; Init bit field size
					; NOTE -- must handle in 32-bit chunks
	MOVL	R5,R2			; Init start position of next chunk
30$:
	FFS	R2,R3,MFS$O_CLASSBITS(R7),R4 ; Search for next class number
					; R4 contains class no. if found
	BEQL	40$			; Branch if none found this chunk
	BSBB	FREE_CLASS		; Free memory for this class
	ADDL2	R2,R3			; Compute next starting
	ADDL3	#1,R4,R2		; ... position and field size
	SUBL2	R2,R3			; ... for this chunk
	BRB	30$			; Go search rest of chunk
40$:
	ACBW	#MAX_CLASS_NO,#32,R5,20$ ; Loop to process next chunk

	MOVL	NORMAL,R0		; Set normal status
	RET				; Return

FREE_CLASS:				; Free class memory
					; NOTE -- R4 contains class number

	MULL3	#CDB$K_SIZE,R4,R6	; Compute offset to desired CDB
	MOVAB	CDBHEAD[R6],R6		; Index to CDB address

	TSTL	CDB$A_SUMBUF(R6)	; Is there a m.f. summary buffer?
	BEQL	20$			; Branch if not
	PUSHAL	CDB$A_SUMBUF(R6)	; Stack addr of buffer ptr
	PUSHAL	CDB$L_SUMBUF(R6)	; Stack addr of buffer length
	CALLS	#2,G^LIB$FREE_VM	; Free it
	CLRL	CDB$A_SUMBUF(R6)	; Clear address
20$:
	BBC	#CDB$V_HOMOG,CDB$L_FLAGS(R6),30$ ; Br if a hetero class
	MOVL	CDB$A_CDX(R6),R8	; Get CDX address
	TSTL	CDX$A_SELIDTABLE(R8)	; Is there a super element ID tab?
	BEQL	30$			; Branch if not
	PUSHAL	CDX$A_SELIDTABLE(R8)	; Stack addr of table
	PUSHAL	CDX$L_SELIDTABLE(R8)	; Stack addr of table length
	CALLS	#2,G^LIB$FREE_VM	; Free it
	CLRL	CDX$A_SELIDTABLE(R8)	; Clear address
30$:
	RSB				; Return

.END
