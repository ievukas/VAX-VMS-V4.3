 	.TITLE	SHOW$MSCP - MSCP Server Information
	.IDENT	'V04-000'
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
	.PAGE
	.SBTTL	PROGRAM DESCRIPTION
;++
;   FACILITY
;
;	SHOW Utility
;
;   ABSTRACT
;
;       This module contains the routines to show
;	information about the MSCP server.
;
;   ENVIRONMENT
;
;	NATIVE MODE, USER MODE
;
;   AUTHOR
;
;       Anne E. Warner,    10-Apr-1984
;
;   MODIFIED BY
;
;	V03-002	AEW0002			Anne Warner	07-Aug-1984
;		Make a check to see if the return status from MSCP$SHOW
;		is ss$_devoffline and if it is return the code show$_mscpnotld
;		stating that the MSCP-Server code is not loaded.
;
;	V03-001	AEW0001			Anne Warner	03-Jul-1984
;		Make changes for the reformat of the display.
;--
	.page
	.SBTTL	DECLARATIONS

;
;	SYMBOL DEFINTIONS
;

	.nocross
	$CDTDEF
	$CLIDEF			; CLI Utility definitions
	$IPLDEF
	$MSCPDEF
	$PBDEF
	$SSDEF			; System service condition code def's
	$SYIDEF			; System-wide Information ($GETSYI)

	.cross

	.DEFAULT DISPLACEMENT LONG


			
		
;
;	STORAGE DEFINITIONS
;

	.PSECT	SHOW$RWDATA,NOEXE,WRT,LONG

;
;                HEADINGS AND HEADING DESCRIPTORS
;

BAN_MAIN:
	.ASCII	/       MSCP-Served Devices on !AD !%D/
BAN_MAIN_LEN=.-BAN_MAIN
BAN_MAIN_SHOW:
	.LONG BAN_MAIN_LEN
	.ADDRESS BAN_MAIN


BAN_U:	.ASCII	<10><13>
 	.ASCII	/                                             Queue Requests/
	.ASCII	<10><13>
	.ASCII	/Device:           Status      Total Size     Current    Max     Hosts/
BAN_U_LEN=.-BAN_U
BAN_U_SHOW:
        .LONG BAN_U_LEN
        .ADDRESS BAN_U

BAN_H:	.ASCII	<10><13>
	.ASCII	/                                             Queue Requests/
	.ASCII	<10><13>
	.ASCII	/Host:               Time of Connection       Current    Max   Devices/
BAN_H_LEN=.-BAN_H
BAN_H_SHOW: 
        .LONG BAN_H_LEN
        .ADDRESS BAN_H

BAN_R:	.ASCII	<10><13>
	.ASCII	/                                                     Fragment Size/
	.ASCII	<10><13>
	.ASCII	/Resources:         Total      Free      In Use     Minimum    Maximum/
BAN_R_LEN=.-BAN_R

BAN_R_SHOW: 
        .LONG BAN_R_LEN
        .ADDRESS BAN_R

BAN_M:	.ASCII	<10><13>/                 Current   Maximum/
BAN_M_LEN=.-BAN_M
BAN_M_SHOW:
	.LONG BAN_M_LEN
	.ADDRESS BAN_M

BAN_B:	.ASCII	<10><13>/Request Count:/
BAN_B_LEN=.-BAN_B
BAN_B_SHOW:
        .LONG BAN_B_LEN
        .ADDRESS BAN_B

BAN_O:	.ASCII	<10><13>/Operations Count:/
BAN_O_LEN=.-BAN_O
BAN_O_SHOW:
	.LONG BAN_O_LEN
	.ADDRESS BAN_O

;
;                  INFORMATION LINE FORMATS
;

CTRSTR_U:
	.ASCID	/    !12AD!AD        !8UL          !2UW     !2UW        !2UB/

CTRSTR_H:
	.ASCID	/    !12AC !%D          !2UW     !2UW        !2UW/

CTRSTR_BA:
	.ASCID	/    Buffer Area:     !3UL       !3UL         !3UL         !3UL        !3UL/

CTRSTR_IOP:
	.ASCID  ?    I/O Packets:     !3UL       !3UL?

CTRSTR_BW:
	.ASCID	/    Buffer Wait:      !2UW        !2UW/

REQX:	.LONG	REQ1
	.LONG 	REQ2
	.LONG	REQ3
	.LONG	REQ4
REQ1:	.ASCID	/       0-7: !8UL        32-39: !8UL        88-103: !8UL/
REQ2:	.ASCID	/      8-15: !8UL        40-55: !8UL       104-127: !8UL/
REQ3:	.ASCID	/     16-23: !8UL        56-71: !8UL/
REQ4:	.ASCID	/     24-31: !8UL        72-87: !8UL/

CSLX:	.LONG	CSL1
	.LONG	CSL2
	.LONG	CSL3
	.LONG	CSL4
	.LONG	CSL5
	.LONG 	CSL6
CSL1:	.ASCID	/     ABORT       !6UL     ERASE       !6UL    READ        !6UL/
CSL2:	.ASCID	/     ACCESS      !6UL     FLUSH       !6UL    REPLACE     !6UL/
CSL3:	.ASCID	/     AVAILABLE   !6UL     GET COM STS !6UL    SET CTL CHR !6UL/
CSL4:	.ASCID	/     CMP CTL DAT !6UL     GET UNT STS !6UL    SET UNT CHR !6UL/
CSL5:	.ASCID	/     CMP HST DAT !6UL     ONLINE      !6UL    WRITE       !6UL/
CSL6:	.ASCID	/   Total         !6UL/

;
;         QUALIFIERS
;

ALL:	.ASCID	/ALL/
COUNT:	.ASCID	/COUNT/
HOST:	.ASCID	/HOST/
RESOURCE:
	.ASCID  /RESOURCE/

;
;                      VARIABLES
;

NUMNODE:.LONG	0	; Null argument for buffer address in GET_NODE
NODE:	.BLKB	16	; ASCII string to contain the node name for header
			; after call to $GETSYIW
GET_NODE:			; ITMLST for $GETSYIW
	.WORD	16		; buffer length defined to be 16 for nodename
	.WORD	SYI$_NODENAME	; Item code to get the node name
	.ADDRESS NODE		; Buffer address.  Not used with this item code
	.ADDRESS NUMNODE	; return length address
	.LONG 	0		; signifies end of item list
MAIN_ARG:		; Argument list for main heading
	.LONG	0	; Will contain number of characters in node name (NUMNODE)
	.ADDRESS NODE	; contains the address of the nodename from $GETSYIW
	.LONG	0	; and a zero to specify current date and time wanted
MAX:	.LONG	0	; The maximum number of times to loop through a routine
			; determined in MSCP routines.
CNT:	.LONG	0	; The count of how many times a routine has been executed
TOP_ARG:.LONG	0	; This variable contains the address of the first parameter
			; to be printed.  This is determined in the MSCP routines.
HOLD:	.BLKL   4	; Holds the address of TOP_ARG so the arglist may be
			; separated for output


	.page

	.PSECT	SHOW$CODE,EXE,NOWRT,LONG
	.ENTRY	SHOW$MSCP,^M<>

;++
;
;   FUNCTIONAL DESCRIPTION
;	
;  	     SHOW$MSCP controls what information is displayed, determined by
;	the user input.  It first checks if any qualifiers were specified
;	and if so the corresponding information is displayed.  If the /ALL
;	qualifier was specified, all of the information is displayed.  If no
;	qualifiers were specified then only the device information is displayed.
;	This routine determines this information and dispatched to the proper 
;	routine(s).
;
;   CALLING SEQUENCE
;
;	SHODEV ----> SHOW$MSCP
;
;   INPUT PARAMETERS
;
;	None
;
;   OUTPUT PARAMETERS
;
;	None
;
;--

	CALLS	#0,SHO_UNIT		; The device info is always displayed
	BLBC	R0,10$
	PUSHAL	ALL			; Find if ALL information is requested
	CALLS	#1,G^CLI$PRESENT
	BLBC	R0,2$			; Branch if not
	CALLS	#0,SHO_HOST		; If so then call all routines to display
	BLBC	R0,10$			; the HOST, RESOURCE, and COUNT info
	CALLS	#0,SHO_RESO
	BLBC	R0,10$
	CALLS	#0,SHO_COUN
	BLBC	R0,10$
2$:	PUSHAL	HOST			; If the /ALL qualifier was not set
	CALLS	#1,G^CLI$PRESENT	; then /HOST, /RESOURCE, and /COUNT
	BLBC	R0,3$			; must be checked individually.
	CALLS	#0,SHO_HOST		; Call the CLI routine to check if
	BLBC	R0,10$			; present, if not try the next qualifier,
3$:	PUSHAL	RESOURCE		; if it is then display info for the
	CALLS	#1,G^CLI$PRESENT	; qualifier and then check for the next
	BLBC	R0,4$			; one.
	CALLS	#0,SHO_RESO		
	BLBC	R0,10$	 
4$:	PUSHAL	COUNT	
	CALLS	#1,G^CLI$PRESENT	; After all qualifiers checked and 
	BLBC	R0,20$			; processed return to caller.
	CALLS	#0,SHO_COUN
	BLBS	R0,20$
10$:	CMPL	R0,#SS$_DEVOFFLINE
	BNEQ	15$
	MOVL	#SHOW$_MSCPNOTLD,R0
15$:	PUSHL	R0			; If there was an error along the way
	CALLS	#1,G^LIB$SIGNAL		; call the signal routine to tell user.
20$:	RET
	.PAGE
	.ENTRY	SHO_UNIT,^M<R8>

;++
;
;   FUNCTIONAL DESCRIPTION
;
;	     SHO_UNIT controls the display of information units in the data
;	base.  It calls MSCP$GET_UNIT to get the actual information then
;	sends the information and its format to SHOW$WRITE_LINE which prints
;	it.  SHO_UNITS repeats this until all possible units (MAX) have been
;	processed.  
;
;   CALLING SEQUENCE
;	
;	CALLS	#0,SHO_UNIT
;
;--

	$GETSYIW_S ITMLST = GET_NODE	; Get the node name for heading
	BLBC 	R0,7$
	MOVL	NUMNODE,MAIN_ARG	; Number of characters in node name
	PUSHAL	MAIN_ARG		; Contains node name and zero to
	PUSHAQ	BAN_MAIN_SHOW		; specify date and time wanted
	CALLS	#2,G^SHOW$WRITE_LINE
        PUSHL   #0                      ; Set up argument list for output
        PUSHAQ  BAN_U_SHOW              ; Heading.  Routine in module
        CALLS   #2,G^SHOW$WRITE_LINE    ; [cliutl.src]showio does output
	CLRL	CNT			; Clear the counter to start
5$:	PUSHAL	MAX			; Want to get maximum number of units
	PUSHL	CNT			; Supply the count
	PUSHAL	TOP_ARG			; Want to get back address of argument list
	PUSHL	#3
	MOVL	SP,R8			; R8 will contain addr. of arg list for call
  	$CMKRNL_S ROUTIN = G^MSCP$GET_UNIT,- ; Execute kernel routine
	          ARGLST = (R8)
7$:	BLBC	R0,8$			; Check return status
	ADDL	#16,SP			; Reclaim 4 longwords of stack space
	TSTL	TOP_ARG			; If passed back as zero there is no
	BLEQ	6$			; information to print.  
        PUSHL   TOP_ARG                 ; Address of argument list of items
        PUSHAQ  CTRSTR_U                ; Format for argument list
        CALLS   #2,G^SHOW$WRITE_LINE    ; Call routine in SHOWIO to output
6$:	AOBLSS	MAX,CNT,5$ 		; Loop through all units
8$:	RET

        .PAGE

	.ENTRY	SHO_HOST,^M<R8>

;++
;
;   FUNCTIONAL DESCRIPTION
;
;	     SHO_HOST controls the display of information concerning the status
;	of MSCP hosts.  It calls MSCP$GET_HOST to get the information and 
;	SHOW$WRITE_LINE to display the information.  MSCP$GET_HOST is called
;	until it all hosts are processed.
;
;   CALLING SEQUENCE
;
;	CALLS #0,SHO_UNIT
;
;
;--
        PUSHL   #0
        PUSHAQ  BAN_H_SHOW		; Argument list for header
        CALLS   #2, G^SHOW$WRITE_LINE	; Print header
	CLRL	CNT			; Initialize counter
5$:	PUSHAL	MAX			; Need to get maximum number of hosts
	PUSHL	CNT			; Supply the count
	PUSHAL	TOP_ARG			; Need to get back address of arg list
	PUSHL 	#3			; Number of arguments
	MOVL	SP,R8			; R8 will contain arg list for call
	$CMKRNL_S ROUTIN = G^MSCP$GET_HOST,-	; Execute kernel routine
		  ARGLST = (R8)
	BLBC	R0,7$			; Check return status
	ADDL	#16,SP			; reclaim 4 longwords of stack space
	TSTL	TOP_ARG			; If zero there is nothing to print
	BLEQ	6$
	PUSHL   TOP_ARG			; Start of argument list
	PUSHAQ	CTRSTR_H		; Format for argument list
        CALLS   #2,G^SHOW$WRITE_LINE	; Print information from SHOWIO
6$:	AOBLSS	MAX,CNT,5$ 		; Loop through all hosts
7$:	RET

        .PAGE
	.ENTRY	SHO_RESO,^M<R8,R9>

;++
;
;   FUNCTIONAL DESCRIPTION
;
;	     SHO_RESO controls the display of information about buffers and
;	packets (resources) of MSCP served devices.  The routine MSCP$GET_RESO
;	is called to get the information and SHOW$WRITE_LINE to print it.
;
;   CALLING SEQUENCE
;
;	CALLS	#0,SHO_RESO
;	
;--

	PUSHL	#0
	PUSHAL 	BAN_R_SHOW		; Print header
	CALLS	#2,G^SHOW$WRITE_LINE
	PUSHAL	TOP_ARG			; Need address of argument list
	PUSHL	#1
	MOVL	SP,R8			; R8 will contain address of arg list for call
	$CMKRNL_S ROUTIN = G^MSCP$GET_RESO,-	; Execute kernel routine
		  ARGLST = (R8)
	BLBC	R0,5$			; Check return status
	MOVL	TOP_ARG,R9
  	PUSHL   TOP_ARG			; Start of argument list
	PUSHAQ	CTRSTR_BA		; Format of output for buffer area
	CALLS   #2,G^SHOW$WRITE_LINE	; Print information
	MOVAL	5*4(R9),TOP_ARG		; find start of I/O Packet output
  	PUSHL   TOP_ARG			; Start of argument list
	PUSHAQ	CTRSTR_IOP		; Format of output for I/O Packet
	CALLS   #2,G^SHOW$WRITE_LINE	; Print information
	PUSHL	#0
	PUSHAQ	BAN_M_SHOW		; Header for Buffer Wait
	CALLS	#2,G^SHOW$WRITE_LINE
	MOVAL	7*4(R9),TOP_ARG		; find start of Buffer Wait output
  	PUSHL   TOP_ARG			; Start of argument list
	PUSHAQ	CTRSTR_BW		; Format of output for Buffer Wait
	CALLS   #2,G^SHOW$WRITE_LINE	; Print information
5$:	RET

        .PAGE
	.ENTRY	SHO_COUN,^M<R6,R7,R8,R9>

;++
;
;   FUNCTIONAL DESCRIPTION
;
;	     SHO_COUN controls the display of information about the current 
;	counts of commands and I/O's.  The information is gathered in two 
;	routines, MSCP$GET_COU1 and MSCP$GET_COU2, and output by 
;	SHOW$WRITE_LINE.  
;
;   CALLING SEQUENCE
;
;	CALLS	#0,SHO_COUN
;
;--
	CLRL	R6
	PUSHL	#0
	PUSHAL	BAN_B_SHOW		; Print count heading
	CALLS	#2,G^SHOW$WRITE_LINE
	PUSHAL	TOP_ARG			; Get address of argument list
	PUSHL	#1
	MOVL	SP,R8			; Call arg list in R8
	$CMKRNL_S ROUTIN = G^MSCP$GET_COU1,-
		  ARGLST = (R8)
	BLBC	R0,4$			; Return status
	MOVL	TOP_ARG,R9
2$:	MOVAL	HOLD,R7			; The display will split the arglist
	MOVL	(R9),(R7)+		; into four lines.  To do this the
	MOVL	4*4(R9),(R7)+		; correct arguments are moved into a
	MOVL	8*4(R9),(R7)+		; list with starting address HOLD.  Four
	MOVL	12*4(R9),(R7)		; arguments are moved and outputted, then
	PUSHAL	HOLD			; the next four until all arguments have
	PUSHL	REQX[R6]		; output.  R6 is used as an index to 
	CALLS	#2,G^SHOW$WRITE_LINE	; select the correct format line
	MOVAL	4(R9),R9
	AOBLEQ	#3,R6,2$
	BRB	5$
4$:	BRW	7$			; Branch won't reach
;
;               GET SECOND PART OF INFORMATION
;

5$:	PUSHL	#0
	PUSHAL	BAN_O_SHOW
	CALLS	#2,G^SHOW$WRITE_LINE	; Print the heading
	CLRL	R6			; R6 is the counter in this routine
	PUSHAL	TOP_ARG			; Need to get address of argument list.
	PUSHL	#1			; Number of arguments
	MOVL	SP,R8			; R8 contains addr of arglist for call
  	$CMKRNL_S ROUTIN = G^MSCP$GET_COU2,-	; Execute kernel routine
		  ARGLST = (R8)
	BLBC	R0,7$			; Check return status
	MOVL	TOP_ARG,R9
6$:	PUSHL	R9			; Start of argument list
	PUSHL	CSLX[R6]		; Format of argument list
	CALLS	#2,G^SHOW$WRITE_LINE	; Print information
	MOVAL	3*4(R9),R9	
	AOBLEQ	#5,R6,6$		; Loop thru all commands
7$:	RET

	.END	


