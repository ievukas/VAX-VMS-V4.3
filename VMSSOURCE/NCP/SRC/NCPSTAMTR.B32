%TITLE	'X.25 Trace Module Parsing'
MODULE NCPSTAMTR (IDENT = 'V04-000',LIST(NOOBJECT)) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Network Control Program (NCP)
!
! ABSTRACT:
!
!	States and data for the parsing of NCP X.25 Trace module parameters
!
! ENVIRONMENT:	VAX/VMS Operating System
!
! AUTHOR:	Bob Grosso July 1982
!
! MODIFIED BY:
!
!	V03-005	RPG0005		Bob Grosso		04-Nov-1982
!		Correct SET X-T K T STATE ON from parsing STA instead
!		of TST.
!
!	V03-004	RPG0004		Bob Grosso		15-Sep-1982
!		Flag presence of qualifier on command line so that
!		the ALL check in NCPVRBACT will work properly.
!		Make a noise word of X25-T in SET/CLEAR tracepoint.
!
!	V03-003	RPG0003		Bob Grosso		03-Sep-1982
!		Fix parameter ranges in some prompt strings.
!
!	V03-002	TMH0002		Tim Halvorsen		16-Aug-1982
!		Fix PCL table so that literal parameters such as STATE
!		as coded as NUMB rather than LITB, since that is the
!		way byte values are put into the NICE message.  (In a
!		PCL list, LITB means store the parameter code, but no
!		value - used in CLEAR/PURGE).
!		Fix so that TRACEPOINT STATE is distinguished from
!		X25-TRACE STATE, and so that a different parameter code
!		is sent for each.
!		Fix CLEAR TPT PBK to correctly indicate that it is a TKN
!		rather than a LITB, so that the tracepoint name is sent
!		correctly in the NICE message.
!
!	V03-001	RPG0001		Bob Grosso		03-Aug-1982
!		Enhance prompting for ALL
!
!--

%SBTTL	'Definitions'

!
! INCLUDE FILES:
!

	LIBRARY 'LIB$:NMALIBRY';
	LIBRARY 'LIB$:NCPLIBRY';
	LIBRARY 'SYS$LIBRARY:TPAMAC';

!
! EXTERNAL REFERENCES:
!

	ACT_DFN			! Action routine externals

EXTERNAL
	NCP$GL_QUALPRS;		! Flag presence of qualifier

!
! OWN storage
!

OWN
    TPT_PARAMS;			! True if tracepoint parameters
				! False if trace-wide parameters

!
! LITERALS
!

LITERAL
	QUALPRESENT = 1;	! Flag presence of qualifier on command line


%SBTTL	'Set Parameter blocks'

!
!	Set X25-TRACE Parameter Blocks
!

	BUILD_PCL

	(MTR,					! Module X25-TRACE

	TPT, TKN,	PCXT_TPT, ,

	STA, NUMB,	PCXT_STA, ,
	BSZ, NUMW,	PCXT_BSZ, ,
	MBK, NUMW,	PCXT_MBK, ,
	FNM, TKN,	PCXT_FNM, ,
	MBF, NUMW,	PCXT_MBF, ,
	CPL, NUMW,	PCXT_CPL, ,
	MVR, NUMW,	PCXT_MVR, ,

	CPS, NUMW,	PCXT_CPS, ,
	TST, NUMB,	PCXT_TST, ,

	, END, , ,

	)

	BUILD_PBK

	(MTR,					! Module X25-TRACE

	STAON, LITB, NMA$C_STATE_ON, MTR_STA,
	STAOFF, LITB, NMA$C_STATE_OFF, MTR_STA,
	BSZ, NUMW, , ,
	MBK, NUMW, , ,
	FNM, TKN, , ,
	MBF, NUMW, , ,
	CPL, NUMW, , ,
	MVR, NUMW, , ,
	TPT, TKN, , ,
	KTP, LITB, NMA$C_ENT_KNO, MTR_TPT,	! Known tracepoints
	CPS, NUMW, , ,
	TSTON, LITB, NMA$C_STATE_ON, MTR_TST,
	TSTOFF, LITB, NMA$C_STATE_OFF, MTR_TST,

	)

BIND	PDB$G_MTR_ENT = UPLIT BYTE(0, %ASCIC 'X25-TRACE');

	BUILD_SDB
	(MTR, NMA$C_ENT_MOD, MTR_ENT, MTR)

%SBTTL	'Clear Parameter blocks'

!
!	Clear X25-TRACE Parameter Blocks
!

	BUILD_PCL

	(CTR,					! Module X25-TRACE

	TPT, TKN,	PCXT_TPT, ,

	STA, LITB,	PCXT_STA, ,
	BSZ, LITB,	PCXT_BSZ, ,
	MBK, LITB,	PCXT_MBK, ,
	FNM, LITB,	PCXT_FNM, ,
	MBF, LITB,	PCXT_MBF, ,
	CPL, LITB,	PCXT_CPL, ,
	MVR, LITB,	PCXT_MVR, ,

	CPS, LITB,	PCXT_CPS, ,
	TST, LITB,	PCXT_TST, ,

	, END, , ,

	)

	BUILD_PBK

	(CTR,					! Module X25-TRACE

	ALL, LITB, 0, VRB_ALL,

	STA, LITB, 0, ,
	BSZ, LITB, 0, ,
	MBK, LITB, 0, ,
	FNM, LITB, 0, ,
	MBF, LITB, 0, ,
	CPL, LITB, 0, ,
	MVR, LITB, 0, ,
	TPT, TKN,  0, ,
	KTP, LITB, NMA$C_ENT_KNO, CTR_TPT,	! Known tracepoints
	CPS, LITB, 0, ,
	TST, LITB, 0, ,

	)

	BUILD_SDB

	(CTR, NMA$C_ENT_MOD, MTR_ENT, CTR)

%SBTTL	'Prompt strings'

!
!	Build prompt strings
!

BIND

	PROMPT_STRINGS
	(MTR,

	DAT, '          (TRACEPOINT name, or KNOWN): ',
	KWN, '                        (TRACEPOINTS): ',

	STA, 'State                      (ON or OFF): ',
	BSZ, 'Buffer size             (1-4096 bytes): ',
	MBK, 'Maximum blocks               (1-65535): ',
	FNM, 'Filename            (1-253 characters): ',
	MBF, 'Maximum number of buffers      (1-255): ',
	CPL, 'Global data capture limit    (1-65535): ',
	MVR, 'Maximum trace file version     (1-255): ',
	TPT, 'Trace point name (tracepointname.channel): ',
	CPS, 'Per-trace capture size (1-65535 bytes): ',
	TST, 'Per-trace state            (ON or OFF): ',
	),

	PROMPT_STRINGS
	(CTR,

	DAT, '          (TRACEPOINT name, or KNOWN): ',
	KWN, '                        (TRACEPOINTS): ',
	ALL, 'All X.25 Trace parameters      (Y, N): ',
	ALL2, 'All X.25 Trace tracepoint parameters  (Y, N): ',

	STA, 'State                          (Y, N): ',
	BSZ, 'Buffer size                    (Y, N): ',
	MBK, 'Maximum blocks                 (Y, N): ',
	FNM, 'Filename                       (Y, N): ',
	MBF, 'Maximum number of buffers      (Y, N): ',
	CPL, 'Global data capture limit      (Y, N): ',
	MVR, 'Maximum trace file version     (Y, N): ',
	TPT, 'Trace point name               (Y, N): ',
	CPS, 'Per-trace capture size         (Y, N): ',
	TST, 'Per-trace state                (Y, N): ',

	);

%SBTTL	'Declare entry points to TPARSE tables'

!
!	Declare entry points to this TPARSE table
!

$INIT_STATE (NCP$G_STTBL_MTR, NCP$G_KYTBL_MTR);

FORWARD
	ST_MTRTPT:	VECTOR [0],	! Set X25-TRACE Tracepoint
	ST_CTRTPT:	VECTOR [0],	! Clear X25-TRACE Tracepoint
	ST_CTR:		VECTOR [0];	! Clear X25-TRACE

GLOBAL BIND
	NCP$G_STTBL_MTRTPT = ST_MTRTPT,
	NCP$G_KYTBL_MTRTPT = NCP$G_KYTBL_MTR,
	NCP$G_STTBL_CTR = ST_CTR,
	NCP$G_KYTBL_CTR = NCP$G_KYTBL_MTR,
	NCP$G_STTBL_CTRTPT = ST_CTRTPT,
	NCP$G_KYTBL_CTRTPT = NCP$G_KYTBL_MTR;

%SBTTL	'SET X25-TRACE Module Parameters'

!
!	SET/DEFINE MODULE X25-TRACE parameter states
!

$STATE	(ST_MTR,
	((ST_MTR_INIT))
	);
$STATE	(,
	(TPA$_EOS, ST_MTR_PMT_DAT),
	(TPA$_LAMBDA, ST_MTR_DAT)
	);

!
!	SET TRACEPOINT dispatched from NCPSTAVRB
!
$STATE	(ST_MTRTPT,
	((ST_MTR_INIT), ST_MTR_DAT_TPT)
	);

$STATE	(ST_MTR_INIT,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$CLRLONG,,, TPT_PARAMS)); ! Assume trace-wide params

!
!	Determine which X25 Trace sub-database we are talking about
!	(due to grouping restrictions, the command must not mix
!	sub-database parameters).  The sub-database may be either
!	X25-Trace or tracepoint parameters.
!

$STATE	(ST_MTR_PMT_DAT,
	(TPA$_LAMBDA,, ACT$PRMPT,,, PMT$G_MTR_DAT));

$STATE	(ST_MTR_DAT,		! Determine whether TRACEPOINT parameters
	('TRACEPOINT',	ST_MTR_DAT_TPT),
	('KNOWN',	ST_MTR_DAT_KWN),
	(TPA$_LAMBDA)		! Else assume TRACE-wide parameters
	);

!
!	Prompt for normal Trace parameters
!
$STATE	(,
	(TPA$_EOS),			! Start prompting if EOS
	(TPA$_LAMBDA,	ST_MTR_PRC));	! Else try parsing parameters

	PROMPT_STATES
	(MTR,

	STA, BSZ, MBK, FNM, MBF, CPL, MVR)

$STATE	(,
	(TPA$_LAMBDA, ST_MTR_DOIT));

!
!	Prompt for tracepoint parameters
!

$STATE	(ST_MTR_DAT_TPT,
	((SE_TRCPNT_NAME),, ACT$SAVPRM,QUALPRESENT, NCP$GL_QUALPRS, PBK$G_MTR_TPT));

$STATE	(ST_MTR_PMT_TPT,
	(TPA$_EOS),			! Start prompting if EOS
	(TPA$_LAMBDA, ST_MTR_PRC,, 	! Else try parsing parameters while
		TRUE, TPT_PARAMS));	! remembering that we are parsing
					! tracepoint-specific parameters

	PROMPT_STATES
	(MTR,

	CPS, TST)

$STATE	(ST_MTR_DOIT,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_MTR),
	);

!
!	Dispatch on KNOWN keyword during prompting
!

$STATE	(ST_MTR_DAT_KWN,
	(TPA$_LAMBDA));

	COMMAND_PROMPT
	(MTR, KWN, NCP$_INVKEY,

	('TRACEPOINTS', ST_MTR_PMT_TPT, ACT$SAVPRM,,, PBK$G_MTR_KTP),
	)


!
!	Choose which TPARSE table to use, based on the type of
!	parameters used in the command.
!

$STATE	(ST_MTR_PRC,
	(TPA$_LAMBDA, ST_TPT_PRC, ACT$TESTLONG,,, TPT_PARAMS),
	(TPA$_LAMBDA));

!
!	Dispatch keywords for trace-wide parameters
!

$STATE	(,
	((SE_ALL), ST_MTR_DOIT),

	DISPATCH_STATES
	(MTR,

	BSZ, 'BUFFER',
	CAP, 'CAPTURE',
	FNM, 'FILE',
	MAX, 'MAXIMUM',
	STA, 'STATE',

	)

	,(TPA$_EOS, ST_MTR_DOIT)
	);

!
!	Dispatch keywords for tracepoint parameters
!

$STATE	(ST_TPT_PRC,

	((SE_ALL), ST_MTR_DOIT),

	DISPATCH_STATES
	(MTR,

	CAP, 'CAPTURE',
	TST, 'STATE',

	)

	,(TPA$_EOS, ST_MTR_DOIT)
	);


!
!	Dispatch on KNOWN keyword
!

$STATE	(ST_MTR_PRC_KWN,
	((SE_MTR_KWN), ST_MTR_PRC));

$STATE	(SE_MTR_KWN,

	KEYWORD_STATE
	(MTR,

	KTP, 'TRACEPOINTS',

	));

!
!	Dispatch on MAXIMUM keyword
!

$STATE	(ST_MTR_PRC_MAX,

	DISPATCH_STATES
	(MTR,

	MBK, 'BLOCKS',
	MBF, 'BUFFERS',
	MVR, 'VERSIONS',

	));

!
!	Dispatch on CAPTURE keyword
!

$STATE	(ST_MTR_PRC_CAP,

	DISPATCH_STATES
	(MTR,

	CPL, 'LIMIT',
	CPS, 'SIZE',

	));

!
!	Tracepoint state
!

$STATE	(ST_MTR_STA,

	KEYWORD_STATE
	(MTR,

	STAON, 'ON',
	STAOFF, 'OFF',

	));

!
!	Tracing state
!

$STATE	(ST_MTR_TST,

	KEYWORD_STATE
	(MTR,

	TSTON, 'ON',
	TSTOFF, 'OFF',

	));


!
!	Process states
!

	PROCESS_STATES
	(MTR,

	BSZ, 'SIZE',
	CPL, 'LIMIT',
	CPS, 'SIZE',
	FNM, ,
	MBK, 'BLOCKS',
	MBF, 'BUFFERS',
	MVR, 'VERSIONS',
	STA, ,
	TST, ,

	)


!
!	Subexpression states
!

	SUB_EXPRESSIONS
	(MTR,

	BSZ, TPA$_DECIMAL,
	CPL, TPA$_DECIMAL,
	CPS, TPA$_DECIMAL,
	FNM, (SE_FILE_ID),
	MBK, TPA$_DECIMAL,
	MBF, TPA$_DECIMAL,
	MVR, TPA$_DECIMAL,

	)

%SBTTL	'CLEAR X25-TRACE Module Parameters'

!
!	CLEAR/PURGE MODULE X25-TRACE parameter states
!

$STATE	(ST_CTR,
	((ST_CTR_INIT))
	);
$STATE	(,
	(TPA$_EOS, ST_CTR_PMT_DAT),
	(TPA$_LAMBDA, ST_CTR_DAT)
	);

!
!	CLEAR TRACEPOINT dispatched from NCPSTAVRB
!
$STATE	(ST_CTRTPT,
	((ST_CTR_INIT), ST_CTR_DAT_TPT)
	);


$STATE	(ST_CTR_INIT,
	(TPA$_LAMBDA, TPA$_EXIT, ACT$CLRLONG,,, TPT_PARAMS)); ! Assume trace-wide params

!
!	Determine which X25 TRACE sub-database we are talking about
!	(due to grouping restrictions, the command must not mix
!	sub-database parameters).  The sub-database may be either
!	X25 TRACE or tracepoint parameters.
!

$STATE	(ST_CTR_PMT_DAT,
	(TPA$_LAMBDA,, ACT$PRMPT,,, PMT$G_CTR_DAT));

$STATE	(ST_CTR_DAT,		! Determine whether TRACEPOINT parameters
	('TRACEPOINT',	ST_CTR_DAT_TPT),
	('KNOWN',	ST_CTR_DAT_KWN),
	(TPA$_LAMBDA));				! Else, assume TRACE-wide

!
!	Prompt for normal trace parameters
!

$STATE	(,
	(TPA$_EOS),			! Start prompting if EOS
	(TPA$_LAMBDA,ST_CTR_PRC));	! Else, try parsing parameters

	QUERY_STATES
	(CTR,

	ALL, STA, BSZ, MBK, FNM, MBF, CPL, MVR)

$STATE	(,
	(TPA$_LAMBDA, ST_CTR_DOIT));

!
!	Prompt for tracepoint parameters
!

$STATE	(ST_CTR_DAT_TPT,
	(TPA$_LAMBDA,,, TRUE, TPT_PARAMS)); ! Remember that we are parsing
					! tracepoint-specific parameters
$STATE	(,
	((SE_TRCPNT_NAME),, ACT$SAVPRM,,, PBK$G_CTR_TPT));

$STATE	(ST_CTR_PMT_TPT,
	(TPA$_EOS),			! Start prompting if EOS
	(TPA$_LAMBDA,ST_CTR_PRC));	! Else, try parsing parameters

	QUERY_STATES_S
	(CTR,

	ALL, ALL2, CPS, CPS, TST, TST)

$STATE	(ST_CTR_DOIT,
	(TPA$_EOS, TPA$_EXIT, ACT$VRB_UTILITY, , , SDB$G_CTR),
	);

!
!	Dispatch on KNOWN keyword during prompting
!

$STATE	(ST_CTR_DAT_KWN,
	(TPA$_LAMBDA));

	COMMAND_PROMPT
	(CTR, KWN, NCP$_INVKEY,

	('TRACEPOINTS', ST_CTR_PMT_TPT, ACT$SAVPRM,,, PBK$G_CTR_KTP),
	)


!
!	Choose which TPARSE table to use, based on the type of
!	parameters used in the command.
!

$STATE	(ST_CTR_PRC,
	(TPA$_LAMBDA, ST_CTP_PRC, ACT$TESTLONG,,, TPT_PARAMS),
	(TPA$_LAMBDA));


!
!	Dispatch keywords for trace-wide parameters
!

$STATE	(,

	DISPATCH_STATES
	(CTR,

	ALL, 'ALL',
	BSZ, 'BUFFER',
	CAP, 'CAPTURE',
	FNM, 'FILE',
	MAX, 'MAXIMUM',
	STA, 'STATE',
	)

	,(TPA$_EOS, ST_CTR_DOIT)
	);

!
!	Dispatch keywords for tracepoint-specific parameters
!

$STATE	(ST_CTP_PRC,

	DISPATCH_STATES
	(CTR,

	ALL, 'ALL',
	CAP, 'CAPTURE',
	TST, 'STATE',
	)

	,(TPA$_EOS, ST_CTR_DOIT)
	);


!
!	Dispatch on KNOWN keyword
!

$STATE	(ST_CTR_PRC_KWN,
	((SE_CTR_KWN), ST_CTR_PRC));

$STATE	(SE_CTR_KWN,

	KEYWORD_STATE
	(CTR,

	KTP, 'TRACEPOINTS',

	));

!
!	Dispatch on MAXIMUM keyword
!

$STATE	(ST_CTR_PRC_MAX,

	DISPATCH_STATES
	(CTR,

	MBK, 'BLOCKS',
	MBF, 'BUFFERS',
	MVR, 'VERSIONS',

	));

!
!	Dispatch on CAPTURE keyword
!

$STATE	(ST_CTR_PRC_CAP,

	DISPATCH_STATES
	(CTR,

	CPL, 'LIMIT',
	CPS, 'SIZE',

	));


!
!	Process states
!

	PROCESS_STATES
	(CTR,

	ALL, ,

	BSZ, 'SIZE',
	CPL, 'LIMIT',
	CPS, 'SIZE',
	FNM, ,
	MBK, 'BLOCKS',
	MBF, 'BUFFERS',
	MVR, 'VERSIONS',
	STA, ,
	TST, ,

	)


!
!	Subexpression states
!

	SUB_EXPRESSIONS
	(CTR,

	ALL, TPA$_EOS,

	BSZ, TPA$_LAMBDA,
	CPL, TPA$_LAMBDA,
	CPS, TPA$_LAMBDA,
	FNM, TPA$_LAMBDA,
	MBK, TPA$_LAMBDA,
	MBF, TPA$_LAMBDA,
	MVR, TPA$_LAMBDA,
	STA, TPA$_LAMBDA,
	TST, TPA$_LAMBDA,

	)

%SBTTL	'Define Subexpressions'

!
!	Define Subexpressions from Library
!

	SEM_ALL			! All parameter
	SEM_FILE_ID		! File name
	SEM_LINE_ID		! For tracepoint name
	SEM_QUERY		! Query state subexpressions
	SEM_TRCPNT_NAME		! Tracepoint name

END
ELUDOM
