	$BEGIN	RMS0RUHND,000,RM$RMS,<RMS Recovery Unit Handler>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility:	RMS-32
;
; Abstract:
;	This routine serves as a recovery unit handler for RMS and handles
;	events concerned with the initiation, termination, etc. of recovery
;	units.
;
; Environment:
;		VAX/VMS Operating System
;
; Author:	Jeffrey W. Horn			Creation Date: 22-Jul-1982
;
; Modified By:
;
;	V03-010	JWT0159		Jim Teague		29-Feb-1984
;		Use the new entry point, RM$FLUSH_ALT, which will 
;		invalidate the cache.
;
;	V03-009	RAS0222		Ron Schaefer		 9-Dec-1983
;		Re-enable exec mode ASTs if necessary on exit from
;		the handler.
;
;	V03-008	KPL0002		Peter Lieberwirth	11-Oct-1983
;		MARKPOINT must flush buffers and generally bring the file
;		to a quiet, recoverable state.  Clear the flag IMP$V_RUH
;		while waiting for operations to quiet in the routine SYNCH.
;		If his flag is not clear, STALL does an RU stall for a
;		user operation.  This may occur at EXEC AST level, 
;		resulting in a hang.
;
;		Since this handler synchronizes with the completion of
;		user-initiated RMS requests, a flag must be used to
;		indicate to exit_rms that the asynch EFN must be set at
;		completion.  Since RUH cannot be used for the above reason,
;		use RUH_SYNCH.
;
;	V03-007	KPL0001		Peter Lieberwirth	20-Jun-1983
;		Change some references to JNLFLG to JNLFLG2.
;
;	V03-006	TSK0001		Tamar Krichevsky	12-Jun-1983
;		Fix broken branch to journaling routine.
;
;	V03-005	ADE9003		Alan D. Eldridge	29-May-1983
;		Added RUF$C_PHASE2 to case dispatch vector.
;
;	V03-004	JWH0178		Jeffrey W. Horn		02-Feb-1983
;		Back out JWH0171.
;
;	V03-003	JWH0176		Jeffrey W. Horn		31-Jan-1983
;		Provide a FAB in R8 for call to RM$MAPJNL_RU.
;
;	V03-002	JWH0172		Jeffrey W. Horn		21-Jan-1983
;		Fix mistype in JWH0171.
;
;	V03-001	JWH0171		Jeffrey W. Horn		18-Jan-1983
;		If IFB$V_RU_RLK is set then turn on record locking for
;		durration of recovery unit.
;
;--


	.SBTTL	DECLARATIONS


;
; Include FIles:
;
	$FABDEF
	$IFBDEF
	$IMPDEF
	$IRBDEF
	$PIODEF
	$PSLDEF
	$RUFDEF

;
; Macros:
;

;
; Equated Symbols:
;

;
; Own Storage:
;



	.SBTTL	RMS$RMSRUHNDLR - Dispatch to Recovery Unit Event Routines

;++
; RMS$RUHNDLR - Dispatch to Recovery Unit Event Routines
;
;	This is the entry point for this service.   It dispatches to one of
;	several event routines depending on the action code.
; 
;
; Calling sequence:
;
;	Entered from Exec as a result of RUF calling SYS$RMSRUHNDLR in
;	EXEC mode.
;
; Input Parameters:
;
;	AP	Address of RUF argument list
;
; Implicit Inputs:
;
;	RUF$L_RUCODE(AP)	Address of action code
;
; Output Parameters:
;	R0,R1	Destroyed
;
; Implicit Outputs:
;	None
;
; Completion Codes:
;	None
;
; Side Effects:
;	See descriptions of dispatched routines
;
;--


	$ENTRY	RMS$RMSRUHNDLR

;
;	Verify this is actually call from RUF by checking previous
;	mode against current mode.
;

	MOVPSL	R0					; get PSL
	EXTZV	#PSL$V_CURMOD,#PSL$S_CURMOD,R0,R1	; get current mode
	EXTZV	#PSL$V_PRVMOD,#PSL$S_PRVMOD,R0,R0	; get previous mode
	CMPL	R0,R1					; are they the same?
	BNEQ	ERRMOD					; branch if not
	BISW2	#1@PIO$V_INHAST,@#PIO$GW_STATUS		; set AST disable
	PUSHAL	NULL					; set return point

;
;	Dispatch to action routine based on code from RUF.
;

	CASEW	@RUF$L_RUCODE(AP),#RUF$C_MIN_CODE,#RUF$C_MAX_CODE		

	ASSUME	RUF$C_START       EQ    RUF$C_MIN_CODE
	ASSUME	RUF$C_PHASE1      EQ  1+RUF$C_START
	ASSUME	RUF$C_PHASE1_END  EQ  1+RUF$C_PHASE1
	ASSUME	RUF$C_PHASE2	  EQ  1+RUF$C_PHASE1_END
	ASSUME	RUF$C_PHASE2_END  EQ  1+RUF$C_PHASE2
	ASSUME	RUF$C_MARKPOINT   EQ  1+RUF$C_PHASE2_END
	ASSUME	RUF$C_RESET       EQ  1+RUF$C_MARKPOINT
	ASSUME	RUF$C_RESET_END   EQ  1+RUF$C_RESET
	ASSUME	RUF$C_CANCEL      EQ  1+RUF$C_RESET_END
	ASSUME	RUF$C_CANCEL_END  EQ  1+RUF$C_CANCEL
	ASSUME 	RUF$C_CANCEL_END  EQ    RUF$C_MAX_CODE

DISP:
	.WORD	STARTRU - DISP				; RUF$C_START
	.WORD	ENDRU - DISP				; RUF$C_PHASE1
	.WORD	NULL - DISP				; RUF$C_PHASE1_END
	.WORD	NULL - DISP				; RUF$C_PHASE2
	.WORD	UNLOCK - DISP				; RUF$C_PHASE2_END
	.WORD	ENDRU - DISP				; RUF$C_MARKPOINT
	.WORD	ENDRU - DISP				; RUF$C_RESET
	.WORD	NULL - DISP				; RUF$C_RESET_END
	.WORD	ENDRU - DISP				; RUF$C_CANCEL
	.WORD	UNLOCK - DISP				; RUF$C_CANCEL_END

;
;	Get here if no action needed for code, or code out of range.
;

NULL:	BBSC	#PIO$V_INHAST,@#PIO$GW_STATUS,10$	; re-enable ASTs
	$SETAST_S	#1				; if disabled
10$:	RET



ERRMOD:	RMSERR	RUM
	RSB

	.SBTTL	Action Routines
	.SBTTL	STARTRU	- Start a recovery Unit

;++
; STARTRU - Start a recovery Unit
;
;	This routine processes the RUF$C_START action code.
;
;--

STARTRU:
	MOVAL	RUINIT,R6				; Action to be taken for
	BSBB	RUSCAN					; each file.
	RSB


RUINIT:	SSB	#IFB$V_RUP,IFB$B_JNLFLG2(R9)		; indicate RU in prog
	MOVL	IFB$L_LAST_FAB(R9),R8			; get FAB address
	JSB	RM$MAPJNL_RU				; write out Mapping ent
	RSB
	

	.SBTTL	ENDRU
;++
; ENDRU - End a recovery Unit
;
;	This routine processes the
;		RUF$C_CANCEL,
;		RUF$C_RESET,
;		RUF$C_PHASE1
;				action codes.
;--

ENDRU:
	MOVAL	RUEND,R6				; action to be taken
	BSBB	RUSCAN					; for each file
	RSB


RUEND:
	BSBW	SYNCH					; wait for asynch ops
	MOVL	R9,R10					; save IFB addr
10$:	MOVL	IFB$L_IRAB_LNK(R9),R9			; get IRB
	BEQL	20$					; branch if none
	BSBW	SYNCH					; wait for asynch ops
	MOVL	IRB$L_LAST_RAB(R9),R8			; get RAB address
	PUSHR	#^M<R6,R7>				; save registers
	JSB	RM$FLUSH_ALT				; flush buffers	
	POPR	#^M<R6,R7>				; restore registers
	BRB	10$					; go get next IRB
20$:	MOVL	R10,R9					; restore IFB addr
	CLRL	R4					; force all journal entries
	JSB	RM$FRCJNL				; call force
	RSB

	.SBTTL	UNLOCK - Recovery Unit Complete
;++
; UNLOCK - Recovery Unit Complete
;
;	This routine processes the RUF$C_CANCEL_END and the RUF$C_PHASE2
;	action codes
;
;--

UNLOCK:
	MOVAL	KILLRU,R6				; action to be taken
	BSBB	RUSCAN					; for each file.
	BSBW	RM$RU_UNLOCK				; release all RU locks
	RSB

KILLRU:
	CSB	#IFB$V_RUP,IFB$B_JNLFLG2(R9)		; clear RU in prog
	RSB


	.SBTTL	RUSCAN - Search for files that are RU journaled.

;++
; RUSCAN - Search for files that are RU journaled.
;
;	This subroutine searches for open files that have the recovery unit
;	journal bit set.  For each one found it sets up the registers
;	as follows:
;			R9 - Address of IFB
;			R11 - Impure area address
;	It then calls the routine specified by RUSCAN's caller at the
;	address specified in R6.
;
;	If the specified routine returns an error code, the scan is
;	terminated.
;
;
;--


RUSCAN:	MOVAL	@#PIO$GW_PIOIMPA,R11			; set impure area addr
	BSBB	SCAN					; go do scan
	BLBC	R0,10$					; get out on error
	MOVAL	@#PIO$GW_IIOIMPA,R11			; set impure area addr
	BSBB	SCAN					; go do scan
10$:	RSB

SCAN:	RMSSUC						; preset success
	SSB	#IMP$V_RUH_SYNCH,(R11)			; set handler synch with
							; rms exit
	SSB	#IMP$V_RUH,(R11)			; set handler in prog
	MOVL	IMP$L_IFABTBL(R11),R7			; get table address
10$:	MOVL	(R7)+,-(SP)				; get next seg addr
	MOVZWL	IMP$W_ENTPERSEG(R11),R1			; get seg limit
	MOVAL	(R7)[R1],-(SP)				; calculate end of seg
20$:	MOVL	(R7)+,R9				; get IFB address
	BEQL	40$					; branch if ifi not used
	BBC	#IFB$V_RU,IFB$B_JNLFLG(R9),40$		; branch if no RU
	PUSHR	#^M<R0>					; save current status
	JSB	(R6)					; call routine
	BLBS	R0,30$					; continue on success
	BLBC	(SP),30$				; branch if code already error
	MOVL	R0,(SP)					; substitute code
30$:	POPR	#^M<R0>					; restore code
40$:	CMPL	R7,(SP)					; at end of seg?
	BLEQ	20$					; branch if not
	TSTL	(SP)+					; clean off seg end adr
	MOVL	(SP)+,R7				; get next seg
	BNEQ	10$					; branch if one
	CSB	#IMP$V_RUH,(R11)			; clear handler in prog
	CSB	#IMP$V_RUH_SYNCH,(R11)			; clear handler in prog
	RSB	

	.SBTTL	SYNCH - Wait for asynch operations to complete
;++
; SYNCH - Wait for asynch operations to complete
;--

SYNCH:	BBC	#IRB$V_BUSY,(R9),20$			; branch if not busy
	BBC	#IRB$V_RMS_STALL,(R9),20$		; branch if not stalled
	CSB	#IMP$V_RUH,(R11)			; don't do RUSTALL
	$CLREF_S	#IMP$C_ASYEFN			; clear event flag
	BBSC	#PIO$V_INHAST,@#PIO$GW_STATUS,10$	; set enable ASTs
	$SETAST_S	#1				; enable ASTs
10$:	$WAITFR_S	#IMP$C_ASYEFN			; wait for event	
	BISW2	#1@PIO$V_INHAST,@#PIO$GW_STATUS		; set AST disable
	SSB	#IMP$V_RUH,(R11)			; ok for RUSTALL again
	BRB	SYNCH					; make sure done
20$:	RSB
	
	.END
