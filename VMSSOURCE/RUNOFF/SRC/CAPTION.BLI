%TITLE 'CAPTION - Generate figure, table and example captions'
!<BLF/NOFORMAT>

MODULE caption (IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL = LONG_RELATIVE, NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN

!<BLF/FORMAT>
!<BLF/LOWERCASE_USER>
!<BLF/UPPERCASE_KEY>
!<BLF/MACRO>
!
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!   DSR (Digital Standard RUNOFF) /DSRPLUS DSRTOC/CONTENTS Utility
!
! ABSTRACT:
!   Format figure, table and example captions
!
! ENVIRONMENT:	 Transportable
!
! AUTHOR:	 JPK
!
! CREATION DATE: March 1982
!
! MODIFIED BY:
!
!	007	JPK00010	05-May-1983
!		Modified CONTENTS to change text for index record group to all
!		caps. Modified CAPTION to change the number of blank lines 
!		after the entity title line.
!
!	006	JPK00008	09-Mar-1983
!		Modified CONTENTS and CAPTION to support new BRN formats,
!		support SEND CONTENTS, /DOUBLE_SPACE, page numbered chapters,
!		guarantee space after section number and to write new 
!		prologue and epilog for RUNOFF output.
!		Modified FORMAT to quote only the RUNOFF flags used by CONTENTS.
!		Modified CNTVMS to fix default for /DOUBLE_SPACE and do more
!		value checking.
!
!	005	JPK00007	14-Feb-1983
!		Global edit of all sources for CONTENTS/DSRTOC:
!		- module names are now consistant with file names
!		- copyright dates have been updated
!		- facility names have been updated
!		- revision history was updated to be consistant with DSR/DSRPLUS
!
!	004	JPK00004	11-Feb-1983
!		Changed the global variable name INDENT to LINE_INDENT in 
!		modules CONTENTS, CAPTION, FORMAT and GBLDCL.
!		Removed declarations of PDENTS in modules CNTVMS, CONTENTS,
!		and CAPTION and replaced with a module wide BIND using the
!		new name INDENTS. 
!		Changed handling of INDENTS [1]. It no longer represents the
!		sum of the chapter and title indents.
!
!	003	KFA00002	14-Oct-1982
!		Modified CNTVMS, CONTENTS, CAPTION and CNTCLI.REQ to handle
!		new syntax for /INDENT qualifier. All indents are now
!		stored in the vector CMDBLK [CONTENTS$AG_HL_INDENT []],
!		where 0 = chapter indent, 1 = header level one indent, etc.
!
!	002	KFA00001	13-Oct-1982
!		Modified CONTENTS and CAPTION to allow null captions for 
!		headers, examples, figures, & tables. 
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    hdr_x : NOVALUE,				! Process Figure, Table and Example captions
    stchdr : NOVALUE,				! Process SEND TOC temporary file
    strip : NOVALUE,				! Remove leading and trailing whitespace
    insrnt : NOVALUE;				! Insert text directly into output file

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';

REQUIRE 'REQ:PAGEN';				! Page reference format

REQUIRE 'REQ:TOCRTY';				! Table of Contents file formats

REQUIRE 'REQ:CNTCLI';				! Command line information block formats

!
! MACROS:
!

MACRO
    !
    ! Write a character to output line
    !
    write_char (ch) [] =
	BEGIN
	CH$WCHAR_A (ch, lp);
	intlin = .intlin + 1;

	%IF NOT %NULL (%REMAINING)
	%THEN
	    extlin = .extlin + 1;
	%FI

	END
    %,
    !
    ! Write a text literal to the output line
    !
    literal_text (str) =
	BEGIN
	CH$MOVE (%CHARCOUNT (str), CH$PTR (UPLIT (str)), .lp);
	lp = CH$PLUS (.lp, %CHARCOUNT (str));
	intlin = .intlin + %CHARCOUNT (str);
	END
    %,
    !
    ! Pad the output line with blanks
    !
    pad (n_blanks) =
	BEGIN

	IF n_blanks GTR 0
	THEN
	    BEGIN
	    CH$FILL (%C' ', n_blanks, .lp);
	    lp = CH$PLUS (.lp, n_blanks);
	    intlin = .intlin + n_blanks;
	    extlin = .extlin + n_blanks;
	    END;

	END
    %,
    !
    ! Clear the text lines being built up.
    !
    clr_line (_) =
	BEGIN
	lp = CH$PTR (line);
	intlin = 0;
	extlin = 0;
	END
    %,
    !
    ! Insert specified character sequence into file, as is.
    !
    put (str) =
	BEGIN
	$str_copy (string = str, target = tmpstr);
	chrout = .chrout + .tmpstr [str$h_length];
	$xpo_put (iob = tocoob, string = tmpstr);
	!
	! For TMS output, split the output file if it gets too large
	!

	IF .cmdblk [contents$v_tms11] THEN split ();

	END
    %;

!
! EQUATED SYMBOLS:
!

LITERAL
    true = 1,
    false = 0,
    tab = %O'11' : UNSIGNED (8),
    rintes = %O'34' : UNSIGNED (8),
    infinity = 1^(%BPVAL - 1) - 1;

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    cmdblk : $contents_cmd,			! Command line information block
    tocoob : $xpo_iob (),			! IOB for the resulting .RNT file
    stciob : $xpo_iob (),			! IOB for send toc temp file
    chrout,					! Number of characters written to output file
    tmpstr : $str_descriptor (),		! Temporary strings
    txtlen,					! Length of input text.
    hl_n,					! "n" from latest .HL n command
    hllist : VECTOR [100],			! Header level counters
    hldsp : VECTOR [100],			! Header level display characteristics
    major,					! Major record type code
    minor,					! Minor record type code
    pagen : page_definition,			! Current page number.
    nxtstc,					! Next SEND TOC "n" value to process
    rno_ex : $str_descriptor (),		! String constant 'EXAMPLES'
    rno_fg : $str_descriptor (),		! String constant 'FIGURES'
    rno_tb : $str_descriptor (),		! String constant 'TABLES'
    tms_ex : $str_descriptor (),		! String constant 'Examples'
    tms_fg : $str_descriptor (),		! String constant 'Figures'
    tms_tb : $str_descriptor (),		! String constant 'Tables'
    prestr : $str_descriptor (),		! Caption prefix
    sfxstr : $str_descriptor (),		! Caption suffix
    lp,						! CH$PTR along line being built up
    intlin,					! Number of characters needed to represent text
    extlin,					! Number of resulting print positions
    line : VECTOR [CH$ALLOCATION (10000)],	! Buffer in which line is being built up.
    lenpag,					! Number of characters in the converted page number.
    txtpag : VECTOR [CH$ALLOCATION (50)],	! The text (lots of room)
    ptrpag,					! A CH$PTR (working pointer)
    lensct,					! Number of characters in the converted section number
    txtsct : VECTOR [CH$ALLOCATION (150)],	! The text (lots of room)
    ptrsct,					! A CH$PTR (working pointer)
    rmargin,					! Used by ENDWRD for controlling filling lines.
    wrap,					! Wrap long lines around to here.
    line_indent;				! Assume this standard indentation before the text.

BIND
    indents = cmdblk[contents$ag_hl_indent] : VECTOR;	

EXTERNAL ROUTINE
    split : NOVALUE,				! Start new output file for TMS
    fmttxt : NOVALUE,				! Generate formatted text
    insref : NOVALUE,				! Insert a page reference
    pacpag,					! Format a page number
    pacbas,					! Convert a number to ASCII
    pacsec,					! Format a section number
    pacxxx;					! Format a number using display code

%IF %BLISS (BLISS32)
%THEN

EXTERNAL ROUTINE
    open_error;					! File open error handling routine

%FI

%SBTTL 'HDR_X - Process .HEADER x captions'
GLOBAL ROUTINE hdr_x (
    iob : REF $xpo_iob (), 
    title : REF $str_descriptor (), 
    info, 
    txt, 
    txt_u
    ) : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine processes the .HEADER x Captions
!
! FORMAL PARAMETERS:
!
!	iob	- address of temp file iob
!	title	- address of string descriptor of title
!	info	- information record type
!	txt	- text record type
!	txt_u	- unnumbered text record type
!
! IMPLICIT INPUTS:
!
!	cmdblk	- command line information block
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    LOCAL
	first_record;

    IF .cmdblk [contents$g_headers] EQL 0 THEN RETURN;

    first_record = true;
    $xpo_open (iob = .iob, options = input, attributes = BINARY
	%IF %BLISS (BLISS32) %THEN , failure = open_error %FI
    );

    WHILE $xpo_get (iob = .iob, fullwords = 2) EQL xpo$_normal DO
	BEGIN
	!
	! Process a record group
	!
	BIND
	    record_header = .iob [iob$a_data] : VECTOR;

	major = .record_header [0];
	minor = .record_header [1];

	SELECTONE true OF
	    SET

	    [(.major EQL maj_runoff) AND (.minor EQL min_page)] :
		BEGIN
		!
		! Process a page reference
		!
		$xpo_get (iob = .iob, fullwords = page_sct_size);
		BEGIN
		BIND
		    page_ref = .iob [iob$a_data] : VECTOR;

		MAP
		    pagen : VECTOR;

		INCR i FROM 0 TO page_sct_size - 1 DO
		    pagen [.i] = .page_ref [.i];

		END;
		END;

	    [.major EQL maj_send_contents] :
		BEGIN
		!
		! Process a SEND CONTENTS record
		!
		LOCAL
		    type;

		type = .minor<0, %BPVAL/2>;
		$xpo_get (iob = .iob, fullwords = 1);	! Get length
		txtlen = ..iob [iob$a_data];

		IF .txtlen GTR 0
		THEN
		    $xpo_get (iob = .iob, fullwords = CH$ALLOCATION (.txtlen));

		IF .type EQL scon_comm
		THEN
		    !
		    ! A command. Insert directly into table of contents
		    !
		    put ((.txtlen, CH$PTR (.iob [iob$a_data])))
		ELSE
		    BEGIN
		    !
		    ! Text. Format it.
		    !
		    IF .first_record
		    THEN
			BEGIN
			!
			! First one seen - generate title
			!
			IF .cmdblk [contents$v_tms11]
			THEN
			    BEGIN
			    put ('');

			    IF .hl_n NEQ 0 THEN put ('[va15]');

			    put ($str_concat ('*c0n*', .title, '@@'));
			    END
			ELSE
			    BEGIN
			    put ('.TEST PAGE 7');
			    IF .hl_n NEQ 0 THEN put ('.SK2') ELSE put ('.SK1');

			    IF .indents [0] NEQ 0
			    THEN
				put ($str_concat ('.I-', $str_ascii (.indents [0])));

			    put (.title);
			    put ('.BLANK');
			    END;

			hl_n = 1;
			first_record = false;
			END;

		    !
		    ! Initialize formatting parameters
		    !
		    clr_line ();
		    line_indent = .indents [0];
		    extlin = .line_indent;
		    wrap = .indents [0] + .indents [1];
		    rmargin = .cmdblk [contents$g_page_width];

		    IF .cmdblk [contents$v_tms11] 
		    THEN 
			literal_text ('*c1n*@')
		    ELSE
			pad ((.indents [0] + .indents [1] - .extlin));

		    IF .type EQL scon_txt
		    THEN
			BEGIN
			!
			! Generate the page number so as to get its length.
			! This is needed so that the proper number of dots can be supplied.
			!
			ptrpag = CH$PTR (txtpag);

			IF NOT .cmdblk [contents$v_standard_page]
			THEN
			    lenpag = pacbas (.pagen [sct_run_page], ptrpag, 10)
			ELSE
			    lenpag = pacpag (pagen, ptrpag);

			END
		    ELSE
			lenpag = 0;

		    !
		    ! Set limit beyond which words must be wrapped
		    !
		    rmargin = .cmdblk [contents$g_page_width] - .lenpag - 1;
		    wrap = .extlin;
		    !
		    ! Scan text(if any) and put it(may be null caption) onto the line.
		    !
		    fmttxt (.txtlen, CH$PTR (.iob [iob$a_data]));

		    IF .type EQL scon_txt
		    THEN
			insref ()			! Insert page reference
		    ELSE
			BEGIN

			IF .cmdblk [contents$v_tms11] THEN write_char (%C'@');
			END;

		    !
		    ! Now actually put this line of text into the file
		    !
		    put ((.intlin, CH$PTR (line)));
		    clr_line ();
		    END;

		END;

	    [(.major EQL maj_runoff) AND (.minor EQL .info)] :
		BEGIN
		!
		! A caption information record
		!
		LOCAL
		    prefix_len,
		    suffix_len;

		!
		! Get caption counter, display descriptor and prefix text length
		!
		$xpo_get (iob = .iob, fullwords = 3);
		BEGIN

		BIND
		    info_vector = .iob [iob$a_data] : VECTOR [3];

		hllist [0] = .info_vector [0];	! Save the counter
		hldsp [0] = .info_vector [1];	! the display descriptor
		prefix_len = .info_vector [2];	! and prefix string length
		END;
		!
		! Get prefix text if any
		!
		IF .prefix_len NEQ 0 THEN $xpo_get (iob = .iob, fullwords = CH$ALLOCATION (.prefix_len));

		$str_copy (string = (.prefix_len, CH$PTR (.iob [iob$a_data])), target = prestr);
		!
		! Get length of suffix text
		!
		$xpo_get (iob = .iob, fullwords = 1);
		suffix_len = .(.iob [iob$a_data]);
		!
		! Get suffix text if any
		!
		IF .suffix_len NEQ 0 THEN $xpo_get (iob = .iob, fullwords = CH$ALLOCATION (.suffix_len));

		$str_copy (string = (.suffix_len, CH$PTR (.iob [iob$a_data])), target = sfxstr);
		END;

	    [(.major EQL maj_runoff) AND (.minor EQL .txt OR .minor EQL .txt_u)] :
		BEGIN
		!
		! Process the text part of a caption.
		!
		LOCAL
		    needed_fill;

		!
		! First read the number of characters needed to represent the caption
		!
		$xpo_get (iob = .iob, fullwords = 1);
		txtlen = .(.iob [iob$a_data]);	! Save text length.
		!
		! Generate a table of contents entry even if the caption
		! has no text associated with it
		!
		If .txtlen NEQ 0
		THEN
		    $xpo_get (iob = .iob, fullwords = CH$ALLOCATION (.txtlen));

		!
		! Initialize formatting parameters
		!
		clr_line ();
		line_indent = .indents [0];
		extlin = .line_indent;
		wrap = .indents [0] + .indents [1];
		rmargin = .cmdblk [contents$g_page_width];

		IF .first_record
		THEN
		    BEGIN
		    !
		    ! First one seen - generate title
		    !
		    IF .cmdblk [contents$v_tms11]
		    THEN
			BEGIN
			put ('');

			IF .hl_n NEQ 0 THEN put ('[va15]');

			put ($str_concat ('*c0n*', .title, '@@'));
			END
		    ELSE
			BEGIN
			put ('.TEST PAGE 7');
			IF .hl_n NEQ 0 THEN put ('.SK2') ELSE put ('.SK1');

			IF .indents [0] NEQ 0
			THEN
			    put ($str_concat ('.I-', $str_ascii (.indents [0])));

			put (.title);
			put ('.BLANK');
			END;

		    hl_n = 1;
		    first_record = false;
		    END;

		IF .cmdblk [contents$v_tms11] THEN literal_text ('*c1n*');

		IF .cmdblk [contents$v_include_sections] 
		    AND (
			(.cmdblk [contents$g_sections] GEQ .hl_n) 
			OR  (
			    (.cmdblk [contents$g_sections] EQL -1) 
			    AND (.minor NEQ .txt_u)
			    )
			)
		THEN
		    BEGIN
		    !
		    ! Generate number if either the user said include
		    ! all header numbers up to some level GEQ 1 or
		    ! header numbers should be displayed as input and
		    ! this was a numbered head.
		    !
		    ptrsct = CH$PTR (txtsct);
		    lensct = 0;

		    IF .pagen [sct_typ] NEQ 0
		    THEN
			BEGIN
			!
			! Document is divided into sections
			!
			lensct = .lensct + pacsec (pagen, ptrsct) + 1;
			CH$WCHAR_A (%C'-', ptrsct);
			END;

		    lensct = .lensct + pacxxx (.hllist [0], ptrsct, .hldsp [0]);
		    !
		    ! Write the prefix string if any
		    !
		    IF .prestr [str$h_length] NEQ 0
		    THEN
			fmttxt (.prestr [str$h_length], .prestr [str$a_pointer]);

		    !
		    ! Write the entity number
		    !
		    fmttxt (.lensct, CH$PTR (txtsct));
		    !
		    ! Write the suffix string if any
		    !
		    IF .sfxstr [str$h_length] NEQ 0
		    THEN
			BEGIN

			IF CH$NEQ(1,CH$PTR (UPLIT(%C':')),
			    .sfxstr [str$h_length], .sfxstr [str$a_pointer])
			THEN
			    fmttxt (.sfxstr [str$h_length], .sfxstr [str$a_pointer]);

			END;

		    IF NOT .cmdblk [contents$v_tms11] THEN write_char (%C' ', counts_visually);
		    END;

		IF .cmdblk [contents$v_tms11]
		THEN
		    write_char (%C'@')
		ELSE
		    pad ((.indents [0] + .indents [1] - .extlin));

		!
		! Generate the page number so as to get its length.
		! This is needed so that the proper number of dots can be supplied.
		!
		ptrpag = CH$PTR (txtpag);

		IF NOT .cmdblk [contents$v_standard_page]
		THEN
		    BEGIN
		    !
		    ! Use the running page counter instead of a real page number.
		    !
		    lenpag = pacbas (.pagen [sct_run_page], ptrpag, 10);
		    END
		ELSE
		    BEGIN
		    !
		    ! Supply the usual page number.
		    !
		    lenpag = pacpag (pagen, ptrpag);
		    END;

		!
		! Set limit beyond which words must be wrapped
		!
		rmargin = .cmdblk [contents$g_page_width] - .lenpag - 1;
		wrap = .extlin;
		!
		! Scan text(if any) and put it(may be null caption) onto the line.
		!
		fmttxt (.txtlen, CH$PTR (.iob [iob$a_data]));
		!
		! Insert page reference into line if desired.
		!
		insref ();
		!
		! Now actually put this line of text into the file
		!
		put ((.intlin, CH$PTR (line)));
		clr_line ();
		END;

	    TES;

	END;

    $xpo_close (iob = .iob, options = remember);
    END;

%SBTTL 'STCHDR - Process the .SEND TOC n captions temp file'
GLOBAL ROUTINE stchdr : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the temp file, which contains page references
!	and .SEND TOC records.
!
!	The .SEND TOC records are formatted into captions.
!
! FORMAL PARAMETERS:
!
!	None
!
! IMPLICIT INPUTS:
!
!	nxtstc	- next .SEND TOC "n" value to process
!	cmdblk	- command line information block
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN
    !
    ! Walk through the file until there are no more .SEND TOC "n"
    ! groups left to process only if we are processing HL 1's
    !
    WHILE (.nxtstc NEQ infinity) AND (.cmdblk [contents$g_headers] NEQ 0) DO
	BEGIN

	LOCAL
	    stcn,
	    first_record;

	first_record = true;
	stcn = .nxtstc;				! Value we're processing this time
	nxtstc = infinity;			! Value to process next time
	$xpo_open (iob = stciob, options = input, attributes = BINARY
	    %IF %BLISS (BLISS32) %THEN , failure = open_error %FI
	);

	WHILE $xpo_get (iob = stciob, fullwords = 2) EQL xpo$_normal DO
	    BEGIN
	    !
	    ! Process a record group
	    !
	    BIND
		record_header = .stciob [iob$a_data] : VECTOR;

	    major = .record_header [0];
	    minor = .record_header [1];

	    SELECTONE true OF
		SET

		[(.major EQL maj_runoff) AND (.minor EQL min_page)] :
		    BEGIN
		    !
		    ! Process a page reference
		    !
		    $xpo_get (iob = stciob, fullwords = page_sct_size);
		    BEGIN

		    BIND
			page_ref = .stciob [iob$a_data] : VECTOR;

		    MAP
			pagen : VECTOR;

		    INCR i FROM 0 TO page_sct_size - 1 DO
			pagen [.i] = .page_ref [.i];

		    END;
		    END;

		[(.major EQL maj_send) AND (ABS (.minor) NEQ .stcn)] :
		    BEGIN
		    !
		    ! A .SEND TOC with a value of n which does not match the
		    ! value we're processing. Remember it if it is the smallest
		    ! one which is larger than the value we're processing.
		    !
		    IF ABS (.minor) GTR .stcn THEN nxtstc = MIN (ABS (.minor), .nxtstc);

		    !
		    ! Now skip over the text if any
		    !
		    $xpo_get (iob = stciob, fullwords = 1);

		    IF .(.stciob [iob$a_data]) NEQ 0
		    THEN
			$xpo_get (iob = stciob,
			    fullwords = CH$ALLOCATION (.(.stciob [iob$a_data])));

		    END;

		[(.major EQL maj_send) AND (.minor EQL .stcn)] :
		    BEGIN
		    !
		    ! A caption title
		    !
		    LOCAL
			ptr,
			len;

		    clr_line ();
		    line_indent = .indents [0];
		    extlin = .line_indent;
		    wrap = .indents [0] + .indents [1];
		    rmargin = .cmdblk [contents$g_page_width];
		    major = maj_runoff;		! Make .SEND TOC +n look like a caption.

		    IF .first_record AND .stcn LEQ 3
		    THEN
			BEGIN
			!
			! First one seen - generate title
			!
			IF .cmdblk [contents$v_tms11]
			THEN
			    BEGIN

			    BIND
				tms_titles = UPLIT (0, tms_ex, tms_fg, tms_tb) : VECTOR;

			    put ('');

			    IF .hl_n NEQ 0 THEN put ('[va15]');

			    put ($str_concat ('*c0n*', .tms_titles [.stcn], '@@'));
			    END
			ELSE
			    BEGIN

			    BIND
				rno_titles = UPLIT (0, rno_ex, rno_fg, rno_tb) : VECTOR,
				title = .rno_titles [.stcn] : $str_descriptor ();

			    put ('.TEST PAGE 7');
			    IF .hl_n NEQ 0 THEN put ('.SK2') ELSE put ('.SK1');

			    IF .indents [0] NEQ 0
			    THEN
				put ($str_concat ('.I-', $str_ascii (.indents [0])));

			    put (title);
			    put ('.BLANK');
			    END;

			first_record = false;
			END;

		    hl_n = 1;

		    IF .cmdblk [contents$v_tms11] THEN literal_text ('*c1n*');

		    !
		    ! Process the record
		    !
		    $xpo_get (iob = stciob, fullwords = 1);
		    len = .(.stciob [iob$a_data]);
		    $xpo_get (iob = stciob, fullwords = CH$ALLOCATION (.len));
		    ptr = CH$FIND_CH (.len, CH$PTR (.stciob [iob$a_data]), %C',');

		    IF .cmdblk [contents$v_include_sections]
		    THEN
			BEGIN
			!
			! Generate a section number if the user requested one.
			!
			IF NOT CH$FAIL (.ptr)
			THEN
			    BEGIN
			    !
			    ! User supplied a section number
			    !
			    LOCAL
				sec_l,
				sec_p;

			    sec_p = CH$PTR (.stciob [iob$a_data]);
			    sec_l = CH$DIFF (.ptr, .sec_p);
			    strip (sec_l, sec_p);

			    IF .sec_l NEQ 0
			    THEN
				BEGIN
				!
				! User specified a non-null section number
				!
				IF .pagen [sct_typ] NEQ 0
				THEN
				    BEGIN
				    !
				    ! Document is divided into sections
				    !
				    ptrsct = CH$PTR (txtsct);
				    lensct = pacsec (pagen, ptrsct);
				    fmttxt (.lensct, CH$PTR (txtsct));
				    fmttxt (1, CH$PTR (UPLIT ('-')));
				    END;

				fmttxt (.sec_l, .sec_p);

				IF NOT .cmdblk [contents$v_tms11] 
				THEN 
				    write_char (%C' ', counts_visually);

				END;

			    END;

			END;

		    IF .cmdblk [contents$v_tms11]
		    THEN
			write_char (%C'@')
		    ELSE
			pad ((.indents [0] + .indents [1] - .extlin));

		    !
		    ! Generate page number to get its length.
		    !
		    ptrpag = CH$PTR (txtpag);

		    IF NOT .cmdblk [contents$v_standard_page]
		    THEN
			BEGIN
			!
			! Use running page number
			!
			lenpag = pacbas (.pagen [sct_run_page], ptrpag, 10);
			END
		    ELSE
			BEGIN
			!
			! Supply the usual page number
			!
			lenpag = pacpag (pagen, ptrpag);
			END;

		    rmargin = .cmdblk [contents$g_page_width] - .lenpag - 1;
		    wrap = .extlin;
		    !
		    ! Process the text
		    !
		    IF CH$FAIL (.ptr)
		    THEN
			ptr = CH$PTR (.stciob [iob$a_data])
		    ELSE
			BEGIN
			!
			! There was a section number in the line. Point past
			! the comma and update the length.
			!
			ptr = CH$PLUS (.ptr, 1);
			len = .len - CH$DIFF (.ptr, CH$PTR (.stciob [iob$a_data]));
			END;

		    strip (len, ptr);
		    fmttxt (.len, .ptr);
		    !
		    ! Insert page reference into page if desired.
		    !
		    insref ();
		    !
		    ! Write line to output file
		    !
		    put ((.intlin, CH$PTR (line)));
		    clr_line ();
		    END;

		[(.major EQL maj_send) AND (.minor EQL -.stcn)] :
		    BEGIN
		    !
		    ! Insert directly into .RNT file
		    !
		    LOCAL
			len;

		    $xpo_get (iob = stciob, fullwords = 1);
		    len = .(.stciob [iob$a_data]);
		    $xpo_get (iob = stciob, fullwords = CH$ALLOCATION (.len));
		    insrnt (.len, CH$PTR (.stciob [iob$a_data]));
		    END;

		TES;

	    END;

	$xpo_close (iob = stciob, options = remember);
	END;

    END;

%SBTTL 'STRIP - Strip leading and trailing whitespace from text'
ROUTINE strip (l_addr, p_addr) : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine strips leading and trailing whitespace from the input string
!
! FORMAL PARAMETERS:
!
!	l_addr	- address of length of string
!	p_addr	- address of CH$PTR to string
!
! IMPLICIT INPUTS:
!
!	None
!
! IMPLICIT OUTPUTS:
!
!	The length and string pointer are modified to reflect stripped whitespace
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    LOCAL
	len,
	ptr;

    len = ..l_addr;
    ptr = ..p_addr;

    DECR i FROM .len TO 1 DO
	BEGIN
	!
	! Remove leading whitespace from section number
	!
	LOCAL
	    ch;

	ch = CH$RCHAR (.ptr);

	IF (.ch EQL %C' ') OR (.ch EQL tab)
	THEN
	    BEGIN
	    len = .len - 1;
	    ptr = CH$PLUS (.ptr, 1);
	    END
	ELSE
	    EXITLOOP;

	END;

    .p_addr = .ptr;				! Set pointer to beginning of text
    ptr = CH$PLUS (.ptr, .len - 1);		! Point to last character

    DECR i FROM .len TO 1 DO
	BEGIN
	!
	! Remove trailing blanks and tabs
	!
	LOCAL
	    ch;

	ch = CH$RCHAR (.ptr);

	IF (.ch EQL %C' ') OR (.ch EQL tab)
	THEN
	    BEGIN
	    len = .len - 1;
	    ptr = CH$PLUS (.ptr, -1);
	    END
	ELSE
	    EXITLOOP;

	END;

    WHILE .len GEQ 3 DO
	BEGIN
	!
	! Strip trailing emphasis
	!
	IF CH$RCHAR (CH$PLUS (.ptr, -2)) EQL rintes
	THEN
	    BEGIN
	    len = .len - 3;
	    ptr = CH$PLUS (.ptr, -3);
	    END
	ELSE
	    EXITLOOP;

	END;

    .l_addr = .len;				! Return length of string
    END;

%SBTTL 'INSRNT - Insert text directly into .RNT file'
GLOBAL ROUTINE insrnt (len, ptr) : NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine inserts the given text directly into the .RNT file
!
! FORMAL PARAMETERS:
!
!	len - length of text
!	ptr - CH$PTR to text
!
! IMPLICIT INPUTS:
!
!	cmdblk - command line information block
!
! IMPLICIT OUTPUTS:
!
!	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	None
!
! SIDE EFFECTS:
!
!	None
!
!--

    BEGIN

    IF .len GTR 0
    THEN
	BEGIN
	!
	! There is something to process
	!
	hl_n = -1;
	clr_line ();
	line_indent = .indents [0];
	wrap = .line_indent;
	extlin = .line_indent;
	rmargin = .cmdblk [contents$g_page_width];

	IF .cmdblk [contents$v_tms11] THEN write_char (%C'<');

	fmttxt (.len, .ptr);

	IF .cmdblk [contents$v_tms11] THEN write_char (%C'>');

	put ((.intlin, CH$PTR (line)));
	clr_line ();
	END;

    END;

END						! End of module
ELUDOM
