MODULE BAS$GETRFA (				! Get RFA from RAB
		IDENT = '1-004'		! File: BASGETRFA.B32 Edit: KC1004
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Basic Language Support
!
! ABSTRACT:
!
!	BAS$GETRFA will fetch the RFA stored in the RAB.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Pamela Levesque, CREATION DATE: 2-Jun-1982
!
! MODIFIED BY:
!
! 1-001	- Original.  PLL 02-Jun-1982
! 1-002 - Make routine global.  PLL 3-Jun-1982
! 1-003 - RFA is passed by ref.  Also, give an error if there is no rfa.
!	  PLL 4-Jun-1982
! 1-004 - Set up ISB$A_USER_FP so the unwind in the error handler works
!         properly.  KC 12-Jun-1984.
!--


%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!
!	NONE
!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    BAS$GETRFA : NOVALUE;				! Get RFA from RAB

!
! INCLUDE FILES:
!

LIBRARY 'RTLSTARLE';				! System symbols, typically from SYS$LIBRARY:STARLET.L32

REQUIRE 'RTLIN:RTLPSECT';			! Define PSECT declarations macros

REQUIRE 'RTLML:OTSISB';

REQUIRE 'RTLML:OTSLUB';

REQUIRE 'RTLIN:OTSLNK';
!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!
DECLARE_PSECTS (BAS);				! Declare PSECTs for BAS$ facility
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
	BAS$$STOP_IO : NOVALUE,			! Signal fatal I/O error
	BAS$$CB_PUSH : JSB_CB_PUSH NOVALUE,	! Load register CCB
	BAS$$CB_POP : JSB_CB_POP NOVALUE;	! Done with register CCB

EXTERNAL LITERAL 				! Condition value symbols
	BAS$K_NO_CURREC : UNSIGNED (8),		! No current record
	BAS$K_ILLILLACC : UNSIGNED (8),		! Illegal or illogical access
	BAS$K_IO_CHANOT : UNSIGNED (8);		! I/O channel not open


%SBTTL 'BAS$GETRFA - Get RFA from RAB'
GLOBAL ROUTINE BAS$GETRFA (			! Get RFA from RAB
	UNIT,					! logical unit number
	RFA					! addr in which to return RFA
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the RFA (record file address) of the last record
!	accessed for the specified channel.  The 6 byte RFA is stored in the
!	location passed as a dtype z descriptor.
!
! CALLING SEQUENCE:
!
!	BAS$GETRFA (UNIT.rlu.v, RFA.wx.r)
!
! FORMAL PARAMETERS:
!
!	UNIT.rlu.v	logical unit number
!	RFA.wx.r	where to store the RFA
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	Signals any errors
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    GLOBAL REGISTER
	CCB = K_CCB_REG : REF BLOCK [, BYTE];

    BUILTIN
	FP;

    LOCAL
	FMP : REF BLOCK [, BYTE];

    FMP = .FP;
!+
! Allocate the LUB/ISB/RAB for this unit if necessary.
!-
    BAS$$CB_PUSH (.UNIT, LUB$K_ILUN_MIN);
    
!+
! Load the CCB with the user's FP so that an unwind in the
! error handler works properly.
!-
    CCB [ISB$A_USER_FP] = .FMP [SF$L_SAVE_FP];
!+
! If the channel is not open, give an error.  There's no RFA for
! channel 0.
!-
    IF (NOT .CCB [LUB$V_OPENED]) THEN BAS$$STOP_IO (BAS$K_IO_CHANOT);

!+
! No RFA for virtual files.
!-
    IF .CCB [LUB$V_VA_USE] THEN BAS$$STOP_IO (BAS$K_ILLILLACC);

!+
! Return the RFA.
!-
    IF .CCB [RAB$L_RFA0] NEQ 0
    THEN
        CH$MOVE (6, CCB [RAB$W_RFA], .RFA)
    ELSE
        BEGIN
	BAS$$STOP_IO (BAS$K_NO_CURREC)
	END;
!+
! Pop the CCB off the I/O system.
!-
    BAS$$CB_POP ();
  
    END;					! End of routine BAS$GETRFA
!<BLF/PAGE>

END						! End of module BAS$GETRFA

ELUDOM
