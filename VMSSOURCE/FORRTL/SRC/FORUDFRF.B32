MODULE FOR$$UDF_RF (%TITLE 'FORTRAN Read Formatted UDF'
		IDENT = '1-043'		! File: FORUDFRF.B32  Edit: SBL1043
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:  FORTRAN Support Library - not user callable
!
! ABSTRACT:
!
!	This module implements FORTRAN Read Formatted I/O
!	statements (sequential access - S, direct access - D,
!	DECODE - M) at the User data Formatter level of
!	abstraction (UDF level is 2nd level). This module
!	calls the Read/write independent format
!	interpreter (FOR$INTERP) to decode the compiled format
!	statement. This module calls the appropriate read record
!	routine at the record handling level of abstraction (REC
!	level is 3rd level) to read a record.
!
! ENVIRONMENT:  User access mode; reentrant AST level or not.
!
! AUTHOR:  Thomas N. Hastings;	 CREATION DATE: 20-Feb-77
!
! MODIFIED BY:
! [Previous edit history removed.  SBL 29-Oct-1982]
! 1-036 - Instead of using zero ELEM_SIZE to determine a call from
!	  FOR$$UDF_RF9, use a zero ELEM_TYPE.  This allows
!	  zero-length strings to be processed correctly.
!	  SPR 11-30127  SBL 22-May-1980
! 1-037- Use new F_floating input conversion routine, OTS$CVT_T_F.
!	  JAW 14-Apr-1981
! 1-038 - Convert FOR$$FMT_INTRP1 to JSB linkage.  JAW 29-Jul-1981
! 1-039 - Use OTS$CVT_T_F instead of OTS$CVT_T_D when format is D/E/F/G
!	  and element is not floating (FORVARMIS).  JAW 05-Aug-1981
! 1-040 - Add require file FORMSG.B32 in preparation for enhanced error
!	  reporting.  JAW 10-Aug-1981
! 1-041 - Cite text in error and current record number when signaling
!	  INPCONERR.  JAW 27-Aug-1981
! 1-042 - For indexed and internal files, use a secondary message that doesn't
!	  put out a record number (INVTEX).  DGP  21-Dec-1981
! 1-043 - Change to use FORPROLOG.REQ.  Make references to OTS$CVT routines PIC.
!	  SBL 29-Oct-1982
!--


!
! PROLOGUE FILE:
!

REQUIRE 'RTLIN:FORPROLOG';			! FOR$ definitions
SWITCHES ZIP;					! Optimize for speed

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    FOR$$UDF_RF0 : JSB_UDF0 NOVALUE,		! initialization
    FOR$$UDF_RF1 : CALL_CCB NOVALUE,		! format one user I/O list element
    FOR$$UDF_RF9 : JSB_UDF9 NOVALUE,		! end of user I/O list - finish
    DO_READ : JSB_DO_READ NOVALUE,		! do per-record formatting and read
    MOVE_CHAR : NOVALUE,			! Same as CH$MOVE
    COPY_CHAR;					! Same as CH$COPY

!
! MACROS:
!

MACRO
    RF_EOLST =
 0,7,1,0%,					! Check for end of user I/O list
    RF_CHECKW =
 0,6,1,0%,					! Check for w positions left
    RF_SHORT =
 0,5,1,0%,					! Check for short string
!	    0,4,1,0%	  spare
    RF_DISPAT =
 0,0,4,0%;					! CASE index for dispatch

MACRO 						! Attribute packing macro for attribute table
    A (E, W, S, NDX) =
 (E^7 + W^6 + S^5 + NDX)%;

!
! EQUATED SYMBOLS:
!
!    NONE
!
! OWN STORAGE:
!

BIND
    RF_ACT = 					! Action table for UDF_RF1, UDF_RF9 format codes
!+
! The format codes are structured as follows:
! 0 - do nothing
! 1 - call intermediate record processing routine
! 2 - do nothing
! 3 - not used
! 4 - move right (old X format)
! 5 - copy Hollerith
! 6 - return no. of character positions remaining
! 7 - copy alpha strings
! 8 - all integer format processing
! 9 - all floating format
!-
	UPLIT BYTE(

!	  E C S	  EOLST - End of I/O list
!	  O H H	  CHECKW - Set up descriptor; check field width
!	  L E O	  SHORT - Check for short input field
!	  S C R
!	  T K T
!	    W		 dec	 hex
	A(1,0,0, 0),	! ER	= 0,	! 00	! format syntax error
	A(0,0,0, 0),	! LP	= 1,	! 01	! ( - format reversion point
	A(0,0,0, 0),	! NLP	= 2,	! 02	! n( - left paran of repeat group
	A(0,0,0, 0),	! )	= 3,	! 03	! ) - right paren of repeat group
				! MAINTENANCE NOTE: the above should not be seen by this module,
				! except look ahead in FOR$$UDF_RF9
	A(1,0,0, 1),	! EOF	= 4,	! 04	! ) - End of format
	A(0,0,0, 1),	! SLS	= 5,	! 05	! / - Record separator
	A(0,0,0, 2),	! DLR	= 6,	! 06	! $ - Dollar sign: terminal I/O
	A(1,0,0, 0),	! CLN	= 7,	! 07	! : - Colon: terminate if end of list
	0,		! UNUSED  8
	0,0,0,		! Not seen here  9:11
	A(0,0,0, 0),	! _P	= 12,	! 0C	! sP - signed scale factor
	A(0,0,0, 0),	! _T	= 13,	! 0D	! Tn - Tab Set
			! Above code only seen by lookahead
	A(0,0,0, 4),	! _X	= 14,	! 0E	! nX - Skip n columns
	A(0,1,0, 5),	! _H	= 15,	! 0F	! nHcccc - Hollerith
	0,0,		! Not seen here  16:17
	A(0,0,0, 0),	! TL	= 18,	! 12	! TLn - Tab left n
	A(0,0,0, 0),	! TR	= 19,	! 13	! TRn - Tab right n
			! Above two only seen by lookahead
	A(1,0,0, 6),	! _Q	= 20,	! 14	! Q
	A(1,1,0, 7),	! _A	= 21,	! 15	! nAw - Alpha numeric
	A(1,1,1, 8),	! _L	= 22,	! 16	! nLw - Logical
	A(1,1,1, 8),	! _O	= 23,	! 17	! nOw - Octal
	A(1,1,1, 8),	! _I	= 24,	! 18	! nIw - Integer
	A(1,1,1, 8),	! _Z	= 25,	! 19	! nZw - Hexadecimal
	A(1,1,1, 8),	! XO	= 26,	! 1A	! Ow.m - Extended O
	A(1,1,1, 8),	! XI	= 27,	! 1B	! Iw.m - Extended I
	A(1,1,1, 8),	! XZ	= 28,	! 1C	! Zw.m - Extended Z
	0,		! UNUSED  29
	A(1,1,1, 9),	! _F	= 30,	! 1E	! nFw.d - Fixed format
	A(1,1,1, 9),	! _E	= 31,	! 1F	! nEw.d - Scientific notation format
	A(1,1,1, 9),	! _G	= 32,	! 20	! nGw.d - General format
	A(1,1,1, 9),	! _D	= 33,	! 21	! nDw.d - Double Precision format
	A(1,1,1, 9),	! XE	= 34,	! 22	! nEw.dEe
	A(1,1,1, 9),	! XG	= 35,	! 23	! nGw.dEe
			! The following codes are used for lookahead only
	0,0,0,0,0,	! UNUSED  36:40
	A(1,0,0, 0),	! _DA	= 41	! 29	! nA - default A
	A(1,0,0, 0),	! _DL	= 42	! 2A	! nL - default L
	A(1,0,0, 0),	! _DO	= 43	! 2B	! nO - default O
	A(1,0,0, 0),	! _DI	= 44	! 2C	! nI - default I
	A(1,0,0, 0),	! _DZ	= 45	! 2D	! nZ - default Z
	0,0,0,0,	! UNUSED  46:49
	A(1,0,0, 0),	! _DF	= 50	! 32	! nF - default F
	A(1,0,0, 0),	! _DE	= 51	! 33	! nE - default E
	A(1,0,0, 0),	! _DG	= 52	! 34	! nG - default G
	A(1,0,0, 0)	! _DD	= 53	! 35	! nD - default D
	) : VECTOR [54, BYTE];

!+
! Declare table of conversion routine addresses.  This will be filled in
! by FOR$$UDF_RF0 upon first entry.  Entries 0-3 are the integer conversion
! routines for the formats L, O, I and Z, respectively.  The only other
! elements filled in are those corresponding to datatypes F, D, G and H;
! these elements are indexed by the DSC$K datatype code.
!-

OWN
    AA_IN_CVT: VECTOR [DSC$K_DTYPE_H+1, LONG],
    CVT_INIT: INITIAL (0);			! 1 if array initialized

!
! EXTERNAL REFERENCES:
!

EXTERNAL
    FOR$$AA_REC_PR0 : VECTOR,			! PIC array of record processor
    						! procedure-initializations in REC
    						! level of abstraction. Indexed by
    						! I/O statement type (ISB$B_STTM_TYPE)
    FOR$$AA_REC_PR1 : VECTOR;			! PIC array of record processor procedures

						! Read a record in REC level of
						! abstraction. Indexed by I/O statement
						! type (ISB$B_STTM_TYPE)

EXTERNAL ROUTINE
    OTS$CVT_T_F,				! F-only input conversion
    OTS$CVT_T_D,				! F and D input conversion
    OTS$CVT_T_G,				! G input conversion
    OTS$CVT_T_H,				! H input conversion
    OTS$CVT_TL_L,				! L format input conversion
    OTS$CVT_TO_L,				! O format input conversion
    OTS$CVT_TI_L,				! I format input conversion
    OTS$CVT_TZ_L,				! Z format input conversion
    FOR$$FMT_INTRP0 : JSB_FMT0 NOVALUE,		! initialize format interpreter
    FOR$$FMT_INTRP1 : JSB_FMT1 NOVALUE,		! get next data format code
    						! or input-output format code
    FOR$$SIGNAL : NOVALUE,			! convert FORTRAN err # to
    						! VAX error # and SIGNAL
    FOR$$SIGNAL_STO : NOVALUE;			! convert FORTRAN err # to

						! VAX error # and SIGNAL_STOP



GLOBAL ROUTINE FOR$$UDF_RF0 			! Read formatted UDF initialization
    : JSB_UDF0 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
! Initialize read Formatted User data formatter (UDF)
!
! CALLING SEQUENCE:
!
!	JSB FOR$$UDF_RF0
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	CCB			Pointer to current logical unit block
!
!	ISB$B_STTM_TYPE		I/O statement type code - set by
!				each I/O statement initialization
!
! IMPLICIT OUTPUTS:
!
!	LUB$A_BUF_BEG		Adr. of first byte of input data buffer
!	LUB$A_BUF_PTR		Adr. of next byte of input
!				data buffer
!	LUB$A_BUF_HIGH		Adr. of high water byte in input buffer on this
!				I/O statement
!	LUB$A_BUF_END		Adr. +1 of last char position allocated
!				to input buffer
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Initializes array AA_IN_CVT upon first entry.
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF $FOR$CCB_DECL;

    !+
    ! Initialize Record processing level of abstraction.
    ! Set pointer to current (LUB$A_BUF_PTR)  and last+1
    ! (LUB$A_BUF_END) character position for user data in
    ! input buffer
    !-

    JSB_REC0 (FOR$$AA_REC_PR0 + .FOR$$AA_REC_PR0 [.CCB [ISB$B_STTM_TYPE] - ISB$K_FORSTTYLO + 1]);

    !+
    ! Initialize character pointer to first position for user
    ! data in input buffer - needed only for T AND $ formats
    !-

    CCB [LUB$A_BUF_BEG] = .CCB [LUB$A_BUF_PTR];

    !+
    ! Initialize Format interpreter
    !-

    FOR$$FMT_INTRP0 ();

    !+
    ! Initialize character pointer to highest position written in
    ! user data buffer for this record.  T format may position to
    ! the left.
    !-

    CCB [LUB$A_BUF_HIGH] = .CCB [LUB$A_BUF_PTR];

    !+
    ! All other ISB locations and flags have already been
    ! initialized to 0 or a specified value by the I/O statement
    ! initialization for this I/O statement.
    !-

    !+
    ! If array of conversion routine addresses has been intialized, then
    ! return.  Otherwise, initialize it.
    !-

    IF .CVT_INIT
    THEN
	RETURN;

    !+
    ! Store the conversion routine addresses in AA_IN_CVT.
    !-

    AA_IN_CVT [_L - _L] = OTS$CVT_TL_L;		! L format integer conversion
    AA_IN_CVT [_O - _L] = OTS$CVT_TO_L;		! O format integer conversion
    AA_IN_CVT [_I - _L] = OTS$CVT_TI_L;		! I format integer conversion
    AA_IN_CVT [_Z - _L] = OTS$CVT_TZ_L;		! Z format integer conversion
    AA_IN_CVT [DSC$K_DTYPE_F] = OTS$CVT_T_F;	! F_floating conversion
    AA_IN_CVT [DSC$K_DTYPE_D] = OTS$CVT_T_D;	! D_floating conversion
    AA_IN_CVT [DSC$K_DTYPE_G] = OTS$CVT_T_G;	! G_floating conversion
    AA_IN_CVT [DSC$K_DTYPE_H] = OTS$CVT_T_H;	! H_floating conversion
    CVT_INIT = 1;				! Set initialized flag

    RETURN;
    END;					! End of FOR$$UDF_RF0 routine


GLOBAL ROUTINE FOR$$UDF_RF1 (			! Format one user input element
    ELEM_TYPE, 					! Type code of user I/O list element
    ELEM_SIZE, 					! No. of addressable units in element
    ELEM_ADR)					! Adr. of element
    : CALL_CCB NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$UDF_RF1  extracts the next field (W characters fromkt
!	format statement, or up to next comma in input buffer, or end of
!	input buffer, whichever occurs first) from the input buffer and
!	converts it according to the type specified by the format
!	statement and the size specified by the data type of the user
!	I/O list element.
!	FOR$UDF_RF1 and the format interpreter
!	(FOR$$FMT_INTRP1) interpret all format codes until the
!	first I/O list element transmitting format code is
!	encountered and then continues up to but not including the next
!	data transmitting format code.
!
!	FOR$$UDF_RF1 is also called by FOR$$UDF_RF9 if and only if
!	there were no I/O list items to transmit, thereby causing the
!	non-data transmitting format codes to be executed.
!
! CALLING SEQUENCE:
!
!	CALL FOR$$UDF_RF1 (elem_type.rlu.v, elem_size.rlu.v, elem_adr.wx.r)
!
! FORMAL PARAMETERS:
!
!	ELEM_TYPE.rlu.v		Type code of user I/O list
!				element. Form: ELEM_TYPE_x
!				x = B,W,L,WU,LU,F,D,G,H,FC,DC,GC or T.
!				If zero, then this is an end-of-list
!				call from FOR$$UDF_RF9.
!	ELEM_SIZE.rlu.v		Size of user I/O list element
!				in addressable machine units (VAX, bytes)
!	ELEM_ADR.wx.r		Adr. of user I/O list element
!				x = datatype
!
!
! IMPLICIT INPUTS:
!
!	CCB			Pointer to current logical unit block
!	ISB$B_STTM_TYPE		I/O statement type code - set by each
!				I/O statement initialization
!
!	 The following ISB locations are set only by previous calls to
!	 FOR$$UDF_RF{0,1}, i.e., are effectively OWN.
!
!	LUB$A_BUF_BEG		Pointer to first char. position in
!				user data part of input buffer
!	LUB$A_BUF_PTR		Pointer to next char. position
!				in user data part of input buffer
!	LUB$A_BUF_END		Pointer to last+1 char. position
!				in user data part of input buffer
!	The following ISB locations are set by the format interpreter
!	 (FOR$$FMT_INTRP1) which this module calls:
!
!	ISB$A_FMT_PTR		Pointer to next char. position
!				in user data part of input buffer
!				Used only in H format.
!	ISB$W_FMT_W		Field width (w)
!	ISB$B_FMT_D		No. of fraction digits (d)
!	ISB$B_FMT_E		No. of exponent characters (e)
!	ISB$B_FMT_P		Signed scale factor (p)
!
! IMPLICIT OUTPUTS:
!
!	ISB$A_FMT_PTR		Pointer to next char. position
!				in compiled format character string
!				Changed only for H format.
!
!	 The following ISB locations are set only by previous calls
!	 to FOR$$UDF_RF{0,1}, i.e., are effectively OWN.
!
!	LUB$A_BUF_PTR		Pointer to next char. position
!				in user data part of input buffer
!	ISB$B_ERR_NO		FOR$_INPCONERR (43='INPUT CONVERSION ERROR') -
!				overflowed field is filled with *'s.
!				FOR$_FORVARMIS (61='FORMAT/VARIABLE-TYPE MISMATCH')
!
! FUNCTIONAL VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF $FOR$CCB_DECL;

    MAP
	ELEM_ADR : REF VECTOR;			! element is call-by-reference

    GLOBAL REGISTER
	EL_SIZE = 10,				! Element size
	DT_SEEN = 9,				! Data transmitter seen
	FMT_CODE = 8 : BLOCK [1, LONG];		! Format code

    LOCAL
	ACT : BLOCK [1, LONG],			! Action table entry for format code
	BUFPTR,					! Input buffer pointer from ISB
	FMT_W,					! Input field width from ISB
	DSC : BLOCK [8, BYTE];			! Static string desciptor for

    						! output field

    EL_SIZE = .ELEM_SIZE;			! Fetch first argument

    !+
    ! Set DT_SEEN to zero unless this is a call from FOR$$UDF_RF9
    ! (no items in I/O list) in which case set DT_SEEN to 1 so that
    ! we stop on the next data transmitter.
    !-

    IF .ELEM_TYPE EQL 0 THEN DT_SEEN = 1 ELSE DT_SEEN = 0;

    !+
    ! Execute format items until we come across one which calls for
    ! an I/O list item that we don't have.
    !-

    WHILE 1 DO

    !+
    ! Get next format code requiring input interpretation:
    !	1.  If we are in a repeated format code (nI, not n(I)),
    !	    save a call to the format interpreter by getting the
    !	    stored code ourselves.  If this would mean that we
    !	    exit, do so without decrementing the repeat count.
    !
    !	2.  Otherwise, call the format interpreter to get the next
    !	    format code.
    !
    !	3.  If this format code is a data transmitter (or : or EOF),
    !	    and we have already seen a data transmitter, exit.  It
    !	    will still be there if we come back.
    !
    ! Dispatch on format code and select appropriate actions.
    !-

	BEGIN

	IF .CCB [ISB$W_FMT_REP] GTR 1 AND .CCB [ISB$B_FMT_CODE] LSSU _DA
	THEN
	    BEGIN
	    FMT_CODE = .CCB [ISB$B_FMT_CODE];
	    ACT = .RF_ACT [.FMT_CODE];

	    IF .DT_SEEN
	    THEN

		IF .ACT [RF_EOLST] THEN EXITLOOP;

	    CCB [ISB$W_FMT_REP] = .CCB [ISB$W_FMT_REP] - 1;
	    END
	ELSE
	    BEGIN

	    !+
	    ! If DT_SEEN is true, then we only want to know if the next
	    ! format code would transmit a data item.  Rather than have
	    ! the high overhead of calling the format interpreter, we
	    ! can look ahead into the format for this information.  We
	    ! can't make a 100% determination, so if the format is not
	    ! an "EOLST" type, call the format interpreter anyway.
	    ! This is a speed optimization.  If necessary, the code
	    ! between the "!**"s can be removed with no functionality loss.
	    !-

	    !**

	    IF .DT_SEEN
	    THEN
		BEGIN

		LOCAL
		    P;				! Pointer into format

		P = .CCB [ISB$A_FMT_PTR];
		FMT_CODE = CH$RCHAR (.P);	! Get next format code
		FMT_CODE [V_FMT_REPRE] = 0;	! Clear bit for comparison
		ACT = .RF_ACT [.FMT_CODE];

		IF .ACT [RF_EOLST] THEN EXITLOOP;	! End of list type

		END;

	    !**
	    FOR$$FMT_INTRP1 ();			! Call format interpreter.
	    					! Implicit arguments are EL_SIZE
	    					! and DT_SEEN.  Implicit result
	    					! is FMT_CODE.
	    ACT = .RF_ACT [.FMT_CODE];

	    IF .DT_SEEN AND .ACT [RF_EOLST] THEN EXITLOOP;

	    END;

	!+
	! All data generating format codes (A,L,O,Z,I
	! F,E,G,D, except Q plus H):
	! Setup string descriptor to field of width W.
	! (ISB$W_FMT_W) and next char position
	! for output (LUB$A_BUF_PTR) in
	! output buffer. Check for field extending beyond
	! end of buffer and set DSC[DSC$W_LENGTH] in
	! string descriptor to no. of characters which remain
	! in input buffer if would run off the end.
	!-

	IF .ACT [RF_CHECKW]
	THEN
	    BEGIN
	    DSC [DSC$W_LENGTH] = .CCB [ISB$W_FMT_W];
	    DSC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
	    DSC [DSC$B_CLASS] = DSC$K_CLASS_S;
	    DSC [DSC$A_POINTER] = .CCB [LUB$A_BUF_PTR];
	    CCB [LUB$A_BUF_PTR] = CH$PLUS (.CCB [LUB$A_BUF_PTR], .CCB [ISB$W_FMT_W]);

	    IF (.CCB [LUB$A_BUF_PTR] GTR .CCB [LUB$A_BUF_END])
	    THEN
		BEGIN				! Field would extend beyond end of buffer - reset
		DSC [DSC$W_LENGTH] = MAX (CH$DIFF (.CCB [LUB$A_BUF_END], .DSC [DSC$A_POINTER]), 0);
		END;

	    !+
	    ! Short input field check, i.e., a field terminated
	    ! by an explicit comma in the data earlier
	    ! than the width of field specified by the format statement.
	    ! If a short field, reduce to include up to but not including
	    ! the comma, but advance character pointer (LUB$A_BUF_PTR)
	    ! beyond the comma, so it will not be found on next element.
	    ! A zero length field is treated as a string of spaces.
	    !-

	    IF .ACT [RF_SHORT]
	    THEN
		BEGIN

		LOCAL
		    P;				! temporary character pointer

		P = CH$FIND_CH (.DSC [DSC$W_LENGTH], .DSC [DSC$A_POINTER], %C',');

		IF .P NEQ 0
		THEN
		    BEGIN
		    DSC [DSC$W_LENGTH] = CH$DIFF (.P, .DSC [DSC$A_POINTER]);
		    CCB [LUB$A_BUF_PTR] = CH$PLUS (.P, 1);
		    END;

		END;				! End of short field check

	    END;				! End of CHECKW

	CASE .ACT [RF_DISPAT] FROM 0 TO 9 OF
	    SET

	    [0] :

		!+
		! Colon:  Only get here if not end of user I/O list,
		! so keep on looking for a data transmitting format code.
		!-

	    ;					! do nothing

	    [1] :

		!+
		! End of format or / format code seen:
		! Call record processing level (REC_PR1) for appropriate
		! statement type.  \\ Note that we now allow direct access
		! files to read more than one record.  \\
		! Initialize all input buffer pointer for next record
		! in this I/O statement, e.g., ISB$A_BUF_{BEG,PTR,END}
		! and ISB$V_DOLLAR = 0.
		!-

		DO_READ (FOR$$AA_REC_PR1 + .FOR$$AA_REC_PR1 [.CCB [ISB$B_STTM_TYPE] - ISB$K_FORSTTYLO + 1]);

	    [2] :

		!+
		! Dollar sign: Do nothing for read.  $ only affects write
		!-

	    ;					! do nothing

	    [3] :

		!+
		! No longer used.
		!-

	    ;

	    [4] :

		!+
		! nX
		! Move right n characters.  This format code is no longer
		! generated, but it must continue to work for old programs.
		!-

		CCB [LUB$A_BUF_PTR] = CH$PLUS (.CCB [LUB$A_BUF_PTR], .CCB [ISB$W_FMT_W]);

	    [5] :

		!+
		! nHccccc: Holerith - copy n (DSC$W_LENGTH) chars
		! from input buffer to format array. Update format
		! character pointer (ISB$A_FMT_PTR).  Format array is
		! blank padded if data in array is shorter than format.
		!-

		CCB [ISB$A_FMT_PTR] = COPY_CHAR (.DSC [DSC$W_LENGTH], .DSC [DSC$A_POINTER],
		    .CCB [ISB$W_FMT_W], .CCB [ISB$A_FMT_PTR]);

	    [6] :

		!+
		! Q format -  return no. of character positions remaining
		! in input buffer (ie., in record) as an integer.
		! Size of integer depends on size of user I/O list element data type.
		! If user element type is not integer, SIGNAL and store
		! into low order 32 bits.
		! Then exit loop and return to user program
		!-

		BEGIN

		IF .ELEM_TYPE LSSU DSC$K_DTYPE_BU OR .ELEM_TYPE GTRU DSC$K_DTYPE_Q
		THEN
		    CCB [ISB$B_ERR_NO] = FOR$K_FORVARMIS;

		(.ELEM_ADR)<0, MINU (4, .EL_SIZE)*%BPUNIT, 0> = MAX (0,
		    CH$DIFF (.CCB [LUB$A_BUF_END],
			.CCB [LUB$A_BUF_PTR]));
		DT_SEEN = 1;
		END;				! End of Q input

	    [7] :

		!+
		! nAw.d and nA formats: Copy string from input field to user data element.
		! Copy right-most characters up to datatype size and
		! blank fill remainder if any.
		!-

		BEGIN

		!+
		! If the element is greater than the format width,
		! then move the characters and blank fill.
		!-

		IF .EL_SIZE GTRU .DSC [DSC$W_LENGTH]
		THEN
		    COPY_CHAR (.DSC [DSC$W_LENGTH],
			.DSC [DSC$A_POINTER], .EL_SIZE, .ELEM_ADR)
		ELSE
		    BEGIN

		    !+
		    ! Element size is less than or equal to format width.
		    ! If less than, move rightmost characters only.  Use
		    ! non-character moves if possible.
		    !-

		    LOCAL
			ELEM_PTR,
			BUF_PTR;

		    IF .EL_SIZE LSSU .DSC [DSC$W_LENGTH]
		    THEN
			BUF_PTR = .DSC [DSC$A_POINTER] + (.DSC [DSC$W_LENGTH] - .EL_SIZE)
		    ELSE
			BUF_PTR = .DSC [DSC$A_POINTER];

		    ELEM_PTR = .ELEM_ADR;

		    CASE .EL_SIZE FROM 0 TO 8 OF
			SET

			[8] :
			    BEGIN
			    COPY_QUAD_A (BUF_PTR, ELEM_PTR);
			    END;

			[7] :
			    BEGIN
			    COPY_LONG_A (BUF_PTR, ELEM_PTR);
			    COPY_WORD_A (BUF_PTR, ELEM_PTR);
			    COPY_BYTE_A (BUF_PTR, ELEM_PTR);
			    END;

			[6] :
			    BEGIN
			    COPY_LONG_A (BUF_PTR, ELEM_PTR);
			    COPY_WORD_A (BUF_PTR, ELEM_PTR);
			    END;

			[5] :
			    BEGIN
			    COPY_LONG_A (BUF_PTR, ELEM_PTR);
			    COPY_BYTE_A (BUF_PTR, ELEM_PTR);
			    END;

			[4] :
			    BEGIN
			    COPY_LONG_A (BUF_PTR, ELEM_PTR);
			    END;

			[3] :
			    BEGIN
			    COPY_WORD_A (BUF_PTR, ELEM_PTR);
			    COPY_BYTE_A (BUF_PTR, ELEM_PTR);
			    END;

			[2] :
			    BEGIN
			    COPY_WORD_A (BUF_PTR, ELEM_PTR);
			    END;

			[1] :
			    BEGIN
			    COPY_BYTE_A (BUF_PTR, ELEM_PTR);
			    END;

			[0] :
			;

			[OUTRANGE] :
			    MOVE_CHAR (.EL_SIZE, .BUF_PTR, .ELEM_PTR);
			TES;

		    END;

		DT_SEEN = 1;
		END;

	    [8] :

		!+
		! All integer formats (L,O,I,Z) output:
		! 1) Check data type. If user I/o list element is not integer (B,W,L,WU,LU),
		! SIGNAL FOR$_FORVARMIS (61='FORMAT VARIABLE-TYPE MISMATCH').
		! unless format is not I; else store one longword.
		!-

		BEGIN

		LOCAL
		    S;				! No. of addressable units in

		! user I/O list element.

		!+
		! Compensate if extended format Iw.m, etc., which makes
		! no difference here.
		!-

		IF .FMT_CODE GEQU XO THEN FMT_CODE = .FMT_CODE - (_L + 3) ELSE FMT_CODE = .FMT_CODE - _L;

		!-

		IF (.ELEM_TYPE GEQU DSC$K_DTYPE_Q) AND (.FMT_CODE EQLU (_L - _L) OR .FMT_CODE EQLU (_I - _L))
		THEN
		    BEGIN
		    CCB [ISB$B_ERR_NO] = FOR$K_FORVARMIS;
		    S = %UPVAL;
		    END
		ELSE
		    S = .EL_SIZE;

		!+
		! 2) Call appropriate library conversion routine
		! Sign extend (I,L) or zero-extend (O,Z) result (V).
		! If value could not fit, SIGNAL FOR$_INPCONERR
		! (64='INPUT CONVERSION ERROR' - low order bits stored correctly.
		!-

		IF NOT (.AA_IN_CVT [.FMT_CODE]) (DSC, .ELEM_ADR, .S, .CCB [ISB$B_INP_FLAGS])
		THEN
		    !+
		    ! If this is an indexed or internal file, then don't 
		    ! try to put out a record number.
		    !-

		    IF (.CCB [LUB$B_ORGAN] EQL LUB$K_ORG_INDEX) OR (.CCB [LUB$W_LUN] EQL LUB$K_LUN_ENCD)
		    THEN
			FOR$$SIGNAL (FOR$K_INPCONERR, FOR$_INVTEX, 1, DSC)
		    ELSE
			FOR$$SIGNAL (FOR$K_INPCONERR, FOR$_INVTEXREC, 2, DSC, .CCB [LUB$L_LOG_RECNO] - 1);

		DT_SEEN = 1;
		END;				! End of L,O,I,Z input

	    [9] :

		!+
		! All Floating formats (F,E,G,D) input:
		!-

		BEGIN

		!+
		!  Call the appropriate conversion routine
		! If the value did not fit in field, SIGNAL FOR$_INPCONERR
		! (INPUT CONVERSION ERROR)
		!
		! Store the floating value
		!-

		!+
		! Check for correct datatype
		!-

		IF ONE_OF (.ELEM_TYPE, DSC$K_DTYPE_F, DSC$K_DTYPE_D,
		    DSC$K_DTYPE_G, DSC$K_DTYPE_H)
		THEN
		    BEGIN
		    IF NOT (.AA_IN_CVT [.ELEM_TYPE])
			(DSC, .ELEM_ADR, .CCB [ISB$B_FMT_D], .CCB [ISB$B_FMT_P],
			    .CCB [ISB$B_INP_FLAGS])
		    THEN
			!+
			! If this is an indexed or internal file, then don't 
			! try to put out a record number.
			!-
    
			IF (.CCB [LUB$B_ORGAN] EQL LUB$K_ORG_INDEX) OR 
			    (.CCB [LUB$W_LUN] EQL LUB$K_LUN_ENCD)
			THEN
			    FOR$$SIGNAL (FOR$K_INPCONERR, FOR$_INVTEX, 1, DSC)
			ELSE
			    FOR$$SIGNAL (FOR$K_INPCONERR, FOR$_INVTEXREC, 2, DSC,
				.CCB [LUB$L_LOG_RECNO] - 1);
		    END
		ELSE
		    BEGIN
		    !+
		    ! Datatype is not floating.  Convert as if F, store
		    ! correct size, and give "format/variable type mismatch"
		    ! error.
		    !-

		    LOCAL
			F_VALUE;

		    OTS$CVT_T_F (DSC, F_VALUE, .CCB [ISB$B_FMT_D],
			.CCB [ISB$B_FMT_P], .CCB [ISB$B_INP_FLAGS]);
		    (.ELEM_ADR)<0,MINU(4,.EL_SIZE)*%BPUNIT,0> = .F_VALUE;
		    CCB [ISB$B_ERR_NO] = FOR$K_FORVARMIS;
		    END;

		!+
		! Exit loop and return to user program
		!-

		DT_SEEN = 1;
		END;				! End of F,E,G,D output
	    TES;				! End of CASE (entire loop)

	END;					! End of processing

    RETURN;					! Return from FOR$$UDF_RF1 routine
    END;					! End of FOR$$UDF_RF1


ROUTINE DO_READ (				! read formatted record and do per-record proc.
    FOR$$REC_xn)				! adr. or record processing routine
    : JSB_DO_READ NOVALUE =
!+
! FUNCTIONAL DESCRIPTION:
!
!	DO_READ is a local routine which inputs the next record by calling the appropriate
!	record processing routine depending on the statement type
!	(ISB$BSTTM_TYPE) and formal parameter FOR$$REC_xn which
!	is either (1) FOR$$REC_x1 if this is not the last record
!	of the I/o statement or (2) FOR$$REC_x9 if the is the last
!	record of the I/O statement, i.e., this is the end of I/O list call.
!	Then is performs any per-record initialization.
!	Note: DO_READ is called directly from FOR$$UDF_RF9 if
!	next format byte is an end-of-format one, thus saving
!	2 expensive calls to FOR$$UDF_RF1 and FOR$$FMTIN1.  Thus
!	DO_READ has all processing needed to read a record.
!
! CALLING SEQUENCE:
!
!	JSB DO_READ (R0=for$$rec_xn.s.ar)
!
! FORMAL PARAMETERS:
!
!	FOR$$REC_xn.s.ar	Adr. of record processing routine (NOT PIC)
!
! IMPLICIT INPUTS:
!
!	OTS$$A_CUR_LUB		Pointer to current logical unit block
!				(LUB). Used to setup base pointer ISB
!				to current I/O statement block
!
! IMPLICIT OUTPUTS:
!
! The following locations are set only by previous calls
! to FOR$$UDF_RF{0,1}, i.e., are effectively OWN for this module.
!
!	LUB$A_BUF_PTR		Pointer: Set to beginning of input record
!	LUB$A_BUF_PTR		Pointer: set to beginning of input record
!	LUB$A_BUF_HIGH		Pointer: set to beginning of input recordn
!	LUB$A_BUF_END		Pointer: set to last char+1 of input record
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF $FOR$CCB_DECL;

    !+
    ! Input record.
    ! Return with new beginning and end pointers
    ! to next user data buffer to be processed as input.
    !-

    JSB_REC1 (.FOR$$REC_xn);

    !+
    ! Initialize beginning and highest pointer (T format)
    ! to the first character position in the input record buffer
    !-

    CCB [LUB$A_BUF_BEG] = .CCB [LUB$A_BUF_PTR];
    CCB [LUB$A_BUF_HIGH] = .CCB [LUB$A_BUF_PTR];
    RETURN;					! Return from DO_READ routine
    END;					! End of DO_READ routine


GLOBAL ROUTINE FOR$$UDF_RF9 			! Formatted input - end of I/O list call
    : JSB_UDF9 NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	FOR$$UDF_RF9 performs end of I/O list input formatting.
!	It only calls the FOR$$UDF_RF1 if there were no I/O list
!	elements at all, else it need do nothing.
!
!	All format codes are processed until a data transmitting
!	format code is encountered (or colon) or end of format.
!
! CALLING SEQUENCE:
!
!	JSB FOR$$UDF_RF9 ()
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	See FOR$$UDF_RF1
!
!
! IMPLICIT OUTPUTS:
!
!	See FOR$$UDF_RF1
!
! FUNCTION VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	See FOR$$UDF_RF1
!--

    BEGIN

    EXTERNAL REGISTER
	CCB : REF $FOR$CCB_DECL;

    !+
    ! If there were no items in I/O list, then the current format
    ! character is zero.  In this case, call FOR$$UDF_RF1 to execute
    ! non data-transmitting format codes.  Otherwise, do nothing
    ! because we have already executed all required formats.
    !-

    IF .CCB [ISB$B_FMT_CODE] EQL 0 THEN FOR$$UDF_RF1 (0, 0, 0);

    RETURN;
    END;					! End of FOR$$UDF_RF9 Routine


ROUTINE MOVE_CHAR (				! Move characters
    LEN, 					! Fill length
    SOURCE, 					! Source address
    DEST)					! Destination address
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	MOVE_CHAR moves characters from one string to another.  It is
!	identical to CH$MOVE except that it does not return a value.
!	A separate called routine is used so that registers R0 through
!	R5 are free in the calling routine.
!
! CALLING SEQUENCE:
!
!	CALL MOVE_CHAR (len.rwu.v, source.rbu.r, dest.wbu.r)
!
! FORMAL PARAMETERS:
!
!	len		Number of bytes to move.
!	source		Address of string to move from.
!	dest		Address of string to move to.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! FUNCTION VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!

!++
    BEGIN
    CH$MOVE (.LEN, .SOURCE, .DEST);
    END;

ROUTINE COPY_CHAR (				! Copy characters
    SOURCE_LEN, 				! Length of source
    SOURCE_ADDR, 				! Address of source
    DEST_LEN, 					! Length of destination
    DEST_ADDR)					! Address of destination
    =

!++
! FUNCTIONAL DESCRIPTION:
!
!	COPY_CHAR moves characters from one string to another, blank padding
!	if necessary.  It is equivalent to a CH$COPY with a blank fill.
!	A separate called routine is used so that registers R0 through
!	R5 are free in the calling routine.
!
! CALLING SEQUENCE:
!
!	pointer.rbu.v =  COPY_CHAR (source_len.rwu.v, source_addr.rbu.r, dest_len.rwu.v, dest_addr.wbu.r)
!
! FORMAL PARAMETERS:
!
!	source_len	Number of bytes in source
!	source_addr	Address of source
!	dest_len	Number of bytes in destination
!	dest_addr	Address of destination
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! FUNCTION VALUE:
!
!	The address of the next byte past the destination.
!
! SIDE EFFECTS:
!
!	NONE
!

!++
    BEGIN
    RETURN CH$COPY (.SOURCE_LEN, .SOURCE_ADDR, %C' ', .DEST_LEN, .DEST_ADDR);
    END;
END						! End of FOR$$UDF_RF Module

ELUDOM
