MODULE	exch$fil11				%TITLE 'Files-11 volume specific routines'
		(
		IDENT = 'V04-000',
		ADDRESSING_MODE (EXTERNAL=LONG_RELATIVE, NONEXTERNAL=WORD_RELATIVE)
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:	EXCHANGE - Foreign volume interchange facility
!
! ABSTRACT:	Files-11 specific routines
!
! ENVIRONMENT:	VAX/VMS User mode
!
! AUTHOR:	CW Hobbs		CREATION DATE: 26-Aug-1982
!
! MODIFIED BY:
!
!	V03-002	CWH3002		CW Hobbs		12-Apr-1984
!		Supply the close routine as the delete routine for files-11
!		to prevent leaving files open after random errors.
!
!--

! Include files:
!
MACRO $module_name_string = 'exch$fil11' %;	! The require file needs to know our module name
REQUIRE 'SRC$:EXCREQ'				! Facility-wide require file
    ;

%SBTTL 'Module table of contents'

! Module table of contents:
!
FORWARD ROUTINE
    exch$fil11_close_file,			! Files-11 specific file close routine
    exch$fil11_create_file,			! Files-11 specific file create routine
    exch$fil11_get,				! Get record
    exch$fil11_open_file,			! Files-11 specific file open routine
    exch$fil11_put				! Put record
    ;

! EXCHANGE facility routines
!
EXTERNAL ROUTINE
    exch$cmd_related_file_parse,		! Perform an RMS output file parse
    exch$util_file_error,			! Signal an RMS error
    exch$util_rmsb_allocate			! Get an RMSB
    ;

! Equated symbols:
!
!LITERAL
!    ;

! Bound declarations:
!
!BIND
!    ;

GLOBAL ROUTINE exch$fil11_close_file (filb : $ref_bblock) =	%SBTTL 'exch$fil11_close_file (filb)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Perform Files-11 volume specific close processing
!
! INPUT/OUTPUT:
!
!	filb - pointer to block describing the file
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	filb - receive info pertaining to the file to be closed
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	true if able to close the file, false otherwise
!
! SIDE EFFECTS:
!
!	none
!--

$dbgtrc_prefix ('fil11_close_file> ');

LOCAL
    status
    ;

BIND
    namb = filb [filb$a_assoc_namb]	: $ref_bblock,
    ctx  = filb [filb$a_context]	: $ref_bblock,
    fab  = ctx [rmsb$a_fab]		: $ref_bblock
    ;

$debug_print_lit ('entry');

$block_check (2, .filb, filb, 497);			!?? definitely over-zealous checking
$block_check (2, .namb, namb, 498);
$block_check (2, .ctx, rmsb, 499);


! Close the file
!
$trace_print_fao ('closing, fab=!XL', .fab);
IF NOT (status = $close (fab = .fab))
THEN
    exch$util_file_error (exch$_closeerr, .status, .fab, .fab [fab$l_stv]);

RETURN .status;
END;

GLOBAL ROUTINE exch$fil11_create_file =	%SBTTL 'exch$fil11_create_file'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Perform Files-11 volume specific create processing
!
! INPUT:
!
!	none
!
! IMPLICIT INPUTS:
!
!	copy [copy$a_out_filb] - pointer to filb for the output file
!	copy [copy$a_inp_filb] - pointer to filb for the input file
!
! OUTPUTS:
!
!	out_filb - receive info pertaining to the created file
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	true if able to create a file, false otherwise
!
! SIDE EFFECTS:
!
!	none
!--

$dbgtrc_prefix ('fil11_create_file> ');

LOCAL
    rfp : $bblock [nam$c_bln+nam$c_maxrss],	! An RMS NAM block plus the expanded string buffer for output file parse
    status
    ;

BIND
    copy     = exch$a_gbl [excg$a_copy_work]	: $ref_bblock,
    out_name = copy [copy$q_output_filename]	: $desc_block,
    inp_filb = copy [copy$a_inp_filb]		: $ref_bblock,
    out_filb = copy [copy$a_out_filb]		: $ref_bblock,
    ctx      = out_filb [filb$a_context]	: $ref_bblock,
    out_namb = out_filb [filb$a_assoc_namb]	: $ref_bblock
    ;

$debug_print_lit ('entry');

$block_check (2, .out_filb, filb, 511);
$block_check (2, .inp_filb, filb, 525);
$block_check (2, .out_namb, namb, 512);
$logic_check (2, (.out_filb [filb$a_assoc_volb] EQL 0), 138);

! If the context block is null, then allocate an RMSB
!
IF .ctx EQL 0
THEN
    ctx = exch$util_rmsb_allocate ()		! Get a fresh one
ELSE
    $block_check (2, .ctx, rmsb, 513);		! Check the old one

BEGIN
BIND
    fab = ctx [rmsb$a_fab] : $ref_bblock,
    rab = ctx [rmsb$a_rab] : $ref_bblock,
    nam = ctx [rmsb$a_nam] : $ref_bblock;

! Create a name string in the out_filb for the "NOTCOPIED" message, just in case we exit with an error
!
out_filb [filb$l_result_name_len] = .out_name [dsc$w_length];
CH$COPY (.out_name [dsc$w_length], .out_name [dsc$a_pointer], 0, 
		filb$s_result_name, out_filb [filb$t_result_name]);

! Perform an RMS output file parse on the related name (the result name for the input file) and the
! requested output name from the command line.
!
IF NOT (status = exch$cmd_related_file_parse (
		.out_name [dsc$w_length], .out_name [dsc$a_pointer],			! Command line out parameter
		.inp_filb [filb$l_result_name_len], inp_filb [filb$t_result_name],	! Related name
		rfp))									! Gets new name
THEN
    $exch_signal_return (exch$_openout, 1, out_name, .status);

$trace_print_fao ('trying to create "!AF"', .rfp [nam$b_esl], .rfp [nam$l_esa]);

! Initialize the RMS structures
!
$fab_init (
	FAB = .fab,				! Output file FAB
	FAC = (BRO,PUT),			!  Put only, block I/O in case we can do things faster that way
	FNA = .rfp [nam$l_esa],			!  Set name addr
	FNS = .rfp [nam$b_esl],			!  Set name size
	FOP = SQO,				!  Sequential only
	NAM = .nam,				!  Name block
	RAT = CR,				!  Carriage-return carriage control
	RFM = VAR,				!  Variable-length records
	SHR = (GET,PUT,UPI));			!  Allow other readers/writers
$rab_init (
	RAB = .rab,				! Output file RAB
	MBF = 2,				!  Multi-buffer count (MBC from process or system default)
	RAC = SEQ,				!  Sequential only
	ROP = WBH,				!  Write behind
	FAB = .fab);				!  FAB addr
$nam_init (
	NAM = .nam,				! File name block
	RSA = .ctx [rmsb$a_rsbuf],		!  Result name addr
	RSS = nam$c_maxrss,			!  Result name size
	ESA = .ctx [rmsb$a_esbuf],		!  Expanded name addr
	ESS = nam$c_maxrss);			!  Expanded name size

! Set the desired file attributes
!
fab [fab$v_mxv] = NOT .out_filb [filb$v_explicit_version];	! Use explicit version if given, otherwise maximize

! We allow several Files-11 "output" qualifiers to be placed on the input parameter.  We interpret "output"
! qualifiers on the output spec (or the verb) as applying to all output files.  "Output" qualifiers on the
! input specs apply to files created for that input spec.  If on both, use the one from the output (or verb).
!
fab [fab$l_alq] = (IF .copy [copy$l_q_allocation] NEQ 0		! If specified on the output
		   THEN						!  then
		       .copy [copy$l_q_allocation]		!   use that quantity
		   ELSE IF .inp_filb [filb$l_q_allocation] NEQ 0! otherwise if /ALLOCATION was on the input spec
		   THEN						!  then
		       .inp_filb [filb$l_q_allocation]		!   use the /ALLOC quantity from the input file spec
		   ELSE						! otherwise
		       .inp_filb [filb$l_block_count]);		!   use the size of the input file.

fab [fab$w_deq] = (IF .copy [copy$l_q_extension] NEQ 0
		   THEN
		       .copy [copy$l_q_extension]
		   ELSE
		       .inp_filb [filb$l_q_extension]);

fab [fab$v_cbt] = (IF .copy [copy$v_q_best_try_contiguous]	! Best try - overrides /contiguous if both present
		   THEN
		       true
		   ELSE
		       .inp_filb [filb$v_q_best_try_contiguous]);

fab [fab$v_ctg] = (IF .copy [copy$v_q_contiguous]
		   THEN
		       true
		   ELSE
		       .inp_filb [filb$v_q_contiguous]);

fab [fab$v_tef] = (IF .copy [copy$v_q_truncate]			! Truncate over-allocations
		   THEN
		       true
		   ELSE
		       .inp_filb [filb$v_q_truncate]);
						!?? should truncate depend on explicit allocation and/or /TRUNC?

! If /RECORD_FORMAT was given then tell him we are ignoring
!
IF   .out_filb [filb$v_rfmt_explicit]
THEN
    BEGIN
    out_filb [filb$v_rfmt_explicit] = false;
    out_filb [filb$b_rec_format] = filb$k_rfmt_invalid;
    $exch_signal (exch$_fil11_norec);
    END;

! If /CARRIAGE_CONTROL was given on either input or output then set the record attribute
!
IF .out_filb [filb$v_cctl_explicit]
THEN
    fab [fab$b_rat] =  (CASE .out_filb [filb$b_car_control] FROM filb$k_cctl_lobound TO filb$k_cctl_hibound OF
			SET
				[filb$k_cctl_cr] :	fab$m_cr;
				[filb$k_cctl_fortran] :	fab$m_ftn;
				[filb$k_cctl_none] :	0;
			TES)
ELSE IF .inp_filb [filb$v_cctl_explicit]
THEN
    fab [fab$b_rat] =  (CASE .inp_filb [filb$b_car_control] FROM filb$k_cctl_lobound TO filb$k_cctl_hibound OF
			SET
				[filb$k_cctl_cr] :	fab$m_cr;
				[filb$k_cctl_fortran] :	fab$m_ftn;
				[filb$k_cctl_none] :	0;
			TES);

! See if we need to override the record format, variable by default.  We do not allow record format qualifiers 
! (except for block transfer) on Files-11 filespecs, so get all record format info from the input file.
!
IF .out_filb [filb$b_transfer_mode] EQL filb$k_xfrm_block
 OR
   .inp_filb [filb$b_transfer_mode] EQL filb$k_xfrm_block
THEN
    BEGIN
    fab [fab$w_mrs] = 512;
    fab [fab$b_rfm] = fab$c_fix;
    END
ELSE IF .inp_filb [filb$b_rec_format] EQL filb$k_rfmt_fixed
THEN
    BEGIN
    fab [fab$w_mrs] = .inp_filb [filb$l_fixed_len];
    fab [fab$b_rfm] = fab$c_fix;
    END;

! Create and connect to the file
!
IF NOT (status = $create (fab = .fab))
THEN
    BEGIN
    exch$util_file_error (exch$_openout, .status, .fab, .fab [fab$l_stv]);
    RETURN 0;					! Don't pass any status so that we won't get a chained message
    END;					!  attached to the "NOTCOPIED" message

! Create the result name string in the out_filb
!
$logic_check (2, ((.nam [nam$b_rsl] LEQU filb$s_result_name) AND (.nam [nam$b_rsl] GTRU 0)), 139);
out_filb [filb$l_result_name_len] = .nam [nam$b_rsl];
CH$COPY (.nam [nam$b_rsl], .nam [nam$l_rsa], 0, filb$s_result_name, out_filb [filb$t_result_name]);

$trace_print_fao ('Created "!AF"', .out_filb [filb$l_result_name_len], out_filb [filb$t_result_name]);

IF NOT (status = $connect (rab = .rab))
THEN
    BEGIN
    exch$util_file_error (exch$_openout, .status, .fab, .rab [rab$l_stv]);
    $close (fab = .fab);
    RETURN 0;					! Don't pass any status so that we won't get a chained message
    END;					!  attached to the "NOTCOPIED" message

! Define a record stream for this file
!
out_filb [filb$a_record] = 0;			! No valid record or length
out_filb [filb$l_record_len] = 0;
out_filb [filb$v_files_created] = true;		! Made a file using this filb

! Make sure that the record format in the filb is correct
!
!?? record format is in the rms structures

! Save the addresses of our routines for this volume and record format.
!
out_filb [filb$a_close_routine]  = exch$fil11_close_file;
out_filb [filb$a_delete_routine] = exch$fil11_close_file;
out_filb [filb$a_put_routine]    = exch$fil11_put;
out_filb [filb$a_get_routine]    = 0;		! We don't want to do this, so make it hard

END;	! End of BIND to the rmsb components

RETURN true;

END;

GLOBAL ROUTINE exch$fil11_get (filb : $ref_bblock) =	%SBTTL 'exch$fil11_get (filb)'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Return a pointer to the next fixed-length record in the file
!
! INPUTS:
!
!	filb - pointer to filb for an open Files-11 file
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	true if success, false if any error
!
! SIDE EFFECTS:
!
!	error conditions will be signaled
!--

$dbgtrc_prefix ('fil11_get> ');

LOCAL
    status
    ;

BIND
    namb = filb [filb$a_assoc_namb]	: $ref_bblock,
    ctx  = filb [filb$a_context]	: $ref_bblock,
    fab  = ctx [rmsb$a_fab]		: $ref_bblock,
    rab  = ctx [rmsb$a_rab]		: $ref_bblock
    ;

$debug_print_lit ('entry');

$block_check (2, .filb, filb, 500);		!?? definitely over-zealous checking
$block_check (2, .namb, namb, 508);
$block_check (2, .ctx, rmsb, 501);

! Set the user buffer fields in the rab
!
rab [rab$l_ubf] = filb [filb$t_record_buffer];	! buffer address

! Read a single record from SYS$INPUT
!
status = (IF .rab [rab$v_bio]			! If we are doing block I/O to the file
	  THEN
		BEGIN
		rab [rab$w_usz] = 512;		! Buffer size
		$read (rab = .rab)		! Physical uses block i/o
		END
	  ELSE
		BEGIN
		rab [rab$w_usz] = filb$s_record_buffer;		! buffer size
		$get (rab = .rab)		! Everything else is record i/o
		END);

! Since we are using locate mode, RMS can return a record which is larger than our buffer.  We check the
! returned record length and simulate an RMS$_RTB error if we see such an animal.
!
IF .rab [rab$w_rsz] GTRU filb$s_record_buffer
THEN
    BEGIN
    status = rms$_rtb;				! Status is record too big
    rab [rab$l_stv] = .rab [rab$w_rsz];		! STV contains the record size for the signal
    END;

! Signal any rms (or simulated rms) errors
!
IF NOT .status
THEN
    BEGIN

    filb [filb$a_record]     = 0;		! Invalidate record descriptor
    filb [filb$l_record_len] = 0;

    ! If the error is anything but end of file then signal
    !
    IF .status NEQ rms$_eof
    THEN
	BEGIN
	exch$util_file_error (exch$_readerr, .status, .fab, .rab [rab$l_stv]);
	RETURN .status;				! Return the RMS error
	END

    ! Normal exit, return 0
    !
    ELSE
	RETURN false;
    END;

! Return the address and length of the record
!
filb [filb$a_record]     = .rab [rab$l_rbf];
filb [filb$l_record_len] = .rab [rab$w_rsz];

RETURN true;

END;

GLOBAL ROUTINE exch$fil11_open_file =	%SBTTL 'exch$fil11_open_file'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Perform Files-11 volume specific open processing
!
! INPUT/OUTPUT:
!
!	none
!
! IMPLICIT INPUTS:
!
!	copy verb work area
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	true if able to open a file, false otherwise
!
! SIDE EFFECTS:
!
!	file is opened, copy work area modified
!--

$dbgtrc_prefix ('fil11_open_file> ');

LOCAL
    xab : $bblock [xab$c_fhclen],		! File header char xab so that we can read the size of the file
    status
    ;

BIND
    copy     = exch$a_gbl [excg$a_copy_work]	: $ref_bblock,
    inp_filb = copy [copy$a_inp_filb]		: $ref_bblock,
    out_filb = copy [copy$a_out_filb]		: $ref_bblock,
    ctx  = inp_filb [filb$a_context]	: $ref_bblock,
    namb = inp_filb [filb$a_assoc_namb]	: $ref_bblock
    ;

$debug_print_lit ('entry');

$block_check_if_nonzero (2, .out_filb, filb, 577);
$block_check (2, .inp_filb, filb, 502);
$block_check (2, .namb, namb, 503);
$logic_check (2, (.inp_filb [filb$a_assoc_volb] EQL 0), 136);

! If the context block is null, then allocate an RMSB
!
IF .ctx EQL 0
THEN
    ctx = exch$util_rmsb_allocate ()		! Get a fresh one
ELSE
    $block_check (2, .ctx, rmsb, 504);		! Check the old one

! Use the RTL routine to find the next file matched by the input name, unless we are reopening in which case all
! is ready
!
IF NOT .copy [copy$v_reopen_input]
THEN
    BEGIN
    $trace_print_fao ('before find_file:  fullname !AS, inpname !AS, wcc !XL',
		namb [namb$q_fullname], inp_filb [filb$q_name_string], .inp_filb [filb$a_fil11_wcc]);
    status = lib$find_file (namb [namb$q_fullname], inp_filb [filb$q_name_string], inp_filb [filb$a_fil11_wcc]);
    $trace_print_fao ('find_file status !XL, fullname !AS, inpname !AS, wcc !XL',
		.status, namb [namb$q_fullname], inp_filb [filb$q_name_string], .inp_filb [filb$a_fil11_wcc]);
    IF NOT .status
    THEN
	BEGIN

	IF NOT .inp_filb [filb$v_files_found]		! If no files were found, then scream and shout
	THEN
	    $exch_signal (exch$_filenotfound, 1, namb [namb$q_fullname], .status);

	IF  .status EQL rms$_nmf			! rms$_nmf means that we are done with this filespec
	  OR
	   (BEGIN					! Or if the error is severe
	    BIND
		sb = status : $bblock;
	    .sb [sts$v_severity] EQL sts$k_severe
	    END)
	THEN
	    status = 0;				! 0 status terminates the outer loop

	RETURN .status;
	END;
    END;

BEGIN
BIND
    fab = ctx [rmsb$a_fab] : $ref_bblock,
    rab = ctx [rmsb$a_rab] : $ref_bblock,
    nam = ctx [rmsb$a_nam] : $ref_bblock,
    res = inp_filb [filb$q_name_string] : $desc_block;

! Initialize the RMS structures
!
$fab_init (
	FAB = .fab,				! Input file FAB
	FAC = (BRO,GET),			!  Get only, block I/O in case we can do things faster that way
	FNA = .res [dsc$a_pointer],		!  Set name addr
	FNS = .res [dsc$w_length],		!  Set name size
	FOP = SQO,				!  Sequential only
	NAM = .nam,				!  Name block
	SHR = (GET,PUT,UPI),			!  Allow other readers/writers
	XAB = xab);				!  A file header char xab so that we can read the file size
$rab_init (
	RAB = .rab,				! Input file RAB
	MBF = 2,				!  Multi-buffer count (MBC from default)
	RAC = SEQ,				!  Sequential only
	ROP = (LOC,RAH),			!  Locate mode, read ahead
	FAB = .fab);				!  FAB addr
$nam_init (
	NAM = .nam,				! File name block
	RSA = .ctx [rmsb$a_rsbuf],		!  Result name addr
	RSS = nam$c_maxrss,			!  Result name size
	ESA = .ctx [rmsb$a_esbuf],		!  Expanded name addr
	ESS = nam$c_maxrss);			!  Expanded name size
$xabfhc_init (					! File header char xab so that we can read the file size
	XAB = xab);				!  RMS will fill it in when we open

! If this is a block transfer mode read, set the block i/o bit
!
rab [rab$v_bio] = ((.inp_filb [filb$b_transfer_mode] EQL filb$k_xfrm_block)
		 OR
		   (IF .out_filb EQL 0
		    THEN
			0
		    ELSE
			.out_filb [filb$b_transfer_mode] EQL filb$k_xfrm_block));

! Open and connect to the file
!
$trace_print_fao ('opening, fab=!XL', .fab);
IF NOT (status = $open (fab = .fab))
THEN
    BEGIN
    exch$util_file_error (exch$_openin, .status, .fab, .fab [fab$l_stv]);
    RETURN .status;
    END;
IF NOT (status = $connect (rab = .rab))
THEN
    BEGIN
    exch$util_file_error (exch$_openin, .status, .fab, .rab [rab$l_stv]);
    $close (fab = .fab);
    RETURN .status;
    END;


! Create the result name string in the filb
!
$logic_check (2, ((.nam [nam$b_rsl] LEQU filb$s_result_name) AND (.nam [nam$b_rsl] GTRU 0)), 137);
inp_filb [filb$l_result_name_len] = .nam [nam$b_rsl];
CH$COPY (.nam [nam$b_rsl], .nam [nam$l_rsa], 0, filb$s_result_name, inp_filb [filb$t_result_name]);

$trace_print_fao ('Found "!AF"', .inp_filb [filb$l_result_name_len], inp_filb [filb$t_result_name]);

! Define a record stream for this file
!
inp_filb [filb$a_record] = 0;			! No valid record or length
inp_filb [filb$l_record_len] = 0;
inp_filb [filb$v_files_found] = true;		! Found a file using this filb
inp_filb [filb$l_block_count] = .xab [xab$l_ebk] -	! Put the file size in the filb where any routine can find it
		    (IF .xab [xab$w_ffb] NEQ 0	! (Eof block is one too high if the first free byte is zero)
		     THEN 0 ELSE 1);
fab [fab$l_xab] = 0;				! Remove the xab from the fab, won't be valid after return

! Save the addresses of our routines for this volume and record format.
!
inp_filb [filb$a_close_routine] = exch$fil11_close_file;
inp_filb [filb$a_put_routine]   = 0;		! Make it very hard to do a PUT
inp_filb [filb$a_get_routine]   = exch$fil11_get;

END;	! End of BIND to the rmsb components

RETURN true;

END;

GLOBAL ROUTINE exch$fil11_put =	%SBTTL 'exch$fil11_put'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	Add the next record to the file
!
! INPUTS:
!
!	none
!
! IMPLICIT INPUTS:
!
!	copy [copy$a_out_filb]   - out_filb - pointer to filb for an open Files-11 output file
!	copy [copy$a_inp_filb]   - inp_filb - pointer to the input filb containing the record info
!	inp_filb [filb$l_record_len] - len  - length of the record
!	inp_filb [filb$a_record]     - buf  - address of the record
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	out_filb will get updated
!
! ROUTINE VALUE:
!
!	true if success, false if any error
!
! SIDE EFFECTS:
!
!	error conditions will be signaled
!--

$dbgtrc_prefix ('fil11_put> ');

LOCAL
    status
    ;

BIND
    copy = exch$a_gbl [excg$a_copy_work]: $ref_bblock,	! COPY verb work area
    out_filb = copy [copy$a_out_filb]	: $ref_bblock,	! pointer to filb for an open Files-11 output file
    inp_filb = copy [copy$a_inp_filb]	: $ref_bblock,	! pointer to the input filb with the record info
    len  = inp_filb [filb$l_record_len],		! length of the record
    buf  = inp_filb [filb$a_record],			! address of the record
    ctx  = out_filb [filb$a_context]	: $ref_bblock,	! output file context block
    namb = out_filb [filb$a_assoc_namb]	: $ref_bblock,	! associated output namb structure
    fab  = ctx [rmsb$a_fab]		: $ref_bblock,	! RMS FAB for the file
    rab  = ctx [rmsb$a_rab]		: $ref_bblock	! RMS RAB
    ;

$debug_print_lit ('entry');

$block_check (2, .out_filb, filb, 505);		!?? definitely over-zealous checking
$block_check (2, .inp_filb, filb, 526);
$block_check (2, .namb, namb, 506);
$block_check (2, .ctx, rmsb, 507);

! Set the record buffer fields in the rab
!
IF   .fab [fab$b_rfm] EQL fab$c_fix		! If we have fixed-length output
  AND
     .fab [fab$w_mrs] NEQ .len			! And the input length isn't correct
THEN
    BEGIN
    CH$COPY (.len, .buf, .inp_filb [filb$b_pad_char], .fab [fab$w_mrs], out_filb [filb$t_record_buffer]);
    rab [rab$l_rbf] = out_filb [filb$t_record_buffer];
    rab [rab$w_rsz] = .fab [fab$w_mrs];
    END
ELSE						! Otherwise just point the rab at the record
    BEGIN
    rab [rab$l_rbf] = .buf;			! buffer address
    rab [rab$w_rsz] = .len;			! buffer size
    END;

! Write a single record to the output filb
!
IF NOT (status = $put (rab = .rab))
THEN
    BEGIN

    exch$util_file_error (exch$_writeerr, .status, .fab, .rab [rab$l_stv]);
    RETURN .status;

    END;

RETURN true;
END;

END
ELUDOM
