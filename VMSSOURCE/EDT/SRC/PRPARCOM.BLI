%TITLE 'EDT$PRPARCOM - parse a command'
MODULE EDT$PRPARCOM (				! Parse a command
		IDENT = 'V04-000'			! File: PRPARCOM.BLI Edit: JBS1007
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Parse a command.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: December 12, 1978
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 25-Feb-1981.  This module was created by
!	extracting routine EDT$$PA_CMD  from module PARSER.
! 1-002	- Regularize headers.  JBS 12-Mar-1981
! 1-003	- Use new message codes.  JBS 04-Aug-1981
! 1-004	- Define a synonym for the entry point name so a call to
!	   this routine can be hidden from the overlay analyzer.  JBS 16-Mar-1982
! 1-005 - Add CRLF if TI_WRSTR is being used.  SMB 02-Jul-1982
! 1-006	- Use EDT$$FMT_CRLF instead of EDT$$OUT_FMTBUF.  JBS 05-Jul-1982
! 1-007	- Use EDT$$FMT_STR instead of EDT$$FMT_LIT, so EDT$$G_PRV_COL is kept
!	   up to date.  JBS 05-Oct-1982
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$PA_CMD;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

REQUIRE 'EDTSRC:PARLITS';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

GLOBAL BIND
    ROUTINE
    EDT$$PA_CMD_NOOVERLAY_REF = EDT$$PA_CMD;

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$PA_CMD  - parse a command'

GLOBAL ROUTINE EDT$$PA_CMD 			! Parse a command
    =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to parse a single command on the current command line.
!	EDT$$A_CMD_BUF  points to the first character of the command.  If the
!	parse is successful, a 1 is returned and the parsing stack contains a
!	description of the command.  EDT$$A_CMD_BUF  is left pointing at the ';'
!	or '!' which are the only valid terminators of commands.  If an error occurs, a
!	0 is returned, and EDT$$A_CMD_BUF  is forced to point to the '!' at the
!	end of the current command line, to prevent the rest of the commands from being
!	executed.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$T_CMD_BUF
!	EDT$$A_CMD_BUF
!	EDT$$A_CMD_END
!	EDT$$G_CMD_LEN
!	EDT$$G_INP_SRC
!	EDT$$G_VFY
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_PA_CURCMD
!	EDT$$G_PA_SP
!	EDT$$A_PA_CURTOK
!	EDT$$G_PA_ERRNO
!
! ROUTINE VALUE:
!
!	1 = parse was successful
!	0 = parse failed, EDT$$G_PA_ERRNO  set
!
! SIDE EFFECTS:
!
!	MANY
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$FMT_CRLF,				! Terminate an output line
	EDT$$FMT_CH,
	EDT$$FMT_STR,
	EDT$$PA_SCANTOK : NOVALUE,		! Get the next token
	EDT$$PA_GETCH : NOVALUE,		! Get the next character from the input line
	EDT$$PA_TSTMACCAL,			! Test if the current token is a macro name
	EDT$$PA_DRIV,				! Parse table driver
	EDT$$MSG_TOSTR;

    EXTERNAL
	EDT$$T_CMD_BUF,				! Command line buffer.
	EDT$$A_CMD_BUF,				! Pointer into command buffer.
	EDT$$A_CMD_END,				! Pointer to end of current command.
	EDT$$G_CMD_LEN,				! Length of command.
	EDT$$G_INP_SRC,				! input source
	EDT$$G_VFY,				! verify switch
	EDT$$G_PA_CURCMD : REF NODE_BLOCK,
	EDT$$A_PA_CURTOK,			! start of the current token
	EDT$$G_PA_ERRNO,			! Error number of parsing error.
	EDT$$G_PA_SP;

    MESSAGES ((UNXCHRAFT, UNRCOM));
!+
! Initialize the command node pointer and the parsing stack pointer.
!-
    EDT$$G_PA_CURCMD = 0;
    EDT$$G_PA_SP = -1;
    EDT$$A_PA_CURTOK = .EDT$$A_CMD_BUF;
    EDT$$PA_GETCH ();
    EDT$$PA_SCANTOK ();
    EDT$$G_PA_ERRNO = 0;

    IF (EDT$$PA_TSTMACCAL () OR EDT$$PA_DRIV (0))
    THEN
	BEGIN
	EDT$$A_CMD_BUF = .EDT$$A_PA_CURTOK;

	IF (CH$RCHAR (.EDT$$A_CMD_BUF) EQL %C';')
	THEN
	    BEGIN
	    EDT$$A_CMD_BUF = CH$PLUS (.EDT$$A_CMD_BUF, 1);
	    RETURN (1);
	    END
	ELSE

	    IF (CH$RCHAR (.EDT$$A_CMD_BUF) EQL %C'!') THEN RETURN (1) ELSE EDT$$G_PA_ERRNO = EDT$_UNXCHRAFT;

	END
    ELSE
!+
! If neither call was successful, but no error number assigned,
! give the unrecognized command diagnostic.
!-

	IF (.EDT$$G_PA_ERRNO EQL 0) THEN EDT$$G_PA_ERRNO = EDT$_UNRCOM;

!+
! Print the command with an indication of where the error is.
!-

    IF ((.EDT$$G_INP_SRC NEQ INP_TERM) AND (.EDT$$G_VFY EQL 0))
    THEN
	BEGIN
	EDT$$FMT_CH (%C' ');
	EDT$$FMT_STR (EDT$$T_CMD_BUF, .EDT$$G_CMD_LEN);
	EDT$$FMT_CRLF ();
	END;

    DECR I FROM CH$DIFF (.EDT$$A_PA_CURTOK, EDT$$T_CMD_BUF) TO 0 DO
	EDT$$FMT_CH (%C' ');

    EDT$$FMT_CH (%C'^');
    EDT$$FMT_CRLF ();
!+
! Print the message corresponding to the error code.
!-
    EDT$$MSG_TOSTR (.EDT$$G_PA_ERRNO);
    EDT$$FMT_CRLF ();
    EDT$$A_CMD_BUF = .EDT$$A_CMD_END;
    CH$WCHAR (%C'!', .EDT$$A_CMD_END);
    RETURN (0);
    END;					! of routine EDT$$PA_CMD

!<BLF/PAGE>

END						! of module EDT$PRPARCOM

ELUDOM
