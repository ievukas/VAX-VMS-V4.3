MODULE DBGNCANCL (IDENT = 'V04-000') =

BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
! MODULE FUNCTION
!	This module contains the command parse and execution networks for
!	the CANCEL command.
!
! AUTHOR:
!	David Plummer
!
! CREATION DATE:
!	9-Jul-80
!
! MODIFIED BY:
!	Richard Title	16-Sep-81
!
! REVISION HISTORY:
!	
! 3.01	16-SEP-81	RT	Implemented CANCEL SOURCE command
! 3.02	07-MAY-82	RT	Implemented CANCEL DEVELOPER
!

REQUIRE 'SRC$:DBGPROLOG.REQ';

LIBRARY 'LIB$:DBGGEN.L32';

FORWARD ROUTINE
	DBG$NPARSE_CANCEL,		! ATN parse network for CANCEL
	DBG$NEXECUTE_CANCEL;		! Command execution network for CANCEL

EXTERNAL ROUTINE
    DBG$EVENT_SHOW_CANCEL_SYNTAX,	! Syntax for SHOW|CANCEL BREAK|TRACE|WATCH
    DBG$EVENT_SHOW_CANCEL_SEMANTICS,	! Semantics for SHOW|CANCEL BREAK|TRACE|WATCH
    DBG$EVENT_CANCEL_ALL,		! CANCEL/ALL eventpoints
    DBG$RST_SETSCOPE: NOVALUE,		! Cancels (and sets) user scope
    DBG$RST_CANMOD,			! Cancels a module
    DBG$NSAVE_STRING,			! Saves a string form the input stream
    DBG$IS_IT_ENTRY,			! Returns true if address = entry point
    DBG$GET_TEMPMEM,			! Allocates dynamic listed storage
    DBG$SET_MOD_DEF,			! Resets mode level to default
    DBG$NGET_TRANS_RADIX,		! Translate radix
    DBG$NMATCH,				! Matches counted strings to input
    DBG$SCR_EXECUTE_CANDISP_CMD:NOVALUE,! Execute the CANCEL DISPLAY command
    DBG$SCR_EXECUTE_CANWIND_CMD:NOVALUE,! Execute the CANCEL WINDOW command
    DBG$SCR_PARSE_CANDISP_CMD: NOVALUE,	! Parse the CANCEL DISPLAY command
    DBG$SCR_PARSE_CANWIND_CMD: NOVALUE,	! Parse the CANCEL WINDOW command
    DBG$SRC_CANCEL_SOURCE: NOVALUE,	! Implements CANCEL SOURCE command
    DBG$STA_GETSOURCEMOD,		! Looks up module rst pointer
    DBG$SET_STP_DEF: NOVALUE,		! Sets default step
    DBG$NSYNTAX_ERROR,			! Formats a syntax error
    DBG$NNEXT_WORD,			! Returns the next word of input
    DBG$NPARSE_ADDRESS,			! Obtains an address expression descriptor
    DBG$NSAVE_DECIMAL_INTEGER,		! Parse an integer
    DBG$NMAKE_ARG_VECT;			! Constructs a message argument vector

EXTERNAL
    DBG$GB_RADIX: VECTOR[3, BYTE],	! Radix settings
    DBG$GL_DEVELOPER: BITVECTOR,	! Developer switches
    DBG$GL_GBLTYP,			! Override type
    DBG$GW_GBLLNGTH: WORD,		! Override length
    DBG$GL_DFLTTYP,			! Default type
    DBG$GW_DFLTLENG: WORD,		! Default length
    DBG$RUNFRAME: BLOCK [,BYTE],	! User runframe
    DBG$GB_RESIGNAL: BYTE,		! Flag for resignaling exceptions
    DBG$GL_CONTEXT: BITVECTOR;		! Context word

LITERAL

    ! Legal verb composites
    !
    CANCEL_MINIMUM		= 1,
    CANCEL_ALL			= 1,
    CANCEL_BREAK		= 2,	! Also EVENT$K_CANCEL_BREAK
    CANCEL_BREAK_ALL		= 3,
    CANCEL_EXCEPTION_BREAK	= 4,	! Also EVENT$K_CANCEL_BREAK_EXC
    CANCEL_MODE			= 5,
    CANCEL_MODULE		= 6,
    CANCEL_MODULE_ALL		= 7,
    CANCEL_RADIX		= 20,
    CANCEL_RADIX_OVERRIDE	= 21,
    CANCEL_SCOPE		= 8,
    CANCEL_TRACE		= 9,	! Also EVENT$K_CANCEL_TRACE
    CANCEL_TRACE_CALLS		= 10,
    CANCEL_TRACE_BRANCH		= 11,
    CANCEL_TRACE_ALL		= 12,
    CANCEL_TYPE_OVERRIDE	= 13,
    CANCEL_WATCH		= 14,	! Also EVENT$K_CANCEL_WATCH
    CANCEL_WATCH_ALL		= 15,
    CANCEL_SOURCE		= 16,
    CANCEL_DEVELOPER		= 17,
    CANCEL_DISPLAY		= 18,
    CANCEL_WINDOW		= 19,
    CANCEL_MAXIMUM		= 21;

GLOBAL ROUTINE DBG$NPARSE_CANCEL (INPUT_DESC, VERB_NODE, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine comprises the ATN parse network for the CANCEL verb.
!	A command execution tree is constructed during the parsing process
!	which is used as input to the command execution network following
!	a complete and successful parse. Upon detection a a syntax error,
!	a message argument vector is constructed and returned.
!
! FORMAL PARAMETERS:
!
!	INPUT_DESC	- A longword containing the address of a standard
!			  ASCII string descriptor corresponding to the input
!			  command
!
!	VERB_NODE	- A longword containing the address of the command
!			  verb node which is the head node of the command
!			  execution tree
!
!	MESSAGE_VECT	- The address of a longword to contain the address of
!			  a standard message argument vector upon detection of
!			  errors
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The command execution tree corresponding to the input command is constructed
!	on success. 
!
!	On failure, a message argument vector is constructed and returned.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1)	- Success. Command parsed and execution tree made.
!
!	STS$K_SEVERE  (4)	- Failure. No tree constructed. Message argument
!				  vector constructed and returned.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP	
	VERB_NODE: REF DBG$VERB_NODE;	! Pointer to command Verb Node

    ! Define strings used at this level of parsing
    !
    BIND	
	DBG$CS_ALL		= UPLIT BYTE (%ASCIC 'ALL'),
	DBG$CS_BREAK		= UPLIT BYTE (%ASCIC 'BREAK'),
    	DBG$CS_DEVELOPER	= UPLIT BYTE (%ASCIC 'DEVELOPER'),
	DBG$CS_DISPLAY		= UPLIT BYTE (%ASCIC 'DISPLAY'),
	DBG$CS_EXCEPTION	= UPLIT BYTE (%ASCIC 'EXCEPTION'),
	DBG$CS_MODE		= UPLIT BYTE (%ASCIC 'MODE'),
	DBG$CS_MODULE		= UPLIT BYTE (%ASCIC 'MODULE'),
    	DBG$CS_RADIX		= UPLIT BYTE (%ASCIC 'RADIX'),
	DBG$CS_SCOPE		= UPLIT BYTE (%ASCIC 'SCOPE'),
    	DBG$CS_SOURCE		= UPLIT BYTE (%ASCIC 'SOURCE'),
	DBG$CS_TRACE		= UPLIT BYTE (%ASCIC 'TRACE'),
	DBG$CS_TYPE		= UPLIT BYTE (%ASCIC 'TYPE'),
	DBG$CS_WATCH		= UPLIT BYTE (%ASCIC 'WATCH'),
	DBG$CS_WINDOW		= UPLIT BYTE (%ASCIC 'WINDOW'),
    	DBG$CS_EQUAL		= UPLIT BYTE (%ASCIC '='),
	DBG$CS_SLASH		= UPLIT BYTE (%ASCIC '/'),
    	DBG$CS_COMMA		= UPLIT BYTE (%ASCIC ','),
	DBG$CS_CR		= UPLIT BYTE (1, dbg$k_car_return);

    LOCAL
	STATUS,				! Holds routine's return status
	NOUN_NODE: REF DBG$NOUN_NODE;	! Noun node of command execution tree



    ! Create and link a noun node. Note that the noun node will not
    ! be used for certain commands like CANCEL BREAK/ALL.
    !
    noun_node = dbg$get_tempmem (dbg$k_noun_node_size);
    verb_node [dbg$l_verb_object_ptr] = .noun_node;


    ! Parse the next keyword and transfer control to a subnetwork
    !
    SELECTONE TRUE OF
	SET

	[dbg$nmatch (.input_desc, dbg$cs_all, 1)] :	! Cancel all
	    BEGIN
	    verb_node [dbg$b_verb_composite] = cancel_all;
	    END;

	[dbg$nmatch (.input_desc, dbg$cs_break, 1)] : 	! CANCEL BREAK
	    BEGIN
	    VERB_NODE [DBG$B_VERB_COMPOSITE] = EVENT$K_CANCEL_BREAK;
	    RETURN DBG$EVENT_SHOW_CANCEL_SYNTAX (.INPUT_DESC,
						 .VERB_NODE,
						 .MESSAGE_VECT
						);
    	    END;

    	[dbg$nmatch (.input_desc, dbg$cs_developer, 9)] :	! Set Developer
    	    BEGIN
    	    LOCAL
    		link;

    	    verb_node [dbg$b_verb_composite] = cancel_developer;
    	    link = verb_node[dbg$l_verb_object_ptr];
 	    IF NOT dbg$nmatch(.input_desc, dbg$cs_cr, 1)
    	    THEN
    		BEGIN
    	        WHILE true DO
    		    BEGIN
    		    IF NOT dbg$nsave_decimal_integer(.input_desc, noun_node[dbg$l_noun_value],
    						     .message_vect)
    		    THEN
    		        RETURN sts$k_severe;

    		    IF (.noun_node[dbg$l_noun_value] LSS 0) OR
    		       (.noun_node[dbg$l_noun_value] GTR 31)
    		    THEN
    		        BEGIN
    		        .message_vect = dbg$nmake_arg_vect(dbg$_bitrange);
    		        RETURN sts$k_severe;
    		        END;

    		    link = noun_node[dbg$l_noun_link];
    		    IF NOT dbg$nmatch(.input_desc, dbg$cs_comma, 1)
    		    THEN
    		        BEGIN
    		        IF NOT dbg$nmatch(.input_desc, dbg$cs_cr, 1)
    		        THEN
    			    BEGIN
    			    .message_vect = dbg$nsyntax_error(dbg$nnext_word(.input_desc));
    			    RETURN sts$k_severe;
    			    END

    		        ELSE
    			    EXITLOOP;

    		        END;

    		    noun_node = dbg$get_tempmem (dbg$k_noun_node_size);
    		    .link = .noun_node;
    		    END;			! End of WHILE loop.

    		END;

    		.link = 0;

    	    END;


	! Parse the CANCEL DISPLAY command.
	!
	[DBG$NMATCH(.INPUT_DESC, DBG$CS_DISPLAY, 3)]:
	    BEGIN
	    VERB_NODE[DBG$B_VERB_COMPOSITE] = CANCEL_DISPLAY;
	    DBG$SCR_PARSE_CANDISP_CMD(.INPUT_DESC, .VERB_NODE);
	    END;


	! Parse the CANCEL EXCEPTION BREAK command.
	!
	[dbg$nmatch (.input_desc, dbg$cs_exception, 1)] : ! CANCEL EXCEPTION BREAK
	    BEGIN

	    ! We look for BREAK
	    !
	    IF NOT dbg$nmatch (.input_desc, dbg$cs_break, 1)
	    THEN
		BEGIN
		.message_vect = 
		(
		 IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
		 THEN
		     dbg$nmake_arg_vect (dbg$_needmore)
		 ELSE
		     dbg$nsyntax_error (dbg$nnext_word (.input_desc))
		);
		RETURN sts$k_severe;
		END;

	    verb_node [dbg$b_verb_composite] = cancel_exception_break;


	    ! Reset the noun and adverb pointers.
	    !
	    verb_node [dbg$l_verb_object_ptr] = 0;
	    verb_node [dbg$l_verb_adverb_ptr] = 0;
	    END;

	[dbg$nmatch (.input_desc, dbg$cs_mode, 1)] :	! CANCEL MODE
	    BEGIN
	    verb_node [dbg$b_verb_composite] = cancel_mode;
	    END;

	[dbg$nmatch (.input_desc, dbg$cs_module, 4)] :  ! CANCEL MODULE
	    BEGIN

	    ! Check for CANCEL MODULE/ALL
	    !
	    IF dbg$nmatch (.input_desc, dbg$cs_slash, 1)
	    THEN
		BEGIN
		BIND
		    DBG$CS_ALL = UPLIT BYTE (3, 'ALL');

		IF NOT dbg$nmatch (.input_desc, dbg$cs_all, 1)
		THEN
		    BEGIN
		    .message_vect =
		    (IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
		     THEN
		         dbg$nmake_arg_vect (dbg$_needmore)
		     ELSE
		         dbg$nsyntax_error (dbg$nnext_word (.input_desc)));
		    RETURN sts$k_severe;
		    END;

		verb_node [dbg$b_verb_composite] = cancel_module_all;
		END

	    ELSE
	 	BEGIN

		! We have a module name list to parse
		!
		BIND
		    DBG$CS_COMMA = UPLIT BYTE (1, dbg$k_comma);
		LOCAL
		    LINK;		! Temporary pointer

		! Accept strings and commas
		!
		WHILE true
		DO
		    BEGIN

		    IF NOT DBG$NSAVE_STRING  (.input_desc, 
					      noun_node [dbg$l_noun_value],
					      .message_vect)
		    THEN
			RETURN sts$k_severe;


		    ! Check for a comma
		    !
		    IF NOT dbg$nmatch (.input_desc, dbg$cs_comma, 1)
		    THEN
			EXITLOOP;


		    ! Create a new noun node to hold the next string
		    !
		    link = noun_node [dbg$l_noun_link];
		    noun_node = dbg$get_tempmem (dbg$k_noun_node_size);
		    .link = .noun_node;

		    END;	! End of loop


		! Place a zero in the last link field
		!
		noun_node [dbg$l_noun_link] = 0;

		verb_node [dbg$b_verb_composite] = cancel_module;

		END;

	    END;

    	[dbg$nmatch (.input_desc, dbg$cs_radix, 1)]:
	    BEGIN
	    BIND
		DBG$CS_OVERRIDE = UPLIT BYTE (8, 'OVERRIDE');

    	    verb_node[dbg$b_verb_composite] = cancel_radix;

	    ! Look for the /
	    !
	    IF dbg$nmatch (.input_desc, dbg$cs_slash, 1)
    	    THEN
    		BEGIN

	        ! Look for 'override'
	        !
	        IF NOT dbg$nmatch (.input_desc, dbg$cs_override, 1)
	        THEN
		    BEGIN
		    .message_vect =
		        (IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
			 THEN
		    	     dbg$nmake_arg_vect (dbg$_needmore)
			 ELSE
		    dbg$nsyntax_error (dbg$nnext_word (.input_desc)));
		    RETURN sts$k_severe;
		    END;

	        verb_node [dbg$b_verb_composite] = cancel_radix_override;
	        END;
    	    END;

	[dbg$nmatch (.input_desc, dbg$cs_scope, 1)] :
	    BEGIN
	    verb_node [dbg$b_verb_composite] = cancel_scope;
	    END;

    	[dbg$nmatch (.input_desc, dbg$cs_source, 2)] :
    	    BEGIN
    	    verb_node[dbg$b_verb_composite] = cancel_source;

    	    ! Check for CANCEL SOURCE/MODULE=modname

    	    IF dbg$nmatch (.input_desc, dbg$cs_slash, 1)
    	    THEN
    		BEGIN
    		LOCAL 
    		    modnameptr;
    		BIND
    	            dbg$cs_module = UPLIT BYTE (6, 'MODULE');

    		! Read the string MODULE
    	
    		IF NOT dbg$nmatch (.input_desc, dbg$cs_module, 4)
    		THEN
    		    BEGIN
    		    .message_vect = dbg$nsyntax_error(
    			dbg$nnext_word(.input_desc));
    		    RETURN sts$k_severe;
    		    END;

    		! Read the = sign
    		
    		IF NOT dbg$nmatch (.input_desc, dbg$cs_equal, 1)
    		THEN
    		    BEGIN
    		    .message_vect = dbg$nsyntax_error(
    			dbg$nnext_word(.input_desc));
    		    RETURN sts$k_severe;
    		    END;

    		! Read the module name
    
    		IF NOT dbg$nsave_string (.input_desc,
    		    modnameptr, .message_vect)
    		THEN
    		    RETURN sts$k_severe;

    		! Convert the module name into an rst pointer

    		noun_node[dbg$l_noun_value] = 
    		    dbg$sta_getsourcemod(.modnameptr);

    		! If the above routine returns zero then the user has
    		! entered an invalid module name.

    		IF .noun_node[dbg$l_noun_value] EQL 0
    		THEN
    		    BEGIN
    		    .message_vect = dbg$nmake_arg_vect(
    			dbg$_nosuchmodu, 1, .modnameptr);
    	    	    RETURN sts$k_severe;
    		    END;

    		END ! CANCEL SOURCE/MODULE=modname

    	    ELSE ! the user has just entered CANCEL SOURCE

    		noun_node[dbg$l_noun_value] = 0;

    	    END; ! CANCEL SOURCE

	[dbg$nmatch (.input_desc, dbg$cs_trace, 1)] :	! CANCEL TRACE
	    BEGIN
	    VERB_NODE [DBG$B_VERB_COMPOSITE] = EVENT$K_CANCEL_TRACE;
	    RETURN DBG$EVENT_SHOW_CANCEL_SYNTAX (.INPUT_DESC,
						 .VERB_NODE,
						 .MESSAGE_VECT
						);
    	    END;

	[dbg$nmatch (.input_desc, dbg$cs_type, 2)] :    ! CANCEL TYPE/OVERRIDE
	    BEGIN
	    BIND
		DBG$CS_OVERRIDE = UPLIT BYTE (8, 'OVERRIDE');

	    ! Look for the /
	    !
	    IF NOT dbg$nmatch (.input_desc, dbg$cs_slash, 1)
	    THEN
		BEGIN
		.message_vect =
		(IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
		THEN
		    dbg$nmake_arg_vect (dbg$_needmore)
		ELSE
		    dbg$nsyntax_error (dbg$nnext_word (.input_desc)));
		RETURN sts$k_severe;
		END;


	    ! Look for 'override'
	    !
	    IF NOT dbg$nmatch (.input_desc, dbg$cs_override, 1)
	    THEN
		BEGIN
		.message_vect =
		(IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
		THEN
		    dbg$nmake_arg_vect (dbg$_needmore)
		ELSE
		    dbg$nsyntax_error (dbg$nnext_word (.input_desc)));
		RETURN sts$k_severe;
		END;

	    verb_node [dbg$b_verb_composite] = cancel_type_override;
	    END;

	[dbg$nmatch (.input_desc, dbg$cs_watch, 1)] :	! CANCEL WATCH
	    BEGIN
	    VERB_NODE [DBG$B_VERB_COMPOSITE] = EVENT$K_CANCEL_WATCH;
	    RETURN DBG$EVENT_SHOW_CANCEL_SYNTAX (.INPUT_DESC,
						 .VERB_NODE,
						 .MESSAGE_VECT
						);
    	    END;

	! Parse the CANCEL WINDOW command.
	!
	[DBG$NMATCH(.INPUT_DESC, DBG$CS_WINDOW, 3)]:
	    BEGIN
	    VERB_NODE[DBG$B_VERB_COMPOSITE] = CANCEL_WINDOW;
	    DBG$SCR_PARSE_CANWIND_CMD(.INPUT_DESC, .VERB_NODE);
	    END;


	! Any other CANCEL command constitutes a syntax error.
	!
	[OTHERWISE] :	! Syntax error
	    BEGIN
	    .message_vect =
	    (
	     IF dbg$nmatch (.input_desc, dbg$cs_cr, 1)
	     THEN
		 dbg$nmake_arg_vect (dbg$_needmore)
	     ELSE
		 dbg$nsyntax_error (dbg$nnext_word (.input_desc))
	    );
	    RETURN sts$k_severe;
	    END;

	TES;

    RETURN STS$K_SUCCESS;

    END;

GLOBAL ROUTINE DBG$NEXECUTE_CANCEL (VERB_NODE, MESSAGE_VECT) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine uses the command execution tree constructed by the parse
!	network as input and performs the semantic actions associated with
!	the given input corresponding to the CANCEL xxx command. If the command
!	cannot be executed, a message argument vector is constructed and returned.
!
! FORMAL PARAMETERS:
!
!	VERB_NODE	- A longword containing the address of the head node
!			  of the command execution tree. This corresponds to
!			  the veb node.
!
!	MESSAGE_VECT	- The address of a longword to contain the address of
!			  a standard message argument vector upon detection of
!			  errors.
!
! IMPLICIT INPUTS:
!
!	The linked list command execution tree pointed to by verb_node.
!
! IMPLICIT OUTPUTS:
!
!	On failure, a message argument vector is constructed and returned.
!
! ROUTINE VALUE:
!
!	An unsigned integer longword completion code
!
! COMPLETION CODES:
!
!	STS$K_SUCCESS (1)	- Success. Command executed.
!
!	STS$K_SEVERE  (4)	- Failure. Command not executed. Message argument
!				  vector constructed and returned.
!
! SIDE EFFECTS:
!
!	Various semantic actions corresponding to the CANCEL xxx command are
!	performed.
!
!--
    BEGIN

    MAP
	VERB_NODE: REF DBG$VERB_NODE;	! Pointer to command Verb Node

    LOCAL
	NOUN_NODE: REF DBG$NOUN_NODE,	! Pointer to a command Noun Node
	ADDR_EXP_DESC,			! Address expression descriptor
	ADDRESS: VECTOR [2],		! Address and bit offset
	TYPE;				! Type of AED described object



    ! Recover the noun node
    !
    NOUN_NODE = .VERB_NODE [DBG$L_VERB_OBJECT_PTR];


    ! Perform the indicated action base on the verb composite
    !
    CASE .VERB_NODE[DBG$B_VERB_COMPOSITE] FROM CANCEL_MINIMUM TO CANCEL_MAXIMUM OF
	SET


	! Execute the CANCEL ALL command.
	!
	[CANCEL_ALL]:
	    BEGIN
	    LOCAL
		SCOPE_LIST,
		DUMMY;

	    ! Just cancel everything in sight
	    !
	    scope_list = 0;
	    dbg$gl_context [dbg$k_all] = true;

	    DBG$EVENT_CANCEL_ALL ();

	    dbg$runframe [dbg$v_trace_all] = false;     ! For next two calls
	    dbg$gb_resignal = true;			! Exception break
	    dbg$set_mod_def ();				! Set mode defaults
	    dbg$set_stp_def ();				! Set step defaults
	    dbg$rst_setscope (scope_list, dummy);	! Scopes (new debugger)
	    dbg$gl_gbltyp = -1;				! Override type
	    dbg$gw_gbllngth = 0;			! Override length
	    dbg$gl_dflttyp = dsc$k_dtype_l;		! Default type
	    dbg$gw_dfltleng = 4;			! Default length
	    END;

	[cancel_break] :	! CANCEL BREAK <ADDR_EXP>
	    RETURN DBG$EVENT_SHOW_CANCEL_SEMANTICS (.VERB_NODE,
						    .MESSAGE_VECT
						   );


	! Execute the CANCEL DEVELOPER 0, 1, ..., n command.  Cancel all bits
	! in DBG$GL_DEVELOPER indicated on the command.  If no bits are speci-
	! fied, clear all developer bits.
	!
	[CANCEL_DEVELOPER]:
	    BEGIN
	    NOUN_NODE = .VERB_NODE[DBG$L_VERB_OBJECT_PTR];
	    IF .NOUN_NODE EQL 0 THEN DBG$GL_DEVELOPER = 0;
	    WHILE .NOUN_NODE NEQ 0 DO
		BEGIN
		DBG$GL_DEVELOPER[.NOUN_NODE[DBG$L_NOUN_VALUE]] = FALSE;
		NOUN_NODE = .NOUN_NODE[DBG$L_NOUN_LINK];
		END;

	    END;


	! Execute the CANCEL DISPLAY command.
	!
	[CANCEL_DISPLAY]:
	    DBG$SCR_EXECUTE_CANDISP_CMD(.VERB_NODE);


	! Execute the CANCEL EXCEPTION BREAK command.
	!
	[CANCEL_EXCEPTION_BREAK]:
	    BEGIN
	    DBG$GB_RESIGNAL = TRUE;
	    RETURN DBG$EVENT_SHOW_CANCEL_SEMANTICS(.VERB_NODE,.MESSAGE_VECT);
	    END;


	! Execute the CANCEL MODE command.
	!
	[CANCEL_MODE]:
    	    BEGIN
    	    dbg$gb_radix[dbg$b_radix_input] = dbg$nget_trans_radix(dbg$k_default);
    	    dbg$gb_radix[dbg$b_radix_output] = dbg$nget_trans_radix(dbg$k_default);
    	    dbg$gb_radix[dbg$b_radix_output_over] = dbg$k_default;
	    DBG$SET_MOD_DEF();
    	    END;

	[cancel_module] :	! CANCEL MODULE or CANCEL MODULE/ALL
	    BEGIN
		
	    ! Module names are stored away as counted strings
	    !
	    LOCAL
		NAME_BUFF : REF VECTOR [,BYTE];	! Module name buffer

	    WHILE .noun_node NEQA 0
	    DO
		BEGIN

		! Retrieve the name buffer and call the symbol table
		!
		name_buff = .noun_node [dbg$l_noun_value];
		IF NOT dbg$rst_canmod (name_buff [1], .name_buff [0])
		THEN
		    BEGIN
		    .message_vect = dbg$nmake_arg_vect (dbg$_nosuchmodu,
							1,
							name_buff [0]);
		    RETURN sts$k_severe;
		    END;


		! Obtain the next noun node
		!
		noun_node = .noun_node [dbg$l_noun_link];

		END;	! End of Loop
	
	    END;

	[cancel_module_all] :
	    BEGIN
	    dbg$rst_canmod (0, 0);
	    END;

    	[cancel_radix] :
    	    BEGIN
    	    dbg$gb_radix[dbg$b_radix_input] = dbg$nget_trans_radix(dbg$k_default);
    	    dbg$gb_radix[dbg$b_radix_output] = dbg$nget_trans_radix(dbg$k_default);
    	    dbg$gb_radix[dbg$b_radix_output_over] = dbg$k_default;
    	    END;

    	[cancel_radix_override]:
    	    dbg$gb_radix[dbg$b_radix_output_over] = dbg$k_default;

	[cancel_scope] :
	    BEGIN
	    LOCAL
		DUMMY,
		SCOPE_LIST;

	    scope_list = 0;
	    dbg$rst_setscope (scope_list, dummy);
	    END;

    	[cancel_source] : 	! CANCEL SOURCE[/MODULE=modname]
    	    BEGIN
    	    dbg$src_cancel_source(.noun_node[dbg$l_noun_value]);
    	    END;

	[cancel_trace] :	! CANCEL TRACE <ADDR_EXP>
	    RETURN DBG$EVENT_SHOW_CANCEL_SEMANTICS (.VERB_NODE,
						    .MESSAGE_VECT
						   );

	! Execute the CANCEL TYPE/OVERRIDE command.
	!
	[CANCEL_TYPE_OVERRIDE]:
	    BEGIN
	    DBG$GL_GBLTYP = -1;
	    DBG$GW_GBLLNGTH = 0;
	    END;


	! Execute the CANCEL WATCH <addr-expr> command.
	!
	[CANCEL_WATCH]:
	    RETURN DBG$EVENT_SHOW_CANCEL_SEMANTICS (.VERB_NODE,
					   	    .MESSAGE_VECT
						   );
	! Execute the CANCEL WINDOW command.
	!
	[CANCEL_WINDOW]:
	    DBG$SCR_EXECUTE_CANWIND_CMD(.VERB_NODE);


	! Any other CASE index constitutes and internal DEBUG error.
	!
	[INRANGE,OUTRANGE]:
	    $DBG_ERROR('DBGNCANCL\NEXECUTE_CANCEL');

	TES;

    RETURN STS$K_SUCCESS;

    END;

END ELUDOM
