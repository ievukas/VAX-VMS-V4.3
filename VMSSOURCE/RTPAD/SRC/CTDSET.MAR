	.TITLE	CTDSET - CTDRIVER SET MODE PROCESSING
	.IDENT	'V04-000'
	.DISABLE GLOBAL
	.PSECT $$$115_DRIVER,LONG
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
;
; FACILITY:
;
;	CTERM Remote terminal protocol driver
;
; ABSTRACT:
;
;
; ENVIRONMENT:
;
;	
;
;--
;
; AUTHOR: Jake VanNoy, CREATION DATE: 30-Aug-1982
;
; MODIFIED BY:
;
;	V03-002	JLV0337		Jake VanNoy		28-FEB-1984
;		Fix: CRFILL, LFFILL, WRAP, EIGHTBIT, SPEED_TABLE
;		HARDCOPY/SCOPE, MECHFORM, MECHTAB, PARITY
;
;	V03-001	JLV0289		Jake VanNoy		28-JUL-1983
;		Update to new characteristics selectors.
;	
;
;**


	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$TTDEF
	$TT2DEF
	$TSADEF
	$UCBDEF
	$TTYUCBDEF			; tty dependent UCB info

.EXTERNAL	CT$AB_TERM_TABLE

;
; MACROS:
;


;
; EQUATED SYMBOLS:
;

;*** TEMP

.save LOCAL_BLOCK
.psect $ABS$,ABS

. = UCB$T_CT_DEBUG_FILL

UCB$B_CT_CRFILL:	.BLKB
UCB$B_CT_LFFILL:	.BLKB
UCB$W_CT_SPEED:		.BLKW

.restore
;*** END TEMP

physical = ch$c_physical@8		; 0 leftshifted one byte
logical =  ch$c_logical@8		; 1 leftshifted one byte
cterm	=  ch$c_cterm@8			; 2 leftshifted one byte

P1	= 0
P2	= 4
P3	= 8
P4	= 12
P5	= 16
P6	= 20

;
; OWN STORAGE:
;
SPEED_TABLE:
    .WORD	0			; filler
    .WORD	50			; assumes values of TT$C_BAUD_xxx
    .WORD	75
    .WORD	110
    .WORD	134   
    .WORD	150
    .WORD	300
    .WORD	600
    .WORD	1200
    .WORD	1800
    .WORD	2000
    .WORD	2400
    .WORD	3600
    .WORD	4800
    .WORD	7200
    .WORD	9600
    .WORD	19200
    .WORD	38400			; future value?


	.SBTTL	CT_SET - Map VMS data into TSA characteristics

;++
;
; FUNCTIONAL DESCRIPTION:
;
;
; CALLING SEQUENCE:
;	BSBW	CT_SET
;
; INPUT PARAMETERS:
;	R2  - address of send buffer
;	R9  - UCB$L_DEVCHAR data
;	R10 - UCB$L_DEVDEPEND data
;	R11 - UCB$L_DEVDEPND2 data
;	P3(AP) - speed: (Low byte = transmit, High byte = receive)
;	P4(AP) - fill:	(Low byte = CR fill, High byte = LF fill)
;	P5(AP) - parity and frame size
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	
;	R2 - Address of byte after buffer data
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;	NONE
;
; SIDE EFFECTS:
;	NONE
;
;--


CT_SET::
	PUSHR	#^M<R9,R10,R11>		; Save input
	MOVAB	CTP$W_CH_PARAM(R2),R6	; buffer pointer
;
; See if DEVCLASS, DEVTYPE and DEVBUFSIZ are the same
;
	CMPL	R9,UCB$B_DEVCLASS(R5)	; Compare all at once
	BNEQ	10$			; Branch if not
;
; Because HARDCOPY is in TERM_BITS, check for change here
;
	XORL3	R10,UCB$L_DEVDEPEND(R5),R9 ; get bits that changed...
	BBS	#TT$V_SCOPE,R9,10$	; Scope/hardcopy change - send type and bits
	BRW	DEVDEPEND		; Ok to continue
10$:	
	EXTZV	#8,#8,R9,R8		; Get terminal type
	BEQL	30$			; Branch if setting to unknown
	MOVAB	CT$AB_TERM_TABLE,R7	; Get address of terminal table

20$:	CMPB	(R7)+,R8		; Is it the same?
	BEQL	50$			; Branch if yes
	MOVZBL	(R7)+,R0		; Get length of string
	ADDL2	R0,R7			; Add to address
	TSTB	(R7)			; End of table?
	BNEQ	20$			; Branch if no
;
; Unknown terminal, set up terminal attributes
;
30$:
	CLRL	R0			; Assume unknown/hardcopy
	BRB	55$			; continue
;
; terminal match found, copy text string of terminal type
;
50$:	
	MOVW	#logical!ch$c_lg_term_type,(R6)+ ; Set terminal type data
	MOVZBL	(R7),R0			; Get length of string
	INCL	R0			; Add one for count
	PUSHR	#^M<R2,R3,R4,R5>	; Save
	MOVC3	R0,(R7),(R6)		; Move terminal string
	MOVL	R3,R6			; Update buffer pointer
	POPR	#^M<R2,R3,R4,R5>	; Save

	MOVZBL	#CTP$M_CH_KNOWN,R0	; Set known, Assume hardcopy
55$:	BBC	#TT$V_SCOPE,R10,60$	; Branch if scope bit clear in new char
	BISB	#CTP$M_CH_SCOPE,R0	; Set scope
60$:
	MOVW	#logical!ch$c_lg_term_bits,(R6)+ ; Move terminal bits data
	MOVW	R0,(R6)+		; Set characteristic
;
; Now do terminal width
;
	EXTZV	#16,#16,R9,R8		; Get width
	CMPW	R8,UCB$W_DEVBUFSIZ(R5)	; Compare to current setting
	BEQL	DEVDEPEND		; Branch if equal, nothing to do
	
	MOVW	#logical!ch$c_lg_line_width,(R6)+ ; Set line width
	MOVW	R8,(R6)+		; Move into buffer



;
; Process DEVDEPEND bits (high byte is page length)
;
;
; R9 is scratch now

DEVDEPEND:
	EXTZV	#24,#8,R10,R8		; Fetch page length
	BICL	#TT$M_PAGE,R10		; Clear page length bits
	CMPB	R8,UCB$L_DEVDEPEND+3(R5); Compare to current setting
	BEQL	10$			; Branch if equal

	MOVW	#logical!ch$c_lg_page_length,(R6)+	; Move data type
	MOVW	R8,(R6)+		; Move data
10$:
	BICL3	#TT$M_PAGE,-
		UCB$L_DEVDEPEND(R5),R9	; Fetch current DEVDEPEND bits
	XORL	R10,R9			; Determine which bits changed
;
; CR fill and LF fill must be checked before the test for R9 = 0.
;
CRFILL:
	MOVZBL	P4(AP),R0		; Fetch CRFILL
	BBS	#TT$V_CRFILL,R9,10$	; Branch if it has changed
	BEQL	LFFILL			; or parameter = zero
	CMPB	R0,UCB$B_CT_CRFILL(R5)	; compare to old value
	BEQL	LFFILL			; branch if no change
10$:	MOVW	#logical!ch$c_lg_cr_fill,(R6)+	; Set data type
	MOVW	R0,(R6)+		; CR FILL count
	MOVB	R0,UCB$B_CT_CRFILL(R5)	; save value

LFFILL:
	MOVZBL	P4+1(AP),R0		; Fetch LFFILL
	BBS	#TT$V_LFFILL,R9,10$	; Branch if it has changed
	BEQL	20$			; or parameter = zero
	CMPB	R0,UCB$B_CT_LFFILL(R5)	; compare to old value
	BEQL	20$			; branch if no change
10$:	MOVW	#logical!ch$c_lg_lf_fill,(R6)+	; Set data type
	MOVW	R0,(R6)+		; LF FILL count
	MOVB	R0,UCB$B_CT_LFFILL(R5)	; save value
20$:
	TSTL	R9			; test for changes
	BNEQ	PASSALL			; Branch if not zero
	BRW	DEVDEPND2		; Optimization, skip this section

PASSALL:

NOECHO:
	BBC	#TT$V_NOECHO,R9,-
		NOTYPEAHD		; Branch if it hasn't changed
	MOVW	#cterm!ch$c_ct_normal_echo,(R6)+		; Set data type
	MOVZBL	#TT$V_NOECHO,R1		; Set bit
	BSBW	TEST_BIT_NEG		; test bit, negative sense

NOTYPEAHD:

ESCAPE:
	BBC	#TT$V_ESCAPE,R9,-
		HOSTSYNC		; Branch if it hasn't changed
	CLRB	R0
	BBC	#TT$V_ESCAPE,R10,10$	; branch if setting to noescape
	MOVB	#1,R0			; Set true
10$:
	MOVW	#cterm!ch$c_ct_input_esc,(R6)+		; Set escape input
	MOVB	R0,(R6)+		; true/false
	MOVW	#cterm!ch$c_ct_output_esc,(R6)+		; Set escape output
	MOVB	R0,(R6)+		; true/false

HOSTSYNC:				; TSA Input-flow-control
	BBC	#TT$V_HOSTSYNC,R9,-
		TTSYNC			; Branch if it hasn't changed
	MOVW	#logical!ch$c_lg_input_flow,(R6)+	; Set data type
	MOVZBL	#TT$V_HOSTSYNC,R1	; Set bit
	BSBW	TEST_BIT		; test bit

TTSYNC:					; TSA Output-flow-control
	BBC	#TT$V_TTSYNC,R9,-
		SCRIPT			; Branch if it hasn't changed
	MOVW	#logical!ch$c_lg_output_flow,(R6)+	; Set data type
	MOVZBL	#TT$V_TTSYNC,R1
	BSBW	TEST_BIT		; test bit

SCRIPT:
	BBC	#TT$V_SCRIPT,R9,-
		LOWER			; Branch if it hasn't changed
	MOVW	#cterm!ch$c_ct_auto_prompt,(R6)+	; Set data type
	MOVZBL	#TT$V_SCRIPT,R1
	BSBW	TEST_BIT		; test bit

LOWER:					; Cterm raise-input
	BBC	#TT$V_LOWER,R9,-
		MECHTAB			; Branch if it hasn't changed
	MOVW	#cterm!ch$c_ct_raise_input,(R6)+ ; Set data type
	MOVZBL	#TT$V_LOWER,R1		; set bit number
	BSBW	TEST_BIT_NEG		; test bit, negative sense
	
MECHTAB:				; Logical horizontal-tab
	BBC	#TT$V_MECHTAB,R9,-
		WRAP			; Branch if it hasn't changed
	MOVW	#logical!ch$c_lg_hor_tab,(R6)+	; Set data type
	MOVW	#2,R0			; Assume no mechtab
	BBC	#TT$V_MECHTAB,R10,-
		10$			; Branch if right
	MOVW	#1,R0			; Set mechtab
10$:
	MOVW	R0,(R6)+		; Move data

WRAP:
	BBS	#TT$V_WRAP,R9,10$
	BBC	#TT$V_SCOPE,R9,SCOPE	; Branch if neither hasn changed
10$:	MOVW	#logical!ch$c_lg_wrap,(R6)+	; Set data type
	MOVW	#4,R0			; Assume regulate software wrap
	BBS	#TT$V_WRAP,R10,30$	; branch if right
	MOVW	#1,R0			; Set No wrap
	BBS	#TT$V_SCOPE,R10,30$	; Branch if scope
	MOVW	#2,R0			; Set wrap/truncate - because of hardcopy
30$:
	MOVW	R0,(R6)+		; Set data in buffer

SCOPE:	; Handled above in DEVCHAR code

REMOTE:

HOLDSCREEN:
	BBC	#TT$V_HOLDSCREEN,R9,-
		EIGHTBIT		; Branch if it hasn't changed
	MOVW	#logical!ch$c_lg_page_stop,(R6)+	; Set data type
	MOVZBL	#TT$V_HOLDSCREEN,R1	; set bit number
	BSBW	TEST_BIT		; test bit

EIGHTBIT:
	BBC	#TT$V_EIGHTBIT,R9,-
		MBXDSABL		; Branch if it hasn't changed
	MOVW	#physical!ch$c_ph_eightbit,(R6)+ ; Set data type
	MOVZBL	#TT$V_EIGHTBIT,R1	; set bit number
	BSBW	TEST_BIT		; test bit

MBXDSABL:

NOBRDCST:

READSYNC:

MECHFORM:
	BBC	#TT$V_MECHFORM,R9,-
		HALFDUP			; Branch if it hasn't changed
	MOVW	#logical!ch$c_lg_form_feed,(R6)+	; Set data type
	MOVW	#2,R0			; Assume no mechform
	BBC	#TT$V_MECHFORM,R10,-
		10$			; Branch if right
	MOVW	#1,R0			; Set mechform
10$:
	MOVW	R0,(R6)+		; Move data

HALFDUP:

MODEM:

	BRB	DEVDEPND2		; Goto DEVDEPEND 2 checking

TEST_BIT:
	CLRB	R0			; Assume off
	BBC	R1,R10,10$		; Branch if not setting bit
	INCB	R0			; Set on
10$:
	MOVB	R0,(R6)+		; Move data
	RSB

TEST_BIT_NEG:
	CLRB	R0			; Assume off
	BBS	R1,R10,10$		; Branch if setting bit
	INCB	R0			; Set on
10$:
	MOVB	R0,(R6)+		; Move data
	RSB

TEST_BIT_DEV2:				; DEVDEPEND 2 version of TEST_BIT
	CLRB	R0			; Assume off
	BBC	R1,R11,10$		; Branch if not setting bit
	INCB	R0			; Set on
10$:
	MOVB	R0,(R6)+		; Move data
	RSB

;
; Process DEVDEPND2 bits 
;
;

DEVDEPND2:

	MOVL	UCB$L_DEVDEPND2(R5),R9	; Fetch current DEVDEPEND 2 bits
	XORL	R11,R9			; Determine which bits changed
	BEQL	CTSET_SPEED		; Branch if zero - optimization

LOCALECHO:

AUTOBAUD:
	BBC	#TT2$V_AUTOBAUD,R9,-
		HANGUP			; Is autobaud changing?
	MOVW	#physical!ch$c_ph_autobaud,(R6)+	; Set data type
	MOVZBL	#TT2$v_AUTOBAUD,R1	; Set bit number
	BSBW	TEST_BIT_DEV2		; test bit

HANGUP:

MODHANGUP:

BRDCSTMBX:

XON:

DMA:

ALTYPEAHD:

SETSPEED:

ANSICRT:

REGIS:

BLOCK:

AVO:

EDIT:

DECCRT:



CTSET_SPEED:

	MOVL	P3(AP),R0		; Speed?
	BEQL	CTSET_PARITY		; nope, continue
	MOVZBL	R0,R1			; Get transmit speed
	MOVAB	W^SPEED_TABLE,R11	;  table address
	MOVW	#physical!ch$c_ph_in_speed,(R6)+ ; set data type
	MOVW	(R11)[R1],(R6)+		; set speed
	EXTZV	#8,#8,R0,R1		; receive speed
	BNEQU	10$			; branch if non-zero
	MOVZBL	R0,R1			; same as transmit speed
10$:
	MOVW	#physical!ch$c_ph_out_speed,(R6)+ ; set data type
	MOVW	(R11)[R1],(R6)+		; set speed

CTSET_PARITY:

	MOVZWL	P5(AP),R1		; Fetch parameter
	BBC	#TT$V_ALTRPAR,R1,CTSET_EXIT ; Ignore if ALTER not flagged
	MOVW	#physical!ch$c_ph_parity_enable,(R6)+
	CLRB	R0			; Assume off
	BBC	#TT$V_PARITY,R1,10$	; Branch if not setting bit
	INCB	R0			; Set on
10$:	MOVB	R0,(R6)+		; Move data
	BEQL	CTSET_EXIT		; Ignore type if NOPARITY
	;
	; Now, set parity type
	;		
	MOVW	#physical!ch$c_ph_parity_type,(R6)+
	MOVW	#ch$c_parity_even,R0	; assume even
	BBC	#TT$V_ODD,R1,20$	; branch if even
	MOVW	#ch$c_parity_odd,R0	; set odd
20$:	MOVW	R0,(R6)+		; load value

CTSET_EXIT:
	
	;
	; Check if any characteristics changed
	;
	CLRL	R0			; Assume no changes
	MOVAB	CTP$W_CH_PARAM(R2),R1	; Original buffer pointer
	CMPL	R1,R6			; compare
	BEQL	10$			; branch if no changes
	INCL	R0			; Set low bit
10$:	
	MOVL	R6,R2			; Set output
	POPR	#^M<R9,R10,R11>		; Restore input
	RSB				; Return


.END	; CTSET
