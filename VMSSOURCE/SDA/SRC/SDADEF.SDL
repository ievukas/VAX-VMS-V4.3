{	Title	SDADEF - System Dump Analyzer Internal Definitions
{
{ Version:	'V04-000'
{
{****************************************************************************
{*									    *
{*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
{*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
{*  ALL RIGHTS RESERVED.						    *
{* 									    *
{*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
{*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
{*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
{*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
{*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
{*  TRANSFERRED.							    *
{* 									    *
{*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
{*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
{*  CORPORATION.							    *
{* 									    *
{*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
{*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
{* 									    *
{*									    *
{****************************************************************************

{++
{
{ FACILITY:  SDA Macro Library
{
{ ABSTRACT:
{
{	This file contains the SDL source for all System Dump Analyzer
{	structure blocks.
{
{ ENVIRONMENT:
{
{	Used by the System Dump Analyzer which is a user mode image capable
{	of switching to kernel or any other mode.
{
{--
{
{
{ AUTHOR:  Ralph O. Weber	 CREATION DATE:  23-OCT-1983
{
{ MODIFIED BY:
{
{	V03-008	PRB0303		Paul Beck	28-Dec-1983  17:53
{		Add OPT symbol for /NOSKIP qualifier on EXAM/INST
{
{	V03-007	ROW0237		Ralph O. Weber		23-OCT-1983
{		Combine SDADEF.MDL and SCRDEF.MDL to produce this SDL file.  
{		Also add structure definitions for the column output routine,
{		$COLMDEF.
{
{	V03-006	WMC0001		Wayne Cardoza		11-Jul-1983
{		OPT symbols for P0 and P1 process page tables.
{
{	V03-005	CWH1002		CW Hobbs		13-Mar-1983
{		Add OPT symbol for show summary /image
{
{	V03-004	RAS0123		Ron Schaefer		 8-Feb-1983
{		Add OPT symbol for show/rms=rjb.
{
{	V03-003	JLV0225		Jake VanNoy		21-JAN-1983
{		Add OPT symbols for ex/cond, ex/time, ex/psl and validate 
{		queue.
{
{	V03-002	LMP0031		L. Mark Pilant,		17-Jun-1982  13:07
{		Add support for a new command: SHOW PROCESS/CHANNELS.
{
{	V03-001 MSH0001		Maryann Hinden		10-Jun-1982
{		Add LCK option for SHOW PROC.
{
{--

{++
{
{ $COLMDEF -- Structure of an entry in a column definition list
{
{ This is the structure on a single entry in the list which describes
{ a column in a multi-column table.  The list is constructed by the
{ COLUMN_LIST macro and processed by the PRINT_COLUMNS routine.
{
{--

module $COLMDEF;

aggregate COLMDEF structure prefix COLM$;

    STRING longword unsigned;			/* Address of text for description column
    SOURCE longword;				/* Description of data source
    ACTION_VALUE union longword unsigned;	/* Value passed to action routine
	SRC_FAO byte unsigned;			/* Data type FAO selector for SOURCE
	    constant (
		FAO_AC, FAO_AS,				{ Strings
		FAO_OB, FAO_XB, FAO_ZB, FAO_UB, FAO_SB,	{ Bytes
		FAO_OW, FAO_XW, FAO_ZW, FAO_UW, FAO_SW,	{ Words
		FAO_OL, FAO_XL, FAO_ZL, FAO_UL, FAO_SL	{ Longwords
	    ) equals 0 increment 1;
	    { now the display if not equal values
	    constant (
		FAO_OB_NEQ, FAO_XB_NEQ, FAO_ZB_NEQ, FAO_UB_NEQ, FAO_SB_NEQ,
		FAO_OW_NEQ, FAO_XW_NEQ, FAO_ZW_NEQ, FAO_UW_NEQ, FAO_SW_NEQ,
		FAO_OL_NEQ, FAO_XL_NEQ, FAO_ZL_NEQ, FAO_UL_NEQ, FAO_SL_NEQ
	    ) equals COLM$K_FAO_OB+%x80 increment 1;
	    { finally, the "special case" codes
	    constant (
		FAO_Q2				{ a doubly-linked queue header
	    ) equals COLM$K_FAO_SL+1 increment 1;
    end ACTION_VALUE;
    DESC_SIZE byte unsigned;			/* Size of descriptor column
    VAL_SIZE byte unsigned;			/* Size of value column
    SEP_SIZE byte unsigned;			/* Size of seperator column
    RESERVED byte fill;
    constant "LENGTH" equals .;			/* Length of one entry

end COLMDEF;

end_module $COLMDEF;

{++
{
{ $NODEDEF -- Symbol Table Tree Node Definitions
{
{--

module $NODEDEF;

aggregate NODEDEF structure prefix NODE$;

    LEFT longword unsigned;			/* Left subtree pointer
    RIGHT longword unsigned;			/* Right subtree pointer
    BAL word unsigned;				/* Balance at this node (-1,0,1)
    PTR longword unsigned;			/* Pointer to symbol table entry (SYM$)
    constant "LENGTH" equals . tag C;		/* Length of node

end NODEDEF;

end_module $NODEDEF;

{++
{   $OBJDEF -- OBJECT MODULE DEFINITIONS
{
{   THIS MODULE CONTAINS DEFINTIONS FOR THE FIELDS IN AN OBJECT
{   MODULE RECORD.
{--

module $OBJDEF;

aggregate OBJDEF structure prefix OBJ$;

    TYPE_OVERLAY union fill;

	TYPE byte unsigned;			/* Type of record:
	    constant (
		HDR,				/*   Header
		GSD,				/*   Global symbol
		TIR,				/*   Text and information
		EOM,				/*   End of module
		DBG,				/*   Debug
		TBT,				/*   Traceback
		LNK				/*   Link options
	    ) equals 0 increment 1 tag C;

	GSD_TYPE byte unsigned;			/* Type of GSD record:
	    constant (
		GSD_PSC,			/*   PSECT definition
		GSD_SYM,			/*   Global symbol definition
		GSD_EPM,			/*   Entry point definition
		GSD_PRO				/*   Procedure definition
	    ) equals 0 increment 1 tag C;

    end TYPE_OVERLAY;

    RECORDS_OVERLAY union fill;

{
{ FORMAT FOR PSECT DEFINITION
{

	PSECT_RECORD structure fill;
	    PSC_ALI byte unsigned;		/* PSECT alignment (2**n)
	    PSC_FLAG union word unsigned;	/* PSECT flags:
		PSC_PIC bitfield mask;		/*   Position independent
		PSC_LIB bitfield mask;		/*   Defined from sharable image
		PSC_OVL bitfield mask;		/*   Overlaid psect
		PSC_REL bitfield mask;		/*   Requires relocation
		PSC_GBL bitfield mask;		/*   PSECT is global
		PSC_SHR bitfield mask;		/*   Potentially sharable
		PSC_EXE bitfield mask;		/*   Executable
		PSC_RD  bitfield mask;		/*   Can be read
		PSC_WRT bitfield mask;		/*   Can be written
	    end PSC_FLAG;
	    PSC_LEN longword unsigned;		/* Length of PSECT
	    PSC_NAME character;			/* PSECT name (counted string)
	end PSECT_RECORD;

{
{ FORMAT FOR GLOBAL SYMBOL DEFINITIONS
{

	GLOBAL_SYM_RECORD structure fill;
	    SYM_DTYPE byte unsigned;		/* Data type (see Arch. Handbook, Ap. C)
	    SYM_FLAGS union word unsigned;	/* Symbol flags:
		SYM_WEAK bitfield mask;		/*   Weak resolution (0 = strong)
		SYM_DEF bitfield mask;		/*   Definition (0 = reference)
		SYM_UNI bitfield mask;		/*   Universal definition (0 = local)
		SYM_REL bitfield mask;		/*   Relative symbol (0 = absolute)
	    end SYM_FLAGS;
	    SYM_PSIND byte unsigned;		/* PSECT index (only if def)
	    SYM_VALUE longword unsigned;	/* Value of symbol (only if def)
	    SYM_NAME character;			/* Symbol name (counted string)
	end GLOBAL_SYM_RECORD;;

{
{   FORMAT FOR ENTRY POINT RECORDS
{

	ENTRY_POINT_RECORD structure fill;
	    EPM_DTYPE byte unsigned;		/* Data type (see Arch. Handbook, Ap. C)
	    EPM_FLAGS word unsigned;		/* Flags (same as SYM_FLAGS)
	    EPM_PSIND byte unsigned;		/* PSECT index (only if def)
	    EPM_VALUE longword unsigned;	/* Value of symbol (only if def)
	    EPM_MASK word unsigned;		/* Entry mask
	    EPM_NAME character;			/* Symbol name (counted string)
	end ENTRY_POINT_RECORD;

{
{   FORMAT FOR END OF MODULE RECORD
{

	EOM_RECORD structure fill;
	    EOM_SEV byte unsigned;		/* Error severity for module
	    EOM_PSIND byte unsigned;		/* PSECT index of transfer address
	    EOM_TRANS longword unsigned;	/* Transfer address
	end EOM_RECORD;

    end RECORDS_OVERLAY;

end OBJDEF;

end_module $OBJDEF;

{++
{
{  $OPTDEF -- Options Selected From Commands
{
{--

module $OPTDEF;

aggregate OPTDEF union prefix OPT$;

    SHOW_PROCESS structure fill;		{ --- SHOW PROCESS options
	WSL bitfield mask;			/* WORKING SET LIST
	PPT bitfield mask;			/* PROCESS PAGE TABLES
	PST bitfield mask;			/* PROCESS SECTION TABLE
	REGS bitfield mask;			/* REGISTERS
	PCB bitfield mask;			/* PROCESS CONTROL BLOCK
	PHD bitfield mask;			/* PROCESS HEADER
	SYSPROC bitfield mask;			/* /SYSTEM ("SYSTEM PROCESS")
	RMS bitfield mask;			/* RMS STRUCTURES
	RMSD bitfield mask;			/* RMS STRUCTURES WITH DISPLAY
	LCK bitfield mask;			/* LOCK DATA STRUCTURES
	CHAN bitfield mask;			/* PROCESS CHANNELS
	P0_PPT bitfield mask;			/* P0 PROCESS PAGE TABLE
	P1_PPT bitfield mask;			/* P1 PROCESS PAGE TABLE
	PPT_LEN bitfield mask;			/* PAGE TABLE LENGTH SPECIFIED
	PPT_RNG bitfield mask;			/* PAGE TABLE RANGE SPECIFIED
    end SHOW_PROCESS;

    SHOW_POOL structure fill;			{ --- SHOW POOL options
	FREE bitfield mask;			/* SHOW FREE HOLES
	IRP bitfield mask;			/* IRP LOOKASIDE LIST
	NONPAGED bitfield mask;			/* NON-PAGED DYNAMIC POOL
	PAGED bitfield mask;			/* PAGED DYNAMIC POOL
	"LENGTH" bitfield mask;			/* LENGTH SPECIFIED
	LRP bitfield mask;			/* LRP LOOKASIDE LIST
	SUMMARY bitfield mask;			/* SUMMARY STATISTICS
	HEADER bitfield mask;			/* ONLY WANT HEADER
	TYPE bitfield mask;			/* TYPE SPECIFIED
	SRP bitfield mask;			/* SRP LOOKASIDE LIST
    end SHOW_POOL;

    EXAMINE structure fill;			{ --- EXAMINE options
	P0 bitfield mask;			/* P0 SPACE
	P1 bitfield mask;			/* P1 SPACE
	SYSTEM bitfield mask;			/* SYSTEM SPACE
	RANGE bitfield mask;			/* RANGE SPECIFIED (start:end)
	LENGTH bitfield mask;			/* LENGTH SPECIFIED (start;length)
	INST bitfield mask;			/* EXAMINE/INSTRUCTION
	PSL bitfield mask;			/* EXAMINE/PSL
	TIME bitfield mask;			/* EXAMINE/TIME
	COND bitfield mask;			/* EXAMINE/CONDITION_VALUE
        NOSKIP bitfield mask;			/* EXAMINE/INSTRUCTION/NOSKIP
    end EXAMINE;

    VALIDATE structure fill;			{ --- VALIDATE options
	SELF bitfield mask;			/* SELF RELATIVE QUEUE
    end VALIDATE;

    SHOW_STACK structure fill;			{ --- SHOW STACK options
	ISP bitfield mask;			/* INTERRUPT STACK
	KSP bitfield mask;			/* KERNEL STACK
	ESP bitfield mask;			/* EXECUTIVE STACK
	SSP bitfield mask;			/* SUPERVISOR STACK
	USP bitfield mask;			/* USER STACK
    end SHOW_STACK;

    SHOW_PFN structure fill;			{ --- SHOW PFN_DATA options
	FREE bitfield mask;			/* FREE PAGE LIST
	MODIFIED bitfield mask;			/* PAGE LIST
	BAD bitfield mask;			/* BAD PAGE LIST
	WHOLEPFN bitfield mask;			/* PFN DATA BASE
	SINGLEPFN bitfield mask;			/* PFN
    end SHOW_PFN;

    SHOW_PAGE structure fill;			{ --- SHOW PAGE_TABLE options
						{ SYSTEM PAGE TABLE (USE EXISTING ONE)
	GLOBAL bitfield mask;			/* GLOBAL PAGE TABLE
    end SHOW_PAGE;

    SHOW_SUMMARY structure fill;		{ --- SHOW SUMMARY options
 	IMAGE bitfield mask;			/* IMAGE FILE NAME
    end SHOW_SUMMARY;

    SET_RMS structure fill;			{ --- SET RMS options
	NO bitfield mask;			/* NEGATE THIS OPTION (MUST BE = 1)
	IFB bitfield mask;			/* IFAB
	IRB bitfield mask;			/* IRAB
	IDX bitfield mask;			/* IDX
	BDB bitfield mask;			/* BDB
	BDBSUM bitfield mask;			/* BDB SUMMARY
	ASB bitfield mask;			/* ASB
	CCB bitfield mask;			/* CCB
	WCB bitfield mask;			/* WCB
	FCB bitfield mask;			/* FCB
	FAB bitfield mask;			/* FAB
	RAB bitfield mask;			/* RAB
	NAM bitfield mask;			/* NAM
	XAB bitfield mask;			/* XAB
	RLB bitfield mask;			/* RLB
	BLB bitfield mask;			/* BLB
	BLBSUM bitfield mask;			/* BLB SUMMARY
	GBD bitfield mask;			/* GBD
	GBH bitfield mask;			/* GBH
	TRC bitfield mask;			/* TRC
	FWA bitfield mask;			/* FWA
	GBDSUM bitfield mask;			/* GBD SUMMARY
	RJB bitfield mask;			/* RJB

	constant RMSALL equals -2 tag M;	/* UPPER 31 BITS ON
	constant ALL equals 4095 tag M;		/* 12 BITS ON

    end SET_RMS;

end OPTDEF;

end_MODULE $OPTDEF;

{++
{
{ $SCRDEF -- Definitions for the SDA to screen package interface
{
{--

module $SCRDEF;

aggregate SCRDEF structure prefix SCR$;

    FLAGS union longword unsigned;		/* Flags longword:
	SCREEN bitfield mask;			/*   1 ==> screen oriented
						{    0 ==> scrolling
    end FLAGS;
    WIDTH word unsigned;			/* Width of each line
    PAGESIZE word unsigned;			/* Lines in screen
    DEVTYPE byte unsigned;			/* Device type (see $DCDEF)
    RESERVED byte dimension 11 fill;
    constant "LENGTH" equals . tag C;		/* Length of structure

end SCRDEF;

end_module $SCRDEF;

{++
{
{ $SYMDEF -- SDA Symbol Table Definitions
{
{ Definitions for a dump analyzer symbol table entry.
{
{--

module $SYMDEF;

aggregate SYMDEF structure prefix SYM$;

    VALUE longword unsigned;			/* Value of symbol
    SYMBOL character length 32;			/* Symbol name (counted string)
    constant "LENGTH" equals . tag C;		/* Length of an entry

end SYMDEF;

end_module $SYMDEF;
