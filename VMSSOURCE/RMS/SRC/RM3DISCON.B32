MODULE RM3DISCON (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                INDEXED SPECIFIC CODE FOR $DISCONNECT
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:        Wendy Koenig     CREATION DATE:        10-APR-78  15:10
!
!
! MODIFIED BY:
!
!	V03-010	MCN0005		Maria del C. Nasr	15-Mar-1983
!		More linkages reorganization
!
!	V03-009	MCN0004		Maria del C. Nasr	24-Feb-1983
!		Reorganize linkages.
!
!	V03-008	TMK0005		Todd M. Katz		22-Dec-1982
!		If the file allowed update access, and is either a prologue 3 
!		file or defines alternate keys, then there is a new record 
!		buffer which also must now be returned. Its address is stored 
!		in IRB$L_OLDBUF, and the size of the buffer is the same as the 
!		size of IRB$L_RECBUF. In some cases I have increased the size 
!		of these buffers by 2 to allow for sufficient room to store the 
!		size of the record together with the record itself within the 
!		buffer.
!
!	V03-007	TMK0004		Todd M. Katz		06-Dec-1982
!		If the file is a prologue 1 or 2 file, contains alternate keys,
!		and is open for write access then there will be a record buffer
!		to deallocate whose address is in IRB$L_RECBUF. This record
!		buffer will be used to store the primary data record being
!		deleted during a $DELETE. The use of this buffer has become
!		necessary because of the changes made in the $DELETE algorithm.
!		The user data record is now deleted before the alternate keys,
!		instead of the other way around which is how it has been done in
!		the past. Thus, the primary data record must be saved off to 
!		the side so that after the user data record has been deleted it
!		is still available for the extraction of the alternate keys as
!		part of their deletion. This record buffer is used to save the
!		primary data record.
!
!	V03-006	TMK0003		Todd M. Katz		02-Dec-1982
!		The number of keybuffers is now represented by the symbol
!		IFB$C_KBUFNUM.
!
!	V03-005	TMK0002		Todd M. Katz		24-Nov-1982
!		There are now seven keybuffers to be deallocated.
!
!	V03-004	KBT0337		Keith B. Thompson	10-Sep-1982
!		Remove ref. to RM$RETS0SPC routine
!
!	V03-003	KBT0164		Keith B. Thompson	21-Aug-1982
!		Reorganize psects
!
!	V03-002 TMK0001		Todd M. Katz		01-Jul-1982
!		Implement the RMS cluster solution for next record positioning.
!		This involves no longer deallocation the NRP cell because 
!		the next record positioning context is now kept locally in the
!		IRAB and there isn't any NRP cell to deallocate. Also add the
!		deallocation of a sixth keybuffer.
!
!	V03-001 LJA0007		Laurie Anderson 	25-Mar-1982
!		Change KBUFSZ to reference a macro when computing buffer 
!		size and make IFB$B_KBUFSZ a word, now: IFB$W_KBUFSZ.
!
!	V02-017	CDS0004		C Saether		10-Dec-1981
!		Rename the psect yet again.
!
!	V02-016	CDS0003		C Saether		29-Sep-1981
!		Deallocate 5 keybuffers always.
!
!	V02-015	PSK0002		Paulina S. Knibbe	08-Aug-1981
!		Remove support for truncated index keys on prologue
!		three files. (SPLCTX)
!
!	V02-014	KPL0001		Peter Lieberwirth	24-Jul-1981
!		Rename the PSECT again to fix broken banches.
!
!	V02-013	CDS0002		C D Saether		16-Jul-1981
!		Do not deallocate anything on indirect rundown.
!
!	V02-012	MCN0003		Maria del C. Nasr	19-Jun-1981
!		Deallocate the fifth key buffer for prologue 3 files.
!
!		PSK0001		Paulina S. Knibbe	12-Jun-1981
!		Dellocate the split context block in prologue three files
!
!		MCN0002		Maria del C. Nasr	15-May-1981
!		Deallocate the fourth key buffer in prologue 3 files.
!
!		MCN0001		Maria del C. Nasr	20-Apr-1981
!		Add code to deallocate record buffer for prologue 3 files.
!
!	V03-011	CDS0001		C D Saether		6-Feb-1981	23:57
!		Rename psect.
!
!	V02-010	REFORMAT	K. E. Kinnear		23-Jul-1980	10:06
!
! REVISION HISTORY:
!
!	V01-009			C. D. Saether		1-Nov-1979	6:00
!		RM$DISCONNOM returns lock BDB and BCB now.
!
!	V01-008			W. Koenig		6-Feb-1979	17:22
!		Decrement EXTRABUF IF BCNT GTR 2.
!
!	V01-007			W. Koenig		22-Jan-1979	13:09
!		Deallocate one lock BDB per stream, not per file.
!		(Was needed for UPDATE RRV.)
!
!	V01-006			W. Koenig		20-Nov-1978	11:19
!		More changes for sharing.
!
!	V01-005			W. Koenig		13-Nov-1978	13:36
!		Sharing implementation changes.
!
!	V01-004			W. Koenig		3-Nov-1978	9:12
!		Size of UPDBUF is NUM_KEYS, instead of UBUFSZ.
!
!	V01-003			W. Koenig		24-Oct-1978	14:01
!		Make changes caused by sharing conventions.
!
!	V01-002			W. Koenig		24-Jul-1978	14:00
!		Deallocate 3rd key buffer used to store primary key on put.
!
!*****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! define default psects for code
!
PSECT
    CODE = RM$RMS3(PSECT_ATTR),
    PLIT = RM$RMS3(PSECT_ATTR);

! Linkages
!

LINKAGE
    L_RABREG,
    L_RABREG_7,
    L_RETSPC;


! External Routines
!
EXTERNAL ROUTINE
    RM$KEY_DESC	: RL$RABREG_7,
    RM$RETSPC1	: RL$RETSPC;


%SBTTL 'RM$DISCONNECT3B'
GLOBAL ROUTINE RM$DISCONNECT3B : RL$RABREG =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!  This module performs the following functions required for
!	disconnecting indexed files:
!
!    1 -- return key buffers and update buffer
!    2 -- return old record buffer
!    3 -- return record output buffer
!
! CALLING SEQUENCE:
!
!	BSBW	RM$DISCONNECT3B
!	 Entered via case branch from RMS$DISCONNECT or RMS$CLOSE and
!	 BSBW from RM$DISCONNECT3
!
!	Returns to RM$DISCONNECT3 
!	 and then branches to RM$DISCOMMON to finish up.
!
! INPUT PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	R8 -- RAB address
!	R9 -- IRAB address
!	R10 -- IFAB address
!	R11 -- IMPURE AREA address
!
! OUTPUT PARAMETERS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Usual RMS status codes.
!
! SIDE EFFECTS:
!
!	Returns:	Key buffer
!			Old record buffer
!			Update buffer
!			BCB & the lock BDB if they existed
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_RAB_STR;

    GLOBAL REGISTER
	R_IDX_DFN_STR;

    ! If block I/O then return successfully, nothing needs doing.
    ! Also do nothing on indirect rundown.
    !
    IF .IFAB[IFB$V_BIO] OR .IFAB[IFB$V_PPF_IMAGE]
    THEN
	RETURN RMSSUC();

    ! Decrement the number of EXTRABUFS if we had extra buffers.
    !
    IF .IRAB[IRB$B_BCNT] GTR 2
    THEN
	IFAB[IFB$B_EXTRABUF] = .IFAB[IFB$B_EXTRABUF] - (.IRAB[IRB$B_BCNT] - 2);

    ! Return key buffer, ignore errors
    !
    BEGIN

    LOCAL
	SIZE,
	BUFFER_SIZE;

    SIZE = .IFAB[IFB$W_KBUFSZ] * IFB$C_KBUFNUM;

    IF .SIZE LSS 12
    THEN
	SIZE = 12;

    RM$RETSPC1 (.SIZE, 0, KEYBUF_ADDR(1));

    ! Return update buffer ignoring errors
    !
    IF .IFAB[IFB$V_UPD]
    THEN
	BEGIN
	SIZE = .IFAB[IFB$B_NUM_KEYS];

	IF .SIZE LSS 12
	THEN
	    SIZE = 12;

	RM$RETSPC1(.SIZE, 0, .IRAB[IRB$L_UPDBUF]);
	END;

    ! Determine the size of a record buffer, in case there is one to be
    ! returned. Make sure to include the two two bytes reserved for containing
    ! the record size.
    !
    RM$KEY_DESC(0);

    IF .IFAB[IFB$W_MRS] EQLU 0
    THEN
	BUFFER_SIZE = .IDX_DFN[IDX$B_DATBKTSZ] * 512
    ELSE
	IF .IFAB[IFB$B_PLG_VER] GEQU PLG$C_VER_3
	THEN
	    BUFFER_SIZE = .IFAB[IFB$W_MRS] + IRC$C_KEYCMPOVH 
					   + IRC$C_DATCMPOVH 
					   + 2
	ELSE
	    BUFFER_SIZE = .IFAB[IFB$W_MRS] + 2;

    IF .BUFFER_SIZE LSS 12
    THEN
	BUFFER_SIZE = 12;

    ! Return record buffer if prologue 3 file, or if prologue 1 or 2 file, 
    ! secondary keys are defined, and the file is write accessed. Ignore all
    ! errors.
    !
    IF  (.IFAB[IFB$B_PLG_VER] EQLU PLG$C_VER_3)
	 OR
	(.IFAB[IFB$B_NUM_KEYS] GTRU 1
		 AND
		.IFAB[IFB$V_WRTACC])
    THEN
	BEGIN
	RM$RETSPC1 (.BUFFER_SIZE, 0, .IRAB[IRB$L_RECBUF]);

	! Return the old record buffer, ignoring all errors, if the file allows
	! update access and is either a prologue 3 file or defines alternate 
	! keys.
	!
	IF .IFAB[IFB$V_UPD]
	THEN
	    RM$RETSPC1(.BUFFER_SIZE, 0, .IRAB[IRB$L_OLDBUF]);
	END;
    END;
    RETURN RMSSUC()

    END;

END

ELUDOM
