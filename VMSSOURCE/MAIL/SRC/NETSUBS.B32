MODULE MAIL$NETSUBS (
	IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	VAX/VMS MAIL UTILITY
!
! ABSTRACT:	Subroutines to speak to networks
!
! ENVIRONMENT:	NATIVE/USER MODE
!
! AUTHOR: Benn Schreiber, CREATION DATE: 10-Jul-1983
!
! MODIFIED BY:
!
!
!	V03-015	ROP0030		Robert Posniak		24-JUL-1984
!		Allow VFC format files to be sent in 
!		block mode.
!
!	V03-014	ROP0012		Robert Posniak		27-JUN-1984
!		Only send in block mode if input file has
!		variable length records.  Add check of
!		nodename for foreign protocol address
!		already exists test.
!
!	V03-013	ROP0001          Robert Posniak          24-MAY-1984
!		Check for oversized record when sending in record
!		mode.
!
!	V03-012	BLS0311		Benn Schreiber		 1-MAY-1984
!		Don't send 0-address to $qio.
!
!	V03-011	BLS0292		Benn Schreiber		29-MAR-1984
!		Correct handling of alternate protocol per problems
!		reported by Peter Lipman.  Complete attachment for MR.
!
!	V03-010	BLS0280		Benn Schreiber		 4-MAR-1984
!		Report errors in mail$get_input better.
!
!	V03-009	BLS0272		Benn Schreiber		18-FEB-1984 13:36:59 
!		Complete alternate protocol hooks. Use LIB$FIND_IMAGE_SYMBOL
!
!	V03-008	BLS0263		Benn Schreiber		 4-FEB-1984
!		Separate sending 0-end-of-username out into a routine
!		so that slave mails that timeout on usernames don't timeout.
!
!	V03-007	BLS0255		Benn Schreiber		28-Dec-1983
!		Convert to global flags.  Add routine to check addressee
!		already in list.  If createlink is called for node already
!		known dead, resignal the error for network master.  Insist
!		on getting an ncb back in the mailbox.  mail$get_input now
!		supports optional 3rd arg for output length.
!
!	V03-006	BLS0250		Benn Schreiber		12-Dec-1983
!		Clear block mode flag in accept_link if error.
!
!	V03-005	BLS0246		Benn Schreiber		28-Nov-1983
!		Allow ^C out of qio to access remote node.
!
!	V03-004	BLS0241		Benn Schreiber		27-Sep-1983
!		Fix maxmsg and bufquo args to ASN_WTH_MBX.
!
!	V03-003	BLS0240		Benn Schreiber		15-Sep-1983
!		Corrections to enable alternate net protocol.
!
!	V03-002	BLS0235		Benn Schreiber		23-Aug-1983
!		Fix loop problem while searching for existing link, and
!		ensure UBF set up correctly for sending messages.
!
!--

!
! INCLUDE FILES
!
    LIBRARY	'SYS$LIBRARY:STARLET';
    REQUIRE	'SRC$:MAILREQ';
    LIBRARY	'LIB$:MAILDEF';

EXTERNAL ROUTINE
    LIB$ASN_WTH_MBX,			!Assign channel with mailbox
    LIB$GET_VM,				!Allocate dynamic memory
    LIB$PUT_OUTPUT,			!Output to SYS$OUTPUT
    LIB$SCOPY_R_DX,			!String copy
    MAIL$ENABLE_CTRLC,			!Enable main ctrl/c handling
    MAIL$DISABLE_CTRLC,			! and disable it
    MAIL$READ_ERROR_TEXT,		!Read error text from slave and signal
    SMG$READ_COMPOSED_LINE,		!SMG input routine
    SYS$FAOL,				!Formatted ascii
    LIB$FIND_IMAGE_SYMBOL,		!Image activate and return address
    UTIL$REPORT_IO_ERROR;		!Report io error

EXTERNAL
    MAIL$SD_LNM_FILE_DEV,		! 'LNM$FILE_DEV'
    MAIL$G_CNCT : $BBLOCK,		!Static cnct for inbound connects
    MAIL$Q_ATTDESC : $BBLOCK,		!Descriptor of attachment file spec
    MAIL$Q_INPTRAN : $BBLOCK,		!Descriptor of SYS$NET translation
    MAIL$Q_PROTOCOL : $BBLOCK,		!Descriptor of protocol if alt input
    MAIL$L_SMG_KEYTABLE,		!SMG keytable index
    MAIL$L_SMG_KEYBOARD,		!SMG keyboard index
    MAIL$W_TTCHAN : WORD,		!Channel for terminal i/o
    MAIL$GL_SYSFLAGS : $BBLOCK,		!System-wide control flags
    MAIL$GL_FLAGS : $BBLOCK;		!control flags

EXTERNAL LITERAL
    SMG$_EOF;				!End of file from SMG$ routines

OWN
    LINK_CHAN,				!Channel for inbound logical link
    LINK_TFRADR,			!Transfer address for alt prot. inb.
    LINK_CONTEXT,			! and it's context
    NETMBX_CHAN;			!Network mailbox channel
  
GLOBAL
    MAIL$L_MBXBUF : LONG INITIAL(32),	!Size of mailbox buffer
    MAIL$L_MBXQUO : LONG INITIAL(96);	!Mailbox quota (3*mbxbuf)

BIND
    PROT_DESC = $DESCRIPTOR('MAIL$PROTOCOL') : $BBLOCK,		!..routine name
    X25_DESC = $DESCRIPTOR('PSIMAIL') : $BBLOCK,		!X25 image
    NETACP_DESC = $DESCRIPTOR('_NET:') : $BBLOCK,	!For speaking to netacp
    LINK_DESC = $DESCRIPTOR('SYS$NET') : $BBLOCK,	!Logical we look for
    OBJECT_DESC = $DESCRIPTOR('::"MAIL=') : $BBLOCK,	!Remote mail object
    PREFIX_DESC = $DESCRIPTOR('MAIL$PROTOCOL_') : $BBLOCK,
    SD_MAJOR = $DESCRIPTOR('MAIL$C_PROT_MAJOR'),
    SD_MINOR = $DESCRIPTOR('MAIL$C_PROT_MINOR');

GLOBAL BIND
    MAIL$Q_OBJDESC = OBJECT_DESC;	!For debugging private object type
!
! Define shared messages
!
$SHR_MSGDEF(MAIL,126,LOCAL,
	(READERR,ERROR));

GLOBAL ROUTINE MAIL$ADDR_EXISTS(PROT_DESC,NODE_DESC,USER_DESC,ADRLST) =
!+++
! FUNCTIONAL DESCRIPTION:
!
!	Check whether the named addressee is already in the list.
!	Return true if found, false if not.
!
! Inputs:
!
!	prot_desc = address of protocol descriptor
!	node_desc = address of nodename descriptor
!	user_desc = address of username descriptor
!	adrlst = address of address list listhead
!---
BEGIN
MAP
    PROT_DESC : REF $BBLOCK,
    NODE_DESC : REF $BBLOCK,
    USER_DESC : REF $BBLOCK,
    ADRLST : REF VECTOR[2,LONG];

LOCAL
    DESC : VECTOR[2,LONG],
    ADR : REF $BBLOCK,
    LNK : REF $BBLOCK;

ADR = .ADRLST[0];
!
! Loop through the addressee list
!
WHILE .ADR NEQ ADRLST[0]
DO BEGIN
!
! First check the username
!
    IF CH$EQL(.USER_DESC[DSC$W_LENGTH],.USER_DESC[DSC$A_POINTER],
		.ADR[ADR_B_NAMLNG],ADR[ADR_T_NAME])
    THEN BEGIN
	LNK = .ADR[ADR_L_LLNK];
!
! If protocol and node are 0, and this entry has no LNK pointer, then
! this is a match
!
	IF (.PROT_DESC[DSC$W_LENGTH] EQL 0)
	    AND (.NODE_DESC[DSC$W_LENGTH] EQL 0)
	    AND (.LNK EQL 0)
	    THEN RETURN TRUE;
	IF .PROT_DESC[DSC$W_LENGTH] EQL 0
	THEN BEGIN
!
! Same nodename is a match
!
	    IF (.LNK NEQ 0)
		AND (.LNK[LNK_B_PNLEN] EQL 0)
	        THEN IF CH$EQL(.NODE_DESC[DSC$W_LENGTH],.NODE_DESC[DSC$A_POINTER],
			.LNK[LNK_B_NODLEN],LNK[LNK_T_NODE])
		THEN RETURN TRUE;
	    END
	!
	! If foreign protocol, check protocol name and node name
	!
	ELSE IF (.LNK NEQ 0) AND (.LNK[LNK_B_PNLEN] NEQ 0) THEN
		IF CH$EQL(.PROT_DESC[DSC$W_LENGTH],
		   .PROT_DESC[DSC$A_POINTER],.LNK[LNK_B_PNLEN],LNK[LNK_T_PNAM])
	        AND CH$EQL(.NODE_DESC[DSC$W_LENGTH],.NODE_DESC[DSC$A_POINTER],
		     .LNK[LNK_B_NODLEN],LNK[LNK_T_NODE])
							 THEN RETURN TRUE;
	END;
    ADR = .ADR[ADR_L_FLINK];			!Move along the list
    END;
RETURN FALSE
END;

ROUTINE CTRLCAST (LNKDESC) =
!+++
! FUNCTIONAL DESCRIPTION:
!
!	Entered when a CTRL/C is detected while attempting connect to
!	remote node.
!---
BEGIN
MAP
    LNKDESC : REF $BBLOCK;

LOCAL
    DESC : VECTOR[2,LONG];

!
! Cancel network access qio, then fix up ctrl/c handler
!
$CANCEL(CHAN=.LNKDESC[LNK_W_CHAN]);
LNKDESC[LNK_V_DEAD] = TRUE;

IF .MAIL$GL_FLAGS[MAIF_V_ITERM]
THEN BEGIN
    $CANCEL(CHAN=.MAIL$W_TTCHAN);	!Cancel our ctrl/c ast
    MAIL$ENABLE_CTRLC();		!and enable main one
    END;

DESC[0] = .LNKDESC[LNK_B_NODLEN];
DESC[1] = LNKDESC[LNK_T_NODE];
SIGNAL(MAIL$_CONABORT,1,DESC,MAIL$_SENDABORT);	!Signal and unwind

RETURN 1
END;

ROUTINE SEND_STRING (DESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Write string to SYS$OUTPUT
!
!--
BEGIN

LIB$PUT_OUTPUT(.DESC);
RETURN 0
END;

GLOBAL ROUTINE MAIL$PRUNW_HANDLER (SIGARG,MECHARG) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	General handler to print message w/putmsg and then unwind if
!	the signal is MAIL$_CONABORT
!--
BEGIN
MAP
    SIGARG : REF $BBLOCK,
    MECHARG : REF $BBLOCK;

BIND
    SIGNAME = SIGARG[CHF$L_SIG_NAME] : $BBLOCK;

IF .SIGNAME EQL SS$_UNWIND
    THEN RETURN SS$_CONTINUE;

IF .SIGNAME NEQ MAIL$_CONABORT
    THEN RETURN SS$_RESIGNAL;

IF NOT .SIGNAME
THEN BEGIN
    MECHARG[CHF$L_MCH_SAVR0] = .SIGNAME;
    SIGARG[CHF$L_SIG_ARGS] = .SIGARG[CHF$L_SIG_ARGS] - 2;
    $PUTMSG(MSGVEC=SIGARG[CHF$L_SIG_ARGS],
		ACTRTN = SEND_STRING);
    SIGARG[CHF$L_SIG_ARGS] = .SIGARG[CHF$L_SIG_ARGS] + 2;
    SIGNAME[STS$V_SEVERITY] = STS$K_WARNING;
    END;

SETUNWIND();
RETURN 0
END;

ROUTINE ACCESS_NODE(LNKDESC, CNCTDESC, ALTOBJ_DESC) =
!+++
! FUNCTIONAL DESCRIPTION:
!
!	Perform the access qio.
!
! INPUTS:
!
!	lnkdesc = address of lnk descriptor block
!	cnctdesc = address of cnct block
!
!--
BEGIN

MAP
    LNKDESC : REF $BBLOCK,
    CNCTDESC : REF $BBLOCK,
    ALTOBJ_DESC : REF $BBLOCK;

BUILTIN
    NULLPARAMETER;

LOCAL
    STATUS,
    DESC : VECTOR[2,LONG],
    CNFREC : $BBLOCK[CNF_C_LENGTH],
    PTR : REF VECTOR[,BYTE],
    PTR1 : REF VECTOR[,BYTE],
    IOSB : VECTOR[4,WORD];

BIND
    TMPBUF = MAIL$G_CNCT[CNCT_T_BUFFER] : $BBLOCK,
    TMPWORD = TMPBUF : VECTOR[,WORD],
    TMPBYTE = TMPBUF : VECTOR[,BYTE];

IF .MAIL$GL_FLAGS[MAIF_V_ITERM]
    AND .MAIL$W_TTCHAN NEQ 0
THEN BEGIN
    MAIL$DISABLE_CTRLC();
    IF_ERR($QIOW(CHAN=.MAIL$W_TTCHAN,
		FUNC=IO$_SETMODE OR IO$M_CTRLCAST,
		IOSB=IOSB,
		P1=CTRLCAST,
		P2=.LNKDESC);,
	    SIGNAL(.STATUS));
    IF NOT .IOSB[0]
	THEN SIGNAL(.IOSB[0]);
    END;
!
! Set up configuration record
!
CNFREC[CNF_B_VERSION] = CNF_C_VERS;
CNFREC[CNF_B_ECO] = CNF_C_ECO;
CNFREC[CNF_B_CUSTECO] = 0;
CNFREC[CNF_B_OS] = CNF_C_VAXVMS;
CNFREC[CNF_L_OPTIONS] = 0;
CNFREC[CNF_B_RFM] = .CNCTDESC[CNCT_B_FILRFM]; !Record format
CNFREC[CNF_B_RAT] = .CNCTDESC[CNCT_B_FILRAT]; ! and attributes
!
! We want to send in block mode only if the input file has var len records
! or VFC format
!
CNFREC[CNF_L_IOMODE] = 0;
IF ((.CNFREC[CNF_B_RFM] EQL FAB$C_VAR) OR (.CNFREC[CNF_B_RFM] EQL FAB$C_VFC))
    THEN CNFREC[CNF_L_IOMODE] = CNF_M_BLKSEND;
CNFREC[CNF_B_SPARE1] = 0;
CNFREC[CNF_B_SPARE2] = 0;
!
! Set up the ncb.  the format is: 
!	NODE::"MAIL=/<word of 0><count><'count' bytes><16 - 'count' 0's>"
!
PTR = CH$MOVE(.LNKDESC[LNK_B_NODLEN],LNKDESC[LNK_T_NODE],TMPBUF);
IF NULLPARAMETER(3)
THEN PTR = CH$MOVE(.OBJECT_DESC[DSC$W_LENGTH],.OBJECT_DESC[DSC$A_POINTER],.PTR)
ELSE PTR = CH$MOVE(.ALTOBJ_DESC[DSC$W_LENGTH],
			.ALTOBJ_DESC[DSC$A_POINTER],.PTR);
PTR[0] = %C'/';
PTR = PTR[1];
PTR[0] = PTR[1] = 0;	!Create word of 0
PTR = PTR[2];
PTR[0] = CNF_C_LENGTH;	!Set length of configuration data
PTR = PTR[1];
PTR = CH$MOVE(CNF_C_LENGTH,CNFREC,.PTR); !move configuration data
%IF 16-CNF_C_LENGTH GTRU 0
%THEN
    PTR = CH$FILL(0,16-CNF_C_LENGTH,.PTR);		!Fill rest with 0s'
%FI
PTR[0] = %C'"';					!And a closing quotes
PTR = PTR[1];
DESC[0] = .PTR - TMPBUF;			!Create descriptor of NCB
DESC[1] = TMPBUF;
!
! Do Access qio
!
STATUS = $QIOW(FUNC=IO$_ACCESS,
		CHAN=.LNKDESC[LNK_W_CHAN],
		IOSB=IOSB,
		P2=DESC);

IF .STATUS
    THEN STATUS = .IOSB[0];

IF .MAIL$GL_FLAGS[MAIF_V_ITERM]
    AND .MAIL$W_TTCHAN NEQ 0
THEN BEGIN
    $CANCEL(CHAN=.MAIL$W_TTCHAN);	!Cancel our ctrl/c ast
    MAIL$ENABLE_CTRLC();		!and enable main one
    END;

RETURN .STATUS
END;

ROUTINE CHECK_PROTOCOL_VERSION (IMAGE_DESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Ensure that the symbols MAIL$C_PROT_MAJOR and MAIL$C_PROT_MINOR
!	are defined, and that they have acceptable values
!
!--
BEGIN

LOCAL
    MAJOR_P,
    MINOR_P;

IF_ERR(LIB$FIND_IMAGE_SYMBOL(.IMAGE_DESC,SD_MAJOR,MAJOR_P);,
	RETURN .STATUS);
IF .MAJOR_P NEQ 1
    THEN RETURN SIGNAL(MAIL$_IVPROTVAL,3,
		SD_MAJOR,.MAJOR_P,.IMAGE_DESC);

IF_ERR(LIB$FIND_IMAGE_SYMBOL(.IMAGE_DESC,SD_MINOR,MINOR_P);,
	RETURN .STATUS);

IF .MINOR_P NEQ 1
    THEN RETURN SIGNAL(MAIL$_IVPROTVAL,3,
		SD_MINOR,.MINOR_P,.IMAGE_DESC);

RETURN TRUE
END;

ROUTINE TRY_CONNECT(LNKDESC,CNCTDESC,ALTOBJ_DESC) =
!++
!
! Try to connect with the remote node, ensuring that a connect
! confirm message is received.
!
!--
BEGIN
MAP
    LNKDESC : REF $BBLOCK,
    CNCTDESC : REF $BBLOCK;

BUILTIN
    NULLPARAMETER;

LOCAL
    STATUS,
    OBJPTR,
    PTR : REF VECTOR[,BYTE],
    PTR1 : REF $BBLOCK;

BIND
    TMPBUF = MAIL$G_CNCT[CNCT_T_BUFFER] : $BBLOCK,
    TMPWORD = TMPBUF : VECTOR[,WORD],
    TMPBYTE = TMPBUF : VECTOR[,BYTE],
    QIOSB = LNKDESC[LNK_Q_IOSB] : VECTOR[,WORD];

OBJPTR = 0;
IF NOT NULLPARAMETER(3)
    THEN OBJPTR = .ALTOBJ_DESC;

INCRU I FROM 1 TO 5
DO BEGIN
    !
    ! Try up to 5 times to access the remote node.  The extra times
    ! are done in the instance that the connect was made but we
    ! failed to read the mailbox.
    !
    IF NOT (STATUS = ACCESS_NODE(.LNKDESC,.CNCTDESC,.OBJPTR))
	THEN EXITLOOP;
    !
    ! Read the mailbox to get the connect confirm message
    !
    IF (STATUS = $QIOW(CHAN=.LNKDESC[LNK_W_MBXCHAN],
		FUNC=IO$_READVBLK,
		IOSB=QIOSB,
		P1=TMPBUF,
		P2=.MAIL$L_MBXBUF))
	    AND (STATUS = .QIOSB[0])
	    AND (.TMPWORD[0] EQL MSG$_CONFIRM)	!ensure it's a connect confirm
    THEN BEGIN
	PTR1 = TMPBYTE[4] + .TMPBYTE[4] + 2;
	PTR = .PTR1 - 1;
	!
	! See if receiver is up to block mode transfer.  Assume 1 block
	! transfers for now.
	!
	IF (.PTR[0] EQL CNF_C_LENGTH)
	    AND NOT .PTR1[CNF_V_BLKSEND]
	    AND (.PTR1[CNF_B_VERSION] GEQU CNF_C_VERS)
	        THEN IF (.(PTR1[CNF_B_ECO])<0,8,1> GEQ CNF_C_ECO)
		    THEN LNKDESC[LNK_V_BLKMODE] = .PTR1[CNF_V_BLKRECV];
	EXITLOOP;
	END;
    !
    ! We failed to read the connect confirm.  Issue a Deaccess and
    ! try again.
    !
    $QIOW(CHAN=.LNKDESC[LNK_W_CHAN],
		FUNC=IO$_DEACCESS,
		IOSB=QIOSB);
    STATUS = SS$_NODATA;
    END;	!loop

RETURN .STATUS
END;

ROUTINE CONNECT_LINK(LNKDESC,PROTOCOL_DESC,NODE_DESC,CNCTDESC) =
!+++
! FUNCTIONAL DESCRIPTION:
!
!	Make an outbound connection with a remote node
!
! INPUTS:
!
!	lnkdesc = address of lnk descriptor block
!	protocol_desc = address of protocol descriptor
!	node_desc = address of descriptor of node name
!	cnctdesc = address of cnct block for message
!
!--
BEGIN

MAP
    LNKDESC : REF $BBLOCK,
    PROTOCOL_DESC : REF $BBLOCK,
    NODE_DESC : REF $BBLOCK,
    CNCTDESC : REF $BBLOCK;

LOCAL
    STATUS,
    PTR : REF VECTOR[,BYTE],
    PTR1 : REF $BBLOCK,
    TRNLNMLST : $ITMLST_DECL(ITEMS=1),
    DESC : VECTOR[2,LONG],
    DESC_1 : VECTOR[2,LONG];

BIND
    TMPBUF = MAIL$G_CNCT[CNCT_T_BUFFER] : $BBLOCK,
    TMPWORD = TMPBUF : VECTOR[,WORD],
    TMPBYTE = TMPBUF : VECTOR[,BYTE],
    QIOSB = LNKDESC[LNK_Q_IOSB] : VECTOR[,WORD];

IF NOT .LNKDESC[LNK_V_ALTP]
THEN BEGIN
!
! Use DECNET
!
    !
    ! Assign a channel to _NET.  Then, attempt to access the remote
    ! node. 
    !
    IF (STATUS = LIB$ASN_WTH_MBX(NETACP_DESC,
				MAIL$L_MBXBUF,MAIL$L_MBXQUO,LNKDESC[LNK_W_CHAN],
				LNKDESC[LNK_W_MBXCHAN]))
    THEN STATUS = TRY_CONNECT(.LNKDESC,.CNCTDESC);
    !
    ! Check for control/c typed after we switched handlers.  unwind if
    ! ctrl/c typed.
    !
    IF .MAIL$GL_FLAGS[MAIF_V_CTRLCFL]
    THEN BEGIN
	MAIL$GL_FLAGS[MAIF_V_CTRLCFL] = 0;
	$DASSGN(CHAN=.LNKDESC[LNK_W_CHAN]);
	SIGNAL(MAIL$_CONABORT,1,DESC,MAIL$_SENDABORT); !Will unwind
	END;
    IF NOT .STATUS
    THEN BEGIN
	$DASSGN(CHAN=.LNKDESC[LNK_W_CHAN]);
	IF NOT .LNKDESC[LNK_V_DEAD]
	    THEN (SIGNAL(MAIL$_LOGLINK,1,.NODE_DESC,.STATUS);
			LNKDESC[LNK_L_STS] = .STATUS)
	    ELSE RETURN MAIL$_LOGLINK;
	END;
    RETURN .STATUS
    END
ELSE BEGIN
!
! Alternate protocol.  Translate MAIL$PROTOCOL_pname
! If it translates, use that for the image name.  If it doesn't
! translate, use pname_MAILSHR
!
    PTR = CH$MOVE(.PREFIX_DESC[DSC$W_LENGTH],
			.PREFIX_DESC[DSC$A_POINTER],TMPBUF);
    PTR = CH$MOVE(.PROTOCOL_DESC[DSC$W_LENGTH],
			.PROTOCOL_DESC[DSC$A_POINTER],.PTR);	

    DESC[0] = .PTR - TMPBUF;
    DESC[1] = TMPBUF;
    $ITMLST_INIT(ITMLST=TRNLNMLST,
	(ITMCOD=LNM$_STRING,BUFADR=.DESC[1],
		BUFSIZ=NAM$C_MAXRSS,RETLEN=DESC));

    IF NOT $TRNLNM(ATTR=%REF(LNM$M_CASE_BLIND),
	TABNAM=MAIL$SD_LNM_FILE_DEV,
	LOGNAM=DESC,
	ITMLST=TRNLNMLST)
    THEN BEGIN
	PTR = CH$MOVE(.PROTOCOL_DESC[DSC$W_LENGTH],
			.PROTOCOL_DESC[DSC$A_POINTER],TMPBUF);
	PTR = CH$MOVE(8,UPLIT('_MAILSHR'),.PTR);
	DESC[0] = .PTR - TMPBUF;
	END
    ELSE IF .TMPBYTE[0] EQL %C'%'
    THEN BEGIN
	!
	! If it has a leading percent, then strip it off and attempt
	! to connect to the resulting string. It should have the format
	! node::"task=taskname", STAR::"TASK=MAILX" for instance.
	! If successful, mail will speak mail-11 with the remote slave
	!
	DESC[0] = .DESC[0] - 1;
	DESC[1] = .DESC[1] + 1;
	DESC_1[0] = .DESC[0];
	DESC_1[1] = .DESC[1];
	IF NOT CH$FAIL(PTR = CH$FIND_CH(.DESC_1[0],.DESC_1[1],%C':'))
		THEN DESC_1[0] = .PTR - .DESC_1[1];
	DESC_1[0] = MINU(.DESC_1[0],LNK_S_NODE);	!Descriptor of node name
	CH$MOVE(.DESC_1[0],.DESC_1[1],LNKDESC[LNK_T_NODE]); !Also put in lnkdesc
	DESC_1[1] = LNKDESC[LNK_T_NODE];
	LNKDESC[LNK_V_ALTP] = FALSE;
	LNKDESC[LNK_B_NODLEN] = 0;
	IF (STATUS = LIB$ASN_WTH_MBX(NETACP_DESC,
				MAIL$L_MBXBUF,MAIL$L_MBXQUO,LNKDESC[LNK_W_CHAN],
				LNKDESC[LNK_W_MBXCHAN]))
	    THEN STATUS = TRY_CONNECT(.LNKDESC,.CNCTDESC,DESC);
	LNKDESC[LNK_B_NODLEN] = .DESC_1[0];
	IF NOT .STATUS
	THEN BEGIN
	    $DASSGN(CHAN=.LNKDESC[LNK_W_CHAN]);
	    IF NOT .LNKDESC[LNK_V_DEAD]
		THEN (SIGNAL(MAIL$_LOGLINK,1,DESC_1,.STATUS);
				LNKDESC[LNK_L_STS] = .STATUS)
		ELSE RETURN MAIL$_LOGLINK;
	    END;
	RETURN .STATUS;
	END;
    DESC_1[0] = .PREFIX_DESC[DSC$W_LENGTH] - 1;
    DESC_1[1] = .PREFIX_DESC[DSC$A_POINTER];
    IF_ERR(LIB$FIND_IMAGE_SYMBOL(DESC,DESC_1,LNKDESC[LNK_L_TFRADR]);,
		RETURN .STATUS);
    IF_ERR(CHECK_PROTOCOL_VERSION(DESC);,
		RETURN .STATUS);
    RETURN (.LNKDESC[LNK_L_TFRADR])(LNKDESC[LNK_L_CONTEXT],
					LNK_C_OUT_CONNECT,
					.PROTOCOL_DESC,
					.NODE_DESC,
					MAIL$_LOGLINK,
					.CNCTDESC[CNCT_B_FILRAT],
					.CNCTDESC[CNCT_B_FILRFM],
					.MAIL$GL_SYSFLAGS<16,16,0>,
					(IF .MAIL$GL_FLAGS[MAIF_V_ATTACHMENT]
						THEN MAIL$Q_ATTDESC
						ELSE 0));
    END;
END;

GLOBAL ROUTINE MAIL$CREATELINK (PROTOCOL_DESC,NODE_DESC,CNCTDESC,RETADR) =
!+++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called to create a logical link to the
!	specified node. First, the existing logical link list is
!	searched to see if a link to that node already exists.  If
!	it does, then the address of the list entry is returned.
!	If a link does not exist, one is assigned and a logical link
!	list entry is created, entered in the list, and the address returned.
!
! INPUTS:
!
!	protocol_desc = address of descriptor of protocol, 0 implies DECnet
!	node_desc = address of descriptor of node name
!	cnctdesc = address of cnct block
!	retadr = address of longword to return logical link list entry address
!
!---
BEGIN

MAP
    PROTOCOL_DESC : REF $BBLOCK,
    NODE_DESC : REF $BBLOCK,
    CNCTDESC : REF $BBLOCK,
    RETADR : REF VECTOR[,LONG];

BUILTIN
    INSQUE;

LOCAL
    STATUS,
    PTR : REF $BBLOCK;

BIND
    LNKLST = CNCTDESC[CNCT_Q_LNKLST] : VECTOR[,LONG];

PTR = .LNKLST[0];
!
! See if link already exists
!
WHILE .PTR NEQ LNKLST[0]
DO BEGIN
    IF CH$EQL(.NODE_DESC[DSC$W_LENGTH],.NODE_DESC[DSC$A_POINTER],
		.PTR[LNK_B_NODLEN],PTR[LNK_T_NODE])
    THEN IF ((.PTR[LNK_B_PNLEN] EQL 0)		!Check protocol spec match
	    AND (.PROTOCOL_DESC[DSC$W_LENGTH] EQL 0))
	    OR CH$EQL(.PROTOCOL_DESC[DSC$W_LENGTH],
			.PROTOCOL_DESC[DSC$A_POINTER],
			.PTR[LNK_B_PNLEN],PTR[LNK_T_PNAM])
	THEN BEGIN
	    RETADR[0] = .PTR;			!Return address of found lnk
	    IF .PTR[LNK_V_DEAD]
		AND .MAIL$GL_FLAGS[MAIF_V_NETJOB] !Only signal if net slave
		THEN SIGNAL(MAIL$_LOGLINK,1,.NODE_DESC,.PTR[LNK_L_STS]);
	    RETURN (NOT .PTR[LNK_V_DEAD]);	! and whether it's dead or not
	    END;
    PTR = .PTR[LNK_L_FLINK];			!Next block
    END;
!
! Not found.  Create logical link list entry
!
IF_ERR(LIB$GET_VM(%REF(.PROTOCOL_DESC[DSC$W_LENGTH]+LNK_C_LENGTH),PTR);,
	SIGNAL(.STATUS);
	RETURN .STATUS);

!
! Insert into the list
!
CH$FILL(0,LNK_C_LENGTH,.PTR);
INSQUE(.PTR,LNKLST);
PTR[LNK_B_NODLEN] = .NODE_DESC[DSC$W_LENGTH];
CH$MOVE(.PTR[LNK_B_NODLEN],.NODE_DESC[DSC$A_POINTER],PTR[LNK_T_NODE]);
!
! Copy protocol name if passed.  Set ALTP flag
!
IF (PTR[LNK_B_PNLEN] = .PROTOCOL_DESC[DSC$W_LENGTH]) NEQ 0
THEN BEGIN
    CH$MOVE(.PTR[LNK_B_PNLEN],.PROTOCOL_DESC[DSC$A_POINTER],
				PTR[LNK_T_PNAM]);
    PTR[LNK_V_ALTP] = TRUE;
    END;
!
! Create logical link to slave mail
!
RETADR[0] = .PTR;
STATUS = CONNECT_LINK(.PTR,.PROTOCOL_DESC,.NODE_DESC,.CNCTDESC);
$DASSGN(CHAN=.PTR[LNK_W_MBXCHAN]);		!Deassign mailbox now
IF NOT .STATUS
    THEN BEGIN
	PTR[LNK_W_CHAN] = 0;
	PTR[LNK_V_DEAD] = TRUE;
	END;

RETURN .STATUS

END;

ROUTINE WRITE_SLAVE(LNKDESC,OUT_DESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Write a record to the remote node
!
! Inputs:
!
!	lnkdesc = address of descriptor of lnk block
!	out_desc = address of descriptor of record to write
!
!
! 	Errors are signalled as well as returned.
!--
BEGIN

MAP
    LNKDESC : REF $BBLOCK,
    OUT_DESC : REF $BBLOCK;

LOCAL
    STATUS;

BIND
    QIOSB = LNKDESC[LNK_Q_IOSB] : VECTOR[,WORD];

IF .LNKDESC[LNK_V_DEAD]
    THEN RETURN FALSE;

STATUS = $QIOW(CHAN=.LNKDESC[LNK_W_CHAN],
		FUNC=IO$_WRITEVBLK,
		IOSB=LNKDESC[LNK_Q_IOSB],
		P1=(IF .OUT_DESC[DSC$A_POINTER] NEQ 0
			THEN .OUT_DESC[DSC$A_POINTER]
			ELSE OUT_DESC),
		P2=.OUT_DESC[DSC$W_LENGTH]);

IF .STATUS
    THEN STATUS = .QIOSB[0];

IF NOT .STATUS
THEN BEGIN
    SIGNAL(((SS$_PROTOCOL AND NOT STS$M_SEVERITY)
			OR STS$K_ERROR OR MAIL$V_FACILITY),0,.STATUS);
    LNKDESC[LNK_V_DEAD] = TRUE;
    END;

RETURN .STATUS
END;

ROUTINE READ_SLAVE(LNKDESC,IN_DESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Read a record from the remote node
!
! Inputs:
!
!	lnkdesc = address of lnk block for node
!	in_desc = address of descriptor of buffer
!		length is modified in place to reflect amount actually read
!
!	Errors are signalled as well as returned
!--
BEGIN

MAP
    LNKDESC : REF $BBLOCK,
    IN_DESC : REF $BBLOCK;
BIND
    QIOSB = LNKDESC[LNK_Q_IOSB] : VECTOR[,WORD];

LOCAL
    STATUS;

IF .LNKDESC[LNK_V_DEAD]
    THEN RETURN FALSE;

STATUS = $QIOW(CHAN=.LNKDESC[LNK_W_CHAN],
		FUNC=IO$_READVBLK,
		IOSB=LNKDESC[LNK_Q_IOSB],
		P1=.IN_DESC[DSC$A_POINTER],
		P2=.IN_DESC[DSC$W_LENGTH]);

IN_DESC[DSC$W_LENGTH] = .QIOSB[1];

IF .STATUS
    THEN STATUS = .QIOSB[0];

IF NOT .STATUS
THEN BEGIN
    SIGNAL((SS$_PROTOCOL AND NOT STS$M_SEVERITY
			OR STS$K_ERROR OR MAIL$V_FACILITY),0,.STATUS);
    LNKDESC[LNK_V_DEAD] = TRUE;
    END;

RETURN .STATUS

END;

ROUTINE CHECK_SLAVE_STATUS(LNKDESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Reads a response from the remote node
!
! Inputs:
!
!	lnkdesc = address of lnk descriptor for node
!
! Read from the node, and treat the first 4 bytes as a longword value,
! indicating success or failure.  If failure, then read and print the
! error text to follow
!
!--
BEGIN

MAP
    LNKDESC : REF $BBLOCK;

LOCAL
    STATUS,
    DESC : VECTOR[2,LONG],
    TMPBUF : $BBLOCK[MAIL$K_INBUFFSZ];

BIND
    TMPVEC = TMPBUF : VECTOR[,LONG];

DESC[0] = MAIL$K_INBUFFSZ;
DESC[1] = TMPBUF;
IF_ERR(READ_SLAVE(.LNKDESC,DESC);,
	RETURN .STATUS);

!
! Check the first longword read.  If lbs, then return success.
! Otherwise, call routine to read error text from remote node (until
! 1 byte record of 0) and then signal it
!
RETURN (IF (STATUS = .TMPVEC[0])
		THEN TRUE
    		ELSE (MAIL$READ_ERROR_TEXT(.LNKDESC,READ_SLAVE);
				.STATUS))
END;

ROUTINE WRITE_CHECK_SLAVE(LNKDESC,OUT_DESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Write a record to the remote node, and then check the
!	response sent back
!
! Inputs:
!
!	lnkdesc = address of lnk descriptor
!	outdesc = address of descriptor of record to send
!
! The record is written to the remote node.  A response is read. If
! not success, the error text is read and signalled.
!
!--
BEGIN

MAP
    LNKDESC : REF $BBLOCK,
    OUT_DESC : REF $BBLOCK;

BUILTIN
    CALLG,AP;

LOCAL
    STATUS;

IF NOT (STATUS = CALLG(.AP,WRITE_SLAVE))
    THEN RETURN .STATUS
    ELSE RETURN CHECK_SLAVE_STATUS(.LNKDESC)
END;

GLOBAL ROUTINE MAIL$NET_FROM(LNKDESC,SENDER_DESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Send the sender's name to a remote node
!
! Inputs:
!
!	lnkdesc = address of lnk descriptor
!	sender_desc = address of descriptor of sender's name
!
!--

BEGIN

MAP
    LNKDESC : REF $BBLOCK,
    SENDER_DESC : REF $BBLOCK;

LOCAL
    DESC : VECTOR[2,LONG],
    STATUS;

BUILTIN
    CALLG,AP;

IF .LNKDESC[LNK_V_DEAD]
    OR .LNKDESC[LNK_V_FSENT]
    THEN RETURN TRUE;

IF .LNKDESC[LNK_V_ALTP]
THEN BEGIN
    DESC[0] = .LNKDESC[LNK_B_NODLEN];
    DESC[1] = LNKDESC[LNK_T_NODE];
    STATUS = (IF .LNKDESC[LNK_L_TFRADR] NEQ 0
			THEN (.LNKDESC[LNK_L_TFRADR])(LNKDESC[LNK_L_CONTEXT],
					LNK_C_OUT_SENDER,
					DESC,
					.SENDER_DESC)
			ELSE TRUE)
    END
ELSE STATUS = CALLG(.AP,WRITE_SLAVE);

LNKDESC[LNK_V_FSENT] = TRUE;
RETURN .STATUS

END;

GLOBAL ROUTINE MAIL$NET_ADDR(LNKDESC,ADDR_DESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Check that an addressee exists on a remote node
!
! Inputs:
!
!	lnkdesc = address of lnk descriptor for node
!	addr_desc = address of descriptor of addressee
!
! Returns true if addressee exists, false if not
!
!--
BEGIN

MAP
    LNKDESC : REF $BBLOCK,
    ADDR_DESC : REF $BBLOCK;

LOCAL
    DESC : VECTOR[2,LONG];
BUILTIN
    CALLG,AP;

IF .LNKDESC[LNK_V_DEAD]
    THEN RETURN FALSE;

IF .LNKDESC[LNK_V_ALTP]
THEN BEGIN
    DESC[0] = .LNKDESC[LNK_B_NODLEN];
    DESC[1] = LNKDESC[LNK_T_NODE];
    RETURN (IF .LNKDESC[LNK_L_TFRADR] EQL 0
			THEN FALSE
			ELSE (.LNKDESC[LNK_L_TFRADR])(LNKDESC[LNK_L_CONTEXT],
							LNK_C_OUT_CKUSER,
							DESC,
							.ADDR_DESC,
							MAIL$READ_ERROR_TEXT))
    END
ELSE IF .LNKDESC[LNK_W_CHAN] EQL 0
	THEN RETURN FALSE
	ELSE RETURN CALLG(.AP,WRITE_CHECK_SLAVE)
END;

ROUTINE SEND_MESSAGE(LNKDESC,CNCTDESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Send text of message to remote node
!
! Inputs:
!
!	lnkdesc = address of lnk descriptor for remote node
!	cnctdesc = address of cnct descriptor for message
!
!--
BEGIN

MAP
    LNKDESC : REF $BBLOCK,
    CNCTDESC : REF $BBLOCK;

BIND
    RAB = CNCTDESC[CNCT_T_RAB] : $BBLOCK;

LOCAL
    STATUS,
    DESC : VECTOR[2,LONG];

RAB[RAB$W_USZ] = MAIL$K_INBUFFSZ;
RAB[RAB$L_UBF] = CNCTDESC[CNCT_T_BUFFER];	!Ensure User buffer is right
!
! ensure rab is connected for BIO if sending in block mode
!
IF .LNKDESC[LNK_V_BLKMODE]
THEN BEGIN
    IF NOT .RAB[RAB$V_BIO]
    THEN BEGIN
	$DISCONNECT(RAB=RAB,ERR=UTIL$REPORT_IO_ERROR);
	RAB[RAB$V_BIO] = TRUE;
	IF_ERR($CONNECT(RAB=RAB,ERR=UTIL$REPORT_IO_ERROR);,
		RETURN .STATUS);
	END;
    !
    ! Read from file and write to node until errors or end
    !
    WHILE (STATUS=$READ(RAB=RAB,ERR=UTIL$REPORT_IO_ERROR)) NEQ RMS$_EOF
    DO BEGIN
	IF NOT .STATUS THEN RETURN .STATUS;
	DESC[0] = .RAB[RAB$W_RSZ];
	DESC[1] = .RAB[RAB$L_RBF];
	IF_ERR(WRITE_SLAVE(.LNKDESC,DESC);,
			RETURN .STATUS);
	END
    END
!
! Do it with records if we have to.  Make sure rab is connected for
! record i/o
!
ELSE BEGIN
    IF .RAB[RAB$V_BIO]
    THEN BEGIN
	$DISCONNECT(RAB=RAB,ERR=UTIL$REPORT_IO_ERROR);
	RAB[RAB$V_BIO] = FALSE;
	IF_ERR($CONNECT(RAB=RAB,ERR=UTIL$REPORT_IO_ERROR);,
		RETURN .STATUS);
	END;
    WHILE (STATUS=$GET(RAB=RAB,ERR=UTIL$REPORT_IO_ERROR)) NEQ RMS$_EOF
    DO BEGIN
	IF NOT .STATUS THEN RETURN .STATUS;
        IF .RAB[RAB$W_RSZ] GTRU 255 THEN
                RETURN SIGNAL(RMS$_RTB,.RAB[RAB$W_RSZ]);
	DESC[0] = .RAB[RAB$W_RSZ];
	DESC[1] = .RAB[RAB$L_RBF];
	IF NOT ((.RAB[RAB$W_RSZ] EQL 1)		!Don't send 1-byte records of 0
	    AND (.(.RAB[RAB$L_RBF])<0,8> EQL 0))	! because they break protocol
		THEN IF_ERR(WRITE_SLAVE(.LNKDESC,DESC);,
			RETURN .STATUS);
	END;
    END;
DESC[0] = 1;			!Make a descriptor
DESC[1] = DESC[0] + 2;		! Describing 1 byte of 0
RETURN WRITE_SLAVE(.LNKDESC,DESC)	!Send the 1 byte of 0 and return
END;

GLOBAL ROUTINE MAIL$NET_END_USERS(CNCTDESC) : NOVALUE =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Send the end of username flag (byte of 0) and the to-list
!	to all the remote nodes that are described by cnctdesc.
!
! Inputs:
!
!	cnctdesc = address of cnct descriptor
!
!--
BEGIN
MAP
    CNCTDESC : REF $BBLOCK;

LOCAL
    DESC : VECTOR[2,LONG],
    LNKDESC : REF $BBLOCK;

!
! Form a descriptor of a byte of 0
!
DESC[0] = 1;
DESC[1] = DESC[0] + 2;
LNKDESC = .(CNCTDESC[CNCT_Q_LNKLST])<0,32,0>;
WHILE .LNKDESC NEQ CNCTDESC[CNCT_Q_LNKLST]
DO BEGIN
    IF NOT .LNKDESC[LNK_V_ALTP]		!If sending with decnet
    THEN BEGIN
	IF WRITE_SLAVE(.LNKDESC,DESC)	!Send the 1 byte of 0
	    THEN WRITE_SLAVE(.LNKDESC,CNCTDESC[CNCT_Q_TODESC]);	!send "to" list
	END
    ELSE BEGIN
	LOCAL
	    NDESC : VECTOR[2,LONG];
	!
	! Send with alternate protocol
	!
	IF .LNKDESC[LNK_L_TFRADR] NEQ 0
	THEN BEGIN
	    NDESC[0] = .LNKDESC[LNK_B_NODLEN];
	    NDESC[1] = LNKDESC[LNK_T_NODE];
	    IF (.LNKDESC[LNK_L_TFRADR])(LNKDESC[LNK_L_CONTEXT],
				LNK_C_OUT_CKUSER,
				NDESC,
				DESC,
				MAIL$READ_ERROR_TEXT)
		THEN (.LNKDESC[LNK_L_TFRADR])(LNKDESC[LNK_L_CONTEXT],
				LNK_C_OUT_TO,
				NDESC,
				CNCTDESC[CNCT_Q_TODESC]);
	    END;
	END;
    LNKDESC = .LNKDESC[LNK_L_FLINK];
    END;
RETURN;
END;

GLOBAL ROUTINE MAIL$NET_SEND(ADRDESC,CNCTDESC) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Send a message to the remote node.  The complete message is only sent
!	the first time.  After the message is sent, and each additional call
!	for a particular node, only the slave status is checked for each
!	addressee.
!
! Inputs:
!
!	adrdesc = address of addressee descriptor
!	cnctdesc = address of cnct descriptor
!
!--
BEGIN

MAP
    ADRDESC : REF $BBLOCK,
    CNCTDESC : REF $BBLOCK;

BIND
    LNKDESC = ADRDESC[ADR_L_LLNK] : REF $BBLOCK,
    SUBJDESC = CNCTDESC[CNCT_Q_SUBJDESC] : $BBLOCK;

LOCAL
    UDESC : VECTOR[2,LONG],
    NDESC : VECTOR[2,LONG],
    DESC : VECTOR[2,LONG];

IF .LNKDESC[LNK_V_DEAD]
    THEN RETURN FALSE;

!
! If the message hasn't been sent to this node yet, then
! send it now
!
NDESC[0] = .LNKDESC[LNK_B_NODLEN];
NDESC[1] = LNKDESC[LNK_T_NODE];
UDESC[0] = .ADRDESC[ADR_B_NAMLNG];
UDESC[1] = ADRDESC[ADR_T_NAME];
IF NOT .LNKDESC[LNK_V_MSGSNT]
THEN BEGIN
    DESC[0] = .SUBJDESC[DSC$W_LENGTH];
    IF .DESC[0] NEQ 0
	THEN DESC[1] = .SUBJDESC[DSC$A_POINTER]
	ELSE DESC[1] = DESC[0];
    IF NOT .LNKDESC[LNK_V_ALTP]		!If sending with decnet
    THEN BEGIN
	IF_ERR(WRITE_SLAVE(.LNKDESC,DESC);,
				RETURN .STATUS);
	!
	! Now send text of message
	!
	IF_ERR(SEND_MESSAGE(.LNKDESC,.CNCTDESC);,
		RETURN .STATUS);
	LNKDESC[LNK_V_MSGSNT] = TRUE;
	END
    ELSE BEGIN
	!
	! Send with alternate protocol
	!
	IF .LNKDESC[LNK_L_TFRADR] EQL 0
	    THEN RETURN TRUE;
	IF_ERR((.LNKDESC[LNK_L_TFRADR])(LNKDESC[LNK_L_CONTEXT],
				LNK_C_OUT_SUBJ,
				NDESC,
				DESC);,
		RETURN .STATUS);
	IF_ERR((.LNKDESC[LNK_L_TFRADR])(LNKDESC[LNK_L_CONTEXT],
				LNK_C_OUT_FILE,
				NDESC,
				CNCTDESC[CNCT_T_RAB],
				UTIL$REPORT_IO_ERROR);,
		RETURN .STATUS);
	LNKDESC[LNK_V_MSGSNT] = TRUE;
	END;
    END;
!
! See how the send went to this user
!
RETURN (IF NOT .LNKDESC[LNK_V_ALTP]
		THEN CHECK_SLAVE_STATUS(.LNKDESC)
		ELSE (.LNKDESC[LNK_L_TFRADR])(LNKDESC[LNK_L_CONTEXT],
						LNK_C_OUT_CKSEND,
						NDESC,
						UDESC,
						MAIL$READ_ERROR_TEXT))
END;

GLOBAL ROUTINE MAIL$READ_FOREIGN_FILE(OUTRAB) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Calls a foreign net protocol routine to read message text
!	from the remote node and store it in the output file
!
!--
BEGIN
MAP
    OUTRAB : $BBLOCK;

RETURN (.LINK_TFRADR)(LINK_CONTEXT,LNK_C_IN_FILE,0,.OUTRAB,
			UTIL$REPORT_IO_ERROR)
END;

ROUTINE ACCEPT_LINK =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Accept a connection from a remote node
!
! Inputs:
!
!	none
!
! Implicit inputs:
!
!	network server data base and own storage
!--
BEGIN
LOCAL
    STATUS,
    RMSRAT,
    RMSRFM,
    PFLAGS,
    PTR : REF VECTOR[,BYTE],
    PTR1 : REF $BBLOCK,
    LEN,
    QIOSB : VECTOR[4,WORD];

LINK_CHAN = 0;
MAIL$G_CNCT[CNCT_B_FILRAT] = FAB$M_CR;
MAIL$G_CNCT[CNCT_B_FILRFM] = FAB$C_VAR;
IF .MAIL$Q_PROTOCOL[DSC$W_LENGTH] EQL 0
THEN BEGIN
    !
    ! See if SYS$NET translated is a DECnet NCB.  If so, decode the
    ! NCB and store in CNCT
    !
    IF NOT CH$FAIL(PTR = CH$FIND_CH(.MAIL$Q_INPTRAN[DSC$W_LENGTH],
			.MAIL$Q_INPTRAN[DSC$A_POINTER],%C'/'))
    THEN BEGIN
	LEN = .PTR - .MAIL$Q_INPTRAN[DSC$A_POINTER] - 4;	!"/", word, cnf count
	PTR = .PTR + 3;					!Skip to cnf count
	PTR1 = PTR[1];					!PTR1 points to cnfdata
	IF .LEN-CNF_C_LENGTH GEQU 0
	    AND .PTR[0] EQL CNF_C_LENGTH
	    AND .PTR1[CNF_B_VERSION] GEQU CNF_C_VERS
	    AND .PTR1[CNF_B_ECO] GEQU CNF_C_ECO
	THEN BEGIN
	    !
	    ! It seems to be a valid CNF from another MAIL.  Store away the
	    !  info and modify accordingly
	    !
	    PTR1[CNF_V_PFXSEND] = 0;		!Clear his bit
	    PTR1[CNF_V_CCSEND] = 0;		!Clear his bit
	    PTR1[CNF_B_VERSION] = CNF_C_VERS;	!Send back our protocol ver
	    PTR1[CNF_B_ECO] = CNF_C_ECO;	! and eco level
	    IF .PTR1[CNF_V_BLKSEND]		!Sending block mode?
	    THEN BEGIN
		PTR1[CNF_V_BLKSEND] = 0;	!Clear his send bit
		PTR1[CNF_V_BLKRECV] = 1;	!Set my receive bit
		MAIL$G_CNCT[CNCT_B_FILRFM] = .PTR1[CNF_B_RFM];
		MAIL$G_CNCT[CNCT_B_FILRAT] = .PTR1[CNF_B_RAT];
		MAIL$G_CNCT[CNCT_V_BLKMODE] = TRUE;
		PTR1[CNF_B_RFM] = 1;		!Will send 1 block at a time
		END;
	    END;
	END;
    !
    ! Assign a channel to _NET:.  Then attempt to accept the connection.
    ! If that fails, then give up.
    !
    IF (STATUS = LIB$ASN_WTH_MBX(NETACP_DESC,
				MAIL$L_MBXBUF,MAIL$L_MBXQUO,LINK_CHAN,
				NETMBX_CHAN))
	AND ((STATUS = $QIOW(FUNC=IO$_ACCESS,
			CHAN=.LINK_CHAN,
			IOSB=QIOSB,
			P2=MAIL$Q_INPTRAN))
	    AND (STATUS = .QIOSB[0]))
    THEN ($DASSGN(CHAN=.NETMBX_CHAN); RETURN TRUE)		!All done if DECnet
    ELSE BEGIN
	$DASSGN(CHAN=.NETMBX_CHAN);
	MAIL$G_CNCT[CNCT_V_BLKMODE] = FALSE;
	RETURN .STATUS;
	END;
    END
ELSE BEGIN
    !
    ! The /protocol qualifier was used in starting up inbound network
    ! mail.  Merge in the specified file and use it.
    !
    PFLAGS = 0;
    IF_ERR(LIB$FIND_IMAGE_SYMBOL(MAIL$Q_PROTOCOL,PROT_DESC,LINK_TFRADR);,
		RETURN .STATUS);
    IF_ERR(CHECK_PROTOCOL_VERSION(MAIL$Q_PROTOCOL);,
		RETURN .STATUS);
    IF_ERR((.LINK_TFRADR)(LINK_CONTEXT,
					LNK_C_IN_CONNECT,
					MAIL$Q_INPTRAN,
					RMSRAT,RMSRFM,
					.MAIL$GL_SYSFLAGS<16,16,0>,
					MAIL$Q_PROTOCOL,
					PFLAGS);,
		RETURN .STATUS);
    LINK_CHAN = MAIL$GL_FLAGS[MAIF_V_ALTP] = 1;
    MAIL$G_CNCT[CNCT_B_FILRFM] = .RMSRFM;
    MAIL$G_CNCT[CNCT_B_FILRAT] = .RMSRAT;
    MAIL$GL_FLAGS[MAIF_V_SERVERLOOP] = .PFLAGS<0,1,0>;
    RETURN TRUE
    END;
END;

GLOBAL ROUTINE MAIL$GET_INPUT (OUT_DESC,PROMPT_DESC,OUTLEN) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	If non-network, read from SYS$INPUT.  If network, read from
!	network link
!
! Inputs:
!
!	out_desc = address of dynamic desciptor for output string
!	prompt_desc = address of prompt descriptor
!
!--
BEGIN

MAP
    OUTLEN : REF VECTOR[,WORD];

BUILTIN
    NULLPARAMETER;

LOCAL
    TEMPLEN : WORD,
    STATUS;

BIND
    QIOSB = MAIL$G_CNCT[CNCT_Q_IOSB] : VECTOR[,WORD];

IF .MAIL$GL_FLAGS[MAIF_V_NETJOB]
THEN BEGIN
    !
    ! Accept the link if it hasn't been already.
    !
    IF .LINK_CHAN EQL 0
	THEN IF_ERR(ACCEPT_LINK();,
			RETURN .STATUS);
    IF NOT .MAIL$GL_FLAGS[MAIF_V_ALTP]
    THEN BEGIN
	!
	! For decnet, read the buffer.  Then copy to the output buffer
	!
	STATUS = $QIOW(CHAN=.LINK_CHAN,
			FUNC=IO$_READVBLK,
			IOSB=QIOSB,
			P1=MAIL$G_CNCT[CNCT_T_BUFFER],
			P2=MAIL$K_INBUFFSZ);
	IF .STATUS
	    THEN STATUS = .QIOSB[0];
	IF NOT .STATUS
	    THEN RETURN .STATUS;
	LIB$SCOPY_R_DX(QIOSB[1],MAIL$G_CNCT[CNCT_T_BUFFER],.OUT_DESC);
	RETURN TRUE
	END
    !
    ! For foreign net, let it's routine do the copy, too
    !
    ELSE RETURN	(.LINK_TFRADR)(LINK_CONTEXT,.PROMPT_DESC,.OUT_DESC);
    END
ELSE BEGIN
    !
    ! Not network job. 
    !
    STATUS = SMG$READ_COMPOSED_LINE(MAIL$L_SMG_KEYBOARD,
						MAIL$L_SMG_KEYTABLE,
						.OUT_DESC,.PROMPT_DESC,TEMPLEN);
    IF .STATUS EQL SMG$_EOF
	THEN STATUS = RMS$_EOF;
    IF (.STATUS EQL RMS$_TNS)
	OR (.STATUS EQL SS$_DATAOVERUN)
	THEN STATUS = SS$_NORMAL;
    IF .MAIL$GL_FLAGS[MAIF_V_CTRLCFL]
	THEN (STATUS = RMS$_EOF;
		MAIL$GL_FLAGS[MAIF_V_CTRLCFL] = 0);
    IF NOT NULLPARAMETER(3)
	AND .STATUS
	THEN OUTLEN[0] = .TEMPLEN;
    IF NOT .STATUS
	AND (.STATUS NEQ RMS$_EOF)
	THEN SIGNAL(MAIL$_READERR,1,MAIL$Q_INPTRAN,.STATUS);
    RETURN .STATUS
    END;

END;

GLOBAL ROUTINE MAIL$PUT_OUTPUT(BUFDESC,FAOARGS) =
!++
! FUNCTIONAL DESCRIPTION:
!
!	Write a record to sys$output (or sys$net if network server)
!
! Inputs:
!
!	bufdesc = address of string to output or fao control string
!	faoargs = start of fao args if bufdesc is an fao control string
!		for fao strings which take no args, use a 0 for faoargs
!
! If 2 or more arguments are passed, bufdesc is assumed to be an fao control
! string, and is processed as such
!
!--
BEGIN
BUILTIN
    ACTUALCOUNT;

LOCAL
    TMPBUF : $BBLOCK[MAIL$K_INBUFFSZ],
    STATUS,
    QIOSB : VECTOR[4,WORD],
    OUTDESC : REF $BBLOCK,
    DESC : VECTOR[2,LONG];

OUTDESC = .BUFDESC;
IF ACTUALCOUNT() GEQU 2
THEN BEGIN
    DESC[0] = MAIL$K_INBUFFSZ;
    DESC[1] = TMPBUF;
    $FAOL(CTRSTR=.OUTDESC,OUTLEN=DESC,
	OUTBUF=DESC,PRMLST=FAOARGS);
    OUTDESC = DESC;
    END;
IF NOT .MAIL$GL_FLAGS[MAIF_V_NETJOB]
THEN RETURN LIB$PUT_OUTPUT(.OUTDESC)
ELSE BEGIN
    IF .LINK_CHAN EQL 0
	THEN IF_ERR(ACCEPT_LINK();,
			RETURN .STATUS);
    IF NOT .MAIL$GL_FLAGS[MAIF_V_ALTP]
    THEN BEGIN
	STATUS = $QIOW(CHAN=.LINK_CHAN,
			FUNC=IO$_WRITEVBLK,
			IOSB=QIOSB,
			P1=.OUTDESC[DSC$A_POINTER],
			P2=.OUTDESC[DSC$W_LENGTH]);
	IF .STATUS
	    THEN STATUS = .QIOSB[0];
	RETURN .STATUS
	END
    ELSE RETURN (.LINK_TFRADR)(LINK_CONTEXT,LNK_C_IO_WRITE,.OUTDESC);
    END;    
END;

END ELUDOM
