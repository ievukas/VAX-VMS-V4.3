MODULE RESPONSE	(%TITLE	'Service response message'
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Job controller.
!
! ABSTRACT:
!	This module contains the routines that send a response to a caller of
!	$SNDACC, $SNDSMB, or $SNDJBC.
!
! ENVIRONMENT:
!	VAX/VMS user and kernel mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 16-Feb-1982
!
! MODIFIED BY:
!
!	V03-006	JAK0200		J A Krycka	15-Mar-1984
!		Add IO$M_NORSWAIT function modifier to mailbox write.
!
!	V03-005	MLJ0115		Martin L. Jack,	30-Jul-1983  15:01
!		Changes for job controller baselevel.
!
!	V03-004	MLJ0114		Martin L. Jack,	23-Jun-1983  5:02
!		Changes for job controller baselevel.
!
!	V03-003	MLJ0112		Martin L. Jack,	29-Apr-1983  3:07
!		Changes for job controller baselevel.
!
!	V03-002	MLJ0109		Martin L. Jack,	14-Apr-1983  12:48
!		Changes for job controller baselevel.
!
!	V03-001	CWH1002		CW Hobbs		1-Mar-1983
!		Convert the extended pid to an internal pid when we make
!		the ast control block.
!**

REQUIRE 'SRC$:JOBCTLDEF';


FORWARD ROUTINE
	CREATE_SRB:			NOVALUE,
	LOCATE_SRB_OUTPUT_ITEM,
	COMPLETE_SRB_OUTPUT_ITEM:	NOVALUE,
	SEND_SERVICE_RESPONSE_KERNEL,
	SEND_SERVICE_RESPONSE_MESSAGE:	NOVALUE,
	SEND_SERVICE_RESPONSE:		NOVALUE;


LINKAGE
	EXE$ALLOCBUF_LINKAGE =
	    JSB(REGISTER=1; REGISTER=2):
	    NOPRESERVE(3, 4) PRESERVE(5) NOTUSED(6, 7, 8, 9, 10, 11),

	EXE$EPID_LINKAGE =
	    JSB(REGISTER=0):
	    PRESERVE(1, 2, 3, 4, 5) NOTUSED(6, 7, 8, 9, 10, 11),

	SCH$QAST_LINKAGE =
	    JSB(REGISTER=0, REGISTER=5):
	    NOPRESERVE(1, 2, 3, 4, 5) NOTUSED(6, 7, 8, 9, 10, 11);


EXTERNAL ROUTINE
	EXE$ALLOCBUF:	EXE$ALLOCBUF_LINKAGE	ADDRESSING_MODE(GENERAL),
	EXE$EPID_TO_IPID: EXE$EPID_LINKAGE	ADDRESSING_MODE(GENERAL),
	EXE$JBCRSP:				ADDRESSING_MODE(GENERAL),
	SCH$QAST:	SCH$QAST_LINKAGE	ADDRESSING_MODE(GENERAL);


! Extension to AST control block.  These are also known to SYSSNDJBC.
!
MACRO
	ACB_L_IMGCNT=		28,0,32,0 %,	! Image counter
	ACB_L_EFN=		32,0,32,0 %,	! Event flag number
	ACB_L_IOSB=		36,0,32,0 %,	! IOSB address
	ACB_L_STATUS=		40,0,32,0 %,	! Status for IOSB
	ACB_W_ITEMCOUNT=	44,0,16,0 %,	! Count of data items
	ACB_B_ITEMS=		46,0,0,0 %,	! Base of item descriptors

	ACI_W_SIZE=		0,0,16,0 %,	! Size of return buffer
	ACI_W_DATASIZE=		2,0,16,0 %,	! Size of data to return
	ACI_L_ADDRESS=		4,0,32,0 %,	! Address of return buffer
	ACI_L_LENADDR=		8,0,32,0 %,	! Address of length buffer
	ACI_T_DATA=		12,0,0,0 %;	! Data to return


LITERAL
	ACB_S_BUFFER=		46 + 12;	! Size of minimal ACB buffer



! Service response block.
!
MACRO
	SRB_W_TYPE=		0,0,16,0 %,	! ACM$W_TYPE
	SRB_W_MAILBOX=		2,0,16,0 %,	! ACM$W_MAILBOX
	SRB_Q_RSP=		4,0,0,0 %,	! Quadword response message
	SRB_T_ACB=		12,0,0,0 %;	! Extended AST control block


LITERAL
	SRB_S_RSP=		8,
	SRB_S_BUFFER=		12 + ACB_S_BUFFER;


BUILTIN
	MTPR;

GLOBAL ROUTINE CREATE_SRB(SRB): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine creates a service response block from information in the
!	mailbox message buffer, value buffers, and the response buffer.
!
! INPUT PARAMETERS:
!	SRB		- Pointer to SRB buffer.
!
! IMPLICIT INPUTS:
!	MBX		- Pointer to buffered mailbox message.
!	RSP		- Response buffer.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	Service response block in SRB buffer.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	SRB:		REF BBLOCK;	! Pointer to SRB buffer


SRB[SRB_W_TYPE] = .MBX[ACM$W_TYPE];
SRB[SRB_W_MAILBOX] = .MBX[ACM$W_MAILBOX];
(SRB[SRB_Q_RSP])+0 = .RSP;
(SRB[SRB_Q_RSP])+4 = 0;
BBLOCK[SRB[SRB_T_ACB], ACB$L_ASTQFL] = 0;
BBLOCK[SRB[SRB_T_ACB], ACB$L_ASTQBL] = 0;
BBLOCK[SRB[SRB_T_ACB], ACB$W_SIZE] = $BYTEOFFSET(ACB_B_ITEMS);
BBLOCK[SRB[SRB_T_ACB], ACB$B_TYPE] = DYN$C_ACB;
BBLOCK[SRB[SRB_T_ACB], ACB$B_RMOD] = .MBX[ACM$B_RMOD] OR ACB$M_KAST;
BBLOCK[SRB[SRB_T_ACB], ACB$L_PID] = EXE$EPID_TO_IPID(.MBX[ACM$L_PROCID]);
BBLOCK[SRB[SRB_T_ACB], ACB$L_AST] = .MBX[ACM$L_ASTADR];
IF .MBX[ACM$L_ASTADR] NEQ 0 THEN BBLOCK[SRB[SRB_T_ACB], ACB$V_QUOTA] = TRUE;
BBLOCK[SRB[SRB_T_ACB], ACB$L_ASTPRM] = .MBX[ACM$L_ASTPRM];
BBLOCK[SRB[SRB_T_ACB], ACB$L_KAST] = EXE$JBCRSP;
BBLOCK[SRB[SRB_T_ACB], ACB_L_IMGCNT] = .MBX[ACM$L_IMAGECNT];
BBLOCK[SRB[SRB_T_ACB], ACB_L_EFN] = .MBX[ACM$L_EFN];
BBLOCK[SRB[SRB_T_ACB], ACB_L_IOSB] = .MBX[ACM$L_IOSB];
BBLOCK[SRB[SRB_T_ACB], ACB_L_STATUS] = 0;
BBLOCK[SRB[SRB_T_ACB], ACB_W_ITEMCOUNT] = 0;
END;

GLOBAL ROUTINE LOCATE_SRB_OUTPUT_ITEM(SRB,CODE,USER_DESC)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine locates storage for an output value item in a
!	service response block.
!
! INPUT PARAMETERS:
!	SRB		- Pointer to SRB buffer.
!	CODE		- $GETQUI or $SNDJBC output value item code.
!	USER_DESC	- Structure describing user's return buffer.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	SRB buffer updated.
!
! ROUTINE VALUE:
!	Pointer to data storage, or 0 if item should not be stored.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	SRB:		REF BBLOCK,	! Pointer to SRB buffer
	USER_DESC:	REF BBLOCK;	! Pointer to output item descriptor
LOCAL
	ACB:		REF BBLOCK,	! Pointer to ACB
	ACI:		REF BBLOCK;	! Pointer to extended ACB output item


IF (.SRB[SRB_W_TYPE] EQL MSG$_SNDJBC OR .SRB[SRB_W_TYPE] EQL MSG$_GETQUI)
AND .ITEM_PRESENT[.CODE]
THEN
    BEGIN
    ACB = SRB[SRB_T_ACB];
    ACI = .ACB + .ACB[ACB$W_SIZE];
    ACB[ACB_W_ITEMCOUNT] = .ACB[ACB_W_ITEMCOUNT] + 1;
    ACI[ACI_W_SIZE] = .USER_DESC[ODSC_W_LENGTH];
    ACI[ACI_W_DATASIZE] = 0;
    ACI[ACI_L_ADDRESS] = .USER_DESC[ODSC_A_POINTER];
    ACI[ACI_L_LENADDR] = .USER_DESC[ODSC_A_LENPOINTER];
    ACI[ACI_T_DATA]
    END
ELSE
    0
END;

GLOBAL ROUTINE COMPLETE_SRB_OUTPUT_ITEM(SRB,VALUE_LENGTH): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine completes the modifications required to append an output
!	value item to a service response block.
!
! INPUT PARAMETERS:
!	SRB		- Pointer to SRB buffer.
!	VALUE_LENGTH	- Length of item value.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	SRB buffer updated.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	SRB:		REF BBLOCK;	! Pointer to SRB buffer
LOCAL
	ACB:		REF BBLOCK,	! Pointer to ACB
	ACI:		REF BBLOCK;	! Pointer to extended ACB output item


! Locate the ACB and the output item, and update the length information.
!
ACB = SRB[SRB_T_ACB];
ACI = .ACB + .ACB[ACB$W_SIZE];
ACB[ACB$W_SIZE] = .ACB[ACB$W_SIZE] + $BYTEOFFSET(ACI_T_DATA) + .VALUE_LENGTH;
ACI[ACI_W_DATASIZE] = .VALUE_LENGTH;
END;

ROUTINE SEND_SERVICE_RESPONSE_KERNEL=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is used by SEND_SERVICE_RESPONSE_MESSAGE to allocate an
!	extended AST control block from nonpaged pool and queue a special
!	kernel AST to a caller of $GETQUI or $SNDJBC.  It executes in kernel
!	mode and partially at IPL$_ASTDEL.
!
! INPUT PARAMETERS:
!	AP		- Pointer to prototype ACB.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	Special kernel AST queued to requesting process.
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
BUILTIN
	AP;
MAP
	AP:		REF BBLOCK;	! Pointer to prototype ACB
LOCAL
	ACB:		REF BBLOCK,	! Pointer to AST control block
	STATUS;				! Status return


! Allocate the ACB from nonpaged pool.  If successful, the routine returns at
! IPL$_ASTDEL.
!
STATUS = EXE$ALLOCBUF(.AP[ACB$W_SIZE]; ACB);
IF .STATUS
THEN
    BEGIN

    ! Initialize the ACB.
    !
    CH$MOVE(.AP[ACB$W_SIZE], .AP, .ACB);


    ! Queue the special kernel AST to the requesting process.  If the process
    ! no longer exists, the ACB is deallocated by SCH$QAST.
    !
    SCH$QAST(0, .ACB);


    ! Lower IPL.
    !
    MTPR(%REF(0), PR$_IPL);
    END;


! Return status.
!
.STATUS
END;

GLOBAL ROUTINE SEND_SERVICE_RESPONSE_MESSAGE(SRB,STS): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine sends a response message to a caller of $GETQUI, $SNDSMB,
!	$SNDACC, or $SNDJBC.
!
! INPUT PARAMETERS:
!	SRB		- Service response block.
!	STS		- Request completion status.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Message written to mailbox, or special kernel AST queued to process.
!
!--

BEGIN
MAP
	SRB:		REF BBLOCK;	! Service response block


IF .SRB[SRB_W_TYPE] EQL MSG$_SNDACC
OR .SRB[SRB_W_TYPE] EQL MSG$_SNDSMB
THEN
    BEGIN
    LOCAL
	DEVICE_DESC:	VECTOR[2],	! Descriptor for device name
	DEVICE_BUFFER:	VECTOR[10,BYTE],! Buffer for device name
	CHANNEL:	WORD,		! Channel assigned to mailbox
	STATUS;				! Status return


    ! If the unit number is zero, exit quietly.
    !
    IF .SRB[SRB_W_MAILBOX] NEQ 0
    THEN
	BEGIN

	! Set up the device name as "_MBAu:".
	!
	DEVICE_DESC[0] = %ALLOCATION(DEVICE_BUFFER);
	DEVICE_DESC[1] = DEVICE_BUFFER;
	$FAO(
	    $DESCRIPTOR('_MBA!UW:'),
	    DEVICE_DESC,
	    DEVICE_DESC,
	    .SRB[SRB_W_MAILBOX]);


	! Assign a channel to the mailbox.
	!
	IF $ASSIGN(DEVNAM=DEVICE_DESC, CHAN=CHANNEL)
	THEN
	    BEGIN

	    ! Set the completion status into the message buffer.
	    !
	    BBLOCK[SRB[SRB_Q_RSP], RSP_L_STATUS] = .STS;


	    ! Write the message without waiting.
	    !
	    STATUS = $QIO(
		FUNC=IO$_WRITEVBLK OR IO$M_NOW OR IO$M_NORSWAIT,
		CHAN=.CHANNEL,
		P1=SRB[SRB_Q_RSP],
		P2=SRB_S_RSP);
	    IF NOT .STATUS
	    THEN SIGNAL(JBC$_WRIRSPMSG OR STS$K_ERROR, 0, .STATUS);


	    ! Deassign the channel.
	    !
	    $DASSGN(CHAN=.CHANNEL);
	    END;
	END;
    END
ELSE
    BEGIN
    LOCAL
	STATUS;


    ! Set the completion status into the ACB.
    !
    BBLOCK[SRB[SRB_T_ACB], ACB_L_STATUS] = .STS;


    ! Send the completion.
    !
    STATUS = $CMKRNL(
	ROUTIN=SEND_SERVICE_RESPONSE_KERNEL,
	ARGLST=SRB[SRB_T_ACB]);
    IF NOT .STATUS
    THEN
	SIGNAL(JBC$_WRIRSPMSG OR STS$K_ERROR, 0, .STATUS);
    END;
END;

GLOBAL ROUTINE SEND_SERVICE_RESPONSE: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine finishes processing for the $GETQUI, $SNDSMB, $SNDACC,
!	and $SNDJBC services by sending a response message if appropriate.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	See CREATE_SRB.
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Response returned to caller.
!
!--

BEGIN
LOCAL
	SRB:		BBLOCK[SRB_S_BUFFER];	! Service response block


IF .RSP[RSP_L_STATUS] NEQ 0
THEN
    BEGIN
    IF NOT .RSP[RSP_L_STATUS]
	THEN BBLOCK[RSP[RSP_L_STATUS], STS$V_SEVERITY] = STS$K_ERROR;
    IF .BBLOCK[RSP[RSP_L_STATUS], STS$V_FAC_NO] EQL 0
	THEN BBLOCK[RSP[RSP_L_STATUS], STS$V_FAC_NO] = JBC$_FACILITY;


    CREATE_SRB(SRB);
    SEND_SERVICE_RESPONSE_MESSAGE(SRB, .RSP[RSP_L_STATUS]);
    END;
END;

END
ELUDOM
