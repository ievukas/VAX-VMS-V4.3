%TITLE 'NML special volatile parameter handling routines'
MODULE NML$SHOPRM (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines to process volatile data base
!	information from the NETACP QIO buffer.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  23-JAN-1980
!
! MODIFIED BY:
!
!	V03-009	MKP0011		Kathy Perko	9-April-1984
!		If returning a node address to a Phase III NCP, clear the
!		area number if it's in the exeuctor's area.  If it's not in
!		the executor's area, return it as is - that's the best I
!		can do.
!
!	V03-008	MKP0010		Kathy Perko	18-Oct-1983
!		Fix previous bug correctly.
!
!	V03-007	MKP0009		Kathy Perko	27-Sept-1983
!		Fix NML$SHONODEID so it skips over the node name if no
!		address is returned.
!
!	V03-006	MKP0008		Kathy Perko	17-Aug-1983
!		Fix NML$SHOEXEPARAM to call NML$SHONODEID for EXECUTOR node
!		ALIAS parameter.
!
!	V03-005	MKP0007		Kathy Perko	29-July-1983
!		Add EXECUTOR node parameter, ALIAS, and clean up routines
!		that SHOW node ids.
!
!	V03-004	MKP0006		Kathy Perko	29-Nov-1982
!		If NCP is using NICE V3.0.0, clear the area number out of
!		any node numbers returned.
!
!	V03-003	MKP0005		Kathy Perko	24-Nov-1982
!		If NETACP doesn't return a state for a node, don't
!		return one to NCP.
!
!	V03-002	MKP0004		Kathy Perko	25-June-1982
!		Executor and X2n Server Destination subaddresses are now
!		both returned by the ACP as longwords.  Fix up the show
!		routines accordingly.
!
!	V03-001	MKP0003		Kathy Perko	1-April-1982
!		Make changes for X-25 Protocol and Server Modules.
!		Also combine some routines to make NMLSHR smaller.
!
!	V02-002	MKP0002		Kathy Perko	3-Jan-1982
!		Delete routine NML$SHOLINKS.  It has been moved to the
!		NMLV2COMP module because it's only used for formatting
!		SHOW LINKS commands for V2 nodes.
!
!	V02-001	MKP0001		Kathy Perko	24-July-1981
!		Delete NML call to map VMS line to DNA line name.
!--


%SBTTL 'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$SHOPARAM,
    NML$SHONMLVER,
    NML$SHOREMSTA,
    NML$SHOVERSION,
    NML$SHONODEID,
    NML$SHOSERVPASS,
    NML$SKIPLONG,
    NML$SKIPSTRING,
    NML$SHOEXEPARAM,
    NML$SHORANGE,
    NML$SHOCHANNELS,
    NML$SHOPWSET,
    NML$SHOCOUNTERS,
    NML$SHOOWNER;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! OWN STORAGE:
!

!
! Parameter buffer and descriptor for use in handling volatile data base
! data.
!

OWN
    NML$T_PRMBUFFER : VECTOR [256, BYTE];
BIND
    NML$Q_PRMDSC = UPLIT (256, NML$T_PRMBUFFER) : DESCRIPTOR;

!
! EXTERNAL REFERENCES:
!

$NML_EXTDEF;

EXTERNAL
    nml$gb_ncp_version,
    nml$gw_vol_exec_addr: BBLOCK [2];

EXTERNAL ROUTINE
    NML$ADDMSGCOU,
    NML$ADDMSGPRM,
    NML$LISNMLVER,
    NML$GETNODNAM,
    NML$NETQIO,
    NML$ERROR_1;

GLOBAL ROUTINE NML$SHOPARAM (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is used to format byte, word, longword, and string NICE
!	parameters for SHOW commands.  It gets a longword or string parameter
!	from the QIO buffer, and adds it to the NICE response message.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
!--

BEGIN

MAP
    SEM_LIST : REF BBLOCK;

LOCAL
    DATA_TYPE: BBLOCK [1], ! NICE parameter data type
    NICE_LEN,		   ! Length of parameter in NICE response message.
    CHECK_STRING;

!
! Using the NICE data type field in the Parameter Semantic Table (PST),
! determine how long the parameter will be in the NICE response message.
!
CHECK_STRING = 0;
DATA_TYPE = .SEM_LIST [PST$B_DATATYPE];
!
! Check to see if the parameter is coded.
!
IF .DATA_TYPE [NMA$V_PTY_COD] THEN
    BEGIN
    IF .DATA_TYPE [NMA$V_PTY_CMU] THEN
	NML$ERROR_1 (NMA$C_STS_MPR)	! Signal NML error.
    ELSE
	!
	! The parameter is a coded single field.  Get the parameter's length
	! from the low order 6 bits.
	!
	NICE_LEN = .DATA_TYPE [NMA$V_PTY_CLE];
    END
ELSE
!
! The parameter is not coded.
!
    BEGIN
    IF .DATA_TYPE [NMA$V_PTY_ASC] OR	! NICE parameter type = string
       .DATA_TYPE [NMA$V_PTY_NLE] EQL 0 ! NICE parameter type = binary image
    THEN
	BEGIN
	NICE_LEN = .(..DATPTR) <0,16>;
	.DATPTR = ..DATPTR + 2;
	CHECK_STRING = 1;
	END
    ELSE
	NICE_LEN = .DATA_TYPE [NMA$V_PTY_NLE];
    END;
!
! If the ACP has a value for the parameter, add it to the NICE response
! message.  The ACP does not have a value for the parameter if:
!	- It's a string, and the length is zero.
!	- It's a longword, and the value is -1.
! The ACP returns only longwords or strings.
!
IF (.CHECK_STRING AND .NICE_LEN NEQ 0) OR
   ((NOT .CHECK_STRING) AND (...DATPTR NEQ -1)) THEN
    NML$ADDMSGPRM (	.BUFDSC,
			.MSGSIZE,
			.SEM_LIST [PST$W_DATAID],
			.SEM_LIST [PST$B_DATATYPE],
			.NICE_LEN,
			..DATPTR);

!
! Increment the pointer to the QIO P4 buffer to the next parameter
! returned by the ACP.
!
IF .CHECK_STRING THEN
    .DATPTR = ..DATPTR + .NICE_LEN
ELSE
    .DATPTR = ..DATPTR + 4;

RETURN NML$_STS_SUC

END;				! End of NML$SHOPARAM

%SBTTL 'NML$SHONMLVER  Get NML version number'
GLOBAL ROUTINE NML$SHONMLVER (SEM_TABLE, BUFDSC, MSGSIZE, DUMDSC, DATPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine moves the network management version number into
!	the output message as a coded multiple parameter.
!
! FORMAL PARAMETERS:
!
!	SEM_TABLE	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor.
!	MSGSIZE		Address of current output message size.
!	DUMDSC		Not used.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	Parameter is added to output message buffer.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    NML$LISNMLVER (.SEM_TABLE, .BUFDSC, .MSGSIZE, .DUMDSC);

    RETURN NML$_STS_SUC

    END;				! End of NML$SHONMLVER

%SBTTL 'NML$SHOVERSION  Get coded multiple version number'
GLOBAL ROUTINE NML$SHOVERSION (SEM_LIST, BUFDSC, MSGSIZE, DUMDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This parameter moves network facility version numbers into the
!	output message buffer as a coded multiple field.  Version numbers
!	are a string of three bytes.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DUMDSC		Not used.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The output message buffer contains the coded multiple version number.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BLOCK [, BYTE];

    LOCAL
	BUFFER : VECTOR [6, BYTE],
	LEN,
	PTR;
!
! Read version parameter.
!
    LEN = .(.NML$GL_EXEDATPTR)<0,16>;

    IF .LEN NEQU 3			! Length must be 3 bytes
    THEN
	RETURN NML$_STS_MPR;

    NML$GL_EXEDATPTR = .NML$GL_EXEDATPTR + 2;
!
! Add version parameter to message.
!
	    PTR = CH$PTR (BUFFER);	! Point to output buffer

	    INCR I FROM 0 TO 2 DO
		BEGIN
		CH$WCHAR_A (1, PTR);
	        CH$WCHAR_A (CH$RCHAR_A (NML$GL_EXEDATPTR) - '0' , PTR);
		END;

	    NML$ADDMSGPRM (	.BUFDSC,
				.MSGSIZE,
				.SEM_LIST [PST$W_DATAID],
				.SEM_LIST [PST$B_DATATYPE] OR 3,
				6,
				BUFFER);

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOVERSION

%SBTTL 'NML$SHOREMSTA  Get remote node state'
GLOBAL ROUTINE NML$SHOREMSTA (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine maps remote node status from the internal NETACP
!	bit value to the network management state value.  The following
!	states are possible:
!
!	    reachable	(NETACP value = 1, NML value = NMA$C_STATE_REA)
!	    unreachable	(NETACP value = 0, NML value = NMA$C_STATE_UNR)
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If NETACP did not know the state of the remote node, returns
!	NML$_STS_PTY.
!
!
!--

BEGIN

MAP
    SEM_LIST : REF BLOCK [, BYTE];

LOCAL
    STATE : BYTE;

IF .(..DATPTR) EQLU -1 THEN
    BEGIN
    .DATPTR = ..DATPTR + 4;
    RETURN NML$_STS_PTY;
    END;
!
! Map bit setting to correct network management value.
!
STATE = ( IF .(..DATPTR)<0,8> THEN
		NMA$C_STATE_REA	! Reachable
	  ELSE
		NMA$C_STATE_UNR);	! Unreachable
!
! Add state parameter to message.
!
NML$ADDMSGPRM (.BUFDSC,
		.MSGSIZE,
		.SEM_LIST [PST$W_DATAID],
		.SEM_LIST [PST$B_DATATYPE],
		1,
		STATE);

.DATPTR = ..DATPTR + 4;

RETURN NML$_STS_SUC

END;				! End of NML$SHOREMSTA

%SBTTL 'NML$SHONODEID  Get adjacent node id'
GLOBAL ROUTINE NML$SHONODEID (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds the id of the remote node (NMA$C_PCLI_ADJ) to
!	which a line is connected to the output message buffer as a coded
!	multiple field.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	sem_list : REF BLOCK [, BYTE];

    LOCAL
	cm_count,			! Coded multiple field count
	name_dsc: VECTOR [2],		! Descriptor of node name.
	name_buf: BBLOCK [6],		! Temporary buffer for node name.
	totlen,				! Total length of field
	nodadr,
	ptr;

!
! Get node address from P4 buffer returned by NETACP and increment pointer
! to the next parameter in the buffer.
!
nodadr = .(..datptr)<0,32>;
.datptr = ..datptr + 4;
!
! If address is zero then don't return this parameter.  If there is one,
! skip over the node name parameter before returning.
!
IF .nodadr EQLU -1 THEN
    BEGIN
    IF .sem_list [pst$l_nfbid] EQL nfb$c_aji_add OR
	.sem_list [pst$l_nfbid] EQL nfb$c_ndi_nnd OR
	.sem_list [pst$l_nfbid] EQL nfb$c_lli_pnn THEN
	.datptr = ..datptr + .(..datptr)<0,16> + 2;
    RETURN nml$_sts_pty;
    END;
!
! If the NCP I'm talking to is speaking NICE V3.0.0 or less, and the node
! is in the executor's area, clear the area number from the node number.
! The theory is that the Phase III system should see node's in the executor's
! area normally (for a Phase III system), but node's outside the exeuctor's
! area shouldn't be represented as nodes in the executor's area.  So those
! will just have funny addresses because the area number will not be properly
! formatted by the Phase III system.
!
IF CH$RCHAR (nml$gb_ncp_version) LEQ 3 THEN
    BEGIN
    MAP
	nodadr: BBLOCK;

    IF .nml$gw_vol_exec_addr [nma$v_area] EQL .nodadr [nma$v_area] THEN
	nodadr [nma$v_area] = 0;
    END;

ptr = nml$t_prmbuffer;
!
! Add node address field.
!
CH$WCHAR_A (2, ptr);
ptr = CH$MOVE (2, nodadr, .ptr);
!
! Get the maximum number of fields in the coded multiple (some parameters
! are returned as a node number and name, and some are returned as simply
! a node number.
!
cm_count = .sem_list [pst$b_datatype] AND NOT nma$m_pty_cmu;
!
! If a node name is ever part of this parameter, add the node name field
! (provided NETACP returned one) to the NICE message.
!
IF .cm_count EQL 2 THEN
    BEGIN
    SELECTONEU .sem_list [pst$l_nfbid] OF
	SET
	[nfb$c_aji_add,		! Circuit adjacent node address
	 nfb$c_ndi_nnd,		! Node next node to destination
	 nfb$c_lli_pnn]:	! Logical link partner node
	    BEGIN
	    name_dsc [0] = .(..datptr)<0,16>;
	    .datptr = ..datptr + 2;
	    name_dsc [1] = ..datptr;
	    .datptr = ..datptr + .name_dsc [0];
	    END;

	[OTHERWISE]:
	    BEGIN
	    name_dsc [0] = 6;
	    name_dsc [1] = name_buf;
	    nml$getnodnam (.nodadr, name_dsc, name_dsc [0]);
	    END;
	TES;
    !
    ! If a node name was returned by NETACP, add it to the message
    ! parameter.
    !
    IF .name_dsc [0] NEQU 0 THEN
	BEGIN

	CH$WCHAR_A (nma$m_pty_asc, ptr);
	CH$WCHAR_A (.name_dsc [0], ptr);
	ptr = CH$MOVE (.name_dsc [0], .name_dsc [1], .ptr);

	END
    ELSE
	cm_count = 1;
    END;

totlen = .ptr - nml$t_prmbuffer;
!
! Add node id to output message as a coded multiple field.
!
nml$addmsgprm (.bufdsc,
		   .msgsize,
		   .sem_list [pst$w_dataid],
		   nma$m_pty_cmu OR .cm_count,
		   .totlen,
		   nml$t_prmbuffer);

RETURN nml$_sts_suc

END;				! End of nml$shonodeid

%SBTTL 'NML$SHOOBJPRV  Get object privilege mask'
GLOBAL ROUTINE NML$SHOOBJPRV (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets the privilege list (NMA$C_PCOB_PRV) for a network
!	object and adds it to the output message buffer.
!
!	Currently, only the first longword of the privilege mask can be
!	set so that is all that is returned.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The output message buffer contains the object privilege mask.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	Destroys the contents of NML$T_PRMBUFFER.
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BLOCK [, BYTE];

    IF .(..DATPTR)<0,32> NEQU -1
    THEN
	NML$ADDMSGPRM (	.BUFDSC,
			.MSGSIZE,
			.SEM_LIST [PST$W_DATAID],
			.SEM_LIST [PST$B_DATATYPE] OR 4,
			4,
			..DATPTR);

    .DATPTR = ..DATPTR + 4;

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOOBJPRV

%SBTTL 'NML$SHOSERVPASS  Get service password'
GLOBAL ROUTINE NML$SHOSERVPASS (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine gets the service password (NMA$C_PCNO_SPA) for the
!	remote node and adds it to the output message as a hexadecimal
!	number.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The output message buffer contains the hex service password.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BLOCK [, BYTE];

    LOCAL
	PRMSIZE;

    PRMSIZE = .(..DATPTR)<0,16>;
    .DATPTR = ..DATPTR + 2;
!
! If the length is zero then the parameter is not set.
!
    IF .PRMSIZE EQLU 0
    THEN
	RETURN NML$_STS_PTY;
!
! Add the parameter to the message.
!
    NML$ADDMSGPRM (.BUFDSC,
		   .MSGSIZE,
		   .SEM_LIST [PST$W_DATAID],
		   .SEM_LIST [PST$B_DATATYPE] OR .PRMSIZE,
		   .PRMSIZE,
		   ..DATPTR);

    .DATPTR = ..DATPTR + .PRMSIZE;

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOSERVPASS

%SBTTL 'NML$SHOLINEID  Get line id'
GLOBAL ROUTINE NML$SHOLINEID (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine reads the line id string and converts it from
!	VMS format to DNA format and then adds it to the output message.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	The output message contains the DNA line id.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    MAP
	SEM_LIST : REF BLOCK [, BYTE];

    LOCAL
	PRMSIZE;

    PRMSIZE = .(..DATPTR)<0,16>;
    .DATPTR = ..DATPTR + 2;
!
! If the length is zero then the parameter is not set.
!
    IF .PRMSIZE EQLU 0
    THEN
	RETURN NML$_STS_PTY;
!
! Add the parameter to the message.
!
    NML$ADDMSGPRM (	.BUFDSC,
			.MSGSIZE,
			.SEM_LIST [PST$W_DATAID],
			.SEM_LIST [PST$B_DATATYPE],
			.PRMSIZE,
			..DATPTR);

    .DATPTR = ..DATPTR + .PRMSIZE;

    RETURN NML$_STS_SUC

    END;				! End of NML$SHOLINEID

%SBTTL 'NML$SKIPLONG   Skip longword in QIO P4 buffer'
GLOBAL ROUTINE NML$SKIPLONG (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine skips (advances the pointer past) a byte, word, or
!	longword parameter in the QIO P4 buffer.  Note that the ACP always
!	returns these parameters in a longword.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    .DATPTR = ..DATPTR + 4;

    RETURN NML$_STS_SUC

    END;				! End of NML$SKIPLONG

%SBTTL 'NML$SKIPSTRING   Skip string parameter'
GLOBAL ROUTINE NML$SKIPSTRING (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine skips (advances the pointer past) a string parameter
!	in the QIO buffer.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	LEN;

    LEN = .(..DATPTR)<0,16>;
    .DATPTR = ..DATPTR + 2;
    .DATPTR = ..DATPTR + .LEN;

    RETURN NML$_STS_SUC

    END;				! End of NML$SKIPSTRING

%SBTTL 'NML$SHOEXEPARAM   Show executor parameter'
GLOBAL ROUTINE NML$SHOEXEPARAM (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine adds a parameter from the executor data buffer to the
!	output message.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
!--

BEGIN

MAP
    SEM_LIST: REF BBLOCK;

LOCAL
    SUBRTN;

SELECTONEU .SEM_LIST [PST$W_DATAID] OF

    SET
    [NMA$C_PCNO_SAD]:	SUBRTN = NML$SHORANGE;
    [NMA$C_PCNO_ALI]:	SUBRTN = NML$SHONODEID;
    [OTHERWISE]:	SUBRTN = NML$SHOPARAM;
    TES;
!
! Call the show parameter routine using the executor data descriptor.
!
(.SUBRTN) (.SEM_LIST,
	    .BUFDSC,
	    .MSGSIZE,
	    NML$GQ_EXEDATDSC,
	    NML$GL_EXEDATPTR);

RETURN NML$_STS_SUC

END;				! End of NML$SHOEXEPARAM

%SBTTL 'NML$SHORANGE    Show range parameter'
GLOBAL ROUTINE NML$SHORANGE (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT OUTPUTS:
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
!--

BEGIN

MAP
    SEM_LIST : REF BBLOCK;

LOCAL
    CM_COUNT,
    RANGE_BEGIN: WORD,
    RANGE_END: WORD,
    LENGTH,
    PTR;

!
! If the address value is -1 then the parameter is not set.
!
IF .(..DATPTR)<0,32> EQLU -1 THEN
    BEGIN
    .DATPTR = ..DATPTR + 4;
    RETURN NML$_STS_PTY;
    END;

RANGE_BEGIN = .(..DATPTR)<0,16>;
RANGE_END = .(..DATPTR)<16,32>;
PTR = NML$T_PRMBUFFER;
CM_COUNT = 1;

CH$WCHAR_A (2, PTR);
PTR = CH$MOVE (2, RANGE_BEGIN, .PTR);
!
! If the range beginning = range end, don't include range end.
!
IF .RANGE_BEGIN NEQ .RANGE_END THEN
    BEGIN
    CM_COUNT = .CM_COUNT +1;
    CH$WCHAR_A (2, PTR);
    PTR = CH$MOVE (2, RANGE_END, .PTR);
    END;

LENGTH = .PTR - NML$T_PRMBUFFER;
!
! Add coded multiple subaddresses field to output message.
!
NML$ADDMSGPRM (.BUFDSC,
	       .MSGSIZE,
	       .SEM_LIST [PST$W_DATAID],
	       .SEM_LIST [PST$B_DATATYPE] OR .CM_COUNT,
	       .LENGTH,
	       NML$T_PRMBUFFER);

!
! Increment past range value in P4 buffer.
!
.DATPTR = ..DATPTR + 4;

RETURN NML$_STS_SUC;
END;				! end of NML$SHORANGE

%SBTTL 'NML$SHOCHANNELS    Show channels parameter'
GLOBAL ROUTINE NML$SHOCHANNELS (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine is called to format the parameter for X25 Protocol DTE
!	channels in the SHOW NICE response message.  It takes the string
!	returned by the ACP in the P4 buffer and reformats it into NICE in as
!	many channel pairs as were returned in the string. 
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT OUTPUTS:
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
!--

BEGIN

MAP
    SEM_LIST : REF BBLOCK;

LOCAL
    QIO_CHAN_LEN,	! Length of channels string in QIO P4 buffer.
    PTR;

!
! If the string length is 0 then the parameter is not set.
!
IF .(..DATPTR)<0,16> EQL 0 THEN
    BEGIN
    .DATPTR = ..DATPTR + 2;
    RETURN NML$_STS_PTY;
    END;

QIO_CHAN_LEN = .(..DATPTR)<0,16>;
.DATPTR = ..DATPTR + 2;
WHILE .QIO_CHAN_LEN GTR 0 DO
    BEGIN
    PTR = NML$T_PRMBUFFER;
    !
    ! Build a temporary buffer containing a channel pair.  Each element
    ! in the channel pair consist of a parameter type field (2) and
    ! a word of parameter value.
    !
    CH$WCHAR_A (2, PTR);
    PTR = CH$MOVE (2, ..DATPTR, .PTR);
    .DATPTR = ..DATPTR + 2;
    CH$WCHAR_A (2, PTR);
    PTR = CH$MOVE (2, ..DATPTR, .PTR);
    .DATPTR = ..DATPTR + 2;
    !
    ! Add coded multiple subaddresses field to output message.
    !
    NML$ADDMSGPRM (.BUFDSC,
		   .MSGSIZE,
		   .SEM_LIST [PST$W_DATAID],
		   .SEM_LIST [PST$B_DATATYPE] OR 2,
		   6,
		   NML$T_PRMBUFFER);

    !
    ! Decrement count of channel pairs left in QIO buffer.
    !
    QIO_CHAN_LEN = .QIO_CHAN_LEN - 4;
    END;

RETURN NML$_STS_SUC;
END;				! end of NML$SHOCHANNELS

%SBTTL 'NML$SHOPWSET   Show password set indication'
GLOBAL ROUTINE NML$SHOPWSET (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine is called while processing a SHOW X25-SERVER DESTINATION
!	command - after the PSI ACP returns the destination's parameters.
!	If the password is set, it puts a password value of zero in the
!	NICE response message.  If the password is not set, it does not
!	add anything to the response message.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT OUTPUTS:
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
!--

BEGIN

MAP
    SEM_LIST : REF BBLOCK;

LOCAL
    PASSWORD_LEN;

PASSWORD_LEN = .(..DATPTR)<0,16>;
IF .PASSWORD_LEN GTR 0 THEN
    BEGIN
    !
    ! Add password to message with a value of 0.  This indicates simply that
    ! the password is set, without actually returning the password.
    !
    NML$ADDMSGPRM (.BUFDSC,
		   .MSGSIZE,
		   .SEM_LIST [PST$W_DATAID],
		   .SEM_LIST [PST$B_DATATYPE],
		   1,
		   UPLIT (0));
    END;
!
! Increment past the password in the buffer.
!
.DATPTR = ..DATPTR + .PASSWORD_LEN + 2;

RETURN NML$_STS_SUC;
END;				! end of NML$SHOPWSET

%SBTTL 'NML$SHOCOUNTERS   Show entity counters'
GLOBAL ROUTINE NML$SHOCOUNTERS (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine puts counter parameters into the response message.
!	Since NETACP formats the counters in NICE format, and returns them
!	as a string, this simply involves moving the string into the
!	response message with no parameter type or string length.
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! IMPLICIT OUTPUTS:
!
!	Message buffer contains counter parameters.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
!--

BEGIN

MAP
	SEM_LIST : REF BLOCK [, BYTE];

LOCAL
	LEN;

LEN = .(..DATPTR)<0,16>;
.DATPTR = ..DATPTR + 2;
!
! If the length is zero then no counters were returned.
!
IF .LEN EQL 0
THEN
	RETURN NML$_STS_SUC;

NML$ADDMSGCOU (	.BUFDSC,
		.MSGSIZE,
		.LEN,
		..DATPTR);

.DATPTR = ..DATPTR + .LEN;

RETURN NML$_STS_SUC

END;				! End of NML$SHOCOUNTERS

%SBTTL 'NML$SHOOWNER  Translate Data Link Mapping bit to Owner'
GLOBAL ROUTINE NML$SHOOWNER (SEM_LIST, BUFDSC, MSGSIZE, DATDSC, DATPTR)=

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine is called when doing a SHOW CIRC CHAR.  It looks
!	at the bit value returned by the ACP for DLM (Data Link Mapping),
!	and, if it's set, returns an OWNER parameter value for the
!	executor node to NCP.  The executor node is the only value
!	currently allowed for OWNER.
!	
!
! FORMAL PARAMETERS:
!
!	SEM_LIST	Parameter semantic table entry address.
!	BUFDSC		Output message buffer descriptor address.
!	MSGSIZE		Address of current output message size.
!	DATDSC		QIO buffer descriptor address.
!	DATPTR		Current pointer into QIO data buffer.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Always returns success (NML$_STS_SUC).
!
!--

BEGIN

MAP
    SEM_LIST : REF BLOCK [, BYTE];

BIND EXECUTOR = UPLIT BYTE
	(NMA$M_PTY_COD+1, NMA$C_ENT_NOD, 	! Entity type = node
	2, WORD (0));				! Node address = 0 (executor)

.DATPTR = ..DATPTR + 4;
!
! If the address value is -1 then the owner is not set.
! If the bit value is clear, then there is no owner specified.
!
IF .(..DATPTR - 4)<0,32> EQLU -1 OR
   NOT (.(..DATPTR - 4)<0,32>)
THEN
    RETURN NML$_STS_PTY;

!
! Add coded multiple executor node id field to output message.
!
NML$ADDMSGPRM (.BUFDSC,
	       .MSGSIZE,
	       .SEM_LIST [PST$W_DATAID],
	       .SEM_LIST [PST$B_DATATYPE] OR 2,
	       5,
	       EXECUTOR);

RETURN NML$_STS_SUC
END;				! End of NML$SHOOWNER

END

ELUDOM
