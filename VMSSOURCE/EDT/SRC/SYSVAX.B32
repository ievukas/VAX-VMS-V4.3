%TITLE 'EDT$SYSVAX - VAX/VMS system specific storage'
MODULE EDT$SYSVAX (				! VAX/VMS system specific storage
		IDENT = 'V04-000'			! File: SYSVAX.B32 Edit: JBS2034
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	This module contains system specific code for the VAX/VMS
!	environment.
!
! ENVIRONMENT:	VAX/VMS only
!
! AUTHOR: Bob Kushlis, CREATION DATE: March 22, 1979
!
! MODIFIED BY:
!
! Bob Kushlis, 10-JUL-1979
!	Convert the case of the file names.
! John Sauter, 19-Dec-1980, 02
!	Add tracing.
! 2-003	- Regularize the headers.  JBS 19-Feb-1981
! 2-004	- Allocate an event flag for the "working" message, and make it
!	   cancel only its own timers.  JBS 19-Feb-1981
! 2-005	- Fix module header and certain symbols.  JBS 30-Mar-1981
! 2-006	- Stop the "working" message only if it is running.  JBS 02-Apr-1981
! 2-007 - Implement the virtual deallocation routine. TMV 6-Aug-81
! 2-008	- EDT$$ALO_HEAP  should return 1 if successful, 0 if not.
!	   JBS 07-Aug-1981
! 2-009	- Remove calls to LIB$SHOW_VM.  JBS 21-Aug-1981
! 2-010 - Add date/time routine. STS 02-Sep-1981
! 2-011 - Add deallocation of text string area. STS 06-Oct-1981
! 2-012 - Always do deallocation of text and entity string areas. STS 06-Nov-1981
! 2-013 - Add global for SET/SHOW HELP command.  SMB 16-Dec-1981
! 2-014	- Revise timer AST logic.  JBS 13-Jan-1982
! 2-015 - Change 32-bit line# to 48_bit.  SMB 16-Jan-1982
! 2-016 - Move line number declarations to DATA.BLI.  SMB 29-Jan-1982
! 2-017 - Take out extra space in date when day is single digit. STS 02-Feb-1982
! 2-018	- Fix a race condition in timer AST logic.  JBS 10-Feb-1982
! 2-019 - Take out call to sy$exit. STS 19-Feb-1982
! 2-020 - Add edt$$z_wf_desc to deallocation list. STS 09-Mar-1982
! 2-021	- Define the default startup file names.  JBS 18-Mar-1982
! 2-022	- Correct the length of EDTINI.  JBS 08-Apr-1982
! 2-023 - Change the HELP file default name.  SMB 10-May-1982
! 2-024	- Put the default startup file on SYS$LIBRARY.  JBS 08-Jun-1982
! 2-025 - Erase the working message line in STOP_WKINGMSG.  SMB 28-Jun-1982
! 2-026	- New implementation of defined keys.  JBS 12-Aug-1982
! 2-027	- Change the command file name.  JBS 23-Aug-1982
! 2-028	- Change the command file name again.  JBS 17-Sep-1982
! 2-029	- Change EDT$$FMT_LIT to EDT$$FMT_STR.  JBS 05-Oct-1982
! 2-030 - Remove deallocation of edt$$z_wf_desc. STS 11-Nov-1982
! 2-031	- Add a hack to debug insufficient memory problems.  JBS 15-Nov-1982
! 2-032 - Add a call to deassign terminal channel. STS 21-Dec-1982
! 2-033	- Deassign the terminal channel before halting trace, since the
!	   terminal deassign may output a keypad setting.  JBS 26-Apr-1983
! 2-034	- Improve the appearance of the listing.  JBS 17-Jun-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$INTER_ERR : NOVALUE,
    EDT$$SYS_EXI : NOVALUE,
    EDT$$GET_DATE : NOVALUE,
    EDT$$ALO_HEAP,
    EDT$$DEA_HEAP : NOVALUE,
    EDT$$DEA_ALLHEAP : NOVALUE,
    WORKAST : NOVALUE,
    EDT$$START_WKINGMSG : NOVALUE,
    EDT$$STOP_WKINGMSG : NOVALUE,
    EDT$$MSG_TOSTR : NOVALUE;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:SYSSYM';

REQUIRE 'EDTSRC:EDTREQ';

LIBRARY 'EDTSRC:KEYPADDEF';

REQUIRE 'TRACESEL';

REQUIRE 'EDTSRC:TRACEMAC';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!    	NONE
!
! OWN STORAGE:
!

GLOBAL
    EDT$$T_HDEF_NAM : BLOCK [14, BYTE] INITIAL (BYTE (13, 'SYS$HELP:.HLB')),
    EDT$$T_HDEF_FILE : BLOCK [8, BYTE] INITIAL (BYTE (7, 'EDTHELP')),
    EDT$$T_HELP_NAM : BLOCK [NAM$C_MAXRSS, BYTE] INITIAL (BYTE ('EDTHELP')),
    EDT$$G_HELP_NAMLEN : INITIAL (7),
    EDT$$G_HELP_SET : INITIAL (0),
    EDT$$Z_LBR_INDEX,				! LBR Control index for HELP
    EDT$$T_CMD_NAM_DEF1 : BLOCK [7, BYTE] INITIAL (BYTE (6, 'EDTSYS')),	! Command file name
    EDT$$T_CMD_NAM_DEF2 : BLOCK [17, BYTE] INITIAL (BYTE (16, 'SYS$LIBRARY:.EDT')),
						! Command file default name
    EDT$$T_CMD_NAM_DEF3 : BLOCK [7, BYTE] INITIAL (BYTE (6, 'EDTINI')),	! Alternate command file name
    EDT$$T_CMD_NAM_DEF4 : BLOCK [5, BYTE] INITIAL (BYTE (4, '.EDT'));	! Alternate command file default name

OWN
    MESSAGE : VECTOR [12, BYTE] INITIAL (BYTE ('Bug check   '));

OWN
    DEL_TIME : VECTOR [2] INITIAL (-5000000, -1),
    WORKING_EFN,
    WORK_MESSAGE_RUNNING : VOLATILE INITIAL (0);

OWN
    MEM_USE : INITIAL (0),			! Currently allocated memory amount
    MEM_LIMIT : INITIAL (1000000000);		! Limit on amount of memory to allocate

!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    EDT$$TI_WRSTR,
    EDT$$OUT_FMTBUF,
    EDT$$SC_POSCSIF,
    EDT$$SC_ERATOEOL,
    EDT$$TI_WRLN : NOVALUE,
    EDT$$FMT_STR : NOVALUE,
    LIB$GET_VM,
    LIB$FREE_VM,
    SYS$EXIT,
    LIB$DATE_TIME,
    LIB$GET_EF,
    LIB$FREE_EF;

!+
! Define the RABs to be used by EDT
!-

GLOBAL
    EDT$$Z_SYS_PRIRAB : $RAB_DECL,
    EDT$$Z_SYS_JOURAB : $RAB_DECL,
    EDT$$Z_SYS_CMDRAB : $RAB_DECL,
    EDT$$Z_SYS_ALTRAB : $RAB_DECL;

EXTERNAL
    EDT$$A_FMT_WRRUT,				! Output format routine
    EDT$$G_MESSAGE_LINE,			! Command/message line
    EDT$$G_SECOND : VOLATILE,			! Set to 1 once a second for WORKING message
    EDT$$G_WORKCOUNT;				! Counter to support WORKING message


%SBTTL 'EDT$$INTER_ERR  - internal error'

GLOBAL ROUTINE EDT$$INTER_ERR 			! Internal error
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	If an internal error is detected in EDT, come here to
!	print a cryptic message and bail out.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Never returns to its caller.
!
!--

    BEGIN
    MESSAGES ((INTERERR));
    SIGNAL_STOP (EDT$_INTERERR);
    END;					! of routine EDT$$INTER_ERR


%SBTTL 'EDT$$SYS_EXI  - exit back to the operating system'

GLOBAL ROUTINE EDT$$SYS_EXI (			! Exit back to the operating system
    STATUS					! Exit status code
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Final clean-up
!
! FORMAL PARAMETERS:
!
!	STATUS		Exit status code.  1 = normal.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
! 	Deallocates all heap memory
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$TI_DEAS;

    MESSAGES ((EDITORABO));
    EDT$$DEA_ALLHEAP ();			! Deallocate all heap storage
    EDT$$TI_DEAS ();				! Deassign the terminal channel

%IF EDT$$TR_ACT
%THEN
    BEGIN

    LOCAL
	TRACE_STATUS;

    EXTERNAL ROUTINE
	EDT$$TR_CLS : ADDRESSING_MODE (GENERAL);

    EXTERNAL
	EDT$$L_TR_INFLG;

    $$TRACE (EDT$$TR_EXI, EDT$$TR_SEXI, 0, 0);
    TRACE_STATUS = EDT$$TR_CLS (EDT$$L_TR_INFLG);

    IF ( NOT .TRACE_STATUS) THEN SIGNAL_STOP (.TRACE_STATUS);

    END;
%FI

    IF ( NOT .STATUS) THEN SIGNAL_STOP (EDT$_EDITORABO);

    END;					! of routine EDT$$SYS_EXI


%SBTTL 'EDT$$GET_DATE  - return the date as an ASCII string'

GLOBAL ROUTINE EDT$$GET_DATE (			! Return the date as an ASCII string
    LEN, 					! Length of the buffer to return the date in
    BUFFER					! Address of the buffer
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Return the date and time as an ASCII string.
!
! FORMAL PARAMETERS:
!
!  LEN			Length of the buffer in which the date is returned
!
!  BUFFER		Address of that buffer.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	DATE_DESC : BLOCK [8, BYTE],
	DATE_TIME_STATUS;

    MAP
	BUFFER : REF VECTOR [, BYTE];

!+
! Set up the descriptor for the LIB$ routine
!-
    DATE_DESC [DSC$W_LENGTH] = 24;
    DATE_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    DATE_DESC [DSC$B_CLASS] = DSC$K_CLASS_S;
    DATE_DESC [DSC$A_POINTER] = BUFFER [1];
!+
! Now call the routine to get the date and time as string
!-
    DATE_TIME_STATUS = LIB$DATE_TIME (DATE_DESC);
!+
! Make sure we got a good status from the library routine else stop
!-

    IF ( NOT .DATE_TIME_STATUS) THEN SIGNAL_STOP (.DATE_TIME_STATUS);

    BUFFER [0] = %C' ';				! begin with a space
    BUFFER [21] = %C' ';			! and end with a space

    IF (.BUFFER [1] EQL %C' ')
    THEN
	BEGIN
	CH$MOVE (20, BUFFER [2], BUFFER [1]);	! shift left one space
	.LEN = 21;
	END
    ELSE
	.LEN = 22;

    END;					! of routine EDT$$GET_DATE


%SBTTL 'EDT$$ALO_HEAP  - Allocate memory'

GLOBAL ROUTINE EDT$$ALO_HEAP (			! Allocate memory
    SIZE, 					! Number of bytes to allocate
    ADDRESS					! Address of allocated space
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Allocate memory.
!
! FORMAL PARAMETERS:
!
!  SIZE			The number of bytes to allocate
!
!  ADDRESS		Place to store address of allocated space
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	1 = memory successfully allocated, 0 = out of memory.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    LOCAL
	GET_VM_STATUS;

    IF ((.MEM_USE + ..SIZE) GTR .MEM_LIMIT) THEN RETURN (0);

    GET_VM_STATUS = LIB$GET_VM (.SIZE, .ADDRESS);

    IF ( NOT .GET_VM_STATUS) THEN RETURN (0);

    MEM_USE = .MEM_USE + ..SIZE;
    RETURN (1);
    END;					! of routine EDT$$ALO_HEAP


%SBTTL 'EDT$$DEA_HEAP  - Deallocate memory'

GLOBAL ROUTINE EDT$$DEA_HEAP (			! Deallocate memory
    SIZE, 					! Number of bytes to deallocate
    ADDRESS					! Address of deallocated space
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Deallocate memory.
!
! FORMAL PARAMETERS:
!
!  SIZE			The number of bytes to deallocate
!
!  ADDRESS		Place to store address of deallocated space
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals on error.
!
!--

    BEGIN

    LOCAL
	FREE_VM_STATUS;

    FREE_VM_STATUS = LIB$FREE_VM (.SIZE, .ADDRESS);

    IF ( NOT .FREE_VM_STATUS) THEN SIGNAL_STOP (.FREE_VM_STATUS);

    MEM_USE = .MEM_USE - ..SIZE;
    ASSERT (.MEM_USE GEQ 0);
    END;					! of routine EDT$$DEA_HEAP


%SBTTL 'EDT$$DEA_ALLHEAP  - Deallocate all memory'

GLOBAL ROUTINE EDT$$DEA_ALLHEAP 		! Deallocate all memory
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Deallocate all memory allocated by calls to LIB$GET_VM .
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$A_FST_AVLN
!	EDT$$A_FST_SCRPTR
!	EDT$$A_BUF_LST
!	EDT$$A_TRN_TBL
!	EDT$$A_US_ENT
!	EDT$$A_US_TXT
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_FST_AVLN
!	EDT$$A_FST_SCRPTR
!	EDT$$A_BUF_LST
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Signals on error.
!
!--

    BEGIN

    EXTERNAL ROUTINE
	STR$FREE1_DX,
	EDT$$CAN_KDEF;				! Cancel a key definition

    EXTERNAL
	EDT$$A_FST_AVLN,
	EDT$$A_FST_SCRPTR,
	EDT$$A_BUF_LST,
	EDT$$A_TRN_TBL : VECTOR,
	EDT$$A_US_ENT : VECTOR,
	EDT$$A_US_TXT : VECTOR;

    LOCAL
	NEW_PTR : REF SCREEN_LINE,
	NEW_BUF : REF TBCB_BLOCK,
	LEN,
	GET_VM_STATUS;

!+
! Deallocate all buffer headers
!-
    NEW_BUF = .EDT$$A_BUF_LST;

    WHILE (.NEW_BUF NEQA 0) DO
	BEGIN
	LEN = .NEW_BUF [TBCB_NAME_LEN] + TBCB_SIZE;
	EDT$$A_BUF_LST = .NEW_BUF [TBCB_NEXT_BUF];
	EDT$$DEA_HEAP (LEN, NEW_BUF);
	NEW_BUF = .EDT$$A_BUF_LST;
	END;

!+
! Deallocate memory used for screen data structure.
!-
    NEW_PTR = .EDT$$A_FST_SCRPTR;

    WHILE (.NEW_PTR NEQA 0) DO
	BEGIN
	EDT$$A_FST_SCRPTR = .NEW_PTR [SCR_NXT_LINE];
	EDT$$DEA_HEAP (%REF (SCR_SIZE), NEW_PTR);
	NEW_PTR = .EDT$$A_FST_SCRPTR;
	END;

    NEW_PTR = .EDT$$A_FST_AVLN;

    WHILE (.NEW_PTR NEQA 0) DO
	BEGIN
	EDT$$A_FST_AVLN = .NEW_PTR [SCR_NXT_LINE];
	EDT$$DEA_HEAP (%REF (SCR_SIZE), NEW_PTR);
	NEW_PTR = .EDT$$A_FST_AVLN;
	END;

!+
! Deallocate virtual storage allocated for entities
!-

    INCR ENT_NUM FROM 0 TO 3 DO
	BEGIN
	LEN = CH$RCHAR (.EDT$$A_US_ENT [.ENT_NUM]);
	EDT$$DEA_HEAP (%REF (.LEN + 1), EDT$$A_US_ENT [.ENT_NUM]);
	END;

    INCR TEXT_NUM FROM 0 TO 1 DO
	BEGIN
	LEN = CH$RCHAR (.EDT$$A_US_TXT [.TEXT_NUM]);
	EDT$$DEA_HEAP (%REF (.LEN + 1), EDT$$A_US_TXT [.TEXT_NUM]);
	END;

!+
! Deallocate virtual storage reserved for the key definitions
!-

    INCR TBL_PTR FROM 0 TO K_KPAD_HASHSIZ - 1 DO
	BEGIN

	WHILE (.EDT$$A_TRN_TBL [.TBL_PTR] NEQA 0) DO
	    BEGIN

	    LOCAL
		KEY_PTR : REF BLOCK [, BYTE] FIELD (KEY_DEF_FIELD);

	    KEY_PTR = .EDT$$A_TRN_TBL [.TBL_PTR];
	    EDT$$CAN_KDEF (.KEY_PTR [KEY_DEF_KEY]);
	    END;

	END;

    END;					! of routine EDT$$DEA_ALLHEAP


%SBTTL 'WORKAST - take a timer AST for the WORKING message'
ROUTINE WORKAST 				! Take a timer AST for the WORKING message
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Take a timer AST for the WORKING message.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	WORK_MESSAGE_RUNNING
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_SECOND
!
! ROUTINE VALUE:
!
!	NONE
!
! SIZE EFFECTS:
!
!	Arranges to print the WORKING message on the screen.
!
!--

    BEGIN

    IF .WORK_MESSAGE_RUNNING
    THEN
	BEGIN
	EDT$$G_SECOND = 1;
	$SETIMR (DAYTIM = DEL_TIME, ASTADR = WORKAST, REQIDT = EDT$$G_WORKCOUNT);
	END;

    END;					! of routine WORKAST

%SBTTL 'EDT$$START_WKINGMSG  - initiate the "working" timer'

GLOBAL ROUTINE EDT$$START_WKINGMSG 		! Initiate the "working" timer
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Start the timer which will cause the "working" message
!	to print occasionally until it is cancelled.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	DEL_TIME
!	WORKAST
!	WORK_MESSAGE_RUNNING
!
! IMPLICIT OUTPUTS:
!
!	EDT$$G_WORKCOUNT
!	WORKING_EFN
!	WORK_MESSAGE_RUNNING
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Allocates an event flag.
!	Signals any errors.
!
!--

    BEGIN

    LOCAL
	GETEF_STATUS,
	SETIMR_STATUS;

!+
! If the "working" message is already running, don't start it again.
!-

    IF .WORK_MESSAGE_RUNNING THEN RETURN;

    GETEF_STATUS = LIB$GET_EF (WORKING_EFN);

    IF ( NOT .GETEF_STATUS) THEN SIGNAL_STOP (.GETEF_STATUS);

    SETIMR_STATUS = $SETIMR (EFN = .WORKING_EFN, DAYTIM = DEL_TIME, ASTADR = WORKAST,
	REQIDT = EDT$$G_WORKCOUNT);

    IF ( NOT .SETIMR_STATUS) THEN SIGNAL_STOP (.SETIMR_STATUS);

    EDT$$G_WORKCOUNT = 0;
    WORK_MESSAGE_RUNNING = 1;
    END;					! of routine EDT$$START_WKINGMSG


%SBTTL 'EDT$$STOP_WKINGMSG  - cancel the "working" timer'

GLOBAL ROUTINE EDT$$STOP_WKINGMSG 		! Cancel the "working" timer
    : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Cancel the "working" timer.  The "working" message will not print
!	until it is initiated again.  Also, erase the working message.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	WORKING_EFN
!	EDT$$G_WORKCOUNT
!	WORK_MESSAGE_RUNNING
!	EDT$$G_MESSAGE_LINE
!
! IMPLICIT OUTPUTS:
!
!	WORK_MESSAGE_RUNNING
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Deallocates an event flag.
!	Repositions the cursor to beginning of message line
!
!--

    BEGIN

    LOCAL
	FORMAT_ROUTINE,
	FREEEF_STATUS,
	CANTIM_STATUS;

!+
! If the "working" message is not running, do nothing.
!-

    IF ( NOT .WORK_MESSAGE_RUNNING) THEN RETURN;

    WORK_MESSAGE_RUNNING = 0;
    CANTIM_STATUS = $CANTIM (REQIDT = EDT$$G_WORKCOUNT);

    IF ( NOT .CANTIM_STATUS) THEN SIGNAL_STOP (.CANTIM_STATUS);

    FREEEF_STATUS = LIB$FREE_EF (WORKING_EFN);

    IF ( NOT .FREEEF_STATUS) THEN SIGNAL_STOP (.FREEEF_STATUS);

!+
! Erase the working message when it is stopped if not already done
!-
    FORMAT_ROUTINE = .EDT$$A_FMT_WRRUT;
    EDT$$A_FMT_WRRUT = EDT$$TI_WRSTR;

    IF (.EDT$$G_WORKCOUNT)
    THEN
	BEGIN
	EDT$$SC_POSCSIF (.EDT$$G_MESSAGE_LINE + 1, 0);
	EDT$$SC_ERATOEOL ();
	EDT$$OUT_FMTBUF ();
	END;

!+
! If "working" was printed then reposition the cursor to the left-most
! position of the prompt.
!-

    IF (.EDT$$G_WORKCOUNT NEQ 0)
    THEN
	BEGIN
	EDT$$SC_POSCSIF (.EDT$$G_MESSAGE_LINE + 1, 0);
	EDT$$OUT_FMTBUF ();
	END;

    EDT$$A_FMT_WRRUT = .FORMAT_ROUTINE;
    EDT$$G_SECOND = 0;
    END;					! of routine EDT$$STOP_WKINGMSG


%SBTTL 'EDT$$MSG_TOSTR  - print a system message'

GLOBAL ROUTINE EDT$$MSG_TOSTR (			! Print a system message
    MESS_NUM					! message number
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Print a system message, given its message number.
!
! FORMAL PARAMETERS:
!
!  MESS_NUM		The number of the message to print
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Prints a message on the terminal.
!
!--

    BEGIN

    LOCAL
	MSGBUF : BLOCK [CH$ALLOCATION (80)],
	MSGDESC : VECTOR [2],
	MSGLEN;

    MSGDESC [0] = 80;
    MSGDESC [1] = MSGBUF;
    $GETMSG (MSGID = .MESS_NUM, MSGLEN = MSGLEN, BUFADR = MSGDESC, FLAGS = 1);
    EDT$$FMT_STR (MSGBUF, .MSGLEN<0, 16>);
    END;					! of routine EDT$$MSG_TOSTR

!<BLF/PAGE>

END						! of module EDT$SYSVAX

ELUDOM
