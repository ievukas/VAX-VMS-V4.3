%TITLE 'EDT$FINAL - end of EDT processing'
MODULE EDT$FINAL (				! End of EDT processing
		IDENT = 'V04-000'			! File: FINAL.BLI Edit: JBS1023
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	End of EDT processing.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: Bob Kushlis, CREATION DATE: August 6, 1979
!
! MODIFIED BY:
!
! 1-001	- Original.  DJS 18-FEB-1981.  This module was created by
!	extracting routine EDT$$TERMIN  from module TINPUT.
! 1-002	- Regularize headers and call EDT$$WF_CLS  to close the work file.
!	   JBS 19-Feb-1981
! 1-003	- Fix module name and file name.  JBS 04-Mar-1981
! 1-004	- Fix the file name.  JBS 11-Mar-1981
! 1-005	- Change SY_EXIT to EDT$$SYS_EXI .  JBS 31-Mar-1981
! 1-006 - Change the handling of deleting the journal file. STS 18-Jan-1982
! 1-007 - Use routine EDT$WORKIO to close workfile. STS 08-Feb-1982
! 1-008 - Deallocate workfile descriptor, EDT$$Z_WF_DESC. STS 15-Feb-1982
! 1-009 - Add literals for callable parameters. STS 08-Mar-1982
! 1-010	- Don't reference EDT$$G_JOU.  JBS 23-Mar-1982
! 1-011 - Check for open files and close them. STS 07-Apr-1982
! 1-012	- Print messages on CLOSE errors.  JBS 12-Apr-1982
! 1-013 - Add a close of the help file for VMS.  SMB 28-May-1982
! 1-014	- Print a better message if the work file fails to close.  JBS 01-Jun-1982
! 1-015 - Restore the original terminal width if changed. STS 08-Jul-1982
! 1-016	- Fix the PDP-11 external declarations for edit 1-015.  JBS 10-Jul-1982
! 1-017 - Call a routine to reset the screen width.  SMB 29-Jul-1982
! 1-018 - Make use of the bit masks in the options word. STS 17-Aug-1982
! 1-019	- Fix up references to EDT$M_ symbols.  JBS 23-Aug-1982
! 1-020 - Make sure everything is put to journal file. STS 08-Oct-1982
! 1-021 - Remove the deallocation of edt$$z_wf_desc. STS 11-Nov-1982
! 1-022 - Only set the screen width back if it has changed.  SMB 17-Feb-1982
! 1-023	- Improve the appearance of the listing.  JBS 14-Jun-1983
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$TERMIN;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    EDT$M_NOJOURNAL,
    EDT$K_INPUT_FILE,
    EDT$K_COMMAND_FILE,
    EDT$K_JOURNAL_FILE,
    EDT$K_CLOSE,
    EDT$K_CLOSE_DEL;

BIND
    VT100_RESET = UPLIT (%STRING (
    	%CHAR (ASC_K_ESC), '[m', 			! Video attributes
    	%CHAR (ASC_K_ESC), ')B'));			! G1 to ASCII

LITERAL
    VT100_RESET_LEN = 6;

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$TERMIN  - end of EDT processing'

GLOBAL ROUTINE EDT$$TERMIN 			! End of EDT processing
    =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Terminate EDT processing by cleaning things up.
!
! FORMAL PARAMETERS:
!
!	NONE
!
! IMPLICIT INPUTS:
!
!	EDT$$G_EXITD
!	EDT$$V_OPTIONS
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	Same as EDT$$SYS_EXI
!
! SIDE EFFECTS:
!
!	Calls EDT$$SYS_EXI
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$TI_RES,
	EDT$$OUT_FMTBUF,
	EDT$$SC_SETWID,
	EDT$$FMT_LIT,
	EDT$$TI_FLUSHJOUFI,
	EDT$$CALLWIO,
	EDT$$CALLFIO,
	EDT$$SYS_EXI,
	EDT$$FMT_MSG : NOVALUE,
	EDT$$FATAL_IOERR : NOVALUE;

!+
! Close the Help File.
!-

%IF %BLISS (BLISS32)
%THEN

    EXTERNAL ROUTINE
	LBR$CLOSE,
	STR$FREE1_DX;

    EXTERNAL
	EDT$$G_HELP_SET,			! Is the Help File open ?
	EDT$$Z_LBR_INDEX,			! Help file control index
	EDT$$Z_WF_DESC : BLOCK [8, BYTE];

%FI

    EXTERNAL
	EDT$$G_TI_WID,				! terminal's current width
	EDT$$G_TI_RESET,			! Has the terminal been reset
	EDT$$G_INPUT_OPN,			! main input file open flag
	EDT$$G_CMD_OPN,				! command file open flag
	EDT$$G_EXITD,				! Editor exit flag.
	EDT$$V_OPTIONS : BITVECTOR [32],	! Various flags
	EDT$$G_SAV_TIWID,			! original terminal width
	EDT$$G_TI_TYP;				! terminal type

    MESSAGES ((WORFILCLO, INPFILCLO, JOUFILCLO, COMFILCLO, HLPFILCLO));
!+
! Close the work file.  On VMS deallocate the record descriptor and
! close the Help File
!-

%IF %BLISS (BLISS32)
%THEN

    IF (.EDT$$G_HELP_SET)
    THEN

	IF ( NOT LBR$CLOSE (EDT$$Z_LBR_INDEX)) THEN EDT$$FMT_MSG (EDT$_HLPFILCLO);

%FI

    IF ( NOT (EDT$$CALLWIO (EDT$K_CLOSE_DEL, 0, 0)))
    THEN
	BEGIN
	EDT$$FMT_MSG (EDT$_WORFILCLO);
	EDT$$FATAL_IOERR ();
	END;

!+
! Set the terminal characteristics back to what they were when we
! invoked EDT.
!-

    IF (.EDT$$G_TI_TYP EQL TERM_VT100)
    THEN
	BEGIN
	EDT$$FMT_LIT (VT100_RESET, VT100_RESET_LEN);
	EDT$$OUT_FMTBUF ();
	END;

    IF (.EDT$$G_TI_RESET) THEN EDT$$TI_RES ();

    IF (.EDT$$G_TI_WID NEQ .EDT$$G_SAV_TIWID) THEN EDT$$SC_SETWID (.EDT$$G_SAV_TIWID);

!+
! If the input file is still open, close it.
!-

    IF (.EDT$$G_INPUT_OPN)
    THEN

	IF ( NOT (EDT$$CALLFIO (EDT$K_CLOSE, EDT$K_INPUT_FILE, 0, 0)))
	THEN
	    BEGIN
	    EDT$$FMT_MSG (EDT$_INPFILCLO);
	    EDT$$FATAL_IOERR ();
	    END;

!+
! If the command file is still open, close it.
!-

    IF .EDT$$G_CMD_OPN
    THEN

	IF ( NOT (EDT$$CALLFIO (EDT$K_CLOSE, EDT$K_COMMAND_FILE, 0, 0)))
	THEN
	    BEGIN
	    EDT$$FMT_MSG (EDT$_COMFILCLO);
	    EDT$$FATAL_IOERR ();
	    END;

!+
! Close the journal file, deleting it if EDT$$G_EXITD is 1.
! Failure to properly close the journal file is fatal.
!-

    IF ((.EDT$$V_OPTIONS AND EDT$M_NOJOURNAL) EQL 0)	! NOT /NOJOURNAL
    THEN
	BEGIN

	LOCAL
	    CODE;

	IF (.EDT$$G_EXITD EQL 1) THEN CODE = EDT$K_CLOSE_DEL ELSE CODE = EDT$K_CLOSE;

	IF (.EDT$$G_EXITD NEQ 1) THEN EDT$$TI_FLUSHJOUFI (%C'T');

	IF ( NOT (EDT$$CALLFIO (.CODE, EDT$K_JOURNAL_FILE, 0, 0)))
	THEN
	    BEGIN
	    EDT$$FMT_MSG (EDT$_JOUFILCLO);
	    EDT$$FATAL_IOERR ();
	    END;

	END;

    RETURN (EDT$$SYS_EXI (1));
    END;					! of routine EDT$$TERMIN

!<BLF/PAGE>

END						! of module EDT$FINAL

ELUDOM
