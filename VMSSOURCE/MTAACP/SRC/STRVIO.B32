
MODULE STRVIO (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  MTAACP
!
! ABSTRACT:
!	This module requeues block virtual IO on the current unit
!
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--

!
! AUTHOR:  D. H. GILLESPIE,	 CREATION DATE:  30-AUG-1977
!
! MODIFIED BY:
!
!	V03-002	MMD0002		Meg Dumont,	9-Feb-1983  15:45
!		Clean up of START_VIO, so that no locations in paged
!		memory are accessed while we are at FIPL. Also
!		fix to always set the UCB address before calling
!		EXE$INSIOQ.
!
!	V03-001	MMD0001		Meg Dumont,	3-Jan-1983  16:18
!		Added routine that is called when the MTAACP has read a trailer
!		label. Its purpose is to stop accidental reading or writing
!		of the trailer labels.
!
!	V02-002	REFORMAT	Maria del C. Nasr	30-Jun-1980
!
!**

LIBRARY 'SYS$LIBRARY:LIB.L32';

REQUIRE 'SRC$:MTADEF.B32';

LINKAGE
    INS_QUE 	= JSB (REGISTER = 3, REGISTER = 5) : NOPRESERVE (1, 2, 4);

EXTERNAL
    CURRENT_UCB	: REF BBLOCK,		! address of current unit control block
    CURRENT_WCB	: REF BBLOCK,		! address of current window control block
    QUEUE_HEAD	: REF BBLOCK;		! address of ACP input queue head

EXTERNAL ROUTINE
    EXE$INSIOQ	: INS_QUE ADDRESSING_MODE (ABSOLUTE);

LOCK_CODE;


GLOBAL ROUTINE START_VIO : COMMON_CALL NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine queues blocked virtual IO to the current unit
!
! CALLING SEQUENCE:
!	START_VIO(), called in kernel mode
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CURRENT_UCB	- address of current unit control block to which all
!			  blocked virtual IO is to be queued
!	CURRENT_VCB	- address of current volume control block which contains
!		 	  the blocked virtual IO list head
!	CURRENT_WCB	- address of current window control block which is currently
!			  not mapping virtual IO
!	QUEUE_HEAD	- address of ACP input queue head to which mapping errors
!			  for this volume are queued
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	window restored mapping to current unit
!	virtual IO requeued to that unit
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	this routine runs at fork level in order to synchronize with the mapping
!	portion of QIO processing and the magnetic tape driver
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

    LOCAL
	ENTRY	: REF BBLOCK,	! address of ACP queue entry
	FUNCTION,		! IO function code
	PACKET	: REF BBLOCK,	! address of IO request packet which is to be requeued
	UCB	: REF BBLOCK,	! address of current UCB
	VCB	: REF BBLOCK,	! address of  current volume control block
	WCB	: REF BBLOCK,	! address of the window control block
	QUEUE_ENTRY : REF BBLOCK, ! address of ACP input queue
	UCB_SAVE : REF BBLOCK;	! address of saved UCB

    ! All data structures used in these routine must be accessible from
    ! local storage. Because we raise to fork IPL we can not afford to
    ! cause a page fault.

    UCB = .CURRENT_UCB;			! address of UCB to which io is to be queue
    VCB = .CURRENT_VCB;			! address of current VCB
    WCB = .CURRENT_WCB;			! address of current WCB
    QUEUE_ENTRY = .QUEUE_HEAD;		! address of ACP input queue
    UCB_SAVE = .CURRENT_UCB;		! Address of current UCB
    SET_IPL(.UCB[UCB$B_FIPL]);		! raise to fork level

    ! fix up map pointer with UCB which is to receive virtual IO
    !
    WCB[WCB$W_NMAP] = 1;
    (WCB[WCB$W_P1_COUNT])<0, 32> = .UCB;

    ! requeue all blocked io to current unit
    !

    WHILE 1
    DO
	BEGIN

	IF REMQUE(.VCB[VCB$L_BLOCKFL], PACKET)
	THEN
	    EXITLOOP;

	! may have been cleared when error was processed
	!
	PACKET[IRP$V_VIRTUAL] = 1;

	! this is here because INSIOQ does not preserve R5

	UCB = .UCB_SAVE;
	EXE$INSIOQ(.PACKET, .UCB);
	END;

    ! Scan input queue for any mapping errors that belong to this volume
    ! put them at the tail of blocked IO list. Also the MSCP tape drives
    ! outstanding I/O's will be found in this queue under most circumstances.

    ENTRY = .QUEUE_ENTRY[AQB$L_ACPQFL];

    WHILE .ENTRY NEQA .QUEUE_ENTRY
    DO
	BEGIN
	FUNCTION = .ENTRY[IRP$V_FCODE];

	IF  .FUNCTION EQL IO$_READPBLK
	    OR
	    .FUNCTION EQL IO$_WRITEPBLK
	THEN
	    BEGIN

	    IF .BBLOCK[.ENTRY[IRP$L_UCB], UCB$L_VCB] EQLA .VCB
	    THEN
		BEGIN
		ENTRY = .ENTRY[IRP$L_IOQBL];
		REMQUE(.ENTRY[IRP$L_IOQFL], PACKET);

		! may have been cleared when error was processed
		
		PACKET[IRP$V_VIRTUAL] = 1;
		UCB = .UCB_SAVE;
		EXE$INSIOQ(.PACKET, .UCB);
		END;

	    END;

	ENTRY = .ENTRY[IRP$L_IOQFL];
	END;

    SET_IPL(0);
    END;

GLOBAL ROUTINE STOP_VIO : COMMON_CALL NOVALUE =
!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine blocks virtual IO from happening over the current WCB
!
! CALLING SEQUENCE:
!	STOP_VIO(), called in kernel mode
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!	CURRENT_WCB	- address of current window control block which is currently
!			  not mapping virtual IO
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	window mapping to current unit stopped
!
! ROUTINE VALUE:
!	none
!
! SIDE EFFECTS:
!	this routine runs at fork level in order to synchronize with the mapping
!	portion of QIO processing and the magnetic tape driver
!
!--

    BEGIN

    EXTERNAL REGISTER
	COMMON_REG;

	CURRENT_WCB[WCB$W_NMAP] = 0;
    END;

END

ELUDOM
