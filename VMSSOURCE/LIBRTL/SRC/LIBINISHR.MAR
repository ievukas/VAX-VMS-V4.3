	.TITLE	LIB$IMAGE_INISHR	; Shareable image initialization 
	.IDENT	'V04-00'		; File: LIBINISHR.MAR  

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; FACILITY: RUN-TIME UTILITY PROCEDURE LIBRARY
;
; ENVIRONMENT:  User mode - not re-entrant.  
;		Called only once per image activation.
;
;
; ABSTRACT:
;
;	LIB$IMAGE_INISHR is a software architecture procedure which permits any
;	linkable (shareable) image to specify an initialization procedure
;	to be called before the image is activated.
;
;	The initialization procedure can perform any once per-image activation
;	initialization which cannot be performed by the usual compile-time and 
;	link-time static data initialization.
;
;--
;
; VERSION: 0
;
	.SBTTL	HISTORY		; Detailed Current Edit History
;
; HISTORY:
;
;	AUTHOR:	Alan D. Eldridge	6-Apr-1984
;
;		Stolen from LIB$INITIALIZE
;
;	 MODIFIED BY:
;
;

	.SBTTL	DECLARATIONS

;
; INCLUDE FILES:
;
;
; EXTERNAL SYMBOLS:
;
	.DSABL	GBL			; Force .EXTRN declarations for externals
;
; MACROS:
;

;
; PSECT DECLARATIONS:
;
;
;    The following psects bracket the table within the linkable image.  All
;    table entries within the image should be made via a .ADDRESS -- fixup
;    occurs just before LIB$IMAGE_INISHR (and hence the table entries) is
;    called.
;
;

.PSECT	LIB$IMAGE_INISHQZ NOPIC,USR,CON,REL,GBL,NOSHR,NOEXE,RD,NOWRT,LONG

	INIT_TABLE_BEG:			; First entry in table


.PSECT	LIB$IMAGE_INISHQ_ NOPIC,USR,CON,REL,GBL,NOSHR,NOEXE,RD,NOWRT,LONG
					; Contribution from OTS$STARTUP


.PSECT	LIB$IMAGE_INISHR  NOPIC,USR,CON,REL,GBL,NOSHR,NOEXE,RD,NOWRT,LONG
					; Contributions from rest of library 
					; and users


.PSECT	LIB$IMAGE_INISHR$ NOPIC,USR,CON,REL,GBL,NOSHR,NOEXE,RD,NOWRT,LONG

	INIT_TABLE_END:	.LONG	0	; End of initialization list

					; The code for this module

;
; EQUATED SYMBOLS:
;
;
; OWN STORAGE:
;

	.PSECT	_LIB$DATA	PIC,USR,CON,REL,LCL,NOSHR,NOEXE,RD,WRT

DISP_PTR:				; OWN variable containing pointer to 
	.BLKL	1			; initialization dispatch table

	.PSECT	_LIB$CODE_NOSHR	PIC,USR,CON,REL,LCL,SHR,EXE,RD,NOWRT


	.SBTTL	LIB$IMAGE_INISHR - Linkable image initialization dispatcher 

;++
; FUNCTIONAL DESCRIPTION:
;
;	LIB$IMAGE_INISHR is a library procedure for initializing linkable 
;	(shareable) image procedures and data at run-time which cannot be
;	statically at compile-time or link-time.
;
;	LIB$IMAGE_INISHR is called before the main program if the GLOBAL symbol
;	LIB$IMAGE_INISHR is defined, or just after the image is merged via a
;	merge/activate sequence.  
;
;	The image need only declare LIB$IMAGE_INISHR as an EXTERNAL (the 
;	compiler generates EXTERNAL OTS$LINKAGE	which generates the EXTERNAL 
;	LIB$IMAGE_INISHR).  LIB$IMAGE_INISHR calls every entrypoint contributed
;	to PSECT LIB$INITIALIZE.
;
;	Note:  
;		This procedure is not re-entrant.  It can only be called
;		once per image activation as currently coded.   
;
; CALLING SEQUENCE:
;
;	Status.wlc.v = LIB$IMAGE_INISHR ()
;
;
; INPUT PARAMETERS:
;	NONE
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	NONE
;
; IMPLICIT OUTPUTS:
;	NONE
;
; COMPLETION CODES:
;
;	SS$_NORMAL
;
; SIDE EFFECTS:
;
;	NONE
;--
	.ENTRY	LIB$IMAGE_INISHR, ^M<IV>; entry point and entry mask
					; enable integer overflow
	MOVAL	INIT_TABLE_BEG, -	; initialize OWN storage (DISP_PTR)
		DISP_PTR		; to first address of user/library
20$:	;
	;
	;    Loop to scan table of user and library initialization procedure
	;    starting addresses in PSECT LIB$IMAGE_INISH...
	;
	;
	MOVL	@DISP_PTR, R0		; R0 = next user/library initialization
					; procedure address
	BEQL	50$			; zero means end of list
	CLRL	R1			; Clear environment pointer
	CALLG	(AP), (R0)		; call next user/library init proc.
	ADDL	#4,DISP_PTR		; step dispatch pointer to next
					; init. proc. address
	BRB	20$			; loop
50$:	MOVQ	#1,R0			; Setup return status in case our
					; caller needs it someday
	RET				; Done


.END					; End of module LIB$IMAGE_INISHR

