%TITLE 'SMGTRMMAC.REQ - Macros for TERMTABLE'
! Module: SMGTRMMAC.REQ   Edit: PLL1001
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Screen Management 
!
! ABSTRACT:
!
!	This require file contains macros used in the creation of TERMTABLE.EXE.
!
! MODIFIED BY:
!
! 1-001	- Original.  PLL 30-JAN-1984
!--

!+
! Macro $INCR_CAP_STRING_SIZE
! 
! Add the specified number of bytes to the capability string size.
! We may be dealing with a negative size if extra processing is needed.
!-

MACRO $INCR_CAP_STRING_SIZE (NUMBER_BYTES, STRING_SIZE) =
BEGIN
    IF .STRING_SIZE LSS 0
    THEN
	STRING_SIZE = .STRING_SIZE - NUMBER_BYTES
    ELSE
	STRING_SIZE = .STRING_SIZE + NUMBER_BYTES;
END;%;

!+
! Macro $INCR_CUR_DATA_BYTE
!
! Update the currently available data byte by the number of bytes
! just written.  If this is the first byte of the string, then we
! also wrote a byte count.
!
!-

MACRO $INCR_CUR_DATA_BYTE (NUMBER_BYTES, FIRST_FLAG) =
BEGIN
    AP [PARAM_L_CUR_DATA_BYTE] = .AP [PARAM_L_CUR_DATA_BYTE] +
				 NUMBER_BYTES +
				 (IF FIRST_FLAG
				  THEN 2	! 1 for size, 1 for kind
				  ELSE 0);

    SMG$$DATA_OFFSET = .SMG$$DATA_OFFSET + NUMBER_BYTES +
				 (IF FIRST_FLAG
				  THEN 2
				  ELSE 0);
END; %;


!+
! Macro to update the size of an arithmetic capability.  This size
! will be negative.
!
MACRO $UPDATE_ARITH_STRING_SIZE (NUMBER_BYTES) =
    BEGIN
    BIND
	CAP_PTRS = .AP [PARAM_L_CUR_TERM_DEF] : VECTOR [,WORD];
    LOCAL
	CAP_SIZE : REF VECTOR [,BYTE,SIGNED];

    CAP_SIZE = .AP [PARAM_L_CUR_TERM_DEF] +
	       .CAP_PTRS [.AP [PARAM_L_CUR_CAP_NUMBER]];

    CAP_SIZE [0] = .CAP_SIZE [0] - NUMBER_BYTES;
    END;%;    


!+
! We fill buffers with data and then do a block I/O write when we reach
! the end of a definition or when the buffer is full.  Here we check to
! see if the buffer is full (ie. if there is room for the number of bytes
! we are about to put in it).
!-

MACRO $CHECK_BUFFER_OVERFLOW (BYTES_TO_WRITE) =
BEGIN
    LOCAL
	REMAINING_BYTES;
    REMAINING_BYTES = SMG$K_CAP_DATA_SIZE - 
		      (.AP [PARAM_L_CUR_DATA_BYTE] - .AP [PARAM_A_CAP_DATA]);
    IF BYTES_TO_WRITE GTR .REMAINING_BYTES
    THEN
	CALLG (.AP, SMG$$WRITE_DATA);
END;%;

! End of file SMGTRMMAC.REQ
