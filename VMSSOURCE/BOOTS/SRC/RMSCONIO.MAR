	.TITLE	RMSCONIO - RMS INPUT/OUTPUT MODULE
	.IDENT	'V04-000'
	.DEFAULT DISPLACEMENT,LONG
;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	SYSGEN UTILITY
;
; ABSTRACT:	RMSCONIO PROVIDES ROUTINES TO PERFORM CONSOLE, COMMAND
;		AND FILE I/O FOR THE SYSGEN UTILITY
;
; ENVIRONMENT:	NATIVE/USER MODE CODE
;
; AUTHOR:	R.I. HUSTVEDT, CREATION DATE: 7-SEP-1977
;
; MODIFIED BY:
;
;	V03-018	WHM0007		Bill Matthews		27-Jun-1984
;		Don't set/clear BOOCMD$V_TERMINAL for /OUTPUT=.
;
;	V03-017	WHM0006		Bill Matthews		26-Jun-1984
;		Added RIO_OUTFAB3 and RIO_OUTRAB3 for use by SET/OUTPUT so it
;		won't conflict with /OUTPUT=.
;
;	V03-016	WHM0005		Bill Matthews		25-Apr-1984
;		Added an initial allocation size for parameter file of 15 blocks.
;
;	V03-015	WHM0004		Bill Matthews		04-Apr-1984
;		Added routine BOO$WRTSYSPARFILE to support the writing of
;		the default system parameter file.
;		Added support for writing ascii sysgen parameters that are
;		longer than 4 characters to a parameter file.
;
;	V03-014	WHM0003		Bill Matthews		28-Feb-1984
;		Make BOO$UFOOPEN use SYS$SYSTEM:.EXE as a default name string.
;
;	V03-013	WMC0013		Wayne Cardoza		16-Jan-1983
;		Remove or bypass checkpoint related code.
;
;	V03-012	SOP0001		J. R. Sopka		27 December 1983
;		Invoke MMG$RET_BYT_QUOTA during processing to convert WCB 
;		for page or swap file to a permanent system data structure.
;
;	V03-011	WHM0002		Bill Matthews		09-Dec-1983
;		Modified BOO$CREATE to set the CBT bit in the
;		allocation XAB before an RMS $EXTEND is attempted.
;
;	V03-010 WHM0001		Bill Matthews		17-Nov-1983
;		Modified BOO$INSTALL to deassign the channel to the file
;		on successful installation of the new swap or page file
;
;	V03-009	WMC0004		Wayne Cardoza		27-Jul-1983
;		Add BOO$FILCLOSE, BOO$UFOOPEN.
;
;	V03-008	MSH0002		Maryann Hinden		24-Jun-1983
;		Change $BOODEF to $BOOCMDDEF.
;
;	V03-007	MSH0001		Maryann Hinden		13-Jun-1983
;		Use $BOODEF from BOOTS.MLB.
;
;	V03-006	WMC0003		Wayne Cardoza		10-Mar-1983
;		If page file is not installed for checkpointing, invalidate
;		any saved checkpoints.
;
;	V03-005	WMC0002		Wayne Cardoza		15-Feb-1983
;		Don't leave file locked or pool in use if checkpoint
;		portion of page file installation fails.
;
;	V03-004	WMC0001		Wayne Cardoza		12-Aug-1982
;		Add support for checkpointing in page file installation.
;
;	V03-003	JLV0204		Jake VanNoy		29-MAR-1982
;		Set UFO bit in SWAPFHCFAB in INSTALL.
;
;	V03-002	JLV0198		Jake VanNoy		17-MAR-1982
;		New create logic to extend existing files if /CONTIGUOUS
;		isn't specified.
;
;	V03-001	LJK0148		Lawrence J. Kenah	16-Mar-1982
;		Remove ACP call for partially mapped file as that situation
;		can never happen.
;
;--
	.SBTTL	DECLARATIONS
;
; INCLUDE FILES:
;
	$BOOCMDDEF			; DEFINE SYSGEN COMMAND OPTIONS
	$CCBDEF				; DEFINE CHANNEL CONTROL BLOCK
	$DYNDEF				; DEFINE STRUCTURE TYPE CODES
	$IPLDEF				; IPL CONSTANTS
	$FABDEF				; RMS FAB DEFINITIONS
	$FIBDEF				; FILE INFORMATION BLOCK
	$PFLDEF				; PAGE FILE CONTROL BLOCK
	$PRMDEF				; DEFINE PARAMETER BLOCK
	$PTEDEF				; DEFINE PTE FIELDS AND CONSTANTS
	$RABDEF				; RMS RAB DEFINITIONS
	$SHRDEF				; SHARED MESSAGE DEFINITIONS
	$STSDEF				; STATUS MESSAGE DEFINITIONS
	$SYSGMSGDEF			; SYSGEN MESSAGE DEFINITIONS
	$TPADEF				; DEFINE TPARSE SYMBOLS
	$WCBDEF				; WINDOW CONTROL BLOCK

;
; EQUATED SYMBOLS:
;
	BUFFER_SIZE=256			; Buffer size for /OUTPUT= & /INPUT=
	FILNAMSIZ=128

;
; OWN STORAGE:
;

	.Psect PAGED_DATA	rd,wrt,noexe,quad
 
DEFNAM:	.ASCII	/.LIS/			; INITIAL DEFAULT IS LISTING
	.BLKB	48-4			; DEFAULT NAME GOES HERE
EXPFNM:	.BLKB	FILNAMSIZ		; EXPANDED NAME HERE
RSLFNM:	.BLKB	FILNAMSIZ		; RESULTANT NAME HERE
OUTNAM:	.BLKB	FILNAMSIZ		; OUTPUT FILE NAME HERE
RHBUF:	.BLKB	20			; RECORD HEADER BUFFER
 
INPNAM:	.ASCII	/SYS$INPUT/		; INPUT NAME STRING
INPNAMSZ=.-INPNAM			; SIZE OF INPUT STRING

OUTPNAM:.ASCII	/SYS$OUTPUT/		; OUTPUT NAME STRING
OUTPNAMSZ=.-OUTPNAM			; SIZE OF OUTPUT STRING

PRMDEF:	.ASCII	/DEFAULT.PAR/		; DEFAULT NAME STRING
PRMDEFSIZ=.-PRMDEF			; STRING LENGTH
 
EXEDEF:	.ASCII	/SYS$SYSTEM:.EXE/	; DEFAULT NAME FOR .EXE'S
EXEDEFSIZ=.-EXEDEF			; STRING LENGTH

INP_OPEN: .BYTE	0			; INPUT OPEN FLAG
OUTP_OPEN:.BYTE	0			; OUTPUT OPEN FLAG

 
ZEROES:	.BLKL	8			;
;
; RMS 32 DATA STRUCTURES
;
 
	.ALIGN	QUAD			; ALIGN FOR PERFORMANCE
RIO_OUTFAB::				; EXTERNAL NAME
	$FAB	FAC=PUT,-		; OUTPUT FAB, ACCESS IS PUT
		FNA=OUTPNAM,-		; OUTPUT NAME STRING
		FNS=OUTPNAMSZ,-		; AND LENGTH
		ORG=SEQ,-		; SEQUENTIAL FILE
		NAM=RIO_OUTNAM,-	; ASSOCIATED NAME BLOCK
		FOP=SUP,-		; SUPERSEED IF NECESSARY
		DNA=DEFNAM,-		; DEFAULT NAME ADDRESS
		RAT=CR			; DO CR/LF PER LINE
 
RIO_OUTNAM::				; OUTPUT NAME BLOCK
	$NAM	RSA=OUTNAM,-		;
		RSS=FILNAMSIZ,-		;
		ESA=OUTNAM,-		; EXPANDED AND RESULT IN SAME PLACE
		ESS=FILNAMSIZ,-		;
 
RIO_OUTRAB::				;
	$RAB	RAC=SEQ,-		; RECORD ACCESS IS SEQENTIAL
		RHB=RHBUF,-		; RECORD HEADER BUFFER
		FAB=RIO_OUTFAB		; ASSOCIATED FAB
 
RIO_INPFAB::				;
	$FAB	FAC=GET,-		; FILE ACCESS IS GET(READ)
		FNA=INPNAM,-		; INPUT FILE NAME STRING ADDRESS
		FNS=INPNAMSZ,-		; INPUT STRING SIZE
		NAM=RIO_INPNAM,-	; ADDRESS OF ASSOCIATED NAME BLOCK
		DNA=DEFNAM,-		; ADDRESS OF DEFAULT NAME BUFFER
		DNS=4			; DEFAULT SIZE STARTS AT 4
 
RIO_INPNAM::				;
	$NAM	ESA=EXPFNM,-		; EXPANDED NAME BUFFER ADDRESS
		ESS=FILNAMSIZ,-		; MAXIMUM SIZE FOR EXPANDED NAME
		RSA=RSLFNM,-		; RESULTANT NAME
		RSS=FILNAMSIZ,-		; AND SIZE IS SAME
 
RIO_INPRAB::				;
	$RAB	RAC=SEQ,-		; SEQUENTIAL ACCESS TO FILE
		ROP=<PMT,CVT>,-		; PROMPT READ AND CONVERT TO UPPER CASE
		RHB=RHBUF,-		; RECORD HEADER BUFFER
		FAB=RIO_INPFAB		; ASSOCIATED FILE ACCESS BLOCK
 
;
;	PARAMETER FILE INPUT/OUTPUT FAB/RAB
;
PRM_INFAB:			;
	$FAB	FAC=<GET,BIO>,-	; READ ACCESS
		DNA=PRMDEF,-	; DEFAULT NAME
		DNS=PRMDEFSIZ,-	; DEFAULT NAME SIZE
		NAM=RIO_INPNAM	; NAME BLOCK
PRM_INRAB:			;
	$RAB	FAB=PRM_INFAB	; ASSOCIATED FAB
;
;	PARAMETER FILE OUTPUT RAB/RAB
;
PRM_OUTFAB:			;
	$FAB	FAC=<PUT,TRN>,-	;
		DNA=PRMDEF,-	; DEFAULT NAME
		DNS=PRMDEFSIZ,-	; DEFAULT NAME LENGTH
		RFM=FIX,-	; FIXED RECORD FORMAT
		MRS=512,-	; 
		FOP=CTG,-	; CONTIGUOUS
		ALQ=15,-	; Initially allocate 15 blocks
		NAM=RIO_INPNAM	; NAME BLOCK
PRM_OUTRAB:			; OUTPUT RAB
	$RAB	FAB=PRM_OUTFAB,-	; ASSOCIATED FAB
		RSZ=512,-		; RECORD SIZE
		RBF=BOO$AB_PRMBUF	; BUFFER ADDRESS

;
;	SWAPFILE FAB  USED TO OBTAIN STARTING LBN OF SWAPFILE
;
SWAPFHCFAB:	$FAB	FAC=<GET,PUT,BIO>,- ; FILE ACCESS IS GET & PUT (READ & WRITE)
		DNA=SWPDEFNAM,-	; DEFAULT FILE NAME STRING ADDRESS
		DNS=SWPDEFNAMSZ,-	; DEFAULT FILE NAME STRING SIZE
		RFM=FIX,-	; FIXED RECORD FORMAT
		MRS=512,-	; MAXIMUM RECORD SIZE OF ONE PAGE
		NAM=RIO_INPNAM,-; NAME BLOCK ADDRESS
		RTV=255,-	; LET ACP COMPUTE LARGEST RETRIVAL WINDOW
		XAB=SWAPFHCXAB	; EXTENDED ATTRIBUTE BLOCK
SWAPFHCXAB:	$XABFHC		; EXTENDED ATTRIBUTE BLOCK FOR FILE HEADER
SWAPALLXAB:	$XABALL -	; EXTENDED ATTRIBUTE BLOCK FOR ALLOCATION
		VOL=1,-		; ALWAYS ALLOCATE ON RELATIVE VOLUME #1
		AOP=<CTG,HRD>,-	; CONTIGUOUS AND FORCE VOLUME PLACEMENT
		ALN=LBN		; (MUST SPECIFY SO VOL IS USED)
SWAPALLXABNC:	$XABALL	-	; EXTENDED ATTRIBUTE BLOCK FOR NON-CONTIGUOUS ALLOCATION
		AOP=<CBT>	; CONTIGUOUS BEST TRY

SWAP_RAB:			; OUTPUT RAB
	$RAB	FAB=SWAPFHCFAB,-	; ASSOCIATED FAB
		RAC=KEY,-
		RSZ=512,-		; RECORD SIZE
		RBF=ZEROES		; BUFFER ADDRESS

SWPDEFNAM:	.ASCII	/.SYS/		; DEFAULT NAME STRING
SWPDEFNAMSZ=.-SWPDEFNAM		; SIZE OF DEFAULT NAME STRING

;
;	PARSED PARAMETERS FOR SWAP FILE CREATION AND INSTALLATION
;
BOO$GL_SIZE:			; FILE SIZE
	.LONG	0		;
BOO$GL_INDEX:			; RETURNED PFL INDEX
	.LONG	0

;
; OWN STORAGE:
;
 
 
OUTFNM:	.ASCII	\OUTPUT:\
 
	OUTSIZ=.-OUTFNM
 
	.PAGE
	.SBTTL	 RIO$INPUT - RMS INPUT INTERFACE
;++
; FUNCTIONAL DESCRIPTION:
;	RIO$INPUT READS A RECORD FROM THE DEVICE OR FILE DESCRIBED BY THE
;	LOGICAL NAME 'INPUT' INTO THE BUFFER DESCRIBED BY THE ARGUMENTS BUF
;	AND SIZE.  THE ACTUAL SIZE READ IS RETURNED IN R1.
;
; CALLING SEQUENCE:
;	CALLG	ARGLIST,RIO$INPUT
;
; INPUT PARAMETERS:
;	BUF(AP)	-	BUFFER ADDRESS
;	SIZE(AP)-	MAXIMUM SIZE OF READ
;
; OUTPUT PARAMETERS:
;	R0	- 	COMPLETION STATUS
;	R1	-	ACTUAL SIZE OF RECORD IN BYTES
;
; COMPLETION STATUS CODES:
;	STANDARD RMS COMPLETION STATUS CODES
;
;--
SIZE=8					; OFFSET TO SIZE ARGUMENT

	.Psect PAGED_CODE	rd,nowrt,exe,long

RIO$INPUT::				; INPUT INTERFACE ROUTINE
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8>; REGISTER SAVE MASK
	MOVAB	RIO_INPRAB,R2		; GET INPUT RAB ADDRESS
	BLBS	INP_OPEN,15$		; BR IF INPUT IS ALREADY OPEN
	PUSHL	#0			; OUTPUT OPEN FAILURE AST
	PUSHAB	RIO_INPFAB		; THE FAB
	CALLS	#2,SYS$OPEN		; OPEN THE FILE
	BLBS	R0,10$			; BR IF OPEN OK
	RET				; RETURN ERROR STATUS
10$:					;
	$CONNECT (R2)			; CONNECT TO INPUT STREAM
	BLBC	R0,30$			; BR IF ERROR
	MOVB	#1,INP_OPEN		; MARK INPUT OPEN AND CONNECTED

15$:	MOVW	SIZE(AP),RAB$W_USZ(R2)	; SET SIZE FOR INPUT
	MOVL	BUF(AP),RAB$L_UBF(R2)	; AND BUFFER ADDRESS
	$GET	(R2)			; GET A RECORD	
	BLBS	R0,20$			; SUCCESS
	RET				; RETURN ERROR STATUS
20$:	MOVZWL	RAB$W_RSZ(R2),R1	; GET SIZE OF RECORD
30$:	RET				; RETURN

	.PAGE
	.SBTTL	RIO$OUTPUT - RMS OUTPUT INTERFACE ROUTINE
;++
; FUNCTIONAL DESCRIPTION:
;	RIO$OUTPUT WRITES THE BUFFER DESCRIBED BY THE BUF AND SIZE
;	ARGUMENTS TO THE DEVICE OR FILE SPECIFIED BY THE LOGICAL NAME
;	OUTPUT.
;
;	RIO$OUTPUTC WRITES THE COUNTED ASCII STRING SPECIFIED BY THE
;	BUF ARGUMENT TO THE DEVICE OR FILE SPECIFIED BY THE LOGICAL NAME
;	OUTPUT.
; 
; CALLING SEQUENCE:
;	CALLG	ARGLIST,RIO$OUTPUT/RIO$OUTPUTC
; 
; INPUT PARAMETERS:
;	BUF(AP)	-	ADDRESS OF BUFFER OR ADDRESS OF COUNTED STRING IF
;			RIO$OUTPUTC.
;	SIZE(AP)-	NUMBER OF BYTES TO BE OUTPUT (RIO$OUTPUT ONLY)
;
; 
; IMPLICIT INPUTS:
;	INPUT RAB AND FAB
; 
; OUTPUT PARAMETERS:
;	R0	-	COMPLETION STATUS CODE FROM RMS
; 
; COMPLETION CODES:
;	STANDARD RMS COMPLETION STATUS CODES
; 
;--

BUF=4					; OFFSET TO BUFFER ADDRESS ARGUMENT

RIO$OUTPUTC::				; OUTPUT COUNTED STRING
	.WORD	0			; ENTRY MASK
	MOVL	BUF(AP),R1		; GET BUFFER ADDRESS
	MOVZBL	(R1)+,-(SP)		; PUSH SIZE OF WRITE
	PUSHL	R1			; AND BUFFER ADDRESS
	CALLS	#2,B^RIO$OUTPUT		; CALL OUTPUT
	RET				; AND RETURN

RIO$OUTPUT::				; RMS OUTPUT INTERFACE ROUTINE
	.WORD	^M<R2,R3,R4,R5,R6,R7>	; REGISTER SAVE MASK
	MOVAB	RIO_OUTRAB,R2		; GET ADDRESS OF OUTPUT RAB
	BLBS	OUTP_OPEN,10$		; BR IF FILE ALREADY OPEN
	CLRB	NAM$B_ESL+RIO_OUTNAM	; ZERO EXPANDED NAME LENGTH
	$CREATE	RIO_OUTFAB		; CREATE TYPING FILE
	BLBC	R0,20$			; BR IF OPEN FAILED

	BICL	#BOOCMD$M_TERMINAL,-
		BOO$GL_CMDOPT		; ASSUME NOT A TERMINAL DEVICE
	BBC	#DEV$V_TRM,-
		RIO_OUTFAB+FAB$L_DEV,-
		5$			; BRANCH IF NOT
	BISL	#BOOCMD$M_TERMINAL,-
		BOO$GL_CMDOPT		; SET AS A TERMINAL DEVICE

5$:	$CONNECT  (R2)		 	; CONNECT TO OUTPUT STREAM
	MOVB	#1,OUTP_OPEN		; MARK OUTPUT STREAM OPEN
10$:	MOVL	BUF(AP),RAB$L_RBF(R2)	; SET OUTPUT BUFFER
	MOVW	SIZE(AP),RAB$W_RSZ(R2)	; AND SIZE
	$PUT	(R2)			; PRINT LINE
20$:	RET				; RETURN


	.PAGE
	.SBTTL	BOO$READPROMPT - Prompt and read input string
;++
; Functional Description:
;	BOO$READPROMPT outputs the specified ASCIZ prompt string on the
;	console terminal then checks the count of characters to be read.
;	If zero it exits, otherwise it reads the console terminal until
;	either a carriage return is encountered or the character count
;	is satisfied.  The specified buffer is filled with an ASCIC
;	string containing the characters read but not including the
;	terminating carriage return.
;
; Calling Sequence:
;	CALLG	ARGLIST,BOO$READPROMPT
;
; Input Parameters:
;	PROMPT(AP)  -  Address of ASCIZ prompt string
	PROMPT	=  4
;
;	SIZE(AP)    -  Maximum length of input string
	SIZE	=  8
;			Note: if size is zero, then nothing is read
;			      and only the prompt string is written.
;
;	BUF(AP)     -  Address of input buffer
	BUF	=  12
;
; Output Parameters:
;	R0 - Completion status code (always SS$_NORMAL)
;
;	Buffer located by BUF(AP) will be filled with the string
;	read as an ASCIC string.
;
;--
BOO$READPROMPT::			;
	.WORD	^M<R2,R3,R4,R5,R6,R7>	;
	LOCC	#0,#64000,@PROMPT(AP)	; FIND END OF PROMPT STRING
	SUBL3	PROMPT(AP),R1,R7	; COMPUTE CHARACTER COUNT
	MOVAB	RIO_INPRAB,R2		; GET INPUT RAB ADDRESS
	BLBS	INP_OPEN,15$		; BR IF INPUT IS ALREADY OPEN
	PUSHL	#0			; OUTPUT OPEN FAILURE AST
	PUSHAB	RIO_INPFAB		; THE FAB
	CALLS	#2,SYS$OPEN		; OPEN THE FILE
	BLBS	R0,10$			; BR IF OPEN OK
	RET				; RETURN ERROR STATUS
10$:					;
	$CONNECT (R2)			; CONNECT TO INPUT STREAM
	BLBC	R0,30$			; BR IF ERROR
	MOVB	#1,INP_OPEN		; MARK INPUT OPEN AND CONNECTED
15$:	MOVW	SIZE(AP),RAB$W_USZ(R2)	; SET SIZE FOR INPUT
	BEQL	NOREAD			; IF NO BUFFER THEN NO READ
	MOVB	R7,RAB$B_PSZ(R2)	; SET SIZE FOR PROMPT
	MOVL	PROMPT(AP),RAB$L_PBF(R2); AND PROMPT ADDRESS
	ADDL3	#1,BUF(AP),RAB$L_UBF(R2); AND BUFFER ADDRESS
	CLRB	@BUF(AP)		; INITIALIZE COUNT FOR READ STRING
	MOVQ	BOO$GQ_CMDESC,R0	; GET COMMAND STRING DESCRIPTOR
	TSTL	R0			; IS THERE ANY COMMAND STRING
	BLSS	50$			; NO, ALREADY USED IT
	BGTR	40$			; YES, USE IT AS RECORD
	$GET	(R2)			; GET A RECORD	
	BLBS	R0,20$			; SUCCESS
	RET				; RETURN ERROR STATUS
20$:	MOVZWL	RAB$W_RSZ(R2),R1	; GET SIZE OF RECORD
	CVTWB	R1,@BUF(AP)		; RETURN SIZE OF RECORD
30$:	RET				; RETURN
40$:	MOVL	BUF(AP),R3		; GET BUFFER ADDRESS
	CVTWB	R0,(R3)+		; SET COUNT FOR BUFFER
	MOVC3	R0,(R1),(R3)		; COPY COMMAND STRING
	MOVL	#1,R0			; SET SUCCESS STATUS
	MNEGL	#1,BOO$GQ_CMDESC	; MARK AS USED
	RET				;
50$:	MOVL	#RMS$_EOF,R0		; GIVE END OF FILE STATUS
	RET				; AND RETURN
NOREAD:					;
	MOVAB	RIO_OUTRAB,R2		; GET ADDRESS OF OUTPUT RAB
	BLBS	OUTP_OPEN,10$		; BR IF FILE ALREADY OPEN
	CLRB	NAM$B_ESL+RIO_OUTNAM	; ZERO EXPANDED NAME LENGTH
	$CREATE	RIO_OUTFAB		; CREATE TYPING FILE
	BLBC	R0,20$			; BR IF OPEN FAILED

	BICL	#BOOCMD$M_TERMINAL,-
		BOO$GL_CMDOPT		; ASSUME NOT A TERMINAL DEVICE
	BBC	#DEV$V_TRM,-
		RIO_OUTFAB+FAB$L_DEV,-
		5$			; BRANCH IF NOT
	BISL	#BOOCMD$M_TERMINAL,-
		BOO$GL_CMDOPT		; SET AS A TERMINAL DEVICE

5$:	$CONNECT  (R2)		 	; CONNECT TO OUTPUT STREAM
	MOVB	#1,OUTP_OPEN		; MARK OUTPUT STREAM OPEN
10$:	MOVL	PROMPT(AP),RAB$L_RBF(R2); SET OUTPUT BUFFER
	MOVW	R7,RAB$W_RSZ(R2)	; AND SIZE
	$PUT	(R2)			; PRINT LINE
20$:	RET				; RETURN
	.PAGE
	.SBTTL	BOO$FILOPEN - Routine to open input file
;
; Input Parameters:
;	R7 - Address of file name descriptor
; Output Parameters:
;	R0 - Completion status
;	R8 - RAB address
;

BOO$FILOPENW::				; Open file for reads and writes
	MOVAB	PRM_INFAB,R8		; Get address of FAB
	BISB	#FAB$M_PUT,FAB$B_FAC(R8); Set PUT bit 
	BRB	FILOPEN

BOO$EXEOPEN::				; Open with default SYS$SYSTEM:.EXE
	MOVAB	EXEDEF,PRM_INFAB+FAB$L_DNA
	MOVB	#EXEDEFSIZ,PRM_INFAB+FAB$B_DNS

BOO$FILOPEN::				; Open file for read only
	MOVAB	PRM_INFAB,R8		; Get address of FAB
	BICB	#FAB$M_PUT,FAB$B_FAC(R8); Clear PUT bit

FILOPEN:
	MOVB	(R7),FAB$B_FNS(R8)	; Set size of file name
	MOVL	4(R7),FAB$L_FNA(R8)	; and address of name string
	$CLOSE	FAB=(R8)		; Close if open
	$OPEN	FAB=(R8)		; Open file for read
	MOVAB	PRMDEF,FAB$L_DNA(R8)	; Go back to ususal default
	MOVB	#PRMDEFSIZ,FAB$B_DNS(R8)
	BLBS	R0,10$			; Continue if successful
	BSBW	PUTERROR		; Output error message
	MNEGL	#2,R0			; Return failure
	RSB				;
10$:	MOVAL	RSLFNM,BOO$GL_FILEADDR	; Set expanded file address
	MOVB	RIO_INPNAM+NAM$B_RSL,-	;
		BOO$GB_FILELEN		; Set expanded file length
	MOVAB	PRM_INRAB,R8		; Get RAB address
	$CONNECT RAB=(R8)		; Connect record stream
	MOVL	#1,R8			; Return starting virtual block
	RSB				;

	.PAGE
	.SBTTL	BOO$UFOOPEN - Routine to open input file for user access
;
; Input Parameters:
;	R7 - Address of file name descriptor
; Output Parameters:
;	R0 - Completion status
;	R1 - Channel
;

BOO$UFOOPEN::				; Open file for read only
	MOVAB	PRM_INFAB,R8		; Get address of FAB
	MOVAB	EXEDEF,FAB$L_DNA(R8)	; Set default name string to
	MOVB	#EXEDEFSIZ,FAB$B_DNS(R8); SYS$SYSTEM:.EXE
	BICB	#FAB$M_PUT,FAB$B_FAC(R8); Clear PUT bit
	BISL	#FAB$M_UFO,FAB$L_FOP(R8); UFO
	MOVB	(R7),FAB$B_FNS(R8)	; Set size of file name
	MOVL	4(R7),FAB$L_FNA(R8)	; and address of name string
	$CLOSE	FAB=(R8)		; Close if open
	$OPEN	FAB=(R8)		; Open file for read
	MOVAB	PRMDEF,FAB$L_DNA(R8)	; Go back to usual default
	MOVB	#PRMDEFSIZ,FAB$B_DNS(R8)
	BLBS	R0,10$			; Continue if successful
	BSBW	PUTERROR		; Output error message
	MNEGL	#2,R0			; Return failure
	RSB				;
10$:	BICL	#FAB$M_UFO,FAB$L_FOP(R8); Next caller doesn't want UFO
	MOVZWL	FAB$L_STV(R8),R1	; Channel
	RSB

	.PAGE
	.SBTTL	BOO$FILCLOSE - Routine to close currently open file
;
; Input Parameters:
;	None
; Output Parameters:
;	R0 - Completion status
;	R8 - FAB address
;

BOO$FILCLOSE::				; Open file for reads and writes
	MOVAB	PRM_INFAB,R8		; Get address of FAB
	$CLOSE	FAB=(R8)		; Close if open
	RSB

	.PAGE
	.SBTTL	BOO$READFILE - Read parameter file
;
; Input Parameters:
;	R6 - Buffer address
;	R8 - VBN
;	R9 - Count of pages to read
;
; Output Parameters:
;	R0 - Completion status
;
BOO$READFILE::				;
	MOVAB	PRM_INRAB,R1		; Get address of input RAB
	MOVW	#512,RAB$W_USZ(R1)	; Set record size
	MOVL	R6,RAB$L_UBF(R1)	; Set buffer address
	MOVL	R8,RAB$L_BKT(R1)	; Set VBN to read
	$READ	RAB=(R1)		;
	BLBS	R0,10$			;
	CMPL	R0,#RMS$_EOF		; Is it end of file?
	BEQL	20$			; Branch if yes
	MOVL	#SYSG$_INVPARFIL,R0	; Invalid parameter file
	RSB				;  and return
10$:	MOVAB	512(R6),R6		; Advance buffer pointer
	INCL	R8			; and block number
	SOBGTR	R9,BOO$READFILE		; Read all required blocks
20$:	MOVZWL	#1,R0			; Return success
	RSB				;
	.PAGE
	.SBTTL	BOO$WRITEFILE - Write blocks to file
;
; Input Parameters:
;	R6 - Buffer address
;	R8 - VBN
;	R9 - Count of pages to write
;
; Output Parameters:
;	R0 - Completion status
;
BOO$WRITEFILE::
	MOVAB	PRM_INRAB,R1		; Use input RAB for output too
	MOVW	#512,RAB$W_RSZ(R1)	; Set block size
	MOVL	R6,RAB$L_RBF(R1)	; Set buffer address
	MOVL	R8,RAB$L_BKT(R1)	; Set VBN to write
	$WRITE	RAB=(R1)		; Do it!
	BLBC	R0,20$			; Error
	MOVAB	512(R6),R6		; Advance buffer pointer
	INCL	R8			; and block number
	SOBGTR	R9,BOO$WRITEFILE	; Repeat

	MOVAB	PRM_INFAB,R1		; Get address of FAB
	$CLOSE	FAB = (R1)		; Close file
	BLBC	R0,20$			; Error
	MOVZWL	#1,R0			; Return success
	RSB

20$:	BSBW	PUTERROR		; Output error message
	MNEGL	#2,R0			; Set error status
	RSB

	.SBTTL	BOO$WRTFILE - Routine to write parameter file
;
; Input parameters:
;	TPA$L_TOKENCNT(AP) - SIZE OF FILE NAME
;	TPA$L_TOKENPTR(AP) - ADDRESS OF FILE NAME
;
; Output Parameters:
;	R0 - Completion status code
;
BOO$WRTFILE::				;
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9>	;
	MOVAB	PRM_OUTFAB,R7		; Get FAB address
	MOVL	TPA$L_TOKENPTR(AP),FAB$L_FNA(R7); Set into FAB
	MOVB	TPA$L_TOKENCNT(AP),FAB$B_FNS(R7); and set size of name
	MOVAB	BOO$A_PRMBLK,R9		; Get base of parameter blocks
	MOVAB	BOO$AB_PRMBUF,R8	; And set base of buffer 
;
; Set startup filename
;
	MOVC3	#32,EXE$GT_STARTUP,(R8)	; Copy name of startup file
	MOVL	R8,R0			; Save base of buffer
	ADDL	#32,R8			; Advance buffer pointer

;
; Loop through all parameters
;

5$:	TSTL	(R9)			; Check for end of buffer
	BEQL	8$			; Yes, write file
	MOVQ	PRM$T_NAME(R9),(R8)+	; Copy name
	MOVQ	PRM$T_NAME+8(R9),(R8)+	; string to buffer
	BBC	#PRM$V_ASCII,PRM$L_FLAGS(R9),6$; Branch if not an ascii parameter
	MOVZBL	PRM$B_SIZE(R9),R1	; Get size in bits
	ASHL	#-3,R1,R1		; Get size in bytes
	ADDL3	#3,R1,-(SP)		; Round size up to next longword boundary
	BICL2	#3,(SP)			;
	MOVC5	R1,@PRM$L_ADDR(R9),#^A/ /,-; Put value in buffer
		(SP),(R8)		;
	ADDL2	(SP)+,R8		; Advance buffer pointer
	ADDL	#PRM$C_LENGTH,R9	; Next parameter
	BRB	5$			;
6$:	MOVZBL	PRM$B_POS(R9),R1	; Get position
	EXTV	R1,PRM$B_SIZE(R9),-
		@PRM$L_ADDR(R9),R2	; Extract value
	BBC	#PRM$V_NEG,-
		PRM$L_FLAGS(R9),7$	; Branch if no negation needed
	MNEGL	R2,R2			; Convert to negative
7$:	EXTZV	#0,PRM$B_SIZE(R9),R2,R2	; Convert value to unsigned form
	MOVL	R2,(R8)+		; Put value in buffer
	ADDL	#PRM$C_LENGTH,R9	; Next parameter
	BRB	5$			;

8$:	CLRL	(R8)+			; Mark end of buffer
	SUBL	R0,R8			; Size of buffer
	MOVAB	511(R8),R8		; Round to page bound
	ASHL	#-9,R8,R8		; Compute file size in pages
	MOVL	R8,FAB$L_ALQ(R7)	; Set size of file to create
	$CREATE	FAB=(R7)		; Create and open file
	BLBS	R0,10$			; Continue if success
	MOVL	#SYSG$_CREPARFIL,R0	; Set message
	RET				;
10$:	$CONNECT RAB=PRM_OUTRAB		; Connect output RAB
	MOVAB	PRM_OUTRAB,R5		; Get base address of output RAB
	MOVAB	BOO$AB_PRMBUF,RAB$L_RBF(R5)	; Set base of buffer 
20$:	$PUT	RAB=(R5)		; Write one block
	ADDL	#512,RAB$L_RBF(R5)	; Advance buffer pointer
	SOBGTR	R8,20$			; Do them all
	$CLOSE	FAB=(R7)		; 
	RET				;

	.SBTTL	BOO$WRTSYSPARFILE - Routine to write the system parameter file
;
; Input parameters:
;	TPA$L_TOKENCNT(AP) - SIZE OF FILE NAME
;	TPA$L_TOKENPTR(AP) - ADDRESS OF FILE NAME
;
; Output Parameters:
;	R0 - Completion status code
;

	.Entry	BOO$WRTSYSPARFILE,^M<>
	BISL	#FAB$M_CIF,FAB$L_FOP+-	; Set the create if flag in the fab
		PRM_OUTFAB		; we don't want multiple versions of this .PAR file
	BISL	#RAB$M_TPT,RAB$L_ROP+-	; Set the update flag in the rab we are
		PRM_OUTRAB		; overwriting an existing file
	CALLG	(AP),BOO$WRTFILE	; Call routine to write the .PAR file
	BICL	#FAB$M_CIF,FAB$L_FOP+-	; Clear the create if flag in the fab
		PRM_OUTFAB		;
	BICL	#RAB$M_TPT,RAB$L_ROP+-	; Clear the update flag in the rab
		PRM_OUTRAB		;
	RET				; Return
	.PAGE
	.SBTTL	BOO$SWPCREATE - CREATE SWAP OR PAGING FILE
;++
; FUNCTIONAL DESCRIPTION:
;	BOO$CREATE IS CALLED TO IMPLEMENT THE CREATE COMMAND IN THE SYSGEN
;	UTILITY.  THIS COMMAND IS USED TO CREATE DUMP,SWAP AND PAGING FILES.
;
; INPUT PARAMETERS:
;	BOO$GL_SIZE - SIZE OF FILE TO CREATE IN BLOCKS
;
; OUTPUT PARAMETERS:
;	R0 - COMPLETION STATUS CODE
;--
.ENTRY	BOO$CREATE	^M<R2,R3,R4,R5,R6,R7>	; SAVE R2-R7

	MOVAL	SWAPFHCFAB,R7		; GET FAB ADDRESS
	TSTB	FAB$B_FNS(R7) 		; SEE IF FILE WAS SPECIFIED
	BNEQ	10$			; BRANCH IF IT WAS
	MOVL	#<<RMS$_FNM> & ^C<STS$M_SEVERITY>>,R0 ; SET WARNING
	RET				; RETURN

10$:	MOVL	BOO$GL_SIZE,R5		; SET DESIRED SIZE
	MOVAL	SWAPALLXABNC,R6		; GET ADDRESS OF NONCONTIG ALLOCATION XAB
	BBC	#BOOCMD$V_CONTIG, -
		BOO$GL_CMDOPT,20$ 	; BR IF THAT'S WHAT'S WANTED
	MOVAL	SWAPALLXAB,R6		; GET ADDRESS OF CONTIG ALLOCATION XAB
20$:	MOVL	R6,SWAPFHCXAB+XAB$L_NXT ; SET ADDRESS OF ALLOCATION XAB
	BBS	#BOOCMD$V_CONTIG, -
		BOO$GL_CMDOPT,CREATE 	; BR IF CONTIGUOUS SPECIFIED
;
; Try to open file to see if it exists
;
	BICL	#FAB$M_UFO,FAB$L_FOP(R7); CLEAR USER FILE OPEN
	$OPEN	FAB=(R7)		; OPEN
	BISL	#XAB$M_CBT,XAB$B_AOP(R6); SET FOR CONTIGUOUS BEST TRY ALLOCATION
	BLBC	R0,CREATE		; IF ERROR, CREATE FILE
;
; Extend file
;
	SUBL3	XAB$L_ALQ(R6),R5,R1	; DIFF
	BEQL	30$			; IF THE SAME, THEN NOTHING TO DO
	BLSS	50$			; IF LESS THEN NEW FILE
	MOVL	R1,XAB$L_ALQ(R6)
	$EXTEND FAB=(R7)
	BLBC	R0,40$

	MOVAB	SWAP_RAB,R4		; RAB ADDRESS
	$CONNECT RAB=(R4)
	BLBC	R0,40$
	MOVL	R5,RAB$L_BKT(R4)	; SET LENGTH
	$WRITE	RAB=(R4)		; FORCE EOF TO SIZE SPECIFIED
	BLBC	R0,40$			; BRANCH ON ERROR
30$:	$CLOSE	FAB=(R7)		; CLOSE FILE
	BLBC	R0,40$			; EXIT IF ERROR
	MOVL	#SYSG$_EXTENDED,R0	; SET STATUS
	BRB	CREATE_SIGNAL		; OK TO SIGNAL
40$:	BRW	CREATE_ERROR		; EXIT

50$:	$CLOSE	FAB=(R7)

CREATE:	MOVL	R5,XAB$L_ALQ(R6) 	; SET ALLOCATION REQUEST SIZE
	BISL	#FAB$M_UFO,FAB$L_FOP(R7); SET USER FILE OPEN, SO STV WILL BE CHANNEL
	$CREATE	FAB=(R7)		; OPEN AND CREATE FILE
	BLBS	R0,10$			; CONTINUE IF NO ERROR
	PUSHL	FAB$L_STV(R7)		; SET FAILURE STATUS VALUE
	BICL3	#STS$M_SEVERITY,R0,-(SP); SET FAILURE STATUS, CONVERTING TO WARNING
	CALLS	#2,G^LIB$SIGNAL		; SIGNAL THE FAILURE
	BRB	CREATE_EXIT		;

10$:	$QIOW_S	CHAN=FAB$L_STV(R7),-	; ZERO FIRST LONGWORDS IN FILE
		FUNC=#IO$_WRITEVBLK,-	; WRITE VIRUAL BLOCK
		P1=ZEROES,-		; ADDRESS OF ZEROES
		P2=#512,-		; ONE PAGE
		P3=#1			; FIRST BLOCK OF FILE
	$DASSGN_S CHAN=FAB$L_STV(R7)	; DEASSIGN CHANNEL
	BLBC	R0,CREATE_ERROR
	MOVL	#SHR$_CREATED,R0	; RETURN SUCCESS

CREATE_SIGNAL:

	PUSHAB	RSLFNM			; SET FILE NAME ADDRESS
	MOVZBL	RIO_INPNAM+NAM$B_RSL,-(SP) ; SET FILE NAME SIZE
	MOVL	SP,R1			; GET ADDRESS OF DESCRIPTOR
	PUSHL	R1			; SET FILE NAME DESCRIPTOR ADDRESS
	PUSHL	#1			; SET FAO COUNT
	BISL3	#<SYSG$_FACILITY@16!STS$K_INFO> -
		,R0,-(SP) 		; MAKE SYSGEN MESSAGE
	CALLS	#3,G^LIB$SIGNAL		; SIGNAL THE ACTION JUST TAKEN

CREATE_EXIT:
	MOVL	#1,R0			; Set sucess

CREATE_ERROR:
	CLRB	FAB$B_FNS(R7) 		; CLEAR FILE NAME LENGTH
	CLRL	FAB$L_FNA(R7) 		; AND FILE NAME ADDRESS
	RET

	.PAGE
	.SBTTL	INSTALL PAGE OR SWAP FILE
;++
;
; Functional Description:
;
;	BOO$INSTALL is called to install a second page or swap file. The
;	specified file is opened, the window pointer is removed from the
;	associated channel control block and moved to the page file control
;	block. The PFL address is loaded into the page file control block
;	vector. 
;
; Input Parameters:
;
;	SWAPFHCFAB - Specified file name fields filled in.
;	SWAPFHCXAB - File size is stored in XAB
;	BOO$GL_CMDOPT <BOOCMD$V_PAGEFILE> - Set if page file installation
;
; Output Parameters:
;
;	None
;
; Implicit Output:
;
;	A page file control block describing the designated file is created
;	and loaded into the page file control block vector. (The details
;	can be found in the module header in INITPGFIL.)
;
; Completion Status:
;
;	R0 - Completion status 
;
;		All status returns (success and failure codes) are returned
;		from kernel mode by INITPAGSWPFIL (which gets its status
;		from either BOO$INITPAGFIL or BOO$INITSWPFIL).
;
;--
BOO$INSTALL::	
	.WORD	^M<R2,R3,R4,R5,R6,R7>	; Entry mask
	MOVAL	SWAPFHCFAB,R7		; Get base of FAB
	BISL	#FAB$M_UFO,FAB$L_FOP(R7); SET USER FILE OPEN, SO STV WILL BE CHANNEL

10$:	$OPEN	FAB=(R7)		; Open file for install
	BLBS	R0,20$			; Continue if no error
	PUSHAB	EXPFNM			; Set file name address
	MOVZBL	RIO_INPNAM+NAM$B_ESL,-(SP) ; Set file name size
	MOVL	SP,R1			; Get address of descriptor
	PUSHL	FAB$L_STV(R7)		; Set status value
	PUSHL	R0			; Set status
	PUSHL	R1			; Set file name descriptor address
	PUSHL	#1			; Set FAO count
	PUSHL	#SHR$_OPENIN!<SYSG$_FACILITY@16> ; Set message status
	CALLS	#5,G^LIB$SIGNAL		; Signal the failure
	BRB	30$			; Return successfully because
					;  error already signalled

20$:	$CMKRNL_S INITPAGSWPFIL
	BLBS	R0,40$			; Branch if success
25$:	PUSHL	R0			; Set failure status
	CALLS	#1,G^LIB$SIGNAL		; Signal the failure
30$:	MOVZWL	#SS$_NORMAL,R0		; Error already signalled
35$:	RET
40$:
;**JNL** 	BBC	#BOOCMD$V_PAGEFILE,BOO$GL_CMDOPT,35$ ; Nothing else to do if swap file
;**JNL** 	BBS	#BOOCMD$V_NOCHKPNT,BOO$GL_CMDOPT,60$ ; Nocheckpoint - invalidate
;**JNL** 	PUSHL	#1			; Full checkpoint processing
;**JNL** 	PUSHL	BOO$GL_INDEX		; Page file index
;**JNL** 	CALLS	#2,CHK$INSPGFIL		; Protect checkpoints and init the file
;**JNL** 	BLBS	R0,50$			; Success
;**JNL** 	PUSHL	R0
;**JNL** 	$CMKRNL_S CLNUPPAGFIL		; Clean up failed installation
;**JNL** 	POPL	R0
;**JNL** 50$:	RET	
;**JNL** ;
;**JNL** 60$:	PUSHL	BOO$GL_INDEX		; Page file index
;**JNL** 	CALLS	#1,CHK$INVPGFL		; Invalidate any saved checkpoints
;**JNL** 	BLBC	R0,25$			; Go signal the error
;**JNL** 	RET
;
; Install a second page or swap file 
;

INITPAGSWPFIL:
	.WORD	^M<R2>			; Entry mask
	PUSHAL	BOO$GL_INDEX		; Returned PFL index
	CLRL	-(SP)			; Default MAXVBN parameter to default
	MOVAL	SWAPFHCFAB,R2		; Get base of FAB
	MNEGL	FAB$L_STV(R2),R2	; Get channel number and invert
	ADDL	@#CTL$GL_CCBBASE,R2	; Compute base of channel
	PUSHL	CCB$L_WIND(R2)		; Get window pointer address
	SUBL3	#1,SWAPFHCXAB+XAB$L_EBK,-(SP) ; Get size of file
	BBS	#BOOCMD$V_PAGEFILE,BOO$GL_CMDOPT,10$ ; Br if installing pagefile
	CALLS	#4,G^BOO$INITSWPFIL	; Call external procedure
	BRB	20$			; Join common completion code
10$:
;**JNL** 	BBS	#BOOCMD$V_NOCHKPNT,BOO$GL_CMDOPT,15$ ; Is it marked for no checkpointing
;**JNL** 	MOVB	#1,11(SP)		; No - don't mark file available yet
15$:	CALLS	#4,G^BOO$INITPAGFIL	; Call external procedure
20$:	BLBC	R0,30$			; Skip next if error
	MOVL	CCB$L_WIND(R2),R0	; Disconnect file from this process by
	JSB	MMG$RET_BYT_QUOTA	;   refund byte quota & clear PID in WCB 
	MOVL	CCB$L_WIND(R2),R2	; Get window control block address
	INCW	WCB$W_REFCNT(R2)	; Jimmy ref count so WCB sticks around
	MOVAL	SWAPFHCFAB,R2		; Get base of FAB
	$DASSGN_S CHAN = FAB$L_STV(R2)	; Deassign the channel to unlock the file
30$:	RET
;
;
; Clean up after a page file installation has failed
;
CLNUPPAGFIL:
	.WORD	^M<R3,R4,R5>
	MNEGL	FAB$L_STV(R7),R3	; Get channel number and invert
	ADDL	@#CTL$GL_CCBBASE,R3	; Compute base of channel
	MOVL	BOO$GL_INDEX,R4		; Page file index
	MOVL	@MMG$GL_PAGSWPVC[R4],R5	; Page file control block
	MOVL	PFL$L_WINDOW(R5),CCB$L_WIND(R3) ; Put window back
	$DASSGN_S CHAN = FAB$L_STV(R7)	; Deassign the channel
	SETIPL	10$			; Go to synch and lock pages
	MOVAL	G^MMG$GL_NULLPFL,@MMG$GL_PAGSWPVC[R4] ; Free the vector slot
	MOVL	R5,R0			; Address of PFL block
	MOVZWL	PFL$W_SIZE(R5),R1	; PFL size
	ADDL2	PFL$L_BITMAPSIZ(R5),R1	; Add the bitmap
	JSB	G^EXE$DEANONPGDSIZ	; Deallocate it all
	SETIPL	#0	
	RET
;
10$:	.WORD	IPL$_SYNCH
	.PAGE
	.SBTTL	INSTALL/CREATE ACTION ROUTINES

BOO$SETPGFL::				; SET PAGEFILE OPTION
	.WORD	0			;
	BBSS	#BOOCMD$V_PAGEFILE,BOO$GL_CMDOPT,10$
10$:	RET				; 

BOO$CRENCONTIG::			; CREATE NON-CONTIGUOUS FILE
	.WORD	0
	BISL	#BOOCMD$M_NONCONTIG,BOO$GL_CMDOPT  ; SET OPTION BIT
	BICL	#BOOCMD$M_CONTIG,BOO$GL_CMDOPT 	; CLEAR OPTION BIT
	RET				;

BOO$CRECONTIG::				; CREATE CONTIGUOUS FILE
	.WORD	0
	BICL	#BOOCMD$M_NONCONTIG,BOO$GL_CMDOPT ; CLEAR OPTION BIT  
	BISL	#BOOCMD$M_CONTIG,BOO$GL_CMDOPT	; SET OPTION BIT
	RET				;

BOO$FILESIZE::				; SET FILE SIZE
	.WORD	0			;
	MOVL	TPA$L_NUMBER(AP),BOO$GL_SIZE	;
	RET				;

BOO$SETFILNAM::				;
	.WORD	0			;
	MOVAB	SWAPFHCFAB,R1		;
	MOVB	TPA$L_TOKENCNT(AP),FAB$B_FNS(R1) ; SET FILE NAME LENGTH
	MOVL	TPA$L_TOKENPTR(AP),FAB$L_FNA(R1) ; AND FILE NAME ADDRESS
	RET				;

BOO$NOCHKPNT::
	.WORD	0			; PAGE FILE DOES NOT SUPPORT CHECKPOINT/RESTART
	BBSS	#BOOCMD$V_NOCHKPNT,BOO$GL_CMDOPT,10$
10$:	RET
.PAGE  
.SBTTL RMS DEFINITIONS FOR /OUTPUT= QUALIFIER

.Psect	PAGED_DATA	rd,wrt,noexe,quad
.ALIGN	LONG 

;	Output File Data

RIO$GW_OUTLEN::		.WORD	0		;LENGTH OF STRING 
RIO$AB_OUTBUF::		.LONG	BUFFER_SIZE 	;OUTPUT BUFFER 
			.LONG	RIO$AB_BUFFER 
RIO$AB_BUFFER:: 	.BLKB	BUFFER_SIZE 
;  
;	Output Device Data 
; 
.ALIGN LONG
RIO_OUTFAB2::	$FAB	RAT=CR 
RIO_OUTRAB2::	$RAB	FAB=RIO_OUTFAB2 
RIO_OUTFAB3:	$FAB	RAT=CR
RIO_OUTRAB3:	$RAB	FAB=RIO_OUTFAB3
  
;	 Input File Data
  
RIO$GL_INBUF_SZ:: 	.LONG	BUFFER_SIZE 
RIO$AB_INBUFFER:: 	.BLKB	BUFFER_SIZE 
  
; Input Device Data 

	.ALIGN 	LONG 
RIO_INFAB2::	$FAB	FNM=<INFILE:> 
RIO_INRAB2::	$RAB	FAB=RIO_INFAB2,- 
				UBF=RIO$AB_INBUFFER,- 
				USZ=RIO$GL_INBUF_SZ,PBF=PROMPT_IN, -
				ROP=<PMT,CVT>,PSZ=8
PROMPT_IN:	.ASCII	/DEVICE> /

INNAM_SIZE: 	.BYTE 	INPNAMSZ
INNAM_ADDR: 	.LONG 	INPNAM

COM:	.ASCII	/.COM/
LIS:	.ASCII	/.LIS/
.PAGE
.Psect	PAGED_CODE	rd,nowrt,exe,long

;
; The following are called as TPARSE action routines from SYSBOOCMD
;

.ENTRY	BOO$INPUT_FILE, ^M<>

	MOVL	TPA$L_TOKENPTR(AP),-
		INNAM_ADDR 		; Save pointer to input file
	CVTLB	TPA$L_TOKENCNT(AP),-
		INNAM_SIZE 		; Save length of file name
	BISL	#BOOCMD$M_INPUT,-
		BOO$GL_CMDOPT	    	; Set flag for /INPUT
	RET				; Return

.ENTRY	BOO$OUTPUT_FILE, ^M<>

	MOVL	TPA$L_TOKENPTR(AP),-
		BOO$GL_FILEADDR 	; Save pointer to output file
	CVTLB	TPA$L_TOKENCNT(AP),-
		BOO$GB_FILELEN		; Save length of file name
	BISL	#BOOCMD$M_OUTPUT,-
		BOO$GL_CMDOPT 	     	; Set flag for /INPUT
	RET				; Return

.ENTRY	BOO$RESET_IO, ^M<>

	MOVAL	LIS,RIO_OUTFAB2+FAB$L_DNA	; Set .lis default
	MOVB	#4,RIO_OUTFAB2+FAB$B_DNS	; Set size of .lis

	MOVB	#OUTPNAMSZ,BOO$GB_FILELEN 	; Set default length
	MOVAL	OUTPNAM,BOO$GL_FILEADDR 	; Default output is SYS$OUTPUT
	MOVB	#INPNAMSZ,INNAM_SIZE 		; Set default length
	MOVAL	INPNAM,INNAM_ADDR 		; Default input is SYS$INPUT
	RET					; Return

.ENTRY	BOO$RESET_COMMAND, ^M<>

; Command SHOW/CONFIG/COMMAND_FILE was originally SAVE <file-spec>

	MOVAL	COM,RIO_OUTFAB2+FAB$L_DNA	; Set up RMS default extension
	MOVB	#4,RIO_OUTFAB2+FAB$B_DNS 	; Set up extension size
	BBSS	#BOOCMD$V_SAVE,BOO$GL_CMDOPT,10$ ; Set SAVE command flag
10$:	RET

.PAGE
;
; These routines are called via a BSBW from TPARSE action routines
;
 
BOO$OPEN_OUTPUT_2::			; Open option output file

	BBC	#BOOCMD$V_OUTPUT,BOO$GL_CMDOPT,10$ ; Branch if no /OUTPUT
	BBC	#BOOCMD$V_SAVE,BOO$GL_CMDOPT,5$   ; Branch if not ".com"
	MOVAL	COM,RIO_OUTFAB2+FAB$L_DNA	  ; Set .com default
	MOVB	#4,RIO_OUTFAB2+FAB$B_DNS	  ; Set size of .com

5$:	MOVB	BOO$GB_FILELEN,-
		RIO_OUTFAB2+FAB$B_FNS	; Set up RMS data of size
	MOVL	BOO$GL_FILEADDR,-
		RIO_OUTFAB2+FAB$L_FNA 	;  and addr. of file spec.
	$CREATE	FAB = RIO_OUTFAB2	; Create file
	BLBC	R0,10$			; Branch on error

7$:
	$CONNECT RAB = RIO_OUTRAB2	;  and open file
10$:	RSB

BOO$OPEN_INPUT_2::
	BBC	#BOOCMD$V_INPUT,-
		BOO$GL_CMDOPT,10$	; Branch if no /INPUT
	MOVB	INNAM_SIZE,-
		RIO_INFAB2+FAB$B_FNS	; Set up RMS data of size
 	MOVL	INNAM_ADDR,-
		RIO_INFAB2+FAB$L_FNA	; and addr. of file spec.
 	$OPEN	FAB=RIO_INFAB2		; and open file
 	BLBC	R0,10$			; branch if error
 
	$CONNECT RAB=RIO_INRAB2 	; Establish record stream
10$:	RSB

.PAGE
.SBTTL	BOO$SET_OUTPUT - Open file for SET/OUTPUT

.Entry	BOO$SET_OUTPUT,^M<>		; Open option output file

	BBC	#BOOCMD$V_SETOUTPUT,-
		BOO$GL_CMDOPT,10$	; Has this file been open?
	$CLOSE	FAB = RIO_OUTFAB3	; Close it first then
	BLBC	R0,30$			; Branch if failure

10$:	MOVAL	LIS,-
		RIO_OUTFAB3+FAB$L_DNA	; Set .lis default
	MOVB	#4,-
		RIO_OUTFAB3+FAB$B_DNS	; Set size of .lis

	MOVB	BOO$GB_FILELEN,-
		RIO_OUTFAB3+FAB$B_FNS	; Set up RMS data of size
	MOVL	BOO$GL_FILEADDR,-
		RIO_OUTFAB3+FAB$L_FNA	;  and addr. of file spec.

	$CREATE	FAB = RIO_OUTFAB3	; Create file
	BLBC	R0,30$			; Branch on error

	BICL	#BOOCMD$M_TERMINAL,-
		BOO$GL_CMDOPT		; ASSUME NOT A TERMINAL DEVICE
	BBC	#DEV$V_TRM,-
		RIO_OUTFAB3+FAB$L_DEV,-
		20$			; BRANCH IF NOT
	BISL	#BOOCMD$M_TERMINAL,-
		BOO$GL_CMDOPT		; SET AS A TERMINAL DEVICE

20$:	$CONNECT RAB = RIO_OUTRAB3	;  and open file
	BLBC	R0,30$			; Branch on error
	
	BISL	#BOOCMD$M_SETOUTPUT,-
		BOO$GL_CMDOPT		; Set output open
30$:	RET



RIO$Output_line::

; Output Routine: Use special FAB if SET/OUTPUT or /OUTPUT was specified,
; RIO$OUTPUT if not.

	BBC	#BOOCMD$V_OUTPUT,BOO$GL_CMDOPT,10$; /OUTPUT = SPECIFIED?
	MOVW	RIO$GW_OUTLEN,RIO_OUTRAB2+RAB$W_RSZ 
	MOVAL	RIO$AB_BUFFER,RIO_OUTRAB2+RAB$L_RBF
	$PUT	RAB=RIO_OUTRAB2
	BRB	30$

10$:	BBC	#BOOCMD$V_SETOUTPUT,BOO$GL_CMDOPT,20$; SET /OUTPUT= SPECIFIED?
	MOVW	RIO$GW_OUTLEN,RIO_OUTRAB3+RAB$W_RSZ 
	MOVAL	RIO$AB_BUFFER,RIO_OUTRAB3+RAB$L_RBF
	$PUT	RAB=RIO_OUTRAB3
	BRB	30$

20$:
	MOVZWL	RIO$GW_OUTLEN,-(SP)	; Length 
	PUSHAL	RIO$AB_BUFFER		; Address
	CALLS	#2,RIO$OUTPUT		; Output to SYS$OUTPUT
30$:	BLBS	R0,40$			; Branch if OK
	PUSHL	R0
	CALLS	#1,G^LIB$SIGNAL		; Signal

40$:	RSB				; Return


	.END				
