%TITLE 'NML Utility routines'
MODULE NML$UTILITY (
		LANGUAGE (BLISS32),
		ADDRESSING_MODE (NONEXTERNAL=GENERAL),
		ADDRESSING_MODE (EXTERNAL=GENERAL),
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:  DECnet-VAX V2.0 Network Management Listener
!
! ABSTRACT:
!
!	This module contains routines for handling a variety of common
!	functions.
!
! ENVIRONMENT:  VAX/VMS Operating System
!
! AUTHOR:  Distributed Systems Software Engineering
!
! CREATION DATE:  23-JAN-1980
!
! MODIFIED BY:
!
!	V03-009	MKP0009		Kathy Perko		23-July-1984
!		Change area number defaulting so that, if no area number
!		is supplied in the NICE command, the executor node's area
!		is used.  This means the permanent database executor area
!		number for permanent database operations, and the volatile
!		database executor area for volatile database operations.
!
!	V03-008	MKP0008		Kathy Perko		21-June-1984
!		Modify NML$CHKEXE to return success if the node address
!		being checked is 0.
!
!	V03-007	MKP0007		Kathy Perko		19-April-1984
!		Modify NML$GETEXEID to call NML$GETEXENAM instead of
!		NML$GETNODNAM.
!
!	V03-006	MKP0006		Kathy Perko		18-April-1984
!		Fix NML$CHKEXEID so it's checking only a word for the
!		node address (instead of a longword).
!
!	V03-005	MKP0005		Kathy Perko		25-Mar-1984
!		Add a routine to check a node number, and, if it's got
!		an area = 0, then convert it to 1 if talking to a Phase IV
!		NCP, and convert it to the exec's area if talking to a
!		Phase III NCP.
!		Use global executor node addresses.
!
!	V03-004	MKP0004		Kathy Perko		5-Feb-1984
!		Make sure permanent database file opens are done at the
!		right times.
!
!	V03-003	MKP0003		Kathy Perko		4-Aug-1983
!		Make changes to convert node permanent database to utilize
!		multiple ISAM keys.  This should improve performance.
!
!	V03-002	MKP0002		Kathy Perko		21-June-1982
!		Add to NML$BLDP2 so that it will take search key values
!		with a word length.
!
!	V03-001	MKP0001		Kathy Perko		21-April-1982
!		Change NML$BLDP2 to build P2 buffers with second start key
!		and no start key.  Also, always include a context area.
!		Add support for entity qualifiers.
!
!	V02-001	LMK0001		Len Kawell		21-Jul-1981
!		Modifications for new NETACP control QIO.
!--


%SBTTL	'Declarations'

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    NML$BLDP2		: NOVALUE,
    NML$CHKEXE,
    NML$SET_UP_EXEC_ID,
    NML$GETEXEADR,
    NML$GETEXENAM,
    NML$GETNODNAM,
    NML$GETVOLNDNAM,
    NML$GETNODADR,
    NML$GETVOLNDADR,
    NML$GETEXEID,
    NML$GETINFTABS,
    NML$FIX_NODE_NUM;

!
! INCLUDE FILES:
!

LIBRARY 'LIB$:NMLLIB.L32';
LIBRARY 'SHRLIB$:NMALIBRY.L32';
LIBRARY 'SHRLIB$:NET.L32';
LIBRARY 'SYS$LIBRARY:STARLET.L32';

!
! OWN STORAGE:
!
!
! Many NICE commands need the executor node's address and/or name.  Save them
! here.  The volatile database exec name and address can't change when
! the exec's state is ON, so they are only retrieved once for each run of
! NMLSHR.  The permanent database exec name and address are retrieved, at
! most, once per NICE command.  They are not retrieved if they are not needed.
!
GLOBAL
    nml$gw_vol_exec_addr:	WORD,
    nml$gw_perm_exec_addr:	WORD,
    nml$t_vol_exec_name:	BBLOCK [16],
    nml$gq_vol_exec_name_dsc:	VECTOR [2] INITIAL (0, nml$t_vol_exec_name),
    nml$t_perm_exec_name:	BBLOCK [16],
    nml$gq_perm_exec_name_dsc:	VECTOR [2] INITIAL (0, nml$t_perm_exec_name);

!
! Parameter buffers and descriptors for use in handling volatile data base
! data.
!
OWN
    p2buffer   : VECTOR [nml$k_p2buflen,  BYTE],
    prmbuffer : VECTOR [256, BYTE];

BIND
    p2bfdsc   = UPLIT (nml$k_p2buflen, p2buffer) : VECTOR [2],
    prmdsc = UPLIT (256, prmbuffer) : VECTOR [2];

OWN
    msglength;

!
! EXTERNAL REFERENCES:
!

$nml_extdef;

EXTERNAL
    nml$gb_ncp_version;

EXTERNAL LITERAL
    nml$_qiobfovf;

EXTERNAL ROUTINE
    nml$bld_reply,
    nml$openfile,
    nma$searchfld,
    nml$error_1,
    nml$readrecord,
    nml$netqio;


%SBTTL 'NML$BLDP2  Build P2 buffer and descriptor'
GLOBAL ROUTINE NML$BLDP2 (LEN1, ADR1, LEN2, ADR2, P2DSC, RESDSC) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine builds the P2 buffer and descriptor for show operations.
!	The search key is added followed by the start key.
!
! FORMAL PARAMETERS:
!
!	LEN1		First search key length.  If LEN1 is:
!			    - zero then ADR1 contains a longword search key.
!			    - >0 it contains the length of a string which
!				ADR1 points to.
!			    - -1 then search key ID is a wildcard, and nothing
!			      needs to be put into the P2 buffer for it.
!			    - -2 then ADR1 contains a word search key.
!	ADR1		First search key address.  If LEN1 is zero then this
!			is the longword value of the search key.  If LEN1 is -1 then
!			the search key is omitted.
!	LEN2		Second search  key length.  Same rules apply as for
!			LEN1.
!	ADR2		Second search key address. Same rules apply as for
!			ADR1.
!	P2DSC		Address of P2 descriptor.  This routine assumes that
!			the buffer is largest enough to handle the result.
!			The maximum P2 buffer required by NML is 36 bytes.
!	RESDSC		Address of descriptor to hold resulting P2.
!
! IMPLICIT OUTPUTS:
!	The buffer described by P2DSC contains the search key and
!	start key information.
!
!--

BEGIN

MAP
    P2DSC  : REF DESCRIPTOR,
    RESDSC : REF DESCRIPTOR;

OWN
    COLLATE_START_VALUE: VECTOR [NFB$C_CTX_SIZE, BYTE]
			INITIAL ( REP NFB$C_CTX_SIZE OF BYTE (0));

LOCAL
    MSGSIZE,
    COUNT,    				! P2 buffer length
    PTR;				! P2 buffer pointer

!
! Calculate the length of the resulting P2 buffer, and signal if
! the buffer supplied isn't big enough.
!
COUNT = 4;			! Account for count at beginning of buffer.
SELECTONE .LEN1 OF
    SET
    [-2]: COUNT = .COUNT + 2;			! It's a word
    [0]: COUNT = .COUNT + 4;			! It's a longword
    [1 TO 255]: COUNT = .COUNT + .LEN1 + 2	! It's a string.
    TES;

SELECTONE .LEN2 OF
    SET
    [-2]: COUNT = .COUNT + 2;			! It's a word
    [0]: COUNT = .COUNT + 4;			! It's a longword
    [1 TO 255]: COUNT = .COUNT + .LEN2 + 2	! It's a string.
    TES;

COUNT = .COUNT + NFB$C_CTX_SIZE;
IF .COUNT GTR .P2DSC [DSC$W_LENGTH] THEN
    !
    ! The P2 buffer will overflow.  Signal an NML error.
    !
    BEGIN
    NML$AB_MSGBLOCK [MSB$L_FLAGS] = MSB$M_MSG_FLD; ! Set message text flag.
    NML$AB_MSGBLOCK [MSB$B_CODE] = NMA$C_STS_MPR;
    NML$AB_MSGBLOCK [MSB$L_TEXT] = NML$_QIOBFOVF;
    NML$BLD_REPLY (NML$AB_MSGBLOCK, MSGSIZE);    ! Build message
    $SIGNAL_MSG (NML$AB_SNDBUFFER, .MSGSIZE);	! Signal it.
    END;

PTR = .P2DSC [DSC$A_POINTER] + 4;	! Skip over return count

!
! Add first search key value to the P2 buffer.
!
SELECTONE .LEN1 OF
    SET
    [-2]: PTR = CH$MOVE (2, ADR1, .PTR);	! It's a word
    [0]: PTR = CH$MOVE (4, ADR1, .PTR);		! It's a longword
    [1 TO 255]: 				! It's a string.
	BEGIN
	CH$WCHAR_A (.LEN1<0,8>, PTR);
	CH$WCHAR_A (.LEN1<8,8>, PTR);
	PTR = CH$MOVE (.LEN1, .ADR1, .PTR);
	END
    TES;

!
! Add search key two to buffer.
!
SELECTONE .LEN2 OF
    SET
    [-2]: PTR = CH$MOVE (2, ADR2, .PTR);	! It's a word
    [0]: PTR = CH$MOVE (4, ADR2, .PTR);		! It's a longword
    [1 TO 255]: 				! It's a string.
	BEGIN
	CH$WCHAR_A (.LEN2<0,8>, PTR);
	CH$WCHAR_A (.LEN2<8,8>, PTR);
	PTR = CH$MOVE (.LEN2, .ADR2, .PTR);
	END
    TES;

!
! Set up a context area of a string of nulls.  NETACP will
! replace the null string with a start value of the last database
! entry matched by the search key.  This allows NML to reissue
! the QIO so that NETACP will start searching where it left
! off from the previous QIO.  Used for plural entity operations
! (KNOWN, ACTIVE).
!
PTR = CH$MOVE ( NFB$C_CTX_SIZE, COLLATE_START_VALUE, .PTR);
!
! Set up resulting descriptor for return.
!
RESDSC [DSC$W_LENGTH] = .PTR - .P2DSC [DSC$A_POINTER];
RESDSC [DSC$A_POINTER] = .P2DSC [DSC$A_POINTER];

END;				! End of NML$BLDP2

%SBTTL 'NML$CHKEXE  Check node address against executor'
GLOBAL ROUTINE NML$CHKEXE (NODE_ID, NODE_ADDR, NODE_NAME_LEN, NODE_NAME_ADDR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine compares the specified node address with the executor node
!	address to see if they match.
!
! FORMAL PARAMETERS:
!	NODE_ID		Equals NMA$C_PCNO_ADD if routine is to check the executor
!			address and NMA$C_PCNO_NNA if the routine is to check
!			the executor's name.
!	NODE_ADDR	Node address (word) to match against executor's
!	NODE_NAME_LEN	Length of node name to match against executor's
!	NODE_NAME_ADDR	Address of node name string to match against executor's
!
! ROUTINE VALUE:
! COMPLETION CODES:
!	nml$_sts_cmp - The node id is not the executor's
!	nml$_sts_suc - The node id is the executor's
!
!--

BEGIN

MAP
    node_id	: WORD,
    node_addr	: WORD;

LOCAL
    exeadr	: WORD,
    exenambuf	: VECTOR [6, BYTE],
    exenamdsc	: DESCRIPTOR,
    exenamlen,
    status;

MAP
    nml$gb_options : BBLOCK [1];

!
! If this is a permanent database operation, and the node permanent
! data base file isn't already open, open it.
!
IF .nml$gb_options [nma$v_opt_per] THEN
    nml$openfile (nma$c_opn_node, nma$c_opn_ac_ro);
status = nml$_sts_cmp;

!
! If this routine was called to compare a node name against the executor's
! name, call NML$GETEXENAM to do the comparison.
!
IF .node_id EQL nma$c_pcno_nna THEN
    BEGIN
    exenamdsc [dsc$w_length] = 6;
    exenamdsc [dsc$a_pointer] = exenambuf;
    IF nml$getexenam (exenamdsc, exenamlen) THEN
	IF CH$EQL (.node_name_len, .node_name_addr, .exenamlen, exenambuf) THEN
	    status = nml$_sts_suc;
    END
ELSE
!
! If this routine was called to compare a node address against the executor's
! address, call NML$GETEXEADR to do the comparison.
!
    BEGIN
    IF .node_addr EQL 0 THEN
	status = nml$_sts_suc
    ELSE
	BEGIN
	IF nml$getexeadr (exeadr) THEN
	    IF .exeadr EQL .node_addr THEN
		status = nml$_sts_suc;
	END;
    END;
RETURN .status

END;				! End of nml$chkexe

%SBTTL 'NML$SET_UP_EXEC_ID   Set up globals for executors name and address'
GLOBAL ROUTINE NML$SET_UP_EXEC_ID =

!++
! FUNCTIONAL DESCRIPTION:
!	This routine gets the name and address of the executor node from the
!	volatile or permanent database and saves them in some global fields.
!
! FORMAL PARAMETERS:
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!--

BEGIN

MAP
    nml$gb_options : BBLOCK [1];

LOCAL
    fldadr,
    fldsize,
    temp,
    recdsc :	VECTOR [2],
    p2dsc  :	VECTOR [2],	! Descriptor for QIO P2 (Key) buffer.
    ptr,
    status;

$NFBDSC(NFBDSC, SHOW, , LNI
	,NFB$C_WILDCARD,	! Search key 1 = wildcard, oper1 = eql
	,NFB$C_WILDCARD,	! Search key 2 = wildcard, oper2 = eql
	,ADD
	,NAM);

IF .nml$gb_options [nma$v_opt_per] THEN
    BEGIN
    IF .nml$gw_perm_exec_addr EQL 0 THEN
	BEGIN
	!
	! If the node permanent data base file isn't already open, open it.
	!
	nml$openfile (nma$c_opn_node, nma$c_opn_ac_ro);
	recdsc [1] = .prmdsc [1];
	status = nml$readrecord (nma$c_opn_node,	! Node database file ID
			   UPLIT (nmn$c_typ_key_ref),	! ISAM key = node type
			   UPLIT (nmn$c_typ_key_len,	! ISAM key value = executor
			   UPLIT (nml$c_executor)),
			   prmdsc,			! Read buffer descriptor
			   recdsc,			! Return data descriptor
			   temp);			! Not used.
	IF .status THEN
	    BEGIN
	    fldadr = 0;
	    IF nma$searchfld (	recdsc,
				nma$c_pcno_add,
				fldsize,
				fldadr) THEN
		CH$MOVE (2, CH$PTR (.fldadr), nml$gw_perm_exec_addr);
	    fldadr = 0;
	    IF nma$searchfld (	recdsc,
				nma$c_pcno_nna,
				nml$gq_perm_exec_name_dsc [0],
				fldadr) THEN
		CH$MOVE (.nml$gq_perm_exec_name_dsc [0],
			 .fldadr,
			 .nml$gq_perm_exec_name_dsc [1]);
	    END;
	END;
    END
ELSE
    BEGIN
    IF .nml$gw_vol_exec_addr EQL 0 THEN
	BEGIN
	!
	! Set up search and start key buffer to get any entry in the data
	! base.  The executor node database only has one entry.  Then issue
	! the QIO to get the node address.
	!
	nml$bldp2 ( -1, 0, -1, 0, p2bfdsc, p2dsc);
	status = nml$netqio (	nfbdsc,
				p2dsc,
				fldsize,
				prmdsc);
	IF .status THEN
	    BEGIN
	    ptr = .prmdsc [1];
	    CH$MOVE (2, .ptr, nml$gw_vol_exec_addr);
	    ptr = .ptr + 4;
	    CH$COPY (2, .ptr, 0, 4, nml$gq_vol_exec_name_dsc [0]);
	    CH$MOVE (.nml$gq_vol_exec_name_dsc [0],
		     .ptr + 2,
		     .nml$gq_vol_exec_name_dsc [1]);
	    RETURN nml$_sts_suc
	    END;
	END;
    END;
RETURN .status;
END;				! End of nml$set_up_exec_id

%SBTTL 'NML$GETEXEADR  Get executor node address'
GLOBAL ROUTINE NML$GETEXEADR (ADDR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the executor node address.
!
! FORMAL PARAMETERS:
!	ADDR		Address of word to contain node address.
!
! IMPLICIT INPUTS:
!
!	NML$GB_OPTIONS contains the command message options.
!
!	If this is a permanent data base operation then it is assumed
!	that the node file is already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the executor node address is found then success (NML$_STS_SUC) is
!	returned.  If the node address is not found, then a zero address is
!	returned along with failure (NML$_STS_PTY).
!
! SIDE EFFECTS:
!
!	Destroys contents of PRMBUFFER.
!
!--

BEGIN

MAP
    nml$gb_options : BBLOCK [1];

LOCAL
    exec_addr,
    status;

IF .nml$gb_options [nma$v_opt_per] THEN
    exec_addr = nml$gw_perm_exec_addr
ELSE
    exec_addr = nml$gw_vol_exec_addr;

IF .(.exec_addr)<0,16> EQL 0 THEN
    BEGIN
    status = nml$set_up_exec_id ();
    IF NOT .status THEN
	!
	! No executor entry found.  This should happen only for the permanent
	! database, and there, not very often.
	!
	BEGIN
	(.addr)<0,16> = 0;
	RETURN nml$_sts_pty;
	END;
    END;
CH$MOVE (2, .exec_addr, .addr);
RETURN nml$_sts_suc;
END;				! End of NML$GETEXEADR

%SBTTL 'NML$GETEXENAM  Get executor node name'
GLOBAL ROUTINE NML$GETEXENAM (BUFDSC, RESLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the executor node name.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Address of descriptor of buffer to contain ASCII
!			node name.
!	RESLEN		Resulting length of node name string.
!
! IMPLICIT INPUTS:
!
!	If this is a permanent data base operation then it is assumed
!	that the node file is already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the executor node name is found then success (NML$_STS_SUC) is
!	returned.  If the node name is not found a zero length counted string
!	is returned along with failure (NML$_STS_PTY).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

MAP
    bufdsc : REF DESCRIPTOR,
    nml$gb_options : BBLOCK [1];

LOCAL
    exec_dsc_addr: REF VECTOR,
    status;

IF .nml$gb_options [nma$v_opt_per] THEN
    exec_dsc_addr = nml$gq_perm_exec_name_dsc
ELSE
    exec_dsc_addr = nml$gq_vol_exec_name_dsc;

IF .exec_dsc_addr [0] EQL 0 THEN
    BEGIN
    status = nml$set_up_exec_id ();
    IF NOT .status THEN
	!
	! No executor entry found.  This should happen only for the permanent
	! database, and there, not very often.
	!
	BEGIN
	.reslen = 0;
	RETURN nml$_sts_pty;
	END;
    END;
.reslen = .exec_dsc_addr [0];
IF ..reslen LEQU .bufdsc [dsc$w_length] THEN
    BEGIN
    CH$MOVE (..reslen, .exec_dsc_addr [1], .bufdsc [dsc$a_pointer]);
    RETURN nml$_sts_suc;
    END
ELSE
    RETURN nml$_sts_pty;
END;				! End of NML$GETEXENAM

%SBTTL 'NML$GETNODNAM  Get node name given the address'
GLOBAL ROUTINE NML$GETNODNAM (ADDR, BUFDSC, RESLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the node name that matches the
!	specified address.
!
! FORMAL PARAMETERS:
!
!	ADDR		Node address.
!	BUFDSC		Address of descriptor of buffer to contain ASCII
!			node name.
!	RESLEN		Resulting length of node name string.
!
! IMPLICIT INPUTS:
!
!	NML$GB_OPTIONS contains the command message options.
!
!	If this is a permanent data base operation then it is assumed
!	that the node file is already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the executor node name is found then success (NML$_STS_SUC) is
!	returned.  If the node name is not found a zero length counted string
!	is returned along with failure (NML$_STS_PTY).
!
! SIDE EFFECTS:
!
!	Destroys contents of PRMBUFFER.
!
!--

BEGIN

MAP
    addr : WORD,
    bufdsc : REF DESCRIPTOR,
    nml$gb_options : BBLOCK [1];

LOCAL
    addrdsc : VECTOR [2],
    nameptr,
    namesize : WORD,
    temp,
    recdsc : VECTOR [2];

IF .nml$gb_options [nma$v_opt_per] THEN
    BEGIN
    !
    ! If the node permanent data base file isn't already open, open it.
    !
    nml$openfile (nma$c_opn_node, nma$c_opn_ac_ro);
    recdsc [1] = .prmdsc [1];
    addrdsc [0] = 2;
    addrdsc [1] = addr;
    IF nml$readrecord (nma$c_opn_node,		! Node perm database file ID
		     UPLIT (nma$c_pcno_add),	! Use ISAM key = node address
		     addrdsc, 			! ISAM key value = node address
		     prmdsc,			! Read buffer descriptor
		     recdsc,			! Return data descriptor
		     temp) THEN			! Not used
	BEGIN
	namesize = 0;
	nameptr = 0;
	IF nma$searchfld (	recdsc,
				nma$c_pcno_nna,
				namesize,
				nameptr) THEN
	    BEGIN
	    CH$MOVE (.namesize, CH$PTR (.nameptr),
			CH$PTR (.bufdsc [dsc$a_pointer]));
	    .reslen = .namesize;

	    RETURN nml$_sts_suc
	    END;
	END
    END
ELSE
    RETURN nml$getvolndnam (.addr, .bufdsc, .reslen);

!
! No node name found.
!
.reslen = 0;

RETURN nml$_sts_pty

END;				! End of NML$GETNODNAM

%SBTTL 'NML$GETVOLNDNAM  Get node name given the address'
GLOBAL ROUTINE NML$GETVOLNDNAM (ADDR, BUFDSC, RESLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the volatile node name that matches the
!	specified address.
!
! FORMAL PARAMETERS:
!
!	ADDR		Node address.
!	BUFDSC		Address of descriptor of buffer to contain ASCII
!			node name.
!	RESLEN		Address of longword to contain resulting length
!			of node name string.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the node name is found then success (NML$_STS_SUC) is
!	returned.  If the node name is not found a zero length counted string
!	is returned along with failure (NML$_STS_PTY).
!
! SIDE EFFECTS:
!
!	Destroys contents of PRMBUFFER.
!
!--

BEGIN

MAP
    addr   : WORD,
    bufdsc : REF DESCRIPTOR;

$nfbdsc(nfbdsc, show, , ndi
		,tad,		! Search key 1 = Transformed Address, oper1 = eql
		,nfb$c_wildcard,! Search key 2 = wildcard, oper2 = eql
		,nna);

LOCAL
    p2dsc : VECTOR [2],
    nameptr,
    namesize : WORD,
    node_addr;

node_addr = .addr;

IF .addr EQL 0 THEN			! If zero address then
    nml$getexeadr (node_addr);	! get the real executor address
nml$bldp2(0, .node_addr, -1, 0, p2bfdsc, p2dsc);
    
IF nml$netqio (	nfbdsc,
		p2dsc,
		namesize,
		prmdsc) THEN
    BEGIN
    nameptr = .prmdsc [1];
    namesize = .(.nameptr)<0,16>;
    CH$MOVE (.namesize, CH$PTR (.nameptr,2), .bufdsc [dsc$a_pointer]);
    .reslen = .namesize;
    RETURN nml$_sts_suc
    END;
!
! No node name found.
!
.reslen = 0;

RETURN nml$_sts_pty

END;				! End of NML$GETVOLNDNAM

%SBTTL 'NML$GETNODADR  Get node address given the name'
GLOBAL ROUTINE NML$GETNODADR (NAMLEN, NAMPTR, ADDR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the node address that matches the
!	specified name.
!
! FORMAL PARAMETERS:
!
!	ADDR		Address of word to contain node address.
!
! IMPLICIT INPUTS:
!
!	NML$GB_OPTIONS contains the command message options.
!
!	If this is a permanent data base operation then it is assumed
!	that the node file is already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the node address is found then success (NML$_STS_SUC) is
!	returned.  If the node address is not found a zero address
!	is returned along with failure (NML$_STS_PTY).
!
! SIDE EFFECTS:
!
!	Destroys contents of PRMBUFFER.
!
!--

BEGIN

MAP
    nml$gb_options : BBLOCK [1];

$nfbdsc(nfbdsc, show, , ndi
		,nna,		! Search key 1 = Node name, oper1 = eql
		,nfb$c_wildcard,! Search key 2 = wildcard, oper2 = eql
		,tad);

LOCAL
    fldadr,
    fldsize,
    p2dsc    : VECTOR [2],
    ptr,
    key      : WORD,
    temp,
    recdsc   : VECTOR [2];

IF .nml$gb_options [nma$v_opt_per] THEN
    BEGIN
    !
    ! If the node permanent data base file isn't already open, open it.
    !
    nml$openfile (nma$c_opn_node, nma$c_opn_ac_ro);
    recdsc [1] = .prmdsc [1];
    IF nml$readrecord (nma$c_opn_node,		! Node perm database ID
		     UPLIT (nma$c_pcno_nna),	! Use ISAM key = node name
		     namlen, 			! ISAM key value dsc = node name
		     prmdsc,			! Read buffer descriptor
		     recdsc,			! Return data descriptor
		     temp) THEN			! Not used
	BEGIN
	fldadr = 0;
	IF nma$searchfld (	recdsc,
				nma$c_pcno_add,
				fldsize,
				fldadr) THEN
	    BEGIN
	    CH$MOVE (2, .fldadr, .addr);
	    RETURN nml$_sts_suc
	    END;
	END
    END
ELSE
    IF nml$getvolndadr (.namlen, .namptr, .addr) THEN
	RETURN nml$_sts_suc;
!
! No node address found.
!
(.addr)<0,16> = 0;

RETURN nml$_sts_pty

END;				! End of NML$GETNODADR

%SBTTL 'NML$GETVOLNDADR  Get volatile node address given the name'
GLOBAL ROUTINE NML$GETVOLNDADR (NAMLEN, NAMPTR, ADDR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the node address from the volatile data base
!	that matches the specified name.
!
! FORMAL PARAMETERS:
!
!	ADDR		Address of word to contain node address.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the node address is found then success (NML$_STS_SUC) is
!	returned.  If the node address is not found a zero address
!	is returned along with failure (NML$_STS_PTY).
!
! SIDE EFFECTS:
!
!	Destroys contents of PRMBUFFER.
!
!--

BEGIN

$nfbdsc(nfbdsc, show, , ndi
		,nna,		! Search key 1 = node name, oper1 = eql
		,nfb$c_wildcard,! Search key 2 = wildcard, oper2 = eql
		,tad);

LOCAL
    p2dsc    : VECTOR [2],
    ptr;

nml$bldp2(.namlen, .namptr, -1, 0, p2bfdsc, p2dsc);
IF nml$netqio (	nfbdsc,
		p2dsc,
		0,
		prmdsc) THEN
    BEGIN
    MAP
	ptr: REF BBLOCK,
	nml$gw_vol_exec_addr: BBLOCK;

    ptr = .prmdsc [1];
    IF CH$RCHAR (nml$gb_ncp_version) LEQ 3 THEN
	BEGIN
	IF .ptr [nma$v_area] EQL .nml$gw_vol_exec_addr [nma$v_area] THEN
	    ptr [nma$v_area] = 0;
	END;
    CH$MOVE (2, .ptr, .addr);
    RETURN nml$_sts_suc
    END;

!
! No node address found.
!
(.addr)<0,16> = 0;
RETURN nml$_sts_pty

END;				! End of NML$GETNODADR

%SBTTL 'NML$GETEXEID  Get executor node id'
GLOBAL ROUTINE NML$GETEXEID (BUFDSC, RESLEN) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the executor node address followed by
!	the node name.
!
! FORMAL PARAMETERS:
!
!	BUFDSC		Address of descriptor of buffer to contain ASCII
!			node name.
!	RESLEN		Resulting length of node name string.
!
! IMPLICIT INPUTS:
!
!	If this is a permanent data base operation then it is assumed
!	that the executor and node files are already open.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the executor node name is found then success (NML$_STS_SUC) is
!	returned.  If the node name is not found a zero length counted string
!	is returned along with failure (NML$_STS_PTY).
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

MAP
    bufdsc         : REF DESCRIPTOR;

LOCAL
    addr : WORD,
    nambuf : VECTOR [6, BYTE],
    namdsc : VECTOR [2],
    namlen,
    ptr;

ptr = ch$ptr (.bufdsc [dsc$a_pointer]);

nml$getexeadr (addr);		! Get address

namdsc [0] = 6;
namdsc [1] = nambuf;

nml$getexenam (namdsc, namlen);	! Get name

ch$wchar_a (.(addr)<0,8>, ptr);
ch$wchar_a (.(addr)<8,8>, ptr);
CH$WCHAR_A (.namlen OR nma$m_ent_exe, ptr);
ptr = CH$MOVE (.namlen, .namdsc [1], .ptr);
.reslen = .ptr - .bufdsc [dsc$a_pointer];

RETURN nml$_sts_suc

END;				! End of NML$GETEXEID

%SBTTL 'NML$GETINFTABS  Get NFB and information table'
GLOBAL ROUTINE NML$GETINFTABS (ENT, INF, NFBDSC, TABDSC, COPY) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine returns the NFB descriptor address and the corresponding
!	table address based on the internal entity type and the information
!	type specified in the NCP SHOW command message.
!
! FORMAL PARAMETERS:
!
!	ENT		Internal entity type code.
!	INF		Internal information type code.
!	NFBDSC		Address of longword to get NFB descriptor address.
!	TABDSC		Address of longword to get table descriptor address.
!	COPY		(Temporary parameter) If 1, copy the NFB to the 
!			buffer specified by NFBDSC, and fill in NFBDSC length.
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	If the descriptors are found for the specified entity and information
!	type then success (NML$_STS_SUC) is returned.  If the information type
!	is invalid for the entity then an error message (NML$_STS_FUN) is
!	signalled.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

BEGIN

LOCAL
	single_ent_nfbdsc : REF DESCRIPTOR,
	enttab : REF BBLOCKVECTOR [, 8]; ! Address of entity table

enttab = .nml$al_entinftab [.ent];
!
! Return address of table used to format the NICE response message for
! this entity.
!
.tabdsc = .enttab [.inf, 4,0,32,0];

!
! Return the canned NFB and NFB descriptor for getting the SHOW info
! from NETACP.
!
IF NOT .copy THEN
	BEGIN
	.nfbdsc = .enttab [.inf, 0,0,32,0];

	IF ..nfbdsc EQLA 0
	THEN
		nml$error_1 (nma$c_sts_fun);
	END
ELSE
	!
	! For the new QIO interface, each plural entity show should
	! be modified to use the following path.  When I get around to it.
	! For plural entity SHOWs, copy the single entity NFB to local
	! storage in the calling routine, where it will be modified to
	! issue a plural entity SHOW.
	!
	BEGIN

	MAP
		nfbdsc : REF DESCRIPTOR;

	single_ent_nfbdsc = .enttab [.inf, 0,0,32,0];
	IF .single_ent_nfbdsc EQLA 0 THEN
		nml$error_1 (nma$c_sts_fun);
	.nfbdsc = ..single_ent_nfbdsc;			! Set up NFB length.
	CH$MOVE (.single_ent_nfbdsc [dsc$w_length],
		 .single_ent_nfbdsc [dsc$a_pointer],
		 .nfbdsc [dsc$a_pointer]);
	END;

RETURN nml$_sts_suc

END;				! End of NML$GETINFTABS

%SBTTL 'NML$FIX_NODE_NUM  Fix node address parameter (action routine)'
GLOBAL ROUTINE NML$FIX_NODE_NUM (NODE_ADDR) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is an NPARSE action that checks the node address.  If the area
!	number is 0 it can be one of two cases:
!		The NCP is a Phase IV NCP, and user did not specify an area
!		number in the NCP command.  In this case, assume the user
!		means area 1 (since 0 is an invalid area number).
!
!		the NCP is a Phase III NCP and therefore doesn't understand
!		area numbers.  In this case, assume the user means the
!		executor node's area.
!
! FORMAL PARAMETERS:
!	NODE_ADDR	Address of Node address to fix.
!
! IMPLICIT INPUTS:
!	None
!
! IMPLICIT OUTPUTS:
!	None
!
!--

BEGIN

MAP
    node_addr	: REF BBLOCK [2],
    nml$gb_options : BBLOCK [1];

LOCAL
    exec_addr	: BBLOCK [2];

!
! If the node address is 0, then it's the executor, so leave it that way.
! If the area number of the address is 0, then change it.
!
IF .node_addr [nma$v_addr] NEQ 0 AND
   .node_addr [nma$v_area] EQL 0 THEN
    BEGIN
    !
    ! Get the executor address from the volatile database if the NICE command
    ! is a volatile database command and from the permanent database if the
    ! NICE command is a permanent database command.  Use the executor's area
    ! number for the node address supplied.
    !
    nml$getexeadr (exec_addr);
    node_addr [nma$v_area] = .exec_addr [nma$v_area];
    END;
RETURN nml$_sts_suc

END;				! End of NML$FIX_NODE_NUM

END

ELUDOM
