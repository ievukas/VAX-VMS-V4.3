	.TITLE	 CSPCJFRES
	.IDENT	'V04-000'

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:	Common Journaling Facility, Cluster Server Process
;	
; ABSTRACT:	Routine running in the CSP acting on behalf of CJF to
;		resume the cluster failover sequence following the remastering
;		of Recovery Unit Journals.
;
; AUTHOR:	Paul R. Beck
;
; DATE:		 9-SEP-1983 17:00	Last Edit:  9-SEP-1983 20:15:46 
;
; MODIFIED BY:
;
;	V03-001	ADE0001		Alan D. Eldridge	 6-Feb-1984
;		Minor cleanup.
;
;
;--

;
;  Symbol Definitions
;

	$CLUBDEF
	$IPLDEF

;
; This code must run at elevated IPL, so it gets locked down.
;
.PSECT	CJF$CSP_CODE	EXE,WRT


;
; The following two locations are filled in from CSP$CJFREMASTER by the
; MOST RECENT CALL to that routine.
;
LOCK:						; lock page from here to SYNCH
FAILOVER_ID::	.LONG		0		; most recent failover ID
RESUME_ADDRESS::.LONG		0		; address to call to resume
						; failover sequence

.ENTRY	CJF$RESUME_FAILOVER,^M<>
	;
	;
	;    Get the address of the cluster failover control block
	;
	;
	MOVL	G^CLU$GL_CLUB,R0		; First, get the cluster block
	MOVAB	CLUB$B_CLUFCB,R0		; ...which contains the failover block
	;
	;
	;    Synchronize, then just quit if it's the wrong failover sequence. 
	;    In that case, we expect to be called again with the correct one.
	;
	;
	SETIPL	SYNCH				; synchronize with cluster code
	CMPL	FAILOVER_ID,CLUFCB$L_ID(R0)	; is this the correct failover?
	BNEQ	20$				; if NEQ, no: we're done.
	;
	;
	;    Restart the failover sequence.  The return will also be at 
	;    IPL$_SYNCH, after some unknown amount of failover code is executed.
	;    That is, eventually, failover code will fork, at which point, we 
	;    get control again.
	;
	;
	JSB	@RESUME_ADDRESS			; resume failover sequence
20$:	;
	;
	;   That's it.
	;
	;
	SETIPL	#0				; back to normal IPL
	RET					; return to caller

SYNCH:	.LONG	IPL$_SYNCH

	ASSUME	<SYNCH - LOCK> LT 512

.END
