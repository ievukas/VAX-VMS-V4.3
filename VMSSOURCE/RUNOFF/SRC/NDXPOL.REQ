!
! Version:	'V04-000'
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!   DSR (Digital Standard RUNOFF) /DSRPLUS DSRINDEX/INDEX Utility
!
! ABSTRACT:
!   This file contains literals and macros defining the data structures
!   found in the internal index pool
!
! ENVIRONMENT:	 Transportable
!
! AUTHOR:	 JPK
!
! CREATION DATE: January 1982
!
! MODIFIED BY:
!
!	003	JPK00015	04-Feb-1983
!		Cleaned up module names, modified revision history to
!		conform with established standards. Updated copyright dates.
!
!	002	JPK00009	24-Jan-1983
!		Modified to enhance performance. The sort buckets have each
!		been divided into 27 sub-buckets; 1 for each letter and 1
!		for non-alphas. Removed reference to BUCKET from INDEX.
!		Definition of the structure was added to NDXPOL. References
!		to BUCKET were changed in modules NDXOUT, NDXINI, NDXFMT 
!		and NDXDAT.
!
!--

! Index entry

$FIELD XE_FIELDS =
    SET

    XE$A_PREV		= [$ADDRESS],		! Link to previous item
    XE$A_NEXT		= [$ADDRESS],		! Link to next item
    XE$A_SUBX		= [$ADDRESS],		! Sub index pointer
    XE$A_REF		= [$ADDRESS],		! Reference pointer
    XE$A_TEXT		= [$ADDRESS],		! Pointer to text of index item
    XE$A_SORT_AS	= [$ADDRESS],		! Pointer to SORT_AS string
    XE$H_SUBC		= [$SHORT_INTEGER],	! Sub index level

    XE$V_FLAGS		= [$SHORT_INTEGER],	! Entry flags

	$OVERLAY (XE$V_FLAGS)

	XE$V_BARS		= [$BIT],	! Change bar flag

	$CONTINUE

    XE$A_BOOK_LIST	= [$ADDRESS]		! Master index book name list

    $ALIGN (FULLWORD)

    TES;

LITERAL
    XE$K_LENGTH = $FIELD_SET_SIZE;

MACRO
    $XE_BLOCK = BLOCK [XE$K_LENGTH] FIELD (XE_FIELDS) %;

! End of Index entry


! Reference entry

$FIELD XX_FIELDS =
    SET

    XX$A_LINK		= [$ADDRESS],		! Link to additional entries
    XX$A_APPEND		= [$ADDRESS],		! APPEND text pointer
    XX$H_PAGE		= [$SHORT_INTEGER],	! Transaction number

    XX$V_FLAGS		= [$SHORT_INTEGER],	! Display attributes

	$OVERLAY (XX$V_FLAGS)

	XX$V_BOLD	= [$BIT],		! Bold page reference
	XX$V_UNDERLINE	= [$BIT],		! Underline page reference
	XX$V_BEGIN	= [$BIT],		! Begin page range
	XX$V_END	= [$BIT],		! End page range

	$CONTINUE

    XX$A_BOOK		= [$ADDRESS]		! Master index book name

    $ALIGN (FULLWORD)

    TES;

LITERAL
    XX$K_LENGTH = $FIELD_SET_SIZE;

MACRO
    $XX_BLOCK = BLOCK [XX$K_LENGTH] FIELD (XX_FIELDS) %;

! End of Reference entry


! Master index book reference entry

$FIELD XM_FIELDS =
    SET

    XM$A_LINK		= [$ADDRESS],		! Link to additional entries
    XM$A_BOOK		= [$ADDRESS]		! Pointer to book name

    TES;

LITERAL
    XM$K_LENGTH = $FIELD_SET_SIZE;

MACRO
    $XM_BLOCK = BLOCK [XM$K_LENGTH] FIELD (XM_FIELDS) %;

! End of Master index book reference entry


! Current Entry

$FIELD C_FIELDS =
    SET

    C$A_CURR		= [$ADDRESS],		! Pointer to current cell
    C$A_PREV		= [$ADDRESS],		! Pointer to previous cell
    C$A_HEAD		= [$ADDRESS],		! Pointer to head of chain

    $ALIGN (FULLWORD)

    C$V_FLAGS		= [$INTEGER],		! Current cell flags

	$OVERLAY (C$V_FLAGS)

	C$V_IDNS	= [$BIT]		! Identical string flag

	$CONTINUE

    TES;

LITERAL
    C$K_LENGTH = $FIELD_SET_SIZE;

MACRO
    $C_BLOCK = BLOCK [C$K_LENGTH] FIELD (C_FIELDS) %;

! End of current entry


!
! Dummy datasets
!
LITERAL
    DS_X_ENTRY  = XE$K_LENGTH,
    DS_XX_ENTRY = XX$K_LENGTH,
    DS_XM_ENTRY = XM$K_LENGTH,
    DS_X_STRING = 0;

!
! Structure definition for bucket array. 
!
!	Buckets are arranged so that each row represents the first letter of
!	the string and each column represents the second letter of the string.
!
!	This approach is used only for master indexes as no performance 
!	improvement is realised until about 10 input files have been processed.
!
!	Indexes which are not master indexes use only the first element of
!	each row, i.e., [0, 0] ... [26, 0].
!
!	The only exception is for nonalphabetic characters which use only
!	element [0, 0]. Elements [0, 1] ... [0, 26] are not used since mapping
!	all nonalphabetics into one row loses the sort order of the first
!	character in the string. For nonalphabetics to work correctly in a two
!	dimensional bucket scheme, the array would have to be at least 127 x 127
!
!	     0   1  .  .  .  26
!	 0  **  not used  . . .
!	 1  A?  AA           AZ
!	 .                    .
!	 .                    .
!	 .                    .
!	26  Z?  ZA  .  .  .  ZZ
!
STRUCTURE
    $BUCKET_ARRAY [ROW_IDX, COL_IDX; M, N] =
	[M * N * %UPVAL] ($BUCKET_ARRAY + (ROW_IDX * N + COL_IDX) * %UPVAL);

!--	End of NDXPOL.REQ
