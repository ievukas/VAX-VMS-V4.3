! *********************************************************************************************************************************
!  Created 15-SEP-1984 22:59:53  by  VAX-11 SDL V2.0       Source: 15-SEP-1984 22:42:14 _$255$DUA28:[DCL.SRC]CLITABDEF.SDL;1       
! *********************************************************************************************************************************
 
 
!*** MODULE $clitab ***
! 	IDENT V04-000
! ***************************************************************************
! 									    *
!   COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!   DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!   ALL RIGHTS RESERVED.						    *
!  									    *
!   THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!   ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!   INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!   COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!   OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!   TRANSFERRED.							    *
!  									    *
!   THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!   AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!   CORPORATION.							    *
!  									    *
!   DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!   SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!  									    *
! 									    *
! ***************************************************************************
! ++
!  Facility:	Command Language Interpreters, CLI Table Definitions
! 
!  Abstract:	This file contains the definitions for the data blocks which
! 		appear in a CLI table.  A CLI table is used by DCL and MCR
! 		to parse and execute DCL commands entered by the user.
! 		A CLI table is created with the Command Definition Utility.
! 
!  Environment:	No assumptions can be made about the environment.
! 
!  Author:	Paul C. Anagnostopoulos
!  Creation:	7 December 1982
! 
!  Modifications:
! 
! 	V04-001	PCG0001		Peter George		06-Dec-1983
! 		Add NEG operator.
! --
! 	C L I   T A B L E   B L O C K S
! 	-----   ---------   -----------
!  A CLI table contains all of the information that DCL and MCR need
!  to parse DCL commands.  The tables are composed of a set of blocks,
!  each of which describes one or more command items.  This SDL file
!  defines all of the blocks.
! 
!  Each block begins with a standard header, which is formatted as follows:
! 
! 	+-------+-------+---------------+
! 	|subtype| type  |    length     |
! 	|-------+-------|---------------|
! 	|   TRO count   |    flags      |
! 	+---------------+---------------+
! 
!  All references to other blocks are made via Table-Relative Offsets (TRO).
!  The TRO count specifies how many such references there are, and the
!  reference longwords always follow the header immediately.  The rest of
!  each block contains other information necessary for the definition of
!  the item.  Following the fixed portion of the block is a variable
!  portion, which contains any variable-length strings.  Each of these
!  strings is referenced from the fixed portion of the block by a
!  word Block-Relative Offset (BRO).
! 
!  The following list defines all of the valid block types.
literal block_k_vector = 1;             !  Vector (root) block.
literal block_k_command = 2;            !  Command block.
literal block_k_type = 3;               !  Type block.
literal block_k_entity = 4;             !  Entity block.
literal block_k_expression = 5;         !  Expression block.
literal block_k_cdu_visited = 6;        !  For CDU internal use.
!  The following pages define the various block formats.  Many of the field
!  names are wierd, but have been retained for compatibility with previous
!  block formats.
! 	V E C T O R   B L O C K S
! 	-----------   -----------
!  The primary vector block appears at the beginning of a CLI table,
!  and contains references to all other blocks and block lists.
literal vec_k_dcl = 1;                  !  Primary vector for DCL.
literal vec_k_mcr = 2;                  !  Primary vector for MCR.
literal vec_k_verb = 3;                 !  Verb name table.
literal vec_k_command = 4;              !  Command block table.
literal vec_k_strlvl = 6;               !  Current level is 6.
literal vec_k_header_length = 8;
literal vec_k_length = 20;              !  Length of fixed portion.
literal vec_S_vector_block = 20;
macro vec_w_size = 0,0,16,0 %;          !  All blocks have a standard
macro vec_b_type = 2,0,8,0 %;           !  header which is defined
macro vec_b_subtype = 3,0,8,0 %;        !  up above.
macro vec_w_flags = 4,0,16,0 %;
macro vec_b_strlvl = 4,0,8,0 %;         !  Format level of table.
macro vec_w_tro_count = 6,0,16,0 %;
macro vec_l_verbtbl = 8,0,32,1 %;       !  TRO of verb name table.
macro vec_l_comdptr = 12,0,32,1 %;      !  TRO of command block pointer
!  table.
macro vec_l_table_size = 16,0,32,0 %;   !  Overall size of CLI table.
!  The verb name table is composed of the standard header, followed by one
!  longword for each verb or synonym.  The longword contains the first
!  four characters of the verb name, padded with NULs if necessary.
!  The command block pointer table is composed of the standard header,
!  followed by one longword for each entry in the verb table.  This
!  longword contains the TRO of the corresponding command block.
! 	C O M M A N D   B L O C K
! 	-------------   ---------
!  A command block is used to define a verb or a syntax change brought about
!  by a parameter or qualifier.  There is one command block for each verb
!  (but not for its synonyms), and one for each syntax change within a verb.
literal cmd_k_verb = 1;                 !  Verb definition.
literal cmd_k_syntax = 2;               !  Syntax change definition.
literal cmd_m_abbrev = 1;
literal cmd_m_nostat = 2;
literal cmd_m_foreign = 4;
literal cmd_m_immed = 8;
literal cmd_m_mcrparse = 16;
literal cmd_m_parms = 32;
literal cmd_m_quals = 64;
literal cmd_m_disallows = 128;
literal cmd_k_max_parms = 8;            !  Maximum parameters.
literal cmd_k_none = 0;                 !  It doesn't.
literal cmd_k_cli = 1;                  !  Calls a CLI routine.
literal cmd_k_user = 2;                 !  Calls a user routine.
literal cmd_k_image = 3;                !  Invokes an image.
literal cmd_k_same = 4;                 !  For syntax change, same
!  handling as verb.
literal cmd_k_length = 32;              !  Length of fixed portion.
literal cmd_k_max_name = 32;            !  Maximum sizes of variable
literal cmd_k_max_image = 64;           !  portions.
literal cmd_k_max_outputs = 8;
literal cmd_k_max_prefix = 32;
literal cmd_S_command_block = 32;
macro cmd_w_size = 0,0,16,0 %;          !  All blocks have a standard
macro cmd_b_type = 2,0,8,0 %;           !  header which is defined
macro cmd_b_subtype = 3,0,8,0 %;        !  up above.
macro cmd_w_flags = 4,0,16,0 %;
macro cmd_v_abbrev = 4,0,1,0 %;         !  Verb may be abbreviated
macro cmd_v_nostat = 4,1,1,0 %;         !  Command does not return a
macro cmd_v_foreign = 4,2,1,0 %;        !  Command requests unparsed
macro cmd_v_immed = 4,3,1,0 %;          !  Immediate command, uses
macro cmd_v_mcrparse = 4,4,1,0 %;       !  MCR style (output=input).
macro cmd_v_parms = 4,5,1,0 %;          !  Parameter info is relevent.
macro cmd_v_quals = 4,6,1,0 %;          !  Qualifier info is relevent.
macro cmd_v_disallows = 4,7,1,0 %;      !  Disallow info is relevent.
!  internal parsing routines.
!  command line.
!  status, so don't check it.
!  non-uniquely.
macro cmd_w_tro_count = 6,0,16,0 %;
macro cmd_l_parms = 8,0,32,1 %;         !  TRO of first parameter
!  entity block.
macro cmd_l_quals = 12,0,32,1 %;        !  TRO of first qualifier.
macro cmd_l_disallow = 16,0,32,1 %;     !  TRO of top-level disallow
!  boolean expression block.
macro cmd_b_handler = 20,0,8,0 %;       !  How does CLI handle command?
macro cmd_b_parmcnt = 21,0,8,0 %;
macro cmd_v_minparm = 21,0,4,0 %;
literal cmd_s_minparm = 4;              !  Minimum required parameters.
macro cmd_v_maxparm = 21,4,4,0 %;
literal cmd_s_maxparm = 4;              !  Maximum allowed parameters.
macro cmd_b_verbtyp = 22,0,8,0 %;       !  Verb type code for use with
macro cmd_w_name = 24,0,16,0 %;         !  BRO of verb or syntax name.
macro cmd_w_image = 26,0,16,0 %;        !  BRO of routine or image
!  reference.
macro cmd_w_outputs = 28,0,16,0 %;      !  BRO of outputs list.
macro cmd_w_prefix = 30,0,16,0 %;       !  BRO of prefix string.
macro cmd_z_VARIABLE = 32,0,0,0 %;      !  Beginning of variable part.
!  Following the fixed portion, the verb name(s) are stored as a sequence
!  of ASCIC strings within an overall ASCIC string.  Or, the syntax name is
!  stored as a single ASCIC string.
! 
!  The routine or image reference is stored as follows:
! 	CLI routine	Routine name as ASCIC string.
! 	user routine	Longword routine address, then name as ASCIC string.
! 	image		Image specification as ASCIC string.
! 
!  The outputs list consists of a counted sequence of bytes.  Each byte
!  contains either the negative of the parameter number, or the qualifier
!  number.
! 
!  The prefix string is stored as an ASCIC string.
! 	T Y P E   B L O C K
! 	-------   ---------
!  A type block is used as the header of a chain of entity blocks that
!  describe type keywords.  There is one type block for each user-specified
!  type definition.
literal type_k_type = 1;                !  Only one kind of type block.
literal type_k_length = 16;             !  Length of fixed portion.
literal type_k_max_name = 32;           !  Maximum sizes of variable
literal type_k_max_prefix = 32;         !  portions.
literal type_S_type_block = 16;
macro type_w_size = 0,0,16,0 %;         !  All blocks have a standard
macro type_b_type = 2,0,8,0 %;          !  header which is defined
macro type_b_subtype = 3,0,8,0 %;       !  up above.
macro type_w_flags = 4,0,16,0 %;
macro type_w_tro_count = 6,0,16,0 %;
macro type_l_keywords = 8,0,32,1 %;     !  TRO of first keyword
!  entity block.
macro type_w_name = 12,0,16,0 %;        !  BRO of type name.
macro type_w_prefix = 14,0,16,0 %;      !  BRO of prefix string.
macro type_z_VARIABLE = 16,0,0,0 %;     !  Beginning of variable part.
!  Folowing the fixed portion, the type name is stored as an ASCIC string.
!  So is the prefix string.
! 	E N T I T Y   B L O C K
! 	-----------   ---------
!  An entity block is used to define each parameter, qualifier, and data
!  type keyword.  These blocks are linked off of the command block for
!  the verb, in the case of parameters and qualifiers, or off of a type
!  block, in the case of type keywords.
literal ent_K_PARAMETER = 1;            !  Parameter definition.
literal ent_k_qualifier = 2;            !  Qualifier definition.
literal ent_k_keyword = 3;              !  Keyword definition.
literal ent_m_val = 1;
literal ent_m_neg = 2;
literal ent_m_deftrue = 4;
literal ent_m_batdef = 8;
literal ent_m_valreq = 16;
literal ent_m_list = 32;
literal ent_m_concat = 64;
literal ent_m_impcat = 128;
literal ent_m_verb = 256;
literal ent_m_parm = 512;
literal ent_m_mcroptdelim = 1024;
literal ent_m_mcrignore = 2048;
literal ent_k_user_defined = 0;         !  Defined by user.
literal ent_k_infile = 1;               !  Input file spec.
literal ent_k_outfile = 2;              !  Output file spec.
literal ent_k_number = 3;               !  Decimal integer.
literal ent_k_privilege = 4;            !  Privilege keyword.
literal ent_k_datetime = 5;             !  Date/time.
literal ent_k_protection = 6;           !  Protection spec.
literal ent_k_process = 7;              !  Process name.
literal ent_k_inlog = 8;                !  Input logical name.
literal ent_k_outlog = 9;               !  Output logical name.
literal ent_k_insym = 10;               !  Input symbol name.
literal ent_k_outsym = 11;              !  Output symbol name.
literal ent_k_node = 12;                !  DECnet node spec.
literal ent_k_device = 13;              !  Node/device spec.
literal ent_k_dir = 14;                 !  Node/device/directory spec.
literal ent_k_uic = 15;                 !  UIC spec.
literal ent_k_restofline = 16;          !  Rest of command line.
literal ent_k_parenvalue = 17;          !  Parenthesized value.
literal ent_k_deltatime = 18;           !  Delta time only.
literal ent_k_quotedstring = 19;        !  String, and retain quotes.
literal ent_k_file = 20;                !  Any file spec.
literal ent_k_expression = 21;          !  General DCL expression.
literal ent_k_test1 = 22;               !  Three hooks for testing
literal ent_k_test2 = 23;               !  new data types before
literal ent_k_test3 = 24;               !  adding them officially.
literal ent_k_acl = 25;                 !  ACL spec.
literal ent_k_max_valtype = 25;
literal ent_k_length = 30;              !  Length of fixed portion.
literal ent_k_max_name = 32;            !  Maximum sizes of variable
literal ent_k_max_label = 32;           !  portions.
literal ent_k_max_prompt = 32;
literal ent_k_max_defval = 96;
literal ent_S_entity_block = 30;
macro ent_w_size = 0,0,16,0 %;          !  All blocks have a standard
macro ent_b_type = 2,0,8,0 %;           !  header which is defined
macro ent_b_subtype = 3,0,8,0 %;        !  up above.
macro ent_w_flags = 4,0,16,0 %;
macro ent_v_val = 4,0,1,0 %;            !  Can take a value.
macro ent_v_neg = 4,1,1,0 %;            !  Can be negated with "NO".
macro ent_v_deftrue = 4,2,1,0 %;        !  Present by default.
macro ent_v_batdef = 4,3,1,0 %;         !  Present by default if batch.
macro ent_v_valreq = 4,4,1,0 %;         !  A value is required.
macro ent_v_list = 4,5,1,0 %;           !  Can be a list of values.
macro ent_v_concat = 4,6,1,0 %;         !  Can be concatenated list.
macro ent_v_impcat = 4,7,1,0 %;         !  Implicit concantenated list
macro ent_v_verb = 4,8,1,0 %;           !  Global placement.
macro ent_v_parm = 4,9,1,0 %;           !  Local placement.
macro ent_v_mcroptdelim = 4,10,1,0 %;   !  MCR SET UIC kludge.
macro ent_v_mcrignore = 4,11,1,0 %;     !  MCR ignores this entity.
!  Both means positional.
!  (old CLI interface only).
macro ent_w_tro_count = 6,0,16,0 %;
macro ent_l_next = 8,0,32,1 %;          !  TRO of next entity block
!  in chain.
macro ent_l_syntax = 12,0,32,1 %;       !  TRO of syntax change
!  command block.
macro ent_l_user_type = 16,0,32,1 %;    !  TRO of type block for
!  user-defined type.
macro ent_b_number = 20,0,8,0 %;        !  Entity number.  CLI should
!  only use for parameters.
macro ent_b_valtype = 21,0,8,0 %;       !  Value type.
macro ent_w_name = 22,0,16,0 %;         !  BRO of entity name.
macro ent_w_label = 24,0,16,0 %;        !  BRO of label used to
!  retrieve entity.
macro ent_w_prompt = 26,0,16,0 %;       !  BRO of parameter prompt.
macro ent_w_defval = 28,0,16,0 %;       !  BRO of default value(s).
macro ent_z_VARIABLE = 30,0,0,0 %;      !  Beginning of variable part.
!  The entity name, label, prompt, and default values appear after the fixed
!  portion of the entity block.  They are stored as ASCIC strings.  The
!  default values are stored as a sequence of ASCIC strings within the
!  overall ASCIC string.
! 	E X P R E S S I O N   B L O C K
! 	-------------------   ---------
!  An expression block is used to represent, within a boolean expression,
!  one operator and its operands.  The operands are themselves expression
!  blocks, either subexpressions or paths.  Paths represent the hierarchical
!  path to an entity whose presence is to be determined.
literal exp_k_path = 1;                 !  Entity path.
literal exp_k_not = 2;                  !  Boolean NOT operator.
literal exp_k_any2 = 3;                 !  Boolean ANY2 function.
literal exp_k_and = 4;                  !  Boolean AND operator.
literal exp_k_or = 5;                   !  Boolean OR operator.
literal exp_k_xor = 6;                  !  Boolean XOR operator.
literal exp_k_neg = 7;                  !  Boolean NEG operator.
literal exp_k_length = 8;               !  Length of fixed portion.
literal exp_k_max_path_entities = 8;    !  Maximum number of entities
!  in a path.
literal exp_S_expression_block = 8;
macro exp_w_size = 0,0,16,0 %;          !  All blocks have a standard
macro exp_b_type = 2,0,8,0 %;           !  header which is defined
macro exp_b_subtype = 3,0,8,0 %;        !  up above.
macro exp_w_flags = 4,0,16,0 %;
macro exp_w_tro_count = 6,0,16,0 %;
macro exp_l_operand_list = 8,0,0,0 %;   !  A TRO for each of the
!  operands or path entities.
