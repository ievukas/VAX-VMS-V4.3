MODULE PAS$FINDK ( %TITLE 'FINDK procedure'
		IDENT = '1-003'		! File: PASFINDK.B32 Edit: SBL1003
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains PAS$FINDK, which implements the
!	VAX-11 Pascal FINDK procedure.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 24-February-1982
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 24-February-1982
! 1-002 - Store length word for FILE OF VARYING.  FT3 QAR 006  SBL 31-Aug-1982
! 1-003 - Turn off RAB$V_NLK.  SPR 11-55690 SBL 8-Apr-1983
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$FINDK: NOVALUE;				! Do a FINDK

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!

%SBTTL 'PAS$FINDK - FINDK procedure'
GLOBAL ROUTINE PAS$FINDK (
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	KEY_NUMBER,					! Key number
	KEY_VALUE: REF BLOCK [, BYTE],			! Key value 
	MATCH_TYPE: BYTE,				! Match type
	ERROR						! Unwind address if error
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	PAS$FINDK implements the VAX-11 Pascal FINDK procedure.  It
!	finds a record in an indexed file by key and does a GET.
!
! CALLING SEQUENCE:
!
!	CALL PAS$FINDK (PFV.mr.r, KEY_NUMBER.rl.v, 
!		KEY_VALUE.rx.ds, MATCH_TYPE.rbu.v [, ERROR.j.r])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	KEY_NUMBER	- The number of the key to be searched.
!
!	KEY_VALUE	- The value of the key to look for, passed by
!			  descriptor.  Valid datatypes are BU, WU, L
!			  LU, T and Z. (Z is equivalent to T).
!
!	MATCH_TYPE	- Denotes the match type for the search.  The values
!			  are:
!				0 - Match on equal only
!				1 - Match on greater than or equal to
!				2 - Match on greater than only
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  if an error occurs.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	NONE
!
! SIDE EFFECTS:
!
!	Places file in Inspection mode
!
! SIGNALLED ERRORS:
!
!	FILNOTOPE - File not open
!	FILNOTKEY - File not opened for keyed access
!	KEYNOTDEF - Key "n" is not defined for this file
!	KEYVALINC - Key value is incompatible
!	FAIGETLOC - Failed to get locked record
!	ERRDURFIN - Error during FIND or FINDK
!	
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,		! File control block
	PFV_ADDR: VOLATILE,				! Enable argument
	UNWIND_ACT: VOLATILE,				! Enable argument
	ERROR_ADDR: VOLATILE,				! Enable argument
	KEYTYPES_VECTOR: REF VECTOR [, WORD],		! Vector of keytype masks and lengths
	KEYTYPES_MASK: BITVECTOR [16],			! Mask of allowable key types
	KEY_SIZE: WORD,					! Key size in bytes
	STATUS,						! Status from $GET
	LOCAL_KEY;					! Local key value

    BIND
	RAB = FCB: REF BLOCK [, BYTE];			! RMS RAB

    BUILTIN
	ACTUALCOUNT;

    LITERAL
	K_EQL = 0,					! Match on equal
	K_GEQ = 1,					! Match on greater or equal
	K_GTR = 2;					! Match on greater

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);

    IF ACTUALCOUNT () GEQU 5
    THEN
	ERROR_ADDR = .ERROR;				! Set unwind address

    !+
    ! Set PFV address enable argument.
    !-

    PFV_ADDR = PFV [PFV$R_PFV];

    !+
    ! Validate and lock PFV
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! Open file if it should be implicitly opened.
    !-

    IF NOT .PFV [PFV$V_VALID]
    THEN
	PAS$$OPEN_IMPLICIT (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! Verify that the file is open.
    !-

    IF NOT .PFV [PFV$V_OPEN]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTOPE,0);

    !+
    ! Verify that the file is opened for keyed access
    !-

    IF NOT .FCB [FCB$V_KEYED]
    THEN
	$PAS$IO_ERROR (PAS$_FILNOTKEY,0);

    !+
    ! Verify that the key number is valid for the file and
    ! set the key number.  Set access mode to keyed.
    !-

    IF .KEY_NUMBER GEQU .FCB [FCB$L_NKEYS]
    THEN
	$PAS$IO_ERROR (PAS$_KEYNOTDEF,1,.KEY_NUMBER);
    RAB [RAB$B_KRF] = .KEY_NUMBER;		! Set key number
    RAB [RAB$B_RAC] = RAB$C_KEY;		! Keyed access

    !+
    ! Get mask of allowable datatypes for this key.  KEYTYPES_VECTOR is
    ! a vector of longwords, one for each key in the file.  The first word of
    ! each longword is a bit mask, with each bit corresponding to a datatype
    ! code (0-15).  If a bit is set, that key datatype may be used to access
    ! the key.  The second word is the length of the key in bytes.
    !-

    KEYTYPES_VECTOR = .FCB [FCB$A_KEY_TYPES];
    KEYTYPES_MASK = .KEYTYPES_VECTOR [.KEY_NUMBER*2];

    !+
    ! Check to see if caller key type is allowed for this key.
    !-

    IF .KEY_VALUE [DSC$B_DTYPE] GTRU 15	! No datatype greater than 15 is allowed
    THEN
	$PAS$IO_ERROR (PAS$_KEYVALINC,1,.KEY_NUMBER);
    IF NOT .KEYTYPES_MASK [.KEY_VALUE [DSC$B_DTYPE]]
    THEN
	$PAS$IO_ERROR (PAS$_KEYVALINC,1,.KEY_NUMBER);

    !+
    ! Get key value.
    !-

    IF  .KEY_VALUE [DSC$B_DTYPE] EQL DSC$K_DTYPE_T OR
	.KEY_VALUE [DSC$B_DTYPE] EQL DSC$K_DTYPE_Z
    THEN
	BEGIN
	RAB [RAB$L_KBF] = .KEY_VALUE [DSC$A_POINTER];	! Key address
	IF .KEY_VALUE [DSC$W_LENGTH] GTRU 255
	THEN
	    $PAS$IO_ERROR (PAS$_KEYVALINC,1,.KEY_NUMBER);
	RAB [RAB$B_KSZ] = .KEY_VALUE [DSC$W_LENGTH];	! String size
	END
    ELSE
	BEGIN
	!+
	! Key value is numeric.  Expand it to a longword and store in
	! LOCAL_KEY.
	!-

	LOCAL
	    KEYVAL: REF BLOCK [, BYTE];

	KEYVAL = .KEY_VALUE [DSC$A_POINTER];	! Get key value address

	CASE .KEY_VALUE [DSC$B_DTYPE] FROM DSC$K_DTYPE_BU TO DSC$K_DTYPE_L OF
	    SET

	    [DSC$K_DTYPE_BU]:	LOCAL_KEY = .KEYVAL [0,0,8,0];
	    [DSC$K_DTYPE_WU]:	LOCAL_KEY = .KEYVAL [0,0,16,0];
	    [DSC$K_DTYPE_L, DSC$K_DTYPE_LU]:
	    			LOCAL_KEY = .KEYVAL [0,0,32,0];
	    [INRANGE, OUTRANGE]:
		$PAS$IO_ERROR (PAS$_INVARGPAS,0);

	    TES;

	!+
	! Check that key value is in proper range for file's key.
	!-

	KEY_SIZE = .KEYTYPES_VECTOR [(2*.KEY_NUMBER)+1];
	IF .KEY_SIZE EQL 1
	THEN
	    BEGIN
	    IF .LOCAL_KEY GTRU 255
	    THEN
		$PAS$IO_ERROR (PAS$_KEYVALINC,1,.KEY_NUMBER);
	    END
	ELSE IF .KEY_SIZE EQL 2
	THEN
	    BEGIN
	    IF .LOCAL_KEY GTRU 65535
	    THEN
		$PAS$IO_ERROR (PAS$_KEYVALINC,1,.KEY_NUMBER);
	    END
	ELSE IF .KEY_SIZE NEQ 4
	THEN
	    $PAS$IO_ERROR (PAS$_INVARGPAS,0);

	!+
	! Set key buffer address and size.
	!-

	RAB [RAB$L_KBF] = LOCAL_KEY;
	RAB [RAB$B_KSZ] = .KEY_SIZE;
	END;

    !+
    ! Set match type.
    !-

    RAB [RAB$V_KGE] = 0;
    RAB [RAB$V_KGT] = 0;

    CASE .MATCH_TYPE FROM K_EQL TO K_GTR OF
	SET

	[K_EQL]: ;			! Set equal
	[K_GEQ]: RAB [RAB$V_KGE] = 1;	! Set greater or equal
	[K_GTR]: RAB [RAB$V_KGT] = 1;	! Set greater than
	[OUTRANGE]:
	    $PAS$IO_ERROR (PAS$_INVARGPAS,0);

	TES;

    PFV [PFV$V_DFB] = 0;		! Undefine file buffer
    PFV [PFV$V_EOF_DEFINED] = 0;	! EOF(f) not defined
    FCB [FCB$V_EOF] = 0;		! Not at EOF
    RAB [RAB$V_NLK] = 0;		! Turn off NLK bit
    
    !+
    ! Get the record.
    !-

    STATUS = $PAS$RMS_OP ($GET (RAB=.RAB));

    !+
    ! If varying, put component length in first word of user buffer.
    ! Do this before we check for errors!
    !-

    IF .FCB [FCB$V_VARYING]
    THEN
	(.PFV [PFV$A_BUFFER])<0,16,0> = .RAB [RAB$W_RSZ];

    IF NOT .STATUS
    THEN
	BEGIN
	!+
	! If the status is "record not found", simply leave DFB clear.
	! Otherwise, signal the appropriate error.
	!-

	IF .STATUS NEQ RMS$_RNF
	THEN
	    IF .STATUS EQL RMS$_RLK	! Record locked?
	    THEN
		$PAS$IO_ERROR (PAS$_FAIGETLOC)	! Failed to get locked record
	    ELSE
		$PAS$IO_ERROR (PAS$_ERRDURFIN);	! Error during FIND or FINDK
	END
    ELSE
	PFV [PFV$V_DFB] = 1;

    !+
    ! Set Inspection mode
    ! Indicate successful completion
    ! Unlock the file
    !-

    FCB [FCB$V_INSPECTION] = 1;
    FCB [FCB$V_GENERATION] = 0;
    FCB [FCB$L_STATUS] = 0;
    PFV [PFV$V_LOCK] = 0;

    RETURN;

    END;					! End of routine PAS$FINDK

!<BLF/PAGE>

END						! End of module PAS$FINDK

ELUDOM
