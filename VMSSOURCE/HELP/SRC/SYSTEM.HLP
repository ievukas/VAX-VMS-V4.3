1 System_Services

  This help category provides an overview and the format
  of each of the VAX/VMS system services.


2 $ADJSTK
  The Adjust Outer Mode  Stack  Pointer  service  modifies  the  stack
  pointer  for a less privileged access mode.  This service is used by
  the operating system to modify a stack pointer for a less privileged
  access mode after placing arguments on the stack.

     Format:

       SYS$ADJSTK  [acmode] ,[adjust] ,newadr

     Arguments:

  acmode

  Access mode for which the stack pointer  is  to  be  adjusted.   The
  acmode argument is this longword value.  If not specified, a default
  value of 0 (kernel access mode) is used.

  adjust

  Signed adjustment value to be used to modify the value specified  by
  the  newadr  argument.   The  adjust  argument is a signed longword,
  which is the adjustment value.

  newadr

  Value that $ADJUST is to adjust.  The newadr argument is the address
  of  this  longword  value.   The value specified by this argument is
  both read and written by $ADJSTK.  $ADJSTK reads the value specified
  and  adjusts  it by the value of the adjust argument (if specified).
  After this adjustment is made, $ADJSTK  writes  the  adjusted  value
  back  into the longword specified by newadr and then loads the stack
  pointer with the adjusted value.
2 $ADJWSL
  The Adjust Working Set Limit service  adjusts  a  process's  current
  working  set  limit by the specified number of pages and returns the
  new value to the  caller.   The  working  set  limit  specifies  the
  maximum  number  of  process  pages that may be resident in physical
  memory.

     Format:

       SYS$ADJWSL  [pagcnt] [,wsetlm]

     Arguments:

  pagcnt

  Signed adjustment value specifying the number of pages  to  add  (if
  positive)  or  subtract  (if  negative) from the current working set
  limit.  The pagcnt argument is this signed longword value.

  wsetlm

  Value of the working set limit, returned  by  $ADJWSL.   The  wsetlm
  argument is the address of this longword value.  The wsetlm argument
  specifies the newly adjusted value if pagcnt was specified,  and  it
  specifies the old, unadjusted value if pagcnt was not specified.
2 $ALLOC
  The Allocate Device service allocates a device for exclusive use  by
  a  process  and its subprocesses.  No other process can allocate the
  device or assign channels to it until the image that  called  $ALLOC
  exits  or  explicitly  deallocates  the  device  with the Deallocate
  Device ($DALLOC) service.

     Format:

       SYS$ALLOC  devnam [,phylen] [,phybuf] [,acmode] [,flags]

     Arguments:

  devnam

  Device name of the device to be allocated.  The devnam  argument  is
  the  address of a character string descriptor pointing to the device
  name string.

  phylen

  Word into which $ALLOC writes the length of the device  name  string
  for  the device it has allocated.  The phylen is the address of this
  word.

  phybuf

  Buffer into which $ALLOC writes  the  device  name  string  for  the
  device  it  has allocated.  The phybuf is the address of a character
  string descriptor pointing to this buffer.

  acmode

  Access mode to be associated with the allocated device.  The  acmode
  argument is a longword containing the access mode.

  flags

  Longword  of status flags indicating whether to interpret the devnam
  argument as type of the device to be allocated. Only one flag exists,
  bit 0.  When  it  is  set,  the  $ALLOC  service allocates the first 
  available device having the type specified in the devnam argument.
2 $ASCEFC
  The Associate Common Event  Flag  Cluster  service  causes  a  named
  common  event  flag  cluster to be associated with a process for the
  execution of the current image and to be  assigned  a  process-local
  cluster number for use with other event flag services.  If the named
  cluster does not exist but the process has suitable  privilege,  the
  service creates the cluster.

     Format:

       SYS$ASCEFC  efn ,name [,prot] [,perm]

     Arguments:

  efn

  Number of any event flag contained within the desired  common  event
  flag  cluster.  The efn argument is a longword value specifying this
  number.

  name

  Name of the common event flag cluster with which to associate.   The
  name  argument  is  the  address  of  a  character string descriptor
  pointing to this name string.

  prot

  Protection specifier that allows or disallows access to  the  common
  event  flag  cluster  by processes with the same UIC group number as
  the creating process.  The prot argument is a longword value,  which
  is interpreted as Boolean.

  perm

  Permanent specifier that marks a common event flag cluster as either
  permanent  or  temporary.   The  perm  argument is a longword value,
  which is interpreted as Boolean.
2 $ASCTIM
  The Convert Binary Time to ASCII String service converts an absolute
  or delta time from 64-bit system time format to an ASCII string.

     Format:

       SYS$ASCTIM  [timlen] ,timbuf [,timadr] [,cvtflg]

     Arguments:

  timlen

  Length (in bytes) of the ASCII  string  returned  by  $ASCTIM.   The
  timlen argument is the address of a word containing this length.

  timbuf

  Buffer into which $ASCTIM  writes  the  ASCII  string.   The  timbuf
  argument is the address of a character string descriptor pointing to
  the buffer.

  timadr

  Time value that $ASCTIM is to convert.  The timadr argument  is  the
  address of this 64-bit time value.  A positive time value represents
  an absolute time.  A negative time value represents  a  delta  time.
  If a delta time is specified, it must be less than 10,000 days.

  cvtflg

  Conversion indicator specifying which date and time  fields  $ASCTIM
  should  return.   The  cvtflg argument is a longword value, which is
  interpreted as Boolean.  A value of 1 specifies that $ASCTIM  should
  return  only  the  hour,  minute,  second,  and  hundredth of second
  fields.  A value of 0 (the default) specifies  that  $ASCTIM  should
  return the full date and time.
2 $ASSIGN
  The Assign I/O Channel service (1) provides a process  with  an  I/O
  channel so that input/output operations can be performed on a device
  or (2) establishes a logical link with a remote node on a network.

     Format:

       SYS$ASSIGN  devnam ,chan [,acmode] [,mbxnam]

     Arguments:

  devnam

  Name of the device to which $ASSIGN is to  assign  a  channel.   The
  devnam  argument  is  the  address  of a character string descriptor
  pointing to the device name string.

  chan

  Number of the channel that is assigned.  The chan  argument  is  the
  address of a word into which $ASSIGN writes the channel number.

  acmode

  Access mode to be associated with the channel.  The acmode  argument
  specifies  the access mode.  The most privileged access mode used is
  the access mode of the caller.  I/O operations on  the  channel  can
  only be performed from equal and more privileged access modes.

  mbxnam

  Logical name of the mailbox to be associated with the  device.   The
  mbxnam  argument  is  the  address  of a character string descriptor
  pointing to the logical name string.
2 $BINTIM
  The Convert ASCII String to Binary Time service  converts  an  ASCII
  string  to an absolute or delta time value in the system 64-bit time
  format suitable for input to the Set  Timer  ($SETIMR)  or  Schedule
  Wakeup ($SCHDWK) services.

     Format:

       SYS$BINTIM  timbuf ,timadr

     Arguments:

  timbuf

  The timbuf argument specifies the  address  of  a  character  string
  descriptor  pointing  to  the VAX/VMS time string.  The VAX/VMS time
  string specifies the absolute or  delta  time  to  be  converted  by
  $BINTIM.   The  VAX/VMS  Data  Type Table describes the VAX/VMS time
  string.

  timadr

  The timadr argument is the address of the  VAX/VMS  quadword  system
  time, which receives the converted time.
2 $BRKTHRU
  The Breakthrough service sends a message to one or more terminals.

  The $BRKTHRU service completes asynchronously; that is,  it  returns
  to  the  caller  after queueing the message request, without waiting
  for the message to be written to the specified terminal(s).

  For  synchronous  completion,  use   the   Breakthrough   and   Wait
  ($BRKTHRUW)  service.   The  $BRKTHRUW  service  is identical to the
  $BRKTHRU service in every way except that $BRKTHRUW returns  to  the
  caller after the message is written to the specified terminal(s).

  For additional information about system service completion, refer to
  the Synchronize ($SYNCH) service and to Section 2.5 in Part I.

  The $BRKTHRU service supersedes  the  Broadcast  ($BRDCST)  service.
  New  programs  should  be  written  using $BRKTHRU, and old programs
  using $BRDCST should be converted to use $BRKTHRU as convenient.

     Format:

       SYS$BRKTHRU  [efn] ,msgbuf [,sendto] [,sndtyp] [,iosb]
                  [,carcon]
                  [,flags] [,reqid] [,timout] [,astadr] [,astprm] 

       Arguments:

  efn

  Number of the event flag to be set when the message has been written
  to  the specified terminal(s).  The efn argument is the address of a
  longword containing this number.

  msgbuf

  Message text to be sent to the specified  terminal(s).   The  msgbuf
  argument  is  the  address  of a descriptor pointing to this message
  text.

  sendto

  Name of a single device (terminal) or single username  to  which  to
  send  the  message.   The  sendto  argument  is  the  address  of  a
  descriptor pointing to this name.

  sndtyp

  Terminal type to which $BRKTHRU is to send the message.  The  sndtyp
  argument is a longword value specifying the terminal type.

  iosb

  I/O status block that is to receive  the  final  completion  status.
  The iosb is the address of this quadword block.

  carcon

  Carriage control specifier indicating the carriage control  sequence
  that   is   to  follow  the  message  that  $BRKTHRU  sends  to  the
  terminal(s).  The carcon  argument  is  a  longword  containing  the
  carriage control specifier.

  flags

  Flag bit mask specifying options for the  $BRKTHRU  operation.   The
  flags  argument  is  a longword value that is the logical OR of each
  desired flag option.

  reqid

  Class requestor identification, which  identifies  to  $BRKTHRU  the
  application (or image) that is calling $BRKTHRU.  The reqid argument
  is this longword identification value.

  timout

  Timeout value, which is the  number  of  seconds  that  must  elapse
  before an attempted write by $BRKTHRU to a terminal is considered to
  have failed.   The  timout  argument  is  this  longword  value  (in
  seconds).

  astadr

  AST service routine to be  executed  after  $BRKTHRU  has  sent  the
  message  to  the  specified terminal(s).  The astadr argument is the
  address of the entry mask of this routine.

  astprm

  AST parameter to be passed to  the  AST  routine  specified  by  the
  astadr  argument.   The  astprm  argument  specifies  this  longword
  parameter.
2 $BRKTHRUW
  The Breakthrough and Wait service sends a message  to  one  or  more
  terminals.

  The $BRKTHRUW service operates synchronously; that is, it returns to
  the  caller  after  the  message  has  been  sent  to  the specified
  terminal(s).

  For  asynchronous  operations,  use  the   Breakthrough   ($BRKTHRU)
  service;  $BRKTHRU  returns to the caller after queueing the message
  request, without waiting for the message to be delivered.

  In all other respects, $BRKTHRUW is identical to $BRKTHRU.  Refer to
  the  documentation  of  $BRKTHRU for all other information about the
  $BRKTHRUW service.

  For additional information about system service completion, refer to
  the documentation of the Synchronize ($SYNCH) service and to Section
  2.5 in Part I.

  The  $BRKTHRU  and  $BRKTHRUW  services  supersede   the   Broadcast
  ($BRDCST)  service.   New  code  should be written using $BRKTHRU or
  $BRKTHRUW, and old code using $BRDCST should  be  converted  to  use
  $BRKTHRU  or  $BRKTHRUW  as  convenient.  $BRDCST is now an obsolete
  system service and will no longer be enhanced.

     Format:

       SYS$BRKTHRUW  [efn] ,msgbuf [,sendto] [,sndtyp] [,iosb]
                  [,carcon] [,flags] [,reqid] [,timout] [,astadr]
                  [,astprm] 

2 $CANCEL
  The Cancel I/O on Channel service cancels all pending I/O requests on
  a specified channel.  In general, this includes all I/O requests
  that are queued as well as the request currently in progress.     

     Format:

       SYS$CANCEL  chan


      ARGUMENT

  chan

  I/O channel on which I/O is to be canceled.  The chan argument is  a
  longword containing the channel number.
2 $CANEXH
  The Cancel Exit Handler service deletes an exit control  block  from
  the  list  of  control  blocks  for  the  calling access mode.  Exit
  control blocks are declared by the Declare  Exit  Handler  ($DCLEXH)
  service  and  are  queued  according  to  access  mode  in a last-in
  first-out order.

     Format:

       SYS$CANEXH  [desblk]

     ARGUMENT

  desblk

  Control block describing the  exit  handler  to  be  canceled.   The
  desblk  is  the  address  of  this  control block.  If desblk is not
  specified or is specified as 0, all exit control blocks are canceled
  for the current access mode.
2 $CANTIM
  The Cancel Timer Request service cancels all or a selected subset of
  the  Set  Timer  requests  previously  issued  by  the current image
  executing in a  process.   Cancellation  is  based  on  the  request
  identification  specified  in  the  Set Timer ($SETIMR) service.  If
  more  than  one  timer  request   was   given   the   same   request
  identification, they are all canceled.

     Format:

       SYS$CANTIM  [reqidt] [,acmode]

     Arguments:

  reqidt

  Request identification of the timer request(s) to be canceled.   The
  reqidt  argument  is  a longword containing this identification.  If
  reqidt is specified as 0  (the  default),  all  timer  requests  are
  canceled.

  acmode

  Access mode of the request(s) to be canceled.  The  acmode  argument
  is a longword containing the access mode.  The $PSLDEF macro defines
  the following symbols for the four access modes:


       Symbol         Access mode

       PSL$C_KERNEL   Kernel mode
       PSL$C_EXEC     Executive mode
       PSL$C_SUPER    Supervisor mode
       PSL$C_USER     User mode
2 $CANWAK
  The Cancel Wakeup service removes all scheduled wake-up requests for
  a  process  from the timer queue, including those made by the caller
  or by other processes.  Scheduled wake-up requests are made with the
  Schedule Wakeup ($SCHDWK) service.

     Format:

       SYS$CANWAK  [pidadr] [,prcnam]

     Arguments:

  pidadr

  Process identification (PID) of the process for which wakeups are to
  be canceled.  The pidadr is the address of a longword specifying the
  PID.

  prcnam

  Name of the process for which  wakeups  are  to  be  canceled.   The
  prcnam  argument  is  the  address  of a character string descriptor
  pointing to the process name string.
2 $CLREF
  The Clear Event Flag service clears (sets to 0) an event flag  in  a
  local or common event flag cluster.

     Format:

       SYS$CLREF  efn

     Arguments:

  efn

  Number of the event flag to be  cleared.   The  efn  argument  is  a
  longword containing this number.
2 $CMEXEC
  The Change to Executive Mode service changes the access mode of  the
  calling process to executive mode.  This service allows a process to
  change its access mode to executive, execute  a  specified  routine,
  and  then  return  to  the access mode in effect before the call was
  issued.

     Format:

       SYS$CMEXEC  routin [,arglst]

     Arguments:

  routin

  Routine to be executed while the process is in executive mode.   The
  routin argument is the address of the entry point to this routine.

  arglst

  Argument list to be passed to the routine specified  by  the  routin
  argument.  The arglst argument is the address of this argument list.
2 $CMKRNL
  The Change to Kernel Mode service changes the  access  mode  of  the
  calling  process  to  kernel mode.  This service allows a process to
  change its access mode to kernel, execute a specified  routine,  and
  then return to the access mode in effect before the call was issued.

     Format:

       SYS$CMKRNL  routin [,arglst]

     Arguments:

  routin

  Routine to be executed while the process is  in  kernel  mode.   The
  routin argument is the address of the entry point to this routine.

  arglst

  Argument list to be passed to the routine specified  by  the  routin
  argument.  The arglst argument is the address of this argument list.
2 $CNTREG
  The Contract Program/Control  Region  service  deletes  a  specified
  number  of  pages  from  the  current  end of the program or control
  region of a process's virtual  address  space.   The  deleted  pages
  become inaccessible, and references to them cause access violations.

     Format:

       SYS$CNTREG  pagcnt [,retadr] [,acmode] [,region]

     Arguments:

  pagcnt

  Number of pages to be deleted from the current end of the program or
  control  region.   The pagcnt argument is a longword specifying this
  number.

  retadr

  Starting and ending pages of the deleted area.  The retadr  argument
  is  the  address  of  a  two-longword  array  to receive the virtual
  addresses of the starting page and ending page of the deleted area.

  acmode

  Access mode of the owner of the pages to  be  deleted.   The  acmode
  argument  is  a  longword  containing  the access mode.  The $PSLDEF
  macro defines the following symbols for the four access modes:


       Symbol         Access mode

       PSL$C_KERNEL   Kernel mode
       PSL$C_EXEC     Executive mode
       PSL$C_SUPER    Supervisor mode
       PSL$C_USER     User mode

  region

  Indicator specifying which region of memory (P0  or  P1)  is  to  be
  contracted.   The  region  argument  is  a  longword  containing the
  indicator.  A value of 0 (the default) indicates  that  the  program
  region  (P0  region) is to be contracted, and a value of 1 indicates
  that the control region (P1 region) is to be contracted.
2 $CREMBX
  The Create Mailbox and Assign  Channel  service  creates  a  virtual
  mailbox  device  named MBAn:  and assigns an I/O channel to it.  The
  system provides the unit number, n, when it creates the mailbox.  If
  a  mailbox  with  the  specified  name  already  exists, the $CREMBX
  service assigns a channel to the existing mailbox.

     Format:

       SYS$CREMBX  [prmflg] ,chan [,maxmsg] [,bufquo] [,promsk]
                  [,acmode] [,lognam] 

     Arguments:

  prmflg

  Indicator specifying whether the created mailbox is to be  permanent
  or  temporary.  The prmflg argument is a longword value.  A value of
  1 specifies a permanent mailbox; a value of 0, which is the default,
  specifies a temporary mailbox.  Any other values result in an error.

  chan

  Channel number  assigned  by  $CREMBX  to  the  mailbox.   The  chan
  argument  is  the  address  of  a word into which $CREMBX writes the
  channel number.

  maxmsg

  Maximum size (in bytes) of  a  message  that  can  be  sent  to  the
  mailbox.   The  maxmsg  argument is a longword value containing this
  size.  If maxmsg is not specified or  is  specified  as  0,  VAX/VMS
  provides a default value.

  bufquo

  Number of bytes of system dynamic memory that can be used to  buffer
  messages  sent  to  the  mailbox.  The bufquo argument is a longword
  value containing this number.  If bufquo  is  not  specified  or  is
  specified as 0, VAX/VMS provides a default value.

  promsk

  Protection mask to be associated  with  the  created  mailbox.   The
  promsk  argument  is  a longword value that is the combined value of
  the bits set in the protection mask.  Cleared bits grant access  and
  set  bits  deny  access to each of the four classes of user:  world,
  group, owner, and  system.   The  following  diagram  depicts  these
  protection bits.

  acmode

  Access mode to be associated with the channel to which  the  mailbox
  is  assigned.   The  acmode  argument  is  a longword containing the
  access mode.  The $PSLDEF macro defines the  following  symbols  for
  the four access modes:


       Symbol         Access mode

       PSL$C_KERNEL   Kernel mode
       PSL$C_EXEC     Executive mode
       PSL$C_SUPER    Supervisor mode
       PSL$C_USER     User mode

  lognam

  Logical name to be assigned to the mailbox.  The lognam argument  is
  the address of a character string descriptor pointing to the logical
  name string.
2 $CREPRC
  The Create Process service creates a subprocess or detached  process
  on behalf of the calling process.

     Format:

       SYS$CREPRC  [pidadr] ,image [,input] [,output] [,error]
                  [,prvadr] [,quota] [,prcnam] [,baspri] [,uic]
                  [,mbxunt] [,stsflg] 

     Arguments:

  pidadr

  Process identification (PID) of  the  newly  created  process.   The
  pidadr  argument  is  the  address  of a longword into which $CREPRC
  writes the PID.

  image

  Name of the image to be activated in the newly created process.  The
  image  argument  is  the  address  of  a character string descriptor
  pointing to the file specification of the image.

  input

  Equivalence name to be associated with the logical name SYS$INPUT in
  the  logical  name table of the created process.  The input argument
  is the address of a character  string  descriptor  pointing  to  the
  equivalence name string.

  output

  Equivalence name to be associated with the logical  name  SYS$OUTPUT
  in  the  logical  name  table  of  the  created process.  The output
  argument is the address of a character string descriptor pointing to
  the equivalence name string.

  error

  Equivalence name to be associated with the logical name SYS$ERROR in
  the  logical  name table of the created process.  The error argument
  is the address of a character  string  descriptor  pointing  to  the
  equivalence name string.

  prvadr

  Privileges to be given to the created process.  The prvadr  argument
  is the address of a quadword bit vector wherein each bit corresponds
  to a privilege; setting a bit gives the privilege.

  quota

  Process quotas to be established  for  the  created  process;  these
  quotas  limit  the  created  process's use of system resources.  The
  quota argument is the address of a list of quota descriptors,  where
  each  quota descriptor consists of a 1-byte quota name followed by a
  longword that specifies the desired value for that quota.  The  list
  of   quota   descriptors   is   terminated   by  the  symbolic  name
  PQL$_LISTEND.

  prcnam

  Process name to be assigned to the created process.  The  prcnam  is
  the  address  of  a  character string descriptor pointing to a 1- to
  15-character process name string.

  baspri

  Base priority to be assigned to the  created  process.   The  baspri
  argument  is  a longword value in the range 0 to 31, where 31 is the
  highest possible priority and 0 is the  lowest.   Normal  priorities
  are  in  the range 0 through 15, and real-time priorities are in the
  range 16 through 31.

  uic

  User identification  code  (UIC)  to  be  assigned  to  the  created
  process.  The uic argument is a longword value containing the UIC.

  mbxunt

  Unit number of a mailbox to receive a termination message  when  the
  created  process  is  deleted.   The  mbxunt  argument is a longword
  containing this number.

  stsflg

  Options selected for the created process.  The stsflg argument is  a
  longword  bit  vector  wherein a bit corresponds to an option.  Only
  bits 0 to 10 are used; bits 11 to 31 are reserved and must be 0.
2 $CRETVA
  The Create Virtual Address Space service adds a range of demand-zero
  allocation  pages  to  a  process's  virtual  address  space for the
  execution of the current image.

     Format:

       SYS$CRETVA  inadr [,retadr] [,acmode]

     Arguments:

  inadr

  Address of a two-longword array containing the starting  and  ending
  virtual  addresses  of the pages to be created.  If the starting and
  ending virtual addresses are the same, a  single  page  is  created.
  Only  the  virtual  page  number portion of the virtual addresses is
  used; the low-order 9 bits are ignored.

  retadr

  Address of a two-longword array to receive the starting  and  ending
  virtual addresses of the pages actually created.

  acmode

  Access mode and protection for the new pages.  The  acmode  argument
  is a longword containing the access mode.  The $PSLDEF macro defines
  the following symbols for the four access modes:


       Symbol         Access mode

       PSL$C_KERNEL   Kernel mode
       PSL$C_EXEC     Executive mode
       PSL$C_SUPER    Supervisor mode
       PSL$C_USER     User mode
2 $CRELNM
  The Create Logical Name service creates a logical name and specifies
  its equivalence name(s).

     Format:

       SYS$CRELNM  [attr] ,tabnam ,lognam [,acmode] ,itmlst

     Arguments:

  attr

  Attributes to  be  associated  with  the  logical  name.   The  attr
  argument  is  the  address  of  a longword bit mask specifying these
  attributes.

  tabnam

  Name of the table in which to create the logical name.   The  tabnam
  argument  is  the address of a descriptor that points to the name of
  this table.  This argument is required.

  lognam

  Name of the logical name to be created.  The lognam argument is  the
  address  of  a  descriptor  that  points to the logical name string.
  Logical name strings of logical  names  created  within  either  the
  system  or  process  directory  table  must  consist of alphanumeric
  characters, dollar signs, and underscores; the maximum length is  31
  characters.   The  maximum  length  of  logical name strings created
  within other tables is 255 characters with no  restrictions  on  the
  types of characters that can be used.  This argument is required.

  acmode

  Access mode to be associated with  the  logical  name.   The  acmode
  argument is the address of a byte that specifies the access mode.

  itmlst

  Item list describing the equivalence name(s) to be defined  for  the
  logical  name  and  information  to  be returned to the caller.  The
  itmlst argument is the address of a list of item  descriptors,  each
  of  which specifies information about an equivalence name.  The list
  of item descriptors is terminated by a longword of 0.  This argument
  is   required.    The   following  diagram  depicts  a  single  item
  descriptor:
2 $CRELNT
  The Create Logical Name Table service creates a  process-private  or
  shareable logical name table.

     Format:

       SYS$CRELNT  [attr] ,[resnam] ,[reslen] ,[quota] ,[promsk]
                  ,[tabnam] ,partab [,acmode] 

     Arguments:

  attr

  Attributes to affect the creation of the logical name table  and  to
  be  associated  with the newly created logical name table.  The attr
  argument is the address of a  longword  bit  mask  specifying  these
  attributes.

  resnam

  Name of the newly created logical name table, returned  by  $CRELNT.
  The  resnam argument is the address of a descriptor pointing to this
  name.  The name is a character string whose  maximum  length  is  31
  characters.

  reslen

  Length in bytes of the name of the newly created logical name table,
  returned  by  $CRELNT.  The reslen argument is the address of a word
  to receive this length.

  quota

  Maximum number of bytes of memory to be allocated for logical  names
  contained  in  this  logical  name table.  The quota argument is the
  address of a longword specifying this value.

  promsk

  Protection mask to be associated with the  newly  created  shareable
  logical  name  table.  The promsk argument is a word that contains a
  value that represents four 4-bit fields, where each field  describes
  the  type  of  access  allowed  for  system, owner, group, and world
  users.

  tabnam

  The name of the new logical name table.  The tabnam argument is  the
  address  of  a  character  string  descriptor  pointing to this name
  string.  Table names are contained in either the process  or  system
  directory          table          (LNM$PROCESS_DIRECTORY          or
  LNM$SYSTEM_DIRECTORY).Therefore  table   names   must   consist   of
  alphanumeric  characters, dollar signs, and underscores; the maximum
  length is 31 characters.

  partab

  Parent table  name.   The  partab  argument  is  the  address  of  a
  character  string descriptor pointing to this name string.  The only
  valid values for this argument are the names of the directory tables
  LNM$PROCESS_DIRECTORY  or LNM$SYSTEM_DIRECTORY.  SYSPRV privilege is
  required to specify the system directory table LNM$SYSTEM_DIRECTORY.
  This argument is required.

  acmode

  Access mode to be associated with the  newly  created  logical  name
  table.  The acmode argument is the address of a byte containing this
  access mode.  The $PSLDEF macro defines symbolic names for the  four
  access modes.
2 $CRMPSC
  The Create and Map Section service allows  a  process  to  associate
  (map) a section of its address space with (1) a specified section of
  a file  (a  disk  file  section)  or  (2)  with  specified  physical
  addresses represented by page frame numbers (a page frame section).

  This service also allows  the  process  to  create  either  type  of
  section,  and  to specify that that section be available only to the
  creating process (private section) or to all processes that  map  to
  it (global section).

     Format:

       SYS$CRMPSC [inadr] [,retadr] [,acmode] [,flags] [,gsdnam]
                  [,ident] 
                  [,relpag] [,chan] [,pagcnt] [,vbn] [,prot] [,pfc]

     Arguments:

  inadr

  Starting and ending virtual addresses into which the section  is  to
  be  mapped.   The  inadr  is  the  address  of  a two-longword array
  containing, in order, the starting and the  ending  process  virtual
  addresses.   Only  the  virtual  page number portion of each virtual
  address is used; the low-order 9 bits are ignored.

  retadr

  Starting and ending process virtual addresses into which the section
  was  actually  mapped  by  $CRMPSC.   The retadr is the address of a
  two-longword array containing, in order,  the  starting  and  ending
  process virtual addresses.

  acmode

  Access mode that is to be the owner of the pages created during  the
  mapping.   The  acmode  argument is a longword containing the access
  mode.  The $PSLDEF macro defines the following symbols for the  four
  access modes:


       Symbol         Access mode

       PSL$C_KERNEL   Kernel mode
       PSL$C_EXEC     Executive mode
       PSL$C_SUPER    Supervisor mode
       PSL$C_USER     User mode

  flags

  Flag mask specifying the type of section to be created or mapped to,
  as  well  as  its characteristics.  The flags argument is a longword
  bit vector wherein each bit corresponds  to  a  flag.   The  $SECDEF
  macro  defines a symbolic name for each flag.  The flags argument is
  constructed by performing a logical OR operation on the symbol names
  for  all  desired  flags.  The following lists each symbol name, its
  description, and the default value that it supersedes:

       Flag            Description


       SEC$M_GBL       Pages form a global  section.  The  default  is
                         private section.

       SEC$M_CRF       Pages are copy-on-reference. By default,  pages
                         are shared.

       SEC$M_DZRO      Pages are demand-zero pages. By  default,  they
                         are not zeroed when copied.

       SEC$M_EXPREG    Pages  are  mapped  into  the  first  available
                         space.  By default, pages are mapped into the
                         range specified by the inadr argument.

       SEC$M_WRT       Pages form a read/write  section.  By  default,
                         pages form a read-only section.

       SEC$M_PERM      Pages are  permanent.  By  default,  pages  are
                         temporary.

       SEC$M_PFNMAP    Pages form a page-frame  section.  By  default,
                         pages  form a disk-file section. Pages mapped
                         by using SEC$M_PFNMAP are not included in  or
                         charged  against  the  process's working set;
                         they are always  valid.  Do  not  lock  these
                         pages  in  the  working set by using $LKWSET;
                         this will result in a machine check.

       SEC$M_SYSGBL    Pages form a system global section. By default,
                         pages form a group global section.

       SEC$M_PAGFIL    Pages  form  a  global  page-file  section.  By
                         default, pages form a disk-file section.

       SEC$M_EXECUTE   Pages are mapped only if the caller has execute
                         access.  This  flag  is  valid  only (1) when
                         specified  from  executive  or  kernel   mode
                         access  and  (2)  when  the SEC$M_GBL flag is
                         also specified. By  default,  the  pages  are
                         mapped  regardless  of whether the caller has
                         execute access.

  gsdnam

  Name of the  global  section.   The  gsdnam  is  the  address  of  a
  character  string  descriptor pointing to this name string.  Section
  11.6.5.1  describes the format of this name string.

  ident

  Identification value specifying  the  version  number  of  a  global
  section,  and,  for processes mapping to an existing global section,
  the criteria for matching the identification.  The ident argument is
  the address of a quadword structure containing three fields.

  relpag

  Relative page number within the global section of the first page  in
  the  section  to  be  mapped.   The  relpag  argument  is a longword
  containing this page number.

  chan

  Number of the channel on which the file has been accessed.  The chan
  argument is a longword containing this number.

  pagcnt

  Number of pages in the section.  The pagcnt argument is  a  longword
  containing this number.

  vbn

  Virtual block number in the file that marks  the  beginning  of  the
  section.  The vbn argument is a longword containing this number.  If
  vbn is not specified or is specified as 0 (the default), the section
  is created beginning with the first virtual block in the file.

  prot

  Numeric value representing the protection mask to be applied to  the
  global  section.   This  value  is  ORed  with  the  protection mask
  associated with the file; if the  file  protection  does  not  allow
  access  to  a  particular  category  of user and the protection mask
  allows access, access is denied.

  pfc

  Page fault cluster size.  If specified, the cluster  size  indicates
  how  many  pages  are  to  be  brought into memory when a page fault
  occurs for a single page.  This argument is not  used  for  physical
  page  frame  sections  or  for  global  sections in memory shared by
  multiple processors.
2 $DACEFC
  The Disassociate Common Event  Flag  Cluster  service  releases  the
  calling process's association with a common event flag cluster.

     Format:

       SYS$DACEFC   efn

     Argument

  efn

  Number of any event flag in the common cluster to be  disassociated.
  The  efn  argument is a longword containing this number.  The number
  must be in the range of 64 through 95 for cluster 2, and 96  through
  127 for cluster 3.
2 $DALLOC
  The Deallocate Device service  deallocates  a  previously  allocated
  device.   The  issuing  process  relinquishes  exclusive  use of the
  device thus allowing other processes  to  assign  or  allocate  that
  device.

     Format:

       SYS$DALLOC   [devnam] [,acmode]

     Arguments:

  devnam

  Name of the device to be deallocated.  The devnam  argument  is  the
  address of a character string descriptor pointing to the device name
  string.  The string may be  either  a  physical  device  name  or  a
  logical  name.   If  it  is  a  logical name, it must translate to a
  physical device name.

  acmode

  Access mode on behalf of which the deallocation is to be  performed.
  The  acmode  argument is a longword containing the access mode.  The
  $PSLDEF macro defines the following  symbols  for  the  four  access
  modes:


       Symbol         Access mode

       PSL$C_KERNEL   Kernel mode
       PSL$C_EXEC     Executive mode
       PSL$C_SUPER    Supervisor mode
       PSL$C_USER     User mode
2 $DASSGN
  The Deassign I/O Channel service deassigns (releases) an I/O channel
  that was acquired using the Assign I/O Channel ($ASSIGN) service.

     Format:

       SYS$DASSGN   chan

     Argument

  chan

  Number of the I/O channel to be deassigned.  The chan argument is  a
  longword containing this number.
2 $DCLAST
  The Declare AST service queues an AST for the calling access mode or
  for a less privileged access mode.  For example, a routine executing
  in supervisor mode can declare an AST for either supervisor or  user
  mode.

     Format:

       SYS$DCLAST   astadr [,astprm] [,acmode]

     Arguments:

  astadr

  AST service routine to be executed.   The  astadr  argument  is  the
  address of the entry mask of this routine.

  astprm

  AST parameter to be passed to  the  AST  routine  specified  by  the
  astadr  argument.  The astprm argument is a longword containing this
  parameter.

  acmode

  Access mode  for  which  the  AST  is  to  be  declared.   The  most
  privileged  access  mode used is the access mode of the caller.  The
  resultant mode is the access mode for which the AST is declared.
2 $DCLCMH
  The Declare  Change  Mode  or  Compatibility  Mode  Handler  service
  specifies  the  address  of  a routine to receive control when (1) a
  Change Mode to User or Change Mode to  Supervisor  instruction  trap
  occurs, or (2) a compatibility mode fault occurs.

     Format:

       SYS$DCLCMH   addres [,prvhnd] [,type]

     Arguments:

  addres

  Routine  to  receive  control  when  a  change  mode   trap   or   a
  compatibility mode fault occurs.  The addres argument is the address
  of the entry mask to this routine.

  prvhnd

  Address of a previously declared handler.  The  prvhnd  argument  is
  the  address  of a longword containing the address of the previously
  declared handler.

  type

  Handler type indicator.  The type argument is a longword value.  The
  value  0 (the default) indicates that a change mode handler is to be
  declared for the access mode at which the  request  is  issued;  the
  value  1  specifies  that  a  compatibility  mode  handler  is to be
  declared.
2 $DLCEFC
  The Delete Common Event  Flag  Cluster  service  marks  a  permanent
  common  event  flag  cluster  for deletion.  The cluster is actually
  deleted when no more processes are associated with it.

     Format:

       SYS$DLCEFC  name

     Argument

  name

  Name of the common event flag  cluster  to  be  deleted.   The  name
  argument is the address of a character string descriptor pointing to
  the name of the cluster.
2 $DCLEXH
  The Declare Exit Handler service declares an exit  handling  routine
  that  will receive control when an image exits.  Image exit normally
  occurs when the image  currently  executing  in  a  process  returns
  control to the operating system.  Image exit may also occur when the
  Exit ($EXIT) or Force Exit ($FORCEX) services are called.

     Format:

       SYS$DCLEXH  desblk

     Argument

  desblk

  Exit handler control block.  The  desblk  is  the  address  of  this
  control  block.   This  control  block,  which  describes  the  exit
  handler, is depicted in the following diagram:
2 $DELLNM
  The Delete Logical Name service deletes all logical names  with  the
  specified name at the specified access mode or outer access mode, or
  it deletes all the logical names with the specified access  mode  or
  outer  access mode in a specified table.  If any logical names being
  deleted are also the names of logical name tables, then all  of  the
  logical  names  contained  within  those  tables  and  all  of their
  subtables are also deleted.

     Format:

       SYS$DELLNM tabnam [,lognam] [,acmode]

     Arguments:

  tabnam

  Name of a logical name table or name of a list of tables in which to
  search  for  the  logical  name  that  is to be deleted.  The tabnam
  argument is the address of a descriptor that  points  to  the  table
  name.  This argument is required.

  lognam

  Logical name to be deleted.  The lognam argument is the address of a
  descriptor that points to the logical name string.

  acmode

  Access mode to be used in the delete operation.  The acmode argument
  is  the  address of a byte containing this access mode.  The $PSLDEF
  macro defines symbolic names for the four access modes.
2 $DELMBX
  The Delete Mailbox service marks a permanent mailbox  for  deletion.
  The  actual  deletion  of  the mailbox and of its associated logical
  name assignment occur when no more I/O channels are assigned to  the
  mailbox.

     Format:

       SYS$DELMBX  chan

     Argument

  chan

  Number of the channel assigned to the mailbox that is to be deleted.
  The chan is a longword containing this number.
2 $DELPRC
  The Delete Process service allows a  process  to  delete  itself  or
  another process.

     Format:

       SYS$DELPRC  [pidadr] [,prcnam]

     Arguments:

  pidadr

  Process identification (PID) of the  process  to  be  deleted.   The
  pidadr argument is the address of a longword that contains the PID.

  prcnam

  Process name of the process  to  be  deleted.   The  prcnam  is  the
  address  of  a  character  string  descriptor  pointing  to  a 1- to
  15-character process name string.
2 $DELTVA
  The  Delete  Virtual  Address  Space  service  deletes  a  range  of
  addresses  from  a process's virtual address space.  Upon successful
  completion of the service, the deleted pages are  inaccessible,  and
  references to them cause access violations.

     Format:

       SYS$DELTVA  inadr [,retadr] [,acmode]

     Arguments:

  inadr

  Starting and ending virtual addresses of the pages  to  be  deleted.
  The   inadr   argument  is  the  address  of  a  two-longword  array
  containing, in order, the starting and the  ending  process  virtual
  addresses.   If  the  starting  and ending virtual addresses are the
  same, a single page  is  deleted.   Only  the  virtual  page  number
  portion  of  each  virtual address is used; the low-order 9 bits are
  ignored.

  retadr

  Starting and ending process virtual  addresses  of  the  pages  that
  $DELTVA  has  actually  deleted.   The  retadr  is  the address of a
  two-longword array containing, in order,  the  starting  and  ending
  process virtual addresses.

  acmode

  Access mode on behalf of which the service is to be performed.   The
  acmode argument is a longword containing the access mode.
2 $DEQ
  The Dequeue Lock Request service dequeues (unlocks)  granted  locks;
  dequeues  the  sublocks  of  a  lock;  or  cancels an ungranted lock
  request.  The calling process must have previously acquired the lock
  or  queued  the  lock  request  by  calling the Enqueue Lock Request
  ($ENQ) service.

  The $DEQ, $ENQ, $ENQW (Enqueue Lock Request and Wait),  and  $GETLKI
  (Get  Lock Information) services together provide the user interface
  to the VAX/VMS lock management facility.  Refer to the  descriptions
  of these other services and to Section 12 in Part I for additional
  information about lock management.

   
     Format:

       SYS$DEQ  [lkid] [,valblk] [,acmode] [,flags]

                  If lkid is not specified, the LCK$M_DEQALL flag in
                  the
                  flags argument must be specified. 

     Arguments:

  lkid

  Lock identification of the lock to be dequeued.  The  lkid  argument
  specifies this lock identification.

  valblk

  Lock value block for the resource associated with  the  lock  to  be
  dequeued.   The  valblk  argument is the address of the 16-byte lock
  value block.  This argument is not used when the  LCK$M_DEQALL  flag
  is specified.

  acmode

  Access mode of the lock to be dequeued.  The acmode  argument  is  a
  longword  containing the access mode.  The $PSLDEF macro defines the
  following symbols for the four access modes:


       Symbol         Access mode

       PSL$C_KERNEL   Kernel mode
       PSL$C_EXEC     Executive mode
       PSL$C_SUPER    Supervisor mode
       PSL$C_USER     User mode

  flags

  Flags specifying options for the $DEQ operation.  The flags argument
  is a longword bit mask that is the logical OR of each bit set, where
  each bit corresponds to an option.
2 $DGBLSC
  The Delete Global Section service marks an existing permanent global
  section  for  deletion.   The  actual deletion of the global section
  takes place when all processes that have mapped the  global  section
  have deleted the mapped pages.

     Format:

       SYS$DGBLSC  [flags] ,gsdnam [,ident]

     Arguments:

  flags

  Mask indicating global section characteristics.  The flags  argument
  is  a  longword value.  A value of 0 (the default) specifies a group
  global section; a value of SEC$M_SYSGBL specifies  a  system  global
  section.

  gsdnam

  Name of the global section to be deleted.  The gsdnam is the address
  of  a  character  string  descriptor  pointing  to this name string.
  Section 11.6.5.1  describes the format of this name string.

  ident

  Identification value specifying the version  number  of  the  global
  section  to be deleted and the matching criteria to be applied.  The
  ident argument is the address of  a  quadword  structure  containing
  three fields.
2 $DISMOU
  The Dismount Volume service dismounts a  mounted  volume  or  volume
  sets.

     Format:

       SYS$DISMOU  devnam [,flags]

     Arguments:

  devnam

  Device name of the device to be dismounted.  The devnam argument  is
  the  address of a character string descriptor pointing to the device
  name string.  The string may be either a physical device name  or  a
  logical  name.   If  it  is  a  logical name, it must translate to a
  physical device name.

  flags

  A longword bit vector specifying options for the dismount operation.
  The flags argument is a longword bit vector wherein a bit, when set,
  selects the corresponding option.  Each bit  has  a  symbolic  name;
  these names are defined by the $DMTDEF macro.  

2 $ENQ
  The  Enqueue  Lock  Request  service  queues  a  new  lock  or  lock
  conversion on a resource.

  The $ENQ service completes asynchronously; that is,  it  returns  to
  the  caller after queueing the lock request, without waiting for the
  lock to be either granted or converted.

  For synchronous completion, use the Enqueue Lock  Request  and  Wait
  ($ENQW) service.  The $ENQW service is identical to the $ENQ service
  in every way except that $ENQW returns to the caller when  the  lock
  is either granted or converted.

  For additional information about system service completion, refer to
  the Synchronize ($SYNCH) service and to Section 2.5 in Part I.

  The $ENQ, $ENQW, $DEQ (Dequeue Lock Request), and $GETLKI (Get  Lock
  Information)  services  together  provide  the user interface to the
  VAX/VMS lock management facility.   Refer  to  the  descriptions  of
  these  other  services  and to Section 12  in Part I for additional
  information about lock management.

     Format:

       SYS$ENQ [efn] ,lkmode ,lksb ,[flags] ,[resnam] ,[parid]
                  ,[astadr] ,[astprm] ,[blkast] ,[acmode] ,nullarg

     Arguments:

  efn

  Number of the event flag to be set when the lock  request  has  been
  granted.   The  efn argument is the address of a longword containing
  this number.

  lkmode

  Lock mode requested.  The lkmode argument is a  longword  specifying
  this lock mode.

  lksb

  Lock status block in which $ENQ writes the final  completion  status
  of  the  operation.   The lksb argument is the address of the 8-byte
  lock status block.

  flags

  Flags specifying options for the $ENQ operation.  The flags argument
  is a longword bit mask that is the logical OR of each bit set, where
  each bit corresponds to an option.

  resnam

  Name of the resource to be locked by this lock.  The resnam argument
  is  the  address  of  a character string descriptor pointing to this
  name.  The name string may be from 1 to 31 bytes in length.

  parid

  Lock identification of the parent lock.  The  parid  argument  is  a
  longword containing this identification value.

  astadr

  AST service routine to be executed when the lock is  either  granted
  or  converted.  The astadr argument is the address of the entry mask
  of this routine.

  astprm

  AST parameter to be passed to  the  AST  routine  specified  by  the
  astadr  argument.   The  astprm  argument  specifies  this  longword
  parameter.

  blkast

  Blocking AST routine to be called whenever this lock is granted  and
  is  blocking  any  other  lock requests.  The blkast argument is the
  address of the entry mask to this routine.

  acmode

  Access mode to be associated with the lock.  The acmode argument  is
  a  longword  containing  the access mode.  The $PSLDEF macro defines
  the following symbols for the four access modes:


       Symbol                           Access mode

       PSL$C_KERNEL                     Kernel mode
       PSL$C_EXEC                       Executive mode
       PSL$C_SUPER                      Supervisor mode
       PSL$C_USER                       User mode

  nullarg

  Place-holding argument.  This argument is reserved to DIGITAL.
2 $ENQW
  The Enqueue Lock Request  and  Wait  service  queues  a  lock  on  a
  resource.

  The $ENQW service completes synchronously; that is,  it  returns  to
  the caller when the lock has been either granted or converted.

  For asynchronous completion, use the  Enqueue  Lock  Request  ($ENQ)
  service; $ENQ returns to the caller after queueing the lock request,
  without waiting for the lock to be either granted or converted.

  In all other respects, $ENQW is identical to  $ENQ.   Refer  to  the
  documentation  of  $ENQ  for  all  other information about the $ENQW
  service.

  For additional information about system service completion, refer to
  the documentation of the Synchronize ($SYNCH) service and to Section
  2.5 in Part I.

  The $ENQ, $ENQW, $DEQ (Dequeue Lock Request), and $GETLKI (Get  Lock
  Information)  services  together  provide  the user interface to the
  VAX/VMS lock management facility.   Refer  to  the  descriptions  of
  these  other  services  and to Section 12  in Part I for additional
  information about lock management.

     Format:

       SYS$ENQW [efn] ,lkmode ,lksb ,[flags] ,[resnam] ,[parid]
                  ,[astadr] ,[astprm] ,[blkast] ,[acmode] ,nullarg
2 $ERAPAT
  The Get Security Erase Pattern service generates a security erase pattern.
  A user-written erase routine can then write this pattern into areas of 
  memory containing sensitive data that is no longer in use to prevent
  the inadvertent disclosure of the sensitive data.

     Format:
 
       SYS$ERAPAT type ,count  ,patadr


     Arguments:

  type

  Type of storage to be written over  with  the  erase  pattern.   The
  three  storage  types and their symbolic names (which are defined by
  the $ERADEF macro) follow:


       Storage type                     Symbolic name

       Main memory                      ERA$K_MEMORY
       Disk                             ERA$K_DISK
       Tape                             ERA$K_TAPE

  count

  Iteration count.  This argument specifies the number of  times  that
  $ERAPAT has been called in a single security erase operation.

  patadr

  Address of a longword into which the security erase pattern is to be
  written.
2 $EXIT
  The Exit service is used by the operating system to  initiate  image
  run-down  when  the  current image in a process completes execution.
  Control normally returns to the command interpreter.

     Format:

       SYS$EXIT  [code]

     Argument

  code

  Longword value to be saved in the process header as  the  completion
  status  of  the  current image.  If not specified in a macro call, a
  value of 1 is passed as the completion code for VAX  MACRO  and  VAX
  BLISS-32  and,  a  value  of  0 is passed for other languages.  This
  value can be tested at the  command  level  to  provide  conditional
  command execution.
2 $EXPREG
  The Expand Program/Control Region service adds a specified number of
  new  virtual  pages  to a process's program region or control region
  for the execution of the current image.   Expansion  occurs  at  the
  current end of that region's virtual address space.

     Format:

       SYS$EXPREG pagcnt [,retadr] [,acmode] [,region]

     Arguments:

  pagcnt

  Number of pages to add to the current end of the program or  control
  region.   The  pagcnt  argument  is a longword value containing this
  number.

  retadr

  Starting and ending process virtual  addresses  of  the  pages  that
  $EXPREG  has  actually  added.   The  retadr  is  the  address  of a
  two-longword array containing, in order,  the  starting  and  ending
  process virtual addresses.

  acmode

  Access mode to be associated with the newly added pages.  The acmode
  argument is a longword containing the access mode.

  region

  Number specifying which program  region  is  to  be  expanded.   The
  region  argument  is  a  longword value.  A value of 0 (the default)
  specifies that the program region (P0 region) is to be expanded.   A
  value  of  1  specifies that the control region (P1 region) is to be
  expanded.
2 $FAO
  The Formatted ASCII Output service (1) converts a binary value  into
  an ASCII character string in decimal, hexadecimal, or octal notation
  and returns the character string in an output string and (2) inserts
  variable character string data into an output string.

  The Formatted ASCII  Output  with  List  Parameter  ($FAOL)  service
  provides  an alternate way to specify input parameters for a call to
  the $FAO system service.  The formats for both $FAO and $FAOL appear
  below.

     Format:

       SYS$FAO  ctrstr [,outlen] ,outbuf [,p1] [,p2] ...[,pn]

       SYS$FAOL  ctrstr [,outlen] ,outbuf ,prmlst

     Arguments:

  ctrstr

  Control string passed to $FAO.  The ctrstr argument is  the  address
  of  a  character  string  descriptor pointing to the control string.
  The control string contains the text to be output together with  one
  or  more  FAO  directives,  which  are  described in the Description
  section.

  outlen

  Length in bytes of the fully formatted  output  string  returned  by
  $FAO.   The outlen argument is the address of a word containing this
  value.

  outbuf

  Output buffer into which $FAO  writes  the  fully  formatted  output
  string.   The  outbuf  argument is the address of a character string
  descriptor pointing to the output buffer.

  p1 to pn

  FAO  directive  parameter(s).   The  p1  argument  is   a   longword
  containing   the   parameter  needed  by  the  first  FAO  directive
  encountered in the control string, the p2  argument  is  a  longword
  containing the parameter needed for the second FAO directive, and so
  on for the remaining arguments up to and including p20.  If  an  FAO
  directive  does  not  require  a  parameter,  that  FAO directive is
  processed without reading a parameter from the argument list.

  prmlst

  List of FAO directive parameters to be passed to the $FAOL  service.
  The  prmlst  argument  is the address of a list of longwords wherein
  each longword is a  parameter.   $FAOL  processes  these  parameters
  sequentially as it encounters, in the control string, FAO directives
  that require parameters.
2 $FILESCAN
  The Scan String for File Specification service searches a string for
  a  file  specification  and  parses  the  components  of  that  file
  specification.

     Format:

       SYS$FILESCAN 
srcstr [,valuelst] [,fldflags]

     Arguments:

  srcstr

  String to be  searched  for  the  file  specification.   The  srcstr
  argument is the address of a descriptor pointing to this string.

  valuelst

  Item list specifying which components of the file specification  are
  to  be  returned  by $FILESCAN; the components are the node, device,
  directory, file name, file type  and  version  number.   The  itmlst
  argument  is  the address of a list of item descriptors wherein each
  item  descriptor  specifies  one  component.   The  list   of   item
  descriptors is terminated by a longword of 0.

  fldflags

  Longword flag mask in which $FILESCAN  sets  a  bit  for  each  file
  specification  component  found  in  the input string.  The fldflags
  argument is the address of this longword flag mask.
2 $FORCEX
  The Force Exit system service causes an Exit ($EXIT) service call to
  be issued on behalf of a specified process.

     Format:

       SYS$FORCEX  [pidadr] [,prcnam] [,code]

     Arguments:

  pidadr

  Process identification (PID) of the process to be  forced  to  exit.
  The pidadr argument is the address of a longword containing the PID.

  prcnam

  Process name of the process that is  to  be  forced  to  exit.   The
  prcnam  argument  is  the  address  of a character string descriptor
  pointing to a 1- to 15-character process name string.

  code

  Completion code value to be used as the exit  parameter.   The  code
  argument  is  a  longword  containing  this  value.   If code is not
  specified, a value of 0 is passed as the completion code.
2 $GETDVI
  The Get Device/Volume Information service returns information  about
  an  I/O  device;  this information consists of primary and secondary
  device characteristics.

  The $GETDVI service completes asynchronously; that is, it returns to
  the  caller  after queueing the information request, without waiting
  for the requested information to be returned.

  For synchronous completion, use the  Get  Device/Volume  Information
  and  Wait  ($GETDVIW) service.  The $GETDVIW service is identical to
  the $GETDVI service in every way except that $GETDVIW returns to the
  caller with the requested information.

  For additional information about system service completion, refer to
  the Synchronize ($SYNCH) service and to Section 2.5 in Part I.

     Format:

       SYS$GETDVI [efn] ,[chan] ,[devnam] ,itmlst ,[iosb] ,[astadr]
                  ,[astprm] ,nullarg

     Arguments:

  efn

  Number of the  event  flag  to  be  set  when  $GETDVI  returns  the
  requested  information.   The  efn  argument  is  the  address  of a
  longword containing this number.

  chan

  Number of the  I/O  channel  assigned  to  the  device  about  which
  information  is  desired.   The  chan  argument  is the address of a
  longword containing this number.

  devnam

  The name of the device about which $GETDVI is to return information.
  The  devnam argument is the address of a character string descriptor
  pointing to this name string.

  itmlst

  Item list specifying which information about the  device  is  to  be
  returned.   The  itmlst  argument  is  the address of a list of item
  decriptors, each of which describes an  item  of  information.   The
  list  of  item  descriptors  is  terminated by a longword of 0.  The
  following diagram depicts the format of a single item descriptor:

  iosb

  I/O status block which is to receive the  final  completion  status.
  The iosb is the address of the quadword I/O status block.

  astadr

  AST service routine to be  executed  when  $GETDVI  completes.   The
  astadr is the address of the entry mask of this routine.

  astprm

  AST parameter to be passed to the AST service routine  specified  by
  the astadr argument.  The astprm argument is the longword parameter.

  nullarg

  Place-holding argument.  This argument is reserved to DIGITAL.
2 $GETDVIW
  The  Get  Device/Volume  Information  and   Wait   service   returns
  information  about  an  I/O  device;  this  information  consists of
  primary and secondary device characteristics.

  The $GETDVIW service completes synchronously; that is, it returns to
  the caller with the requested information.

  For asynchronous completion, use the Get  Device/Volume  Information
  ($GETDVI)  service; $GETDVI returns to the caller after queueing the
  information request, without  waiting  for  the  information  to  be
  returned.

  In all other respects, $GETDVIW is identical to $GETDVI.   Refer  to
  the  documentation  of  $GETDVI  for all other information about the
  $GETDVIW service.

  For additional information about system service completion, refer to
  the Synchronize ($SYNCH) service and to Section 2.5 in Part I.

     Format:

       SYS$GETDVIW [efn] ,[chan] ,[devnam] ,itmlst ,[iosb] ,[astadr] 
                  ,[astprm] ,nullarg


2 $GETJPI
  The Get Job/Process Information service returns information about
  one or more proceses on the system.

  The $GETJPI services completes asynchronously; that is, it 
  returns to the caller after queueing the information request,
  without waiting for the requested information to be returned.

  For synchronous ocmpletion, use the Get Job/Process Information
  and Wait ($GETJPIW) service.  The $GETJPIW service is identical
  to the $GETJPI service in every way except that $GETJPIW
  returns to the caller with the requested information.

  For additional information about system service completion,
  refer to the Synchronize ($SYNCH) service and to
  Section 2.5 in Part I.
   

     Format:
    
       SYS$GETJPI [efn] ,[pidadr] ,[prcnam] ,itmlst [,iosb] [,astadr]
                  [,astprm]

     Arguments:

  efn

  Number of the  event  flag  to  be  set  when  $GETJPI  returns  the
  requested  information.   The  efn  argument  is  the  address  of a
  longword containing this number.

  pidadr

  Process identification (PID) of the process about which  $GETJPI  is
  to  return  information.   The  pidadr  argument is the address of a
  longword containing the PID.

  prcnam

  Name of the process about which $GETJPI is  to  return  information.
  The  prcnam argument is the address of a character string descriptor
  pointing to this name string.

  itmlst

  Item list specifying which information about the process(es)  is  to
  be  returned.   The itmlst argument is the address of a list of item
  decriptors, each of which describes an  item  of  information.   The
  list  of  item  descriptors  is  terminated by a longword of 0.  

  iosb

  I/O status block which  is  to  receive  the  final  completion
  status.   The  iosb  is  the address of the quadword I/O status
  block.

  astadr

  AST service routine to be executed when $GETJPI completes.  The
  astadr is the address of the entry mask of this routine.

  astprm

  AST parameter to be passed to the AST service routine specified
  by  the  astadr  argument.  The astprm argument is the longword
  parameter.
2 $GETJPIW
  The Get Job/Process Information and Wait service returns information
  about one or more processes on the system.

  The $GETJPIW service completes synchronously; that is, it returns to
  the caller with the requested information.

  For asynchronous completion, use  the  Get  Job/Process  Information
  ($GETJPI)  service; $GETJPI returns to the caller after queueing the
  information request, without  waiting  for  the  information  to  be
  returned.

  In all other respects, $GETJPIW is identical to $GETJPI.   Refer  to
  the  documentation  of  $GETJPI  for all other information about the
  $GETJPIW service.

  For additional information about system service completion, refer to
  the Synchronize ($SYNCH) service and to Section 2.5 in Part I.

     Format:

       SYS$GETJPIW [efn] [,pidadr] [,prcnam] ,itmlst [,iosb]
                  [,astadr] [,astprm]
2 $GETLKI
  The Get Lock Informtion service returns information about the
  lock data base on a VAX/VMS system.

  The $GETLKI srevice completes asynchronously; that is, it
  returns to the caller after queuing the information request,
  without waiting for the information to be returned.

  For synchronous completion, use the Get Lock Information and
  Wait service;  $GETLKI returns to the caller with the
  requested information.  In all other respects, $GETLKIW is
  identical to $GETLKI.

  For additional information about system service completion 
  refer to the Synchronize ($SYNCH) service and to Section 2.5
  in Part I.

  The $GETLKI, $GETLKIW, $ENQ (Enqueue Lock Request), $ENQW 
  (Enqueue Lock Request and Wait), and $DEQ (Dequeue Lock Request)
  services together provide the user interface to the VAX/VMS 
  lock management facility.  Refer to the descriptions of
  these other services and to Section 12 in Part I for 
  additional information about lock management.

     Format:
 
       SYS$GETLKI  [efn] ,lkidadr ,itmlst  [,iosb]  [,astadr] [,astprm]
                   [,nullarg]


     Arguments:

  efn

  Number of the event flag to be set when $GETLKI completes.  The  efn
  argument  is  a  longword  containing  this  number.   If efn is not
  specified, $GETLKI sets event flag 0.

  lkidadr

  Lock identification (lock id) for the lock about  which  information
  is  to  be returned.  The lock id is the second longword in the lock
  status block, which was created when  the  lock  was  granted.   The
  lkidadr argument is the address of this longword.

  itmlst

  Item list specifying the lock information that $GETLKI is to return.
  The  itmlst  argument  is the address of a list of item descriptors,
  each of which describes an item of information.  The  list  of  item
  descriptors is terminated by a longword of 0.

       iosb

       I/O Status Block  that  is  to  receive  the  final  completion
       status.  The iosb argument is the address of a quadword.

       astadr

       AST service routine to be executed when the service  completes.
       The  astadr  argument  is the address of the entry mask of this
       routine.

       astprm

       AST parameter to be passed to the AST service routine specified
       by  the  astadr  argument.  The astprm argument is the longword
       parameter.

       nullarg

       Place-holding argument.  This argument is reserved to DIGITAL.
2 $GETLKIW
  The Get Lock Information and Wait service returns information  about
  the lock data base on a VMS system.

  The $GETLKIW service completes synchronously; that is, it returns to
  the caller with the requested information.

  For asynchronous completion, use the Get Lock Information  ($GETLKI)
  service;   $GETLKI   returns   to  the  caller  after  queueing  the
  information request, without  waiting  for  the  information  to  be
  returned.

  In all other respects, $GETLKIW is identical to $GETLKI.   Refer  to
  the  documentation  of  $GETLKI  for all other information about the
  $GETLKIW service.

  For additional information about system service completion, refer to
  the Synchronize ($SYNCH) service and to Section 2.5 in Part I.

  The $GETLKI, $GETLKIW, $ENQ (Enqueue Lock Request),  $ENQW  (Enqueue
  Lock  Request  and  Wait),  and $DEQ (Dequeue Lock Request) services
  together provide the user interface to the VAX/VMS  lock  management
  facility.   Refer to the descriptions of these other services and to
  Section 12   in  Part  I  for  additional  information  about  lock
  management.

     Format:

      SYS$GETLKIW [efn] ,lkidadr ,itmlst [,iosb] [,astadr] [,astprm]
                  [,nullarg] 

2 $GETMSG
  The Get Message service locates and returns message text associated
  with a given message identification code into the caller's buffer.
  The message can be from the system message file or can be a 
  user-defined message.
     
     Format:

      SYS$GETMSG msgid ,msglen ,bufadr [,flags] [,outadr]


       Arguments:

  msgid

  Identification of the message to be retrieved.  The  msgid  argument
  is  a  longword  value  containing the message identification.  Each
  message has a unique identification, contained in bits 3 through  27
  of system longword condition values.

  msglen

  Length of the  message  string  returned  by  $GETMSG.   The  msglen
  argument  is  the  address  of a word into which $GETMSG writes this
  length.

  bufadr

  Buffer to receive the message string.  The bufadr  argument  is  the
  address of a character string descriptor pointing to the buffer into
  which $GETMSG writes the message string.  The maximum  size  of  any
  message string is 256 bytes.

  flags

  Message components to be returned.  The flags argument is a longword
  bit  vector,  wherein  a  bit  when  set specifies that that message
  component is to be  returned.   

  outadr

  Optional information to be returned by $GETMSG.  The outadr  is
  the  address of a four-byte array into which $GETMSG writes the
  following information:


            Byte                                     Contents

            0                                        Reserved
            1                                        Count of FAO
            arguments associated with message
            2                                        User-specified
            value in message, if any
            3                                        Reserved
2 $GETSYI
  The Get System-Wide Information service  returns  information  about
  the local VAX system or about other VAX systems in a cluster.

  For Version 4.0 of VAX/VMS, both the $GETSYI  service  and  the  Get
  System-Wide   Information   and  Wait  ($GETSYIW)  service  complete
  synchronously; that is, they return to the caller with the requested
  information.

  However, in  the  future,  $GETSYI  will  be  modified  to  complete
  asynchronously; that is, it will return to the caller after queueing
  the information request, without waiting for the information  to  be
  returned.   For  this  reason,  DIGITAL  recommends that you use the
  $GETSYIW service for synchronous completion.

  For additional information about system service completion, refer to
  the Synchronize ($SYNCH) service and to Section 2.5 in Part I.

     Format:

       SYS$GETSYI [efn] ,[csidadr] ,[nodename] ,itmlst [,iosb]
                  [,astadr] 
                  [,astprm]

     Arguments:

  efn

  Number of the  event  flag  to  be  set  when  the  $GETSYI  request
  completes.  The efn argument is the address of a longword containing
  this number.

  csidadr

  Cluster system identification of the VAX node about which $GETSYI is
  to  return  information.   The  csidadr is the address of a longword
  containing this identification value.

  nodename

  The  name  of  the  VAX  node  about  which  $GETSYI  is  to  return
  information.   The  nodename  argument is the address of a character
  string descriptor pointing to this name string.

  itmlst

  Item list specifying which information about the VAX node(s)  is  to
  be  returned.   The itmlst argument is the address of a list of item
  decriptors, each of which describes an  item  of  information.   The
  list  of  item  descriptors  is  terminated by a longword of 0.  The
  following diagram depicts a single item descriptor:

  iosb

  I/O status block which is to receive the  final  completion  status.
  The iosb is the address of the quadword I/O status block.

  astadr

  AST service routine to be  executed  when  $GETSYI  completes.   The
  astadr is the address of the entry mask of this routine.

  astprm

  AST parameter to be passed to the AST service routine  specified  by
  the astadr argument.  The astprm argument is the longword parameter.
2 $GETSYIW
  The Get System-Wide Information and Wait service returns information
  about the local VAX system or about other VAX systems in a cluster.

  For Version 4.0 of VAX/VMS, the $GETSYIW service is identical to the
  Get System-Wide Information ($GETSYI) service.  Both services return
  the same information, and both complete synchronously; that is, they
  return to the caller with the requested information.

  However, in the future the  $GETSYI  service  will  be  modified  to
  complete asynchronously; that is, it will return to the caller after
  queueing  the  information  request,   without   waiting   for   the
  information  to  be  returned.   For this reason, DIGITAL recommends
  that you use the $GETSYIW service for synchronous completion.

  Refer to the documentation of  $GETSYI  for  all  other  information
  about the $GETSYIW service.

  For additional information about system service completion, refer to
  the Synchronize ($SYNCH) service and to Section 2.5 in Part I.

     Format:

       SYS$GETSYIW [efn] ,[csidadr] ,[nodename] ,itmlst [,iosb]
                  [,astadr]
                  [,astprm]

                  Either the csidadr or the nodename argument must be
                  specified, but not both.  However, the csidadr
                  argument must be
                  used for wildcard operations. 

2 $GETTIM
  The Get Time service returns the current system time in 64-bit format.

     Format:

      SYS$GETTIM timadr
     Argument

  timadr

  Address of a quadword that is to receive the current time in  64-bit
  format.
2 $HIBER
  The Hibernate service allows a process to make itself  inactive  but
  to  remain  known  to  the system so that it can be interrupted, for
  example,   to   receive   ASTs.    A   hibernate   request   is    a
  wait-for-wake-event request.  When the Wake Process from Hibernation
  ($WAKE) service is  called  or  when  a  Schedule  Wakeup  ($SCHDWK)
  service   comes   due,   the  process  continues  execution  at  the
  instruction following the Hibernate call.

     Format:

       SYS$HIBER  

      Arguments

        None

2 $LCKPAG
  The Lock Pages In Memory service locks a page or range of  pages  in
  memory.  The specified virtual pages are forced into the working set
  and then locked in memory.  A locked page  is  not  swapped  out  of
  memory if its process's working set is swapped out.  These pages are
  not candidates for page replacement and in this sense are locked  in
  the working set as well.

     Format:

       SYS$LCKPAG  inadr [,retadr] [,acmode]

     Arguments:

  inadr

  Starting and ending virtual addresses of the range of  pages  to  be
  locked.    The   inadr  is  the  address  of  a  two-longword  array
  containing, in order, the starting and the  ending  process  virtual
  addresses.   Only  the  virtual  page number portion of each virtual
  address is used; the low-order 9 bits are ignored.

  retadr

  Starting and ending process virtual  addresses  of  the  pages  that
  $LCKPAG   actually   locked.    The  retadr  is  the  address  of  a
  two-longword array containing, in order,  the  starting  and  ending
  process virtual addresses.

  acmode

  Access mode to be associated with  the  pages  to  be  locked.   The
  acmode  argument  is  a  longword  containing  the access mode.  The
  $PSLDEF macro defines the four access modes.
2 $LKWSET
  The Lock Pages in Working Set service locks a range of pages in  the
  working  set;  if  the  pages are not already in the working set, it
  brings them in and locks them.  A page that is locked in the working
  set does not become a candidate for replacement.

     Format:

       SYS$LKWSET  inadr [,retadr] [,acmode]

     Arguments:

  inadr

  Starting and ending virtual addresses of the range of  pages  to  be
  locked  in  the  working  set.   The  inadr  is  the  address  of  a
  two-longword array containing, in order, the starting and the ending
  process  virtual addresses.  Only the virtual page number portion of
  each virtual address is used; the low-order 9 bits are ignored.

  retadr

  Starting and ending process virtual addresses of the range of  pages
  actually  locked  by  $LCKWSET.   The  retadr  is  the  address of a
  two-longword array containing, in order,  the  starting  and  ending
  process virtual addresses.

  acmode

  Access mode to be associated with  the  pages  to  be  locked.   The
  acmode  argument  is  a  longword  containing  the access mode.  The
  $PSLDEF macro defines the four access modes.
2 $MGBLSC
  The Map Global Section service establishes a correspondence  between
  (maps)  pages  in  the  process's virtual address space and physical
  pages occupied by a global section.

     Format:

       SYS$MGBLSC inadr ,[retadr] ,[acmode] ,[flags] ,gsdnam [,ident] 
                  [,relpag]

     Arguments:

  inadr

  Starting and ending  virtual  addresses  in  the  process's  virtual
  address  space  (either the P0 or P1 regions) into which the section
  is to be mapped.  The inadr is the address of a  two-longword  array
  containing,  in  order,  the starting and the ending process virtual
  addresses.  Only the virtual page number  portion  of  each  virtual
  address is used; the low-order 9 bits are ignored.

  retadr

  Starting and ending process virtual addresses into which the section
  was  actually  mapped  by  $MGBLSC.   The retadr is the address of a
  two-longword array containing, in order,  the  starting  and  ending
  process virtual addresses.

  acmode

  Access mode to be associated with the pages that are mapped into the
  process  virtual  address  space.  The acmode argument is a longword
  containing the access mode.  The $PSLDEF macro defines  symbols  for
  the four access modes.

  flags

  Flag mask specifying options for the operation.  The flags  argument
  is  a  longword  bit  vector  wherein  a  bit when set specifies the
  corresponding option.

  gsdnam

  Name of the global section.  The gsdnam argument is the address of a
  character  string  descriptor pointing to this name string.  Section
  11.6.5.1  describes the format of this name string.

  ident

  Identification value specifying  the  version  number  of  a  global
  section,  and,  for processes mapping to an existing global section,
  the criteria for matching the identification.  The ident argument is
  the address of a quadword structure containing three fields.

  relpag

  Relative page number within the section of  the  first  page  to  be
  mapped.  The relpag argument is a longword containing this number.
2 $MOUNT
  The Mount Volume service mounts a tape, disk volume, or  volume  set
  and specifies options for the mount operation.

     Format:

       SYS$MOUNT  itmlst

     Argument

  itmlst

  Item list specifying options for the mount  operation.   The  itmlst
  argument is the address of a list of item descriptors, each of which
  specifies an option and provides the information needed  to  perform
  the operation.
2 $NUMTIM
  The Convert Binary Time to Numeric Time service converts an absolute
  or  delta time from 64-bit system time format to binary integer date
  and time values.

     Format:

       SYS$NUMTIM  timbuf [,timadr]

     Arguments:

  timbuf

  Buffer into which $NUMTIM writes the converted date and  time.   The
  numtim argument is the address of a 7-word structure.  The following
  diagram depicts the fields in this structure:

  timadr

  The 64-bit time value to be converted.  The timadr argument  is  the
  address  of  a quadword containing this time.  A positive time value
  represents an absolute time, while a negative time value indicates a
  delta time.
2 $PURGWS
  The Purge Working Set service removes a  specified  range  of  pages
  from  the  calling  process's  current  working set to make room for
  pages required by  a  new  program  segment.   However,  the  Adjust
  Working  Set  Limit ($ADJWSL) service is the preferred mechanism for
  controlling a process's use of physical memory resources.

     Format:

       SYS$PURGWS  inadr

     Argument

  inadr

  Starting and ending virtual addresses of the range of  pages  to  be
  purged.    The   inadr  is  the  address  of  a  two-longword  array
  containing, in order, the starting and the  ending  process  virtual
  addresses.   Only  the  virtual  page number portion of each virtual
  address is used; the low-order 9 bits are ignored.
2 $PUTMSG
  The Put Message  service  writes  one  or  more  error  messages  to
  SYS$ERROR  (and  to  SYS$OUTPUT  if it is different than SYS$ERROR).
  $PUTMSG is a generalized message formatting and output routine  used
  by VAX/VMS to write informational and error messages to processes.

     Format:

       SYS$PUTMSG  msgvec [,actrtn] [,facnam] [,actprm]

     Arguments:

  msgvec

  Message argument vector specifying the message(s) to be written  and
  options  that  $PUTMSG  is  to  use  in writing the message(s).  The
  msgvec argument is the address of the message vector.

  actrtn

  User-supplied  action  routine  to  be   executed   during   message
  processing.  The actrtn argument is the address of the entry mask of
  this routine.

  facnam

  Facility prefix to be used in the first or only message  written  by
  $PUTMSG.   The  facnam argument is the address of a character string
  descriptor pointing to this facility prefix.

  actprm

  Parameter to be passed to the  action  routine.   The  actprm  is  a
  longword   value  containing  this  parameter.   If  actprm  is  not
  specified, no parameter is passed.
2 $QIO
  The Queue I/O Request service queues an I/O  request  to  a  channel
  associated with a device.

  The $QIO service completes asynchronously; that is,  it  returns  to
  the  caller  immediately  after  queueing  the  I/O request, without
  waiting for the I/O operation to complete.

  For synchronous completion, use  the  Queue  I/O  Request  and  Wait
  ($QIOW) service.  The $QIOW service is identical to the $QIO service
  in every way except that $QIOW returns to the caller after  the  I/O
  operation has completed.

  For additional information about system service completion, refer to
  the Synchronize ($SYNCH) service and to Section 2.5 in Part I.

     Format:

       SYS$QIO [efn] ,chan ,func [,iosb] [,astadr] [,astprm]
                  [,p1] [,p2] [,p3] [,p4] [,p5] [,p6]

     Arguments:

  efn

  Event flag that $QIO is to  set  when  the  I/O  operation  actually
  completes.   The  efn  argument  is  a longword value containing the
  number of the event flag.

  chan

  I/O channel that is assigned to the device to which the  request  is
  directed.   The  chan  argument  is  a longword value containing the
  number of the I/O channel; however, $QIO uses  only  the  low  order
  word.

  func

  Device-specific function codes and function modifiers specifying the
  operation  to be performed.  The func is a longword value containing
  the function code.

  iosb

  I/O status block to receive the final completion status of  the  I/O
  operation.   The  iosb  is  the  address  of the quadword I/O status
  block.  

  astadr

  AST service routine to be executed  when  the  I/O  completes.   The
  astadr argument is the address of a longword value that is the entry
  mask to the AST routine.

  astprm

  AST parameter to be passed to the AST service routine.   The  astprm
  argument is a longword value containing the AST parameter.

  p1 to p6

  Optional device- and function-specific I/O request parameters.
2 $QIOW
  The Queue I/O Request and Wait service queues an I/O  request  to  a
  channel associated with a device.

  The $QIOW service completes synchronously; that is,  it  returns  to
  the caller after the I/O operation has actually completed.

  For asynchronous  completion,  use  the  Queue  I/O  Request  ($QIO)
  service;  $QIO returns to the caller after queueing the I/O request,
  without waiting for the I/O operation to be completed.

  In all other respects, $QIOW is identical to  $QIO.   Refer  to  the
  documentation  of  $QIO  for  all  other information about the $QIOW
  service.

  For additional information about system service completion, refer to
  the Synchronize ($SYNCH) service and to Section 2.5 in Part I.

     Format:

       SYS$QIOW [efn] ,chan ,func [,iosb] [,astadr] [,astprm]
                  [,p1] [,p2] [,p3] [,p4] [,p5] [,p6]

2 $READEF
  The Read Event Flag service returns the current status of
  all 32 event flags in a local or common event flag cluster.
  In addition, the condition value returned indicates whether
  the specified event flag is set or clear.

     Format:

       SYS$READEF efn ,state


     Arguments:

  efn

  Number of any event flag in  the  cluster  whose  status  is  to  be
  returned.   The  efn  argument is a longword containing this number.
  Specifying an event flag within  a  cluster  requests  that  $READEF
  return the status of all event flags in that cluster.

  state

  State of all event  flags  in  the  specified  cluster.   The  state
  argument  is the address of a longword into which $READEF writes the
  state (set or clear) of the 32 event flags in the cluster.
2 $RESUME
  The Resume Process service (1) causes a process previously suspended
  by  the Suspend Process ($SUSPND) service to resume execution or (2)
  cancels the effect of a subsequent suspend request.

     Format:

       SYS$RESUME  [pidadr] [,prcnam]

     Arguments:

  pidadr

  Process identification (PID) of the process that is to  be  resumed.
  The pidadr argument is the address of a longword containing the PID.

  prcnam

  Name of the process to be resumed.  The prcnam is the address  of  a
  character string descriptor pointing to the process name, which is a
  character string of from 1 to 15 characters.
2 $SCHDWK
  The Schedule Wakeup service schedules the  awakening  of  a  process
  that  has placed itself in a state of hibernation with the Hibernate
  ($HIBER) service.   A  wakeup  can  be  scheduled  for  a  specified
  absolute  time  or  for  a  delta time, and can be repeated at fixed
  intervals.

     Format:

       SYS$SCHDWK  [pidadr] ,[prcnam] ,daytim [,reptim]

     Arguments:

  pidadr

  Process identification (PID) of the process that is to be  awakened.
  The pidadr argument is the address of a longword containing the PID.

  prcnam

  Name of the process to be awakened.  The prcnam is the address of  a
  character string descriptor pointing to the process name, which is a
  character string of from 1 to 15 characters.

  daytim

  Time at which the process is to be awakened.  The daytim argument is
  the  address of a quadword containing this time in the system 64-bit
  time format.  A positive time value specifies an  absolute  time  at
  which  the  specified  process  is  to be awakened.  A negative time
  value specifies an offset (delta time) from the current time.

  reptim

  Time interval at which the wakeup request is to  be  repeated.   The
  reptim  argument  is  the address of a quadword containing this time
  interval.  The time interval must be expressed in delta time format.
2 $SETAST
  The Set AST Enable service enables or disables the delivery of  ASTs
  for the access mode from which the service call was issued.

     Format:

       SYS$SETAST  enbflg

     Argument

  enbflg

  Value specifying  whether  ASTs  are  to  be  enabled.   The  enbflg
  argument  is a longword containing this value.  A value of 1 enables
  AST delivery for the calling access mode; a value of 0 disables  AST
  delivery.
2 $SETEF
  The Set Event Flag service sets an event flag in a local  or  common
  event   flag  cluster.   The  condition  value  returned  by  $SETEF
  indicates whether the specified flag was previously  set  or  clear.
  Once  the event flag is set, processes waiting for the event flag to
  be set resume execution.

     Format:

       SYS$SETEF  efn

     Argument

  efn

  Number of the event flag to be set.  The efn argument is a  longword
  containing this number.
2 $SETEXV
  The Set Exception Vector service (1)  assigns  a  condition  handler
  address  to the primary, secondary, or last chance exception vectors
  or (2) removes a previously assigned handler  address  from  any  of
  these three vectors.

     Format:

       SYS$SETEXV  [vector] [,addres] [,acmode] [,prvhnd]

     Arguments:

  vector

  Vector for which  a  condition  handler  is  to  be  established  or
  removed.   The  vector  argument  is a longword value.  A value of 0
  (the default) specifies the  primary  vector;  a  value  of  1,  the
  secondary  vector;  and  a  value  of  2,  the last chance exception
  vector.

  addres

  Condition handler address to be established for the exception vector
  specified  by  vector.   The  addres  argument  is  a longword value
  containing the address of the entry mask to  the  condition  handler
  routine.

  acmode

  Access mode for which the exception vector is to be  modified.   The
  acmode  argument  is  a  longword  containing  the access mode.  The
  $PSLDEF macro defines symbols for the four access modes.

  prvhnd

  Previous  condition  handler  address  contained  by  the  specified
  exception  vector.  The prvhnd argument is the address of a longword
  into which $SETEF writes the handler address.
2 $SETIME
  The Set System  Time  service  (1)  changes  the  value  of  or  (2)
  recalibrates the system time.

  The system time is defined by a quadword value  that  specifies  the
  number of 100 nanosecond intervals since 00:00 o'clock, November 17,
  1858.

  The system time is the reference used for nearly  all  timer-related
  software activities in VAX/VMS.

     Format:

       SYS$SETIME  [timadr]

     Argument

  timadr

  New time value for the system time.   The  timadr  argument  is  the
  address of a quadword containing the new system time value.  The new
  system time value is an absolute time value specifying the number of
  100  nanosecond intervals since 00:00 o'clock, November 17, 1858.  A
  negative (delta) time value is invalid.
2 $SETIMR
  The Set Timer service sets the timer to expire at a specified  time.
  When the timer expires, an event flag is set and (optionally) an AST
  routine executes.

     Format:

       SYS$SETIMR  [efn] ,daytim [,astadr] [,reqidt]

     Arguments:

  efn

  Event flag to be set when the timer expires.  The efn argument is  a
  longword  value  containing the number of the event flag.  If efn is
  not specified, event flag 0 is set.

  daytim

  Time at which the timer expires.  The daytim argument is the address
  of  a  quadword  time  value.   A  positive  time value specifies an
  absolute time at which the timer  expires;  a  negative  time  value
  specifies an offset (delta time) from the current time.

  astadr

  AST service routine that is to execute when the timer expires.   The
  astadr  is the address of the entry mask of this routine.  If astadr
  is not specified or is specified as 0 (the default), no AST  routine
  executes.

  reqidt

  Identification of the timer request.  The reqidt is a longword value
  containing  a number that uniquely identifies the timer request.  If
  reqidt is not specified, the value 0 is used.
2 $SETPRA
  The Set Power Recovery AST service establishes a routine to  receive
  control after a power recovery is detected.

     Format:

       SYS$SETPRA  astadr [,acmode]

     Arguments:

  astadr

  Power recovery AST routine to receive control when a power  recovery
  is  detected.   The  astadr is the address of the entry mask of this
  routine.

  acmode

  Access mode at which the power recovery AST routine is  to  execute.
  The  acmode  argument is a longword containing the access mode.  The
  $PSLDEF macro defines symbols for the four access modes.
2 $SETPRI
  The Set Priority service changes a  process's  base  priority.   The
  base  priority  is  used  to determine the order in which executable
  processes are to run.

     Format:

       SYS$SETPRI  [pidadr] ,[prcnam] ,pri [,prvpri]

     Arguments:

  pidadr

  Process identification (PID) of the process whose priority is to  be
  set.  The pidadr argument is the address of the PID.

  prcnam

  Process name of the process whose priority is to  be  changed.   The
  prcnam  argument  is  the  address  of a character string descriptor
  pointing to a 1- to 15-character process name string.

  pri

  New base priority to  be  established  for  the  process.   The  pri
  argument   is   a   longword  value  containing  the  new  priority.
  Priorities which are not real time are in the range  0  through  15;
  real-time priorities are in the range 16 through 31.

  prvpri

  Base priority of the process before the call to $SETPRI.  The prvpri
  argument  is the address of a longword into which $SETPRI writes the
  process's previous base priority.
2 $SETPRN
  The Set Process Name service allows a process  to  establish  or  to
  change its own process name.

     Format:

       SYS$SETPRN  [prcnam]

     Argument

  prcnam

  Process name to  be  given  to  the  calling  process.   The  prcnam
  argument is the address of a character string descriptor pointing to
  a 1-  to  15-character  process  name  string.   If  prcnam  is  not
  specified, the calling process is given no name.
2 $SETPRT
  The Set Protection on Pages service allows a process to  change  the
  protection on a page or range of pages.

     Format:

       SYS$SETPRT inadr ,[retadr] ,[acmode] ,prot [,prvprt]

     Arguments:

  inadr

  Starting and ending virtual addresses of the range  of  pages  whose
  protection  is  to  be  changed.   The  inadr  is  the  address of a
  two-longword array containing, in order, the starting and the ending
  process  virtual addresses.  Only the virtual page number portion of
  each virtual address is used; the low-order 9 bits are ignored.

  retadr

  Starting and ending virtual addresses of the range  of  pages  whose
  protection  was  actually  changed  by  $SETPRT.   The retadr is the
  address of a two-longword array containing, in order,  the  starting
  and ending process virtual addresses.

  acmode

  Access mode  associated  with  the  call  to  $SETPRT.   The  acmode
  argument  is  a  longword  containing  the access mode.  The $PSLDEF
  macro defines symbols for the four access modes.

  prot

  Page protection to be assigned to the  specified  pages.   The  prot
  argument  is  a longword value containing the protection code.  Only
  bits 0 to 3 are used; bits 4 to 31 are ignored.

  prvprt

  Protection previously assigned to the last page in the  range.   The
  prvprt  argument  is the address of a byte into which $SETPRT writes
  the protection of this page.  The prvprt  argument  is  useful  only
  when protection for a single page is being changed.
2 $SETPRV
  The Set Privileges service enables or disables specified  privileges
  for the calling process.

     Format:

       SYS$SETPRV [enbflg] [,prvadr] [,prmflg] [,prvprv]

     Arguments:

  enbflg

  Indicator specifying whether the  specified  privileges  are  to  be
  enabled  or disabled.  The enbflg is a longword value.  A value of 1
  specifies that the privileges specified in the prvadr  argument  are
  to  be  enabled.   A  value  of  0  (the default) indicates that the
  privileges are to be disabled.

  prvadr

  Privileges to be enabled or disabled for the calling  process.   The
  prvadr argument is the address of a quadword bit vector wherein each
  bit corresponds to a privilege that is to be enabled or disabled.

  prmflg

  Indicator specifying whether  the  privileges  are  to  be  affected
  permanently  or  temporarily.   The  prmflg  is a longword value.  A
  value of  1  specifies  that  the  privileges  are  to  be  affected
  permanently,  that is, until they are again changed by using $SETPRV
  or until the process  is  deleted.   A  value  of  0  (the  default)
  specifies  that  the privileges are to be affected temporarily, that
  is, until the current image  exits  (at  which  time  the  process's
  permanently enabled privileges will be restored).

  prvprv

  Privileges previously possessed by the calling process.  The  prvadr
  argument  is  the  address of a quadword bit vector wherein each bit
  corresponds to a privilege that was  previously  either  enabled  or
  disabled.   If  prvprv  is  not  specified or is specified as 0, the
  previous privilege mask is not returned.
2 $SETRWM
  The Set Resource Wait Mode service allows a process to specify  what
  action  system  services  should take when system resources required
  for their execution are unavailable.

  When resource wait mode is enabled, system services  will  wait  for
  the  required  system  resources  to  become  avaiable and then will
  continue execution.

  When resource wait mode is disabled, system services will return  to
  the caller when required system resources are unavailable.

  The condition value returned by $SETRWM indicates  whether  resource
  wait mode was previously enabled or previously disabled.

     Format:

       SYS$SETRWM  [watflg]

     Argument

  watflg

  Indicator  specifying  whether  system  services  should  wait   for
  required  resources.   The  watflg  argument is a longword value.  A
  value of 0 (the default) specifies that system services should  wait
  until  resources  needed  for  their  execution become available.  A
  value of 1 specifies that  system  services  should  return  failure
  status  immediately  when  resources  needed for their execution are
  unavailable.
2 $SETSFM
  The Set System Service  Failure  Exception  Mode  service  allows  a
  process  to  specify  whether  or not VMS should generate a software
  exception when a system service returns an  error  or  severe  error
  condition value to the calling process.

  The $SETSFM indicates in the  condition  value  it  returns  whether
  system  service  exception  mode was enabled or disabled previous to
  the call (to $SETSFM).

  Initially, system service failure exception mode is disabled, so the
  caller  should explicitly test for successful completion following a
  system service call.

     Format:

       SYS$SETSFM  [enbflg]

     Argument

  enbflg

  Number specifying whether the system service failure exception  mode
  is to be enabled.  The enbflg argument is a longword value.  A value
  of 1 specifies that the system service  failure  exception  mode  is
  enabled.   A  value  of  0  (the  default) specifies that the system
  service failure exception mode is disabled.
2 $SETSSF
  The Set System Services Filter service inhibits user-mode  calls  to
  certain  system  services.   The following system services cannot be
  inhibited by $SETSSF:

       $ASCTIM                                       $BINTIM $EXIT
       $FAO
       $FAOL                                         $PUTMSG $UNWIND  

     Format:

       SYS$SETSSF  mask

     Arguments:

  mask

  Category of system services that are to be inhibited  for  user-mode
  calls.   The  mask  argument  is  a longword value of which only the
  first byte is significant.  The first byte is a bit vector wherein a
  bit when set specifies a category of system service to be inhibited.
  Only bits 0 and 1 are used; bits 2 to 7 are reserved.
2 $SETSTK
  The Set Stack Limits ($SETSTK) service allows a  process  to  change
  the size of its supervisor, executive, and kernel stacks by altering
  the  values  in  the  stack  limit  and  base  arrays  held  in   P1
  (per-process) space.

     Format:

       SYS$SETSTK  inadr [,retadr] [,acmode]

     Arguments:

  inadr

  Range of addresses that express the stack's new limits.   The  inadr
  argument  is  the  address  of  a  two-longword array containing, in
  order, the address of the top of the stack and the  address  of  the
  base of the stack.  Since stacks in P1 space expand from high to low
  addresses, the address of the base of the stack must be greater than
  the address of the top of the stack.

  retadr

  Range of addresses that express the stack's  previous  limits.   The
  retadr  argument  is  the address of a two-longword array into which
  $SETSTK writes, in the first longword, the previous address  of  the
  top  of  the stack and, in the second longword, the previous address
  of the base of the stack.

  acmode

  Access mode of the stack to be altered.  The acmode  argument  is  a
  longword  containing  the  access  mode.   The $PSLDEF macro defines
  symbols for the four access modes.  The most privileged access  mode
  used is the access mode of the caller.
2 $SETSWM
  The Set Process Swap  Mode  service  allows  a  process  to  control
  whether or not it can be swapped out of the balance set.

  When process swap mode is enabled, the process can be  swapped  out;
  when  disabled,  the  process  remains  in the balance set until (1)
  process swap mode is re-enabled or (2) the process is deleted.

  The $SETSWM service returns a  condition  value  indicating  whether
  process  swap  mode  was enabled or disabled previous to the call to
  $SETSWM.

  To lock some but not necessarily all process pages into the  balance
  set, use the Lock Pages in Memory ($LCKPAG) service.

     Format:

       SYS$SETSWM  [swpflg]

     Argument

  swpflg

  Indicator specifying whether or not the process can be swapped.  The
  swpflg  is  a  longword  value.   A value of 0 (the default) enables
  process swap mode, meaning the process can be swapped.  A value of 1
  disables process swap mode, meaning the process cannot be swapped.
2 $SNDERR
  The Send Message to Error Logger  service  writes  a  user-specified
  message to the system error log file, preceding it with the date and
  time.

     Format:

       SYS$SNDERR  msgbuf

     Argument

  msgbuf

  Message to be written to the error log file.  The msgbuf argument is
  the address of a character string descriptor pointing to the message
  text.
2 $SNDJBC
  The Send to Job Controller ($SNDJBC)  service  creates,  stops,  and
  manages  queues  and  the jobs in those queues.  See the Description
  section for a discussion of the different types of jobs and  queues.
  The  $SNDJBC  service  is  the  major  interface  to the VAX/VMS Job
  Controller, which is the VAX/VMS queue and accounting manager.

  The $SNDJBC service completes asynchronously, that is, it returns to
  the  caller  after  queueing  the  request,  without waiting for the
  operation to  complete.   To  synchronize  the  completion  of  most
  operations,  use  the  Send  to  Job  Controller and Wait ($SNDJBCW)
  service.  The $SNDJBCW service is identical to $SNDJBC in every  way
  except  that  $SNDJBCW returns to the caller after the operation has
  completed.   For  additional  information   about   system   service
  completion, refer to the Synchronize ($SYNCH) service and to Section
  2.5 in Part I.

  The $SNDJBC and $SNDJBCW services  supersede  the  Send  Message  to
  Symbiont  Manager  ($SNDSMB)  and Send Message to Accounting Manager
  ($SNDACC) services.  New programs should be written using $SNDJBC or
  $SNDJBCW,  instead  of  $SNDSMB  or  $SNDACC, and old programs using
  $SNDSMB or $SNDACC should be converted to use $SNDJBC or $SNDJBCW as
  convenient.

     Format:

       SYS$SNDJBC [efn] ,func ,nullarg [,itmlst] [,iosb] [,astadr]
                  [,astprm]

     Arguments:

  efn

  Number of the event flag to be set when $SNDJBC completes.  The  efn
  argument  is a longword containing this number.  The efn argument is
  optional.

  func

  Function code specifying the function that $SNDJBC  is  to  perform.
  The  func argument is a longword containing this function code.  The
  $SJCDEF macro defines the names of each function code.

  nullarg

  Place-holding argument.  This argument is reserved to DIGITAL.

  itmlst

  Item list  supplying  information  to  be  used  in  performing  the
  function specified by the func argument.  The itmlst argument is the
  address of the item list.  The item list consists  of  one  or  more
  item  descriptors,  each  of which specifies an item code.  The item
  list is terminated by an item code of 0 or by a longword of 0.   The
  following diagram depicts the structure of a single item descriptor:

  iosb

  I/O status block into which $SNDJBC  writes  the  completion  status
  after  the  requested  operation  has  completed.   The  iosb is the
  address of the I/O status block.

  astadr

  AST service routine to be  executed  when  $SNDJBC  completes.   The
  astadr argument is the address of the entry mask of this routine.

  astprm

  AST parameter to be passed to the AST service routine  specified  by
  the   astadr   argument.   The  astprm  argument  is  this  longword
  parameter.
2 $SNDJBCW
  The Send to Job Controller and Wait for Completion  service  is  the
  major  interface  to the Job Controller (JBC) facility.  The service
  allows the user to create, stop, and manage queues and the  jobs  in
  those  queues.   Queues  may be generic, batch, execution, or output
  queues.  Jobs may be batch or print jobs.

  The $SNDJBCW service queues a request to the  Job  Controller.   For
  most  operations,  $SNDJBCW  completes  synchronously,  that  is, it
  returns to the caller after the operation has  completed.   However,
  if  the  requested  operation is a pause queue, stop queue, or abort
  job operation, $SNDJBCW returns to the  caller  after  queueing  the
  request.   There  is  no  way  to  synchronize  completion  of these
  operations.  Also, $SNDJBCW does not wait  for  a  job  to  complete
  before it returns to the caller; to synchronize completion of a job,
  the caller must specify the SJC$_SYNCHRONIZE_JOB function code.

  The $SNDJBCW service is identical to  the  Send  to  Job  Controller
  ($SNDJBC)  service except that $SNDJBC completes asynchronously; the
  $SNDJBC service returns to the caller immediately after queueing the
  request, without waiting for the operation to complete.

  Refer to the documentation of the  $SNDJBC  service  for  additional
  information about the $SNDJBCW service.

  The $SNDJBC and $SNDJBCW services  supersede  the  Send  Message  to
  Symbiont  Manager  ($SNDSMB)  and Send Message to Accounting Manager
  ($SNDACC) services.  New programs should be written using $SNDJBC or
  $SNDJBCW,  instead  of  $SNDSMB  or  $SNDACC, and old programs using
  $SNDSMB or $SNDACC should be converted to use $SNDJBC or $SNDJBCW as
  convenient.

     Format:

       SYS$SNDJBCW [efn] ,func ,nullarg [,itmlst] [,iosb] [,astadr] 
                  [,astprm]
2 $SNDOPR
  The $SNDOPR service performs the following functions:

      o  Sends a user request to operator terminals
  
      o  Sends a user cancellation-request to operator terminals

      o  Sends and operator reply to a user terminal

      o  Enables and operator terminal

      o  Displays the status of an operator terminal

      o  Initializes the operator log file

     Format:

       SYS$SNDOPR msgbuf  [,chan]

     Arguments:

  msgbuf

  User buffer specifying the operation to be performed and information
  needed  to  perform  that operation.  The msgbuf is the address of a
  character string descriptor pointing to the buffer.

  chan

  Channel assigned to the mailbox to which the reply is  to  be  sent.
  The  chan  argument is a longword value containing the number of the
  channel.  If chan is  not  specified  or  is  specified  as  0  (the
  default), no reply is sent.
2 $SUSPND
  The Suspend Process service allows a process to  suspend  itself  or
  another  process.   A  suspended  process  cannot  receive  ASTs  or
  otherwise be executed until another process resumes or deletes it.

     Format:

       SYS$SUSPND  [pidadr] [,prcnam]

     Arguments:

  pidadr

  Process identification (PID) of the process to  be  suspended.   The
  pidadr argument is the address of the longword PID.

  prcnam

  Name of the process to be suspended.  The  prcnam  argument  is  the
  address  of  a  character  string  descriptor  pointing  to  a 1- to
  15-character process name string.
2 $SYNCH
  The Synchronize service checks the completion  status  of  a  system
  service that completes asynchronously.

  The service whose completion status is to be checked must have  been
  called  with the efn and iosb arguments specified because the $SYNCH
  service uses the event flag and I/O status block of the  service  to
  be checked.

  Refer to Section 2.5 in Part I for a complete discussion  of  system
  service completion.

     Format:

       SYS$SYNCH efn ,iosb

     Arguments:

  efn

  Number of the event flag specified in the call to the system service
  whose  completion  status  is  to  be  checked  by  $SYNCH.  The efn
  argument is a longword containing this number.

  iosb

  I/O status block specified in the call to the system  service  whose
  completion  status is to be checked by $SYNCH.  The iosb argument is
  the address of this quadword I/O status block.
2 $TRNLNM
  The Translate Logical  Name  service  returns  information  about  a
  logical name.

     Format:

       SYS$TRNLNM [attr] ,tabnam ,lognam [,acmode] [,itmlst]

     Arguments:

  attr

  Attributes controlling the search for the logical  name.   The  attr
  argument  is  the  address  of  a longword bit mask specifying these
  attributes.

  tabnam

  Name of the table or name of a list  of  table  names  in  which  to
  search  for the logical name.  The tabnam argument is the address of
  a descriptor pointing to this name.  This argument is required.

  lognam

  Logical name about which information is to be returned.  The  lognam
  argument is the address of a descriptor pointing to the logical name
  string.  This argument is required.

  acmode

  Access mode to be used in the translation.  The acmode  argument  is
  the address of a byte specifying the access mode.  The $PSLDEF macro
  defines symbolic names for the four access modes.

  itmlst

  Item list describing the information that $TRNLNM is to return.  The
  itmlst  argument  is the address of a list of item descriptors, each
  of which  specifies  or  controls  an  item  of  information  to  be
  returned.   The list of item descriptors is terminated by a longword
  of 0.
2 $ULKPAG
  The Unlock  Pages  from  Memory  service  unlocks  pages  that  were
  previously  locked  in  memory by the Lock Pages in Memory ($LCKPAG)
  service.

  Locked pages are automatically unlocked and deleted at image exit.

     Format:

       SYS$ULKPAG  inadr [,retadr] [,acmode]

     Arguments:

  inadr

  Starting and ending virtual addresses of the pages to  be  unlocked.
  The  inadr  is  the  address  of a two-longword array containing, in
  order, the starting and the ending process virtual addresses.   Only
  the virtual page number portion of each virtual address is used; the
  low-order 9 bits are ignored.  If the starting  and  ending  virtual
  addresses are the same, a single page is unlocked.

  retadr

  Starting and ending process virtual addresses of the pages  actually
  unlocked  by  $ULKPAG.   The retadr is the address of a two-longword
  array containing, in order, the starting and ending process  virtual
  addresses.

  acmode

  Access mode on behalf of which  the  request  is  being  made.   The
  acmode  argument  is  a  longword  containing  the access mode.  The
  $PSLDEF macro defines the symbols for the four access modes.
2 $ULWSET
  The Unlock Pages from Working Set service unlocks  pages  that  were
  previously  locked  in  the working set by the Lock Pages in Working
  Set  ($LKWSET)  service.   Unlocked  pages  become  candidates   for
  replacement within the process's working set.

     Format:

       SYS$ULWSET  inadr [,retadr] [,acmode]

     Arguments:

  inadr

  Starting and ending virtual addresses of the pages to  be  unlocked.
  The  inadr  is  the  address  of a two-longword array containing, in
  order, the starting and the ending process virtual addresses.   Only
  the virtual page number portion of each virtual address is used; the
  low-order 9 bits are ignored.  If the starting  and  ending  virtual
  address are the same, a single page is unlocked.

  retadr

  Starting and ending process virtual addresses of the pages that were
  actually  unlocked  by  $CRMPSC.   The  retadr  is  the address of a
  two-longword array containing, in order,  the  starting  and  ending
  process virtual addresses.

  acmode

  Access mode on behalf of which  the  request  is  being  made.   The
  acmode  argument  is  a  longword  containing  the access mode.  The
  $PSLDEF macro defines the symbols for the four access modes.
2 $UNWIND
  The Unwind Call Stack service unwinds the procedure call stack; that
  is,  it  removes  a  specified number of call frames from the stack.
  Optionally, it may return control to a new PC  after  unwinding  the
  stack.    $UNWIND   is   intended   to   be  called  from  within  a
  condition-handling routine.

     Format:

       SYS$UNWIND  [depadr] [,newpc]

     Arguments:

  depadr

  Depth to which the procedure call  stack  is  to  be  unwound.   The
  depadr  argument  is  the  address of a longword value.  The value 0
  specifies the call frame of the procedure that  was  executing  when
  the  condition  occurred  (that  is,  no call frames are unwound), 1
  specifies the caller of the that frame, 2 specifies  the  caller  of
  the caller of that frame, and so on.

  newpc

  New value for the program counter  (PC);  this  value  replaces  the
  current  value  of  the  PC  in the call frame of the procedure that
  receives control when the  unwinding  operation  is  complete.   The
  newpc  argument  is a longword value containing the address at which
  execution is to resume.
2 $UPDSEC
  The Update Section File on Disk service writes all modified pages in
  an  active  private  or global section back into the section file on
  disk.  One or more I/O requests are queued, based on the  number  of
  pages that have been modified.

     Format:

       SYS$UPDSEC inadr [,retadr] [,acmode] [,updflg] [,efn] [,iosb] 
                  [,astadr] [,astprm]

     Arguments:

  inadr

  Starting and ending virtual addresses of the pages that  are  to  be
  written  to  the section file if they have been modified.  The inadr
  is the address of a two-longword array  containing,  in  order,  the
  starting and the ending process virtual addresses.  Only the virtual
  page number portion of each virtual address is used; the low-order 9
  bits are ignored.

  retadr

  Addresses of the first and last pages that were actually queued  for
  writing,  in  the  first  $QIO  request, back to the section file on
  disk.  The retadr argument is the address of  a  two-longword  array
  containing,  in order, the address of the first page and the address
  of the last page.

  acmode

  Access mode on behalf of which the service is performed.  The acmode
  argument  is  a  longword  containing  the access mode.  The $PSLDEF
  macro defines the symbols for the four access modes.

  updflg

  Update  specifier  for  read/write  global  sections.   The   updflg
  argument  is  a longword value.  The value 0 (the default) specifies
  that all read/write pages in the global section are to be written to
  the  section  file  on  disk, regardless of whether or not they have
  been modified.  The value 1 specifies that (1)  the  caller  is  the
  only process actually writing the global 
  section, and (2) only those
  pages that were actually modified by the caller are to be written to
  the section file on disk.

  efn

  Event flag to be set when the  section  file  on  disk  is  actually
  updated.   The  efn  argument is a longword specifying the number of
  the event flag.

  iosb

  I/O status block that is to receive the final completion  status  of
  the  updating  operation.   The  iosb argument is the address of the
  quadword I/O status block.

  astadr

  AST routine to be executed when the section file has  been  updated.
  The  astadr  argument  is  the  address  of  the  entry mask of this
  routine.

  astprm

  AST parameter to be passed to the AST routine.  The astprm  argument
  is this longword parameter.
2 $UPDESECW
  The Update Section File on Disk and Wait service writes all 
  modified pages in an active private or global section back into
  the section file on disk.  One or more I/O requests are queued,
  based on the number of pages that have been modified.

  The $UPDSECW service completes synchronously; that is, it returns
  to the caller after writing all the updated pages.

  For asynchronous completion, use the Update Section File on 
  Disk ($UPDSECW) service;  $UPDSECW returns to the caller after
  queuing the update request, without waiting for the pages to
  be updated.

  In all other respects, $UPDSECW is identical to $UPDSEC. Refer
  to the documentation of $UPDSEC for all other information about
  the $UPDSECW service.

  For additional information about system service completion, refer
  to the Synchronize ($SYNCH) service and to Section 2.5 in Part I.

      Format:

        SYS$UPDSECW  inadr  [,retadr] [,acmode] [,updflg] [,efn]
                     [,iosb]  [,astadr]  [,astprm]     
2 $WAITFR
  The Wait for Single Event Flag service tests a specific  event  flag
  and  returns immediately if the flag is set.  Otherwise, the process
  is placed in a wait state until the event flag is set.

     Format:

       SYS$WAITFR  efn

     Argument

  efn

  Number of the event flag for which to wait.  The efn argument  is  a
  longword containing this number.
2 $WAKE
  The Wake Process from Hibernation service activates a  process  that
  has  placed  itself  in  a  state  of hibernation with the Hibernate
  ($HIBER) service.

     Format:

       SYS$WAKE  [pidadr] [,prcnam]

     Arguments:

  pidadr

  Process identification (PID) of the process  to  be  awakened.   The
  pidadr argument is the address of a longword containing the PID.

  prcnam

  Process name of the process to be awakened.  The prcnam argument  is
  the  address  of  a  character string descriptor pointing to a 1- to
  15-character process name string.
2 $WFLAND
  The Wait for Logical AND of Event Flags service allows a process  to
  specify  a  set  of  event  flags  for which it wishes to wait.  The
  process is put in a wait state until all specified event  flags  are
  set,  at  which  time  $WFLAND  returns  to the caller and execution
  resumes.

     Format:

       SYS$WFLAND  efn ,mask

     Arguments:

  efn

  Number of any event flag within the event flag cluster that is to be
  used.   The  efn  argument  is  a  longword  containing this number.
  Specifying the number of an event flag within the cluster serves  to
  identify the event flag cluster.

  mask

  Event flags for which the process is to wait.  The mask argument  is
  a  longword  bit  vector  wherein  a  bit,  when  set,  selects  the
  corresponding event flag for which to wait.
2 $WFLOR
  The Wait for Logical OR of Event Flags service allows a  process  to
  specify  a  set  of  event  flags  for which it wishes to wait.  The
  process is put in a wait state until any one of the specified  event
  flags  is  set,  at  which  time  $WFLOR  returns  to the caller and
  execution resumes.

     Format:

       SYS$WFLOR  efn ,mask

     Arguments:

  efn

  Number of any event flag within the event flag cluster that is to be
  used.   The  efn  argument  is  a  longword  containing this number.
  Specifying the number of an event flag within the cluster serves  to
  identify the event flag cluster.

  mask

  Event flags for which the process is to wait.  The mask argument  is
  a  longword  bit  vector  wherein  a  bit,  when  set,  selects  the
  corresponding event flag for which to wait.
2 $ADD_HOLDER
  The Add Holder Record to Rights Database service adds the  specified
  holder record to the target identifier.

     Format:

       SYS$ADD_HOLDER id ,holder [,attrib]

     Arguments:

  id

  Target identifier granted to the specified holder  when  $ADD_HOLDER
  completes  execution.   The id argument is a longword containing the
  binary value of the target identifier.

  holder

  Holder identifier that is granted access to  the  target  identifier
  when  $ADD_HOLDER  completes  execution.  The holder argument is the
  address of a quadword data structure that  consists  of  a  longword
  containing  the  holder's  UIC  identifier  followed  by  a longword
  containing a value of zero.

  attrib

  Attributes to be placed in the holder record  when  the  $ADD_HOLDER
  completes execution.  The attrib argument is a longword containing a
  bitmask specifying the attributes.  A holder is granted a  specified
  attribute only if the target identifier has the attribute.
2 $ADD_IDENT
  The Add Identifier to Rights Database  service  adds  the  specified
  identifier to the rights database.

     Format:

       SYS$ADD_IDENT name [,id] [,attrib] [,resid]

     Arguments:

  name

  Identifier name to be added to the rights database  when  $ADD_IDENT
  completes  execution.   The  name  argument  is  the  address of the
  descriptor pointing to the identifier name string.

  id

  Identifier to be created when $ADD_IDENT completes  execution.   The
  id  argument  is  a  longword  containing  the  binary  value of the
  identifier to be created.

  attrib

  Attributes  placed  in  the  identifier's  record  when   $ADD_IDENT
  completes execution.  The attrib argument is a longword containing a
  bitmask specifying the attributes.

  resid

  Identifier value assigned by the system  when  $ADD_IDENT  completes
  execution.  The resid argument is the address of a longword in which
  the system-assigned identifier value is written.
2 $ASCTOID
  The Translate Identifier Name to Identifier service  translates  the
  specified identifier name into its binary identifier value.

     Format:

       SYS$ASCTOID name [,id] [,attrib]

     Arguments:

  name

  Identifier name translated when $ASCTOID completes  execution.   The
  name  argument  is  the  address  of  a  descriptor  pointing to the
  identifier name.

  id

  Identifier value resulting when $ASCTOID completes  execution.   The
  id  argument  is  the  address of a longword in which the identifier
  value is written.

  attrib

  Attributes associated  with  the  identifier  returned  in  id  when
  $ASCTOID completes execution.  The attrib argument is the address of
  a longword containing a bitmask specifying the attributes.
2 $CHANGE_ACL
  The Change Access  Control  List  service  creates  or  modifies  an
  object's access control list.

     Format:

       SYS$CHANGE_ACL [chan] ,objtyp [,objnam] ,itmlst [,acmode] [,] 
                  [,contxt] 

     Arguments:

  chan

  Number of the I/O channel  assigned  to  the  object  whose  ACL  is
  modified when $CHANGE_ACL completes execution.  The chan argument is
  a  word  containing  the  number  of  the  channel.   If  objnam  is
  specified, chan must be omitted or specified as zero.

  objtyp

  Type of object whose ACL  is  modified  when  $CHANGE_ACL  completes
  execution.   The  objtyp  argument  is  the  address  of  a longword
  containing a value indicating whether the object  is  a  file  or  a
  device.   The  symbols  are  defined  in  the  system  macro library
  ($ACLDEF).

       ACL$C_DEVICE                                          Object is
                        a device.

       ACL$C_FILE                                            Object is
                        a Files-11 Structure Level Two file.

  objnam

  Name of the object whose ACL is modified when $CHANGE_ACL  completes
  execution.   The  objnam  argument  is  the  address of a descriptor
  pointing to a character text  string  containing  the  name  of  the
  object.  The maximum length of objnam depends on the object.

  itmlst

  Modifications to be made  to  the  ACL  when  $CHANGE_ACL  completes
  execution.   The itmlst argument is the address of a variable length
  data structure defining the changes to be made.  The data  structure
  consists of three elements for each item code, as follows:

  End the item list with a longword containing the value zero.

       buflen                                          Word containing
                  the  number  of  bytes  in  the buffer pointed to by
                  bufadr

       code                                            Word containing
                  the item code

       bufadr                                          Longword
                  containing  the  address of a buffer for information
                  being passed to or from $CHANGE_ACL

                                                       The       third
                  longword of the standard item list entry is not used
                  by $CHANGE_ACL and should be zero.

  acmode

  Access mode to use in checking file access protection.   The  acmode
  argument  is  the  address of a longword containing the access mode.
  Acmode defaults to kernel mode; however, the system compares  acmode
  against the caller's access mode and uses the least privileged mode.

  ,

  Placeholder for null argument.  If you specify the contxt argument
  you must specify this comma (,) as well as the comma before
  the contxt argument.

  For example:
 
      SYS$CHANGE_ACL  ,objtyp ,itmlst ,acmode , ,contxt

  contxt

  Context value that points to an ACE.  The  contxt  argument  is  the
  address of a longword containing the context value.
2 $CHKPRO
  The Check Access Protection system  service  determines  whether  an
  accessor  with  the  specified  rights  and privileges can access an
  object with the specified attributes.

     Format:

       SYS$CHKPRO itmlst

     Arguments:

  itmlst

  Protection attributes of the object and the rights and privileges of
  the accessor used when $CHKPRO determines if the accessor can access
  the object.  The itmlst argument is the address of an item  list  of
  descriptors  used to specify the protection attributes of the object
  and the rights and privileges of the accessor.
2 $CREATE_RDB
  The Create Rights Database service initializes a rights database.

     Format:

       SYS$CREATE_RDB [sysid]

     Arguments:

  sysid

  System identification value associated with the rights database when
  $CREATE_RDB  completes execution.  The sysid argument is the address
  of quadword containing the system identification value.  If sysid is
  omitted, the current system time in 64-bit format is used.
2 $ERAPAT
  The Get Security Erase Pattern service generates  a  security  erase
  pattern.   A  user-written erase routine can then write this pattern
  into areas of memory containing sensitive data that is no longer  in
  use to prevent the inadvertent disclosure of the sensitive data.

     Format:

       SYS$ERAPAT type ,count ,patadr

     Arguments:

  type

  Type of storage to be written over with the erase pattern.  The type
  argument  is  a  longword containing the type of storage.  The three
  storage types and their  symbolic  names  (defined  by  the  $ERADEF
  macro) follow:


       Storage type                                          Symbolic
       name

       Main memory
                                                  ERA$K_MEMORY
       Disk
                                                         ERA$K_DISK
       Tape
                                                         ERA$K_TAPE

  count

  The number of times  that  $ERAPAT  has  been  called  in  a  single
  security   erase  operation.   The  count  argument  is  a  longword
  containing the iteration count.

  patadr

  The security erase pattern to be written.  The patadr is the address
  of  a  longword  into  which  the  security  erase  pattern is to be
  written.
2 $FORMAT_ACL
  The Format Access Control List Entry service formats  the  specified
  ACL entry (ACE) into a text string.

     Format:

       SYS$FORMAT_ACL aclent [,acllen] ,aclstr [,width] [,trmdsc]
                  [,indent] 
                  [,accnam]

     Arguments:

  aclent

  Description  of  the  ACE  formatted  when   $FORMAT_ACL   completes
  execution.   The  aclent  argument  is  the  address of a descriptor
  pointing to a buffer containing the ACE description.  The first byte
  of  the  buffer  contains  the  length  of  the ACE; the second byte
  contains a value that identifies the type  of  ACE,  which  in  turn
  determines the ACE format.

  acllen

  Length of the output string  resulting  when  $FORMAT_ACL  completes
  execution.   The acllen argument is the address of a word containing
  the number of characters written to aclstr.

  aclstr

  Formatted ACE resulting when $FORMAT_ACL  completes  its  execution.
  The  aclstr  argument is the address of a string descriptor pointing
  to a buffer containing the output string.

  width

  Maximum width  of  the  formatted  ACE  resulting  when  $FORMAT_ACL
  completes  its  execution.   The  width argument is the address of a
  word containing the maximum width of the  formatted  ACE.   If  this
  argument  is  omitted  or  contains zero, an infinite length display
  line is assumed.

  trmdsc

  Line termination character(s) used in the formatted ACE.  The trmdsc
  argument is the address of a descriptor pointing to character string
  containing the termination character(s) for each formatted ACE.

  indent

  Number of blank characters at the beginning of  the  formatted  ACE.
  The  indent  argument is the address of a word containing the number
  of blank characters at the beginning of each formatted ACE.

  accnam

  Names of the bits in the access mask when executing the $FORMAT_ACL.
  The  accnam  argument  is  the  address  of  an array of 32 quadword
  descriptors that define the names of the bits in  the  access  mask.
  Each  element  points to the name of a bit.  The first element names
  bit 0, the second element names bit 1  and  so  on.   If  accnam  is
  omitted, the following names are used:

       Bit 0    READ
       Bit 1    WRITE
       Bit 2    EXECUTE
       Bit 3    DELETE
       Bit 4    CONTROL
       Bit 5    BIT_5
       Bit 6    BIT_6
          .
          .
          .
       Bit 31   BIT_31
2 $FIND_HOLDER
  The Find Holder of  Identifier  service  returns  the  holder  of  a
  specified   identifier.   When  called  repeatedly  with  a  context
  longword, it returns all the holders of the specified identifier  in
  the order in which they were added.

     Format:

       SYS$FIND_HOLDER id [,holder] [,attrib] [,contxt]

     Arguments:

  id

  Binary identifier value whose holder(s) is  found  by  $FIND_HOLDER.
  The  id  argument  is  a  longword  containing the binary identifier
  value.

  holder

  Holder identifier returned when  $FIND_HOLDER  completes  execution.
  The  holder  argument  is  the  address of a quadword containing the
  holder identifier.  The first  longword  contains  the  UIC  of  the
  holder  with the high-order word containing the group number and the
  low-order word containing the member number.   The  second  longword
  contains the value zero.

  attrib

  Mask of attributes associated with the holder  record  specified  by
  holder.  The attrib argument is the address of a longword containing
  the attribute mask.

  contxt

  Context value used while  searching  for  all  the  holders  of  the
  specified   identifier  when  executing  $FIND_HOLDER.   The  contxt
  argument is the address of a longword containing the context  value.
  When  calling  $FIND_HOLDER repeatedly, contxt must be set initially
  to zero and the resulting context of each call to $FIND_HOLDER  must
  be  presented  to  each subsequent call.  Once the argument has been
  passed to SYS$FIND_HOLDER, do not modify its value.
2 $FIND_HELD
  The Find Identifiers Held by User service returns the  identifier(s)
  held  by  a specified holder.  When called repeatedly with a context
  longword, it returns in succession all the identifiers held  by  the
  specified holder.

     Format:

       SYS$FIND_HELD holder [,id] [,attrib] [,contxt]

     Arguments:

  holder

  Holder whose identifier(s) are to be found when $FIND_HELD completes
  execution.   The  holder  argument is the address of a quadword data
  structure containing the  holder  identifier.   This  quadword  data
  structure consists of a longword containing the holder UIC, followed
  by a longword containing the value zero.

  id

  Identifier value found when $FIND_HELD completes execution.  The  id
  argument  is  the  address  of  a longword containing the identifier
  value with which the holder is associated.

  attrib

  Attributes associated with the identifier returned in  id  when  the
  $ADD_HOLDER completes execution.  The attrib argument is the address
  of a longword containing a bitmask specifying the attributes.

  contxt

  Context value used when repeatedly calling $FIND_HELD.   The  contxt
  argument  is  the address of a longword used while searching for all
  identifiers.  The context value must initialized to  zero,  and  the
  resulting  context  of  each call to $FIND_HELD must be presented to
  each subsequent call.  Once contxt has been passed to SYS$FIND_HELD,
  do not modify its value.
2 $FINISH_RDB
  The Terminate Rights Database Context service deallocates the record
  stream   and   clears   the  context  value  used  with  $FIND_HELD,
  $FIND_HOLDER, or $IDTOASC.

     Format:

       SYS$FINISH_RDB contxt

     Arguments:

  contxt

  Context value to be cleared when  $FINISH_RDB  completes  execution.
  The  contxt  argument  is  a  longword containing the address of the
  context value.
2 $GRANTID
  The  Grant  Identifier  to  Process  service  adds   the   specified
  identifier  record  to  the  process'  rights  list or to the system
  rights list.  If the identifier is already in the rights  list,  the
  attributes are modified as specified.

     Format:

       SYS$GRANTID [pidadr] [,prcnam] [,id] [,name] [,prvatr]

     Arguments:

  pidadr

  Process identification number (PID) of  the  process  affected  when
  $GRANTID completes execution.  The pidadr argument is the address of
  longword containing the PID of process to be affected.  Use  --1  to
  indicate  the system rights list.  When pidadr is passed, it is also
  returned; therefore, you must pass it as a variable  rather  than  a
  constant.   If  neither  pidadr  nor  prcnam  is specified, your own
  process is used.

  prcnam

  Process name on which $GRANTID operates.  The prcnam argument is the
  address  of  a  character  string  descriptor containing the process
  name.  The maximum length of the name is 15 characters.   Since  the
  UIC  group  number  is  interpreted as part of the process name, you
  must use pidadr to specify  the  rights  list  of  a  process  in  a
  different  group.   If  neither pidadr nor prcnam is specified, your
  own process is used.

  id

  Identifier and attributes to  be  granted  when  $GRANTID  completes
  execution.   The id argument is the address of a quadword containing
  the binary identifier code to be granted in the first  longword  and
  the attributes in the second longword.

  name

  Name of the identifier granted when  $GRANTID  completes  execution.
  The  name  argument  is  the address of a descriptor pointing to the
  name of the identifier.  Either id or name must be specified.

  prvatr

  Previous attributes of the identifier.  The prvatr argument  is  the
  address of a longword used to store the attributes of the identifier
  if it was previously present in the rights list.  If the  identifier
  was added rather than modified, prvatr is ignored.
2 $IDTOASC
  The Translate Identifier to Identifier Name service  translates  the
  specified identifier value to its identifier name.

     Format:

       SYS$IDTOASC id [,namlen] [,nambuf] [,resid] [,attrib] [,contxt]

     Arguments:

  id

  Binary identifier value translated by $IDTOASC.  The id argument  is
  a  longword  containing  the  binary  value  of  the identifier.  To
  determine the identifier names of  all  identifiers  in  the  rights
  database, specify id as --1 and call SYS$IDTOASC repeatedly until it
  returns the status code SS$_NOSUCHID.  The identifiers are  returned
  in alphabetical order.

  namlen

  Number of characters in the identifier name translated by  $IDTOASC.
  The  namlen  argument is the address of a word containing the length
  of the identifier name written to nambuf.

  nambuf

  Identifier name text string returned  when  $IDTOASC  completes  the
  translation.   The  nambuf  argument  is the address of a descriptor
  pointing to the buffer in which the identifier name is written.

  resid

  Identifier value of the identifier name  returned  in  nambuf.   The
  resid  argument  is  the address of a longword containing the 32-bit
  code of the identifier.

  attrib

  Mask of attributes associated with the identifier returned in resid.
  The  attrib  argument  is  the  address of a longword containing the
  attribute mask.

  contxt

  Context value used when repeatedly  calling  $IDTOASC.   The  contxt
  argument  is  the address of a longword used while searching for all
  identifiers.  The context value must be initialized to zero, and the
  resulting context of each call to $IDTOASC must be presented to each
  subsequent call.  Once contxt has been passed to  $IDTOASC,  do  not
  modify its value.
2 $MOD_HOLDER
  The Modify Holder Record in Rights  Database  service  modifies  the
  specified  holder  record  of  the  target  identifier in the rights
  database.  Identifier attributes may be added, or removed, or both.

     Format:

       SYS$MOD_HOLDER id, holder [,set_attrib] [,clr_attrib]

     Arguments:

  id

  Binary value of target identifier whose holder  record  is  modified
  when $MOD_HOLDER completes execution.  The id argument is a longword
  containing the identifier value.

  holder

  Identifier of  holder  being  modified  when  $MOD_HOLDER  completes
  execution.   The  holder  argument  is  the  address  of  a quadword
  containing the UIC identifier of the holder in  the  first  longword
  and the value of zero in the second longword.

  set_attrib

  Bitmask  of  attributes  to  be  enabled  for  the  identifier  when
  $MOD_HOLDER  completes  execution.   The  set_attrib  argument  is a
  longword containing the attribute mask.

  clr_attrib

  Bitmask of  attributes  to  be  disabled  for  the  identifier  when
  $MOD_HOLDER  completes  execution.   The  clr_attrib  argument  is a
  longword containing the attribute mask.
2 $MOD_IDENT
  The Modify  Identifier  in  Rights  Database  service  modifies  the
  specified  identifier  record  in  the  rights database.  Identifier
  attributes may be added, or removed, or both.  The  identifier  name
  or value may be changed.

     Format:

       SYS$MOD_IDENT id ,[set_attrib] ,[clr_attrib] ,[new_name] ,
                  [new_value] 

     Arguments:

  id

  Binary value of identifier whose identifier record is modified  when
  $MOD_IDENT  completes  execution.   The  id  argument  is a longword
  containing the identifier value.

  set_attrib

  Bitmask  of  attributes  to  be  enabled  for  the  identifier  when
  $MOD_IDENT  completes  execution.   The  set_attrib  argument  is  a
  longword containing the attribute mask.

  clr_attrib

  Bitmask of  attributes  to  be  disabled  for  the  identifier  when
  $MOD_IDENT  completes  execution.   The  clr_attrib  argument  is  a
  longword containing the attribute mask.

  new_name

  New name to be given to  the  specified  identifier.   The  new_name
  argument is the address of the descriptor pointing to the identifier
  name string.

  new_value

  New value to be assigned to the specified identifier.  The new_value
  argument  is a longword containing the binary value of the specified
  identifier.  When the identifier value is changed,  $MOD_IDENT  also
  changes  the value of the identifier in all of the holder records in
  which the specified identifier appears.
2 $MTACCESS
  The Magnetic Tape  Accessibility  service  allows  installations  to
  provide  their own routine to interpret and output the accessibility
  field in the VOL1 and HDR1 labels of an ANSI labeled magnetic  tape.
  (ANSI  refers  to  the  American National Standard for Magnetic Tape
  Labels and File  Structure  for  Information  Interchange  --  ANSI,
  x3.27-1978)

     Format:

       SYS$MTACCESS lblnam ,uic ,std_version ,access_char ,access_spec
                  ,type

     Arguments:

  lblnam

  ANSI label to be processed.  The lblnam argument is the address of a
  longword containing the label.  On input, the label passed is either
  the VOL1 or HDR1 label read from the magnetic  tape;  on  output  of
  labels,  this field is zero.  The type of label passed is determined
  by type.

  uic

  UIC of the user performing the operation.  The  uic  argument  is  a
  longword containing the UIC.

  std_version

  Decimal equivalent of the ANSI standard version read from  the  VOL1
  label.   The  std_version argument is a byte containing the standard
  version number.

  access_char

  Accessibility character specified  by  the  user.   The  access_char
  argument  is  a byte containing the accessibility character used for
  the output of labels.

  access_spec

  Value specifying  whether  the  accessibility  character  passed  in
  access_char  was specified by the user.  The access_spec argument is
  a byte containing one of the following values:


       Value
                                                           Meaning

       MTA$K_CHARVALID                                          Yes
       MTA$K_NOCHAR                                             No

  type

  Type of accessibility field to process.  The type argument is a byte
  containing one of the following values:


       Value                                                  Meaning

       MTA$K_INVOL1                                           Input a
       VOL1 label
       MTA$K_INHDR1                                           Input a
       HDR1 label
       MTA$K_OUTVOL1                                          Output a
       VOL1 label
       MTA$K_OUTHDR1                                          Output a
       HDR1 label
2 $PARSE_ACL
  The Parse Access Control List Entry  service  parses  the  specified
  text  string  and  converts it into the binary representation for an
  access control list entry (ACE).

     Format:

       SYS$PARSE_ACL aclstr ,aclent [,errpos] [,accnam]

     Arguments:

  aclstr

  Formatted ACE that is parsed when  $PARSE_ACL  completes  execution.
  The  aclstr  argument is the address of a string descriptor pointing
  to the text string to be parsed.

  aclent

  Description of the ACE that  is  parsed  when  $PARSE_ACL  completes
  execution.   The  aclent  argument  is  the  address of a descriptor
  pointing to the buffer in which the ACE is written.  The first  byte
  of  the  buffer  contains  the  length  of  the ACE; the second byte
  contains a value that identifies the type  of  ACE,  which  in  turn
  defines  the  format of the ACE.  See the SYS$FORMAT_ACL service for
  information on the ACE types and their associated formats.

  errpos

  Number of characters from aclstr processed  by  SYS$PARSE_ACL.   The
  errpos argument is the address of a word that receives the number of
  characters actually processed by the service.  If the service fails,
  this count points to the failing point in the string.

  accnam

  Names of the bits in the access mask when executing $PARSE_ACL.  The
  accnam   argument  is  the  address  of  an  array  of  32  quadword
  descriptors that define the names of the bits in  the  access  mask.
  Each  element  points to the name of a bit.  The first element names
  bit 0, the second element names bit 1, and  so  on.   If  accnam  is
  omitted, the following names are used:

       Bit 0    READ
       Bit 1    WRITE
       Bit 2    EXECUTE
       Bit 3    DELETE
       Bit 4    CONTROL
       Bit 5    BIT_5
       Bit 6    BIT_6
          .
          .
          .
       Bit 31   BIT_31
2 $REM_HOLDER
  Deletes the specified holder record  from  the  target  identifier's
  list of holders.

     Format:

       SYS$REM_HOLDER id ,holder

     Arguments:

  id

  Binary value of target  identifier  whose  holder  is  deleted  when
  $REM_HOLDER  completes  execution.   The  id  argument is a longword
  containing the identifier value.

  holder

  Identifier  of  holder  being  deleted  when  $REM_HOLDER  completes
  execution.   The  holder  argument  is  the  address  of  a quadword
  containing the UIC identifier of the holder in  the  first  longword
  and the value of zero in the second longword.
2 $REM_IDENT
  The Remove Identifier  from  Rights  Database  service  removes  the
  specified identifier record and all its holder records (if any) from
  the rights database.

     Format:

       SYS$REM_IDENT  id

     Arguments:

  id

  Binary  value  of  identifier  deleted  from  rights  database  when
  $REM_IDENT  completes  execution.   The  id  argument  is a longword
  containing the identifier value.
2 $REVOKID
  The Revoke Identifier from Process  service  removes  the  specified
  identifier from the process's rights list, or from the system rights
  list.  If the  identifier  is  listed  as  a  holder  of  any  other
  identifier, the appropriate holder records are also deleted.

     Format:

       SYS$REVOKID  [pidadr] [,prcnam] [,id] [,name] [,prvatr]

     Arguments:

  pidadr

  Process identification number (PID) of  the  process  affected  when
  $REVOKID completes execution.  The pidadr argument is the address of
  longword containing the PID of process to be affected.  Use  --1  to
  indicate  the system rights list.  When pidadr is passed, it is also
  returned; therefore, you must pass it as a variable  rather  than  a
  constant.

  prcnam

  Process name on which $REVOKID operates.  The prcnam argument is the
  address  of  a  character  string  descriptor containing the process
  name.  The maximum length of the name is 15 characters.   Since  the
  UIC  group  number  is  interpreted as part of the process name, you
  must use pidadr to specify  the  rights  list  of  a  process  in  a
  different group.

  id

  Identifier and attributes to  be  removed  when  $REVOKID  completes
  execution.   The id argument is the address of a quadword containing
  the binary identifier code to be removed in the first  longword  and
  the attributes in the second longword.

  name

  Name of the identifier removed when  $REVOKID  completes  execution.
  The  name  argument  is  the address of a descriptor pointing to the
  name of the identifier.

  prvatr

  Attributes of the deleted identifier.  The prvatr  argument  is  the
  address   of  a  longword  used  to  store  the  attributes  of  the
  identifier.
