MODULE DBGSSV (	IDENT = 'V04-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
! FACILITY:	DEBUG
!
!++
! FUNCTIONAL DESCRIPTION:
!	Contains SHOW MODULE and SHOW TYPE code.
!
! Version:	1.0
!
! History:
!	Author:
!		Carol Peters, 21 Sep 1976: Version 01
!
!	Most of the code was eliminated for version 4 of DEBUG, with
!	only the SHOW MODULE and SHOW TYPE routines remaining.
!		- R. Title  28 Apr 1983
!
!	Add support for PACKED type
!		- W. Carrell 12-Jul-83
!
!	Add support for DATE_TIME type
!		- W. Carrell 18-Jul-83
!--

! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    	DBG$OUT_NUM_VAL : NOVALUE,
	DBG$READ_ACCESS,		! PROBE read accessability.
	DBG$SHOW_MODULE : NOVALUE,	! List off the module chain.
	DBG$SHOW_TYPE : NOVALUE;	! Print out the current TYPE.
	
!
! REQUIRE FILES:
!

REQUIRE 'SRC$:DBGPROLOG.REQ';
LIBRARY 'LIB$:DBGGEN.L32';

MACRO
	IF_SIGNAL (code)  =
	    IF .signal_flag NEQ 0
	    THEN
		BEGIN
		    IF NOT
		    	( IF %LENGTH GTR 1
			  THEN dbg$nout_info (code, %REMAINING)
			  ELSE dbg$nout_info (code))
		    THEN
			BEGIN
			    .signal_flag = (IF %LENGTH GTR 1
					    THEN
						dbg$nmake_arg_vect (code, %REMAINING)
					    ELSE
						dbg$nmake_arg_vect (code));
			    RETURN sts$k_severe;
			END
		END
	    ELSE
		BEGIN
		    IF %LENGTH GTR 1
		    THEN
			SIGNAL (code, %REMAINING)
		    ELSE
			SIGNAL (code)
		END %;

MACRO
	SET_FLAG (param_num) =
	    LOCAL
		signal_flag;

	    signal_flag = (IF actualcount () GTR param_num
			   THEN
				actualparameter (actualcount())
			   ELSE
				0) %;


!
! EQUATED SYMBOLS:
!

EXTERNAL ROUTINE
	dbg$flushbuf:  NOVALUE,		! Initializes new print line.
	dbg$free_mem_left,		! Longwords remaining in free storage.
	dbg$language,			! Report on a given language name.
    	dbg$nget_radix,			! Obtain radix
    	dbg$nmake_arg_vect,
	dbg$newline:  NOVALUE,		! Outputs print buffer to output device
    	dbg$nout_info,
	dbg$print:  NOVALUE,		! Formats print buffer for output
    	dbg$sta_symname: NOVALUE,
	for$cnv_out_i;			! Converts integer to ascii string.

EXTERNAL
	dbg$gw_dfltleng : WORD,			! The length specified in a SET TYPE statement.
	dbg$gw_gbllngth : WORD,			! the length given in a SET TYPE/OVERRIDE ASCII:LENGTH command.
	dbg$gl_gbltyp,				! the type given in a SET TYPE/OVERRIDE command.
	dbg$gl_dflttyp,				! the type specified in a SET TYPE statement.
	rst$start_addr: REF rst$entry;		! Pointer to the module chain (MC).	

GLOBAL ROUTINE DBG$OUT_NUM_VAL (VALUE) : NOVALUE =
!++
! Functional Description:
!	Write out the given value.
!
! Inputs:
!	VALUE - the actual value we are to write out.
!
! Outputs:
!	The (numeric) character representation
!	of the value is encoded into the output buffer.
!
! Implicit Outputs:
!	None.
!
! Routine Value:
!	NOVALUE.
!---
    BEGIN

    ! We want to look at the passed-in value
    ! as a byte vector only to see if we may
    ! need to put in a leading 0 for hex output.
    !
    MAP
	value : vector[ %UPVAL, byte ];

    LOCAL
	use_radix;

    OWN
	format : VECTOR[4,BYTE]	INITIAL(BYTE(%ASCIC '!??'));

    use_radix = dbg$nget_radix();

    !  Now just build the required 2-character format
    !  string descriptor, based upon the current
    !  setting of the radix.
    !
    format[2] = (SELECTONE .use_radix OF
			SET
    			[dbg$k_binary]:		'B';
			[dbg$k_octal]:		'O';
			[dbg$k_decimal]:        'S';
			[dbg$k_hex]:		'X';
			TES
		    );
    format[3] = 'L';

    ! Check for hex output which begins with A-F
    !	
    IF .use_radix EQL dbg$k_hex
    THEN

	! Perform the check by extracting the upper BYTE of
	! what we will later output, comparing that byte with
	! the max hex number we will print out 'unadorned',
	! and then inserting a leading 0 if the check fails.
    	!
	IF .value[3] GTRA %X'9F' 
	THEN
	    dbg$print(UPLIT(%ASCIC '0'));
		
    ! Output the value and we're done.
    !
    dbg$print(format,.value);
    END;

GLOBAL ROUTINE DBG$READ_ACCESS( ADDR, NUM_BYTES ) =
!++
! Functional Description:
!	Check that we have READ access for the number
!	of bytes indicated, starting at the given address.
!
!	Note that this routine has been modified to use version 3 error
!	reporting, when appropriate.
!
! Inputs:
!	ADDR		-Byte address where desired data begins.
!	NUM_BYTES	-Number of bytes which we want to access.
!	[message_vect]  - Address of a longword to contain the address of a
!			  message argument vector
!
! Implicit Inputs:
!	The PROBER instruction insists on using PSL <prev>, whether
!	we want it to or not.  Until/unless DEBUG is changed to be a
!	multi-mode tool, we will be OK as we are now.  Then, however,
!	we will have to put in substantially more code here to ensure
!	that current and previous mode are the same.
!
! Outputs:
!	None.
!
! Implicit Outputs:
!	None.
!
! Routine Value:
!	TRUE - if access will be granted,
!	If access is not possible routine signals and no return happens, if
!	a version 2 routine has called. If a version 3 has called with the
!	message_vect parameter, then this routine creates a message argument
!	vector and returns error.
!
!
! Side Effects:
!	None.
!
!--

	BEGIN
	BUILTIN
		ACTUALCOUNT,
		ACTUALPARAMETER,
		PROBER;	

	! Set up error handling for version 3 calls

	set_flag (2);

	! Note that we must pass PROBER a zero-extended WORD 
	! address for the LENGTH, and a BYTE address containing
	! the MODE field for the instruction.
	! Later, this byte field should be built by extracting
	! the proper 3 bits from the PSL.

	IF NOT PROBER( %REF(0), NUM_BYTES, .ADDR)
	THEN
	    IF_SIGNAL( dbg$_noaccessr, 1, .addr );	! Output error message

	RETURN TRUE;
	END;

GLOBAL ROUTINE DBG$SHOW_MODULE: NOVALUE =
!
! FUNCTION
!	This routine prints out the SHOW MODULE display.  It first scans all
!	modules in the RST Module Chain to see if they are all written in the
!	same language.  If they are, the language name is omitted in the SHOW
!	MODULE output.  It then makes a second pass over the RST Module Chain
!	to print out the appropriate information for each module in the chain.
!
!	Since the language code may not be set in the Module RST Entry for a
!	module which is not SET, the language code is always retrieved from
!	the Module Begin DST Record for each module.
!
! INPUTS
!	NONE
!
! OUTPUTS
!	NONE
!

    BEGIN

    LOCAL
	DSTPTR: REF DST$RECORD,		! Pointer to Module Begin DST Record
	FIRST_TIME_FLAG,		! Flag set first time through loop
	LANG_CHANGE,			! Flag set if all languages are the same
	LANG_CODE,			! Language encoding for each module
	MODRSTPTR: REF RST$ENTRY,	! Pointer to current Module RST Entry
	NAMEPTR: REF VECTOR[,BYTE],	! Pointer to ASCIC language name
	NUMBER_MODULES;			! The number of modules in the program



    ! Set up to do standard DEBUG I/O.
    !
    DBG$FLUSHBUF();


    ! If there is no RST Module Chain or if the only module on that chain is
    ! the "anonymous" module used for global symbols, then we signal a message
    ! and return immediately.
    !
    IF .RST$START_ADDR EQL 0
    THEN
	BEGIN
	SIGNAL(DBG$_NOLOCALS);
	RETURN;
	END;

    IF .RST$START_ADDR[RST$L_NXTMODPTR] EQL 0
    THEN
	BEGIN
	SIGNAL(DBG$_NOLOCALS);
	RETURN;
	END;


    ! See if all modules happen to be written in the same language.  To do this
    ! we scan the whole RST Module Chain, checking the language codes.  Note
    ! we always pick up the language code from the Module Begin DST Record as
    ! it may not be set in the Module RST Entry for a module which is not SET.
    !
    LANG_CHANGE = FALSE;
    MODRSTPTR = .RST$START_ADDR[RST$L_NXTMODPTR];
    FIRST_TIME_FLAG = TRUE;
    WHILE .MODRSTPTR NEQ 0 DO
	BEGIN
	DSTPTR = .MODRSTPTR[RST$L_DSTPTR];
	IF .DSTPTR[DST$B_TYPE] NEQ DST$K_MODBEG THEN SIGNAL(DBG$_INVDSTREC);
	MODRSTPTR[RST$B_LANGUAGE] = .DSTPTR[DST$L_MODBEG_LANGUAGE];
	IF .FIRST_TIME_FLAG
	THEN
	    BEGIN
	    FIRST_TIME_FLAG = FALSE;
	    LANG_CODE = .MODRSTPTR[RST$B_LANGUAGE];
	    END

	ELSE IF .LANG_CODE NEQ .MODRSTPTR[RST$B_LANGUAGE]
	THEN
	    BEGIN
	    LANG_CHANGE = TRUE;
	    EXITLOOP;
	    END;

	MODRSTPTR = .MODRSTPTR[RST$L_NXTMODPTR];
	END;


    ! Print the column header lines for the SHOW MODULE display.
    !
    DBG$PRINT(UPLIT(%ASCIC 'module name                     symbols '));
    IF .LANG_CHANGE THEN DBG$PRINT(UPLIT(%ASCIC '  language' ));
    DBG$PRINT(UPLIT(%ASCIC '   size'));
    DBG$NEWLINE();
    DBG$NEWLINE();


    ! Loop through the RST Module Chain and for each module, print the relevant
    ! information.  Note that we bypass the "anonymous" module at the start of
    ! the chain--it does not constitute a real module to the user.
    !
    MODRSTPTR = .RST$START_ADDR[RST$L_NXTMODPTR];
    NUMBER_MODULES = 0;
    WHILE .MODRSTPTR NEQ 0 DO
	BEGIN
	NUMBER_MODULES = .NUMBER_MODULES + 1;


	! Abort the SHOW MODULE output if the user entered Control-Y DEBUG to
	! stop the current command.
	!
	$ABORT_ON_CONTROL_Y;


	! Print out the standard information.  Start by printing out the module
	! name.  Note that we special-case names longer than 31 characters.
	!
	DBG$FLUSHBUF();
	DBG$STA_SYMNAME(.MODRSTPTR, NAMEPTR);
	IF .NAMEPTR[0] LEQ 31
	THEN
	    DBG$PRINT(UPLIT(%ASCIC '!31AC '), .NAMEPTR)

	ELSE
	    BEGIN
	    DBG$PRINT(UPLIT(%ASCIC '!63AC'), .NAMEPTR);
	    DBG$NEWLINE();
	    DBG$PRINT(UPLIT(%ASCIC '!32* '));
	    END;


	! Now print out whether or not the module has be SET, i.e. whether or
	! not its RST has been built.
	!
	IF .MODRSTPTR[RST$V_MODSET]
	THEN
	    DBG$PRINT(UPLIT(%ASCIC 'yes     '))

	ELSE
	    DBG$PRINT(UPLIT(%ASCIC 'no      '));


	! Unless all modules are written in the same language, output the name
	! of the language in which this module was written.  Finally print the
	! module's estimated RST size and output the buffer.  Then link to the
	! next module in the chain.
	!
	DSTPTR = .MODRSTPTR[RST$L_DSTPTR];
	MODRSTPTR[RST$B_LANGUAGE] = .DSTPTR[DST$L_MODBEG_LANGUAGE];
	IF .LANG_CHANGE
	THEN
    	    BEGIN
    	    IF .MODRSTPTR[RST$V_SHARE_IMAGE]
    	    THEN
    		DBG$PRINT(UPLIT(%ASCIC '  Image   '))
    	    ELSE
	    	DBG$PRINT(UPLIT(%ASCIC '  !8AC'),
				DBG$LANGUAGE(.MODRSTPTR[RST$B_LANGUAGE]));
    	    END;

	DBG$PRINT(UPLIT(%ASCIC '!7SL'), .MODRSTPTR[RST$L_MODRSTSIZ]);
	DBG$NEWLINE();
	MODRSTPTR = .MODRSTPTR[RST$L_NXTMODPTR];
	END;


    ! Print the summary information at the end of the SHOW MODULE output.  This
    ! includes the total number of modules and the number of bytes of free
    ! memory left.  The language name is included if all modules were written
    ! in the same language.
    !
    DBG$NEWLINE();
    DBG$PRINT(UPLIT(%ASCIC 'total '));
    IF NOT .LANG_CHANGE
    THEN
	DBG$PRINT(UPLIT(%ASCIC '!AC '), DBG$LANGUAGE(.LANG_CODE));

    DBG$PRINT(UPLIT(%ASCIC 'modules: !SL.'), .NUMBER_MODULES);
    DBG$PRINT(UPLIT(%ASCIC '!_!_remaining size: !SL.'), 4*DBG$FREE_MEM_LEFT());
    DBG$NEWLINE();

    END;

GLOBAL ROUTINE DBG$SHOW_TYPE(FLAG) : NOVALUE =
!++
! Functional Description:
!
!	Print out the type specified in a SET TYPE[/OVERRIDE] statement,
!	depending on the value of the input parameter.
!
! Formal Parameters:
!
!	A flag to indicate whether the override type or the default type is to
!	be printed 
!
! Implicit Inputs:
!
!	The type information stored in dbg$gl_dflttyp, dbg$gw_dfltleng, 
!		dbg$gbl_gbltyp, dbg$gw_gbllngth.
!
! Return Value:
!
!	NOVALUE
!
!--

BEGIN
	LOCAL
		LENGTH, 		! local storage for the appropriate
		TYPE;			! length and type values.


	! Set up to use a new output buffer,
	! and encode the standard beginning of
	! the SHOW TYPE message into it.
    	!
	dbg$flushbuf();

	! Insert the standard prefix.
    	!
	CASE .flag FROM default TO override OF
	    SET
		[default] :
				BEGIN
    				dbg$print (UPLIT( %ASCIC 'type: '));
				type = .dbg$gl_dflttyp;
				length = .dbg$gw_dfltleng;
				END;

		[override] : 	
				BEGIN
    				dbg$print (UPLIT( %ASCIC 'type/override: '));
				type = .dbg$gl_gbltyp;
				length = .dbg$gw_gbllngth;
				END;
	    TES;
	
	! We print out a character string which indicates the type.
    	!
	CASE .type FROM -1 TO dbg$k_maximum_dtype OF
		SET
		[-1] :
			dbg$print (UPLIT( %ASCIC 'none'));
    		[dsc$k_dtype_ac] :
    			dbg$print (UPLIT( %ASCIC 'ascic'));
		[dsc$k_dtype_t, dsc$k_dtype_p] :
			BEGIN
				
			! put keyword in buffer
    			!
			IF .type EQL dsc$k_dtype_t
			THEN
			    dbg$print(UPLIT( %ASCIC 'ascii: '))
			ELSE
			    dbg$print(UPLIT( %ASCIC 'packed: '));

                        ! output the value in the current radix
                        !
                        DBG$OUT_NUM_VAL(.LENGTH);

			END;
    		[dsc$k_dtype_az] :
    			dbg$print (UPLIT (%ASCIC 'asciz'));
		[dsc$k_dtype_b] :
    			dbg$print (UPLIT( %ASCIC 'byte integer'));
		[dsc$k_dtype_d] :
			dbg$print (UPLIT( %ASCIC 'd_float' ));
		[dsc$k_dtype_f] :
			dbg$print (UPLIT( %ASCIC 'f_float' ));
		[dsc$k_dtype_g] :
			dbg$print (UPLIT( %ASCIC 'g_float' ));
		[dsc$k_dtype_h] :
			dbg$print (UPLIT( %ASCIC 'h_float' ));
		[dsc$k_dtype_l] : 
    			dbg$print (UPLIT( %ASCIC 'long integer'));
		[dsc$k_dtype_o] :
			dbg$print (UPLIT( %ASCIC 'octaword integer' ));
		[dsc$k_dtype_q] :
			dbg$print (UPLIT( %ASCIC 'quadword integer' ));
		[dsc$k_dtype_w] :
    			dbg$print (UPLIT( %ASCIC 'word integer'));
		[dsc$k_dtype_zi] :
    			dbg$print (UPLIT( %ASCIC 'instruction' ));
		[dsc$k_dtype_adt] :
    			dbg$print (UPLIT( %ASCIC 'date_time' ));
		[inrange, outrange] : 
    			$DBG_ERROR('DBGSSV\DBG$SHOW_TYPE');
		TES;

	! output the completed buffer.
    	!
	dbg$newline();
END;	! of DBG$SHOW_TYPE.
END
ELUDOM
