%TITLE	'SYSRDBRES - Rights database resident system services'
MODULE SYSRDBRES (IDENT = 'V04-000') =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY: EXECUTIVE, SYSTEM SERVICES
!
! ABSTRACT:
!
!	This module contains the $ASCTOID, $IDTOASC, and $FINISH_RDB
!	rights database system services. In addition, it contains
!	EXE$OPEN_RDB, EXE$CLOSE_RDB, and EXE$SET_RDIPTR which are
!	subroutines used by the rights database system services.
!	This module is contained in the exec, the remaining rights
!	database system services are in a privileged shareable image.
!
! ENVIRONMENT:
!
!	VAX/VMS native mode, user, supervisor, or exec modes.
!
!--
!
! AUTHOR:  Andrew C. Goldstein, CREATION DATE:  16-Nov-1982  18:51
!
! MODIFIED BY:
!
!	V03-011	LMP0218		L. Mark Pilant,		24-Mar-1984  22:56
!		Fix a bug introduced in LMP0202.  Make an underscore a legal
!		identifier name character.
!
!	V03-010	LMP0202		L. Mark Pilant,		28-Feb-1984  14:37
!		Add a translation table to upcase the identifier name.
!
!	V03-009	RSH0089		R. Scott Hanna		05-Jan-1984
!		Change EXE$OPEN_RDB to return SS$_IVCHAN when the user
!		supplies a non-zero context which has an ISI vector entry
!		of zero.
!
!	V03-008	TMK0002		Todd M. Katz		29-Nov-1983
!		Change the name of EXE$ASCTOID to EXE$$ASCTOID. This change
!		was required because this system service could no longer be
!		reached from the change mode displatcher.
!
!	V03-007	RSH0082		R. Scott Hanna		16-Nov-1983
!		$FINISH_RDB
!		    - Return SS$_INSFARG when the CONTXT argument is
!		      not supplied.
!		    - Return SS$_IVCHAN if CONTXT points to a longword
!		      that contains 0.
!
!		$IDTOASC
!		    - Return SS$_INSFARG if CONTXT is not specified with
!		      a wildcard ID.
!
!	V03-006	TMK0001		Todd M. Katz		22-Oct-1983
!		Change the name of EXE$FINISH_RDB to EXE$$FINISH_RDB
!		and the name of EXE$IDTOASC to EXE$$IDTOASC. This was
!		required because these system services could no longer be
!		reached from the change mode displatcher.
!
!	V03-005	RSH0063		R. Scott Hanna		12-Sep-1983
!		Modify ID value check to return SS$_IVIDENT for an
!		ID of 0. Change wildcard ID value from 0 to -1 in
!		$IDTOASC.
!
!	V03-004	RSH0049		R. Scott Hanna		28-Jul-1983
!		Changed EXE$OPEN_RDB to use the new FAB bits
!		FAB$V_LNM_MODE instead of FAB$B_DSBMSK.
!
!	V03-003	RSH0040		R. Scott Hanna		21-Jun-1983
!		Add EXE$CLOSE_RDB. Provide additional ID name validation.
!		Open the rights database as a process permanent file when
!		there is no active image.
!
!	V03-002 RSH0029		R. Scott Hanna		25-May-1983
!		Modify FAB in EXE$OPEN_RDB so that logical name can be
!		used for the rights database file name.
!
!	V03-001	RSH0007		R. Scott Hanna		01-Mar-1983
!		Add routine EXE$SET_RDIPTR and modify EXE$OPEN_RDB to
!		use it.
!**


PSECT
	CODE	= YEXEPAGED (WRITE),
	PLIT	= YEXEPAGED (WRITE, EXECUTE);

LIBRARY 'SYS$LIBRARY:LIB.L32';

FORWARD ROUTINE
	EXE$$ASCTOID,
	EXE$$FINISH_RDB,
	EXE$$IDTOASC,
	EXE$OPEN_RDB,
	EXE$CLOSE_RDB	: NOVALUE,
	EXE$SET_RDIPTR;

LINKAGE
	EXE_PROBE_DSC	= JSB (REGISTER=1; REGISTER=1, REGISTER=2) :
			  NOPRESERVE (3)
			  NOTUSED (4,5,6,7,8,9,10,11),
	EXE_VAL_IDNAME	= JSB (REGISTER=1; REGISTER=1, REGISTER=2) :
			  NOPRESERVE (3)
			  NOTUSED (4,5,6,7,8,9,10,11),
	EXE_ALOP1IMAG	= JSB (REGISTER=1; REGISTER=1,REGISTER=2) :
			  NOPRESERVE (3);

EXTERNAL ROUTINE
	EXE$PROBEW_DSC	: EXE_PROBE_DSC ADDRESSING_MODE (ABSOLUTE),
	EXE$ALOP1IMAG	: EXE_ALOP1IMAG ADDRESSING_MODE (ABSOLUTE),
	EXE$VAL_IDNAME	: EXE_VAL_IDNAME ADDRESSING_MODE (ABSOLUTE),
	SYS$CMKRNL	: ADDRESSING_MODE (ABSOLUTE);

EXTERNAL 
	CTL$GL_RDIPTR 	: REF $BBLOCK ADDRESSING_MODE (ABSOLUTE),
	CTL$GL_IMGHDRBF : LONG ADDRESSING_MODE (ABSOLUTE);

BUILTIN
	PROBEW;


LITERAL
	UIC$M_ID_FORM_FLAG = 1^31;	! mask for id form of identifier

GLOBAL ROUTINE EXE$$ASCTOID (NAME, ID, ATTRIB) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine searches the rights database for the specified
!	name, and returns the matching identifier code and attributes.
!
! CALLING SEQUENCE:
!	SYS$$ASCTOID (NAME, ID, ATTRIB)
!
! INPUT PARAMETERS:
!	NAME:	address of the identifier name character
!		string descriptor to be converted
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	ID:	(optional) address to return the identifier longword
!	ATTRIB:	(optional) address to return the attributes longword
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Status of operation
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

LOCAL
	LOC_NAME	: REF VECTOR,	! local copy of NAME
	LENGTH		: LONG,		! output from EXE$VAL_IDNAME
	ADDRESS		: LONG,		! output from EXE$VAL_IDNAME
	LOC_ID		: LONG,		! local copy of ID
	LOC_ATTRIB	: LONG,		! local copy of ATTRIB
	STATUS		: LONG,		! general status value
	CLOSE		: LONG,		! call EXE$CLOSE_RDB flag
	RAB		: $RAB_DECL,	! RAB for file I/O
	REC_BUFFER	: $BBLOCK [KGB$K_IDENT_RECORD],
					! record buffer to read records
	NAME_BUFFER	: $BBLOCK [KGB$S_NAME];
					! name key buffer

! Define a global translation table to do the upcasing of the identifier
! name.  This should parallel the validation table for the exec routine
! EXE$VAL_IDNAME in the module [SYS.SRC]EXSUBROUT.MAR.

GLOBAL BIND
	EXE$T_ID_UPCASE	= CH$TRANSTABLE (
				REP 36 OF (%C' '),	! Null - #
				%C'$',			! $
				REP 11 OF (%C' '),	! % - /
				'0','1','2','3','4','5','6','7','8','9',
				REP  7 OF (%C' '),	! : - @
				'A','B','C','D','E','F','G','H','I','J','K','L','M',
				'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
				REP  4 OF (%C' '),	! [ - ^
				'_',			! _
				REP  1 OF (%C' '),	! '
				'A','B','C','D','E','F','G','H','I','J','K','L','M',
				'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
				REP  5 OF (%C' '),	! { - del
				REP 128 OF (%C' '));	! %X80 - %XFF

LABEL
	RDB_OPEN;			! rights database is open in this block

! Validate parameters
!

LOC_NAME = .NAME;
STATUS = EXE$VAL_IDNAME( .LOC_NAME; LENGTH, ADDRESS);
IF NOT .STATUS THEN RETURN .STATUS;
CH$TRANSLATE (EXE$T_ID_UPCASE, .LENGTH, .ADDRESS, ' ', KGB$S_NAME, NAME_BUFFER);

LOC_ID = .ID;
IF .LOC_ID NEQU 0 AND NOT PROBEW (%REF(0), %REF(4), .LOC_ID)
THEN
    RETURN SS$_ACCVIO;

LOC_ATTRIB = .ATTRIB;
IF .LOC_ATTRIB NEQU 0 AND NOT PROBEW (%REF(0), %REF(4), .LOC_ATTRIB)
THEN
    RETURN SS$_ACCVIO;

! Open the rights database for reading.
!

$RAB_INIT (RAB = RAB,
	   RAC = KEY,
	   KRF = 2,
	   KBF = NAME_BUFFER,
	   KSZ = KGB$S_NAME,
	   ROP = (WAT, NLK),
	   USZ = KGB$K_IDENT_RECORD,
	   UBF = REC_BUFFER
	   );
STATUS = EXE$OPEN_RDB (0, 0, RAB[RAB$W_ISI], CLOSE);
IF NOT .STATUS THEN RETURN .STATUS;

RDB_OPEN:
    BEGIN

    ! Read the record and return the data items.
    !

    STATUS = $GET (RAB = RAB);
    IF .STATUS EQLU RMS$_RNF THEN STATUS = SS$_NOSUCHID;
    IF NOT .STATUS THEN LEAVE RDB_OPEN;

    IF .LOC_ID NEQU 0 THEN .LOC_ID = .REC_BUFFER[KGB$L_IDENTIFIER];
    IF .LOC_ATTRIB NEQU 0 THEN .LOC_ATTRIB = .REC_BUFFER[KGB$L_ATTRIBUTES];

    STATUS = SS$_NORMAL;
    END;

! Close the rights database if there is no image
!

IF .CLOSE THEN EXE$CLOSE_RDB();
RETURN .STATUS
END;					! End of routine EXE$$ASCTOID

GLOBAL ROUTINE EXE$$FINISH_RDB (CONTXT) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine cleans up the RMS stream associated with the
!	specified context.
!
! CALLING SEQUENCE:
!	SYS$FINISH_RDB (CONTXT)
!
! INPUT PARAMETERS:
!	CONTXT: address of a longword containing the record stream
!		context.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Status of operation
!
! SIDE EFFECTS:
!	Stream disconnected
!
!--

BEGIN

LOCAL
	LOC_CONTXT	: LONG,		! local copy of CONTXT
	ISI_INDEX	: LONG,		! Index into ISI vector
	RAB		: $RAB_DECL;	! RAB for stream to close

! Validate parameters
!

IF .CTL$GL_RDIPTR EQLU 0 THEN RETURN SS$_IVCHAN;
LOC_CONTXT = .CONTXT;
IF .LOC_CONTXT EQLU 0 THEN RETURN SS$_INSFARG;
IF NOT PROBEW (%REF(0), %REF(4), .LOC_CONTXT) THEN RETURN SS$_ACCVIO;

! Find the stream open on the specified context.
!

ISI_INDEX = ..LOC_CONTXT;
IF (.ISI_INDEX EQLU 0) OR (.ISI_INDEX GTRU RDI$K_ISI_MAX) THEN RETURN SS$_IVCHAN;
.LOC_CONTXT = 0;
IF .VECTOR [CTL$GL_RDIPTR[RDI$L_ISI_VEC], .ISI_INDEX] EQLU 0
THEN
    RETURN SS$_NORMAL;

! Set up a RAB and disconnect it.
!

$RAB_INIT (RAB = RAB);
RAB[RAB$W_ISI] = .VECTOR [CTL$GL_RDIPTR[RDI$L_ISI_VEC], .ISI_INDEX];
VECTOR [CTL$GL_RDIPTR[RDI$L_ISI_VEC], .ISI_INDEX] = 0;
$DISCONNECT (RAB = RAB);
RETURN SS$_NORMAL;

END;					! End of routine EXE$$FINISH_RDB

GLOBAL ROUTINE EXE$$IDTOASC (ID, NAMLEN, NAMBUF, RESID, ATTRIB, CONTXT) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine searches the rights database for the specified
!	identifier, and returns the matching name and attributes.
!	If a wildcard identifier and a context is provided, the
!	routine returns all identifiers in lexical order.
!
! CALLING SEQUENCE:
!	SYS$IDTOASC (ID, NAMLEN, NAMBUF, RESID, ATTRIB, CONTXT)
!
! INPUT PARAMETERS:
!	ID:	 identifier longword to convert, or -1 to
!		 find all identifiers (wildcarding)
!	CONTXT:  (optional) address of a longword containing the record stream
!		 context. initially should be zero, value output
!		 on first call, value input on subsequent calls.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NAMLEN:	 (optional) address of a word to store the length of the
!		 identifier name
!	NAMBUF:	 (optional) address of a character string descriptor that
!		 describes the buffer to return the identifier name
!	RESID:	 (optional) address of a longword to return the id found
!		 while wildcarding
!	ATTRIB:	 (optional) address to return the attributes longword
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Status of operation
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

LOCAL
	LOC_ID		: LONG,		! local copy of ID
	LOC_NAMLEN	: LONG,		! local copy of NAMLEN
	LOC_NAMBUF	: LONG,		! local copy of NAMBUF
	LENGTH		: LONG,		! output from EXE$PROBEW_DSC
	ADDRESS		: LONG,		! output from EXE$PROBEW_DSC
	LOC_RESID	: LONG,		! local copy of RESID
	LOC_ATTRIB	: LONG,		! local copy of ATTRIB
	LOC_CONTXT	: LONG,		! local copy of CONTXT
	STATUS		: LONG,		! general status value
	P		: LONG,		! string pointer
	CLOSE		: LONG,		! call EXE$CLOSE_RDB flag
	RAB		: $RAB_DECL,	! RAB for file I/O
	REC_BUFFER	: $BBLOCK [KGB$K_IDENT_RECORD];
					! record buffer to read records

LABEL
	RDB_OPEN;			! rights database is open in this block

! Validate parameters
!

LOC_ID = .ID;
IF .LOC_ID EQL -1
THEN
    BEGIN
    IF .CONTXT EQLU 0 THEN RETURN SS$_INSFARG;
    LOC_ID = 0;
    END
ELSE
    BEGIN
    IF (.LOC_ID AND UIC$M_ID_FORM_FLAG) NEQU 0
    THEN
	(IF (.LOC_ID GTRU UIC$K_LAST_ID) THEN RETURN SS$_IVIDENT)
    ELSE
	(IF (.LOC_ID GTRU UIC$K_MAX_UIC) OR (.LOC_ID EQL 0) THEN RETURN SS$_IVIDENT)
    END;

LOC_NAMLEN = .NAMLEN;
IF .LOC_NAMLEN NEQU 0 AND NOT PROBEW (%REF(0), %REF(2), .LOC_NAMLEN)
THEN
    RETURN SS$_ACCVIO;

LOC_NAMBUF = .NAMBUF;
IF .LOC_NAMBUF NEQU 0
THEN
    BEGIN
    IF NOT (STATUS = EXE$PROBEW_DSC (.LOC_NAMBUF; LENGTH, ADDRESS))
    THEN
	RETURN .STATUS
    ELSE
	LENGTH = .LENGTH AND %X'FFFF'
    END;

LOC_RESID = .RESID;
IF .LOC_RESID NEQU 0 AND NOT PROBEW (%REF(0), %REF(4), .LOC_RESID)
THEN
    RETURN SS$_ACCVIO;

LOC_ATTRIB = .ATTRIB;
IF .LOC_ATTRIB NEQU 0 AND NOT PROBEW (%REF(0), %REF(4), .LOC_ATTRIB)
THEN
    RETURN SS$_ACCVIO;

LOC_CONTXT = .CONTXT;
IF .LOC_CONTXT NEQU 0 AND NOT PROBEW (%REF(0), %REF(4), .LOC_CONTXT)
THEN
    RETURN SS$_ACCVIO;


! Open the rights database for reading. Note that the open routine
! specifies KRF=2 so the stream will be correctly positioned for
! wildcarding by name if requested. If an explicit identifier is given,
! set up to read by identifier key.
!

$RAB_INIT (RAB = RAB,
	   RAC = SEQ,
	   KRF = 2,
	   ROP = (WAT, NLK),
	   USZ = KGB$K_IDENT_RECORD,
	   UBF = REC_BUFFER
	   );
IF .LOC_ID NEQU 0
THEN
    BEGIN
    RAB[RAB$B_RAC] = RAB$C_KEY;
    RAB[RAB$B_KRF] = 0;
    RAB[RAB$B_KSZ] = 4;
    RAB[RAB$L_KBF] = LOC_ID;
    END;

STATUS = EXE$OPEN_RDB (.LOC_CONTXT, 0, RAB[RAB$W_ISI], CLOSE);
IF NOT .STATUS THEN RETURN .STATUS;

RDB_OPEN:
    BEGIN

    ! Read the record and return the data items. If wildcarding, we skip the
    ! maintenance record.
    !

    WHILE 1 DO
	BEGIN
	STATUS = $GET (RAB = RAB);
	IF .STATUS EQLU RMS$_RNF OR .STATUS EQLU RMS$_EOF
	THEN
	    STATUS = SS$_NOSUCHID;
	IF .STATUS EQLU RMS$_RTB THEN STATUS = SS$_NORMAL;
	IF NOT .STATUS
	THEN
	    BEGIN
	    EXE$$FINISH_RDB(.LOC_CONTXT);
	    LEAVE RDB_OPEN;
	    END;

	IF .LOC_ID NEQU 0 OR .REC_BUFFER[KGB$L_IDENTIFIER] NEQU 0
	THEN
	    EXITLOOP;
	END;

    ! Return the requested data. Find the trailing spaces in the name
    ! string so it can be returned as a variable length string.
    !

    P = CH$FIND_CH (KGB$S_NAME, REC_BUFFER[KGB$T_NAME], ' ');
    IF CH$FAIL (.P) THEN P = REC_BUFFER[KGB$T_NAME] + KGB$S_NAME;

    IF .LOC_NAMLEN NEQU 0 THEN (.LOC_NAMLEN)<0,16> = .P - REC_BUFFER[KGB$T_NAME];
    IF .LOC_NAMBUF NEQU 0
    THEN
        CH$COPY (KGB$S_NAME, REC_BUFFER[KGB$T_NAME], ' ', .LENGTH, .ADDRESS);

    IF .LOC_RESID NEQU 0 THEN .LOC_RESID = .REC_BUFFER[KGB$L_IDENTIFIER];
    IF .LOC_ATTRIB NEQU 0 THEN .LOC_ATTRIB = .REC_BUFFER[KGB$L_ATTRIBUTES];

    STATUS = SS$_NORMAL;
    END;

! Close the rights database if there is no image
!

IF .CLOSE THEN EXE$CLOSE_RDB();
RETURN .STATUS
END;					! End of routine EXE$$IDTOASC

GLOBAL ROUTINE EXE$OPEN_RDB (CONTXT, WRITE, ISI, CLOSE) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine sees to it that the rights database is open
!	as needed. If a context is specified, it locates the specified
!	stream or opens it. If the database needs to be re-opened
!	for write, it does so.
!
! CALLING SEQUENCE:
!	EXE$OPEN_RDB (CONTXT, WRITE, ISI, CLOSE)
!
! INPUT PARAMETERS:
!	CONTXT:  address of a longword containing the record stream
!	         context. (IFI vector index) initially should be zero,
!		 value output on first call, value input on subsequent calls.
!	WRITE:	 0 to open read-only
!	      	 1 to open read/write
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	ISI:	 address to return the internal stream identifier (IFI)
!	CLOSE:	 address to return a flag which indicates whether a call of
!		 EXE$CLOSE_RDB is required.
!			0 = an image is active and a call is not required
!		 	1 = no active image. EXE$CLOSE_RDB must be called.
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Status of RMS open
!
! SIDE EFFECTS:
!	Rights database opened, ISI vector modified
!
!--

BEGIN

REGISTER
	SIZE		= 1,		! size returned from EXE$ALOP1IMAG
	ADDRESS		= 2;		! address returned from EXE$ALOP1IMAG

LOCAL
	STATUS		: LONG,		! general status value
	ISI_INDEX	: LONG,		! index into ISI vector
	LOCAL_ISI	: LONG,		! local copy of ISI
	FAB		: $FAB_DECL,	! FAB to open rights database
	RAB		: $RAB_DECL,	! RAB to connect stream
	ARGLIST		: VECTOR [2]	! argument list for EXE$SET_RDIPTR
			  INITIAL (1,0);

.CLOSE = 0;

! Allocate RDI if it has not been allocated already
!

IF .CTL$GL_RDIPTR EQLU 0
THEN
    BEGIN
    STATUS = EXE$ALOP1IMAG (RDI$S_RDIDEF; SIZE, ADDRESS);
    IF NOT .STATUS THEN RETURN SS$_INSFMEM;
    .ADDRESS = .SIZE;
    ARGLIST[1] = .ADDRESS;
    STATUS = SYS$CMKRNL(EXE$SET_RDIPTR, ARGLIST);
    IF NOT .STATUS THEN RETURN .STATUS;
    CH$FILL (0, RDI$S_RDIDEF-4, .CTL$GL_RDIPTR+4);
    END;

! Locate the ISI implied by the context. If there is no context, we
! use ISI vector zero. If the context is zero, we find a free vector
! entry.
!

IF .CONTXT EQLU 0
THEN
    ISI_INDEX = 0

ELSE
    BEGIN
    ISI_INDEX = ..CONTXT;
    IF .ISI_INDEX GTRU RDI$K_ISI_MAX THEN RETURN SS$_IVCHAN;
    IF .ISI_INDEX EQLU 0
    THEN
	BEGIN
	IF
	    BEGIN
	    INCR J FROM 1 TO RDI$K_ISI_MAX 
	    DO
		BEGIN
		IF .VECTOR [CTL$GL_RDIPTR[RDI$L_ISI_VEC], .J] EQLU 0
		THEN
		    BEGIN
		    ISI_INDEX = .J;
		    EXITLOOP 0;
		    END;
		END
	    END
	THEN RETURN SS$_NOIOCHAN;
	END
    ELSE
	IF .VECTOR [CTL$GL_RDIPTR[RDI$L_ISI_VEC], .ISI_INDEX] EQLU 0 THEN RETURN SS$_IVCHAN;
    IF .WRITE THEN ISI_INDEX = 0;
    .CONTXT = .ISI_INDEX;
    END;

! Get the ISI for the selected stream. If the ISI is zero, it must
! be opened.
!

LOCAL_ISI = .VECTOR [CTL$GL_RDIPTR[RDI$L_ISI_VEC], .ISI_INDEX];
IF .LOCAL_ISI NEQU 0
   AND (IF .WRITE THEN .CTL$GL_RDIPTR[RDI$L_IFI_WRITE] NEQU 0 ELSE 1)
THEN
    BEGIN
    (.ISI)<0,16> = .LOCAL_ISI;
    RETURN SS$_NORMAL;
    END;

! Get a FAB and RAB set up for whatever now needs to be done. Note -
! the KRF = 2 is assumed by EXE$$IDTOASC.
!

$FAB_INIT (FAB = FAB,
	   FNM = 'RIGHTSLIST',
	   DNM = 'SYS$SYSTEM:.DAT',
	   FAC = GET,
	   SHR = (GET, PUT, UPD, DEL, MSE)
	   );
FAB[FAB$V_LNM_MODE] = PSL$C_EXEC;
FAB[FAB$W_IFI] = .CTL$GL_RDIPTR[RDI$L_IFI_READ];

$RAB_INIT (RAB = RAB,
	   FAB = FAB,
	   KRF = 2
	   );
RAB[RAB$W_ISI] = .LOCAL_ISI;

! If LOCAL_ISI is nonzero at this point, it is because we need the database
! reopened for write. Disconnect ISI entry 0 and set up to open for
! write.
!

IF .LOCAL_ISI NEQU 0
THEN
    BEGIN
    VECTOR [CTL$GL_RDIPTR[RDI$L_ISI_VEC], 0] = 0;
    STATUS = $DISCONNECT (RAB = RAB);
    IF NOT .STATUS THEN RETURN .STATUS;
    END;
IF .WRITE
THEN
    BEGIN
    FAB[FAB$V_PUT] = 1;
    FAB[FAB$V_UPD] = 1;
    FAB[FAB$V_DEL] = 1;
    FAB[FAB$V_MSE] = 0;
    END;

! Now open the file if it is not already suitably open.
!

IF (IF .WRITE
    THEN
	.CTL$GL_RDIPTR[RDI$L_IFI_WRITE] EQLU 0
    ELSE
	.CTL$GL_RDIPTR[RDI$L_IFI_READ] EQLU 0
    )
THEN
    BEGIN
    FAB[FAB$W_IFI] = 0;
    IF .CTL$GL_IMGHDRBF EQLU 0
    THEN
	BEGIN
	.CLOSE = 1;
	FAB[FAB$V_PPF] = 1;
	END;
    STATUS = $OPEN (FAB = FAB);
    IF NOT .STATUS THEN RETURN .STATUS;
    IF .WRITE
    THEN
	CTL$GL_RDIPTR[RDI$L_IFI_WRITE] = .FAB[FAB$W_IFI]
    ELSE
	CTL$GL_RDIPTR[RDI$L_IFI_READ] = .FAB[FAB$W_IFI];
    END;

! Now set up the RAB suitably and connect it.
!

STATUS = $CONNECT (RAB = RAB);
IF NOT .STATUS THEN RETURN .STATUS;

VECTOR [CTL$GL_RDIPTR[RDI$L_ISI_VEC], .ISI_INDEX] = .RAB[RAB$W_ISI];
(.ISI)<0,16> = .RAB[RAB$W_ISI];
IF .CONTXT NEQU 0 THEN .CONTXT = .ISI_INDEX;

SS$_NORMAL
END;					! End of routine EXE$OPEN_RDB

GLOBAL ROUTINE EXE$CLOSE_RDB : NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine closes the rights database file and zeros the Rights
!	Database Identifier (RDI) table.
!
! CALLING SEQUENCE:
!	EXE$CLOSE_RDB()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	Rights database file closed and the RDI table zeroed.
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

LOCAL
	FAB		: $FAB_DECL;	! FAB to close rights database

$FAB_INIT (FAB = FAB);

! Close out read channels
!

IF .CTL$GL_RDIPTR[RDI$L_IFI_READ] NEQU 0
THEN
    BEGIN
    FAB[FAB$W_IFI] = .CTL$GL_RDIPTR[RDI$L_IFI_READ];
    $CLOSE (FAB = FAB);
    END;

! Close out write channels
!

IF .CTL$GL_RDIPTR[RDI$L_IFI_WRITE] NEQU 0
THEN
    BEGIN
    FAB[FAB$W_IFI] = .CTL$GL_RDIPTR[RDI$L_IFI_WRITE];
    $CLOSE (FAB = FAB);
    END;

! Zero RDI table
!

CH$FILL (0, RDI$S_RDIDEF-4, .CTL$GL_RDIPTR+4);
END;

GLOBAL ROUTINE EXE$SET_RDIPTR (ADDRESS) =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine stores the address of the RDI block in CTL$GL_RDIPTR.
!	It is called from exec mode with the change to kernel mode system
!	service.
!
! CALLING SEQUENCE:
!	SYS$CMKRNL (EXE$SET_RDIPTR, ARGLIST)
!
! INPUT PARAMETERS:
!	ADDRESS: The address of the allocated RDI block
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	SS$_NORMAL
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

CTL$GL_RDIPTR = .ADDRESS;
RETURN SS$_NORMAL;
END;

END
ELUDOM
