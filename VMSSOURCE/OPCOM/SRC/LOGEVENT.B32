MODULE	OPC$LOGEVENT	(
			 LANGUAGE (BLISS32),
			 IDENT = 'V04-000'
			) =

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
! FACILITY:
!
!	OPCOM
!
! ABSTRACT:
!
!	This module contains all the various and sundry general
!	purpose utility routines used by OPCOM's request handlers.
!
! Environment:
!
!	VAX/VMS operating system.
!
! Author:
!
!	Steven T. Jeffreys
!
! Creation date:
!
!	March 10, 1981
!
! Revision history:
!
!	V03-005	CWH3169		CW Hobbs			5-May-1984
!		Second pass for cluster-wide OPCOM:
!		 - Add an explanation to DUMP_LOG_FILE and WRITE_LOG_FILE
!		   messages so that users won't bother us unless something
!		   is really wrong.
!
!	V03-004	RSH0117		R. Scott Hanna			14-Mar-1983
!		LOG_MESSAGE / Increase local buffer size to OPC$K_MAXMESSAGE.
!
!	V03-003	CWH3003		CW Hobbs			16-Sep-1983
!		Increase size of local buffer, print blank line as separate
!		records instead of using <CR><LF>.
!
!	V03-002	CWH3001		CW Hobbs			30-Jul-1983
!		Various and sundry things to make OPCOM distributed
!		across the cluster.
!
! V03-001	STJ3032		Steven T. Jeffreys,	05-Oct-1982
!		Set GBLSTS_K_FLUSH_PENDIND when writing to the logfile.
!
! V02-002	STJ0160		Steven T. Jeffreys,	08-Feb-1982
!		Jiggle the message size and pointer so that the 'bell'
!		character on front of each message is not sent to the logfile.
!
!--

BEGIN						! Start of LOGEVENT

LIBRARY	'SYS$LIBRARY:LIB.L32';
LIBRARY 'LIB$:OPCOMLIB';

FORWARD ROUTINE
	DUMP_LOG_FILE,			! Print a formatted dump of a buffer
	LOG_MESSAGE,			! Write a message to a log file
	LOG_MESSAGE_PUT,		! $PUT a single record of a message
	LOGEVENT_FAO_BUFFER,		! Local fao buffer routine
	WRITE_LOG_FILE;			! Write a string desc to a log file

BIND
	EXP1 = %ASCID 'OPCOM has noticed a condition which might be due to an internal error.',
	EXP2 = %ASCID 'It might also be explained by normal events, especially if nodes have just',
	EXP3 = %ASCID 'crashed or rebooted in a VAXcluster.  Please bring this message to Digital''s',
	EXP4 = %ASCID 'attention only if you are having problems with operator communications.';

MACRO
	PUT (DESC) =	BEGIN
			BIND DSC = (DESC) : $bblock;
			LOGFILE_RAB [RAB$W_RSZ] = .DSC [DSC$W_LENGTH];
			LOGFILE_RAB [RAB$L_RBF] = .DSC [DSC$A_POINTER];
			$PUT (RAB = LOGFILE_RAB)			! Status is value of the block
			END %,
	PUT_EXPLANATION =
			BEGIN PUT (EXP1); PUT (EXP2); PUT (EXP3); PUT (EXP4); END
			%;

GLOBAL ROUTINE DUMP_LOG_FILE (BUFF_DESC : $ref_bblock, ID_DESC : $ref_bblock) =

!++
! Functional description:
!
!	This routine will write a formatted hex dump to the operator log file.
! **
! ** This routine will be enhanced later to support mutliple log files.
! **
!
! Input:
!
!	BUFF_DESC	: Address of a string desc for buffer to be dumped
!	ID_DESC		: Explanatory text for dump
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	TRUE		: If success
!	<anything else>	: If the log attempt failed
!--

BEGIN						! Start of DUMP_LOG_FILE

EXTERNAL
	GLOBAL_STATUS	: BITVECTOR,		! OPCOM global status flags
	LOGFILE_RAB	: $bblock,		! RMS control structure
	LOGFILE_FAB	: $bblock;		! RMS control structure

LOCAL
	BASE,
	LEFT,
	PTR,
	LCL_DESC : $ref_bblock,
	INTER : VECTOR [8, LONG],
	STATUS		: LONG;
!
! See if logging is enabled.
!
IF  (NOT .GLOBAL_STATUS [GBLSTS_K_LOGGING_ENABLED])
OR  (.GLOBAL_STATUS [GBLSTS_K_LOGFILE_CLOSED])
THEN
    RETURN (TRUE);
!
! Format and print the message header
!
INTER [0] = 0;			! A blank line
PUT (INTER);
PUT (LOGEVENT_FAO_BUFFER (%ASCID '%%%%%%%%%%%  OPCOM  !%D  %%%%%%%%%%%  DUMP_LOG_FILE', 0));
PUT_EXPLANATION;
PUT (LOGEVENT_FAO_BUFFER (%ASCID 'Buffer is !5UL (%X!XW) bytes -- "!AS"',
			.BUFF_DESC [DSC$W_LENGTH], .BUFF_DESC [DSC$W_LENGTH], .ID_DESC));
!
! Format the buffer, 32 bytes at a time
!
LEFT = .BUFF_DESC [DSC$W_LENGTH];
PTR = .BUFF_DESC [DSC$A_POINTER];
BASE = 0;
WHILE .LEFT GTR 0
DO
    BEGIN
    !
    ! Move the next chunk of data to the intermediate buffer
    !
    CH$COPY (MINU (.LEFT, 32), .PTR, 0, 32, INTER [0]);
    PUT (LOGEVENT_FAO_BUFFER (%ASCID '!8(9XL) !32AF !XW',
			    .INTER [7], .INTER [6], .INTER [5], .INTER [4], 
			    .INTER [3], .INTER [2], .INTER [1], .INTER [0],
			    32, INTER [0], .BASE));
    !
    ! Move to the next chunk
    !
    BASE = .BASE + 32;
    PTR  = .PTR  + 32;
    LEFT = .LEFT - 32;
    END;

$FLUSH (RAB = LOGFILE_RAB);

RETURN (TRUE);
END;						! End of DUMP_LOG_FILE

GLOBAL ROUTINE LOG_MESSAGE (RQCB) =

!++
! Functional description:
!
!	This routine will write a message described by an MCB
!	to the operator log file.
! **
! ** This routine will be enhanced later to support mutliple log files.
! **
!
! Input:
!
!	RQCB		: Address of an RQCB data structure
!
! Implicit Input:
!
!	RQCB [RQCB_L_MCB] points to a valid MCB.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	TRUE		: If success
!	<anything else>	: If the log attempt failed
!--

BEGIN						! Start of LOG_MESSAGE

MAP
	RQCB		: $ref_bblock;

EXTERNAL LITERAL
	MCB_K_TYPE;				! MCB structure type

EXTERNAL
	GLOBAL_STATUS	: BITVECTOR;		! OPCOM global status flags

LOCAL
	ADR		: REF VECTOR [, BYTE],	! Adjusted address of string
	LEN		: LONG,			! Adjusted length of string
	RECLEN		: LONG,			! Adjusted length of single record
	CHAR		: BYTE,
	BUF		: VECTOR [OPC$K_MAXMESSAGE, BYTE],
	BUFP		: REF VECTOR [, BYTE],
	MCB		: $ref_bblock,		! MCB data structure
	STATUS		: LONG;

!
! Check for a valid MCB.
!
MCB = .RQCB [RQCB_L_MCB];
IF (.MCB EQL 0) OR (.MCB [MCB_B_TYPE] NEQ MCB_K_TYPE)
THEN
    RETURN (FALSE);
!
! See if logging is enabled.
!
IF  (NOT .GLOBAL_STATUS [GBLSTS_K_LOGGING_ENABLED])
OR  (.GLOBAL_STATUS [GBLSTS_K_LOGFILE_CLOSED])
OR  ((.$bblock [RQCB [RQCB_L_OPTIONS], OPC$V_NOLOG]) AND
     (.$bblock [RQCB [RQCB_L_PRIVMASK1], PRV$V_OPER]))
THEN
    RETURN (TRUE);
!
! Adjust the string.  Remove any trailing control and space characters
!
LEN = .MCB [MCB_L_TEXTLEN];
ADR = .MCB [MCB_L_TEXTPTR];
IF .LEN LEQ 0
THEN
    RETURN (TRUE);
DECR I FROM .LEN-1 TO 0				! Remove all trailing control and space characters
DO
    SELECTONE .ADR [.I] OF
    SET
	[0 TO 32] :	LEN = .LEN - 1;		! Bad one, remove it
	[OTHERWISE] :	EXITLOOP;		! Good one, we are done looking
    TES;
IF .LEN LEQ 0					! If we got rid of the whole string, we are done
THEN
    RETURN (TRUE);
!
! Now get ready to filter the string.  We will copy it to a local buffer, making some changes.
! Ignore all control characters except tab and line-feed.  Pass tab through, if see a line-feed
! then write the record found up to the line-feed.  Do not print zero-length lines.
!
STATUS = LOG_MESSAGE_PUT (0, BUF);		! Put a single blank line before the message
RECLEN = 0;
BUFP = BUF;
WHILE .LEN GTR 0
DO
    BEGIN
    CHAR = CH$RCHAR_A (ADR);
    SELECTONE .CHAR OF
    SET
	!
	! Line feed, print the old record and start a new one
	!
	[10] :			BEGIN
				IF .RECLEN GTR 0
				THEN
				    STATUS = LOG_MESSAGE_PUT (.RECLEN, BUF);
				RECLEN = 0;
				BUFP = BUF;
				END;
	!
	! Misc control char, ignore
	!
	[0 TO 8, 11 TO 31] :	;
	!
	! Valid char, pass it to the new buffer
	!
	[OTHERWISE] :		BEGIN
				RECLEN = .RECLEN + 1;
				CH$WCHAR_A (.CHAR, BUFP);
				END;
    TES;
    LEN = .LEN - 1;
    END;
!
! If we have some data in the new buffer, print it
!
IF .RECLEN GTR 0
THEN
    STATUS = LOG_MESSAGE_PUT (.RECLEN, BUF);

RETURN (.STATUS);
END;						! End of LOG_MESSAGE

GLOBAL ROUTINE LOG_MESSAGE_PUT (LEN, ADR) =

!++
! Functional description:
!
!	Place the record in the log file.
! **
! ** This routine will be enhanced later to support multiple log files.
! **
!
! Input:
!
!	LEN - Length of record
!	ADR - Address of record
!
! Implicit Input:
!
!	None.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	TRUE		: If success
!	<anything else>	: If the log attempt failed
!--

BEGIN						! Start of LOG_MESSAGE_PUT

EXTERNAL
	GLOBAL_STATUS	: BITVECTOR,		! OPCOM global status flags
	LOGFILE_RAB	: $bblock,		! RMS control structure
	LOGFILE_FAB	: $bblock;		! RMS control structure

LOCAL
	MESSAGE		: LONG,			! Error message code
	STATUS		: LONG;
!
! Write the message to the logfile.
!
LOGFILE_RAB [RAB$W_RSZ] = .LEN;
LOGFILE_RAB [RAB$L_RBF] = .ADR;
GLOBAL_STATUS [GBLSTS_K_FLUSH_PENDING] = TRUE;
IF NOT (STATUS = $PUT (RAB = LOGFILE_RAB))
THEN
    BEGIN
    !
    ! The log attempt failed.  Complain if appropriate.
    !
    IF NOT .GLOBAL_STATUS [GBLSTS_K_LAST_LOG_FAILED]
    THEN
	BEGIN
	!
	! Complain to the appropriate operators.
	!
	MESSAGE = OPC$_LOGFAIL;
	! *** the remainder will be supplied later ***
	END;
     GLOBAL_STATUS [GBLSTS_K_LAST_LOG_FAILED] = TRUE;
     END;

RETURN (.STATUS);

END;						! End of LOG_MESSAGE_PUT

ROUTINE LOGEVENT_FAO_BUFFER (CTRSTR : REF VECTOR[2], ARGS : VECTOR [4]) =	%SBTTL 'LOGEVENT_FAO_BUFFER'
BEGIN
!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine passes an ascii string through the FAO system service with any number of specified parameters.
!
! INPUTS:
!
!	ctrstr	Address of FAO control string descriptor
!	args	Any number of additional arguments
!
! IMPLICIT INPUTS:
!
!	none
!
! OUTPUTS:
!
!	none
!
! IMPLICIT OUTPUTS:
!
!	none
!
! ROUTINE VALUE:
!
!	Address of formatted descriptor
!
! SIDE EFFECTS:
!
!	none
!--

OWN
    desc : VECTOR [2, LONG],
    faobuf : VECTOR [512, BYTE]
    ;

desc [0] = 512;					! Set up result descriptor
desc [1] = faobuf;

$faol (ctrstr=.ctrstr, outlen=desc, outbuf=desc, prmlst=args);

RETURN desc;
END;

GLOBAL ROUTINE WRITE_LOG_FILE (DESC : $ref_bblock) =

!++
! Functional description:
!
!	This routine will write a message described by simple string desc
!	to the operator log file.
! **
! ** This routine will be enhanced later to support mutliple log files.
! **
!
! Input:
!
!	DESC		: Address of a string desc
!
! Implicit Input:
!
!	RQCB [RQCB_L_MCB] points to a valid MCB.
!
! Output:
!
!	None.
!
! Implict output:
!
!	None.
!
! Side effects:
!
!	None.
!
! Routine value:
!
!	TRUE		: If success
!	<anything else>	: If the log attempt failed
!--

BEGIN						! Start of WRITE_LOG_FILE

EXTERNAL
	GLOBAL_STATUS	: BITVECTOR,		! OPCOM global status flags
	LOGFILE_RAB	: $bblock,		! RMS control structure
	LOGFILE_FAB	: $bblock;		! RMS control structure

LOCAL
	NULLDESC	: LONG;			! Only need length word

!
! See if logging is enabled.
!
IF  (NOT .GLOBAL_STATUS [GBLSTS_K_LOGGING_ENABLED])
OR  (.GLOBAL_STATUS [GBLSTS_K_LOGFILE_CLOSED])
THEN
    RETURN (TRUE);
!
! Format and print the message header
!
NULLDESC = 0;					! A blank line
PUT (NULLDESC);
PUT (LOGEVENT_FAO_BUFFER (%ASCID '%%%%%%%%%%%  OPCOM  !%D  %%%%%%%%%%%  WRITE_LOG_FILE', 0));
PUT_EXPLANATION;
PUT (LOGEVENT_FAO_BUFFER (%ASCID '"!AS"', .DESC));
$FLUSH (RAB = LOGFILE_RAB);

RETURN (TRUE);
END;						! End of WRITE_LOG_FILE

END						! End of LOGEVENT
ELUDOM
