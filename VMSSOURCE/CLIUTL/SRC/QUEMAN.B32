MODULE QUEMAN	(%TITLE	'Queue Management Commands'
		MAIN = QUEMAN,
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Queue Management Commands.
!
! ABSTRACT:
!	This module implements the following commands:
!		ASSIGN		/MERGE
!		ASSIGN		/QUEUE
!		DEASSIGN	/QUEUE
!		DEFINE		/CHARACTERISTIC
!		DEFINE		/FORM
!		DELETE		/QUEUE
!		INITIALIZE	/QUEUE
!		SET		 QUEUE
!		SHOW		 QUEUE
!		START		/QUEUE
!		STOP		/QUEUE
!		SYNCHRONIZE
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 30-Apr-1982
!
! MODIFIED BY:
!
!	V03-014	JAK0226		J A Krycka		16-Aug-1984
!		Fix bug in processing INITIALIZE/QUEUE/OWNER_UIC.
!
!	V03-009	JAK0220		J A Krycka	20-Jul-1984
!		Support the /BUFFER_COUNT and /EXTEND_QUANTITY qualifiers for
!		START/QUEUE/MANAGER.
!		Support /DEFAULT=[NO]FEED at the queue level.
!
!	V03-008	PCG0001		Peter George	13-Mar-1984
!		Increase size of item list buffer.
!
!	V03-007	MLJ0118		Martin L. Jack,	23-Aug-1983
!		Change names to track $SJCDEF, implement page setup.
!
!	V03-006	MLJ0115		Martin L. Jack,	30-Jul-1983
!		Changes for job controller baselevel.
!
!	V03-005	MLJ0114		Martin L. Jack,	23-Jun-1983
!		Changes for job controller baselevel.
!
!	V03-004	MLJ0113		Martin L. Jack,	26-May-1983
!		Changes for job controller baselevel.
!
!	V03-003	MLJ0112		Martin L. Jack,	29-Apr-1983
!		Changes for job controller baselevel.
!
!	V03-002	MLJ0109		Martin L. Jack,	13-Apr-1983
!		Implement SET RESTART.  Change ABORT_QUEUE to ABORT_JOB.
!
!	V03-001	MLJ0106		Martin L. Jack,	01-Mar-1983
!		Changes for job controller baselevel.
!
!**

LIBRARY 'SYS$LIBRARY:STARLET';
REQUIRE 'SRC$:JBCPRSDEF';


LITERAL
	TRUE=		1,
	FALSE=		0;


STRUCTURE
	BBLOCK[O,P,S,E;N]=
	    [N]
	    (BBLOCK + O)<P,S,E>;


PSECT
	CODE=		CODE,
	PLIT=		CODE,
	OWN=		DATA,
	GLOBAL=		DATA;


FORWARD ROUTINE
	QUEMAN,
	HANDLER;


EXTERNAL ROUTINE
	CLI$GET_VALUE:	ADDRESSING_MODE(GENERAL),
					! Get a parameter or qualifier value
	CLI$PRESENT:	ADDRESSING_MODE(GENERAL);
					! Determine if entity is present


EXTERNAL LITERAL
	QUEMAN$_FACILITY,
	QUEMAN$_INVCHANAM,
	QUEMAN$_INVCHANUM,
	QUEMAN$_INVFORNAM,
	QUEMAN$_INVFORNUM,
	QUEMAN$_INVLOGFIL;


OWN
	EXIT_STATUS:	BBLOCK[4];	! Most severe error status

ROUTINE QUEMAN=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is the main entry point for the queue management commands.
!
! INPUT PARAMETERS:
!	Standard VMS activation parameters (not used).
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	Completion status.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LOCAL
	VALUE_DESC:	BBLOCK[DSC$C_S_BLN],	! Qualifier value descriptor
	VERB_DESC:	BBLOCK[DSC$C_S_BLN],	! Verb value descriptor
	ITEM_BUFFER:	BBLOCK[1536],		! $SNDJBC item buffer
	DATA_BUFFER:	BBLOCK[1024],		! $SNDJBC data buffer
	VERB,					! Verb code
	FUNC,					! Function code
	SAVED_ICURSOR,				! Saved cursor values
	SAVED_DCURSOR,				!     ...
	IOSB:		VECTOR[4,WORD],		! I/O status block
	STATUS;
MACRO
	SD_[A] = BIND %NAME('D_', A) = $DESCRIPTOR(A) %;
	SD_(
	    '$VERB',
	    'P1',
	    'P2',
	    'ABORT',
	    'AFTER',
	    'ALIGN',
	    'BACKWARD',
	    'BASE_PRIORITY',
	    'BATCH',
	    'BLOCK_LIMIT',
	    'BUFFER_COUNT',
	    'BURST',
	    'CHARACTERISTIC',
	    'CHARACTERISTICS',
	    'CHECKPOINT',
	    'CLI',
	    'COPIES',
	    'CPUDEFAULT',
	    'CPUMAXIMUM',
	    'CPUTIME',
	    'DEFAULT',
	    'DELETE',
	    'DESCRIPTION',
	    'DISABLE_SWAPPING',
	    'ENABLE_GENERIC',
	    'ENTRY',
	    'EXTEND_QUANTITY',
	    'FEED',
	    'FLAG',
	    'FORM',
	    'FORWARD',
	    'GENERIC',
	    'HEADER',
	    'HOLD',
	    'JOB_',
	    'JOB_COUNT',
	    'JOB_LIMIT',
	    'KEEP',
	    'LENGTH',
	    'LIBRARY',
	    'LOG_FILE',
	    'LOWERCASE',
	    'MANAGER',
	    'MERGE',
	    'NAME',
	    'NEW_VERSION',
	    'NEXT',
	    'NOTE',
	    'NOTIFY',
	    'ON',
	    'OPERATOR',
	    'OWNER_UIC',
	    'PAGE_SETUP',
	    'PAGES',
	    'PARAMETERS',
	    'PASSALL',
	    'PRINTER',
	    'PRIORITY',
	    'PROCESSOR',
	    'PROTECTION',
	    'QUEUE',
	    'RELEASE',
	    'REQUEUE',
	    'RESET',
	    'RESTART',
	    'RESTART_VALUE',
	    'RETAIN',
	    'SEARCH',
	    'SEPARATE',
	    'SETUP',
	    'SHEET_FEED',
	    'SPACE',
	    'START',
	    'STOCK',
	    'TERMINAL',
	    'TOP_OF_FILE',
	    'TRAILER',
	    'TRUNCATE',
	    'WIDTH',
	    'WRAP',
	    'WSDEFAULT',
	    'WSEXTENT',
	    'WSQUOTA');
BIND
	D_DEFAULT_BURST=	$DESCRIPTOR('DEFAULT.BURST'),
	D_DEFAULT_BURST_ALL=	$DESCRIPTOR('DEFAULT.BURST.ALL'),
	D_DEFAULT_BURST_ONE=	$DESCRIPTOR('DEFAULT.BURST.ONE'),
	D_DEFAULT_FEED=		$DESCRIPTOR('DEFAULT.FEED'),
	D_DEFAULT_FLAG=		$DESCRIPTOR('DEFAULT.FLAG'),
	D_DEFAULT_FLAG_ALL=	$DESCRIPTOR('DEFAULT.FLAG.ALL'),
	D_DEFAULT_FLAG_ONE=	$DESCRIPTOR('DEFAULT.FLAG.ONE'),
	D_DEFAULT_TRAILER=	$DESCRIPTOR('DEFAULT.TRAILER'),
	D_DEFAULT_TRAILER_ALL=	$DESCRIPTOR('DEFAULT.TRAILER.ALL'),
	D_DEFAULT_TRAILER_ONE=	$DESCRIPTOR('DEFAULT.TRAILER.ONE'),
	D_MARGIN_BOTTOM=	$DESCRIPTOR('MARGIN.BOTTOM'),
	D_MARGIN_LEFT=		$DESCRIPTOR('MARGIN.LEFT'),
	D_MARGIN_RIGHT=		$DESCRIPTOR('MARGIN.RIGHT'),
	D_MARGIN_TOP=		$DESCRIPTOR('MARGIN.TOP'),
	D_RETAIN_ALL=		$DESCRIPTOR('RETAIN.ALL'),
	D_RETAIN_ERROR=		$DESCRIPTOR('RETAIN.ERROR'),
	D_SCHEDULE_SIZE=	$DESCRIPTOR('SCHEDULE.SIZE'),
	D_SEPARATE_BURST=	$DESCRIPTOR('SEPARATE.BURST'),
	D_SEPARATE_FLAG=	$DESCRIPTOR('SEPARATE.FLAG'),
	D_SEPARATE_RESET=	$DESCRIPTOR('SEPARATE.RESET'),
	D_SEPARATE_TRAILER=	$DESCRIPTOR('SEPARATE.TRAILER');
LITERAL
	K_ASSIGN=	0,
	K_DEASSIGN=	1,
	K_DEFINE=	2,
	K_DELETE=	3,
	K_INITIALIZE=	4,
	K_SET=		5,
	K_SHOW=		6,
	K_START=	7,
	K_STOP=		8,
	K_SYNCHRONIZE=	9;
OWN
	FUNCTION_CODES:	VECTOR[10,WORD] PSECT(CODE) PRESET(
	    [K_ASSIGN]=		SJC$_ASSIGN_QUEUE,
	    [K_DEASSIGN]=	SJC$_DEASSIGN_QUEUE,
	    [K_DEFINE]=		SJC$_DEFINE_CHARACTERISTIC,
	    [K_DELETE]=		SJC$_DELETE_QUEUE,
	    [K_INITIALIZE]=	SJC$_CREATE_QUEUE,
	    [K_SET]=		SJC$_ALTER_JOB,
	    [K_START]=		SJC$_START_QUEUE,
	    [K_STOP]=		SJC$_PAUSE_QUEUE,
	    [K_SYNCHRONIZE]=	SJC$_SYNCHRONIZE_JOB);
BUILTIN
	FP;

PARSE_GLOBAL_REGISTERS;


! Initialize.
!
EXIT_STATUS = SS$_NORMAL;
.FP = HANDLER;

VALUE_DESC[DSC$B_CLASS] = DSC$K_CLASS_D;
VALUE_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
VALUE_DESC[DSC$W_LENGTH] = 0;
VALUE_DESC[DSC$A_POINTER] = 0;

VERB_DESC[DSC$B_CLASS] = DSC$K_CLASS_S;
VERB_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
VERB_DESC[DSC$W_LENGTH] = 4;
VERB_DESC[DSC$A_POINTER] = VERB;


! Identify the command verb.
!
CLI$GET_VALUE(D_$VERB, VERB_DESC);
SELECTONE .VERB OF
    SET
    ['ASSI']:		VERB = K_ASSIGN;
    ['DEAS']:		VERB = K_DEASSIGN;
    ['DEFI']:		VERB = K_DEFINE;
    ['DELE']:		VERB = K_DELETE;
    ['INIT']:		VERB = K_INITIALIZE;
    ['SET ']:		VERB = K_SET;
    ['SHOW']:		VERB = K_SHOW;
    ['STAR']:		VERB = K_START;
    ['STOP']:		VERB = K_STOP;
    ['SYNC']:		VERB = K_SYNCHRONIZE;
    [OTHERWISE]:	RETURN SS$_NORMAL;
    TES;


PARSE_GLOBAL_INIT(
    ICURSOR=	ITEM_BUFFER,
    DCURSOR=	DATA_BUFFER,
    MESSAGE=	QUEMAN$_FACILITY^16 OR SHR$_BADQNAME OR STS$K_SEVERE,
    VALUE_DESC=	VALUE_DESC);


FUNC = .FUNCTION_CODES[.VERB];


CASE .VERB FROM K_ASSIGN TO K_SYNCHRONIZE OF
    SET


    [K_ASSIGN]:
	BEGIN
	PARSE_CALL(QUEUE, D_P1, SJC$_DESTINATION_QUEUE);
	PARSE_CALL(QUEUE, D_P2, SJC$_QUEUE);
	IF CLI$PRESENT(D_MERGE) THEN FUNC = SJC$_MERGE_QUEUE;
	END;


    [K_DEASSIGN]:
	PARSE_CALL(QUEUE, D_P1, SJC$_QUEUE);


    [K_DEFINE]:
	BEGIN
	IF CLI$PRESENT(D_CHARACTERISTIC)
	THEN
	    BEGIN
	    Q_MESSAGE = QUEMAN$_INVCHANAM;
	    PARSE_CALL(OBJECT_NAME, D_P1, SJC$_CHARACTERISTIC_NAME);
	    Q_MESSAGE = QUEMAN$_INVCHANUM;
	    PARSE_CALL(CHAR_NUMBER, D_P2, SJC$_CHARACTERISTIC_NUMBER);
	    END
	ELSE
	    BEGIN
	    FUNC = SJC$_DEFINE_FORM;
	    Q_MESSAGE = QUEMAN$_INVFORNAM;
	    PARSE_CALL(OBJECT_NAME, D_P1, SJC$_FORM_NAME);
	    Q_MESSAGE = QUEMAN$_INVFORNUM;
	    PARSE_CALL(NUMBER, D_P2, SJC$_FORM_NUMBER);
	    Q_MESSAGE = QUEMAN$_FACILITY^16 + SHR$_INVQUAVAL + STS$K_SEVERE;
	    PARSE_CALL(STRING_255, D_DESCRIPTION,
		SJC$_FORM_DESCRIPTION);
	    PARSE_CALL(NONZERO_NUMBER, D_LENGTH,
		SJC$_FORM_LENGTH);
	    PARSE_CALL(NUMBER, D_MARGIN_BOTTOM,
		SJC$_FORM_MARGIN_BOTTOM);
	    PARSE_CALL(NUMBER, D_MARGIN_LEFT,
		SJC$_FORM_MARGIN_LEFT);
	    PARSE_CALL(NUMBER, D_MARGIN_RIGHT,
		SJC$_FORM_MARGIN_RIGHT);
	    PARSE_CALL(NUMBER, D_MARGIN_TOP,
		SJC$_FORM_MARGIN_TOP);
	    PARSE_CALL(COMMA_LIST, D_PAGE_SETUP,
		SJC$_PAGE_SETUP_MODULES, SJC$_NO_PAGE_SETUP_MODULES);
	    PARSE_CALL(COMMA_LIST, D_SETUP,
		SJC$_FORM_SETUP_MODULES, SJC$_NO_FORM_SETUP_MODULES);
	    PARSE_CALL(IF_TRUE_FALSE, D_SHEET_FEED,
		SJC$_FORM_SHEET_FEED, SJC$_NO_FORM_SHEET_FEED);
	    PARSE_CALL(OBJECT_NAME, D_STOCK,
		SJC$_FORM_STOCK);
	    PARSE_CALL(IF_TRUE_FALSE, D_TRUNCATE,
		SJC$_FORM_TRUNCATE, SJC$_NO_FORM_TRUNCATE);
	    PARSE_CALL(NONZERO_NUMBER, D_WIDTH,
		SJC$_FORM_WIDTH);
	    PARSE_CALL(IF_TRUE_FALSE, D_WRAP,
		SJC$_FORM_WRAP, SJC$_NO_FORM_WRAP);
	    END;
	END;


    [K_DELETE]:
	BEGIN
	IF CLI$PRESENT(D_CHARACTERISTIC)
	THEN
	    BEGIN
	    FUNC = SJC$_DELETE_CHARACTERISTIC;
	    Q_MESSAGE = QUEMAN$_INVCHANAM;
	    PARSE_CALL(OBJECT_NAME, D_P1, SJC$_CHARACTERISTIC_NAME);
	    END
	ELSE IF CLI$PRESENT(D_FORM)
	THEN
	    BEGIN
	    FUNC = SJC$_DELETE_FORM;
	    Q_MESSAGE = QUEMAN$_INVFORNAM;
	    PARSE_CALL(OBJECT_NAME, D_P1, SJC$_FORM_NAME);
	    END
	ELSE
	    BEGIN
	    PARSE_CALL(QUEUE, D_P1, SJC$_QUEUE);
	    Q_MESSAGE = QUEMAN$_FACILITY^16 + SHR$_INVQUAVAL + STS$K_SEVERE;
	    SAVED_DCURSOR = .Q_DCURSOR;
	    SAVED_ICURSOR = .Q_ICURSOR;
	    IF PARSE_CALL_VALUE(ENTRY, D_ENTRY)
	    THEN
		FUNC = SJC$_DELETE_JOB;
	    END;
	END;


    [K_INITIALIZE]:
	BEGIN
	PARSE_CALL(QUEUE, D_P1, SJC$_QUEUE);
	Q_MESSAGE = QUEMAN$_FACILITY^16 + SHR$_INVQUAVAL + STS$K_SEVERE;
	PARSE_CALL(BASE_PRIORITY, D_BASE_PRIORITY);
	PARSE_CALL(IF_TRUE_FALSE, D_BATCH,
	    SJC$_BATCH, SJC$_NO_BATCH);
	PARSE_CALL(LOWER_UPPER, D_BLOCK_LIMIT,
	    SJC$_JOB_SIZE_MINIMUM, SJC$_NO_JOB_SIZE_MINIMUM,
	    SJC$_JOB_SIZE_MAXIMUM, SJC$_NO_JOB_SIZE_MAXIMUM);
	PARSE_CALL(CHARACTERISTICS, D_CHARACTERISTICS);
	PARSE_CALL(CPUTIME, D_CPUDEFAULT,
	    SJC$_CPU_DEFAULT, SJC$_NO_CPU_DEFAULT);
	PARSE_CALL(CPUTIME, D_CPUMAXIMUM,
	    SJC$_CPU_LIMIT, SJC$_NO_CPU_LIMIT);
	PARSE_CALL(IF_TRUE, D_DEFAULT_BURST_ALL,
	    SJC$_FILE_BURST);
	PARSE_CALL(IF_TRUE, D_DEFAULT_BURST_ONE,
	    SJC$_FILE_BURST_ONE);
	PARSE_CALL(IF_FALSE, D_DEFAULT_BURST,
	    SJC$_NO_FILE_BURST);
	PARSE_CALL(IF_TRUE_FALSE, D_DEFAULT_FEED,
	    SJC$_PAGINATE, SJC$_NO_PAGINATE);
	PARSE_CALL(IF_TRUE, D_DEFAULT_FLAG_ALL,
	    SJC$_FILE_FLAG);
	PARSE_CALL(IF_TRUE, D_DEFAULT_FLAG_ONE,
	    SJC$_FILE_FLAG_ONE);
	PARSE_CALL(IF_FALSE, D_DEFAULT_FLAG,
	    SJC$_NO_FILE_FLAG);
	PARSE_CALL(IF_TRUE, D_DEFAULT_TRAILER_ALL,
	    SJC$_FILE_TRAILER);
	PARSE_CALL(IF_TRUE, D_DEFAULT_TRAILER_ONE,
	    SJC$_FILE_TRAILER_ONE);
	PARSE_CALL(IF_FALSE, D_DEFAULT_TRAILER,
	    SJC$_NO_FILE_TRAILER);
	PARSE_CALL(IF_FALSE, D_DEFAULT,
	    SJC$_NO_FILE_BURST, SJC$_NO_FILE_FLAG, SJC$_NO_FILE_TRAILER);
	PARSE_CALL(IF_TRUE_FALSE, D_DISABLE_SWAPPING,
	    SJC$_NO_SWAP, SJC$_SWAP);
	PARSE_CALL(IF_TRUE_FALSE, D_ENABLE_GENERIC,
	    SJC$_GENERIC_SELECTION, SJC$_NO_GENERIC_SELECTION);
	PARSE_CALL(FORM, D_FORM);
	PARSE_CALL(GENERIC, D_GENERIC);
	PARSE_CALL(JOB_LIMIT, D_JOB_LIMIT);
	PARSE_CALL(FILENAME, D_LIBRARY,
	    SJC$_LIBRARY_SPECIFICATION, SJC$_NO_LIBRARY_SPECIFICATION);
	PARSE_CALL(ON, D_ON);
	PARSE_CALL(OWNER, D_OWNER_UIC);
	PARSE_CALL(FILENAME, D_PROCESSOR,
	    SJC$_PROCESSOR, SJC$_NO_PROCESSOR);
	PARSE_CALL(PROTECTION, D_PROTECTION);
	PARSE_CALL(IF_TRUE, D_RETAIN_ALL,
	    SJC$_RETAIN_ALL_JOBS);
	PARSE_CALL(IF_TRUE, D_RETAIN_ERROR,
	    SJC$_RETAIN_ERROR_JOBS);
	PARSE_CALL(IF_FALSE, D_RETAIN,
	    SJC$_NO_RETAIN_JOBS);
	PARSE_CALL(IF_TRUE_FALSE, D_SCHEDULE_SIZE,
	    SJC$_JOB_SIZE_SCHEDULING, SJC$_NO_JOB_SIZE_SCHEDULING);
	PARSE_CALL(IF_TRUE_FALSE, D_SEPARATE_BURST,
	    SJC$_JOB_BURST, SJC$_NO_JOB_BURST);
	PARSE_CALL(IF_TRUE_FALSE, D_SEPARATE_FLAG,
	    SJC$_JOB_FLAG, SJC$_NO_JOB_FLAG);
	PARSE_CALL(COMMA_LIST, D_SEPARATE_RESET,
	    SJC$_JOB_RESET_MODULES, SJC$_NO_JOB_RESET_MODULES);
	PARSE_CALL(IF_TRUE_FALSE, D_SEPARATE_TRAILER,
	    SJC$_JOB_TRAILER, SJC$_NO_JOB_TRAILER);
	PARSE_CALL(IF_FALSE, D_SEPARATE,
	    SJC$_NO_JOB_BURST, SJC$_NO_JOB_FLAG,
	    SJC$_NO_JOB_RESET_MODULES, SJC$_NO_JOB_TRAILER);
	PARSE_CALL(IF_TRUE, D_START,
	    SJC$_CREATE_START);
	PARSE_CALL(IF_TRUE_FALSE, D_TERMINAL,
	    SJC$_TERMINAL, SJC$_NO_TERMINAL);
	PARSE_CALL(WORKING_SET, D_WSDEFAULT,
	    SJC$_WSDEFAULT, SJC$_NO_WSDEFAULT);
	PARSE_CALL(WORKING_SET, D_WSEXTENT,
	    SJC$_WSEXTENT, SJC$_NO_WSEXTENT);
	PARSE_CALL(WORKING_SET, D_WSQUOTA,
	    SJC$_WSQUOTA, SJC$_NO_WSQUOTA);
	END;


    [K_SET]:
	BEGIN
	IF CLI$PRESENT($DESCRIPTOR('OPTION.RESTART_VALUE'))
	THEN
	    BEGIN
	    FUNC = SJC$_BATCH_CHECKPOINT;
	    PARSE_CALL(STRING_255, D_RESTART_VALUE,
		SJC$_CHECKPOINT_DATA);
	    END
	ELSE
	    BEGIN
	    PARSE_CALL(QUEUE, D_P2, SJC$_QUEUE, $DESCRIPTOR('SYS$PRINT'));
	    Q_MESSAGE = QUEMAN$_FACILITY^16 + SHR$_INVQUAVAL + STS$K_SEVERE;
	    IF PARSE_CALL_VALUE(ENTRY, D_ENTRY)
	    THEN
		BEGIN
		LOCAL
		    LOG_FILE_DESC:	BBLOCK[DSC$C_D_BLN],
		    NO_LOG_FILE;

		LOG_FILE_DESC[DSC$W_LENGTH] = 0;
		LOG_FILE_DESC[DSC$B_CLASS] = DSC$K_CLASS_D;
		LOG_FILE_DESC[DSC$B_DTYPE] = DSC$K_DTYPE_T;
		LOG_FILE_DESC[DSC$A_POINTER] = 0;

		PARSE_CALL(AFTER, D_AFTER);
		PARSE_CALL(IF_TRUE_FALSE, D_BURST,
		    SJC$_FILE_BURST, SJC$_NO_FILE_BURST);
		PARSE_CALL(CHARACTERISTICS, D_CHARACTERISTICS);
		PARSE_CALL(IF_FALSE, D_CHECKPOINT,
		    SJC$_NO_CHECKPOINT_DATA);
		PARSE_CALL(FILENAME, D_CLI,
		    SJC$_CLI, SJC$_NO_CLI);
		PARSE_CALL(COPIES, D_COPIES,
		    SJC$_FILE_COPIES);
		PARSE_CALL(CPUTIME, D_CPUTIME,
		    SJC$_CPU_LIMIT, SJC$_NO_CPU_LIMIT);
		PARSE_CALL(IF_TRUE_FALSE, D_DELETE,
		    SJC$_DELETE_FILE, SJC$_NO_DELETE_FILE);
		PARSE_CALL(IF_TRUE_FALSE, D_FEED,
		    SJC$_PAGINATE, SJC$_NO_PAGINATE);
		PARSE_CALL(IF_TRUE_FALSE, D_FLAG,
		    SJC$_FILE_FLAG, SJC$_NO_FILE_FLAG);
		PARSE_CALL(FORM, D_FORM);
		PARSE_CALL(IF_TRUE_FALSE, D_HEADER,
		    SJC$_PAGE_HEADER, SJC$_NO_PAGE_HEADER);
		PARSE_CALL(IF_TRUE_FALSE, D_HOLD,
		    SJC$_HOLD, SJC$_NO_HOLD);
		PARSE_CALL(COPIES, D_JOB_,
		    SJC$_JOB_COPIES);
		PARSE_CALL(IF_TRUE_FALSE, D_KEEP,
		    SJC$_NO_LOG_DELETE, SJC$_LOG_DELETE);
		Q_VALUE_DESC = LOG_FILE_DESC;
		NO_LOG_FILE = PARSE_CALL_VALUE(LOG_FILE, D_LOG_FILE);
		Q_VALUE_DESC = VALUE_DESC;
		PARSE_CALL(IF_TRUE_FALSE, D_LOWERCASE,
		    SJC$_LOWERCASE, SJC$_NO_LOWERCASE);
		PARSE_CALL(NAME, D_NAME);
		IF NOT .NO_LOG_FILE
		THEN
		    PARSE_CALL(NAME_AND_LOG_FILE,
			VALUE_DESC, LOG_FILE_DESC,
			$DESCRIPTOR('SYS$LOGIN:.LOG'), QUEMAN$_INVLOGFIL);
		PARSE_CALL(STRING, D_NOTE,
		    SJC$_NOTE, SJC$_NO_NOTE);
		PARSE_CALL(IF_TRUE_FALSE, D_NOTIFY,
		    SJC$_NOTIFY, SJC$_NO_NOTIFY);
		PARSE_CALL(STRING, D_OPERATOR,
		    SJC$_OPERATOR_REQUEST, SJC$_NO_OPERATOR_REQUEST);
		PARSE_CALL(LOWER_UPPER, D_PAGES,
		    SJC$_FIRST_PAGE, SJC$_NO_FIRST_PAGE,
		    SJC$_LAST_PAGE,  SJC$_NO_LAST_PAGE);
		PARSE_CALL(PARAMETERS, D_PARAMETERS);
		PARSE_CALL(IF_TRUE_FALSE, D_PASSALL,
		    SJC$_PASSALL, SJC$_NO_PASSALL);
		PARSE_CALL(PRINTER, D_PRINTER);
		PARSE_CALL(PRIORITY, D_PRIORITY);
		PARSE_CALL(IF_TRUE, D_RELEASE,
		    SJC$_NO_HOLD);
		PARSE_CALL(QUEUE, D_REQUEUE,
		    SJC$_DESTINATION_QUEUE);
		PARSE_CALL(IF_TRUE_FALSE, D_RESTART,
		    SJC$_RESTART, SJC$_NO_RESTART);
		PARSE_CALL(COMMA_LIST, D_SETUP,
		    SJC$_FILE_SETUP_MODULES, SJC$_NO_FILE_SETUP_MODULES);
		PARSE_CALL(IF_TRUE_FALSE, D_SPACE,
		    SJC$_DOUBLE_SPACE, SJC$_NO_DOUBLE_SPACE);
		PARSE_CALL(IF_TRUE_FALSE, D_TRAILER,
		    SJC$_FILE_TRAILER, SJC$_NO_FILE_TRAILER);
		PARSE_CALL(WORKING_SET, D_WSDEFAULT,
		    SJC$_WSDEFAULT, SJC$_NO_WSDEFAULT);
		PARSE_CALL(WORKING_SET, D_WSEXTENT,
		    SJC$_WSEXTENT, SJC$_NO_WSEXTENT);
		PARSE_CALL(WORKING_SET, D_WSQUOTA,
		    SJC$_WSQUOTA, SJC$_NO_WSQUOTA);
		END
	    ELSE
		BEGIN
		FUNC = SJC$_ALTER_QUEUE;
		PARSE_CALL(BASE_PRIORITY, D_BASE_PRIORITY);
		PARSE_CALL(LOWER_UPPER, D_BLOCK_LIMIT,
		    SJC$_JOB_SIZE_MINIMUM, SJC$_NO_JOB_SIZE_MINIMUM,
		    SJC$_JOB_SIZE_MAXIMUM, SJC$_NO_JOB_SIZE_MAXIMUM);
		PARSE_CALL(CHARACTERISTICS, D_CHARACTERISTICS);
		PARSE_CALL(CPUTIME, D_CPUDEFAULT,
		    SJC$_CPU_DEFAULT, SJC$_NO_CPU_DEFAULT);
		PARSE_CALL(CPUTIME, D_CPUMAXIMUM,
		    SJC$_CPU_LIMIT, SJC$_NO_CPU_LIMIT);
		PARSE_CALL(IF_TRUE, D_DEFAULT_BURST_ALL,
		    SJC$_FILE_BURST);
		PARSE_CALL(IF_TRUE, D_DEFAULT_BURST_ONE,
		    SJC$_FILE_BURST_ONE);
		PARSE_CALL(IF_FALSE, D_DEFAULT_BURST,
		    SJC$_NO_FILE_BURST);
		PARSE_CALL(IF_TRUE_FALSE, D_DEFAULT_FEED,
		    SJC$_PAGINATE, SJC$_NO_PAGINATE);
		PARSE_CALL(IF_TRUE, D_DEFAULT_FLAG_ALL,
		    SJC$_FILE_FLAG);
		PARSE_CALL(IF_TRUE, D_DEFAULT_FLAG_ONE,
		    SJC$_FILE_FLAG_ONE);
		PARSE_CALL(IF_FALSE, D_DEFAULT_FLAG,
		    SJC$_NO_FILE_FLAG);
		PARSE_CALL(IF_TRUE, D_DEFAULT_TRAILER_ALL,
		    SJC$_FILE_TRAILER);
		PARSE_CALL(IF_TRUE, D_DEFAULT_TRAILER_ONE,
		    SJC$_FILE_TRAILER_ONE);
		PARSE_CALL(IF_FALSE, D_DEFAULT_TRAILER,
		    SJC$_NO_FILE_TRAILER);
		PARSE_CALL(IF_FALSE, D_DEFAULT,
		    SJC$_NO_FILE_BURST, SJC$_NO_FILE_FLAG,
		    SJC$_NO_FILE_TRAILER);
		PARSE_CALL(IF_TRUE_FALSE, D_DISABLE_SWAPPING,
		    SJC$_NO_SWAP, SJC$_SWAP);
		PARSE_CALL(IF_TRUE_FALSE, D_ENABLE_GENERIC,
		    SJC$_GENERIC_SELECTION, SJC$_NO_GENERIC_SELECTION);
		PARSE_CALL(FORM, D_FORM);
		PARSE_CALL(JOB_LIMIT, D_JOB_);
		PARSE_CALL(OWNER, D_OWNER_UIC);
		PARSE_CALL(PROTECTION, D_PROTECTION);
		PARSE_CALL(IF_TRUE, D_RETAIN_ALL,
		    SJC$_RETAIN_ALL_JOBS);
		PARSE_CALL(IF_TRUE, D_RETAIN_ERROR,
		    SJC$_RETAIN_ERROR_JOBS);
		PARSE_CALL(IF_FALSE, D_RETAIN,
		    SJC$_NO_RETAIN_JOBS);
		PARSE_CALL(IF_TRUE_FALSE, D_SCHEDULE_SIZE,
		    SJC$_JOB_SIZE_SCHEDULING, SJC$_NO_JOB_SIZE_SCHEDULING);
		PARSE_CALL(IF_TRUE_FALSE, D_SEPARATE_BURST,
		    SJC$_JOB_BURST, SJC$_NO_JOB_BURST);
		PARSE_CALL(IF_TRUE_FALSE, D_SEPARATE_FLAG,
		    SJC$_JOB_FLAG, SJC$_NO_JOB_FLAG);
		PARSE_CALL(COMMA_LIST, D_SEPARATE_RESET,
		    SJC$_JOB_RESET_MODULES, SJC$_NO_JOB_RESET_MODULES);
		PARSE_CALL(IF_TRUE_FALSE, D_SEPARATE_TRAILER,
		    SJC$_JOB_TRAILER, SJC$_NO_JOB_TRAILER);
		PARSE_CALL(IF_FALSE, D_SEPARATE,
		    SJC$_NO_JOB_BURST, SJC$_NO_JOB_FLAG,
		    SJC$_NO_JOB_RESET_MODULES, SJC$_NO_JOB_TRAILER);
		PARSE_CALL(WORKING_SET, D_WSDEFAULT,
		    SJC$_WSDEFAULT, SJC$_NO_WSDEFAULT);
		PARSE_CALL(WORKING_SET, D_WSEXTENT,
		    SJC$_WSEXTENT, SJC$_NO_WSEXTENT);
		PARSE_CALL(WORKING_SET, D_WSQUOTA,
		    SJC$_WSQUOTA, SJC$_NO_WSQUOTA);
		END;
	    END;
	END;


    [K_SHOW]:
	BEGIN
	EXTERNAL ROUTINE
	    SHOWQUEUE:	NOVALUE;

	SHOWQUEUE();
	RETURN .EXIT_STATUS OR STS$M_INHIB_MSG;
	END;


    [K_START]:
	BEGIN
	IF CLI$PRESENT(D_MANAGER)
	THEN
	    BEGIN
	    FUNC = SJC$_START_QUEUE_MANAGER;
	    Q_MESSAGE = QUEMAN$_FACILITY^16 + SHR$_INVQUAVAL + STS$K_SEVERE;
	    PARSE_CALL(STRING_255, D_P1,
		SJC$_QUEUE_FILE_SPECIFICATION);
	    PARSE_CALL(BUFFER_COUNT,D_BUFFER_COUNT);
	    PARSE_CALL(EXTEND_QUANTITY,D_EXTEND_QUANTITY);
	    PARSE_CALL(IF_TRUE, D_NEW_VERSION,
		SJC$_NEW_VERSION);
	    PARSE_CALL(ON, D_ON);
	    END
	ELSE
	    BEGIN
	    PARSE_CALL(QUEUE, D_P1, SJC$_QUEUE);
	    Q_MESSAGE = QUEMAN$_FACILITY^16 + SHR$_INVQUAVAL + STS$K_SEVERE;
	    PARSE_CALL(ALIGN, D_ALIGN);
	    PARSE_CALL(BACKWARD, D_BACKWARD);
	    PARSE_CALL(BASE_PRIORITY, D_BASE_PRIORITY);
	    PARSE_CALL(IF_TRUE, D_BATCH,
		SJC$_BATCH);
	    PARSE_CALL(LOWER_UPPER, D_BLOCK_LIMIT,
		SJC$_JOB_SIZE_MINIMUM, SJC$_NO_JOB_SIZE_MINIMUM,
		SJC$_JOB_SIZE_MAXIMUM, SJC$_NO_JOB_SIZE_MAXIMUM);
	    PARSE_CALL(CHARACTERISTICS, D_CHARACTERISTICS);
	    PARSE_CALL(CPUTIME, D_CPUDEFAULT,
		SJC$_CPU_DEFAULT, SJC$_NO_CPU_DEFAULT);
	    PARSE_CALL(CPUTIME, D_CPUMAXIMUM,
		SJC$_CPU_LIMIT, SJC$_NO_CPU_LIMIT);
	    PARSE_CALL(IF_TRUE, D_DEFAULT_BURST_ALL,
		SJC$_FILE_BURST);
	    PARSE_CALL(IF_TRUE, D_DEFAULT_BURST_ONE,
		SJC$_FILE_BURST_ONE);
	    PARSE_CALL(IF_FALSE, D_DEFAULT_BURST,
		SJC$_NO_FILE_BURST);
	    PARSE_CALL(IF_TRUE_FALSE, D_DEFAULT_FEED,
		SJC$_PAGINATE, SJC$_NO_PAGINATE);
	    PARSE_CALL(IF_TRUE, D_DEFAULT_FLAG_ALL,
		SJC$_FILE_FLAG);
	    PARSE_CALL(IF_TRUE, D_DEFAULT_FLAG_ONE,
		SJC$_FILE_FLAG_ONE);
	    PARSE_CALL(IF_FALSE, D_DEFAULT_FLAG,
		SJC$_NO_FILE_FLAG);
	    PARSE_CALL(IF_TRUE, D_DEFAULT_TRAILER_ALL,
		SJC$_FILE_TRAILER);
	    PARSE_CALL(IF_TRUE, D_DEFAULT_TRAILER_ONE,
		SJC$_FILE_TRAILER_ONE);
	    PARSE_CALL(IF_FALSE, D_DEFAULT_TRAILER,
		SJC$_NO_FILE_TRAILER);
	    PARSE_CALL(IF_FALSE, D_DEFAULT,
		SJC$_NO_FILE_BURST, SJC$_NO_FILE_FLAG, SJC$_NO_FILE_TRAILER);
	    PARSE_CALL(IF_TRUE_FALSE, D_DISABLE_SWAPPING,
		SJC$_NO_SWAP, SJC$_SWAP);
	    PARSE_CALL(IF_TRUE_FALSE, D_ENABLE_GENERIC,
		SJC$_GENERIC_SELECTION, SJC$_NO_GENERIC_SELECTION);
	    PARSE_CALL(FORM, D_FORM);
	    PARSE_CALL(FORWARD, D_FORWARD);
	    PARSE_CALL(GENERIC, D_GENERIC);
	    PARSE_CALL(JOB_LIMIT, D_JOB_LIMIT);
	    PARSE_CALL(FILENAME, D_LIBRARY,
		SJC$_LIBRARY_SPECIFICATION, SJC$_NO_LIBRARY_SPECIFICATION);
	    PARSE_CALL(IF_TRUE, D_NEXT,
		SJC$_NEXT_JOB);
	    PARSE_CALL(ON, D_ON);
	    PARSE_CALL(OWNER, D_OWNER_UIC);
	    PARSE_CALL(FILENAME, D_PROCESSOR,
		SJC$_PROCESSOR, SJC$_NO_PROCESSOR);
	    PARSE_CALL(PROTECTION, D_PROTECTION);
	    PARSE_CALL(IF_TRUE, D_RETAIN_ALL,
		SJC$_RETAIN_ALL_JOBS);
	    PARSE_CALL(IF_TRUE, D_RETAIN_ERROR,
		SJC$_RETAIN_ERROR_JOBS);
	    PARSE_CALL(IF_FALSE, D_RETAIN,
		SJC$_NO_RETAIN_JOBS);
	    PARSE_CALL(SEARCH_STRING, D_SEARCH,
		SJC$_SEARCH_STRING);
	    PARSE_CALL(IF_TRUE_FALSE, D_SCHEDULE_SIZE,
		SJC$_JOB_SIZE_SCHEDULING, SJC$_NO_JOB_SIZE_SCHEDULING);
	    PARSE_CALL(IF_TRUE_FALSE, D_SEPARATE_BURST,
		SJC$_JOB_BURST, SJC$_NO_JOB_BURST);
	    PARSE_CALL(IF_TRUE_FALSE, D_SEPARATE_FLAG,
		SJC$_JOB_FLAG, SJC$_NO_JOB_FLAG);
	    PARSE_CALL(COMMA_LIST, D_SEPARATE_RESET,
		SJC$_JOB_RESET_MODULES, SJC$_NO_JOB_RESET_MODULES);
	    PARSE_CALL(IF_TRUE_FALSE, D_SEPARATE_TRAILER,
		SJC$_JOB_TRAILER, SJC$_NO_JOB_TRAILER);
	    PARSE_CALL(IF_FALSE, D_SEPARATE,
		SJC$_NO_JOB_BURST, SJC$_NO_JOB_FLAG,
		SJC$_NO_JOB_RESET_MODULES, SJC$_NO_JOB_TRAILER);
	    PARSE_CALL(IF_TRUE_FALSE, D_TERMINAL,
		SJC$_TERMINAL, SJC$_NO_TERMINAL);
	    PARSE_CALL(IF_TRUE, D_TOP_OF_FILE,
		SJC$_TOP_OF_FILE);
	    PARSE_CALL(WORKING_SET, D_WSDEFAULT,
		SJC$_WSDEFAULT, SJC$_NO_WSDEFAULT);
	    PARSE_CALL(WORKING_SET, D_WSEXTENT,
		SJC$_WSEXTENT, SJC$_NO_WSEXTENT);
	    PARSE_CALL(WORKING_SET, D_WSQUOTA,
		SJC$_WSQUOTA, SJC$_NO_WSQUOTA);
	    END;
	END;


    [K_STOP]:
	BEGIN
	IF CLI$PRESENT(D_MANAGER)
	THEN
	    BEGIN
	    FUNC = SJC$_STOP_QUEUE_MANAGER;
	    END
	ELSE
	    BEGIN
	    PARSE_CALL(QUEUE, D_P1, SJC$_QUEUE);
	    Q_MESSAGE = QUEMAN$_FACILITY^16 + SHR$_INVQUAVAL + STS$K_SEVERE;

	    IF CLI$PRESENT(D_ABORT) THEN FUNC = SJC$_ABORT_JOB;
	    IF CLI$PRESENT(D_NEXT)  THEN FUNC = SJC$_STOP_QUEUE;
	    IF CLI$PRESENT(D_RESET) THEN FUNC = SJC$_RESET_QUEUE;

	    IF PARSE_CALL_VALUE(ENTRY, D_ENTRY)
	    THEN
		FUNC = SJC$_ABORT_JOB;

	    IF CLI$PRESENT(D_REQUEUE)
	    THEN
		BEGIN
		FUNC = SJC$_ABORT_JOB;
		Q_ICURSOR[0,0,16,0] = 0;
		Q_ICURSOR[2,0,16,0] = SJC$_REQUEUE;
		Q_ICURSOR[4,0,32,0] = 0;
		Q_ICURSOR[8,0,32,0] = 0;
		Q_ICURSOR = .Q_ICURSOR + 12;
		PARSE_CALL(QUEUE, D_REQUEUE,
		    SJC$_DESTINATION_QUEUE);
		PARSE_CALL(IF_TRUE, D_HOLD,
		    SJC$_HOLD);
		PARSE_CALL(PRIORITY, D_PRIORITY);
		END;
	    END;
	END;


    [K_SYNCHRONIZE]:
	BEGIN
	PARSE_CALL(QUEUE, D_QUEUE, SJC$_QUEUE, $DESCRIPTOR('SYS$BATCH'));
	Q_MESSAGE = QUEMAN$_FACILITY^16 + SHR$_INVQUAVAL + STS$K_SEVERE;
	PARSE_CALL(ENTRY, D_ENTRY);
	Q_MESSAGE = QUEMAN$_FACILITY^16 OR SHR$_BADJOBNAME OR STS$K_SEVERE;
	PARSE_CALL(NAME, D_P1);
	END;


    TES;


DO
    BEGIN

    ! End the item list.
    !
    Q_ICURSOR[0,0,32,0] = 0;


    ! For a SYNCHRONIZE command, purge the working set before waiting.
    !
    IF .VERB EQL K_SYNCHRONIZE
    THEN
	$PURGWS(INADR=UPLIT(0, %X'7FFFFFFF'));


    ! Issue the request.
    !
    STATUS = $SNDJBCW(
	FUNC=.FUNC,
	ITMLST=ITEM_BUFFER,
	IOSB=IOSB);
    IF .STATUS THEN STATUS = .IOSB;
    IF NOT .STATUS THEN	SIGNAL(.STATUS)
    END
WHILE
    BEGIN
    IF .VERB EQL K_DELETE
    THEN
	BEGIN
	Q_DCURSOR = .SAVED_DCURSOR;
	Q_ICURSOR = .SAVED_ICURSOR;
	PARSE_CALL_VALUE(ENTRY, D_ENTRY)
	END
    ELSE
	FALSE
    END;


.EXIT_STATUS OR STS$M_INHIB_MSG
END;

ROUTINE HANDLER(SIG,MECH)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is the condition handler for the main routine.  It
!	saves the most severe condition as the exit status.
!
! INPUT PARAMETERS:
!	Standard VMS condition handler parameters.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	EXIT_STATUS	- Contains the most severe status encountered.
!
! ROUTINE VALUE:
!	SS$_RESIGNAL
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	SIG:		REF BBLOCK,	! Signal parameters
	MECH:		REF BBLOCK;	! Mechanism parameters
BIND
	SIGNAME = SIG[CHF$L_SIG_NAME] : BBLOCK;	! Name of signal


! Save the most severe condition as the exit status.
!
IF
    NOT .SIGNAME				! If an error signal
    AND ((.SIGNAME[STS$V_SEVERITY]		! and severity is worse
	GTRU .EXIT_STATUS[STS$V_SEVERITY])
	OR .EXIT_STATUS[STS$V_SEVERITY])	! or no errors yet
THEN
    EXIT_STATUS = .SIGNAME;			! then save it for exit


SS$_RESIGNAL					! Resignal to get message
END;

END
ELUDOM
