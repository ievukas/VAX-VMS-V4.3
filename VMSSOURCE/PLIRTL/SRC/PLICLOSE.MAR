	.title	pli$close - pl1 runtime close file
	.ident	/1-004/					; Edit DSB1004
							; Edit CGN1003
							; Edit WHM1002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;


;++
; facility:
;
;	VAX/VMS PL1 runtime library.
; abstract:
;
;	This module contains the pl1 runtime routine for closing a file.
;
; author: c. spitz 18-jul-79
;
; modified:
;
;
;	1-002	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;	1-003	Chip Nylander	23-February-1983
;
;		Add new optional parameter to PLI$CLOSE.  If parameter is
;		present, it specifies the severity level at which to signal
;		errors.
;
;	1-004	Dave Blickstein	26-March-1984
;
;		Change calls to LIB$FREE_VM to specify only the actual number
;		of arguments they push (2) to the CALLS instruction.  The
;		argument count was being used to pop local stack temporaries.
;		This broke when new versions of the VM routines that took
;		optional arguments were called.
;--


;
; external definitions
;

	$deffcb				;define file control block offsets
	$defpl1rtcons			;define pl1 runtime constants
	$defkcb				;define key control block offsets
	$defenv				;define environment block offsets
	$fabdef				;define fab offsets
	$namdef				;define nam offsets

;
; local data
;

	rtshare				;sharable


	.page

;++
; pli$close -- close a file
;
; functional description:
;
; This routine closes a pl1 file.  The syntax of a close statement is:
;	CLOSE FILE(file-ref);
;
; inputs:
;	(ap) = number of arguments (1)
;	4(ap) = address of the fcb for this file
;	8(ap) = address of the environment option
;      12(ap) = severity level at which to signal errors
;
; outputs: 
;	the fcb is updated to reflect the closed status of the file.
;	an rms close is issued, the file block is deallocated, and the
;	fcb is removed from the open fcb list.
;--

	.entry	pli$close,^m<r2,r3,r4,r5,r6,r7>
;
; check argument
;
	tstl	(ap)			;if no parameters
	bgtr	10$			;then
	clrl	r1			;indicate no fcb
	movl	#pli$_parm,r0		;set invalid parameters
	brw	50$			;and fail
;
; if file opened, close it.
;
10$:	movl	4(ap),r2		;get address of fcb
	bbs	#atr_v_opened,fcb_l_attr(r2),20$ ;if file opened
	brw	110$			;then
20$:	bicl	#<atr_m_opened!atr_m_bfall>,- ;set file not opened and
		fcb_l_attr(r2)		;buffer not allocated
	movab	fcb_b_fab(r2),r3	;get address of fab
	bitl	#<atr_m_record! - 	;if record
		atr_m_input>,fcb_l_attr(r2) ;or input
	bneq	30$			;then cont
	bbc	#atr_v_print,fcb_l_attr(r2),25$ ;if not print, cont
	tstl	fcb_l_prn(r2)		;any carriage control pending?
	bneq	26$			;if neq, yes, print it
25$:	cmpl	fcb_l_buf(r2),fcb_l_buf_pt(r2) ;if buf empty
	beql	30$			;then cont
26$:	pushl	ap			;save ap
	movl	r2,ap			;set fcb addr in ap
	jsb	g^pli$$put_rec		;put the last record
	popl	ap			;restore ap
30$:	cmpl	(ap),#2			;close environment?
	blss	37$			;if lss, no
	tstl	8(ap)			;anything there?
	beql	37$			;if eql, no
	subl	#env_k_len,sp		;get room for env block
	movq	r2,r6			;save fcb and fab addr
	movc5	#0,(sp),#0,#env_k_len,(sp) ;zero env block
	movq	r6,r2			;restore fcb and fab
	bisl	#env_m_close,env_l_status(sp) ;set close status
	pushl	sp			;set addr of env block
	pushl	8(ap)			;set addr of close environment
	pushl	r2			;set addr of fcb
	pushab	8(sp)			;set addr of addr
	pushab	8(sp)			;set addr of addr
	pushab	8(sp)			;set addr of addr
	calls	#6,g^pli$$envir		;process environment	
	blbs	r0,37$			;if lbs, cont
	ret				;error already signaled, just return
37$:	$close	r3			;close the file
	blbs	r0,60$			;if error on close
	movl	#pli$_rmsf,r0		;then set rms fab error code
40$:	movl	r0,fcb_l_error(r2)	;put error in fcb
	movl	r2,r1			;set fcb address
50$:	pushl	r1			;push fcb addr
	pushl	r0			;push error code
	pushl	#pli$_error		;set error condition
	cmpl	(ap),#3			;error level specified?
	blss	53$			;if lss, no
	insv	12(ap),#0,#3,(sp)	; set severity to specified level
53$:	calls	#3,g^pli$io_error	;signal the condition
	ret				;return
55$:	movl	#pli$_virmemdeal,r0	;set vir. mem. deallocation error
	brb	40$			;and fail
;
; deallocate file buffer
;
60$:	tstl	fcb_l_buf(r2)		;if buffer allocated
	beql	80$			;then
	bbs	#atr_v_record,fcb_l_attr(r2),70$ ;if stream
	movzwl	fcb_w_linesize(r2),-(sp) ;set length of buffer
	brb	75$			;cont
70$:	pushl	fcb_l_buf_end(r2)	;push length of buffer
75$:	pushal	fcb_l_buf(r2)		;push address of buffer
	pushal	4(sp)			;push address of length
	calls	#2,g^lib$free_vm	;free buffer
	addl2	#4,sp			;
	blbc	r0,55$			;if deallocation error then fail
	clrl	fcb_l_buf(r2)		;indicate buffer not allocated
	clrl	fcb_l_buf_end(r2)	;
80$:	clrb	<fcb_b_nam+nam$b_esl>(r2) ;clear esl
	bbc	#atr_v_indexed,fcb_l_attr(r2),85$ ;if indexed
	tstl	fcb_l_kcb(r2)		;kcb allocated?
	beql	85$			;if eql, no, cont
	movzbl	fcb_b_numkcbs(r2),r1	;get number of kcbs
	mull3	#kcb_c_len,r1,-(sp)	;get size of kcbs
	pushal	fcb_l_kcb(r2)		;push address of kcbs
	pushal	4(sp)			;push address of length
	calls	#2,g^lib$free_vm	;free kcbs
	addl2	#4,sp			;
	blbc	r0,55$			;if error, fail
	clrl	fcb_l_kcb(r2)		;indicate no kcbs
;
; remove file from open file queue, set it not open and return
;
85$:	remque	(r2),r2			;remove fcb from queue
110$:	movl	#1,r0			;set success
	ret				;return

	.end

