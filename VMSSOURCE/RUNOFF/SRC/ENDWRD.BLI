%TITLE 'Perform end-word processing'
MODULE endwrd (	IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					    NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	Handles end of word processing.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	R.W.Friday	 CREATION DATE: May, 1978
!


%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	009	REM00009	Ray Marshall	7-November-1983
!		Added logic to reset the multinational character set case
!		  rules, too.
!
!	008	KFA00008	Ken Alden	13-Sep-1983
!		Added functionality for pass-through escape sequences.
!
!	007	RER00007	Ron Randall	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--


%SBTTL 'Module Level Declarations'

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! EXTERNAL REFERENCES:
!
EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

EXTERNAL
    GCA : GCA_DEFINITION,
    IRAC : IRAC_DEFINITION,
    MRA : REF FIXED_STRING,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION;

EXTERNAL ROUTINE
    ENDCHR,
    OUTLIN,
    OUTXPH;


GLOBAL ROUTINE ENDWRD (SPACE, JUSTIFY, HYPHENATE) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	ENDWRD is called when the end of a word is detected.
!	If the word would fit on the current line it puts it
!	there, otherwise it outputs the current line before
!	putting the current word on a new line.
!
! FORMAL PARAMETERS:
!
!	SPACE indicates whether a space should be output following
!	the word.
!	JUSTIFY indicates whether a justification mark should be output
!	following the word.
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    LOCAL
	ADJUST;

    !Check for an active <INDEX flag> immediately, otherwise the
    !index entry could get skipped.

    IF	.SCA_X_FLAG
    THEN
	OUTXPH ();				!The <INDEX flag> is active, output the indexed word.

    IF	(.SCA_WRD_CPEND EQL RINTES)
	AND (.SCA_WRD_F_XTN EQL 0)		!Maybe just an indexing pointer
	AND (.SCA_WRD_FOOTW EQL 0)		!Maybe just a footnote
	AND
	(( NOT .SCA_FILL) AND (.SCA_WRD_LST_SP EQL 0))
%IF DSRPLUS %THEN
    	AND (NOT .sca_wrd_pass)
%FI
    THEN
	RETURN 					!Nothing to put onto the line.
    ELSE
	ENDCHR (RINTES);			!Force out last character of word.

%IF DSRPLUS %THEN
    sca_wrd_pass = false;
%FI
    sca_frc_case = false;			!Turn off case forcing.

    !Compute how long line would be if hyphenation is to be
    !considered.  In the call on ENDWRD for the previous word,
    !hyphenation information for it was left behind (if there was
    !any requested.  What happens now is to see what would happen
    !if we tried to force this word on at the end of this line.
    ADJUST = (IF  .SCA_WRD_LST_HYP
	      THEN
		-1
	      ELSE
		 0) 	+
	     (IF .HYPHENATE
	      THEN
		1
	      ELSE
		0);

    !The OR test detects the case when MRA is about to
    !overflow, but the word would still fit.  If this test is
    !not done, ENDCHR could go into a loop.

    IF 	((.TSF_EXT_HL + .SCA_WRD_LST_SP + .SCA_WRD_EXT_L + .ADJUST) GTR .SCA_RM)
	OR ((.FS_MAXSIZE (MRA) - .FS_LENGTH (MRA)) LSS 10)
    THEN
	BEGIN					!There is no room on this line
	OUTLIN (.SCA_JUSTIFY);
	END
    ELSE
	BEGIN
	!First, put trailing spaces and justification marks from the
	!previous word in the TSF into the TSF.  The information was
	!already there (i.e., the characters, or intermediate code), but
	!it was not yet counted as part of TSF.
	!Also, since there is room for this word, turn off any
	!hyphenation that may be queued on the line already.
	IF .SCA_WRD_LST_HYP
	THEN
	    BEGIN
	    TSF_EXT_HL = .TSF_EXT_HL - 1;	!Cancel the '-'.
	    CH$WCHAR (%C'N', .SCA_WRD_HYP_PTR);
	    END;

	TSF_INT_HL = .TSF_INT_HL + .SCA_WRD_LST_SP	!count of trailing spaces
	+ .SCA_WRD_LST_UND*3			!Count underlined spaces code.
	+ 3*.SCA_WRD_LST_JUS;			!size of justification mark, if any.
	TSF_EXT_HL = .TSF_EXT_HL + .SCA_WRD_LST_SP;	!count trailing spaces here also
	TSF_JUS_CNT = .TSF_JUS_CNT + .SCA_WRD_LST_JUS;	!Count number of words.
	END;

    ! There are some rather obscure implications as a consequence of what
    ! is happening here.  In part, this is because of possible error handling.
    !	Notice that at this point ENDWRD just assumes that the current word
    !	will fit on the line, and goes ahead and updates the various
    !	pointers; yet, if you look around, you will find no checks that
    !	verify that the word will, indeed, fit onto the line between
    !	the margins.  That checking is done by OUTLIN.  The idea is that
    !	if a word is too big, then the line can be forced out anyway,
    !	even if the right margin is violated.  Another point has to do
    !	with the logic in ENDCHR, when the MRA is about to overflow.
    !	In such a case, it is important that the characters still go
    !	through, because of the recursive call ENDCHR makes on itself.
    !
    !Next, make this current word part of TSF
    TSF_NBITS = (.TSF_NBITS OR .SCA_WRD_NBITS);	! Special function bits (e.g, bolding)
    TSF_UND = .TSF_UND OR (.SCA_WRD_LST_UND GTR 0);
    TSF_H_BARS = (.TSF_H_BARS OR .SCA_WRD_BARS);	!Change bar status.
    TSF_BAR_CHAR = .SCA_WRD_BAR_CHR;		!Use latest change bar character.
    TSF_SEQN_FLAG = .SCA_WRD_SEQN_F;		!Input sequence number information.
    TSF_ISEQ = .GCA_CMD_ISQ;
    TSF_ISEQN = .SCA_WRD_ISEQN;
    TSF_IPAGEN = .SCA_WRD_IPAGEN;

    !If footnote are attached to this word, attach them
    !to this line.
    TSF_FOOTW = .TSF_FOOTW + .SCA_WRD_FOOTW;		!Add footnote count total for this word to that for this line.
    SCA_WRD_FOOTW = 0;					!Now forget it so it won't get counted twice.

    !Consider hyphenation.
    IF	.HYPHENATE
    THEN
	BEGIN
	TSF_INT_HL = .TSF_INT_HL + 3;		!NOTE: The '-' has not yet
	TSF_EXT_HL = .TSF_EXT_HL + 1;		!been put into the MRA!!
	END;

    TSF_DRAFT_FLAG = .SCA_WRD_DRAFT_F;		!Indicate if a DRAFT document.
    TSF_INT_HL = (.TSF_INT_HL + .SCA_WRD_INT_L);
    TSF_EXT_HL = (.TSF_EXT_HL + .SCA_WRD_EXT_L);

    IF 	(.TSF_FIRST_XTN EQL 0)		!If an index entry is associated with this word
    THEN				!attach it to this line.
	TSF_FIRST_XTN = .SCA_WRD_F_XTN;

    IF	(.SCA_WRD_L_XTN NEQ 0)
    THEN
	TSF_LAST_XTN = .SCA_WRD_L_XTN;

    !Wipe out leftovers from previous word
    SCA_WRD_LST_UND = 0;
    SCA_WRD_LST_SP = 0;
    SCA_WRD_LST_JUS = 0;
    SCA_WRD_LST_HYP = FALSE;
    SCA_WRD_HYP_PTR = 0;

    !Next, put the trailing spaces and justification marks
    !in, but don't actually make them part of the TSF.
    IF  .SCA_WRD_INT_L NEQ 0
    THEN
	BEGIN					!Processing associated with a non-null word.

	IF .SCA_WRD_AC_UND OR .SPACE
	THEN
	    BEGIN

	    IF 	.SCA_WRD_AC_UND
	    THEN
		BEGIN				!It's an underlined space!
		SCA_WRD_LST_UND = 1;
		FS_WCHAR (MRA, RINTES);		!Generate the intermediate code.
		FS_WCHAR (MRA, %C'U');
		FS_WCHAR (MRA, %C' ');
		SCA_WRD_AC_UND = FALSE;
		END;

	    FS_WCHAR (MRA, %C' ');		!Add a single trailing space,
	    SCA_WRD_LST_SP = 1;			!and count it.
	    END;

	IF .SCA_WRD_LC_PNCT
	    AND .SPACE
	THEN
	    BEGIN				!Add an extra space for punctuation.
	    FS_WCHAR (MRA, %C' ');
	    SCA_WRD_LST_SP = .SCA_WRD_LST_SP + 1;
	    SCA_WRD_LC_PNCT = FALSE;
	    END;

	!Next, add a justification point, if appropriate.
	IF .JUSTIFY
	THEN
	    BEGIN
	    SCA_WRD_LST_JUS = 1;		!Indicate one justification mark
	    FS_WCHAR (MRA, RINTES);
	    FS_WCHAR (MRA, %C'J');
	    FS_WCHAR (MRA, %C' ');
	    END;

	!Put in code for hyphenation, if requested.
	IF .HYPHENATE
	THEN
	    BEGIN
	    SCA_WRD_LST_HYP = TRUE;
	    FS_WCHAR (MRA, RINTES);
	    SCA_WRD_HYP_PTR = .FS_NEXT (MRA);	!Remember where '-' is.
	    FS_WCHAR (MRA, %C'I');		!INSERT this character.
	    FS_WCHAR (MRA, %C'-');		!Here's the '-'.
	    END;

	END;					!End of processing of a non-null word

    !Next, reset for the next word
    SCA_WRD_NBITS = FALSE;			!Clear bolding, underlining, and overstriking
    SCA_WRD_INT_L = 0;
    SCA_WRD_EXT_L = 0;
    SCA_WRD_F_XTN = 0;
    SCA_WRD_L_XTN = 0;
    SCA_WRD_BARS = FALSE;

    !Reset case rules.
    SCA_WORD_SET = FALSE;			!Turn off <CAPITALIZE flag>
    SCA_FC_UT = .SCA_FCBE_UT;
    SCA_OC_UT = .SCA_OCBE_UT;
    SCA_FC_LT = .SCA_FCBE_LT;
    SCA_OC_LT = .SCA_OCBE_LT;
    SCA_WRD_FC_UT = .SCA_FCBE_UT;
    SCA_WRD_OC_UT = .SCA_OCBE_UT;
    SCA_WRD_FC_LT = .SCA_FCBE_LT;
    SCA_WRD_OC_LT = .SCA_OCBE_LT;
    SCA_MNFC_UT = .SCA_MNFCBE_UT;
    SCA_MNOC_UT = .SCA_MNOCBE_UT;
    SCA_MNFC_LT = .SCA_MNFCBE_LT;
    SCA_MNOC_LT = .SCA_MNOCBE_LT;
    SCA_MNWRD_FC_UT = .SCA_MNFCBE_UT;
    SCA_MNWRD_OC_UT = .SCA_MNOCBE_UT;
    SCA_MNWRD_FC_LT = .SCA_MNFCBE_LT;
    SCA_MNWRD_OC_LT = .SCA_MNOCBE_LT;

    !Remember where next word will start.  (Needed by SCL.)
    SCA_WRD_PNTR = .FS_NEXT (MRA);
    SCA_FC = TRUE;				!Next character is first character in word
    SCA_FC_CASE = TRUE;				!Use first character case rules on next word.
    END;					!End of ENDWRD

END						!End of module
ELUDOM
