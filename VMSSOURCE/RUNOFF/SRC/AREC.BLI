MODULE AREC (
		IDENT = 'V04-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Performs preliminary analysis on an uneaten string.
!
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: May, 1978
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	007	KFA00007	Ken Alden	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! EQUATED SYMBOLS:
!
!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

EXTERNAL
    FNCT : FNCT_DEFINITION,
    FLGT : FLAG_TABLE [FLAG_COUNT],
    GCA : VECTOR [GCA_SIZE],
    IRA : FIXED_STRING,
    KHAR;

%SBTTL 'Routine AREC'
GLOBAL ROUTINE AREC =

!++
! FUNCTIONAL DESCRIPTION:
!
!	AREC is used to determine what the current record looks like.
!	It also detects the '.!' and '.;' forms of comments, as well
!	as .BREAK commands indicated by a single '.' followed by
!	either white space or end of record.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	See ARECCC.REQ for a description of completion codes.
!
! SIDE EFFECTS:	None
!
!--

    BEGIN
    !First see if there is anything at all on the record.

    IF .KHAR EQL RINTES
    THEN
    !The record is empty.
	RETURN END_OF_STRING;

    !Remember start of possible command for error analysis later.
    GCA_COM_START = CH$PLUS (.FS_NEXT (IRA), -1);
    !Check for the <ENDFOOTNOTE flag> if footnotes are being
    !collected, and the <ENDFOOTNOTE flag> is enabled.

    IF 	.FNCT_COLLECTING
	AND (.KHAR EQL .FLGT [EFO_FLAG, FLAG_CHARACTER])
	AND (.FLGT [EFO_FLAG, FLAG_ENABLED])
    THEN
    !Yes, it was the <ENDFOOTNOTE flag>.
	RETURN END_FOOTNOTE;

    !Check for the <CONTROL flag> (usually a '.')

    IF 	(.KHAR EQL .FLGT [CON_FLAG, FLAG_CHARACTER])
	AND (.FLGT [CON_FLAG, FLAG_ENABLED])
    THEN
	BEGIN					! <CONTROL flag> followed by something.
	KCNS ();				! Get next character for additional checking.
	!See if this is a special form of .BREAK.

	IF (.KHAR EQL RINTES)			!end of record?
	    OR (.KHAR EQL %C' ')		!space?
	    OR (.KHAR EQL %O'011')		!tab?
	THEN
	!Yes, it was a special form of .BREAK.
	    RETURN CF_BREAK;

	!Two consecutive <CONTROL flag>s force a single one as a normal character.

	IF .KHAR EQL .FLGT [CON_FLAG, FLAG_CHARACTER]
	THEN
	    RETURN CF_CF;			! Two <CONTROL flag>s.

	!See if it's a comment starting like '.!' or '.;'.

	IF (.FLGT [COM_FLAG, FLAG_ENABLED]
	     AND (.KHAR EQL .FLGT [COM_FLAG, FLAG_CHARACTER]))
	    OR (.KHAR EQL %C';')
	THEN
	!Yes, it's a comment.
	    RETURN CF_COMMENT;

	!The last possibility is that it's a command (even though that's the 
	!usual case).

	IF LETTER (.KHAR)
	THEN
	    RETURN CF_LETTER;

	RETURN CF_OTHER;			! Not recognized.
	End					! End analysis of <CONTROL flag>.
    ELSE
	BEGIN					! Something other than <CONTROL flag>.

	IF (.KHAR EQL %C' ')			!space?
	    OR (.KHAR EQL %O'011')		!tab?
	THEN
	!First character is a space or tab.
	    RETURN FIRST_SPACE;

	IF .KHAR EQL %C';'
	THEN
	!First character is a ';'.
	    RETURN FIRST_SEMI;

	END;

    RETURN NOT_SPACE;				! None of the special cases tried above.
    END;					!End of AREC

END						!End of module
ELUDOM
