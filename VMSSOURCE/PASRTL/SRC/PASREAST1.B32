MODULE PAS$READ_STRING1 ( %TITLE 'Read a fixed-length string - V1 semantics'
		IDENT = '1-001'			! File: PASREAST1.B32 Edit: SBL1001
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains a procedure which reads a fixed-length string
!	from a textfile using the semantics of VAX-11 Pascal V1.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Externals, linkages, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    PAS$READ_STRING1: NOVALUE,			! Read string
    LOCAL_HANDLER;				! Local condition handler

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!

%SBTTL 'PAS$READ_STRING1 - READ a string with V1 semantics'
GLOBAL ROUTINE PAS$READ_STRING1 (			! READ a string
	STRING: REF VECTOR [, BYTE],			! String to read into
	PFV: REF $PAS$PFV_FILE_VARIABLE, 		! File variable
	STRING_LENGTH: WORD,				! Length of string
	ERROR						! Error unwind address
    ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure reads a fixed-length string from the specified textfile.
!	If the string length is less than the number of characters remaining
!	in the current line, only STRING_LENGTH characters will be read,
!	otherwise the string will be padded with blanks.
!
!	This procedure will be referenced by the compiled code if the
!	module has been compiled with the /OLD_VERSION qualifier so as to
!	comply with the semantics of VAX-11 Pascal V1.  The only difference
!	between this procedure and PAS$READ_STRING is that in this procedure,
!	if the file is currently at end-of-line, a GET is done before
!	reading characters.
!
!	This procedure uses only public "single-dollar" interfaces to the
!	rest of the Pascal Run-Time Library.  This is so that this module
!	may be excluded from the shareable image PASRTL.EXE
!
! CALLING SEQUENCE:
!
!	STRING.wt.r = PAS$READ_STRING1 (PFV.mr.r, STRING_LENGTH.rwu.v
!			      [, ERROR.ja.r])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	STRING_LENGTH	- The length of the string to read.
!
!	ERROR		- Optional.  If specified, the address to unwind to
!			  in case of an error.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	STRING		- The string read, returned as a function value by
!		 	  having the string address passed as the first
!			  procedure parameter, in accordance with the
!		 	  VAX Procedure Calling Standard.
!
!			  If an error occurs and is continued by a user handler,
!			  the result returned is a blank string.
!
! SIDE EFFECTS:
!
!	If the file is the standard file INPUT or OUTPUT, it is implicitly opened.
!
! SIGNALLED ERRORS:
!
!
!--

    BEGIN

    LOCAL
	CHARS_REMAINING,		! Number of characters remaining in line
	FCB: REF $PAS$FCB_CONTROL_BLOCK,! File Control block
	PFV_ADDR: VOLATILE,		! Enable argument
	UNWIND_ACT: VOLATILE,		! Enable argument
	ERROR_ADDR: VOLATILE;		! Enable argument

    BUILTIN
	ACTUALCOUNT;			! Count of arguments

    ENABLE
	LOCAL_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);	! Enable error handler

    !+
    ! Get ERROR parameter, if present.
    !-

    IF ACTUALCOUNT () GEQU 4
    THEN
	ERROR_ADDR = .ERROR;		! Set unwind address

    PFV_ADDR = PFV [PFV$R_PFV];		! Set PFV address

    !+
    ! The V2 semantics for read of a string say that if you are at EOLN,
    ! then an empty string is returned.  In other words, read of a string
    ! does not read past EOLNs.  The V1 semantics, however, say that if
    ! you are at EOLN, you first do a GET to go to the next line.  So,
    ! find out if we are at EOLN, and if so, do a GET.
    !-

    IF PAS$EOLN2 (PFV [PFV$R_PFV])
    THEN
	PAS$GET (PFV [PFV$R_PFV]);

    !+
    ! Now call the V2 read string routine.
    !-

    PAS$READ_STRING (STRING [0], PFV [PFV$R_PFV], .STRING_LENGTH);

    RETURN;

    END;					! End of routine PAS$READ_STRING1

!<BLF/PAGE>

%SBTTL 'LOCAL_HANDLER - Local handler'
ROUTINE LOCAL_HANDLER (
    	SIGNAL_ARGS: REF BLOCK [, BYTE], 	! Signal arguments array
    	MECH_ARGS: REF BLOCK [, BYTE],		! Mechanism arguments array
    	ENABLE_ARGS: REF VECTOR [, LONG]	! Enable arguments array
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This is the condition handler enabled by PAS$READ_STRING1.  
!	If the current signal is a Pascal error on the file our establisher 
!	was called with, we unwind to the caller of PAS$READ_STRING1
!	with R0 being the status code of the error.
!
!
! CALLING SEQUENCE:
!
!	status.wlc.v = STATUS_HANDLER (SIGNAL_ARGS.rl.ra, MECH_ARGS.rl.ra,
!				       ENABLE_ARGS.rl.ra)
!
! FORMAL PARAMETERS:
!
!	SIGNAL_ARGS	- The signal argument list.
!
!	MECH_ARGS	- The mechanism argument list.
!
!	ENABLE_ARGS	- An array with the following
!			  format:
!
!				+----------------+
!				|   ENB_COUNT    |  <-- ENABLE_ARGS
!				+----------------+
!				|  ENB_PFV_ADDR  |
!				+----------------+
!				| ENB_UNWIND_ACT |
!				+----------------+
!				| ENB_ERROR_ADDR |
!				+----------------+
!
!			  ENB_COUNT is the count of following enable arguments.
!			  The count is always at least 2.
!
!			  ENB_PFV_ADDR - If non-zero, the address of a longword
!			  containing the PFV our establisher is operating on.
!
!			  ENB_UNWIND_ACT - Specifies the action
!			  to take on an unwind.  The values are:
!			   PAS$K_UNWIND_NOP - Do nothing
!			   PAS$K_UNWIND_UNLOCK - Unlock PFV
!
!			  ENB_ERROR_ADDR - Ignored here.
!
! IMPLICIT INPUTS:
!
!	The signaller's PFV placed as the first FAO argument in the primary
!	signalled message.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
!
!	SS$_RESIGNAL
!
! SIDE EFFECTS:
!
!	May cause an unwind.
!
!--

    BEGIN

    LITERAL
	ENB_COUNT = 0,		! Count of enable arguments
	ENB_PFV_ADDR = 1,	! Address of address of PFV
	ENB_UNWIND_ACT= 2,	! Address of unwind action
	ENB_ERROR_ADDR = 3;	! Address of address of unwind PC

    !+
    ! Determine if this is an unwind.  If so, resignal.
    ! Otherwise, see if we should cause an unwind.
    !-

    IF .SIGNAL_ARGS [CHF$L_SIG_NAME] EQLU SS$_UNWIND
    THEN
	RETURN SS$_RESIGNAL;

    IF ..ENABLE_ARGS [ENB_ERROR_ADDR] NEQ 0	! Error:=Continue specified?
    THEN
	BEGIN

	LOCAL
	    COND_NAME: BLOCK [4, BYTE],	! Primary condition name
	    COND_CODE;			! Sequence number of error

	!+
	! Get primary condition name.
	!-
    
	COND_NAME = .SIGNAL_ARGS [CHF$L_SIG_NAME];

	!+
	! Is this a PAS$ error?  If not, resignal.
	!-

	IF .COND_NAME [STS$V_FAC_NO] NEQU PAS$_FACILITY
	THEN
	    RETURN SS$_RESIGNAL;

	!+
	! See if the error message is one which is "trapped"
	! by ERROR:=CONTINUE.  This is done by comparing the
	! message number against a select range.
	!-

	COND_CODE = .COND_NAME [STS$V_CODE];	! Get error number
	IF .COND_CODE GEQU PAS$$K_MSGCONTLO AND ! Lowest number
	   .COND_CODE LEQU PAS$$K_MSGCONTHI	! Highest number
	THEN
	    BEGIN

	    !+
	    ! See if the PFVs match.  The signaller's PFV is the
	    ! first FAO parameter in the primary message.
	    !-

	    IF .SIGNAL_ARGS [12,0,32,0] EQLA ..ENABLE_ARGS [ENB_PFV_ADDR]
	    THEN
		!+
		! We want to unwind to the PC specified in the enable argument
		! error address.
		!-

		BEGIN
		IF NOT $UNWIND (NEWPC=..ENABLE_ARGS [ENB_ERROR_ADDR])
		THEN
		    SIGNAL_STOP (PAS$_BUGCHECK,1,BUG_UNWINDFAIL);
		END;
	    END;
	END; 	
	
    RETURN SS$_RESIGNAL;			! Resignal error

    END;					! End of routine LOCAL_HANDLER

!<BLF/PAGE>

END						! End of module PAS$READ_STRING1

ELUDOM
