!
! Require file for DCX - Data Compression / Expansion Facility
!
! Version:	'V04-000'
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
!   FACILITY:
!
!	DCX -- Data Compression / Expansion Facility
!
!   ABSTRACT:
!
!	The Data Compression / Expansion procedures provide a general
!	method for reducing the storage requirement for a arbitrary data.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
! AUTHOR:  David Thiel
!
! CREATION DATE: July, 1982
!
! MODIFIED BY:
!
!--

!
! Common built-in functions
!
BUILTIN
    insque,
    remque;

!
! Define VMS block structures
!
MACRO
    BBLOCK = $BBLOCK%;		! use common definition

!
! Define routine linkages
!
LINKAGE
    lkg_ctx_check =
	JSB (REGISTER = 0, REGISTER = 1) :
	    NOPRESERVE (0, 1) NOTUSED (2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
    lkg_do =
	CALL ( ; REGISTER = 0, REGISTER = 1),
    lkg_long_move =
	JSB (REGISTER = 0, REGISTER = 1, REGISTER = 2) :
	    NOPRESERVE (0, 1, 2) PRESERVE (3, 4, 5, 6) NOTUSED (7, 8, 9, 10, 11),
    lkg_map_check =
	JSB (REGISTER = 0) :
	    NOPRESERVE (0, 1) NOTUSED (2, 3, 4, 5, 6, 7, 8, 9, 10, 11);

!
! Linkage to LIB$ANALYZE_SDESC_R2
!
LINKAGE
    jsb_analyze_sdesc_r2 =
	JSB (REGISTER = 0; REGISTER = 0, REGISTER = 1, REGISTER = 2) :
	    NOPRESERVE (0, 1, 2) NOTUSED (3, 4, 5, 6, 7, 8, 9, 10, 11);

EXTERNAL ROUTINE
    lib$analyze_sdesc_r2 :
	jsb_analyze_sdesc_r2
	NOVALUE
	ADDRESSING_MODE (GENERAL);

!
! Useful macros
!
MACRO
!
! Macro to generate a pointer to a counted string
!
    cstring (string) = UPLIT (%ASCIC string )%,
!
! Macro to describe a string
!
    stringdesc (string) = %CHARCOUNT (string), UPLIT (%ASCII string)%,
!
! Macro to generate a quadword string descriptor
!
    descriptor (string) = BBLOCK [dsc$c_s_bln] INITIAL (stringdesc (string))%,
!
! Macro to generate a counted string
!
    countedstring (string) = VECTOR [%CHARCOUNT (string)+1, BYTE] INITIAL (BYTE (%CHARCOUNT(string), %ASCII string ))%,
!
! Macro to execute a given sequence of commands and return if any error
!
    perform [] =
	BEGIN
	LOCAL
	    status;
	status = (%REMAINING);
	IF NOT .status			! If error detected,
	THEN
	    RETURN .status;		! then return with error
	.status				! Otherwise, status is block value
	END%;

!
! Macros to ease typing
!
MACRO
    short = UNSIGNED (6)%,		! Short attribute
    bytlit = UNSIGNED (8)%,		! Unsigned byte attribute
    wordlit = UNSIGNED (16)%;		! Unsigned word attribute
!
! Equated symbols
!
LITERAL
    true	=	1,		! Boolean TRUE
    false	=	0;		! Boolean FALSE
