	.title	pli$putbuffer
	.ident	/1-005/					; Edit CGN1005
							; Edit WHM1004
							; Edit CGN1003
							; Edit CGN1002

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; facility:
;
;	VAX/VMS PL1 runtime library
;
; abstract:
;
;	This module contains the pl1 runtime routines for stream output
;	buffer mapipulation.
;
; author: c. spitz
;
; modified:
;
;	1-002		Chip Nylander			03-Aug-1982
;
;	Signal line-counter overflow and page-couter overflow instead of
;	dying in the RTL with an integer overflow.
;
;	1-003		Chip Nylander			07-Sep-1982
;
;	Clear the top half of R2 at PLI$$PUTSKIP_R2, since some callers
;	do not;  fix a couple of transcription errors.
;
;
;	1-004	Bill Matthews	29-September-1982
;
;		Invoke macros $defdat and rtshare instead of $defopr and share.
;
;	1-005	Chip Nylander	19-December-1983
;
;		For PRINT files, implement PAGE by putting a formfeed in the
;		PRN post-processing field rather than sticking a ^L in the
;		data record.  Non-PRINT files continue to work as always.
;
;--

;
; external definitions
;
	$deffcb				;define file control block
	$rabdef				;define rms rab offsets
	$defstr				;define stream block offsets
	$defpl1rtcons			;define runtime constants
	$devdef				;define device bits in fab
	$fabdef				;define fab offsets

; 
; local data
;

	rtshare			;sharable

;++
; pli$$putnlis_r6
;
; functional description:
;
; This routine puts elements into the buffer of a pl1 stream output
; file.  It is called by the pli$putl**** routines to copy the
; contents of the stream block's field to the buffer.  If the string
; in the field will not fit in the remainder of the line, and the
; line is not empty, a skip is performed. Whether the skip was performed
; or not, the string in field is then copied to the buffer. If the line
; is filled, rms is called to perform a $put.
;
; inputs:
;	r11 - address of the stream block
;	ap - address of the file control block
;	str_b_field(r11) - character string to output (in char var format)
;	fcb_l_buf_pt - address of next available char in buf
;	fcb_l_buf_end - address of the end of the buffer + 1
; outputs:
;
; side effects:
;
;--
	.enabl	lsb
pli$$putnlis_r6::
	bbc	#atr_v_print,fcb_l_attr(ap),10$ ;if print file
	bicw3	#7,fcb_w_column(ap),r2	;round column down to last tab stop
	cmpw	r2,fcb_w_column(ap)	;already at a tab stop?
	beql	10$			;if eql, yes
	addw	#8,r2			;round up to next tab boundary
	subw3	fcb_w_column(ap),r2,r3	;get number of blanks required
	movw	r2,fcb_w_column(ap)	;store column
5$:	cmpw	r2,fcb_w_linesize(ap)	;past end of line?
	bgtr	8$			;if gtr, yes, do a skip
	movc5	#0,(sp),#^x20,r3,@fcb_l_buf_pt(ap) ;insert blanks
	movl	r3,fcb_l_buf_pt(ap)	;update buffer pointer
	brb	10$			;cont
8$:	bsbw	pli$$putskp1_r2		;do a skip
10$:	movzwl	str_b_field(r11),r6	;get length of field
12$:	movab	str_b_field+2(r11),r1	;get addr of start of source string
15$:	addl3	#1,r6,r2		;get length to put (inc trailing blank)
pli$$put_contrl:
20$:	subw3	fcb_w_column(ap),fcb_w_linesize(ap),r4 ;get length left in line
	cmpw	r4,r6			;enough room in line?
	bgtr	40$			;if gtr, yes
	beql	30$			;if eql, not enuf for blank
	tstw	fcb_w_column(ap)	;are we at column 0?
	beql	30$			;if eql, yes, don't skip
	bsbw	pli$$putskp1_r2		;do a skip
	brb	12$			;try again with full line
30$:	subw	r4,r6			;get length left after line is filled
	movc3	r4,(r1),@fcb_l_buf_pt(ap) ;fill line
	movl	r3,fcb_l_buf_pt(ap)	;update buffer position
	pushl	r1			;save position in field
	bsbw	pli$$putskp1_r2		;put the line
	popl	r1			;restore position in field
	brb	15$			;go again
40$:	addw	r2,fcb_w_column(ap)	;update column
	movc5	r6,(r1),#^x20,r2,@fcb_l_buf_pt(ap) ;copy field to buf, add blank
	movl	r3,fcb_l_buf_pt(ap)	;update buffer pointer
	rsb				;return

	.dsabl	lsb

;++
; pli$$putnedi - put the next edit field in a stream file
;
; this routine copies the vcha format string in the field into the buffer
; of a stream output file. if there is not enough room in the buffer, as
; much as will fit is copied, the buffer is written to the file and the
; remainder of the field is copied to the buffer.
;
;inputs:
; str_b_field(r11) - vcha string to output
;outputs:
; fcb_w_buf_pt(ap) is updated
; fcb_w_col(ap) is updated
; fcb_w_line(ap) may be updated
;side effects:
; r0-r6 are destroyed
;--
pli$$putnedi_r6::
	movab	str_b_field(r11),r1	;get addr of field
	movw	(r1)+,r6		;get len of field
10$:	subw3	fcb_w_column(ap),fcb_w_linesize(ap),r2 ;get len left in buffer
	cmpw	r6,r2			;field len <= buf len?
	bgtr	20$			;if gtr, then no
	movc3	r6,(r1),@fcb_l_buf_pt(ap) ;copy field to buf
	movl	r3,fcb_l_buf_pt(ap)	;update buf pointer
	addw	r6,fcb_w_column(ap)	;update column
	rsb				;return
20$:	subw	r2,r6			;get len left in field after copy
	movc3	r2,(r1),@fcb_l_buf_pt(ap) ;copy beginning of field to buf
	pushl	r1			;save pointer in field
	movl	r3,fcb_l_buf_pt(ap)	;update buffer pointer
	bsbw	pli$$putskp1_r2		;write buffer to file
	popl	r1			;restore pointer in field
	brb	10$			;go again

;++
; pli$$put_rec - put a record to a stream file
;
; this routine determines the length of the record that is in the buffer,
; and issues a $put.  upon successful completion, the column is reset to 0,
; and the buffer is reset to the beginning of the buffer.
;
; calling sequence:
;	jsb	pli$$put_rec
;
; inputs:
;	fcb_l_buf(ap) - address of start of buffer
;	fcb_l_buf_pt(ap) - address of last char to output + 1
;	fcb_b_rab(ap) - rab
; outputs:
;	fcb_l_buf_pt(ap) - set to fcb_l_buf(ap)
;	fcb_w_column(ap) - set to 0
; side effects:
;	r0 is destroyed
;--

pli$$put_rec::
	bbc	#atr_v_string,fcb_l_attr(ap),10$ ;if string
	movl	#pli$_endstring,r0	;set end string error
	brw	fail			;and fail
10$:	subl3	fcb_l_buf(ap),fcb_l_buf_pt(ap),r0 ;get size of buf
	movw	r0,<fcb_b_rab+rab$w_rsz>(ap) ;set size in rab
	$put	fcb_b_rab(ap)		;put the record
	clrl	fcb_l_prn(ap)		;clr prn area
	blbs	r0,20$			;if lbs, cont
	movl	#pli$_rmsr,r0		;set rms rab error
	brw	fail			;and fail
20$:	clrw	fcb_w_column(ap)	;set column to 0
	movl	fcb_l_buf(ap),fcb_l_buf_pt(ap) ;reset buffer pointer
	rsb				;return

;++
; pli$$putskip_r2 - process a skip option or format for an output stream file
; pli$$putskp1_r2 - process one skip for an output stream file
;
; this routine processes the skips for an output stream file.  it differentiates
; between print files and non-print output files. for print files, the skips are
; accomplished by setting the number to skip in the prefix byte of the fixed
; control area of the printer format file.  for non-print files, the skips are
; represented by new records.  if the number to skip is 0, the file must be a
; print file, and a carriage return is put into the prefix byte. (this is used
; for overprinting) for print files, skip will only take you to the end of the
; page if the number to skip is more than the number of lines left on the page.
; for the first skip processed, the contents of the buffer are printed before
; the buffer is cleared.
;
; inputs:
;	r2 - number of skips to perform
;	r11 - address of the stream block
;	ap - address of the file control block
; outputs:
;	fcb_w_column is set to 0
;	fcb_w_line is incremented
;	fcb_w_page may be incremented (and the endpage condition raised)
;
; side effects:
;	r0-r2 are destroyed
;--

pli$$putskp1_r2::
	movl	#1,r2			;set to skip 1
pli$$putskip_r2::
	movzwl	r2,r2			;clear top half of r2
	bbc	#atr_v_print,fcb_l_attr(ap),5$ ;if not print, cont
	cmpl	fcb_l_buf(ap),fcb_l_buf_pt(ap) ;anything in buffer?
	bneq	5$			;if neq, cont
	tstl	fcb_l_prn(ap)		;anything in prn?
	beql	6$			;if eql, no, don't do the put
5$:	bsbw	pli$$put_rec		;print the last record
6$:	clrw	fcb_w_column(ap)	;reset column
	tstl	r2			;skip <= 0?
	bgtr	20$			;if gtr, then no
	bbc	#atr_v_print,fcb_l_attr(ap),10$ ;if not print, cont
	movzwl	#pli$c_cr,fcb_l_prn(ap)	;set cr in prn
	rsb				;return
10$:	movl	#1,r2			;default to skip 1
20$:	bbc	#atr_v_print,fcb_l_attr(ap),30$ ;if not print, cont
	movzwl	fcb_w_line(ap),r1	;get current line number
	addl	r2,r1			;generate new line number
	cmpl	r1,#32767		;about to overflow?
	bleq	21$			;no - branch
	movl	#pli$_linovrflo,r0	;signal line overflow
	brw	fail			;
21$:	cmpw	r1,fcb_w_pagesize(ap)	;over a page?
	bleq	22$			;if leq, then no
	cmpw	fcb_w_line(ap),fcb_w_pagesize(ap) ;already past pagesize?
	bleq	25$			;if leq, then no
22$:	movzbl	r2,fcb_l_prn(ap)	;set number of skips in prn
	addw	r2,fcb_w_line(ap)	;update line number
	rsb				;return
25$:	subw3	fcb_w_line(ap),fcb_w_pagesize(ap),r0 ;get number of lines left
	incw	r0			;on page + 1
	movzbl	r0,fcb_l_prn(ap)	;set number off skips in prn
	addw	r0,fcb_w_line(ap)	;update line number
	pushl	ap			;push fcb addr
	pushl	#0			;set no secondary error code
	pushl	#pli$_endpage		;set endpage cond
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	calls	#3,g^pli$io_error	;signal the condition
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	rsb				;return
28$:	bsbw	pli$$put_rec		;do a skip
30$:	sobgtr	r2,28$			;go again as required
	rsb				;return	

;+
;pli$$putline_r6
; this routine process the line option or format for output stream files
;
;inputs:
;	r1 - line number
;	r11 - addr of stream block
;	ap - addr of fcb
;outputs:
;	none
;--
pli$$putline_r6::
	cmpw	fcb_w_line(ap),r1	;already at the right line?
	blss	10$			;if lss, then no
	bgtr	20$			;if gtr, then no
	tstw	fcb_w_column(ap)	;at col. 0?
	bneq	20$			;if neq, then no
	rsb				;at right place, return [case 2.1]
10$:	;req line > cur line
	cmpw	r1,fcb_w_pagesize(ap)	;line requested <= pagesize?
	bgtr	20$			;if gtr, then no
	subw3	fcb_w_line(ap),r1,r2	;get number of lines to skip [case 2.2]
	brw	pli$$putskip_r2		;go to the right line
20$:	;req line = cur line but col ^= 0 or cur line > req line
	subw3	fcb_w_line(ap),fcb_w_pagesize(ap),r2 ;get number of lines left
	blss	30$			;if lss, then we're already over a page
	incw	r2			;get lines left on page + 1 [case 2.3]
	brw	pli$$putskip_r2		;skip them
30$:	;brw	pli$$putpage_r6


pli$$putpage_r6::
	cmpw	fcb_w_page(ap),#32767	;about to overflow page counter
	blss	10$			;no
	movl	#pli$_pagovrflo,r0	;yes	
	brw	fail
10$:	pushl	r5			;save r5 in case bit src pending
	bbc	#atr_v_print,fcb_l_attr(ap),20$ ;branch if not print file
	movb	#140,1+fcb_l_prn(ap)	;put formfeed in field
	brb	30$			;rejoin common code
20$:	movl	#1,r6			;set size to 1
	movl	r6,r2			;set total size
	movab	<str_b_field+2>(r11),r1	;set addr of field
	movb	#^x0c,(r1)		;put formfeed in field
	bsbw	pli$$put_contrl		;put control char in buf
30$:	bsbw	pli$$put_rec		;output record
	movl	#1,fcb_l_prn(ap)	;set prn to one for first skip
	incw	fcb_w_page(ap)		;update page
	movw	#1,fcb_w_line(ap)	;reset line
	popl	r5			;restore r5
	rsb				;return

;pli$put_end_r6
; inputs:
;	r11 - address of stream block
;	ap - address of file control block
; outputs:
;	none
; side effects:
;	r0-r6 are destroyed

pli$put_end_r6::
	bisl	#atr_m_recur,fcb_l_attr(ap) ;set recursion flag
	bbs	#atr_v_string,fcb_l_attr(ap),20$ ;if put string, cont
	bbc	#dev$v_trm,<fcb_b_fab+fab$l_dev>(ap),10$ ;if not term, cont
	bbc	#atr_v_print,fcb_l_attr(ap),10$ ;if not print, cont
	assume	<fcb_w_column+2> eq fcb_w_line
	pushl	fcb_w_column(ap)	;save line and column
	bsbw	pli$$put_rec		;finish this line
	popl	fcb_w_column(ap)	;restore them
10$:	movl	#ss$_continue,r0	;set continue (needed if called from
					;default handler)
	bicl	#atr_m_recur,fcb_l_attr(ap) ;clr recursion flag
	ret				;return
20$:	bbc	#atr_v_vcha,fcb_l_attr(ap),30$ ;if vcha, 
	movl	fcb_l_buf(ap),r0	;get addr of buf
	subl3	r0,fcb_l_buf_pt(ap),r1	;get length of string
	movw	r1,-2(r0)		;set length
	ret				;return
30$:	subl3	fcb_l_buf_pt(ap),fcb_l_buf_end(ap),r0 ;get length left in string
	movc5	#0,(sp),#^x20,r0,@fcb_l_buf_pt(ap) ;blank out end of string
	ret				;return



fail:	movl	r0,fcb_l_error(ap)	;set error in fcb
	pushl	ap			;set fcb addr
	pushl	r0			;set error code
	pushl	#pli$_error		;set error condition
	calls	#3,g^pli$io_error	;signal the condition
	ret				;return

	.end
