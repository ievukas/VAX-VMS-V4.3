%TITLE 'EDT$SETCOMMAN - set command file name'
MODULE EDT$SETCOMMAN (				! Set command file name
		IDENT = 'V04-000'			! File: SETCOMMAN.BLI Edit: JBS1006
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	EDT -- The DEC Standard Editor
!
! ABSTRACT:
!
!	Set help file name.
!
! ENVIRONMENT:	Runs at any access mode - AST reentrant
!
! AUTHOR: John Sauter, CREATION DATE: June 3, 1982
!
! MODIFIED BY:
!
! 1-001	- Original.  JBS 07-Jun-1982
! 1-002	- Don't open the file on the INCLUDE channel if the COMMAND channel
!	   is not already open.  This is because the initial opens from
!	   EDT$EDIT must have a default name which is only supplied on
!	   the COMMAND channel.  JBS 08-Jun-1982
! 1-003	- Close the correct file.  JBS 11-Jun-1982
! 1-004	- Set EDT$$G_CMD_OPN when the command file is open.  JBS 11-Jun-1982
! 1-005	- Pass the default file name in the RHB parameter.  JBS 15-Jun-1982
! 1-006	- Accept the default name as a parameter.  JBS 23-Aug-1982
!--


%SBTTL 'Declarations'
!
! TABLE OF CONTENTS:
!

REQUIRE 'EDTSRC:TRAROUNAM';

FORWARD ROUTINE
    EDT$$SET_COMFNAM;

!
! INCLUDE FILES:
!

REQUIRE 'EDTSRC:EDTREQ';

%IF %BLISS (BLISS32)
%THEN

REQUIRE 'EDTSRC:SYSSYM';

%FI

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!
!	In the routine

%SBTTL 'EDT$$SET_COMFNAM  - set command file name'

GLOBAL ROUTINE EDT$$SET_COMFNAM (		! Set command file name
    NADDR, 					! Address of new command file name
    NLEN, 					! Length of new command file name
    DADDR, 					! Address of new command file default name
    DLEN					! Length of new command file default name
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Set a new command file name.  If the file does not exist there is no
!	effect.  Otherwise the current command file is abandoned and the new
!	command file is read instead.
!
! FORMAL PARAMETERS:
!
!  NADDR		Address of new command file name, or 0 if none.
!
!  NLEN			Length of new command file name, or 0 if none.
!
!  DADDR		Address of new command file default name, or 0 if none.
!
!  DLEN			Length of new command file default name, or 0 if none.
!
! IMPLICIT INPUTS:
!
!	EDT$$A_CMD_NAM
!	EDT$$G_CMD_NAMLEN
!	EDT$$G_CMD_OPN
!
! IMPLICIT OUTPUTS:
!
!	EDT$$A_CMD_NAM
!	EDT$$G_CMD_NAMLEN
!	EDT$$G_CMD_OPN
!
! ROUTINE VALUE:
!
!	0 = File not present, EDT$$A_CMD_NAM unchanged (or error, accompanied by message)
!	1 = file present, EDT$$A_CMD_NAM changed, or no file named.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    EXTERNAL ROUTINE
	EDT$$DEA_HEAP : NOVALUE,		! Deallocate heap storage
	EDT$$ALO_HEAP,				! Allocate heap storage
	EDT$$FMT_MSG : NOVALUE,			! Put the text for a message in the format buffer
	EDT$$CALLFIO,				! Do file I/O
	EDT$$FIOPN_ERR : NOVALUE;		! Print a message if a file operation files

%IF %BLISS (BLISS32)
%THEN

    EXTERNAL ROUTINE
	STR$FREE1_DX;				! Deallocate a synamic string

%FI

    EXTERNAL
	EDT$$A_CMD_NAM : REF BLOCK [, BYTE],	! Name of the command file
	EDT$$G_CMD_NAMLEN,			! Length of the command file name
	EDT$$G_CMD_OPN,				! 1 = command file is open
	EDT$$G_IOFI_NFND;			! 1 = last open failed because of file not found

    EXTERNAL LITERAL
	EDT$K_INCLUDE_FILE,			! Channel for testing for presence of command file
	EDT$K_COMMAND_FILE,			! Command file channel
	EDT$K_OPEN_INPUT,			! Code for opening for input
	EDT$K_CLOSE;				! Code for closing a file

    LOCAL
	FILE_DESC : BLOCK [8, BYTE],
	RHB_DESC : BLOCK [8, BYTE],
	STATUS;

    MESSAGES ((INSMEM, COMFILCLO, COMFILNOP, COMFILNEX));

%IF %BLISS (BLISS32)
%THEN
    FILE_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    FILE_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
    RHB_DESC [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    RHB_DESC [DSC$B_CLASS] = DSC$K_CLASS_D;
%FI

    FILE_DESC [DSC$W_LENGTH] = 0;
    FILE_DESC [DSC$A_POINTER] = 0;
    RHB_DESC [DSC$W_LENGTH] = 0;
    RHB_DESC [DSC$A_POINTER] = 0;
!+
! Set up RHB_DESC
!-
    STRING_DESC (RHB_DESC, DLEN, .DADDR);
!+
! Switch to the new command file, if it exists.
!-

    IF ((.NADDR NEQA 0) AND .EDT$$G_CMD_OPN)
    THEN
	BEGIN
	STRING_DESC (FILE_DESC, NLEN, .NADDR);
	STATUS = EDT$$CALLFIO (EDT$K_OPEN_INPUT, EDT$K_INCLUDE_FILE, FILE_DESC, RHB_DESC);

	IF ( NOT .STATUS)
	THEN
	    BEGIN

	    IF ( NOT .EDT$$G_IOFI_NFND) THEN EDT$$FIOPN_ERR (EDT$_COMFILNOP, FILE_DESC);

%IF %BLISS (BLISS32)
%THEN
	    STR$FREE1_DX (FILE_DESC);
	    STR$FREE1_DX (RHB_DESC);
%FI

	    RETURN (0)
	    END;

!+
! Now that we know that the file exists we can close it on the INCLUDE channel.
!-
	STATUS = EDT$$CALLFIO (EDT$K_CLOSE, EDT$K_INCLUDE_FILE, 0, 0);

	IF ( NOT .STATUS)
	THEN
	    BEGIN
	    EDT$$FIOPN_ERR (EDT$_COMFILCLO, FILE_DESC);

%IF %BLISS (BLISS32)
%THEN
	    STR$FREE1_DX (FILE_DESC);
	    STR$FREE1_DX (RHB_DESC);
%FI

	    RETURN (0);
	    END;

	END;

!+
! Either the file exists, or no command file is currently open, or no file name is specified.
! If the command file is currently open, close it.
!-

    IF .EDT$$G_CMD_OPN
    THEN
	BEGIN
	STRING_DESC (FILE_DESC, EDT$$G_CMD_NAMLEN, .EDT$$A_CMD_NAM);
	STATUS = EDT$$CALLFIO (EDT$K_CLOSE, EDT$K_COMMAND_FILE, 0, 0);

	IF ( NOT .STATUS)
	THEN
	    BEGIN
	    EDT$$FIOPN_ERR (EDT$_COMFILCLO, FILE_DESC);

%IF %BLISS (BLISS32)
%THEN
	    STR$FREE1_DX (FILE_DESC);
	    STR$FREE1_DX (RHB_DESC);
%FI

	    RETURN (0);
	    END;

	EDT$$G_CMD_OPN = 0;
!+
! Deallocate the previous string, if any.  Note that if EDT$$G_CMD_OPN is zero
! the old space is not deallocated.  EDT$EDIT takes advantage of this.
!-

	IF (.EDT$$G_CMD_NAMLEN NEQ 0) THEN EDT$$DEA_HEAP (EDT$$G_CMD_NAMLEN, EDT$$A_CMD_NAM);

	END;

!+
! If no new file has been specified, clean up and exit.
!-

    IF (.NADDR EQLA 0)
    THEN
	BEGIN
	EDT$$G_CMD_NAMLEN = 0;
	EDT$$A_CMD_NAM = 0;
	END
    ELSE
	BEGIN
!+
! The command file is not open and a file has been specified.  The file may
! not be present.  Open errors return an error code but print no message.
! There should be an open error only if this is the initial open.
!-
	STRING_DESC (FILE_DESC, NLEN, .NADDR);
	STATUS = EDT$$CALLFIO (EDT$K_OPEN_INPUT, EDT$K_COMMAND_FILE, FILE_DESC, RHB_DESC);

	IF ( NOT .STATUS)
	THEN
	    BEGIN

%IF %BLISS (BLISS32)
%THEN
	    STR$FREE1_DX (FILE_DESC);
	    STR$FREE1_DX (RHB_DESC);
%FI

	    RETURN (0);
	    END;

!+
! Remember the new file name for when we CLOSE it.
!-

	IF EDT$$ALO_HEAP (NLEN, EDT$$A_CMD_NAM)
	THEN
	    BEGIN
	    EDT$$G_CMD_NAMLEN = .NLEN;
	    EDT$$CPY_MEM (.NLEN, .NADDR, .EDT$$A_CMD_NAM);
	    END
	ELSE
	    BEGIN
	    EDT$$FMT_MSG (EDT$_INSMEM);

%IF %BLISS (BLISS32)
%THEN
	    STR$FREE1_DX (FILE_DESC);
	    STR$FREE1_DX (RHB_DESC);
%FI

	    RETURN (0);
	    END;

	EDT$$G_CMD_OPN = 1;
	END;

%IF %BLISS (BLISS32)
%THEN
    STR$FREE1_DX (FILE_DESC);
    STR$FREE1_DX (RHB_DESC);
%FI

    RETURN (1);
    END;					! of routine EDT$$SET_COMFNAM

!<BLF/PAGE>

END						! of module EDT$SETCOMMAN

ELUDOM
