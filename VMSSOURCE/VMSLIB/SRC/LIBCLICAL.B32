%TITLE 'LIB$CLI_CALLBACK - CLI Callback Interface Procedures'
MODULE LIB$CLI_CALLBACK (			! CLI Callback Procedures
		IDENT = 'V04-000'	! File: LIBCLICAL.B32 Edit: STAN3009
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	General Utility Library
!
! ABSTRACT:
!
!	This module contains callable procedures which allow user programs 
!	to access the CLI callback facility.  The procedures in this module 
!	are:
!		LIB$GET_SYMBOL		get value of a CLI symbol
!		LIB$SET_SYMBOL		set value of a CLI symbol
!		LIB$DELETE_SYMBOL	delete a CLI symbol
!		LIB$SET_LOGICAL		set value of a supervisor mode 
!					logical name
!		LIB$DELETE_LOGICAL	delete a supervisor mode logical name
!		LIB$DISABLE_CTRL	disable CLI out-of-band handling
!		LIB$ENABLE_CTRL		re-enable CLI out-of-band handling
!
! ENVIRONMENT:	Runs only in USER mode - AST reentrant
!
! AUTHOR: Ralph O. Weber,	CREATION DATE: 19-AUG-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  ROW 19-AUG-1981
! 1-002 - Change symbol name > 255 characters error to LIB$_INVSYMNAM.
!	  ROW 3-DEC-1981
! 1-003 - Use CLI$C_SRVDESC.  Improve code.  SBL 18-Dec-1981
! 1-004 - Correct all references to LIB$ANALYZE_SDESC.  DGP 31-Dec-1981
! 1-005 - Correct PSECT definitions.  SBL 4-Jan-1981
! 1-006 - Fix reference to CLIMSG.B32 to use SHRLIB$, not LIB$  TMH 14-Feb-1982
! 1-007 - Allow symbol name to start with $ or _.  SBL 3-Feb-1983
! 1-008 - Use new callbacks to allow itemlists and attributes. STAN 26-Feb-1984.
! 1-009 - Fix bug in way pass itemlist to callback. STAN 10-JUL-1984.
!--

%SBTTL 'Declarations'
!
! SWITCHES:
!

SWITCHES ADDRESSING_MODE (EXTERNAL = GENERAL, NONEXTERNAL = WORD_RELATIVE);

!
! LINKAGES:
!

LINKAGE LIB$ANALYZE_SDESC_JSB_LINK = JSB (REGISTER=0; REGISTER=1,REGISTER=2):
	NOTUSED (3,4,5,6,7,8,9,10,11);

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    LIB$GET_SYMBOL,				! get value of a CLI symbol
    LIB$SET_SYMBOL,				! set value of a CLI symbol
    LIB$SET_LOGICAL,				! set value of a supervisor-mode
    						! logical name
    LIB$DELETE_LOGICAL,				! delete a supervisor-mode logical
						! name
    LIB$DISABLE_CTRL,				! disable CLI out-of-band recognition
    LIB$ENABLE_CTRL,				! re-enable CLI out-of-band recognition
    LIB$$BUILD_SYMBOL_NAME;			! build a good symbol name

!
! INCLUDE FILES:
!

LIBRARY 'SYS$LIBRARY:STARLET';			! System symbol definitions

REQUIRE 'SHRLIB$:CLIMSG';			! CLI$_ symbols

!
! MACROS:
!
!	MACRO MOVEDESC builds a S-type string descriptor at _TO
!	which points to the same data area as that pointed to by 
!	the string descriptor at _FROM.  NB: since the _TO
!	descriptor will be used only by SYS$CLI which ignores the
!	DTYPE and CLASS fields, only the LENGTH and POINTER fields
!	are built by MOVEDESC.
!
    MACRO MOVEDESC (_FROM, _TO) =
	BEGIN
	REGISTER
	    RET_STATUS = 0;
	RET_STATUS = LIB$ANALYZE_SDESC_R2 ( _FROM;
	 BLOCK [_TO, DSC$W_LENGTH; , BYTE],
	 BLOCK [_TO, DSC$A_POINTER; , BYTE] );
	IF NOT .RET_STATUS
	THEN
	    RETURN (.RET_STATUS);
	END%;

!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! PSECTS:
!

PSECT
    CODE = _LIB$CODE (READ, NOWRITE, EXECUTE, SHARE, PIC, ADDRESSING_MODE (WORD_RELATIVE)),
    PLIT = _LIB$CODE (READ, NOWRITE, EXECUTE, SHARE, PIC, ADDRESSING_MODE (WORD_RELATIVE)),
    OWN  = _LIB$DATA (READ, WRITE, NOEXECUTE, NOSHARE, PIC, ADDRESSING_MODE (LONG_RELATIVE)),
    GLOBAL = _LIB$DATA (READ, WRITE, NOEXECUTE, NOSHARE, PIC, ADDRESSING_MODE (LONG_RELATIVE));

!
! OWN STORAGE:
!
!	NONE
!
! EXTERNAL REFERENCES:
!

EXTERNAL ROUTINE
    SYS$CLI,					! CLI Callback Routine
    LIB$ANALYZE_SDESC_R2 : LIB$ANALYZE_SDESC_JSB_LINK,
						! Analyze a string descriptor
    LIB$SCOPY_DXDX,				! Copy strings of any type
    						!	to any type
    LIB$SGET1_DD,				! Get a dynamic string
    LIB$SFREE1_DD;				! Free a dynamic string

EXTERNAL
    LIB$AB_UPCASE;				! the string upcase table

EXTERNAL LITERAL 				! Condition value symbols
    LIB$_INVARG,				! Invalid argument
    LIB$_WRONUMARG,				! Wrong number of arguments
    LIB$_INVSYMNAM,				! Illegal symbol name
    LIB$_NOSUCHSYM,				! No such symbol
    LIB$_INSCLIMEM,				! Insufficient CLI memory
    LIB$_AMBSYMDEF,				! Ambiguous symbol defined
    LIB$_NOCLI,					! No CLI present
    LIB$_UNECLIERR;				! Unexpected CLI error

%SBTTL 'LIB$GET_SYMBOL - get value of a CLI symbol'
GLOBAL ROUTINE LIB$GET_SYMBOL (			! get value of a CLI symbol
	SYMBOL: REF BLOCK [, BYTE],		! symbol string descriptor
	RETBUF: REF BLOCK [, BYTE],		! return value string descriptor
	RETLEN: REF VECTOR [, WORD],		! no. bytes returned (opt.)
	MODE: REF VECTOR [, LONG]		! symbol table searched (opt.)
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	LIB$GET_SYMBOL gets the value of the specified CLI symbol and returns
!	it in the specified buffer.  Before the actual search, however, the
!	specified symbol name is upcased so that it will better match symbol
!	names formed by the CLI.  The local-symbol table is scanned first for
!	the symbol, and if no matching symbol is found there, the global-
!	symbol table is scanned.  The length of the returned value and a mode
!	value, indicating the table in which the symbol value was found, are
!	optionally returned when parameters to receive them are supplied in
!	the calling sequence. 
!	
!	Numeric values are automatically translated to decimal strings before 
!	being returned.  
!
!	The optional mode value can be one of:
!		LIB$K_CLI_LOCAL_SYM  = 1 ==> Local symbol table name
!		LIB$K_CLI_GLOBAL_SYM = 2 ==> Global symbol table name
!	These symbols are defined in $LIBCLIDEF.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$GET_SYMBOL (symbol.rt.dx, retbuf.wt.dx
!						[, retlen.ww.r [, mode.wl.r]])
!
! FORMAL PARAMETERS:
!
!	symbol.rt.dx  -	A string, passed by descriptor, which contains the 
!			symbol to be searched for.  An upcased copy of this 
!			string will actually be used for the search.
!
!	retbuf.wt.dx  -	A string, passed by descriptor, into which the value 
!			of the symbol, if found, will be written.
!
!	retlen.ww.r   -	An optional word which, if present, will receive 
!			the length of the returned symbol value string.
!
!	mode.wl.r     -	An optional longword which, if present, will receive a 
!			value indicating table in which symbol was found.  
!			Possible values are:
!			    LIB$K_CLI_LOCAL_SYM  ==> Local symbol table name
!			    LIB$K_CLI_GLOBAL_SYM ==> Global symbol table name
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: (or ROUTINE VALUE:)
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_INVARG	Invalid argument
!	LIB$_INVSYMNAM	Invalid symbol name
!	LIB$_NOSUCHSYM	No such symbol found
!	LIB$_INSCLIMEM	Insufficient CLI memory
!	LIB$_NOCLI	No CLI present to perform function
!	LIB$_UNECLIERR	Unexpected CLI Error
!
! SIDE EFFECTS:
!
!	WARNING:
!	Although this procedure performs some checks on the validity of 
!	symbol names passed to it, some symbol name considered valid by 
!	this procedure will be considered invalid by DCL.  Callers of this 
!	procedure are responsible for insuring that symbol names passed to 
!	this procedure contain only alphanumeric characters.
!
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    LOCAL
	CLI_REQ_BLOCK : BLOCK [CLI$C_SRVDESC, BYTE], ! A CLI request block
	DYN_STRING : BLOCK [8, BYTE],		! Descriptor for dynamic string
	RETURN_STATUS : BLOCK [4, BYTE];	! A return status value

	

!+
! Initialize CLI Command request block.
!-
    CH$FILL (0, CLI$C_SRVDESC, CLI_REQ_BLOCK);
    CLI_REQ_BLOCK [CLI$B_RQTYPE] = CLI$K_CLISERV;
    CLI_REQ_BLOCK [CLI$W_SERVCOD] = CLI$K_GETSYM;
    RETURN_STATUS = LIB$$BUILD_SYMBOL_NAME( .SYMBOL, DYN_STRING,
			CLI_REQ_BLOCK [CLI$Q_NAMDESC] );
    IF NOT .RETURN_STATUS THEN RETURN .RETURN_STATUS;

!+
! Get CLI symbol value.
!-
    RETURN_STATUS = SYS$CLI (CLI_REQ_BLOCK);

!+
! Free dynamic string used for upcased symbol name.
!-
    LIB$SFREE1_DD( DYN_STRING );

!+
! Process returned symbol value and requested optional values.
!-
    IF .RETURN_STATUS
    THEN
    BEGIN
	LOCAL
	    CLI_DESC : REF BLOCK [8, BYTE];
	CLI_DESC = CLI_REQ_BLOCK [CLI$Q_VALDESC];
	RETURN_STATUS = LIB$SCOPY_DXDX (.CLI_DESC, .RETBUF);
	IF NOT NULLPARAMETER (3) AND .RETURN_STATUS
	THEN
	BEGIN
	    LOCAL
		ADDRESS,
		LENGTH;
	    LIB$ANALYZE_SDESC_R2 (.RETBUF; LENGTH, ADDRESS );
	    RETLEN [0] = MINU (.LENGTH, .CLI_DESC [DSC$W_LENGTH]);
	    END;
	IF NOT NULLPARAMETER (4)
	THEN
	    MODE [0] = .CLI_REQ_BLOCK [CLI$B_RQSTAT];
	END
    ELSE IF (.RETURN_STATUS [STS$V_FAC_NO] EQL CLI$_FACILITY)
    THEN
	RETURN_STATUS =
	BEGIN
	    SELECTONE .RETURN_STATUS OF
	    SET
	    [CLI$_UNDSYM] :	LIB$_NOSUCHSYM;
	    [CLI$_BUFOVF] :	LIB$_INSCLIMEM;
	    [CLI$_INVREQTYP] :	LIB$_NOCLI;
	    [OTHERWISE] :	LIB$_UNECLIERR;
	    TES
	    END;

    RETURN (.RETURN_STATUS);

    END;					! End of routine LIB$GET_SYMBOL

%SBTTL 'LIB$SET_SYMBOL - set value of a CLI symbol'
GLOBAL ROUTINE LIB$SET_SYMBOL (			! set value of a CLI symbol
	SYMBOL: REF BLOCK [, BYTE],		! symbol string descriptor
	VALUE: REF BLOCK [, BYTE],		! desired symbol value descriptor
	MODE: REF VECTOR [, LONG]		! desired symbol table (opt.)
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine defines a CLI symbol giving it the value specified by
!	call parameter value.  Before the actual definition, however, the
!	specified symbol name is upcased so that it will better match symbol
!	names formed by the CLI.  An attempt to define a CLI symbol which
!	already exists results in the value of that symbol being updated to
!	the new value.  The optional mode argument specifies a code
!	(LIB$K_CLI_LOCAL_SYM or LIB$K_CLI_GLOBAL_SYM) which names the symbol
!	table on which the define/update operation will be performed.  If the
!	mode argument is omitted, the the local symbol table is used. 
!	
!	The optional mode value can be one of:
!		LIB$K_CLI_LOCAL_SYM  = 1 ==> Local symbol table name
!		LIB$K_CLI_GLOBAL_SYM = 2 ==> Global symbol table name
!	These symbols are defined in $LIBCLIDEF.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$SET_SYMBOL (symbol.rt.dx, value.rt.dx
!						[, mode.rl.r])
!
! FORMAL PARAMETERS:
!
!	symbol.rt.dx  -	A string, passed by descriptor, which contains the 
!			symbol to be defined or modified.  An upcased copy of 
!			this string will actually be used for the define 
!			or update operation.
!
!	value.rt.dx   -	A string, passed by descriptor, containing the value 
!			to be given to the symbol.
!
!	mode.rl.r     -	An optional longword which, if present, contains a 
!			value indicating into which table the symbol is to be 
!			placed.  If this parameter is omitted, the local 
!			symbol table is used.
!			Possible values are:
!			    LIB$K_CLI_LOCAL_SYM  ==> Local symbol table name
!			    LIB$K_CLI_GLOBAL_SYM ==> Global symbol table name
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: (or ROUTINE VALUE:)
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_INVARG	Invalid argument
!	LIB$_INVSYMNAM	Invalid symbol name
!	LIB$_INSCLIMEM	Insuficient CLI memory
!	LIB$_AMBSYMDEF	Ambiguous CLI symbol defined
!	LIB$_NOCLI	No CLI present to perform function
!	LIB$_UNECLIERR	Unexpected CLI Error
!
! SIDE EFFECTS:
!
!	A CLI symbol is created or updated.
!
!	WARNING:
!	Although this procedure performs some checks on the validity of 
!	symbol names passed to it, some symbol name considered valid by 
!	this procedure will be considered invalid by DCL.  Callers of this 
!	procedure are responsible for insuring that symbol names passed to 
!	this procedure contain only alphanumeric characters.  If this 
!	procedure is used to create symbols whose names contain invalid 
!	characters, deleting those symbols can be accomplished by logging 
!	out and logging back in.
!
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    LOCAL
	CLI_REQ_BLOCK : BLOCK [CLI$C_SRVDESC, BYTE], ! A CLI request block
	DYN_STRING : BLOCK [8, BYTE],		! Descriptor for dynamic string
	RETURN_STATUS : BLOCK [4, BYTE];	! A return status value
	

!+
! Initialize CLI Command request block.
!-
    CH$FILL (0, CLI$C_SRVDESC, CLI_REQ_BLOCK);
    CLI_REQ_BLOCK [CLI$B_RQTYPE] = CLI$K_CLISERV;
    BEGIN
	LOCAL
	    STRING : REF BLOCK [8, BYTE];
	STRING = .VALUE;
	IF .STRING [DSC$W_LENGTH] GTRU 255 THEN RETURN LIB$_INVARG;
	END;
    MOVEDESC ( .VALUE,  CLI_REQ_BLOCK [CLI$Q_VALDESC] );
    RETURN_STATUS = LIB$$BUILD_SYMBOL_NAME( .SYMBOL, DYN_STRING,
			CLI_REQ_BLOCK [CLI$Q_NAMDESC] );
    IF NOT .RETURN_STATUS THEN RETURN .RETURN_STATUS;

!+
! Setup service code indicating which symbol table.
!-
    CLI_REQ_BLOCK [CLI$W_SERVCOD] =
	BEGIN
	    IF NULLPARAMETER (3)
	    THEN
		CLI$K_DEFLOCAL
	    ELSE
		CASE .MODE [0] FROM LIB$K_CLI_LOCAL_SYM
				 TO LIB$K_CLI_GLOBAL_SYM OF
		SET
		[LIB$K_CLI_LOCAL_SYM]	: CLI$K_DEFLOCAL;
		[LIB$K_CLI_GLOBAL_SYM]	: CLI$K_DEFGLOBAL;
		[OUTRANGE]		: RETURN (LIB$_INVARG);
	    TES
	    END;

!+
! Set CLI symbol.
!-
    RETURN_STATUS = SYS$CLI (CLI_REQ_BLOCK);

!+
! Free dynamic string used for upcased symbol name.
!-
    LIB$SFREE1_DD( DYN_STRING );

!+
! Adjust error return status, if any.
!-
    IF NOT .RETURN_STATUS AND (.RETURN_STATUS [STS$V_FAC_NO] EQL CLI$_FACILITY)
    THEN
	RETURN_STATUS =
	BEGIN
	    SELECTONE .RETURN_STATUS OF
	    SET
	    [CLI$_SYMOVF] :	LIB$_INSCLIMEM;
	    [CLI$_ABSYMD] :	LIB$_AMBSYMDEF;
	    [CLI$_INVREQTYP] :	LIB$_NOCLI;
	    [OTHERWISE] :	LIB$_UNECLIERR;
	    TES
	    END;

    RETURN (.RETURN_STATUS);

    END;					! End of routine LIB$SET_SYMBOL

%SBTTL 'LIB$DELETE_SYMBOL - delete a CLI symbol'
GLOBAL ROUTINE LIB$DELETE_SYMBOL (		! set value of a CLI symbol
	SYMBOL: REF BLOCK [, BYTE],		! symbol string descriptor
	MODE: REF VECTOR [, LONG]		! desired symbol table (opt.)
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine deletes a CLI symbol.  Before the actual deletion, 
!	however, the specified symbol name is upcased so that it will better 
!	match symbol names formed by the CLI.  The optional mode argument 
!	specifies a code (LIB$K_CLI_LOCAL_SYM or LIB$K_CLI_GLOBAL_SYM) which 
!	names the symbol table on which the delete operation will be performed.
!	If the mode argument is omitted, the the local symbol table is used. 
!	
!	The optional mode value can be one of:
!		LIB$K_CLI_LOCAL_SYM  = 1 ==> Local symbol table name
!		LIB$K_CLI_GLOBAL_SYM = 2 ==> Global symbol table name
!	These symbols are defined in $LIBCLIDEF.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$DELETE_SYMBOL (symbol.rt.dx [, mode.rl.r])
!
! FORMAL PARAMETERS:
!
!	symbol.rt.dx  -	A string, passed by descriptor, which contains the 
!			symbol to be defined or modified.  An upcased copy of 
!			this string will actually be used for the deletion.
!
!	mode.rl.r     -	An optional longword which, if present, contains a 
!			value indicating from which table the symbol is to be 
!			deleted.  If this parameter is omitted, the local 
!			symbol table is used.
!			Possible values are:
!			    LIB$K_CLI_LOCAL_SYM  ==> Local symbol table name
!			    LIB$K_CLI_GLOBAL_SYM ==> Global symbol table name
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: (or ROUTINE VALUE:)
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_INVARG	Invalid argument
!	LIB$_INVSYMNAM	Invalid symbol name
!	LIB$_NOSUCHSYM	No such symbol found
!	LIB$_NOCLI	No CLI present to perform function
!	LIB$_UNECLIERR	Unexpected CLI Error
!
! SIDE EFFECTS:
!
!	A CLI symbol is deleted.
!
!	WARNING:
!	Although this procedure performs some checks on the validity of 
!	symbol names passed to it, some symbol name considered valid by 
!	this procedure will be considered invalid by DCL.  Callers of this 
!	procedure are responsible for insuring that symbol names passed to 
!	this procedure contain only alphanumeric characters.
!
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    LOCAL
	CLI_REQ_BLOCK : BLOCK [CLI$C_SRVDESC, BYTE], ! A CLI request block
	DYN_STRING : BLOCK [8, BYTE],		! Descriptor for dynamic string
	RETURN_STATUS : BLOCK [4, BYTE];	! A return status value
	

!+
! Initialize CLI Command request block.
!-
    CH$FILL (0, CLI$C_SRVDESC, CLI_REQ_BLOCK);
    RETURN_STATUS = LIB$$BUILD_SYMBOL_NAME( .SYMBOL, DYN_STRING,
			CLI_REQ_BLOCK [CLI$Q_NAMDESC] );
    IF NOT .RETURN_STATUS THEN RETURN .RETURN_STATUS;
    CLI_REQ_BLOCK [CLI$B_RQTYPE] = CLI$K_CLISERV;

!+
! Setup service code indicating which symbol table.
!-
    CLI_REQ_BLOCK [CLI$W_SERVCOD] =
	BEGIN
	    IF NULLPARAMETER (2)
	    THEN
		CLI$K_DELELCL
	    ELSE
		CASE .MODE [0] FROM LIB$K_CLI_LOCAL_SYM
				 TO LIB$K_CLI_GLOBAL_SYM OF
		SET
		[LIB$K_CLI_LOCAL_SYM]	: CLI$K_DELELCL;
		[LIB$K_CLI_GLOBAL_SYM]	: CLI$K_DELEGBL;
		[OUTRANGE]		: RETURN (LIB$_INVARG);
	    TES
	    END;

!+
! Delete CLI symbol.
!-
    RETURN_STATUS = SYS$CLI (CLI_REQ_BLOCK);

!+
! Free dynamic string used for upcased symbol name.
!-
    LIB$SFREE1_DD( DYN_STRING );

!+
! Adjust error return status, if any.
!-
    IF NOT .RETURN_STATUS AND (.RETURN_STATUS [STS$V_FAC_NO] EQL CLI$_FACILITY)
    THEN
	RETURN_STATUS =
	BEGIN
	    SELECTONE .RETURN_STATUS OF
	    SET
	    [CLI$_UNDSYM] :	LIB$_NOSUCHSYM;
	    [CLI$_INVREQTYP] :	LIB$_NOCLI;
	    [OTHERWISE] :	LIB$_UNECLIERR;
	    TES
	    END;

    RETURN (.RETURN_STATUS);

    END;					! End of routine LIB$DELETE_SYMBOL

%SBTTL 'LIB$SET_LOGICAL - set supervisor mode logical name'
GLOBAL ROUTINE LIB$SET_LOGICAL (		! set supervisor mode logical name
	LOGNAME	: REF $BBLOCK,		! logical name string descriptor
	VALUE	: REF $BBLOCK,		! equivalence name string descriptor
	TABNAM	: REF $BBLOCK,		! logical name table
	ATTR	: REF $BBLOCK[4],	! attributes
	ITMLST	: REF $BBLOCK		! Address of itemlist
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine provides a method by which a non-privileged program can 
!	create/modify supervisor mode logical names.  The logical name given
!	by logname is created or modified to have the equivalence name 
!	specified by value.
!	The user may specify attributes for the logical name and may
!	specify which logical name table is to be used.
!	Instead of specifying a single equivalence string, via VALUE,
!	the caller may specify an item list to give multiple equivalence strings.
!
!	The $TRNLNM system service can be used to obtain the value of 
!	supervisor mode logical names.  The routine is equivalent to the ASSIGN 
!	or DEFINE DCL command.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$SET_LOGICAL (
!				   logname.rt.dx
!				[, value.rt.dx]
!				[, tabnam.rt.dx]
!				[, attr.rlu.r]
!				[, itmlst.ra.r])
!
! FORMAL PARAMETERS:
!
!	logname.rt.dx -	A string, passed by descriptor, which contains the 
!			supervisor mode logical name to be created or modified.
!
!	value.rt.dx   -	A string, passed by descriptor, specifing the value 
!			to be given to the supervisor mode logical name.
!			If omitted, an itemlist must be present to specify the
!			value(s) of the logical name.
!
!	tabnam.rt.dx  -	Name of the table in which to create the logical name.
!			If omitted, the LNM$PROCESS table is used.
!
!	attr.rlu.r    - Logical name attributes.  See the description of
!			the system service $CRELNM for more details.
!			Currently available attributes are
!			LNM$M_CONFINE and LNM$M_NO_ALIAS.
!			If omitted, no special attributes are established.
!			However, if no table or itemlist is specified,
!			then the attribute LNM$M_CRELOG is defaulted in.
!
!			If no itemlist is specified, then the translation
!			attributes LNM$M_CONCEALED and LNM$M_TERMINAL may
!			also be specified here.  They apply to the
!			equivalence string string specified by the VALUE
!			parameter.
!
!			If an itemlist is specified, then the itemlist will
!			contain the translation attributes for each
!			equivalence string in the itemlist.
!
!	itmlst.ra.r	The address of an item list describing the
!			equivalence name(s) for this logical name.
!			See the description of the $CRELNM system service
!			for the format and meaning of the item list.
!
!			If omitted, the logical name will have just one
!			value, as specified by the VALUE parameter.
!
!			Either VALUE or ITMLST must be specified.
!			If neither are specified, the LIB$_INVARG
!			error is produced.
!
!			If both are specified, then the VALUE parameter
!			is ignored.  In this case, logical name
!			attributes are permitted, but translation
!			attributes specified in the ATTR parameter
!			will be ignored (since these will appear in the
!			itemlist).
!
!			The ITMLST parameter is only needed in the case where
!			you wish to create multiple equivalence strings
!			for a single logical name (i.e. a search list).
!
! IMPLICIT INPUTS:
!
!	It is assumed that the logical name table specified already exists.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: (or ROUTINE VALUE:)
!
!	SS$_NORMAL	Normal successful completion
!	SS$_SUPERSEDE	Previous logical name replaced (success)
!	SS$_ACCVIO	logname or value cannot be read
!	SS$_IVLOGNAM	logname or value contains more than 255 characters
!	SS$_BADPARAM	One or more arguments had a bad value.
!			For example, an unknown bit was specified in
!			the attributes parameter.
!			Note that if an item list is specified,
!			then translation attributes (if any) must
!			appear in the item list and may not appear
!			in the ATTR parameter.  Only logical name
!			attributes may appear in the ATTR parameter
!			in that case.
!	SS$_NOLOGNAM	The specified logical name table does not exist.
!	SS$_NOPRIV	The caller lacks the necessary privieleges
!			to create the logical name.
!	SS$_TOOMANYLNAM	Logical name translation of the table name exceeded
!			the allowable depth (10 translations).
!	SS$_DUPLNAM	Attempt to create a logical name that conflicts
!			with a logical name created at a higher access mode
!			and which had the LNM$M_NO_ALIAS attribute.
!	SS$_EXLNMQUOTA	Exceeded logical name space quota.
!	SS$_INSFMEM	Insufficient dynamic memory.
!	LIB$_INVARG	Invalid argument. Neither a VALUE nor an ITMLST
!			was specified.
!			Or LOGNAME was omitted.
!	LIB$_NOCLI	No CLI present to perform function
!	LIB$_UNECLIERR	Unexpected CLI Error
!	LIB$_WRONUMARG	Wrong number of arguments.  Either fewer than two
!			arguments or more than 5 arguments were specified.
!
! SIDE EFFECTS:
!
!	A supervisor mode logical name is created or modified.
!
!--

    BEGIN

    BUILTIN

	ACTUALCOUNT,
	NULLPARAMETER;

    LOCAL

	CLI_REQ_BLOCK : BLOCK [CLI$C_SRVDESC, BYTE],	! A CLI request block
	RETURN_STATUS : BLOCK [4, BYTE],
	TRANSLATION_ATTRIBUTES,
	LOGICAL_NAME_ATTRIBUTES,
	SPECIAL_ITEM_LIST : VECTOR [7];			! Special item list

!+
! Check for proper number of arguments.
!-

    IF ACTUALCOUNT() LEQU 1
    OR ACTUALCOUNT() GTRU 5
    THEN
	RETURN	LIB$_WRONUMARG;

!+
! Initialize CLI Command request block accounting for the differences
! between creating/modifying a logical name and deleting one.
!-

    CH$FILL (0, CLI$C_SRVDESC, CLI_REQ_BLOCK);
    CLI_REQ_BLOCK [CLI$B_RQTYPE] = CLI$K_CLISERV;
    CLI_REQ_BLOCK [CLI$W_SERVCOD] = CLI$K_CREALOG;

!+
! Move in the logical name, the equivalence string, and the logical
! name table name.
! Give an error if the logical name is omitted.
! Give an error if neither VALUE nor ITMLST is supplied.
!-

    IF .LOGNAME EQL 0
    THEN
	RETURN	LIB$_INVARG;

    MOVEDESC ( .LOGNAME, CLI_REQ_BLOCK [CLI$Q_NAMDESC] );

    IF NULLPARAMETER(VALUE) AND NULLPARAMETER(ITMLST)
    THEN
	RETURN	LIB$_INVARG;

    IF NOT NULLPARAMETER(VALUE)
    THEN
	MOVEDESC ( .VALUE,  CLI_REQ_BLOCK [CLI$Q_VALDESC] );

    !+
    ! NOTE:
    ! If both VALDESC and ITMLST are specified, DCL will ignore VALUE.
    !-

    !+
    ! Move in the table name if present.
    ! If not present, DCL defaults to LNM$PROCESS.
    !-

    IF NOT NULLPARAMETER(TABNAM)
    THEN
	MOVEDESC ( .TABNAM, CLI_REQ_BLOCK [CLI$Q_TABDESC] );

    !+
    ! Move in the address of the item list (if present).
    ! If not present, DCL will create an itemlist from CLI$Q_VALDESC.
    !-

    IF NOT NULLPARAMETER(ITMLST)
    THEN
	CLI_REQ_BLOCK [CLI$L_ITMLST] = .ITMLST;

    !+
    ! Move in the address of the attributes (if present).
    !-

    IF NOT NULLPARAMETER(ATTR)
    THEN
	CLI_REQ_BLOCK [CLI$L_ATTR] = .ATTR;

    !+
    ! NOTE:
    ! If CLI$Q_TABDESC, CLI$L_ITMLST, and CLI$L_ATTR are all 0,
    ! then DCL defaults in the attribute LNM$M_CRELOG, i.e.
    ! the call back looks like a V3 call back.
    !-

!+
! If the caller has specified translation attributes in ATTR
! (as opposed to just logical name attributes), this is normally
! an error.  That is because translation attributes should go in
! the itemlist.  However, as a convenience to RTL users who find
! it hard to build itemlists, we allow translation attributes to
! occur if no itemlist is specified.  In that case, we have to go
! through the trouble of building an itemlist for him.
!-

    IF NULLPARAMETER(ITMLST) AND NOT NULLPARAMETER(ATTR)
    THEN
	BEGIN	! Check for translation attributes
	BIND	ATTR_VECTOR = .ATTR	: VECTOR[4,BYTE],
		ATTR_VALUE  = .ATTR	: LONG;

	!+
	! The first byte of attributes are logical name attributes.
	! The second byte of attributes are translation attributes.
	! The other 2 bytes are reserved for VMS use.
	!-
	
	IF .ATTR_VECTOR[1] NEQ 0
	THEN
		BEGIN	! Build special itemlist
		BIND EQUIV_STRING_DESC = CLI_REQ_BLOCK[CLI$Q_VALDESC] : $BBLOCK;

		!+
		! Create translation attributes from the specified attributes.
		!-

		TRANSLATION_ATTRIBUTES=.ATTR_VALUE AND %X'FF00';

		!+
		! Create logical name attributes from the specified attributes.
		!-

		LOGICAL_NAME_ATTRIBUTES=.ATTR_VALUE AND %X'FF';

		SPECIAL_ITEM_LIST[0]=LNM$_ATTRIBUTES^16+4;
		SPECIAL_ITEM_LIST[1]=TRANSLATION_ATTRIBUTES;
		SPECIAL_ITEM_LIST[2]=0;
		SPECIAL_ITEM_LIST[3]=LNM$_STRING^16+.EQUIV_STRING_DESC[DSC$W_LENGTH];
		SPECIAL_ITEM_LIST[4]=.EQUIV_STRING_DESC[DSC$A_POINTER];
		SPECIAL_ITEM_LIST[5]=0;
		SPECIAL_ITEM_LIST[6]=0;			! no more entries

		!+
		! Store specially revised attributes and item list in
		! the request block.
		!-

		CLI_REQ_BLOCK[CLI$L_ATTR]=LOGICAL_NAME_ATTRIBUTES;
		CLI_REQ_BLOCK[CLI$L_ITMLST]=SPECIAL_ITEM_LIST

		END	! Build special itemlist

	END;	! Check for translation attributes

!+
! Create or modify the supervisor mode logical name.
!-
    RETURN_STATUS = SYS$CLI (CLI_REQ_BLOCK);

!+
! Adjust error return status, if any.
!-
    IF NOT .RETURN_STATUS AND (.RETURN_STATUS [STS$V_FAC_NO] EQL CLI$_FACILITY)
    THEN
	RETURN_STATUS =
	BEGIN
	    SELECTONE .RETURN_STATUS OF
	    SET
	    [CLI$_INVREQTYP] :	LIB$_NOCLI;
	    [OTHERWISE] :	LIB$_UNECLIERR;
	    TES
	    END;

    RETURN .RETURN_STATUS

    END;					! End of LIB$SET_LOGICAL

%SBTTL 'LIB$DELETE_LOGICAL - delete supervisor mode logical name'
GLOBAL ROUTINE LIB$DELETE_LOGICAL (		! delete supervisor mode logical name
	LOGNAME	: REF $BBLOCK,		! logical name string descriptor
	TABNAM	: REF $BBLOCK		! table name
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine provides a method by which a non-privileged program can 
!	delete a supervisor mode logical name.  The logical name given by 
!	logname is deleted from the specified or implied logical name table.
!
!	The $TRNLOG system service can be used to obtain the value of 
!	supervisor mode logical names.  The routine is equivalent to the
!	DEASSIGN DCL command.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$DELETE_LOGICAL (logname.rt.dx [,tabnam.rt.dx])
!
! FORMAL PARAMETERS:
!
!	logname.rt.dx -	A string, passed by descriptor, which contains the 
!			supervisor mode logical name to be deleted.
!			Must be present.
!
!	tabnam.rt.dx  - A string, passed by descriptor, that contains the
!			name of the logical name table from which the
!			logical name is to be deleted.
!			If omitted, the logical name is removed from
!			the LNM$PROCESS logical name table.
!
! IMPLICIT INPUTS:
!
!	It is assumed that the logical name table specified already exists.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: (or ROUTINE VALUE:)
!
!	SS$_NORMAL	Normal successful completion
!	SS$_ACCVIO	logname cannot be read
!	SS$_IVLOGNAM	logname contains more than 63 characters
!	SS$_NOLOGNAM	No such logical name defined or logical name specified
!			    was declared in executative or kernel mode
!	SS$_IVLOGTAB	Invalid logical name table specified
!	SS$_NOPRIV	Caller lacks the necessary privilege to delete
!			    the logical name
!	SS$_TOOMANYLNAM	Logical name translation of the table name exceeded
!			    the allowable depth (10 translations)
!	LIB$_INVARG	Invalid argument
!	LIB$_NOCLI	No CLI present to perform function
!	LIB$_UNECLIERR	Unexpected CLI Error
!	LIB$_WRONUMARG	No arguments specified or more than two specified.
!
! SIDE EFFECTS:
!
!	A supervisor mode logical name is deleted from the specified or
!	implied logical name table.
!
!--

    BEGIN

    BUILTIN
	ACTUALCOUNT,
	NULLPARAMETER;

    LOCAL
	CLI_REQ_BLOCK : BLOCK [CLI$C_SRVDESC, BYTE], ! A CLI request block
	RETURN_STATUS : BLOCK [4, BYTE];

!+
! Check for proper number of arguments.
!-

    IF ACTUALCOUNT() EQLU 0
    OR ACTUALCOUNT() GTRU 2
    THEN
	RETURN	LIB$_WRONUMARG;
!+
! Initialize CLI Command request block.
!-
    CH$FILL (0, CLI$C_SRVDESC, CLI_REQ_BLOCK);
    CLI_REQ_BLOCK [CLI$B_RQTYPE] = CLI$K_CLISERV;
    CLI_REQ_BLOCK [CLI$W_SERVCOD] = CLI$K_DELELOG;

!+
! Move in the logical name.
!-

    MOVEDESC ( .LOGNAME, CLI_REQ_BLOCK [CLI$Q_NAMDESC] );

!+
! Move in the table name, if specified.
! If not specified, DCL willd efault in LNM$PROCESS.
!-

    IF NOT NULLPARAMETER(TABNAM)
    THEN
	    MOVEDESC ( .TABNAM, CLI_REQ_BLOCK [CLI$Q_TABDESC] );

!+
! Delete the supervisor mode logical name.
!-
    RETURN_STATUS = SYS$CLI (CLI_REQ_BLOCK);

!+
! Adjust error return status, if any.
!-
    IF NOT .RETURN_STATUS AND (.RETURN_STATUS [STS$V_FAC_NO] EQL CLI$_FACILITY)
    THEN
	RETURN_STATUS =
	BEGIN
	    SELECTONE .RETURN_STATUS OF
	    SET
	    [CLI$_INVREQTYP] :	LIB$_NOCLI;
	    [OTHERWISE] :	LIB$_UNECLIERR;
	    TES
	    END;

    RETURN .RETURN_STATUS

    END;					! End of LIB$DELETE_LOGICAL

%SBTTL 'LIB$DISABLE_CTRL - disable CLI out-of-band character(s) handler'
GLOBAL ROUTINE LIB$DISABLE_CTRL (		! disable CLI out-of-band
	DISABLE_MASK : REF VECTOR [, LONG],	! disable bit mask
	PREVIOUS_MASK : REF VECTOR [, LONG]	! previous enable bit mask
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine disables CLI processing for out-of-band the characters 
!	identified by DISABLE_MASK.  When normal CLI processing for one or 
!	more out-of-band characters is disabled, a user program can intercept 
!	and respond to them.  There are no privilege requirements for calling 
!	this routine.
!
!	Currently, this routine supports disabling of CLI out-of-band 
!	processing for CTRL-T and CTRL-Y when the DCL CLI is in use, and for 
!	CTRL-Y when the MCR CLI is in use.  The macro $LIBCLIDEF defines the 
!	two masks used for disabling processing for these two out-of-band 
!	characters as follows:
!		LIB$M_CLI_CTRLT		mask for CTRL-T
!		LIB$M_CLI_CTRLY		mask for CTRL-Y
!	If the masks are logically or'd together, processing for both 
!	out-of-band characters will be effected.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$DISABLE_CTRL (disable_mask.rl.r
!					     [, previous_mask.wl.r ] )
!
! FORMAL PARAMETERS:
!
!	disable_mask.rl.r     -	the mask controlling which out-of-band 
!				characters the CLI should ignore.  Values 
!				should be selected from one of, or the logical 
!				OR of more than one of:
!						LIB$M_CLI_CTRLT
!						LIB$M_CLI_CTRLY
!				These symbols are defined in $LIBCLIDEF.
!
!	previous_mask.wl.r    -	a longword into which will be stored a mask 
!				having the same format as disable_mask, but 
!				which represents the enabled state for all 
!				out-of-band character processing before 
!				disable_mask is applied.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: (or ROUTINE VALUE:)
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_INVARG	Disable_mask has an unrecognized bit set
!	LIB$_NOCLI	No CLI present to perform function
!	LIB$_UNECLIERR	Unexpected CLI Error
!
! SIDE EFFECTS:
!
!	CLI out-of-band processing of one or more characters is disabled.
!
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    LOCAL
	CLI_REQ_BLOCK : BLOCK [CLI$C_SRVDESC, BYTE], ! A CLI request block
	RETURN_STATUS : BLOCK [4, BYTE];
	

!+
! Initialize CLI Command request block.
!-
    CH$FILL (0, CLI$C_SRVDESC, CLI_REQ_BLOCK);
    CLI_REQ_BLOCK [CLI$B_RQTYPE] = CLI$K_CLISERV;
    CLI_REQ_BLOCK [CLI$W_SERVCOD] = CLI$K_DISAOOB;
    CLI_REQ_BLOCK [CLI$L_NEW_MASK] = .DISABLE_MASK [0];

!+
! Request CLI out-of-band processing be disabled.
!-
    RETURN_STATUS = SYS$CLI (CLI_REQ_BLOCK);

!+
! If requested, return previous out-of-band enabled mask.
! It may be good.
!-
    IF NOT NULLPARAMETER (2)
    THEN
	PREVIOUS_MASK [0] = .CLI_REQ_BLOCK [CLI$L_OLD_MASK];

!+
! Adjust error return status, if any.
!-
    IF NOT .RETURN_STATUS AND (.RETURN_STATUS [STS$V_FAC_NO] EQL CLI$_FACILITY)
    THEN
	RETURN_STATUS =
	BEGIN
	    SELECTONE .RETURN_STATUS OF
	    SET
	    [CLI$_BADCTLMSK] :	LIB$_INVARG;
	    [CLI$_INVREQTYP] :	LIB$_NOCLI;
	    [OTHERWISE] :	LIB$_UNECLIERR;
	    TES
	    END;

    RETURN (.RETURN_STATUS);

    END;					! End of LIB$DISABLE_CTRL

%SBTTL 'LIB$ENABLE_CTRL - re-enable CLI out-of-band character(s) handler'
GLOBAL ROUTINE LIB$ENABLE_CTRL (		! re-enable CLI out-of-band
	ENABLE_MASK : REF VECTOR [, LONG],	! enable bit mask
	PREVIOUS_MASK : REF VECTOR [, LONG]	! previous enable bit mask
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine re-enables CLI processing for out-of-band the characters 
!	identified by ENABLE_MASK, presumable after such processing has been 
!	disabled by a call to LIB$DISABLE_CTRL.  There are no privilege 
!	requirements for calling this routine.
!
!	Currently, this routine supports re-enabling of CLI out-of-band 
!	processing for CTRL-T and CTRL-Y when the DCL CLI is in use, and for 
!	CTRL-Y when the MCR CLI is in use.  The macro $LIBCLIDEF defines the 
!	two masks used for enabling processing for these two out-of-band 
!	characters as follows:
!		LIB$M_CLI_CTRLT		mask for CTRL-T
!		LIB$M_CLI_CTRLY		mask for CTRL-Y
!	If the masks are logically or'd together, processing for both 
!	out-of-band characters will be effected.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$ENABLE_CTRL (enable_mask.rl.r
!					    [, previous_mask.wl.r ] )
!
! FORMAL PARAMETERS:
!
!	enable_mask.rl.r      -	the mask controlling which out-of-band 
!				characters the CLI should process.  Values 
!				should be selected from one of, or the logical 
!				OR of more than one of:
!						LIB$M_CLI_CTRLT
!						LIB$M_CLI_CTRLY
!				These symbols are defined in $LIBCLIDEF.
!
!	previous_mask.wl.r    -	a longword into which will be stored a mask 
!				having the same format as enable_mask, but 
!				which represents the enabled state for all 
!				out-of-band character processing before 
!				enable_mask is applied.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: (or ROUTINE VALUE:)
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_INVARG	Enable_mask has an unrecognized bit set
!	LIB$_NOCLI	No CLI present to perform function
!	LIB$_UNECLIERR	Unexpected CLI Error
!
! SIDE EFFECTS:
!
!	CLI out-of-band processing of one or more characters is enabled.
!
!--

    BEGIN

    BUILTIN
	NULLPARAMETER;

    LOCAL
	CLI_REQ_BLOCK : BLOCK [CLI$C_SRVDESC, BYTE], ! A CLI request block
	RETURN_STATUS : BLOCK [4, BYTE];
	

!+
! Initialize CLI Command request block.
!-
    CH$FILL (0, CLI$C_SRVDESC, CLI_REQ_BLOCK);
    CLI_REQ_BLOCK [CLI$B_RQTYPE] = CLI$K_CLISERV;
    CLI_REQ_BLOCK [CLI$W_SERVCOD] = CLI$K_ENABOOB;
    CLI_REQ_BLOCK [CLI$L_NEW_MASK] = .ENABLE_MASK [0];

!+
! Request CLI out-of-band processing be enabled.
!-
    RETURN_STATUS = SYS$CLI (CLI_REQ_BLOCK);

!+
! If requested, return previous out-of-band enabled mask.
! It may be good.
!-
    IF NOT NULLPARAMETER (2)
    THEN
	PREVIOUS_MASK [0] = .CLI_REQ_BLOCK [CLI$L_OLD_MASK];

!+
! Adjust error return status, if any.
!-
    IF NOT .RETURN_STATUS AND (.RETURN_STATUS [STS$V_FAC_NO] EQL CLI$_FACILITY)
    THEN
	RETURN_STATUS =
	BEGIN
	    SELECTONE .RETURN_STATUS OF
	    SET
	    [CLI$_BADCTLMSK] :	LIB$_INVARG;
	    [CLI$_INVREQTYP] :	LIB$_NOCLI;
	    [OTHERWISE] :	LIB$_UNECLIERR;
	    TES
	    END;

    RETURN (.RETURN_STATUS);

    END;					! End of LIB$ENABLE_CTRL

%SBTTL 'LIB$$BUILD_SYMBOL_NAME - Build a symbol name string'
ROUTINE LIB$$BUILD_SYMBOL_NAME (		! build a symbol name string
	SYMBOL: REF BLOCK [, BYTE],		! input symbol string descriptor
	DYNSTR: REF BLOCK [, BYTE],		! dynamic string descriptor
	CLI_SYMBOL: REF BLOCK [, BYTE]		! CLI symbol string descriptor
    ) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Using the string pointed to by SYMBOL, LIB$$BUILD_SYMBOL_NAME builds a 
!	dynamic string, pointed to by CLI_SYMBOL, which has been upcased and 
!	has trailing blanks deleted.  The string pointed to by SYMBOL is also 
!	tested for validity as a symbol name; the first character must be 
!	alphabetic or $ or _, there must be less than 255 characters in the name 
!	(trailing blanks excluded), and there must be at least one non-blank 
!	character in the name.
!
!	SCRATCH is a string descriptor into which the actual descriptor for 
!	the dynamic string will be written.  The calling procedure must use 
!	this descriptor to deallocate the dynamic string.
!
!	If this routine detects an error after it has allocated the dynamic 
!	string, it will deallocate the dynamic string thus freeing its caller 
!	from that responsibility.
!
! CALLING SEQUENCE:
!
!	ret_status.wlc.v = LIB$$BUILD_SYMBOL_NAME (symbol.rt.dx, 
!						   dynstr.wt.dx,
!						   cli_symbol.wt.dx)
!
! FORMAL PARAMETERS:
!
!	symbol.rt.dx  -	A string, passed by descriptor, which contains the 
!			original symbol name.
!
!	dynstr.wt.dx  -	A string descriptor into which the descriptor for the 
!			actual dynamic string used to contain the converted 
!			symbol name will be written.  The calling procedure 
!			must use this descriptor to deallocate the dynamic 
!			string.
!
!	cli_symbol.wt.dx - A string, passed by descriptor, into which the 
!			processed symbol name will be placed.  This routine 
!			creates a new dynamic string in this descriptor: the 
!			contents of the descriptor upon entry are overwritten.
!
! IMPLICIT INPUTS:
!
!	LIB$AB_UPCASE	the address of an upcase translation table.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: (or ROUTINE VALUE:)
!
!	SS$_NORMAL	Normal successful completion
!	LIB$_INVARG	Symbol name contains more than 255 characters or is 
!			all blanks
!	LIB$_INVSYMNAM	Symbol name does not begin with a letter
!	LIB$_INSVIRMEM	Insufficient virtual memory for dynamic string
!	Other completion stati from LIB$ANALYZE_SDESC.
!			
!
! SIDE EFFECTS:
!
!	WARNING:
!	Although this procedure performs some checks on the validity of 
!	symbol names passed to it, some symbol name considered valid by 
!	this procedure will be considered invalid by DCL.  
!
!--

    BEGIN

    LOCAL
	ADDRESS,				! a string address
	LENGTH : WORD,				! a string length
	IN_PTR, OUT_PTR,			! two pointer variables
	STATUS;					! a return status value

	

!+
! Gather information about input symbol name string
! and build pointer input symbol name string.
!-

    STATUS = LIB$ANALYZE_SDESC_R2 (.SYMBOL; LENGTH, ADDRESS );
    IF NOT .STATUS THEN RETURN .STATUS;
    IN_PTR = CH$PTR( .ADDRESS, .LENGTH - 1 );

!+
! Work backwards from the end of the string to locate
! the first non-blank character; i.e. locate beginning
! of the trailing blanks.
!-
    LENGTH = 1 +
	BEGIN
	    DECR J FROM .LENGTH - 1 TO 0 DO
	    BEGIN
		IF CH$RCHAR( .IN_PTR ) NEQU %C' ' THEN EXITLOOP .J;
		IN_PTR = CH$PLUS( .IN_PTR, -1 );
		END
	    END;
    IF .LENGTH EQLU 0 OR .LENGTH GTRU 255 THEN RETURN LIB$_INVSYMNAM;

!+
! Allocate a dynamic string and setup CLI symbol name
! string descriptor.
!-
    DYNSTR [DSC$B_CLASS] = DSC$K_CLASS_D;
    DYNSTR [DSC$B_DTYPE] = DSC$K_DTYPE_T;
    DYNSTR [DSC$W_LENGTH] = 0;
    DYNSTR [DSC$A_POINTER] = 0;
    STATUS = LIB$SGET1_DD( LENGTH, .DYNSTR );
    IF NOT .STATUS THEN RETURN .STATUS;
    CLI_SYMBOL [DSC$A_POINTER] = .DYNSTR [DSC$A_POINTER];
    CLI_SYMBOL [DSC$W_LENGTH] = .LENGTH;

!+
! Upcase the symbol name.
!-
    IN_PTR = CH$PTR( .ADDRESS );
    OUT_PTR = CH$PTR( .CLI_SYMBOL [DSC$A_POINTER] );
    CH$TRANSLATE( LIB$AB_UPCASE, .LENGTH, .IN_PTR, %C' ', .LENGTH, .OUT_PTR );

!+
! Check for reasonable first character in symbol name.
!-
    IF (CH$RCHAR( .OUT_PTR ) LSSU %C'A' OR CH$RCHAR( .OUT_PTR ) GTRU %C'Z') AND
       (CH$RCHAR( .OUT_PTR ) NEQU %C'$' OR CH$RCHAR( .OUT_PTR ) NEQU %C'_')
    THEN
    BEGIN
	LIB$SFREE1_DD( .DYNSTR );
	RETURN LIB$_INVSYMNAM;
	END
    ELSE
	RETURN SS$_NORMAL;

    END;					! End of routine LIB$$BUILD_SYMBOL_NAME

END						! End of module LIB$CLI_CALLBACK
ELUDOM
