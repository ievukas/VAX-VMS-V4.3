MODULE LISTJOUR	(%TITLE	'List a journal file'
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Backup/Restore
!
! ABSTRACT:
!	This module contains the routines that list a journal file.
!
! ENVIRONMENT:
!	VAX/VMS user mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 10-Apr-1981
!
! MODIFIED BY:
!
!	V03-003	LY0490		Larry Yetto		21-MAY-1984 16:12
!		Modify code to allow long directory names to be output.
!
!	V03-002	LY0464		Larry Yetto		1-FEB-1984 10:39
!		Add support for journal file structure level 2.  This new
!		format add a flag longword to each file entry to enable us
!		to flag the fact that only a file header was saved for a 
!		particular file.
!
!	V03-001	ACG0313		Andrew C. Goldstein,	12-Feb-1983  16:23
!		Add routine subtitles
!
!	V02-002	MLJ0036		Martin L. Jack,	28-Aug-1981  17:38
!		Change calling sequence to MATCH routine.
!
!	V02-001	MLJ0025		Martin L. Jack,	8-May-1981  13:36
!		Implement selective journal listing.
!
!
!**

REQUIRE 'SRC$:COMMON';
LIBRARY 'SYS$LIBRARY:STARLET';
REQUIRE 'LIB$:BACKDEF';


LINKAGE
	L_P$ =		CALL: GLOBAL(P$=11);


MACRO
	L_DECL =	EXTERNAL REGISTER P$ = 11: REF VECTOR %;


FORWARD ROUTINE
	SELECT_FILE,			! Evaluate selection criteria
	LIST_JOURNAL:	NOVALUE;	! Driver for journal file listing


EXTERNAL ROUTINE
	MATCH,				! Match file specifications
	OPEN_JOURNAL:	NOVALUE,	! Open a journal file
	READ_JOURNAL,			! Read a journal record
	CLOSE_JOURNAL:	NOVALUE,	! Close a journal file
	LIST_FAO:	L_P$ NOVALUE,	! Add information to line buffer
	LIST_EOL:	L_P$ NOVALUE;	! Write line buffer to listing file


G$DEFINE();		! Define global common area


MACRO
	FAO_(A)=
	    LIST_FAO(
		UPLIT BYTE (%ASCIC A)
		%IF NOT %NULL(%REMAINING) %THEN , %FI %REMAINING) %,


	EOL_(A)=
	    LIST_EOL() %;


MACRO
	_LIST_DESC=	P$[0] %,		! Descriptor for buffer
	_LIST_BUFFER=	P$[2] %,		! Listing buffer
	LIST_DESC(N)=		VECTOR[_LIST_DESC,N] %;


LITERAL
	P$SIZE=		2 + CH$ALLOCATION(LIST_SIZE);

%SBTTL 'SELECT_FILE - select file from journal'
ROUTINE SELECT_FILE(NAME,CREDATE)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine evaluates the selection criteria for a file specification
!	retrieved from a journal file.
!
! INPUT PARAMETERS:
!	NAME		- Descriptor for file specification "[dir]nam.typ;ver".
!	CREDATE		- Pointer to quadword time value.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	True if the file specification is selected, false otherwise.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	CREDATE:	REF VECTOR;


! BEFORE
!
IF .QUAL[QUAL_BEFO] AND NOT .QUAL[QUAL_BEFO_BACK]
THEN
    BEGIN
    IF .CREDATE[1] GTRU .VECTOR[QUAL[QUAL_BEFO_VALUE], 1] THEN RETURN FALSE;
    IF .CREDATE[1] EQLU .VECTOR[QUAL[QUAL_BEFO_VALUE], 1] AND .CREDATE[0] GEQU .VECTOR[QUAL[QUAL_BEFO_VALUE], 0] THEN RETURN FALSE;
    END;


! SINCE
!
IF .QUAL[QUAL_SINC] AND NOT .QUAL[QUAL_SINC_BACK]
THEN
    BEGIN
    IF .CREDATE[1] LSSU .VECTOR[QUAL[QUAL_SINC_VALUE], 1] THEN RETURN FALSE;
    IF .CREDATE[1] EQLU .VECTOR[QUAL[QUAL_SINC_VALUE], 1] AND .CREDATE[0] LSSU .VECTOR[QUAL[QUAL_SINC_VALUE], 0] THEN RETURN FALSE;
    END;


! EXCLUDE
!
IF .QUAL[QUAL_EXCL]
THEN
    BEGIN
    LOCAL
	EXCL:		REF BBLOCK;

    EXCL = .QUAL[QUAL_EXCL_LIST];
    WHILE .EXCL NEQ 0 DO
	BEGIN
	IF MATCH(.NAME, EXCL[QUAL_EXCL_DESC]) THEN RETURN FALSE;
	EXCL = .EXCL[QUAL_NEXT];
	END;
    END;


! SELECT
!
IF .QUAL[QUAL_SELE]
THEN
    BEGIN
    LOCAL
	SELE:		REF BBLOCK;

    SELE = .QUAL[QUAL_SELE_LIST];
    IF
	BEGIN
	WHILE .SELE NEQ 0 DO
	    BEGIN
	    IF MATCH(.NAME, SELE[QUAL_SELE_DESC]) THEN EXITLOOP FALSE;
	    SELE = .SELE[QUAL_NEXT];
	    END
	END
    THEN
	RETURN FALSE;
    END;


TRUE
END;

%SBTTL 'LIST_JOURNAL - main journal list routine'
GLOBAL ROUTINE LIST_JOURNAL: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is the driver for listing of a journal file.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
LITERAL
	STR_LENGTH    = %CHARCOUNT(' file header only'),
	BUFFER_LENGTH = BJL$C_DIR_LEN + BJL$S_FILENAME + STR_LENGTH ;


LOCAL
	STR:		LONG INITIAL(UPLIT BYTE (' file header only')),
	FAB:		REF BBLOCK,	! Pointer to FAB for journal file
	BUFFER:		BBLOCK[BUFFER_LENGTH],	! Record buffer
	SSNAME_LEN:	LONG INITIAL (0),		! Length of SSNAME
	SSNAME:		BBLOCK[BJL$C_SSNAME_LEN],	! SSNAME buffer
	VOLUME:		BBLOCK[BJL$C_VOLUME_LEN],	! VOLUME buffer
	DIR_LEN:	LONG INITIAL (0) ,		! Length of DIRECTORY
	DIRECTORY:	BBLOCK[BJL$C_DIR_LEN],		! DIRECTORY buffer
	CHANGE,				! True if SSNAME or VOLUME changed
	P$AREA:		VECTOR[P$SIZE];	! Impure area
GLOBAL REGISTER
	P$ = 11:	REF VECTOR;	! Impure area base register


! Initialize impure area.
!
P$ = P$AREA;
LIST_DESC[0] = LIST_SIZE;
LIST_DESC[1] = _LIST_BUFFER;


! Do the listing.
!
OPEN_JOURNAL(FALSE, FALSE);


! Heading.
!
FAB = .QUAL[QUAL_JOUR_FC];
FAO_('Journal file !AD on !%D',
    .BBLOCK[FAB[FC_NAM], NAM$B_RSL],
    .BBLOCK[FAB[FC_NAM], NAM$L_RSA],
    0);
EOL_();


! Read all records of the journal file to produce the listing.
!
CHANGE = FALSE;
WHILE READ_JOURNAL(BUFFER) DO
    BEGIN
    CASE .BUFFER[BJL$B_TYPE] FROM BJL$K_SSNAME TO BJL$K_FILE OF
	SET


	[BJL$K_SSNAME]:
	    BEGIN

	    ! Save the SSNAME record in a local.
	    !
	    IF .BUFFER[BJL$B_SIZE] LEQU BJL$C_SSNAME_LEN+1
	    THEN
		BEGIN
		SSNAME_LEN = .BUFFER[BJL$B_SIZE] - 1;
		CH$MOVE(.SSNAME_LEN, BUFFER[BJL$B_DATA], SSNAME);
		CHANGE = TRUE;
		END;
	    END;


	[BJL$K_VOLUME]:
	    BEGIN

	    ! Save the VOLUME record in a local.
	    !
	    IF .BUFFER[BJL$B_SIZE] EQLU BJL$C_VOLUME_LEN+1
	    THEN
		BEGIN
		CH$MOVE(BJL$C_VOLUME_LEN, BUFFER[BJL$B_DATA], VOLUME);
		CHANGE = TRUE;
		END;
	    END;


	[BJL$K_DIRECTORY]:
	    BEGIN

	    ! Save the DIRECTORY record in a local.
	    !
	    IF .BUFFER[BJL$B_SIZE] LEQU BJL$C_DIR_LEN+1
	    THEN
		BEGIN
		DIR_LEN = .BUFFER[BJL$B_SIZE] - 1;
		CH$MOVE(.DIR_LEN, BUFFER[BJL$B_DATA], DIRECTORY);
		END;
	    END;


	[BJL$K_FILE]:
	    BEGIN
	    LOCAL
		BUFF_SIZE	: WORD ,
		BUFF_FLAGS	: BBLOCK [4] ,
		NAME_DESC	: VECTOR[2];	! Descriptor for name string


	    BUFF_SIZE  = .BUFFER [ BJL$B_SIZE ] ;

	    IF .JOUR_STRUCT_LEV GTRU BJL$K_LEVEL1
	    THEN
		BEGIN
		! Adjust the name size to remove the flag longword
		!
		BUFF_SIZE = .BUFF_SIZE - 4 ;
	    
		! Get the flags longword  ( size +1 to skip size field )
		!
		BUFF_FLAGS = .BUFFER [.BUFF_SIZE+1,0,32,0] ;
		END
	    ELSE
		BUFF_FLAGS = 0 ;

	    ! Assemble the complete name string.
	    !
	    NAME_DESC[1] = BUFFER[0,0,0,0];
	    NAME_DESC[0] = .BUFF_SIZE
	                   - 1		! Adjust for size field
	                   + .DIR_LEN	! Add in directory name length
	                   + 2 ;	! Adjust for "[]"

	    CH$COPY(
		.BUFF_SIZE - 1,
		BUFFER[BJL$B_DATA],
		%C' ',
		BUFFER + BUFFER_LENGTH - BUFFER[.DIR_LEN+2,0,0,0],
		BUFFER[.DIR_LEN+2,0,0,0]);
	    CH$MOVE(
		.DIR_LEN,
		DIRECTORY,
		BUFFER[1,0,0,0]);
	    BUFFER[0,0,8,0] = %C'[';
	    BUFFER[.DIR_LEN+1,0,8,0] = %C']';

	    IF .BUFF_FLAGS[BJL$V_HEADONLY]
	    THEN
		BEGIN
		CH$COPY ( STR_LENGTH,
		          .STR,
		          %C' ',
		          BUFFER_LENGTH - .NAME_DESC[0],
		          BUFFER[.NAME_DESC[0],0,8,0]);
		NAME_DESC[0] = .NAME_DESC[0] + STR_LENGTH ;
		END;

	    ! Write the name string, if the selection criteria are satisfied.
	    !
	    IF SELECT_FILE(NAME_DESC, SSNAME[BJL$Q_CREDATE])
	    THEN
		BEGIN

		! If the save set or the volume number has changed since the
		! last line, write the new information.
		!
		IF .CHANGE
		THEN
		    BEGIN
		    EOL_();
		    FAO_(
			'Save set !AD created on !%D',
			.SSNAME_LEN - $BYTEOFFSET(BJL$T_SSNAME),
			SSNAME[BJL$T_SSNAME],
			SSNAME[BJL$Q_CREDATE]);
		    EOL_();
		    FAO_(
			'Volume number !UW, volume label !AD',
			.VOLUME[BJL$W_VOLNUMBER],
			BJL$S_VOLNAME,
			(IF .(VOLUME[BJL$T_VOLNAME])<0,8> GTRU %C' '
			    THEN VOLUME[BJL$T_VOLNAME]
			    ELSE UPLIT BYTE ('unknown     ')));
		    EOL_();
		    CHANGE = FALSE;
		    END;


		! Write the file specification.
		!
		FAO_('    !AS', NAME_DESC);
		EOL_();
		END;
	    END;


	[INRANGE, OUTRANGE]:
	    0;


	TES;
    END;
CLOSE_JOURNAL(FALSE);
END;

END
ELUDOM
