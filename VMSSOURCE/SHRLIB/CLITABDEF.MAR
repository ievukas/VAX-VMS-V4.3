; *********************************************************************************************************************************
;  Created 15-SEP-1984 22:59:49  by  VAX-11 SDL V2.0       Source: 15-SEP-1984 22:42:14 _$255$DUA28:[DCL.SRC]CLITABDEF.SDL;1       
; *********************************************************************************************************************************
 
 
	.MACRO	$$clitabDEF,$GBL
	$DEFINI	$clitab,$GBL
; 	IDENT V04-000
; ***************************************************************************
; 									    *
;   COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;   DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;   ALL RIGHTS RESERVED.						    *
;  									    *
;   THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;   ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;   INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;   COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;   OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;   TRANSFERRED.							    *
;  									    *
;   THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;   AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;   CORPORATION.							    *
;  									    *
;   DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;   SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;  									    *
; 									    *
; ***************************************************************************
; ++
;  Facility:	Command Language Interpreters, CLI Table Definitions
; 
;  Abstract:	This file contains the definitions for the data blocks which
; 		appear in a CLI table.  A CLI table is used by DCL and MCR
; 		to parse and execute DCL commands entered by the user.
; 		A CLI table is created with the Command Definition Utility.
; 
;  Environment:	No assumptions can be made about the environment.
; 
;  Author:	Paul C. Anagnostopoulos
;  Creation:	7 December 1982
; 
;  Modifications:
; 
; 	V04-001	PCG0001		Peter George		06-Dec-1983
; 		Add NEG operator.
; --
; 	C L I   T A B L E   B L O C K S
; 	-----   ---------   -----------
;  A CLI table contains all of the information that DCL and MCR need
;  to parse DCL commands.  The tables are composed of a set of blocks,
;  each of which describes one or more command items.  This SDL file
;  defines all of the blocks.
; 
;  Each block begins with a standard header, which is formatted as follows:
; 
; 	+-------+-------+---------------+
; 	|subtype| type  |    length     |
; 	|-------+-------|---------------|
; 	|   TRO count   |    flags      |
; 	+---------------+---------------+
; 
;  All references to other blocks are made via Table-Relative Offsets (TRO).
;  The TRO count specifies how many such references there are, and the
;  reference longwords always follow the header immediately.  The rest of
;  each block contains other information necessary for the definition of
;  the item.  Following the fixed portion of the block is a variable
;  portion, which contains any variable-length strings.  Each of these
;  strings is referenced from the fixed portion of the block by a
;  word Block-Relative Offset (BRO).
; 
;  The following list defines all of the valid block types.
$EQU	block_k_vector	1               ;  Vector (root) block.
$EQU	block_k_command	2               ;  Command block.
$EQU	block_k_type	3               ;  Type block.
$EQU	block_k_entity	4               ;  Entity block.
$EQU	block_k_expression	5       ;  Expression block.
$EQU	block_k_cdu_visited	6       ;  For CDU internal use.
;  The following pages define the various block formats.  Many of the field
;  names are wierd, but have been retained for compatibility with previous
;  block formats.
; 	V E C T O R   B L O C K S
; 	-----------   -----------
;  The primary vector block appears at the beginning of a CLI table,
;  and contains references to all other blocks and block lists.
$EQU	vec_k_dcl	1               ;  Primary vector for DCL.
$EQU	vec_k_mcr	2               ;  Primary vector for MCR.
$EQU	vec_k_verb	3               ;  Verb name table.
$EQU	vec_k_command	4               ;  Command block table.
$EQU	vec_k_strlvl	6               ;  Current level is 6.
$EQU	vec_k_header_length	8
$EQU	vec_k_length	20              ;  Length of fixed portion.
$EQU	vec_w_size	0               ;  All blocks have a standard
$EQU	vec_b_type	2               ;  header which is defined
$EQU	vec_b_subtype	3               ;  up above.
$EQU	vec_w_flags	4
$EQU	vec_b_strlvl	4               ;  Format level of table.
$EQU	vec_w_tro_count	6
$EQU	vec_l_verbtbl	8               ;  TRO of verb name table.
$EQU	vec_l_comdptr	12              ;  TRO of command block pointer
;  table.
$EQU	vec_l_table_size	16      ;  Overall size of CLI table.
;  The verb name table is composed of the standard header, followed by one
;  longword for each verb or synonym.  The longword contains the first
;  four characters of the verb name, padded with NULs if necessary.
;  The command block pointer table is composed of the standard header,
;  followed by one longword for each entry in the verb table.  This
;  longword contains the TRO of the corresponding command block.
; 	C O M M A N D   B L O C K
; 	-------------   ---------
;  A command block is used to define a verb or a syntax change brought about
;  by a parameter or qualifier.  There is one command block for each verb
;  (but not for its synonyms), and one for each syntax change within a verb.
$EQU	cmd_k_verb	1               ;  Verb definition.
$EQU	cmd_k_syntax	2               ;  Syntax change definition.
$EQU	cmd_m_abbrev	1
$EQU	cmd_m_nostat	2
$EQU	cmd_m_foreign	4
$EQU	cmd_m_immed	8
$EQU	cmd_m_mcrparse	16
$EQU	cmd_m_parms	32
$EQU	cmd_m_quals	64
$EQU	cmd_m_disallows	128
$EQU	cmd_k_max_parms	8               ;  Maximum parameters.
$EQU	cmd_k_none	0               ;  It doesn't.
$EQU	cmd_k_cli	1               ;  Calls a CLI routine.
$EQU	cmd_k_user	2               ;  Calls a user routine.
$EQU	cmd_k_image	3               ;  Invokes an image.
$EQU	cmd_k_same	4               ;  For syntax change, same
;  handling as verb.
$EQU	cmd_k_length	32              ;  Length of fixed portion.
$EQU	cmd_k_max_name	32              ;  Maximum sizes of variable
$EQU	cmd_k_max_image	64              ;  portions.
$EQU	cmd_k_max_outputs	8
$EQU	cmd_k_max_prefix	32
$EQU	cmd_w_size	0               ;  All blocks have a standard
$EQU	cmd_b_type	2               ;  header which is defined
$EQU	cmd_b_subtype	3               ;  up above.
$EQU	cmd_w_flags	4
$EQU	cmd_v_abbrev	0               ;  Verb may be abbreviated
$EQU	cmd_v_nostat	1               ;  Command does not return a
$EQU	cmd_v_foreign	2               ;  Command requests unparsed
$EQU	cmd_v_immed	3               ;  Immediate command, uses
$EQU	cmd_v_mcrparse	4               ;  MCR style (output=input).
$EQU	cmd_v_parms	5               ;  Parameter info is relevent.
$EQU	cmd_v_quals	6               ;  Qualifier info is relevent.
$EQU	cmd_v_disallows	7               ;  Disallow info is relevent.
;  internal parsing routines.
;  command line.
;  status, so don't check it.
;  non-uniquely.
$EQU	cmd_w_tro_count	6
$EQU	cmd_l_parms	8               ;  TRO of first parameter
;  entity block.
$EQU	cmd_l_quals	12              ;  TRO of first qualifier.
$EQU	cmd_l_disallow	16              ;  TRO of top-level disallow
;  boolean expression block.
$EQU	cmd_b_handler	20              ;  How does CLI handle command?
$EQU	cmd_b_parmcnt	21
$EQU	cmd_S_minparm	4
$EQU	cmd_v_minparm	0               ;  Minimum required parameters.
$EQU	cmd_S_maxparm	4
$EQU	cmd_v_maxparm	4               ;  Maximum allowed parameters.
$EQU	cmd_b_verbtyp	22              ;  Verb type code for use with
$EQU	cmd_w_name	24              ;  BRO of verb or syntax name.
$EQU	cmd_w_image	26              ;  BRO of routine or image
;  reference.
$EQU	cmd_w_outputs	28              ;  BRO of outputs list.
$EQU	cmd_w_prefix	30              ;  BRO of prefix string.
$EQU	cmd_z_VARIABLE	32              ;  Beginning of variable part.
;  Following the fixed portion, the verb name(s) are stored as a sequence
;  of ASCIC strings within an overall ASCIC string.  Or, the syntax name is
;  stored as a single ASCIC string.
; 
;  The routine or image reference is stored as follows:
; 	CLI routine	Routine name as ASCIC string.
; 	user routine	Longword routine address, then name as ASCIC string.
; 	image		Image specification as ASCIC string.
; 
;  The outputs list consists of a counted sequence of bytes.  Each byte
;  contains either the negative of the parameter number, or the qualifier
;  number.
; 
;  The prefix string is stored as an ASCIC string.
; 	T Y P E   B L O C K
; 	-------   ---------
;  A type block is used as the header of a chain of entity blocks that
;  describe type keywords.  There is one type block for each user-specified
;  type definition.
$EQU	type_k_type	1               ;  Only one kind of type block.
$EQU	type_k_length	16              ;  Length of fixed portion.
$EQU	type_k_max_name	32              ;  Maximum sizes of variable
$EQU	type_k_max_prefix	32      ;  portions.
$EQU	type_w_size	0               ;  All blocks have a standard
$EQU	type_b_type	2               ;  header which is defined
$EQU	type_b_subtype	3               ;  up above.
$EQU	type_w_flags	4
$EQU	type_w_tro_count	6
$EQU	type_l_keywords	8               ;  TRO of first keyword
;  entity block.
$EQU	type_w_name	12              ;  BRO of type name.
$EQU	type_w_prefix	14              ;  BRO of prefix string.
$EQU	type_z_VARIABLE	16              ;  Beginning of variable part.
;  Folowing the fixed portion, the type name is stored as an ASCIC string.
;  So is the prefix string.
; 	E N T I T Y   B L O C K
; 	-----------   ---------
;  An entity block is used to define each parameter, qualifier, and data
;  type keyword.  These blocks are linked off of the command block for
;  the verb, in the case of parameters and qualifiers, or off of a type
;  block, in the case of type keywords.
$EQU	ent_K_PARAMETER	1               ;  Parameter definition.
$EQU	ent_k_qualifier	2               ;  Qualifier definition.
$EQU	ent_k_keyword	3               ;  Keyword definition.
$EQU	ent_m_val	1
$EQU	ent_m_neg	2
$EQU	ent_m_deftrue	4
$EQU	ent_m_batdef	8
$EQU	ent_m_valreq	16
$EQU	ent_m_list	32
$EQU	ent_m_concat	64
$EQU	ent_m_impcat	128
$EQU	ent_m_verb	256
$EQU	ent_m_parm	512
$EQU	ent_m_mcroptdelim	1024
$EQU	ent_m_mcrignore	2048
$EQU	ent_k_user_defined	0       ;  Defined by user.
$EQU	ent_k_infile	1               ;  Input file spec.
$EQU	ent_k_outfile	2               ;  Output file spec.
$EQU	ent_k_number	3               ;  Decimal integer.
$EQU	ent_k_privilege	4               ;  Privilege keyword.
$EQU	ent_k_datetime	5               ;  Date/time.
$EQU	ent_k_protection	6       ;  Protection spec.
$EQU	ent_k_process	7               ;  Process name.
$EQU	ent_k_inlog	8               ;  Input logical name.
$EQU	ent_k_outlog	9               ;  Output logical name.
$EQU	ent_k_insym	10              ;  Input symbol name.
$EQU	ent_k_outsym	11              ;  Output symbol name.
$EQU	ent_k_node	12              ;  DECnet node spec.
$EQU	ent_k_device	13              ;  Node/device spec.
$EQU	ent_k_dir	14              ;  Node/device/directory spec.
$EQU	ent_k_uic	15              ;  UIC spec.
$EQU	ent_k_restofline	16      ;  Rest of command line.
$EQU	ent_k_parenvalue	17      ;  Parenthesized value.
$EQU	ent_k_deltatime	18              ;  Delta time only.
$EQU	ent_k_quotedstring	19      ;  String, and retain quotes.
$EQU	ent_k_file	20              ;  Any file spec.
$EQU	ent_k_expression	21      ;  General DCL expression.
$EQU	ent_k_test1	22              ;  Three hooks for testing
$EQU	ent_k_test2	23              ;  new data types before
$EQU	ent_k_test3	24              ;  adding them officially.
$EQU	ent_k_acl	25              ;  ACL spec.
$EQU	ent_k_max_valtype	25
$EQU	ent_k_length	30              ;  Length of fixed portion.
$EQU	ent_k_max_name	32              ;  Maximum sizes of variable
$EQU	ent_k_max_label	32              ;  portions.
$EQU	ent_k_max_prompt	32
$EQU	ent_k_max_defval	96
$EQU	ent_w_size	0               ;  All blocks have a standard
$EQU	ent_b_type	2               ;  header which is defined
$EQU	ent_b_subtype	3               ;  up above.
$EQU	ent_w_flags	4
$EQU	ent_v_val	0               ;  Can take a value.
$EQU	ent_v_neg	1               ;  Can be negated with "NO".
$EQU	ent_v_deftrue	2               ;  Present by default.
$EQU	ent_v_batdef	3               ;  Present by default if batch.
$EQU	ent_v_valreq	4               ;  A value is required.
$EQU	ent_v_list	5               ;  Can be a list of values.
$EQU	ent_v_concat	6               ;  Can be concatenated list.
$EQU	ent_v_impcat	7               ;  Implicit concantenated list
$EQU	ent_v_verb	8               ;  Global placement.
$EQU	ent_v_parm	9               ;  Local placement.
$EQU	ent_v_mcroptdelim	10      ;  MCR SET UIC kludge.
$EQU	ent_v_mcrignore	11              ;  MCR ignores this entity.
;  Both means positional.
;  (old CLI interface only).
$EQU	ent_w_tro_count	6
$EQU	ent_l_next	8               ;  TRO of next entity block
;  in chain.
$EQU	ent_l_syntax	12              ;  TRO of syntax change
;  command block.
$EQU	ent_l_user_type	16              ;  TRO of type block for
;  user-defined type.
$EQU	ent_b_number	20              ;  Entity number.  CLI should
;  only use for parameters.
$EQU	ent_b_valtype	21              ;  Value type.
$EQU	ent_w_name	22              ;  BRO of entity name.
$EQU	ent_w_label	24              ;  BRO of label used to
;  retrieve entity.
$EQU	ent_w_prompt	26              ;  BRO of parameter prompt.
$EQU	ent_w_defval	28              ;  BRO of default value(s).
$EQU	ent_z_VARIABLE	30              ;  Beginning of variable part.
;  The entity name, label, prompt, and default values appear after the fixed
;  portion of the entity block.  They are stored as ASCIC strings.  The
;  default values are stored as a sequence of ASCIC strings within the
;  overall ASCIC string.
; 	E X P R E S S I O N   B L O C K
; 	-------------------   ---------
;  An expression block is used to represent, within a boolean expression,
;  one operator and its operands.  The operands are themselves expression
;  blocks, either subexpressions or paths.  Paths represent the hierarchical
;  path to an entity whose presence is to be determined.
$EQU	exp_k_path	1               ;  Entity path.
$EQU	exp_k_not	2               ;  Boolean NOT operator.
$EQU	exp_k_any2	3               ;  Boolean ANY2 function.
$EQU	exp_k_and	4               ;  Boolean AND operator.
$EQU	exp_k_or	5               ;  Boolean OR operator.
$EQU	exp_k_xor	6               ;  Boolean XOR operator.
$EQU	exp_k_neg	7               ;  Boolean NEG operator.
$EQU	exp_k_length	8               ;  Length of fixed portion.
$EQU	exp_k_max_path_entities	8       ;  Maximum number of entities
;  in a path.
$EQU	exp_w_size	0               ;  All blocks have a standard
$EQU	exp_b_type	2               ;  header which is defined
$EQU	exp_b_subtype	3               ;  up above.
$EQU	exp_w_flags	4
$EQU	exp_w_tro_count	6
$EQU	exp_l_operand_list	8       ;  A TRO for each of the
;  operands or path entities.
	$DEFEND	$clitab,$GBL,DEF
	.ENDM
