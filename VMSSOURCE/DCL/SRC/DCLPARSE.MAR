	.TITLE	DCLPARSE - PARSE A DCL COMMAND
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
; AUTHOR: TIM HALVORSEN, NOV 1980
;
; MODIFIED BY:
;
;	V03-014 HWS0083		Harold Schultz	19-Jul-1984
;		Fix building of error message frame for LIB$SIGNAL.
;		In the event of a buffer overflow, signal CLI$_BUFOVF
;		instead of SS$_BUFFEROVF
;
;	V03-013	PCG0019		Peter George	08-Dec-1983
;		Fix bug in error message routine.
;
;	V03-012	PCG0018		Peter George	27-Jul-1983
;		Fill in WRK_L_SIGNALRTN.
;
;	V03-011	PCG0017		Peter George	15-Jun-1983
;		Return, do not signal, NOCOMD status.
;		Remove special code for negative statuses.
;
;	V03-010	PCG0016		Peter George	20-Apr-1983
;		Include command segment when signalling syntax errors.
;		Clear WRK_B_PARMSUM.
;
;	V03-009	PCG0015		Peter George	15-Feb-1983
;		Update to new structure level.
;
;	V03-008	PCG0014		Peter George	08-Jan-1983
;		Change .ASCID default prompt to .ASCIC.
;
;	V03-007	PCG0013		Peter George	27-Dec-1982
;		Fix accvio in referencing command descriptor.
;
;	V03-006	PCG0012		Peter George	14-Dec-1982
;		For compatibility, partially back off PCG0011.
;
;	V03-005	PCG0011		Peter George	02-Dec-1982
;		Command string is passed in by descriptor,
;		rather than address of descriptor.
;
;	V03-004	PCG0010		Peter George	16-Nov-1982
;		Get prompt string descriptor from INT instead
;		of just the address of the descriptor.
;		Use WRK_G_INPUF instead of WRK_G_DCLPRSBUF.
;
;	V03-003	PCG0009		Peter George	15-Nov-1982
;		Use STRTOOLNG instead of PMPTOOLNG.
;
;	V03-002	PCG0008		Peter George	15-Oct-1982
;		Get the PROBEs right this time.
;		Accept a prompt string as another argument.
;		Prompt for a command line if none is supplied.
;
;	V03-001	PCG0007		Peter George	15-Jul-1982
;		Add keyword parsing support.
;		Use INT data structure.
;		Add support for prompt and continuation routines.
;		Correct sense of branches after PROBEs.
;		Remove unneccessary macro library calls.
;
;--

;
; MACRO LIBRARY CALLS
;
 
	$$CLITABDEF			; DEFINE TABLE STRUCTURES
	$$INTDEF			; DEFINE INTERFACE FORMAT
	DCLDEF				; DEFINE CLINT OWN STORAGE AREA
	WRKDEF				; DEFINE COMMAND WORK AREA
	$SSDEF				; DEFINE SYSTEM MESSAGES
	$CLIMSGDEF			; DEFINE ERROR/STATUS VALUES
	$STSDEF				; DEFINE STATUS CODE FIELDS
	$PSLDEF				; DEFINE PROCESSOR STATUS FIELDS

CTRLZ	= 26				; CONTROL/Z CHARACTER

	.PSECT	DCL$ZCODE,BYTE,RD,NOWRT

DEFAULT_PROMPT:
	.ASCIC	/COMMAND> /

	.SBTTL	PARSE A DCL COMMAND
;+
; DCL$DCLPARSE - PARSE A DCL COMMAND STRING
;
; THIS ROUTINE PARSES A DCL COMMAND STRING GIVEN THE ADDRESS OF THE COMMAND
; TABLES WHICH DESCRIBE THE SYNTAX OF THE COMMAND SET.
;
; INPUTS:
;
;	4(AP) = ADDRESS OF REQUEST DESCRIPTOR 
;
; OUTPUTS:
;
;	NONE
;-

	.ENTRY	DCL$DCLPARSE,-
		^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>

	MOVAL	G^CTL$GL_DCLPRSOWN,R2	;GET ADDRESS OF WRK POINTER
	MOVL 	4(AP),R11		;GET ADDRESS OF REQUEST DESCRIPTOR

;
; IF NO COMMAND STRING IS SPECIFIED, AND WE ARE NOT PROMPTING, THEN 
; CAUSE ALL SUBSEQUENT INTERFACE REQUESTS TO REFER TO THE ALREADY PARSED 
; ORIGINAL COMMAND LINE.  
;
	TSTL	INT_L_ENTADDR(R11)	;COMMAND STRING SPECIFIED?
	BNEQ	20$			;YES, THEN BRANCH
	MOVL	INT_L_LIST(R11),R0	;ROUTINE LIST SPECIFIED?
	BEQL	10$			;NO, THEN BRANCH
	TSTL	INT_L_CONTINRTN(R0)	;CONTINUATION ROUTINE SPECIFIED?
	BNEQ	20$			;YES, THEN BRANCH
10$:	BRW	RESTORE_SUPER_MODE	;NO, RESTORE THE SUPERVISOR MODE COMMAND

;
; VALIDATE THE TABLE STRUCTURE.  IF OLD, SUPPORTED VERSION, THEN UPGRADE THEM
; BEHIND THE USER'S BACK.
;
20$:	PUSHL	INT_L_FREEVM(R11)	;PUSH ADDR OF LIB$FREE_VM ROUTINE
	PUSHL	INT_L_GETVM(R11)	;PUSH ADDR OF LIB$GET_VM ROUTINE
	PUSHAB	INT_L_TABLES(R11)	;PUSH PLACE TO RETURN CONVERTED ADDRESS
	PUSHL	INT_L_TABLES(R11)	;PUSH ADDRESS OF TABLES
	CALLS	#4,G^CDU$UPGRADE_TABLE	;VALIDATE AND POSSIBLY CONVERT TABLES
	BLBC	R0,35$			;SIGNAL ERROR AND EXIT

;
; IF NO USER MODE WRK BLOCK HAS BEEN ALLOCATED BEFORE, THEN ALLOCATE 
; AND INITIALIZE ONE NOW.
;
	MOVL	(R2),R10		;WRK BLOCK ALLOCATED?
	BEQL	30$			;NO, THEN BRANCH
	PROBEW	#PSL$C_USER,-		;USER WRITABLE?
		#-WRK_K_LENGTH,-	;
		WRK_K_LENGTH(R10)	;
	BNEQ	50$			;YES, THEN BRANCH

;
; ALLOCATE USER MODE WRK BLOCK
;
30$:	PUSHL	#-WRK_K_LENGTH		;LENGTH TO ALLOCATE
	PUSHL	SP			;PLACE TO RETURN ADDRESS
	PUSHAL	4(SP)			;ADDRESS OF LONGWORD CONTAINING LENGTH
	CALLS	#2,@INT_L_GETVM(R11)	;ALLOCATE DYNAMIC MEMORY
	BLBS	R0,40$			;BRANCH IF SUCCESS
35$:	BRW	EXIT			;EXIT IF ERROR
40$:	ADDL3	(SP)+,#-WRK_K_LENGTH,-	;COMPUTE ENDING ADDRESS WRK BLOCK
		(R2)			;
	MOVL	(R2),R10		;GET ADDRESS OF WRK BLOCK

;
; IF CLINT OWN STORAGE IS ALLOCATED, THEN FREE IT SO THAT SUBSEQUENT 
; INTERFACE REQUESTS CAUSE THE OWN STORAGE TO BE REINITIALIZED.
;
50$:	MOVAL	G^CTL$GL_CLINTOWN,R2	;GET ADDRESS OF CLINT OWN POINTER
	TSTL	(R2)			;CLINT OWN STORAGE ALLOCATED?
	BEQL	60$			;NO, THEN BRANCH
	BSBW	DEALLOC_OWN		;DEALLOCATE OWN STORAGE

;
; FILL IN WRK BLOCK FIELDS
;
60$:	MOVAB	WRK_G_BUFFER(R10),-	;SET ADDRESS OF EXPANSION BUFFER
		WRK_L_EXPANDPTR(R10) 	;
	MOVAB	WRK_G_RESULT(R10),-	;SET ADDRESS OF RESULT PARSE TABLE
		WRK_L_RSLNXT(R10) 	;
	CLRW	WRK_W_FLAGS(R10)	;RESET COMMAND FLAGS
	BISW	#WRK_M_USRMODE,-	;SET USER MODE PARSE FLAG
		WRK_W_FLAGS(R10)	;
	CLRB	WRK_B_VALLEV(R10)	;RESET VALUE LEVEL
	CLRB	WRK_B_PARMCNT(R10)	;RESET PARAMETER COUNT
	CLRB	WRK_B_PARMSUM(R10)	;RESET PARAMETER TOTAL
	CLRL	WRK_L_READRTN(R10)	;ASSUME NO CONTINUATION ROUTINE
	CLRL	WRK_L_PROMPTRTN(R10)	;ASSUME NO PROMPT ROUTINE
	CLRQ	WRK_W_PMPTLEN(R10)	;ASSUME NO PROMPT STRING
	CLRL	WRK_L_SPECRTN(R10)	;NO SPECIAL CHARACTER PROCESSING
	MOVAB	ERROR,-			;SET ADDRESS OF ERROR HANDLER
		WRK_L_ERRORRTN(R10) 	;
	MOVAB	ERRORMSG,-		;SET ADDRESS OF ERROR SIGNALER
		WRK_L_SIGNALRTN(R10) 	;
	MOVL	INT_L_LIST(R11),R0	;GET ADDRESS OF ROUTINE LIST
	BEQL	75$			;SKIP IF NONE
	MOVL	INT_L_CONTINRTN(R0),-	;GET CONTINUATION ROUTINE
		WRK_L_READRTN(R10)	;
	MOVL	INT_L_PROMPTRTN(R0),-	;GET PROMPT ROUTINE
		WRK_L_PROMPTRTN(R10)	;
	MOVQ	INT_W_PMPTLEN(R0),-	;GET PROMPT STRING
		WRK_W_PMPTLEN(R10)	;
	BNEQ	70$			;SKIP IF PRESENT
	MOVAB	DEFAULT_PROMPT,R1	;GET ADDRESS OF ASCIC DEFAULT PROMPT
	MOVZBL	(R1)+,R0		;GET LENGTH OF PROMPT
	MOVQ	R0,WRK_W_PMPTLEN(R10)	;GET DEFAULT PROMPT STRING

;
; IF COMMAND IS MISSING, THEN PROMPT FOR IT NOW
;
70$:	MOVL	#CLI$_STRTOOLNG,R0	;ASSUME THAT PROMPT IS TOO LONG
	CMPW	WRK_W_PMPTLEN(R10),-	;IS IT?
		#ENT_K_MAX_PROMPT	;
	BGTRU	200$			;YES, THEN EXIT
	TSTL	INT_L_ENTADDR(R11)	;IS COMMAND PRESENT?
	BNEQ	75$			;YES, THEN SKIP
	MOVL	WRK_L_READRTN(R10),R0	;GET PROMPT ROUTINE
	MOVAB	WRK_W_PMPTLEN(R10),R1	;GET PROMPT STRING
	BSBW	DCL$USER_INPUT		;GET THE COMMAND LINE	

;
; IF EOF WAS FOUND, THEN RETURN THAT STATUS.
;
	CMPL	#RMS$_EOF,R0		;END OF INPUT?
	BNEQ	80$			;NO, START PROCESSING THE COMMAND
	BSBW	DCL$GENEOL		;GENERATE EOL DESCRIPTOR
	RET				;EXIT

;
; COPY USER SUPPLIED INPUT STRING INTO SCRATCH AREA
;
75$:	MOVL	INT_L_ENTADDR(R11),R0	;GET ADDRESS OF COMMAND DESCRIPTOR
	CMPW	DSC$W_LENGTH(R0),-	;CHECK IF TOO BIG FOR INPUT BUFFER
		#WRK_C_INPBUFSIZ	;
	BGTRU	180$			;BRANCH IF STRING IS TOO BIG
	MOVAB	WRK_G_INPBUF-1(R10),-	;SET INPUT STRING POINTER
		WRK_L_CHARPTR(R10) 	;
	MOVC	DSC$W_LENGTH(R0),-	;COPY STRING INTO INPUT BUFFER
		@DSC$A_POINTER(R0),-	;
		WRK_G_INPBUF(R10) 	;
	CLRB	(R3)			;PUT NULL STOPPER AS END-OF-LINE

;
; GET FIRST TOKEN FROM COMMAND LINE
;
80$:	BSBW	DCL$MARK		;MARK CURRENT PARSE POSITION
	BSBW	DCL$GETOKEN		;GET COMMAND VERB
	BEQL	190$			;IF NONE, RETURN ERROR
	MOVL	INT_L_TABLES(R11),R8	;GET ADDRESS OF COMMAND TABLES
	BSBW	DCL$SEARCH_VERB		;SEARCH VERB TABLE FOR VERB
	BLBC	R0,200$			;BRANCH IF ERROR
	BRB	PARSE_VERB_QUALS

180$:	STATUS	BUFOVF			;INPUT STRING IS TOO BIG FOR BUFFER
	BRB	200$

190$:	STATUS	NOCOMD			;SET NO COMMAND STATUS
200$:	BSBW	DCL$GENEOL		;GENERATE EOL DESCRIPTOR
	BRB	EXIT			;EXIT WITH ERROR

;
; PROCESS COMMAND QUALIFIERS AND PARAMETERS
;
PARSE_VERB_QUALS:
	BSBW	DCL$PARSE_COMMAND	;PARSE THE REST OF THE COMMAND
	CMPL	R0,#CLI$_NOCOMD		;IF NOT CTRLZ-ED 
	BNEQ	10$			;THEN CHECK FOR ERRORS
	RET				;ELSE RETURN NO COMMAND STATUS
10$:	BLBC	R0,EXIT			;SIGNAL ANY ERRORS

NORMAL_EXIT:
	STATUS	NORMAL			;SET NORMAL STATUS

;
; SIGNAL ALL ERRORS.
;
EXIT:	BLBS	R0,90$
	BSBB	ERRORMSG
90$:	RET

;
; HANDLE ERRORS DETECTED BY THE CHARACTER INPUT ROUTINES
;
ERROR:	PUSHL	R0			;SAVE ERROR/STATUS VALUE
	CALLS	#1,G^LIB$SIGNAL		;SIGNAL THE ERROR
	RET				;RETURN TO CALLER

	.SBTTL	SIGNAL ERROR MESSAGE
;+
; ERRORMSG - SIGNAL ERROR MESSAGE
;
; THIS ROUTINE IS CALLED TO SIGNAL AN ERROR MESSAGE AND DISPLAY THE SEGMENT
; OF THE COMMAND LINE THAT IS IN ERROR.
;
; INPUTS:
;
;	R0 = ERROR NUMBER.
;	WRK_L_MARKPTR = ADDRESS OF START OF TOKEN IN EXPANSION BUFFER.
;	WRK_L_EXPANDPTR = ADDRESS OF NEXT BYTE IN EXPANSION BUFFER.
;	R10 = BASE ADDRESS OF COMMAND WORK AREA.
;	R11 = BASE ADDRESS OF PROCESS WORK AREA.
;
; OUTPUTS:
;
;	THE APPROPRIATE ERROR MESSAGE IS DISPLAYED ALONG WITH THE SEGMENT OF
;	THE COMMAND LINE IN ERROR.
;
;	R0 IS PRESERVED ACROSS CALL.
;-
 
ERRORMSG:				;OUTPUT ERROR MESSAGE
	PUSHR	#^M<R0,R1,R2,R3,R4,R5>	;SAVE REGISTERS

;
; Check if message should be suppressed.
;
	CMPL	R0,#CLI$_NOCOMD		;IS IT NOCOMD STATUS?
	BEQL	60$			;YES, DO NOT SIGNAL
	BBS	#STS$V_INHIB_MSG,R0,60$ ;BR IF NO MESSAGE DESIRED

;
; Check if offending text should be output as part of this error message.
;
	MOVL	#2,R5			;ASSUME NO COMMAND SET WILL BE OUTPUT
	CLRL	R4			;SET STACK USAGE
	BBS	#WRK_V_COMMAND,-	;DO NOT OUTPUT IF COMMAND IN EXECUTION
		WRK_W_FLAGS(R10),40$ 	;
	BSBW	DCL$MARKEDTOKEN		;GET DESCRIPTOR OF CURRENT PARSE STRING
	TSTB	(R2)			;DOES TOKEN START WITH EOL CHAR?
	BEQL	40$			;IF SO, ASSUME AT EOL AND SKIP TEXT
	TSTL	R1			;WILL ANY TOKEN BE SHOWN?
	BEQL	40$			;IF NOT, SKIP TEXT

;
; Build the command line part of the message argument vector.
;
30$:	MOVQ	R1,-(SP)		;PUSH SEGMENT DESCRIPTOR ON STACK
	PUSHL	SP			;PUSH ADDRESS OF SEGMENT DESCRIPTOR
	MOVW	#^X0011,-(SP)		;ONLY OUTPUT THE TEXT PART
	MOVW	#1,-(SP)		;ONE FAO ARGUMENT
	PUSHL	#CLI$_CMDSEG		;PUSH MESSAGE CODE
	MOVL	#5,R5			;SET ARGUMENT COUNT
	MOVL	#2*4,R4			;SET STACK USAGE

;
; Build the status part of the message argument vector.
;
40$:	PUSHL	#0			;SET FAO COUNT
	PUSHL	R0			;SET STATUS CODE
	CALLS	R5,G^LIB$SIGNAL		;SIGNAL THE ERROR
60$:	ADDL	R4,SP			;POP EVERYTHING UP TO BUFFER AND DESC.
70$:	POPR	#^M<R0,R1,R2,R3,R4,R5>	;RESTORE REGISTERS
	RSB				;

	.SBTTL	RESTORE SUPERVISOR MODE DATA STRUCTURES
;+
; RESTORE_SUPER_MODE - RESTORE SUPERVISOR MODE DATA STRUCTURES
;
; CAUSE ALL SUBSEQUENT INTERFACE REQUESTS TO REFER TO THE ALREADY 
; PARSED ORIGINAL COMMAND LINE.  THIS IS DONE BY DEALLOCATING THE 
; USER MODE WRK BLOCK, DEALLOCATING THE CLINT OWN STORAGE, AND ZEROING 
; THE POINTERS TO BOTH OF THESE AREAS, CAUSING THE INTERFACE ROUTINES
; TO BE REINITIALIZED WITH THE THE SUPERVISOR MODE WRK BLOCK.
;
;	R2 =	ADDRESS OF CURRENT WRK DATA STRUCTURE
;
;-

RESTORE_SUPER_MODE:
	MOVL	(R2),R10		;WRK BLOCK ALLOCATED?
	BEQL	5$			;NO, THEN BRANCH
	BSBW	DEALLOC_WRK		;YES, DEALLOCATE THE WRK BLOCK

;
; IF CLINT OWN STORAGE IS ALLOCATED, THEN FREE IT SO THAT SUBSEQUENT 
; INTERFACE REQUESTS CAUSE THE OWN STORAGE TO BE REINITIALIZED.
;
5$:	MOVAL	G^CTL$GL_CLINTOWN,R2	;GET ADDRESS OF CLINT OWN POINTER
	TSTL	(R2)			;CLINT OWN STORAGE ALLOCATED?
	BEQL	10$			;NO, THEN BRANCH
	BSBW	DEALLOC_OWN		;DEALLOCATE OWN STORAGE
10$:	STATUS	NORMAL			;RETURN SUCCESSFUL
	RET

	.SBTTL	DEALLOCATE USER MODE WRK DATA STRUCTURE
;+
; DEALLOC_WRK - DEALLOCATE USER MODE WRK DATA STRUCTURE
;
; DEALLOCATE USER MODE WRK BLOCK.  IF SUPERVISOR MODE, THEN JUST ZERO
; THE POINTER.
;
; 	R2 = 			ADDRESS OF CTL$GL_DCLPRSOWN
;	R10 =			ADDRESS OF WRK BLOCK
;	INT_L_FREEVM(R11) =	ADDRESS OF LIB$FREE_VM ROUTINE
;
;-

DEALLOC_WRK:
	PROBEW	#PSL$C_USER,-		;USER WRITABLE?
		#-WRK_K_LENGTH,-	;
		WRK_K_LENGTH(R10)	;
	BEQL	10$			;NO, THEN BRANCH
					;YES, THEN DEALLOCATE
	PUSHL	#-WRK_K_LENGTH		;LENGTH OF LOCAL WRK BLOCK
	PUSHL	R2			;ADDRESS OF LONGWORD CONTAINING ADDRESS
	PUSHAL	4(SP)			;ADDRESS OF WORD CONTAINING LENGTH
	CALLS	#2,@INT_L_FREEVM(R11)	;DEALLOCATE WRK BLOCK
	ADDL	#4,SP			;RESTORE THE STACK	
10$:	CLRL	(R2)			;INDICATE BLOCK NO LONGER EXISTS
	RSB

	.SBTTL	DEALLOCATE CLINT OWN STORAGE
;+
; DEALLOC_OWN - DEALLOCATE CLINT OWN STORAGE
;
; DEALLOCATE CLINT OWN STORAGE.
;
; 	R2 = 			ADDRESS OF CLINT OWN STORAGE
;	INT_L_FREEVM(R11) =	ADDRESS OF LIB$FREE_VM ROUTINE
;
;-

DEALLOC_OWN:
	PUSHL	#DCL_C_SIZE		;LENGTH OF CLINT OWN STORAGE
	PUSHL	R2			;ADDRESS OF LONGWORD CONTAINING ADDRESS
	PUSHAL	4(SP)			;ADDRESS OF WORD CONTAINING LENGTH
	CALLS	#2,@INT_L_FREEVM(R11)	;DEALLOCATE CLINT OWN STORAGE
	ADDL	#4,SP			;RESTORE THE STACK	
	CLRL	(R2)			;INDICATE STORAGE NO LONGER EXISTS
	RSB

	.SBTTL	GET INPUT FROM THE USER
;+
; DCL$USER_INPUT - GET INPUT FROM THE USER
;
; THIS ROUTINE CALLS A USER-SUPPLIED INPUT ROUTINE WITH A PROMPT TO GET
; ADDITIONAL COMMAND INFORMATION FROM THE USER.
;
; THE FORMAT OF THE CALL IS:
;
;	P1 =	ADDRESS OF RETURN DESCRIPTOR
;	P2 = 	ADDRESS OF PROMPT DESCRIPTOR
;	P3 = 	ADDRESS OF WORD TO RECEIVE THE RETURN LENGTH
;
; INPUTS:
;
;	R0 =	ADDRESS OF USER INPUT ROUTINE
;	R1 = 	ADDRESS OF PROMPT STRING DESCRIPTOR
;	R10 =	ADDRESS OF COMMAND DATA STRUCTURE
;
; OUTPUTS:
;
;	R0 =	STATUS OF THE READ
;-

DCL$USER_INPUT::
	MOVQ	R4,-(SP)		;SAVE R4 AND R5
	MOVQ	R2,-(SP)		;SAVE R2 AND R3
	SUBL	#ENT_K_MAX_PROMPT+1,SP	;ALLOCATE PROMPT BUFFER
	MOVL	R0,R5			;SAVE ROUTINE ADDR

;
; IF A PROMPT WAS SUPPLIED, THEN PUSH ITS DESCRIPTOR ON THE STACK.
;
	TSTL	R1			;WAS A PROMPT SUPPLIED?
	BEQL	10$			;NO, THEN CREATE ONE
	MOVQ	(R1),-(SP)		;PUSH DESCRIPTOR OF PROMPT STRING
	BRB	20$			;ISSUE THE PROMPT

;
; IF NO PROMPT WAS SUPPLIED, THEN BUILD A CONTINUATION PROMPT ON THE STACK.
;
10$:	MOVB	#^A/_/,(SP)		;INSERT AN UNDERSCORE
	PUSHL	SP			;PUSH PROMPT BUFFER ADDRESS
	MOVL	#1,-(SP)		;INIT PROMPT LENGTH
	ADDW	WRK_W_PMPTLEN(R10),(SP)	;SET PROMPT BUFFER LENGTH
	PUSHL	R5			;SAVE ROUTINE ADDRESS
	MOVC3	WRK_W_PMPTLEN(R10),-	;COPY IT INTO THE PROMPT BUFFER
		@WRK_L_PMPTADDR(R10),-	;
		13(SP)			;
	POPL	R5			;RESTORE ROUTINE ADDRESS

;
; SET UP PROMPT PARAMETERS AND THEN ISSUE THE PROMPT.
;
20$:	MOVAB	WRK_G_INPBUF-2(R10),-	;GET ADDRESS OF INPUT STRING
		R2 			;
	MOVAB	-1(R2),-		;RESET THE CHARACTER POINTER
		WRK_L_CHARPTR(R10) 	;
	PUSHL	R2			;PUSH ADDRESS OF INPUT BUFFER
	MOVZWL	#WRK_C_INPBUFSIZ,-(SP)	;PUSH SIZE OF INPUT BUFFER

	PUSHAL	(SP)			;PUSH ADDRESS OF RETURN LENGTH
	PUSHAL	12(SP)			;PUSH ADDRESS OF PROMPT STRING DESC
	PUSHAL	8(SP)			;PUSH ADDRESS OF RETURN DESC
	CALLS	#3,(R5) 		;GET THE INPUT
	POPL	R3			;GET INPUT SIZE
	POPL	R2			;GET INPUT ADDRESS
	BLBC	R0,90$			;SIGNAL ANY ERROR

;
; INSERT AN EOL MARKER
;
	CLRB	(R2)[R3]		;INSERT EOL CHARACTER

;
; IF THE RECORD IS A FULL LINE COMMENT, REPROMPT NOW
;
	CMPB	#^A/!/,(R2)		;IS FIRST CHAR AN EXCLAMATION MARK?
	BEQL	20$			;REPROMPT IF SO

;
; IF THE PREVIOUS RECORD ENDED WITH TRAILING SPACES OR TABS,
; INSERT A SPACE AT THE FRONT OF THE CURRENT INPUT RECORD SO
; THAT PARAMETERS ARE DELIMITED PROPERLY.
;
	BBCC	#WRK_V_TRAILSPC,-	;IF CLR, NO TRAILING SPACE SEEN
		WRK_W_FLAGS(R10),80$ 	;
	MOVB	#^A/ /,R0		;SET SPACE CHARACTER
	BSBW	DCL$BACKUPCHAR		;APPEND TO FRONT OF INPUT BUFFER

;
; EXIT FROM INPUT ROUTINE
;
80$:	MOVL	#1,R0			;RETURN SUCCESS
90$:	ADDL	#ENT_K_MAX_PROMPT+1+8,SP;RESTORE THE STACK
	MOVQ	(SP)+,R2		;RESTORE REGISTERS
	MOVQ	(SP)+,R4		;
	BLBS	R0,100$			;SKIP IF SUCCESS
	CMPW	R0,#RMS$_EOF&^XFFFF	;EOF STATUS?
	BEQL	110$			;YES, RETURN GENERIC EOF
	JSB	@WRK_L_ERRORRTN(R10)	;CALL ERROR HANDLER
100$:	RSB

110$:	MOVL	#RMS$_EOF,R0		;RETURN GENERIC EOF
	RSB

	.END
