	.NOSHOW	CONDITIONALS
	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
	.TITLE	LIOSUB780 - LOADABLE I/O SUBROUTINES
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	.TITLE	LIOSUB750 - LOADABLE I/O SUBROUTINES
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
	.TITLE	LIOSUB730 - LOADABLE I/O SUBROUTINES
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
	.TITLE	LIOSUB790 - LOADABLE I/O SUBROUTINES
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
	.TITLE	LIOSUBUV1 - LOADABLE I/O SUBROUTINES
	.ENDC

	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:
;
;	EXECUTIVE, I/O CONTROL ROUTINES
;
; ABSTRACT:
;
; I/O SUBROUTINES WHICH CONTAIN PROCESSOR DEPENDENCIES.
;
; AUTHOR:
;
;	N. KRONENBERG, JANUARY 12, 1979.
;
; MODIFIED BY:
;
;	V03-012	KDM0096		Kathleen D. Morse	27-Mar-1984
;		Add memory CSR scanning to IOC$PURGDATAP for MicroVAX I.
;		(All DMA MicroVAX I drivers should call this routine, just
;		before calling IOC$REQCOM.)
;
;	V03-011	KDM0081		Kathleen D. Morse	13-Sep-1983
;		Create a version for Micro-VAX I.
;
;	V03-010	TCM0004		Trudy C. Matthews	4-Jan-1982
;		Added 11/790-specific path to IOC$PURGDATAP.
;
;	V09	TCM0003		Trudy C. Matthews	9-Nov-1982
;		Added a .TITLE statement for LIOSUB790.
;
;	V08	TCM0002		Trudy C. Mathews	29-Jul-1981
;		Changed all "7ZZ"s to "730"s.
;
;	V07	TCM0001		Trudy C Matthews	28-Feb-1980
;		Changed IOC$PURGDATAP for NEBULA so that it logs
;		the Unibus Error Summary register itself when there
;		are Unibus errors reported.
;
;	V06	NPK0002		N. KRONENBERG		4-DEC-1979
;		REPLACED IOC$PURGDATAP FOR NEBULA
;
;	V05	NPK0001		N. KRONENBERG		23-AUG-1979
;		CORRECTED 11/750 CHECK FOR PURGE DONE.
;
;	V04	TCM0001		Trudy C. Matthews	3-Jul-1979
;	Modified IOC$PURGDATAP for NEBULA.
;
;--

;
; MACRO LIBRARY CALLS:
;
	$ADPDEF				; Define ADP offsets
	$CRBDEF				; Define CRB offsets
	$EMBETDEF			; Define error types.
	$EMBUEDEF			; Define Unibus Error buffer.
	$IDBDEF				; Define IDB offsets
	$PRDEF				; Define IPR'S
	$UBADEF				; Define UBA offsets
	$UBIDEF				; Define UBI offsets
	$UCBDEF				; Define UCB offsets
	$VECDEF				; Define CRB/VEC offsets

	.IF	EQ,CPU_TYPE-PR$_SID_TYP780
	C780_LIKE = 1
	C750_LIKE = 0
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP750
	C780_LIKE = 0
	C750_LIKE = 1
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
	C780_LIKE = 0
	C750_LIKE = 1
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP790
	C780_LIKE = 1
	C750_LIKE = 0
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
	C780_LIKE = 0
	C750_LIKE = 1
	.ENDC


	.SBTTL	PURGE DATAPATH
;+
; IOC$PURGDATAP - PURGE DATAPATH
;
; This routine purges the caller's buffered datapath, and clears any
; datapath errors.  if there was a datapath error, this fact is 
; returned to the caller.
;
; INPUTS:
;
;	R5 = UCB address
;
; OUTPUTS:
;
;	R0-R3 altered
;	Other registers preserved
;	R0 = low bit clear/set if transmission error/success
;	R1 = DPR contents after purge (for register dump by caller)
;	R2 = address of start of adapter map registers (for reg dump by caller)
;	R3 = CRB address
;-

	.PSECT	WIONONPAGED

	.ENABL	LSB

IOC$PURGDATAP::				;
	.IF	NE,C780_LIKE		; VAX 11/780 AND 11/790:
	PUSHR	#^M<R4>			; Save register
	MOVL	UCB$L_CRB(R5),R3	; Get CRB address
	MOVL	@CRB$L_INTD+VEC$L_ADP(R3),R2 ; Get start of adapter register space

	EXTZV	#VEC$V_DATAPATH,-	; Extract datapath #
		#VEC$S_DATAPATH,-	;  from CRB
		CRB$L_INTD+VEC$B_DATAPATH(R3),R1
	MOVAL	UBA$L_DPR(R2)[R1],R4	; Get address of DPR
	ASHL	#UBA$V_DPR_BNE,#1,(R4)	; Purge datapath
	MOVL	(R4),R1			; Get DPR contents
	BBC	#UBA$V_DPR_XMTER,R1,20$	; Branch if no error
	ASHL	#UBA$V_DPR_XMTER,#1,(R4) ; Clear error in DPR
	CLRL	R0			; Set to return transfer error
	BRB	30$			; Join common code
20$:	MOVZBL	#1,R0			; Set to return transfer success
30$:	MOVAL	UBA$L_MAP(R2),R2	; Return addr of 1st map register

	POPR	#^M<R4>			; Restore register
	RSB				; Return
	.ENDC				;END OF "NOT" C780_LIKE CONDITIONAL


	.IF	EQ,CPU_TYPE-PR$_SID_TYP750 ;VAX 11/750:
	PUSHR	#^M<R4>			; Save register
	MOVL	UCB$L_CRB(R5),R3	; Get CRB address
	MOVL	@CRB$L_INTD+VEC$L_ADP(R3),R2 ; Get start of adapter register space

	EXTZV	#VEC$V_DATAPATH,-	; Extract datapath #
		#VEC$S_DATAPATH,-	;  from CRB
		CRB$L_INTD+VEC$B_DATAPATH(R3),R1
	MOVAL	UBI$L_DPR(R2)[R1],R4	; Get address of DPR
	ASHL	#UBI$V_DPR_PUR,#1,(R4)	; Purge datapath
	MOVL	#UBI$C_PURCNT,R0	; Get max # of tries for
					;  purge done test
10$:	MOVL	(R4),R1			; Get DPR contents
	BBC	#UBI$V_DPR_PUR,R1,15$	; Branch if purge done
	SOBGTR	R0,10$			; Branch if more tries allowed
	BUG_CHECK BDPPURGERR,FATAL	; else, fatal error (purge state
					;  stuck on)
15$:	BBC	#UBI$V_DPR_ERROR,R1,20$	; Branch if no error
	MCOML	#0,(R4)			; Clear DPR error(s)
	CLRL	R0			; Set to return transfer error
	BRB	30$			; Join common code
20$:	MOVZBL	#1,R0			; Set to return transfer success
30$:	MOVAL	UBI$L_MAP(R2),R2	; Return address of 1st map register

	POPR	#^M<R4>			; Restore register
	RSB				; Return
	.ENDC

	.IF	EQ,CPU_TYPE-PR$_SID_TYP730
;
; The VAX 11/730 has no real datapath registers, so no actual
; purge is done.  The 11/730 maintains a shared UNIBUS error
; register, which is checked here.  if an error is shown
; in the shared error register, it is logged as a UNIBUS error.
; note, however, that since the error register is shared, the error
; could possibly belong to another device doing a transfer
; concurrently.  the error will show up twice in the errorlog; once
; as a UNIBUS error and once as an NXM in a device register for the
; device that really had the error.
;

	PUSHR	#^M<R4>			; Save register
	MOVL	UCB$L_CRB(R5),R3	; Get CRB address
	MOVL	@CRB$L_INTD+VEC$L_ADP(R3),R2 ; Get start of adapter register space

	EXTZV	#VEC$V_DATAPATH,-	; Extract datapath #
		#VEC$S_DATAPATH,-	;  from CRB
		CRB$L_INTD+VEC$B_DATAPATH(R3),R1
	MOVL	UBI$L_SR(R2),R4		; Get Unibus Error Summary reg.
	BITL	#<UBI$M_SR_UWE!-	; Any UB errors? (write error,
		UBI$M_SR_MRPE!-		;	map parity error,
		UBI$M_SR_NXM!-		;	non-existent memory,
		UBI$M_SR_UCE>,R4	; or uncorrected read error.)
	BEQL	30$			; Branch if no errors.
;
; The shared Unibus error register indicates an error.  Log it.
;
	PUSHL	R2			; Save addr of adaptor reg space
	MOVZBL	#EMB$C_UE_LENGTH,R1	; Set length of error buffer.
	JSB	G^ERL$ALLOCEMB		; Get a message buffer.
	BLBC	R0,20$			; Branch if unsuccessful.
	MOVL	R4,EMB$L_UE_UBERR(R2)	; Put error register in buffer.
	MOVZBL	#EMB$C_UE, -		; Set entry type in buffer.
		EMB$W_UE_ENTRY(R2)	;
	JSB	G^ERL$RELEASEMB		; Release buffer to errorlogger.
20$:	POPR	#^M<R2>			; Restore addr of adaptor regs.
;
; Set up outputs from PURGDATAP.
;
30$:	MOVL	#1,R0			; Set success always.
	CLRL	R1			; No DPR contents.
	MOVAL	UBI$L_MAP(R2),R2	; Return addr of 1st map reg.

	POPR	#^M<R4>			; Restore register
	RSB				; Return
	.ENDC				;END 730 CONDITIONAL

	.IF	EQ,CPU_TYPE-PR$_SID_TYPUV1
;
; The Micro-VAX I has no real datapath registers, so no actual
; purge is done.  
;
; However, every DMA driver for MicroVAX I must call this routine
; just before calling IOC$REQCOM.  This is to cause the memory CSRs
; to be logged if a parity error occurred.  If this routine is not
; called by the driver, then the error log will probably not contain
; enough information to identify which memory controller took the error.
;
	MOVAL	G^EXE$AL_MEMCSRS,R1	; Get address of memory CSR array.
	MOVL	(R1)+,R0		; Get count of memory CSRs.
10$:	BITW	#8000,@(R1)		; Is parity error bit set in CSR?
	BNEQ	30$			; Br if parity error occurred, go log it
	ADDL	#4,R1			; Get VA of next memory controller CSR.
	SOBGTR	R0,10$			; Loop through all CSRs on system.

20$:	MOVL	UCB$L_CRB(R5),R3	; Get CRB address
	MOVL	@CRB$L_INTD+VEC$L_ADP(R3),R2 ; Get start of adapter register space
	MOVAL	UBI$L_MAP(R2),R2	; Return addr of 1st map reg.
	CLRL	R1			; No DPR contents.
	MOVL	#1,R0			; Set success always.
	RSB				; Return

30$:					; Memory parity error occurred.
	MOVQ	R4,-(SP)		; Save R4/R5.  R0-R3 wiped out.
	MOVZWL	#EMB$K_SE,R3		; Set indicator to scan for errors.
	JSB	G^EXE$LOGMEM		; Log the memory error and bugcheck
	MOVQ	(SP)+,R4		;  if necessary to maintain system
					;  or data integrity.
	BRB	20$			; Join common code.
	.ENDC				;END UV1 CONDITIONAL

	.DSABL	LSB

	.END
