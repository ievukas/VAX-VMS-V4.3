MODULE PAS$CLOSE2 ( %TITLE 'Close a file'
		IDENT = '1-006'		! File: PASCLOSE2.B32 Edit: SBL1006
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	Pascal Language Support
!
! ABSTRACT:
!
!	This module contains PAS$CLOSE2 and PAS$$CLOSE, which close a file.
!
! ENVIRONMENT:	User mode - AST reentrant
!
! AUTHOR: Steven B. Lionel, CREATION DATE: 1-April-1981
!
! MODIFIED BY:
!
! 1-001	- Original.  SBL 1-April-1981
! 1-002 - Give error in PAS$CLOSE2 if FCB is not valid.   SBL 21-June-1982
! 1-003 - Correct erroneous error check in PAS$$CLOSE.  SBL 9-July-1982
! 1-004 - Make sure XAB chain doesn't point to garbage.  SBL 29-July-1982
! 1-005 - Zero FCB$L_STATUS before closing file.  QAR FT3-2.  SBL 30-Aug-1982
! 1-006 - Use PAS$$AB_KEYWD_NAME_TABLE to detect duplicate keywords.
!	  SBL 19-Aug-1983
!--


%SBTTL 'Declarations'
!
! PROLOGUE DEFINITIONS:
!

REQUIRE 'RTLIN:PASPROLOG';			! Linkages, externals, PSECTs, structures

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
   PAS$CLOSE2: NOVALUE,			! Called by compiled code
   PAS$$CLOSE: NOVALUE;			! Called internally by RTL

!
! MACROS:
!
!	NONE
!
! EQUATED SYMBOLS:
!
!	NONE
!
! FIELDS:
!
!	NONE
!
! OWN STORAGE:
!
!	NONE

%SBTTL 'PAS$CLOSE2 - Close a file'
GLOBAL ROUTINE PAS$CLOSE2 (			! Close a file
	PFV: REF $PAS$PFV_FILE_VARIABLE, 	! File variable
	KEYWORDS: VECTOR [, LONG]		! Keywords and specifiers
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This routine closes a Pascal file.  This entry is called from the
!	compiled code for the CLOSE procedure.
!
! CALLING SEQUENCE:
!
!	CALL PAS$CLOSE2 (PFV.mr.r [, keyword.rz.v [, keyword.rz.v ...]])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.REQ.
!
!	keyword		- Zero or more values representing keywords in the
!			  CLOSE procedure.  Some keywords are followed by
!			  associated arguments and values.  See PASOPEKEY.REQ
!			  for the keyword value definitions.
!
!			  If the keyword ERROR is specified, it must be first
!			  in the list, otherwise it will be ignored.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: (or ROUTINE VALUE:)
!
!	NONE
!
! SIDE EFFECTS:
!
!	See PAS$$CLOSE
!
! SIGNALLED ERRORS:
!
!	FILALRCLO - file already closed
!
!--

    BEGIN

    LOCAL
	FCB: REF $PAS$FCB_CONTROL_BLOCK,	! File Control Block
	PFV_ADDR: VOLATILE,			! Enable argument
	UNWIND_ACT: VOLATILE,			! Enable argument
	ERROR_ADDR: VOLATILE;			! Enable argument

    BUILTIN
	ACTUALCOUNT,
	AP,
	CALLG;

    ENABLE
	PAS$$IO_HANDLER (PFV_ADDR, UNWIND_ACT, ERROR_ADDR);

    !+
    ! Set PFV_ADDR enable argument.
    !-

    PFV_ADDR = PFV [PFV$R_PFV];

    !+
    ! Validate and lock PFV.
    !-

    PAS$$VALIDATE_PFV (PFV [PFV$R_PFV]; FCB);

    !+
    ! Set unwind action to unlock file.
    !-

    UNWIND_ACT = PAS$K_UNWIND_UNLOCK;

    !+
    ! If ERROR is present, it is the first keyword in the list.  See
    ! if that is true.  If so, set enable argument to the return address.
    !-

    IF ACTUALCOUNT () GEQU 3	! At least 3 needed for PFV, keyword, value
    THEN
	IF .KEYWORDS [0] EQL PAS$K_ERROR	! Is it the ERROR keyword?
	THEN
	    ERROR_ADDR = .KEYWORDS [1];

    !+
    ! If file variable is not valid, call PAS$$OPEN_IMPLICIT to see if the
    ! file should be implicitly opened.  Even though we will just close it
    ! again, we must do this to satisfy the language semantics for INPUT
    ! and OUTPUT.
    !-

    IF NOT .PFV [PFV$V_VALID]
    THEN
	PAS$$OPEN_IMPLICIT (PFV [PFV$R_PFV], FCB [FCB$R_FCB]; FCB);

    !+
    ! If FCB pointer is not valid, give an error.
    !-

    IF NOT .PFV [PFV$V_FCB_VALID]
    THEN
	$PAS$IO_ERROR (PAS$_FILALRCLO,0);

    !+
    ! Zero the STATUS value in the FCB.  This will get stored in the
    ! PFV by PAS$$REMOVE_FILE.
    !-

    FCB = .PFV [PFV$A_FCB];
    FCB [FCB$L_STATUS] = 0;

    !+
    ! Call PAS$$CLOSE to do the work.
    !-

    CALLG (.AP, PAS$$CLOSE);

    !+
    ! Remove it from the list of open files.
    !-

    PAS$$REMOVE_FILE (FCB [FCB$R_FCB]);

    !+
    ! Unlock the file variable.
    !-

    PFV [PFV$V_LOCK] = 0;

    RETURN;

    END;					! End of routine PAS$CLOSE2

!<BLF/PAGE>

%SBTTL 'PAS$$CLOSE - Close a file'
GLOBAL ROUTINE PAS$$CLOSE (			! Close a file
	IN_PFV: REF $PAS$PFV_FILE_VARIABLE, 	! File variable
	KEYWORDS: VECTOR [, LONG]		! Keywords and specifiers
    ): NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	This procedure closes the Pascal file specified by "PFV"
!	using the attributes possibly supplied as "keyword".  PAS$$CLOSE
!	is to be called from other RTL routines only after they have tested
!	and set PFV$V_LOCK in "PFV".
!
! CALLING SEQUENCE:
!
!	PAS$$CLOSE (PFV.mr.r [, keyword.rz.v [, keyword.rz.v ...]])
!
! FORMAL PARAMETERS:
!
!	PFV		- The Pascal File Variable (PFV) passed by reference.
!			  The structure of the PFV is defined in PASPFV.MDL.
!
!	keyword		- Zero or more values representing keywords in the
!			  CLOSE procedure.  Some keywords are followed by
!			  associated arguments and values.  See PASOPNKEY.MDL
!			  for the keyword value definitions.
!
! IMPLICIT INPUTS:
!
!	The PFV$V_LOCK bit is assumed to have been tested-and-set by the caller.
!	The PFV$V_FCB_VALID bit is assumed set.
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! COMPLETION STATUS: 
!
!	NONE
!
! SIDE EFFECTS:
!
!	The file is closed.  The record buffer and resultant name string
!	are deallocated.
!
! SIGNALLED ERRORS:
!
!	ERRDURCLO - error during CLOSE
!	INVARGPAS - invalid argument to Pascal Run-Time Library
!	FILNAMREQ - file name required to save, submit or print file
!
!--

    BEGIN

    LOCAL
	PFV: REF $PAS$PFV_FILE_VARIABLE,	! Pascal File Variable
	FCB: REF $PAS$FCB_CONTROL_BLOCK,	! File control block
	BLOCK_ADDR: VOLATILE,			! Address of dynamically allocated block
	STATUS,					! Status from $CLOSE
	KEYWORDS_SEEN: BITVECTOR [PAS$K_OPEKEYHI+1],
						! Keep track of keywords seen
	USER_ACTION_BPV: REF VECTOR [, LONG];	! USER_ACTION routine BPV

    BUILTIN
	TESTBITCS,
	TESTBITSC,
	ACTUALCOUNT;

    BIND
   	RAB = FCB: REF BLOCK [, BYTE],
	FAB = FCB: REF $PAS$FAB_FCB_STRUCT;

    !+
    ! Get PFV address.
    !-

    PFV = .IN_PFV;

    !+
    ! Get addresses of PFV.
    !-

    FCB = .PFV [PFV$A_FCB];

    !+
    ! Do the keyword processing.
    !-

    KEYWORDS_SEEN <0,32> = 0;	! Indicate no keywords seen
    KEYWORDS_SEEN <32,PAS$K_OPEKEYHI+-31> = 0;

    
    !+
    ! Look through keyword list and set all specified attributes.
    !-

    INCR I FROM 0 TO (ACTUALCOUNT () - 2) DO
	BEGIN

	LOCAL
	    KEYWD_VALUE;

	!+
	! Check for valid keyword code.  If not already seen, use the
	! keyword.
	!-

	KEYWD_VALUE = .KEYWORDS [.I];
	IF .KEYWD_VALUE LSS PAS$K_OPEKEYLO OR .KEYWD_VALUE GTR PAS$K_OPEKEYHI
	THEN
	    $PAS$IO_ERROR (PAS$_INVARGPAS,0);

	IF TESTBITCS (KEYWORDS_SEEN [.PAS$$AB_KEYWD_NAME_TABLE[.KEYWD_VALUE]])
	THEN
	    CASE .KEYWD_VALUE FROM PAS$K_OPEKEYLO TO PAS$K_OPEKEYHI OF
		SET
    
		[PAS$K_DISPOSITION_SAVE]:
		    BEGIN
		    FCB [FCB$V_DELETE] = 0;
		    FCB [FCB$V_PRINT] = 0;
		    FCB [FCB$V_SUBMIT] = 0;
		    FCB [FCB$V_SAVE] = 1;
		    END;
    
		[PAS$K_DISPOSITION_DELETE]:
		    BEGIN
		    FCB [FCB$V_PRINT] = 0;
		    FCB [FCB$V_SUBMIT] = 0;
		    FCB [FCB$V_SAVE] = 0;
		    FCB [FCB$V_DELETE] = 1;
		    END;
    
		[PAS$K_DISPOSITION_PRINT]:
		    BEGIN
		    FCB [FCB$V_DELETE] = 0;
		    FCB [FCB$V_SUBMIT] = 0;
		    FCB [FCB$V_SAVE] = 1;
		    FCB [FCB$V_PRINT] = 1;
		    END;
    
		[PAS$K_DISPOSITION_PRINT_DELETE]:
		    BEGIN
		    FCB [FCB$V_SUBMIT] = 0;
		    FCB [FCB$V_SAVE] = 0;
		    FCB [FCB$V_PRINT] = 1;
		    FCB [FCB$V_DELETE] = 1;
		    END;
    
		[PAS$K_DISPOSITION_SUBMIT]:
		    BEGIN
		    FCB [FCB$V_PRINT] = 0;
		    FCB [FCB$V_DELETE] = 0;
		    FCB [FCB$V_SUBMIT] = 1;
		    FCB [FCB$V_SAVE] = 1;
		    END;
    
		[PAS$K_DISPOSITION_SUBMIT_DELETE]:
		    BEGIN
		    FCB [FCB$V_PRINT] = 0;
		    FCB [FCB$V_SAVE] = 0;
		    FCB [FCB$V_SUBMIT] = 1;
		    FCB [FCB$V_DELETE] = 1;
		    END;
    
		[PAS$K_USER_ACTION]:
		    BEGIN
		    USER_ACTION_BPV = .KEYWORDS [(I=.I+1)];
		    END;
    
		[PAS$K_ERROR]:
		    BEGIN
		    !+
		    ! The ERROR parameter, if specified, was already processed
		    ! in PAS$CLOSE, so just ignore it here.
		    !-
		    I = .I + 1;	! Ignore next parameter
		    END;
    
		[INRANGE,OUTRANGE]:
		    $PAS$IO_ERROR (PAS$_INVARGPAS,0);

		TES;

	END;

    !+
    ! Check for incompatible DISPOSITION.
    !-

    IF .FAB [FAB$V_TMD] AND
	(.FCB [FCB$V_SAVE] OR .FCB [FCB$V_SUBMIT] OR .FCB [FCB$V_PRINT])
    THEN
	$PAS$IO_ERROR (PAS$_FILNAMREQ,0);	! File name required

    !+
    ! Fill in fields in RMS control blocks
    !-

    IF .FCB [FCB$V_DELETE] AND NOT .FAB [FAB$V_TMD]
    THEN
	FAB [FAB$V_DLT] = 1;

    IF .FCB [FCB$V_SUBMIT]
    THEN
	FAB [FAB$V_SCF] = 1;

    IF .FCB [FCB$V_PRINT]
    THEN
	FAB [FAB$V_SPL] = 1;
	
    !+
    ! If a textfile, and if in Generation mode, and if the buffer
    ! is not empty, do a WRITELN.
    !-

    IF .FCB [FCB$V_TEXT] AND .FCB [FCB$V_GENERATION] AND
	(.FCB [FCB$A_RECORD_CUR] GTRA .FCB [FCB$A_RECORD_BEG])
    THEN
	PAS$$WRITELN (PFV [PFV$R_PFV], FCB [FCB$R_FCB]);

    !+
    ! Make sure the XAB chain doesn't point to garbage.
    !-

    FAB [FAB$L_XAB] = 0;

    !+
    ! Close the file.
    !-

    IF .FAB [FAB$W_IFI] NEQ 0
    THEN
	BEGIN
	IF .KEYWORDS_SEEN [PAS$K_USER_ACTION]
	THEN
	    BEGIN
	    LINKAGE
		USER_ACTION_LNK = CALL (REGISTER=1,STANDARD,STANDARD);

	    STATUS = USER_ACTION_LNK (.USER_ACTION_BPV [0],	! Address
	    			      .USER_ACTION_BPV [1],	! Environment
	    			      FAB [0,0,0,0],		! FAB address
	    			      RAB [0,0,0,0],		! RAB address
	    			      PFV [PFV$R_PFV]);		! PFV address
	    END
	ELSE
	    STATUS = $PAS$RMS_OP ($CLOSE (FAB=FAB [0,0,0,0]));
    
	!+
	! Set the IFI to zero so we don't try another $CLOSE if the last one
	! failed.
	!-
    
	FAB [FAB$W_IFI] = 0;
    
	!+
	! If the close failed, signal an error.
	!-
    
	IF NOT .STATUS
	THEN
	    $PAS$IO_ERROR (PAS$_ERRDURCLO);
    
	END;

    !+
    ! Deallocate the record buffer, if necessary.
    !-

    IF TESTBITSC (FCB [FCB$V_DYNAMIC_UBF])
    THEN
	PAS$$FREE_VM (.RAB [RAB$W_USZ], RAB [RAB$L_UBF]);

    !+
    ! Deallocate key types vector, if necessary.
    !-
    IF .FCB [FCB$A_KEY_TYPES] NEQ 0
    THEN
	PAS$$FREE_VM (.FCB [FCB$L_NKEYS]*4, FCB [FCB$A_KEY_TYPES]);

    !+
    ! Deallocate resultant name string, if dynamic.  This should be the
    ! last thing to do.
    !-

    IF TESTBITSC (FCB [FCB$V_DYNAMIC_RSN])
    THEN
	BEGIN
	LOCAL
	    NAM: REF BLOCK [, BYTE];
	NAM = .FAB [FAB$L_NAM];
	PAS$$FREE_VM (.NAM [NAM$B_RSL], NAM [NAM$L_RSA]);
	END;

    !+
    ! Mark PFV to indicate file closed.
    !-

    PFV [PFV$V_OPEN] = 0;
    PFV [PFV$V_VALID] = 0;	! Invalidate flags
    PFV [PFV$V_DFB] = 0;	! Invalidate file buffer
    PFV [PFV$V_EOF_DEFINED] = 0;

    RETURN;

    END;					! End of routine PAS$$CLOSE

!<BLF/PAGE>

END						! End of module PAS$CLOSE2

ELUDOM
