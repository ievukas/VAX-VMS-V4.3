MODULE XTAB (					!
		IDENT = 'V04-000'
%BLISS32[,
	ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)
	]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY:	 DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT: Expands a tab, according to tab stop settings.
!
! ENVIRONMENT: Transportable
!
! AUTHOR: R.W.Friday	 CREATION DATE: July, 1978
!

%SBTTL 'Revision History'
!
! MODIFIED BY:
!
!	006	KFA00006	Ken Alden	28-Jun-1983
!		Tabs may now expand out to the right margin, which may
!		  be larger than the page size.
!
!	005	KAD00005	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!
!--

%SBTTL 'Module Level Declarations'

!
! TABLE OF CONTENTS:
!
!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF DSRPLUS %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! MACROS:
!
!
! EQUATED SYMBOLS:
!

EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

!
! OWN STORAGE:
!
!
! EXTERNAL REFERENCES:
!

EXTERNAL
    mra : ref fixed_string,
    sca : sca_definition,
    tsf : tsf_definition,
    ttable : counted_list;

EXTERNAL ROUTINE
    endchr,	endwrd,		fcimra,		remneg;


GLOBAL ROUTINE xtab =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Expands tabs.
!
! FORMAL PARAMETERS:	None
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if the tab could be expanded, otherwise FALSE.
!
! SIDE EFFECTS:
!
!	Generally causes a reorganization of TSF, MRA, and SCA.
!--
    BEGIN

    LOCAL
	current_ext_hl,
	d_ptr,
	fill_count,
	hold_cnbits,
	s_ptr;

!+
! Compute current length of line.  When doing this count trailing spaces, etc.
! If the SCA_rent word is not yet finished then SCA_WRD_CPEND will count as a
! spacing character, otherwise as a non-spacer, since it will contain RINTES. 
! Also, detect the fact that the tab may be the very first character to be
! generated on the output line. 
!-

!+
! If a negative indent is pending, do not cancel it. Instead, subtract it from
! the left margin before beginning the tab-expansion check. (V1.124f,
! 21-OCT-1980, kad.) 
!-
    IF (.tsf_ext_hl EQL 0)
	AND .sca_fc
    THEN
	BEGIN
	!Any positive pending indentation is canceled because tabs are, by
	!definition, relative to the left margin and do not include 
	!indentation.
	IF .sca_indent GTR 0
	 THEN 
	    sca_indent = 0;
	!Subtract the indent if it is negative.
	current_ext_hl = .sca_lm + .sca_indent;
	END
    ELSE
	current_ext_hl = .tsf_ext_hl;

    IF .current_ext_hl LSS 0
    THEN
	BEGIN
	remneg ();				!Attempted negative indent.
	current_ext_hl = 0;
	END;

    current_ext_hl = .current_ext_hl + .sca_wrd_ext_l + .sca_wrd_lst_sp;

    IF .sca_wrd_cpend GEQ %C' '
    THEN
	current_ext_hl = .current_ext_hl + 1;

    INCR i FROM 1 TO .ttable [cl_index] DO
	BEGIN
	IF .ttable [.i] GTR .current_ext_hl
	THEN
	    BEGIN				!Found a suitable tab setting.
!+
! Compute number of spaces needed to be added to line. Do not allow user to tab
! past the right edge of his page. If the user is in a literal, the right margin
! will be larger than the page-width. In this case, allow him to expand tabs out
! to the right margin. (V1.124f, 21-OCT-1980, kad.) 
!-
	    IF .ttable [.i] GEQ .sca_rm
	    THEN
		RETURN false
	    ELSE
		fill_count = .ttable [.i] - .current_ext_hl;

!+
! At this point we are certain that this tab can be expanded. All spacing
! characters have been counted.  Now force the current word (if there is one)
! to be ended.  That resets lots of counters, and in particular, forces the
! final pending character into MRA. 
!-
	    endwrd (false, false, false);	!Anticipate no spaces or justification.

	    !Now remove all justification marks from TSF.
	    !This is done by scanning the entire MRA, where the line is
	    !being built up.
	    s_ptr = .fs_start (mra);
	    d_ptr = .s_ptr;

	    INCR i FROM 1 TO .tsf_int_hl + .tsf_int_vl DO
		BEGIN
		LOCAL
		    x,
		    y;

		x = CH$RCHAR_A (s_ptr);

		IF .x EQL rintes
		THEN
		    BEGIN
		    !See if this is a justification mark.
		    y = CH$RCHAR_A (s_ptr);

		    IF .y EQL %C'J'
		    THEN
			BEGIN			!Throw away the justification mark
			s_ptr = CH$PLUS (.s_ptr, 1);
			i = .i + 2;
			END
		    ELSE
			BEGIN			!Save this escape sequence
			CH$WCHAR_A (rintes, d_ptr);
			CH$WCHAR_A (.y, d_ptr);
			CH$WCHAR_A (CH$RCHAR_A (s_ptr), d_ptr);
			i = .i + 2;
			END
		    END
		ELSE
		    CH$WCHAR_A (.x, d_ptr);	!Move a "normal" character
		END;				!End of compression.

	    !Update TSF and SCA
	    tsf_jus_cnt = 0;
	    sca_wrd_pntr = .d_ptr;
	    !Update MRA information
	    fs_next (mra) = .d_ptr;
	    fs_length (mra) = ch$diff (.d_ptr, .fs_start (mra));
	    tsf_int_hl = .fs_length (mra) - .tsf_int_vl;
!
!+
! Now put the required number of spaces onto the line. The spaces are
! inserted in such a way that they become part of the word that will later be
! built.  The assumption being made is that the next word will fit on the
! line being put together.  If it does not, then the word with the expanded
! tab prefixed to it will appear on the following line.  However, this will
! probably not happen, since RUNOFF users will use tabs to set up columns,
! and will have counted carefully. Another reason for going through the
! standard character processing is that the tab may be the first thing to be
! output.  In that case, it is important that certain information that
! appears before the first character be added in proper sequence. When
! outputting spaces, turn off underlining, bolding, etc.  This avoids the
! problem of having input such as ^&A     B\& generate A_____B. 
!-
	    hold_cnbits = .sca_wrd_cnbits;
	    sca_wrd_acnbits = false;

	    INCR i FROM 1 TO .fill_count DO
		BEGIN
		sca_wrd_cnbits = false;
		ENDCHR (%C' ');
		END;
	    sca_wrd_cnbits = .hold_cnbits;
	    RETURN TRUE;		!Successful tab expansion.
	    END;			!End of processing of an applicable tab

	END;

    RETURN FALSE;			!Falling through means no suitable tab setting was found.
    END;					!End of XTAB

END						!End of module
ELUDOM
