%TITLE	'VAX-11 CONVERT/RECLAIM'
MODULE	RECL$RMSIO	( IDENT='V04-000',
			OPTLEVEL=3
			) =

BEGIN

!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! Facility:	VAX-11 CONVERT/RECLAIM
!
! Environment:
!
!		VAX/VMS Operating System
!
!
! Abstract:	CONVERT/RECLAIM facility RMS I/O routines
!
! Contents:
!		ALLOCATE_BUFFERS
!		GET_LAST_VBN
!		OPEN_FILE
!		GET_NEXT_BUCKET
!
!--

!
! Author:	Keith B Thompson
!		Peter Lieberwirth	Creation date:	August-1981
!
!
! Modified by:
!
!	V03-007	KBT0554		Keith B. Thompson	20-Jul-1983
!		Init the outsum xab
!
!	V03-006	KBT0388		Keith B. Thompson	27-Oct-1982
!		Add support for prologue 3 sidrs
!
!	V03-005	KBT0359		Keith B. Thompson	6-Oct-1982
!		Use new merged ctx definitions
!
!	V03-004	KBT0352		Keith B. Thompson	5-Oct-1982
!		Use new linkage definitions
!
!	V03-003	KBT0051		Keith Thompson		10-May-1982
!		Remove the check to see if the vbn has been read already and
!		fix the bucket address sample compare
!
!	V03-002	KBT0040		Keith Thompson		3-Apr-1982
!		Add recl$gl_search_buffer and allocate it.  Also make
!		sure you find the last data level bucket.
!
!	V03-001	KBT0009		Keith Thompson		16-Mar-1982
!		Store LEVEL of bucket in RTX, correct first VBN at data
!		level and make sure the last bucket at the index levels
!		is found. Also correct bug in error processing and fix
!		the way we wirte area descriptors.
!
!****


PSECT
	OWN	= _CONV$RECL_D	(PIC),
	GLOBAL	= _CONV$RECL_D	(PIC),
	PLIT	= _CONV$PLIT	(SHARE,PIC),
	CODE	= _CONV$RECL_S	(SHARE,PIC);

LIBRARY	'SYS$LIBRARY:LIB.L32';
LIBRARY	'SRC$:CONVERT';

DEFINE_ERROR_CODES;

EXTERNAL ROUTINE
	RECL$$SWAP_BUFFERS	: RL$JSB_REG_9	NOVALUE,
	CONV$$READ_PROLOGUE	: CL$READ_PROLOGUE	NOVALUE,
	CONV$$RMS_ERROR		: NOVALUE,
	CONV$$RMS_OPEN_ERROR	: NOVALUE,
	CONV$$RMS_READ_ERROR	: NOVALUE,
	CONV$$GET_VM		: CL$GET_VM,
	CONV$$GET_TEMP_VM	: CL$GET_TEMP_VM;

FORWARD ROUTINE
	RECL$$GET_NEXT_BUCKET	: RL$JSB_REG_9	NOVALUE,
	GET_LAST_VBN		: RL$JSB_REG_9;

EXTERNAL
	CONV$AB_FLAGS		: BLOCK [ ,BYTE ],
	CONV$AB_OUT_FAB		: $FAB_DECL,
	CONV$AB_OUT_NAM		: $NAM_DECL,
	CONV$AB_OUT_RAB		: $RAB_DECL,
	CONV$AB_OUT_XABSUM	: $XABSUM_DECL,

	RECL$GL_BUCKET_COUNT	: LONG,
	RECL$GL_DATA_COUNT	: LONG,
	RECL$GL_INDEX_COUNT	: LONG;

GLOBAL
	RECL$GL_SEARCH_BUFFER	: LONG,
	RECL$GL_WRITE_AREA	: LONG INITIAL ( 0 ),
	RECL$GL_WRITE_KEY	: LONG INITIAL ( 0 );


%SBTTL	'ALLOCATE_BUFFERS'
GLOBAL ROUTINE	RECL$$ALLOCATE_BUFFERS : RL$JSB_REG_9 =
!++
!
! Functional Description:
!
!	Allocates context buffers, two bucket buffers for each level
!	and reads in first virtical row of index and data buckets.
!
! Calling Sequence:
!
!	RECL$$ALLOCATE_BUFFERS()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	SS$_NORMAL
!
! Routines Called:
!
!	CONV$$GET_VM
!	RECL$$GET_NEXT_BUCKET
!	GET_LAST_VBN
!	RECL$$SWAP_BUFFERS
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_BUCKET;
    DEFINE_KEY_DESC;

    LOCAL
	BYTES,
	CTX_SIZE,			! Size in bytes of the context buffer
	DAT_BUF_SIZE,			! Size in bytes of level 0 bucket buffer
	IDX_BUF_SIZE;			! Size in bytes of level >0 bucket buffer

    ! Get the number of bytes for the context block, one for each level
    !
    CTX_SIZE = ( .KEY_DESC [ KEY$B_ROOTLEV ] + 1 ) * CTX$K_BLN;

    ! Get the number of bytes for the data level buffers
    !
    DAT_BUF_SIZE = .KEY_DESC [ KEY$B_DATBKTSZ ] * BLOCK_SIZE;

    ! Get the number of bytes for the index level bucket buffers
    !
    IDX_BUF_SIZE = .KEY_DESC [ KEY$B_IDXBKTSZ ] * BLOCK_SIZE;

    ! Add em up NOTE: Two bucket buffers for each level and a search buffer
    !		      which is index bucket size
    !
    BYTES = .CTX_SIZE + ( 2 * ( .DAT_BUF_SIZE +
			( .IDX_BUF_SIZE * .KEY_DESC [ KEY$B_ROOTLEV ] ) ) ) +
			.IDX_BUF_SIZE;

    ! Allocate the virtual memory and point the context block to it
    !
    CTX = CONV$$GET_TEMP_VM( .BYTES );

    ! Set the size, area number and first VBN of the data level bucket
    !
    CTX [ CTX$W_BUCKET_SIZE ]	= .DAT_BUF_SIZE;
    CTX [ CTX$B_AREA ]		= .KEY_DESC [ KEY$B_DANUM ];
    CTX [ CTX$L_FIRST_VBN ]	= .KEY_DESC [ KEY$L_LDVBN ];

    ! Set up the pointers for the data level buffers
    !
    CTX [ CTX$L_CURRENT_BUFFER ] = .CTX + .CTX_SIZE;
    CTX [ CTX$L_PREVIOUS_BUFFER ] = .CTX [ CTX$L_CURRENT_BUFFER ] +
								.DAT_BUF_SIZE;

    ! Set up the pointers for the rest of the context blocks
    !
    BEGIN

    LOCAL
	BUF_PTR;

    ! Keep a pointer of where we are in the bucket buffers
    ! 
    BUF_PTR = .CTX [ CTX$L_PREVIOUS_BUFFER ] + .DAT_BUF_SIZE;

    ! Loop once for each level
    !
    INCR I FROM 1 TO .KEY_DESC [ KEY$B_ROOTLEV ]
    DO
	BEGIN

	! Point to the next block
	!
	CTX = .CTX + CTX$K_BLN;

	! Fill in the buffer pointers etc.
	!
	CTX [ CTX$L_CURRENT_BUFFER ]	= .BUF_PTR;
	CTX [ CTX$L_PREVIOUS_BUFFER ]	= .BUF_PTR + .IDX_BUF_SIZE;
	CTX [ CTX$W_BUCKET_SIZE ]	= .IDX_BUF_SIZE;
	CTX [ CTX$B_LEVEL ]		= .I;

	! Set the area number of the block (Since there are two possible areas
	! depending on the level in the index we must check )
	!
	IF .I EQLU 1
	THEN
	    CTX [ CTX$B_AREA ] = .KEY_DESC [ KEY$B_LANUM ]
	ELSE
	    CTX [ CTX$B_AREA ] = .KEY_DESC [ KEY$B_IANUM ];

	BUF_PTR = .BUF_PTR + ( .IDX_BUF_SIZE * 2 )

	END;

    ! The last piece is the search buffer
    !
    RECL$GL_SEARCH_BUFFER = .BUF_PTR

    END;

    ! At the finish of the above loop the context block is pointing
    ! to the root block
    !
    BEGIN

    LOCAL
	LAST_VBN;

    ! To read in the first and last bucket in each level of the index we
    ! first read in the root then search downward, also set the
    ! first vbn pointer for the root
    !
    CTX [ CTX$L_NEXT_VBN ]	= .KEY_DESC [ KEY$L_ROOTVBN ];
    CTX [ CTX$L_FIRST_VBN ]	= .KEY_DESC [ KEY$L_ROOTVBN ];
    CTX [ CTX$L_PREVIOUS_VBN ]	= .KEY_DESC [ KEY$L_ROOTVBN ];

    ! Read in root bucket
    !
    RECL$$GET_NEXT_BUCKET();

    ! Get the last index record vbn
    !
    LAST_VBN = GET_LAST_VBN();

    ! Loop once for each level    NOTE: This loop will also set the first_vbn
    !
    INCR I FROM 1 TO .KEY_DESC [ KEY$B_ROOTLEV ] BY 1
    DO
	BEGIN

	! Move down the levels
	!
	CTX = .CTX - CTX$K_BLN;

	! Use vbn found for the next get
	!
	CTX [ CTX$L_NEXT_VBN ]	= .LAST_VBN;

	! Read in the last bucket bucket
	!
	RECL$$GET_NEXT_BUCKET();

	!+
	! If this is an index bucket make sure this is the last one in the
	! level, is not (rms had a update failure) get the last bucket.
	! If it is a data bucket we want to go all the way to the end of the
	! chain so we cah start at the beginning of the file
	!-

	! Check for last bucket in chain. NOTE: GET_NEXT_BUCKET sets BUCKET
	!					    to the current buffer
	!
	WHILE NOT .BUCKET [ BKT$V_LASTBKT ]
	DO
	    BEGIN

	    ! Swap the buffers
	    !
	    RECL$$SWAP_BUFFERS();

	    ! Get the next bucket in the chain
	    !
	    RECL$$GET_NEXT_BUCKET()

	    END;

	! If this is the index level get the last vbn pointer in the bucket
	!
	IF .CTX [ CTX$B_LEVEL ] GTRU 0
	THEN
	    LAST_VBN = GET_LAST_VBN();

	! Swap the buffers
	!
	RECL$$SWAP_BUFFERS();

	! Get the next bucket in the chain which should be the first
	!
	RECL$$GET_NEXT_BUCKET();

	! If index level set the first index record vbn (because of duplicates
	! etc. this is not always true for data level buckets)
	!
	IF .CTX [ CTX$B_LEVEL ] GTRU 0
	THEN
	    CTX [ CTX$L_FIRST_VBN ] = .CTX [ CTX$L_CURRENT_VBN ]

	END

    END;

    RETURN RECL$_SUCCESS

    END;

%SBTTL	'GET_LAST_VBN'
ROUTINE	GET_LAST_VBN : RL$JSB_REG_9 =
!++
!
! Functional Description:
!
!	Returns the VBN pointer of the last index record in the bucket
!
! Calling Sequence:
!
!	GET_LAST_VBN()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	VBN of the last index record in the bucket
!
! Routines Called:
!	none
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_BUCKET;
    DEFINE_KEY_DESC;

    LOCAL
	VBN_FREE_SPACE,
	VBN_POINTER;

    VBN_POINTER = .CTX [ CTX$W_BUCKET_SIZE ] - 4;

    VBN_FREE_SPACE = .BUCKET[ .VBN_POINTER, 0, 16, 0 ];

    VBN_POINTER = .VBN_FREE_SPACE + 1;

    RETURN .BUCKET [	.VBN_POINTER,
			0,
			(( .BUCKET [ BKT$V_PTR_SZ ] + 2 ) * 8 ),
			0 ]

    END;

%SBTTL	'OPEN_FILE'
GLOBAL ROUTINE	RECL$$OPEN_FILE	( FILE_NAME : REF BLOCK [ ,BYTE ] ) =
!++
!
! Functional Description:
!
!	Opens the input file described by the string descriptor FILE_NAME
!
! Calling Sequence:
!
!	RECL$$OPEN_FILE( file_name )
!
! Input Parameters:
!
!	file_name	- Address of a descriptor
!
! Implicit Inputs:
!
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!
!	RMS or CONVERT error code or ss$_normal
!
! Routines Called:
!
!	CONV$$GET_VM
!	$PARSE
!	CONV$$RMS_OPEN_ERROR
!	$SEARCH
!	$OPEN
!	$DISPLAY
!	$CONNECT
!	CONV$$GET_VM
!	$READ
!	CONV$$RMS_ERROR
!
! Side Effects:
!
!	Opens the input file and reads in the prologue
!
!--

    BEGIN

    LOCAL
	VM_POINTER,
	BYTES;

    ! Allocate some name block buffers
    !
    BYTES = ESA_BUF_SIZ + RSA_BUF_SIZ;

    VM_POINTER = CONV$$GET_VM ( .BYTES );

    ! Initialize the rms blocks
    !
    $NAM_INIT ( NAM = CONV$AB_OUT_NAM,
		ESA = .VM_POINTER,
		ESS = ESA_BUF_SIZ,
		RSA = .VM_POINTER + ESA_BUF_SIZ,
		RSS = RSA_BUF_SIZ );

    $FAB_INIT ( FAB = CONV$AB_OUT_FAB,
		CTX = CONV$_OPENIN,
		FAC = <BRO,GET,PUT>,
		FNA = .FILE_NAME [ DSC$A_POINTER ],
		FNS = .FILE_NAME [ DSC$W_LENGTH ],
		FOP = NAM,
		NAM = CONV$AB_OUT_NAM,
		XAB = CONV$AB_OUT_XABSUM );
		
    $RAB_INIT ( RAB = CONV$AB_OUT_RAB,
		FAB = CONV$AB_OUT_FAB,
		ROP = BIO );

    $XABSUM_INIT ( XAB = CONV$AB_OUT_XABSUM,
		   NXT = 0 );

    ! Parse the file name
    !
    $PARSE( FAB=CONV$AB_OUT_FAB,ERR=CONV$$RMS_OPEN_ERROR );

    ! We are not allowing wildcards
    !
    IF .CONV$AB_OUT_NAM [ NAM$V_WILDCARD ]
    THEN
	RETURN CONV$_NOWILD;

    ! Search for the file
    !
    $SEARCH( FAB=CONV$AB_OUT_FAB,ERR=CONV$$RMS_OPEN_ERROR );

    ! Open the file
    !
    $OPEN( FAB=CONV$AB_OUT_FAB,ERR=CONV$$RMS_OPEN_ERROR );

    ! Get all good info about the file
    !
    $DISPLAY( FAB=CONV$AB_OUT_FAB );

    ! If the file is not index then error
    !
    IF .CONV$AB_OUT_FAB [ FAB$B_ORG ] NEQU FAB$C_IDX
    THEN
	RETURN CONV$_NOTIDX;

    ! Make sure it is the correct prologue version
    !
    IF .CONV$AB_OUT_XABSUM [ XAB$W_PVN ] LSS 3
    THEN
	RETURN CONV$_PLV;

    ! Connect the stream
    !
    $CONNECT( RAB=CONV$AB_OUT_RAB,ERR=CONV$$RMS_OPEN_ERROR );

    ! Say that the file is open
    !
    CONV$AB_FLAGS [ CONV$V_OUT ] = _SET;

    ! Read the prologue
    !
    CONV$$READ_PROLOGUE();

    RETURN RECL$_SUCCESS

    END;


%SBTTL	'GET_NEXT_BUCKET'
GLOBAL ROUTINE	RECL$$GET_NEXT_BUCKET : RL$JSB_REG_9 NOVALUE =
!++
!
! Functional Description:
!
!	Gets the bucket in the horizontal chain
!
! Calling Sequence:
!
!	RECL$$GET_NEXT_BUCKET()
!
! Input Parameters:
!	none
!
! Implicit Inputs:
!	none
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	$READ
!
! Side Effects:
!	none
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_BUCKET;
    DEFINE_KEY_DESC;

    LOCAL
	LOW_ADDRESS_WORD	: WORD,
	LAST_BYTE;

    ! Set the bucket pointer to the current buffer at this level
    !
    BUCKET = .CTX [ CTX$L_CURRENT_BUFFER ];

    ! A simple check could save an IO (unfortunatly it causes problems)
    !
!    IF ( NOT ( .CTX [ CTX$L_CURRENT_VBN ] EQLU .CTX [ CTX$L_NEXT_VBN ] ) )
!    THEN
	BEGIN

	! Point RMS to the target bucket
	!
	CONV$AB_OUT_RAB [ RAB$L_UBF ] = .BUCKET;
	CONV$AB_OUT_RAB [ RAB$W_USZ ] = .CTX [ CTX$W_BUCKET_SIZE ];
	CONV$AB_OUT_RAB [ RAB$L_BKT ] = .CTX [ CTX$L_NEXT_VBN ];

	! If error signal a readerr
	!
	CONV$AB_OUT_RAB [ RAB$L_CTX ] = CONV$_READERR;

	! Get the bucket
	!
	$READ( RAB=CONV$AB_OUT_RAB,ERR=CONV$$RMS_READ_ERROR );

	! Check to see if the bucket is valid
	!
	! Check the address sample and check bytes
	!
	LAST_BYTE = .CTX [ CTX$W_BUCKET_SIZE ] - 1;

	! Get the low word of the longword address
	!
	LOW_ADDRESS_WORD = .CTX [ CTX$L_NEXT_VBN ];

	! If there are any errors signal them and stop
	!
	IF ( .BUCKET [ BKT$W_ADRSAMPLE ] NEQU .LOW_ADDRESS_WORD )
	    OR
	   ( .BUCKET [ BKT$B_CHECKCHAR ] NEQU .BUCKET [ .LAST_BYTE,0,8,0 ] )
	THEN
	    BEGIN

	    LOCAL
		NAM_DESC	: DESC_BLK;

	    NAM_DESC [ DSC$W_LENGTH ] = .CONV$AB_OUT_NAM [ NAM$B_RSL ];
	    NAM_DESC [ DSC$A_POINTER ] = .CONV$AB_OUT_NAM [ NAM$L_RSA ];

	    ! Signal a readerr with the file name and the vbn which broke
	    !
	    SIGNAL_STOP( CONV$_READERR,
			 1,
			 NAM_DESC,
			 CONV$_INVBKT,
			 1,
			 .CTX [ CTX$L_NEXT_VBN ] )

	    END;
    
	! Set the new buckets vbn
	!
	CTX [ CTX$L_CURRENT_VBN ] = .CTX [ CTX$L_NEXT_VBN ];

	END;

    ! Set the next bucket address
    !
    CTX [ CTX$L_NEXT_VBN ] = .BUCKET [ BKT$L_NXTBKT ];

    RETURN

    END;

%SBTTL	'WRITE_BUCKET'
GLOBAL ROUTINE	RECL$$WRITE_BUCKET ( BUCKET_BLOCK ) : RL$JSB_REG_9 NOVALUE =
!++
!
! Functional Description:
!
!	Writes the bucket pointed to by the first longword in bucket_block
!	to the VBN given in the second longword
!
! Calling Sequence:
!
!	RECL$$WRITE_BUCKET( bucket_block )
!
! Input Parameters:
!
!	bucket_block	- Pointer to a two longword block which looks like:
!
!					------------------
!			Bucket_block :	| Buffer_address |
!					|----------------|
!					|  Target_vbn    |
!					------------------
!
! Implicit Inputs:
!
!	The size of the bucket to be writen is taken from the current
!	context block
!
! Output Parameters:
!	none
!
! Implicit Outputs:
!	none
!
! Routine Value:
!	none
!
! Routines Called:
!
!	$WRITE
!
! Side Effects:
!
!	Bucket check bytes incremented.
!
!--

    BEGIN

    DEFINE_CTX;
    DEFINE_BUCKET;
    DEFINE_KEY_DESC;

    LOCAL
	LAST_BYTE,
	OUT_BUCKET:	REF BLOCK [ ,BYTE ];

    BIND
	BKT_BLK = BUCKET_BLOCK : REF VECTOR [ 2,LONG ];

    ! Update the check bytes, first point to the buffer and then increment
    ! the first check character and then copy it to the last check character.
    !
    OUT_BUCKET = .BKT_BLK[ 0 ];

    ! Point to the last byte (final check byte) in the buffer.
    !
    LAST_BYTE = .CTX [ CTX$W_BUCKET_SIZE ] - 1;

    ! Actually update the check bytes.
    !
    OUT_BUCKET[ BKT$B_CHECKCHAR ] = .OUT_BUCKET[ BKT$B_CHECKCHAR ] + 1;
    OUT_BUCKET[ .LAST_BYTE, 0, 8, 0 ] = .OUT_BUCKET[ BKT$B_CHECKCHAR ];

    ! Point RMS to the target bucket
    !
    CONV$AB_OUT_RAB [ RAB$L_RBF ] = .BKT_BLK [ 0 ];
    CONV$AB_OUT_RAB [ RAB$L_BKT ] = .BKT_BLK [ 1 ];
    CONV$AB_OUT_RAB [ RAB$W_RSZ ] = .CTX [ CTX$W_BUCKET_SIZE ];

    ! If error signal a write error
    !
    CONV$AB_OUT_RAB [ RAB$L_CTX ] = CONV$_WRITEERR;

    ! NOTE: rms_read_error also works for writes
    !
    $WRITE( RAB=CONV$AB_OUT_RAB,ERR=CONV$$RMS_READ_ERROR );

    RETURN

    END;

END	ELUDOM
