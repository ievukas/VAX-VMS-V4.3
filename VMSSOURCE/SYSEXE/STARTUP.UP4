$ ! 'F$VERIFY(0)
$ !
$ !	This command procedure may be entered in one of two ways:
$ !
$ !		1) Invoked from STARTUP.UP3
$ !		2) As the startup procedure during reboot
$ !
$ !	In order to eliminate error messages incurred by re-executing
$ !	the initialization parts of the startup procedure, STARTUP.UP3
$ !	specifies an input parameter, while the reboot does not.
$ !
$ !		P1 - "CONTINUE", a label in this command procedure
$ !		     where the upgrade should continue if coming
$ !		     directly from STARTUP.UP3 without a reboot
$ !
$ SET NOON
$	SAY = "WRITE SYS$OUTPUT"
$	SAY ""
$	SAY "Continuing with VAX/VMS V4.0 Upgrade Procedure."
$	SAY ""
$	SAY "		Upgrade Phase 4		''F$TIME()'"
$	SAY ""
$ P1:="''P1'"	! Make sure P1 is defined
$ IF P1 .NES. "" THEN GOTO 'P1
$ @SYS$SYSTEM:STARTUP UPGRADE
$ !
$ ! Install only those protected shareable images that will be used.
$ !
$ RUN SYS$SYSTEM:INSTALL
SYS$SHARE:DISMNTSHR	/OPEN /SHARED /PROTECT /HEADER /NOPURGE
SYS$SHARE:MOUNTSHR	/OPEN /SHARED /PROTECT /HEADER
SYS$SHARE:SECURESHR	/OPEN /SHARED /PROTECT /HEADER
$	VERSION = "040"
$	SET DEFAULT SYS$SYSTEM
$	SET UIC [1,4]
$	SET PROTECTION=(S:RWED,G:RWED,O:RWED,W:RE) /DEFAULT
$	DEFDIR = "SYSUPD.VMS''VERSION'"
$	SET CONTROL=T
$	SET ON
$	SET MESSAGE /FACILITY/SEVERITY/TEXT/IDENTIFICATION
$	ON ERROR THEN GOTO 7000
$	ON CONTROL_Y THEN GOTO 7000
$	T1 = F$SETPRV("CMKRNL,SYSPRV,LOG_IO,VOLPRO,BYPASS")
$	OPEN /READ DATAF UPGRADE.KIT
$	READ DATAF NEW_ROOT	!Kit device
$	READ DATAF OLD_ROOT_DOT	!Old topsys + .
$	READ DATAF NEW_ROOT	!new topsys
$	READ DATAF YEAR
$	READ DATAF UPGRADE_FROM
$	READ DATAF L
$	T1 = F$LENGTH(L)
$	KIT_RL02 = F$LOC("A",L) .NE. T1
$	KIT_RC25 = F$LOC("B",L) .NE. T1
$	KIT_DOTLR = F$LOC("C",L) .NE. T1
$	KIT_ISTLR = F$LOC("D",L) .NE. T1
$	KIT_DOCROOT = F$LOC("E",L) .NE. T1
$	KIT_CROOT = F$LOC("F",L) .NE. T1
$	READ DATAF SYSVER
$	READ DATAF LIB_DISK
$	CLOSE DATAF
$	OLD_ROOT = OLD_ROOT_DOT - "."
$	TARGET = F$TRNLNM("SYS$SYSDEVICE")
$	TARGET_TOPSYS_DOT = NEW_ROOT + "."
$ !
$ ! Determine type of cpu
$ !
$	CPUTYPE = F$GETSYI("CPU")
$	IF (CPUTYPE .GT. 0) .AND. (CPUTYPE .LE. 3) THEN GOTO GOT_CPUTYPE
$	SAY "Upgrade procedure not supported for cpu type ''cputype'"."
$	GOTO 7000
$GOT_CPUTYPE:
$	SET DEFAULT 'TARGET'['NEW_ROOT'.SYSEXE]
$	ON ERROR THEN GOTO 7000
$	SAY ""
$	SET NOON
$!	@'TARGET'['NEW_ROOT'.'DEFDIR']DIRCLENUP 'TARGET' 1
$	STOP JOB_CONTROL
$	STOP OPCOM
$	STOP ERRFMT
$CONTINUE:
$	EXCHANGE = "EXCHANGE /NOMESSAGE "
$	SET ON
$	ON ERROR THEN GOTO 7000
$	ON CONTROL_Y THEN GOTO 7000
$	SET DEFAULT 'TARGET'['NEW_ROOT'.SYSEXE]
$	CLROOT = OLD_ROOT
$	IF KIT_DOCROOT THEN CLROOT = "V4COMMON"
$	IF F$SEARCH("[0,0]''CLROOT'.DIR;1") .EQS. "" THEN -
		CREATE/DIRECTORY/OWNER=[1,4]/PROT=(S:RWE,O:RWE,G:RE,W:RE) -
		'TARGET'['CLROOT']
$	IF .NOT. KIT_DOCROOT THEN GOTO FIX_BACKLINKS
$	IF F$SEARCH("[0,0]''OLD_ROOT'.DIR;1") .EQS. "" THEN -
		CREATE /DIRECTORY/OWNER=[1,4]/PROT=(S:RWE,O:RWE,G:RE,W:RE) -
		'TARGET'['OLD_ROOT']
$	TEMP = TARGET + "[" + OLD_ROOT + "]"
$	FLIST = "SYSEXE/SYSLIB/SYSMSG/SYSMGR/SYSMAINT/SYSHLP/SYSTEST/SYSERR/SYSCBI/SYSUPD/"
$CROOT_LOOP:
$	F1 = F$ELEMENT(0,"/",FLIST)
$	IF F1 .EQS. "" THEN GOTO CROOT_LOOP2
$	FLIST = FLIST - "''F1'/"
$	IF F$SEARCH("''TEMP'''F1.DIR;1") .EQS. "" THEN -
		CREATE/DIRECTORY/OWNER=[1,4]/PROT=(S:RWE,O:RWE,G:RE,W:RE) -
		'TARGET'['OLD_ROOT'.'F1']
$	GOTO CROOT_LOOP
$CROOT_LOOP2:
$	IF F$SEARCH("''TARGET'[''OLD_ROOT'.SYSHLP]EXAMPLES.DIR;1") .EQS. "" THEN -
		CREATE/DIRECTORY/OWNER=[1,4]/PROT=(S:RWE,O:RWE,G:RE,W:RE) -
		'TARGET'['OLD_ROOT'.SYSHLP.EXAMPLES]
$FIX_BACKLINKS:
$	SET NOON
$	SAY ""
$	SAY "Correcting directory back pointers for system directories."
$	SAY "If the system should crash before this section completes,"
$	SAY "the system may be rendered unbootable."
$	DEFINE SYS$SYSROOT 'TARGET'['NEW_ROOT'.],'TARGET'['CLROOT'.]
$ !Rename all the directories to the old root, then enter them back in
$ ! the new root.  This way the back links will be correct for the old root.
$	RENAME 'TARGET'['NEW_ROOT']SYSEXE.DIR;1,SYSLIB;1,SYSTEST;1,SYSMAINT;1,-
		SYSMGR;1,SYSHLP;1,SYSUPD;1,SYSMSG;1,SYSERR;1,SYSCBI;1 -
		'TARGET'['CLROOT']*.*;1
$	SET FILE /ENTER='TARGET'['NEW_ROOT']*.*;* -
		'TARGET'['CLROOT']SYSEXE.DIR;1,SYSLIB;1,SYSTEST;1,SYSMAINT;1,-
		SYSMGR;1,SYSHLP;1,SYSUPD;1,SYSMSG;1,SYSERR;1,SYSCBI;1
$	DEASSIGN SYS$SYSROOT
$	IF .NOT. KIT_DOCROOT THEN GOTO FIXUP_DONE
$	IF F$SEARCH("''TARGET'[''OLD_ROOT']SYSCOMMON.DIR") .NES. "" THEN -
		SET FILE /REMOVE 'TARGET'['OLD_ROOT]SYSCOMMON.DIR;*
$	SET FILE /ENTER='TARGET'['OLD_ROOT']SYSCOMMON.DIR -
			 'TARGET'[000000]V4COMMON.DIR;1
$	NRT = TARGET + "[" + CLROOT + ".SYSEXE]"
$	ORT = TARGET + "[" + OLD_ROOT + ".SYSEXE]"
$	IF F$SEARCH("''NRT'PAGEFILE.SYS") .NES. "" THEN -
			RENAME 'NRT'PAGEFILE.SYS 'ORT'
$	IF F$SEARCH("''NRT'SWAPFILE.SYS") .NES. "" THEN -
			RENAME 'NRT'SWAPFILE.SYS 'ORT'
$	IF F$SEARCH("''NRT'SYSDUMP.DMP") .NES. "" THEN -
			RENAME 'NRT'SYSDUMP.DMP 'ORT'
$	IF F$SEARCH("''ORT'PAGEFILE.SYS") .NES. "" THEN -
			SET FILE /ENTER='NRT' 'ORT'PAGEFILE.SYS;
$	IF F$SEARCH("''ORT'SWAPFILE.SYS") .NES. "" THEN -
			SET FILE /ENTER='NRT' 'ORT'SWAPFILE.SYS;
$	IF F$SEARCH("''ORT'SYSDUMP.DMP") .NES. "" THEN -
			SET FILE /ENTER='NRT' 'ORT'SYSDUMP.DMP;
$FIXUP_DONE:
$	SET ON
$	SAY ""
$	SAY "Directory backlink setup completed."
$ !
$ ! Set up console floppy to boot from correct root ('OLD_ROOT')
$ !
$	T1 = F$SETPRV("CMEXEC,CMKRNL,LOG_IO,SYSNAM,VOLPRO")
$	FILES11_DEVICE := 'TARGET'['NEW_ROOT'.'DEFDIR']
$	CONSOLE_DEVICE = "CSA1:"
$	GOTO SET_PARAMS_'CPUTYPE'
$SET_PARAMS_1:		!780
$	BOOT_CS = 1
$	MEDIUM = "floppy"
$	GOTO END_SET_PARMS
$
$SET_PARAMS_2:		!750
$	TEMP = FILES11_DEVICE + "DEFBOO.SIT;1"
$	BOOT_CS = 0
$	IF F$SEARCH(TEMP) .EQS. "" THEN GOTO NO_TU58
$	BOOT_CS = 1
$	MEDIUM = "TU58"
$	GOTO END_SET_PARMS
$
$SET_PARAMS_3:
$	BOOT_CS = 1
$	CONSOLE_DEVICE = "CSA2:"
$	MEDIUM = "TU58"
$
$END_SET_PARMS:
$	SAY ""
$ 	SAY "Now the new site-specific ''MEDIUM' must be modified to allow"
$	SAY "reboot of the complete VAX/VMS V4.0 system."
$	RUN SYS$SYSTEM:SYSGEN
CONNECT CONSOLE
$	GOTO MNT_CONSOLE
$GET_CONSOLE:
$	SAY "Error mounting or writing to console ''MEDIUM'."
$	SAY "Ensure that the new site-specific console ''MEDIUM'"
$	SAY "is in ''CONSOLE_DEVICE'."
$	CLOSE /NOLOG F1
$	OPEN /READ F1 OPA0:
$	READ /END=GET_CONSOLE /PROMPT="Are you ready to continue? (Y/N)" F1 YN
$	IF YN .EQS. "" THEN GOTO GET_CONSOLE
$	IF .NOT. YN THEN GOTO GET_CONSOLE
$	CLOSE /NOLOG F1
$MNT_CONSOLE:
$	ON ERROR THEN GOTO GET_CONSOLE
$	SAY -
"The new site-specific console ''MEDIUM' should already be in ''CONSOLE_DEVICE'."
$	IF F$GETDVI(CONSOLE_DEVICE,"MNT") THEN DISMOUNT 'CONSOLE_DEVICE'
$	MOUNT/FOREIGN 'CONSOLE_DEVICE'
$	SET DEFAULT 'FILES11_DEVICE'
$	EXCHANGE  DELETE 'CONSOLE_DEVICE'UPGGEN.CMD,DEFBOO.CMD
$	RENAME DEFBOO.SIT;1 DEFBOO.CMD
$	EXCHANGE COPY DEFBOO.CMD/RECORD=STREAM 'CONSOLE_DEVICE'
$	DISMOUNT 'CONSOLE_DEVICE'
$NO_TU58:
$ !
$ ! Re-set the sysgen parameter that causes the time/date to be requested
$ ! at boot-time.  Also, disable swapfile usage, so we can delete it.
$ !
$	RUN SYS$SYSTEM:SYSGEN
USE CURRENT
SET /STARTUP SYS$SYSTEM:STARTUP.UP5
SET SETTIME 0
SET SWPFILCNT 0
SET VAXCLUSTER 0
WRITE CURRENT
$	IF KIT_DOCROOT THEN -
		COPY 'TARGET'['CLROOT'.SYSEXE]VAXVMSSYS.PAR -
			'TARGET'['OLD_ROOT_DOT'SYSEXE]
$	SAY ""
$	SAY "System shutting down to boot the complete V4.0 system."
$	SAY "(Please ignore error messages during the shutdown.)"
$	SAY ""
$	IF BOOT_CS THEN -
	SAY "Leave the newly created site-specific console ''MEDIUM'"
$	IF BOOT_CS THEN -
	SAY "in the console drive."
$	SAY ""
$	SAY "The system disk must remain on ''TARGET' in order to proceed"
$	SAY "to next phase of the upgrade."
$	SAY ""
$	SAY "The system will automatically reboot after the shutdown"
$	SAY "and continue the upgrade procedure.  If for any reason"
$ 	SAY "you should have to restart the upgrade procedure by rebooting"
$	SAY "by hand, from now on type only:"
$	SAY ""
$	IF (CPUTYPE .EQ. 2) .AND. BOOT_CS THEN -
	SAY "		B/800 DDA0"
$	SAY "		B"
$	SAY ""
$	SAY "If the system should fail to boot properly and you need"
$	SAY "to boot into SYSBOOT, use the command"
$	SAY ""
$	IF (CPUTYPE .EQ. 2) .AND. BOOT_CS THEN -
	SAY "		B/800 DDA0"
$	IF BOOT_CS THEN SAY "		@dduGEN"
$	IF (CPUTYPE .EQ. 2) .AND. .NOT. BOOT_CS THEN -
	SAY "		B/1 ddcu"
$	SAY ""
$	!
$	! Now shut down the system.
$	!
$	@SYS$SYSTEM:SHUTDOWN 0 "Reboot during upgrade procedure" no no -
		 "immediately" yes NONE
$
$	!
$	! On error, exit from the upgrade procedure here.
$	!
$7000:
$	ON ERROR THEN CONTINUE
$	SAY ""
$	SAY "Upgrade to VAX/VMS Version 4.0 incomplete."
$	SAY ""
$	SAY "Error exit from upgrade procedure."
$	SAY "Restart upgrade from last boot of system."
$	SAY ""
$	IF F$LOGICAL("DATAF") .NES. "" THEN CLOSE DATAF
$	ON CONTROL_Y THEN CONTINUE
$	ON ERROR THEN CONTINUE
$	SET DEFAULT SYS$SYSTEM
$	EXIT
