MODULE CHKDMO (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 1
!
! ABSTRACT:
!
!	This routine dismounts the volume in use if it should be.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  29-Apr-1977  17:19
!
! MODIFIED BY:
!
!	V03-026	HH0049		Hai Huang		16-Aug-1984
!		Call IOC$DALLOC_DMT to handle deallocation on dismount.
!
!	V03-025	HH0047		Hai Huang		13-Aug-1984
!		Correct IOC$DALLOC_DEV linkage (UCB address in R5).
!
!	V03-024	ACG0441		Andrew C. Goldstein,	9-Aug-1984  16:31
!		Rework dismount interlocking to eliminate races and
!		uninterlocked processing.
!
!	V03-023	ACG0438		Andrew C. Goldstein,	2-Aug-1984  11:39
!		Release cache locks when deallocating volume caches;
!		use central dequeue routine.
!
!	V03-022	LMP0275		L. Mark Pilant,		23-Jul-1984  14:08
!		Don't try to delete an uninitialized ACL.
!
!	V03-021	CDS0004		Christian D. Saether	20-Jun-1984
!		Temporarily raise the process diocnt around the
!		$QIO so that it will never be blocked.  Also raise
!		ASTCNT so it will not fail for that reason.
!
!	V03-020	CDS0003		Christian D. Saether	 8-May-1984
!		Have UPDATE_DIRSEQ routine queue for exclusive
!		and cancel conversion of the volume lock to invalidate
!		the ucb dirseq counter.  Do not call the routine
!		from the check_dismount routine anymore.
!
!	V03-019	CDS0002		Christian D. Saether	22-Apr-1984
!		Use routine LOCK_COUNT.
!
!	V03-018	ACG0415		Andrew C. Goldstein,	9-Apr-1984  10:56
!		Interface change to ACL_DELETEACL
!
!	V03-017	HH0008		Hai Huang		9-Apr-1984
!		Change R2 thru R5 to NOPRESERVE in the linkage of the
!		EXE$DEAPGDSIZ routine.
!
!	V03-016	LMP0221		L. Mark Pilant,		27-Mar-1984  13:39
!		Change UCB$L_OWNUIC to ORB$L_OWNER and UCB$W_VPROT to
!		ORB$W_PROT.
!
!	V03-015	ACG0408		Andrew C. Goldstein,	23-Mar-1984  14:42
!		Add AST parameter so that impure storage is fully based
!
!	V03-014	CDS0011		Christian D. Saether	 3-Mar-1984
!		Remove UNLOCK_XQP call.  It is done prior to this
!		point now.  Also KILL_CACHE happens in CLEANUP.
!
!	V03-013	CDS0010		Christian D. Saether	10-Feb-1984
!		Changes to deallocate AQB and buffer when last
!		dismount occurs on it.
!		Replace FLUSH_FID call with KILL_CACHE call.
!
!	V03-012	CDS0009		Christian D. Saether	29-Dec-1983
!		Use L_NORM linkage and BIND_COMMON macro.
!
!	V03-011	CDS0008		Christian D. Saether	16-Oct-1983
!		Dequeue blocking lock.
!
!	V03-010	CDS0007		Christian D. Saether	21-Sep-1983
!		Release locks in final stages of dismount so that
!		getlki check on volume lock is not confused by counting
!		an allocation lock for this request.
!
!	V03-009	PRD0039		Paul R. DeStefano	13-Sep-1983
!		Modified to no longer clear volume valid when dismounting
!		the volume.
!
!	V03-008	CDS0006		Christian D. Saether	18-Aug-1983
!		Release volume lock.
!		If this is the last volume lock to be released, then
!		clear the device lock value block.
!
!	V03-007	CDS0005		Christian D. Saether	 2-Aug-1983
!		Remove reference to obselete RVX structure.
!
!	V03-006	CDS0004		Christian D. Saether	 1-Mar-1983
!		Also need BYPASS privilege.
!
!	V03-005	LMP0071		L. Mark Pilant,		20-Jan-1983  13:09
!		Deallocate any ACL segments associated with directory FCB's
!		left in the cache.  This includes correctly calling
!		ACL_DELETEACL with the correct arguments.
!
!	V03-004	CDS0003		Christian D. Saether	13-Jan-1983
!		Save and restore both PCB$Q_PRIV and PHD$Q_PRIVMSK.
!
!	V03-003	CDS0002		Christian D. Saether	28-Dec-1982
!		Need PHY privilege for unload and available functions.
!
!	V03-002	CDS0001		C Saether		31-Jul-1982
!		Change QIOW to QIO with completion AST.
!
!	V03-001	LMP0037		L. Mark Pilant,		28-Jun-1982  15:10
!		Remove the addressing mode module switch.
!
!	V02-007	ACG0226		Andrew C. Goldstein,	24-Nov-1981  22:16
!		Issue IO$_AVAILABLE on DISMOUNT/NOUNLOAD
!
!	V02-006	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';


!
! Part of this routine runs at IPL$_SYNCH, so it must be locked into the
! working set.
!

LOCK_CODE;


FORWARD ROUTINE
	CHECK_DISMOUNT	: L_NORM NOVALUE, ! check volume for dismount
	UPDATE_DIRSEQ	: L_NORM;	! bump volume directory sequence count

GLOBAL ROUTINE CHECK_DISMOUNT : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine checks if the volume in use is marked for dismount and
!	idle. If so, it completes the dismount.
!
! CALLING SEQUENCE:
!	CHECK_DISMOUNT ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_UCB: UCB of unit in use
!	CURRENT_VCB: VCB of volume in use
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	Volume dismounted if appropriate
!
!--

BEGIN

LINKAGE
	DALLOC_DEV	= JSB (REGISTER = 4, REGISTER = 5)
			: NOPRESERVE (3)
			  PRESERVE (2, 4, 5)
			  NOTUSED (6, 7, 8, 9, 10, 11);

LOCAL
	J,				! loop index
	RVT_LENGTH,			! number of entries in RVT
	RVT		: REF BBLOCK;	! address of RVT (or UCB if not a set)

EXTERNAL
	CTL$GL_PCB	: ADDRESSING_MODE(GENERAL),	! PCB address
	CTL$GL_PHD	: ADDRESSING_MODE(GENERAL),	! PHD address
	IOC$GL_AQBLIST	: REF BBLOCK ADDRESSING_MODE (ABSOLUTE); ! AQB listhead

BIND_COMMON;

LINKAGE
	DEAP = JSB (REGISTER=0, REGISTER=1) : NOPRESERVE (2,3,4,5);

EXTERNAL ROUTINE
	CONV_ACCLOCK	: L_NORM,	! convert/dequeue access lock.
	LOCK_COUNT	: L_NORM,	! Determine count of locks granted.
	WAIT_FOR_AST	: L_NORM NOVALUE ADDRESSING_MODE (GENERAL),
					! exit thread until completion ast
	CONTINUE_THREAD	: L_NORM NOVALUE ADDRESSING_MODE (GENERAL),
					! completion ast to resume thread
	LOCK_IODB	: L_NORM,	! lock I/O data base mutex
	UNLOCK_IODB	: L_NORM,	! unlock I/O data base mutex
	DEQ_LOCK	: L_NORM,	! dequeue a lock
	DEALLOCATE	: L_NORM,	! deallocate dynamic memory
	SWITCH_CHANNEL	: L_NORM,	! switch channels to specified UCB
	SEND_ERRLOG	: L_NORM,	! send message to error logger
	EXE$DEAPGDSIZ	: DEAP ADDRESSING_MODE (GENERAL),
					! Deallocate paged pool.
	IOC$DALLOC_DMT	: DALLOC_DEV ADDRESSING_MODE (GENERAL),
					! deallocate device
	ACL_DELETEACL;			! Delete & deallocate ACL segments


! Get the RVT address and iterate on the whole volume set, since deaccessing
! a multi-volume file could make several volumes eligible for dismount. If
! this is not a volume set we special case and exit.
!

J = 1;
RVT = .CURRENT_VCB[VCB$L_RVT];
IF .RVT NEQ .CURRENT_UCB
THEN RVT_LENGTH = .RVT[RVT$B_NVOLS];

DO
    BEGIN

! Declare most locals here for substantial improvement in storage allocation.
!
    LOCAL
	LOCKCOUNT	: INITIAL (0),	! count of volume locks
	STS,				! general status value
	LKSTS		: VECTOR [6],	! lock status block
	AQB		: REF BBLOCK,	! address of XQP AQB
	CACHE		: REF BBLOCK,	! address of volume cache
	UCB		: REF BBLOCK,	! local address of UCB
	ORB		: REF BBLOCK,	! local address of ORB
	VCB		: REF BBLOCK,	! local address of VCB
	FCB		: REF BBLOCK,	! local address of FCB
	WCB		: REF BBLOCK;	! local address of WCB


    UCB = .RVT;				! assume not volume set

    IF .UCB NEQ .CURRENT_UCB		! get UCB if volume set
    THEN UCB = .VECTOR [RVT[RVT$L_UCBLST], .J-1];

! First check the mark for dismount bit.
!

    IF .UCB NEQ 0
    THEN IF .BBLOCK [UCB[UCB$L_DEVCHAR], DEV$V_DMT]
    THEN
	BEGIN

! Do volume switch if necessary.
!

	IF .UCB NEQ .CURRENT_UCB
	THEN SWITCH_CHANNEL (.UCB);

! The volume is marked for dismount. The remainder of the tests and the
! dismount bit twiddling must be done interlocked.
!

	LOCK_IODB ();
	SET_IPL (IPL$_SYNCH);

	ORB = .UCB[UCB$L_ORB];
	VCB = .UCB[UCB$L_VCB];
	IF .VCB[VCB$W_TRANS] NEQ 1 
	THEN
	    UNLOCK_IODB ()
	ELSE
	    BEGIN

! The volume is marked for dismount and idle. Set the dismount in progress
! bit to stop all further activity.
!

	    UCB[UCB$V_DISMOUNT] = 1;
	    UNLOCK_IODB ();

! Make an error log entry to record the dismount.
!

	    SEND_ERRLOG (0, .UCB);

! Release the device as specified in the applicable dismount request
! by issuing either an IO$_UNLOAD or an IO$_AVAILABLE function.
!

	    BEGIN
	    LOCAL
		QIOSTAT,
		PTR		: REF BBLOCK,
		SAVE_PRIV	: VECTOR [4];

! Save and restore PHY_IO privilege around the QIO.
!

	    PTR = .CTL$GL_PCB;
	    PTR [PCB$W_DIOCNT] = .PTR [PCB$W_DIOCNT] + 1;
	    PTR [PCB$W_ASTCNT] = .PTR [PCB$W_ASTCNT] + 1;
	    SAVE_PRIV [0] = .(PTR [PCB$Q_PRIV]);
	    SAVE_PRIV [1] = .(PTR [PCB$Q_PRIV]+4);

	    BBLOCK [PTR [PCB$Q_PRIV], PRV$V_PHY_IO] = 1;
	    BBLOCK [PTR [PCB$Q_PRIV], PRV$V_BYPASS] = 1;

	    PTR = .CTL$GL_PHD;
	    SAVE_PRIV [2] = .(PTR [PHD$Q_PRIVMSK]);
	    SAVE_PRIV [3] = .(PTR [PHD$Q_PRIVMSK]+4);
	    BBLOCK [PTR [PHD$Q_PRIVMSK], PRV$V_PHY_IO] = 1;
	    BBLOCK [PTR [PHD$Q_PRIVMSK], PRV$V_BYPASS] = 1;

! Issue an unload function if unload was requested.
!

	    QIOSTAT = $QIO (
		   CHAN = .IO_CHANNEL,
		   ASTADR = CONTINUE_THREAD,
		   ASTPRM = .BASE,
		   EFN  = EFN,
		   FUNC = (IF TESTBITSC (UCB[UCB$V_UNLOAD])
			   THEN IO$_UNLOAD
			   ELSE IO$_AVAILABLE)
		   );

	    (PTR [PHD$Q_PRIVMSK]) = .SAVE_PRIV [2];
	    (PTR [PHD$Q_PRIVMSK]+4) = .SAVE_PRIV [3];
	    PTR = .CTL$GL_PCB;
	    PTR [PCB$W_DIOCNT] = .PTR [PCB$W_DIOCNT] - 1;
	    PTR [PCB$W_ASTCNT] = .PTR [PCB$W_ASTCNT] - 1;
	    (PTR [PCB$Q_PRIV]) = .SAVE_PRIV [0];
	    (PTR [PCB$Q_PRIV]+4) = .SAVE_PRIV [1];

	    IF .QIOSTAT
	    THEN WAIT_FOR_AST();
	    END;	! of block defining PTR, SAVE_PRIV, QIOSTAT

! If this is a shared mount, raise the device lock to PW to get the
! value block, and prepare for writing it back. If the device is not
! shared, the lock is already at EX. If the device is not cluster
! accessible, there is no lock.
!

	    IF (LKSTS [1] = .UCB [UCB$L_LOCKID]) NEQ 0
		AND .UCB [UCB$L_PID] EQL 0
	    THEN
		BEGIN
		STS = $ENQ (LKMODE = LCK$K_PWMODE,
			    LKSB   = LKSTS,
			    EFN    = EFN,
			    ASTADR = CONTINUE_THREAD,
			    ASTPRM = .BASE,
			    FLAGS  = LCK$M_CONVERT + LCK$M_SYNCSTS
				     + LCK$M_NOQUOTA);

		IF .STS<0,16> EQL SS$_NORMAL
		THEN WAIT_FOR_AST ();
		IF NOT .STS
		OR NOT .LKSTS
		THEN BUG_CHECK (XQPERR, FATAL, 'Unexpected lock manager error');

! Determine whether this is the last (only) lock for this volume.
!

		LOCKCOUNT = LOCK_COUNT (.VCB [VCB$L_VOLLKID]);
		END
	    ELSE
		LOCKCOUNT = 1;		! always 1 if allocated.

! Now relock the I/O database and finish the dismount.
! Mark the volume dismounted and disconnect the VCB from the UCB.
! The high bit of the dirseq is masked off.  This tells RMS the lock
! is disarmed.
!

	    LOCK_IODB ();
	    (UCB [UCB$W_DIRSEQ])<15,1> = 0;
	    BBLOCK [UCB[UCB$L_DEVCHAR], DEV$V_MNT] = 0;
	    BBLOCK [UCB[UCB$L_DEVCHAR], DEV$V_DMT] = 0;
	    BBLOCK [UCB[UCB$L_DEVCHAR], DEV$V_SWL] = 0;
	    UCB[UCB$W_REFC] = .UCB[UCB$W_REFC] - 1;
	    UCB[UCB$V_DISMOUNT] = 0;
	    UCB[UCB$L_VCB] = 0;
	    ORB[ORB$L_SYS_PROT] = 0;
	    ORB[ORB$L_OWN_PROT] = 0;
	    ORB[ORB$L_GRP_PROT] = 0;
	    ORB[ORB$L_WOR_PROT] = 0;
	    ORB[ORB$L_OWNER] = 0;

! Decrement the mount count on the AQB.  If it goes to zero, remove
! this AQB from the list and remember to deallocate it after we're done
! flushing buffers a little further on.
!

	    AQB = .VCB [VCB$L_AQB];
	    IF (AQB [AQB$B_MNTCNT] = .AQB [AQB$B_MNTCNT] - 1) NEQ 0
	    THEN
		AQB = 0
	    ELSE
		BEGIN
		LOCAL P : REF BBLOCK;

		P = .IOC$GL_AQBLIST;
		IF .P EQL .AQB
		THEN
		    IOC$GL_AQBLIST = .AQB [AQB$L_LINK]
		ELSE
		    BEGIN
		    UNTIL .P [AQB$L_LINK] EQL .AQB
		    DO P = .P [AQB$L_LINK];
		    P [AQB$L_LINK] = .AQB [AQB$L_LINK];
		    END;
		END;

! Deallocate the remaining file control blocks and caches.
!

	    UNTIL REMQUE (.VCB[VCB$L_FCBFL], FCB)
	    DO
		BEGIN
		FCB [FCB$W_REFCNT] = 0;		! force deq on conv_acclock
		CONV_ACCLOCK (0, .FCB);		! deq access lock, if any
		IF .BBLOCK[FCB[FCB$R_ORB], ORB$V_ACL_QUEUE]
		THEN ACL_DELETEACL (FCB[FCB$L_ACLFL], 0); ! Delete the ACL
		UNTIL REMQUE (.FCB[FCB$L_WLFL], WCB) ! deallocate all window
		DO DEALLOCATE (.WCB);		! segments
		DEALLOCATE (.FCB);		! release all FCB's
		END;

	    CACHE = .VCB[VCB$L_CACHE];
	    IF .BBLOCK [.CACHE[VCA$L_FIDCACHE], VCA$L_FIDCLKID] NEQ 0
	    THEN DEQ_LOCK (.BBLOCK [.CACHE[VCA$L_FIDCACHE], VCA$L_FIDCLKID]);
	    IF .BBLOCK [.CACHE[VCA$L_EXTCACHE], VCA$L_EXTCLKID] NEQ 0
	    THEN DEQ_LOCK (.BBLOCK [.CACHE[VCA$L_EXTCACHE], VCA$L_EXTCLKID]);
	    DEALLOCATE (.VCB[VCB$L_CACHE]);	! release the cache block

	    CACHE = .VCB[VCB$L_QUOCACHE];
	    IF .CACHE NEQ 0			! release quota cache if present
	    THEN
		BEGIN
		IF .CACHE[VCA$L_QUOCLKID] NEQ 0
		THEN DEQ_LOCK (.CACHE[VCA$L_QUOCLKID]);
		DEALLOCATE (.VCB[VCB$L_QUOCACHE]);
		END;

! Dequeue the volume lock.
!

	    DEQ_LOCK (.VCB [VCB$L_VOLLKID]);

	    IF .RVT NEQ .CURRENT_UCB
	    THEN
		BEGIN
		VECTOR [RVT[RVT$L_UCBLST], .VCB[VCB$W_RVN]-1] = 0;
		RVT[RVT$W_REFC] = .RVT[RVT$W_REFC] - 1;
		IF .RVT[RVT$W_REFC] EQL 0
		THEN
		    BEGIN

		    DEQ_LOCK (.RVT[RVT$L_STRUCLKID]);

! Dequeue blocking lock and disable blocking check on exit.
!

		    IF .RVT[RVT$L_BLOCKID] NEQ 0
		    THEN DEQ_LOCK (.RVT[RVT$L_BLOCKID]);
		    BLOCK_CHECK = 0;

		    DEALLOCATE (.RVT);
		    END;
		END
	    ELSE
		BEGIN
		IF .VCB[VCB$L_BLOCKID] NEQ 0
		THEN DEQ_LOCK (.VCB[VCB$L_BLOCKID]);
		BLOCK_CHECK = 0;
		END;

	    DEALLOCATE (.VCB);			! release the VCB

! If the device lock exists, now demote it as appropriate (to CR if
! the device is not allocated, to EX otherwise). Clear the value
! block if this is the final dismount.
!

	    IF .LKSTS [1] NEQ 0
	    THEN
		BEGIN
		LOCAL LKFLGS;
		LKFLGS = LCK$M_CONVERT + LCK$M_CVTSYS
			+ LCK$M_SYNCSTS + LCK$M_NOQUOTA;

		IF .LOCKCOUNT EQL 1
		THEN
		    BEGIN
		    LKFLGS = .LKFLGS + LCK$M_VALBLK;
		    LKSTS [2] = 0;
		    LKSTS [3] = 0;
		    LKSTS [4] = 0;
		    LKSTS [5] = 0;
		    END;

		STS = $ENQ (LKMODE = IF .UCB [UCB$L_PID] NEQ 0
				     THEN LCK$K_EXMODE
				     ELSE LCK$K_CRMODE,
			    LKSB   = LKSTS,
			    EFN    = EFN,
			    FLAGS  = .LKFLGS);
		IF NOT .STS
		OR NOT .LKSTS
		THEN BUG_CHECK (XQPERR, FATAL, 'Unexpected lock manager error');
		END;

! Call IOC$DALLOC_DMT routine to deallocate the device when appropriate.
!

	    IOC$DALLOC_DMT (.CTL$GL_PCB, .UCB);

	    UNLOCK_IODB ();

	    IF .AQB NEQ 0
	    THEN
		BEGIN
		LOCAL P : REF BBLOCK;
		P = .AQB [AQB$L_BUFCACHE];
		EXE$DEAPGDSIZ (.P, .P [F11BC$L_REALSIZE]);
		DEALLOCATE (.AQB);
		END;

	    END;			! end of dismount processing

	END;				! end of dismount condition

    IF .RVT EQL .CURRENT_UCB THEN EXITLOOP;

    J = .J + 1;				! bump loop index
    END					! end of multi-volume loop
UNTIL .J GTRU .RVT_LENGTH;

END;					! end of routine CHECK_DISMOUNT

GLOBAL ROUTINE UPDATE_DIRSEQ : L_NORM =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine bumps the directory sequence count in the UCB to invalidate
!	RMS directory caches on the volume.
!
!
! CALLING SEQUENCE:
!	UPDATE_DIRSEQ ()
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	CURRENT_UCB: UCB of device in use
!	CURRENT_RVT:
!	  NVOLS: number of volumes in volume set
!	  UCBLST: addresses of UCB's in volume set
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	directory sequence count incremented
!
! ROUTINE VALUE:
!	1
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN

BIND_COMMON;

EXTERNAL ROUTINE
	ALLOCATION_LOCK : L_NORM NOVALUE,
	ALLOCATION_UNLOCK : L_NORM NOVALUE,
	SWITCH_VOLUME	: L_NORM NOVALUE,
	QEX_N_CANCEL	: L_NORM;

LOCAL
	CURRVN,
	HAD_LOCK,
	VCB		: REF BBLOCK,	! VCB address
	UCB		: REF BBLOCK;	! UCB address

! Iterate over the mounted volumes of a volume set if there is one.
!

CURRVN = .CURRENT_RVN;

HAD_LOCK = 0;

IF .LB_LOCKID [0] NEQ 0
THEN
    HAD_LOCK = 1
ELSE
    ALLOCATION_LOCK ();

UCB = .CURRENT_UCB;
IF .CURRENT_RVT NEQ .UCB
THEN
    BEGIN
    INCR J FROM 1 TO .CURRENT_RVT[RVT$B_NVOLS]
    DO
	BEGIN
	VCB = 0;
	UCB = .VECTOR [CURRENT_RVT[RVT$L_UCBLST], .J-1];
	IF .UCB NEQ 0
	THEN
	    IF (VCB = .UCB [UCB$L_VCB]) NEQ 0
	    THEN
		BEGIN
		SWITCH_VOLUME (.J);
		QEX_N_CANCEL (.LB_LOCKID [0]);
		END;
	END;
    SWITCH_VOLUME (.CURRVN);
    END
ELSE
    QEX_N_CANCEL (.LB_LOCKID [0]);

IF NOT .HAD_LOCK
THEN
    ALLOCATION_UNLOCK ();

RETURN 1;

END;					! end of routine UPDATE_DIRSEQ

END
ELUDOM
