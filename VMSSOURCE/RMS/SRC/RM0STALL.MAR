	$BEGIN	RM0STALL,000,RM$RMS0,<STALL FOR I/O COMPLETION>,<NOWRT,QUAD>

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
; Facility: rms32
;
; Abstract:
;		this module includes the various routines to
;		handle required i/o stalls and the restarting
;		of a thread upon i/o completion.
;
; Environment:
;		star processor running starlet exec.
;
; Author: l f laverdure,	 creation date: 4-FEB-1977
;
; Modified By:
;
;	V03-014	RAS0269		Ron Schaefer		14-Mar-1984
;		A little performance boost by re-arranging some code
;		and branches and some instruction optimization.
;		Correctly probe arglist before asynch copy and
;		set -1 addr if not accessible so that RM$EXRMS can
;		give the user an error.
;
;	V03-013	DAS0004		David Solomon		02-Feb-1984
;		In RM$STALL, don't call RM$LOWER_LOCK unless sharing.
;
;	V03-012	KPL0001		Peter Lieberwirth	13-May-1983
;		Change byte immediate MOV to word immediate to account
;		for increased size of FAB-related ASB.
;
;	V03-011	SHZ0001		Stephen H. Zalewski	13-Apr-1983
;		If we enter stall via RM$STALL_LOCK, set a flag to prevent
;		us from reenqueuing for the lock after it was granted.
;
;	V03-010	DAS0003		David Solomon		21-Feb-1983
;		Add entry point RM$CHKAST_ANY the same as RM$BLKFINCHK
;		for use by any RMS AST routine (e.g. it doesn't validate
;		the ASTPRM).
;
;	V03-009	KBT0366		Keith B. Thompson	11-Oct-1982
;		Check for stack fit with new asb$w_sktlen field
;
;	V03-008	KBT0362		Keith B. Thompson	6-Oct-1982
;		asb$b_stksiz is now a word field
;
;	V03-007	KBT0360		Keith B. Thompson	6-Oct-1982
;		Fix check before calling restore_lock
;
;	V03-006	KBT0323		Keith B. Thompson	9-Sep-1982
;		Remove all S0 sharing code and add new STALL_LOCK test
;		on return from stall
;
;	V03-005	JWH0002		Jeffrey W. Horn		07-Sep-1982
;		Remove test definition of IMP$V_RUH accidentally
;		left in JWH0001.  Also fix bugs in JWH0001 in RUSTALL
;		logic by restoring R4, R5 before returning to caller and
;		correcting AST handling.
;
;	V03-004	KBT0217		Keith B. Thompson	23-Aug-1982
;		Reorganize psects
;
;	V03-003	JWH0001		Jeffrey W. Horn		5-Aug-1982
;		Add logic to not stall if called from within
;		the RMS recovery unit handler, but to simply wait
;		in exec mode unitil I/O completes.
;
;	V03-002	KBT0080		Keith B. Thompson	9-Jul-1982
;		Add stall_lock entry point
;
;	V03-001	KDM0002		Kathleen D. Morse	28-Jun-1982
;		Added $PCBDEF.
;
;--
;


	.SBTTL	DECLARATIONS

;
; Include Files:
;

;
; Macros:
;

	$SETEFDEF			; system service $setef definitions
	$IFBDEF
	$IRBDEF
	$ASBDEF
	$FABDEF
	$RABDEF
	$BDBDEF
	$PIODEF
	$PCBDEF
	$IMPDEF
	$RMSDEF

;
; equated symbols
;

	BKP=IRB$L_BKPBITS*8		; bit offset to bookkeeping bits

	.SBTTL	RM$STALL - STALL FOR I/O COMPLETION ROUTINE

;++
;
; RM$STALL		stall for I/O completion routine
; RM$STALL_LOCK		alternate entry point for stall for file lock
; RM$ENBAST		re-enable ASTs
;
; this routine is called whenever a stream must stall for either an i/o
; completion or for access to the shared file database (or part thereof).
;
; this routine first checks if the stalling stream is for a shared file
; and if so, the shared ifab is released.  next it checks to see whether
; an asb (asynchronous context block) exists, and if not, the stalling stream
; is for a fab function, and it allocates an asb, saving its address in the
; ifab.
;
; if this is an asychronous rab operation, copies the argument list into
; the asb, changes the arglist pointer to point to the saved copy, and sets
; the status code to rms$_pending.
;
; if not an asychronous rab operation, sets the status code to rms$_stall.
;
; the routine then saves registers r4 thru r11, the stack along
; with the return pc, and the stack size in the asb.
;
; finally the routine checks for running at exec ast level,
; and if so, merely returns (i.e., it exits from the ast), otherwise
; it re-enables asts, sets the status code into r0, and returns to the
; rms user possibly waiting at user's access mode).
;
;	return sequence depends upon following registers not being
;	destroyed by the return thru the change mode dispatcher to
;	the rms synchronization code:
;
;		r8	structure address
;		r4	$wait type flag (0=same rab, 1=different rab)
;		r3	efn to synchronize on
;
; Calling sequence:
;
;	BSBW	RM$STALL
;
; Input Parameters:
;
;	r11	impure area address
;	r10	ifab address if r9 is an irab address
;	r9	ifab/irab address
;
; Implicit Inputs:
;
; the contents of the ifab/irab and impure area.
;
; Output Parameters:
;
;	This routine does not return directly to the caller,
;	exiting from rms instead. return occurs via the routine
;	rm$stallast, which is entered via the ast signaling the
;	completion of the i/o being awaited by rm$stall. upon
;	return to the caller his entire context with the exception of
;	r0 thru r3 and ap is restored.
;
; Implicit Outputs:
;
;	an asb is allocated, if required, and filled in.
;	the rms event flag may be cleared.
;
; Completion Codes:
;
;	if returning to caller of rms, r0 will be set to
; 	either rms$_pending (async) of rms$_stall (sync).
;	if rms$_stall, this code is intercepted by rms
;	code running in the caller's mode which awaits the
;	completion of the rms operation.
;
;	if exiting from an ast, r0 is undefined.
;
; Side Effects:
;
; rms asts are reenabled.
;
;--



;++
;  note: the following code is not an entry point into this routine
;
;  must allocate an asb for a stalled fab operation.
;  first check for release of sifab.
;  point r11 to pio segment so that if a free page is requred it will be
;  allocated there.
;--

STALLAL:
	$TSTPT	STALLAL
	PUSHL	R11				; save impure area addr
	MOVAL	@#PIO$GW_PIOIMPA,R11		; point to process i/o segment
	MOVL	R11,R1				; allocate space in control page
	MOVZBL	#ASB$C_BLN_FAB/4,R2		; size required
	BSBW	RM$GETBLK			; go allocate space (r1=addr)
	MOVL	(SP)+,R11			; restore impure area addr
	BLBC	R0,ERRDME
	MOVB	#ASB$C_BID,ASB$B_BID(R1)	; make it a real asb

	ASSUME	ASB$W_STKLEN	EQ	0

	MOVW	#<ASB$C_BLN_FAB-ASB$C_BLN_FIX>,-; stuff the size of the
		(R1)				;  save stack area
	MOVL	R1,R2				; copy address to right reg
	MOVL	R1,IFB$L_ASBADDR(R9)		; save the asb address
	BRW	SYNCOP				; join sync operation code

;
; couldn't allocate space for an asb
;

ERRDME:	RMSTBUG	FTL$_ASBALLFAIL

;
; save arglist for async rab operation (first stall only)
;

ASYNCOP:
	MOVL	#RMS$_PENDING,AP	; async status code
	MOVL	IRB$L_ARGLST(R9),R0	; restore arglist addr
					; (note: already probed 1st 2 longwords)
	MOVAL	ASB$L_ARGLST(R2),IRB$L_ARGLST(R9) ; point at temp arglist
	MOVZBL	(R0),R1			; get arg count
	MOVQ	(R0)+,ASB$L_ARGLST(R2)	; save count and FAB/RAB addr
	DECL	R1			; at most 3 args are of interest
	BLEQU	15$			; branch if o.k.
	IFNORD	#4,(R0),20$		; can't read remainder
	MOVL	(R0)+,ASB$L_ARGLST+8(R2); copy ERR= addr
	DECL	R1			; count ERR=
	BLEQU	15$			; all there is
	IFNORD	#4,(R0),25$		; can't read remainder
	MOVL	(R0),ASB$L_ARGLST+12(R2); copy SUC= addr
15$:	BRB	CTXSAV

20$:	MNEGL	#1,ASB$L_ARGLST+8(R2)	; bad ERR= addr
25$:	MNEGL	#1,ASB$L_ARGLST+12(R2)	; bad SUC= addr
	BRB	CTXSAV

RUSTALL:
	MNEGL	#1,IRB$L_ARGLST(R9)			; indicate RU hand stall
	$CLREF_S #IMP$C_ASYEFN				; clear event flag
	CSB	#PIO$V_INHAST,@#PIO$GW_STATUS		; check for AST disabled
	$SETAST_S #1					; enable them if so
	$WAITFR_S #IMP$C_ASYEFN				; wait for event flag
	MOVZWL	IRB$L_IOS(R9),R0			; get status
	MOVQ	(SP)+,R4				; restore R4,R5
	RSB						; go back to thread



;++
;
;  entry point for stall for file lock
;
;  NOTE: This entry point assumes that R10 contains the address of the IFAB.
;
;--

RM$STALL_LOCK::
	$TSTPT	STALLLOCK
	SSB	#IFB$V_STALL_LOCK,(R10)		; Do not retake the lock once it is granted.
	BRB	STALL

;++
;
;  entry point for this routine
;
;--

RM$STALL::
	$TSTPT	STALL

;
; If sharing, lower file lock to CR.
;

	BLBS	IFB$B_BID(R9),10$	; branch if R9 ->IFAB (else R10 ->IFAB)
	TSTL	IFB$L_SFSB_PTR(R10)	; are we sharing?
	BEQL	STALL			; no, skip call to RM$LOWER_LOCK
	BRB	20$			; yes, lower lock on file
10$:	TSTL	IFB$L_SFSB_PTR(R9)	; are we sharing?
	BEQL	STALL			; no, skip call to RM$LOWER_LOCK
20$:	BSBW	RM$LOWER_LOCK		; lower file lock to CR

STALL:	MOVQ	R4,-(SP)		; Save r4,r5
	BBS	#IMP$V_RUH,(R11),RUSTALL; branch if in RU hand

	ASSUME	IFB$L_ASBADDR	EQ	IRB$L_ASBADDR

	MOVL	IFB$L_ASBADDR(R9),R2	; get asb address
	BNEQ	10$			; continue if we have one
	BRW	STALLAL			; stallal if we don't

;
; check for asynchronous rab operation and if so copy arglist into the asb
;

	ASSUME	IMP$W_RMSSTATUS	EQ	0

10$:	BBS	#IMP$V_AST,(R11),CTXSAV	; branch if at ast level

	ASSUME	IFB$V_ASYNC	EQ	IRB$V_ASYNC

	BBC	#IRB$V_ASYNC,(R9),SYNCOP; continue if synch operation
	BRW	ASYNCOP			; branch if async operation

;
; synchronous operation first stall  -  set stall i/o status code
;

SYNCOP:	RMSSUC	STALL,AP

;
; save stack size, registers, and stack (including return pc)
;

CTXSAV:	SUBL3	SP,IMP$L_SAVED_SP(R11),R3	; get stack size

;
;  verify stack fits into asb
;

	ASSUME	ASB$W_STKLEN	EQ	0

	CMPW	R3,(R2)				; does stack fit?
	BGTRU	ERRBUG				; branch if bad
	MOVW	R3,ASB$W_STKSIZ(R2)		; save the size
	ADDL2	#ASB$L_REGS,R2			; get addr of register save area
	MOVL	R6,(R2)+			; save r6
	MOVQ	R7,(R2)+			; save r7 & r8

;
; note: r9 saved as ast parameter
;

	MOVQ	R10,(R2)+		; save r10 & r11
	MOVC3	R3,(SP),(R2)		; copy the stack including
					; saved R4 & R5

;
; set the bit in the IFAB/IRAB which indicates that this RMS thread is
; currently stalled. This bit is cleared within RM$STALLAST, when the
; stalled RMS thread resumes.
;

	ASSUME	IFB$V_RMS_STALL	EQ	IRB$V_RMS_STALL

	SSB	#IFB$V_RMS_STALL,(R9)	; set rms stall bit in IRAB/IFAB

;
; if really there (just return)
;

	BBSC	#IMP$V_AST,(R11),RETURN	; clear at ast level and branch
	BBS	#IRB$V_ASYNC,(R9),30$	; branch if asynchronous i/o

	ASSUME	IRB$B_EFN	EQ	IFB$B_EFN

	MOVZBL	IRB$B_EFN(R9),R3	; set event flag on which to wait
	BNEQ	30$			; branch if non-zero (not rah/wbh)

	ASSUME	IFB$V_ASYNC	EQ	IRB$V_ASYNC
	ASSUME	IFB$V_ASYNCWAIT	EQ	IRB$V_ASYNCWAIT

	BISB2	#<1@<IRB$V_ASYNC-BKP>>!<1@<IRB$V_ASYNCWAIT-BKP>>,-
		IRB$L_BKPBITS(R9)	; show waiting on async efn
	MOVL	#IMP$C_ASYEFN,R3	; and wait on it
30$:

;++
;
;  at non-ast level  -  re-enable asts
;  entry here from $wait with:
;
;	ap = status
;	r8 = rab address
;	r4 = $wait type flag
;	r3 = efn
;--

RM$ENBAST::
	BBCC	#PIO$V_INHAST,@#PIO$GW_STATUS,ENBAST ; clear ast inhibit

;
; branching if clear
;

SETSTS:	MOVL	AP,R0			; restore status code
RETURN: RET				; exit rms
ENBAST:	$SETAST_S	#1		; must re-enable asts
	BRB	SETSTS

;
; Not enough space in asb for stack.  The bad stack size is in R3.
;

ERRBUG:
	RMSTBUG	FTL$_STKTOOBIG

	.SBTTL	RM$STALLAST - AST ENTRY POINT FOR I/O COMPLETE

;++
;
; RM$STALLAST:	AST entry point for I/O complete
; RM$RAHWBHAST:	For read ahead/write behind via ast
; RM$THREADGO:	With r9 already set (for multi buffering).
;
; this routine is entered as a result of an ast delivery for i/o
; completion.  its function is to restart the associated
; thread which stalled as a result of calling rm$stall.  the
; following processing is performed:
;
;	1. checks for asts inhibited, and if so disables asts,
;	   redeclares the current ast, sets a flag to cause
;	   asts to be re-enabled, and exits.
;	2. otherwise, restores r9 (ifab or irab address) from
;	   the ast parameter value, checking for a valid ifab
;	   or irab.
;	3. the asb address is retrieved and the saved
;	   registers (r4-r11) and stack are restored.
;	4. the user structure (fab or rab) is reprobed.
;	5. the indicators imp$l_saved_sp and imp$v_ast are set
;	   appropriately
;	6. if this is a shared file the file lock
;	   is restored for the stream
;	7. return is made to the routine that called rm$stall
;	   with nearly full context restored (r0-r3 and ap are
;	   destroyed, secondary user structures must be
;	   reprobed, absolute stack addresses are different)
;
; Calling sequence:
;
;	entered at rm$stallast via an ast.
;	alternate entry at rm$rahwbhast for read ahead/write behind via ast
;	alternate entry at rm$threadgo with r9 already set (for multi buffering).
;
; Input Parameters:
;
;	astprm	- the ifab or irab address
;	(for rm$rahwbhast astprm = bdb address)
;
; Implicit Inputs:
;
;	the contents of the ifab or irab and related structures.
;
; Output Parameters:
;
;	r4-r11	contents before stall
;	sp	addr of stack having same contents as before stall
;	pc	restored to return in line after call to rm$stall
;	r1-r3,ap destroyed
;	r0	set to contents of 1st word of i/o status block
;
; Implicit Outputs:
;
;	imp$v_ast		set
;	imp$l_saved_sp		set appropriately for new stack
;
; Completion Codes:
;
;	none
;
; Side Effects:
;
;	running at ast level.
;	secondary user structures require re-probing.
;	absolute stack addresses different.
;
;--



;++
;
; entry here via ast for rah/wbh io completion
;
;--

	.ALIGN	QUAD
	$ENTRY	RM$RAHWBHAST,^/^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>/

	MOVL	4(AP),R4		; get bdb addr (astprm)
	BBCS	#BDB$V_AST_DCL,BDB$B_FLGS(R4),10$; set i/o done, branching
					; if no one waiting

	MOVL	BDB$L_WAIT(R4),4(AP)	; change astprm to irab
	BRB	CHECKAST		; go join common code to restart
					; stalled stream
10$:	RET				; dismiss ast

;++
;
; entry here via ast for recovery-unit io completion
;
;--

	.ALIGN	QUAD
	$ENTRY	RM$RUSTALLAST,^/^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>/
	BSBW	RM$CHKAST		; check for asts inhibited

;
; (note this must be a bsbw and
; must immediately follow the entry mask.)
;

RUSTALLAST:
	$SETEF_S #IMP$C_ASYEFN				; set event flag
	SSB	#PIO$V_INHAST,@#PIO$GW_STATUS		; disable ASTs again
	RET		


;++
;
; entry here via normal i/o completion ast
;
;--

	.ALIGN	QUAD
	$ENTRY	RM$STALLAST,^/^M<R2,R3,R4,R5,R6,R7,R8,R9,R10,R11>/

CHECKAST:
	BSBW	RM$CHKAST		; check for asts inhibited

;
; (note this must be a bsbw and
; must immediately follow the entry mask.)
;

;
; See if we are within RU handler, if so, handle in RU ast routine
;

	ADDL3	IRB$L_ARGLST(R9),#1,R0	; RU handler stall?
	BEQL	RUSTALLAST		; branch if so

RM$THREADGO::
					; sets r9 = ifab or irab addr
	$TSTPT	STALAST

;
; clear the bit within the IRAB/IFAB indicating that this thread of RMS is
; stalled, as it no longer is, and allow it to continue
;

	ASSUME	IFB$V_RMS_STALL	EQ	IRB$V_RMS_STALL

	CSB	#IFB$V_RMS_STALL,(R9)	; clear rms stall bit in IRAB/IFAB

	ASSUME	IFB$L_ASBADDR	EQ	IRB$L_ASBADDR

	MOVL	IFB$L_ASBADDR (R9),R1	; get asb addr
	BEQL	ERRASB			; error if none

	ASSUME	IFB$V_BUSY	EQ	IRB$V_BUSY

	BBC	#IRB$V_BUSY,(R9),ERRASB	; branch if stream not busy
	MOVZWL	ASB$W_STKSIZ(R1),R0	; get size of stack
	ADDL2	#ASB$L_REGS,R1		; move to register save area

	MOVL	(R1)+,R6		; restore r6
	MOVQ	(R1)+,R7		; restore r7/r8

;
; note r9 already restored
;

	MOVQ	(R1)+,R10		; restore r10/r11
	MOVL	SP,IMP$L_SAVED_SP(R11)	; save stack entry value
	SUBL2	R0,SP			; allocate required size
	MOVC3	R0,(R1),(SP)		; copy stack including return pc

	ASSUME	IMP$W_RMSSTATUS	EQ	0

	BISB2	#<1@IMP$V_AST>,(R11)	; set flag for at ast level

;++
;
;  restore the file lock mode
;
;--

	ASSUME	<IFB$C_BID&1>	EQ	1
	ASSUME	<IRB$C_BID&1>	EQ	0
	ASSUME	IFB$B_BID	EQ	IRB$B_BID

	BLBC	IFB$B_BID(R9),10$		; branch if irab
	BBSC	#IFB$V_STALL_LOCK,(R9),30$	; branch if stalled for lock and clear flag.
	TSTL	IFB$L_SFSB_PTR(R9)		; is the file shared?
	BEQL	30$				; branch if not
	BRB	20$
10$:	BBSC	#IFB$V_STALL_LOCK,(R10),30$	; branch if stalled for lock and clear flag
	TSTL	IFB$L_SFSB_PTR(R10)		; is the file shared?
	BEQL	30$				; branch if not
20$:	BSBW	RM$RESTORE_LOCK			; restore previous lock mode

;+
;
; reprobe user structure (user could have deleted it from ast or
; async operation)
;
;-

	ASSUME	IFB$B_MODE	EQ	IRB$B_MODE
	ASSUME	<IFB$C_BID&1>	EQ	1
	ASSUME	<IRB$C_BID&1>	EQ	0
	ASSUME	IFB$B_BID	EQ	IRB$B_BID

30$:	BLBS	IFB$B_BID(R9),CHKFAB	; branch if ifab

;
; irab operation
;

	ASSUME	IFB$B_MODE	EQ	IRB$B_MODE
	ASSUME	RAB$C_BLN	LE	FAB$C_BLN

	IFNOWRT	#RAB$C_BLN,(R8),ERRSTRUCT,IRB$B_MODE(R9)
	CMPB	RAB$B_BID(R8),#RAB$C_BID	; it must be a rab
	BEQL	GETBACK				; branch if so

;
; (it could be a forced disconnect, hence a fab)
;

;
; ifab operation
;

CHKFAB:	IFNOWRT	#FAB$C_BLN,(R8),ERRSTRUCT,IFB$B_MODE(R9)
	CMPB	FAB$B_BID(R8),#FAB$C_BID	; it must be a fab
	BNEQ	ERRSTRUCT			; branch if ok.

;+
;
;  set r0 to status from i/o status block and return to thread
;
;-

GETBACK:
	MOVQ	(SP)+,R4		; restore r4 and r5

	ASSUME	IRB$L_IOS	EQ	IFB$L_IOS

	MOVZWL	IRB$L_IOS(R9),R0	; pick up i/o completion status
	RSB				; restart thread


;
;  handle errors
;

;
; no asb found in ifab/irab or stream not busy
;

ERRASB:
	RMSTBUG	FTL$_NOASB

;
; the user has been playing funny games with memory
;

ERRSTRUCT:
	ADDL3	#ASB$L_REGS,IFB$L_ASBADDR(R9),R8	; point r8 into asb

	ASSUME	<ASB$C_BLN_FAB - ASB$L_REGS> GE FAB$C_BLN
	ASSUME	FAB$C_BLN	GE	RAB$C_BLN

	PUSHR	#^M<R1,R2,R3>			; save regs clobbered by mov
	MOVC5	#0,(SP),#0,#FAB$C_BLN,(R8)	; clear out fake fab/rab
	POPR	#^M<R1,R2,R3>			; restore regs
	BRB	GETBACK				; return to thread


	.SBTTL	RM$CHKAST - CHECK FOR ASTS INHIBITED

;++
;
; RM$CHKAST:	Check for ASTs inhibited
; RM$BLKFINCHK:
; RM$CHKAST_ANY:
;
; This routine checks for asts inhibited, and if so disables
; asts, redeclares the current ast, clears the flag
; pio$v_inhast to cause asts to be reenabled when the
; active non-ast code exits, and exits.
;
; If asts are not disabled, sets r9 to the value of the
; ast parameter and checks that it is a valid ifab of
; irab address, and returns to the caller.
;
; The RM$BLKFINCHK and RM$CHKAST_ANY entry points do not validate the AST
; parameter.
;
; calling sequence
;
;	BSBW	RM$CHKAST
;	BSBW	RM$BLKFINCHK
;	BSBW	RM$CHKAST_ANY
;
;
; Input Parameters:
;
;	ap	ast argument list address
;
; Implicit Inputs:
;
;	it is assumed that rm$chkast was called via bsbw as
;	the first instruction of the ast routine.
;
; Output Parameters:
;
;	If return is made to caller,
;	R9 = AST parameter, which is
;		ifab or irab address for RM$CHKAST, or
;		BLB address for RM$BLKFINCHK entry.
;
; Implicit outputs:
;
;	may requeue the ast if currently inhibited.
;
; Condition Codes:
;
;	none.
;
; Side Effects:
;
;	asts may be disabled.
;
;--

	.ALIGN	QUAD

RM$CHKAST::
	MOVL	4(AP),R9		; get ifab/irab address
	BBSC	#PIO$V_INHAST,@#PIO$GW_STATUS,DSBLAST ; branch if inhibited

;
; o.k. to receive ast
; check r9 ifab or irab address for validity
;

	ASSUME	IFB$B_BID	EQ	IRB$B_BID

	CMPB	IRB$B_BID(R9),#IRB$C_BID; is it an irab?
	BEQL	10$			; if so exit
	CMPB	IFB$B_BID(R9),#IFB$C_BID; if not then it must be an ifab?
	BNEQ	20$			; if not an ifab then we goofed
10$:	RSB				; exit

20$:	RMSTBUG	FTL$_BADASTPRM		; oops!

;
; asts are inhibited
; disable asts and redeclare the current ast
;

DSBLAST:
	$TSTPT	ASTDSA
	$SETAST_S	#0		; disable asts
	SUBL3	#5,(SP)+,R1		; compute ast address

;
; (return pc - 3-byte bsw
; - 2-byte entry mask)
;

	$DCLAST_S	ASTADR=(R1),ASTPRM=R9; re-declare the ast
	BLBC	R0,ERRAST
	RET				; and exit

;
; no space to declare an ast
;

ERRAST:	RMSTBUG	FTL$_CANTDOAST

;+
; Alternate entries.
;-

	.ALIGN	QUAD
RM$BLKFINCHK::				; Used in RM0RELEAS.
RM$CHKAST_ANY::				; Note: do not validate ASTPRM.
	MOVL	4(AP),R9		; get AST parameter.
	BBSC	#PIO$V_INHAST,@#PIO$GW_STATUS,DSBLAST ; branch if inhibited
	RSB				; Return to caller if not inhibited.

	.END
