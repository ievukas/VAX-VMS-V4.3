	.TITLE	SYSRTSLST - Rights List Manipulation Services
	.IDENT	'V04-000'

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:  VAX/VMS Executive
;
; ABSTRACT:
;
;	This module contains services to manipulate the system
;	and process rights lists.
;
; ENVIRONMENT:
;
;	VAX/VMS exec, process context
;
;--
;
; AUTHOR:  Andrew C. Goldstein, CREATION DATE:  11-Mar-1983  11:39
;
; MODIFIED BY:
;
;	V03-001	ACG0335		Andrew C. Goldstein,	10-May-1983  19:33
;		Add support for extended rights list
;
;**

;
; Define needed system structures
;
	$ARBDEF				; access rights block
	$DYNDEF				; dynamic structure types
	$PCBDEF				; process control block
	$PRVDEF				; privilege bits
	$SSDEF				; system status codes

;
; Argument list offsets
;
	PIDADR	= 4			; address of PID
	PRCNAM	= 8			; address of process name desc
	ID	= 12			; address of identifier and attrib
	NAME	= 16			; address of identifier name desc
	MODE	= 16			; grant/revoke mode for kernel routine
	PRVATR	= 20			; address for previous attributes

	.SBTTL	EXE$GRANTID - Grant Identifier to Process

;++
;
;	EXE$GRANTID - grant identifier to process
;	EXE$REVOKID - revoke identifier from process
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine grants or revokes the specified identifier
;	to or from the specified process. Process name and right
;	name are translated to PID and identifier as necessary.
;	If a PID of -1 is given, the system rights list is
;	operated on.
;
; CALLING SEQUENCE:
;	EXE$GRANTID (PIDADR, PRCNAM, ID, NAME, PRVATR)
;	EXE$REVOKID (PIDADR, PRCNAM, ID, NAME, PRVATR)
;
; INPUT PARAMETERS:
;	PIDADR: address of PID of process
;	PRCNAM: address of descriptor of process name
;	ID:     address of identifier to grant
;	NAME:   address of descriptor of identifier name
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	PIDADR: address to store resulting PID
;	IDADDR: address to store resulting identifier
;	PRVATR: previous attributes of superseded or revoked identifier
;
; IMPLICIT OUTPUTS:
;	NONE
;
; ROUTINE VALUE:
;	SS$_WASCLR: success; identifier not previously in list
;	SS$_WASSET: success; identifier was previously in list
;	SS$_ACCVIO: some argument is unreadable or unwritable
;	SS$_NOPRIV: caller lacks privileges over target process, or
;		lacks CMKRNL privilege
;	SS$_NOSUCHID: identifier name is not a valid name
;	SS$_RIGHTSFULL: the specified rights list is full
;
; SIDE EFFECTS:
;	Identifier entered in or removed from specified rights list
;
;--

	.PSECT	YEXEPAGED
	.ENABLE	LSB

	.ENTRY	EXE$GRANTID,^M<R2,R3>
	MOVL	#1,R3			; set grant mode
	BRB	10$

	.ENTRY	EXE$REVOKID,^M<R2,R3>
	CLRL	R3			; set revoke mode

10$:	MOVAB	W^EXE$SIGTORET,(FP)	; set local condition handler
	MOVL	ID(AP),R2		; get pointer to identifier
	BNEQ	20$			; branch if ID specified
	CLRQ	-(SP)			; allocate ID buffer on stack
	MOVL	SP,R2			; and set pointer

20$:	TSTL	(R2)			; see if a binary ID is supplied
	BNEQ	30$			; if so, skip conversion
	MOVZWL	#SS$_INSFARG,R0
	TSTL	NAME(AP)		; make sure a name is supplied
	BEQL	40$
	$ASCTOID_S	ID=(R2),-	; translate name into identifier
			ATTRIB=4(R2),-
			NAME=@NAME(AP)
	BLBC	R0,40$			; branch if failed

					; call kernel mode routine with
30$:	PUSHL	PRVATR(AP)		; previous attributes
	MOVQ	R2,-(SP)		; identifier and mode
	MOVQ	PIDADR(AP),-(SP)	; PIDADR & PRCNAM
	PUSHL	#5			; argument count
	PUSHL	SP			; arg list address
	PUSHAB	GRANT_REVOKE		; routine address
	CALLS	#8,SYS$CMKRNL
40$:	RET

	.DISABLE LSB

	.SBTTL	GRANT_REVOKE - Kernel Mode Rights List Handling

;++
;
;	GRANT_REVOKE - kernel mode rights list handling
;
; FUNCTIONAL DESCRIPTION:
;
;	This routine does the kernel mode processing to grant or
;	revoke an identifier. It locates the specified process
;	and searches and modifies the rights list.
;
; CALLING SEQUENCE:
;	GRANT_REVOKE (PIDADR, PRCNAM, ID, MODE, PRVATR)
;
; INPUT PARAMETERS:
;	PIDADR: address of PID of process
;	PRCNAM: address of descriptor of process name
;	ID:     address of identifier to grant
;	MODE:   0 to revoke identifier, 1 to grant
;
; IMPLICIT INPUTS:
;	NONE
;
; OUTPUT PARAMETERS:
;	PIDADR: address to store resulting PID
;	PRVATR: previous attributes of superseded identifier
;
; IMPLICIT OUTPUTS:
;	NONE
;
; SIDE EFFECTS:
;	Identifier entered in specified rights list
;
;--

	.PSECT	AEXENONPAGED
	.ENABLE	LSB
;
; To here if EXE$NAMPID returns with an error. Check for the special
; case of a PID of -1, indicating that the system rights list is to
; be operated on.
;
10$:	CMPL	R0,#SS$_NONEXPR		; check for non-existent process
	BNEQ	20$			; exit if anything else
	MOVL	PIDADR(AP),R1		; get address of PID
	BEQL	20$			; branch if none specified
	IFNORD	#4,(R1),30$		; ACCVIO if PID not readable
	MCOML	(R1),R1			; check for -1
	BNEQ	20$			; branch if not
	INCL	R7			; point to 2nd rights vector entry
	MOVZWL	#SS$_NOSYSNAM,R0	; assume no privilege
	IFPRIV	SYSNAM,50$,R6		; exit if SYSNAM privilege lacking
20$:	RET

30$:	MOVL	#SS$_ACCVIO,R0		; return access violation
	RET
;
; Main subroutine entry point.
;
GRANT_REVOKE:
	.WORD	^M<R2,R3,R4,R5,R6,R7,R8,R9>
	CLRQ	R7			; init rights vector index and free pointer
	MOVL	R4,R6			; save PCB addr in R6
	BSBW	W^EXE$NAMPID		; translate process name to PID
	BLBC	R0,10$			; branch on failure

40$:	MOVL	R4,R6			; save PCB address
50$:	MOVL	PCB$Q_PRIV+ARB$L_RIGHTSLIST(R6)[R7],R4 ; get rights list descriptor
	BEQL	100$			; branch if none present
	ASHL	#-3,(R4)+,R3		; get rights list length
	MOVL	(R4),R4			; and rights list address

60$:	MOVL	ID(AP),R1		; get address of identifier
	IFNORD	#8,(R1),30$		; check readability
	MOVQ	(R1),R1			; get identifier and attributes
	MOVL	PRVATR(AP),R5		; get pointer to prev. atr. longword
	BEQL	90$			; branch if none
	IFNOWRT	#4,(R5),30$		; check writability
	CLRL	(R5)			; initialize to zero
	BRB	90$			; dive into loop
;
; To here when an empty entry is encountered in a list
;
70$:	TSTL	R8			; check if we already have one
	BNEQ	100$			; branch if so
	MOVL	R4,R8			; otherwise save the pointer
	BRB	100$			; chain to next list if any
;
; Search the rights list for the desired identifier
;
80$:	MOVL	(R4),R0			; get next identifier from rights list
	BEQL	70$			; if zero, end of list
	CMPL	R0,R1			; see if matches desired ID
	BEQL	140$			; if yes, exit loop
	ADDL	#8,R4			; next list entry
90$:	SOBGEQ	R3,80$			; loop throught rights list
;
; Identifier not found in this list.
;
100$:	TSTL	R7			; check which list in use
	BNEQ	110$			; branch if not first
	ADDL	#2,R7			; point to extended rights list
	BRB	50$			; and search it

110$:	BLBC	MODE(AP),120$		; branch if attempted revoke
	TSTL	R8			; see if empty entry found
	BEQL	180$			; branch if not
	MOVQ	R1,(R8)			; store identifier in list
120$:	MOVL	#SS$_WASCLR,R0		; if revoke - benign success
130$:	RET
;
; Specified identifier found in rights list
;
140$:	TSTL	R5			; see if prev attributes to be returned
	BEQL	150$			; branch if not
	MOVL	4(R4),(R5)		; store previous attribites
150$:	BLBC	MODE(AP),160$		; branch to do revoke
	MOVQ	R1,(R4)			; store identifier in rights list
	BRB	170$

160$:	ASHL	#3,R3,R3		; compute remaining list size
	ADDL3	#8,R3,R0		; compute size plus one entry
	MOVC5	R3,8(R4),#0,R0,(R4)	; collapse out found list entry
170$:	MOVL	#SS$_WASSET,R0		; set return status
	RET
;
; No empty entries available - extend the rights list
;
180$:	CLRQ	R1			; assume no block present
	MOVL	PCB$Q_PRIV+ARB$L_RIGHTSLIST(R6)[R7],R9 ; point to rights list again
	BEQL	190$			; branch if none exists
	MOVQ	(R9),R1			; get current block size and address
190$:	MOVQ	R1,R3			; save size and addr for later
	ADDL	#ARB$S_LOCALRIGHTS+16,R1 ; increase size and add overhead
	BSBW	EXE$ALONONPAGED		; and allocate a new one
	BLBC	R0,130$			; branch on failure
	MOVL	R2,R5			; save block address
	SUBL3	#16,R1,(R2)+		; set up actual list length
	MOVAB	8(R2),(R2)+		; and descriptor pointer
	MOVW	R1,(R2)+		; block length
	MOVW	#DYN$C_RIGHTSLIST,(R2)+	; and block type
	MOVQ	R4,-(SP)		; save R4 & R5
	MOVC5	R3,(R4),#0,(R5),(R2)	; copy the contents and zero rest
	MOVQ	(SP)+,R4		; restore regs
	BLBC	R7,200$			; branch if extended process list
	MOVQ	(R5),EXE$GQ_RIGHTSLIST	; and store in system descriptor
	MOVL	R4,R0			; get pointer to old block
	BEQL	220$			; branch if none
	SUBL	#12,R0			; point to start of block
	BRB	210$

200$:	MOVL	R5,PCB$Q_PRIV+ARB$L_RIGHTSLIST(R6)[R7] ; set up new pointer
	MOVL	R9,R0
	BEQL	220$			; branch if no old block
210$:	BSBW	EXE$DEANONPAGED		; deallocate the old list
220$:	BRW	50$			; locate free entry and try again

	.DISABLE LSB



	.END
