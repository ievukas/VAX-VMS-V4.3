%TITLE 'Dynamic memory management routines'
MODULE POOL (IDENT = 'V04-000'
		%BLISS32[,ADDRESSING_MODE(EXTERNAL=LONG_RELATIVE,NONEXTERNAL=LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!++
! FACILITY: 
!   DSR (Digital Standard RUNOFF) /DSRPLUS DSRINDEX/INDEX Utility
!
! ABSTRACT: Pooling for dynamic memory is supported.
!
! ENVIRONMENT:	 Transportable
!
! AUTHOR:	 R.W. Friday
!
! CREATION DATE: January, 1979
!
! MODIFIED BY: 
!	002	JPK00024	23-May-1983
!		Modified lowercasing algorithm in PERMUTE. Now lowercase only
!		if word contains only 1 letter or if second letter in word is
!		lowercase. Picked up modules PAGMRG and POOL from DSR/DSRPLUS
!		since they are no longer used by DSR/DSRPLUS.
!
!--

!
! TABLE OF CONTENTS:
!

FORWARD ROUTINE
    CPOOL : NOVALUE,		! Free all memory in a pool.
    FPOOL : NOVALUE,		! Free a pool and all storage.
    GPOOL : NOVALUE,		! Get and initialize a pool
    IPOOL : NOVALUE,		! Initialize an area as a pool control area.
    XPOOL;			! Extend a pool.

!
! INCLUDE FILES:
!

LIBRARY 'NXPORT:XPORT';		! XPORT macros
REQUIRE 'REQ:DMDEFS';		! POOL_..., PAD_..., & GET_SEG_ADDR def's

!
! MACROS:
!

!
! EQUATED SYMBOLS:
!

LITERAL
    TRUE = 1,
    FALSE = 0;

!
! OWN STORAGE:
!

!
! EXTERNAL REFERENCES:
!

%SBTTL 'CPOOL -- Free all memory in a pool'
GLOBAL ROUTINE cpool (area) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	CPOOL deallocates all memory allocated to a pool.
!
! FORMAL PARAMETERS:
!
!	AREA is the address of the pool.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:	
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BIND					!Point to start of segment list.
	SEGMENT_LIST = ..AREA + POOL_CNTRL_SIZE*%UPVAL;

    BIND					!AREA is the address of the pool.
	XAREA = ..AREA : POOL;
  
    !
    ! Don't try to clear an empty pool.
    !
    IF ..AREA EQL 0 THEN RETURN;

    INCR I FROM 0 TO .XAREA [POOL_ACT_PADS] - 1 DO
	BEGIN
	BIND					!Point to a descriptor.
	    SEGMENT = SEGMENT_LIST + (.I*PAD_CNTRL_SIZE*%UPVAL) : PAD;
	
						!Free this chunk of memory.
	$XPO_FREE_MEM ( BINARY_DATA =
			(.SEGMENT[PAD_SIZE],		!Size of segment
			 .SEGMENT[PAD_ADDRESS]) );	!Start of segment.
	END;

    END;			!End of CPOOL

%SBTTL 'FPOOL -- Free a pool and all storage'
GLOBAL ROUTINE fpool (area) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Free an entire storage pool.  All the areas pointed to by the active
!	PADs are freed.  Then the pool area itself is freed.
!
! FORMAL PARAMETERS:
!
!	AREA is the address of the POOL
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BIND			!AREA is the address of the pool.
	XAREA = ..AREA : POOL;

    CPOOL (.AREA);		!First, deallocate all associated storate.

    !
    ! Don't try to free the pool if it's empty.
    !
    IF ..AREA NEQ 0
    THEN
	$XPO_FREE_MEM ( BINARY_DATA = (.XAREA [POOL_ACT_SIZE], ..AREA));

    .AREA = 0;			!Clear pool pointer holder.
    END;			!End of FPOOL

%SBTTL 'GPOOL -- Get and initialize a pool'
GLOBAL ROUTINE gpool (area, count) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	GPOOL generates a pool area and initializes it.
!
! FORMAL PARAMETERS:
!
!	AREA is set to the address of the generated pool.
!	COUNT is the number of extensions to be supported.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns TRUE if generation was successful, otherwise FALSE.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN
    LOCAL
	SIZE;

    SIZE = .COUNT*PAD_CNTRL_SIZE + POOL_CNTRL_SIZE;	!Physical size of pool control area.

    $XPO_GET_MEM (FULLWORDS =.SIZE, RESULT = .AREA);	!Allocate pool control area.
    IPOOL(.AREA, .SIZE);				!Initialize pool control area.
    END;			!End of GPOOL

%SBTTL 'IPOOL -- Initialize a pool control area'
GLOBAL ROUTINE ipool (area, size) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	IPOOL initializes a pool area.
!
! FORMAL PARAMETERS:
!
!	AREA is the address of the generated pool.
!	SIZE is the number of BPVALs in the area.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	NONE
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BIND
	XAREA = ..AREA : POOL;
   
						!Maximum number of areas.
    XAREA [POOL_MAX_PADS] = (.SIZE - POOL_CNTRL_SIZE)/PAD_CNTRL_SIZE;
    XAREA [POOL_ACT_SIZE] = .SIZE;		!Physical size of pool control area.
    XAREA [POOL_ACT_PADS] = 0;			!No areas yet.
    END;			!End of IPOOL

%SBTTL 'XPOOL -- Extend a pool'
GLOBAL ROUTINE xpool (area,size) =

!++
! FUNCTIONAL DESCRIPTION:
!
!	XPOOL extends a dynamic storage pool by allocating a
!	block of dynamic storage and chaining it into the pool.
!
! FORMAL PARAMETERS:
!
!	AREA is the address of the pool to be extended.
!	SIZE is the number of BPVALS needed.
!
! IMPLICIT INPUTS:
!
!	NONE
!
! IMPLICIT OUTPUTS:
!
!	NONE
!
! ROUTINE VALUE:
! COMPLETION CODES:
!
!	Returns address of start of new segment if one could be 
!	could be allocated.  Otherwise returns 0.
!
! SIDE EFFECTS:
!
!	NONE
!
!--

    BEGIN

    BIND			!AREA is the address of the pool.
	XAREA = ..AREA : POOL;

    IF .XAREA [POOL_ACT_PADS] EQL .XAREA [POOL_MAX_PADS] THEN RETURN 0;

    BEGIN
    BIND			!Point to where descriptor gets built.
	NEW_PAD = ..AREA + %UPVAL*( (.XAREA [POOL_ACT_PADS] * PAD_CNTRL_SIZE) + POOL_CNTRL_SIZE ) : PAD;

				!Allocate the segment.
    $XPO_GET_MEM ( FULLWORDS = .SIZE, RESULT = NEW_PAD [PAD_ADDRESS]);
    NEW_PAD [PAD_SIZE] = .SIZE;	!Remember physical size of segment.
				!Update PAD count
    XAREA [POOL_ACT_PADS] = .XAREA [POOL_ACT_PADS] + 1;
    
				!Tell user where the segment is.
    RETURN .NEW_PAD [ PAD_ADDRESS];
    END;

    END;			!End of XPOOL

END				!End of module
ELUDOM
