	.TITLE	IMGDMP
	.IDENT	/V04-000/

;
;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;

;++
; FACILITY:	IMAGE DUMP
;
; ABSTRACT:	Dump address space and other context of a process.
;
;
; ENVIRONMENT:	User mode
;
; AUTHOR:	Wayne Cardoza
;
; CREATION DATE: 14-Feb-1983
;
; MODIFIED BY:
;
;	V03-006	WMC0006		Wayne Cardoza	12-Jun-1984
;		Fix incorrect register after MOVC3
;		Improve performance.
;
;	V03-005	WMC0005		Wayne Cardoza	06-Sep-1983
;		Add .DMP to file name to keep logical name for image from
;		having an effect.
;
;	V03-004	WMC0004		Wayne Cardoza	29-Aug-1983
;		Properly save SP in EXEC mode.
;
;	V03-003	WMC0003		Wayne Cardoza	01-Jul-1983
;		SYS$IMGACT has been redesigned.
;
;	V03-002	WMC0002		Wayne Cardoza	30-Apr-1983
;		More GETJPI items.
;
;	V03-001	WMC0001		Wayne Cardoza	20-Apr-1983
;		Add SYS$PROCDMP translation.
;

;
	.PSECT	$AAIMGDMP,LONG
	.DEFAULT DISPLACEMENT,WORD
;
; Data Structure Definitions
;
	$IMGDMPDEF
	$IHDDEF
	$IHIDEF
	$IFDDEF
	$JPIDEF
	$PSLDEF
	$SFDEF
;
; This is the standard header for debuggers.
; It must be the first thing in the image.
;
BEGIN_DUMP:
	.LONG	0,0
	.LONG	BEGIN_CODE-BEGIN_DUMP

;++
;
; Functional Description:
;	This is the main routine for taking an image dump.  It is JMPed to
;	after being merged in by a condition handler.
;
; Calling Sequence:
;	JMP
;
; Input Parameters:
;	signal and mechanism arrays
;
; Implicit Inputs:
;	a great many
;
; Output Parameters:
;	none
;
; Implicit Outputs:
;	none
;
; Routines Called:
;	none
;
; Routine Value:
;	none
;
; Signals:
;	none
;
; Side Effects:
;	dump taken
;
;--
;
BEGIN_CODE:
;
; Save registers, clean up frame, save misc process context
;
	MOVL	4(AP),R0		; Address of signal array
	MOVL	8(AP),R1		; Address of mechanism array
	MOVL	AP,MISC+IMGDMP$L_AP 	; AP for the condition handler
	MOVQ	12(R1),MISC+IMGDMP$L_R0 ; Get R0 and R1 from mechanism array
	MOVL	SF$L_SAVE_FP(FP),MISC+IMGDMP$L_FP
	MOVC3	#10*4,SF$L_SAVE_REGS(FP),MISC+IMGDMP$L_R2
	ADDL3	#SF$L_SAVE_REGS+<10*4>,FP,MISC+IMGDMP$L_SP
;
; Save the correct SP if we aren't in user mode
;
	MOVPSL 	R0
	EXTZV 	#PSL$V_CURMOD,#PSL$S_CURMOD,R0,R0
	CMPL	R0,#PSL$C_USER
	BEQL	3$			; All OK, this is user mode
	CLRL	MISC+IMGDMP$L_SP	; Tell service not to change anything
	$ADJSTK_S ACMODE = #PSL$C_USER,-
		  NEWADR = MISC+IMGDMP$L_SP ; Get the old value here
;
; Make sure we can check the version number on analysis
;
3$:	MOVL	#IMGDMP$C_VERSION,MISC+IMGDMP$L_VERSION
;
; Some misc data
;
	$GETJPI_S ITMLST = JPILST
	MOVL	@#CTL$AL_STACK+12,MISC+IMGDMP$L_USRSTK ; Top of user stack
;
; Get the image header, create dump file of same name as image
;
	MOVL	@#MMG$IMGHDRBUF+4,R2	; IFD
	MOVZWL	IFD$W_CHAN(R2),IMG_CHANNEL
	$QIOW_S	CHAN = IMG_CHANNEL,-	; Read first block of image header
		FUNC = #IO$_READVBLK,-
		P1   = IMGHDRBUF,-
		P2   = #512,-
		P3   = #1
	BLBS	R0,4$
	BRW	EXIT
4$:	MOVAB	IMGHDRBUF,R2
	MOVZWL	IHD$W_IMGIDOFF(R2),R0	; Get image name
	ADDL	R0,R2
	MOVZBL	IHI$T_IMGNAM(R2),R0	; Length of image name
	ADDB3   #4,R0,DMP_FAB+FAB$B_FNS ; Allow for the .DMP
	MOVC3	R0,IHI$T_IMGNAM+1(R2),MAP+256 ; Move the image name
	MOVL	#^A/.DMP/,(R3)		; Add default extension to end of MOVC3
	MOVAB	MAP+256,DMP_FAB+FAB$L_FNA ; Address of file name
;
;	If the logical name SYS$PROCDMP exists it will be used to place the dump
;
	$TRNLOG_S LOGNAM = SYS$PROCDMP,-
		  RSLBUF = PROCDMPNAM,-
		  RSLLEN = PROCDMPNAM
	BLBC	R0,5$			; Assume no translation
	CMPL	R0,#SS$_NOTRAN
	BEQL	5$
	MOVAB	MAP,R1
	ADDL	PROCDMPNAM,R1		; Get to end of translation
	MOVL	#^A/.DMP/,(R1)		; Add default extension
	MOVAB	MAP,DMP_FAB+FAB$L_DNA	; Put default in FAB
	ADDB3	#4,PROCDMPNAM,DMP_FAB+FAB$B_DNS
5$:	$CREATE FAB = DMP_FAB		; Create dump file
	$CONNECT RAB = DMP_RAB
	BLBS	R0,20$
10$:	BRW	EXIT
20$:	MOVL	#1,DMP_RAB+RAB$L_BKT	; First block
	MOVW	#512,DMP_RAB+RAB$W_RSZ	; One page
	MOVAB	IMGHDRBUF,DMP_RAB+RAB$L_RBF
	$WRITE	RAB = DMP_RAB		; Write image header to dump file
;
; Initialize to write P0 and user stack to dump file
;
	MOVL	#4,DMP_RAB+RAB$L_BKT	; First data block
	MOVL	#3,MAP_BLOCK		; First map block
	MOVL	#3,MISC+IMGDMP$L_FIRST_MAP
	ASHL	#-9,MISC+IMGDMP$L_FREE_P0,R2 ; Page count
	INCL	R2
	CLRL	DMP_RAB+RAB$L_RBF	; VA
	MOVAB	MAP,R5			; Position in map block
	CLRL	(R5)			; Initialize the map
	BSBW	WRITE_IT		; Process P0 space
;
	SUBL3	#^X200,MISC+IMGDMP$L_FREE_P1,R3	; Starting address of used stack
	SUBL3	R3,@#CTL$AL_STACK+12,R2
	ASHL	#-9,R2,R2		; Page count
	MOVL	R3,DMP_RAB+RAB$L_RBF	; VA
	BSBW	WRITE_IT		; Process P1 space
;
	MOVL	MAP_BLOCK,DMP_RAB+RAB$L_BKT
	MOVW	#512,DMP_RAB+RAB$W_RSZ	; One page
	MOVAB	MAP,DMP_RAB+RAB$L_RBF	; Write the last map block
	$WRITE RAB = DMP_RAB
	BLBS	R0,30$
	RSB
;
; Save misc pieces of P1
; Errors on change mode calls are ignored - no priv
;
30$:	$CMEXEC_S  ROUTIN = PRIV_STKS	; Save EXEC and kernel stacks
	MOVL	#CTL$GL_VECTORS,R2	; Base of vector page
	MOVL	R2,R3			; Top (one page)
	MOVL	R2,MISC+IMGDMP$L_VECPAG_VA
	MOVL	NEXT_FILE,MISC+IMGDMP$L_VECPAG_BLK ; The file block to be used
	BSBW	WRITE_MISC
	MOVL	R4,MISC+IMGDMP$L_VECPAG_SIZ ; Actual page count
	MOVL	#PIO$A_TRACE-512,R2	; Base of PIO (RMS) area
	MOVAB	<<5*512>-1>(R2),R3	; Top
	MOVL	R2,MISC+IMGDMP$L_PIO_VA
	MOVL	NEXT_FILE,MISC+IMGDMP$L_PIO_BLK ; The file block to be used
	BSBW	WRITE_MISC
	MOVL	R4,MISC+IMGDMP$L_PIO_SIZ ; Actual page count
	MOVL	#CTL$GL_IAFLINK,R2	; Base of image activator context page
	MOVL	R2,R3			; Top (one page)
	MOVL	R2,MISC+IMGDMP$L_IMGCTX_VA
	MOVL	NEXT_FILE,MISC+IMGDMP$L_IMGCTX_BLK ; The file block to be used
	BSBW	WRITE_MISC
	MOVL	R4,MISC+IMGDMP$L_IMGCTX_SIZ ; Actual page count
	MOVL	#CTL$A_COMMON-<4*512>,R2 ; Base user writeable context pages
	MOVL	#CTL$AG_CMEDATA+512,R3	; Top (one page after AME context)
	MOVL	R2,MISC+IMGDMP$L_USRCTX_VA
	MOVL	NEXT_FILE,MISC+IMGDMP$L_USRCTX_BLK ; The file block to be used
	BSBW	WRITE_MISC
	MOVL	R4,MISC+IMGDMP$L_USRCTX_SIZ ; Actual page count
;
; Write out the misc data block
;
	MOVL	#2,DMP_RAB+RAB$L_BKT	; Misc data block
	MOVW	#512,DMP_RAB+RAB$W_RSZ	; One page
	MOVAB	MISC,DMP_RAB+RAB$L_RBF
	$WRITE	RAB = DMP_RAB		; Write misc data block
	BLBC	R0,EXIT
;
	$CLOSE FAB = DMP_FAB		; Close the dump file
;
EXIT:	RSB


;
; This routine processes a range of address space, filling in the map,
; writing the dump, and skipping unaccessable pages.
;
; Inputs
;	R2 -> page count
;	R5 -> current address map entry
;	DMP_RAB+RAB$L_RBF -> starting VA
;	DMP_RAB+RAB$L_BKT -> starting file block
; Outputs
;	R5 -> updated
;	NEXT_FILE -> next available file block
;
WRITE_IT:
10$:	MOVW	#512,DMP_RAB+RAB$W_RSZ	; One page
	$WRITE	RAB = DMP_RAB		; Try to write the page
	BLBC	R0,50$			; Error - try next page
	MOVL	DMP_RAB+RAB$L_RBF,4(R5)	; Starting VA
	DECL	R2			; One less page
	ADDL	#512,DMP_RAB+RAB$L_RBF	; Next VA
	INCL	DMP_RAB+RAB$L_BKT	; Next file block
	INCL	(R5)			; Another block 
	MOVL	#127,R6			; Start with 127 page write
20$:	MOVL	R2,R3			; Remaining pages
	CMPL	R3,R6			; Check against maximum
	BLEQU	30$
	MOVL	R6,R3			; Write the maximum
30$:	ASHL	#9,R3,R4		; Get byte count
	MOVW	R4,DMP_RAB+RAB$W_RSZ
	$WRITE	RAB = DMP_RAB		; Write next page in run
	BLBS	R0,40$			; Success - continue the run of pages
	DECL	R6			; Try one page less
	BGTR	20$			; Go try again
	BSBB	NEXT_MAP_SEGMENT	; Failure - next segment
	BRB	50$
40$:	ADDL	R3,DMP_RAB+RAB$L_BKT	; Next file block
	ADDL	R4,DMP_RAB+RAB$L_RBF	; Next VA
	ADDL	R3,(R5)			; Keep count
	SUBL	R3,R2			; Remaining pages
	BGTR	20$			; Continue
	BSBB	NEXT_MAP_SEGMENT	; Done with the range - next segment
	BRB	60$
50$:	ADDL	#512,DMP_RAB+RAB$L_RBF
	SOBGTR	R2,10$
60$:	MOVL	DMP_RAB+RAB$L_BKT,NEXT_FILE ; Next available file block
	RSB				; Done with the range
;
;
; Set up the next map segment
; A map block is written if necessary
;
; Inputs
;	R5 -> current map entry
;	MAP_BLOCK -> file block of current bap blcok
; Outputs
;	R5 -> updated
;	MAP_BLOCK -> updated if map was written
;
NEXT_MAP_SEGMENT:
	ADDL	#8,R5			; Get to available space
	PUSHAB	MAP_END
	CMPL	R5,(SP)+		; Is this the end
	BNEQ	10$			; No - use it
	MNEGL	#1,(R5)			; Mark map filled
	PUSHL	DMP_RAB+RAB$L_RBF	; Save VA
	PUSHL	DMP_RAB+RAB$L_BKT	; Save next available block
	MOVL	MAP_BLOCK,DMP_RAB+RAB$L_BKT
	MOVW	#512,DMP_RAB+RAB$W_RSZ	; One page
	MOVAB	MAP,DMP_RAB+RAB$L_RBF
	$WRITE	RAB = DMP_RAB		; Write out this map block
	BLBC	R0,20$
	MOVL	(SP)+,MAP_BLOCK		; Next block is for map
	ADDL3	#1,MAP_BLOCK,DMP_RAB+RAB$L_BKT ; Next available block
	MOVL	(SP)+,DMP_RAB+RAB$L_RBF	; Restore VA
	MOVAB	MAP,R5
10$:	CLRL	(R5)			; No pages yet in map segment
	RSB
;
20$:	BRW	EXIT

;
; Routines to save misc portions of P1 address space
;
;
; Save the EXEC and kernel stacks
;
PRIV_STKS:
	.WORD	0
	MOVL	@#CTL$AL_STACKLIM,R2	; Kernel stack low limit
	MOVL	@#CTL$AL_STACK,R3	; High limit
	MOVL	R2,MISC+IMGDMP$L_KSTK_VA
	MOVL	NEXT_FILE,MISC+IMGDMP$L_KSTK_BLK ; Next file block
	BSBB	WRITE_MISC		; Write out misc address space
	MOVL	R4,MISC+IMGDMP$L_KSTK_SIZ
	MOVL	@#CTL$AL_STACKLIM+4,R2	; Exec stack low limit
	MOVL	@#CTL$AL_STACK+4,R3	; High limit
	MOVL	R2,MISC+IMGDMP$L_ESTK_VA
	MOVL	NEXT_FILE,MISC+IMGDMP$L_ESTK_BLK ; Next file block
	BSBB	WRITE_MISC		; Write out misc address space
	MOVL	R4,MISC+IMGDMP$L_ESTK_SIZ
	RET
;
;
; Write out misc address space
;  Input
;	R2 = low address
;	R3 = high address
;	NEXT_FILE = next available file block
;  Output
;	R4 = page count
;	NEXT_FILE = updated
;
WRITE_MISC:
	MOVL	NEXT_FILE,DMP_RAB+RAB$L_BKT ; First block
	MOVL	R2,DMP_RAB+RAB$L_RBF	; Starting VA
	SUBL	R2,R3			; Byte count
	ASHL	#-9,R3,R3		; Pages - 1
	INCL	R3			; Pages
	CLRL	R4			; No pages
10$:	MULL3	#512,R3,R5		; Byte count
	CMPL	R5,#<127*512>		; Is it greater than maximum
	BLEQU	20$			; No
	MOVL	#<127*512>,R5
20$:	MOVW	R5,DMP_RAB+RAB$W_RSZ
	$WRITE	RAB = DMP_RAB
	BLBC	R0,30$			; Done
	ADDL	R5,DMP_RAB+RAB$L_RBF	; New address
	ASHL	#-9,R5,R5		; Page count
	ADDL	R5,R4			; Count pages
	ADDL	R5,DMP_RAB+RAB$L_BKT	; New file block number
	SUBL	R5,R3			; Pages left
	BGTRU	10$			; More to do
30$:	MOVL	DMP_RAB+RAB$L_BKT,NEXT_FILE ; Next available file block
	RSB

; Data
;
;
IMG_CHANNEL:				; Channel for the image header
	.LONG	0
;
IMGHDRBUF:				; Buffer for image header (first block)
	.BLKB	512
;
MAP:	.BLKB	512			; Address map
MAP_END = .-8				; Last available map slot
;
MISC:	.BLKB	512			; Misc data block
;
SYS$PROCDMP:
	.ASCID	/SYS$PROCDMP/
;
PROCDMPNAM:				; Translation of SYS$PROCDMP
	.LONG	255
	.ADDRESS MAP
;
JPILST:	.WORD	4,JPI$_FREP0VA
	.ADDRESS MISC+IMGDMP$L_FREE_P0
	.LONG	0
	.WORD	4,JPI$_FREP1VA
	.ADDRESS MISC+IMGDMP$L_FREE_P1
	.LONG	0
	.WORD	4,JPI$_ASTEN
	.ADDRESS MISC+IMGDMP$L_ASTEN
	.LONG	0
	.WORD	4,JPI$_ASTACT
	.ADDRESS MISC+IMGDMP$L_ASTACT
	.LONG	0
	.WORD	8,JPI$_CURPRIV
	.ADDRESS MISC+IMGDMP$Q_CURPRIV
	.LONG	0
	.WORD	4,JPI$_EFCS
	.ADDRESS MISC+IMGDMP$L_EFCS
	.LONG	0
	.WORD	4,JPI$_EFCU
	.ADDRESS MISC+IMGDMP$L_EFCU
	.LONG	0
	.WORD	4,JPI$_BIOCNT
	.ADDRESS MISC+IMGDMP$L_BIOCNT
	.LONG	0
	.WORD	4,JPI$_BIOLM
	.ADDRESS MISC+IMGDMP$L_BIOLM
	.LONG	0
	.WORD	4,JPI$_BUFIO
	.ADDRESS MISC+IMGDMP$L_BUFIO
	.LONG	0
	.WORD	4,JPI$_BYTCNT
	.ADDRESS MISC+IMGDMP$L_BYTCNT
	.LONG	0
	.WORD	4,JPI$_BYTLM
	.ADDRESS MISC+IMGDMP$L_BYTLM
	.LONG	0
	.WORD	4,JPI$_DIOCNT
	.ADDRESS MISC+IMGDMP$L_DIOCNT
	.LONG	0
	.WORD	4,JPI$_DIOLM
	.ADDRESS MISC+IMGDMP$L_DIOLM
	.LONG	0
	.WORD	4,JPI$_DIRIO
	.ADDRESS MISC+IMGDMP$L_DIRIO
	.LONG	0
	.WORD	4,JPI$_FILCNT
	.ADDRESS MISC+IMGDMP$L_FILCNT
	.LONG	0
	.WORD	4,JPI$_FILLM
	.ADDRESS MISC+IMGDMP$L_FILLM
	.LONG	0
	.WORD	4,JPI$_TQCNT
	.ADDRESS MISC+IMGDMP$L_TQCNT
	.LONG	0
	.WORD	4,JPI$_TQLM
	.ADDRESS MISC+IMGDMP$L_TQLM
	.LONG	0
	.WORD	4,JPI$_ASTCNT
	.ADDRESS MISC+IMGDMP$L_ASTCNT
	.LONG	0
	.WORD	4,JPI$_ASTLM
	.ADDRESS MISC+IMGDMP$L_ASTLM
	.LONG	0
	.WORD	4,JPI$_ENQCNT
	.ADDRESS MISC+IMGDMP$L_ENQCNT
	.LONG	0
	.WORD	4,JPI$_ENQLM
	.ADDRESS MISC+IMGDMP$L_ENQLM
	.LONG	0
	.LONG	0
;
MAP_BLOCK:				; File block for current address map
	.LONG	0
;
NEXT_FILE:				; Next available file block
	.LONG	0
;
	.ALIGN	LONG
DMP_FAB: $FAB	FAC = <BIO,PUT>,-
		DNM = <.DMP>
DMP_RAB: $RAB	FAB = DMP_FAB,-
		RSZ = 512,-
		ROP = BIO
;
	.END
