%TITLE 'Processor for chapter and appendix headers.'
MODULE outcha (	IDENT = 'V04-000'
		%BLISS32[, ADDRESSING_MODE (EXTERNAL    = LONG_RELATIVE,
					    NONEXTERNAL = LONG_RELATIVE)]
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:	DSR (Digital Standard RUNOFF) / DSRPLUS
!
! ABSTRACT:	Processor for chapter and appendix headers.
!
! ENVIRONMENT:	Transportable
!
! AUTHOR:	K.A. ALDEN	CREATION DATE:	February, 1983


%SBTTL 'Revision History'
! MODIFIED BY:
!
!	019	KFA00019	Ken Alden	14-Sep-1983
!		Added emphasis support for autotitle if user used STCH or
!		  STAX for emphasis.  This is for DSRPLUS only.
!
!	018	KFA00018	Ken Alden	23-Aug-1983
!		Removed eight lines of code that are only needed for
!		  autosubtitle.  These lines were left over from OUTHDR
!		  and prevented autotitle from carrying over any emphasis
!		  the user may have given with the chapter/appendix directives.
!
!	017	KFA00017	Ken Alden	28-Jul-1983
!		Tweaked the flip bit from #16.
!
!	016	KFA00016	Ken Alden	27-Jul-1983
!		Fixed logic for flip that was put in during #14.
!
!	015	KFA00015	Ken Alden	28-Jun-1983
!		Made all calls to this module force a "chapter-oriented" book.
!		Unnumbered chapters will now also reset the page number to one.
!
!	014	KAD00014	Keith Dawson	18-May-1983
!		Removed call to PUTTPG for FLIP output.
!
!	013	KFA00013	Ken Alden	4-May-1983
!		Un-numbered chapter/appendixes now will not change the
!		"chapter" status or page numbers of the document.
!
!	012	KFA00012	Ken Alden	2-May-1983
!		Altered the way subtitles are cleared at the start of
!		  a chapter.  The way it works now is: 1)AUTOTITLE is first
!		  checked. If true, then clear the subtitle. 2) If AUTOTITLE
!		  is false, the subtitle is clear anyway if AUTOSUBTITLE is true.
!
!	011	KFA00011	Ken Alden	29-Apr-1983
!		Added code for the STARTODD bit;
!
!	010	REM00010	Ray Marshall	April-1983
!		Conditionalized for DSRPLUS so it can be used by DSR, too.
!
!	009	RER00009	Ron Randall	07-Apr-1983
!		For DSRPLUS:  Initialize footnote number.
!
!	008	KFA00008	Ken Alden 	16-Mar-1983
!		PUSH/POP_SCA now visible to DSR.
!
!	007	KFA00007	Ken Alden	9-Mar-1983
!		TOC action was changed so the footnote MRA is always
!		  passed to the TOC as well as always being read.  If
!		  AUTOTITLE is on, then the title MRA is also read.  This
!		  passes the bolding/underlining information to the BRN, regardless.
!
!	006	KAD00006	Keith Dawson	07-Mar-1983
!		Global edit of all modules. Updated module names, idents,
!		copyright dates. Changed require files to BLISS library.
!--


%SBTTL 'Module Level Declarations'
!
! TABLE OF CONTENTS:
!
FORWARD ROUTINE
    OUTCHA : NOVALUE;		! Generate the CHAPTER or APPENDIX header
!
! INCLUDE FILES:
!
LIBRARY 'NXPORT:XPORT';			! XPORT Library
REQUIRE 'REQ:RNODEF';			! RUNOFF variant definitions

%IF dsrplus %THEN
LIBRARY 'REQ:DPLLIB';			! DSRPLUS BLISS Library
%ELSE
LIBRARY 'REQ:DSRLIB';			! DSR BLISS Library
%FI

!
! EQUATED SYMBOLS:
!
EXTERNAL LITERAL
    RINTES : UNSIGNED (8);

EXTERNAL LITERAL
    S_FMRA;				!Allocated length for footnote MRA.
!
! OWN STORAGE:
!

!
! MACROS:
!
MACRO			! NOTE: this code depends on the arrangement 
    show_counter =	! of literals in TOCRTY.
	(
	(.caption_minor_type MOD 3) EQL 2
	    OR
	.caption_minor_type EQL min_chapt
	    OR	
	.caption_minor_type EQL min_append
	)
    %;

OWN
    PP_SCA : $H_R_SCA_BLOCK;	!Used in PUSH_SCA, POP_SCA macros (defined in SCA.REQ).
!
! EXTERNAL REFERENCES:
!
EXTERNAL
    ECC : $ECC_BLOCKVECTOR,		! Counters and display codes for Examples, Figures, Tables
    FNCT : FNCT_DEFINITION,
    FOOMRA : FIXED_STRING,
    FOOTSF : VECTOR [TSF_SIZE],
    FS01 : FIXED_STRING,
    GCA : GCA_DEFINITION,
    HCT : HCT_DEFINITION,
    HLDSP : VECTOR [MAX_LEVELS],
    HLLIST : COUNTED_LIST,
    IRA : FIXED_STRING,
    MRA : REF FIXED_STRING,
    TITMRA : FIXED_STRING,
    TITTSF : VECTOR,
    NPAGEN : PAGE_DEFINITION,
    PAGEN : PAGE_DEFINITION,
    PHAN : PHAN_DEFINITION,
    SBTMRA : FIXED_STRING,
    SBTTSF : VECTOR,
    SCA : SCA_DEFINITION,
    TSF : TSF_DEFINITION;

EXTERNAL
    KHAR;

EXTERNAL ROUTINE
    endchr,	endwrd,		gcpage,		gcskip,
    gtpc,	guskip,		outcrg,		outctr,
    outnj,	pacsec,		pacxxx,		putcnt,
    puttpg,	puttxt,		remmrg,		remneg,
    rskips,	scant,		sdxy,		setcas,
    titles,	tstblk;


%SBTTL 'OUTCHA -- Process chapter & appendix headers'
GLOBAL ROUTINE outcha
       (
	lines_before,		lines_after,		test_page_amount,
	counter_major_type,	counter_minor_type,
	counter_value,		counter_display_code,	counter_spaces_after,
	counter_pre_string_length,	counter_pre_string_ptr,
	counter_post_string_length,	counter_post_string_ptr,
	caption_major_type,	caption_minor_type,	caption_case,
	caption_is_centered,	caption_is_flush_right,	caption_is_run_in,
	caption_is_bold,	caption_is_underlined,	put_into_mem_file,
	autosubtitle,		brn_open,		break_before_caption,
	lines_between,		new_page,		startodd,
	tocpage
       ) : NOVALUE =

!++
! FUNCTIONAL DESCRIPTION:
!
!	Processor for chapter and appendix headers.
!
! FORMAL PARAMETERS:
!
! LINES_BEFORE			leave this many blank lines before the header
! LINES_BETWEEN			leave n blank lines between 'CHAPTER' or 'APPENDIX' & caption.
! LINES_AFTER			leave this many blank lines after the (non-run-in) header
! TEST_PAGE_AMOUNT		start a new page unless this many lines remain
! BREAK_BEFORE_CAPTION		start a new line between the counter and caption.
! COUNTER_MAJOR_TYPE		(not implemented) always MAJ_RUNOFF
! COUNTER_MINOR_TYPE		specifies type of header: HL, Example, Figure, Table 
! COUNTER_VALUE			(not used for HLs) numerical value of the counter
! COUNTER_DISPLAY_CODE		(not used for HLs) display code of the counter 
! COUNTER_SPACES_AFTER		leave this many spaces between counter and caption
! COUNTER_PRE_STRING_LENGTH	(not used for HLs) length of pre-counter string 
! COUNTER_PRE_STRING_PTR	(not used for HLs) pointer to pre-counter string 
! COUNTER_POST_STRING_LENGTH	(not used for HLs) length of post-counter string 
! COUNTER_POST_STRING_PTR	(not used for HLs) pointer to post-counter string 
! CAPTION_MAJOR_TYPE		(not implemented) always MAJ_RUNOFF
! CAPTION_MINOR_TYPE		specifies whether or not to show the counter
! CAPTION_CASE			code for the case rules to apply to the caption
! CAPTION_IS_CENTERED		True if caption should be centered
! CAPTION_IS_FLUSH_RIGHT	(not implemented) True if caption should be flush-right
! CAPTION_IS_RUN_IN		True if caption should be run-in with following text
! CAPTION_IS_BOLD		True if caption should be bolded
! CAPTION_IS_UNDERLINED		True if caption should be underlined
! NEW_PAGE			start a new page before CHAPTER or APPENDIX.
!					Always TRUE for DSR.
! STARTODD			force the first page of a chapter to start on an odd page.
! TOCPAGE			insert a page number in the TOC.
! PUT_INTO_MEM_FILE		(not implemented) True if header should be output in .MEM file
! AUTOSUBTITLE			True if header should be picked up as an auto subtitle
! BRN_OPEN			True if header should be sent to the TOC
!
! IMPLICIT INPUTS:	None
!
! IMPLICIT OUTPUTS:	None
!
! ROUTINE VALUE:
! COMPLETION CODES:	None
!
! SIDE EFFECTS:		None
!--

    BEGIN
    LOCAL
	hold_khar,
	hold_lst_sp,
	hold_mra,
	hold_tsf,
	hold_lm,
	hold_wrd_pntr,
	ira_hold : VECTOR [10],
	hold_headers,				!Copy of HCT_HEADERS
	minor_code,
	sca_hold :sca_definition;

    !Report pending errors.
    remneg ();
    remmrg ();
    tstblk (0);

    ! It's a chapter or appendix now.
    npagen [sct_typ] = (IF .counter_minor_type EQL min_chapt_inf
			    THEN sct_chapt
			    ELSE sct_append);
  
    rskips (ira);	    ! Skip spaces and tabs before the text.

    !We may have had chapters OR appendixes already if so begin 
    !counting where we left off.

    !It is possible that we are in the no_page mode and this new chapter
    !will throw a page.  If the layout puts the page number at the bottom
    !of the page then we can't update the NPAGEN until we are at the next
    !page. Otherwise the page numbers come out incorrectly.
    ! For the utilities, we must keep the sction numbering as it used to be.
    !
    npagen [sct_number] = .counter_value;	!To maintain compatability
    npagen [sct_page] = 1;		!number the next page "1"
    npagen [sct_sub_page] = 0;		!turn off subpaging.
    gca_chapt = true;			!Mark document as containing chapters/appendices.

    !
    ! Reset footnote number to 0.
    !
    fnct_number_l = 0;
    fnct_number_r = 0;
    fnct_number   = 0;

    !See if this chapter is supposed to start on a new page.
%IF dsrplus %THEN
    IF NOT .new_page 
    THEN
	BEGIN
     	gtpc (.test_page_amount);
    	outcrg ();    	!Now, force the paper to be positioned as it should.
	END
    ELSE
	BEGIN
%FI
    	!Initialization of new chapter or appendix
%IF dsrplus %THEN
    	IF .startodd
    	THEN				!user wants to start on an odd page.
    	   BEGIN
    	   fs_wchar (mra, rintes);
    	   fs_wchar (mra, %C'w');
    	   fs_wchar (mra, %C' ');
    	   tsf_int_vl = .tsf_int_vl + 3;
    	   END
    	ELSE
%FI
            gcpage ();					!Start a new page
%IF dsrplus %THEN
    	!Turn off page headers for this page if not first title [always].
    	IF NOT .hct_title_always
    	THEN
	    BEGIN
%FI
    	    hold_headers = .hct_headers;		!No header at top of chapters and appendices.
    	    hct_headers = false;
%IF dsrplus %THEN
    	    END;
%FI
     	hct_odd_even = 0;				!Reset odd/even page parity.
%IF dsrplus %THEN
	END;
%FI

    IF .sca_autotitle				!If AUTOTITLE (default), then:
    THEN
        BEGIN					!Clear subtitles
        LOCAL
	    hold_tsf;

	hold_tsf = .tsf;			!Remember current TSF.
	tsf = sbttsf;				!Switch to the TSF for subtitles.
	tsf_int_hl = 0;
	tsf_ext_hl = 0;
	tsf = .hold_tsf;			!Return to main TSF.
	fs_init (sbtmra);			!Complete reset of subtitle MRA.
        END
    ELSE
    	IF .gca_autosubt			!Auto subtitle is on, don't carry
    	THEN					!over past subtitles.
            BEGIN				!Clear subtitles
            LOCAL
	    	hold_tsf;

	    hold_tsf = .tsf;			!Remember current TSF.
	    tsf = sbttsf;			!Switch to the TSF for subtitles.
	    tsf_int_hl = 0;
	    tsf_ext_hl = 0;
	    tsf = .hold_tsf;			!Return to main TSF.
	    fs_init (sbtmra);			!Complete reset of subtitle MRA.
            END;
    
    !Generate the specified number of lines before the header text.
    !This is only done if we are starting the chapter/append on a new page.
%IF dsrplus %THEN
    IF .new_page
    THEN
	BEGIN

        !Skip 9 lines after the title, 8 after the subtitle, else skip 12.
    	IF .hct_title_always
    	THEN
	    IF .hct_subtitle
	    THEN  guskip (.lines_before - 4)
	    ELSE  guskip (.lines_before - 3)
        ELSE
	    guskip (.lines_before);		
	END
    ELSE
%FI
    	guskip (.lines_before);			!end of top-of page-skip

    !Reset header levels.
    INCR i FROM 1 TO .hllist [cl_max_index] DO
	hllist [.i] = 0;

    hllist [cl_index] = 1;

    !Reset entity counts for Example, Figure, Table.
    INCR i FROM 0 TO 2 DO
	ecc [.i, ecc$h_counter] = 0;

    sdxy ();	    !Reset some other things

    IF 	.phan_top_first
    THEN
    !This was specified at the top of the very first page, and so
    !we cannot wait for NEWPAG to advance the page number.
	BEGIN
    	pagen [sct_typ] = .npagen [sct_typ];
	pagen [sct_number] = .npagen [sct_number];
	pagen [sct_page] = .npagen [sct_page];
	npagen [sct_page] = .npagen [sct_page] + 1;
	END;

    !If at the top of any page, output the page number. This is being done
    !because of problems with the the design of RUNOFF. NEWPAG won't output
    !the page number until this header text forces a title to be generated,
    !which may be too late in this case. 
    IF NOT (.gca_op_dev EQL op_dev_flip)
    THEN
    	BEGIN
        IF .brn_open
    	THEN
	    IF .phan_top_first
	    THEN
	    	puttpg (pagen, -1)
	    ELSE
	    	puttpg (npagen, -1);
    	END;


    ! If creating a binary table of contents file, write out the counter and
    ! display descriptor. 
    IF .brn_open
    THEN
	!User is generating a table of contents.
	putcnt ( .counter_major_type
		,.counter_minor_type
		,.tocpage			! Put the page number into TOC?
		,0 				! Always zero--pagen gives this info.
		,.counter_pre_string_length	!
		,.counter_pre_string_ptr	! String before the number.
		,.counter_post_string_length	!
		,.counter_post_string_ptr	! String after the number.
	       );

    !Save scanning information
    push_sca;	!Save the SAVEd SCA bits.

    INCR i FROM 0 TO sca_size - 1 DO
	sca_hold [.i] = .sca [.i];
    hold_lm = .sca_lm;			! Save left margin; it might be used if
					! centering and wrapping.
    INCR i FROM 0 TO 10 - 1 DO		! Save IRA.
	ira_hold [.i] = .ira [.i];
    hold_khar = .khar;			! Save KHAR.

!+
! If either (1) this head will become a title or (2) user is creating a
! .BRN file, then we must scan the text twice. The first time we scan it at full
! width, 150 characters, for title and/or TOC. 
!!! If the title actually runs wider than the current right margin, 
!!! however, we truncate it and append "...".
!-
    IF .sca_autotitle OR .brn_open
    THEN	
	BEGIN

	sca_prescan = false;		!A ';' does NOT terminate this command.
	sca_rskips = true;		!Ignore multiple spaces and tabs.
	sca_fill = false;
	sca_justify = false;
	!Set right margin big to catch long headers.
	sca_lm = 0;
	sca_rm = 150;
	sca_do_ind = false;		!Ignore indexing for subtitle/TOC scan.
	
	!Make a title out of this chapter/appendix title, if that's what the 
	! user desires. The routine TITLES, which normally processes
	! titles/subtitles, contains the necessary logic. 
	IF .sca_autotitle 
	THEN
	    !Collect caption text in title buffer
	    BEGIN
	    !Set up bolding and underlining, if requested.
	    IF (.caption_is_bold AND .sca_do_bld)
	    THEN 
	    	BEGIN
	    	sca_bld = true;
	    	sca_wrd_c_bld = true;
	    	END;

	    IF (.caption_is_underlined AND .sca_do_und)
	    THEN
	     	BEGIN
	     	sca_und = true;
	    	sca_wrd_c_und = true;
	    	END;

	    setcas (.caption_case);	!Set up case rules for the caption text.
	    titles (h_title);		!Use TITLES to get the title.
	    END;						!End of autotitle processing.

	IF .brn_open
	THEN
	    BEGIN

	    !Restore IRA and KHAR.
	    INCR i FROM 0 TO 10 - 1 DO
		ira [.i] = .ira_hold [.i];

	    INCR i FROM 0 TO sca_size - 1 DO
		sca [.i] = .sca_hold [.i];

	    pop_sca;	!Restore the SAVEd SCA bits.
	    !Save scanning information for another scan.
	    push_sca;	!Save the SAVEd SCA bits.

	    INCR i FROM 0 TO sca_size - 1 DO
		sca_hold [.i] = .sca [.i];

	    !Save IRA and KHAR.
	    INCR i FROM 0 TO 10 - 1 DO
		ira_hold [.i] = .ira [.i];

	    !Going to TOC, may or may not be an auto-title.
	    sca_prescan = false;	!A ';' does NOT terminate this command.
	    sca_rskips = true;		!Ignore multiple spaces and tabs.
	    sca_fill = false;
	    sca_justify = false;
	    !Set right margin big to catch long headers.
	    sca_lm = 0;
	    sca_rm = 150;
	    sca_do_ind = false;		!Ignore indexing for title/TOC scan.
	    sca_fc_case = true;
	    sca_fc = true;
	    khar = .hold_khar;

	    ! Switch to the Footnote TSF and MRA (which are not otherwise
	    ! used in .ch/.ax) to collect the header information for the TOC. 

	    hold_mra = .mra;
	    mra = foomra;
	    hold_tsf = .tsf;
	    tsf = footsf;

	    !Before initializing the text descriptors, it is necessary to explicitly
	    !reset the maximum length of the footnote MRA. It is clobbered if any 
	    !footnotes have been processed so far. See the comments in FNONLY around
	    !line 1545 for the detailed justification.
	    fs_maxsize (mra) = s_fmra;

    	    !Now initialize the text descriptors.
	    fs_init (mra);
	    INCR i FROM 0 TO tsf_size - 1 DO
	    tsf [.i] = 0;

	    !Set up bolding and underlining, if requested.
	    IF (.caption_is_bold AND .sca_do_bld)
	    THEN 
	    	BEGIN
	    	sca_bld = true;
	    	sca_wrd_c_bld = true;
	    	END;

	    IF (.caption_is_underlined AND .sca_do_und)
	    THEN
	     	BEGIN
	     	sca_und = true;
	    	sca_wrd_c_und = true;
	    	END;

	    !Set up case rules for the chapter/appendix.
	    setcas (.caption_case);

	    !Scan 150-wide into footnote MRA.
	    scant ();
	    endwrd (false, false, false);

	    !Switch TSF and MRA back.
	    mra = .hold_mra;
	    tsf = .hold_tsf;
	    END;

	!Restore IRA and KHAR.
	INCR i FROM 0 TO 10 - 1 DO
	    ira [.i] = .ira_hold [.i];

	khar = .hold_khar;
	END;				!End of title-or-TOC processing

    INCR i FROM 0 TO sca_size - 1 DO
	sca [.i] = .sca_hold [.i];

    pop_sca;	!Restore the SAVEd SCA bits.
    sca_fill = true;		!Fill the header even if not filling text.
    sca_prescan = false;	!A ';' does NOT terminate this command.
    sca_rskips = true;		!Ignore multiple spaces and tabs.

    !Set up bolding and underlining, if requested.
    IF (.caption_is_bold AND .sca_do_bld)
    THEN 
	BEGIN
	sca_bld = true;
	sca_wrd_c_bld = true;
	END;

    IF (.caption_is_underlined AND .sca_do_und)
    THEN 
	BEGIN
 	sca_und = true;
	sca_wrd_c_und = true;
 	END;
 
    ! Generate the number for the .ch/.ax if not turned off.
    IF show_counter
    THEN
	!User didn't turn off the numbering, so generate the .ch/.ax counter.
	BEGIN
	!Generate the counter in using the case rules for the caption.
	outctr (.counter_minor_type, .caption_case);

	!Put the counter into the output buffer.
	fs_next (fs01) = .fs_start (fs01);

	INCR i FROM 1 TO .fs_length (fs01) DO
	    BEGIN
	    LOCAL
		temp_char;

	    fs_rchar (fs01, temp_char);
	    endchr (.temp_char);
	    END;

        ! End the string so the spaces_after will not get underlined (if in 
	! effect).
        endwrd (false, false, false);
	    
        !Insert spaces after the counter if user didn't say BREAK or BETWEEN. 
        !Do not put out more than 75 spaces regardless of what the user said.
        IF NOT (.break_before_caption OR (.lines_between GTR 0))
        THEN
           BEGIN
	   LOCAL
	      sca_hold_c_bldun,
	      sca_hold_ac_blun;

	   !ENDCHR seems to carry over underlining rules even for spaces.
	   !We must turn off these bits before we add the extra spaces.
	   sca_hold_c_bldun = .sca_wrd_c_bldun;
	   sca_hold_ac_blun = .sca_wrd_ac_blun;

	   INCR i FROM 1 TO (MIN (.counter_spaces_after, 75))  DO
	      	BEGIN
		sca_wrd_c_bldun = 0;
		sca_wrd_ac_blun = 0;
		endchr (%C' ');
		END;

	   !Restore the SCA bits.
	   sca_wrd_c_bldun = .sca_hold_c_bldun;
	   sca_wrd_ac_blun = .sca_hold_ac_blun;
	   END;

        !And now end this 'word'.
        endwrd (false,false,false);
		
	!If the user wants a break before the caption, we must
	!make any adjustments if not flush_left.
	IF .caption_is_centered OR .caption_is_flush_right 
	THEN
	    BEGIN

	    IF	.break_before_caption OR (.lines_between GTR 0)
	    THEN
		BEGIN
	    	tsf_adjust = 
		   (IF .caption_is_centered		!Center the counter.
		   THEN  (.sca_rm - (.tsf_ext_hl))/2  !Ignore spaces_after
		   ELSE					!Force the counter right.
		    .sca_rm - .tsf_ext_hl);
		END
	    ELSE
	    	BEGIN
	    	!No break to be done so we must set the left margin so wrapping 
	    	!will left justify on the caption left margin.
    	    	hold_lm = .tsf_ext_hl;		!Remember for use after SCA is restored.
	    	sca_lm = .tsf_ext_hl;
	    	END;
	    END

	!+
 	! The header is flush-left. If the caption is to immediately follow, 
	! set the left margin so that following text will wrap properly.
	!-
	ELSE
	    !If we aren't doing a break after the counter, we must pull in
	    !the left margin to prevent writing over the counter.
	    IF NOT (.break_before_caption OR (.lines_between GTR 0))
	    THEN
	    !Set left margin beyond the counter so if the caption wraps,
	    !it will be nicely justified with itself.
	    sca_lm = .tsf_ext_hl;

        END			    !End of code to generate chapter counter.
    ELSE
	!
	!If we are not generating a number, then the first character 
	!scanned should be the first character in this MRA.
	!
	sca_fc = true;
!+
! If the header is other than flush-left and user asked for break or 
! some lines between, we have already computed amount to shift it,
! we now put it out on a line by itself.
!-
    gca_line_pend = 1;		!Until we throw the header, a line is pending.

    IF (.break_before_caption) OR (.lines_between GTR 0)
    THEN
       	BEGIN
       	outnj ();			!Put out the counter.
       	gcskip(.lines_between);		!Skip the number of lines requested.
        END;

    ! Write text to .BRN file. The call to PUTTXT is done here, between 
    ! generating the counter and the caption, so that coordination with 
    ! FLIP/BIND is maintained.
    !
    IF .brn_open
    THEN
	! Write to .BRN (or .BFL) file.
	!
	puttxt (.fs_length (foomra), .fs_start (foomra),
		.caption_major_type, .caption_minor_type);

    !Set up case rules for the heading.
    setcas (.caption_case);

    !Tell SCANT that the first character of the header is the first
    !character of a word. (ENDCHR turned this stuff off before.)
    sca_fc_case = true;

    scant ();				!Go get the caption.

    !SCA_WRD_CPEND equals rintes IFF there was a trailing space/tab
    !after the text.  In such a case ENDWRD has already been called.
    !Calling it again would have the effect of forcing an additional
    !space out into TSF/MRA.
    IF .sca_wrd_cpend NEQ rintes
    THEN
	endwrd (false, false, false)
    ELSE

	IF .sca_wrd_lst_und EQL 0
	    AND
	   .sca_wrd_lst_sp GTR 0
	THEN
	    !Chop off trailing spaces/tabs.  When doing so, also back up
	    !intra-line pointer and counter appropriately. If justification
	    !was in effect, also cancel the justification mark that got writ-
	    !ten onto the MRA.
	    !Note that trailing spaces that are underlined are not discarded. 
	    BEGIN
	    LOCAL
		chars_to_drop;

	    chars_to_drop = .sca_wrd_lst_sp +
		( IF .sca_justify 
		  THEN  3 
		  ELSE  0
		) ;
	    fs_length (mra) = .fs_length (mra) - .chars_to_drop;
	    fs_next (mra) = CH$PLUS (.fs_next (mra), -.chars_to_drop);
	    sca_wrd_lst_sp = 0;
	    END;

    !Restore previous scanner rules and set standard rules. 
    hold_wrd_pntr = .sca_wrd_pntr;		!Remember start of next word.
    hold_lst_sp = .sca_wrd_lst_sp;		!Remember last-space info.

    INCR i FROM 0 TO sca_size - 1 DO
	sca [.i] = .sca_hold [.i];

    pop_sca;	!Restore the SAVEd SCA bits again.
    sca_wrd_pntr = .hold_wrd_pntr;		!Restore start of next word.
    sca_wrd_lst_sp = .hold_lst_sp;		!Restore last-space info.

    !This section basically outputs the last line of the header. This
    !may also be the first (if only one line long). What must happen here
    !is if the header is flush-left, the last line (if different from the first,
    !must start at the caption left margin.  The same goes for centered
    !captions if nobreak is in effect and if the caption is so long that
    !it wraps.  Now if it doesn't wrap, then this section will output
    !the whole counter and caption. By using GCA_LINE_PEND, we may determine 
    ! if this is the first line output. If a line has already gone out, then 
    ! SCANT has already ajusted the left margin and no TSF_adjust is needed.

    !If the header is other than flush-left, compute amount to shift it.
    !If user asked for a BREAK or had some LINES_BETWEEN, then the shift
    !for the counter has already been taken care of and this section
    !is only for the caption, otherwise the shift is for the whole header.
    IF .caption_is_centered OR .caption_is_flush_right
    THEN

        IF .gca_line_pend 				!NO line thrown yet.
        THEN
       	    tsf_adjust = 
	   	(IF .caption_is_centered		!Center the counter/and/or caption.
  	         THEN  (.sca_rm - .tsf_ext_hl)/2
		 ELSE  .sca_rm - .tsf_ext_hl     )	!Force the counter/caption right.
	ELSE
    	    IF (.break_before_caption) OR (.lines_between GTR 0)
	    THEN
	        tsf_adjust = 
	   	    (IF .caption_is_centered		!Center the counter/and/or caption.
  	            THEN  (.sca_rm - .tsf_ext_hl)/2
		    ELSE  .sca_rm - .tsf_ext_hl);	!Force the counter/caption right.
		       

    outnj ();			!Force out the caption.

    gcskip (.lines_after);

    sca_sect_empty = true;		!This section is empty now.

    !Set proper case conversion for remainder of section.
    setcas (.gca_case);

    gca_pchax = false;				!Pending .NUMBER CHAPTER/APPENDIX done.

%IF dsrplus %THEN
    IF NOT .hct_title_always AND .new_page
    THEN
%FI
	hct_headers = .hold_headers;		!Restore .HEADERS or .NO HEADERS status.

%IF dsrplus %THEN
    !We know now that the chapter counter has been output.
    !If we have moved to the top of a page fine, but if not,
    !we must update the PAGEN structure. We update if we did not explicitly
    !request a new page.
    IF NOT .new_page
    THEN
	BEGIN
        pagen [sct_number] = .counter_value;
    	pagen [sct_typ]  = (IF .counter_minor_type EQL min_chapt_inf
			        THEN sct_chapt
			        ELSE sct_append);
	npagen [sct_page] = .npagen [sct_page] + 1;
	END;
%FI
    END;					!End of OUTCHA

END						!End of module
ELUDOM
