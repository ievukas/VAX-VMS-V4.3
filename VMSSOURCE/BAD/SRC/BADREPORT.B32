MODULE badreport	(%TITLE	'Analyze/Media Report Generation Module'
			IDENT =	'V04-000') =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!
!
!++
!
! Facility:
!
!	Analyze/Media
!
! Abstract:
!
!	This module contains the routines necessary to produce a listing of the
!	known bad blocks, which have been recorded in the MDBSF and SDBSF.
!
! Author:
!
!	Michael T. Rhodes,		Creation Date: July, 1982
!
! Modified By:
!
!	V03-001	MTR0008		Michael T. Rhodes		22-Jul-1983
!		Covert RMS error reporting mechanism from local signalling to
!		the common UTIL$REPORT_IO_ERROR routine.
!
!--

%SBTTL	'Declarations'
!
! Include Files:
!
REQUIRE 'lib$:baddef';					! Define BAD's structures etc.
LIBRARY 'SYS$LIBRARY:LIB';				! Define VMS structures etc.

!
! Table of Contents:
!
FORWARD ROUTINE
    bad$prepare_report	: NOVALUE,			! Open output file and connect data streams.
    bad$produce_report	: NOVALUE,			! Produce the report.
    bad$close_files	: NOVALUE,			! Close the output files.
    new_page		: NOVALUE,			! Generate a new page.
    put_line		: NOVALUE,			! Write a new line to the output file.
    format_line		: NOVALUE,			! Format the current line.
    get_entry,						! Extract and convert a last track entry to longword.
    list_last_track	: NOVALUE,			! List the last track bad block buffers (MDBSF and SDBSF).
    list_non_lsttrk	: NOVALUE;			! List the non last track bad block buffer SDBSF.

!
! External References:
!
EXTERNAL ROUTINE
    bad$cvt_ltk_long	: ADDRESSING_MODE (GENERAL),	! Convert last track entry to longwords.
    bad$cvt_nlt_long	: ADDRESSING_MODE (GENERAL),	! Convert non last track entry to longwords.
    lib$lp_lines	: ADDRESSING_MODE (GENERAL),	! Obtain line printer lines per page characteristic.
    util$report_io_error: ADDRESSING_MODE (GENERAL);	! Report RMS IO errors from FAB or RAB as appropriate.

EXTERNAL
    bad$ga_comnd_line	: $BBLOCK [dsc$c_s_bln],	! Command line descriptor.
    bad$gl_context	: BITVECTOR [32],		! Context bits.
    bad$ga_device	: $BBLOCK [dsc$c_s_bln],	! Device name descriptor.
    bad$gq_devnam	: $BBLOCK [dsc$c_s_bln],	! Device name descriptor.
    bad$ga_filespec	: $BBLOCK [dsc$c_s_bln],	! File name descriptor.
    bad$gl_maxblock,					! Total number of blocks on the device.
    bad$ga_mdbsf	: REF $BBLOCK,			! Address of the MDBSF.
    bad$ga_sdbsf	: REF $BBLOCK,			! Address of the SDBSF.
    bad$gl_serialnum,					! Serial number for device.
    bad$gl_status;					! Global status.

!
! Define message codes...
!
EXTERNAL LITERAL
    bad$_blk0bad,					! Block 0 is bad.
    bad$_closeout,					! Error closing output.
    bad$_fao,						! Error formatting data with FAO.
    bad$_getmsg,					! Error obtaining message with GETMSG.
    bad$_heading1,					! Heading line 1.
    bad$_heading2,					! Heading line 2.
    bad$_lstmdbsf,					! MDBSF/SDBSF heading line.
    bad$_lstmdbs1,					! MDBSF/SDBSF sub heading line.
    bad$_lstmdbs2,					! MDBSF/SDBSF sub heading line.
    bad$_lstmdbs3,					! MDBSF/SDBSF data line.
    bad$_lstmdbs4,					! MDBSF/SDBSF count line.
    bad$_lstsdbsf,					! SDBSF heading line.
    bad$_lstsdbs1,					! SDBSF sub heading line.
    bad$_lstsdbs2,					! SDBSF sub heading line.
    bad$_lstsdbs3,					! SDBSF data line.
    bad$_lsttotbk,					! Total bad blocks line.
    bad$_lststring,					! List any ASCID string.
    bad$_openout,					! Error opening output file.
    bad$_writeerr;					! Write error.

!
! Private Storage:
!
OWN
    report_fab : $FAB_DECL,				! Address of the report file FAB.
    report_rab : $RAB_DECL,				! Address of the report file RAB.
    line_count,						! Number of lines remaining on a page.
    mdbsf_count,					! Number of entries in the MDBSF.
    page_number,					! Page counter.
    sdbsf_count;					! Number of enteries in the SDBSF.

LITERAL
    formfeed = 12;


%SBTTL	'bad$prepare_report -- Prepare Report File'
GLOBAL ROUTINE bad$prepare_report : NOVALUE =
!++
!
! Functional Description:
!
!    This routine is responsible for obtaining the file spec for an output
!    listing file and establishing the data stream between the program and
!    that file.
!
! Implicit Inputs:
!
!    bad$ga_filespec	- Address of the file spec descriptor.
!
! Side Effects:
!
!    The output listing file is opened.
!
!--		 
BEGIN
$FAB_INIT  (FAB=report_fab,				! Initialize the FAB.
            DNM='ANALYZE.ANL',
            FAC=put,
            FOP=sqo,
            ORG=seq,
            RAT=cr,
            RFM=var);

$RAB_INIT  (RAB=report_rab,				! Initialize the RAB.
            FAB=report_fab,
            RAC=seq);

IF .bad$ga_filespec [dsc$w_length] NEQ 0		! If the user supplied
THEN							! a filespec, use it.
    BEGIN
    report_fab [fab$l_fna] = .bad$ga_filespec [dsc$a_pointer];
    report_fab [fab$b_fns] = .bad$ga_filespec [dsc$w_length];
    END;

report_fab [fab$l_ctx] = bad$_openout;			! Pass the error code
report_rab [rab$l_ctx] = bad$_openout;			! for processing context.
$CREATE (FAB = report_fab, ERR = util$report_io_error);	! Create the output file.
$CONNECT (RAB = report_rab, ERR = util$report_io_error);! Connect the data stream.

page_number = 0;					! Initialize the page number.

END;    ! of GLOBAL ROUTINE bad$prepare_report


%SBTTL	'new_page -- Generate a new page in the listing file'
ROUTINE new_page : NOVALUE =
!++
!
! Functional Description:
!
!    The routine generates a new page in the listing file, resets the line
!    counter, and generates the heading lines.
!
! Implicit Inputs:
!
!    Global data.
!
! Side Effects:
!
!    A new page is generated with headings and the line count is reset.
!
!--
BEGIN

line_count = LIB$LP_LINES() - 9;			! Set the number of lines 
							! remaining on the page.
put_line ($descriptor (%CHAR (formfeed)));		! Skip to top of page.

page_number = .page_number + 1;				! Increment the page number.
format_line (bad$_heading1, 0, .page_number);		! Generate the headings.
format_line (bad$_heading2, bad$ga_device, bad$gq_devnam, .bad$gl_serialnum);
put_line ();						! Skip a couple of lines.
put_line ();

IF .bad$gl_context [ctx_v_ltdevice]
THEN
    BEGIN						! Write the last track
    format_line (bad$_lstmdbs1);			! device sub headings.
    put_line ();
    format_line (bad$_lstmdbs2);
    END
ELSE
    BEGIN						! Write the non last track
    format_line (bad$_lstsdbs1);			! device sub headings.
    put_line ();
    format_line (bad$_lstsdbs2);
    END;

END;    ! of ROUTINE new_page


%SBTTL	'put_line -- Write the current line to the output file'
ROUTINE put_line (line) : NOVALUE =
!++
!
! Functional Description:
!
!    This routine writes the specified line to the output file.
!    Once the line is written the line counter is decremented and if it
!    is LEQ 0 then a new page is generated.
!
! Inputs:
!
!    line	adr	address of the string descriptor for the line.
!
! Implicit Outputs:
!
!    The line has been written to the output file.
!
!--
BEGIN
BIND
    line_desc = line : REF $BBLOCK;

BUILTIN
    NULLPARAMETER;

IF NULLPARAMETER(1)					! If no line descriptor
THEN							! is specified, then we
    report_rab [rab$w_rsz] = 0				! generate a blank line.
ELSE
    BEGIN						! Set the size and address
    report_rab [rab$w_rsz] = .line_desc [dsc$w_length];	! of the line, into the
    report_rab [rab$l_rbf] = .line_desc [dsc$a_pointer];! RAB's record control.
    END;

report_rab [rab$l_ctx] = bad$_writeerr;			! Pass error code.
$PUT (RAB = report_rab, ERR = util$report_io_error);	! Write the line.

line_count = .line_count - 1;				! Decrement the line count.
IF .line_count LEQ 0					! Time for a new page?
THEN
    new_page ();					! Yes -- generate a new page.

END;    ! of ROUTINE put_line


%SBTTL	'format_line -- Format the output line with supplied data'
ROUTINE format_line (message, fao_args) : NOVALUE =
!++
!
! Functional Description:
!
!    This routine calls the system services $GETMSG and $FAOL, which will
!    allow us to obtain the base control string and format the supplied text
!    into a printable record.
!
! Inputs:
!
!    message	val	the message number used to obtain the control text.
!    fao_args	adr	the address of an fao argument list.
!
! Implicit Outputs:
!
!    Once the string has been formatted, we call put_line() to write the
!    record to the output file.
!
!--
BEGIN
LOCAL
    ctr_buffer	: $BBLOCK [132],			! Control string buffer.
    ctr_buf_dsc	: $BBLOCK [dsc$c_s_bln],		! Control string buffer descriptor.

    res_buffer	: $BBLOCK [132],			! Result buffer.
    res_buf_dsc	: $BBLOCK [dsc$c_s_bln];		! Result buffer descriptor.

CH$FILL (0, dsc$c_s_bln, ctr_buf_dsc);			! Initialize the descriptor.
CH$FILL (0, dsc$c_s_bln, res_buf_dsc);
ctr_buf_dsc [dsc$w_length] = res_buf_dsc [dsc$w_length] = 132; ! Set the size.
ctr_buf_dsc [dsc$b_class] = dsc$k_class_d;		! Initialize the descriptor class.
res_buf_dsc [dsc$b_class] = dsc$k_class_d;
ctr_buf_dsc [dsc$a_pointer]= ctr_buffer;		! Set the buffer addresses.
res_buf_dsc [dsc$a_pointer]= res_buffer;

IF NOT (bad$gl_status = $GETMSG (MSGID  = .message,	! Fetch the control string
                          MSGLEN = ctr_buf_dsc,		! with text ONLY.
                          BUFADR = ctr_buf_dsc,
                          FLAGS  = %B'0001'))
THEN
    SIGNAL (bad$_getmsg, 0, .bad$gl_status);

IF NOT (bad$gl_status = $FAOL (CTRSTR = ctr_buf_dsc,	! Format the text with
                        OUTLEN = res_buf_dsc,		! the control string,
                        OUTBUF = res_buf_dsc,		! leaving us the
                        PRMLST = fao_args))		! printable result.
THEN
    SIGNAL (bad$_fao, 0, .bad$gl_status);

put_line (res_buf_dsc);					! Write result to the output file.

END;    ! of ROUTINE format_line


%SBTTL	'bad$produce_report -- Generate report from detected bad sector file(s)'
GLOBAL ROUTINE bad$produce_report : NOVALUE =
!++
!
! Functional Description:
!
!    This routine generates the report from the detected bad sector file(s).
!
! Implicit Inputs:
!
!    Global data.
!
!--
BEGIN
new_page ();						! Generate a new page.
IF .bad$gl_context [ctx_v_ltdevice]
THEN
    BEGIN
    list_last_track ();					! Last track devices.
    put_line ();					! Skip another line and
    format_line (bad$_lsttotbk,				! write the total number
                bad$gq_devnam,				! of blocks on the device
                .bad$gl_maxblock,			! followed by the number of
                .mdbsf_count + .sdbsf_count);		! bad blocks detected.
    END
ELSE
    BEGIN
    list_non_lsttrk ();					! Non last track devices.
    put_line ();					! Skip another line and
    format_line (bad$_lsttotbk,				! write the total number
                bad$gq_devnam,				! of blocks on the device
                .bad$gl_maxblock,			! followed by the number of
                .sdbsf_count);				! bad blocks detected.
    END;

IF .bad$gl_context [ctx_v_blk0bad]			! If block 0 is bad,
THEN							! be sure to include the
    BEGIN						! warning in the report.
    put_line ();					! Space it for visibility.
    format_line (bad$_blk0bad, bad$ga_device);		! Write the warning.
    END;

put_line ();						! Skip a line and write
format_line (bad$_lststring, bad$ga_comnd_line);	! the command line.

END;    ! of GLOBAL ROUTINE bad$produce_report


%SBTTL	'bad$close_files -- Close all open files'
GLOBAL ROUTINE bad$close_files : NOVALUE =
!++
!
! Functional Description:
!
!    Close the output file here to trap any weird problems.
!
! Implicit Inputs:
!
!    report_fab		the address of the report fab.
!
! Side Effects:
!
!    Any problems in closing the output file will be reported via
!    a SIGNAL.
!
!--
BEGIN

report_fab [fab$l_ctx] = bad$_closeout;			! Pass error code.
$CLOSE (FAB = report_fab, ERR = util$report_io_error);	! Close the output file.

END;    ! of GLOBAL ROUTINE bad$close_files


%SBTTL	'list_last_track -- List the contents of both the MDBSF and SDBSF'
ROUTINE list_last_track : NOVALUE =
!++
!
! Functional Description:
!
!    This routine will list each of the entries in the MDBSF and SDBSF.
!    We call the routine "bad$cvt_ltk_long" to convert the entries into
!    seperate SECTOR, TRACK, and CYLINDER values.  As we encounter each
!    entry in the respective bad block file, we increment the respective
!    counts.  The entries are listed line by line and only those entries
!    with valid data are listed.
!
! Implicit Inputs:
!
!    bad$ga_mdbsf	address of the MDBSF buffer.
!    bad$ga_sdbsf	address of the SDBSF buffer.
!
!--
BEGIN
LOCAL
    cyl1,						! Cylinder number of MDBSF entry.
    trk1,						! Track    number of MDBSF enrty.
    sec1,						! Sector   number of MDBSF entry.
    cyl2,						! Cylinder number of SDBSF entry.
    trk2,						! Track    number of SDBSF entry.
    sec2,						! Sector   number of SDBSF entry.
    mdbsf_present,					! We have an MDBSF entry.
    sdbsf_present;					! We have an SDBSF entry.

mdbsf_count = sdbsf_count = 0;				! Initialize the counters.
INCR entry FROM 2 TO bad$k_page_size / 4 - 1 DO
    BEGIN
    IF mdbsf_present = get_entry (.entry, .bad$ga_mdbsf, sec1, trk1, cyl1)
    THEN
        mdbsf_count = .mdbsf_count + 1;

    IF sdbsf_present = get_entry (.entry, .bad$ga_sdbsf, sec2, trk2, cyl2)
    THEN
        sdbsf_count = .sdbsf_count + 1;

    IF .mdbsf_present AND .sdbsf_present
    THEN
        format_line (bad$_lstmdbs3, .sec1, .trk1, .cyl1, .sec2, .trk2, .cyl2)
    ELSE
        BEGIN
        IF .mdbsf_present
        THEN
            format_line (bad$_lstmdbsf, .sec1, .trk1, .cyl1)
        ELSE
            IF .sdbsf_present
            THEN
                format_line (bad$_lstsdbsf, .sec2, .trk2, .cyl2);
        END;

    END;

!
! At the conclusion of listing the contents of the MDBSF and SDBSF,
! write the summary of number of bad sectors recorded.
!
put_line ();						! Skip a line.
format_line (bad$_lstmdbs4, .mdbsf_count, .sdbsf_count);! Write the respective buffer counts.

END;    ! of ROUTINE list_last_track


%SBTTL	'get_entry -- Retrieve the buffer entry'
ROUTINE get_entry (index, buffer, sec, trk, cyl) =
!++
!
! Functional Description:
!
!    This routine extracts a single entry from the indicated buffer.  If the
!    entry which it extracted was the end of file mark (-1), then we return
!    FASLE, else if it was a valid entry, we will convert the entry into its
!    constituent parts and return TRUE.
!
! Inputs:
!
!    index	val	offset from the start of the buffer of the entry,
!    buffer	adr	address of the buffer to extract an entry from.
!
! Outputs:
!
!    sec	adr	address of a longword to receive the sector number.
!    trk	adr	address of a longword to receive the track number.
!    cyl	adr	address of a longword to recieve the cylinder number.
!
!--
BEGIN
MAP
    cyl : REF $BBLOCK,
    trk : REF $BBLOCK,
    sec : REF $BBLOCK,
    buffer : REF VECTOR [, LONG];

LOCAL
    value_present : BYTE;

value_present = FALSE;					! Assume end of file has been reached.
IF .buffer [.index] NEQ -1				! Have we got a valid entry?
THEN							! Yes -- convert the entry
    BEGIN						! into its constituent parts.
    bad$cvt_ltk_long (.buffer [.index], .sec, .trk, .cyl);
    value_present = TRUE;				! Indicate its a valid entry.
    END;

RETURN .value_present;					! Return with boolean indicator.

END;    ! of ROUTINE get_entry


%SBTTL	'list_non_lsttrk -- List the contents of the SDBSF'
ROUTINE list_non_lsttrk : NOVALUE =
!++
!
! Functional Description:
!
!    List the contents of the non last track SDBSF.  Here we have a count of
!    the number of used bad block descriptors and will iteratively extract
!    and convert the descriptor into our output format.  The completion will
!    simply list the total number of bad blocks recorded.
!
! Implicit Inputs:
!
!    bad$ga_sdbsf	address of the SDBSF buffer.
!
!--
BEGIN
LOCAL
    lbn,
    count : BYTE;

sdbsf_count = 0;					! Initialize counter.
INCR entry FROM .bad$ga_sdbsf + nlt_k_headersiz		! Extract the used
           TO .bad$ga_sdbsf + nlt_k_headersiz +		! bad block descriptors
              (.bad$ga_sdbsf [nlt_b_usedbbdsc] * 2 - 4)	! and convert the entrys
           BY 4 DO					! into longwords, which
    BEGIN						! will be used in the
    bad$cvt_nlt_long (..entry, count, lbn);		! listing.  Keep a count
    sdbsf_count = .sdbsf_count + .count + 1;		! of the number of bad
    format_line (bad$_lstsdbs3, .lbn, .count);		! blocks as we write the
    END;						! listing.

END;    ! of ROUTINE list_non_lsttrk

END
ELUDOM
