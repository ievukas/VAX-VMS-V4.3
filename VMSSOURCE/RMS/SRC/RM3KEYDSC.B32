MODULE RM3KEYDSC (LANGUAGE (BLISS32) ,
		IDENT = 'V04-000'
		) =
BEGIN
!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:	RMS32 INDEX SEQUENTIAL FILE ORGANIZATION
!
! ABSTRACT:
!                This module contains routines to allocate the key descriptors
!
!
! ENVIRONMENT:
!
!		VAX/VMS OPERATING SYSTEM
!
!--

!
! AUTHOR:	Wendy Koenig     CREATION DATE:        	27-MAR-78  9:28
!
! MODIFIED BY:
!
!	V03-006	RAS0284		Ron Schaefer		30-Mar-1984
!		Fix STV value on error paths for RMS$_RPL and RMS$_WPL errors.
!
!	V03-005 MCN0002		Maria del C. Nasr	15-Mar-1983
!		More linkages reorganization
!
!	V03-004 MCN0001		Maria del C. Nasr	28-Feb-1983
!		Reorganize linkages
!
!	V03-003	TMK0001		Todd M. Katz		08-Sep-1982
!		Add support for prologue 3 SIDRs. This involves correctly 
!		setting the bucket type field within each alternate key of 
!		reference index descriptor according to whether SIDR key 
!		compression is or isn't enabled. 
!
!	V03-002	KBT0168		Keith B. Thompson	23-Aug-1982
!		Reorganize psects
!
!	V03-001	KBT0057		Keith B. Thompson	9-Jun-1982
!		Add routine rm$get_next_key and change the way key descriptors
!		are handled
!
!   V02-011	PSK0003		Paulina S. Knibbe	17-Apr-1981
!		Change the logic to initialize the bktyp fields
!		because we are keeping track of compression status
!		in the prologue
!
!   V02-010	PSK0002		Paulina S. Knibbe	10-Apr-1981
!		Fill in the bktyp fields in the index descriptor when
!		it is allocated an initialized
!
!   V02-009	PSK0001		Paulina S. Knibbe	12-Mar-1981
!		Add datatype information to each segment in the
!		IDX structure
!
!   V02-008	KPL0001		Peter Lieberwirth	12-Mar-1981
!		Rename PSECT so branches to KEY_DESC won't break.
!
!   V02-007	REFORMAT	Paulina S. Knibbe	23-Jul-1980
!
!   V0006	RAS0013		R. A. Schaefer		22-Jan-1980	14:05
!		Change NID error to DME.
!
!
! REVISION HISTORY:
!
!   D. H. Gillespie, 	2-AUG-78  14:31
!   X0002 - add one long word to in core key descriptor containing area numbers
!
!   Wendy Koenig, 	3-AUG-78  12:38
!   X0003 - ACCESS KEY DESCRIPTORS DIRECTLY, RATHER THAN THRU VBN 1 LINKS
!
!   Wendy Koenig, 	24-OCT-78  14:02
!   X0004 - MAKE CHANGES CAUSED BY SHARING CONVENTIONS
!
!   Wendy Koenig, 	6-NOV-78  13:04
!   X0005 - MAKE PLG ERRORS INTO RPL
!
!****

LIBRARY 'RMSLIB:RMS';

REQUIRE 'RMSSRC:RMSIDXDEF';

! Define default psects for code
!
PSECT
    CODE = RM$RMS3(PSECT_ATTR),
    PLIT = RM$RMS3(PSECT_ATTR);

! Define a local linkage
!
MACRO
    L_FILL_IN =
	RL$FILL_IN = JSB(REGISTER=6) : GLOBAL(R_IFAB,R_IDX_DFN) NOTUSED(8,9)
		NOPRESERVE(2,3,6)
%;

! Define linkage
!
LINKAGE
    L_CACHE,
    L_CHKSUM,
    L_FILL_IN,
    L_GETSPC,
    L_LINK_7_10_11,
    L_RABREG_7,
    L_RELEASE;

! External routines
!
EXTERNAL ROUTINE
    RM$CACHE	: RL$CACHE,
    RM$CHKSUM	: RL$CHKSUM,
    RM$GETBLK	: RL$GETSPC,
    RM$RELEASE	: RL$RELEASE;

! Forward routines
!
FORWARD ROUTINE
    FILL_IN		: RL$FILL_IN,
    RM$AL_KEY_DESC	: RL$LINK_7_10_11,
    RM$KEY_DESC		: RL$RABREG_7,
    RM$GET_NEXT_KEY	: RL$LINK_7_10_11;

! Define some local macros
!
MACRO
    KEYOFFSET (SYMBOL, OFF) =
	$BYTEOFFSET(SYMBOL)+(OFF*($BYTESIZE(SYMBOL))),
	$BITPOSITION(SYMBOL),
	$FIELDWIDTH(SYMBOL),
	$EXTENSION(SYMBOL)
%,
    POSITIONMAC (OFF) =
	OFF,$BITPOSITION(IDX$W_POSITION),
	    $FIELDWIDTH(IDX$W_POSITION),$EXTENSION(IDX$W_POSITION)
%,
    SIZEMAC (OFF) =
	OFF+2,$BITPOSITION(IDX$B_SIZE),
	    $FIELDWIDTH(IDX$B_SIZE),$EXTENSION(IDX$B_SIZE)
%,
    TYPEMAC (OFF) =
	OFF+3,$BITPOSITION(IDX$B_TYPE),
	    $FIELDWIDTH(IDX$B_TYPE),$EXTENSION(IDX$B_TYPE)
%;


%SBTTL	'FILL_IN'
ROUTINE FILL_IN ( DESC ) : RL$FILL_IN =

!++
!
! FILL_IN
!
!
! CALLING SEQUENCE:
!
!	FILL_IN (DESC)
!
! INPUT PARAMETERS:
!
!	DESC is the address of the key descriptor in prologue
!
! IMPLICIT INPUTS:
!
!	R7 -- INDEX DESCRIPTOR address
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!	none
!
! ROUTINE VALUE:
!
!	always RMSSUC
!
! SIDE EFFECTS:
!
!	fills in the index descriptor
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IFAB_STR,
	R_IDX_DFN_STR;

    MAP
	DESC	: REF BBLOCK;

    LITERAL
	BEGINNING_IDX = $BYTEOFFSET(IDX$B_IANUM),
	BEGINNING_KEY = $BYTEOFFSET(KEY$B_IANUM),
	POSOFFSET = $BYTEOFFSET(IDX$W_POSITION);

    DECR I FROM .DESC [ KEY$B_SEGMENTS ] - 1 TO 0 DO
	BEGIN

	!
	!
	IDX_DFN [ POSITIONMAC( POSOFFSET + ( 4 * .I ) ) ] = 
	    .DESC [ KEYOFFSET( %QUOTE KEY$W_POSITION,.I ) ];
	IDX_DFN [ SIZEMAC( POSOFFSET + ( 4 * .I ) ) ] = 
	    .DESC [ KEYOFFSET( %QUOTE KEY$B_SIZE,.I ) ];
	IDX_DFN [ TYPEMAC( POSOFFSET + ( 4 * .I ) ) ] =
	    KEY$C_STRING;
	END;

    IF .IFAB [ IFB$B_PLG_VER ] GTR PLG$C_VER_IDX
    THEN
	
	! Load up the datatype fields for each segment (potentially 
	!  different)
	!
	BEGIN
	DECR I FROM .DESC [ KEY$B_SEGMENTS ] - 1 TO 0 DO

	    IDX_DFN [ TYPEMAC( POSOFFSET + ( 4 * .I ) ) ] =
		.DESC [ KEYOFFSET( %QUOTE KEY$B_TYPE,.I ) ];
	END
    ELSE

	! Fix up the first datatype to be correct (in case this 
	! wasn't a segmented key.
	!
	IDX_DFN [ TYPEMAC( POSOFFSET ) ] = .DESC [ KEY$B_DATATYPE ];

    CH$MOVE( IDX$C_FIXED_BLN - BEGINNING_IDX,
	     .DESC + BEGINNING_KEY,
	     .IDX_DFN + BEGINNING_IDX );

    ! Fill in the bucket types for this index
    !
    IF .IFAB [ IFB$B_PLG_VER ] LSSU PLG$C_VER_3
    THEN
	BEGIN
	IDX_DFN [ IDX$B_DATBKTYP ] = IDX$C_V2_BKT;
	IDX_DFN [ IDX$B_IDXBKTYP ] = IDX$C_V2_BKT;
	END
    ELSE

	! First initialize the data bucket type (if 
	! this is the primary key index)
	!
	BEGIN

	IF .IDX_DFN [ IDX$B_KEYREF ] EQL 0
	THEN
	    
	    IF .IDX_DFN [ IDX$V_REC_COMPR ]
	    THEN

		IF .IDX_DFN [ IDX$V_KEY_COMPR ]
		THEN

		    ! Primary key is compressed, data is compressed
		    !
		    IDX_DFN [ IDX$B_DATBKTYP ] = IDX$C_CMPCMP

		ELSE

		    ! Primary key is not compressed, data is compressed
		    !
		    IDX_DFN [ IDX$B_DATBKTYP ] = IDX$C_NCMPCMP

	    ELSE

		IF .IDX_DFN [ IDX$V_KEY_COMPR ]
		THEN

		    ! Primary key is compressed, data is not compressed
		    !
		    IDX_DFN [ IDX$B_DATBKTYP ] = IDX$C_CMPNCMP

		ELSE

		    ! Primary key is not compressed, data is not compressed
		    !
		    IDX_DFN [ IDX$B_DATBKTYP ] = IDX$C_NCMPNCMP

	! Otherise, this must be an alternate key of reference. Initialize
	! the SIDR bucket type.
	!
	ELSE
	    IF .IDX_DFN[IDX$V_KEY_COMPR]
	    THEN
		IDX_DFN[IDX$B_DATBKTYP] = IDX$C_CMPCMP
	    ELSE
		IDX_DFN[IDX$B_DATBKTYP] = IDX$C_NCMPNCMP;

	! Now initialize the index bucket type
	!
	IF .IDX_DFN [ IDX$V_IDX_COMPR ]
	THEN
	    IDX_DFN [ IDX$B_IDXBKTYP ] = IDX$C_CMPIDX
	ELSE
	    IDX_DFN [ IDX$B_IDXBKTYP ] = IDX$C_NCMPIDX;

	END;

    RETURN RMSSUC()

    END;


%SBTTL	'RM$AL_KEY_DESC'
GLOBAL ROUTINE RM$AL_KEY_DESC ( DESC,VBN,OFFSET ) : RL$LINK_7_10_11 =

!++
!
! RM$AL_KEY_DESC
!
!	This routine allocates the in-memory index descriptor,
!	links it in, and fills it in.
!
!	The format of the index descriptor list must be as followes:
!
!		o The first index descriptor is pointer to by ifb$l_idx_ptr
!
!		o The index descriptors are linked through idx$l_idxfl
!
!		o The last index descriptor has idx$l_idxfl set to zero
!
!		o The primary key descriptor (key_ref = 0) must be the
!		  first descriptor in the list and have a descriptor
!		  number of zero (i.e. idx$b_desc_no = 0).
!
!		o Non primary key descriptors may appear in any order
!		  by key of reference.
!
! CALLING SEQUENCE:
!
!	RM$AL_KEY_DESC ( desc,vbn,offset )
!
! INPUT PARAMETERS:
!
!	desc	- pointer to descriptor in prologue
!	vbn	- VBN where the descriptor is in
!	offset	- byte offset in the VBN where the descriptor is
!
! IMPLICIT INPUTS:
!
!	R10	IFAB address
!	R11	IMPURE AREA address
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!
!	The address of the index descriptor is returned in IDX_DFN
!
! ROUTINE VALUE:
!
!	Standard rms, in particular SUC, DME
!
! SIDE EFFECTS:
!
!	The index descriptor is allocated, linked in, filled in
!
!--

    BEGIN

    ! Define external registers
    !
    EXTERNAL REGISTER
	R_IDX_DFN_STR,
	R_IMPURE_STR,
	R_IFAB_STR;

    MAP
	DESC	: REF BBLOCK;		! desc points to a key descriptor

    ! if the key's datatype is illegal return an error
    !
    IF .DESC [ KEY$B_DATATYPE ] GTRU KEY$C_MAX_DATA
    THEN
	RETURN RMSERR( DTP );

    BEGIN

    LOCAL
	BLK : REF BBLOCK;

    ! Size of index descriptor  = fixed portion in longwords + variable portion
    ! in longwords which is 1 longword per segment (i.e.  1 word per size and 1
    ! word per position)
    !
    IF NOT RM$GETBLK( .IFAB,
		      IDX$C_FIXED_BLN / 4 + .DESC [ KEY$B_SEGMENTS ];
		      BLK )
    THEN
	RETURN RMSERR( DME );

    IDX_DFN = .BLK

    END;

    BEGIN

    LOCAL
	NUMBER	: INITIAL(0);

    ! We now have an index descriptor in IDX_DFN, size has been filled in
    ! link it in.  NOTE: Key descriptor 0 must be at the head of the list
    !
    IDX_DFN [ IDX$L_IDXFL ]	= 0;

    ! If there are none then link it in the front
    !
    IF .IFAB [ IFB$L_IDX_PTR ] EQL 0
    THEN
	BEGIN

	IFAB [ IFB$L_IDX_PTR ] = .IDX_DFN;

	! If this is not the primary key then make the descriptor non-zero
	!
	IF .DESC [ KEY$B_KEYREF ] NEQ 0
	THEN
	    NUMBER = 1

	END
    ELSE

	! If this is key 0 it must go to the head of the list
	! else put it at the end of the chain
	!
	IF .DESC [ KEY$B_KEYREF ] EQL 0
	THEN
	    BEGIN
	    IDX_DFN [ IDX$L_IDXFL ] = .IFAB [ IFB$L_IDX_PTR ];
	    IFAB [ IFB$L_IDX_PTR ] = .IDX_DFN
	    END
	ELSE
	    BEGIN

	    LOCAL
		PTR	: REF BBLOCK;

	    PTR = .IFAB [ IFB$L_IDX_PTR ];

	    ! Find the last index descriptor
	    !
	    WHILE .PTR [ IDX$L_IDXFL ] NEQ 0
	    DO
	        PTR = .PTR [ IDX$L_IDXFL ];

	    ! The number of this descriptor is one higher then the last one in
	    ! the chain
	    !
	    NUMBER = .PTR [ IDX$B_DESC_NO ] + 1;

	    ! Place the new descriptor at the end of the chain
	    !
	    PTR [ IDX$L_IDXFL ] = .IDX_DFN

	    END;

    ! Now fill it in
    !
    IDX_DFN [ IDX$L_VBN ]	= .VBN;
    IDX_DFN [ IDX$W_OFFSET ]	= .OFFSET;
    IDX_DFN [ IDX$B_DESC_NO ]	= .NUMBER;
    IDX_DFN [ IDX$B_BID ]	= IDX$C_BID

    END;

    RETURN FILL_IN( .DESC )

    END;


%SBTTL	'RM$KEY_DESC'
GLOBAL ROUTINE RM$KEY_DESC (KEYREF) : RL$RABREG_7 =

!++
!
! RM$KEY_DESC
!
!	Given the key of reference, this routine sets idx_dfn to the correct
!	index descriptor address. It searches the existing index descriptors
!	for a match and, if it does not find it, allocates it
!
!	EXCEPTION: if NEW_IDX is set in the irab, and if the index descriptor
!		   already exists, fill it in again ( but don't re-allocate it)
!
! CALLING SEQUENCE:
!
!	RM$KEY_DESC (KEYREF)
!
! INPUT PARAMETERS:
!
!	keyref = key of reference
!
! IMPLICIT INPUTS:
!
!	R8 -- RAB address
!	R9 -- IRAB address
!	R10 -- IFAB address
!	R11 -- IMPURE AREA address
!	NEW_IDX, CACHEFLGS in IRAB
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!
!	IDX_DFN will contain the address of the index descriptor
!	NEW_IDX is cleared
!	CACHEFLGS is cleared
!	If CACHEFLGS was non-zero ( i.e. the block was locked),
!		lock_bdb contains the bdb associated w/ the block
!
! ROUTINE VALUE:
!
!	usual rms status codes, particularly SUC,KRF,RPL
!		and those returned by RM$AL_KEY_DESC
!
! SIDE EFFECTS:
!
!	Allocates idx descriptor if it doesn't exist, fills it in & links it in
!	may lock up the block containing the key descriptor
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IDX_DFN_STR,
	COMMON_RAB_STR;

    GLOBAL REGISTER
	COMMON_IO_STR;

    MAP
	KEYREF	: BYTE;

    LOCAL
	STATUS;

    ! Find the index descriptor and return its address in IDX_DFN
    !
    IDX_DFN = .IFAB [ IFB$L_IDX_PTR ];

    WHILE .IDX_DFN [ IDX$B_KEYREF ] NEQ .KEYREF
    DO

	! If this is the last key then the key does not exist
	!
	IF ( IDX_DFN = .IDX_DFN [ IDX$L_IDXFL ] ) EQL 0
	THEN
	    BEGIN
	    IRAB [ IRB$V_NEW_IDX ] = 0;
	    IRAB [ IRB$B_CACHEFLGS ] = 0;
	    RETURN RMSERR( KRF )
	    END;

    ! If we don't have to restuff the descriptor simply return
    !
    IF NOT .IRAB [ IRB$V_NEW_IDX ]
    THEN
	BEGIN
	IRAB [ IRB$B_CACHEFLGS ] = 0;
	RETURN RMSSUC()
	END;

    ! We clear NEW_IDX
    !
    IRAB [ IRB$V_NEW_IDX ] = 0;

    ! Go get the block
    !
    RETURN_ON_ERROR( RM$CACHE( .IDX_DFN [ IDX$L_VBN ],512,.IRAB [ IRB$B_CACHEFLGS ] ),
		     BEGIN
		     IRAB [ IRB$B_CACHEFLGS ] = 0;
		     IF .RAB [RAB$L_STV] EQL 0
		     THEN
			 RAB [RAB$L_STV] = .STATUS OR 1^16;
		     STATUS = RMSERR( RPL )
		     END );

    ! If the chksum is bad, release the block and return
    !
    RETURN_ON_ERROR( RM$CHKSUM(),
		     BEGIN
		     IRAB [ IRB$B_CACHEFLGS ] = 0;
		     RM$RELEASE(0)
		     END );

    ! Fill in the descriptor with the fresh copy
    !
    STATUS = FILL_IN( .BKT_ADDR + .IDX_DFN [ IDX$W_OFFSET ] );

    ! If the block wasn't locked, release it otherwise, it is up to the caller
    ! to release it  if this is the case, set up lock_bdb to point to it
    !
    IF .IRAB [ IRB$B_CACHEFLGS ] EQL 0
    THEN
	RM$RELEASE(0)
    ELSE
	IRAB [ IRB$L_LOCK_BDB ] = .BDB;

    IRAB [ IRB$B_CACHEFLGS ] = 0;

    RETURN .STATUS

    END;


%SBTTL	'RM$GET_NEXT_KEY'
GLOBAL ROUTINE	RM$GET_NEXT_KEY : RL$LINK_7_10_11 =

!++
!
! RM$GET_NEXT_KEY
!
!	Sets idx_dfn to the address of the next key descriptor if there is one
!	Else it leaves idx_dfn alone
!
! CALLING SEQUENCE:
!
!	RM$GET_NEXT_KEY()
!
! INPUT PARAMETERS:
!	none
!
! IMPLICIT INPUTS:
!
!	idx_dfn	- current index descriptor
!
! OUTPUT PARAMETERS:
!	none
!
! IMPLICIT OUTPUTS:
!
!	idx_dfn - will contain the address of the next index descriptor if
!		  there is one otherwise it is not affected
!
! ROUTINE VALUE:
!
!	1 - there was a next index descriptor
!	0 - there was not a next one
!
! SIDE EFFECTS:
!	none
!
!--

    BEGIN

    EXTERNAL REGISTER
	R_IDX_DFN_STR;

    ! If there isn't anymore index descriptors then exit
    !
    IF .IDX_DFN [ IDX$L_IDXFL ] EQL 0
    THEN
	RETURN 0;

    IDX_DFN = .IDX_DFN [ IDX$L_IDXFL ];

    RETURN 1
    
    END;

END

ELUDOM
