MODULE DELBAD (
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  F11ACP Structure Level 2
!
! ABSTRACT:
!
!	This routine removes the indicated blocks from the given file header
!	and appends them to the bad block file.
!
! ENVIRONMENT:
!
!	STARLET operating system, including privileged system services
!	and internal exec routines.
!
!--
!
!
! AUTHOR:  Andrew C. Goldstein,	 CREATION DATE:  29-May-1978  22:43
!
! MODIFIED BY:
!
!	V03-006	CDS0004		Christian D. Saether	14-Aug-1984
!		Remove obsolete reference to update_filesize routine.
!
!	V03-005	CDS0003		Christian D. Saether	31-July-1984
!		Remove local definition of get_map_pointer linkage.
!
!	V03-004	CDS0002		Christian D. Saether	 2-May-1984
!		Perform deallocation to bad block file in secondary
!		context.  Add appropriate serialization.
!
!	V03-003	CDS0001		Christian D. Saether	29-Dec-1983
!		Use L_NORM linkage and BIND_COMMON macro.
!
!	V03-002	ACG0367		Andrew C. Goldstein,	26-Oct-1983  19:49
!		Update BADBLK.SYS file highwater mark
!
!	V03-001	LMP0037		L. Mark Pilant,		28-Jun-1982  15:10
!		Remove the addressing mode module switch.
!
!	V02-003	ACG0230		Andrew C. Goldstein,	24-Dec-1981  0:16
!		Go to longword external addressing
!
!	V02-002	ACG0167		Andrew C. Goldstein,	16-Apr-1980  19:25
!		Previous revision history moved to F11B.REV
!**


LIBRARY 'SYS$LIBRARY:LIB.L32';
REQUIRE 'SRC$:FCPDEF.B32';

GLOBAL ROUTINE DEALLOCATE_BAD (FIB, FILE_HDR, POINTER, LAST_COUNT) : L_NORM NOVALUE =

!++
!
! FUNCTIONAL DESCRIPTION:
!
!	This routine removes the indicated blocks from the given file header
!	and appends them to the bad block file.
!
!
! CALLING SEQUENCE:
!	DEALLOCATE_BAD (ARG1, ARG2, ARG3, ARG4)
!
! INPUT PARAMETERS:
!	ARG1: address of user FIB
!	ARG2: address of file header
!	ARG3: address of map pointer at which to start
!	ARG4: new value for last pointer block count
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	file header updated, bad block log file updated, bad block file extended
!
!--

BEGIN

MAP
	FIB		: REF BBLOCK,	! user FIB argument
	FILE_HDR	: REF BBLOCK;	! address of file header

LINKAGE
	L_MAKE_POINTER	= CALL :
			GLOBAL (BUILD_POINTER = 9);

GLOBAL REGISTER
	COUNT		= 6,		! count of blocks returned
	LBN		= 7,		! LBN of map entry
	MAP_POINTER	= 8 : REF BBLOCK, ! pointer to scan map
	BUILD_POINTER	= 9 : REF BBLOCK; ! pointer to build new map entry

LOCAL
	HEADER		: REF BBLOCK,	! local address of file header
	EXT_HEADER	: REF BBLOCK;	! address of extension header

BIND
	BB_FID = UPLIT WORD (BADBLK_FID, BADBLK_FID, 0);

BIND_COMMON;

EXTERNAL ROUTINE
	SAVE_CONTEXT	: L_NORM,	! save primary context
	RESTORE_CONTEXT	: L_NORM,	! restore primary context
	SERIAL_FILE	: L_NORM,	! file serialization lock.
	RELEASE_SERIAL_LOCK : L_NORM,	! relinquish file serialization
	WRITE_DIRTY	: L_NORM,	! write modified buffers
	GET_MAP_POINTER : L_MAP_POINTER, ! get value of next map entry
	MAKE_POINTER	: L_MAKE_POINTER, ! build new map entry
	NEXT_HEADER	: L_NORM,	! read next extension header
	MARK_DIRTY	: L_NORM,	! mark buffer for rewrite
	ZERO_WINDOWS	: L_NORM,	! invalidate windows of file
	CHECKSUM	: L_NORM,	! compute file header checksum
	READ_HEADER	: L_NORM,	! read file header
	EXTEND_HEADER	: L_NORM,	! create extention header
	SCAN_BADLOG	: L_NORM;	! scan pending bad block log file


! Get into secondary context.
!

SAVE_CONTEXT ();

! Construct pointers into the file header and get the current contents of the
! last map pointer.
!

HEADER = .FILE_HDR;
MAP_POINTER = .POINTER;

GET_MAP_POINTER ();

! Now append the blocks to the bad block file.
!

LBN = .LBN + .LAST_COUNT;		! compute LBN of bad cluster
COUNT = .COUNT - .LAST_COUNT;

! Serialize on the bad block file.
!

PRIM_LCKINDX = SERIAL_FILE (BB_FID);

HEADER = READ_HEADER (BB_FID, 0);
WHILE 1 DO
    BEGIN
    EXT_HEADER = NEXT_HEADER (.HEADER, 0);
    IF .EXT_HEADER EQL 0 THEN EXITLOOP;
    HEADER = .EXT_HEADER;
    END;
MARK_DIRTY (.HEADER);
BUILD_POINTER = .HEADER + (.HEADER[FH2$B_MPOFFSET] + .HEADER[FH2$B_MAP_INUSE]) * 2;

IF NOT MAKE_POINTER (.COUNT, .LBN, .HEADER)
THEN
    BEGIN
    HEADER = EXTEND_HEADER (UPLIT BYTE (REP FIB$C_LENGTH OF (0)), .HEADER, 0);
    BUILD_POINTER = .HEADER + .HEADER[FH2$B_MPOFFSET] * 2;
    MAKE_POINTER (.COUNT, .LBN, .HEADER);
    END;

BBLOCK [HEADER[FH2$W_RECATTR], FAT$L_HIBLK] =
	ROT (ROT (.BBLOCK [HEADER[FH2$W_RECATTR], FAT$L_HIBLK], 16) + .COUNT, 16);

! If this file header supports it, stuff the high water field to
! be the allocated size.
!

IF .HEADER [FH2$B_IDOFFSET] GEQU ($BYTEOFFSET (FH2$L_HIGHWATER)+4)/2
THEN
    HEADER [FH2$L_HIGHWATER] =	ROT (.BBLOCK [HEADER[FH2$W_RECATTR], FAT$L_HIBLK], 16) + 1;

CHECKSUM (.HEADER);

! Write the modified header(s), release the serialization lock, and return to
! primary context.
!

WRITE_DIRTY (.LB_BASIS [.PRIM_LCKINDX]);

RELEASE_SERIAL_LOCK (.PRIM_LCKINDX);

RESTORE_CONTEXT ();

! Finally, remove the bad block cluster from the volume pending bad block log
! file, if it was there.
!

SCAN_BADLOG (0, 0, .LBN, REMOVE_BADBLOCK, .COUNT);

END;					! end of routine DEALLOCATE_BAD

END
ELUDOM
