MODULE SCHEDULER(%TITLE	'Job scheduler'
		IDENT = 'V04-001'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************
!

!++
! FACILITY:
!	Job controller.
!
! ABSTRACT:
!	This module contains the job scheduling routines.
!
! ENVIRONMENT:
!	VAX/VMS user and kernel mode.
!--
!
! AUTHOR: M. Jack, CREATION DATE: 16-Feb-1982
!
! MODIFIED BY:
!
!	V04-001	JAK0233		J A Krycka	10-Sep-1984
!		In FIND_PENDING_JOBS fix bug that prevented the job header
!		record from being rewritten to disk when scheduling pending
!		jobs from a generic batch queue to various execution queues.
!
!	V03-011	JAK0231		J A Krycka	28-Aug-1984
!		In FIND_PENDING_JOBS protect against failure to place job in
!		execution by START_EXECUTOR_JOB (e.g., $CREPRC service failure).
!		A failure of this nature will result in release of the current
!		job record to the free list, so FIND_PENDING_JOBS should not
!		try to rewrite it.
!
!	V03-010	KPL0004		P Lieberwirth,	 2-Aug-1984
!		Routine FIND_PENDING_JOBS is susceptible to a corrupted
!		PENDING_BATCH_LIST or PENDING_PRINT_LIST.  Protect against
!		that type of corruption.
!
!	V03-009	KPL0003		P Lieberwirth,	31-Jul-1984
!		Add omitted "." in v03-008.
!
!	V03-008	KPL0002		P Lieberwirth,	23-Jul-1984
!		Extend protection described in V03-007 to routine AFTER_NONAST.
!
!	V03-007	KPL0001		P Lieberwirth,	 9-Jul-1984
!		Protect routine ENQUEUE_JOB against corrupt SJH.  A corrupt
!		SJH is generally a record that has been deallocatd to the
!		free list but still appears on the SMQ's current_list.  Changes
!		being made at this time in other modules should reduce the
!		frequency of this type of corruption.
!
!	V03-006	MLJ0118		Martin L. Jack,	23-Aug-1983  12:41
!		Change field names.
!
!	V03-005	MLJ0115		Martin L. Jack,	30-Jul-1983  15:03
!		Changes for job controller baselevel.
!
!	V03-004	MLJ0114		Martin L. Jack,	23-Jun-1983  5:03
!		Changes for job controller baselevel.
!
!	V03-003	MLJ0113		Martin L. Jack,	26-May-1983  21:08
!		Changes for job controller baselevel.
!
!	V03-002	MLJ0112		Martin L. Jack,	29-Apr-1983  3:09
!		Changes for job controller baselevel.
!
!	V03-001	MLJ0109		Martin L. Jack,	14-Apr-1983  12:49
!		Changes for job controller baselevel.
!
!**

REQUIRE 'SRC$:JOBCTLDEF';


FORWARD ROUTINE
	AFTER_NONAST:			NOVALUE,
	AFTER_AST:			NOVALUE,
	REQUEUE_STARTING_JOBS:		NOVALUE,
	EXECUTOR_SCHEDULING_POLICY,
	EXECUTOR_ACCEPTS_JOB,
	FIND_AVAILABLE_EXECUTOR:	L_OUTPUT_1,
	FIND_PENDING_JOBS:		NOVALUE,
	JOB_SCHEDULING_POLICY,
	ENQUEUE_JOB:			L_OUTPUT_2 NOVALUE;


EXTERNAL ROUTINE
	LOCK_QUEUE_FILE:		NOVALUE,
	READ_RECORD,
	RELEASE_RECORD:			NOVALUE,
	REWRITE_RECORD:			NOVALUE,
	SCAN_INCOMPLETE_SERVICES:	NOVALUE,
	SCHEDULE_NONAST:		NOVALUE,
	START_EXECUTOR_JOB:		NOVALUE,
	UNLOCK_QUEUE_FILE:		NOVALUE,
	UPDATE_GETQUI_DATA:		NOVALUE;


BUILTIN
	TESTBITSC;

ROUTINE AFTER_NONAST: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine is scheduled to execute by the completion AST routine for
!	the timer on the timed job queue.  It requeues all jobs whose expiration
!	time is earlier than or equal to the current time and sets a new timer.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
IF .QUEUE_FAB[FAB$W_IFI] NEQ 0
THEN
    BEGIN
    LOCAL
	SQH:		REF BBLOCK,	! Pointer to SQH
	SMQ_N,				! Record number of SMQ
	SMQ:		REF BBLOCK,	! Pointer to SMQ
	SJH_N,				! Record number of SJH
	SJH:		REF BBLOCK,	! Pointer to SJH
	STATUS;				! Status return


    ! Get the current time.
    !
    $GETTIM(TIMADR=CUR_TIME);


    ! Lock the queue file.
    !
    LOCK_QUEUE_FILE();


    ! Requeue all jobs in the timer queue whose expiration times are earlier
    ! than or equal to the current time.
    !
    SQH = READ_RECORD(SQH$K_RECNO);
    WHILE .SQH[SQH$L_TIMER_LIST] NEQ 0 DO
	BEGIN
	SJH = READ_RECORD(SJH_N = .SQH[SQH$L_TIMER_LIST]);
	IF TIME_GEQU(CUR_TIME, SJH[SJH$Q_AFTER_TIME])
	THEN
	    BEGIN
	    UPDATE_GETQUI_DATA(.SJH_N, .SJH);
	    SQH[SQH$L_TIMER_LIST] = .SJH[SYM$L_LINK];
	    IF .SJH[SYM$L_LINK] EQL 0 THEN SQH[SQH$L_TIMER_LIST_END] = 0;
	    SMQ_N = .SJH[SJH$L_QUEUE_LINK];
	    IF .SMQ_N NEQ 0
	    THEN
		! Queue pointer is OK.
		!
		BEGIN
		SMQ = READ_RECORD(.SMQ_N);
		SMQ[SMQ$W_TIMER_JOB_COUNT] = .SMQ[SMQ$W_TIMER_JOB_COUNT] - 1;
		ENQUEUE_JOB(.SJH_N, .SJH);
		REWRITE_RECORD(.SMQ_N);
		REWRITE_RECORD(.SJH_N);
		END
	    ELSE
		! Queue pointer bad, just release SJH.  Next cold or warm start
		! will fix it.
		!
		RELEASE_RECORD(.SJH_N);
	    END
	ELSE
	    BEGIN

	    ! Set a timer on the first remaining job.
	    !
	    STATUS = $SETIMR(
		DAYTIM=SJH[SJH$Q_AFTER_TIME],
		ASTADR=AFTER_AST,
		REQIDT=JBC$K_AFTER_IDT);
	    IF NOT .STATUS
	    THEN
		SIGNAL(JBC$_SETIMR OR STS$K_ERROR, 0, .STATUS);


	    EXITLOOP;
	    END;
	END;
    REWRITE_RECORD(SQH$K_RECNO);


    ! Unlock the queue file.
    !
    UNLOCK_QUEUE_FILE();
    END;
END;

GLOBAL ROUTINE AFTER_AST: NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This is the completion AST routine for the timer on the timed job
!	queue.  It requeues all jobs whose expiration time is earlier than or
!	equal to the current time and sets a new timer.
!
! INPUT PARAMETERS:
!	NONE
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
SCHEDULE_NONAST(AFTER_NONAST);
END;

GLOBAL ROUTINE REQUEUE_STARTING_JOBS(SMQ_N,SMQ): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine requeues starting jobs in a specified queue.
!
! INPUT PARAMETERS:
!	SMQ_N		- Record number of SMQ.
!	SMQ		- Pointer to SMQ.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	SMQ:		REF BBLOCK;	! Pointer to SMQ
LOCAL
	PRED_MODIFIED,			! True if predecessor modified
	SJH_NP,				! Record number of predecessor of SJH
	SJH_P:		REF BBLOCK,	! Pointer to predecessor of SJH
	SJH_NS,				! Record number of successor
	SJH_N,				! Record number of SJH
	SJH:		REF BBLOCK;	! Pointer to predecessor


PRED_MODIFIED = FALSE;
SJH_NP = 0;
SJH_N = .SMQ[SMQ$L_CURRENT_LIST];
WHILE .SJH_N NEQ 0 DO
    BEGIN
    SJH = READ_RECORD(.SJH_N);
    SJH_NS = .SJH[SYM$L_LINK];
    IF .SJH[SJH$V_STARTING]
    THEN
	BEGIN
	UPDATE_GETQUI_DATA(.SJH_N, .SJH);
	IF .SJH_NP EQL 0
	THEN
	    BEGIN
	    SMQ[SMQ$L_CURRENT_LIST] = .SJH_NS;
	    IF .SJH_NS EQL 0 THEN SMQ[SMQ$L_CURRENT_LIST_END] = 0;
	    END
	ELSE
	    BEGIN
	    SJH_P[SYM$L_LINK] = .SJH_NS;
	    IF .SJH_NS EQL 0 THEN SMQ[SMQ$L_CURRENT_LIST_END] = .SJH_NP;
	    PRED_MODIFIED = TRUE;
	    END;
	SMQ[SMQ$B_CURRENT_JOB_COUNT] = .SMQ[SMQ$B_CURRENT_JOB_COUNT] - 1;
	ENQUEUE_JOB(.SJH_N, .SJH);
	REWRITE_RECORD(.SJH_N);
	END
    ELSE
	BEGIN
	IF .SJH_NP NEQ 0
	THEN
	    IF TESTBITSC(PRED_MODIFIED)
		THEN REWRITE_RECORD(.SJH_NP)
		ELSE RELEASE_RECORD(.SJH_NP);
	SJH_NP = .SJH_N;
	SJH_P = .SJH;
	END;
    SJH_N = .SJH_NS;
    END;
IF .SJH_NP NEQ 0
THEN
    IF .PRED_MODIFIED
        THEN REWRITE_RECORD(.SJH_NP)
	ELSE RELEASE_RECORD(.SJH_NP);
END;

ROUTINE EXECUTOR_SCHEDULING_POLICY(SJH,SMQ_1,SMQ_2)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine implements the default executor scheduling policy.
!
! INPUT PARAMETERS:
!	SJH		- Pointer to SJH.
!	SMQ_1		- Pointer to first SMQ.
!	SMQ_2		- Pointer to second SMQ.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	True if SMQ_1 is more desirable than SMQ_2; false otherwise.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	SJH:		REF BBLOCK,	! Pointer to SJH
	SMQ_1:		REF BBLOCK,	! Pointer to SMQ
	SMQ_2:		REF BBLOCK;	! Pointer to SMQ


IF .SMQ_1[SMQ$V_BATCH]
THEN
    BEGIN

    ! In this implementation, the batch queue that will have the lower
    ! percentage utilization is the more desirable.
    !
    IF
	(.SMQ_2[SMQ$B_CURRENT_JOB_COUNT] + 1) * 100 / .SMQ_2[SMQ$B_JOB_LIMIT] LSSU
	(.SMQ_1[SMQ$B_CURRENT_JOB_COUNT] + 1) * 100 / .SMQ_1[SMQ$B_JOB_LIMIT]
    THEN
	RETURN FALSE;
    END
ELSE
    BEGIN

    ! In this implementation, printers on the local node are more desirable
    ! than printers on remote nodes, but otherwise printers are equally
    ! desirable.
    !
    IF  SYSID_EQL(SJH[SJH$T_SYSID], SMQ_2[SMQ$T_SYSID])
    AND SYSID_NEQ(SJH[SJH$T_SYSID], SMQ_1[SMQ$T_SYSID])
    THEN
	RETURN FALSE;
    END;


TRUE
END;

ROUTINE EXECUTOR_ACCEPTS_JOB(QSMQ_N,QSMQ,ESMQ_N,ESMQ,SJH_N,SJH)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine determines whether executor queue ESMQ can accept job SJH
!	that was entered in queue QSMQ.
!
! INPUT PARAMETERS:
!	QSMQ_N		- Record number of job's SMQ.
!	QSMQ		- Pointer to job's SMQ.
!	ESMQ_N		- Record number of executor SMQ.
!	ESMQ		- Pointer to executor SMQ.
!	SJH_N		- Record number of SJH.
!	SJH		- Pointer to SJH.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	True if the job can be initiated, false otherwise.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	QSMQ:		REF BBLOCK,	! Pointer to SMQ
	ESMQ:		REF BBLOCK,	! Pointer to SMQ
	SJH:		REF BBLOCK;	! Pointer to SJH


! If either the job's queue or the executor queue is not running, fail
! immediately.
!
IF .ESMQ[SMQ$V_PAUSED]
OR .ESMQ[SMQ$V_PAUSING]
OR .ESMQ[SMQ$V_RESUMING]
OR .ESMQ[SMQ$V_STARTING]
OR .ESMQ[SMQ$V_STOPPED]
OR .ESMQ[SMQ$V_UNAVAILABLE]
OR .QSMQ[SMQ$V_STOPPED]
THEN
    RETURN FALSE;


! If the job's queue is assigned, but not to the executor queue, fail.
!
IF .QSMQ[SMQ$L_ASSIGNED_QUEUE_LINK] NEQ 0
THEN
    BEGIN
    IF .QSMQ[SMQ$L_ASSIGNED_QUEUE_LINK] NEQ .ESMQ_N
    THEN
	RETURN FALSE;
    END


! If the job's queue is generic and the executor queue cannot accept generic
! selection from this queue, fail.
!
ELSE IF .QSMQ[SMQ$V_GENERIC_QUEUE]
THEN
    BEGIN
    IF .QSMQ[SMQ$L_GENERIC_TARGET] NEQ 0
    THEN
	BEGIN
	LOCAL
	    AUX:	REF BBLOCK;	! Pointer to generic target block

	AUX = READ_RECORD(.QSMQ[SMQ$L_GENERIC_TARGET]);
	IF
	    BEGIN
	    DECR I FROM .VECTOR[AUX[SYM$T_DATA], 0] TO 1 DO
		IF .VECTOR[AUX[SYM$T_DATA], .I] EQL .ESMQ_N
		    THEN EXITLOOP FALSE
	    END
	THEN
	    BEGIN
	    RELEASE_RECORD(.QSMQ[SMQ$L_GENERIC_TARGET]);
	    RETURN FALSE;
	    END
	ELSE
	    RELEASE_RECORD(.QSMQ[SMQ$L_GENERIC_TARGET]);
	END
    ELSE
	BEGIN
	IF NOT .ESMQ[SMQ$V_GENERIC_SELECTION]
	OR .QSMQ[SMQ$V_TERMINAL] NEQ .ESMQ[SMQ$V_TERMINAL]
	OR (.ESMQ[SMQ$V_SERVER]
	    AND CH$NEQ(
		SMQ$S_PROCESSOR, QSMQ[SMQ$T_PROCESSOR],
		SMQ$S_PROCESSOR, ESMQ[SMQ$T_PROCESSOR]))
	THEN
	    RETURN FALSE;
	END;
    END


! Otherwise, the queue must be the same queue.
!
ELSE IF .QSMQ_N NEQ .ESMQ_N
THEN
    RETURN FALSE;


! Ensure that the job count is not exceeded and that the characteristics match.
!
IF .ESMQ[SMQ$B_CURRENT_JOB_COUNT] GEQU .ESMQ[SMQ$B_JOB_LIMIT]
OR (.(SJH[SJH$T_CHARACTERISTICS]   ) AND NOT .(ESMQ[SMQ$T_CHARACTERISTICS]   )) NEQ 0
OR (.(SJH[SJH$T_CHARACTERISTICS]+ 4) AND NOT .(ESMQ[SMQ$T_CHARACTERISTICS]+ 4)) NEQ 0
OR (.(SJH[SJH$T_CHARACTERISTICS]+ 8) AND NOT .(ESMQ[SMQ$T_CHARACTERISTICS]+ 8)) NEQ 0
OR (.(SJH[SJH$T_CHARACTERISTICS]+12) AND NOT .(ESMQ[SMQ$T_CHARACTERISTICS]+12)) NEQ 0
THEN
    RETURN FALSE;


! Finish with printer queue specific testing.
!
IF NOT .ESMQ[SMQ$V_BATCH]
THEN
    BEGIN

    ! If the job requires lowercase, ensure that the queue supports it.
    !
    IF (.SJH[SJH$V_LOWERCASE] AND NOT .ESMQ[SMQ$V_LOWERCASE])
    THEN
	RETURN FALSE;


    ! If the queue has job size limits, ensure that the job is in range.
    !
    IF (.ESMQ[SMQ$L_JOB_SIZE_MAXIMUM] NEQ 0
	AND .SJH[SJH$L_JOB_SIZE] GTRU .ESMQ[SMQ$L_JOB_SIZE_MAXIMUM])
    OR (.ESMQ[SMQ$L_JOB_SIZE_MINIMUM] NEQ 0
	AND .SJH[SJH$L_JOB_SIZE] LSSU .ESMQ[SMQ$L_JOB_SIZE_MINIMUM])
    THEN
	RETURN FALSE;


    ! Ensure that the form stock names match.
    !
    IF
	BEGIN
	IF .SJH[SJH$L_FORM_LINK] EQL .ESMQ[SMQ$L_FORM_LINK]
	THEN
	    FALSE
	ELSE
	    BEGIN
	    LOCAL
		SFM_1:		REF BBLOCK,	! Pointer to job's SFM
		SFM_2:		REF BBLOCK;	! Pointer to queue's SFM

	    SFM_1 = READ_RECORD(.SJH[SJH$L_FORM_LINK]);
	    SFM_2 = READ_RECORD(.ESMQ[SMQ$L_FORM_LINK]);
	    IF CH$EQL(
		SFM$S_STOCK, SFM_1[SFM$T_STOCK],
		SFM$S_STOCK, SFM_2[SFM$T_STOCK])
	    THEN
		BEGIN
		RELEASE_RECORD(.SJH[SJH$L_FORM_LINK]);
		RELEASE_RECORD(.ESMQ[SMQ$L_FORM_LINK]);
		FALSE
		END
	    ELSE
		BEGIN
		RELEASE_RECORD(.SJH[SJH$L_FORM_LINK]);
		RELEASE_RECORD(.ESMQ[SMQ$L_FORM_LINK]);
		TRUE
		END
	    END
	END
    THEN
	RETURN FALSE;
    END;


TRUE
END;

ROUTINE FIND_AVAILABLE_EXECUTOR(SMQ_N,SMQ,SJH_N,SJH; ESMQ): L_OUTPUT_1=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine searches for an executor that can accept a job, and if one
!	is found, initiates the job.
!
! INPUT PARAMETERS:
!	SMQ_N		- Record number of SMQ.
!	SMQ		- Pointer to SMQ.
!	SJH_N		- Record number of SJH.
!	SJH		- Pointer to SJH.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	ESMQ		- Pointer to executor SMQ.
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	True if the job was initiated, false otherwise.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	SMQ:		REF BBLOCK,	! Pointer to SMQ
	SJH:		REF BBLOCK,	! Pointer to SJH
	ESMQ:		REF BBLOCK;	! Pointer to ESMQ
LOCAL
	ESMQ_N,				! Record number of ESMQ
	CSMQ_N,				! Record number of CSMQ
	CSMQ:		REF BBLOCK;	! Pointer to CSMQ


! If the queue to which the job was submitted is not running, fail immediately.
!
IF .SMQ[SMQ$V_PAUSED]
OR .SMQ[SMQ$V_PAUSING]
OR .SMQ[SMQ$V_RESUMING]
OR .SMQ[SMQ$V_STARTING]
OR .SMQ[SMQ$V_STOPPED]
OR .SMQ[SMQ$V_UNAVAILABLE]
THEN
    RETURN FALSE;


! If the queue to which the job was submitted is a logical queue, then the
! job must execute on the queue assigned to the logical queue.  Determine if
! that queue can accept the job.  Otherwise, fail immediately.
!
IF .SMQ[SMQ$L_ASSIGNED_QUEUE_LINK] NEQ 0
THEN
    BEGIN
    ESMQ = READ_RECORD(ESMQ_N = .SMQ[SMQ$L_ASSIGNED_QUEUE_LINK]);
    IF NOT EXECUTOR_ACCEPTS_JOB(.SMQ_N, .SMQ, .ESMQ_N, .ESMQ, .SJH_N, .SJH)
    THEN
	BEGIN
	RELEASE_RECORD(.ESMQ_N);
	RETURN FALSE;
	END;
    END


! If the queue to which the job was submitted is an executor queue, then the
! job must execute on that queue.  Determine if that queue can accept the job.
! Otherwise, fail immediately.
!
ELSE IF NOT .SMQ[SMQ$V_GENERIC_QUEUE]
THEN
    BEGIN
    IF NOT EXECUTOR_ACCEPTS_JOB(.SMQ_N, .SMQ, .SMQ_N, .SMQ, .SJH_N, .SJH)
    THEN
	RETURN FALSE;

    ESMQ_N = .SMQ_N;
    ESMQ = .SMQ;
    END


! If the queue to which the job was submitted is a generic queue that has
! specific target queues, search the target queues to locate a queue on
! which the job can execute.
!
ELSE IF .SMQ[SMQ$L_GENERIC_TARGET] NEQ 0
THEN
    BEGIN
    LOCAL
	AUX:		REF BBLOCK;	! Pointer to generic list


    AUX = READ_RECORD(.SMQ[SMQ$L_GENERIC_TARGET]);
    ESMQ_N = 0;
    INCR I FROM 1 TO .VECTOR[AUX[SYM$T_DATA], 0] DO
	BEGIN
	CSMQ_N = .VECTOR[AUX[SYM$T_DATA], .I];
	CSMQ = READ_RECORD(.CSMQ_N);
	IF .CSMQ[SMQ$V_BATCH] EQL .SMQ[SMQ$V_BATCH]
	AND NOT .CSMQ[SMQ$V_GENERIC_QUEUE]
	AND .CSMQ[SMQ$L_ASSIGNED_QUEUE_LINK] EQL 0
	THEN
	    IF EXECUTOR_ACCEPTS_JOB(.SMQ_N, .SMQ, .CSMQ_N, .CSMQ, .SJH_N, .SJH)
	    THEN
		BEGIN
		IF .ESMQ_N EQL 0
		THEN
		    BEGIN
		    ESMQ_N = .CSMQ_N;
		    ESMQ = .CSMQ;
		    END
		ELSE IF NOT EXECUTOR_SCHEDULING_POLICY(.SJH, .ESMQ, .CSMQ)
		THEN
		    BEGIN
		    RELEASE_RECORD(.ESMQ_N);
		    ESMQ_N = .CSMQ_N;
		    ESMQ = .CSMQ;
		    END;
		END;
	IF .CSMQ_N NEQ .ESMQ_N THEN RELEASE_RECORD(.CSMQ_N);
	END;
    RELEASE_RECORD(.SMQ[SMQ$L_GENERIC_TARGET]);
    IF .ESMQ_N EQL 0 THEN RETURN FALSE;
    END


! If the queue to which the job was submitted is a generic queue, execute a
! full search of the queues to locate a queue on which the job can execute.
! CSMQ is the candidate queue, and ESMQ is the most desirable of the queues
! on which the job can execute.
!
ELSE
    BEGIN
    LOCAL
	SQX:		REF BBLOCK,	! Pointer to SQX
	SQX_N,				! Record number of SQX
	SQX_NS,				! Record number of successor of SQX
	SQE:		REF BBLOCK;	! Pointer to SQX entry


    ! Scan the queue index for an available queue.
    !
    ESMQ_N = 0;
    SQX = READ_RECORD(SQH$K_RECNO);
    SQX_N = .SQX[SQH$L_QUEUE_INDEX_LIST];
    RELEASE_RECORD(SQH$K_RECNO);
    WHILE .SQX_N NEQ 0 DO
	BEGIN

	! Read the queue index record.
	!
	SQX = READ_RECORD(.SQX_N);


	! Scan the queue index record.
	!
	SQE = SQX[SYM$T_DATA];
	INCR SQE_N FROM 0 TO SQX$K_ENTRIES-1 DO
	    BEGIN
	    IF CH$RCHAR(SQE[SQX$T_NAME]) EQL 0
	    THEN
		EXITLOOP
	    ELSE
		BEGIN
		IF .SQE[SQX$V_BATCH] EQL .SMQ[SMQ$V_BATCH]
		AND .SQE[SQX$V_EXECUTOR]
		AND .SQE[SQX$V_GENERIC_SELECTION]
		THEN
		    BEGIN
		    CSMQ = READ_RECORD(CSMQ_N = .SQE[SQX$L_QUEUE_LINK]);
		    IF EXECUTOR_ACCEPTS_JOB(
			.SMQ_N, .SMQ, .CSMQ_N, .CSMQ, .SJH_N, .SJH)
		    THEN
			BEGIN
			IF .ESMQ_N EQL 0
			THEN
			    BEGIN
			    ESMQ_N = .CSMQ_N;
			    ESMQ = .CSMQ;
			    END
			ELSE IF NOT EXECUTOR_SCHEDULING_POLICY(
			    .SJH, .ESMQ, .CSMQ)
			THEN
			    BEGIN
			    RELEASE_RECORD(.ESMQ_N);
			    ESMQ_N = .CSMQ_N;
			    ESMQ = .CSMQ;
			    END;
			END;
		    IF .CSMQ_N NEQ .ESMQ_N THEN RELEASE_RECORD(.CSMQ_N);
		    END;
		END;
	    SQE = .SQE + SQX$S_SQX;
	    END;


	! Advance to the next index block.
	!
	SQX_NS = .SQX[SYM$L_LINK];
	RELEASE_RECORD(.SQX_N);
	SQX_N = .SQX_NS;
	END;


    IF .ESMQ_N EQL 0 THEN RETURN FALSE;
    END;


! ESMQ has been determined to be available and acceptable for the job.
! Initiate the job.
!
UPDATE_GETQUI_DATA(.SJH_N, .SJH);
START_EXECUTOR_JOB(.ESMQ_N, .ESMQ, .SJH_N, .SJH);
IF .ESMQ_N NEQ .SMQ_N
THEN
    BEGIN
    READ_RECORD(.ESMQ_N);
    REWRITE_RECORD(.ESMQ_N);
    END;
TRUE
END;

GLOBAL ROUTINE FIND_PENDING_JOBS(SMQ_N,SMQ): NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine searches for pending jobs from a specified generic or
!	logical queue, or that can be executed on a specified executor queue,
!	and starts as many of these jobs as possible.
!
! INPUT PARAMETERS:
!	SMQ_N		- Record number of SMQ.
!	SMQ		- Pointer to SMQ.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	SMQ:		REF BBLOCK;	! Pointer to SMQ
LOCAL
	CONTINUE,			! True if loop to be continued
	SQH_MODIFIED,			! True if SQH modified
	PRED_MODIFIED,			! True if predecessor modified
	LIST_HEAD:	REF VECTOR,	! Pointer to pending list head
	SQH:		REF BBLOCK,	! Pointer to SQH
	SJH_NP,				! Record number of predecessor of SJH
	SJH_P:		REF BBLOCK,	! Pointer to predecessor of SJH
	SJH_N,				! Record number of SJH
	SJH_NS,				! Record number of successor of SJH
	SJH:		REF BBLOCK,	! Pointer to SJH
	QSMQ_N,				! Record number of job's SMQ
	QSMQ:		REF BBLOCK;	! Pointer to job's SMQ


! If the queue is not available, fail immediately.
!
IF .SMQ[SMQ$V_PAUSED]
OR .SMQ[SMQ$V_PAUSING]
OR .SMQ[SMQ$V_RESUMING]
OR .SMQ[SMQ$V_STARTING]
OR .SMQ[SMQ$V_STOPPED]
OR .SMQ[SMQ$V_UNAVAILABLE]
OR .SMQ[SMQ$B_CURRENT_JOB_COUNT] GEQU .SMQ[SMQ$B_JOB_LIMIT]
THEN
    RETURN;


PRED_MODIFIED = FALSE;
SQH_MODIFIED = FALSE;
CONTINUE = TRUE;
SQH = READ_RECORD(SJH_NP = SQH$K_RECNO);
IF .SMQ[SMQ$V_BATCH]
    THEN LIST_HEAD = SQH[SQH$L_PENDING_BATCH_LIST]
    ELSE LIST_HEAD = SQH[SQH$L_PENDING_PRINT_LIST];
SJH_N = .LIST_HEAD[0];


! Note that invoking START_EXECUTOR_JOB and FIND_AVAILABLE_EXECUTOR (which calls
! START_EXECUTOR_JOB) can result in the job being completed and its job record
! being put on the free list instead of the current list for the executor queue.
! This happens if the $CREPRC system service fails (for example when no PCB
! slots are available). When this happens the job record already has been
! released and it should not be rewritten.
!
WHILE .SJH_N NEQ 0 AND .CONTINUE DO
    BEGIN
    SJH = READ_RECORD(.SJH_N);
    IF .SJH[SJH$L_QUEUE_LINK] EQL 0 THEN EXITLOOP;
    SJH_NS = .SJH[SYM$L_LINK];
    IF
	BEGIN
	IF .SMQ[SMQ$V_GENERIC_QUEUE] OR .SMQ[SMQ$L_ASSIGNED_QUEUE_LINK] NEQ 0
	THEN
	    BEGIN
	    IF .SJH[SJH$L_QUEUE_LINK] EQL .SMQ_N
	    THEN
		IF FIND_AVAILABLE_EXECUTOR(.SMQ_N, .SMQ, .SJH_N, .SJH)
		THEN
		    BEGIN
		    SMQ[SMQ$W_PENDING_JOB_COUNT] = .SMQ[SMQ$W_PENDING_JOB_COUNT] - 1;
		    TRUE
		    END
		ELSE
		    FALSE
	    ELSE
		FALSE
	    END
	ELSE
	    BEGIN
	    QSMQ = .SMQ;
	    QSMQ_N = .SJH[SJH$L_QUEUE_LINK];
	    IF .QSMQ_N NEQ .SMQ_N THEN QSMQ = READ_RECORD(.QSMQ_N);
	    IF EXECUTOR_ACCEPTS_JOB(.QSMQ_N, .QSMQ, .SMQ_N, .SMQ, .SJH_N, .SJH)
	    THEN
		BEGIN
		QSMQ[SMQ$W_PENDING_JOB_COUNT] = .QSMQ[SMQ$W_PENDING_JOB_COUNT] - 1;
		IF .QSMQ_N NEQ .SMQ_N THEN REWRITE_RECORD(.QSMQ_N);
		START_EXECUTOR_JOB(.SMQ_N, .SMQ, .SJH_N, .SJH);
		IF .SMQ[SMQ$B_CURRENT_JOB_COUNT] GEQU .SMQ[SMQ$B_JOB_LIMIT]
		    THEN CONTINUE = FALSE;
		TRUE
	        END
	    ELSE
		BEGIN
		IF .QSMQ_N NEQ .SMQ_N THEN RELEASE_RECORD(.QSMQ_N);
		FALSE
		END
	    END
	END
    THEN
	BEGIN
	IF .SJH_NP EQL SQH$K_RECNO
	THEN
	    BEGIN
	    LIST_HEAD[0] = .SJH_NS;
	    IF .SJH_NS EQL 0 THEN LIST_HEAD[1] = 0;
	    SQH_MODIFIED = TRUE;
	    END
	ELSE
	    BEGIN
	    SJH_P[SYM$L_LINK] = .SJH_NS;
	    IF .SJH_NS EQL 0
	    THEN
		BEGIN
		LIST_HEAD[1] = .SJH_NP;
		SQH_MODIFIED = TRUE;
		END;
	    PRED_MODIFIED = TRUE;
	    END;

	! Guard against the possibility of having the job record already
	! released and put on the queue header free list instead of it being
	! placed at the end of the current list for the executor queue.
	!
	IF NOT .FLAGS[FLAGS_V_INVALID_SJH] THEN REWRITE_RECORD(.SJH_N);
	END
    ELSE
	BEGIN
	IF .SJH_NP NEQ SQH$K_RECNO
	THEN
	    IF TESTBITSC(PRED_MODIFIED)
		THEN REWRITE_RECORD(.SJH_NP)
		ELSE RELEASE_RECORD(.SJH_NP);
	SJH_NP = .SJH_N;
	SJH_P = .SJH;
	END;
    SJH_N = .SJH_NS;
    END;


IF .SJH_NP NEQ SQH$K_RECNO
THEN
    IF .PRED_MODIFIED
	THEN REWRITE_RECORD(.SJH_NP)
	ELSE RELEASE_RECORD(.SJH_NP);


IF .SQH_MODIFIED
    THEN REWRITE_RECORD(SQH$K_RECNO)
    ELSE RELEASE_RECORD(SQH$K_RECNO);
END;

GLOBAL ROUTINE JOB_SCHEDULING_POLICY(SMQ,SJH_1,SJH_2)=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine implements the default job scheduling policy.
!
! INPUT PARAMETERS:
!	SMQ		- Pointer to SMQ.
!	SJH_1		- Pointer to first SJH.
!	SJH_2		- Pointer to second SJH.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	NONE
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	True if SJH_1 should execute before SJH_2; false otherwise.
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	SMQ:		REF BBLOCK,	! Pointer to SMQ
	SJH_1:		REF BBLOCK,	! Pointer to SJH
	SJH_2:		REF BBLOCK;	! Pointer to SJH


! In this implementation the batch queue is ordered by increasing submission
! time within decreasing priority; the print queue is ordered by increasing
! submission time within decreasing file size within decreasing priority; but
! if /SCHEDULE=NOSIZE is specified, file size is not considered.
!
IF .SJH_1[SJH$B_PRIORITY] GTRU .SJH_2[SJH$B_PRIORITY]
THEN
    TRUE
ELSE IF .SJH_1[SJH$B_PRIORITY] EQL .SJH_2[SJH$B_PRIORITY]
THEN
    IF .SMQ[SMQ$V_BATCH] OR NOT .SMQ[SMQ$V_JOB_SIZE_SCHEDULING]
    THEN
	IF TIME_GTRU(SJH_2[SJH$Q_TIME], SJH_1[SJH$Q_TIME])
	THEN
	    TRUE
	ELSE
	    FALSE
    ELSE
	IF .SJH_1[SJH$L_JOB_SIZE] LSSU .SJH_2[SJH$L_JOB_SIZE]
	THEN
	    TRUE
	ELSE IF .SJH_1[SJH$L_JOB_SIZE] EQLU .SJH_2[SJH$L_JOB_SIZE]
	THEN
	    IF TIME_GTRU(SJH_2[SJH$Q_TIME], SJH_1[SJH$Q_TIME])
	    THEN
		TRUE
	    ELSE
		FALSE
	ELSE
	    FALSE
ELSE
    FALSE
END;

GLOBAL ROUTINE ENQUEUE_JOB(SJH_N,SJH; RESULT,ESMQ): L_OUTPUT_2 NOVALUE=

!++
!
! FUNCTIONAL DESCRIPTION:
!	This routine enqueues a newly available job on an appropriate queue.
!
! INPUT PARAMETERS:
!	SJH_N		- Record number of SJH.
!	SJH		- Pointer to SJH.
!
! IMPLICIT INPUTS:
!	NONE
!
! OUTPUT PARAMETERS:
!	RESULT		- Result of the enqueue.
!	ESMQ		- Pointer to executor SMQ, if job is executing.
!
! IMPLICIT OUTPUTS:
!	NONE
!
! ROUTINE VALUE:
!	NONE
!
! SIDE EFFECTS:
!	NONE
!
!--

BEGIN
MAP
	SJH:		REF BBLOCK;	! Pointer to SJH
LOCAL
	SQH:		REF BBLOCK,	! Pointer to SQH
	SMQ_N,				! Record number of SMQ
	SMQ:		REF BBLOCK,	! Pointer to SMQ
	SJH_NP,				! Record number of predecessor SJH
	SJH_P:		REF BBLOCK,	! Pointer to predecessor SJH
	SJH_NS,				! Record number of successor SJH
	SJH_S:		REF BBLOCK,	! Pointer to successor SJH
	STATUS;				! Status return


! If this SJH is invalid (can only occur due to file corruption) then
! return a spurious COMPLETE as result, thereby evaporating the enqueue
! request.  Note that file is still corrupt.
!
IF .SJH[SJH$L_QUEUE_LINK] EQL 0
THEN
    BEGIN
    RESULT = ENQ_K_COMPLETE;
    RETURN;
    END;

! If there are services outstanding for this job, cancel them.
!
IF .SJH[SJH$V_ABORTING]
OR .SJH[SJH$V_STARTING]
THEN
    SCAN_INCOMPLETE_SERVICES(ISRV_K_PURGE_SJH, .SJH_N);


! If there is a pending requeue for this job, execute it.
!
IF .SJH[SJH$V_REQUEUE]
THEN
    BEGIN
    IF .SJH[SJH$V_REQUEUE_HOLD] THEN SJH[SJH$V_HOLDING] = TRUE;
    SJH[SJH$B_PRIORITY] = .SJH[SJH$B_REQUEUE_PRIORITY];
    IF .SJH[SJH$L_REQUEUE_QUEUE_LINK] NEQ 0
	THEN SJH[SJH$L_QUEUE_LINK] = .SJH[SJH$L_REQUEUE_QUEUE_LINK];
    END;


! Finish initializing the completed job.
!
IF .SJH[SJH$V_EXECUTING] THEN SJH[SJH$V_RESTARTING] = TRUE;
SJH[SYM$L_LINK] = 0;
SJH[SJH$V_ABORTED] = FALSE;
SJH[SJH$V_ABORTING] = FALSE;
SJH[SJH$V_EXECUTING] = FALSE;
SJH[SJH$V_FILE_STARTING] = FALSE;
SJH[SJH$V_OPEN] = FALSE;
SJH[SJH$V_REQUEUE] = FALSE;
SJH[SJH$V_REQUEUE_HOLD] = FALSE;
SJH[SJH$V_STARTING] = FALSE;
SJH[SJH$V_SYSTEM_FAILURE] = FALSE;
SJH[SJH$B_REQUEUE_PRIORITY] = 0;
SJH[SJH$L_REQUEUE_QUEUE_LINK] = 0;
SJH[SJH$L_EXECUTOR_PID] = 0;


! Read the SMQ record.
!
SMQ = READ_RECORD(SMQ_N = .SJH[SJH$L_QUEUE_LINK]);


IF .SJH[SJH$V_HOLDING]
OR .SJH[SJH$V_REFUSED]
OR .SJH[SJH$V_RETAINED]
THEN
    BEGIN

    ! Job specified with /HOLD, was retained after execution, or was refused.
    ! Enqueue to the hold queue for the specified queue.
    !
    IF .SMQ[SMQ$L_HOLD_LIST] EQL 0
    THEN
	SMQ[SMQ$L_HOLD_LIST] = .SJH_N
    ELSE
	BEGIN
	SJH_P = READ_RECORD(SJH_NP = .SMQ[SMQ$L_HOLD_LIST_END]);
	SJH_P[SYM$L_LINK] = .SJH_N;
	REWRITE_RECORD(.SJH_NP);
	END;
    SMQ[SMQ$L_HOLD_LIST_END] = .SJH_N;
    REWRITE_RECORD(.SMQ_N);
    RESULT = ENQ_K_HOLD;
    END


ELSE IF TIME_GTRU(SJH[SJH$Q_AFTER_TIME], CUR_TIME)
THEN
    BEGIN

    ! Job specified with /AFTER.  Enqueue to the timer queue.
    !
    SQH = READ_RECORD(SJH_NP = SQH$K_RECNO);
    SMQ[SMQ$W_TIMER_JOB_COUNT] = .SMQ[SMQ$W_TIMER_JOB_COUNT] + 1;


    ! Check for the special case that the job goes at the end.
    !
    IF .SQH[SQH$L_TIMER_LIST_END] NEQ 0
    THEN
	BEGIN
	SJH_S = READ_RECORD(SJH_NS = .SQH[SQH$L_TIMER_LIST_END]);
	IF TIME_GEQU(SJH[SJH$Q_AFTER_TIME], SJH_S[SJH$Q_AFTER_TIME])
	THEN
	    BEGIN
	    SJH_S[SYM$L_LINK] = .SJH_N;
	    SQH[SQH$L_TIMER_LIST_END] = .SJH_N;
	    REWRITE_RECORD(.SJH_NS);
	    REWRITE_RECORD(.SMQ_N);
	    REWRITE_RECORD(SQH$K_RECNO);
	    RESULT = ENQ_K_TIMER;
	    RETURN;
	    END;
	END;


    ! Search down the timer list looking for the insertion point.
    !
    SJH_NS = .SQH[SQH$L_TIMER_LIST];
    WHILE .SJH_NS NEQ 0 DO
	BEGIN
	SJH_S = READ_RECORD(.SJH_NS);
	IF TIME_GTRU(SJH_S[SJH$Q_AFTER_TIME], SJH[SJH$Q_AFTER_TIME])
	THEN
	    BEGIN
	    RELEASE_RECORD(.SJH_NS);
	    EXITLOOP;
	    END;
	IF .SJH_NP NEQ SQH$K_RECNO THEN RELEASE_RECORD(.SJH_NP);
	SJH_NP = .SJH_NS;
	SJH_P = .SJH_S;
	SJH_NS = .SJH_S[SYM$L_LINK];
	END;


    ! Enqueue the job.
    !
    IF .SJH_NP EQL SQH$K_RECNO
    THEN
	BEGIN
	SQH[SQH$L_TIMER_LIST] = .SJH_N;
	$CANTIM(REQIDT=JBC$K_AFTER_IDT);
	STATUS = $SETIMR(
	    DAYTIM=SJH[SJH$Q_AFTER_TIME],
	    ASTADR=AFTER_AST,
	    REQIDT=JBC$K_AFTER_IDT);
	IF NOT .STATUS
	THEN
	    SIGNAL(JBC$_SETIMR OR STS$K_ERROR, 0, .STATUS);
	END
    ELSE
	BEGIN
	SJH_P[SYM$L_LINK] = .SJH_N;
	REWRITE_RECORD(.SJH_NP);
	END;


    SJH[SYM$L_LINK] = .SJH_NS;
    IF .SJH_NS EQL 0 THEN SQH[SQH$L_TIMER_LIST_END] = .SJH_N;
    REWRITE_RECORD(.SMQ_N);
    REWRITE_RECORD(SQH$K_RECNO);
    RESULT = ENQ_K_TIMER;
    END


ELSE
    BEGIN
    IF FIND_AVAILABLE_EXECUTOR(.SMQ_N, .SMQ, .SJH_N, .SJH; ESMQ)
    THEN
	BEGIN
	REWRITE_RECORD(.SMQ_N);
	RESULT = ENQ_K_CURRENT;
	END
    ELSE
	BEGIN
	LOCAL
	    LIST_HEAD:	REF VECTOR;	! Pointer to pending list head


	! Job cannot be started now because no executor is available.  Enqueue
	! the job to the pending queue according to the established policy.
	!
	SMQ[SMQ$W_PENDING_JOB_COUNT] = .SMQ[SMQ$W_PENDING_JOB_COUNT] + 1;
	SQH = READ_RECORD(SJH_NP = SQH$K_RECNO);
	IF .SMQ[SMQ$V_BATCH]
	    THEN LIST_HEAD = SQH[SQH$L_PENDING_BATCH_LIST]
	    ELSE LIST_HEAD = SQH[SQH$L_PENDING_PRINT_LIST];


	! Check for the special case that the job goes at the end.
	!
	IF .LIST_HEAD[1] NEQ 0
	THEN
	    BEGIN
	    SJH_S = READ_RECORD(SJH_NS = .LIST_HEAD[1]);
	    IF JOB_SCHEDULING_POLICY(.SMQ, .SJH_S, .SJH)
	    THEN
		BEGIN
		SJH_S[SYM$L_LINK] = .SJH_N;
		LIST_HEAD[1] = .SJH_N;
		REWRITE_RECORD(.SJH_NS);
		REWRITE_RECORD(.SMQ_N);
		REWRITE_RECORD(SQH$K_RECNO);
		RESULT = ENQ_K_PENDING;
		RETURN;
		END;
	    END;


	! Search down the pending list looking for the insertion point.
	!
	SJH_NS = .LIST_HEAD[0];
	WHILE .SJH_NS NEQ 0 DO
	    BEGIN
	    SJH_S = READ_RECORD(.SJH_NS);
	    IF JOB_SCHEDULING_POLICY(.SMQ, .SJH, .SJH_S)
	    THEN
		BEGIN
		RELEASE_RECORD(.SJH_NS);
		EXITLOOP;
		END;
	    IF .SJH_NP NEQ SQH$K_RECNO THEN RELEASE_RECORD(.SJH_NP);
	    SJH_NP = .SJH_NS;
	    SJH_P = .SJH_S;
	    SJH_NS = .SJH_S[SYM$L_LINK];
	    END;


	! Enqueue the job.
	!
	IF .SJH_NP EQL SQH$K_RECNO
	THEN
	    LIST_HEAD[0] = .SJH_N
	ELSE
	    BEGIN
	    SJH_P[SYM$L_LINK] = .SJH_N;
	    REWRITE_RECORD(.SJH_NP);
	    END;


	SJH[SYM$L_LINK] = .SJH_NS;
	IF .SJH_NS EQL 0 THEN LIST_HEAD[1] = .SJH_N;
	REWRITE_RECORD(.SMQ_N);
	REWRITE_RECORD(SQH$K_RECNO);
	RESULT = ENQ_K_PENDING;
	END;
    END;
END;

END
ELUDOM
