MODULE LBR_DATA (			! Library access procedure data base
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
! FACILITY:  Library access procedures
!
! ABSTRACT:
!
!	The VAX/VMS librarian procedures implement a standard access method
!	to libraries through a shared, common procedure set.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  Benn Schreiber,	 CREATION DATE:  11-June-1979
!
! MODIFIED BY:
!
!	V03-002	GJA0090 	Greg Awdziewicz 	24-Jul-1984 
! 		- Change librarian version id to V04-00.
!
!	V03-001	JWT0114		Jim Teague		18-Apr-1983
!		Add globals for dcx address tables.  Needed in order
!		to dynamically activate DCXSHR.
!
!--



LIBRARY
	'SYS$LIBRARY:STARLET.L32';
REQUIRE
	'PREFIX';
REQUIRE
	'LBRDEF';
!
! Librarian global data
!
GLOBAL
!
! Do not change the order of the following data.  Any new data must be
! inserted at the end.
!
    lbr$gl_control : REF BBLOCK,		!Pointer to current user control table
    lbr$gl_rmsstv,				!STV from last RMS error
    lbr$al_ctltab : VECTOR [lbr$c_maxctl],	!Table of pointers to control tables
    lbr$gl_hictl : INITIAL(0),			!Highest control index in use
    lbr$gt_eotdesc : VECTOR [4, BYTE] INITIAL
			(%X '77007703'),	!End of text record
    lbr$gt_lbrver : countedstring ('VAX-11 Librarian V04-00'),
    lbr$gl_maxread,				!Maximum blocks in one RMS read
    lbr$gl_maxidxrd : INITIAL (20),		!Maximum blocks in one index read
    dcxshr_address : initial (0);		!base address of dcxshr

!
! The following macro generates a table of offsets into the DCXSHR
!	transfer vector.  Linking LBRSHR with the DCXSHR symbol table,
!	one can then call lib$adr_image to dynamically load DCXSHR.
!	The base address of DCXSHR is then added to each of these
!	DCX transfer vector entries.
!
macro dcxsym(a) []=
	external literal %name('dcx$',a);
	global %name('dcx_',a): initial (%name('dcx$',a) - dcx$analyze_init);
	dcxsym(%remaining)%;

dcxsym (analyze_init,analyze_data,analyze_done,
	compress_init,compress_data,compress_done,
	expand_init,expand_data,expand_done,make_map);


END					! Of module
ELUDOM
