MODULE dcx_expand (			! Data expansion routines
		LANGUAGE (BLISS32),
		IDENT = 'V04-000'
		) =
BEGIN

!
!****************************************************************************
!*									    *
!*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
!*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
!*  ALL RIGHTS RESERVED.						    *
!* 									    *
!*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
!*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
!*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
!*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
!*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
!*  TRANSFERRED.							    *
!* 									    *
!*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
!*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
!*  CORPORATION.							    *
!* 									    *
!*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
!*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
!* 									    *
!*									    *
!****************************************************************************

!++
!
!   FACILITY:
!
!	DCX -- Data Compression / Expansion Facility
!
!   ABSTRACT:
!
!	The Data Compression / Expansion procedures provide a general
!	method for reducing the storage requirement for a arbitrary data.
!
! ENVIRONMENT:
!
!	VAX native, user mode.
!
!--
!
!
! AUTHOR:  David Thiel
!
! CREATION DATE: July, 1981
!
! MODIFIED BY:
!
!--

%SBTTL  'Declarations';

LIBRARY
	'sys$library:starlet';	! System macros
REQUIRE
	'prefix';		! DCX macros
REQUIRE
	'dcxdef';		! DCX public structure definitions
REQUIRE
	'dcxprvdef';		! DCX private structure definitions

EXTERNAL ROUTINE
    dcx$ctx_check : lkg_ctx_check,	! Check context block
    dcx$map_check : lkg_map_check,	! Check map
    dcx$get_vm,			! Allocate memory
    dcx$free_vm,		! Deallocate memory
    dcx$long_move : lkg_long_move NOVALUE,	! Copy arbitrary length data
    lib$scopy_r_dx :		! General string copy
	ADDRESSING_MODE (GENERAL);

EXTERNAL LITERAL
    dcx$_normal,
    dcx$_invctx,
    dcx$_invdata,
    dcx$_trunc,
    lib$_strtru;

FORWARD ROUTINE
    dcx$expand_init,		! initialize for data expansion
    dcx$expand_data,		! expand data record
    dcx$do_expansion_0,		! internal expansion routine -- type 0
    dcx$expand_done;		! delete expansion context

%SBTTL  'dcx$expand_init - Initialization for data expansion'

GLOBAL ROUTINE dcx$expand_init (context_addr, map_addr) =
BEGIN
!++
!
! Initialization for data expansion.
! Allocate and initialize context area.
!
! Inputs:
!
!	context_addr.mz.r	Address of context longword
!	map_addr.ra.r		Address of map
!
! Outputs:
!
!	context_addr.mz.r	Address of context block is stored
!
! Return value:
!
!	status.wlc.v
!
!		dcx$_normal	All is well
!		dcx$_invmap	Invalid map structure
!		lib$_insvirmem	Error allocating memory
!--

BIND
    ctx = .context_addr : REF BBLOCK,	! address of context block
    dcxmap = .map_addr : REF BBLOCK;	! address of map

ctx = 0;				! assume failure
perform (dcx$map_check (.dcxmap));	! validate map
perform (dcx$get_vm (ctx$k_fixed_len + exp$k_length, ctx));
IF true
THEN
    BEGIN

    BIND
	exp = ctx [ctx$l_specific] : BBLOCK;

    LOCAL
	cptr : REF VECTOR [, LONG],
	dcxsbm : REF BBLOCK;

    ctx [ctx$l_size] = ctx$k_fixed_len + exp$k_length;
    ctx [ctx$b_type] = ctx$c_expnd;
    ctx [ctx$w_version] = ctx$c_version;
    ctx [ctx$l_sanity] = ctx$c_sanity;
    ctx [ctx$l_map] = .dcxmap;
    perform (dcx$get_vm (4 * 4 * .dcxmap [dcxmap$w_nsubs], exp [exp$l_map_segs]));
    cptr = .exp [exp$l_map_segs];
    dcxsbm = .dcxmap + .dcxmap [dcxmap$w_sub0];
    INCR i FROM 0 to .dcxmap [dcxmap$w_nsubs]-1 DO
	BEGIN
	cptr [0] = .dcxsbm + .dcxsbm [dcxsbm$w_flags];
	cptr [1] = .dcxsbm + .dcxsbm [dcxsbm$w_nodes];
	IF .dcxsbm [dcxsbm$w_next] EQL 0
	THEN
	    cptr [2] = 0
	ELSE
	    cptr [2] = .dcxsbm + .dcxsbm [dcxsbm$w_next] - 2 * .dcxsbm [dcxsbm$b_min_char];
	cptr [3] = .dcxsbm;
	cptr = cptr [4];
	dcxsbm = .dcxsbm + .dcxsbm [dcxsbm$w_size];
	END;
    END;
RETURN dcx$_normal;

END;					! of dcx$expand_init

%SBTTL  'dcx$expand_data - Expand data record'

GLOBAL ROUTINE dcx$expand_data (context_addr, in_rec : REF BBLOCK, out_rec : REF BBLOCK, out_len) =
BEGIN
!++
!
! Expand data record
!
! Inputs:
!
!	context_addr.mz.r	Address of context longword
!	in_rec.rt.dx		Descriptor for input (text) data record
!	out_rec.wt.dx		Descriptor for output (text) data buffer
!
! Outputs:
!
!	context_addr.mz.r	Context block accumulates data
!	out_rec.wt.dx		Buffer is filled with output record
!	out_len.wwu.r		Word in which to store length of
!				output record (optional)
!
! Return value:
!
!	status.wlc.v
!
!		dcx$_normal	All is well
!		dcx$_invctx	Invalid context block
!		dcx$_invmap	Invalid map
!--

BIND
    ctx = .context_addr : REF BBLOCK,	! context block
    dcxmap = ctx [ctx$l_map] : REF BBLOCK,	! map address
    res_len = .out_len : WORD;		! result length

LOCAL
    in_len,			! input length (bytes)
    in_addr,			! input data address
    status;			! return status

BUILTIN
    NULLPARAMETER;

perform (dcx$ctx_check (.ctx, ctx$c_expnd));
perform (dcx$map_check (.dcxmap));
perform (lib$analyze_sdesc_r2 (.in_rec; status, in_len, in_addr); .status);

CASE .out_rec [dsc$b_class]
    FROM MIN (dsc$k_class_z, dsc$k_class_s)
    TO MAX (dsc$k_class_z, dsc$k_class_s)
    OF
SET
[dsc$k_class_z, dsc$k_class_s]:
    BEGIN

    LOCAL
	result : LONG;

    status = dcx$do_expansion_0 (
	.ctx, .in_addr, .in_len, .out_rec [dsc$a_pointer], .out_rec [dsc$w_length],
	result);
    CH$FILL (%C' ', .out_rec [dsc$w_length] - .result, .out_rec [dsc$a_pointer]+.result);
    IF NOT NULLPARAMETER (4)
    THEN
	res_len = .result;
    END;
[inrange, outrange]:
    BEGIN

    LOCAL
	result : LONG,
	status1 : LONG,
	res_buf : VECTOR [65535, BYTE];	! result buffer

    status = dcx$do_expansion_0 (
	.ctx, .in_addr, .in_len, res_buf, %ALLOCATION (res_buf),
	result);
    status1 = lib$scopy_r_dx (result, res_buf, .out_rec);
    IF .status1 EQL lib$_strtru
    THEN
	BEGIN
	IF NOT NULLPARAMETER (4)
	THEN
	    lib$analyze_sdesc_r2 (.out_rec; status, res_len);
	status1 = dcx$_trunc;
	END
    ELSE IF NOT NULLPARAMETER (4)
    THEN
	res_len = .result;
    IF .status AND NOT .status1
    THEN
	status = .status1;
    END;
TES;
RETURN .status;

END;					! Of dcx$expand_data

%SBTTL  'dcx$do_expansion_0 - Type 0 expansion'

ROUTINE dcx$do_expansion_0 (
	ctx : REF BBLOCK, in_addr1 : REF VECTOR [, BYTE], in_bytes, out_addr1 : REF VECTOR [, BYTE], out_bytes, res_addr) =
BEGIN
!++
!
! Expand data record using type 0 expansion
!
! Inputs:
!
!	ctx			Address of context longword
!	in_addr1		Address of input record
!	in_bytes		Length of input record
!	out_addr1		Address of output buffer
!	out_bytes		Length of output buffer
!
! Outputs:
!
!	ctx			Context block accumulates data
!	res_addr		Address in which to store result length
!
! Status value:
!
!	dcx$_normal		All is well
!	dcx$_invdata		Invalid encoded data
!	dcx$_trunc		Result buffer too small - output truncated
!--

BIND
    dcxmap = ctx [ctx$l_map] : REF BBLOCK;	! map address

.res_addr = 0;			! initialize resulting length
IF .dcxmap [dcxmap$w_nsubs] NEQ 0
THEN
    BEGIN

    LOCAL
	res_len : LONG,
	in_addr : REF VECTOR [, BYTE],
	out_addr : REF VECTOR [, BYTE],
	cptr : REF VECTOR [4, LONG],
	offset : LONG;

    BIND
	exp = ctx [ctx$l_specific] : BBLOCK,
	base_ptr = exp [exp$l_map_segs] : REF VECTOR [, LONG];

    in_addr = .in_addr1;
    out_addr = .out_addr1;
    res_len = 0;
    offset = 0;
    cptr = base_ptr [0];
    DECR byte_counter FROM .in_bytes - 1 TO 0 DO
	BEGIN

	LOCAL
	    byte_full_of_bits : BITVECTOR [8];

	byte_full_of_bits = CH$RCHAR_A (in_addr);
	INCR bit_counter FROM 0 TO 7 DO
	    BEGIN

	    BIND
		flags = cptr [0] : REF BITVECTOR,
		nodes = cptr [1] : REF VECTOR [, BYTE],
		next = cptr [2] : REF VECTOR [, WORD];

	    IF .byte_full_of_bits [.bit_counter]
	    THEN
		offset = .offset + 1;
	    IF NOT .flags [.offset]
	    THEN
		BEGIN
		offset = .nodes [.offset];
		IF (offset = .offset + .offset) EQL 0
		THEN
		    RETURN dcx$_normal;
		END
	    ELSE IF .res_len LSS .out_bytes
	    THEN
		BEGIN
		out_addr [.res_len] = .nodes [.offset];
		res_len = .res_len + 1;
		.res_addr = ..res_addr + 1;
		IF .next NEQA 0
		THEN
		    cptr = base_ptr [4 * .next [.nodes [.offset]]];
		offset = 0;
		END
	    ELSE
		RETURN dcx$_trunc;
	    END;
	END;
    RETURN dcx$_invdata;
    END
ELSE IF .in_bytes GTRU .out_bytes
THEN
    BEGIN
    dcx$long_move (.out_bytes, .in_addr1, .out_addr1);
    .res_addr = .out_bytes;
    RETURN dcx$_trunc;
    END
ELSE
    BEGIN
    dcx$long_move (.in_bytes, .in_addr1, .out_addr1);
    .res_addr = .in_bytes;
    RETURN dcx$_normal;
    END;
END;					! Of dcx$do_expansion_0

%SBTTL  'dcx$expand_done -- Release data expansion context'

GLOBAL ROUTINE dcx$expand_done (context_addr) =
BEGIN
!++
!
! Release data expansion context
!
! Inputs:
!
!	context_addr.mz.r	Address of context longword
!
! Outputs:
!
!	context_addr.mz.r	Context block accumulates data
!
! Return value:
!
!	status.wlc.v
!
!		dcx$_normal	All is well
!		dcx$_invctx	Invalid context block
!		dcx$_invmap	Invalid map structure
!--

BIND
    ctx = .context_addr : REF BBLOCK,	! address of context block
    exp = ctx [ctx$l_specific] : BBLOCK,
    dcxmap = ctx [ctx$l_map] : REF BBLOCK;	! address of map

perform (dcx$ctx_check (.ctx, ctx$c_expnd));
perform (dcx$free_vm (4 * 4 * .dcxmap [dcxmap$w_nsubs], .exp [exp$l_map_segs]));
perform (dcx$free_vm (.ctx [ctx$l_size], .ctx));
ctx = 0;				! mark context as gone
RETURN dcx$_normal;

END;					! Of dcx$expand_done

END					! Of module expand
ELUDOM
