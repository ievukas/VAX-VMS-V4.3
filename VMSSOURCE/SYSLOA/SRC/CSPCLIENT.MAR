	.TITLE	 CSPCLIENT	- Client jacket routine calls to CSP
	.IDENT	'V04-000'

;****************************************************************************
;*									    *
;*  COPYRIGHT (c) 1978, 1980, 1982, 1984 BY				    *
;*  DIGITAL EQUIPMENT CORPORATION, MAYNARD, MASSACHUSETTS.		    *
;*  ALL RIGHTS RESERVED.						    *
;* 									    *
;*  THIS SOFTWARE IS FURNISHED UNDER A LICENSE AND MAY BE USED AND COPIED   *
;*  ONLY IN  ACCORDANCE WITH  THE  TERMS  OF  SUCH  LICENSE  AND WITH THE   *
;*  INCLUSION OF THE ABOVE COPYRIGHT NOTICE. THIS SOFTWARE OR  ANY  OTHER   *
;*  COPIES THEREOF MAY NOT BE PROVIDED OR OTHERWISE MADE AVAILABLE TO ANY   *
;*  OTHER PERSON.  NO TITLE TO AND OWNERSHIP OF  THE  SOFTWARE IS  HEREBY   *
;*  TRANSFERRED.							    *
;* 									    *
;*  THE INFORMATION IN THIS SOFTWARE IS  SUBJECT TO CHANGE WITHOUT NOTICE   *
;*  AND  SHOULD  NOT  BE  CONSTRUED AS  A COMMITMENT BY DIGITAL EQUIPMENT   *
;*  CORPORATION.							    *
;* 									    *
;*  DIGITAL ASSUMES NO RESPONSIBILITY FOR THE USE  OR  RELIABILITY OF ITS   *
;*  SOFTWARE ON EQUIPMENT WHICH IS NOT SUPPLIED BY DIGITAL.		    *
;* 									    *
;*									    *
;****************************************************************************
;
;++
;
; FACILITY:	VMS
;
; ABSTRACT:	Various "clients" are placed here for loading with CLUSTERLOA.
;
; AUTHOR:	Jake VanNoy
;
; DATE:		27-May-1983
;
; REVISION HISTORY:
;
;	V03-003	ADE0001		Alan D. Eldridge	 4-Feb-1984
;		Convert to use EXE$CSP_BRDCST.
;
;	V03-002	JLV0306		Jake VanNoy		29-AUG-1983
;		Check error status and deallocate CSD if failure.
;
;	V03-001	JLV0284		Jake VanNoy		28-JUL-1983
;		Minor changes to allow cluster writes.
;
;--

;
; Symbols
;

	$BRKTDEF
	$CSDDEF
	$DYNDEF

;
; Local data
;

	.PSECT	$$$190		; Read Only Data


	.PSECT	$$$200		; Code

.SBTTL	'EXE$CSP_BRKTHRU - Send Break-thru message throughout cluster'
;++
;
;
; CALLING SEQUENCE:	JSB	EXE$CSP_BRKTHRU at IPL 0
;
; INPUT PARAMETERS:	R6	Address of BRK structure
;
; OUTPUT PARAMETERS:	R0,R1	Garbage
;
;			All registers are preserved except R0,R1.
;
; COMPLETION CODES:	R0	completion status:
;				SS$_NORMAL = normal success
;				SS$_...	   = various error codes
;--
EXE$CSP_BRKTHRU::
	;
	;
	;    Get a CSD.
	;
	;
	MOVZWL	BRK$W_MSGLEN(R6),R7		; Message length
	ADDL3   #CSD$AB_DATA -			; Add to CSD header
		+CSD$T_BRK_MSGBUF,R7,R1		; 
	JSB     G^EXE$ALLOC_CSD			; Allocate and init a CSD
	BLBC    R0,200$				; If LBC, return error
	;
	;
	;    Init private portion of CSD
	;
	;
	ASSUME	CSD$L_RECVOFF  EQ  4+CSD$L_RECVLEN

	CLRQ    CSD$L_RECVLEN(R2)       	; No return data this trip
	CLRL	CSD$A_ASTADR(R2)		; No AST needed -- return will 
						; therefore be synchronous
	MOVB    S^#EXE$C_SYSEFN,CSD$B_EFN(R2)	; Legal event flag
	MNEGL	#1,CSD$L_CSID(R2)		; Use ALL BUT "my" node
	MOVAB   CSD$AB_DATA(R2),R8      	; Get ptr to private data area
	SUBL3   R2,R8,CSD$L_SENDOFF(R2) 	; Fill in the xmt data offset
	ADDL3	#CSD$T_BRK_MSGBUF,R7,-		; Fill in the xmt data length
		 CSD$L_SENDLEN(R2)		;
	MOVW    #CSD$K_BRKTHRU,CSD$W_CODE(R2)	; Client code
	;
	;
	;    Copy in BRKTHRU specific protocol
	;
	;
	ASSUME	CSD$L_BRK_FLAGS	  EQ  4+CSD$L_BRK_CARCON
	ASSUME	CSD$T_BRK_SENDTO  EQ  4+CSD$L_BRK_FLAGS	
	ASSUME	CSD$W_BRK_SNDTYP  EQ    CSD$T_BRK_SENDTO+BRK$S_SENDNAME
	ASSUME	CSD$W_BRK_REQID	  EQ  2+CSD$W_BRK_SNDTYP
	ASSUME	CSD$W_BRK_TIMOUT  EQ  2+CSD$W_BRK_REQID
	ASSUME	CSD$W_BRK_MSGLEN  EQ  2+CSD$W_BRK_TIMOUT
	ASSUME	CSD$T_BRK_MSGBUF  EQ  2+CSD$W_BRK_MSGLEN

	PUSHL   R2				; Save address of CSD
						;
	MOVL	R8,R3				; First address
	MOVL	BRK$L_CARCON(R6),(R3)+		; carriage control
	MOVL	BRK$L_FLAGS(R6),(R3)+		; Flags
	MOVC3   #CSD$S_BRK_SENDTO,-		;
		BRK$T_SENDNAME(R6),(R3)		; Copy in send to string
	MOVW	BRK$W_SENDTYPE(R6),(R3)+	; Send type
	MOVW	BRK$L_REQID(R6),(R3)+		; Requestor ID (low word)
	MOVW	BRK$W_SECONDS(R6),(R3)+		; Time out in seconds
	MOVW	R7,(R3)+			; Copy length
	MOVC3	R7,BRK$T_MSGBUF(R6),(R3)	; and message data
						;
	POPL    R2				; Get address of CSD
	; 
	;
	;    Send the buffer to the target node.
	;
	;    Since we specified an AST address of 0, the call does not return 
	;    until the dialogue with the last node has completed. Furthermore,
	;    this means that we should deallocate the CSD whether or not there's
	;     an error.  
	;
	;    See EXE$CSP_BRDCST preamble if an AST routine is to be added.  
	;    Also, if an AST routine is to be added, make sure that our caller
	;    does not have AST's enabled.
	; 
	;
	JSB     G^EXE$CSP_BRDCST		; Send message out to world
	PUSHL	R0				; Save status
						;
	MOVL	R2,R0				; Input to deallocate routine
	JSB     G^EXE$DEALLOC_CSD       	; Done with it.
						;
	POPL	R0				; Recover status
200$:	RSB					; Done


.END
